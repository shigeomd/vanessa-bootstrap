///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;

	Элементы.ГруппаНалоговыйУчет.Видимость = НЕ Форма.ЭтоУСН;
	Если НЕ Форма.ЭтоУСН Тогда
		Если Элементы.ГруппаСтраницыОтражениеВНУ.ТекущаяСтраница = Элементы.ГруппаОсновноеСредствоВНалоговомУчетеНеОтражалось Тогда
			Элементы.ГруппаНачислениеАмортизацииНУДекорация.Видимость = Ложь;
		Иначе
			Элементы.ГруппаНачислениеАмортизацииНУДекорация.Видимость = Истина;
		КонецЕсли;
	Иначе
		Элементы.ГруппаНачислениеАмортизацииНУДекорация.Видимость = Ложь;
	КонецЕсли;		
		
	Элементы.ГруппаНалоговыйУчетУСН.Видимость = Форма.ЭтоРасходыУСН;

	Если Форма.ЭтоРасходыУСН Тогда
		Если Форма.ДатаСведений < '20060101' Тогда
			НоваяТекущаяСтраница = Элементы.ГруппаПорядокВключенияСтоимостиВСоставРасходовУСНДо2006;
		Иначе
			НоваяТекущаяСтраница = Элементы.ГруппаПорядокВключенияСтоимостиВСоставРасходовУСНПосле2006;
		КонецЕсли;
		Элементы.ГруппаПорядокВключенияСтоимостиВСоставРасходовУСН.ТекущаяСтраница = НоваяТекущаяСтраница;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ВыполнитьИнициализацию()

	Если ИнициализацияВыполнена Тогда
		Возврат;
	КонецЕсли;

	ИнициализацияВыполнена = Истина;

	ДатаСведений = КонецДня(ТекущаяДатаСеанса());
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ВалютаРегламентированногоУчетаНУ = ВалютаРегламентированногоУчета;
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьСведения()

	
	ЭтоУСН = УчетнаяПолитика.ПрименяетсяУСН(Организация, ДатаСведений);
	ЭтоРасходыУСН = ЭтоУСН И НЕ УчетнаяПолитика.ПрименяетсяУСНДоходы(Организация, ДатаСведений);

	ЗаполнитьОписания();
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОписания()

	ВидСубконтоОС = Новый Массив();
	ВидСубконтоОС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);

	// Выборка из регистра сведений "Состояния ОС организаций"
	Запрос = Новый Запрос();
	ДатаВремяНаКонецДня = Новый Граница(КонецДня(ДатаСведений), ВидГраницы.Включая);
	Запрос.УстановитьПараметр("ДатаСведений", 	  ДатаВремяНаКонецДня);
	Запрос.УстановитьПараметр("ОсновноеСредство", Объект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&ДатаСведений, ОсновноеСредство = &ОсновноеСредство) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|";
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Организация = РезультатЗапроса.Выгрузить()[0].Организация;
		ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрОрганизацияФункциональныхОпцийФормы(
			ЭтаФорма,
			Организация,
			ДатаСведений);
	Иначе
		Организация = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;

	// Данные для заполнения закладки "Бухгалтерский учет"
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОсновноеСредство", Объект.Ссылка);
	Запрос.УстановитьПараметр("ДатаСведений",     Новый Граница(КонецДня(ДатаСведений), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация",      Организация);
	Запрос.УстановитьПараметр("ВидСубконтоОС",    ВидСубконтоОС);

	Запрос.Текст =
	"////////////////////////////////////////////////////////////////////////////////
	|// 0 - ПервоначальныеСведенияОСБухгалтерскийУчет
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.СпособПоступления КАК СпособПоступленияБУ,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПорядокПогашенияСтоимости КАК ПорядокПогашенияСтоимостиБУ,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.СпособНачисленияАмортизации КАК СпособНачисленияАмортизацииБУ,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимостьБУ,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПараметрВыработки КАК ПараметрВыработкиБУ,
	|	ПРЕДСТАВЛЕНИЕ(ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПараметрВыработки.ЕдиницаИзмерения) КАК ЕдиницаПараметраВыработкиБУ
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&ДатаСведений, ОсновноеСредство = &ОсновноеСредство) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|// 1 - МестонахождениеОСБухгалтерскийУчет
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.МОЛ КАК МОЛБУ,
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение КАК ПодразделениеБУ
	|ИЗ
	|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	|			&ДатаСведений,
	|			Организация = &Организация
	|				И ОсновноеСредство = &ОсновноеСредство) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|// 2 - ПараметрыАмортизацииОСБухгалтерскийУчет
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования КАК СрокИспользованияБУ,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРабот КАК ОбъемРаботБУ,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КоэффициентАмортизации КАК ПроцентГодовойАмортизацииБУ,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КоэффициентУскорения КАК КоэффициентУскоренияБУ
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|			&ДатаСведений,
	|			Организация = &Организация
	|				И ОсновноеСредство = &ОсновноеСредство) КАК ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|// 3 - ГрафикиАмортизацииОСБухгалтерскийУчет
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ГрафикиАмортизацииОСБухгалтерскийУчетСрезПоследних.ГрафикАмортизации КАК ГодовойГрафикБУ
	|ИЗ
	|	РегистрСведений.ГрафикиАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|			&ДатаСведений,
	|			Организация = &Организация
	|				И ОсновноеСредство = &ОсновноеСредство) КАК ГрафикиАмортизацииОСБухгалтерскийУчетСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|// 4 - СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.СпособыОтраженияРасходовПоАмортизации КАК СпособОтраженияРасходовПоАмортизацииБУ
	|ИЗ
	|	РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|			&ДатаСведений,
	|			Организация = &Организация
	|				И ОсновноеСредство = &ОсновноеСредство) КАК СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|//	5 - СчетаБухгалтерскогоУчетаОС
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетаБухгалтерскогоУчетаОССрезПоследних.СчетУчета КАК СчетУчетаБУ,
	|	СчетаБухгалтерскогоУчетаОССрезПоследних.СчетНачисленияАмортизации КАК СчетНачисленияАмортизацииБУ
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|			&ДатаСведений,
	|			Организация = &Организация
	|				И ОсновноеСредство = &ОсновноеСредство) КАК СчетаБухгалтерскогоУчетаОССрезПоследних";

    МассивРезультатов 	= Запрос.ВыполнитьПакет();
    СчетУчетаБУ 				= ПланыСчетов.Хозрасчетный.ПустаяСсылка();
    СчетНачисленияАмортизацииБУ = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	
    Если МассивРезультатов[0].Пустой() Тогда
		НоваяТекущаяСтраница = Элементы.ГруппаОсновноеСредствоВБухгалтерскомУчетеНеОтражалось;
		Элементы.ГруппаАмортизацияБУ.Видимость = Ложь;
	Иначе
		НоваяТекущаяСтраница = Элементы.ГруппаОтражениеОСВБУ;
		Элементы.ГруппаАмортизацияБУ.Видимость = Истина;
		
		Для Каждого РезультатЗапроса Из МассивРезультатов Цикл
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Следующий() Тогда
				ЗаполнитьЗначенияСвойств(ЭтаФорма, Выборка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Стоимостные показатели
	Если ЗначениеЗаполнено(СчетУчетаБУ) Тогда
		
		Запрос.УстановитьПараметр("СчетУчетаБУ", СчетУчетаБУ);
		Запрос.УстановитьПараметр("СчетНачисленияАмортизацииБУ", СчетНачисленияАмортизацииБУ);
		
		ТекстЗапросаСтоимость = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ХозрасчетныйОстаткиСтоимость.СуммаОстатокДт КАК ТекущаяСтоимостьБУ,
		|	ХозрасчетныйОстаткиСтоимость.СуммаНУОстатокДт КАК ТекущаяСтоимостьНУ
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&ДатаСведений,
		|			Счет = &СчетУчетаБУ,
		|			&ВидСубконтоОС,
		|			Организация = &Организация
		|				И Субконто1 = &ОсновноеСредство) КАК ХозрасчетныйОстаткиСтоимость";
		
		ТекстЗапросаАмортизация = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ХозрасчетныйОстаткиАмортизация.СуммаОстатокКт КАК ТекАмортизацияБУ,
		|	ХозрасчетныйОстаткиАмортизация.СуммаОстатокДт КАК ТекИзносБУ,
		|	ХозрасчетныйОстаткиАмортизация.СуммаНУОстатокКт КАК ТекАмортизацияНУ
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&ДатаСведений,
		|			Счет = &СчетНачисленияАмортизацииБУ,
		|			&ВидСубконтоОС,
		|			Организация = &Организация
		|				И Субконто1 = &ОсновноеСредство) КАК ХозрасчетныйОстаткиАмортизация";
		
		Запрос.Текст = ТекстЗапросаСтоимость;
		Если ЗначениеЗаполнено(СчетНачисленияАмортизацииБУ) Тогда
			Запрос.Текст = Запрос.Текст 
				+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета()
				+ ТекстЗапросаАмортизация;
		КонецЕсли;
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		Для Каждого РезультатЗапроса Из МассивРезультатов Цикл
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Следующий() Тогда
				ЗаполнитьЗначенияСвойств(ЭтаФорма, Выборка);
			КонецЕсли;
		КонецЦикла;
	
	КонецЕсли;
	Элементы.ГруппаСтраницыОтражениеВБУ.ТекущаяСтраница = НоваяТекущаяСтраница;

	РасшифровкаСрокаПолезногоИспользованияБУ = УправлениеВнеоборотнымиАктивамиКлиентСервер.РасшифровкаСрокаПолезногоИспользования(СрокИспользованияБУ);

	// Установка видимости страниц панели ПанельПогашенияСтоимости
	Если НЕ ЗначениеЗаполнено(ПорядокПогашенияСтоимостиБУ) Тогда
		НоваяТекущаяСтраница = Элементы.ГруппаПорядокПогашенияСтоимостиБУНеУказан;
	Иначе
		НоваяТекущаяСтраница = Элементы["ГруппаБУ" + ПорядокПогашенияСтоимостиБУ.Метаданные().ЗначенияПеречисления[Перечисления.ПорядокПогашенияСтоимостиОС.Индекс(ПорядокПогашенияСтоимостиБУ)].Имя];
	КонецЕсли;
	Элементы.ГруппаПогашениеСтоимости.ТекущаяСтраница = НоваяТекущаяСтраница;

	// Установка видимости страниц панели ПанельПараметрыАмортизации
	Если НЕ ЗначениеЗаполнено(СпособНачисленияАмортизацииБУ) Тогда
		НоваяТекущаяСтраница = Элементы.ГруппаСпособНачисленияАмортизацииБУНеУказан;
	Иначе
		НоваяТекущаяСтраница = Элементы["Группа" + СпособНачисленияАмортизацииБУ.Метаданные().ЗначенияПеречисления[Перечисления.СпособыНачисленияАмортизацииОС.Индекс(СпособНачисленияАмортизацииБУ)].Имя];
	КонецЕсли;
	Элементы.ГруппаПараметрыАмортизации.ТекущаяСтраница = НоваяТекущаяСтраница;

	УчетОС.ПолучитьДокументБухСостоянияОС(Объект.Ссылка, Организация, Перечисления.СостоянияОС.ПринятоКУчету,
		ДокументПринятияКУчетуБУ, ПринятоКУчетуБУ);
	УчетОС.ПолучитьДокументБухСостоянияОС(Объект.Ссылка, Организация, Перечисления.СостоянияОС.СнятоСУчета,
		ДокументСнятияСУчетаБУ, СнятоСУчетаБУ);

	УСН = УчетнаяПолитика.ПрименяетсяУСН(Организация, ДатаСведений);

	Если НЕ УСН Тогда

		// Данные для заполнения закладки "Налоговый учет".
		// Стоимостные показатели текущей стоимости и амортизации по НУ заполнены вместе с БУ.
		Запрос.Текст =
		"////////////////////////////////////////////////////////////////////////////////
		|// 0 - ПервоначальныеСведенияОСНалоговыйУчет
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.МетодНачисленияАмортизации КАК МетодНачисленияАмортизацииНУ,
		|	ЕСТЬNULL(ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ПервоначальнаяСтоимостьНУ, 0) КАК ПервоначальнаяСтоимостьНУ,
		|	ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ПорядокВключенияСтоимостиВСоставРасходов КАК ПорядокВключенияСтоимостиВСоставРасходовНУ
		|ИЗ
		|	РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчет.СрезПоследних(
		|			&ДатаСведений,
		|			Организация = &Организация
		|				И ОсновноеСредство = &ОсновноеСредство) КАК ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|// 1 - ПараметрыАмортизацииОСНалоговыйУчет
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних.СрокПолезногоИспользования КАК СрокИспользованияНУ
		|ИЗ
		|	РегистрСведений.ПараметрыАмортизацииОСНалоговыйУчет.СрезПоследних(
		|			&ДатаСведений,
		|			Организация = &Организация
		|				И ОсновноеСредство = &ОсновноеСредство) КАК ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|// 2 - НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчет
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчетСрезПоследних.СпециальныйКоэффициент, 0) КАК СпецКоэффициентНУ
		|ИЗ
		|	РегистрСведений.НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчет.СрезПоследних(
		|			&ДатаСведений,
		|			Организация = &Организация
		|				И ОсновноеСредство = &ОсновноеСредство) КАК НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчетСрезПоследних";

		МассивРезультатов = Запрос.ВыполнитьПакет();

		Если МассивРезультатов[0].Пустой() Тогда
			НоваяТекущаяСтраница = Элементы.ГруппаОсновноеСредствоВНалоговомУчетеНеОтражалось;
			Элементы.ГруппаНачислениеАмортизацииНУДекорация.Видимость = Ложь;
		Иначе
			НоваяТекущаяСтраница = Элементы.ГруппаОтражениеОСВНУ;
			Элементы.ГруппаНачислениеАмортизацииНУДекорация.Видимость = Истина;
			
			Для Каждого РезультатЗапроса Из МассивРезультатов Цикл
				Выборка = РезультатЗапроса.Выбрать();
				Если Выборка.Следующий() Тогда
					ЗаполнитьЗначенияСвойств(ЭтаФорма, Выборка);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Элементы.ГруппаСтраницыОтражениеВНУ.ТекущаяСтраница = НоваяТекущаяСтраница;
		
		РасшифровкаСрокаПолезногоИспользованияНУ = УправлениеВнеоборотнымиАктивамиКлиентСервер.РасшифровкаСрокаПолезногоИспользования(СрокИспользованияНУ);

		// Установка видимости страниц панели ПанельВключениеСтоимостиВСоставРасходов
		Если НЕ ЗначениеЗаполнено(ПорядокВключенияСтоимостиВСоставРасходовНУ) Тогда
			НоваяТекущаяСтраница = Элементы.ГруппаПорядокВключенияВРасходыНеУказан;
		Иначе
			НоваяТекущаяСтраница = Элементы["Группа" + ПорядокВключенияСтоимостиВСоставРасходовНУ.Метаданные().ЗначенияПеречисления[Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.Индекс(ПорядокВключенияСтоимостиВСоставРасходовНУ)].Имя];
		КонецЕсли;
		Элементы.ГруппаНачислениеАмортизацииНУСтраницы.ТекущаяСтраница = НоваяТекущаяСтраница;

		ПринятоКУчетуНУ = ПринятоКУчетуБУ;
		СнятоСУчетаНУ = СнятоСУчетаБУ;

	Иначе

		// Данные для заполнения закладки "Налоговый учет (УСН)"
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ОсновноеСредство", Объект.Ссылка);
		Запрос.УстановитьПараметр("ДатаСведений", Новый Граница(КонецДня(ДатаСведений), ВидГраницы.Включая));
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ПервоначальнаяСтоимостьУСН, 0) КАК ПервоначальнаяСтоимостьУСН,
		|	ЕСТЬNULL(ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.СрокПолезногоИспользования, 0) КАК СрокИспользованияУСН,
		|	ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ДатаПриобретения КАК ДатаПриобретения,
		|	ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ПорядокВключенияСтоимостиВСоставРасходовУСН КАК ПорядокВключенияСтоимостиВСоставРасходовУСН
		|ИЗ
		|	РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчетУСН.СрезПоследних(
		|		&ДатаСведений,
		|		Организация = &Организация
		|			И ОсновноеСредство = &ОсновноеСредство) КАК ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних
		|";

		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			НоваяТекущаяСтраница = Элементы.ГруппаОсновноеСредствоВНалоговомУчетеУСННеОтражалось;
		Иначе
			ЗаполнитьЗначенияСвойств(ЭтаФорма, РезультатЗапроса.Выгрузить()[0]);
			НоваяТекущаяСтраница = Элементы.ГруппаОтражениеОСВНУУСН;
		КонецЕсли;
		Элементы.ГруппаСтраницыОтражениеВНУУСН.ТекущаяСтраница = НоваяТекущаяСтраница;

		РасшифровкаСрокаПолезногоИспользованияУСН = УправлениеВнеоборотнымиАктивамиКлиентСервер.РасшифровкаСрокаПолезногоИспользования(СрокИспользованияУСН);

		ПринятоКУчетуУСН = ПринятоКУчетуБУ;
		СнятоСУчетаУСН = СнятоСУчетаБУ;

	КонецЕсли;

	ЗаполнитьТекстПроДокументы();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТекстПроДокументы()

	Если ДокументПринятияКУчетуБУ = Неопределено Тогда
		ДокументПринятияКУчетуБУПредставление = НСтр("ru = 'Ввести документ принятия к учету'");
		ПринятоКУчетуБУ = '00010101';
		ПринятоКУчетуНУ = '00010101';
		ПринятоКУчетуУСН = '00010101';
	Иначе
		ДокументПринятияКУчетуБУПредставление = Строка(ДокументПринятияКУчетуБУ);
		ИмяТипаДокументаПринятияКУчету = ДокументПринятияКУчетуБУ.Метаданные().Имя;
	КонецЕсли;

	ДокументПринятияКУчетуНУПредставление = ДокументПринятияКУчетуБУПредставление;
	ДокументПринятияКУчетуУСНПредставление = ДокументПринятияКУчетуБУПредставление;
	
	Если ДокументСнятияСУчетаБУ = Неопределено Тогда
		ДокументСнятияСУчетаБУПредставление = НСтр("ru = 'Ввести документ списания'");
		СнятоСУчетаБУ = '00010101';
		СнятоСУчетаНУ = '00010101';
		СнятоСУчетаУСН = '00010101';
	Иначе
		ДокументСнятияСУчетаБУПредставление = Строка(ДокументСнятияСУчетаБУ);
		ИмяТипаДокументаСнятияСУчета = ДокументСнятияСУчетаБУ.Метаданные().Имя;
	КонецЕсли;
	
	ДокументСнятияСУчетаНУПредставление = ДокументСнятияСУчетаБУПредставление;
	ДокументСнятияСУчетаУСНПредставление = ДокументСнятияСУчетаБУПредставление;

КонецПроцедуры

// Процедура проверяет, совпадало ли ранее полное наименование с наименованием,
// и присваивает соответствующее значение переменной мФормироватьНаименованиеПолноеАвтоматически.
//
// Параметры:
//  Нет.
//
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФлагФормироватьНаименованиеПолноеАвтоматически(Форма)

	Если ПустаяСтрока(Форма.Объект.НаименованиеПолное)
	 ИЛИ Форма.Объект.НаименованиеПолное = Форма.Объект.Наименование Тогда
		Форма.ФормироватьНаименованиеПолноеАвтоматически = Истина;
	Иначе
		Форма.ФормироватьНаименованиеПолноеАвтоматически = Ложь;
	КонецЕсли;

КонецПроцедуры

// Процедура проверяет, необходимо ли формировать полное наименование автоматически или нет,
// и, если необходимо, формирует его.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура СформироватьНаименованиеПолноеАвтоматически()

	Если ФормироватьНаименованиеПолноеАвтоматически Тогда
		Объект.НаименованиеПолное = Объект.Наименование;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДокументПринятияКУчетуБУНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Если Параметры.Ключ.Пустая() Тогда
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Ввод документа принятия к учету возможен только после записи.
			|Данные будут записаны.'");
		Оповещение = Новый ОписаниеОповещения("ВопросВводПринятияКУчетуПослеЗаписиЗавершение", ЭтотОбъект);
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ОткрытьФормуПринятиеКУчетуОС();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросВводПринятияКУчетуПослеЗаписиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Если Записать() Тогда // Записать новый объект, чтобы его можно было поместить в документ
			ОткрытьФормуПринятиеКУчетуОС();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПринятиеКУчетуОС()

	ПараметрыОткрытия = Новый Структура;
	Если ДокументПринятияКУчетуБУ = Неопределено Тогда
		ПараметрыОткрытия.Вставить("Основание", Объект.Ссылка);
		ОткрытьФорму("Документ.ПринятиеКУчетуОС.ФормаОбъекта", ПараметрыОткрытия, ЭтаФорма);
	Иначе
		ПараметрыОткрытия.Вставить("Ключ", ДокументПринятияКУчетуБУ);
		ОткрытьФорму("Документ." + ИмяТипаДокументаПринятияКУчету + ".ФормаОбъекта", ПараметрыОткрытия, ЭтаФорма);
	КонецЕсли;

	ОбновитьСведения();

КонецПроцедуры

&НаКлиенте
Процедура ДокументСнятияСУчетаБУНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Если Параметры.Ключ.Пустая() Тогда
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Ввод документа снятия с учета возможен только после записи.
			|Данные будут записаны.'");
			
		Оповещение = Новый ОписаниеОповещения("ВопросВводСнятиеСУчетаОСПослеЗаписиЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ОткрытьФормуСписаниеОС();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросВводСнятиеСУчетаОСПослеЗаписиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Если Записать() Тогда
			ОткрытьФормуСписаниеОС();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСписаниеОС()

	ПараметрыФормы = Новый Структура;
	Если ДокументСнятияСУчетаБУ = Неопределено Тогда
		ПараметрыФормы.Вставить("Основание", Объект.Ссылка);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ПодразделениеОрганизации", ПодразделениеБУ);
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", СтруктураПараметров);
		ОткрытьФорму("Документ.СписаниеОС.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	Иначе
		ПараметрыФормы.Вставить("Ключ", ДокументСнятияСУчетаБУ);
		ОткрытьФорму("Документ." + ИмяТипаДокументаСнятияСУчета +".ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	КонецЕсли;

	ОбновитьСведения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборКодаПоОКОФ(ВыбранноеЗначение)

	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;

	СтарыйОКОФ 					= Объект.КодПоОКОФ;
	СтараяАмортизационнаяГруппа = Объект.АмортизационнаяГруппа;
	
	КодОКОФ 				= ВыбранноеЗначение.ОКОФ;
	АмортизационнаяГруппа 	= ВыбранноеЗначение.АмортизационнаяГруппа;
	ОКОФЭтоГруппа 			= ВыбранноеЗначение.ОКОФЭтоГруппа;
	
	Если Не ОКОФЭтоГруппа Тогда 
		Объект.КодПоОКОФ = КодОКОФ;
		Объект.АмортизационнаяГруппа = АмортизационнаяГруппа;
		
		ЭтаФорма.Модифицированность = ЭтаФорма.Модифицированность
			ИЛИ СтарыйОКОФ <> КодОКОФ
			ИЛИ СтараяАмортизационнаяГруппа <> АмортизационнаяГруппа;
		
	Иначе
		Объект.КодПоОКОФ = Неопределено;
		Объект.АмортизационнаяГруппа = Неопределено;
		
		ЭтаФорма.Модифицированность = ЭтаФорма.Модифицированность
			ИЛИ СтарыйОКОФ <> ПредопределенноеЗначение("Справочник.ОбщероссийскийКлассификаторОсновныхФондов.ПустаяСсылка")
			ИЛИ ЗначениеЗаполнено(СтараяАмортизационнаяГруппа);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция КодПоОКОФПриИзмененииНаСервере(КодПоОКОФ)
	
	Возврат РегистрыСведений.АмортизационныеГруппыОКОФ.ПолучитьАмортизационнуюГруппу(КодПоОКОФ);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПолеНаименованияКода(ИмяКлассификатора)

	Классификатор = Объект["Код" + ИмяКлассификатора];
	ЭтаФорма[ИмяКлассификатора+"Наименование"] = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Классификатор, "Наименование");

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОДСИСТЕМЫ "КОНТАКТНАЯ ИНФОРМАЦИЯ"

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	
	УправлениеКонтактнойИнформациейКлиент.ПредставлениеПриИзменении(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Результат = УправлениеКонтактнойИнформациейКлиент.ПредставлениеНачалоВыбора(ЭтаФорма, Элемент, , СтандартнаяОбработка);
	ОбновитьКонтактнуюИнформацию(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	
	Результат = УправлениеКонтактнойИнформациейКлиент.ПредставлениеОчистка(ЭтаФорма, Элемент.Имя);
	ОбновитьКонтактнуюИнформацию(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	
	Результат = УправлениеКонтактнойИнформациейКлиент.ПодключаемаяКоманда(ЭтаФорма, Команда.Имя);
	ОбновитьКонтактнуюИнформацию(Результат);
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуВводаАдреса(ЭтаФорма, Результат);
	
КонецПроцедуры

&НаСервере
Функция ОбновитьКонтактнуюИнформацию(Результат = Неопределено)
	
	Возврат УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтаФорма, Объект, Результат);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ДатаСведенийПриИзменении(Элемент)

	ОбновитьСведения();

КонецПроцедуры

&НаКлиенте
Процедура ДокументПринятияКУчетуБУПредставлениеНажатие(Элемент, СтандартнаяОбработка)

	ДокументПринятияКУчетуБУНажатие(Элемент, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ДокументПринятияКУчетуБУПредставление1Нажатие(Элемент, СтандартнаяОбработка)

	ДокументПринятияКУчетуБУНажатие(Элемент, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ДокументПринятияКУчетуБУПредставление2Нажатие(Элемент, СтандартнаяОбработка)

	ДокументПринятияКУчетуБУНажатие(Элемент, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ДокументПринятияКУчетуБУПредставление3Нажатие(Элемент, СтандартнаяОбработка)

	ДокументПринятияКУчетуБУНажатие(Элемент, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ДокументСнятияСУчетаБУПредставлениеНажатие(Элемент, СтандартнаяОбработка)

	ДокументСнятияСУчетаБУНажатие(Элемент, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ДокументСнятияСУчетаБУПредставление1Нажатие(Элемент, СтандартнаяОбработка)

	ДокументСнятияСУчетаБУНажатие(Элемент, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ДокументСнятияСУчетаБУПредставление2Нажатие(Элемент, СтандартнаяОбработка)

	ДокументСнятияСУчетаБУНажатие(Элемент, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)

	СформироватьНаименованиеПолноеАвтоматически();

КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеПриИзменении(Элемент)

	УстановитьФлагФормироватьНаименованиеПолноеАвтоматически(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ГруппаОСПриИзменении(Элемент)
	ОбщегоНазначенияБПКлиент.ПоказатьПредупреждениеОбИзменениях("ВлияниеГруппыОСНаНалогНаИмущество", , НастройкиПредупреждений);
	Если ПредопределенноеЗначение("Перечисление.ГруппыОС.ТранспортныеСредства") = Объект.ГруппаОС Тогда 
		Элементы.Автотранспорт.Доступность = Истина;
	Иначе
		Объект.Автотранспорт = Ложь;
		Элементы.Автотранспорт.Доступность = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КодПоОКОФПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.АмортизационнаяГруппа) Тогда
		Объект.АмортизационнаяГруппа = КодПоОКОФПриИзмененииНаСервере(Объект.КодПоОКОФ);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОДСИСТЕМЫ СВОЙСТВ

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств(Команда)

	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма, Объект.Ссылка);

КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()

	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма, РеквизитФормыВЗначение("Объект"));

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.Печать
	
	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ВыполнитьИнициализацию();	
		ЗаполнитьОписания();
		ФормироватьНаименованиеПолноеАвтоматически = Истина;
	КонецЕсли;

	УправлениеФормой(ЭтаФорма);

	// Обработчик подсистемы "Контактная информация"
	ТаблицаРазмещенияКИ	= УправлениеКонтактнойИнформациейБП.ПолучитьПустуюТаблицуРазмещенияКонтактнойИнформации();
	
	УправлениеКонтактнойИнформациейБП.ДобавитьОписаниеРазмещенияКонтактнойИнформации(ТаблицаРазмещенияКИ,
			Справочники.ВидыКонтактнойИнформации.АдресМестонахожденияОсновныеСредства, Элементы.АдресМестонахождения.ПутьКДанным);
			
	УправлениеКонтактнойИнформациейБП.ПриСозданииНаСервере(ЭтаФорма, Объект, "ГруппаАдресМестонахождения", "", ТаблицаРазмещенияКИ);
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, Объект, "ГруппаДополнительныеРеквизиты");

	// Уведомим о появлении функционала
	НастройкиПредупреждений = ОбщегоНазначенияБП.НастройкиПредупрежденийОбИзменениях("ВлияниеГруппыОСНаНалогНаИмущество");
	
	ИнформационныйЦентрСервер.ВывестиКонтекстныеСсылки(ЭтаФорма, Элементы.ИнформационныеСсылки);
	
	Если Перечисления.ГруппыОС.ТранспортныеСредства = Объект.ГруппаОС Тогда 
		Элементы.Автотранспорт.Доступность = Истина;
	Иначе
		Объект.Автотранспорт = Ложь;
		Элементы.Автотранспорт.Доступность = Ложь;
	КонецЕсли;
	
	СпрОбъект = ДанныеФормыВЗначение(Объект, Тип("СправочникОбъект.ОсновныеСредства"));
	Если СпрОбъект.ЭтоНовый() Тогда
		Объект.ТипОС = Перечисления.ТипыОС.ОбъектОС;
	КонецЕсли;
	
	ЗаполнитьПолеНаименованияКода("ОКВЭД");
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	ВыполнитьИнициализацию();

	ЗаполнитьОписания();
	
	ЭтоУСН = УчетнаяПолитика.ПрименяетсяУСН(Организация, ДатаСведений);
	ЭтоРасходыУСН = ЭтоУСН И НЕ УчетнаяПолитика.ПрименяетсяУСНДоходы(Организация, ДатаСведений);

	УстановитьФлагФормироватьНаименованиеПолноеАвтоматически(ЭтаФорма);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	// Обработчик подсистемы "Контактная информация"
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект, Отказ);

	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Справочники.ВидыНалоговИПлатежейВБюджет.СоздатьПоставляемыеЭлементы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ИзмененаИнформацияОС" И Параметр = Параметры.Ключ Тогда
		
		ОбновитьСведения();
		
	ИначеЕсли ИмяСобытия = "ВыборАмортизационнойГруппыОС" И Источник = ЭтаФорма.УникальныйИдентификатор Тогда
	
		ОбработатьВыборКодаПоОКОФ(Параметр);
		
	КонецЕсли;

	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	

	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтаФорма, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация

КонецПроцедуры

&НаКлиенте
Процедура КодПоОКОФНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("КодПоОКОФ", 			Объект.КодПоОКОФ);
	ПараметрыОткрытия.Вставить("АмортизационнаяГруппа", Объект.АмортизационнаяГруппа);

	ОткрытьФорму("Справочник.ОсновныеСредства.Форма.ФормаВыбораАмортизационнойГруппы", ПараметрыОткрытия, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОКВЭДКодПриИзменении(Элемент)
	
	ЗаполнитьПолеНаименованияКода("ОКВЭД");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Подключаемый_НажатиеНаИнформационнуюСсылку(Элемент)

	ИнформационныйЦентрКлиент.НажатиеНаИнформационнуюСсылку(ЭтаФорма, Элемент);

КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_НажатиеНаСсылкуВсеИнформационныеСсылки(Элемент)

	ИнформационныйЦентрКлиент.НажатиеНаСсылкуВсеИнформационныеСсылки(ЭтаФорма.ИмяФормы);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	ОписаниеКоманды = УправлениеПечатьюКлиентПовтИсп.ОписаниеКомандыПечати(Команда.Имя, ЭтаФорма.Команды.Найти("АдресКомандПечатиВоВременномХранилище").Действие);
	ОписаниеКоманды.Вставить("ДатаСведений", ДатаСведений);
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(ОписаниеКоманды, ЭтаФорма, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать


&НаКлиенте
Процедура ГруппаОСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ГруппыОС.КапитальныеВложенияВАрендованноеИмущество") Тогда 
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АдресМестонахожденияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.ПредставлениеНачалоВыбора(ЭтаФорма, Элемент, Модифицированность, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрОповещения = Новый Структура("Ссылка", Объект.Ссылка);
	
	Оповестить("ИзмененОбъектОС", ПараметрОповещения);
	
КонецПроцедуры
