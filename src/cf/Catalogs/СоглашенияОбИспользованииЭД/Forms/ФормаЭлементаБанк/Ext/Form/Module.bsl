

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("РежимОткрытияОкна") Тогда
		РежимОткрытияОкна = Параметры.РежимОткрытияОкна;
	КонецЕсли;
	
	ОбъектЭлемента = РеквизитФормыВЗначение("Объект");
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда // новый
		Объект.СтатусСоглашения = Перечисления.СтатусыСоглашенийЭД.НеСогласовано;
		Объект.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка;
		Объект.РесурсВходящихДокументов = "";
		Объект.ПрограммаБанка = Перечисления.ПрограммыБанка.АсинхронныйОбмен;
		Объект.ИспользуетсяКриптография = Ложь;
		ЭтоНовый = Истина;
		ЗаполнитьЗначенияСвойств(Объект, Параметры);
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			НастройкиОбменаСБанком = ЭлектронныеДокументыСлужебныйВызовСервера.НастройкиОбменаСБанком(Объект.Контрагент);
			Если ЗначениеЗаполнено(НастройкиОбменаСБанком) Тогда
				Объект.ПрограммаБанка = НастройкиОбменаСБанком.ПрограммаБанка;
				Элементы.ВидБанковскойСистемы.Видимость = Ложь;
			КонецЕсли;
			Объект.ИспользуетсяКриптография = ИспользуетсяКриптография(Объект.ПрограммаБанка);
			ЗаполнитьВидыЭДДоступнымиЗначениями();
			ОбновитьТабличныеЧасти(Объект.ИспользуетсяКриптография, Объект.ВходящиеДокументы, Объект.ИсходящиеДокументы);
		КонецЕсли;
	ИначеЕсли Объект.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн Тогда
		СправочникОбъект = РеквизитФормыВЗначение("Объект");
		Попытка
			ДвоичныеДанныеСертификата  = СправочникОбъект.СертификатКонтрагентаДляШифрования.Получить();
			Если ДвоичныеДанныеСертификата <> Неопределено Тогда
				СертификатКриптографии = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
				СертификатБанка = ЭлектроннаяПодписьКлиентСервер.ПредставлениеСубъекта(СертификатКриптографии);
			КонецЕсли;
		Исключение
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
							+ НСтр("ru = ' (подробности см. в Журнале регистрации).'");
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Операция = НСтр("ru = 'открытие формы соглашения'");
			ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(Операция, ТекстОшибки, ТекстСообщения, 1);
		КонецПопытки;
		ДвоичныеДанныеКомпоненты = СправочникОбъект.ВнешняяКомпонента.Получить();
		Если ТипЗнч(ДвоичныеДанныеКомпоненты) = Тип("ДвоичныеДанные") Тогда
			Элементы.ИнформацияОКомпоненте.Заголовок = Нстр("ru = 'Загружена. Обновить из файла...'");
		Иначе
			Элементы.ГруппаСертификатыСбербанк.Доступность = Ложь;
			Элементы.ИнформацияОКомпоненте.Заголовок = Нстр("ru = 'Не загружена. Загрузить из файла...'");
		КонецЕсли;
		Элементы.ВидБанковскойСистемы.Видимость = Ложь;
	ИначеЕсли ЗначениеЗаполнено(Объект.Контрагент) Тогда
		НастройкиОбменаСБанком = ЭлектронныеДокументыСлужебныйВызовСервера.НастройкиОбменаСБанком(Объект.Контрагент);
		Элементы.ВидБанковскойСистемы.Видимость = НЕ ЗначениеЗаполнено(НастройкиОбменаСБанком);
	КонецЕсли;
	
	Элементы.СтраницыВидыБанковскихСистем.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
	Если ЗначениеЗаполнено(Параметры.НастройкиЗаполнения) Тогда
		ЗаполнитьНастройкиСоглашения(Параметры.НастройкиЗаполнения);
		Элементы.ВидБанковскойСистемы.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Объект.Контрагент = ЭлектронныеДокументыПовтИсп.ПолучитьПустуюСсылку("Банки");
	КонецЕсли;
	
	ВключеныДополнительныеОтчетыИОбработки = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции(
																			"ИспользоватьДополнительныеОтчетыИОбработки");
	
	Элементы.ДополнительнаяОбработка.Доступность = ВключеныДополнительныеОтчетыИОбработки;
	
	ИспользуютсяЭП = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции(
																"ИспользоватьЭлектронныеПодписиЭД");

	Элементы.ГруппаПредупреждения.Видимость = Не ИспользуютсяЭП И Объект.ИспользуетсяКриптография
		И (Объект.ПрограммаБанка = Перечисления.ПрограммыБанка.АльфаБанкОнлайн
			ИЛИ Объект.ПрограммаБанка = Перечисления.ПрограммыБанка.АсинхронныйОбмен);
			
	ДоступнаРольПолныеПрава = РольДоступна("ПолныеПрава");
	
	Если НЕ ДоступнаРольПолныеПрава Тогда
		Элементы.ВыгрузитьСертификатВФайл.Видимость = Ложь;
	КонецЕсли;
			
	ПереключитьСтраницы(ЭтотОбъект, Объект.ПрограммаБанка, Объект.ИспользуетсяКриптография, ДоступнаРольПолныеПрава,
		Объект.АутентификацияПоСертификату);
	
	ТекущаяОрганизация = Объект.Организация;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПереключитьСтраницы(ЭтотОбъект, Объект.ПрограммаБанка, Объект.ИспользуетсяКриптография, ДоступнаРольПолныеПрава);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(Параметры.НастройкиЗаполнения) Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОчиститьСообщения();
	
	Если Объект.СтатусСоглашения = ПредопределенноеЗначение("Перечисление.СтатусыСоглашенийЭД.Действует") Тогда
		ТекстОшибкиАктуальности = "";
		ПроверитьАктуальностьДанныхСоглашения(ТекстОшибкиАктуальности);
		Если НЕ ПустаяСтрока(ТекстОшибкиАктуальности) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиАктуальности, , , , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Объект.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка");
	
	Если ЗначениеЗаполнено(Объект.АдресСервера) И НЕ ПравильныйФорматАдреса()
		И Объект.СтатусСоглашения = ПредопределенноеЗначение("Перечисление.СтатусыСоглашенийЭД.Действует") Тогда
		
		ТекстСообщения = НСтр("ru = 'Адрес сервера банка должен начинаться с """"https://"""" или """"http://""""'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "АдресСервера", "Объект", Отказ);
		
	КонецЕсли;
	
	УдалитьПустыеСтрокиТаблиц();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если СохранитьСертификатСбербанка Тогда
		Если ЗначениеЗаполнено(АдресСертификатаСбербанка) Тогда
			ДвоичныеДанныеСертификатаСбербанка = ПолучитьИзВременногоХранилища(АдресСертификатаСбербанка);
		Иначе
			ДвоичныеДанныеСертификатаСбербанка = Неопределено;
		КонецЕсли;
		СтепеньСжатия = Новый СжатиеДанных(9);
		ТекущийОбъект.СертификатКонтрагентаДляШифрования = Новый ХранилищеЗначения(
			ДвоичныеДанныеСертификатаСбербанка, СтепеньСжатия);
	КонецЕсли;
		
	Если СохранитьВнешнююКомпонентуСбербанка Тогда
		Если ЗначениеЗаполнено(АдресВнешнейКомпонентыСбербанка) Тогда
			ДвоичныеДанныеВнешнейКомпонентыСбербанка = ПолучитьИзВременногоХранилища(АдресВнешнейКомпонентыСбербанка);
		Иначе
			ДвоичныеДанныеВнешнейКомпонентыСбербанка = Неопределено;
		КонецЕсли;
		СтепеньСжатия = Новый СжатиеДанных(9);
		ТекущийОбъект.ВнешняяКомпонента = Новый ХранилищеЗначения(ДвоичныеДанныеВнешнейКомпонентыСбербанка, СтепеньСжатия);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ИзмененоСоглашениеЭД", Объект.Ссылка);
	
	Если ЗначениеЗаполнено(ОписаниеОповещенияОЗакрытии) Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗакрытии, Объект.Ссылка);
	КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЭтоНовый Тогда
		
		Менеджер = РегистрыСведений.СостоянияОбменовЭДСБанками.СоздатьМенеджерЗаписи();
		Менеджер.НастройкаЭДО = Объект.Ссылка;
		Менеджер.ПоследняяДатаПолученияЭД = ТекущаяДатаСеанса();
		Менеджер.Записать();
		
	КонецЕсли;
	
	Если НЕ ИспользуютсяЭП И Объект.ИспользуетсяКриптография
		И (Объект.ПрограммаБанка = Перечисления.ПрограммыБанка.АльфаБанкОнлайн
			ИЛИ Объект.ПрограммаБанка = Перечисления.ПрограммыБанка.АсинхронныйОбмен) Тогда
		УстановитьПривилегированныйРежим(Истина);
		Константы.ИспользоватьЭлектронныеПодписи.Установить(Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияОтправительПриИзменении(Элемент)
	
	Если Объект.СертификатыПодписейОрганизации.Количество() И Не ТекущаяОрганизация = Объект.Организация
		И Объект.ИспользуетсяКриптография Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПослеПодтвержденияИзмененияОрганизации", ЭтотОбъект);
		ТекстВопроса = Нстр("ru = 'После изменения организации список сертификатов будет очищен.'");
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(Истина, Нстр("ru = 'Сменить организацию'"));
		Кнопки.Добавить(Ложь, Нстр("ru = 'Отменить изменение'"));
		ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки, , Истина, Нстр("ru = 'Изменение организации'"));
		Возврат;
	ИначеЕсли Не ТекущаяОрганизация = Объект.Организация Тогда
		Объект.СертификатыПодписейОрганизации.Очистить();
	КонецЕсли;
	
	Объект.Наименование = Строка(Объект.Организация) + " - " + Строка(Объект.Контрагент);
	
	ТекущаяОрганизация = Объект.Организация;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОтправительОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.СертификатыПодписейОрганизации.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура БанкПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		НастройкиОбменаСБанком = ЭлектронныеДокументыСлужебныйВызовСервера.НастройкиОбменаСБанком(Объект.Контрагент);
	КонецЕсли;
	Если ЗначениеЗаполнено(НастройкиОбменаСБанком) Тогда
		Объект.ПрограммаБанка = НастройкиОбменаСБанком.ПрограммаБанка;
		Элементы.ВидБанковскойСистемы.Видимость = Ложь;
	Иначе
		Элементы.ВидБанковскойСистемы.Видимость = Истина;
	КонецЕсли;
	ВидБанковскойСистемыПриИзменении(Неопределено);
	
	Объект.Наименование = Строка(Объект.Организация) + " - " + Строка(Объект.Контрагент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидБанковскойСистемыПриИзменении(Элемент)
	
	Объект.ИспользуетсяКриптография = ИспользуетсяКриптография(Объект.ПрограммаБанка);
	
	ПереключитьСтраницы(ЭтотОбъект, Объект.ПрограммаБанка, Объект.ИспользуетсяКриптография, ДоступнаРольПолныеПрава,
		Объект.АутентификацияПоСертификату);
	
	Если Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку") Тогда
		ВключеныДополнительныеОтчетыИОбработки = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции(
																			"ИспользоватьДополнительныеОтчетыИОбработки");
		Если НЕ ВключеныДополнительныеОтчетыИОбработки Тогда
			ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ТекстСообщенияОНеобходимостиНастройкиСистемы(
																					"ДОПОЛНИТЕЛЬНЫЕОТЧЕТЫИОБРАБОТКИ");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	ИначеЕсли Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн") Тогда
		Элементы.ГруппаСертификатыСбербанк.Доступность = Ложь;
		Элементы.ИнформацияОКомпоненте.Заголовок = Нстр("ru = 'Не загружена. Загрузить из файла...'");
	КонецЕсли;
	ЗаполнитьВидыЭДДоступнымиЗначениями();
	ОбновитьТабличныеЧасти(Объект.ИспользуетсяКриптография, Объект.ВходящиеДокументы, Объект.ИсходящиеДокументы);
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатБанкаПриИзменении(Элемент)
	
	Если ПустаяСтрока(Элемент.ТекстРедактирования) Тогда
		АдресСертификатаСбербанка = "";
		СохранитьСертификатСбербанка = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатБанкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыполнитьЗагрузкуСертификатаБанка();
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатБанкаОчистка(Элемент, СтандартнаяОбработка)
	
	АдресСертификатаСбербанка = "";
	СохранитьСертификатСбербанка = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантАутентификацииАсинхронныйОбменПриИзменении(Элемент)
	
	Модифицированность = Истина;
	Объект.АутентификацияПоСертификату = Булево(ВариантАутентификации);
	ПереключитьСтраницы(ЭтотОбъект, Объект.ПрограммаБанка, Объект.ИспользуетсяКриптография, ДоступнаРольПолныеПрава,
		Объект.АутентификацияПоСертификату);
		
КонецПроцедуры

&НаКлиенте
Процедура ИспользуетсяКриптографияПриИзменении(Элемент)
	
	ПереключитьСтраницы(ЭтотОбъект, Объект.ПрограммаБанка, Объект.ИспользуетсяКриптография, ДоступнаРольПолныеПрава,
		Объект.АутентификацияПоСертификату);
	ЗаполнитьВидыЭДДоступнымиЗначениями();
	ОбновитьТабличныеЧасти(Объект.ИспользуетсяКриптография, Объект.ВходящиеДокументы, Объект.ИсходящиеДокументы);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияОКомпонентеНажатие(Элемент)
	
	#Если ВебКлиент Тогда
		АдресВХранилище = Неопределено;
		Обработчик = Новый ОписаниеОповещения("СохранитьКомпонентуПослеВыбораФайлаВВебКлиенте", ЭтотОбъект);
		НачатьПомещениеФайла(Обработчик, АдресВХранилище, "*.zip", Истина, УникальныйИдентификатор);
	#Иначе
		Режим = РежимДиалогаВыбораФайла.Открытие;
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
		ДиалогОткрытияФайла.ПолноеИмяФайла = "";
		Фильтр = НСтр("ru = 'Файл внешней компоненты'") + "(*.zip)|*.zip";
		ДиалогОткрытияФайла.Фильтр = Фильтр;
		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
		ДиалогОткрытияФайла.Заголовок = "Выберите файл внешней компоненты Сбербанка";
		Обработчик = Новый ОписаниеОповещения("СохранитьКомпонентыПослеВыбораФайла", ЭтотОбъект);
		ДиалогОткрытияФайла.Показать(Обработчик);
	#КонецЕсли

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСертификатыПодписейОрганизацииОбработка

&НаКлиенте
Процедура СертификатыПодписейОрганизацииОбработкаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	ВнешнийПодключаемыйМодуль = ЭлектронныеДокументыСлужебныйКлиент.ВнешнийПодключаемыйМодульЧерезДополнительнуюОбработку(
																											Объект.Ссылка);
	Если ВнешнийПодключаемыйМодуль = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ДанныеСертификата = ЭлектронныеДокументыСлужебныйКлиент.ДанныеСертификатаЧерезДополнительнуюОбработку(
															ВнешнийПодключаемыйМодуль, ВыбранноеЗначение);
	
	Если Не ЗначениеЗаполнено(ДанныеСертификата) Тогда
		Возврат;
	КонецЕсли;
	
	НовыйСертификат = НовыйСертификат(ВыбранноеЗначение, ДанныеСертификата, Объект.Организация, Объект.ПрограммаБанка);
	
	СтрокаСоглашения = Объект.СертификатыПодписейОрганизации.Добавить();
	СтрокаСоглашения.Сертификат = НовыйСертификат;
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСертификатыПодписейОрганизацииКомпонента

&НаКлиенте
Процедура СертификатыПодписейОрганизацииКомпонентаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ДанныеСертификата = ЭлектронныеДокументыСлужебныйКлиент.ДанныеСертификатаiBank2(ВыбранноеЗначение);
		
	Если Не ЗначениеЗаполнено(ДанныеСертификата) Тогда
		Возврат;
	КонецЕсли;
	
	НовыйСертификат = НовыйСертификат(ВыбранноеЗначение, ДанныеСертификата, Объект.Организация, Объект.ПрограммаБанка);
	
	СтрокаСоглашения = Объект.СертификатыПодписейОрганизации.Добавить();
	СтрокаСоглашения.Сертификат = НовыйСертификат;
	Модифицированность = Истина;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЖурналАудита(Команда)

	ОткрытьФорму("РегистрСведений.ЖурналАудитаСбербанк.ФормаСписка", Новый Структура("СоглашениеЭД", Объект.Ссылка));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСертификат(Команда)
	
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = Нстр("ru = 'Необходимо выбрать организацию'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Организация", , Отказ);
	КонецЕсли;
	
	Если Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку")
			И НЕ ЗначениеЗаполнено(Объект.ДополнительнаяОбработка) Тогда
		ТекстСообщения = Нстр("ru = 'Необходимо выбрать дополнительную обработку'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.ДополнительнаяОбработка", , Отказ);
	КонецЕсли;

	Если Отказ ИЛИ НЕ СоглашениеЗаписано("ВыполнитьЗагрузкуСертификата") Тогда
		Возврат;
	Иначе
		ВыполнитьЗагрузкуСертификата(КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТестНастроек(Команда)
	
	ОчиститьСообщения();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПровестиТестНастройкиЭДО", ЭтотОбъект);
	Если Модифицированность ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстВопроса = НСтр("ru = 'Необходимо сохранить текущую настройку ЭДО. Продолжить выполнение теста?'");
		СписокКнопок = Новый СписокЗначений();
		СписокКнопок.Добавить(Истина, НСтр("ru = 'Сохранить и выполнить тест'"));
		СписокКнопок.Добавить(Ложь, НСтр("ru = 'Отменить тест'"));
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок, , Истина, НСтр("ru = 'Тест настроек'"));
	Иначе
		ПровестиТестНастройкиЭДО();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НачальнаяДатаЗапросаДанных(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СоглашениеЭД", Объект.Ссылка);
	ПараметрыФормы.Вставить("РежимОткрытияОкна", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ОткрытьФорму("РегистрСведений.СостоянияОбменовЭДСБанками.Форма.РедактированиеЗаписи", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройки(Команда)

	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		НастройкиОбменаСБанком = ЭлектронныеДокументыСлужебныйВызовСервера.НастройкиОбменаСБанком(Объект.Контрагент);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НастройкиОбменаСБанком) ИЛИ НастройкиОбменаСБанком.СпособАутентификации = "ИзФайла" Тогда
		#Если ВебКлиент Тогда
			АдресВХранилище = Неопределено;
			Обработчик = Новый ОписаниеОповещения("ПослеВыбораФайлаВВебКлиентеЗаполнитьНастройки", ЭтотОбъект);
			НачатьПомещениеФайла(Обработчик, АдресВХранилище, "*.xml", Истина, УникальныйИдентификатор);
		#Иначе
			Режим = РежимДиалогаВыбораФайла.Открытие;
			ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
			ДиалогОткрытияФайла.ПолноеИмяФайла = "";
			Фильтр = НСтр("ru = 'Файл настроек'") + "(*.xml)|*.xml";
			ДиалогОткрытияФайла.Фильтр = Фильтр;
			ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
			ДиалогОткрытияФайла.Заголовок = "Выберите файл настроек";
			Обработчик = Новый ОписаниеОповещения("ПослеВыбораФайлаЗаполнитьНастройки", ЭтотОбъект);
			ДиалогОткрытияФайла.Показать(Обработчик);
		#КонецЕсли
	ИначеЕсли ЗначениеЗаполнено(НастройкиОбменаСБанком) Тогда
		Отказ = Ложь;
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			ТекстСообщения = ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСообщения("Поле", "Заполнение", "Организация");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Организация", "Объект", Отказ);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
			ТекстСообщения = ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСообщения("Поле", "Заполнение", "Банк");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Контрагент", "Объект", Отказ);
		КонецЕсли;
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;

		БанковскийСчет = БанковскийСчет(Объект.Организация, Объект.Контрагент);
		Если НЕ ЗначениеЗаполнено(БанковскийСчет) Тогда
			ТекстСообщения = Нстр("ru = 'Не найден ни один банковкий счет.
										|Добавьте банковский счет организации и повторите операцию'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		ОбработчикПослеПолученияНастроек = Новый ОписаниеОповещения("ПослеПолученияНастроек", ЭтотОбъект);
		ПараметрыОбработчика = Новый Структура;
		ПараметрыОбработчика.Вставить("Организация", Объект.Организация);
		ПараметрыОбработчика.Вставить("Банк", Объект.Контрагент);
		ПараметрыОбработчика.Вставить("ОбработчикПослеПолученияНастроек", ОбработчикПослеПолученияНастроек);
		ПараметрыОбработчика.Вставить("АдресСервера", НастройкиОбменаСБанком.АдресСервера);
		ПараметрыОбработчика.Вставить("НомерСчета", БанковскийСчет);
		
		Если НастройкиОбменаСБанком.СпособАутентификации = "ПоЛогинуИПаролю" Тогда
			ПараметрыФормы = Новый Структура("СпособАутентификации", "ПоЛогинуИПаролю");
			Оповещение = Новый ОписаниеОповещения(
				"ПолучитьМаркерПослеВводаДанныхАутентификации", ЭлектронныеДокументыСлужебныйКлиент, ПараметрыОбработчика);
			ОткрытьФорму("Обработка.ОбменЭлектроннымиДокументамиСБанком.Форма.ПолучениеНастроекИзБанка", ПараметрыФормы,
				ЭтотОбъект, , ВариантОткрытияОкна.ОтдельноеОкно, , Оповещение);
		ИначеЕсли НастройкиОбменаСБанком.СпособАутентификации = "ПоСертификату" Тогда
			ПараметрыОбработчика.Вставить("СпособАутентификации", "ПоСертификату");
			Оповещение = Новый ОписаниеОповещения("ПолучитьЛичныеСертификатыПослеСозданияМенеджераКриптографии",
				ЭлектронныеДокументыСлужебныйКлиент, ПараметрыОбработчика);
			ЭлектроннаяПодписьКлиент.СоздатьМенеджерКриптографии(Оповещение, "ПолучениеСертификатов");
		ИначеЕсли НастройкиОбменаСБанком.СпособАутентификации = "ПоЛогинуИлиСертификату" Тогда
			ПараметрыОбработчика.Вставить("СпособАутентификации", "ПоЛогинуИлиСертификату");
			Оповещение = Новый ОписаниеОповещения("ПолучитьЛичныеСертификатыПослеСозданияМенеджераКриптографии",
				ЭлектронныеДокументыСлужебныйКлиент, ПараметрыОбработчика);
			ЭлектроннаяПодписьКлиент.СоздатьМенеджерКриптографии(Оповещение, "ПолучениеСертификатов");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьСертификатВФайл(Команда)
	
	Если СохранитьСертификатСбербанка Тогда
		АдресФайлаСертификатаСбербанка = АдресСертификатаСбербанка;
	ИначеЕсли ЗначениеЗаполнено(Объект.Ссылка) Тогда
		АдресФайлаСертификатаСбербанка = ПолучитьНавигационнуюСсылку(Объект.Ссылка, "СертификатКонтрагентаДляШифрования");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресФайлаСертификатаСбербанка) Тогда
		ПолучитьФайл(АдресФайлаСертификатаСбербанка, СертификатБанка + ".cer");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура СохранитьКомпонентуПослеВыбораФайлаВВебКлиенте(Результат, Адрес, ИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		АдресВнешнейКомпонентыСбербанка = Адрес;
		СохранитьВнешнююКомпонентуСбербанка = Истина;
		Модифицированность = Истина;
		Элементы.ИнформацияОКомпоненте.Заголовок = Нстр("ru = 'Загружена. Обновить из файла...'");
		Элементы.ГруппаСертификатыСбербанк.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКомпонентыПослеВыбораФайла(МассивФайлов, ДополнительныеПараметры) Экспорт
	
	Если МассивФайлов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИмяФайла = МассивФайлов[0];
	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
	АдресВнешнейКомпонентыСбербанка = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, УникальныйИдентификатор);
	СохранитьВнешнююКомпонентуСбербанка = Истина;
	Модифицированность = Истина;
	Элементы.ИнформацияОКомпоненте.Заголовок = Нстр("ru = 'Загружена. Обновить из файла...'");
	Элементы.ГруппаСертификатыСбербанк.Доступность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораФайлаВВебКлиентеЗаполнитьНастройки(Результат, Адрес, ИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ЗаполнитьНастройкиСоглашения(Адрес);
		Модифицированность = Истина;
		ПереключитьСтраницы(ЭтотОбъект, Объект.ПрограммаБанка, Объект.ИспользуетсяКриптография, ДоступнаРольПолныеПрава,
			Объект.АутентификацияПоСертификату);
		ОбновитьТабличныеЧасти(Объект.ИспользуетсяКриптография, Объект.ВходящиеДокументы, Объект.ИсходящиеДокументы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораФайлаЗаполнитьНастройки(МассивФайлов, ДополнительныеПараметры) Экспорт
	
	Если МассивФайлов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИмяФайла = МассивФайлов[0];
	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
	Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла);
	ЗаполнитьНастройкиСоглашения(Адрес);
	Модифицированность = Истина;
	ПереключитьСтраницы(ЭтотОбъект, Объект.ПрограммаБанка, Объект.ИспользуетсяКриптография, ДоступнаРольПолныеПрава,
		Объект.АутентификацияПоСертификату);
	ОбновитьТабличныеЧасти(Объект.ИспользуетсяКриптография, Объект.ВходящиеДокументы, Объект.ИсходящиеДокументы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиТестНастройкиЭДО(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = Истина Тогда
		Записать();
	ИначеЕсли Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭлектронныеДокументыКлиентСервер.ЗаполненыРеквизитыНастройкиЭДОСБанками(Объект, Истина) Тогда
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ПослеТестаНастройкиЭДО", ЭтотОбъект);
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("НастройкаЭДО", Объект.Ссылка);
	ПараметрыОбработки.Вставить("ИдентификаторНазначения", УникальныйИдентификатор);
	ЭлектронныеДокументыСлужебныйКлиент.ПровестиТестНастройкиЭДОСБанком(Обработчик, ПараметрыОбработки);

КонецПроцедуры

&НаКлиенте
Процедура ПослеТестаНастройкиЭДО(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена ИЛИ Результат = Неопределено Тогда
		ПоказатьОповещениеПользователя(Нстр("ru = 'Тест не завершен.'"));
	ИначеЕсли Не Результат.Успех Тогда
		Если Результат.Свойство("МассивСообщений") Тогда
			Для Каждого Сообщение Из Результат.МассивСообщений Цикл
				Сообщение.Сообщить();
			КонецЦикла
		КонецЕсли;
		ПоказатьОповещениеПользователя(Нстр("ru = 'Тест не пройден.'"));
	Иначе
		ПоказатьОповещениеПользователя(Нстр("ru = 'Тестирование выполнено упешно !'"));
	КонецЕсли;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ВыполнитьЗагрузкуСертификата(Результат, Параметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаписатьСоглашение();
		Если Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку") Тогда
			НачатьЗагрузкуСертификатаЧерезДополнительнуюОбработку();
		ИначеЕсли Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.iBank2") Тогда
			ДополнительныеПараметры = Новый Структура("СоглашениеЭД", Объект.Ссылка);
			ОО = Новый ОписаниеОповещения("НачатьЗагрузкуСертификатаiBank2", ЭтотОбъект, ДополнительныеПараметры);
			ДополнительныеПараметры.Вставить("ОбработчикПослеПодключенияКомпоненты", ОО);
			ЭлектронныеДокументыСлужебныйКлиент.ПодключитьВнешнююКомпонентуiBank2(ДополнительныеПараметры);
		ИначеЕсли Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн") Тогда
			ПолучитьДанныеСертификатаНаТокенеСбербанка();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗагрузкуСертификатаiBank2(ВнешнийПодключаемыйМодуль, Параметры = Неопределено) Экспорт
	
	Если ВнешнийПодключаемыйМодуль = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Устройства = ЭлектронныеДокументыСлужебныйКлиент.ПодключенныеХранилищаiBank2();
	Если Устройства=Неопределено ИЛИ Устройства.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Устройства.Количество() = 1 Тогда
		ИдентификаторХранилища = Устройства[0];
		ОбработкаВыбораХранилищаiBank2(ИдентификаторХранилища);
	Иначе
		ОО = Новый ОписаниеОповещения("ОбработкаВыбораХранилищаiBank2", ЭтотОбъект);
		ЭлектронныеДокументыСлужебныйКлиент.ВыбратьХранилищеiBank2(Объект.Ссылка, ОО);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НачатьЗагрузкуСертификатаЧерезДополнительнуюОбработку(ПараметрыОбработки = Неопределено) Экспорт
	
	ВнешнийПодключаемыйМодуль = ЭлектронныеДокументыСлужебныйКлиент.ВнешнийПодключаемыйМодульЧерезДополнительнуюОбработку(
																										Объект.Ссылка);
	Если ВнешнийПодключаемыйМодуль = Неопределено Тогда
		ПараметрыПодсистемыОбменСБанками = ПараметрыПриложения["ОбменСБанками.Параметры"];
		Если ПараметрыПодсистемыОбменСБанками <> Неопределено Тогда
			ПараметрыСоглашения = ПараметрыПодсистемыОбменСБанками.Получить(Объект.Ссылка);
			Если ЗначениеЗаполнено(ПараметрыСоглашения) И ПараметрыСоглашения.Свойство("АдресКомпоненты") Тогда
				ПараметрыОбработки = Новый Структура;
				ПараметрыОбработки.Вставить("ТекущееСоглашениеЭДЧерезДополнительнуюОбработку", Объект.Ссылка);
				ОО = Новый ОписаниеОповещения(
					"НачатьЗагрузкуСертификатаЧерезДополнительнуюОбработку", ЭтотОбъект, ПараметрыОбработки);
				НачатьУстановкуВнешнейКомпоненты(ОО, ПараметрыСоглашения.АдресКомпоненты);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Устройства = ЭлектронныеДокументыСлужебныйКлиент.ПодключенныеХранилищаЧерезДополнительнуюОбработку(
																			ВнешнийПодключаемыйМодуль);
	Если Устройства=Неопределено ИЛИ Устройства.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ПараметрыВыбораТокена = Новый Структура;
	ПараметрыВыбораТокена.Вставить("ВнешнийПодключаемыйМодуль", ВнешнийПодключаемыйМодуль);
	
	Если Устройства.Количество() = 1 Тогда
		ИдентификаторХранилища = Устройства[0];
		ОбработкаВыбораХранилищаЧерезДополнительнуюОбработку(ИдентификаторХранилища, ПараметрыВыбораТокена);
	Иначе
		ОО = Новый ОписаниеОповещения("ОбработкаВыбораХранилищаЧерезДополнительнуюОбработку", ЭтотОбъект, ПараметрыВыбораТокена);
		ЭлектронныеДокументыСлужебныйКлиент.ВыбратьХранилищеЧерезДополнительнуюОбработку(Объект.Ссылка, ОО, ПараметрыВыбораТокена);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораХранилищаЧерезДополнительнуюОбработку(ИдентификаторХранилища, ПараметрыОбработки) Экспорт
	
	Если Не ЗначениеЗаполнено(ИдентификаторХранилища) Тогда
		Возврат;
	КонецЕсли;
		
	ПараметрыОбработки.Вставить("ИдентификаторХранилища", ИдентификаторХранилища);
	
	ВнешнийПодключаемыйМодуль = ПараметрыОбработки.ВнешнийПодключаемыйМодуль;
	
	ТребуетсяУстановкаPINКода = ЭлектронныеДокументыСлужебныйКлиент.НеобходимаУстановкаPINКодаХранилищаЧерезДополнительнуюОбработку(
		ВнешнийПодключаемыйМодуль, ИдентификаторХранилища);
		
	Если ТребуетсяУстановкаPINКода = Неопределено Тогда
		Возврат;
	ИначеЕсли ТребуетсяУстановкаPINКода Тогда
		ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(
			"ПродолжитьПолучениеСертификатаПослеВводаPinКода", ЭтотОбъект, ПараметрыОбработки);
		ЭлектронныеДокументыСлужебныйКлиент.НачатьУстановкуPINКодаХранилища(
			Объект.Ссылка, ИдентификаторХранилища, ОписаниеОповещенияОЗакрытии);
		Возврат;
	КонецЕсли;
	
	ПродолжитьПолучениеСертификата(ПараметрыОбработки)
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуСертификатаБанка()
	
	АдресВХранилище = Неопределено;
	Обработчик = Новый ОписаниеОповещения("ОбработкаВыбораФайлаСертификатаБанка", ЭтотОбъект);
	НачатьПомещениеФайла(Обработчик, АдресВХранилище, "*.cer", Истина, УникальныйИдентификатор);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораФайлаСертификатаБанка(Результат, Адрес, ИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ДанныеФайла = ПолучитьИзВременногоХранилища(Адрес);
		ПоместитьВХранилищеСертификат(ДанныеФайла, УникальныйИдентификатор, АдресСертификатаСбербанка, СертификатБанка);
		СохранитьСертификатСбербанка = Истина;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидыЭДДоступнымиЗначениями()
	
	АктуальныеВидыЭД = ЭлектронныеДокументыПовтИсп.ПолучитьАктуальныеВидыЭД();
	Объект.ИсходящиеДокументы.Очистить();
	
	Для Каждого ЗначениеПеречисления Из АктуальныеВидыЭД Цикл
		Если ЗначениеПеречисления = Перечисления.ВидыЭД.ПлатежноеПоручение
			ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.ЗапросВыписки Тогда
				НоваяСтрока = Объект.ИсходящиеДокументы.Добавить();
				НоваяСтрока.ИсходящийДокумент = ЗначениеПеречисления;
				НоваяСтрока.Формировать = Истина;
				НоваяСтрока.ИспользоватьЭП = Объект.ИспользуетсяКриптография;
		ИначеЕсли (ЗначениеПеречисления = Перечисления.ВидыЭД.ЗапросЗонд
					ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.ПлатежноеТребование)
			И Объект.ПрограммаБанка = Перечисления.ПрограммыБанка.АсинхронныйОбмен Тогда
				НоваяСтрока = Объект.ИсходящиеДокументы.Добавить();
				НоваяСтрока.ИсходящийДокумент = ЗначениеПеречисления;
				НоваяСтрока.Формировать = Истина;
				НоваяСтрока.ИспользоватьЭП = Объект.ИспользуетсяКриптография;
		ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыЭД.ЗапросОСостоянииЭД
			И Объект.ПрограммаБанка = Перечисления.ПрограммыБанка.АсинхронныйОбмен Тогда
				НоваяСтрока = Объект.ИсходящиеДокументы.Добавить();
				НоваяСтрока.ИсходящийДокумент = ЗначениеПеречисления;
				НоваяСтрока.Формировать = Истина;
				НоваяСтрока.ИспользоватьЭП = Ложь;
		ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыЭД.ЗапросНаОтзывЭД
			И Объект.ПрограммаБанка = Перечисления.ПрограммыБанка.АсинхронныйОбмен
			И Объект.ИспользуетсяКриптография Тогда
				НоваяСтрока = Объект.ИсходящиеДокументы.Добавить();
				НоваяСтрока.ИсходящийДокумент = ЗначениеПеречисления;
				НоваяСтрока.Формировать = Истина;
				НоваяСтрока.ИспользоватьЭП = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ВходящиеЭД = Новый Массив;
	ВходящиеЭД.Добавить(Перечисления.ВидыЭД.ВыпискаБанка);
	
	Если Объект.ПрограммаБанка = Перечисления.ПрограммыБанка.АсинхронныйОбмен Тогда
		ВходящиеЭД.Добавить(Перечисления.ВидыЭД.ИзвещениеОСостоянииЭД);
	КонецЕсли;
	
	Объект.ИсходящиеДокументы.Сортировать("ИсходящийДокумент");
	
	Объект.ВходящиеДокументы.Очистить();
	Для Каждого ЗначениеПеречисления Из ВходящиеЭД Цикл
		НоваяСтрока = Объект.ВходящиеДокументы.Добавить();
		НоваяСтрока.ВходящийДокумент = ЗначениеПеречисления;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьАктуальностьДанныхСоглашения(ТекстОшибкиАктуальности)
	
	ЗапросПоСоглашениям = Новый Запрос;
	ЗапросПоСоглашениям.УстановитьПараметр("СтатусСоглашения",  Перечисления.СтатусыСоглашенийЭД.Действует);
	ЗапросПоСоглашениям.УстановитьПараметр("ТекущееСоглашение", Объект.Ссылка);
	ЗапросПоСоглашениям.УстановитьПараметр("Организация",       Объект.Организация);
	ЗапросПоСоглашениям.УстановитьПараметр("Контрагент",        Объект.Контрагент);
	ЗапросПоСоглашениям.Текст = "ВЫБРАТЬ
	                            |	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент КАК ТипДокумента,
	                            |	СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка КАК Соглашение
	                            |ИЗ
	                            |	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
	                            |ГДЕ
	                            |	СоглашенияОбИспользованииЭДИсходящиеДокументы.Формировать = ИСТИНА
	                            |	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СтатусСоглашения = &СтатусСоглашения
	                            |	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ПометкаУдаления = ЛОЖЬ
	                            |	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка <> &ТекущееСоглашение
	                            |	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация = &Организация
	                            |	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент = &Контрагент
	                            |	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка)";
	Результат = ЗапросПоСоглашениям.Выполнить().Выгрузить();
	
	ПроверитьУникальностьДокументов(Объект.ИсходящиеДокументы, Результат, ТекстОшибкиАктуальности);
		
КонецПроцедуры

&НаСервере
Процедура ПроверитьУникальностьДокументов(ТабличнаяЧастьДокументов, РезультатПроверки, ТекстОшибки)
			
	Для Каждого ТекущийДокументСоглашения Из ТабличнаяЧастьДокументов Цикл
		Если ТекущийДокументСоглашения.Формировать Тогда
			Для Каждого ДокументВДругихСоглашениях Из РезультатПроверки Цикл
				Если ТекущийДокументСоглашения.ИсходящийДокумент = ДокументВДругихСоглашениях.ТипДокумента Тогда
					ТекстОшибки = НСтр("ru = 'По виду электронных документов %1 %2 
					|уже существует действующее соглашение между участниками %3 - %4:
					|%5.
					|'");
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ТекстОшибки, 
						ДокументВДругихСоглашениях.ТипДокумента, 
						"Исходящий", 
						Объект.Организация, 
						Объект.Контрагент, 
						ДокументВДругихСоглашениях.Соглашение
						);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПравильныйФорматАдреса()
	
	Если НРег(Лев(Объект.АдресСервера, 7)) = "http://"
			ИЛИ НРег(Лев(Объект.АдресСервера, 8)) = "https://" Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПереключитьСтраницы(Форма, Знач ПрограммаБанка, Знач ИспользуетсяКриптография, Знач ДоступнаРольПолныеПрава, Знач АутентификацияПоСертификату = Ложь)
	
	ЭтоСбербанк = ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн");
	ЭтоОбменЧерезДопОбработку = ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку");
	ЭтоАсинхронныйОбмен = ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АсинхронныйОбмен");
	ЭтоСинхронныйОбмен = ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АльфаБанкОнлайн");
	ЭтоОбменСiBank2 = ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.iBank2");

	Если ЭтоСинхронныйОбмен Тогда
		Форма.Элементы.СтраницыВидыБанковскихСистем.ТекущаяСтраница = Форма.Элементы.СтраницаСинхронный;
	ИначеЕсли ЭтоСбербанк Тогда
		Форма.Элементы.СтраницыВидыБанковскихСистем.ТекущаяСтраница = Форма.Элементы.СтраницаСбербанк;
	ИначеЕсли ЭтоАсинхронныйОбмен Тогда
		Форма.ВариантАутентификации = АутентификацияПоСертификату;
		Форма.Элементы.СтраницыВидыБанковскихСистем.ТекущаяСтраница = Форма.Элементы.СтраницаАсинхронный;
		Если ИспользуетсяКриптография Тогда
			Если АутентификацияПоСертификату Тогда
				Форма.Элементы.СтраницыЛогинАсинхронныйОбмен.ТекущаяСтраница = Форма.Элементы.СтраницаЛогинНеВиден
			Иначе
				Форма.Элементы.СтраницыЛогинАсинхронныйОбмен.ТекущаяСтраница = Форма.Элементы.СтраницаЛогинВиден
			КонецЕсли;
			Форма.Элементы.СтраницыАсинхронныхНастроек.ТекущаяСтраница = Форма.Элементы.АсинхронныйОбменСКриптографией;
		Иначе
			Форма.Элементы.СтраницыАсинхронныхНастроек.ТекущаяСтраница = Форма.Элементы.АсинхронныйОбменБезКриптографии;
		КонецЕсли;
	ИначеЕсли ЭтоОбменЧерезДопОбработку Тогда
		Форма.Элементы.СтраницыВидыБанковскихСистем.ТекущаяСтраница = Форма.Элементы.СтраницаОбработка;
		ВключеныДополнительныеОтчетыИОбработки = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции(
																				"ИспользоватьДополнительныеОтчетыИОбработки");
		Форма.Элементы.ДополнительнаяОбработка.Доступность = ВключеныДополнительныеОтчетыИОбработки;
	ИначеЕсли ЭтоОбменСiBank2 Тогда
		Форма.Элементы.СтраницыВидыБанковскихСистем.ТекущаяСтраница = Форма.Элементы.СтраницаКомпонента;
		Форма.Элементы.НастройкиОбменаДанными.ОтображатьЗаголовок = Ложь;
		Форма.Элементы.НастройкиОбменаДанными.Отображение = ОтображениеОбычнойГруппы.Нет;
	КонецЕсли;
	
	Форма.Элементы.ТестНастроек.Видимость = НЕ ЭтоСинхронныйОбмен;
	Форма.Элементы.ЖурналАудита.Видимость = ЭтоСбербанк;
	Форма.Элементы.НачальнаяДатаЗапросаДанных.Видимость = ЭтоАсинхронныйОбмен ИЛИ ЭтоСбербанк;
	Форма.Элементы.ЗагрузитьНастройки.Видимость = ЭтоАсинхронныйОбмен ИЛИ ЭтоСбербанк;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьПолучениеСертификата(ПараметрыПолучения)
	
	Если Элементы.СтраницыВидыБанковскихСистем.ТекущаяСтраница = Элементы.СтраницаКомпонента Тогда
		ЭлементОповещения = Элементы.СертификатыПодписейОрганизацииКомпонента;
	ИначеЕсли Элементы.СтраницыВидыБанковскихСистем.ТекущаяСтраница = Элементы.СтраницаОбработка Тогда
		ЭлементОповещения = Элементы.СертификатыПодписейОрганизацииОбработка;
	Иначе
		Возврат;
	КонецЕсли;
	ИдентификаторХранилища = ПараметрыПолучения.ИдентификаторХранилища;
	
	ПараметрыОткрытия = Новый Структура("СоглашениеЭД, ИдентификаторХранилища", Объект.Ссылка, ИдентификаторХранилища);
	ОткрытьФорму(
		"Обработка.ОбменЭлектроннымиДокументамиСБанком.Форма.ПолучениеСертификата", ПараметрыОткрытия, ЭлементОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьПолучениеСертификатаПослеВводаPinКода(PINКод, ПараметрыПолучения) Экспорт
	
	ИдентификаторХранилища = ПараметрыПолучения.ИдентификаторХранилища;
	
	Если PINКод = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.iBank2") Тогда
		PINУстановлен = ЭлектронныеДокументыСлужебныйКлиент.УстановитьPINКодХранилищаiBank2(ИдентификаторХранилища, PINКод);
	Иначе
		ВнешнийПодключаемыйМодуль = ЭлектронныеДокументыСлужебныйКлиент.ВнешнийПодключаемыйМодульЧерезДополнительнуюОбработку(
																												Объект.Ссылка);
		PINУстановлен = ЭлектронныеДокументыСлужебныйКлиент.УстановитьPINКодХранилищаЧерезДополнительнуюОбработку(
														ВнешнийПодключаемыйМодуль, ИдентификаторХранилища, PINКод);
	КонецЕсли;
	
	Если Не PINУстановлен Тогда
		Возврат;
	КонецЕсли;
	
	ПродолжитьПолучениеСертификата(ПараметрыПолучения);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПустыеСтрокиТаблиц()
	
	СписокСтрокКУдалению = Новый СписокЗначений;
	Для каждого СтрокаСертификата ИЗ Объект.СертификатыПодписейОрганизации Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаСертификата.Сертификат) Тогда
			СписокСтрокКУдалению.Добавить(СтрокаСертификата.НомерСтроки);
		КонецЕсли;
	КонецЦикла;

	СписокСтрокКУдалению.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
	
	Для Каждого Запись ИЗ СписокСтрокКУдалению Цикл
		Объект.СертификатыПодписейОрганизации.Удалить(Запись.Значение-1);
	КонецЦикла

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПоместитьВХранилищеСертификат(Знач ДвоичныеДанные = Неопределено, Знач УникальныйИдентификатор, АдресСертификатаСбербанка, ПредставлениеСертификата = Неопределено)
	
	ПредставлениеСертификата = "";
	
	Если ДвоичныеДанные = Неопределено Тогда
		АдресСертификатаСбербанка = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	Иначе
		Попытка
			СертификатКриптографии = Новый СертификатКриптографии(ДвоичныеДанные);
			АдресСертификатаСбербанка = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
		Исключение
			ВремФайл = ПолучитьИмяВременногоФайла();
			Попытка
				ДвоичныеДанные.Записать(ВремФайл);
				ТекстовыйДокумент = Новый ТекстовыйДокумент;
				ТекстовыйДокумент.Прочитать(ВремФайл);
				СтрокаBase64 = ТекстовыйДокумент.ПолучитьТекст();
				СтрокаBase64 = СтрЗаменить(СтрокаBase64, "-----BEGIN CERTIFICATE-----" + Символы.ПС,""); 
				СтрокаBase64 = СтрЗаменить(СтрокаBase64, Символы.ПС + "-----END CERTIFICATE-----","");
				ДвоичныеДанныеСертификата = Base64Значение(СтрокаBase64);
				СертификатКриптографии = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
				
				АдресСертификатаСбербанка = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
				
			Исключение
				УдалитьФайлы(ВремФайл);
				ТекстСообщения = НСтр("ru = 'Не удалось прочитать файл сертификата, операция прервана.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				АдресСертификатаСбербанка = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
				Возврат;
			КонецПопытки;
			УдалитьФайлы(ВремФайл);
			
		КонецПопытки;
		ПредставлениеСертификата = ЭлектроннаяПодписьКлиентСервер.ПредставлениеСубъекта(СертификатКриптографии);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСоглашение()
	
	СправочникОбъект = РеквизитФормыВЗначение("Объект");
	ПередЗаписьюНаСервере(Неопределено, СправочникОбъект, Неопределено);
	СправочникОбъект.Записать();
	ЗначениеВРеквизитФормы(СправочникОбъект, "Объект");
	
КонецПроцедуры

&НаКлиенте
Функция СоглашениеЗаписано(Обработчик)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) И НЕ Модифицированность Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'Загружать сертификаты можно только в записанных настройках ЭДО.
								|Записать?'");
	
	ОП = Новый ОписаниеОповещения(Обработчик, ЭтотОбъект);
	ПоказатьВопрос(ОП, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаВыбораХранилищаiBank2(ИдентификаторХранилища, ПараметрыОбработки = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ИдентификаторХранилища) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ИдентификаторХранилища", ИдентификаторХранилища);
		
	ТребуетсяУстановкаPINКода = ЭлектронныеДокументыСлужебныйКлиент.НеобходимоУстановитьPINКодХранилищаiBank2(ИдентификаторХранилища);
		
	Если ТребуетсяУстановкаPINКода = Неопределено Тогда
		Возврат;
	ИначеЕсли ТребуетсяУстановкаPINКода Тогда
		ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(
			"ПродолжитьПолучениеСертификатаПослеВводаPinКода", ЭтотОбъект, ПараметрыОбработки);
		ЭлектронныеДокументыСлужебныйКлиент.НачатьУстановкуPINКодаХранилища(
			Объект.Ссылка, ИдентификаторХранилища, ОписаниеОповещенияОЗакрытии);
		Возврат;
	КонецЕсли;
	
	ПродолжитьПолучениеСертификата(ПараметрыОбработки)
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НовыйСертификат(Знач СертификатКлючаXML, Знач ДанныеСертификата, Знач Организация, Знач ПрограммаБанка)
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПодписываемыеВидыЭД");
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПрограммыБанков");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	НачатьТранзакцию();
	Попытка
	
		НовСерт = Справочники.СертификатыКлючейЭлектроннойПодписиИШифрования.СоздатьЭлемент();
		НовСерт.Должность = ДанныеСертификата.ВладелецДолжность;
		ЭлектронныеДокументы.ФамилияИнициалыФизЛица(ДанныеСертификата.ВладелецФИО,
													НовСерт.Фамилия,
													НовСерт.Имя,
													НовСерт.Отчество);
		НовСерт.ДействителенДо  = ДанныеСертификата.ДатаОкончания;
		НовСерт.Наименование    = ДанныеСертификата.ВладелецФИО + " (" + ДанныеСертификата.Псевдоним + ")";
		НовСерт.Организация     = Организация;
		НовСерт.ДанныеСертификата = Новый ХранилищеЗначения(СертификатКлючаXML);
		НовСерт.Отпечаток       = ДанныеСертификата.Отпечаток;
		НовСерт.Добавил         = ПользователиКлиентСервер.ТекущийПользователь();
		НовСерт.Подписание      = Истина;
		НовСерт.КомуВыдан       = ДанныеСертификата.ВладелецФИО;
		НовСерт.КемВыдан        = Неопределено;
		НовСерт.Записать();
		
		НаборЗаписей = РегистрыСведений.ПодписываемыеВидыЭД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СертификатЭП.Установить(НовСерт.Ссылка);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Активность = Истина;
		НоваяЗапись.ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение;
		НоваяЗапись.Использовать = Истина;
		НоваяЗапись.СертификатЭП = НовСерт.Ссылка;
		НаборЗаписей.Записать();
		
		НаборЗаписей = РегистрыСведений.ПрограммыБанков.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СертификатЭП.Установить(НовСерт.Ссылка);
		НаборЗаписей.Прочитать();
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Активность = Истина;
		НоваяЗапись.ПрограммаБанка = ПрограммаБанка;
		НоваяЗапись.СертификатЭП = НовСерт.Ссылка;
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	Возврат НовСерт.Ссылка;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьТабличныеЧасти(ИспользуетсяКриптография, ВходящиеДокументы, ИсходящиеДокументы)
	
	Для Каждого Строка Из ВходящиеДокументы Цикл
		Строка.ИспользоватьЭП = ИспользуетсяКриптография;
	КонецЦикла;
	
	Для Каждого Строка Из ИсходящиеДокументы Цикл
		Строка.ИспользоватьЭП = ИспользуетсяКриптография
			И НЕ Строка.ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.ЗапросОСостоянииЭД");
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеСертификатаНаТокенеСбербанка()
	
	АвторизацияВыполнена = Ложь;
	ОО = Новый ОписаниеОповещения("ПолучитьИдентификаторСертификатаСбербанка", ЭтотОбъект);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("АвторизацияВыполнена", АвторизацияВыполнена);
	ПараметрыОбработчика.Вставить("ОО", ОО);
	ПараметрыОбработчика.Вставить("ПринудительнаяАутентификация", Истина);
	ЭлектронныеДокументыСлужебныйКлиент.ПровестиАутентификациюНаТокенеСбербанка(Объект.Ссылка, ПараметрыОбработчика);
	Если НЕ ПараметрыОбработчика.АвторизацияВыполнена Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьИдентификаторСертификатаСбербанка(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораСертификатаСбербанка(Результат, Параметры = Неопределено) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторСертификата = Результат.Значение;
	
	ДвоичныеДанныеСертификата = ЭлектронныеДокументыСлужебныйКлиент.ДвоичныеДанныеСертификатаСбербанка(
		ИдентификаторСертификата);
	
	Если ДвоичныеДанныеСертификата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОшибки = "";
	НовыйСертификат = СоздатьСертификат(ДвоичныеДанныеСертификата, Объект.Организация);
	Если НЕ ЗначениеЗаполнено(НовыйСертификат) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаСоглашения = Объект.СертификатыПодписейОрганизации.Добавить();
	СтрокаСоглашения.Сертификат = НовыйСертификат;
	
	Оповестить("ОбновитьСписокСертификатов");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьСертификат(Знач ДвоичныеДанныеСертификата, Знач Организация)
	
	НовыйСертификат = ЭлектронныеДокументыСлужебныйВызовСервера.СоздатьНайтиСертификатЭП(
		ДвоичныеДанныеСертификата, Организация);
	
	Если ЗначениеЗаполнено(НовыйСертификат) Тогда
		МенеджерЗаписи = РегистрыСведений.ПрограммыБанков.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн;
		МенеджерЗаписи.СертификатЭП = НовыйСертификат;
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
	Возврат НовыйСертификат;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьИдентификаторСертификатаСбербанка(СоглашениеЭД, Параметры = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(СоглашениеЭД) Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторыСертификатов = "";
	ПодключаемыйМодуль = ПараметрыПриложения["ОбменСБанками.Параметры"].Получить("AddIn.CryptoExtension.VPNKeyTLS");

	Рез = ПодключаемыйМодуль.ПолучитьСписокИдентСертификатовVPNKeyTLS("0", ИдентификаторыСертификатов);
	Если Рез <> 0 Тогда
		ОчиститьСообщения();
		ТекстСообщения = НСтр("ru = 'Ошибка получения списка доступных сертификатов.
									|Подробности в журнале регистрации'");
		ТекстОшибки = НСтр("ru = 'Компонента AddIn.Bicrypt при получении списка доступных сертификатов вернула ошибку с кодом %1'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Рез);
		Операция = НСтр("ru = 'Подписание электронного документа.'");
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция, ТекстОшибки, ТекстСообщения, 1);
		ЭлектронныеДокументыСлужебныйКлиент.ОчиститьДанныеАвторизацииСбербанк();
		Возврат;
	КонецЕсли;
	
	СоответствиеСертификатов = Новый Соответствие;
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ИдентификаторыСертификатов);
	Индекс = 2;
	Пока Индекс < ТекстовыйДокумент.КоличествоСтрок() Цикл
		Текст = ТекстовыйДокумент.ПолучитьСтроку(Индекс);
		Текст = СтрЗаменить(Текст, ",", "");
		Текст = СтрЗаменить(Текст, ";", "");
		СоответствиеСертификатов.Вставить(Текст);
		Индекс = Индекс + 1;
	КонецЦикла;
	
	СписокСертификатов = Новый СписокЗначений;
	Если СоответствиеСертификатов.Количество() = 1 Тогда
		ОбработкаВыбораСертификатаСбербанка(СписокСертификатов.Добавить(ТекстовыйДокумент.ПолучитьСтроку(Индекс - 1)));
		Возврат;
	ИначеЕсли НЕ СоответствиеСертификатов.Количество() Тогда
		ТекстСообщения = Нстр("ru = 'Не найден ни один сертификат на банковском ключе'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ВыборкаСертификатов = Новый Соответствие;
	
	Для Каждого Элемент ИЗ СоответствиеСертификатов Цикл
		
		ИдентификаторСертификата = Элемент.Ключ;
		ДвоичныеДанныеСертификата = ЭлектронныеДокументыСлужебныйКлиент.ДвоичныеДанныеСертификатаСбербанка(
			ИдентификаторСертификата, Неопределено);
		
		Если ДвоичныеДанныеСертификата = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СтруктураСертификата = ЭлектронныеДокументыСлужебныйВызовСервера.СтруктураСертификата(ДвоичныеДанныеСертификата);
		
		Если ЗначениеЗаполнено(СтруктураСертификата) Тогда
			ВыборкаСертификатов.Вставить(ИдентификаторСертификата, СтруктураСертификата.КомуВыдан);
		КонецЕсли;
		
	КонецЦикла;

	Если ВыборкаСертификатов.Количество() = 1 Тогда
		ОбработкаВыбораСертификатаСбербанка(СписокСертификатов.Добавить(ВыборкаСертификатов[0].Ключ));
		Возврат;
	КонецЕсли;
	
	Для Каждого Элемент Из СоответствиеСертификатов Цикл
		СписокСертификатов.Добавить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
	ОО = Новый ОписаниеОповещения("ОбработкаВыбораСертификатаСбербанка", ЭтотОбъект);
	
	ЗаголовокФормыВыбора = Нстр("ru = 'Выберите добавляемый сертификат подписи'");

	СписокСертификатов.ПоказатьВыборЭлемента(ОО, ЗаголовокФормыВыбора);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиСоглашения(НастройкиЗаполнения)
	
	СправочникОбъект = РеквизитФормыВЗначение("Объект");
	
	ЭлектронныеДокументыСлужебныйВызовСервера.СоздатьНастройкуЭДОСБанком(НастройкиЗаполнения, СправочникОбъект);
	
	ЗначениеВРеквизитФормы(СправочникОбъект, "Объект");
	
	Если СправочникОбъект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн") Тогда
		ДвоичныеДанныеСертификатаБанка = СправочникОбъект.СертификатКонтрагентаДляШифрования.Получить();
		ПоместитьВХранилищеСертификат(
			ДвоичныеДанныеСертификатаБанка, УникальныйИдентификатор, АдресСертификатаСбербанка, СертификатБанка);
		СохранитьСертификатСбербанка = Истина;
		ДвоичныеДанныеВнешнейКомпонентыСбербанка = СправочникОбъект.ВнешняяКомпонента.Получить();
		АдресВнешнейКомпонентыСбербанка = ПоместитьВоВременноеХранилище(
			ДвоичныеДанныеВнешнейКомпонентыСбербанка, УникальныйИдентификатор);
		СохранитьВнешнююКомпонентуСбербанка = Истина;
		Модифицированность = Истина;
		Элементы.ИнформацияОКомпоненте.Заголовок = Нстр("ru = 'Загружена. Обновить из файла...'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодтвержденияИзмененияОрганизации(Результат, Параметры) Экспорт
	
	Если Результат = Истина Тогда
		Объект.СертификатыПодписейОрганизации.Очистить();
	Иначе
		Объект.Организация = ТекущаяОрганизация;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Функция ИспользуетсяКриптография(ПрограммаБанка)
	
	Если НЕ ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АсинхронныйОбмен") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции(
		"ИспользоватьЭлектронныеПодписиЭД");
	
КонецФункции

&НаСервереБезКонтекста
Функция БанковскийСчет(Знач Организация, Знач Банк)
	
	МассивБанковскихСчетов = Новый Массив;
	ЭлектронныеДокументыПереопределяемый.ПолучитьНомераБанковскихСчетов(Организация, Банк, МассивБанковскихСчетов);
	Если МассивБанковскихСчетов.Количество() Тогда
		Возврат МассивБанковскихСчетов[0];
	КонецЕсли;
	
КонецФункции

Процедура ПослеПолученияНастроек(НастройкиОбмена, Параметры) Экспорт
	
	ЗаполнитьНастройкиСоглашения(НастройкиОбмена)
	
КонецПроцедуры


#КонецОбласти
