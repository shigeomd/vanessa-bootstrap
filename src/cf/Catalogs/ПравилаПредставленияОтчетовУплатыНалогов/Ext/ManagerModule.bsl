#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
// ИНТЕРФЕЙС МОДУЛЯ

Функция ПравилаОрганизации(Организация, НачалоИнтервала, КонецИнтервала) Экспорт
	
	Правила = НовыйТаблицаПравил(); // Правило, ФинансовыйПериод
	
	ЗаполнитьПравилаОрганизации(Правила, Организация, НачалоИнтервала, КонецИнтервала);
	
	Возврат Правила;
	
КонецФункции

Функция ВключенныеПравилаОрганизации(Организация) Экспорт
	
	Правила = Новый ТаблицаЗначений;
	Правила.Колонки.Добавить("Правило",               Новый ОписаниеТипов("СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов"));
	Правила.Колонки.Добавить("ВключеноПользователем", Новый ОписаниеТипов("Булево"));
	Правила.Индексы.Добавить("Правило");
	
	ТекущаяДата = ТекущаяДатаСеанса();
	НачалоИнтервала = НачалоМесяца(ДобавитьМесяц(ТекущаяДата, -12));

	ДатаНачалаДеятельности = КалендарьБухгалтера.ДатаНачалаДеятельности(Организация);
	НачалоИнтервала = Макс(НачалоИнтервала, ДатаНачалаДеятельности);
	
	КонецИнтервала  = КонецГода(ДобавитьМесяц(ТекущаяДата, 12));
	
	ЗаполнитьПравилаОрганизации(Правила, Организация, НачалоИнтервала, КонецИнтервала);
	
	Возврат Правила;
	
КонецФункции

Функция СкомпоноватьПолноеИмяПравила(ИдентификаторЗадачи, ИдентификаторПравила) Экспорт
	
	Возврат Строка(ИдентификаторЗадачи) + "." + Строка(ИдентификаторПравила);
	
КонецФункции

Функция ПолноеИмяПравила(Правило) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Правило", Правило);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Правила.Владелец.Код КАК ИдентификаторЗадачи,
	|	Правила.Код КАК ИдентификаторПравила
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК Правила
	|ГДЕ
	|	Правила.Ссылка = &Правило";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ИмяЗадачи     = Выборка.ИдентификаторЗадачи;
		ИмяТребования = Выборка.ИдентификаторПравила;
		Возврат СкомпоноватьПолноеИмяПравила(ИмяЗадачи, ИмяТребования);
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Возвращаемое значение:
//  Структура, Неопределено - описание события, соответствующего уплате налога. Состав ключей см. в НовыйРасписание()
Функция ПорядокУплатыНалога(Организация, ВидНалога, Период) Экспорт
	
	Задача = РасчетыСБюджетом.ЗадачаБухгалтера(ВидНалога);
	Если Не ЗначениеЗаполнено(Задача) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДатаНачалаДеятельности = КалендарьБухгалтера.ДатаНачалаДеятельности(Организация) - 1;
	
	НачалоРасписания = Макс(НачалоМесяца(ДобавитьМесяц(Период, -6)), ДатаНачалаДеятельности);
	КонецРасписания  = КонецМесяца(ДобавитьМесяц(Период, 6));
	
	НачалоИнтервалаПравил = НачалоРасписания;
	КонецИнтервалаПравил  = КонецМесяца(Период);
	
	Правила = НовыйТаблицаПравил();
	ЗаполнитьПравилаОрганизации(Правила, Организация, НачалоИнтервалаПравил, КонецИнтервалаПравил, Задача);
	
	Расписание = РегистрыСведений.ЗадачиБухгалтера.РасписаниеПоНалогамИСборам(Организация, Правила, НачалоРасписания, КонецРасписания);
	Расписание.Сортировать("ПериодСобытия Убыв");
	
	ИндексСобытия = Неопределено;
	
	Для Индекс = 0 По Расписание.Количество() - 1 Цикл
		СтрокаРасписания = Расписание[Индекс];
		Если СтрокаРасписания.Срок > СтрокаРасписания.ПериодСобытия Тогда
			// Обязанность уплаты наступает после завершения периода.
			// Например, уплата по декларации.
			// Подходит самый поздний закончившийся период.
			Если СтрокаРасписания.ПериодСобытия < НачалоДня(Период) Тогда
				ИндексСобытия = Индекс;
				Прервать;
			КонецЕсли;
		Иначе
			// Обязанность уплаты наступает до завершения периода.
			// Например, уплата авансового платежа.
			// Нужно найти самое ранее непросроченное событие.
			Если СтрокаРасписания.Срок >= НачалоДня(Период) Тогда
				ИндексСобытия = Индекс;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ИндексСобытия <> Неопределено Тогда
		ПорядокУплаты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Расписание[ИндексСобытия]);
	КонецЕсли;
	
	Возврат ПорядокУплаты;
	
КонецФункции

// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Возвращает реквизиты справочника, которые образуют естественный ключ
//  для элементов справочника.
Функция ПоляЕстественногоКлюча() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("Владелец");
	Результат.Добавить("Код");
	
	Возврат Результат;
	
КонецФункции

// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ

Функция НовыйТаблицаПравил()
	
	Правила = Новый ТаблицаЗначений;
	Правила.Колонки.Добавить("ФинансовыйПериод",      Новый ОписаниеТипов("Дата"));
	Правила.Колонки.Добавить("Правило",               Новый ОписаниеТипов("СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов"));
	
	Возврат Правила;
	
КонецФункции

Процедура СоздатьАктуальныеПравила(МенеджерВременныхТаблиц, НачалоОбзора, КонецОбзора, Организация, Задача)
	
	Правила = НовыйТаблицаПравил();

	// Актуальные =
	// - действуют для данной организации
	// - в периоде обзора по ним могут появиться новые задачи
	
	День = 24 * 60 * 60;
	ТекушаяДата = НачалоДня(ТекущаяДатаСеанса());
	ДатаНачалаДеятельности = КалендарьБухгалтера.ДатаНачалаДеятельности(Организация);
	
	РегистрыСведений.ПорядокУплатыНалоговНаМестах.СоздатьПравилаУплатыНалоговНаМестах(МенеджерВременныхТаблиц, Организация);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Задача", Задача);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ФедеральныеПравила.Ссылка КАК Правило,
	|	ФедеральныеПравила.ФинансовыйПериод КАК ДлительностьФинансовогоПериода,
	|	ФедеральныеПравила.НачалоДействия КАК НачалоДействия,
	|	ФедеральныеПравила.КонецДействия КАК КонецДействия,
	|	ФедеральныеПравила.Периодичность КАК Периодичность,
	|	ЕСТЬNULL(МестныеПравила.СрокМесяцев, ФедеральныеПравила.СрокМесяцев) КАК СрокМесяцев,
	|	ЕСТЬNULL(МестныеПравила.СрокДней, ФедеральныеПравила.СрокДней) КАК СрокДней,
	|	ФедеральныеПравила.ОтставаниеБазовогоПериода КАК ОтставаниеБазовогоПериода,
	|	ФедеральныеПравила.Действие КАК Действие,
	|	ФедеральныеПравила.БазовыйПериод КАК БазовыйПериод
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК ФедеральныеПравила
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПравилаУплатыНалоговНаМестах КАК МестныеПравила
	|		ПО ФедеральныеПравила.Ссылка = МестныеПравила.Правило
	|ГДЕ
	|	НЕ ФедеральныеПравила.ПометкаУдаления
	|	И ФедеральныеПравила.ФинансовыйПериод <> ЗНАЧЕНИЕ(Перечисление.Периодичность.ПустаяСсылка)
	|	И ЕСТЬNULL(МестныеПравила.Включено, ИСТИНА)
	|	И &УсловиеПоЗадаче";
	
	Если ЗначениеЗаполнено(Задача) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоЗадаче",
			"Владелец = &Задача
			|И Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.УплатаНалога)");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоЗадаче", "ИСТИНА");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		
		// Если интервал обзора настолько мал, что включает в себя только один период,
		// то это правило заведомо не приведет к появлению новых задач
		Если ЗначениеЗаполнено(НачалоОбзора) Тогда
			КонецПервогоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(
				Выборка.Периодичность,
				НачалоОбзора);
			Если КонецПервогоПериода >= КонецДня(КонецОбзора) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Определим интервал финансовых периодов, 
		// к которым относятся задачи, инициированные в периоде обзора
		
		// Часто он совпадает с окном обзора...
		ПервыйФинансовыйПериод    = НачалоОбзора;
		ПоследнийФинансовыйПериод = КонецОбзора;
		
		// ... но есть два исключения
		СобытиеПозжеРелевантногоПериода = КалендарьБухгалтера.СрокИстекаетПослеОкончанияРелевантногоПериода(Выборка);
		БазовыйПериодОпределяетсяПросто = КалендарьБухгалтера.БазовыйПериодОпределяетсяПросто(Выборка);
		ФинансовыйПериодОпределяетсяПросто = СобытиеПозжеРелевантногоПериода И БазовыйПериодОпределяетсяПросто;
		
		Если Не ФинансовыйПериодОпределяетсяПросто Тогда
			// Первым финансовым периодом считаем тот, к которому относятся задачи, 
			// появившиеся в начало обзора или немного ранее.
			Если БазовыйПериодОпределяетсяПросто Тогда
				ДлительностьБазовогоПериода = Выборка.Периодичность;
				ОтставаниеБазовогоПериода   = 0;
			Иначе
				ДлительностьБазовогоПериода = Выборка.БазовыйПериод;
				ОтставаниеБазовогоПериода   = Выборка.ОтставаниеБазовогоПериода;
			КонецЕсли;
			
			// Базовый период всегда предшествует сроку
			КалендарьБухгалтера.УточнитьОтставаниеБазовогоПериода(
				ОтставаниеБазовогоПериода, 
				ДлительностьБазовогоПериода, 
				Выборка.СрокМесяцев);
			
			Если ЗначениеЗаполнено(НачалоОбзора) Тогда
				ПервыйФинансовыйПериод = ПересчитатьБазовыйПериодВФинансовый(
					НачалоОбзора,
					ДлительностьБазовогоПериода,
					ОтставаниеБазовогоПериода);
			КонецЕсли;
				
			ПоследнийФинансовыйПериод = ПересчитатьБазовыйПериодВФинансовый(
				КонецОбзора,
				ДлительностьБазовогоПериода,
				ОтставаниеБазовогоПериода);
				
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(НачалоОбзора) Тогда
			// Первым финансовым периодом считаем тот, за который можем еще успеть выполнить
			// задачу в срок
			ПервыйФинансовыйПериод = КалендарьБухгалтера.НачалоАктуальногоПериода(
				Выборка,
				ТекушаяДата,
				ДатаНачалаДеятельности);
		КонецЕсли;
		
		// Сопоставим период обзора и период действия правила.
		// NB: здесь сравниваются финансовые периоды, а не базовые.
		Если ЗначениеЗаполнено(Выборка.НачалоДействия) Тогда
			ПервыйФинансовыйПериод = Макс(ПервыйФинансовыйПериод, Выборка.НачалоДействия);
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.КонецДействия) Тогда
			ПоследнийФинансовыйПериод = Мин(ПоследнийФинансовыйПериод, Выборка.КонецДействия);
		КонецЕсли;
		
		Если ПервыйФинансовыйПериод > ПоследнийФинансовыйПериод Тогда
			Продолжить;
		КонецЕсли;
		
		// Определим интервал финансовых периодов, 
		// к которым относятся задачи, инициированные в периоде обзора
		
		ФинансовыеПериоды = КалендарьБухгалтера.Периоды(ПервыйФинансовыйПериод, ПоследнийФинансовыйПериод, Выборка.ДлительностьФинансовогоПериода);
		
		Для Каждого ФинансовыйПериод Из ФинансовыеПериоды Цикл
			НоваяСтрока = Правила.Добавить();
			НоваяСтрока.Правило          = Выборка.Правило;
			НоваяСтрока.ФинансовыйПериод = ФинансовыйПериод;
		КонецЦикла;
		
	КонецЦикла;
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Правила", Правила);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Правила.Правило КАК Правило,
	|	Правила.ФинансовыйПериод КАК ФинансовыйПериод
	|ПОМЕСТИТЬ АктуальныеПравила
	|ИЗ
	|	&Правила КАК Правила
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Правило,
	|	ФинансовыйПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПравилаУплатыНалоговНаМестах";
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ПересчитатьБазовыйПериодВФинансовый(БазовыйПериод, ДлительностьБазовогоПериода, ОтставаниеБазовогоПериода)
	
	ФинансовыйПериод = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(
		ДлительностьБазовогоПериода,
		БазовыйПериод) + 1;
		
	Если ОтставаниеБазовогоПериода > 0 Тогда
		ФинансовыйПериод = ИнтерфейсыВзаимодействияБРОКлиентСервер.ДобавитьПериод(
			ФинансовыйПериод,
			ДлительностьБазовогоПериода,
			ОтставаниеБазовогоПериода);
	КонецЕсли;
	
	Возврат ФинансовыйПериод;
	
КонецФункции

Процедура ЗаполнитьПравилаОрганизации(Правила, Организация, Знач НачалоИнтервала, Знач КонецИнтервала, Задача = Неопределено)
	
	Если НачалоИнтервала >= КонецИнтервала Тогда
		Возврат;
	КонецЕсли;
	
	ДетализироватьДоПериода        = (Правила.Колонки.Найти("ФинансовыйПериод") <> Неопределено);
	ЗаполнятьВключеноПользователем = (Правила.Колонки.Найти("ВключеноПользователем") <> Неопределено);
	
	// Таблица АктуальныеПравила содержит действующие в интервале правила в разрезе финансовых периодов
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	СоздатьАктуальныеПравила(МенеджерВременныхТаблиц, НачалоИнтервала, КонецИнтервала, Организация, Задача);
	
	// В актуальных правилах проверим выполнение условий.
	// Для этого сначала определим, какие условия надо выполнить (в разрезе правил и финансовых периодов)
	// Упорядочим эти условия по возрастанию сложности.
	// Сразу отсечем условия, которые требуют ручного выбора отчетов и задач.
	
	ПорядокУсловий = Новый ТаблицаЗначений;
	ПорядокУсловий.Колонки.Добавить("Условие", Новый ОписаниеТипов("ПеречислениеСсылка.УсловияПримененияТребованийЗаконодательства"));
	ПорядокУсловий.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
	Для Каждого Условие Из Перечисления.УсловияПримененияТребованийЗаконодательства.УсловияПоВозрастаниюСложности() Цикл
		НоваяСтрока = ПорядокУсловий.Добавить();
		НоваяСтрока.Условие = Условие;
		НоваяСтрока.Порядок = ПорядокУсловий.Индекс(НоваяСтрока);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПорядокУсловий", ПорядокУсловий);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПорядокУсловий.Условие КАК Условие,
	|	ПорядокУсловий.Порядок КАК Порядок
	|ПОМЕСТИТЬ ПорядокУсловий
	|ИЗ
	|	&ПорядокУсловий КАК ПорядокУсловий
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Условие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Условия.Ссылка КАК Правило
	|ПОМЕСТИТЬ ВключаютсяТолькоВручную
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов.Условия КАК Условия
	|ГДЕ
	|	Условия.Условие В (ЗНАЧЕНИЕ(Перечисление.УсловияПримененияТребованийЗаконодательства.ЗадачаВыбранаПользователем), ЗНАЧЕНИЕ(Перечисление.УсловияПримененияТребованийЗаконодательства.ПравилоВыбраноПользователем))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Правило
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктуальныеПравила.ФинансовыйПериод КАК ФинансовыйПериод,
	|	АктуальныеПравила.Правило КАК Правило,
	|	ЕСТЬNULL(Условия.Условие, НЕОПРЕДЕЛЕНО) КАК Условие
	|ПОМЕСТИТЬ Условия
	|ИЗ
	|	АктуальныеПравила КАК АктуальныеПравила
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПравилаПредставленияОтчетовУплатыНалогов.Условия КАК Условия
	|		ПО АктуальныеПравила.Правило = Условия.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВключаютсяТолькоВручную КАК ВключаютсяТолькоВручную
	|		ПО АктуальныеПравила.Правило = ВключаютсяТолькоВручную.Правило
	|ГДЕ
	|	ВключаютсяТолькоВручную.Правило ЕСТЬ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Правило
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Правила.Ссылка КАК Правило,
	|	Правила.ФинансовыйПериод КАК ДлительностьФинансовогоПериода,
	|	УсловияПоПериодам.ФинансовыйПериод КАК ФинансовыйПериод,
	|	УсловияПоПериодам.Условие КАК Условие,
	|	ЕСТЬNULL(ПорядокУсловий.Порядок, 1000) КАК Порядок
	|ИЗ
	|	Условия КАК УсловияПоПериодам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК Правила
	|		ПО УсловияПоПериодам.Правило = Правила.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокУсловий КАК ПорядокУсловий
	|		ПО УсловияПоПериодам.Условие = ПорядокУсловий.Условие
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|ИТОГИ ПО
	|	ФинансовыйПериод,
	|	Правило";
	
	// Получим перечень выполненных условий по данным явной настройки пользователя.
	// Они связаны друг с другом и не зависят от периода - их дешевле получить заранее.
	ПроверенныеГлобальныеУсловия = РегистрыСведений.ВариантыПримененияТребованийЗаконодательства.УсловияИзНастроек(Организация);
	
	// Некоторые условия достаточно проверять только один раз
	НепериодическиеУсловия = Перечисления.УсловияПримененияТребованийЗаконодательства.НепериодическиеУсловия();
	
	// В зависимости от того, требуется ли детализация до периода,
	// коллекция будет содержать все правила,
	// или будет обнуляться при обработке каждого периода
	ПравилаСВыполненнымиУсловиями = Новый Соответствие; 
	
	// Проверим, что условия выполняются (в каждом периоде)
	Периоды = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Периоды.Следующий() Цикл
		
		ПроверенныеУсловия = Новый Соответствие;
		Для Каждого КлючИЗначение Из ПроверенныеГлобальныеУсловия Цикл
			ПроверенныеУсловия.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
		
		ВсеПравила = Периоды.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВсеПравила.Следующий() Цикл
			
			Если ЗначениеЗаполнено(ПравилаСВыполненнымиУсловиями[ВсеПравила.Правило]) Тогда
				// Это правило уже есть в списке
				Продолжить;
			КонецЕсли;
			
			УсловияДляПроверки = Новый Массив;
			
			ЕстьНеВыполненноеУсловие = Ложь;
			Условия = ВсеПравила.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока Условия.Следующий() Цикл
				
				Если Условия.Условие = Неопределено Тогда
					// Не задано никаких условий
					РезультатПроверки = Истина;
				Иначе
					РезультатПроверки = ПроверенныеУсловия[Условия.Условие];
				КонецЕсли;
				
				Если РезультатПроверки = Ложь Тогда
					ЕстьНеВыполненноеУсловие = Истина;
					Прервать;
				ИначеЕсли РезультатПроверки = Неопределено Тогда
					УсловияДляПроверки.Добавить(Условия.Условие);
				Иначе
					// Условие проверено - выполняется
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЕстьНеВыполненноеУсловие Тогда
				// Другие условия не проверяем - все равно, это правило к организации в этом периоде не применяется
				Продолжить;
			КонецЕсли;
			
			Если УсловияДляПроверки.Количество() = 0 Тогда
				// Все условия проверены - правило надо выполнять
				ПравилаСВыполненнымиУсловиями.Вставить(ВсеПравила.Правило, Истина);
				Продолжить;
			КонецЕсли;
			
			ВыполненныеУсловия = Новый Массив;
			НеВыполненноеУсловие = Перечисления.УсловияПримененияТребованийЗаконодательства.ПроверитьУсловия(
				УсловияДляПроверки,
				ВсеПравила.ФинансовыйПериод,
				ВсеПравила.ДлительностьФинансовогоПериода,
				Организация,
				ВыполненныеУсловия);
			
			Для Каждого ВыполненноеУсловие Из ВыполненныеУсловия Цикл
				ПроверенныеУсловия.Вставить(ВыполненноеУсловие, Истина);
				Если НепериодическиеУсловия[ВыполненноеУсловие] <> Неопределено Тогда
					ПроверенныеГлобальныеУсловия.Вставить(ВыполненноеУсловие, Истина);
				КонецЕсли;
			КонецЦикла;
			
			Если НеВыполненноеУсловие = Неопределено Тогда
				// Все условия проверены - правило надо выполнять
				ПравилаСВыполненнымиУсловиями.Вставить(ВсеПравила.Правило, Истина);
			Иначе
				ПроверенныеУсловия.Вставить(НеВыполненноеУсловие, Ложь);
				Если НепериодическиеУсловия[НеВыполненноеУсловие] <> Неопределено Тогда
					ПроверенныеГлобальныеУсловия.Вставить(НеВыполненноеУсловие, Ложь);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла; // ВсеПравила
		
		Если ДетализироватьДоПериода Тогда
			// Дополним коллекцию
			Для Каждого КлючИЗначение Из ПравилаСВыполненнымиУсловиями Цикл
				НоваяСтрока = Правила.Добавить();
				НоваяСтрока.Правило          = КлючИЗначение.Ключ;
				НоваяСтрока.ФинансовыйПериод = Периоды.ФинансовыйПериод;
			КонецЦикла;
			ПравилаСВыполненнымиУсловиями.Очистить();
		КонецЕсли;
		
	КонецЦикла; // Периоды
	
	Если Не ДетализироватьДоПериода Тогда
		// Дополним коллекцию
		Для Каждого КлючИЗначение Из ПравилаСВыполненнымиУсловиями Цикл
			Правила.Добавить().Правило = КлючИЗначение.Ключ;
		КонецЦикла;
	КонецЕсли;
	
	// Дополним правилами, которые действуют в силу прямого указания пользователя - 
	// выбраны им явно в списке НалогиОтчеты.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация",             Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Ссылка КАК Правило
	|ПОМЕСТИТЬ ПравилаВключенныеПользователем
	|ИЗ
	|	РегистрСведений.НалогиОтчеты КАК НалогиОтчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК ПравилаПредставленияОтчетовУплатыНалогов
	|		ПО НалогиОтчеты.НалогОтчет = ПравилаПредставленияОтчетовУплатыНалогов.Владелец
	|ГДЕ
	|	НалогиОтчеты.НалогОтчет ССЫЛКА Справочник.ЗадачиБухгалтера
	|	И НалогиОтчеты.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	НалогиОтчеты.НалогОтчет
	|ИЗ
	|	РегистрСведений.НалогиОтчеты КАК НалогиОтчеты
	|ГДЕ
	|	НалогиОтчеты.НалогОтчет ССЫЛКА Справочник.ПравилаПредставленияОтчетовУплатыНалогов
	|	И НалогиОтчеты.Организация = &Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Правило
	|";
	Запрос.Выполнить();
	
	Если ДетализироватьДоПериода Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	АктуальныеПравила.Правило КАК Правило,
		|	АктуальныеПравила.ФинансовыйПериод КАК ФинансовыйПериод
		|ИЗ
		|	АктуальныеПравила КАК АктуальныеПравила
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПравилаВключенныеПользователем КАК ПравилаВключенныеПользователем
		|		ПО АктуальныеПравила.Правило = ПравилаВключенныеПользователем.Правило";
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	АктуальныеПравила.Правило КАК Правило
		|ПОМЕСТИТЬ АктуальныеПравилаБезПериодов
		|ИЗ
		|	АктуальныеПравила КАК АктуальныеПравила
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Правило
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АктуальныеПравила.Правило КАК Правило
		|ИЗ
		|	АктуальныеПравилаБезПериодов КАК АктуальныеПравила
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПравилаВключенныеПользователем КАК ПравилаВключенныеПользователем
		|		ПО АктуальныеПравила.Правило = ПравилаВключенныеПользователем.Правило";
	
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Правила.Добавить();
		НоваяСтрока.Правило          = Выборка.Правило;
		Если ДетализироватьДоПериода Тогда
			НоваяСтрока.ФинансовыйПериод = Выборка.ФинансовыйПериод;
		КонецЕсли;
		Если ЗаполнятьВключеноПользователем Тогда
			НоваяСтрока.ВключеноПользователем = Истина;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

#КонецЕсли
