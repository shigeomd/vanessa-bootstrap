#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура ЗаполнитьТребованиямиНормативныхДокументов() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		// Предопределенные элементы не следует создавать в подчиненных узлах РИБ
 		Возврат;
	КонецЕсли;

	ПредопределенныеПравила = ПредопределенныеПравила();
	Если ПредопределенныеПравила = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗагруженныеЗадачи = Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗадачиКалендаряБухгалтера.Код КАК Идентификатор,
	|	ЗадачиКалендаряБухгалтера.Наименование,
	|	ЗадачиКалендаряБухгалтера.Ссылка,
	|	ЗадачиКалендаряБухгалтера.НаименованиеПолное,
	|	ЗадачиКалендаряБухгалтера.РеквизитДопУпорядочивания
	|ПОМЕСТИТЬ ЗадачиБухгалтера
	|ИЗ
	|	Справочник.ЗадачиБухгалтера КАК ЗадачиКалендаряБухгалтера
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиКалендаряБухгалтера.Идентификатор КАК Идентификатор,
	|	ЗадачиКалендаряБухгалтера.Наименование КАК Наименование,
	|	ЗадачиКалендаряБухгалтера.Ссылка КАК Ссылка,
	|	ЗадачиКалендаряБухгалтера.НаименованиеПолное,
	|	ЗадачиКалендаряБухгалтера.РеквизитДопУпорядочивания
	|ИЗ
	|	ЗадачиБухгалтера КАК ЗадачиКалендаряБухгалтера
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиКалендаряБухгалтера.Ссылка КАК Задача,
	|	Требования.Код КАК ИдентификаторТребования,
	|	Требования.Ссылка КАК Требование,
	|	Требования.ДатаИзменения
	|ИЗ
	|	ЗадачиБухгалтера КАК ЗадачиКалендаряБухгалтера
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК Требования
	|		ПО ЗадачиКалендаряБухгалтера.Ссылка = Требования.Владелец";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ЗагруженныеРанееЗадачи = РезультатЗапроса[1].Выгрузить();
	ЗагруженныеРанееЗадачи.Индексы.Добавить("Идентификатор");
	ЗагруженныеРанееТребования = РезультатЗапроса[2].Выгрузить();
	ЗагруженныеРанееЗадачи.Индексы.Добавить("Идентификатор");
	ЗагруженныеРанееТребования.Индексы.Добавить("Задача,ИдентификаторТребования");
	
	Для Каждого НаборТребований Из ПредопределенныеПравила Цикл // Набор описывает требования к выполнению бухгалтером какой-то задачи, например "НДС"
		
		// Синхронизируем справочник ЗадачиБухгалтера
		Выборка = ЗагруженныеРанееЗадачи.НайтиСтроки(Новый Структура("Идентификатор", НаборТребований.Идентификатор));
		
		Если Выборка.Количество() = 0 Тогда
			Объект = Справочники.ЗадачиБухгалтера.СоздатьЭлемент();
			Объект.Код                       = НаборТребований.Идентификатор;
			Объект.Наименование              = НаборТребований.Представление;
			Объект.НаименованиеПолное        = НаборТребований.НаименованиеПолное;
			Объект.РеквизитДопУпорядочивания = НаборТребований.Порядок;
			Объект.Записать();
			Задача = Объект.Ссылка;
		Иначе
			ЗагруженнаяРанееЗадача = Выборка[0];
			Задача = ЗагруженнаяРанееЗадача.Ссылка;
			Если ЗагруженнаяРанееЗадача.Наименование <> НаборТребований.Представление 
				Или ЗагруженнаяРанееЗадача.НаименованиеПолное <> НаборТребований.НаименованиеПолное
				Или ЗагруженнаяРанееЗадача.РеквизитДопУпорядочивания <> НаборТребований.Порядок Тогда
				
				Объект = ЗагруженнаяРанееЗадача.Ссылка.ПолучитьОбъект();
				Объект.Наименование              = НаборТребований.Представление;
				Объект.НаименованиеПолное        = НаборТребований.НаименованиеПолное;
				Объект.РеквизитДопУпорядочивания = НаборТребований.Порядок;
				Объект.Записать();
				
			КонецЕсли;
		КонецЕсли;
		
		// Синхронизируем справочник ПравилаПредставленияОтчетовУплатыНалогов
		
		Для Каждого ОписаниеТребования Из НаборТребований.Требования Цикл
			
			Отбор = Новый Структура;
			Отбор.Вставить("Задача",                  Задача);
			Отбор.Вставить("ИдентификаторТребования", ОписаниеТребования.Идентификатор);
			Выборка = ЗагруженныеРанееТребования.НайтиСтроки(Отбор);
			
			Объект = Неопределено;
			Если Выборка.Количество() = 0 Тогда
				Объект = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.СоздатьЭлемент();
				Объект.Владелец      = Задача;
				Объект.Код           = ОписаниеТребования.Идентификатор;
			Иначе
				ЗагруженноеРанееТребование = Выборка[0];
				Если ЗагруженноеРанееТребование.ДатаИзменения < ОписаниеТребования.ДатаИзменения Тогда
					Объект = ЗагруженноеРанееТребование.Требование.ПолучитьОбъект();
				КонецЕсли;
			КонецЕсли;
			
			Если Объект = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Объект.РеквизитДопУпорядочивания = ОписаниеТребования.Порядок;
			ЗаполнитьЗначенияСвойств(Объект, ОписаниеТребования, , "Условия");
			
			Объект.Условия.Очистить();
			Для Каждого Условие Из ОписаниеТребования.Условия Цикл
				Объект.Условия.Добавить().Условие = Условие;
			КонецЦикла;
			
			Объект.Записать();
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТребованияНормативныхДокументовXML() Экспорт
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку();
	Запись.ЗаписатьОбъявлениеXML();
	
	ПространствоИмен = Метаданные.ПакетыXDTO.ПравилаПредставленияОтчетовУплатыНалогов.ПространствоИмен;
	ТипПравила    = ФабрикаXDTO.Тип(ПространствоИмен, "ПравилаПредставленияОтчетовУплатыНалогов");
	ТипЗадача     = ФабрикаXDTO.Тип(ПространствоИмен, "Задача");
	ТипТребование = ФабрикаXDTO.Тип(ПространствоИмен, "Требование");
	ТипУсловие    = ФабрикаXDTO.Тип(ПространствоИмен, "Условие");
	
	Правила = ФабрикаXDTO.Создать(ТипПравила);
	Правила.ВерсияФормата = "3.0.1.2";
	
	ПредыдущаяВерсияПравил = ПредопределенныеПравила();
	
	ВыборкаЗадачи = Справочники.ЗадачиБухгалтера.Выбрать(,,,"РеквизитДопУпорядочивания");
	Пока ВыборкаЗадачи.Следующий() Цикл
		
		Если ВыборкаЗадачи.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		
		Задача = ФабрикаXDTO.Создать(ТипЗадача);
		Задача.Идентификатор      = ВыборкаЗадачи.Код;
		Задача.Представление      = ВыборкаЗадачи.Наименование;
		
		Задача.НаименованиеПолное = ВыборкаЗадачи.НаименованиеПолное;
		Задача.Порядок            = ВыборкаЗадачи.РеквизитДопУпорядочивания;
		
		ВыборкаТребования = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.Выбрать(,ВыборкаЗадачи.Ссылка,,"РеквизитДопУпорядочивания");
		Пока ВыборкаТребования.Следующий() Цикл
			
			Если ВыборкаТребования.ПометкаУдаления Тогда
				Продолжить;
			КонецЕсли;
			
			Требование = ФабрикаXDTO.Создать(ТипТребование);
			Требование.Идентификатор = ВыборкаТребования.Код;
			Требование.Порядок       = ВыборкаТребования.РеквизитДопУпорядочивания;
			ЗаполнитьЗначенияСвойств(Требование, ВыборкаТребования);
			
			Для Каждого ВыборкаУсловия Из ВыборкаТребования.Условия Цикл 
				
				Если ЗначениеЗаполнено(ВыборкаУсловия.Условие) Тогда
					Требование.Условие.Добавить(ВыборкаУсловия.Условие);
				КонецЕсли;
				
			КонецЦикла;
			
			// Если какие-либо параметры требования отличаются от предыдущей версии,
			// то обновим номер версии
			Если ВерсияТребованияОтличается(ПредыдущаяВерсияПравил, ВыборкаЗадачи.Код, Требование) Тогда
				Требование.ДатаИзменения = НачалоДня(ТекущаяДатаСеанса());
			КонецЕсли;
			
			Задача.Требование.Добавить(Требование);
			
		КонецЦикла;
		
		Правила.Задача.Добавить(Задача);
		
	КонецЦикла;
	
	
	ФабрикаXDTO.ЗаписатьXML(
		Запись, 
		Правила,
		"ПравилаПредставленияОтчетовУплатыНалогов",
		ПространствоИмен,
		,
		НазначениеТипаXML.Явное);
	
	Возврат Запись.Закрыть();
	
КонецФункции

Процедура УдалитьПлатаЗаНегативноеВоздействиеНаОкружающуюСреду() Экспорт
	
	// Задача ПлатаЗаНегативноеВоздействиеНаОкружающуюСреду удалена в версии 3.0.38
	// Вместо нее добавлена новая задача - "Росприроднадзор"
	
	ЗаполнитьТребованиямиНормативныхДокументов();
	
	Задача = Справочники.ЗадачиБухгалтера.НайтиПоКоду("ПлатаЗаНегативноеВоздействиеНаОкружающуюСреду");
	Если НЕ ЗначениеЗаполнено(Задача) ИЛИ Задача.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	Задача.ПолучитьОбъект().УстановитьПометкуУдаления(Истина, Истина);
	
	// После выполнения этого обработчика общих данных,
	// нужно обработать разделенные данные - см. УдалитьНастройкиПлатаЗаНегативноеВоздействиеНаОкружающуюСреду
	
КонецПроцедуры

Процедура УдалитьНастройкиПлатаЗаНегативноеВоздействиеНаОкружающуюСреду() Экспорт
	
	// Задача ПлатаЗаНегативноеВоздействиеНаОкружающуюСреду удалена в версии 3.0.38
	// Вместо нее добавлена новая задача - "Росприроднадзор"
	
	// Пользователь мог выполнить настройки для задачи ПлатаЗаНегативноеВоздействиеНаОкружающуюСреду.
	// В таком случае их нужно перенести на новые правила.
	
	// Этот обработчик следует вызывать после УдалитьПлатаЗаНегативноеВоздействиеНаОкружающуюСреду()
	// (строго говоря - после ЗаполнитьТребованиямиНормативныхДокументов())
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КодСтаройЗадачи", "ПлатаЗаНегативноеВоздействиеНаОкружающуюСреду");
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НалогиОтчеты.Организация
	|ИЗ
	|	РегистрСведений.НалогиОтчеты КАК НалогиОтчеты
	|ГДЕ
	|	НалогиОтчеты.НалогОтчет.Код = &КодСтаройЗадачи";
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	// Вместо этих задач нужно создать настройки для новых - появившихся в 3.0.38 - правил
	ИмяНовойЗадачи = "Росприроднадзор";
	ИменаНовыхПравил = Новый Массив;
	ИменаНовыхПравил.Добавить("2014_ПлатаЗаНегативноеВоздействиеНаОкружающуюСреду");
	ИменаНовыхПравил.Добавить("2014_ПлатаЗаНегативноеВоздействиеУплата");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИмяЗадачи",   ИмяНовойЗадачи);
	Запрос.УстановитьПараметр("ИменаПравил", ИменаНовыхПравил);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Правила.Ссылка КАК Правило
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов.Условия КАК Правила
	|ГДЕ
	|	Правила.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияПримененияТребованийЗаконодательства.ПравилоВыбраноПользователем)
	|	И Правила.Ссылка.Владелец.Код = &ИмяЗадачи
	|	И Правила.Ссылка.Код В(&ИменаПравил)";
	НовыеПравила = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Правило");
	
	Если НовыеПравила.Количество() = 0 Тогда
		// Ничего не сможем создать
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Для Каждого НовоеПравило Из НовыеПравила Цикл
			НоваяНастройка = РегистрыСведений.НалогиОтчеты.СоздатьМенеджерЗаписи();
			НоваяНастройка.Организация = Выборка.Организация;
			НоваяНастройка.НалогОтчет  = НовоеПравило;
			НоваяНастройка.Записать();
		КонецЦикла;
		
		СтараяНастройка = РегистрыСведений.НалогиОтчеты.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(СтараяНастройка, Выборка);
		СтараяНастройка.Удалить();
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Чтение файла с требованиями нормативных документов

Функция НовыйОписаниеТребования()
	
	ОписаниеСправочника = Метаданные.Справочники.ПравилаПредставленияОтчетовУплатыНалогов;
	ОписаниеРеквизитов  = ОписаниеСправочника.Реквизиты;
	ТипИдентификатора   = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(ОписаниеСправочника.ДлинаКода));
	ТипНаименования     = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(ОписаниеСправочника.ДлинаНаименования));
	
	Требования = Новый ТаблицаЗначений;
	Требования.Колонки.Добавить("Идентификатор",                 ТипИдентификатора); // Строковой идентификатор требования (уникален в пределах задачи)
	Требования.Колонки.Добавить("Наименование",                  ТипНаименования);
	Требования.Колонки.Добавить("Порядок",                       Новый ОписаниеТипов("Число"));
	Требования.Колонки.Добавить("ДатаИзменения",                 ОписаниеРеквизитов.ДатаИзменения.Тип);
	Требования.Колонки.Добавить("ЕстьИнформацияНаИТС",           ОписаниеРеквизитов.ЕстьИнформацияНаИТС.Тип);
	// Условия, в которых следует применять это требование
	Требования.Колонки.Добавить("НачалоДействия",                ОписаниеРеквизитов.НачалоДействия.Тип); // Дата, начиная с которой применяются требования, которые предусматривают это требование
	Требования.Колонки.Добавить("КонецДействия",                 ОписаниеРеквизитов.КонецДействия.Тип); // Дата, по которую применяются требования, которые предусматривают это требование
	Требования.Колонки.Добавить("Условия",                       Новый ОписаниеТипов("Массив")); // Условия, при выполнении которых применяется требование. Выбираются из классификатора КлассификаторУсловий()
	// Способ выполнения требования
	Требования.Колонки.Добавить("Описание",                      ОписаниеРеквизитов.Описание.Тип); // Особая часть представления для пользователя
	Требования.Колонки.Добавить("Действие",                      ОписаниеРеквизитов.Действие.Тип); // Отчет, УплатаНалога
	Требования.Колонки.Добавить("ФинансовыйПериод",              ОписаниеРеквизитов.ФинансовыйПериод.Тип); // Налоговый период (для задач, не связанных с налогами - отчетный период)
	Требования.Колонки.Добавить("Периодичность",                 ОписаниеРеквизитов.Периодичность.Тип); // Периодичность выполнения действия в рамках отчетного периода
	Требования.Колонки.Добавить("ОграничениеПериода",            ОписаниеРеквизитов.ОграничениеПериода.Тип); // Периоды (в рамках финансового), в которые действие не следует выполнять
	Требования.Колонки.Добавить("СрокМесяцев",                   ОписаниеРеквизитов.СрокМесяцев.Тип); // Срок выполнения действия после окончания периода, к которому оно относится.
	Требования.Колонки.Добавить("СрокДней",                      ОписаниеРеквизитов.СрокДней.Тип); // Срок выполнения действия после окончания периода, к которому оно относится. 
	Требования.Колонки.Добавить("СрокМожетЗакончитьсяВВыходной", ОписаниеРеквизитов.СрокМожетЗакончитьсяВВыходной.Тип);
	
	Требования.Колонки.Добавить("БазовыйПериод",                 ОписаниеРеквизитов.БазовыйПериод.Тип);
	Требования.Колонки.Добавить("ОтставаниеБазовогоПериода",     ОписаниеРеквизитов.ОтставаниеБазовогоПериода.Тип);
	
	Требования.Индексы.Добавить("Идентификатор");
	
	Возврат Требования;
	
КонецФункции

Функция ПредопределенныеПравила()
	
	Макет = Справочники.ЗадачиБухгалтера.ПолучитьМакет("ТребованияНормативныхДокументов");
	
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(Макет.ПолучитьТекст());
	Объект = ФабрикаXDTO.ПрочитатьXML(Чтение);
	
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(Объект.ВерсияФормата, "3.0.2.0") >= 0 Тогда
		Возврат Неопределено; // Неподдерживаемая версия правил
	КонецЕсли;
	
	ДлинаНаименования   = Метаданные.Справочники.ЗадачиБухгалтера.ДлинаНаименования;
	ДлинаИдентификатора = Метаданные.Справочники.ЗадачиБухгалтера.ДлинаКода;
	
	Правила = Новый ТаблицаЗначений;
	Правила.Колонки.Добавить("Идентификатор",      Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(ДлинаИдентификатора)));
	Правила.Колонки.Добавить("Представление",      Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(ДлинаНаименования)));
	Правила.Колонки.Добавить("НаименованиеПолное", Новый ОписаниеТипов("Строка"));
	Правила.Колонки.Добавить("Порядок",            Новый ОписаниеТипов("Число"));
	Правила.Колонки.Добавить("Требования",         Новый ОписаниеТипов("ТаблицаЗначений"));
	Правила.Индексы.Добавить("Идентификатор");
	
	// Читаем тело файла правил
	Для Каждого Задача Из Объект.Задача Цикл
		
		НаборПравил = Правила.Добавить();
		ЗаполнитьЗначенияСвойств(НаборПравил, Задача);
		
		НаборПравил.Требования    = НовыйОписаниеТребования();
		
		Для Каждого Требование Из Задача.Требование Цикл
			
			НовоеТребование = НаборПравил.Требования.Добавить();
			ЗаполнитьЗначенияСвойств(НовоеТребование, Требование);
			
			Для Каждого Условие Из Требование.Условие Цикл
				
				НовоеТребование.Условия.Добавить(Условие);
				
			КонецЦикла;
				
		КонецЦикла;
				
	КонецЦикла;
		
	Возврат Правила;
	
КонецФункции

// Требование - ЗначениеXDTO
Функция ВерсияТребованияОтличается(ПредыдущаяВерсияПравил, ИдентификаторЗадачи, Требование)
	
	Если ПредыдущаяВерсияПравил = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПредыдущаяВерсияНабораТребований = ПредыдущаяВерсияПравил.Найти(ИдентификаторЗадачи, "Идентификатор");
	Если ПредыдущаяВерсияНабораТребований = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПредыдущаяВерсияТребования = ПредыдущаяВерсияНабораТребований.Требования.Найти(Требование.Идентификатор, "Идентификатор");
	Если ПредыдущаяВерсияТребования = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Сравним версии требований
	// Требование - ЗначениеXDTO, ПредыдущаяВерсияТребования - строка таблицы значений
	// Для сравнения версий приведем их к одинаковому формату хранения
	
	НоваяВерсияЗначенияПолей      = Новый Массив;
	ПредыдущаяВерсияЗначенияПолей = Новый Массив;
	
	Поля = ПредыдущаяВерсияНабораТребований.Требования.Колонки;
	Для Каждого ОписаниеПоля Из Поля Цикл
		
		ПредыдущаяВерсияЗначениеПоля = ПредыдущаяВерсияТребования[ОписаниеПоля.Имя];
		
		Если ОписаниеПоля.Имя = "Условия" Тогда
			
			// В XDTO это СписокXDTO. И он отличается именем.
			ЗначенияСписка = Новый Массив;
			Для ИндексЭлемента = 0 По Требование.Условие.Количество() - 1 Цикл
				ЗначенияСписка.Добавить(Требование.Условие.Получить(ИндексЭлемента));
			КонецЦикла;
			НоваяВерсияЗначениеПоля = ЗначенияСписка;
			
		Иначе
			НоваяВерсияЗначениеПоля = Требование[ОписаниеПоля.Имя];
		КонецЕсли;
		
		НоваяВерсияЗначенияПолей.Добавить(НоваяВерсияЗначениеПоля);
		ПредыдущаяВерсияЗначенияПолей.Добавить(ПредыдущаяВерсияЗначениеПоля);
		
	КонецЦикла;
	
	Возврат Не ОбщегоНазначения.ДанныеСовпадают(НоваяВерсияЗначенияПолей, ПредыдущаяВерсияЗначенияПолей);
	
КонецФункции

// Возвращает реквизиты справочника, которые образуют естественный ключ
//  для элементов справочника.
//
// Возвращаемое значение: Массив(Строка) - массив имен реквизитов, образующих
//  естественный ключ.
//
Функция ПоляЕстественногоКлюча() Экспорт
	
	Результат = Новый Массив();
	
	Результат.Добавить("Код");
	
	Возврат Результат;
	
КонецФункции

#КонецЕсли
