&НаКлиенте
Перем ФлагОтработалоСобытиеПоляВводаБИК;

&НаКлиенте
Перем УстановкаОсновногоБанковскогоСчетаВыполнена;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Печать
	
	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если НЕ ЗначениеЗаполнено(Объект.Владелец) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не указан владелец банковского счета!'"),,,, Отказ);
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		Элементы.ЗаголовокВладелец.Заголовок = НСтр("ru = 'Контрагент:'");
		
		Элементы.ГруппаПодразделение.Видимость        = Ложь;
		Элементы.ГруппаДатаОткрытияЗакрытия.Видимость = Ложь;
		
	ИначеЕсли ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.Организации") Тогда
		
		ИспользуетсяНесколькоОрганизаций = Справочники.Организации.ИспользуетсяНесколькоОрганизаций();
		
		Элементы.Владелец.Видимость          = ИспользуетсяНесколькоОрганизаций;
		Элементы.ЗаголовокВладелец.Видимость = ИспользуетсяНесколькоОрганизаций;
		
		Элементы.ЗаголовокВладелец.Заголовок = НСтр("ru = 'Организация:'");
		
		Элементы.ГруппаПодразделение.Видимость        = Истина;
		Элементы.ГруппаДатыОткрытияЗакрытияСчета.РасширеннаяПодсказка.Заголовок =
			?(УчетнаяПолитика.ПрименяетсяУСН(Объект.Владелец, ТекущаяДата()),
				НСтр("ru = 'Дата открытия и закрытия счета необходимы для правильного формирования Книги учета доходов и расходов (УСН)'"),
				"");
		
		УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Организация", Объект.Владелец));
		
	ИначеЕсли ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		Элементы.ЗаголовокВладелец.Заголовок = НСтр("ru = 'Физическое лицо:'");
		
		Элементы.ГруппаПодразделение.Видимость        = Ложь;
		Элементы.ГруппаДатаОткрытияЗакрытия.Видимость = Ложь;
		Элементы.ГруппаВидСчетаНомерИДатаРазрешения.Видимость = Ложь;
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Неверно указан владелец банковского счета!'"),,,, Отказ);
		Возврат;
		
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ОбработатьВыборБанка(ЭтотОбъект, Ложь);
	ОбработатьВыборБанкаДляРасчетов(ЭтотОбъект, Ложь);
	
	ИспользуетсяБанкДляРасчетов = ЗначениеЗаполнено(Объект.БанкДляРасчетов);
	
	Если ТипЗнч(Объект.Владелец) <> Тип("СправочникСсылка.ФизическиеЛица") Тогда
		КонтрагентРезидентТаможенногоСоюза = УчетНДС.КонтрагентРезидентТаможенногоСоюза(Объект.Владелец);
	КонецЕсли;
	
	БанкНеВыбран            = НСтр("ru = '<заполняется автоматически после ввода БИК>'");
	БанкДляРасчетовНеВыбран = НСтр("ru = '<заполняется автоматически после ввода БИК>'");
	
	Элементы.ПодразделениеОрганизацииРасширеннаяПодсказка.Заголовок =
		НСтр("ru = 'Подразделение, которое подставляется по умолчанию в Поступление и Списание с этого банковского счета'");
	
	Если Параметры.Ключ.Пустая() Тогда
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			Объект.Наименование = "";
			УстановитьНаименованиеСчета(ЭтотОбъект);
		Иначе
			Объект.ВалютаДенежныхСредств = ВалютаРегламентированногоУчета;
			АвтоНаименование = СокрЛП(Объект.Наименование);
			Если ПустаяСтрока(Объект.НомерСчета) И НЕ ПустаяСтрока(АвтоНаименование)
				И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(АвтоНаименование) Тогда
				Объект.НомерСчета = АвтоНаименование;
			Иначе
				Объект.Наименование = "";
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если Параметры.ЗначенияЗаполнения.Свойство("ВалютаДенежныхСредств") Тогда
			Элементы.ВалютаДенежныхСредств.ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
	УстановитьУсловноеОформление();
	
	РазделениеВключено = ОбщегоНазначенияПовтИсп.РазделениеВключено();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	МассивНепроверяемыхРеквизитов  = Новый Массив;
	
	Если ИспользуетсяБанкДляРасчетов Тогда
		МассивНепроверяемыхРеквизитов.Добавить("БИКБанка");
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("БИКБанкаДляРасчетов");
	КонецЕсли;
	
	Если Объект.ВалютаДенежныхСредств = ВалютаРегламентированногоУчета И НЕ КонтрагентРезидентТаможенногоСоюза Тогда
		
		ТекстОшибки = "";
		Если НЕ ПроверитьКорректностьНомераСчета(Объект.НомерСчета, Объект.Валютный, ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "НомерСчета", "Объект", Отказ);
		КонецЕсли;
		
		Если НЕ ИспользуетсяБанкДляРасчетов Тогда
			
			ТекстОшибки = "";
			Если НЕ ПроверитьКорректностьБИК(БИКБанка, ТекстОшибки) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "БИКБанка",, Отказ);
			ИначеЕсли НЕ ПустаяСтрока(БИКБанка) И Объект.Банк.Пустая() Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Банк с БИК ""%1"" не найден в справочнике банков'"), БИКБанка);
				ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
					"Поле", "Корректность", "БИК",,, ТекстОшибки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "БИКБанка",, Отказ);
			КонецЕсли;
			
		Иначе
			
			ТекстОшибки = "";
			Если НЕ ПроверитьКорректностьБИК(БИКБанкаДляРасчетов, ТекстОшибки) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "БИКБанкаДляРасчетов",, Отказ);
			ИначеЕсли НЕ ПустаяСтрока(БИКБанкаДляРасчетов) И Объект.БанкДляРасчетов.Пустая() Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Банк для расчетов с БИК ""%1"" не найден в справочнике банков'"), БИКБанкаДляРасчетов);
				ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
					"Поле", "Корректность", "БИК банка для расчетов",,, ТекстОшибки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "БИКБанкаДляРасчетов",, Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ ИспользуетсяБанкДляРасчетов Тогда
		ТекущийОбъект.БанкДляРасчетов = Неопределено;
		РеквизитыБанкаДляРасчетов     = Неопределено;
		БИКБанкаДляРасчетов           = "";
		БанкДляРасчетов               = "";
		Элементы.СтраницыБанкДляРасчетов.ТекущаяСтраница = Элементы.СтраницаБанкДляРасчетовНеВыбран;
	ИначеЕсли ПустаяСтрока(БИКБанка) Тогда
		РеквизитыБанка     = Неопределено;
		ТекущийОбъект.Банк = Неопределено;
		Банк               = "";
		Элементы.СтраницыБанк.ТекущаяСтраница = Элементы.СтраницаБанкНеВыбран;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТипЗнч(НаименованиеПлательщикаПриПеречисленииВБюджет) = Тип("Строка")
		И ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.Организации")
		И (РольДоступна("ПолныеПрава") ИЛИ РольДоступна("ДобавлениеИзменениеНастроекБухгалтерии")) Тогда
			ТекущеНаименованиеПлательщика = СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Объект.Владелец, "НаименованиеПлательщикаПриПеречисленииВБюджет"));
			Если НаименованиеПлательщикаПриПеречисленииВБюджет <> ТекущеНаименованиеПлательщика Тогда
				ОрганизацияОбъект = Объект.Владелец.ПолучитьОбъект();
				ОрганизацияОбъект.НаименованиеПлательщикаПриПеречисленииВБюджет = НаименованиеПлательщикаПриПеречисленииВБюджет;
				
				Попытка
					ОрганизацияОбъект.Записать();
				Исключение
					ИнформацияОбОшибке = ИнформацияОбОшибке();
					Если ИнформацияОбОшибке.Причина = Неопределено Тогда
						ОписаниеОшибки = ИнформацияОбОшибке.Описание;
					Иначе
						ОписаниеОшибки = ИнформацияОбОшибке.Причина.Описание;
					КонецЕсли;
					
					ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка при записи настроек организации:
						|%1'"), ОписаниеОшибки);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
				КонецПопытки;
			КонецЕсли;
	КонецЕсли;
	
	Если Справочники.БанковскиеСчета.КоличествоБанковскихСчетовОрганизации(Объект.Владелец) = 1 Тогда
		ПараметрыЗаписи.Вставить("ЭтоЕдинственныйБанковскийСчет");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрОповещения = Новый Структура("Ссылка, Владелец", Объект.Ссылка, Объект.Владелец);
	
	Оповестить("ИзмененБанковскийСчет", ПараметрОповещения);
	
	Если ПараметрыЗаписи.Свойство("ЭтоЕдинственныйБанковскийСчет") Тогда
		
		УстановкаОсновногоБанковскогоСчетаВыполнена = Ложь;
		
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("КонтрагентОрганизация",  Объект.Владелец);
		СтруктураПараметров.Вставить("ОсновнойБанковскийСчет", Объект.Ссылка);
		
		Оповестить("УстановкаОсновногоБанковскогоСчетаПриЗаписи", СтруктураПараметров);
		
		// Если форма владельца закрыта, то запишем основной банковский счет самостоятельно.
		Если НЕ УстановкаОсновногоБанковскогоСчетаВыполнена Тогда
			УстановитьОсновнойБанковскийСчет(СтруктураПараметров);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписанЭлементБанк" Тогда
		
		Если ТипЗнч(Параметр) = Тип("СправочникСсылка.Банки")
			И ЗначениеЗаполнено(Параметр)
			И Объект.Банк <> Параметр Тогда
			
			Объект.Банк = Параметр;
			
		КонецЕсли;
		
		ОбработатьВыборБанка(ЭтотОбъект, Ложь);
		ОбработатьВыборБанкаДляРасчетов(ЭтотОбъект, Ложь);
		УправлениеФормой(ЭтотОбъект);
		
	ИначеЕсли ИмяСобытия = "УстановкаОсновногоБанковскогоСчетаВыполнена" Тогда
		
		УстановкаОсновногоБанковскогоСчетаВыполнена = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ОбработкаВыбораНаСервере(ВыбранноеЗначение);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НомерСчетаПриИзменении(Элемент)
	
	Объект.НомерСчета = СокрЛП(Объект.НомерСчета);
	
	УстановитьНаименованиеСчета(ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДенежныхСредствПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ВалютаДенежныхСредств) Тогда
		Объект.ВалютаДенежныхСредств = ВалютаРегламентированногоУчета;
	КонецЕсли;
	
	Объект.Валютный = Объект.ВалютаДенежныхСредств <> ВалютаРегламентированногоУчета;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура БИКБанкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбораБанка();
	
КонецПроцедуры

&НаКлиенте
Процедура БИКБанкаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ФлагОтработалоСобытиеПоляВводаБИК = Истина;
	СписокНайденныхБанков = НайтиБанкВКлассификаторе(СокрЛП(Текст), Элемент.Имя, Объект.Валютный, КонтрагентРезидентТаможенногоСоюза);
	Если СписокНайденныхБанков <> Неопределено Тогда
		Если СписокНайденныхБанков.Количество() > 1 Тогда
			СтандартнаяОбработка = Ложь;
			ДанныеВыбора         = СписокНайденныхБанков;
		ИначеЕсли СписокНайденныхБанков.Количество() = 1 Тогда
			Объект.Банк          = СписокНайденныхБанков[0].Значение;
			ОбработатьВыборБанка(ЭтотОбъект);
		Иначе
			ПредложитьСтандартныйВыбор(СокрЛП(Текст), Элемент.Имя);
		КонецЕсли;
	КонецЕсли;
	
	ТекущийЭлемент = Элемент;
	
	ПодключитьОбработчикОжидания("Подключаемый_СброситьФлагОтработалоСобытиеПоляВводаБИК", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура БИКБанкаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Объект.Банк = ВыбранноеЗначение;
	ОбработатьВыборБанка(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура БИКБанкаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РеквизитыБанка       = Неопределено;
	Объект.Банк          = Неопределено;
	ОбработатьВыборБанка(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура БанкНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.Банк) Тогда
		ОткрытьФорму("Справочник.Банки.ФормаОбъекта", Новый Структура("Ключ", Объект.Банк), ЭтотОбъект);
	Иначе
		ОткрытьФормуВыбораБанка();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользуетсяБанкДляРасчетовПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура БИКБанкаДляРасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбораБанкаДляРасчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура БИКБанкаДляРасчетовОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	СписокНайденныхБанков = НайтиБанкВКлассификаторе(СокрЛП(Текст), Элемент.Имя, Объект.Валютный, КонтрагентРезидентТаможенногоСоюза);
	Если СписокНайденныхБанков <> Неопределено Тогда
		
		Если СписокНайденныхБанков.Количество() > 1 Тогда
			СтандартнаяОбработка   = Ложь;
			ДанныеВыбора           = СписокНайденныхБанков;
		ИначеЕсли СписокНайденныхБанков.Количество() = 1 Тогда
			Объект.БанкДляРасчетов = СписокНайденныхБанков[0].Значение;
			ОбработатьВыборБанкаДляРасчетов(ЭтотОбъект);
		Иначе
			ПредложитьСтандартныйВыбор(СокрЛП(Текст), Элемент.Имя);
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущийЭлемент = Элемент;
	
КонецПроцедуры

&НаКлиенте
Процедура БИКБанкаДляРасчетовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка   = Ложь;
	Объект.БанкДляРасчетов = ВыбранноеЗначение;
	ОбработатьВыборБанкаДляРасчетов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура БИКБанкаДляРасчетовОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка      = Ложь;
	РеквизитыБанкаДляРасчетов = Неопределено;
	Объект.БанкДляРасчетов    = Неопределено;
	ОбработатьВыборБанкаДляРасчетов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура БанкДляРасчетовНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.БанкДляРасчетов) Тогда
		ОткрытьФорму("Справочник.Банки.ФормаОбъекта", Новый Структура("Ключ", Объект.БанкДляРасчетов), ЭтотОбъект);
	Иначе
		ОткрытьФормуВыбораБанкаДляРасчетов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	СформироватьАвтоНаименование(ЭтотОбъект, Объект.Наименование);
	
КонецПроцедуры

&НаКлиенте
Процедура СообщениеПрямогоОбменаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(СоглашениеПрямогоОбменаСБанками) Тогда
		ПараметрыФормы = Новый Структура("Ключ, РежимОткрытияОкна",
			СоглашениеПрямогоОбменаСБанками, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		ОткрытьФорму("Справочник.СоглашенияОбИспользованииЭД.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаЭДОНажатие(Элемент)
	
	Обработчик = Новый ОписаниеОповещения("ПослеСозданияНастройкиЭДО", ЭтотОбъект);
	ЭлектронныеДокументыКлиент.ОткрытьСоздатьНастройкуЭДОСБанком(
		Объект.Владелец, Объект.Банк, Объект.НомерСчета, Обработчик);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПослеСозданияНастройкиЭДО(НастройкаЭДО, Параметры) Экспорт
	
	Элементы.НастройкаЭДО.Заголовок = ЭлектронныеДокументыКлиентСервер.ЗаголовокНастройкиЭДОСБанком(
		Объект.Владелец, Объект.Банк);

КонецПроцедуры	

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВсеБанки(Команда)
	
	ОткрытьФормуВыбораБанка();
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеБанкиДляРасчетов(Команда)
	
	ОткрытьФормуВыбораБанкаДляРасчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиБанк(Команда)
	
	// Нужно проверить явно, т.к. может быть Неопределено.
	// Если Истина, значит эти действия мы уже выполнили в поле ввода
	Если ФлагОтработалоСобытиеПоляВводаБИК = Истина Тогда
		ФлагОтработалоСобытиеПоляВводаБИК = Ложь;
		Возврат;
	КонецЕсли;
	
	ТекущийЭлемент = Элементы.БИКБанка;
	СписокНайденныхБанков = НайтиБанкВКлассификаторе(СокрЛП(БИКБанка), "БИКБанка",
		Объект.Валютный, КонтрагентРезидентТаможенногоСоюза);
	
	Если СписокНайденныхБанков <> Неопределено И СписокНайденныхБанков.Количество() = 0 Тогда
		ПредложитьСтандартныйВыбор(СокрЛП(БИКБанка), "БИКБанка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиБанкДляРасчетов(Команда)
	
	ТекущийЭлемент = Элементы.БИКБанкаДляРасчетов;
	СписокНайденныхБанков = НайтиБанкВКлассификаторе(СокрЛП(БИКБанкаДляРасчетов), "БИКБанкаДляРасчетов",
		Объект.Валютный, КонтрагентРезидентТаможенногоСоюза);
	
	Если СписокНайденныхБанков <> Неопределено И СписокНайденныхБанков.Количество() = 0 Тогда
		ПредложитьСтандартныйВыбор(СокрЛП(БИКБанкаДляРасчетов), "БИКБанкаДляРасчетов");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПлатежныхПорученийТребований(Команда)
	
	ПараметрыФормы = Новый Структура("БанковскийСчетОрганизации, БанковскийСчетКонтрагента, АвтоТекстНазначения, НастройкиПП");
	
	Если Элементы.ГруппаПодразделение.Видимость Тогда
		// Владелец - Организация
		ПараметрыФормы.Вставить("ЭтоСчетОрганизации", Истина);
		ПараметрыФормы.Вставить("Организация",        Объект.Владелец);
		ПараметрыФормы.БанковскийСчетОрганизации = Объект.Ссылка;
		ПараметрыФормы.НастройкиПП = Новый Структура("ТекстКорреспондента, ВсегдаУказыватьКПП, МесяцПрописью, СуммаБезКопеек",
			Объект.ТекстКорреспондента, Объект.ВсегдаУказыватьКПП, Объект.МесяцПрописью, Объект.СуммаБезКопеек);
		
		Если ТипЗнч(НаименованиеПлательщикаПриПеречисленииВБюджет) = Тип("Строка") Тогда
			ПараметрыФормы.НастройкиПП.Вставить("НаименованиеПлательщикаПриПеречисленииВБюджет",
				НаименованиеПлательщикаПриПеречисленииВБюджет);
		КонецЕсли;
	Иначе
		// Владелец - Контрагент
		ПараметрыФормы.БанковскийСчетКонтрагента = Объект.Ссылка;
		ПараметрыФормы.Вставить("Контрагент", Объект.Владелец);
		ПараметрыФормы.НастройкиПП = Новый Структура("ТекстКорреспондента, ТекстНазначения, ВсегдаУказыватьКПП",
			Объект.ТекстКорреспондента, Объект.ТекстНазначения, Объект.ВсегдаУказыватьКПП);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("Наименование", Объект.Наименование);
	ОткрытьФорму("ОбщаяФорма.НастройкиПлатежныхПорученийТребований", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();


	// НомерСчета

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НомерСчета");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Валютный", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// БИКБанка

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "БИКБанка");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ИспользуетсяБанкДляРасчетов", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораНаСервере(ВыбранноеЗначение)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
		
		Если ВыбранноеЗначение.Свойство("МесяцПрописью") Тогда
			ХранилищеОбщихНастроек.Сохранить("НастройкиПлатежныхПорученийТребований", "ВсегдаУказыватьКППОрганизации",
				ВыбранноеЗначение.ВсегдаУказыватьКПП);
			НаименованиеПлательщикаПриПеречисленииВБюджет = СокрЛП(ВыбранноеЗначение.НаименованиеПлательщикаПриПеречисленииВБюджет);
		Иначе
			Если ВыбранноеЗначение.Свойство("ВсегдаУказыватьКПП") Тогда
				ХранилищеОбщихНастроек.Сохранить("НастройкиПлатежныхПорученийТребований", "ВсегдаУказыватьКППКонтрагента",
					ВыбранноеЗначение.ВсегдаУказыватьКПП);
			КонецЕсли;
		КонецЕсли;
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НайтиБанкВКлассификаторе(ТекстДляПоиска, Поле, Валютный, ТаможенныйСоюз)
	
	Если ПустаяСтрока(ТекстДляПоиска) Тогда
		ТекстСообщения = "";
		Если Поле = "БИКБанкаДляРасчетов" Тогда
			Если НЕ ЗначениеЗаполнено(Объект.Банк) Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
					"Поле", "Заполнение", "БИК банка для расчетов");
			КонецЕсли;
		Иначе
			Если НЕ ИспользуетсяБанкДляРасчетов Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
					"Поле", "Заполнение", "БИК");
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, Поле);
		КонецЕсли;
		
		Возврат Неопределено;
	КонецЕсли;
	
	Если Найти(Поле, "БИК") = 1 Тогда
		ОбластьПоиска = "Код";
	ИначеЕсли Найти(Поле, "Коррсчет") = 1 Тогда
		ОбластьПоиска = "КоррСчет";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	СписокНайденныхБанков = ПолучитьСписокБанковПоРеквизитам(ОбластьПоиска, ТекстДляПоиска, Валютный, ТаможенныйСоюз);
	
	Если ОбластьПоиска = "Код" И СписокНайденныхБанков.Количество() = 1 Тогда
		Если Поле = "БИКБанкаДляРасчетов" Тогда
			ДеятельностьБанкаНепрямыхРасчетовПрекращена = ДеятельностьБанкаПрекращена(ТекстДляПоиска);
		Иначе
			ДеятельностьБанкаПрекращена = ДеятельностьБанкаПрекращена(ТекстДляПоиска);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СписокНайденныхБанков;
	
КонецФункции

&НаКлиенте
Процедура ПредложитьСтандартныйВыбор(ТекстДляПоиска, Поле)
	Перем ТекстОшибки;
	
	Если Найти(Поле, "БИК") = 1 Тогда
		ОбластьПоиска = "Код";
	ИначеЕсли Найти(Поле, "Коррсчет") = 1 Тогда
		ОбластьПоиска = "КоррСчет";
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ОбластьПоиска = "Код" Тогда
		
		Если НЕ Объект.Валютный И
			 НЕ КонтрагентРезидентТаможенногоСоюза И
			 НЕ ПроверитьКорректностьБИК(ТекстДляПоиска, ТекстОшибки) Тогда
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, Поле);
			Возврат;
		КонецЕсли;
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Банк с БИК ""%1"" не найден в справочнике банков'"), ТекстДляПоиска);
		
	ИначеЕсли ОбластьПоиска = "КоррСчет" Тогда
		
		Если НЕ ПроверитьКорректностьНомераСчета(ТекстДляПоиска, Объект.Валютный, ТекстОшибки) Тогда
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, Поле);
			Возврат;
		КонецЕсли;
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Банк с корр. счетом ""%1"" не найден в справочнике банков'"), ТекстДляПоиска);
		
	КонецЕсли;
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить("Выбрать",     НСтр("ru = 'Выбрать из списка'"));
	Если НЕ РазделениеВключено ИЛИ Объект.Валютный ИЛИ КонтрагентРезидентТаможенногоСоюза Тогда
		Кнопки.Добавить("Создать", НСтр("ru = 'Создать банк'"));
	КонецЕсли;
	Кнопки.Добавить("Продолжить",  НСтр("ru = 'Продолжить ввод'"));
	Кнопки.Добавить("Отменить",    НСтр("ru = 'Отменить ввод'"));
	
	ДополнительныеПараметры   = Новый Структура("Поле, ТекстДляПоиска", Поле, ТекстДляПоиска);
	ОписаниеОповещениеяВопрос = Новый ОписаниеОповещения("ПредложитьСтандартныйВыборЗавершение",
		ЭтотОбъект, ДополнительныеПараметры);
	
	ПоказатьВопрос(
		ОписаниеОповещениеяВопрос,
		ТекстВопроса,
		Кнопки,,
		"Выбрать",
		НСтр("ru = 'Банк не найден'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораБанка()
	
	ПараметрыФормы = Новый Структура(
		"ТекущаяСтрока, ПараметрВыборГруппИЭлементов",
		Объект.Банк, ИспользованиеГруппИЭлементов.Элементы);
		
	ОткрытьФорму("Справочник.Банки.ФормаВыбора", ПараметрыФормы, Элементы.БИКБанка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораБанкаДляРасчетов()
	
	ПараметрыФормы = Новый Структура(
		"ТекущаяСтрока, ПараметрВыборГруппИЭлементов",
		Объект.БанкДляРасчетов, ИспользованиеГруппИЭлементов.Элементы);
	
	ОткрытьФорму("Справочник.Банки.ФормаВыбора", ПараметрыФормы, Элементы.БИКБанкаДляРасчетов);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбработатьВыборБанка(Форма, ВызватьУправлениеФормой = Истина)
	
	Форма.РеквизитыБанка = ПолучитьРеквизитыБанка(Форма.Объект.Банк, Форма.Объект.Владелец, Форма.Объект.Валютный);
	Форма.БИКБанка       = Форма.РеквизитыБанка.Код;
	Форма.ДеятельностьБанкаПрекращена     = Форма.РеквизитыБанка.ДеятельностьБанкаПрекращена;
	Форма.СоглашениеПрямогоОбменаСБанками = Форма.РеквизитыБанка.СоглашениеПрямогоОбменаСБанками;
	
	Если ЗначениеЗаполнено(Форма.СоглашениеПрямогоОбменаСБанками) Тогда
		Форма.СообщениеПрямогоОбмена = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Соглашение о прямом обмене %1'"), НРЕГ(Форма.РеквизитыБанка.СтатусСоглашения));
	Иначе
		Форма.СообщениеПрямогоОбмена = НСтр("ru = ''");
	КонецЕсли;
	
	Если ВызватьУправлениеФормой Тогда
		УправлениеФормой(Форма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбработатьВыборБанкаДляРасчетов(Форма, ВызватьУправлениеФормой = Истина)
	
	Форма.РеквизитыБанкаДляРасчетов = ПолучитьРеквизитыБанка(Форма.Объект.БанкДляРасчетов, Форма.Объект.Владелец, Форма.Объект.Валютный);
	Форма.БИКБанкаДляРасчетов       = Форма.РеквизитыБанкаДляРасчетов.Код;
	Форма.ДеятельностьБанкаНепрямыхРасчетовПрекращена = Форма.РеквизитыБанкаДляРасчетов.ДеятельностьБанкаПрекращена;
	
	Если ВызватьУправлениеФормой Тогда
		УправлениеФормой(Форма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	УстановитьНаименованиеСчета(Форма);
	
	Если ЗначениеЗаполнено(Объект.Банк) И
		ЗначениеЗаполнено(Форма.СоглашениеПрямогоОбменаСБанками) Тогда
		Форма.Банк = Форма.РеквизитыБанка.Наименование + " " + Форма.РеквизитыБанка.Город;
		Элементы.СтраницыБанк.ТекущаяСтраница = Элементы.СтраницаБанкССоглашением;
	ИначеЕсли ЗначениеЗаполнено(Объект.Банк) Тогда
		Форма.Банк = Форма.РеквизитыБанка.Наименование + " " + Форма.РеквизитыБанка.Город;
		Элементы.СтраницыБанк.ТекущаяСтраница = Элементы.СтраницаБанк;
	Иначе
		Форма.Банк = "";
		Элементы.СтраницыБанк.ТекущаяСтраница = Элементы.СтраницаБанкНеВыбран;
	КонецЕсли;
	
	Элементы.ГруппаРеквизитыБанкаДляРасчетов.Доступность = Форма.ИспользуетсяБанкДляРасчетов;
	Элементы.ГруппаБанкДляРасчетов.Доступность           = Форма.ИспользуетсяБанкДляРасчетов;
	
	Если ЗначениеЗаполнено(Объект.БанкДляРасчетов) Тогда
		Форма.БанкДляРасчетов = Форма.РеквизитыБанкаДляРасчетов.Наименование + " " + Форма.РеквизитыБанкаДляРасчетов.Город;
		Элементы.СтраницыБанкДляРасчетов.ТекущаяСтраница = Элементы.СтраницаБанкДляРасчетов;
	Иначе
		Форма.БанкДляРасчетов = "";
		Элементы.СтраницыБанкДляРасчетов.ТекущаяСтраница = Элементы.СтраницаБанкДляРасчетовНеВыбран;
	КонецЕсли;
	
	Элементы.НомерИДатаРазрешения.Доступность = Объект.Валютный;
	
	Форма.Элементы.НастройкаЭДО.Видимость = ЗначениеЗаполнено(Форма.Объект.Владелец)
		И (ТипЗнч(Форма.Объект.Владелец) = Тип("СправочникСсылка.Организации"));
	Если Форма.Элементы.НастройкаЭДО.Видимость Тогда
		Форма.Элементы.НастройкаЭДО.Заголовок = ЭлектронныеДокументыКлиентСервер.ЗаголовокНастройкиЭДОСБанком(
			Форма.Объект.Владелец, Форма.Объект.Банк);
		Если НЕ ЗначениеЗаполнено(Форма.Элементы.НастройкаЭДО.Заголовок) Тогда
			Форма.Элементы.НастройкаЭДО.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьНаименованиеСчета(Форма, ИзменениеНомераСчета = Ложь)
	
	Объект = Форма.Объект;
	
	Если ПустаяСтрока(Объект.Наименование) ИЛИ Объект.Наименование = Форма.АвтоНаименование Тогда
		Форма.АвтоНаименование = СформироватьАвтоНаименование(Форма);
		Если НЕ ПустаяСтрока(Форма.АвтоНаименование) И Форма.АвтоНаименование <> Объект.Наименование Тогда
			Объект.Наименование = Форма.АвтоНаименование;
		КонецЕсли;
	Иначе
		Если ИзменениеНомераСчета И НЕ ПустаяСтрока(Форма.НомерСчетаТекущий) Тогда
			Объект.Наименование = СтрЗаменить(Объект.Наименование, Форма.НомерСчетаТекущий, СокрЛП(Объект.НомерСчета));
		КонецЕсли;
		
		Форма.АвтоНаименование = СформироватьАвтоНаименование(Форма, Объект.Наименование);
	КонецЕсли;
	
	Форма.НомерСчетаТекущий = СокрЛП(Объект.НомерСчета);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьАвтоНаименование(Форма, Знач Текст = "")
	
	Элементы     = Форма.Элементы;
	Объект       = Форма.Объект;
	БанкЗаполнен = ЗначениеЗаполнено(Объект.Банк);
	
	Элементы.Наименование.СписокВыбора.Очистить();
	
	НомерСчетаТекущий   = СокрЛП(Объект.НомерСчета);
	СтрокаНаименования1 = Лев(
		НомерСчетаТекущий
		+ ?(Объект.Валютный, " (" + Объект.ВалютаДенежныхСредств + ")", "")
		+ ?(БанкЗаполнен, " в " + Объект.Банк, ""),
		100);
	
	Если НЕ ПустаяСтрока(СтрокаНаименования1) Тогда
		Элементы.Наименование.СписокВыбора.Добавить(СокрЛП(СтрокаНаименования1));
	КонецЕсли;
	
	ТекстНомерСчетаВалюта = НомерСчетаТекущий + ?(Объект.Валютный, ", " + Объект.ВалютаДенежныхСредств , "");
	СтрокаНаименования2   = Лев(
		?(БанкЗаполнен, "" + Объект.Банк, "")
		+ ?(ПустаяСтрока(ТекстНомерСчетаВалюта), "", " (" + ТекстНомерСчетаВалюта + ")"),
		100);
	
	Строки1и2НеРавны = СокрЛП(СтрокаНаименования2) <> "(" + СтрокаНаименования1 + ")";
	Если СтрокаНаименования2 <> "" И Строки1и2НеРавны
			И Элементы.Наименование.СписокВыбора.НайтиПоЗначению(СтрокаНаименования2) = Неопределено Тогда
		Элементы.Наименование.СписокВыбора.Добавить(СокрЛП(СтрокаНаименования2));
	КонецЕсли;
	
	СтрокаНаименования = Лев(
		НомерСчетаТекущий
		+ ?(БанкЗаполнен, ", " + Объект.Банк, "")
		+ ?(Объект.Валютный, ", " + Объект.ВалютаДенежныхСредств , ""),
		100);
	
	Если НЕ ПустаяСтрока(СтрокаНаименования) И Элементы.Наименование.СписокВыбора.НайтиПоЗначению(СтрокаНаименования) = Неопределено Тогда
		Элементы.Наименование.СписокВыбора.Добавить(СокрЛП(СтрокаНаименования));
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Текст) И Элементы.Наименование.СписокВыбора.НайтиПоЗначению(Текст) = Неопределено Тогда
		Элементы.Наименование.СписокВыбора.Добавить(СокрЛП(Текст));
	КонецЕсли;
	
	Возврат СтрокаНаименования;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПроверитьКорректностьНомераСчета(Номер, ВалютныйСчет = Ложь, ТекстОшибки = "")
	
	Результат = Истина;
	
	Если ПустаяСтрока(Номер) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТекстОшибки = "";
	Если НЕ ВалютныйСчет И СтрДлина(Номер) <> 20 Тогда
		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", " ") +
			НСтр("ru = 'Номер счета должен состоять из 20 цифр'");
		Результат   = Ложь;
	ИначеЕсли НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Номер) Тогда
		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", " ") +
			НСтр("ru = 'В номере банковского счета присутствуют не только цифры.
				|Возможно, номер указан неверно'");
		Результат   = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПроверитьКорректностьБИК(БИК, ТекстОшибки = "")
	
	Результат = Истина;
	
	Если ПустаяСтрока(БИК) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТекстОшибки = "";
	Если СтрДлина(БИК) <> 9 Тогда
		ТекстОшибки = ТекстОшибки +
			НСтр("ru = 'БИК банка должен состоять из 9 цифр'");
		Результат   = Ложь;
	ИначеЕсли НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(БИК) Тогда
		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", " ") +
			НСтр("ru = 'В составе БИК банка должны быть только цифры'");
		Результат   = Ложь;
	ИначеЕсли НЕ Лев(БИК, 2) = "04" Тогда
		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", " ") +
			НСтр("ru = 'Первые 2 цифры БИК банка должны быть ""04""'");
		Результат   = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДеятельностьБанкаПрекращена(БИК)
	
	Результат = Ложь;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КлассификаторБанковРФ.ДеятельностьПрекращена
	|ИЗ
	|	Справочник.КлассификаторБанковРФ КАК КлассификаторБанковРФ
	|ГДЕ
	|	КлассификаторБанковРФ.Код = &БИК";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("БИК", БИК);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.ДеятельностьПрекращена;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРеквизитыБанка(Знач Банк, Знач ВладелецСчета, Знач ВалютныйСчет)
	
	СтрокаРеквизитов    = Новый Структура("Код, КоррСчет, Наименование, Город");
	СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Банк,
		СтрокаРеквизитов);
	СтруктураРеквизитов.Вставить("ДеятельностьБанкаПрекращена", ДеятельностьБанкаПрекращена(СтруктураРеквизитов.Код));
	
	СтруктураРеквизитов.Вставить("СоглашениеПрямогоОбменаСБанками", Справочники.СоглашенияОбИспользованииЭД.ПустаяСсылка());
	СтруктураРеквизитов.Вставить("СтатусСоглашения", Неопределено);
	Если ЗначениеЗаполнено(Банк)
		И ТипЗнч(ВладелецСчета)=Тип("СправочникСсылка.Организации")
		И НЕ ВалютныйСчет Тогда
	
		Запрос = Новый Запрос();
		Запрос.Параметры.Вставить("Банк", Банк);
		Запрос.Параметры.Вставить("Организация", ВладелецСчета);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СоглашенияОбИспользованииЭД.Ссылка КАК СоглашениеПрямогоОбменаСБанками,
		|	СоглашенияОбИспользованииЭД.Контрагент,
		|	СоглашенияОбИспользованииЭД.СтатусСоглашения
		|ИЗ
		|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
		|ГДЕ
		|	СоглашенияОбИспользованииЭД.Контрагент = &Банк
		|	И СоглашенияОбИспользованииЭД.Организация = &Организация
		|	И СоглашенияОбИспользованииЭД.ПометкаУдаления = ЛОЖЬ";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СтруктураРеквизитов.Вставить("СоглашениеПрямогоОбменаСБанками", Выборка.СоглашениеПрямогоОбменаСБанками);
			СтруктураРеквизитов.Вставить("СтатусСоглашения", Выборка.СтатусСоглашения);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокБанковПоРеквизитам(Знач Поле, Знач Значение, Знач Валютный, Знач ТаможенныйСоюз) Экспорт
	
	СписокБанков = Новый СписокЗначений;
	
	Если ПустаяСтрока(Значение) Тогда
		
		Возврат СписокБанков;
		
	КонецЕсли;
	
	ТаблицаБанков = Справочники.Банки.ПолучитьТаблицуБанковПоРеквизитам(Поле, Значение, Валютный, ТаможенныйСоюз);
	
	СписокБанков.ЗагрузитьЗначения(ТаблицаБанков.ВыгрузитьКолонку("Ссылка"));
	
	Возврат СписокБанков;
	
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьОсновнойБанковскийСчет(СтруктураПараметров)
	
	Справочники.БанковскиеСчета.УстановитьОсновнойБанковскийСчет(
		СтруктураПараметров.КонтрагентОрганизация, 
		СтруктураПараметров.ОсновнойБанковскийСчет);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПОДКЛЮЧАЕМЫЕ ОБРАБОТЧИКИ

&НаКлиенте
Процедура Подключаемый_СброситьФлагОтработалоСобытиеПоляВводаБИК()
	
	ФлагОтработалоСобытиеПоляВводаБИК = Ложь;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ЗАВЕРШЕНИЕ НЕМОДАЛЬНЫХ ВЫЗОВОВ

&НаКлиенте
Процедура ПредложитьСтандартныйВыборЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = "Выбрать" Тогда
		
		Если ДополнительныеПараметры.Поле = "БИКБанкаДляРасчетов" Тогда
			ОткрытьФормуВыбораБанкаДляРасчетов();
		Иначе
			ОткрытьФормуВыбораБанка();
		КонецЕсли;
		
	ИначеЕсли Ответ = "Создать" Тогда
		
		ПараметрыФормы = Новый Структура("Код, РучноеИзменение, НепроверятьБИК",
			СокрЛП(ДополнительныеПараметры.ТекстДляПоиска),
			Истина,
			Объект.Валютный ИЛИ КонтрагентРезидентТаможенногоСоюза);
		ОткрытьФорму("Справочник.Банки.ФормаОбъекта",
			ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли Ответ = "Отменить" Тогда
		Если ЗначениеЗаполнено(Объект.Банк) Тогда
			ЭтотОбъект[ДополнительныеПараметры.Поле] = РеквизитыБанка.Код;
		Иначе
			ЭтотОбъект[ДополнительныеПараметры.Поле] = "";
		КонецЕсли;
		
	Иначе
		ТекущийЭлемент = Элементы[ДополнительныеПараметры.Поле];
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#КонецОбласти
