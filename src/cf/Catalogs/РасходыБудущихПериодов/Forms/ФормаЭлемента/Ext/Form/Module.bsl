#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СчетЗатратПриИзменении(Элемент)
	
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетЗатрат);
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3", 
	                              "СубконтоЗатрат1", "СубконтоЗатрат2", "СубконтоЗатрат3");
	ЗначенияСубконто = Новый Соответствие;
	ЗначенияСубконто.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы"), 
		БухгалтерскийУчетВызовСервераПовтИсп.ОсновнаяНоменклатурнаяГруппа());

	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(Объект.СчетЗатрат, Объект, ПоляОбъекта,, ЗначенияСубконто);
	УстановитьВидАктива(ЭтаФорма, Объект.СчетЗатрат);
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Затрат", "СчетЗатрат");
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоПриИзменении(Элемент)

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Затрат", "СчетЗатрат");

КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатратНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписокПараметров = СписокПараметровВыбораСубконто(ЭтаФорма, Объект, "СубконтоЗатрат%Индекс%", "СчетЗатрат");
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, СтандартнаяОбработка, СписокПараметров);
	
КонецПроцедуры

// Для статей РПБ по договорам добровольного страхования предлагается автоматическая
// установка способа признания расходов по календарным дням соответственно статье 272 гл.25 НК
&НаКлиенте
Процедура ВидРБПОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УказанныйСпособПризнанияРасходов = Объект.СпособПризнанияРасходов; 
	УказанныйВидРБП = ВыбранноеЗначение;
	
	Если УказанныйВидРБП = ПредопределенноеЗначение("Перечисление.ВидыРБП.УбыткиОтРеализацииАмортизируемогоИмущества") Тогда
		Объект.СчетЗатрат = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПрочиеРасходы");
		СчетЗатратПриИзменении(Элемент);
		Объект.СпособПризнанияРасходов = ПредопределенноеЗначение("Перечисление.СпособыПризнанияРасходов.ПоМесяцам");
	КонецЕсли;
	
	Если УказанныйВидРБП = ПредопределенноеЗначение("Перечисление.ВидыРБП.УбыткиПрошлыхЛет") Тогда
		Объект.СпособПризнанияРасходов = ПредопределенноеЗначение("Перечисление.СпособыПризнанияРасходов.ВОсобомПорядке");
		Объект.СчетЗатрат = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПустаяСсылка");
		СчетЗатратПриИзменении(Элемент);
	КонецЕсли;
	
	Если ВидыРБПДобровольноеСтрахование.НайтиПоЗначению(УказанныйВидРБП) <> Неопределено Тогда
		Если УказанныйСпособПризнанияРасходов <> ПредопределенноеЗначение("Перечисление.СпособыПризнанияРасходов.ПоКалендарнымДням") Тогда
			ТекстВопроса = НСтр("ru='Расходы по добровольному страхованию следует списывать
				|пропорционально количеству календарных дней действия договора.
				|Изменить способ признания расходов?'");
				
			Оповещение = Новый ОписаниеОповещения("ВопросИзменитьСпособПризнанияРасходовЗавершение", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидРБППриИзменении(Элемент)
	
	Если ВидыРБПНУ.НайтиПоЗначению(Объект.ВидРБП) <> Неопределено Тогда
		Объект.ВидАктива = Неопределено;
	ИначеЕсли Не ЗначениеЗаполнено(Объект.ВидАктива) Тогда
		Объект.ВидАктива = ВидАктиваПоУмолчанию;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособПризнанияРасходовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	УказанныйСпособПризнанияРасходов = ВыбранноеЗначение; 
	УказанныйВидРБП = Объект.ВидРБП;
	Если ВидыРБПДобровольноеСтрахование.НайтиПоЗначению(УказанныйВидРБП) <> Неопределено Тогда
		Если УказанныйСпособПризнанияРасходов <> ПредопределенноеЗначение("Перечисление.СпособыПризнанияРасходов.ПоКалендарнымДням") Тогда
			СтандартнаяОбработка = Ложь;
			
			ТекстВопроса = НСтр("ru='Расходы по добровольному страхованию следует списывать
				|пропорционально количеству календарных дней действия договора.
				|Продолжить?'");
			Оповещение = Новый ОписаниеОповещения("ВопросСписыватьПропорциональноКоличествуКалендарныхДнейЗавершение", ЭтотОбъект, УказанныйСпособПризнанияРасходов);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.СчетЗатрат);
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Затрат", "СчетЗатрат");
	
	ВидыРБПДобровольноеСтрахование.Добавить(Перечисления.ВидыРБП.ДолгосрочноеСтрахованиеЖизни);
	ВидыРБПДобровольноеСтрахование.Добавить(Перечисления.ВидыРБП.СтрахованиеНаОплатуМедицинскихРасходов);
	ВидыРБПДобровольноеСтрахование.Добавить(Перечисления.ВидыРБП.СтрахованиеНаСлучайСмертиИУтратыРаботоспособности);
	
	ВидыРБПНУ.Добавить(Перечисления.ВидыРБП.УбыткиОтРеализацииАмортизируемогоИмущества);
	ВидыРБПНУ.Добавить(Перечисления.ВидыРБП.УбыткиПрошлыхЛет);
	ВидыРБПНУ.Добавить(Перечисления.ВидыРБП.УбыткиПрошлыхЛетОбслуживающихПроизводствИХозяйств);
	
	ВидАктиваПоУмолчанию = Метаданные.Справочники.РасходыБудущихПериодов.Реквизиты.ВидАктива.ЗначениеЗаполнения;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.ВидАктива.Доступность = (Форма.ВидыРБПНУ.НайтиПоЗначению(Объект.ВидРБП) = Неопределено);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконто(Форма, Счет)

	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
	                            "СубконтоЗатрат1", "СубконтоЗатрат2", "СубконтоЗатрат3");
	
	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3",
	                                 "ЗаголовокСубконтоЗатрат1", "ЗаголовокСубконтоЗатрат2", "ЗаголовокСубконтоЗатрат3"); 
	
	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(Счет, Форма, ПоляФормы, ЗаголовкиПолей);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(Форма, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета)

	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьОписаниеТиповДоговора().СодержитТип(ТипЗнч(ПараметрыОбъекта[ИмяПоля])) Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("СчетУчета", Форма.Объект[ИмяСчета]);
	СписокПараметров.Вставить("Организация", ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация"));

	Возврат СписокПараметров;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Суффикс, ИмяСчета)

	ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма, Форма.Объект, "Субконто" + Суффикс + "%Индекс%", ИмяСчета);
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
		Форма, Форма.Объект, "Субконто" + Суффикс + "%Индекс%", "Субконто" + Суффикс + "%Индекс%", ПараметрыДокумента);

	КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидАктива(ЭтаФорма, СчетЗатрат)
	
	Если Не ЗначениеЗаполнено(ЭтаФорма.Объект.ВидАктива) Тогда
		ЭтаФорма.Объект.ВидАктива = БухгалтерскийУчетВызовСервераПовтИсп.ОпределитьВидАктиваРБП(СчетЗатрат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеПоУмолчанию(Настройка)

	Возврат БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию(Настройка);

КонецФункции

&НаКлиенте
Процедура ВопросИзменитьСпособПризнанияРасходовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.СпособПризнанияРасходов = ПредопределенноеЗначение("Перечисление.СпособыПризнанияРасходов.ПоКалендарнымДням");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСписыватьПропорциональноКоличествуКалендарныхДнейЗавершение(Результат, УказанныйСпособПризнанияРасходов) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.СпособПризнанияРасходов = УказанныйСпособПризнанияРасходов;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
