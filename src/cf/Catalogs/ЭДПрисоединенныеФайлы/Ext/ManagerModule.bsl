#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// Процедура из универсальной обработки ПоискИЗаменаЗначений
// Изменения:
// - заменен метод Сообщить(...) на ЗаписьЖурналаРегистрации(...)
//
Процедура СообщитьОбОшибке(Знач Описание)
	
	Если ТипЗнч(Описание) = Тип("ИнформацияОбОшибке") Тогда
		Описание = ?(Описание.Причина = Неопределено, Описание, Описание.Причина).Описание;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Сертификаты электронной подписи. Перенос настроек в новый объект метаданных'",
		     ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка,
		,
		,
		Описание,
		РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПечататьКарточкуЭД = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КарточкаЭД");
	Если ПечататьКарточкуЭД Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"КарточкаЭД",
			НСтр("ru = 'Карточка электронного документа'"),
			ПечатьКарточкиЭД(МассивОбъектов, ОбъектыПечати, "КарточкаЭД"),
			,
			"Справочник.ЭДПрисоединенныеФайлы.ПФ_MXL_КарточкаЭД");
	КонецЕсли;
	
	ПечататьЭД = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЭД");
	Если ПечататьЭД Тогда
		ТабДок = ПечатьЭД(МассивОбъектов, ОбъектыПечати);
		СинонимМакета = НСтр("ru = 'Электронный документ'");
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ЭД", СинонимМакета, ТабДок);
		Если ТипЗнч(ТабДок) = Тип("Строка") Тогда
			УдалитьФайлы(ТабДок);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция ПечатьЭД(СсылкаНаЭД, ОбъектыПечати)
	
	ТабДок = ФайлДанныхЭД(СсылкаНаЭД);
		
	Возврат ТабДок;
	
КонецФункции

Функция ПечатьКарточкиЭД(МассивОбъектов, ОбъектыПечати, ИмяМакета ="КарточкаЭД")
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.Ссылка,
	|	ЭДПрисоединенныеФайлы.НаименованиеФайла КАК НаименованиеФайла,
	|	ЭДПрисоединенныеФайлы.ОтправительЭД КАК Отправитель,
	|	ЭДПрисоединенныеФайлы.ПолучательЭД КАК Получатель,
	|	ЭДПрисоединенныеФайлы.ВидЭД КАК ВидЭДСсылка,
	|	ПРЕДСТАВЛЕНИЕ(ЭДПрисоединенныеФайлы.ВидЭД) КАК ВидДокумента,
	|	"""" КАК ТипДокумента,
	|	ЭДПрисоединенныеФайлы.УникальныйИД КАК Идентификатор,
	|	"""" КАК НомерЭД,
	|	"""" КАК ДатаЭД,
	|	ЭДПрисоединенныеФайлы.ДополнительнаяИнформация КАК СопроводительнаяЗаписка,
	|	ЭДПрисоединенныеФайлы.Расширение,
	|	ЭДПрисоединенныеФайлы.Контрагент,
	|	ЭДПрисоединенныеФайлы.Организация,
	|	ЭДПрисоединенныеФайлы.ПрофильНастроекЭДО,
	|	ЭДПрисоединенныеФайлы.НаправлениеЭД КАК НаправлениеЭД,
	|	ЭДПрисоединенныеФайлы.ВладелецФайла КАК ВладелецФайла
	|ПОМЕСТИТЬ втЭД
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.Ссылка В(&МассивОбъектов)
	|	И НЕ ЭДПрисоединенныеФайлы.ВидЭД В (&СлужебныеЭД)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.Ссылка,
	|	ЭДПрисоединенныеФайлы.НаименованиеФайла,
	|	ЭДПрисоединенныеФайлы.ОтправительЭД,
	|	ЭДПрисоединенныеФайлы.ПолучательЭД,
	|	ЭДПрисоединенныеФайлы.ВидЭД,
	|	ПРЕДСТАВЛЕНИЕ(ЭДПрисоединенныеФайлы.ВидЭД),
	|	ПРЕДСТАВЛЕНИЕ(ПроизвольныйЭД.ТипДокумента),
	|	ЭДПрисоединенныеФайлы.УникальныйИД,
	|	ПроизвольныйЭД.Номер,
	|	ПроизвольныйЭД.Дата,
	|	ПроизвольныйЭД.Текст,
	|	ЭДПрисоединенныеФайлы.Расширение,
	|	ПроизвольныйЭД.Контрагент,
	|	ПроизвольныйЭД.Организация,
	|	ЭДПрисоединенныеФайлы.ПрофильНастроекЭДО,
	|	ПроизвольныйЭД.Направление,
	|	ЭДПрисоединенныеФайлы.ВладелецФайла
	|ИЗ
	|	Документ.ПроизвольныйЭД КАК ПроизвольныйЭД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|		ПО ПроизвольныйЭД.Ссылка = ЭДПрисоединенныеФайлы.ВладелецФайла
	|ГДЕ
	|	ПроизвольныйЭД.Ссылка В(&МассивОбъектов)
	|	И НЕ ЭДПрисоединенныеФайлы.ВидЭД В (&СлужебныеЭД)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.Отпечаток,
	|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.ПодписьВерна КАК ПодписьВерна,
	|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.ДатаПроверкиПодписи,
	|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.КомуВыданСертификат,
	|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.Ссылка,
	|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.Сертификат
	|ПОМЕСТИТЬ ВтОтпечатки
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы.ЭлектронныеПодписи КАК ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи
	|ГДЕ
	|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.Ссылка В
	|			(ВЫБРАТЬ
	|				втЭД.Ссылка
	|			ИЗ
	|				втЭД)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.Отпечаток,
	|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.ПодписьВерна,
	|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.ДатаПроверкиПодписи,
	|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.КомуВыданСертификат,
	|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.Ссылка,
	|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.Сертификат
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы.ЭлектронныеПодписи КАК ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи
	|ГДЕ
	|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.Ссылка.ЭлектронныйДокументВладелец В
	|			(ВЫБРАТЬ
	|				втЭД.Ссылка
	|			ИЗ
	|				втЭД)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭП КАК ТребуетсяПодпись,
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация КАК ПодписьОрганизации,
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент КАК ПодписьКонтрагента,
	|	втЭД.Ссылка КАК Ссылка,
	|	втЭД.ВидЭДСсылка,
	|	втЭД.НаправлениеЭД КАК НаправлениеЭД,
	|	ЛОЖЬ КАК ПроизвольныйЭД
	|ИЗ
	|	втЭД КАК втЭД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
	|		ПО втЭД.ПрофильНастроекЭДО = СоглашенияОбИспользованииЭДИсходящиеДокументы.ПрофильНастроекЭДО
	|ГДЕ
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент В
	|			(ВЫБРАТЬ
	|				ВтЭД.ВидЭДСсылка
	|			ИЗ
	|				ВтЭД)
	|	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация В
	|			(ВЫБРАТЬ
	|				ВтЭД.Организация
	|			ИЗ
	|				ВтЭД)
	|	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент В
	|			(ВЫБРАТЬ
	|				ВтЭД.Контрагент
	|			ИЗ
	|				ВтЭД)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПроизвольныйЭД.ТребуетсяПодтверждение,
	|	ПроизвольныйЭД.Организация,
	|	ПроизвольныйЭД.Контрагент,
	|	втЭД.Ссылка,
	|	втЭД.ВидЭДСсылка,
	|	втЭД.НаправлениеЭД,
	|	ИСТИНА
	|ИЗ
	|	втЭД КАК втЭД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПроизвольныйЭД КАК ПроизвольныйЭД
	|		ПО втЭД.ВладелецФайла = ПроизвольныйЭД.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЭД.НаименованиеФайла,
	|	втЭД.Отправитель,
	|	втЭД.Получатель,
	|	втЭД.ВидДокумента,
	|	втЭД.ВидЭДСсылка,
	|	втЭД.ТипДокумента,
	|	втЭД.Идентификатор,
	|	втЭД.НомерЭД,
	|	втЭД.ДатаЭД,
	|	втЭД.СопроводительнаяЗаписка,
	|	втЭД.Расширение,
	|	втЭД.Контрагент,
	|	втЭД.Организация,
	|	втЭД.НаправлениеЭД,
	|	втЭД.Ссылка
	|ИЗ
	|	втЭД КАК втЭД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтОтпечатки.ПодписьВерна,
	|	ВтОтпечатки.ДатаПроверкиПодписи,
	|	ВтОтпечатки.КомуВыданСертификат,
	|	ВтОтпечатки.Ссылка
	|ИЗ
	|	ВтОтпечатки КАК ВтОтпечатки";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	СлужебныеЭД = Новый Массив;
	СлужебныеЭД.Добавить(Перечисления.ВидыЭД.ИзвещениеОПолучении);
	СлужебныеЭД.Добавить(Перечисления.ВидыЭД.УведомлениеОбУточнении);
	Запрос.УстановитьПараметр("СлужебныеЭД", СлужебныеЭД);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	МассивДанныхПечати = Новый Массив;
	
	ЗаполнитьДанныеПечатнойФормы(МассивРезультатов, МассивДанныхПечати);
	
	Макет = УправлениеПечатью.ПолучитьМакет("Справочник.ЭДПрисоединенныеФайлы.ПФ_MXL_КарточкаЭД");
	ТабДок = Новый ТабличныйДокумент;
	
	Для каждого ДанныеПечатнойФормы Из МассивДанныхПечати Цикл
		
		Если ТабДок.ВысотаТаблицы > 0 Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1;
		
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		ОбластьШапка.Параметры.Заполнить(ДанныеПечатнойФормы);
		ТабДок.Вывести(ОбластьШапка);
		
		Если ДанныеПечатнойФормы.Свойство("НомерЭД") Тогда
			ОбластьПроизвольныйЭД = Макет.ПолучитьОбласть("ПроизвольныйЭД");
			ОбластьПроизвольныйЭД.Параметры.Заполнить(ДанныеПечатнойФормы);
			ТабДок.Вывести(ОбластьПроизвольныйЭД);
		КонецЕсли;
		
		Если ДанныеПечатнойФормы.Свойство("СопроводительнаяЗаписка") Тогда
			ОбластьСопроводительнаяЗаписка = Макет.ПолучитьОбласть("СопроводительнаяЗаписка");
			ОбластьСопроводительнаяЗаписка.Параметры.Заполнить(ДанныеПечатнойФормы);
			ТабДок.Вывести(ОбластьСопроводительнаяЗаписка);
		КонецЕсли;
		
		Если ДанныеПечатнойФормы.Свойство("Подписи") Тогда
			
			ОбластьСопроводительнаяЗаписка = Макет.ПолучитьОбласть("ТребуемыеПодписи");
			ОбластьСопроводительнаяЗаписка.Параметры.Заполнить(ДанныеПечатнойФормы.Подписи);
			ТабДок.Вывести(ОбластьСопроводительнаяЗаписка);
			
		КонецЕсли;
		
		Если ДанныеПечатнойФормы.Свойство("Сертификаты") Тогда
			
			ОбластьСертификаты = Макет.ПолучитьОбласть("Сертификаты");
			ТабДок.Вывести(ОбластьСертификаты);
			
			ОбластьСертификатыСтрока = Макет.ПолучитьОбласть("СертификатыСтрока");
			Для Каждого ТекСтрока Из ДанныеПечатнойФормы.Сертификаты Цикл
				ОбластьСертификатыСтрока.Параметры.Заполнить(ТекСтрока);
				ТабДок.Вывести(ОбластьСертификатыСтрока);
			КонецЦикла;
			
		КонецЕсли;
		
		ОбластьПодпись = Макет.ПолучитьОбласть("Подпись");
		ОбластьПодпись.Параметры.Заполнить(ДанныеПечатнойФормы);
		ТабДок.Вывести(ОбластьПодпись);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечатнойФормы.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДок;
	
КонецФункции

Процедура ЗаполнитьДанныеПечатнойФормы(МассивРезультатовЗапроса, МассивДанныхПечати)
	
	НеобходимыеПодписи = МассивРезультатовЗапроса[2].Выгрузить();
	ДанныеЭД = МассивРезультатовЗапроса[3].Выгрузить();
	СертификатыЭД = МассивРезультатовЗапроса[4].Выгрузить();
	
	МассивЭД = Новый Массив;
	
	ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(МассивЭД, ДанныеЭД.ВыгрузитьКолонку("Ссылка"));
	
	Для Каждого ЭлементМассива Из МассивЭД Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("Ссылка", ЭлементМассива);
		
		МассивСтрокЭД = ДанныеЭД.НайтиСтроки(Отбор);
		СтрокаДанныхЭД = МассивСтрокЭД[0];
		
		ДанныеПечатнойФормы = Новый Структура;
		ДанныеПечатнойФормы.Вставить("Ссылка", ЭлементМассива);
		
		ИмяФайла = СтрокаДанныхЭД.НаименованиеФайла +"." + СтрокаДанныхЭД.Расширение;
		ДанныеПечатнойФормы.Вставить("ИмяФайла", ИмяФайла);
		
		Если СтрокаДанныхЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
			Отправитель = ПредставлениеЮрФизЛицо(СтрокаДанныхЭД.Организация);
			Получатель = ПредставлениеЮрФизЛицо(СтрокаДанныхЭД.Контрагент);
			
		Иначе
			Отправитель = ПредставлениеЮрФизЛицо(СтрокаДанныхЭД.Контрагент);
			Получатель = ПредставлениеЮрФизЛицо(СтрокаДанныхЭД.Организация);
			
		КонецЕсли;
		
		ДанныеПечатнойФормы.Вставить("Отправитель", Отправитель);
		ДанныеПечатнойФормы.Вставить("Получатель", Получатель);
		
		ТипДокумента = СтрокаДанныхЭД.ВидДокумента + " "+ СтрокаДанныхЭД.ТипДокумента;
		ДанныеПечатнойФормы.Вставить("ТипДокумента", ТипДокумента);
		
		Если ЭлектронныеДокументыСлужебный.ЭтоФНС(СтрокаДанныхЭД.ВидЭДСсылка)Тогда
			Идентификатор = СтрокаДанныхЭД.НаименованиеФайла;
		Иначе
			Идентификатор = СтрокаДанныхЭД.Идентификатор;
		КонецЕсли;
		ДанныеПечатнойФормы.Вставить("Идентификатор", Идентификатор );
		
		Если ЗначениеЗаполнено(СтрокаДанныхЭД.НомерЭД) Тогда
			
			ДанныеПечатнойФормы.Вставить("НомерЭД", СтрокаДанныхЭД.НомерЭД);
			ДанныеПечатнойФормы.Вставить("ДатаЭД", СтрокаДанныхЭД.ДатаЭД);
			
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаДанныхЭД.СопроводительнаяЗаписка) Тогда
			ДанныеПечатнойФормы.Вставить("СопроводительнаяЗаписка", СтрокаДанныхЭД.СопроводительнаяЗаписка);
		КонецЕсли;
		
		ДанныеПечатнойФормы.Вставить("ТекущаяДата", Формат(ТекущаяДатаСеанса(), "ДЛФ=D"));
		
		// заполняем требуемые подписи
		МассивНеобходимыеПодписи = НеобходимыеПодписи.НайтиСтроки(Отбор);
		ТребуемыеПодписи = Неопределено;
		
		ЗаполнитьТребуемыеПодписи(ТребуемыеПодписи, МассивНеобходимыеПодписи);
		Если ЗначениеЗаполнено(ТребуемыеПодписи) Тогда
			ДанныеПечатнойФормы.Вставить("Подписи", ТребуемыеПодписи);
		КонецЕсли;
		
		// заполняем таблицу серфтикатов ЭД
		
		МассивСертификатовЭД = СертификатыЭД.НайтиСтроки(Отбор);
		
		ТаблицаСертификатов = Новый ТаблицаЗначений;
		ИнициализацияТаблицыСертификатов(ТаблицаСертификатов);

		Для Каждого СтрокаМассива Из МассивСертификатовЭД Цикл
			
			НоваяСтрока = ТаблицаСертификатов.Добавить();
			НоваяСтрока.КомуВыдан = СтрокаМассива.КомуВыданСертификат;
			НоваяСтрока.Сертификат = СтрокаМассива.КомуВыданСертификат;
			НоваяСтрока.Статус = СтатусПодписи(СтрокаМассива);
		КонецЦикла;

		ДанныеПечатнойФормы.Вставить("Сертификаты", ТаблицаСертификатов);
		
		МассивДанныхПечати.Добавить(ДанныеПечатнойФормы);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТребуемыеПодписи(ТребуемыеПодписи, МассивНеобходимыеПодписи)
	
	Если МассивНеобходимыеПодписи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТребуемыеПодписи = Новый Структура;
	ТребуемыеПодписи.Вставить("ПредставлениеОтправителя");
	ТребуемыеПодписи.Вставить("ПредставлениеПолучателя");
	
	Для Каждого СтрокаМассива Из МассивНеобходимыеПодписи Цикл
		
		ЗаполнитьПредставлениеПодписантов(СтрокаМассива, ТребуемыеПодписи);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПредставлениеПодписантов(СтрокаМассива, ТребуемыеПодписи)
	
	Если СтрокаМассива.ПроизвольныйЭД Тогда
				
		Если СтрокаМассива.ТребуетсяПодпись Тогда
			
			Если СтрокаМассива.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
				ТребуемыеПодписи.ПредставлениеОтправителя = ПредставлениеЮрФизЛицо(СтрокаМассива.ПодписьОрганизации);
				ТребуемыеПодписи.ПредставлениеПолучателя = ПредставлениеЮрФизЛицо(СтрокаМассива.ПодписьКонтрагента);
				
			Иначе
				ТребуемыеПодписи.ПредставлениеОтправителя = ПредставлениеЮрФизЛицо(СтрокаМассива.ПодписьКонтрагента);
				ТребуемыеПодписи.ПредставлениеПолучателя = ПредставлениеЮрФизЛицо(СтрокаМассива.ПодписьОрганизации);
				
			КонецЕсли;
		Иначе
			
			Если СтрокаМассива.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
				
				ТребуемыеПодписи.ПредставлениеОтправителя = ПредставлениеЮрФизЛицо(СтрокаМассива.ПодписьОрганизации);
				ТребуемыеПодписи.ПредставлениеПолучателя = НСтр("ru = 'Не требуется'");
				
			Иначе
				ТребуемыеПодписи.ПредставлениеОтправителя = ПредставлениеЮрФизЛицо(СтрокаМассива.ПодписьКонтрагента);
				ТребуемыеПодписи.ПредставлениеПолучателя = НСтр("ru = 'Не требуется'");
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если СтрокаМассива.ТребуетсяПодпись Тогда
			
			Если ЭлектронныеДокументыСлужебный.ЭтоФНС(СтрокаМассива.ВидЭДСсылка) Тогда
						
				Если СтрокаМассива.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
					ТребуемыеПодписи.ПредставлениеОтправителя = ПредставлениеЮрФизЛицо(СтрокаМассива.ПодписьОрганизации);
					ТребуемыеПодписи.ПредставлениеПолучателя = НСтр("ru = 'Не требуется'");
					
				Иначе
					ТребуемыеПодписи.ПредставлениеОтправителя = ПредставлениеЮрФизЛицо(СтрокаМассива.ПодписьКонтрагента);
					ТребуемыеПодписи.ПредставлениеПолучателя = НСтр("ru = 'Не требуется'");
				
				КонецЕсли;
			
			Иначе
				
				Если СтрокаМассива.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
					ТребуемыеПодписи.ПредставлениеОтправителя = ПредставлениеЮрФизЛицо(СтрокаМассива.ПодписьОрганизации);
					ТребуемыеПодписи.ПредставлениеПолучателя = ПредставлениеЮрФизЛицо(СтрокаМассива.ПодписьКонтрагента);
					
				Иначе
					ТребуемыеПодписи.ПредставлениеОтправителя = ПредставлениеЮрФизЛицо(СтрокаМассива.ПодписьКонтрагента);
					ТребуемыеПодписи.ПредставлениеПолучателя = ПредставлениеЮрФизЛицо(СтрокаМассива.ПодписьОрганизации);
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			ТребуемыеПодписи.ПредставлениеОтправителя = НСтр("ru = 'Не требуется'");
			ТребуемыеПодписи.ПредставлениеПолучателя = НСтр("ru = 'Не требуется'");

		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

Функция ПредставлениеЮрФизЛицо(ЮрФизЛицо)
	
	ДанныеЮрФизЛицо = ЭлектронныеДокументыПереопределяемый.ПолучитьДанныеЮрФизЛица(ЮрФизЛицо);
	ПредставлениеЮрФизЛицо = ЭлектронныеДокументыПереопределяемый.ОписаниеОрганизации(ДанныеЮрФизЛицо,"ПолноеНаименование,ИНН,КПП");
	
	Возврат ПредставлениеЮрФизЛицо;
	
КонецФункции

Функция СтатусПодписи(ВыборкаЭД)
	
	Если ВыборкаЭД.ПодписьВерна Тогда
		СтатусПодписи = "Верна ("+Формат(ВыборкаЭД.ДатаПроверкиПодписи,"ДЛФ=DT") + ")";
	Иначе
		СтатусПодписи = "Неверна ( "+Формат(ВыборкаЭД.ДатаПроверкиПодписи,"ДЛФ=DT") + ")";
	КонецЕсли;
	
	Возврат СтатусПодписи;
	
КонецФункции

Процедура ИнициализацияТаблицыСертификатов(ТаблицаСертификатов)
	
	ТаблицаСертификатов.Колонки.Добавить("КомуВыдан");
	ТаблицаСертификатов.Колонки.Добавить("Сертификат");
	ТаблицаСертификатов.Колонки.Добавить("Статус");
	
КонецПроцедуры

Функция ФайлДанныхЭД(СсылкаНаЭД, Идентификатор = Неопределено)
	
	Если Идентификатор = Неопределено Тогда
		Идентификатор = СсылкаНаЭд.НаименованиеФайла;
	КонецЕсли;
	
	Если СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
			ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
			ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
			
			ТабличныйДокумент = ФайлДанныхЭД(СсылкаНаЭД.ЭлектронныйДокументВладелец, Идентификатор);
			Возврат ТабличныйДокумент;
	КонецЕсли;
	
	ДопИнформацияПоЭД = ЭлектронныеДокументыСлужебный.ПолучитьДанныеФайла(СсылкаНаЭД, СсылкаНаЭД.УникальныйИдентификатор(), Истина);
	
	Если ДопИнформацияПоЭД.Свойство("СсылкаНаДвоичныеДанныеФайла")
		И ЗначениеЗаполнено(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла) Тогда
		
		ДанныеЭД = ПолучитьИзВременногоХранилища(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);
		
		Если ЗначениеЗаполнено(ДопИнформацияПоЭД.Расширение) Тогда
			ИмяФайла = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла(ДопИнформацияПоЭД.Расширение);
		Иначе
			ИмяФайла = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("xml");
		КонецЕсли;
		
		Если ИмяФайла = Неопределено Тогда
			ТекстОшибки = НСтр("ru = 'Не удалось просмотреть электронный документ. Проверьте настройку рабочего каталога'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Возврат Неопределено;
		КонецЕсли;
		
		ДанныеЭД.Записать(ИмяФайла);
		
		Если Найти(ДопИнформацияПоЭД.Расширение, "zip") > 0 Тогда
			
			ПапкаДляРаспаковки = ЭлектронныеДокументыСлужебный.РабочийКаталог(, СсылкаНаЭД.УникальныйИдентификатор());
			
			Если ПапкаДляРаспаковки = Неопределено Тогда
				ТекстОшибки = НСтр("ru = 'Не удалось просмотреть электронный документ. Проверьте настройку рабочего каталога'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				УдалитьФайлы(ИмяФайла);
				Возврат Неопределено;
			КонецЕсли;
			
			ЗИПЧтение = Новый ЧтениеZipФайла(ИмяФайла);
			Попытка
				ЗипЧтение.ИзвлечьВсе(ПапкаДляРаспаковки);
			Исключение
				ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				Если НЕ ЭлектронныеДокументыСлужебный.ВозможноИзвлечьФайлы(ЗипЧтение, ПапкаДляРаспаковки) Тогда
					ТекстСообщения = ЭлектронныеДокументыПовтИсп.ПолучитьСообщениеОбОшибке("006");
				КонецЕсли;
				ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Распаковка пакета ЭД'"),
					ТекстОшибки, ТекстСообщения);
				ЗипЧтение.Закрыть();
				УдалитьФайлы(ИмяФайла);
				УдалитьФайлы(ПапкаДляРаспаковки);
				Возврат Неопределено;
			КонецПопытки;
			
			ЗипЧтение.Закрыть();
			УдалитьФайлы(ИмяФайла);
			ФлагПросмотра = Ложь;
			
			ФайлыАрхиваXML = НайтиФайлы(ПапкаДляРаспаковки, "*.xml");
			
			Для Каждого РаспакованныйФайл Из ФайлыАрхиваXML Цикл
				
				ТабличныйДокумент = ЭлектронныеДокументыВнутренний.СформироватьПечатнуюФормуЭД(РаспакованныйФайл.ПолноеИмя,
																								СсылкаНаЭД.НаправлениеЭД,
																								СсылкаНаЭД.УникальныйИдентификатор(),
																								,
																								ДопИнформацияПоЭД.Наименование);
					
				Если ТипЗнч(ТабличныйДокумент) = Тип("ТабличныйДокумент") Тогда
					УдалитьФайлы(ПапкаДляРаспаковки);
					Возврат ТабличныйДокумент;
				КонецЕсли;
				
			КонецЦикла;
			УдалитьФайлы(ПапкаДляРаспаковки);
		ИначеЕсли Найти(ДопИнформацияПоЭД.Расширение, "xml") > 0 Тогда
			Если СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.Подтверждение
				ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
				ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении
				ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
				ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
				ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
				ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
				ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
			
				ИмяФайлаДанных = ИмяФайла;
				
				ВыборкаЭДДопДанных = ЭлектронныеДокументыСлужебный.ВыборкаДопДанныеЭД(СсылкаНаЭД);
				Если ВыборкаЭДДопДанных.Следующий() Тогда
					ДопДанныеЭД = ЭлектронныеДокументыСлужебный.ПолучитьДанныеФайла(ВыборкаЭДДопДанных.Ссылка,
						ВыборкаЭДДопДанных.Ссылка.УникальныйИдентификатор(), Истина);
					СсылкаНаДДДопДанныхЭД = "";
					Если ДопДанныеЭД.Свойство("СсылкаНаДвоичныеДанныеФайла", СсылкаНаДДДопДанныхЭД)
						И ЗначениеЗаполнено(СсылкаНаДДДопДанныхЭД) Тогда
						ДанныеДопФайла = ПолучитьИзВременногоХранилища(СсылкаНаДДДопДанныхЭД);
					
						Если ЗначениеЗаполнено(ДопДанныеЭД.Расширение) Тогда
							ИмяФайлаДопДанных = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла(ДопДанныеЭД.Расширение);
						Иначе
							ИмяФайлаДопДанных = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("xml");
						КонецЕсли;
					
						Если ИмяФайлаДопДанных = Неопределено Тогда
							ТекстОшибки = НСтр("ru = 'Не удалось получить доп. данные электронного документа.
													|Проверьте настройку рабочего каталога'");
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
							УдалитьФайлы(ИмяФайлаДанных);
							Возврат Неопределено;
						КонецЕсли;
						ДанныеДопФайла.Записать(ИмяФайлаДопДанных);
					КонецЕсли;
				КонецЕсли;
				ТабличныйДокумент = ЭлектронныеДокументыВнутренний.СформироватьПечатнуюФормуЭД(ИмяФайла, СсылкаНаЭД.НаправлениеЭД,
										СсылкаНаЭД.УникальныйИдентификатор(), , ДопИнформацияПоЭД.Наименование, ИмяФайлаДопДанных,, Идентификатор);
				Если НЕ ИмяФайлаДопДанных = Неопределено Тогда
					УдалитьФайлы(ИмяФайлаДанных);
				КонецЕсли;
				Если ТипЗнч(ТабличныйДокумент) = Тип("ТабличныйДокумент") Тогда
					УдалитьФайлы(ИмяФайлаДанных);
					Возврат ТабличныйДокумент;
				КонецЕсли;
			Иначе
				БанковскиеВидыЭД = ЭлектронныеДокументыСлужебный.БанковскиеВидыЭД();
				Если БанковскиеВидыЭД.Найти(СсылкаНаЭД.ВидЭД) <> Неопределено Тогда
					ИмяФайлаДанных = ИмяФайла;
					ТабличныйДокумент = ЭлектронныеДокументыВнутренний.СформироватьПечатнуюФормуЭД(
						ИмяФайла, СсылкаНаЭД.НаправлениеЭД, СсылкаНаЭД.УникальныйИдентификатор(), , СсылкаНаЭД.УникальныйИдентификатор());
					Если ТипЗнч(ТабличныйДокумент)=Тип("ТабличныйДокумент") Тогда
						УдалитьФайлы(ИмяФайлаДанных);
						Возврат ТабличныйДокумент;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			
			Возврат ИмяФайла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

// Обработчик обновления БЭД 1.1.13.4
// Заполняет дату окончания действия сертификата
//
Процедура ЗаполнитьНаименованиеФайла() Экспорт
	
	ЭлементСсылка = Справочники.ЭДПрисоединенныеФайлы.Выбрать();
	
	Пока ЭлементСсылка.Следующий() Цикл
		
		Попытка
			ЭлементОбъект = ЭлементСсылка.ПолучитьОбъект();
			Если ЭлементОбъект.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
				СтрокаУИД = ЭлементОбъект.УникальныйИД;
				Наименование = ЭлементОбъект.Наименование;
				ПозицияУИД = Найти(Наименование, "_" + Лев(СтрокаУИД, 35));
				Если ПозицияУИД > 0 Тогда
					ЭлементОбъект.НаименованиеФайла = Лев(Наименование, ПозицияУИД) + СтрокаУИД;
				КонецЕсли;
			Иначе
				ЭлементОбъект.НаименованиеФайла = ЭлементОбъект.Наименование;
			КонецЕсли;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ЭлементОбъект);
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик обновления БЭД 1.2.4.4
// Меняет текущий статус Произвольного ЭД с НеОтправлен на Создан.
//
Процедура ИзменитьСтатусыПроизвольныхЭДСНеОтправленНаСформирован() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.Ссылка
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.СтатусЭД = &СтатусНеОтправлен
		|	И ЭДПрисоединенныеФайлы.ВидЭД = &ВидПроизвольныйЭД";
	
	Запрос.УстановитьПараметр("ВидПроизвольныйЭД", Перечисления.ВидыЭД.ПроизвольныйЭД);
	Запрос.УстановитьПараметр("СтатусНеОтправлен", Перечисления.СтатусыЭД.НеОтправлен);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Если МонопольныйРежим() Тогда
		СнятьМонопольныйРежим = Ложь;
	Иначе
		СнятьМонопольныйРежим = Истина;
		УстановитьМонопольныйРежим(Истина);
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Попытка
			НачатьТранзакцию();
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Объект.СтатусЭД = Перечисления.СтатусыЭД.Сформирован;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
			ЗафиксироватьТранзакцию();
		Исключение
			СообщитьОбОшибке(ИнформацияОбОшибке());
			ОтменитьТранзакцию();
		КонецПопытки;
	КонецЦикла;
	
	Если СнятьМонопольныйРежим Тогда
		УстановитьМонопольныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли