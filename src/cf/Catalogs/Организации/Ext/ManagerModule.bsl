#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

// Процедура формирования макета печати
//
Функция СформироватьПомощникРаботыФаксимильнойПечати(Организация, ОбъектыПечати, ИмяМакета)
	
	ТабличныйДокумент	= Новый ТабличныйДокумент;
	Макет				= УправлениеПечатью.МакетПечатнойФормы("Справочник.Организации." + ИмяМакета);
	
	Если Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда 
		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ПоляКЗаполнениюЮр"));
	Иначе
		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ПоляКЗаполнениюИП"));
	КонецЕсли;
	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Линия"));
	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Схема"));
	
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 1, ОбъектыПечати, Организация);
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;

КонецФункции // СформироватьПомощникРаботыФаксимильнойПечати()

// Процедура формирования макета печати
//
Функция СформироватьРеквизитыОрганизации(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.Организации." + ИмяМакета);
	
	ПервыйДокумент = Истина;
	
	Для каждого Организация Из МассивОбъектов Цикл
	
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ЮЛ = Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		ФЛ = Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		
		БанковскийСчет = Неопределено;
		Если Организация.ОсновнойБанковскийСчет.Пустая() Тогда
			БанковскиеСчетаОрганизации = Справочники.БанковскиеСчета.БанковскиеСчетаОрганизации(Организация,
				ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
			Если БанковскиеСчетаОрганизации.Количество() = 1 Тогда
				БанковскийСчет = БанковскиеСчетаОрганизации[0].Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Организация,, БанковскийСчет);
		
		Разделитель = Макет.ПолучитьОбласть("Разделитель");
		
		Область = Макет.ПолучитьОбласть("Наименование");
		Область.Параметры.НаименованиеДляПечатныхФорм = СведенияОбОрганизации.НаименованиеДляПечатныхФорм;
		ТабличныйДокумент.Вывести(Область);
		
		Если ЗначениеЗаполнено(СведенияОбОрганизации.ИНН) Тогда
			Область = Макет.ПолучитьОбласть("ИНН");
			Область.Параметры.ИНН = СведенияОбОрганизации.ИНН;
			ТабличныйДокумент.Вывести(Область);
		КонецЕсли;
		
		Если ЮЛ И ЗначениеЗаполнено(СведенияОбОрганизации.КПП) Тогда
			Область = Макет.ПолучитьОбласть("КПП");
			Область.Параметры.КПП = СведенияОбОрганизации.КПП;
			ТабличныйДокумент.Вывести(Область);
		КонецЕсли;
		
		Если ЮЛ И ЗначениеЗаполнено(СведенияОбОрганизации.ОГРН) Тогда
			Область = Макет.ПолучитьОбласть("ОГРН");
			Область.Параметры.ОГРН = СведенияОбОрганизации.ОГРН;
			ТабличныйДокумент.Вывести(Область);
		КонецЕсли;
		
		Если ФЛ И ЗначениеЗаполнено(СведенияОбОрганизации.ОГРН) Тогда
			Область = Макет.ПолучитьОбласть("ОГРНИП");
			Область.Параметры.ОГРНИП = СведенияОбОрганизации.ОГРН;
			ТабличныйДокумент.Вывести(Область);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СведенияОбОрганизации.КодПоОКПО) Тогда
			Область = Макет.ПолучитьОбласть("ОКПО");
			Область.Параметры.КодПоОКПО = СведенияОбОрганизации.КодПоОКПО;
			ТабличныйДокумент.Вывести(Область);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СведенияОбОрганизации.НомерСчета) 
			И ЗначениеЗаполнено(СведенияОбОрганизации.БИК) 
			И ЗначениеЗаполнено(СведенияОбОрганизации.КоррСчет) 
			И ЗначениеЗаполнено(СведенияОбОрганизации.Банк) Тогда
			Область = Макет.ПолучитьОбласть("РасчетныйСчет");
			Область.Параметры.НомерСчета = СведенияОбОрганизации.НомерСчета;
			Область.Параметры.БИК = СведенияОбОрганизации.БИК;
			Область.Параметры.КоррСчет = СведенияОбОрганизации.КоррСчет;
			Область.Параметры.Банк = СведенияОбОрганизации.Банк;
			ТабличныйДокумент.Вывести(Область);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СведенияОбОрганизации.ЮридическийАдрес) 
			ИЛИ ЗначениеЗаполнено(СведенияОбОрганизации.Телефоны) Тогда
			ТабличныйДокумент.Вывести(Разделитель);
		КонецЕсли;
		
		Если ЮЛ И ЗначениеЗаполнено(СведенияОбОрганизации.ЮридическийАдрес) Тогда
			Область = Макет.ПолучитьОбласть("ЮридическийАдрес");
			Область.Параметры.ЮридическийАдрес = СведенияОбОрганизации.ЮридическийАдрес;
			ТабличныйДокумент.Вывести(Область);
		КонецЕсли;
			
		Если ФЛ И ЗначениеЗаполнено(СведенияОбОрганизации.ЮридическийАдрес) Тогда
			Область = Макет.ПолучитьОбласть("АдресИП");
			Область.Параметры.АдресИП = СведенияОбОрганизации.ЮридическийАдрес;
			ТабличныйДокумент.Вывести(Область);
		КонецЕсли;
			
		Если ЗначениеЗаполнено(СведенияОбОрганизации.Телефоны) Тогда
			Область = Макет.ПолучитьОбласть("Телефон");
			Область.Параметры.Телефон = СведенияОбОрганизации.Телефоны;
			ТабличныйДокумент.Вывести(Область);
		КонецЕсли;
		
		Если ФЛ И ЗначениеЗаполнено(СведенияОбОрганизации.СвидетельствоСерияНомер) И ЗначениеЗаполнено(СведенияОбОрганизации.СвидетельствоДатаВыдачи) Тогда
			Область = Макет.ПолучитьОбласть("Свидетельство");
			Область.Параметры.СвидетельствоСерияНомер = СведенияОбОрганизации.СвидетельствоСерияНомер;
			Область.Параметры.СвидетельствоДатаВыдачи = Формат(СведенияОбОрганизации.СвидетельствоДатаВыдачи, "ДЛФ=D");
			ТабличныйДокумент.Вывести(Область);
		КонецЕсли;
		
		Если ЮЛ Тогда
			
			ОтветственныеЛица = ОтветственныеЛицаБП.ОтветственныеЛица(Организация, '20200101');
			ДолжностьРуководителя = ОтветственныеЛица.РуководительДолжностьПредставление;
			ФИОРуководителя = СокрЛП(ОтветственныеЛица.РуководительФИО.Фамилия) + " " + 
				СокрЛП(ОтветственныеЛица.РуководительФИО.Имя) + " " + 
				СокрЛП(ОтветственныеЛица.РуководительФИО.Отчество);
			
			Если ЗначениеЗаполнено(ДолжностьРуководителя) И ЗначениеЗаполнено(ФИОРуководителя) Тогда
				Область = Макет.ПолучитьОбласть("Руководитель");
				Область.Параметры.ДолжностьРуководителя = ДолжностьРуководителя;
				Область.Параметры.ФИОРуководителя = ФИОРуководителя;
				ТабличныйДокумент.Вывести(Область);
			КонецЕсли;
			
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Организация);
		
	КонецЦикла;
	
	ТабличныйДокумент.ПолеСверху = 20;
	ТабличныйДокумент.ПолеСнизу = 20;
	ТабличныйДокумент.ПолеСлева = 20;
	ТабличныйДокумент.ПолеСправа = 20;
	
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Организация_КарточкаОрганизации";
	
	Возврат ТабличныйДокумент;

КонецФункции

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов,
				 ПараметрыПечати,
				 КоллекцияПечатныхФорм,
				 ОбъектыПечати,
				 ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "НапечататьПомощникРаботыФаксимильнойПечати") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"НапечататьПомощникРаботыФаксимильнойПечати", 
			НСтр("ru='Как быстро и просто создать факсимильную подпись и печать?'"), 
			СформироватьПомощникРаботыФаксимильнойПечати(МассивОбъектов[0], ОбъектыПечати, "ПомощникРаботыФаксимильнойПечати")
		);
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Реквизиты") Тогда
		
		СведенияОбОрганизациях = Новый Массив;
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"Реквизиты", 
			НСтр("ru='Реквизиты организации'"),
			СформироватьРеквизитыОрганизации(МассивОбъектов, ОбъектыПечати, "Реквизиты"));
		ПараметрыВывода.Вставить("ФормироватьЭД", Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
КонецПроцедуры

// Заполняет список команд отправки по электронной почте.
// 
// Параметры:
//   КомандыОтправки - ТаблицаЗначений - состав полей см. в функции ОтправкаПочтовыхСообщений.КомандыОтправки
//
Процедура ДобавитьКомандыОтправки(КомандыОтправки) Экспорт
	
	КомандаОтправки = КомандыОтправки.Добавить();
	КомандаОтправки.Идентификатор = "Реквизиты";
	КомандаОтправки.Представление = НСтр("ru='Реквизиты'");
	КомандаОтправки.Порядок       = 10;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПолучитьПараметрыФормыВыбораДляКода(НазваниеМакета, ТекущийПериод) Экспорт
	
	Классификатор = Новый ТаблицаЗначений;
	
	Классификатор.Колонки.Добавить("Код");
	Классификатор.Колонки.Добавить("Наименование");
	Классификатор.Индексы.Добавить("Код");
	
	Макет	= ПолучитьМакет(НазваниеМакета);
	
	ТекущаяОбласть = Макет.Области.Найти("Классификатор");
	
	Если НЕ ТекущаяОбласть = Неопределено Тогда
		
		Для НомерСтр = ТекущаяОбласть.Верх По ТекущаяОбласть.Низ Цикл
			
			КодПоказателя	= СокрП(Макет.Область(НомерСтр, 1).Текст);
			Название		= СокрП(Макет.Область(НомерСтр, 2).Текст);
			
			Если КодПоказателя = "###" Тогда
				Прервать;
			ИначеЕсли ПустаяСтрока(КодПоказателя) Тогда
				Продолжить;
			Иначе
				НоваяСтрока = Классификатор.Добавить();
				НоваяСтрока.Код				= КодПоказателя;
				НоваяСтрока.Наименование	= Название;
			КонецЕсли;	
				
		КонецЦикла;
		
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("СписокКодов",	Классификатор);
	
	Возврат Параметры;
	
КонецФункции

Функция ИспользуемыеВидыОрганизаций() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВидыОрганизаций = Новый Структура();
	ВидыОрганизаций.Вставить("ЮридическоеЛицо", Ложь);
	ВидыОрганизаций.Вставить("ФизическоеЛицо",  Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(ВидыОрганизаций.ЮридическоеЛицо), ЛОЖЬ) КАК ЮридическоеЛицо,
	|	ЕСТЬNULL(МАКСИМУМ(ВидыОрганизаций.ФизическоеЛицо), ЛОЖЬ) КАК ФизическоеЛицо
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ВЫБОР
	|			КОГДА Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ЮридическоеЛицо,
	|		ВЫБОР
	|			КОГДА Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ФизическоеЛицо
	|	ИЗ
	|		Справочник.Организации КАК Организации) КАК ВидыОрганизаций";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ВидыОрганизаций, Выборка);
	КонецЕсли;
	
	Возврат ВидыОрганизаций;
	
КонецФункции

Процедура ОбновитьИспользуемыеВидыОрганизаций() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВидыОрганизаций = ИспользуемыеВидыОрганизаций();
	
	Константы.ВестиУчетИндивидуальногоПредпринимателя.Установить(ВидыОрганизаций.ФизическоеЛицо);
	Константы.ВестиУчетЮридическогоЛица.Установить(ВидыОрганизаций.ЮридическоеЛицо);
	
	Справочники.ВидыНалоговИПлатежейВБюджет.СоздатьПоставляемыеЭлементы();
	
КонецПроцедуры

Функция ТаблицаВыбораРеквизитовДляПодстановки() Экспорт
	
	Макет = Справочники.Организации.ПолучитьМакет("РеквизитыДляПодстановки");
	
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(Макет.ПолучитьТекст());
	
	Возврат СериализаторXDTO.ПрочитатьXML(Чтение);
	
КонецФункции
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаСписка" ИЛИ ВидФормы = "ФормаВыбора" Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ)
		ИЛИ Параметры.Свойство("ЗначениеКопирования") И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		
		ВыбраннаяФорма = "ФормаОрганизации";
		
	Иначе
		
		// Новая организация
		ВыбраннаяФорма = "ФормаВыбораСистемыНалогообложения";
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ОБНОВЛЕНИЯ

Процедура ОчиститьКодНалоговогоОрганаПолучателя() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Организации = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Организация Из Организации Цикл
		
		ОбъектОрганизаци = Организация.Ссылка.ПолучитьОбъект();
		
		Если ОбъектОрганизаци.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо И ЗначениеЗаполнено(ОбъектОрганизаци.КодНалоговогоОрганаПолучателя) Тогда
			
			ОбъектОрганизаци.КодНалоговогоОрганаПолучателя = "";
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектОрганизаци);
			
		ИначеЕсли ЗначениеЗаполнено(ОбъектОрганизаци.КодНалоговогоОрганаПолучателя) И  НЕ ОбъектОрганизаци.КрупнейшийНалогоплательщик Тогда
			
			ОбъектОрганизаци.КрупнейшийНалогоплательщик = Истина;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектОрганизаци);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьНаименованиеПлательщикаПриПеречисленииВБюджет() Экспорт
	
	// В версии 3.0.28.7 и ранее при редактировании организации в форме элемента поле НаименованиеПлательщикаПриПеречисленииВБюджет
	// могло быть ошибочно заполнено:
	// Объект.НаименованиеПлательщикаПриПеречисленииВБюджет	= Объект.НаименованиеСокращенное;
	
	// Это поле следует оставить по умолчанию пустым, для того, чтобы в случае изменения правил уплаты в бюджет 
	// достаточно было изменить алгоритм составления наименования, но не данные.
	// См. ПлатежиВБюджетКлиентСервер.НаименованиеПлательщикаИндивидуальногоПредпринимателя
	
	// В то же время, когда поле пустое, то в платежку может выводиться не сокращенное,
	// а полное наименование.
	// Чтобы в таких случаях поведение не изменилось (сохранилось сокращенное наименование),
	// следует учесть ВариантНаименованияДляПечатныхФорм.
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка,
	|	Организации.ВариантНаименованияДляПечатныхФорм КАК ВариантНаименования,
	|	ВЫРАЗИТЬ(Организации.НаименованиеСокращенное КАК СТРОКА(160)) КАК НаименованиеСокращенное,
	|	ВЫРАЗИТЬ(Организации.НаименованиеПолное КАК СТРОКА(160)) КАК НаименованиеПолное,
	|	ВЫРАЗИТЬ(Организации.НаименованиеПлательщикаПриПеречисленииВБюджет КАК СТРОКА(160)) КАК НаименованиеВБюджет
	|ПОМЕСТИТЬ Организации
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.НаименованиеПлательщикаПриПеречисленииВБюджет <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Организации КАК Организации
	|ГДЕ
	|	Организации.ВариантНаименования <> ЗНАЧЕНИЕ(Перечисление.ВариантыНаименованияДляПечатныхФорм.ПолноеНаименование)
	|	И Организации.НаименованиеСокращенное = Организации.НаименованиеВБюджет
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Организации.Ссылка
	|ИЗ
	|	Организации КАК Организации
	|ГДЕ
	|	Организации.ВариантНаименования = ЗНАЧЕНИЕ(Перечисление.ВариантыНаименованияДляПечатныхФорм.ПолноеНаименование)
	|	И Организации.НаименованиеПолное = Организации.НаименованиеВБюджет";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.НаименованиеПлательщикаПриПеречисленииВБюджет = "";
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерезаполнитьКонстантуИспользоватьНесколькоОрганизаций() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Константы.ИспользоватьНесколькоОрганизаций.Установить(КоличествоОрганизаций() > 1);
	
КонецПроцедуры

Процедура ЗаполнитьИспользуемыеВидыОрганизаций() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	ВидыОрганизаций = ИспользуемыеВидыОрганизаций();
	
	Константы.ВестиУчетИндивидуальногоПредпринимателя.Установить(ВидыОрганизаций.ФизическоеЛицо);
	Константы.ВестиУчетЮридическогоЛица.Установить(ВидыОрганизаций.ЮридическоеЛицо);
	
КонецПроцедуры

Процедура ЗаполнитьДатуРегистрацииИП() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка,
	|	Организации.СвидетельствоДатаВыдачи
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|	И Организации.ДатаРегистрации = ДАТАВРЕМЯ(1, 1, 1)
	|	И Организации.СвидетельствоДатаВыдачи <> ДАТАВРЕМЯ(1, 1, 1)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.ДатаРегистрации = Выборка.СвидетельствоДатаВыдачи;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПризнакИспользованияТрудаРаботниковИП() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка,
	|	ВЫБОР
	|		КОГДА Организации.РегистрационныйНомерПФР = """"
	|				И Организации.КодОрганаПФР = """"
	|				И Организации.РегистрационныйНомерТФОМС = """"
	|				И Организации.РегистрационныйНомерФСС = """"
	|				И Организации.КодПодчиненностиФСС = """"
	|				И (ВЫРАЗИТЬ(Организации.НаименованиеТерриториальногоОрганаФСС КАК СТРОКА(1))) = """"
	|				И (ВЫРАЗИТЬ(Организации.НаименованиеТерриториальногоОрганаПФР КАК СТРОКА(1))) = """"
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ИПИспользуетТрудНаемныхРаботников
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ИПИспользуетТрудНаемныхРаботников Тогда
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Объект.ИПИспользуетТрудНаемныхРаботников = Истина;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПереписатьКодПодчиненностиФССДляИП() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка,
	|	Организации.УдалитьИПКодПодчиненностиФСС,
	|	Организации.КодПодчиненностиФСС
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.УдалитьИПКодПодчиненностиФСС) И НЕ ЗначениеЗаполнено(Выборка.КодПодчиненностиФСС) Тогда
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Объект.КодПодчиненностиФСС = Выборка.УдалитьИПКодПодчиненностиФСС;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ ДАННЫХ ОБ ОРГАНИЗАЦИИ

Функция ПолучитьКодТерритории(Организация, Период) Экспорт
	
	РегистрацияВНалоговомОргане = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "РегистрацияВНалоговомОргане");
	
	Возврат Справочники.РегистрацииВНалоговомОргане.КодТерритории(РегистрацияВНалоговомОргане, Период);
	
КонецФункции

Функция ФамилияИмяОтчествоПредпринимателя(Организация, Период) Экспорт
	
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ИндивидуальныйПредприниматель,ЮридическоеФизическоеЛицо");
	
	Если РеквизитыОрганизации.ЮридическоеФизическоеЛицо <> Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо
		Или Не ЗначениеЗаполнено(РеквизитыОрганизации.ИндивидуальныйПредприниматель) Тогда
		Возврат "";
	КонецЕсли;
	
	ДанныеФизическогоЛица = УчетЗарплаты.ДанныеФизическихЛиц(,РеквизитыОрганизации.ИндивидуальныйПредприниматель, Период);
	Возврат СокрЛП(ДанныеФизическогоЛица.Фамилия + " " + ДанныеФизическогоЛица.Имя + " " + ДанныеФизическогоЛица.Отчество);
	
КонецФункции

#Область СведенияОбОрганизации

Функция КППНаДату(Организация, ДатаСведений) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация)
		ИЛИ ТипЗнч(Организация) <> Тип("СправочникСсылка.Организации") Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаСведений) Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "КПП");
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Организация", Организация);
	Запрос.Параметры.Вставить("ДатаСведений", ДатаСведений);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(ИсторияРегистраций.Период) КАК Период,
	|	ИсторияРегистраций.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
	|ПОМЕСТИТЬ ДатаРегистрации
	|ИЗ
	|	РегистрСведений.ИсторияРегистрацийВНалоговомОргане КАК ИсторияРегистраций
	|ГДЕ
	|	ИсторияРегистраций.СтруктурнаяЕдиница = &Организация
	|	И ИсторияРегистраций.Период <= &ДатаСведений
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсторияРегистраций.СтруктурнаяЕдиница
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтруктурнаяЕдиница,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсторияРегистраций.РегистрацияВНалоговомОргане.КПП КАК КПП
	|ИЗ
	|	ДатаРегистрации КАК ДатаРегистрации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияРегистрацийВНалоговомОргане КАК ИсторияРегистраций
	|		ПО ДатаРегистрации.СтруктурнаяЕдиница = ИсторияРегистраций.СтруктурнаяЕдиница
	|			И ДатаРегистрации.Период = ИсторияРегистраций.Период";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КПП;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Групповое изменение объектов

// Возвращает список реквизитов, которые не нужно редактировать
// с помощью обработки группового изменения объектов
//
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	МассивРеквизитов = Новый Массив();
	МассивРеквизитов.Добавить("УдалитьЮрФизЛицо");
	МассивРеквизитов.Добавить("УдалитьКодИФНС");
	МассивРеквизитов.Добавить("УдалитьТерриториальныеУсловияПФР");
	МассивРеквизитов.Добавить("УдалитьРайонныйКоэффициентРФ");
	Возврат МассивРеквизитов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Использование нескольких организаций

// Возвращает организацию по умолчанию.
// Если в ИБ есть только одна организация, которая не помечена на удаление и не является предопределенной,
// то будет возвращена ссылка на нее, иначе будет возвращена пустая ссылка.
//
// Возвращаемое значение:
//     СправочникСсылка.Организации - ссылка на организацию
//
Функция ОрганизацияПоУмолчанию(Пользователь = Неопределено) Экспорт
	
	ЗначениеПоУмолчанию = Справочники.Организации.ПустаяСсылка();
	
	Если ИспользуетсяНесколькоОрганизаций() Тогда
		
		// В информационной базе ведется учет по нескольким организациям.
		// По умолчанию берем основную организация пользователя.
		
		ОсновнаяОрганизация = ХранилищеОбщихНастроек.Загрузить("ОсновнаяОрганизация",,, Пользователь);
		
		Если ТипЗнч(ОсновнаяОрганизация) = Тип("СправочникСсылка.Организации") Тогда
			// Проверка наличия ссылки и прав доступа
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ОсновнаяОрганизация", ОсновнаяОрганизация);
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Организации.Ссылка КАК Организация
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	Организации.Ссылка = &ОсновнаяОрганизация";
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ЗначениеПоУмолчанию = Выборка.Организация;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		// Ведется учет по единственной организации
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
		|	Организации.Ссылка КАК Организация
		|ИЗ
		|	Справочник.Организации КАК Организации";
		
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();
			Если Выборка.Количество() = 1 Тогда
				
				Если Выборка.Следующий() Тогда
					ЗначениеПоУмолчанию = Выборка.Организация;
				КонецЕсли;
				
			Иначе
				
				// Значение функциональной опции не соответствует состоянию ИБ
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Заполнение организации по умолчанию'"), УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Константы.ИспользоватьНесколькоОрганизаций,,
					НСтр("ru = 'Исправлено некорректное значение константы ""Использовать несколько организаций""'"));
				
				УстановитьПривилегированныйРежим(Истина);
				Константы.ИспользоватьНесколькоОрганизаций.Установить(Истина);
				УстановитьПривилегированныйРежим(Ложь);
				
			КонецЕсли;
			
		ИначеЕсли ПолучитьФункциональнуюОпцию("ОграничиватьДоступНаУровнеЗаписей") И КоличествоОрганизаций() > 0 Тогда
			
			// Пользователю недоступна единственная организация.
			ВызватьИсключение НСтр("ru = 'Доступ к данным по организации ограничен. Обратитесь к администратору.'");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЗначениеПоУмолчанию;
	
КонецФункции

// Возвращает количество элементов справочника Организации.
// Не учитывает предопределенные и помеченные на удаление элементы.
//
// Возвращаемое значение:
//     Число - количество организаций
//
Функция КоличествоОрганизаций() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Количество = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК Количество
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.Предопределенный";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Количество = Выборка.Количество;
	КонецЕсли;
	
	Возврат Количество;
	
КонецФункции

Функция ИспользуетсяНесколькоОрганизаций() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизацийБухгалтерскийУчет");
	
КонецФункции

Процедура ДополнитьДанныеЗаполненияПриОднофирменномУчете(ДанныеЗаполнения, ИмяРеквизитаОрганизация = "Организация") Экспорт
	
	Если ИспользуетсяНесколькоОрганизаций() Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеЗаполнения = Неопределено Тогда
		ДанныеЗаполнения = Новый Структура;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДанныеЗаполнения.Свойство(ИмяРеквизитаОрганизация) Тогда
		ДанныеЗаполнения.Вставить(ИмяРеквизитаОрганизация, ОрганизацияПоУмолчанию());
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Вызывается при переходе на версию конфигурации 2.1.3.16.
//
Процедура ОбновитьПредопределенныеВидыКонтактнойИнформацииОрганизаций() Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроверкиАдресаРФ = Новый Структура;
	ПараметрыПроверкиАдресаРФ.Вставить("АдресТолькоРоссийский", Истина);
	ПараметрыПроверкиАдресаРФ.Вставить("ПроверятьКорректность", Ложь);
	ПараметрыПроверкиАдресаРФ.Вставить("ЗапрещатьВводНекорректного", Ложь);
	ПараметрыПроверкиАдресаРФ.Вставить("СкрыватьНеактуальныеАдреса", Ложь);
	ПараметрыПроверкиАдресаРФ.Вставить("ВключатьСтрануВПредставление", Ложь);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
						Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
	ПараметрыВида.Подсказка                         = НСтр("ru='Юридический адрес организации'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Ложь;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Истина;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 1;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Ложь;
	ЗаполнитьЗначенияСвойств(ПараметрыВида.НастройкиПроверки, ПараметрыПроверкиАдресаРФ);
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
						Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
	ПараметрыВида.Подсказка                         = НСтр("ru='Фактический адрес организации'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Ложь;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Истина;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 2;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Ложь;
	ЗаполнитьЗначенияСвойств(ПараметрыВида.НастройкиПроверки, ПараметрыПроверкиАдресаРФ);
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
						Перечисления.ТипыКонтактнойИнформации.Телефон);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации;
	ПараметрыВида.Подсказка                         = НСтр("ru='Телефон организации'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 3;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
						Перечисления.ТипыКонтактнойИнформации.Факс);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ФаксОрганизации;
	ПараметрыВида.Подсказка                         = НСтр("ru='Факс организации'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 4;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
						Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.EmailОрганизации;
	ПараметрыВида.Подсказка                         = НСтр("ru='Адрес электронной почты организации'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 5;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
						Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации;
	ПараметрыВида.Подсказка                         = НСтр("ru='Почтовый адрес организации'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 6;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Ложь;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
						Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.УчредительныйАдресИностраннойОрганизации;
	ПараметрыВида.Подсказка                         = НСтр("ru='Учредительный адрес иностранной организации'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 7;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Ложь;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
						Перечисления.ТипыКонтактнойИнформации.Телефон);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ТелефонПоЮридическомуАдресуОрганизации;
	ПараметрыВида.Подсказка                         = НСтр("ru='Телефон по юридическому адресу организации'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 8;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
						Перечисления.ТипыКонтактнойИнформации.Другое);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации;
	ПараметрыВида.Подсказка                         = НСтр("ru='Любая другая контактная информация'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 9;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
КонецПроцедуры

// Вызывается при переходе на версию БСП 2.2.1.12
//
Процедура ЗаполнитьКонстантуИспользоватьНесколькоОрганизаций() Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") =
			ПолучитьФункциональнуюОпцию("НеИспользоватьНесколькоОрганизаций") Тогда
		// Опции должны иметь противоположные значения.
		// Если это не так, то значит в ИБ раньше не было этих опций - инициализируем их значения.
		Константы.ИспользоватьНесколькоОрганизаций.Установить(КоличествоОрганизаций() > 1);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура РазобратьАдрес(ОбъектXDTO, Знач Значение, ТекстОшибки)
	
	Значение = СтрЗаменить(Значение, "Индекс",         "Почтовый индекс");
	Значение = СтрЗаменить(Значение, "НаселенныйПункт","Населенный пункт");
	ДопустимыеТипы = "Почтовый индекс, Страна, Регион, Район, Населенный пункт, Город, Улица, Дом, Корпус, Квартира";
	
	Для Индекс=1 По СтрЧислоСтрок(Значение) Цикл
		ТекСтрока = СтрПолучитьСтроку(Значение, Индекс);
		Тип = Сред(ТекСтрока, 1, Найти(ТекСтрока, "=") - 1);
		Если Найти(ДопустимыеТипы, Тип) > 0 Тогда
			АдресноеПоле = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Адрес.АдресноеПоле", "4.02");
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(АдресноеПоле, "Тип", Тип, Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(АдресноеПоле, "Значение", Сред(ТекСтрока,Найти(ТекСтрока, "=") + 1), Истина, ТекстОшибки);
			ОбъектXDTO.АдресноеПоле.Добавить(АдресноеПоле);
		КонецЕсли;
	КонецЦикла
	
КонецПроцедуры

Функция ВыгрузитьРеквизитыОрганизацииВXMLФайл(Организация)
	
	БанковскийСчет = Неопределено;
	Если Организация.ОсновнойБанковскийСчет.Пустая() Тогда
		БанковскиеСчетаОрганизации = Справочники.БанковскиеСчета.БанковскиеСчетаОрганизации(Организация,
			ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
		Если БанковскиеСчетаОрганизации.Количество() = 1 Тогда
			БанковскийСчет = БанковскиеСчетаОрганизации[0].Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	РеквизитыОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Организация, ,БанковскийСчет);
	
	Если НЕ ЗначениеЗаполнено(РеквизитыОрганизации.ИНН) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстОшибки = "";
	ВерсияСхемыCML = "4.02";
	Результат = Неопределено;
	
	Попытка
		
		КонтрагентXDTO = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Контрагент", ВерсияСхемыCML);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(КонтрагентXDTO, "ИД", РеквизитыОрганизации.ИНН + "_"
			+ РеквизитыОрганизации.КПП, Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(КонтрагентXDTO, "Наименование",
			РеквизитыОрганизации.СокращенноеНаименование, Истина, ТекстОшибки);
		
		ЭтоЮрЛицо = СтрДлина(РеквизитыОрганизации.ИНН) = 10;
		
		Если ЭтоЮрЛицо Тогда
			ЮрФизЛицоXDTO = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("РеквизитыЮрЛица", ВерсияСхемыCML);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
				ЮрФизЛицоXDTO, "ОфициальноеНаименование", РеквизитыОрганизации.ПолноеНаименование, Истина, ТекстОшибки);
			Если СтрДлина(РеквизитыОрганизации.КПП) = 9 Тогда
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ЮрФизЛицоXDTO, "КПП", РеквизитыОрганизации.КПП, , ТекстОшибки);
			Иначе
				ТекстОшибки = НСтр("ru='Ошибка при формировании карточки реквизитов: длина КПП не равна девяти знакам.'");
			КонецЕсли;
			
			Если РеквизитыОрганизации.Свойство("РуководительФИО") Тогда
				РуководительXDTO = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Контрагент", ВерсияСхемыCML);
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(РуководительXDTO, "ИД",
					РеквизитыОрганизации.РуководительФИО.Представление, Истина, ТекстОшибки);
				ФизЛицоРуководительXDTO = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Контрагент.ФизЛицо", ВерсияСхемыCML);
				
				ФИОРуководителя = "";
				Если ЗначениеЗаполнено(РеквизитыОрганизации.РуководительФИО.Фамилия) Тогда
					ФИОРуководителя = РеквизитыОрганизации.РуководительФИО.Фамилия + " ";
				КонецЕсли;
				Если ЗначениеЗаполнено(РеквизитыОрганизации.РуководительФИО.Имя) Тогда
					ФИОРуководителя = ФИОРуководителя + РеквизитыОрганизации.РуководительФИО.Имя + " ";
				КонецЕсли;
				Если ЗначениеЗаполнено(РеквизитыОрганизации.РуководительФИО.Отчество) Тогда
					ФИОРуководителя = ФИОРуководителя + РеквизитыОрганизации.РуководительФИО.Отчество;
				КонецЕсли;
				
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
					ФизЛицоРуководительXDTO, "ПолноеНаименование", ФИОРуководителя, Истина, ТекстОшибки);
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
					ФизЛицоРуководительXDTO, "Должность", РеквизитыОрганизации.ДолжностьРуководителяПредставление, Истина, ТекстОшибки);
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
					РуководительXDTO, "ФизЛицо", ФизЛицоРуководительXDTO, Истина, ТекстОшибки);
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
					ЮрФизЛицоXDTO, "Руководитель", РуководительXDTO, Истина, ТекстОшибки);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РеквизитыОрганизации.ЮридическийАдрес) Тогда
				АдресXDTO = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Адрес", ВерсияСхемыCML);
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(АдресXDTO, "Представление", РеквизитыОрганизации.ЮридическийАдрес,
					Истина, ТекстОшибки);
				Если РеквизитыОрганизации.Свойство("ЗначенияПолейЮридическийАдрес") Тогда
					Если Найти(РеквизитыОрганизации.ЗначенияПолейЮридическийАдрес, "http://www.v8.1c.ru/ssl/contactinfo") > 0 Тогда
						ЗначенияПолейЮридическийАдрес = УправлениеКонтактнойИнформацией.ПредыдущийФорматКонтактнойИнформацииXML(
							РеквизитыОрганизации.ЗначенияПолейЮридическийАдрес);
						РазобратьАдрес(АдресXDTO, ЗначенияПолейЮридическийАдрес, ТекстОшибки);
					Иначе
						РазобратьАдрес(АдресXDTO, РеквизитыОрганизации.ЗначенияПолейЮридическийАдрес, ТекстОшибки);
					КонецЕсли;
				КонецЕсли;
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ЮрФизЛицоXDTO, "ЮридическийАдрес", АдресXDTO, Истина, ТекстОшибки);
			КонецЕсли;
			
			ИмяСвойства = "ЮрЛицо";
			
		Иначе
			ЮрФизЛицоXDTO = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("РеквизитыФизЛица", ВерсияСхемыCML);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ЮрФизЛицоXDTO, "ПолноеНаименование",
				РеквизитыОрганизации.ПолноеНаименование, Истина, ТекстОшибки);
			
			Если ЗначениеЗаполнено(РеквизитыОрганизации.ЮридическийАдрес) Тогда
				АдресXDTO = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Адрес", ВерсияСхемыCML);
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(АдресXDTO, "Представление", РеквизитыОрганизации.ЮридическийАдрес,
					Истина, ТекстОшибки);
				Если РеквизитыОрганизации.Свойство("ЗначенияПолейЮридическийАдрес") Тогда
					Если Найти(РеквизитыОрганизации.ЗначенияПолейЮридическийАдрес, "http://www.v8.1c.ru/ssl/contactinfo") > 0 Тогда
						ЗначенияПолейАдресРегистрации = УправлениеКонтактнойИнформацией.ПредыдущийФорматКонтактнойИнформацииXML(
							РеквизитыОрганизации.ЗначенияПолейЮридическийАдрес);
						РазобратьАдрес(АдресXDTO, ЗначенияПолейАдресРегистрации, ТекстОшибки);
					Иначе
						РазобратьАдрес(АдресXDTO, РеквизитыОрганизации.ЗначенияПолейЮридическийАдрес, ТекстОшибки);
					КонецЕсли;
				КонецЕсли;
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ЮрФизЛицоXDTO, "АдресРегистрации", АдресXDTO, Истина, ТекстОшибки);
			КонецЕсли;
			
			Если РеквизитыОрганизации.Свойство("СвидетельствоДатаВыдачи")
				И РеквизитыОрганизации.Свойство("СвидетельствоСерияНомер") Тогда
				СвидетельствоXDTO = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("РеквизитыФизЛица.Свидетельство",
					ВерсияСхемыCML);
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
					СвидетельствоXDTO, "Номер", РеквизитыОрганизации.СвидетельствоСерияНомер, Истина, ТекстОшибки);
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
					СвидетельствоXDTO, "ДатаВыдачи", РеквизитыОрганизации.СвидетельствоДатаВыдачи, Истина, ТекстОшибки);
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
					ЮрФизЛицоXDTO, "Свидетельство", СвидетельствоXDTO, Истина, ТекстОшибки);
			КонецЕсли;
			ИмяСвойства = "ФизЛицо";
		КонецЕсли;
		
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ЮрФизЛицоXDTO, "ИНН" , РеквизитыОрганизации.ИНН, Истина, ТекстОшибки);
		Если СтрДлина(РеквизитыОрганизации.КодПоОКПО) = 8 ИЛИ СтрДлина(РеквизитыОрганизации.КодПоОКПО) = 10 Тогда
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ЮрФизЛицоXDTO, "ОКПО", РеквизитыОрганизации.КодПоОКПО, , ТекстОшибки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РеквизитыОрганизации.ФактическийАдрес)Тогда
			АдресXDTO = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Адрес", ВерсияСхемыCML);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(АдресXDTO, "Представление", РеквизитыОрганизации.ФактическийАдрес,
				Истина, ТекстОшибки);
			Если РеквизитыОрганизации.Свойство("ЗначенияПолейФактическийАдрес") Тогда
				Если Найти(РеквизитыОрганизации.ЗначенияПолейФактическийАдрес, "http://www.v8.1c.ru/ssl/contactinfo") > 0 Тогда
					ЗначенияПолейФактическийАдрес = УправлениеКонтактнойИнформацией.ПредыдущийФорматКонтактнойИнформацииXML(
						РеквизитыОрганизации.ЗначенияПолейФактическийАдрес);
					РазобратьАдрес(АдресXDTO, ЗначенияПолейФактическийАдрес, ТекстОшибки);
				Иначе
					РазобратьАдрес(АдресXDTO, РеквизитыОрганизации.ЗначенияПолейФактическийАдрес, ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(КонтрагентXDTO, "Адрес", АдресXDTO, Истина, ТекстОшибки);
		КонецЕсли;
		
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(КонтрагентXDTO, ИмяСвойства, ЮрФизЛицоXDTO, Истина, ТекстОшибки);
		
		Если РеквизитыОрганизации.Свойство("Банк") И ЗначениеЗаполнено(РеквизитыОрганизации.Банк) Тогда
			РасчетныеСчетаXDTO = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Контрагент.РасчетныеСчета", ВерсияСхемыCML);
			РасчетныйСчетXDTO = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("РасчетныйСчет", ВерсияСхемыCML);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
				РасчетныйСчетXDTO, "НомерСчета", РеквизитыОрганизации.НомерСчета, Истина, ТекстОшибки);
			БанкXDTO = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Банк", ВерсияСхемыCML);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(БанкXDTO, "БИК", РеквизитыОрганизации.БИК, Истина, ТекстОшибки);
			Если ЗначениеЗаполнено(РеквизитыОрганизации.КоррСчет) Тогда
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
					БанкXDTO, "СчетКорреспондентский", РеквизитыОрганизации.КоррСчет, Истина, ТекстОшибки);
			КонецЕсли;
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(БанкXDTO, "Наименование", Строка(РеквизитыОрганизации.Банк),
				Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(РасчетныйСчетXDTO, "Банк",БанкXDTO, Истина, ТекстОшибки);
			РасчетныеСчетаXDTO.РасчетныйСчет.Добавить(РасчетныйСчетXDTO);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
				КонтрагентXDTO, "РасчетныеСчета", РасчетныеСчетаXDTO, Истина, ТекстОшибки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РеквизитыОрганизации.Телефоны) ИЛИ ЗначениеЗаполнено(РеквизитыОрганизации.Email) Тогда
			КонтактнаяИнформацияXDTO = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("КонтактнаяИнформация", ВерсияСхемыCML);
			КонтактыXDTO = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Контрагент.Контакты", ВерсияСхемыCML);
			Если ЗначениеЗаполнено(РеквизитыОрганизации.Телефоны) Тогда
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(КонтактнаяИнформацияXDTO, "Тип", "Телефон рабочий", Истина, ТекстОшибки);
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(КонтактнаяИнформацияXDTO, "Значение",
					РеквизитыОрганизации.Телефоны, Истина, ТекстОшибки);
				КонтактыXDTO.Контакт.Добавить(КонтактнаяИнформацияXDTO);
			КонецЕсли;
			
			КонтактнаяИнформацияXDTO = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("КонтактнаяИнформация", ВерсияСхемыCML);
			Если ЗначениеЗаполнено(РеквизитыОрганизации.Email) Тогда
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(КонтактнаяИнформацияXDTO, "Тип", "Почта", Истина, ТекстОшибки);
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(КонтактнаяИнформацияXDTO, "Значение",
					РеквизитыОрганизации.Email, Истина, ТекстОшибки);
				КонтактыXDTO.Контакт.Добавить(КонтактнаяИнформацияXDTO);
			КонецЕсли;
			
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(КонтрагентXDTO, "Контакты", КонтактыXDTO, Истина, ТекстОшибки);
		КонецЕсли;
		
		КонтрагентXDTO.Проверить();
		
		Если ТекстОшибки = "" Тогда
			ИмяФайла = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("xml");
			НоваяЗаписьXML = Новый ЗаписьXML;
			НоваяЗаписьXML.ОткрытьФайл(ИмяФайла, "UTF-8");
			НоваяЗаписьXML.ЗаписатьОбъявлениеXML();
			ФабрикаXDTO.ЗаписатьXML(НоваяЗаписьXML, КонтрагентXDTO, , , , НазначениеТипаXML.Явное);
			НоваяЗаписьXML.Закрыть();
			ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
			УдалитьФайлы(ИмяФайла);
			
			АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанные, Новый УникальныйИдентификатор);
			ОписаниеФайла = Новый Структура;
			ШаблонИмениФайла = Нстр("ru='Реквизиты организации %1.xml'");
			НаименованиеОрганизации = СтрЗаменить(РеквизитыОрганизации.Представление, """", "");
			ОписаниеФайла.Вставить("Представление", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениФайла,
				НаименованиеОрганизации));
			ОписаниеФайла.Вставить("АдресВоВременномХранилище", АдресХранилища);
			Результат = ОписаниеФайла;
			
		Иначе
			ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ТекстОшибки);
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
				НСтр("ru = 'Формирование карточки организации'"),
				ТекстОшибки,
				ТекстОшибки);
		КонецЕсли;
		
	Исключение
		
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
			НСтр("ru = 'Формирование карточки организации'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			ТекстСообщения);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Формирует пакеты электронных документов вида счет на оплату стандарта CML 4.02
// 
// Параметры:
//  СведенияОбОрганизациях - Массив - массив сведений об организациях, см БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице()
// 
// Возвращаемое значение:
//  Массив - содержит структуры со свойствами:
//    * Представление - Строка - наименование карточки организации
//    * АдресВоВременномХранилище - Строка - адрес карточки организации XML во временном хранилище
//
Функция СформироватьКарточкиОрганизацииВXML(МассивОбъектов) Экспорт
	
	ФайлыКОтправке = Новый Массив;
	
	Для Каждого Организация Из МассивОбъектов Цикл
		СериализованнаяКарточка = ВыгрузитьРеквизитыОрганизацииВXMLФайл(Организация);
		Если СериализованнаяКарточка <> Неопределено Тогда
			ФайлыКОтправке.Добавить(СериализованнаяКарточка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ФайлыКОтправке;
	
КонецФункции

#КонецОбласти

#КонецЕсли
