&НаКлиенте
Перем ЗаполнятьРеквизитыПоИНН;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь();
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Печать
	
	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// Установка списка выбора головных организаций
	Элементы.ГоловнаяОрганизация.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокГоловныхОрганизацийОбособленногоПодразделения().ВыгрузитьЗначения());
	
	// Исключим редактируемую организацию из списка головных
	Если Параметры.Ключ.Пустая() Тогда
		ОрганизацияСсылка = Справочники.Организации.ПолучитьСсылку();
		ЭлементТекущаяОрганизация	= Элементы.ГоловнаяОрганизация.СписокВыбора.НайтиПоЗначению(Объект.Ссылка);
		Если ЭлементТекущаяОрганизация <> Неопределено Тогда
			Элементы.ГоловнаяОрганизация.СписокВыбора.Удалить(ЭлементТекущаяОрганизация);
		КонецЕсли;
		РедактированиеПериодическихСведений.ИнициализироватьЗаписьДляРедактированияВФорме(ЭтотОбъект, "ИсторияРегистрацийВОрганеПФР", ОрганизацияСсылка);
		ОтобразитьЗаполнениеПоДаннымЕГР = Истина;
	Иначе
		ОрганизацияСсылка = Объект.Ссылка;
	КонецЕсли;
	
	АдресныйКлассификаторПуст = НЕ АдресныйКлассификатор.КлассификаторЗагружен();
	
	ЭтоФизЛицо	= Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	ЭтоОбособленноеПодразделение	= Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо
		И Объект.ОбособленноеПодразделение;
	
	Параметры.Свойство("СтруктураУчетнойПолитики", СтруктураУчетнойПолитики);
	
	ПараметрыУчета = ОбщегоНазначенияБПВызовСервера.ОпределитьПараметрыУчета();
	
	УплачиватьДобровольныеВзносыВФСС = УплачиватьДобровольныеВзносыВФСС(Объект.Ссылка);
	
	ИспользоватьРазделениеПоОбластямДанных = ПолучитьФункциональнуюОпцию("РаботаВМоделиСервиса");
	
	ОКФС	= ОбщегоНазначенияБПВызовСервера.ПолучитьКлассификатор("ОКФС");
	ОКОПФ	= ОбщегоНазначенияБПВызовСервера.ПолучитьКлассификатор("ОКОПФ");
	ОКВЭД	= ОбщегоНазначенияБПВызовСервера.ПолучитьКлассификатор("ОКВЭД");
	
	Если ЭтоФизЛицо Тогда
		ФизлицоПриСозданииНаСервере();
	КонецЕсли;
	
	НаименованиеСокращенное	= Объект.НаименованиеСокращенное;
	НаименованиеПолное		= Объект.НаименованиеПолное;
		
	УчетЗарплатыИКадровВоВнешнейПрограмме	= Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.Получить();
	
	Элементы.ГруппаГоловнаяОрганизация.Видимость			= ЭтоОбособленноеПодразделение;
	Элементы.ФИОФизическихЛицФамилия.Видимость				= ЭтоФизЛицо;
	Элементы.ФИОФизическихЛицИмя.Видимость					= ЭтоФизЛицо;
	Элементы.ФИОФизическихЛицОтчество.Видимость				= ЭтоФизЛицо;
	Элементы.ИНН.Видимость									= НЕ ЭтоОбособленноеПодразделение;
	Элементы.ГруппаКПП.Видимость							= НЕ ЭтоФизЛицо;
	Элементы.ГруппаСвидетельствоОРегистрацииИП.Видимость	= ЭтоФизЛицо;
	Элементы.ГруппаПаспорт.Видимость						= ЭтоФизЛицо;
	Элементы.ГруппаФактАдресОрганизации.Видимость			= НЕ ЭтоФизЛицо;
	Элементы.ГруппаЮрФактАдресаСовпадают.Видимость			= НЕ ЭтоФизЛицо;
	Элементы.ГруппаПочтовыйАдрес.Видимость					= НЕ ЭтоФизЛицо;
	Элементы.ГруппаЮрПочтовыйАдресаСовпадают.Видимость		= НЕ ЭтоФизЛицо;
	Элементы.ГруппаПодписи.Видимость						= НЕ ЭтоФизЛицо;
	Элементы.ДополнительныйКодФСС.Видимость					= ЭтоОбособленноеПодразделение;
	Элементы.ИПРегистрационныйНомерТФОМС.Видимость			= ЭтоФизЛицо;
	Элементы.ГруппаИПНаемныйТрудРаботников.Видимость		= ЭтоФизЛицо;
	Элементы.ГруппаИностраннаяОрганизацияФлаг.Видимость		= НЕ ЭтоФизЛицо;
	Элементы.ИПРегистрационныйНомерПФР.Видимость			= ЭтоФизЛицо;
	Элементы.ИПРегистрационныйНомерФСС.Видимость			= ЭтоФизЛицо;
	Элементы.ГруппаИностраннаяОрганизация.Видимость			= НЕ ЭтоФизЛицо И Объект.ИностраннаяОрганизация;
	Элементы.ЗаполнитьРеквизитыПоИНН.Видимость				= НЕ ОтобразитьЗаполнениеПоДаннымЕГР;
	Элементы.ГруппаЗаполнениеПоДаннымЕГР.Видимость			= ОтобразитьЗаполнениеПоДаннымЕГР;
	Элементы.Префикс.Видимость = ПолучитьФункциональнуюОпцию("ВестиУчетПоОрганизациям") ИЛИ ПолучитьФункциональнуюОпцию("ВестиУчетПоОрганизациям82");
	Элементы.ПрефиксОднойОрганизации.Видимость = ПолучитьФункциональнуюОпцию("НеВестиУчетПоОрганизациям") ИЛИ ПолучитьФункциональнуюОпцию("НеВестиУчетПоОрганизациям82");
	
	ДлинаИНН = ?(ЭтоФизЛицо, 12, 10);
	Элементы.ИНН.ОграничениеТипа = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(ДлинаИНН));
	Элементы.ПолеПоискаИНН.ОграничениеТипа = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(ДлинаИНН));
	
	Элементы.ЦифровойИндексОбособленногоПодразделения.Видимость	= ЭтоОбособленноеПодразделение;
	
	Если ЭтоОбособленноеПодразделение Тогда
		
		ВидОрганизации = "ОбособленноеПодразделение";
		ВидОрганизацииПредставление	= НСтр("ru = 'Обособленное подразделение'");
		
		Элементы.НаименованиеСокращенное.Подсказка	= "";
		Элементы.НаименованиеПолное.Подсказка		= "";
		Элементы.Наименование.Подсказка				= "";
		
		Элементы.ЗаполнитьРеквизитыПоИНН.Видимость = Ложь;
		Элементы.ГруппаЗаполнениеПоДаннымЕГР.Видимость = Ложь;
		
	ИначеЕсли ЭтоФизЛицо Тогда
		
		ВидОрганизации = "ИндивидуальныйПредприниматель";
		ВидОрганизацииПредставление	= НСтр("ru = 'Индивидуальный предприниматель'");
		Элементы.ИНН.Маска = "999999999999";
		
		Элементы.НаименованиеСокращенное.ПодсказкаВвода		= НСтр("ru = 'ИП Иванов И.И.'");
		Элементы.НаименованиеПолное.ПодсказкаВвода			= НСтр("ru = 'Индивидуальный предприниматель Иванов Иван Иванович'");
		Элементы.Наименование.ПодсказкаВвода				= НСтр("ru = 'Иванов И.И. ИП'");
		
		Элементы.ОГРН.Заголовок	= НСтр("ru = 'ОГРНИП'");
		Элементы.ОГРН.Подсказка	= НСтр("ru = 'Основной государственный регистрационный номер индивидуального предпринимателя, 
			|указан в Свидетельстве о государственной регистрации физического лица в качестве ИП'");
			
		Элементы.ЮрАдресОрганизации.Заголовок			= НСтр("ru = 'Адрес места жительства'");
		Элементы.ТелефонОрганизации.Заголовок			= НСтр("ru = 'Телефон (служебный)'");
		Элементы.ЗаголовокПолеИНН.Заголовок = НСтр("ru = 'Заполнение по данным ЕГРИП:'");
		Элементы.ПолеПоискаИНН.ПодсказкаВвода = НСтр("ru = 'Введите ИНН 12 цифр'")

	Иначе
		
		ВидОрганизации = "ЮридическоеЛицо";
		ВидОрганизацииПредставление = НСтр("ru='Юридическое лицо'");
		Элементы.ИНН.Маска = "9999999999";
		Элементы.ОГРН.Маска = "9999999999999";
		Элементы.РегистрационныйНомерПФР.Заголовок		= НСтр("ru='Регистрационный номер'");
		Элементы.РегистрационныйНомерФСС.Заголовок		= НСтр("ru='Регистрационный номер'");
		Элементы.РегистрационныйНомерТФОМС.Заголовок	= НСтр("ru='Регистрационный номер'");
		
	КонецЕсли;
	
	ОбновитьИнформациюОбОтветственныхЛицах();
	
	УстановитьСписокВыбораВариантаНаименованияДляПечатныхФорм(ЭтотОбъект);
	
	РазместитьКонтактнуюИнформацию();
	
	Если ЭтоФизЛицо ИЛИ ЭтоОбособленноеПодразделение Тогда
		Элементы.КрупнейшийНалогоплательщик.Видимость = Ложь;
		Элементы.КодНалоговогоОрганаПолучателя.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.КодНалоговогоОрганаПолучателя.Доступность = Объект.КрупнейшийНалогоплательщик;
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, Объект, "ГруппаДополнительныеРеквизиты");
	
	// Установка доступности ссылок в зависимости от доступности данных формы для изменения
	Элементы.Руководитель.Доступность = НЕ ТолькоПросмотр;
	Элементы.ГлавныйБухгалтер.Доступность = НЕ ТолькоПросмотр;
	Элементы.Кассир.Доступность = НЕ ТолькоПросмотр;
	Элементы.ГруппаЗагрузкаАдресногоКлассификатора.Видимость = НЕ ИспользоватьРазделениеПоОбластямДанных И АдресныйКлассификаторПуст;
	Элементы.ГруппаЗагрузкаАдресногоКлассификатора.Доступность = НЕ ТолькоПросмотр;	
	Элементы.ЗагрузитьАдресныйКлассификатор.Доступность = НЕ ТолькоПросмотр;	
	Элементы.НадписьСформироватьЗаявлениеНаПодключениеКЭлектронномуДокументообороту.Доступность =
		Пользователи.ЭтоПолноправныйПользователь() ИЛИ РольДоступна("ПравоНаЗащищенныйДокументооборотСКонтролирующимиОрганами");
	
	ТекущийФайл = Объект.ФайлФаксимильнаяПечать;
	Если Не ТекущийФайл.Пустая() Тогда
		АдресФаксимильнойПечати = РаботаСФайламиСлужебныйВызовСервера.ПолучитьНавигационнуюСсылкуДляОткрытия(ТекущийФайл.ТекущаяВерсия);
		ЗагрузитьОчиститьФаксимиле = "Очистить факсимильную печать";
	Иначе
		ЗагрузитьОчиститьФаксимиле = "Загрузить факсимильную печать";
	Конецесли;
	
	ТекущийФайл = Объект.ФайлЛоготип;
	Если Не ТекущийФайл.Пустая() Тогда
		АдресЛоготипа = РаботаСФайламиСлужебныйВызовСервера.ПолучитьНавигационнуюСсылкуДляОткрытия(ТекущийФайл.ТекущаяВерсия);
		ЗагрузитьОчиститьЛоготип = "Очистить логотип";
	Иначе
		ЗагрузитьОчиститьЛоготип = "Загрузить логотип";
	Конецесли;
	
	УстановитьПредставлениеПлатежныхРеквизитов(Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган, Объект.КодНалоговогоОргана, 
				ПлатежныеРеквизитыФНСПредставление);
	
	УстановитьПредставлениеПлатежныхРеквизитов(Перечисления.ВидыГосударственныхОрганов.ОрганФСС, Объект.КодПодчиненностиФСС, 
				ПлатежныеРеквизитыФССПредставление);
	
	УстановитьПредставлениеПлатежныхРеквизитов(Перечисления.ВидыГосударственныхОрганов.ОрганПФР, Объект.КодОрганаПФР, 
				ПлатежныеРеквизитыПФРПредставление);
	
	НастройкиПредупреждений = ОбщегоНазначенияБП.НастройкиПредупрежденийОбИзменениях("Настройки1СОтчетности, ИсторияРегистрацийВНалоговомОргане");
	
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Организация", Объект.Ссылка));
	
	УправлениеФормой(ЭтотОбъект);
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Если Не ЗначениеЗаполнено(ОрганизацияСсылка) Тогда
		ОрганизацияСсылка = Объект.Ссылка;
	КонецЕсли;
	
	Если НЕ Объект.ИндивидуальныйПредприниматель.Пустая() Тогда
		ПрочитатьДанныеФизическогоЛица();
	КонецЕсли;
	
	ПрочитатьРегистрациюВНалоговомОргане();
	
	ПрочитатьРегистрацияВОрганеПФР();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Перем СистемаНалогообложения, ОбъектНалогообложенияУСН;
	
	Если Параметры.Ключ.Пустая() Тогда
		
		Если СтруктураУчетнойПолитики = Неопределено
			ИЛИ НЕ СтруктураУчетнойПолитики.Свойство("СистемаНалогообложения", СистемаНалогообложения) Тогда
			Возврат;
		КонецЕсли;
		
		СтруктураУчетнойПолитики.Свойство("ОбъектНалогообложенияУСН", ОбъектНалогообложенияУСН);
		
		Если НЕ ЗначениеЗаполнено(ПараметрыУчета) Тогда
			ПараметрыУчета = ОбщегоНазначенияБПВызовСервера.ОпределитьПараметрыУчета();
		КонецЕсли;
		
		Если (СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.Упрощенная")
					И ОбъектНалогообложенияУСН = ПредопределенноеЗначение("Перечисление.ОбъектыНалогообложенияПоУСН.ДоходыМинусРасходы"))
			ИЛИ (СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.Общая")
					И ВидОрганизации = "ИндивидуальныйПредприниматель") Тогда
			
			Если НЕ ПараметрыУчета.ВестиПартионныйУчет Тогда
				
				Если СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.Общая")
					И ВидОрганизации = "ИндивидуальныйПредприниматель" Тогда
					ТекстВопроса = НСтр("ru = 'Для создания ИП на общей системе налогообложения необходимо включить аналитический учет по партиям на счетах учета МПЗ.'");
				Иначе
					ТекстВопроса = НСтр("ru = 'Для применения выбранной системы налогообложения необходимо включить аналитический учет по партиям на счетах учета МПЗ.'");;
				КонецЕсли;
			
				Если НЕ ЭтоПолноправныйПользователь Тогда
					ПоказатьПредупреждение( , СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1
						|Недостаточно прав для изменения разрезов аналитического учета. Организация не может быть создана!'")), ТекстВопроса);
					Отказ = Истина;
					Возврат;
				КонецЕсли;
				
				Оповещение = Новый ОписаниеОповещения("ВопросВключитьАналитическийУчетПоПартиямЗавершение", ЭтотОбъект);
				
				ПоказатьВопрос(Оповещение, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1
					|Включить аналитический учет по партиям?'"), ТекстВопроса),
					РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.ОК);
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ПоказатьПредупреждениеОбИзмененииНастроек1СОтчетности", 0.5, Истина);
	
	ПодключитьОбработчикОжидания("ПоказатьПредупреждениеОбИзмененииИсторияРегистрацийВНалоговомОргане", 0.6, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	
	Если Источник = ЭтотОбъект Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененаРегистрацияВНалоговомОргане" Тогда
		
		Если НЕ ТолькоПросмотр Тогда
		
			Если РегистрацияВНалоговомОргане.Ссылка = Параметр.Ссылка Тогда
				
				ОбновитьРегистрациюПослеЗаписиВФормеРегистрации(РегистрацияВНалоговомОргане.Ссылка);
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ИзменениеДанныхФизическогоЛица" Тогда
		
		Если НЕ ТолькоПросмотр
			И Объект.ИндивидуальныйПредприниматель = Источник Тогда
		
			ПрочитатьДанныеФизическогоЛицаИОбновитьКонтактнуюИнформацию();
			
			Если ФизическоеЛицо.ИНН <> Объект.ИНН Тогда
				Объект.ИНН = ФизическоеЛицо.ИНН;
				Модифицированность = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ИзменениеОтветственныхЛиц" Тогда
		
		ОбновитьИнформациюОбответственныхЛицах();
	
	ИначеЕсли ИмяСобытия = "ЗагруженАдресныйКлассификатор" Тогда
		
		АдресныйКлассификаторПуст = АдресныйКлассификаторПуст();
		
		Элементы.ГруппаЗагрузкаАдресногоКлассификатора.Видимость = НЕ ИспользоватьРазделениеПоОбластямДанных И АдресныйКлассификаторПуст;
		
	ИначеЕсли ИмяСобытия = "УстановкаОсновногоБанковскогоСчета" 
		  ИЛИ ИмяСобытия = "УстановкаОсновногоБанковскогоСчетаПриЗаписи" Тогда
		
		Если Объект.Ссылка = Параметр.КонтрагентОрганизация Тогда
			
			Объект.ОсновнойБанковскийСчет = Параметр.ОсновнойБанковскийСчет;
			
			Если НЕ Модифицированность Тогда
				Записать();
			КонецЕсли;
			
			Оповестить("УстановкаОсновногоБанковскогоСчетаВыполнена");
			
		КонецЕсли;
	
	ИначеЕсли ИмяСобытия = "ИзменениеУчетнойПолитики" Тогда
	
		УплачиватьДобровольныеВзносыВФСС = УплачиватьДобровольныеВзносыВФСС(Объект.Ссылка);
		УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Организация", Объект.Ссылка));
		
		
	КонецЕсли;
		
	Если ИмяСобытия = "ОтредактированаИстория" Тогда
		Если Параметр.ИмяРегистра = "ИсторияРегистрацийВНалоговомОргане"
			И Параметр.ВедущийОбъект = Объект.Ссылка Тогда
			
			ИсторияРегистрацийВНалоговомОрганеНаборЗаписей.Очистить();
			Для Каждого ЗаписьНабора Из Параметр.НаборЗаписей Цикл
				ЗаписьИстории = ИсторияРегистрацийВНалоговомОрганеНаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(ЗаписьИстории, ЗаписьНабора);
			КонецЦикла;
			
			ПослеРедактированияИсторииРегистрацийВНалоговомОргане();
			
		ИначеЕсли Параметр.ИмяРегистра = "ИсторияРегистрацийВОрганеПФР" Тогда
			РедактированиеПериодическихСведенийКлиент.ОбработкаОповещения(ЭтотОбъект, ОрганизацияСсылка, ИмяСобытия, Параметр, Источник);
			Объект.РегистрационныйНомерПФР = ИсторияРегистрацийВОрганеПФР.РегистрационныйНомерПФР;
		ИначеЕсли Параметр.ИмяРегистра = "ДокументыФизическихЛиц"
					И Объект.ИндивидуальныйПредприниматель = Источник И ЭтотОбъект[Параметр.ИмяРегистра + "НаборЗаписейПрочитан"] Тогда
			СотрудникиКлиентБазовый.ОбработкаОповещенияОтредактированаИсторияДокументыФизическихЛиц(ЭтотОбъект, Объект.ИндивидуальныйПредприниматель, ИмяСобытия, Параметр, Источник);
			ДокументыФизическихЛицПриИзмененииДанных(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли; 
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ИмяОбработкиВводаКонтактнойИнформации = "Обработка.ВводКонтактнойИнформации";
	
	Если ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма")
		И Лев(ИсточникВыбора.ИмяФормы, СтрДлина(ИмяОбработкиВводаКонтактнойИнформации)) = ИмяОбработкиВводаКонтактнойИнформации Тогда
		
		Возврат;
		
	ИначеЕсли ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма")
			И ИсточникВыбора.ИмяФормы = "Справочник.РегистрацииВНалоговомОргане.Форма.ФормаПредставителя"
			И ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Модифицированность = Истина;
		ЗаполнитьЗначенияСвойств(РегистрацияВНалоговомОргане, ВыбранноеЗначение);
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Модифицированность	= Истина;
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыбранноеЗначение);
		ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
			
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Параметры.Ключ.Пустая() Тогда
		ТекущийОбъект.УстановитьСсылкуНового(ОрганизацияСсылка);
	КонецЕсли;
	
	// Обработчик подсистемы "Контактная информация"
	Если НЕ ЭтоФизЛицо Тогда
		
		УправлениеКонтактнойИнформациейБП.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, Отказ);
		
	Иначе
		
		ИндивидуальныйПредпринимательОбъект = РеквизитФормыВЗначение("ФизическоеЛицо");
		
		КонтактнаяИнформацияДоЗаписи = ИндивидуальныйПредпринимательОбъект.КонтактнаяИнформация.Выгрузить();
		Для Каждого ЗаписьКИ ИЗ ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
			СтрокаВида = КонтактнаяИнформацияДоЗаписи.Найти(ЗаписьКИ.Вид, "Вид");
			Если СтрокаВида <> Неопределено Тогда
				КонтактнаяИнформацияДоЗаписи.Удалить(КонтактнаяИнформацияДоЗаписи.Индекс(СтрокаВида));
			КонецЕсли;
		КонецЦикла;
		
		УправлениеКонтактнойИнформациейБП.ПередЗаписьюНаСервере(ЭтотОбъект, ИндивидуальныйПредпринимательОбъект, Отказ);
		
		//дополним контактную информацию физического лица теми видами, которых нет у организации и которые затерлись при обновлении
		Для Каждого ВидИнформации ИЗ КонтактнаяИнформацияДоЗаписи Цикл
			НовыйВидИнформации = ИндивидуальныйПредпринимательОбъект.КонтактнаяИнформация.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйВидИнформации, ВидИнформации);
		КонецЦикла;
			
		ЗначениеВРеквизитФормы(ИндивидуальныйПредпринимательОбъект, "ФизическоеЛицо");
		
	КонецЕсли;
	
	Объект.РегистрационныйНомерПФР = ИсторияРегистрацийВОрганеПФР.РегистрационныйНомерПФР;
	
	Если ЗначениеЗаполнено(СвязанныеДанные) Тогда
		
		Если СвязанныеДанные.Свойство("Руководитель") Тогда
			ТекущийОбъект.ДополнительныеСвойства.Вставить("ДанныеРуководителя", СвязанныеДанные.Руководитель);
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущийОбъект.НаименованиеНалоговогоОргана = РегистрацияВНалоговомОргане.НаименованиеИФНС;
	
	Если ТекущийОбъект.РегистрацияВНалоговомОргане <> РегистрацияВНалоговомОргане.Ссылка
		ИЛИ НЕ ЗначениеЗаполнено(ТекущийОбъект.РегистрацияВНалоговомОргане) Тогда
		//Если основная регистрация заполнена, а данные для сохранения регистрации есть,
		//то нужно установить ссылку для поля РегистрацияВНалоговомОргане
		//В ПриЗаписи эта ссылка будет использована для сохранения регистрации в налоговом органе
		Если МожноСохранитьРегистрацию(ЭтотОбъект) Тогда
			
			Если ЗначениеЗаполнено(РегистрацияВНалоговомОргане.Ссылка) Тогда
				ТекущийОбъект.РегистрацияВНалоговомОргане = РегистрацияВНалоговомОргане.Ссылка;
			Иначе
				ТекущийОбъект.РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.ПолучитьСсылку();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	ПараметрыЗаписи.Вставить("ОсновнаяОрганизацияПередЗаписью",
		БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация"));
	
	ПараметрыЗаписи.Вставить("ИспользоватьНесколькоОрганизацийПередЗаписью", 
		Справочники.Организации.ИспользуетсяНесколькоОрганизаций());
	
	ПараметрыЗаписи.Вставить("ИспользуемыеСистемыНалогообложенияПередЗаписью", 
		РегистрыСведений.УчетнаяПолитикаОрганизаций.ПолучитьИспользуемыеСистемыНалогообложения());
		
	ПараметрыЗаписи.Вставить("ИспользуемыеВидыОрганизацийПередЗаписью", 
		Справочники.Организации.ИспользуемыеВидыОрганизаций());
		
	ПараметрыЗаписи.Вставить("ИспользуетсяПодсистемаУчетаЗарплатыИКадровПередЗаписью",
		УчетЗарплаты.ИспользуетсяПодсистемаУчетаЗарплатыИКадров());
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьДанныеРегистрацииВНалоговомОргане(ТекущийОбъект, Отказ);
	
	РедактированиеПериодическихСведений.ЗаписатьЗаписьПослеРедактированияВФорме(ЭтотОбъект, "ИсторияРегистрацийВОрганеПФР", ОрганизацияСсылка);
	
	Если ЭтоФизЛицо Тогда
		ФизлицоПриЗаписиНаСервере(Отказ, ТекущийОбъект);
	КонецЕсли;
	
	Если НЕ ТекущийОбъект.ОбособленноеПодразделение Тогда
		СозданаУчетнаяПолитика = СоздатьУчетнуюПолитику(ТекущийОбъект.Ссылка, СтруктураУчетнойПолитики);
	Иначе
		СозданаУчетнаяПолитика = Ложь;
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("СозданаУчетнаяПолитика", СозданаУчетнаяПолитика);
		
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Перем СозданаУчетнаяПолитика;
	
	Если Не ПараметрыЗаписи.Свойство("СозданаУчетнаяПолитика", СозданаУчетнаяПолитика) Тогда
		СозданаУчетнаяПолитика = Ложь;
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("ОсновнаяОрганизацияПослеЗаписи",
		БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация"));
	
	ПараметрыЗаписи.Вставить("ИспользоватьНесколькоОрганизацийПослеЗаписи", 
		Справочники.Организации.ИспользуетсяНесколькоОрганизаций());
		
	Если СозданаУчетнаяПолитика Тогда
		ПараметрыЗаписи.Вставить("ИспользуемыеСистемыНалогообложенияПослеЗаписи", 
			РегистрыСведений.УчетнаяПолитикаОрганизаций.ПолучитьИспользуемыеСистемыНалогообложения());
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("ИспользуемыеВидыОрганизацийПослеЗаписи", 
		Справочники.Организации.ИспользуемыеВидыОрганизаций());
	
	Если ЭтоФизЛицо Тогда
		ФизлицоПослеЗаписиНаСервере();
	КонецЕсли;
	
	ПрочитатьРегистрациюВНалоговомОргане();
	
	ПрочитатьРегистрацияВОрганеПФР();
	
	РезультатВыполнения = КалендарьБухгалтера.ЗапуститьЗаполнениеВФоне(УникальныйИдентификатор, ТекущийОбъект.Ссылка, СозданаУчетнаяПолитика);
	
	ПараметрыЗаписи.Вставить("ОповеститьОбИзмененииЗадачБухгалтера",
		РезультатВыполнения.ЗаданиеВыполнено);
	
	ПараметрыЗаписи.Вставить("ИспользуетсяПодсистемаУчетаЗарплатыИКадровПослеЗаписи",
		УчетЗарплаты.ИспользуетсяПодсистемаУчетаЗарплатыИКадров());
	
	Если ЗначениеЗаполнено(СвязанныеДанные) Тогда
		
		Если СвязанныеДанные.Свойство("Руководитель") Тогда
		ОбновитьИнформациюОбОтветственныхЛицах();
		КонецЕсли;
		
		СвязанныеДанные = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Перем ИспользоватьНесколькоОрганизацийПередЗаписью, ИспользоватьНесколькоОрганизацийПослеЗаписи;
	Перем ИспользуемыеСистемыНалогообложенияПередЗаписью, ИспользуемыеСистемыНалогообложенияПослеЗаписи;
	Перем ИспользуемыеВидыОрганизацийПередЗаписью, ИспользуемыеВидыОрганизацийПослеЗаписи;
	Перем ИспользуетсяПодсистемаУчетаЗарплатыИКадровПередЗаписью, ИспользуетсяПодсистемаУчетаЗарплатыИКадровПослеЗаписи;
	Перем ОсновнаяОрганизацияПередЗаписью, ОсновнаяОрганизацияПослеЗаписи;
	
	Если ЭтоФизЛицо Тогда
		ОповеститьОбИзмененииДанныхФизическогоЛица();
	КонецЕсли;
	
	ОбновитьИнтерфейс = Ложь;
	
	Если ПараметрыЗаписи.Свойство("ИспользоватьНесколькоОрганизацийПередЗаписью", ИспользоватьНесколькоОрганизацийПередЗаписью)
		И ПараметрыЗаписи.Свойство("ИспользоватьНесколькоОрганизацийПослеЗаписи", ИспользоватьНесколькоОрганизацийПослеЗаписи) Тогда
		
		Если ИспользоватьНесколькоОрганизацийПередЗаписью <> ИспользоватьНесколькоОрганизацийПослеЗаписи Тогда
			ОбновитьИнтерфейс = Истина;
		КонецЕслИ;
		
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ИспользуемыеСистемыНалогообложенияПередЗаписью", ИспользуемыеСистемыНалогообложенияПередЗаписью)
		И ПараметрыЗаписи.Свойство("ИспользуемыеСистемыНалогообложенияПослеЗаписи", ИспользуемыеСистемыНалогообложенияПослеЗаписи) Тогда
		
		Для Каждого КлючИЗначение Из ИспользуемыеСистемыНалогообложенияПередЗаписью Цикл
			СтароеЗначение = КлючИЗначение.Значение;
			НовоеЗначение = Неопределено;
			Если НЕ ИспользуемыеСистемыНалогообложенияПослеЗаписи.Свойство(КлючИЗначение.Ключ, НовоеЗначение)
				ИЛИ СтароеЗначение <> НовоеЗначение Тогда
				ОбновитьИнтерфейс = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ИспользуемыеВидыОрганизацийПередЗаписью", ИспользуемыеВидыОрганизацийПередЗаписью)
		И ПараметрыЗаписи.Свойство("ИспользуемыеВидыОрганизацийПослеЗаписи", ИспользуемыеВидыОрганизацийПослеЗаписи) Тогда
		
		Для Каждого КлючИЗначение Из ИспользуемыеВидыОрганизацийПередЗаписью Цикл
			СтароеЗначение = КлючИЗначение.Значение;
			НовоеЗначение = Неопределено;
			Если НЕ ИспользуемыеВидыОрганизацийПослеЗаписи.Свойство(КлючИЗначение.Ключ, НовоеЗначение)
				ИЛИ СтароеЗначение <> НовоеЗначение Тогда
				ОбновитьИнтерфейс = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ИспользуетсяПодсистемаУчетаЗарплатыИКадровПередЗаписью", ИспользуетсяПодсистемаУчетаЗарплатыИКадровПередЗаписью)
		И ПараметрыЗаписи.Свойство("ИспользуетсяПодсистемаУчетаЗарплатыИКадровПослеЗаписи", ИспользуетсяПодсистемаУчетаЗарплатыИКадровПослеЗаписи) Тогда
		
		Если ИспользуетсяПодсистемаУчетаЗарплатыИКадровПередЗаписью <> ИспользуетсяПодсистемаУчетаЗарплатыИКадровПослеЗаписи Тогда
			ОбновитьИнтерфейс = Истина;
		КонецЕслИ;
		
	КонецЕсли;
	
	Если ОбновитьИнтерфейс Тогда
		ОбновитьИнтерфейс();
	КонеЦесли;
	
	Оповестить("Запись_Организации", , Объект.Ссылка);
	
	ОповеститьОбИзменении(Тип("СправочникСсылка.ВидыНалоговИПлатежейВБюджет"));
	
	Если ЗначениеЗаполнено(Объект.РегистрацияВНалоговомОргане) Тогда
		Оповестить("ИзмененаРегистрацияВНалоговомОргане", Новый Структура("Ссылка", Объект.РегистрацияВНалоговомОргане), ЭтотОбъект);
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ОповеститьОбИзмененииЗадачБухгалтера") И ПараметрыЗаписи.ОповеститьОбИзмененииЗадачБухгалтера Тогда
		ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.ЗадачиБухгалтера"));
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ОсновнаяОрганизацияПередЗаписью", ОсновнаяОрганизацияПередЗаписью)
		И ПараметрыЗаписи.Свойство("ОсновнаяОрганизацияПослеЗаписи", ОсновнаяОрганизацияПослеЗаписи) Тогда
		
		Если ОсновнаяОрганизацияПередЗаписью <> ОсновнаяОрганизацияПослеЗаписи Тогда
			ПоказатьОповещениеПользователя(НСтр("ru = 'Установлена основная организация:'"),
				ПолучитьНавигационнуюСсылку(ОсновнаяОрганизацияПослеЗаписи), 
				ОсновнаяОрганизацияПослеЗаписи);
				
			Оповестить("ИзменениеОсновнойОрганизации", ОсновнаяОрганизацияПослеЗаписи);
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	Если Объект.ВидОбменаСКонтролирующимиОрганами = ПредопределенноеЗначение("Перечисление.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате") Тогда
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ПроверитьПараметрыПодключенияК1СОтчетности(Объект.Ссылка, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)

	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("СохранениеИзмененийВОрганизации");
	
	Если НЕ ЗначениеЗаполнено(ИсторияРегистрацийВОрганеПФР.Период) Тогда
		ИсторияРегистрацийВОрганеПФР.Период = Дата(1980,1,1);
	Иначе
		Если ИсторияРегистрацийВОрганеПФРПрежняя.РегистрационныйНомерПФР <> ИсторияРегистрацийВОрганеПФР.РегистрационныйНомерПФР Тогда
			Если ЗначениеЗаполнено(ИсторияРегистрацийВОрганеПФРПрежняя.РегистрационныйНомерПФР) Тогда
				ИсторияРегистрацийВОрганеПФР.Период = НачалоКвартала(ТекущаяДата());
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	РедактированиеПериодическихСведений.ПроверитьЗаписьВФорме(ЭтотОбъект, "ИсторияРегистрацийВОрганеПФР", ОрганизацияСсылка, Отказ);
	
	Если ЭтоФизЛицо Тогда
		Если НЕ ЗначениеЗаполнено(ФИОФизическихЛиц.Фамилия) 
				И НЕ ЗначениеЗаполнено(ФИОФизическихЛиц.Имя) 
				И НЕ ЗначениеЗаполнено(ФИОФизическихЛиц.Отчество) Тогда
				ТекстСообщения = НСтр("ru = 'Не заполнено ФИО'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ,	"Фамилия", "ФИОФизическихЛиц", Отказ);
		КонецЕсли;
		СтруктураВедущихОбъектов = Новый Структура("Физлицо", Объект.ИндивидуальныйПредприниматель);
		Если Не РедактированиеПериодическихСведенийКлиентСервер.ЗаполненыЗначенияПоУмолчаниюПоСтруктуре(ЭтотОбъект, "ДокументыФизическихЛиц", СтруктураВедущихОбъектов) Тогда
			Если НЕ ЗначениеЗаполнено(ДокументыФизическихЛиц.ДатаВыдачи) Тогда
				ТекстСообщения = НСтр("ru = 'Документ: не заполнено поле ""Дата выдачи""'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ,	"ДатаВыдачи", "ДокументыФизическихЛиц", Отказ);
			Иначе
				РедактированиеПериодическихСведений.ПроверитьЗаписьВФорме(ЭтотОбъект, "ДокументыФизическихЛиц", Объект.ИндивидуальныйПредприниматель, Отказ);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Объект.КодНалоговогоОргана)
			И Не ЗначениеЗаполнено(Объект.КПП) Тогда
			ТекстСообщения = НСтр("ru = 'Поле ""КПП"" не заполнено'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.КПП", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если ОтчетностьПодписываетПредставитель = 1
		И НЕ ЗначениеЗаполнено(РегистрацияВНалоговомОргане.Представитель) Тогда
		
		ТекстСообщения = НСтр("ru = 'Заполните сведения о представителе'"); 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ПредставлениеПредставителя",, Отказ);
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПолейФормы

&НаКлиенте
Процедура ПолеПоискаИННПриИзменении(Элемент)
	
	Если ЗаполнятьРеквизитыПоИНН 
		И ЗначениеЗаполнено(ПолеПоискаИНН)
		И НЕ ЗначениеЗаполнено(Объект.Наименование)
		И НЕ ЗначениеЗаполнено(Объект.НаименованиеПолное)
		И (НЕ ЗначениеЗаполнено(ЮрАдресОрганизации)
		ИЛИ ЮрАдресОрганизации = УправлениеКонтактнойИнформациейКлиентСерверБП.ПредставлениеПустойГиперссылки()) Тогда
		
		ОписаниеОшибки = "";
		ЗаполнитьРеквизитыПоИНННаСервере(ОписаниеОшибки);
		ЗаполнятьРеквизитыПоИНН = Ложь;
		ПодключитьОбработчикОжидания("Подключаемый_РазрешитьЗаполнениеРеквизитовПоИНН", 0.2, Истина);

		// Обработка ошибок
		Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
			Если ОписаниеОшибки = "НеУказаныПараметрыАутентификации" Тогда
				
				ТекстВопроса = НСтр("ru='Для автоматического заполнения реквизитов
				|необходимо подключиться к Интернет-поддержке пользователей.
				|Подключиться сейчас?'");
				ПараметрыВопроса = Новый Структура("ВызовПослеПодключения", "ЗаполнитьРеквизитыПоИНННаСервере");
				ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержку", ЭтотОбъект, ПараметрыВопроса);
				ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
				
			Иначе
				ПоказатьПредупреждение(, ОписаниеОшибки);
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоФизЛицо Тогда
			ФизическоеЛицоФИОПриИзменении();
			Объект.КПП = "";
			Если ЗаблокироватьФизическоеЛицоПриРедактировании() Тогда
				ФизическоеЛицо.ИНН = Объект.ИНН;
				ИзмененыДанныеФизическогоЛица = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеСокращенноеПриИзменении(Элемент)
	
	ПриИзмененииСокращенногоНаименования();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеПриИзменении(Элемент)
	
	УстановитьСписокВыбораВариантаНаименованияДляПечатныхФорм(ЭтотОбъект);
	
	НаименованиеПолное	= Объект.НаименованиеПолное;

КонецПроцедуры

&НаКлиенте
Процедура ГоловнаяОрганизацияПриИзменении(Элемент)
	
	ГоловнаяОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ГоловнаяОрганизацияПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ГоловнаяОрганизация) Тогда
		Объект.ИНН = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ГоловнаяОрганизация, "ИНН");
	Иначе
		Объект.ИНН = "";
	КонецЕсли;
	
	УстановитьРегистрациюВНалоговомОргане();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИННПриИзменении(Элемент)
	
	Если НЕ Объект.ОбособленноеПодразделение 
		И ЗначениеЗаполнено(Объект.ИНН)
		И НЕ ЗначениеЗаполнено(Объект.Наименование)
		И НЕ ЗначениеЗаполнено(Объект.НаименованиеПолное)
		И (НЕ ЗначениеЗаполнено(ЮрАдресОрганизации)
		ИЛИ ЮрАдресОрганизации = УправлениеКонтактнойИнформациейКлиентСерверБП.ПредставлениеПустойГиперссылки()) Тогда
		
		ЗаполнитьРеквизитыПоИНННаСервере();
		
		Если ЭтоФизЛицо Тогда
			ФизическоеЛицоФИОПриИзменении();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоФизЛицо Тогда
		Объект.КПП = "";
		Если ЗаблокироватьФизическоеЛицоПриРедактировании() Тогда
			ФизическоеЛицо.ИНН = Объект.ИНН;
			ИзмененыДанныеФизическогоЛица = Истина;
		КонецЕсли;
	Иначе
		Если СтрДлина(Объект.ИНН) >= 4 
			И ПустаяСтрока(Объект.КПП) Тогда
			Объект.КПП = Лев(Объект.ИНН, 4) + "01001";
			ПриИзмененииКПП();
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнятьРеквизитыПоИНН = Ложь;
	ПодключитьОбработчикОжидания("Подключаемый_РазрешитьЗаполнениеРеквизитовПоИНН", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КПППриИзменении(Элемент)
	
	ПриИзмененииКПП();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЮрАдресОрганизацииНажатие(Элемент, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиентБП.ГиперссылкаНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
	ИзмененыДанныеФизическогоЛица = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ФактАдресОрганизацииНажатие(Элемент, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиентБП.ГиперссылкаНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
	ИзмененыДанныеФизическогоЛица = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПочтовыйАдресОрганизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.ПредставлениеНачалоВыбора(ЭтотОбъект, Элемент, Модифицированность, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПочтовыйАдресОрганизацииПриИзменении(Элемент)
	
	Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонОрганизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.ПредставлениеНачалоВыбора(ЭтотОбъект, Элемент, Модифицированность, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонОрганизацииПриИзменении(Элемент)
	
	Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ФаксОрганизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.ПредставлениеНачалоВыбора(ЭтотОбъект, Элемент, Модифицированность, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ФаксОрганизацииПриИзменении(Элемент)
	
	Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура EmailОрганизацииПриИзменении(Элемент)
	
	Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура EmailОрганизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.ПредставлениеНачалоВыбора(ЭтотОбъект, Элемент, Модифицированность, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЮрФактАдресаСовпадаютПриИзменении(Элемент)
	
	Если ЮрФактАдресаСовпадают Тогда
		СкопироватьПолеКонтактнойИнформации("ФактАдресОрганизации", "ЮрАдресОрганизации");
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЮрПочтовыйАдресаСовпадаютПриИзменении(Элемент)
	
	Если ЮрПочтовыйАдресаСовпадают Тогда
		СкопироватьПолеКонтактнойИнформации("ПочтовыйАдресОрганизации", "ЮрАдресОрганизации");
		
		Если ПочтовыйАдресОрганизации = УправлениеКонтактнойИнформациейКлиентСерверБП.ПредставлениеПустойГиперссылки() Тогда
			ПочтовыйАдресОрганизации = "";
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеРуководителяНажатие(Элемент, СтандартнаяОбработка)
	Перем ОтветственноеЛицо;
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОтветственноеЛицо	= ПредопределенноеЗначение("Перечисление.ОтветственныеЛицаОрганизаций.Руководитель");
	
	ЗначенияЗаполнения	= Новый Структура("СтруктурнаяЕдиница,ОтветственноеЛицо",
		Объект.Ссылка,
		ОтветственноеЛицо);
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ПредставлениеРуководителяНажатиеЗавершение", ЭтотОбъект);
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ",					РуководительКлючЗаписи);
	ПараметрыФормы.Вставить("ЗначенияЗаполнения",	ЗначенияЗаполнения);
	
	ОткрытьФорму("РегистрСведений.ОтветственныеЛицаОрганизаций.ФормаЗаписи", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеРуководителяНажатиеЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеГлавногоБухгалтераНажатие(Элемент, СтандартнаяОбработка)
	Перем ОтветственноеЛицо;
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОтветственноеЛицо	= ПредопределенноеЗначение("Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер");
	
	ЗначенияЗаполнения	= Новый Структура("СтруктурнаяЕдиница,ОтветственноеЛицо",
		Объект.Ссылка,
		ОтветственноеЛицо);
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ПредставлениеГлавногоБухгалтераНажатиеЗавершение", ЭтотОбъект);
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ",					ГлавныйБухгалтерКлючЗаписи);
	ПараметрыФормы.Вставить("ЗначенияЗаполнения",	ЗначенияЗаполнения);
	
	ОткрытьФорму("РегистрСведений.ОтветственныеЛицаОрганизаций.ФормаЗаписи", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеГлавногоБухгалтераНажатиеЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеКассираНажатие(Элемент, СтандартнаяОбработка)
	Перем ОтветственноеЛицо;
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОтветственноеЛицо	= ПредопределенноеЗначение("Перечисление.ОтветственныеЛицаОрганизаций.Кассир");
	
	ЗначенияЗаполнения	= Новый Структура("СтруктурнаяЕдиница,ОтветственноеЛицо",
		Объект.Ссылка,
		ОтветственноеЛицо);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ",					КассирКлючЗаписи);
	ПараметрыФормы.Вставить("ЗначенияЗаполнения",	ЗначенияЗаполнения);
	
	ОткрытьФорму("РегистрСведений.ОтветственныеЛицаОрганизаций.ФормаЗаписи", ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ИПРегистрационныйНомерПФРПриИзменении(Элемент)
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура РегистрацияВОрганеПФРПриИзменении(Элемент)
	
	Объект.РегистрационныйНомерПФР = ИсторияРегистрацийВОрганеПФР.РегистрационныйНомерПФР;
	Объект.КодОрганаПФР = Лев(СокрЛ(Объект.РегистрационныйНомерПФР), 7);
	РедактированиеПериодическихСведенийКлиентСервер.ОбновитьОтображениеПолейВвода(ЭтотОбъект, "ИсторияРегистрацийВОрганеПФР", ОрганизацияСсылка);
	КодОрганаПФРПриИзмененииНаСервере();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИПРегистрационныйНомерФССПриИзменении(Элемент)
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура РегистрационныйНомерФССПриИзменении(Элемент)
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура КодОКОПФНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	КомментарийВыбора = НСтр("ru='Внимание! С 2013 г.введен в действие новый классификатор ОКОПФ
	                             |(приказ Росстандарта от 16.10.2012 № 505-ст).'");
	
	ВыбратьКодИзКлассификатора("ОКОПФ", КомментарийВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура КодОКОПФПриИзменении(Элемент)
	
	Объект.НаименованиеОКОПФ = ОКОПФ.Получить(Объект.КодОКОПФ);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КодОКФСПриИзменении(Элемент)
	
	Объект.НаименованиеОКФС = ОКФС.Получить(Объект.КодОКФС);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КодОКФСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ВыбратьКодИзКлассификатора("ОКФС");
	
КонецПроцедуры

&НаКлиенте
Процедура КодОКВЭДПриИзменении(Элемент)
	
	// Исправление возможной опечатки в разделителе
	Объект.КодОКВЭД = СтрЗаменить(Объект.КодОКВЭД, ",", ".");
	
	Объект.НаименованиеОКВЭД = ОКВЭД.Получить(Объект.КодОКВЭД);
	
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура КодОКВЭДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбратьКодИзКлассификатора("ОКВЭД");
	
КонецПроцедуры

&НаКлиенте
Процедура КодПоОКПОПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИПИспользуетТрудНаемныхРаботниковПриИзменении(Элемент)
	
	Если НЕ Объект.ИПИспользуетТрудНаемныхРаботников Тогда
		Объект.РегистрационныйНомерПФР = "";
		ИсторияРегистрацийВОрганеПФР.РегистрационныйНомерПФР = "";
		Объект.РегистрационныйНомерТФОМС = "";
		Объект.РегистрационныйНомерФСС = "";
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКПП()
	
	Если СтрДлина(Объект.КПП) >= 4 
		И ПустаяСтрока(Объект.КодНалоговогоОргана) Тогда
		
		Объект.КодНалоговогоОргана = Лев(Объект.КПП, 4);
		КодНалоговогоОрганаПриИзмененииНаСервере();
	Иначе
		УстановитьРегистрациюВНалоговомОргане();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КрупнейшийНалогоплательщикПриИзменении(Элемент)
	
	Элементы.КодНалоговогоОрганаПолучателя.Доступность = Объект.КрупнейшийНалогоплательщик;
	
	Если НЕ Объект.КрупнейшийНалогоплательщик Тогда
		Объект.КодНалоговогоОрганаПолучателя = "";
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ФИОФизическихЛицФамилияПриИзменении(Элемент)
	
	ФизическоеЛицоФИОПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ФИОФизическихЛицИмяПриИзменении(Элемент)
	
	ФизическоеЛицоФИОПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ФИОФизическихЛицОтчествоПриИзменении(Элемент)
	
	ФизическоеЛицоФИОПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ФизическоеЛицоДатаРожденияПриИзменении(Элемент)
	
	Если ЗаблокироватьФизическоеЛицоПриРедактировании() Тогда
		ИзмененыДанныеФизическогоЛица = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФизическоеЛицоМестоРожденияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗаблокироватьФизическоеЛицоПриРедактировании() Тогда
		ИзмененыДанныеФизическогоЛица = Истина;
		СотрудникиКлиент.ФизическиеЛицаМестоРожденияНачалоВыбора(ЭтотОбъект, Элемент, СтандартнаяОбработка, ФизическоеЛицо.МестоРождения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыФизическихЛицВидДокументаПриИзменении(Элемент)
	
	ДокументыФизическихЛицПриИзмененииДанных(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыФизическихЛицДатаВыдачиПриИзменении(Элемент)
	
	ДокументыФизическихЛиц.Период = ДокументыФизическихЛиц.ДатаВыдачи;
	
	ДокументыФизическихЛицПриИзмененииДанных(ЭтотОбъект);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыФизическихЛицСерияПриИзменении(Элемент)
	
	ДокументыФизическихЛицПриИзмененииДанных(ЭтотОбъект);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыФизическихЛицНомерПриИзменении(Элемент)
	
	ДокументыФизическихЛицПриИзмененииДанных(ЭтотОбъект);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыФизическихЛицКемВыданПриИзменении(Элемент)
	
	ДокументыФизическихЛицПриИзмененииДанных(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыФизическихЛицКодПодразделенияПриИзменении(Элемент)
	
	ДокументыФизическихЛицПриИзмененииДанных(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыФизическихЛицСрокДействияПриИзменении(Элемент)
	
	ДокументыФизическихЛицПриИзмененииДанных(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КодНалоговогоОрганаПриИзменении(Элемент)
	
	КодНалоговогоОрганаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрацияВНалоговомОрганеКодПоОКАТОПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КодОрганаПФРПриИзменении(Элемент)
	
	КодОрганаПФРПриИзмененииНаСервере();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КодПодчиненностиФССПриИзменении(Элемент)
	
	КодОрганаФССПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ИностраннаяОрганизацияПриИзменении(Элемент)
	
	Если НЕ Объект.ИностраннаяОрганизация Тогда
		Объект.НаименованиеИнострОрганизации		= "";
		Объект.СтранаРегистрации					= Неопределено;
		Объект.СтранаПостоянногоМестонахождения		= Неопределено;
		Объект.КодВСтранеРегистрации				= "";
		УчредительныйАдресИностраннойОрганизации	= "";
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СтранаРегистрацииПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.СтранаПостоянногоМестонахождения) Тогда
		Объект.СтранаПостоянногоМестонахождения	= Объект.СтранаРегистрации;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчредительныйАдресИностраннойОрганизацииПриИзменении(Элемент)
	
	Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура УчредительныйАдресИностраннойОрганизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.ПредставлениеНачалоВыбора(ЭтотОбъект, Элемент, Модифицированность, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрацияВНалоговомОрганеНаименованиеИФНСПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетностьПодписываетПредставительПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
	Если ОтчетностьПодписываетПредставитель = 0 Тогда
		РегистрацияВНалоговомОргане.Представитель                   = Неопределено;
		РегистрацияВНалоговомОргане.УполномоченноеЛицоПредставителя = "";
		РегистрацияВНалоговомОргане.ДокументПредставителя           = "";
		РегистрацияВНалоговомОргане.Доверенность                    = "";
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПредставителяНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЗначенияЗаполнения = Новый Структура("Владелец,Представитель,УполномоченноеЛицоПредставителя,ДокументПредставителя,Доверенность");
	ЗаполнитьЗначенияСвойств(ЗначенияЗаполнения, РегистрацияВНалоговомОргане);
	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Справочник.РегистрацииВНалоговомОргане.Форма.ФормаПредставителя", ПараметрыФормы, ЭтотОбъект, КлючУникальности);
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрацияВНалоговомОрганеНаименованиеПриИзменении(Элемент)
	
	Модифицированность = Истина;
	НалоговыйОрганУстановитьЗаголовок(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрацияВНалоговомОрганеКодПоОКТМОПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеТерриториальногоОрганаПФРПриИзменении(Элемент)
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеТерриториальногоОрганаФССПриИзменении(Элемент)
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеИнострОрганизацииПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияРегистрацийВНалоговомОрганеНажатие(Элемент)
	
	Если НЕ ЗначениеЗаполнено(РегистрацияВНалоговомОргане.Ссылка) Тогда
		
		ЗаписатьРегистрациюВНалоговомОргане();
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("НаборЗаписей, ВедущийОбъект, ВладелецРегистрацииВНалоговомОргане, ТолькоПросмотр", 
				ИсторияРегистрацийВНалоговомОрганеНаборЗаписей, 
				Объект.Ссылка,
				ВладелецРегистрации(Объект),
				ТолькоПросмотр);
	
	ОткрытьФорму("РегистрСведений.ИсторияРегистрацийВНалоговомОргане.Форма.РедактированиеИстории", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗагрузитьКартинкуЛоготип(Команда)
	
	ЗагрузитьКартинкуЛоготипФаксимиле("ФайлЛоготип");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзПрисоединенныхФайловЛоготип(Команда)
	
	ВыбратьКартинкуИзПрисоединенныхФайлов("ФайлЛоготип");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЛоготип(Команда)
	
	ОчиститьКартинкуЛоготипФаксимиле("ФайлЛоготип");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКартинкуФаксимиле(Команда)
	
	ЗагрузитьКартинкуЛоготипФаксимиле("ФайлФаксимильнаяПечать");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзПрисоединенныхФайловФаксимиле(Команда)
	
	ВыбратьКартинкуИзПрисоединенныхФайлов("ФайлФаксимильнаяПечать");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФаксимиле(Команда)
	
	ОчиститьКартинкуЛоготипФаксимиле("ФайлФаксимильнаяПечать");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьАдресныйКлассификатор(Команда)
	
	АдресныйКлассификаторКлиент.ЗагрузитьАдресныйКлассификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявлениеНаПодключениеОткрытьМастер(Команда)
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
		
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьФормуМастераЗаявленияНаПодключение(Объект.Ссылка, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрацияВОрганеПФРИстория(Команда)
	РедактированиеПериодическихСведенийКлиент.ОткрытьИсторию("ИсторияРегистрацийВОрганеПФР", ОрганизацияСсылка, ЭтотОбъект, ТолькоПросмотр);
КонецПроцедуры

&НаКлиенте
Процедура ДокументыФизическихЛицИстория(Команда)
	
	СотрудникиКлиент.ОткрытьФормуРедактированияИстории("ДокументыФизическихЛиц", Объект.ИндивидуальныйПредприниматель, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоИНН(Команда)
	
	Если НЕ ЗаполнятьРеквизитыПоИНН Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ОбособленноеПодразделение Тогда
		ПоказатьПредупреждение(, НСтр("ru='Реквизиты обособленных подразделений заполняются вручную.'"));
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ИНН) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Поле ""ИНН"" не заполнено'"));
		ТекущийЭлемент = Элементы.ИНН;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Наименование) 
		ИЛИ (ЗначениеЗаполнено(ЮрАдресОрганизации) 
		И ЮрАдресОрганизации <> УправлениеКонтактнойИнформациейКлиентСерверБП.ПредставлениеПустойГиперссылки()) Тогда
		ТекстВопроса = НСтр("ru='Перезаполнить текущие реквизиты?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьРеквизитыПоИННЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ВыполнитьЗаполнениеРеквизитовПоИНН();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоДаннымЕГР(Команда)
	
	ЗаполнитьРеквизитыПоДаннымЕГРНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыНалоговогоОрганаПоКоду(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.КодНалоговогоОргана) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Поле ""Код инспекции"" не заполнено'"));
		ТекущийЭлемент = Элементы.КодНалоговогоОргана;
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗаполнениеСведенийОНалоговойИнспекции();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыФССПоКоду(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.КодПодчиненностиФСС) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Поле ""Код подчиненности"" не заполнено'"));
		ТекущийЭлемент = Элементы.КодПодчиненностиФСС;
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗаполнениеСведенийОбОтделенииФСС();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПФРПоКоду(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.КодОрганаПФР) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Поле ""Код органа ПФР"" не заполнено'"));
		ТекущийЭлемент = Элементы.КодОрганаПФР;
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗаполнениеСведенийОбОтделенииПФР();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();


	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КПП");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ЭтоФизЛицо", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.КодНалоговогоОргана", ВидСравненияКомпоновкиДанных.Заполнено);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.КПП", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

КонецПроцедуры

&НаСервереБезКонтекста
Функция УплачиватьДобровольныеВзносыВФСС(Организация)
	
	УплачиватьДобровольныеВзносыВФСС =  ПолучитьФункциональнуюОпцию("УплачиватьДобровольныеВзносыВФСС", Новый Структура("Организация", Организация));
	
	Возврат УплачиватьДобровольныеВзносыВФСС;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	// Группа Паспорт
	Форма.Элементы.ФизическоеЛицоМестоРождения.ТолькоПросмотр = Форма.ТолькоПросмотр;
	ПаспортУстановитьЗаголовок(Форма);
	
	// Группа Адрес и телефоны
	Если Форма.ЮрФактАдресаСовпадают Тогда
		Элементы.ГруппаФактАдресОрганизации.ТекущаяСтраница	= Элементы.СтраницаФактАдресОрганизацииСовпадает;
	Иначе
		Элементы.ГруппаФактАдресОрганизации.ТекущаяСтраница	= Элементы.СтраницаФактАдресОрганизации;
	КонецЕсли;
	
	Если Форма.ЮрПочтовыйАдресаСовпадают Тогда
		Элементы.ГруппаПочтовыйАдресОрганизации.ТекущаяСтраница	= Элементы.СтраницаПочтовыйАдресОрганизацииСовпадает;
	Иначе
		Элементы.ГруппаПочтовыйАдресОрганизации.ТекущаяСтраница	= Элементы.СтраницаПочтовыйАдресОрганизации;
	КонецЕсли;
	
	Если ПустаяСтрока(Форма.ФактАдресОрганизации)
		ИЛИ Форма.ФактАдресОрганизации = УправлениеКонтактнойИнформациейКлиентСерверБП.ПредставлениеПустойГиперссылки() Тогда
			Форма.ФактАдресОрганизацииСовпадает = НСтр("ru = '<не заполнен>'");
	Иначе
		Форма.ФактАдресОрганизацииСовпадает = Форма.ФактАдресОрганизации;	
	КонецЕсли;
	
	Если ПустаяСтрока(Форма.ПочтовыйАдресОрганизации)
		ИЛИ Форма.ПочтовыйАдресОрганизации = УправлениеКонтактнойИнформациейКлиентСерверБП.ПредставлениеПустойГиперссылки() Тогда
			Форма.ПочтовыйАдресОрганизацииСовпадает = НСтр("ru = '<не заполнен>'");
	Иначе
		Форма.ПочтовыйАдресОрганизацииСовпадает = Форма.ПочтовыйАдресОрганизации;	
	КонецЕсли;
	
	ДоступностьКонтактнойИнформации = НЕ Форма.ТолькоПросмотр;
	
	Элементы.ЮрАдресОрганизации.Доступность = ДоступностьКонтактнойИнформации;
	Элементы.ФактАдресОрганизации.Доступность = ДоступностьКонтактнойИнформации;
	Элементы.ФактАдресОрганизацииСовпадает.Доступность = ДоступностьКонтактнойИнформации;
	Элементы.ЮрФактАдресаСовпадают.Доступность = ДоступностьКонтактнойИнформации;
	Элементы.НадписьПочтовыйАдрес.Доступность = ДоступностьКонтактнойИнформации;
	Элементы.ЮрПочтовыйАдресаСовпадают.Доступность = ДоступностьКонтактнойИнформации;
	Элементы.ПочтовыйАдресОрганизацииСовпадает.Доступность = ДоступностьКонтактнойИнформации;
	Элементы.ПочтовыйАдресОрганизации.ТолькоПросмотр = Форма.ТолькоПросмотр;
	Элементы.ТелефонОрганизации.ТолькоПросмотр = Форма.ТолькоПросмотр;
	Элементы.ФаксОрганизации.ТолькоПросмотр = Форма.ТолькоПросмотр;
	Элементы.EmailОрганизации.ТолькоПросмотр = Форма.ТолькоПросмотр;
	Элементы.ДругаяИнформацияОрганизации.ТолькоПросмотр = Форма.ТолькоПросмотр;
	
	АдресИТелефонУстановитьЗаголовок(Форма);
	
	// Группа Подписи
	ПодписиУстановитьЗаголовок(Форма);
	
	// Группа Налоговая инспекция
	КодНалоговогоОрганаУказан = ЗначениеЗаполнено(Объект.КодНалоговогоОргана);
	
	Элементы.РегистрацияВНалоговомОрганеНаименование.Доступность = КодНалоговогоОрганаУказан;
	Элементы.РегистрацияВНалоговомОрганеНаименованиеИФНС.Доступность = КодНалоговогоОрганаУказан;
	Элементы.ПлатежныеРеквизитыФНСПредставление.Доступность    = КодНалоговогоОрганаУказан И НЕ Форма.ТолькоПросмотр;
	Элементы.РегистрацияВНалоговомОрганеКодПоОКТМО.Доступность = КодНалоговогоОрганаУказан;
	Элементы.РегистрацияВНалоговомОрганеКодПоОКАТО.Доступность = КодНалоговогоОрганаУказан;
	Элементы.ГруппаПодписаниеОтчетности.Доступность            = КодНалоговогоОрганаУказан И НЕ Форма.ТолькоПросмотр;
	
	Элементы.РегистрацияВНалоговомОрганеНаименование.ТолькоПросмотр = Форма.ТолькоПросмотр;
	Элементы.РегистрацияВНалоговомОрганеНаименованиеИФНС.ТолькоПросмотр = Форма.ТолькоПросмотр;
	Элементы.РегистрацияВНалоговомОрганеКодПоОКТМО.ТолькоПросмотр = Форма.ТолькоПросмотр;
	Элементы.РегистрацияВНалоговомОрганеКодПоОКАТО.ТолькоПросмотр = Форма.ТолькоПросмотр;
	
	//Группа элементов представителя для предоставления отчетности
	Если Форма.ОтчетностьПодписываетПредставитель = 1 Тогда
		Элементы.ГруппаПредставлениеПредставителяСтраницы.ТекущаяСтраница = Элементы.ГруппаПредставительГиперссылка;
	Иначе
		Элементы.ГруппаПредставлениеПредставителяСтраницы.ТекущаяСтраница = Элементы.ГруппаПредставительНеВыбран;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Форма.РегистрацияВНалоговомОргане.Представитель) Тогда
		Форма.ПредставлениеПредставителя = НСтр("ru = 'Заполнить'");
	ИначеЕсли ТипЗнч(Форма.РегистрацияВНалоговомОргане.Представитель) = Тип("СправочникСсылка.ФизическиеЛица")
		ИЛИ НЕ ЗначениеЗаполнено(Форма.РегистрацияВНалоговомОргане.УполномоченноеЛицоПредставителя) Тогда
		Форма.ПредставлениеПредставителя = Форма.РегистрацияВНалоговомОргане.Представитель;
	ИначеЕсли ТипЗнч(Форма.РегистрацияВНалоговомОргане.Представитель) = Тип("СправочникСсылка.Контрагенты") Тогда
		Форма.ПредставлениеПредставителя = Форма.РегистрацияВНалоговомОргане.УполномоченноеЛицоПредставителя + " (" + Форма.РегистрацияВНалоговомОргане.Представитель + ")";
	КонецЕсли;
	
	НалоговыйОрганУстановитьЗаголовок(Форма);
	
	// Группа Пенсионный фонд
	КодОрганаПФРУказан = ЗначениеЗаполнено(Объект.КодОрганаПФР);
	Элементы.ПлатежныеРеквизитыПФРПредставление.Доступность = КодОрганаПФРУказан И НЕ Форма.ТолькоПросмотр;
	Элементы.НаименованиеТерриториальногоОрганаПФР.Доступность = КодОрганаПФРУказан;
	
	Элементы.НаименованиеТерриториальногоОрганаПФР.ТолькоПросмотр = Форма.ТолькоПросмотр;
	
	ПенсионныйФондУстановитьЗаголовок(Форма);
	
	// Группа Фонд социального страхования
	ГруппаФССВидимость = НЕ Форма.ЭтоФизЛицо ИЛИ (Форма.ЭтоФизЛицо И (Объект.ИПИспользуетТрудНаемныхРаботников ИЛИ Форма.УплачиватьДобровольныеВзносыВФСС));
	
	Элементы.ГруппаФСС.Видимость = ГруппаФССВидимость;
	КодПодчиненностиФССУказан = ЗначениеЗаполнено(Объект.КодПодчиненностиФСС);
	Элементы.ПлатежныеРеквизитыФССПредставление.Доступность = КодПодчиненностиФССУказан И НЕ Форма.ТолькоПросмотр;
	Элементы.НаименованиеТерриториальногоОрганаФСС.Доступность = КодПодчиненностиФССУказан;
	
	Элементы.НаименованиеТерриториальногоОрганаФСС.ТолькоПросмотр = Форма.ТолькоПросмотр;
	
	ФондСоциальногоСтрахованияУстановитьЗаголовок(Форма);
	
	// Рег номера за сотрудников
	ВидимостьФондов = НЕ Форма.ЭтоФизЛицо ИЛИ (Форма.ЭтоФизЛицо И Объект.ИПИспользуетТрудНаемныхРаботников);
	Элементы.РегистрационныйНомерПФР.Видимость				= ВидимостьФондов;
	Элементы.РегистрационныйНомерТФОМС.Видимость			= ВидимостьФондов;
	Элементы.РегистрационныйНомерФСС.Видимость				= ВидимостьФондов;
	Элементы.РегистрацияВОрганеПФРИстория.Видимость			= ВидимостьФондов;
	
	// Группа Коды статистики
	КодыУстановитьЗаголовок(Форма);
	
	// Группа Крупнейший налогоплательщик
	КрупнейшийНалогоплательщикУстановитьЗаголовок(Форма);
	
	// Группа Иностранная организация
	Элементы.ГруппаИностраннаяОрганизация.Видимость			= НЕ Форма.ЭтоФизЛицо И Объект.ИностраннаяОрганизация;
	ИностраннаяОрганизацияУстановитьЗаголовок(Форма);
	
	ДоступностьИсторииРегистрацииВНалоговомОргане = МожноСохранитьРегистрацию(Форма) И ЗначениеЗаполнено(Объект.Ссылка);
	Элементы.ИсторияРегистрацийВНалоговомОрганеКПП.Доступность                  = ДоступностьИсторииРегистрацииВНалоговомОргане;
	Элементы.ИсторияРегистрацийВНалоговомОрганеКодНалоговогоОргана.Доступность = ДоступностьИсторииРегистрацииВНалоговомОргане;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура АдресИТелефонУстановитьЗаголовок(Форма)
	
	АдресЗаголовок = НСтр("ru='Адрес и телефон'");
	Если ЗначениеЗаполнено(Форма.ЮрАдресОрганизации) И НЕ Форма.ЮрАдресОрганизации = УправлениеКонтактнойИнформациейКлиентСерверБП.ПредставлениеПустойГиперссылки() Тогда
		АдресЗаголовок = АдресЗаголовок + ": " + Форма.ЮрАдресОрганизации;
		Если ЗначениеЗаполнено(Форма.ТелефонОрганизации) Тогда
			АдресЗаголовок = АдресЗаголовок + НСтр("ru=', тел: '") + Форма.ТелефонОрганизации;
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Форма.ТелефонОрганизации) Тогда
			АдресЗаголовок = АдресЗаголовок + НСтр("ru=': тел: '") + Форма.ТелефонОрганизации;
		КонецЕсли;
	КонецЕсли;

	УстановитьЗаголовокГруппы(Форма, "ГруппаКонтактнаяИнформация", АдресЗаголовок);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПаспортУстановитьЗаголовок(Форма)
	
	Если Форма.ЭтоФизЛицо Тогда
		ПаспортЗаголовок = НСтр("ru='Паспорт'");
		Если ЗначениеЗаполнено(Форма.ДокументыФизическихЛиц.Серия)
				ИЛИ ЗначениеЗаполнено(Форма.ДокументыФизическихЛиц.Номер)
				ИЛИ ЗначениеЗаполнено(Форма.ДокументыФизическихЛиц.ДатаВыдачи) Тогда
			ПаспортЗаголовок = ПаспортЗаголовок + ": " + Форма.ДокументыФизическихЛиц.Серия + " " + Форма.ДокументыФизическихЛиц.Номер
														+ НСтр("ru=' выдан '") + Формат(Форма.ДокументыФизическихЛиц.ДатаВыдачи,"ДФ=dd.MM.yyyy");
		КонецЕсли;
		УстановитьЗаголовокГруппы(Форма, "ГруппаПаспорт", ПаспортЗаголовок);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПодписиУстановитьЗаголовок(Форма)
	
	Если НЕ Форма.ЭтоФизЛицо Тогда
		ПодписиЗаголовок = НСтр("ru='Подписи'");
		Если ЗначениеЗаполнено(Форма.Руководитель) И НЕ Форма.Руководитель = НСтр("ru='Создать'")
				ИЛИ ЗначениеЗаполнено(Форма.ГлавныйБухгалтер) И НЕ Форма.ГлавныйБухгалтер = НСтр("ru='Создать'") Тогда
			ПодписиЗаголовок = ПодписиЗаголовок + ": ";
			Если ЗначениеЗаполнено(Форма.Руководитель) И НЕ Форма.Руководитель = НСтр("ru='Создать'") Тогда
				ПодписиЗаголовок = ПодписиЗаголовок + Форма.Руководитель;
			КонецЕсли;
			Если ЗначениеЗаполнено(Форма.ГлавныйБухгалтер) И НЕ Форма.ГлавныйБухгалтер = НСтр("ru='Создать'") Тогда
				ПодписиЗаголовок = ПодписиЗаголовок + ", " + Форма.ГлавныйБухгалтер;
			КонецЕсли;
		КонецЕсли;
		УстановитьЗаголовокГруппы(Форма, "ГруппаПодписи", ПодписиЗаголовок);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НалоговыйОрганУстановитьЗаголовок(Форма)
	
	НалоговыйОрганЗаголовок = НСтр("ru='Налоговая инспекция'");
	Если ЗначениеЗаполнено(Форма.Объект.КодНалоговогоОргана) Тогда
		НалоговыйОрганЗаголовок = НалоговыйОрганЗаголовок + ": " + Форма.Объект.КодНалоговогоОргана + " " 
									+ Форма.РегистрацияВНалоговомОргане.Наименование;
	КонецЕсли;
	УстановитьЗаголовокГруппы(Форма, "ГруппаНалоговыйОрган", НалоговыйОрганЗаголовок);	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПенсионныйФондУстановитьЗаголовок(Форма)
	
	ПенсионныйФондЗаголовок = НСтр("ru='Пенсионный фонд'");
	Если Форма.ЭтоФизЛицо Тогда
		Если ЗначениеЗаполнено(Форма.Объект.ИПРегистрационныйНомерПФР) Тогда
			ПенсионныйФондЗаголовок = ПенсионныйФондЗаголовок + ": " + Форма.Объект.ИПРегистрационныйНомерПФР;
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Форма.Объект.РегистрационныйНомерПФР) Тогда
			ПенсионныйФондЗаголовок = ПенсионныйФондЗаголовок + ": " + Форма.Объект.РегистрационныйНомерПФР;
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(Форма.Объект.НаименованиеТерриториальногоОрганаПФР) Тогда
		ОрганПФРЗаголовок = Форма.Объект.НаименованиеТерриториальногоОрганаПФР;
		ОрганПФРЗаголовок = СтрЗаменить(ОрганПФРЗаголовок, НСтр("ru='Государственное учреждение - '"), "");
		ОрганПФРЗаголовок = СтрЗаменить(ОрганПФРЗаголовок, НСтр("ru='Государственное учреждение -'"), "");
		ОрганПФРЗаголовок = СтрЗаменить(ОрганПФРЗаголовок, НСтр("ru='Государственное учреждение- '"), "");
		ОрганПФРЗаголовок = СтрЗаменить(ОрганПФРЗаголовок, НСтр("ru='Государственное учреждение-'"), "");
		ОрганПФРЗаголовок = СтрЗаменить(ОрганПФРЗаголовок, НСтр("ru='Государственное учреждение'"), "");
		ПенсионныйФондЗаголовок = ПенсионныйФондЗаголовок + " " + ОрганПФРЗаголовок;
	КонецЕсли;
	УстановитьЗаголовокГруппы(Форма, "ГруппаПФР", ПенсионныйФондЗаголовок);	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ФондСоциальногоСтрахованияУстановитьЗаголовок(Форма)
	
	ФондСоциальногоСтрахованияЗаголовок = НСтр("ru='Фонд социального страхования'");
	Если Форма.ЭтоФизЛицо Тогда
		Если ЗначениеЗаполнено(Форма.Объект.ИПРегистрационныйНомерФСС) Тогда
			ФондСоциальногоСтрахованияЗаголовок = ФондСоциальногоСтрахованияЗаголовок + ": " + Форма.Объект.ИПРегистрационныйНомерФСС;
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Форма.Объект.РегистрационныйНомерФСС) Тогда
			ФондСоциальногоСтрахованияЗаголовок = ФондСоциальногоСтрахованияЗаголовок + ": " + Форма.Объект.РегистрационныйНомерФСС;
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(Форма.Объект.НаименованиеТерриториальногоОрганаФСС) Тогда
		ФондСоциальногоСтрахованияЗаголовок = ФондСоциальногоСтрахованияЗаголовок + " " + Форма.Объект.НаименованиеТерриториальногоОрганаФСС;
	КонецЕсли;
	УстановитьЗаголовокГруппы(Форма, "ГруппаФСС", ФондСоциальногоСтрахованияЗаголовок);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура КодыУстановитьЗаголовок(Форма)
	
	КодыЗаголовок = НСтр("ru='Коды статистики'");
	Если ЗначениеЗаполнено(Форма.Объект.КодОКОПФ) ИЛИ ЗначениеЗаполнено(Форма.Объект.КодОКФС)
			ИЛИ ЗначениеЗаполнено(Форма.Объект.КодОКВЭД) ИЛИ ЗначениеЗаполнено(Форма.Объект.КодПоОКПО) Тогда
		КодыЗаголовок = КодыЗаголовок + ": ";
		Если ЗначениеЗаполнено(Форма.Объект.КодОКОПФ) Тогда
			КодыЗаголовок = КодыЗаголовок + НСтр("ru='ОКОПФ '") + Форма.Объект.КодОКОПФ;
		КонецЕсли;
		Если ЗначениеЗаполнено(Форма.Объект.КодОКФС) Тогда
			КодыЗаголовок = КодыЗаголовок + НСтр("ru=', ОКФС '")  + Форма.Объект.КодОКФС;
		КонецЕсли;
		Если ЗначениеЗаполнено(Форма.Объект.КодОКВЭД) Тогда
			КодыЗаголовок = КодыЗаголовок + НСтр("ru=', ОКВЭД '") + Форма.Объект.КодОКВЭД;
		КонецЕсли;
		Если ЗначениеЗаполнено(Форма.Объект.КодПоОКПО) Тогда
			КодыЗаголовок = КодыЗаголовок + НСтр("ru=', ОКПО '")  + Форма.Объект.КодПоОКПО;
		КонецЕсли;
		КодыЗаголовок = СтрЗаменить(КодыЗаголовок, ": ,", ":");
	КонецЕсли;
	УстановитьЗаголовокГруппы(Форма, "ГруппаКоды", КодыЗаголовок);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура КрупнейшийНалогоплательщикУстановитьЗаголовок(Форма)
	
	Если НЕ Форма.ЭтоФизЛицо И НЕ Форма.Объект.ОбособленноеПодразделение Тогда
		Если Форма.Объект.КрупнейшийНалогоплательщик Тогда
			КрупнейшийНалогоплательщикЗаголовок = НСтр("ru='Крупнейший налогоплательщик: да'");
		Иначе
			КрупнейшийНалогоплательщикЗаголовок = НСтр("ru='Крупнейший налогоплательщик: нет'");
		КонецЕсли;
		УстановитьЗаголовокГруппы(Форма, "ГруппаКрупнейшийНалогоплательщик", КрупнейшийНалогоплательщикЗаголовок);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИностраннаяОрганизацияУстановитьЗаголовок(Форма)
	
	Если НЕ Форма.ЭтоФизЛицо Тогда
		Если ЗначениеЗаполнено(Форма.Объект.НаименованиеИнострОрганизации) Тогда
			ИностраннаяОрганизацияЗаголовок = НСтр("ru='Иностранная организация: '") + Форма.Объект.НаименованиеИнострОрганизации;
		Иначе
			ИностраннаяОрганизацияЗаголовок = НСтр("ru='Иностранная организация'");
		КонецЕсли;
		УстановитьЗаголовокГруппы(Форма, "ГруппаИностраннаяОрганизация", ИностраннаяОрганизацияЗаголовок);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокГруппы(Форма, НазваниеГруппы, ЗаголовокТекст)
	
	#Если ВебКлиент Тогда
		СистемнаяИнформация = Новый СистемнаяИнформация;
		ВерсияПлатформыБезНомераСборки = ОбщегоНазначенияКлиентСервер.ВерсияКонфигурацииБезНомераСборки(СистемнаяИнформация.ВерсияПриложения);
		Если ВерсияПлатформыБезНомераСборки = "8.3.5" Тогда
			Форма.Элементы[НазваниеГруппы].СвернутыйЗаголовок = ЗаголовокТекст;
		Иначе
			Форма.Элементы[НазваниеГруппы].ЗаголовокСвернутогоОтображения = ЗаголовокТекст;
		КонецЕсли;
	#Иначе
		Форма.Элементы[НазваниеГруппы].ЗаголовокСвернутогоОтображения = ЗаголовокТекст;
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПредупреждениеОбИзмененииНастроек1СОтчетности()
	
	ОбщегоНазначенияБПКлиент.ПоказатьПредупреждениеОбИзменениях("Настройки1СОтчетности", , НастройкиПредупреждений);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПредупреждениеОбИзмененииИсторияРегистрацийВНалоговомОргане()
	
	ОбщегоНазначенияБПКлиент.ПоказатьПредупреждениеОбИзменениях("ИсторияРегистрацийВНалоговомОргане", , НастройкиПредупреждений);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокГоловныхОрганизацийОбособленногоПодразделения()

	Запрос = Новый Запрос;
	Запрос.Текст	=
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка,
	|	Организации.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ГоловнаяОрганизация = Организации.Ссылка
	|	И Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	СписокОрганизаций = Новый СписокЗначений;

	Результат	= Запрос.Выполнить();
	Выборка	= Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокОрганизаций.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;

	Возврат СписокОрганизаций;

КонецФункции

&НаСервере
Процедура РазместитьКонтактнуюИнформацию(ПриСозданииНаСервере = Истина)
	
	ТаблицаРазмещенияКИ	= УправлениеКонтактнойИнформациейБП.ПолучитьПустуюТаблицуРазмещенияКонтактнойИнформации();
	
	Если НЕ ЭтоФизЛицо Тогда
		
		// Обработчик подсистемы "Контактная информация" для закладки "ГруппаКонтактнаяИнформация"
		УправлениеКонтактнойИнформациейБП.ДобавитьОписаниеРазмещенияКонтактнойИнформации(ТаблицаРазмещенияКИ,
			Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, Элементы.ЮрАдресОрганизации.ПутьКДанным);
			
		УправлениеКонтактнойИнформациейБП.ДобавитьОписаниеРазмещенияКонтактнойИнформации(ТаблицаРазмещенияКИ,
			Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации, Элементы.ФактАдресОрганизации.ПутьКДанным);
			
		УправлениеКонтактнойИнформациейБП.ДобавитьОписаниеРазмещенияКонтактнойИнформации(ТаблицаРазмещенияКИ,
			Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации, Элементы.ПочтовыйАдресОрганизации.ПутьКДанным);
			
		УправлениеКонтактнойИнформациейБП.ДобавитьОписаниеРазмещенияКонтактнойИнформации(ТаблицаРазмещенияКИ,
			Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации, Элементы.ТелефонОрганизации.ПутьКДанным);
			
		УправлениеКонтактнойИнформациейБП.ДобавитьОписаниеРазмещенияКонтактнойИнформации(ТаблицаРазмещенияКИ,
			Справочники.ВидыКонтактнойИнформации.ФаксОрганизации, Элементы.ФаксОрганизации.ПутьКДанным);
			
		УправлениеКонтактнойИнформациейБП.ДобавитьОписаниеРазмещенияКонтактнойИнформации(ТаблицаРазмещенияКИ,
			Справочники.ВидыКонтактнойИнформации.EmailОрганизации, Элементы.EmailОрганизации.ПутьКДанным);
		
		УправлениеКонтактнойИнформациейБП.ДобавитьОписаниеРазмещенияКонтактнойИнформации(ТаблицаРазмещенияКИ,
			Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации, Элементы.ДругаяИнформацияОрганизации.ПутьКДанным);
			
		УправлениеКонтактнойИнформациейБП.ПриСозданииНаСервере(ЭтотОбъект, Объект, "ГруппаКонтактнаяИнформация", "", ТаблицаРазмещенияКИ);
		
		Если ПриСозданииНаСервере Тогда
			// Добавление непредопределенной контактной информации
			ИсключаемыеВидыКИ	= Новый Массив;
			ИсключаемыеВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
			ИсключаемыеВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
			ИсключаемыеВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации);
			ИсключаемыеВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
			ИсключаемыеВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ФаксОрганизации);
			ИсключаемыеВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.EmailОрганизации);
			ИсключаемыеВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации);
			ИсключаемыеВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.УчредительныйАдресИностраннойОрганизации);
			ИсключаемыеВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонПоЮридическомуАдресуОрганизации);
			
			УправлениеКонтактнойИнформациейБП.ПриСозданииНаСервере(ЭтотОбъект, Объект, "ГруппаКонтактнаяИнформация", "", , ИсключаемыеВидыКИ);
		КонецЕсли;
		
		// Обработчик подсистемы "Контактная информация" для закладки "ГруппаИностраннаяОрганизация"
		ТаблицаРазмещенияКИ	= УправлениеКонтактнойИнформациейБП.ПолучитьПустуюТаблицуРазмещенияКонтактнойИнформации();
		УправлениеКонтактнойИнформациейБП.ДобавитьОписаниеРазмещенияКонтактнойИнформации(ТаблицаРазмещенияКИ,
			Справочники.ВидыКонтактнойИнформации.УчредительныйАдресИностраннойОрганизации, Элементы.УчредительныйАдресИностраннойОрганизации.ПутьКДанным);
		
		УправлениеКонтактнойИнформациейБП.ПриСозданииНаСервере(ЭтотОбъект, Объект, "ГруппаИностраннаяОрганизация", "", ТаблицаРазмещенияКИ);
		
	Иначе
		
		ИндивидуальныйПредпринимательОбъект = РеквизитФормыВЗначение("ФизическоеЛицо");
		
		// Обработчик подсистемы "Контактная информация" для закладки "ГруппаКонтактнаяИнформация"
		УправлениеКонтактнойИнформациейБП.ДобавитьОписаниеРазмещенияКонтактнойИнформации(ТаблицаРазмещенияКИ,
			Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица, Элементы.ЮрАдресОрганизации.ПутьКДанным);
			
		УправлениеКонтактнойИнформациейБП.ДобавитьОписаниеРазмещенияКонтактнойИнформации(ТаблицаРазмещенияКИ,
			Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица, Элементы.ФактАдресОрганизации.ПутьКДанным);
			
		УправлениеКонтактнойИнформациейБП.ДобавитьОписаниеРазмещенияКонтактнойИнформации(ТаблицаРазмещенияКИ,
			Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица, Элементы.ПочтовыйАдресОрганизации.ПутьКДанным);
			
		УправлениеКонтактнойИнформациейБП.ДобавитьОписаниеРазмещенияКонтактнойИнформации(ТаблицаРазмещенияКИ,
			Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица, Элементы.ТелефонОрганизации.ПутьКДанным);
			
		УправлениеКонтактнойИнформациейБП.ПриСозданииНаСервере(ЭтотОбъект, ИндивидуальныйПредпринимательОбъект, "ГруппаКонтактнаяИнформация", "", ТаблицаРазмещенияКИ);
		
	КонецЕсли;
	
	ЮрФактАдресаСовпадают		= СокрЛП(ЮрАдресОрганизации) = СокрЛП(ФактАдресОрганизации);
	ЮрПочтовыйАдресаСовпадают	= СокрЛП(ЮрАдресОрганизации) = СокрЛП(ПочтовыйАдресОрганизации)
		ИЛИ СокрЛП(?(ЮрАдресОрганизации = УправлениеКонтактнойИнформациейКлиентСерверБП.ПредставлениеПустойГиперссылки(),
		"", ЮрАдресОрганизации)) = СокрЛП(ПочтовыйАдресОрганизации);
		
	Элементы.ФаксОрганизации.Видимость				= НЕ ЭтоФизЛицо;
	Элементы.EmailОрганизации.Видимость				= НЕ ЭтоФизЛицо;
	Элементы.ДругаяИнформацияОрганизации.Видимость	= НЕ ЭтоФизЛицо;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РазложитьСтрокуНаименования(Знач Наименование)
	
	Результат	= Новый Структура("Наименование,ОрганизационноПравоваяФорма,ОрганизационноПравоваяФормаСокращенно");
	
	Наименование	= СокрЛП(Наименование);
	
	Если УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='ООО'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru='Общество с ограниченной ответственностью'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru='ООО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='ПАО'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru='Публичное акционерное общество'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru='ПАО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='АО'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru='Акционерное общество'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru='АО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='ОАО'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru='Открытое акционерное общество'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru='ОАО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='ЗАО'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru='Закрытое акционерное общество'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru='ЗАО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='Общество с ограниченной ответственностью'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru='Общество с ограниченной ответственностью'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru='ООО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='Публичное акционерное общество'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru='Публичное акционерное общество'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru='ПАО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='Акционерное общество'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru='Акционерное общество'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru='АО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='Открытое акционерное общество'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru='Открытое акционерное общество'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru='ОАО'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru='Закрытое акционерное общество'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru='Закрытое акционерное общество'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru='ЗАО'");
	Иначе
		ОрганизационноПравоваяФорма				= "";
		ОрганизационноПравоваяФормаСокращенно	= "";
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ОрганизационноПравоваяФорма) Тогда
		КоличествоКавычек	= СтрЧислоВхождений(Наименование, """");
		Если КоличествоКавычек > 1 Тогда
			// Наименование организации внутри внешних кавычек
			ПозицияПервойКавычки	= Найти(Наименование, """");
			ПозицияПоследнейКавычки	= 0;
			
			ВремНаименование	= Наименование;
			
			ПозицияКавычки		= ПозицияПервойКавычки;
			Пока ПозицияКавычки > 0 Цикл
				ПозицияПоследнейКавычки	= ПозицияПоследнейКавычки + ПозицияКавычки;
				ВремНаименование	= Сред(ВремНаименование, ПозицияКавычки + 1);
				ПозицияКавычки		= Найти(ВремНаименование, """");
			КонецЦикла;
			
			Наименование	= Сред(Наименование, ПозицияПервойКавычки + 1, ПозицияПоследнейКавычки - ПозицияПервойКавычки - 1);
			Если НЕ КоличествоКавычек%2 = 0 Тогда
				Наименование	= Наименование + """";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Результат.Наименование							= СокрЛП(Наименование);
	Результат.ОрганизационноПравоваяФорма			= ОрганизационноПравоваяФорма;
	Результат.ОрганизационноПравоваяФормаСокращенно	= ОрганизационноПравоваяФормаСокращенно;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция УбратьИзНаименованияОрганизационнуюФорму(Наименование, ИмяОрганизационнойФормы)

	Результат	= Ложь;
	
	Наименование	= СокрЛП(Наименование);
	
	ДлинаНаименования			= СтрДлина(Наименование);
	ДлинаОрганизационнойФормы	= СтрДлина(ИмяОрганизационнойФормы);
	
	Если Лев(Наименование, ДлинаОрганизационнойФормы) = ИмяОрганизационнойФормы Тогда
		Наименование	= СокрЛ(Сред(Наименование, ДлинаОрганизационнойФормы + 1));
		Результат		= Истина;
	КонецЕсли;	
	
	Если Прав(Наименование, ДлинаОрганизационнойФормы) = ИмяОрганизационнойФормы Тогда
		Наименование	= СокрП(Лев(Наименование, ДлинаНаименования - ДлинаОрганизационнойФормы - 1));
		Результат		= Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьНаименованиеПолное(СтруктураНаименования)
	Перем НаименованиеПолное;
	
	Если НЕ ЗначениеЗаполнено(СтруктураНаименования.ОрганизационноПравоваяФорма) Тогда
		НаименованиеПолное = СтруктураНаименования.Наименование;
	Иначе
		НаименованиеПолное	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 ""%2""",
			СтруктураНаименования.ОрганизационноПравоваяФорма, СтруктураНаименования.Наименование);
	КонецЕсли;
	
	Возврат	НаименованиеПолное;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьНаименование(СтруктураНаименования)
	
	Возврат	СтруктураНаименования.Наименование
			+ ?(ПустаяСтрока(СтруктураНаименования.ОрганизационноПравоваяФормаСокращенно), "", " ")
			+ СтруктураНаименования.ОрганизационноПравоваяФормаСокращенно;

КонецФункции

&НаКлиенте
Процедура СформироватьОКОПФ()
	
	Если Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо")
		И НЕ Объект.ОбособленноеПодразделение Тогда
	
		Если Найти(Объект.НаименованиеСокращенное, "ООО") Тогда
			Объект.КодОКОПФ	= "12165";
		ИначеЕсли Найти(Объект.НаименованиеСокращенное, "ОАО") Тогда
			Объект.КодОКОПФ	= "12247";
		ИначеЕсли Найти(Объект.НаименованиеСокращенное, "ЗАО") Тогда
			Объект.КодОКОПФ	= "12267";
		КонецЕсли;
		
		Объект.НаименованиеОКОПФ	= ОКОПФ.Получить(Объект.КодОКОПФ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОКФС()
	
	Объект.КодОКФС	= "16";
	Объект.НаименованиеОКФС	= ОКФС.Получить(Объект.КодОКФС);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСписокВыбораВариантаНаименованияДляПечатныхФорм(Форма)
	
	Форма.Элементы.ВариантНаименованияДляПечатныхФорм.СписокВыбора.НайтиПоЗначению(
		ПредопределенноеЗначение("Перечисление.ВариантыНаименованияДляПечатныхФорм.СокращенноеНаименование")).Представление = 
		Форма.Объект.НаименованиеСокращенное;
		
	Форма.Элементы.ВариантНаименованияДляПечатныхФорм.СписокВыбора.НайтиПоЗначению(
		ПредопределенноеЗначение("Перечисление.ВариантыНаименованияДляПечатныхФорм.ПолноеНаименование")).Представление = 
		Форма.Объект.НаименованиеПолное;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюОбОтветственныхЛицах()
	
	Руководитель		= НСтр("ru = 'Создать'");
	ГлавныйБухгалтер	= НСтр("ru = 'Создать'");
	Кассир				= НСтр("ru = 'Создать'");
	
	РуководительКлючЗаписи		= РегистрыСведений.ОтветственныеЛицаОрганизаций.ПустойКлюч();
	ГлавныйБухгалтерКлючЗаписи	= РегистрыСведений.ОтветственныеЛицаОрганизаций.ПустойКлюч();
	КассирКлючЗаписи			= РегистрыСведений.ОтветственныеЛицаОрганизаций.ПустойКлюч();
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос	= Новый Запрос;
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница",	Объект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОтветственныеЛицаОрганизацийСрезПоследних.Период КАК Период,
	|	ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо КАК ОтветственноеЛицо,
	|	ПРЕДСТАВЛЕНИЕ(ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо) КАК ФизическоеЛицо,
	|	ПРЕДСТАВЛЕНИЕ(ОтветственныеЛицаОрганизацийСрезПоследних.Должность) КАК Должность,
	|	ВЫБОР
	|		КОГДА ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)
	|			ТОГДА ""Руководитель""
	|		КОГДА ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер)
	|			ТОГДА ""ГлавныйБухгалтер""
	|		КОГДА ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Кассир)
	|			ТОГДА ""Кассир""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ПредставлениеОтветственногоЛица
	|ИЗ
	|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних КАК ОтветственныеЛицаОрганизацийСрезПоследних
	|ГДЕ
	|	ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|	И (ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)
	|			ИЛИ ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер)
	|			ИЛИ ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Кассир))";
	
	
	Отбор	= Новый Структура("Период, СтруктурнаяЕдиница, ОтветственноеЛицо");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ПустаяСтрока(Выборка.ПредставлениеОтветственногоЛица) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементФормы	= ЭтотОбъект.Элементы.Найти(Выборка.ПредставлениеОтветственногоЛица);
		Если ЭлементФормы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтотОбъект[Выборка.ПредставлениеОтветственногоЛица] = НаименованиеОтветственногоЛица(Выборка.ФизическоеЛицо, Выборка.Должность);
		
		ЗаполнитьЗначенияСвойств(Отбор, Выборка);
		ЭтотОбъект[Выборка.ПредставлениеОтветственногоЛица + "КлючЗаписи"]	= РегистрыСведений.ОтветственныеЛицаОрганизаций.СоздатьКлючЗаписи(Отбор);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКодИзКлассификатора(ИмяКода, Комментарий = "")
 
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипОбъекта",		"Справочник");
	ПараметрыФормы.Вставить("НазваниеОбъекта",	"Организации");
	ПараметрыФормы.Вставить("НазваниеМакета",	ИмяКода);
	ПараметрыФормы.Вставить("ТекущийПериод",	ТекущаяДата());
	ПараметрыФормы.Вставить("ТекущийКод",       Объект["Код" + ИмяКода]);
	ПараметрыФормы.Вставить("Комментарий",      Комментарий);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяКода", ИмяКода);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыбратьКодИзКлассификатораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораКода", ПараметрыФормы,,,,, ОповещениеОЗакрытии);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКодИзКлассификатораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ИмяКода = ДополнительныеПараметры.ИмяКода;	
	
	ВыбранныйКод = РезультатЗакрытия;	
	
	Если ВыбранныйКод <> Неопределено Тогда
		
		Модифицированность = Истина;
		
		Объект["Код" + ИмяКода]				= ВыбранныйКод;
		Объект["Наименование" + ИмяКода]	= ЭтотОбъект[ИмяКода].Получить(ВыбранныйКод);
		
		УправлениеФормой(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыНалоговойИнспекцииПоКодуЗавершение(РезультатыЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатыЗакрытия = КодВозвратаДиалога.Да Тогда
		Объект.КодНалоговогоОргана = ДополнительныеПараметры.КодНалоговогоОргана;
		УстановитьРегистрациюВНалоговомОргане();
		ЗаполнитьСведенияОНалоговойИнспекцииПоКоду();
		РегистрацияВНалоговомОргане.КодПоОКАТО = ДополнительныеПараметры.КодПоОКАТО;
		РегистрацияВНалоговомОргане.КодПоОКТМО = ДополнительныеПараметры.КодПоОКТМО;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииЮрАдресаОрганизации()

	Если ЮрФактАдресаСовпадают ИЛИ ПустаяСтрока(ФактАдресОрганизации) Тогда
		СкопироватьПолеКонтактнойИнформации("ФактАдресОрганизации", "ЮрАдресОрганизации");
	КонецЕсли;
	
	Если ЮрПочтовыйАдресаСовпадают ИЛИ ПустаяСтрока(ПочтовыйАдресОрганизации) Тогда
		СкопироватьПолеКонтактнойИнформации("ПочтовыйАдресОрганизации", "ЮрАдресОрганизации");
	КонецЕсли;
	
	Отбор = Новый Структура("ИмяРеквизита");
	Отбор.ИмяРеквизита = "ЮрАдресОрганизации";
	ДанныеИсточника = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
	Если ДанныеИсточника.Количество() > 0 Тогда
		ЗначенияПолей = ДанныеИсточника[0].ЗначенияПолей;
		СведенияОНалоговомОргане = СведенияОНалоговомОрганеПоАдресу(ЗначенияПолей);
		
		Если СведенияОНалоговомОргане <> Неопределено Тогда
			
			Если ЗначениеЗаполнено(СведенияОНалоговомОргане.КодНалоговогоОргана) Тогда
				
				Если НЕ ЗначениеЗаполнено(Объект.КодНалоговогоОргана) Тогда
					
					ЗаполнитьРеквизитыНалоговойИнспекцииПоКодуЗавершение(КодВозвратаДиалога.Да, СведенияОНалоговомОргане);
					
				ИначеЕсли СведенияОНалоговомОргане.КодНалоговогоОргана = Объект.КодНалоговогоОргана Тогда
					
					//Налоговая инспекция не изменилась
					Если НЕ ЗначениеЗаполнено(РегистрацияВНалоговомОргане.КодПоОКАТО) Тогда
						РегистрацияВНалоговомОргане.КодПоОКАТО = СведенияОНалоговомОргане.КодПоОКАТО;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(РегистрацияВНалоговомОргане.КодПоОКТМО) Тогда
						РегистрацияВНалоговомОргане.КодПоОКТМО = СведенияОНалоговомОргане.КодПоОКТМО;
					КонецЕсли;
					
				Иначе
					
					ТекстВопроса = НСтр("ru = 'Выбранный адрес обслуживается налоговой инспекцией с кодом %1.
												|Заменить налоговую инспекцию?'");
					ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, СведенияОНалоговомОргане.КодНалоговогоОргана);
					ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьРеквизитыНалоговойИнспекцииПоКодуЗавершение", ЭтотОбъект, СведенияОНалоговомОргане);
					ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииФактАдресаОрганизации()

	ЮрФактАдресаСовпадают = СокрЛП(ЮрАдресОрганизации) = СокрЛП(ФактАдресОрганизации);
	ЮрПочтовыйАдресаСовпадают = СокрЛП(ЮрАдресОрганизации) = СокрЛП(ПочтовыйАдресОрганизации);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьПолеКонтактнойИнформации(ИмяПриемника, ИмяИсточника)

	Модифицированность		= Истина;
	ЭтотОбъект[ИмяПриемника]	= ЭтотОбъект[ИмяИсточника];
	
	ИмяОписания	= "КонтактнаяИнформацияОписаниеДополнительныхРеквизитов";
	
	Отбор = Новый Структура("ИмяРеквизита");
	
	Отбор.ИмяРеквизита	= ИмяИсточника;
	ДанныеИсточника	= ЭтотОбъект[ИмяОписания].НайтиСтроки(Отбор);
	Если ДанныеИсточника.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Отбор.ИмяРеквизита	= ИмяПриемника;
	ДанныеПриемника	= ЭтотОбъект[ИмяОписания].НайтиСтроки(Отбор);
	Если ДанныеПриемника.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ДанныеИсточника[0].Тип = ДанныеПриемника[0].Тип Тогда
		Возврат
	КонецЕсли;
	
	ЗначенияПолейИсточника = ДанныеИсточника[0].ЗначенияПолей;
	Если ТипЗнч(ЗначенияПолейИсточника)=Тип("Строка") Тогда
		ДанныеПриемника[0].ЗначенияПолей = ЗначенияПолейИсточника;
	Иначе
		ДанныеПриемника[0].ЗначенияПолей = ЗначенияПолейИсточника.Скопировать();
	КонецЕсли;
	ДанныеПриемника[0].Представление = ДанныеИсточника[0].Представление;
	ДанныеПриемника[0].Комментарий = ДанныеИсточника[0].Комментарий;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьУчетнуюПолитику(Ссылка, Знач ДанныеЗаполнения)
	
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеЗаполнения.Вставить("Организация", Ссылка);
	
	НаборЗаписей = РегистрыСведений.УчетнаяПолитикаОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтрокаНабораЗаписей = НаборЗаписей.Добавить();
	СтрокаНабораЗаписей.Активность = Истина;
	
	РегистрыСведений.УчетнаяПолитикаОрганизаций.УстановкаПараметровУчетнойПолитикиПоУмолчанию(СтрокаНабораЗаписей, ДанныеЗаполнения);
	РегистрыСведений.УчетнаяПолитикаОрганизаций.УстановкаПараметровУчетнойПолитикиПоУмолчаниюНаПериод(СтрокаНабораЗаписей);
	
	НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
	НаборЗаписей.Записать();
	
	Если СтрокаНабораЗаписей.СистемаНалогообложения = Перечисления.СистемыНалогообложения.ОсобыйПорядок
		И СтрокаНабораЗаписей.ПрименяетсяУСНПатент Тогда
		Справочники.Патенты.СоздатьПатентПоУмолчанию(Ссылка, СтрокаНабораЗаписей.Период);
	КонецЕсли;
	
	// Часть учетной политики - список прямых расходов для целей исчисления налога на прибыль
	Если СтрокаНабораЗаписей.ПлательщикНалогаНаПрибыль Тогда
		РегистрыСведений.МетодыОпределенияПрямыхРасходовПроизводстваВНУ.Настроить(
			Ссылка,
			НачалоГода(СтрокаНабораЗаписей.Период),
			Ложь, // Не копировать записи предыдущего периода
			Ложь);// Не перезаписывать записи, если они уже есть
		КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция АдресныйКлассификаторПуст()

	Возврат НЕ АдресныйКлассификатор.КлассификаторЗагружен();

КонецФункции

&НаКлиенте
Процедура ВопросВключитьАналитическийУчетПоПартиямЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		ИзмененыПараметрыСубконто = Ложь;
		ПараметрыУчета.ВестиПартионныйУчет = Истина;
		ОбщегоНазначенияБПВызовСервера.ПрименитьПараметрыУчета(ПараметрыУчета, ИзмененыПараметрыСубконто, , Истина);
		Если ИзмененыПараметрыСубконто Тогда
			ПоказатьОповещениеПользователя(НСтр("ru = 'Изменены параметры субконто'"),
				"e1cib/app/Обработка.ЖурналРегистрации", "Журнал регистрации");
		КонецЕсли;
	Иначе
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеИзмененияКонтактнойИнформации(Результат) Экспорт
	
	Если Результат.ИмяРеквизита = "ЮрАдресОрганизации" Тогда
		
		Если НЕ Результат.ЗначениеПоляДоИзменения = ЮрАдресОрганизации Тогда
			
			ПриИзмененииЮрАдресаОрганизации();
			УправлениеФормой(ЭтотОбъект);
			
		КонецЕсли;
		
	ИначеЕсли Результат.ИмяРеквизита = "ФактАдресОрганизации" Тогда
		
		ПриИзмененииФактАдресаОрганизации();
		УправлениеФормой(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСокращенногоНаименования()
	
	Перем АвтоНаименованиеПолное;
	
	СтруктураНаименования	= РазложитьСтрокуНаименования(Объект.НаименованиеСокращенное);
	
	Если ПустаяСтрока(Объект.НаименованиеПолное) Тогда
		Объект.НаименованиеПолное	= СформироватьНаименованиеПолное(СтруктураНаименования);
	Иначе
		
		АвтоНаименованиеПрежнее	= СформироватьНаименованиеПолное(РазложитьСтрокуНаименования(НаименованиеСокращенное));
		
		Если СокрЛП(Объект.НаименованиеПолное) = СокрЛП(АвтоНаименованиеПрежнее) Тогда
			Объект.НаименованиеПолное	= СформироватьНаименованиеПолное(СтруктураНаименования);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.Наименование) Тогда
		Объект.Наименование	= СформироватьНаименование(СтруктураНаименования);
	Иначе
		
		АвтоНаименованиеПрежнее	= СформироватьНаименование(РазложитьСтрокуНаименования(НаименованиеСокращенное));
		
		Если СокрЛП(Объект.Наименование) = СокрЛП(АвтоНаименованиеПрежнее) Тогда
			Объект.Наименование	= СформироватьНаименование(СтруктураНаименования);
		КонецЕсли;
		
	КонецЕсли;
	
	СформироватьОКОПФ();
	СформироватьОКФС();
	
	УстановитьСписокВыбораВариантаНаименованияДляПечатныхФорм(ЭтотОбъект);
	
	НаименованиеСокращенное	= Объект.НаименованиеСокращенное;
	НаименованиеПолное		= Объект.НаименованиеПолное;
	
КонецПроцедуры

&НаСервере
Процедура ФизлицоПриСозданииНаСервере()
	
	Если Параметры.Ключ.Пустая() Тогда
		
		Объект.ИндивидуальныйПредприниматель = Справочники.ФизическиеЛица.ПолучитьСсылку();
		
		РедактированиеПериодическихСведений.ИнициализироватьЗаписьДляРедактированияВФорме(ЭтотОбъект, "ФИОФизическихЛиц", Объект.ИндивидуальныйПредприниматель);
		РедактированиеПериодическихСведений.ИнициализироватьЗаписьДляРедактированияВФорме(ЭтотОбъект, "ДокументыФизическихЛиц", Объект.ИндивидуальныйПредприниматель);
		
		Объект.КодОКОПФ	= "50102";
		Объект.НаименованиеОКОПФ	= ОКОПФ.Получить(Объект.КодОКОПФ);
		
		Объект.КодОКФС	= "16";
		Объект.НаименованиеОКФС		= ОКФС.Получить(Объект.КодОКФС);
		
	Иначе
		
	КонецЕсли;
	
	ДокументыФизическихЛицПриИзмененииДанных(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ФизлицоПриЗаписиНаСервере(Отказ, ТекущийОбъект)
	
	Если ИзмененыДанныеФизическогоЛица Тогда
		ЗаписатьФизическоеЛицо(ТекущийОбъект, Отказ);
	КонецЕсли;
	ЗаписатьФИО();
	ЗаписатьДокументУдостоверяющийЛичность();
	
КонецПроцедуры

&НаСервере
Процедура ФизлицоПослеЗаписиНаСервере()
	
	ПрочитатьДанныеФизическогоЛица();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДанныеФизическогоЛица()
	
	ФизическоеЛицоОбъект = Объект.ИндивидуальныйПредприниматель.ПолучитьОбъект();
	ЗначениеВРеквизитФормы(ФизическоеЛицоОбъект, "ФизическоеЛицо");
	
	ПрочитатьФИО();
	
	ФизическоеЛицоМестоРождения = ПерсонифицированныйУчетКлиентСервер.ПредставлениеМестаРождения(ФизическоеЛицо.МестоРождения);
	
	ПрочитатьДокументУдостоверяющийЛичность();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДанныеФизическогоЛицаИОбновитьКонтактнуюИнформацию()
	
	ПрочитатьДанныеФизическогоЛица();
	ОбновитьКонтактнуюИнформациюФизическогоЛица();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьФИО()
	
	РедактированиеПериодическихСведений.ПрочитатьЗаписьДляРедактированияВФорме(ЭтотОбъект, "ФИОФизическихЛиц", Объект.ИндивидуальныйПредприниматель);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДокументУдостоверяющийЛичность()
	
	РедактированиеПериодическихСведений.ПрочитатьЗаписьДляРедактированияВФорме(ЭтотОбъект, "ДокументыФизическихЛиц", Объект.ИндивидуальныйПредприниматель);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьФизическоеЛицо(ТекущийОбъект, Отказ = Ложь)
	
	ФизическоеЛицоОбъект = РеквизитФормыВЗначение("ФизическоеЛицо");
	
	Если ФизическоеЛицоОбъект.Ссылка.Пустая() Тогда
		ФизическоеЛицоОбъект.УстановитьСсылкуНового(Объект.ИндивидуальныйПредприниматель);
	КонецЕсли;
	
	Попытка
		ФизическоеЛицоОбъект.Записать();
	Исключение
		
		Отказ = Истина;
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Если ИнформацияОбОшибке.Причина = Неопределено Тогда
			ОписаниеОшибки = ИнформацияОбОшибке.Описание;
		Иначе
			ОписаниеОшибки = ИнформацияОбОшибке.Причина.Описание;
		КонецЕсли;
		
		ОписаниеОшибки = НСтр("ru = 'Ошибка при обновлении данных физического лица: возможно данные изменены другим пользователем'") + Символы.ПС + ОписаниеОшибки;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьФИО()
	
	РедактированиеПериодическихСведений.ЗаписатьЗаписьПослеРедактированияВФорме(ЭтотОбъект, "ФИОФизическихЛиц", Объект.ИндивидуальныйПредприниматель);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДокументУдостоверяющийЛичность()
	
	РедактированиеПериодическихСведений.ЗаписатьЗаписьПослеРедактированияВФорме(ЭтотОбъект, "ДокументыФизическихЛиц", Объект.ИндивидуальныйПредприниматель);
	
КонецПроцедуры

&НаКлиенте
Процедура ФизическоеЛицоФИОПриИзменении()
	
	Если НЕ ЗаблокироватьФизическоеЛицоПриРедактировании() Тогда
		Возврат;
	КонецЕсли;
	
	ИзмененыДанныеФизическогоЛица = Истина;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ФизическоеЛицоФИОПриИзмененииЗавершение", ЭтотОбъект);
	Если НЕ (ПустаяСтрока(ФИОФизическихЛиц.Фамилия) ИЛИ ПустаяСтрока(ФИОФизическихЛиц.Имя)
			ИЛИ ПустаяСтрока(ФИОФизическихЛиц.Отчество)) Тогда
		ПроверитьОднофамильцев(ОписаниеОповещения);
	Иначе 
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФизическоеЛицоФИОПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФизическоеЛицо.ФИО = СокрЛП(ФИОФизическихЛиц.Фамилия)+" "+СокрЛП(ФИОФизическихЛиц.Имя)+" "+СокрЛП(ФИОФизическихЛиц.Отчество);
	
	Если НЕ ЗначениеЗаполнено(ФИОФизическихЛиц.Период) Тогда
		Если ЗначениеЗаполнено(ФизическоеЛицо.ДатаРождения) Тогда
			ФИОФизическихЛиц.Период = ФизическоеЛицо.ДатаРождения;
		Иначе
			ФИОФизическихЛиц.Период = ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведений();
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФИОФизическихЛиц.Отчество) И Не ЗначениеЗаполнено(ФизическоеЛицо.Пол) Тогда
		ФизическоеЛицо.Пол = СотрудникиКлиентСервер.ОпределитьПолПоОтчеству(ФИОФизическихЛиц.Отчество);
	КонецЕсли;
	
	СформироватьНаименованиеФизическогоЛица(ФизическоеЛицо, ФИОФизическихЛиц);
	
	Если ЗначениеЗаполнено(СокрЛП(ФизическоеЛицо.ФИО)) Тогда
		
		Объект.НаименованиеСокращенное	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='ИП %1 %2 %3'"),
			СокрЛП(ФИОФизическихЛиц.Фамилия),
			?(ПустаяСтрока(СокрЛП(ФИОФизическихЛиц.Имя)), "", Лев(СокрЛП(ФИОФизическихЛиц.Имя), 1) + "."),
			?(ПустаяСтрока(СокрЛП(ФИОФизическихЛиц.Отчество)), "", Лев(СокрЛП(ФИОФизическихЛиц.Отчество), 1) + "."));
			
		Объект.НаименованиеПолное		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Индивидуальный предприниматель %1 %2 %3'"),
			СокрЛП(ФИОФизическихЛиц.Фамилия),
			?(ПустаяСтрока(СокрЛП(ФИОФизическихЛиц.Имя)), "", СокрЛП(ФИОФизическихЛиц.Имя)),
			?(ПустаяСтрока(СокрЛП(ФИОФизическихЛиц.Отчество)), "", СокрЛП(ФИОФизическихЛиц.Отчество)));
			
		Объект.Наименование				= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 %2 %3 ИП'"),
			СокрЛП(ФИОФизическихЛиц.Фамилия),
			?(ПустаяСтрока(СокрЛП(ФИОФизическихЛиц.Имя)), "", Лев(СокрЛП(ФИОФизическихЛиц.Имя), 1) + "."),
			?(ПустаяСтрока(СокрЛП(ФИОФизическихЛиц.Отчество)), "", Лев(СокрЛП(ФИОФизическихЛиц.Отчество), 1) + "."));
		
	КонецЕсли;
	
	УстановитьСписокВыбораВариантаНаименованияДляПечатныхФорм(ЭтотОбъект);
	
КонецПРоцедуры

&НаКлиенте
Процедура СформироватьНаименованиеФизическогоЛица(ФизическоеЛицо, МенеджерЗаписиФИО)
	
	ФизическоеЛицо.Наименование = КадровыйУчетКлиентСервер.ПолноеНаименованиеСотрудника(МенеджерЗаписиФИО.Фамилия, МенеджерЗаписиФИО.Имя, МенеджерЗаписиФИО.Отчество, ФизическоеЛицо.УточнениеНаименования);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОднофамильцев(ОповещениеЗавершения = Неопределено)
	
	СтруктураПроверкиОднофамильцев = СотрудникиВызовСервера.ПодобратьСписокФизЛиц(
		Объект.ИндивидуальныйПредприниматель,
		ФИОФизическихЛиц.Фамилия,
		ФИОФизическихЛиц.Имя,
		ФИОФизическихЛиц.Отчество);
	
	Если НЕ СтруктураПроверкиОднофамильцев.ФизическоеЛицоУникально Тогда
		
		ПараметрыОткрытия = Новый Структура("ЗаголовокФормы,ТекстИнформационнойНадписи,ДанныеФизическихЛиц");
		
		Если СтруктураПроверкиОднофамильцев.ДанныеФизическихЛиц.Количество() = 1 Тогда
			ПараметрыОткрытия.ЗаголовокФормы = НСтр("ru='Найден человек с похожим именем.'");
			ПараметрыОткрытия.ТекстИнформационнойНадписи = 
				НСтр("ru='Если вы хотите указать в качестве индивидуального предпринимателя это физическое лицо, нажмите ""Да, это тот, кто мне нужен"".
					|Если это однофамилец, нажмите ""Нет, это другой человек"".'");
		Иначе
			ПараметрыОткрытия.ЗаголовокФормы = НСтр("ru='Найдены люди с похожими именами.'");
			ПараметрыОткрытия.ТекстИнформационнойНадписи = 
				НСтр("ru='Если вы хотите указать в качестве индивидуального предпринимателя одно из приведенных в списке физических лиц, выберите его и нажмите ""Отмеченный человек тот, кто мне нужен"".
					|Если это однофамилец, нажмите ""Нет, это другой человек"".'");
		КонецЕсли;
		
		ПараметрыОткрытия.ДанныеФизическихЛиц = СтруктураПроверкиОднофамильцев.ДанныеФизическихЛиц;
		
		Оповещение = Новый ОписаниеОповещения("ПроверитьОднофамильцевЗавершение", ЭтотОбъект, ОповещениеЗавершения);
		ОткрытьФорму("Справочник.ФизическиеЛица.Форма.ФизическиеЛицаСПохожимиДанными", ПараметрыОткрытия, , , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	Иначе
		
		Если ОповещениеЗавершения <> Неопределено Тогда 
			ВыполнитьОбработкуОповещения(ОповещениеЗавершения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОднофамильцевЗавершение(ВыбранноеФизлицоСсылка, ОповещениеЗавершения) Экспорт
	
	Если ВыбранноеФизлицоСсылка <> Неопределено Тогда
		Объект.ИндивидуальныйПредприниматель = ВыбранноеФизлицоСсылка;
		ПрочитатьДанныеФизическогоЛицаИОбновитьКонтактнуюИнформацию();
	КонецЕсли;
	
	Если ОповещениеЗавершения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеЗавершения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЗаблокироватьФизическоеЛицоПриРедактировании()
	
	Если НЕ Параметры.Ключ.Пустая() И НЕ ФизическоеЛицоЗаблокировано Тогда
		Если НЕ ЗаблокироватьФизическоеЛицоПриРедактированииНаСервере() Тогда
			ПоказатьПредупреждение(, НСтр("ru='Не удается внести изменения в личные данные физического лица. Возможно данные редактируются другим пользователем.'"));
			ПрочитатьДанныеФизическогоЛицаИОбновитьКонтактнуюИнформацию();
			Возврат Ложь;
		Иначе
			ФизическоеЛицоЗаблокировано = Истина;
			Возврат Истина;
		КонецЕсли;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ЗаблокироватьФизическоеЛицоПриРедактированииНаСервере()
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(ФизическоеЛицо.Ссылка, ФизическоеЛицо.ВерсияДанных, ЭтотОбъект.УникальныйИдентификатор);
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДокументыФизическихЛицПриИзмененииДанных(Форма)
	
	Если ЗарплатаКадрыКлиентСервер.УдостоверениеЛичностиПоУмолчанию(Форма.ДокументыФизическихЛиц)
			И НЕ ЗначениеЗаполнено(Форма.ДокументыФизическихЛицПрежняя.Период) Тогда
	
		Форма.ДокументыФизическихЛиц.ЯвляетсяДокументомУдостоверяющимЛичность = Ложь;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ДокументыФизическихЛицВидДокумента",
			"ОтметкаНезаполненного",
			Ложь);
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ДокументыФизическихЛицДатаВыдачи",
			"ОтметкаНезаполненного",
			Ложь);
	
	Иначе
		
		Форма.ДокументыФизическихЛиц.ЯвляетсяДокументомУдостоверяющимЛичность = Истина;
		
		Если ЗначениеЗаполнено(Форма.ДокументыФизическихЛиц.ВидДокумента) Тогда
			ВидДокументаОтметкаНезаполненного = Ложь;
		Иначе
			ВидДокументаОтметкаНезаполненного = Истина;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ДокументыФизическихЛицВидДокумента",
			"ОтметкаНезаполненного",
			ВидДокументаОтметкаНезаполненного);
			
		Если ЗначениеЗаполнено(Форма.ДокументыФизическихЛиц.ДатаВыдачи) Тогда
			ДатаВыдачиОтметкаНезаполненного = Ложь;
		Иначе
			ДатаВыдачиОтметкаНезаполненного = Истина;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ДокументыФизическихЛицДатаВыдачи",
			"ОтметкаНезаполненного",
			ДатаВыдачиОтметкаНезаполненного);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКонтактнуюИнформациюФизическогоЛица()
	
	ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Очистить();
	
	ЮрАдресОрганизации = УправлениеКонтактнойИнформациейКлиентСерверБП.ПредставлениеПустойГиперссылки();
	ФактАдресОрганизации = УправлениеКонтактнойИнформациейКлиентСерверБП.ПредставлениеПустойГиперссылки();
	ПочтовыйАдресОрганизации = "";
	ТелефонОрганизации = "";
	
	РазместитьКонтактнуюИнформацию(Ложь);
	
	ЮрФактАдресаСовпадают = СокрЛП(ЮрАдресОрганизации) = СокрЛП(ФактАдресОрганизации);
	
	ЮрПочтовыйАдресаСовпадают = СокрЛП(ЮрАдресОрганизации) = СокрЛП(ПочтовыйАдресОрганизации)
		ИЛИ СокрЛП(?(ЮрАдресОрганизации = УправлениеКонтактнойИнформациейКлиентСерверБП.ПредставлениеПустойГиперссылки(),
		"", ЮрАдресОрганизации)) = СокрЛП(ПочтовыйАдресОрганизации);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОбИзмененииДанныхФизическогоЛица()
	
	Если ИзмененыДанныеФизическогоЛица Тогда
	
		ДанныеФизическогоЛица = Новый Структура;
		ДанныеФизическогоЛица.Вставить("ФизическоеЛицо", ФизическоеЛицо.Ссылка);
		ДанныеФизическогоЛица.Вставить("Фамилия", "");
		ДанныеФизическогоЛица.Вставить("Имя", "");
		ДанныеФизическогоЛица.Вставить("Отчество", "");
		ДанныеФизическогоЛица.Вставить("Пол", ФизическоеЛицо.Пол);
		ДанныеФизическогоЛица.Вставить("ДатаРождения", ФизическоеЛицо.ДатаРождения);
		ДанныеФизическогоЛица.Вставить("МестоРождения", ФизическоеЛицо.МестоРождения);
		ДанныеФизическогоЛица.Вставить("МестоРожденияПредставление", "");
		ДанныеФизическогоЛица.Вставить("Гражданство", "");
		ДанныеФизическогоЛица.Вставить("СтраховойНомерПФР", "");
		ДанныеФизическогоЛица.Вставить("ИНН", ФизическоеЛицо.ИНН);
		ДанныеФизическогоЛица.Вставить("ВидДокумента");
		ДанныеФизическогоЛица.Вставить("Серия", "");
		ДанныеФизическогоЛица.Вставить("Номер", "");
		ДанныеФизическогоЛица.Вставить("КемВыдан", "");
		ДанныеФизическогоЛица.Вставить("ДатаВыдачи", '00010101');
		ДанныеФизическогоЛица.Вставить("КодПодразделения", "");
		ДанныеФизическогоЛица.Вставить("ПредставлениеДокумента", "");
		ДанныеФизическогоЛица.Вставить("АдресРегистрации", "");
		ДанныеФизическогоЛица.Вставить("АдресРегистрацииПредставление", "");
		ДанныеФизическогоЛица.Вставить("АдресФактический", "");
		ДанныеФизическогоЛица.Вставить("АдресФактическийПредставление", "");
		ДанныеФизическогоЛица.Вставить("АдресДляИнформирования", "");
		ДанныеФизическогоЛица.Вставить("АдресДляИнформированияПредставление", "");
		ДанныеФизическогоЛица.Вставить("ИностранныйАдрес", "");
		ДанныеФизическогоЛица.Вставить("Телефоны", "");
		ДанныеФизическогоЛица.Вставить("ТелефонРабочий", "");
		
		ДанныеФизическогоЛица.Фамилия 		= ФИОФизическихЛиц.Фамилия;
		ДанныеФизическогоЛица.Имя 			= ФИОФизическихЛиц.Имя;
		ДанныеФизическогоЛица.Отчество 		= ФИОФизическихЛиц.Отчество;
		
		ДанныеФизическогоЛица.ВидДокумента 	= ДокументыФизическихЛиц.ВидДокумента;
		ДанныеФизическогоЛица.Серия 		= ДокументыФизическихЛиц.Серия;
		ДанныеФизическогоЛица.Номер 		= ДокументыФизическихЛиц.Номер;
		ДанныеФизическогоЛица.КемВыдан 		= ДокументыФизическихЛиц.КемВыдан;
		ДанныеФизическогоЛица.ДатаВыдачи 	= ДокументыФизическихЛиц.ДатаВыдачи;
		ДанныеФизическогоЛица.КодПодразделения 	= ДокументыФизическихЛиц.КодПодразделения;
		ДанныеФизическогоЛица.ПредставлениеДокумента 	= ДокументыФизическихЛиц.Представление;
		
		СтруктураОтбора = Новый Структура("Вид", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица"));
		
		СтрокиАдреса = ФизическоеЛицо.КонтактнаяИнформация.НайтиСтроки(СтруктураОтбора);
		
		Если СтрокиАдреса.Количество() > 0 Тогда
			ДанныеФизическогоЛица.АдресРегистрации = СтрокиАдреса[0].ЗначенияПолей;
			ДанныеФизическогоЛица.АдресРегистрацииПредставление = СтрокиАдреса[0].Представление;	
		КонецЕсли;	
		
		СтруктураОтбора = Новый Структура("Вид", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица"));
		
		СтрокиАдреса = ФизическоеЛицо.КонтактнаяИнформация.НайтиСтроки(СтруктураОтбора);
		
		Если СтрокиАдреса.Количество() > 0 Тогда
			ДанныеФизическогоЛица.АдресФактический = СтрокиАдреса[0].ЗначенияПолей;
			ДанныеФизическогоЛица.АдресФактическийПредставление = СтрокиАдреса[0].Представление;	
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура("Вид", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица"));
		
		СтрокиАдреса = ФизическоеЛицо.КонтактнаяИнформация.НайтиСтроки(СтруктураОтбора);
		
		Если СтрокиАдреса.Количество() > 0 Тогда
			ДанныеФизическогоЛица.АдресДляИнформирования = СтрокиАдреса[0].ЗначенияПолей;
			ДанныеФизическогоЛица.АдресДляИнформированияПредставление = СтрокиАдреса[0].Представление;	
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура("Вид", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица"));

		СтрокиАдреса = ФизическоеЛицо.КонтактнаяИнформация.НайтиСтроки(СтруктураОтбора);
		
		Если СтрокиАдреса.Количество() > 0 Тогда
			ДанныеФизическогоЛица.Телефоны = СтрокиАдреса[0].Представление;
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура("Вид", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица"));

		СтрокиАдреса = ФизическоеЛицо.КонтактнаяИнформация.НайтиСтроки(СтруктураОтбора);
		
		Если СтрокиАдреса.Количество() > 0 Тогда
			ДанныеФизическогоЛица.ТелефонРабочий = СтрокиАдреса[0].Представление;
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура("Вид", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресЗаПределамиРФФизическиеЛица"));

		СтрокиАдреса = ФизическоеЛицо.КонтактнаяИнформация.НайтиСтроки(СтруктураОтбора);
		
		Если СтрокиАдреса.Количество() > 0 Тогда
			ДанныеФизическогоЛица.ИностранныйАдрес = СтрокиАдреса[0].Представление;
		КонецЕсли;

		ДанныеФизическогоЛица.МестоРожденияПредставление = ПерсонифицированныйУчетКлиентСервер.ПредставлениеМестаРождения(ФизическоеЛицо.МестоРождения);

		Оповестить("ИзменениеДанныхФизическогоЛица", ДанныеФизическогоЛица, ФизическоеЛицо.Ссылка);
	
		Оповестить("Запись_ФизическиеЛица", , ФизическоеЛицо.Ссылка);
		
	КонецЕсли;
	
	Оповестить("ИзменениеЛичныхДанных", Объект.ИндивидуальныйПредприниматель, ЭтотОбъект);
	
КонецПроцедуры

#Область ЛоготипИФаксимиле

&НаКлиенте
// Процедура отвечает за обработку нажатия на картинки формы (логотип/факсим. печать)
//
Процедура ОбработатьНажатиеКартинки(СтандартнаяОбработка, ИмяЭлементаСКартинкой)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект[ИмяЭлементаСКартинкой]) Тогда
		
		ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаДляОткрытия(Объект[ИмяЭлементаСКартинкой]);
		
		РаботаСФайламиКлиент.Открыть(ДанныеФайла);
		
	Иначе
		
		ЗагрузитьКартинкуЛоготипФаксимиле(ИмяЭлементаСКартинкой);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКартинкуЛоготипФаксимиле(ИмяЭлементаСКартинкой)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
			
			ДобавитьКартинкуИзФайловойСистемыСРасширением(ИмяЭлементаСКартинкой);
			
		Иначе
			
			ДобавитьКартинкуИзФайловойСистемыБезРасширения(ИмяЭлементаСКартинкой);
			
		КонецЕсли;
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Элемент справочника еще не записан.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКартинкуИзФайловойСистемыБезРасширения(ИмяЭлементаСКартинкой) Экспорт
	
	ПараметрыДобавления = Новый Структура;
	ПараметрыДобавления.Вставить("ИмяЭлементаСКартинкой", ИмяЭлементаСКартинкой);
	ПараметрыДобавления.Вставить("ВладелецФайла", Объект.Ссылка);
	ПараметрыДобавления.Вставить("ФормаВладелец", ЭтотОбъект);
	ПараметрыДобавления.Вставить("НеОткрыватьКарточкуПослеСозданияИзФайла", Истина);

	// Загрузить из файловой системы без расширения работы с файлами (веб-клиент).
	Обработчик = Новый ОписаниеОповещения("ДобавитьИзФайловойСистемыБезРасширенияПослеЗагрузкиФайла", ЭтотОбъект, ПараметрыДобавления);
	НачатьПомещениеФайла(Обработчик, , , , УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзФайловойСистемыБезРасширенияПослеЗагрузкиФайла(Помещен, Адрес, ВыбранноеИмяФайла, ПараметрыВыполнения) Экспорт
	
	Если Не Помещен Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиПути = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ВыбранноеИмяФайла);
	Если СтрокиПути.Количество() < 2 Тогда
		ТекстВопроса = НСтр("ru = 'Необходимо указать файл с расширением.'");
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Повторить, НСтр("ru = 'Выбрать другой файл'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		Обработчик = Новый ОписаниеОповещения("ДобавитьИзФайловойСистемыБезРасширенияПослеОтветаНаВопросПовторить", ЭтотОбъект, ПараметрыВыполнения);
		ПоказатьВопрос(Обработчик, ТекстВопроса, Кнопки);
		Возврат;
	КонецЕсли;
	
	// Создание карточки файла в БД.
	ТекстОшибки = "";
	Попытка
		СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
		СведенияОФайле.АдресВременногоХранилищаФайла = Адрес;
		СведенияОФайле.ИмяБезРасширения = СтрокиПути[СтрокиПути.Количество() - 2];
		СведенияОФайле.РасширениеБезТочки = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(СтрокиПути[СтрокиПути.Количество() - 1]);
		ФайлСсылка = РаботаСФайламиСлужебныйВызовСервера.СоздатьФайлСВерсией(ПараметрыВыполнения.ВладелецФайла, СведенияОФайле);
	Исключение
		ТекстОшибки = ФайловыеФункцииСлужебныйКлиентСервер.ОшибкаСозданияНовогоФайла(ИнформацияОбОшибке());
	КонецПопытки;
	Если ТекстОшибки <> "" Тогда
		ПоказатьПредупреждение(, ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Владелец", ПараметрыВыполнения.ВладелецФайла);
	ПараметрыОповещения.Вставить("Файл", ФайлСсылка);
	ПараметрыОповещения.Вставить("Событие", "СозданФайл");
	Оповестить("Запись_Файл", ПараметрыОповещения);
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Создание:'"),
		ПолучитьНавигационнуюСсылку(ФайлСсылка),
		ФайлСсылка,
		БиблиотекаКартинок.Информация32);
		
	ДополнительныеПараметры = Новый Структура("ИмяЭлементаСКартинкой", ПараметрыВыполнения.ИмяЭлементаСКартинкой);
	ДобавитьКартинкуНажатиеЗавершение(ФайлСсылка, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзФайловойСистемыБезРасширенияПослеОтветаНаВопросПовторить(Ответ, ПараметрыВыполнения) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Повторить Тогда
		ДобавитьКартинкуИзФайловойСистемыБезРасширения(ПараметрыВыполнения.ИмяЭлементаСКартинкой);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКартинкуИзФайловойСистемыСРасширением(ИмяЭлементаСКартинкой)
	
	ПараметрыДобавления = Новый Структура;
	ПараметрыДобавления.Вставить("ВладелецФайла", Объект.Ссылка);
	ПараметрыДобавления.Вставить("ФормаВладелец", ЭтотОбъект);
	ПараметрыДобавления.Вставить("НеОткрыватьКарточкуПослеСозданияИзФайла", Истина);
	
	Результат = РаботаСФайламиСлужебныйКлиент.ДобавитьИзФайловойСистемыСРасширениемСинхронно(ПараметрыДобавления);
	Если Результат.ФайлДобавлен Тогда
		ДополнительныеПараметры = Новый Структура("ИмяЭлементаСКартинкой", ИмяЭлементаСКартинкой);
		ДобавитьКартинкуНажатиеЗавершение(Результат.ФайлСсылка, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Функция возвращает навигационую ссылку файла
//
Функция ПолучитьТекущуюВерсиюКартинки(ФайлКартинки)
	
	Возврат ФайлКартинки.ТекущаяВерсия;
	
КонецФункции // ПолучитьТекущуюВерсиюКАртинки()

&НаКлиенте
// Процедура отвечает за отображение/обновление соответствующей картинки
//
Процедура УстановитьКартинкуНаФорме(АктивныйАдрес, РеквизитОбъекта)
	
	ТекущийФайл = ПолучитьТекущуюВерсиюКартинки(РеквизитОбъекта);
	АктивныйАдрес = ?(ТекущийФайл.Пустая(), "", РаботаСФайламиСлужебныйВызовСервера.ПолучитьНавигационнуюСсылкуДляОткрытия(ТекущийФайл));
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлФаксимильнаяПечатьПриИзменении(Элемент)
	
	УстановитьКартинкуНаФорме(АдресФаксимильнойПечати, Объект.ФайлФаксимильнаяПечать);
		
	Если ЗначениеЗаполнено(Объект.ФайлФаксимильнаяПечать) Тогда
		ЗагрузитьОчиститьФаксимиле = "Очистить факсимильную печать";
	Иначе
		ЗагрузитьОчиститьФаксимиле = "Загрузить факсимильную печать";
	Конецесли;

КонецПроцедуры

&НаКлиенте
Процедура ФайлЛоготипПриИзменении(Элемент)
	
	УстановитьКартинкуНаФорме(АдресЛоготипа, Объект.ФайлЛоготип);
	
	Если ЗначениеЗаполнено(Объект.ФайлЛоготип) Тогда
		ЗагрузитьОчиститьЛоготип = "Очистить логотип";
	Иначе
		ЗагрузитьОчиститьЛоготип = "Загрузить логотип";
	Конецесли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОчиститьЛоготипНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.ФайлЛоготип.Пустая() Тогда
		
		ЗагрузитьКартинкуЛоготипФаксимиле("ФайлЛоготип");
		
	Иначе
		
		ОчиститьКартинкуЛоготипФаксимиле("ФайлЛоготип");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОчиститьФаксимилеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.ФайлФаксимильнаяПечать.Пустая() Тогда
		
		ЗагрузитьКартинкуЛоготипФаксимиле("ФайлФаксимильнаяПечать");
	
	Иначе
		
		ОчиститьКартинкуЛоготипФаксимиле("ФайлФаксимильнаяПечать");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКартинкуНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяЭлементаСКартинкой = ДополнительныеПараметры.ИмяЭлементаСКартинкой;
	Модифицированность = Истина;
	
	Если ИмяЭлементаСКартинкой = "ФайлФаксимильнаяПечать" Тогда
		Объект.ФайлФаксимильнаяПечать = Результат;
		УстановитьКартинкуНаФорме(АдресФаксимильнойПечати, Результат);
		ЗагрузитьОчиститьФаксимиле = "Очистить факсимильную печать";
	Иначе
		Объект.ФайлЛоготип = Результат;
		УстановитьКартинкуНаФорме(АдресЛоготипа, Результат);
		ЗагрузитьОчиститьЛоготип = "Очистить логотип";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКартинкуИзПрисоединенныхФайлов(ИмяЭлементаСКартинкой)

	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ДополнительныеПараметры = Новый Структура("ИмяЭлементаСКартинкой", ИмяЭлементаСКартинкой);
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьКартинкуНажатиеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Справочник.Файлы.Форма.ФормаВыбора", Новый Структура("ВладелецФайла", Объект.Ссылка), Элементы[ИмяЭлементаСКартинкой],,,,ОписаниеОповещения);
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Элемент справочника еще не записан.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКартинкуЛоготипФаксимиле(ИмяЭлементаСКартинкой)

	Модифицированность = Истина;
	Если ИмяЭлементаСКартинкой = "ФайлЛоготип" Тогда
		Объект.ФайлЛоготип = Неопределено;
		УстановитьКартинкуНаФорме(АдресЛоготипа, Объект.ФайлЛоготип);
		ЗагрузитьОчиститьЛоготип = "Загрузить логотип";
	Иначе
		Объект.ФайлФаксимильнаяПечать = Неопределено;
		УстановитьКартинкуНаФорме(АдресФаксимильнойПечати, Объект.ФайлФаксимильнаяПечать);
		ЗагрузитьОчиститьФаксимиле = "Загрузить факсимильную печать";
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область КонтактнаяИнформация

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)	
	
	УправлениеКонтактнойИнформациейКлиент.ПредставлениеПриИзменении(ЭтотОбъект, Элемент);
	
	ИзмененыДанныеФизическогоЛица = Истина;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.ПредставлениеНачалоВыбора(ЭтотОбъект, Элемент, Модифицированность, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	
	Результат = УправлениеКонтактнойИнформациейКлиент.ПодключаемаяКоманда(ЭтотОбъект, Команда.Имя);
	ОбновитьКонтактнуюИнформацию(Результат);
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуВводаАдреса(ЭтотОбъект, Результат);
	
КонецПроцедуры

#КонецОбласти

#Область ДополнительныеРеквизиты

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект, РеквизитФормыВЗначение("Объект"));

КонецПроцедуры

&НаКлиенте
Процедура АдресЛоготипаНажатие(Элемент, СтандартнаяОбработка)
	ОбработатьНажатиеКартинки(СтандартнаяОбработка, "ФайлЛоготип");
КонецПроцедуры

&НаКлиенте
Процедура АдресФаксимильнойПечатиНажатие(Элемент, СтандартнаяОбработка)
	ОбработатьНажатиеКартинки(СтандартнаяОбработка, "ФайлФаксимильнаяПечать");
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБЗКБ

&НаСервере
Функция ОбновитьКонтактнуюИнформацию(Результат = Неопределено) Экспорт
	
	Возврат УправлениеКонтактнойИнформациейБП.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
	
КонецФункции

&НаСервере
Процедура ПрочитатьНаборЗаписейПериодическихСведений(ИмяРегистра, ВедущийОбъект) Экспорт
	
	РедактированиеПериодическихСведений.ПрочитатьНаборЗаписей(ЭтотОбъект, ИмяРегистра, ВедущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьРегистрацияВОрганеПФР()
	
	РедактированиеПериодическихСведений.ПрочитатьЗаписьДляРедактированияВФорме(ЭтотОбъект, "ИсторияРегистрацийВОрганеПФР", ОрганизацияСсылка);
	
КонецПроцедуры

&НаСервере
Процедура КодНалоговогоОрганаПриИзмененииНаСервере()
	
	УстановитьРегистрациюВНалоговомОргане();
	
	Если ЗначениеЗаполнено(Объект.КодНалоговогоОргана) Тогда
		Ошибка = "";
		ЗаполнитьСведенияОНалоговойИнспекцииПоКоду(Ошибка);
		Если ЗначениеЗаполнено(Ошибка) Тогда
			// Определить реквизиты налогового органа по данным веб-сервиса не удалось
			// Нужно определить платежные реквизиты по данным информационной базы
			УстановитьПредставлениеПлатежныхРеквизитов(Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган, Объект.КодНалоговогоОргана, 
					ПлатежныеРеквизитыФНСПредставление);
		КонецЕсли;
	Иначе
		ПлатежныеРеквизитыФНСПредставление  = ДанныеГосударственныхОрганов.ПредставлениеПлатежныхРеквизитовГосударственногоОргана(Неопределено);
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура КодОрганаПФРПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.КодОрганаПФР) Тогда
		ОписаниеОшибки = "";
		ЗаполнитьСведенияОбОтделенииПФР(ОписаниеОшибки);
		Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
			УстановитьПредставлениеПлатежныхРеквизитов(Перечисления.ВидыГосударственныхОрганов.ОрганПФР, Объект.КодОрганаПФР, 
						ПлатежныеРеквизитыПФРПредставление);
		КонецЕсли;
	Иначе
		Объект.НаименованиеТерриториальногоОрганаПФР = "";
		ПлатежныеРеквизитыПФРПредставление = ДанныеГосударственныхОрганов.ПредставлениеПлатежныхРеквизитовГосударственногоОргана(Неопределено);
	КонецЕсли;
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура КодОрганаФССПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.КодПодчиненностиФСС) Тогда
		ОписаниеОшибки = "";
		ЗаполнитьСведенияОбОтделенииФСС(ОписаниеОшибки);
		Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
			УстановитьПредставлениеПлатежныхРеквизитов(Перечисления.ВидыГосударственныхОрганов.ОрганФСС, Объект.КодПодчиненностиФСС, 
						ПлатежныеРеквизитыФССПредставление);
		КонецЕсли;
	Иначе
		Объект.НаименованиеТерриториальногоОрганаФСС = "";
		ПлатежныеРеквизитыФССПредставление = ДанныеГосударственныхОрганов.ПредставлениеПлатежныхРеквизитовГосударственногоОргана(Неопределено);
	КонецЕсли;
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область РегистрацияВНалоговомОргане

&НаКлиентеНаСервереБезКонтекста
Функция ВладелецРегистрации(Объект)
	
	Возврат ?(Объект.ОбособленноеПодразделение, Объект.ГоловнаяОрганизация, Объект.Ссылка);
	
КонецФункции

&НаСервере
Процедура УстановитьРегистрациюВНалоговомОргане()
	
	ВладелецРегистрации = ВладелецРегистрации(Объект);
	
	Если Объект.КПП = РегистрацияВНалоговомОргане.КПП
		И Объект.КодНалоговогоОргана = РегистрацияВНалоговомОргане.Код Тогда
		//регистрация в налоговом органе подходит, не нужно ничего изменять
		Возврат;
	КонецЕсли;
	
	СуществующаяРегистрация = Справочники.РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане(ВладелецРегистрации, Объект.КПП, Объект.КодНалоговогоОргана);
	
	Если ЗначениеЗаполнено(СуществующаяРегистрация) Тогда
		РегистрацииВНалоговомОрганеФорма.ОбновитьРегистрациюВНалоговомОргане(ЭтотОбъект, Объект.КПП, Объект.КодНалоговогоОргана, СуществующаяРегистрация);
	Иначе
		РегистрацииВНалоговомОрганеФорма.УстановитьНовуюРегистрацию(ЭтотОбъект, ВладелецРегистрации, Объект.КПП, Объект.КодНалоговогоОргана);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеРегистрацииВНалоговомОргане(ТекущийОбъект, Отказ = Ложь)
	
	Если ЗначениеЗаполнено(ТекущийОбъект.РегистрацияВНалоговомОргане) Тогда
		
		Если МожноСохранитьРегистрацию(ЭтотОбъект) Тогда
			
			РегистрацииВНалоговомОрганеФорма.ЗаписатьРегистрациюВНалоговомОргане(ЭтотОбъект, ТекущийОбъект, ВладелецРегистрации(ТекущийОбъект));
			
			РегистрацииВНалоговомОрганеФорма.ЗаписатьНаборЗаписейИсторииРегистрацийВНалоговомОргане(ЭтотОбъект, ТекущийОбъект.Ссылка);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьРегистрациюВНалоговомОргане()
	
	РегистрацииВНалоговомОрганеФорма.ПрочитатьНаборЗаписейИсторииРегистрацийВНалоговомОргане(ЭтотОбъект, Объект.Ссылка);
	
	Если ЗначениеЗаполнено(Объект.РегистрацияВНалоговомОргане)
		И ОбщегоНазначения.СсылкаСуществует(Объект.РегистрацияВНалоговомОргане) Тогда
		
		РегистрацияВНалоговомОрганеОбъект = Объект.РегистрацияВНалоговомОргане.ПолучитьОбъект();
		ЗначениеВРеквизитФормы(РегистрацияВНалоговомОрганеОбъект, "РегистрацияВНалоговомОргане");
		ОтчетностьПодписываетПредставитель = ?(ЗначениеЗаполнено(РегистрацияВНалоговомОргане.Представитель), 1, 0);
		
	ИначеЕсли ЗначениеЗаполнено(Объект.КодНалоговогоОргана)
		ИЛИ ЗначениеЗаполнено(Объект.КПП) Тогда
		
		УстановитьРегистрациюВНалоговомОргане();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьРегистрациюВНалоговомОргане()
	
	Если МожноСохранитьРегистрацию(ЭтотОбъект) Тогда
		
		РегистрацииВНалоговомОрганеФорма.ЗаписатьРегистрациюВНалоговомОргане(ЭтотОбъект, Объект, ВладелецРегистрации(Объект));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция МожноСохранитьРегистрацию(Форма)
	
	Возврат ЗначениеЗаполнено(Форма.РегистрацияВНалоговомОргане.Код)
			И (Форма.ЭтоФизЛицо ИЛИ ЗначениеЗаполнено(Форма.РегистрацияВНалоговомОргане.КПП));
	
КонецФункции

&НаСервере
Процедура ОбновитьРегистрациюПослеЗаписиВФормеРегистрации(НоваяРегистрация)
	
	РеквизитыРегистрации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НоваяРегистрация, "КПП, Код");
	Если Объект.КПП <> РеквизитыРегистрации.КПП
		ИЛИ Объект.КодНалоговогоОргана <> РеквизитыРегистрации.Код Тогда
		
		// Была изменена регистрация в налоговом органе, при этом у нее изменились ключевые реквизиты
		// При записи регистрации в налоговом органе был перезаписан и элемент справочника организации.
		// Необходимо его перечитать для обновления данных
		
		Прочитать();
		
	Иначе
		
		РегистрацииВНалоговомОрганеФорма.ОбновитьРегистрациюВНалоговомОргане(ЭтотОбъект, Объект.КПП, Объект.КодНалоговогоОргана, НоваяРегистрация);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеРедактированияИсторииРегистрацийВНалоговомОргане()
	
	Если ИсторияРегистрацийВНалоговомОрганеНаборЗаписей.Количество() > 0 Тогда
		
		АктуальнаяЗапись = РегистрацииВНалоговомОрганеФорма.АктуальнаяЗаписьИстории(ЭтотОбъект);
		РегистрацииВНалоговомОрганеФорма.ОбновитьРегистрациюВНалоговомОргане(ЭтотОбъект, Объект.КПП, Объект.КодНалоговогоОргана, АктуальнаяЗапись.РегистрацияВНалоговомОргане);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеСведенийОбОрганизации

&НаКлиенте
Процедура ВыполнитьЗаполнениеРеквизитовПоИНН()
	
	ОписаниеОшибки = "";
	ЗаполнитьРеквизитыПоИНННаСервере(ОписаниеОшибки);
	
	// Обработка ошибок
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Если ОписаниеОшибки = "НеУказаныПараметрыАутентификации" Тогда
			
			ТекстВопроса = НСтр("ru='Для автоматического заполнения реквизитов
				|необходимо подключиться к Интернет-поддержке пользователей.
				|Подключиться сейчас?'");
			ПараметрыВопроса = Новый Структура("ВызовПослеПодключения", "ЗаполнитьРеквизитыПоИНННаСервере");
			ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержку", ЭтотОбъект, ПараметрыВопроса);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		Иначе
			ПоказатьПредупреждение(, ОписаниеОшибки);
		КонецЕсли;
	ИначеЕсли ЭтоФизЛицо Тогда
		ФизическоеЛицоФИОПриИзменении();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗаполнениеСведенийОНалоговойИнспекции()
	
	ОписаниеОшибки = "";
	ЗаполнитьСведенияОНалоговойИнспекцииПоКоду(ОписаниеОшибки);
	
	// Обработка ошибок
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Если ОписаниеОшибки = "НеУказаныПараметрыАутентификации" Тогда
			
			ТекстВопроса = НСтр("ru='Для автоматического заполнения реквизитов контрагентов
				|необходимо подключиться к Интернет-поддержке пользователей.
				|Подключиться сейчас?'");
				
			ПараметрыВопроса = Новый Структура("ВызовПослеПодключения", "ЗаполнитьСведенияОНалоговойИнспекцииПоКоду");
			ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержку", ЭтотОбъект, ПараметрыВопроса);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		Иначе
			ПоказатьПредупреждение(, ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗаполнениеСведенийОбОтделенииФСС()
	
	ОписаниеОшибки = "";
	ЗаполнитьСведенияОбОтделенииФСС(ОписаниеОшибки);
	
	// Обработка ошибок
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Если ОписаниеОшибки = "НеУказаныПараметрыАутентификации" Тогда
			
			ТекстВопроса = НСтр("ru='Для автоматического заполнения реквизитов контрагентов
				|необходимо подключиться к Интернет-поддержке пользователей.
				|Подключиться сейчас?'");
			
			ПараметрыВопроса = Новый Структура("ВызовПослеПодключения", "ЗаполнитьСведенияОбОтделенииФСС");
			ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержку", ЭтотОбъект, ПараметрыВопроса);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		Иначе
			ПоказатьПредупреждение(, ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗаполнениеСведенийОбОтделенииПФР()
	
	ОписаниеОшибки = "";
	ЗаполнитьСведенияОбОтделенииПФР(ОписаниеОшибки);
	
	// Обработка ошибок
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Если ОписаниеОшибки = "НеУказаныПараметрыАутентификации" Тогда
			
			ТекстВопроса = НСтр("ru='Для автоматического заполнения реквизитов контрагентов
				|необходимо подключиться к Интернет-поддержке пользователей.
				|Подключиться сейчас?'");
				
			ПараметрыВопроса = Новый Структура("ВызовПослеПодключения", "ЗаполнитьСведенияОбОтделенииПФР");
			ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержку", ЭтотОбъект, ПараметрыВопроса);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		Иначе
			ПоказатьПредупреждение(, ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоДаннымЕГРНаКлиенте()

	Если НЕ ЗаполнятьРеквизитыПоИНН Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолеПоискаИНН) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Введите ИНН'"));
		ТекущийЭлемент = Элементы.ПолеПоискаИНН;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Наименование) 
		ИЛИ (ЗначениеЗаполнено(ЮрАдресОрганизации) 
		И ЮрАдресОрганизации <> УправлениеКонтактнойИнформациейКлиентСерверБП.ПредставлениеПустойГиперссылки()) Тогда
		ТекстВопроса = НСтр("ru='Перезаполнить текущие реквизиты?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьРеквизитыПоИННЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ВыполнитьЗаполнениеРеквизитовПоИНН();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоИННЗавершение(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ВыполнитьЗаполнениеРеквизитовПоИНН();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПоИНННаСервере(ОписаниеОшибки = "")
	
	Если ОтобразитьЗаполнениеПоДаннымЕГР Тогда
		ИННОбъекта = ПолеПоискаИНН;
	Иначе
		ИННОбъекта = Объект.ИНН;
	КонецЕсли;
	
	Если ЭтоФизЛицо Тогда
		Реквизиты = СервисДанныхЕдиныхГосРеестров.РеквизитыПредпринимателяПоИНН(ИННОбъекта);
	Иначе
		Реквизиты = СервисДанныхЕдиныхГосРеестров.РеквизитыЮрЛицаПоИНН(ИННОбъекта);
	КонецЕсли;
	Если ЗначениеЗаполнено(Реквизиты.ОписаниеОшибки) Тогда
		ОписаниеОшибки = Реквизиты.ОписаниеОшибки;
		Возврат;
	КонецЕсли;
	
	Объект.ИНН          = Реквизиты.ИНН;
	Если Реквизиты.Свойство("КПП") Тогда
		Объект.КПП          = Реквизиты.КПП;
	КонецЕсли;
	Объект.Наименование = Реквизиты.Наименование;
	Объект.НаименованиеПолное      = Реквизиты.НаименованиеПолное;
	Объект.НаименованиеСокращенное = Реквизиты.НаименованиеСокращенное;
	
	СвязанныеДанные = Новый Структура();
	
	Объект.ОГРН = Реквизиты.РегистрационныйНомер;
	
	Если Реквизиты.Свойство("КодОКВЭД")
		И ЗначениеЗаполнено(Реквизиты.КодОКВЭД) Тогда
		
		Объект.КодОКВЭД          = Реквизиты.КодОКВЭД;
		Объект.НаименованиеОКВЭД = ОКВЭД.Получить(Объект.КодОКВЭД);
		
	КонецЕсли;
	
	Если Реквизиты.Свойство("ПравоваяФорма")
		И ЗначениеЗаполнено(Реквизиты.ПравоваяФорма) Тогда
		
		// ищем по предварительно заданным значениям подстановки
		ТаблицаПодстановки = Справочники.Организации.ТаблицаВыбораРеквизитовДляПодстановки();
		СтрокаПодстановки = ТаблицаПодстановки.Найти(ВРЕГ(Реквизиты.ПравоваяФорма), "ПравоваяФорма");
		Если СтрокаПодстановки <> Неопределено Тогда
			Объект.КодОКОПФ = СтрокаПодстановки.КодОКОПФ;
			Объект.НаименованиеОКОПФ = ОКОПФ.Получить(Объект.КодОКОПФ);
			Объект.КодОКФС  = СтрокаПодстановки.КодОКФС;
			Объект.НаименованиеОКФС = ОКФС.Получить(Объект.КодОКФС);
		Иначе
			ПараметрыОКОПФ = Справочники.Организации.ПолучитьПараметрыФормыВыбораДляКода("ОКОПФ", ТекущаяДатаСеанса());
			ЗначениеОКОПФ = ПараметрыОКОПФ.СписокКодов.Найти(Реквизиты.ПравоваяФорма, "Наименование");
			Если ЗначениеОКОПФ <> Неопределено Тогда
				Объект.КодОКОПФ          = ЗначениеОКОПФ.Код;
				Объект.НаименованиеОКОПФ = ЗначениеОКОПФ.Наименование;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Контактная информация
	
	Если Реквизиты.Свойство("ЮридическийАдрес")
		И ЗначениеЗаполнено(Реквизиты.ЮридическийАдрес) Тогда
		
		ПредставлениеАдреса = Реквизиты.ЮридическийАдрес.Представление;
		ЗначенияПолейАдреса = Реквизиты.ЮридическийАдрес.КонтактнаяИнформация;
		
		ЗаполнитьЭлементКонтактнойИнформации("ЮрАдресОрганизации", ПредставлениеАдреса, ЗначенияПолейАдреса);
		ЗаполнитьЭлементКонтактнойИнформации("ФактАдресОрганизации", ПредставлениеАдреса, ЗначенияПолейАдреса);
		ЗаполнитьЭлементКонтактнойИнформации("ПочтовыйАдресОрганизации", ПредставлениеАдреса, ЗначенияПолейАдреса);
		
	КонецЕсли;
	
	Если Реквизиты.Свойство("Телефон")
		И ЗначениеЗаполнено(Реквизиты.Телефон) Тогда
		
		ПредставлениеТелефона = Реквизиты.Телефон.Представление;
		ЗначенияПолейТелефона = Реквизиты.Телефон.КонтактнаяИнформация;
		
		ЗаполнитьЭлементКонтактнойИнформации("ТелефонОрганизации", ПредставлениеТелефона, ЗначенияПолейТелефона);
		
	КонецЕсли;
	
	Если Реквизиты.Свойство("Руководитель")
		И ЗначениеЗаполнено(Реквизиты.Руководитель) Тогда
		
		СвязанныеДанные.Вставить("Руководитель", Реквизиты.Руководитель);
			ФамилияИмяОтчество = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 %2 %3'"),
				Реквизиты.Руководитель.Фамилия, Реквизиты.Руководитель.Имя, Реквизиты.Руководитель.Отчество);
		Руководитель = НаименованиеОтветственногоЛица(ФамилияИмяОтчество, Реквизиты.Руководитель.Должность);
		
	КонецЕсли;
	
	//Устанавливаем сведения о налоговой инспекции
	//В том случае, если указан юридический адрес, получаем код налоговой инспекции по адресу
	//и заполняем реквизиты инспеции по коду
	//В том случае, если юридического адреса нет - заполняем данные о налоговой инспекции
	//из кода в ЕГРЮЛ/ЕГРИП
	Если Реквизиты.Свойство("ЮридическийАдрес")
		И ЗначениеЗаполнено(Реквизиты.ЮридическийАдрес) Тогда
		ОписаниеОшибкиАдрес = "";
		ЗаполнитьСведенияОНалоговойИнспекцииПоАдресу(Реквизиты.ЮридическийАдрес.КонтактнаяИнформация, ОписаниеОшибкиАдрес);
		Если ЗначениеЗаполнено(ОписаниеОшибкиАдрес)
			И ЗначениеЗаполнено(Реквизиты.РегистрацияВНалоговомОргане)
			И ЗначениеЗаполнено(Реквизиты.РегистрацияВНалоговомОргане.Код) Тогда
			
			Объект.КодНалоговогоОргана = Реквизиты.РегистрацияВНалоговомОргане.Код;
			УстановитьРегистрациюВНалоговомОргане();
			ЗаполнитьСведенияОНалоговойИнспекцииПоКоду();
			
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Реквизиты.РегистрацияВНалоговомОргане) Тогда
		
		Объект.КодНалоговогоОргана = Реквизиты.РегистрацияВНалоговомОргане.Код;
		
		УстановитьРегистрациюВНалоговомОргане();
		
		ЗаполнитьСведенияОНалоговойИнспекцииПоКоду();
		
	КонецЕсли;
	
	Если Реквизиты.Свойство("РегистрацияВПенсионномФонде")
		И ЗначениеЗаполнено(Реквизиты.РегистрацияВПенсионномФонде) Тогда
		Объект.КодОрганаПФР = Реквизиты.РегистрацияВПенсионномФонде.КодОрганаПФР;
		Объект.НаименованиеТерриториальногоОрганаПФР = Реквизиты.РегистрацияВПенсионномФонде.НаименованиеОрганаПФР;
		Если ЭтоФизЛицо Тогда
			Объект.ИПРегистрационныйНомерПФР = Реквизиты.РегистрацияВПенсионномФонде.РегистрационныйНомерПФР;	
		Иначе
			Объект.РегистрационныйНомерПФР = Реквизиты.РегистрацияВПенсионномФонде.РегистрационныйНомерПФР;
			ИсторияРегистрацийВОрганеПФР.РегистрационныйНомерПФР = Объект.РегистрационныйНомерПФР;
		КонецЕсли;
		
		ЗаполнитьСведенияОбОтделенииПФР();
		
	КонецЕсли;
	
	Если Реквизиты.Свойство("РегистрацияВФСС")
		И ЗначениеЗаполнено(Реквизиты.РегистрацияВФСС) Тогда
		
		Если НЕ ЗначениеЗаполнено(Реквизиты.РегистрацияВФСС.КодПодчиненности) Тогда
			СимволПричиныРегистрации = ?(Объект.ОбособленноеПодразделение, "2", ?(ЭтоФизЛицо, "3", "1"));
			Объект.КодПодчиненностиФСС = Реквизиты.РегистрацияВФСС.КодОрганаФСС + СимволПричиныРегистрации;
		Иначе
			Объект.КодПодчиненностиФСС = Реквизиты.РегистрацияВФСС.КодПодчиненности;
		КонецЕсли;
		Объект.НаименованиеТерриториальногоОрганаФСС = Реквизиты.РегистрацияВФСС.НаименованиеОрганаФСС;
		Если ЭтоФизЛицо Тогда
			Объект.ИПРегистрационныйНомерФСС = Реквизиты.РегистрацияВФСС.РегистрационныйНомерФСС;
		Иначе
			Объект.РегистрационныйНомерФСС = Реквизиты.РегистрацияВФСС.РегистрационныйНомерФСС;
		КонецЕсли;
		
		ЗаполнитьСведенияОбОтделенииФСС();
		
	КонецЕсли;
	
	Если ЭтоФизЛицо Тогда
		
		ФИОФизическихЛиц.Фамилия  = Реквизиты.Фамилия;
		ФИОФизическихЛиц.Имя      = Реквизиты.Имя;
		ФИОФизическихЛиц.Отчество = Реквизиты.Отчество;
		ФИОФизическихЛиц.Период   = ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведений();
		
		Если Реквизиты.Свойство("СвидетельствоОРегистрации")
			И ЗначениеЗаполнено(Реквизиты.СвидетельствоОРегистрации) Тогда
			
			Объект.СвидетельствоСерияНомер = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 №%2'"), 
									Реквизиты.СвидетельствоОРегистрации.Серия, Реквизиты.СвидетельствоОРегистрации.Номер);
			Объект.СвидетельствоДатаВыдачи = Реквизиты.СвидетельствоОРегистрации.Дата;
			
		КонецЕсли;
		
		Если Реквизиты.Свойство("КодСтраныГражданства")
			И ЗначениеЗаполнено(Реквизиты.КодСтраныГражданства) Тогда
			
			ДанныеСтраныМира = Справочники.СтраныМира.ДанныеСтраныМира(Реквизиты.КодСтраныГражданства);
			Если ЗначениеЗаполнено(ДанныеСтраныМира.Ссылка) Тогда
				Гражданство = ДанныеСтраныМира.Ссылка;
			ИначеЕсли ЗначениеЗаполнено(ДанныеСтраныМира.Наименование)
				И Справочники.СтраныМира.ЕстьПравоДобавления() Тогда
				СтранаМира = Справочники.СтраныМира.СоздатьЭлемент();
				СтранаМира.Заполнить(ДанныеСтраныМира);
				СтранаМира.Записать();
				Гражданство = СтранаМира.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		Объект.НаименованиеСокращенное = Реквизиты.Наименование;
		СтруктураНаименования = РазложитьСтрокуНаименования(Объект.НаименованиеСокращенное);
		Объект.Наименование   = СформироватьНаименование(СтруктураНаименования);
		
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОНалоговойИнспекцииПоАдресу(ЗначенияПолейАдреса, ОписаниеОшибки = "")
	
	Если НЕ ЗначениеЗаполнено(ЗначенияПолейАдреса) Тогда
		Возврат;
	КонецЕсли;
	
	СведенияОНалоговомОрганеПоАдресу = ДанныеАдресногоКлассификатора.НалоговыйОрганПоАдресу(ЗначенияПолейАдреса);
	Если ЗначениеЗаполнено(СведенияОНалоговомОрганеПоАдресу.ОписаниеОшибки) Тогда
		ОписаниеОшибки = СведенияОНалоговомОрганеПоАдресу.ОписаниеОшибки;
		Возврат;
	КонецЕсли;
	
	Объект.КодНалоговогоОргана = ?(ЭтоФизЛицо, 
		СведенияОНалоговомОрганеПоАдресу.КодНалоговойДляФизическихЛиц,
		СведенияОНалоговомОрганеПоАдресу.КодНалоговойДляЮридическихЛиц);
	
	УстановитьРегистрациюВНалоговомОргане();
	
	ЗаполнитьСведенияОНалоговойИнспекцииПоКоду();
	
	РегистрацияВНалоговомОргане.КодПоОКАТО = СведенияОНалоговомОрганеПоАдресу.КодПоОКАТО;
	РегистрацияВНалоговомОргане.КодПоОКТМО = СведенияОНалоговомОрганеПоАдресу.КодПоОКТМО;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОНалоговойИнспекцииПоКоду(ОписаниеОшибки = "")
	
	Если НЕ ЗначениеЗаполнено(Объект.КодНалоговогоОргана) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыНалоговогоОргана = ДанныеГосударственныхОрганов.РеквизитыНалоговогоОрганаПоКоду(Объект.КодНалоговогоОргана);
	
	Если ЗначениеЗаполнено(РеквизитыНалоговогоОргана.ОписаниеОшибки) Тогда
		ОписаниеОшибки = РеквизитыНалоговогоОргана.ОписаниеОшибки;
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РеквизитыНалоговогоОргана.Ссылка) Тогда
		ДанныеГосударственныхОрганов.ОбновитьДанныеГосударственногоОргана(РеквизитыНалоговогоОргана);
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ПлатежныеРеквизитыФНСПредставление = ДанныеГосударственныхОрганов.ПредставлениеПлатежныхРеквизитовГосударственногоОргана(РеквизитыНалоговогоОргана);
	
	РегистрацияВНалоговомОргане.Наименование     = РеквизитыНалоговогоОргана.Наименование;
	РегистрацияВНалоговомОргане.НаименованиеИФНС = РеквизитыНалоговогоОргана.ПолноеНаименование;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОтделенииФСС(ОписаниеОшибки = "")
	
	Если НЕ ЗначениеЗаполнено(Объект.КодПодчиненностиФСС) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыОтделенияФСС = ДанныеГосударственныхОрганов.РеквизитыОтделенияФССПоКоду(Объект.КодПодчиненностиФСС);
	
	Если ЗначениеЗаполнено(РеквизитыОтделенияФСС.ОписаниеОшибки) Тогда
		ОписаниеОшибки = РеквизитыОтделенияФСС.ОписаниеОшибки;
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РеквизитыОтделенияФСС.Ссылка) Тогда
		ДанныеГосударственныхОрганов.ОбновитьДанныеГосударственногоОргана(РеквизитыОтделенияФСС);
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ПлатежныеРеквизитыФССПредставление = ДанныеГосударственныхОрганов.ПредставлениеПлатежныхРеквизитовГосударственногоОргана(РеквизитыОтделенияФСС);
	
	Объект.НаименованиеТерриториальногоОрганаФСС = РеквизитыОтделенияФСС.Наименование;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОтделенииПФР(ОписаниеОшибки = "")
	
	Если НЕ ЗначениеЗаполнено(Объект.КодОрганаПФР) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыОтделенияПФР = ДанныеГосударственныхОрганов.РеквизитыОтделенияПФРПоКоду(Лев(Объект.КодОрганаПФР, 3));
	
	Если ЗначениеЗаполнено(РеквизитыОтделенияПФР.ОписаниеОшибки) Тогда
		ОписаниеОшибки = РеквизитыОтделенияПФР.ОписаниеОшибки;
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РеквизитыОтделенияПФР.Ссылка) Тогда
		ДанныеГосударственныхОрганов.ОбновитьДанныеГосударственногоОргана(РеквизитыОтделенияПФР);
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ПлатежныеРеквизитыПФРПредставление = ДанныеГосударственныхОрганов.ПредставлениеПлатежныхРеквизитовГосударственногоОргана(РеквизитыОтделенияПФР);
	
КонецПроцедуры

&НаСервере
Функция СведенияОНалоговомОрганеПоАдресу(ЗначенияПолейАдреса)
	
	Если НЕ ЗначениеЗаполнено(ЗначенияПолейАдреса) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СведенияОНалоговомОрганеПоАдресу = ДанныеАдресногоКлассификатора.НалоговыйОрганПоАдресу(ЗначенияПолейАдреса);
	Если ЗначениеЗаполнено(СведенияОНалоговомОрганеПоАдресу.ОписаниеОшибки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СведенияОНалоговомОрганеПоАдресу.Вставить("КодНалоговогоОргана",
		?(ЭтоФизЛицо, 
			СведенияОНалоговомОрганеПоАдресу.КодНалоговойДляФизическихЛиц,
			СведенияОНалоговомОрганеПоАдресу.КодНалоговойДляЮридическихЛиц));
	
	Возврат СведенияОНалоговомОрганеПоАдресу;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьЭлементКонтактнойИнформации(ИмяРеквизита, Представление, ЗначенияПолей)
	
	Отбор  = Новый Структура("ИмяРеквизита", ИмяРеквизита);
	Строки = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
	ДанныеСтроки = ?(Строки.Количество() = 0, Неопределено, Строки[0]);
	
	Если ДанныеСтроки <> Неопределено Тогда
		
		ДанныеСтроки.Представление = Представление;
		ДанныеСтроки.ЗначенияПолей = ЗначенияПолей;
		ЭтотОбъект[ИмяРеквизита]   = Представление;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НаименованиеОтветственногоЛица(ФамилияИмяОтчество, Должность)
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 (%2)'"), ФамилияИмяОтчество, Должность);
	
КонецФункции

&НаКлиенте
Процедура ПодключитьИнтернетПоддержку(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержкуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(Оповещение);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИнтернетПоддержкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Если ДополнительныеПараметры.Свойство("ВызовПослеПодключения") Тогда
			
			Если ДополнительныеПараметры.ВызовПослеПодключения = "ЗаполнитьРеквизитыПоИНННаСервере" Тогда
				
				ЗаполнитьРеквизитыПоИНННаСервере();
				
			ИначеЕсли ДополнительныеПараметры.ВызовПослеПодключения = "ЗаполнитьСведенияОНалоговойИнспекцииПоКоду" Тогда
				
				ЗаполнитьСведенияОНалоговойИнспекцииПоКоду();
				
			ИначеЕсли ДополнительныеПараметры.ВызовПослеПодключения = "ЗаполнитьСведенияОбОтделенииФСС" Тогда
				
				ЗаполнитьСведенияОбОтделенииФСС();
				
			ИначеЕсли ДополнительныеПараметры.ВызовПослеПодключения = "ЗаполнитьСведенияОбОтделенииПФР" Тогда
				
				ЗаполнитьСведенияОбОтделенииПФР();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежныеРеквизитыФНСПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ВидГосударственногоОргана", ПредопределенноеЗначение("Перечисление.ВидыГосударственныхОрганов.НалоговыйОрган"));
	ПараметрыФормы.Вставить("КодГосударственногоОргана", Объект.КодНалоговогоОргана);
	ПараметрыФормы.Вставить("НаименованиеГосударственногоОргана", РегистрацияВНалоговомОргане.НаименованиеИФНС);
	ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзменениеПлатежныхРеквизитовФНС", ЭтотОбъект, ПараметрыФормы);
	
	ОткрытьФорму("Справочник.Контрагенты.Форма.ПлатежныеРеквизитыГосударственныхОрганов", ПараметрыФормы, ЭтотОбъект, ЭтотОбъект, , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежныеРеквизитыФССПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ВидГосударственногоОргана", ПредопределенноеЗначение("Перечисление.ВидыГосударственныхОрганов.ОрганФСС"));
	ПараметрыФормы.Вставить("КодГосударственногоОргана", Объект.КодПодчиненностиФСС);
	ПараметрыФормы.Вставить("НаименованиеГосударственногоОргана", Объект.НаименованиеТерриториальногоОрганаФСС);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзменениеПлатежныхРеквизитовФСС", ЭтотОбъект, ПараметрыФормы);
	
	ОткрытьФорму("Справочник.Контрагенты.Форма.ПлатежныеРеквизитыГосударственныхОрганов", ПараметрыФормы, ЭтотОбъект, ЭтотОбъект, , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежныеРеквизитыПФРПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ВидГосударственногоОргана", ПредопределенноеЗначение("Перечисление.ВидыГосударственныхОрганов.ОрганПФР"));
	ПараметрыФормы.Вставить("КодГосударственногоОргана", Объект.КодОрганаПФР);
	ПараметрыФормы.Вставить("НаименованиеГосударственногоОргана", Объект.НаименованиеТерриториальногоОрганаПФР);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзменениеПлатежныхРеквизитовПФР", ЭтотОбъект, ПараметрыФормы);
	
	ОткрытьФорму("Справочник.Контрагенты.Форма.ПлатежныеРеквизитыГосударственныхОрганов", ПараметрыФормы, ЭтотОбъект, ЭтотОбъект, , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеПлатежныхРеквизитовФНС(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = Истина Тогда
		
		УстановитьПредставлениеПлатежныхРеквизитов(
			ДопПараметры.ВидГосударственногоОргана,
			ДопПараметры.КодГосударственногоОргана,
			ПлатежныеРеквизитыФНСПредставление);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеПлатежныхРеквизитовФСС(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = Истина Тогда
		
		УстановитьПредставлениеПлатежныхРеквизитов(
			ДопПараметры.ВидГосударственногоОргана,
			ДопПараметры.КодГосударственногоОргана,
			ПлатежныеРеквизитыФССПредставление);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеПлатежныхРеквизитовПФР(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = Истина Тогда
		
		УстановитьПредставлениеПлатежныхРеквизитов(
			ДопПараметры.ВидГосударственногоОргана,
			ДопПараметры.КодГосударственногоОргана,
			ПлатежныеРеквизитыПФРПредставление);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПредставлениеПлатежныхРеквизитов(Вид, Код, ПлатежныеРеквизитыПредставление)
	
	Если ЗначениеЗаполнено(Код) Тогда
		ГосударственныйОрган = ДанныеГосударственныхОрганов.ГосударственныйОрган(Вид, Код);
	Иначе
		ГосударственныйОрган = Неопределено;
	КонецЕсли;
	
	ПлатежныеРеквизитыПредставление = ДанныеГосударственныхОрганов.ПредставлениеПлатежныхРеквизитовГосударственногоОргана(ГосударственныйОрган);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьЗаполнениеРеквизитовПоИНН()

	ЗаполнятьРеквизитыПоИНН = Истина;

КонецПроцедуры 

#КонецОбласти

ЗаполнятьРеквизитыПоИНН = Истина;