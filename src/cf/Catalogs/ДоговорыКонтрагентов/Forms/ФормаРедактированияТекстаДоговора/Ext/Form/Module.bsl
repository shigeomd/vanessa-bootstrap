// Хранит Истина, если запись ссылки на файл договора произведено 
// в основной форме элемента справочника, открытом в другом окне.
&НаКлиенте
Перем СозданиеФайлаОбработаноОсновнойФормойДоговора;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	ЦветФонаЗаменяемогоПараметра = ПечатьДоговоров.ЦветФонаЗаменяемогоПараметра();

	// Если задан файл договора, открываем именно его, 
	// иначе получаем договор из объекта для печати.
	Если ЗначениеЗаполнено(Параметры.ФайлДоговора) Тогда
		ФайлДоговора = Параметры.ФайлДоговора;
		
		ДоговорКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлДоговора, "ВладелецФайла");
		ОбъектПечати = Параметры.ОбъектПечати;
		
	ИначеЕсли ЗначениеЗаполнено(Параметры.ШаблонДоговора) Тогда
	
		ШаблонДоговора = Параметры.ШаблонДоговора;
		ОбъектПечати = Параметры.ОбъектПечати;
		
	Иначе
		
		ОбъектПечати = Параметры.ОбъектПечати;
		
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ОбъектПечати) Тогда
		ВызватьИсключение НСтр("ru = 'Не определен договор или документ, для которого необходимо распечатать текст договора.'");
	КонецЕсли;

	ЗагрузитьСведенияОДоговореКонтрагента();
	
	Если ЗначениеЗаполнено(ФайлДоговора) Тогда
		
		ПроверитьФайлАктуаленИУстановитьТолькоПросмотр(Отказ);
		
		// Если Файл договора не актуален, 
		// тогда ПриОткрытии получим новую версию файла
		Если ТекущийФайлАктуален Тогда
			
			ЗагрузитьФайлДоговора();
			
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеЗаполнено(ШаблонДоговора) Тогда
			ЗагрузитьШаблонДоговора();
		Иначе
			// Нигде не смогли найти, какой шаблон использовать.
			ВызватьИсключение НСтр("ru = 'Не указан шаблон договора для редактирования текста договора.'");
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеФормой();
	
	Если НЕ ТолькоПросмотр Тогда
		ДобавитьДополнительныеРеквизитыИДопСвойства()
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(ФайлДоговора) И НЕ ТекущийФайлАктуален Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ОбработчикОжиданияПолучитьИЗагрузитьФайлИзХранилища", 0.1, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
	
		Если Элементы.ФорматированныйДокумент.ТолькоПросмотр Тогда
		
			СтандартнаяОбработка = Ложь;
		
		Иначе
		
			// На форме нет основного реквизита, поэтому спрашивает о необходимости 
			// сохранения изменений самостоятельно.
			ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
			
			ПоказатьВопрос(ОписаниеОповещения, 
				НСтр("ru = 'Данные были изменены. Сохранить изменения?'"),
				РежимДиалогаВопрос.ДаНетОтмена,
				,
				КодВозвратаДиалога.Да);
			
			Отказ = Истина;
		
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ДоговорыКонтрагентов_СозданиеФайлаОбработаноОсновнойФормойДоговора"
		И Параметр = ДоговорКонтрагента Тогда
		// Запомним, что ссылка на файл записана в основной форме элемента справочника,
		// и дополнительно ее записывать не требуется.
		СозданиеФайлаОбработаноОсновнойФормойДоговора = Истина;
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("Справочник.ДоговорыКонтрагентов.Форма.СохранениеПечатнойФормы") Тогда
		
		Если ВыбранноеЗначение <> Неопределено И ВыбранноеЗначение <> КодВозвратаДиалога.Отмена Тогда
			
			Если ВыбранноеЗначение.ВариантСохранения = "СохранитьВПапку" Тогда
				СохранитьДоговорВПапку(ВыбранноеЗначение.ПапкаДляСохранения);
			Иначе
				ЗаписатьФайлДоговораНаКлиенте();
				Состояние(НСтр("ru = 'Сохранение успешно завершено.'"));
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийКомандныхПанелейФормы

&НаКлиенте
Процедура Сохранить(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОбъектПечати", ДоговорКонтрагента);
	
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.Форма.СохранениеПечатнойФормы", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)

	ОтправитьДоговорПоПочте();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Команда)

	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФайлПослеУстановкиРасширенияРаботыСФайлами", ЭтотОбъект);

	ТекстСообщения = НСтр("ru = 'Для открытия текст договора из внешнего файла рекомендуется установить расширение для веб-клиента 1С:Предприятие.'");

	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОписаниеОповещения, ТекстСообщения, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблону(Команда)
	
	// Покажем форму для выбора шаблона, по которому пользователь хочет перезаполнить текст договора.

	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоШаблонуПослеВыбора", ЭтотОбъект);

	ОткрытьФорму("Справочник.ШаблоныДоговоров.ФормаВыбора", 
		,
		ЭтотОбъект,
		,
		,
		,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

#Область РеквизитыОрганизации

// Общие реквизиты организации

&НаКлиенте
Процедура ВставитьПолноеНаименованиеОрганизации(Команда)
	ВставитьПараметр("ПолноеНаименованиеОрганизации");
КонецПроцедуры

&НаКлиенте
Процедура ВставитьБанковскиеРеквизитыОрганизации(Команда)
	ВставитьПараметр("БанковскиеРеквизитыОрганизации");
КонецПроцедуры

&НаКлиенте
Процедура ВставитьИННКППОрганизации(Команда)
	ВставитьПараметр("ИНН_КППОрганизации");
КонецПроцедуры

&НаКлиенте
Процедура ВставитьОГРНОрганизации(Команда)
	ВставитьПараметр("ОГРНОрганизации");
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСвидетельствоОрганизации(Команда)
	ВставитьПараметр("СвидетельствоОрганизации");
КонецПроцедуры

// Контактная информация организации

&НаКлиенте
Процедура ВставитьЮридическийАдресОрганизации(Команда)
	ВставитьПараметр("ЮридическийАдресОрганизации");
КонецПроцедуры

&НаКлиенте
Процедура ВставитьГородПоЮридическомуАдресуОрганизации(Команда)
	ВставитьПараметр("ГородПоЮридическомуАдресуОрганизации");
КонецПроцедуры

&НаКлиенте
Процедура ВставитьФактическийАдресОрганизации(Команда)
	ВставитьПараметр("ФактическийАдресОрганизации");
КонецПроцедуры

&НаКлиенте
Процедура ВставитьГородПоФактическомуАдресуОрганизации(Команда)
	ВставитьПараметр("ГородПоФактическомуАдресуОрганизации");
КонецПроцедуры

&НаКлиенте
Процедура ВставитьПочтовыйАдресОрганизации(Команда)
	ВставитьПараметр("ПочтовыйАдресОрганизации");
КонецПроцедуры

&НаКлиенте
Процедура ВставитьГородПоПочтовомуАдресуОрганизации(Команда)
	ВставитьПараметр("ГородПоПочтовомуАдресуОрганизации");
КонецПроцедуры

&НаКлиенте
Процедура ВставитьТелефонОрганизации(Команда)
	ВставитьПараметр("ТелефонОрганизации");
КонецПроцедуры

&НаКлиенте
Процедура ВставитьФаксОрганизации(Команда)
	ВставитьПараметр("ФаксОрганизации");
КонецПроцедуры

&НаКлиенте
Процедура ВставитьАдресЭлектроннойПочтыОрганизации(Команда)
	ВставитьПараметр("АдресЭлектроннойПочтыОрганизации");
КонецПроцедуры

// Представитель организации

&НаКлиенте
Процедура ВставитьПредставительОрганизации(Команда)
	ВставитьПараметр("ПредставительОрганизации");
КонецПроцедуры

&НаКлиенте
Процедура ВставитьРуководителяОрганизации(Команда)
	ВставитьПараметр("РуководительОрганизации");
КонецПроцедуры

&НаКлиенте
Процедура ВставитьДолжностьРуководителяОрганизации(Команда)
	ВставитьПараметр("ДолжностьРуководителяОрганизации");
КонецПроцедуры

&НаКлиенте
Процедура ВставитьОснованиеПолномочийРуководителяОрганизации(Команда)
	ВставитьПараметр("ОснованиеПолномочийРуководителяОрганизации");
КонецПроцедуры

#КонецОбласти

#Область РеквизитыКонтрагента

// Общие реквизиты контрагента

&НаКлиенте
Процедура ВставитьПолноеНаименованиеКонтрагента(Команда)
	ВставитьПараметр("ПолноеНаименованиеКонтрагента");
КонецПроцедуры

&НаКлиенте
Процедура ВставитьБанковскиеРеквизитыКонтрагента(Команда)
	ВставитьПараметр("БанковскиеРеквизитыКонтрагента");
КонецПроцедуры

&НаКлиенте
Процедура ВставитьИННКППКонтрагента(Команда)
	ВставитьПараметр("ИНН_КППКонтрагента");
КонецПроцедуры

&НаКлиенте
Процедура ВставитьОГРНКонтрагента(Команда)
	ВставитьПараметр("ОГРНКонтрагента");
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСвидетельствоКонтрагента(Команда)
	ВставитьПараметр("СвидетельствоКонтрагента");
КонецПроцедуры

&НаКлиенте
Процедура ВставитьДокументУдостоверяющийЛичностьКонтрагента(Команда)
	ВставитьПараметр("ДокументУдостоверяющийЛичностьКонтрагента");
КонецПроцедуры

// Контактная информация контрагента

&НаКлиенте
Процедура ВставитьЮридическийАдресКонтрагента(Команда)
	ВставитьПараметр("ЮридическийАдресКонтрагента");
КонецПроцедуры

&НаКлиенте
Процедура ВставитьГородПоЮридическомуАдресуКонтрагента(Команда)
	ВставитьПараметр("ГородПоЮридическомуАдресуКонтрагента");
КонецПроцедуры

&НаКлиенте
Процедура ВставитьФактическийАдресКонтрагента(Команда)
	ВставитьПараметр("ФактическийАдресКонтрагента");
КонецПроцедуры

&НаКлиенте
Процедура ВставитьГородПоФактическомуАдресуКонтрагента(Команда)
	ВставитьПараметр("ГородПоФактическомуАдресуКонтрагента");
КонецПроцедуры

&НаКлиенте
Процедура ВставитьПочтовыйАдресКонтрагента(Команда)
	ВставитьПараметр("ПочтовыйАдресКонтрагента");
КонецПроцедуры

&НаКлиенте
Процедура ВставитьГородПоПочтовомуАдресуКонтрагента(Команда)
	ВставитьПараметр("ГородПоПочтовомуАдресуКонтрагента");
КонецПроцедуры

&НаКлиенте
Процедура ВставитьТелефонКонтрагента(Команда)
	ВставитьПараметр("ТелефонКонтрагента");
КонецПроцедуры

&НаКлиенте
Процедура ВставитьФаксКонтрагента(Команда)
	ВставитьПараметр("ФаксКонтрагента");
КонецПроцедуры

&НаКлиенте
Процедура ВставитьАдресЭлектроннойПочтыКонтрагента(Команда)
	ВставитьПараметр("АдресЭлектроннойПочтыКонтрагента");
КонецПроцедуры

// Представитель контрагента

&НаКлиенте
Процедура ВставитьПредставительКонтрагента(Команда)
	ВставитьПараметр("ПредставительКонтрагента");
КонецПроцедуры

&НаКлиенте
Процедура ВставитьРуководительКонтрагента(Команда)
	ВставитьПараметр("РуководительКонтрагента");
КонецПроцедуры

&НаКлиенте
Процедура ВставитьДолжностьРуководителяКонтрагента(Команда)
	ВставитьПараметр("ДолжностьРуководителяКонтрагента");
КонецПроцедуры

&НаКлиенте
Процедура ВставитьОснованиеПолномочийРуководителяКонтрагента(Команда)
	ВставитьПараметр("ОснованиеПолномочийРуководителяКонтрагента");
КонецПроцедуры

#КонецОбласти

#Область РеквизитыДоговора

&НаКлиенте
Процедура ВставитьДатуДоговора(Команда)
	ВставитьПараметр("ДатаДоговора");
КонецПроцедуры

&НаКлиенте
Процедура ВставитьНомерДоговора(Команда)
	ВставитьПараметр("НомерДоговора");
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСрокДействия(Команда)
	ВставитьПараметр("СрокДействияДоговора");
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСрокОплаты(Команда)
	ВставитьПараметр("СрокОплатыПоДоговору");
КонецПроцедуры

#КонецОбласти

#Область РеквизитыСчетаНаОплату

&НаКлиенте
Процедура ВставитьСуммуДокумента(Команда)
	ВставитьПараметр("СуммаДокумента");
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСуммаДокументаПрописью(Команда)
	ВставитьПараметр("СуммаДокументаПрописью");
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСуммаДокументаБезНДС(Команда)
	ВставитьПараметр("СуммаДокументаБезНДС");
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСуммаДокументаБезНДСПрописью(Команда)
	ВставитьПараметр("СуммаДокументаБезНДСПрописью");
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСуммаНДС(Команда)
	ВставитьПараметр("СуммаНДС");
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСуммаНДСПрописью(Команда)
	ВставитьПараметр("СуммаНДСПрописью");
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ВставитьДополнительныйРеквизит(Команда)
	СтрокаИндексПараметра = СтрЗаменить(Команда.Имя, "ВставитьДополнительныйРеквизит", "");
	ИндексПараметра = ?(ПустаяСтрока(СтрокаИндексПараметра),0,Число(СтрокаИндексПараметра));
	ВставитьПараметр("{" + ЭтаФорма.ДополнительныеРеквизиты[ИндексПараметра] + "}");
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеПроцедурыИФункцииУправленияФормой

&НаСервере
Процедура ЗагрузитьСведенияОДоговореКонтрагента()

	Если ТипЗнч(ОбъектПечати) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		ДоговорКонтрагента = ОбъектПечати;
	ИначеЕсли ОбъектПечати.Метаданные().Реквизиты.Найти("ДоговорКонтрагента") <> Неопределено Тогда
		ДоговорКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектПечати, "ДоговорКонтрагента");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не определен договор для %1'"), ОбъектПечати);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;

	РеквизитыДоговора 	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента, 
		"Владелец, ФайлДоговора, ДоговорПодписан, Номер, Дата");
		
	Контрагент		= РеквизитыДоговора.Владелец;
	ФайлДоговора 	= РеквизитыДоговора.ФайлДоговора;
	НомерДоговора 	= РеквизитыДоговора.Номер;
	ДатаДоговора 	= РеквизитыДоговора.Дата;
	// Считаем, что договор подписан, только если создан файл договора
	ДоговорПодписан = РеквизитыДоговора.ДоговорПодписан И ЗначениеЗаполнено(ФайлДоговора);
	
КонецПроцедуры 

&НаСервере
Процедура УправлениеФормой()
	
	Если ПодписанЭП Тогда
		Элементы.ГруппаКоманднаяПанельФорматированногоДокумента.ТекущаяСтраница = Элементы.СтраницаПодписан;
		СтатусДоговора = "Договор подписан электронной подписью";
	ИначеЕсли ДоговорПодписан Тогда
		Элементы.ГруппаКоманднаяПанельФорматированногоДокумента.ТекущаяСтраница = Элементы.СтраницаПодписан;
		СтатусДоговора = "Договор подписан";
	КонецЕсли;
	
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1 (%2)'"), ДоговорКонтрагента, Контрагент);
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияПолучитьИЗагрузитьФайлИзХранилища()
	
	ДанныеФайла = ПолучитьДанныеФайла(ФайлДоговора, , Ложь);

	ОписаниеОповещения = Новый ОписаниеОповещения("ЗакончитьРедактированиеВыполненоПомещение", ЭтотОбъект, ФайлДоговора);
	ПрисоединенныеФайлыСлужебныйКлиент.ПоместитьРедактируемыйФайлНаДискеВХранилище(ОписаниеОповещения, ДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
	
		ЗаписатьФайлДоговораНаКлиенте();
		Закрыть();
	
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		
		РазблокироватьФайлНаСервере();
	
		Модифицированность = Ложь;
		Закрыть();
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлПослеУстановкиРасширенияРаботыСФайлами(РасширениеПодключено, ДополнительныеПараметры) Экспорт

	Если НЕ РасширениеПодключено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийТекст = ФорматированныйДокумент.ПолучитьТекст(ФорматированныйДокумент.ПолучитьЗакладкуНачала(), ФорматированныйДокумент.ПолучитьЗакладкуКонца());
	Если ЗначениеЗаполнено(ТекущийТекст) Тогда
	
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФайлПослеВопросаОЗаменеЗавершение", ЭтотОбъект);
		
		ТекстВопроса = НСтр("ru = 'Текст договора будет заменен на текст из файла. Продолжить?'");
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		
	Иначе
	
		ОткрытьФайлНаКлиенте();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлПослеВопросаОЗаменеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
	
		ОткрытьФайлНаКлиенте();
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлНаКлиенте()

	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФайлПослеПомещенияВоВременноеХранилище", ЭтотОбъект);

	НачатьПомещениеФайла(ОписаниеОповещения, "", "", Истина, УникальныйИдентификатор); 

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлПослеПомещенияВоВременноеХранилище(Результат, АдресХранилища, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт

	Если Результат = Ложь Тогда
		Возврат
	КонецЕсли;
	
	ОткрытьФайлНаСервере(АдресХранилища);

КонецПроцедуры

&НаСервере
Процедура ОткрытьФайлНаСервере(Знач АдресХранилища)

	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("htm");
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	ТекстовыйДокументHTML = Новый ТекстовыйДокумент;
	ТекстовыйДокументHTML.Прочитать(ИмяВременногоФайла, КодировкаТекста.UTF8);
	
	СтруктураHTML = СтруктураHTMLСКартинками(ТекстовыйДокументHTML.ПолучитьТекст());
	
	ФорматированныйДокумент.УстановитьHTML(СтруктураHTML.ТекстHTML, СтруктураHTML.Вложения);

	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблонуПослеВыбора(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если НЕ ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		Возврат;
	КонецЕсли;

	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ШаблонДоговора", РезультатЗакрытия);

	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоШаблонуПослеПодтверждения", 
		ЭтотОбъект, ДополнительныеПараметры);

	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Заменить текущий текст договора на текст из шаблона ""%1""?'"),
		РезультатЗакрытия);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблонуПослеПодтверждения(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	ШаблонДоговора = ДополнительныеПараметры.ШаблонДоговора;
	ЗагрузитьШаблонДоговора();
	Модифицированность = Истина;

КонецПроцедуры

#КонецОбласти

#Область РаботаСШаблоном

&НаКлиенте
Процедура ВставитьПараметр(ИмяПараметра)
	
	// Значения выводим жирным шрифтом.

	ЗакладкаНачала = Неопределено;
	ЗакладкаОкончания = Неопределено;
	Элементы.ФорматированныйДокумент.ПолучитьГраницыВыделения(ЗакладкаНачала, ЗакладкаОкончания);

	ПозицияНачала = ФорматированныйДокумент.ПолучитьПозициюПоЗакладке(ЗакладкаНачала);
	ПозицияОкончания = ФорматированныйДокумент.ПолучитьПозициюПоЗакладке(ЗакладкаОкончания);

	ШрифтПоУмолчанию = Неопределено;
	ЦветФонаПоУмолчанию = Неопределено;
	ВыделенныеЭлементы = ФорматированныйДокумент.ПолучитьЭлементы(ЗакладкаНачала, ЗакладкаОкончания);
	// Ищем последний текстовый элемент среди выделенных для копирования его шрифта.
	Сч = ВыделенныеЭлементы.Количество() - 1;
	Пока Сч >= 0 Цикл
		Если ТипЗнч(ВыделенныеЭлементы[Сч]) = Тип("ТекстФорматированногоДокумента") Тогда
			ШрифтПоУмолчанию 	= ВыделенныеЭлементы[Сч].Шрифт;
			ЦветФонаПоУмолчанию = ВыделенныеЭлементы[Сч].ЦветФона;
			Прервать;
		КонецЕсли;
		Сч = Сч - 1;
	КонецЦикла;
	
	Если ШрифтПоУмолчанию = Неопределено Тогда
		ШрифтПоУмолчанию = Новый Шрифт();
	КонецЕсли;	

	Если ЦветФонаПоУмолчанию = Неопределено Тогда
		ЦветФонаПоУмолчанию = Новый Цвет();
	КонецЕсли;
	
	Если ЗакладкаНачала <> ЗакладкаОкончания Тогда 
		ФорматированныйДокумент.Удалить(ЗакладкаНачала, ЗакладкаОкончания);
		Элементы.ФорматированныйДокумент.УстановитьГраницыВыделения(ЗакладкаНачала, ЗакладкаНачала);
	КонецЕсли;
	
	// Чтобы не передавать с клиент на сервер весь форматированный документ, 
	// подгототавливаем в функции новый документ только с текстом параметра,
	// а здесь переносим его элементы в документ на форме.
	ВременныйФорматированныйДокумент = ЗаменитьПараметрНаСервере(ИмяПараметра, ОбъектПечати, ШрифтПоУмолчанию);
	
	ДобавленныеЭлементы = ВременныйФорматированныйДокумент.ПолучитьЭлементы();
	ДлинаТекста = 0;
	Для Каждого Элемент Из ДобавленныеЭлементы Цикл
		// в веб-клиенте добавляется ПереводСтроки последний элементом. Его не нужно обрабатывать.
		Если ТипЗнч(Элемент) <> Тип("ТекстФорматированногоДокумента") Тогда
			Продолжить;
		КонецЕсли;
		НовыйЭлемент = ФорматированныйДокумент.Вставить(ЗакладкаНачала, Элемент.Текст, Тип("ТекстФорматированногоДокумента"));
		Если НовыйЭлемент <> Неопределено Тогда
			ДлинаТекста = ДлинаТекста + СтрДлина(НовыйЭлемент.Текст);
			Если Элемент.Шрифт.Жирный = Истина Тогда
				НовыйЭлемент.Шрифт = Новый Шрифт(НовыйЭлемент.Шрифт, , , Истина);
			Иначе
				НовыйЭлемент.Шрифт = Новый Шрифт(НовыйЭлемент.Шрифт, , , Ложь);
			КонецЕсли;
			
			Если Лев(Элемент.Текст, 1) = "_" Тогда
				НовыйЭлемент.ЦветФона = ЦветФонаЗаменяемогоПараметра;
			Иначе
				НовыйЭлемент.ЦветФона = ЦветФонаПоУмолчанию;
			КонецЕсли;
			
			ЗакладкаНачала = НовыйЭлемент.ЗакладкаКонца;
		КонецЕсли;
	КонецЦикла;
	
	ПозицияОкончания = ПозицияНачала + ДлинаТекста;
	ЗакладкаОкончания = ФорматированныйДокумент.ПолучитьЗакладкуПоПозиции(ПозицияОкончания);
	Элементы.ФорматированныйДокумент.УстановитьГраницыВыделения(ЗакладкаНачала, ЗакладкаОкончания);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаменитьПараметрНаСервере(Знач ИмяПараметра, Знач ОбъектПечати, Знач ШрифтПоУмолчанию)

	Результат = Новый ФорматированныйДокумент;

	СведенияОСделке = ПечатьДоговоров.СведенияОСделке(ОбъектПечати);
	
	ЗначенияСоставногоПараметра = Новый Массив;
	
	Успешно = Истина;
	
	Значение = ПечатьДоговоров.ЗначениеПараметра(ИмяПараметра, СведенияОСделке, ЗначенияСоставногоПараметра, Успешно);

	ПервыйЭлементДокумента = Результат.Добавить(" ", Тип("ТекстФорматированногоДокумента"));
	ПервыйЭлементДокумента.Шрифт = Новый Шрифт(ШрифтПоУмолчанию, , , Истина);
	ПервыйЭлементДокумента.ЦветФона = ПечатьДоговоров.ЦветФонаЗаменяемогоПараметра();
	
	Если Найти(Значение, "%1%") > 0 Тогда
		ПечатьДоговоров.ВставитьСоставноеЗначение(
			Значение, 
			ЗначенияСоставногоПараметра, 
			Результат, 
			ПервыйЭлементДокумента);
	Иначе
		Результат.Добавить(Значение, Тип("ТекстФорматированногоДокумента"));
	КонецЕсли;
	
	// Удалим пустую в начале процедуры.
	Результат.Удалить(ПервыйЭлементДокумента.ЗакладкаНачала, ПервыйЭлементДокумента.ЗакладкаКонца);

	Возврат Результат;

КонецФункции

&НаСервере
Процедура ЗагрузитьШаблонДоговора()

	ПечатьДоговоров.ЗаполнитьТекстДоговораПоШаблону(
		ШаблонДоговора, ФорматированныйДокумент, ОбъектПечати);

КонецПроцедуры

&НаСервере
Процедура ДобавитьДополнительныеРеквизитыИДопСвойства()
	
	// Добавим дополнительные реквизиты и доп. свойства объектов для выбора в качестве параметров.
	
	СоответствиеДопРеквизитыГруппаЭлементов = Новый Соответствие;
	
	ВсеСвойства = Новый Массив;
	
	// Список доп. реквизитов и доп. сведений организации
	СвойстваОбъекта = УправлениеСвойствами.ПолучитьСписокСвойств(Справочники.Организации.ПустаяСсылка(), Истина, Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеСвойства, СвойстваОбъекта);
	СоответствиеДопРеквизитыГруппаЭлементов.Вставить(Элементы.ГруппаДополнительныеРеквизитыОрганизация, СвойстваОбъекта);
	
	// Список доп. реквизитов и доп. сведений контрагента
	СвойстваОбъекта = УправлениеСвойствами.ПолучитьСписокСвойств(Справочники.Контрагенты.ПустаяСсылка(), Истина, Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеСвойства, СвойстваОбъекта);
	СоответствиеДопРеквизитыГруппаЭлементов.Вставить(Элементы.ГруппаДополнительныеРеквизитыКонтрагент, СвойстваОбъекта);
	
	// Список доп. реквизитов и доп. сведений договора
	СвойстваОбъекта = УправлениеСвойствами.ПолучитьСписокСвойств(Справочники.ДоговорыКонтрагентов.ПустаяСсылка(), Истина, Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеСвойства, СвойстваОбъекта);
	СоответствиеДопРеквизитыГруппаЭлементов.Вставить(Элементы.ГруппаДополнительныеРеквизитыДоговорКонтрагента, СвойстваОбъекта);
	
	// Список доп. реквизитов и доп. сведений документа
	ЭтоСчетНаОплату = ТипЗнч(ОбъектПечати) = Тип("ДокументСсылка.СчетНаОплатуПокупателю");
	
	Если ЭтоСчетНаОплату Тогда
		СвойстваОбъекта = УправлениеСвойствами.ПолучитьСписокСвойств(Документы.СчетНаОплатуПокупателю.ПустаяСсылка(), Ложь, Истина);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеСвойства, СвойстваОбъекта);
		СоответствиеДопРеквизитыГруппаЭлементов.Вставить(Элементы.ГруппаДополнительныеРеквизитыДокумента, СвойстваОбъекта);
	Иначе
		Элементы.ГруппаПараметрыДокумента.Видимость = Ложь;
	КонецЕсли;
	
	// Текстовые поля по массиву ссылок
	РеквизитыСвойств = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ВсеСвойства, "Заголовок, Наименование");
	
	// Вставляем в подменю каждого объекта перечень всех его доп. реквизитов и доп. свойств отдельными пунктами.
	
	НомерКоманды = 0;
	Для Каждого КлючИЗначение Из СоответствиеДопРеквизитыГруппаЭлементов Цикл 
		
		МассивСвойств = КлючИЗначение.Значение;	
		
		Для Каждого СсылкаНаСвойство Из МассивСвойств Цикл
			
			ПоляСвойства = РеквизитыСвойств[СсылкаНаСвойство];
			Если ПоляСвойства = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяКоманды = "ВставитьДополнительныйРеквизит" + Формат(НомерКоманды, "ЧГ=");
			НаименованиеРеквизита = ПоляСвойства.Заголовок;
			
			Команда = Команды.Добавить(ИмяКоманды);
			Команда.Заголовок = НаименованиеРеквизита;
			Команда.Действие = "ВставитьДополнительныйРеквизит";
			Команда.ИзменяетСохраняемыеДанные = Истина;
			
			Кнопка = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), КлючИЗначение.Ключ);
			Кнопка.ИмяКоманды = ИмяКоманды;
			Кнопка.Заголовок = НаименованиеРеквизита;
			
			ЭтотОбъект.ДополнительныеРеквизиты.Добавить(ПоляСвойства.Наименование);
			
			НомерКоманды = НомерКоманды + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОткрытиеИСохранениеФайлаДоговора

&НаСервере
Процедура ПроверитьФайлАктуаленИУстановитьТолькоПросмотр(Отказ)
	
	ДанныеФайла = ПолучитьДанныеФайла(ФайлДоговора, ЭтотОбъект.УникальныйИдентификатор);
	
	УстановитьТолькоПросмотр = Ложь;
	ТекущийФайлАктуален = Истина;
	ПодписанЭП = ДанныеФайла.ПодписанЭП;
	ТекстСообщения = "";
	
	Если ДанныеФайла.Зашифрован Тогда
		Отказ = Истина;
		УстановитьТолькоПросмотр = Истина;
		ТекстСообщения = "Файл договора зашифрован. Просмотр текста договора невозможен.";
	// Если договор подписан, то открываем только на просмотр
	ИначеЕсли ПодписанЭП ИЛИ ДоговорПодписан Тогда
		УстановитьТолькоПросмотр = Истина;
		
	// Если файл редактируется из другого места, то открываем только на просмотр
	ИначеЕсли ДанныеФайла.ФайлРедактируется И НЕ ДанныеФайла.ФайлРедактируетТекущийПользователь Тогда
		УстановитьТолькоПросмотр = Истина;
		ТекстСообщения = Строка(ДанныеФайла.Редактирует) + " редактирует текст договора. Редактирование текста запрещено.";
	// Если файл редактирует текущий пользователь, то необходимо получить актуальную версию файла
	ИначеЕсли ДанныеФайла.ФайлРедактируетТекущийПользователь Тогда
		ТекущийФайлАктуален = Ложь;
	// Попытаемся заблокировать файл, если не удалось, то установим только просмотр
	Иначе
		Попытка
			ЗаблокироватьДанныеДляРедактирования(ФайлДоговора, , УникальныйИдентификатор);
		Исключение
			УстановитьТолькоПросмотр = Истина;
			ТекстСообщения = "Нельзя отредактировать текст договора! Файл договора редактируется другим пользователем!";
		КонецПопытки;
	КонецЕсли;
	
	Если УстановитьТолькоПросмотр Тогда
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		ТолькоПросмотр = Истина;
		Элементы.ФорматированныйДокумент.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьФайлДоговора()

	Попытка

		ДанныеФайла = ПолучитьДанныеФайла(ФайлДоговора, УникальныйИдентификатор, Истина);
		
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
		
		ДвоичныеДанные.Записать(ИмяВременногоФайла);
		
		ТекстовыйДокументHTML = Новый ТекстовыйДокумент;
		ТекстовыйДокументHTML.Прочитать(ИмяВременногоФайла, КодировкаТекста.UTF8);
		
		СтруктураHTML = СтруктураHTMLСКартинками(ТекстовыйДокументHTML.ПолучитьТекст());
		
		ФорматированныйДокумент.УстановитьHTML(СтруктураHTML.ТекстHTML, СтруктураHTML.Вложения);
	
	Исключение
		// Запомним сведения об ошибке для отображения сообщения пользователю при открытии
		СведенияОбОшибке = ИнформацияОбОшибке();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Произошла ошибка при открытии сохраненного файла: 
					   |%1'"),
			СведенияОбОшибке.Описание);
		
	    ТекстСообщения = НСтр("ru = 'Не удалось записать ссылку на файл с текстом договора 
	    	|в элементе справочника ""Договоры контрагентов"". 
	    	|Возможно, договор сейчас редактируется другим пользователем. 
	    	|Укажите этот файл в форме договора самостоятельно.'");
	    
	    ПодробныйТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	    	НСтр("ru = 'Произошла ошибка при открытии сохраненного файла:
	    			   |%1'"),
	    	ПодробноеПредставлениеОшибки(СведенияОбОшибке));
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Шаблоны договоров. Загрузка текста договора.'", 
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка, , , 
			ПодробныйТекстОшибки);
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		ФайлДоговора = Неопределено;
	
	КонецПопытки;
	
	// Удалим временный файл.
	УдалитьВременныйФайлНаСервер(ИмяВременногоФайла);

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьФайлДоговораНаКлиенте()

	ЭтоНовыйФайл = НЕ ЗначениеЗаполнено(ФайлДоговора);
	ЗаписатьФайлДоговораНаСервере();
	
	// Оповестим основную форму договора о том, что записали новый файл,
	// чтобы установить ссылку на новый файл в договоре.
	Если ЭтоНовыйФайл Тогда
		
		// По умолчанию считаем, что основной формы договора 
		// в текущем сеансе нет. Если она есть и обработала наше оповещение, 
		// то в ОбработкаОповещения() переменная будет установлена в Истина.
		СозданиеФайлаОбработаноОсновнойФормойДоговора = Ложь;
	
		ПараметрыОповещения = Новый Структура();
		ПараметрыОповещения.Вставить("ФайлДоговора", ФайлДоговора);
		ПараметрыОповещения.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
		
		Оповестить("ДоговорыКонтрагентов_СозданиеФайлаДоговора", ПараметрыОповещения, ЭтотОбъект);
		
		Если НЕ СозданиеФайлаОбработаноОсновнойФормойДоговора Тогда
			// Текущая форма редактирования текста договора либо открыта из документа,
			// либо основную форму договора уже закрыли, она не получила нашего оповещения
			// и не ответила нам. 
			// Поэтому необходимо самостоятельно записывать ссылку на созданный файл в договор.
			ЗаписатьСсылкаНаФайлВДоговорКонтрагента();
		КонецЕсли; 
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаписатьФайлДоговораНаСервере()
	
	// подготовка временной папки
	ИмяВременнойПапки = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(ИмяВременнойПапки);

	ИмяФайлаБезРасширения = СокрЛП(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1 %2'"), Контрагент, ДоговорКонтрагента));
	ИмяФайлаБезРасширения = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайлаБезРасширения);
	
	ПолноеИмяФайла = УникальноеИмяФайла(ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременнойПапки) + ИмяФайлаБезРасширения);
	
	// Подготовим HTML документ на основе форматированного документа
	ПолноеИмяФайла = ПодготовитьHTMLНаОсновеФорматированногоДокумента(ИмяВременнойПапки, ИмяФайлаБезРасширения);
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
	
	АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
	
	ИмяФайлаБезРасширения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1 %2'"), Контрагент, ДоговорКонтрагента);
	ИмяФайлаБезРасширения = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайлаБезРасширения);
	
	Если ЗначениеЗаполнено(ФайлДоговора) Тогда
		
		РазблокироватьДанныеДляРедактирования(ФайлДоговора, УникальныйИдентификатор);
		
		ИнформацияОФайле = Новый Структура();
		ИнформацияОФайле.Вставить("АдресФайлаВоВременномХранилище", АдресФайлаВоВременномХранилище);
		ИнформацияОФайле.Вставить("АдресВременногоХранилищаТекста", "");
		
		ПрисоединенныеФайлы.ОбновитьПрисоединенныйФайл(ФайлДоговора, ИнформацияОФайле);
		
	Иначе
		// Новый файл
		ФайлДоговора = ПрисоединенныеФайлы.ДобавитьФайл(
			ДоговорКонтрагента,
			ИмяФайлаБезРасширения,
			"htm",
			,
			,
			АдресФайлаВоВременномХранилище,
			,
			"");
		
	КонецЕсли;
	
	Модифицированность = Ложь;
	
	// Удалим временный файл.
	УдалитьВременныйФайлНаСервер(ИмяВременнойПапки);
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьHTMLНаОсновеФорматированногоДокумента(ИмяПапки, ИмяФайла)
	
	ПолноеИмяФайла = УникальноеИмяФайла(ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяПапки) + ИмяФайла);
	
	ТекстHTML = "";
	Вложения = Новый Структура();
	
	ФорматированныйДокумент.ПолучитьHTML(ТекстHTML, Вложения);
	
	ТекстовыйДокументHTML = Новый ТекстовыйДокумент;
	ТекстовыйДокументHTML.УстановитьТекст(ТекстHTML);
	// записываем документ во временную папку
	ТекстовыйДокументHTML.Записать(ПолноеИмяФайла, КодировкаТекста.UTF8);
	
	// Подготовим картинки
	ИмяПапкиКартинок = "_files";
	ПутьКПапкеКартинок = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяПапки) + "_files";
	СоздатьКаталог(ПутьКПапкеКартинок);
	Для Каждого Картинка Из Вложения Цикл
		
		Картинка.Значение.Записать(ПутьКПапкеКартинок+ "\" + Картинка.Ключ + ".jpg");
		
	КонецЦикла;
	
	ВставитьКартинкиВHTML(ПолноеИмяФайла);
	
	УдалитьВременныйФайлНаСервер(ПутьКПапкеКартинок);
	
	Возврат ПолноеИмяФайла;
	
КонецФункции

&НаСервере
Процедура ЗаписатьСсылкаНаФайлВДоговорКонтрагента()

	ДоговорОбъект = ДоговорКонтрагента.ПолучитьОбъект();

	Попытка

		ДоговорОбъект.Заблокировать();
		ДоговорОбъект.ФайлДоговора = ФайлДоговора;
		ДоговорОбъект.Записать();
		ДоговорОбъект.Разблокировать();
		
	Исключение
		СведенияОбОшибке = ИнформацияОбОшибке();
		ТекстСообщения = НСтр("ru = 'Не удалось записать ссылку на файл с текстом договора 
									|в элементе справочника ""Договоры контрагентов"". 
									|Возможно, договор сейчас редактируется другим пользователем.'");
	
		ПодробныйТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось записать ссылку на файл с текстом договора в элементе справочника ""Договоры контрагентов"" по причине: %1'"),
			ПодробноеПредставлениеОшибки(СведенияОбОшибке));
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Шаблоны договоров. Сохранение текста договора.'", 
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка, , , 
			ПодробныйТекстОшибки);
	
		ВызватьИсключение ТекстСообщения;
			
	КонецПопытки;

КонецПроцедуры

&НаСервере
Процедура РазблокироватьФайлНаСервере()
	
	РазблокироватьДанныеДляРедактирования(ФайлДоговора, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеФайла(Знач ПрисоединенныйФайл, Знач ИдентификаторФормы = Неопределено, Знач ПолучатьСсылкуНаДвоичныеДанные = Истина)
	
	Возврат ПрисоединенныеФайлы.ПолучитьДанныеФайла(
		ПрисоединенныйФайл, ИдентификаторФормы, ПолучатьСсылкуНаДвоичныеДанные);
	
КонецФункции

&НаКлиенте
Процедура ЗакончитьРедактированиеВыполненоПомещение(ИнформацияОФайле, ФайлДоговора) Экспорт
	
	Если ИнформацияОФайле <> Неопределено Тогда
		ПоместитьФайлВХранилищеИОсвободить(ФайлДоговора, ИнформацияОФайле);
		ОповеститьОбИзменении(ФайлДоговора);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоместитьФайлВХранилищеИОсвободить(Знач ПрисоединенныйФайл, Знач ИнформацияОФайле)
	
	ПрисоединенныеФайлыСлужебный.ПоместитьФайлВХранилищеИОсвободить(
		ПрисоединенныйФайл, ИнформацияОФайле);
		
	// Загрузим новый файл договора, после того как освободили
	ЗагрузитьФайлДоговора();
	УправлениеФормой();
	
	ДобавитьДополнительныеРеквизитыИДопСвойства()
	
КонецПроцедуры

&НаСервере
Процедура УдалитьВременныйФайлНаСервер(ИмяФайла)

	Если НЕ ЗначениеЗаполнено(ИмяФайла) Тогда
		Возврат;
	КонецЕсли;

	// Удалим временный файл.
	Попытка
		УдалитьФайлы(ИмяФайла);
	Исключение
		СведенияОбОшибке = ИнформацияОбОшибке();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось удалить временный файл по причине: %1'"),
			ПодробноеПредставлениеОшибки(СведенияОбОшибке));
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Шаблоны договоров. Сохранение текста договора.'", 
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка, , , 
			ТекстСообщения);
	КонецПопытки;

КонецПроцедуры

&НаСервере
Функция ПоместитьФайлВоВременноеХранилищеНаСервере()

	Папка = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(Папка);
	
	// Указываем имя файла вложения
	ИмяДоговора = СокрЛП(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Договор № %1 от %2'"), НомерДоговора, Формат(ДатаДоговора, "ДЛФ=DD")));
	ИмяДоговора = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяДоговора);
	
	ИмяФайла = ИмяДоговора + ".htm";
	
	ПолноеИмяФайла = ПодготовитьHTMLНаОсновеФорматированногоДокумента(Папка, ИмяФайла);
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
	ПутьВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ЭтотОбъект.УникальныйИдентификатор);
	ОписаниеФайла = Новый Структура;
	ОписаниеФайла.Вставить("Представление", ИмяФайла);
	ОписаниеФайла.Вставить("АдресВоВременномХранилище", ПутьВоВременномХранилище);

	УдалитьВременныйФайлНаСервер(Папка);
	
	Возврат ОписаниеФайла;

КонецФункции

&НаКлиенте
Процедура СохранитьДоговорВПапку(Знач ПапкаДляСохранения)
	
	ОписаниеФайла = ПоместитьФайлВоВременноеХранилищеНаСервере();
	
	#Если ВебКлиент Тогда
		ПолучитьФайл(ОписаниеФайла.АдресВоВременномХранилище, ОписаниеФайла.Представление, Истина);
	#Иначе
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ПапкаДляСохранения", ПапкаДляСохранения);
	
		ОписаниеОповещения = Новый ОписаниеОповещения("СохранитьДоговорВПапкуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ПапкаДляСохранения = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПапкаДляСохранения);
		
		ПолучаемыйФайл 			= Новый ОписаниеПередаваемогоФайла;
		ПолучаемыйФайл.Имя 		= ОписаниеФайла.Представление;
		ПолучаемыйФайл.Хранение = ОписаниеФайла.АдресВоВременномХранилище;
		
		ПолучаемыеФайлы = Новый Массив;
		ПолучаемыеФайлы.Добавить(ПолучаемыйФайл);
		
		НачатьПолучениеФайлов(ОписаниеОповещения, ПолучаемыеФайлы, ПапкаДляСохранения, Ложь);
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьДоговорВПапкуЗавершение(ПолученныеФайлы, ДополнительныеПараметры) Экспорт

	Если ПолученныеФайлы = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'При сохранении возникла ошибка'"));
	Иначе
		Состояние(НСтр("ru = 'Сохранение успешно завершено'"), , НСтр("ru = 'в папку:'") + " " + ДополнительныеПараметры.ПапкаДляСохранения);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОтправкаПоЭлектроннойПочте

&НаКлиенте
Процедура ОтправитьДоговорПоПочте()
	
	// Перед созданием нового письма проверим настройки учетной записи для отправки почты
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьДоговорПоПочтеНастройкаУчетнойЗаписиПредложена", ЭтотОбъект);
	РаботаСПочтовымиСообщениямиКлиент.ПроверитьНаличиеУчетнойЗаписиДляОтправкиПочты(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьДоговорПоПочтеНастройкаУчетнойЗаписиПредложена(УчетнаяЗаписьНастроена, ДополнительныеПараметры) Экспорт
	
	// Если нет настроенной учетной записи прерываем подготовку отправки
	Если УчетнаяЗаписьНастроена <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	// Подготавливаем параметры нового письма
	ПараметрыНовогоПисьма = ПодготовитьПараметрыПисьма();
	
	// Инициируем создание нового исходящего письма
	РаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо(ПараметрыНовогоПисьма);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНаименованиеКонтрагента(Ссылка)
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат "";
	КонецЕсли; 
	
	ИменаРеквизитовОбъекта = Новый Соответствие;
	
	ИменаРеквизитовОбъекта.Вставить(Тип("СправочникСсылка.Контрагенты"),    "НаименованиеПолное");
	ИменаРеквизитовОбъекта.Вставить(Тип("СправочникСсылка.Организации"),    "НаименованиеСокращенное");
	ИменаРеквизитовОбъекта.Вставить(Тип("СправочникСсылка.ФизическиеЛица"), "Наименование");
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИменаРеквизитовОбъекта[ТипЗнч(Ссылка)]);
	
КонецФункции 

&НаСервере
Функция УдалитьЛишниеПробелы(ИсходнаяСтрока)

	Пока Найти(ИсходнаяСтрока, "  ") > 0  Цикл
	
		ИсходнаяСтрока = СтрЗаменить(ИсходнаяСтрока, "  ", " ");
	
	КонецЦикла; 
	
	Возврат ИсходнаяСтрока;

КонецФункции

&НаСервере
Функция ПодготовитьПараметрыПисьма()

	// Получаем сведения о контрагенте, нам понабится только Email
	ДатаСреза = ?(ЗначениеЗаполнено(ДатаДоговора), ДатаДоговора, ТекущаяДатаСеанса());
	СведенияОКонтрагенте = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Контрагент, ДатаСреза);
	
	Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "Организация");
	
	Email = СведенияОКонтрагенте.Email;
	// Сформируем вложения, в письмо они вставляются в виде массива
	// Поэтоиму подготовим массив с единственным значением - файлом договора
	СписокВложений = СписокВложений();
	
	ИмяДоговора = СокрЛП(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Договор № %1 от %2'"), НомерДоговора, Формат(ДатаДоговора, "ДЛФ=DD")));
	
	ТемаПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 %2 %3'"),
		ИмяДоговора,
		"для " + ПолучитьНаименованиеКонтрагента(Контрагент),
		"от " + ПолучитьНаименованиеКонтрагента(Организация)
		);
		
	ТекстПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'К письму приложен %1 %2 %3'"),
		ИмяДоговора,
		"для " + ПолучитьНаименованиеКонтрагента(Контрагент),
		"от " + ПолучитьНаименованиеКонтрагента(Организация)
		);
	
	ПараметрыНовогоПисьма = Новый Структура;
	ПараметрыНовогоПисьма.Вставить("Получатель", СведенияОКонтрагенте.Email);
	ПараметрыНовогоПисьма.Вставить("Тема", УдалитьЛишниеПробелы(ТемаПисьма));
	ПараметрыНовогоПисьма.Вставить("Текст", УдалитьЛишниеПробелы(ТекстПисьма));
	ПараметрыНовогоПисьма.Вставить("Вложения", СписокВложений);
	ПараметрыНовогоПисьма.Вставить("УдалятьФайлыПослеОтправки", Истина);
	
	Возврат ПараметрыНовогоПисьма
	
КонецФункции

&НаСервере
Функция СписокВложений()
	
	Результат = Новый Массив;
	
	// подготовка временной папки
	ИмяВременнойПапки = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(ИмяВременнойПапки);
	
	// Указываем имя файла вложения
	ИмяДоговора = СокрЛП(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Договор № %1 от %2'"), НомерДоговора, Формат(ДатаДоговора, "ДЛФ=DD")));
	ИмяДоговора = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяДоговора);
	
	ИмяФайла = ИмяДоговора + ".htm";
	
	ПолноеИмяФайла = ПодготовитьHTMLНаОсновеФорматированногоДокумента(ИмяВременнойПапки, ИмяФайла);
	
	// Добавляем подготовленный документ в список вложений
	ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
	ПутьВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ЭтотОбъект.УникальныйИдентификатор);
	ОписаниеФайла = Новый Структура;
	ОписаниеФайла.Вставить("Представление", ИмяФайла);
	ОписаниеФайла.Вставить("АдресВоВременномХранилище", ПутьВоВременномХранилище);
	
	Результат.Добавить(ОписаниеФайла);
	
	// Если печатаем из счета на оплату, добавим во вложении "Приложение к договору"
	Если ТипЗнч(ОбъектПечати) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		
		МассивОбъектов = Новый Массив;
		МассивОбъектов.Добавить(ОбъектПечати);
		
		ТаблицаСведенийСчетНаОплату = Документы.СчетНаОплатуПокупателю.ПолучитьТаблицуСведенийСчетаНаОплату(МассивОбъектов);
		ТабличныйДокументПриложенияКДоговору = ПечатьТорговыхДокументов.ПечатьПриложенияКДоговору(ТаблицаСведенийСчетНаОплату, Новый СписокЗначений);
		
		// Указываем имя файла вложения
		ИмяДоговораДляПриложения = СокрЛП(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Договору № %1 от %2'"), НомерДоговора, Формат(ДатаДоговора, "ДЛФ=DD")));
		ИмяДоговораДляПриложения = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяДоговораДляПриложения);

		ИмяФайла = НСтр("ru = 'Приложение к '") + ИмяДоговораДляПриложения + ".htm";
		ПолноеИмяФайла = УникальноеИмяФайла(ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременнойПапки) + ИмяФайла);
		ТабличныйДокументПриложенияКДоговору.Записать(ПолноеИмяФайла, ТипФайлаТабличногоДокумента.HTML);
		
		// Добавляем подготовленный документ в список вложений
		ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
		ПутьВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ЭтотОбъект.УникальныйИдентификатор);
		ОписаниеФайла = Новый Структура;
		ОписаниеФайла.Вставить("Представление", ИмяФайла);
		ОписаниеФайла.Вставить("АдресВоВременномХранилище", ПутьВоВременномХранилище);
		
		Результат.Добавить(ОписаниеФайла);
		
	КонецЕсли;

	// Удаляем временные файлы
	УдалитьВременныйФайлНаСервер(ИмяВременнойПапки);

	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СтруктураHTMLСКартинками(ТекстHTML)
	
	СтруктураHTML = Новый Структура();
	
	Вложения = Новый Структура();
	ТекстСДвоичнымиДанными = ТекстHTML;
	
	КоличествоВхождений = СтрЧислоВхождений(ТекстHTML, "data:image/");
	
	Для Сч = 1 По КоличествоВхождений Цикл
		// НачалоКартинкаВДвоичныхДанных - здесь начинается описание картинки в двоичных данных
		НачалоКартинкаВДвоичныхДанных = Найти(ТекстСДвоичнымиДанными, "data:image/");
		// НачалоДвоичныхДанных - здесь начинаются закодированные двоичные данные
		НачалоДвоичныхДанных = Найти(ТекстСДвоичнымиДанными, ";base64,") + 8;
		// КартинкаВДвоичныхДанных - Текст двоичных данных, который нужно заменить на картинку в виде пути
		КартинкаВДвоичныхДанных = Сред(ТекстСДвоичнымиДанными, НачалоКартинкаВДвоичныхДанных, НачалоДвоичныхДанных-НачалоКартинкаВДвоичныхДанных);
		// Отрезаем использованную подстроку, чтобы повторно в ней не искать
		ТекстСДвоичнымиДанными = Сред(ТекстСДвоичнымиДанными, НачалоДвоичныхДанных);
		// КонецДвоичныхДанных - здесь заканчиваются закодированные двоичные данные
		КонецДвоичныхДанных = Найти(ТекстСДвоичнымиДанными, "='");
		// Непосредственно двоичные данные
		ДвоичныеДанные = Лев(ТекстСДвоичнымиДанными, КонецДвоичныхДанных);
		// Вставляем в виде вложения картинку
		Вложения.Вставить("image"+сч, Новый Картинка(Base64Значение(ДвоичныеДанные)));
		// Собрали текст для замены Картинки в двоичных данных, на картинку в виде вложения
		КартинкаВДвоичныхДанных = КартинкаВДвоичныхДанных + ДвоичныеДанные;
		// Отрезаем обработанную часть текста
		ТекстСДвоичнымиДанными = Сред(ТекстСДвоичнымиДанными, КонецДвоичныхДанных);
		// Меняем в тексте картинку в двоичных данных, на вложение.
		ТекстHTML = СтрЗаменить(ТекстHTML, КартинкаВДвоичныхДанных, "image"+сч);
	КонецЦикла;
	
	СтруктураHTML.Вставить("ТекстHTML", ТекстHTML);
	СтруктураHTML.Вставить("Вложения", Вложения);
	
	Возврат СтруктураHTML;
	
КонецФункции

&НаСервере
Процедура ВставитьКартинкиВHTML(ИмяФайлаHTML)
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент();
	ТекстовыйДокумент.Прочитать(ИмяФайлаHTML, КодировкаТекста.UTF8);
	ТекстHTML = ТекстовыйДокумент.ПолучитьТекст();
	
	ФайлHTML = Новый Файл(ИмяФайлаHTML);
	
	ИмяПапкиКартинок = "_files";
	ПутьКПапкеКартинок = СтрЗаменить(ФайлHTML.ПолноеИмя, ФайлHTML.Имя, ИмяПапкиКартинок);
	
	// ожидается, что в папке будут только картинки
	ФайлыКартинок = НайтиФайлы(ПутьКПапкеКартинок, "*");
	
	Для Каждого ФайлКартинки Из ФайлыКартинок Цикл
		КартинкаТекстом = Base64Строка(Новый ДвоичныеДанные(ФайлКартинки.ПолноеИмя));
		КартинкаТекстом = "data:image/" + Сред(ФайлКартинки.Расширение,2) + ";base64," + Символы.ПС + КартинкаТекстом;
		
		ТекстHTML = СтрЗаменить(ТекстHTML, ФайлКартинки.ИмяБезРасширения, КартинкаТекстом);
	КонецЦикла;
		
	ТекстовыйДокумент.УстановитьТекст(ТекстHTML);
	ТекстовыйДокумент.Записать(ИмяФайлаHTML, КодировкаТекста.UTF8);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УникальноеИмяФайла(ИмяФайла)
	
	Файл = Новый Файл(ИмяФайла);
	ИмяБезРасширения = Файл.ИмяБезРасширения;
	Расширение = Файл.Расширение;
	Папка = Файл.Путь;
	
	Счетчик = 1;
	Пока Файл.Существует() Цикл
		Счетчик = Счетчик + 1;
		Файл = Новый Файл(Папка + ИмяБезРасширения + " (" + Счетчик + ")" + Расширение);
	КонецЦикла;
	
	Возврат Файл.ПолноеИмя;
	
КонецФункции

#КонецОбласти

#КонецОбласти
