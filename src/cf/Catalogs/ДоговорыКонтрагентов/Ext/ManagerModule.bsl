#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура ЗаполнитьРуководителяОрганизации(ДоговорОбъект) Экспорт

	ДатаСреза = ?(ЗначениеЗаполнено(ДоговорОбъект.Дата), ДоговорОбъект.Дата, ТекущаяДатаСеанса());
	
	ОтветственныеЛица = ОтветственныеЛицаБП.ОтветственныеЛица(ДоговорОбъект.Организация, ДатаСреза);
	
	ДанныеУполномоченногоЛица = ОтветственныеЛицаБП.ДанныеУполномоченногоЛица(
		ДоговорОбъект.Организация, Пользователи.ТекущийПользователь());
		
	Если НЕ ЗначениеЗаполнено(ДанныеУполномоченногоЛица.Руководитель)
		ИЛИ ДанныеУполномоченногоЛица.Руководитель = ОтветственныеЛица.Руководитель Тогда
		ДоговорОбъект.Руководитель 			= ОтветственныеЛица.Руководитель;
		ДоговорОбъект.ДолжностьРуководителя = ОтветственныеЛица.РуководительДолжность;
		ДоговорОбъект.ЗаРуководителяПоПриказу = "";
	Иначе
		ДанныеФизЛица = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(
			ДоговорОбъект.Организация, ДанныеУполномоченногоЛица.Руководитель, ДатаСреза);
	
		ДоговорОбъект.Руководитель				= ДанныеУполномоченногоЛица.Руководитель;
		ДоговорОбъект.ДолжностьРуководителя		= ДанныеФизЛица.Должность;
		ДоговорОбъект.ЗаРуководителяПоПриказу	= ДанныеУполномоченногоЛица.ПриказРуководитель;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьРуководителяКонтрагента(ДоговорОбъект) Экспорт

	КонтактноеЛицо = Справочники.КонтактныеЛица.КонтактноеЛицоПоУмолчанию(ДоговорОбъект.Владелец);

	Если ЗначениеЗаполнено(КонтактноеЛицо) Тогда
		РеквизитыКонтактногоЛица = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			КонтактноеЛицо, "Фамилия, Имя, Отчество, Должность");
		
		ДоговорОбъект.РуководительКонтрагента = 
			?(ЗначениеЗаполнено(РеквизитыКонтактногоЛица.Фамилия), РеквизитыКонтактногоЛица.Фамилия, "")
			+ ?(ЗначениеЗаполнено(РеквизитыКонтактногоЛица.Имя), " " + РеквизитыКонтактногоЛица.Имя, "")
			+ ?(ЗначениеЗаполнено(РеквизитыКонтактногоЛица.Отчество), " " + РеквизитыКонтактногоЛица.Отчество, "");
		ДоговорОбъект.ДолжностьРуководителяКонтрагента = РеквизитыКонтактногоЛица.Должность;
	
	КонецЕсли;

КонецПроцедуры
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедуры обновления ИБ
//

Процедура ЗаполнитьПризнакПредъявляетНДС() Экспорт
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);							// Субконто1
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);								// Субконто2
	
	ЕстьСубконтоДокументыРасчетов      = ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами, "ВидСубконто") <> Неопределено;
	Если ЕстьСубконтоДокументыРасчетов Тогда
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);	// Субконто3
	Иначе
		Возврат;
	КонецЕсли;
	
	МассивСчетов = Новый Массив;
    МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиУЕ);
	
	ВидыДоговоров = Новый Массив;
	ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
	ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	Запрос.УстановитьПараметр("Счета", МассивСчетов);
	Запрос.УстановитьПараметр("ВидыДоговоров", ВидыДоговоров);
    	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчетнаяПолитикаОрганизацийСрезПоследних.Организация КАК Организация
	|ПОМЕСТИТЬ ОрганизацииПлательщикиНДС
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних КАК УчетнаяПолитикаОрганизацийСрезПоследних
	|ГДЕ
	|	УчетнаяПолитикаОрганизацийСрезПоследних.ПлательщикНДС = ИСТИНА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Субконто2 КАК Субконто2,
	|	СУММА(ЕСТЬNULL(НДСПредъявленный.НДС, 0)) КАК НДС
	|ПОМЕСТИТЬ НДСПоВзаиморасчетам
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			,
	|			,
	|			,
	|			Счет В (&Счета),
	|			&ВидыСубконто,
	|			Организация В
	|				(ВЫБРАТЬ
	|					ОрганизацииПлательщикиНДС.Организация
	|				ИЗ
	|					ОрганизацииПлательщикиНДС),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСПредъявленный КАК НДСПредъявленный
	|		ПО ХозрасчетныйОбороты.Субконто3 = НДСПредъявленный.СчетФактура
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Субконто2
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Субконто2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСПоВзаиморасчетам.Субконто2 КАК Договор,
	|	НДСПоВзаиморасчетам.НДС
	|ПОМЕСТИТЬ ДоговорыБезНДС
	|ИЗ
	|	НДСПоВзаиморасчетам КАК НДСПоВзаиморасчетам
	|ГДЕ
	|	НДСПоВзаиморасчетам.НДС = 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЖурналУчетаСчетовФактур.СчетФактура.ДоговорКонтрагента КАК СчетФактураДоговор
	|ПОМЕСТИТЬ СчетаФактуры
	|ИЗ
	|	РегистрСведений.ЖурналУчетаСчетовФактур КАК ЖурналУчетаСчетовФактур
	|ГДЕ
	|	ЖурналУчетаСчетовФактур.Организация В
	|			(ВЫБРАТЬ
	|				ОрганизацииПлательщикиНДС.Организация
	|			ИЗ
	|				ОрганизацииПлательщикиНДС)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактураДоговор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоговорыБезНДС.Договор
	|ПОМЕСТИТЬ ПоставщикПоДоговоруНеПредъявляетНДС
	|ИЗ
	|	ДоговорыБезНДС КАК ДоговорыБезНДС
	|ГДЕ
	|	НЕ ДоговорыБезНДС.Договор В
	|				(ВЫБРАТЬ
	|					СчетаФактуры.СчетФактураДоговор
	|				ИЗ
	|					СчетаФактуры)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК ДоговорСНДС,
	|	ДоговорыКонтрагентов.Владелец КАК Контрагент
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	НЕ ДоговорыКонтрагентов.Ссылка В
	|				(ВЫБРАТЬ
	|					ПоставщикПоДоговоруНеПредъявляетНДС.Договор
	|				ИЗ
	|					ПоставщикПоДоговоруНеПредъявляетНДС)
	|	И ДоговорыКонтрагентов.ЭтоГруппа = ЛОЖЬ
	|	И ДоговорыКонтрагентов.ВидДоговора В(&ВидыДоговоров)";
	
	Результат 			= Запрос.Выполнить();
	ВыборкаДоговоров 	= Результат.Выбрать();
	
	Пока ВыборкаДоговоров.Следующий() Цикл
		ДоговорОбъект = ВыборкаДоговоров.ДоговорСНДС.ПолучитьОбъект();
		ДоговорОбъект.ПредъявляетНДС 		= Истина;
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДоговорОбъект);
		Исключение
			ТекстСообщения = НСтр("ru = 'Не удалось установить признак ""Предъяляет НДС"" для договора %1 контрагента %2, рекомендуется самостоятельно установить необходимое значение'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыборкаДоговоров.ДоговорСНДС, ВыборкаДоговоров.Контрагент);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецПопытки;

	КонецЦикла;
		
КонецПроцедуры

Функция ПолучитьКоличествоПодчиненныхЭлементовПоВладельцу(Владелец) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Владелец";
	Запрос.УстановитьПараметр("Владелец", Владелец);

	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Количество();

КонецФункции

Функция ПодготовитьСписокРазрешенныхВалют(ВалютаРегламентированногоУчета, ВсеКромеВалютыРеглУчета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("ВсеКромеВалютыРеглУчета", ВсеКромеВалютыРеглУчета);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Валюты.Ссылка
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|ГДЕ
	|	(Валюты.Ссылка <> &ВалютаРегламентированногоУчета и &ВсеКромеВалютыРеглУчета)
	|	ИЛИ (Валюты.Ссылка = &ВалютаРегламентированногоУчета и НЕ &ВсеКромеВалютыРеглУчета)";
	
	ВыборкаИзЗапроса = Запрос.Выполнить().Выбрать();
	
	ВозвращаемыйМассив = Новый Массив;
	
	Пока ВыборкаИзЗапроса.Следующий() Цикл
		ВозвращаемыйМассив.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", ВыборкаИзЗапроса.Ссылка));
	КонецЦикла;
	
	Если ВозвращаемыйМассив.Количество() = 0 Тогда
		ВозвращаемыйМассив.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Справочники.Валюты.ПустаяСсылка()));
	КонецЕсли;
	
	Возврат ВозвращаемыйМассив;
	
КонецФункции

// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Текст договора
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Договор";
	КомандаПечати.Представление = НСтр("ru = 'Договор'");
	КомандаПечати.Обработчик    = "ПечатьДоговоровКлиент.ВыполнитьКомандуПечатиТекстаДоговора";
	КомандаПечати.СписокФорм    = "ФормаЭлемента";
	
КонецПроцедуры

// Возвращает структуру с перечнем полей, которые могут быть поставлены в текст 
// договора по данным из справочника "Договоры контрагентов".
//
Функция ПодготовитьПараметрыПечатиТекстаДоговора(ДоговорКонтрагента) Экспорт

	РеквизитыДоговора 	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента, 
		"Владелец, Организация, Дата, Номер, СрокДействия, ВидДоговора, ВалютаВзаиморасчетов,
		|УстановленСрокОплаты, СрокОплаты,
		|Руководитель, ЗаРуководителяПоПриказу, ДолжностьРуководителя, 
		|РуководительКонтрагента, ЗаРуководителяКонтрагентаПоПриказу, ДолжностьРуководителяКонтрагента");
		
	// Дополнительные поля
	РеквизитыДоговора.Вставить("РуководительФИО", ""); // Фамилия Имя Отчество

	ДатаСреза = ?(ЗначениеЗаполнено(РеквизитыДоговора.Дата), РеквизитыДоговора.Дата, ТекущаяДатаСеанса());

	// Если срок оплаты не указан в самом договоре, берем его из константы.
	Если НЕ РеквизитыДоговора.УстановленСрокОплаты Тогда
		Если РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком
			ИЛИ РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку
			ИЛИ РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			РеквизитыДоговора.Вставить("СрокОплаты", Константы.СрокОплатыПоставщикам.Получить());
		Иначе
			РеквизитыДоговора.Вставить("СрокОплаты", Константы.СрокОплатыПокупателей.Получить());
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(РеквизитыДоговора.Руководитель) Тогда
		ДанныеФизЛица = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(РеквизитыДоговора.Организация, 
			РеквизитыДоговора.Руководитель, ДатаСреза, Ложь);
		Если ЗначениеЗаполнено(ДанныеФизЛица.Представление) Тогда
			РеквизитыДоговора.Вставить("РуководительФИО", ДанныеФизЛица.Представление);
		Иначе
			РеквизитыДоговора.Вставить("РуководительФИО", 
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыДоговора.Руководитель, "Наименование"));
		КонецЕсли;
		
	Иначе
		ОтветственныеЛица = ОтветственныеЛицаБП.ОтветственныеЛица(
			РеквизитыДоговора.Организация, ДатаСреза, Неопределено);
		
		РеквизитыДоговора.Вставить("Руководитель", 		ОтветственныеЛица.Руководитель);
		РеквизитыДоговора.Вставить("РуководительФИО", 	ОбщегоНазначенияБПВызовСервера.ПолучитьФамилиюИмяОтчество(
															ОтветственныеЛица.РуководительФИО.Фамилия, 
															ОтветственныеЛица.РуководительФИО.Имя,
															ОтветственныеЛица.РуководительФИО.Отчество));
		РеквизитыДоговора.Вставить("ДолжностьРуководителя", ОтветственныеЛица.РуководительДолжность);
	КонецЕсли;
	
	Возврат РеквизитыДоговора;

КонецФункции

#КонецОбласти

#КонецЕсли

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если Параметры.Отбор.Свойство("Организация") Тогда
		Если ЗначениеЗаполнено(Параметры.Отбор.Организация) Тогда
			Параметры.Отбор.Организация = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Параметры.Отбор.Организация);
		КонецЕсли;
	КонецЕсли;
	
	ЗначениеОтбора    = ?(Параметры.Отбор.Свойство("ВидДоговора"), Параметры.Отбор.ВидДоговора, Неопределено);
	ЕстьНедоступные   = Ложь;
	ДоступныеЗначения = Перечисления.ВидыДоговоровКонтрагентов.ПолучитьСписокДоступныхЗначений(
		ЗначениеОтбора, ЕстьНедоступные);
	Если ЕстьНедоступные Тогда
		Если ДоступныеЗначения.Количество() = 0 Тогда
			Параметры.Отбор.Вставить("ВидДоговора", Неопределено);
		ИначеЕсли ДоступныеЗначения.Количество() = 1 Тогда
			Параметры.Отбор.Вставить("ВидДоговора", ДоступныеЗначения[0].Значение);
		Иначе
			Параметры.Отбор.Вставить("ВидДоговора", Новый ФиксированныйМассив(ДоступныеЗначения.ВыгрузитьЗначения()));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

