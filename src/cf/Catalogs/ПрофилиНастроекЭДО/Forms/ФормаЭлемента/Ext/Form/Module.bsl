&НаКлиенте
Перем ВнутренниеДанные, СвойстваПароля, ПараметрыОбработчикаОжидания, ФормаДлительнойОперации;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФорму();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПодготовитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ЭлектронныеДокументыСлужебныйКлиент.ПроверитьИспользованиеИнтернетПоддержкаПользователей() Тогда
		Элементы.НадписьЛичныйКабинетУчастникаОбменаЭД.Видимость = Ложь;
	КонецЕсли;
#Если ВебКлиент Тогда
	Элементы.КаталогВходящихДокументов.КнопкаВыбора = Ложь;
#КонецЕсли

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если КонтролироватьСодержимоеНастроекЭД Тогда
		ТекущийОбъект.ПометитьНаУдалениеСвязанныеНастройкиЭДО(ТекущийОбъект, Отказ)
	КонецЕсли;
	
	Если ТекущийОбъект.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезFTP Тогда
		ТекущийОбъект.РесурсВходящихДокументов  = FTPКаталогВходящихДокументов;
	ИначеЕсли ТекущийОбъект.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезКаталог Тогда
		ТекущийОбъект.РесурсВходящихДокументов  = КаталогВходящихДокументов;
	ИначеЕсли ТекущийОбъект.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту Тогда
		ТекущийОбъект.РесурсВходящихДокументов  = ЭлектроннаяПочтаОрганизации;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПометитьНеДействующиеСертификатыВСписке();
	Оповестить("ОбновитьСостояниеЭД");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Объект.ПометкаУдаления = Ложь И Не ПропускатьПроверкуНастроекЭДО И ОтсутствуютПодчиненныеНастройкиЭДО() Тогда
		ТекстВопроса = НСтр("ru = 'Подключить контрагента к обмену электронными документами?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемПродолжить", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		ПараметрыФормы = Новый Структура;
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("Контрагент",         ВыбранноеЗначение);
		ЗначенияЗаполнения.Вставить("ПрофильНастроекЭДО", Объект.Ссылка);
		
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ОткрытьФорму("Справочник.СоглашенияОбИспользованииЭД.Форма.ФормаЭлемента", ПараметрыФормы, ЭтотОбъект);

	Иначе
	
		Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
			Если ВыбранноеЗначение = Истина Тогда
				Сертификат = ВнутренниеДанные["ВыбранныйСертификат"];
				СвойстваПароля = Новый Структура("Значение", ВнутренниеДанные["ВыбранныйСертификатПароль"]);
				ВнутренниеДанные.Удалить("ВыбранныйСертификат");
				ВнутренниеДанные.Удалить("ВыбранныйСертификатПароль");
			Иначе
				Сертификат = ВыбранноеЗначение;
			КонецЕсли;
			ТипВыбЗначения = ТипЗнч(Сертификат);
			Если ТипВыбЗначения = Тип("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования") Тогда
				
				// Сначала нужно проверить, что выбранный сертификат уже не содержится в списке
				МассивСтрок = Объект.СертификатыПодписейОрганизации.НайтиСтроки(Новый Структура("Сертификат", Сертификат));
				Если МассивСтрок.Количество() > 0 Тогда
					ТекстПредупреждения = НСтр("ru = 'Выбранный сертификат уже зарегистрирован в профиле настроек ЭДО.'");
					ПоказатьПредупреждение(, ТекстПредупреждения, 30);
					Возврат;
				КонецЕсли;
				
				Если ЭлектронныеДокументыСлужебныйКлиент.ПроверитьИспользованиеИнтернетПоддержкаПользователей()
					И Объект.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском") Тогда
					
					ДобавляемыйСертификат = Сертификат;
					ЗарегистрироватьСертификатТакском(ДобавляемыйСертификат);
					// Добавление сертификата срабатывает в обработчике оповещения
				ИначеЕсли Объект.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО") Тогда
					
					ДобавляемыйСертификат = Сертификат;
					ЗарегистрироватьСертификат1СЭДО();
					// Добавление сертификата срабатывает в обработчике оповещения
				Иначе
					ДобавитьСертификатПодписиВСписок(Сертификат);
					Элементы.СертификатыПодписейОрганизации.Обновить();
				КонецЕсли;
			КонецЕсли;
			СвойстваПароля = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ИнтернетПоддержкаПользователей
	
	// Механизм получения уникального идентификатора передает уникальный идентификатор
	// в виде строки в параметре оповещения с именем события
	// "ОповещениеОПолученииУникальногоИдентификатораУчастникаОбменаЭД"
	Если ИмяСобытия = "ОповещениеОПолученииУникальногоИдентификатораУчастникаОбменаЭД" Тогда
		
		Если ЗначениеЗаполнено(Источник) И Источник <> ЭтаФорма.УникальныйИдентификатор Тогда
			// Это не та форма
			Возврат;
		КонецЕсли;
		
		ДанныеИзменены = Ложь;
		ИдОрганизации = СокрЛП(Параметр);
		Если СокрЛП(Объект.ИдентификаторОрганизации) <> ИдОрганизации Тогда
			ДанныеИзменены = Истина;
			Объект.ИдентификаторОрганизации = ИдОрганизации;
		КонецЕсли;
		
		// ДобавляемыйСертификат инициализируется в ОбработкаВыбора(...)
		Если ЗначениеЗаполнено(ДобавляемыйСертификат) Тогда
			ДанныеИзменены = Истина;
			ДобавитьСертификатПодписиВСписок(ДобавляемыйСертификат);
			Элементы.СертификатыПодписейОрганизации.Обновить();
			ДобавляемыйСертификат = Неопределено;
		КонецЕсли;
		
		ЭтаФорма.Модифицированность = ДанныеИзменены;
		УправлениеДоступностьюЛичногоКабинета();
	КонецЕсли;
	
	// Конец ИнтернетПоддержкаПользователей
	
	Если ИмяСобытия = "ОповещениеОбУспешномИзмененииДанныхУчастникаОбменаЭД" Тогда
		
		ДанныеИзменены = Ложь;
		
		// ДобавляемыйСертификат инициализируется в ОбработкаВыбора(...)
		Если ЗначениеЗаполнено(ДобавляемыйСертификат) Тогда
			ДанныеИзменены = Истина;
			ДобавитьСертификатПодписиВСписок(ДобавляемыйСертификат);
			Элементы.СертификатыПодписейОрганизации.Обновить();
			ДобавляемыйСертификат = Неопределено;
		КонецЕсли;
		
		ЭтаФорма.Модифицированность = ДанныеИзменены;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПолейФормы

&НаКлиенте
Процедура СпособОбменаЭДПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторОрганизацииПриИзменении(Элемент)
	
	Объект.ИдентификаторОрганизации = СокрЛП(Объект.ИдентификаторОрганизации);
КонецПроцедуры

&НаКлиенте
Процедура КаталогВходящихДокументовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
#Если НЕ ВебКлиент Тогда
	КаталогОбмена(КаталогВходящихДокументов);
#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура НадписьЛичныйКабинетУчастникаОбменаЭДНажатие(Элемент)
	
	// Если соглашение содержит более одного сертификата, то считается,
	// что все сертификаты были зарегистрированы у оператора ЭДО ранее
	// Обращение в личный кабинет выполняется по текущему или по первому сертификату
	
	Если Объект.СертификатыПодписейОрганизации.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Для входа в личный кабинет должен быть зарегистрирован хотя бы один сертификат'");
		ПоказатьПредупреждение(, ТекстПредупреждения, 30);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПерейтиВЛичныйКабинет", ЭтотОбъект);
	Если Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'Выполнить действие можно только в записанном профиле настроек ЭДО.
			|Записать?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстПриглашенийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ЗавершитьРедактированиеТекстаПриглашения", ЭтотОбъект);
	ЗаголовокФормы = НСтр("ru = 'Шаблон текста для приглашений контрагентов'");
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияМногострочногоТекста(
		Оповещение, Элементы.ТекстПриглашений.ТекстРедактирования, ЗаголовокФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторОрганизацииОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если Не КонтролироватьСодержимоеНастроекЭД Тогда
		ТекстВопроса = НСтр("ru = 'Изменения ""Профиля настроек ЭДО"" будут применены для связанных ""Настроек ЭДО"" с отключенным расширенным режимом.
								|Продолжить?'");
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("СтарыйИдентификаторОрганизации", Объект.ИдентификаторОрганизации);
		ОписаниеОповещения = Новый ОписаниеОповещения("РазрешитьРедактированиеИдентификатораОрганизацииЗавершить", ЭтотОбъект, ПараметрыОповещения);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ТестПрофиляНастроек(Команда)
	
	ОчиститьСообщения();
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ТестПрофиляНастроекПродолжить", ЭтотОбъект);
		ТекстВопроса = "В текущий профиль настройек ЭДО внесены изменения. Продолжить выполнение теста?";
		СписокКнопок = Новый СписокЗначений();
		СписокКнопок.Добавить("Выполнить", "Сохранить и выполнить тест.");
		СписокКнопок.Добавить("Отменить", "Отменить тест.");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок, , "Выполнить", "Тест настроек");
	Иначе
		ТестПрофиляНастроекПродолжить("Выполнить", Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСертификат(Команда)
	
	Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции(
		"ИспользоватьЭлектронныеПодписиЭД") Тогда
		
		ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ТекстСообщенияОНеобходимостиНастройкиСистемы("ПодписаниеЭД");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'Операция добавления сертификата в профиль настроек ЭДО займет несколько минут.
							|Продолжить?'");
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьСертификатПродолжение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСертификатПродолжение(РезультатВыполнения, Контекст = Неопределено) Экспорт
	
	Если РезультатВыполнения = КодВозвратаДиалога.Да Тогда
		ОткрытьФормуВыбораСертификатаЭП();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачальнаяДатаЗапросаДанныхУОператора(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПрофильНастроекЭДО", Объект.Ссылка);
	ПараметрыФормы.Вставить("РежимОткрытияОкна", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ОткрытьФорму(
			"РегистрСведений.СостоянияОбменовЭДЧерезОператоровЭДО.Форма.ФормаРедактирования",
			ПараметрыФормы,
			ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПолейТаблицыПодписиОрганизации

&НаКлиенте
Процедура СертификатыПодписейОрганизацииПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ПоказатьЗначение(, Элемент.ТекущиеДанные.Сертификат);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПолейТаблицыИсходящиеДокументы

&НаКлиенте
Процедура ИсходящиеДокументыПередНачаломИзменения(Элемент, Отказ)
	
	Если Не КонтролироватьСодержимоеНастроекЭД Тогда
		ТекстВопроса = НСтр("ru = 'Изменения ""Профиля настроек ЭДО"" будут применены для связанных ""Настроек ЭДО"" с отключенным расширенным режимом.
									|Продолжить?'");
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("ИдентификаторСтроки", Элемент.ТекущиеДанные.ПолучитьИдентификатор());
		ПараметрыОповещения.Вставить("ВерсияФормата",       Элемент.ТекущиеДанные.ВерсияФормата);
		ПараметрыОповещения.Вставить("ИспользоватьЭП",      Элемент.ТекущиеДанные.ИспользоватьЭП);
		ПараметрыОповещения.Вставить("ИсходящийДокумент",   Элемент.ТекущиеДанные.ИсходящийДокумент);
		ПараметрыОповещения.Вставить("Формировать",         Элемент.ТекущиеДанные.Формировать);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("РазрешитьРедактированиеРеквизитовСпискаВидыЭДЗавершить", ЭтотОбъект, ПараметрыОповещения);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходящиеДокументыПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	Если Элемент.ТекущийЭлемент.Имя = "ИсходящиеДокументыФормировать" Тогда
		ЗначениеЭлемента = Элемент.ТекущиеДанные.Формировать;
		Если Не ЗначениеЭлемента Тогда
			Элемент.ТекущиеДанные.ИспользоватьЭП = ЗначениеЭлемента;
		КонецЕсли;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.ИспользоватьЭП И НЕ Элемент.ТекущиеДанные.Формировать Тогда
		Если Элемент.ТекущийЭлемент.Имя = "ИсходящиеДокументыИспользоватьЭП" Тогда
			Элемент.ТекущиеДанные.Формировать = Истина;
		Иначе
			Элемент.ТекущиеДанные.ИспользоватьЭП = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПроизвольныйЭД")
		ИЛИ НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоПрямойОбмен(Объект.СпособОбменаЭД) Тогда
		
		Элемент.ТекущиеДанные.ИспользоватьЭП = Элемент.ТекущиеДанные.Формировать;
	КонецЕсли;
	
	Если (Элемент.ТекущиеДанные.ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.СчетФактура")
		ИЛИ Элемент.ТекущиеДанные.ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.КорректировочныйСчетФактура"))
		И ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоПрямойОбмен(Объект.СпособОбменаЭД) Тогда
		
		Элемент.ТекущиеДанные.Формировать = Ложь;
		Элемент.ТекущиеДанные.ИспользоватьЭП = Ложь;
		
		ШаблонСообщения = НСтр("ru='Отправка документа %1 возможна только через оператора ЭДО.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			Элемент.ТекущиеДанные.ИсходящийДокумент);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФорму()
	
	Если Объект.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезFTP Тогда
		FTPКаталогВходящихДокументов = Объект.РесурсВходящихДокументов;
	ИначеЕсли Объект.СпособОбменаЭД  = Перечисления.СпособыОбменаЭД.ЧерезКаталог Тогда
		КаталогВходящихДокументов    = Объект.РесурсВходящихДокументов;
	ИначеЕсли Объект.СпособОбменаЭД  = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту Тогда
		ЭлектроннаяПочтаОрганизации  = Объект.РесурсВходящихДокументов;
	ИначеЕсли Объект.СпособОбменаЭД  = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО Тогда
		ПараметрыАутентификацииНаСайте = СтандартныеПодсистемыСервер.ПараметрыАутентификацииНаСайте();
		
	КонецЕсли;
	
	ПометитьНеДействующиеСертификатыВСписке();
	
	ИспользоватьЭП = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции(
																	"ИспользоватьЭлектронныеПодписиЭД");
	
	// Использование ЭП
	Элементы.ИсходящиеДокументыИспользоватьЭП.Видимость = ИспользоватьЭП
		И ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоПрямойОбмен(Объект.СпособОбменаЭД);
	Элементы.ГруппаСертификатыПодписейОрганизации.Видимость = ИспользоватьЭП;
	Элементы.СтраницыПрофиляНастроекЭДО.ОтображениеСтраниц = ?(ИспользоватьЭП,
		ОтображениеСтраницФормы.ЗакладкиСверху, ОтображениеСтраницФормы.Нет);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ОтсутствуютПодчиненныеНастройкиЭДО()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
	|ГДЕ
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.СпособОбменаЭД = &СпособОбменаЭД
	|	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация = &Организация
	|	И НЕ СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("СпособОбменаЭД", Объект.СпособОбменаЭД);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	Возврат Запрос.Выполнить().Пустой();

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.ГруппаОбменЧерезОператораИнформация.Видимость = Не ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоПрямойОбмен(Объект.СпособОбменаЭД);
	Элементы.ГруппаПрямойОбменЧерезЭлектроннуюПочтуИнформация.Видимость = Объект.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезЭлектроннуюПочту");
	Элементы.ГруппаПрямойОбменЧерезКаталогИнформация.Видимость = Объект.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезКаталог");
	Элементы.ГруппаПрямойОбменЧерезFTPИнформация.Видимость = Объект.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезFTP");
	
	Элементы.НачальнаяДатаЗапросаДанныхУОператора.Видимость = Не ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоПрямойОбмен(Объект.СпособОбменаЭД);
	Элементы.НадписьЛичныйКабинетУчастникаОбменаЭД.Видимость = ЗначениеЗаполнено(Объект.ИдентификаторОрганизации)
		И Объект.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском");
	
	// Использование ЭЦП
	Элементы.ИсходящиеДокументыИспользоватьЭП.Видимость = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции(
		"ИспользоватьЭлектронныеЦифровыеПодписи") И ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоПрямойОбмен(Объект.СпособОбменаЭД);

КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьСертификатТакском(СертификатЭП)
	
	// Проводим тест настроек сертификата подписи с подавлением вывода успешных результатов.
	ОчиститьСообщения();
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(СертификатЭП) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
											ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСообщения("Поле", "Заполнение", "Сертификат"),
											Объект.Ссылка,
											"СертификатыПодписейОрганизации",
											,
											Отказ);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
											ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСообщения("Поле", "Заполнение", "Организация"),
											Объект.Ссылка,
											"Организация",
											,
											Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СертификатЭП", СертификатЭП);
	
	ОбработкаОповещения = Новый ОписаниеОповещения("ЗарегистрироватьСертификатТакскомОповещение", ЭтотОбъект, ДополнительныеПараметры);
	
	ЭлектронныеДокументыСлужебныйКлиент.ТестНастроекСПроверкойСертификата(СертификатЭП,
		ОбработкаОповещения, Ложь, ЭтаФорма, Истина, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьСертификатТакскомОповещение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		СертификатЭП = ДополнительныеПараметры.СертификатЭП;
		Параметр = Неопределено;
		ЭлектронныеДокументыСлужебныйКлиент.ПарольКСертификатуПолучен(СертификатЭП, Параметр);
		ЭлектронныеДокументыКлиентПереопределяемый.СтартоватьМеханизмРаботыСОператоромЭДО(СертификатЭП,
																						  Объект.Организация,
																						  "taxcomGetID",
																						  Объект.ИдентификаторОрганизации,
																						  Параметр,
																						  ЭтотОбъект.УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьСертификат1СЭДО()
	
	// Проводим тест настроек сертификата подписи с подавлением вывода успешных результатов.
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
											ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСообщения("Поле", "Заполнение", "Организация"),
											Объект.Ссылка,
											"Организация");
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.КодРегиона) Тогда
		// Подготовка данных и открытие формы для ввода адреса
		ВыбратьАдрес(Ложь);
	Иначе
		ЗарегистрироватьСертификат1СЭДОПродолжить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьСертификат1СЭДОПродолжить(РезультатВыполнения = Неопределено, Контекст = Неопределено) Экспорт
	
	ОбработкаОповещения = Новый ОписаниеОповещения("ЗарегистрироватьСертификат1СЭДОАутентификация", ЭтотОбъект);
	ЭлектронныеДокументыСлужебныйКлиент.ТестНастроекСПроверкойСертификата(ДобавляемыйСертификат,
		ОбработкаОповещения, Ложь, ЭтаФорма, Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьСертификат1СЭДОАутентификация(РезультатВыполнения = Неопределено, Контекст = Неопределено) Экспорт
	
	Если РезультатВыполнения = Истина Тогда
		
		Если ТипЗнч(ПараметрыАутентификацииНаСайте) <> Тип("Структура")
			ИЛИ Не ЗначениеЗаполнено(ПараметрыАутентификацииНаСайте.Пароль) Тогда
			
			СтандартныеПодсистемыКлиент.АвторизоватьНаСайтеПоддержкиПользователей(ЭтотОбъект,
				Новый ОписаниеОповещения("ЗарегистрироватьСертификат1СЭДОЗавершение", ЭтотОбъект));
		Иначе
			ЗарегистрироватьСертификат1СЭДОЗавершение(ПараметрыАутентификацииНаСайте, Неопределено);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьСертификат1СЭДОЗавершение(ПараметрыАутентификации, Контекст = Неопределено) Экспорт
	
	Если ТипЗнч(ПараметрыАутентификации) <> Тип("Структура") Тогда
		ПараметрыАутентификацииНаСайте = Неопределено;
		// Пользователь отказался от ввода логина и пароля.
		Возврат;
	КонецЕсли;
	
	ПараметрыАутентификацииНаСайте = ПараметрыАутентификации;
	
	// Подготовим данные по сертификату оператора ЭДО
	ПолучитьАктуальныйСертификатОператораЭДО();
	
	ПодготовитьДанныеДляРегистрационногоПакета1СЭДОНачало();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьАктуальныйСертификатОператораЭДО()
	
	ИмяФайлаОтвета = ЭлектронныеДокументыСлужебный.ПолучитьФайлОтветаОтСервераЭДО("GetOperators");
	ДанныеФайла = ПрочитатьТекстИзФайла(ИмяФайлаОтвета, , Истина);
	Если Не ЗначениеЗаполнено(ДанныеФайла) Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоXML = ЗагрузитьСтрокуXMLВДеревоЗначений(ДанныеФайла);
	Если ДеревоXML <> Неопределено Тогда
		
		УзелОператорыЭДО = ДеревоXML.Строки.Найти("Operators", "Имя");
		Если УзелОператорыЭДО <> Неопределено Тогда
			Для Каждого УзелОператорЭДО Из УзелОператорыЭДО.Строки Цикл
				
				УзелОператорЭДОИд = УзелОператорЭДО.Строки.Найти("ИдОперЭДО", "Имя");
				Если УзелОператорЭДОИд.Значение = Объект.ОператорЭДОИд Тогда
					
					УзелОператорЭДОСертификат = УзелОператорЭДО.Строки.Найти("Сертификат", "Имя");
					Если УзелОператорЭДОСертификат <> Неопределено Тогда
						ОператорЭДОСертификат = УзелОператорЭДОСертификат.Значение;
						Прервать;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗагрузитьСтрокуXMLВДеревоЗначений(СтрокаXML, ОписаниеОшибки = Неопределено, ЧтениеXML = Неопределено, Знач ТекУзел = Неопределено) Экспорт
	
	ПерваяИтерация = (ТекУзел = Неопределено);
	Если ПерваяИтерация Тогда
		ТекУзел = СоздатьДеревоСтруктурыXML();
		Попытка
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.УстановитьСтроку(СтрокаXML);
		Исключение
			ОписаниеОшибки = "Ошибка разбора XML: " + ИнформацияОбОшибке().Описание + ".";
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Попытка
		Пока ЧтениеXML.Прочитать() Цикл
			ТипУзла = ЧтениеXML.ТипУзла;
			Если ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				НовУзел = ТекУзел.Строки.Добавить();
				НовУзел.Имя = ЧтениеXML.Имя;
				НовУзел.Тип = "Э";
				НовУзел.Значение = ЧтениеXML.Значение;
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
					НовАтрибут = НовУзел.Строки.Добавить();
					НовАтрибут.Имя = ЧтениеXML.Имя;
					НовАтрибут.Тип = "А";
					НовАтрибут.Значение = ЧтениеXML.Значение;
				КонецЦикла;
				ЗагрузитьСтрокуXMLВДеревоЗначений(СтрокаXML, ОписаниеОшибки, ЧтениеXML, НовУзел);
				Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
					Возврат Неопределено;
				КонецЕсли;
			ИначеЕсли ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				Прервать;
			ИначеЕсли ТипУзла = ТипУзлаXML.Текст И ТипЗнч(ТекУзел) = Тип("СтрокаДереваЗначений") И ТекУзел.Тип = "Э" Тогда
				ТекУзел.Значение = ЧтениеXML.Значение;
			КонецЕсли;
		КонецЦикла;
	Исключение
		ОписаниеОшибки = "Ошибка разбора XML: " + ИнформацияОбОшибке().Описание + ".";
		Возврат Неопределено;
	КонецПопытки;
	
	Если ПерваяИтерация Тогда
		Возврат ТекУзел;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьДеревоСтруктурыXML() Экспорт
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Имя");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	Возврат ДеревоСтруктуры;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПрочитатьТекстИзФайла(ИмяФайла, _КодировкаТекста = Неопределено, АвтоопределениеКодировкиXML = Ложь) Экспорт
	
	Если ЭтоАдресВременногоХранилища(ИмяФайла) Тогда
		ИмяФайлаНаДиске = ПолучитьИмяВременногоФайла();
		ПолучитьИзВременногоХранилища(ИмяФайла).Записать(ИмяФайлаНаДиске);
	Иначе
		ИмяФайлаНаДиске = ИмяФайла;
	КонецЕсли;
	
	ОбъектЧтение = Новый ЧтениеТекста(ИмяФайлаНаДиске, _КодировкаТекста);
	ТекстИзФайла = ОбъектЧтение.Прочитать();
	ОбъектЧтение.Закрыть();
	
	Если АвтоопределениеКодировкиXML И ЗначениеЗаполнено(ТекстИзФайла) Тогда
		ПерваяСтрокаФайла = ВРЕГ(Лев(СтрПолучитьСтроку(ТекстИзФайла, 1), 100));
		Если Найти(ПерваяСтрокаФайла, ВРЕГ("encoding=""UTF-8""")) <> 0 Тогда
			ТекстИзФайла = ПрочитатьТекстИзФайла(ИмяФайла, КодировкаТекста.UTF8);
		ИначеЕсли Найти(ПерваяСтрокаФайла, ВРЕГ("encoding=""UTF-16""")) <> 0 Тогда
			ТекстИзФайла = ПрочитатьТекстИзФайла(ИмяФайла, КодировкаТекста.UTF16);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстИзФайла;
	
КонецФункции

// Методы создания и отправки рег. пакета 1СЭДО

&НаКлиенте
Процедура ПодготовитьДанныеДляРегистрационногоПакета1СЭДОНачало()
	
	Контекст = Новый Структура;
	ДвоичныеДанныеСоглашенияНаПодключениеЭДО = Неопределено;
	ПодготовитьДанныеПоСоглашениюНаПодключениеКЭДО(ДвоичныеДанныеСоглашенияНаПодключениеЭДО);
	Если Не ЗначениеЗаполнено(ДвоичныеДанныеСоглашенияНаПодключениеЭДО) Тогда
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("ДвоичныеДанныеСоглашенияНаПодключениеЭДО", ДвоичныеДанныеСоглашенияНаПодключениеЭДО);
	
	ОписаниеПодписатьЭД = Новый ОписаниеОповещения("ПодготовитьДанныеДляРегистрационногоПакета1СЭДОПродолжение1", ЭтотОбъект, Контекст);
	
	ОписаниеДанных = Новый Структура;
	
	Операция = НСтр("ru = 'Подписание заявления на подключение к сервису 1С-ЭДО'");
	ОписаниеДанных.Вставить("Операция",            Операция);
	
	МассивСертификатов = Новый Массив;
	МассивСертификатов.Добавить(ДобавляемыйСертификат);
	ОписаниеДанных.Вставить("ОтборСертификатов",   МассивСертификатов);
	
	ОписаниеДанных.Вставить("ПоказатьКомментарий", Ложь);
	ОписаниеДанных.Вставить("Данные",              ДвоичныеДанныеСоглашенияНаПодключениеЭДО);
	ОписаниеДанных.Вставить("ЗаголовокДанных",     "");
	ОписаниеДанных.Вставить("БезПодтверждения",    Истина);
	
	Представление = Новый Структура;
	Представление.Вставить("Представление", НСтр("ru = 'Заявление на подключение к сервису 1С-ЭДО'"));
	ОписаниеПредставленияЗаявления = Новый ОписаниеОповещения("ОбработатьПредставлениеЗаявленияНаПодключениеКЭДО", ЭтотОбъект, Контекст);
	Представление.Вставить("Значение",      ОписаниеПредставленияЗаявления);
	
	ОписаниеДанных.Вставить("Представление",       Представление);
	
	ЭлектроннаяПодписьКлиент.Подписать(ОписаниеДанных, , ОписаниеПодписатьЭД);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПредставлениеЗаявленияНаПодключениеКЭДО(РезультатВыполнения = Неопределено, Контекст) Экспорт
	
	ПерейтиПоНавигационнойСсылке("http://users.v8.1c.ru/");
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьДанныеДляРегистрационногоПакета1СЭДОПродолжение1(РезультатВыполнения = Неопределено, Контекст) Экспорт
	
	Если ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		Если Не РезультатВыполнения.Свойство("СвойстваПодписи") Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	СтурктураПодписи = РезультатВыполнения.СвойстваПодписи;
	Если ЭтоАдресВременногоХранилища(РезультатВыполнения.СвойстваПодписи) Тогда
		СтурктураПодписи = ПолучитьИзВременногоХранилища(СтурктураПодписи);
	КонецЕсли;
	
	Контекст.Вставить("ПодписанныеДвоичныеДанныеСоглашенияНаПодключениеЭДО", СтурктураПодписи.Подпись);
	
	РеквизитыПакета = Новый Структура;
	ДвоичныеДанныеДляОператораЭДО = Неопределено;
	ПодготовитьДанныеПоРегистрационнойИнформации(РеквизитыПакета, ДвоичныеДанныеДляОператораЭДО);
	Если Не ЗначениеЗаполнено(ДвоичныеДанныеДляОператораЭДО) Тогда
		Возврат;
	КонецЕсли;

	Контекст.Вставить("РеквизитыПакета", РеквизитыПакета);
	Контекст.Вставить("ДвоичныеДанныеДляОператораЭДО", ДвоичныеДанныеДляОператораЭДО);
	ОписаниеПодписатьЭД = Новый ОписаниеОповещения("ПодготовитьДанныеДляРегистрационногоПакета1СЭДОПродолжение2", ЭтотОбъект, Контекст);
	
	ОписаниеДанных = Новый Структура;
	
	Операция = НСтр("ru = 'Подписание данных для регистрации у оператора ЭДО'");
	ОписаниеДанных.Вставить("Операция",            Операция);
	
	МассивСертификатов = Новый Массив;
	МассивСертификатов.Добавить(ДобавляемыйСертификат);
	ОписаниеДанных.Вставить("ОтборСертификатов",   МассивСертификатов);
	
	ОписаниеДанных.Вставить("ПоказатьКомментарий", Ложь);
	ОписаниеДанных.Вставить("Данные",              ДвоичныеДанныеДляОператораЭДО);
	ОписаниеДанных.Вставить("ЗаголовокДанных",     НСтр("ru = 'Файл'"));
	ОписаниеДанных.Вставить("БезПодтверждения",    Истина);
	
	Представление = Новый Структура;
	Представление.Вставить("Представление", НСтр("ru = 'Данные для регистрации у оператора ЭДО'"));
	ОписаниеПредставленияЗаявления = Новый ОписаниеОповещения("ОбработатьПредставлениеДанныхДляОператораЭДО", ЭтотОбъект, Контекст);
	Представление.Вставить("Значение",      ОписаниеПредставленияЗаявления);
	
	ОписаниеДанных.Вставить("Представление",       Представление);
	
	ЭлектроннаяПодписьКлиент.Подписать(ОписаниеДанных, , ОписаниеПодписатьЭД);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПредставлениеДанныхДляОператораЭДО(РезультатВыполнения = Неопределено, Контекст) Экспорт
	
	//ИмяФайла = ПолучитьИмяВременногоФайла("xml");
	//АдресВременногоХранилища = ПоместитьВоВременноеХранилище(Контекст.ДвоичныеДанныеДляОператораЭДО);
	//ПолучитьФайл(АдресВременногоХранилища, ИмяФайла);
	
	ИмяВременногоФайла = Строка(УникальныйИдентификаторЗаявки1СЭДО) + ".xml";
	
	ОписанияФайлов = Новый Массив;
	ОписанияФайлов.Добавить(Новый ОписаниеПередаваемогоФайла(ИмяВременногоФайла, ПоместитьВоВременноеХранилище(Контекст.ДвоичныеДанныеДляОператораЭДО)));
	
	ПолучитьФайлы(ОписанияФайлов, , КаталогВременныхФайлов());
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьДанныеДляРегистрационногоПакета1СЭДОПродолжение2(РезультатВыполнения = Неопределено, Контекст) Экспорт
	
	Если ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		Если Не РезультатВыполнения.Свойство("СвойстваПодписи") Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	СтурктураПодписи = РезультатВыполнения.СвойстваПодписи;
	Если ЭтоАдресВременногоХранилища(РезультатВыполнения.СвойстваПодписи) Тогда
		СтурктураПодписи = ПолучитьИзВременногоХранилища(СтурктураПодписи);
	КонецЕсли;
	
	Контекст.Вставить("ПодписанныеДвоичныеДанныеДляОператораЭДО", СтурктураПодписи.Подпись);
	
	// Подготовим сертификат оператора ЭДО для шифрования информации
	Если Не ЗначениеЗаполнено(ОператорЭДОСертификат) Тогда
		
		ТекстСообщения = НСтр("ru = 'Ошибка получения сертификата оператора ЭДО.
									|Необходимо повторить добавление сертификата.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;

	// Зашифровать
	ОписаниеПодписатьЭД = Новый ОписаниеОповещения("ПодготовитьДанныеДляРегистрационногоПакета1СЭДОЗавершение", ЭтотОбъект, Контекст);
	
	ТекстСертификата = ОператорЭДОСертификат;
	Если Найти(ТекстСертификата, "-----BEGIN CERTIFICATE-----") > 0 Тогда
		ТекстСертификата = СтрЗаменить(ТекстСертификата, "-----BEGIN CERTIFICATE-----", "");
		ТекстСертификата = СтрЗаменить(ТекстСертификата, "-----END CERTIFICATE-----", "");
	КонецЕсли;
	ДвоичныеДанныеСертификатаОператораЭДО = Base64Значение(ТекстСертификата);
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("Операция",            НСтр("ru = 'Шифрование данных для регистрации у оператора ЭДО'"));
	
	МассивСертификатов = Новый Массив;
	МассивСертификатов.Добавить(ДвоичныеДанныеСертификатаОператораЭДО);
	ОписаниеДанных.Вставить("НаборСертификатов",   МассивСертификатов);
	
	ОписаниеДанных.Вставить("ПоказатьКомментарий", Ложь);
	ОписаниеДанных.Вставить("ИзменятьНабор",       Ложь);
	ОписаниеДанных.Вставить("Данные",              Контекст.ДвоичныеДанныеДляОператораЭДО);
	ОписаниеДанных.Вставить("ЗаголовокДанных",     НСтр("ru = 'Файл'"));
	ОписаниеДанных.Вставить("БезПодтверждения",    Ложь);
	//ОписаниеДанных.Вставить("ВыполнятьНаСервере",  Ложь);
	
	Представление = Новый Структура;
	Представление.Вставить("Представление", НСтр("ru = 'Данные для регистрации у оператора ЭДО'"));
	ОписаниеПредставленияЗаявления = Новый ОписаниеОповещения("ОбработатьПредставлениеДанныхДляОператораЭДО", ЭтотОбъект, Контекст);
	Представление.Вставить("Значение",      ОписаниеПредставленияЗаявления);
	
	ОписаниеДанных.Вставить("Представление",       Представление);
	
	ЭлектроннаяПодписьКлиент.Зашифровать(ОписаниеДанных, , ОписаниеПодписатьЭД);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьДанныеДляРегистрационногоПакета1СЭДОЗавершение(РезультатВыполнения = Неопределено, Контекст) Экспорт
	
	Если ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		Если Не РезультатВыполнения.Свойство("ЗашифрованныеДанные") Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗашифрованныеДвоичныеДанныеОператораЭДО = РезультатВыполнения.ЗашифрованныеДанные;
	
	ЕстьОшибки = Ложь;
	СформироватьИОтправитьРегистрационныйПакет1СЭДО(Контекст.РеквизитыПакета, ЗашифрованныеДвоичныеДанныеОператораЭДО, Контекст.ПодписанныеДвоичныеДанныеДляОператораЭДО,
		Контекст.ДвоичныеДанныеСоглашенияНаПодключениеЭДО, Контекст.ПодписанныеДвоичныеДанныеСоглашенияНаПодключениеЭДО, ПараметрыАутентификацииНаСайте, ЕстьОшибки);
		
	Если Не ЕстьОшибки Тогда
		// Запустим обработчик ожидания резальтата регистрации органиазации у оператора.
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияДляЭД", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, УникальныйИдентификаторЗаявки1СЭДО);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьДанныеПоСоглашениюНаПодключениеКЭДО(ДвоичныеДанныеСоглашенияНаПодключениеЭДО)
	
	// Подготовим данные для соглашения с оператором ЭДО
	ИмяВременногоФайлаСоглашениеЭДО = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("xml");
	
	// LicenseCard
	СоглашениеЭДО = Новый ЗаписьXML;
	СоглашениеЭДО.ОткрытьФайл(ИмяВременногоФайлаСоглашениеЭДО, "windows-1251");
	СоглашениеЭДО.ЗаписатьОбъявлениеXML();
	
	СоглашениеЭДО.ЗаписатьНачалоЭлемента("LicenseCard");
		СоглашениеЭДО.ЗаписатьНачалоЭлемента("info");
			СоглашениеЭДО.ЗаписатьАтрибут("EDOAgreed", XMLСтрока(Истина));
		СоглашениеЭДО.ЗаписатьКонецЭлемента(); // info
	СоглашениеЭДО.ЗаписатьКонецЭлемента(); // LicenseCard
	
	СоглашениеЭДО.Закрыть();
	
	ДвоичныеДанныеСоглашенияНаПодключениеЭДО = Новый ДвоичныеДанные(ИмяВременногоФайлаСоглашениеЭДО);
	УдалитьФайлы(ИмяВременногоФайлаСоглашениеЭДО);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьДанныеПоРегистрационнойИнформации(РеквизитыПакета, ДвоичныеДанныеДляОператораЭДО)
	
	УникальныйИдентификаторЗаявки1СЭДО = ЭлектронныеДокументыСлужебный.СгенерироватьUUID();
	
	// Подготовим данные для 1СЭДО
	ИмяРеквизитаИННОрганизации = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННОрганизации");
	ИмяРеквизитаКППОрганизации = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППОрганизации");
	ИмяРеквизитаОГРНОрганизации = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ОГРНОрганизации");
	ИмяРеквизитаНаименованиеОрганизации = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("НаименованиеОрганизации");
	
	ПараметрыОрганиазции = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Организация,
		ИмяРеквизитаИННОрганизации + ", " + ИмяРеквизитаКППОрганизации + ", " + ИмяРеквизитаНаименованиеОрганизации + ", " + ИмяРеквизитаОГРНОрганизации);

	ПараметрыСертификата = ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыСертификата(ДобавляемыйСертификат);
	
	РеквизитыПакета.Вставить("УникальныйИдентификаторЗаявки1СЭДО", УникальныйИдентификаторЗаявки1СЭДО);
	РеквизитыПакета.Вставить("НаименованиеОрганизации", ПараметрыОрганиазции[ИмяРеквизитаНаименованиеОрганизации]);
	РеквизитыПакета.Вставить("ИННОрганизации",  ПараметрыОрганиазции[ИмяРеквизитаИННОрганизации]);
	РеквизитыПакета.Вставить("КППОрганизации",  ПараметрыОрганиазции[ИмяРеквизитаКППОрганизации]);
	РеквизитыПакета.Вставить("ОператорЭДО",     Объект.ОператорЭДО);
	РеквизитыПакета.Вставить("ОператорЭДОИд",   Объект.ОператорЭДОИд);
	РеквизитыПакета.Вставить("Отпечаток",       НРег(СТРЗаменить(Строка(Base64Значение(ПараметрыСертификата.Отпечаток))," ","")));
	
	// Подготовим данные для оператора ЭДО
	ДеревоРегистрационнойИнформации = ОбщегоНазначенияЭД.ДеревоДокумента("РегистрационнаяИнформация");
	
	// Служебные данные
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "ИдФайл",   "registration_" + УникальныйИдентификаторЗаявки1СЭДО);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "ВерсПрог", "1С:Предприятие 8");
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "ВерсФорм", "5.02");
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "КНД",      "1115109");
	
	// Данные по налоговому органу
	Если Не ЗначениеЗаполнено(Объект.КодНалоговогоОргана) И ЗначениеЗаполнено(ПараметрыОрганиазции[ИмяРеквизитаКППОрганизации]) Тогда
		Объект.КодНалоговогоОргана = Лев(ПараметрыОрганиазции[ИмяРеквизитаКППОрганизации], 4);
	КонецЕсли;
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "КодНО", Объект.КодНалоговогоОргана);
	
	// Данные по оператору ЭДО
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "ОперЭДО.НаимОрг",   Объект.ОператорЭДО);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "ОперЭДО.ИдОперЭДО", Объект.ОператорЭДОИд);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "ОперЭДО.ИННЮЛ",     Объект.ОператорЭДОИНН);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "ОперЭДО.КПП",       Объект.ОператорЭДОКПП);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "ОперЭДО.ОГРН",      Объект.ОператорЭДООГРН);
	
	// Данные по абоненту
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипЗаявления", "2");
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ИдУчастЭДО", Объект.ИдентификаторОрганизации);
		
	Если Не ЭлектронныеДокументыПереопределяемый.ЭтоФизЛицо(Объект.Организация) Тогда
		
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.НаимОрг", ПараметрыОрганиазции[ИмяРеквизитаНаименованиеОрганизации]);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.ИННЮЛ",   ПараметрыОрганиазции[ИмяРеквизитаИННОрганизации]);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.КПП",     ПараметрыОрганиазции[ИмяРеквизитаКППОрганизации]);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.ОГРН",    ПараметрыОрганиазции[ИмяРеквизитаОГРНОрганизации]);
		
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.ДатаПодклЭДО", ТекущаяДатаСеанса());
		
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.АдрРФ.Индекс",     Объект.Индекс);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.АдрРФ.КодРегион",  Объект.КодРегиона);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.АдрРФ.Район",      Объект.Район);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.АдрРФ.Город",      Объект.Город);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.АдрРФ.НаселПункт", Объект.НаселенныйПункт);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.АдрРФ.Улица",      Объект.Улица);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.АдрРФ.Дом",        Объект.Дом);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.АдрРФ.Корпус",     Объект.Корпус);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.АдрРФ.Кварт",      Объект.Квартира);
		
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.ФИООтв.Фамилия",  ПараметрыСертификата.Фамилия);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.ФИООтв.Имя",      ПараметрыСертификата.Имя);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.ФИООтв.Отчество", ПараметрыСертификата.Отчество);
		
	Иначе
		
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.ИННФЛ",  ПараметрыОрганиазции[ИмяРеквизитаИННОрганизации]);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.ОГРНИП", ПараметрыОрганиазции[ИмяРеквизитаОГРНОрганизации]);
		
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.ДатаПодклЭДО", ТекущаяДатаСеанса());
		
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.АдрРФ.Индекс",     Объект.Индекс);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.АдрРФ.КодРегион",  Объект.КодРегиона);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.АдрРФ.Район",      Объект.Район);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.АдрРФ.Город",      Объект.Город);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.АдрРФ.НаселПункт", Объект.НаселенныйПункт);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.АдрРФ.Улица",      Объект.Улица);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.АдрРФ.Дом",        Объект.Дом);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.АдрРФ.Корпус",     Объект.Корпус);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.АдрРФ.Кварт",      Объект.Квартира);
		
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.ФИО.Фамилия",  ДобавляемыйСертификат.Фамилия);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.ФИО.Имя",      ДобавляемыйСертификат.Имя);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.ФИО.Отчество", ДобавляемыйСертификат.Отчество);
		
	КонецЕсли;
	
	СертификатыПользователя = Новый ТаблицаЗначений;
	СертификатыПользователя.Колонки.Добавить("ДатаНачСертиф");
	СертификатыПользователя.Колонки.Добавить("ДатаКонСертиф");
	СертификатыПользователя.Колонки.Добавить("ОтпСертиф");
	СертификатыПользователя.Колонки.Добавить("Сертификат");
	СертификатыПользователя.Колонки.Добавить("Фамилия");
	СертификатыПользователя.Колонки.Добавить("Имя");
	СертификатыПользователя.Колонки.Добавить("Отчество");
	
	НоваяСтрока = СертификатыПользователя.Добавить();
	
	ТекущийСертификат = Новый СертификатКриптографии(ПараметрыСертификата.ДвоичныеДанныеСертификата);
	НоваяСтрока.ДатаНачСертиф = ТекущийСертификат.ДатаНачала;
	НоваяСтрока.ДатаКонСертиф = ДобавляемыйСертификат.ДействителенДо;
	
	НоваяСтрока.ОтпСертиф = НРег(СТРЗаменить(Строка(Base64Значение(ДобавляемыйСертификат.Отпечаток))," ",""));
	
	СертификатТекст = Base64Строка(ПараметрыСертификата.ДвоичныеДанныеСертификата);
	НоваяСтрока.Сертификат = "-----BEGIN CERTIFICATE-----" + символы.пс
							+ СертификатТекст + символы.пс
							+ "-----END CERTIFICATE-----";

	НоваяСтрока.Фамилия = ПараметрыСертификата.Фамилия;
	НоваяСтрока.Имя = ПараметрыСертификата.Имя;
	НоваяСтрока.Отчество = ПараметрыСертификата.Отчество;
	
	ОбщегоНазначенияЭД.ЗагрузитьТаблицуВДерево(ДеревоРегистрационнойИнформации, СертификатыПользователя, "УчастЭДО.СертифДолжн");
	
	//Данные по подписанту
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "Подписант.Должность",    ПараметрыСертификата.Должность);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "Подписант.ФИО.Фамилия",  ПараметрыСертификата.Фамилия);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "Подписант.ФИО.Имя",      ПараметрыСертификата.Имя);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "Подписант.ФИО.Отчество", ПараметрыСертификата.Отчество);
	
	ДвоичныеДанныеДляОператораЭДО = ЭлектронныеДокументыВнутренний.РегистрационныеДанныеДляОператораЭДО(ДеревоРегистрационнойИнформации);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьИОтправитьРегистрационныйПакет1СЭДО(РеквизитыПакета, ЗашифрованныеДвоичныеДанныеОператораЭДО, ПодписанныеДвоичныеДанныеДляОператораЭДО,
		ДвоичныеДанныеСоглашенияНаПодключениеЭДО, ПодписанныеДвоичныеДанныеСоглашенияНаПодключениеЭДО, ПараметрыАутентификации, ЕстьОшибки)
	
	ИмяФайлаПакетаДля1СЭДО = ЭлектронныеДокументыСлужебный.РегистрационныйПакетДляОператораЭДО(РеквизитыПакета,
		ЗашифрованныеДвоичныеДанныеОператораЭДО, ПодписанныеДвоичныеДанныеДляОператораЭДО,
		ДвоичныеДанныеСоглашенияНаПодключениеЭДО, ПодписанныеДвоичныеДанныеСоглашенияНаПодключениеЭДО);
	
	ЭлектронныеДокументыСлужебный.ОтправитьРегистрационныйПакет1СЭДО(ИмяФайлаПакетаДля1СЭДО, ПараметрыАутентификации, ЕстьОшибки);
	
	УдалитьФайлы(ИмяФайлаПакетаДля1СЭДО);
	
КонецПроцедуры

// Открывает форму выбора адреса в модальном режиме и возвращает
// реквизиты адреса в виде структуры с соответствующими полями
//
// Параметры:
// - ТолькоДляПросмотра (Булево): Истина - открыть форму выбора адреса только для просмотра
//
// Возвращаемое значение: Структура с полями - реквизитыми адреса;
//						  Неопределено, если на форме адреса при закрытии не была нажата кнопка "ОК"
// 
&НаКлиенте
Процедура ВыбратьАдрес(ТолькоДляПросмотра = Ложь)
	
	ПараметрыФормы = Новый Структура("ТолькоПросмотр", ТолькоДляПросмотра);
	
	Если ТолькоДляПросмотра Тогда
		ОповещениеОЗакрытии = Неопределено;
	Иначе
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПриВыбореАдреса", ЭтотОбъект);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("Индекс"    , Объект.Индекс);
	ПараметрыФормы.Вставить("Регион"    , Объект.Регион);
	ПараметрыФормы.Вставить("Район"     , Объект.Район);
	ПараметрыФормы.Вставить("Город"     , Объект.Город);
	ПараметрыФормы.Вставить("НасПункт"  , Объект.НаселенныйПункт);
	ПараметрыФормы.Вставить("Улица"     , Объект.Улица);
	ПараметрыФормы.Вставить("Дом"       , Объект.Дом);
	ПараметрыФормы.Вставить("Корпус"    , Объект.Корпус);
	ПараметрыФормы.Вставить("Квартира"  , Объект.Квартира);
	ПараметрыФормы.Вставить("КодРегиона", Объект.КодРегиона);
	
	
	ФормаВводаАдреса = ОткрытьФорму("ОбщаяФорма.АдресУчастникаОбменаЭД",
		ПараметрыФормы,
		,
		,
		,
		,
		ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореАдреса(ПараметрыАдреса, ДопПараметры) Экспорт
	
	Если ТипЗнч(ПараметрыАдреса) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	// Если адрес изменен, то применение изменений
	Объект.Индекс          = ПараметрыАдреса.Индекс;
	Объект.Регион          = ПараметрыАдреса.Регион;
	Объект.Район           = ПараметрыАдреса.Район;
	Объект.Город           = ПараметрыАдреса.Город;
	Объект.НаселенныйПункт = ПараметрыАдреса.НаселенныйПункт;
	Объект.Улица           = ПараметрыАдреса.Улица;
	Объект.Дом             = ПараметрыАдреса.Дом;
	Объект.Корпус          = ПараметрыАдреса.Корпус;
	Объект.Квартира        = ПараметрыАдреса.Квартира;
	Объект.КодРегиона      = ПараметрыАдреса.КодРегиона;
	
	ОповещениеПродолжитьДобавлениеСертификата = Новый ОписаниеОповещения("ЗарегистрироватьСертификат1СЭДОПродолжить", ЭтотОбъект);
	ВыполнитьОбработкуОповещения(ОповещениеПродолжитьДобавлениеСертификата);
	
КонецПроцедуры

// Методы работы с сервисом 1СЭДО

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияДляЭД()

	Попытка
		Если ФормаДлительнойОперации.Открыта() Тогда
			МассивИдентификаторов = ОбменССерверомПолучитьОтветЭДО(УникальныйИдентификаторЗаявки1СЭДО);
			Если ЗначениеЗаполнено(МассивИдентификаторов) Тогда
				Оповестить("ОповещениеОбУспешномИзмененииДанныхУчастникаОбменаЭД");
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			Иначе
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияДляЭД",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
			КонецЕсли;
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ОбменССерверомПолучитьОтветЭДО(ИдентификаторЗапросаНаРегистрацию)
	
	ИмяФайлаОтвета = ЭлектронныеДокументыСлужебный.ПолучитьФайлОтветаОтСервераЭДО("GetInfo", ИдентификаторЗапросаНаРегистрацию);
	ДанныеФайла = ПрочитатьТекстИзФайла(ИмяФайлаОтвета, , Истина);
	Возврат ПолучитьИдентификаторАбонента(ДанныеФайла);

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИдентификаторАбонента(ДанныеФайла)
	
	МассивИдентификаторов = Новый Массив;
	Если НЕ ПустаяСтрока(ДанныеФайла) Тогда
		
		ДеревоXML = ЗагрузитьСтрокуXMLВДеревоЗначений(ДанныеФайла);
		Если ДеревоXML <> Неопределено Тогда
			
			УзелАбоненты = ДеревоXML.Строки.Найти("Abonents", "Имя");
			
			Если УзелАбоненты <> Неопределено Тогда
				Для каждого УзелАбонент Из УзелАбоненты.Строки Цикл
					УзелИдентификаторАбонента = УзелАбонент.Строки.Найти("Identifier", "Имя");
					МассивИдентификаторов.Добавить(УзелИдентификаторАбонента.Значение);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МассивИдентификаторов;
	
КонецФункции

&НаКлиенте
Процедура УправлениеДоступностьюЛичногоКабинета()
	
	Элементы.НадписьЛичныйКабинетУчастникаОбменаЭД.Доступность = НЕ ПустаяСтрока(Объект.ИдентификаторОрганизации);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСертификатПодписиВСписок(СертификатЭП)
	
	Строка = Объект.СертификатыПодписейОрганизации.Добавить();
	Строка.Сертификат = СертификатЭП;
	Модифицированность = Истина;
	ПометитьНеДействующиеСертификатыВСписке();
	
КонецПроцедуры

&НаСервере
Процедура ПометитьНеДействующиеСертификатыВСписке()
	
	Для Каждого Строка Из Объект.СертификатыПодписейОрганизации Цикл
		Строка.Действует = НЕ (Строка.Сертификат.ПометкаУдаления ИЛИ Строка.Сертификат.Отозван);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогОбмена(ПутьККаталогу)
	
#Если НЕ ВебКлиент Тогда
	ДиалогКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогКаталога.Заголовок = НСтр("ru = 'Выберите сетевой каталог для обмена'");
	ДиалогКаталога.Каталог   = ПутьККаталогу;
	Если ДиалогКаталога.Выбрать() Тогда
		ПутьККаталогу = ДиалогКаталога.Каталог;
		ЭлектронныеДокументыСлужебныйВызовСервера.ПроверитьДоступностьКаталогаДляПрямогоОбмена(ПутьККаталогу);
	КонецЕсли;
#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСертификатаЭП()
	
	Если Объект.ПометкаУдаления Тогда
		ТекстСообщения = НСтр("ru='Для выполнения действия необходимо снять пометку удаления.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если ЭлектронныеДокументыСлужебныйКлиент.ПроверитьИспользованиеИнтернетПоддержкаПользователей() Тогда
		// Обработчик библиотеки ИПП
		
		Если ПустаяСтрока(Объект.ИдентификаторОрганизации)
			И Объект.СертификатыПодписейОрганизации.Количество() > 0 Тогда
			// Эта операция запрещена. Так как в соглашении уже имеется хотя бы один
			// сертификат, но еще не получен идентификатор
			ТекстПредупреждения = НСтр("ru = 'Перед добавлением новых сертификатов в профиль настроек ЭДО
											|необходимо получить идентификатор участника обмена ЭД'");
			ПоказатьПредупреждение(, ТекстПредупреждения, 30);
			Возврат;
			
			// Иначе
			// Остались случаи, когда добавляется первый сертификат
			// и когда добавляемый сертификат нужно зарегистрировать в 1С-Такском
			// оба этих случая отрабатываются в обработчике события формы ОбработкаВыбора 
			
		КонецЕсли;
		
		// Конец обработчика библиотеки ИПП
	КонецЕсли;
	
	Форма = ПолучитьФорму("Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ФормаВыбора", , ЭтотОбъект);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.Список, "Организация", Объект.Организация,
		ВидСравненияКомпоновкиДанных.Равно, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	Форма.Открыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Служебные обработчики асинхронных диалогов

&НаКлиенте
Процедура ТестПрофиляНастроекПродолжить(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если Результат = "Отменить" Тогда
			Возврат;
		ИначеЕсли Модифицированность Тогда
			Записать();
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоПрямойОбмен(Объект.СпособОбменаЭД) Тогда
		Если Объект.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезЭлектроннуюПочту") Тогда
			Состояние(НСтр("ru = 'Тест настроек.'"),
			,
			НСтр("ru = 'Выполняется тестирование обмена ЭД через электронную почту. Подождите...'"));
			
			УчетнаяЗапись = Объект.РесурсВходящихДокументов;
			
			Если РаботаСПочтовымиСообщениямиВызовСервера.ПарольЗадан(УчетнаяЗапись) Тогда
				РаботаСПочтовымиСообщениямиКлиент.ПроверитьВозможностьОтправкиИПолученияЭлектроннойПочты(Неопределено, УчетнаяЗапись, Неопределено);
			Иначе
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("УчетнаяЗапись", УчетнаяЗапись);
				ПараметрыФормы.Вставить("ПроверитьВозможностьОтправкиИПолучения", Истина);
				ОткрытьФорму("ОбщаяФорма.ПодтверждениеПароляУчетнойЗаписи", ПараметрыФормы);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Объект.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезКаталог") Тогда
			Состояние(НСтр("ru = 'Тест настроек.'"),
			,
			НСтр("ru = 'Выполняется тестирование обмена ЭД через каталог. Подождите...'"));
			
			ПутьКРодительскомуКаталогуПрофильНастроекЭДО = Объект.РесурсВходящихДокументов;
			
			// Блок проверки доступа к каталогам.
			ШаблонСообщения = НСтр("ru = 'Тест. Проверка доступа к общему каталогу для обмена ЭД.
			|%1'");
			Попытка
				Если ЭлектронныеДокументыСлужебныйВызовСервера.ПроверитьДоступностьКаталогаДляПрямогоОбмена(
					ПутьКРодительскомуКаталогуПрофильНастроекЭДО) Тогда
					
					РезультатТеста = НСтр("ru = 'Пройден успешно.'");
				Иначе
					РезультатТеста = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("107");
				КонецЕсли;
			Исключение
				ШаблонРезультата = НСтр("ru = '%1
				|%2'");
				ТекстОшибки = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("107");
				РезультатТеста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонРезультата, ТекстОшибки,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, РезультатТеста);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Если Объект.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезFTP") Тогда
			Состояние(НСтр("ru = 'Тест настроек.'"),
			,
			НСтр("ru = 'Выполняется тестирование обмена ЭД через FTP. Подождите...'"));
			
			ПутьКРодительскомуКаталогуПрофильНастроекЭДО = Объект.РесурсВходящихДокументов;
			
			// Блок проверки доступа к каталогам.
			ШаблонСообщения = НСтр("ru = 'Тест. Проверка доступа к общему каталогу для обмена ЭД.
			|%1'");
			Попытка
				Если ЭлектронныеДокументыСлужебныйВызовСервера.ПроверитьДоступностьКаталогаДляПрямогоОбмена(
					ПутьКРодительскомуКаталогуПрофильНастроекЭДО) Тогда
					
					РезультатТеста = НСтр("ru = 'Пройден успешно.'");
				Иначе
					РезультатТеста = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("107");
				КонецЕсли;
			Исключение
				ШаблонРезультата = НСтр("ru = '%1
				|%2'");
				ТекстОшибки = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("107");
				РезультатТеста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонРезультата, ТекстОшибки,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, РезультатТеста);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ПослеПолученияОтпечатковПроверитьСертификаты", ЭтотОбъект);
		
		ЭлектроннаяПодписьКлиент.ПолучитьОтпечаткиСертификатов(Оповещение, Истина, Ложь);
	Иначе
		// Блок проверки связи с оператором.
		Состояние(НСтр("ru = 'Тест настроек.'"),
			,
			НСтр("ru = 'Выполняется тестирование связи с сервисом ЭДО. Подождите...'"));
		
		Если Объект.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО") Тогда
			ТестСвязиСервисаЭДОНачало();
		КонецЕсли;
		
		Если Объект.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском") Тогда
			
			Оповещение = Новый ОписаниеОповещения("ПослеПолученияОтпечатковПроверитьСвязьЭДО", ЭтотОбъект);
			ЭлектроннаяПодписьКлиент.ПолучитьОтпечаткиСертификатов(Оповещение, Истина, Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТестСвязиСервисаЭДОНачало()
	
	Если ТипЗнч(ПараметрыАутентификацииНаСайте) <> Тип("Структура") ИЛИ Не ЗначениеЗаполнено(ПараметрыАутентификацииНаСайте.Пароль) Тогда
		СтандартныеПодсистемыКлиент.АвторизоватьНаСайтеПоддержкиПользователей(ЭтотОбъект,
			Новый ОписаниеОповещения("ТестСвязиСервисаЭДОАвторизация", ЭтотОбъект));
	Иначе
		ТестСвязиСервисаЭДОАвторизация(ПараметрыАутентификацииНаСайте, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТестСвязиСервисаЭДОАвторизация(ПараметрыАутентификации, Контекст) Экспорт
	
	Если ТипЗнч(ПараметрыАутентификации) <> Тип("Структура") Тогда
		ПараметрыАутентификацииНаСайте = Неопределено;
		// Пользователь отказался от ввода логина и пароля.
		Возврат;
	КонецЕсли;
	
	ПараметрыАутентификацииНаСайте = ПараметрыАутентификации;
	
	Оповещение = Новый ОписаниеОповещения("ПослеПолученияОтпечатковПроверитьСвязьЭДО", ЭтотОбъект);
	ЭлектроннаяПодписьКлиент.ПолучитьОтпечаткиСертификатов(Оповещение, Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияОтпечатковПроверитьСертификаты(Отпечатки, Параметры = Неопределено) Экспорт
	
	МассивОтпечатковСертификатов = Новый Массив;
	Для Каждого КлючЗначение Из Отпечатки Цикл
		МассивОтпечатковСертификатов.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
	Соответствие = ЭлектронныеДокументыСлужебныйВызовСервера.СоответствиеДоступныхСертификатовИПараметров(
												МассивОтпечатковСертификатов, Объект.Ссылка);
	
	Сертификат = Неопределено;
	ПарольПолучен = Ложь;
	Для Каждого КлючЗначение Из Соответствие Цикл
		ТекСертификат = КлючЗначение.Ключ;
		Если Сертификат = Неопределено Тогда
			// Если в соответствии нет сертификатов с сохраненным паролем, то для теста возьмем первый из списка сертификат.
			Сертификат = ТекСертификат;
		КонецЕсли;
		Если КлючЗначение.Значение.Свойство("ПарольПолучен", ПарольПолучен) И ПарольПолучен = Истина Тогда
			Сертификат = ТекСертификат;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Сертификат) Тогда
		ЭлектронныеДокументыСлужебныйКлиент.ТестНастроекСПроверкойСертификата(Сертификат, , , ЭтаФорма);
	Иначе
		ТекстСообщения = НСтр("ru = 'Нет доступных сертификатов. Тест не выполнен.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияОтпечатковПроверитьСвязьЭДО(Отпечатки, Параметры = Неопределено) Экспорт
	
	МассивОтпечатковСертификатов = Новый Массив;
	Для Каждого КлючЗначение Из Отпечатки Цикл
		МассивОтпечатковСертификатов.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
	Соответствие = ЭлектронныеДокументыСлужебныйВызовСервера.СоответствиеДоступныхСертификатовИПараметров(
												МассивОтпечатковСертификатов, Объект.Ссылка);
	
	МассивСертификатов = Новый Массив;
	Для Каждого КлючЗначение Из Соответствие Цикл
		МассивСертификатов.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(МассивСертификатов) Тогда
		ТекстСообщения = НСтр("ru = 'Нет доступных сертификатов. Тест не выполнен.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ОбработкаПолученияМаркера = Новый ОписаниеОповещения("ПолучениеМаркераДляВыбранногоСертификата", ЭтотОбъект, ДополнительныеПараметры);
	ОбработкаЗавершения = Новый ОписаниеОповещения("ДействияПослеТестаСвязиЭДО", ЭтотОбъект, ДополнительныеПараметры);
	
	ОписаниеДанных = Новый Структура;
	
	ШаблонОперация = НСтр("ru = 'Тест аутентификации: %1'");
	Операция = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОперация,
		Объект.Наименование);
	ОписаниеДанных.Вставить("Операция",            Операция);

	ОписаниеДанных.Вставить("ОтборСертификатов",   МассивСертификатов);
	ОписаниеДанных.Вставить("ИзменятьНабор",       Ложь);
	
	ОписаниеДанных.Вставить("ПоказатьКомментарий", Ложь);
	ОписаниеДанных.Вставить("ЭтоАутентификация",   Истина);
	ОписаниеДанных.Вставить("Данные",              ОбработкаПолученияМаркера);
	
	ЭлектроннаяПодписьКлиент.Расшифровать(ОписаниеДанных, , ОбработкаЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеМаркераДляВыбранногоСертификата(Знач РезультатВыполнения, Знач ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатВыполнения) = Тип("Структура")
		И Не РезультатВыполнения.ОписаниеДанных.Свойство("ВыбранныйСертификат") Тогда
		
		Возврат;
	КонецЕсли;
	
	СтруктураПараметровЗапросаМаркера = Новый Структура;
	СтруктураПараметровЗапросаМаркера.Вставить("СертификатПодписи", РезультатВыполнения.ОписаниеДанных.ВыбранныйСертификат.Ссылка);
	СтруктураПараметровЗапросаМаркера.Вставить("СпособОбменаЭД", Объект.СпособОбменаЭД);
	СтруктураПараметровЗапросаМаркера.Вставить("ИдентификаторОрганизации", Объект.ИдентификаторОрганизации);
	
	ЗашифрованныеДанные = ЭлектронныеДокументыСлужебныйВызовСервера.ЗашифрованныйМаркер(СтруктураПараметровЗапросаМаркера,
		ПараметрыАутентификацииНаСайте);
	Если Не ЗначениеЗаполнено(ЗашифрованныеДанные) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатВыполнения.ОписаниеДанных.Данные = ЗашифрованныеДанные;
	ВыполнитьОбработкуОповещения(РезультатВыполнения.Оповещение, РезультатВыполнения.ОписаниеДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияПослеТестаСвязиЭДО(РезультатВыполнения, Контекст = Неопределено) Экспорт
	
	Если ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		Если РезультатВыполнения.Успех = Истина Тогда
			ТекстСообщения = НСтр("ru = 'Тест профиля настроек выполнен успешно.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемПродолжить(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПараметрыФормыВыбора = Новый Структура;
		ПараметрыФормыВыбора.Вставить("РежимВыбора",        Истина);
		ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе", Истина);
		ПараметрыФормыВыбора.Вставить("МножественныйВыбор", Ложь);
		
		ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора",
			ПараметрыФормыВыбора, ЭтотОбъект, УникальныйИдентификатор);
	Иначе
		ПропускатьПроверкуНастроекЭДО = Истина;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершить(Знач Контрагент, Знач ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ПараметрыФормы = Новый Структура;
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("Контрагент", Контрагент);
		ЗначенияЗаполнения.Вставить("ПрофильНастроекЭДО", Объект.Ссылка);
		
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ОткрытьФорму("Справочник.СоглашенияОбИспользованииЭД.Форма.ФормаЭлемента", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВЛичныйКабинет(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Записать();
	Массив = Новый Массив;
	Массив.Добавить(Объект.Ссылка);
	
	ОбработкаОповещения = Новый ОписаниеОповещения("ПерейтиВЛичныйКабинетОповещение", ЭтотОбъект);
	
	ЭлектронныеДокументыСлужебныйКлиент.ПолучитьCоответствиеСоглашенийИПараметровСертификатов(ОбработкаОповещения, Массив);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВЛичныйКабинетОповещение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеПрофилейИПараметровСертификатов = "";
	СертификатПодписи  = Неопределено;
	ПарольПользователя = Неопределено;
	Если Результат.Свойство("СоответствиеПрофилейИПараметровСертификатов", СоответствиеПрофилейИПараметровСертификатов)
		И Не ЗначениеЗаполнено(СоответствиеПрофилейИПараметровСертификатов) Тогда
		
		ТекстСообщения = НСтр("ru='Нет доступных сертификатов, среди зарегистрированных по данному профилю настроек ЭДО.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
			,
			"СертификатыПодписейОрганизации",
			"Объект.СертификатыПодписейОрганизации",
			);
	Иначе
		Для Каждого ЭлементСтруктуры Из СоответствиеПрофилейИПараметровСертификатов Цикл
			СтруктураСертификата = ЭлементСтруктуры.Значение;
			Если ТипЗнч(СтруктураСертификата) = Тип("Структура") Тогда
				СтруктураСертификата.Свойство("СертификатПодписи", СертификатПодписи);
				СтруктураСертификата.Свойство("ПарольПользователя", ПарольПользователя);
			КонецЕсли;
			Прервать;
		КонецЦикла;
	КонецЕсли;
	Если ЗначениеЗаполнено(СертификатПодписи) Тогда
		ЭлектронныеДокументыКлиентПереопределяемый.СтартоватьМеханизмРаботыСОператоромЭДО(СертификатПодписи,
		Объект.Организация,
		"taxcomPrivat",
		Объект.ИдентификаторОрганизации,
		ПарольПользователя,
		УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешитьРедактированиеРеквизитовСпискаВидыЭДЗавершить(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		КонтролироватьСодержимоеНастроекЭД = Истина;
	Иначе
		
		ЗаполнитьЗначенияСвойств(Объект.ИсходящиеДокументы.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки),
			ДополнительныеПараметры);
		ЭтаФорма.ТекущийЭлемент = Элементы.ИдентификаторОрганизации;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешитьРедактированиеИдентификатораОрганизацииЗавершить(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		КонтролироватьСодержимоеНастроекЭД = Истина;
	Иначе
		Объект.ИдентификаторОрганизации = СокрЛП(ДополнительныеПараметры.СтарыйИдентификаторОрганизации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРедактированиеТекстаПриглашения(Результат, ДополнительныеПараметры) Экспорт
	
	Объект.ШаблонТекстаПриглашений = Результат;
	
КонецПроцедуры


#КонецОбласти
