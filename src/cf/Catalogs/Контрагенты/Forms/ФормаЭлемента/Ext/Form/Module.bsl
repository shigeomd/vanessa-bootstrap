&НаКлиенте
Перем ИнтервалПроверкиРезультата;
&НаКлиенте
Перем ЗаполнятьРеквизитыПоИНН;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.Печать
	
	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// Уведомим о появлении нового функционала
	НастройкиПредупреждений = ОбщегоНазначенияБП.НастройкиПредупрежденийОбИзменениях("ДокументыПоКонтрагенту, ИсторияКПП");
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, Объект, "ГруппаДополнительныеРеквизиты");
	
	ОткрытИзПлатежки = Параметры.Свойство("ОткрытИзПлатежки");
	
	Если Параметры.Ключ.Пустая() Тогда
		
		РазместитьКонтактнуюИнформацию();
		ЗаполнитьРеквизитыПоТекстуЗаполнения(Параметры.ТекстЗаполнения);
		ПодготовитьФормуНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("Подключаемый_ПоказатьПредупреждениеОбИзменениях",0.1, Истина);
	ПодключитьОбработчикОжидания("Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов", 0.1, Истина);
	
	// Если состояние контрагента не известно, то пытаемся его определить
	Если ПроверкаКонтрагентовВозможна(ЭтаФорма) И НЕ ЗначениеЗаполнено(СостояниеКонтрагента) Тогда
		ИнтервалПроверкиРезультата = 1;
		ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиКонтрагента", ИнтервалПроверкиРезультата, Истина);
	КонецЕсли;
	
	Если Не Объект.Ссылка.Пустая() И НастройкиПредупреждений.ДокументыПоКонтрагенту Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПоказатьПредупреждениеОбИзмененияхДокументыПоКонтрагенту", 0.2, Истина);
	КонецЕсли;
	
	Если Не Объект.Ссылка.Пустая() 
		И ДоступноКПП(ЭтотОбъект)
		И НастройкиПредупреждений.ИсторияКПП Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПоказатьПредупреждениеОбИзмененияхИсторияКПП", 0.3, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьИННОбособленногоПодразделения(ТекущийОбъект);
	
	// Обработчик подсистемы "Контактная информация"
	УправлениеКонтактнойИнформациейБП.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект, Отказ);
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// Сохраняем адрес с результатом проверки в память, чтобы исключить дополнительное обращение на сервер
	ТекущийОбъект.ДополнительныеСвойства.Вставить("АдресХранилища", АдресХранилища);
	
	Если ДанныеКонтактногоЛица <> Неопределено Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ДанныеКонтактногоЛица", ДанныеКонтактногоЛица);
	КонецЕсли;
	
	Если ДанныеРасчетногоСчета <> Неопределено Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ДанныеРасчетногоСчета", ДанныеРасчетногоСчета);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ДанныеКонтактногоЛица")
		И НЕ ТекущийОбъект.Модифицированность() Тогда
		
		ДанныеКонтактногоЛица        = Неопределено;
		ПредставлениеКонтактногоЛица = Неопределено;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ИзменениеОсновнойОрганизации" Тогда
		
		ОсновнаяОрганизация = Параметр;
		
	ИначеЕсли ИмяСобытия = "Запись_Контрагенты" Тогда
		
		Если Объект.Ссылка = Источник Тогда
			// Собственную запись специально не обрабатываем
			Возврат;
		КонецЕсли;
	
		Если Объект.ГоловнойКонтрагент <> Объект.Ссылка И Источник = Объект.ГоловнойКонтрагент Тогда
			ГоловнойКонтрагентПриИзмененииНаСервере();
			ЗапуститьПроверкуКонтрагента();
			Модифицированность	= Истина;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ЗагруженАдресныйКлассификатор" Тогда
		
		АдресныйКлассификаторПуст = АдресныйКлассификаторПуст();
		
		Элементы.ГруппаЗагрузкаАдресногоКлассификатора.Видимость = НЕ ИспользоватьРазделениеПоОбластямДанных И АдресныйКлассификаторПуст;
		
	ИначеЕсли ИмяСобытия = "УстановкаОсновногоДоговораКонтрагента" Тогда
		
		Если Объект.Ссылка = Параметр.Контрагент Тогда
			
			Объект.ОсновнойДоговорКонтрагента = Параметр.ОсновнойДоговор;
			
			Если НЕ Модифицированность Тогда
				Записать();
			КонецЕсли;
			
			Оповестить("УстановкаОсновногоДоговораКонтрагентаВыполнена");
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "УстановкаОсновногоБанковскогоСчета" 
		  ИЛИ ИмяСобытия = "УстановкаОсновногоБанковскогоСчетаПриЗаписи" Тогда
		
		Если Объект.Ссылка = Параметр.КонтрагентОрганизация Тогда
			
			Объект.ОсновнойБанковскийСчет = Параметр.ОсновнойБанковскийСчет;
			
			Если НЕ Модифицированность Тогда
				Записать();
			КонецЕсли;
			
			Оповестить("УстановкаОсновногоБанковскогоСчетаВыполнена");
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "УстановкаОсновногоКонтактногоЛица" Тогда
		
		Если Объект.Ссылка = Параметр.Контрагент Тогда
			
			Объект.ОсновноеКонтактноеЛицо = Параметр.ОсновноеКонтактноеЛицо;
			
			Если НЕ Модифицированность Тогда
				Записать();
			КонецЕсли;
			
			Оповестить("УстановкаОсновногоКонтактногоЛицаВыполнена");
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
	
		Если НЕ ЗначениеЗаполнено(Объект.ОсновнойБанковскийСчет) Тогда
			
			Объект.ОсновнойБанковскийСчет = НовыйОбъект;
			Модифицированность = Истина;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
	
		Если НЕ ЗначениеЗаполнено(Объект.ОсновнойДоговорКонтрагента) Тогда
			
			Объект.ОсновнойДоговорКонтрагента = НовыйОбъект;
			Модифицированность = Истина;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
	
		Если НЕ ЗначениеЗаполнено(Объект.ОсновноеКонтактноеЛицо) Тогда
			
			Объект.ОсновноеКонтактноеЛицо = НовыйОбъект;
			Модифицированность = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформациейБП.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	РазместитьКонтактнуюИнформацию();
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	ПодготовитьФормуНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		Отказ = Истина;
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗакрытиемЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.Свойство("ПропуститьПроверку") 
		И ПараметрыЗаписи.ПропуститьПроверку Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоФизЛицо = Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо");
	
	Если (Объект.ИННВведенКорректно и Объект.КППВведенКорректно) 
		или (Объект.ИННВведенКорректно и ЭтоФизЛицо) Тогда 
		
		КоличествоЭлементовДублей = ВыполнитьПоискДублейСервер(Объект.ИНН, Объект.КПП, Объект.Ссылка);
		
		ЕстьДубли = КоличествоЭлементовДублей > 0; 
		
		Если ЕстьДубли Тогда
			
			Отказ = Истина;
			
			ТекстВопроса = НСтр("ru = 'Уже есть элементы с таким %1. Записать?'");
			Если ЭтоФизЛицо Тогда
				ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, НСтр("ru = 'ИНН'"));
			Иначе
				ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, НСтр("ru = 'ИНН и КПП'"));
			КонецЕсли;
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("КоличествоЭлементовДублей", КоличествоЭлементовДублей);
			ДополнительныеПараметры.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
			
			Оповещение = Новый ОписаниеОповещения("ВопросЗаписатьЭлементСНеуникальнымИННЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	СостояниеКонтрагентаИзменилось = Ложь;
	Оповестить("Запись_Контрагенты", , Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	

	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтаФорма, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если СостояниеКонтрагентаИзменилось И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СохранитьРезультатПроверкиКонтрагентаСервер();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПолеПоискаИНННаименованиеПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ПолеПоискаИНННаименование)
		И НЕ ЗначениеЗаполнено(Объект.ИНН) 
		И НЕ ЗначениеЗаполнено(Объект.Наименование) 
		И (НЕ ЗначениеЗаполнено(ЮрАдресКонтрагента) 
		ИЛИ ЮрАдресКонтрагента = УправлениеКонтактнойИнформациейКлиентСерверБП.ПредставлениеПустойГиперссылки()) Тогда
		
		ЗаполнитьРеквизитыПоДаннымЕГРНаКлиенте();
		ЗаполнятьРеквизитыПоИНН = Ложь;
		ПодключитьОбработчикОжидания("Подключаемый_РазрешитьЗаполнениеРеквизитовПоИНН", 0.2, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)

	Если ФормироватьНаименованиеПолноеАвтоматически Тогда
		Объект.НаименованиеПолное = Объект.Наименование;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВидПриИзменении(Элемент)
	
	ВидПриИзмененииНаСервере();
	ЗапуститьПроверкуКонтрагента();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеПриИзменении(Элемент)

	ФормироватьНаименованиеПолноеАвтоматически = ПустаяСтрока(Объект.НаименованиеПолное)
		ИЛИ (Объект.НаименованиеПолное = Объект.Наименование);

КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Список = Новый СписокЗначений;
	Если ЗначениеЗаполнено(Объект.НаименованиеПолное) Тогда
		Список.Добавить(Объект.НаименованиеПолное);
	КонецЕсли;
	Для каждого НаименованиеАвтозаполнения Из НаименованияАвтозаполнения Цикл
		ТекНаименование = НаименованиеАвтозаполнения.Значение;
		Если ЗначениеЗаполнено(ТекНаименование)	
			И Список.НайтиПоЗначению(ТекНаименование) = Неопределено Тогда
			Список.Добавить(ТекНаименование);
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(Объект.Наименование)
		И Список.НайтиПоЗначению(Объект.Наименование) = Неопределено Тогда
		Список.Добавить(Объект.Наименование);
	КонецЕсли;

	Оповещение = Новый ОписаниеОповещения("НаименованиеПолноеНачалоВыбораЗавершение", ЭтотОбъект);
	ПоказатьВыборИзСписка(Оповещение, Список, Элементы.НаименованиеПолное);

КонецПроцедуры

&НаКлиенте
Процедура СтранаРегистрацииПриИзменении(Элемент)
	
	СтранаРегистрацииПриИзмененииНаСервере();
	
	УправлениеФормой(ЭтаФорма);
	ЗапуститьПроверкуКонтрагента();
	
КонецПроцедуры

&НаКлиенте
Процедура ГоловнойКонтрагентПриИзменении(Элемент)
	
	ГоловнойКонтрагентПриИзмененииНаСервере();
	ЗапуститьПроверкуКонтрагента();
	
КонецПроцедуры

&НаКлиенте
Процедура ЮрАдресКонтрагентаНажатие(Элемент, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиентБП.ГиперссылкаНажатие(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ФактАдресКонтрагентаНажатие(Элемент, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиентБП.ГиперссылкаНажатие(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПочтовыйАдресКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.ПредставлениеНачалоВыбора(ЭтаФорма, Элемент, Модифицированность, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПочтовыйАдресКонтрагентаПриИзменении(Элемент)
	
	Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПоказатьПредупреждениеОбИзменениях()
	
	ОбщегоНазначенияБПКлиент.ПоказатьПредупреждениеОбИзменениях("КонтрагентыСкрытыеРеквизиты");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПоказатьПредупреждениеОбИзмененияхДокументыПоКонтрагенту()
	
	ОбщегоНазначенияБПКлиент.ПоказатьПредупреждениеОбИзменениях("ДокументыПоКонтрагенту");
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.ПредставлениеНачалоВыбора(ЭтаФорма, Элемент, Модифицированность, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонКонтрагентаПриИзменении(Элемент)
	
	Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ФаксКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.ПредставлениеНачалоВыбора(ЭтаФорма, Элемент, Модифицированность, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ФаксКонтрагентаПриИзменении(Элемент)
	
	Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЮрФактАдресаСовпадаютПриИзменении(Элемент)
	
	Если ЮрФактАдресаСовпадают Тогда
		СкопироватьПолеКонтактнойИнформации("ФактАдресКонтрагента", "ЮрАдресКонтрагента");
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЮрПочтовыйАдресаСовпадаютПриИзменении(Элемент)
	
	Если ЮрПочтовыйАдресаСовпадают Тогда
		СкопироватьПолеКонтактнойИнформации("ПочтовыйАдресКонтрагента", "ЮрАдресКонтрагента");
		
		Если ПочтовыйАдресКонтрагента = УправлениеКонтактнойИнформациейКлиентСерверБП.ПредставлениеПустойГиперссылки() Тогда
			ПочтовыйАдресКонтрагента = "";
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИННПриИзменении(Элемент)
	
	ИННПриИзмененииНаСервере();
	ЗапуститьПроверкуКонтрагента();
	ЗаполнятьРеквизитыПоИНН = Ложь;
	ПодключитьОбработчикОжидания("Подключаемый_РазрешитьЗаполнениеРеквизитовПоИНН", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КПППриИзменении(Элемент)
	
	КПППриИзмененииНаСервере();
	ЗапуститьПроверкуКонтрагента();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПоясненияНекорректногоИННОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	ОбработатьНажатиеНаСсылку(Элемент, НавигационнаяСсылка, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура НадписьПоясненияНекорректногоКППОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	ОбработатьНажатиеНаСсылку(Элемент, НавигационнаяСсылка, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ВидГосударственногоОрганаПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоДаннымЕГР(Команда)
	
	ЗаполнитьРеквизитыПоДаннымЕГРНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоНаименованию(Команда)
	
	ЗаполнитьРеквизитыПоНаименованиюНаКлиенте(Объект.Наименование);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоИНН(Команда)
	
	Если НЕ ЗаполнятьРеквизитыПоИНН Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ОбособленноеПодразделение Тогда
		ПоказатьПредупреждение(, НСтр("ru='Реквизиты обособленных подразделений заполняются вручную.'"));
		Возврат;
	ИначеЕсли Объект.СтранаРегистрации <> ПредопределенноеЗначение("Справочник.СтраныМира.Россия") Тогда
		ПоказатьПредупреждение(, НСтр("ru='Автоматически заполняются только реквизиты российских контрагентов.'"));
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ИНН) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Поле ""ИНН"" не заполнено'"));
		ТекущийЭлемент = Элементы.ИНН;
		Возврат;
	ИначеЕсли НЕ Объект.ИННВведенКорректно Тогда
		ПоказатьПредупреждение(, Строка(НадписьПоясненияНекорректногоИНН));
		ТекущийЭлемент = Элементы.ИНН;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Наименование) 
		ИЛИ (ЗначениеЗаполнено(ЮрАдресКонтрагента) 
		И ЮрАдресКонтрагента <> УправлениеКонтактнойИнформациейКлиентСерверБП.ПредставлениеПустойГиперссылки()) Тогда
		ТекстВопроса = НСтр("ru='Перезаполнить текущие реквизиты?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьРеквизитыПоИННЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ВыполнитьЗаполнениеРеквизитовПоИНН();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьАдресныйКлассификатор(Команда)
	
	АдресныйКлассификаторКлиент.ЗагрузитьАдресныйКлассификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписатьИЗакрыть(Команда)
	
	ЗаписатьИЗакрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ЦветВыделенияНекорректногоЗначение = ЦветаСтиля.ЦветВыделенияКонтрагентаСОшибкой;

	Если Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		Вид	= "ФизическоеЛицо";
	ИначеЕсли Объект.ОбособленноеПодразделение Тогда
		Вид	= "ОбособленноеПодразделение";
	ИначеЕсли Объект.ГосударственныйОрган Тогда
		Вид	= "ГосударственныйОрган";
	Иначе
		Вид	= "ЮридическоеЛицо";
	КонецЕсли;
	
	ФормироватьНаименованиеПолноеАвтоматически = ПустаяСтрока(Объект.НаименованиеПолное)
		ИЛИ (Объект.НаименованиеПолное = Объект.Наименование);
	
	ОсновнаяОрганизация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	
	АдресныйКлассификаторПуст = НЕ АдресныйКлассификатор.КлассификаторЗагружен();
	ИспользоватьРазделениеПоОбластямДанных = ПолучитьФункциональнуюОпцию("РаботаВМоделиСервиса");
	Элементы.ГруппаЗагрузкаАдресногоКлассификатора.Видимость = НЕ ИспользоватьРазделениеПоОбластямДанных И АдресныйКлассификаторПуст;
	
	ПроверитьИНН = Истина;
	ПроверитьКПП = Истина;
	
	СтруктураДляПроверкиИННиКПП = СтруктураДляПроверкиИННиКПП(Объект, ПроверитьИНН, ПроверитьКПП);
	
	УстановитьВидимостьЭлементов();
	
	УправлениеФормой(ЭтаФорма);
	
	ПроверитьИННиКПП(СтруктураДляПроверкиИННиКПП, ЭтаФорма);
	ПроверитьДубли(ЭтаФорма);
	
	// Получили признак существования из регистра
	ИспользованиеПроверкиВозможно = ПроверкаКонтрагентовВызовСервера.ИспользованиеПроверкиВозможно();
	
	// Если контрагент не проверен, но проверка возможна, то запускаем проверку контрагента
	Если ИспользованиеПроверкиВозможно  Тогда
		
		СостояниеКонтрагента = ПроверкаКонтрагентовВызовСервера.ТекущееСостояниеКонтрагента(Объект.Ссылка, Объект.ИНН, Объект.КПП);
		АдресХранилища 		 = ПроверкаКонтрагентов.АдресХранилищаСВосстановленнымСостояниемКонтрагента(Объект.Ссылка, Объект.ИНН, Объект.КПП, УникальныйИдентификатор);
		
		Если ЗначениеЗаполнено(СостояниеКонтрагента) Тогда
			ОтобразитьРезультатПроверкиКонтрагента(ЭтаФорма);
		Иначе
			ПроверитьКонтрагента(ЭтаФорма);
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	// Закладка Адреса, телефоны
	Если Форма.ЮрФактАдресаСовпадают Тогда
		Элементы.ГруппаФактАдресКонтрагента.ТекущаяСтраница	= Элементы.СтраницаФактАдресКонтрагентаСовпадает;
	Иначе
		Элементы.ГруппаФактАдресКонтрагента.ТекущаяСтраница	= Элементы.СтраницаФактАдресКонтрагента;
	КонецЕсли;
	
	Если Форма.ЮрПочтовыйАдресаСовпадают Тогда
		Элементы.ГруппаПочтовыйАдресКонтрагента.ТекущаяСтраница	= Элементы.СтраницаПочтовыйАдресКонтрагентаСовпадает;
	Иначе
		Элементы.ГруппаПочтовыйАдресКонтрагента.ТекущаяСтраница	= Элементы.СтраницаПочтовыйАдресКонтрагента;
	КонецЕсли;
	
	Если ПустаяСтрока(Форма.ФактАдресКонтрагента)
		ИЛИ Форма.ФактАдресКонтрагента = УправлениеКонтактнойИнформациейКлиентСерверБП.ПредставлениеПустойГиперссылки() Тогда
			Форма.ФактАдресКонтрагентаСовпадает = НСтр("ru = '<не заполнен>'");
	Иначе
		Форма.ФактАдресКонтрагентаСовпадает = Форма.ФактАдресКонтрагента;	
	КонецЕсли;
	
	Если ПустаяСтрока(Форма.ПочтовыйАдресКонтрагента)
		ИЛИ Форма.ПочтовыйАдресКонтрагента = УправлениеКонтактнойИнформациейКлиентСерверБП.ПредставлениеПустойГиперссылки() Тогда
			Форма.ПочтовыйАдресКонтрагентаСовпадает = НСтр("ru = '<не заполнен>'");
	Иначе
		Форма.ПочтовыйАдресКонтрагентаСовпадает = Форма.ПочтовыйАдресКонтрагента;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ВидГосударственногоОргана) Тогда
		
		Если Объект.ВидГосударственногоОргана = ПредопределенноеЗначение("Перечисление.ВидыГосударственныхОрганов.НалоговыйОрган") Тогда
			Элементы.КодГосударственногоОргана.Заголовок = НСтр("ru = 'Код инспекции'");
			Элементы.КодГосударственногоОргана.ОграничениеТипа = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(4));
		ИначеЕсли Объект.ВидГосударственногоОргана = ПредопределенноеЗначение("Перечисление.ВидыГосударственныхОрганов.ОрганПФР") Тогда
			Элементы.КодГосударственногоОргана.Заголовок = НСтр("ru = 'Код отделения'");
			Элементы.КодГосударственногоОргана.ОграничениеТипа = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3));
		ИначеЕсли Объект.ВидГосударственногоОргана = ПредопределенноеЗначение("Перечисление.ВидыГосударственныхОрганов.ОрганФСС") Тогда
			Элементы.КодГосударственногоОргана.Заголовок = НСтр("ru = 'Код отделения'");
			Элементы.КодГосударственногоОргана.ОграничениеТипа = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(4));
		Иначе
			Элементы.КодГосударственногоОргана.Заголовок = НСтр("ru = 'Код'");
			Элементы.КодГосударственногоОргана.ОграничениеТипа = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10));
		КонецЕсли;
		
	КонецЕсли;
	
	АдресЗаголовок = НСтр("ru='Адрес и телефон'");
	Если ЗначениеЗаполнено(Форма.ЮрАдресКонтрагента) И НЕ Форма.ЮрАдресКонтрагента = УправлениеКонтактнойИнформациейКлиентСерверБП.ПредставлениеПустойГиперссылки() Тогда
		АдресЗаголовок = АдресЗаголовок + ": " + Форма.ЮрАдресКонтрагента;
		Если ЗначениеЗаполнено(Форма.ТелефонКонтрагента) Тогда
			АдресЗаголовок = АдресЗаголовок + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru=', тел: %1'"), Форма.ТелефонКонтрагента);
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Форма.ТелефонКонтрагента) Тогда
			АдресЗаголовок = АдресЗаголовок + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru=': тел: %1'"), Форма.ТелефонКонтрагента);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьЗаголовокГруппы(Форма, "ГруппаКонтактнаяИнформация", АдресЗаголовок);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокГруппы(Форма, НазваниеГруппы, ЗаголовокТекст)
	
	#Если ВебКлиент Тогда
		СистемнаяИнформация = Новый СистемнаяИнформация;
		ВерсияПлатформыБезНомераСборки = ОбщегоНазначенияКлиентСервер.ВерсияКонфигурацииБезНомераСборки(СистемнаяИнформация.ВерсияПриложения);
		Если ВерсияПлатформыБезНомераСборки = "8.3.5" Тогда
			Форма.Элементы[НазваниеГруппы].СвернутыйЗаголовок = ЗаголовокТекст;
		Иначе
			Форма.Элементы[НазваниеГруппы].ЗаголовокСвернутогоОтображения = ЗаголовокТекст;
		КонецЕсли;
	#Иначе
		Форма.Элементы[НазваниеГруппы].ЗаголовокСвернутогоОтображения = ЗаголовокТекст;
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КодГосударственногоОргана.Имя);
	
	ГруппаОтбораКодГосударственногоОргана = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораКодГосударственногоОргана.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбораКодГосударственногоОргана.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ГосударственныйОрган");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбораКодГосударственногоОргана.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВидГосударственногоОргана");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВидыГосударственныхОрганов.Прочий;
	
	ОтборЭлемента = ГруппаОтбораКодГосударственногоОргана.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.КодГосударственногоОргана");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "";
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ГоловнойКонтрагентПриИзмененииНаСервере()
	
	УстановитьИННОбособленногоПодразделения(Объект);
	
	ПроверитьИНН = Истина;
	ПроверитьКПП = Ложь;
	СтруктураДляПроверкиИННиКПП = СтруктураДляПроверкиИННиКПП(Объект, ПроверитьИНН, ПроверитьКПП);
	
	ПроверитьИННиКПП(СтруктураДляПроверкиИННиКПП, ЭтаФорма);
	
	ПроверитьДубли(ЭтаФорма);
	
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура РазместитьКонтактнуюИнформацию()

	ТаблицаРазмещенияКИ	= УправлениеКонтактнойИнформациейБП.ПолучитьПустуюТаблицуРазмещенияКонтактнойИнформации();
	
	// Обработчик подсистемы "Контактная информация" для закладки "ГруппаКонтактнаяИнформация"
	УправлениеКонтактнойИнформациейБП.ДобавитьОписаниеРазмещенияКонтактнойИнформации(ТаблицаРазмещенияКИ,
		Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, Элементы.ЮрАдресКонтрагента.ПутьКДанным);
		
	УправлениеКонтактнойИнформациейБП.ДобавитьОписаниеРазмещенияКонтактнойИнформации(ТаблицаРазмещенияКИ,
		Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, Элементы.ФактАдресКонтрагента.ПутьКДанным);
		
	УправлениеКонтактнойИнформациейБП.ДобавитьОписаниеРазмещенияКонтактнойИнформации(ТаблицаРазмещенияКИ,
		Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента, Элементы.ПочтовыйАдресКонтрагента.ПутьКДанным);
		
	УправлениеКонтактнойИнформациейБП.ДобавитьОписаниеРазмещенияКонтактнойИнформации(ТаблицаРазмещенияКИ,
		Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, Элементы.ТелефонКонтрагента.ПутьКДанным);
		
	УправлениеКонтактнойИнформациейБП.ДобавитьОписаниеРазмещенияКонтактнойИнформации(ТаблицаРазмещенияКИ,
		Справочники.ВидыКонтактнойИнформации.ФаксКонтрагенты, Элементы.ФаксКонтрагента.ПутьКДанным);
		
	УправлениеКонтактнойИнформациейБП.ДобавитьОписаниеРазмещенияКонтактнойИнформации(ТаблицаРазмещенияКИ,
		Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты, Элементы.EmailКонтрагента.ПутьКДанным);
	
	УправлениеКонтактнойИнформациейБП.ДобавитьОписаниеРазмещенияКонтактнойИнформации(ТаблицаРазмещенияКИ,
		Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагенты, Элементы.ДругаяИнформацияКонтрагента.ПутьКДанным);
		
	УправлениеКонтактнойИнформациейБП.ПриСозданииНаСервере(ЭтаФорма, Объект, "ГруппаКонтактнаяИнформация", "", ТаблицаРазмещенияКИ);
	
	// Добавление непредопределенной контактной информации
	ИсключаемыеВидыКИ	= Новый Массив;
	ИсключаемыеВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	ИсключаемыеВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
	ИсключаемыеВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента);
	ИсключаемыеВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
	ИсключаемыеВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ФаксКонтрагенты);
	ИсключаемыеВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты);
	ИсключаемыеВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагенты);
	
	УправлениеКонтактнойИнформациейБП.ПриСозданииНаСервере(ЭтаФорма, Объект, "ГруппаКонтактнаяИнформация", "", , ИсключаемыеВидыКИ);
	
	ЮрФактАдресаСовпадают		= СокрЛП(ЮрАдресКонтрагента) = СокрЛП(ФактАдресКонтрагента);
	ЮрПочтовыйАдресаСовпадают	= СокрЛП(ЮрАдресКонтрагента) = СокрЛП(ПочтовыйАдресКонтрагента)
		ИЛИ СокрЛП(?(ЮрАдресКонтрагента = УправлениеКонтактнойИнформациейКлиентСерверБП.ПредставлениеПустойГиперссылки(),
		"", ЮрАдресКонтрагента)) = СокрЛП(ПочтовыйАдресКонтрагента);

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииЮрАдресаКонтрагента()

	Если ЮрФактАдресаСовпадают ИЛИ ПустаяСтрока(ФактАдресКонтрагента) Тогда
		СкопироватьПолеКонтактнойИнформации("ФактАдресКонтрагента", "ЮрАдресКонтрагента");
	КонецЕсли;
	
	Если ЮрПочтовыйАдресаСовпадают ИЛИ ПустаяСтрока(ПочтовыйАдресКонтрагента) Тогда
		СкопироватьПолеКонтактнойИнформации("ПочтовыйАдресКонтрагента", "ЮрАдресКонтрагента");
	КонецЕсли;
	
	
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииФактАдресаКонтрагента()

	ЮрФактАдресаСовпадают = СокрЛП(ЮрАдресКонтрагента) = СокрЛП(ФактАдресКонтрагента);
	ЮрПочтовыйАдресаСовпадают = СокрЛП(ЮрАдресКонтрагента) = СокрЛП(ПочтовыйАдресКонтрагента);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьПолеКонтактнойИнформации(ИмяПриемника, ИмяИсточника)

	Модифицированность		= Истина;
	ЭтаФорма[ИмяПриемника]	= ЭтаФорма[ИмяИсточника];
	
	ИмяОписания	= "КонтактнаяИнформацияОписаниеДополнительныхРеквизитов";
	
	Отбор = Новый Структура("ИмяРеквизита");
	
	Отбор.ИмяРеквизита	= ИмяИсточника;
	ДанныеИсточника	= ЭтаФорма[ИмяОписания].НайтиСтроки(Отбор);
	Если ДанныеИсточника.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Отбор.ИмяРеквизита	= ИмяПриемника;
	ДанныеПриемника	= ЭтаФорма[ИмяОписания].НайтиСтроки(Отбор);
	Если ДанныеПриемника.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ДанныеИсточника[0].Тип = ДанныеПриемника[0].Тип Тогда
		Возврат
	КонецЕсли;
	
	ЗначенияПолейИсточника = ДанныеИсточника[0].ЗначенияПолей;
	Если ТипЗнч(ЗначенияПолейИсточника)=Тип("Строка") Тогда
		ДанныеПриемника[0].ЗначенияПолей = ЗначенияПолейИсточника;
	Иначе
		ДанныеПриемника[0].ЗначенияПолей = ЗначенияПолейИсточника.Скопировать();
	КонецЕсли;
	ДанныеПриемника[0].Представление = ДанныеИсточника[0].Представление;
	ДанныеПриемника[0].Комментарий = ДанныеИсточника[0].Комментарий;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция АдресныйКлассификаторПуст()

	Возврат НЕ АдресныйКлассификатор.КлассификаторЗагружен();

КонецФункции

&НаКлиенте
Процедура ОбработатьЗакрытиеФормыСпискаДублей(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	ПроверитьДубли(ЭтаФорма);
	ОтобразитьРезультатПроверкиКонтрагента(ЭтаФорма);
КонецПроцедуры	

&НаКлиенте
Процедура ОбработатьСитуациюВыбораДубля(Элемент)
		
	ПараметрыПередачи = Новый Структура;
	
	ПараметрыПередачи.Вставить("ИНН", Объект.ИНН);
	ПараметрыПередачи.Вставить("КПП", Объект.КПП);
	ПараметрыПередачи.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
	
	ЧтоВыполнитьПослеЗакрытия = Новый ОписаниеОповещения("ОбработатьЗакрытиеФормыСпискаДублей", ЭтаФорма);
	
	ОткрытьФорму("Справочник.Контрагенты.Форма.ФормаВыбораДублей", 
				  ПараметрыПередачи, 
				  Элемент,
				  ,
				  ,
				  ,
				  ЧтоВыполнитьПослеЗакрытия);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьДубли(Форма)
	
	Если Не Форма.ТолькоПросмотр Тогда
		Объект = Форма.Объект;
		
		КоличествоЭлементовДублей = 0;
		
		ЭтоЮрЛицо = Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо");
		
		Если (Объект.ИННВведенКорректно и Объект.КППВведенКорректно) 
			ИЛИ (Объект.ИННВведенКорректно и НЕ ЭтоЮрЛицо) Тогда 
			
			КоличествоЭлементовДублей = ВыполнитьПоискДублейСервер(Объект.ИНН, Объект.КПП, Объект.Ссылка);
			
			Форма.ЕстьДубли = НЕ КоличествоЭлементовДублей = 0;
			
			Если НЕ Форма.ЕстьДубли Тогда
				
				Объект.РасширенноеПредставлениеИНН = Объект.ИНН;
				Объект.РасширенноеПредставлениеКПП = Объект.КПП;
				
			КонецЕсли;
			
		Иначе
			Форма.ЕстьДубли = Ложь;
		КонецЕсли;
		
		ПрописатьИнформационныеНадписиДляДублей(Форма, КоличествоЭлементовДублей);
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПрописатьИнформационныеНадписиДляДублей(Форма, Знач КоличествоЭлементовДублей)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	// Если контрагент еще не записан, то не учитываем его при подсчете
	Если НЕ Объект.Ссылка.Пустая() Тогда
		КоличествоЭлементовДублей = КоличествоЭлементовДублей + 1;
	КонецЕсли;
	
	ЭтоФизЛицо = Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо");
	КонтрагентЗарегистрированВРФ = Объект.СтранаРегистрации = ПредопределенноеЗначение("Справочник.СтраныМира.Россия");
	
	Если Форма.ЕстьДубли Тогда
		
		СтруктураПараметровСообщенияОДублях = Новый Структура;
		
		Если КонтрагентЗарегистрированВРФ Тогда
			СтруктураПараметровСообщенияОДублях.Вставить("ИННиКПП", ?(ЭтоФизЛицо, НСтр("ru = 'ИНН'"), НСтр("ru = 'ИНН и КПП'")));

		Иначе
			СтруктураПараметровСообщенияОДублях.Вставить("ИННиКПП", НСтр("ru = 'налоговым номером'"));

		КонецЕсли;
		
		Объект.РасширенноеПредставлениеИНН = Объект.ИНН;
		Объект.РасширенноеПредставлениеКПП = Объект.КПП;
		
		Если КоличествоЭлементовДублей = 1 Тогда
			СтруктураПараметровСообщенияОДублях.Вставить("КоличествоЭлементовДублей", НСтр("ru = 'один'"));
			СтруктураПараметровСообщенияОДублях.Вставить("СклонениеКонтрагентов", НСтр("ru = 'контрагент'"));
		ИначеЕсли КоличествоЭлементовДублей < 5 Тогда
			СтруктураПараметровСообщенияОДублях.Вставить("КоличествоЭлементовДублей", КоличествоЭлементовДублей);
			СтруктураПараметровСообщенияОДублях.Вставить("СклонениеКонтрагентов", НСтр("ru = 'контрагента'"));
		Иначе
			СтруктураПараметровСообщенияОДублях.Вставить("КоличествоЭлементовДублей", КоличествоЭлементовДублей);
			СтруктураПараметровСообщенияОДублях.Вставить("СклонениеКонтрагентов", НСтр("ru = 'контрагентов'"));
		КонецЕсли;
		
		ТекстНадписиОДублях = НСтр("ru = 'С таким [ИННиКПП] есть [КоличествоЭлементовДублей] [СклонениеКонтрагентов]'");
		
		Если Объект.ОбособленноеПодразделение Тогда
		
			НадписьПоясненияНекорректногоКПП = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстНадписиОДублях, СтруктураПараметровСообщенияОДублях);																									   
			Форма.НадписьПоясненияНекорректногоКПП = Новый ФорматированнаяСтрока(НадписьПоясненияНекорректногоКПП,,Форма.ЦветВыделенияНекорректногоЗначение,,"ПоказатьДубли");
			
		Иначе
			
			НадписьПоясненияНекорректногоИНН = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстНадписиОДублях, СтруктураПараметровСообщенияОДублях);																										   
			Форма.НадписьПоясненияНекорректногоИНН = Новый ФорматированнаяСтрока(НадписьПоясненияНекорректногоИНН,,Форма.ЦветВыделенияНекорректногоЗначение,,"ПоказатьДубли");
			
		КонецЕсли;
		
	Иначе
		
		Если Объект.ИННВведенКорректно Тогда
			
			Форма.НадписьПоясненияНекорректногоИНН = "";
			Объект.РасширенноеПредставлениеИНН     = Объект.ИНН;
			
		КонецЕсли;
		
		Если Объект.КППВведенКорректно Тогда
			
			Форма.НадписьПоясненияНекорректногоКПП = "";
			Объект.РасширенноеПредставлениеКПП     = Объект.КПП;
			
		КонецЕсли;	
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьИННиКПП(СтруктураПараметров, Форма)
	
	ВозвращеннаяСтруктура = ОбщегоНазначенияБПКлиентСервер.ПроверитьКорректностьИННКПП(СтруктураПараметров);
	
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ВозвращеннаяСтруктура);
	
	ЗаполнитьЗначенияСвойств(Форма, ВозвращеннаяСтруктура);
	
	Если НЕ Форма.ТолькоПросмотр Тогда
		ЗаполнитьЗначенияСвойств(Форма.Объект, ВозвращеннаяСтруктура);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыполнитьПоискДублейСервер(Знач ИНН, Знач КПП, Знач Ссылка)
	
	Возврат Справочники.Контрагенты.ПроверитьДублиСправочникаКонтрагентыПоИННКПП(СокрЛП(ИНН), СокрЛП(КПП), Ссылка).Количество();
	
КонецФункции

&НаКлиенте
Процедура НаименованиеПолноеНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Объект.НаименованиеПолное = Результат.Значение;
		Модифицированность = Истина;
		ФормироватьНаименованиеПолноеАвтоматически = ПустаяСтрока(Объект.НаименованиеПолное)
			ИЛИ (Объект.НаименованиеПолное = Объект.Наименование);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаписатьЭлементСНеуникальнымИННЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		ПараметрыЗаписи = ДополнительныеПараметры.ПараметрыЗаписи;
		ПараметрыЗаписи.Вставить("ПропуститьПроверку", Истина);
		Если Записать(ПараметрыЗаписи) И ПараметрыЗаписи.Свойство("Закрыть") Тогда
			Закрыть();
		Иначе
			ПрописатьИнформационныеНадписиДляДублей(ЭтотОбъект, ДополнительныеПараметры.КоличествоЭлементовДублей);
			ОтобразитьРезультатПроверкиКонтрагента(ЭтотОбъект);
		КонецЕсли;
	Иначе
		ПрописатьИнформационныеНадписиДляДублей(ЭтотОбъект, ДополнительныеПараметры.КоличествоЭлементовДублей);
		ОтобразитьРезультатПроверкиКонтрагента(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеИзмененияКонтактнойИнформации(Результат) Экспорт
	
	Если Результат.ИмяРеквизита = "ЮрАдресКонтрагента" Тогда
		
		Если НЕ Результат.ЗначениеПоляДоИзменения = ЮрАдресКонтрагента Тогда
			
			ПриИзмененииЮрАдресаКонтрагента();
			
		КонецЕсли;
		
		УправлениеФормой(ЭтаФорма);
		
	ИначеЕсли Результат.ИмяРеквизита = "ФактАдресКонтрагента" Тогда
		
		ПриИзмененииФактАдресаКонтрагента();
		УправлениеФормой(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть()

	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("Закрыть", Истина);
	Если Записать(ПараметрыЗаписи) Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаписатьИЗакрыть();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоИНН(СтрокаИНН)
	Возврат ЗначениеЗаполнено(СтрокаИНН)
		И (СтрДлина(СтрокаИНН) = 10 ИЛИ СтрДлина(СтрокаИНН) = 12)
		И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаИНН);
КонецФункции

#Область ПроверкаКонтрагентов

&НаКлиенте
Процедура ЗапуститьПроверкуКонтрагента()
	
	// Если ИНН или КПП некорректные, или проверка не включена, то не запускаем проверку
	Если ИспользованиеПроверкиВозможно Тогда
		
		ПроверитьКонтрагента(ЭтаФорма);
		
		// Прерываем предыдущую проверку
		ИнтервалПроверкиРезультата = 1;
		ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиКонтрагента", ИнтервалПроверкиРезультата, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьКонтрагента(Форма)
	
	Объект = Форма.Объект;
	
	// Запуск фонового задания для проверки контрагента
	ПараметрыЗапуска = Новый Структура;
	ПараметрыЗапуска.Вставить("Контрагент", 	Объект.Ссылка);
	ПараметрыЗапуска.Вставить("ИНН", 			Объект.ИНН);
	ПараметрыЗапуска.Вставить("КПП", 			Объект.КПП);
	ПараметрыЗапуска.Вставить("АдресХранилища", Форма.АдресХранилища);
	
	ПроверкаКонтрагентовВызовСервера.ПроверитьКонтрагентаПриИзменении(ПараметрыЗапуска);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьРезультатПроверкиКонтрагента(Форма)
	
	Объект = Форма.Объект;
	
	// Устанавливаем текст заголовка
	Если ПроверкаКонтрагентовВозможна(Форма) И ЗначениеЗаполнено(Форма.СостояниеКонтрагента) Тогда
		
		Если Объект.ОбособленноеПодразделение Тогда
			
			ТекстПредупрежденияКПП = ПроверкаКонтрагентовВызовСервера.ПредставлениеРезультатаПроверкиКонтрагента(Объект.Ссылка, Объект.ИНН, Объект.КПП, 
				Форма.АдресХранилища, Форма.НадписьПоясненияНекорректногоКПП);
			
			// Для обособленного подразделения предупреждение пишем рядом с КПП 
			Форма.НадписьПоясненияНекорректногоИНН = Неопределено;
			Форма.НадписьПоясненияНекорректногоКПП = ТекстПредупрежденияКПП;
		Иначе
			
			ТекстПредупрежденияИНН = ПроверкаКонтрагентовВызовСервера.ПредставлениеРезультатаПроверкиКонтрагента(Объект.Ссылка, Объект.ИНН, Объект.КПП, 
				Форма.АдресХранилища, Форма.НадписьПоясненияНекорректногоИНН);

				
			// Для физ лица или юр лица предупреждение пишем рядом с ИНН 
			Форма.НадписьПоясненияНекорректногоИНН = ТекстПредупрежденияИНН;
			Форма.НадписьПоясненияНекорректногоКПП = Неопределено;
		КонецЕсли;
		
	Конецесли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПроверкаКонтрагентовВозможна(Форма)
	
	Если НЕ Форма.ИспользованиеПроверкиВозможно Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Форма.Объект.СтранаРегистрации <> ПредопределенноеЗначение("Справочник.СтраныМира.Россия") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ИННиКППКорректны(Форма) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИННиКППКорректны(Форма)
	
	Объект = Форма.Объект;
	
	ЭтоФизЛицо = Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо");
	Если НЕ (Объект.ИННВведенКорректно и Объект.КППВведенКорректно) 
		И НЕ (Объект.ИННВведенКорректно и ЭтоФизЛицо) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагента()
	
	СостояниеКонтрагента = ПроверкаКонтрагентовВызовСервера.ТекущееСостояниеКонтрагента(Объект.Ссылка, Объект.ИНН, Объект.КПП, АдресХранилища);
	Если НЕ ЗначениеЗаполнено(СостояниеКонтрагента) Тогда
		// Проверяем результат через 1,3 и 9 сек
		Если ИнтервалПроверкиРезультата < 9 Тогда
			ИнтервалПроверкиРезультата = ИнтервалПроверкиРезультата * 3;
			ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиКонтрагента", ИнтервалПроверкиРезультата, Истина);
			Возврат;
		КонецЕсли;
	Иначе
		// Результат получен
		СостояниеКонтрагентаИзменилось = Истина;
		ОтобразитьРезультатПроверкиКонтрагента(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНажатиеНаСсылку(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если Найти(НавигационнаяСсылка, "ПодробнееОПроверкеКонтрагентов") > 0 Тогда
		ПроверкаКонтрагентовКлиент.ОткрытьИнструкциюПоИспользованиюСервиса(СтандартнаяОбработка);
	Иначе
		ОбработатьСитуациюВыбораДубля(Элемент);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СохранитьРезультатПроверкиКонтрагентаСервер()
	
	ПроверкаКонтрагентов.СохранитьРезультатПроверкиКонтрагента(Объект, АдресХранилища);
	
КонецПроцедуры


&НаСервере
Процедура УстановитьВидимостьЭлементов()
	
	КонтрагентЗарегистрированВРФ = Объект.СтранаРегистрации = Справочники.СтраныМира.Россия;
	КонтрагентФизическоеЛицо = Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	
	Элементы.НаименованиеПолное.Заголовок = ?(КонтрагентФизическоеЛицо, НСтр("ru = 'ФИО'"), НСтр("ru = 'Полное наименование'"));
	Элементы.ГруппаГоловнойКонтрагент.Видимость = Объект.ОбособленноеПодразделение;
	Элементы.ДокументУдостоверяющийЛичность.Видимость = КонтрагентФизическоеЛицо;
	Элементы.ГруппаЗаполнениеПоДаннымЕГР.Видимость = ОтобразитьЗаполнениеПоДаннымЕГР;
	Элементы.ГруппаИНН.Видимость = НЕ Объект.ОбособленноеПодразделение;
	
	ДлинаИНН = ?(КонтрагентФизическоеЛицо, 12, 10);
	Элементы.ИНН.ОграничениеТипа = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(ДлинаИНН));
	Элементы.ИНН.ПодсказкаВвода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Введите ИНН %1 цифр'"), ДлинаИНН);
	
	Элементы.КнопкаЗаполнитьРеквизитыПоИНН.Видимость = КонтрагентЗарегистрированВРФ
														И НЕ Объект.ОбособленноеПодразделение
														И НЕ ОтобразитьЗаполнениеПоДаннымЕГР;
	
	Элементы.ГруппаКПП.Видимость = ДоступноКПП(ЭтотОбъект);
	
	Элементы.НалоговыйНомер.Видимость = НЕ КонтрагентЗарегистрированВРФ;
	
	// ОГРН, ОГРНИП или регистрационный номер для иностранного контрагента
	Если НЕ КонтрагентЗарегистрированВРФ Тогда
		Элементы.РегистрационныйНомер.Заголовок= НСтр("ru = 'Рег. номер'");
		Элементы.РегистрационныйНомер.Подсказка 		= НСтр("ru = 'Регистрационный номер, присвоенный иностранной организации в стране регистрации (инкорпорации)'");
		Элементы.РегистрационныйНомер.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
		Элементы.РегистрационныйНомер.ПодсказкаВвода 	= НСтр("ru = 'Регистрационный номер в стране регистрации'");
		Элементы.РегистрационныйНомер.Ширина 			= 28;
		Элементы.РегистрационныйНомер.Маска 			= "";
		Элементы.ИНН.Подсказка = НСтр("ru = 'Идентификационный номер налогоплательщика, присваивается иностранной организации 
											|при первой постановке на учет в налоговом органе Российской Федерации'");
		Элементы.ИНН.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	ИначеЕсли КонтрагентФизическоеЛицо Тогда
		Элементы.РегистрационныйНомер.Заголовок		= НСтр("ru = 'ОГРНИП'");
		Элементы.РегистрационныйНомер.Подсказка 		= 
			НСтр("ru = 'Основной государственный регистрационный номер индивидуального предпринимателя, 
					   |указан в Свидетельстве о государственной регистрации физического лица в качестве ИП'");
		Элементы.РегистрационныйНомер.ОтображениеПодсказки = ОтображениеПодсказки.Авто;
		Элементы.РегистрационныйНомер.ПодсказкаВвода 	= "";
		Элементы.РегистрационныйНомер.Ширина 			= 14;
		Элементы.РегистрационныйНомер.Маска 			= "999999999999999";
		Элементы.ИНН.ПодсказкаВвода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Введите ИНН %1 цифр'"), ДлинаИНН);
		Элементы.ИНН.Подсказка = НСтр("ru = 'Идентификационный номер налогоплательщика'");
		Элементы.ИНН.ОтображениеПодсказки = ОтображениеПодсказки.Авто;
	Иначе
		// Юридическое лицо
		Элементы.РегистрационныйНомер.Заголовок= НСтр("ru = 'ОГРН'");
		Элементы.РегистрационныйНомер.Подсказка 		= 
			НСтр("ru = 'Основной государственный регистрационный номер юридического лица'");
		Элементы.РегистрационныйНомер.ОтображениеПодсказки = ОтображениеПодсказки.Авто;
		Элементы.РегистрационныйНомер.ПодсказкаВвода 	= "";
		Элементы.РегистрационныйНомер.Маска 			= "9999999999999";
		Элементы.ИНН.Подсказка = НСтр("ru = 'Идентификационный номер налогоплательщика'");
		Элементы.ИНН.ОтображениеПодсказки = ОтображениеПодсказки.Авто;
	КонецЕсли;
	
	Элементы.КодПоОКПО.Видимость = КонтрагентЗарегистрированВРФ;
	Элементы.СтранаРегистрации.Видимость = НЕ Объект.ГосударственныйОрган;
	Элементы.ГруппаРегистрацияКакИП.Видимость = КонтрагентФизическоеЛицо;
	Элементы.ГруппаГосударственныйОрган.Видимость = Объект.ГосударственныйОрган;
	Элементы.КнопкаЗаполнитьРеквизитыПоНаименованию.Видимость = КонтрагентЗарегистрированВРФ
		И НЕ КонтрагентФизическоеЛицо 
		И НЕ Объект.ОбособленноеПодразделение
		И НЕ ОтобразитьЗаполнениеПоДаннымЕГР;
	
КонецПроцедуры

&НаСервере
Процедура ИННПриИзмененииНаСервере()
	
	ПроверитьИНН = Истина;
	ПроверитьКПП = Ложь;
	
	СтруктураДляПроверкиИННиКПП = СтруктураДляПроверкиИННиКПП(Объект, ПроверитьИНН, ПроверитьКПП);
	
	ПроверитьИННиКПП(СтруктураДляПроверкиИННиКПП, ЭтаФорма);
	
	ПроверитьДубли(ЭтаФорма);
	
	Если НЕ Объект.ОбособленноеПодразделение 
		И Объект.СтранаРегистрации = Справочники.СтраныМира.Россия
		И ЗначениеЗаполнено(Объект.ИНН)
		И Объект.ИННВведенКорректно 
		И НЕ ЗначениеЗаполнено(Объект.Наименование) 
		И (НЕ ЗначениеЗаполнено(ЮрАдресКонтрагента) 
		ИЛИ ЮрАдресКонтрагента = УправлениеКонтактнойИнформациейКлиентСерверБП.ПредставлениеПустойГиперссылки()) Тогда
		
		ОписаниеОшибки = "";
		ЗаполнитьРеквизитыПоИНННаСервере(ОписаниеОшибки);
		
	Иначе
		УстановитьВидимостьЭлементов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КПППриИзмененииНаСервере()
	
	Справочники.Контрагенты.УстановитьАктуальноеЗначениеИсторииКПП(Объект.КПП , Объект.ИсторияКПП);
	
	ПроверитьИНН = Ложь;
	ПроверитьКПП = Истина;
	
	СтруктураДляПроверкиИННиКПП = СтруктураДляПроверкиИННиКПП(Объект, ПроверитьИНН, ПроверитьКПП);
	
	ПроверитьИННиКПП(СтруктураДляПроверкиИННиКПП, ЭтаФорма);
	
	ПроверитьДубли(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СтранаРегистрацииПриИзмененииНаСервере()
	
	Если Объект.СтранаРегистрации <> Справочники.СтраныМира.Россия Тогда
		Объект.КПП = "";
	Иначе
		Объект.РегистрационныйНомер = "";
	КонецЕсли;
	
	УстановитьИННОбособленногоПодразделения(Объект);
	
	ПроверитьИНН = Истина;
	ПроверитьКПП = Истина;
	
	СтруктураДляПроверкиИННиКПП = СтруктураДляПроверкиИННиКПП(Объект, ПроверитьИНН, ПроверитьКПП);
	
	ПроверитьИННиКПП(СтруктураДляПроверкиИННиКПП, ЭтаФорма);
	
	ПроверитьДубли(ЭтаФорма);
	
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура ВидПриИзмененииНаСервере()
	
	Если Вид = "ФизическоеЛицо" Тогда
		Объект.ЮридическоеФизическоеЛицо	= Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		Объект.ИНН							= ?(Объект.СтранаРегистрации = Справочники.СтраныМира.Россия, "", Объект.ИНН);
		Объект.КПП							= "";
		Объект.ОбособленноеПодразделение	= Ложь;
		Объект.ГосударственныйОрган         = Ложь;
		Объект.ВидГосударственногоОргана        = Перечисления.ВидыГосударственныхОрганов.ПустаяСсылка();
		Объект.КодГосударственногоОргана        = "";
		Если Объект.ГоловнойКонтрагент <> Объект.Ссылка Тогда
			Объект.ГоловнойКонтрагент = Объект.Ссылка;
		КонецЕсли;
	ИначеЕсли Вид = "ОбособленноеПодразделение" Тогда
		Объект.ЮридическоеФизическоеЛицо        = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		Объект.ИНН                              = "";
		Объект.ДокументУдостоверяющийЛичность   = "";
		Объект.ОбособленноеПодразделение        = Истина;
		Объект.ГосударственныйОрган             = Ложь;
		Объект.ВидГосударственногоОргана        = Перечисления.ВидыГосударственныхОрганов.ПустаяСсылка();
		Объект.КодГосударственногоОргана        = "";
		Если Объект.ГоловнойКонтрагент = Объект.Ссылка Тогда
			Объект.ГоловнойКонтрагент = Неопределено;
		КонецЕсли;
	ИначеЕсли Вид = "ГосударственныйОрган" Тогда
		Объект.ЮридическоеФизическоеЛицо        = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		Объект.ДокументУдостоверяющийЛичность   = "";
		Объект.ОбособленноеПодразделение        = Ложь;
		Объект.СтранаРегистрации                = Справочники.СтраныМира.Россия;
		Объект.ГосударственныйОрган             = Истина;
		Если Объект.ГоловнойКонтрагент <> Объект.Ссылка Тогда
			Объект.ГоловнойКонтрагент = Объект.Ссылка;
		КонецЕсли;
	Иначе
		Объект.ЮридическоеФизическоеЛицо        = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		Объект.ИНН                              = ?(Объект.СтранаРегистрации = Справочники.СтраныМира.Россия, "", Объект.ИНН);
		Объект.КПП                              = "";
		Объект.ДокументУдостоверяющийЛичность   = "";
		Объект.ОбособленноеПодразделение        = Ложь;
		Объект.ГосударственныйОрган             = Ложь;
		Объект.ВидГосударственногоОргана        = Перечисления.ВидыГосударственныхОрганов.ПустаяСсылка();
		Объект.КодГосударственногоОргана        = "";
		Если Объект.ГоловнойКонтрагент <> Объект.Ссылка Тогда
			Объект.ГоловнойКонтрагент = Объект.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	ПроверитьИНН = Истина;
	ПроверитьКПП = Истина;
	
	СтруктураДляПроверкиИННиКПП = СтруктураДляПроверкиИННиКПП(Объект, ПроверитьИНН, ПроверитьКПП);
	
	ПроверитьИННиКПП(СтруктураДляПроверкиИННиКПП, ЭтаФорма);
	
	ПроверитьДубли(ЭтаФорма);
	
	УстановитьВидимостьЭлементов();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтруктураДляПроверкиИННиКПП(Объект, ПроверятьИНН, ПроверятьКПП)
	
	СтруктураДляПроверкиИННиКПП = Новый Структура();
	
	СтруктураДляПроверкиИННиКПП.Вставить("СтранаРегистрации",                     Объект.СтранаРегистрации);
	СтруктураДляПроверкиИННиКПП.Вставить("ИНН",                                   Объект.ИНН);
	СтруктураДляПроверкиИННиКПП.Вставить("КПП",                                   Объект.КПП);
	СтруктураДляПроверкиИННиКПП.Вставить("ЮридическоеФизическоеЛицо",             Объект.ЮридическоеФизическоеЛицо);
	СтруктураДляПроверкиИННиКПП.Вставить("ОбособленноеПодразделение",             Объект.ОбособленноеПодразделение);
	СтруктураДляПроверкиИННиКПП.Вставить("ПроверитьИНН",                          ПроверятьИНН);
	СтруктураДляПроверкиИННиКПП.Вставить("ПроверитьКПП",                          ПроверятьКПП);
	СтруктураДляПроверкиИННиКПП.Вставить("ЦветВыделенияНекорректногоЗначение",    ЦветаСтиля.ЦветВыделенияКонтрагентаСОшибкой);
	
	Возврат СтруктураДляПроверкиИННиКПП;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоИННЗавершение(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ВыполнитьЗаполнениеРеквизитовПоИНН();
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыполнитьЗаполнениеРеквизитовПоИНН(ПроверитьИНН = Ложь)
	
	ОписаниеОшибки = "";
	ЗаполнитьРеквизитыПоИНННаСервере(ОписаниеОшибки, ПроверитьИНН);
	
	Если ПроверкаКонтрагентовВозможна(ЭтаФорма) 
		И НЕ ЗначениеЗаполнено(СостояниеКонтрагента) Тогда
		ИнтервалПроверкиРезультата = 1;
		ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиКонтрагента", ИнтервалПроверкиРезультата, Истина);
	КонецЕсли;
	
	// Обработка ошибок
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Если ОписаниеОшибки = "НеУказаныПараметрыАутентификации" Тогда
		
			ТекстВопроса = НСтр("ru='Для автоматического заполнения реквизитов контрагентов
				|необходимо подключиться к интернет-поддержке пользователей.
				|Подключиться сейчас?'");
			ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержку", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
		Иначе
			ПоказатьПредупреждение(, ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьРеквизитыПоИНННаСервере(ОписаниеОшибки = "", ПроверитьИНН = Ложь)
	
	Если ОтобразитьЗаполнениеПоДаннымЕГР Тогда
		// Если нужно проверить ИНН, то берем из объекта (используется для заполнению по наименованию)
		Если ПроверитьИНН Тогда
			ИННОбъекта = Объект.ИНН
		Иначе
			ИННОбъекта = ПолеПоискаИНННаименование;
			// Запустим проверку после заполнения
			ПроверитьИНН = Истина;
		КонецЕсли;
		
		// Если заполняем по полю поиска, то установим вид контрагента
		Если СтрДлина(ИННОбъекта) = 10 Тогда
			Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
			Вид = "ЮридическоеЛицо";
		Иначе
			Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
			Вид = "ФизическоеЛицо";
		КонецЕсли;
		
		Объект.ОбособленноеПодразделение = Ложь;
		
	Иначе
		ИННОбъекта = Объект.ИНН;
	КонецЕсли;
	
	ЭтоЮрЛицо = Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	
	Если ЭтоЮрЛицо Тогда
		РеквизитыКонтрагента = СервисДанныхЕдиныхГосРеестров.РеквизитыЮрЛицаПоИНН(ИННОбъекта);
	Иначе
		РеквизитыКонтрагента = СервисДанныхЕдиныхГосРеестров.РеквизитыПредпринимателяПоИНН(ИННОбъекта);
	КонецЕсли;
	Если ЗначениеЗаполнено(РеквизитыКонтрагента.ОписаниеОшибки) Тогда
		ОписаниеОшибки = РеквизитыКонтрагента.ОписаниеОшибки;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, РеквизитыКонтрагента);
	Объект.НаименованиеПолное = РеквизитыКонтрагента.НаименованиеСокращенное;
	ФормироватьНаименованиеПолноеАвтоматически = ПустаяСтрока(Объект.НаименованиеПолное)
		ИЛИ (Объект.НаименованиеПолное = Объект.Наименование);
	
	НаименованияАвтозаполнения.Очистить();
	НаименованияАвтозаполнения.Добавить(РеквизитыКонтрагента.НаименованиеПолное);
	НаименованияАвтозаполнения.Добавить(РеквизитыКонтрагента.НаименованиеСокращенное);
	
	Если ЭтоЮрЛицо Тогда
		
		// Заполнение адресов
		
		ЗаполнитьЭлементКонтактнойИнформации("ЮрАдресКонтрагента", РеквизитыКонтрагента.ЮридическийАдрес);
		
		ЗаполнитьЭлементКонтактнойИнформации("ФактАдресКонтрагента", РеквизитыКонтрагента.ЮридическийАдрес);
		ЮрФактАдресаСовпадают = Истина;
		
		ЗаполнитьЭлементКонтактнойИнформации("ПочтовыйАдресКонтрагента", РеквизитыКонтрагента.ЮридическийАдрес);
		ЮрПочтовыйАдресаСовпадают = Истина;
		
		// Заполнение телефона
		
		ЗаполнитьЭлементКонтактнойИнформации("ТелефонКонтрагента", РеквизитыКонтрагента.Телефон);
		
		// Заполнение контактного лица 
		
		Если РеквизитыКонтрагента.Руководитель <> Неопределено 
			И НЕ ЗначениеЗаполнено(Объект.ОсновноеКонтактноеЛицо) Тогда
			
			ДанныеКонтактногоЛица = РеквизитыКонтрагента.Руководитель;
			ПредставлениеКонтактногоЛица = ДанныеКонтактногоЛица.Фамилия
				+ " " + ДанныеКонтактногоЛица.Имя
				+ " " + ДанныеКонтактногоЛица.Отчество
				+ ", " + ДанныеКонтактногоЛица.Должность;
			
		КонецЕсли;
		
		Если ДоступноКПП(ЭтотОбъект) Тогда
			Справочники.Контрагенты.УстановитьАктуальноеЗначениеИсторииКПП(Объект.КПП , Объект.ИсторияКПП);
		КонецЕсли;
			
	Иначе
		
		Объект.КПП = "";
		СвидетельствоОРегистрации = РеквизитыКонтрагента.СвидетельствоОРегистрации;
		Если СвидетельствоОРегистрации <> Неопределено Тогда
			Объект.СвидетельствоСерияНомер = "" + СвидетельствоОРегистрации.Серия + " " + СвидетельствоОРегистрации.Номер;
			Объект.СвидетельствоДатаВыдачи = СвидетельствоОРегистрации.Дата;
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверим дубли
	СтруктураДляПроверкиИННиКПП = СтруктураДляПроверкиИННиКПП(Объект, ПроверитьИНН, Истина);
	ПроверитьИННиКПП(СтруктураДляПроверкиИННиКПП, ЭтотОбъект);
	ПроверитьДубли(ЭтотОбъект);

	// Проверим в ФНС
	Если ИспользованиеПроверкиВозможно Тогда
		
		СостояниеКонтрагента = ПроверкаКонтрагентовВызовСервера.ТекущееСостояниеКонтрагента(
			Объект.Ссылка, Объект.ИНН, Объект.КПП);
		АдресХранилища 		 = ПроверкаКонтрагентов.АдресХранилищаСВосстановленнымСостояниемКонтрагента(
			Объект.Ссылка, Объект.ИНН, Объект.КПП, УникальныйИдентификатор);
	
		Если ЗначениеЗаполнено(СостояниеКонтрагента) Тогда
			ОтобразитьРезультатПроверкиКонтрагента(ЭтотОбъект);
		Иначе
			ПроверитьКонтрагента(ЭтотОбъект);
		КонецЕсли;
			
	КонецЕсли;
	
	УстановитьВидимостьЭлементов();
	УправлениеФормой(ЭтотОбъект);
	Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЭлементКонтактнойИнформации(ИмяРеквизита, СтруктураДанных)
	
	Если СтруктураДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отбор  = Новый Структура("ИмяРеквизита", ИмяРеквизита);
	Строки = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
	ДанныеСтроки = ?(Строки.Количество() = 0, Неопределено, Строки[0]);
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтруктураДанных);
	ДанныеСтроки.ЗначенияПолей = СтруктураДанных.КонтактнаяИнформация;
	ЭтотОбъект[ИмяРеквизита]   = СтруктураДанных.Представление;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИнтернетПоддержку(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержкуЗавершение", ЭтотОбъект, ДопПараметры);
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(ОписаниеОповещения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИнтернетПоддержкуЗавершение(Результат, ДопПараметры) Экспорт

	Если Результат <> Неопределено Тогда
		ВыполнитьЗаполнениеРеквизитовПоИНН();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьЗаполнениеРеквизитовПоИНН()

	ЗаполнятьРеквизитыПоИНН = Истина;	

КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьРеквизитыПоТекстуЗаполнения(ТекстЗаполнения)

	Если ЭтоИНН(ТекстЗаполнения) Тогда
	
		Объект.Наименование = "";
		Объект.ИНН = ТекстЗаполнения;
		Объект.ЮридическоеФизическоеЛицо = ?(СтрДлина(ТекстЗаполнения) = 10,
			Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо,
			Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
		Объект.ОбособленноеПодразделение = Ложь;
			
		ЗаполнитьРеквизитыПоИНННаСервере(, Истина);
		
		ТекстЗаполнения = Неопределено;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ОтобразитьЗаполнениеПоДаннымЕГР = Истина;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоДаннымЕГРНаКлиенте()

	Если ПустаяСтрока(ПолеПоискаИНННаименование) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСТр("ru='Введите ИНН или Наименование'"),, "ПолеПоискаИНННаименование");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗаполнятьРеквизитыПоИНН Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоИНН(ПолеПоискаИНННаименование) Тогда
		Если ЗначениеЗаполнено(Объект.Наименование) 
			ИЛИ (ЗначениеЗаполнено(ЮрАдресКонтрагента) 
			И ЮрАдресКонтрагента <> УправлениеКонтактнойИнформациейКлиентСерверБП.ПредставлениеПустойГиперссылки()) Тогда
			ТекстВопроса = НСтр("ru='Перезаполнить текущие реквизиты?'");
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьРеквизитыПоИННЗавершение", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе
			ВыполнитьЗаполнениеРеквизитовПоИНН();
		КонецЕсли;
	Иначе // Это наименование
		ЗаполнитьРеквизитыПоНаименованиюНаКлиенте(ПолеПоискаИНННаименование);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоНаименованиюНаКлиенте(Наименование)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Наименование", Наименование);
	ПараметрыФормы.Вставить("РеквизитыЗаполнены", 
	ЗначениеЗаполнено(Объект.ИНН)
		ИЛИ (ЗначениеЗаполнено(ЮрАдресКонтрагента) 
		И ЮрАдресКонтрагента <> УправлениеКонтактнойИнформациейКлиентСерверБП.ПредставлениеПустойГиперссылки()));
	ДопПараметры = Новый Структура;
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьРеквизитыПоНаименованиюЗавершение", ЭтотОбъект, ДопПараметры);
	ОткрытьФорму("Справочник.Контрагенты.Форма.ЗаполнениеПоНаименованию", 
		ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоНаименованиюЗавершение(Результат, ДопПараметры) Экспорт

	Если НЕ ЗначениеЗаполнено(Результат) 
		ИЛИ ТипЗнч(Результат) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ИНН = Результат;
	ВыполнитьЗаполнениеРеквизитовПоИНН(Истина);
	
	ТекущийЭлемент = Элементы.Наименование;

КонецПроцедуры 

#КонецОбласти

#КонецОбласти

#Область ПроцедурыПодсистемыКонтактнаяИнформация

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	
	УправлениеКонтактнойИнформациейКлиент.ПредставлениеПриИзменении(ЭтаФорма, Элемент);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Результат = УправлениеКонтактнойИнформациейКлиент.ПредставлениеНачалоВыбора(ЭтаФорма, Элемент, , СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	
	Результат = УправлениеКонтактнойИнформациейКлиент.ПредставлениеОчистка(ЭтаФорма, Элемент.Имя);
	ОбновитьКонтактнуюИнформацию(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	
	Результат = УправлениеКонтактнойИнформациейКлиент.ПодключаемаяКоманда(ЭтаФорма, Команда.Имя);
	ОбновитьКонтактнуюИнформацию(Результат);
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуВводаАдреса(ЭтаФорма, Результат);
	
КонецПроцедуры

&НаСервере
Функция ОбновитьКонтактнуюИнформацию(Результат = Неопределено) Экспорт
	
	Возврат УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтаФорма, Объект, Результат);
	
КонецФункции

#КонецОбласти

#Область ПроцедурыПодсистемыСвойств

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()

	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма, Объект.Ссылка);

КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()

	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма, РеквизитФормыВЗначение("Объект"));

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("Справочник.Контрагенты.Форма.РедактированиеИсторииКПП") Тогда
		
		УстановитьКПППослеРедактированияИстории(ВыбранноеЗначение.ИсторияКПП);
		
		ЗапуститьПроверкуКонтрагента();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПоказатьПредупреждениеОбИзмененияхИсторияКПП()
	
	ОбщегоНазначенияБПКлиент.ПоказатьПредупреждениеОбИзменениях("ИсторияКПП");
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияКППНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура("ТекущийКПП, ИсторияКПП, ТолькоПросмотр", 
					Объект.КПП, Объект.ИсторияКПП, ТолькоПросмотр);
	
	ОткрытьФорму("Справочник.Контрагенты.Форма.РедактированиеИсторииКПП", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьРеквизитыИзЭлектроннойПочты(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВариантЗагрузкиЭД", ПредопределенноеЗначение("Перечисление.ВариантыЗагрузкиЭД.Карточка"));
	ДополнительныеПараметры.Вставить("СсылкаКонтрагента", Объект.Ссылка);
	ДополнительныеПараметры.Вставить("ГлубинаПоиска"    , 7);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьРеквизитыИзКарточкиXMLПоЭлектроннойПочтеЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.ПрямойОбменЭД.Форма.Форма", ДополнительныеПараметры, ЭтаФорма, , , ,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыИзФайла(Команда)
	
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("ЗагрузкаКарточкиКонтрагентаИзФайла");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжитьЗагрузкуКарточкиXMLИзФайла", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьЗагрузкуКарточкиXMLИзФайла(РасширениеПодключено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если РасширениеПодключено = Истина Тогда
		
		ДиалогОткрытияФайла                    = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогОткрытияФайла.Фильтр             = "(*.xml)|*.xml";
		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
		ДиалогОткрытияФайла.Заголовок          = Нстр("ru='Выберите карточку организации'");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПрочитатьЗагруженныеФайлы", ЭтотОбъект);
		НачатьПомещениеФайлов(ОписаниеОповещения, , ДиалогОткрытияФайла, Истина, УникальныйИдентификатор);
	Иначе
		ТекстСообщения = НСтр("ru = 'Загрузка из файла без установленного расширения невозможна.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура Подключаемый_ПоказатьИнформациюОЗаполненииРеквизитовИзКарточек()
	
	ОбщегоНазначенияБПКлиент.ПоказатьПредупреждениеОбИзменениях("ЗаполнениеРеквизитовКонтрагентаИзКарточек", , НастройкиПредупреждений);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьЗагруженныеФайлы(ЗагруженныеФайла, ДополнительныеПараметры) Экспорт
	
	Если ЗагруженныеФайла <> Неопределено Тогда
		ОписаниеФайлов = ЗагруженныеФайла.Получить(0);
		АдресФайлаXML  = ОписаниеФайлов.Хранение;
		ЗаполнитьСтруктуруРеквизитовИзФайлаКарточкиXMLНаСервере(АдресФайлаXML);
		
		Если ИспользованиеПроверкиВозможно Тогда
			ИнтервалПроверкиРезультата = 1;
			ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиКонтрагента", ИнтервалПроверкиРезультата, Истина);
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруРеквизитовИзФайлаКарточкиXMLНаСервере(АдресФайлаXML)
	
	АдресаФайловXML = Новый Массив;
	АдресаФайловXML.Добавить(АдресФайлаXML);
	
	СтруктураРеквизитов = Справочники.Контрагенты.РазобратьКарточкиКонтрагентовXML(АдресаФайловXML);
	Если ЗначениеЗаполнено(СтруктураРеквизитов) Тогда
		ВыполнитьЗаполнениеРеквизитовКонтрагента(СтруктураРеквизитов[0].ДанныеКарточки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыИзКарточкиXMLПоЭлектроннойПочтеЗавершение(СтруктураРеквизитов,
	ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(СтруктураРеквизитов) Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗаполнениеРеквизитовКонтрагента(СтруктураРеквизитов);
	
	Если ИспользованиеПроверкиВозможно Тогда
		ИнтервалПроверкиРезультата = 1;
		ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиКонтрагента", ИнтервалПроверкиРезультата, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗаполнениеРеквизитовКонтрагента(СтруктураРеквизитов)
	
	ЭтоЮрЛицо = СтруктураРеквизитов.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	
	Объект.СтранаРегистрации = Справочники.СтраныМира.Россия;
	ЗаполнитьЗначенияСвойств(Объект, СтруктураРеквизитов);
	
	Если ЗначениеЗаполнено(СтруктураРеквизитов.ЮридическийАдрес) И
			ЗначениеЗаполнено(СтруктураРеквизитов.ФактическийАдрес) Тогда
		АдресаСовпадают = ОбщегоНазначения.ДанныеСовпадают(СтруктураРеквизитов.ЮридическийАдрес.Представление,
			СтруктураРеквизитов.ФактическийАдрес.Представление);
	Иначе
		АдресаСовпадают = Ложь;
	КонецЕсли;
	
	Если ЭтоЮрЛицо Тогда
		Вид = "ЮридическоеЛицо";
		КПППриИзмененииНаСервере();
	Иначе
		Вид = "ФизическоеЛицо";
	КонецЕсли;
	
	ЗаполнитьЭлементКонтактнойИнформации("ЮрАдресКонтрагента", СтруктураРеквизитов.ЮридическийАдрес);
	
	Если АдресаСовпадают Тогда
		ЗаполнитьЭлементКонтактнойИнформации("ФактАдресКонтрагента", СтруктураРеквизитов.ЮридическийАдрес);
		ЮрФактАдресаСовпадают = Истина;
	Иначе
		ЗаполнитьЭлементКонтактнойИнформации("ФактАдресКонтрагента", СтруктураРеквизитов.ФактическийАдрес);
		ЮрФактАдресаСовпадают = Ложь;
	КонецЕсли;
	
	ЗаполнитьЭлементКонтактнойИнформации("ПочтовыйАдресКонтрагента", СтруктураРеквизитов.ЮридическийАдрес);
	ЮрПочтовыйАдресаСовпадают = Истина;
	
	ЗаполнитьЭлементКонтактнойИнформации("ТелефонКонтрагента", Новый Структура("КонтактнаяИнформация, Представление",
		"", СтруктураРеквизитов.Телефон));
	ЗаполнитьЭлементКонтактнойИнформации("EmailКонтрагента", Новый Структура("КонтактнаяИнформация, Представление",
		"", СтруктураРеквизитов.АдресЭлектроннойПочты));
		
	Если ЗначениеЗаполнено(СтруктураРеквизитов.НомерСчета) Тогда
		ДанныеРасчетногоСчета = СтруктураРеквизитов;
		ДанныеРасчетногоСчета.Вставить("ЭтоЭлектронныйДокумент", Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураРеквизитов.Руководитель) Тогда
		
		ФИОРуководителя = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтруктураРеквизитов.Руководитель, " ");
		ДанныеКонтактногоЛица = Новый Структура("Фамилия, Имя, Отчество, Должность",
			?(ФИОРуководителя.Количество() >= 1, ФИОРуководителя[0], Неопределено),
			?(ФИОРуководителя.Количество() >= 2, ФИОРуководителя[1], Неопределено),
			?(ФИОРуководителя.Количество() >= 3, ФИОРуководителя[2], Неопределено),
			СтруктураРеквизитов.ДолжностьРуководителя);
		
	КонецЕсли;
	
	ИННПриИзмененииНаСервере();
	Если ИспользованиеПроверкиВозможно Тогда
		ПроверитьКонтрагента(ЭтаФорма);
	КонецЕсли;
	
	ОтобразитьЗаполнениеПоДаннымЕГР = Ложь;
	
	УстановитьВидимостьЭлементов();
	УправлениеФормой(ЭтотОбъект);
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ИсторияКПП

&НаСервере
Процедура УстановитьКПППослеРедактированияИстории(НаборЗаписей)
	
	Модифицированность = Истина;
	
	НаборЗаписей.Сортировать("Период");
	
	Объект.ИсторияКПП.Очистить();
	Если НаборЗаписей.Количество() > 1 Тогда
		Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
			ЗаписьИстории = Объект.ИсторияКПП.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьИстории, ЗаписьНабора);
		КонецЦикла;
	КонецЕсли;
	
	Объект.КПП = НаборЗаписей[НаборЗаписей.Количество()-1].КПП;
	КПППриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДоступноКПП(Форма)
	
	КонтрагентЗарегистрированВРФ = Форма.Объект.СтранаРегистрации = ПредопределенноеЗначение("Справочник.СтраныМира.Россия");
	КонтрагентФизическоеЛицо = Форма.Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо");
	
	Возврат НЕ КонтрагентФизическоеЛицо И КонтрагентЗарегистрированВРФ;
	
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьИННОбособленногоПодразделения(Объект)
	
	Если Объект.ОбособленноеПодразделение 
		И ЗначениеЗаполнено(Объект.ГоловнойКонтрагент) Тогда
		
		ИННГоловногоКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ГоловнойКонтрагент, "ИНН");
		Если Объект.ИНН <> ИННГоловногоКонтрагента Тогда
			Объект.ИНН = ИННГоловногоКонтрагента;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#КонецОбласти

ЗаполнятьРеквизитыПоИНН = Истина;