#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
Функция ПолучитьМассивОбособленныхПодразделений(ГоловнойКонтрагент) Экспорт
	
	Возврат ПолучитьМассивПодчиненныхКонтрагентов(ГоловнойКонтрагент, Истина);
	
КонецФункции

Функция ПолучитьМассивПодчиненныхКонтрагентов(ГоловнойКонтрагент, ТолькоОбособленныеПодразделения = Ложь) Экспорт
	
	МассивКонтрагентов	= Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(ГоловнойКонтрагент) Тогда
		Возврат МассивКонтрагентов;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГоловнойКонтрагент",	ГоловнойКонтрагент);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка,
	|	Контрагенты.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка <> &ГоловнойКонтрагент
	|	И Контрагенты.ГоловнойКонтрагент = &ГоловнойКонтрагент
	|	И НЕ Контрагенты.ПометкаУдаления
	|	И НЕ Контрагенты.ЭтоГруппа";
	
	Если ТолькоОбособленныеПодразделения Тогда
		Запрос.Текст	= Запрос.Текст + "
		|	И Контрагенты.ОбособленноеПодразделение";
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	МассивКонтрагентов	= Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат МассивКонтрагентов;
	
КонецФункции

Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	МассивРеквизитов = Новый Массив();
	МассивРеквизитов.Добавить("УдалитьЮрФизЛицо");
	Возврат МассивРеквизитов;
	
КонецФункции

Функция ТекстЗапросаПроверкиДублейКонтрагентов()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	НЕ Контрагенты.ЭтоГруппа
	|	И НЕ Контрагенты.Ссылка = &Ссылка
	|	И Контрагенты.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|	И Контрагенты.КПП = &КПП
	|	И Контрагенты.ИНН = &ИНН";
	
	Возврат ТекстЗапроса;
	
КонецФункции

//Процедура возвращает массив дублей по записям в регистре Наличие дублей контрагентов
//На вход получает ИНН, КПП и ссылку на контрагента
Функция ЕстьЗаписиВРегистреДублей(ИНН, КПП, Ссылка) Экспорт
	
	Дубли = Новый Массив;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ИНН", СокрЛП(ИНН));
	Запрос.УстановитьПараметр("КПП", СокрЛП(КПП));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НаличиеДублейУКонтрагентов.Контрагент КАК Ссылка
	|ИЗ
	|	РегистрСведений.НаличиеДублейУКонтрагентов КАК НаличиеДублейУКонтрагентов
	|ГДЕ
	|	НЕ НаличиеДублейУКонтрагентов.Контрагент = &Ссылка
	|	И НаличиеДублейУКонтрагентов.КПП = &КПП
	|	И НаличиеДублейУКонтрагентов.ИНН = &ИНН";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДублей = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДублей.Следующий() Цикл
		Дубли.Добавить(ВыборкаДублей.Ссылка);
	КонецЦикла;
	
	Возврат Дубли;
	
КонецФункции	

//Функция определяет наличие дублей у контрагента.
// ИНН - ИНН проверяемого контрагента, Тип - Строка(12)
// КПП - КПП проверяемого контрагента, Тип - Строка(9)
// Ссылка - Сам проверяемый контрагент, Тип - СправочникСсылка.Контрагенты
Функция ПроверитьДублиСправочникаКонтрагентыПоИННКПП(Знач ИНН, Знач КПП, Знач Ссылка, ПроверкаПриЗаписи = Ложь) Экспорт
	
	Дубли = Новый Массив;
	
	Запрос = Новый Запрос;
	
	//Если записываем элемент, то сначала проверим наличие дублей
	//в регистре. Операция выполняется только при событии объекта ПередЗаписью
	//В интерактивной проверке дублей не применяется, 
	//т.к. на регистр устанавливаются исключительные блокировки.
	Если ПроверкаПриЗаписи Тогда
		Дубли = ЕстьЗаписиВРегистреДублей(ИНН, КПП, Ссылка);
	КонецЕсли;
	
	//Если при записи элемента ничего не нашлось в регистре дублей, 
	//или при интерактивной проверке выполним поиск дублей по справочнику Контрагенты
	Если Дубли.Количество() = 0 Тогда
	
		Запрос.Текст = ТекстЗапросаПроверкиДублейКонтрагентов();
		
		Запрос.УстановитьПараметр("ИНН", СокрЛП(ИНН));
		Запрос.УстановитьПараметр("КПП", СокрЛП(КПП));
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДублей = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДублей.Следующий() Цикл
			Дубли.Добавить(ВыборкаДублей.Ссылка);
		КонецЦикла;
			
	КонецЕсли;	
	
	Возврат Дубли;
	
КонецФункции	

//Процедура делает движения в регистре дублей
// Ссылка - ссылка на эелемнт справочника Контрагенты
// ИНН - ИНН записываемого контрагента
// КПП - КПП записываемого контрагента
// НужноУдалить:
//				Истина - удалить запись по переданному контрагенту
//				Ложь   - сделать запись по переданному контрагенту
Процедура ВыполнитьДвиженияПоРегиструДублей(Ссылка, ИНН = "", КПП = "", НужноУдалить) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.НаличиеДублейУКонтрагентов.СоздатьМенеджерЗаписи();
	
	МенеджерЗаписи.Контрагент = Ссылка;
	МенеджерЗаписи.ИНН        = ИНН;
	МенеджерЗаписи.КПП        = КПП;
	
	МенеджерЗаписи.Прочитать();
	
	ЗаписьСуществует = МенеджерЗаписи.Выбран();
	
	Если НужноУдалить и ЗаписьСуществует Тогда
		МенеджерЗаписи.Удалить();
	ИначеЕсли Не НужноУдалить и НЕ ЗаписьСуществует Тогда
		
		МенеджерЗаписи.Контрагент = Ссылка;
		МенеджерЗаписи.ИНН        = ИНН;
		МенеджерЗаписи.КПП        = КПП;
		
		МенеджерЗаписи.Активность = Истина;
		
		МенеджерЗаписи.Записать(Истина);
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ОтменитьРегистрациюДублей() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НаличиеДублейУКонтрагентов.ИНН КАК ИНН,
	|	НаличиеДублейУКонтрагентов.КПП КАК КПП,
	|	КОЛИЧЕСТВО(НаличиеДублейУКонтрагентов.Контрагент) КАК КоличествоДублей
	|ПОМЕСТИТЬ ТаблицаПодсчетаКоличествоДублей
	|ИЗ
	|	РегистрСведений.НаличиеДублейУКонтрагентов КАК НаличиеДублейУКонтрагентов
	|
	|СГРУППИРОВАТЬ ПО
	|	НаличиеДублейУКонтрагентов.ИНН,
	|	НаличиеДублейУКонтрагентов.КПП
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИНН,
	|	КПП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НаличиеДублейУКонтрагентов.Контрагент,
	|	НаличиеДублейУКонтрагентов.ИНН,
	|	НаличиеДублейУКонтрагентов.КПП,
	|	ТаблицаПодсчетаКоличествоДублей.КоличествоДублей
	|ИЗ
	|	РегистрСведений.НаличиеДублейУКонтрагентов КАК НаличиеДублейУКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПодсчетаКоличествоДублей КАК ТаблицаПодсчетаКоличествоДублей
	|		ПО НаличиеДублейУКонтрагентов.ИНН = ТаблицаПодсчетаКоличествоДублей.ИНН
	|			И НаличиеДублейУКонтрагентов.КПП = ТаблицаПодсчетаКоличествоДублей.КПП
	|ГДЕ
	|	ТаблицаПодсчетаКоличествоДублей.КоличествоДублей = 1";
	
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
		
		ВыполнитьДвиженияПоРегиструДублей(ВыборкаРезультатаЗапроса.Контрагент, 
			ВыборкаРезультатаЗапроса.ИНН, 
			ВыборкаРезультатаЗапроса.КПП, 
			Истина);
			
	КонецЦикла;
		
КонецПроцедуры

Функция ВидГосударственногоОрганаПоКБК(КБК) Экспорт
	
	Если Лев(КБК, 3) = "182" Тогда
		Возврат Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган;
	ИначеЕсли Лев(КБК, 3) = "392" Тогда
		Возврат Перечисления.ВидыГосударственныхОрганов.ОрганПФР;
	ИначеЕсли Лев(КБК, 3) = "393" Тогда
		Возврат Перечисления.ВидыГосударственныхОрганов.ОрганФСС;
	Иначе
		Возврат Перечисления.ВидыГосударственныхОрганов.Прочий;
	КонецЕсли;
	
КонецФункции

// Функция формирует краткое ноаименование контрагента из полного
//
// Параметры:
//  Наименование - Строка - полное наименование контрагента
//
// Возвращаемое значение:
//  Строка - краткое наименование контрагента
//
// Пример:
//  ПолучитьКраткоеНаименованиеКонтрагента("Общество с ограниченной ответственностью Ромашка") вернет "Ромашка ООО"
//  ПолучитьКраткоеНаименованиеКонтрагента("ЗАО Рассвет") вернет "Рассвет ЗАО"
//  ПолучитьКраткоеНаименованиеКонтрагента("Иванов И. И. Индивидуальный предприниматель") вернет "Иванов И.И. ИП"
//
Функция ПолучитьКраткоеНаименованиеКонтрагента(Наименование) Экспорт
	
	КраткоеНаименование = СтрЗаменить(Наименование, """", "");
	
	// Заполнять в порядке СокращенноеНаименованиеОПФ, ПолноеНаименованиеОПФ
	ОПФ = Новый Массив;
	ОПФ.Добавить("ОАО");
	ОПФ.Добавить("Открытое акционерное общество");
	ОПФ.Добавить("ЗАО");
	ОПФ.Добавить("Закрытое акционерное общество");
	ОПФ.Добавить("ПАО");
	ОПФ.Добавить("Публичное акционерное общество");
	ОПФ.Добавить("ООО");
	ОПФ.Добавить("Общество с ограниченной ответственностью");
	ОПФ.Добавить("ИП");
	ОПФ.Добавить("Индивидуальный предприниматель");
	
	КраткоеНаименованиеДляПоиска = СокрЛП(ВРег(КраткоеНаименование));
	Для Индекс = 0 По ОПФ.ВГраница() Цикл
		ПозицияОПФВНаименовании = Найти(КраткоеНаименованиеДляПоиска, Врег(ОПФ[Индекс]));
		Если ПозицияОПФВНаименовании > 0 Тогда
			ДлинаОПФ = СтрДлина(ОПФ[Индекс]);
			// ОПФ В левой части наименования
			Если ПозицияОПФВНаименовании = 1 Тогда
				КраткоеНаименование = Сред(КраткоеНаименование, ДлинаОПФ + 2);
				Если ДлинаОПФ > 3 Тогда
					// заменяем ОПФ на сокращенное
					КраткоеНаименование = КраткоеНаименование + " " + ОПФ[Индекс - 1];
				Иначе
					КраткоеНаименование = КраткоеНаименование + " " + ОПФ[Индекс];
				КонецЕсли;
			Иначе
				// ОПФ в правой части наименования
				Если ДлинаОПФ > 3 Тогда
					КраткоеНаименование = Сред(КраткоеНаименование, 1, СтрДлина(КраткоеНаименование) - ДлинаОПФ);
					КраткоеНаименование = КраткоеНаименование + " " + ОПФ[Индекс - 1];
				КонецЕсли;
			КонецЕсли;
			Возврат КраткоеНаименование;
		КонецЕсли;
	КонецЦикла;
	
	Возврат КраткоеНаименование;
	
КонецФункции

Функция ПолучитьСтруктуруРеквизитовКонтрагента()
	
	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("Наименование");
	СтруктураВозврата.Вставить("НаименованиеПолное");
	СтруктураВозврата.Вставить("ИНН");
	СтруктураВозврата.Вставить("КПП");
	СтруктураВозврата.Вставить("КодПоОКПО");
	СтруктураВозврата.Вставить("Банк");
	СтруктураВозврата.Вставить("БИК");
	СтруктураВозврата.Вставить("НомерСчета");
	СтруктураВозврата.Вставить("КоррСчет");
	СтруктураВозврата.Вставить("БанкДляРасчетов");
	СтруктураВозврата.Вставить("БанкДляРасчетовБИК");
	СтруктураВозврата.Вставить("БанкДляРасчетовКоррСчет");
	СтруктураВозврата.Вставить("ДолжностьРуководителя");
	СтруктураВозврата.Вставить("Руководитель");
	СтруктураВозврата.Вставить("ЮридическоеФизическоеЛицо");
	СтруктураВозврата.Вставить("СвидетельствоДатаВыдачи");
	СтруктураВозврата.Вставить("СвидетельствоСерияНомер");
	СтруктураВозврата.Вставить("ЮридическийАдрес");
	СтруктураВозврата.Вставить("ФактическийАдрес");
	СтруктураВозврата.Вставить("АдресРегистрации");
	СтруктураВозврата.Вставить("РеквизитыАдресРегистрации");
	СтруктураВозврата.Вставить("Телефон");
	СтруктураВозврата.Вставить("АдресЭлектроннойПочты");
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Читает данные электронных документов вида реквизиты организации стандарта CML 4.02
//
// Параметры:
//   АдресаXMLФайлов - Массив - массив строк с адресами данных реквизитов организации во временном хранилище
//
// Возвращаемое значение:
//  ДанныеКарточек - ТаблицаЗначений - таблица значений с колонками:
//    * ИНН - Строка - ИНН контрагента
//    * ДанныеКарточки - Структура - содержит структуру заполненную данными электронного счета,
//        см. ПолучитьСтруктуруРеквизитовКонтрагента()
//
Функция РазобратьКарточкиКонтрагентовXML(АдресаXMLФайлов) Экспорт
	
	ДанныеКарточек = Новый ТаблицаЗначений;
	ДанныеКарточек.Колонки.Добавить("ИНН");
	ДанныеКарточек.Колонки.Добавить("ДанныеКарточки");
	
	ДанныеКарточек.Индексы.Добавить("ИНН");
	
	Для Каждого АдресXMLФайла Из АдресаXMLФайлов Цикл
		
		ДанныеКарточки = ПрочитатьДанныеXMLКарточки(АдресXMLФайла);
		Если ЗначениеЗаполнено(ДанныеКарточки) Тогда
			
			Если ЗначениеЗаполнено(ДанныеКарточек.Найти(ДанныеКарточки.ИНН, "ИНН")) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаДанныхКарточки                = ДанныеКарточек.Добавить();
			СтрокаДанныхКарточки.ИНН            = ДанныеКарточки.ИНН;
			СтрокаДанныхКарточки.ДанныеКарточки = ДанныеКарточки;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеКарточек;
	
КонецФункции

Функция ПрочитатьДанныеXMLКарточки(АдресXMLФайла)
	
	СтруктураРеквизитов = ПолучитьСтруктуруРеквизитовКонтрагента();
	ОбъектXML           = Новый ЧтениеXML;
	ДвоичныеДанные      = ПолучитьИзВременногоХранилища(АдресXMLФайла);
	ВремФайл            = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("xml");
	ДвоичныеДанные.Записать(ВремФайл);
	
	Попытка
		ОбъектXML.ОткрытьФайл(ВремФайл);
		Карточка = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
	Исключение
		ОбъектXML.Закрыть();
		ШаблонСообщения = НСтр("ru = 'Возникла ошибка при чтении данных из файла %1: %2 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			ВремФайл, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Чтение ЭД.'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
	
	Если НЕ Карточка.Тип() = ЭлектронныеДокументыВнутренний.ПолучитьТипЗначенияCML("Контрагент") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КраткоеНаименование = ПолучитьКраткоеНаименованиеКонтрагента(Карточка.Наименование);
	СтруктураРеквизитов.Наименование = КраткоеНаименование;
	
	СвойствоРасчетныеСчета = Карточка.Свойства().Получить("РасчетныеСчета");
	Если СвойствоРасчетныеСчета <> Неопределено Тогда
		Данные = Карточка.Получить(СвойствоРасчетныеСчета);
		Если Данные <> Неопределено Тогда
			Для Каждого ЗначениеДанных Из Данные.РасчетныйСчет Цикл
				СтруктураРеквизитов.НомерСчета = ЗначениеДанных.НомерСчета;
				СтруктураРеквизитов.БИК        = ЗначениеДанных.Банк.БИК;
				СтруктураРеквизитов.КоррСчет   = ЗначениеДанных.Банк.СчетКорреспондентский;
				СтруктураРеквизитов.Банк       = ЗначениеДанных.Банк.Наименование;
				
				Если ЗначениеДанных.БанкКорреспондент <> Неопределено Тогда
					СтруктураРеквизитов.БанкДляРасчетовБИК      = ЗначениеДанных.БанкКорреспондент.БИК;
					СтруктураРеквизитов.БанкДляРасчетовКоррСчет = ЗначениеДанных.БанкКорреспондент.СчетКорреспондентский;
					СтруктураРеквизитов.БанкДляРасчетов         = ЗначениеДанных.БанкКорреспондент.Наименование;
				КонецЕсли;
			КонецЦикла
		КонецЕсли;
	КонецЕсли;
	
	СвойствоЮрЛицо = Карточка.Свойства().Получить("ЮрЛицо");
	Если СвойствоЮрЛицо <> Неопределено Тогда
		ЗначениеДанных = Карточка.Получить(СвойствоЮрЛицо);
		Если ЗначениеДанных <> Неопределено Тогда
			СвойствоИНН = ЗначениеДанных.Свойства().Получить("ИНН");
			Если СвойствоИНН <> Неопределено Тогда
				СтруктураРеквизитов.ИНН = ЗначениеДанных.Получить(СвойствоИНН);
			КонецЕсли;
			СвойствоКПП = ЗначениеДанных.Свойства().Получить("КПП");
			Если СвойствоКПП <> Неопределено Тогда
				СтруктураРеквизитов.КПП = ЗначениеДанных.Получить(СвойствоКПП);
			КонецЕсли;
			СвойствоОКПО = ЗначениеДанных.Свойства().Получить("ОКПО");
			Если СвойствоОКПО <> Неопределено Тогда
				СтруктураРеквизитов.КодПоОКПО = ЗначениеДанных.Получить(СвойствоОКПО);
			КонецЕсли;
			СвойствоНаименованиеПолное = ЗначениеДанных.Свойства().Получить("ОфициальноеНаименование");
			Если СвойствоНаименованиеПолное <> Неопределено Тогда
				СтруктураРеквизитов.НаименованиеПолное = ЗначениеДанных.Получить(СвойствоНаименованиеПолное);
			КонецЕсли;
			
			СвойствоРуководитель = ЗначениеДанных.Свойства().Получить("Руководитель");
			Если СвойствоРуководитель <> Неопределено Тогда
				ДанныеРуководителя = ЗначениеДанных.Получить(СвойствоРуководитель);
				Если ДанныеРуководителя <> Неопределено Тогда
					СвойствоФизЛицо = ДанныеРуководителя.Свойства().Получить("ФизЛицо");
					Если СвойствоФизЛицо <> Неопределено Тогда
						ЗначениеДанныхРуководителя = ДанныеРуководителя.Получить(СвойствоФизЛицо);
						Если ЗначениеДанных <> Неопределено Тогда
							СтруктураРеквизитов.ДолжностьРуководителя = ЗначениеДанныхРуководителя.Должность;
							СтруктураРеквизитов.Руководитель          = ЗначениеДанныхРуководителя.ПолноеНаименование;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			СвойствоЮрАдрес = ЗначениеДанных.Свойства().Получить("ЮридическийАдрес");
			Если СвойствоЮрАдрес <> Неопределено Тогда
				ДанныеЮрАдрес = ЗначениеДанных.Получить(СвойствоЮрАдрес);
				Если ДанныеЮрАдрес <> Неопределено Тогда
					СтруктураКИ                          = УправлениеКонтактнойИнформациейБП.НоваяКонтактнаяИнформация();
					СтруктураКИ.Представление            = ДанныеЮрАдрес.Представление;
					СтруктураКИ.КонтактнаяИнформация     = УправлениеКонтактнойИнформациейБП.ПолучитьXMLПредставлениеАдреса(
						ДанныеЮрАдрес.АдресноеПоле,
						Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента,
						ДанныеЮрАдрес.Представление);
					СтруктураРеквизитов.ЮридическийАдрес = СтруктураКИ;
				КонецЕсли
			КонецЕсли;
			
			СтруктураРеквизитов.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
			
		КонецЕсли
	КонецЕсли;
	
	СвойствоФизЛицо = Карточка.Свойства().Получить("ФизЛицо");
	Если СвойствоФизЛицо <> Неопределено Тогда
		ЗначениеДанных = Карточка.Получить(СвойствоФизЛицо);
		Если ЗначениеДанных <> Неопределено Тогда
			СвойствоИНН = ЗначениеДанных.Свойства().Получить("ИНН");
			Если СвойствоИНН <> Неопределено Тогда
				СтруктураРеквизитов.ИНН = ЗначениеДанных.Получить(СвойствоИНН);
			КонецЕсли;
			СвойствоОКПО = ЗначениеДанных.Свойства().Получить("ОКПО");
			Если СвойствоОКПО <> Неопределено Тогда
				СтруктураРеквизитов.КодПоОКПО = ЗначениеДанных.Получить(СвойствоОКПО);
			КонецЕсли;
			СвойствоНаименованиеПолное = ЗначениеДанных.Свойства().Получить("ПолноеНаименование");
			Если СвойствоНаименованиеПолное <> Неопределено Тогда
				СтруктураРеквизитов.НаименованиеПолное = ЗначениеДанных.Получить(СвойствоНаименованиеПолное);
			КонецЕсли;
			
			СвойствоСвидетельство = ЗначениеДанных.Свойства().Получить("Свидетельство");
			Если СвойствоСвидетельство <> Неопределено Тогда
				ДанныеСвидетельства = ЗначениеДанных.Получить(СвойствоСвидетельство);
				Если ДанныеСвидетельства <> Неопределено Тогда
					СтруктураРеквизитов.СвидетельствоДатаВыдачи = ДанныеСвидетельства.ДатаВыдачи;
					СтруктураРеквизитов.СвидетельствоСерияНомер = ДанныеСвидетельства.Номер;
				КонецЕсли;
			КонецЕсли;
			
			СвойствоАдресРегистрации = ЗначениеДанных.Свойства().Получить("АдресРегистрации");
			Если СвойствоАдресРегистрации <> Неопределено Тогда
				ДанныеАдресРегистрации = ЗначениеДанных.Получить(СвойствоАдресРегистрации);
				Если ДанныеАдресРегистрации <> Неопределено Тогда
					СтруктураКИ                          = УправлениеКонтактнойИнформациейБП.НоваяКонтактнаяИнформация();
					СтруктураКИ.Представление            = ДанныеАдресРегистрации.Представление;
					СтруктураКИ.КонтактнаяИнформация     = УправлениеКонтактнойИнформациейБП.ПолучитьXMLПредставлениеАдреса(
						ДанныеАдресРегистрации.АдресноеПоле,
						Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица,
						ДанныеАдресРегистрации.Представление);
					СтруктураРеквизитов.ЮридическийАдрес = СтруктураКИ;
				КонецЕсли
			КонецЕсли;
			
			СтруктураРеквизитов.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
			
		КонецЕсли
	КонецЕсли;
	
	СвойствоКонтакты = Карточка.Свойства().Получить("Контакты");
	Если СвойствоКонтакты <> Неопределено Тогда
		ЗначениеДанных =  Карточка.Получить(СвойствоКонтакты);
		Если ЗначениеДанных <> Неопределено Тогда
			Для Каждого Контакт Из Карточка.Контакты.Контакт Цикл
				Если Контакт.Тип = "Телефон рабочий" Тогда
					СтруктураРеквизитов.Телефон = Контакт.Значение;
				КонецЕсли;
				Если Контакт.Тип = "Почта" Тогда
					СтруктураРеквизитов.АдресЭлектроннойПочты = Контакт.Значение;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	СвойствоАдрес = Карточка.Свойства().Получить("Адрес");
	Если СвойствоАдрес <> Неопределено Тогда
		ЗначениеДанных = Карточка.Получить(СвойствоАдрес);
		Если ЗначениеДанных <> Неопределено Тогда
			СтруктураКИ                          = УправлениеКонтактнойИнформациейБП.НоваяКонтактнаяИнформация();
			СтруктураКИ.Представление            = ЗначениеДанных.Представление;
			СтруктураКИ.КонтактнаяИнформация     = УправлениеКонтактнойИнформациейБП.ПолучитьXMLПредставлениеАдреса(
				ЗначениеДанных.АдресноеПоле,
				Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента,
				ЗначениеДанных.Представление);
			СтруктураРеквизитов.ФактическийАдрес = СтруктураКИ;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

#Область СведенияОКонтрагенте

Функция СведенияОКонтрагенте(Контрагент, ДатаСведений) Экспорт
	
	СписокСведений = "Наименование, ЮридическоеФизическоеЛицо, ИНН, КПП";
	СведенияОКонтрагенте = Новый Структура(СписокСведений);
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент, 
				"Наименование, НаименованиеПолное, ЮридическоеФизическоеЛицо, ИНН, КПП, СтранаРегистрации");
		
		СведенияОКонтрагенте.ЮридическоеФизическоеЛицо = Реквизиты.ЮридическоеФизическоеЛицо;
		СведенияОКонтрагенте.Наименование = ?(ЗначениеЗаполнено(Реквизиты.НаименованиеПолное), Реквизиты.НаименованиеПолное, Реквизиты.Наименование);
		СведенияОКонтрагенте.ИНН          = Реквизиты.ИНН;
		
		Если Реквизиты.СтранаРегистрации = Справочники.СтраныМира.Россия Тогда
			
			СведенияОКонтрагенте.КПП = КППНаДату(Контрагент, ДатаСведений);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СведенияОКонтрагенте;
	
КонецФункции

Функция КППНаДату(Контрагент, ДатаСведений) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Контрагент)
		ИЛИ ТипЗнч(Контрагент) <> Тип("СправочникСсылка.Контрагенты") Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаСведений) Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "КПП");
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Контрагент", Контрагент);
	Запрос.Параметры.Вставить("ДатаСведений", ДатаСведений);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(ИсторияКППКонтрагентов.Период) КАК Период,
	|	ИсторияКППКонтрагентов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ЗначенияКПП
	|ИЗ
	|	Справочник.Контрагенты.ИсторияКПП КАК ИсторияКППКонтрагентов
	|ГДЕ
	|	ИсторияКППКонтрагентов.Ссылка = &Контрагент
	|	И ИсторияКППКонтрагентов.Период <= &ДатаСведений
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсторияКППКонтрагентов.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсторияКППКонтрагентов.КПП КАК КПП
	|ИЗ
	|	ЗначенияКПП КАК ЗначенияКПП
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты.ИсторияКПП КАК ИсторияКППКонтрагентов
	|		ПО ЗначенияКПП.Ссылка = ИсторияКППКонтрагентов.Ссылка
	|			И ЗначенияКПП.Период = ИсторияКППКонтрагентов.Период";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КПП;
	Иначе
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "КПП");
	КонецЕсли;
	
КонецФункции

Процедура УстановитьАктуальноеЗначениеИсторииКПП(КПП, ИсторияКПП) Экспорт
	
	КоличествоЗаписей = ИсторияКПП.Количество();
	
	Если КоличествоЗаписей > 0 Тогда
		
		ИсторияКПП.Сортировать("Период");
		АктуальнаяЗаписьИстории = ИсторияКПП[КоличествоЗаписей - 1];
		АктуальнаяЗаписьИстории.КПП = КПП;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
КонецПроцедуры

#Область ОбработчикиОбновления

//Процедура обновления справочника контрагенты
Процедура ОбновлениеСправочникаКонтрагентыПриВключенииКонтроляКорректностиИННиКПП() Экспорт
	
	ТаблицаДублейКонтрагентов = Новый ТаблицаЗначений;
	
	ТаблицаДублейКонтрагентов.Колонки.Добавить("Ссылка");
	ТаблицаДублейКонтрагентов.Колонки.Добавить("ИНН");
	ТаблицаДублейКонтрагентов.Колонки.Добавить("КПП");
	ТаблицаДублейКонтрагентов.Колонки.Добавить("ЭтоЮрЛицо");
	ТаблицаДублейКонтрагентов.Колонки.Добавить("Ключ");
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка,
	|	Контрагенты.ИНН,
	|	Контрагенты.КПП,
	|	Контрагенты.ЮридическоеФизическоеЛицо,
	|	Контрагенты.ИННВведенКорректно,
	|	Контрагенты.КППВведенКорректно,
	|	Контрагенты.РасширенноеПредставлениеИНН,
	|	Контрагенты.РасширенноеПредставлениеКПП,
	|	Контрагенты.ОбособленноеПодразделение,
	|	Контрагенты.СтранаРегистрации
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	НЕ Контрагенты.ЭтоГруппа";
	
	ВыборкаРезультата = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаРезультата.Следующий() Цикл
		
		Ссылка = ВыборкаРезультата.Ссылка;
		
		ПараметрыПередачи = Новый Структура;
		
		ПараметрыПередачи.Вставить("СтранаРегистрации",         ВыборкаРезультата.СтранаРегистрации);
		ПараметрыПередачи.Вставить("ИНН",                       ВыборкаРезультата.ИНН);
		ПараметрыПередачи.Вставить("КПП",                       ВыборкаРезультата.КПП);
		ПараметрыПередачи.Вставить("ЮридическоеФизическоеЛицо", ВыборкаРезультата.ЮридическоеФизическоеЛицо);
		ПараметрыПередачи.Вставить("ОбособленноеПодразделение", ВыборкаРезультата.ОбособленноеПодразделение);
		ПараметрыПередачи.Вставить("ПроверитьИНН",              Истина);
		ПараметрыПередачи.Вставить("ПроверитьКПП",              Истина);
		ПараметрыПередачи.Вставить("ЦветВыделенияНекорректногоЗначение", 	ЦветаСтиля.ЦветВыделенияКонтрагентаСОшибкой);
		
		ВозвращенныеЗначение = ОбщегоНазначенияБПКлиентСервер.ПроверитьКорректностьИННКПП(ПараметрыПередачи);
		
		СправочникОбъект = ВыборкаРезультата.Ссылка.ПолучитьОбъект();
		
		ЗаполнитьЗначенияСвойств(СправочникОбъект, ВозвращенныеЗначение);
		
		ЭтоЮрЛицо = ВыборкаРезультата.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		
		Если (ВозвращенныеЗначение.ИННВВеденКорректно и ВозвращенныеЗначение.КППВведенКорректно)
			или (ВозвращенныеЗначение.ИННВВеденКорректно и НЕ ЭтоЮрЛицо) Тогда
			
			НоваяСтрока = ТаблицаДублейКонтрагентов.Добавить();
			
			НоваяСтрока.Ссылка = Ссылка;
			
			Если НЕ ЭтоЮрЛицо Тогда
				НоваяСтрока.Ключ = СокрЛП(ВыборкаРезультата.ИНН);
			Иначе
				НоваяСтрока.Ключ = СокрЛП(ВыборкаРезультата.ИНН) + СокрЛП(ВыборкаРезультата.КПП);
			КонецЕсли;
			
			НоваяСтрока.ИНН = ВыборкаРезультата.ИНН;
			НоваяСтрока.КПП = ВыборкаРезультата.КПП;
			
			НоваяСтрока.ЭтоЮрЛицо = ЭтоЮрЛицо;
			
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект);
		
	КонецЦикла;
	
	ТаблицаДублейКонтрагентов.Индексы.Добавить("Ключ");
	
	ОтборДляПоиска = Новый Структура("Ключ");
	
	Пока ТаблицаДублейКонтрагентов.Количество() > 0 Цикл
		
		ОтборДляПоиска.Ключ = ТаблицаДублейКонтрагентов[0].Ключ;
		
		МассивНайденныхСтрок = ТаблицаДублейКонтрагентов.НайтиСтроки(ОтборДляПоиска);
		
		НужноПисатьВРегистрДублей = МассивНайденныхстрок.Количество() > 1;
		
		Для Каждого ЭлементМассива Из МассивНайденныхстрок Цикл 
				
			Если НужноПисатьВРегистрДублей Тогда
				
				ИНН = ЭлементМассива.ИНН;
				КПП = ЭлементМассива.КПП;
				
				СправочникОбъект = ЭлементМассива.Ссылка.ПолучитьОбъект();
				
				СправочникОбъект.РасширенноеПредставлениеИНН = ИНН;
				
				СправочникОбъект.РасширенноеПредставлениеКПП = КПП;
				
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект);
				
				ВыполнитьДвиженияПоРегиструДублей(ЭлементМассива.Ссылка, ЭлементМассива.ИНН, ЭлементМассива.КПП, Ложь);
				
			КонецЕсли;
			
			ТаблицаДублейКонтрагентов.Удалить(ЭлементМассива);
			
		КонецЦикла;	
		
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ЗаполнитьПризнакПринадлежностьКонтрагентаГосударственнымОрганам(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	Контрагенты.Ссылка КАК Контрагент,
	|	ПлатежноеПоручение.КодБК КАК КодБК,
	|	ЕСТЬNULL(РегистрацииВНалоговомОргане.Код, """") КАК КодНалоговогоОргана,
	|	Организации.КодПодчиненностиФСС,
	|	Организации.КодОрганаПФР,
	|	МАКСИМУМ(ПлатежноеПоручение.Дата) КАК Дата
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО ПлатежноеПоручение.Контрагент = Контрагенты.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО ПлатежноеПоручение.Организация = Организации.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	|		ПО ПлатежноеПоручение.КодОКАТО = РегистрацииВНалоговомОргане.КодПоОКТМО
	|			И (Организации.ГоловнаяОрганизация = РегистрацииВНалоговомОргане.Владелец)
	|ГДЕ
	|	ПлатежноеПоручение.ПеречислениеВБюджет = ИСТИНА
	|	И Контрагенты.ГосударственныйОрган = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	Контрагенты.Ссылка,
	|	ПлатежноеПоручение.КодБК,
	|	ЕСТЬNULL(РегистрацииВНалоговомОргане.Код, """"),
	|	Организации.КодПодчиненностиФСС,
	|	Организации.КодОрганаПФР
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ
	|ИТОГИ ПО
	|	Контрагент";
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			Контрагент = Выборка.Контрагент.ПолучитьОбъект();
			Контрагент.ГосударственныйОрган = Истина;
			ВыборкаКонтрагента = Выборка.Выбрать();
			Пока ВыборкаКонтрагента.Следующий() Цикл
				
				Если НЕ ЗначениеЗаполнено(Контрагент.ВидГосударственногоОргана) Тогда
					Контрагент.ВидГосударственногоОргана = ВидГосударственногоОрганаПоКБК(ВыборкаКонтрагента.КодБК);
				КонецЕсли;
				
				Если Контрагент.ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.Прочий Тогда
					Прервать;
				КонецЕсли;
				
				Если Контрагент.ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.ОрганПФР
					И ЗначениеЗаполнено(ВыборкаКонтрагента.КодОрганаПФР) Тогда
					
					Контрагент.КодГосударственногоОргана = Лев(ВыборкаКонтрагента.КодОрганаПФР, 3);
					
				ИначеЕсли Контрагент.ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.ОрганФСС 
					И ЗначениеЗаполнено(ВыборкаКонтрагента.КодПодчиненностиФСС) Тогда
					
					Контрагент.КодГосударственногоОргана = Лев(ВыборкаКонтрагента.КодПодчиненностиФСС, 4);
					
				ИначеЕсли Контрагент.ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган
					И ЗначениеЗаполнено(ВыборкаКонтрагента.КодНалоговогоОргана) Тогда
					Контрагент.КодГосударственногоОргана = ВыборкаКонтрагента.КодНалоговогоОргана;
				КонецЕсли;
				
			КонецЦикла;
			
			Если Контрагент.ВидГосударственногоОргана <> Перечисления.ВидыГосударственныхОрганов.Прочий
				И НЕ ЗначениеЗаполнено(Контрагент.КодГосударственногоОргана) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не возможно заполнить код государственного органа у контрагента ""%1"". Код государственного органа необходимо заполнить вручную'"),
					Выборка.Контрагент);
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,, 
					Выборка.Контрагент, ТекстСообщения);
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Контрагент);
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
		Исключение
			
			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось заполнить данные государственного органа ""%1"" по причине:
					|%2'"), 
					Выборка.Контрагент,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,, 
				Выборка.Контрагент, ТекстСообщения);
			
		КонецПопытки;
	
	КонецЦикла;
	
	Если ОбъектовОбработано + ПроблемныхОбъектов = 0 Тогда
	
		Параметры.ОбработкаЗавершена = Истина;
	
	Иначе
		
		Параметры.ОбработкаЗавершена = Ложь;

		Если ОбъектовОбработано = 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедуре Контрагенты.ЗаполнитьПризнакПринадлежностьКонтрагентаГосударственнымОрганам
					|не удалось заполнить данные государственных органов в %1 контрагентах.'"), 
					ПроблемныхОбъектов);
			ВызватьИсключение ТекстСообщения;
		Иначе
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,,,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Процедура Контрагенты.ЗаполнитьПризнакПринадлежностьКонтрагентаГосударственнымОрганам
						|обработала очередную порцию записей в справочнике Контрагенты: %1 элементов'"), 
						ОбъектовОбработано));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНалоговыйНомерИностранногоКонтрагента() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.СтранаРегистрации <> ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|	И Контрагенты.СтранаРегистрации <> ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	|	И Контрагенты.ЭтоГруппа = ЛОЖЬ
	|	И Контрагенты.НалоговыйНомер = """"
	|	И Контрагенты.ИНН <> """"";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		КонтрагентОбъект = Выборка.Ссылка.ПолучитьОбъект();
		КонтрагентОбъект.НалоговыйНомер = КонтрагентОбъект.ИНН;
		КонтрагентОбъект.ИНН = "";
		КонтрагентОбъект.ИННВведенКорректно = "";
		КонтрагентОбъект.РасширенноеПредставлениеИНН = "";
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(КонтрагентОбъект);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПустуюСтрануРегистрации() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	|	И Контрагенты.ЭтоГруппа = ЛОЖЬ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		КонтрагентОбъект = Выборка.Ссылка.ПолучитьОбъект();
		КонтрагентОбъект.СтранаРегистрации = Справочники.СтраныМира.Россия;
		Если ЗначениеЗаполнено(КонтрагентОбъект.НалоговыйНомер)
			И НЕ ЗначениеЗаполнено(КонтрагентОбъект.ИНН) Тогда
			КонтрагентОбъект.ИНН = КонтрагентОбъект.НалоговыйНомер;
			КонтрагентОбъект.ИННВведенКорректно = Истина;
			КонтрагентОбъект.РасширенноеПредставлениеИНН = КонтрагентОбъект.ИНН;
			КонтрагентОбъект.НалоговыйНомер    = "";
		КонецЕсли;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(КонтрагентОбъект);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


#КонецЕсли