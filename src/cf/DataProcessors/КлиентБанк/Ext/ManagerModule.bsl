#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Процедура ЗаполнитьДокументыНаЭкспорт(ОбъектПлатежныеДокументы, ДокументыНаЭкспорт, НачПериода, КонПериода, БанковскийСчет,
		ВыгружатьПлатПоручения, ВыгружатьПлатТребования, КонтролироватьНекорректныеСимволыВНомере = Ложь) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПлатежноеПоручение.Ссылка КАК ПлатежноеПоручение
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|ГДЕ
	|	ПлатежноеПоручение.Дата МЕЖДУ &ДатаНачало И &ДатаОкончание
	|	И НЕ ПлатежноеПоручение.ПометкаУдаления
	|	И НЕ ПлатежноеПоручение.Оплачено
	|	И ПлатежноеПоручение.СчетОрганизации = &Счет
	|	И &ВыгружатьПлатПоручения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПлатежноеТребование.Ссылка КАК ПлатежноеТребование
	|ИЗ
	|	Документ.ПлатежноеТребование КАК ПлатежноеТребование
	|ГДЕ
	|	ПлатежноеТребование.Дата МЕЖДУ &ДатаНачало И &ДатаОкончание
	|	И НЕ ПлатежноеТребование.ПометкаУдаления
	|	И ПлатежноеТребование.СчетОрганизации = &Счет
	|	И &ВыгружатьПлатТребования";
	
	ЗапросПоДокументам = Новый Запрос(ТекстЗапроса);
	ЗапросПоДокументам.УстановитьПараметр("ДатаНачало",    НачалоДня(НачПериода));
	ЗапросПоДокументам.УстановитьПараметр("ДатаОкончание", КонецДня(КонПериода));
	ЗапросПоДокументам.УстановитьПараметр("Счет",          БанковскийСчет);
	ЗапросПоДокументам.УстановитьПараметр("ВыгружатьПлатПоручения",  ВыгружатьПлатПоручения);
	ЗапросПоДокументам.УстановитьПараметр("ВыгружатьПлатТребования", ВыгружатьПлатТребования);
	
	РезультатЗапроса = ЗапросПоДокументам.ВыполнитьПакет();
	ПлатежныеПоручения  = РезультатЗапроса[0].Выгрузить().ВыгрузитьКолонку("ПлатежноеПоручение");
	ПлатежныеТребования = РезультатЗапроса[1].Выгрузить().ВыгрузитьКолонку("ПлатежноеТребование");
	
	ВыборкаДляЭкспорта = ПолучитьТаблицуДокументовДляЭкспорта(ПлатежныеПоручения, ПлатежныеТребования);
	ОбъектПлатежныеДокументы.Загрузить(ВыборкаДляЭкспорта);
	
	КоллекцияЭлементов = Метаданные.Обработки.КлиентБанк.ТабличныеЧасти.ПлатежныеДокументы.Реквизиты;
	Для каждого СтрокаДокумента Из ОбъектПлатежныеДокументы Цикл
		
		ПроверитьНаКорректностьИПустоеЗначениеЭкспорта(СтрокаДокумента, КоллекцияЭлементов, КонтролироватьНекорректныеСимволыВНомере);
		
		СтрокаДокумента.Выгружать = ПустаяСтрока(СтрокаДокумента.ОписаниеОшибок) И НЕ ЗначениеЗаполнено(СтрокаДокумента.СостояниеЭД);
		
		Если СтрокаДокумента.Готовность > 0 Тогда
			СтрокаДокумента.ОписаниеОшибок = СтрокаДокумента.ОписаниеОшибок;
		Иначе
			СтрокаДокумента.ОписаниеОшибок = НСтр("ru = 'Документ готов к выгрузке.'");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьДокументыНаЭкспорт

Функция ПолучитьТаблицуДокументовДляЭкспорта(ПлатежныеПоручения, ПлатежныеТребования) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("ПлатежныеПоручения",  ПлатежныеПоручения);
	Запрос.Параметры.Вставить("ПлатежныеТребования", ПлатежныеТребования);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	""Платежное поручение"" КАК ВидДокумента,
	|	ПлатежноеПоручение.Ссылка КАК Документ,
	|	ПлатежноеПоручение.Проведен,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручение.Проведен
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СостояниеДокумента,
	|	ПлатежноеПоручение.Номер КАК Номер,
	|	ПлатежноеПоручение.Дата,
	|	ПлатежноеПоручение.ВидПлатежа,
	|	ПлатежноеПоручение.ПеречислениеВБюджет,
	|	ПлатежноеПоручение.ОчередностьПлатежа,
	|	ВЫРАЗИТЬ(ПлатежноеПоручение.НазначениеПлатежа КАК СТРОКА(210)) КАК НазначениеПлатежа,
	|	ПлатежноеПоручение.СуммаДокумента,
	|	0 КАК СуммаНаПриход,
	|	ПлатежноеПоручение.СуммаДокумента КАК СуммаНаРасход,
	|	ВЫРАЗИТЬ(ПлатежноеПоручение.ТекстПлательщика КАК СТРОКА(500)) КАК ТекстПлательщика,
	|	ВЫРАЗИТЬ(ПлатежноеПоручение.ТекстПолучателя КАК СТРОКА(500)) КАК ТекстПолучателя,
	|	ПлатежноеПоручение.ИННПлательщика,
	|	ПлатежноеПоручение.КПППлательщика,
	|	ПлатежноеПоручение.ИННПолучателя,
	|	ПлатежноеПоручение.КПППолучателя,
	|	ПлатежноеПоручение.КодБК,
	|	ПлатежноеПоручение.КодОКАТО,
	|	ПлатежноеПоручение.ПоказательДаты,
	|	ПлатежноеПоручение.ПоказательНомера,
	|	ПлатежноеПоручение.ПоказательОснования,
	|	ПлатежноеПоручение.ПоказательТипа,
	|	ПлатежноеПоручение.ПоказательПериода,
	|	ПлатежноеПоручение.СтатусСоставителя,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручение.Организация.ВариантНаименованияДляПечатныхФорм = ЗНАЧЕНИЕ(Перечисление.ВариантыНаименованияДляПечатныхФорм.СокращенноеНаименование)
	|			ТОГДА ВЫРАЗИТЬ(ПлатежноеПоручение.Организация.НаименованиеСокращенное КАК СТРОКА(250))
	|		ИНАЧЕ ВЫРАЗИТЬ(ПлатежноеПоручение.Организация.НаименованиеПолное КАК СТРОКА(250))
	|	КОНЕЦ КАК Организация,
	|	ПлатежноеПоручение.Организация.Наименование КАК ОрганизацияКратко,
	|	ПлатежноеПоручение.Организация.НаименованиеПлательщикаПриПеречисленииВБюджет КАК ОрганизацияПеречислениеНалога,
	|	ПлатежноеПоручение.Организация.ИНН КАК ОрганизацияИНН,
	|	ПлатежноеПоручение.Организация.КПП КАК ОрганизацияКПП,
	|	ПлатежноеПоручение.СчетОрганизации КАК ОрганизацияСчет,
	|	ПлатежноеПоручение.СчетОрганизации.НомерСчета КАК ОрганизацияНомерСчета,
	|	ПлатежноеПоручение.СчетОрганизации.Банк.Код КАК ОрганизацияБИКБанка,
	|	ПлатежноеПоручение.СчетОрганизации.Банк.Наименование КАК ОрганизацияБанк,
	|	ПлатежноеПоручение.СчетОрганизации.Банк.КоррСчет КАК ОрганизацияРасчСчет,
	|	ПлатежноеПоручение.СчетОрганизации.Банк.Город КАК ОрганизацияГородБанка,
	|	ПлатежноеПоручение.СчетОрганизации.БанкДляРасчетов.Наименование КАК ОрганизацияБанкДляРасчетов,
	|	ПлатежноеПоручение.СчетОрганизации.БанкДляРасчетов.Город КАК ОрганизацияГородРЦБанка,
	|	ПлатежноеПоручение.СчетОрганизации.БанкДляРасчетов.Код КАК ОрганизацияБИКРЦБанка,
	|	ПлатежноеПоручение.СчетОрганизации.БанкДляРасчетов.КоррСчет КАК ОрганизацияКоррСчетРЦБанка,
	|	ПлатежноеПоручение.СчетОрганизации.СуммаБезКопеек КАК СуммаБезКопеек,
	|	ВЫРАЗИТЬ(ПлатежноеПоручение.СчетОрганизации.ТекстКорреспондента КАК СТРОКА(500)) КАК ОрганизацияТекстКорреспондента,
	|	ВЫРАЗИТЬ(ПлатежноеПоручение.СчетОрганизации.ТекстНазначения КАК СТРОКА(210)) КАК ОрганизацияТекстНазначения,
	|	ВЫРАЗИТЬ(ЕстьNULL(ПлатежноеПоручение.СчетКонтрагента.Владелец.НаименованиеПолное, ЕстьNULL(ПлатежноеПоручение.СчетКонтрагента.Владелец.ФИО, ПлатежноеПоручение.СчетКонтрагента.Владелец.ФИО)) КАК СТРОКА(250)) КАК Контрагент,
	|	ПлатежноеПоручение.СчетКонтрагента.Владелец.Наименование КАК КонтрагентКратко,
	|	ПлатежноеПоручение.СчетКонтрагента.Владелец.ИНН КАК КонтрагентИНН,
	|	ПлатежноеПоручение.СчетКонтрагента.Владелец.КПП КАК КонтрагентКПП,
	|	ПлатежноеПоручение.СчетКонтрагента КАК КонтрагентСчет,
	|	ПлатежноеПоручение.СчетКонтрагента.НомерСчета КАК КонтрагентНомерСчета,
	|	ПлатежноеПоручение.СчетКонтрагента.Банк.Наименование КАК КонтрагентБанк,
	|	ПлатежноеПоручение.СчетКонтрагента.Банк.КоррСчет КАК КонтрагентРасчСчет,
	|	ПлатежноеПоручение.СчетКонтрагента.Банк.Город КАК КонтрагентГородБанка,
	|	ПлатежноеПоручение.СчетКонтрагента.БанкДляРасчетов.Наименование КАК КонтрагентБанкДляРасчетов,
	|	ПлатежноеПоручение.СчетКонтрагента.БанкДляРасчетов.Город КАК КонтрагентГородРЦБанка,
	|	ПлатежноеПоручение.СчетКонтрагента.Банк.Код КАК КонтрагентБИКБанка,
	|	ПлатежноеПоручение.СчетКонтрагента.БанкДляРасчетов.Код КАК КонтрагентБИКРЦБанка,
	|	ПлатежноеПоручение.СчетКонтрагента.БанкДляРасчетов.КоррСчет КАК КонтрагентКоррСчетРЦБанка,
	|	ВЫРАЗИТЬ(ПлатежноеПоручение.СчетКонтрагента.ТекстКорреспондента КАК СТРОКА(500)) КАК КонтрагентТекстКорреспондента,
	|	ВЫРАЗИТЬ(ПлатежноеПоручение.СчетКонтрагента.ТекстНазначения КАК СТРОКА(210)) КАК КонтрагентТекстНазначения,
	|	"""" КАК СрокАкцепта,
	|	"""" КАК УсловиеОплаты1,
	|	"""" КАК ДатаОтсылкиДок,
	|	"""" КАК ОписаниеОшибок,
	|	"""" КАК Готовность,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручение.СчетОрганизации.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НепрямыеРасчетыУПлательщика,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручение.СчетКонтрагента.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НепрямыеРасчетыУПолучателя,
	|	ЕСТЬNULL(СостоянияЭД.СостояниеВерсииЭД, ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ПустаяСсылка)) КАК СостояниеЭД,
	|	ПлатежноеПоручение.ИдентификаторПлатежа
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|		ПО ПлатежноеПоручение.Ссылка = СостоянияЭД.СсылкаНаОбъект
	|ГДЕ
	|	ПлатежноеПоручение.Ссылка В(&ПлатежныеПоручения)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Платежное требование"",
	|	ПлатежноеТребование.Ссылка,
	|	ПлатежноеТребование.Проведен,
	|	ВЫБОР
	|		КОГДА ПлатежноеТребование.Проведен
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ПлатежноеТребование.Номер,
	|	ПлатежноеТребование.Дата,
	|	ПлатежноеТребование.ВидПлатежа,
	|	ЛОЖЬ,
	|	ПлатежноеТребование.ОчередностьПлатежа,
	|	ВЫРАЗИТЬ(ПлатежноеТребование.НазначениеПлатежа КАК СТРОКА(210)),
	|	ПлатежноеТребование.СуммаДокумента,
	|	ПлатежноеТребование.СуммаДокумента,
	|	0,
	|	ВЫРАЗИТЬ(ПлатежноеТребование.Контрагент.НаименованиеПолное КАК СТРОКА(250)),
	|	ВЫБОР
	|		КОГДА ПлатежноеТребование.Организация.ВариантНаименованияДляПечатныхФорм = ЗНАЧЕНИЕ(Перечисление.ВариантыНаименованияДляПечатныхФорм.СокращенноеНаименование)
	|			ТОГДА ВЫРАЗИТЬ(ПлатежноеТребование.Организация.НаименованиеСокращенное КАК СТРОКА(250))
	|		ИНАЧЕ ВЫРАЗИТЬ(ПлатежноеТребование.Организация.НаименованиеПолное КАК СТРОКА(250))
	|	КОНЕЦ,
	|	ПлатежноеТребование.Контрагент.ИНН,
	|	ПлатежноеТребование.Контрагент.КПП,
	|	ПлатежноеТребование.Организация.ИНН,
	|	ПлатежноеТребование.Организация.КПП,
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	ВЫБОР
	|		КОГДА ПлатежноеТребование.Организация.ВариантНаименованияДляПечатныхФорм = ЗНАЧЕНИЕ(Перечисление.ВариантыНаименованияДляПечатныхФорм.СокращенноеНаименование)
	|			ТОГДА ВЫРАЗИТЬ(ПлатежноеТребование.Организация.НаименованиеСокращенное КАК СТРОКА(250))
	|		ИНАЧЕ ВЫРАЗИТЬ(ПлатежноеТребование.Организация.НаименованиеПолное КАК СТРОКА(250))
	|	КОНЕЦ,
	|	ПлатежноеТребование.Организация.Наименование,
	|	ПлатежноеТребование.Организация.НаименованиеПлательщикаПриПеречисленииВБюджет,
	|	ПлатежноеТребование.Организация.ИНН,
	|	ПлатежноеТребование.Организация.КПП,
	|	ПлатежноеТребование.СчетОрганизации,
	|	ПлатежноеТребование.СчетОрганизации.НомерСчета,
	|	ПлатежноеТребование.СчетОрганизации.Банк.Код,
	|	ПлатежноеТребование.СчетОрганизации.Банк.Наименование,
	|	ПлатежноеТребование.СчетОрганизации.Банк.КоррСчет,
	|	ПлатежноеТребование.СчетОрганизации.Банк.Город,
	|	ПлатежноеТребование.СчетОрганизации.БанкДляРасчетов.Наименование,
	|	ПлатежноеТребование.СчетОрганизации.БанкДляРасчетов.Город,
	|	ПлатежноеТребование.СчетОрганизации.БанкДляРасчетов.Код,
	|	ПлатежноеТребование.СчетОрганизации.БанкДляРасчетов.КоррСчет,
	|	ПлатежноеТребование.СчетОрганизации.СуммаБезКопеек,
	|	ВЫРАЗИТЬ(ПлатежноеТребование.СчетОрганизации.ТекстКорреспондента КАК СТРОКА(500)),
	|	ВЫРАЗИТЬ(ПлатежноеТребование.СчетОрганизации.ТекстНазначения КАК СТРОКА(210)),
	|	ВЫРАЗИТЬ(ПлатежноеТребование.Контрагент.НаименованиеПолное КАК СТРОКА(250)),
	|	ПлатежноеТребование.Контрагент.Наименование,
	|	ПлатежноеТребование.Контрагент.ИНН,
	|	ПлатежноеТребование.Контрагент.КПП,
	|	ПлатежноеТребование.СчетКонтрагента,
	|	ПлатежноеТребование.СчетКонтрагента.НомерСчета,
	|	ПлатежноеТребование.СчетКонтрагента.Банк.Наименование,
	|	ПлатежноеТребование.СчетКонтрагента.Банк.КоррСчет,
	|	ПлатежноеТребование.СчетКонтрагента.Банк.Город,
	|	ПлатежноеТребование.СчетКонтрагента.БанкДляРасчетов.Наименование,
	|	ПлатежноеТребование.СчетКонтрагента.БанкДляРасчетов.Город,
	|	ПлатежноеТребование.СчетКонтрагента.Банк.Код,
	|	ПлатежноеТребование.СчетКонтрагента.БанкДляРасчетов.Код,
	|	ПлатежноеТребование.СчетКонтрагента.БанкДляРасчетов.КоррСчет,
	|	ВЫРАЗИТЬ(ПлатежноеТребование.СчетКонтрагента.ТекстКорреспондента КАК СТРОКА(500)),
	|	ВЫРАЗИТЬ(ПлатежноеТребование.СчетКонтрагента.ТекстНазначения КАК СТРОКА(210)),
	|	ПлатежноеТребование.СрокДляАкцепта,
	|	ВЫБОР
	|		КОГДА ПлатежноеТребование.САкцептом
	|			ТОГДА ВЫБОР ПлатежноеТребование.ВидАкцепта
	|					КОГДА 1
	|						ТОГДА ""1""
	|					КОГДА 2
	|						ТОГДА ""2""
	|					ИНАЧЕ ""С акцептом""
	|				КОНЕЦ
	|		ИНАЧЕ ""Без акцепта, "" + (ВЫРАЗИТЬ(ПлатежноеТребование.ОснованиеДляБезакцептногоСписания КАК СТРОКА(210)))
	|	КОНЕЦ,
	|	ПлатежноеТребование.ДатаОтсылкиДокументов,
	|	"""",
	|	"""",
	|	ВЫБОР
	|		КОГДА ПлатежноеТребование.СчетОрганизации.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ПлатежноеТребование.СчетКонтрагента.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ЕСТЬNULL(СостоянияЭД.СостояниеВерсииЭД, ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ПустаяСсылка)),
	|	""""
	|ИЗ
	|	Документ.ПлатежноеТребование КАК ПлатежноеТребование
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|		ПО ПлатежноеТребование.Ссылка = СостоянияЭД.СсылкаНаОбъект
	|ГДЕ
	|	ПлатежноеТребование.Ссылка В(&ПлатежныеТребования)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидДокумента,
	|	ПлатежноеПоручение.Дата,
	|	Документ";
	
	ТаблицаПлатежныхДокументов = Запрос.Выполнить().Выгрузить();
	ТаблицаПлатежныхДокументов.Колонки.Добавить("НомерВФорматеВыгрузки", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(11)));
	Для каждого ПлатежныйДокумент Из ТаблицаПлатежныхДокументов Цикл
		ПлатежныйДокумент.НомерВФорматеВыгрузки = ПолучитьНомерВФорматеОбмена(ПлатежныйДокумент.Документ, ПлатежныйДокумент.Номер);
		
		ТекстПолучателя = "";
		Если ПлатежныйДокумент.НепрямыеРасчетыУПолучателя Тогда
			ПозицияРС = Найти(ПлатежныйДокумент.ТекстПолучателя, "р/с");
			Если ПозицияРС = 0 Тогда
				ТекстПолучателя = ПлатежныйДокумент.ТекстПолучателя;
			Иначе
				ТекстПолучателя = СокрЛП((Лев(ПлатежныйДокумент.ТекстПолучателя, ПозицияРС - 1)));
			КонецЕсли;
		Иначе
			ТекстПолучателя = ПлатежныйДокумент.ТекстПолучателя;
		КонецЕсли;
		
		ПлатежныйДокумент.ТекстПолучателя = СтрЗаменить(ТекстПолучателя, Символы.ПС, " ");
		
		ТекстПлательщика = "";
		Если ПлатежныйДокумент.НепрямыеРасчетыУПлательщика Тогда
			ПозицияРС = Найти(ПлатежныйДокумент.ТекстПлательщика, "р/с");
			Если ПозицияРС = 0 Тогда
				ТекстПлательщика = ПлатежныйДокумент.ТекстПлательщика;
			Иначе
				ТекстПлательщика = СокрЛП((Лев(ПлатежныйДокумент.ТекстПлательщика, ПозицияРС - 1)));
			КонецЕсли;
		Иначе
			ТекстПлательщика = ПлатежныйДокумент.ТекстПлательщика;
		КонецЕсли;
		
		ПлатежныйДокумент.ТекстПлательщика = СтрЗаменить(ТекстПлательщика, Символы.ПС, " ");
		
	КонецЦикла;
	
	Возврат ТаблицаПлатежныхДокументов;
	
КонецФункции

// Функция проверяет строки таблицы на корректность и пустое значение
//
Процедура ПроверитьНаКорректностьИПустоеЗначениеЭкспорта(СтрокаДокумента, КоллекцияЭлементов,
		КонтролироватьНекорректныеСимволыВНомере = Ложь)
	
	ПеречислениеНалога          = Ложь;
	НепрямыеРасчетыУПлательщика = Ложь;
	НепрямыеРасчетыУПолучателя  = Ложь;
	
	Если СтрокаДокумента.ВидДокумента = "Платежное поручение" Тогда
		ПеречислениеНалога           = ЗначениеЗаполнено(СтрокаДокумента.СтатусСоставителя);
		НепрямыеРасчетыУПлательщика  = ЗначениеЗаполнено(СтрокаДокумента.ОрганизацияБанкДляРасчетов);
		НепрямыеРасчетыУПолучателя   = ЗначениеЗаполнено(СтрокаДокумента.КонтрагентБанкДляРасчетов);
		СтрокаДокумента.ТипДокумента = ?(ПеречислениеНалога, 1, 0) * 4
			+ ?(НепрямыеРасчетыУПолучателя, 1, 0) * 2 + ?(НепрямыеРасчетыУПлательщика, 1, 0) + 1;
		Плательщик    = "Организация";
		Получатель    = "Контрагент";
		ПлательщикИНН = "ИННПлательщика";
		ПолучательИНН = "ИННПолучателя";
	Иначе
		СтрокаДокумента.ТипДокумента = 0;
		Плательщик    = "Контрагент";
		Получатель    = "Организация";
		ПлательщикИНН = "КонтрагентИНН";
		ПолучательИНН = "ОрганизацияИНН";
	КонецЕсли;
	
	Если НЕ СтрокаДокумента.Проведен Тогда
		ДобавитьЗамечание(СтрокаДокумента, 4, НСтр("ru = 'Не проведен документ'"));
	КонецЕсли;
	
	// РеквизитыПлДокЭкс_Основные
	Экспорт_НеПустые = Новый Структура("Номер, Дата, СуммаДокумента");
	
	// РеквизитыПлДокЭкс_Плательщик
	Экспорт_НеПустые.Вставить(ПлательщикИНН);
	Экспорт_НеПустые.Вставить(Плательщик);
	Экспорт_НеПустые.Вставить(Плательщик + "Счет");
	
	Если НепрямыеРасчетыУПлательщика Тогда
		// РеквизитыПлДокЭкс_ПлательщикНПР
		Экспорт_НеПустые.Вставить(Плательщик + "РасчСчет");
		Экспорт_НеПустые.Вставить(Плательщик + "БанкДляРасчетов");
		Экспорт_НеПустые.Вставить(Плательщик + "ГородБанка");
		Экспорт_НеПустые.Вставить(Плательщик + "БИКРЦБанка");
	КонецЕсли;
	
	// РеквизитыПлДокЭкс_Получатель
	Экспорт_НеПустые.Вставить(ПолучательИНН);
	Экспорт_НеПустые.Вставить(Получатель);
	Экспорт_НеПустые.Вставить(Получатель + "Счет");
	
	Если НепрямыеРасчетыУПолучателя Тогда
		// РеквизитыПлДокЭкс_ПолучательНПР
		Экспорт_НеПустые.Вставить(Получатель + "РасчСчет");
		Экспорт_НеПустые.Вставить(Получатель + "БанкДляРасчетов");
		Экспорт_НеПустые.Вставить(Получатель + "ГородБанка");
		Экспорт_НеПустые.Вставить(Получатель + "БИКРЦБанка");
	КонецЕсли;
	
	Для каждого Свойство Из Экспорт_НеПустые Цикл
		ПроверитьНаПустоеЗначениеЭкспорта(СтрокаДокумента, Свойство.Ключ, КоллекцияЭлементов.Найти(Свойство.Ключ).Имя);
	КонецЦикла;
	
	Если ПеречислениеНалога Тогда
		ПроверитьЗаполнениеНалоговыхРеквизитов(СтрокаДокумента);
	КонецЕсли;
	
	ПроверитьНаКорректностьНомераПриВыгрузке(СтрокаДокумента, КонтролироватьНекорректныеСимволыВНомере);
	
КонецПроцедуры

Процедура ПроверитьНаПустоеЗначениеЭкспорта(СтрокаЭкспорта, ИмяСвойства, ПредставлениеСвойства)
	
	Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта[ИмяСвойства]) Тогда
		ДобавитьЗамечание(СтрокаЭкспорта, 4, "Не заполнено """ + ПредставлениеСвойства + """");
	КонецЕсли;
	
КонецПроцедуры

// Процедура проверяет корректность номера
//
Процедура ПроверитьНаКорректностьНомераПриВыгрузке(СтрокаЭкспорта, КонтролироватьНекорректныеСимволыВНомере = Ложь)
	
	Если КонтролироватьНекорректныеСимволыВНомере Тогда
		Значение = Прав(СокрЛП(СтрокаЭкспорта.Номер), 6);
		Если Значение = "000000" Тогда
			ДобавитьЗамечание(СтрокаЭкспорта, 4, НСтр("ru = 'Номер не должен быть равен нулю.'"));
		КонецЕсли;
		
		Если ЕстьНеЦифры(Значение) Тогда
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Указан неправильный номер документа(%1)!'"), Значение);
			ДобавитьЗамечание(СтрокаЭкспорта, 4, ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура проверяет заполнение таблицы с документами
//
Процедура ПроверитьЗаполнениеТаблицыДокументов(Объект, Документ, Документы = "ДокументыКИмпорту", Отказ = Ложь) Экспорт
	
	ЕстьНепроведенные = Ложь;
	Если Документы = "ПлатежныеДокументы" Тогда
		ВидЗакладки = "Платежные документы";
		Документы   = "Объект.ПлатежныеДокументы"
	Иначе
		ВидЗакладки = "Банковская выписка";
	КонецЕсли;
	
	Для НомСтр = 0 По Документ.Количество() - 1 Цикл
		Если Документ[НомСтр].Готовность > 0 Тогда
			
			Если Документы <> "ДокументыКИмпорту" И Документ[НомСтр].Свойство("Проведен") И НЕ Документ[НомСтр].Проведен Тогда
				ЕстьНепроведенные = Истина;
			КонецЕсли;
			
			Если НЕ Документ[НомСтр].Свойство("Выгружать") ИЛИ НЕ Документ[НомСтр].Выгружать Тогда
				
				МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Документ[НомСтр].ОписаниеОшибок, "; ");
				Для каждого Ошибка Из МассивСтрок Цикл
					
					// Выводим только реальные ошибки. Информация о ненайденых объектах указана в строках списка документов
					
					Если Найти(ВРЕГ(Ошибка), НСтр("ru = 'НЕ НАЙДЕН'")) = 1 ИЛИ Найти(ВРЕГ(Ошибка), НСтр("ru = 'НЕ СОЗДАН'")) = 1 Тогда
						Продолжить;
					КонецЕсли;
					
					Если Найти(Ошибка, НСтр("ru = 'счет'")) > 0 Тогда
						Поле = Документы + "[" + Формат(НомСтр, "ЧН=0; ЧГ=") + "].СчетКонтрагента";
						ПолеТаблицы = "Счет контрагента";
					ИначеЕсли Найти(Ошибка, НСтр("ru = 'ИНН'")) > 0 Тогда
						Поле = Документы + "[" + Формат(НомСтр, "ЧН=0; ЧГ=") + "].Контрагент";
						Если Найти(Ошибка, НСтр("ru = 'получателя'")) > 0 Тогда
							ПолеТаблицы = "ИНН получателя";
						Иначе
							ПолеТаблицы = "ИНН контрагента";
						КонецЕсли;
					ИначеЕсли Найти(Ошибка, НСтр("ru = 'БИК'")) > 0 Тогда
						Поле = Документы + "[" + Формат(НомСтр, "ЧН=0; ЧГ=") + "].СчетКонтрагента";
						Если Найти(Ошибка, НСтр("ru = 'плательщика'")) > 0 Тогда
							ПолеТаблицы = "БИК плательщика";
						ИначеЕсли Найти(Ошибка, НСтр("ru = 'получателя'")) > 0 Тогда
							ПолеТаблицы = "БИК получателя";
						Иначе
							ПолеТаблицы = "БИК";
						КонецЕсли;
						
					ИначеЕсли Найти(Ошибка, НСтр("ru = 'сумма'")) > 0 Тогда
						Поле = Документы + "[" + Формат(НомСтр, "ЧН=0; ЧГ=") + "].СуммаСписано";
						ПолеТаблицы = "Сумма";
					ИначеЕсли Найти(НРег(Ошибка), НСтр("ru = 'номер'")) > 0 Тогда
						Поле = Документы + "[" + Формат(НомСтр, "ЧН=0; ЧГ=") + "].Номер"
							+ ?(Документы = "ДокументыКИмпорту", "Док", "");
						ПолеТаблицы = "Номер";
					Иначе
						Продолжить;
					КонецЕсли;
					
					ТекстОшибки = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(
						"Колонка", "Корректность", ПолеТаблицы, НомСтр + 1, ВидЗакладки);
					ТекстОшибки = СокрЛП(ТекстОшибки) + Символы.ПС + СокрЛП(Ошибка);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, Поле,, Отказ);
					
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьНепроведенные Тогда
		Поле = "Объект.ПлатежныеДокументы";
		ТекстСообщения = НСтр("ru = 'Некоторые документы не проведены и не могут быть выгружены'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, Поле,, Отказ);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеТаблицыДокументов

// Процедура добавляет замечание
//
Процедура ДобавитьЗамечание(СтрокаДокумента, НоваяГотовность, ТекстЗамечания) Экспорт
	
	УстановитьГотовность(СтрокаДокумента.Готовность, НоваяГотовность);
	ДобавитьВСтроку(СтрокаДокумента.ОписаниеОшибок, ТекстЗамечания, "; ");
	СтрокаДокумента.ЕстьОшибка = НоваяГотовность <> 0;
	
КонецПроцедуры

// Процедура устанавливает готовность
//
Процедура УстановитьГотовность(ТекущаяГотовность, НоваяГотовность)
	
	Если ТекущаяГотовность < НоваяГотовность Тогда
		ТекущаяГотовность = НоваяГотовность;
	КонецЕсли;
	
КонецПроцедуры

// Процедура добавляет переданное значение в строку
//
Процедура ДобавитьВСтроку(Буфер, НоваяСтрока, Разделитель = "")
	
	Если ПустаяСтрока(Буфер) Тогда
		Буфер = НоваяСтрока;
	Иначе
		УжеЕстьФразаОшибкаВФайле = Найти(Буфер, "Ошибка в файле. ") > 0;
		Если УжеЕстьФразаОшибкаВФайле Тогда
			НоваяСтрока = СтрЗаменить(НоваяСтрока, "Ошибка в файле. ", "");
		КонецЕсли;
		
		Шаблон = НСтр("ru = '%1%2%3'");
		Буфер  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					Шаблон,
					Буфер,
					?(ПустаяСтрока(Разделитель), Символы.ПС, Разделитель),
					НоваяСтрока);
	КонецЕсли;
	
КонецПроцедуры

Функция Выгрузить(ТаблицаДокументов, ПлатежныеДокументы, Кодировка, Программа, НачПериода, КонПериода, БанковскийСчет, ФайлВыгрузки,
		ВерсияФормата = "1.02",
		Организация, КлючУникальности) Экспорт
	
	ПотокВыгрузки = Новый ТекстовыйДокумент();
	
	// Формируем заголовок
	ПотокВыгрузки.ДобавитьСтроку("1CClientBankExchange");
	ПотокВыгрузки.ДобавитьСтроку("ВерсияФормата=" + ВерсияФормата); // Поддерживаются версии "1.01" и "1.02"
	
	ПотокВыгрузки.ДобавитьСтроку("Кодировка="     + Кодировка);
	ПотокВыгрузки.ДобавитьСтроку("Отправитель="   + Метаданные.Синоним);
	ПотокВыгрузки.ДобавитьСтроку("Получатель="    + Программа);
	ПотокВыгрузки.ДобавитьСтроку("ДатаСоздания="  + Формат(ТекущаяДата(), "ДЛФ=Д"));
	ПотокВыгрузки.ДобавитьСтроку("ВремяСоздания=" + Формат(ТекущаяДата(), "ДЛФ=В"));
	ПотокВыгрузки.ДобавитьСтроку("ДатаНачала="    + Формат(НачПериода, "ДЛФ=Д"));
	ПотокВыгрузки.ДобавитьСтроку("ДатаКонца="     + Формат(КонПериода, "ДЛФ=Д"));
	
	ПотокВыгрузки.ДобавитьСтроку("РасчСчет="      + БанковскийСчет.НомерСчета);
	
	Для каждого Строка Из ТаблицаДокументов Цикл
		Если Строка.Пометка = Истина Тогда
			ИмяДокумента = СокрЛП(Строка.Название);
			ПотокВыгрузки.ДобавитьСтроку("Документ=" + ИмяДокумента);
		КонецЕсли;
	КонецЦикла;
	
	// выводим отмеченные секции документов
	Для каждого СтрокаСекции Из ПлатежныеДокументы Цикл
		Если НЕ СтрокаСекции.Выгружать Тогда
			Продолжить;
		КонецЕсли;
		
		Буфер = ПолучитьСекциюДокумент(СтрокаСекции, Организация, ВерсияФормата);
		КоличествоСрокСекции = СтрЧислоСтрок(Буфер);
		Для Сч = 1 По КоличествоСрокСекции Цикл
			ПотокВыгрузки.ДобавитьСтроку(СтрПолучитьСтроку(Буфер, Сч));
		КонецЦикла;
		
		СтрокаСекции.Готовность = -2;
	КонецЦикла;
	
	ПотокВыгрузки.ДобавитьСтроку("КонецФайла");
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
	
	// Кодировку задаем текстом, иначе бывают проблемы на сервере в Linux и в связке англоязычная Windows + англоязычный SQL
	Если Кодировка = "DOS" Тогда
		Кодир = "cp866";        // КодировкаТекста.OEM;
	Иначе
		Кодир = "windows-1251"; // КодировкаТекста.ANSI;
	КонецЕсли;
	
	ПотокВыгрузки.Записать(ИмяВременногоФайла, Кодир);
	
	// Отметим те документы которые успешно загрузились
	Для каждого СтрокаСекции Из ПлатежныеДокументы Цикл
		СтрокаСекции.Готовность = ?(СтрокаСекции.Готовность = -2, -1, СтрокаСекции.Готовность);
	КонецЦикла;
	
	Адрес = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла), КлючУникальности);
	
	Возврат Адрес;
	
КонецФункции

// Функция получает секцию документа
//
Функция ПолучитьСекциюДокумент(СтруктураДокумента, Организация, ВерсияФормата)
	
	Буфер    = "";
	Реквизит = "";
	Секция   = СформироватьСтруктуруЭкспорта(ВерсияФормата);
	ЗаполнитьЗначениеЭкспорта(Секция, СтруктураДокумента, Организация);
	
	ДобавитьВСтроку(Буфер, "СекцияДокумент=" + СтруктураДокумента.ВидДокумента);
	
	Для каждого ВыгружаемыйРеквизит Из Секция Цикл
		
		Значение = ПривестиЗначение(ВыгружаемыйРеквизит.Значение);
		
		Если НЕ ПустаяСтрока(Значение) Тогда
			ДобавитьВСтроку(Буфер, ВыгружаемыйРеквизит.Ключ + "=" + Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавитьВСтроку(Буфер, "КонецДокумента");
	
	Возврат Буфер;
	
КонецФункции

// Функция формирует структуру экспорта
//
Функция СформироватьСтруктуруЭкспорта(ВерсияФормата)
	
	СтруктураЭкспорта = Новый Структура;
	
	СтруктураЭкспорта.Вставить("Выгружать",              ""); // "_"
	СтруктураЭкспорта.Вставить("Готовность",             ""); // "Готовность"
	
	СтруктураЭкспорта.Вставить("НомерДок",               ""); // "№ Документа"
	СтруктураЭкспорта.Вставить("Номер",                  ""); // "Номер"
	СтруктураЭкспорта.Вставить("Дата",                   ""); // "Дата"
	СтруктураЭкспорта.Вставить("Операция",               ""); // "Операция"
	СтруктураЭкспорта.Вставить("СчетОрганизации",        ""); // "Эл. Р/с организации"
	СтруктураЭкспорта.Вставить("НомерСчетаОрганизации",  ""); // "Р/с организации"
	СтруктураЭкспорта.Вставить("Сумма",                  ""); // "Сумма"
	
	СтруктураЭкспорта.Вставить("Контрагент",             ""); // "Контрагент"
	СтруктураЭкспорта.Вставить("СчетКонтрагента",        ""); // "Р/с контрагента"
	СтруктураЭкспорта.Вставить("НомерСчетаКонтрагента",  ""); // "Эл. Р/с контрагента"
	
	СтруктураЭкспорта.Вставить("КвитанцияДата",          ""); // "Дата форм. квитанции"
	СтруктураЭкспорта.Вставить("КвитанцияВремя",         ""); // "Время форм. квитанции"
	СтруктураЭкспорта.Вставить("КвитанцияСодержание",    ""); // "Содержание квитанции"
	
	СтруктураЭкспорта.Вставить("ПлательщикСчет",         ""); // "Расчетный счет плательщика"
	СтруктураЭкспорта.Вставить("Плательщик",             ""); // "Плательщик"
	СтруктураЭкспорта.Вставить("ПлательщикИНН",          ""); // "ИНН плательщика"
	СтруктураЭкспорта.Вставить("Плательщик1",            ""); // "Наименование плательщика"
	СтруктураЭкспорта.Вставить("Плательщик2",            ""); // "Расчетный счет плательщика"
	СтруктураЭкспорта.Вставить("Плательщик3",            ""); // "Банк плательщика"
	СтруктураЭкспорта.Вставить("Плательщик4",            ""); // "Город банка плательщика"
	СтруктураЭкспорта.Вставить("ПлательщикРасчСчет",     ""); // "Корсчет банка плательщика"
	СтруктураЭкспорта.Вставить("ПлательщикБанк1",        ""); // "РЦ банка плательщика"
	СтруктураЭкспорта.Вставить("ПлательщикБанк2",        ""); // "Город РЦ банка плательщика"
	СтруктураЭкспорта.Вставить("ПлательщикБИК",          ""); // "БИК РЦ банка плательщика"
	СтруктураЭкспорта.Вставить("ПлательщикКорсчет",      ""); // "Корсчет РЦ банка плат."
	
	СтруктураЭкспорта.Вставить("ПолучательСчет",         ""); // "Расчетный счет получателя"
	СтруктураЭкспорта.Вставить("Получатель",             ""); // "Получатель"
	СтруктураЭкспорта.Вставить("ПолучательИНН",          ""); // "ИНН получателя"
	СтруктураЭкспорта.Вставить("Получатель1",            ""); // "Наименование получателя"
	СтруктураЭкспорта.Вставить("Получатель2",            ""); // "Расчетный счет получателя"
	СтруктураЭкспорта.Вставить("Получатель3",            ""); // "Банк получателя"
	СтруктураЭкспорта.Вставить("Получатель4",            ""); // "Город банка получателя"
	СтруктураЭкспорта.Вставить("ПолучательРасчСчет",     ""); // "Корсчет банка получателя"
	СтруктураЭкспорта.Вставить("ПолучательБанк1",        ""); // "РЦ банка получателя"
	СтруктураЭкспорта.Вставить("ПолучательБанк2",        ""); // "Город РЦ банка получателя"
	СтруктураЭкспорта.Вставить("ПолучательБИК",          ""); // "БИК РЦ банка получателя"
	СтруктураЭкспорта.Вставить("ПолучательКорсчет",      ""); // "Корсчет РЦ банка пол."
	
	СтруктураЭкспорта.Вставить("ВидПлатежа",             ""); // "Вид платежа"
	СтруктураЭкспорта.Вставить("ВидОплаты",              ""); // "Вид оплаты"
	СтруктураЭкспорта.Вставить("ПеречислениеВБюджет",    ""); // "Перечисление в бюджет",
	СтруктураЭкспорта.Вставить("ВидПеречисленияВБюджет", ""); // "Вид перечисления в бюджет",
	
	СтруктураЭкспорта.Вставить("СтатусСоставителя",      ""); // "Статус составителя"
	СтруктураЭкспорта.Вставить("ПлательщикКПП",          ""); // "КПП плательщика"
	СтруктураЭкспорта.Вставить("ПолучательКПП",          ""); // "КПП получателя"
	СтруктураЭкспорта.Вставить("ПоказательКБК",          ""); // "Показатель КБК"
	СтруктураЭкспорта.Вставить("ОКАТО",                  ""); // "ОКАТО/ОКТМО"
	СтруктураЭкспорта.Вставить("ПоказательОснования",    ""); // "Пок. основания"
	СтруктураЭкспорта.Вставить("ПоказательПериода",      ""); // "Пок. нал. периода"
	СтруктураЭкспорта.Вставить("ПоказательНомера",       ""); // "Пок. номера док."
	СтруктураЭкспорта.Вставить("ПоказательДаты",         ""); // "Пок. даты док."
	
	Если ВерсияФормата < "1.03" Тогда // С 01.01.2015 не используется
		СтруктураЭкспорта.Вставить("ПоказательТипа",     ""); // "Пок. типа платежа"
	КонецЕсли;
	
	СтруктураЭкспорта.Вставить("СрокПлатежа",            ""); // "Срок действия аккредитива"
	СтруктураЭкспорта.Вставить("Очередность",            ""); // "Очередность платежа"
	
	СтруктураЭкспорта.Вставить("НазначениеПлатежа",      ""); // "Назначение платежа"
	СтруктураЭкспорта.Вставить("НазначениеПлатежа1",     ""); // "Назначение платежа, стр. 1"
	СтруктураЭкспорта.Вставить("НазначениеПлатежа2",     ""); // "Назначение платежа, стр. 2"
	СтруктураЭкспорта.Вставить("НазначениеПлатежа3",     ""); // "Назначение платежа, стр. 3"
	СтруктураЭкспорта.Вставить("НазначениеПлатежа4",     ""); // "Назначение платежа, стр. 4"
	СтруктураЭкспорта.Вставить("НазначениеПлатежа5",     ""); // "Назначение платежа, стр. 5"
	СтруктураЭкспорта.Вставить("НазначениеПлатежа6",     ""); // "Назначение платежа, стр. 6"
	
	СтруктураЭкспорта.Вставить("СрокАкцепта",            ""); // "Срок акцепта"
	СтруктураЭкспорта.Вставить("ВидАккредитива",         ""); // "Вид аккредитива"
	СтруктураЭкспорта.Вставить("УсловиеОплаты1",         ""); // "Условие оплаты, стр. 1"
	СтруктураЭкспорта.Вставить("УсловиеОплаты2",         ""); // "Условие оплаты, стр. 2"
	СтруктураЭкспорта.Вставить("УсловиеОплаты3",         ""); // "Условие оплаты, стр. 3"
	СтруктураЭкспорта.Вставить("ПлатежПоПредст",         ""); // "Платеж по представлению"
	СтруктураЭкспорта.Вставить("ДополнУсловия",          ""); // "Дополнительные условия"
	СтруктураЭкспорта.Вставить("НомерСчетаПоставщика",   ""); // "№ счета поставщика"
	СтруктураЭкспорта.Вставить("ДатаОтсылкиДок",         ""); // "Дата отсылки документов"
	
	СтруктураЭкспорта.Вставить("Документ",               ""); // "Источник"
	СтруктураЭкспорта.Вставить("СекцияДокумент",         ""); // "Выгрузка"
	
	СтруктураЭкспорта.Вставить("ОписаниеОшибок",         ""); // "Замечания"
	СтруктураЭкспорта.Вставить("ТипДокумента",           ""); // "Тип пл. документа"
	
	Если ВерсияФормата >= "1.02" Тогда
		СтруктураЭкспорта.Вставить("Код", ""); // "Уникальный идентификатор платежа"
	КонецЕсли;
	
	Возврат СтруктураЭкспорта;
	
КонецФункции // СформироватьСтруктуруЭкспорта

// Процедура заполняет экспортные значения
//
Процедура ЗаполнитьЗначениеЭкспорта(СтрокаЭкспорта, ВыборкаДляЭкспорта, Организация)
	
	Если ВыборкаДляЭкспорта.ВидДокумента = "Платежное требование" Тогда
		Плательщик = "Контрагент";
		Получатель = "Организация";
	Иначе
		Плательщик = "Организация";
		Получатель = "Контрагент";
	КонецЕсли;
	
	СтрокаЭкспорта.Номер          = ВыборкаДляЭкспорта.НомерВФорматеВыгрузки;
	СтрокаЭкспорта.Дата           = Формат(ВыборкаДляЭкспорта.Дата, "ДЛФ=Д");
	СтрокаЭкспорта.Сумма          = Формат(ВыборкаДляЭкспорта.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧРГ=' '; ЧГ=0");
	СтрокаЭкспорта.ПлательщикСчет = ВыборкаДляЭкспорта[Плательщик + "НомерСчета"];
	СтрокаЭкспорта.ПолучательСчет = ВыборкаДляЭкспорта[Получатель + "НомерСчета"];
	СтрокаЭкспорта.ВидПлатежа     = ВыборкаДляЭкспорта.ВидПлатежа;
	
	НепрямыеРасчетыУПлательщика   = ЗначениеЗаполнено(ВыборкаДляЭкспорта[Плательщик + "БанкДляРасчетов"]);
	НепрямыеРасчетыУПолучателя    = ЗначениеЗаполнено(ВыборкаДляЭкспорта[Получатель + "БанкДляРасчетов"]);
	
//ВидОплаты
	Если ВыборкаДляЭкспорта.ВидДокумента = "Платежное поручение" Тогда
		СтрокаЭкспорта.ВидОплаты  = "01";
	ИначеЕсли ВыборкаДляЭкспорта.ВидДокумента = "Аккредитив переданный" Тогда
		СтрокаЭкспорта.ВидОплаты  = "08";
	ИначеЕсли ВыборкаДляЭкспорта.ВидДокумента = "Инкассовое поручение" Тогда
		СтрокаЭкспорта.ВидОплаты  = "06";
	ИначеЕсли ВыборкаДляЭкспорта.ВидДокумента = "Платежное требование" Тогда
		СтрокаЭкспорта.ВидОплаты  = "02";
	Иначе
		СтрокаЭкспорта.ВидОплаты  = "00";
	КонецЕсли;
	
//Плательщик1
	СтрокаЭкспорта.Плательщик1 = ВыборкаДляЭкспорта.ТекстПлательщика;
	
//Плательщик, ПлательщикИНН
	Значение = ВыборкаДляЭкспорта.ИННПлательщика;
	СтрокаЭкспорта.ПлательщикИНН = Значение;
	СтрокаЭкспорта.Плательщик = "ИНН " + Значение + " " + СтрокаЭкспорта.Плательщик1;
	
//ПлательщикРасчСчет, ПлательщикБанк1, ПлательщикБанк2, ПлательщикБИК, ПлательщикКорсчет,Плательщик2, Плательщик3, Плательщик4
	Если НепрямыеРасчетыУПлательщика Тогда
		СтрокаЭкспорта.Плательщик2        = ВыборкаДляЭкспорта[Плательщик + "НомерСчета"];
		СтрокаЭкспорта.Плательщик3        = ВыборкаДляЭкспорта[Плательщик + "Банк"];
		СтрокаЭкспорта.Плательщик4        = ВыборкаДляЭкспорта[Плательщик + "ГородБанка"];
		СтрокаЭкспорта.Плательщик         = СтрокаЭкспорта.Плательщик + " р/с " + СтрокаЭкспорта.Плательщик2 + " в " + СтрокаЭкспорта.Плательщик3 + " " + СтрокаЭкспорта.Плательщик4;
		СтрокаЭкспорта.ПлательщикРасчСчет = ВыборкаДляЭкспорта[Плательщик + "РасчСчет"];
		СтрокаЭкспорта.ПлательщикБанк1    = ВыборкаДляЭкспорта[Плательщик + "БанкДляРасчетов"];
		СтрокаЭкспорта.ПлательщикБанк2    = ВыборкаДляЭкспорта[Плательщик + "ГородРЦБанка"];
		СтрокаЭкспорта.ПлательщикБИК      = ВыборкаДляЭкспорта[Плательщик + "БИКРЦБанка"];
		СтрокаЭкспорта.ПлательщикКорсчет  = ВыборкаДляЭкспорта[Плательщик + "КоррСчетРЦБанка"];
	Иначе
		СтрокаЭкспорта.ПлательщикРасчСчет = ВыборкаДляЭкспорта[Плательщик + "НомерСчета"];
		СтрокаЭкспорта.ПлательщикБанк1    = ВыборкаДляЭкспорта[Плательщик + "Банк"];
		СтрокаЭкспорта.ПлательщикБанк2    = ВыборкаДляЭкспорта[Плательщик + "ГородБанка"];
		СтрокаЭкспорта.ПлательщикБИК      = ВыборкаДляЭкспорта[Плательщик + "БИКБанка"];
		СтрокаЭкспорта.ПлательщикКорсчет  = ВыборкаДляЭкспорта[Плательщик + "РасчСчет"];
	КонецЕсли;
	
//Получатель1
	ПолучательПозицияСимволВК = Найти(ВыборкаДляЭкспорта.ТекстПолучателя, Символы.ВК);
	Если ПолучательПозицияСимволВК = 0 Тогда
		СтрокаЭкспорта.Получатель1 = ВыборкаДляЭкспорта.ТекстПолучателя;
	Иначе
		
	КонецЕсли;
	
//Получатель, ПолучательИНН
	Значение = ВыборкаДляЭкспорта.ИННПолучателя;
	СтрокаЭкспорта.ПолучательИНН = Значение;
	СтрокаЭкспорта.Получатель    = "ИНН " + Значение + " " + СтрокаЭкспорта.Получатель1;
	
//ПолучательРасчСчет, ПолучательБанк1, ПолучательБанк2, ПолучательБИК, ПолучательКорсчет, Получатель2, Получатель3, Получатель4
	Если НепрямыеРасчетыУПолучателя Тогда
		СтрокаЭкспорта.Получатель2        = ВыборкаДляЭкспорта[Получатель + "НомерСчета"];
		СтрокаЭкспорта.Получатель3        = ВыборкаДляЭкспорта[Получатель + "Банк"];
		СтрокаЭкспорта.Получатель4        = ВыборкаДляЭкспорта[Получатель + "ГородБанка"];
		СтрокаЭкспорта.Получатель         = СтрокаЭкспорта.Получатель + " р/с " + СтрокаЭкспорта.Получатель2 + " в " + СтрокаЭкспорта.Получатель3 + " " + СтрокаЭкспорта.Получатель4;
		СтрокаЭкспорта.ПолучательРасчСчет = ВыборкаДляЭкспорта[Получатель + "РасчСчет"];
		СтрокаЭкспорта.ПолучательБанк1    = ВыборкаДляЭкспорта[Получатель + "БанкДляРасчетов"];
		СтрокаЭкспорта.ПолучательБанк2    = ВыборкаДляЭкспорта[Получатель + "ГородРЦБанка"];
		СтрокаЭкспорта.ПолучательБИК      = ВыборкаДляЭкспорта[Получатель + "БИКРЦБанка"];
		СтрокаЭкспорта.ПолучательКорсчет  = ВыборкаДляЭкспорта[Получатель + "КоррСчетРЦБанка"];
	Иначе
		СтрокаЭкспорта.ПолучательРасчСчет = ВыборкаДляЭкспорта[Получатель + "НомерСчета"];
		СтрокаЭкспорта.ПолучательБанк1    = ВыборкаДляЭкспорта[Получатель + "Банк"];
		СтрокаЭкспорта.ПолучательБанк2    = ВыборкаДляЭкспорта[Получатель + "ГородБанка"];
		СтрокаЭкспорта.ПолучательБИК      = ВыборкаДляЭкспорта[Получатель + "БИКБанка"];
		СтрокаЭкспорта.ПолучательКорсчет  = ВыборкаДляЭкспорта[Получатель + "РасчСчет"];
	КонецЕсли;
	
//ПлательщикКПП
	Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПлательщикКПП) Тогда
		СтрокаЭкспорта.ПлательщикКПП = ВыборкаДляЭкспорта.КПППлательщика;
	КонецЕсли;
	
//ПолучательКПП
	Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПолучательКПП) Тогда
		СтрокаЭкспорта.ПолучательКПП = ВыборкаДляЭкспорта.КПППолучателя;
	КонецЕсли;
	
//СтатусСоставителя, ПлательщикКПП ПолучательКПП ПоказательКБК ОКАТО/ОКТМО ПоказательОснования ПоказательПериода ПоказательНомера ПоказательДаты ПоказательТипа Код
	Если ВыборкаДляЭкспорта.ПеречислениеВБюджет Тогда
		СтрокаЭкспорта.СтатусСоставителя = ВыборкаДляЭкспорта.СтатусСоставителя;
		
		Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПлательщикКПП) Тогда
			СтрокаЭкспорта.ПлательщикКПП = ВыборкаДляЭкспорта.КПППлательщика;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПлательщикКПП) Тогда
			СтрокаЭкспорта.ПлательщикКПП = "0";
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПолучательКПП) Тогда
			СтрокаЭкспорта.ПолучательКПП = ВыборкаДляЭкспорта.КПППолучателя;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПолучательКПП) Тогда
			СтрокаЭкспорта.ПолучательКПП = "0";
		КонецЕсли;
		
		Если ПустаяСтрока(ВыборкаДляЭкспорта.КодБК) Тогда
			СтрокаЭкспорта.ПоказательКБК = "0";
		Иначе
			СтрокаЭкспорта.ПоказательКБК = ВыборкаДляЭкспорта.КодБК;
		КонецЕсли;
		
		Если ПустаяСтрока(ВыборкаДляЭкспорта.КодОКАТО) Тогда
			СтрокаЭкспорта.ОКАТО = "0";
		Иначе
			СтрокаЭкспорта.ОКАТО = ВыборкаДляЭкспорта.КодОКАТО;
		КонецЕсли;
		
		Если ПустаяСтрока(ВыборкаДляЭкспорта.ПоказательОснования) Тогда
			СтрокаЭкспорта.ПоказательОснования = "0";
		Иначе
			СтрокаЭкспорта.ПоказательОснования = ВыборкаДляЭкспорта.ПоказательОснования;
		КонецЕсли;
		
		Если ПустаяСтрока(ВыборкаДляЭкспорта.ПоказательПериода) ИЛИ (ВыборкаДляЭкспорта.ПоказательПериода = "  .  .    ") Тогда
			СтрокаЭкспорта.ПоказательПериода = "0";
		Иначе
			СтрокаЭкспорта.ПоказательПериода = ВыборкаДляЭкспорта.ПоказательПериода;
		КонецЕсли;
		
		Если ПустаяСтрока(ВыборкаДляЭкспорта.ПоказательНомера) Тогда
			СтрокаЭкспорта.ПоказательНомера = "0";
		Иначе
			СтрокаЭкспорта.ПоказательНомера = ВыборкаДляЭкспорта.ПоказательНомера;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаДляЭкспорта.ПоказательДаты) Тогда
			СтрокаЭкспорта.ПоказательДаты = "0";
		Иначе
			СтрокаЭкспорта.ПоказательДаты = ВыборкаДляЭкспорта.ПоказательДаты;
		КонецЕсли;
		
		ПоказательТипаПредусмотренСтандартамиОбмена = СтрокаЭкспорта.Свойство("ПоказательТипа");
		ПоказательТипаВыгружаетсяВОтдельномПоле     = ВыборкаДляЭкспорта.Дата < ПлатежиВБюджетКлиентСервер.НачалоДействияПриказа126н();
		Если ПоказательТипаПредусмотренСтандартамиОбмена Тогда
			Если НЕ ПоказательТипаВыгружаетсяВОтдельномПоле ИЛИ ПустаяСтрока(ВыборкаДляЭкспорта.ПоказательТипа) Тогда
				СтрокаЭкспорта.ПоказательТипа = "0";
			Иначе
				СтрокаЭкспорта.ПоказательТипа = ВыборкаДляЭкспорта.ПоказательТипа;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	КодПредусмотренСтандартамиОбмена = СтрокаЭкспорта.Свойство("Код");
	КодВыгружаетсяВОтдельномПоле     = ВыборкаДляЭкспорта.Дата >= ПлатежиВБюджетКлиентСервер.НачалоПримененияИдентификатораПлатежа();
	Если КодВыгружаетсяВОтдельномПоле И КодПредусмотренСтандартамиОбмена Тогда
		Если ВыборкаДляЭкспорта.ПеречислениеВБюджет
			И ПустаяСтрока(ВыборкаДляЭкспорта.ИдентификаторПлатежа) Тогда
			СтрокаЭкспорта.Код = "0"; // требования 107н
		Иначе
			СтрокаЭкспорта.Код = ВыборкаДляЭкспорта.ИдентификаторПлатежа; // только требования 383-П
		КонецЕсли;
	КонецЕсли;
	
//СрокАкцепта, ДатаОтсылкиДок, УсловиеОплаты1
	Если ВыборкаДляЭкспорта.ВидДокумента = "Платежное требование" Тогда
		СтрокаЭкспорта.СрокАкцепта = ВыборкаДляЭкспорта.СрокАкцепта;
		СтрокаЭкспорта.ДатаОтсылкиДок = ВыборкаДляЭкспорта.ДатаОтсылкиДок;
		СтрокаЭкспорта.УсловиеОплаты1 = ВыборкаДляЭкспорта.УсловиеОплаты1;
	КонецЕсли;
	
//Очередность
	СтрокаЭкспорта.Очередность = "" + ВыборкаДляЭкспорта.ОчередностьПлатежа;
	
//НазначениеПлатежа, НазначениеПлатежа1 НазначениеПлатежа2 НазначениеПлатежа3 НазначениеПлатежа4 НазначениеПлатежа5 НазначениеПлатежа6
	СтрокаЭкспорта.НазначениеПлатежа = СтрЗаменить(ВыборкаДляЭкспорта.НазначениеПлатежа, Символы.ПС + Символы.ВК, " ");
	СтрокаЭкспорта.НазначениеПлатежа = СтрЗаменить(
		СтрЗаменить(СтрЗаменить(СтрокаЭкспорта.НазначениеПлатежа, Символы.ПС, " "), Символы.ВК, " "), Символы.ПФ, " ");
	КоличествоСтрокНП = СтрЧислоСтрок(ВыборкаДляЭкспорта.НазначениеПлатежа);
	
	Если КоличествоСтрокНП > 6 Тогда
		КоличествоСтрокНП = 6;
	КонецЕсли;
	
	Для Сч = 1 По КоличествоСтрокНП Цикл
		СтрокаЭкспорта["НазначениеПлатежа" + Сч] = СтрПолучитьСтроку(ВыборкаДляЭкспорта.НазначениеПлатежа, Сч);
	КонецЦикла;
	
	Для Сч = (КоличествоСтрокНП + 1) По 6 Цикл
		СтрокаЭкспорта["НазначениеПлатежа" + Сч] = "";
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьЗначениеЭкспорта

Функция ЕстьСимволыВНачалеСтроки(Строка, ПроверяемыеСимволы)
	Для Позиция = 1 По СтрДлина(ПроверяемыеСимволы) Цикл
		Символ = Сред(ПроверяемыеСимволы, Позиция, 1);
		СимволНайден = (Лев(Строка, 1) = Символ) Или (Прав(Строка,1) = Символ);
		Если СимволНайден Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

Функция СтрокаСодержитТолькоДопустимыеСимволы(Строка, ДопустимыеСимволы)
	МассивСимволов = Новый Массив;
	Для Позиция = 1 По СтрДлина(ДопустимыеСимволы) Цикл
		МассивСимволов.Добавить(Сред(ДопустимыеСимволы, Позиция, 1));
	КонецЦикла;
	
	Для Позиция = 1 По СтрДлина(Строка) Цикл
		Если МассивСимволов.Найти(Сред(Строка, Позиция, 1)) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

// Проверяет строку на соответствие требованиям
//
// Параметры:
//  ПроверяемаяСтрока - Строка - проверяемый строка.
//
// Возвращаемое значение:
//  Булево - Истина, если ошибок нет.
//
Функция ТолькоСимволыВСтроке(Знач ПроверяемаяСтрока) Экспорт
	
	// допустимые символы для email
	Буквы = "abcdefghijklmnopqrstuvwxyzабвгдеёжзийклмнопрстуфхцчшщъыьэюя";
	Цифры = "0123456789";
	СпецСимволы = ".,;:$№#@&_-+*=?'/|\""%()[]{} ";
	
	// приводим строку к нижнему регистру
	ПроверяемаяСтрока = НРег(СокрЛП(ПроверяемаяСтрока));
	
	// проверяем наличие спецсимволов в начале строке
	Если ЕстьСимволыВНачалеСтроки(Лев(ПроверяемаяСтрока, 1), СпецСимволы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// проверяем допустимые символы
	Если НЕ СтрокаСодержитТолькоДопустимыеСимволы(ПроверяемаяСтрока, Буквы + Цифры + СпецСимволы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Функция проверяет наличие в строке только цифр
//
Функция ЕстьНеЦифры(Знач СтрокаПроверки)
	
	Если ТипЗнч(СтрокаПроверки) <> Тип("Строка") Тогда
		Возврат Истина;
	КонецЕсли;
	
	СтрокаПроверки = СокрЛП(СтрокаПроверки);
	Длина = СтрДлина(СтрокаПроверки);
	
	Для Ном = 1 По Длина Цикл
		Если Найти("0123456789", Сред(СтрокаПроверки, Ном, 1)) = 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Функция получает дату из строки
//
Функция ПолучитьДатуИзСтроки(Источник, ВажнаяДата = Истина)
	Приемник = '00010101';
	
	Если ПустаяСтрока(Источник) Тогда
		Возврат Приемник;
	КонецЕсли;
	
	Буфер = Источник;
	
	ПозицияТочки = Найти(Буфер, ".");
	
	Если ПозицияТочки = 0 Тогда
		Если ВажнаяДата Тогда
			ВызватьИсключение НСтр("ru = 'Не удалось преобразовать строку в дату. Неверный формат.'");
		Иначе
			Возврат Приемник;
		КонецЕсли;
	КонецЕсли;
	
	ЧислоДаты = Лев(Буфер, ПозицияТочки - 1);
	Буфер    = Сред(Буфер, ПозицияТочки + 1);
	
	ПозицияТочки = Найти(Буфер, ".");
	
	Если ПозицияТочки = 0 Тогда
		Если ВажнаяДата Тогда
			ВызватьИсключение НСтр("ru = 'Не удалось преобразовать строку в дату. Неверный формат.'");
		Иначе
			Возврат Приемник;
		КонецЕсли;
	КонецЕсли;
	
	МесяцДаты = Лев(Буфер, ПозицияТочки - 1);
	ГодДаты  = Сред(Буфер, ПозицияТочки + 1);
	
	Если СтрДлина(ГодДаты) = 2 Тогда
		
		Если Число(ГодДаты) < 50 Тогда
			ГодДаты = "20" + ГодДаты;
		Иначе
			ГодДаты = "19" + ГодДаты ;
		КонецЕсли;
		
	КонецЕсли;
	
	Если (ПустаяСтрока(ГодДаты) ИЛИ ГодДаты = "0") И (ПустаяСтрока(МесяцДаты) ИЛИ МесяцДаты = "0") И (ПустаяСтрока(ЧислоДаты) ИЛИ ЧислоДаты = "0") Тогда
		Возврат Приемник;
	КонецЕсли;
	
	Попытка
		
		Приемник = Дата(Число(ГодДаты), Число(МесяцДаты), Число(ЧислоДаты));
		
	Исключение
		// Запись в журнал регистрации не требуется
		
		Если ВажнаяДата Тогда
			ВызватьИсключение НСтр("ru = 'Не удалось преобразовать строку в дату. Неверный формат.'");
		Иначе
			Возврат Приемник;
		КонецЕсли;
		
	КонецПопытки;
	
	Возврат Приемник;
	
КонецФункции

Функция ПолучитьЧислоИзСтроки(Знач НомерДок)
	
	Если ПустаяСтрока(НомерДок) Тогда
		Возврат 0;
	КонецЕсли;
	
	ТолькоЦифры = Истина;
	ДлинаНомера = СтрДлина(НомерДок);
	Для инд = 1 По ДлинаНомера Цикл
		// поиск ведем с конца номера, до первого не цифрового символа
		ПозицияНеЦифровойСимвол = ДлинаНомера - инд + 1;
		
		Код = КодСимвола(НомерДок, ПозицияНеЦифровойСимвол);
		
		Если Код < 48 ИЛИ Код > 57 Тогда
			ТолькоЦифры = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТолькоЦифры Тогда
		Номер = НомерДок;
	ИначеЕсли ПозицияНеЦифровойСимвол < ДлинаНомера Тогда
		Номер = Сред(НомерДок, ПозицияНеЦифровойСимвол + 1);
	ИначеЕсли ПозицияНеЦифровойСимвол = ДлинаНомера Тогда
		Возврат НомерДок;
	КонецЕсли;
	
	Возврат Число(Номер);
	
КонецФункции

// Функция возвращает номер в формате обмена -
// Номер будет таким же, как при выводе на Печать
Функция ПолучитьНомерВФорматеОбмена(Документ, НомерДокумента)
	
	Номер = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(СокрЛП(НомерДокумента), Истина, Истина);
	
	Возврат Номер;
	
КонецФункции

// Функция формирует значение на основании типа переданного значения
//
Функция ПривестиЗначение(Значение)
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		
		Возврат СокрЛП(Значение);
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
		
		Возврат Формат(Значение, "ЧРД=.; ЧРГ=' '; ЧГ=0");
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
		
		Возврат Формат(Значение, "ДФ=dd.MM.yyyy");
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

//Процедура выводит на печать отчет о выгруженных документах
//
Процедура ПечатьОтчетаОВыгруженныхПлатежныхДокументах(ПолеОтчета, Источник, Организация, БанковскийСчет, НачПериода, КонПериода) Экспорт
	
	МакетОтчета = ПолучитьМакет("ОтчетОВыгруженныхПлатежныхДокументах");
	
	Шапка   = МакетОтчета.ПолучитьОбласть("Шапка");
	Строка  = МакетОтчета.ПолучитьОбласть("Строка");
	Подвал  = МакетОтчета.ПолучитьОбласть("Подвал");
	НазвОрг = МакетОтчета.ПолучитьОбласть("НазваниеОрганизации");
	
	НазвОрг.Параметры.НазваниеОрганизации = Организация.Наименование;
	ПолеОтчета.Вывести(НазвОрг);
	
	Шапка.Параметры.ИмяОтчета           = "Отчет о выгруженных платежных документах";
	Шапка.Параметры.ИмяСуммыСписания    = "На списание";
	Шапка.Параметры.ИмяСуммыПоступления = "На поступление";
	
	Если НачПериода = КонПериода Тогда
		Шапка.Параметры.ОписаниеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'по счету  %1 за %2'"), БанковскийСчет.НомерСчета, Формат(НачПериода, "ДЛФ=D"));
	Иначе
		Шапка.Параметры.ОписаниеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'по счету  %1 с %2 по %3'"), БанковскийСчет.НомерСчета, Формат(НачПериода, "ДЛФ=D"), Формат(КонПериода, "ДЛФ=D"));
	КонецЕсли;
	
	ПолеОтчета.Вывести(Шапка);
	
	Индекс      = 0;
	ИтогоСуммаП = 0;
	ИтогоСуммаР = 0;
	
	Для каждого СтрокаИсточника Из Источник Цикл
		
		Если СтрокаИсточника.Готовность <> -1 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаИсточника.ВидДокумента = "Платежное поручение" Тогда
			Строка.Параметры.Плательщик     = СтрокаИсточника.Организация;
			Строка.Параметры.ПлательщикСчет = СтрокаИсточника.ОрганизацияНомерСчета;
			Строка.Параметры.Получатель     = СтрокаИсточника.Контрагент;
			Строка.Параметры.ПолучательСчет = СтрокаИсточника.КонтрагентНомерСчета;
			Строка.Параметры.СуммаСписание  = СтрокаИсточника.СуммаДокумента;
			Строка.Параметры.СуммаПоступление = "";
			ИтогоСуммаР = ИтогоСуммаР + СтрокаИсточника.СуммаДокумента;
		Иначе
			Строка.Параметры.Плательщик     = СтрокаИсточника.Контрагент;
			Строка.Параметры.ПлательщикСчет = СтрокаИсточника.КонтрагентНомерСчета;
			Строка.Параметры.Получатель     = СтрокаИсточника.Организация;
			Строка.Параметры.ПолучательСчет = СтрокаИсточника.ОрганизацияНомерСчета;
			Строка.Параметры.СуммаСписание  = "";
			Строка.Параметры.СуммаПоступление = СтрокаИсточника.СуммаДокумента;
			ИтогоСуммаП = ИтогоСуммаП + СтрокаИсточника.СуммаДокумента;
		КонецЕсли;
		
		Строка.Параметры.Документ = СтрокаИсточника.Документ;
		Индекс = Индекс + 1;
		Строка.Параметры.Индекс   = Индекс;
		
		ПолеОтчета.Вывести(Строка);
		
	КонецЦикла;
	
	Подвал.Параметры.ИтогоСуммаП = ИтогоСуммаП;
	Подвал.Параметры.ИтогоСуммаР = ИтогоСуммаР;
	
	ПолеОтчета.Вывести(Подвал);
	
	ПолеОтчета.ОтображатьГруппировки = Ложь;
	ПолеОтчета.ОтображатьЗаголовки   = Ложь;
	ПолеОтчета.ОтображатьСетку       = Ложь;
	ПолеОтчета.ТолькоПросмотр        = Истина;
	
КонецПроцедуры

// Процедура печатает отчет о загруженных платежных документах
//
Процедура ПечатьОтчетаОЗагруженныхПлатежныхДокументах(ПолеОтчета, Источник, Организация, Импорт_РасчетныеСчета, Импорт_Заголовок) Экспорт
	
	ИмеетсяСекцияРасчСчет = Ложь;
	
	МакетОтчета = ПолучитьМакет("ОтчетОЗагруженныхПлатежныхДокументах");
	
	Шапка   = МакетОтчета.ПолучитьОбласть("Шапка");
	Строка  = МакетОтчета.ПолучитьОбласть("Строка");
	Подвал  = МакетОтчета.ПолучитьОбласть("Подвал");
	Остатки = МакетОтчета.ПолучитьОбласть("Остатки");
	НазвОрг = МакетОтчета.ПолучитьОбласть("НазваниеОрганизации");
	
	НазвОрг.Параметры.НазваниеОрганизации = Организация.Наименование;
	ПолеОтчета.Вывести(НазвОрг);
	
	КоличествоСтрок = Импорт_РасчетныеСчета.Количество();
	Для каждого СтрокаСчета Из Импорт_РасчетныеСчета Цикл
		Если СтрокаСчета.ИтоговаяСтрока И КоличествоСтрок > 1 Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(СтрокаСчета.ДатаНачала) Тогда
			
			Индекс                = 0;
			ИтогоСуммаП           = 0;
			ИтогоСуммаР           = 0;
			ИмеетсяСекцияРасчСчет = Истина;
			
			Шапка.Параметры.ИмяОтчета       = НСтр("ru = 'Отчет о загруженных документах'");
			
			Отбор = Новый Структура;
			Отбор.Вставить("СчетОрганизации", ПоискБанковскогоСчета(СтрокаСчета.РасчСчет));
			ОтборПоСчету = Источник.НайтиСтроки(Отбор);
			
			ДатаНачала = ПолучитьДатуИзСтроки(СтрокаСчета.ДатаНачала);
			
			Если ПустаяСтрока(СтрокаСчета.ДатаКонца) Тогда
				ДатаКонца = ПолучитьДатуИзСтроки(Импорт_Заголовок.ДАТАКОНЦА);
			Иначе
				ДатаКонца = ПолучитьДатуИзСтроки(СтрокаСчета.ДатаКонца);
			КонецЕсли;
			
			Если ДатаНачала = ДатаКонца Тогда
				Шапка.Параметры.ОписаниеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'по счету  %1 за %2'"), СтрокаСчета.РасчСчет, СтрокаСчета.ДатаНачала);
			Иначе
				Шапка.Параметры.ОписаниеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'по счету  %1 с %2 по %3'"),
					СтрокаСчета.РасчСчет,
					СтрокаСчета.ДатаНачала,
					?(ПустаяСтрока(СтрокаСчета.ДатаКонца), Импорт_Заголовок.ДАТАКОНЦА, СтрокаСчета.ДатаКонца));
			КонецЕсли;
			
			ПолеОтчета.Вывести(Шапка);
			
			Для каждого СтрокаИсточника Из Источник Цикл
				
				Если СтрокаИсточника.СуммаПоступило > 0
					И СтрокаИсточника.Поступило >= ДатаНачала И СтрокаИсточника.Поступило <= ДатаКонца Тогда
					
					Строка.Параметры.Контрагент       = ?(ПустаяСтрока(СтрокаИсточника.Плательщик1), СтрокаИсточника.Плательщик, СтрокаИсточника.Плательщик1);
					Строка.Параметры.Счет             = СтрокаИсточника.ПлательщикСчет;
					Строка.Параметры.Договор          = СтрокаИсточника.Договор;
					Строка.Параметры.СуммаПоступление = СтрокаИсточника.СуммаПоступило;
					Строка.Параметры.СуммаСписание    = "";
					Строка.Параметры.Дата             = СтрокаИсточника.Дата;
					ИтогоСуммаП                       = ИтогоСуммаП + СтрокаИсточника.СуммаПоступило;
					
				ИначеЕсли СтрокаИсточника.СуммаСписано > 0
					И СтрокаИсточника.Списано >= ДатаНачала И СтрокаИсточника.Списано <= ДатаКонца Тогда
					
					Строка.Параметры.Контрагент       = ?(ПустаяСтрока(СтрокаИсточника.Получатель1), СтрокаИсточника.Получатель, СтрокаИсточника.Получатель1);
					Строка.Параметры.Счет             = СтрокаИсточника.ПолучательСчет;
					Строка.Параметры.Договор          = СтрокаИсточника.Договор;
					Строка.Параметры.СуммаСписание    = СтрокаИсточника.СуммаСписано;
					Строка.Параметры.СуммаПоступление = "";
					Строка.Параметры.Дата             = СтрокаИсточника.Дата;
					ИтогоСуммаР                       = ИтогоСуммаР + СтрокаИсточника.СуммаСписано;
					
				Иначе
					Продолжить;
				КонецЕсли;
				
				Строка.Параметры.Номер             = СтрокаИсточника.Номер;
				Строка.Параметры.НазначениеПлатежа = СтрокаИсточника.НазначениеПлатежа;
				Индекс = Индекс + 1;
				
				ЕстьНезаполненныеРеквизиты = Ложь;
				
				Если Найти(СтрокаИсточника.Контрагент, "Не найден") > 0 Тогда
					Строка.Область("R1C7:R1C7").ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла; // стиль: Отрицательное число (красный 255,0,0)
					ЕстьНезаполненныеРеквизиты = Истина;
				КонецЕсли;
				
				Если Найти(СтрокаИсточника.СчетКонтрагента, "Не найден") > 0 Тогда
					Строка.Область("R2C7:R2C7").ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
					ЕстьНезаполненныеРеквизиты = Истина;
				КонецЕсли;
				
				Если Найти(СтрокаИсточника.Договор, "Не найден") > 0 Тогда
					Строка.Область("R3C7:R3C7").ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
					ЕстьНезаполненныеРеквизиты = Истина;
				КонецЕсли;
				
				Если СтрокаИсточника.НомерДокументаНекорректен Тогда
					Строка.Область("R1C4:R1C4").ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
					ЕстьНезаполненныеРеквизиты = Истина;
				КонецЕсли;
				
				Док = СтрокаИсточника.Документ;
				Если ЗначениеЗаполнено(Док) Тогда
					Строка.Параметры.Документ        = Док;
					Строка.Области.Строка.ЦветТекста = ЦветаСтиля.ЦветТекстаПоля; // стиль: Цвет редактирования (черный 0,0,0)
				Иначе
					Строка.Параметры.Документ        = "Не загружен";
				КонецЕсли;
				
				Если ЕстьНезаполненныеРеквизиты Тогда
					Строка.Область("R1C5:R1C5").ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
				КонецЕсли;
				
				Строка.Параметры.Индекс = Индекс;
				ПолеОтчета.Вывести(Строка);
				
			КонецЦикла;
			
			Подвал.Параметры.ИтогоСуммаП = ИтогоСуммаП;
			Подвал.Параметры.ИтогоСуммаР = ИтогоСуммаР;
			
			ПолеОтчета.Вывести(Подвал);
			
			Остатки.Параметры.Текст1 = "Остаток на начало " + СтрокаСчета.ДатаНачала + ":";
			Остатки.Параметры.Текст2 = "Остаток на конец "  + СтрокаСчета.ДатаКонца  + ":";
			
			Если НЕ ПустаяСтрока(СтрокаСчета.НачальныйОстаток)
					И НЕ ЕстьНеЦифры(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрокаСчета.НачальныйОстаток, ".", ""), "-", ""), ",", "")) Тогда
				Остатки.Параметры.Сумма1 = Формат(Число(СтрокаСчета.НачальныйОстаток), "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧРГ=,");
			Иначе
				Остатки.Параметры.Сумма1 = СтрокаСчета.НачальныйОстаток;
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(СтрокаСчета.КонечныйОстаток)
					И НЕ ЕстьНеЦифры(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрокаСчета.КонечныйОстаток, ".", ""), "-", ""), ",", "")) Тогда
				Остатки.Параметры.Сумма2 = Формат(Число(СтрокаСчета.КонечныйОстаток), "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧРГ=,");
			Иначе
				Остатки.Параметры.Сумма2 = СтрокаСчета.КонечныйОстаток;
			КонецЕсли;
			
			ПолеОтчета.Вывести(Остатки);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ИмеетсяСекцияРасчСчет Тогда
		
		Для каждого СтрокаСчета Из Импорт_РасчетныеСчета Цикл
			Если СтрокаСчета.ИтоговаяСтрока И КоличествоСтрок > 1 Тогда
				Продолжить;
			КонецЕсли;
			
			Индекс      = 0;
			ИтогоСуммаП = 0;
			ИтогоСуммаР = 0;
			
			Шапка.Параметры.ИмяОтчета = "Отчет о загруженных документах";
			Если Импорт_Заголовок.ДатаНачала = Импорт_Заголовок.ДатаКонца Тогда
				Шапка.Параметры.ОписаниеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'по счету  %1 за %2'"), СтрокаСчета.РасчСчет, Импорт_Заголовок.ДатаНачала);
			Иначе
				Шапка.Параметры.ОписаниеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'по счету  %1 с %2 по %3'"), СтрокаСчета.РасчСчет, Импорт_Заголовок.ДатаНачала, Импорт_Заголовок.ДатаКонца);
			КонецЕсли;
			
			ПолеОтчета.Вывести(Шапка);
			
			Отбор = Новый Структура;
			Отбор.Вставить("СчетОрганизации", ПоискБанковскогоСчета(СтрокаСчета.РасчСчет));
			ОтборПоСчету = Источник.НайтиСтроки(Отбор);
			
			Для каждого СтрокаИсточника Из Источник Цикл
				
				Если СтрокаИсточника.СуммаПоступило > 0 Тогда
					
					Строка.Параметры.Контрагент       = ?(ПустаяСтрока(СтрокаИсточника.Плательщик1), СтрокаИсточника.Плательщик, СтрокаИсточника.Плательщик1);
					Строка.Параметры.Счет	          = СтрокаИсточника.ПлательщикСчет;
					Строка.Параметры.Договор          = СтрокаИсточника.Договор;
					Строка.Параметры.СуммаПоступление = СтрокаИсточника.СуммаПоступило;
					Строка.Параметры.СуммаСписание    = "";
					Строка.Параметры.Дата             = СтрокаИсточника.Дата;
					ИтогоСуммаП                       = ИтогоСуммаП + СтрокаИсточника.СуммаПоступило;
					
				ИначеЕсли СтрокаИсточника.СуммаСписано > 0  Тогда
					
					Строка.Параметры.Контрагент       = ?(ПустаяСтрока(СтрокаИсточника.Получатель1),СтрокаИсточника.Получатель,СтрокаИсточника.Получатель1);
					Строка.Параметры.Счет             = СтрокаИсточника.ПолучательСчет;
					Строка.Параметры.Договор          = СтрокаИсточника.Договор;
					Строка.Параметры.СуммаСписание    = СтрокаИсточника.СуммаСписано;
					Строка.Параметры.СуммаПоступление = "";
					Строка.Параметры.Дата             = СтрокаИсточника.Дата;
					ИтогоСуммаР                       = ИтогоСуммаР + СтрокаИсточника.СуммаСписано;
					
				Иначе
					
					Продолжить;
					
				КонецЕсли;
				
				Строка.Параметры.Номер = СтрокаИсточника.Номер;
				Строка.Параметры.НазначениеПлатежа = СтрокаИсточника.НазначениеПлатежа;
				Индекс = Индекс + 1;
				
				ЕстьНезаполненныеРеквизиты = Ложь;
				
				Если Найти(СтрокаИсточника.Контрагент, "Не найден") > 0 Тогда
					Строка.Область("R1C7:R1C7").ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла; // стиль: Отрицательное число (красный 255,0,0)
					ЕстьНезаполненныеРеквизиты = Истина;
				КонецЕсли;
				
				Если Найти(СтрокаИсточника.СчетКонтрагента, "Не найден") > 0 Тогда
					Строка.Область("R2C7:R2C7").ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
					ЕстьНезаполненныеРеквизиты = Истина;
				КонецЕсли;
				
				Если Найти(СтрокаИсточника.Договор, "Не найден") > 0 Тогда
					Строка.Область("R3C7:R3C7").ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
					ЕстьНезаполненныеРеквизиты = Истина;
				КонецЕсли;
				
				Если СтрокаИсточника.НомерДокументаНекорректен Тогда
					Строка.Область("R1C4:R1C4").ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
					ЕстьНезаполненныеРеквизиты = Истина;
				КонецЕсли;
				
				Док = СтрокаИсточника.Документ;
				Если ЗначениеЗаполнено(Док) Тогда
					Строка.Параметры.Документ        = Док;
					Строка.Области.Строка.ЦветТекста = ЦветаСтиля.ЦветТекстаПоля; // стиль: Цвет редактирования (черный 0,0,0)
				Иначе
					Строка.Параметры.Документ        = "Не загружен";
				КонецЕсли;
				
				Если ЕстьНезаполненныеРеквизиты Тогда
					Строка.Область("R1C5:R1C5").ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
				КонецЕсли;
				
				Строка.Параметры.Индекс = Индекс;
				ПолеОтчета.Вывести(Строка);
				
			КонецЦикла;
			
			Подвал.Параметры.ИтогоСуммаП = ИтогоСуммаП;
			Подвал.Параметры.ИтогоСуммаР = ИтогоСуммаР;
			
			ПолеОтчета.Вывести(Подвал);
			
			Остатки.Параметры.Текст1 = "Остаток на начало " + Импорт_Заголовок.ДатаНачала + ":";
			Остатки.Параметры.Текст2 = "Остаток на конец "  + Импорт_Заголовок.ДатаКонца  + ":";
			Остатки.Параметры.Сумма1 = "";
			Остатки.Параметры.Сумма2 = "";
			ПолеОтчета.Вывести(Остатки);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПолеОтчета.ОтображатьГруппировки = Ложь;
	ПолеОтчета.ОтображатьЗаголовки   = Ложь;
	ПолеОтчета.ОтображатьСетку       = Ложь;
	ПолеОтчета.ТолькоПросмотр        = Истина;
	
КонецПроцедуры // ПечатьОтчетаОЗагруженныхПлатежныхДокументах

//////////////////////////////////////////////////////////

Процедура ДобавитьСлужебныеКолонки(ДокументыДляИмпорта)
	
	// Если колонки уже существуют, то ничего не делаем
	Если ДокументыДляИмпорта.Колонки.Найти("ЭтоПлатежноеПоручение") <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДокументыДляИмпорта.Колонки.Добавить("ЕстьДатаПлатежа",       Новый ОписаниеТипов("Булево"));
	ДокументыДляИмпорта.Колонки.Добавить("ЭтоПлатежноеПоручение", Новый ОписаниеТипов("Булево"));
	ДокументыДляИмпорта.Колонки.Добавить("НайтиКонтрагента",      Новый ОписаниеТипов("Булево"));
	ДокументыДляИмпорта.Колонки.Добавить("ВидОперацииДокумента",  Новый ОписаниеТипов("Строка"));
	ДокументыДляИмпорта.Колонки.Добавить("ИННКонтрагента",        Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(12)));
	ДокументыДляИмпорта.Колонки.Добавить("КППКонтрагента",        Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(9)));
	ДокументыДляИмпорта.Колонки.Добавить("ИмяКонтрагента",        Новый ОписаниеТипов("Строка"));
	
КонецПроцедуры

Функция ПолучитьСписокСвоихСчетов(Организация)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БанковскиеСчета.Ссылка КАК Ссылка,
	|	БанковскиеСчета.НомерСчета КАК НомерСчета,
	|	БанковскиеСчета.Банк.Код КАК БИК
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Владелец = &Организация";
	
	УстановитьПривилегированныйРежим(Истина);
	СписокБановскихСчетов = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	СписокБановскихСчетов.Индексы.Добавить("НомерСчета");
	СписокБановскихСчетов.Индексы.Добавить("НомерСчета, БИК");
	
	Возврат СписокБановскихСчетов;
	
КонецФункции

Функция ПолучитьТаблицуСвязей()
	
	ТаблицаСвязейВидаОперацииВидДоговора = Новый ТаблицаЗначений;
	ТаблицаСвязейВидаОперацииВидДоговора.Колонки.Добавить("ВидОперации",
		Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийПоступлениеДенежныхСредств, ПеречислениеСсылка.ВидыОперацийСписаниеДенежныхСредств"));
	ТаблицаСвязейВидаОперацииВидДоговора.Колонки.Добавить("ВидДоговора", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДоговоровКонтрагентов"));
	ТаблицаСвязейВидаОперацииВидДоговора.Колонки.Добавить("Приоритет",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	
	СтрокаСвязей = ТаблицаСвязейВидаОперацииВидДоговора.Добавить();
	СтрокаСвязей.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя;
	СтрокаСвязей.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
	СтрокаСвязей.Приоритет   = 0;
	СтрокаСвязей = ТаблицаСвязейВидаОперацииВидДоговора.Добавить();
	СтрокаСвязей.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя;
	СтрокаСвязей.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером;
	СтрокаСвязей.Приоритет   = 1;
	СтрокаСвязей = ТаблицаСвязейВидаОперацииВидДоговора.Добавить();
	СтрокаСвязей.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя;
	СтрокаСвязей.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку;
	СтрокаСвязей.Приоритет   = 1;
	СтрокаСвязей = ТаблицаСвязейВидаОперацииВидДоговора.Добавить();
	СтрокаСвязей.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя;
	СтрокаСвязей.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
	СтрокаСвязей.Приоритет   = 2;
	СтрокаСвязей = ТаблицаСвязейВидаОперацииВидДоговора.Добавить();
	СтрокаСвязей.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя;
	СтрокаСвязей.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку;
	СтрокаСвязей.Приоритет   = 2;
	СтрокаСвязей.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика;
	СтрокаСвязей.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
	СтрокаСвязей.Приоритет   = 0;
	СтрокаСвязей = ТаблицаСвязейВидаОперацииВидДоговора.Добавить();
	СтрокаСвязей.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика;
	СтрокаСвязей.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
	СтрокаСвязей.Приоритет   = 1;
	СтрокаСвязей = ТаблицаСвязейВидаОперацииВидДоговора.Добавить();
	СтрокаСвязей.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика;
	СтрокаСвязей.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку;
	СтрокаСвязей.Приоритет   = 1;
	СтрокаСвязей = ТаблицаСвязейВидаОперацииВидДоговора.Добавить();
	СтрокаСвязей.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика;
	СтрокаСвязей.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером;
	СтрокаСвязей.Приоритет   = 2;
	СтрокаСвязей = ТаблицаСвязейВидаОперацииВидДоговора.Добавить();
	СтрокаСвязей.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика;
	СтрокаСвязей.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку;
	СтрокаСвязей.Приоритет   = 2;
	СтрокаСвязей.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам;
	СтрокаСвязей.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
	СтрокаСвязей.Приоритет   = 0;
	СтрокаСвязей.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
	СтрокаСвязей.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
	СтрокаСвязей.Приоритет   = 0;
	СтрокаСвязей.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты;
	СтрокаСвязей.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
	СтрокаСвязей.Приоритет   = 0;
	СтрокаСвязей.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты;
	СтрокаСвязей.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
	СтрокаСвязей.Приоритет   = 0;
	СтрокаСвязей.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам;
	СтрокаСвязей.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
	СтрокаСвязей.Приоритет   = 0;
	
	СтрокаСвязей = ТаблицаСвязейВидаОперацииВидДоговора.Добавить();
	СтрокаСвязей.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику;
	СтрокаСвязей.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
	СтрокаСвязей.Приоритет   = 0;
	СтрокаСвязей = ТаблицаСвязейВидаОперацииВидДоговора.Добавить();
	СтрокаСвязей.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику;
	СтрокаСвязей.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
	СтрокаСвязей.Приоритет   = 1;
	СтрокаСвязей = ТаблицаСвязейВидаОперацииВидДоговора.Добавить();
	СтрокаСвязей.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику;
	СтрокаСвязей.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку;
	СтрокаСвязей.Приоритет   = 1;
	СтрокаСвязей = ТаблицаСвязейВидаОперацииВидДоговора.Добавить();
	СтрокаСвязей.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику;
	СтрокаСвязей.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером;
	СтрокаСвязей.Приоритет   = 2;
	СтрокаСвязей = ТаблицаСвязейВидаОперацииВидДоговора.Добавить();
	СтрокаСвязей.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику;
	СтрокаСвязей.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку;
	СтрокаСвязей.Приоритет   = 2;
	СтрокаСвязей = ТаблицаСвязейВидаОперацииВидДоговора.Добавить();
	СтрокаСвязей.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю;
	СтрокаСвязей.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
	СтрокаСвязей.Приоритет   = 0;
	СтрокаСвязей = ТаблицаСвязейВидаОперацииВидДоговора.Добавить();
	СтрокаСвязей.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю;
	СтрокаСвязей.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером;
	СтрокаСвязей.Приоритет   = 1;
	СтрокаСвязей = ТаблицаСвязейВидаОперацииВидДоговора.Добавить();
	СтрокаСвязей.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю;
	СтрокаСвязей.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку;
	СтрокаСвязей.Приоритет   = 1;
	СтрокаСвязей = ТаблицаСвязейВидаОперацииВидДоговора.Добавить();
	СтрокаСвязей.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю;
	СтрокаСвязей.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
	СтрокаСвязей.Приоритет   = 2;
	СтрокаСвязей = ТаблицаСвязейВидаОперацииВидДоговора.Добавить();
	СтрокаСвязей.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю;
	СтрокаСвязей.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку;
	СтрокаСвязей.Приоритет   = 2;
	СтрокаСвязей = ТаблицаСвязейВидаОперацииВидДоговора.Добавить();
	СтрокаСвязей.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам;
	СтрокаСвязей.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
	СтрокаСвязей.Приоритет   = 0;
	СтрокаСвязей = ТаблицаСвязейВидаОперацииВидДоговора.Добавить();
	СтрокаСвязей.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
	СтрокаСвязей.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
	СтрокаСвязей.Приоритет   = 0;
	
	Возврат ТаблицаСвязейВидаОперацииВидДоговора;
	
КонецФункции

//////////////////////////////////////////////////////////

Процедура ОпределитьСсылочныеДанные(КешСвойствДокументов, ДокументыДляИмпорта, СтруктураДанныхИмпорта,
		Организация, БанковскийСчет, Импорт_Заголовок, ДеревоКонтрагентов, НастройкиПоУмолчаниюДляДокументов,
		СоздаватьНенайденныеЭлементы, ЗамещатьВыбранныеВручнуюЭлементы, СтекОповещений) Экспорт
	
	НомерСтроки = 0;
	НомерСчета  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, "НомерСчета");
	
	СписокБанковскихСчетовОрганизации = ПолучитьСписокСвоихСчетов(Организация);
	
	ДобавитьСлужебныеКолонки(ДокументыДляИмпорта);
	
	// Формируем объектные структуры данных.
	Для каждого СтрокаДокумента Из ДокументыДляИмпорта Цикл
		// Последовательно обрабатываем каждую загруженную строку.
		
		// Распознаем реквизиты.
		// Если в файле находятся выписки пл. документов по нескольким счетам, то распознаем и отображаем
		// только те, которые выгружены по указанному банковскому счету.
		Если СтрокаДокумента.ПлательщикСчет = НомерСчета ИЛИ СтрокаДокумента.ПолучательСчет = НомерСчета Тогда
			
			ПодготовитьДанныеВСтрокедокумента(СтрокаДокумента,
				Организация, БанковскийСчет, НомерСчета, СписокБанковскихСчетовОрганизации, НастройкиПоУмолчаниюДляДокументов);
			
			НомерСтроки = НомерСтроки + 1;
			СтрокаДокумента.НомерСтроки = НомерСтроки;
			// Для каждого реквизита (= колонка) надо проверить на пустое значение.
			Для каждого КолонкаИмпорта Из ДокументыДляИмпорта.Колонки Цикл
				ЗначениеСтроки = СтрокаДокумента[КолонкаИмпорта.Имя];
				Если ТипЗнч(ЗначениеСтроки) = Тип("Строка") И ПустаяСтрока(ЗначениеСтроки) Тогда
					ПроверитьНаПустоеЗначениеИмпорта(КешСвойствДокументов,
						СтрокаДокумента, КолонкаИмпорта.Имя, СтруктураДанныхИмпорта[КолонкаИмпорта.Имя]);
				КонецЕсли;
			КонецЦикла;
			
			Если ТипЗнч(СтрокаДокумента.Контрагент) = Тип("Строка") ИЛИ
				ТипЗнч(СтрокаДокумента.СчетКонтрагента) = Тип("Строка") ИЛИ
				ТипЗнч(СтрокаДокумента.Договор) = Тип("Строка") Тогда
				
				// Добавляем реквизиты в табличную часть для дальнейшего использования.
				СписокНенайденных(СтрокаДокумента, ДеревоКонтрагентов);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаДокумента.Документ) Тогда
				Если СтрокаДокумента.Проведен Тогда
					СтрокаДокумента.СостояниеДокумента = 1;
				Иначе
					СтрокаДокумента.СостояниеДокумента = 0;
				КонецЕсли;
			Иначе
				СтрокаДокумента.СостояниеДокумента     = 3;
			КонецЕсли;
			
		Иначе
			// Остальные помечаем для последующего удаления.
			СтрокаДокумента.НомерСтроки = 0;
		КонецЕсли;
	КонецЦикла;
	
	РаспознатьДанные(ДокументыДляИмпорта, ДеревоКонтрагентов,
		Организация, БанковскийСчет, НомерСчета, Импорт_Заголовок, СписокБанковскихСчетовОрганизации,
		СоздаватьНенайденныеЭлементы, ЗамещатьВыбранныеВручнуюЭлементы, СтекОповещений);
	
	// Удалим ненужные строки из таблицы.
	Количество = ДокументыДляИмпорта.Количество() - 1;
	Для Ном = 0 По Количество Цикл
		Если ДокументыДляИмпорта[Количество - Ном].НомерСтроки = 0 Тогда
			ДокументыДляИмпорта.Удалить(Количество - Ном);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовитьДанныеВСтрокедокумента(СтрокаДокумента,
		Организация, БанковскийСчет, НомерСчета, СписокБанковскихСчетовОрганизации, НастройкиПоУмолчаниюДляДокументов)
	
	//1) Определим вид платежа – входящий или исходящий
	ПлатежноеПоручение  = ВРЕГ(СтрЗаменить(СокрЛП(СтрокаДокумента.Операция), " ", "")) = "ПЛАТЕЖНОЕПОРУЧЕНИЕ";
	ПлатежноеТребование = ВРЕГ(СтрЗаменить(СокрЛП(СтрокаДокумента.Операция), " ", "")) = "ПЛАТЕЖНОЕТРЕБОВАНИЕ";
	
	Исходящий           = СтрокаДокумента.ПлательщикСчет = НомерСчета;
	СтрокаДокумента.Исходящий = Исходящий;
	
	//_______________________________________________________________________________________________________________
	//2) Определим вид документа в программе
	ВидДокумента = ?(Исходящий, "СписаниеСРасчетногоСчета",    "ПоступлениеНаРасчетныйСчет");
	ИмяДокумента = ?(Исходящий, "Списание с расчетного счета", "Поступление на расчетный счет");
	
	СтрокаДокумента.ВидДокумента = ВидДокумента;
	СтрокаДокумента.ИмяДокумента = ИмяДокумента;
	РеквизитСчета = ?(Исходящий, "СчетОрганизации", "СчетКонтрагента");
	
	//_______________________________________________________________________________________________________________
	//3) Найдем ранее загруженный (введенный вручную) документ.
	//Реквизиты для поиска: Вид документа, Дата, Номер, Номер счета.
	
	// Распознаем дату документа
	ВсеРеквизитыПоискаЕсть   = Ложь;
	ДокументНайден           = Ложь;
	СтрокаДокумента.НомерДок = СтрокаДокумента.Номер;
	
	ДатаПлДокумента  = ПолучитьДатуИзСтроки(СтрокаДокумента.Дата);
	Если НЕ ПустаяСтрока(СтрокаДокумента.ДатаСписано) Тогда
		ДатаИзСтроки = ПолучитьДатуИзСтроки(СтрокаДокумента.ДатаСписано);
	ИначеЕсли НЕ ПустаяСтрока(СтрокаДокумента.ДатаПоступило) Тогда
		ДатаИзСтроки = ПолучитьДатуИзСтроки(СтрокаДокумента.ДатаПоступило);
	Иначе
		ДатаИзСтроки = ДатаПлДокумента;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаИзСтроки) Тогда
		СтрокаДокумента.ЕстьДатаПлатежа  = Истина;
		СтрокаДокумента.ДатаПлПоручения  = ДатаПлДокумента;
		СтрокаДокумента.ДатаДок          = ДатаИзСтроки;
		
		СтрокаДокумента.ЭтоПлатежноеПоручение = Исходящий И ПлатежноеПоручение;
	КонецЕсли;
	
	//_______________________________________________________________________________________________________________
	//4) Определяем вид операции документа
	ЭтоКомиссия = Ложь;
	СтрокаДокумента.СчетКонтрагентаДляПоиска = ?(Исходящий, СтрокаДокумента.ПолучательСчет, СтрокаДокумента.ПлательщикСчет);
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.ВидОперации) Тогда
		Если Исходящий Тогда
			Если ПлатежиВБюджетКлиентСервер.РеквизитЗаполнен(СтрокаДокумента.СтатусСоставителя) Тогда
				ВидОперацииДокумента = УчетДенежныхСредствКлиентСервер.ВидОперацииДокументаПеречисленияВБюджет(СтрокаДокумента.ПоказательКБК);
			ИначеЕсли ЭтоКомиссияБанка(СтрокаДокумента) Тогда
				ЭтоКомиссия = Истина;
				ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание;
			ИначеЕсли СписокБанковскихСчетовОрганизации.НайтиСтроки(
					Новый Структура("НомерСчета, БИК", СтрокаДокумента.ПолучательСчет, СтрокаДокумента.ПолучательБИК)).Количество() > 0 Тогда
				ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет;
			Иначе
				ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику;
			КонецЕсли;
		Иначе // входящий платеж
			ВидОперацииДокумента = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя;
		КонецЕсли;
		
		СтрокаДокумента.ВидОперации = ВидОперацииДокумента;
	Иначе
		ВидОперацииДокумента = СтрокаДокумента.ВидОперации;
	КонецЕсли;
	
	СтрокаДокумента.ВидОперацииДокумента = ВидОперацииДокумента;
	
	//_______________________________________________________________________________________________________________
	//5) Определяем банковский счет организации
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.СчетОрганизации) Тогда
		СтрокаДокумента.СчетОрганизации = БанковскийСчет;
	КонецЕсли;
	
	СтрокаДокумента.НайтиКонтрагента = НЕ (ТипЗнч(СтрокаДокумента.Контрагент) <> Тип("Строка") И ЗначениеЗаполнено(СтрокаДокумента.Контрагент));
	
	//_______________________________________________________________________________________________________________
	//6) Определяем банковский счет контрагента
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.СчетКонтрагента) ИЛИ ТипЗнч(СтрокаДокумента.СчетКонтрагента) = Тип("Строка")
		И (Найти(СтрокаДокумента.СчетКонтрагента, НСтр("ru = 'Не загружен'")) > 0
		ИЛИ Найти(СтрокаДокумента.СчетКонтрагента, НСтр("ru = 'Не найден'")) > 0) Тогда
		
		Если ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
			МассивСобственныхСчетов = СписокБанковскихСчетовОрганизации.НайтиСтроки(
				Новый Структура("НомерСчета, БИК", СтрокаДокумента.ПолучательСчет, СтрокаДокумента.ПолучательБИК));
			Если МассивСобственныхСчетов.Количество() > 0 Тогда
				СтрокаДокумента.СчетКонтрагента = МассивСобственныхСчетов[0].Ссылка;
			КонецЕсли;
		Иначе
			СтрокаДокумента.НайтиКонтрагента = Истина;
			Если СтрокаДокумента.Исходящий Тогда
				Если ТипЗнч(СтрокаДокумента.Контрагент) <> Тип("Строка") И ЗначениеЗаполнено(СтрокаДокумента.Контрагент) Тогда
					Если ТипЗнч(СтрокаДокумента.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
						РеквизитыКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
							СтрокаДокумента.Контрагент, "Наименование, ИНН, КПП");
						СтрокаДокумента.ИмяКонтрагента = СокрЛП(РеквизитыКонтрагента.Наименование);
						СтрокаДокумента.ИННКонтрагента = СокрЛП(РеквизитыКонтрагента.ИНН);
						СтрокаДокумента.КППКонтрагента = СокрЛП(РеквизитыКонтрагента.КПП);
					Иначе
						РеквизитыКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
							СтрокаДокумента.Контрагент, "ФИО, ИНН");
						СтрокаДокумента.ИмяКонтрагента = СокрЛП(РеквизитыКонтрагента.ФИО);
						СтрокаДокумента.ИННКонтрагента = СокрЛП(РеквизитыКонтрагента.ИНН);
						СтрокаДокумента.КППКонтрагента = СокрЛП("");
					КонецЕсли;
				Иначе
					СтрокаДокумента.ИННКонтрагента  = СокрЛП(СтрокаДокумента.ПолучательИНН);
					СтрокаДокумента.КППКонтрагента  = СокрЛП(СтрокаДокумента.ПолучательКПП);
					Если СтрокаДокумента.Получатель1 <> "" Тогда
						СтрокаДокумента.ИмяКонтрагента = СтрокаДокумента.Получатель1;
					Иначе
						СтрокаДокумента.ИмяКонтрагента = СтрокаДокумента.Получатель;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Если ТипЗнч(СтрокаДокумента.Контрагент) <> Тип("Строка") И ЗначениеЗаполнено(СтрокаДокумента.Контрагент) Тогда
					РеквизитыКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
						СтрокаДокумента.Контрагент, "Наименование, ИНН, КПП");
					СтрокаДокумента.ИмяКонтрагента = СокрЛП(РеквизитыКонтрагента.Наименование);
					СтрокаДокумента.ИННКонтрагента = СокрЛП(РеквизитыКонтрагента.ИНН);
					СтрокаДокумента.КППКонтрагента = СокрЛП(РеквизитыКонтрагента.КПП);
				Иначе
					СтрокаДокумента.ИННКонтрагента  = СокрЛП(СтрокаДокумента.ПлательщикИНН);
					СтрокаДокумента.КППКонтрагента  = СокрЛП(СтрокаДокумента.ПлательщикКПП);
					Если СтрокаДокумента.Плательщик1 <> "" Тогда
						СтрокаДокумента.ИмяКонтрагента = СтрокаДокумента.Плательщик1;
					Иначе
						СтрокаДокумента.ИмяКонтрагента = СтрокаДокумента.Плательщик;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаДокумента.ВидОперации = УточнитьВидОперацииДокументаПоКорсчету(ВидОперацииДокумента, СтрокаДокумента);
	СтрокаДокумента.ВидОперацииДокумента = ВидОперацииДокумента;
	
	//Проверка на кооректность БИКа плательщика/получателя
	Если ЗначениеЗаполнено(СтрокаДокумента.ПлательщикБИК) Тогда
		Длина = СтрДлина(СтрокаДокумента.ПлательщикБИК);
		Если    Длина = 9 И Лев(СтрокаДокумента.ПлательщикБИК, 2) <> "04"
			ИЛИ Длина = 8 И Лев(СтрокаДокумента.ПлательщикБИК, 1) <> "4"
			ИЛИ Длина < 8 Тогда
			ДобавитьЗамечание(СтрокаДокумента, 1, "Не корректный БИК (" + СтрокаДокумента.ПлательщикБИК + ") плательщика");
		ИначеЕсли Длина = 8 Тогда
			СтрокаДокумента.ПлательщикБИК = "0" + СтрокаДокумента.ПлательщикБИК;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДокумента.ПолучательБИК) Тогда
		Длина = СтрДлина(СтрокаДокумента.ПолучательБИК);
		Если    Длина = 9 И Лев(СтрокаДокумента.ПолучательБИК, 2) <> "04"
			ИЛИ Длина = 8 И Лев(СтрокаДокумента.ПолучательБИК, 1) <> "4"
			ИЛИ Длина < 8 Тогда
			ДобавитьЗамечание(СтрокаДокумента, 1, "Не корректный БИК (" + СтрокаДокумента.ПолучательБИК + ") получателя");
		ИначеЕсли Длина = 8 Тогда
			СтрокаДокумента.ПолучательБИК = "0" + СтрокаДокумента.ПолучательБИК;
		КонецЕсли;
		
	КонецЕсли;
	
	//_______________________________________________________________________________________________________________
	//7) Определим контрагента
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.Контрагент) ИЛИ ТипЗнч(СтрокаДокумента.Контрагент) = Тип("Строка")
		И (Найти(СтрокаДокумента.Контрагент, НСтр("ru = 'Не загружен'")) > 0
		ИЛИ Найти(СтрокаДокумента.Контрагент, НСтр("ru = 'Не найден'")) > 0) Тогда
		
		Если ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
			СтрокаДокумента.Контрагент = Организация;
		КонецЕсли;
		
	КонецЕсли;
	
	//_______________________________________________________________________________________________________________
	//8) Определим договор контрагента
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.Договор)
		ИЛИ ТипЗнч(СтрокаДокумента.Договор) = Тип("Строка") Тогда
		
		Если ЭтоВидОперацииБезДоговора(ВидОперацииДокумента)
			ИЛИ УчетДенежныхСредствКлиентСервер.ОпределитьВидДоговораСКонтрагентом(ВидОперацииДокумента).Количество() = 0 Тогда
			СтрокаДокумента.Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
	
	//_______________________________________________________________________________________________________________
	//9) Определим Статью ДДС по умолчанию
	Если ВидОперацииДокумента <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога // будет подгружена из настроек реквизитов уплаты налогов
		И ВидОперацииДокумента <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация Тогда
		Если ЗначениеЗаполнено(СтрокаДокумента.СтатьяДДС) Тогда
			Если ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет
				И ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаДокумента.СтатьяДДС,
					"ВидДвиженияДенежныхСредств")) Тогда // у внутренних перемещений не должно быть заполненно ВДДС
				СтрокаДокумента.СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
			КонецЕсли;
		Иначе
			Если ЭтоКомиссия Тогда
				СтрокаДокумента.СтатьяДДС = НастройкиПоУмолчаниюДляДокументов["КомиссияБанка"].СтатьяДДС;
			ИначеЕсли ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику
				ИЛИ ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП Тогда
				СтрокаДокумента.СтатьяДДС = НастройкиПоУмолчаниюДляДокументов["ОплатаТруда"].СтатьяДДС;
			ИначеЕсли ВидОперацииДокумента <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
				СтрокаДокумента.СтатьяДДС = НастройкиПоУмолчаниюДляДокументов[ИмяДокумента].СтатьяДДС;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//_______________________________________________________________________________________________________________
	//10) Определим сумму
	
	// Преобразуем из строки в число
	Буфер = СокрЛП(СтрЗаменить(СтрокаДокумента.Сумма, " ", ""));
	
	Если НЕ ЕстьНеЦифры(СтрЗаменить(СтрЗаменить(СтрЗаменить(Буфер, ".", ""), "-", ""), ",", "")) И Буфер <> "" Тогда
		Сумма = Число(Буфер);
		
		Если Сумма < 0 Тогда
			Сумма = - Сумма;
		КонецЕсли;
		
		СтрокаДокумента.СуммаДокумента = Сумма;
		Если Исходящий Тогда
			СтрокаДокумента.СуммаСписано   = Сумма;
		Иначе
			СтрокаДокумента.СуммаПоступило = Сумма;
		КонецЕсли;
	Иначе
		ДобавитьЗамечание(СтрокаДокумента, 4, "Указана неверная сумма документа(" + Буфер + ")");
	КонецЕсли;
	
	//_______________________________________________________________________________________________________________
	//11) Определим очередность платежа
	
	// Преобразуем из строки в число
	Буфер = СокрЛП(СтрокаДокумента.Очередность);
	Если Буфер <> "" И НЕ ЕстьНеЦифры(Буфер) Тогда
		СтрокаДокумента.ОчередностьПлатежа = Число(Буфер);
	Иначе
		СтрокаДокумента.ОчередностьПлатежа = 0;
	КонецЕсли;
	
	//_______________________________________________________________________________________________________________
	//12) Определим ДатаОтсылкиДок(для Платежного требования выставленное)
	
	// Преобразуем в дату из строки, если не пустая
	Если НЕ ПустаяСтрока(СтрокаДокумента.ДатаОтсылкиДок) Тогда
		СтрокаДокумента.ДатаОтсылки = ПолучитьДатуИзСтроки(СтрокаДокумента.ДатаОтсылкиДок);
	КонецЕсли;
	
	//_______________________________________________________________________________________________________________
	//13) Определим ПоказательДатыДок(для Платежного поручения исходящего при перечислении налогов)
	
	// Преобразуем в дату из строки, если не пустая
	Если НЕ ПустаяСтрока(СтрокаДокумента.ПоказательДаты) Тогда
		СтрокаДокумента.ПоказательДатыДок = ПолучитьДатуИзСтроки(СтрокаДокумента.ПоказательДаты, Ложь);
		Если НЕ ЗначениеЗаполнено(СтрокаДокумента.ПоказательДатыДок) Тогда
			СтрокаДокумента.ПоказательДатыДок = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	//_______________________________________________________________________________________________________________
	//14) ДатаСписано и ДатаПоступило, ДатаПроведения
	// Преобразуем в дату из строки, если не пустая
	Если СтрокаДокумента.СуммаСписано <> 0 Тогда
		СтрокаДокумента.Списано = ПолучитьДатуИзСтроки(СтрокаДокумента.ДатаСписано, Ложь);
		Если ЗначениеЗаполнено(СтрокаДокумента.Списано) Тогда
			СтрокаДокумента.ДатаПроведения = СтрокаДокумента.Списано;
		КонецЕсли;
	Иначе
		СтрокаДокумента.Списано = '00010101';
	КонецЕсли;
	
	// Преобразуем в дату из строки, если не пустая
	Если СтрокаДокумента.СуммаПоступило <> 0 Тогда
		СтрокаДокумента.Поступило = ПолучитьДатуИзСтроки(СтрокаДокумента.ДатаПоступило, Ложь);
		Если ЗначениеЗаполнено(СтрокаДокумента.Поступило) Тогда
			СтрокаДокумента.ДатаПроведения = СтрокаДокумента.Поступило;
		КонецЕсли;
	Иначе
		СтрокаДокумента.Поступило = '00010101';
	КонецЕсли;
	
	//Если НазначениеПлатежа пустое, формируем его из НазначениеПлатежа1...НазначениеПлатежа6.
	Если ПустаяСтрока(СтрокаДокумента.НазначениеПлатежа) Тогда
		
		СтрокаДокумента.НазначениеПлатежа = СтрокаДокумента.НазначениеПлатежа1;
		Для й = 2 По 6 Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаДокумента["НазначениеПлатежа" + й]) Тогда
				Прервать;
			КонецЕсли;
			СтрокаДокумента.НазначениеПлатежа = СтрокаДокумента.НазначениеПлатежа + Символы.ПС + СтрокаДокумента["НазначениеПлатежа" + й];
		КонецЦикла;
		
	КонецЕсли;
	
	//_______________________________________________________________________________________________________________
	//15) Определим вид контрагента
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.Контрагент) ИЛИ ТипЗнч(СтрокаДокумента.Контрагент) = Тип("Строка")
		И (Найти(СтрокаДокумента.Контрагент, НСтр("ru = 'Не загружен'")) > 0
		ИЛИ Найти(СтрокаДокумента.Контрагент, НСтр("ru = 'Не найден'")) > 0) Тогда
		
			СтрокаДокумента.ВидКонтрагента = ВидКонтрагентаПоВидуОперации(СтрокаДокумента.ВидОперации);
		
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьДанныеВСтрокедокумента

Функция ВидКонтрагентаПоВидуОперации(ВидОперации) Экспорт
	
	Если УчетДенежныхСредствКлиентСервер.РасчетыСФизическимиЛицами(ВидОперации) Тогда
		ВидКонтрагента = "Сотрудник";
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет") Тогда
		ВидКонтрагента = "Организация";
	Иначе
		ВидКонтрагента = "Контрагент";
	КонецЕсли;
	
	Возврат ВидКонтрагента;
	
КонецФункции

Процедура РаспознатьДанные(ДокументыДляИмпорта, ДеревоКонтрагентов,
		Организация, БанковскийСчет, НомерСчета, Импорт_Заголовок, СписокБанковскихСчетовОрганизации,
		СоздаватьНенайденныеЭлементы, ЗамещатьВыбранныеВручнуюЭлементы, СтекОповещений)
	
	Если ДокументыДляИмпорта.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ВалютаВзаиморасчетов = ОбщегоНазначения.ПолучитьЗначениеРеквизита(БанковскийСчет, "ВалютаДенежныхСредств");
	Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
		ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета;
	КонецЕсли;
	
	//Если документ уже есть в ИБ, то берем все данные из него.
	СоответствиеРеквизитовПлатежки = Новый Соответствие;
	
	МассивСтрокСКонтрагентами = Новый Массив;
	НайденныеКонтрагенты      = Новый Соответствие;
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", Организация);
	
	МассивПлатежек = ДокументыДляИмпорта.НайтиСтроки(
		Новый Структура("Исходящий, ЭтоПлатежноеПоручение", Истина, Истина));
	Если МассивПлатежек.Количество() > 0 Тогда
		ТаблицаПлатежек = ДокументыДляИмпорта.Скопировать(МассивПлатежек,
			"НомерСтроки, ДатаПлПоручения, ПолучательСчет");
		
		Запрос.УстановитьПараметр("СчетОрганизации", БанковскийСчет);
		Запрос.УстановитьПараметр("ТаблицаПлатежек", ТаблицаПлатежек);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаПлатежек.НомерСтроки,
		|	ТаблицаПлатежек.ДатаПлПоручения КАК ДатаПлПоручения,
		|	ТаблицаПлатежек.ПолучательСчет
		|ПОМЕСТИТЬ ВТ_ТаблицаПлатежек
		|ИЗ
		|	&ТаблицаПлатежек КАК ТаблицаПлатежек
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДатаПлПоручения,
		|	ТаблицаПлатежек.ПолучательСчет";
		
		Запрос.Выполнить();
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Док.Ссылка,
		|	Док.Дата,
		|	Док.Номер,
		|	ВЫБОР
		|		КОГДА Док.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет)
		|			ТОГДА Док.Организация
		|		ИНАЧЕ Док.Контрагент
		|	КОНЕЦ КАК Контрагент,
		|	Док.СчетКонтрагента,
		|	Док.ДоговорКонтрагента,
		|	ЕСТЬNULL(Док.ДоговорКонтрагента.ВидДоговора, НЕОПРЕДЕЛЕНО) КАК ВидДоговора,
		|	Док.СтавкаНДС,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(Док.ДокументОснование) = ТИП(Документ.СписаниеСРасчетногоСчета)
		|				И Док.ДокументОснование <> ЗНАЧЕНИЕ(Документ.СписаниеСРасчетногоСчета.ПустаяСсылка)
		|			ТОГДА Док.ДокументОснование
		|		ИНАЧЕ ЕСТЬNULL(СписаниеСРасчетногоСчета.Ссылка, НЕОПРЕДЕЛЕНО)
		|	КОНЕЦ КАК ДокументОснование,
		|	Док.ВидОперации,
		|	Док.ПеречислениеВБюджет,
		|	Док.ВидПеречисленияВБюджет,
		|	Док.СтатьяДвиженияДенежныхСредств,
		|	Док.ВидНалоговогоОбязательства КАК ВидНалоговогоОбязательства,
		|	ТаблицаПлатежек.НомерСтроки КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(Док.ДокументОснование) = ТИП(Документ.СписаниеСРасчетногоСчета)
		|				И Док.ДокументОснование <> ЗНАЧЕНИЕ(Документ.СписаниеСРасчетногоСчета.ПустаяСсылка)
		|			ТОГДА ВЫРАЗИТЬ(Док.ДокументОснование КАК Документ.СписаниеСРасчетногоСчета).Проведен
		|		ИНАЧЕ СписаниеСРасчетногоСчета.Проведен
		|	КОНЕЦ КАК ДокументОснованиеПроведен,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(Док.ДокументОснование) = ТИП(Документ.СписаниеСРасчетногоСчета)
		|				И Док.ДокументОснование <> ЗНАЧЕНИЕ(Документ.СписаниеСРасчетногоСчета.ПустаяСсылка)
		|			ТОГДА ВЫРАЗИТЬ(Док.ДокументОснование КАК Документ.СписаниеСРасчетногоСчета).НомерВходящегоДокумента
		|		ИНАЧЕ СписаниеСРасчетногоСчета.НомерВходящегоДокумента
		|	КОНЕЦ КАК НомерВходящегоДокумента,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(Док.ДокументОснование) = ТИП(Документ.СписаниеСРасчетногоСчета)
		|				И Док.ДокументОснование <> ЗНАЧЕНИЕ(Документ.СписаниеСРасчетногоСчета.ПустаяСсылка)
		|			ТОГДА ВЫРАЗИТЬ(Док.ДокументОснование КАК Документ.СписаниеСРасчетногоСчета).ДатаВходящегоДокумента
		|		ИНАЧЕ СписаниеСРасчетногоСчета.ДатаВходящегоДокумента
		|	КОНЕЦ КАК ДатаВходящегоДокумента,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(Док.ДокументОснование) = ТИП(Документ.СписаниеСРасчетногоСчета)
		|				И Док.ДокументОснование <> ЗНАЧЕНИЕ(Документ.СписаниеСРасчетногоСчета.ПустаяСсылка)
		|			ТОГДА ВЫРАЗИТЬ(Док.ДокументОснование КАК Документ.СписаниеСРасчетногоСчета).ВидОперации
		|		ИНАЧЕ СписаниеСРасчетногоСчета.ВидОперации
		|	КОНЕЦ КАК ДокументОснованиеВидОперации,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(Док.ДокументОснование) = ТИП(Документ.СписаниеСРасчетногоСчета)
		|				И Док.ДокументОснование <> ЗНАЧЕНИЕ(Документ.СписаниеСРасчетногоСчета.ПустаяСсылка)
		|			ТОГДА ВЫРАЗИТЬ(Док.ДокументОснование КАК Документ.СписаниеСРасчетногоСчета).СчетКонтрагента
		|		ИНАЧЕ СписаниеСРасчетногоСчета.СчетКонтрагента
		|	КОНЕЦ КАК ДокументОснованиеСчетКонтрагента,
		|	ВЫБОР
		|		КОГДА Док.Проведен
		|			ТОГДА 0
		|		КОГДА Док.ПометкаУдаления
		|			ТОГДА 2
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Приоритет
		|ИЗ
		|	ВТ_ТаблицаПлатежек КАК ТаблицаПлатежек
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение КАК Док
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
		|			ПО (ТИПЗНАЧЕНИЯ(СписаниеСРасчетногоСчета.ДокументОснование) = ТИП(Документ.ПлатежноеПоручение))
		|				И Док.Ссылка = СписаниеСРасчетногоСчета.ДокументОснование
		|		ПО ТаблицаПлатежек.ПолучательСчет = Док.СчетКонтрагента.НомерСчета
		|			И (ТаблицаПлатежек.ДатаПлПоручения = НАЧАЛОПЕРИОДА(Док.Дата, ДЕНЬ))
		|ГДЕ
		|	Док.Организация = &Организация
		|	И Док.СчетОрганизации = &СчетОрганизации
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки,
		|	Приоритет";
		
		ДокументыДляИмпорта.Индексы.Добавить("НомерСтроки");
		
		Результат = Запрос.Выполнить();
		Выборка   = Результат.Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
			РеквизитыПлатежки = Новый Структура("Ссылка, Контрагент, СчетКонтрагента, ДоговорКонтрагента,
				|ВидДоговора, СтавкаНДС, ВидОперации, ПеречислениеВБюджет, ВидПеречисленияВБюджет, ВидНалоговогоОбязательства,
				|ДокументОснование, ДокументОснованиеПроведен, ДокументОснованиеВидОперации, ДокументОснованиеСчетКонтрагента,
				|НомерВходящегоДокумента, ДатаВходящегоДокумента");
			
			СтрокаДокумента = ДокументыДляИмпорта.Найти(Выборка.НомерСтроки, "НомерСтроки");
			Пока Выборка.Следующий() Цикл
				НомерДок     = СокрЛП(Выборка.Номер);
				ВыборкаНомер = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Выборка.Номер, Истина, Истина);
				
				НомераРавны = ВыборкаНомер = СтрокаДокумента.НомерДок;
				Если НЕ НомераРавны Тогда
					ЧислоНомерДок        = ПолучитьЧислоИзСтроки(НомерДок);
					ЧислоВСтрокеНомерДок = ПолучитьЧислоИзСтроки(СтрокаДокумента.НомерДок);
					НомераРавны          = ЧислоНомерДок = ЧислоВСтрокеНомерДок;
				КонецЕсли;
				
				Если НомераРавны Тогда
					ЗаполнитьЗначенияСвойств(РеквизитыПлатежки, Выборка);
					СтрокаДокумента.ДокументОснование = РеквизитыПлатежки.Ссылка;
					Если ЗначениеЗаполнено(РеквизитыПлатежки.ДокументОснование) И
						ТипЗнч(РеквизитыПлатежки.ДокументОснование) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
						
						Документ = РеквизитыПлатежки.ДокументОснование;
						СтрокаДокумента.Документ           = Документ;
						СтрокаДокумента.Проведен           = РеквизитыПлатежки.ДокументОснованиеПроведен;
						СтрокаДокумента.Номер              = РеквизитыПлатежки.НомерВходящегоДокумента;
						СтрокаДокумента.ДатаДок            = РеквизитыПлатежки.ДатаВходящегоДокумента;
						СтрокаДокумента.ВидОперации        = РеквизитыПлатежки.ДокументОснованиеВидОперации;
						СтрокаДокумента.СчетКонтрагента    = РеквизитыПлатежки.ДокументОснованиеСчетКонтрагента;
						СтрокаДокумента.СостояниеДокумента = ?(СтрокаДокумента.Проведен, 1, 0);
						
						Если Документ.РасшифровкаПлатежа.Количество() > 0 Тогда
							СтрокаДокумента.СтатьяДДС      = Документ.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств;
							СтрокаДокумента.Договор        = Документ.РасшифровкаПлатежа[0].ДоговорКонтрагента;
							СтрокаДокумента.СтавкаНДС      = Документ.РасшифровкаПлатежа[0].СтавкаНДС;
						КонецЕсли;
						
						Если Документ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
							СтрокаДокумента.Контрагент     = Документ.Организация;
						Иначе
							СтрокаДокумента.Контрагент     = Документ.Контрагент;
						КонецЕсли;
						
						СтрокаДокумента.ВидНалоговогоОбязательства = РеквизитыПлатежки.ВидНалоговогоОбязательства;
					Иначе
						ЗаполнитьЗначенияСвойств(СтрокаДокумента, РеквизитыПлатежки,, "ДокументОснование");
						СтрокаДокумента.Договор   = Выборка.ДоговорКонтрагента;
						СтрокаДокумента.СтатьяДДС = Выборка.СтатьяДвиженияДенежныхСредств;
					КонецЕсли;
					
					СоответствиеРеквизитовПлатежки.Вставить(Выборка.НомерСтроки, РеквизитыПлатежки);
					
					Если ЗначениеЗаполнено(СтрокаДокумента.Контрагент) Тогда
						НайденныеКонтрагенты.Вставить(Выборка.НомерСтроки, СтрокаДокумента.Контрагент);
					КонецЕсли;
					
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	//_______________________________________________________________________________________________________________
	//3) Найдем ранее загруженный (введенный вручную) документ.
	//Реквизиты для поиска: Вид документа, Дата, Номер, Номер счета.
	
	МассивПлатежейПолучено = ДокументыДляИмпорта.НайтиСтроки(
		Новый Структура("ЕстьДатаПлатежа, ВидДокумента", Истина, "ПоступлениеНаРасчетныйСчет"));
	МассивПлатежейСписано = ДокументыДляИмпорта.НайтиСтроки(
		Новый Структура("ЕстьДатаПлатежа, ВидДокумента", Истина, "СписаниеСРасчетногоСчета"));
	Если МассивПлатежейПолучено.Количество() > 0 ИЛИ МассивПлатежейСписано.Количество() > 0 Тогда
		Если МассивПлатежейПолучено.Количество() > 0 Тогда
			МассивСтрок = МассивПлатежейПолучено;
			Если МассивПлатежейСписано.Количество() > 0 Тогда
				Для инд = 0 По МассивПлатежейСписано.ВГраница() Цикл
					МассивСтрок.Добавить(МассивПлатежейСписано[инд]);
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли МассивПлатежейСписано.Количество() > 0 Тогда
			МассивСтрок = МассивПлатежейСписано;
		КонецЕсли;
		
		ТаблицаСтрок = ДокументыДляИмпорта.Скопировать(МассивСтрок,
			"НомерСтроки, НомерДок, Номер, НомерДокументаНекорректен, ДатаДок, ДатаПлПоручения,
			|ПолучательСчет, ПолучательИНН, ПлательщикСчет, ПлательщикИНН,
			|СчетКонтрагентаДляПоиска, Исходящий, Документ");
		
		Если Импорт_Заголовок = Неопределено Тогда
			НачалоИнтервалаЗагрузки = '00010101';
			КонецИнтервалаЗагрузки  = '00010101';
		Иначе
			НачалоИнтервалаЗагрузки = ПолучитьДатуИзСтроки(Импорт_Заголовок.ДАТАНАЧАЛА);
			КонецИнтервалаЗагрузки  = ?(ПустаяСтрока(Импорт_Заголовок.ДАТАКОНЦА), '00010101',
				КонецДня(ПолучитьДатуИзСтроки(Импорт_Заголовок.ДАТАКОНЦА)));
		КонецЕсли;
		
		// Документы в выписке часто не укладываются в отбор, указанный в файле
		ТаблицаДат = ТаблицаСтрок.Скопировать(, "ДатаДок, ДатаПлПоручения");
		ТаблицаДат.Сортировать("ДатаДок");
		МаксимальнаяДата = ТаблицаДат[ТаблицаДат.Количество() - 1].ДатаДок;
		МинимальнаяДата  = МаксимальнаяДата;
		Для каждого СтрокаТаблицы Из ТаблицаДат Цикл
			Если СтрокаТаблицы.ДатаДок = '00010101' Тогда
				Продолжить;
			КонецЕсли;
			
			Если МинимальнаяДата <= СтрокаТаблицы.ДатаДок Тогда
				Прервать;
			Иначе
				МинимальнаяДата = СтрокаТаблицы.ДатаДок;
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаДат.Сортировать("ДатаПлПоручения");
		МаксимальнаяДатаПлПоручения = ТаблицаДат[ТаблицаДат.Количество() - 1].ДатаПлПоручения;
		МинимальнаяДатаПлПоручения  = МаксимальнаяДатаПлПоручения;
		Для каждого СтрокаТаблицы Из ТаблицаДат Цикл
			Если СтрокаТаблицы.ДатаПлПоручения = '00010101' Тогда
				Продолжить;
			КонецЕсли;
			
			Если МинимальнаяДатаПлПоручения <= СтрокаТаблицы.ДатаПлПоручения Тогда
				Прервать;
			Иначе
				МинимальнаяДатаПлПоручения = СтрокаТаблицы.ДатаПлПоручения;
			КонецЕсли;
		КонецЦикла;
		
		НачалоИнтервалаЗагрузки = Мин(МинимальнаяДата,   МинимальнаяДатаПлПоручения);
		КонецИнтервалаЗагрузки  = Макс(МаксимальнаяДата, МаксимальнаяДатаПлПоручения);
	КонецЕсли;
	
	// При наличии нескольких документов, предпочтение отдается первому с совпадающим номером счета
	ЗапросПоискаДокумента = Новый Запрос;
	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПлатежныеДокументы.Ссылка КАК Ссылка,
	|	ПлатежныеДокументы.Проведен КАК Проведен,
	|	ПлатежныеДокументы.НомерВходящегоДокумента КАК Номер,
	|	ПлатежныеДокументы.Дата КАК Дата,
	|	НАЧАЛОПЕРИОДА(ПлатежныеДокументы.Дата, ДЕНЬ) КАК ДатаНачалоДня,
	|	НАЧАЛОПЕРИОДА(ПлатежныеДокументы.ДатаВходящегоДокумента, ДЕНЬ) КАК ДатаНачалоДняПл,
	|	ЕСТЬNULL(ПлатежныеДокументы.СчетКонтрагента.НомерСчета, """") КАК КонтрагентНомерСчета,
	|	ПлатежныеДокументы.Контрагент.ИНН КАК КонтрагентИНН,
	|	ПлатежныеДокументы.Контрагент.КПП КАК КонтрагентКПП,
	|	ПлатежныеДокументы.Организация КАК Организация,
	|	ЛОЖЬ КАК Исходящий,
	|	ВЫБОР
	|		КОГДА ПлатежныеДокументы.Проведен
	|			ТОГДА 0
	|		КОГДА ПлатежныеДокументы.ПометкаУдаления
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	Документ.ПоступлениеНаРасчетныйСчет КАК ПлатежныеДокументы
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(ПлатежныеДокументы.Дата, ДЕНЬ) МЕЖДУ &НачалоИнтервалаЗагрузки И &КонецИнтервалаЗагрузки
	|	И ПлатежныеДокументы.Организация = &Организация
	|	И ПлатежныеДокументы.СчетОрганизации = &СчетОрганизации";
	
	ТекстЗапроса = "";
	Если МассивПлатежейПолучено.Количество() > 0 Тогда
		ТекстЗапроса = ШаблонТекстаЗапроса;
	КонецЕсли;
	
	Если МассивПлатежейСписано.Количество() > 0 Тогда
		ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "ПоступлениеНаРасчетныйСчет", "СписаниеСРасчетногоСчета");
		ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "ЛОЖЬ КАК Исходящий", "ИСТИНА КАК Исходящий");
		Если ТекстЗапроса <> "" Тогда
			ШаблонТекстаЗапроса = "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|" +
			СтрЗаменить(ШаблонТекстаЗапроса, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ");
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|" + ШаблонТекстаЗапроса;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	КонтрагентНомерСчета УБЫВ,
		|	КонтрагентИНН УБЫВ,
		|	Приоритет";
		
		ЗапросПоискаДокумента.Текст = ТекстЗапроса;
		
		ЗапросПоискаДокумента.УстановитьПараметр("НачалоИнтервалаЗагрузки", НачалоИнтервалаЗагрузки);
		ЗапросПоискаДокумента.УстановитьПараметр("КонецИнтервалаЗагрузки",  КонецДня(КонецИнтервалаЗагрузки));
		ЗапросПоискаДокумента.УстановитьПараметр("Организация",             Организация);
		ЗапросПоискаДокумента.УстановитьПараметр("СчетОрганизации",         БанковскийСчет);
		
		ТаблицаДокументовИзБазы = ЗапросПоискаДокумента.Выполнить().Выгрузить();
		ТаблицаДокументовИзБазы.Индексы.Добавить("ДатаНачалоДня, Исходящий");
		
		Для каждого СтрокаДокумента Из ТаблицаСтрок Цикл
			// часть строк заполнили из платежек, их обрабатывать не нужно
			Если СоответствиеРеквизитовПлатежки.Получить(СтрокаДокумента.НомерСтроки) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			РеквизитыПлатежки = Новый Структура("Ссылка, Контрагент, СчетКонтрагента, ДоговорКонтрагента,
				|ВидДоговора, СтавкаНДС, ПеречислениеВБюджет, ВидПеречисленияВБюджет,
				|ДокументОснование");
			
			ДлинаНомера = СтрДлина(СтрокаДокумента.НомерДок);
			ДлинаНомера = ?(ДлинаНомера < 6, 6, ДлинаНомера);
			
			МассивСтрокПоДню = ТаблицаДокументовИзБазы.НайтиСтроки(Новый Структура("ДатаНачалоДня, Исходящий",
				СтрокаДокумента.ДатаДок, СтрокаДокумента.Исходящий));
			ИндексСтрок = Новый Соответствие;
			Для инд = 0 По МассивСтрокПоДню.ВГраница() Цикл
				ИндексСтрок.Вставить(ТаблицаДокументовИзБазы.Индекс(МассивСтрокПоДню[инд]), МассивСтрокПоДню[инд]);
			КонецЦикла;
			
			Если МассивСтрокПоДню.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ИННДляПоискаДок  = ?(СтрокаДокумента.Исходящий, СтрокаДокумента.ПолучательИНН, СтрокаДокумента.ПлательщикИНН);
			
			ДокументНайден = Ложь;
			КоличествоДок  = 0;
			ПодходящийДокументСНезаполненнымиКлючевымиРеквизитами = Неопределено;
			Для инд = 0 По МассивСтрокПоДню.ВГраница() Цикл
				Результат    = МассивСтрокПоДню[инд];
				ВыборкаНомер = СокрЛ(Прав(СокрП(Результат.Номер), ДлинаНомера));
				
				ЕстьРеквизитДляПроверки = ЗначениеЗаполнено(Результат.КонтрагентНомерСчета) ИЛИ ЗначениеЗаполнено(Результат.КонтрагентИНН);
				РСРавны  = Результат.КонтрагентНомерСчета = СтрокаДокумента.СчетКонтрагентаДляПоиска
					ИЛИ НЕ ЗначениеЗаполнено(Результат.КонтрагентНомерСчета);
				ИННРавны = Результат.КонтрагентИНН = ИННДляПоискаДок
					ИЛИ НЕ ЗначениеЗаполнено(Результат.КонтрагентИНН);
				
				Если ВыборкаНомер = СтрокаДокумента.НомерДок И
					(ЗначениеЗаполнено(СтрокаДокумента.ДатаПлПоручения) И ЗначениеЗаполнено(Результат.ДатаНачалоДняПл)
					И СтрокаДокумента.ДатаПлПоручения = Результат.ДатаНачалоДняПл
					ИЛИ НЕ ЗначениеЗаполнено(СтрокаДокумента.ДатаПлПоручения)
					ИЛИ НЕ ЗначениеЗаполнено(Результат.ДатаНачалоДняПл)) Тогда
					
					Если ЕстьРеквизитДляПроверки И РСРавны И ИННРавны Тогда
						
						Если КоличествоДок = 0 Тогда
							СтрокаИсходногоДокумента = ДокументыДляИмпорта.Найти(СтрокаДокумента.НомерСтроки, "НомерСтроки");
							СтрокаИсходногоДокумента.Документ = Результат.Ссылка;
							СтрокаИсходногоДокумента.Проведен = Результат.Проведен;
							СтрокаИсходногоДокумента.НомерДок = Результат.Номер;
							СтрокаИсходногоДокумента.ДатаДок  = Результат.Дата;
							
							ДокументНайден = ЗначениеЗаполнено(СтрокаИсходногоДокумента.Документ);
						КонецЕсли;
						
						КоличествоДок = КоличествоДок + 1;
					ИначеЕсли НЕ ЕстьРеквизитДляПроверки И ПодходящийДокументСНезаполненнымиКлючевымиРеквизитами = Неопределено Тогда
						ПодходящийДокументСНезаполненнымиКлючевымиРеквизитами = Результат;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
			Если КоличествоДок = 0 И ПодходящийДокументСНезаполненнымиКлючевымиРеквизитами <> Неопределено Тогда
				СтрокаИсходногоДокумента = ДокументыДляИмпорта.Найти(СтрокаДокумента.НомерСтроки, "НомерСтроки");
				СтрокаИсходногоДокумента.Документ = ПодходящийДокументСНезаполненнымиКлючевымиРеквизитами.Ссылка;
				СтрокаИсходногоДокумента.Проведен = ПодходящийДокументСНезаполненнымиКлючевымиРеквизитами.Проведен;
				СтрокаИсходногоДокумента.НомерДок = ПодходящийДокументСНезаполненнымиКлючевымиРеквизитами.Номер;
				СтрокаИсходногоДокумента.ДатаДок  = ПодходящийДокументСНезаполненнымиКлючевымиРеквизитами.Дата;
				ДокументНайден = Истина;
			ИначеЕсли КоличествоДок > 1 Тогда
				ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В инф.базе найдено несколько (%1) соответствующих документов.'"), КоличествоДок);
				ДобавитьЗамечание(СтрокаИсходногоДокумента, 1, ОписаниеОшибки);
			КонецЕсли;
			
			//Если документ уже есть в ИБ, то берем все данные из него,
			// кроме случая, когда определение ссылочных данных происходит в процессе загрузки
			// - т.к. в этом случае в строках таблицы могут содержаться значения выбранные пользователем;
			// замещение не делаем только для тех реквизитов, которые не приходят к нам в файле обмена:
			//   ВидОперации, СтатьяДДС, ДоговорКонтрагента
			Если ДокументНайден Тогда
				Документ = СтрокаИсходногоДокумента.Документ;
				СтрокаИсходногоДокумента.ВидОперации =
					?(НЕ ЗамещатьВыбранныеВручнуюЭлементы И ЗначениеЗаполнено(СтрокаИсходногоДокумента.ВидОперации),
						СтрокаИсходногоДокумента.ВидОперации,
						Документ.ВидОперации);
				Если Документ.РасшифровкаПлатежа.Количество() > 0 Тогда
					СтрокаИсходногоДокумента.СтатьяДДС =
						?((НЕ ЗамещатьВыбранныеВручнуюЭлементы ИЛИ НЕ ЗначениеЗаполнено(Документ.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств))
							И ЗначениеЗаполнено(СтрокаИсходногоДокумента.СтатьяДДС),
							СтрокаИсходногоДокумента.СтатьяДДС,
							Документ.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);
					Если КоличествоДок > 0 Тогда
						СтрокаИсходногоДокумента.Договор = ?(НЕ ЗамещатьВыбранныеВручнуюЭлементы
							И ТипЗнч(СтрокаИсходногоДокумента.Договор) <> Тип("Строка") И ЗначениеЗаполнено(СтрокаИсходногоДокумента.Договор),
								СтрокаИсходногоДокумента.Договор,
								Документ.РасшифровкаПлатежа[0].ДоговорКонтрагента);
					КонецЕсли;
				Иначе
					СтрокаИсходногоДокумента.СтатьяДДС =
						?((НЕ ЗамещатьВыбранныеВручнуюЭлементы ИЛИ НЕ ЗначениеЗаполнено(Документ.СтатьяДвиженияДенежныхСредств))
							И ЗначениеЗаполнено(СтрокаИсходногоДокумента.СтатьяДДС),
							СтрокаИсходногоДокумента.СтатьяДДС,
							Документ.СтатьяДвиженияДенежныхСредств);
				КонецЕсли;
				
				Если КоличествоДок > 0 Тогда
					СтрокаИсходногоДокумента.СчетКонтрагента = Документ.СчетКонтрагента;
				КонецЕсли;
				
				СтрокаИсходногоДокумента.СчетОрганизации     = БанковскийСчет;
				СтрокаИсходногоДокумента.СостояниеДокумента  = ?(СтрокаИсходногоДокумента.Проведен, 1, 0);
				
				Если Документ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
					СтрокаИсходногоДокумента.Контрагент = Документ.Организация;
				Иначе
					Если КоличествоДок > 0 Тогда
						СтрокаИсходногоДокумента.Контрагент = Документ.Контрагент;
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаИсходногоДокумента.Контрагент) Тогда
					НайденныеКонтрагенты.Вставить(СтрокаИсходногоДокумента.НомерСтроки, СтрокаИсходногоДокумента.Контрагент);
				КонецЕсли;
				
				СтрокаИсходногоДокумента.ДокументОснование = Документ.ДокументОснование;
				РеквизитыПлатежки.Ссылка = Документ.ДокументОснование;
				ЗаполнитьЗначенияСвойств(РеквизитыПлатежки, Документ);
				СоответствиеРеквизитовПлатежки.Вставить(СтрокаИсходногоДокумента.НомерСтроки, РеквизитыПлатежки);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	//_______________________________________________________________________________________________________________
	//6 и 7) Определим контрагента и р/с контрагента
	
	МассивИНН            = Новый Массив;
	МассивНомеровСчетов  = Новый Массив;
	МассивСтрокКУдалению = Новый Массив;
	ТаблицаКонтрагентов  = ДокументыДляИмпорта.Скопировать(,
		"НомерСтроки, СчетКонтрагентаДляПоиска, ИННКонтрагента, КППКонтрагента, ИмяКонтрагента, НайтиКонтрагента");
	
	Для каждого СтрокаДокумента Из ТаблицаКонтрагентов Цикл
		СтруктураСвязиКонтрагентДокумент = СоответствиеРеквизитовПлатежки.Получить(СтрокаДокумента.НомерСтроки);
		Если СтруктураСвязиКонтрагентДокумент <> Неопределено И ЗначениеЗаполнено(СтруктураСвязиКонтрагентДокумент.Контрагент) Тогда
			МассивСтрокКУдалению.Добавить(СтрокаДокумента);
		ИначеЕсли НЕ СтрокаДокумента.НайтиКонтрагента Тогда
			МассивСтрокКУдалению.Добавить(СтрокаДокумента);
		ИначеЕсли ПустаяСтрока(СтрокаДокумента.СчетКонтрагентаДляПоиска)
			И ПустаяСтрока(СтрокаДокумента.ИННКонтрагента)
			И ПустаяСтрока(СтрокаДокумента.ИмяКонтрагента) Тогда
			МассивСтрокКУдалению.Добавить(СтрокаДокумента);
		Иначе
			Если НЕ ПустаяСтрока(СтрокаДокумента.ИННКонтрагента) Тогда
				МассивИНН.Добавить(СтрокаДокумента.ИННКонтрагента)
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(СтрокаДокумента.СчетКонтрагентаДляПоиска) Тогда
				МассивНомеровСчетов.Добавить(СтрокаДокумента.СчетКонтрагентаДляПоиска)
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для инд = 0 По МассивСтрокКУдалению.ВГраница() Цикл
		ТаблицаКонтрагентов.Удалить(МассивСтрокКУдалению[инд]);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ТаблицаКонтрагентов", ТаблицаКонтрагентов);
	Запрос.УстановитьПараметр("СписокИНН",           ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивИНН));
	Запрос.УстановитьПараметр("СписокСчетов",        ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивНомеровСчетов));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаКонтрагентов.НомерСтроки КАК НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаКонтрагентов.СчетКонтрагентаДляПоиска КАК СТРОКА(20)) КАК СчетКонтрагентаДляПоиска,
	|	ВЫРАЗИТЬ(ТаблицаКонтрагентов.ИННКонтрагента КАК СТРОКА(12)) КАК ИННКонтрагента,
	|	ВЫРАЗИТЬ(ТаблицаКонтрагентов.КППКонтрагента КАК СТРОКА(9)) КАК КППКонтрагента,
	|	ВЫРАЗИТЬ(ТаблицаКонтрагентов.ИмяКонтрагента КАК СТРОКА(100)) КАК ИмяКонтрагента
	|ПОМЕСТИТЬ ТаблицаКонтрагентов
	|ИЗ
	|	&ТаблицаКонтрагентов КАК ТаблицаКонтрагентов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИННКонтрагента,
	|	СчетКонтрагентаДляПоиска";
	
	Запрос.Выполнить();
	
	Запрос.УстановитьПараметр("ИскатьФизическихЛиц", Истина);
	Запрос.УстановитьПараметр("ИскатьКонтрагентов",  Истина);
	
	Запрос.Текст = ТекстЗапросаПоискаКонтрагентов();
	
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КонтрагентыСгруппированныеПоПриоритетам.Контрагент КАК Контрагент,
	|	КонтрагентыСгруппированныеПоПриоритетам.ИНН КАК ИНН,
	|	КонтрагентыСгруппированныеПоПриоритетам.КПП КАК КПП,
	|	КонтрагентыСгруппированныеПоПриоритетам.Приоритет КАК Приоритет,
	|	КонтрагентыСгруппированныеПоПриоритетам.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	КонтрагентыСгруппированныеПоПриоритетам КАК КонтрагентыСгруппированныеПоПриоритетам
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтрагентыСгруппированныеПоПриоритетам.Контрагент КАК Контрагент,
	|	ВТ_Приоритет3.БанковскийСчет КАК БанковскийСчет,
	|	ВТ_Приоритет3.НомерСчета КАК НомерСчета,
	|	КонтрагентыСгруппированныеПоПриоритетам.Приоритет КАК Приоритет,
	|	КонтрагентыСгруппированныеПоПриоритетам.НомерСтроки КАК НомерСтроки,
	|	ВЫРАЗИТЬ(ВТ_Приоритет3.БанковскийСчет КАК Справочник.БанковскиеСчета).Владелец КАК Владелец
	|ИЗ
	|	КонтрагентыСгруппированныеПоПриоритетам КАК КонтрагентыСгруппированныеПоПриоритетам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Приоритет3 КАК ВТ_Приоритет3
	|		ПО КонтрагентыСгруппированныеПоПриоритетам.Контрагент = ВТ_Приоритет3.Контрагент
	|			И КонтрагентыСгруппированныеПоПриоритетам.НомерСтроки = ВТ_Приоритет3.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаКонтрагентов";
	
	Пакет = Запрос.ВыполнитьПакет();
	Выборка = Пакет[0].Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
		СтрокаДокумента = ДокументыДляИмпорта.Найти(Выборка.НомерСтроки, "НомерСтроки");
		// учтем дубли с одинаковым приоритетом
		НайденоКонтрагентов = 0;
		ТекущийПриоритет    = 999;
		Пока Выборка.Следующий() Цикл
			Если ТекущийПриоритет < Выборка.Приоритет Тогда
				Прервать;
			КонецЕсли;
			
			РасчетыСФизическимиЛицами = УчетДенежныхСредствКлиентСервер.РасчетыСФизическимиЛицами(СтрокаДокумента.ВидОперации);
			
			Если РасчетыСФизическимиЛицами И ТипЗнч(Выборка.Контрагент) <> Тип("СправочникСсылка.ФизическиеЛица") Тогда
				Продолжить;
			ИначеЕсли НЕ РасчетыСФизическимиЛицами И ТипЗнч(Выборка.Контрагент) <> Тип("СправочникСсылка.Контрагенты") Тогда
				Продолжить;
			КонецЕсли;
				
			ИННКонтрагента      = Выборка.ИНН;
			ТекущийПриоритет    = Выборка.Приоритет;
			НайденоКонтрагентов = НайденоКонтрагентов + 1;
			Если НайденоКонтрагентов = 1 Тогда
				СтрокаДокумента.Контрагент = Выборка.Контрагент;
				МассивСтрокСКонтрагентами.Добавить(СтрокаДокумента);
				НайденныеКонтрагенты.Вставить(Выборка.НомерСтроки, Выборка.Контрагент);
			КонецЕсли;
		КонецЦикла;
		
		Если НайденоКонтрагентов > 1 И НЕ ПустаяСтрока(ИННКонтрагента) Тогда
			ДобавитьЗамечание(СтрокаДокумента, 2, "В инф.базе найдено несколько("
				+ НайденоКонтрагентов + ") контрагентов с одинаковым ИНН ("
				+ ИННКонтрагента + ").");
		КонецЕсли;
	КонецЦикла;
	
	//_______________________________________________________________________________________________________________
	// банковский счет контрагента
	Выборка = Пакет[1].Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
		СтрокаДокумента = ДокументыДляИмпорта.Найти(Выборка.НомерСтроки, "НомерСтроки");
		// учтем дубли с одинаковым приоритетом
		НайденоРС = 0;
		ТекущийПриоритет = 999;
		Пока Выборка.Следующий() Цикл
			Владелец = НайденныеКонтрагенты.Получить(Выборка.НомерСтроки);
			Если Владелец = Неопределено
				ИЛИ Владелец <> Выборка.Владелец Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТекущийПриоритет < Выборка.Приоритет Тогда
				Прервать;
			КонецЕсли;
			
			РасчетыСФизическимиЛицами = УчетДенежныхСредствКлиентСервер.РасчетыСФизическимиЛицами(СтрокаДокумента.ВидОперации);
			
			Если РасчетыСФизическимиЛицами И ТипЗнч(Выборка.Владелец) <> Тип("СправочникСсылка.ФизическиеЛица") Тогда
				Продолжить;
			ИначеЕсли НЕ РасчетыСФизическимиЛицами И ТипЗнч(Выборка.Владелец) <> Тип("СправочникСсылка.Контрагенты") Тогда
				Продолжить;
			КонецЕсли;
			
			НомерСчета       = Выборка.НомерСчета;
			ТекущийПриоритет = Выборка.Приоритет;
			НайденоРС        = НайденоРС + 1;
			Если НайденоРС = 1 Тогда
				СтрокаДокумента.СчетКонтрагента = Выборка.БанковскийСчет;
			КонецЕсли;
		КонецЦикла;
		
		Если НайденоРС > 1 Тогда
			ДобавитьЗамечание(СтрокаДокумента, 2, "В инф.базе найдено несколько("
				+ НайденоРС + ") одинаковых банковских счетов ("
				+ НомерСчета + ").");
		КонецЕсли;
	КонецЦикла;
	
	МассивСтрокПустыхКонтрагентов = ДокументыДляИмпорта.НайтиСтроки(Новый Структура("Контрагент", Неопределено));
	Для инд = 0 По МассивСтрокПустыхКонтрагентов.ВГраница() Цикл
		СтрокаДокумента = МассивСтрокПустыхКонтрагентов[инд];
		ЕстьЗамечание   =  НЕ ПустаяСтрока(СтрокаДокумента.ОписаниеОшибок);
		СтрокаДокумента.Контрагент =
			?(ЕстьЗамечание ИЛИ НЕ СоздаватьНенайденныеЭлементы, "Не найден (", "Не загружен (") + СтрокаДокумента.ИмяКонтрагента + ")";
		Если ПустаяСтрока(СтрокаДокумента.ИмяКонтрагента) И ПустаяСтрока(СтрокаДокумента.ИННКонтрагента) Тогда
			СтрокаДокумента.Контрагент = "Не указаны реквизиты контрагента";
		КонецЕсли;
		
		Если ПустаяСтрока(СтрокаДокумента.СчетКонтрагентаДляПоиска) Тогда
			СтрокаДокумента.СчетКонтрагента = "Не указаны реквизиты р/с";
		Иначе
			СтрокаДокумента.СчетКонтрагента =
				?(ЕстьЗамечание ИЛИ НЕ СоздаватьНенайденныеЭлементы, "Не найден (", "Не загружен (") + СтрокаДокумента.СчетКонтрагентаДляПоиска + ")";
		КонецЕсли;
		
		Если НЕ ЭтоВидОперацииБезДоговора(СтрокаДокумента.ВидОперации) Тогда
			СтрокаДокумента.Договор = ?(ЕстьЗамечание ИЛИ НЕ СоздаватьНенайденныеЭлементы,
				НСтр("ru = 'Не найден'"), НСтр("ru = 'Не создан'"));
			СтрокаДокумента.ДоговорКонтрагентаНеНайден = Истина;
		КонецЕсли;
		
		СписокНенайденных(СтрокаДокумента, ДеревоКонтрагентов);
		Если НЕ СоздаватьНенайденныеЭлементы Тогда
			Если ПустаяСтрока(СтрокаДокумента.ИмяКонтрагента) И ПустаяСтрока(СтрокаДокумента.ИННКонтрагента) Тогда
				ДобавитьЗамечание(СтрокаДокумента, 2, "Не указаны реквизиты контрагента.");
			Иначе
				ДобавитьЗамечание(СтрокаДокумента, 2, "Не найден контрагент (" + СтрокаДокумента.ИмяКонтрагента  + ", ИНН " + СтрокаДокумента.ИННКонтрагента + ").");
			КонецЕсли;
			
			ДобавитьЗамечание(СтрокаДокумента, 2, "Не найден счет контрагента (" + СтрокаДокумента.СчетКонтрагентаДляПоиска + ").");
			
			Если СтрокаДокумента.ДоговорКонтрагентаНеНайден Тогда
				ДобавитьЗамечание(СтрокаДокумента, 2, НСтр("ru = 'Не найден договор. '"));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	МассивСтрокПустыхРасчетныхСчетов = ДокументыДляИмпорта.НайтиСтроки(Новый Структура("СчетКонтрагента", Неопределено));
	Для инд = 0 По МассивСтрокПустыхРасчетныхСчетов.ВГраница() Цикл
		СтрокаДокумента = МассивСтрокПустыхРасчетныхСчетов[инд];
		ЕстьЗамечание   =  НЕ ПустаяСтрока(СтрокаДокумента.ОписаниеОшибок);
		Если ПустаяСтрока(СтрокаДокумента.СчетКонтрагентаДляПоиска) Тогда
			СтрокаДокумента.СчетКонтрагента = "Не указаны реквизиты р/с";
		Иначе
			СтрокаДокумента.СчетКонтрагента =
				?(ЕстьЗамечание ИЛИ НЕ СоздаватьНенайденныеЭлементы, "Не найден (", "Не загружен (") + СтрокаДокумента.СчетКонтрагентаДляПоиска + ")";
		КонецЕсли;
		
		СписокНенайденных(СтрокаДокумента, ДеревоКонтрагентов);
		Если НЕ СоздаватьНенайденныеЭлементы Тогда
			Если ПустаяСтрока(СтрокаДокумента.СчетКонтрагентаДляПоиска) Тогда
				ДобавитьЗамечание(СтрокаДокумента, 2, "Не указаны реквизиты р/с).");
			Иначе
				ДобавитьЗамечание(СтрокаДокумента, 2, "Не найден счет контрагента (" + СтрокаДокумента.СчетКонтрагентаДляПоиска + ").");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	//_______________________________________________________________________________________________________________
	//8) Определим договор контрагента
	
	МассивПустыхДоговоров = ДокументыДляИмпорта.НайтиСтроки(Новый Структура("Договор", Неопределено));
	Если МассивПустыхДоговоров.Количество() > 0 Тогда
		ТаблицаПустыхДоговоров = ДокументыДляИмпорта.Скопировать(МассивПустыхДоговоров,
			"НомерСтроки, Контрагент, ВидОперации");
		
		ТаблицаСвязейВидаОперацииВидДоговора = ПолучитьТаблицуСвязей();
		
		Запрос.УстановитьПараметр("ТаблицаКонтрагентов",  ТаблицаПустыхДоговоров);
		Запрос.УстановитьПараметр("ТаблицаСвязей",        ТаблицаСвязейВидаОперацииВидДоговора);
		Запрос.УстановитьПараметр("Организация",          Организация);
		Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
		Запрос.УстановитьПараметр("ИскатьДоговораВУЕ",    ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаСвязей.ВидДоговора КАК ВидДоговора,
		|	ТаблицаСвязей.ВидОперации КАК ВидОперации,
		|	ТаблицаСвязей.Приоритет КАК Приоритет
		|ПОМЕСТИТЬ ТаблицаСвязей
		|ИЗ
		|	&ТаблицаСвязей КАК ТаблицаСвязей
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидДоговора,
		|	ВидОперации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаКонтрагентов.НомерСтроки КАК НомерСтроки,
		|	ВЫРАЗИТЬ(ТаблицаКонтрагентов.Контрагент КАК Справочник.Контрагенты) КАК Контрагент,
		|	ТаблицаКонтрагентов.ВидОперации КАК ВидОперации
		|ПОМЕСТИТЬ ТаблицаКонтрагентов
		|ИЗ
		|	&ТаблицаКонтрагентов КАК ТаблицаКонтрагентов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
		|	ВложенныйЗапрос.Контрагент КАК Контрагент,
		|	ВложенныйЗапрос.Договор КАК Договор,
		|	ВложенныйЗапрос.ВидДоговора КАК ВидДоговора,
		|	ВложенныйЗапрос.ВидОперации КАК ВидОперации
		|ПОМЕСТИТЬ ВТ_Договора
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТаблицаКонтрагентов.НомерСтроки КАК НомерСтроки,
		|		ТаблицаКонтрагентов.Контрагент КАК Контрагент,
		|		ДоговорыКонтрагентов.Ссылка КАК Договор,
		|		ДоговорыКонтрагентов.ВидДоговора КАК ВидДоговора,
		|		ТаблицаКонтрагентов.ВидОперации КАК ВидОперации
		|	ИЗ
		|		ТаблицаКонтрагентов КАК ТаблицаКонтрагентов
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|			ПО ТаблицаКонтрагентов.Контрагент = ДоговорыКонтрагентов.Владелец
		|				И (ДоговорыКонтрагентов.Организация = &Организация)
		|				И (ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов)
		|				И (НЕ ДоговорыКонтрагентов.РасчетыВУсловныхЕдиницах)
		|	ГДЕ
		|		ДоговорыКонтрагентов.Организация = &Организация
		|		И НЕ ДоговорыКонтрагентов.ПометкаУдаления
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТаблицаКонтрагентов.НомерСтроки,
		|		ТаблицаКонтрагентов.Контрагент,
		|		ДоговорыКонтрагентов.Ссылка,
		|		ДоговорыКонтрагентов.ВидДоговора,
		|		ТаблицаКонтрагентов.ВидОперации
		|	ИЗ
		|		ТаблицаКонтрагентов КАК ТаблицаКонтрагентов
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|			ПО ТаблицаКонтрагентов.Контрагент = ДоговорыКонтрагентов.Владелец
		|				И (ДоговорыКонтрагентов.Организация = &Организация)
		|				И (&ИскатьДоговораВУЕ)
		|				И (ДоговорыКонтрагентов.РасчетыВУсловныхЕдиницах)
		|	ГДЕ
		|		ДоговорыКонтрагентов.Организация = &Организация
		|		И НЕ ДоговорыКонтрагентов.ПометкаУдаления) КАК ВложенныйЗапрос
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидДоговора,
		|	ВидОперации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.НомерСтроки,
		|	ВложенныйЗапрос.Контрагент,
		|	ВложенныйЗапрос.Договор,
		|	ВложенныйЗапрос.ВидОперации,
		|	МИНИМУМ(ВложенныйЗапрос.Приоритет) КАК Приоритет
		|ПОМЕСТИТЬ ВТ_ДоговараМин
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВТ_Договора.НомерСтроки КАК НомерСтроки,
		|		ВТ_Договора.Контрагент КАК Контрагент,
		|		ВТ_Договора.Договор КАК Договор,
		|		ВТ_Договора.ВидОперации КАК ВидОперации,
		|		ТаблицаСвязей.Приоритет КАК Приоритет
		|	ИЗ
		|		ВТ_Договора КАК ВТ_Договора
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаСвязей КАК ТаблицаСвязей
		|			ПО ВТ_Договора.ВидДоговора = ТаблицаСвязей.ВидДоговора
		|				И ВТ_Договора.ВидОперации = ТаблицаСвязей.ВидОперации) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.ВидОперации,
		|	ВложенныйЗапрос.НомерСтроки,
		|	ВложенныйЗапрос.Контрагент,
		|	ВложенныйЗапрос.Договор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДоговараМин.НомерСтроки КАК НомерСтроки,
		|	ВТ_ДоговараМин.Контрагент,
		|	ВТ_ДоговараМин.Договор,
		|	ВТ_ДоговараМин.ВидОперации,
		|	МИНИМУМ(ВЫБОР
		|			КОГДА ВТ_ДоговараМин.Договор = ВТ_ДоговараМин.Контрагент.ОсновнойДоговорКонтрагента
		|				ТОГДА -1
		|			ИНАЧЕ ВТ_ДоговараМин.Приоритет
		|		КОНЕЦ) КАК Приоритет
		|ИЗ
		|	ВТ_ДоговараМин КАК ВТ_ДоговараМин
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ДоговараМин.ВидОперации,
		|	ВТ_ДоговараМин.НомерСтроки,
		|	ВТ_ДоговараМин.Контрагент,
		|	ВТ_ДоговараМин.Договор
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки,
		|	Приоритет";
		
		Результат = Запрос.Выполнить();
		Выборка   = Результат.Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
			СтрокаДокумента = ДокументыДляИмпорта.Найти(Выборка.НомерСтроки, "НомерСтроки");
			// учтем дубли с одинаковым приоритетом
			Если Выборка.Следующий() Тогда
				СтрокаДокумента.Договор = Выборка.Договор;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Для инд = 0 По МассивСтрокСКонтрагентами.ВГраница() Цикл
		Если ЗначениеЗаполнено(МассивСтрокСКонтрагентами[инд].Договор) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДокумента      = МассивСтрокСКонтрагентами[инд];
		ВидОперацииДокумента = СтрокаДокумента.ВидОперации;
		
		СписокВидовДоговоров = УчетДенежныхСредствКлиентСервер.ОпределитьВидДоговораСКонтрагентом(ВидОперацииДокумента);
		Если НЕ ЭтоВидОперацииБезДоговора(ВидОперацииДокумента) И СписокВидовДоговоров.Количество() > 0 Тогда
			ЕстьЗамечание = НЕ ПустаяСтрока(СтрокаДокумента.ОписаниеОшибок);
			СтрокаДокумента.ДоговорКонтрагентаНеНайден = Истина;
			СтрокаДокумента.Договор = ?(ЕстьЗамечание ИЛИ НЕ СоздаватьНенайденныеЭлементы,
				НСтр("ru = 'Не найден'"), НСтр("ru = 'Не создан'"));
			
			СписокНенайденных(СтрокаДокумента, ДеревоКонтрагентов);
			Если НЕ СоздаватьНенайденныеЭлементы Тогда
				ДобавитьЗамечание(СтрокаДокумента, 2, НСтр("ru = 'Не найден договор. '"));
			КонецЕсли;
		Иначе
			СтрокаДокумента.Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // РаспознатьДанные

Функция ТекстЗапросаПоискаКонтрагентов() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(БанковскиеСчета.Владелец КАК Справочник.Контрагенты) КАК Контрагент,
	|	ВЫРАЗИТЬ(БанковскиеСчета.Владелец КАК Справочник.Контрагенты).ИНН КАК ИНН,
	|	ВЫРАЗИТЬ(БанковскиеСчета.Владелец КАК Справочник.Контрагенты).КПП КАК КПП,
	|	ТаблицаКонтрагентов.НомерСтроки КАК НомерСтроки,
	|	ТаблицаКонтрагентов.СчетКонтрагентаДляПоиска КАК НомерСчета,
	|	БанковскиеСчета.Ссылка КАК БанковскийСчет,
	|	ВЫРАЗИТЬ(БанковскиеСчета.Владелец КАК Справочник.Контрагенты).ПометкаУдаления КАК ПометкаУдаления,
	|	ВЫРАЗИТЬ(БанковскиеСчета.Владелец КАК Справочник.Контрагенты).Наименование КАК ВладелецНаименование,
	|	ВЫРАЗИТЬ(БанковскиеСчета.Владелец КАК Справочник.Контрагенты).НаименованиеПолное КАК ВладелецНаименованиеПолное
	|ПОМЕСТИТЬ ВТ_БанковскиеСчета
	|ИЗ
	|	ТаблицаКонтрагентов КАК ТаблицаКонтрагентов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ПО ТаблицаКонтрагентов.СчетКонтрагентаДляПоиска = БанковскиеСчета.НомерСчета
	|ГДЕ
	|	ТаблицаКонтрагентов.СчетКонтрагентаДляПоиска <> """"
	|	И БанковскиеСчета.НомерСчета В(&СписокСчетов)
	|	И ТИПЗНАЧЕНИЯ(БанковскиеСчета.Владелец) = ТИП(Справочник.Контрагенты)
	|	И &ИскатьКонтрагентов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(БанковскиеСчета.Владелец КАК Справочник.ФизическиеЛица),
	|	ВЫРАЗИТЬ(БанковскиеСчета.Владелец КАК Справочник.ФизическиеЛица).ИНН,
	|	"""",
	|	ТаблицаКонтрагентов.НомерСтроки,
	|	ТаблицаКонтрагентов.СчетКонтрагентаДляПоиска,
	|	БанковскиеСчета.Ссылка,
	|	ВЫРАЗИТЬ(БанковскиеСчета.Владелец КАК Справочник.ФизическиеЛица).ПометкаУдаления,
	|	ВЫРАЗИТЬ(БанковскиеСчета.Владелец КАК Справочник.ФизическиеЛица).Наименование,
	|	ВЫРАЗИТЬ(БанковскиеСчета.Владелец КАК Справочник.ФизическиеЛица).Наименование
	|ИЗ
	|	ТаблицаКонтрагентов КАК ТаблицаКонтрагентов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ПО ТаблицаКонтрагентов.СчетКонтрагентаДляПоиска = БанковскиеСчета.НомерСчета
	|ГДЕ
	|	ТаблицаКонтрагентов.СчетКонтрагентаДляПоиска <> """"
	|	И БанковскиеСчета.НомерСчета В(&СписокСчетов)
	|	И ТИПЗНАЧЕНИЯ(БанковскиеСчета.Владелец) = ТИП(Справочник.ФизическиеЛица)
	|	И &ИскатьФизическихЛиц
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВладелецНаименование,
	|	ВладелецНаименованиеПолное
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Контрагенты.ИНН КАК ИНН,
	|	Контрагенты.КПП КАК КПП,
	|	Контрагенты.ПометкаУдаления КАК ПометкаУдаления,
	|	ТаблицаКонтрагентов.НомерСтроки КАК НомерСтроки,
	|	2 КАК Приоритет
	|ПОМЕСТИТЬ ВТ_Приоритет2
	|ИЗ
	|	ТаблицаКонтрагентов КАК ТаблицаКонтрагентов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО ТаблицаКонтрагентов.ИННКонтрагента = Контрагенты.ИНН
	|			И ТаблицаКонтрагентов.КППКонтрагента = Контрагенты.КПП
	|ГДЕ
	|	ТаблицаКонтрагентов.ИННКонтрагента <> """"
	|	И ТаблицаКонтрагентов.КППКонтрагента <> """"
	|	И ТаблицаКонтрагентов.КППКонтрагента <> ""0""
	|	И Контрагенты.ИНН В(&СписокИНН)
	|	И &ИскатьКонтрагентов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка,
	|	ФизическиеЛица.ИНН,
	|	"""",
	|	ФизическиеЛица.ПометкаУдаления,
	|	ТаблицаКонтрагентов.НомерСтроки,
	|	2
	|ИЗ
	|	ТаблицаКонтрагентов КАК ТаблицаКонтрагентов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО ТаблицаКонтрагентов.ИННКонтрагента = ФизическиеЛица.ИНН
	|ГДЕ
	|	ТаблицаКонтрагентов.ИННКонтрагента <> """"
	|	И ТаблицаКонтрагентов.КППКонтрагента = ""0""
	|	И ТаблицаКонтрагентов.КППКонтрагента = """"
	|	И ФизическиеЛица.ИНН В(&СписокИНН)
	|	И &ИскатьФизическихЛиц
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_БанковскиеСчета.Контрагент КАК Контрагент,
	|	ВТ_БанковскиеСчета.ИНН КАК ИНН,
	|	ВТ_БанковскиеСчета.КПП КАК КПП,
	|	ВТ_БанковскиеСчета.НомерСтроки КАК НомерСтроки,
	|	3 КАК Приоритет,
	|	ВТ_БанковскиеСчета.ПометкаУдаления КАК ПометкаУдаления,
	|	ВТ_БанковскиеСчета.НомерСчета КАК НомерСчета,
	|	ВТ_БанковскиеСчета.БанковскийСчет КАК БанковскийСчет
	|ПОМЕСТИТЬ ВТ_Приоритет3
	|ИЗ
	|	ВТ_БанковскиеСчета КАК ВТ_БанковскиеСчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКонтрагентов КАК ТаблицаКонтрагентов
	|		ПО ВТ_БанковскиеСчета.ВладелецНаименование = ТаблицаКонтрагентов.ИмяКонтрагента
	|			И ВТ_БанковскиеСчета.НомерСтроки = ТаблицаКонтрагентов.НомерСтроки
	|ГДЕ
	|	ТаблицаКонтрагентов.СчетКонтрагентаДляПоиска <> """"
	|	И (ТаблицаКонтрагентов.КППКонтрагента = ВТ_БанковскиеСчета.КПП
	|			ИЛИ ТаблицаКонтрагентов.КППКонтрагента = """"
	|			ИЛИ ТаблицаКонтрагентов.КППКонтрагента = ""0""
	|			ИЛИ ВТ_БанковскиеСчета.КПП = """")
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТ_БанковскиеСчета.Контрагент,
	|	ВТ_БанковскиеСчета.ИНН,
	|	ВТ_БанковскиеСчета.КПП,
	|	ВТ_БанковскиеСчета.НомерСтроки,
	|	3,
	|	ВТ_БанковскиеСчета.ПометкаУдаления,
	|	ВТ_БанковскиеСчета.НомерСчета,
	|	ВТ_БанковскиеСчета.БанковскийСчет
	|ИЗ
	|	ВТ_БанковскиеСчета КАК ВТ_БанковскиеСчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКонтрагентов КАК ТаблицаКонтрагентов
	|		ПО ВТ_БанковскиеСчета.ВладелецНаименованиеПолное = ТаблицаКонтрагентов.ИмяКонтрагента
	|			И ВТ_БанковскиеСчета.НомерСтроки = ТаблицаКонтрагентов.НомерСтроки
	|ГДЕ
	|	ТаблицаКонтрагентов.СчетКонтрагентаДляПоиска <> """"
	|	И (ТаблицаКонтрагентов.КППКонтрагента = ВТ_БанковскиеСчета.КПП
	|			ИЛИ ТаблицаКонтрагентов.КППКонтрагента = """"
	|			ИЛИ ТаблицаКонтрагентов.КППКонтрагента = ""0""
	|			ИЛИ ВТ_БанковскиеСчета.КПП = """")
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТ_БанковскиеСчета.Контрагент,
	|	ВТ_БанковскиеСчета.ИНН,
	|	ВТ_БанковскиеСчета.КПП,
	|	ВТ_БанковскиеСчета.НомерСтроки,
	|	3,
	|	ВТ_БанковскиеСчета.ПометкаУдаления,
	|	ВТ_БанковскиеСчета.НомерСчета,
	|	ВТ_БанковскиеСчета.БанковскийСчет
	|ИЗ
	|	ВТ_БанковскиеСчета КАК ВТ_БанковскиеСчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКонтрагентов КАК ТаблицаКонтрагентов
	|		ПО ВТ_БанковскиеСчета.ИНН = ТаблицаКонтрагентов.ИННКонтрагента
	|			И ВТ_БанковскиеСчета.НомерСтроки = ТаблицаКонтрагентов.НомерСтроки
	|ГДЕ
	|	ТаблицаКонтрагентов.СчетКонтрагентаДляПоиска <> """"
	|	И (ТаблицаКонтрагентов.КППКонтрагента = ВТ_БанковскиеСчета.КПП
	|			ИЛИ ТаблицаКонтрагентов.КППКонтрагента = """"
	|			ИЛИ ТаблицаКонтрагентов.КППКонтрагента = ""0""
	|			ИЛИ ВТ_БанковскиеСчета.КПП = """")
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Контрагенты.ИНН КАК ИНН,
	|	Контрагенты.КПП КАК КПП,
	|	Контрагенты.ПометкаУдаления КАК ПометкаУдаления,
	|	ТаблицаКонтрагентов.НомерСтроки КАК НомерСтроки,
	|	4 КАК Приоритет
	|ПОМЕСТИТЬ ВТ_Приоритет4
	|ИЗ
	|	ТаблицаКонтрагентов КАК ТаблицаКонтрагентов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО ТаблицаКонтрагентов.ИННКонтрагента = Контрагенты.ИНН
	|ГДЕ
	|	ТаблицаКонтрагентов.ИННКонтрагента <> """"
	|	И Контрагенты.ИНН В(&СписокИНН)
	|	И (Контрагенты.КПП = """"
	|			ИЛИ ТаблицаКонтрагентов.КППКонтрагента = """"
	|			ИЛИ ТаблицаКонтрагентов.КППКонтрагента = ""0"")
	|	И &ИскатьКонтрагентов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка,
	|	ФизическиеЛица.ИНН,
	|	0,
	|	ФизическиеЛица.ПометкаУдаления,
	|	ТаблицаКонтрагентов.НомерСтроки,
	|	4
	|ИЗ
	|	ТаблицаКонтрагентов КАК ТаблицаКонтрагентов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО ТаблицаКонтрагентов.ИННКонтрагента = ФизическиеЛица.ИНН
	|ГДЕ
	|	ТаблицаКонтрагентов.ИННКонтрагента <> """"
	|	И ФизическиеЛица.ИНН В(&СписокИНН)
	|	И &ИскатьФизическихЛиц
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Приоритет2.Контрагент КАК Контрагент,
	|	ВТ_Приоритет2.ИНН КАК ИНН,
	|	ВТ_Приоритет2.КПП КАК КПП,
	|	ВТ_Приоритет2.НомерСтроки КАК НомерСтроки,
	|	ВТ_Приоритет2.ПометкаУдаления КАК ПометкаУдаления,
	|	1 КАК Приоритет
	|ПОМЕСТИТЬ ВТ_Приоритет1
	|ИЗ
	|	ВТ_Приоритет2 КАК ВТ_Приоритет2
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Приоритет3 КАК ВТ_Приоритет3
	|		ПО ВТ_Приоритет2.Контрагент = ВТ_Приоритет3.Контрагент
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТ_Приоритет3.Контрагент,
	|	ВТ_Приоритет3.ИНН,
	|	ВТ_Приоритет3.КПП,
	|	ВТ_Приоритет3.НомерСтроки,
	|	ВТ_Приоритет3.ПометкаУдаления,
	|	1
	|ИЗ
	|	ВТ_Приоритет3 КАК ВТ_Приоритет3
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Приоритет4 КАК ВТ_Приоритет4
	|		ПО ВТ_Приоритет3.Контрагент = ВТ_Приоритет4.Контрагент
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Приоритет1.Контрагент КАК Контрагент,
	|	ВТ_Приоритет1.ИНН КАК ИНН,
	|	ВТ_Приоритет1.КПП КАК КПП,
	|	ВТ_Приоритет1.НомерСтроки КАК НомерСтроки,
	|	ВТ_Приоритет1.ПометкаУдаления КАК ПометкаУдаления,
	|	0 КАК Приоритет
	|ПОМЕСТИТЬ ВТ_Приоритет0
	|ИЗ
	|	ВТ_Приоритет1 КАК ВТ_Приоритет1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКонтрагентов КАК ТаблицаКонтрагентов
	|		ПО ВТ_Приоритет1.Контрагент.Наименование = ТаблицаКонтрагентов.ИмяКонтрагента
	|			И ВТ_Приоритет1.НомерСтроки = ТаблицаКонтрагентов.НомерСтроки
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТ_Приоритет1.Контрагент,
	|	ВТ_Приоритет1.ИНН,
	|	ВТ_Приоритет1.КПП,
	|	ВТ_Приоритет1.НомерСтроки,
	|	ВТ_Приоритет1.ПометкаУдаления,
	|	0
	|ИЗ
	|	ВТ_Приоритет1 КАК ВТ_Приоритет1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКонтрагентов КАК ТаблицаКонтрагентов
	|		ПО ВТ_Приоритет1.Контрагент.НаименованиеПолное = ТаблицаКонтрагентов.ИмяКонтрагента
	|			И ВТ_Приоритет1.НомерСтроки = ТаблицаКонтрагентов.НомерСтроки
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТ_Приоритет1.Контрагент,
	|	ВТ_Приоритет1.ИНН,
	|	ВТ_Приоритет1.КПП,
	|	ВТ_Приоритет1.НомерСтроки,
	|	ВТ_Приоритет1.ПометкаУдаления,
	|	0
	|ИЗ
	|	ВТ_Приоритет1 КАК ВТ_Приоритет1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКонтрагентов КАК ТаблицаКонтрагентов
	|		ПО ВТ_Приоритет1.ИНН = ТаблицаКонтрагентов.ИННКонтрагента
	|			И ВТ_Приоритет1.КПП = ТаблицаКонтрагентов.КППКонтрагента
	|			И ВТ_Приоритет1.НомерСтроки = ТаблицаКонтрагентов.НомерСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Контрагент КАК Контрагент,
	|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
	|	ВложенныйЗапрос.ИНН КАК ИНН,
	|	ВложенныйЗапрос.КПП КАК КПП,
	|	МИНИМУМ(ВложенныйЗапрос.Приоритет + ВЫБОР
	|			КОГДА ВложенныйЗапрос.ПометкаУдаления
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Приоритет
	|ПОМЕСТИТЬ КонтрагентыСгруппированныеПоПриоритетам
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ_Приоритет0.Контрагент КАК Контрагент,
	|		ВТ_Приоритет0.ИНН КАК ИНН,
	|		ВТ_Приоритет0.КПП КАК КПП,
	|		ВТ_Приоритет0.НомерСтроки КАК НомерСтроки,
	|		ВТ_Приоритет0.ПометкаУдаления КАК ПометкаУдаления,
	|		ВТ_Приоритет0.Приоритет КАК Приоритет
	|	ИЗ
	|		ВТ_Приоритет0 КАК ВТ_Приоритет0
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ВТ_Приоритет1.Контрагент,
	|		ВТ_Приоритет1.ИНН,
	|		ВТ_Приоритет1.КПП,
	|		ВТ_Приоритет1.НомерСтроки,
	|		ВТ_Приоритет1.ПометкаУдаления,
	|		ВТ_Приоритет1.Приоритет
	|	ИЗ
	|		ВТ_Приоритет1 КАК ВТ_Приоритет1
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ВТ_Приоритет2.Контрагент,
	|		ВТ_Приоритет2.ИНН,
	|		ВТ_Приоритет2.КПП,
	|		ВТ_Приоритет2.НомерСтроки,
	|		ВТ_Приоритет2.ПометкаУдаления,
	|		ВТ_Приоритет2.Приоритет
	|	ИЗ
	|		ВТ_Приоритет2 КАК ВТ_Приоритет2
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ВТ_Приоритет3.Контрагент,
	|		ВТ_Приоритет3.ИНН,
	|		ВТ_Приоритет3.КПП,
	|		ВТ_Приоритет3.НомерСтроки,
	|		ВТ_Приоритет3.ПометкаУдаления,
	|		ВТ_Приоритет3.Приоритет
	|	ИЗ
	|		ВТ_Приоритет3 КАК ВТ_Приоритет3
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ВТ_Приоритет4.Контрагент,
	|		ВТ_Приоритет4.ИНН,
	|		ВТ_Приоритет4.КПП,
	|		ВТ_Приоритет4.НомерСтроки,
	|		ВТ_Приоритет4.ПометкаУдаления,
	|		ВТ_Приоритет4.Приоритет
	|	ИЗ
	|		ВТ_Приоритет4 КАК ВТ_Приоритет4) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Контрагент,
	|	ВложенныйЗапрос.ИНН,
	|	ВложенныйЗапрос.КПП,
	|	ВложенныйЗапрос.НомерСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент,
	|	НомерСтроки";
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ДобавитьПолучитьСтрокаРСсчетов(СписокБанковскихСчетовОрганизации, РССчет, Импорт_РасчетныеСчета)
	
	СтрокаСвоихСчетов = СписокБанковскихСчетовОрганизации.Найти(РССчет, "НомерСчета");
	Если СтрокаСвоихСчетов <> Неопределено Тогда
		СтрокаРССчетов = Импорт_РасчетныеСчета.Добавить();
		СтрокаРССчетов.РасчСчет      = РССчет;
		СтрокаРССчетов.РасчетныйСчет = СтрокаСвоихСчетов.Ссылка;
		
		Возврат СтрокаРССчетов
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Разбирает файл импорта и заполняет таблицу документов (для импорта)
// (без распознавания)
Функция РазобратьФайлИмпорта(ДокументыДляИмпорта, СтруктураДанныхИмпорта, ВыводитьСообщения,
		НомерСчета, Кодировка, Организация,
		Импорт_Заголовок, Импорт_РасчетныеСчета, ИмяВременногоФайла, СоздаватьНенайденныеЭлементы = Истина,
		СтекОповещений = Неопределено, КонтролироватьНекорректныеСимволыВНомере = Ложь) Экспорт
	
	// Подготавливаем структуры обработки данных
	Импорт_ВидыДокументов = Новый Массив;
	
	Если СтекОповещений = Неопределено Тогда
		СтекОповещений = Новый Массив;
	КонецЕсли;
	
	// Подготавливаем структуры обработки данных.
	Импорт_ПризнакОбмена = Ложь;
	НайденКонецФайла     = Ложь;
	
	НомерОбрабатываемогоСчета = "";
	
	СписокДокументов = Новый СписокЗначений;
	
	СписокБанковскихСчетовОрганизации = ПолучитьСписокСвоихСчетов(Организация);
	Импорт_РасчетныеСчета.Очистить();
	ДокументыДляИмпорта.Очистить();
	
	// Получаем исходные данные.
	Импорт_МассивСтрок = ПрочитатьФайл(ИмяВременногоФайла, Кодировка, СтекОповещений);
	
	Если Импорт_МассивСтрок = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Импорт_КоличествоСтрок = Импорт_МассивСтрок.Количество();
	Если Импорт_КоличествоСтрок = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Файл загрузки не содержит данных!'");
		СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Импорт_Загружаемые = Новый Структура(
		"Номер, Дата, Сумма,
		|ВидПлатежа, ВидОплаты,
		|КвитанцияДата, КвитанцияВремя, КвитанцияСодержание,
		|ДатаСписано,
		|ДатаПоступило,
		|ПлательщикСчет, Плательщик, ПлательщикИНН, Плательщик1,
		|ПлательщикРасчСчет, ПлательщикБанк1, ПлательщикБанк2, ПлательщикБИК, ПлательщикКорсчет,
		|Плательщик2, Плательщик3, Плательщик4,
		|ПолучательСчет, Получатель, ПолучательИНН, Получатель1,
		|ПолучательРасчСчет, ПолучательБанк1, ПолучательБанк2, ПолучательБИК, ПолучательКорсчет,
		|Получатель2, Получатель3, Получатель4,
		|СтатусСоставителя, ПлательщикКПП, ПолучательКПП, ПоказательКБК, ОКАТО, ОКТМО,
		|ПоказательОснования, ПоказательПериода, ПоказательНомера, ПоказательДаты, ПоказательТипа,
		|Код,
		|НазначениеПлатежа, НазначениеПлатежа1, НазначениеПлатежа2, НазначениеПлатежа3, НазначениеПлатежа4, НазначениеПлатежа5, НазначениеПлатежа6,
		|СрокПлатежа, Очередность,
		|УсловиеОплаты1, УсловиеОплаты2, УсловиеОплаты3,
		|СрокАкцепта, ВидАккредитива, ПлатежПоПредст, ДополнУсловия, НомерСчетаПоставщика, ДатаОтсылкиДок");
	
	// Заполняем первичные структуры данных.
	
	ИтоговаяСтрокаПоРССчету = Неопределено;
	Импорт_ТекущаяСтрока    = 1;
	СообщатьОПустомСчете    = Истина;
	Пока Импорт_ТекущаяСтрока <= Импорт_КоличествоСтрок Цикл
		
		Стр = ПолучитьСтрокуИмпорта(Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_МассивСтрок);
		
		Если Лев(Врег(СокрЛП(Стр)), 14) = "СЕКЦИЯДОКУМЕНТ" Тогда
			
			Значение = "";
			Тег = "";
			РазобратьТеговуюСтроку(Стр, Тег, Значение);
			
			Если Тег = "СЕКЦИЯДОКУМЕНТ" Тогда
				Если НомерОбрабатываемогоСчета = "" Тогда
					Если СообщатьОПустомСчете Тогда
						СообщатьОПустомСчете = Ложь;
						
						ТекстСообщения = НСтр("ru = 'В заголовке файла не указан расчетный счет!
							|При загрузке будет использован расчетный счет, указанный в форме.'");
						СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
					КонецЕсли;
					
					НомерОбрабатываемогоСчета = НомерСчета;
				КонецЕсли;
				
				Если НомерОбрабатываемогоСчета <> НомерСчета Тогда
					Если Импорт_РасчетныеСчета.Количество() > 0
						И Импорт_РасчетныеСчета.Найти(НомерСчета, "РасчСчет") = Неопределено Тогда
						Если ВыводитьСообщения Тогда
							ТекстСообщения = НСтр("ru = 'В заголовке файла указаны счета, отличные от указанного. Расчеты загружаться не будут.'");
							СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
						КонецЕсли;
						
						Возврат Ложь;
					КонецЕсли;
					
					НомерОбрабатываемогоСчета = НомерСчета;
				КонецЕсли;
				
				НоваяСтрокаДокументов = ДокументыДляИмпорта.Добавить();
				НоваяСтрокаДокументов.Операция = Значение;
				Если НЕ ЗагрузитьСекциюДокумента(НоваяСтрокаДокументов, Импорт_ТекущаяСтрока,
												 Импорт_КоличествоСтрок, Импорт_МассивСтрок,
												 Импорт_Загружаемые, СтекОповещений) Тогда
					Возврат Ложь;
				КонецЕсли;
			Иначе
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Нарушена структура файла импорта, строка %1 : %2'"),
					Импорт_ТекущаяСтрока - 1, Стр);
				СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
				
				Возврат Ложь;
			КонецЕсли;
			
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 14) = "СЕКЦИЯРАСЧСЧЕТ" Тогда
			
			СтруктураРССчет = ЗагрузитьСекциюРасчСчета(Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_МассивСтрок, СтекОповещений);
			Если СтруктураРССчет = Неопределено Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Нарушена структура файла импорта в секции описания расчетного счета! Строка: %1'"),
					Импорт_ТекущаяСтрока - 1);
				СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
				
				Возврат Ложь;
			Иначе
				СтрокаРССчетов = ДобавитьПолучитьСтрокаРСсчетов(СписокБанковскихСчетовОрганизации, СтруктураРССчет.РасчСчет, Импорт_РасчетныеСчета);
				Если СтрокаРССчетов = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(СтрокаРССчетов, СтруктураРССчет);
				Если ИтоговаяСтрокаПоРССчету <> Неопределено Тогда
					ЗаполнитьСтрокуРасчетов(ИтоговаяСтрокаПоРССчету, СтруктураРССчет);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 8) = "РАСЧСЧЕТ" Тогда
			Значение = "";
			Тег      = "";
			РазобратьТеговуюСтроку(Стр, Тег, Значение);
			
			Если Тег = "РАСЧСЧЕТ" Тогда
				НомерОбрабатываемогоСчетаСтароеЗначение = НомерОбрабатываемогоСчета;
				НомерОбрабатываемогоСчета = Значение;
				
				СтрокаРССчетов = ДобавитьПолучитьСтрокаРСсчетов(СписокБанковскихСчетовОрганизации, Значение, Импорт_РасчетныеСчета);
				ИтоговаяСтрокаПоРССчету = СтрокаРССчетов;
				
				Если СтрокаРССчетов = Неопределено Тогда
					Если ВыводитьСообщения Тогда
						
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'В заголовке файла указан счет, не принадлежащий организации: %1'"), Значение);
						
						СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
					КонецЕсли;
					
					НомерОбрабатываемогоСчета = ?(НомерОбрабатываемогоСчетаСтароеЗначение = "",
						НомерСчета, НомерОбрабатываемогоСчетаСтароеЗначение);
					Продолжить;
				Иначе
					ИтоговаяСтрокаПоРССчету.ИтоговаяСтрока = Истина;
				КонецЕсли;
				
				Если НомерСчета <> Значение И ВыводитьСообщения Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'В заголовке файла указан счет (%1), отличный от указанного, расчеты по которому загружаться не будут'"),
						Значение);
					
					СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 8) = "ДОКУМЕНТ" Тогда
			
			Импорт_ВидыДокументов.Добавить(Значение);
			
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 10) = "КОНЕЦФАЙЛА" Тогда
			
			Если НЕ Импорт_ПризнакОбмена Тогда
				
				ТекстСообщения = НСтр("ru = 'В файле импорта отсутствует признак обмена ""1CClientBankExchange""!'");
				
				СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
				Возврат Ложь;
				
			КонецЕсли;
			
			НайденКонецФайла = Истина;
			Прервать;
			
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 20) = "1CCLIENTBANKEXCHANGE" Тогда
			
			Импорт_ПризнакОбмена = Истина;
			
		Иначе
			
			ЗагрузитьСтрокуЗаголовка(Стр, Импорт_ТекущаяСтрока, Импорт_Заголовок, СтекОповещений);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ НайденКонецФайла Тогда
		Импорт_РасчетныеСчета.Очистить();
		ДокументыДляИмпорта.Очистить();
		
		ТекстСообщения = НСтр("ru = 'Файл загрузки не соответствует стандарту (не найдена секция КонецФайла)!'");
		СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
		
		Возврат Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Импорт_Заголовок.ДатаНачала) Тогда
		ТекстСообщения = НСтр("ru = 'В заголовке файла загрузки неверно указана дата начала интервала.'");
		СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
	КонецЕсли;
	
	Если ПустаяСтрока(Импорт_Заголовок.ДатаКонца) Тогда
		ТекстСообщения = НСтр("ru = 'В заголовке файла импорта неверно указана дата окончания интервала'");
		СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
		КонецИнтервалаЗагрузки = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // РазобратьФайлИмпорта

// Функция возвращает прочитанный файл обмена
//
Функция ПрочитатьФайл(Файл, Кодировка, СтекОповещений)
	
	ФайлЗагр = Новый Файл(Файл);
	Если НЕ ФайлЗагр.Существует() Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Файла %1 не существует!'"), Файл);
		СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	// Кодировку задаем текстом, иначе бывают проблемы на сервере в Linux и в связке англоязычная Windows + англоязычный SQL
	Если Кодировка = "DOS" Тогда
		Кодир = "cp866";        // КодировкаТекста.OEM;
	Иначе
		Кодир = "windows-1251"; // КодировкаТекста.ANSI;
	КонецЕсли;
	
	Импорт_МассивСтрок = Новый Массив;
	
	Попытка
		
		ПотокЧтения = Новый ЧтениеТекста(Файл, Кодир,,, Ложь);
		
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Файл не прочитан.'");
		СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
		
		ОписаниеОшибки = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки.Описание);
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	ПроверитьКодировку = Истина;
	ТекущаяСтрока = ПотокЧтения.ПрочитатьСтроку();
	Пока ТекущаяСтрока <> Неопределено Цикл
		Импорт_МассивСтрок.Добавить(СокрЛП(ТекущаяСтрока));
		ТекущаяСтрока = ПотокЧтения.ПрочитатьСтроку();
		
		Если ПроверитьКодировку И НЕ ПустаяСтрока(ТекущаяСтрока) Тогда
			ПроверитьКодировку = Ложь;
			
			Если НЕ ТолькоСимволыВСтроке(ТекущаяСтрока) Тогда
				ТекстСообщения = НСтр("ru = 'Указанный файл не является файлом обмена, или неверно указана кодировка!'");
				СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
				
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Импорт_МассивСтрок.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Файл загрузки не содержит данных!'");
		СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Если Импорт_МассивСтрок[0] <> "1CClientBankExchange" Тогда
		
		Импорт_МассивСтрок.Очистить();
		ТекстСообщения = НСтр("ru = 'Указанный файл не является файлом обмена, или неверно указана кодировка!'");
		СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат Импорт_МассивСтрок;
	
КонецФункции // ПрочитатьФайл

// Функция возвращает очередную строку из прочитанного файла загрузки
//
Функция ПолучитьСтрокуИмпорта(Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_МассивСтрок)
	
	Буфер = "";
	
	Пока ПустаяСтрока(Буфер) ИЛИ Лев(Буфер, 2) = "//" Цикл
		
		Если Импорт_ТекущаяСтрока > Импорт_КоличествоСтрок Тогда
			Возврат "";
		КонецЕсли;
		
		Буфер = Импорт_МассивСтрок[Импорт_ТекущаяСтрока - 1];
		Импорт_ТекущаяСтрока = Импорт_ТекущаяСтрока + 1;
		
	КонецЦикла;
	
	Возврат Буфер;
	
КонецФункции

// Функция разбирает теговую строку
//
Функция РазобратьТеговуюСтроку(СтрокаРазбора, Тег, Значение)
	
	ПозицияПрисваивания = Найти(СтрокаРазбора, "=");
	
	Если ПозицияПрисваивания = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Тег = ВРЕГ(СокрЛП(Лев(СтрокаРазбора, ПозицияПрисваивания - 1)));
	
	Значение = СокрЛП(Сред(СтрокаРазбора, ПозицияПрисваивания + 1));
	
	Возврат НЕ ПустаяСтрока(Тег);
	
КонецФункции

// Функция загружает секцию документа
//
Функция ЗагрузитьСекциюДокумента(СтрокаДокумента, Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок,
								Импорт_МассивСтрок, Импорт_Загружаемые, СтекОповещений)
	
	СтрокаРазбора = ПолучитьСтрокуИмпорта(Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_МассивСтрок);
	
	Пока Лев(Врег(СокрЛП(СтрокаРазбора)), 14) <> "КОНЕЦДОКУМЕНТА" Цикл
		Тег      = "";
		Значение = "";
		
		Если РазобратьТеговуюСтроку(СтрокаРазбора, Тег, Значение) Тогда
			
			Если Импорт_Загружаемые.Свойство(Тег) Тогда
				
				Если ЗначениеЗаполнено(Значение) И НЕ ЗначениеЗаполнено(СтрокаДокумента[Тег]) Тогда
					СтрокаДокумента[Тег] = Значение;
				КонецЕсли;
				
			Иначе
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Неверный реквизит платежного документа, строка %1 : %2'"), Импорт_ТекущаяСтрока - 1, СтрокаРазбора);
				СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
				
				Возврат Ложь;
				
			КонецЕсли;
			
		Иначе
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Нарушена структура платежного документа, строка %1 : %2'"), Импорт_ТекущаяСтрока - 1, СтрокаРазбора);
			СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
			
			Возврат Ложь;
			
		КонецЕсли;
		
		СтрокаРазбора = ПолучитьСтрокуИмпорта(Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_МассивСтрок);
		
	КонецЦикла;
	
	СтрокаДокумента.СостояниеДокумента = 3;
	
	Возврат Истина;
	
КонецФункции // ЗагрузитьСекциюДокумента

// Функция загружает секцию расчетного счета
//
Функция ЗагрузитьСекциюРасчСчета(Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_МассивСтрок, СтекОповещений)
	
	ТегиРасчетногоСчета = Новый Структура(
		ВРЕГ("ДатаНачала, ДатаКонца, РасчСчет, НачальныйОстаток, ВсегоПоступило, ВсегоСписано, КонечныйОстаток, КонецРасчСчет"));
	
	СтрокаРазбора = ПолучитьСтрокуИмпорта(Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_МассивСтрок);
	
	Значение = "";
	Тег = "";
	
	Пока РазобратьТеговуюСтроку(СтрокаРазбора, Тег, Значение) Цикл
		
		Если ТегиРасчетногоСчета.Свойство(Тег) Тогда
			
			ТегиРасчетногоСчета[Тег] = Значение;
			
		Иначе
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Неверный реквизит в секции описания расчетного счета, строка %1 : %2'"), Импорт_ТекущаяСтрока - 1, СтрокаРазбора);
			СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
			
			Возврат Неопределено;
			
		КонецЕсли;
		
		СтрокаРазбора = ПолучитьСтрокуИмпорта(Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_МассивСтрок);
		
		Значение = "";
		Тег = "";
		
	КонецЦикла;
	
	Если ВРЕГ(Лев(СокрЛП(СтрокаРазбора), 13)) = "КОНЕЦРАСЧСЧЕТ" Тогда
		Возврат ТегиРасчетногоСчета;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьСтрокуРасчетов(СтрокаРССчетов, СтруктураРССчет)
	
	СтрокаРССчетов.РасчСчет = СтруктураРССчет.РасчСчет;
	
	ДатаНачала = ПолучитьДатуИзСтроки(СтруктураРССчет.ДатаНачала);
	Если НЕ ПустаяСтрока(СтруктураРССчет.ДатаНачала) И СтрокаРССчетов.Начало > ДатаНачала
		ИЛИ ПустаяСтрока(СтрокаРССчетов.ДатаНачала) Тогда
		СтрокаРССчетов.Начало           = ДатаНачала;
		СтрокаРССчетов.ДатаНачала       = СтруктураРССчет.ДатаНачала;
		СтрокаРССчетов.НачальныйОстаток = СтруктураРССчет.НачальныйОстаток;
		
		Попытка
			НачальнаяСумма = ?(ПустаяСтрока(СтрокаРССчетов.НачальныйОстаток), 0, Число(СтрокаРССчетов.НачальныйОстаток));
		Исключение
			НачальнаяСумма = 0;
		КонецПопытки;
		
		Если НачальнаяСумма > 0 Тогда
			СтрокаРССчетов.НачальнаяСумма = НачальнаяСумма;
		КонецЕсли;
	КонецЕсли;
	
	ДатаКонца = ПолучитьДатуИзСтроки(СтруктураРССчет.ДатаКонца);
	Если НЕ ПустаяСтрока(СтруктураРССчет.ДатаКонца) И СтрокаРССчетов.Конец < ДатаКонца Тогда
		СтрокаРССчетов.Конец           = ДатаКонца;
		СтрокаРССчетов.ДатаКонца       = СтруктураРССчет.ДатаКонца;
		СтрокаРССчетов.КонечныйОстаток = СтруктураРССчет.КонечныйОстаток;
		
		Попытка
			КонечнаяСумма = ?(ПустаяСтрока(СтрокаРССчетов.КонечныйОстаток), 0, Число(СтрокаРССчетов.КонечныйОстаток));
		Исключение
			КонечнаяСумма = 0;
		КонецПопытки;
		
		Если КонечнаяСумма > 0 Тогда
			СтрокаРССчетов.КонечнаяСумма = КонечнаяСумма;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		ВсегоПоступило = СтрокаРССчетов.Поступило
			+ ?(ПустаяСтрока(СтруктураРССчет.ВсегоПоступило), 0, Число(СтруктураРССчет.ВсегоПоступило));
	Исключение
		ВсегоПоступило = 0;
	КонецПопытки;
	
	Попытка
		ВсегоСписано = СтрокаРССчетов.Списано
			+ ?(ПустаяСтрока(СтруктураРССчет.ВсегоСписано), 0, Число(СтруктураРССчет.ВсегоСписано));
	Исключение
		ВсегоСписано = 0;
	КонецПопытки;
	
	Если ВсегоПоступило > 0 Тогда
		СтрокаРССчетов.Поступило      = ВсегоПоступило;
		СтрокаРССчетов.ВсегоПоступило = Формат(ВсегоПоступило, "ЧЦ=15; ЧДЦ=2; ЧГ=");
	КонецЕсли;
	
	Если ВсегоСписано > 0 Тогда
		СтрокаРССчетов.Списано        = ВсегоСписано;
		СтрокаРССчетов.ВсегоСписано   = Формат(ВсегоСписано,   "ЧЦ=15; ЧДЦ=2; ЧГ=");
	КонецЕсли;
	
КонецПроцедуры

// Функция загружает заголовок файла обмена
//
Функция ЗагрузитьСтрокуЗаголовка(ТекстСтрокиЗаголовка, Импорт_ТекущаяСтрока, Импорт_Заголовок, СтекОповещений)
	
	Если ТипЗнч(Импорт_Заголовок) = Тип("Неопределено") Тогда
		Импорт_Заголовок = Новый Структура(
			ВРЕГ("ВерсияФормата, Кодировка, Отправитель, Получатель, ДатаСоздания, ВремяСоздания, ДатаНачала, ДатаКонца"));
	КонецЕсли;
	
	Значение = "";
	Тег = "";
	РазобратьТеговуюСтроку(ТекстСтрокиЗаголовка, Тег, Значение);
	
	Если Импорт_Заголовок.Свойство(Тег) Тогда
		
		Импорт_Заголовок[Тег] = Значение;
		
	Иначе
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неверный реквизит заголовка, строка %1 : %2'"), Импорт_ТекущаяСтрока - 1, ТекстСтрокиЗаголовка);
		СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
		
	КонецЕсли;
	
КонецФункции

// Процедура проверяет на пустое значение
//
Процедура ПроверитьНаПустоеЗначениеИмпорта(КешСвойствДокументов, СтрокаИмпорта, ИмяСвойства, ПредставлениеСвойства)
	
	ВариантНеПустых = ПолучитьВариантНеПустых(СтрокаИмпорта.ТипДокумента);
	Если ВариантНеПустых = 0 Тогда
		СтруктураСвойств = КешСвойствДокументов[ВариантНеПустых][СтрокаИмпорта.ВидДокумента];
	Иначе
		СтруктураСвойств = КешСвойствДокументов[ВариантНеПустых];
	КонецЕсли;
	
	Если СтруктураСвойств.Свойство(ИмяСвойства) Тогда
		Если ПустаяСтрока(СтрокаИмпорта[ИмяСвойства]) Тогда
			Стр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка в файле. Не заполнено ""%1""'"), ПредставлениеСвойства);
			ДобавитьЗамечание(СтрокаИмпорта, 3, Стр);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Функция проверяет вариант не пустых
//
Функция ПолучитьВариантНеПустых(ТипДокумента)
	
	Если ТипДокумента < 3
		ИЛИ ТипДокумента = 11
		ИЛИ ТипДокумента = 12 Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат 1;
	
КонецФункции

// Процедура создает список не найденных контрагентов
//
Процедура СписокНеНайденных(СтрокаДокумента, ДеревоКонтрагентов) Экспорт
	
	Если СтрокаДокумента.НомерСтроки = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НайденКонтрагент = ТипЗнч(СтрокаДокумента.Контрагент)      <> Тип("Строка");
	НайденСчет       = ТипЗнч(СтрокаДокумента.СчетКонтрагента) <> Тип("Строка");
	НайденДоговор    = ТипЗнч(СтрокаДокумента.Договор)         <> Тип("Строка");
	
	ТипКонтрагента   = ?(СтрокаДокумента.Исходящий, "ПОЛУЧАТЕЛЬ", "ПЛАТЕЛЬЩИК");
	
	ПолеПоиска       = "ИНН";
	ЗначениеПоиска   = СтрокаДокумента[ТипКонтрагента + ПолеПоиска];
	// Если ИНН контрагента в файле не задан, то ищем по имени
	Если ПустаяСтрока(ЗначениеПоиска) Тогда
		ПолеПоиска     = "Наименование";
		ЗначениеПоиска = СтрокаДокумента[ТипКонтрагента + "1"];
		
		// Если наименование в секции ПЛАТЕЛЬЩИК1/ПОЛУЧАТЕЛЬ1 отсутствует,
		// берем из представление напрямую из секции ПЛАТЕЛЬЩИК/ПОЛУЧАТЕЛЬ -
		// т.к. ИНН не заполнен, там, по нашему формату должно быть чистое наименование, либо наименование + адрес (по формату из приказа Минифина 107н)
		Если ПустаяСтрока(ЗначениеПоиска) Тогда
			ЗначениеПоиска = СтрокаДокумента[ТипКонтрагента];
		КонецЕсли;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("Представление, Значение", ПолеПоиска, ЗначениеПоиска);
	НайденныеЗаписиОКонтрагенте = ДеревоКонтрагентов.Строки.НайтиСтроки(СтруктураПоиска, Истина);
	
	// Контрагент
	Если НайденныеЗаписиОКонтрагенте.Количество() = 0 Тогда
		
		НовыйКонтрагент = ДеревоКонтрагентов.Строки.Добавить();
		Окончание = ?(СтрокаДокумента[ТипКонтрагента + "1"] = "", "", "1");
		НовыйКонтрагент.Представление = СтрокаДокумента[ТипКонтрагента + Окончание];
		НовыйКонтрагент.НомСтроки     = СтрокаДокумента.НомерСтроки;
		НовыйКонтрагент.Значение      = СтрокаДокумента.ВидКонтрагента;
		
		ДобавитьОписаниеНовогоРеквизита("Наименование",    Окончание,        ТипКонтрагента, НовыйКонтрагент.Строки, СтрокаДокумента);
		ДобавитьОписаниеНовогоРеквизита("ИНН",             "ИНН",            ТипКонтрагента, НовыйКонтрагент.Строки, СтрокаДокумента);
		ДобавитьОписаниеНовогоРеквизита("КПП",             "КПП",            ТипКонтрагента, НовыйКонтрагент.Строки, СтрокаДокумента);
		
		Если НайденКонтрагент Тогда
			НовыйКонтрагент.Реквизит = СтрокаДокумента.Контрагент;
		КонецЕсли;
		
	Иначе
		инд = 0;
		НайденВерныйКонтрагент = Истина;
		Если ПолеПоиска = "ИНН" Тогда
			ПолеПоиска     = "КПП";
			ЗначениеПоиска = СтрокаДокумента[ТипКонтрагента + ПолеПоиска];
			Если НЕ ПустаяСтрока(ЗначениеПоиска) И ЗначениеПоиска <> "0" Тогда
				СтруктураПоискаКПП = Новый Структура("Представление, Значение", ПолеПоиска, ЗначениеПоиска);
				Для каждого НайденнаяЗаписьОКонтрагенте Из НайденныеЗаписиОКонтрагенте Цикл
					НайденныйКонтрагент = НайденнаяЗаписьОКонтрагенте.Родитель;
					НайденныеЗаписиОКонтрагентеКПП = НайденныйКонтрагент.Строки.НайтиСтроки(СтруктураПоискаКПП, Истина);
					Если НайденныеЗаписиОКонтрагентеКПП.Количество() > 0 Тогда
						Если СтрокаДокумента.Исходящий Тогда
							НайденВерныйКонтрагент = Ложь;
							Для Каждого СтрокаМассива ИЗ НайденныеЗаписиОКонтрагентеКПП Цикл
								НайденныйКонтрагентКПП = СтрокаМассива.Родитель;
								Если НайденныйКонтрагентКПП.Значение = СтрокаДокумента.ВидКонтрагента Тогда
									НайденВерныйКонтрагент = Истина;
									Прервать;
								КонецЕсли;
							КонецЦикла;
							Если НайденВерныйКонтрагент Тогда
								Прервать;
							КонецЕсли;
						Иначе
							НайденВерныйКонтрагент = Истина;
							Прервать;
						КонецЕсли;
					КонецЕсли;
					
					инд = инд + 1;
					НайденВерныйКонтрагент = Ложь;
				КонецЦикла;
			Иначе
				Если СтрокаДокумента.Исходящий Тогда 
					Для каждого НайденнаяЗаписьОКонтрагенте Из НайденныеЗаписиОКонтрагенте Цикл
						НайденныйКонтрагент = НайденнаяЗаписьОКонтрагенте.Родитель;
						Если НайденныйКонтрагент.Значение = СтрокаДокумента.ВидКонтрагента Тогда
							НайденВерныйКонтрагент = Истина;
							Прервать;
						КонецЕсли;
						
						инд = инд + 1;
						НайденВерныйКонтрагент = Ложь;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НайденВерныйКонтрагент Тогда
			НайденнаяЗаписьОКонтрагенте = НайденныеЗаписиОКонтрагенте[инд];
			НовыйКонтрагент = НайденнаяЗаписьОКонтрагенте.Родитель;
			НовыйКонтрагент.УчаствуетВНесколькихСтроках = Истина;
			НовыйКонтрагент.ДопСтрокиВКоторыхУчаствуетКонтрагент.Добавить(СтрокаДокумента.НомерСтроки);
			
			Если НовыйКонтрагент = Неопределено Тогда
				НовыйКонтрагент = НайденнаяЗаписьОКонтрагенте;
			КонецЕсли;
		Иначе
			НовыйКонтрагент = ДеревоКонтрагентов.Строки.Добавить();
			Окончание = ?(СтрокаДокумента[ТипКонтрагента + "1"] = "", "", "1");
			НовыйКонтрагент.Представление = СтрокаДокумента[ТипКонтрагента + Окончание];
			НовыйКонтрагент.НомСтроки     = СтрокаДокумента.НомерСтроки;
			НовыйКонтрагент.Значение      = СтрокаДокумента.ВидКонтрагента;
			
			ДобавитьОписаниеНовогоРеквизита("Наименование",    Окончание,        ТипКонтрагента, НовыйКонтрагент.Строки, СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("ИНН",             "ИНН",            ТипКонтрагента, НовыйКонтрагент.Строки, СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("КПП",             "КПП",            ТипКонтрагента, НовыйКонтрагент.Строки, СтрокаДокумента);
			
			Если НайденКонтрагент Тогда
				НовыйКонтрагент.Реквизит = СтрокаДокумента.Контрагент;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	//СчетКонтрагента
	НайденныеСтроки = НовыйКонтрагент.Строки.Найти(СтрокаДокумента[ТипКонтрагента + "СЧЕТ"], "Значение");
	Если НЕ НайденСчет И НайденныеСтроки = Неопределено Тогда
		
		РеквизитыНовогоКонтрагента = ДобавитьОписаниеНовогоРеквизита("Р/счет", "СЧЕТ", ТипКонтрагента, НовыйКонтрагент.Строки, СтрокаДокумента);
		ПрямыеРасчеты = ПустаяСтрока(СтрокаДокумента[ТипКонтрагента + "2"]);
		
		Если ПрямыеРасчеты Тогда
			ДобавитьОписаниеНовогоРеквизита("Банк",            "БАНК1",   ТипКонтрагента, РеквизитыНовогоКонтрагента.Строки, СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Город банка",     "БАНК2",   ТипКонтрагента, РеквизитыНовогоКонтрагента.Строки, СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Код банка",       "БИК",     ТипКонтрагента, РеквизитыНовогоКонтрагента.Строки, СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Кор. счет банка", "КОРСЧЕТ", ТипКонтрагента, РеквизитыНовогоКонтрагента.Строки, СтрокаДокумента);
		Иначе
			ДобавитьОписаниеНовогоРеквизита("Банк",                     "3",        ТипКонтрагента, РеквизитыНовогоКонтрагента.Строки, СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Город банка",              "4",        ТипКонтрагента, РеквизитыНовогоКонтрагента.Строки, СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Кор. счет банка",          "РАСЧСЧЕТ", ТипКонтрагента, РеквизитыНовогоКонтрагента.Строки, СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("РЦ банка",                 "БАНК1",    ТипКонтрагента, РеквизитыНовогоКонтрагента.Строки, СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Местонахождение РЦ банка", "БАНК2",    ТипКонтрагента, РеквизитыНовогоКонтрагента.Строки, СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Код РЦ банка",             "БИК",      ТипКонтрагента, РеквизитыНовогоКонтрагента.Строки, СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Кор. счет РЦ банка",       "КОРСЧЕТ",  ТипКонтрагента, РеквизитыНовогоКонтрагента.Строки, СтрокаДокумента);
		КонецЕсли;
		
	КонецЕсли;
	
	Если НовыйКонтрагент.Значение <> "Сотрудник" Тогда
		//ВидДоговора
		Если НЕ НайденДоговор Тогда
			ВидыДоговоров = УчетДенежныхСредствКлиентСервер.ОпределитьВидДоговораСКонтрагентом(СтрокаДокумента.ВидОперации);
			Если ВидыДоговоров.Количество() > 0 Тогда
				ВидДоговора = Строка(ВидыДоговоров[0]);
			Иначе
				ВидДоговора = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		//Договор
		Если ВидДоговора <> Неопределено Тогда
			НайденныеСтроки = НовыйКонтрагент.Строки.Найти(ВидДоговора, "Значение");
			Если НЕ НайденДоговор И НайденныеСтроки = Неопределено Тогда
				РеквизитыНовогоКонтрагента = НовыйКонтрагент.Строки.Добавить();
				РеквизитыНовогоКонтрагента.Представление = "Договор";
				РеквизитыНовогоКонтрагента.Значение      = ВидДоговора;
				ДобавитьРеквизитыДоговора(РеквизитыНовогоКонтрагента.Строки, ВидДоговора);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли НовыйКонтрагент.Значение = "Сотрудник" Тогда
		НайденныеСтроки = НовыйКонтрагент.Строки.Найти("Договор", "Представление");
		Пока НайденныеСтроки <> Неопределено Цикл
			НовыйКонтрагент.Строки.Удалить(НайденныеСтроки);
			НайденныеСтроки = НовыйКонтрагент.Строки.Найти("Договор", "Представление");
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // СписокНеНайденных

Процедура ДобавитьРеквизитыДоговора(РеквизитыНовогоКонтрагента, ВидДоговора) Экспорт
	
	РеквизитыДоговора = РеквизитыНовогоКонтрагента.Добавить();
	РеквизитыДоговора.Представление = "Наименование";
	РеквизитыДоговора.Значение      = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Основной договор %1'"), НРег(ВидДоговора));
	
	РеквизитыДоговора = РеквизитыНовогоКонтрагента.Добавить();
	РеквизитыДоговора.Представление = "Вид";
	РеквизитыДоговора.Значение      = ВидДоговора;
	
	РеквизитыДоговора = РеквизитыНовогоКонтрагента.Добавить();
	РеквизитыДоговора.Представление = "Ведение взаиморасчетов";
	РеквизитыДоговора.Значение      = "По договору в целом";
	
КонецПроцедуры

// Функция добавляет и возвращает описание нового реквизита.
//
Функция ДобавитьОписаниеНовогоРеквизита(Представление, Реквизит, ТипКонтрагента, НовыйКонтрагент, СтрокаДокумента)
	
	РеквизитыНовогоКонтрагента = НовыйКонтрагент.Добавить();
	
	РеквизитыНовогоКонтрагента.Представление = Представление;
	РеквизитыНовогоКонтрагента.Значение      = СтрокаДокумента[ТипКонтрагента + Реквизит];
	РеквизитыНовогоКонтрагента.Реквизит      = ТипКонтрагента + Реквизит;
	
	Возврат РеквизитыНовогоКонтрагента;
	
КонецФункции

// Функция осуществляет поиск банковского счета и возвращает ссылку на него
//
Функция ПоискБанковскогоСчета(Номер)
	
	Запрос = Новый запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БанковскиеСчета.Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.НомерСчета = &Номер";
	
	Запрос.УстановитьПараметр("Номер", Номер);
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		Возврат Результат.Выгрузить()[0].Ссылка;
		
	Иначе
		
		Возврат Справочники.БанковскиеСчета.ПустаяСсылка();
		
	КонецЕсли;
	
КонецФункции

// Функция преобразует структуру настроек "по умолчанию" для документов
//
Функция ПолучитьСтруктуруНастроек(НастройкаЗаполнения)
	
	СоответствиеНастроек = Новый Соответствие();
	СоответствиеНастроек.Вставить("Поступление на расчетный счет", Новый Структура("Проводить, СтатьяДДС", Ложь));
	СоответствиеНастроек.Вставить("Списание с расчетного счета",   Новый Структура("Проводить, СтатьяДДС", Ложь));
	СоответствиеНастроек.Вставить("КомиссияБанка",                 Новый Структура("Проводить, СтатьяДДС", Ложь));
	СоответствиеНастроек.Вставить("ОплатаТруда",                   Новый Структура("Проводить, СтатьяДДС", Ложь));
	
	Для каждого СтрокаНастройки Из НастройкаЗаполнения Цикл
		СоответствиеНастроек[СтрокаНастройки[0]].Проводить = СтрокаНастройки[1];
		СоответствиеНастроек[СтрокаНастройки[0]].СтатьяДДС = СтрокаНастройки[2];
	КонецЦикла;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиДвиженияДенежныхСредств") Тогда
		Запрос = Новый Запрос;
		
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 2
		|	СтатьиДвиженияДенежныхСредств.Ссылка
		|ИЗ
		|	Справочник.СтатьиДвиженияДенежныхСредств КАК СтатьиДвиженияДенежныхСредств
		|ГДЕ
		|	СтатьиДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоТекущейДеятельности)
		|	И СтатьиДвиженияДенежныхСредств.ПометкаУдаления = ЛОЖЬ";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			СоответствиеНастроек["КомиссияБанка"].СтатьяДДС = Выборка.Ссылка;
		КонецЕсли;
		
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 2
		|	СтатьиДвиженияДенежныхСредств.Ссылка
		|ИЗ
		|	Справочник.СтатьиДвиженияДенежныхСредств КАК СтатьиДвиженияДенежныхСредств
		|ГДЕ
		|	СтатьиДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийДенежныхСредств.ОплатаТруда)
		|	И СтатьиДвиженияДенежныхСредств.ПометкаУдаления = ЛОЖЬ";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			СоответствиеНастроек["ОплатаТруда"].СтатьяДДС = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СоответствиеНастроек;
	
КонецФункции

//////////////////////////////////////

// Процедура загружает платежные документы в информационную базу
//
Процедура Загрузить(ДокументыКИмпорту, Импорт_Заголовок, Организация,
		Импорт_РасчетныеСчета, ИспользоватьГраницуОбработки, НастройкиПоУмолчаниюДляДокументов, ДатаГраницыОбработки, БанковскийСчет,
		СтекОповещений = Неопределено, УдалятьПлатежныеДокументыОтсутствующиеВВыписке = Ложь) Экспорт
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Если СтекОповещений = Неопределено Тогда
		СтекОповещений = Новый Массив;
	КонецЕсли;
	
	НачалоИнтервалаЗагрузки  = ПолучитьДатуИзСтроки(Импорт_Заголовок.ДатаНачала);
	КонецИнтервалаЗагрузки   = ПолучитьДатуИзСтроки(Импорт_Заголовок.ДатаКонца);
	
	СписокБанковскихСчетовОрганизации = ПолучитьСписокСвоихСчетов(Организация);
	ПодразделениеПоУмолчанию = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, "ПодразделениеОрганизации");
	Если НЕ ЗначениеЗаполнено(ПодразделениеПоУмолчанию) И БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям()
		И Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация") Тогда
		ПодразделениеПоУмолчанию = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");
	КонецЕсли;
	
	// Загружаем отмеченные секции документов.
	Для каждого СтрокаСекции Из ДокументыКИмпорту Цикл
		
		Если СтрокаСекции.Загружать Тогда
			
			РезультатПроверки = ПроверитьДокументДляЗагрузки(СтрокаСекции);
			
			Если ПустаяСтрока(РезультатПроверки) Тогда
				
				Если НЕ ЗначениеЗаполнено(СтрокаСекции.Документ) Тогда
					// В ИБ не найден документ, необходимо создать новый.
					ОбъектДокумента = СоздатьНовыйПлатежныйДокумент(СтрокаСекции.ВидДокумента, СтрокаСекции.Номер, СтрокаСекции.Дата);
				Иначе
					// В ИБ найден документ, необходимо получить его объект.
					ОбъектДокумента = СтрокаСекции.Документ.ПолучитьОбъект();
					//Если после прочтения данных документ попавший в список был удален, то необходимо создать новый
					Если ОбъектДокумента = Неопределено Тогда
						ОбъектДокумента = СоздатьНовыйПлатежныйДокумент(СтрокаСекции.ВидДокумента, СтрокаСекции.Номер, СтрокаСекции.Дата);
					КонецЕсли;
				КонецЕсли;
				
				ЭтоНовыйДокумент = ОбъектДокумента.ЭтоНовый();
				
				// Заполняем все реквизиты документа.
				ЗаполнитьРеквизитПлатежногоДокумента(ОбъектДокумента, СтрокаСекции, ЭтоНовыйДокумент,
					Организация, ПодразделениеПоУмолчанию, СписокБанковскихСчетовОрганизации, ВалютаРегламентированногоУчета);
				
				//Если контрагент не создан, то добавляем его реквизиты в табличную часть для дальнейшего использования
				Если СтрокаСекции.РеквизитыКонтрагента <> Неопределено Тогда
					ОбъектДокумента.РеквизитыКонтрагента.Загрузить(СтрокаСекции.РеквизитыКонтрагента);
				КонецЕсли;
				
				Если ОбъектДокумента.ПометкаУдаления Тогда
					ЗадатьПометкуНаУдаление(ОбъектДокумента, Ложь);
				КонецЕсли;
				
				ЗаписатьОбъект(ОбъектДокумента, СтрокаСекции, ЭтоНовыйДокумент, НастройкиПоУмолчаниюДляДокументов, СтекОповещений);
				
				Если НЕ ОбъектДокумента.ЭтоНовый() Тогда
					СтрокаСекции.Документ = ОбъектДокумента.Ссылка;
					Если СтрокаСекции.ВидДокумента = "ПлатежноеПоручение" ИЛИ СтрокаСекции.ВидДокумента = "ПлатежноеТребование" Тогда
						РеквизитДаты   = "Дата";
						РеквизитНомера = "Номер";
					Иначе
						РеквизитДаты   = "ДатаВходящегоДокумента";
						РеквизитНомера = "НомерВходящегоДокумента";
					КонецЕсли;
					
					СтрокаСекции.НомерДок = ОбъектДокумента[РеквизитНомера];
				КонецЕсли;
				
			Иначе
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Платежный документ ""%1"" №%2 от %3 не может быть загружен:%4%5!'"),
					СтрокаСекции.Операция, СтрокаСекции.Номер, СтрокаСекции.Дата, Символы.ПС, РезультатПроверки);
				СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ УдалятьПлатежныеДокументыОтсутствующиеВВыписке Тогда
		Возврат;
	КонецЕсли;
	
	// Составляем список счетов.
	СписокСчетов = Новый СписокЗначений;
	
	Для каждого СтрокаСчета Из Импорт_РасчетныеСчета Цикл
		Если СписокСчетов.НайтиПоЗначению(СокрЛП(СтрокаСчета.РасчСчет)) = Неопределено Тогда
			СписокСчетов.Добавить(СокрЛП(СтрокаСчета.РасчСчет));
		КонецЕсли;
	КонецЦикла;
	
	//Платежные документы, отсутствующие в списке загруженным помечаем на удаление
	ВыборкаДокументов = Новый Запрос;
	ВыборкаДокументов.Текст =
	"ВЫБРАТЬ
	|	СписаниеСРасчетногоСчета.Ссылка КАК Ссылка,
	|	СписаниеСРасчетногоСчета.ДатаВходящегоДокумента КАК ДатаДокумента,
	|	СписаниеСРасчетногоСчета.СчетОрганизации.НомерСчета КАК НомерСчета,
	|	СписаниеСРасчетногоСчета.НеПодтвержденоВыпискойБанка
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|ГДЕ
	|	СписаниеСРасчетногоСчета.Дата >= &ДатаНач
	|	И СписаниеСРасчетногоСчета.Дата <= &ДатаКон
	|	И СписаниеСРасчетногоСчета.Организация = &Организация
	|	И СписаниеСРасчетногоСчета.СчетОрганизации.НомерСчета В(&СписокСчетов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеНаРасчетныйСчет.Ссылка,
	|	ПоступлениеНаРасчетныйСчет.ДатаВходящегоДокумента,
	|	ПоступлениеНаРасчетныйСчет.СчетОрганизации.НомерСчета,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ПоступлениеНаРасчетныйСчет КАК ПоступлениеНаРасчетныйСчет
	|ГДЕ
	|	ПоступлениеНаРасчетныйСчет.Дата >= &ДатаНач
	|	И ПоступлениеНаРасчетныйСчет.Дата <= &ДатаКон
	|	И ПоступлениеНаРасчетныйСчет.Организация = &Организация
	|	И ПоступлениеНаРасчетныйСчет.СчетОрганизации.НомерСчета В(&СписокСчетов)";
	
	ВыборкаДокументов.УстановитьПараметр("ДатаНач",      НачалоДня(НачалоИнтервалаЗагрузки));
	ВыборкаДокументов.УстановитьПараметр("ДатаКон",      КонецДня(КонецИнтервалаЗагрузки));
	ВыборкаДокументов.УстановитьПараметр("Организация",  Организация);
	ВыборкаДокументов.УстановитьПараметр("СписокСчетов", СписокСчетов);
	
	РезультатЗапроса = ВыборкаДокументов.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ДокументыКИмпорту.Индексы.Добавить("Документ");
		ДокументыНаУдаление = РезультатЗапроса.Выбрать();
		Пока ДокументыНаУдаление.Следующий() Цикл
			СтрокаВТаблицеИмпорта = ДокументыКИмпорту.НайтиСтроки(Новый Структура("Документ", ДокументыНаУдаление.Ссылка));
			Если СтрокаВТаблицеИмпорта.Количество() = 0 И НЕ ДокументыНаУдаление.НеПодтвержденоВыпискойБанка Тогда
				ОбъектДокументаКУдаление = ДокументыНаУдаление.Ссылка.ПолучитьОбъект();
				ЗадатьПометкуНаУдаление(ОбъектДокументаКУдаление, Истина);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // Загрузить

// Процедура устанавливает/снимает пометку удаления с объекта
//
Процедура ЗадатьПометкуНаУдаление(ОбъектДляПометки, Пометка)
	
	НазваниеОбъекта = ПолучитьПредставлениеОбъекта(ОбъектДляПометки);
	НазваниеДействия = ?(Пометка, НСтр("ru = ' помечен на удаление'"), НСтр("ru = ' отменена пометка на удаление'"));
	
	Попытка
		ОбъектДляПометки.Записать(РежимЗаписиДокумента.Запись);
		ОбъектДляПометки.УстановитьПометкуУдаления(Пометка);
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1:%2.'"), Врег(Лев(НазваниеОбъекта, 1)) + Сред(НазваниеОбъекта, 2), НазваниеДействия);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1: не %2. Произошли ошибки при записи!'"),
			Врег(Лев(НазваниеОбъекта, 1)) + Сред(НазваниеОбъекта, 2), НазваниеДействия);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
		ОписаниеОшибки = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки.Описание);
	КонецПопытки
	
КонецПроцедуры

// Процедура записывает объект в информационную базу данных
//
Процедура ЗаписатьОбъект(ОбъектДляЗаписи, СтрокаСекции, ЭтоНовыйДокумент, НастройкиПоУмолчаниюДляДокументов, СтекОповещений)
	
	ТипДокумента = ТипЗнч(ОбъектДляЗаписи);
	
	Если ТипДокумента = Тип("ДокументОбъект.СписаниеСРасчетногоСчета") Тогда
		ИмяДокумента = "Списание с расчетного счета";
		ОбъектДляЗаписи.НеПодтвержденоВыпискойБанка = Ложь;
	ИначеЕсли ТипДокумента = Тип("ДокументОбъект.ПоступлениеНаРасчетныйСчет") Тогда
		ИмяДокумента = "Поступление на расчетный счет";
	Иначе
		ИмяДокумента = ОбъектДляЗаписи.Метаданные().Синоним;
	КонецЕсли;
	
	Проводить = НастройкиПоУмолчаниюДляДокументов[ИмяДокумента].Проводить;
	УстановитьСвойство(ОбъектДляЗаписи, "Комментарий", НСтр("ru = 'Загружен из Клиент-Банка'"),, Истина);
	
	ОбъектМодифицирован = ОбъектДляЗаписи.Модифицированность();
	ОбъектПроведен      = ОбъектДляЗаписи.Проведен;
	
	ВершинаСтека = Неопределено;
	Если ОбъектМодифицирован Тогда
		Попытка
			Если ОбъектПроведен Тогда
				ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				СтрокаСекции.Проведен = НЕ ОбъектПроведен;
			Иначе
				ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			
			СтрокаСекции.СостояниеДокумента = 0;
			СтекОповещений.Добавить(Новый Структура("Ссылка", ОбъектДляЗаписи.Ссылка));
			
		Исключение
			НазваниеОбъекта = ПолучитьПредставлениеОбъекта(ОбъектДляЗаписи);
			ТекстСообщения  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1%2. Произошли ошибки при записи документа!'"),
				Врег(Лев(НазваниеОбъекта, 1)) + Сред(НазваниеОбъекта, 2),
				?(ЭтоНовыйДокумент, НСтр("ru = ' не создан'"), НСтр("ru = ' не записан'")));
			
			СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
			
			ОписаниеОшибки = ИнформацияОбОшибке();
			ТекстОшибки = НСтр("ru = '%1
				|%2'");
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Данные. Изменение'"),
				УровеньЖурналаРегистрации.Ошибка, ОбъектДляЗаписи.Метаданные(),
				?(ЭтоНовыйДокумент, "", ОбъектДляЗаписи.Ссылка),
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
					ОписаниеОшибки.Описание,
					?(ЭтоНовыйДокумент, ТекстСообщения, НСтр("ru = 'Произошли ошибки при записи документа!'"))));
			
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	НазваниеОбъекта = ПолучитьПредставлениеОбъекта(ОбъектДляЗаписи);
	
	Если Проводить И (ОбъектМодифицирован ИЛИ НЕ ОбъектПроведен) Тогда
		Попытка
			ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.Проведение);
			
			СтрокаСекции.Проведен = ОбъектДляЗаписи.Проведен;
			СтрокаСекции.СостояниеДокумента = 1;
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 не проведен. Произошли ошибки при проведении!'"),
				Врег(Лев(НазваниеОбъекта, 1)) + Сред(НазваниеОбъекта, 2));
			СтекОповещений.Добавить(Новый Структура("Текст, Ссылка", ТекстСообщения, ОбъектДляЗаписи.Ссылка));
			
			ОписаниеОшибки = ИнформацияОбОшибке();
			ТекстОшибки = НСтр("ru = '%1
				|Произошли ошибки при проведении!'");
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Данные. Проведение'"),
				УровеньЖурналаРегистрации.Ошибка, ОбъектДляЗаписи.Метаданные(), ОбъектДляЗаписи.Ссылка,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
				ОписаниеОшибки.Описание));
		КонецПопытки
	КонецЕсли;
	
КонецПроцедуры // ЗаписатьОбъект

// Процедура устанавливает значение свойства
//
Процедура УстановитьСвойство(Объект, ИмяСвойства, ЗначениеСвойства, ОбязательнаяЗаменаСтарогоЗначения = Ложь, ЭтоНовыйДокумент)
	
	Если ЗначениеСвойства <> Неопределено И Объект[ИмяСвойства] <> ЗначениеСвойства Тогда
		
		Если ЭтоНовыйДокумент
			ИЛИ (НЕ ЗначениеЗаполнено(Объект[ИмяСвойства]) ИЛИ ОбязательнаяЗаменаСтарогоЗначения)
			ИЛИ ТипЗнч(Объект[ИмяСвойства]) = Тип("Булево")
			ИЛИ ТипЗнч(Объект[ИмяСвойства]) = Тип("Дата") Тогда
			
			Объект[ИмяСвойства] = ЗначениеСвойства;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура рассчитывает сумму взаиморасчетов
//
Процедура РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ОбъектДокумента, ЭтоНовыйДокумент)
	
	УстановитьСвойство(СтрокаПлатеж, "СуммаВзаиморасчетов",
		РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
			СтрокаПлатеж.СуммаПлатежа, ОбъектДокумента.ВалютаДокумента,
			СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов,
			1,
			СтрокаПлатеж.КурсВзаиморасчетов,
			1,
			СтрокаПлатеж.КратностьВзаиморасчетов)
		,, ЭтоНовыйДокумент);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитПлатежногоДокумента(ОбъектДокумента, СтрокаСекции, ЭтоНовыйДокумент, Организация, ПодразделениеПоУмолчанию, СписокБанковскихСчетовОрганизации, ВалютаРегламентированногоУчета)
	
	Если ТипЗнч(ОбъектДокумента) = Тип("ДокументОбъект.СписаниеСРасчетногоСчета") Тогда
		ЗаполнитьРеквизитПлатежногоОрдераСписание(
			ОбъектДокумента, СтрокаСекции, ЭтоНовыйДокумент, Организация, ПодразделениеПоУмолчанию, СписокБанковскихСчетовОрганизации,
			ВалютаРегламентированногоУчета);
	ИначеЕсли ТипЗнч(ОбъектДокумента) = Тип("ДокументОбъект.ПоступлениеНаРасчетныйСчет") Тогда
		ЗаполнитьРеквизитПлатежногоОрдераПоступление(
			ОбъектДокумента, СтрокаСекции, ЭтоНовыйДокумент, Организация, ПодразделениеПоУмолчанию, СписокБанковскихСчетовОрганизации,
			ВалютаРегламентированногоУчета);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитПлатежногоОрдераСписание(ОбъектДокумента, ИсходныеДанные, ЭтоНовыйДокумент, Организация, ПодразделениеПоУмолчанию, СписокБанковскихСчетовОрганизации, ВалютаРегламентированногоУчета)
	
	//Организация
	ДатаВхДокумента = ПолучитьДатуИзСтроки(ИсходныеДанные.Дата);
	Если ЗначениеЗаполнено(ДатаВхДокумента) Тогда
		УстановитьСвойство(ОбъектДокумента, "ДатаВходящегоДокумента", ДатаВхДокумента,, ЭтоНовыйДокумент);
	Иначе
		УстановитьСвойство(ОбъектДокумента, "ДатаВходящегоДокумента", ИсходныеДанные.ДатаДок,, ЭтоНовыйДокумент);
	КонецЕсли;
	
	УстановитьСвойство(ОбъектДокумента, "НомерВходящегоДокумента",    ИсходныеДанные.НомерДок,, ЭтоНовыйДокумент);
	УстановитьСвойство(ОбъектДокумента, "Организация", Организация,,  ЭтоНовыйДокумент);
	
	Если ЗначениеЗаполнено(ПодразделениеПоУмолчанию) И НЕ ЗначениеЗаполнено(ОбъектДокумента.ПодразделениеОрганизации) Тогда
		УстановитьСвойство(ОбъектДокумента, "ПодразделениеОрганизации", ПодразделениеПоУмолчанию,, ЭтоНовыйДокумент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИсходныеДанные.Списано) Тогда
		УстановитьСвойство(ОбъектДокумента, "Дата", УчетДенежныхСредствБП.УстановитьВремяДокумента(ИсходныеДанные.Списано),, ЭтоНовыйДокумент);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумента.Дата) Тогда
		УстановитьСвойство(ОбъектДокумента, "Дата", УчетДенежныхСредствБП.УстановитьВремяДокумента(ИсходныеДанные.ДатаДок),, ЭтоНовыйДокумент);
	КонецЕсли;
	
	//ДокументОснование (платежное поручение)
	УстановитьСвойство(ОбъектДокумента, "ДокументОснование", ИсходныеДанные.ДокументОснование,, ЭтоНовыйДокумент);
	
	//Контрагент, ДоговорКонтрагента
	Если ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
		УстановитьСвойство(ОбъектДокумента, "Контрагент", Организация,, ЭтоНовыйДокумент);
	Иначе
		УстановитьСвойство(ОбъектДокумента, "Контрагент", ИсходныеДанные.Контрагент,, ЭтоНовыйДокумент);
	КонецЕсли;
	
	КоличествоСтрокРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Количество();
	Если КоличествоСтрокРасшифровки = 0 Тогда
		СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
		КоличествоСтрокРасшифровки = 1;
	Иначе
		СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
	КонецЕсли;
	
	ОднаСтрокаВРасшифровкеПлатежа = КоличествоСтрокРасшифровки = 1;
	УстановитьСвойство(СтрокаРасшифровки, "ДоговорКонтрагента",
		?(ИсходныеДанные.Договор = "Не найден", Неопределено, ИсходныеДанные.Договор), Истина, ЭтоНовыйДокумент); // Договор заменяем всегда
	УстановитьСвойство(СтрокаРасшифровки, "СпособПогашенияЗадолженности",
		Перечисления.СпособыПогашенияЗадолженности.Автоматически,, ЭтоНовыйДокумент);
	
	//СчетОрганизации, СчетКонтрагента
	УстановитьСвойство(ОбъектДокумента,     "СчетОрганизации", ИсходныеДанные.СчетОрганизации,, ЭтоНовыйДокумент);
	Если ТипЗнч(ИсходныеДанные.СчетКонтрагента) <> Тип("Строка") Тогда
		УстановитьСвойство(ОбъектДокумента, "СчетКонтрагента", ИсходныеДанные.СчетКонтрагента,, ЭтоНовыйДокумент);
	КонецЕсли;
	
	//ВалютаДокумента
	УстановитьСвойство(ОбъектДокумента, "ВалютаДокумента",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектДокумента.СчетОрганизации, "ВалютаДенежныхСредств"),, ЭтоНовыйДокумент);
	
	//ВидОперации
	УстановитьСвойство(ОбъектДокумента, "ВидОперации", ИсходныеДанные.ВидОперации, Истина, ЭтоНовыйДокумент); // Вид операции заменяем всегда
	
	//СтатьяДвиженияДенежныхСредств
	Если ОднаСтрокаВРасшифровкеПлатежа Тогда
		УстановитьСвойство(СтрокаРасшифровки, "ДоговорКонтрагента",
			?(ИсходныеДанные.Договор = "Не найден", Неопределено, ИсходныеДанные.Договор), Истина, ЭтоНовыйДокумент);
		УстановитьСвойство(СтрокаРасшифровки, "СпособПогашенияЗадолженности",
			Перечисления.СпособыПогашенияЗадолженности.Автоматически,, ЭтоНовыйДокумент);
		Если ЗначениеЗаполнено(ИсходныеДанные.СтатьяДДС) Тогда
			УстановитьСвойство(СтрокаРасшифровки, "СтатьяДвиженияДенежныхСредств",
				ИсходныеДанные.СтатьяДДС, Истина, ЭтоНовыйДокумент); // Статью ДДС заменяем всегда
		КонецЕсли;
		
	КонецЕсли;
	
	//СуммаДокумента
	УстановитьСвойство(ОбъектДокумента, "СуммаДокумента", ИсходныеДанные.СуммаДокумента, Истина, ЭтоНовыйДокумент); // Сумму заменяем всегда
	
	//РасшифровкаПлатежа
	ЕстьРасчетыСКонтрагентами = УчетДенежныхСредствКлиентСервер.ЕстьРасчетыСКонтрагентами(ОбъектДокумента.ВидОперации);
	ЕстьРасчетыПоКредитам     = УчетДенежныхСредствКлиентСервер.ЕстьРасчетыПоКредитам(ОбъектДокумента.ВидОперации);
	Если ОбъектДокумента.ЭтоНовый()
		ИЛИ ОднаСтрокаВРасшифровкеПлатежа И СтрокаРасшифровки.СуммаПлатежа <> ОбъектДокумента.СуммаДокумента Тогда
		
		СтрокаРасшифровки.СуммаПлатежа = ОбъектДокумента.СуммаДокумента;
		
		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			РассчитатьКурсИСуммуВзаиморасчетов(
				СтрокаРасшифровки, ПолучитьВалютуДоговора(СтрокаРасшифровки.ДоговорКонтрагента),
				ОбъектДокумента.Дата, ОбъектДокумента, ЭтоНовыйДокумент);
		КонецЕсли;
		
		Если ЕстьРасчетыСКонтрагентами Тогда
			Если ЗначениеЗаполнено(ИсходныеДанные.СтавкаНДС) Тогда
				СтрокаРасшифровки.СтавкаНДС = ИсходныеДанные.СтавкаНДС;
			ИначеЕсли НЕ УчетнаяПолитика.ПлательщикНДС(Организация, ОбъектДокумента.Дата) Тогда
				СтрокаРасшифровки.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			Иначе
				СтрокаРасшифровки.СтавкаНДС = УчетДенежныхСредствБП.ПолучитьСтавкуНДСПоДоговору(СтрокаРасшифровки.ДоговорКонтрагента);
			КонецЕсли;
			
			ЗначениеСтавкиНДС          = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаРасшифровки.СтавкаНДС);
			СтрокаРасшифровки.СуммаНДС = Окр(СтрокаРасшифровки.СуммаПлатежа*ЗначениеСтавкиНДС /(100 + ЗначениеСтавкиНДС), 2);
		КонецЕсли;
		
	КонецЕсли;
	
	//ВидОперации:ПеречислениеНалога
	Если ОбъектДокумента.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		
		ОбъектДокумента.РасшифровкаПлатежа.Очистить(); // при перечисление налога, Расшифровка платежа не нужна
		УстановитьСвойство(ОбъектДокумента, "СтатьяДвиженияДенежныхСредств", ИсходныеДанные.СтатьяДДС, Истина, ЭтоНовыйДокумент);
		
		КБК = ПлатежиВБюджетКлиентСервер.КодГлавногоАдминистратора(ИсходныеДанные.ПоказательКБК)
			+ ПлатежиВБюджетКлиентСервер.ШаблонКБК(ИсходныеДанные.ПоказательКБК, Истина);
		
		Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоКБК(КБК);
		УстановитьСвойство(ОбъектДокумента, "Налог", Налог, Истина, ЭтоНовыйДокумент);
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	1 КАК Приоритет,
		|	РеквизитыУплатыНалоговИПлатежейВБюджет.ВидПлатежа.СчетУчета КАК СчетУчета,
		|	РеквизитыУплатыНалоговИПлатежейВБюджет.ПоказательТипа КАК ПоказательТипа,
		|	РеквизитыУплатыНалоговИПлатежейВБюджет.ПоказательОснования КАК ПоказательОснования,
		|	РеквизитыУплатыНалоговИПлатежейВБюджет.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС
		|ПОМЕСТИТЬ ВТ_РеквизитыВБюджет
		|ИЗ
		|	РегистрСведений.РеквизитыУплатыНалоговИПлатежейВБюджет КАК РеквизитыУплатыНалоговИПлатежейВБюджет
		|ГДЕ
		|	РеквизитыУплатыНалоговИПлатежейВБюджет.ВидПлатежа.КодБК = &КодБК
		|	И РеквизитыУплатыНалоговИПлатежейВБюджет.ВидПлатежа.СчетУчета <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|	И РеквизитыУплатыНалоговИПлатежейВБюджет.Организация.ИНН = &ОрганизацияИНН
		|	И (&ОрганизацияКПП = ""0""
		|			ИЛИ РеквизитыУплатыНалоговИПлатежейВБюджет.Организация.КПП = &ОрганизацияКПП)
		|	И РеквизитыУплатыНалоговИПлатежейВБюджет.Получатель.ИНН = &ПолучательИНН
		|	И (&ПолучательКПП = ""0""
		|			ИЛИ РеквизитыУплатыНалоговИПлатежейВБюджет.Получатель.КПП = &ПолучательКПП)
		|	И РеквизитыУплатыНалоговИПлатежейВБюджет.СчетПолучателя.Банк.Код = &ПолучательБИК
		|	И РеквизитыУплатыНалоговИПлатежейВБюджет.СчетПолучателя.НомерСчета = &ПолучательНомерСчета
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	2,
		|	РеквизитыУплатыНалоговИПлатежейВБюджет.ВидПлатежа.СчетУчета,
		|	РеквизитыУплатыНалоговИПлатежейВБюджет.ПоказательТипа,
		|	РеквизитыУплатыНалоговИПлатежейВБюджет.ПоказательОснования,
		|	РеквизитыУплатыНалоговИПлатежейВБюджет.СтатьяДвиженияДенежныхСредств
		|ИЗ
		|	РегистрСведений.РеквизитыУплатыНалоговИПлатежейВБюджет КАК РеквизитыУплатыНалоговИПлатежейВБюджет
		|ГДЕ
		|	РеквизитыУплатыНалоговИПлатежейВБюджет.ВидПлатежа.КодБК = &КодБК
		|	И РеквизитыУплатыНалоговИПлатежейВБюджет.ВидПлатежа.СчетУчета <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|	И РеквизитыУплатыНалоговИПлатежейВБюджет.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|	И РеквизитыУплатыНалоговИПлатежейВБюджет.Получатель.ИНН = &ПолучательИНН
		|	И (&ПолучательКПП = ""0""
		|			ИЛИ РеквизитыУплатыНалоговИПлатежейВБюджет.Получатель.КПП = &ПолучательКПП)
		|	И РеквизитыУплатыНалоговИПлатежейВБюджет.СчетПолучателя.Банк.Код = &ПолучательБИК
		|	И РеквизитыУплатыНалоговИПлатежейВБюджет.СчетПолучателя.НомерСчета = &ПолучательНомерСчета
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	3,
		|	РеквизитыУплатыНалоговИПлатежейВБюджет.ВидПлатежа.СчетУчета,
		|	РеквизитыУплатыНалоговИПлатежейВБюджет.ПоказательТипа,
		|	РеквизитыУплатыНалоговИПлатежейВБюджет.ПоказательОснования,
		|	РеквизитыУплатыНалоговИПлатежейВБюджет.СтатьяДвиженияДенежныхСредств
		|ИЗ
		|	РегистрСведений.РеквизитыУплатыНалоговИПлатежейВБюджет КАК РеквизитыУплатыНалоговИПлатежейВБюджет
		|ГДЕ
		|	ПОДСТРОКА(РеквизитыУплатыНалоговИПлатежейВБюджет.ВидПлатежа.КодБК, 1, 13) = &КодБК_1_13
		|	И ПОДСТРОКА(РеквизитыУплатыНалоговИПлатежейВБюджет.ВидПлатежа.КодБК, 18, 3) = &КОСГУ
		|	И РеквизитыУплатыНалоговИПлатежейВБюджет.ВидПлатежа.СчетУчета <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|	И РеквизитыУплатыНалоговИПлатежейВБюджет.Организация.ИНН = &ОрганизацияИНН
		|	И (&ОрганизацияКПП = ""0""
		|			ИЛИ РеквизитыУплатыНалоговИПлатежейВБюджет.Организация.КПП = &ОрганизацияКПП)
		|	И РеквизитыУплатыНалоговИПлатежейВБюджет.Получатель.ИНН = &ПолучательИНН
		|	И (&ПолучательКПП = ""0""
		|			ИЛИ РеквизитыУплатыНалоговИПлатежейВБюджет.Получатель.КПП = &ПолучательКПП)
		|	И РеквизитыУплатыНалоговИПлатежейВБюджет.СчетПолучателя.Банк.Код = &ПолучательБИК
		|	И РеквизитыУплатыНалоговИПлатежейВБюджет.СчетПолучателя.НомерСчета = &ПолучательНомерСчета
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	4,
		|	РеквизитыУплатыНалоговИПлатежейВБюджет.ВидПлатежа.СчетУчета,
		|	РеквизитыУплатыНалоговИПлатежейВБюджет.ПоказательТипа,
		|	РеквизитыУплатыНалоговИПлатежейВБюджет.ПоказательОснования,
		|	РеквизитыУплатыНалоговИПлатежейВБюджет.СтатьяДвиженияДенежныхСредств
		|ИЗ
		|	РегистрСведений.РеквизитыУплатыНалоговИПлатежейВБюджет КАК РеквизитыУплатыНалоговИПлатежейВБюджет
		|ГДЕ
		|	ПОДСТРОКА(РеквизитыУплатыНалоговИПлатежейВБюджет.ВидПлатежа.КодБК, 1, 13) = &КодБК_1_13
		|	И ПОДСТРОКА(РеквизитыУплатыНалоговИПлатежейВБюджет.ВидПлатежа.КодБК, 18, 3) = &КОСГУ
		|	И РеквизитыУплатыНалоговИПлатежейВБюджет.ВидПлатежа.СчетУчета <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|	И РеквизитыУплатыНалоговИПлатежейВБюджет.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|	И РеквизитыУплатыНалоговИПлатежейВБюджет.Получатель.ИНН = &ПолучательИНН
		|	И (&ПолучательКПП = ""0""
		|			ИЛИ РеквизитыУплатыНалоговИПлатежейВБюджет.Получатель.КПП = &ПолучательКПП)
		|	И РеквизитыУплатыНалоговИПлатежейВБюджет.СчетПолучателя.Банк.Код = &ПолучательБИК
		|	И РеквизитыУплатыНалоговИПлатежейВБюджет.СчетПолучателя.НомерСчета = &ПолучательНомерСчета
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	5,
		|	РеквизитыУплатыНалоговИПлатежейВБюджет.ВидПлатежа.СчетУчета,
		|	РеквизитыУплатыНалоговИПлатежейВБюджет.ПоказательТипа,
		|	РеквизитыУплатыНалоговИПлатежейВБюджет.ПоказательОснования,
		|	РеквизитыУплатыНалоговИПлатежейВБюджет.СтатьяДвиженияДенежныхСредств
		|ИЗ
		|	РегистрСведений.РеквизитыУплатыНалоговИПлатежейВБюджет КАК РеквизитыУплатыНалоговИПлатежейВБюджет
		|ГДЕ
		|	ПОДСТРОКА(РеквизитыУплатыНалоговИПлатежейВБюджет.ВидПлатежа.КодБК, 1, 13) = &КодБК_1_13
		|	И ПОДСТРОКА(РеквизитыУплатыНалоговИПлатежейВБюджет.ВидПлатежа.КодБК, 18, 3) = &КОСГУ
		|	И РеквизитыУплатыНалоговИПлатежейВБюджет.ВидПлатежа.СчетУчета <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Приоритет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ВТ_РеквизитыВБюджет.Приоритет) КАК Приоритет
		|ПОМЕСТИТЬ ВТ_МаксимальныйПриоритет
		|ИЗ
		|	ВТ_РеквизитыВБюджет КАК ВТ_РеквизитыВБюджет
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Приоритет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_РеквизитыВБюджет.СчетУчета,
		|	ВТ_РеквизитыВБюджет.ПоказательТипа,
		|	ВТ_РеквизитыВБюджет.ПоказательОснования,
		|	ВТ_РеквизитыВБюджет.СтатьяДДС
		|ИЗ
		|	ВТ_РеквизитыВБюджет КАК ВТ_РеквизитыВБюджет
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_МаксимальныйПриоритет КАК ВТ_МаксимальныйПриоритет
		|		ПО ВТ_РеквизитыВБюджет.Приоритет = ВТ_МаксимальныйПриоритет.Приоритет";
		
		Запрос.УстановитьПараметр("КодБК",                ИсходныеДанные.ПоказательКБК);
		Запрос.УстановитьПараметр("КодБК_1_13",           Лев(ИсходныеДанные.ПоказательКБК, 13));
		Запрос.УстановитьПараметр("КОСГУ",
			ПлатежиВБюджетКлиентСервер.ЭлементКБК(ИсходныеДанные.ПоказательКБК, "КодОперацииСектораУправления"));
		Запрос.УстановитьПараметр("ОрганизацияИНН",       ИсходныеДанные.ПлательщикИНН);
		Запрос.УстановитьПараметр("ОрганизацияКПП",       ИсходныеДанные.ПлательщикКПП);
		Запрос.УстановитьПараметр("ПолучательИНН",        ИсходныеДанные.ПолучательИНН);
		Запрос.УстановитьПараметр("ПолучательКПП",        ИсходныеДанные.ПолучательКПП);
		Запрос.УстановитьПараметр("ПолучательБИК",        ИсходныеДанные.ПолучательБИК);
		Запрос.УстановитьПараметр("ПолучательНомерСчета", ИсходныеДанные.ПолучательСчет);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			УстановитьСвойство(ОбъектДокумента, "СтатьяДвиженияДенежныхСредств", Выборка.СтатьяДДС, Истина, ЭтоНовыйДокумент);
			СчетРасчетов = Выборка.СчетУчета;
		Иначе
			СчетРасчетов = Справочники.ВидыНалоговИПлатежейВБюджет.СчетУчета(Налог, ОбъектДокумента.Дата);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетРасчетов) Тогда
			УстановитьСвойство(ОбъектДокумента, "СчетУчетаРасчетовСКонтрагентом", СчетРасчетов, Истина, ЭтоНовыйДокумент);
			
			Если ЗначениеЗаполнено(ИсходныеДанные.ВидНалоговогоОбязательства) Тогда
				ВидНалоговогоОбязательства = ИсходныеДанные.ВидНалоговогоОбязательства;
			Иначе
				ВидНалоговогоОбязательства = Справочники.ВидыНалоговИПлатежейВБюджет.ВидНалоговогоОбязательстваПоКБК(КБК, ОбъектДокумента.Дата);
			КонецЕсли;
			
			АналитикаРасчетов = Документы.СписаниеСРасчетногоСчета.ДанныеЗаполненияАналитикиНаСчетеРасчетовСБюджетом(
				СчетРасчетов,
				Организация,
				ОбъектДокумента.Контрагент,
				ИсходныеДанные.ОКАТО, // КодТерритории (ОКАТО/ОКТМО)
				ИсходныеДанные.ПлательщикКПП,
				ИсходныеДанные.ПоказательКБК,
				ИсходныеДанные.ПоказательОснования,
				ИсходныеДанные.ПоказательТипа,
				ВидНалоговогоОбязательства);
			
			Для каждого КлючИЗначение Из АналитикаРасчетов Цикл
				Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
					УстановитьСвойство(
						ОбъектДокумента,
						КлючИЗначение.Ключ,
						КлючИЗначение.Значение,
						Истина,
						ЭтоНовыйДокумент);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		ОписаниеПериода = ПлатежиВБюджетКлиентСервер.РазобратьНалоговыйПериод(ИсходныеДанные.ПоказательПериода);
		Если ОписаниеПериода.Периодичность = ПлатежиВБюджетКлиентСервер.НезаполненноеЗначение() Тогда
			НалоговыйПериод = НачалоМесяца(ДобавитьМесяц(ОбъектДокумента.Дата, -1));
		Иначе
			НалоговыйПериод = ОписаниеПериода.Дата;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Налог)
			И ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоФиксированныеВзносы(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Налог, "ВидНалога")) Тогда
			НалоговыйПериод = НачалоГода(НалоговыйПериод);
		КонецЕсли;
		
		УстановитьСвойство(ОбъектДокумента, "НалоговыйПериод", НалоговыйПериод, Истина, ЭтоНовыйДокумент);
		
	КонецЕсли;
	
	Если ОбъектДокумента.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ЛичныеСредстваПредпринимателя Тогда
		ОбъектДокумента.РасшифровкаПлатежа.Очистить();
		
		УстановитьСвойство(ОбъектДокумента, "СтатьяДвиженияДенежныхСредств", ИсходныеДанные.СтатьяДДС, Истина, ЭтоНовыйДокумент);
	КонецЕсли;
	
	//ВидОперации:ПеречислениеЗаработнойПлаты
	Если ОбъектДокумента.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП
		И ОбъектДокумента.ПеречислениеЗаработнойПлаты.Количество() = 0
		И ЗначениеЗаполнено(ОбъектДокумента.ДокументОснование)
		И ТипЗнч(ОбъектДокумента.ДокументОснование) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
		
		ОбъектДокумента.РасшифровкаПлатежа.Очистить(); // при перечисление заработной платы, Расшифровка платежа не нужна
		УстановитьСвойство(ОбъектДокумента, "СтатьяДвиженияДенежныхСредств", ИсходныеДанные.СтатьяДДС, Истина, ЭтоНовыйДокумент);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Платежка", ОбъектДокумента.ДокументОснование);
		Запрос.УстановитьПараметр("ВыплаченностьЗарплаты", Перечисления.ВыплаченностьЗарплаты.Выплачено);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗарплатаКВыплатеЗарплата.Ссылка КАК Ведомость,
		|	ЗарплатаКВыплатеЗарплата.Сотрудник,
		|	МИНИМУМ(ЗарплатаКВыплатеЗарплата.НомерСтроки) КАК НомерСтроки,
		|	СУММА(ЗарплатаКВыплатеЗарплата.КВыплате) КАК СуммаПлатежа
		|ИЗ
		|	Документ.ВедомостьНаВыплатуЗарплатыВБанк.Зарплата КАК ЗарплатаКВыплатеЗарплата
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
		|		ПО (ПлатежноеПоручение.ДокументОснование = ЗарплатаКВыплатеЗарплата.Ссылка)
		|ГДЕ
		|	ПлатежноеПоручение.Ссылка = &Платежка
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗарплатаКВыплатеЗарплата.Сотрудник,
		|	ЗарплатаКВыплатеЗарплата.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				СтрокаВедомость = ОбъектДокумента.ПеречислениеЗаработнойПлаты.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаВедомость, Выборка);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбъектДокумента.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику
		И ЗначениеЗаполнено(ОбъектДокумента.ДокументОснование)
		И ТипЗнч(ОбъектДокумента.ДокументОснование) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
		
		УстановитьСвойство(ОбъектДокумента, "СтатьяДвиженияДенежныхСредств", ИсходныеДанные.СтатьяДДС, Истина, ЭтоНовыйДокумент);
		УстановитьСвойство(ОбъектДокумента, "ПлатежнаяВедомость", ОбъектДокумента.ДокументОснование.ПлатежнаяВедомость, Истина, ЭтоНовыйДокумент);
		
	КонецЕсли;
	
	//ВидОперации:ПрочееСписание (комиссия банка)
	Если ОбъектДокумента.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание Тогда
		ОбъектДокумента.РасшифровкаПлатежа.Очистить(); // при прочем списании, Расшифровка платежа не нужна
		УстановитьСвойство(ОбъектДокумента, "СтатьяДвиженияДенежныхСредств", ИсходныеДанные.СтатьяДДС, Истина, ЭтоНовыйДокумент);
		
		ПереводНаСвойСчетПоТребованию = Ложь;
		Если ИсходныеДанные.ВидОплаты = "02" Тогда
			МассивСобственныхСчетов = СписокБанковскихСчетовОрганизации.НайтиСтроки(
				Новый Структура("НомерСчета, БИК", ИсходныеДанные.ПолучательСчет, ИсходныеДанные.ПолучательБИК));
			ПереводНаСвойСчетПоТребованию = МассивСобственныхСчетов.Количество() > 0;
		КонецЕсли;
		
		Если ПереводНаСвойСчетПоТребованию Тогда
			ОбъектДокумента.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПрочиеСпециальныеСчета;
			УстановитьСвойство(ОбъектДокумента, "СубконтоДт1", МассивСобственныхСчетов[0].Ссылка, Истина, ЭтоНовыйДокумент);
			УстановитьСвойство(ОбъектДокумента, "СубконтоДт2", ИсходныеДанные.СтатьяДДС, Истина, ЭтоНовыйДокумент);
		ИначеЕсли ЭтоКомиссияБанка(ИсходныеДанные) Тогда
			ОбъектДокумента.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
			УстановитьСвойство(ОбъектДокумента, "СубконтоДт1",
				ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.РасходыНаУслугиБанков"),
					Истина, ЭтоНовыйДокумент);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПодразделениеПоУмолчанию) Тогда
			УстановитьСвойство(ОбъектДокумента, "ПодразделениеДт", ПодразделениеПоУмолчанию,, ЭтоНовыйДокумент);
		КонецЕсли;
	КонецЕсли;
	
	// Если "руками" выбран вид операции "Перечисление подотчетному лицу", то нужно отработать очистку ТЧ "Расшифровка платежа"
	Если ОбъектДокумента.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу Тогда
		ОбъектДокумента.РасшифровкаПлатежа.Очистить();
		УстановитьСвойство(ОбъектДокумента, "СтатьяДвиженияДенежныхСредств", ИсходныеДанные.СтатьяДДС, Истина, ЭтоНовыйДокумент);
	КонецЕсли;
	
	//ВидОперации: Перевод на другой счет организации
	Если ОбъектДокумента.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
		ОбъектДокумента.РасшифровкаПлатежа.Очистить();
		УстановитьСвойство(ОбъектДокумента, "СтатьяДвиженияДенежныхСредств", ИсходныеДанные.СтатьяДДС, Истина, ЭтоНовыйДокумент);
		Если ЗначениеЗаполнено(ПодразделениеПоУмолчанию) Тогда
			УстановитьСвойство(ОбъектДокумента, "ПодразделениеДт", ПодразделениеПоУмолчанию,, ЭтоНовыйДокумент);
		КонецЕсли;
	КонецЕсли;
	
	//Ответственный
	УстановитьСвойство(ОбъектДокумента, "Ответственный", Пользователи.ТекущийПользователь(),, ЭтоНовыйДокумент);
	
	//НазначениеПлатежа
	Если ЗначениеЗаполнено(ИсходныеДанные.НазначениеПлатежа1) Тогда
		
		НазначениеПлатежа = ИсходныеДанные.НазначениеПлатежа1;
		Для й = 2 По 6 Цикл
			Если НЕ ЗначениеЗаполнено(ИсходныеДанные["НазначениеПлатежа" + й]) Тогда
				Прервать;
			КонецЕсли;
			
			НазначениеПлатежа = НазначениеПлатежа + " " + ИсходныеДанные["НазначениеПлатежа" + й];
		КонецЦикла;
		
	Иначе
		
		НазначениеПлатежа = ИсходныеДанные.НазначениеПлатежа;
		
	КонецЕсли;
	
	УстановитьСвойство(ОбъектДокумента, "НазначениеПлатежа", НазначениеПлатежа, Истина, ЭтоНовыйДокумент);
	
	СчетаУчетаВДокументах.ЗаполнитьПередОтображениемПользователю(ОбъектДокумента);
	
	// отражение в УСН
	ПараметрыУСН = УчетУСН.СтруктураПараметровОбъектаДляУСН(ОбъектДокумента);
	НалоговыйУчетУСН.ЗаполнитьОтражениеДокументаВУСН(ОбъектДокумента, ПараметрыУСН);
	Если УчетУСН.СодержаниеУСНРедактируетсяПользователем(ОбъектДокумента) Тогда
		НалоговыйУчетУСН.ЗаполнитьОтображаемоеСодержаниеКУДиР(ОбъектДокумента, ПараметрыУСН);
	Иначе
		Содержание_УСН = НалоговыйУчетУСН.СодержаниеОперацииДляКУДиР(ПараметрыУСН);
		УстановитьСвойство(ОбъектДокумента, "Содержание_УСН", Содержание_УСН, Истина, ЭтоНовыйДокумент);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьРеквизитПлатежногоОрдераСписание

Процедура ЗаполнитьРеквизитПлатежногоОрдераПоступление(ОбъектДокумента, ИсходныеДанные, ЭтоНовыйДокумент, Организация, ПодразделениеПоУмолчанию, СписокБанковскихСчетовОрганизации, ВалютаРегламентированногоУчета)
	
	//Организация
	ДатаВхДокумента = ПолучитьДатуИзСтроки(ИсходныеДанные.Дата);
	Если ЗначениеЗаполнено(ДатаВхДокумента) Тогда
		УстановитьСвойство(ОбъектДокумента, "ДатаВходящегоДокумента", ДатаВхДокумента,,        ЭтоНовыйДокумент);
	Иначе
		УстановитьСвойство(ОбъектДокумента, "ДатаВходящегоДокумента", ИсходныеДанные.ДатаДок,, ЭтоНовыйДокумент);
	КонецЕсли;
	
	УстановитьСвойство(ОбъектДокумента, "НомерВходящегоДокумента",   ИсходныеДанные.НомерДок,, ЭтоНовыйДокумент);
	УстановитьСвойство(ОбъектДокумента, "Организация", Организация,, ЭтоНовыйДокумент);
	
	Если ЗначениеЗаполнено(ИсходныеДанные.Поступило) Тогда
		УстановитьСвойство(ОбъектДокумента, "Дата", УчетДенежныхСредствБП.УстановитьВремяДокумента(ИсходныеДанные.Поступило),, ЭтоНовыйДокумент);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумента.Дата) Тогда
		УстановитьСвойство(ОбъектДокумента, "Дата", УчетДенежныхСредствБП.УстановитьВремяДокумента(ИсходныеДанные.ДатаДок),,   ЭтоНовыйДокумент);
	КонецЕсли;
	
	КоличествоСтрокРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Количество();
	
	//Контрагент, ДоговорКонтрагента, СтатьяДвиженияДенежныхСредств
	УстановитьСвойство(ОбъектДокумента, "Контрагент", ИсходныеДанные.Контрагент,, ЭтоНовыйДокумент);
	Если КоличествоСтрокРасшифровки = 0 Тогда
		СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
		КоличествоСтрокРасшифровки = 1;
	Иначе
		СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
	КонецЕсли;
	
	//ПодразделениеОрганизации
	Если ЗначениеЗаполнено(ПодразделениеПоУмолчанию) Тогда
		УстановитьСвойство(ОбъектДокумента, "ПодразделениеОрганизации", ПодразделениеПоУмолчанию,, ЭтоНовыйДокумент);
		УстановитьСвойство(СтрокаРасшифровки, "ПодразделениеКт", ПодразделениеПоУмолчанию,, ЭтоНовыйДокумент);
	КонецЕсли;
	
	ПорядокОтраженияАванса = НалоговыйУчетУСН.ПорядокОтраженияАвансовПоУмолчанию(Организация, ОбъектДокумента.Дата);
	Если ПорядокОтраженияАванса.ПорядокОтраженияАванса = Перечисления.ПорядокОтраженияАвансов.ДоходПатент Тогда
		УстановитьСвойство(СтрокаРасшифровки, "ПорядокОтраженияАванса", ПорядокОтраженияАванса.Патент,, ЭтоНовыйДокумент);
	Иначе
		УстановитьСвойство(СтрокаРасшифровки, "ПорядокОтраженияАванса", ПорядокОтраженияАванса.ПорядокОтраженияАванса,, ЭтоНовыйДокумент);
	КонецЕсли;
	
	ОднаСтрокаВРасшифровкеПлатежа = КоличествоСтрокРасшифровки = 1;
	УстановитьСвойство(СтрокаРасшифровки, "ДоговорКонтрагента",
		?(ИсходныеДанные.Договор = "Не найден", Неопределено, ИсходныеДанные.Договор), Истина, ЭтоНовыйДокумент);
	УстановитьСвойство(СтрокаРасшифровки, "СпособПогашенияЗадолженности",
		Перечисления.СпособыПогашенияЗадолженности.Автоматически,, ЭтоНовыйДокумент);
	
	Если ОднаСтрокаВРасшифровкеПлатежа Тогда
		УстановитьСвойство(СтрокаРасшифровки, "СтатьяДвиженияДенежныхСредств", ИсходныеДанные.СтатьяДДС, Истина, ЭтоНовыйДокумент);
	КонецЕсли;
	
	//СчетОрганизации, СчетКонтрагента
	УстановитьСвойство(ОбъектДокумента,     "СчетОрганизации", ИсходныеДанные.СчетОрганизации,, ЭтоНовыйДокумент);
	Если ТипЗнч(ИсходныеДанные.СчетКонтрагента) <> Тип("Строка") Тогда
		УстановитьСвойство(ОбъектДокумента, "СчетКонтрагента", ИсходныеДанные.СчетКонтрагента,, ЭтоНовыйДокумент);
	КонецЕсли;
	
	//ВалютаДокумента
	УстановитьСвойство(ОбъектДокумента, "ВалютаДокумента",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектДокумента.СчетОрганизации, "ВалютаДенежныхСредств"),, ЭтоНовыйДокумент);
	
	//ВидОперации
	УстановитьСвойство(ОбъектДокумента, "ВидОперации", ИсходныеДанные.ВидОперации, Истина, ЭтоНовыйДокумент);
	
	//ВидОперации:Инкассация
	Если ОбъектДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация Тогда
		Если ОднаСтрокаВРасшифровкеПлатежа И ЗначениеЗаполнено(СтрокаРасшифровки.СтатьяДвиженияДенежныхСредств) Тогда
			УстановитьСвойство(СтрокаРасшифровки, "СубконтоКт1",
				СтрокаРасшифровки.СтатьяДвиженияДенежныхСредств,, ЭтоНовыйДокумент);
		КонецЕсли;
	КонецЕсли;
	
	//ВидОперации:ПрочееПоступление
	Если ОбъектДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление Тогда
		УстановитьСвойство(ОбъектДокумента, "СтатьяДвиженияДенежныхСредств", ИсходныеДанные.СтатьяДДС, Истина, ЭтоНовыйДокумент);
		
		Если ЗначениеЗаполнено(ПодразделениеПоУмолчанию) Тогда
			УстановитьСвойство(ОбъектДокумента, "ПодразделениеКт", ПодразделениеПоУмолчанию,, ЭтоНовыйДокумент);
		КонецЕсли;
	КонецЕсли;
	
	Если ОбъектДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ЛичныеСредстваПредпринимателя Тогда
		УстановитьСвойство(ОбъектДокумента, "СтатьяДвиженияДенежныхСредств", ИсходныеДанные.СтатьяДДС, Истина, ЭтоНовыйДокумент);
	КонецЕсли;
	
	//СуммаДокумента
	УстановитьСвойство(ОбъектДокумента, "СуммаДокумента", ИсходныеДанные.СуммаДокумента, Истина, ЭтоНовыйДокумент);
	Если ЭтоНовыйДокумент ИЛИ ОднаСтрокаВРасшифровкеПлатежа И СтрокаРасшифровки.СуммаПлатежа <> ОбъектДокумента.СуммаДокумента Тогда
		СтрокаРасшифровки.СуммаПлатежа = ОбъектДокумента.СуммаДокумента;
		РассчитатьКурсИСуммуВзаиморасчетов(
			СтрокаРасшифровки,
			ПолучитьВалютуДоговора(СтрокаРасшифровки.ДоговорКонтрагента), ОбъектДокумента.Дата, ОбъектДокумента, ЭтоНовыйДокумент);
		
		Если НЕ УчетнаяПолитика.ПлательщикНДС(Организация, ОбъектДокумента.Дата) Тогда
			СтрокаРасшифровки.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		Иначе
			СтрокаРасшифровки.СтавкаНДС = УчетДенежныхСредствБП.ПолучитьСтавкуНДСПоДоговору(СтрокаРасшифровки.ДоговорКонтрагента);
		КонецЕсли;
		
		ЗначениеСтавкиНДС           = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаРасшифровки.СтавкаНДС);
		СтрокаРасшифровки.СуммаНДС  = СтрокаРасшифровки.СуммаПлатежа * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);
	КонецЕсли;
	
	//Ответственный
	УстановитьСвойство(ОбъектДокумента, "Ответственный", Пользователи.ТекущийПользователь(), Истина, ЭтоНовыйДокумент);
	
	//НазначениеПлатежа
	Если ЗначениеЗаполнено(ИсходныеДанные.НазначениеПлатежа1) Тогда
		
		НазначениеПлатежа = ИсходныеДанные.НазначениеПлатежа1;
		Для й = 2 По 6 Цикл
			Если НЕ ЗначениеЗаполнено(ИсходныеДанные["НазначениеПлатежа" + й]) Тогда
				Прервать;
			КонецЕсли;
			
			НазначениеПлатежа = НазначениеПлатежа + " " + ИсходныеДанные["НазначениеПлатежа" + й];
		КонецЦикла;
		
	Иначе
		
		НазначениеПлатежа = ИсходныеДанные.НазначениеПлатежа;
		
	КонецЕсли;
	
	УстановитьСвойство(ОбъектДокумента, "НазначениеПлатежа", НазначениеПлатежа, Истина, ЭтоНовыйДокумент);
	
	СчетаУчетаВДокументах.ЗаполнитьПередОтображениемПользователю(ОбъектДокумента);
	
	// отражение в УСН
	Если УчетУСН.ЕстьАвансыПокупателей(ИсходныеДанные.ВидОперации) Тогда
		УчетУСН.УстановитьПатентАванса(ОбъектДокумента);
	КонецЕсли;
	
	ПараметрыУСН = УчетУСН.СтруктураПараметровОбъектаДляУСН(ОбъектДокумента);
	НалоговыйУчетУСН.ЗаполнитьОтражениеДокументаВУСН(ОбъектДокумента, ПараметрыУСН);
	Если УчетУСН.СодержаниеУСНРедактируетсяПользователем(ОбъектДокумента) Тогда
		НалоговыйУчетУСН.ЗаполнитьОтображаемоеСодержаниеКУДиР(ОбъектДокумента, ПараметрыУСН);
	Иначе
		Содержание_УСН = НалоговыйУчетУСН.СодержаниеОперацииДляКУДиР(ПараметрыУСН);
		УстановитьСвойство(ОбъектДокумента, "Содержание_УСН", Содержание_УСН, Истина, ЭтоНовыйДокумент);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьРеквизитПлатежногоОрдераПоступление

Процедура РассчитатьКурсИСуммуВзаиморасчетов(СтрокаПлатеж, ТекущаяВалютаВзаиморасчетов, ДатаКурса, ОбъектДокумента, ЭтоНовыйДокумент)
	
	СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
		ТекущаяВалютаВзаиморасчетов, ДатаКурса);
	
	УстановитьСвойство(СтрокаПлатеж, "КурсВзаиморасчетов",      СтруктураКурсаВзаиморасчетов.Курс,,      ЭтоНовыйДокумент);
	УстановитьСвойство(СтрокаПлатеж, "КратностьВзаиморасчетов", СтруктураКурсаВзаиморасчетов.Кратность,, ЭтоНовыйДокумент);
	
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ОбъектДокумента, ЭтоНовыйДокумент);
	
КонецПроцедуры

Процедура СоздатьКонтрагентов(ДеревоКонтрагентов, ГруппаДляНовыхКонтрагентов,
		Организация, БанковскийСчет,
		МассивКонтрагентов, СтекОповещений) Экспорт
	
	МассивСтрок        = Новый Массив;
	МассивКонтрагентов = Новый Массив;
	
	БанкРасчетногоСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, "Банк");
	
	Для каждого СтрокаДерева Из ДеревоКонтрагентов.Строки Цикл
		
		Если СтрокаДерева.Пометка Тогда
			
			НовыйЭлемент = СоздатьКонтрагента(СтрокаДерева,
				ГруппаДляНовыхКонтрагентов,
				Организация, БанкРасчетногоСчета, СтекОповещений);
			
			Если НЕ НовыйЭлемент.Пустая() Тогда
				МассивКонтрагентов.Добавить(НовыйЭлемент);
				МассивСтрок.Добавить(СтрокаДерева);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого Строка Из МассивСтрок Цикл
		
		ДеревоКонтрагентов.Строки.Удалить(Строка);
		
	КонецЦикла;
	
КонецПроцедуры

// Функция создает контрагента и его реквизиты.
//
Функция СоздатьКонтрагента(СтрокаКонтрагент, ГруппаДляНовыхКонтрагентов, Организация, БанкРасчетногоСчета, СтекОповещений = Неопределено)
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Если СтекОповещений = Неопределено Тогда
		СтекОповещений = Новый Массив;
	КонецЕсли;
	
	ИННКонтрагента  = "";
	НовыйКонтрагент = Ложь;
	ЭтоКонтрагент   = Ложь;
	// Эти элементы есть у всех справочников.
	Если НЕ ЗначениеЗаполнено(СтрокаКонтрагент.Реквизит) Тогда
		
		ЭтоКонтрагент = Найти(СтрокаКонтрагент.Значение, "Контрагент") <> 0;
		
		ПредставлениеКонтагента = СтрокаКонтрагент.Представление;
		ИННКонтрагента          = СтрокаКонтрагент.Строки[1].Значение;
		КППКонтрагента          = СтрокаКонтрагент.Строки[2].Значение;
		КППКонтрагента          = ?(КППКонтрагента = "0", "", КППКонтрагента);
		
		// Если пустое Наименование и ИНН, то контрагента не создаём
		Если ПустаяСтрока(ПредставлениеКонтагента) И ПустаяСтрока(ИННКонтрагента) Тогда
			Возврат Справочники.Контрагенты.ПустаяСсылка();
		КонецЕсли;
		
		Если ЭтоКонтрагент Тогда
			
			НовыйЭлемент = Справочники.Контрагенты.СоздатьЭлемент();
			
			НовыйЭлемент.Наименование       = ПредставлениеКонтагента;
			НовыйЭлемент.НаименованиеПолное = ПредставлениеКонтагента;
			НовыйЭлемент.Родитель           = ГруппаДляНовыхКонтрагентов;
			НовыйЭлемент.СтранаРегистрации  = Справочники.СтраныМира.Россия;
			НовыйЭлемент.ИНН                = ИННКонтрагента;
			НовыйЭлемент.КПП                = КППКонтрагента;
			ЮрФизЛицо = ?(СтрДлина(СокрЛП(НовыйЭлемент.ИНН)) = 12 И (ПустаяСтрока(НовыйЭлемент.КПП) ИЛИ НовыйЭлемент.КПП = "0"),
			Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо,
			Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
			НовыйЭлемент.ЮридическоеФизическоеЛицо = ЮрФизЛицо;
			
			Если НовыйЭлемент.ПолучитьСсылкуНового().Пустая() Тогда
				НовыйЭлемент.УстановитьСсылкуНового(Справочники.Контрагенты.ПолучитьСсылку());
			КонецЕсли;
			
			НовыйЭлемент.ГоловнойКонтрагент = НовыйЭлемент.ПолучитьСсылкуНового();
			НовыйЭлемент.Записать();
			
		Иначе
			
			НовыйЭлемент = УчетЗарплаты.СоздатьФизическоеЛицо(ПредставлениеКонтагента, ИННКонтрагента).ПолучитьОбъект();
			
		КонецЕсли;
		
		СтекОповещений.Добавить(Новый Структура("Ссылка", НовыйЭлемент.Ссылка));
		НовыйКонтрагент = Истина;
	Иначе
		
		НовыйЭлемент = СтрокаКонтрагент.Реквизит.ПолучитьОбъект();
		
	КонецЕсли;
	
	Для каждого Строка Из СтрокаКонтрагент.Строки Цикл
		
		Если Строка.Представление = "Р/счет" Тогда
			
			Попытка
				НомерСчета = Строка.Значение;
				НовыйСчет  = Справочники.БанковскиеСчета.СоздатьЭлемент();
				
				НовыйСчет.НомерСчета = НомерСчета;
				НовыйСчет.Владелец   = НовыйЭлемент.Ссылка;
				НовыйСчет.ВидСчета   = "Расчетный";
				НовыйСчет.ВалютаДенежныхСредств = ВалютаРегламентированногоУчета;
				
				РССчет = Строка.Строки;
				
				Если РССчет.Количество() = 7 И РССчет[3].Представление = "РЦ банка" Тогда
					
					// Банк контрагента
					Если НЕ ПустаяСтрока(РССчет[0].Значение) И НЕ ПустаяСтрока(РССчет[2].Значение) Тогда
						
						НовыйБанк = НайтиБанкПоБикИлиКоррСчету("", РССчет[2].Значение);
						НовыйСчет.Банк = НовыйБанк.Ссылка;
						
					КонецЕсли;
					
					// РЦ банка контрагента
					Если НЕ ПустаяСтрока(РССчет[3].Значение) И НЕ ПустаяСтрока(РССчет[5].Значение) Тогда
						
						НовыйБанкКорр = НайтиБанкПоБикИлиКоррСчету(РССчет[5].Значение, РССчет[6].Значение);
						Если НовыйБанкКорр = Справочники.Банки.ПустаяСсылка() Тогда
							НовыйБанкКорр = Справочники.Банки.СоздатьЭлемент();
							НовыйБанкКорр.Наименование = РССчет[3].Значение;
							НовыйБанкКорр.Город        = РССчет[4].Значение;
							НовыйБанкКорр.Код          = РССчет[5].Значение;
							НовыйБанкКорр.КоррСчет     = РССчет[6].Значение;
							НовыйБанкКорр.Записать();
						КонецЕсли;
						
						НовыйСчет.БанкДляРасчетов = НовыйБанкКорр.Ссылка;
						
					КонецЕсли;
					
				Иначе
					
					// Банк контрагента
					БИКБанка      = РССчет[2].Значение;
					КоррСчетБанка = РССчет[3].Значение;
					Если ПустаяСтрока(БИКБанка) И ПустаяСтрока(КоррСчетБанка) Тогда
						// если в файле нет реквизитов банка, то обычно это внутренняя банковская операция,
						// а значит банк в этом случае тот же, по которому загружается выписка
						НовыйСчет.Банк = БанкРасчетногоСчета;
					Иначе
						НовыйБанк = НайтиБанкПоБикИлиКоррСчету(БИКБанка, КоррСчетБанка);
						Если НЕ ЗначениеЗаполнено(НовыйБанк) Тогда
							КлассификаторБанка = РаботаСБанкамиПереопределяемый.СсылкаПоКлассификатору(БИКБанка, КоррСчетБанка);
							Если ЗначениеЗаполнено(КлассификаторБанка) Тогда
								СсылкиБанков = Новый Массив;
								СсылкиБанков.Добавить(КлассификаторБанка);
								МассивБанков = РаботаСБанкамиПереопределяемый.ПодобратьБанкИзКлассификатора(
									СсылкиБанков);
								
								КоличествоБанков = МассивБанков.Количество();
								Если КоличествоБанков > 0 Тогда
									НовыйБанк = МассивБанков[КоличествоБанков - 1];
								КонецЕсли;
							Иначе
								НовыйБанк = Справочники.Банки.СоздатьЭлемент();
								НовыйБанк.Код          = БИКБанка;
								НовыйБанк.Наименование = РССчет[0].Значение;
								НовыйБанк.Город        = РССчет[1].Значение;
								НовыйБанк.КоррСчет     = КоррСчетБанка;
								НовыйБанк.Записать();
							КонецЕсли;
						КонецЕсли;
						
						НовыйСчет.Банк = НовыйБанк.Ссылка;
					КонецЕсли;
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(НовыйСчет.Банк) ИЛИ ЗначениеЗаполнено(НовыйСчет.БанкДляРасчетов) Тогда
					БанкДляНаименования    = ?(ЗначениеЗаполнено(НовыйСчет.Банк), НовыйСчет.Банк, НовыйСчет.БанкДляРасчетов);
					НовыйСчет.Наименование = Лев(НовыйСчет.НомерСчета + ", " + БанкДляНаименования, 100);
					НовыйСчет.Записать();
					Если ЭтоКонтрагент Тогда
						Если НЕ ЗначениеЗаполнено(НовыйЭлемент.ОсновнойБанковскийСчет) Тогда
							НовыйЭлемент.ОсновнойБанковскийСчет = НовыйСчет.Ссылка;
							
							// Если ИНН или КПП не заполнены в файле, или заполнены некорректно,
							// то вид контрагента мог быть определен неправильно. Уточним его по номеру счета
							Если НовыйКонтрагент Тогда
								БалансовыйСчет = УчетДенежныхСредствКлиентСервер.БалансовыйСчет(НовыйСчет.НомерСчета);
								Если БалансовыйСчет = "40802"    // ИП
									ИЛИ БалансовыйСчет = "40817" // Физические лица
									Тогда
									НовыйЭлемент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					СтекОповещений.Добавить(Новый Структура("Ссылка", НовыйСчет.Ссылка));
				Иначе
					ВызватьИсключение НСтр("ru = 'У банковского счета не определено поле Банк'");
				КонецЕсли;
				
			Исключение
				ТекстСообщения = НСтр("ru = 'Не удалось создать банковский счет контрагента!'");
				СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
				
				ОписаниеОшибки = ИнформацияОбОшибке();
				ТекстОшибки = НСтр("ru = '%1
					|Произошли ошибки при записи!'");
				
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Данные. Изменение'"),
					УровеньЖурналаРегистрации.Ошибка, НовыйСчет.Метаданные(),,
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
						ОписаниеОшибки.Описание));
			КонецПопытки;
			
		КонецЕсли;
		
		Если ЭтоКонтрагент Тогда
			Если Строка.Представление = "Договор" И (Строка.Пометка ИЛИ НовыйКонтрагент) Тогда
				
				Попытка
					НайденныйДоговорОбъект = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
					НайденныйДоговорОбъект.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета;
					НайденныйДоговорОбъект.Организация          = Организация;
					НайденныйДоговорОбъект.Владелец             = НовыйЭлемент.Ссылка;
					
					Вид = Строка.Значение;
					Если Вид = "С покупателем" Тогда
						НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
					ИначеЕсли Вид = "С поставщиком" Тогда
						НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
						НайденныйДоговорОбъект.ПредъявляетНДС = Истина;
					Иначе
						НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
					КонецЕсли;
					
					НайденныйДоговорОбъект.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Основной договор (%1)'"), НРег(Вид));
					НайденныйДоговорОбъект.Записать();
					НайденныйДоговор = НайденныйДоговорОбъект.Ссылка;
					
					Если НЕ ЗначениеЗаполнено(НовыйЭлемент.ОсновнойДоговорКонтрагента) Тогда
						НовыйЭлемент.ОсновнойДоговорКонтрагента = НайденныйДоговор;
					КонецЕсли;
					
					СтекОповещений.Добавить(Новый Структура("Ссылка", НайденныйДоговор));
				Исключение
					ТекстСообщения = НСтр("ru = 'Не удалось создать договор контрагента!'");
					СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
					
					ОписаниеОшибки = ИнформацияОбОшибке();
					ТекстОшибки = НСтр("ru = '%1
					|Произошли ошибки при записи!'");
					
					ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Данные. Изменение'"),
					УровеньЖурналаРегистрации.Ошибка, НайденныйДоговорОбъект.Метаданные(),,
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
					ОписаниеОшибки.Описание));
				КонецПопытки;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	НовыйЭлемент.Записать();
	
	Возврат НовыйЭлемент.Ссылка;
	
КонецФункции // СоздатьКонтрагента

// Функция ищет банк по БИК или корр. счету и возвращает найденное значение
//
Функция НайтиБанкПоБикИлиКоррСчету(БИК, КоррСчет)
	
	НайденныйБанк = Справочники.Банки.ПустаяСсылка();
	
	Если НЕ ПустаяСтрока(БИК) Тогда
		НайденныйБанк = Справочники.Банки.СсылкаНаБанк(БИК);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НайденныйБанк) И НЕ ПустаяСтрока(КоррСчет) Тогда
		НайденныйБанк = Справочники.Банки.НайтиПоРеквизиту("КоррСчет", КоррСчет);
	КонецЕсли;
	
	Возврат НайденныйБанк;
	
КонецФункции

// Функция возвращает представление объекта.
//
Функция ПолучитьПредставлениеОбъекта(Объект)
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ПлатежноеПоручение") Тогда
		НазваниеОбъекта = "документ ""Платежное поручение"" № " + СокрЛП(Объект.Номер) + " от " + Объект.Дата;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.СписаниеСРасчетногоСчета") Тогда
		НазваниеОбъекта = "документ ""Списание с расчетного счета"" № " + СокрЛП(Объект.Номер) + " от " + Объект.Дата;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПоступлениеНаРасчетныйСчет") Тогда
		НазваниеОбъекта = "документ ""Поступление на расчетный счет"" № " + СокрЛП(Объект.Номер) + " от " + Объект.Дата;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПлатежноеТребование") Тогда
		НазваниеОбъекта = "документ ""Платежное требование"" № " + СокрЛП(Объект.Номер) + " от " + Объект.Дата;
		
	Иначе
		НазваниеОбъекта = "объект";
	КонецЕсли;
	
	Возврат НазваниеОбъекта;
	
КонецФункции

// Функция возвращает результат проверки загружаемого документа
//
Функция ПроверитьДокументДляЗагрузки(СтруктураДокумента)
	
	Результат = "";
	
	Если СтруктураДокумента.Готовность > 3 Тогда
		Результат = СтруктураДокумента.ОписаниеОшибок;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СоздатьНовыйПлатежныйДокумент(ВидДокумента, Номер, Дата)
	
	НовыйДокумент = Документы[ВидДокумента].СоздатьДокумент();
	
	Если ВидДокумента = "ПлатежноеПоручение" ИЛИ ВидДокумента = "ПлатежноеТребование" Тогда
		НовыйДокумент.Номер = ПривестиНомер(НовыйДокумент.Номер, Номер);
		НовыйДокумент.Дата  = Дата;
	Иначе
		НовыйДокумент.НомерВходящегоДокумента = Номер;
		НовыйДокумент.ДатаВходящегоДокумента  = Дата;
	КонецЕсли;
	
	Возврат НовыйДокумент;
	
КонецФункции

Функция ПривестиНомер(НомерДокумента, Номер)
	
	НовыйНомер  = "";
	ДлинаНомера = СтрДлина(Номер);
	ДлинаНомераДокумента = СтрДлина(НомерДокумента);
	
	Возврат Лев(НомерДокумента, ДлинаНомераДокумента - ДлинаНомера) + Номер;
	
КонецФункции

Функция ПолучитьВалютуДоговора(ДоговорКонтрагента)
	
	ЗапросПоиска = Новый Запрос;
	ЗапросПоиска.Текст =
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.ВалютаВзаиморасчетов
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Ссылка = &Ссылка";
	
	ЗапросПоиска.УстановитьПараметр("Ссылка", ДоговорКонтрагента);
	Выборка = ЗапросПоиска.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ВалютаВзаиморасчетов;
	Иначе
		Возврат Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	
КонецФункции

Функция ЗаполнитьКешСвойств()
	
	ИмпортНеПустые_ПлатежноеПоручение =
		"Номер, Дата, Сумма, ПлательщикСчет, ПлательщикИНН, ПолучательСчет, ПолучательИНН";
	
	// По наличию статуса составителя определяется, что платеж налоговый
	ИмпортНеПустые_ПлатежноеПоручениеБюджет =
		"Номер, Дата, Сумма, ПлательщикСчет,
		|ПолучательСчет, ПолучательИНН,
		|СтатусСоставителя, ПлательщикКПП, ПолучательКПП, ПоказательКБК, ОКАТО, ПоказательОснования,
		|ПоказательПериода, ПоказательНомера, ПоказательДаты, ПоказательТипа";
	
	Импорт_НеПустые = Новый Массив;
	
	СоответствиеБанковскихДокументов = Новый Соответствие;
	СоответствиеБанковскихДокументов.Вставить("СписаниеСРасчетногоСчета",
		Новый Структура("Номер, Дата, Сумма, ПлательщикСчет, ПолучательСчет, ПолучательИНН"));
	СоответствиеБанковскихДокументов.Вставить("ПоступлениеНаРасчетныйСчет",
		Новый Структура("Номер, Дата, Сумма, ПлательщикСчет, ПлательщикИНН, ПолучательСчет"));
	
	Импорт_НеПустые.Добавить(СоответствиеБанковскихДокументов);
	Импорт_НеПустые.Добавить(Новый Структура(ИмпортНеПустые_ПлатежноеПоручениеБюджет));
	
	Возврат Импорт_НеПустые;
	
КонецФункции

Функция ВидОплатыЧислом(Знач ВидОплатыИзФайла)
	
	Если ПустаяСтрока(ВидОплатыИзФайла) Тогда
		ВидОплаты = 1;
	Иначе
		Попытка
			ВидОплаты = Число(ВидОплатыИзФайла);
		Исключение
			ВидОплаты = 1;
		КонецПопытки;
	КонецЕсли;
	
	Возврат ВидОплаты;
	
КонецФункции

Функция УточнитьВидОперацииДокументаПоКорсчету(ВидОперацииДокумента, Знач СтрокаДокумента)
	
	ВидОплаты      = ВидОплатыЧислом(СтрокаДокумента.ВидОплаты);
	БалансовыйСчет = УчетДенежныхСредствКлиентСервер.БалансовыйСчет(СтрокаДокумента.СчетКонтрагентаДляПоиска);
	
	Если ПустаяСтрока(БалансовыйСчет) Тогда
		Возврат ВидОперацииДокумента;
	КонецЕсли;
	
	Если СтрокаДокумента.Исходящий Тогда
		Если БалансовыйСчет = "40817" // физические лица
			Тогда
			Если УчетДенежныхСредствКлиентСервер.БалансовыйСчет(СтрокаДокумента.ПлательщикСчет) = "40802" // Физические лица - индивидуальные предприниматели
				И СтрДлина(СтрокаДокумента.ПлательщикИНН) = 12 И СтрДлина(СтрокаДокумента.ПолучательИНН) = 12
				И СтрокаДокумента.ПлательщикИНН = СтрокаДокумента.ПолучательИНН Тогда // это вывод средств ИП на личные нужды
				ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ЛичныеСредстваПредпринимателя;
			Иначе
				ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику;
			КонецЕсли;
		ИначеЕсли ВидОплаты = 3   // 03 - выдано (банком) по расходному кассовому ордеру
			И БалансовыйСчет = "20202" // касса кредитных организаций
			Тогда
			ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание; // это выдача наличных - если отражать в банке, то через 57.01
		КонецЕсли;
	Иначе
		Если ВидОплаты = 4 // "04" поступило наличными по объявлению на взнос наличными, препроводительной ведомости
			ИЛИ БалансовыйСчет = "20202" // поступление наличных из кассы
			ИЛИ БалансовыйСчет = "20208" // поступление наличных из банкомата, устройства Cash-in
			Тогда
			ВидОперацииДокумента = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация;
		ИначеЕсли БалансовыйСчет = "30222" // незавершенные переводы и расчеты кредитной организации
			ИЛИ БалансовыйСчет   = "30232" // незавершенные расчеты с торгово-серсвисными предприятиями (в ред. Указания ЦБ РФ от 04.09.13 №3053-У)
			//ИЛИ БалансовыйСчет   = "30233" // незавершенные расчеты с операторами услуг платежной инфраструктуры и операторами по переводу денежных средств
			Тогда
			ВидОперацииДокумента = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам;
		ИначеЕсли БалансовыйСчет = "40817" // физические лица
			Тогда
			Если УчетДенежныхСредствКлиентСервер.БалансовыйСчет(СтрокаДокумента.ПолучательСчет) = "40802" // физические лица - индивидуальные предприниматели
				И СтрДлина(СтрокаДокумента.ПлательщикИНН) = 12 И СтрДлина(СтрокаДокумента.ПолучательИНН) = 12
				И СтрокаДокумента.ПлательщикИНН = СтрокаДокумента.ПолучательИНН Тогда // это поступление личных средства ИП на ведение предпринимательской деятельности
				ВидОперацииДокумента = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ЛичныеСредстваПредпринимателя;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВидОперацииДокумента;
	
КонецФункции

Функция ЭтоКомиссияБанка(Знач СтрокаДокумента)
	
	ВидОплаты = ВидОплатыЧислом(СтрокаДокумента.ВидОплаты);
	Операция  = ВРег(СтрЗаменить(СтрокаДокумента.Операция, " ", ""));
	ЭтоКомиссияБанка = СтрокаДокумента.ПолучательБИК = СтрокаДокумента.ПлательщикБИК
		И (Операция = "МЕМОРИАЛЬНЫЙОРДЕР" ИЛИ Операция = "БАНКОВСКИЙОРДЕР" ИЛИ Операция = "ВНУТРЕННИЙПЕРЕВОД")
		ИЛИ ВидОплаты > 1 И ВидОплаты <> 3;
	
	// последняя проверка по корр.счету
	Если НЕ ЭтоКомиссияБанка Тогда
		БалансовыйСчет = УчетДенежныхСредствКлиентСервер.БалансовыйСчет(СтрокаДокумента.СчетКонтрагентаДляПоиска);
		Если БалансовыйСчет    = "70601" // доходы (банка)
			ИЛИ БалансовыйСчет = "61301" // Доходы (банка) будущих периодов по кредитным операциям
			ИЛИ БалансовыйСчет = "61304" // Доходы (банка) будущих периодов по другим операциям
		Тогда
			ЭтоКомиссияБанка = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЭтоКомиссияБанка;
	
КонецФункции

Функция ЭтоВидОперацииБезДоговора(Знач ВидОперации) Экспорт
	
	СписокОпераций = Новый СписокЗначений();
	СписокОпераций.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет);
	СписокОпераций.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога);
	СписокОпераций.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ЛичныеСредстваПредпринимателя);
	СписокОпераций.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание);
	СписокОпераций.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаРаботнику);
	СписокОпераций.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДепонентов);
	СписокОпераций.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику);
	СписокОпераций.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу);
	СписокОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация);
	СписокОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ЛичныеСредстваПредпринимателя);
	СписокОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление);
	
	Возврат СписокОпераций.НайтиПоЗначению(ВидОперации) <> Неопределено;
	
КонецФункции

Функция ПолучитьНастройкиПрограммыКлиентаБанка(Организация, БанковскийСчет) Экспорт
	
	Настройки = Новый Структура;
	Настройки.Вставить("НастройкиЗагружены",                       Ложь);
	Настройки.Вставить("СоглашениеПрямогоОбменаСБанками",          Перечисления.ПрограммыБанка.ПустаяСсылка());
	Настройки.Вставить("БанкДляПрямогоОбмена",                     Справочники.Банки.ПустаяСсылка());
	Настройки.Вставить("Кодировка",                                "Windows");
	Настройки.Вставить("Программа",                                "");
	Настройки.Вставить("ФайлВыгрузки",                             "");
	Настройки.Вставить("ФайлЗагрузки",                             "");
	Настройки.Вставить("КонтролироватьНекорректныеСимволыВНомере", Истина);
	Настройки.Вставить("Платежное_Поручение",                      Истина);
	Настройки.Вставить("Платежное_Требование",                     Ложь);
	Настройки.Вставить("СоздаватьНенайденныеЭлементы",             Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиОбменаСКлиентомБанка.Программа,
	|	НастройкиОбменаСКлиентомБанка.Кодировка,
	|	НастройкиОбменаСКлиентомБанка.ФайлЗагрузки,
	|	НастройкиОбменаСКлиентомБанка.ФайлВыгрузки,
	|	НастройкиОбменаСКлиентомБанка.КонтролироватьНекорректныеСимволыВНомере,
	|	НастройкиОбменаСКлиентомБанка.ВидыВыгружаемыхПлатДокументов,
	|	НастройкиОбменаСКлиентомБанка.ОтключитьАвтоматическоеСозданиеНенайденныхЭлементов
	|ИЗ
	|	РегистрСведений.НастройкиОбменаСКлиентомБанка КАК НастройкиОбменаСКлиентомБанка
	|ГДЕ
	|	НастройкиОбменаСКлиентомБанка.БанковскийСчет = &Счет
	|	И НастройкиОбменаСКлиентомБанка.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Счет",        БанковскийСчет);
	Запрос.УстановитьПараметр("Организация", Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Настройки.Вставить("НастройкиЗагружены",                       Истина);
		Настройки.Вставить("Кодировка",                                Выборка.Кодировка);
		Настройки.Вставить("Программа",                                Выборка.Программа);
		Настройки.Вставить("ФайлВыгрузки",                             Выборка.ФайлВыгрузки);
		Настройки.Вставить("ФайлЗагрузки",                             Выборка.ФайлЗагрузки);
		Настройки.Вставить("КонтролироватьНекорректныеСимволыВНомере", Выборка.КонтролироватьНекорректныеСимволыВНомере);
		Настройки.Вставить("СоздаватьНенайденныеЭлементы",             НЕ Выборка.ОтключитьАвтоматическоеСозданиеНенайденныхЭлементов);
		
		ВидыВыгружаемыхПлатДокументов = Выборка.ВидыВыгружаемыхПлатДокументов.Получить();
		Если ВидыВыгружаемыхПлатДокументов <> Неопределено Тогда
			Для каждого Вид Из ВидыВыгружаемыхПлатДокументов Цикл
				Настройки.Вставить(СтрЗаменить(Вид.Документ, " ", "_"), Вид.Пометка);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭДСБанками") = Истина Тогда
		
		Запрос = Новый Запрос();
		Запрос.Параметры.Вставить("БанковскийСчет", БанковскийСчет);
		Запрос.Параметры.Вставить("Организация", Организация);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СоглашенияОбИспользованииЭД.Ссылка КАК СоглашениеПрямогоОбменаСБанками,
		|	СоглашенияОбИспользованииЭД.Контрагент
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
		|		ПО БанковскиеСчета.Банк = СоглашенияОбИспользованииЭД.Контрагент
		|ГДЕ
		|	БанковскиеСчета.Ссылка = &БанковскийСчет
		|	И БанковскиеСчета.Валютный = ЛОЖЬ
		|	И СоглашенияОбИспользованииЭД.Организация = &Организация
		|	И СоглашенияОбИспользованииЭД.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
		|	И СоглашенияОбИспользованииЭД.ПометкаУдаления = ЛОЖЬ";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Настройки.Вставить("СоглашениеПрямогоОбменаСБанками", Выборка.СоглашениеПрямогоОбменаСБанками);
			Настройки.Вставить("БанкДляПрямогоОбмена",            Выборка.Контрагент);
			Настройки.Вставить("Платежное_Требование",            Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

Процедура ОчиститьНенайденныеПоля(ДокументыКИмпорту)
	
	Для каждого СтрокаДокумента Из ДокументыКИмпорту Цикл
		
		СтрокаДокумента.ОписаниеОшибок = "";
		СтрокаДокумента.Готовность     = 0;
		
		Если ТипЗнч(СтрокаДокумента.Контрагент) = Тип("Строка") Тогда
			СтрокаДокумента.Контрагент = Неопределено;
		КонецЕсли;
		
		Если ТипЗнч(СтрокаДокумента.СчетКонтрагента) = Тип("Строка") Тогда
			СтрокаДокумента.СчетКонтрагента = Неопределено;
		КонецЕсли;
		
		Если ТипЗнч(СтрокаДокумента.Договор) = Тип("Строка") Тогда
			СтрокаДокумента.Договор = Неопределено;
		КонецЕсли;
		
		СтрокаДокумента.ДоговорКонтрагентаНеНайден = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеНалоговыхРеквизитов(СтрокаЭкспорта)
	
	// СтрокаЭкспорта - строка табличной части ПлатежныеДокументы обработки
	
	Если НЕ ПлатежиВБюджетКлиентСервер.ДействуетПриказ107н(СтрокаЭкспорта.Дата) Тогда
		// До даты применения 107н не выполняем проверку, так как был переходный период,
		// в течение которого непонятно, выполнение каких правил контролировать
		Возврат;
	КонецЕсли;
	
	РеквизитыПлатежаВБюджет = ПлатежиВБюджетКлиентСервер.НовыйРеквизитыПлатежаВБюджет();
	Если СтрокаЭкспорта.ВидДокумента = "Платежное поручение" Тогда
		РеквизитыПлатежаВБюджет.ВидПеречисления = СтрокаЭкспорта.Документ.ВидПеречисленияВБюджет;
	КонецЕсли;
	
	РеквизитыПлатежаВБюджет.ИдентификаторПлатежа = СтрокаЭкспорта.ИдентификаторПлатежа;
	РеквизитыПлатежаВБюджет.СтатусПлательщика    = СтрокаЭкспорта.СтатусСоставителя;
	РеквизитыПлатежаВБюджет.КБК                  = СтрокаЭкспорта.КодБК;
	РеквизитыПлатежаВБюджет.КодТерритории        = СтрокаЭкспорта.КодОКАТО;
	РеквизитыПлатежаВБюджет.ОснованиеПлатежа     = СтрокаЭкспорта.ПоказательОснования;
	РеквизитыПлатежаВБюджет.НалоговыйПериод      = СтрокаЭкспорта.ПоказательПериода;
	РеквизитыПлатежаВБюджет.НомерДокумента       = СтрокаЭкспорта.ПоказательНомера;
	РеквизитыПлатежаВБюджет.ДатаДокумента        = СтрокаЭкспорта.ПоказательДаты;
	РеквизитыПлатежаВБюджет.ТипПлатежа           = СтрокаЭкспорта.ПоказательТипа;
	
	ИсточникДанных = ПлатежиВБюджетПереопределяемый.НовыйИсточникДанныхКонтекстаПлатежногоДокумента();
	ИсточникДанных.Организация    = СтрокаЭкспорта.ОрганизацияСчет.Владелец;
	ИсточникДанных.Период         = СтрокаЭкспорта.Дата;
	ИсточникДанных.СчетПолучателя = СтрокаЭкспорта.КонтрагентСчет;
	ИсточникДанных.Налог          = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоКБК(СтрокаЭкспорта.КодБК);
	Контекст = ПлатежиВБюджетПереопределяемый.КонтекстПлатежногоДокумента(ИсточникДанных);
	
	// В незаполненных полях проставим "0"
	ПлатежиВБюджетКлиентСервер.ОтметитьНезаполненныеЗначения(РеквизитыПлатежаВБюджет);
	
	РезультатПроверки = ПлатежиВБюджетКлиентСервер.ПроверитьЗаполнение(РеквизитыПлатежаВБюджет, Контекст);
	Ошибки = РезультатПроверки.Ошибки;
	
	// Проверим дубли УИН
	ИнформацияДублиУИН = ПлатежиВБюджет.ПроверитьДублиУИН(РеквизитыПлатежаВБюджет.ИдентификаторПлатежа, СтрокаЭкспорта.Документ);
	Для каждого ОписаниеОшибки Из ИнформацияДублиУИН Цикл
		Ошибки.Добавить(ОписаниеОшибки);
	КонецЦикла;
	
	// Выведем результат проверки
	Для каждого Ошибка Из Ошибки Цикл
		ДобавитьЗамечание(СтрокаЭкспорта, 4, Ошибка.Описание); // 4 означает, что выгрузить можно только после ознакомления с ошибкой
	КонецЦикла;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////
// ФОНОВОЕ ВЫПОЛНЕНИЕ

Процедура ФоноваяЧтениеДокументовКИмпорту(СтруктураПараметров, АдресХранилища) Экспорт
	
	НомерСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураПараметров.БанковскийСчет, "НомерСчета");
	НастройкиПоУмолчаниюДляДокументов = ПолучитьСтруктуруНастроек(СтруктураПараметров.НастройкаЗаполнения);
	
	ДанныеДляЗаполнения  = Новый Структура;
	
	КешСвойствДокументов = ЗаполнитьКешСвойств();
	НайденКонецФайла     = НЕ СтруктураПараметров.ТребуетсяПовторноеЧтениеФайла;
	Если СтруктураПараметров.ТребуетсяПовторноеЧтениеФайла Тогда
		ИмяВременногоФайла  = ПолучитьИмяВременногоФайла("txt");
		ДвоичныеДанныеФайла = СтруктураПараметров.ДвоичныеДанныеФайла;
		ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);
		
		НайденКонецФайла = РазобратьФайлИмпорта(
							СтруктураПараметров.ДокументыКИмпорту,
							СтруктураПараметров.СтруктураДанныхИмпорта,
							СтруктураПараметров.ВыводитьСообщения,
							НомерСчета,
							СтруктураПараметров.Кодировка,
							СтруктураПараметров.Организация,
							СтруктураПараметров.Импорт_Заголовок,
							СтруктураПараметров.Импорт_РасчетныеСчета,
							ИмяВременногоФайла,
							СтруктураПараметров.СоздаватьНенайденныеЭлементы,
							СтруктураПараметров.СтекОповещений,
							СтруктураПараметров.КонтролироватьНекорректныеСимволыВНомере);
	Иначе
		ОчиститьНенайденныеПоля(СтруктураПараметров.ДокументыКИмпорту);
	КонецЕсли;
	
	Если НайденКонецФайла Тогда
		ОпределитьСсылочныеДанные(КешСвойствДокументов,
							СтруктураПараметров.ДокументыКИмпорту,
							СтруктураПараметров.СтруктураДанныхИмпорта,
							СтруктураПараметров.Организация,
							СтруктураПараметров.БанковскийСчет,
							СтруктураПараметров.Импорт_Заголовок,
							СтруктураПараметров.ДеревоКонтрагентов,
							НастройкиПоУмолчаниюДляДокументов,
							СтруктураПараметров.СоздаватьНенайденныеЭлементы,
							Истина,
							СтруктураПараметров.СтекОповещений);
		ДанныеДляЗаполнения.Вставить("СостояниеЗагрузки", 1);
	Иначе
		ДанныеДляЗаполнения.Вставить("СостояниеЗагрузки", 0);
	КонецЕсли;
	
	СтруктураПараметров.ДокументыКИмпорту.Индексы.Добавить("Готовность");
	ЕстьОшибкиИмпорта = СтруктураПараметров.ДокументыКИмпорту.НайтиСтроки(Новый Структура("Готовность", 0)).Количество()
					 <> СтруктураПараметров.ДокументыКИмпорту.Количество();
	
	ДанныеДляЗаполнения.Вставить("ДокументыКИмпорту",     СтруктураПараметров.ДокументыКИмпорту);
	ДанныеДляЗаполнения.Вставить("ДеревоКонтрагентов",    СтруктураПараметров.ДеревоКонтрагентов);
	ДанныеДляЗаполнения.Вставить("Импорт_Заголовок",      СтруктураПараметров.Импорт_Заголовок);
	ДанныеДляЗаполнения.Вставить("Импорт_РасчетныеСчета", СтруктураПараметров.Импорт_РасчетныеСчета);
	ДанныеДляЗаполнения.Вставить("СтекОповещений",        СтруктураПараметров.СтекОповещений);
	ДанныеДляЗаполнения.Вставить("ЕстьОшибкиИмпорта",     ЕстьОшибкиИмпорта);
	
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения,    АдресХранилища);
	
КонецПроцедуры

Процедура ФоноваяЗагрузкаДокументовКИмпорту(СтруктураПараметров, АдресХранилища) Экспорт
	
	НастройкиПоУмолчаниюДляДокументов = ПолучитьСтруктуруНастроек(СтруктураПараметров.НастройкаЗаполнения);
	
	ДанныеДляЗаполнения = Новый Структура;
	
	Загрузить(СтруктураПараметров.ДокументыКИмпорту,
			  СтруктураПараметров.Импорт_Заголовок,
			  СтруктураПараметров.Организация,
			  СтруктураПараметров.Импорт_РасчетныеСчета,
			  СтруктураПараметров.ИспользоватьГраницуОбработки,
			  НастройкиПоУмолчаниюДляДокументов,
			  СтруктураПараметров.ДатаГраницыОбработки,
			  СтруктураПараметров.БанковскийСчет,
			  СтруктураПараметров.СтекОповещений);
	
	ДанныеДляЗаполнения.Вставить("ДокументыКИмпорту",  СтруктураПараметров.ДокументыКИмпорту);
	ДанныеДляЗаполнения.Вставить("СтекОповещений",     СтруктураПараметров.СтекОповещений);
	ДанныеДляЗаполнения.Вставить("СостояниеЗагрузки",  2);
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
	
КонецПроцедуры

Процедура ФоноваяЗагрузкаКонтрагентовИДокументов(СтруктураПараметров, АдресХранилища) Экспорт
	
	НастройкиПоУмолчаниюДляДокументов = ПолучитьСтруктуруНастроек(СтруктураПараметров.НастройкаЗаполнения);
	
	ДанныеДляЗаполнения  = Новый Структура;
	КешСвойствДокументов = ЗаполнитьКешСвойств();
	
	СоздатьКонтрагентов(СтруктураПараметров.ДеревоКонтрагентов,
						СтруктураПараметров.ГруппаДляНовыхКонтрагентов,
						СтруктураПараметров.Организация,
						СтруктураПараметров.БанковскийСчет,
						СтруктураПараметров.МассивКонтрагентов,
						СтруктураПараметров.СтекОповещений);
	
	ДанныеДляЗаполнения.Вставить("ДеревоКонтрагентов", СтруктураПараметров.ДеревоКонтрагентов);
	ДанныеДляЗаполнения.Вставить("МассивКонтрагентов", СтруктураПараметров.МассивКонтрагентов);
	
	ОчиститьНенайденныеПоля(СтруктураПараметров.ДокументыКИмпорту);
	ОпределитьСсылочныеДанные(КешСвойствДокументов,
							СтруктураПараметров.ДокументыКИмпорту,
							СтруктураПараметров.СтруктураДанныхИмпорта,
							СтруктураПараметров.Организация,
							СтруктураПараметров.БанковскийСчет,
							СтруктураПараметров.Импорт_Заголовок,
							СтруктураПараметров.ДеревоКонтрагентов,
							НастройкиПоУмолчаниюДляДокументов,
							Истина,
							Ложь,
							СтруктураПараметров.СтекОповещений);
	
	Загрузить(СтруктураПараметров.ДокументыКИмпорту,
			  СтруктураПараметров.Импорт_Заголовок,
			  СтруктураПараметров.Организация,
			  СтруктураПараметров.Импорт_РасчетныеСчета,
			  СтруктураПараметров.ИспользоватьГраницуОбработки,
			  НастройкиПоУмолчаниюДляДокументов,
			  СтруктураПараметров.ДатаГраницыОбработки,
			  СтруктураПараметров.БанковскийСчет,
			  СтруктураПараметров.СтекОповещений);
	
	ДанныеДляЗаполнения.Вставить("ДокументыКИмпорту",  СтруктураПараметров.ДокументыКИмпорту);
	ДанныеДляЗаполнения.Вставить("СтекОповещений",     СтруктураПараметров.СтекОповещений);
	ДанныеДляЗаполнения.Вставить("СостояниеЗагрузки",  2);
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
	
КонецПроцедуры

Процедура ФоноваяЗагрузкаКонтрагентов(СтруктураПараметров, АдресХранилища) Экспорт
	
	ДанныеДляЗаполнения = Новый Структура;
	
	СоздатьКонтрагентов(СтруктураПараметров.ДеревоКонтрагентов,
						СтруктураПараметров.ГруппаДляНовыхКонтрагентов,
						СтруктураПараметров.Организация,
						СтруктураПараметров.БанковскийСчет,
						СтруктураПараметров.МассивКонтрагентов,
						СтруктураПараметров.СтекОповещений);
	
	ДанныеДляЗаполнения.Вставить("ДеревоКонтрагентов", СтруктураПараметров.ДеревоКонтрагентов);
	ДанныеДляЗаполнения.Вставить("МассивКонтрагентов", СтруктураПараметров.МассивКонтрагентов);
	ДанныеДляЗаполнения.Вставить("СтекОповещений",     СтруктураПараметров.СтекОповещений);
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
	
КонецПроцедуры

#КонецЕсли