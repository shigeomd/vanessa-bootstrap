////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Элементы.Настр_ФайлЗагрузки.Видимость = Форма.ВозможностьВыбораФайлов;
	Элементы.Настр_ФайлВыгрузки.Видимость = Форма.ВозможностьВыбораФайлов;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьТаблицуПлатежныхДокументов(Знач ПлатежноеПоручение, Знач ПлатежноеТребование)
	
	ТаблицаДокументов = Новый ТаблицаЗначений();
	ТаблицаДокументов.Колонки.Добавить("Документ", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповСтроки(24));
	ТаблицаДокументов.Колонки.Добавить("Пометка",  Новый ОписаниеТипов("Булево"));
	
	СтрокаДокумента = ТаблицаДокументов.Добавить();
	СтрокаДокумента.Документ = "Платежное поручение";
	СтрокаДокумента.Пометка  = ПлатежноеПоручение;
	
	СтрокаДокумента = ТаблицаДокументов.Добавить();
	СтрокаДокумента.Документ = "Платежное требование";
	СтрокаДокумента.Пометка  = ПлатежноеТребование;
	
	Возврат ТаблицаДокументов;
	
КонецФункции

&НаСервере
Процедура ПолучитьДанные()
	
	Настройки = Обработки.КлиентБанк.ПолучитьНастройкиПрограммыКлиентаБанка(Организация, Настр_БанковскийСчет);
	
	Настр_СоглашениеПрямогоОбменаСБанками            = Настройки.СоглашениеПрямогоОбменаСБанками;
	Настр_Кодировка                                  = Настройки.Кодировка = "DOS";
	Настр_Программа                                  = Настройки.Программа;
	Настр_ФайлВыгрузки                               = Настройки.ФайлВыгрузки;
	Настр_ФайлЗагрузки                               = Настройки.ФайлЗагрузки;
	Настр_КонтролироватьНекорректныеСимволыВНомере   = Настройки.КонтролироватьНекорректныеСимволыВНомере;
	Настр_АвтоматическоеСозданиеНенайденныхЭлементов = Настройки.СоздаватьНенайденныеЭлементы;
	
	Настройки.Свойство("Платежное_поручение",  Настр_ПлатежноеПоручение);
	Настройки.Свойство("Платежное_требование", Настр_ПлатежноеТребование);
	
	Если ЗначениеЗаполнено(Настр_СоглашениеПрямогоОбменаСБанками) Тогда
		Элементы.ГруппаВидыОбмена.ТекущаяСтраница = Элементы.ГруппаПрямойОбмен;
		Элементы.ПлатежноеТребование.Доступность  = Ложь;
		ТекстНадписи = НСтр("ru = 'С банком %1 действует соглашение о прямом обмене.
			|Отправка подписанных платежных документов и запрос банковской выписки осуществляется из 1С:Бухгалтерии'");
		СообщениеПрямогоОбмена = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстНадписи, ОбщегоНазначения.ПолучитьЗначениеРеквизита(Настр_БанковскийСчет, "Банк"));
	Иначе
		Элементы.ГруппаВидыОбмена.ТекущаяСтраница = Элементы.ГруппаОбменЧерезФайл;
		Элементы.ПлатежноеТребование.Доступность  = Истина;
		СообщениеПрямогоОбмена                    = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьНастройкиНаСервере(Знач Организация, Знач БанковскийСчет, Знач Программа,
		Знач Кодировка, Знач ФайлВыгрузки, Знач ФайлЗагрузки, Знач КонтролироватьНекорректныеСимволыВНомере,
		Знач ПлатежноеПоручение, Знач ПлатежноеТребование, Знач АвтоматическоеСозданиеНенайденныхЭлементов)
	
	НастройкиОбменаСКлиентомБанка = РегистрыСведений.НастройкиОбменаСКлиентомБанка.СоздатьМенеджерЗаписи();
	НастройкиОбменаСКлиентомБанка.БанковскийСчет = БанковскийСчет;
	НастройкиОбменаСКлиентомБанка.Организация    = Организация;
	НастройкиОбменаСКлиентомБанка.Прочитать();
	
	ТаблицаДокументов = ЗаполнитьТаблицуПлатежныхДокументов(ПлатежноеПоручение, ПлатежноеТребование);
	
	НастройкиОбменаСКлиентомБанка.Организация                              = Организация;
	НастройкиОбменаСКлиентомБанка.БанковскийСчет                           = БанковскийСчет;
	НастройкиОбменаСКлиентомБанка.Программа                                = Программа;
	НастройкиОбменаСКлиентомБанка.Кодировка                                = ?(Кодировка, "DOS", "Windows");
	НастройкиОбменаСКлиентомБанка.ФайлВыгрузки                             = ФайлВыгрузки;
	НастройкиОбменаСКлиентомБанка.ФайлЗагрузки                             = ФайлЗагрузки;
	НастройкиОбменаСКлиентомБанка.ВидыВыгружаемыхПлатДокументов            = Новый ХранилищеЗначения(ТаблицаДокументов);
	НастройкиОбменаСКлиентомБанка.КонтролироватьНекорректныеСимволыВНомере = КонтролироватьНекорректныеСимволыВНомере;
	НастройкиОбменаСКлиентомБанка.ОтключитьАвтоматическоеСозданиеНенайденныхЭлементов = НЕ АвтоматическоеСозданиеНенайденныхЭлементов;
	
	НастройкиОбменаСКлиентомБанка.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиЗаполнения()
	
	СохранитьНастройкиНаСервере(Организация, Настр_БанковскийСчет, Настр_Программа,
		Настр_Кодировка, Настр_ФайлВыгрузки, Настр_ФайлЗагрузки, Настр_КонтролироватьНекорректныеСимволыВНомере,
		Настр_ПлатежноеПоручение, Настр_ПлатежноеТребование, Настр_АвтоматическоеСозданиеНенайденныхЭлементов);
	
	ИсходящиеПараметры = Новый Структура;
	ИсходящиеПараметры.Вставить("БанковскийСчет",                           Настр_БанковскийСчет);
	ИсходящиеПараметры.Вставить("ФайлВыгрузки",                             Настр_ФайлВыгрузки);
	ИсходящиеПараметры.Вставить("ФайлЗагрузки",                             Настр_ФайлЗагрузки);
	ИсходящиеПараметры.Вставить("Кодировка",                                ?(Настр_Кодировка, "DOS", "Windows"));
	ИсходящиеПараметры.Вставить("Программа",                                Настр_Программа);
	ИсходящиеПараметры.Вставить("ГруппаДляНовыхКонтрагентов",               Настр_ГруппаДляНовыхКонтрагентов);
	ИсходящиеПараметры.Вставить("ВыгружатьПлатежноеПоручение",              Настр_ПлатежноеПоручение);
	ИсходящиеПараметры.Вставить("ВыгружатьПлатежноеТребование",             Настр_ПлатежноеТребование);
	ИсходящиеПараметры.Вставить("КонтролироватьНекорректныеСимволыВНомере", Настр_КонтролироватьНекорректныеСимволыВНомере);
	ИсходящиеПараметры.Вставить("СтатьяДДССписаниеСРасчетногоСчета",        Настр_СтатьяДДССписаниеСРасчетногоСчета);
	ИсходящиеПараметры.Вставить("СтатьяДДСПоступлениеНаРасчетныйСчет",      Настр_СтатьяДДСПоступлениеНаРасчетныйСчет);
	ИсходящиеПараметры.Вставить("ПроводитьПриЗагрузкеСписаниеСРасчетногоСчета",
		Настр_ПроводитьПриЗагрузкеСписаниеСРасчетногоСчета);
	ИсходящиеПараметры.Вставить("ПроводитьПриЗагрузкеПоступлениеНаРасчетныйСчет",
		Настр_ПроводитьПриЗагрузкеПоступлениеНаРасчетныйСчет);
	ИсходящиеПараметры.Вставить("СоздаватьНенайденныеЭлементы",             Настр_АвтоматическоеСозданиеНенайденныхЭлементов);
	ИсходящиеПараметры.Вставить("КритическоеИзменение",                     КритическоеИзменение);
	
	Модифицированность = Ложь;
	
	Закрыть(ИсходящиеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолучениеИмениКаталога() Экспорт
	
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	ДиалогОткрытияФайла.Каталог = "";
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите путь к каталогу обмена с клиентом банка'");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолучениеИмениКаталогаЗавершение", ЭтотОбъект);
	ДиалогОткрытияФайла.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеИмениКаталогаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено
		И ВыбранныеФайлы.Количество()>0 Тогда
		
		ИмяКаталога = ВыбранныеФайлы.Получить(0);
		ИмяКаталога = ИмяКаталога
				+ ОбщегоНазначенияКлиентСервер.ПолучитьСлеш(ОбщегоНазначенияКлиентПовтИсп.ТипПлатформыКлиента());
		
		ЭтотОбъект.Настр_ФайлВыгрузки = ИмяКаталога + "1c_to_kl.txt";
		ЭтотОбъект.Настр_ФайлЗагрузки = ИмяКаталога + "kl_to_1c.txt";
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТекстовыйДокументИзВременногоХранилищаФайла(АдресФайла, Кодировка)
	
	ИмяВременногоФайла  = ПолучитьИмяВременногоФайла("txt");
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресФайла);
	ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);
	Текст = Новый ТекстовыйДокумент();
	Если Кодировка = "DOS" Тогда
		Кодир = "cp866";
	Иначе
		Кодир = "windows-1251";
	КонецЕсли;
	
	Текст.Прочитать(ИмяВременногоФайла, Кодир);
	
	Возврат Текст;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Элементы.Настр_Программа.СписокВыбора.ЗагрузитьЗначения(
		УчетДенежныхСредствБП.СписокСовместимыхПрограммКлиентовБанка(Истина));
	
	Организация                                          = Параметры.Организация;
	Настр_ГруппаДляНовыхКонтрагентов                     = Параметры.ГруппаДляНовыхКонтрагентов;
	Настр_БанковскийСчет                                 = Параметры.БанковскийСчет;
	
	Настр_Кодировка                                      = Параметры.Кодировка;
	
	Настр_СтатьяДДССписаниеСРасчетногоСчета              = Параметры.СтатьяДДССписаниеСРасчетногоСчета;
	Настр_СтатьяДДСПоступлениеНаРасчетныйСчет            = Параметры.СтатьяДДСПоступлениеНаРасчетныйСчет;
	
	Настр_ПроводитьПриЗагрузкеСписаниеСРасчетногоСчета   = Параметры.ПроводитьПриЗагрузкеСписаниеСРасчетногоСчета;
	Настр_ПроводитьПриЗагрузкеПоступлениеНаРасчетныйСчет = Параметры.ПроводитьПриЗагрузкеПоступлениеНаРасчетныйСчет;
	
	ВозможностьВыбораФайлов                              = Параметры.ВозможностьВыбораФайлов;
	
	КритическоеИзменение = Ложь;
	
	ПолучитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ (ЗначениеЗаполнено(ЭтотОбъект.Настр_ФайлВыгрузки) ИЛИ ЗначениеЗаполнено(ЭтотОбъект.Настр_ФайлЗагрузки)) Тогда
		#Если ВебКлиент Тогда
			Если ВозможностьВыбораФайлов Тогда
				
				ПодключитьОбработчикОжидания("Подключаемый_ПолучениеИмениКаталога", 0.1, Истина);
				
			КонецЕсли;
		#Иначе
			ЭтотОбъект.Настр_ФайлВыгрузки = КаталогВременныхФайлов() + "1c_to_kl.txt";
			ЭтотОбъект.Настр_ФайлЗагрузки = КаталогВременныхФайлов() + "kl_to_1c.txt";
			Модифицированность = Истина;
		#КонецЕсли
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru = 'Настройки были изменены, сохранить?'");
		
		ОписаниеОповещенияЗавершение = Новый ОписаниеОповещения("ВопросПередЗакрытиемЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещенияЗавершение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Если ПроверитьЗаполнение() Тогда
			СохранитьНастройкиЗаполнения();
		КонецЕсли;
	Иначе
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	Если НЕ Настр_ПлатежноеПоручение И НЕ Настр_ПлатежноеТребование Тогда
		ТекстСообщения = НСтр("ru = 'Не выбраны документы для выгрузки'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Настр_ПлатежноеПоручение",, Отказ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Настр_СоглашениеПрямогоОбменаСБанками) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Настр_Программа");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура Настр_ФайлЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыборФайлаДляВыгрузкиИЗагрузки(Элемент, НСтр("ru = 'загрузки'"));
	
КонецПроцедуры

&НаКлиенте
Процедура Настр_ФайлЗагрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФайлДляПросмотра(Элемент, Настр_Кодировка, "Файл загрузки");
	
КонецПроцедуры

&НаКлиенте
Процедура Настр_ФайлЗагрузкиОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	КритическоеИзменение = Истина;
	Настр_ФайлЗагрузки = Текст;
	
КонецПроцедуры

&НаКлиенте
Процедура Настр_ФайлВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыборФайлаДляВыгрузкиИЗагрузки(Элемент, НСтр("ru = 'выгрузки'"));
	
КонецПроцедуры

&НаКлиенте
Процедура Настр_ФайлВыгрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФайлДляПросмотра(Элемент, Настр_Кодировка, "Файл выгрузки");
	
КонецПроцедуры

// Открывает для просмотра текстовой документ
//
&НаКлиенте
Процедура ОткрытьФайлДляПросмотра(Элемент, Кодировка, Заголовок)
	
	ДополнительныеПараметры = Новый Структура("ИмяФайла, Кодировка, Заголовок", Элемент.ТекстРедактирования, Кодировка, Заголовок);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФайлДляПросмотраСозданиеФайла", ЭтотОбъект, ДополнительныеПараметры);
	
	Файл = Новый Файл();
	Файл.НачатьИнициализацию(ОписаниеОповещения, ДополнительныеПараметры.ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлДляПросмотраСозданиеФайла(Файл, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Вставить("Файл", Файл);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФайлДляПросмотраПроверкаСуществования", ЭтотОбъект, ДополнительныеПараметры);
	Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлДляПросмотраПроверкаСуществования(Существует, ДополнительныеПараметры) Экспорт
	
	Если НЕ Существует Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Не найден файл!'"));
		Возврат;
		
	КонецЕсли;
	
	ПомещаемыеФайлы = Новый Массив;
	ПомещаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ДополнительныеПараметры.ИмяФайла));
	
	ПомещениеФайловЗавершение = Новый ОписаниеОповещения("ОткрытьФайлДляПросмотраЗавешениеПомещения", ЭтотОбъект, ДополнительныеПараметры);
	
	НачатьПомещениеФайлов(ПомещениеФайловЗавершение, ПомещаемыеФайлы, , Ложь, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлДляПросмотраЗавешениеПомещения(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПомещенныеФайлы <> Неопределено 
		И ПомещенныеФайлы.Количество()>0 Тогда
		ОписаниеФайлов = ПомещенныеФайлы.Получить(0);
		АдресФайла     = ОписаниеФайлов.Хранение;
		
		Если АдресФайла = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Текст = ПолучитьТекстовыйДокументИзВременногоХранилищаФайла(АдресФайла, ДополнительныеПараметры.Кодировка);
		Текст.Показать(ДополнительныеПараметры.Заголовок, ДополнительныеПараметры.ИмяФайла);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаДляВыгрузкиИЗагрузки(Элемент, Режим) Экспорт
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбора.Фильтр                      = НСтр("ru = 'Текстовый файл'") + " (*.txt)|*.txt";
	ДиалогВыбора.Заголовок                   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Выберите файл для %1 данных из клиента банка'"), Режим);
	ДиалогВыбора.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбора.Расширение                  = "txt";
	ДиалогВыбора.ИндексФильтра               = 0;
	ДиалогВыбора.ПолноеИмяФайла              = ?(ПустаяСтрока(Элемент.ТекстРедактирования),
		?(Режим = "выгрузки", "1c_to_kl.txt", "kl_to_1c.txt"), Элемент.ТекстРедактирования);
	ДиалогВыбора.ПроверятьСуществованиеФайла = Ложь;
	
	ДополнительныеПараметры = Новый Структура("Режим", Режим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборФайлаДляВыгрузкиИЗагрузкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ДиалогВыбора.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаДляВыгрузкиИЗагрузкиЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено
		И ВыбранныеФайлы.Количество()>0 Тогда
		
		Если ДополнительныеПараметры.Режим = НСтр("ru = 'загрузки'") Тогда
			Настр_ФайлЗагрузки = ВыбранныеФайлы[0];
		Иначе
			Настр_ФайлВыгрузки = ВыбранныеФайлы[0];
		КонецЕсли;
		
		Модифицированность   = Истина;
		КритическоеИзменение = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Настр_БанковскийСчетПриИзменении(Элемент)
	
	ПолучитьДанные();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Настр_ПрограммаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура("Заголовок, Список, ТекущаяСтрока",
		НСтр("ru = 'Выберите название программы'"),
		Элементы.Настр_Программа.СписокВыбора,
		?(Настр_Программа = "", "АРМ ""Клиент"" АС ""Клиент-Сбербанк"" Сбербанка России", Настр_Программа));
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("Настр_ПрограммаНачалоВыбораЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораИзСписка", СтруктураПараметров, ЭтотОбъект,,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура Настр_ПрограммаНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ВыбранныйЭлемент = РезультатЗакрытия;
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		Настр_Программа    = ВыбранныйЭлемент;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Настр_АвтоматическоеСозданиеНенайденныхЭлементовПриИзменении(Элемент)
	
	КритическоеИзменение = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Настр_КодировкаПриИзменении(Элемент)
	
	КритическоеИзменение = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура СохранитьИЗакрыть(Команда)
	
	Если ПроверитьЗаполнение() Тогда
		Если НЕ Модифицированность Тогда
			Закрыть();
		Иначе
			СохранитьНастройкиЗаполнения();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


