
&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

&НаКлиенте
Перем КлючеваяОперацияОбновлениеФормы;
&НаКлиенте
Перем КлючеваяОперацияЧтениеФайла;

&НаКлиенте
Перем ВремяНачалаОперации;

&НаКлиенте
Перем ТекущееЗначениеЯчейкиРедактированияДоИзменения;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	НастройкиУсловногоОформления = Новый Структура();
	
	УсловноеОформление.Элементы.Очистить();
	
	// Условное оформление, связанное с видимостью, устанавливаем сразу для всех колонок.
	УстановитьУсловноеОформлениеВидимость();
	
	// Условное оформление для полей, расположенных на страницах
	
	ОбновитьУсловноеОформление(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьУсловноеОформление(Форма)
	
	Элементы = Форма.Элементы;
	
	Если НЕ Форма.НастройкиУсловногоОформления.Свойство("ВыгрузкаПроинициализировано")
		И Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаВыгрузка Тогда
		
		Форма.УстановитьУсловноеОформлениеВыгрузка();
		
	ИначеЕсли НЕ Форма.НастройкиУсловногоОформления.Свойство("ЗагрузкаПроинициализировано")
		И Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаЗагрузка Тогда
		
		Форма.УстановитьУсловноеОформлениеЗагрузка();
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеВидимость()
	
	// ДокументыКИмпортуДокументНеЗагружен
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуДокументНеЗагружен");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.Документ",
		ВидСравненияКомпоновкиДанных.Заполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// ДокументыКИмпортуДокумент
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуДокумент");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.Документ",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// ДокументыКИмпортуСтатьяДДС
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуСтатьяДДС");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ИспользоватьСтатьиДДС",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// ДокументыКИмпортуОписаниеОшибок
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуОписаниеОшибок");
	
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		"Объект.СоздаватьНенайденныеЭлементы",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		"ПоказатьОшибкиИмпорта",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		"ДокументыКИмпорту.ОписаниеОшибок",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеВыгрузка() Экспорт
	
	НастройкиУсловногоОформления.Вставить("ВыгрузкаПроинициализировано", Истина);
	
	// ПлатежныеДокументы
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПлатежныеДокументы");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Объект.ПлатежныеДокументы.Готовность",
		ВидСравненияКомпоновкиДанных.Больше,
		0);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийПроблемуТекст);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеЗагрузка() Экспорт
	
	НастройкиУсловногоОформления.Вставить("ЗагрузкаПроинициализировано", Истина);
	
	// ДокументыКИмпортуДокументНеЗагружен
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуДокументНеЗагружен");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.Документ",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Не загружен'"));
	
	// ДокументыКИмпортуДокумент, ДокументыКИмпортуДокументНеЗагружен
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуДокумент");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуДокументНеЗагружен");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.Готовность",
		ВидСравненияКомпоновкиДанных.Равно,
		0);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.Документ",
		ВидСравненияКомпоновкиДанных.Заполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаТабличнойЧасти);
	
	// ДокументыКИмпортуДокумент, ДокументыКИмпортуДокументНеЗагружен
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуДокумент");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуДокументНеЗагружен");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.Готовность",
		ВидСравненияКомпоновкиДанных.Равно,
		0);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.Документ",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	
	// ДокументыКИмпортуДокумент, ДокументыКИмпортуДокументНеЗагружен
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуДокумент");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуДокументНеЗагружен");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ДокументыКИмпорту.Готовность", ВидСравненияКомпоновкиДанных.Больше, 0);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийПроблемуТекст);
	
	// ДокументыКИмпортуДоговор
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуДоговор");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.Готовность",
		ВидСравненияКомпоновкиДанных.Больше,
		0);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.ДоговорКонтрагентаНеНайден",
		ВидСравненияКомпоновкиДанных.Равно,
		Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийПроблемуТекст);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// ДокументыКИмпортуДоговор
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуДоговор");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.Готовность",
		ВидСравненияКомпоновкиДанных.Равно,
		0);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.ДоговорКонтрагентаНеНайден",
		ВидСравненияКомпоновкиДанных.Равно,
		Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	
	// ДокументыКИмпортуДокумент, ДокументыКИмпортуДокументНеЗагружен, ДокументыКИмпортуКонтрагент
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуКонтрагент");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.Готовность",
		ВидСравненияКомпоновкиДанных.Больше,
		0);
	
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		"ДокументыКИмпорту.Контрагент",
		ВидСравненияКомпоновкиДанных.Равно,
		НСтр("ru = 'Не указаны реквизиты контрагента'"));
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		"ДокументыКИмпорту.Контрагент",
		ВидСравненияКомпоновкиДанных.Содержит,
		НСтр("ru = 'Не найден'"));
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийПроблемуТекст);
	
	// ДокументыКИмпортуКонтрагент
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуКонтрагент");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.Готовность",
		ВидСравненияКомпоновкиДанных.Равно,
		0);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.Контрагент",
		ВидСравненияКомпоновкиДанных.Содержит,
		НСтр("ru = 'Не загружен'"));
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	
	// ДокументыКИмпортуСчетКонтрагента
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуСчетКонтрагента");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.Готовность",
		ВидСравненияКомпоновкиДанных.Больше,
		0);
	
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		"ДокументыКИмпорту.СчетКонтрагента",
		ВидСравненияКомпоновкиДанных.Равно,
		НСтр("ru = 'Не указаны реквизиты р/с'"));
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		"ДокументыКИмпорту.СчетКонтрагента",
		ВидСравненияКомпоновкиДанных.Содержит,
		НСтр("ru = 'Не найден'"));
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийПроблемуТекст);
	
	// ДокументыКИмпортуСчетКонтрагента
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуСчетКонтрагента");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.Готовность",
		ВидСравненияКомпоновкиДанных.Равно,
		0);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.СчетКонтрагента",
		ВидСравненияКомпоновкиДанных.Содержит,
		НСтр("ru = 'Не загружен'"));
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	
	// ДокументыКИмпортуНомерДок
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуНомерДок");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.Готовность",
		ВидСравненияКомпоновкиДанных.Больше,
		0);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ДокументыКИмпорту.НомерДокументаНекорректен",
		ВидСравненияКомпоновкиДанных.Равно,
		Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийПроблемуТекст);
	
	// ДокументыКИмпортуДоговор
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДокументыКИмпортуДоговор");
	
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		"СостояниеЗагрузки",
		ВидСравненияКомпоновкиДанных.Равно,
		2);
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ЛичныеСредстваПредпринимателя);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ЛичныеСредстваПредпринимателя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		"ДокументыКИмпорту.ВидОперации",
		ВидСравненияКомпоновкиДанных.ВСписке,
		СписокЗначений);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКнопкиЗагрузить(Форма)
	
	Элементы = Форма.Элементы;
	Элементы.КомандаЗагрузить.Доступность =  Форма.КоличествоКЗагрузке > 0;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеФормой()
	
	Элементы.ДокументыКИмпортуПоказатьОшибки.Видимость      = Объект.СоздаватьНенайденныеЭлементы;
	Элементы.ДокументыКИмпортуСоздатьКонтрагентов.Видимость = НЕ Объект.СоздаватьНенайденныеЭлементы;
	Элементы.ГруппаСообщенияОбОшибке.Видимость              = НЕ Объект.СоздаватьНенайденныеЭлементы;
	
	Элементы.ДекорацияОтчетОВыгрузке.Доступность  = ЭкспортПроизведен;
	Элементы.ДекорацияВыгруженныйФайл.Доступность = ЭкспортПроизведен;
	Элементы.ДекорацияЗагружаемыйФайл.Доступность = ЗначениеЗаполнено(Объект.ФайлЗагрузки);
	
	УстановитьДоступностьКнопкиЗагрузить(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойНаСервере()
	
	ПрямойОбменСБанками = ЗначениеЗаполнено(Объект.СоглашениеПрямогоОбменаСБанками);
	
	Элементы.ГруппаВыгрузкиВыпискиЧерезЭД.Видимость = ПрямойОбменСБанками;
	Элементы.ГруппаВыгрузкаВыпискиВФайл.Видимость   = НЕ ПрямойОбменСБанками;
	Элементы.ГруппаШапкаЗагрузкиЭД.Видимость        = ПрямойОбменСБанками;
	Элементы.ГруппаШапкаЗагрузкиФайл.Видимость      = НЕ ПрямойОбменСБанками;
	
	ОткрытаСтраницаВыгрузки = Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаВыгрузка;
	
	Если ПрямойОбменСБанками Тогда
		Элементы.КомандаОтправитьЭД.КнопкаПоУмолчанию = ОткрытаСтраницаВыгрузки;
	Иначе
		Элементы.КомандаВыгрузить.КнопкаПоУмолчанию   = ОткрытаСтраницаВыгрузки;
	КонецЕсли;
	
	Элементы.КомандаЗагрузить.КнопкаПоУмолчанию       = НЕ ОткрытаСтраницаВыгрузки;
	
	УстановитьВидимостьБанковскогоСчета();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьЭлементовВыбораФайлов()
	
	Элементы.ФайлВыгрузки.Видимость             = ВозможностьВыбораФайлов;
	Элементы.ДекорацияФайлВыгрузки.Видимость    = ВозможностьВыбораФайлов;
	Элементы.ФайлЗагрузки.Видимость             = ВозможностьВыбораФайлов;
	Элементы.ДекорацияФайлЗагрузки.Видимость    = ВозможностьВыбораФайлов;
	Элементы.ДекорацияЗагружаемыйФайл.Видимость = ВозможностьВыбораФайлов;
	Элементы.ДекорацияВыгруженныйФайл.Видимость = ВозможностьВыбораФайлов;
	Элементы.ДокументыКИмпортуКомандаПрочитатьДанныеИзФайла.Видимость = ВозможностьВыбораФайлов
		ИЛИ ЗначениеЗаполнено(Объект.СоглашениеПрямогоОбменаСБанками);
	
	Если ВозможностьВыбораФайлов Тогда
		Элементы.ГруппаУправлениеЗагрузкой.ТекущаяСтраница = Элементы.ГруппаЗагрузкаТонкийКлиент;
	Иначе
		Элементы.ГруппаУправлениеЗагрузкой.ТекущаяСтраница = Элементы.ГруппаЗагрузкаВебКлиент;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКнопкуПоУмолчанию(ОткрытаСтраницаВыгрузки, СуществуетСоглашениеПрямогоОбмена)
	
	Если СуществуетСоглашениеПрямогоОбмена Тогда
		Элементы.КомандаОтправитьЭД.КнопкаПоУмолчанию = ОткрытаСтраницаВыгрузки;
	Иначе
		Элементы.КомандаВыгрузить.КнопкаПоУмолчанию   = ОткрытаСтраницаВыгрузки;
	КонецЕсли;
	
	Элементы.КомандаЗагрузить.КнопкаПоУмолчанию       = НЕ ОткрытаСтраницаВыгрузки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДокументыКИмпортуКонтрагентПриИзмененииСервер(ТекущиеДанные, Знач СоздаватьНенайденныеЭлементы)
	
	Если ТипЗнч(ТекущиеДанные.СчетКонтрагента) = Тип("Строка") Тогда
		СчетКонтрагента = Справочники.БанковскиеСчета.ПустаяСсылка();
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(
			СчетКонтрагента, ТекущиеДанные.Контрагент, ТекущиеДанные.ВалютаРегламентированногоУчета);
		Если СчетКонтрагента <> Справочники.БанковскиеСчета.ПустаяСсылка() Тогда
			ТекущиеДанные.СчетКонтрагента = СчетКонтрагента;
		КонецЕсли;
	Иначе
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(
			ТекущиеДанные.СчетКонтрагента, ТекущиеДанные.Контрагент, ТекущиеДанные.ВалютаРегламентированногоУчета);
	КонецЕсли;
	
	СписокВидовДоговоров = УчетДенежныхСредствКлиентСервер.ОпределитьВидДоговораСКонтрагентом(ТекущиеДанные.ВидОперации);
	
	Если ТипЗнч(ТекущиеДанные.Договор) = Тип("Строка") Тогда
		ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		УстановитьДоговорКонтрагента(
			ДоговорКонтрагента, ТекущиеДанные.Контрагент, ТекущиеДанные.Организация, СписокВидовДоговоров);
		Если ДоговорКонтрагента <> Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
			ТекущиеДанные.Договор = ДоговорКонтрагента;
		КонецЕсли;
	Иначе
		УстановитьДоговорКонтрагента(
			ТекущиеДанные.Договор, ТекущиеДанные.Контрагент, ТекущиеДанные.Организация, СписокВидовДоговоров);
	КонецЕсли;
	
	ОбновитьСостояниеСтроки(
		ТекущиеДанные.ДоговорКонтрагентаНеНайден, ТекущиеДанные.Готовность, ТекущиеДанные.Договор,
		СоздаватьНенайденныеЭлементы, ТекущиеДанные.ВидОперации, ТекущиеДанные.ОписаниеОшибок,
		ТекущиеДанные.Контрагент, ТекущиеДанные.СчетКонтрагента);
	
	Возврат ТекущиеДанные;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОбновитьСостояниеСтроки(ДоговорКонтрагентаНеНайден, Готовность, Договор,
		Знач СоздаватьНенайденныеЭлементы, Знач ВидОперации, Знач ОписаниеОшибок, Знач Контрагент, Знач СчетКонтрагента)
	
	Если Обработки.КлиентБанк.ЭтоВидОперацииБезДоговора(ВидОперации) Тогда
		ДоговорКонтрагентаНеНайден = Ложь;
		Договор = "";
		Возврат;
	КонецЕсли;
	
	ТипСтрока = Тип("Строка");
	ДоговорКонтрагентаНеНайден = ТипЗнч(Договор) = ТипСтрока;
	
	Если НЕ СоздаватьНенайденныеЭлементы Тогда
		СтрокаНеГотова = ДоговорКонтрагентаНеНайден ИЛИ
			НЕ(ТипЗнч(Контрагент)      <> ТипСтрока И ЗначениеЗаполнено(Контрагент)
			 И ТипЗнч(СчетКонтрагента) <> ТипСтрока И ЗначениеЗаполнено(СчетКонтрагента));
		
		Готовность = ?(СтрокаНеГотова, 3, 0);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьОшибкуВЖурнал(ТекстСообщения, ОписаниеОшибки)
	
	ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки.Описание);
	
КонецПроцедуры

// Процедура загружает из текстового файла данные в таблицу импорта
//
&НаКлиенте
Процедура ПрочитатьДанныеИзФайла(ОповещениеПослеЧтения = Неопределено, ВыводитьСообщения = Истина, ТребуетсяПовторноеЧтениеФайла = Истина) Экспорт
	Перем АдресФайлаСтарый;
	
	Если НЕ БанковскийСчетЗаполнен() Тогда
		Возврат;
	КонецЕсли;
	
	Если ТребуетсяПовторноеЧтениеФайла Тогда
		АдресФайлаСтарый = АдресФайла;
		АдресФайла       = Неопределено;
	КонецЕсли;
	
	Если ВыводитьСообщения И ТребуетсяПовторноеЧтениеФайла Тогда
		ОчиститьСообщения();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.СоглашениеПрямогоОбменаСБанками) Тогда
		
		Если ВыпискиБанка.Количество() = 0
				И ВыводитьСообщения Тогда
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Нстр("ru = 'Для получения электронной выписки банка нажмите кнопку ""Запросить выписку""'")
				,, "ЭлектроннаяВыпискаБанка");
				
			Возврат;
			
		КонецЕсли;
		
		Если ВыпискиБанка.Количество() > 0 Тогда
			
			ПрочитатьМассивВыписок(ВыпискиБанка, АдресФайла);
			
		КонецЕсли;
		
		Если АдресФайла = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		// Передаем на сервер
		ПрочитатьФайл(ВыводитьСообщения, ТребуетсяПовторноеЧтениеФайла);
		
		Если ОповещениеПослеЧтения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеПослеЧтения);
		КонецЕсли;
		
	ИначеЕсли ВозможностьВыбораФайлов Тогда
		
		Если ТребуетсяПовторноеЧтениеФайла Тогда
			
			// Вариант для установленного расширения для работы с файлами
			Если НЕ ЗначениеЗаполнено(Объект.ФайлЗагрузки) Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Нстр("ru = 'Не указан файл данных для загрузки в 1С:Бухгалтерию'")
					,, "Объект.ФайлЗагрузки");
				Возврат;
			КонецЕсли;
			
			ЗагрузитьФайлНаКлиенте(ОповещениеПослеЧтения, Объект.ФайлЗагрузки, ВыводитьСообщения);
			
		ИначеЕсли АдресФайла <> Неопределено Тогда // временное хранилище может быть не валидно
			// Передаем на сервер
			ПрочитатьФайл(ВыводитьСообщения, ТребуетсяПовторноеЧтениеФайла);
			
			Если ОповещениеПослеЧтения <> Неопределено Тогда
				ВыполнитьОбработкуОповещения(ОповещениеПослеЧтения);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		// Веб клиент без расширения для работы с файлами
		Попытка
			Если ТребуетсяПовторноеЧтениеФайла Тогда
				ДополнительныеПараметры  = Новый Структура("ВыводитьСообщения, ТребуетсяПовторноеЧтениеФайла, АдресФайлаСтарый",
					ВыводитьСообщения, ТребуетсяПовторноеЧтениеФайла, АдресФайлаСтарый);
				ОповещениеПомещениеФайла = Новый ОписаниеОповещения("ПомещениеФайлаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
				НачатьПомещениеФайла(ОповещениеПомещениеФайла, АдресФайла, "kl_to_1c.txt", Истина, УникальныйИдентификатор);
			ИначеЕсли АдресФайла <> Неопределено Тогда // если чтения вообще не было, то перечитывать пока нечего
				ПрочитатьФайл(ВыводитьСообщения, ТребуетсяПовторноеЧтениеФайла);
			КонецЕсли;
		Исключение
			АдресФайла = Неопределено;
			ШаблонСообщения = НСтр("ru = 'При чтении файла данных для загрузки в 1С:Бухгалтерию возникла ошибка
				|%1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ОписаниеОшибки = ИнформацияОбОшибке();
			ЗаписатьОшибкуВЖурнал(ТекстСообщения, ОписаниеОшибки);
		КонецПопытки;
		
		Если ОповещениеПослеЧтения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеПослеЧтения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПрочитатьДанныеИзФайла

&НаКлиенте
Процедура ПрочитатьФайл(ВыводитьСообщения, ТребуетсяПовторноеЧтениеФайла)
	
	ВремяНачалаОперации = ЗначениеТаймера();
	
	ИБФайловая = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая;
	Результат  = ЗаполнитьДокументыНаИмпорт(ИБФайловая, ВыводитьСообщения, ТребуетсяПовторноеЧтениеФайла);
	
	Если НЕ Результат.ЗаданиеВыполнено Тогда
		ЗафиксироватьДлительностьКлючевойОперации("Обновление");
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания);
		
		ИдентификаторЗадания    = Результат.ИдентификаторЗадания;
		АдресХранилища          = Результат.АдресХранилища;
	Иначе
		Если ИБФайловая Тогда
			ЗафиксироватьДлительностьКлючевойОперации("Обновление");
		КонецЕсли;
		
		ЗафиксироватьДлительностьКлючевойОперации("Чтение");
		
		ОповеститьОЗагрузкеДанныхНаКлиенте(Результат.СтруктураДанныхКлиента, "Чтение");
		СостояниеЗагрузки       = 1;
		
		Если НЕ ТребуетсяПовторноеЧтениеФайла И ДокументыКИмпорту_ТекущаяСтрока > 0 Тогда
			ТекущаяСтрока = ДокументыКИмпорту[ДокументыКИмпорту_ТекущаяСтрока];
			Если ТекущаяСтрока <> Неопределено Тогда
				Элементы.ДокументыКИмпорту.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
		КонецЕсли;
		
		ДокументыКИмпорту_ТекущаяСтрока = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция БанковскийСчетЗаполнен()
	
	Если НЕ ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Нстр("ru = 'Не выбран банковский счет'")
			,, "Объект.БанковскийСчет");
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ПериодЗаполнен()
	
	ПериодЗаполнен = Истина;
	
	Если НЕ ЗначениеЗаполнено(Объект.НачПериода) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Нстр("ru = 'Не заполнена дата начала периода'")
			,, "Объект.НачПериода");
		ПериодЗаполнен = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.КонПериода) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Нстр("ru = 'Не заполнена дата окончания периода'")
			,, "Объект.КонПериода");
		ПериодЗаполнен = Ложь;
	КонецЕсли;
	
	Возврат ПериодЗаполнен;
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруДанныхИмпорта()
	
	СтруктураДанныхИмпорта = Новый Соответствие;
	Для каждого КолонкаИмпорта Из ПолучитьРеквизиты("ДокументыКИмпорту") Цикл
		СтруктураДанныхИмпорта.Вставить(КолонкаИмпорта.Имя, КолонкаИмпорта.Заголовок);
	КонецЦикла;
	
	Возврат СтруктураДанныхИмпорта;
	
КонецФункции

// Процедура заполняет документы на импорт
//
&НаСервере
Функция ЗаполнитьДокументыНаИмпорт(ИБФайловая, ВыводитьСообщения, ТребуетсяПовторноеЧтениеФайла)
	
	ТаблицаКонтрагентов.ПолучитьЭлементы().Очистить();
	ДеревоКонтрагентов  = РеквизитФормыВЗначение("ТаблицаКонтрагентов");
	
	ДвоичныеДанныеФайла = ?(ТребуетсяПовторноеЧтениеФайла, ПолучитьИзВременногоХранилища(АдресФайла), Неопределено);
	
	СтекОповещений      = Новый Массив;
	СтруктураПараметров = Новый Структура(
		"ДокументыКИмпорту, СтруктураДанныхИмпорта, ВыводитьСообщения, БанковскийСчет, Кодировка,
		|Организация, НастройкаЗаполнения, ДеревоКонтрагентов, Импорт_Заголовок, Импорт_РасчетныеСчета,
		|ДвоичныеДанныеФайла, СоздаватьНенайденныеЭлементы, КонтролироватьНекорректныеСимволыВНомере,
		|СтекОповещений, ТребуетсяПовторноеЧтениеФайла",
		ДокументыКИмпорту.Выгрузить(), ПолучитьСтруктуруДанныхИмпорта(), ВыводитьСообщения, Объект.БанковскийСчет, Объект.Кодировка,
		Объект.Организация, НастройкаЗаполнения.Выгрузить(), ДеревоКонтрагентов, Импорт_Заголовок, Импорт_РасчетныеСчета.Выгрузить(),
		ДвоичныеДанныеФайла, Объект.СоздаватьНенайденныеЭлементы, Объект.КонтролироватьНекорректныеСимволыВНомере,
		СтекОповещений, ТребуетсяПовторноеЧтениеФайла);
	
	Если ИБФайловая Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
 		Обработки.КлиентБанк.ФоноваяЧтениеДокументовКИмпорту(СтруктураПараметров, АдресХранилища);
		Результат = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		НаименованиеЗадания = НСтр("ru = 'Чтение данных из файла импорта банка-клиента'");
		
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"Обработки.КлиентБанк.ФоноваяЧтениеДокументовКИмпорту",
			СтруктураПараметров,
			НаименованиеЗадания);
		
		АдресХранилища = Результат.АдресХранилища;
	КонецЕсли;
	
	Если Результат.ЗаданиеВыполнено Тогда
		Результат.Вставить("СтруктураДанныхКлиента", ЗагрузитьПодготовленныеДанные(ТребуетсяПовторноеЧтениеФайла));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Серверная процедура обновляет таблицу с выгружаемыми документами
//
&НаСервере
Процедура ДокументыНаЭкспортОбновитьСервер(Знач ВыгружатьПлатПоручения, Знач ВыгружатьПлатТребования)
	
	ЗаполнитьДокументыНаЭкспорт(ВыгружатьПлатПоручения, ВыгружатьПлатТребования);
	ПроверитьЗаполнениеТаблицыДокументов("ПлатежныеДокументы");
	ПлатежныеДокументыОбновитьИтогиВПодвале();
	
КонецПроцедуры

// Процедура заполняет таблицу документов на экспорт
//
&НаСервере
Процедура ЗаполнитьДокументыНаЭкспорт(ВыгружатьПлатПоручения, ВыгружатьПлатТребования)
	
	Обработки.КлиентБанк.ЗаполнитьДокументыНаЭкспорт(Объект.ПлатежныеДокументы,
													Элементы.ПлатежныеДокументы,
													Объект.НачПериода,
													Объект.КонПериода,
													Объект.БанковскийСчет,
													ВыгружатьПлатПоручения, ВыгружатьПлатТребования,
													Объект.КонтролироватьНекорректныеСимволыВНомере);
	
КонецПроцедуры

// Процедура проверяет заполнение таблицы с документами
//
&НаСервере
Процедура ПроверитьЗаполнениеТаблицыДокументов(Документы, ОбновитьТаблицуКонтрагентов = Ложь)
	
	Обработки.КлиентБанк.ПроверитьЗаполнениеТаблицыДокументов(Объект,
		?(Документы = "ПлатежныеДокументы", Объект.ПлатежныеДокументы, ДокументыКИмпорту), Документы);
	
	Если ОбновитьТаблицуКонтрагентов Тогда
		ЗначениеВРеквизитФормы(ПолучитьИзВременногоХранилища(АдресХранилищаКонтрагентов), "ТаблицаКонтрагентов");
	КонецЕсли;
	
	ДокументыКИмпортуОбновитьИтогиВПодвале();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеДокументыКИмпорту(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Объект.СоздаватьНенайденныеЭлементы Тогда
		ОбновитьТаблицуКонтрагентов = Ложь;
		Если ДополнительныеПараметры <> Неопределено
			И ДополнительныеПараметры.Свойство("ОбновитьТаблицуКонтрагентов") Тогда
			ОбновитьТаблицуКонтрагентов = ДополнительныеПараметры.ОбновитьТаблицуКонтрагентов;
		КонецЕсли;
		
		ПроверитьЗаполнениеТаблицыДокументов("ДокументыКИмпорту", ОбновитьТаблицуКонтрагентов);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьВидыДоговоров(ВидОперации)
	
	Возврат УчетДенежныхСредствКлиентСервер.ОпределитьВидДоговораСКонтрагентом(ВидОперации);
	
КонецФункции

&НаСервереБезКонтекста
Функция ДокументыКИмпортуСчетКонтрагентаПриИзмененииСервер(ТекущиеДанные, Знач СоздаватьНенайденныеЭлементы)
	
	Если ЗначениеЗаполнено(ТекущиеДанные.СчетКонтрагента) И НЕ ЗначениеЗаполнено(ТекущиеДанные.Контрагент) Тогда
		Попытка
			ТекущиеДанные.Контрагент = ТекущиеДанные.СчетКонтрагента.Владелец;
		Исключение
			// Запись в журнал регистрации не требуется
		КонецПопытки;
	КонецЕсли;
	
	СписокВидовДоговоров = УчетДенежныхСредствКлиентСервер.ОпределитьВидДоговораСКонтрагентом(ТекущиеДанные.ВидОперации);
	
	Если ТипЗнч(ТекущиеДанные.Договор) = Тип("Строка") Тогда
		ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		УстановитьДоговорКонтрагента(ДоговорКонтрагента, ТекущиеДанные.Контрагент, ТекущиеДанные.Организация, СписокВидовДоговоров);
		Если ДоговорКонтрагента <> Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
			ТекущиеДанные.Договор = ДоговорКонтрагента;
		КонецЕсли;
	Иначе
		УстановитьДоговорКонтрагента(ТекущиеДанные.Договор, ТекущиеДанные.Контрагент, ТекущиеДанные.Организация, СписокВидовДоговоров);
	КонецЕсли;
	
	ОбновитьСостояниеСтроки(
		ТекущиеДанные.ДоговорКонтрагентаНеНайден, ТекущиеДанные.Готовность, ТекущиеДанные.Договор,
		СоздаватьНенайденныеЭлементы, ТекущиеДанные.ВидОперации, ТекущиеДанные.ОписаниеОшибок,
		ТекущиеДанные.Контрагент, ТекущиеДанные.СчетКонтрагента);
	
	Возврат ТекущиеДанные;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьСпискиДокументов(ВыводитьСообщения, ТребуетсяПовторноеЧтениеФайла = Истина)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаВыгрузка Тогда
		ОбновитьСписокДокументовНаЭкспорт();
	Иначе
		Если НастройкаВыполнена Тогда
			ОчиститьСообщения();
			
			Если ТребуетсяПовторноеЧтениеФайла Тогда
				ДокументыКИмпорту.Очистить();
			КонецЕсли;
			
			ПрочитатьДанныеИзФайла(, ВыводитьСообщения, ТребуетсяПовторноеЧтениеФайла);
		ИначеЕсли ПустаяСтрока(Объект.ФайлЗагрузки) Тогда
			ДокументыКИмпорту.Очистить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Открывает для просмотра текстовой документ
//
&НаКлиенте
Процедура ОткрытьФайлДляПросмотра(Элемент, Кодировка, Заголовок)
	
	ОбъектПроверки  = Объект[Элемент.Имя];
	ЭлементПривязки = "Объект." + Элемент.Имя;
	Если ПустаяСтрока(ОбъектПроверки) Тогда
		ТекстСоощения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 не заполнен'"), Заголовок);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСоощения
			,, ЭлементПривязки);
		
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ИмяФайла, Кодировка, Заголовок, ЭлементПривязки", Элемент.ТекстРедактирования, Кодировка, Заголовок, ЭлементПривязки);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФайлДляПросмотраСозданиеФайла", ЭтотОбъект, ДополнительныеПараметры);
	
	Файл = Новый Файл();
	Файл.НачатьИнициализацию(ОписаниеОповещения, ДополнительныеПараметры.ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаДляВыгрузкиИЗагрузки(Элемент, Режим) Экспорт
	
	РежимЗагрузка = Режим = НСтр("ru = 'загрузки'");
	Если РежимЗагрузка Тогда
		ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Иначе
		ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	КонецЕсли;
	
	ДиалогВыбора.Фильтр                      = НСтр("ru = 'Текстовый файл'") + " (*.txt)|*.txt";
	ДиалогВыбора.Заголовок                   = ?(РежимЗагрузка,
		НСтр("ru = 'Выберите файл для загрузки данных в 1C'"),
		НСтр("ru = 'Выберите папку для выгрузки данных из 1C'"));
	ДиалогВыбора.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбора.Расширение                  = "txt";
	ДиалогВыбора.ИндексФильтра               = 0;
	ДиалогВыбора.ПолноеИмяФайла              = ?(ПустаяСтрока(Элемент.ТекстРедактирования),
		?(РежимЗагрузка, "kl_to_1c.txt", "1c_to_kl.txt"), Элемент.ТекстРедактирования);
	ДиалогВыбора.ПроверятьСуществованиеФайла = Ложь;
	
	ДополнительныеПараметры = Новый Структура("Режим", Режим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборФайлаДляВыгрузкиИЗагрузкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ДиалогВыбора.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаДляВыгрузкиИЗагрузкиЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено
		И ВыбранныеФайлы.Количество()>0 Тогда
		
		Если ДополнительныеПараметры.Режим = НСтр("ru = 'загрузки'") Тогда
			
			Объект.ФайлЗагрузки = ВыбранныеФайлы.Получить(0);
			
			Оповестить("ВыбранФайлЗагрузки");
		Иначе
			Объект.ФайлВыгрузки = ВыбранныеФайлы.Получить(0);
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлНаКлиенте(ИмяФайла, АдресВоВременномХранилище)
	
	ДополнительныеПараметры = Новый Структура("ИмяФайла, АдресВоВременномХранилище", ИмяФайла, АдресВоВременномХранилище);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьФайлНаКлиентеСозданиеФайла", ЭтотОбъект, ДополнительныеПараметры);
	
	Файл = Новый Файл();
	Файл.НачатьИнициализацию(ОписаниеОповещения, ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлНаКлиентеЗавершение(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	ТекстЗаголовка = НСтр("ru = 'Данные успешно выгружены в файл'");
	
	#Если НЕ ВебКлиент Тогда
	ПоказатьОповещениеПользователя(
		ТекстЗаголовка, "file:///" + СтрЗаменить(СокрЛП(ДополнительныеПараметры.ИмяФайла), "\", "/"),
		ДополнительныеПараметры.ИмяФайла, Элементы.КомандаВыгрузить.Картинка);
	#Иначе
	ПоказатьОповещениеПользователя(
		ТекстЗаголовка,,
		ДополнительныеПараметры.ИмяФайла, Элементы.КомандаВыгрузить.Картинка);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлНаКлиентеПроверкаНаКаталог(ЭтоКаталог, ДополнительныеПараметры) Экспорт
	
	Если Прав(СокрЛП(ДополнительныеПараметры.ИмяФайла), 1) = "\"
		ИЛИ Прав(СокрЛП(ДополнительныеПараметры.ИмяФайла), 1) = "/"
		ИЛИ ЭтоКаталог Тогда
		ТекстСообщения = НСтр("ru = 'Файл данных для выгрузки из 1С:Бухгалтерии не корректен - выбран ""каталог"".
				|Выберите файл выгрузки'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения
			,, "Объект.ФайлВыгрузки");
		
		Возврат;
	КонецЕсли;
	
	ПередаваемыеФайлы = Новый Массив;
	
	ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(ДополнительныеПараметры.ИмяФайла, ДополнительныеПараметры.АдресВоВременномХранилище);
	ПередаваемыеФайлы.Добавить(ОписаниеФайла);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьФайлНаКлиентеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	НачатьПолучениеФайлов(ОписаниеОповещения, ПередаваемыеФайлы,ДополнительныеПараметры.ИмяФайла, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлНаКлиентеПроверкаСуществования(Существует, ДополнительныеПараметры) Экспорт
	
	Файл = ДополнительныеПараметры.Файл;
	ДополнительныеПараметры.Вставить("ФайлСуществует", Существует);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьФайлНаКлиентеПроверкаНаКаталог", ЭтотОбъект, ДополнительныеПараметры);
	Если Существует Тогда
		Файл.НачатьПроверкуЭтоКаталог(ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлНаКлиентеСозданиеФайла(Файл, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Вставить("Файл", Файл);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьФайлНаКлиентеПроверкаСуществования", ЭтотОбъект, ДополнительныеПараметры);
	Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
	
КонецПроцедуры

// Процедура формирует отчет о выгрузке
//
&НаСервере
Процедура ПолучитьОтчетОВыгрузке(ПолеОтчета)
	
	Обработки.КлиентБанк.ПечатьОтчетаОВыгруженныхПлатежныхДокументах(ПолеОтчета,
																	Объект.ПлатежныеДокументы,
																	Объект.Организация,
																	Объект.БанковскийСчет,
																	Объект.НачПериода,
																	Объект.КонПериода);
	
КонецПроцедуры

// Процедура формирует отчет о загрузке
//
&НаСервере
Процедура ПолучитьОтчетОЗагрузке(ПолеОтчета)
	
	Обработки.КлиентБанк.ПечатьОтчетаОЗагруженныхПлатежныхДокументах(ПолеОтчета,
																	ДокументыКИмпорту,
																	Объект.Организация,
																	Импорт_РасчетныеСчета,
																	Импорт_Заголовок);
	
КонецПроцедуры

// Функция помещает таблицу сведений о ненайденных контрагентах во временное хранилище
// и возвращает адрес этого хранилища
&НаСервере
Функция ПолучитьАдресВременногоХранилищаТаблицыКонтрагентов()
	
	// Не будем создавать ненайденные элементы:
	//   - для тех строк, которые пользователь не выбрал в Выписке
	//   - для тех строк, которые пользователь заполнил сам (вручную)
	ТипСтрока              = Тип("Строка");
	СоответствиеОтмеченных = Новый Соответствие();
	СоответствиеВидовКонтрагентов = Новый Соответствие();
	Для каждого СтрокаИмпорта Из ДокументыКИмпорту Цикл
		Загружать = СтрокаИмпорта.Загружать;
		Если Загружать Тогда
			Загружать = НЕ(ТипЗнч(СтрокаИмпорта.Контрагент)      <> ТипСтрока И ЗначениеЗаполнено(СтрокаИмпорта.Контрагент)
						 И ТипЗнч(СтрокаИмпорта.СчетКонтрагента) <> ТипСтрока И ЗначениеЗаполнено(СтрокаИмпорта.СчетКонтрагента)
						 И ТипЗнч(СтрокаИмпорта.Договор)         <> ТипСтрока И ЗначениеЗаполнено(СтрокаИмпорта.Договор));
		КонецЕсли;
		
		СоответствиеОтмеченных.Вставить(СтрокаИмпорта.НомерСтроки, Новый Структура("Загружать", Загружать));
		
		Если Загружать Тогда
			Если ТипЗнч(СтрокаИмпорта.Контрагент)   <> ТипСтрока И ЗначениеЗаполнено(СтрокаИмпорта.Контрагент)
			И ТипЗнч(СтрокаИмпорта.СчетКонтрагента) <> ТипСтрока И НЕ ЗначениеЗаполнено(СтрокаИмпорта.СчетКонтрагента) Тогда
				СоответствиеОтмеченных[СтрокаИмпорта.НомерСтроки].Вставить("Контрагент", СтрокаИмпорта.Контрагент);
			КонецЕсли;
			
			Если ТипЗнч(СтрокаИмпорта.Договор) = ТипСтрока Тогда
				ВидыДоговоров = УчетДенежныхСредствКлиентСервер.ОпределитьВидДоговораСКонтрагентом(СтрокаИмпорта.ВидОперации);
				Если ВидыДоговоров.Количество() > 0 Тогда
					ВидДоговора = Строка(ВидыДоговоров[0]);
				Иначе
					ВидДоговора = Неопределено;
				КонецЕсли;
				
				СоответствиеОтмеченных[СтрокаИмпорта.НомерСтроки].Вставить("ВидДоговора", ВидДоговора);
			Иначе
				СоответствиеОтмеченных[СтрокаИмпорта.НомерСтроки].Вставить("Договор", СтрокаИмпорта.Договор);
			КонецЕсли;
			СоответствиеОтмеченных[СтрокаИмпорта.НомерСтроки].Вставить("ВидКонтрагента", СтрокаИмпорта.ВидКонтрагента);
		КонецЕсли;
		СоответствиеВидовКонтрагентов.Вставить(СтрокаИмпорта.НомерСтроки, Новый Структура("ВидКонтрагента", СтрокаИмпорта.ВидКонтрагента));
	КонецЦикла;
	
	ДеревоКонтрагентов = ТаблицаКонтрагентов.ПолучитьЭлементы();
	ИндексЗаписи = 0;
	
	Пока ИндексЗаписи <= ДеревоКонтрагентов.Количество()-1 Цикл
		
		НенайденныйКонтрагент = ДеревоКонтрагентов.Получить(ИндексЗаписи);
		
		Если НенайденныйКонтрагент.УчаствуетВНесколькихСтроках Тогда
			
			Для каждого СтрокаУчастия Из НенайденныйКонтрагент.ДопСтрокиВКоторыхУчаствуетКонтрагент Цикл
				Если НенайденныйКонтрагент.Значение <> СоответствиеВидовКонтрагентов[СтрокаУчастия.Значение].ВидКонтрагента Тогда
					НенайденныйКонтрагент.ДопСтрокиВКоторыхУчаствуетКонтрагент.Удалить(СтрокаУчастия);
				КонецЕсли;
			КонецЦикла;
			
			Если НенайденныйКонтрагент.Значение <> СоответствиеВидовКонтрагентов[НенайденныйКонтрагент.НомСтроки].ВидКонтрагента Тогда
				Если НенайденныйКонтрагент.ДопСтрокиВКоторыхУчаствуетКонтрагент.Количество() > 0 Тогда
					НенайденныйКонтрагент.НомСтроки = НенайденныйКонтрагент.ДопСтрокиВКоторыхУчаствуетКонтрагент.Получить(0).Значение;
					НенайденныйКонтрагент.ДопСтрокиВКоторыхУчаствуетКонтрагент.Удалить(НенайденныйКонтрагент.ДопСтрокиВКоторыхУчаствуетКонтрагент.Получить(0));
				Иначе
					ДеревоКонтрагентов.Удалить(ДеревоКонтрагентов.Индекс(НенайденныйКонтрагент));
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если НенайденныйКонтрагент.ДопСтрокиВКоторыхУчаствуетКонтрагент.Количество() = 1 Тогда
				Если НенайденныйКонтрагент.НомСтроки = НенайденныйКонтрагент.ДопСтрокиВКоторыхУчаствуетКонтрагент.Получить(0).Значение Тогда
					НенайденныйКонтрагент.УчаствуетВНесколькихСтроках = Ложь;
					НенайденныйКонтрагент.ДопСтрокиВКоторыхУчаствуетКонтрагент.Очистить();
				КонецЕсли;
			ИначеЕсли НенайденныйКонтрагент.ДопСтрокиВКоторыхУчаствуетКонтрагент.Количество() = 0 Тогда
				НенайденныйКонтрагент.УчаствуетВНесколькихСтроках = Ложь;
			КонецЕсли;
			
			Пометка = СоответствиеОтмеченных[НенайденныйКонтрагент.НомСтроки].Загружать;
			Для каждого СтрокаУчастия Из НенайденныйКонтрагент.ДопСтрокиВКоторыхУчаствуетКонтрагент Цикл
				Пометка = Пометка ИЛИ СоответствиеОтмеченных[СтрокаУчастия.Значение].Загружать;
			КонецЦикла;
			
			НенайденныйКонтрагент.Пометка = Пометка;
		Иначе
			
			Если НенайденныйКонтрагент.Значение <> СоответствиеВидовКонтрагентов[НенайденныйКонтрагент.НомСтроки].ВидКонтрагента Тогда
				ДеревоКонтрагентов.Удалить(ДеревоКонтрагентов.Индекс(НенайденныйКонтрагент));
				Продолжить;
			КонецЕсли;
			
			НенайденныйКонтрагент.Пометка = СоответствиеОтмеченных[НенайденныйКонтрагент.НомСтроки].Загружать;
		КонецЕсли;
		
		Если НенайденныйКонтрагент.Пометка Тогда
			// если контрагент выбран пользователем, то заполним в дереве ненайденных ссылку на этого контрагента
			Если СоответствиеОтмеченных[НенайденныйКонтрагент.НомСтроки].Свойство("Контрагент") Тогда
				ВыбранныйКонтрагент = СоответствиеОтмеченных[НенайденныйКонтрагент.НомСтроки].Контрагент;
				Если НенайденныйКонтрагент.Реквизит <> ВыбранныйКонтрагент Тогда
					НенайденныйКонтрагент.Реквизит = ВыбранныйКонтрагент;
					НенайденныйКонтрагент.Представление = СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыбранныйКонтрагент, "Наименование"));
				КонецЕсли;
			КонецЕсли;
			
			НенайденныйКонтрагент.ЭтоРодитель = Истина;
			ПодчиненныеТекущемуЭлементы = НенайденныйКонтрагент.ПолучитьЭлементы();
			
			Если НенайденныйКонтрагент.Значение = "Сотрудник" Тогда
				ИндексПодчиненнойЗаписи = 0;
				Пока ИндексПодчиненнойЗаписи <= ПодчиненныеТекущемуЭлементы.Количество()-1 Цикл
					НенайденнаяЗапись = ПодчиненныеТекущемуЭлементы.Получить(ИндексПодчиненнойЗаписи);
					Если НенайденнаяЗапись.Представление = "Договор" Тогда
						ПодчиненныеТекущемуЭлементы.Удалить(ПодчиненныеТекущемуЭлементы.Индекс(НенайденнаяЗапись));
						Продолжить;
					КонецЕсли;
					ИндексПодчиненнойЗаписи = ИндексПодчиненнойЗаписи + 1;
				КонецЦикла;
			Иначе
				// актуализируем Вид договора, в зависимости от Вида операции
				АктуализироватьНенайденныеДоговора(ПодчиненныеТекущемуЭлементы, НенайденныйКонтрагент.НомСтроки, СоответствиеОтмеченных);
				Для каждого НомерДопСтроки Из НенайденныйКонтрагент.ДопСтрокиВКоторыхУчаствуетКонтрагент Цикл
					АктуализироватьНенайденныеДоговора(ПодчиненныеТекущемуЭлементы, НомерДопСтроки.Значение, СоответствиеОтмеченных, Истина);
				КонецЦикла;
			КонецЕсли;
		Иначе
			НенайденныйКонтрагент.ЭтоРодитель = Ложь;
		КонецЕсли;
		
		ИндексЗаписи = ИндексЗаписи + 1;
		
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(РеквизитФормыВЗначение("ТаблицаКонтрагентов"), УникальныйИдентификатор);
	
КонецФункции

&НаСервереБезКонтекста
Процедура АктуализироватьНенайденныеДоговора(ЭлементыДерева, Знач НомСтроки, Знач СоответствиеОтмеченных, Знач ЭтоДопСтрока = Ложь)
	
	Если СоответствиеОтмеченных[НомСтроки].Свойство("ВидДоговора") Тогда
		ВидДоговора = СоответствиеОтмеченных[НомСтроки].ВидДоговора;
		ПодчиненныйЭлемент = НайтиДанныеФормыЭлементДерева(ЭлементыДерева, "Значение", ВидДоговора);
		Если ЭтоДопСтрока Тогда
			Если ПодчиненныйЭлемент = Неопределено Тогда
				ПодчиненныйЭлемент = ЭлементыДерева.Добавить();
				ПодчиненныйЭлемент.Пометка       = Истина;
				ПодчиненныйЭлемент.Представление = "Договор";
				ПодчиненныйЭлемент.Значение      = ВидДоговора;
				Обработки.КлиентБанк.ДобавитьРеквизитыДоговора(ПодчиненныйЭлемент.ПолучитьЭлементы(), ВидДоговора);
			Иначе
				ПодчиненныйЭлемент.Пометка = Истина;
			КонецЕсли;
		ИначеЕсли ПодчиненныйЭлемент = Неопределено Тогда
			ПодчиненныйЭлемент = НайтиДанныеФормыЭлементДерева(ЭлементыДерева, "Представление", "Договор");
			Если ПодчиненныйЭлемент = Неопределено Тогда
				ПодчиненныйЭлемент = ЭлементыДерева.Добавить();
				ПодчиненныйЭлемент.Пометка       = Истина;
				ПодчиненныйЭлемент.Представление = "Договор";
				ПодчиненныйЭлемент.Значение      = ВидДоговора;
				Обработки.КлиентБанк.ДобавитьРеквизитыДоговора(ПодчиненныйЭлемент.ПолучитьЭлементы(), ВидДоговора);
			ИначеЕсли ПодчиненныйЭлемент.Значение <> ВидДоговора Тогда
				ПодчиненныйЭлемент.Значение = ВидДоговора;
				ПодчиненныйЭлемент.Реквизит = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
				Для каждого ЭлементДоговора Из ПодчиненныйЭлемент.ПолучитьЭлементы() Цикл
					Если ЭлементДоговора.Представление = "Наименование" Тогда
						ЭлементДоговора.Значение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Основной договор %1'"), НРег(ВидДоговора));
					КонецЕсли;
					
					Если ЭлементДоговора.Представление = "Вид" Тогда
						ЭлементДоговора.Значение = ВидДоговора;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			ПодчиненныйЭлемент.Пометка = Истина;
		КонецЕсли;
	ИначеЕсли СоответствиеОтмеченных[НомСтроки].Свойство("Договор") И НЕ ЭтоДопСтрока Тогда
		Договор = СоответствиеОтмеченных[НомСтроки].Договор;
		ПодчиненныйЭлемент = НайтиДанныеФормыЭлементДерева(ЭлементыДерева, "Реквизит", Договор);
		Если ПодчиненныйЭлемент = Неопределено Тогда
			ПодчиненныйЭлемент = НайтиДанныеФормыЭлементДерева(ЭлементыДерева, "Представление", "Договор");
			Если ПодчиненныйЭлемент <> Неопределено И ПодчиненныйЭлемент.Реквизит <> Договор Тогда
				ПодчиненныйЭлемент.Пометка  = Ложь;
				ПодчиненныйЭлемент.Реквизит = Договор;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиДанныеФормыЭлементДерева(Знач ЭлементыДерева, Знач ПолеПоиска, Знач ЗначениеПоиска)
	
	Для каждого ЭлементДоговора Из ЭлементыДерева Цикл
		Если ЭлементДоговора[ПолеПоиска] = ЗначениеПоиска Тогда
			Возврат ЭлементДоговора;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено; // ничего не нашли
	
КонецФункции

&НаКлиенте
Процедура РезультатПроведения(Команда)
	
	ТекущиеДанные = Элементы.ДокументыКИмпорту.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.Документ) Тогда
		ПараметрыФормы = Новый Структура("ДокументДвижений", ТекущиеДанные.Документ);
		ОткрытьФорму("Обработка.КорректировкаДвижений.Форма",
			ПараметрыФормы,
			Команда,
			Команда);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОрганизацияСервер()
	
	Если УчетДенежныхСредствБП.УстановитьБанковскийСчет(Объект.БанковскийСчет, Объект.Организация, ВалютаРегламентированногоУчета) Тогда
		ЗагрузитьНастройкиДляБанковскогоСчета();
	КонецЕсли;
	
	УправлениеФормойНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьБанковскогоСчета()
	
	Если ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		ИспользоватьНесколькоБанковскихСчетовОрганизации =
			Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Объект.Организация);
	Иначе
		ИспользоватьНесколькоБанковскихСчетовОрганизации = Истина;
	КонецЕсли;
	
	Элементы.БанковскийСчетВыгрузка.Видимость     = ИспользоватьНесколькоБанковскихСчетовОрганизации;
	Элементы.БанковскийСчетЗагрузкаФайл.Видимость = ИспользоватьНесколькоБанковскихСчетовОрганизации;
	Элементы.БанковскийСчетЗагрузкаЭД.Видимость   = ИспользоватьНесколькоБанковскихСчетовОрганизации;
	
	Если НЕ ИспользоватьНесколькоБанковскихСчетовОрганизации И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		Элементы.ГруппаОрганизацияФайл.Видимость = Ложь;
	ИначеЕсли НЕ Элементы.ГруппаОрганизацияФайл.Видимость Тогда
		Элементы.ГруппаОрганизацияФайл.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьПодготовленныеДанные(УстановитьОтметку = Ложь)
	
	СтруктураДанныхНаКлиенте = Новый Структура();
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат СтруктураДанныхНаКлиенте;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("ДокументыКИмпорту") Тогда
		ДокументыКИмпорту.Загрузить(СтруктураДанных.ДокументыКИмпорту);
		
		Если УстановитьОтметку Тогда
			ДокументыКИмпортуУстановитьОтметку(УстановитьОтметку);
		КонецЕсли;
		
		Элементы.ДокументыКИмпортуСуммаПоступило.ТекстПодвала = Формат(ДокументыКИмпорту.Итог("СуммаПоступило"), "ЧЦ=12; ЧДЦ=2");
		Элементы.ДокументыКИмпортуСуммаСписано.ТекстПодвала   = Формат(ДокументыКИмпорту.Итог("СуммаСписано"),   "ЧЦ=12; ЧДЦ=2");
		
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("Импорт_Заголовок") И СтруктураДанных.Импорт_Заголовок <> Неопределено Тогда
		Импорт_Заголовок = СтруктураДанных.Импорт_Заголовок;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("Импорт_РасчетныеСчета") Тогда
		ЗначениеВРеквизитФормы(СтруктураДанных.Импорт_РасчетныеСчета, "Импорт_РасчетныеСчета");
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("ДеревоКонтрагентов") Тогда
		ЗначениеВРеквизитФормы(СтруктураДанных.ДеревоКонтрагентов, "ТаблицаКонтрагентов");
		Элементы.ДокументыКИмпортуСоздатьКонтрагентов.Доступность =
			НЕ Объект.СоздаватьНенайденныеЭлементы И ТаблицаКонтрагентов.ПолучитьЭлементы().Количество() > 0;
	Иначе
		Элементы.ДокументыКИмпортуСоздатьКонтрагентов.Доступность = Ложь;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("СтекОповещений")
		И СтруктураДанных.СтекОповещений.Количество() > 0 Тогда
		СтруктураДанныхНаКлиенте.Вставить("СтекОповещений", СтруктураДанных.СтекОповещений);
		СтруктураДанныхНаКлиенте.Вставить("КоличествоЗагруженныхДокументов",
			ОпределитьКоличествоЗагруженныхДокументов(СтруктураДанных.СтекОповещений));
	КонецЕсли;
		
	Если СтруктураДанных.Свойство("СостояниеЗагрузки") Тогда
		СостояниеЗагрузки = СтруктураДанных.СостояниеЗагрузки;
	КонецЕсли;
	
	Если НЕ СтруктураДанных.Свойство("ЕстьОшибкиИмпорта", ЕстьОшибкиИмпорта) Тогда
		ЕстьОшибкиИмпорта = Ложь;
	КонецЕсли;
	
	Элементы.ДокументыКИмпортуПоказатьОшибки.Доступность = ЕстьОшибкиИмпорта;
	
	Если НЕ Объект.СоздаватьНенайденныеЭлементы Тогда
		ПроверитьЗаполнениеТаблицыДокументов("ДокументыКИмпорту");
	КонецЕсли;
	
	Возврат СтруктураДанныхНаКлиенте;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервереБезКонтекста
Функция ОпределитьКоличествоЗагруженныхДокументов(СтекОповещений)
	
	КоличествоДокументов = 0;
	Для каждого ЭлементСтека Из СтекОповещений Цикл
		Если ЭлементСтека.Свойство("Ссылка")
			И (ТипЗнч(ЭлементСтека.Ссылка) = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет")
			ИЛИ ТипЗнч(ЭлементСтека.Ссылка) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета")) Тогда
			КоличествоДокументов = КоличествоДокументов + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат КоличествоДокументов;
	
КонецФункции

&НаСервере
Функция ПолучитьТаблицуДокументов(ДеревоКонтрагентов)
	
	ТаблицаДокументовКИмпорту = ДокументыКИмпорту.Выгрузить();
	ТаблицаДокументовКИмпорту.Колонки.Добавить("РеквизитыКонтрагента");
	Для каждого СтрокаСекции Из ТаблицаДокументовКИмпорту Цикл
		ТипКонтрагента  = ?(СтрокаСекции.ПлательщикСчет = Объект.БанковскийСчет.НомерСчета, "ПОЛУЧАТЕЛЬ", "ПЛАТЕЛЬЩИК");
		
		ПолеПоиска       = "ИНН";
		ЗначениеПоиска   = СтрокаСекции[ТипКонтрагента + "ИНН"];
		// Если ИНН контрагента в файле не задан, то ищем по имени
		Если ПустаяСтрока(ЗначениеПоиска) Тогда
			ПолеПоиска     = "Наименование";
			ЗначениеПоиска = СтрокаСекции[ТипКонтрагента + "1"];
			
			Если ПустаяСтрока(ЗначениеПоиска) Тогда
				ЗначениеПоиска = СтрокаСекции[ТипКонтрагента];
			КонецЕсли;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("Представление, Значение", ПолеПоиска, ЗначениеПоиска);
		НайденныеЗаписиОКонтрагенте = ДеревоКонтрагентов.Строки.НайтиСтроки(СтруктураПоиска, Истина);
		
		СтрокаСекции.РеквизитыКонтрагента = Неопределено;
		
		Если НайденныеЗаписиОКонтрагенте.Количество() > 0 Тогда
			НайденнаяСтрока = НайденныеЗаписиОКонтрагенте[0];
			
			Родитель = НайденнаяСтрока.Родитель;
			Если Родитель <> Неопределено Тогда
				НайденнаяСтрока = Родитель;
			КонецЕсли;
			
			РеквизитыКонтрагента = Новый ТаблицаЗначений();
			РеквизитыКонтрагента.Колонки.Добавить("Значение");
			РеквизитыКонтрагента.Колонки.Добавить("Представление");
			РеквизитыКонтрагента.Колонки.Добавить("Реквизит");
			
			СтрокаСекции.РеквизитыКонтрагента = РеквизитыКонтрагента;
			
			Для Счет = 0 По 2 Цикл
				НовыйРеквизит = РеквизитыКонтрагента.Добавить();
				НовыйРеквизит.Представление = НайденнаяСтрока.Строки[Счет].Представление;
				НовыйРеквизит.Значение      = НайденнаяСтрока.Строки[Счет].Значение;
				НовыйРеквизит.Реквизит      = НайденнаяСтрока.Строки[Счет].Реквизит;
			КонецЦикла;
			
			Если СтрокаСекции.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя Тогда
				ВидДоговора = "С покупателем";
			ИначеЕсли СтрокаСекции.ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
				ВидДоговора = "С поставщиком";
			Иначе
				ВидДоговора = "другой";
			КонецЕсли;
			
			Для каждого Строка Из НайденнаяСтрока.Строки Цикл
				Если Строка.Представление = "Р/счет" И Строка.Значение = СтрокаСекции[ТипКонтрагента + "СЧЕТ"] Тогда
					
					НовыйРеквизит = РеквизитыКонтрагента.Добавить();
					НовыйРеквизит.Представление = Строка.Представление;
					НовыйРеквизит.Значение      = Строка.Значение;
					НовыйРеквизит.Реквизит      = Строка.Реквизит;
					
					Для каждого ПодСтрока Из Строка.Строки Цикл
						НовыйРеквизит = РеквизитыКонтрагента.Добавить();
						НовыйРеквизит.Представление = ПодСтрока.Представление;
						НовыйРеквизит.Значение      = ПодСтрока.Значение;
						НовыйРеквизит.Реквизит      = ПодСтрока.Реквизит;
					КонецЦикла;
					
				КонецЕсли;
			КонецЦикла;
			
			Для каждого Строка Из НайденнаяСтрока.Строки Цикл
				Если Строка.Представление = "Договор" И Строка.Значение = ВидДоговора Тогда
					
					НовыйРеквизит = РеквизитыКонтрагента.Добавить();
					НовыйРеквизит.Представление = Строка.Представление;
					НовыйРеквизит.Значение      = Строка.Значение;
					НовыйРеквизит.Реквизит      = Строка.Реквизит;
					
					Для каждого ПодСтрока Из Строка.Строки Цикл
						НовыйРеквизит = РеквизитыКонтрагента.Добавить();
						НовыйРеквизит.Представление = ПодСтрока.Представление;
						НовыйРеквизит.Значение      = ПодСтрока.Значение;
						НовыйРеквизит.Реквизит      = ПодСтрока.Реквизит;
					КонецЦикла;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаДокументовКИмпорту;
	
КонецФункции

// Функция загружает документы к импорту.
//
&НаСервере
Функция ЗагрузитьДокументыКИмпорту(ИБФайловая)
	
	НеобходимоЗагружатьКонтрагентов = Объект.СоздаватьНенайденныеЭлементы И ТаблицаКонтрагентов.ПолучитьЭлементы().Количество() > 0;
	Если НеобходимоЗагружатьКонтрагентов Тогда
		АдресХранилищаКонтрагентов = ПолучитьАдресВременногоХранилищаТаблицыКонтрагентов();
	КонецЕсли;
	
	СтекОповещений     = Новый Массив;
	ДеревоКонтрагентов = РеквизитФормыВЗначение("ТаблицаКонтрагентов");
	Если НеобходимоЗагружатьКонтрагентов Тогда
		СтруктураПараметров =
			Новый Структура("ДокументыКИмпорту, СтруктураДанныхИмпорта, ДеревоКонтрагентов, ГруппаДляНовыхКонтрагентов,
				|МассивКонтрагентов, Импорт_Заголовок, Организация, Импорт_РасчетныеСчета, ИспользоватьГраницуОбработки,
				|НастройкаЗаполнения, ДатаГраницыОбработки, БанковскийСчет, КонтролироватьНекорректныеСимволыВНомере, СтекОповещений",
				ПолучитьТаблицуДокументов(ДеревоКонтрагентов), ПолучитьСтруктуруДанныхИмпорта(), ДеревоКонтрагентов, ГруппаДляНовыхКонтрагентов,
				Неопределено, Импорт_Заголовок, Объект.Организация, Импорт_РасчетныеСчета.Выгрузить(), Объект.ИспользоватьГраницуОбработки,
				НастройкаЗаполнения.Выгрузить(), Объект.ДатаГраницыОбработки, Объект.БанковскийСчет,
				Объект.КонтролироватьНекорректныеСимволыВНомере, СтекОповещений);
	Иначе
		СтруктураПараметров = Новый Структура("ДокументыКИмпорту, Импорт_Заголовок, Организация, Импорт_РасчетныеСчета,
			|ИспользоватьГраницуОбработки, НастройкаЗаполнения, ДатаГраницыОбработки, БанковскийСчет, СтекОповещений",
			ПолучитьТаблицуДокументов(ДеревоКонтрагентов), Импорт_Заголовок, Объект.Организация, Импорт_РасчетныеСчета.Выгрузить(),
			Объект.ИспользоватьГраницуОбработки, НастройкаЗаполнения.Выгрузить(), Объект.ДатаГраницыОбработки, Объект.БанковскийСчет,
			СтекОповещений);
	КонецЕсли;
	
	Если ИБФайловая Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		Если НеобходимоЗагружатьКонтрагентов Тогда
			Обработки.КлиентБанк.ФоноваяЗагрузкаКонтрагентовИДокументов(СтруктураПараметров, АдресХранилища);
		Иначе
			Обработки.КлиентБанк.ФоноваяЗагрузкаДокументовКИмпорту(СтруктураПараметров, АдресХранилища);
		КонецЕсли;
		
		Результат = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		ПроцедураОбработки = ?(НеобходимоЗагружатьКонтрагентов,
			"Обработки.КлиентБанк.ФоноваяЗагрузкаКонтрагентовИДокументов",
			"Обработки.КлиентБанк.ФоноваяЗагрузкаДокументовКИмпорту");
		НаименованиеЗадания = НСтр("ru = 'Загрузка банковских документов из обработки ""Клиент-банк""'");
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			ПроцедураОбработки,
			СтруктураПараметров,
			НаименованиеЗадания);
		
		АдресХранилища = Результат.АдресХранилища;
	КонецЕсли;
	
	Если Результат.ЗаданиеВыполнено Тогда
		НеобходимоЗагружатьКонтрагентов = Объект.СоздаватьНенайденныеЭлементы И ТаблицаКонтрагентов.ПолучитьЭлементы().Количество() > 0;
		Результат.Вставить("СтруктураДанныхКлиента", ЗагрузитьПодготовленныеДанные(НеобходимоЗагружатьКонтрагентов));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОповеститьОЗагрузкеДанныхНаКлиенте(СтруктураДанныхКлиента, Операция = "Загрузка")
	
	Если Операция = "Загрузка" Тогда
		ЗагрузкаНеЗавершилась = Ложь;
		Если СтруктураДанныхКлиента.Свойство("КоличествоЗагруженныхДокументов")
			И СтруктураДанныхКлиента.КоличествоЗагруженныхДокументов > 0 Тогда
			ТекстОповещения = НСтр("ru = 'Документы загружены (%1)'");
			ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстОповещения, СтруктураДанныхКлиента.КоличествоЗагруженныхДокументов);
			ПоказатьОповещениеПользователя(ТекстОповещения,
				"e1cib/list/ЖурналДокументов.БанковскиеВыписки", НСтр("ru = 'Банковские выписки'"));
		Иначе
			ЗагрузкаНеЗавершилась = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДанныхКлиента.Свойство("СтекОповещений") Тогда
		Если Операция = "Загрузка" Тогда
			Для каждого Оповещение Из СтруктураДанныхКлиента.СтекОповещений Цикл
				Если Оповещение.Свойство("Текст") Тогда
					Если Оповещение.Свойство("Ссылка") Тогда
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Оповещение.Текст, Оповещение.Ссылка);
					Иначе
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Оповещение.Текст);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если ЗагрузкаНеЗавершилась Тогда
				Возврат;
			КонецЕсли;
		Иначе
			Для каждого Сообщение Из СтруктураДанныхКлиента.СтекОповещений Цикл
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение.Текст);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если Операция = "Загрузка" Тогда
		ОповеститьОбИзменении(Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет"));
		Если Объект.СоздаватьНенайденныеЭлементы Тогда
			ОповеститьОбИзменении(Тип("СправочникСсылка.Контрагенты"));
			Оповестить("СозданиеНеНайденного");
			СостояниеЗагрузки = 2;
		КонецЕсли;
	Иначе
		Если ДокументыКИмпорту_ТекущаяСтрока > 0 Тогда
			ТекущаяСтрока = ДокументыКИмпорту[ДокументыКИмпорту_ТекущаяСтрока];
			Если ТекущаяСтрока <> Неопределено Тогда
				Элементы.ДокументыКИмпорту.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
		КонецЕсли;
		
		ДокументыКИмпорту_ТекущаяСтрока = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДокументыКИмпортуНаКлиенте()
	
	ИБФайловая = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая;
	Результат  = ЗагрузитьДокументыКИмпорту(ИБФайловая);
	
	Если НЕ Результат.ЗаданиеВыполнено Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания);
		
		ИдентификаторЗадания    = Результат.ИдентификаторЗадания;
		АдресХранилища          = Результат.АдресХранилища;
	Иначе
		СостояниеЗагрузки       = 3;
		ОповеститьОЗагрузкеДанныхНаКлиенте(Результат.СтруктураДанныхКлиента);
		СостояниеЗагрузки       = 2;
	КонецЕсли;
	
КонецПроцедуры

// Функция вызывает функцию выгрузки документов из модуля объекта.
//
&НаСервере
Функция ВыгрузитьДокументы()
	
	Возврат Обработки.КлиентБанк.Выгрузить(ТаблицаДокументов.Выгрузить(),
											Объект.ПлатежныеДокументы,
											Объект.Кодировка,
											Объект.Программа,
											Объект.НачПериода,
											Объект.КонПериода,
											Объект.БанковскийСчет,
											Объект.ФайлВыгрузки,
											ВерсияФормата,
											Объект.Организация,
											УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьВидыДокументов(ТаблицаДокументов)
	
	Макет                   = УправлениеПечатью.ПолучитьМакет("Обработка.КлиентБанк.ВидыДокументов");
	ОбластьДокументов       = Макет.ПолучитьОбласть("Документы");
	ОбластьДокументовВысота = ОбластьДокументов.ВысотаТаблицы;
	
	Для НСтр = 1 По ОбластьДокументовВысота Цикл
		ВидДокумента  = СокрЛП(ОбластьДокументов.Область(НСтр, 1).Текст);
		Название      = СокрЛП(ОбластьДокументов.Область(НСтр, 2).Текст);
		Корреспондент = СокрЛП(ОбластьДокументов.Область(НСтр, 3).Текст);
		Кратко        = СокрЛП(ОбластьДокументов.Область(НСтр, 4).Текст);
		
		Стр = ТаблицаДокументов.Добавить();
		Стр.Пометка        = Истина;
		Стр.Документ       = ВидДокумента;
		Стр.Название       = Название;
		Стр.Корреспондент  = Корреспондент;
		Стр.ДокументКратко = Кратко;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьДоговорКонтрагента(ДоговорКонтрагента,
		Знач Контрагент, Знач Организация, Знач СписокВидовДоговоров = Неопределено, Знач Отбор = Неопределено)
	
	БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(
		ДоговорКонтрагента, Контрагент, Организация, СписокВидовДоговоров, Отбор);
	
КонецПроцедуры

&НаСервере
Процедура ДокументыКИмпортуОбновитьИтогиВПодвале()
	
	СуммаПоступило = 0;
	СуммаСписано   = 0;
	Количество     = 0;
	
	ОтборСтрокКЗагрузке = Новый Структура("Загружать", Истина);
	СтрокиКЗагрузке     = ДокументыКИмпорту.НайтиСтроки(ОтборСтрокКЗагрузке);
	Для каждого Строка Из СтрокиКЗагрузке Цикл
		СуммаПоступило = СуммаПоступило + Строка.СуммаПоступило;
		СуммаСписано   = СуммаСписано   + Строка.СуммаСписано;
		Количество     = Количество     + 1;
	КонецЦикла;
	
	КоличествоКЗагрузке     = Количество;
	СуммаПоступилоКЗагрузке = СуммаПоступило;
	СуммаСписаноКЗагрузке   = СуммаСписано;
	
	Если НЕ Объект.СоздаватьНенайденныеЭлементы Тогда
		СтатуснаяСтрокаПриЗагрузкеТекст = "";
		Если ДокументыКИмпорту.Количество() > 0 Тогда
			Если Элементы.ДокументыКИмпорту.ТекущаяСтрока = Неопределено Тогда
				СтатуснаяСтрокаПриЗагрузкеТекст = СокрЛП(ДокументыКИмпорту[0].ОписаниеОшибок);
			Иначе
				ТекСтрока = ДокументыКИмпорту.НайтиПоИдентификатору(Элементы.ДокументыКИмпорту.ТекущаяСтрока);
				Если ТекСтрока = Неопределено Тогда
					СтатуснаяСтрокаПриЗагрузкеТекст = СокрЛП(ДокументыКИмпорту[0].ОписаниеОшибок);
				Иначе
					СтатуснаяСтрокаПриЗагрузкеТекст = СокрЛП(ТекСтрока.ОписаниеОшибок);
				КонецЕсли;
			КонецЕсли;
		Иначе
			СтатуснаяСтрокаПриЗагрузке = "";
		КонецЕсли;
		
		Элементы.СтатуснаяСтрокаПриЗагрузке.Подсказка = СтатуснаяСтрокаПриЗагрузкеТекст;
		СтатуснаяСтрокаПриЗагрузке = ?(СтатуснаяСтрокаПриЗагрузкеТекст = "",
			СтатуснаяСтрокаПриЗагрузкеТекст,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Предупреждение: %1'"), СтатуснаяСтрокаПриЗагрузкеТекст));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПлатежныеДокументыОбновитьИтогиВПодвале()
	
	Сумма      = 0;
	Количество = 0;
	
	ОтборСтрокКВыгрузке = Новый Структура("Выгружать", Истина);
	СтрокиКВыгрузке     = Объект.ПлатежныеДокументы.НайтиСтроки(ОтборСтрокКВыгрузке);
	Для каждого Строка Из СтрокиКВыгрузке Цикл
		Сумма      = Сумма      + Строка.СуммаДокумента;
		Количество = Количество + 1;
	КонецЦикла;
	
	КоличествоКВыгрузке     = Количество;
	СуммаДокументаКВыгрузке = Сумма;
	
КонецПроцедуры

&НаСервере
Процедура ДокументыКИмпортуУстановитьОтметку(Отметка)
	
	Для каждого СтрокаДокумента Из ДокументыКИмпорту Цикл
		СтрокаДокумента.Загружать = Отметка;
	КонецЦикла;
	
	ДокументыКИмпортуОбновитьИтогиВПодвале();
	УстановитьДоступностьКнопкиЗагрузить(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПлатежныеДокументыУстановитьОтметку(Отметка)
	
	Для каждого СтрокаДокумента Из Объект.ПлатежныеДокументы Цикл
		СтрокаДокумента.Выгружать = Отметка;
	КонецЦикла;
	
	ПлатежныеДокументыОбновитьИтогиВПодвале();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиДляБанковскогоСчета()
	
	НастройкаВыполнена     = Ложь;
	СообщениеПрямогоОбмена = "";
	
	Если ЗначениеЗаполнено(Объект.Организация)
		И ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		
		Настройки = Обработки.КлиентБанк.ПолучитьНастройкиПрограммыКлиентаБанка(Объект.Организация, Объект.БанковскийСчет);
		
		Объект.СоглашениеПрямогоОбменаСБанками          = Настройки.СоглашениеПрямогоОбменаСБанками;
		Объект.Программа                                = Настройки.Программа;
		Объект.Кодировка                                = Настройки.Кодировка;
		Объект.ФайлВыгрузки                             = Настройки.ФайлВыгрузки;
		Объект.ФайлЗагрузки                             = Настройки.ФайлЗагрузки;
		Объект.ВыгружатьПлатежноеПоручение              = Настройки.Платежное_Поручение;
		Объект.ВыгружатьПлатежноеТребование             = Настройки.Платежное_Требование;
		Объект.КонтролироватьНекорректныеСимволыВНомере = Настройки.КонтролироватьНекорректныеСимволыВНомере;
		Объект.СоздаватьНенайденныеЭлементы             = Настройки.СоздаватьНенайденныеЭлементы;
		
		НастройкаВыполнена                              = Настройки.НастройкиЗагружены;
		
		Если ЗначениеЗаполнено(Настройки.СоглашениеПрямогоОбменаСБанками) Тогда
			ТекстШаблона =
				НСтр("ru = 'С %1 действует соглашение о прямом обмене: платежные документы будут отправлены в банк из 1С:Бухгалтерии'");
			ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстШаблона, Настройки.БанкДляПрямогоОбмена);
			СообщениеПрямогоОбмена = ТекстНадписи;
		КонецЕсли;
		
		УправлениеФормойНаСервере();
		
	КонецЕсли;
		
	Элементы.ПлатежныеДокументыСостояниеЭД.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭДСБанками")
		И ЗначениеЗаполнено(Объект.СоглашениеПрямогоОбменаСБанками);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНомерСчета(БанковскийСчет)
	
	Если ЗначениеЗаполнено(БанковскийСчет) Тогда
		Возврат ОбщегоНазначения.ПолучитьЗначениеРеквизита(БанковскийСчет, "НомерСчета");
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаКлиенте
Процедура ОбновитьСписокДокументовНаЭкспорт(ОчищатьСообщения = Истина)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница <> Элементы.ГруппаВыгрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ОчищатьСообщения Тогда
		ОчиститьСообщения();
	КонецЕсли;
	
	Объект.ПлатежныеДокументы.Очистить();
	
	Если НЕ ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Объект.ВыгружатьПлатежноеПоручение И НЕ Объект.ВыгружатьПлатежноеТребование Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Необходимо отметить хотя бы один из видов платежных документов.'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Поле", "Заполнение", "Банковский счет");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.БанковскийСчет");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.КонПериода) Тогда
		ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Поле", "Заполнение", "Конец периода выгрузки");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.КонПериода");
		Возврат;
	КонецЕсли;
	
	ДокументыНаЭкспортОбновитьСервер(Объект.ВыгружатьПлатежноеПоручение, Объект.ВыгружатьПлатежноеТребование);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗафиксироватьДлительностьКлючевойОперации(КлючеваяОперация)
	
	Если ВремяНачалаОперации <> Неопределено Тогда
		ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(
			?(КлючеваяОперация = "Обновление", КлючеваяОперацияОбновлениеФормы, КлючеваяОперацияЧтениеФайла),
			ВремяНачалаОперации
		);
		
		Если КлючеваяОперация = "Чтение" Тогда
			ВремяНачалаОперации = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЗначениеТаймера()
	Если ОценкаПроизводительностиВызовСервераПовтИсп.ВыполнятьЗамерыПроизводительности() Тогда
		Возврат ОценкаПроизводительностиКлиентСервер.ЗначениеТаймера();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Команда устанавливает флажки во всех строках таблицы.
//
&НаКлиенте
Процедура ОтметитьВсе(Команда)
	
	ПлатежныеДокументыУстановитьОтметку(Истина);
	
КонецПроцедуры

// Команда снимает флажки во всех строках таблицы.
//
&НаКлиенте
Процедура СнятьОтметкуСоВсех(Команда)
	
	ПлатежныеДокументыУстановитьОтметку(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыгрузить(Команда)
	
	ОчиститьСообщения();
	Если Объект.ПлатежныеДокументы.Количество() > 0 Тогда
		
		АдресФайлаВоВременномХранилище = ВыгрузитьДокументы();
		
		Если ВозможностьВыбораФайлов Тогда
			
			// Вариант для установленного расширения для работы с файлами
			
			Если НЕ ЗначениеЗаполнено(Объект.ФайлВыгрузки) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Не указан файл данных для выгрузки из 1С:Бухгалтерии'")
					,, "Объект.ФайлВыгрузки");
				Возврат;
			КонецЕсли;
			
			ВыгрузитьФайлНаКлиенте(Объект.ФайлВыгрузки, АдресФайлаВоВременномХранилище);
			
		Иначе
			// Веб клиент без расширения для работы с файлами
			Попытка
				
				ПолучитьФайл(АдресФайлаВоВременномХранилище, "1c_to_kl.txt", Истина);
				
			Исключение
				ШаблонСообщения = НСтр("ru = 'При записи файла возникла ошибка
					|%1'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				ОписаниеОшибки = ИнформацияОбОшибке();
				
				ЗаписатьОшибкуВЖурнал(ТекстСообщения, ОписаниеОшибки);
				
			КонецПопытки;
			
		КонецЕсли;
		
		ЭкспортПроизведен = Истина;
		
	Иначе
		
		Если Объект.НачПериода = Объект.КонПериода Тогда
			ТекстПериода = Формат(Объект.НачПериода, "ДФ=dd.MM.yyyy");
		Иначе
			ТекстПериода = НСтр("ru = 'период с %1 по %2'");
			ТекстПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПериода,
				Формат(Объект.НачПериода, "ДФ=dd.MM.yyyy"), 
				Формат(Объект.КонПериода, "ДФ=dd.MM.yyyy"));
		КонецЕсли;
		
		ТекстСообщения = НСтр("ru = 'Отсутствуют платежные поручения за %1
			|по счету %2
			|(%3).
			|
			|Попробуйте изменить период или указать другой банковский счет.'");
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения,
			ТекстПериода,
			Объект.БанковскийСчет,
			Объект.Организация);
		
		ПоказатьПредупреждение(, ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗагрузить(Команда)
	
	ОчиститьСообщения();
	Если ДокументыКИмпорту.Количество() > 0 Тогда
		ЗагрузитьДокументыКИмпортуНаКлиенте();
	Иначе
		ТекстШаблона = НСтр("ru = 'Список документов для загрузки пуст.
			|%1.'");
		Если ВозможностьВыбораФайлов Тогда
			Если ПустаяСтрока(Объект.ФайлЗагрузки) Тогда
				ОбъектПривязки = "Объект.ФайлЗагрузки";
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстШаблона, НСтр("ru = 'Не указан файл данных для загрузки в 1С:Бухгалтерию'"));
			ИначеЕсли СостояниеЗагрузки = 0 Тогда
				ОбъектПривязки = "ДокументыКИмпорту";
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстШаблона, НСтр("ru = 'Для отображения документов в списке используйте команду ""Обновить из файла""'"));
			Иначе
				ОбъектПривязки = "ДокументыКИмпорту";
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстШаблона, НСтр("ru = 'Возможно в файле обмена не содержится данных'"));
			КонецЕсли;
		ИначеЕсли НЕ ВозможностьВыбораФайлов Тогда
			ОбъектПривязки = "ДокументыКИмпорту";
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстШаблона, НСтр("ru = 'Для отображения документов в списке используйте команду ""Открыть и прочитать данные из файла""'"));
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, ОбъектПривязки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтправить(Команда)
	
	ОчиститьСообщения();
	Если Объект.ПлатежныеДокументы.Количество() > 0 Тогда
		
		МассивДокументов = Новый Массив;
		
		Для каждого Строка Из Объект.ПлатежныеДокументы Цикл
			Если Строка.Выгружать = Истина Тогда
				МассивДокументов.Добавить(Строка.Документ);
			КонецЕсли;
		КонецЦикла;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВБанкЗавершение", ЭтотОбъект);
		ЭлектронныеДокументыКлиентПереопределяемый.ВыполнитьПроверкуПроведенияДокументов(
			МассивДокументов, ОписаниеОповещения, ЭтотОбъект);
		
	Иначе
		
		Если Объект.НачПериода = Объект.КонПериода Тогда
			ТекстПериода = Формат(Объект.НачПериода, "ДФ=dd.MM.yyyy");
		Иначе
			ТекстПериода = НСтр("ru = 'период с %1 по %2'");
			ТекстПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПериода,
				Формат(Объект.НачПериода, "ДФ=dd.MM.yyyy"), 
				Формат(Объект.КонПериода, "ДФ=dd.MM.yyyy"));
		КонецЕсли;
		
		ТекстСообщения = НСтр("ru = 'Отсутствуют платежные поручения за %1
			|по счету %2
			|(%3).
			|
			|Попробуйте изменить период или указать другой банковский счет.'");
			
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения,
			ТекстПериода,
			Объект.БанковскийСчет,
			Объект.Организация);
			
		ПоказатьПредупреждение(, ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтчетПоВыгрузке(Команда)
	
	ПолеОтчета = Новый ТабличныйДокумент;
	ПолучитьОтчетОВыгрузке(ПолеОтчета);
	ПолеОтчета.ТолькоПросмотр = Истина;
	ПолеОтчета.Показать(НСтр("ru = 'Отчет о выгруженных платежных документах'"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьВыгруженныйФайл(Элемент)
	
	ОткрытьФайлДляПросмотра(
		Новый Структура("ТекстРедактирования, Имя", Объект.ФайлВыгрузки, "ФайлВыгрузки"),
			Объект.Кодировка, НСтр("ru = 'Файл выгрузки'"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьЗагружаемыйФайл(Элемент)
	
	ОткрытьФайлДляПросмотра(
		Новый Структура("ТекстРедактирования, Имя", Объект.ФайлЗагрузки, "ФайлЗагрузки"),
			Объект.Кодировка, НСтр("ru = 'Файл загрузки'"));
	
КонецПроцедуры

&НаКлиенте
Процедура НеинтерактивноеИзменениениеНастройки(ВызваноИзПриОткрытии = Ложь)
	
	Режим = Новый СписокЗначений;
	Режим.Добавить(КодВозвратаДиалога.Да,     НСтр("ru = 'Открыть настройки'"));
	Режим.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Настроить позже'"));
	
	ШаблонВопроса = НСтр("ru = 'Рекомендуется проверить настройки обмена с клиент-банком
		|по счету %1'");
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонВопроса, Объект.БанковскийСчет);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВопросВыполнитьНастройкуЗавершение", ЭтотОбъект, ВызваноИзПриОткрытии);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Режим,, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьНастройкуКлиентБанка()
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Поле", "Заполнение", "Организация");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.Организация");
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",                                    Объект.Организация);
	ПараметрыФормы.Вставить("БанковскийСчет",                                 Объект.БанковскийСчет);
	ПараметрыФормы.Вставить("Кодировка",                                      Объект.Кодировка);
	ПараметрыФормы.Вставить("ГруппаДляНовыхКонтрагентов",                     ГруппаДляНовыхКонтрагентов);
	ПараметрыФормы.Вставить("СтатьяДДССписаниеСРасчетногоСчета",              СтатьяДДССписаниеСРасчетногоСчета);
	ПараметрыФормы.Вставить("СтатьяДДСПоступлениеНаРасчетныйСчет",            СтатьяДДСПоступлениеНаРасчетныйСчет);
	ПараметрыФормы.Вставить("ПроводитьПриЗагрузкеСписаниеСРасчетногоСчета",   ПроводитьПриЗагрузкеСписаниеСРасчетногоСчета);
	ПараметрыФормы.Вставить("ПроводитьПриЗагрузкеПоступлениеНаРасчетныйСчет", ПроводитьПриЗагрузкеПоступлениеНаРасчетныйСчет);
	ПараметрыФормы.Вставить("ВозможностьВыбораФайлов",                        ВозможностьВыбораФайлов);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыполнитьНастройкуКлиентБанкаЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.КлиентБанк.Форма.ФормаНастройкиЗаполнения", ПараметрыФормы, ЭтотОбъект,,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНастройка(Команда)
	
	ВыполнитьНастройкуКлиентБанка();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтчетПоЗагрузке(Команда)
	
	ПолеОтчета = Новый ТабличныйДокумент;
	ПолучитьОтчетОЗагрузке(ПолеОтчета);
	ПолеОтчета.ТолькоПросмотр = Истина;
	ПолеОтчета.Показать(НСтр("ru = 'Отчет о загруженных документах'"));
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКонтрагентов(Команда)
	
	ПараметрыФормы = Новый Структура;
	АдресХранилищаКонтрагентов = ПолучитьАдресВременногоХранилищаТаблицыКонтрагентов();
	
	ПараметрыФормы.Вставить("АдресХранилищаКонтрагентов", АдресХранилищаКонтрагентов);
	ПараметрыФормы.Вставить("Организация",                Объект.Организация);
	ПараметрыФормы.Вставить("БанковскийСчет",             Объект.БанковскийСчет);
	ПараметрыФормы.Вставить("ГруппаДляНовыхКонтрагентов", ГруппаДляНовыхКонтрагентов);
	
	ОткрытьФорму("Обработка.КлиентБанк.Форма.ФормаКонтрагентов", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДокументыКИмпортуКонтекстноеМенюКнопкаИзменить(Команда)
	
	Если НЕ ЗначениеЗаполнено(ДокументыКИмпорту) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Истина;
	ДокументыКИмпортуВыбор(Элементы.ДокументыКИмпорту, Элементы.ДокументыКИмпорту.ТекущаяСтрока,
		Элементы.ДокументыКИмпорту.ТекущийЭлемент, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		Элементы.ДокументыКИмпорту.ИзменитьСтроку();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДокументыНаЭкспорт(Команда)
	
	ОбновитьСписокДокументовНаЭкспорт();
	
КонецПроцедуры

// Команда считывает данные из текстового файла.
//
&НаКлиенте
Процедура КомандаПрочитатьДанныеИзФайла(Команда)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница <> Элементы.ГруппаЗагрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПрочитатьДанныеИзФайла();
	
КонецПроцедуры

// Команда устанавливает флажки во всех строках таблицы.
//
&НаКлиенте
Процедура ДокументыКИмпортуОтметитьВсе(Команда)
	
	ДокументыКИмпортуУстановитьОтметку(Истина);
	
КонецПроцедуры

// Команда снимает флажки во всех строках таблицы.
//
&НаКлиенте
Процедура ДокументыКИмпортуСнятьОтметкуСоВсех(Команда)
	
	ДокументыКИмпортуУстановитьОтметку(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьФайл(Команда)
	
	ПрочитатьДанныеИзФайла();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОшибки(Команда)
	
	Элементы.ДокументыКИмпортуПоказатьОшибки.Пометка = НЕ Элементы.ДокументыКИмпортуПоказатьОшибки.Пометка;
	
	ПоказатьОшибкиИмпорта = Элементы.ДокументыКИмпортуПоказатьОшибки.Пометка;
	ПоказатьОшибкиНаСервере(ПоказатьОшибкиИмпорта);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьОшибкиНаСервере(Включить)
	
	Если НЕ Объект.СоздаватьНенайденныеЭлементы Тогда
		Возврат;
	КонецЕсли;
	
	Если Включить Тогда
		ОтборОшибок = Новый Структура("ЕстьОшибка", Истина);
		Элементы.ДокументыКИмпорту.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборОшибок);
	Иначе
		Элементы.ДокументыКИмпорту.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ПриИзмененииОрганизацияСервер();
	
	ОбновитьСпискиДокументов(Истина);
	УправлениеФормой();
	
	Если НЕ НастройкаВыполнена И ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		НеинтерактивноеИзменениениеНастройки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетПриИзменении(Элемент)
	
	ЗагрузитьНастройкиДляБанковскогоСчета();
	
	ОбновитьСпискиДокументов(Истина);
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыборФайлаДляВыгрузкиИЗагрузки(Элемент, НСтр("ru = 'выгрузки'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлВыгрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФайлДляПросмотра(Элемент, Объект.Кодировка, НСтр("ru = 'Файл выгрузки'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыборФайлаДляВыгрузкиИЗагрузки(Элемент, НСтр("ru = 'загрузки'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлЗагрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФайлДляПросмотра(Элемент, Объект.Кодировка, НСтр("ru = 'Файл загрузки'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлЗагрузкиОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ПустаяСтрока(Текст) Тогда
		Объект.ФайлЗагрузки = СокрЛП(Текст);
		ПрочитатьДанныеИзФайла();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗапроситьЭлектроннуюВыпискуБанка(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.СоглашениеПрямогоОбменаСБанками) ИЛИ НЕ БанковскийСчетЗаполнен() ИЛИ НЕ ПериодЗаполнен() Тогда
		Возврат;
	КонецЕсли;
	
	ЭлектронныеДокументыКлиент.ПолучитьВыпискуБанка(
		Объект.СоглашениеПрямогоОбменаСБанками, Объект.НачПериода, Объект.КонПериода, ЭтотОбъект, ПолучитьНомерСчета(Объект.БанковскийСчет));
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлектроннаяВыпискаБанкаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыпискиБанка.Количество() > 1 Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВыпискиБанка", ВыпискиБанка);
		ПараметрыФормы.Вставить("НачПериода", Объект.НачПериода);
		ПараметрыФормы.Вставить("КонПериода", Объект.КонПериода);
		ОткрытьФорму("Обработка.КлиентБанк.Форма.ФормаСпискаВыписок", ПараметрыФормы);
		
	ИначеЕсли ВыпискиБанка.Количество() = 1 Тогда
		
		ПараметрыФормы = Новый Структура("Ключ", ВыпискиБанка[0].Значение);
		ОткрытьФорму("Справочник.ЭДПрисоединенныеФайлы.Форма.ФормаПросмотраЭД", ПараметрыФормы);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВерсияФорматаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ <Платежные документы>

&НаКлиенте
Процедура ПлатежныеДокументыВыгружатьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПлатежныеДокументы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Знак = ?(ТекущиеДанные.Выгружать, 1, -1);
	
	КоличествоКВыгрузке     = КоличествоКВыгрузке     + 1 * Знак;
	СуммаДокументаКВыгрузке = СуммаДокументаКВыгрузке + ТекущиеДанные.СуммаДокумента * Знак;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежныеДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Поле.Имя = "ПлатежныеДокументыОписаниеОшибок" Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Ошибки в документе'"),
			ПолучитьНавигационнуюСсылку(Элемент.ТекущиеДанные.Документ),
			Элемент.ТекущиеДанные.ОписаниеОшибок);
	ИначеЕсли Поле.Имя = "ПлатежныеДокументыНазначениеПлатежа" Тогда
		СтандартнаяОбработка = Ложь;
		
		ПараметрыСообщения = Новый Структура;
		ПараметрыСообщения.Вставить("Заголовок", НСтр("ru = 'Назначение платежа'"));
		ПараметрыСообщения.Вставить("Сообщение", Элемент.ТекущиеДанные.НазначениеПлатежа);
		Если Элемент.ТекущиеДанные.Документ <> Неопределено Тогда
			ПараметрыСообщения.Вставить("ГиперссылкаТекст",
				ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Элемент.ТекущиеДанные.Документ));
			ПараметрыСообщения.Вставить("ГиперссылкаНавигация", ПолучитьНавигационнуюСсылку(Элемент.ТекущиеДанные.Документ));
		КонецЕсли;
		
		ОбщегоНазначенияБПКлиент.ПоказатьСообщениеВФорме(ПараметрыСообщения);
		
	Иначе
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Документ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежныеДокументыПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущийЭлемент.Имя <> "ПлатежныеДокументыВыгружать" И Элемент.Имя <> "ПлатежныеДокументы" Тогда
		Отказ = Истина;
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Документ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежныеДокументыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежныеДокументыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ <Документы к импорту>

// Событие вызывается при двойном щелчке мыши или нажатии Enter
//
&НаКлиенте
Процедура ДокументыКИмпортуВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаТаблицы = ДокументыКИмпорту.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если Поле.Имя = "ДокументыКИмпортуЗагружать" Тогда
		СтрокаТаблицы.Загружать = НЕ СтрокаТаблицы.Загружать;
	ИначеЕсли Поле.Имя = "ДокументыКИмпортуОписаниеОшибок" Тогда
		СтандартнаяОбработка = Ложь;
		Если Элемент.ТекущиеДанные.Документ = Неопределено Тогда
			СсылкаДляПерехода = Неопределено;
		Иначе
			СсылкаДляПерехода = ПолучитьНавигационнуюСсылку(СтрокаТаблицы.Документ);
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(НСтр("ru = 'Ошибки в документе'"), СсылкаДляПерехода, СтрокаТаблицы.ОписаниеОшибок);
	ИначеЕсли Поле.Имя = "ДокументыКИмпортуНазначениеПлатежа" Тогда
		СтандартнаяОбработка = Ложь;
		
		ПараметрыСообщения = Новый Структура;
		ПараметрыСообщения.Вставить("Заголовок", НСтр("ru = 'Назначение платежа'"));
		ПараметрыСообщения.Вставить("Сообщение", СтрокаТаблицы.НазначениеПлатежа);
		Если СтрокаТаблицы.Документ <> Неопределено Тогда
			ПараметрыСообщения.Вставить("ГиперссылкаТекст",
				ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(СтрокаТаблицы.Документ));
			ПараметрыСообщения.Вставить("ГиперссылкаНавигация", ПолучитьНавигационнуюСсылку(СтрокаТаблицы.Документ));
		КонецЕсли;
		
		ОбщегоНазначенияБПКлиент.ПоказатьСообщениеВФорме(ПараметрыСообщения);
		
	ИначеЕсли Поле.Имя = "ДокументыКИмпортуДокумент" Тогда
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(СтрокаТаблицы.Документ) Тогда
			
			Если СтрокаТаблицы.ВидДокумента = "ПоступлениеНаРасчетныйСчет" Тогда
				КлючеваяОперация = "ОткрытиеФормыПоступлениеНаРасчетныйСчет";
			ИначеЕсли СтрокаТаблицы.ВидДокумента = "СписаниеСРасчетногоСчета" Тогда
				КлючеваяОперация = "ОткрытиеФормыСписаниеСРасчетногоСчета";
			КонецЕсли;
			
			ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(КлючеваяОперация);
			
			ПоказатьЗначение(, СтрокаТаблицы.Документ);
		Иначе
			// не реагируем
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.Документ) Тогда
		Если Поле.Имя = "ДокументыКИмпортуНомерСтроки"
			ИЛИ Поле.Имя = "ДокументыКИмпортуДокумент"
			ИЛИ Поле.Имя = "ДокументыКИмпортуНомерДок"
			ИЛИ Поле.Имя = "ДокументыКИмпортуДатаПроведения"
			ИЛИ Поле.Имя = "ДокументыКИмпортуСуммаСписано"
			ИЛИ Поле.Имя = "ДокументыКИмпортуСуммаПоступило"
			ИЛИ Поле.Имя = "ДокументыКИмпортуВидОперации"
			ИЛИ Поле.Имя = "ДокументыКИмпортуДоговор" И СостояниеЗагрузки = 2
			Тогда
			
			Если СтрокаТаблицы.ВидДокумента = "ПоступлениеНаРасчетныйСчет" Тогда
				КлючеваяОперация = "ОткрытиеФормыПоступлениеНаРасчетныйСчет";
			ИначеЕсли СтрокаТаблицы.ВидДокумента = "СписаниеСРасчетногоСчета" Тогда
				КлючеваяОперация = "ОткрытиеФормыСписаниеСРасчетногоСчета";
			КонецЕсли;
			
			ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(КлючеваяОперация);
			
			СтандартнаяОбработка = Ложь;
			ПоказатьЗначение(, СтрокаТаблицы.Документ);
			
		КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуПриАктивизацииСтроки(Элемент)
	
	Если НЕ Объект.СоздаватьНенайденныеЭлементы Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ВывестиСтатусЗагрузки", 0.1, Истина);
	КонецЕсли;
	
	ВидОперацииТолькоПросмотр = Ложь;
	ТекущиеДанные = Элементы.ДокументыКИмпорту.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.ДокументОснование) Тогда
			ВидОперацииТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ДокументыКИмпортуВидОперации.ТолькоПросмотр = ВидОперацииТолькоПросмотр;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуКонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДокументыКИмпорту.ТекущиеДанные;
	
	Если УчетДенежныхСредствКлиентСервер.РасчетыСФизическимиЛицами(ТекущиеДанные.ВидОперации) Тогда
		Если ТекущиеДанные.Контрагент = Неопределено
			ИЛИ ТипЗнч(ТекущиеДанные.Контрагент) = Тип("Строка")
			И ТекущиеДанные.ВидКонтрагента = "Сотрудник" И ТипЗнч(ТекущиеДанные.Контрагент) <> Тип("СправочникСсылка.ФизическиеЛица") Тогда
			ТекущиеДанные.Контрагент = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
			СтандартнаяОбработка = Ложь;
			ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбора",, Элемент);
		КонецЕсли;
	Иначе
		Если ТекущиеДанные.Контрагент = Неопределено
			ИЛИ ТипЗнч(ТекущиеДанные.Контрагент) = Тип("Строка")
			И ТекущиеДанные.ВидКонтрагента = "Контрагент" И ТипЗнч(ТекущиеДанные.Контрагент) <> Тип("СправочникСсылка.Контрагенты") Тогда
			ТекущиеДанные.Контрагент = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
			СтандартнаяОбработка = Ложь;
			ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора",, Элемент);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуВидОперацииПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДокументыКИмпорту.ТекущиеДанные;
	
	Если ТекущиеДанные.Исходящий Тогда
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ДокументОснование) Тогда
			ВидКонтрагента = СоответствиеВидаКонтрагентаВидуОперации.НайтиПоЗначению(ТекущиеДанные.ВидОперации).Представление;
			Если ВидКонтрагента <> ТекущиеДанные.ВидКонтрагента Тогда
				ПеречитатьСтрокуТаблицыДокументыкИмпорту(ТекущиеДанные.ПолучитьИдентификатор(), ТекущиеДанные.ВидОперации, ВидКонтрагента);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СписокВидовДоговоров  = ЗаполнитьВидыДоговоров(ТекущиеДанные.ВидОперации);
	ДоговорКонтрагента    = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
	УстановитьДоговорКонтрагента(ДоговорКонтрагента, ТекущиеДанные.Контрагент, Объект.Организация, СписокВидовДоговоров);
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ТекущиеДанные.Договор = ДоговорКонтрагента;
	Иначе
		ТекущиеДанные.Договор = ?(Объект.СоздаватьНенайденныеЭлементы, НСтр("ru = 'Не создан'"), НСтр("ru = 'Не найден'"));
	КонецЕсли;
	
	Если СписокВидовДоговоров.Количество() > 0 И НастройкаЗаполнения.Количество() > 0 Тогда
		Если СписокВидовДоговоров[0] = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем") Тогда
			ТекущиеДанные.СтатьяДДС = НастройкаЗаполнения[0].СтатьяДДС; // Вид ДДС "СредстваПолученныеОтПокупателейИЗаказчиков"
		ИначеЕсли СписокВидовДоговоров[0] = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком") Тогда
			ТекущиеДанные.СтатьяДДС = НастройкаЗаполнения[1].СтатьяДДС; // Вид ДДС "ОплатаОборотныхАктивов"
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьСостояниеСтроки(
	ТекущиеДанные.ДоговорКонтрагентаНеНайден, ТекущиеДанные.Готовность, ТекущиеДанные.Договор,
	Объект.СоздаватьНенайденныеЭлементы, ТекущиеДанные.ВидОперации, ТекущиеДанные.ОписаниеОшибок,
	ТекущиеДанные.Контрагент, ТекущиеДанные.СчетКонтрагента);
	
КонецПроцедуры

&НаСервере
Процедура ПеречитатьСтрокуТаблицыДокументыкИмпорту(ИдентификаторСтроки, ВидОперации, ВидКонтрагента)
	
	СтрокаДокумента    =  ДокументыКИмпорту.НайтиПоИдентификатору(ИдентификаторСтроки);
	ДеревоКонтрагентов = РеквизитФормыВЗначение("ТаблицаКонтрагентов");
	
	СоздаватьНенайденныеЭлементы    = Объект.СоздаватьНенайденныеЭлементы;
	
	СтрокаДокумента.ВидОперации     = ВидОперации;
	СтрокаДокумента.ВидКонтрагента  = ВидКонтрагента;
	СтрокаДокумента.Контрагент      = Неопределено;
	СтрокаДокумента.СчетКонтрагента = Неопределено;
	СтрокаДокумента.Договор         = Неопределено;
	СтрокаДокумента.ОписаниеОшибок  = "";
	
	НайденныеКонтрагенты = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НомерСтроки",              СтрокаДокумента.НомерСтроки);
	Запрос.УстановитьПараметр("СписокСчетов",             СтрокаДокумента.СчетКонтрагентаДляПоиска);
	Запрос.УстановитьПараметр("СчетКонтрагентаДляПоиска", СтрокаДокумента.СчетКонтрагентаДляПоиска);
	Запрос.УстановитьПараметр("ПолучательИНН",            СтрокаДокумента.ПолучательИНН);
	Запрос.УстановитьПараметр("ПолучательКПП",            СтрокаДокумента.ПолучательКПП);
	Запрос.УстановитьПараметр("Получатель1",              СтрокаДокумента.Получатель1);
	Запрос.УстановитьПараметр("СписокИНН",                СтрокаДокумента.ПолучательИНН);
	Запрос.УстановитьПараметр("ИскатьФизическихЛиц",      СтрокаДокумента.ВидКонтрагента = "Сотрудник");
	Запрос.УстановитьПараметр("ИскатьКонтрагентов",       СтрокаДокумента.ВидКонтрагента = "Контрагент");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&НомерСтроки КАК НомерСтроки,
	|	ВЫРАЗИТЬ(&СчетКонтрагентаДляПоиска КАК СТРОКА(20)) КАК СчетКонтрагентаДляПоиска,
	|	ВЫРАЗИТЬ(&ПолучательИНН КАК СТРОКА(12)) КАК ИННКонтрагента,
	|	ВЫРАЗИТЬ(&ПолучательКПП КАК СТРОКА(9)) КАК КППКонтрагента,
	|	ВЫРАЗИТЬ(&Получатель1 КАК СТРОКА(100)) КАК ИмяКонтрагента
	|ПОМЕСТИТЬ ТаблицаКонтрагентов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИННКонтрагента,
	|	СчетКонтрагентаДляПоиска";
	
	Запрос.Выполнить();
	
	Запрос.Текст = Обработки.КлиентБанк.ТекстЗапросаПоискаКонтрагентов();
	
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КонтрагентыСгруппированныеПоПриоритетам.Контрагент КАК Контрагент,
	|	КонтрагентыСгруппированныеПоПриоритетам.ИНН КАК ИНН,
	|	КонтрагентыСгруппированныеПоПриоритетам.КПП КАК КПП,
	|	КонтрагентыСгруппированныеПоПриоритетам.Приоритет КАК Приоритет,
	|	КонтрагентыСгруппированныеПоПриоритетам.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	КонтрагентыСгруппированныеПоПриоритетам КАК КонтрагентыСгруппированныеПоПриоритетам
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтрагентыСгруппированныеПоПриоритетам.Контрагент КАК Контрагент,
	|	ВТ_Приоритет3.БанковскийСчет КАК БанковскийСчет,
	|	ВТ_Приоритет3.НомерСчета КАК НомерСчета,
	|	КонтрагентыСгруппированныеПоПриоритетам.Приоритет КАК Приоритет,
	|	КонтрагентыСгруппированныеПоПриоритетам.НомерСтроки КАК НомерСтроки,
	|	ВЫРАЗИТЬ(ВТ_Приоритет3.БанковскийСчет КАК Справочник.БанковскиеСчета).Владелец КАК Владелец
	|ИЗ
	|	КонтрагентыСгруппированныеПоПриоритетам КАК КонтрагентыСгруппированныеПоПриоритетам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Приоритет3 КАК ВТ_Приоритет3
	|		ПО КонтрагентыСгруппированныеПоПриоритетам.Контрагент = ВТ_Приоритет3.Контрагент
	|			И КонтрагентыСгруппированныеПоПриоритетам.НомерСтроки = ВТ_Приоритет3.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаКонтрагентов";
	
	Пакет = Запрос.ВыполнитьПакет();
	Выборка = Пакет[0].Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
		// учтем дубли с одинаковым приоритетом
		НайденоКонтрагентов = 0;
		ТекущийПриоритет    = 999;
		Пока Выборка.Следующий() Цикл
			Если ТекущийПриоритет < Выборка.Приоритет Тогда
				Прервать;
			КонецЕсли;
			
			ИННКонтрагента      = Выборка.ИНН;
			ТекущийПриоритет    = Выборка.Приоритет;
			НайденоКонтрагентов = НайденоКонтрагентов + 1;
			Если НайденоКонтрагентов = 1 Тогда
				СтрокаДокумента.Контрагент = Выборка.Контрагент;
				НайденныеКонтрагенты.Вставить(Выборка.НомерСтроки, Выборка.Контрагент);
			КонецЕсли;
		КонецЦикла;
		
		Если НайденоКонтрагентов > 1 И НЕ ПустаяСтрока(ИННКонтрагента) Тогда
			ДобавитьЗамечание(СтрокаДокумента, 2, "В инф.базе найдено несколько("
				+ НайденоКонтрагентов + ") контрагентов с одинаковым ИНН ("
				+ ИННКонтрагента + ").");
		КонецЕсли;
	КонецЦикла;
	
	//_______________________________________________________________________________________________________________
	// банковский счет контрагента
	Выборка = Пакет[1].Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
		// учтем дубли с одинаковым приоритетом
		НайденоРС = 0;
		ТекущийПриоритет = 999;
		Пока Выборка.Следующий() Цикл
			Владелец = НайденныеКонтрагенты.Получить(Выборка.НомерСтроки);
			Если Владелец = Неопределено
				ИЛИ Владелец <> Выборка.Владелец Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТекущийПриоритет < Выборка.Приоритет Тогда
				Прервать;
			КонецЕсли;
			
			НомерСчета       = Выборка.НомерСчета;
			ТекущийПриоритет = Выборка.Приоритет;
			НайденоРС        = НайденоРС + 1;
			Если НайденоРС = 1 Тогда
				СтрокаДокумента.СчетКонтрагента = Выборка.БанковскийСчет;
			КонецЕсли;
		КонецЦикла;
		
		Если НайденоРС > 1 Тогда
			ДобавитьЗамечание(СтрокаДокумента, 2, "В инф.базе найдено несколько("
				+ НайденоРС + ") одинаковых банковских счетов ("
				+ НомерСчета + ").");
		КонецЕсли;
	КонецЦикла;
	
	Если СтрокаДокумента.Контрагент = Неопределено Тогда
		ЕстьЗамечание   =  НЕ ПустаяСтрока(СтрокаДокумента.ОписаниеОшибок);
		СтрокаДокумента.Контрагент =
		?(ЕстьЗамечание ИЛИ НЕ СоздаватьНенайденныеЭлементы, "Не найден (", "Не загружен (") + СтрокаДокумента.Получатель1 + ")";
		Если ПустаяСтрока(СтрокаДокумента.Получатель1) И ПустаяСтрока(СтрокаДокумента.ПолучательИНН) Тогда
			СтрокаДокумента.Контрагент = "Не указаны реквизиты контрагента";
		КонецЕсли;
		
		Если ПустаяСтрока(СтрокаДокумента.СчетКонтрагентаДляПоиска) Тогда
			СтрокаДокумента.СчетКонтрагента = "Не указаны реквизиты р/с";
		Иначе
			СтрокаДокумента.СчетКонтрагента =
			?(ЕстьЗамечание ИЛИ НЕ СоздаватьНенайденныеЭлементы, "Не найден (", "Не загружен (") + СтрокаДокумента.СчетКонтрагентаДляПоиска + ")";
		КонецЕсли;
		
		Если НЕ Обработки.КлиентБанк.ЭтоВидОперацииБезДоговора(СтрокаДокумента.ВидОперации) Тогда
			СтрокаДокумента.Договор = ?(ЕстьЗамечание ИЛИ НЕ СоздаватьНенайденныеЭлементы,
			НСтр("ru = 'Не найден'"), НСтр("ru = 'Не создан'"));
			СтрокаДокумента.ДоговорКонтрагентаНеНайден = Истина;
		КонецЕсли;
		
		СписокНенайденных(СтрокаДокумента, ДеревоКонтрагентов);
		Если НЕ СоздаватьНенайденныеЭлементы Тогда
			Если ПустаяСтрока(СтрокаДокумента.Получатель1) И ПустаяСтрока(СтрокаДокумента.ПолучательИНН) Тогда
				ДобавитьЗамечание(СтрокаДокумента, 2, "Не указаны реквизиты контрагента.");
			Иначе
				ДобавитьЗамечание(СтрокаДокумента, 2, "Не найден контрагент (" + СтрокаДокумента.Получатель1  + ", ИНН " + СтрокаДокумента.ПолучательИНН + ").");
			КонецЕсли;
			
			ДобавитьЗамечание(СтрокаДокумента, 2, "Не найден счет контрагента (" + СтрокаДокумента.СчетКонтрагентаДляПоиска + ").");
			
			Если СтрокаДокумента.ДоговорКонтрагентаНеНайден Тогда
				ДобавитьЗамечание(СтрокаДокумента, 2, НСтр("ru = 'Не найден договор. '"));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаДокумента.СчетКонтрагента = Неопределено Тогда
		ЕстьЗамечание   =  НЕ ПустаяСтрока(СтрокаДокумента.ОписаниеОшибок);
		Если ПустаяСтрока(СтрокаДокумента.СчетКонтрагентаДляПоиска) Тогда
			СтрокаДокумента.СчетКонтрагента = "Не указаны реквизиты р/с";
		Иначе
			СтрокаДокумента.СчетКонтрагента =
			?(ЕстьЗамечание ИЛИ НЕ СоздаватьНенайденныеЭлементы, "Не найден (", "Не загружен (") + СтрокаДокумента.СчетКонтрагентаДляПоиска + ")";
		КонецЕсли;
		
		СписокНенайденных(СтрокаДокумента, ДеревоКонтрагентов);
		Если НЕ СоздаватьНенайденныеЭлементы Тогда
			Если ПустаяСтрока(СтрокаДокумента.СчетКонтрагентаДляПоиска) Тогда
				ДобавитьЗамечание(СтрокаДокумента, 2, "Не указаны реквизиты р/с).");
			Иначе
				ДобавитьЗамечание(СтрокаДокумента, 2, "Не найден счет контрагента (" + СтрокаДокумента.СчетКонтрагентаДляПоиска + ").");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ДеревоКонтрагентов, "ТаблицаКонтрагентов");
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьЗамечание(СтрокаДокумента, НоваяГотовность, ТекстЗамечания)
	
	Обработки.КлиентБанк.ДобавитьЗамечание(СтрокаДокумента, НоваяГотовность, ТекстЗамечания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокНеНайденных(СтрокаДокумента, ДеревоКонтрагентов)
	
	Обработки.КлиентБанк.СписокНеНайденных(СтрокаДокумента, ДеревоКонтрагентов);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДокументыКИмпорту.ТекущиеДанные;
	
	Если ТекущиеДанные.Договор = Неопределено ИЛИ ТипЗнч(ТекущиеДанные.Договор) = Тип("Строка") Тогда
		ТекущиеДанные.Договор = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ВидДоговораВзаиморасчетов = ЗаполнитьВидыДоговоров(ТекущиеДанные.ВидОперации);
	Если ВидДоговораВзаиморасчетов.Количество() = 0 Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор",
		Новый Структура("Владелец, Организация, ВидДоговора, ОплатаВВалюте",
			ТекущиеДанные.Контрагент, Объект.Организация, Новый ФиксированныйМассив(ВидДоговораВзаиморасчетов), Ложь));
	
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуСчетКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДокументыКИмпорту.ТекущиеДанные;
	
	Если ТекущиеДанные.СчетКонтрагента = Неопределено ИЛИ ТипЗнч(ТекущиеДанные.СчетКонтрагента) = Тип("Строка")
		И НЕ (ТекущиеДанные.Контрагент = Неопределено ИЛИ ТипЗнч(ТекущиеДанные.Контрагент) = Тип("Строка")) Тогда
		ТекущиеДанные.СчетКонтрагента = ПредопределенноеЗначение("Справочник.БанковскиеСчета.ПустаяСсылка");
	Иначе
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор",
		Новый Структура("Владелец, Организация",
			ТекущиеДанные.Контрагент, Объект.Организация));
	
	СтруктураДополнительныхПараметров = Новый Структура;
	СтруктураДополнительныхПараметров.Вставить("ВалютаДенежныхСредств",
		Новый Структура("ЗначениеОтбора", ВалютаРегламентированногоУчета));
	СтруктураДополнительныхПараметров.Вставить("Валютный",       Новый Структура("ЗначениеОтбора", Ложь));
	ПараметрыФормы.Вставить("СтруктураДополнительныхПараметров", СтруктураДополнительныхПараметров);
	
	ОткрытьФорму("Справочник.БанковскиеСчета.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуКонтрагентПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДокументыКИмпорту.ТекущиеДанные;
	
	ВходящиеПараметры = Новый Структура;
	ВходящиеПараметры.Вставить("Организация",                    Объект.Организация);
	ВходящиеПараметры.Вставить("ВидОперации",                    ТекущиеДанные.ВидОперации);
	ВходящиеПараметры.Вставить("СчетКонтрагента",                ТекущиеДанные.СчетКонтрагента);
	ВходящиеПараметры.Вставить("Контрагент",                     ТекущиеДанные.Контрагент);
	ВходящиеПараметры.Вставить("Договор",                        ТекущиеДанные.Договор);
	ВходящиеПараметры.Вставить("Готовность",                     ТекущиеДанные.Готовность);
	ВходящиеПараметры.Вставить("ВидОперации",                    ТекущиеДанные.ВидОперации);
	ВходящиеПараметры.Вставить("ОписаниеОшибок",                 ТекущиеДанные.ОписаниеОшибок);
	ВходящиеПараметры.Вставить("ДоговорКонтрагентаНеНайден",     ТекущиеДанные.ДоговорКонтрагентаНеНайден);
	ВходящиеПараметры.Вставить("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	
	ИсходящиеПараметры = ДокументыКИмпортуКонтрагентПриИзмененииСервер(ВходящиеПараметры, Объект.СоздаватьНенайденныеЭлементы);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ИсходящиеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуСчетКонтрагентаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДокументыКИмпорту.ТекущиеДанные;
	
	ВходящиеПараметры = Новый Структура;
	ВходящиеПараметры.Вставить("Организация",                    Объект.Организация);
	ВходящиеПараметры.Вставить("ВидОперации",                    ТекущиеДанные.ВидОперации);
	ВходящиеПараметры.Вставить("СчетКонтрагента",                ТекущиеДанные.СчетКонтрагента);
	ВходящиеПараметры.Вставить("Контрагент",                     ТекущиеДанные.Контрагент);
	ВходящиеПараметры.Вставить("Договор",                        ТекущиеДанные.Договор);
	ВходящиеПараметры.Вставить("Готовность",                     ТекущиеДанные.Готовность);
	ВходящиеПараметры.Вставить("ВидОперации",                    ТекущиеДанные.ВидОперации);
	ВходящиеПараметры.Вставить("ОписаниеОшибок",                 ТекущиеДанные.ОписаниеОшибок);
	ВходящиеПараметры.Вставить("ДоговорКонтрагентаНеНайден",     ТекущиеДанные.ДоговорКонтрагентаНеНайден);
	ВходящиеПараметры.Вставить("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	
	ИсходящиеПараметры = ДокументыКИмпортуСчетКонтрагентаПриИзмененииСервер(ВходящиеПараметры, Объект.СоздаватьНенайденныеЭлементы);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ИсходящиеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуКонтрагентОчистка(Элемент, СтандартнаяОбработка)
	
	ТекДанные = Элементы.ДокументыКИмпорту.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекДанные.Контрагент) <> Тип("Строка") Тогда
		ИмяКонтрагента = ?(ПустаяСтрока(ТекДанные.Получатель1), ТекДанные.Получатель, ТекДанные.Получатель1);
		ТекДанные.Контрагент = Неопределено;
		ТекущееЗначениеЯчейкиРедактированияДоИзменения = "Не загружен (" + СокрЛП(ИмяКонтрагента) + ")";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуЗагружатьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДокументыКИмпорту.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Знак = ?(ТекущиеДанные.Загружать, 1, -1);
	
	КоличествоКЗагрузке     = КоличествоКЗагрузке     + 1 * Знак;
	СуммаПоступилоКЗагрузке = СуммаПоступилоКЗагрузке + ТекущиеДанные.СуммаПоступило * Знак;
	СуммаСписаноКЗагрузке   = СуммаСписаноКЗагрузке   + ТекущиеДанные.СуммаСписано   * Знак;
	
	УстановитьДоступностьКнопкиЗагрузить(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущееЗначениеЯчейкиРедактирования = ТекДанные[СтрЗаменить(Элемент.ТекущийЭлемент.Имя, Элемент.Имя, "")];
	
	Если ТипЗнч(ТекущееЗначениеЯчейкиРедактирования) <> Тип("Строка") И НЕ ЗначениеЗаполнено(ТекущееЗначениеЯчейкиРедактирования)
		И ЗначениеЗаполнено(ТекущееЗначениеЯчейкиРедактированияДоИзменения) Тогда
		ТекДанные[СтрЗаменить(Элемент.ТекущийЭлемент.Имя, Элемент.Имя, "")] = ТекущееЗначениеЯчейкиРедактированияДоИзменения;
		ТекущееЗначениеЯчейкиРедактированияДоИзменения = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуПередНачаломИзменения(Элемент, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущееЗначениеЯчейкиРедактированияДоИзменения = ТекДанные[СтрЗаменить(Элемент.ТекущийЭлемент.Имя, Элемент.Имя, "")];
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.ГруппаВыгрузка Тогда
		ОбновитьСписокДокументовНаЭкспорт();
	КонецЕсли;
	
	ОткрытаСтраницаВыгрузки = Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаВыгрузка;
	УстановитьКнопкуПоУмолчанию(ОткрытаСтраницаВыгрузки, ЗначениеЗаполнено(Объект.СоглашениеПрямогоОбменаСБанками));

	ОбновитьУсловноеОформление(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Параметр = ЭтотОбъект Тогда
		ОбновитьСписокДокументовНаЭкспорт();
	ИначеЕсли ИмяСобытия = "СозданиеНеНайденного" Тогда
		ДополнительныеПараметры = Новый Структура("ОбновитьТаблицуКонтрагентов", НЕ ПустаяСтрока(АдресХранилищаКонтрагентов));
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьЗаполнениеДокументыКИмпорту", ЭтотОбъект, ДополнительныеПараметры);
		ПрочитатьДанныеИзФайла(ОписаниеОповещения,, Ложь);
	ИначеЕсли ИмяСобытия = "ВыбранФайлЗагрузки" Тогда
		Если НЕ ПустаяСтрока(Объект.ФайлЗагрузки) Тогда
			ПрочитатьДанныеИзФайла();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		ОбновитьСписокДокументовНаЭкспорт(Ложь);
	ИначеЕсли ИмяСобытия = "ИзменениеВыписки" И Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаЗагрузка Тогда
		Если СостояниеЗагрузки <> 3 Тогда
			ОчиститьСообщения();
			ПодключитьОбработчикОжидания("Подключаемый_ОпределитьСсылочныеДанные", 0.1, Истина);
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ИзмененБанковскийСчет" И Параметр.Владелец = Объект.Организация Тогда
		УстановитьВидимостьБанковскогоСчета();
		Если НЕ ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
			ПриИзмененииОрганизацияСервер();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ВыпискиБанка.Очистить();
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы")
		И ЗначениеЗаполнено(Объект.СоглашениеПрямогоОбменаСБанками) Тогда
		
		ВыпискиБанка.Добавить(ВыбранноеЗначение);
		ПрочитатьДанныеИзФайла();
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Массив") И ВыбранноеЗначение.Количество() > 0 Тогда
		
		ВыпискиБанка.ЗагрузитьЗначения(ВыбранноеЗначение);
					
	КонецЕсли;
	Если ВыпискиБанка.Количество() > 0 Тогда
				
		ПрочитатьДанныеИзФайла();
		ЭлектроннаяВыпискаБанка = ТекстСсылкиНаЭлектронныеВыписки(Объект.НачПериода, Объект.КонПериода);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьЗначенияСвойств(Объект, Параметры);
	
	Если НЕ (Параметры.Свойство("НачПериода") И Параметры.Свойство("КонПериода")) Тогда
		Объект.НачПериода = ОбщегоНазначенияБП.ПолучитьРабочуюДату();
		Объект.КонПериода = ОбщегоНазначенияБП.ПолучитьРабочуюДату();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		Объект.БанковскийСчет = БухгалтерскийУчетПереопределяемый.ПолучитьБанковскийСчетПоУмолчанию(Объект.Организация);
	КонецЕсли;
	
	Если Параметры.Свойство("РежимПоУмолчанию") Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы[Параметры.РежимПоУмолчанию];
	КонецЕсли;
	
	Для каждого ЗначениеПеречисления Из Перечисления.ВидыОперацийСписаниеДенежныхСредств Цикл
		СоответствиеВидаКонтрагентаВидуОперации.Добавить(
			ЗначениеПеречисления,
			Обработки.КлиентБанк.ВидКонтрагентаПоВидуОперации(ЗначениеПеречисления));
	КонецЦикла;
	
	ЗаполнитьВидыДокументов(ТаблицаДокументов);
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ИспользоватьСтатьиДДС          = ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиДвиженияДенежныхСредств");
	
	ЗагрузитьНастройкиДляБанковскогоСчета();	
	
	ВыпискиБанка.Очистить();
	Если Параметры.Свойство("ЭлектроннаяВыпискаБанка") Тогда	
		ВыпискиБанка.Добавить(Параметры.ЭлектроннаяВыпискаБанка);
		ЭлектроннаяВыпискаБанка = ТекстСсылкиНаЭлектронныеВыписки(Объект.НачПериода, Объект.КонПериода);
	КонецЕсли;
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаВыгрузка Тогда
		ДокументыНаЭкспортОбновитьСервер(Объект.ВыгружатьПлатежноеПоручение, Объект.ВыгружатьПлатежноеТребование);
	КонецЕсли;
	
	УправлениеФормойНаСервере();
	
	УстановитьУсловноеОформление();
	
	ОрганизацияЗаголовок = НСтр("ru = 'Организация:'");
	
	// Заполнение группы информационных ссылок
	ИнформационныйЦентрСервер.ВывестиКонтекстныеСсылки(ЭтотОбъект, Элементы.ИнформационныеСсылки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	КлючеваяОперацияОбновлениеФормы = "ОбновлениеФормыПриВыбореВыписокДляЗагрузкеИзКлиентБанка";
	КлючеваяОперацияЧтениеФайла     = "ВремяЧтенияФайлаПриВыбореВыписокДляЧтенияИзКлиентБанка";
	ВремяНачалаОперации = Неопределено;
	
	Если ПустаяСтрока(ВерсияФормата) Тогда
		ВерсияФормата = "1.02";
	КонецЕсли;
	
	Если НастройкаЗаполнения.Количество() = 0 Тогда
		НастройкаЗаполненияСтрока = НастройкаЗаполнения.Добавить();
		НастройкаЗаполненияСтрока.Документ = "Поступление на расчетный счет";
		НастройкаЗаполненияСтрока = НастройкаЗаполнения.Добавить();
		НастройкаЗаполненияСтрока.Документ = "Списание с расчетного счета";
	Иначе
		Для каждого НастройкаЗаполненияСтрока Из НастройкаЗаполнения Цикл
			Если НастройкаЗаполненияСтрока.Документ = "Поступление на расчетный счет" Тогда
				ПроводитьПриЗагрузкеПоступлениеНаРасчетныйСчет = НастройкаЗаполненияСтрока.Проводить;
				СтатьяДДСПоступлениеНаРасчетныйСчет            = НастройкаЗаполненияСтрока.СтатьяДДС;
			ИначеЕсли НастройкаЗаполненияСтрока.Документ = "Списание с расчетного счета" Тогда
				ПроводитьПриЗагрузкеСписаниеСРасчетногоСчета   = НастройкаЗаполненияСтрока.Проводить;
				СтатьяДДССписаниеСРасчетногоСчета              = НастройкаЗаполненияСтрока.СтатьяДДС;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ПодключитьРасширениеРаботыСФайлами", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаКлиентБанкаПриОткрытии()
	
	Если ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		Если НастройкаВыполнена Тогда
			Если ВозможностьВыбораФайлов И Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаЗагрузка Тогда
				ПодключитьОбработчикОжидания("Подключаемый_ПрочитатьДанныеИзФайла", 0.1, Истина);
			КонецЕсли;
		Иначе
			ПодключитьОбработчикОжидания("Подключаемый_СпроситьПроНастройкуКлиентБанка", 0.1, Истина);
		КонецЕсли;
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПОДКЛЮЧАЕМЫЕ ОБРАБОТЧИКИ

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ЗафиксироватьДлительностьКлючевойОперации("Чтение");
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			ОповеститьОЗагрузкеДанныхНаКлиенте(ЗагрузитьПодготовленныеДанные(СостояниеЗагрузки < 2),
				?(СостояниеЗагрузки < 2, "Чтение", "Загрузка"));
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал,
				Истина);
		КонецЕсли;
	Исключение
		ВремяНачалаОперации = Неопределено;
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВывестиСтатусЗагрузки()
	
	ТекущиеДанные = Элементы.ДокументыКИмпорту.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		СтатуснаяСтрокаПриЗагрузкеТекст = СокрЛП(ТекущиеДанные.ОписаниеОшибок);
		
		Элементы.СтатуснаяСтрокаПриЗагрузке.Подсказка = СтатуснаяСтрокаПриЗагрузкеТекст;
		СтатуснаяСтрокаПриЗагрузке = ?(СтатуснаяСтрокаПриЗагрузкеТекст = "",
			СтатуснаяСтрокаПриЗагрузкеТекст,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Предупреждение: %1'"), СтатуснаяСтрокаПриЗагрузкеТекст));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПрочитатьДанныеИзФайла()
	
	ПрочитатьДанныеИзФайла(, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОпределитьСсылочныеДанные()
	
	// запомним текущую строку, чтобы после обновления (перезаполнения) данных в таблице,
	// вернуться ней
	Если Элементы.ДокументыКИмпорту.ТекущаяСтрока <> Неопределено Тогда
		ДокументыКИмпорту_ТекущаяСтрока =
			ДокументыКИмпорту.Индекс(ДокументыКИмпорту.НайтиПоИдентификатору(Элементы.ДокументыКИмпорту.ТекущаяСтрока));
	КонецЕсли;
	
	ПрочитатьДанныеИзФайла(, Ложь, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПодключитьРасширениеРаботыСФайлами() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьРасширениеРаботыСФайламиЗавершение", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СпроситьПроНастройкуКлиентБанка()
	
	НеинтерактивноеИзменениениеНастройки(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеНаИнформационнуюСсылку(Элемент)
	
	ИнформационныйЦентрКлиент.НажатиеНаИнформационнуюСсылку(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеНаСсылкуВсеИнформационныеСсылки(Элемент)
	
	ИнформационныйЦентрКлиент.НажатиеНаСсылкуВсеИнформационныеСсылки(ЭтотОбъект.ИмяФормы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ЗАВЕРШЕНИЕ НЕМОДАЛЬНЫХ ВЫЗОВОВ

&НаКлиенте
Процедура ПодключитьРасширениеРаботыСФайламиЗавершение(РасширениеРаботыСФайламиПодключено, ДополнительныеПараметры) Экспорт
	
	ВозможностьВыбораФайлов = РасширениеРаботыСФайламиПодключено;
	УстановитьВидимостьЭлементовВыбораФайлов();
	
	Если ПрямойОбменСБанками Тогда
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаЗагрузка Тогда
			ПодключитьОбработчикОжидания("Подключаемый_ПрочитатьДанныеИзФайла", 0.1, Истина);
		КонецЕсли;
	Иначе
		НастройкаКлиентБанкаПриОткрытии();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьНастройкуКлиентБанкаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		
		ГруппаДляНовыхКонтрагентов                     = РезультатЗакрытия.ГруппаДляНовыхКонтрагентов;
		СтатьяДДССписаниеСРасчетногоСчета              = РезультатЗакрытия.СтатьяДДССписаниеСРасчетногоСчета;
		СтатьяДДСПоступлениеНаРасчетныйСчет            = РезультатЗакрытия.СтатьяДДСПоступлениеНаРасчетныйСчет;
		ПроводитьПриЗагрузкеСписаниеСРасчетногоСчета   = РезультатЗакрытия.ПроводитьПриЗагрузкеСписаниеСРасчетногоСчета;
		ПроводитьПриЗагрузкеПоступлениеНаРасчетныйСчет = РезультатЗакрытия.ПроводитьПриЗагрузкеПоступлениеНаРасчетныйСчет;
		
		НайденнаяСтрока = НастройкаЗаполнения.НайтиСтроки(Новый Структура("Документ", "Поступление на расчетный счет"));
		НайденнаяСтрока[0].Проводить = ПроводитьПриЗагрузкеПоступлениеНаРасчетныйСчет;
		НайденнаяСтрока[0].СтатьяДДС = СтатьяДДСПоступлениеНаРасчетныйСчет;
		
		НайденнаяСтрока = НастройкаЗаполнения.НайтиСтроки(Новый Структура("Документ", "Списание с расчетного счета"));
		НайденнаяСтрока[0].Проводить = ПроводитьПриЗагрузкеСписаниеСРасчетногоСчета;
		НайденнаяСтрока[0].СтатьяДДС = СтатьяДДССписаниеСРасчетногоСчета;
		
		НастройкаВыполнена            = Истина;
		ТребуетсяПовторноеЧтениеФайла = РезультатЗакрытия.КритическоеИзменение
			ИЛИ РезультатЗакрытия.ФайлЗагрузки <> Объект.ФайлЗагрузки;
		
		ЗаполнитьЗначенияСвойств(Объект, РезультатЗакрытия);
		
		ОбновитьСпискиДокументов(Истина, ТребуетсяПовторноеЧтениеФайла);
		УправлениеФормой();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросВыполнитьНастройкуЗавершение(Ответ, ВызваноИзПриОткрытии) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьНастройкуКлиентБанка();
	
	Если ВызваноИзПриОткрытии
		И ВозможностьВыбораФайлов
		И Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаЗагрузка
		И НастройкаВыполнена
		И НЕ ПустаяСтрока(Объект.ФайлЗагрузки) Тогда
		
		ПрочитатьДанныеИзФайла(, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПомещениеФайлаЗавершение(Результат, АдресФайлаПомещенный, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	АдресФайла = АдресФайлаПомещенный;
	
	Если АдресФайла = Неопределено Тогда
		Если НЕ ВозможностьВыбораФайлов И ЗначениеЗаполнено(ДополнительныеПараметры.АдресФайлаСтарый) Тогда
			АдресФайла = ДополнительныеПараметры.АдресФайлаСтарый;
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	// Передаем на сервер
	ПрочитатьФайл(ДополнительныеПараметры.ВыводитьСообщения, ДополнительныеПараметры.ТребуетсяПовторноеЧтениеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВБанкЗавершение(МассивДокументов, ДополнительныеПараметры) Экспорт
	
	ЭлектронныеДокументыКлиент.СформироватьПодписатьОтправитьЭД(МассивДокументов);
	ЭкспортПроизведен = Истина;
	
КонецПроцедуры

#Область ЗагрузитьФайлНаКлиенте

&НаКлиенте
Процедура ЗагрузитьФайлНаКлиенте(ОповещениеПослеВыполнения, ИмяФайла, ВыводитьСообщения)
	
	ДополнительныеПараметры = Новый Структура("ИмяФайла, ВыводитьСообщения, ОповещениеПослеВыполнения",
		ИмяФайла, ВыводитьСообщения, ОповещениеПослеВыполнения);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьФайлНаКлиентеСозданиеФайла", ЭтотОбъект, ДополнительныеПараметры);
	
	Файл = Новый Файл();
	Файл.НачатьИнициализацию(ОписаниеОповещения, ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлНаКлиентеСозданиеФайла(Файл, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Вставить("Файл", Файл);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьФайлНаКлиентеПроверкаСуществования",
		ЭтотОбъект, ДополнительныеПараметры);
	Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлНаКлиентеПроверкаСуществования(Существует, ДополнительныеПараметры) Экспорт
	
	Если НЕ Существует Тогда
		
		ТекстСообщения = НСтр("ru = 'Файл данных для загрузки в 1С:Бухгалтерию не обнаружен'");
		Если ДополнительныеПараметры.ВыводитьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения
				,, "Объект.ФайлЗагрузки");
		Иначе
			ПоказатьПредупреждение(, ТекстСообщения);
		КонецЕсли;
		
		Если ДополнительныеПараметры.ОповещениеПослеВыполнения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеВыполнения);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Файл = ДополнительныеПараметры.Файл;
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьФайлНаКлиентеПроверкаНаКаталог", ЭтотОбъект, ДополнительныеПараметры);
	Файл.НачатьПроверкуЭтоКаталог(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлНаКлиентеПроверкаНаКаталог(ЭтоКаталог, ДополнительныеПараметры) Экспорт
	
	Если ЭтоКаталог Тогда
		ТекстСообщения = НСтр("ru = 'Файл данных для загрузки в 1С:Бухгалтерию не корректен - выбран ""каталог"".
				|Выберите файл загрузки'");
		Если ДополнительныеПараметры.ВыводитьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения
				,, "Объект.ФайлЗагрузки");
		Иначе
			ПоказатьПредупреждение(, ТекстСообщения);
		КонецЕсли;
		
		Если ДополнительныеПараметры.ОповещениеПослеВыполнения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеВыполнения);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	ПомещаемыеФайлы = Новый Массив;
	ПомещаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(Объект.ФайлЗагрузки));
	
	ПомещениеФайловЗавершение = Новый ОписаниеОповещения("ЗагрузитьФайлНаКлиентеЗавешениеПомещения",
		ЭтотОбъект, ДополнительныеПараметры);
	НачатьПомещениеФайлов(ПомещениеФайловЗавершение, ПомещаемыеФайлы,, Ложь, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлНаКлиентеЗавешениеПомещения(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПомещенныеФайлы <> Неопределено И ПомещенныеФайлы.Количество() > 0 Тогда
		ОписаниеФайлов = ПомещенныеФайлы.Получить(0);
		АдресФайла     = ОписаниеФайлов.Хранение;
		
		Если АдресФайла = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТребуетсяПовторноеЧтениеФайла = Истина;
		ПрочитатьФайл(ДополнительныеПараметры.ВыводитьСообщения, ТребуетсяПовторноеЧтениеФайла);
	КонецЕсли;
	
	Если ДополнительныеПараметры.ОповещениеПослеВыполнения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеВыполнения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОткрытьФайлДляПросмотра

&НаКлиенте
Процедура ОткрытьФайлДляПросмотраСозданиеФайла(Файл, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Вставить("Файл", Файл);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФайлДляПросмотраПроверкаСуществования", ЭтотОбъект, ДополнительныеПараметры);
	Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлДляПросмотраПроверкаСуществования(Существует, ДополнительныеПараметры) Экспорт
	
	Если НЕ Существует Тогда
		
		ТекстСоощения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 не обнаружен'"), ДополнительныеПараметры.Заголовок);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСоощения
			,, ДополнительныеПараметры.ЭлементПривязки);
		
		Возврат;
		
	КонецЕсли;
	
	Файл = ДополнительныеПараметры.Файл;
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФайлДляПросмотраПроверкаНаКаталог", ЭтотОбъект, ДополнительныеПараметры);
	Файл.НачатьПроверкуЭтоКаталог(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлДляПросмотраПроверкаНаКаталог(ЭтоКаталог, ДополнительныеПараметры) Экспорт
	
	Если ЭтоКаталог Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 не корректен - выбран ""каталог"".
			|Выберите %1'"), ДополнительныеПараметры.Заголовок);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения
			,, ДополнительныеПараметры.ЭлементПривязки);
		
		Возврат;
		
	КонецЕсли;
	
	ПомещаемыеФайлы = Новый Массив;
	ПомещаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ДополнительныеПараметры.ИмяФайла));
	
	ПомещениеФайловЗавершение = Новый ОписаниеОповещения("ОткрытьФайлДляПросмотраЗавешениеПомещения", ЭтотОбъект, ДополнительныеПараметры);
	НачатьПомещениеФайлов(ПомещениеФайловЗавершение, ПомещаемыеФайлы,, Ложь, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлДляПросмотраЗавешениеПомещения(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПомещенныеФайлы <> Неопределено И ПомещенныеФайлы.Количество() > 0 Тогда
		ОписаниеФайлов = ПомещенныеФайлы.Получить(0);
		АдресФайла     = ОписаниеФайлов.Хранение;
		
		Если АдресФайла = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Текст = ТекстовыйДокументИзВременногоХранилищаФайла(АдресФайла, ДополнительныеПараметры.Кодировка);
		Текст.Показать(ДополнительныеПараметры.Заголовок, ДополнительныеПараметры.ИмяФайла);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТекстовыйДокументИзВременногоХранилищаФайла(АдресФайла, Кодировка)
	
	ИмяВременногоФайла  = ПолучитьИмяВременногоФайла("txt");
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресФайла);
	ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);
	Текст = Новый ТекстовыйДокумент();
	Если Кодировка = "DOS" Тогда
		Кодир = "cp866";
	Иначе
		Кодир = "windows-1251";
	КонецЕсли;
	
	Текст.Прочитать(ИмяВременногоФайла, Кодир);
	
	Возврат Текст;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПрочитатьМассивВыписок(ВыпискиБанка, СсылкаНаХранилище)
	
	МассивСчетов = Новый Массив;
	МассивВыписок = ВыпискиБанка.ВыгрузитьЗначения();
	ЭлектронныеДокументы.ПолучитьДанныеВыпискиБанкаТекстовыйФормат(МассивВыписок, СсылкаНаХранилище, МассивСчетов);	

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекстСсылкиНаЭлектронныеВыписки(НачПериода, КонПериода)

	ШаблонСтроки = НСтр("ru = 'Выписка банка за период с %1 по %2'");
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, 
		Формат(НачПериода, "ДФ=dd.MM.yyyy"), Формат(КонПериода, "ДФ=dd.MM.yyyy")); 		

КонецФункции // СсылкаНаЭлектронныеВыписки()

#КонецОбласти
