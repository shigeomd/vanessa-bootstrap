#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// Обработчики загрузки конвертации УправлениеНебольшойФирмой --> БухгалтерияПредприятия {ad8529d6-389b-11e2-a44e-00055d4ef1e7}                                                                      
// 
// Данный модуль содержит экспортные процедуры обработчиков событий конвертации 
// и предназначен для отладки правил обмена. После отладки рекомендуется
// скопировать текст модуля в буфер обмена и импортировать его в базу
// "Конвертация данных".
//
////////////////////////////////////////////////////////////////////////////////
// ИСПОЛЬЗУЕМЫЕ СОКРАЩЕНИЯ ИМЕН ПЕРЕМЕННЫХ (АББРЕВИАТУРЫ)
//
//  ПКО  - правило конвертации объектов
//  ПКС  - правило конвертации свойств объектов
//  ПКГС - правило конвертации группы свойств объектов
//  ПВД  - правило выгрузки данных
//  ПОД  - правило очистки данных

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ ОБРАБОТКИ
// Данный раздел изменять запрещено.

Перем Параметры;
Перем Алгоритмы;
Перем Запросы;
Перем УзелДляОбмена;
Перем ОбщиеПроцедурыФункции;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОНВЕРТАЦИИ (ГЛОБАЛЬНЫЕ)
// В данном разделе разрешено изменять реализацию процедур.

Процедура Конвертация_ПередЗагрузкойДанных(ФайлОбмена, Отказ) Экспорт

	Параметры.Вставить("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	Параметры.Вставить("ВедетсяПроизводственнаяДеятельность", Константы.ВедетсяПроизводственнаяДеятельность.Получить());
	Параметры.Вставить("ТипЦенПлановойСебестоимости", Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить());
	Параметры.Вставить("ОсновнаяОрганизация", БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация"));
	
	ЗагруженныеОрганизации = Новый Массив();
	Параметры.Вставить("ЗагруженныеОрганизации", ЗагруженныеОрганизации);
	
	ТаблицаЗагруженныхОбъектов = Новый ТаблицаЗначений();
	ТаблицаЗагруженныхОбъектов.Колонки.Добавить("ЗагружаемыйОбъект");
	ТаблицаЗагруженныхОбъектов.Колонки.Добавить("Ссылка");
	ТаблицаЗагруженныхОбъектов.Колонки.Добавить("ПараметрыОбъекта");
	
	Параметры.Вставить("ТаблицаЗагруженныхОбъектов", ТаблицаЗагруженныхОбъектов);

КонецПроцедуры

Процедура Конвертация_ПослеЗагрузкиДанных() Экспорт

	
	МассивОрганизаций = Параметры.ЗагруженныеОрганизации;
	СоздатьУчетнуюПолитикуПоУмолчаниюДляОрганизаций (МассивОрганизаций);
	
	ПроверитьЗначениеОпцииИспНесколькихОрганизаций ();
	
	ПроверитьЗначениеОпцииИспНесколькихСкладов ();
	
	ПроверитьЗначениеОпцииИспользоватьВалютныйУчет ();
	
	ПроверитьЗначениеОпцииИспКомиссииНаПродажу ();
	
	ПроверитьЗначениеОпцииИспИмпортныхТоваров ();
	
	Для Каждого СтрокаТаблицы Из Параметры.ТаблицаЗагруженныхОбъектов Цикл
		
		Попытка
			Отбор = Новый Структура("СтруктурнаяЕдиница");
			Отбор.СтруктурнаяЕдиница = СтрокаТаблицы.ЗагружаемыйОбъект;
			СрезПоследних = РегистрыСведений.ОтветственныеЛица.СрезПоследних(ТекущаяДата(), Отбор);
			
			ПериодЗаписи = ТекущаяДата();
			
			МОЛ = "";
			Если СтрокаТаблицы.ПараметрыОбъекта <> Неопределено Тогда
				МОЛ = СтрокаТаблицы.ПараметрыОбъекта.Получить("МОЛ");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(МОЛ)
				И (СрезПоследних.Количество() < 1
				ИЛИ МОЛ <> СрезПоследних[0].ФизическоеЛицо) Тогда 
				
				МенеджерЗаписи = РегистрыСведений.ОтветственныеЛица.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Период             = ПериодЗаписи;
				МенеджерЗаписи.СтруктурнаяЕдиница = ?(ЗначениеЗаполнено(СтрокаТаблицы.Ссылка), СтрокаТаблицы.Ссылка, СтрокаТаблицы.ЗагружаемыйОбъект.Ссылка);
				МенеджерЗаписи.ФизическоеЛицо     = МОЛ;
				МенеджерЗаписи.Записать();
				
			КонецЕсли;
		Исключение
		КонецПопытки;
		
	КонецЦикла;

КонецПроцедуры

Процедура Конвертация_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта,
	ОбъектМодифицирован, ИмяТипаОбъекта, ОбъектНайден) Экспорт

	Если ИмяТипаОбъекта = "Документ" И НЕ ОбъектНайден Тогда
		ДозаполнитьРеквизитыДокумента (Объект);
	КонецЕсли;

КонецПроцедуры

Процедура Конвертация_ПриПолученииИнформацииОбУдалении(Объект, Отказ) Экспорт

	МетаданныеОбъекта = Объект.Метаданные();
	
	Если Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
		
		Отказ  = Истина;
		
		УстановитьПометкуУдаленияУОбъекта(Объект, Истина, "Справочник");
		
	ИначеЕсли Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
		
		Отказ  = Истина;
		
		Если Объект.Проведен Тогда
			
			ОтменитьПроведениеОбъектаВИБ(Объект, ТипЗнч(Объект));
			
		КонецЕсли;
		
		Если НЕ Объект.Проведен Тогда
			
			УстановитьПометкуУдаленияУОбъекта(Объект, Истина, "Документ");
			
		КонецЕсли;
		
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеОбъекта) Тогда
		
		Отказ  = Истина;
		
		УстановитьПометкуУдаленияУОбъекта(Объект, Истина, "ПланВидовХарактеристик");
		
	КонецЕсли;

КонецПроцедуры

Процедура Конвертация_ПослеПолученияИнформацииОбУзлахОбмена(УзелОбменаЗагрузкаДанных) Экспорт

	Параметры.Вставить("УзелОбменаЗагрузкаДанных", УзелОбменаЗагрузкаДанных);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОНВЕРТАЦИИ ОБЪЕКТОВ
// В данном разделе разрешено изменять реализацию процедур.

Процедура ПКО_АвансовыйОтчет_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

		
	Если РежимЗагрузкиДанныхВИнформационнуюБазу() Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			Объект.Организация = Параметры.ОсновнаяОрганизация;
		КонецЕсли;
		
		ОбработатьЗаполнениеДокументаПослеЗагрузки (Объект, ПараметрыОбъекта);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_АктОбОказанииПроизводственныхУслуг_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	
	Если РежимЗагрузкиДанныхВИнформационнуюБазу() Тогда
	
		Если Объект.ЗачетАвансов.Количество() > 0 Тогда
			Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу;
		ИначеЕсли Не Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.НеЗачитывать Тогда
			Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
		КонецЕсли;
		
		ОбработатьЗаполнениеДокументаПослеЗагрузки (Объект, ПараметрыОбъекта);
	
		ОбработатьДоговорКонтрагента (Объект);
	
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ВозвратМатериаловИзЭксплуатации_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	Если РежимЗагрузкиДанныхВИнформационнуюБазу() Тогда
		
		ЗаполнитьПартиюПередачиМатериаловВЭксплуатацию (Объект);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ВозвратТоваровОтПокупателя_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

		
	Если РежимЗагрузкиДанныхВИнформационнуюБазу() Тогда
		
		ОбработатьЗаполнениеДокументаПослеЗагрузки (Объект, ПараметрыОбъекта);
		
		ОбработатьДоговорКонтрагента (Объект);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ВозвратТоваровПоставщику_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	
	Если РежимЗагрузкиДанныхВИнформационнуюБазу() Тогда
		
		ОбработатьЗаполнениеДокументаПослеЗагрузки (Объект, ПараметрыОбъекта);
		
		ОбработатьДоговорКонтрагента (Объект);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ДоговорыКонтрагентов_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	ВалютаРегламентированногоУчета	= Параметры.ВалютаРегламентированногоУчета;
	Объект.ОплатаВВалюте 			= (Объект.ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета)
											И НЕ Объект.РасчетыВУсловныхЕдиницах;
	
	Объект.УстановленСрокОплаты 	= Объект.СрокОплаты <> 0;

КонецПроцедуры

Процедура ПКО_ДоговорыКонтрагентовПоискПоИдентификатору_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	ВалютаРегламентированногоУчета	= Параметры.ВалютаРегламентированногоУчета;
	Объект.ОплатаВВалюте 			= (Объект.ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета)
											И НЕ Объект.РасчетыВУсловныхЕдиницах;
											
	Объект.УстановленСрокОплаты     = Объект.СрокОплаты <> 0;

КонецПроцедуры

Процедура ПКО_ЗаказНарядАктОбОказанииПроизводственныхУслуг_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	Если РежимЗагрузкиДанныхВИнформационнуюБазу() Тогда
		
		Если Объект.ЗачетАвансов.Количество() > 0 Тогда
			Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу;
		ИначеЕсли Не Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.НеЗачитывать Тогда
			Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
		КонецЕсли;
		
		ОбработатьТабличнуюЧастьДокументаАктРабот (Объект);
		
		ОбработатьЗаполнениеДокументаПослеЗагрузки (Объект, ПараметрыОбъекта);
		
		ОбработатьДоговорКонтрагента (Объект);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ЗаказНарядРеализацияТоваровУслуг_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	Если РежимЗагрузкиДанныхВИнформационнуюБазу() Тогда
		
		Если Объект.ЗачетАвансов.Количество() > 0 Тогда
			Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу;
		ИначеЕсли Не Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.НеЗачитывать Тогда
			Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
		КонецЕсли;
		
		Объект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
		
		ОбработатьЗаполнениеДокументаПослеЗагрузки (Объект, ПараметрыОбъекта);
	
		ОбработатьДоговорКонтрагента (Объект);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ЗаказНарядТребованиеНакладная_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

		
	Если РежимЗагрузкиДанныхВИнформационнуюБазу() Тогда
				
		ОбработатьЗаполнениеДокументаПослеЗагрузки (Объект, ПараметрыОбъекта);
	
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_Контрагенты_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	Если РежимЗагрузкиДанныхВИнформационнуюБазу() Тогда
		
		Если Не Объект.ЭтоГруппа
			И Не ЗначениеЗаполнено(Объект.СтранаРегистрации) Тогда
			Объект.СтранаРегистрации = Справочники.СтраныМира.Россия;
		КонецЕсли;
		
	КонецЕсли;
	

КонецПроцедуры

Процедура ПКО_КорректировкаДолга_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	
	Если РежимЗагрузкиДанныхВИнформационнуюБазу() Тогда
		
		ОбработатьЗаполнениеДокументаПослеЗагрузки (Объект, ПараметрыОбъекта);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_КорректировкаДолгаАвансы_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	
	Если РежимЗагрузкиДанныхВИнформационнуюБазу() Тогда
		
		ОбработатьЗаполнениеДокументаПослеЗагрузки (Объект, ПараметрыОбъекта);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_КорректировкаДолгаАвансыУдал_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	
	Если РежимЗагрузкиДанныхВИнформационнуюБазу() Тогда
		
		Если Объект.ЭтоНовый() Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ОприходованиеТоваров_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	
	Если РежимЗагрузкиДанныхВИнформационнуюБазу() Тогда
		
		УзелОбменаЗагрузкаДанных = Параметры.УзелОбменаЗагрузкаДанных;
		
		Если НЕ ЗначениеЗаполнено(Объект.СтатьяПрочихДоходовРасходов) Тогда
			Объект.СтатьяПрочихДоходовРасходов = УзелОбменаЗагрузкаДанных.СтатьяПрочихДоходовРасходов;
		КонецЕсли;	
		
		ОбработатьЗаполнениеДокументаПослеЗагрузки (Объект, ПараметрыОбъекта);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_Организации_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	Если Не ОбъектНайден Тогда
		Параметры.ЗагруженныеОрганизации.Добавить(Объект);
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ОтчетКомиссионераОПродажах_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	
	Если РежимЗагрузкиДанныхВИнформационнуюБазу() Тогда
		
		Если Объект.ЗачетАвансов.Количество() > 0 Тогда
			Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу;
		ИначеЕсли Не Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.НеЗачитывать Тогда
			Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
		КонецЕсли;
		
		ОбработатьЗаполнениеДокументаПослеЗагрузки (Объект, ПараметрыОбъекта);
		
		ОбработатьДоговорКонтрагента (Объект);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ОтчетКомитентуОПродажах_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	Если РежимЗагрузкиДанныхВИнформационнуюБазу() Тогда
	
		ОбработатьЗаполнениеДокументаПослеЗагрузки (Объект, ПараметрыОбъекта);
		
		ОбработатьДоговорКонтрагента (Объект);
	
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ОтчетОРозничныхПродажах_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	
	Если РежимЗагрузкиДанныхВИнформационнуюБазу() Тогда	
		
		ЭтоОтчетНТТОПродажах		= (Объект.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах);
		УчетПоПродажнойСтоимости	= (УчетнаяПолитика.СпособОценкиТоваровВРознице(Объект.Организация, Объект.Дата) = ПредопределенноеЗначение("Перечисление.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости"));
		
		НТТПоПродажнойСтоимости = ЭтоОтчетНТТОПродажах И УчетПоПродажнойСтоимости;
		
		ОбработатьЗаполнениеДокументаПослеЗагрузки (Объект, ПараметрыОбъекта);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ОтчетПроизводстваЗаСмену_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	
	Если РежимЗагрузкиДанныхВИнформационнуюБазу() Тогда
		
		УзелОбменаЗагрузкаДанных = Параметры.УзелОбменаЗагрузкаДанных;
		
		ОбработатьЗаполнениеДокументаПослеЗагрузки (Объект, ПараметрыОбъекта);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПередачаМатериаловВЭксплуатацию_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	Если РежимЗагрузкиДанныхВИнформационнуюБазу() Тогда
		
		// Заполним необходимые реквизиты в табличной части Спецодежда
		Для каждого ТекСтрока Из Объект.Спецодежда Цикл
		
			Запрос = Новый Запрос();
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	НазначенияИспользования.Ссылка КАК НазначениеИспользования
			|ИЗ
			|	Справочник.НазначенияИспользования КАК НазначенияИспользования
			|ГДЕ
			|	НазначенияИспользования.Владелец = &Владелец
			|	И НазначенияИспользования.СпособОтраженияРасходов = &СпособОтраженияРасходов";
			Запрос.УстановитьПараметр("Владелец", ТекСтрока.Номенклатура);
			Запрос.УстановитьПараметр("СпособОтраженияРасходов", Параметры.УзелОбменаЗагрузкаДанных.СпособОтраженияРасходов);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				
				ТекСтрока.НазначениеИспользования = Выборка.НазначениеИспользования;
				
			КонецЕсли;
			
			СчетаУчета 				= БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, ТекСтрока.Номенклатура, Объект.Склад);
			ТекСтрока.СчетУчета 	= СчетаУчета.СчетУчета;
			
			//Спец. одежда всегда 10.11.1. Смотреть на "СчетаУчета.СчетПередачи" не нужно
			ТекСтрока.СчетПередачи	= ПланыСчетов.Хозрасчетный.СпецодеждаВЭксплуатации;
			
			Если ЗначениеЗаполнено(ТекСтрока.НазначениеИспользования) И ТекСтрока.Количество = 0 Тогда
				
				ТекСтрока.Количество = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТекСтрока.НазначениеИспользования, "Количество");
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ТекСтрока.ОтражениеВУСН) Тогда 
				
				УСН                 		= УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Объект.Организация, Объект.Дата);
				УСНДоходы           		= УчетнаяПолитика.ПрименяетсяУСНДоходы(Объект.Организация, Объект.Дата);
				ОтражатьВНалоговомУчетеУСН	= УСН И НЕ УСНДоходы;
				
				Если ОтражатьВНалоговомУчетеУСН Тогда
					
					ТекСтрока.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
					
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПередачаТоваров_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	Если РежимЗагрузкиДанныхВИнформационнуюБазу() Тогда
		
		ОбработатьЗаполнениеДокументаПослеЗагрузки (Объект, ПараметрыОбъекта);
		
		ОбработатьДоговорКонтрагента (Объект);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПеремещениеДСПриходныйКассовыйОрдер_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	// заполняем счета учета, если они не заполнены 
	Если Не ЗначениеЗаполнено(Объект.СчетКасса) Тогда
		Если Объект.ВалютаДокумента = Параметры.ВалютаРегламентированногоУчета Тогда
			Объект.СчетКасса = ПланыСчетов.Хозрасчетный.КассаОрганизации;
		Иначе
			Объект.СчетКасса = ПланыСчетов.Хозрасчетный.КассаОрганизацииВал;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентом) Тогда
		Если Объект.ВалютаДокумента = Параметры.ВалютаРегламентированногоУчета Тогда
			Объект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
		Иначе
			Объект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ВалютныеСчета;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПеремещениеДСРасходныйКассовыйОрдер_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	// заполняем счета учета, если они не заполнены 
	Если Не ЗначениеЗаполнено(Объект.СчетКасса) Тогда
		Если Объект.ВалютаДокумента = Параметры.ВалютаРегламентированногоУчета Тогда
			Объект.СчетКасса = ПланыСчетов.Хозрасчетный.КассаОрганизации;
		Иначе
			Объект.СчетКасса = ПланыСчетов.Хозрасчетный.КассаОрганизацииВал;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентом) Тогда
		Если Объект.ВалютаДокумента = Параметры.ВалютаРегламентированногоУчета Тогда
			Объект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
		Иначе
			Объект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ВалютныеСчета;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПеремещениеДССписаниеСРасчетногоСчета_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	// заполняем счета учета, если они не заполнены 
	Если Не ЗначениеЗаполнено(Объект.СчетБанк) Тогда
		Если Объект.ВалютаДокумента = Параметры.ВалютаРегламентированногоУчета Тогда
			Объект.СчетБанк = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
		Иначе
			Объект.СчетБанк = ПланыСчетов.Хозрасчетный.ВалютныеСчета;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентом) Тогда
		Если Объект.ВалютаДокумента = Параметры.ВалютаРегламентированногоУчета Тогда
			Объект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
		Иначе
			Объект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ВалютныеСчета;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПеремещениеОтходов_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	Если РежимЗагрузкиДанныхВИнформационнуюБазу() Тогда
		
		Если Объект.ЭтоНовый()
			И Объект.Товары.Количество() = 0 Тогда
			
			Отказ = Истина;
			
		Иначе
			
			Объект.НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
			Документы.ПеремещениеТоваров.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Товары");
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПеремещениеОтходовУдал_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	
	Если РежимЗагрузкиДанныхВИнформационнуюБазу() Тогда
		
		Если Объект.ЭтоНовый() Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПеремещениеПродукции_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	Если РежимЗагрузкиДанныхВИнформационнуюБазу() Тогда
		
		Если Объект.ЭтоНовый()
			И Объект.Товары.Количество() = 0 Тогда
			
			Отказ = Истина;
			
		Иначе
			
			Объект.НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
			Документы.ПеремещениеТоваров.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Товары");
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПеремещениеПродукцииУдал_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	
	Если РежимЗагрузкиДанныхВИнформационнуюБазу() Тогда
		
		Если Объект.ЭтоНовый() Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПеремещениеТоваров_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	
	Если РежимЗагрузкиДанныхВИнформационнуюБазу() Тогда
		
		Объект.НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
		
		// Заполним счета учета в табличной части 
		СписокТабличныхЧастей = Новый Массив;
		СписокТабличныхЧастей.Добавить("Товары");
		СписокТабличныхЧастей.Добавить("ТоварыНаКомиссии");
		СписокТабличныхЧастей.Добавить("ВозвратнаяТара");
		Для Каждого ИмяТабличнойЧасти Из СписокТабличныхЧастей Цикл
			
			Документы.ПеремещениеТоваров.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти);
			
			Если ИмяТабличнойЧасти = "ТоварыНаКомиссии" Тогда
				Для каждого СтрокаТаблицы Из Объект[ИмяТабличнойЧасти] Цикл
					Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
						 СтрокаТаблицы.СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыНаСкладе;
					КонецЕсли;
					Если Не ЗначениеЗаполнено(СтрокаТаблицы.НовыйСчетУчета) Тогда
						 СтрокаТаблицы.НовыйСчетУчета = ПланыСчетов.Хозрасчетный.ТоварыНаСкладе;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПоступлениеДопРасходов_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	
	Если РежимЗагрузкиДанныхВИнформационнуюБазу() Тогда
		
		Если Объект.ЗачетАвансов.Количество() > 0 Тогда
			Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу;
		ИначеЕсли Не Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.НеЗачитывать Тогда
			Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
		КонецЕсли;
		
		Объект.СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоСумме;
	
		ОбработатьЗаполнениеДокументаПослеЗагрузки (Объект, ПараметрыОбъекта);
		
		ОбработатьДоговорКонтрагента (Объект);
	
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПоступлениеИзПереработки_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	
	Если РежимЗагрузкиДанныхВИнформационнуюБазу() Тогда
		
		Если Объект.ЗачетАвансов.Количество() > 0 Тогда
			Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу;
		ИначеЕсли Не Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.НеЗачитывать Тогда
			Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
		КонецЕсли;
		
		УзелОбменаЗагрузкаДанных = Параметры.УзелОбменаЗагрузкаДанных;
	
		ОбработатьЗаполнениеДокументаПослеЗагрузки (Объект, ПараметрыОбъекта);
	
		// Заполним реквизит Содержание табличной части Услуги
		ЗаполнитьСодержаниеТабличнойЧастиУслуги (Объект);
		
		ОбработатьДоговорКонтрагента (Объект);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПоступлениеНаРасчетныйСчет_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	
	Если РежимЗагрузкиДанныхВИнформационнуюБазу() Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			Объект.Организация = Параметры.ОсновнаяОрганизация;
		КонецЕсли;
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление
			И Не ЗначениеЗаполнено(Объект.СубконтоКт1) Тогда
			
			Объект.СубконтоКт1 = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.ПрочиеВнереализационныеДоходыРасходы");
			
		КонецЕсли;
			
		Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
			СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();
			СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
		ИначеЕсли Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
			Объект.РасшифровкаПлатежа[0].СуммаПлатежа = Объект.СуммаДокумента;
		КонецЕсли;
		
		Для каждого ТекСтрока Из Объект.РасшифровкаПлатежа Цикл 
			
			ТекСтрока.СтатьяДвиженияДенежныхСредств	= Объект.СтатьяДвиженияДенежныхСредств;
			ТекСтрока.СпособПогашенияЗадолженности	= ?(ЗначениеЗаполнено(ТекСтрока.Сделка), 
				Перечисления.СпособыПогашенияЗадолженности.ПоДокументу, 
				ТекСтрока.СпособПогашенияЗадолженности);
			
			//  Заполнение договора.
			Если (Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты)
			   И НЕ ЗначениеЗаполнено(ТекСтрока.ДоговорКонтрагента) Тогда
				ТекСтрока.ДоговорКонтрагента = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.Контрагент, "ОсновнойДоговорКонтрагента");
			КонецЕсли;
			
			//  Заполним счета расчетов в расшифровке
			Если ЗначениеЗаполнено(ТекСтрока.СчетУчетаРасчетовСКонтрагентом) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам Тогда
				ТекСтрока.СчетУчетаРасчетовСКонтрагентом = Объект.СчетУчетаРасчетовСКонтрагентом;
				Продолжить;
			КонецЕсли;
	
			СтруктураСчетов = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
				Объект.Организация, Объект.Контрагент, ТекСтрока.ДоговорКонтрагента);
	
			Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя Тогда
				
				Если Не ЗначениеЗаполнено(ТекСтрока.СчетУчетаРасчетовСКонтрагентом) Тогда
					ТекСтрока.СчетУчетаРасчетовСКонтрагентом = СтруктураСчетов.СчетРасчетовПокупателя;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(ТекСтрока.СчетУчетаРасчетовПоАвансам) Тогда
					ТекСтрока.СчетУчетаРасчетовПоАвансам     = СтруктураСчетов.СчетАвансовПокупателя;
				КонецЕсли;
				
			ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика Тогда
				
				Если Не ЗначениеЗаполнено(ТекСтрока.СчетУчетаРасчетовСКонтрагентом) Тогда
					ТекСтрока.СчетУчетаРасчетовСКонтрагентом = СтруктураСчетов.СчетРасчетов;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(ТекСтрока.СчетУчетаРасчетовПоАвансам) Тогда
					ТекСтрока.СчетУчетаРасчетовПоАвансам     = СтруктураСчетов.СчетАвансов;
				КонецЕсли;
				
			ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами Тогда
				
				Если Не ЗначениеЗаполнено(ТекСтрока.СчетУчетаРасчетовСКонтрагентом) Тогда
					ТекСтрока.СчетУчетаРасчетовСКонтрагентом = СтруктураСчетов.СчетРасчетовПокупателя;
				КонецЕсли;
				
			КонецЕсли;
	
		КонецЦикла;
		
		ОбработатьДоговорКонтрагента (Объект);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПоступлениеТоваровУслуг_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	Если РежимЗагрузкиДанныхВИнформационнуюБазу() Тогда
		
		Если Объект.ЗачетАвансов.Количество() > 0 Тогда
			Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу;
		ИначеЕсли Не Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.НеЗачитывать Тогда
			Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
		КонецЕсли;
		
		ОбработатьЗаполнениеДокументаПослеЗагрузки (Объект, ПараметрыОбъекта);
		
		ОбработатьДоговорКонтрагента (Объект);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПриходныйКассовыйОрдер_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	
	Если РежимЗагрузкиДанныхВИнформационнуюБазу() Тогда
		
		Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
			Объект.Организация = Параметры.ОсновнаяОрганизация;
		КонецЕсли;
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ПрочийПриход
			И Не ЗначениеЗаполнено(Объект.СубконтоКт1) Тогда
			
			Объект.СубконтоКт1 = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.ПрочиеВнереализационныеДоходыРасходы");
			
		КонецЕсли;
	
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймам Тогда
			Если Объект.РасшифровкаПлатежа.Количество()=0 Тогда
				СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();
				СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
			ИначеЕсли Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
				Объект.РасшифровкаПлатежа[0].СуммаПлатежа = Объект.СуммаДокумента;
			КонецЕсли;
		КонецЕсли;
		
		Для каждого ТекСтрока Из Объект.РасшифровкаПлатежа Цикл
			
			ТекСтрока.СтатьяДвиженияДенежныхСредств = Объект.СтатьяДвиженияДенежныхСредств;
			ТекСтрока.СпособПогашенияЗадолженности	= ?(ЗначениеЗаполнено(ТекСтрока.Сделка), 
				Перечисления.СпособыПогашенияЗадолженности.ПоДокументу, 
				ТекСтрока.СпособПогашенияЗадолженности);
			
			Если ЗначениеЗаполнено(ТекСтрока.СчетУчетаРасчетовСКонтрагентом) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Объект.ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймам Тогда
				ТекСтрока.СчетУчетаРасчетовСКонтрагентом = Объект.СчетУчетаРасчетовСКонтрагентом;
				Продолжить;
			КонецЕсли;
			
			//Заполнение счетов расчетов с контрагентом
			СчетаУчета = Новый Структура("СчетУчетаРасчетовСКонтрагентом,СчетУчетаРасчетовПоАвансам");
	
			СтруктураСчетов = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
				Объект.Организация, Объект.Контрагент, ТекСтрока.ДоговорКонтрагента);
	
			Если Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика Тогда
				
				Если Не ЗначениеЗаполнено(ТекСтрока.СчетУчетаРасчетовСКонтрагентом) Тогда
					ТекСтрока.СчетУчетаРасчетовСКонтрагентом	= СтруктураСчетов.СчетРасчетов;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(ТекСтрока.СчетУчетаРасчетовПоАвансам) Тогда
					ТекСтрока.СчетУчетаРасчетовПоАвансам		= СтруктураСчетов.СчетАвансов;
				КонецЕсли;
				
			Иначе
				
				Если Не ЗначениеЗаполнено(ТекСтрока.СчетУчетаРасчетовСКонтрагентом) Тогда
					ТекСтрока.СчетУчетаРасчетовСКонтрагентом	= СтруктураСчетов.СчетРасчетовПокупателя;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(ТекСтрока.СчетУчетаРасчетовПоАвансам) Тогда
					ТекСтрока.СчетУчетаРасчетовПоАвансам		= СтруктураСчетов.СчетАвансовПокупателя;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ОбработатьДоговорКонтрагента (Объект);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПроизводственныеСклады_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	Если РежимЗагрузкиДанныхВИнформационнуюБазу() Тогда
		НоваяСтрока = Параметры.ТаблицаЗагруженныхОбъектов.Добавить();
		НоваяСтрока.ЗагружаемыйОбъект = Объект;
		НоваяСтрока.ПараметрыОбъекта  = ПараметрыОбъекта;
		НоваяСтрока.Ссылка = Ссылка;
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_РаспределениеМатериальныхЗатрат_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	
	Если РежимЗагрузкиДанныхВИнформационнуюБазу() Тогда
		
		Если Объект.ЭтоНовый()
			И Объект.Материалы.Количество() = 0 Тогда
			Отказ = Истина;
		КонецЕсли;
		
		ОбработатьЗаполнениеДокументаПослеЗагрузки (Объект, ПараметрыОбъекта);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_РасходныйКассовыйОрдер_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	
	Если РежимЗагрузкиДанныхВИнформационнуюБазу() Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			Объект.Организация = Параметры.ОсновнаяОрганизация;
		КонецЕсли;
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ПрочийРасход
			И Не ЗначениеЗаполнено(Объект.СубконтоДт1) Тогда
			
			Объект.СубконтоДт1 = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.ПрочиеВнереализационныеДоходыРасходы");
			
		КонецЕсли;
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам Тогда
			Если Объект.РасшифровкаПлатежа.Количество()=0 Тогда
				СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();
				СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
			ИначеЕсли Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
				Объект.РасшифровкаПлатежа[0].СуммаПлатежа = Объект.СуммаДокумента;
			КонецЕсли;
		КонецЕсли;
	
		Для каждого ТекСтрока Из Объект.РасшифровкаПлатежа Цикл 
			
			ТекСтрока.СтатьяДвиженияДенежныхСредств = Объект.СтатьяДвиженияДенежныхСредств;
			ТекСтрока.СпособПогашенияЗадолженности	= ?(ЗначениеЗаполнено(ТекСтрока.Сделка), 
				Перечисления.СпособыПогашенияЗадолженности.ПоДокументу, 
				ТекСтрока.СпособПогашенияЗадолженности);
	
			//Заполним счета расчетов с контрагентом
			Если ЗначениеЗаполнено(ТекСтрока.СчетУчетаРасчетовСКонтрагентом) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам Тогда
				ТекСтрока.СчетУчетаРасчетовСКонтрагентом = Объект.СчетУчетаРасчетовСКонтрагентом;
				Продолжить;
			КонецЕсли;
	
			СчетаУчета = Новый Структура("СчетУчетаРасчетовСКонтрагентом,СчетУчетаРасчетовПоАвансам");
	
			СтруктураСчетов = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
				Объект.Организация, Объект.Контрагент, ТекСтрока.ДоговорКонтрагента);
	
			Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику Тогда
				
				Если Не ЗначениеЗаполнено(ТекСтрока.СчетУчетаРасчетовСКонтрагентом) Тогда
					ТекСтрока.СчетУчетаРасчетовСКонтрагентом	= СтруктураСчетов.СчетРасчетов;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(ТекСтрока.СчетУчетаРасчетовПоАвансам) Тогда
					ТекСтрока.СчетУчетаРасчетовПоАвансам		= СтруктураСчетов.СчетАвансов;
				КонецЕсли;
				
			Иначе
				
				Если Не ЗначениеЗаполнено(ТекСтрока.СчетУчетаРасчетовСКонтрагентом) Тогда
					ТекСтрока.СчетУчетаРасчетовСКонтрагентом	= СтруктураСчетов.СчетРасчетовПокупателя;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(ТекСтрока.СчетУчетаРасчетовПоАвансам) Тогда
					ТекСтрока.СчетУчетаРасчетовПоАвансам		= СтруктураСчетов.СчетАвансовПокупателя;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ОбработатьДоговорКонтрагента (Объект);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_РеализацияТоваровУслуг_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	
	Если РежимЗагрузкиДанныхВИнформационнуюБазу() Тогда
		
		Если Объект.ЗачетАвансов.Количество() > 0 Тогда
			Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу;
		ИначеЕсли Не Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.НеЗачитывать Тогда
			Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
		КонецЕсли;
		
		ОбработатьЗаполнениеДокументаПослеЗагрузки (Объект, ПараметрыОбъекта);
		
		ОбработатьДоговорКонтрагента (Объект);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_РеализацияУслугПоПереработке_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	
	Если РежимЗагрузкиДанныхВИнформационнуюБазу() Тогда
		
		Если Объект.ЗачетАвансов.Количество() > 0 Тогда
			Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу;
		ИначеЕсли Не Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.НеЗачитывать Тогда
			Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
		КонецЕсли;
		
		ОбработатьЗаполнениеДокументаПослеЗагрузки (Объект, ПараметрыОбъекта);
	
		ОбработатьДоговорКонтрагента (Объект);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_Склады_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	Если РежимЗагрузкиДанныхВИнформационнуюБазу() Тогда
		НоваяСтрока = Параметры.ТаблицаЗагруженныхОбъектов.Добавить();
		НоваяСтрока.ЗагружаемыйОбъект = Объект;
		НоваяСтрока.ПараметрыОбъекта  = ПараметрыОбъекта;
		НоваяСтрока.Ссылка = Ссылка;
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_СписаниеМатериаловИзЭксплуатации_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	
	Если РежимЗагрузкиДанныхВИнформационнуюБазу() Тогда
		
		Объект.СпособСписанияРасходов = Перечисления.СпособыСписанияРасходов.ПоНазначениюИспользования;
		
		ЗаполнитьПартиюПередачиМатериаловВЭксплуатацию (Объект);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_СписаниеСРасчетногоСчета_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	
	Если РежимЗагрузкиДанныхВИнформационнуюБазу() Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			Объект.Организация = Параметры.ОсновнаяОрганизация;
		КонецЕсли;
	
		Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание
			И Не ЗначениеЗаполнено(Объект.СубконтоДт1) Тогда
			
			Если Объект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПрочиеРасходы Тогда
				Объект.СубконтоДт1 = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.РасходыНаУслугиБанков");
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Объект.СубконтоДт1) Тогда
				Объект.СубконтоДт1 = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.ПрочиеВнереализационныеДоходыРасходы");
			КонецЕсли;
			
		КонецЕсли;
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам Тогда
			Если Объект.РасшифровкаПлатежа.Количество()=0 Тогда
				СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();
				СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
			ИначеЕсли Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
				Объект.РасшифровкаПлатежа[0].СуммаПлатежа = Объект.СуммаДокумента;
			КонецЕсли;
		КонецЕсли;
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
			
			Если Не ЗначениеЗаполнено(Объект.НалоговыйПериод) Тогда
				Объект.НалоговыйПериод = Объект.Дата;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Объект.СубконтоДт1) Тогда
				Объект.СубконтоДт1 = Перечисления.ВидыПлатежейВГосБюджет.Налог;
			КонецЕсли;
			
		КонецЕсли;
		
		Для каждого ТекСтрока Из Объект.РасшифровкаПлатежа Цикл 
			
			ТекСтрока.СтатьяДвиженияДенежныхСредств = Объект.СтатьяДвиженияДенежныхСредств;
			
			ТекСтрока.СпособПогашенияЗадолженности	= ?(ЗначениеЗаполнено(ТекСтрока.Сделка), 
				Перечисления.СпособыПогашенияЗадолженности.ПоДокументу, 
				ТекСтрока.СпособПогашенияЗадолженности);
			
			//  Заполним счета расчетов в табличной части Расшифровка платежа
			Если ЗначениеЗаполнено(ТекСтрока.СчетУчетаРасчетовСКонтрагентом) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам Тогда
				ТекСтрока.СчетУчетаРасчетовСКонтрагентом = Объект.СчетУчетаРасчетовСКонтрагентом;
				Продолжить;
			КонецЕсли;
	
			СтруктураСчетов = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
			Объект.Организация, Объект.Контрагент, ТекСтрока.ДоговорКонтрагента);
			
			Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику Тогда
				
				Если Не ЗначениеЗаполнено(ТекСтрока.СчетУчетаРасчетовСКонтрагентом) Тогда
					ТекСтрока.СчетУчетаРасчетовСКонтрагентом = СтруктураСчетов.СчетРасчетов;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(ТекСтрока.СчетУчетаРасчетовПоАвансам) Тогда
					ТекСтрока.СчетУчетаРасчетовПоАвансам     = СтруктураСчетов.СчетАвансов;
				КонецЕсли;
				
			ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю Тогда
				
				Если Не ЗначениеЗаполнено(ТекСтрока.СчетУчетаРасчетовСКонтрагентом) Тогда
					ТекСтрока.СчетУчетаРасчетовСКонтрагентом = СтруктураСчетов.СчетРасчетовПокупателя;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(ТекСтрока.СчетУчетаРасчетовПоАвансам) Тогда
					ТекСтрока.СчетУчетаРасчетовПоАвансам     = СтруктураСчетов.СчетАвансовПокупателя;
				КонецЕсли;
				
			ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами Тогда
				
				Если Не ЗначениеЗаполнено(ТекСтрока.СчетУчетаРасчетовСКонтрагентом) Тогда
					ТекСтрока.СчетУчетаРасчетовСКонтрагентом = СтруктураСчетов.СчетРасчетов;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ОбработатьДоговорКонтрагента (Объект);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_СписаниеТоваров_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	
	Если РежимЗагрузкиДанныхВИнформационнуюБазу() Тогда
		
		ОбработатьЗаполнениеДокументаПослеЗагрузки (Объект, ПараметрыОбъекта);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_СчетНаОплатуПокупателю_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	
	Если РежимЗагрузкиДанныхВИнформационнуюБазу() Тогда
		
		ОбработатьДоговорКонтрагента (Объект);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_СчетФактураВыданный_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	
	Если РежимЗагрузкиДанныхВИнформационнуюБазу() Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			Объект.Организация = Параметры.ОсновнаяОрганизация;
		КонецЕсли;
				
		ПлатежноРасчетныеДокументы = Объект.ПлатежноРасчетныеДокументы;
		Если ПлатежноРасчетныеДокументы.Количество() > 0 Тогда
			Объект.ДатаПлатежноРасчетногоДокумента  = ПлатежноРасчетныеДокументы[0].ДатаДокумента;
			Объект.НомерПлатежноРасчетногоДокумента = ПлатежноРасчетныеДокументы[0].НомерДокумента;
		КонецЕсли;
		
		СтруктураПараметров	= Новый Структура;
		СтруктураПараметров.Вставить("Дата",						Объект.Дата);
		СтруктураПараметров.Вставить("ВидСчетаФактуры",				Объект.ВидСчетаФактуры);
		СтруктураПараметров.Вставить("Исправление",					Объект.Исправление);
		СтруктураПараметров.Вставить("Контрагент",					Объект.Контрагент);
		СтруктураПараметров.Вставить("ДоговорКонтрагента",			Объект.ДоговорКонтрагента);
		СтруктураПараметров.Вставить("Продавец",					Объект.Продавец);
		СтруктураПараметров.Вставить("СчетФактураНеВыставляется",	Объект.СчетФактураНеВыставляется);
		СтруктураПараметров.Вставить("СчетФактураБезНДС",			Объект.СчетФактураБезНДС);
		СтруктураПараметров.Вставить("КодВидаОперации",				Объект.КодВидаОперации);
		СтруктураПараметров.Вставить("ДокументыОснования",			Объект.ДокументыОснования.Выгрузить(,"ДокументОснование"));
	
		Объект.КодВидаОперации = Документы.СчетФактураВыданный.ПолучитьКодВидаОперации(СтруктураПараметров);
		Объект.КодСпособаВыставления = 1;
		
		Объект.Выставлен = Истина;
		Объект.ДатаВыставления = Объект.Дата;
		
		ОбработатьДоговорКонтрагента (Объект);
	
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_СчетФактураПолученный_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	
	Если РежимЗагрузкиДанныхВИнформационнуюБазу() Тогда
	
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			Объект.Организация = Параметры.ОсновнаяОрганизация;
		КонецЕсли;
		
		Объект.КодСпособаПолучения = 1; //УНФ не предполагает получение СФ в электронном виде
		
		СтруктураПараметров	= Новый Структура;
		СтруктураПараметров.Вставить("Дата",                     Объект.Дата);
		СтруктураПараметров.Вставить("ВидСчетаФактуры",          Объект.ВидСчетаФактуры);
		СтруктураПараметров.Вставить("Исправление",              Объект.Исправление);
		СтруктураПараметров.Вставить("ВидДоговора",              ОбщегоНазначения.ПолучитьЗначениеРеквизита(
			Объект.ДоговорКонтрагента, "ВидДоговора"));
		СтруктураПараметров.Вставить("СчетФактураБезНДС",        Объект.СчетФактураБезНДС);
		СтруктураПараметров.Вставить("КодВидаОперации",          Объект.КодВидаОперации);
		СтруктураПараметров.Вставить("КодВидаОперацииОснования", Неопределено);
		СтруктураПараметров.Вставить("ДокументыОснования",       Объект.ДокументыОснования.Выгрузить(,"ДокументОснование"));
		
		Объект.КодВидаОперации = Документы.СчетФактураПолученный.ПолучитьКодВидаОперации(СтруктураПараметров);
		Объект.КодСпособаПолучения = 1;
		
		ОбработатьДоговорКонтрагента (Объект);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ТребованиеНакладная_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,
	ИмяТипаОбъекта, ОбъектНайден) Экспорт

	
	Если РежимЗагрузкиДанныхВИнформационнуюБазу() Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.Контрагент)
			И Объект.МатериалыЗаказчика.Количество() > 0 Тогда
			
			Если ПараметрыОбъекта <> Неопределено Тогда
				ПараметрыТЧ = ПараметрыОбъекта.Получить("МатериалыЗаказчикаТабличнаяЧасть");
				Объект.Контрагент = ПараметрыТЧ[0].Контрагент;
			КонецЕсли;
			
		КонецЕсли;
		
		ОбработатьЗаполнениеДокументаПослеЗагрузки (Объект, ПараметрыОбъекта);
		
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОНВЕРТАЦИИ СВОЙСТВ ОБЪЕКТОВ
// В данном разделе разрешено изменять реализацию процедур.

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОНВЕРТАЦИИ ГРУПП СВОЙСТВ ОБЪЕКТОВ
// В данном разделе разрешено изменять реализацию процедур.

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ВЫГРУЗКИ ДАННЫХ
// В данном разделе разрешено изменять реализацию процедур.

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ОЧИСТКИ ДАННЫХ
// В данном разделе разрешено изменять реализацию процедур.

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ПАРАМЕТРОВ
// В данном разделе разрешено изменять реализацию процедур.

////////////////////////////////////////////////////////////////////////////////
// АЛГОРИТМЫ
// Данный раздел разрешено изменять.
// Также допустимо размещать процедуры с алгоритмами в любом из разделов выше.

Процедура ДозаполнитьРеквизитыДокумента(Объект) Экспорт

	// Алгоритм предназначен для дозаполнения реквизитов документов,
	// вызывается в обработчике события "после загрузки объекта" конвертации.
	
	МетаданныеДокумента = Объект.Метаданные();
	
	Если ОбщегоНазначенияБПВызовСервера.ЕстьРеквизитДокумента("ОтражатьВНалоговомУчете", МетаданныеДокумента) Тогда
		
		Объект.ОтражатьВНалоговомУчете = НЕ БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("НеОтражатьДокументыВНалоговомУчете", Пользователи.ТекущийПользователь());
		
	КонецЕсли;
		
	Если ОбщегоНазначенияБПВызовСервера.ЕстьРеквизитДокумента("ОтражатьВБухгалтерскомУчете", МетаданныеДокумента) Тогда
		
		//По умолчанию все документы требуют отражения в бухгалтерском учете
		Объект.ОтражатьВБухгалтерскомУчете = Истина
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнениеОтражениеВУСН(Объект, ТабличнаяЧасть) Экспорт

	// Параметры:
	// - Объект
	// - ТабличнаяЧасть
	
	Если УчетнаяПолитика.Существует(Объект.Организация, Объект.Дата, Истина, Объект.Ссылка) Тогда
		
		ВариантОтраженияУСН = ?(УчетнаяПолитика.ПрименяетсяУСН(Объект.Организация, Объект.Дата) И
			УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Объект.Организация, Объект.Дата),
			Перечисления.ОтражениеВУСН.Принимаются, Перечисления.ОтражениеВУСН.ПустаяСсылка());
		
		// Заполняем отражение в УСН для ТЧ
		Для Каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.ОтражениеВУСН) Или ВариантОтраженияУСН = Перечисления.ОтражениеВУСН.ПустаяСсылка() Тогда
				СтрокаТаблицы.ОтражениеВУСН = ВариантОтраженияУСН;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнениеОтражениеНДСВСтоимости(Объект, ПараметрыОбъекта) Экспорт

	// Параметры:
	// - Объект
	// - ПараметрыОбъекта
	
	Если УчетнаяПолитика.Существует(Объект.Организация, Объект.Дата, Истина, Объект.Ссылка) Тогда
		Если Не УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата) Тогда
			Объект.НДСВключенВСтоимость = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьПартиюПередачиМатериаловВЭксплуатацию(Объект) Экспорт

	ВключатьЗабалансовые = НЕ (ТипЗнч(Объект) = Тип("ДокументОбъект.ВозвратМатериаловИзЭксплуатации"));
	СИстекшимСрокомПолезногоИспользования	= Ложь;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Дата",			Объект.Дата);
	Запрос.УстановитьПараметр("Организация",	Объект.Организация);
	Запрос.УстановитьПараметр("Подразделение",	Объект.ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("ВключатьЗабалансовые",                  ВключатьЗабалансовые);
	Запрос.УстановитьПараметр("СИстекшимСрокомПолезногоИспользования", СИстекшимСрокомПолезногоИспользования);
	Запрос.УстановитьПараметр("Период", 		Новый Граница(Объект.Дата, ВидГраницы.Исключая));
	
	Запрос.Текст = "
		|/////////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОстаткиМЦ.Субконто1           КАК Субконто1,
		|	ХозрасчетныйОстаткиМЦ.Субконто2           КАК Субконто2,
		|	ХозрасчетныйОстаткиМЦ.Субконто3           КАК Субконто3,
		|	ХозрасчетныйОстаткиМЦ.КоличествоОстатокДт КАК КоличествоОстатокДт
		|ПОМЕСТИТЬ
		|	ВТ_ОстаткиМЦ_Передача
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|		&Период,
		|		Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СпецодеждаВЭксплуатацииВспомогательный),
		|		,
		|		Организация = &Организация
		|			И (Подразделение = &Подразделение ИЛИ Подразделение ЕСТЬ NULL)
		|			И Субконто2 ССЫЛКА Документ.ПередачаМатериаловВЭксплуатацию
		|	) КАК ХозрасчетныйОстаткиМЦ
		|ИНДЕКСИРОВАТЬ ПО
		|	Субконто1,
		|	Субконто2,
		|	Субконто3
		|;
		|
		|/////////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет                КАК Счет,
		|	ХозрасчетныйОстатки.Субконто1           КАК Субконто1,
		|	ХозрасчетныйОстатки.Субконто2           КАК Субконто2,
		|	ХозрасчетныйОстатки.Субконто3           КАК Субконто3,
		|	ХозрасчетныйОстатки.СуммаОстатокДт      КАК СуммаОстатокДт,
		|	ХозрасчетныйОстатки.КоличествоОстатокДт КАК КоличествоОстатокДт
		|ПОМЕСТИТЬ
		|	ВТ_Остатки_Передача
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|		&Период,
		|		Счет НЕ В (
		|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СпецодеждаВЭксплуатацииВспомогательный),
		|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СпецоснасткаВЭксплуатацииВспомогательный)),
		|		,
		|		Организация = &Организация
		|			И (Подразделение = &Подразделение ИЛИ Подразделение ЕСТЬ NULL)
		|			И Субконто2 ССЫЛКА Документ.ПередачаМатериаловВЭксплуатацию
		|	) КАК ХозрасчетныйОстатки
		|ИНДЕКСИРОВАТЬ ПО
		|	Субконто1,
		|	Субконто2,
		|	Субконто3
		|;
		|
		|/////////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОстаткиМЦ.Субконто1           КАК Субконто1,
		|	ХозрасчетныйОстаткиМЦ.Субконто2           КАК Субконто2,
		|	ХозрасчетныйОстаткиМЦ.Субконто3           КАК Субконто3,
		|	ХозрасчетныйОстаткиМЦ.КоличествоОстатокДт КАК КоличествоОстатокДт
		|ПОМЕСТИТЬ
		|	ВТ_ОстаткиМЦ_Партия
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|		&Период,
		|		Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СпецодеждаВЭксплуатацииВспомогательный),
		|		,
		|		Организация = &Организация
		|			И (Подразделение = &Подразделение ИЛИ Подразделение ЕСТЬ NULL)
		|			И Субконто2 ССЫЛКА Документ.ПартияМатериаловВЭксплуатации
		|	) КАК ХозрасчетныйОстаткиМЦ
		|ИНДЕКСИРОВАТЬ ПО
		|	Субконто1,
		|	Субконто2,
		|	Субконто3
		|;
		|
		|/////////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет                КАК Счет,
		|	ХозрасчетныйОстатки.Субконто1           КАК Субконто1,
		|	ХозрасчетныйОстатки.Субконто2           КАК Субконто2,
		|	ХозрасчетныйОстатки.Субконто3           КАК Субконто3,
		|	ХозрасчетныйОстатки.СуммаОстатокДт      КАК СуммаОстатокДт,
		|	ХозрасчетныйОстатки.КоличествоОстатокДт КАК КоличествоОстатокДт
		|ПОМЕСТИТЬ
		|	ВТ_Остатки_Партия
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|		&Период,
		|		Счет НЕ В (
		|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СпецодеждаВЭксплуатацииВспомогательный),
		|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СпецоснасткаВЭксплуатацииВспомогательный)),
		|		,
		|		Организация = &Организация
		|			И (Подразделение = &Подразделение ИЛИ Подразделение ЕСТЬ NULL)
		|			И Субконто2 ССЫЛКА Документ.ПартияМатериаловВЭксплуатации
		|	) КАК ХозрасчетныйОстатки
		|ИНДЕКСИРОВАТЬ ПО
		|	Субконто1,
		|	Субконто2,
		|	Субконто3
		|;
		|
		|/////////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ОстаткиМЦ_Передача.Субконто1                                                              КАК Номенклатура,
		|	ВТ_ОстаткиМЦ_Передача.Субконто2                                                              КАК ПартияМатериаловВЭксплуатации,
		|	ВТ_ОстаткиМЦ_Передача.Субконто3                                                              КАК Физлицо,
		|	ЕСТЬNULL(ВТ_Остатки_Передача.КоличествоОстатокДт, ВТ_ОстаткиМЦ_Передача.КоличествоОстатокДт) КАК Количество,
		|	ВЫБОР КОГДА ЕСТЬNULL(ВТ_Остатки_Передача.КоличествоОстатокДт, 0) = 0 ТОГДА
		|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СпецодеждаВЭксплуатацииВспомогательный)
		|	ИНАЧЕ
		|		ВТ_Остатки_Передача.Счет
		|	КОНЕЦ                                                                                        КАК СчетПередачи
		|ИЗ
		|	ВТ_ОстаткиМЦ_Передача
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВТ_Остатки_Передача
		|	ПО
		|		ВТ_ОстаткиМЦ_Передача.Субконто1 = ВТ_Остатки_Передача.Субконто1
		|		И ВТ_ОстаткиМЦ_Передача.Субконто2 = ВТ_Остатки_Передача.Субконто2
		|		И ВТ_ОстаткиМЦ_Передача.Субконто3 = ВТ_Остатки_Передача.Субконто3
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|	Документ.ПередачаМатериаловВЭксплуатацию.Спецодежда КАК ПередачаМатериаловВЭксплуатациюСпецодежда
		|	ПО
		|		ВТ_ОстаткиМЦ_Передача.Субконто1 = ПередачаМатериаловВЭксплуатациюСпецодежда.Номенклатура
		|		И ВТ_ОстаткиМЦ_Передача.Субконто2 = ПередачаМатериаловВЭксплуатациюСпецодежда.Ссылка
		|		И ВТ_ОстаткиМЦ_Передача.Субконто3 = ПередачаМатериаловВЭксплуатациюСпецодежда.ФизЛицо
		|ГДЕ
		|	// Включать забалансовые
		|	((&ВключатьЗабалансовые = ЛОЖЬ
		|		И (ЕСТЬNULL(ВТ_Остатки_Передача.КоличествоОстатокДт, 0) > 0) И (ЕСТЬNULL(ВТ_Остатки_Передача.СуммаОстатокДт, 0) > 0))
		|	ИЛИ (&ВключатьЗабалансовые))
		|
		|	И
		|	// С истекшим сроком хранения
		|	((&СИстекшимСрокомПолезногоИспользования
		|		И ДОБАВИТЬКДАТЕ(ВТ_ОстаткиМЦ_Передача.Субконто2.Дата, МЕСЯЦ, ПередачаМатериаловВЭксплуатациюСпецодежда.НазначениеИспользования.СрокПолезногоИспользования) < &Дата)
		|	ИЛИ (&СИстекшимСрокомПолезногоИспользования = ЛОЖЬ))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ОстаткиМЦ_Партия.Субконто1,
		|	ВТ_ОстаткиМЦ_Партия.Субконто2,
		|	ВТ_ОстаткиМЦ_Партия.Субконто3,
		|	ЕСТЬNULL(ВТ_Остатки_Партия.КоличествоОстатокДт, ВТ_ОстаткиМЦ_Партия.КоличествоОстатокДт),
		|	ВЫБОР КОГДА ЕСТЬNULL(ВТ_Остатки_Партия.КоличествоОстатокДт, 0) = 0 ТОГДА
		|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СпецодеждаВЭксплуатацииВспомогательный)
		|	ИНАЧЕ
		|		ВТ_Остатки_Партия.Счет
		|	КОНЕЦ
		|ИЗ
		|	ВТ_ОстаткиМЦ_Партия
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВТ_Остатки_Партия
		|	ПО
		|		ВТ_ОстаткиМЦ_Партия.Субконто1 = ВТ_Остатки_Партия.Субконто1
		|		И ВТ_ОстаткиМЦ_Партия.Субконто2 = ВТ_Остатки_Партия.Субконто2
		|		И ВТ_ОстаткиМЦ_Партия.Субконто3 = ВТ_Остатки_Партия.Субконто3
		|ГДЕ
		|	// Включать забалансовые
		|	((&ВключатьЗабалансовые = ЛОЖЬ
		|		И (ЕСТЬNULL(ВТ_Остатки_Партия.КоличествоОстатокДт, 0) > 0) И (ЕСТЬNULL(ВТ_Остатки_Партия.СуммаОстатокДт, 0) > 0))
		|	ИЛИ (&ВключатьЗабалансовые))
		|
		|	И
		|	// С истекшим сроком хранения
		|	((&СИстекшимСрокомПолезногоИспользования
		|		И ДОБАВИТЬКДАТЕ(ВТ_ОстаткиМЦ_Партия.Субконто2.Дата, МЕСЯЦ, ВТ_ОстаткиМЦ_Партия.Субконто2.НазначениеИспользования.СрокПолезногоИспользования) < &Дата)
		|	ИЛИ (&СИстекшимСрокомПолезногоИспользования = ЛОЖЬ))
		|";
	
	ОстаткиМатериалов 			= Запрос.Выполнить().Выгрузить();
	ТабличнаяЧастьСпецОдежда	= Объект.Спецодежда.Выгрузить();
	ЗаполненнаяСпецОдежда		= ТабличнаяЧастьСпецОдежда.Скопировать();
	
	ЗаполненнаяСпецОдежда.Очистить();
	
	Для каждого СтрокаСписания из ТабличнаяЧастьСпецОдежда Цикл
		
		СтруктураОтбора		= Новый Структура("Номенклатура, Физлицо", СтрокаСписания.Номенклатура, СтрокаСписания.Физлицо);
		МассивПартий		= ОстаткиМатериалов.НайтиСтроки(СтруктураОтбора);
		КоличествоПартий	= МассивПартий.Количество();
		
		Если КоличествоПартий < 1 Тогда
			
			НоваяСтрока	= ЗаполненнаяСпецОдежда.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСписания);
			
			//См. ниже
			НоваяСтрока.СчетПередачи					= ПланыСчетов.Хозрасчетный.СпецодеждаВЭксплуатации;
			Если ТипЗнч(Объект) = Тип("ДокументОбъект.ВозвратМатериаловИзЭксплуатации") Тогда
				
				СчетаУчета 				= БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, СтрокаСписания.Номенклатура, Объект.Склад);
				НоваяСтрока.СчетУчета	= СчетаУчета.СчетУчета;
					
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		КоличествоТребуетсяСписать	= СтрокаСписания.Количество;
		НомерПартииВМассиве			= 0;
		
		Пока КоличествоТребуетсяСписать > 0 
			И НомерПартииВМассиве <= (КоличествоПартий - 1) Цикл
			
			Партия = МассивПартий[НомерПартииВМассиве];
			
			НоваяСтрока									= ЗаполненнаяСпецОдежда.Добавить();
			НоваяСтрока.Номенклатура					= СтрокаСписания.Номенклатура;
			НоваяСтрока.ПартияМатериаловВЭксплуатации 	= Партия.ПартияМатериаловВЭксплуатации;
			НоваяСтрока.Физлицо							= СтрокаСписания.Физлицо;
			
			//Спец. одежда всегда 10.11.1. Смотреть на "СчетаУчета.СчетПередачи" не нужно.
			НоваяСтрока.СчетПередачи					= ПланыСчетов.Хозрасчетный.СпецодеждаВЭксплуатации;
			
			Если ТипЗнч(Объект) = Тип("ДокументОбъект.ВозвратМатериаловИзЭксплуатации") Тогда
				
				СчетаУчета 				= БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, СтрокаСписания.Номенклатура, Объект.Склад);
				НоваяСтрока.СчетУчета	= СчетаУчета.СчетУчета;
					
			КонецЕсли;
			
			Если Партия.Количество < КоличествоТребуетсяСписать Тогда
				
				НоваяСтрока.Количество	= Партия.Количество;
				Партия.Количество 		= 0;
				
			Иначе
				
				НоваяСтрока.Количество	= КоличествоТребуетсяСписать;
				Партия.Количество 		= Партия.Количество - КоличествоТребуетсяСписать;
				
			КонецЕсли;
			
			КоличествоТребуетсяСписать	= КоличествоТребуетсяСписать - НоваяСтрока.Количество;
			НомерПартииВМассиве 		= НомерПартииВМассиве + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Объект.Спецодежда.Очистить();
	Объект.Спецодежда.Загрузить(ЗаполненнаяСпецОдежда);

КонецПроцедуры

Процедура ЗаполнитьСодержаниеТабличнойЧастиУслуги(Объект) Экспорт

	// Алгоритм предназначен для заполнения реквизит Содержание в строках ТЧ Услуги документа
	// Вызывается из обработчика "После загрузки" ПКО документа
	Для каждого ТекСтрока Из Объект.Услуги Цикл	
		
		//ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(ТекСтрока, Объект);
		Если ЗначениеЗаполнено(ТекСтрока.Номенклатура) Тогда
			
			Содержание = ТекСтрока.Номенклатура.НаименованиеПолное;
			
		КонецЕсли;
		
		ТекСтрока.Содержание = ?(ЗначениеЗаполнено(Содержание), Содержание, ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТекСтрока.Номенклатура, "Наименование"));
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьСуммуДокументаПоУслугам(СуммаДокумента, Объект) Экспорт

	// Алгоритм предназначен для подсчета суммы документа по табличной части Услуги 
	// и записи ее в соответствующий реквизит шапки для показа в журналах
	// Вызывается из обработчика "после загрузки" ПКО документа
	СуммаДокумента = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(Объект, "Услуги");

КонецПроцедуры

Процедура ЗаполнитьСчетаУчетаВозвратнойТары(Объект) Экспорт

	Для Каждого СтрокаТаблицы Из Объект.ВозвратнаяТара Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
			Продолжить;
		КонецЕсли; 
		
		СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(	Объект.Организация,
																						СтрокаТаблицы.Номенклатура,
																						Объект.Склад);
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
			СтрокаТаблицы.СчетУчета = СчетаУчета.СчетУчета;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьСчетаУчетаНоменклатуры(Объект, ТабличнаяЧасть) Экспорт

	// Параметры:
	// - Объект
	// - ТабличнаяЧасть
	
	Для Каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
	
		СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, СтрокаТаблицы.Номенклатура);
	
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
			СтрокаТаблицы.СчетУчета  = СчетаУчета.СчетПередачи;
		КонецЕсли;
	
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетДоходов) Тогда
			СтрокаТаблицы.СчетДоходов  = СчетаУчета.СчетДоходов;
		КонецЕсли;
	
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетРасходов) Тогда
			СтрокаТаблицы.СчетРасходов = СчетаУчета.СчетРасходов;
		КонецЕсли;
	
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНДСПоРеализации) Тогда
			СтрокаТаблицы.СчетУчетаНДСПоРеализации = СчетаУчета.СчетУчетаНДСПродажи;
		КонецЕсли;
	
		Если СтрокаТаблицы.СчетДоходов.ВидыСубконто.Количество() > 0 Тогда
			СтрокаТаблицы.Субконто = Новый(СтрокаТаблицы.СчетДоходов.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0]);
			Если ТипЗнч(СтрокаТаблицы.Субконто) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
				СтрокаТаблицы.Субконто = СтрокаТаблицы.Номенклатура.НоменклатурнаяГруппа;
			КонецЕсли;
		Иначе
			СтрокаТаблицы.Субконто = Неопределено;
		КонецЕсли;
			
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьСчетаУчетаНоменклатурыПродажа(Объект, ПараметрыОбъекта, ТабличнаяЧасть, ЭтоУслуги, ЕстьКомиссия) Экспорт

	
	// Параметры:
	// - Объект
	// - ПараметрыОбъекта
	// - ТабличнаяЧасть
	// - ЭтоУслуги
	// - ЕстьКомиссия
	
	Для Каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
		
		Склад = Неопределено;
		Если Объект.Метаданные().Реквизиты.Найти("Склад") <> Неопределено Тогда
			Склад = Объект.Склад;
		КонецЕсли;
		
		СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(	Объект.Организация,
																						СтрокаТаблицы.Номенклатура,
																						Склад);
																		
		Если Не ЭтоУслуги И Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
			СтрокаТаблицы.СчетУчета = СчетаУчета.СчетУчета;
			Если ЕстьКомиссия Тогда
				СтрокаТаблицы.ПереданныеСчетУчета = СчетаУчета.СчетПередачи;
			КонецЕсли;
		КонецЕсли;
	
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетДоходов) Тогда
			СтрокаТаблицы.СчетДоходов = СчетаУчета.СчетДоходов;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетРасходов) Тогда
			СтрокаТаблицы.СчетРасходов = СчетаУчета.СчетРасходов;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНДСПоРеализации) Тогда
			СтрокаТаблицы.СчетУчетаНДСПоРеализации = СчетаУчета.СчетУчетаНДСПродажи;
		КонецЕсли;
	
		Если СтрокаТаблицы.СчетДоходов.ВидыСубконто.Количество() > 0 Тогда
			СтрокаТаблицы.Субконто = Новый(СтрокаТаблицы.СчетДоходов.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0]);
			Если ТипЗнч(СтрокаТаблицы.Субконто) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
				СтрокаТаблицы.Субконто = СтрокаТаблицы.Номенклатура.НоменклатурнаяГруппа;
			КонецЕсли;
		Иначе
			СтрокаТаблицы.Субконто = Неопределено;
		КонецЕсли;
			
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьСчетаУчетаРасчетов(Объект, ОбъектНайден) Экспорт

	// Для впервые загружаемых объектов
	Если НЕ ОбъектНайден Тогда
		
	 	// Заполним счета учета расчетов	
		Объект.ЗаполнитьСчетаУчетаРасчетов();
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСчетУчетаКассы(Объект, ПараметрыОбъекта) Экспорт

	
	// Параметры:
	// - Объект
	// - ПараметрыОбъекта
	
	Если Не ЗначениеЗаполнено(Объект.СчетКасса) Тогда
	
		Если Не ЗначениеЗаполнено(Объект.ВалютаДокумента)
			ИЛИ Объект.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
			
			Объект.СчетКасса = ПланыСчетов.Хозрасчетный.КассаОрганизации;
			
		Иначе
			
			Объект.СчетКасса = ПланыСчетов.Хозрасчетный.КассаОрганизацииВал;
			
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры

Процедура ОбработатьАвансовыйОтчет(Объект, ПараметрыОбъекта) Экспорт

	// Параметры:
	// - Объект
	// - ПараметрыОбъекта
	
	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		
			СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(	Объект.Организация,
																							СтрокаТаблицы.Номенклатура,
																							Объект.Склад);
																							
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
				СтрокаТаблицы.СчетУчета = СчетаУчета.СчетУчета;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНДС) Тогда
				СтрокаТаблицы.СчетУчетаНДС = СчетаУчета.СчетУчетаНДС;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СчетаУчета.СпособУчетаНДС) Тогда
				СтрокаТаблицы.СпособУчетаНДС = ?(СтрокаТаблицы.ПредъявленСФ,
					СчетаУчета.СпособУчетаНДС, Перечисления.СпособыУчетаНДС.Списывается);
			ИначеЕсли Не СтрокаТаблицы.ПредъявленСФ Тогда 
				СтрокаТаблицы.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.Списывается;	
			ИначеЕсли СтрокаТаблицы.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.Списывается Тогда
				СтрокаТаблицы.СпособУчетаНДС = Неопределено;	
			КонецЕсли;
			
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из Объект.Прочее Цикл
		
		СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(	Объект.Организация,
																						СтрокаТаблицы.Номенклатура,
																						Объект.Склад);
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетЗатрат) Тогда
			СтрокаТаблицы.СчетЗатрат = СчетаУчета.СчетУчета;
			СтрокаТаблицы.Субконто1 = СчетаУчета.Субконто1;
			СтрокаТаблицы.Субконто2 = СчетаУчета.Субконто2;
			СтрокаТаблицы.Субконто3 = СчетаУчета.Субконто3;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетЗатратНУ) Тогда
			СтрокаТаблицы.СчетЗатратНУ = СчетаУчета.СчетУчета;
			СтрокаТаблицы.СубконтоНУ1 = СчетаУчета.Субконто1;
			СтрокаТаблицы.СубконтоНУ2 = СчетаУчета.Субконто2;
			СтрокаТаблицы.СубконтоНУ3 = СчетаУчета.Субконто3;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНДС) 
			И СтрокаТаблицы.СтавкаНДС <> Перечисления.СтавкиНДС.БезНДС Тогда
			СтрокаТаблицы.СчетУчетаНДС = СчетаУчета.СчетУчетаНДС;
		КонецЕсли;
		
		Для каждого СтрокаВидыСубконто Из СчетаУчета.СчетУчета.ВидыСубконто Цикл
			
			ОписаниеТиповВидаСубконто = СтрокаВидыСубконто.ВидСубконто.ТипЗначения;
			Если ОписаниеТиповВидаСубконто.СодержитТип(Тип("СправочникСсылка.СтатьиЗатрат")) Тогда
				СтрокаТаблицы["Субконто" + СтрокаВидыСубконто.НомерСтроки] = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатьиЗатрат.ПрочиеЗатраты");
			ИначеЕсли ОписаниеТиповВидаСубконто.СодержитТип(Тип("СправочникСсылка.ПрочиеДоходыИРасходы")) Тогда
				СтрокаТаблицы["Субконто" + СтрокаВидыСубконто.НомерСтроки] = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.ПрочиеВнереализационныеДоходыРасходы");
			ИначеЕсли ОписаниеТиповВидаСубконто.СодержитТип(Тип("СправочникСсылка.НоменклатурныеГруппы")) Тогда
				СтрокаТаблицы["Субконто" + СтрокаВидыСубконто.НомерСтроки] = ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтрокаТаблицы.Номенклатура, "НоменклатурнаяГруппа");
			КонецЕсли;
			
			СтрокаТаблицы["СубконтоНУ" + СтрокаВидыСубконто.НомерСтроки] = СтрокаТаблицы["Субконто" + СтрокаВидыСубконто.НомерСтроки];
		КонецЦикла;
		
		Если ЗначениеЗаполнено(СчетаУчета.СпособУчетаНДС) Тогда
			СтрокаТаблицы.СпособУчетаНДС = ?(СтрокаТаблицы.ПредъявленСФ,
				СчетаУчета.СпособУчетаНДС, Перечисления.СпособыУчетаНДС.Списывается);
		ИначеЕсли Не СтрокаТаблицы.ПредъявленСФ Тогда 
			СтрокаТаблицы.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.Списывается;	
		ИначеЕсли СтрокаТаблицы.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.Списывается Тогда
			СтрокаТаблицы.СпособУчетаНДС = Неопределено;	
		КонецЕсли;
		
	КонецЦикла;	
	
	ПараметрыТЧ = Неопределено;
	Если ПараметрыОбъекта <> Неопределено Тогда
		
		ПараметрыТЧ = ПараметрыОбъекта.Получить("ПрочееТабличнаяЧасть");
		Если ПараметрыТЧ <> Неопределено 
			И ПараметрыТЧ.Колонки.Найти("ПроизводственныйРасход") <> Неопределено Тогда
			
			Для каждого СтрокаТаблицы Из Объект.Прочее Цикл	
				
				Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетЗатрат) Тогда
					Если ПараметрыТЧ[СтрокаТаблицы.НомерСтроки - 1].ПроизводственныйРасход Тогда
						СтрокаТаблицы.СчетЗатрат = ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы;
					Иначе
						СтрокаТаблицы.СчетЗатрат = ПланыСчетов.Хозрасчетный.ИздержкиОбращения;
					КонецЕсли;
					СтрокаТаблицы.Субконто1 = ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтрокаТаблицы.Номенклатура, "СтатьяЗатрат");
					
					СтрокаТаблицы.СчетЗатратНУ = СтрокаТаблицы.СчетЗатрат;
					СтрокаТаблицы.СубконтоНУ1 = СтрокаТаблицы.Субконто1;
					
					Если Не ЗначениеЗаполнено(СтрокаТаблицы.Субконто1) Тогда
						СтрокаТаблицы.Субконто1 = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатьиЗатрат.ПрочиеЗатраты");
						СтрокаТаблицы.СубконтоНУ1 = СтрокаТаблицы.Субконто1;
					КонецЕсли;
					
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНДС) 
					И СтрокаТаблицы.СтавкаНДС <> Перечисления.СтавкиНДС.БезНДС Тогда
					
					СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(	Объект.Организация,
					СтрокаТаблицы.Номенклатура,
					Объект.Склад);
					СтрокаТаблицы.СчетУчетаНДС = СчетаУчета.СчетУчетаНДС;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
		
	Для Каждого СтрокаТаблицы Из Объект.ОплатаПоставщикам Цикл
		
		РеквизитыДоговораКонтрагента = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(СтрокаТаблицы.ДоговорКонтрагента, "Владелец,ВалютаВзаиморасчетов");
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) И Не ЗначениеЗаполнено(СтрокаТаблицы.Контрагент) Тогда
			СтрокаТаблицы.Контрагент = РеквизитыДоговораКонтрагента.Владелец;
		КонецЕсли;
		
		СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация,
			СтрокаТаблицы.Контрагент,
			СтрокаТаблицы.ДоговорКонтрагента);
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаРасчетовПоАвансам) Тогда
			СтрокаТаблицы.СчетУчетаРасчетовПоАвансам   = СчетаУчета.СчетАвансов;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаРасчетовСКонтрагентом) Тогда
			Если СтрокаТаблицы.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
				СтрокаТаблицы.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовСКомитентом;
			Иначе
				СтрокаТаблицы.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Сделка) Тогда
			СтрокаТаблицы.Сделка = Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
	//Заполняем параметры, зависящие от режима налогообложения
	ЗаполнениеОтражениеНДСВСтоимости (Объект, ПараметрыОбъекта);
	
	ТабличнаяЧасть = Объект.Товары;
	ЗаполнениеОтражениеВУСН (Объект, ТабличнаяЧасть);
	
	ТабличнаяЧасть = Объект.Прочее;
	ЗаполнениеОтражениеВУСН (Объект, ТабличнаяЧасть);

КонецПроцедуры

Процедура ОбработатьАктОбОказанииПроизводственныхУслуг(Объект, ПараметрыОбъекта) Экспорт

	// Параметры:
	// - Объект
	// - ПараметрыОбъекта
	
	// Заполним счета учета затрат
	Если Не ЗначениеЗаполнено(Объект.СчетЗатрат) Тогда
		Объект.СчетЗатрат = ПланыСчетов.Хозрасчетный.ОсновноеПроизводство;
	КонецЕсли;
	
	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(	Объект.Организация,
																						Объект.Контрагент,
																						Объект.ДоговорКонтрагента);
	Если Не ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентом) Тогда
		Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
	КонецЕсли;
	
	Если Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически
		ИЛИ Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
		
		Если Не ЗначениеЗаполнено(Объект.СчетУчетаРасчетовПоАвансам) Тогда
			Объект.СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетАвансовПокупателя;
		КонецЕсли;
		
	Иначе
		Объект.СчетУчетаРасчетовПоАвансам = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	КонецЕсли;
	
	ТабличнаяЧасть = Объект.Услуги;
	ЭтоУслуги      = Истина;
	ЕстьКомиссия   = Ложь;
	ЗаполнитьСчетаУчетаНоменклатурыПродажа (Объект, ПараметрыОбъекта, ТабличнаяЧасть, ЭтоУслуги, ЕстьКомиссия);
	
	Для каждого СтрокаТаблицы Из Объект.Услуги Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СуммаПлановая) Тогда
			Ценообразование.ЗаполнитьПлановуюСебестоимость(СтрокаТаблицы, Объект.Дата);
			ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьПлановуюСумму(СтрокаТаблицы, 1);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СуммаПлановая) Тогда
			СтрокаТаблицы.ПлановаяСтоимость = СтрокаТаблицы.Цена;
			СтрокаТаблицы.СуммаПлановая = СтрокаТаблицы.Сумма;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Спецификация) Тогда
			СтрокаТаблицы.Спецификация = ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтрокаТаблицы.Номенклатура, "ОсновнаяСпецификацияНоменклатуры");
		КонецЕсли;
		
	КонецЦикла;
	
	//Заполняем параметры, зависящие от режима налогообложения
	ЗаполнениеОтражениеНДСВСтоимости (Объект, ПараметрыОбъекта);

КонецПроцедуры

Процедура ОбработатьВозвратТоваровОтПокупателя(Объект, ПараметрыОбъекта) Экспорт

	// Параметры:
	// - Объект
	// - ПараметрыОбъекта
	
	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(	Объект.Организация,
																						Объект.Контрагент,
																						Объект.ДоговорКонтрагента);
	Если Не ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентом) Тогда
		Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.СчетУчетаРасчетовПоАвансам) Тогда	
		Объект.СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетАвансовПокупателя;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(Объект.СчетУчетаРасчетовПоТаре) Тогда	
		Объект.СчетУчетаРасчетовПоТаре = СчетаУчета.СчетУчетаТарыПокупателя;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.СчетУчетаНДС) Тогда
		Объект.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ;
	КонецЕсли;
	
	Если ПараметрыОбъекта <> Неопределено Тогда
		
		ПараметрыТЧ = ПараметрыОбъекта.Получить("ТоварыТабличнаяЧасть");
		Если ПараметрыТЧ <> Неопределено И ПараметрыТЧ.Колонки.Найти("ТоварНаКомиссии") <> Неопределено Тогда
			
			Для каждого СтрокаТаблицы Из Объект.Товары Цикл	
				
				Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета)
					И ПараметрыТЧ[СтрокаТаблицы.НомерСтроки - 1].ТоварНаКомиссии Тогда
					СтрокаТаблицы.СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыНаСкладе;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
			Продолжить;
		КонецЕсли; 
		
		СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(	Объект.Организация,
																						СтрокаТаблицы.Номенклатура,
																						Объект.Склад);
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
			СтрокаТаблицы.СчетУчета = СчетаУчета.СчетУчета;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ПереданныеСчетУчета) Тогда
			СтрокаТаблицы.ПереданныеСчетУчета = СчетаУчета.СчетПередачи;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетДоходов) Тогда
			СтрокаТаблицы.СчетДоходов = СчетаУчета.СчетДоходов;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетРасходов) Тогда
			СтрокаТаблицы.СчетРасходов = СчетаУчета.СчетРасходов;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНДСПоРеализации) Тогда
			СтрокаТаблицы.СчетУчетаНДСПоРеализации = СчетаУчета.СчетУчетаНДСПродажи;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.СчетДоходов) Тогда
			СвойстваСчетаДоходов = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетДоходов);
			Если СвойстваСчетаДоходов.КоличествоСубконто > 0 Тогда
				СтрокаТаблицы.Субконто = СвойстваСчетаДоходов.ВидСубконто1ТипЗначения.ПривестиЗначение(СтрокаТаблицы.Субконто);
				Если ТипЗнч(СтрокаТаблицы.Субконто) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
					СтрокаТаблицы.Субконто = ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтрокаТаблицы.Номенклатура, "НоменклатурнаяГруппа");
				КонецЕсли;
			Иначе
				СтрокаТаблицы.Субконто = Неопределено;
			КонецЕсли;
		Иначе
			СтрокаТаблицы.Субконто = Неопределено;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаУчета.СпособУчетаНДС) Тогда
			СтрокаТаблицы.СпособУчетаНДС = СчетаУчета.СпособУчетаНДС;
		КонецЕсли;
	
	КонецЦикла;
	
	ТабличнаяЧасть = Объект.Товары;
	ЗаполнениеОтражениеВУСН (Объект, ТабличнаяЧасть);
	
	ЗаполнитьСчетаУчетаВозвратнойТары (Объект);

КонецПроцедуры

Процедура ОбработатьВозвратТоваровПоставщику(Объект, ПараметрыОбъекта) Экспорт

	// Параметры:
	// - Объект
	// - ПараметрыОбъекта
	
	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(	Объект.Организация,
																						Объект.Контрагент,
																						Объект.ДоговорКонтрагента);
	
	Если Не ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентом) Тогда
		Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.СчетУчетаРасчетовПоПретензиям) Тогда
		Объект.СчетУчетаРасчетовПоПретензиям = СчетаУчета.СчетРасчетовПоПретензиям;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.СчетУчетаРасчетовПоТаре) Тогда
		Объект.СчетУчетаРасчетовПоТаре = СчетаУчета.СчетУчетаТары;
	КонецЕсли;
	
	ТоварыНаКомиссии = Неопределено;
	
	Если ПараметрыОбъекта <> Неопределено Тогда
		ПараметрыТЧ = ПараметрыОбъекта.Получить("ТоварыТабличнаяЧасть");
		Если ПараметрыТЧ <> Неопределено 
			И ПараметрыТЧ.Колонки.Найти("ТоварНаКомиссии") <> Неопределено Тогда
			
			ТоварыНаКомиссии = ПараметрыТЧ;
		КонецЕсли;
	КонецЕсли;
		
	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
			Продолжить;
		КонецЕсли;
		
		СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(	Объект.Организация,
																						СтрокаТаблицы.Номенклатура,
																						Объект.Склад);
		
		ЭтоКомиссия = Ложь;
		Если Объект.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия Тогда
			
			Если ТоварыНаКомиссии <> Неопределено
				И ТоварыНаКомиссии[СтрокаТаблицы.НомерСтроки - 1].ТоварНаКомиссии Тогда
				
				ЭтоКомиссия = Истина;
			КонецЕсли;
			
			Если СчетаУчета.СчетУчетаЯвляетсяЗабалансовым = ЭтоКомиссия Тогда
				СтрокаТаблицы.СчетУчета = СчетаУчета.СчетУчета;
			КонецЕсли;
			
			Если ЭтоКомиссия И НЕ СчетаУчета.СчетУчетаЯвляетсяЗабалансовым Тогда
				СтрокаТаблицы.СчетУчета = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
			Иначе
				СтрокаТаблицы.СчетУчета = СчетаУчета.СчетУчета;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
				СтрокаТаблицы.СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыНаСкладе;
			КонецЕсли;
			
			СтрокаТаблицы.СчетУчетаНДС = СчетаУчета.СчетУчетаНДС;
			
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки Тогда
			
			СтрокаТаблицы.СчетУчета = СчетаУчета.СчетУчетаДавСырья;
			
		Иначе
			
			Если НЕ СчетаУчета.СчетУчетаЯвляетсяЗабалансовым Тогда
				СтрокаТаблицы.СчетУчета = СчетаУчета.СчетУчета;
			КонецЕсли;
			
			СтрокаТаблицы.СчетУчетаНДС = СчетаУчета.СчетУчетаНДС;
			
		КонецЕсли;
		
	КонецЦикла;
	
	//Заполняем параметры, зависящие от режима налогообложения
	ЗаполнениеОтражениеНДСВСтоимости (Объект, ПараметрыОбъекта);
	
	ЗаполнитьСчетаУчетаВозвратнойТары (Объект);

КонецПроцедуры

Процедура ОбработатьДоговорКонтрагента(Объект) Экспорт

	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер")
		ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.РасходныйКассовыйОрдер")
		ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.ПоступлениеНаРасчетныйСчет")
		ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.СписаниеСРасчетногоСчета") Тогда
		
		Для каждого СтрокаТабличнойЧасти Из Объект.РасшифровкаПлатежа Цикл
			
			ДоговорКонтрагента = СтрокаТабличнойЧасти.ДоговорКонтрагента;
			Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
				
				Договор = ДоговорКонтрагента.ПолучитьОбъект();
				Если Договор <> Неопределено И НЕ ЗначениеЗаполнено(Договор.Код) Тогда
					Договор.ОбменДанными.Загрузка = Истина;
					Договор.ДополнительныеСвойства.Вставить("РегистрироватьОбъектНаУзлеОтправителе", Ложь);
					Договор.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
					Договор.УстановитьНовыйКод();
					Договор.Записать();
					Прервать;
				КонецЕсли;
				
			КонецЕсли;		
		КонецЦикла;
	
	Иначе
	
		ДоговорКонтрагента = Объект.ДоговорКонтрагента;
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			
			Договор = ДоговорКонтрагента.ПолучитьОбъект();
			Если Договор <> Неопределено И НЕ ЗначениеЗаполнено(Договор.Код) Тогда
				Договор.ОбменДанными.Загрузка = Истина;
				Договор.ДополнительныеСвойства.Вставить("РегистрироватьОбъектНаУзлеОтправителе", Ложь);
				Договор.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
				Договор.УстановитьНовыйКод();
				Договор.Записать();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ОбработатьЗаполнениеДокументаПослеЗагрузки(Объект, ПараметрыОбъекта) Экспорт

	// Параметры:
	// - Объект
	// - ИмяПКО
	// - ПараметрыОбъекта
	
	Попытка
		Если ТипЗнч(Объект) = Тип("ДокументОбъект.АвансовыйОтчет") Тогда
	
			ОбработатьАвансовыйОтчет (Объект, ПараметрыОбъекта);
						
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
	
			ОбработатьПоступлениеТоваров (Объект, ПараметрыОбъекта);
			
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПоступлениеДопРасходов") Тогда
	
			ОбработатьПоступлениеДопРасходов (Объект, ПараметрыОбъекта);
			
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ВозвратТоваровПоставщику") Тогда
			
			ОбработатьВозвратТоваровПоставщику (Объект, ПараметрыОбъекта);
			
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
			
			ОбработатьРеализацияТоваров (Объект, ПараметрыОбъекта);
			
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.АктОбОказанииПроизводственныхУслуг") Тогда
			
			ОбработатьАктОбОказанииПроизводственныхУслуг (Объект, ПараметрыОбъекта);
			
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ТребованиеНакладная") Тогда
			
			ОбработатьТребованиеНакладная (Объект, ПараметрыОбъекта);
			
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ОтчетПроизводстваЗаСмену") Тогда
			
			ОбработатьОтчетПроизводстваЗаСмену (Объект, ПараметрыОбъекта);
			
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ОтчетКомиссионераОПродажах") Тогда
			
			ОбработатьОтчетКомиссионераОПродажах (Объект, ПараметрыОбъекта);
			
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ОтчетКомитентуОПродажах") Тогда
			
			ОбработатьОтчетКомитентуОПродажах (Объект, ПараметрыОбъекта);
			
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ВозвратТоваровОтПокупателя") Тогда
			
			ОбработатьВозвратТоваровОтПокупателя (Объект, ПараметрыОбъекта);
			
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПоступлениеИзПереработки") Тогда
			
			ОбработатьПоступлениеИзПереработки (Объект, ПараметрыОбъекта);
			
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.РеализацияУслугПоПереработке") Тогда
			
			ОбработатьРеализацияУслугПоПереработке (Объект, ПараметрыОбъекта);
			                                                                      
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПередачаТоваров") Тогда
			
			ОбработатьПередачаТоваров (Объект, ПараметрыОбъекта);
			
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ОприходованиеТоваров") Тогда
			
			ОбработатьОприходованиеТоваров (Объект, ПараметрыОбъекта);
			                                                                                         
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.СписаниеТоваров") Тогда
			
			ОбработатьСписаниеТоваров (Объект, ПараметрыОбъекта);
			
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ОтчетОРозничныхПродажах") Тогда
			
			ОбработатьОтчетОРозничныхПродажах (Объект, ПараметрыОбъекта);
	
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.КорректировкаДолга") Тогда
			
			ОбработатьКорректировкаДолга (Объект, ПараметрыОбъекта);
			
		КонецЕсли;
		
	Исключение
		ЗарегистрироватьПредупреждение(НСтр("ru = 'Ошибка при выполнении отложенного заполнения. Правила конвертации: '")+Объект);
	КонецПопытки
	
	

КонецПроцедуры

Процедура ОбработатьКорректировкаДолга(Объект, ПараметрыОбъекта) Экспорт

	// Параметры:
	// - Объект
	// - ПараметрыОбъекта
	
	Если Объект.ДебиторскаяЗадолженность.Количество()>0 Тогда
		
		ИмяТЧ = "ДебиторскаяЗадолженность";
		ОбработатьТабличнуюЧастьДокументКорректировкаДолга (Объект, ПараметрыОбъекта, ИмяТЧ);
		
	КонецЕсли;
	
	Если Объект.КредиторскаяЗадолженность.Количество()>0 Тогда
		
		ИмяТЧ = "КредиторскаяЗадолженность";
		ОбработатьТабличнуюЧастьДокументКорректировкаДолга (Объект, ПараметрыОбъекта, ИмяТЧ);
		
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
		
		Если Объект.ДебиторскаяЗадолженность.Количество() > 0
			И Объект.КредиторскаяЗадолженность.Количество() = 0
			И Не ЗначениеЗаполнено(Объект.СчетДт) Тогда
			
			Объект.СчетДт = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
			
		ИначеЕсли Объект.ДебиторскаяЗадолженность.Количество() = 0
			И Объект.КредиторскаяЗадолженность.Количество() > 0
			И Не ЗначениеЗаполнено(Объект.СчетКт) Тогда
			
			Объект.СчетКт = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
			
		КонецЕсли
		
	КонецЕсли;
	
	Если Объект.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
		Объект.СуммаДтЗадолженности = Объект.ДебиторскаяЗадолженность.Итог("Сумма");
		Объект.СуммаКтЗадолженности = Объект.КредиторскаяЗадолженность.Итог("Сумма");
	Иначе
		Объект.СуммаДтЗадолженности = Объект.ДебиторскаяЗадолженность.Итог("СуммаВзаиморасчетов");
		Объект.СуммаКтЗадолженности = Объект.КредиторскаяЗадолженность.Итог("СуммаВзаиморасчетов");
		
		Если Объект.ДебиторскаяЗадолженность.Количество() > 0
			И ЗначениеЗаполнено(Объект.ДебиторскаяЗадолженность[0].ДоговорКонтрагента) Тогда
			
			Объект.ВалютаДокумента = Объект.ДебиторскаяЗадолженность[0].ДоговорКонтрагента.ВалютаВзаиморасчетов;
			Объект.КурсДокумента	   = Объект.ДебиторскаяЗадолженность[0].КурсВзаиморасчетов;
			Объект.КратностьДокумента  = Объект.ДебиторскаяЗадолженность[0].КратностьВзаиморасчетов;
			
		ИначеЕсли Объект.КредиторскаяЗадолженность.Количество() > 0
			И ЗначениеЗаполнено(Объект.КредиторскаяЗадолженность[0].ДоговорКонтрагента) Тогда
			
			Объект.ВалютаДокумента = Объект.КредиторскаяЗадолженность[0].ДоговорКонтрагента.ВалютаВзаиморасчетов;
			Объект.КурсДокумента	   = Объект.КредиторскаяЗадолженность[0].КурсВзаиморасчетов;
			Объект.КратностьДокумента  = Объект.КредиторскаяЗадолженность[0].КратностьВзаиморасчетов;
			
		КонецЕсли;	
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.Прочее;
	КонецЕсли;

КонецПроцедуры

Процедура ОбработатьОприходованиеТоваров(Объект, ПараметрыОбъекта) Экспорт

	
	// Параметры:
	// - Объект
	// - ПараметрыОбъекта
	
	Если Не ЗначениеЗаполнено(Объект.СтатьяПрочихДоходовРасходов) Тогда
		Объект.СтатьяПрочихДоходовРасходов = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.ОприходованиеИзлишков");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.СтатьяПрочихДоходовРасходов) Тогда
		Объект.СтатьяПрочихДоходовРасходов = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.ПрочиеВнереализационныеДоходыРасходы");
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
			СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(	Объект.Организация,
																							СтрокаТаблицы.Номенклатура,
																							Объект.Склад);
			СтрокаТаблицы.СчетУчета = СчетаУчета.СчетУчета;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ОбработатьОтчетКомиссионераОПродажах(Объект, ПараметрыОбъекта) Экспорт

	// Параметры:
	// - Объект
	// - ПараметрыОбъекта
	
	Документы.ОтчетКомиссионераОПродажах.ЗаполнитьСчетаУчетаРасчетов(,Ложь,Объект);
	
	ТабличнаяЧасть = Объект.Товары;
	ЭтоУслуги      = Ложь;
	ЕстьКомиссия   = Ложь;
	ЗаполнитьСчетаУчетаНоменклатурыПродажа (Объект, ПараметрыОбъекта, ТабличнаяЧасть, ЭтоУслуги, ЕстьКомиссия);
	
	ТабличнаяЧасть = Объект.Услуги;
	ЭтоУслуги      = Истина;
	ЕстьКомиссия   = Ложь;
	ЗаполнитьСчетаУчетаНоменклатурыПродажа (Объект, ПараметрыОбъекта, ТабличнаяЧасть, ЭтоУслуги, ЕстьКомиссия);
	
	Если Не ЗначениеЗаполнено(Объект.СчетУчетаЗатрат) Тогда
		Объект.СчетУчетаЗатрат = ПланыСчетов.Хозрасчетный.ИздержкиОбращения;
		СчетУчета = Объект.СчетУчетаЗатрат;
		ПривестиСубконтоВСоответствиеСчетуУчета (Объект, СчетУчета);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Субконто1) Тогда
		Объект.Субконто1 = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатьиЗатрат.УслугиКомиссионеров");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Субконто1) Тогда
		Объект.Субконто1 = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатьиЗатрат.ПрочиеЗатраты");
	КонецЕсли;
	
	//Заполняем параметры, зависящие от режима налогообложения
	ЗаполнениеОтражениеНДСВСтоимости (Объект, ПараметрыОбъекта);

КонецПроцедуры

Процедура ОбработатьОтчетКомитентуОПродажах(Объект, ПараметрыОбъекта) Экспорт

	// Параметры:
	// - Объект
	// - ПараметрыОбъекта
	
	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(	Объект.Организация,
																						Объект.Контрагент,
																						Объект.ДоговорКонтрагента);
		
	Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентом) Тогда
		Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовПоАвансам) Тогда
		Если Объект.УдержатьВознаграждение Тогда
			Объект.СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетРасчетовСКомитентом;
		Иначе
			Объект.СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетАвансовПокупателя;
		КонецЕсли;
	КонецЕсли;
	
	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(	Объект.Организация,
																					Объект.УслугаПоВознаграждению);
	
	Если Не ЗначениеЗаполнено(Объект.СчетУчетаНДСПоРеализации) Тогда
		Объект.СчетУчетаНДСПоРеализации = СчетаУчета.СчетУчетаНДСПродажи;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.СчетДоходов) Тогда
		Объект.СчетДоходов = СчетаУчета.СчетДоходов;
	КонецЕсли;
	
	Если Объект.СчетДоходов.ВидыСубконто.Количество() > 0 Тогда
		Если Объект.СчетДоходов.ВидыСубконто[0].ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(Объект.Субконто)) Тогда
			//Не надо менять, значение подходит
		Иначе
			Объект.Субконто = Новый(Объект.СчетДоходов.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0])
		КонецЕсли;
	Иначе
		Объект.Субконто = Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Объект.Субконто) = Тип("СправочникСсылка.НоменклатурныеГруппы") 
	   И ЗначениеЗаполнено(Объект.УслугаПоВознаграждению) 
	   И ЗначениеЗаполнено(Объект.УслугаПоВознаграждению.НоменклатурнаяГруппа) Тогда
	
		Объект.Субконто = Объект.УслугаПоВознаграждению.НоменклатурнаяГруппа;
	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.УслугаПоВознаграждению) Тогда
		 Объект.УслугаПоВознаграждению = Параметры.УзелОбменаЗагрузкаДанных.УслугаПоВознаграждению;
	 КонецЕсли;

КонецПроцедуры

Процедура ОбработатьОтчетОРозничныхПродажах(Объект, ПараметрыОбъекта) Экспорт

	
	// Параметры:
	// - Объект
	// - ПараметрыОбъекта
	
	ЗаполнитьСчетУчетаКассы (Объект, ПараметрыОбъекта);
	
	Если ПараметрыОбъекта <> Неопределено Тогда
		
		ПараметрыТЧ = ПараметрыОбъекта.Получить("ТоварыТабличнаяЧасть");
		Если ПараметрыТЧ <> Неопределено И ПараметрыТЧ.Колонки.Найти("ТоварНаКомиссии") <> Неопределено Тогда
			
			Для каждого СтрокаТаблицы Из Объект.Товары Цикл
				
				Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета)
					И ПараметрыТЧ[СтрокаТаблицы.НомерСтроки - 1].ТоварНаКомиссии Тогда
					СтрокаТаблицы.СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыНаСкладе;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ТабличнаяЧасть = Объект.Товары;
	ЭтоУслуги      = Ложь;
	ЕстьКомиссия   = Ложь;
	
	ЗаполнитьСчетаУчетаНоменклатурыПродажа (Объект, ПараметрыОбъекта, ТабличнаяЧасть, ЭтоУслуги, ЕстьКомиссия);
	
	Для Каждого СтрокаТаблицы Из Объект.Оплата Цикл
		СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(	Объект.Организация,
																							СтрокаТаблицы.Контрагент,
																							СтрокаТаблицы.ДоговорКонтрагента);
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаРасчетов) Тогда
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.ВидОплаты.СчетУчетаРасчетов) Тогда
				СтрокаТаблицы.СчетУчетаРасчетов = СчетаУчета.СчетРасчетов;
			Иначе
				СтрокаТаблицы.СчетУчетаРасчетов = СтрокаТаблицы.ВидОплаты.СчетУчетаРасчетов;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ОбработатьОтчетПроизводстваЗаСмену(Объект, ПараметрыОбъекта) Экспорт

	// Параметры:
	// - Объект
	// - ПараметрыОбъекта
	
	// Заполним реквизиты шапки
	Если Не ЗначениеЗаполнено(Объект.СчетЗатрат) Тогда
		Объект.СчетЗатрат = ПланыСчетов.Хозрасчетный.ОсновноеПроизводство;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.НДСвСтоимостиТоваров) Тогда
		Объект.НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
	КонецЕсли;
	
	Объект.ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат = Истина;
	
	// Заполним необходимые реквизиты в табличной части Продукция
	Для каждого ТекСтрока Из Объект.Продукция Цикл
		
		ПлановаяСтоимость = ТекСтрока.ПлановаяСтоимость;
		СуммаПлановая = ТекСтрока.СуммаПлановая;
		Ценообразование.ЗаполнитьПлановуюСебестоимость(ТекСтрока, Объект.Дата);
		ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьПлановуюСумму(ТекСтрока);
		Если ТекСтрока.СуммаПлановая = 0 Тогда
			ТекСтрока.ПлановаяСтоимость = ПлановаяСтоимость;
			ТекСтрока.СуммаПлановая = СуммаПлановая;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекСтрока.Счет) Тогда
			СчетаУчета						= БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, ТекСтрока.Номенклатура, Объект.Склад);
			ТекСтрока.Счет					= СчетаУчета.СчетУчета;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекСтрока.НоменклатурнаяГруппа) Тогда
			ТекСтрока.НоменклатурнаяГруппа	= ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТекСтрока.Номенклатура, "НоменклатурнаяГруппа");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекСтрока.Спецификация) Тогда
			ТекСтрока.Спецификация 			= ТекСтрока.Номенклатура.ОсновнаяСпецификацияНоменклатуры;
		КонецЕсли;
		
	КонецЦикла;
	
	// Заполним необходимые реквизиты в табличной части Услуги
	Для каждого ТекСтрока Из Объект.Услуги Цикл
		
		ПлановаяСтоимость = ТекСтрока.ПлановаяСтоимость;
		СуммаПлановая = ТекСтрока.СуммаПлановая;
		Ценообразование.ЗаполнитьПлановуюСебестоимость(ТекСтрока, Объект.Дата);
		ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьПлановуюСумму(ТекСтрока);
		Если ТекСтрока.СуммаПлановая = 0 Тогда
			ТекСтрока.ПлановаяСтоимость = ПлановаяСтоимость;
			ТекСтрока.СуммаПлановая = СуммаПлановая;
		КонецЕсли;
		
		СчетаУчета 						= БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, ТекСтрока.Номенклатура, Объект.Склад);
		ТекСтрока.Счет 					= СчетаУчета.СчетУчета;
		ТекСтрока.Субконто1 			= СчетаУчета.Субконто1;
		ТекСтрока.Субконто2 			= СчетаУчета.Субконто2;
		ТекСтрока.Субконто3 			= СчетаУчета.Субконто3;
		
		Если Не ЗначениеЗаполнено(ТекСтрока.НоменклатурнаяГруппа) Тогда
			ТекСтрока.НоменклатурнаяГруппа 	= ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТекСтрока.Номенклатура, "НоменклатурнаяГруппа");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекСтрока.Спецификация) Тогда
			ТекСтрока.Спецификация 			= ТекСтрока.Номенклатура.ОсновнаяСпецификацияНоменклатуры;
		КонецЕсли;
		
	КонецЦикла;
	
	// Заполним необходимые реквизиты в табличной части Материалы
	Для каждого ТекСтрока Из Объект.Материалы Цикл
		
		СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, ТекСтрока.Номенклатура, Объект.Склад);
		
		Если Не ЗначениеЗаполнено(ТекСтрока.Счет) Тогда
			ТекСтрока.Счет					= СчетаУчета.СчетУчета;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекСтрока.СтатьяЗатрат) Тогда
			ТекСтрока.ОтражениеВУСН 		= Перечисления.ОтражениеВУСН.Принимаются;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекСтрока.СтатьяЗатрат) Тогда
			ТекСтрока.СтатьяЗатрат 			= ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТекСтрока.Номенклатура, "СтатьяЗатрат");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекСтрока.СтатьяЗатрат) Тогда
			ТекСтрока.СтатьяЗатрат 			= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатьиЗатрат.СписаниеМатериалов");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекСтрока.СтатьяЗатрат) Тогда
			ТекСтрока.СтатьяЗатрат 			= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатьиЗатрат.ПрочиеЗатраты");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекСтрока.НоменклатурнаяГруппа) Тогда
			ТекСтрока.НоменклатурнаяГруппа	= ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТекСтрока.Номенклатура, "НоменклатурнаяГруппа");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаУчета.СпособУчетаНДС) Тогда
			ТекСтрока.СпособУчетаНДС		= СчетаУчета.СпособУчетаНДС;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПараметрыОбъекта <> Неопределено Тогда
		ПараметрыТЧ = ПараметрыОбъекта.Получить("ВозвратныеОтходыТабличнаяЧасть");
	КонецЕсли;
	
	// Заполним необходимые реквизиты в табличной части Возвратные отходы
	Для каждого ТекСтрока Из Объект.ВозвратныеОтходы Цикл
		
		ТипЦенПлановойСебестоимости   = Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить();
		ВалютаРеглментированногоУчета = Параметры.ВалютаРегламентированногоУчета;
		
		Если ЗначениеЗаполнено(ТипЦенПлановойСебестоимости) Тогда
			ТекСтрока.Цена = Ценообразование.ПолучитьЦенуНоменклатуры(
				ТекСтрока.Номенклатура,
				ТипЦенПлановойСебестоимости,
				Объект.Дата,
				ВалютаРеглментированногоУчета,
				1
			);
		КонецЕсли;
		
		ТекСтрока.Сумма = ТекСтрока.Количество * ТекСтрока.Цена;
		
		Если Не ЗначениеЗаполнено(ТекСтрока.Счет) Тогда
			СчетаУчета					= БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, ТекСтрока.Номенклатура, Объект.Склад);
			ТекСтрока.Счет				= СчетаУчета.СчетУчета;
		КонецЕсли;
		
		Если ПараметрыОбъекта <> Неопределено 
			И ПараметрыТЧ.Колонки.Найти("ТоварВПереработке") <> Неопределено
			И ПараметрыТЧ[ТекСтрока.НомерСтроки - 1].ТоварВПереработке Тогда
			
			ТекСтрока.Счет 				= ПланыСчетов.Хозрасчетный.МатериалыПринятыеВПереработкуВПроизводстве;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекСтрока.СтатьяЗатрат) Тогда
			ТекСтрока.СтатьяЗатрат 		= ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТекСтрока.Номенклатура, "СтатьяЗатрат");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекСтрока.СтатьяЗатрат) Тогда
			ТекСтрока.СтатьяЗатрат 		= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатьиЗатрат.СписаниеМатериалов");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекСтрока.СтатьяЗатрат) Тогда
			ТекСтрока.СтатьяЗатрат 		= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатьиЗатрат.ПрочиеЗатраты");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекСтрока.НоменклатурнаяГруппа) Тогда
			ТекСтрока.НоменклатурнаяГруппа = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТекСтрока.Номенклатура, "НоменклатурнаяГруппа");
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ОбработатьПередачаТоваров(Объект, ПараметрыОбъекта) Экспорт

	// Параметры:
	// - Объект
	// - ПараметрыОбъекта
	
	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
	
	Если Не ЗначениеЗаполнено(Объект.СчетУчетаРасчетовПоТаре) Тогда
		Объект.СчетУчетаРасчетовПоТаре = СчетаУчета.СчетУчетаТарыПокупателя;
	КонецЕсли;
	
	Для каждого ТекСтрока Из Объект.Товары Цикл
		
		СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, ТекСтрока.Номенклатура, Объект.Склад);
		
		Если Не ЗначениеЗаполнено(ТекСтрока.СчетУчета) Тогда
			ТекСтрока.СчетУчета		= СчетаУчета.СчетУчета;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекСтрока.СчетПередачи) Тогда
			ТекСтрока.СчетПередачи	= ?(Объект.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку, СчетаУчета.СчетПередачи, СчетаУчета.СчетУчета);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ОбработатьПоступлениеДопРасходов(Объект, ПараметрыОбъекта) Экспорт

	// Параметры:
	// - Объект
	// - ПараметрыОбъекта
	
	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(	Объект.Организация,
																						Объект.Контрагент,
																						Объект.ДоговорКонтрагента);
	
	Если Не ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентом) Тогда
		Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.СчетУчетаРасчетовПоАвансам) Тогда
		Объект.СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетАвансов;
	КонецЕсли;
	
	Если Объект.Товары.Количество()>0 Тогда
		ТабличнаяЧасть = Объект.Товары;
		ЗаполнениеОтражениеВУСН (Объект, ТабличнаяЧасть);
	КонецЕсли;
	
	//Заполним табличную часть "Товары"
	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
	
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
	
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ОтражениеВУСН) Тогда
			СтрокаТаблицы.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
		КонецЕсли;
	
		// Заполнение счетов учета номенклатуры
		Склад = Неопределено;
		Если ЗначениеЗаполнено(СтрокаТаблицы.ДокументПартии) И ОбщегоНазначенияБПВызовСервера.ЕстьРеквизитДокумента("Склад", СтрокаТаблицы.ДокументПартии.Метаданные()) Тогда
			Склад = СтрокаТаблицы.ДокументПартии.Склад;
		КонецЕсли;
	
		СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(	Объект.Организация,
																						СтрокаТаблицы.Номенклатура, 
																						Склад);
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
			СтрокаТаблицы.СчетУчета = СчетаУчета.СчетУчета;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНДС) Тогда
			СтрокаТаблицы.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымУслугам;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНУ) Тогда
			СтрокаТаблицы.СчетУчетаНУ = СчетаУчета.СчетУчета;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаУчета.СпособУчетаНДС) Тогда
			СтрокаТаблицы.СпособУчетаНДС = СчетаУчета.СпособУчетаНДС;
		КонецЕсли;
		
	КонецЦикла;
	
	//Заполняем параметры, зависящие от режима налогообложения
	ЗаполнениеОтражениеНДСВСтоимости (Объект, ПараметрыОбъекта);

КонецПроцедуры

Процедура ОбработатьПоступлениеИзПереработки(Объект, ПараметрыОбъекта) Экспорт

	// Параметры:
	// - Объект
	// - ПараметрыОбъекта
	
	// Заполним счета учета затрат
	Если НЕ ЗначениеЗаполнено(Объект.СчетЗатрат) Тогда
		Объект.СчетЗатрат = ПланыСчетов.Хозрасчетный.ОсновноеПроизводство;
	КонецЕсли;
	
	// Заполним счета учета расчетов с контрагентом
	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
		Объект.Организация, 
		Объект.Контрагент, 
		Объект.ДоговорКонтрагента
	);
	
	Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентом) Тогда
		Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовПоАвансам) Тогда
		Объект.СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетАвансов;
	КонецЕсли;
	
	// Заполним необходимые реквизиты в табличной части Услуги 
	Для каждого ТекСтрока Из Объект.Услуги Цикл
		
		СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, ТекСтрока.Номенклатура, Объект.Склад);
		
		Если Не ЗначениеЗаполнено (ТекСтрока.СчетУчетаНДС) Тогда
			ТекСтрока.СчетУчетаНДС = СчетаУчета.СчетУчетаНДС;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекСтрока.ОтражениеВУСН) Тогда
			ТекСтрока.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекСтрока.СтатьяЗатрат) Тогда
			ТекСтрока.СтатьяЗатрат = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТекСтрока.Номенклатура, "СтатьяЗатрат");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекСтрока.СтатьяЗатрат) Тогда
			ТекСтрока.СтатьяЗатрат = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатьиЗатрат.СписаниеМатериалов");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекСтрока.СтатьяЗатрат) Тогда
			ТекСтрока.СтатьяЗатрат = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатьиЗатрат.ПрочиеЗатраты");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаУчета.СпособУчетаНДС) Тогда
			ТекСтрока.СпособУчетаНДС = СчетаУчета.СпособУчетаНДС;
		КонецЕсли;
		
	КонецЦикла;
	
	// Заполним счета и другие необходимые реквизиты в табличной части Возвращенные материалы
	Для каждого ТекСтрока Из Объект.ИспользованныеМатериалы Цикл
		
		СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, ТекСтрока.Номенклатура, Объект.Склад);
		
		Если Не ЗначениеЗаполнено(ТекСтрока.СчетУчета) Тогда
			ТекСтрока.СчетУчета 	= СчетаУчета.СчетПередачи;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекСтрока.ОтражениеВУСН) Тогда
			ТекСтрока.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекСтрока.СтатьяЗатрат) Тогда
			ТекСтрока.СтатьяЗатрат = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТекСтрока.Номенклатура, "СтатьяЗатрат");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекСтрока.СтатьяЗатрат) Тогда
			ТекСтрока.СтатьяЗатрат = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатьиЗатрат.СписаниеМатериалов");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекСтрока.СтатьяЗатрат) Тогда
			ТекСтрока.СтатьяЗатрат = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатьиЗатрат.ПрочиеЗатраты");
		КонецЕсли;
		
	КонецЦикла;
	
	// Заполним счета и другие необходимые реквизиты в табличной части Возвращенные материалы
	Для каждого ТекСтрока Из Объект.ВозвращенныеМатериалы Цикл
		
		СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, ТекСтрока.Номенклатура, Объект.Склад);
		
		Если НЕ ЗначениеЗаполнено(ТекСтрока.СчетУчета) Тогда
			ТекСтрока.СчетУчета = СчетаУчета.СчетПередачи;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТекСтрока.СчетПередачи) Тогда
			ТекСтрока.СчетПередачи = СчетаУчета.СчетУчета;
		КонецЕсли;
		
	КонецЦикла;
	
	// Заполним счета в табличной части Продукция
	Для каждого ТекСтрока Из Объект.Продукция Цикл
		
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Счет) Тогда
			
			СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, ТекСтрока.Номенклатура, Объект.Склад);
			
			Если НЕ ЗначениеЗаполнено(ТекСтрока.Счет) Тогда
				ТекСтрока.Счет = СчетаУчета.СчетУчета;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ТекСтрока.Спецификация) Тогда
				ТекСтрока.Спецификация = ТекСтрока.Номенклатура.ОсновнаяСпецификацияНоменклатуры;
			КонецЕсли;
			
		КонецЕсли;
		
		// Заполним плановую сумму в табличной части Продукция
		Если НЕ ЗначениеЗаполнено(ТекСтрока.СуммаПлановая) Тогда    
			
			ТипЦенПлановойСебестоимости = Параметры.ТипЦенПлановойСебестоимости;
				ВалютаРегламентированногоУчета = Параметры.ВалютаРегламентированногоУчета;
				ТекСтрока.ПлановаяСтоимость = Ценообразование.ПолучитьЦенуНоменклатуры(
				ТекСтрока.Номенклатура,
				ТипЦенПлановойСебестоимости,
				Объект.Дата,
				ВалютаРегламентированногоУчета,
				1
			);
			
			ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьПлановуюСумму(ТекСтрока);
			
		КонецЕсли;
		
	КонецЦикла;
	
	//Заполняем параметры, зависящие от режима налогообложения
	ЗаполнениеОтражениеНДСВСтоимости (Объект, ПараметрыОбъекта);

КонецПроцедуры

Процедура ОбработатьПоступлениеТоваров(Объект, ПараметрыОбъекта) Экспорт

		// Параметры:
		// - Объект
		// - ПараметрыОбъекта
		
		СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(	Объект.Организация, 
																							Объект.Контрагент, 
																							Объект.ДоговорКонтрагента);
		ВидДоговораКонтрагента = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.ДоговорКонтрагента, "ВидДоговора");
		
		Если Не ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентом) Тогда
			Если ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
				Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовСКомитентом;
			ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
				Объект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
			Иначе
				Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.СчетУчетаРасчетовПоАвансам) Тогда
			Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку
				Или ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
				Объект.СчетУчетаРасчетовПоАвансам = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
			Иначе
				Объект.СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетАвансов;
			КонецЕсли;
		КонецЕсли;
		
		//Заполним табличную часть "Товары"
		Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
		
			СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(	Объект.Организация,
																							СтрокаТаблицы.Номенклатура,
																							Объект.Склад);
																							
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
	
				Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия
					И ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.ДоговорКонтрагента, "ВидДоговора") = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
					
					Если СчетаУчета.СчетУчетаЯвляетсяЗабалансовым = Истина Тогда
						СтрокаТаблицы.СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыНаСкладе;
					Иначе
						СтрокаТаблицы.СчетУчета = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
					КонецЕсли;
					
				ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
					
					СтрокаТаблицы.СчетУчета = СчетаУчета.СчетУчетаДавСырья;
					
				Иначе
					
					Если СчетаУчета.СчетУчетаЯвляетсяЗабалансовым <> Истина Тогда
						СтрокаТаблицы.СчетУчета = СчетаУчета.СчетУчета;
					Иначе
						СтрокаТаблицы.СчетУчета = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
					КонецЕсли;
					
					СтрокаТаблицы.СчетУчетаНДС = СчетаУчета.СчетУчетаНДС;
				КонецЕсли;
				
			КонецЕсли;
			
			Если Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку
				И ЗначениеЗаполнено(СчетаУчета.СпособУчетаНДС) Тогда
				
				СтрокаТаблицы.СпособУчетаНДС = СчетаУчета.СпособУчетаНДС;
			КонецЕсли;
		
		КонецЦикла;
		
		Если Объект.Товары.Количество()>0 Тогда
			ТабличнаяЧасть = Объект.Товары;
			ЗаполнениеОтражениеВУСН (Объект, ТабличнаяЧасть);
		КонецЕсли;
		
		//Заполним табличную часть "Услуги"
		Для Каждого СтрокаТаблицы Из Объект.Услуги Цикл
		
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
		
			СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(	Объект.Организация,
																						  	СтрокаТаблицы.Номенклатура,
																						  	Объект.Склад);
		
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетЗатрат) Тогда
				СтрокаТаблицы.СчетЗатрат = СчетаУчета.СчетУчета;
				СтрокаТаблицы.Субконто1 = СчетаУчета.Субконто1;
				СтрокаТаблицы.Субконто2 = СчетаУчета.Субконто2;
				СтрокаТаблицы.Субконто3 = СчетаУчета.Субконто3;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетЗатратНУ) Тогда
				СтрокаТаблицы.СчетЗатратНУ = СчетаУчета.СчетУчета;
				СтрокаТаблицы.СубконтоНУ1 = СчетаУчета.Субконто1;
				СтрокаТаблицы.СубконтоНУ2 = СчетаУчета.Субконто2;
				СтрокаТаблицы.СубконтоНУ3 = СчетаУчета.Субконто3;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНДС) Тогда 
				СтрокаТаблицы.СчетУчетаНДС = СчетаУчета.СчетУчетаНДС;
			КонецЕсли;
			
			Для каждого СтрокаВидыСубконто Из СчетаУчета.СчетУчета.ВидыСубконто Цикл
				
				ОписаниеТиповВидаСубконто = СтрокаВидыСубконто.ВидСубконто.ТипЗначения;
				Если ОписаниеТиповВидаСубконто.СодержитТип(Тип("СправочникСсылка.СтатьиЗатрат")) Тогда
					СтрокаТаблицы["Субконто" + СтрокаВидыСубконто.НомерСтроки] = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатьиЗатрат.ПрочиеЗатраты");
				ИначеЕсли ОписаниеТиповВидаСубконто.СодержитТип(Тип("СправочникСсылка.ПрочиеДоходыИРасходы")) Тогда
					СтрокаТаблицы["Субконто" + СтрокаВидыСубконто.НомерСтроки] = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.ПрочиеВнереализационныеДоходыРасходы");
				ИначеЕсли ОписаниеТиповВидаСубконто.СодержитТип(Тип("СправочникСсылка.НоменклатурныеГруппы")) Тогда
					СтрокаТаблицы["Субконто" + СтрокаВидыСубконто.НомерСтроки] = ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтрокаТаблицы.Номенклатура, "НоменклатурнаяГруппа");
				КонецЕсли;
				
				СтрокаТаблицы["СубконтоНУ" + СтрокаВидыСубконто.НомерСтроки] = СтрокаТаблицы["Субконто" + СтрокаВидыСубконто.НомерСтроки];
			КонецЦикла;
			
			Если ЗначениеЗаполнено(СчетаУчета.СпособУчетаНДС) Тогда 
				СтрокаТаблицы.СпособУчетаНДС = СчетаУчета.СпособУчетаНДС;
			КонецЕсли;
		
		КонецЦикла;
		
		Если ПараметрыОбъекта <> Неопределено Тогда
			
			ПараметрыТЧ = ПараметрыОбъекта.Получить("ТоварыТабличнаяЧасть");
			Если ПараметрыТЧ <> Неопределено 
				И ПараметрыТЧ.Колонки.Найти("ТоварНаКомиссии") <> Неопределено Тогда
				
				Для каждого СтрокаТаблицы Из Объект.Товары Цикл
					
					Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета)
						И ПараметрыТЧ[СтрокаТаблицы.НомерСтроки - 1].ТоварНаКомиссии Тогда
						СтрокаТаблицы.СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыНаСкладе;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
			ПараметрыТЧ = ПараметрыОбъекта.Получить("УслугиТабличнаяЧасть");
			Если ПараметрыТЧ <> Неопределено 
				И ПараметрыТЧ.Колонки.Найти("ПроизводственныйРасход") <> Неопределено Тогда
				
				Для каждого СтрокаТаблицы Из Объект.Услуги Цикл	
					
					Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетЗатрат) Тогда
						Если ПараметрыТЧ[СтрокаТаблицы.НомерСтроки - 1].ПроизводственныйРасход Тогда
							СтрокаТаблицы.СчетЗатрат = ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы;
						Иначе
							СтрокаТаблицы.СчетЗатрат = ПланыСчетов.Хозрасчетный.ИздержкиОбращения;
						КонецЕсли;
						СтрокаТаблицы.Субконто1 = ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтрокаТаблицы.Номенклатура, "СтатьяЗатрат");
						
						СтрокаТаблицы.СчетЗатратНУ = СтрокаТаблицы.СчетЗатрат;
						СтрокаТаблицы.СубконтоНУ1 = СтрокаТаблицы.Субконто1;
						
						Если Не ЗначениеЗаполнено(СтрокаТаблицы.Субконто1) Тогда
							СтрокаТаблицы.Субконто1 = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатьиЗатрат.ПрочиеЗатраты");
							СтрокаТаблицы.СубконтоНУ1 = СтрокаТаблицы.Субконто1;
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		//Заполняем параметры, зависящие от режима налогообложения
		ЗаполнениеОтражениеНДСВСтоимости (Объект, ПараметрыОбъекта);
		
		Если Объект.Услуги.Количество()>0 Тогда
			ТабличнаяЧасть = Объект.Услуги;
			ЗаполнениеОтражениеВУСН (Объект, ТабличнаяЧасть);
		КонецЕсли;
		
		//Заполняем параметры, зависящие от режима налогообложения
		ЗаполнитьСчетаУчетаВозвратнойТары (Объект);
	

КонецПроцедуры

Процедура ОбработатьРеализацияТоваров(Объект, ПараметрыОбъекта) Экспорт

	// Параметры:
	// - Объект
	// - ПараметрыОбъекта
	
	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(	Объект.Организация,
																						Объект.Контрагент,
																						Объект.ДоговорКонтрагента);
	Если (ОбщегоНазначения.ПолучитьЗначениеРеквизита( Объект.ДоговорКонтрагента, "ВидДоговора") = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером)
		Или (Объект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности) Тогда
			Объект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
			Объект.СчетУчетаРасчетовПоАвансам = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	Иначе
		Если Не ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентом) Тогда
			Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
		КонецЕсли;
		Если (Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически)
			Или (Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу) Тогда
			Если Не ЗначениеЗаполнено(Объект.СчетУчетаРасчетовПоАвансам) Тогда
				Объект.СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетАвансовПокупателя;
			КонецЕсли;
		Иначе
			Объект.СчетУчетаРасчетовПоАвансам = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыОбъекта <> Неопределено Тогда
		
		ПараметрыТЧ = ПараметрыОбъекта.Получить("ТоварыТабличнаяЧасть");
		Если ПараметрыТЧ <> Неопределено И ПараметрыТЧ.Колонки.Найти("ТоварНаКомиссии") <> Неопределено Тогда
			
			Для каждого СтрокаТаблицы Из Объект.Товары Цикл	
				
				Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета)
					И ПараметрыТЧ[СтрокаТаблицы.НомерСтроки - 1].ТоварНаКомиссии Тогда
					СтрокаТаблицы.СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыНаСкладе;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ТабличнаяЧасть = Объект.Товары;
	ЭтоУслуги      = Ложь;
	ЕстьКомиссия   = Истина;
	ЗаполнитьСчетаУчетаНоменклатурыПродажа (Объект, ПараметрыОбъекта, ТабличнаяЧасть, ЭтоУслуги, ЕстьКомиссия);
	
	ТабличнаяЧасть = Объект.Услуги;
	ЭтоУслуги      = Истина;
	ЕстьКомиссия   = Ложь;
	ЗаполнитьСчетаУчетаНоменклатурыПродажа (Объект, ПараметрыОбъекта, ТабличнаяЧасть, ЭтоУслуги, ЕстьКомиссия);

КонецПроцедуры

Процедура ОбработатьРеализацияУслугПоПереработке(Объект, ПараметрыОбъекта) Экспорт

	// Параметры:
	// - Объект
	// - ПараметрыОбъекта
	
	// Заполним счета учета расчетов с контрагентом
	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
		Объект.Организация,
		Объект.Контрагент,
		Объект.ДоговорКонтрагента
	);
	
	Если Не ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентом) Тогда
		Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.СчетУчетаРасчетовПоАвансам) Тогда
		Объект.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя;
	КонецЕсли;
	
	ТипЦенПлановойСебестоимости = Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить();
	ВалютаРеглментированногоУчета = Параметры.ВалютаРегламентированногоУчета;
	
	// Заполним необходимые реквизиты в табличной части Услуги 
	Для каждого ТекСтрока Из Объект.Услуги Цикл
		
		СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, ТекСтрока.Номенклатура);
		
		Если Не ЗначениеЗаполнено(ТекСтрока.СчетДоходов) Тогда
			ТекСтрока.СчетДоходов				= СчетаУчета.СчетДоходов;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекСтрока.СчетРасходов) Тогда
			ТекСтрока.СчетРасходов 				= СчетаУчета.СчетРасходов;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекСтрока.СчетУчетаНДСПоРеализации) Тогда
			ТекСтрока.СчетУчетаНДСПоРеализации	= СчетаУчета.СчетУчетаНДСПродажи;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекСтрока.СчетУчета) Тогда
			ТекСтрока.СчетУчета					= СчетаУчета.СчетУчета;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекСтрока.СуммаПлановая) Тогда
			ТекСтрока.ПлановаяСтоимость = Ценообразование.ПолучитьЦенуНоменклатуры(
				ТекСтрока.Номенклатура,
				ТипЦенПлановойСебестоимости,
				Объект.Дата,
				ВалютаРеглментированногоУчета,
				1
			);
			
			ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьПлановуюСумму(ТекСтрока);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекСтрока.Номенклатура) Тогда
			Содержание = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТекСтрока.Номенклатура, "НаименованиеПолное");
		КонецЕсли;
		
		ТекСтрока.Содержание = ?(ЗначениеЗаполнено(Содержание), Содержание, ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТекСтрока.Номенклатура, "Наименование"));
		
	КонецЦикла;
	
	Для каждого ТекСтрока Из Объект.МатериалыЗаказчика Цикл
		
		Если ЗначениеЗаполнено(ТекСтрока.СчетУчета) Тогда
			Продолжить;
		КонецЕсли;
		
		СчетаУчета 			= БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, ТекСтрока.Номенклатура);
		ТекСтрока.СчетУчета = СчетаУчета.СчетПередачиЗаб;
		
		Если Не ЗначениеЗаполнено(ТекСтрока.СчетУчета) Тогда
			ТекСтрока.СчетУчета = ПланыСчетов.Хозрасчетный.МатериалыПринятыеВПереработкуВПроизводстве;	
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ОбработатьСписаниеТоваров(Объект, ПараметрыОбъекта) Экспорт

	// Параметры:
	// - Объект
	// - ПараметрыОбъекта
	
	ТабличнаяЧасть = Объект.Товары;
	
	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
			СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(	Объект.Организация,
																							СтрокаТаблицы.Номенклатура,
																							Объект.Склад);
			СтрокаТаблицы.СчетУчета = СчетаУчета.СчетУчета;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьСчетаУчетаВозвратнойТары (Объект);
	
	ЗаполнениеОтражениеВУСН (Объект, ТабличнаяЧасть);
	
	Объект.СуммаДокумента = Объект.Товары.Итог("Сумма");

КонецПроцедуры

Процедура ОбработатьТабличнуюЧастьДокументаАктРабот(Объект) Экспорт

	ПараметрыОбъекта = Новый Структура("Организация, Дата, Ссылка, ТипЦен, ВалютаДокумента, КурсДокумента, КратностьДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, Склад, ВалютаРегламентированногоУчета, СуммаВключаетНДС");
	ПараметрыОбъекта.ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
	// Заполним необходимые реквизиты в табличной части Услуги
	Для каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(
				СтрокаТабличнойЧасти,
				ПараметрыОбъекта,
				"Услуги",
				Метаданные.Документы.АктОбОказанииПроизводственныхУслуг);
		КонецЕсли;
			
		// Рассчитываем реквизиты табличной части.
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / ?(СтрокаТабличнойЧасти.Количество =0, 1, СтрокаТабличнойЧасти.Количество);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПараметрыОбъекта.СуммаВключаетНДС);
		
	КонецЦикла;

КонецПроцедуры

Процедура ОбработатьТабличнуюЧастьДокументКорректировкаДолга(Объект, ПараметрыОбъекта, ИмяТЧ) Экспорт

	// Параметры:
	// - Объект
	// - ПараметрыОбъекта
	// - ТабличнаяЧасть
	
	ЗаполнятьКоррСчет = Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности;
	ЗаполнятьСчетамиУчетаАвансов = Объект.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.АвансыПокупателя
		ИЛИ Объект.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.АвансыПоставщику;
	
	Для Каждого СтрокаТаблицы Из Объект[ИмяТЧ] Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаРасчетов)
			ИЛИ Не ЗначениеЗаполнено(СтрокаТаблицы.КорСчетУчетаРасчетов) Тогда
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) Тогда
				Реквизиты 	= БухгалтерскийУчетПереопределяемый.ПолучитьРеквизитыДоговораКонтрагента(СтрокаТаблицы.ДоговорКонтрагента);
				СчетаУчета 	= БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(	Объект.Организация,
																									СтрокаТаблицы.ДоговорКонтрагента.Владелец,
																									СтрокаТаблицы.ДоговорКонтрагента);
																									
				Если ПараметрыОбъекта <> Неопределено Тогда																					
					ПараметрыТЧ = ПараметрыОбъекта.Получить(ИмяТЧ + "ТабличнаяЧасть");
					Если ПараметрыТЧ <> Неопределено 
						И ПараметрыТЧ.Колонки.Найти("ПризнакАванса") <> Неопределено
						И ПараметрыТЧ[СтрокаТаблицы.НомерСтроки - 1].ПризнакАванса = Истина Тогда
						
						ЗаполнятьСчетамиУчетаАвансов = Истина;
					КонецЕсли;
				КонецЕсли;
																									
				Если Реквизиты.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком
					Или Реквизиты.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
					
					Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаРасчетов) Тогда
						Если ЗаполнятьСчетамиУчетаАвансов Тогда
							СтрокаТаблицы.СчетУчетаРасчетов = СчетаУчета.СчетАвансов;
						Иначе
							СтрокаТаблицы.СчетУчетаРасчетов = СчетаУчета.СчетРасчетов;
						КонецЕсли;
					КонецЕсли;
					
					Если ЗаполнятьКоррСчет 
						И Не ЗначениеЗаполнено(СтрокаТаблицы.КорСчетУчетаРасчетов) Тогда
						Если ЗаполнятьСчетамиУчетаАвансов Тогда
							СтрокаТаблицы.КорСчетУчетаРасчетов = СчетаУчета.СчетАвансов;
						Иначе
							СтрокаТаблицы.КорСчетУчетаРасчетов = СчетаУчета.СчетРасчетов;
						КонецЕсли;
					КонецЕсли;
					
				Иначе
					
					Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаРасчетов) Тогда
						Если ЗаполнятьСчетамиУчетаАвансов Тогда
							СтрокаТаблицы.СчетУчетаРасчетов = СчетаУчета.СчетАвансовПокупателя;
						Иначе
							СтрокаТаблицы.СчетУчетаРасчетов = СчетаУчета.СчетРасчетовПокупателя;
						КонецЕсли;
					КонецЕсли;
					
					Если ЗаполнятьКоррСчет 
						И Не ЗначениеЗаполнено(СтрокаТаблицы.КорСчетУчетаРасчетов) Тогда
						Если ЗаполнятьСчетамиУчетаАвансов Тогда
							СтрокаТаблицы.КорСчетУчетаРасчетов = СчетаУчета.СчетАвансовПокупателя;
						Иначе
							СтрокаТаблицы.КорСчетУчетаРасчетов = СчетаУчета.СчетРасчетовПокупателя;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЦикла;

КонецПроцедуры

Процедура ОбработатьТребованиеНакладная(Объект, ПараметрыОбъекта) Экспорт

	// Параметры:
	// - Объект
	// - ПараметрыОбъекта
	
	// Заполним реквизиты шапки
	Если НЕ ЗначениеЗаполнено(Объект.НДСвСтоимостиТоваров) Тогда
		Объект.НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
	КонецЕсли;
	
	Объект.ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат = Истина;
	
	Если ПараметрыОбъекта <> Неопределено Тогда
		ПараметрыТЧ = ПараметрыОбъекта.Получить("МатериалыТабличнаяЧасть");
	КонецЕсли;
	
	ПараметрыОбъектаАктуальны 	= (ПараметрыОбъекта <> Неопределено);
	Если ТипЗнч(ПараметрыТЧ) = Тип("ТаблицаЗначений") Тогда
		ЕстьКолонкаТоварыНаКомиссии = (ПараметрыТЧ.Колонки.Найти("ТоварНаКомиссии") <> Неопределено);
	Иначе
		ЕстьКолонкаТоварыНаКомиссии  = Ложь;
	КонецЕсли;
	
	// Заполним счета учета в табличной части Материалы
	Для каждого ТекСтрока Из Объект.Материалы Цикл
		
		Если Не ЗначениеЗаполнено(ТекСтрока.СтатьяЗатрат) Тогда
			ТекСтрока.СтатьяЗатрат = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТекСтрока.Номенклатура, "СтатьяЗатрат");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекСтрока.СтатьяЗатрат) Тогда
			ТекСтрока.СтатьяЗатрат = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатьиЗатрат.СписаниеМатериалов");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекСтрока.СтатьяЗатрат) Тогда
			ТекСтрока.СтатьяЗатрат = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатьиЗатрат.ПрочиеЗатраты");
		КонецЕсли;
		
		СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, ТекСтрока.Номенклатура);
		
		Если Не ЗначениеЗаполнено(ТекСтрока.Счет) Тогда
			ТекСтрока.Счет = СчетаУчета.СчетУчета;
		КонецЕсли;
		
		Если ПараметрыОбъектаАктуальны
			И ЕстьКолонкаТоварыНаКомиссии
			И ПараметрыТЧ[ТекСтрока.НомерСтроки - 1].ТоварНаКомиссии Тогда
			
			ТекСтрока.Счет = ПланыСчетов.Хозрасчетный.ТоварыНаСкладе;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТекСтрока.СчетЗатрат) Тогда
			ТекСтрока.СчетЗатрат = ПланыСчетов.Хозрасчетный.ОсновноеПроизводство;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаУчета.СпособУчетаНДС) Тогда 
			ТекСтрока.СпособУчетаНДС = СчетаУчета.СпособУчетаНДС;
		КонецЕсли;
		
	КонецЦикла;
	
	// Заполним счета учета в табличной части Материалы
	Для каждого ТекСтрока Из Объект.МатериалыЗаказчика Цикл
		
		СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, ТекСтрока.Номенклатура, Объект.Склад);
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Счет) Тогда
			ТекСтрока.Счет = СчетаУчета.СчетУчетаДавСырья;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТекСтрока.СчетПередачи) Тогда
			ТекСтрока.СчетПередачи = СчетаУчета.СчетПередачиЗаб;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТекСтрока.СчетПередачи) Тогда
			ТекСтрока.СчетПередачи = ПланыСчетов.Хозрасчетный.МатериалыПринятыеВПереработкуВПроизводстве;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ПривестиСубконтоВСоответствиеСчетуУчета(Объект, СчетУчета) Экспорт

	ЭлементыСубконто = Новый Структура("Субконто1,Субконто2,Субконто3", Объект.Субконто1, Объект.Субконто2, Объект.Субконто3);
	ЧислоАктивныхСубконто = ?(ЗначениеЗаполнено(СчетУчета), СчетУчета.ВидыСубконто.Количество(), 0);
	
	Для Сч = 1 По ЧислоАктивныхСубконто Цикл
		ТипСубк = СчетУчета.ВидыСубконто[Сч - 1].ВидСубконто.ТипЗначения;
		
		Если ТипСубк.ПривестиЗначение(ЭлементыСубконто["Субконто" + Сч]) <> ЭлементыСубконто["Субконто" + Сч] Тогда
			ЭлементыСубконто["Субконто" + Сч] = ТипСубк.ПривестиЗначение(ЭлементыСубконто["Субконто" + Сч]);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Сч = (ЧислоАктивныхСубконто + 1) По 3 Цикл
		
		Если Не ЭлементыСубконто["Субконто" + Сч] = Неопределено Тогда
			ЭлементыСубконто["Субконто" + Сч] = Неопределено;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ПроверитьЗначениеОпцииИспИмпортныхТоваров() Экспорт

	
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК Количество
		|ИЗ
		|	Справочник.НомераГТД КАК НомераГТД";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Не ПолучитьФункциональнуюОпцию("ВедетсяУчетИмпортныхТоваров")
			И Выборка.Количество() > 0 Тогда
			
			УстановитьПривилегированныйРежим(Истина);
			Константы.ВедетсяУчетИмпортныхТоваров.Установить(Истина);
			УстановитьПривилегированныйРежим(Ложь);
			
		КонецЕсли;

КонецПроцедуры

Процедура ПроверитьЗначениеОпцииИспКомиссииНаПродажу() Экспорт

	
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК Количество
		|ИЗ
		|	Документ.ОтчетКомитентуОПродажах КАК ОтчетКомитентуОПродажах
		|ГДЕ
		|	ОтчетКомитентуОПродажах.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОтчетКомитентуОПродажах.ОтчетОПродажах)";
		
		Выборка = Запрос.Выполнить().Выбрать();
	
		Если НЕ ПолучитьФункциональнуюОпцию("ОсуществляетсяРеализацияТоваровУслугКомитентов") 
			И Выборка.Количество() > 0 Тогда
		
			УстановитьПривилегированныйРежим(Истина);
			Константы.ОсуществляетсяРеализацияТоваровУслугКомитентов.Установить(Истина);
			УстановитьПривилегированныйРежим(Ложь);
		
		КонецЕсли;

КонецПроцедуры

Процедура ПроверитьЗначениеОпцииИспНесколькихОрганизаций() Экспорт

	
	Справочники.Организации.ОбновитьИспользуемыеВидыОрганизаций();
	
	Если Не Справочники.Организации.ИспользуетсяНесколькоОрганизаций()
		И Справочники.Организации.КоличествоОрганизаций() > 1 Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		Константы.ИспользоватьНесколькоОрганизаций.Установить(Истина);
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьЗначениеОпцииИспНесколькихСкладов() Экспорт

		
	Справочники.Склады.ПроверитьЗначениеОпцииИспользоватьНесколькоСкладов();

КонецПроцедуры

Процедура ПроверитьЗначениеОпцииИспользоватьВалютныйУчет() Экспорт

	
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК Количество
		|ИЗ
		|	Справочник.Валюты КАК Валюты";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВалютныйУчет")
			И Выборка.Количество() > 1 Тогда
			
			УстановитьПривилегированныйРежим(Истина);
			Константы.ИспользоватьВалютныйУчет.Установить(Истина);
			Справочники.ПрочиеДоходыИРасходы.СоздатьУстановитьПредопределенныеЭлементыВалютныйУчет();
			УстановитьПривилегированныйРежим(Ложь);
			
		КонецЕсли;

КонецПроцедуры

Процедура СоздатьУчетнуюПолитикуПоУмолчаниюДляОрганизаций(МассивОрганизаций) Экспорт

		
		Для каждого ОрганизацияОбъект Из МассивОрганизаций Цикл
			
			Если ТипЗнч(ОрганизацияОбъект) <> Тип("СправочникОбъект.Организации")
				ИЛИ Не ЗначениеЗаполнено(ОрганизацияОбъект.Ссылка) Тогда
				Продолжить;
			КонецЕсли;
			
			Попытка
				
				Организация = ОрганизацияОбъект.Ссылка; 
				
				НаборЗаписей = РегистрыСведений.УчетнаяПолитикаОрганизаций.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Организация.Установить(Организация);
				НаборЗаписей.Прочитать();
				
				Если НаборЗаписей.Количество() > 0 Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаНабораЗаписей = НаборЗаписей.Добавить();
				СтрокаНабораЗаписей.Активность = Истина;
				СтрокаНабораЗаписей.Период = НачалоГода(ТекущаяДата());
				
				ЭтоФизЛицо	= Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
				СистемаНалогообложения = "Общая";
				
				ДанныеЗаполнения = Новый Структура("Организация", Организация);
				
				ДанныеЗаполнения.Вставить("СистемаНалогообложения", Перечисления.СистемыНалогообложения.Общая);
				ДанныеЗаполнения.Вставить("ПрименяетсяУСН", Ложь);
				ДанныеЗаполнения.Вставить("ПрименяетсяУСНДоходы", Ложь);
				ДанныеЗаполнения.Вставить("ПрименяетсяУСНДоходыМинусРасходы", Ложь);
				ДанныеЗаполнения.Вставить("ПрименяетсяУСНПатент", Ложь);
				ДанныеЗаполнения.Вставить("ПлательщикНалогаНаПрибыль", Истина);
				ДанныеЗаполнения.Вставить("ПлательщикНДС", Истина);
				ДанныеЗаполнения.Вставить("ПлательщикЕНВД", Ложь);
				Если ЭтоФизЛицо Тогда
					ДанныеЗаполнения.Вставить("СпособОценкиМПЗ", Перечисления.СпособыОценки.ФИФО);
				КонецЕсли;
				
				РегистрыСведений.УчетнаяПолитикаОрганизаций.УстановкаПараметровУчетнойПолитикиПоУмолчанию(СтрокаНабораЗаписей, ДанныеЗаполнения);
				РегистрыСведений.УчетнаяПолитикаОрганизаций.УстановкаПараметровУчетнойПолитикиПоУмолчаниюНаПериод(СтрокаНабораЗаписей);
				
				НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
				НаборЗаписей.Записать();
				
				// Часть учетной политики - список прямых расходов для целей исчисления налога на прибыль
				Если Не ЭтоФизЛицо И СистемаНалогообложения = "Общая" Тогда
					РегистрыСведений.МетодыОпределенияПрямыхРасходовПроизводстваВНУ.Настроить(
						Организация,
						НачалоГода(СтрокаНабораЗаписей.Период),
						Ложь, // Не копировать записи предыдущего периода
						Ложь
					);// Не перезаписывать записи, если они уже есть
				КонецЕсли;
				
			Исключение
			КонецПопытки;
			
		КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
// Данный раздел изменять запрещено.

// Отменяет проведение объекта в информационной базе.
//
// Параметры:
//	Объект - Объект для отмены проведения.
//	Тип - Строка - Тип объекта строкой.
//
Процедура ОтменитьПроведениеОбъектаВИБ(Объект, Тип, ЗаписатьОбъект = Ложь)

	ОбщиеПроцедурыФункции.ОтменитьПроведениеОбъектаВИБ(Объект, Тип, ЗаписатьОбъект);
	
КонецПроцедуры

// Устанавливает пометку удаления.
//
// Параметры:
//	Объект - Объект для установки пометки.
//	ПометкаУдаления - Булево - Флаг пометки удаления.
//	ИмяТипаОбъекта - Строка - Тип объекта строкой.
//
Процедура УстановитьПометкуУдаленияУОбъекта(Объект, ПометкаУдаления, ИмяТипаОбъекта)
	
	ОбщиеПроцедурыФункции.УстановитьПометкуУдаленияУОбъекта(Объект, ПометкаУдаления, ИмяТипаОбъекта);
	
КонецПроцедуры

// Регистрирует предупреждение в журнале регистрации.
// Если в процессе обмена данными было обращение к этой процедуре, то обмен данными остановлен не будет.
// После завершения обмена статус выполнения обмена в мониторе для пользователя будет иметь значение "Предупреждение", если не было ошибок.
//
// Параметры:
//  Предупреждение - Строка. Текст предупреждения, который надо зарегистрировать.
// Информация, предупреждения и ошибки, возникающие в процессе обмена данными регистрируются в журнале регистрации.
// 
Процедура ЗарегистрироватьПредупреждение(Предупреждение)
	
	ОбщиеПроцедурыФункции.ЗарегистрироватьПредупреждение(Предупреждение);
	
КонецПроцедуры

// Признак того, что это загрузка в информационную базу.
// 
// Возвращаемое значение:
//	Булево - Признак режима загрузки данных
// 
Функция РежимЗагрузкиДанныхВИнформационнуюБазу()
	
	Возврат ОбщиеПроцедурыФункции.РежимЗагрузкиДанныхВИнформационнуюБазу();
	
КонецФункции

// Служебная. Инициализирует переменные, необходимые для отладки
//
// Параметры:
//  Владелец - Обработка КонвертацияОбъектовИнформационныхБаз
//
Процедура ПодключитьОбработкуДляОтладки(Владелец) Экспорт

	Параметры            	 = Владелец.Параметры;
	ОбщиеПроцедурыФункции	 = Владелец;
	Запросы              	 = Владелец.Запросы;
	УзелДляОбмена		 	 = Владелец.УзелДляОбмена;

КонецПроцедуры

#КонецЕсли
