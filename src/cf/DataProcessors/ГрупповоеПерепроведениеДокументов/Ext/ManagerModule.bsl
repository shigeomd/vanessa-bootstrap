#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Функция подготавливает параметры и запускает основную процедуру
// перепроведения в фоновом задании.
//
// Параметры:
//	ПараметрыПерепроведения - Структура с ключами:
//		- Организация - СправочникСсылка.Организации
//		- УникальныйИдентификаторФормы 
//		- МоментНачала - МоментВремени
//		- ДатаОкончания - Дата
//		- ОстанавливатьсяПоОшибке - Булево
//		- НеПерепроводитьРегламентныеДокументыЗаПоследнийМесяц - Булево,
//			Если Истина, то существующие за последний месяц периода перепроведения документы
//			помечаются как неактуальные, но после выполнения основного перепроведения не проводятся.
//		- ДополнительныеПараметры - 
//			Для возможности передачи произвольных данных, учитываемых в процедурах после завершения
//			длительной операции группового перепроведения. Эти данные возвращаются вместе с результатом
//			процедуры перепроведения.
//		- АдресХранилищаСОшибками - Строка
//			Адрес временного хранилища, в котором сохраняется отчет об ошибках при перепроведении.
//			Необходимо создавать временное хранилище в том сеансе работы с ИБ, в котором потом планируется
//			обращаться к нему для получения отчета. Если были обнаружены ошибки в процессе перепроведения,
//			то хранилище будет доступно до окончания сеанса, в котором оно создано, либо до явного удаления.
//
Функция ПараметрыПерепроведения() Экспорт

	Результат = Новый Структура();
	
	Результат.Вставить("Организация", 					Справочники.Организации.ПустаяСсылка());
	Результат.Вставить("УникальныйИдентификаторФормы", 	Неопределено);
	Результат.Вставить("МоментНачала", 					Новый МоментВремени('0001-01-01', Неопределено));
	Результат.Вставить("ДатаОкончания", 				'0001-01-01');
	Результат.Вставить("ОстанавливатьсяПоОшибке", 		Ложь);
	Результат.Вставить("ЭтоЗакрытиеМесяца",				Ложь);
	Результат.Вставить("ЭтоПомощникПоУчетуНДС",			Ложь);
	Результат.Вставить("ДополнительныеПараметры", 		Неопределено);
	Результат.Вставить("АдресХранилищаСОшибками", 		"");
	
	Возврат Результат;

КонецФункции

// Функция подготавливает параметры и запускает основную процедуру
// перепроведения в фоновом задании.
//
// Параметры:
//	ПараметрыПерепроведения - структура, возвращаемая функцией ПараметрыПерепроведения()
//
Функция ЗапуститьПерепроведение(ПараметрыПерепроведения) Экспорт
	
	Если НЕ ПередНачаломПерепроведения(ПараметрыПерепроведения.Организация, ПараметрыПерепроведения.УникальныйИдентификаторФормы) Тогда
		Возврат Неопределено;
	КонецЕсли;

	// Временное хранилище для отчета об ошибках необходимо создавать
	// в том же сеансе работы с пользователем, из которого требуется обращение к ним, 
	// т.к. временное хранилище очищается при завершении сеанса фонового задания.
	Если НЕ ЗначениеЗаполнено(ПараметрыПерепроведения.АдресХранилищаСОшибками) Тогда
		ПараметрыПерепроведения.Вставить("АдресХранилищаСОшибками", ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор()));
	КонецЕсли;

	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, ПараметрыПерепроведения.УникальныйИдентификаторФормы);
		ПерепроведениеДокументов(ПараметрыПерепроведения, АдресХранилища);
		
		Результат = Новый Структура();
		Результат.Вставить("ЗаданиеВыполнено", 			Истина);
		Результат.Вставить("АдресХранилища", 			АдресХранилища);
		Результат.Вставить("ИдентификаторЗадания", 		Неопределено);
		Результат.Вставить("ДополнительныеПараметры", 	ПараметрыПерепроведения.ДополнительныеПараметры);

	Иначе
		НаименованиеЗадания = НСтр("ru = 'Групповое перепроведение документов'");
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			ПараметрыПерепроведения.УникальныйИдентификаторФормы,
			"Обработки.ГрупповоеПерепроведениеДокументов.ПерепроведениеДокументов",
			ПараметрыПерепроведения,
			НаименованиеЗадания);

	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполняет подготовительные действия перед групповым перепроведением, 
// возвращает Истина, если успешно, иначе Ложь.
//
Функция ПередНачаломПерепроведения(Организация, УникальныйИдентификаторФормы) Экспорт

	Успешно = Истина;

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка КАК Организация
		|ИЗ
		|	Справочник.Организации КАК Организации";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Попытка
				ЗаблокироватьДанныеДляРедактирования(Выборка.Организация,, УникальныйИдентификаторФормы);
			Исключение
				ИнфоОбОшибке = ИнформацияОбОшибке();
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось заблокировать данные по организации %1 для группового перепроведения.%2 %3'"),
					Выборка.Организация,
					Символы.ПС,
					ПодробноеПредставлениеОшибки(ИнфоОбОшибке));
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Групповое перепроведение документов'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
					УровеньЖурналаРегистрации.Ошибка, , ,
					ТекстСообщения);
				РазблокироватьДанныеДляРедактирования(, УникальныйИдентификаторФормы);
				Успешно = Ложь;
				Прервать;
			КонецПопытки;
		КонецЦикла;
	Иначе
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Организация, , УникальныйИдентификаторФормы);
		Исключение
			ИнфоОбОшибке = ИнформацияОбОшибке();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось заблокировать данные по организации %1 для группового перепроведения.%2 %3'"),
				Организация,
				Символы.ПС,
				ПодробноеПредставлениеОшибки(ИнфоОбОшибке));
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Групповое перепроведение документов'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
				УровеньЖурналаРегистрации.Ошибка, , ,
				ТекстСообщения);
			РазблокироватьДанныеДляРедактирования(, УникальныйИдентификаторФормы);
			Успешно = Ложь;
		КонецПопытки;
	КонецЕсли;

	Возврат Успешно;

КонецФункции

// Необходимо вызывать после завершения фонового задания группового перепроведения
// для снятия захваченных блокировок.
//
Процедура ПослеОкончанияПерепроведения(УникальныйИдентификаторФормы) Экспорт

	РазблокироватьДанныеДляРедактирования(, УникальныйИдентификаторФормы);

КонецПроцедуры

Процедура ПерепроведениеДокументов(Параметры, АдресХранилища) Экспорт
	
	РезультатОбработки = ВыполнитьПерепроведение(Параметры);
	
	ПоместитьВоВременноеХранилище(РезультатОбработки, АдресХранилища);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ВывестиСообщенияПользователю(ТаблицаСообщений, РезультатОбработки, ОрганизацияДляЗаголовка, ДатаНачала, ДатаОкончания)

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Отчет_об_ошибках_группового_перепроведения_документов";
	
	Макет = УправлениеПечатью.ПолучитьМакет("Обработка.ГрупповоеПерепроведениеДокументов.ОписаниеОшибок");
	
	ОбластьШапка 	= Макет.ПолучитьОбласть("Шапка");

	ОбластьШапка.Параметры.Организация = ОрганизацияДляЗаголовка;
	
	Если ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаОкончания) Тогда
		ОбластьШапка.Параметры.ПериодПерепроведения = ПредставлениеПериода(ДатаНачала, ДатаОкончания);
	ИначеЕсли ЗначениеЗаполнено(ДатаНачала) Тогда
		ОбластьШапка.Параметры.ПериодПерепроведения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 - ...'"), Формат(ДатаНачала, ?(ДатаНачала = НачалоДня(ДатаНачала), "ДЛФ=Д", "ДЛФ=ДВ")));
	ИначеЕсли ЗначениеЗаполнено(ДатаОкончания) Тогда
		ОбластьШапка.Параметры.ПериодПерепроведения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '... - %1'"), 
			Формат(ДатаОкончания, ?(ДатаОкончания = НачалоДня(ДатаОкончания) 
										ИЛИ ДатаОкончания = КонецДня(ДатаОкончания), "ДЛФ=Д", "ДЛФ=ДВ")));
	КонецЕсли;

	ОбластьШапка.Параметры.ПроведеноДокументов 	= РезультатОбработки.ПроведеноДокументов;
	ОбластьШапка.Параметры.НеУдалосьПровести 	= РезультатОбработки.НеУдалосьПровести;

	ТабДокумент.Вывести(ОбластьШапка);	
	
	ОбластьГруппаОшибки 	= Макет.ПолучитьОбласть("ГруппаОшибки");
	ОбластьГруппаИнформация = Макет.ПолучитьОбласть("ГруппаИнформация");
	ОбластьСсылка 	= Макет.ПолучитьОбласть("Ссылка");
	ОбластьТекст2 	= Макет.ПолучитьОбласть("ТекстВторогоУровня");
	
	ТекущийКлючДанных = Неопределено;
	
	// Выводим в отчет в иерархическом виде:
	//	- группа сообщений (ошибки, информация) - если есть несколько типов сообщений
	//		- документ
	//  		- сообщения по этому документу
	
	ТаблицаСообщений.Сортировать("ТипСообщения, НомерСообщения");
	
	Сч = 0;
	КоличествоСообщений = ТаблицаСообщений.Количество();
	Если КоличествоСообщений > 0 Тогда
		ЕстьСообщенияРазныхТипов = ТаблицаСообщений[КоличествоСообщений - 1].ТипСообщения <> 0;
	КонецЕсли;
	
	Пока Сч < КоличествоСообщений Цикл
	
		СтрокаТаблицы = ТаблицаСообщений[Сч];
		
		ТекущийТипСообщения = СтрокаТаблицы.ТипСообщения;
		
		Если ЕстьСообщенияРазныхТипов Тогда
			Если ТекущийТипСообщения = 0 Тогда // Ошибка
				ТабДокумент.Вывести(ОбластьГруппаОшибки);
			Иначе
				ТабДокумент.Вывести(ОбластьГруппаИнформация);
			КонецЕсли;
		
			ТабДокумент.НачатьГруппуСтрок();
		КонецЕсли;
		
		НомерПП = 0;
		
		Пока Сч < КоличествоСообщений
			И ТекущийТипСообщения = ТаблицаСообщений[Сч].ТипСообщения Цикл
		
			НомерПП = НомерПП + 1;
			
			СтрокаТаблицы = ТаблицаСообщений[Сч];
			
			ТекущийКлючДанных = СтрокаТаблицы.КлючДанных;
		
		    // Выводим документ и все его сообщения
		    ОбластьСсылка.Параметры.НомерПП			= НомерПП;
	    	ОбластьСсылка.Параметры.Ссылка 			= СтрокаТаблицы.КлючДанных;
		    ОбластьСсылка.Параметры.Представление 	= Строка(СтрокаТаблицы.КлючДанных);
		    ТабДокумент.Вывести(ОбластьСсылка);
		    ТабДокумент.НачатьГруппуСтрок();
			
		    ВложенныйНомерПП = 0;
		    
		    Пока Сч < КоличествоСообщений
		    	И ТекущийТипСообщения = ТаблицаСообщений[Сч].ТипСообщения
		    	И ТекущийКлючДанных = ТаблицаСообщений[Сч].КлючДанных Цикл
		    
		    	ВложенныйНомерПП = ВложенныйНомерПП + 1;
		    	
		    	СтрокаТаблицы = ТаблицаСообщений[Сч];

	    		// Если документ сообщил о нескольких ошибках, то будем выводить для них субномера.
		    	Если ВложенныйНомерПП = 1 
		    		И (Сч = КоличествоСообщений - 1  // Это последнее сообщение в таблице или следующее сообщение относится к другом типу/документу.
		    				ИЛИ ТаблицаСообщений[Сч + 1].КлючДанных <> ТекущийКлючДанных
		    				ИЛИ ТаблицаСообщений[Сч + 1].ТипСообщения <> ТекущийТипСообщения)  Тогда
		    		ОбластьТекст2.Параметры.НомерПП = "";
		    	Иначе
		    		ОбластьТекст2.Параметры.НомерПП	= Формат(НомерПП, "ЧГ=") + "." + Формат(ВложенныйНомерПП, "ЧГ=");
		    	КонецЕсли;
		    	ОбластьТекст2.Параметры.Текст 				= СтрокаТаблицы.Сообщение.Текст;
		    	ОбластьТекст2.Параметры.Расшифровка 		= СтрокаТаблицы.Сообщение;
		    	
		    	ТабДокумент.Вывести(ОбластьТекст2);
		    	
		    	Сч = Сч + 1;
		    КонецЦикла; // по сообщениям одного документа
		    
		    ТабДокумент.ЗакончитьГруппуСтрок();
		
		КонецЦикла; // по документам
		
		Если ЕстьСообщенияРазныхТипов Тогда
	    	ТабДокумент.ЗакончитьГруппуСтрок();
	    КонецЕсли;
		
	КонецЦикла; // по типам сообщений
	
	Возврат ТабДокумент;

КонецФункции

Функция ПустаяТаблицаСообщенийПользователю()

	ОписаниеТиповЧисло = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(10, 0));

	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("КлючДанных");
	Результат.Колонки.Добавить("Сообщение");
	Результат.Колонки.Добавить("ТипСообщения",   ОписаниеТиповЧисло); // 0 - ошибка, 1 - информация
	Результат.Колонки.Добавить("НомерСообщения", ОписаниеТиповЧисло); // для последующей сортировки в пределах типа сообщения
	
	Возврат Результат;

КонецФункции

Процедура ДобавитьСообщениеПользователюВТаблицу(ТаблицаСообщений, НовоеСообщение, СсылкаНаДокумент, ЭтоОшибка)

	СтрокаТаблицы 					= ТаблицаСообщений.Добавить();
	Если НЕ ЗначениеЗаполнено(НовоеСообщение.КлючДанных) Тогда
		СтрокаТаблицы.КлючДанных 	= СсылкаНаДокумент;
		НовоеСообщение.КлючДанных	= СсылкаНаДокумент;
	Иначе
		СтрокаТаблицы.КлючДанных 	= НовоеСообщение.КлючДанных;
	КонецЕсли;
	СтрокаТаблицы.Сообщение 		= НовоеСообщение;
	СтрокаТаблицы.ТипСообщения 		= ?(ЭтоОшибка, 0, 1);
	СтрокаТаблицы.НомерСообщения	= ТаблицаСообщений.Количество();

КонецПроцедуры

Процедура ЗапомнитьСообщенияПользователю(ТаблицаСообщений, ТекстПричины, СсылкаНаДокумент, ЭтоОшибка = Истина)

	СообщенияПользователю = ПолучитьСообщенияПользователю(Истина);
	КоличествоСообщений = СообщенияПользователю.Количество();
	
	Если КоличествоСообщений > 0 Тогда
		Для ИндексСообщения = 0 По КоличествоСообщений - 1 Цикл
			ДобавитьСообщениеПользователюВТаблицу(ТаблицаСообщений, СообщенияПользователю[ИндексСообщения], СсылкаНаДокумент, ЭтоОшибка);
		КонецЦикла;
	ИначеЕсли ЭтоОшибка Тогда
		// Документ сам о себе ничего не сказал, поэтому выводим общий текст сообщения о том,
		// что возникла ошибка.
		Если ЗначениеЗаполнено(ТекстПричины) Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Обработка документа %1 не выполнена по причине: 
				|%2'"),
				Строка(СсылкаНаДокумент), ТекстПричины);
		Иначе
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При обработке документа %1 возникла ошибка!'"),
				Строка(СсылкаНаДокумент));
		КонецЕсли;
	
		НовоеСообщение 				= Новый СообщениеПользователю();
		НовоеСообщение.КлючДанных 	= СсылкаНаДокумент;
		НовоеСообщение.Текст 		= ТекстСообщения;
		
		ДобавитьСообщениеПользователюВТаблицу(ТаблицаСообщений, НовоеСообщение, СсылкаНаДокумент, ЭтоОшибка);
	
	КонецЕсли;

КонецПроцедуры

Процедура ОпределитьГраницыПериода(МассивОрганизаций, ДатаНачала, ДатаОкончания)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организации", МассивОрганизаций);
	
	Если НЕ ЗначениеЗаполнено(ДатаНачала) Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Хозрасчетный.Период
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Организация В(&Организации)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Хозрасчетный.Период";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДатаНачала = Выборка.Период;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Хозрасчетный.Период
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Организация В(&Организации)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Хозрасчетный.Период УБЫВ";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДатаОкончания = Выборка.Период;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ОтменитьПроведениеРегламентныхОпераций(Параметры, РегДокументы, ТаблицаСообщений)

	// Документы "Регламентная операция" при групповом проведении делаем неактуальными.
	// При вызове из закрытия месяца сбрасываем активность у движений регистров, 
	// иначе полностью их очищаем.
	// При отмене регламентных операций последовательность не сдвигаем, чтобы можно было  
	// использовать сведения о ее нарушении в основном цикле перепроведения.
	Для Каждого СтрокаДокумента Из РегДокументы Цикл
		Отказ = Ложь;
		Попытка
			ОперацияОбъект = СтрокаДокумента.Ссылка.ПолучитьОбъект();
			ОперацияОбъект.ОтменитьОперацию(Ложь, Отказ, НЕ Параметры.ЭтоЗакрытиеМесяца, Ложь);
			Если Отказ Тогда
				// При отказе могло быть выдано сообщение пользователю, сохраним его
				ЗапомнитьСообщенияПользователю(ТаблицаСообщений, "", СтрокаДокумента.Ссылка);
			КонецЕсли;
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			ЗапомнитьСообщенияПользователю(ТаблицаСообщений, ТекстОшибки, СтрокаДокумента.Ссылка);
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

Процедура ОтменитьПроведениеРегламентныхДокументовНДС(Параметры, РегДокументыНДС, ТаблицаСообщений)

	// Отменяем проведение регламентных документов по НДС
	Для Каждого СтрокаДокумента Из РегДокументыНДС Цикл
		Попытка
			СтрокаДокумента.Ссылка.ПолучитьОбъект().Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			ЗапомнитьСообщенияПользователю(ТаблицаСообщений, ТекстОшибки, СтрокаДокумента.Ссылка);
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

Функция ВыполнитьРегламентныеОперацииЗаМесяц(ТаблицаОрганизаций, ТаблицаРегламентныеОперации, РезультатОбработки, ТаблицаСообщений, ОстанавливатьсяПоОшибке)
	
	Проведено = 0;
	НеУдалось = 0;
	
	// Регламентные операции в выборке расположены в порядке, 
	// соответствующем их выполнению при закрытии месяца.
	
	Для Каждого СтрокаДокумента Из ТаблицаРегламентныеОперации Цикл

		ТекстСообщения = "";
		ДокументОбъект = СтрокаДокумента.Ссылка.ПолучитьОбъект();

		Попытка
			Если ДокументОбъект.ВыполнитьОперацию() Тогда
				Проведено = Проведено + 1;
				// При проведении документ может выдать информационные сообщения, 
				// не мешающие проведению, запомним их для вывода в отчет.
				ЗапомнитьСообщенияПользователю(ТаблицаСообщений, "", СтрокаДокумента.Ссылка, Ложь);
			Иначе
				Если ДокументОбъект.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.ВыполненоСОшибками Тогда
					ТекстСообщения = НСтр("ru = '%1 выполнена с ошибками!'");
				Иначе
					ТекстСообщения = НСтр("ru = '%1 операция не выполнена!'");
				КонецЕсли;

				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстСообщения, 
					Строка(ДокументОбъект));
			КонецЕсли;
		Исключение
			ТекстСообщения = ОписаниеОшибки();
		КонецПопытки;

		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			НеУдалось = НеУдалось + 1;
			ЗапомнитьСообщенияПользователю(ТаблицаСообщений, ТекстСообщения, СтрокаДокумента.Ссылка);
			
			// Отметим в таблице организаций факт того, что не удалось выполнить
			СтрокаОрганизации = ТаблицаОрганизаций.Найти(СтрокаДокумента.Организация, "Организация");
			Если СтрокаОрганизации <> Неопределено Тогда
				Если СтрокаОрганизации.ПроведенВХронологическойПоследовательности Тогда
					СтрокаОрганизации.ПроведенВХронологическойПоследовательности = Ложь;
					СтрокаОрганизации.НоваяДатаНарушенияПоследовательности = КонецМесяца(СтрокаДокумента.Дата);
				КонецЕсли;
			КонецЕсли;
			
			Если ОстанавливатьсяПоОшибке Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;
	
	РезультатОбработки.ПроведеноДокументов 	= РезультатОбработки.ПроведеноДокументов + Проведено;
	РезультатОбработки.НеУдалосьПровести	= РезультатОбработки.НеУдалосьПровести + НеУдалось;
	
	Возврат НеУдалось = 0;
	
КонецФункции

Функция ПровестиРегламентныеДокументыЗаМесяцПоНДС(РегДокументыНДС, РезультатОбработки, ТаблицаСообщений, ОстанавливатьсяПоОшибке)
	
	Проведено = 0;
	НеУдалось = 0;
	
	Для Каждого СтрокаДокумента Из РегДокументыНДС Цикл		
	
		Успешно = Истина;
		ТекстСообщения = "";
		ДокументОбъект = СтрокаДокумента.Ссылка.ПолучитьОбъект();
		
		Попытка
			Если ДокументОбъект.ПроверитьЗаполнение() Тогда
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
				Проведено = Проведено + 1;
				// При проведении документ может выдать информационные сообщения, 
				// не мешающие проведению, запомним их для вывода в отчет.
				ЗапомнитьСообщенияПользователю(ТаблицаСообщений, "", СтрокаДокумента.Ссылка, Ложь);
			Иначе
				Успешно = Ложь;
			КонецЕсли;
		Исключение
			ТекстСообщения = ОписаниеОшибки();
			Успешно = Ложь;
		КонецПопытки;

		Если НЕ Успешно Тогда
			НеУдалось = НеУдалось + 1;
			ЗапомнитьСообщенияПользователю(ТаблицаСообщений, ТекстСообщения, СтрокаДокумента.Ссылка);
			Если ОстанавливатьсяПоОшибке Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;
	
	РезультатОбработки.ПроведеноДокументов 	= РезультатОбработки.ПроведеноДокументов + Проведено;
	РезультатОбработки.НеУдалосьПровести	= РезультатОбработки.НеУдалосьПровести + НеУдалось;
	
	Возврат НеУдалось = 0;
	
КонецФункции

Функция ПровестиПервичныйДокумент(ВыборкаПоДокументам, ПроведенВХронологическойПоследовательности, ТаблицаСообщений)

	Успешно = Истина;

	Попытка
	
		// Обычное перепроведение документа
		ДокументОбъект = ВыборкаПоДокументам.Ссылка.ПолучитьОбъект();
		
		ДокументОбъект.ДополнительныеСвойства.Вставить("ГрупповоеПерепроведение", Истина);
		ДокументОбъект.ДополнительныеСвойства.Вставить("ПроведенВХронологическойПоследовательности", ПроведенВХронологическойПоследовательности);
		
		Если ДокументОбъект.ПроверитьЗаполнение() Тогда
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			// При проведении документ может выдать информационные сообщения, 
			// не мешающие проведению, запомним их для вывода в отчет.
			ЗапомнитьСообщенияПользователю(ТаблицаСообщений, "", ВыборкаПоДокументам.Ссылка, Ложь);
		Иначе
			Успешно = Ложь;
			ЗапомнитьСообщенияПользователю(ТаблицаСообщений, "", ВыборкаПоДокументам.Ссылка);
		КонецЕсли;
		
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		ЗапомнитьСообщенияПользователю(ТаблицаСообщений, ТекстОшибки, ВыборкаПоДокументам.Ссылка);

		Успешно = Ложь;

	КонецПопытки;

	Возврат Успешно;

КонецФункции

Функция УстановитьСостояниеПоследовательности(Регистратор, Период, Организация, НовоеСостояние, ТаблицаСообщений)

	Успешно = Истина;

	НаборЗаписейПоследовательности = Последовательности.ДокументыОрганизаций.СоздатьНаборЗаписей();
	
	НачатьТранзакцию();
	Попытка
		РаботаСПоследовательностями.УстановитьБлокировкуНабораЗаписейПоследовательностиПоРегистратору(Регистратор);
		
		НаборЗаписейПоследовательности.Отбор.Регистратор.Установить(Регистратор, Истина);
		
		НаборЗаписейПоследовательности.Прочитать();
		ЕстьЗаписьПоОрганизации = Ложь;
		Для Каждого Движение Из НаборЗаписейПоследовательности Цикл
			Если Движение.Организация = Организация Тогда
				Движение.СостояниеПроведения = НовоеСостояние;
				ЕстьЗаписьПоОрганизации = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЕстьЗаписьПоОрганизации Тогда
			Движение = НаборЗаписейПоследовательности.Добавить();
			Движение.Период 		= Период;
			Движение.Регистратор	= Регистратор;
			Движение.Организация	= Организация;
			Движение.СостояниеПроведения = НовоеСостояние;
		КонецЕсли;
		
		НаборЗаписейПоследовательности.Записать();
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		ОтменитьТранзакцию();
		
		ЗапомнитьСообщенияПользователю(ТаблицаСообщений, ТекстОшибки, Регистратор);
		Успешно = Ложь;

	КонецПопытки;
	
	Возврат Успешно;

КонецФункции

Функция ИсключитьИзПоследовательности(ВыборкаПоДокументам, ТаблицаСообщений)

	Успешно = Истина;

	НаборЗаписейПоследовательности = Последовательности.ДокументыОрганизаций.СоздатьНаборЗаписей();

	НаборЗаписейПоследовательности.Отбор.Регистратор.Установить(ВыборкаПоДокументам.Ссылка);

	НачатьТранзакцию();
	Попытка
		РаботаСПоследовательностями.УстановитьБлокировкуНабораЗаписейПоследовательностиПоРегистратору(ВыборкаПоДокументам.Ссылка);
		
		НаборЗаписейПоследовательности.Прочитать();
		ВГраница = НаборЗаписейПоследовательности.Количество() - 1;
		Для Сч = 0 По ВГраница Цикл
			Движение = НаборЗаписейПоследовательности[ВГраница - Сч];
			Если Движение.Организация = ВыборкаПоДокументам.Организация Тогда
				НаборЗаписейПоследовательности.Удалить(Движение);
			КонецЕсли;
		КонецЦикла;
		
		НаборЗаписейПоследовательности.Записать();
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		ОтменитьТранзакцию();
		
		ЗапомнитьСообщенияПользователю(ТаблицаСообщений, ТекстОшибки, ВыборкаПоДокументам.Ссылка);
		Успешно = Ложь;

	КонецПопытки;

	Возврат Успешно;

КонецФункции

Процедура ВосстановитьСостояниеРегламентныхОпераций(РегДокументы, Параметры, ТаблицаСообщений)

	// Восстанавливаем состояние регламентных операций, которое было до начала перепроведения.
	Успешно = Истина;
	
	Для Каждого СтрокаДокумента Из РегДокументы Цикл
		Попытка
				
			ОперацияОбъект = СтрокаДокумента.Ссылка.ПолучитьОбъект();
			
			Успешно = Успешно И ОперацияОбъект.ВосстановитьОперацию(СтрокаДокумента.Состояние);
				
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			Успешно = Ложь;
			ЗапомнитьСообщенияПользователю(ТаблицаСообщений, ТекстОшибки, СтрокаДокумента.Ссылка);
		КонецПопытки;
	КонецЦикла;

	// Отмечаем все операции, как неактуальные, т.к. в результате перепроведения
	// первичных документов исходные данные регламентных операций могли измениться.
	Если Успешно Тогда
		РегистрыСведений.НеактуальныеРегламентныеОперации.СдвинутьГраницуАктуальностиНазад(
			Параметры.Организация, НачалоМесяца(Параметры.ДатаОкончания), 0, Неопределено);
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьТекстЗапросаВсеДокументы(Параметры, ТекстЗапросаПервыйМесяц, ТекстЗапросаПоследующиеМесяцы, НомераТаблиц)

	НомераТаблиц.Вставить("РегламетныеОперацииНДС", НомераТаблиц.Количество());

	ТекстЗапросаПервыйМесяц = 
	"ВЫБРАТЬ
	|	Журнал.Дата КАК Дата,
	|	Журнал.Ссылка КАК Ссылка,
	|	Журнал.Организация КАК Организация
	|ИЗ
	|	ЖурналДокументов.РегламентныеОперацииНДС КАК Журнал
	|ГДЕ
	|	Журнал.Проведен
	|	И Журнал.Организация = &Организация
	|	И Журнал.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Ссылка";
	
	ТекстЗапросаПервыйМесяц = ТекстЗапросаПервыйМесяц 
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета()
		+ ТекстЗапросаПоПервичнымДокументам(Параметры, НомераТаблиц);

	ТекстЗапросаПоследующиеМесяцы 	= ТекстЗапросаПервыйМесяц;

	// Устанавливаем отбор по периоду
	// Выборка данных осуществляется по-месячно по каждой организации, 
	// поэтому в тексте запроса фильтрацию на период устанавливает всегда.
	// Даты очередного периода будут переданы в запрос в качестве параметров.
	ТекстУсловияПериода1 = "";
	ТекстТабличнаяЧастьУсловияПериода1 = "";
	ТекстЗарплатаМесяцНачисленияУсловияПериода1 = "";
	ТекстЗарплатаПериодРегистрацииУсловияПериода1 = "";
	ТекстВводОстатковУсловияПериода1 = "";

	ТекстУсловияПериода2 = "";
	ТекстТабличнаяЧастьУсловияПериода2 = "";
	ТекстЗарплатаМесяцНачисленияУсловияПериода2 = "";
	ТекстЗарплатаПериодРегистрацииУсловияПериода2 = "";
	ТекстВводОстатковУсловияПериода2 = "";
	
	// Если первым документом-нарушителем последовательности является 
	// ввод начальных остатков (такое может быть в первом месяце начала ведения учета),
	// то при этом начинать перепроведение надо с самого первого документа за первый месяц,
	// поэтому в этом случае отбор по ссылке ввода начальных остатков не устанавливаем.
	
	ЕстьОтборПоСсылке = Истина;
	Если НЕ ЗначениеЗаполнено(Параметры.МоментНачала.Ссылка)
		ИЛИ ТипЗнч(Параметры.МоментНачала.Ссылка) = Тип("ДокументСсылка.ВводНачальныхОстатков") Тогда
		ЕстьОтборПоСсылке = Ложь;
	КонецЕсли;
	
	Если ЕстьОтборПоСсылке Тогда
		ТекстУсловияПериода1 	= "(Журнал.Дата = &ДатаНачала И Журнал.Ссылка >= &НачальнаяСсылка ИЛИ Журнал.Дата > &ДатаНачала) 
									| И Журнал.Дата <= &ДатаОкончания";
		ТекстУсловияПериода2 	= "Журнал.Дата >= &ДатаНачала И Журнал.Дата <= &ДатаОкончания";
		
		ТекстЗарплатаМесяцНачисленияУсловияПериода1 = "(КОНЕЦПЕРИОДА(Журнал.МесяцНачисления, МЕСЯЦ) = &ДатаНачала 
			| 		И Журнал.Ссылка >= &НачальнаяСсылка ИЛИ КОНЕЦПЕРИОДА(Журнал.МесяцНачисления, МЕСЯЦ) > &ДатаНачала) 
			| И КОНЕЦПЕРИОДА(Журнал.МесяцНачисления, МЕСЯЦ) <= &ДатаОкончания";

		ТекстЗарплатаМесяцНачисленияУсловияПериода2 = "КОНЕЦПЕРИОДА(Журнал.МесяцНачисления, МЕСЯЦ) >= &ДатаНачала 
			| И КОНЕЦПЕРИОДА(Журнал.МесяцНачисления, МЕСЯЦ) <= &ДатаОкончания";
	Иначе
		ТекстУсловияПериода1 	= "Журнал.Дата >= &ДатаНачала И Журнал.Дата <= &ДатаОкончания";
		ТекстУсловияПериода2 	= ТекстУсловияПериода1;
		
		ТекстЗарплатаМесяцНачисленияУсловияПериода1 = "КОНЕЦПЕРИОДА(Журнал.МесяцНачисления, МЕСЯЦ) >= &ДатаНачала 
			| И КОНЕЦПЕРИОДА(Журнал.МесяцНачисления, МЕСЯЦ) <= &ДатаОкончания";
		ТекстЗарплатаМесяцНачисленияУсловияПериода2 = ТекстЗарплатаМесяцНачисленияУсловияПериода1;
	КонецЕсли;

	ТекстТабличнаяЧастьУсловиеПериода1 = СтрЗаменить(ТекстУсловияПериода1, "Журнал.Дата", "СтрокиТЧ.Ссылка.Дата");
	ТекстТабличнаяЧастьУсловиеПериода1 = СтрЗаменить(ТекстТабличнаяЧастьУсловиеПериода1, "Журнал.Ссылка", "СтрокиТЧ.Ссылка");
	ТекстТабличнаяЧастьУсловиеПериода2 = СтрЗаменить(ТекстУсловияПериода2, "Журнал.Дата", "СтрокиТЧ.Ссылка.Дата");
	ТекстТабличнаяЧастьУсловиеПериода2 = СтрЗаменить(ТекстТабличнаяЧастьУсловиеПериода2, "Журнал.Ссылка", "СтрокиТЧ.Ссылка");

	ТекстПоследовательностьУсловиеПериода1 = СтрЗаменить(ТекстУсловияПериода1, ".Дата", ".Период");
	ТекстПоследовательностьУсловиеПериода2 = СтрЗаменить(ТекстУсловияПериода2, ".Дата", ".Период");
	
	ТекстПоследовательностьУсловиеПериода1 = СтрЗаменить(ТекстПоследовательностьУсловиеПериода1, ".Ссылка", ".Регистратор");
	ТекстПоследовательностьУсловиеПериода2 = СтрЗаменить(ТекстПоследовательностьУсловиеПериода2, ".Ссылка", ".Регистратор");
	
	ТекстЗарплатаПериодРегистрацииУсловияПериода1 = СтрЗаменить(ТекстЗарплатаМесяцНачисленияУсловияПериода1, ".МесяцНачисления", ".ПериодРегистрации");
	ТекстЗарплатаПериодРегистрацииУсловияПериода2 = СтрЗаменить(ТекстЗарплатаМесяцНачисленияУсловияПериода2, ".МесяцНачисления", ".ПериодРегистрации");

	ТекстВводОстатковУсловияПериода1 = СтрЗаменить(ТекстУсловияПериода1, "&ДатаНачала", "&ДатаПредМесяца");
	ТекстВводОстатковУсловияПериода2 = СтрЗаменить(ТекстУсловияПериода2, "&ДатаНачала", "&ДатаПредМесяца");

	ТекстЗапросаПервыйМесяц = СтрЗаменить(ТекстЗапросаПервыйМесяц, 
		"&УсловиеПериода", 	ТекстУсловияПериода1);
	ТекстЗапросаПервыйМесяц = СтрЗаменить(ТекстЗапросаПервыйМесяц, 
		"&ТабличнаяЧастьУсловиеПериода", ТекстТабличнаяЧастьУсловиеПериода1);
	ТекстЗапросаПервыйМесяц = СтрЗаменить(ТекстЗапросаПервыйМесяц, 
		"&ЗарплатаМесяцНачисленияУсловиеПериода", ТекстЗарплатаМесяцНачисленияУсловияПериода1);
	ТекстЗапросаПервыйМесяц = СтрЗаменить(ТекстЗапросаПервыйМесяц, 
		"&ЗарплатаПериодРегистрацииУсловиеПериода", ТекстЗарплатаПериодРегистрацииУсловияПериода1);
	ТекстЗапросаПервыйМесяц = СтрЗаменить(ТекстЗапросаПервыйМесяц, 
		"&ПоследовательностьУсловиеПериода", 	ТекстПоследовательностьУсловиеПериода1);
	ТекстЗапросаПервыйМесяц = СтрЗаменить(ТекстЗапросаПервыйМесяц, 
		"&ВводОстатковУсловиеПериода", 	ТекстВводОстатковУсловияПериода1);


	ТекстЗапросаПоследующиеМесяцы = СтрЗаменить(ТекстЗапросаПоследующиеМесяцы, 
		"&УсловиеПериода", 	ТекстУсловияПериода2);
	ТекстЗапросаПоследующиеМесяцы = СтрЗаменить(ТекстЗапросаПоследующиеМесяцы, 
		"&ТабличнаяЧастьУсловиеПериода", ТекстТабличнаяЧастьУсловиеПериода2);
	ТекстЗапросаПоследующиеМесяцы = СтрЗаменить(ТекстЗапросаПоследующиеМесяцы, 
		"&ЗарплатаМесяцНачисленияУсловиеПериода", ТекстЗарплатаМесяцНачисленияУсловияПериода2);
	ТекстЗапросаПоследующиеМесяцы = СтрЗаменить(ТекстЗапросаПоследующиеМесяцы, 
		"&ЗарплатаПериодРегистрацииУсловиеПериода", ТекстЗарплатаПериодРегистрацииУсловияПериода2);
	ТекстЗапросаПоследующиеМесяцы = СтрЗаменить(ТекстЗапросаПоследующиеМесяцы, 
		"&ПоследовательностьУсловиеПериода", 	ТекстПоследовательностьУсловиеПериода2);
	ТекстЗапросаПоследующиеМесяцы = СтрЗаменить(ТекстЗапросаПоследующиеМесяцы, 
		"&ВводОстатковУсловиеПериода", 	ТекстВводОстатковУсловияПериода2);

КонецПроцедуры

Функция ТекстЗапросаРегламентныеОперации()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Журнал.Дата КАК Дата,
	|	ВидыРегламентныхОпераций.Порядок КАК Порядок,
	|	Журнал.Ссылка КАК Ссылка,
	|	Журнал.Организация КАК Организация,
	|	ВидыРегламентныхОпераций.Ссылка КАК ВидОперации,
	|	Журнал.РучнаяКорректировка,
	|	Журнал.Состояние
	|ИЗ
	|	Документ.РегламентнаяОперация КАК Журнал
	|		ЛЕВОЕ СОЕДИНЕНИЕ Перечисление.ВидыРегламентныхОпераций КАК ВидыРегламентныхОпераций
	|		ПО Журнал.ВидОперации = ВидыРегламентныхОпераций.Ссылка
	|ГДЕ
	|	НЕ Журнал.ПометкаУдаления
	|	И Журнал.Организация В(&Организации)
	|	И Журнал.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И Журнал.Состояние <> ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.НеВыполнено)
	|	И Журнал.Состояние <> ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Пропущено)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Порядок,
	|	Ссылка";

	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаПоПервичнымДокументам(Параметры, НомераТаблиц)

	ДокументыНеТребующиеПерепроведения = БезусловноИсключаемыеИзПерепроведенияДокументы();

	НомераТаблиц.Вставить("ВТ_ВыплатаЗарплатыВКассу", 	НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВТ_ВыплатаЗарплатыВБанк", 	НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ПервичныеДокументы", 		НомераТаблиц.Количество());

	// Определяем документы, которые необходимо исключить из последовательности,
	// а также "Операции Бух", которые не проводятся, но тоже двигают последовательность.
	// Также отдельно обрабатываем зарплатные документы, т.к. ими движения формируются не 
	// по дате документа, а по ПериодуРегистрации или МесяцНачисления.
	
	// Возможные действия с документом:
	//  0 - исключить из последовательности
	//	1 - перепровести
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтрокиТЧ.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ВыплатаЗарплатыВКассу
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК СтрокиТЧ
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(СтрокиТЧ.Ведомость) = ТИП(Документ.ВедомостьНаВыплатуЗарплатыВКассу)
	|	И СтрокиТЧ.Ссылка.Организация = &Организация
	|	И &ТабличнаяЧастьУсловиеПериода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтрокиТЧ.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ВыплатаЗарплатыВБанк
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета.ПеречислениеЗаработнойПлаты КАК СтрокиТЧ
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(СтрокиТЧ.Ведомость) = ТИП(Документ.ВедомостьНаВыплатуЗарплатыВБанк)
	|	И СтрокиТЧ.Ссылка.Организация = &Организация
	|	И &ТабличнаяЧастьУсловиеПериода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Журнал.Период КАК Дата,
	|	Журнал.Регистратор КАК Ссылка,
	|	Журнал.Организация КАК Организация,
	|	ЛОЖЬ КАК РучнаяКорректировка,
	|	0 КАК ДействиеСДокументом
	|ИЗ
	|	Последовательность.ДокументыОрганизаций КАК Журнал
	|ГДЕ
	|	Журнал.Организация = &Организация
	|	И Журнал.СостояниеПроведения = ЗНАЧЕНИЕ(Перечисление.СостоянияПроведенияВПоследовательности.ИсключенИзПоследовательности)
	|	И &ПоследовательностьУсловиеПериода
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Журнал.Дата,
	|	Журнал.Ссылка,
	|	Журнал.Организация,
	|	ИСТИНА,
	|	ВЫБОР
	|		КОГДА Журнал.ПометкаУдаления
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ
	|ИЗ
	|	Документ.ОперацияБух КАК Журнал
	|ГДЕ
	|	Журнал.Организация = &Организация
	|	И &УсловиеПериода
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Журнал.Период,
	|	Журнал.Регистратор,
	|	Журнал.Организация,
	|	ИСТИНА,
	|	ВЫБОР
	|		КОГДА УстановкаЦенНоменклатуры.Проведен
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|ИЗ
	|	Последовательность.ДокументыОрганизаций КАК Журнал
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УстановкаЦенНоменклатуры КАК УстановкаЦенНоменклатуры
	|		ПО Журнал.Регистратор = УстановкаЦенНоменклатуры.Ссылка
	|ГДЕ
	|	Журнал.Организация = &Организация
	|	И Журнал.СостояниеПроведения = ЗНАЧЕНИЕ(Перечисление.СостоянияПроведенияВПоследовательности.ПроведенСНарушениемПоследовательности)
	|	И &ПоследовательностьУсловиеПериода
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Журнал.Дата,
	|	Журнал.Ссылка,
	|	Журнал.Организация,
	|	Журнал.РучнаяКорректировка,
	|	ВЫБОР
	|		КОГДА НЕ Журнал.Проведен
	|			ТОГДА 0
	|		КОГДА Журнал.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям)
	|				ИЛИ Журнал.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику)
	|			ТОГДА ВЫБОР
	|					КОГДА &ИспользуетсяПодсистемаУчетаЗарплатыИКадров
	|						ТОГДА ВЫБОР
	|								КОГДА ТИПЗНАЧЕНИЯ(Журнал.ПлатежнаяВедомость) = ТИП(Документ.ВедомостьНаВыплатуЗарплатыВКассу)
	|									ТОГДА 0
	|								КОГДА НЕ ВТ_ВыплатаЗарплатыВКассу.Ссылка ЕСТЬ NULL 
	|									ТОГДА 0
	|								ИНАЧЕ 1
	|							КОНЕЦ
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК Журнал
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВыплатаЗарплатыВКассу КАК ВТ_ВыплатаЗарплатыВКассу
	|		ПО Журнал.Ссылка = ВТ_ВыплатаЗарплатыВКассу.Ссылка
	|ГДЕ
	|	Журнал.Организация = &Организация
	|	И &УсловиеПериода
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Журнал.Дата,
	|	Журнал.Ссылка,
	|	Журнал.Организация,
	|	Журнал.РучнаяКорректировка,
	|	ВЫБОР
	|		КОГДА НЕ Журнал.Проведен
	|			ТОГДА 0
	|		КОГДА Журнал.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП)
	|				ИЛИ Журнал.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику)
	|			ТОГДА ВЫБОР
	|					КОГДА &ИспользуетсяПодсистемаУчетаЗарплатыИКадров
	|						ТОГДА ВЫБОР
	|								КОГДА ТИПЗНАЧЕНИЯ(Журнал.ПлатежнаяВедомость) = ТИП(Документ.ВедомостьНаВыплатуЗарплатыВБанк)
	|									ТОГДА 0
	|								КОГДА НЕ ВТ_ВыплатаЗарплатыВБанк.Ссылка ЕСТЬ NULL 
	|									ТОГДА 0
	|								ИНАЧЕ 1
	|							КОНЕЦ
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК Журнал
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВыплатаЗарплатыВБанк КАК ВТ_ВыплатаЗарплатыВБанк
	|		ПО Журнал.Ссылка = ВТ_ВыплатаЗарплатыВБанк.Ссылка
	|ГДЕ
	|	Журнал.Организация = &Организация
	|	И &УсловиеПериода";
	
	Если УчетЗарплаты.ИспользуетсяПодсистемаУчетаЗарплатыИКадров() Тогда
		
		Если Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.Получить() Тогда
			
			ТекстЗапроса = ТекстЗапроса + 
			"
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	КОНЕЦПЕРИОДА(Журнал.ПериодРегистрации, МЕСЯЦ) КАК Дата,
			|	Журнал.Ссылка КАК Ссылка,
			|	Журнал.Организация,
			|	ЛОЖЬ КАК РучнаяКорректировка,
			|	ВЫБОР
			|		КОГДА Журнал.Проведен
			|			ТОГДА 1
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК ДействиеСДокументом
			|ИЗ
			|	Документ.ОтражениеЗарплатыВБухучете КАК Журнал
			|ГДЕ
			|	Журнал.Организация = &Организация
			|	И &ЗарплатаПериодРегистрацииУсловиеПериода
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	КОНЕЦПЕРИОДА(Журнал.ПериодРегистрации, МЕСЯЦ) КАК Дата,
			|	Журнал.Ссылка КАК Ссылка,
			|	Журнал.Организация,
			|	Журнал.РучнаяКорректировка КАК РучнаяКорректировка,
			|	ВЫБОР
			|		КОГДА Журнал.Проведен
			|			ТОГДА 1
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК ДействиеСДокументом
			|ИЗ
			|	Документ.ОтражениеЗарплатыВУчете КАК Журнал
			|ГДЕ
			|	Журнал.Организация = &Организация
			|	И &ЗарплатаПериодРегистрацииУсловиеПериода
			|";
		Иначе
			// При включении учета зарплаты в "этой" программе (БП) надо исключить
			// из перепроведения документы выплаты зарплаты, которые могли быть введены,
			// когда настройка была "Учет во внешней программе".
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВедомостьНаВыплатуЗарплатыВБанк", "ВедомостьНаВыплатуЗарплаты"); 
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВедомостьНаВыплатуЗарплатыВКассу", "ВедомостьНаВыплатуЗарплаты");
			
			ТекстЗапроса = ТекстЗапроса + 
			"
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	КОНЕЦПЕРИОДА(Журнал.МесяцНачисления, МЕСЯЦ) КАК Дата,
			|	Журнал.Ссылка КАК Ссылка,
			|	Журнал.Организация,
			|	ЛОЖЬ КАК РучнаяКорректировка,
			|	ВЫБОР
			|		КОГДА Журнал.Проведен
			|			ТОГДА 1
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК ДействиеСДокументом
			|ИЗ
			|	Документ.НачислениеЗарплаты КАК Журнал
			|ГДЕ
			|	Журнал.Организация = &Организация
			|	И &ЗарплатаМесяцНачисленияУсловиеПериода
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	КОНЕЦПЕРИОДА(Журнал.ПериодРегистрации, МЕСЯЦ) КАК Дата,
			|	Журнал.Ссылка КАК Ссылка,
			|	Журнал.Организация,
			|	ЛОЖЬ КАК РучнаяКорректировка,
			|	ВЫБОР
			|		КОГДА Журнал.Проведен
			|			ТОГДА 1
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК ДействиеСДокументом
			|ИЗ
			|	Документ.БольничныйЛист КАК Журнал
			|ГДЕ
			|	Журнал.Организация = &Организация
			|	И &ЗарплатаПериодРегистрацииУсловиеПериода
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	КОНЕЦПЕРИОДА(Журнал.ПериодРегистрации, МЕСЯЦ) КАК Дата,
			|	Журнал.Ссылка КАК Ссылка,
			|	Журнал.Организация,
			|	ЛОЖЬ КАК РучнаяКорректировка,
			|	ВЫБОР
			|		КОГДА Журнал.Проведен
			|			ТОГДА 1
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК ДействиеСДокументом
			|ИЗ
			|	Документ.Отпуск КАК Журнал
			|ГДЕ
			|	Журнал.Организация = &Организация
			|	И &ЗарплатаПериодРегистрацииУсловиеПериода
			|";
		КонецЕсли;
		
		// Начисление оценочных обязательств по отпускам доступно и при ведении учета зарплаты
		// в "этой" программе (БП) и при ведении учета во внешней программе.
		ТекстЗапроса = ТекстЗапроса + 
		"
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КОНЕЦПЕРИОДА(Журнал.ПериодРегистрации, МЕСЯЦ) КАК Дата,
		|	Журнал.Ссылка КАК Ссылка,
		|	Журнал.Организация,
		|	ЛОЖЬ КАК РучнаяКорректировка,
		|	ВЫБОР
		|		КОГДА Журнал.Проведен
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ДействиеСДокументом
		|ИЗ
		|	Документ.НачислениеОценочныхОбязательствПоОтпускам КАК Журнал
		|ГДЕ
		|	Журнал.Организация = &Организация
		|	И &ЗарплатаПериодРегистрацииУсловиеПериода
		|";
		
	КонецЕсли;
		
	Если Параметры.ЭтоЗакрытиеМесяца ИЛИ Параметры.ЭтоПомощникПоУчетуНДС Тогда
		// При восстановлении последовательности документы "Ввод начальных остатков"
		// с датами от предыдущего месяца обрабыватываем как документ с ручной корректировкой, 
		// т.е. сам по себе документ не перепроводим, а только меняем его состояние в последовательности.
		// Такие документы нарушают последовательность, начиная с первого дня следующего месяца (после себя).
		ТекстЗапроса = ТекстЗапроса + 
		"
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(Журнал.Дата, МЕСЯЦ), СЕКУНДА, 1) КАК Дата,
		|	Журнал.Ссылка КАК Ссылка,
		|	Журнал.Организация КАК Организация,
		|	ИСТИНА КАК РучнаяКорректировка,
		|	ВЫБОР
		|		КОГДА Журнал.Проведен
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ДействиеСДокументом
		|ИЗ
		|	Документ.ВводНачальныхОстатков КАК Журнал
		|ГДЕ
		|	Журнал.Организация = &Организация
		|	И &ВводОстатковУсловиеПериода
		|";
	КонецЕсли;
	
	Для Каждого МетаданныеДокумента Из Метаданные.Документы Цикл

		// У некоторых ролей нет прав на отдельные документы
		Если НЕ РольДоступна("ПолныеПрава") Тогда
			Если НЕ ПравоДоступа("Чтение", МетаданныеДокумента) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		ИмяДокумента = МетаданныеДокумента.Имя;

		//Отсекаем документы, которые не следует перепроводить
		Если ДокументыНеТребующиеПерепроведения.Свойство(ИмяДокумента) Тогда
			Продолжить;
		КонецЕсли;

		// Отсечь документы с префиксом Удалить
		Если Найти(МетаданныеДокумента.Имя, "Удалить") = 1 Тогда
			Продолжить;
		КонецЕсли;
		
		Если МетаданныеДокумента.Проведение <> Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда
			Продолжить;
		КонецЕсли;
		
		Если МетаданныеДокумента.Движения.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если МетаданныеДокумента.Реквизиты.Найти("Организация") = Неопределено Тогда
			// Документы без организации могут быть добавлены на конкретном внедрении у пользователей,
			// но они не могут влиять на последовательность и учетные данные в регистрах, 
			// т.к. организация является ключевым измерением.
			// Поэтому такие документы не перепроводим.
			Продолжить;
		КонецЕсли;
		
		ЕстьРучнаяКорректировка = МетаданныеДокумента.Реквизиты.Найти("РучнаяКорректировка") <> Неопределено;
				
		Если ИмяДокумента = "НачислениеЗарплаты"
			ИЛИ ИмяДокумента = "ОтражениеЗарплатыВБухучете"
			ИЛИ ИмяДокумента = "ОтражениеЗарплатыВУчете" 
			ИЛИ ИмяДокумента = "БольничныйЛист" 
			ИЛИ ИмяДокумента = "Отпуск" 
			ИЛИ ИмяДокумента = "НачислениеОценочныхОбязательствПоОтпускам" 
			Тогда
			// Зарплатные документы проводятся по месяцу начисления, а не по дате, 
			// поэтому их обрабатываем отдельно.
			Продолжить;
		ИначеЕсли ИмяДокумента = "РасходныйКассовыйОрдер"
			ИЛИ ИмяДокумента = "СписаниеСРасчетногоСчета" Тогда
			// Ввиду того что документами может выплачиваться зарплата в зависимости 
			// от способа учета зарплаты в/вне программы,  их обрабатываем отдельно.
			Продолжить;
		Иначе
			ПолеДата = "Дата";
			ПолеУсловиеПериода = "&УсловиеПериода";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ 
			|	Журнал.Дата КАК Дата,
			|	Журнал.Ссылка КАК Ссылка, 
			|	Журнал.Организация КАК Организация,
			|	" + ?(ЕстьРучнаяКорректировка, "РучнаяКорректировка", "ЛОЖЬ") + " КАК РучнаяКорректировка,
			|	ВЫБОР
			|		КОГДА Журнал.Проведен
			|			ТОГДА 1
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК ДействиеСДокументом
			|ИЗ Документ." + ИмяДокумента + " КАК Журнал
			|ГДЕ 
			|	Журнал.Организация = &Организация  // Все оставшиеся в списке перепроводимых документы имеют реквизит Организация
			|	И &УсловиеПериода" 
			+ ?(ИмяДокумента = "СчетФактураВыданный", "
				|	И Журнал.ВидСчетаФактуры <> ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаРеализацию)
				|	И Журнал.ВидСчетаФактуры <> ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)", "")
			+ ?(ИмяДокумента = "СчетФактураПолученный", "
				|	И Журнал.ВидСчетаФактуры <> ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.НаПоступление)
				|	И Журнал.ВидСчетаФактуры <> ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный)", "");
			
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|УПОРЯДОЧИТЬ ПО
	|	Дата, 
	|	Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Функция возвращает список документов, которые в принципе не требуется перепроводить 
//
Функция БезусловноИсключаемыеИзПерепроведенияДокументы() Экспорт

	// Список безуcловно исключаемых из перепроведения документов
	// состоит из документов, которые не влияют на движения первичных документов
	// и операции закрытия месяца. 
	// В него не входят документы, для которых в метаданных свойство
	// Проведение = Запретить (например, ОперацияБух). 
	// Такие документы отсекаются в цикле построение текста запроса.

	Результат = Новый Структура();
	
	Результат.Вставить("АвансовыйПлатежИностранцаПоНДФЛ");
	Результат.Вставить("ВедомостьНаВыплатуЗарплатыВБанк");
	Результат.Вставить("ВедомостьНаВыплатуЗарплатыВКассу");
	Результат.Вставить("ВыгрузкаРегламентированныхОтчетов");
	Результат.Вставить("ЗаявлениеНаПредоставлениеСтандартныхВычетовПоНДФЛ");
	Результат.Вставить("ПачкаДокументовСЗВ_6_1");
	Результат.Вставить("ПачкаДокументовСЗВ_6_4");
	Результат.Вставить("ПачкаРазделов6РасчетаРСВ_1");
	Результат.Вставить("ПодтверждениеЗачисленияЗарплаты");
	Результат.Вставить("ПрекращениеСтандартныхВычетовНДФЛ");
	Результат.Вставить("ПрочиеКонтролируемыеСделки");
	Результат.Вставить("РеестрДСВ_3");
	Результат.Вставить("РеестрСЗВ_6_2");
	Результат.Вставить("СправкиНДФЛДляПередачиВНалоговыйОрган");
	Результат.Вставить("УведомлениеОПравеНаИмущественныйВычетДляНДФЛ");
	Результат.Вставить("УстановкаПорядкаЗакрытияПодразделений");
	Результат.Вставить("УстановкаЦенНоменклатуры");
	
	// Регламентные документы по НДС перепроводятся во вторую очередь.
	КоллекцияРегламентныеОперацииНДС = Метаданные.ЖурналыДокументов.РегламентныеОперацииНДС.РегистрируемыеДокументы;
		
	Если НЕ УчетЗарплаты.ИспользуетсяПодсистемаУчетаЗарплатыИКадров() Тогда
		Результат.Вставить("ДепонированиеЗарплаты");
		Результат.Вставить("СписаниеДепонированнойЗарплаты");
		Результат.Вставить("НачислениеЗарплаты");
		Результат.Вставить("ОтражениеЗарплатыВБухучете");
		Результат.Вставить("ОтражениеЗарплатыВУчете");
		Результат.Вставить("БольничныйЛист");
		Результат.Вставить("Отпуск");
	Иначе
		Если Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.Получить() Тогда
			Результат.Вставить("ДепонированиеЗарплаты");
			Результат.Вставить("СписаниеДепонированнойЗарплаты");
		КонецЕсли;	
	КонецЕсли;
				
	Для Каждого МетаданныеДокумента Из КоллекцияРегламентныеОперацииНДС Цикл
		Результат.Вставить(МетаданныеДокумента.Имя);
	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция ДокументВходитВПоследовательность(СсылкаНаДокумент, КэшСоставДокументовПоследовательности)

	Если КэшСоставДокументовПоследовательности = Неопределено Тогда
		КэшСоставДокументовПоследовательности = Новый Соответствие;

		МетаданныеПоследовательности = Метаданные.Последовательности.ДокументыОрганизаций.Документы;
		
		Для Каждого МетаДок Из МетаданныеПоследовательности Цикл
			Если МетаДок.Имя = "СчетФактураВыданный"
				ИЛИ МетаДок.Имя = "СчетФактураПолученный" Тогда
				// Документы счета-фактуры не меняют последовательность,
				// но в составе типов оставлены, чтобы не делать реструктуризацию при обновлении ИБ.
				Продолжить;
			КонецЕсли;
		
			КэшСоставДокументовПоследовательности.Вставить(Тип("ДокументСсылка." + МетаДок.Имя), Истина);
		КонецЦикла;
	КонецЕсли;
	
	ТипДокумента = ТипЗнч(СсылкаНаДокумент);
	
	Результат = КэшСоставДокументовПоследовательности[ТипДокумента];
	Если Результат = Неопределено Тогда
		Результат = Ложь;
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция ВыполнитьПерепроведение(Параметры) Экспорт
	
	РезультатОбработки = Новый Структура();
	РезультатОбработки.Вставить("ПроведеноДокументов", 				0);
	РезультатОбработки.Вставить("НеУдалосьПровести", 				0);
	РезультатОбработки.Вставить("ПроведениеПрервано", 				Ложь);
	РезультатОбработки.Вставить("ПоследовательностьВосстановлена", 	Ложь);
	РезультатОбработки.Вставить("ДополнительныеПараметры", 			Параметры.ДополнительныеПараметры);
	РезультатОбработки.Вставить("АдресХранилищаСОшибками", 			Параметры.АдресХранилищаСОшибками);

	ДатаНачала = Параметры.МоментНачала.Дата;

	ДатаОкончания = '00010101';
	Если ЗначениеЗаполнено(Параметры.ДатаОкончания) Тогда
		ДатаОкончания = КонецДня(Параметры.ДатаОкончания);
	КонецЕсли;

	МассивДоступныхОрганизаций = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Истина);
	
	ТаблицаОрганизаций = Новый ТаблицаЗначений;
	ТаблицаОрганизаций.Колонки.Добавить("Организация", 									Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаОрганизаций.Колонки.Добавить("ПроведенВХронологическойПоследовательности", 	Новый ОписаниеТипов("Булево"));
	ТаблицаОрганизаций.Колонки.Добавить("ЭтоПервыйДокументПоОрганизации", 				Новый ОписаниеТипов("Булево"));
	ТаблицаОрганизаций.Колонки.Добавить("НоваяДатаНарушенияПоследовательности",			Новый ОписаниеТипов("Дата"));
	
	Если ЗначениеЗаполнено(Параметры.Организация) Тогда
		Если МассивДоступныхОрганизаций.Найти(Параметры.Организация) <> Неопределено Тогда
			// Пользователь может выбрать в форме обработки группового перепроведения организацию,
			// которая доступна на просмотр в справочнике Организации, 
			// но к данным бухгалтерии которой у пользователя нет доступа.
			// В таком случае ничего не будем делать.
			// Иначе оставляем только ту организацию, которую явно выбрал пользователь.
			СтрокаОрганизации = ТаблицаОрганизаций.Добавить();
			СтрокаОрганизации.Организация = Параметры.Организация;
		КонецЕсли;
	Иначе
		Для Каждого ТекущаяОрганизация Из МассивДоступныхОрганизаций Цикл
			СтрокаОрганизации = ТаблицаОрганизаций.Добавить();
			СтрокаОрганизации.Организация = ТекущаяОрганизация;
		КонецЦикла;
	КонецЕсли;

	ТаблицаОрганизаций.ЗаполнитьЗначения(Истина, "ПроведенВХронологическойПоследовательности");
	ТаблицаОрганизаций.ЗаполнитьЗначения(Истина, "ЭтоПервыйДокументПоОрганизации");

	УстановитьПривилегированныйРежим(Истина);

	МассивОрганизацийДляПерепроведения = ТаблицаОрганизаций.ВыгрузитьКолонку("Организация");

	// Если даты не заданы, то определим их по фактическим данным.
	Если НЕ ЗначениеЗаполнено(ДатаНачала) ИЛИ НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
		ОпределитьГраницыПериода(МассивОрганизацийДляПерепроведения, ДатаНачала, ДатаОкончания);
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачальнаяСсылка", 	Параметры.МоментНачала.Ссылка);
	Запрос.УстановитьПараметр("Организации", 		МассивОрганизацийДляПерепроведения);
	
	Запрос.УстановитьПараметр("ИспользуетсяПодсистемаУчетаЗарплатыИКадров", УчетЗарплаты.ИспользуетсяПодсистемаУчетаЗарплатыИКадров());
	
	ТекстЗапросаПервыйМесяц 		= "";
	ТекстЗапросаПоследующиеМесяцы 	= "";
	
	НомераТаблиц = Новый Структура();
	
	СформироватьТекстЗапросаВсеДокументы(Параметры, ТекстЗапросаПервыйМесяц, ТекстЗапросаПоследующиеМесяцы, НомераТаблиц);

	ТаблицаСообщений	= ПустаяТаблицаСообщенийПользователю();
	ПроведениеПрервано	= Ложь;
	
	// Хранит соответствие типов документов, входящих в последовательность,
	// Инициализируется в функции ДокументВходитВПоследовательность().
	КэшСоставДокументовПоследовательности = Неопределено;
	
	ТекущийМесяц = ДатаНачала;
	
	Пока ТекущийМесяц <= ДатаОкончания Цикл

		ТекущаяДатаПроведения  = ТекущийМесяц;

		Запрос.УстановитьПараметр("ДатаНачала", 		ТекущийМесяц);
		Запрос.УстановитьПараметр("ДатаОкончания", 		Мин(ДатаОкончания, КонецМесяца(ТекущийМесяц)));
		Запрос.УстановитьПараметр("ДатаПредМесяца",		ДобавитьМесяц(НачалоМесяца(ТекущийМесяц), -1));
	
		// При наличии головных организаций и обособленных подразделений регламентные операции необходимо перепроводить
		// после выполнения перепроведения первичных документов по всем организациям, 
		// соблюдая последовательность закрытия. 
		Запрос.Текст 					= ТекстЗапросаРегламентныеОперации();
		ТаблицаРегламентныеОперации		= Запрос.Выполнить().Выгрузить();
		ОтменитьПроведениеРегламентныхОпераций(Параметры, ТаблицаРегламентныеОперации, ТаблицаСообщений);
		
		Для Каждого СтрокаОрганизации Из ТаблицаОрганизаций Цикл

			ТекущаяОрганизация = СтрокаОрганизации.Организация;
			Запрос.УстановитьПараметр("Организация", 		ТекущаяОрганизация);

			Если ТекущийМесяц = ДатаНачала Тогда 
				Запрос.Текст = ТекстЗапросаПервыйМесяц;
			Иначе
				Запрос.Текст = ТекстЗапросаПоследующиеМесяцы;
			КонецЕсли;

			ПакетРезультатов = Запрос.ВыполнитьПакет();

			РегламентныеДокументыНДС 	= ПакетРезультатов[НомераТаблиц.РегламетныеОперацииНДС].Выгрузить();
			ВыборкаПоДокументам        	= ПакетРезультатов[НомераТаблиц.ПервичныеДокументы].Выбрать();
		
			ОтменитьПроведениеРегламентныхДокументовНДС(Параметры, РегламентныеДокументыНДС, ТаблицаСообщений);
			
			Пока ВыборкаПоДокументам.Следующий() Цикл

				Если СтрокаОрганизации.ЭтоПервыйДокументПоОрганизации Тогда

					МоментНарушения = РаботаСПоследовательностями.МоментНачалаПерепроведенияСУчетомИсключенныхМесяцев(
						ТекущаяОрганизация, Мин(ДатаОкончания, КонецМесяца(ТекущаяДатаПроведения)));
						
					МоментДокумента = Новый МоментВремени(ВыборкаПоДокументам.Дата, ВыборкаПоДокументам.Ссылка);
						
					Если МоментНарушения <> Неопределено Тогда
						// Текущий документ является первым среди перепроводимых по организации.
						// Если он лежит позже момента нарушения последовательности, 
						// то считаем его тоже проведенным с нарушением последовательности.
						Если МоментДокумента.Сравнить(МоментНарушения) <= 0 Тогда
							СтрокаОрганизации.ПроведенВХронологическойПоследовательности = Истина;
						Иначе
							СтрокаОрганизации.ПроведенВХронологическойПоследовательности = Ложь;
							// Колонку НоваяДатаНарушенияПоследовательности в этом случае не заполняем, 
							// по этому признаку потом будет сдвигать последовательность в конце цикла перепроведения.
						КонецЕсли;
					КонецЕсли;

					СтрокаОрганизации.ЭтоПервыйДокументПоОрганизации = Ложь;

				КонецЕсли;
				
				ТекущаяДатаПроведения 	= ВыборкаПоДокументам.Дата;
				Успешно = Истина;
				
				Если ВыборкаПоДокументам.ДействиеСДокументом = 0 Тогда
					Если ДокументВходитВПоследовательность(ВыборкаПоДокументам.Ссылка, КэшСоставДокументовПоследовательности) Тогда
						Успешно =  ИсключитьИзПоследовательности(ВыборкаПоДокументам, ТаблицаСообщений);
					КонецЕсли;
					
				ИначеЕсли ВыборкаПоДокументам.ДействиеСДокументом = 1 И ВыборкаПоДокументам.РучнаяКорректировка Тогда
					Если ДокументВходитВПоследовательность(ВыборкаПоДокументам.Ссылка, КэшСоставДокументовПоследовательности) Тогда
					    Успешно = УстановитьСостояниеПоследовательности(
					    	ВыборкаПоДокументам.Ссылка, 
					    	ВыборкаПоДокументам.Дата, 
					    	ВыборкаПоДокументам.Организация,
					    	Перечисления.СостоянияПроведенияВПоследовательности.ПроведенВПоследовательности, 
					    	ТаблицаСообщений);
					КонецЕсли;

				Иначе
					Успешно = ПровестиПервичныйДокумент(ВыборкаПоДокументам, СтрокаОрганизации.ПроведенВХронологическойПоследовательности, ТаблицаСообщений);
				
				КонецЕсли;
						
				Если Успешно Тогда
					РезультатОбработки.ПроведеноДокументов = РезультатОбработки.ПроведеноДокументов + 1;
				Иначе
					// Если не смогли перепровести текущий документ, то все последующие документы автоматически
					// будут не в хронологической последовательности.
					Если СтрокаОрганизации.ПроведенВХронологическойПоследовательности Тогда
						Если ДокументВходитВПоследовательность(ВыборкаПоДокументам.Ссылка, КэшСоставДокументовПоследовательности) Тогда
							// Первый документ, на котором возникло нарушение последовательности, отмечаем это. 
							// Ошибки при проведении документов, не входящих в последовательность, будут выведены в общий список 
							// ошибок, но не влияют на саму последовательность.
							УстановитьСостояниеПоследовательности(
								ВыборкаПоДокументам.Ссылка,
								ВыборкаПоДокументам.Дата,
								ВыборкаПоДокументам.Организация,
								Перечисления.СостоянияПроведенияВПоследовательности.ПроведенСНарушениемПоследовательности, 
								ТаблицаСообщений);
							
							СтрокаОрганизации.ПроведенВХронологическойПоследовательности = Ложь;
							// СтрокаОрганизации.НоваяДатаНарушенияПоследовательности здесь не устанавливаем, 
							// т.к. уже отметили нарушение границы самим текущим документом.
						КонецЕсли;
					КонецЕсли;
				
					РезультатОбработки.НеУдалосьПровести = РезультатОбработки.НеУдалосьПровести + 1;
					Если Параметры.ОстанавливатьсяПоОшибке Тогда
						ПроведениеПрервано = Истина;
						Прервать;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла; // по первичным документам за месяца по организации

			Если ПроведениеПрервано Тогда
				// Прекращаем цикл по организациям
				Прервать;

			Иначе
				// Проводим регламентные документы НДС
				Успешно = ПровестиРегламентныеДокументыЗаМесяцПоНДС(РегламентныеДокументыНДС,
					РезультатОбработки,
					ТаблицаСообщений,
					Параметры.ОстанавливатьсяПоОшибке);
				
				Если НЕ Успешно Тогда
					// При проведении какого-то из регламентных документов НДС произошла ошибка,
					// поэтому все последующие документы оказываются проведенным вне хронологической последовательности
					Если СтрокаОрганизации.ПроведенВХронологическойПоследовательности Тогда
						СтрокаОрганизации.ПроведенВХронологическойПоследовательности = Ложь;
						СтрокаОрганизации.НоваяДатаНарушенияПоследовательности = ТекущаяДатаПроведения;
					КонецЕсли;
					
					Если Параметры.ОстанавливатьсяПоОшибке Тогда
						ПроведениеПрервано = Истина;
						Прервать;
					КонецЕсли;
					
				КонецЕсли;

			КонецЕсли;
			
		КонецЦикла; // по организации

		Если Параметры.ЭтоЗакрытиеМесяца Тогда
			// Восстанавливаем состояние регламентных операций, которое было до начала перепроведения.
			// Их выполнение с учетом новых данных проведения первичных документов будет запущено из 
			// обработки закрытия месяца.
			ВосстановитьСостояниеРегламентныхОпераций(ТаблицаРегламентныеОперации, Параметры, ТаблицаСообщений);
		Иначе
			// Выполнение регламентных операций закрытия месяца вызываем после выполнения перепроведения 
			// все первичных документов по всем организациям.
			Если НЕ ПроведениеПрервано Тогда
				Успешно = ВыполнитьРегламентныеОперацииЗаМесяц(ТаблицаОрганизаций,
					ТаблицаРегламентныеОперации, 
					РезультатОбработки, 
					ТаблицаСообщений, 
					Параметры.ОстанавливатьсяПоОшибке);
				
				Если НЕ Успешно И Параметры.ОстанавливатьсяПоОшибке Тогда
					ПроведениеПрервано = Истина;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Параметры.ЭтоПомощникПоУчетуНДС Тогда
			// При интерактивном вызове перепроведения в рамках восстановления последовательности
			// из помощника по учету НДС отметим регламентные документы по НДС как неактуальные.
			РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.СброситьФактВыполненияВсехРегламетныхОпераций(
				ТекущаяОрганизация, НачалоКвартала(ТекущаяДатаПроведения));
		КонецЕсли;

		Если ПроведениеПрервано Тогда
			Прервать;	
		КонецЕсли;

		ТекущийМесяц = КонецМесяца(ТекущийМесяц) + 1;

	КонецЦикла; // по месяцам
	
	// По каждой организации для первого документа, следующего за тем, 
	// которые последний был проведен в хронологической последовательности,
	// установим признак нарушения его последовательности, т.к. сейчас перепровели все 
	// его предыдущие документы, и теперь с него надо начинать перепроведение.
	//
	// Также определим результат выполнения с учетом всех организаций.
 	ПроведенВХронологическойПоследовательности = Истина;
	
	Для Каждого СтрокаОрганизации Из ТаблицаОрганизаций Цикл
	
		НоваяДатаНарушенияПоследовательности = '0001-01-01';
		Если СтрокаОрганизации.ПроведенВХронологическойПоследовательности И НЕ ПроведениеПрервано Тогда
			// Все месяцы по организации были проведены успешно, 
			// поэтому в следующий раз начинаем со следующей даты.
			НоваяДатаНарушенияПоследовательности = ДатаОкончания + 1;
		Иначе
			// Если в начале цикла перепроведения последовательность была нарушена
			// в периодах, предшествующих периоду перепроведения, 
			// то НоваяДатаНарушенияПоследовательности будет пустой и тогда сдвигать последовательность не надо.
			НоваяДатаНарушенияПоследовательности = СтрокаОрганизации.НоваяДатаНарушенияПоследовательности;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(НоваяДатаНарушенияПоследовательности) Тогда
			МоментСледующегоДокумента = РаботаСПоследовательностями.МоментВремениПервогоДокументаВПоследовательности(
				СтрокаОрганизации.Организация, НоваяДатаНарушенияПоследовательности);
			Если МоментСледующегоДокумента <> Неопределено Тогда
				УстановитьСостояниеПоследовательности(
					МоментСледующегоДокумента.Ссылка,
					МоментСледующегоДокумента.Дата,
					СтрокаОрганизации.Организация,
					Перечисления.СостоянияПроведенияВПоследовательности.ПроведенСНарушениемПоследовательности,
					ТаблицаСообщений);
			КонецЕсли;
		КонецЕсли;
	
		ПроведенВХронологическойПоследовательности = ПроведенВХронологическойПоследовательности
			И СтрокаОрганизации.ПроведенВХронологическойПоследовательности;
	КонецЦикла;
	
	РезультатОбработки.ПроведениеПрервано = ПроведениеПрервано;
	РезультатОбработки.ПоследовательностьВосстановлена = ПроведенВХронологическойПоследовательности;

	Если ТаблицаСообщений.Количество() > 0 Тогда

		// Если делали "по всем организация", то в заголовке ничего не показываем
		Если МассивОрганизацийДляПерепроведения.Количество() = 1 Тогда
			ОрганизацияДляЗаголовка = МассивОрганизацийДляПерепроведения[0];
		Иначе
			ОрганизацияДляЗаголовка = "";
		КонецЕсли;
	
		ТабДокумент = ВывестиСообщенияПользователю(ТаблицаСообщений, 
			РезультатОбработки, 
			ОрганизацияДляЗаголовка, 
			ДатаНачала, 
			ДатаОкончания);
		
		// Проиндексируем таблицу для поиска ней по КлючуДанных в форме ошибок.
		ТаблицаСообщений.Индексы.Добавить("КлючДанных");
		
		ОшибкиПерепроведения = Новый Структура();

		ОшибкиПерепроведения.Вставить("ТаблицаСообщенийПользователю", 	ТаблицаСообщений);
		ОшибкиПерепроведения.Вставить("ОтчетПоОшибкам", 				ТабДокумент);
		
		АдресХранилищаСОшибками = ПоместитьВоВременноеХранилище(ОшибкиПерепроведения, РезультатОбработки.АдресХранилищаСОшибками);
		
	Иначе
		// Если ошибок не возникло, то уничтожим временное хранилище для них, чтобы место не занимало.
		УдалитьИзВременногоХранилища(РезультатОбработки.АдресХранилищаСОшибками);
		РезультатОбработки.АдресХранилищаСОшибками = "";

	КонецЕсли;
	
	Возврат РезультатОбработки;
	
КонецФункции

#КонецЕсли
