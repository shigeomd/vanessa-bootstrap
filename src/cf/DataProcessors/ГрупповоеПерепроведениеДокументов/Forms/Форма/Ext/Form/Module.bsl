&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаНачала) И НЕ ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
		РабочаяДатаПриложения = ОбщегоНазначения.ТекущаяДатаПользователя();
		Если День(РабочаяДатаПриложения) < 25 Тогда
			Объект.ДатаНачала    = НачалоМесяца(НачалоМесяца(РабочаяДатаПриложения) - 1);
			Объект.ДатаОкончания = КонецМесяца(Объект.ДатаНачала);
		Иначе
			Объект.ДатаНачала    = НачалоМесяца(РабочаяДатаПриложения);
			Объект.ДатаОкончания = КонецМесяца(Объект.ДатаНачала);
		КонецЕсли; 
	КонецЕсли;
	
	Объект.Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация"); 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <ИМЯ ТАБЛИЦЫ ФОРМЫ>

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура КнопкаВыполнить(Команда)
	
	ИБФайловая = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая;
	Результат = ЗапуститьПерепроведениеДокументов(ИБФайловая);
	
	Если Результат <> Неопределено Тогда
		// Результат получен и уже обработан на стороне сервера
		ПоказатьРезультатПерепроведения(Результат);
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		// Результата еще нет, но есть шансы дождаться
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ПараметрыВыбора = Новый Структура("НачалоПериода, КонецПериода", Объект.ДатаНачала, Объект.ДатаОкончания);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыВыбора, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ДатаНачала	 = РезультатВыбора.НачалоПериода;
	Объект.ДатаОкончания = РезультатВыбора.КонецПериода;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура ПоказатьРезультатПерепроведения(Результат)

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Результат.Свойство("ПоказатьПредупреждение") Тогда
		ПоказатьПредупреждение(, Результат.ПоказатьПредупреждение);
	КонецЕсли;

	Если Результат.Свойство("ПроведеноДокументов")
		И Результат.Свойство("НеУдалосьПровести")
		И Результат.Свойство("АдресХранилищаСОшибками") Тогда

		Если Результат.НеУдалосьПровести = 0 Тогда
			ТекстСообщения = НСтр("ru='Выполнено перепроведение документов:
			| - проведено документов: %1;
			| - ошибок не обнаружено'");
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстСообщения, Результат.ПроведеноДокументов);
			
			ПоказатьПредупреждение(, ТекстСообщения);
			
		Иначе

			// Покажем подробный отчет об ошибках.
			ОбщегоНазначенияБПКлиент.ОткрытьФормуОшибокПерепроведения(ЭтотОбъект, Результат.АдресХранилищаСОшибками);

		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()

	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда			
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			ПоказатьРезультатПерепроведения(ОбновитьДанныеОперацийПоРезультатуДлительнойОперации());
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

&НаСервере
Функция ЗапуститьПерепроведениеДокументов(ИБФайловая)
	
	Если НЕ ИБФайловая Тогда
		// Возможно, что фоновое задание было запущено раньше, 
		// пользователь дал команду его отменить, однако задание не отменено.
		// В таком случае не следует запускать задание повторно - следует дождаться его выполнения.
		// Мы можем отследить ситуацию только, если все это происходит в одной форме.
		// Потому что подсистема ДлительныеОперации не умеет устанавливать ключ фонового задания.
		Если ЗакрытиеМесяца.ЗаданиеЕщеВыполняется(ИдентификаторЗадания) Тогда
			// Надо ждать
			Возврат Неопределено;
		КонецЕсли;
	Конецесли;

	ИдентификаторЗадания = Неопределено;
	
	ПараметрыПерепроведения = Обработки.ГрупповоеПерепроведениеДокументов.ПараметрыПерепроведения();
	
	ПараметрыПерепроведения.Организация 	= Объект.Организация;
	ПараметрыПерепроведения.МоментНачала 	= Новый МоментВремени(Объект.ДатаНачала, Неопределено);
	ПараметрыПерепроведения.ДатаОкончания	= Объект.ДатаОкончания;
	ПараметрыПерепроведения.УникальныйИдентификаторФормы 	= УникальныйИдентификатор;
	ПараметрыПерепроведения.ОстанавливатьсяПоОшибке 		= Объект.ОстанавливатьсяПоОшибке;
	
	Результат = Обработки.ГрупповоеПерепроведениеДокументов.ЗапуститьПерепроведение(ПараметрыПерепроведения);

	Если Результат = Неопределено Тогда
		Результат = Новый Структура();
		Результат.Вставить("ПоказатьПредупреждение", НСтр("ru = 'Перепроведение уже выполняется другим пользователем либо открыта для редактирования форма организации.'"));
		Возврат Результат;
	КонецЕсли;
	
	АдресХранилища       = Результат.АдресХранилища;
	ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	
	Если Не Результат.ЗаданиеВыполнено Тогда
		// Надо ждать
		Возврат Неопределено;
	Иначе
		// Задание выполнено.
		// Результат выполнения возвращен через хранилище значения.
		// Загрузим его в форму и передадим данные на клиент.
		
		Возврат ОбновитьДанныеОперацийПоРезультатуДлительнойОперации();
	
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ОбновитьДанныеОперацийПоРезультатуДлительнойОперации()
	
	// Результат закрытия подготовлен в 
	// Обработки.ГрупповоеПерепроведениеДокументов.ПерепроведениеДокументов()
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Окончание группового перепроведения, разблокируем захваченную организацию.
	// Она блокируется при старте группового перепроведения в привязке к идентификатору формы,
	// из которой вызывано перепроведение.
	Обработки.ГрупповоеПерепроведениеДокументов.ПослеОкончанияПерепроведения(УникальныйИдентификатор);
	
	Возврат Результат;
	
КонецФункции
