&НаКлиенте
Перем СоответствиеКлючейИСертификатов;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторХранилища = Параметры.ИдентификаторХранилища;
	Если НЕ ЗначениеЗаполнено(ИдентификаторХранилища) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ПрограммаБанка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.СоглашениеЭД, "ПрограммаБанка");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку") Тогда
		ВнешнийПодключаемыйМодуль = ЭлектронныеДокументыСлужебныйКлиент.ВнешнийПодключаемыйМодульЧерезДополнительнуюОбработку(Параметры.СоглашениеЭД);
	Иначе
		ПараметрыПодсистемыОбменСБанками = ПараметрыПриложения["ОбменСБанками.Параметры"];
		ВнешнийПодключаемыйМодуль = ?(ТипЗнч(ПараметрыПодсистемыОбменСБанками) = Тип("Соответствие"),
			ПараметрыПодсистемыОбменСБанками.Получить(ЭлектронныеДокументыСлужебныйКлиент.ИмяКомпонентыiBank2()), Неопределено);
	КонецЕсли;

	Попытка
		СертификатыНаУстройстве = ВнешнийПодключаемыйМодуль.СертификатыВХранилище(ИдентификаторХранилища);
		Если ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.iBank2") Тогда
			СертификатыНаУстройстве = ЭлектронныеДокументыСлужебныйКлиент.ДеСериализованныеДанные(СертификатыНаУстройстве);
		КонецЕсли
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка получения банковских сертификатов.
									|Код ошибки: %1
									|%2'");
		Если ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку") Тогда
			ДеталиОшибки = ВнешнийПодключаемыйМодуль.ДеталиОшибки();
		Иначе
			ДеталиОшибки = ЭлектронныеДокументыСлужебныйКлиент.ИнформацияОбОшибкеiBank2();
		КонецЕсли;
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ШаблонОшибки, ДеталиОшибки.Код, ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Получение банковских сертификатов'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
			Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
		Отказ = Истина;
		Возврат;
	КонецПопытки;
	
	Если СертификатыНаУстройстве.Количество() = 0 Тогда
		ТекстСобщения = НСтр("ru = 'Не найдены сертификаты в хранилище.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСобщения);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СоответствиеКлючейИСертификатов = Новый Соответствие;
	
	Если СертификатыНаУстройстве.Количество() = 1 Тогда
		
		Если ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку") Тогда
			ДанныеСертификата = ЭлектронныеДокументыСлужебныйКлиент.ДанныеСертификатаЧерезДополнительнуюОбработку(
												ВнешнийПодключаемыйМодуль, СертификатыНаУстройстве[0]);
		Иначе
			ДанныеСертификата = ЭлектронныеДокументыСлужебныйКлиент.ДанныеСертификатаiBank2(
																СертификатыНаУстройстве[0]);
		КонецЕсли;
		Если ДанныеСертификата = Неопределено тогда
			Закрыть();
			Возврат;
		КонецЕсли;
		Ключ = ДанныеСертификата.Псевдоним;
		СоответствиеКлючейИСертификатов.Вставить(Ключ, СертификатыНаУстройстве[0]);
		Элементы.Ключ.ТолькоПросмотр = Истина;
		ТекущийЭлемент = Элементы.Пароль;
	Иначе
		Для Каждого СертификатXML ИЗ СертификатыНаУстройстве Цикл
			Ошибка = Ложь;
			Если ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку") Тогда
				ДанныеСертификата = ЭлектронныеДокументыСлужебныйКлиент.ДанныеСертификатаЧерезДополнительнуюОбработку(
																	ВнешнийПодключаемыйМодуль, СертификатXML);
			Иначе
				ДанныеСертификата = ЭлектронныеДокументыСлужебныйКлиент.ДанныеСертификатаiBank2(СертификатXML);
			КонецЕсли;
			Если ДанныеСертификата = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Элементы.Ключ.СписокВыбора.Добавить(ДанныеСертификата.Псевдоним);
			СоответствиеКлючейИСертификатов.Вставить(ДанныеСертификата.Псевдоним, СертификатXML);
		КонецЦикла;
		Элементы.Ключ.СписокВыбора.СортироватьПоЗначению();
		Если Элементы.Ключ.СписокВыбора.Количество() = 0 Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		ТекущийЭлемент = Элементы.Ключ;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Готово(Команда)
	
	Если ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку") Тогда
		ВнешнийПодключаемыйМодуль = ЭлектронныеДокументыСлужебныйКлиент.ВнешнийПодключаемыйМодульЧерезДополнительнуюОбработку(Параметры.СоглашениеЭД);
		Если ВнешнийПодключаемыйМодуль = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СертификатXML = СоответствиеКлючейИСертификатов.Получить(Ключ);
	
	Если ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку") Тогда
		ПарольУстановлен = ЭлектронныеДокументыСлужебныйКлиент.УстановитьПарольСертификатаЧерезДополнительнуюОбработку(
																		ВнешнийПодключаемыйМодуль, СертификатXML, Пароль);
	Иначе
		ПарольУстановлен = ЭлектронныеДокументыСлужебныйКлиент.УстановитьПарольСертификатаiBank2(СертификатXML, Пароль);
	КонецЕсли;
	
	Если НЕ ПарольУстановлен Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПолученияСертификата = Новый Структура;
	
	ПараметрыПолученияСертификата.Вставить("ИмяПроцедуры", "ПродолжитьПолучениеСертификата");
	ПараметрыПолученияСертификата.Вставить("ВнешнийПодключаемыйМодуль", ВнешнийПодключаемыйМодуль);
	ПараметрыПолученияСертификата.Вставить("Модуль", ЭтотОбъект);
	ПараметрыПолученияСертификата.Вставить("СертификатXML", СертификатXML);
	
	СоединениеУстановлено = Ложь;
	Если ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку") Тогда
		ЭлектронныеДокументыСлужебныйКлиент.УстановитьСоединениеЧерезДополнительнуюОбработку(Параметры.СоглашениеЭД,
			ВнешнийПодключаемыйМодуль, СертификатXML, ПараметрыПолученияСертификата, СоединениеУстановлено);
	Иначе
		ЭлектронныеДокументыСлужебныйКлиент.УстановитьСоединениеiBank2(Параметры.СоглашениеЭД, СертификатXML,
														ПараметрыПолученияСертификата, СоединениеУстановлено);
	КонецЕсли;
	
	Если Не СоединениеУстановлено Тогда
		Возврат;
	КонецЕсли;
	
	ПродолжитьПолучениеСертификата(СоединениеУстановлено, ПараметрыПолученияСертификата)
		
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьПолучениеСертификата(Аутентификация, Параметры) Экспорт
	
	Если НЕ Аутентификация = Истина Тогда
		Возврат;
	КонецЕсли;
	
	СертификатXML = Параметры.СертификатXML;
	Если ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку") Тогда
		ВнешнийПодключаемыйМодуль = Параметры.ВнешнийПодключаемыйМодуль;
	Иначе
		ПараметрыПодсистемыОбменСБанками = ПараметрыПриложения["ОбменСБанками.Параметры"];
		ВнешнийПодключаемыйМодуль = ?(ТипЗнч(ПараметрыПодсистемыОбменСБанками) = Тип("Соответствие"),
			ПараметрыПодсистемыОбменСБанками.Получить(ЭлектронныеДокументыСлужебныйКлиент.ИмяКомпонентыiBank2()), Неопределено);
	КонецЕсли;
	
	Попытка
		СертификатXML = ВнешнийПодключаемыйМодуль.ДополнитьСертификат(СертификатXML);
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка дополнения данных сертификата.
								|Код ошибки: %1
								|%2'");
		Если ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку") Тогда
			ДеталиОшибки = ВнешнийПодключаемыйМодуль.ДеталиОшибки();
		Иначе
			ДеталиОшибки = ЭлектронныеДокументыСлужебныйКлиент.ИнформацияОбОшибкеiBank2();
		КонецЕсли;
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ШаблонОшибки, ДеталиОшибки.Код, ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Получение дополнительных данных сертификата'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
							Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
		Возврат;
	КонецПопытки;
	
	ОповеститьОВыборе(СертификатXML);
	
КонецПроцедуры
