
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.СоглашениеЭД) И Не ЗначениеЗаполнено(Параметры.ЭлектронныйДокумент) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	РеквизитыСоглашения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Параметры.СоглашениеЭД, "Организация, Контрагент, ПрограммаБанка, ИдентификаторОрганизации");
	
	ПрограммаБанка = РеквизитыСоглашения.ПрограммаБанка;

	Если ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку
			ИЛИ ПрограммаБанка = Перечисления.ПрограммыБанка.iBank2
			ИЛИ ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн Тогда
	
		МассивБанковскихСчетов = Новый Массив;
		Если ЗначениеЗаполнено(Параметры.НомерСчета) Тогда
			МассивБанковскихСчетов.Добавить(Параметры.НомерСчета);
		Иначе
			ЭлектронныеДокументыПереопределяемый.ПолучитьНомераБанковскихСчетов(
				РеквизитыСоглашения.Организация, РеквизитыСоглашения.Контрагент, МассивБанковскихСчетов);
		КонецЕсли;
		
		БИК = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыСоглашения.Контрагент, "Код");
		МассивБанковскихСчетовСсылка = ПоместитьВоВременноеХранилище(МассивБанковскихСчетов, УникальныйИдентификатор);
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Параметры.ЭлектронныйДокумент) Тогда
		ВидЭД =ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ЭлектронныйДокумент, "ВидЭД");
		Если ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение ИЛИ ВидЭД = Перечисления.ВидыЭД.ПлатежноеТребование Тогда
			Заголовок = Нстр("ru = 'Получение состояния ЭД'");
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ЗапросВыписки Тогда
			// не меняем предопределенный
		Иначе
			Заголовок = Нстр("ru = 'Тестирование обмена данными'");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	Перем ЗапросОтправлен, ВыпискаБанка;
	
	Если ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку") Тогда
		ПолучитьВыпискуЧерезДополнительнуюОбработку();
		Возврат;
	ИначеЕсли ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.iBank2") Тогда
		ПолучитьВыпискуiBank2();
		Возврат;
	ИначеЕсли ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн") Тогда
		Если Параметры.ГотовыеВыписки.Количество() Тогда
			ОповеститьОВыборе(Параметры.ГотовыеВыписки);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Параметры.ЭлектронныйДокумент) Тогда
		
		НачатьОтправкуЗапросаВыпискиВБанк();
		
	Иначе
		
		Если ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПлатежноеПоручение")
			ИЛИ ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПлатежноеТребование") Тогда
			НачатьОтправкуЗапросаСтатусаЭД();
		ИначеЕсли ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ЗапросВыписки") Тогда
			Оповещение = Новый ОписаниеОповещения("ПослеОтправкиЗапросаВыпискиСбербанк", ЭтотОбъект);
			ПараметрыОбработки = Новый Структура;
			МассивЭД = Новый Массив;
			МассивЭД.Добавить(Параметры.ЭлектронныйДокумент);
			ПараметрыОбработки.Вставить("ДобавленныеФайлыСбербанка", МассивЭД);
			ПараметрыОбработки.Вставить("ИтогКолПодписанных", 0);
			ПараметрыОбработки.Вставить("ЭтоЗапросВыписки", Оповещение);
			Обработчик = Новый ОписаниеОповещения("ПослеПолученияНовыхДокументовСбербанк", ЭтотОбъект, ПараметрыОбработки);
			ПараметрыОбработки.Вставить("ОповещениеПослеПолученияНовыхДокументов", Обработчик);
			ЭлектронныеДокументыСлужебныйКлиент.ПодписатьЭДСбербанка(Параметры.СоглашениеЭД, ПараметрыОбработки);
		Иначе
			НачатьОтправкуЗапросаЗонда();
		КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ПроизошлаОшибка Тогда
		Отказ = Истина;
		ПроизошлаОшибка = Ложь;
		Элементы.Страницы.ТекущаяСтраница = Элементы.Ошибка;
		Элементы.ФормаОтмена.Заголовок = "Закрыть";
	КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн") Тогда
		ОтключитьОбработчикОжидания("Подключаемый_ПолучитьНовыеДокументыСбербанк");
	КонецЕсли;
	
	ПриЗакрытииНаСервере(ИдентификаторЗадания);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции


&НаКлиенте
Процедура НачатьОтправкуЗапросаВыпискиВБанк()
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ИдентификаторСессииБанка", Параметры.ИдентификаторСессииБанка);
	ПараметрыЗапроса.Вставить("СоглашениеЭД", Параметры.СоглашениеЭД);
	ПараметрыЗапроса.Вставить("Пользователь", Параметры.Пользователь);
	ПараметрыЗапроса.Вставить("Пароль", Параметры.Пароль);
	ПараметрыЗапроса.Вставить("МассивЭД", Параметры.МассивЭД);
	
	ОперацияВыполнена = ОтправитьЗапросВыпискиНаСервере(
		ПараметрыЗапроса, АдресХранилища, УникальныйИдентификатор, ИдентификаторЗадания, ПроизошлаОшибка);
	
	Если ОперацияВыполнена Тогда
		ОбработатьРезультатЗапросаВыписки();
		Возврат;
	КонецЕсли;
	
	// Операция еще не завершена, выполняется с помощью фонового задания (асинхронно).
	ПараметрыОбработчикаОжидания = Новый Структура(
		"МинимальныйИнтервал, МаксимальныйИнтервал, ТекущийИнтервал, КоэффициентУвеличенияИнтервала", 1, 15, 1, 1.4);
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияЗапросаВыписки", 1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура НачатьОтправкуЗапросаСтатусаЭД()
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ИдентификаторСессииБанка", Параметры.ИдентификаторСессииБанка);
	ПараметрыЗапроса.Вставить("ЭлектронныйДокумент", Параметры.ЭлектронныйДокумент);
	ПараметрыЗапроса.Вставить("СоглашениеЭД", Параметры.СоглашениеЭД);
	
	ОперацияВыполнена = ОтправитьЗапросСостоянияЭДНаСервере(
		ПараметрыЗапроса, АдресХранилища, УникальныйИдентификатор, ИдентификаторЗадания, ПроизошлаОшибка);
	
	Если ОперацияВыполнена Тогда
		ОбработатьРезультатЗапросаСостоянияЭД();
		Возврат;
	КонецЕсли;
	
	// Операция еще не завершена, выполняется с помощью фонового задания (асинхронно).
	ПараметрыОбработчикаОжидания = Новый Структура(
		"МинимальныйИнтервал, МаксимальныйИнтервал, ТекущийИнтервал, КоэффициентУвеличенияИнтервала", 1, 15, 1, 1.4);
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияЗапросаСостоянияЭД", 1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура НачатьОтправкуЗапросаЗонда()
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ИдентификаторСессииБанка", Параметры.ИдентификаторСессииБанка);
	ПараметрыЗапроса.Вставить("ЭлектронныйДокумент", Параметры.ЭлектронныйДокумент);
	ПараметрыЗапроса.Вставить("СоглашениеЭД", Параметры.СоглашениеЭД);
	
	МассивСообщений = Новый Массив;
	ОперацияВыполнена = ОтправитьЗапросЗондНаСервере(
		ПараметрыЗапроса, АдресХранилища, УникальныйИдентификатор, ИдентификаторЗадания, МассивСообщений);
		
	Если МассивСообщений.Количество() Тогда //Произошла ошибка
		СтруктураВозврата = Новый Структура("Успех, МассивСообщений", Ложь, МассивСообщений);
		Закрыть(СтруктураВозврата);
		Возврат;
	КонецЕсли;
		
	Если ОперацияВыполнена Тогда
		ОбработатьРезультатЗапросаЗонда();
		Возврат;
	КонецЕсли;
	
	// Операция еще не завершена, выполняется с помощью фонового задания (асинхронно).
	ПараметрыОбработчикаОжидания = Новый Структура(
		"МинимальныйИнтервал, МаксимальныйИнтервал, ТекущийИнтервал, КоэффициентУвеличенияИнтервала", 1, 15, 1, 1.4);
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияОтправкиЗапросаЗонда", 1, Истина);

КонецПроцедуры


&НаСервереБезКонтекста
Функция ОтправитьЗапросВыпискиНаСервере(Знач ПараметрыЗапроса, АдресХранилища, УникальныйИдентификатор, ИдентификаторЗадания, ЕстьОшибка)
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	ЗаданиеВыполнено = Ложь;
		
	НаименованиеЗадания = НСтр("ru = 'Отправка запроса выписки в банк'");
	ПараметрыВыполнения = Новый Массив;
	ПараметрыВыполнения.Добавить(ПараметрыЗапроса);
	ПараметрыВыполнения.Добавить(АдресХранилища);
		
	Если ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая Тогда
		ВремяОжидания = 4;
	Иначе
		ВремяОжидания = 2;
	КонецЕсли;
	
	Задание = ФоновыеЗадания.Выполнить(
		"ЭлектронныеДокументыСлужебный.ОтправитьЗапросВыпискиВБанк", ПараметрыВыполнения, , НаименованиеЗадания);
	Попытка
		Задание.ОжидатьЗавершения(ВремяОжидания);
	Исключение
		// Специальная обработка не требуется. Предположительно, исключение вызвано истечением времени ожидания.
	КонецПопытки;

	ИдентификаторЗадания = Задание.УникальныйИдентификатор;
	// Если операция уже завершилась, то сразу обрабатываем результат.
	Если ДлительныеОперации.ЗаданиеВыполнено(Задание.УникальныйИдентификатор) Тогда
		ЗаданиеВыполнено = Истина;
	КонецЕсли;
	Возврат ЗаданиеВыполнено;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОтправитьЗапросСостоянияЭДНаСервере(Знач ПараметрыЗапроса, АдресХранилища, УникальныйИдентификатор, ИдентификаторЗадания, ЕстьОшибка)
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	ЗаданиеВыполнено = Ложь;
		
	НаименованиеЗадания = НСтр("ru = 'Отправка запроса состояния ЭД в банк'");
	ПараметрыВыполнения = Новый Массив;
	ПараметрыВыполнения.Добавить(ПараметрыЗапроса);
	ПараметрыВыполнения.Добавить(АдресХранилища);
		
	Если ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая Тогда
		ВремяОжидания = 4;
	Иначе
		ВремяОжидания = 2;
	КонецЕсли;
	
	Задание = ФоновыеЗадания.Выполнить(
		"ЭлектронныеДокументыСлужебный.ОтправитьЗапросСостоянияЭДВБанк", ПараметрыВыполнения, , НаименованиеЗадания);
	Попытка
		Задание.ОжидатьЗавершения(ВремяОжидания);
	Исключение
		// Специальная обработка не требуется. Предположительно, исключение вызвано истечением времени ожидания.
	КонецПопытки;

	ИдентификаторЗадания = Задание.УникальныйИдентификатор;
	// Если операция уже завершилась, то сразу обрабатываем результат.
	Если ДлительныеОперации.ЗаданиеВыполнено(Задание.УникальныйИдентификатор) Тогда
		ЗаданиеВыполнено = Истина;
	КонецЕсли;
	Возврат ЗаданиеВыполнено;
	
КонецФункции


&НаСервереБезКонтекста
Функция ОтправитьЗапросЗондНаСервере(Знач ПараметрыЗапроса, АдресХранилища, УникальныйИдентификатор, ИдентификаторЗадания, МассивСообщений)
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	ЗаданиеВыполнено = Ложь;
		
	НаименованиеЗадания = НСтр("ru = 'Отправка тестового запроса в банк'");
	ПараметрыВыполнения = Новый Массив;
	ПараметрыВыполнения.Добавить(ПараметрыЗапроса);
	ПараметрыВыполнения.Добавить(АдресХранилища);
		
	Если ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая Тогда
		ВремяОжидания = 4;
	Иначе
		ВремяОжидания = 2;
	КонецЕсли;
	
	Задание = ФоновыеЗадания.Выполнить(
		"ЭлектронныеДокументыСлужебный.ОтправитьЗапросЗондВБанк", ПараметрыВыполнения, , НаименованиеЗадания);
	Попытка
		Задание.ОжидатьЗавершения(ВремяОжидания);
	Исключение
		// Специальная обработка не требуется. Предположительно, исключение вызвано истечением времени ожидания.
	КонецПопытки;

	ИдентификаторЗадания = Задание.УникальныйИдентификатор;
	// Если операция уже завершилась, то сразу обрабатываем результат.
	Если ДлительныеОперации.ЗаданиеВыполнено(Задание.УникальныйИдентификатор) Тогда
		ЗаданиеВыполнено = Истина;
		МассивСообщений =  Задание.ПолучитьСообщенияПользователю();
	КонецЕсли;
	Возврат ЗаданиеВыполнено;
	
КонецФункции


&НаСервереБезКонтекста
Процедура ПриЗакрытииНаСервере(Знач ИдентификаторЗадания)
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияЗапросаСостоянияЭД()

	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ОбработатьРезультатЗапросаСостоянияЭД();
			Возврат;
		КонецЕсли;
	Исключение
		ВызватьИсключение;
	КонецПопытки;

	ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.ТекущийИнтервал
													* ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала;
	Если ПараметрыОбработчикаОжидания.ТекущийИнтервал > ПараметрыОбработчикаОжидания.МаксимальныйИнтервал Тогда
		ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.МаксимальныйИнтервал;
	КонецЕсли;
	ПодключитьОбработчикОжидания(
		"Подключаемый_ПроверитьВыполнениеЗаданияЗапросаСостоянияЭД", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
		
КонецПроцедуры
	
&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияОтправкиЗапросаЗонда()

	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ОбработатьРезультатЗапросаЗонда();
			Возврат;
		КонецЕсли;
	Исключение
		ВызватьИсключение;
	КонецПопытки;

	ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.ТекущийИнтервал
													* ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала;
	Если ПараметрыОбработчикаОжидания.ТекущийИнтервал > ПараметрыОбработчикаОжидания.МаксимальныйИнтервал Тогда
		ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.МаксимальныйИнтервал;
	КонецЕсли;
	ПодключитьОбработчикОжидания(
		"Подключаемый_ПроверитьВыполнениеЗаданияОтправкиЗапросаЗонда", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияЗапросаВыписки()

	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ОбработатьРезультатЗапросаВыписки();
			Возврат;
		КонецЕсли;
	Исключение
		ВызватьИсключение;
	КонецПопытки;

	ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.ТекущийИнтервал
													* ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала;
	Если ПараметрыОбработчикаОжидания.ТекущийИнтервал > ПараметрыОбработчикаОжидания.МаксимальныйИнтервал Тогда
		ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.МаксимальныйИнтервал;
	КонецЕсли;
	ПодключитьОбработчикОжидания(
		"Подключаемый_ПроверитьВыполнениеЗаданияЗапросаВыписки", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатЗапросаВыписки()

	КолОтправленных = 0;
	КолПолученных = 0;
	
	СтруктураВозврата = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если СтруктураВозврата.Свойство("ДанныеЭП") И СтруктураВозврата.ДанныеЭП.Количество() Тогда
		Для Каждого КлючЗначение ИЗ СтруктураВозврата.ДанныеЭП Цикл
			ДобавитьПодписиВЭлектронныйДокумент(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ПроизошлаОшибка = СтруктураВозврата.ЕстьОшибка;
	Если ПроизошлаОшибка И ЗначениеЗаполнено(СтруктураВозврата.ТекстСообщения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтруктураВозврата.ТекстСообщения);
		ПриЗакрытииНаСервере(ИдентификаторЗадания);
		Закрыть();
		Возврат;
	КонецЕсли;
	
	Если СтруктураВозврата.Свойство("ЗапросОтправлен") И СтруктураВозврата.ЗапросОтправлен Тогда
		КолОтправленных = 1;
	КонецЕсли;
			
	ЗаголовокОповещения = НСтр("ru = 'Обмен электронными документами'");
	ТекстОповещения = НСтр("ru = 'Отправленных пакетов нет'");
	
	Если КолОтправленных > 0 Тогда
		ТекстОповещения = НСтр("ru = 'Отправлено документов: (%1)'");
		ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОповещения, КолОтправленных);
	КонецЕсли;
	
	Если КолПолученных > 0 Тогда
		ТекстОповещения = ТекстОповещения
		+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = ', получено документов: (%1)'"), КолПолученных);
	КонецЕсли;
	
	Оповестить("ОбновитьСостояниеЭД");
	
	ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);
	
	Если Не ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АсинхронныйОбмен") Тогда
		ОповеститьОВыборе(СтруктураВозврата.ВыпискаБанка);
	ИначеЕсли НЕ ПроизошлаОшибка Тогда
		ОперацияВыполнена = ПолучитьВыпискуАсинхронноНаСервере(
			ПараметрыЗапроса, АдресХранилища, УникальныйИдентификатор, ИдентификаторЗадания, ПроизошлаОшибка);
	
		Если ОперацияВыполнена Тогда
			ОбработатьРезультатПолученияВыписки();
			Возврат;
		КонецЕсли;

		ПараметрыОбработчикаОжидания = Новый Структура(
			"МинимальныйИнтервал, МаксимальныйИнтервал, ТекущийИнтервал, КоэффициентУвеличенияИнтервала", 1, 15, 1, 1.4);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеПолученияВыписки", 1, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатЗапросаСостоянияЭД()

	КолОтправленных = 0;
	КолПолученных = 0;
	
	СтруктураВозврата = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если СтруктураВозврата.Свойство("ДанныеЭП") И СтруктураВозврата.ДанныеЭП.Количество() Тогда
		Для Каждого КлючЗначение ИЗ СтруктураВозврата.ДанныеЭП Цикл
			ДобавитьПодписиВЭлектронныйДокумент(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
	КонецЕсли;

	ПроизошлаОшибка = СтруктураВозврата.ЕстьОшибка;
	Если ПроизошлаОшибка Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтруктураВозврата.ТекстСообщения);
		ПриЗакрытииНаСервере(ИдентификаторЗадания);
		Закрыть();
		Возврат
	КонецЕсли;
	
	Если СтруктураВозврата.Свойство("ЗапросОтправлен") И СтруктураВозврата.ЗапросОтправлен Тогда
		КолОтправленных = 1;
	КонецЕсли;
	
	ЗаголовокОповещения = НСтр("ru = 'Обмен электронными документами'");
	ТекстОповещения = НСтр("ru = 'Отправленных пакетов нет'");
	
	Если КолОтправленных > 0 Тогда
		ТекстОповещения = НСтр("ru = 'Отправлено документов: (%1)'");
		ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОповещения, КолОтправленных);
	КонецЕсли;
	
	Оповестить("ОбновитьСостояниеЭД");
	
	ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);
	
	ПараметрыЗапроса.Вставить("ЭлектронныйДокумент", СтруктураВозврата.ЭДЗапросСостояния);
	
	ОперацияВыполнена = ПолучитьИзвещениеОСостоянииЭДАсинхронноНаСервере(
			ПараметрыЗапроса, АдресХранилища, УникальныйИдентификатор, ИдентификаторЗадания);
	
	Если ОперацияВыполнена Тогда
		ОбработатьРезультатПолученияИзвещенияОСостоянииЭД();
		Возврат;
	КонецЕсли;

	ПараметрыОбработчикаОжидания = Новый Структура(
		"МинимальныйИнтервал, МаксимальныйИнтервал, ТекущийИнтервал, КоэффициентУвеличенияИнтервала", 1, 15, 1, 1.4);
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеПолученияИзвещенияОСостоянии", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатЗапросаЗонда()

	КолОтправленных = 0;
	КолПолученных = 0;
	
	СтруктураВозврата = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если СтруктураВозврата.Свойство("ДанныеЭП") И СтруктураВозврата.ДанныеЭП.Количество() Тогда
		Для Каждого КлючЗначение ИЗ СтруктураВозврата.ДанныеЭП Цикл
			ДобавитьПодписиВЭлектронныйДокумент(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Оповестить("ОбновитьСостояниеЭД");
	
	МассивСообщений = Новый Массив;
	
	ОперацияВыполнена = ПолучитьИзвещениеОСостоянииЭДАсинхронноНаСервере(
			ПараметрыЗапроса, АдресХранилища, УникальныйИдентификатор, ИдентификаторЗадания, МассивСообщений);
			
	Если МассивСообщений.Количество() Тогда
		СтруктураВозврата = Новый Структура("Успех, МассивСообщений", Ложь, МассивСообщений);
		Закрыть(СтруктураВозврата);
		Возврат
	КонецЕсли;
			
	Если ОперацияВыполнена Тогда
		ОбработатьРезультатПолученияИзвещенияОСостоянииЭД();
		Возврат;
	КонецЕсли;

	ПараметрыОбработчикаОжидания = Новый Структура(
		"МинимальныйИнтервал, МаксимальныйИнтервал, ТекущийИнтервал, КоэффициентУвеличенияИнтервала", 1, 15, 1, 1.4);
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеПолученияИзвещенияОСостоянии", 1, Истина);
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция ПолучитьВыпискуАсинхронноНаСервере(Знач ПараметрыЗапроса, АдресХранилища, УникальныйИдентификатор, ИдентификаторЗадания, ЕстьОшибка)
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	ЗаданиеВыполнено = Ложь;
		
	НаименованиеЗадания = НСтр("ru = 'Получение выписки из банка'");
	ПараметрыВыполнения = Новый Массив;
	ПараметрыВыполнения.Добавить(ПараметрыЗапроса);
	ПараметрыВыполнения.Добавить(АдресХранилища);
		
	Если ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая Тогда
		ВремяОжидания = 4;
	Иначе
		ВремяОжидания = 2;
	КонецЕсли;
	
	Задание = ФоновыеЗадания.Выполнить(
		"ЭлектронныеДокументыСлужебный.ПолучитьВыпискуБанкаАсинхронно", ПараметрыВыполнения, , НаименованиеЗадания);
	Попытка
		Задание.ОжидатьЗавершения(ВремяОжидания);
	Исключение
		// Специальная обработка не требуется. Предположительно, исключение вызвано истечением времени ожидания.
	КонецПопытки;

	ИдентификаторЗадания = Задание.УникальныйИдентификатор;
	// Если операция уже завершилась, то сразу обрабатываем результат.
	Если ДлительныеОперации.ЗаданиеВыполнено(Задание.УникальныйИдентификатор) Тогда
		ЗаданиеВыполнено = Истина;
	КонецЕсли;
	Возврат ЗаданиеВыполнено;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИзвещениеОСостоянииЭДАсинхронноНаСервере(Знач ПараметрыЗапроса, АдресХранилища, УникальныйИдентификатор, ИдентификаторЗадания, МассивСообщений = Неопределено)
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	ЗаданиеВыполнено = Ложь;
		
	НаименованиеЗадания = НСтр("ru = 'Получение извещения о состоянии ЭД'");
	ПараметрыВыполнения = Новый Массив;
	ПараметрыВыполнения.Добавить(ПараметрыЗапроса);
	ПараметрыВыполнения.Добавить(АдресХранилища);
		
	Если ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая Тогда
		ВремяОжидания = 4;
	Иначе
		ВремяОжидания = 2;
	КонецЕсли;
	
	Задание = ФоновыеЗадания.Выполнить(
		"ЭлектронныеДокументыСлужебный.ПолучитьИзвещениеОСостоянииЭДАсинхронно", ПараметрыВыполнения, , НаименованиеЗадания);
	Попытка
		Задание.ОжидатьЗавершения(ВремяОжидания);
	Исключение
		// Специальная обработка не требуется. Предположительно, исключение вызвано истечением времени ожидания.
	КонецПопытки;

	ИдентификаторЗадания = Задание.УникальныйИдентификатор;
	// Если операция уже завершилась, то сразу обрабатываем результат.
	Если ДлительныеОперации.ЗаданиеВыполнено(Задание.УникальныйИдентификатор) Тогда
		ЗаданиеВыполнено = Истина;
		МассивСообщений =  Задание.ПолучитьСообщенияПользователю();
	КонецЕсли;
	Возврат ЗаданиеВыполнено;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеПолученияВыписки()

	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ОбработатьРезультатПолученияВыписки();
			Возврат; // задание выполнили, выходим
		КонецЕсли;
	Исключение
		ВызватьИсключение;
	КонецПопытки;

	ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.ТекущийИнтервал
													* ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала;
	Если ПараметрыОбработчикаОжидания.ТекущийИнтервал > ПараметрыОбработчикаОжидания.МаксимальныйИнтервал Тогда
		ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.МаксимальныйИнтервал;
	КонецЕсли;
	ПодключитьОбработчикОжидания(
		"Подключаемый_ПроверитьВыполнениеПолученияВыписки", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеПолученияИзвещенияОСостоянии()

	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ОбработатьРезультатПолученияИзвещенияОСостоянииЭД();
			Возврат;
		КонецЕсли;
	Исключение
		ВызватьИсключение;
	КонецПопытки;

	ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.ТекущийИнтервал
													* ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала;
	Если ПараметрыОбработчикаОжидания.ТекущийИнтервал > ПараметрыОбработчикаОжидания.МаксимальныйИнтервал Тогда
		ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.МаксимальныйИнтервал;
	КонецЕсли;
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеПолученияИзвещенияОСостоянии",
											ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатПолученияВыписки()
	
	КолПолученных = 0;
	
	СтруктураВозврата = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если СтруктураВозврата.Свойство("ДанныеЭП") И СтруктураВозврата.ДанныеЭП.Количество() Тогда
		Для Каждого КлючЗначение ИЗ СтруктураВозврата.ДанныеЭП Цикл
			ДобавитьПодписиВЭлектронныйДокумент(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ПроизошлаОшибка = СтруктураВозврата.ЕстьОшибка;
	Если ПроизошлаОшибка Тогда
		Если СтруктураВозврата.Свойство("ТребуетсяПовторнаяАутентификация") Тогда
			ПроизошлаОшибка = Ложь;
			ПараметрыОбработки = Новый Структура;
			ПараметрыОбработки.Вставить("СоглашениеЭД", Параметры.СоглашениеЭД);
			ПараметрыОбработки.Вставить("ПроцедураОбработчик", "ПродолжитьПолучениеВыпискиПослеПолученияМаркераБанка");
			ПараметрыАвторизации = Новый Структура;
			Если ЭлектронныеДокументыСлужебныйКлиент.ПолученыДанныеАвторизации(Параметры.СоглашениеЭД, ПараметрыАвторизации) Тогда
				ОбработатьПолучениеДанныхАутентификации(ПараметрыАвторизации, ПараметрыОбработки);
			Иначе
				ОООЗ = Новый ОписаниеОповещения("ОбработатьПолучениеДанныхАутентификации", ЭтотОбъект, ПараметрыОбработки);
				ЭлектронныеДокументыСлужебныйКлиент.ПолучитьДанныеАутентификации(Параметры.СоглашениеЭД, ОООЗ);
			КонецЕсли;
			Возврат;
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтруктураВозврата.ТекстСообщения);
			ПриЗакрытииНаСервере(ИдентификаторЗадания);
			Закрыть();
			Возврат;
		КонецЕсли;
	КонецЕсли;
			
	ЗаголовокОповещения = НСтр("ru = 'Обмен электронными документами'");
	
	
	Если КолПолученных > 0 Тогда
		ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Получено документов: (%1)'"), КолПолученных);
	КонецЕсли;
	
	Оповестить("ОбновитьСостояниеЭД");
	
	ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);
	
	ОповеститьОВыборе(СтруктураВозврата.ВыпискаБанка);
			
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатПолученияИзвещенияОСостоянииЭД()
		
	СтруктураВозврата = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если СтруктураВозврата.Свойство("ДанныеЭП") И СтруктураВозврата.ДанныеЭП.Количество() Тогда
		Для Каждого КлючЗначение ИЗ СтруктураВозврата.ДанныеЭП Цикл
			ДобавитьПодписиВЭлектронныйДокумент(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
		
	ПроизошлаОшибка = СтруктураВозврата.ЕстьОшибка;
	Если ПроизошлаОшибка Тогда
		Если СтруктураВозврата.Свойство("ТребуетсяПовторнаяАутентификация") Тогда
			ПроизошлаОшибка = Ложь;
			ПараметрыОбработки = Новый Структура;
			ПараметрыОбработки.Вставить("СоглашениеЭД", Параметры.СоглашениеЭД);
			ПараметрыОбработки.Вставить("ПроцедураОбработчик", "ПродолжитьПолучениеИзвещенияПослеПолученияМаркераБанка");
			ПараметрыАвторизации = Новый Структура;
			Если ЭлектронныеДокументыСлужебныйКлиент.ПолученыДанныеАвторизации(Параметры.СоглашениеЭД, ПараметрыАвторизации) Тогда
				ОбработатьПолучениеДанныхАутентификации(ПараметрыАвторизации, ПараметрыОбработки);
			Иначе
				ОООЗ = Новый ОписаниеОповещения("ОбработатьПолучениеДанныхАутентификации", ЭтотОбъект, ПараметрыОбработки);
				ЭлектронныеДокументыСлужебныйКлиент.ПолучитьДанныеАутентификации(Параметры.СоглашениеЭД, ОООЗ);
			КонецЕсли;
			Возврат;
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтруктураВозврата.ТекстСообщения);
			ПриЗакрытииНаСервере(ИдентификаторЗадания);
			Закрыть();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Оповестить("ОбновитьСостояниеЭД");
	
	ПараметрыВозврата = Новый Структура("Успех", Истина);
		
	Закрыть(ПараметрыВозврата);
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(Знач ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура ПолучитьВыпискуЧерезДополнительнуюОбработку()
	
	ВнешнийПодключаемыйМодуль = ЭлектронныеДокументыСлужебныйКлиент.ВнешнийПодключаемыйМодульЧерезДополнительнуюОбработку(
																								Параметры.СоглашениеЭД);
	ДанныеСертификата = Параметры.ДанныеСертификата;
	
	ПараметрыВыписки = Новый Структура;
	ДатаНачалаСтрокой    = Формат(Параметры.ДатаНачала,    "ДЛФ=D");
	ДатаОкончанияСтрокой = Формат(Параметры.ДатаОкончания, "ДЛФ=D");
	НазваниеЭД = НСтр("ru = 'Выписка банка за период с %1 по %2'");
	НазваниеЭД = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НазваниеЭД, ДатаНачалаСтрокой, ДатаОкончанияСтрокой);
	КолПолученных = 0;
	
	МассивНомеровБанковскихСчетов = ПолучитьИзВременногоХранилища(МассивБанковскихСчетовСсылка);
	ЭДДляПроверки = Новый Массив;
	
	Для Каждого НомерСчета Из МассивНомеровБанковскихСчетов Цикл
		ПараметрыВыписки.Вставить("НомерСчета",        НомерСчета);
		ПараметрыВыписки.Вставить("БИК",               БИК);
		ПараметрыВыписки.Вставить("ДатаНачала"   ,     Формат(Параметры.ДатаНачала,    "ДФ=dd.MM.yyyy"));
		ПараметрыВыписки.Вставить("ДатаОкончания",     Формат(Параметры.ДатаОкончания, "ДФ=dd.MM.yyyy"));
		ПараметрыВыписки.Вставить("ВерсияСхемыДанных", "1.07");
		ДанныеВыписки = ЭлектронныеДокументыСлужебныйКлиент.ОтправитьЗапросЧерезДополнительнуюОбработку(
			ВнешнийПодключаемыйМодуль, ДанныеСертификата.ДвоичныеДанныеСертификата, 2, ПараметрыВыписки);
		Если ДанныеВыписки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого Подпись Из ДанныеВыписки.Подписи Цикл
			
			ДанныеСертификатаПодписи = ЭлектронныеДокументыСлужебныйКлиент.ДанныеСертификатаЧерезДополнительнуюОбработку(
																		ВнешнийПодключаемыйМодуль, Подпись.Сертификат);
			Если ДанныеСертификатаПодписи = Неопределено Тогда
				ПроизошлаОшибка = Истина;
				Возврат;
			КонецЕсли;
			Подпись.Вставить("ДанныеСертификата", ДанныеСертификатаПодписи);
			
		КонецЦикла;
		
		ЭДВыписка = СохранитьВыписку(ДанныеВыписки, Параметры.СоглашениеЭД, НазваниеЭД);
		ЭДДляПроверки.Добавить(ЭДВыписка);
		ЭлектронныеДокументыСлужебныйВызовСервера.ОпределитьИсполненныеПлатежныеПоручения(ЭДВыписка);
		КолПолученных = КолПолученных + 1;
	КонецЦикла;
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("МассивЭДДляПроверкиЧерезДополнительнуюОбработку", ЭДДляПроверки);
	ПараметрыПроверки.Вставить("ВнешнийПодключаемыйМодуль", ВнешнийПодключаемыйМодуль);
	ПараметрыПроверки.Вставить("ТекущийИндексПроверкиПодписейЧерезДополнительнуюОбработку", 0);
	ПараметрыПроверки.Вставить("СоглашениеЭД", Параметры.СоглашениеЭД);
	ЭлектронныеДокументыСлужебныйКлиент.НачатьПроверкуСтатусовПодписейЧерезДополнительнуюОбработку(
		ВнешнийПодключаемыйМодуль, ПараметрыПроверки);
	
	ЗаголовокОповещения = НСтр("ru = 'Обмен электронными документами'");
			
	Если КолПолученных = 0 Тогда
		ТекстОповещения = НСтр("ru = 'Полученных документов нет'");
	Иначе
		ТекстОповещения = НСтр("ru = 'Получено документов: (%1)'");
		ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОповещения, КолПолученных);
	КонецЕсли;
		
	Оповестить("ОбновитьСостояниеЭД");
		
	ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);
	
	ОповеститьОВыборе(ЭДВыписка);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СохранитьВыписку(Знач ДанныеВыписки, Знач СоглашениеЭД, Знач НазваниеЭД)
	
	РеквизитыСоглашения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СоглашениеЭД, "Организация, Контрагент");
	
	
	АдресФайла = ПоместитьВоВременноеХранилище(ДанныеВыписки.Выписка);
	ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(
							СоглашениеЭД,
							НазваниеЭД,
							"xml",
							ТекущаяДатаСеанса(),
							ТекущаяДатаСеанса(),
							АдресФайла,
							,
							,
							Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());
		
	Ответственный = ЭлектронныеДокументыПереопределяемый.ПолучитьОтветственногоПоЭД(
										РеквизитыСоглашения.Контрагент, СоглашениеЭД);
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("Автор",                    Пользователи.АвторизованныйПользователь());
	СтруктураЭД.Вставить("НаправлениеЭД",            Перечисления.НаправленияЭД.Входящий);
	СтруктураЭД.Вставить("СтатусЭД",                 Перечисления.СтатусыЭД.Получен);
	СтруктураЭД.Вставить("Ответственный",            Ответственный);
	СтруктураЭД.Вставить("Организация",              РеквизитыСоглашения.Организация);
	СтруктураЭД.Вставить("ВидЭД",                    Перечисления.ВидыЭД.ВыпискаБанка);
	СтруктураЭД.Вставить("СоглашениеЭД",             СоглашениеЭД);
	СтруктураЭД.Вставить("Контрагент",               РеквизитыСоглашения.Контрагент);
	СтруктураЭД.Вставить("ДатаИзмененияСтатусаЭД",   ТекущаяДатаСеанса());
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", ТекущаяДатаСеанса());
	СтруктураЭД.Вставить("НаименованиеФайла",        СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(НазваниеЭД));
	
	ЭлектронныеДокументыСлужебныйВызовСервера.ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураЭД, Ложь);
	
	Для Каждого Подпись ИЗ ДанныеВыписки.Подписи Цикл
		ДанныеПодписи = Новый Структура;
		ДанныеПодписи.Вставить("НоваяПодписьДвоичныеДанные", Подпись.Подпись);
		ДанныеПодписи.Вставить("Отпечаток",                  Подпись.ДанныеСертификата.Отпечаток);
		ДанныеПодписи.Вставить("ДатаПодписи",                ТекущаяДатаСеанса());
		ДанныеПодписи.Вставить("Комментарий",                "");
		ДанныеПодписи.Вставить("ИмяФайлаПодписи",            НСтр("Подпись"));
		ДанныеПодписи.Вставить("КомуВыданСертификат",        Подпись.ДанныеСертификата.ВладелецФИО);
		ДанныеПодписи.Вставить("ДвоичныеДанныеСертификата",  Подпись.Сертификат);
		ЭлектронныеДокументыСлужебныйВызовСервера.ДобавитьПодпись(ДобавленныйФайл, ДанныеПодписи);
	КонецЦикла;
	
	Возврат ДобавленныйФайл;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьВыпискуiBank2() Экспорт
	
	ПараметрыВыписки = Новый Структура;
	ДатаНачалаСтрокой = Формат(Параметры.ДатаНачала, "ДЛФ=D");
	ДатаОкончанияСтрокой = Формат(Параметры.ДатаОкончания, "ДЛФ=D");
	НазваниеЭД = НСтр("ru = 'Выписка банка за период с %1 по %2'");
	НазваниеЭД = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НазваниеЭД, ДатаНачалаСтрокой, ДатаОкончанияСтрокой);
	КолПолученных = 0;
	
	МассивНомеровБанковскихСчетов = ПолучитьИзВременногоХранилища(МассивБанковскихСчетовСсылка);
	ЭДДляПроверки = Новый Массив;
	
	Для Каждого НомерСчета Из МассивНомеровБанковскихСчетов Цикл
		ПараметрыВыписки.Вставить("НомерСчета",        НомерСчета);
		ПараметрыВыписки.Вставить("БИК",               БИК);
		ПараметрыВыписки.Вставить("ДатаНачала"   ,     Формат(Параметры.ДатаНачала,    "ДФ=dd.MM.yyyy"));
		ПараметрыВыписки.Вставить("ДатаОкончания",     Формат(Параметры.ДатаОкончания, "ДФ=dd.MM.yyyy"));
		ПараметрыВыписки.Вставить("ВерсияСхемыДанных", "1.07");
		ДанныеВыписки = ЭлектронныеДокументыСлужебныйКлиент.ОтправитьЗапросiBank2("2", ПараметрыВыписки);
		Если ДанныеВыписки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого Подпись Из ДанныеВыписки.Подписи Цикл
			
			ДанныеСертификатаПодписи = ЭлектронныеДокументыСлужебныйКлиент.ДанныеСертификатаiBank2(Подпись.Сертификат);
			Если ДанныеСертификатаПодписи = Неопределено Тогда
				ПроизошлаОшибка = Истина;
				Возврат;
			КонецЕсли;
			Подпись.Вставить("ДанныеСертификата", ДанныеСертификатаПодписи);
			
		КонецЦикла;
		
		ЭДВыписка = СохранитьВыписку(ДанныеВыписки, Параметры.СоглашениеЭД, НазваниеЭД);
		ЭДДляПроверки.Добавить(ЭДВыписка);
		ЭлектронныеДокументыСлужебныйВызовСервера.ОпределитьИсполненныеПлатежныеПоручения(ЭДВыписка);
		КолПолученных = КолПолученных + 1;
	КонецЦикла;
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("МассивЭДДляПроверкиiBank2", ЭДДляПроверки);
	ПараметрыПроверки.Вставить("ТекущийИндексПроверкиПодписейiBank2", 0);
	ЭлектронныеДокументыСлужебныйКлиент.НачатьПроверкуСтатусовПодписейiBank2(ПараметрыПроверки);
	
	ЗаголовокОповещения = НСтр("ru = 'Обмен электронными документами'");
			
	Если КолПолученных = 0 Тогда
		ТекстОповещения = НСтр("ru = 'Полученных документов нет'");
	Иначе
		ТекстОповещения = НСтр("ru = 'Получено документов: (%1)'");
		ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОповещения, КолПолученных);
	КонецЕсли;
		
	Оповестить("ОбновитьСостояниеЭД");
		
	ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);
	
	ОповеститьОВыборе(ЭДВыписка);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолучениеДанныхАутентификации(ДанныеАутентификации, ПараметрыОбработки) Экспорт
	
	Если ДанныеАутентификации = Неопределено Тогда
		ПроизошлаОшибка = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;
	РеквизитыНастройкиЭДО = ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыНастройкиЭДО(Параметры.СоглашениеЭД);
	
	Обработчик = Новый ОписаниеОповещения(ПараметрыОбработки.ПроцедураОбработчик, ЭтотОбъект, ПараметрыОбработки);
	
	ЭлектронныеДокументыСлужебныйКлиент.ПолучитьМаркерБанкаПоЛогинуИПаролю(Параметры.СоглашениеЭД, Обработчик,
		РеквизитыНастройкиЭДО.АдресСервера, РеквизитыНастройкиЭДО.ИдентификаторОрганизации,
		ДанныеАутентификации.Пользователь, ДанныеАутентификации.ПарольПользователя);

КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьПолучениеВыпискиПослеПолученияМаркераБанка(Маркер, ПараметрыОбработки) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Маркер) Тогда
		ПроизошлаОшибка = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапроса.ИдентификаторСессииБанка = Маркер;
	ОперацияВыполнена = ПолучитьВыпискуАсинхронноНаСервере(
		ПараметрыЗапроса, АдресХранилища, УникальныйИдентификатор, ИдентификаторЗадания, ПроизошлаОшибка);
	
	Если ОперацияВыполнена Тогда
		ОбработатьРезультатПолученияВыписки();
		Возврат;
	КонецЕсли;

	ПараметрыОбработчикаОжидания = Новый Структура(
			"МинимальныйИнтервал, МаксимальныйИнтервал, ТекущийИнтервал, КоэффициентУвеличенияИнтервала", 1, 15, 1, 1.4);
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеПолученияВыписки", 1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьПолучениеИзвещенияПослеПолученияМаркераБанка(Маркер, ПараметрыОбработки) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Маркер) Тогда
		ПроизошлаОшибка = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапроса.ИдентификаторСессииБанка = Маркер;
	ОперацияВыполнена = ПолучитьИзвещениеОСостоянииЭДАсинхронноНаСервере(
		ПараметрыЗапроса, АдресХранилища, УникальныйИдентификатор, ИдентификаторЗадания);
	
	Если ОперацияВыполнена Тогда
		ОбработатьРезультатПолученияИзвещенияОСостоянииЭД();
		Возврат;
	КонецЕсли;

	ПараметрыОбработчикаОжидания = Новый Структура(
		"МинимальныйИнтервал, МаксимальныйИнтервал, ТекущийИнтервал, КоэффициентУвеличенияИнтервала", 1, 15, 1, 1.4);
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеПолученияИзвещенияОСостоянии", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПодписиВЭлектронныйДокумент(ЭД, Подписи)
	
	МассивЭДИПодписей = Новый Массив;
	Для Каждого Подпись Из Подписи Цикл
		СтруктураДанных = Новый Структура("ЭлектронныйДокумент, ДанныеПодписи", ЭД, Подпись);
		МассивЭДИПодписей.Добавить(СтруктураДанных);
	КонецЦикла;
	
	ЭлектронныеДокументыСлужебныйКлиент.ЗанестиИнформациюОПодписи(МассивЭДИПодписей);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолучитьНовыеДокументыСбербанк()
	
	ПараметрыОбработки = Новый Структура;
	Обработчик = Новый ОписаниеОповещения("ПослеПолученияНовыхДокументовСбербанк", ЭтотОбъект, ПараметрыОбработки);
	ПараметрыОбработки.Вставить("ОповещениеПослеПолученияНовыхДокументов", Обработчик);
	ПараметрыОбработки.Вставить("ПолучитьРезультатыОбработкиЗапросовВыписки");
	ПараметрыОбработки.Вставить("ПолучитьРезультатыОбработкиВыпискиБанка");
	ПараметрыОбработки.Вставить("ПолучитьРезультатыОбработкиЗапросовНочнойВыписки");
	ПараметрыОбработки.Вставить("ОтправитьЗапросНаПолучениеГотовыхВыписокСбербанк");
	ЭлектронныеДокументыСлужебныйКлиент.ОтправитьЗапросНаНочныеВыпискиСбербанк(Параметры.СоглашениеЭД, ПараметрыОбработки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтправкиЗапросаВыпискиСбербанк(ЗапросОтправлен, Параметры) Экспорт
	
	Если Не ЗапросОтправлен Тогда
		ПроизошлаОшибка = Истина;
		Закрыть();
	КонецЕсли;
	
	ПараметрыОбработчикаОжидания = Новый Структура(
		"МинимальныйИнтервал, МаксимальныйИнтервал, ТекущийИнтервал, КоэффициентУвеличенияИнтервала", 1, 15, 1, 1.4);
	ПодключитьОбработчикОжидания("Подключаемый_ПолучитьНовыеДокументыСбербанк", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияНовыхДокументовСбербанк(ДокументыПолучены, ПараметрыОбработки) Экспорт
	
	Если Не Открыта() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДокументыПолучены Тогда
		ПроизошлаОшибка = Истина;
		Закрыть();
		Возврат;
	КонецЕсли;
	
	МассивБанковскихСчетов = ПолучитьИзВременногоХранилища(МассивБанковскихСчетовСсылка);
	
	ГотовыеВыписки = ЭлектронныеДокументыСлужебныйВызовСервера.ГотовыеВыпискиСбербанка(
		Параметры.СоглашениеЭД, МассивБанковскихСчетов, Параметры.ДатаНачала, Параметры.ДатаОкончания);
	Если ГотовыеВыписки.Количество() Тогда
		ОповеститьОВыборе(ГотовыеВыписки);
		Возврат;
	КонецЕсли;
	
	ГотовыеВыпискиСсылка = ПоместитьВоВременноеХранилище(ГотовыеВыписки, УникальныйИдентификатор);
	
	ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.ТекущийИнтервал
													* ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала;
	Если ПараметрыОбработчикаОжидания.ТекущийИнтервал > ПараметрыОбработчикаОжидания.МаксимальныйИнтервал Тогда
		ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.МаксимальныйИнтервал;
	КонецЕсли;
	ПодключитьОбработчикОжидания(
		"Подключаемый_ПолучитьНовыеДокументыСбербанк", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	
КонецПроцедуры

#КонецОбласти

