#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция СоздатьПлатежныеДокументы(Параметры, АктуализированыРеквизитыПлатежаВБюджет = Неопределено) Экспорт
	
	СозданныеДокументы = Новый Массив;
	
	ТаблицаПлатежей = ПолучитьИзВременногоХранилища(Параметры.Платежи);
	
	Дата            = НачалоДня(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	Организация     = Параметры.Организация;
	СчетОрганизации = Параметры.СчетОрганизации;
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Дата",            Дата);
	ДанныеЗаполнения.Вставить("Организация",     Организация);
	ДанныеЗаполнения.Вставить("СчетОрганизации", СчетОрганизации);
	
	Если Параметры.Свойство("НалоговыйПериод") Тогда
		ДанныеЗаполнения.Вставить("НалоговыйПериод", Параметры.НалоговыйПериод);
	КонецЕсли;
	
	Если Параметры.СпособОплаты = Перечисления.СпособыУплатыНалогов.НаличнымиПоКвитанции
		И Не ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация) Тогда
		
		ВидПлатежногоДокумента = "РасходныйКассовыйОрдер";
		ДанныеЗаполнения.Вставить("ВидОперации", Перечисления.ВидыОперацийРКО.УплатаНалога);
		
	Иначе
		
		ВидПлатежногоДокумента = "ПлатежноеПоручение";
		ДанныеЗаполнения.Вставить("ВидОперации", Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога);
		
	КонецЕсли;
	
	АктуализированыРеквизитыПлатежаВБюджет = Ложь;
	
	Для каждого Платеж Из ТаблицаПлатежей Цикл
		
		Если НалоговыйУчетОбособленныхПодразделений.УчетВРазрезеНалоговыхОрганов() Тогда
			НомерСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НомерСубконто(
				Платеж.СчетУчета, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные["РегистрацияВНалоговомОргане"]);
			РегистрацияВНалоговомОргане = ?(НомерСубконто <> 0, Платеж["Субконто" + НомерСубконто], Неопределено);
		Иначе
			РегистрацияВНалоговомОргане = Неопределено;
		КонецЕсли;
		
		НомерСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НомерСубконто(
			Платеж.СчетУчета, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные["УровниБюджетов"]);
		УровеньБюджета = ?(НомерСубконто <> 0, Платеж["Субконто" + НомерСубконто], Неопределено);
		
		ВидНалога = РасчетыСБюджетом.ВидНалогаПоСчетуУчета(Платеж.СчетУчета, Организация, Дата, УровеньБюджета);
		Налог     = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидНалога);
		
		НастройкаЗаполнения = РегистрыСведений.РеквизитыУплатыНалоговИПлатежейВБюджет.КлючНастройкиУплатыНалога(
			Налог, Организация, РегистрацияВНалоговомОргане);
		
		Если НастройкаЗаполнения <> Неопределено Тогда
			
			ИсходныеДанныеЗаполнения = РегистрыСведений.РеквизитыУплатыНалоговИПлатежейВБюджет.ДанныеЗаполнения(
				НастройкаЗаполнения, Дата);
			
			Если ЗначениеЗаполнено(ИсходныеДанныеЗаполнения) Тогда
				Для каждого Реквизит Из ИсходныеДанныеЗаполнения Цикл
					Если Реквизит.Значение <> Неопределено Тогда
						ДанныеЗаполнения.Вставить(Реквизит.Ключ, Реквизит.Значение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
		ДанныеЗаполнения.Вставить("Налог", Налог);
		
		// Проверка актуальности реквизитов платежей в бюджет
		Если Не АктуализированыРеквизитыПлатежаВБюджет И Не Справочники.ВидыНалоговИПлатежейВБюджет.РеквизитыАктуальны(Налог, Дата) Тогда
			Справочники.ВидыНалоговИПлатежейВБюджет.ОбновитьПоставляемыеДанныеИзКлассификатора();
			АктуализированыРеквизитыПлатежаВБюджет = Истина;
		КонецЕсли;
		
		ДанныеЗаполнения.Вставить("СчетУчета", Платеж.СчетУчета);
		Для НомерСубконто = 1 По 3 Цикл
			ДанныеЗаполнения.Вставить("Субконто" + НомерСубконто, Платеж["Субконто" + НомерСубконто]);
		КонецЦикла;
		
		ДанныеЗаполнения.Вставить("СуммаДокумента", Платеж.Сумма);
		
		НовыйДокумент = Документы[ВидПлатежногоДокумента].СоздатьДокумент();
		НовыйДокумент.Заполнить(ДанныеЗаполнения);
		НовыйДокумент.Записать();
		
		СозданныеДокументы.Добавить(НовыйДокумент.Ссылка);
		
	КонецЦикла;
	
	Возврат СозданныеДокументы;
	
КонецФункции

Функция НоваяТаблицаПлатежей() Экспорт
	
	Платежи = Новый ТаблицаЗначений;
	Платежи.Колонки.Добавить("СчетУчета",     Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	Платежи.Колонки.Добавить("Субконто1",     Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип);
	Платежи.Колонки.Добавить("Субконто2",     Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип);
	Платежи.Колонки.Добавить("Субконто3",     Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип);
	Платежи.Колонки.Добавить("Сумма",         ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	Возврат Платежи;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОстаткиНаСчетах68и69(Организация, НаДату) Экспорт
	
	Субсчета68 = БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетыПоНалогам);
	Субсчета69 = БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетыПоСоциальномуСтрахованию);
	
	Субсчета68и69 = Субсчета68;
	Для Каждого Счет Из Субсчета69 Цикл
		Субсчета68и69.Добавить(Счет);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГраницаОстатков", Новый Граница(КонецДня(НаДату), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация",     Организация);
	Запрос.УстановитьПараметр("Субсчета68и69",   Субсчета68и69);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ХозрасчетныйОстатки.Счет КАК СчетУчета,
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Субконто2,
	|	ХозрасчетныйОстатки.Субконто3,
	|	-ХозрасчетныйОстатки.СуммаОстаток КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ГраницаОстатков,
	|			Счет В (&Субсчета68и69),
	|			,
	|			Организация = &Организация) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.СуммаОстаток < 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетУчета,
	|	Подразделение
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#КонецЕсли