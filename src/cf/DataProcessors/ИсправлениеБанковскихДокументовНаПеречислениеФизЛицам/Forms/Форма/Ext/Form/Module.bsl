
&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

#Область Проверка

&НаСервере
Процедура ЗагрузитьРезультат()
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.Свойство("ВидПроверки") Тогда
			Если Результат.ВидПроверки = Неопределено ИЛИ Результат.ВидПроверки = 1 Тогда
				ТЧ_ЗарплатныеПроекты = Результат.ТЧ_ЗарплатныеПроекты;
				ЗарплатныеПроектыДерево.ПолучитьЭлементы().Очистить();
				ЗаполнитьДерево(ТЧ_ЗарплатныеПроекты, ЗарплатныеПроектыДерево);
				Элементы.ГруппаГруппаОшибкиВладельцаСчета.Заголовок = "Некорректный владелец банковского счета (" + ТЧ_ЗарплатныеПроекты.Количество() + ")";	
			КонецЕсли;
			
			Если Результат.ВидПроверки = Неопределено ИЛИ Результат.ВидПроверки = 2 Тогда
				ТЧ_КонтрагентыФизическиеЛица = Результат.ТЧ_КонтрагентыФизическиеЛица;
				КонтрагентыФизическиеЛица.ПолучитьЭлементы().Очистить();
				ЗаполнитьДерево(ТЧ_КонтрагентыФизическиеЛица, КонтрагентыФизическиеЛица);
				Элементы.ГруппаОшибкиУказанияФизическогоЛица.Заголовок = "Некорректный тип контрагента (" + ТЧ_КонтрагентыФизическиеЛица.Количество() + ")";
			КонецЕсли;
			
			Если Результат.ВидПроверки = Неопределено ИЛИ Результат.ВидПроверки = 3 Тогда
				ТЧ_ВозможныеКонтрагентыФизическиеЛица = Результат.ТЧ_ВозможныеКонтрагентыФизическиеЛица;
				ВозможныеКонтрагентыФизическиеЛица.ПолучитьЭлементы().Очистить();
				ЗаполнитьДерево(ТЧ_ВозможныеКонтрагентыФизическиеЛица, ВозможныеКонтрагентыФизическиеЛица);
				Элементы.ГруппаВозможныеОшибки.Заголовок = "Возможные ошибки (" + ТЧ_ВозможныеКонтрагентыФизическиеЛица.Количество() + ")";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьДанныеНаСервере(ВидПроверки = Неопределено)
	
	Если ВидПроверки = Неопределено Тогда
		Если Элементы.ГруппаНекорректныеДанные.ТекущаяСтраница = Элементы.ГруппаГруппаОшибкиВладельцаСчета Тогда
			ВидПроверки = 1;
		ИначеЕсли Элементы.ГруппаНекорректныеДанные.ТекущаяСтраница = Элементы.ГруппаОшибкиУказанияФизическогоЛица Тогда
			ВидПроверки = 2;
		ИначеЕсли Элементы.ГруппаНекорректныеДанные.ТекущаяСтраница = Элементы.ГруппаВозможныеОшибки Тогда
			ВидПроверки = 3;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыПроверки= Новый Структура;
	ПараметрыПроверки.Вставить("ВидПроверки", ВидПроверки);
	
	НаименованиеЗадания = НСтр("ru = 'Исправление банковских документов на перечисление физ.лицам'");
	
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
	Новый УникальныйИдентификатор,
	"Обработки.ИсправлениеБанковскихДокументовНаПеречислениеФизЛицам.ПроверитьДанные", 
	ПараметрыПроверки, 
	НаименованиеЗадания);
	
	АдресХранилища = Результат.АдресХранилища;	
	
	Если Результат.ЗаданиеВыполнено Тогда
		ЗагрузитьРезультат();
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьПроверку()
	
	Результат = ПроверитьДанныеНаСервере();
	
	Если НЕ Результат.ЗаданиеВыполнено Тогда
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища       = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДанные(Команда)
	ВыполнитьПроверку();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДерево(Источник, Приемник)
	
	СчетКонтрагента = "";
	СтрокаВладелец  = "";
	КоличествоЗаписей = 0;
	Для Каждого СтрокаТаблицы ИЗ Источник Цикл
		Если СчетКонтрагента <> СтрокаТаблицы.Счет Тогда
			
			Если КоличествоЗаписей <> 0 Тогда
				СтрокаВладелец.КоличествоЗаписей = КоличествоЗаписей;
				КоличествоЗаписей = 0;
			КонецЕсли;
			
			СчетКонтрагента                  = СтрокаТаблицы.Счет;
			СтрокаВладелец                   = Приемник.ПолучитьЭлементы().Добавить();
			СтрокаВладелец.Группа            = Истина;
			СтрокаВладелец.Счет              = СтрокаТаблицы.Счет;
			СтрокаВладелец.СчетПредставление = СтрокаТаблицы.СчетПредставление;
			СтрокаВладелец.Отметка           = СтрокаТаблицы.Отметка;
			СтрокаВладелец.Контрагент        = СтрокаТаблицы.Контрагент;
		КонецЕсли;
		КоличествоЗаписей = КоличествоЗаписей + 1;
		Подстрока = СтрокаВладелец.ПолучитьЭлементы().Добавить();
		Подстрока.Счет                    = СтрокаТаблицы.Счет;
		Подстрока.СчетПредставление       = СтрокаТаблицы.СчетПредставление;
		Подстрока.Получатель              = СтрокаТаблицы.Получатель;
		Подстрока.ПолучательПредставление = СтрокаТаблицы.ПолучательПредставление;
		Подстрока.Документ                = СтрокаТаблицы.Документ;
		Подстрока.ЭтоВладелецСчета        = СтрокаТаблицы.ЭтоВладелецСчета;
		
	КонецЦикла;
	Если КоличествоЗаписей <> 0 Тогда
		СтрокаВладелец.КоличествоЗаписей = КоличествоЗаписей;
	КонецЕсли;
	
	КонецПроцедуры

#КонецОбласти

#Область ОбработкаДляВсехТаблиц

&НаКлиенте
Процедура ДеревоВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Найти(Поле.Имя, "ПолучательПредставление") <> 0 Тогда
		СтандартнаяОбработка = Ложь;
		Получатель= Элемент.ТекущиеДанные.Получатель;
		Если ЗначениеЗаполнено(Получатель) Тогда
			П = Новый Структура("Ключ", Получатель);
			ФормаЭлементаСправочника = ПолучитьФорму("Справочник.ФизическиеЛица.ФормаОбъекта", П);
			ФормаЭлементаСправочника.Открыть();
		КонецЕсли;
	КонецЕсли;
	
	Если Найти(Поле.Имя, "Документ") <> 0 Тогда
		СтандартнаяОбработка = Ложь;
		Документ= Элемент.ТекущиеДанные.Документ;
		Если ЗначениеЗаполнено(Документ) Тогда
			П = Новый Структура("Ключ", Документ);
			ФормаДокумента = ПолучитьФорму("Документ.ПлатежноеПоручение.ФормаОбъекта", П);
			ФормаДокумента.Открыть();
		КонецЕсли;
	КонецЕсли;
	
	Если Найти(Поле.Имя, "Счет") <> 0 Тогда
		СтандартнаяОбработка = Ложь;
		Счет= Элемент.ТекущиеДанные.Счет;
		П = Новый Структура("Ключ", Счет);
		ФормаДокумента = ПолучитьФорму("Справочник.БанковскиеСчета.ФормаОбъекта", П);
		ФормаДокумента.Открыть();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОтметкаПриИзменении(Элемент)
	
	ТекущаяВетка = Элемент.Родитель.ТекущиеДанные;
	ТекущаяОтметка = ТекущаяВетка.Отметка;
	Если ТекущаяВетка.ПолучитьРодителя() = Неопределено Тогда
		Строки = ТекущаяВетка.ПолучитьЭлементы();
		Для Каждого Строка ИЗ Строки Цикл
			Строка.Отметка = ТекущаяОтметка;
		КонецЦикла;
	Иначе
		Элемент.Родитель.ТекущиеДанные.Отметка = НЕ ТекущаяОтметка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ТекущаяВетка = Элемент.Родитель.Родитель.ТекущиеДанные;
	ТекущийКонтрагент = ТекущаяВетка.Контрагент;
	ТекущаяВетка.Отметка = ЗначениеЗаполнено(ТекущийКонтрагент);
	Строки = ТекущаяВетка.ПолучитьЭлементы();
	Для Каждого Строка ИЗ Строки Цикл
		Строка.Контрагент = ТекущийКонтрагент;
		Строка.Отметка = ЗначениеЗаполнено(ТекущийКонтрагент);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ИсправлениеДанных

&НаСервере
Функция ИсправитьДанныеНаСервере(ВидИсправления)
	
	Если ВидИсправления = 1 Тогда
		СтрокиДерева = ДанныеФормыВЗначение(ЗарплатныеПроектыДерево, Тип("ДеревоЗначений"));
	ИначеЕсли ВидИсправления = 2 Тогда;
		СтрокиДерева = ДанныеФормыВЗначение(КонтрагентыФизическиеЛица, Тип("ДеревоЗначений"));
	Иначе
		СтрокиДерева = ДанныеФормыВЗначение(ВозможныеКонтрагентыФизическиеЛица, Тип("ДеревоЗначений"));
	КонецЕсли;
	
	ПараметрыИсправления = Новый Структура;
	ПараметрыИсправления.Вставить("ВидИсправления", ВидИсправления);
	ПараметрыИсправления.Вставить("СтрокиДерева", СтрокиДерева);
	
	НаименованиеЗадания = НСтр("ru = 'Исправление банковских счетов на перечисление физ.лицам'");
	
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
	Новый УникальныйИдентификатор,
	"Обработки.ИсправлениеБанковскихДокументовНаПеречислениеФизЛицам.ИсправитьДанные", 
	ПараметрыИсправления, 
	НаименованиеЗадания);
	
	АдресХранилища = Результат.АдресХранилища;	
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьИсправление(ВидИсправления)
	
	Результат = ИсправитьДанныеНаСервере(ВидИсправления);
	
	Если НЕ Результат.ЗаданиеВыполнено Тогда
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища       = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
		
	Иначе
		
		ВыполнитьПроверку();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсправитьВладельца(Команда)
	ВыполнитьИсправление(1);
КонецПроцедуры

&НаКлиенте
Процедура ИсправитьТип(Команда)
	ВыполнитьИсправление(2);
КонецПроцедуры

&НаКлиенте
Процедура ИсправитьСомнительные(Команда)
	ВыполнитьИсправление(3);
КонецПроцедуры

#КонецОбласти

#Область ОбщиеПроцедурыИФункции

&НаКлиенте
Процедура ЗакрытьФорму(Команда)
	
	ЭтаФорма.Закрыть();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ФормаДлительнойОперации.Открыта() 
			И ФормаДлительнойОперации.ИдентификаторЗадания = ИдентификаторЗадания Тогда
			Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
				ЗагрузитьРезультат();
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			Иначе
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания(
					"Подключаемый_ПроверитьВыполнениеЗадания", 
					ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
					Истина);
			КонецЕсли;
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти