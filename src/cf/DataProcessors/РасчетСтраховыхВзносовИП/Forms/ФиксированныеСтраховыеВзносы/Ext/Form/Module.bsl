#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Параметры выполнения задачи бухгалтера
	ЗаполнитьЗначенияСвойств(Объект, Параметры);
	
	ПериодСобытия       = Параметры.ПериодСобытия;
	Правило             = Параметры.Правило;
	ВидСтраховыхВзносов = Параметры.ВидСтраховыхВзносов;
	
	ТекущийПериод = ?(ЗначениеЗаполнено(ПериодСобытия), ПериодСобытия, КонецКвартала(ОбщегоНазначенияБП.ПолучитьРабочуюДату()));
	
	Объект.Период = ТекущийПериод;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;
	
	УчетДенежныхСредствБП.УстановитьБанковскийСчет(
		Объект.СчетОрганизации, Объект.Организация, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	
	Если НЕ ЗначениеЗаполнено(Объект.СпособОплаты) Тогда
		Объект.СпособОплаты = ?(ЗначениеЗаполнено(Объект.СчетОрганизации),
			Перечисления.СпособыУплатыНалогов.БанковскийПеревод,
			Перечисления.СпособыУплатыНалогов.НаличнымиПоКвитанции);
	КонецЕсли;
	
	УстановитьФункциональныеОпцииФормы();
	
	Если ЗначениеЗаполнено(Объект.СчетОрганизации) И Объект.СпособОплаты = Перечисления.СпособыУплатыНалогов.БанковскийПеревод Тогда
		ВыбранныйСпособОплаты = Объект.СчетОрганизации;
	КонецЕсли;
	
	ЗаполнитьСписокВыбораСпособовОплаты();
	
	ЗаполнитьСтраховыеВзносыНаСервере();
	
	// Заполнение группы информационных ссылок
	ИнформационныйЦентрСервер.ВывестиКонтекстныеСсылки(ЭтаФорма, Элементы.ИнформационныеСсылки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
	
	Модифицированность = Истина;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	ПериодПриИзмененииНаСервере();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаВзносаПФРНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИмяВзноса",       Элемент.Имя);
	ПараметрыФормы.Вставить("Заголовок",       Элемент.Заголовок);
	ПараметрыФормы.Вставить("Всего",           СуммаВзносаПФРВсего);
	ПараметрыФормы.Вставить("Уплачено",        СуммаВзносаПФРУплачено);
	ПараметрыФормы.Вставить("Сумма",           Объект.СуммаВзносаПФР);
	ПараметрыФормы.Вставить("ЧастичнаяОплата", ЧастичнаяОплата(Объект.Период, Периодичность));
	
	ОткрытьФорму("Обработка.РасчетСтраховыхВзносовИП.Форма.РасчетСуммыВзноса", ПараметрыФормы, ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаВзносаПФРсДоходовНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИмяВзноса", Элемент.Имя);
	ПараметрыФормы.Вставить("Заголовок", Элемент.Заголовок);
	ПараметрыФормы.Вставить("Всего",     СуммаВзносаПФРсДоходовВсего);
	ПараметрыФормы.Вставить("Уплачено",  СуммаВзносаПФРсДоходовУплачено);
	ПараметрыФормы.Вставить("Сумма",     Объект.СуммаВзносаПФРсДоходов);
	
	ПараметрыФормы.Вставить("Период", Объект.Период);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("СтруктураДоходов", СтруктураДоходов);
	ПараметрыФормы.Вставить("ПредельнаяСуммаВзноса", ПредельнаяСуммаВзноса);
	
	ОткрытьФорму("Обработка.РасчетСтраховыхВзносовИП.Форма.РасчетСуммыВзносаСДоходов", ПараметрыФормы, ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаВзносаФФОМСНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИмяВзноса",       Элемент.Имя);
	ПараметрыФормы.Вставить("Заголовок",       Элемент.Заголовок);
	ПараметрыФормы.Вставить("Всего",           СуммаВзносаФФОМСВсего);
	ПараметрыФормы.Вставить("Уплачено",        СуммаВзносаФФОМСУплачено);
	ПараметрыФормы.Вставить("Сумма",           Объект.СуммаВзносаФФОМС);
	ПараметрыФормы.Вставить("ЧастичнаяОплата", ЧастичнаяОплата(Объект.Период, Периодичность));
	
	ОткрытьФорму("Обработка.РасчетСтраховыхВзносовИП.Форма.РасчетСуммыВзноса", ПараметрыФормы, ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаВзносаФССНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИмяВзноса",       Элемент.Имя);
	ПараметрыФормы.Вставить("Заголовок",       Элемент.Заголовок);
	ПараметрыФормы.Вставить("Всего",           СуммаВзносаФССВсего);
	ПараметрыФормы.Вставить("Уплачено",        СуммаВзносаФССУплачено);
	ПараметрыФормы.Вставить("Сумма",           Объект.СуммаВзносаФСС);
	ПараметрыФормы.Вставить("ЧастичнаяОплата", ЧастичнаяОплата(Объект.Период, Периодичность));
	
	ОткрытьФорму("Обработка.РасчетСтраховыхВзносовИП.Форма.РасчетСуммыВзноса", ПараметрыФормы, ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныйСпособОплатыПриИзменении(Элемент)
	
	Если ТипЗнч(ВыбранныйСпособОплаты) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		Объект.СпособОплаты    = ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.БанковскийПеревод");
		Объект.СчетОрганизации = ВыбранныйСпособОплаты;
	Иначе
		Объект.СпособОплаты    = ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.НаличнымиПоКвитанции");
		Объект.СчетОрганизации = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныйСпособОплатыОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеНаИнформационнуюСсылку(Элемент)

	ИнформационныйЦентрКлиент.НажатиеНаИнформационнуюСсылку(ЭтаФорма, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеНаСсылкуВсеИнформационныеСсылки(Элемент)

	ИнформационныйЦентрКлиент.НажатиеНаСсылкуВсеИнформационныеСсылки(ЭтаФорма.ИмяФормы);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьПлатежныеДокументы(Команда)
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	СозданныеДокументы = СоздатьПлатежныеДокументыНаСервере();
	Если СозданныеДокументы <> Неопределено Тогда;
		ОткрытьСозданныеДокументы(СозданныеДокументы);
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиОплату(Команда)
	
	Если ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Правило) Тогда
		
		ПеренестиПлатежНаСервере(Объект.Организация, Правило, Объект.Период);
		Оповестить("СписокЗадачБухгалтера_Изменение");
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	Периодичность = УчетСтраховыхВзносовИП.ПериодичностьУплатыФиксированныхСтраховыхВзносов(Объект.Организация, Объект.Период);
	
	УплачиватьДобровольныеВзносыВФСС = УчетнаяПолитика.УплачиватьДобровольныеВзносыВФСС(Объект.Организация, Объект.Период);
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ДатаРегистрации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "ДатаРегистрации");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойНаСервере()
	
	// Список выбора периода
	Элементы.Период.Видимость = Не ЗначениеЗаполнено(Правило) Или Не ЗначениеЗаполнено(Объект.Период);
	
	Элементы.Период.СписокВыбора.Очистить();
	
	ПрошлыйГод = КонецГода(ДобавитьМесяц(ТекущийПериод, -12));
	Если ПрошлыйГод >= '20140101' И (Не ЗначениеЗаполнено(ДатаРегистрации) Или ДатаРегистрации <= НачалоДня(ПрошлыйГод - 86400)) Тогда
		// Добавляем прошлый год, если не знаем дату регистрации ИП или он зарегистрировался до 31 декабря
		Элементы.Период.СписокВыбора.Добавить(НачалоДня(ПрошлыйГод), БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
			НачалоГода(ПрошлыйГод), КонецГода(ПрошлыйГод), Истина));
	КонецЕсли;
	
	// Приводим текущий период к установленной периодичности
	Если Периодичность = Перечисления.Периодичность.Год Тогда
		
		ТекущийПериод = КонецГода(ТекущийПериод);
		Объект.Период = КонецГода(Объект.Период);
		
		Элементы.Период.СписокВыбора.Добавить(НачалоДня(ТекущийПериод), БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
			НачалоГода(ТекущийПериод), КонецГода(ТекущийПериод), Истина));
	Иначе
		
		ТекущийПериод = КонецКвартала(ТекущийПериод);
		Объект.Период = КонецКвартала(Объект.Период);
		
		Для НомерКвартала = 1 По 4 Цикл
			Квартал = КонецКвартала(ДобавитьМесяц(НачалоГода(ТекущийПериод), 3*(НомерКвартала - 1)));
			Если Не ЗначениеЗаполнено(ДатаРегистрации) Или ДатаРегистрации <= НачалоДня(Квартал - 86400) Тогда
				// Добавляем квартал, если ИП зарегистрировался ранее последнего дня квартала
				Элементы.Период.СписокВыбора.Добавить(НачалоДня(Квартал), БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
					НачалоГода(Квартал), КонецКвартала(Квартал), Истина));
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ТекстЗаголовка = НСтр("ru = 'Уплата фиксированных страховых взносов'");
	Если Периодичность = Перечисления.Периодичность.Квартал Тогда;
		ПредставлениеПериода = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
			НачалоКвартала(Объект.Период), КонецКвартала(Объект.Период), Истина);
	Иначе
		ПредставлениеПериода = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
			НачалоГода(Объект.Период), КонецГода(Объект.Период), Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Правило) Тогда
		// Обработка выполняется в контексте задачи бухгалтера с фиксированным периодом
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 за %2'"),
			ТекстЗаголовка, ПредставлениеПериода);
	Иначе
		// Период выбирается, дублировать в заголовках не нужно
		Заголовок = ТекстЗаголовка;
	КонецЕсли;
	
	Элементы.СуммаВзносаФСС.Видимость = УплачиватьДобровольныеВзносыВФСС;
	
	// Командная панель
	
	Элементы.ПеренестиОплату.Видимость = ЗначениеЗаполнено(Правило) И ЧастичнаяОплата(Объект.Период, Периодичность);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.ВыбранныйСпособОплаты.Доступность = ЗначениеЗаполнено(Объект.Организация);
	
	Форма.ВсегоВзносов = Объект.СуммаВзносаПФР + Объект.СуммаВзносаПФРсДоходов + Объект.СуммаВзносаФФОМС + Объект.СуммаВзносаФСС;
	
	Элементы.СоздатьПлатежныеДокументы.Доступность = (Форма.ВсегоВзносов <> 0);
	
КонецПроцедуры

&НаСервере
Процедура ПериодПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	ЗаполнитьСтраховыеВзносыНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	УчетДенежныхСредствБП.УстановитьБанковскийСчет(
		Объект.СчетОрганизации, Объект.Организация, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	
	УстановитьФункциональныеОпцииФормы();
	
	ЗаполнитьСтраховыеВзносыНаСервере();
	
	ЗаполнитьСписокВыбораСпособовОплаты();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораСпособовОплаты()
	
	СписокВыбора = Элементы.ВыбранныйСпособОплаты.СписокВыбора;
	СписокВыбора.Очистить();
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		
		БанковскиеСчетаОрганизации = Справочники.БанковскиеСчета.БанковскиеСчетаОрганизации(
			Объект.Организация, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
		
		Если БанковскиеСчетаОрганизации.Количество() = 1 Тогда
			БанковскийСчет = БанковскиеСчетаОрганизации[0];
			СписокВыбора.Добавить(БанковскийСчет.Ссылка, НСтр("ru = 'С банковского счета'"));
		Иначе
			ШаблонПредставления = НСтр("ru = 'С банковского счета %1'");
			Для Каждого БанковскийСчет Из БанковскиеСчетаОрганизации Цикл
				СписокВыбора.Добавить(БанковскийСчет.Ссылка, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонПредставления, БанковскийСчет.Представление));
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	СписокВыбора.Добавить(Неопределено, НСтр("ru = 'Наличными по квитанции'"));
	
	Если СписокВыбора.НайтиПоЗначению(ВыбранныйСпособОплаты) = Неопределено Тогда
		ВыбранныйСпособОплаты = Справочники.БанковскиеСчета.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтраховыеВзносыНаСервере()
	
	// Доходы по видам деятельности
	СтруктураДоходов = УчетСтраховыхВзносовИП.СтруктураДоходовПоВидамДеятельности(
		Объект.Организация, НачалоГода(Объект.Период), КонецКвартала(Объект.Период));
	
	// Фиксированная часть страховых взносов
	ФиксированныеСтраховыеВзносыКУплате = УчетСтраховыхВзносовИП.ФиксированныеСтраховыеВзносыКУплате(
		Объект.Организация, Объект.Период, Периодичность);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ФиксированныеСтраховыеВзносыКУплате); // Начислено/Уплачено
	ЗаполнитьЗначенияСвойств(Объект, ФиксированныеСтраховыеВзносыКУплате);     // К оплате
	
	// Страховые взносы, исчисленные с суммы доходов
	СтраховыеВзносыСДоходовКУплате = УчетСтраховыхВзносовИП.СтраховыеВзносыСДоходовКУплате(
		Объект.Организация, Объект.Период, Периодичность, СтруктураДоходов, Ложь);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтраховыеВзносыСДоходовКУплате); // Начислено/Уплачено
	ЗаполнитьЗначенияСвойств(Объект, СтраховыеВзносыСДоходовКУплате);     // К оплате
	
	УправлениеФормойНаСервере();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПеренестиПлатежНаСервере(Организация, Правило, ПериодСобытия)
	
	ЗначенияКлюча = Новый Структура("Организация, Правило, ПериодСобытия");
	ЗначенияКлюча.Вставить("Организация",   Организация);
	ЗначенияКлюча.Вставить("Правило",       Правило);
	ЗначенияКлюча.Вставить("ПериодСобытия", ПериодСобытия);
	
	КлючЗаписи = РегистрыСведений.ЗадачиБухгалтера.УстановитьСтатусВыполнено(ЗначенияКлюча);
	ИсторияРаботыПользователя.Добавить(КлючЗаписи);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЧастичнаяОплата(Период, Периодичность)
	
	Возврат (Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") И КонецКвартала(Период) < КонецГода(Период));
	
КонецФункции

&НаСервере
Функция СоздатьПлатежныеДокументыНаСервере()
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Платежи = Обработки.РасчетСтраховыхВзносовИП.ТаблицаПлатежейДляФормированияПлатежныхПоручений(Объект);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация",     Объект.Организация);
	СтруктураПараметров.Вставить("НалоговыйПериод", НачалоГода(Объект.Период));
	СтруктураПараметров.Вставить("Платежи",         ПоместитьВоВременноеХранилище(Платежи));
	Если ВыбранныйСпособОплаты = Неопределено Тогда
		СтруктураПараметров.Вставить("СпособОплаты",    ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.НаличнымиПоКвитанции"));
		СтруктураПараметров.Вставить("СчетОрганизации", Неопределено);
	Иначе
		СтруктураПараметров.Вставить("СпособОплаты",    ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.БанковскийПеревод"));
		СтруктураПараметров.Вставить("СчетОрганизации", Объект.СчетОрганизации);
	КонецЕсли;
	
	Возврат Обработки.ФормированиеПлатежныхПорученийНаУплатуНалогов.СоздатьПлатежныеДокументы(СтруктураПараметров);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьСозданныеДокументы(СозданныеДокументы)
	
	Если СозданныеДокументы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПервыйДокумент = СозданныеДокументы[0];
	ТипСозданныхДокументов = ТипЗнч(ПервыйДокумент);
	
	ОповеститьОбИзменении(ТипСозданныхДокументов);
	
	Если СозданныеДокументы.Количество() = 1 Тогда
		
		ПоказатьЗначение(, ПервыйДокумент);
		
	Иначе
		
		Отбор = Новый Структура;
		Отбор.Вставить("Организация", Объект.Организация);
		
		Если ТипСозданныхДокументов = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
			Отбор.Вставить("СчетОрганизации", Объект.СчетОрганизации);
			ИмяФормыСписка = "Документ.ПлатежноеПоручение.ФормаСписка";
		ИначеЕсли ТипСозданныхДокументов = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
			ИмяФормыСписка = "Документ.РасходныйКассовыйОрдер.ФормаСписка";
		Иначе
			Возврат;
		КонецЕсли;
		
		СписокДокументов = Новый СписокЗначений;
		СписокДокументов.ЗагрузитьЗначения(СозданныеДокументы);
		СписокВыделения = Новый Структура("Ссылка", СписокДокументов);
		
		ОткрытьФорму(ИмяФормыСписка, Новый Структура("Отбор, ТекущаяСтрока, СписокВыделения", Отбор, ПервыйДокумент, СписокВыделения), ЭтотОбъект, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
