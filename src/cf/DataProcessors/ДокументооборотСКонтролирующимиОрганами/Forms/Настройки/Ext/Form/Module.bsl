&НаКлиенте
Перем КонтекстЭДОКлиент;

&НаСервереБезКонтекста
Функция ПолучитьВерсиюВнешнегоМодуляИзФайла(МодульДвоичныеДанные)
	
	// сохраняем обработку во временный файл
	Если МодульДвоичныеДанные <> Неопределено Тогда
		ИмяФайлаОбработки = ПолучитьИмяВременногоФайла("epf");
		Если ЭтоАдресВременногоХранилища(МодульДвоичныеДанные) Тогда 
			ПолучитьИзВременногоХранилища(МодульДвоичныеДанные).Записать(ИмяФайлаОбработки);
		Иначе
			МодульДвоичныеДанные.Записать(ИмяФайлаОбработки);
		КонецЕсли;
	Иначе
		Возврат Неопределено
	КонецЕсли;
	
	// пытаемся извлечь версию внешнего модуля
	Попытка
		Результат = ВнешниеОбработки.Создать(ИмяФайлаОбработки).мВерсияМодуля;
	Исключение
		Результат = Неопределено;
	КонецПопытки;
	
	// удаляем временный файл обработки
	УдалитьФайлы(ИмяФайлаОбработки);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ДобавитьСтрокуВТаблицуCSP(ИмяКриптопровайдера, КодCSP, ТипCSP)
	
	НовСтр = ТаблицаCSP.Добавить();
	НовСтр.Имя = ИмяКриптопровайдера;
	НовСтр.Код = КодCSP;
	НовСтр.Тип = ТипCSP;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройки()
	
	// читаем общие настройки
	Если ПравоДоступа("Чтение", Метаданные.Константы.ДокументооборотСКонтролирующимиОрганами_ИспользоватьВнешнийМодуль) Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                      |	Константы.ДокументооборотСКонтролирующимиОрганами_ИспользоватьВнешнийМодуль,
		                      |	Константы.ДокументооборотСКонтролирующимиОрганами_ВнешнийМодуль,
		                      |	Константы.ДокументооборотСКонтролирующимиОрганами_ВерсияВнешнегоМодуля,
		                      |	Константы.ДокументооборотСКонтролирующимиОрганами_ИмяКриптопровайдера,
		                      |	Константы.ДокументооборотСКонтролирующимиОрганами_ТипКриптопровайдера,
							  |	Константы.ДокументооборотСКонтролирующимиОрганами_РежимТестирования
		                      |ИЗ
		                      |	Константы КАК Константы");
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			ИспользоватьВнешнийМодуль = Выборка.ДокументооборотСКонтролирующимиОрганами_ИспользоватьВнешнийМодуль;
			ДанныеМодуля = Выборка.ДокументооборотСКонтролирующимиОрганами_ВнешнийМодуль.Получить();
			ВерсияМодуля = Выборка.ДокументооборотСКонтролирующимиОрганами_ВерсияВнешнегоМодуля;
			
			ИмяКриптопровайдера = Выборка.ДокументооборотСКонтролирующимиОрганами_ИмяКриптопровайдера;
			ТипКриптопровайдера = Выборка.ДокументооборотСКонтролирующимиОрганами_ТипКриптопровайдера;
			
			ИспользоватьРежимТестирования = Выборка.ДокументооборотСКонтролирующимиОрганами_РежимТестирования; 
			
			СтрCSP = ТаблицаCSP.НайтиСтроки(Новый Структура("Имя, Тип", ИмяКриптопровайдера, ТипКриптопровайдера));
			Если СтрCSP.Количество() > 0 Тогда
				Криптопровайдер = СтрCSP[0].Код;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	сохрРазрешитьОбновлениеМодуля = ХранилищеОбщихНастроек.Загрузить("ДокументооборотСКонтролирующимиОрганами_РазрешитьОнлайнОбновление");
	Если сохрРазрешитьОбновлениеМодуля = Неопределено Тогда
		сохрРазрешитьОбновлениеМодуля = ХранилищеОбщихНастроек.Загрузить("ДокументооборотСНалоговымиОрганами_РазрешитьОнлайнОбновление"); // прежнее имя параметра
	КонецЕсли;
	РазрешитьОбновлениеМодуля = (сохрРазрешитьОбновлениеМодуля = Истина);
	
КонецПроцедуры

&НаСервере
Функция СохранитьНастройки()
	
	Если ИспользоватьВнешнийМодуль И НЕ ЗначениеЗаполнено(ДанныеМодуля) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Выберите внешний модуль.'"));
		Возврат Ложь;
	КонецЕсли;
	
	// сохраняем общие настройки
	КонстантыНабор = Константы.СоздатьНабор("ДокументооборотСКонтролирующимиОрганами_ИспользоватьВнешнийМодуль,
											|ДокументооборотСКонтролирующимиОрганами_ВнешнийМодуль,
											|ДокументооборотСКонтролирующимиОрганами_ВерсияВнешнегоМодуля,
											|ДокументооборотСКонтролирующимиОрганами_ИмяКриптопровайдера,
											|ДокументооборотСКонтролирующимиОрганами_ТипКриптопровайдера,
											|ДокументооборотСКонтролирующимиОрганами_РежимТестирования");
	КонстантыНабор.ДокументооборотСКонтролирующимиОрганами_ИспользоватьВнешнийМодуль = ИспользоватьВнешнийМодуль;
	
	Если ЗначениеЗаполнено(ДанныеМодуля) Тогда
		Если ТипЗнч(ДанныеМодуля) = Тип("ДвоичныеДанные") Тогда 
			КонстантыНабор.ДокументооборотСКонтролирующимиОрганами_ВнешнийМодуль = Новый ХранилищеЗначения(ДанныеМодуля);
		ИначеЕсли ЭтоАдресВременногоХранилища(ДанныеМодуля) Тогда 
			ДанныеМодуля = ПолучитьИзВременногоХранилища(ДанныеМодуля);
			КонстантыНабор.ДокументооборотСКонтролирующимиОрганами_ВнешнийМодуль = Новый ХранилищеЗначения(ДанныеМодуля);
		КонецЕсли;
		КонстантыНабор.ДокументооборотСКонтролирующимиОрганами_ВерсияВнешнегоМодуля = ВерсияМодуля;
	Иначе
		КонстантыНабор.ДокументооборотСКонтролирующимиОрганами_ВнешнийМодуль = Неопределено;
		КонстантыНабор.ДокументооборотСКонтролирующимиОрганами_ВерсияВнешнегоМодуля = Неопределено;
	КонецЕсли;
	
	ТаблицаCSPЗначение = ДанныеФормыВЗначение(ТаблицаCSP, Тип("ТаблицаЗначений"));
	СтрКриптопровайдер = ТаблицаCSPЗначение.Найти(Криптопровайдер, "Код");
	Если ЗначениеЗаполнено(СтрКриптопровайдер) Тогда
		КонстантыНабор.ДокументооборотСКонтролирующимиОрганами_ИмяКриптопровайдера = СтрКриптопровайдер.Имя;
		КонстантыНабор.ДокументооборотСКонтролирующимиОрганами_ТипКриптопровайдера = СтрКриптопровайдер.Тип;
	Иначе
		КонстантыНабор.ДокументооборотСКонтролирующимиОрганами_ИмяКриптопровайдера = Неопределено;
		КонстантыНабор.ДокументооборотСКонтролирующимиОрганами_ТипКриптопровайдера = Неопределено;
	КонецЕсли;
	
	КонстантыНабор.ДокументооборотСКонтролирующимиОрганами_РежимТестирования = ИспользоватьРежимТестирования;
	
	КонстантыНабор.Записать();
	
	// сохраняем индивидуальные настройки
	ХранилищеОбщихНастроек.Сохранить("ДокументооборотСКонтролирующимиОрганами_РазрешитьОнлайнОбновление", , РазрешитьОбновлениеМодуля);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// инициализируем вспомогательные переменные
	ПрограммноеЗакрытие = Ложь;
	ИзмененыСвойстваМодуля = Ложь;
	
	ДобавитьСтрокуВТаблицуCSP("Crypto-Pro GOST R 34.10-2001 Cryptographic Service Provider", 1, 75);
	ДобавитьСтрокуВТаблицуCSP("Infotecs Cryptographic Service Provider", 2, 2);
	
	// восстанавливаем редактируемые (отображаемые) настройки
	ВосстановитьНастройки();
	УправлениеЭУВРежимеСервиса();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	УправлениеЭУ();
	
	ОбновитьГруппуВнешняяКомпонента();

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ПрограммноеЗакрытие Тогда
		Если НЕ СохранитьНастройки() Тогда
			ПрограммноеЗакрытие = Ложь;
			Отказ = Истина;
		Иначе
			Если ИзмененыСвойстваМодуля Тогда
				ВопросПерезапуститьПрограммуПослеОбновленияМодуля();
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ЭтаФорма.Модифицированность Тогда
		Отказ = Истина;
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, "Настройки были изменены. Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
	Оповестить("ИзменениеНастроекДокументооборота");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Если НЕ СохранитьНастройки() Тогда
			ПрограммноеЗакрытие = Ложь;
		Иначе
			Если ИзмененыСвойстваМодуля Тогда
				ВопросПерезапуститьПрограммуПослеОбновленияМодуля();
			Иначе
				Модифицированность = Ложь;
				Закрыть();
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
		ПрограммноеЗакрытие = Ложь;
	Иначе
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеМодульДокументооборотаПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьВнешнийМодуль();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВнешнийМодуль()
	
	ФайлыБылиВыбраны = Ложь;
	ДанныеМодуля = Неопределено;

	ВыбранноеИмяФайла = "";
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьВнешнийМодульЗавершение", ЭтотОбъект);
	НачатьПомещениеФайла(ОписаниеОповещения, ДанныеМодуля, ВыбранноеИмяФайла, Истина, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВнешнийМодульЗавершение(ФайлыБылиВыбраны, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	ВыбранКорректныйФайл = КонтекстЭДОКлиент.ВыбранКорректныйФайл(ВыбранноеИмяФайла, ".epf");
	Если НЕ ВыбранКорректныйФайл Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Загружать можно только файлы с расширением *.epf'"));
	Иначе
		ДанныеМодуля = Адрес;
		ВыбратьВнешнийМодульИзменитьПеременные(ФайлыБылиВыбраны);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВнешнийМодульИзменитьПеременные(ФайлыБылиВыбраны)
	
	Если ФайлыБылиВыбраны И ЗначениеЗаполнено(ДанныеМодуля) Тогда
		стрВерсияМодуля = ПолучитьВерсиюВнешнегоМодуляИзФайла(ДанныеМодуля);
		Если стрВерсияМодуля = Неопределено Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Выбранный файл не является внешним модулем документооборота!'"));
			
		Иначе
			ВерсияМодуля = стрВерсияМодуля;
			
			ИзмененыСвойстваМодуля = Истина;
			
			Модифицированность = Истина;
			УправлениеЭУ();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолеМодульДокументооборотаПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	
	ИзмененыСвойстваМодуля = Истина;
	
	ВерсияМодуля = Неопределено;
	ДанныеМодуля = Неопределено;
	
	Модифицированность = Истина;
	УправлениеЭУ();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеИспользоватьВнешнийМодульПриИзменении(Элемент)
	
	ИзмененыСвойстваМодуля = Истина;
	
	УправлениеЭУ();
	
	Если ИспользоватьВнешнийМодуль И НЕ ЗначениеЗаполнено(ДанныеМодуля) Тогда
		ВыбратьВнешнийМодуль();
	ИначеЕсли НЕ ИспользоватьВнешнийМодуль Тогда
		ВерсияМодуля = Неопределено;
		ДанныеМодуля = Неопределено;
		Модифицированность = Истина;
		УправлениеЭУ();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭУВРежимеСервиса()
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда 
		Элементы.ГруппаВнешнийМодуль.Видимость = Ложь;
		Элементы.ГруппаПрокси.Видимость = Ложь;
		Элементы.ГруппаОбновлениеМодуля.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеЭУ()
	
	// поле с представлением внешнего модуля делаем доступным только если установлен
	// признак использования внешнего модуля
	Элементы.ПолеМодульДокументооборотаПредставление.Доступность = ИспользоватьВнешнийМодуль;
	
	// формируем представление внешнего модуля
	Если НЕ ЗначениеЗаполнено(ДанныеМодуля) Тогда
		МодульДокументооборотаПредставление = "";
	Иначе
		МодульДокументооборотаПредставление = "";
		Если ЗначениеЗаполнено(ВерсияМодуля) Тогда
			МодульДокументооборотаПредставление = "Модуль версии " + ВерсияМодуля;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(МодульДокументооборотаПредставление) И ЗначениеЗаполнено(ДанныеМодуля) Тогда
			МодульДокументооборотаПредставление = "Модуль загружен";
		КонецЕсли;
	КонецЕсли;
	
	//путь модуля криптографии задается лишь для линукса
	Если ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ЭтоЛинукс() Тогда
		Элементы.ГруппаКриптография.Видимость = Истина;
		Элементы.ГруппаВнешняяКомпонента.Отображение = ОтображениеОбычнойГруппы.Нет;
	Иначе
		Элементы.ГруппаКриптография.Видимость = Ложь;
		Элементы.ГруппаВнешняяКомпонента.Отображение = ОбщегоНазначенияКлиентСервер.ОтображениеОбычнойГруппыОтступ();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеРазрешитьОбновлениеМодуляПриИзменении(Элемент)
	
	УправлениеЭУ();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИЗакрыть(Команда)
	
	ПрограммноеЗакрытие = Истина;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПрограммно(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПараметрыПроксиСервера(Команда)
	
	ОткрытьФорму("ОбщаяФорма.ПараметрыПроксиСервера");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьГруппуВнешняяКомпонента()
	
	Оповещение = Новый ОписаниеОповещения(
		"ОбновитьГруппуВнешняяКомпонентаЗавершение", ЭтотОбъект);
	ДокументооборотСКОКриптографияКлиент.СоздатьМенеджерКриптографии(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьГруппуВнешняяКомпонентаЗавершение(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		//компонента установлена
		Элементы.ТекущийСтатус.Заголовок = "Внешняя компонента: установлена.";
		Элементы.УстановитьКомпоненту.Видимость = Ложь;
	Иначе
		//компонента не установлена
		Элементы.ТекущийСтатус.Заголовок = "Внешняя компонента: не установлена.";
		Элементы.УстановитьКомпоненту.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКомпоненту(Команда)
	
	ПутьВК = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьПутьВК();
	
	Попытка
		НачатьУстановкуВнешнейКомпоненты(,ПутьВК);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСейчас(Команда)
	
	СохранитьНастройки();
	Модифицированность = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьСейчасЗавершение", ЭтотОбъект);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСейчасЗавершение(Результат, ДополнительныеПараметры) Экспорт
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	ВосстановитьНастройки();
	УправлениеЭУ();
КонецПроцедуры


&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Новая версия модуля документооборота зарегистрирована в информационной базе" Тогда
		ИзмененыСвойстваМодуля 	= Истина;
		Модифицированность 		= Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПерезапуститьПрограммуПослеОбновленияМодуля() Экспорт
	
	// Если модуль обновлен тогда предлагаем перезапуститься
	ТекстВопроса = "Изменения вступят в силу только после повторного открытия программы!
		|Перезапустить программу сейчас?";
	ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПерезапуститьПрограммуПослеОбновленияМодуляЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПерезапуститьПрограммуПослеОбновленияМодуляЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ИзмененыСвойстваМодуля = Ложь;
		ЗавершитьРаботуСистемы(Истина, Истина);
	Иначе
		ИзмененыСвойстваМодуля = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПрограммЭлектроннойПодписиИШифрованияНажатие(Элемент)
	
	ЭлектроннаяПодписьКлиент.ОткрытьНастройкиЭлектроннойПодписиИШифрования("Программы");
	
КонецПроцедуры
