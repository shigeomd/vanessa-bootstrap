&НаКлиенте
Перем КонтекстЭДОКлиент;

&НаКлиенте
Перем ПрограммноеЗакрытие;

&НаКлиенте
Перем ДанныеЗаполнения;

&НаКлиенте
Перем ДанныеОрганизации;

&НаКлиенте
Перем СтруктураРеквизитов;

&НаКлиенте
Перем ПорядковыйНомерСтроки;

&НаКлиенте
Перем СоответствиеНаименованийИменамРеквизитовОрганизации;

&НаКлиенте
Перем СоответствиеНаименованийИменамРеквизитовВладельцаЭЦП;

&НаКлиенте
Перем КоличествоДнейЗаКотороеНужноПредупреждатьОбИстеченииСрока;

&НаКлиенте
Перем СтруктураДанныхСпецоператорыСвязи;

&НаКлиенте
Перем НаименованиеТекущегоРеквизитаТаблицы;

&НаКлиенте
Перем РеквизитыНеХранящиесяВБазе;

&НаКлиенте
Перем ТекстОшибок;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Получаем значение параметров
	Организация = Параметры.Организация;
		
	Реквизит = Параметры.Реквизит;
	
	Если РегламентированнаяОтчетностьВызовСервера.ИспользуетсяОднаОрганизация() Тогда
		
		Модуль = ОбщегоНазначения.ОбщийМодуль("Справочники.Организации");
		Организация = Модуль.ОрганизацияПоУмолчанию();
		
	Иначе
		
		Если НЕ ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(Реквизит) Тогда 
			Организация = Реквизит.Организация;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			Организация = ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ОсновнаяОрганизация();
		КонецЕсли;
		
	КонецЕсли;
	
	УчетнаяЗапись = УчетнаяЗаписьОрганизации(Организация);
	РеквизитыУчетнойЗаписи = ЭлектроннаяПодписьВМоделиСервисаВызовСервера.РеквизитыУчетнойЗаписи(УчетнаяЗапись);
	ЭтоЭлектроннаяПодписьВМоделиСервиса = РеквизитыУчетнойЗаписи.ЭлектроннаяПодписьВМоделиСервиса;

	ПодготовитьФорму(ЭтаФорма);
	
	ТекущаяДатаСервер = ТекущаяДатаСеанса();
	
	Элементы.ИзмененияВСпособахДоставкиПаролей.Видимость = Ложь;
	
	ДобавляемыеКонтролирующиеОрганы = Параметры.ДобавляемыеКонтролирующиеОрганы;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если ВебКлиент Тогда
		Элементы.ТелефонМобильный.Маска = "+9 (999) 999-99-99";
		ТелефонМобильный = "+7 (   )    -  -  ";
	#Иначе
		Элементы.ТелефонМобильный.Маска = "+7 (999) 999-99-99";
		ТелефонМобильный = "";
	#КонецЕсли
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ПрограммноеЗакрытие = Неопределено Тогда
		ПрограммноеЗакрытие = Ложь;
	КонецЕсли;
	
	Если Элементы.КоманднаяПанельДалее.ПодчиненныеЭлементы.Закрыть.Заголовок = "Закрыть" Тогда
		ПрограммноеЗакрытие = Истина;
	КонецЕсли;
	
	Если НЕ ПрограммноеЗакрытие Тогда
		Отказ = Истина;
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Прервать работу помощника?'"), РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИзменитьРеквизитыПодключенияК1СОтчетностиПриИзменении(Элемент)
	
	// Определяем, нужно ли перездавать сертификат 
	УстановитьГалкуПереиздатьСертификатИОпределитьПричиныПереиздания();

КонецПроцедуры

&НаКлиенте
Процедура СдаватьВРосстатПриИзменении(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СдаватьВРосстатПриИзмененииЗавершение", ЭтотОбъект);
	НаправлениеСдачиОтчетностиПодключено(
		"СдаватьВРосстат", ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСГС"), СдаватьВРосстатИсходный, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СдаватьВПФРПриИзменении(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СдаватьВПФРПриИзмененииЗавершение", ЭтотОбъект);
	НаправлениеСдачиОтчетностиПодключено(
		"СдаватьВПФР", ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ПФР"), СдаватьВПФРИсходный, ОписаниеОповещения);
		
КонецПроцедуры

&НаКлиенте
Процедура СдаватьВФНСПриИзменении(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СдаватьВФНСПриИзмененииЗавершение", ЭтотОБъект);
	НаправлениеСдачиОтчетностиПодключено(
		"СдаватьВФНС", ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"), СдаватьВФНСИсходный, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СдаватьВФССПриИзменении(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СдаватьВФССПриИзмененииЗавершение", ЭтотОБъект);
	НаправлениеСдачиОтчетностиПодключено(
		"СдаватьВФСС", ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСС"), СдаватьВФССИсходный, ОписаниеОповещения);
		
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКодыФНСНажатие(Элемент)
	ОткрытьФормуРедактированияНаправленийСдачиОтчетности(Получатели);

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВладелецЭЦПНажатие(Элемент)
	
	ОткрытьФормуВыбораВладельцаЭЦП();

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
		
	УчетнаяЗапись 						= УчетнаяЗаписьОрганизации(Организация);
	РеквизитыУчетнойЗаписи 				= ЭлектроннаяПодписьВМоделиСервисаВызовСервера.РеквизитыУчетнойЗаписи(УчетнаяЗапись);
	ЭтоЭлектроннаяПодписьВМоделиСервиса = РеквизитыУчетнойЗаписи.ЭлектроннаяПодписьВМоделиСервиса;
	
	ПодготовитьФорму(ЭтаФорма);
	Если ЗначениеЗаполнено(Организация) И НЕ ЭтоЭлектроннаяПодписьВМоделиСервиса Тогда
		ИзменитьСпособыДоставкиПаролей = Ложь;
	КонецЕсли;
	
	ЗаполнитьРеквизитыОрганизации(ДанныеЗаполнения,);
	
	РеквизитыНеХранящиесяВБазе = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСерверПереопределяемый.РеквизитыНеХранящиесяВБазе(Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКодРосстатНажатие(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДекорацияКодРосстатНажатиеПослеВыбораКода", ЭтотОбъект);
	КонтекстЭДОКлиент.КодРосстата(КодРосстата, Спецоператор, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКодПФРНажатие(Элемент)
	
	ОткрытьФормуРедактированияРеквизита("КодПФР", "Код управления ПФР", КодПФР, "999-999");

КонецПроцедуры

&НаКлиенте
Процедура ПродлитьЛицензиюНа1СОтчетностьПриИзменении(Элемент)
	
	// Оформляем текст под галкой
	ОформитьПодсказкуДляГалкиПродлитьЛицензиюНа1СОтчетность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродлитьСертификатПриИзменении(Элемент)
	
	Если ПродлитьСертификатИсходный И НЕ ПродлитьСертификат Тогда
		// Пользователь решил отказаться от переиздания сертификата
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Да'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена'"));
		
		ТекстВопроса = НСтр("ru = 'Отправка отчетов станет недоступной после окончания срока действия сертификата.
			|Все равно отказаться от продления сертификата?'");
			
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьОтветПользователяНаПредложениеПереиздатьСертификат", ЭтотОбъект);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки[0].Значение);
	Иначе
		ПродлитьСертификатПриИзмененииЗавершение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереиздатьСертификатПриИзменении(Элемент)
	
	УстановитьГалкуПереиздатьСертификатИОпределитьПричиныПереиздания(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьМобильныйТелефонПриИзменении(Элемент)
	
	ОформитьПодсказкуДляГалкиИзменитьМобильныйТелефон();
	
КонецПроцедуры

&НаКлиенте
Процедура СдаватьВФСРАРПриИзменении(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СдаватьВФСРАРПриИзмененииЗавершение", ЭтотОбъект);
	НаправлениеСдачиОтчетностиПодключено(
		"СдаватьВФСРАР", ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСРАР"), СдаватьВФСРАРИсходный, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВзятьКодПФРИзОрганизацииНажатие(Элемент)
	
	КодПФР = КодПФР();
	ОформитьЭлементыДляГалкиИзменитьСоставНалоговыхОргановШаг1();
	
КонецПроцедуры

&НаКлиенте
Процедура ВзятьКодРосстатаИзОрганизацииНажатие(Элемент)
	
	КодРосстата = КодРосстата();
	ОформитьЭлементыДляГалкиИзменитьСоставНалоговыхОргановШаг1();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВладельцаСертификатаПриИзменении(Элемент)

	// Если пользователь сначала изменил владельца ЭЦП, а потом решил отказаться от этого, то возвращаем все значения по владельцу в исходное состояние
	Если ИзменитьВладельцаСертификата Тогда
		Если НЕ ЗначениеЗаполнено(ВладелецЭЦП) Тогда
			ВладелецЭЦПИзменился = Истина;
		КонецЕсли;
	Иначе
		ВладелецЭЦПИзменился = Ложь;
		ОпределитьВладельцаЭЦП();
	КонецЕсли;
	
	// После изменения владельца ЭЦП выполняем сравнение старых и новый значений
	СравнитьТекущиеРеквизитыПодключенияСИсходными();
	ОформитьПодсказкуДляГалкиИзменитьРеквизитыПодключенияК1СОтчетности();
	
	// Оформляем текст под галкой
	ОформитьПодсказкуДляГалкиИзменитьВладельцаСертификата();
	
	// Определяем, нужно ли перездавать сертификат 
	УстановитьГалкуПереиздатьСертификатИОпределитьПричиныПереиздания();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСоставКонтролирующихОргановПриИзменении(Элемент)
	
	ОформитьЭлементыДляГалкиИзменитьСоставНалоговыхОргановШаг1();
	
	СравнитьТекущиеРеквизитыПодключенияСИсходными();
	ОформитьПодсказкуДляГалкиИзменитьРеквизитыПодключенияК1СОтчетности();
	
	УстановитьГалкуПереиздатьСертификатИОпределитьПричиныПереиздания();
	
КонецПроцедуры

&НаКлиенте
Процедура СдаватьВРПНПриИзменении(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СдаватьВРПНПриИзмененииЗавершение", ЭтотОбъект);
	
	НаправлениеСдачиОтчетностиПодключено(
		"СдаватьВРПН", ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.РПН"), СдаватьВРПНИсходный, ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

&НаКлиенте
Процедура ТаблицаДанныхЗаявленияНаПодключениеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// Запрещаем менять желтые строки
	Если Элемент.ТекущиеДанные.ВыделятьСтрокуЖелтым Тогда
		Возврат;
	КонецЕсли;
	
	// Позволяем менять реквизиты только если включена галка ИзменитьРеквизитыПодключенияК1СОтчетности
	Если НЕ ИзменитьРеквизитыПодключенияК1СОтчетности Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийРеквизит = Элемент.ТекущиеДанные.ИзмененныйРеквизит;
	НаименованиеРеквизита = Строка(ТекущийРеквизит);
	
	Если Не ЗначениеЗаполнено(НаименованиеРеквизита) Тогда
		Возврат;
	КонецЕсли;
		
	ИмяРеквизита = ИмяПеречисленияПараметрыПодключенияК1СОтчетности(ТекущийРеквизит);
	
	// Если это реквизит, который отсутсвует у организации, то он должен редактироваться напрямую в таблице.
	Если РеквизитыНеХранящиесяВБазе.Найти(ТекущийРеквизит) <> Неопределено Тогда
		Маска = Неопределено;
		Если ТекущийРеквизит = ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПСНИЛС") Тогда
			Маска = "999-999-999 99";
		КонецЕсли; 
		
		ЗадатьНовоеЗначениеРеквизиту(ИмяРеквизита, НаименованиеРеквизита, ЭтаФорма[ИмяРеквизита], Маска);
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НапечататьЗаявление(Команда)
	
	СоздатьНовыйДокументЗаявление(3);
	
	ЗаявлениеПолучатель = КонтекстЭДОКлиент.ПолучитьПараметрСпецоператораКлиент(Спецоператор, Новый Структура("ЗаявлениеПолучатель"),
		СтруктураДанныхСпецоператорыСвязи.Макет).ЗаявлениеПолучатель;
	
	ПараметрыПечати = Новый Структура();
	ПараметрыПечати.Вставить("ЗаявлениеПолучатель", 				ЗаявлениеПолучатель);
	ПараметрыПечати.Вставить("ПереиздатьСертификат", 				ИзменилисьРеквизитыТребующиеПереизданияСертификата());
	ПараметрыПечати.Вставить("ИзменитьСоставКонтролирующихОрганов", ИзменитьСоставКонтролирующихОрганов);
	ПараметрыПечати.Вставить("ПродлитьЛицензиюНа1СОтчетность", 		ПродлитьЛицензиюНа1СОтчетность);
	
	МакетДляПечати = КонтекстЭДОКлиент.ПодготовитьМакет(ДокументЗаявление, ПараметрыПечати, "ПАРАМЕТРЫ_ПЕЧАТИ_ПечатьЗаявкиНаИзменениеРеквизитов", 
		"ПечатьЗаявкаНаИзменениеРеквизитов");
		
	КонтекстЭДОКлиент.НапечататьДокумент(МакетДляПечати, "Заявление на изменение реквизитов подключения к 1С-Отчетности");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьМастер(Команда)
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельМастерДалее(Команда)
	
	ТекущаяСтраница = Элементы.ОсновнаяПанель.ТекущаяСтраница;
	ОчиститьСообщения();
	МастерДалее = Истина;
	
	Если ТекущаяСтраница = Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.ВыборДействия Тогда
		
		// проверка организации
		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Организация""'"), ,"Организация");
			МастерДалее = Ложь;
		КонецЕсли;
		
		// проверка кодов
		Если ИзменитьСоставКонтролирующихОрганов Тогда
			
			// коды ФНС
			Если СдаватьВФНС И Получатели.Количество()=0 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните коды ФНС'"), ,"СдаватьВФНС");
				МастерДалее = Ложь;
			КонецЕсли;
			
			// код отделения ПФР
			Если СдаватьВПФР Тогда
				КодПФРВОрганизации = КодПФР();
				Если ПустаяСтрока(СтрЗаменить(КодПФР,"-","")) Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Код отделения ПФР""'"), ,"СдаватьВПФР");
					МастерДалее = Ложь;
				ИначеЕсли СтрДлина(СокрЛП(КодПФР))<> 7 Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Код отделения ПФР должен состоять из 6 цифр'"), ,"СдаватьВПФР");
					МастерДалее = Ложь;
				ИначеЕсли СокрЛП(КодПФР) <> КодПФРВОрганизации Тогда
					ТекстСообщения = НСтр("ru = 'Код отделения ПФР не совпадает с кодом, указанным в организации (%1)'");
					Если ПустаяСтрока(СтрЗаменить(КодПФРВОрганизации, "-", "")) Тогда
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "(%1)", "");
					Иначе
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "(%1)", "(" + КодПФРВОрганизации + ")");
					КонецЕсли;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ,"СдаватьВПФР");
					МастерДалее = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			// код органа Росстата
			Если СдаватьВРосстат Тогда
				Если ПустаяСтрока(СтрЗаменить(КодРосстата,"-","")) Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Код органа Росстата""'"), ,"СдаватьВРосстат");
					МастерДалее = Ложь;
				ИначеЕсли СтрДлина(СокрЛП(КодРосстата))<> 5 Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Код органа Росстата должен состоять из 4 цифр'"), ,"СдаватьВРосстат");
					МастерДалее = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// проверка сочетания выбранных контролирующих органов
		Если ИзменитьСоставКонтролирующихОрганов Тогда
			Если НЕ (СдаватьВФНС ИЛИ СдаватьВПФР ИЛИ СдаватьВФСС ИЛИ СдаватьВРосстат ИЛИ СдаватьВФСРАР ИЛИ СдаватьВРПН) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Укажите хотя бы один контролирующий орган, в который будет сдаваться отчетность'")
					, ,"ИзменитьСоставКонтролирующихОрганов");
				МастерДалее = Ложь;
			ИначеЕсли НЕ СдаватьВФНС И НЕ СдаватьВПФР Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Среди контролирующих органов, в которые будет сдаваться отчетность, должены быть ФНС или ПФР'")
					, ,"ИзменитьСоставКонтролирующихОрганов");
				МастерДалее = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// Владелец ЭЦП
		
		// проверка заполненности сведений о руководителе
		Если (ИзменитьВладельцаСертификата ИЛИ ПереиздатьСертификат) И ВыборДиректора = 1 И НЕ ЗначениеЗаполнено(Руководитель) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выберите руководителя'"), ,"ДекорацияРуководитель");
			МастерДалее = Ложь;
		КонецЕсли;
		
		// проверка заполненности сведений о бухгалтере
		Если (ИзменитьВладельцаСертификата ИЛИ ПереиздатьСертификат) И ВыборБухгалтера = 1 И НЕ ЗначениеЗаполнено(ГлБухгалтер) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выберите бухгалтера'"), ,"ДекорацияГлБухгалтер");
			МастерДалее = Ложь;
		КонецЕсли;
		
		// проверка заполненности сведений о сотруднике
		Если (ИзменитьВладельцаСертификата ИЛИ ПереиздатьСертификат) И ВыборИсполнителя = 1 И НЕ ЗначениеЗаполнено(СотрудникВыбор) Тогда 
			ТекстПредупреждения = НСтр("ru = 'Переиздание сертификата требует обязательного указания сотрудника-владельца сертификата.
											|Установите флажок ""Изменение сотрудника-владельца сертификата"" и выберите владельца сертификата'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
			МастерДалее = Ложь;
		КонецЕсли;
		
		// проверка заполненоости Владельца ЭЦП
		Если (ИзменитьВладельцаСертификата ИЛИ ПереиздатьСертификат) И ВладелецЭЦП = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка") Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выберите сотрудника-владельца сертификата'"), ,"СотрудникВыбор");
			МастерДалее = Ложь;
		КонецЕсли;
		
		// если ни один флажек не отмечен - сообщаем об этом пользователю
		Если НЕ ПереиздатьСертификат И НЕ ИзменитьВладельцаСертификата И НЕ ПродлитьЛицензиюНа1СОтчетность И НЕ ИзменитьСоставКонтролирующихОрганов
			И НЕ ИзменитьРеквизитыПодключенияК1СОтчетности И НЕ ПродлитьСертификат И НЕ ИзменитьМобильныйТелефон 
			И (Не ЭтоЭлектроннаяПодписьВМоделиСервиса ИЛИ Не ИзменитьСпособыДоставкиПаролей) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Вы не выбрали никакого действия'"), ,"");
			МастерДалее = Ложь;
		КонецЕсли;
		
		// проверка мобильного телефона
		Если ИзменитьМобильныйТелефон Тогда
			ТелефонМобильныйБезРазделителей = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ТелефонМобильныйБезРазделителей(ТелефонМобильный);
			Если ПустаяСтрока(ТелефонМобильныйБезРазделителей) Тогда
				// Все ок, пользователь отказался от рассылки
			ИначеЕсли НЕ КонтекстЭДОКлиент.ПроверитьЦифровойКодЗаданнойДлины(ТелефонМобильныйБезРазделителей, 11, Истина) Тогда 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Мобильный телефон должен иметь формат 
					|+7 (XXX) XXX-XX-XX'"), ,"ТелефонМобильный");
				МастерДалее = Ложь;
			КонецЕсли;
		КонецЕсли;

		// изменение в способах доставки паролей
		Элементы.ИзмененияВСпособахДоставкиПаролей.Видимость = ИзменитьСпособыДоставкиПаролей;
		Если ИзменитьСпособыДоставкиПаролей Тогда
			Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.ИзмененияВСпособахДоставкиПаролей;
			УправлениеКнопкамиНавигации();
			МастерДалее = Ложь;
		КонецЕсли;
		
		Если МастерДалее Тогда
			
			// Телефон мобильный
			Если ОператорПоддерживаетСМСУведомление Тогда
				ТелефонМобильныйБезРазделителей = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ТелефонМобильныйБезРазделителей(ТелефонМобильный);
				ТелефонМобильныйИзменился = ТелефонМобильныйБезРазделителей <> ТелефонМобильныйИсходный;
			КонецЕсли;

			ПроверитьИзменилисьЛиРеквизитыПодключенияК1СОтчетности();
			СравнитьНаправленияИКодыСдачиОтчетностиСИсходными();
			СформироватьТаблицуДляПодтвержденияДанных();
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.ЗаполнениеЗаявления Тогда
		
		ЗаполнениеЗаявления(МастерДалее);
		Возврат;
		
	ИначеЕсли ТекущаяСтраница = Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.ИнструкцияПоСозданиюКлючаЭЦП Тогда
		
		Если МастерДалее Тогда
			// создание заявления и его отправка
			СформироватьИОтправитьЗаявление();
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.ПолучениеРезультатаОтправкиЗаявления Тогда
		
		Если ДокументЗаявление.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отклонено") Тогда
			
			ПараметрыОткрытияФормы = Новый Структура();
			ПараметрыОткрытияФормы.Вставить("Организация", Организация);
			ПараметрыОткрытияФормы.Вставить("Реквизит",ДокументЗаявление.Ссылка);
			ПараметрыОткрытияФормы.Вставить("ИзменитьРеквизитыПодключенияК1СОтчетности", ИзменитьРеквизитыПодключенияК1СОтчетности);
			ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.МастерФормированияЗаявкиНаИзменениеПараметровПодключения", ПараметрыОткрытияФормы);
			ПрограммноеЗакрытие = Истина;
			Закрыть();
			
		ИначеЕсли ДокументЗаявление.Статус =  ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Подготовлено") Тогда
			
			СформироватьИОтправитьЗаявление();
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
		
	Если МастерДалее Тогда
		ПоказатьСледующуюСтраницу();
	Иначе
		ЭтаФорма.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельМастерНазад(Команда)
	ПоказатьПредыдущуюСтраницу();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнструкциюПоСозданиюКлючаЭЦП(Команда)
	
	КонтекстЭДОКлиент.ОткрытьИнструкциюИнструкциюПоСозданиюКлючаЭЦП(ТипКриптопровайдера);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьДиректора(Команда)
	УстановитьНовогоВладельцаЭЦП(1);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьГлБухгалтера(Команда)
	УстановитьНовогоВладельцаЭЦП(2);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСотрудника(Команда)
	УстановитьНовогоВладельцаЭЦП(3);
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗаполнениеЗаявления(МастерДалее)
	
	// проверка регистрационного номер
	Если НомерОсновнойПоставки1сИзменился И ИзменитьРеквизитыПодключенияК1СОтчетности Тогда
		Если ПустаяСтрока(НомерОсновнойПоставки1с)  Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните регистрационный номер программы'"), ,"НомерОсновнойПоставки1с");
			МастерДалее = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// полное наименование
	Если ПолноеНаименованиеИзменилось И ИзменитьРеквизитыПодключенияК1СОтчетности Тогда
		Если ПустаяСтрока(ПолноеНаименование) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните полное наименование организации'"), ,"ДекорацияПолноеНаименование");
			МастерДалее = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоЮридическоеЛицо Тогда
		
		// ИНН
		Если ИзменитьРеквизитыПодключенияК1СОтчетности Тогда
			Если ПустаяСтрока(ИНН) Тогда 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните ИНН'"), ,"ДекорацияИНН");
				МастерДалее = Ложь;
			ИначеЕсли НЕ КонтекстЭДОКлиент.ПроверитьЦифровойКодЗаданнойДлины(ИНН,10) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'ИНН должен состоять из 10 цифр'"), ,"ДекорацияИНН");
				МастерДалее = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// КПП
		Если КППИзменился И ИзменитьРеквизитыПодключенияК1СОтчетности Тогда
			Если ПустаяСтрока(КПП) Тогда 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните КПП'"), ,"ДекорацияКПП");
				МастерДалее = Ложь;
			ИначеЕсли НЕ (КонтекстЭДОКлиент.ПроверитьКПП(КПП)) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'КПП должен состоять из 9 цифр'"), ,"ДекорацияКПП");
				МастерДалее = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// ОГРН
		Если ОГРНИзменился И ИзменитьРеквизитыПодключенияК1СОтчетности Тогда
			Если ПустаяСтрока(ОГРН) Тогда 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните ОГРН'"), ,"ОГРН");
				МастерДалее = Ложь;
			ИначеЕсли НЕ (КонтекстЭДОКлиент.ПроверитьЦифровойКодЗаданнойДлины(ОГРН,13)) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'ОГРН должен состоять из 13 цифр'"), ,"ОГРН");
				МастерДалее = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		// ИНН
		Если ИзменитьРеквизитыПодключенияК1СОтчетности Тогда
			Если ПустаяСтрока(ИНН) Тогда 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните ИНН'"), ,"ДекорацияИНН");
				МастерДалее = Ложь;
			ИначеЕсли НЕ КонтекстЭДОКлиент.ПроверитьЦифровойКодЗаданнойДлины(ИНН,12) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'ИНН должен состоять из 12 цифр'"), ,"ДекорацияИНН");
				МастерДалее = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// ОГРН
		Если ОГРНИзменился И ИзменитьРеквизитыПодключенияК1СОтчетности Тогда
			Если ПустаяСтрока(ОГРН) Тогда 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните ОГРН'"), ,"ОГРН");
				МастерДалее = Ложь;
			ИначеЕсли НЕ (КонтекстЭДОКлиент.ПроверитьЦифровойКодЗаданнойДлины(ОГРН,15, Истина)) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'ОГРНИП должен состоять из 15 цифр'"), ,"ОГРН");
				МастерДалее = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// регистрационный номер в ПФР
	Если СдаватьВПФР И ИзменитьСоставКонтролирующихОрганов Тогда
		Если ПустаяСтрока(СтрЗаменить(РегНомерПФР,"-","")) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните регистрационный номер в ПФР'"), ,"ДекорацияРегНомерПФР");
			МастерДалее = Ложь;
		ИначеЕсли НЕ КонтекстЭДОКлиент.ПроверитьРегистрационныйНомерПФР(РегНомерПФР, Истина) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Регистрационный номер в ПФР должен состоять из 12 цифр (ХХХ-ХХХ-ХХХХХХ)'"), ,"ДекорацияРегНомерПФР");
			МастерДалее = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если СдаватьВФСС И ИзменитьСоставКонтролирующихОрганов Тогда
		
		// регистрационный номер в ФСС
		Если ПустаяСтрока(РегНомерФСС) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните регистрационный номер в ФСС'"), ,"ДекорацияРегНомерФСС");
			МастерДалее = Ложь;
		ИначеЕсли НЕ КонтекстЭДОКлиент.ПроверитьЦифровойКодЗаданнойДлины(РегНомерФСС, 10, Истина) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Регистрационный номер в ФСС должен состоять из 10 цифр'"), ,"ДекорацияРегНомерФСС");
			МастерДалее = Ложь;
		КонецЕсли;
		
		// дополнительный код ФСС
		Если ПризнакОбособленногоПодразделения и ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ЭтоЮрЛицо(Организация) и СдаватьВФСС И ЕстьРеквизитДопКодФССУОрганизации() Тогда
			Если ПустаяСтрока(ДополнительныйКодФСС) Тогда 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните дополнительный код ФСС у организации'"), ,"ДополнительныйКодФСС");
				МастерДалее = Ложь;
			ИначеЕсли НЕ КонтекстЭДОКлиент.ПроверитьЦифровойКодЗаданнойДлины(ДополнительныйКодФСС, 10, Истина) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Дополнительный код ФСС должен состоять из 10 цифр'"), ,"ДополнительныйКодФСС");
				МастерДалее = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// юридический адрес
	Если ИзменитьРеквизитыПодключенияК1СОтчетности Тогда
		Если ПустаяСтрока(СтрЗаменить(АдрЮР,",","")) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните юридический адрес'"), ,"АдресЮридический");
			МастерДалее = Ложь;
		Иначе	
			СтрокаОшибкаАдреса = КонтекстЭДОКлиент.ПроверитьАдрес(АдрЮР);
			Если НЕ ПустаяСтрока(СтрокаОшибкаАдреса) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Юридический адрес: %1'"),СтрокаОшибкаАдреса), ,"АдресЮридический");
				МастерДалее = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// телефон организации
	Если ТелефонОсновнойИзменился И ИзменитьРеквизитыПодключенияК1СОтчетности Тогда
		Если СтрДлина(СокрЛП(ТелефонОсновной)) = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните телефон организации'"), ,"ТелефонОсновной");
			МастерДалее = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// электронная почта (теперь обязательна)
	Если ИзменитьРеквизитыПодключенияК1СОтчетности И ЭлектроннаяПочтаИзменилась Тогда
		Если НЕ КонтекстЭДОКлиент.ЭлектроннаяПочтаВведенаКорректно(
				ЭлектроннаяПочта,
				ПредопределенноеЗначение("Перечисление.ТипыЗаявленияАбонентаСпецоператораСвязи.Изменение")) Тогда
			МастерДалее = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если СдаватьВФСРАР И ИзменитьСоставКонтролирующихОрганов Тогда
		
		Если НЕ ЗначениеЗаполнено(КодРегионаФСРАР) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните регион в адресе организации'"), ,"КодРегионаФСРАР");
			МастерДалее = Ложь;
		КонецЕсли;
		
		Если МастерДалее = Истина Тогда
			
			РегионЮрАдреса = РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(АдрЮр).Регион;
			
			Если КодРегионаФСРАР <> РегионЮрАдреса И ЗначениеЗаполнено(РегионЮрАдреса) Тогда
				НаименованиеРегионаЮрАдреса = НаименованиеСубъектаРФ(Число(РегионЮрАдреса));
				КодРегионаСНаименованием = Формат(Число(РегионЮрАдреса), "ЧН=0; ЧГ=; ЧЦ=2; ЧВН=;") + ?(ЗначениеЗаполнено(НаименованиеРегионаЮрАдреса), " - ", "") + НаименованиеРегионаЮрАдреса;
				ДополнительныеПараметры = Новый Структура("МастерДалее", МастерДалее);
				ОписаниеОповещения = Новый ОписаниеОповещения("ВопросЗаполнениеЗаявленияРегионЗаявкиОтличаетсяЗавершение", ЭтотОбъект, ДополнительныеПараметры);
				ПоказатьВопрос(ОписаниеОповещения, "Регион заявки для Росалкогольрегулирования отличается от указанного в юридическом адресе (""" + КодРегионаСНаименованием + """). Продолжить?", РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да);
			Иначе
				ЗаполнениеЗаявленияКодРегионаФСРАР(МастерДалее);
			КонецЕсли;
		Иначе
			ЗаполнениеЗаявленияФИОСНИЛСДолжностьДокумент(МастерДалее);
		КонецЕсли;
	Иначе
		ЗаполнениеЗаявленияФИОСНИЛСДолжностьДокумент(МастерДалее);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнениеЗаявленияРегионЗаявкиОтличаетсяЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	МастерДалее = РезультатВопроса = КодВозвратаДиалога.Да;
	ЗаполнениеЗаявленияКодРегионаФСРАР(МастерДалее);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеЗаявленияКодРегионаФСРАР(МастерДалее)
	
	Если МастерДалее И ЗначениеЗаполнено(КодРегионаФСРАР) Тогда
		
		ИнформацияОРегионе = ИнформацияОРегионеФСРАРНаСервере(КодРегионаФСРАР);
		
		СхемаСдачиОтчетности = ПредопределенноеЗначение("Перечисление.СхемыСдачиОтчетностиФСРАР.СдачаВручную");
		Если ИнформацияОРегионе <> Неопределено Тогда
			СхемаСдачиОтчетности = КонтекстЭДОКлиент.СхемаСдачиОтчетностиФСРАР(Ложь, ИнформацияОРегионе.ТипПортала, КодРегионаФСРАР);
		КонецЕсли;
		
		Если СхемаСдачиОтчетности = ПредопределенноеЗначение("Перечисление.СхемыСдачиОтчетностиФСРАР.СдачаВручную") Тогда
			ТекстВопроса = "Для выбранного региона поддерживается функция формирования пакета, содержащего подписанную отчетность, для последующей загрузки на соответствующий портал в интернете." + Символы.ВК + Символы.ПС + Символы.ВК + Символы.ПС
				+ "Обратите внимание, функция отправки отчетности непосредственно из программы (кнопка ""Отправить"") в текущей версии не поддерживается. Продолжить?";
			ДополнительныеПараметры = Новый Структура("МастерДалее", МастерДалее);
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросЗаполнениеЗаявленияСдачаВручнуюЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да);
		Иначе
			ЗаполнениеЗаявленияФИОСНИЛСДолжностьДокумент(МастерДалее);
		КонецЕсли;
	Иначе
		ЗаполнениеЗаявленияФИОСНИЛСДолжностьДокумент(МастерДалее);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнениеЗаявленияСдачаВручнуюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	МастерДалее = ДополнительныеПараметры.МастерДалее;
	Ответ = РезультатВопроса;
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		МастерДалее = Ложь;
		ЗаполнениеЗаявленияФИОСНИЛСДолжностьДокумент(МастерДалее);
	Иначе
		ЗаполнениеЗаявленияФИОСНИЛСДолжностьДокумент(МастерДалее);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеЗаявленияФИОСНИЛСДолжностьДокумент(МастерДалее)
	
	// фамилия
	Если ПустаяСтрока(ВладелецЭЦПФамилия) И (ИзменитьВладельцаСертификата ИЛИ ПереиздатьСертификат) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните фамилию сотрудника-владельца ЭП'"), ,"ВладелецЭЦПФамилия");
		МастерДалее = Ложь;
	КонецЕсли;
	
	// имя
	Если ПустаяСтрока(ВладелецЭЦПИмя) И (ИзменитьВладельцаСертификата ИЛИ ПереиздатьСертификат) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните имя сотрудника-владельца ЭП'"), ,"ВладелецЭЦПИмя");
		МастерДалее = Ложь;
	КонецЕсли;	
	
	// СНИЛС
	Если ВладелецЭЦПСНИЛСИзменился И ИзменитьРеквизитыПодключенияК1СОтчетности ИЛИ ПереиздатьСертификат ИЛИ ИзменитьВладельцаСертификата Тогда
		Если ПустаяСтрока(СтрЗаменить(ВладелецЭЦПСНИЛС, "-","")) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните СНИЛС сотрудника-владельца ЭП'"), ,"ВладелецЭЦПСНИЛС");
			МастерДалее = Ложь;
		Иначе	
			Если НЕ КонтекстЭДОКлиент.ПроверитьСНИЛС(ВладелецЭЦПСНИЛС) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Некорректно указан СНИЛС сотрудника. Не соответствует маске ХХХ-ХХХ-ХХХ ХХ, где X – любая цифра'"), ,"ВладелецЭЦПСНИЛС");
				МастерДалее = Ложь;
			ИначеЕсли НЕ КонтекстЭДОКлиент.ПроверитьСНИЛС(ВладелецЭЦПСНИЛС, Ложь, Истина) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Некорректно указан СНИЛС сотрудника. Не сошлось контрольное число (СНИЛС не существует)'"), ,"ВладелецЭЦПСНИЛС");
				МастерДалее = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// должность
	Если ВладелецЭЦПДолжностьИзменилась И ИзменитьРеквизитыПодключенияК1СОтчетности ИЛИ ПереиздатьСертификат ИЛИ ИзменитьВладельцаСертификата Тогда
		Если ЭтоЮридическоеЛицо И ПустаяСтрока(ВладелецЭЦПДолжность) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните должность сотрудника-владельца ЭП'"), ,"ВладелецЭЦПДолжность");
			МастерДалее = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// документ, удостоверяющий личность
	Если ИзменитьВладельцаСертификата ИЛИ ПереиздатьСертификат Тогда
		Если ПустаяСтрока(ВладелецЭЦПВидДокумента) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните документ, удостоверяющий личность у сотрудника-владельца ЭП'"), ,"ВладелецЭЦПВидДокумента");
			МастерДалее = Ложь;
		КонецЕсли;
		
		// серия
		Если ПустаяСтрока(ВладелецЭЦПСерияДокумента) И НЕ КонтекстЭДОКлиент.ПроверитьСериюДокумента(ВладелецЭЦПВидДокумента, ВладелецЭЦПСерияДокумента) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните серию документа, удостоверяющего личность сотрудника-владельца ЭП'"), ,"ВладелецЭЦПСерияДокумента");
			МастерДалее = Ложь;
		КонецЕсли;
		
		// номер
		Если ПустаяСтрока(ВладелецЭЦПНомерДокумента) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните номер документа, удостоверяющего личность сотрудника-владельца ЭП'"), ,"ВладелецЭЦПНомерДокумента");
			МастерДалее = Ложь;
		КонецЕсли;
		
		// дата выдачи
		Если ПустаяСтрока(ВладелецЭЦПДатаВыдачиДокумента) ИЛИ Строка(ВладелецЭЦПДатаВыдачиДокумента) = "01.01.0001 0:00:00" Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните дату выдачи документа, удостоверяющего личность сотрудника-владельца ЭП'"), ,"ВладелецЭЦПДатаВыдачиДокумента");
			МастерДалее = Ложь;
		ИначеЕсли ВладелецЭЦПДатаВыдачиДокумента > ТекущаяДатаСервер ИЛИ Год(ВладелецЭЦПДатаВыдачиДокумента) < 1900 Тогда	
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Некорректно указана дата выдачи документа, удостоверяющего личность сотрудника-владельца ЭП'"), ,"ВладелецЭЦПДатаВыдачиДокумента");
			МастерДалее = Ложь;
		КонецЕсли;
		
		// кем выдан
		Если ПустаяСтрока(ВладелецЭЦПКемВыданДокумент) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Кем выдан"" документа, удостоверяющего личность сотрудника-владельца ЭП'"), ,"ВладелецЭЦПКемВыданДокумент");
			МастерДалее = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Проверяем, что пользователь отправляет не пустое заявление
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ЭтотПараметрИзменился", Истина);
	ПараметрыОтбора.Вставить("ВыделятьСтрокуЖелтым", Истина);
	
	Если ТаблицаДанныхЗаявленияНаПодключение.НайтиСтроки(ПараметрыОтбора).Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не изменено ни одной настройки подключения к 1С-Отчетности'"), ,"");
		МастерДалее = Ложь;
	КонецЕсли;
	
	Если МастерДалее Тогда
		
		ОтключитьОбработчикОжидания("ОбработкаОжиданияОбновитьДанныеГлБухгалтера");
		ОтключитьОбработчикОжидания("ОбработкаОжиданияОбновитьДанныеРуководителя");
		
		// создание документа заявления
		СоздатьНовыйДокументЗаявление(2);
		ОповеститьОбИзменении(ДокументЗаявление.Ссылка);
		
		// Если переиздания сертификата не требуется, то пропускаем страницу ИнструкцияПоСозданиюКлючаЭЦП
		Если НЕ ПереиздатьСертификат ИЛИ ЭтоЭлектроннаяПодписьВМоделиСервиса Тогда
			СформироватьИОтправитьЗаявление();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если МастерДалее Тогда
		ПоказатьСледующуюСтраницу();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИнформацияОРегионеФСРАРНаСервере(Знач КодРегиона)
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДОСервер.ИнформацияОРегионеФСРАР(КодРегиона);
	
КонецФункции

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Если КодВозврата = КодВозвратаДиалога.Да Тогда
		ПрограммноеЗакрытие = Истина;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Организации" Тогда
		
		Если Источник = Организация ИЛИ Параметр = Организация Тогда
			ДополнительныеПараметры = Новый Структура("ДанныеЗаполнения");
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаОповещенияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ОбновитьРеквизитыОрганизации(Истина, ОписаниеОповещения);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_ФизическиеЛица" Тогда
		
		Если Параметр = Руководитель Тогда
			УстановитьНовогоВладельцаЭЦП(1);
		ИначеЕсли Параметр = ГлБухгалтер Тогда
			УстановитьНовогоВладельцаЭЦП(2);
		ИначеЕсли Параметр = СотрудникВыбор Тогда 
			УстановитьНовогоВладельцаЭЦП(3);
		КонецЕсли;
		
		// Обновляем данные на второй закладке только если мы находимся на этой закладке
		Если Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.ЗаполнениеЗаявления Тогда
			СформироватьТаблицуДляПодтвержденияДанных();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ИзменениеНастроекДокументооборота" Тогда
		Если КонтекстЭДОКлиент <> Неопределено Тогда
			СравнитьКриптопровайдера();
			СформироватьТаблицуДляПодтвержденияДанных();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ПроверитьЧтоМастерФормированияЗаявкиНаПодключениеИлиИзменениеПодключенияОткрыт" И Источник = Организация Тогда
		Параметр.ФормаМастераФормированияЗаявкиНаПодключениеИлиИзменениеПодключенияОткрыта = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	СравнитьТекущиеРеквизитыПодключенияСИсходными();
	СравнитьНаправленияИКодыСдачиОтчетностиСИсходными();
	ОформитьЭлементыФормыНаПервомШаге();
	
	//Если изменились реквизиты, то взводим галку ИзменитьРеквизитыПодключенияК1СОтчетности
	ПроверитьИзменилисьЛиРеквизитыПодключенияК1СОтчетности();
	Если ИзменилисьРеквизитыПодключенияК1СОтчетности Тогда
		ИзменитьРеквизитыПодключенияК1СОтчетности = Истина;
	КонеЦесли;
	
	УстановитьГалкуПереиздатьСертификатИОпределитьПричиныПереиздания();
	
	// Обновляем данные на второй закладке только если мы находимся на этой закладке
	Если Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.ЗаполнениеЗаявления Тогда
		СформироватьТаблицуДляПодтвержденияДанных();
	КонецЕсли;
	
	ЭтаФорма.Активизировать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	// Проверка заполненнности регистра
	ТекстОшибокДляМастераПодключенияК1СОтчетности = "";
	
	ПодготовитьФорму(ЭтаФорма);
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ДополнительныеПараметры = Новый Структура("УчетнаяЗапись", УчетнаяЗапись);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЕстьДанныеДляФормированияЗаявленияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		КонтекстЭДОКлиент.ЕстьДанныеДляФормированияВторичногоЗаявления(УчетнаяЗапись, ТекстОшибокДляМастераПодключенияК1СОтчетности, ОписаниеОповещения);
	Иначе
		ПриОткрытииИнициализация();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЕстьДанныеДляФормированияЗаявленияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ЕстьДанные = Результат.ЕстьДанные;
	ТекстОшибок = Результат.ТекстОшибок;
	УчетнаяЗапись = ДополнительныеПараметры.УчетнаяЗапись;
	
	Если ЕстьДанные Тогда
		ПриОткрытииИнициализация();
	Иначе
		ПоддерживаетсяВторичноеЗаявление = Ложь;
		ОформитьЭлементыФормыНаПервомШаге();
		
		ПодключитьОбработчикОжидания("Подключаемый_ОткрытиеПредупрежденияОНевозможностиПолучитьНастройкиУчетнойЗаписи", 1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытиеПредупрежденияОНевозможностиПолучитьНастройкиУчетнойЗаписи()
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("УчетнаяЗапись", УчетнаяЗапись);
	ПараметрыФормы.Вставить("ТекстОшибки", ТекстОшибок);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗакрытьФормуЗавершение", ЭтотОбъект);
	ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ПредупреждениеОНевозможностиПолучитьНастройкиУчетнойЗаписи", ПараметрыФормы,,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФормуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПрограммноеЗакрытие = Истина;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииИнициализация()

	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииИнициализацияЗначенийЗавершение", ЭтотОбъект);
	
	ИнициализацияЗначений(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииИнициализацияЗначенийЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииИнициализацияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		// Заполняем параметры организации
		ДанныеЗаполнения = Новый Структура();
		ЗаполнитьРеквизитыОрганизации(ДанныеЗаполнения,,ОписаниеОповещения);
		
	Иначе
		ПоддерживаетсяВторичноеЗаявление = Ложь;
		ОформитьЭлементыФормыНаПервомШаге();
		УправлениеКнопкамиНавигации();
		ЭтаФорма.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииИнициализацияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	УправлениеКнопкамиНавигации();
	
	ЭтаФорма.Активизировать();
	
	Если ЗначениеЗаполнено(ДобавляемыеКонтролирующиеОрганы) Тогда
		ИзменитьСоставКонтролирующихОрганов = Истина;
		
		ОформитьЭлементыДляГалкиИзменитьСоставНалоговыхОргановШаг1();
		
		СравнитьТекущиеРеквизитыПодключенияСИсходными();
		ОформитьПодсказкуДляГалкиИзменитьРеквизитыПодключенияК1СОтчетности();
		
		УстановитьГалкуПереиздатьСертификатИОпределитьПричиныПереиздания();
		
		Если Найти(",ФНС,", "," + ДобавляемыеКонтролирующиеОрганы + ",") Тогда
			СдаватьВФНС = Истина;
		КонецЕсли;
		Если Найти(",ПФР,", "," + ДобавляемыеКонтролирующиеОрганы + ",") Тогда
			СдаватьВПФР = Истина;
		КонецЕсли;
		Если Найти(",ФСГС,", "," + ДобавляемыеКонтролирующиеОрганы + ",") Тогда
			СдаватьВРосстат = Истина;
		КонецЕсли;
		Если Найти(",ФСС,", "," + ДобавляемыеКонтролирующиеОрганы + ",") Тогда
			СдаватьВФСС = Истина;
		КонецЕсли;
		Если Найти(",ФСРАР,", "," + ДобавляемыеКонтролирующиеОрганы + ",") Тогда
			СдаватьВФСРАР = Истина;
		КонецЕсли;
		Если Найти(",РПН,", "," + ДобавляемыеКонтролирующиеОрганы + ",") Тогда
			СдаватьВРПН = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСпособыДоставкиПаролей(УчетнаяЗапись)
	
	Возврат КриптосервисВМоделиСервиса.ПолучитьСпособыДоставкиПаролей(УчетнаяЗапись.ИдентификаторДокументооборота);		
	
КонецФункции
	
&НаКлиенте
Процедура СдаватьВРосстатПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	СдаватьВРосстат = Результат;
	
	// Если установлена галка СдаватьВРосстат, то автоматически ставим галку СдаватьВФНС
	Если ИзменитьСоставКонтролирующихОрганов Тогда
		Если СдаватьВРосстат И НЕ СдаватьВФНС Тогда 
			СдаватьВФНС = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ОформитьЭлементыДляГалкиИзменитьСоставНалоговыхОргановШаг1();
	
КонецПроцедуры

&НаКлиенте
Процедура СдаватьВПФРПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	СдаватьВПФР = Результат;
	
	СравнитьТекущиеРеквизитыПодключенияСИсходными();
	ОформитьПодсказкуДляГалкиИзменитьРеквизитыПодключенияК1СОтчетности();
	
	ОформитьЭлементыДляГалкиИзменитьСоставНалоговыхОргановШаг1();

КонецПроцедуры

&НаКлиенте
Процедура СдаватьВФНСПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	СдаватьВФНС = Результат;
	
	// Снимаем галку росстата, если снята галка ФНС
	Если ИзменитьСоставКонтролирующихОрганов Тогда
		Если НЕ СдаватьВФНС Тогда 
			СдаватьВРосстат = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ОформитьЭлементыДляГалкиИзменитьСоставНалоговыхОргановШаг1();

КонецПроцедуры

&НаКлиенте
Процедура СдаватьВФССПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	СдаватьВФСС = Результат;
	
	СравнитьТекущиеРеквизитыПодключенияСИсходными();
	ОформитьПодсказкуДляГалкиИзменитьРеквизитыПодключенияК1СОтчетности();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКодРосстатНажатиеПослеВыбораКода(НовоеЗначениеКодаРосстата, ДополнительныеПараметры) Экспорт
	
	// если в окне выбора ТОГСа нажали отмену, а предыдущее значение было заполнено, то такой результата не присваиваем
	Если НЕ (ПустаяСтрока(НовоеЗначениеКодаРосстата) И НЕ ПустаяСтрока(КодРосстата)) Тогда
		КодРосстата = НовоеЗначениеКодаРосстата;
	КонецЕсли;
	
	ОформитьЭлементыДляГалкиИзменитьСоставНалоговыхОргановШаг1();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтветПользователяНаПредложениеПереиздатьСертификат(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		// Продолжить
		ПродлитьСертификатПриИзмененииЗавершение();
	Иначе
		// Не продолжать
		ПродлитьСертификат = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродлитьСертификатПриИзмененииЗавершение()
	
	// Оформляем текст под галкой
	ОформитьПодсказкуДляГалкиПродлитьСертификат();
	
	// Определяем, нужно ли перездавать сертификат 
	УстановитьГалкуПереиздатьСертификатИОпределитьПричиныПереиздания();
	
КонецПроцедуры

&НаКлиенте
Процедура СдаватьВФСРАРПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	СдаватьВФСРАР = Результат;
	
	СравнитьТекущиеРеквизитыПодключенияСИсходными();
	ОформитьПодсказкуДляГалкиИзменитьРеквизитыПодключенияК1СОтчетности();
	
	УстановитьГалкуПереиздатьСертификатИОпределитьПричиныПереиздания();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТребуетсяЛиПродлениеСертификата(ВходящийКонтекст)
	
	Если НЕ ЗначениеЗаполнено(ОтпечатокСертификата) Тогда
		Попытка 
			ОтпечатокСертификата = КонтекстЭДОКлиент.ПолучитьОтпечаток(УчетнаяЗапись, "Руководитель", Неопределено);
		Исключение
			ОтпечатокСертификата = Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьТребуетсяЛиПродлениеСертификатаПослеПолученияСвойствСертификата", ЭтотОбъект, ВходящийКонтекст);
	
	Если ЭтоЭлектроннаяПодписьВМоделиСервиса Тогда
		
		СвойстваСертификата = КонтекстЭДОКлиент.ПолучитьСвойстваСертификатаПоОтпечаткуНаСервере(ОтпечатокСертификата, "MY");
		Результат = Новый Структура;
		Результат.Вставить("Выполнено", 			СвойстваСертификата <> Неопределено);
		Результат.Вставить("СвойстваСертификата", 	СвойстваСертификата);
		Результат.Вставить("СертификатНайден", 		Истина);
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Результат);
		
	Иначе
		ДокументооборотСКОКриптографияКлиент.НайтиСертификатПоОтпечатку(ОписаниеОповещения, ОтпечатокСертификата, "MY");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТребуетсяЛиПродлениеСертификатаПослеПолученияСвойствСертификата(Результат, ВходящийКонтекст) ЭКспорт
	
	Если Результат.Выполнено Тогда
		
		Если Результат.СертификатНайден Тогда
		
			СвойстваСертификата = Результат.СвойстваСертификата;
			
			СертификатДействителенПо = СвойстваСертификата.ДействителенПо;
			СекундВОдномДне = 24 * 60 * 60;
			КоличествоДнейДоОкончанияСертификата = (НачалоДня(СертификатДействителенПо) - НачалоДня(ТекущаяДатаСервер))/СекундВОдномДне;
			
			ПродлитьСертификатИсходный = (КоличествоДнейДоОкончанияСертификата <= КоличествоДнейЗаКотороеНужноПредупреждатьОбИстеченииСрока);
		КонецЕсли;
		
	КонецЕсли;
	
	СертификатДоступен = ЗначениеЗаполнено(СертификатДействителенПо);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОпределитьИсходныеПараметрыПодключенияК1СОтчетностиПослеОпределенияСвойствСертификата", 
		ЭтотОбъект, 
		ВходящийКонтекст); 
		
	ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТребуетсяЛиПродлениеЛицензии()
	
	СекундВОдномДне = 24 * 60 * 60;
	КоличествоДнейДоОкончанияЛицензии = (НачалоДня(ЛицензияДатаОкончания) - НачалоДня(ТекущаяДатаСервер))/СекундВОдномДне;
	ПродлитьЛицензиюНа1СОтчетностьИсходный = КоличествоДнейДоОкончанияЛицензии <= КоличествоДнейЗаКотороеНужноПредупреждатьОбИстеченииСрока;
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьТекущиеРеквизитыПодключенияСИсходными()
	
	// Изменились ли реквизиты подключения к 1С-Отчетности ?
	//
	НомерОсновнойПоставки1сИзменился = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(НомерОсновнойПоставки1с) 
		<> ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(НомерОсновнойПоставки1сИсходный);
	
	// Краткое наименование
	КраткоеНаименованиеИзменилось = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(КраткоеНаименование) 
		<> ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(КраткоеНаименованиеИсходное);
	
	// Полное наименование
	ПолноеНаименованиеИзменилось = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ПолноеНаименование) 
		<> ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ПолноеНаименованиеИсходное); 
	
	// КПП
	КППИзменился = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(КПП) 
		<> ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(КППИсходный);
	
	// ОГРН
	ОГРНИзменился = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ОГРН) 
		<> ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ОГРНИсходный); 
	
	// Регистрационный номер в ПФР
	РегНомерПФРИзменился = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(РегНомерПФР) 
		<> ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(РегНомерПФРИсходный)
		И (ИзменитьСоставКонтролирующихОрганов И СдаватьВПФР ИЛИ НЕ ИзменитьСоставКонтролирующихОрганов И СдаватьВПФРИсходный); 
	
	// Регистрационный номер в ФСС
	РегНомерФССИзменился = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(РегНомерФСС) 
		<> ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(РегНомерФССИсходный)
		И (ИзменитьСоставКонтролирующихОрганов И СдаватьВФСС ИЛИ НЕ ИзменитьСоставКонтролирующихОрганов И СдаватьВФССИсходный); 
	
	// Регион
	КодРегионаФСРАРИзменился = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(КодРегионаФСРАР) 
		<> ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(КодРегионаФСРАРИсходный) 
		И (ИзменитьСоставКонтролирующихОрганов И СдаватьВФСРАР ИЛИ НЕ ИзменитьСоставКонтролирующихОрганов И СдаватьВФСРАРИсходный);
	
	// Электронная почта
	ЭлектроннаяПочтаИзменилась = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ЭлектроннаяПочта) 
		<> ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ЭлектроннаяПочтаИсходная)
		ИЛИ НЕ ЗначениеЗаполнено(ЭлектроннаяПочта)
		ИЛИ НЕ ЗначениеЗаполнено(ЭлектроннаяПочтаИсходная);
	
	// Телефон основной
	ТелефонОсновнойИзменился = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ТелефонОсновной) 
		<> ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ТелефонОсновнойИсходный);
	
	// Телефон дополнительный
	ТелефонДополнительныйИзменился = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ТелефонДополнительный) 
		<> ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ТелефонДополнительныйИсходный);
	
	// Сведения о сотруднике – владельце электронной подписи
	
	// Подразделение
	ВладелецЭЦППодразделениеИзменилось = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ВладелецЭЦППодразделение) 
		<> ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ВладелецЭЦППодразделениеИсходное) 
		И ИзменитьВладельцаСертификата И ЗначениеЗаполнено(ВладелецЭЦП);

	// Должность
	ВладелецЭЦПДолжностьИзменилась = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ВладелецЭЦПДолжность) 
		<> ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ВладелецЭЦПДолжностьИсходная) 
		И ИзменитьВладельцаСертификата И ЗначениеЗаполнено(ВладелецЭЦП);
	
	// СНИЛС
	ВладелецЭЦПСНИЛСИзменился = 
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ВладелецЭЦПСНИЛС) 
		<> ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ВладелецЭЦПСНИЛСИсходный) 
		И ИзменитьВладельцаСертификата И ЗначениеЗаполнено(ВладелецЭЦП)
		И ((ВладелецЭЦПТипИсходный = 1  ИЛИ ВладелецЭЦПТипИсходный = 2) И НЕ ИзменитьВладельцаСертификата // это бухгалтер или директор
		ИЛИ (ВыборБухгалтера = 1 ИЛИ ВыборДиректора = 1) И ИзменитьВладельцаСертификата); // это бухгалтер или директор
	
	Если Не ЭтоЭлектроннаяПодписьВМоделиСервиса Тогда
		СравнитьКриптопровайдера();
	КонецЕсли;
	
	СформироватьТекстПредупреждения();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьТекстПредупреждения()
	
	ИзмененныеРеквизиты = "";
	
	// НомерОсновнойПоставки1С
	ДобавитьТекст(
		ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.НомерОсновнойПоставки1С"), 
		НомерОсновнойПоставки1сИзменился,
		ИзмененныеРеквизиты);
	
	// Краткое наименование
	ДобавитьТекст(
		ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.КраткоеНаименование"), 
		КраткоеНаименованиеИзменилось,
		ИзмененныеРеквизиты);
	
	// Полное наименование
	ДобавитьТекст(
		ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ПолноеНаименование"), 
		ПолноеНаименованиеИзменилось,
		ИзмененныеРеквизиты);
	
	// КПП
	ДобавитьТекст(
		ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.КПП"), 
		КППИзменился,
		ИзмененныеРеквизиты);
	
	// ОГРН
	ДобавитьТекст(
		ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ОГРН"), 
		ОГРНИзменился,
		ИзмененныеРеквизиты);
	
	// Регистрационный номер в ПФР
	ДобавитьТекст(
		ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.РегНомерПФР"), 
		РегНомерПФРИзменился,
		ИзмененныеРеквизиты);
	
	// Регистрационный номер в ФСС
	ДобавитьТекст(
		ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.РегНомерФСС"), 
		РегНомерФССИзменился,
		ИзмененныеРеквизиты);
	
	// Регион
	ДобавитьТекст(
		ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.КодРегионаФСРАР"), 
		КодРегионаФСРАРИзменился,
		ИзмененныеРеквизиты);
	
	// Электронная почта
	ДобавитьТекст(
		ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ЭлектроннаяПочта"), 
		ЭлектроннаяПочтаИзменилась,
		ИзмененныеРеквизиты);
	
	// Телефон основной
	ДобавитьТекст(
		ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ТелефонОсновной"), 
		ТелефонОсновнойИзменился,
		ИзмененныеРеквизиты);
	
	// Телефон основной
	ДобавитьТекст(
		ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ТелефонДополнительный"), 
		ТелефонДополнительныйИзменился,
		ИзмененныеРеквизиты);
	
	Если НЕ ПустаяСтрока(ИзмененныеРеквизиты) Тогда
		ИзмененныеРеквизиты = ИзмененныеРеквизиты + НСтр("ru = ' организации'");
	КонецЕсли;
	
	// Сведения о сотруднике – владельце электронной подписи
	
	// Подразделение
	ДобавитьТекст(
		ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦППодразделение"), 
		ВладелецЭЦППодразделениеИзменилось,
		ИзмененныеРеквизиты);

	// Должность
	ДобавитьТекст(
		ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПДолжность"), 
		ВладелецЭЦПДолжностьИзменилась,
		ИзмененныеРеквизиты);
	
	// СНИЛС
	ДобавитьТекст(
		ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПСНИЛС"), 
		ВладелецЭЦПСНИЛСИзменился,
		ИзмененныеРеквизиты);
	
	Если ВладелецЭЦППодразделениеИзменилось ИЛИ ВладелецЭЦПДолжностьИзменилась ИЛИ ВладелецЭЦПСНИЛСИзменился Тогда
		ИзмененныеРеквизиты = ИзмененныеРеквизиты + НСтр("ru = ' сотрудника-владельца ЭП'");
	КонецЕсли;
	
	ЗаменитьЗапятуюНаИВСтроке(ИзмененныеРеквизиты);
		
КонецПроцедуры

&НаКлиенте
Процедура СравнитьНаправленияИКодыСдачиОтчетностиСИсходными()
	
	// ФНС
	СдаватьВФНСИзменился = СдаватьВФНС <> СдаватьВФНСИсходный;
	КодыФНСИзменились = КодыФНСИзменились(Получатели, ПолучателиИсходные);
	
	// ПФР
	СдаватьВПФРИзменился = СдаватьВПФР <> СдаватьВПФРИсходный;
	КодПФРИзменился = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(КодПФР) 
		<> ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(КодПФРИсходный);
	
	// ФСС
	СдаватьВФССИзменился = СдаватьВФСС <> СдаватьВФССИсходный;
	
	// Росстат
	СдаватьВРосстатИзменился = СдаватьВРосстат <> СдаватьВРосстатИсходный;
	КодРосстатаИзменился = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(КодРосстата)
		<> ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(КодРосстатаИсходный);
	
	// ФСРАР
	СдаватьВФСРАРИзменился = СдаватьВФСРАР <> СдаватьВФСРАРИсходный;
	
	// РПН
	СдаватьВРПНИзменился = СдаватьВРПН <> СдаватьВРПНИсходный;
	
КонецПроцедуры

&НаКлиенте
Функция КодыФНСИзменились(ТаблицаНаправлений, ТаблицаНаправленийИсходная)
	
	КодыИзменились = Ложь;
	
	Если ТаблицаНаправлений.Количество() <> ТаблицаНаправленийИсходная.Количество() Тогда
		КодыИзменились = Истина;
	Иначе
		// Сравнение двух таблиц
		Для каждого СтрокаПолучателей Из ТаблицаНаправлений Цикл
			ПараметрыОтбора = Новый Структура();
			ПараметрыОтбора.Вставить("КодПолучателя", ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(СтрокаПолучателей.КодПолучателя));
			ПараметрыОтбора.Вставить("КПП", ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(СтрокаПолучателей.КПП));
			МассивНайденныхСтрок = ТаблицаНаправленийИсходная.НайтиСтроки(ПараметрыОтбора);
			Если МассивНайденныхСтрок.Количество() = 0 Тогда 
				КодыИзменились = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат КодыИзменились;
	
КонецФункции

&НаКлиенте
Функция ИзменилисьРеквизитыТребующиеПереизданияСертификата()

	Возврат КраткоеНаименованиеИзменилось И ИзменитьРеквизитыПодключенияК1СОтчетности
			ИЛИ ОГРНИзменился И ИзменитьРеквизитыПодключенияК1СОтчетности
			// Код региона ФСРАР важен только если подключено направление ФСРАР
			ИЛИ КодРегионаФСРАРИзменился И ИзменитьРеквизитыПодключенияК1СОтчетности И 
				(ИзменитьСоставКонтролирующихОрганов И СдаватьВФСРАР ИЛИ НЕ ИзменитьСоставКонтролирующихОрганов И СдаватьВФСРАРИсходный)
			ИЛИ ЭлектроннаяПочтаИзменилась И ИзменитьРеквизитыПодключенияК1СОтчетности
			ИЛИ ВладелецЭЦПИзменился И ИзменитьВладельцаСертификата
			ИЛИ ВладелецЭЦПСНИЛСИзменился И (ИзменитьВладельцаСертификата ИЛИ ИзменитьРеквизитыПодключенияК1СОтчетности)
			ИЛИ ВладелецЭЦППодразделениеИзменилось И (ИзменитьВладельцаСертификата ИЛИ ИзменитьРеквизитыПодключенияК1СОтчетности)
			ИЛИ ВладелецЭЦПДолжностьИзменилась И (ИзменитьВладельцаСертификата ИЛИ ИзменитьРеквизитыПодключенияК1СОтчетности)
			ИЛИ ПродлитьСертификат;

КонецФункции

&НаКлиенте
Процедура УстановитьГалкуПереиздатьСертификатИОпределитьПричиныПереиздания(ЭтоПопыткаРучногоИзменения = Ложь)
	
	ИзменилисьРеквизитыСертификата = ИзменилисьРеквизитыТребующиеПереизданияСертификата();
	
	Если ИзменилисьРеквизитыСертификата Тогда
		
		// Оставляем без изменения, так как нельзя снимать
		ПереиздатьСертификат = 2;
		
	Иначе
		
		НеобходимоСброситьФлаг = ЭтоПопыткаРучногоИзменения И ПереиздатьСертификат = 2 
			ИЛИ НЕ ЭтоПопыткаРучногоИзменения И СертификатДоступен;
		
		Если НеобходимоСброситьФлаг Тогда
			ПереиздатьСертификат = 0;
		Иначе
			ПереиздатьСертификат = 1;
		КонецЕсли;
				
	КонецЕсли;
	
	ОпределитьПричинуПереизданияСертификата();
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьПричинуПереизданияСертификата()
	
	ТаблицаПричинПереизданияСертификата.Очистить();
	ПричиныПереизданияСертификата = "";
	
	Элементы.ПричиныПереизданияСертификата.ЦветТекста = СинийЦветПодсказки;
	
	Если ПереиздатьСертификат = 2 Тогда
		// Флажок установлен без возможности снятия
		
		// Краткое наименование
		НоваяСтрока 			= ТаблицаПричинПереизданияСертификата.Добавить();
		НоваяСтрока.Реквизит	= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.КраткоеНаименование");
		НоваяСтрока.Изменился	= КраткоеНаименованиеИзменилось И ИзменитьРеквизитыПодключенияК1СОтчетности;
		НоваяСтрока.Группа		= "Организация";
		НоваяСтрока.Префикс		= НСтр("ru = 'изменилось'");
		
		// ОГРН
		НоваяСтрока 			= ТаблицаПричинПереизданияСертификата.Добавить();
		НоваяСтрока.Реквизит	= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ОГРН");
		НоваяСтрока.Изменился	= ОГРНИзменился И ИзменитьРеквизитыПодключенияК1СОтчетности;
		НоваяСтрока.Группа		= "Организация";
		НоваяСтрока.Префикс		= НСтр("ru = 'изменился'");
		
		// Регион
		НоваяСтрока 			= ТаблицаПричинПереизданияСертификата.Добавить();
		НоваяСтрока.Реквизит	= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.КодРегионаФСРАР");
		НоваяСтрока.Изменился	= КодРегионаФСРАРИзменился И ИзменитьРеквизитыПодключенияК1СОтчетности И 
							(ИзменитьСоставКонтролирующихОрганов И СдаватьВФСРАР ИЛИ НЕ ИзменитьСоставКонтролирующихОрганов И СдаватьВФСРАРИсходный);
		НоваяСтрока.Группа		= "Организация";
		НоваяСтрока.Префикс		= НСтр("ru = 'изменился'");
			
		// Электронная почта
		НоваяСтрока 			= ТаблицаПричинПереизданияСертификата.Добавить();
		НоваяСтрока.Реквизит	= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ЭлектроннаяПочта");
		НоваяСтрока.Изменился	= ЭлектроннаяПочтаИзменилась И ИзменитьРеквизитыПодключенияК1СОтчетности;
		НоваяСтрока.Группа		= "Организация";
		НоваяСтрока.Префикс		= НСтр("ru = 'изменилась'");
		
		// Владелец подписи
		НоваяСтрока 			= ТаблицаПричинПереизданияСертификата.Добавить();
		НоваяСтрока.Реквизит	= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦП");
		НоваяСтрока.Изменился	= ВладелецЭЦПИзменился И ИзменитьВладельцаСертификата;
		НоваяСтрока.Группа		= "Владелец";
		НоваяСтрока.Префикс		= НСтр("ru = 'изменился'");
		
		// Подразделение
		НоваяСтрока 			= ТаблицаПричинПереизданияСертификата.Добавить();
		НоваяСтрока.Реквизит	= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦППодразделение");
		НоваяСтрока.Изменился	= ВладелецЭЦППодразделениеИзменилось И (ИзменитьВладельцаСертификата ИЛИ ИзменитьРеквизитыПодключенияК1СОтчетности);
		НоваяСтрока.Группа		= "Владелец";
		НоваяСтрока.Префикс		= НСтр("ru = 'изменилось'");
		
		// Должность
		НоваяСтрока 			= ТаблицаПричинПереизданияСертификата.Добавить();
		НоваяСтрока.Реквизит	= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПДолжность");
		НоваяСтрока.Изменился	= ВладелецЭЦПДолжностьИзменилась И (ИзменитьВладельцаСертификата ИЛИ ИзменитьРеквизитыПодключенияК1СОтчетности);
		НоваяСтрока.Группа		= "Владелец";
		НоваяСтрока.Префикс		= НСтр("ru = 'изменилась'");
		
		// СНИЛС
		НоваяСтрока 			= ТаблицаПричинПереизданияСертификата.Добавить();
		НоваяСтрока.Реквизит	= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПСНИЛС");
		НоваяСтрока.Изменился	= ВладелецЭЦПСНИЛСИзменился И (ИзменитьВладельцаСертификата ИЛИ ИзменитьРеквизитыПодключенияК1СОтчетности);
		НоваяСтрока.Группа		= "Владелец";
		НоваяСтрока.Префикс		= НСтр("ru = 'изменилась'");
		
		// Продление сертификата
		
		Если СертификатДоступен Тогда
			ИзменившийсяРеквизит = НСтр("ru = 'инициировано продление сертификата'")
		Иначе
			ИзменившийсяРеквизит = НСтр("ru = 'сертификат недоступен'");
		КонецЕсли;
		
		НоваяСтрока 			= ТаблицаПричинПереизданияСертификата.Добавить();
		НоваяСтрока.Реквизит	= ИзменившийсяРеквизит;
		НоваяСтрока.Изменился	= ПродлитьСертификат ИЛИ НЕ СертификатДоступен;
		НоваяСтрока.Группа		= "Прочее";
		
		// Анализируем причины продления сертификата
		Отбор = Новый Структура;
		Отбор.Вставить("Изменился", Истина);
		Отбор.Вставить("Группа", 	"Прочее");
		
		СформироватьТекстПричиныПереизданияСертификата(Отбор, , Ложь);

		// Анализируем реквизиты организации
		Отбор = Новый Структура;
		Отбор.Вставить("Изменился", Истина);
		Отбор.Вставить("Группа", 	"Организация");
		
		СформироватьТекстПричиныПереизданияСертификата(Отбор, НСтр("ru = 'организации'"));
		
		// Анализируем реквизиты владельца
		
		// Для предотвращение ошибки вида, когда выводится
		// "Изменился владелец ЭП сотрудника-владельца ЭП"
		// Должно выводиться просто: "Изменился владелец ЭП".
		Отбор = Новый Структура;
		Отбор.Вставить("Изменился", Истина);
		Отбор.Вставить("Группа", 	"Владелец");
		ОтобранныеСтроки = ТаблицаПричинПереизданияСертификата.НайтиСтроки(Отбор);
		
		ИзменилсяТолькоВладелец = ВладелецЭЦПИзменился 
			И ИзменитьВладельцаСертификата
			И ОтобранныеСтроки.Количество() = 1;
		
		Если ИзменилсяТолькоВладелец Тогда
			Постфикс = "";
		Иначе
			Постфикс = НСтр("ru = 'сотрудника-владельца ЭП'");
		КонецЕсли;
		
		Отбор = Новый Структура;
		Отбор.Вставить("Изменился", Истина);
		Отбор.Вставить("Группа", 	"Владелец");
		
		СформироватьТекстПричиныПереизданияСертификата(Отбор, Постфикс);
		
		ЗаменитьЗапятуюНаИВСтроке(ПричиныПереизданияСертификата);
		
		// Формируем итоговую фразу (множественное или единственное число)
		ПричиныПереизданияСертификата = НСтр("ru = 'Причины переиздания сертификата: '") + ПричиныПереизданияСертификата;
		
	ИначеЕсли ПереиздатьСертификат = 1 Тогда
		
		Если СертификатДоступен Тогда
			ПричиныПереизданияСертификата = НСтр("ru = 'Причины переиздания сертификата: принудительное переиздание сертификата'");
		Иначе
			ПричиныПереизданияСертификата = НСтр("ru = 'Причины переиздания сертификата: сертификат недоступен'");
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьТекстПричиныПереизданияСертификата(Отбор, Постфикс = "", ТребуетсяПрефикс = Истина)
	
	ОтобранныеСтроки = ТаблицаПричинПереизданияСертификата.НайтиСтроки(Отбор);
	
	Если ОтобранныеСтроки.Количество() > 0 Тогда
		
		// %1% по завершению формирования фразы будет заменен на запятую или "и"
		Если ПричиныПереизданияСертификата <> "" Тогда
			ПричиныПереизданияСертификата = ПричиныПереизданияСертификата + "%1";
		КонецЕсли;
		
		// Собираем изменившиеся реквизиты в одну строку
		Текст = "";
		Для каждого Строка Из ОтобранныеСтроки Цикл
			ДобавитьТекст(
				Строка.Реквизит, 
				Строка.Изменился,
				Текст);
		КонецЦикла;
		
		// Добавляем префикс перед изменившимися реквизитами. Например, с префиксом "изменился" фраза будет выглядеть так:
		// "изменился ИНН, КПП и ОГРН".
		// При этом, префикс нужен только перед первым реквизитом, перед остальными (КПП и ОГРН) префикс не требуется.
		// Префикс не нужен, например, если изменившийся реквизит выглядит как "продление сертификата"
		Если ОтобранныеСтроки[0].Префикс = "" Тогда
			ПричиныПереизданияСертификата = ПричиныПереизданияСертификата + Текст;
		Иначе
			ПричиныПереизданияСертификата = ПричиныПереизданияСертификата + ОтобранныеСтроки[0].Префикс + " " + Текст;
		КонецЕсли;
		
		// Добавляем постфикс.
		// Например, если постфикс "организации", то фраза будет выглядеть как
		// "изменился ИНН, КПП и ОГРН организации"
		ПричиныПереизданияСертификата = ПричиныПереизданияСертификата 
			+ ?(Постфикс = "", "", " " + Постфикс);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФлажкиВыбранныхДействийИзПредыдущегоЗаявления()
	
	ТекстСообщения = "";
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО(ТекстСообщения);
	
	СписокИзмененныхРеквизитов = Реквизит.ИзменившиесяРеквизитыВторичногоЗаявления;
	
 	ИзменитьРеквизитыПодключенияК1СОтчетности = КонтекстЭДОСервер.БылиИзменененыРеквизитыПодключенияК1СОтчетности(
		Реквизит.ИзменившиесяРеквизитыВторичногоЗаявления);
		
	ПродлитьСертификат = КонтекстЭДОСервер.ЭтотПараметрИзменился(СписокИзмененныхРеквизитов, 
		Перечисления.ПараметрыПодключенияК1СОтчетности.ПродлениеАбонентскогоСертификата);
		
	ИзменитьВладельцаСертификата = КонтекстЭДОСервер.ЭтотПараметрИзменился(СписокИзмененныхРеквизитов, 
		Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦП);
		
	ПродлитьЛицензиюНа1СОтчетность = КонтекстЭДОСервер.ЭтотПараметрИзменился(СписокИзмененныхРеквизитов, 
		Перечисления.ПараметрыПодключенияК1СОтчетности.ПродлениеЛицензии);
		
	ИзменитьМобильныйТелефон = КонтекстЭДОСервер.ЭтотПараметрИзменился(СписокИзмененныхРеквизитов, 
		Перечисления.ПараметрыПодключенияК1СОтчетности.ТелефонМобильный);
		
	ПереиздатьСертификат = ?(КонтекстЭДОСервер.ЭтотПараметрИзменился(СписокИзмененныхРеквизитов, 
		Перечисления.ПараметрыПодключенияК1СОтчетности.ПереизданиеСертификата), 2, 0);
		
	// Состав контролирующих органов
	ИзменитьСоставКонтролирующихОрганов = КонтекстЭДОСервер.БылИзмененСоставКонтролирующихОрганов(СписокИзмененныхРеквизитов);
	
КОнецПроцедуры

&НаКлиенте
Процедура УстановитьГалкуИзменитьРеквизитыПодключенияК1СОтчетности()
	
	ПроверитьИзменилисьЛиРеквизитыПодключенияК1СОтчетности();
		
	Если ИзменилисьРеквизитыПодключенияК1СОтчетности Тогда
		ИзменитьРеквизитыПодключенияК1СОтчетности = ИзменилисьРеквизитыПодключенияК1СОтчетности;
	КонецЕсли;
	
КОнецПроцедуры

&НаКлиенте
Процедура ПроверитьИзменилисьЛиРеквизитыПодключенияК1СОтчетности()
	
	ИзменилисьРеквизитыПодключенияК1СОтчетности = ИзменилисьРеквизитыОрганизации() ИЛИ ИзменилисьРеквизитыВладельцаЭЦП() ИЛИ ИзменилисьПрочиеРеквизиты();
	
КонецПроцедуры

&НаКлиенте
Функция ИзменилисьПрочиеРеквизиты()
	
	Возврат  НомерОсновнойПоставки1сИзменился ИЛИ ТелефонМобильныйИзменился;
	
КонецФункции

&НаКлиенте
Функция ИзменилисьРеквизитыОрганизации()
	
	Возврат КраткоеНаименованиеИзменилось ИЛИ ПолноеНаименованиеИзменилось ИЛИ КППИзменился ИЛИ ОГРНИзменился
		ИЛИ РегНомерПФРИзменился ИЛИ РегНомерФССИзменился ИЛИ КодРегионаФСРАРИзменился	ИЛИ ЭлектроннаяПочтаИзменилась
		ИЛИ ТелефонОсновнойИзменился ИЛИ ТелефонДополнительныйИзменился;
	
КонецФункции
	
&НаКлиенте
Функция ИзменилисьРеквизитыВладельцаЭЦП()
	
	Возврат ВладелецЭЦППодразделениеИзменилось ИЛИ ВладелецЭЦПДолжностьИзменилась ИЛИ ВладелецЭЦПСНИЛСИзменился;
	
КонецФункции	

&НаКлиенте
Процедура УстановитьГалкуИзменитьВладельцаСертификата()
	
	Если ВладелецЭЦПИсходный = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка") Тогда
		// Если в базе не найден владелец - значит говорим, что он не изменился
		ВладелецЭЦПИзменился = Ложь;
	Иначе
		ПроверитьИзменилсяЛиВладелецЭЦП();
		
		// Проверяем, изменились ли данные владельца ЭЦП только если нашли владельца ЭЦП в базе
		Если (ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ВладелецЭЦППодразделение) 
			<> ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ВладелецЭЦППодразделениеИсходное)
			//ИЛИ ВладелецЭЦПСНИЛС <> ВладелецЭЦПСНИЛСИсходный - СНИЛС не сравниваем
			ИЛИ ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ВладелецЭЦПДолжность) 
			<> ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ВладелецЭЦПДолжностьИсходная))
			И ЗначениеЗаполнено(ВладелецЭЦП) Тогда
			ВладелецЭЦПИзменился = Истина;
		КонецЕсли;
		
	КонецЕсли;

	Если ВладелецЭЦПИзменился Тогда
		ИзменитьВладельцаСертификата = ВладелецЭЦПИзменился;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьИзменилсяЛиВладелецЭЦП()
	
	ВладелецЭЦПИзменился = (ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ВладелецЭЦПФамилия)
			<> ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ВладелецЭЦПФамилияИсходный) 
		ИЛИ ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ВладелецЭЦПИмя)
			<> ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ВладелецЭЦПИмяИсходный) 
		ИЛИ ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ВладелецЭЦПОтчество) 
			<> ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ВладелецЭЦПОтчествоИсходный)) 
		ИЛИ НЕ ЗначениеЗаполнено(ВладелецЭЦП);

КонецПроцедуры

&НаКлиенте 
Процедура ПроверитьИзменилсяЛиСоставКонтролирующихОрганов()
	
	ИзменилсяСоставКонтролирующихОрганов = СдаватьВФНС И КодыФНСИзменились ИЛИ СдаватьВПФР И КодПФРИзменился 
		ИЛИ СдаватьВРосстат И КодРосстатаИзменился;
		
КонецПроцедуры
	
&НаКлиенте
Процедура УстановитьГалкуИзменитьСоставКонтролирующихОрганов()
	
	ПроверитьИзменилсяЛиСоставКонтролирующихОрганов();

	Если ИзменилсяСоставКонтролирующихОрганов Тогда
		ИзменитьСоставКонтролирующихОрганов = ИзменилсяСоставКонтролирующихОрганов;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СдаватьВРПНПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	СдаватьВРПН = Результат;
		
	СравнитьТекущиеРеквизитыПодключенияСИсходными();
	ОформитьПодсказкуДляГалкиИзменитьРеквизитыПодключенияК1СОтчетности();
	
	УстановитьГалкуПереиздатьСертификатИОпределитьПричиныПереиздания();

КонецПроцедуры

#Область РаботаСВладельцемЭЦП

&НаКлиенте
Процедура ПолучитьВидИсполнителя(ТипВладелецаЭЦП)
	
	ВыборДиректора		= 0;
	ВыборБухгалтера		= 0;
	ВыборИсполнителя	= 0;
	
	Если ТипВладелецаЭЦП = 1 Тогда
		ВыборДиректора = 1;
	ИначеЕсли ТипВладелецаЭЦП = 2 Тогда
		ВыборБухгалтера = 1;
	ИначеЕсли ТипВладелецаЭЦП = 3 Тогда
		ВыборИсполнителя = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеСотрудника(ТипЗаполнения, ПеричитатьДанныеОСотруднике = Истина)
	
	Если ТипЗаполнения = 0 ИЛИ НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыборДиректора = 1 Тогда
		ВладелецЭЦП = Руководитель;
	КонецЕсли;	
	Если ВыборБухгалтера = 1 Тогда
		ВладелецЭЦП = ГлБухгалтер;
	КонецЕсли;
	Если ВыборИсполнителя = 1 Тогда
		ВладелецЭЦП = СотрудникВыбор;
	КонецЕсли;
	
	ОформитьПодсказкуДляГалкиИзменитьВладельцаСертификата();
	
	Если НЕ ЗначениеЗаполнено(ВладелецЭЦП) Тогда
		Возврат;
	КонецЕсли;

	// Обновляем данные о сотрудниках
	Если ПеричитатьДанныеОСотруднике Тогда
		КонтекстЭДОКлиент.ЗаполнитьДанные(СтруктураРеквизитов);
		ДанныеЗаполнения = КонтекстЭДОКлиент.ПолучитьДанныеЗаполнения(СтруктураРеквизитов);
		Если ДанныеЗаполнения.Свойство("СтруктураДанныхОрганизации") Тогда
			ДанныеОрганизации = ДанныеЗаполнения.СтруктураДанныхОрганизации;
		КонецЕсли;
	КонецЕсли;
	
 	ДанныеОрганизации.Вставить("Организация", Организация);
 
	ДанныеСотрудника = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ПолучитьДанныеСотрудника(ТипЗаполнения, ДанныеОрганизации, ВладелецЭЦП);
	
	ВладелецЭЦПИмя					= ДанныеСотрудника.ФИО.Имя;
	ВладелецЭЦПФамилия				= ДанныеСотрудника.ФИО.Фамилия;
	ВладелецЭЦПОтчество				= ДанныеСотрудника.ФИО.Отчество;
	ВладелецЭЦПВидДокумента			= ДанныеСотрудника.ВидДокумента;
	ВладелецЭЦПСерияДокумента		= ДанныеСотрудника.Серия;
	ВладелецЭЦПНомерДокумента		= ДанныеСотрудника.Номер;
	ВладелецЭЦПДатаВыдачиДокумента	= ДанныеСотрудника.ДатаВыдачи;
	ВладелецЭЦПКемВыданДокумент		= ДанныеСотрудника.КемВыдан;
	ВладелецЭЦПДолжность			= ДанныеСотрудника.Должность;
	ВладелецЭЦППодразделение		= ДанныеСотрудника.Подразделение;
	ВладелецЭЦПСНИЛС				= ДанныеСотрудника.СНИЛС;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОжиданияОбновитьДанныеРуководителя()
	
	ОтключитьОбработчикОжидания("ОбработкаОжиданияОбновитьДанныеРуководителя");
	Руководитель = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.Руководитель(Организация);
	УстановитьНовогоВладельцаЭЦП(1);
	
	// Обновляем данные на второй закладке только если мы находимся на этой закладке
	Если Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.ЗаполнениеЗаявления Тогда
		СформироватьТаблицуДляПодтвержденияДанных();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОжиданияОбновитьДанныеГлБухгалтера()
	
	ОтключитьОбработчикОжидания("ОбработкаОжиданияОбновитьДанныеГлБухгалтера");
	ГлБухгалтер = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ГлБухгалтер(Организация);
	УстановитьНовогоВладельцаЭЦП(2);
	
	// Обновляем данные на второй закладке только если мы находимся на этой закладке
	Если Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.ЗаполнениеЗаявления Тогда
		СформироватьТаблицуДляПодтвержденияДанных();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНовогоВладельцаЭЦП(ТипЗаполнения)

	// Заменяем владельца ЭЦП на нового 
	ОчиститьДанныеСотрудника(Истина);
	
	Если ТипЗаполнения = 1 Тогда 
		ВыборБухгалтера  = 0;
		ВыборДиректора   = 1;
		ВыборИсполнителя = 0;
	ИначеЕсли ТипЗаполнения = 2 Тогда 
		ВыборБухгалтера  = 1;
		ВыборДиректора   = 0;
		ВыборИсполнителя = 0;
	ИначеЕсли ТипЗаполнения = 3 Тогда
		ВыборБухгалтера  = 0;
		ВыборДиректора   = 0;
		ВыборИсполнителя = 1;
	КонецЕсли;
	
	ЗаполнитьДанныеСотрудника(ТипЗаполнения);
	ПроверитьИзменилсяЛиВладелецЭЦП();
	ОформитьПодсказкуДляГалкиИзменитьВладельцаСертификата();
	
	// После изменения владельца ЭЦП выполняем сравнение старых и новый значений
	СравнитьТекущиеРеквизитыПодключенияСИсходными();
	ОформитьПодсказкуДляГалкиИзменитьРеквизитыПодключенияК1СОтчетности();
	
	// Если Владелец ЭЦП изменился, устанавливаем галку "Переиздать сертификат"
	УстановитьГалкуПереиздатьСертификатИОпределитьПричиныПереиздания();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРуководителя()
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ОткрытьФормуРуководителя(Организация);
	ПодключитьОбработчикОжидания("ОбработкаОжиданияОбновитьДанныеРуководителя",1);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуГлБухгалтера()
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ОткрытьФормуГлБухгалтера(Организация);
	ПодключитьОбработчикОжидания("ОбработкаОжиданияОбновитьДанныеГлБухгалтера",1);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораВладельцаЭЦП()
	
	Если ВыборДиректора = 1 Тогда
		ОткрытьФормуРуководителя();
	ИначеЕсли ВыборБухгалтера = 1 Тогда
		ОткрытьФормуГлБухгалтера();
	ИначеЕсли ВыборИсполнителя = 1 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораВладельцаЭЦПЗавершение", ЭтотОбъект);
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ПолучитьИсполнителя(Организация, СотрудникВыбор, ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораВладельцаЭЦПЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда 
		СотрудникВыбор = Результат;
		УстановитьНовогоВладельцаЭЦП(3);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Очистка

&НаКлиенте
Процедура ОчиститьРеквизитыФормы() 
	
	АдресЮридический = "";
	
	СотрудникВыбор = Неопределено;
	
	ИНН = "";
	
	КПП = "";
	КППИзменился = Ложь;
	
	ОГРН = "";
	ОГРНИзменился = Ложь;
	
	КраткоеНаименование = "";
	КраткоеНаименованиеИзменилось = Ложь;
	
	ПолноеНаименование = "";
	ПолноеНаименованиеИзменилось = Ложь;
	
	//ТелефонДополнительный = "";
	ТелефонДополнительныйИзменился = Ложь;
	
	ТелефонОсновной = "";
	ТелефонОсновнойИзменился = Ложь;
	
	ЭлектроннаяПочта = "";
	ЭлектроннаяПочтаИзменилась = Ложь;
	
	РегНомерПФР = "";
	РегНомерПФРИзменился = Ложь;
	
	РегНомерФСС = "";
	РегНомерФССИзменился = Ложь;
	
	ПризнакОбособленногоПодразделения = Ложь;
	
	СотрудникВыбор = "";
	СотрудникВыборИсходный = "";
	
	ОчиститьДанныеСотрудника();
	
	ГлБухгалтер  = Неопределено;
	Руководитель = Неопределено;
	
	// сбрасываем все галки на первом шаге
	СброситьВсеФлажки();
	СброситьНаправленияСдачиОтчетностиКлиент();
	
	ОтпечатокСертификата = "";
	СертификатДоступен   = "";
	ПричиныПереизданияСертификата = "";

КонецПроцедуры

&НаСервере
Процедура СброситьНаправленияСдачиОтчетности() 
	
	СдаватьВФНС 		= Ложь; 
	СдаватьВПФР 		= Ложь;
	КодПФР			 	= "";
	СдаватьВФСС 		= Ложь;
	СдаватьВРосстат 	= Ложь;
	КодРосстата 		= "";
	СдаватьВФСРАР 		= Ложь;
	КодРегионаФСРАР 	= "";
	СдачатьВРПН			= Ложь;
	Получатели.Очистить();
	
	СдаватьВФНСИзменился 	= Ложь; 
	СдаватьВПФРИзменился 	= Ложь;
	КодПФРИзменился 		= Ложь;
	СдаватьВФССИзменился 	= Ложь;
	СдаватьВРосстатИзменился = Ложь;
	КодРосстатаИзменился 	= Ложь;
	СдаватьВФСРАРИзменился 	= Ложь;
	КодРегионаФСРАРИзменился = Ложь;
	СдаватьВРПНИзменился 	= Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьНаправленияСдачиОтчетностиКлиент() 
	
	СдаватьВФНС 		= Ложь; 
	СдаватьВПФР 		= Ложь;
	КодПФР			 	= "";
	СдаватьВФСС 		= Ложь;
	СдаватьВРосстат 	= Ложь;
	КодРосстата 		= "";
	СдаватьВФСРАР 		= Ложь;
	КодРегионаФСРАР 	= "";
	СдаватьВРПН 		= Ложь;
	Получатели.Очистить();
	
	СдаватьВФНСИзменился 	= Ложь; 
	СдаватьВПФРИзменился 	= Ложь;
	КодПФРИзменился 		= Ложь;
	СдаватьВФССИзменился 	= Ложь;
	СдаватьВРосстатИзменился = Ложь;
	КодРосстатаИзменился 	= Ложь;
	СдаватьВФСРАРИзменился 	= Ложь;
	КодРегионаФСРАРИзменился = Ложь;
	СдаватьВРПНИзменился 	= Ложь;
	
КонецПроцедуры

&НаСервере
Процедура СброситьВсеФлажкиСервер()
	
   	ПродлитьСертификат 							= Ложь;
	ИзменитьВладельцаСертификата 				= Ложь;
	ПродлитьЛицензиюНа1СОтчетность 				= Ложь;
	ИзменитьСоставКонтролирующихОрганов 		= Ложь;
	ИзменитьРеквизитыПодключенияК1СОтчетности 	= Ложь;
	ИзменитьМобильныйТелефон 					= Ложь;
	ПереиздатьСертификат 						= 0;
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьВсеФлажки()
	
   	ПродлитьСертификат 							= Ложь;
	ИзменитьВладельцаСертификата 				= Ложь;
	ПродлитьЛицензиюНа1СОтчетность 				= Ложь;
	ИзменитьСоставКонтролирующихОрганов 		= Ложь;
	ИзменитьРеквизитыПодключенияК1СОтчетности 	= Ложь;
	ИзменитьМобильныйТелефон 					= Ложь;
	ПереиздатьСертификат 						= 0;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ОчиститьИсходныеЗначения() 
	
	КППИсходный 				= "";
	ОГРНИсходный 				= "";
	КраткоеНаименованиеИсходное = "";
	ПолноеНаименованиеИсходное 	= "";
	ЭлектроннаяПочтаИсходная 	= "";
	РегНомерПФРИсходный 		= "";
	РегНомерФССИсходный 		= "";
	
	СдаватьВФНСИсходный 		= Ложь; 
	СдаватьВПФРИсходный 		= Ложь;
	КодПФРИсходный 				= "";
	СдаватьВФССИсходный 		= Ложь;
	СдаватьВРосстатИсходный 	= Ложь;
	КодРосстатаИсходный 		= "";
	СдаватьВФСРАРИсходный 		= Ложь;
	КодРегионаФСРАРИсходный		= "";
	СдаватьВРПНИсходный 		= Ложь;
	Получатели.Очистить();
	
	СотрудникВыборИсходный 				= "";
	ВладелецЭЦППодразделениеИсходное 	= "";
	ВладелецЭЦПДолжностьИсходная 		= "";
	ВладелецЭЦПФамилияИсходный 			= "";
	ВладелецЭЦПИмяИсходный 				= "";
	ВладелецЭЦПОтчествоИсходный 		= "";
	ВладелецЭЦПСНИЛСИсходный			= "";

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДанныеСотрудника(Очистить = Ложь)
	
	Если ЗначениеЗаполнено(Реквизит) И НЕ Очистить Тогда
		Возврат;
	КонецЕсли;
	
	ВладелецЭЦП = Неопределено;
	
	ВладелецЭЦППодразделение = "";
	ВладелецЭЦППодразделениеИзменилось = Ложь;
	
	ВладелецЭЦПДолжность = "";
	ВладелецЭЦПДолжностьИзменилась = Ложь;
	
	ВладелецЭЦПФамилия = "";
	ВладелецЭЦПИмя = "";
	ВладелецЭЦПОтчество = "";
	
	ВладелецЭЦПСНИЛС = "";
	ВладелецЭЦПСНИЛСИзменился = Ложь;
	
	ВладелецЭЦПВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ПустаяСсылка");
	ВладелецЭЦПСерияДокумента = "";
	ВладелецЭЦПНомерДокумента = "";
	ВладелецЭЦПДатаВыдачиДокумента = "";
	ВладелецЭЦПКемВыданДокумент = "";
		
КонецПроцедуры

#КонецОбласти

#Область НаправленияСдачиОтчетности

&НаКлиенте
Процедура СделатьРеквизитыРавнымиИсходным()

	СделатьНаправленияСдачиОтчетностиРавнымиИсходным();
	
	// Если мобильный телефон не хранится в базе, то приравниваем его исходному
	Если РеквизитыНеХранящиесяВБазе.Найти(
			ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ТелефонМобильный")) = Неопределено Тогда
		ТелефонМобильный = ТелефонМобильныйИсходный;
	КонецЕсли;
	
	// Если основной телефон не хранится в базе, то приравниваем его исходному
	Если РеквизитыНеХранящиесяВБазе.Найти(
			ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ТелефонОсновной")) <> Неопределено Тогда
		ТелефонОсновной = ТелефонОсновнойИсходный;
	КонецЕсли;
	
	// Если дополнительный телефон не хранится в базе, то приравниваем его исходному
	Если РеквизитыНеХранящиесяВБазе.Найти(
			ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ТелефонДополнительный")) <> Неопределено Тогда
		ТелефонДополнительный = ТелефонДополнительныйИсходный;
	КонецЕсли;
	
	// Если электронная не хранится в базе, то приравниваем ее исходному значению
	Если РеквизитыНеХранящиесяВБазе.Найти(
			ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ЭлектроннаяПочта")) <> Неопределено Тогда
		ЭлектроннаяПочта = ЭлектроннаяПочтаИсходная;
	КонецЕсли;
	
	// Если СНИЛС не хранится в базе, то приравниваем его к исходному
	Если РеквизитыНеХранящиесяВБазе.Найти(
			ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПСНИЛС")) <> Неопределено Тогда
		ВладелецЭЦПСНИЛС = ВладелецЭЦПСНИЛСИсходный;
	КонецЕсли;
	
	ПродлитьСертификат = ПродлитьСертификатИсходный;
	
	ПродлитьЛицензиюНа1СОтчетность = ПродлитьЛицензиюНа1СОтчетностьИсходный;
	
	// Регистрационный номер программы 
	НомерОсновнойПоставки1с = НомерОсновнойПоставки1сИсходный;
	
КонецПроцедуры

&НаКлиенте
Процедура СделатьНаправленияСдачиОтчетностиРавнымиИсходным()

	СдаватьВФНС = Ложь;
	СдаватьВПФР = Ложь;
	СдаватьВФСС = Ложь;
	СдаватьВФСРАР = Ложь;
	СдаватьВРПН = Ложь;
	СдаватьВРосстат = Ложь;
	Получатели.Очистить();
	
	// ФНС
	СдаватьВФНС = СдаватьВФНСИсходный;
	СкопироватьИзОднойТаблицыВДругую(ПолучателиИсходные, Получатели);
	КодыФНСПрописью = КодыФНСПрописьюИсходные;
	
	// ПФР
	СдаватьВПФР = СдаватьВПФРИсходный;
	КодПФР = КодПФР();
	
	// ФСС
	СдаватьВФСС = СдаватьВФССИсходный;
	
	// Росстат
	СдаватьВРосстат = СдаватьВРосстатИсходный;
	КодРосстата = КодРосстата();

	// ФСРАР
	СдаватьВФСРАР = СдаватьВФСРАРИсходный;
	
	// РПН
	СдаватьВРПН = СдаватьВРПНИсходный;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьИзОднойТаблицыВДругую(ТаблицаИсточник, ТаблицаПриемник)
	ТаблицаПриемник.Очистить();
	Для Каждого СтрокаНаправлений Из ТаблицаИсточник Цикл
		НоваяСтрока = ТаблицаПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНаправлений); 
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция КодыФНСПрописьюСервер(Знач ТаблицаКодовФНС)

	Результат = "";
	КоличествоКодовФНС = ТаблицаКодовФНС.Количество();
	Если КоличествоКодовФНС = 1 Тогда
		Результат = ТаблицаКодовФНС[0].КодПолучателя + ?(ТаблицаКодовФНС[0].КПП = "","" ,"-") + ТаблицаКодовФНС[0].КПП;
	ИначеЕсли КоличествоКодовФНС > 1 Тогда
		Результат = НСтр("ru = 'Коды ФНС (%1)'");
		Результат = СтрЗаменить(Результат, "%1", Строка(КоличествоКодовФНС));
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Функция КодыФНСПрописьюКлиент(Знач ТаблицаКодовФНС)

	Результат = "";
	КоличествоКодовФНС = ТаблицаКодовФНС.Количество();
	Если КоличествоКодовФНС = 1 Тогда
		Результат = ТаблицаКодовФНС[0].КодПолучателя + ?(ТаблицаКодовФНС[0].КПП = "","" ,"-") + ТаблицаКодовФНС[0].КПП;
	ИначеЕсли КоличествоКодовФНС > 1 Тогда
		Результат = НСтр("ru = 'Коды ФНС (%1)'");
		Результат = СтрЗаменить(Результат, "%1", Строка(КоличествоКодовФНС));
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаКлиенте 
Функция КодПФР(РеквизитыОрганизации = Неопределено)
	
	Если РеквизитыОрганизации = Неопределено Тогда 
		РеквизитыОрганизации = ДанныеОрганизации;
	КонецЕсли;
	
	ПолученыйКодПФР = "";
	
	Если ПустаяСтрока(РеквизитыОрганизации.КодОрганаПФР) ИЛИ СтрДлина(РеквизитыОрганизации.КодОрганаПФР) < 7 Тогда
		ПолученыйКодПФР = Лев(РеквизитыОрганизации.КодОрганаПФР,7); 
	Иначе
		ПолученыйКодПФР = РеквизитыОрганизации.КодОрганаПФР;
	КонецЕсли;
	
	Возврат ПолученыйКодПФР;
	
КонецФункции

&НаКлиенте
Функция КодРосстата(РеквизитыОрганизации = Неопределено)
	
	Если РеквизитыОрганизации = Неопределено Тогда 
		РеквизитыОрганизации = ДанныеОрганизации;
	КонецЕсли;
	
	Возврат РеквизитыОрганизации.КодОрганаФСГС;
	
КонецФункции

#КонецОбласти

#Область Навигация

&НаКлиенте
Процедура ПоказатьСледующуюСтраницу()
	
	ТекущаяСтраница = Элементы.ОсновнаяПанель.ТекущаяСтраница;
	ИндексТекущейСтраницы = Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.Индекс(ТекущаяСтраница);
	
	Пока Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.Индекс(ТекущаяСтраница) < Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.Количество() - 1 Цикл		
		Страница = Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.Получить(Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.Индекс(ТекущаяСтраница) + 1);		
		Если Страница.Видимость Тогда
			Элементы.ОсновнаяПанель.ТекущаяСтраница = Страница;
			Прервать;
		Иначе
			ТекущаяСтраница = Страница;
		КонецЕсли;		
	КонецЦикла;	
	
	УправлениеКнопкамиНавигации();
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеКнопкамиНавигации()
	
	ТекущаяСтраница = Элементы.ОсновнаяПанель.ТекущаяСтраница;
	ВсегоСтраниц 	= Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.Количество();
	
	КнопкаДалее	  = Элементы.Далее;
	КнопкаНазад   = Элементы.Назад;
	КнопкаЗакрыть = Элементы.Закрыть;
	
	КнопкаДалее.Видимость 	= Истина;
	КнопкаНазад.Видимость 	= Истина;
	КнопкаЗакрыть.Видимость = Истина;
	
	Если ТекущаяСтраница = Элементы.ВыборДействия Тогда
		// Шаг 1
		
		УстановитьСвойстваКнопки(КнопкаНазад, 	"<  Назад", Ложь,	Ложь);
		УстановитьСвойстваКнопки(КнопкаДалее, 	"Далее  >", Истина,	Истина);
		УстановитьСвойстваКнопки(КнопкаЗакрыть, "Отмена", 	Истина,	Ложь);
		
	ИначеЕсли ТекущаяСтраница = Элементы.ИзмененияВСпособахДоставкиПаролей Тогда
		// Шаг 2 (если ЭП в облаке)
		
		// если ни один флажек не отмечен - сообщаем об этом пользователю
		ВыбранноПунктов =  Число(ПереиздатьСертификат) + ИзменитьВладельцаСертификата + ПродлитьЛицензиюНа1СОтчетность
			+ ИзменитьСоставКонтролирующихОрганов + ИзменитьРеквизитыПодключенияК1СОтчетности
			+ ПродлитьСертификат + ИзменитьМобильныйТелефон;
			
			Если ВыбранноПунктов > 0 Тогда
				УстановитьСвойстваКнопки(КнопкаНазад, 	"<  Назад", Истина,	Ложь);
				УстановитьСвойстваКнопки(КнопкаДалее, 	"Далее >", Истина, Истина);
				УстановитьСвойстваКнопки(КнопкаЗакрыть, "Отмена", 	Истина,	Ложь);
			Иначе
				УстановитьСвойстваКнопки(КнопкаНазад, 	"<  Назад", Истина,	Ложь);
				УстановитьСвойстваКнопки(КнопкаДалее, 	"Далее >",	Ложь,	Ложь);
				УстановитьСвойстваКнопки(КнопкаЗакрыть, "Закрыть", 	Истина,	Истина);
				ПрограммноеЗакрытие = Истина;
			КонецЕсли;
			
	ИначеЕсли ТекущаяСтраница = Элементы.ЗаполнениеЗаявления Тогда
		// Шаг 2
		
		УстановитьСвойстваКнопки(КнопкаНазад, 	"<  Назад", Истина,	Ложь);
		УстановитьСвойстваКнопки(КнопкаДалее, 	"Отправить заявление", Истина,	Истина);
		УстановитьСвойстваКнопки(КнопкаЗакрыть, "Отмена", 	Истина,	Ложь);
		
	ИначеЕсли ТекущаяСтраница = Элементы.ИнструкцияПоСозданиюКлючаЭЦП Тогда
		// Шаг 3
		
		УстановитьСвойстваКнопки(КнопкаНазад, 	"<  Назад", Истина,	Ложь);
		УстановитьСвойстваКнопки(КнопкаДалее, 	"Создать ключ электронной подписи", Истина,	Истина);
		УстановитьСвойстваКнопки(КнопкаЗакрыть, "Отмена", 	Истина,	Ложь);
		
	ИначеЕсли ТекущаяСтраница = Элементы.ПолучениеРезультатаОтправкиЗаявления Тогда
		// Шаг 4
		
		//последняя закладка
		Если ДокументЗаявление.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отправлено") Тогда 
			
			УстановитьСвойстваКнопки(КнопкаНазад, 	"<  Назад", Ложь,	Ложь);
			УстановитьСвойстваКнопки(КнопкаДалее, 	"Далее >",	Ложь,	Ложь);
			УстановитьСвойстваКнопки(КнопкаЗакрыть, "Закрыть", 	Истина,	Истина);
			ПрограммноеЗакрытие 	= Истина;
			
		ИначеЕсли ДокументЗаявление.Статус =  ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Подготовлено") Тогда
			
			УстановитьСвойстваКнопки(КнопкаНазад, 	"<  Назад", Ложь,	Ложь);
			УстановитьСвойстваКнопки(КнопкаДалее, 	"Отправить заявление еще раз",	Истина,	Истина);
			УстановитьСвойстваКнопки(КнопкаЗакрыть, "Закрыть", 	Истина,	Ложь);
			
		ИначеЕсли ДокументЗаявление.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отклонено") Тогда 	
			
			УстановитьСвойстваКнопки(КнопкаНазад, 	"<  Назад", Ложь,	Ложь);
			УстановитьСвойстваКнопки(КнопкаДалее, 	"Подготовить новое заявление",	Истина,	Истина);
			УстановитьСвойстваКнопки(КнопкаЗакрыть, "Закрыть", 	Истина,	Ложь);
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСвойстваКнопки(Кнопка, Заголовок, Видимость, КнопкаПоУмолчанию)
	
	 Кнопка.Заголовок 			= Заголовок; 
	 Кнопка.Видимость 			= Видимость;
	 Кнопка.КнопкаПоУмолчанию 	= КнопкаПоУмолчанию;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПредыдущуюСтраницу()
	
	ТекущаяСтраница 		= Элементы.ОсновнаяПанель.ТекущаяСтраница;
	ИндексТекущейСтраницы 	= Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.Индекс(ТекущаяСтраница);
	
	Если ИндексТекущейСтраницы > 0 Тогда
		
		Индекс = ИндексТекущейСтраницы;
		Пока Индекс > 0 Цикл
			Индекс = Индекс - 1;
			Страница = Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.Получить(Индекс);
			Если Страница.Видимость Тогда		
		Элементы.ОсновнаяПанель.ТекущаяСтраница = Страница;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	УправлениеКнопкамиНавигации();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНаСтраницеРезультатаОтправки()
	
	Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.ПолучениеРезультатаОтправкиЗаявления;
    ПанельРезультатов = Элементы.ГруппаРезультатовОтправки;
	// Заявление подготовилось
	Если  ДокументЗаявление.Статус =  ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Подготовлено") Тогда 
		ПанельРезультатов.ТекущаяСтраница = ПанельРезультатов.ПодчиненныеЭлементы.ГруппаНеОтправлено;
	// Заявление отправилось
	ИначеЕсли ДокументЗаявление.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отправлено") Тогда 
		ПанельРезультатов.ТекущаяСтраница = ПанельРезультатов.ПодчиненныеЭлементы.ГруппаОтправленоИПринято;
		ПрограммноеЗакрытие = Истина;
	// Заявление отклонил сервер из-за ошибок
	ИначеЕсли ДокументЗаявление.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отклонено") Тогда 
		ПанельРезультатов.ТекущаяСтраница = ПанельРезультатов.ПодчиненныеЭлементы.ГруппаОтправленоИОтклонено;
		ПрограммноеЗакрытие = Истина;
	Иначе // заявление подготовилось, но не отправилось
		ПанельРезультатов.ТекущаяСтраница = ПанельРезультатов.ПодчиненныеЭлементы.ГруппаНеОтправлено;
		ПрограммноеЗакрытие = Истина;
	КонецЕсли;
	
	// Формируем текст заголовока
	Если Не ЭтоЭлектроннаяПодписьВМоделиСервиса Тогда
		Элементы.ПодсказкаПоРезультатам8.Заголовок = НСтр("ru='Что делать?
				|1. Попробуйте отправить заявление еще раз.
				|2. Проверьте, что отключен контроль учетных записей (UAC) в Windows.'");
		Если ВыборКриптопровайдера = 1 Тогда
			 Элементы.ПодсказкаПоРезультатам8.Заголовок = Элементы.ПодсказкаПоРезультатам8.Заголовок + Символы.ПС + 
			 	НСтр("ru='3. Проверьте, что VipNet зарегистрирован.'");
		КонецЕсли;
	КонецЕсли;
	
	ЭтаФорма.Активизировать();
	
КонецПроцедуры

#КонецОбласти

#Область Таблица

&НаКлиенте
Процедура ДобавитьЖелтыеСтроки()
	
	КоличествоСтрок = ТаблицаДанныхЗаявленияНаПодключение.Количество();
	КоличествоИзмененныхСтрок = ТаблицаДанныхЗаявленияНаПодключение.НайтиСтроки(Новый Структура("ЭтотПараметрИзменился", Истина)).Количество();
	
	СтрокаТаблицыПодтверждения = ДобавленнаяСтрокаВТаблицеПодтверждения("Изменяемые настройки подключения"); // заголовок
	ПорядковыйНомерСтроки = 0;
	СтрокаТаблицыПодтверждения.ПорядковыйНомерСтроки = 0;
	
	Для сч = 0 По КоличествоСтрок - 1 Цикл
		СтрокаТаблицаДанных = ТаблицаДанныхЗаявленияНаПодключение[сч];
		Если СтрокаТаблицаДанных.ЭтотПараметрИзменился Тогда
			ДобавленнаяСтрокаВТаблицеПодтверждения(СтрокаТаблицаДанных.ИзмененныйРеквизит, СтрокаТаблицаДанных.ЗначениеРеквизита, СтрокаТаблицаДанных.ЭтотПараметрИзменился, Истина);
		КонецЕсли;
		СтрокаТаблицаДанных.ПорядковыйНомерСтроки = СтрокаТаблицаДанных.ПорядковыйНомерСтроки + КоличествоИзмененныхСтрок + 1;
	КонецЦикла;
	
	СтрокаТаблицыПодтверждения = ДобавленнаяСтрокаВТаблицеПодтверждения(""); // заголовок
	ПорядковыйНомерСтроки = ПорядковыйНомерСтроки - 1;
	СтрокаТаблицыПодтверждения.ПорядковыйНомерСтроки = КоличествоИзмененныхСтрок + 1; 
	
	ТаблицаДанныхЗаявленияНаПодключение.Сортировать("ПорядковыйНомерСтроки");

КонецПроцедуры

&НаКлиенте
Функция ДобавленнаяСтрокаВТаблицеПодтверждения(
		ИзмененныйРеквизит,  
		ЗначениеРеквизита = "", 
		ЭтотПараметрИзменился = Ложь,
		ВыделятьСтрокуЖелтым = Ложь)
	
	НоваяСтрока 						= ТаблицаДанныхЗаявленияНаПодключение.Добавить();
	Если ТипЗнч(ИзмененныйРеквизит) = Тип("Строка") Тогда
		НоваяСтрока.НазваниеРеквизита = ИзмененныйРеквизит;
	Иначе
		НоваяСтрока.ИзмененныйРеквизит		= ИзмененныйРеквизит;
		НоваяСтрока.НазваниеРеквизита 		= Строка(ИзмененныйРеквизит);
	КонецЕсли;
	НоваяСтрока.ЗначениеРеквизита		= ЗначениеРеквизита;
	НоваяСтрока.ЭтотПараметрИзменился 	= ЭтотПараметрИзменился;
	НоваяСтрока.ВыделятьСтрокуЖелтым 	= ВыделятьСтрокуЖелтым;
	
	ПорядковыйНомерСтроки = ПорядковыйНомерСтроки + 1;
	НоваяСтрока.ПорядковыйНомерСтроки	= ПорядковыйНомерСтроки;
	
	Если ИзмененныйРеквизит = "Общие сведения" ИЛИ ИзмененныйРеквизит = "Сведения об организации" 
		ИЛИ ИзмененныйРеквизит = "Сведения о сотруднике – владельце электронной подписи" ИЛИ ИзмененныйРеквизит = "Сведения о контролирующих органах"
		ИЛИ ИзмененныйРеквизит = "Изменяемые настройки подключения" Тогда
		НоваяСтрока.ВыделятьСтрокуЖирным 	= Истина;
	Иначе
		НоваяСтрока.ВыделятьСтрокуЖирным 	= Ложь;
	КонецЕсли;
	
	Возврат НоваяСтрока;
	
КонецФункции

&НаКлиенте
Процедура ЗадатьНовоеЗначениеРеквизиту(ИмяРеквизита, НаименованиеРеквизита, ИзменяемыйРеквизит, МаскаРеквизита = Неопределено)
	
	ОткрытьФормуРедактированияРеквизита(ИмяРеквизита, НаименованиеРеквизита, ИзменяемыйРеквизит, МаскаРеквизита);

КонецПроцедуры

&НаСервере
Функция ОписаниеТиповРеквизитаФормы(НаименованиеРеквизита)
	
	ВсеРеквизитыФормы = ПолучитьРеквизиты();
	Для каждого РеквизитФормы Из ВсеРеквизитыФормы Цикл
		Если НРег(РеквизитФормы.Имя) = НРег(НаименованиеРеквизита) Тогда
			Возврат РеквизитФормы.ТипЗначения;
		КонецЕсли;
	КонецЦикла; 
	
	Возврат Неопределено;

КонецФункции

&НаКлиенте
Процедура ОткрытьФормуРедактированияРеквизита(ИмяРеквизита, НаименованиеРеквизита, ИзменяемыйРеквизит, МаскаРеквизита = Неопределено)
	
	ПараметрыОткрытияФормы = Новый Структура();
	ПараметрыОткрытияФормы.Вставить("ИмяРеквизита", ИмяРеквизита);
	ПараметрыОткрытияФормы.Вставить("НаименованиеРеквизита", НаименованиеРеквизита + ":");
	ПараметрыОткрытияФормы.Вставить("ЗначениеРеквизита", ИзменяемыйРеквизит);
	ПараметрыОткрытияФормы.Вставить("МаскаРеквизита", МаскаРеквизита);
	ОписаниеТипаРеквизита = ОписаниеТиповРеквизитаФормы(ИмяРеквизита);
	ПараметрыОткрытияФормы.Вставить("ОписаниеТипаРеквизита", ОписаниеТипаРеквизита);
	Форма = ПолучитьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ФормаРедактированияРеквизита", ПараметрыОткрытияФормы);
	
	ДополнительныеПараметры = Новый Структура("ИмяРеквизита", ИмяРеквизита);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуРедактированияРеквизитаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Форма.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	Форма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	Форма.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияРеквизитаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ИмяРеквизита = ДополнительныеПараметры.ИмяРеквизита;
	
	Если Результат <> Неопределено Тогда
		ЭтаФорма[ИмяРеквизита] = Результат;
	КонецЕсли;
	
	ОформитьЭлементыДляГалкиИзменитьСоставНалоговыхОргановШаг1();
	СравнитьТекущиеРеквизитыПодключенияСИсходными();
	СформироватьТаблицуДляПодтвержденияДанных();
	ОформитьПодсказкуДляГалкиИзменитьРеквизитыПодключенияК1СОтчетности();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияНаправленийСдачиОтчетности(ТаблицаКодовФНС)
	
	СписокЗначенийПолучатели = Новый СписокЗначений;
	Для каждого СтрокаТаблицыКодовФНС Из ТаблицаКодовФНС Цикл
		СписокЗначенийПолучатели.Добавить(СтрокаТаблицыКодовФНС.КодПолучателя, СтрокаТаблицыКодовФНС.КПП);
	КонецЦикла;
	
	ПараметрыОткрытияФормы = Новый Структура();
	ПараметрыОткрытияФормы.Вставить("Организация", Организация);
	ПараметрыОткрытияФормы.Вставить("Получатели", СписокЗначенийПолучатели);

	Форма = ПолучитьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ФормаНаправленийСдачиОтчетности", ПараметрыОткрытияФормы);
	
	ДополнительныеПараметры = Новый Структура("ТаблицаКодовФНС", ТаблицаКодовФНС);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуРедактированияНаправленийСдачиОтчетностиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Форма.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	Форма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	Форма.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияНаправленийСдачиОтчетностиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТаблицаКодовФНС = ДополнительныеПараметры.ТаблицаКодовФНС;
	
	Если Результат <> Неопределено Тогда
		ТаблицаКодовФНС.Очистить();
		Для каждого СтрокаТаблицыКодовФНС Из Результат Цикл
			НоваяСтрока = ТаблицаКодовФНС.Добавить();
			НоваяСтрока.ТипПолучателя 	= ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС");
			НоваяСтрока.КодПолучателя 	= СтрокаТаблицыКодовФНС.Значение;
			НоваяСтрока.КПП 			= СтрокаТаблицыКодовФНС.Представление;
		КонецЦикла;
		
	КонецЕсли;
	
	ОформитьЭлементыДляГалкиИзменитьСоставНалоговыхОргановШаг1();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПризнакВозможностиРедактирования()
	
	// Получаем массив реквизитов, которые нужно редактировать на форме, а не в справочнике организация
	Для Каждого СтрокаТаблицы Из ТаблицаДанныхЗаявленияНаПодключение Цикл
		
		// Редактировать можно те реквизиты, которых нет в базе
		Если РеквизитыНеХранящиесяВБазе.Найти(СтрокаТаблицы.ИзмененныйРеквизит) <> Неопределено Тогда
			СтрокаТаблицы.РеквизитРедактируется = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОформлениеЭлементовУправления

&НаКлиенте
Процедура ОформитьПодсказкуДляГалкиПродлитьСертификат()
	
	Надпись = Элементы.ПодсказкаПоПродлениюСертификата;
	
	// Определяем цвет
	Надпись.ЦветТекста = СинийЦветПодсказки;
	
	// Определяем заголовок
	ТекстЗаголовка = "";
	Если НЕ ПоддерживаетсяВторичноеЗаявление Тогда
		ТекстЗаголовка = "";
	ИначеЕсли НЕ СертификатДоступен Тогда
		ТекстЗаголовка = НСтр("ru = 'Сертификат недоступен'");
	ИначеЕсли ПродлитьСертификатИсходный Тогда
		КоличествоОставшегосяВремени = КонтекстЭДОКлиент.ТекстЧерезСколькоЛетМесяцевНедельДней(ТекущаяДатаСервер, СертификатДействителенПо, "", "");
		Надпись.ЦветТекста = КрасныйЦвет;
		
		Если КоличествоОставшегосяВремени = Неопределено Тогда
			ТекстЗаголовка = НСтр("ru = 'Срок действия сертификата истек %1'");
			ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%1", Формат(СертификатДействителенПо,"ДЛФ=DD"));
		Иначе
			ТекстЗаголовка = НСтр("ru = 'Срок действия сертификата истекает через %1'");
			ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%1", КоличествоОставшегосяВремени);
		КонецЕсли;
	Иначе
		ТекстЗаголовка = НСтр("ru = 'Сертификат действует до %1'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%1", Формат(СертификатДействителенПо,"ДЛФ=DD"));
	КонецЕсли;
	Надпись.Заголовок = ТекстЗаголовка;
		 
КонецПроцедуры

&НаКлиенте
Процедура ОформитьПодсказкуДляГалкиИзменитьВладельцаСертификата()
	
	// Определяем заголовок
	Если НЕ ПоддерживаетсяВторичноеЗаявление Тогда
		Элементы.ГруппаСтраницВладельца.ТекущаяСтраница = Элементы.ГруппаСтраницВладельца.ПодчиненныеЭлементы.СтраницаВладелецНеИзменен;
	Иначе 
		Элементы.ГруппаИзменитьВладельцаСертификата.Доступность = ИзменитьВладельцаСертификата;
		Элементы.ГруппаСтраницВладельца.ТекущаяСтраница = Элементы.ГруппаСтраницВладельца.ПодчиненныеЭлементы.СтраницаВладелецИзменен;
	КонецЕсли;
		
	ОформитьГиперссылку("ДекорацияВладелецЭЦП", ВладелецЭЦП, Истина, Истина);
	Элементы.ВыбратьДиректора.Пометка 		= Ложь;
	Элементы.ВыбратьГлБухгалтера.Пометка 	= Ложь;
	Элементы.ВыбратьСотрудника.Пометка 		= Ложь;
	
	Если ВыборДиректора = 1 Тогда
		Элементы.ВидВладельцаЭЦП.Заголовок = Элементы.ВыбратьДиректора.Заголовок;
		Элементы.ВыбратьДиректора.Пометка = Истина;
	КонецЕсли;	
	Если ВыборБухгалтера = 1 Тогда
		Элементы.ВидВладельцаЭЦП.Заголовок = Элементы.ВыбратьГлБухгалтера.Заголовок;
		Элементы.ВыбратьГлБухгалтера.Пометка = Истина;
	КонецЕсли;
	Если ВыборИсполнителя = 1 Тогда
		Элементы.ВидВладельцаЭЦП.Заголовок = Элементы.ВыбратьСотрудника.Заголовок;
		Элементы.ВыбратьСотрудника.Пометка = Истина;
	КонецЕсли;
		 
КонецПроцедуры

&НаКлиенте
Процедура ОформитьПодсказкуДляГалкиПродлитьЛицензиюНа1СОтчетность()
	
	Надпись = Элементы.ПодсказкаПоПродлениюЛицензии;
	
	// Определяем цвет
	Надпись.ЦветТекста = СинийЦветПодсказки;
	
	// Определяем заголовок
	ТекстЗаголовка = "";
	Если НЕ ПоддерживаетсяВторичноеЗаявление Тогда
		ТекстЗаголовка = "";
	ИначеЕсли ПродлитьЛицензиюНа1СОтчетностьИсходный Тогда
		КоличествоОставшегосяВремени = КонтекстЭДОКлиент.ТекстЧерезСколькоЛетМесяцевНедельДней(ТекущаяДатаСервер, ЛицензияДатаОкончания, "", "");
		Надпись.ЦветТекста = КрасныйЦвет;
		
		Если КоличествоОставшегосяВремени = Неопределено Тогда
			ТекстЗаголовка = НСтр("ru = 'Срок действия лицензии истек %1'");
			ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%1", Формат(ЛицензияДатаОкончания,"ДЛФ=DD"));
		Иначе
			ТекстЗаголовка = НСтр("ru = 'Срок действия лицензии истекает через %1'");
			ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%1", КоличествоОставшегосяВремени);
		КонецЕсли;
	Иначе
		ТекстЗаголовка = НСтр("ru = 'Лицензия действует до %1'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%1", Формат(ЛицензияДатаОкончания,"ДЛФ=DD"));
	КонецЕсли;
	Надпись.Заголовок = ТекстЗаголовка;
		 
КонецПроцедуры

&НаКлиенте
Процедура ОформитьЭлементыДляГалкиИзменитьСоставНалоговыхОргановШаг1()
	
	Элементы.ГруппаИзменитьСоставНалоговыхОрганов.Доступность = ИзменитьСоставКонтролирующихОрганов;
	
	Элементы.ДекорацияКодыФНС.Видимость 	= Истина;
	Элементы.ДекорацияКодПФР.Видимость 		= Истина;
	Элементы.ДекорацияКодРосстат.Видимость 	= Истина;
	
	Элементы.ВзятьКодПФРИзОрганизации.Видимость 		= Истина;
	Элементы.ВзятьКодРосстатаИзОрганизации.Видимость 	= Истина;
	
	Если НЕ ПоддерживаетсяВторичноеЗаявление Тогда
		Элементы.ДекорацияКодыФНС.Видимость 	= Ложь;
		Элементы.ДекорацияКодПФР.Видимость 		= Ложь;
		Элементы.ДекорацияКодРосстат.Видимость 	= Ложь;
		
		Элементы.ВзятьКодПФРИзОрганизации.Видимость 		= Ложь;
		Элементы.ВзятьКодРосстатаИзОрганизации.Видимость 	= Ложь;
		
	Иначе
		// ФНС
		КодыФНСПрописью = КодыФНСПрописьюКлиент(Получатели);
		ОформитьГиперссылку("ДекорацияКодыФНС", КодыФНСПрописью, СдаватьВФНС, СдаватьВФНС И ИзменитьСоставКонтролирующихОрганов);
		
		// ПФР
		ОформитьГиперссылку("ДекорацияКодПФР", КодПФР, СдаватьВПФР, СдаватьВПФР И ИзменитьСоставКонтролирующихОрганов);
		// Гиперссылка для изменения кода ПФР на значение из организации
		КодПФРВОрганизации = КодПФР();
		Если КодПФРВОрганизации <> КодПФР И НЕ ПустаяСтрока(СтрЗаменить(КодПФРВОрганизации,"-","")) Тогда
			Элементы.ВзятьКодПФРИзОрганизации.Видимость = Истина;
			ТекстЗаголовка = НСтр("ru = 'Изменить на %1'");
			ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%1", Строка(КодПФРВОрганизации));
		Иначе
			Элементы.ВзятьКодПФРИзОрганизации.Видимость = Ложь;
		КонецЕсли;
		ОформитьГиперссылку("ВзятьКодПФРИзОрганизации", ТекстЗаголовка, Ложь, СдаватьВПФР И ИзменитьСоставКонтролирующихОрганов);
		
		// Росстат
		ОформитьГиперссылку("ДекорацияКодРосстат", КодРосстата, СдаватьВРосстат, СдаватьВРосстат И ИзменитьСоставКонтролирующихОрганов);
		// Гиперссылка для изменения кода Росстата на значение из организации
		КодРосстатаВОрганизации = КодРосстата();
		Если КодРосстатаВОрганизации <> КодРосстата И НЕ ПустаяСтрока(СтрЗаменить(КодРосстатаВОрганизации,"-","")) Тогда
			Элементы.ВзятьКодРосстатаИзОрганизации.Видимость = Истина;
			ТекстЗаголовка = НСтр("ru = 'Изменить на %1'");
			ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%1", Строка(КодРосстатаВОрганизации));
		Иначе
			Элементы.ВзятьКодРосстатаИзОрганизации.Видимость = Ложь;
		КонецЕсли;
		ОформитьГиперссылку("ВзятьКодРосстатаИзОрганизации", ТекстЗаголовка, Ложь, СдаватьВРосстат И ИзменитьСоставКонтролирующихОрганов);
		
	КонецЕсли;
		 
КонецПроцедуры

&НаКлиенте
Процедура ОформитьПодсказкуДляГалкиИзменитьРеквизитыПодключенияК1СОтчетности()
	
	ПроверитьИзменилисьЛиРеквизитыПодключенияК1СОтчетности();
	Надпись = Элементы.ПодсказкаИзменитьРеквизитыПодключенияК1СОтчетности;
	
	// Определяем цвет
	Надпись.ЦветТекста = СинийЦветПодсказки;
	
	// Определяем заголовок
	ТекстЗаголовка = "";
	Если НЕ ПоддерживаетсяВторичноеЗаявление Тогда
		ТекстЗаголовка = "";
	ИначеЕсли ИзменилисьРеквизитыПодключенияК1СОтчетности И НЕ ПустаяСтрока(ИзмененныеРеквизиты) Тогда
		ТекстЗаголовка = ИзмененныеРеквизиты;
	Иначе
		ТекстЗаголовка = НСтр("ru = 'реквизиты не менялись'");
	КонецЕсли;
	Надпись.Заголовок = ТекстЗаголовка;

КонецПроцедуры

&НаКлиенте
Процедура ОформитьПодсказкуДляГалкиИзменитьМобильныйТелефон()
	
	Если НЕ ПоддерживаетсяВторичноеЗаявление Тогда
		Элементы.ГруппаЗакладокМобильногоТелефона.ТекущаяСтраница = Элементы.ГруппаМобильныйТелефонНеДоступен;
	Иначе
		Элементы.ГруппаЗакладокМобильногоТелефона.ТекущаяСтраница = Элементы.ГруппаМобильныйТелефонДоступен;
        Элементы.ТелефонМобильный.Доступность = ИзменитьМобильныйТелефон;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьГиперссылку(ИмяЭлемента, Знач Значение, ОбязательныйДляЗаполнения, Доступно)
	
	Элемент = Элементы[ИмяЭлемента];
	
	ПроверяемоеЗначение	= Строка(Значение);
	ПроверяемоеЗначение	= СтрЗаменить(ПроверяемоеЗначение,"-","");
	ПроверяемоеЗначение	= СтрЗаменить(ПроверяемоеЗначение,",","");
	ПроверяемоеЗначение	= СтрЗаменить(ПроверяемоеЗначение," ","");
	
	ЗначениеЗаполнено 	= ЗначениеЗаполнено(ПроверяемоеЗначение);
	Элемент.Доступность = Доступно;
	
	// Заголовок
	Если ЗначениеЗаполнено Тогда
		Элемент.Заголовок = Строка(Значение);
	Иначе
		Элемент.Заголовок = "Заполнить";
	КонецЕсли;
	
	// Цвет
	Если НЕ Доступно Тогда
		Элемент.ЦветТекста 	= СерыйЦвет;
	ИначеЕсли ЗначениеЗаполнено Тогда
		Элемент.ЦветТекста 	= СинийЦвет;
	Иначе
		Элемент.ЦветТекста 	= ?(ОбязательныйДляЗаполнения, КрасныйЦвет, СинийЦвет);
	КонецЕсли;
	
	Элемент.Гиперссылка = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьЭлементыФормыНаПервомШаге()
	
	Элементы.ГруппаВыбораДействия.Доступность = ПоддерживаетсяВторичноеЗаявление;
	
	ОформитьПодсказкуДляГалкиПродлитьСертификат();
	ОформитьПодсказкуДляГалкиИзменитьВладельцаСертификата();
	ОформитьПодсказкуДляГалкиПродлитьЛицензиюНа1СОтчетность();
	ОформитьЭлементыДляГалкиИзменитьСоставНалоговыхОргановШаг1();
	ОформитьПодсказкуДляГалкиИзменитьРеквизитыПодключенияК1СОтчетности();
	ОформитьПодсказкуДляГалкиИзменитьМобильныйТелефон();
	
	Если НЕ ПоддерживаетсяВторичноеЗаявление Тогда
		ИзменитьВладельцаСертификата = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьМобильногоТелефона()
	
	Элементы.ИзменитьМобильныйТелефон.Видимость = ОператорПоддерживаетСМСУведомление;
	Элементы.ГруппаЗакладокМобильногоТелефона.Видимость = ОператорПоддерживаетСМСУведомление;
	
	Если НЕ ОператорПоддерживаетСМСУведомление Тогда
		ТелефонМобильныйИзменился = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

&НаКлиенте
Процедура УстановитьНаименованияКриптопровайдеровНаФорме(ИмяКриптопровайдера)

	ПолеТекстаСообщения1 = Элементы.ПодсказкаТекстСообщения1;
	ПолеТекстаСообщения1.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '" + ПолеТекстаСообщения1.Заголовок + "'"), ИмяКриптопровайдера);

КонецПроцедуры

&НаКлиенте
Процедура ИнициализацияЗначений(ВыполняемоеОповещение)
	
	ДополнительныеПараметры = Новый Структура("ВыполняемоеОповещение", ВыполняемоеОповещение);
	ОписаниеОповещения = Новый ОписаниеОповещения("ИнициализацияЗначенийЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ЗаполнитьСписокУстановленныхКриптопровайдеров(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализацияЗначенийЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	
	// Цвета
	ЧерныйЦвет 			= Новый Цвет(65, 48, 3);
	СерыйЦвет 			= Новый Цвет(87, 87, 87);
	СинийЦвет 			= Новый Цвет(28, 85, 174);
	КрасныйЦвет 		= Новый Цвет(178,34, 34);
	ЦветТекстаФормы 	= Новый Цвет(65, 48, 3);
	СинийЦветПодсказки 	= Новый Цвет(70, 130,180);

	// Данные службы поддержки - контактные данные ЗАО "Калуга Астрал"
	ТелефонСлужбыПоддержки = "8-800-700-86-68";
	АдресЭлектроннойПочтыСлужбыПоддержки = "1c@astralnalog.ru";

	КоличествоДнейЗаКотороеНужноПредупреждатьОбИстеченииСрока = 30;
	
	ПрограммноеЗакрытие	= Ложь;
	
	РеквизитыНеХранящиесяВБазе = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСерверПереопределяемый.РеквизитыНеХранящиесяВБазе(Организация);
	
	ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьИсходныеПараметрыПодключенияК1СОтчетности(УчетнаяЗапись, ВходящийКонтекст)
	
	ОчиститьИсходныеЗначения();
	
	// Инициализация на сервере 
	ПрочитатьРегистрДополнительныеРеквизитыУчетнойЗаписи(УчетнаяЗапись);
	
	// Нужно ли продление сертификата
	ПроверитьТребуетсяЛиПродлениеСертификата(ВходящийКонтекст); // асинхронная
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьИсходныеПараметрыПодключенияК1СОтчетностиПослеОпределенияСвойствСертификата(Результат, ВходящийКонтекст) Экспорт
	
	// Нужно ли продление лицензии
	ПроверитьТребуетсяЛиПродлениеЛицензии();
	
	СделатьРеквизитыРавнымиИсходным();
	
	ЗаполнитьРеквизитыОрганизацииПослеПолученияСвойствСертификата(ВходящийКонтекст);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьРегистрДополнительныеРеквизитыУчетнойЗаписи(УчетнаяЗапись)

	// Обновляем информацию по учетной записи
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДополнительныеРеквизитыУчетнойЗаписи.ТипКриптопровайдера,
		|	ДополнительныеРеквизитыУчетнойЗаписи.НомерОсновнойПоставки1с,
		|	ДополнительныеРеквизитыУчетнойЗаписи.КраткоеНаименование,
		|	ДополнительныеРеквизитыУчетнойЗаписи.ПолноеНаименование,
		|	ДополнительныеРеквизитыУчетнойЗаписи.ИНН,
		|	ДополнительныеРеквизитыУчетнойЗаписи.КПП,
		|	ДополнительныеРеквизитыУчетнойЗаписи.ОГРН,
		|	ДополнительныеРеквизитыУчетнойЗаписи.РегНомерПФР,
		|	ДополнительныеРеквизитыУчетнойЗаписи.РегНомерФСС,
		|	ДополнительныеРеквизитыУчетнойЗаписи.ЭлектроннаяПочта,
		|	ДополнительныеРеквизитыУчетнойЗаписи.ВладелецЭЦПФамилия,
		|	ДополнительныеРеквизитыУчетнойЗаписи.ВладелецЭЦПИмя,
		|	ДополнительныеРеквизитыУчетнойЗаписи.ВладелецЭЦПОтчество,
		|	ДополнительныеРеквизитыУчетнойЗаписи.ВладелецЭЦППодразделение,
		|	ДополнительныеРеквизитыУчетнойЗаписи.ВладелецЭЦПСНИЛС,
		|	ДополнительныеРеквизитыУчетнойЗаписи.ВладелецЭЦПДолжность,
		|	ДополнительныеРеквизитыУчетнойЗаписи.ТелефонМобильный,
		|	ДополнительныеРеквизитыУчетнойЗаписи.ТелефонОсновной,
		|	ДополнительныеРеквизитыУчетнойЗаписи.ТелефонДополнительный,
		|	ДополнительныеРеквизитыУчетнойЗаписи.КодРегионаФСРАР
		|ИЗ
		|	РегистрСведений.ДополнительныеРеквизитыУчетнойЗаписи КАК ДополнительныеРеквизитыУчетнойЗаписи
		|ГДЕ
		|	ДополнительныеРеквизитыУчетнойЗаписи.УчетнаяЗапись = &УчетнаяЗапись";

	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	ДополнительныеРеквизитыУчетнойЗаписи = Запрос.Выполнить().Выгрузить();
	
	Если ДополнительныеРеквизитыУчетнойЗаписи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТипКриптопровайдераИсходный 		= ДополнительныеРеквизитыУчетнойЗаписи[0].ТипКриптопровайдера;
	НомерОсновнойПоставки1сИсходный 	= ДополнительныеРеквизитыУчетнойЗаписи[0].НомерОсновнойПоставки1с;
	КраткоеНаименованиеИсходное 		= ДополнительныеРеквизитыУчетнойЗаписи[0].КраткоеНаименование;
	ПолноеНаименованиеИсходное 			= ДополнительныеРеквизитыУчетнойЗаписи[0].ПолноеНаименование;
	КППИсходный 						= ДополнительныеРеквизитыУчетнойЗаписи[0].КПП;
	ОГРНИсходный 						= ДополнительныеРеквизитыУчетнойЗаписи[0].ОГРН;
	РегНомерПФРИсходный 				= ДополнительныеРеквизитыУчетнойЗаписи[0].РегНомерПФР;
	РегНомерФССИсходный 				= ДополнительныеРеквизитыУчетнойЗаписи[0].РегНомерФСС;
	ЭлектроннаяПочтаИсходная 			= ДополнительныеРеквизитыУчетнойЗаписи[0].ЭлектроннаяПочта;
	ВладелецЭЦПФамилияИсходный 			= ДополнительныеРеквизитыУчетнойЗаписи[0].ВладелецЭЦПФамилия;
	ВладелецЭЦПИмяИсходный 				= ДополнительныеРеквизитыУчетнойЗаписи[0].ВладелецЭЦПИмя;
	ВладелецЭЦПОтчествоИсходный			= ДополнительныеРеквизитыУчетнойЗаписи[0].ВладелецЭЦПОтчество;
	ВладелецЭЦППодразделениеИсходное 	= ДополнительныеРеквизитыУчетнойЗаписи[0].ВладелецЭЦППодразделение;
	ВладелецЭЦПСНИЛСИсходный 			= ДополнительныеРеквизитыУчетнойЗаписи[0].ВладелецЭЦПСНИЛС;
	ВладелецЭЦПДолжностьИсходная 		= ДополнительныеРеквизитыУчетнойЗаписи[0].ВладелецЭЦПДолжность;
	ТелефонМобильныйИсходный			= ПреобразоватьНомерТелефонаКМаскеСервер(ДополнительныеРеквизитыУчетнойЗаписи[0].ТелефонМобильный);
	ТелефонОсновнойИсходный 			= ДополнительныеРеквизитыУчетнойЗаписи[0].ТелефонОсновной;
	ТелефонДополнительныйИсходный 		= ДополнительныеРеквизитыУчетнойЗаписи[0].ТелефонДополнительный;
	КодРегионаФСРАРИсходный 			= ДополнительныеРеквизитыУчетнойЗаписи[0].КодРегионаФСРАР;
	ЛицензияНаименование 				= УчетнаяЗапись.ЛицензияНаименование;
	ЛицензияДатаНачала 					= УчетнаяЗапись.ЛицензияДатаНачала;
	ЛицензияДатаОкончания 				= УчетнаяЗапись.ЛицензияДатаОкончания;

	ЛицензияТребуетсяНапоминаниеОбОкончанииСрокаДействия = УчетнаяЗапись.ЛицензияТребуетсяНапоминаниеОбОкончанииСрокаДействия;
	
	// Обновляем информацию о направлениях сдачи отчетности
	ПолучателиИсходные.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДополнительныеРеквизитыУчетнойЗаписиПолучатели.ТипПолучателя,
		|	ДополнительныеРеквизитыУчетнойЗаписиПолучатели.КодПолучателя,
		|	ДополнительныеРеквизитыУчетнойЗаписиПолучатели.КПП
		|ИЗ
		|	РегистрСведений.ДополнительныеРеквизитыУчетнойЗаписиПолучатели КАК ДополнительныеРеквизитыУчетнойЗаписиПолучатели
		|ГДЕ
		|	ДополнительныеРеквизитыУчетнойЗаписиПолучатели.УчетнаяЗапись = &УчетнаяЗапись";

	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Результат = Запрос.Выполнить().Выгрузить();
	
	// Копируем структуру таблицы
	ТаблицаКодовФНС = Результат.Скопировать();
	ТаблицаКодовФНС.Очистить();
	
	Для Каждого СтрокаНаправлений Из Результат Цикл
		Если СтрокаНаправлений.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ПФР Тогда
			СдаватьВПФРИсходный = Истина;
			КодПФРИсходный 		= ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(СтрокаНаправлений.КодПолучателя);
		ИначеЕсли СтрокаНаправлений.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФСС Тогда
			СдаватьВФССИсходный = Истина;
		ИначеЕсли СтрокаНаправлений.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФНС Тогда
			СдаватьВФНСИсходный = Истина;
			НоваяСтрока = ТаблицаКодовФНС.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНаправлений); 
		ИначеЕсли СтрокаНаправлений.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФСГС Тогда
			СдаватьВРосстатИсходный = Истина;
			КодРосстатаИсходный = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(СтрокаНаправлений.КодПолучателя);
		ИначеЕсли СтрокаНаправлений.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФСРАР Тогда
			СдаватьВФСРАРИсходный = Истина;
		ИначеЕсли СтрокаНаправлений.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.РПН Тогда
			СдаватьВРПНИсходный = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВДанныеФормы(ТаблицаКодовФНС.Скопировать(), ПолучателиИсходные);
	
	КодыФНСПрописьюИсходные = КодыФНСПрописьюСервер(ПолучателиИсходные);
	
КонецПроцедуры

#КонецОбласти

#Область Основные

&НаКлиенте
Процедура ЗаполнитьРеквизитыОрганизации(ДанныеЗаполнения = Неопределено, ПрограммноеЗаполнение = Истина, ВыполняемоеОповещение = Неопределено)
	
	// Очистка
	ОчиститьСообщения();
	ОчиститьДанныеСотрудника(НЕ ПрограммноеЗаполнение);
	ОчиститьРеквизитыФормы();
	
	// Проверка поддержки отправки вторичного заявления
	УчетнаяЗапись = КонтекстЭДОКлиент.УчетнаяЗаписьОрганизации(Организация);
	ОператорПоддерживаетСМСУведомление = Ложь;
	Спецоператор = СпецоператорИзУчетнойЗаписи(УчетнаяЗапись, ОператорПоддерживаетСМСУведомление);

	// Проверка поддержки вторичных заявлений
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ПрограммноеЗаполнение", 	ПрограммноеЗаполнение);
	ДополнительныеПараметры.Вставить("УчетнаяЗапись", 			УчетнаяЗапись);
	ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", 	ВыполняемоеОповещение);
	ДополнительныеПараметры.Вставить("ДанныеЗаполнения", 		ДанныеЗаполнения);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьРеквизитыОрганизацииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ПоддерживаетсяОтправкаВторичныхЗаявлений(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыОрганизацииЗавершение(ПоддерживаетсяВторичноеЗаявление, ДополнительныеПараметры) Экспорт
	
	ПрограммноеЗаполнение 	= ДополнительныеПараметры.ПрограммноеЗаполнение;
	УчетнаяЗапись 			= ДополнительныеПараметры.УчетнаяЗапись;
	ВыполняемоеОповещение 	= ДополнительныеПараметры.ВыполняемоеОповещение;
	ДанныеЗаполнения 		= ДополнительныеПараметры.ДанныеЗаполнения;
	
	Если НЕ ПоддерживаетсяВторичноеЗаявление Тогда
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьРеквизитыОрганизацииПослеОбновленияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОбновитьРеквизитыОрганизации(ПрограммноеЗаполнение, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыОрганизацииПослеОбновленияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПрограммноеЗаполнение 	= ДополнительныеПараметры.ПрограммноеЗаполнение;
	УчетнаяЗапись 			= ДополнительныеПараметры.УчетнаяЗапись;
	ДанныеЗаполнения 		= ДополнительныеПараметры.ДанныеЗаполнения;

	// Определяем исходные параметры подключенния к 1С-Отчетности
	ОпределитьИсходныеПараметрыПодключенияК1СОтчетности(УчетнаяЗапись, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыОрганизацииПослеПолученияСвойствСертификата(ВходящийКонтекст)
	
	ВыполняемоеОповещение = ВходящийКонтекст.ВыполняемоеОповещение;
	
	ОпределитьВладельцаЭЦП();
	
	// Если это заявление создается копированием предыдущего, то копируем реквизиты из предыдущего заявления
	Если ЗначениеЗаполнено(Реквизит) Тогда
		ЗаполнитьРеквизитыИзПредыдущегоЗаявления();
		ЗаполнитьДанныеСотрудника(ВладелецЭЦПТип, Ложь);
		УстановитьНовогоВладельцаЭЦП(ВладелецЭЦПТип);
		СравнитьТекущиеРеквизитыПодключенияСИсходными();
		УстановитьГалкуИзменитьРеквизитыПодключенияК1СОтчетности();
		УстановитьФлажкиВыбранныхДействийИзПредыдущегоЗаявления();
	Иначе
		УстановитьГалкуИзменитьВладельцаСертификата();
		СравнитьТекущиеРеквизитыПодключенияСИсходными();
		СравнитьНаправленияИКодыСдачиОтчетностиСИсходными();
		// Устанавливаем корректное значение галок
		УстановитьГалкуИзменитьСоставКонтролирующихОрганов();
		УстановитьГалкуИзменитьРеквизитыПодключенияК1СОтчетности();
		УстановитьГалкуПереиздатьСертификатИОпределитьПричиныПереиздания();
	КонецЕсли;
	
	УстановитьВидимостьМобильногоТелефона();
	ОформитьЭлементыФормыНаПервомШаге();
	
	СтруктураДанныхСпецоператорыСвязи = Новый Структура("СпецоператорыСвязи,Макет,ТекстМакетаСоглашение,ЗначениеЗаполненияСпецоператораСвязи",
												ДанныеЗаполнения.СпецоператорыСвязи, ДанныеЗаполнения.МакетПараметрыСпецоператоровСвязи,
												ДанныеЗаполнения.ТекстМакетаСоглашение, ДанныеЗаполнения.ЗначениеЗаполненияСпецоператораСвязи);

	Если ВыполняемоеОповещение <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРеквизитыОрганизации(ПрограммноеЗаполнение, ВыполняемоеОповещение)
	
	ДополнительныеПараметры = Новый Структура("ПрограммноеЗаполнение, ВыполняемоеОповещение", ПрограммноеЗаполнение, ВыполняемоеОповещение);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьРеквизитыОрганизацииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ИнициализацияЗначений(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРеквизитыОрганизацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	ПрограммноеЗаполнение = ДополнительныеПараметры.ПрограммноеЗаполнение;
	
	// Заполняем текущие реквизиты организации
	Если ДанныеЗаполнения = Неопределено Тогда
		ДанныеЗаполнения = Новый Структура();
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура("Организация, ПриОткрытии", Организация, НЕ ДанныеЗаполнения = Неопределено);
	Если ДанныеЗаполнения <> Неопределено Тогда
		СтруктураРеквизитов.Вставить("АдресЮридический",);
		СтруктураРеквизитов.Вставить("АдресФактический",);
	КонецЕсли;
	КонтекстЭДОКлиент.ЗаполнитьДанные(СтруктураРеквизитов);
	ДанныеЗаполнения = КонтекстЭДОКлиент.ПолучитьДанныеЗаполнения(СтруктураРеквизитов);
	ДанныеОрганизации = ДанныеЗаполнения.СтруктураДанныхОрганизации;
	ЗаполнитьДанныеПоОрганизации(ДанныеЗаполнения, ПрограммноеЗаполнение);
	
	ВыполняемоеОповещение.ДополнительныеПараметры.ДанныеЗаполнения = ДанныеЗаполнения;
	ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьВладельцаЭЦП()
	
	// пытаемся определить тип владельца ЭП исходя из ФИО
	СтруктураФИОРуководителя = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ФИОФизЛица(Руководитель);
	СтруктураФИОГлБухгалтер = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ФИОФизЛица(ГлБухгалтер);
	// Сравниваем с ФИО руководителя
	Если СтруктураФИОРуководителя.Имя = ВладелецЭЦПИмяИсходный И СтруктураФИОРуководителя.Отчество = ВладелецЭЦПОтчествоИсходный
		И СтруктураФИОРуководителя.Фамилия = ВладелецЭЦПФамилияИсходный Тогда
		ВладелецЭЦПТипИсходный = 1;
	// Сравниваем с ФИО бухгалтера
	ИначеЕсли СтруктураФИОГлБухгалтер.Имя = ВладелецЭЦПИмяИсходный И СтруктураФИОГлБухгалтер.Отчество = ВладелецЭЦПОтчествоИсходный
		И СтруктураФИОГлБухгалтер.Фамилия = ВладелецЭЦПФамилияИсходный Тогда
		ВладелецЭЦПТипИсходный = 2;
	Иначе
		// Если владелец ЭЦП не руководитель и не бухгалтер, то мы можем найти его только по ФИО 
		ВладелецЭЦПИсходный = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ФизЛицоПоФИО(
			ВладелецЭЦПФамилияИсходный, ВладелецЭЦПИмяИсходный, ВладелецЭЦПОтчествоИсходный, ВладелецЭЦПСНИЛСИсходный, Организация);

		СотрудникВыборИсходный  = ВладелецЭЦПИсходный;
		СотрудникВыбор 			= СотрудникВыборИсходный;
		
		ВладелецЭЦПТипИсходный = 3;
	КонецЕсли; 
	
	ВладелецЭЦПТип = ВладелецЭЦПТипИсходный;
	ВладелецЭЦПТипПеречисление = КонтекстЭДОКлиент.ПолучитьТипВладельцаЭЦП(ВладелецЭЦПТип);
	ПолучитьВидИсполнителя(ВладелецЭЦПТипИсходный);
	
	ЗаполнитьДанныеСотрудника(ВладелецЭЦПТипИсходный, Ложь);
	
	Если ВладелецЭЦПТипИсходный = 1 И НЕ ВладелецЭЦПИзменился Тогда
		ВладелецЭЦПИсходный = Руководитель;
	ИначеЕсли ВладелецЭЦПТипИсходный = 2 И НЕ ВладелецЭЦПИзменился Тогда
		ВладелецЭЦПИсходный = ГлБухгалтер;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеПоОрганизации(ДанныеЗаполнения, ПрограммноеЗаполнение = Истина)

	Если ЗначениеЗаполнено(ВладелецЭЦПТипПеречисление) И ПрограммноеЗаполнение Тогда
		ТипИсполнителя = КонтекстЭДОКлиент.ПолучитьТипИсполнителя(ВладелецЭЦПТипПеречисление);
	Иначе
		ТипИсполнителя = 0;
	КонецЕсли;
	
	Руководитель	= ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.Руководитель(Организация); 
	ГлБухгалтер		= ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ГлБухгалтер(Организация);
	
	ЭтоЮридическоеЛицо		 = ДанныеОрганизации.ТипОрганизации;
	ПолноеНаименование		 = ДанныеОрганизации.НаимЮЛПол;
	КраткоеНаименование		 = ДанныеОрганизации.КраткоеНаименование;
	ИНН						 = ДанныеОрганизации.ИННЮЛ;
	КПП						 = ДанныеОрганизации.КППЮЛ;
	ОГРН					 = ДанныеОрганизации.ОГРН;
	РегНомерПФР				 = ДанныеОрганизации.РегНомПФР;
	РегНомерФСС				 = ДанныеОрганизации.РегистрационныйНомерФСС;
	
	// Если реквизита нет в базе, то не обновляем его, потому в этом случае данные, введенные пользователем вручную, затрутся
	Если РеквизитыНеХранящиесяВБазе.Найти(
			ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ТелефонОсновной")) = Неопределено Тогда
		ТелефонОсновной			 = ДанныеОрганизации.ТелОрганизации;
	КонецЕсли;

	// Если реквизита нет в базе, то не обновляем его, потому в этом случае данные, введенные пользователем вручную, затрутся
	Если РеквизитыНеХранящиесяВБазе.Найти(
			ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ТелефонДополнительный")) = Неопределено Тогда
		ТелефонДополнительный	 = ДанныеОрганизации.ТелРук;
	КонецЕсли;
	АдрЮР					 = ДанныеЗаполнения.АдресЮридический;
	АдрФакт				 	 = ДанныеЗаполнения.АдресФактический;
	АдресЮридический		 = ДанныеЗаполнения.ЮрАдрес;
	АдресФактический		 = ДанныеЗаполнения.ФактАдрес;
	
	Если АдресЮридический = ",,,,,,,,," Тогда
		АдресЮридический = "";
	КонецЕсли;
	
	Если АдресФактический = ",,,,,,,,," Тогда
		АдресФактический = "";
	КонецЕсли;
	
	// Если реквизита нет в базе, то не обновляем его, потому в этом случае данные, введенные пользователем вручную, затрутся
	Если РеквизитыНеХранящиесяВБазе.Найти(
			ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ЭлектроннаяПочта")) = Неопределено Тогда
		ЭлектроннаяПочта = ДанныеОрганизации.ЭлектроннаяПочта;
	КонецЕсли;
	
	Если ЭтоЮридическоеЛицо Тогда
		ПризнакОбособленногоПодразделения	= ДанныеОрганизации.ПризнакОбособленногоПодразделения;
	КонецЕсли;
	
	КодРегионаФСРАР = РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(АдрЮр).Регион;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьНовыйДокументЗаявление(СохранитьИВыгрузить)
	
    ТекстСообщения = "";
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО(ТекстСообщения);
	
	НовыйДокументЗаявление = РеквизитФормыВЗначение("ДокументЗаявление");
	
	НовыйДокументЗаявление.УстановитьНовыйНомер();
	НовыйДокументЗаявление.ЭлектроннаяПодписьВМоделиСервиса     = ЭтоЭлектроннаяПодписьВМоделиСервиса;
	НовыйДокументЗаявление.Дата									= ТекущаяДатаСеанса();
	НовыйДокументЗаявление.Организация							= Организация;
	НовыйДокументЗаявление.ТипЗаявления							= Перечисления.ТипыЗаявленияАбонентаСпецоператораСвязи.Изменение;
	НовыйДокументЗаявление.ИдентификаторДокументооборота		= нрег(СтрЗаменить(Строка(Новый("УникальныйИдентификатор")), "-", ""));
	НовыйДокументЗаявление.Статус								= Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Подготовлено;
	НовыйДокументЗаявление.СпецоператорСвязи					= Спецоператор;
	НовыйДокументЗаявление.ТипКриптопровайдера					= ТипКриптопровайдера;
	НовыйДокументЗаявление.ТипОрганизации						= ЭтоЮридическоеЛицо;
	НовыйДокументЗаявление.ИНН									= ИНН;
	НовыйДокументЗаявление.КПП									= КПП;
	НовыйДокументЗаявление.ПолноеНаименование					= ПолноеНаименование;
	НовыйДокументЗаявление.КраткоеНаименование					= КраткоеНаименование;
	НовыйДокументЗаявление.ПризнакОбособленногоПодразделения	= ПризнакОбособленногоПодразделения;
	НовыйДокументЗаявление.НомерОсновнойПоставки1с				= НомерОсновнойПоставки1с;
	НовыйДокументЗаявление.ДополнительныйКодФСС					= ДополнительныйКодФСС;
	НовыйДокументЗаявление.ОГРН									= ОГРН;
	НовыйДокументЗаявление.АдресЮридический 					= РегламентированнаяОтчетностьВызовСервера.ЗаменитьТекстРегионаНаКодРегиона(АдрЮР);
	НовыйДокументЗаявление.РегНомерПФР							= РегНомерПФР;
	НовыйДокументЗаявление.РегНомерФСС							= ?(СдаватьВФСС, РегНомерФСС, "");
	НовыйДокументЗаявление.ТелефонОсновной						= ТелефонОсновной;
	НовыйДокументЗаявление.ТелефонДополнительный				= ТелефонДополнительный;
		
	ТелефонМобильныйБезРазделителей = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ТелефонМобильныйБезРазделителей(ТелефонМобильный);
	Если ПустаяСтрока(ТелефонМобильныйБезРазделителей) Тогда
		НовыйДокументЗаявление.ТелефонМобильный = "";
	Иначе
		НовыйДокументЗаявление.ТелефонМобильный = ТелефонМобильный;
	КонецЕсли;
	
	ВладелецЭЦПТипПеречисление = КонтекстЭДОСервер.ПолучитьТипВладельцаЭЦП(?(ВыборДиректора = 1,1,?(ВыборБухгалтера = 1,2,3)));
	НовыйДокументЗаявление.ВладелецЭЦПТип						= ВладелецЭЦПТипПеречисление;
	НовыйДокументЗаявление.ВладелецЭЦП							= ВладелецЭЦП;
	НовыйДокументЗаявление.ЭлектроннаяПочта						= ЭлектроннаяПочта;
	НовыйДокументЗаявление.ВладелецЭЦПФамилия					= СокрЛП(ВладелецЭЦПФамилия);
	НовыйДокументЗаявление.ВладелецЭЦПИмя						= СокрЛП(ВладелецЭЦПИмя);
	НовыйДокументЗаявление.ВладелецЭЦПОтчество					= СокрЛП(ВладелецЭЦПОтчество);
	НовыйДокументЗаявление.ВладелецЭЦПДолжность					= ВладелецЭЦПДолжность;
	НовыйДокументЗаявление.ВладелецЭЦППодразделение				= ВладелецЭЦППодразделение;
	НовыйДокументЗаявление.ВладелецЭЦПВидДокумента				= ВладелецЭЦПВидДокумента;
	НовыйДокументЗаявление.ВладелецЭЦПНомерДокумента			= ВладелецЭЦПНомерДокумента;
	НовыйДокументЗаявление.ВладелецЭЦПСерияДокумента			= ВладелецЭЦПСерияДокумента;
	НовыйДокументЗаявление.ВладелецЭЦПДатаВыдачиДокумента		= ВладелецЭЦПДатаВыдачиДокумента;
	НовыйДокументЗаявление.ВладелецЭЦПКемВыданДокумент			= ВладелецЭЦПКемВыданДокумент;
	НовыйДокументЗаявление.ВладелецЭЦПСНИЛС						= ВладелецЭЦПСНИЛС;
	
	НовыйДокументЗаявление.Ответственный						= Пользователи.ТекущийПользователь();
	НовыйДокументЗаявление.ДатаСозданияУчетнойЗаписи			= '00010101';
	
	// Контролирующие органы
	НовыйДокументЗаявление.ПодатьЗаявкуНаСертификатДляФСРАР 	= СдаватьВФСРАР;
	НовыйДокументЗаявление.КодРегионаФСРАР 						= КодРегионаФСРАР;
	НовыйДокументЗаявление.ПодатьЗаявкуНаПодключениеРПН 		= СдаватьВРПН;
	
	НовыйДокументЗаявление.Получатели.Очистить();
	
	Если СдаватьВФНС Тогда
		Для Каждого СтрокаНаправлений Из Получатели Цикл
			НоваяСтрокаНаправления = НовыйДокументЗаявление.Получатели.Добавить();
			НоваяСтрокаНаправления.ТипПолучателя = СтрокаНаправлений.ТипПолучателя;
			НоваяСтрокаНаправления.КодПолучателя = СтрокаНаправлений.КодПолучателя;
			НоваяСтрокаНаправления.КПП = СтрокаНаправлений.КПП;
		КонецЦикла;
	КонецЕсли;
	
	Если СдаватьВПФР Тогда 
		НоваяСтрокаНаправления = НовыйДокументЗаявление.Получатели.Добавить();
		НоваяСтрокаНаправления.ТипПолучателя =  ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ПФР");
		НоваяСтрокаНаправления.КодПолучателя = КодПФР;
		НоваяСтрокаНаправления.КПП = "";
	КонецЕсли;
	
	Если СдаватьВФСС Тогда 
		НоваяСтрокаНаправления = НовыйДокументЗаявление.Получатели.Добавить();
		НоваяСтрокаНаправления.ТипПолучателя =  ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСС");
		НоваяСтрокаНаправления.КПП = "";
	КонецЕсли;
	
	Если СдаватьВРосстат Тогда 
		НоваяСтрокаНаправления = НовыйДокументЗаявление.Получатели.Добавить();
		НоваяСтрокаНаправления.ТипПолучателя =  ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСГС");
		НоваяСтрокаНаправления.КодПолучателя = КодРосстата;
		НоваяСтрокаНаправления.КПП = "";
	КонецЕсли;
	
	// Записываем перечень изменившихся реквизитов
	НовыйДокументЗаявление.ИзменившиесяРеквизитыВторичногоЗаявления.Очистить();
	Для каждого СтрокаТаблицыПодтверждения Из ТаблицаДанныхЗаявленияНаПодключение Цикл
		
		// Записываем в документ только изменившиеся реквизиты
		Если СтрокаТаблицыПодтверждения.ЭтотПараметрИзменился И СтрокаТаблицыПодтверждения.ВыделятьСтрокуЖелтым Тогда
			
			НоваяСтрока = НовыйДокументЗаявление.ИзменившиесяРеквизитыВторичногоЗаявления.Добавить();
			НоваяСтрока.ИзмененныйРеквизит = СтрокаТаблицыПодтверждения.ИзмененныйРеквизит;
			
		КонецЕсли;
		
	КонецЦикла;  
	
	НовыйДокументЗаявление.УчетнаяЗапись = УчетнаяЗапись;
	
	// Сохранение документа
	Если СохранитьИВыгрузить = 1 или СохранитьИВыгрузить = 2 Тогда
		НовыйДокументЗаявление.Записать();
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(НовыйДокументЗаявление, "ДокументЗаявление");
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьИОтправитьЗаявление()
	
	// Получение идентификатора абонента
	ИдентификаторАбонента = "";
	УчетнаяЗаписьОбмена = КонтекстЭДОКлиент.НастройкиУчетнойЗаписиОрганизации(Организация);
	Если УчетнаяЗаписьОбмена <> Неопределено Тогда
		ИдентификаторАбонента = Строка(УчетнаяЗаписьОбмена.ИдентификаторАбонента);
		ИдентификаторСпецоператора = Строка(УчетнаяЗаписьОбмена.ИдентификаторСпецоператора);
		ДлинаИдентификатораСпецоператора = СтрДлина(ИдентификаторСпецоператора);
		ПрефиксИдентификатораАбонента = Лев(ИдентификаторАбонента, ДлинаИдентификатораСпецоператора);
		
		Если ЗначениеЗаполнено(ИдентификаторСпецоператора) И нрег(ПрефиксИдентификатораАбонента) = нрег(ИдентификаторСпецоператора) Тогда
			ИдентификаторАбонента = Сред(ИдентификаторАбонента, ДлинаИдентификатораСпецоператора + 1);
		КонецЕсли;
	КонецЕсли;
	
	// Отправка заявления
	
	ФормироватьЗакрытыйКлючИЗапросНаСертификат = ПереиздатьСертификат <> 0 ;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СформироватьИОтправитьЗаявлениеЗавершение", ЭтотОбъект);
	КонтекстЭДОКлиент.СформироватьИОтправитьЗаявление(
		ДокументЗаявление, 
		ИдентификаторАбонента, 
		Истина, 
		ОписаниеОповещения, 
		ФормироватьЗакрытыйКлючИЗапросНаСертификат
		);
	

КонецПроцедуры

&НаКлиенте
Процедура СформироватьИОтправитьЗаявлениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Свойство("ТекстОшибки") Тогда
	ПолученныйТекстОшибокОтправки = Результат.ТекстОшибки;
	ИначеЕсли Результат.Свойство("ОписаниеОшибки") Тогда
		ПолученныйТекстОшибокОтправки = Результат.ОписаниеОшибки;
	КонецЕсли;
	
	// Анализируем 
	Если ТекстОшибокОтправки <> ПолученныйТекстОшибокОтправки Тогда
		ТекстОшибокОтправки = ПолученныйТекстОшибокОтправки;
	КонецЕсли;	
		
	ОповеститьОбИзменении(ДокументЗаявление.Ссылка);
	ЭтаФорма.Активизировать();
	
	// Меняем код ТОГС на тот, который был указан в заявлении
	Если ДокументЗаявление.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отправлено")
		И ИзменитьСоставКонтролирующихОрганов
		И СокрЛП(КодРосстата) <> ДанныеОрганизации.КодОрганаФСГС Тогда
		
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ЗадатьКодОрганаФСГСВОрганизации(Организация, СокрЛП(КодРосстата));
		
	КонецЕсли;

	ОткрытьФормуНаСтраницеРезультатаОтправки();
	
	ПоказатьСледующуюСтраницу();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьТаблицуДляПодтвержденияДанных()
	
	ПорядковыйНомерСтроки = 0;
	
	ТаблицаДанныхЗаявленияНаПодключение.Очистить();
	
	// Общие сведения
	ДобавленнаяСтрокаВТаблицеПодтверждения("Общие сведения"); // заголовок 
	
	Если Не ЭтоЭлектроннаяПодписьВМоделиСервиса Тогда
		// Криптопровайдер
		Криптопровайдер = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ПолучитьПараметрыКриптопровайдера(ТипКриптопровайдера);
		ОтображаемоеНазваниеКриптопровайдера = "";
		Если ЗначениеЗаполнено(Криптопровайдер) Тогда
			ОтображаемоеНазваниеКриптопровайдера = Криптопровайдер.ОтображаемоеНазвание;
		КонецЕсли;
		ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.Криптопровайдер"), 
			ОтображаемоеНазваниеКриптопровайдера, КриптопровайдерИзменился И ПереиздатьСертификат <> 0);
	КонецЕсли;	
		
	// Регистрационный номер программы
	Если ИзменитьРеквизитыПодключенияК1СОтчетности Тогда 
		ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.НомерОсновнойПоставки1С"),
			НомерОсновнойПоставки1с, НомерОсновнойПоставки1сИзменился);
	Иначе
		ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.НомерОсновнойПоставки1С"), 
			НомерОсновнойПоставки1сИсходный, Ложь);
	КонецЕсли;
	
	Если ПереиздатьСертификат = 0 Тогда
		// Ложь
		ДобавленнаяСтрокаВТаблицеПодтверждения(
			ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ПереизданиеСертификата"), Ложь, Ложь);
	Иначе
		// Истина
		ДобавленнаяСтрокаВТаблицеПодтверждения(
			ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ПереизданиеСертификата"), Истина, Истина);
	КонецЕсли;
	
	ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ПродлениеАбонентскогоСертификата"), 
		ПродлитьСертификат, ПродлитьСертификат);
	
	Если ПродлитьЛицензиюНа1СОтчетность Тогда
		ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ПродлениеЛицензии"),
			"Да (может потребоваться дополнительная оплата)", ПродлитьЛицензиюНа1СОтчетность);
	Иначе
		ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ПродлениеЛицензии"), 
			"Нет", ПродлитьЛицензиюНа1СОтчетность);
	КонецЕсли;
	
	// Сведения об организации
	ДобавленнаяСтрокаВТаблицеПодтверждения("Сведения об организации"); // заголовок 
	
	Если ИзменитьРеквизитыПодключенияК1СОтчетности Тогда
		ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.КраткоеНаименование"), 
			КраткоеНаименование, КраткоеНаименованиеИзменилось);
		ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ПолноеНаименование"), 
			ПолноеНаименование, ПолноеНаименованиеИзменилось);
		ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ИНН"), ИНН, Ложь); // ИНН запрещено менять
		ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.КПП"), КПП, КППИзменился);
	Иначе
		ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.КраткоеНаименование"), 
			КраткоеНаименованиеИсходное, Ложь);
		ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ПолноеНаименование"), 
			ПолноеНаименованиеИсходное, Ложь);
		ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ИНН"), ИНН, Ложь);
		ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.КПП"), КППИсходный, Ложь);
	КонецЕсли;
	
	Если ИзменитьРеквизитыПодключенияК1СОтчетности Тогда
		ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ОГРН"), 
			ОГРН, ОГРНИзменился);
		ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.РегНомерПФР"), 
			РегНомерПФР, РегНомерПФРИзменился);
		ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.РегНомерФСС"), 
			РегНомерФСС, РегНомерФССИзменился);
		ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.КодРегионаФСРАР"), 
			КодРегионаФСРАР, КодРегионаФСРАРИзменился);
		ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ТелефонОсновной"), 
			ТелефонОсновной, ТелефонОсновнойИзменился);
		ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ТелефонДополнительный"), 
			ТелефонДополнительный, ТелефонДополнительныйИзменился);
		ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ЭлектроннаяПочта"), 
			ЭлектроннаяПочта, ЭлектроннаяПочтаИзменилась); 
	Иначе
		ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ОГРН"), 
			ОГРНИсходный, Ложь);
		ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.РегНомерПФР"), 
			РегНомерПФРИсходный, Ложь);
		ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.РегНомерФСС"), 
			РегНомерФССИсходный, Ложь);
		ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.КодРегионаФСРАР"), 
			КодРегионаФСРАРИсходный, Ложь);
		ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ТелефонОсновной"), 
			ТелефонОсновнойИсходный, Ложь);
		ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ТелефонДополнительный"), 
			ТелефонДополнительныйИсходный, Ложь);
		ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ЭлектроннаяПочта"), 
			ЭлектроннаяПочтаИсходная, Ложь); 
	КонецЕсли;
	
	// Сведения о сотруднике – владельце электронной подписи
	ДобавленнаяСтрокаВТаблицеПодтверждения("Сведения о сотруднике – владельце электронной подписи"); // заголовок
	
	Если ИзменитьВладельцаСертификата Тогда
		ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦП"), 
			ВладелецЭЦП, ВладелецЭЦПИзменился);
	Иначе
		ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦП"), 
			ВладелецЭЦПИсходный, Ложь);
	КонецЕсли;
	
	Если (ИзменитьРеквизитыПодключенияК1СОтчетности ИЛИ ИзменитьВладельцаСертификата) Тогда
		ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПДолжность"), 
			ВладелецЭЦПДолжность, ВладелецЭЦПДолжностьИзменилась);
		ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦППодразделение"), 
			ВладелецЭЦППодразделение, ВладелецЭЦППодразделениеИзменилось);
		ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПСНИЛС"), 
			ВладелецЭЦПСНИЛС, ВладелецЭЦПСНИЛСИзменился);
	Иначе 
		ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПДолжность"), 
			ВладелецЭЦПДолжностьИсходная, Ложь);
		ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦППодразделение"), 
			ВладелецЭЦППодразделениеИсходное, Ложь);
		ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПСНИЛС"), 
			ВладелецЭЦПСНИЛСИсходный, Ложь);
	КонецЕсли;
	
	ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПВидДокумента"), 
		ВладелецЭЦПВидДокумента, Ложь);
	ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПСерияДокумента"), 
		Строка(ВладелецЭЦПСерияДокумента), Ложь);
	ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПНомерДокумента")
		, Строка(ВладелецЭЦПНомерДокумента), Ложь);
	ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПДатаВыдачиДокумента"), 
		ВладелецЭЦПДатаВыдачиДокумента, Ложь);
	ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПКемВыданДокумент"), 
		ВладелецЭЦПКемВыданДокумент, Ложь);
	
	Если ОператорПоддерживаетСМСУведомление Тогда
		Если ИзменитьМобильныйТелефон Тогда
			ТелефонМобильныйБезРазделителей = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ТелефонМобильныйБезРазделителей(ТелефонМобильный);
			Если ПустаяСтрока(ТелефонМобильныйБезРазделителей) Тогда
				ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ТелефонМобильный"), 
					"", ТелефонМобильныйИзменился);
			Иначе
				ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ТелефонМобильный"), 
					ТелефонМобильный, ТелефонМобильныйИзменился);
			КонецЕсли;
		Иначе
			ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ТелефонМобильный"), 
				ТелефонМобильныйИсходный, Ложь);
		КонецЕсли;
	КонецЕсли;
	
	// Сведения о контролирующих органах
	ДобавленнаяСтрокаВТаблицеПодтверждения("Сведения о контролирующих органах"); // заголовок
	
	// ФНС
	Если ИзменитьСоставКонтролирующихОрганов Тогда
		ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.СдаватьВФНС")
			, СдаватьВФНС, СдаватьВФНСИзменился);
		Если СдаватьВФНС Тогда
			ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.КодыФНС"), 
				КодыФНСПрописью, КодыФНСИзменились);
		Иначе
			ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.КодыФНС"), "", Ложь);
		КонецЕсли;
	Иначе
		ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.СдаватьВФНС"), 
			СдаватьВФНСИсходный, Ложь);
		ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.КодыФНС"), 
			КодыФНСПрописьюИсходные, Ложь);
	КонецЕсли;
	
	// ПФР
	Если ИзменитьСоставКонтролирующихОрганов Тогда
		ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.СдаватьВПФР"), 
			СдаватьВПФР, СдаватьВПФРИзменился);
		Если СдаватьВПФР Тогда
			ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.КодПФР"), 
				КодПФР, КодПФРИзменился);
		Иначе
			ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.КодПФР"), "", Ложь);
		КонецЕсли;
	Иначе
	    ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.СдаватьВПФР"), 
			СдаватьВПФРИсходный, Ложь);
		ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.КодПФР"), 
			КодПФРИсходный, Ложь);
	КонецЕсли;
		
	// ФСС
	Если ИзменитьСоставКонтролирующихОрганов Тогда
 		ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.СдаватьВФСС"), 
			СдаватьВФСС, СдаватьВФССИзменился);
	Иначе
		ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.СдаватьВФСС"),
			СдаватьВФССИсходный, Ложь);
	КонецЕсли;
	
	// Росстат
	Если ИзменитьСоставКонтролирующихОрганов Тогда
		ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.СдаватьВРосстат"), 
			СдаватьВРосстат, СдаватьВРосстатИзменился);
		Если СдаватьВРосстат Тогда
			ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.КодРосстата"), 
				КодРосстата, КодРосстатаИзменился);
		Иначе
			ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.КодРосстата"), "", Ложь);
		КонецЕсли;
	Иначе
		ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.СдаватьВРосстат"), 
			СдаватьВРосстатИсходный, Ложь);
		ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.КодРосстата"), 
			КодРосстатаИсходный, Ложь);
	КонецЕсли;
	
	// Росалкогольрегулирование
	Если ИзменитьСоставКонтролирующихОрганов Тогда
		ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.СдаватьВФСРАР"), 
			СдаватьВФСРАР, СдаватьВФСРАРИзменился);
	Иначе
		ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.СдаватьВФСРАР"), 
			СдаватьВФСРАРИсходный, Ложь);
	КонецЕсли;
	
	// Росприроднадзор
	Если ИзменитьСоставКонтролирующихОрганов Тогда
		ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.СдаватьВРПН"), 
			СдаватьВРПН, СдаватьВРПНИзменился);
	Иначе
		ДобавленнаяСтрокаВТаблицеПодтверждения(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.СдаватьВРПН"), 
			СдаватьВРПНИсходный, Ложь);
	КонецЕсли;
	
	// Выделяем желтым измененные строки
	ДобавитьЖелтыеСтроки();
	
	// После перерисовывания таблицы возвращаемся в ту же строку, в которой выполнялось редактирование
	Если НаименованиеТекущегоРеквизитаТаблицы <> Неопределено Тогда
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("НазваниеРеквизита", НаименованиеТекущегоРеквизитаТаблицы);
		ПараметрыОтбора.Вставить("ВыделятьСтрокуЖелтым", Ложь);
		
		МассивСтрокКоллекции = ТаблицаДанныхЗаявленияНаПодключение.НайтиСтроки(ПараметрыОтбора);
		Если МассивСтрокКоллекции.Количество() > 0 Тогда
			ИдентификаторСтроки = МассивСтрокКоллекции[0].ПолучитьИдентификатор();
			Элементы.ТаблицаДанныхЗаявленияНаПодключение.ТекущаяСтрока = ИдентификаторСтроки;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПризнакВозможностиРедактирования();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыИзПредыдущегоЗаявления()
	
	Получатели.Очистить();
	СброситьНаправленияСдачиОтчетности();
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	
	ТелефонОсновной					= Реквизит.ТелефонОсновной;
	ТелефонДополнительный			= Реквизит.ТелефонДополнительный;
	ТелефонМобильный				= Реквизит.ТелефонМобильный;
	ЭлектроннаяПочта				= Реквизит.ЭлектроннаяПочта;

	ВладелецЭЦПФамилия				= Реквизит.ВладелецЭЦПФамилия;
	ВладелецЭЦПИмя					= Реквизит.ВладелецЭЦПИмя;
	ВладелецЭЦПОтчество				= Реквизит.ВладелецЭЦПОтчество;
	ВладелецЭЦПДолжность			= Реквизит.ВладелецЭЦПДолжность;
	ВладелецЭЦППодразделение		= Реквизит.ВладелецЭЦППодразделение;
	ВладелецЭЦПВидДокумента			= Реквизит.ВладелецЭЦПВидДокумента;
	ВладелецЭЦПСерияДокумента		= Реквизит.ВладелецЭЦПСерияДокумента;
	ВладелецЭЦПНомерДокумента		= Реквизит.ВладелецЭЦПНомерДокумента;
	ВладелецЭЦПДатаВыдачиДокумента	= Реквизит.ВладелецЭЦПДатаВыдачиДокумента;
	ВладелецЭЦПКемВыданДокумент		= Реквизит.ВладелецЭЦПКемВыданДокумент;
	ДополнительныйКодФСС			= Реквизит.ДополнительныйКодФСС;
	НомерОсновнойПоставки1с			= Реквизит.НомерОсновнойПоставки1с;
	СдаватьВФСРАР					= Реквизит.ПодатьЗаявкуНаСертификатДляФСРАР;
	КодРегионаФСРАР					= Реквизит.КодРегионаФСРАР;
	СдаватьВРПН						= Реквизит.ПодатьЗаявкуНаПодключениеРПН;
	ВладелецЭЦПСНИЛС				= Реквизит.ВладелецЭЦПСНИЛС;
	ОГРН							= Реквизит.ОГРН;
	ВладелецЭЦПТип 					= КонтекстЭДОСервер.ПолучитьТипИсполнителя(Реквизит.ВладелецЭЦПТип);
	ВладелецЭЦПТипПеречисление 		= Реквизит.ВладелецЭЦПТип;
	
	Для Каждого СтрокаНаправления из Реквизит.Получатели цикл 
		
		Если СтрокаНаправления.ТипПолучателя = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС") Тогда
			СдаватьВФНС = Истина;
			НоваяСтрокаНаправления = Получатели.Добавить();
			НоваяСтрокаНаправления.ТипПолучателя	= СтрокаНаправления.ТипПолучателя;
			НоваяСтрокаНаправления.КодПолучателя	= СтрокаНаправления.КодПолучателя;
			НоваяСтрокаНаправления.КПП				= СтрокаНаправления.КПП;
		ИначеЕсли СтрокаНаправления.ТипПолучателя	= ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ПФР") Тогда
			СдаватьВПФР = Истина;
			КодПФР = СтрокаНаправления.КодПолучателя;
		ИначеЕсли СтрокаНаправления.ТипПолучателя = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСС") Тогда
			СдаватьВФСС = Истина;	
		ИначеЕсли СтрокаНаправления.ТипПолучателя = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСГС") Тогда	
			СдаватьВРосстат = Истина;
			КодРосстата = СтрокаНаправления.КодПолучателя;
		КонецЕсли;
	КонецЦикла;
	
	ВладелецЭЦПТипПеречисление = Реквизит.ВладелецЭЦПТип;
	
	//заполнение дополнительных реквизитов формы, которых нет в документе
	СогласиеСЛицензионнымСоглашением = Истина;
	
	Если НЕ ПустаяСтрока(ТелефонМобильный) Тогда
		ПолучатьСМС = Истина;
	КонецЕсли;
	
	// Сбрасываем все установленнные флажки
	СброситьВсеФлажкиСервер();
	
КонецПроцедуры

#КонецОбласти

#Область Гиперссылки

&НаКлиенте
Процедура ОткрытьПодсказкуПоЭЦП(Команда)
	Форма = ПолучитьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ФормаПодсказкиПоЭЦП");
	Форма.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокПартнеров1С(Команда)
	ОбщегоНазначенияКлиент.ПерейтиПоСсылке("http://v8.1c.ru/edi/edi_app/1c-otchetnost/partners/index.htm");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСсылкуНаСтатьюПоПодключению(Команда)
	
	ОбщегоНазначенияКлиент.ПерейтиПоСсылке("http://its.1c.ru/db/metod81#content:5274:1");
	
КонецПроцедуры

#КонецОбласти

#Область Прочие

&НаКлиентеНаСервереБезКонтекста
Процедура ПодготовитьФорму(Форма)	
	
	Элементы = Форма.Элементы;
	
	Элементы.ИнструкцияПоСозданиюКлючаЭЦП.Видимость = Не Форма.ЭтоЭлектроннаяПодписьВМоделиСервиса;
	Элементы.ИзменитьСпособыДоставкиПаролей.Видимость = Форма.ЭтоЭлектроннаяПодписьВМоделиСервиса;
	Элементы.ИзмененияВСпособахДоставкиПаролей.Видимость = Форма.ЭтоЭлектроннаяПодписьВМоделиСервиса;
	Если Форма.ЭтоЭлектроннаяПодписьВМоделиСервиса Тогда
		СпособыДоставкиПаролей = ПолучитьСпособыДоставкиПаролей(Форма.УчетнаяЗапись);
		
		Форма.ТелефонДляПаролейИсходный = СпособыДоставкиПаролей.НомерТелефона;
		Форма.ЭлектроннаяПочтаДляПаролейИсходная = ?(ЗначениеЗаполнено(СпособыДоставкиПаролей.АдресЭлектроннойПочты), СпособыДоставкиПаролей.АдресЭлектроннойПочты, НСтр("ru = '<не задан>'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УчетнаяЗаписьОрганизации(Организация) Экспорт
	
	ВидОбменаСКонтролирующимиОрганами = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Организация, "ВидОбменаСКонтролирующимиОрганами");
	Если ВидОбменаСКонтролирующимиОрганами = Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате Тогда
		Возврат Организация.УчетнаяЗаписьОбмена;
	Иначе
		Возврат Справочники.УчетныеЗаписиДокументооборота.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция СпецоператорИзУчетнойЗаписи(УчетнаяЗапись, ОператорПоддерживаетСМСУведомление = Неопределено)
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	ОператорПоддерживаетСМСУведомление = (ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьПараметрСпецоператора(УчетнаяЗапись.СпецоператорСвязи, "ПризнакПоддержкиСМС") = "Истина");
	Возврат УчетнаяЗапись.СпецоператорСвязи; 
КонецФункции

&НаКлиенте
Процедура ЗаменитьЗапятуюНаИВСтроке(Текст)

	// В списке реквизитов заменяем последнюю запятую на букву "и"
	Если СтрЧислоВхождений(Текст, "%1") = 1 Тогда
		
		Текст = СтрЗаменить(Текст, "%1", " и ");
		
	ИначеЕсли СтрЧислоВхождений(Текст, "%1") > 1 Тогда
		
		МассивПодстрок 				= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "%1");
		ПоследнийЭлементМассива 	= МассивПодстрок[МассивПодстрок.Количество() - 1];
		Текст 						= СтрЗаменить(Текст, "%1" + ПоследнийЭлементМассива, " и " + ПоследнийЭлементМассива);
		
	КонецЕсли;
	
	Текст = СтрЗаменить(Текст, "%1", ", ");

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТекст(ИзменившийсяРеквизит, РеквизитИзменился = Истина, Текст, ПрефиксФразы = "")
	
	НазваниеРеквизита = Строка(ИзменившийсяРеквизит);
	
	// Делаем так, чтобы все слова начинались с маленькой буквы
	// Если вторая буква большая, то считаем что слова все состоит из больших букв (например ИНН) и не переводим это слово в нижний регистр
	Если Сред(НазваниеРеквизита, 2, 1) <> Врег(Сред(НазваниеРеквизита, 2, 1)) Тогда
		НазваниеРеквизита = НРег(Лев(НазваниеРеквизита, 1)) + Сред(НазваниеРеквизита, 2);
	КонецЕсли;
	НазваниеРеквизита = ?(ПрефиксФразы = "", "", ПрефиксФразы + " ") + НазваниеРеквизита;
	
	Если РеквизитИзменился Тогда
		Если Текст = "" Тогда
			Текст = НазваниеРеквизита;
		Иначе
			Текст = Текст + "%1" + НазваниеРеквизита;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЕстьРеквизитДопКодФССУОрганизации()
	Возврат Метаданные.Справочники.Организации.Реквизиты.Найти("ДополнительныйКодФСС") <> Неопределено;
КонецФункции

&НаСервере
Функция НаименованиеСубъектаРФ(КодРегиона)
	
	Результат = "";
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	МакетКодыРегионов = КонтекстЭДОСервер.ПолучитьМакет("ФСРАРПорталыРегионов");
	
	НомерКолонкиКодРегиона = МакетКодыРегионов.Область("КодРегиона").Лево;
	НомерКолонкиНаименованиеРегиона = МакетКодыРегионов.Область("НаименованиеРегиона").Лево;
	ОбластьПоискаКодаРегиона = МакетКодыРегионов.Область(1, НомерКолонкиКодРегиона, МакетКодыРегионов.ВысотаТаблицы, НомерКолонкиКодРегиона);
	
	ОбластьСКодомРегиона = МакетКодыРегионов.НайтиТекст(Формат(Число(КодРегиона), "ЧН=0; ЧГ=; ЧЦ=2; ЧВН=;"), , ОбластьПоискаКодаРегиона, , Истина);
	
	Если ОбластьСКодомРегиона <> Неопределено Тогда
		Результат = МакетКодыРегионов.Область(ОбластьСКодомРегиона.Верх, НомерКолонкиНаименованиеРегиона, ОбластьСКодомРегиона.Верх, НомерКолонкиНаименованиеРегиона).Текст;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПреобразоватьНомерТелефонаКМаскеСервер(НомерТелефона)
	
	// Маска +7 (999) 999-99-99
	// Номер телефона 89851234567
	КодВСкобках =  Сред(НомерТелефона, 2,3);
	ПервыйБлокЧисел = Сред(НомерТелефона, 5,3);
	ВторойБлокЧисел = Сред(НомерТелефона, 8,2);
	ТретийБлокЧисел = Сред(НомерТелефона, 10,2);

	Результат = "";
	Если НЕ ПустаяСтрока(СтрЗаменить(НомерТелефона, "-", "")) Тогда
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					  "+7 (%1) %2-%3-%4",
					  КодВСкобках,
					  ПервыйБлокЧисел,
					  ВторойБлокЧисел,
					  ТретийБлокЧисел)
	КонецЕсли;
				  
	Возврат Результат;  

КонецФункции

&НаКлиенте
Процедура СравнитьКриптопровайдера()

	ТипКриптопровайдера = КонтекстЭДОКлиент.КриптопровайдерИзНастроекПрограммы();
	Если НЕ ЗначениеЗаполнено(ТипКриптопровайдера) Тогда
		ТипКриптопровайдера = ТипКриптопровайдераНаКомпьютере;
	КонецЕсли;
	
	// Сравниваем криптопровайдеры
	КриптопровайдерИзменился = ТипКриптопровайдераИсходный <> ТипКриптопровайдера;

	// Отображаем наименование на форме
	Криптопровайдер = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ПолучитьПараметрыКриптопровайдера(ТипКриптопровайдера);
	ОтображаемоеНазваниеКриптопровайдера = "";
	Если ЗначениеЗаполнено(Криптопровайдер) Тогда
		ОтображаемоеНазваниеКриптопровайдера = Криптопровайдер.ОтображаемоеНазвание;
	КонецЕсли;
	
	УстановитьНаименованияКриптопровайдеровНаФорме(ОтображаемоеНазваниеКриптопровайдера);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокУстановленныхКриптопровайдеров(ВыполняемоеОповещение)
	
	Если НЕ ЗначениеЗаполнено(Организация) ИЛИ ЭтоЭлектроннаяПодписьВМоделиСервиса Тогда
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		Возврат;
	КонецЕсли;
	
	Инфотекс	 = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ПолучитьПараметрыКриптопровайдера(КонтекстЭДОКлиент.СтруктураСсылочныхДанных.Перечисления_ТипыКриптоПровайдеров_VipNet);
	КриптоПро	 = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ПолучитьПараметрыКриптопровайдера(КонтекстЭДОКлиент.СтруктураСсылочныхДанных.Перечисления_ТипыКриптоПровайдеров_CryptoPro);
	
	НоваяСтрока = ТаблицаЗначенийКС.Добавить();
	НоваяСтрока.Криптопровайдер	 = Инфотекс.ОтображаемоеНазвание;
	НоваяСтрока.УстановленОС	 = Ложь;
	НоваяСтрока.Выбран1с		 = Ложь;
	
	НоваяСтрока = ТаблицаЗначенийКС.Добавить();
	НоваяСтрока.Криптопровайдер	 = КриптоПро.ОтображаемоеНазвание;
	НоваяСтрока.УстановленОС	 = Ложь;
	НоваяСтрока.Выбран1с		 = Ложь;
	
	
	Контекст = Новый Структура("Инфотекс, КриптоПро, ВыполняемоеОповещение", Инфотекс, КриптоПро, ВыполняемоеОповещение);
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьСписокУстановленныхКриптопровайдеровЗавершение", ЭтотОбъект, Контекст);
	ДокументооборотСКОКриптографияКлиент.ПолучитьКриптопровайдеры(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокУстановленныхКриптопровайдеровЗавершение(Результат, ВходящийКонтекст) Экспорт
	
	ВыполняемоеОповещение = ВходящийКонтекст.ВыполняемоеОповещение;
	Инфотекс = ВходящийКонтекст.Инфотекс;
	КриптоПро = ВходящийКонтекст.КриптоПро;

	Если Результат.Выполнено Тогда
		Для Каждого Криптопровайдер Из Результат.Криптопровайдеры Цикл
			Если Криптопровайдер.Имя = Инфотекс.Имя И Строка(Криптопровайдер.Тип) = Инфотекс.Тип Тогда 
				ТаблицаЗначенийКС.Получить(0).УстановленОС = Истина;
			ИначеЕсли Криптопровайдер.Имя = КриптоПро.Имя И Строка(Криптопровайдер.Тип) = КриптоПро.Тип Тогда 
				ТаблицаЗначенийКС.Получить(1).УстановленОС = Истина;
			КонецЕсли;			
		КонецЦикла;
	КонецЕсли;
		
	КоличествоУстановленных = 0;
	
	// Определение, какой криптопровайдер установлен
	Для каждого Строка из ТаблицаЗначенийКС Цикл
		
		Инфотекс = Строка.Криптопровайдер =
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ПолучитьПараметрыКриптопровайдера(КонтекстЭДОКлиент.СтруктураСсылочныхДанных.Перечисления_ТипыКриптоПровайдеров_VipNet).ОтображаемоеНазвание;
		
		Если Строка.УстановленОС Тогда
			Строка.Статус = "(установлен на компьютере)";
			КоличествоУстановленных = КоличествоУстановленных + 1;
		ИначеЕсли  Инфотекс Тогда
			Строка.Статус = "(требуется установка)";
		Иначе
			Строка.Статус = "(требуется приобретение и установка)";
		КонецЕсли;
		
		Строка.ОтображаемыйТекст = Строка.Криптопровайдер + " " + Строка.Статус;
		
	КонецЦикла;
	
	Для каждого Строка из ТаблицаЗначенийКС Цикл
		Если Строка.УстановленОС Тогда
								
			Если Строка.Криптопровайдер = "VipNet CSP" Тогда
				ВыборКриптопровайдера = 1;
			Иначе
				ВыборКриптопровайдера = 2;
			КонецЕсли;
			
			Если ВыборКриптопровайдера = 1 Тогда
				ТипКриптопровайдераНаКомпьютере = КонтекстЭДОКлиент.СтруктураСсылочныхДанных.Перечисления_ТипыКриптоПровайдеров_VipNet;
			Иначе
				ТипКриптопровайдераНаКомпьютере = КонтекстЭДОКлиент.СтруктураСсылочныхДанных.Перечисления_ТипыКриптоПровайдеров_CryptoPro;
			КонецЕсли;
			
			УстановитьНаименованияКриптопровайдеровНаФорме(Строка.Криптопровайдер);
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);

КонецПроцедуры

&НаСервере
Функция ИмяПеречисленияПараметрыПодключенияК1СОтчетности(ЭлементПеречисления)
	
	ИмяПеречисления = ЭлементПеречисления.Метаданные().Имя;
	ИндексЗначенияПеречисления = Перечисления.ПараметрыПодключенияК1СОтчетности.Индекс(ЭлементПеречисления);
	Возврат Метаданные.Перечисления.ПараметрыПодключенияК1СОтчетности.ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;

КонецФункции
	
&НаКлиенте
Процедура ПоддерживаетсяОтправкаВторичныхЗаявлений(ВыполняемоеОповещение)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоддерживаетсяОтправкаВторичныхЗаявленийЗавершение", ЭтотОбъект, Новый Структура("ВыполняемоеОповещение", ВыполняемоеОповещение));
	КонтекстЭДОКлиент.ЕстьДанныеДляФормированияВторичногоЗаявления(УчетнаяЗапись,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоддерживаетсяОтправкаВторичныхЗаявленийЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	
	ПоддерживаетсяВторичноеЗаявление = Истина;
	ЕстьДанныеДляФормированияВторичногоЗаявления = Результат.ЕстьДанные;
	УжеНастроенаУчетнаяЗаписьДокументооборота = ЗначениеЗаполнено(КонтекстЭДОКлиент.УчетнаяЗаписьОрганизации(Организация));
	СпецоператорПоддерживаетВторичныеЗаявления = КонтекстЭДОКлиент.ПоддерживаетсяВторичноеЗаявление(Организация);
	
	// Проверяем возможность создания вторичного заявления
	Если НЕ УжеНастроенаУчетнаяЗаписьДокументооборота ИЛИ НЕ СпецоператорПоддерживаетВторичныеЗаявления ИЛИ НЕ ЕстьДанныеДляФормированияВторичногоЗаявления Тогда
		
		ПоддерживаетсяВторичноеЗаявление = Ложь;
		ОформитьЭлементыФормыНаПервомШаге();
		
		Если НЕ УжеНастроенаУчетнаяЗаписьДокументооборота Тогда
			
			// Случай, когда организация не подключена к 1С-Отчетности
			ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ПоказатьФормуПредложениеОформитьЗаявлениеНаПодключение(Организация);
			
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, ПоддерживаетсяВторичноеЗаявление);

		ИначеЕсли НЕ СпецоператорПоддерживаетВторичныеЗаявления Тогда
			
			// Случай, когда спецоператор не поддерживает отправку вторичных заявлений
			ПоказатьПредупреждение(, НСтр("ru = 'Спецоператор не поддерживает отправку вторичных заявлений.
									|Для изменения настроек подключения к 1С-Отчетности свяжитесь со службой поддержки спецоператора'"));
									
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, ПоддерживаетсяВторичноеЗаявление);
		
		ИначеЕсли НЕ ЕстьДанныеДляФормированияВторичногоЗаявления Тогда
			
			// Случай, когда невозможно получить новый рег файл 
			ТекстОшибокДляМастераПодключенияК1СОтчетности = "";
			
			ДополнительныеПараметры = Новый Структура("ТекстОшибокДляМастераПодключенияК1СОтчетности, УчетнаяЗапись, ВыполняемоеОповещение, ПоддерживаетсяВторичноеЗаявление", ТекстОшибокДляМастераПодключенияК1СОтчетности, УчетнаяЗапись, ВыполняемоеОповещение, ПоддерживаетсяВторичноеЗаявление);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПоддерживаетсяОтправкаВторичныхЗаявленийПовторныйЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			
			КонтекстЭДОКлиент.ЕстьДанныеДляФормированияВторичногоЗаявления(УчетнаяЗапись, ТекстОшибокДляМастераПодключенияК1СОтчетности, ОписаниеОповещения);

		Иначе
			
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, ПоддерживаетсяВторичноеЗаявление);

		КонецЕсли;
	Иначе
		
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, ПоддерживаетсяВторичноеЗаявление);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоддерживаетсяОтправкаВторичныхЗаявленийПовторныйЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ЕстьДанные = Результат.ЕстьДанные;
	ТекстОшибокДляМастераПодключенияК1СОтчетности = Результат.ТекстОшибок;
	УчетнаяЗапись = ДополнительныеПараметры.УчетнаяЗапись;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	ПоддерживаетсяВторичноеЗаявление = ДополнительныеПараметры.ПоддерживаетсяВторичноеЗаявление;
	
	Если НЕ ЕстьДанные Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("УчетнаяЗапись", УчетнаяЗапись);
		ПараметрыФормы.Вставить("ТекстОшибки", ТекстОшибокДляМастераПодключенияК1СОтчетности);
		ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ПредупреждениеОНевозможностиПолучитьНастройкиУчетнойЗаписи", ПараметрыФормы);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, ПоддерживаетсяВторичноеЗаявление);

КонецПроцедуры

&НаКлиенте
Процедура НаправлениеСдачиОтчетностиПодключено(ИмяФлагаНаправленияСдачиОтчетности, НаправлениеСдачиОтчетности, ИзначальноНаправлениеБылоПодключено, ВыполняемоеОповещение)

	НаправлениеПодключено = ЭтаФорма[ИмяФлагаНаправленияСдачиОтчетности];
	
	Результат = НаправлениеПодключено;
	
	Если ИзначальноНаправлениеБылоПодключено И НЕ НаправлениеПодключено Тогда
		
		ЭтаФорма[ИмяФлагаНаправленияСдачиОтчетности] = Истина;
		
		ТекстВопрос = НСтр("ru = 'Отправка отчетности в %1 станет недоступной после отключения данного направления.
		|Вы уверены, что хотите отключить направление сдачи отчетности %1 ?'");
		ТекстВопрос = СтрЗаменить(ТекстВопрос, "%1", НаправлениеСдачиОтчетности);
		ОписаниеОповещения = Новый ОписаниеОповещения("НаправлениеСдачиОтчетностиПодключеноЗавершение", ЭтотОбъект, ВыполняемоеОповещение);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопрос, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеСдачиОтчетностиПодключеноЗавершение(Ответ, ВыполняемоеОповещение) Экспорт
	
	Результат = (Ответ <> КодВозвратаДиалога.Да);
	
	ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Результат);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.РезультатИзмененияНомера.Видимость = Форма.РезультатИзмененияНомера;
	Элементы.РезультатИзмененияПочты.Видимость = Форма.РезультатИзмененияПочты;
	
	Элементы.ТелефонДляПаролей.ТолькоПросмотр = Форма.ИзменениеНомераНачато;
	Элементы.ВыполнитьЗаменуНомера.Видимость = Не Форма.ИзменениеНомераНачато;
	Элементы.ГруппаКодыПодтвержденияТелефон.Видимость = Форма.ИзменениеНомераНачато;
	
	Элементы.ЭлектроннаяПочтаДляПаролей.ТолькоПросмотр = Форма.ИзменениеПочтыНачато;
	Элементы.ВыполнитьЗаменуПочты.Видимость = Не Форма.ИзменениеПочтыНачато;
	Элементы.ГруппаПодтверждениеСменаПочты.Видимость = Форма.ИзменениеПочтыНачато;
	
	Если Форма.РезультатИзмененияНомера Тогда
		Элементы.РезультатИзмененияНомера.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
													НСтр("ru = 'Номер телефона %1 успешно изменен на %2'"),
													Форма.ТелефонДляПаролейИсходный,
													Форма.ТелефонДляПаролей);
	КонецЕсли;	
												
	Если Форма.РезультатИзмененияПочты Тогда
		Элементы.РезультатИзмененияПочты.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
													НСтр("ru = 'Адрес электронной почты %1 успешно изменен на %2'"),
													?(ЗначениеЗаполнено(Форма.ЭлектроннаяПочтаДляПаролейИсходная), Форма.ЭлектроннаяПочтаДляПаролейИсходная, НСтр("ru = '<не задан>'")),
													?(ЗначениеЗаполнено(Форма.ЭлектроннаяПочтаДляПаролей), Форма.ЭлектроннаяПочтаДляПаролей, НСтр("ru = '<не задан>'")));	
	КонецЕсли;
												                                                           
	Элементы.ГруппаТелефоныДляПаролей.Видимость = Не Форма.РезультатИзмененияНомера;											
	Элементы.ГруппаКодыПодтвержденияТелефон.Видимость = Форма.ИзменениеНомераНачато;
	
	Элементы.ГруппаАдресаЭлектроннойПочтыДляПаролей.Видимость = Не Форма.РезультатИзмененияПочты;
	Элементы.ГруппаПодтверждениеСменаПочты.Видимость = Форма.ИзменениеПочтыНачато;
	
	Элементы.ТелефонДляПаролей.Маска = ?(Форма.ИзменениеНомераНачато, "", "+7 (999) 999-99-99");
	
	Если Форма.ИзменениеПочтыНачато Тогда
		Если ЗначениеЗаполнено(Форма.ЭлектроннаяПочтаДляПаролей) Тогда
			Элементы.ПодсказкаСменаПочты.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
													НСтр("ru = 'На номер %1  и адрес электронной почты %2 высланы коды для подтверждения. 
                                                          |Чтобы завершить замену, введите эти коды в произвольном порядке.'"),
													Форма.ТелефонДляПаролейИсходный,
													Форма.ЭлектроннаяПочтаДляПаролей);
		Иначе
			Элементы.ПодсказкаСменаПочты.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
													НСтр("ru = 'На номер %1 выслан код для подтверждения. 
                                                          |Чтобы завершить замену, введите этот код.'"),
													Форма.ТелефонДляПаролейИсходный);
													
			Элементы.КодПодтвержденияСменыПочты2.Видимость = Ложь;
			Элементы.ОтступЗаголовокПочта.Видимость = Ложь;
			Форма.КодПодтвержденияСменыПочты2 = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаменаНомераИПочтыДляПаролей

&НаКлиенте
Процедура ВыполнитьЗаменуНомера(Команда)
	
	КриптосервисВМоделиСервисаКлиентСервер.НомерТелефона(ТелефонДляПаролей);
	Результат = НачатьИзменениеНомераТелефонаНаСервере(УчетнаяЗапись, ТелефонДляПаролей, ИдентификаторЗаявленияСменыНомера);
	Если Результат Тогда
		ИзменениеНомераНачато = Истина;
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьИзменениеНомера(Команда)
	
	Результат = ПодтвердитьИзменениеНомераТелефонаНаСервере(
		УчетнаяЗапись,
		ИдентификаторЗаявленияСменыНомера,
		ТелефонДляПаролей, 
		КодПодтвержденияСменыНомера1, 
		КодПодтвержденияСменыНомера2,
		ПарольСменаНомера);
		
	Если Результат Тогда
		РезультатИзмененияНомера = Истина;
		ИзменениеНомераНачато = Ложь;
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодтвердитьИзменениеНомераТелефонаНаСервере(УчетнаяЗапись, ИдентификаторЗаявления, НовыйНомерТелефона, КодПодтверждения1, КодПодтверждения2, Пароль)
	
	Возврат МодульУчетаЗаявленийАбонентаВМоделиСервиса.ЗавершитьИзменениеНомераТелефона(				
				ИдентификаторЗаявления,
				НовыйНомерТелефона, 
				КодПодтверждения1, 
				КодПодтверждения2, 
				Пароль);
	
КонецФункции

&НаСервереБезКонтекста
Функция НачатьИзменениеНомераТелефонаНаСервере(УчетнаяЗапись, НовыйНомерТелефона, ИдентификаторЗаявления)
	
	Возврат МодульУчетаЗаявленийАбонентаВМоделиСервиса.НачатьИзменениеНомераТелефона(
				УчетнаяЗапись.ИдентификаторДокументооборота,
				НовыйНомерТелефона,
				ИдентификаторЗаявления);
				
КонецФункции
			
&НаКлиенте
Процедура ВыполнитьЗаменуПочты(Команда)
	
	Результат = НачатьИзменениеАдресаЭлектроннойПочтыНаСервере(УчетнаяЗапись, ЭлектроннаяПочтаДляПаролей, ИдентификаторЗаявленияСменыПочты);
	Если Результат Тогда
		ИзменениеПочтыНачато = Истина;
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьИзменениеАдреса(Команда)
	
	Результат = ПодтвердитьИзменениеАдресаЭлектроннойПочтыНаСервере(
		УчетнаяЗапись,
		ИдентификаторЗаявленияСменыПочты,
		ЭлектроннаяПочтаДляПаролей, 
		КодПодтвержденияСменыПочты1, 
		КодПодтвержденияСменыПочты2,
		ПарольСменаПочты);
		
	Если Результат Тогда
		РезультатИзмененияПочты = Истина;
		ИзменениеПочтыНачато = Ложь;
		УправлениеФормой(ЭтаФорма);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодтвердитьИзменениеАдресаЭлектроннойПочтыНаСервере(УчетнаяЗапись, ИдентификаторЗаявления, НовыйАдресЭлектроннойПочты, КодПодтверждения1, КодПодтверждения2, Пароль)
	
	Возврат МодульУчетаЗаявленийАбонентаВМоделиСервиса.ЗавершитьИзменениеАдресаЭлектроннойПочты(				
				ИдентификаторЗаявления,
				НовыйАдресЭлектроннойПочты, 
				КодПодтверждения1, 
				КодПодтверждения2, 
				Пароль);
	
КонецФункции

&НаСервереБезКонтекста
Функция НачатьИзменениеАдресаЭлектроннойПочтыНаСервере(УчетнаяЗапись, НовыйАдресЭлектроннойПочты, ИдентификаторЗаявления)
	
	Возврат МодульУчетаЗаявленийАбонентаВМоделиСервиса.НачатьИзменениеАдресаЭлектроннойПочты(
				УчетнаяЗапись.ИдентификаторДокументооборота,
				НовыйАдресЭлектроннойПочты,
				ИдентификаторЗаявления);
				
КонецФункции

#КонецОбласти 

#КонецОбласти