&НаКлиенте
Перем СтруктураРедактированияКИ;

&НаКлиенте
Перем КонтекстЭДОКлиент Экспорт;

&НаКлиенте
Перем ДанныеОрганизации;

&НаКлиенте
Перем ДанныеЗаполнения;

&НаКлиенте
Перем ДанныеСотрудника;

&НаКлиенте
Перем ПрограммноеЗакрытие;

&НаКлиенте
Перем СтруктураДанныхСпецоператорыСвязи;

&НаКлиенте
Перем ОбъектТипИсполнителя;

&НаКлиенте
Перем УстановкаCSPПроизводиласьИзЭтогоОкна;

&НаКлиенте
Перем СтруктураРеквизитов;

&НаКлиенте
Перем ЗадаватьВопросПроСуществованиеУчетнойЗаписи;

&НаКлиенте
Перем РеквизитыНеХранящиесяВБазе;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Реквизит = Параметры.Реквизит;
	ЗаполнитьСписокВыбораРегионовРФ();
	
	ДатаЗапускаМастера = ТекущаяДатаСеанса();
	
	// Получаем организацию для случая одной организации в базе 
	Если РегламентированнаяОтчетностьВызовСервера.ИспользуетсяОднаОрганизация() Тогда
		
		Модуль = ОбщегоНазначения.ОбщийМодуль("Справочники.Организации");
		Организация = Модуль.ОрганизацияПоУмолчанию();
		
	Иначе
		
		// Получаем организацию из параметров
		Организация = Параметры.Организация;
		
		Если НЕ ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(Реквизит) Тогда 
			Организация = Реквизит.Организация;
		КонецЕсли;
		
		// Получаем организацию из основной организации
		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			Организация = ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ОсновнаяОрганизация();
		КонецЕсли;
		
	КонецЕсли;
	
	ДоступнаЭлектроннаяПодписьВМоделиСервиса = ПолучитьФункциональнуюОпцию("ИспользоватьЭлектроннуюПодписьВМоделиСервиса");
	Элементы.МестоХраненияЭлектроннойПодписи.Видимость = ДоступнаЭлектроннаяПодписьВМоделиСервиса;
	РежимРаботыСКлючами = ?(ДоступнаЭлектроннаяПодписьВМоделиСервиса, 1, 2);
	
	РазделениеВключено = ОбщегоНазначенияПовтИсп.РазделениеВключено();
	
	ВерсияБСП = СтандартныеПодсистемыСервер.ВерсияБиблиотеки();
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.СкрытьЭлементыФормыПриИспользованииОднойОрганизации(ЭтаФорма, "ДекорацияОтступ9");
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.СкрытьЭлементыФормыПриИспользованииОднойОрганизации(ЭтаФорма, "Организация");
	
	Если ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ЭтоВариантИнтерфейсаТакси() Тогда
		Элементы.Логотип1СОтчетность.Ширина = 20;
	Иначе
		Элементы.Логотип1СОтчетность.Ширина = 26;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если ВебКлиент Тогда
		Элементы.ТелефонМобильный.Маска = "+9 (999) 999-99-99";
		ТелефонМобильный = "+7 (   )    -  -  ";
	#Иначе
		Элементы.ТелефонМобильный.Маска = "+7 (999) 999-99-99";
		ТелефонМобильный = "";
	#КонецЕсли
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	Элементы.ОткрытьВидеоПоПодключению.Видимость = Ложь;
	
	УстановкаCSPПроизводиласьИзЭтогоОкна 	  	= Ложь;
	СогласиеСЛицензионнымСоглашением 	 	  	= Ложь;
	ПрограммноеЗакрытие 				 	  	= Ложь;
	ЗначениеОрганизации 				 	  	= Неопределено;
	СохранитьИВыгрузить 				 	  	= 1;
	ЗадаватьВопросПроСуществованиеУчетнойЗаписи = Ложь;
	КриптопровайдерВыбранВручную 				= Ложь;
	
	ЗаполнитьДанныеСлужбыПоддержки();
	ИнициализацияЗначений(Организация);
	
	// инициализация, выполняемая в случае, когда реквизиты мастера заполняются на основе уже существующего заявления
	ЗаявлениеСозданоКопированием = ЗначениеЗаполнено(Реквизит);
	Если ЗаявлениеСозданоКопированием Тогда
		ДанныеОрганизацииЗаполненыКопированием 	= Истина;
		ДанныеВладельцаЭЦПЗаполненыКопированием = Истина;
		
		Организация = КонтекстЭДОКлиент.ПолучитьРеквизит(Реквизит, "Организация");
		ЗначениеОрганизации = Организация;
		ДанныеЗаполнения = Новый Структура();
		СтруктураРеквизитов = Новый Структура("Организация,ПриОткрытии",?(ЗначениеЗаполнено(Организация),Организация,Неопределено),НЕ ДанныеЗаполнения = Неопределено);
		Если ДанныеЗаполнения <> Неопределено Тогда
			СтруктураРеквизитов.Вставить("АдресЮридический",);
			СтруктураРеквизитов.Вставить("АдресФактический",);
		КонецЕсли;
		КонтекстЭДОКлиент.ЗаполнитьДанные(СтруктураРеквизитов);
		ДанныеЗаполнения 	= КонтекстЭДОКлиент.ПолучитьДанныеЗаполнения(СтруктураРеквизитов);
		
		// Заполняем заявление на основе скопированного документа
		ЗаполнитьДанныеКопирования();
		
		// Заполняем данные организации
		ИзменитьОформлениеРеквизитовОрганизации();
		
		// Определяем руководителя и гл бухгалтера
		ОпределитьОтветственныеЛицаОрганизации();

		ДанныеОрганизации 	= ДанныеЗаполнения.СтруктураДанныхОрганизации;
		ТипИсполнителя 		= КонтекстЭДОКлиент.ПолучитьТипИсполнителя(ВладелецЭЦПТипПеречисление);
		ПолучитьВидИсполнителя(ДанныеОрганизации,ТипИсполнителя);
		
		Если ЗначениеЗаполнено(ВладелецЭЦП) Тогда
			Если ВыборДиректора = 1 И Руководитель <> ВладелецЭЦП ИЛИ
				ВыборБухгалтера = 1 И ГлБухгалтер <> ВладелецЭЦП  Тогда
				
				// Если в предыдущем заявлении был сохранен владелец ЭЦП, и это был Руководитель или ГлБухгалтер, а
				// теперь Руководитель или ГлБухгалтер сменились в организации, то все данные по владельцу ЭЦП 
				// данные заполняются текущими сведениями, а не скопированными
				ДанныеВладельцаЭЦПЗаполненыКопированием = Ложь;
				
			ИначеЕсли ВыборИсполнителя = 1 Тогда
				
				// Если в предыдущем заявлении был сохранен владелец ЭЦП, и это Сотрудник, то все данные по владельцу ЭЦП 
				// данные заполняются скопированными сведениями
				СотрудникВыбор = ВладелецЭЦП;
			КонецЕсли;
		Иначе
			// Если реквизит предыдущего заявления Владелец ЭЦП пустой, то сохраняем только позицию переключателя:
			// руководитель, гл. бухгалтер или сотрудник, все остальные данные заполняются текущими сведениями,
			// а не скопированными
			ДанныеВладельцаЭЦПЗаполненыКопированием = Ложь;
		КонецЕсли;
		
		ИзменитьОформлениеВладельцаЭЦП();
		
	Иначе
		
		// переключатель стоит по умолчанию в состоянии Руководитель
		Если ВыборДиректора = 0 и ВыборБухгалтера = 0 и ВыборИсполнителя = 0 Тогда 
			ОбработкаСотрудника(1);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Организация) Тогда
			// Инициализация, выполняемая в случае, когда мастер вызывается из формы Организации 
			// или создается новое заявления из списка документов "Зявление абонента".
			ДанныеЗаполнения = Новый Структура();
			ОбработатьИзменениеОрганизации(ДанныеЗаполнения,);
		Иначе
			// инициализация, выполняемая в случае, когда мастер вызывается с пустой Организацией.
			СтруктураРеквизитов = Новый Структура("Организация,ПриОткрытии,ПолучитьАдрес",ЗначениеОрганизации,Истина,);
			КонтекстЭДОКлиент.ЗаполнитьДанные(СтруктураРеквизитов);
			ДанныеЗаполнения = КонтекстЭДОКлиент.ПолучитьДанныеЗаполнения(СтруктураРеквизитов);
			Если ПустаяСтрока(НомерОсновнойПоставки1с) Тогда
				НомерОсновнойПоставки1с = КонтекстЭДОКлиент.ПолучитьНомерОсновнойПоставки1с();
			КонецЕсли;
			
		КонецЕсли;
		
		// Если на втором шаге пользователем был установлен криптопровайдер и компьютер был перезагружен, то 
		// при повторном открытии базы сразу откроется мастер подключения к 1С-Отчетности на втором шаге.
		ОткрытьМастерНаВторомШагеЕслиЭтоПродолжениеПодключения();
				
	КонецЕсли;
	
	СтруктураДанныхСпецоператорыСвязи = Новый Структура("СпецоператорыСвязи,Макет,ТекстМакетаСоглашение,ЗначениеЗаполненияСпецоператораСвязи",
														ДанныеЗаполнения.СпецоператорыСвязи, ДанныеЗаполнения.МакетПараметрыСпецоператоровСвязи,
														ДанныеЗаполнения.ТекстМакетаСоглашение, ДанныеЗаполнения.ЗначениеЗаполненияСпецоператораСвязи);
														
	ЗаполнитьСписокУЦ();
	ОбновитьДанныеСпецОператора();
	
	УправлениеКнопкамиНавигации();
	
	Элементы.ГруппаКодовФНС.Видимость = Ложь;
	Элементы.КодПФР.Видимость 		  = Ложь;
	Элементы.КодРосстата.Видимость	  = Ложь;
	

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ОтменитьАвтоматическоеОткрытиеМастера();
	
	Если Элементы.КоманднаяПанельДалее.ПодчиненныеЭлементы.Закрыть.Заголовок = "Закрыть" Тогда
		ПрограммноеЗакрытие = Истина;
	КонецЕсли;	
	
	Если НЕ ПрограммноеЗакрытие Тогда
		
		Отказ = Истина;
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Прервать работу помощника?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПрограммноеЗакрытие = Истина;
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Организации" Тогда
		
		Если (Источник = Организация ИЛИ Параметр = Организация)
		И Элементы.ОсновнаяПанель.ТекущаяСтраница <> Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.ГруппаДанныхДляЗаявления Тогда
			ОбновитьРеквизитыОрганизации();
			ДанныеОрганизацииЗаполненыКопированием = Ложь;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_ФизическиеЛица" Тогда	
		
		Если Параметр = ВладелецЭЦП ИЛИ Параметр = Руководитель ИЛИ Параметр = ГлБухгалтер ИЛИ Параметр = СотрудникВыбор
			ИЛИ Источник = ВладелецЭЦП ИЛИ Источник = Руководитель ИЛИ Источник = ГлБухгалтер ИЛИ Источник = СотрудникВыбор Тогда 
			
			ОбновитьРеквизитыВладельцаЭЦП();
			ИзменитьОформлениеВладельцаЭЦП();
			ДанныеВладельцаЭЦПЗаполненыКопированием = Ложь;
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ПроверитьЧтоМастерФормированияЗаявкиНаПодключениеИлиИзменениеПодключенияОткрыт" И Источник = Организация Тогда
		
		Параметр.ФормаМастераФормированияЗаявкиНаПодключениеИлиИзменениеПодключенияОткрыта = Истина;
		
	ИначеЕсли ИмяСобытия = "Завершение редактирования направлений" Тогда
		
		Элементы.Получатели.Обновить();
		Элементы.УдалитьНаправление.Доступность = Получатели.Количество() <> 0;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура АдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.Имя = "АдресЮридический" Тогда
		Адрес = АдрЮР;
	Иначе
		Адрес = АдрФакт;
	КонецЕсли;
	
	Если Лев(СокрЛП(ВерсияБСП) + ".", 4) = "2.1." Тогда
		НовыйАдрес = КонтекстЭДОКлиент.РедактироватьАдрес(Адрес, Элемент.Имя, Элемент);
		ОбновитьАдрес(НовыйАдрес, Элемент);
		
	Иначе
		ДополнительныеПараметры = Элемент;
		
		ТипЗначения = Тип("ОписаниеОповещения");
		ПараметрыКонструктора = Новый Массив(3);
		ПараметрыКонструктора[0] = "ОткрытьФормуКонтактнойИнформацииЗавершение";
		ПараметрыКонструктора[1] = ЭтаФорма;
		ПараметрыКонструктора[2] = ДополнительныеПараметры;
		
		Оповещение = Новый(ТипЗначения, ПараметрыКонструктора);
		
		КонтекстЭДОКлиент.РедактироватьАдрес(Адрес, Элемент.Имя, Элемент, Оповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформацииЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	НовыйАдрес = КонтекстЭДОКлиент.РедактироватьАдресКонвертацияРезультата(РезультатЗакрытия);
	ОбновитьАдрес(НовыйАдрес, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьАдрес(НовыйАдрес, Элемент)
	
	Если НовыйАдрес.Модифицированность Тогда
		Если Элемент.Имя = "АдресЮридический" Тогда
			АдрЮР              = НовыйАдрес.Адрес;
			АдресЮридический   = НовыйАдрес.АдресПредставление;
		Иначе
			АдрФакт            = НовыйАдрес.Адрес;
			АдресФактический   = НовыйАдрес.АдресПредставление;
		КонецЕсли;
	КонецЕсли;
	
	КодРегионаФСРАР 		= РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(АдрЮр).Регион;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ДанныеОрганизацииЗаполненыКопированием = Ложь;
	
	ОбработатьИзменениеОрганизации(,Ложь);
	ЗадаватьВопросПроСуществованиеУчетнойЗаписи = Истина;
	
	ИнициализацияЗначений(Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ДиректорПриИзменении(Элемент)
	
	ДанныеВладельцаЭЦПЗаполненыКопированием = Ложь;
		
	ОчиститьДанныеСотрудника(Истина);
	ОбработкаСотрудника(1);
	ИзменитьОформлениеВладельцаЭЦП();
	
КонецПроцедуры

&НаКлиенте
Процедура ГлавныйБухгалтерПриИзменении(Элемент)
	
	ДанныеВладельцаЭЦПЗаполненыКопированием = Ложь;
	
	ОчиститьДанныеСотрудника(Истина);
	ОбработкаСотрудника(2);
	ИзменитьОформлениеВладельцаЭЦП();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительПриИзменении(Элемент)
	
	ДанныеВладельцаЭЦПЗаполненыКопированием = Ложь;
	
	ОчиститьДанныеСотрудника(Истина);
	ОбработкаСотрудника(3);
	ИзменитьОформлениеВладельцаЭЦП();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	ОчиститьРеквизитыФормы();
	ИзменитьОформлениеВладельцаЭЦП();
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	РедактироватьВыбранноеНаправление();
КонецПроцедуры

&НаКлиенте
Процедура АдресОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СотрудникОчистка(Элемент, СтандартнаяОбработка)
	
	СотрудникВыбор = "";
	ОчиститьДанныеСотрудника(Истина);
	Элементы.СотрудникВыбор.ОтметкаНезаполненного = НЕ ЗначениеЗаполнено(СотрудникВыбор);
	СотрудникВыбор = Неопределено;
    СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СотрудникНачалоВыбораЗавершение", ЭтотОбъект);
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ПолучитьИсполнителя(Организация, Неопределено, ОписаниеОповещения);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	СотрудникВыбор = Результат;
	Элементы.СотрудникВыбор.ОтметкаНезаполненного = НЕ ЗначениеЗаполнено(СотрудникВыбор);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникОткрытие(Элемент, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(СотрудникВыбор) Тогда
		СтОбработка = Ложь;
		ПараметрФормы = Новый Структура("Ключ", СотрудникВыбор);
		Форма = ПолучитьФорму("Справочник.ФизическиеЛица.ФормаОбъекта", ПараметрФормы);
		Форма.Открыть();
	Иначе
		СтОбработка = НЕ ЗначениеЗаполнено(СотрудникВыбор);
	КонецЕсли;
	Элементы.СотрудникВыбор.ОтметкаНезаполненного = НЕ ЗначениеЗаполнено(СотрудникВыбор);
	
	СтандартнаяОбработка = СтОбработка;
	
КонецПроцедуры

&НаКлиенте
Процедура СпецОператорПриИзменении(Элемент)
	
	ОбновитьДанныеСпецОператора();
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СотрудникНачалоВыбораЗавершение", ЭтотОбъект);
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ПолучитьИсполнителя(Организация, Неопределено, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРеквизитОрганизации(Элемент)
	
	ИмяРеквизита = СтрЗаменить(Элемент.Имя, "Декорация", "");
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ОткрытьФормуОрганизацииНаРеквизите(Организация, ИмяРеквизита);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьФИОВладельцаЭЦП(Элемент)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Ключ", ВладелецЭЦП);
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ОткрытьФормуВладельцаЭЦПНаРеквизите(ВладелецЭЦП,"ФИО");		
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВладелецЭЦПСНИЛСНажатие(Элемент)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Ключ", ВладелецЭЦП);
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ОткрытьФормуВладельцаЭЦПНаРеквизите(ВладелецЭЦП,"СНИЛС");		
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРуководительНажатие(Элемент)
	
	СтандартнаяОбработка = Ложь;
			
	Если ЗначениеЗаполнено(Руководитель) Тогда  
		ПоказатьЗначение(, Руководитель);
	Иначе	
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ОткрытьФормуРуководителя(Организация);		
	КонецЕсли;
	ПодключитьОбработчикОжидания("ОбработкаОжиданияОбновитьДанныеРуководителя",1);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияГлБухгалтерНажатие(Элемент)
	
	СтандартнаяОбработка = Ложь;
			
	Если ЗначениеЗаполнено(ГлБухгалтер) Тогда  
		ПоказатьЗначение(, ГлБухгалтер);
	Иначе	
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ОткрытьФормуГлБухгалтера(Организация);
	КонецЕсли;
	ПодключитьОбработчикОжидания("ОбновитьДанныеГлБухгалтера",1);
	
КонецПроцедуры

&НаКлиенте
&НаКлиенте
Процедура КодРосстатаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("КодРосстатаНачалоВыбораЗавершение", ЭтотОбъект);
	КонтекстЭДОКлиент.КодРосстата(КодРосстата, Спецоператор, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура КодРосстатаНачалоВыбораЗавершение(НовоеЗначениеКодаРосстата, ДополнительныеПараметры) Экспорт
	
	// если в окне выбора ТОГСа нажали отмену, а предыдущее значение было заполнено, то такой результата не присваиваем
	Если НЕ (ПустаяСтрока(НовоеЗначениеКодаРосстата) И НЕ ПустаяСтрока(КодРосстата)) Тогда
		КодРосстата = НовоеЗначениеКодаРосстата;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СдаватьВРосстатПриИзменении(Элемент)
	
	Если СдаватьВРосстат И НЕ СдаватьВФНС Тогда 
		СдаватьВФНС = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияНадписьНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Ключ", Организация);
	ПутьКОсновнойФормеСправочникаОрганизации = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ПутьКОсновнойФормеСправочникаОрганизации();
	ФормаОрганизации = ПолучитьФорму(ПутьКОсновнойФормеСправочникаОрганизации, СтруктураПараметров);
	Если ФормаОрганизации.Открыта() Тогда
		ФормаОрганизации.Активизировать();
	Иначе			
		ФормаОрганизации.Открыть();
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура СдаватьВФНСПриИзменении(Элемент)
	
	Если НЕ СдаватьВФНС Тогда 
		СдаватьВРосстат = Ложь;
	КонецЕсли;		
		
КонецПроцедуры

&НаКлиенте
Процедура ПризнакОбособленногоПодразделенияПриИзменении(Элемент)
	
	Если ПризнакОбособленногоПодразделения Тогда
		Если РеквизитыНеХранящиесяВБазе.Найти(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ДополнительныйКодФСС")) <> Неопределено Тогда
			ДополнительныйКодФСС = ДанныеОрганизации.РеквизитДопКодФСС;
		КонецЕсли;
	Иначе
		ДополнительныйКодФСС = "";
	КонецЕсли;
	
	ИзменитьОформлениеРеквизитовОрганизации();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура КоманднаяПанельМастерНазад(Команда)
	ПоказатьПредыдущуюСтраницу();
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельМастерДалее(Команда)
	
	ТекущаяСтраница = Элементы.ОсновнаяПанель.ТекущаяСтраница;
	ОчиститьСообщения();
	МастерДалее = Истина;
	
	Если Не ДоступнаЭлектроннаяПодписьВМоделиСервиса И ТекущаяСтраница = Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.Старт Тогда
		МастерДалее = Истина;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("КоманднаяПанельМастерДалееСтартЗавершение", ЭтотОбъект);
		Если РежимРаботыСКлючами = 2 И МастерДалее Тогда
			ЗаполнитьСписокКриптопровайдеров(ОписаниеОповещения);
		Иначе
			ВыполнитьОбработкуОповещения(ОписаниеОповещения);
		КонецЕсли;
		
		Возврат;
		
	ИначеЕсли ТекущаяСтраница = Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.МестоХраненияЭлектроннойПодписи Тогда
		
		МастерДалее = Истина;
		Если ДоступнаЭлектроннаяПодписьВМоделиСервиса Тогда
			Если РежимРаботыСКлючами = 0 Тогда  // Не выбрали ничего
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Укажите место хранения ключа электронной подписи'"), ,"РежимРаботыСКлючами");
				МастерДалее = Ложь;
			ИначеЕсли РежимРаботыСКлючами = 1 Тогда // Облачная ЭП
				Если СтрДлина(СтрЗаменить(ТелефонМобильныйДляАвторизации, " ", "")) = 16 И Не ТелефонПодтвержден Тогда
					Подтвердить();
					Если Не ТелефонПодтвержден Тогда
						МастерДалее = Ложь;
					КонецЕсли;
				КонецЕсли;
				Если ЗначениеЗаполнено(ЭлектроннаяПочтаДляПаролей) И Не ПочтаПодтверждена Тогда
					ПодтвердитьПочта();
					Если Не ПочтаПодтверждена Тогда
						МастерДалее = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				Если СтрДлина(СтрЗаменить(ТелефонМобильныйДляАвторизации, " ", "")) <> 16 Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						НСтр("ru='Укажите номер мобильного телефона'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),, "ТелефонМобильныйДляАвторизации");
					МастерДалее = Ложь;
				КонецЕсли;			
			КонецЕсли;	
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура("МастерДалее", МастерДалее);
		ОписаниеОповещения = Новый ОписаниеОповещения("КоманднаяПанельМастерДалееМестоХраненияЭлектроннойПодписиЗавершение", ЭтотОбъект, ДополнительныеПараметры);

		Если РежимРаботыСКлючами = 2 И МастерДалее Тогда
			ЗаполнитьСписокКриптопровайдеров(ОписаниеОповещения);
		Иначе
			ВыполнитьОбработкуОповещения(ОписаниеОповещения);
		КонецЕсли;
		
		Возврат;
		
	ИначеЕсли ТекущаяСтраница = Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.ИспользуемыйКриптопровайдер Тогда
		
		Если ВыборКриптопровайдера = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Укажите криптопровайдер'"), ,"ВыборКриптопровайдера");
			МастерДалее = Ложь;
			Возврат;
		Иначе
			ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.УдалитьВыборCSPИзВременныхНастроек();
		КонецЕсли;
		
		Если ВыборКриптопровайдера = 1 Тогда
			ТипКриптопровайдера = КонтекстЭДОКлиент.СтруктураСсылочныхДанных.Перечисления_ТипыКриптоПровайдеров_VipNet;
		Иначе
			ТипКриптопровайдера = КонтекстЭДОКлиент.СтруктураСсылочныхДанных.Перечисления_ТипыКриптоПровайдеров_CryptoPro;
		КонецЕсли;
		
		Криптопровайдер = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ПолучитьПараметрыКриптопровайдера(ТипКриптопровайдера);
		
		ЗаполнитьКонстанты(Криптопровайдер);
		
	ИначеЕсли ТекущаяСтраница = Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.СоглашениеОПрисоединенииКРегламентуУЦ Тогда
		
		// проверка удостоверяющего центра
		Если Спецоператор = Неопределено ИЛИ Спецоператор= КонтекстЭДОКлиент.СтруктураСсылочныхДанных.Перечисления_СпецоператорыСвязи_ПустаяСсылка Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Удостоверяющий центр""'"), ,"Спецоператор");
			МастерДалее = Ложь;
		КонецЕсли;
		
		// проверка принятия лицензионного соглашения
		Если НЕ СогласиеСЛицензионнымСоглашением Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Для продолжения работы необходимо принять соглашение'"), ,"СогласиеСЛицензионнымСоглашением");
			МастерДалее = Ложь;
		КонецЕсли;
		
		Если МастерДалее Тогда
			Если ЗначениеЗаполнено(Организация) Тогда
				ЗадаватьВопросПроСуществованиеУчетнойЗаписи = Ложь;
			КонецЕсли;
			ИзменитьОформлениеВладельцаЭЦП();
			УстановитьДоступностьМобильногоТелефона();
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ТелефонМобильныйБезРазделителей(ТелефонМобильный)) И РежимРаботыСКлючами = 1 Тогда
			ТелефонМобильный = ТелефонМобильныйДляАвторизации;
			ПолучатьСМС = Истина;
			Элементы.ТелефонМобильный.Доступность = Истина;
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.ГруппаДанныхДляЗаявления Тогда 
		
		// проверка регистрационного номер
		Если ПустаяСтрока(НомерОсновнойПоставки1с) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Регистрационный номер программы""'"), ,"НомерОсновнойПоставки1с");
			МастерДалее = Ложь;
		КонецЕсли;
		
		// проверка организации
		Если ЗначениеЗаполнено(Организация) Тогда
			Если ЗадаватьВопросПроСуществованиеУчетнойЗаписи Тогда 
				ЗадаватьВопросПроСуществованиеУчетнойЗаписи = Ложь;
				// Если организацию выбрали только на этом шаге или на этом шаге ее перевыбрали, тогда необходимо проверить наличие учетной записи абонента.
				
				ДополнительныеПараметры = Новый Структура("МастерДалее", МастерДалее);
				ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПроСуществованиеУчетнойЗаписиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
				КонтекстЭДОКлиент.ПроверитьДляОрганизацииТребуетсяУчетнаяЗапись(Организация, ОписаниеОповещения);
			Иначе
				ГруппаДанныхДляЗаявления(МастерДалее);
			КонецЕсли;
		Иначе 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Организация, по которой будет сдаваться отчетность""'"), ,"Организация");
			МастерДалее = Ложь;
			ГруппаДанныхДляЗаявления(МастерДалее);
		КонецЕсли;
		
		Возврат;
			
	ИначеЕсли ТекущаяСтраница = Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.Реквизиты Тогда 

		// полное наименование
		Если ПустаяСтрока(ПолноеНаименование) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните полное наименование'"), ,"ДекорацияПолноеНаименование");
			МастерДалее = Ложь;
		КонецЕсли;	
                  	
		Если ЭтоЮридическоеЛицо Тогда
			
			// ИНН
			Если ПустаяСтрока(ИНН) Тогда 
			    ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните ИНН'"), ,"ДекорацияИНН");
				МастерДалее = Ложь;
			ИначеЕсли НЕ КонтекстЭДОКлиент.ПроверитьЦифровойКодЗаданнойДлины(ИНН,10) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'ИНН должен состоять из 10 цифр'"), ,"ДекорацияИНН");
				МастерДалее = Ложь;
			КонецЕсли;
			
			// КПП
			Если ПустаяСтрока(КПП) Тогда 
			    ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните КПП'"), ,"ДекорацияКПП");
				МастерДалее = Ложь;
			ИначеЕсли НЕ (КонтекстЭДОКлиент.ПроверитьКПП(КПП)) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'КПП должен состоять из 9 цифр'"), ,"ДекорацияКПП");
				МастерДалее = Ложь;
			КонецЕсли;
			
			// ОГРН
			Если ПустаяСтрока(ОГРН) Тогда 
			    ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните ОГРН'"), ,"ОГРН");
				МастерДалее = Ложь;
			ИначеЕсли НЕ (КонтекстЭДОКлиент.ПроверитьЦифровойКодЗаданнойДлины(ОГРН,13)) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'ОГРН должен состоять из 13 цифр'"), ,"ОГРН");
				МастерДалее = Ложь;
			КонецЕсли;
			
		Иначе
			
			// ИНН
			Если ПустаяСтрока(ИНН) Тогда 
			    ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните ИНН'"), ,"ДекорацияИНН");
				МастерДалее = Ложь;
			ИначеЕсли НЕ КонтекстЭДОКлиент.ПроверитьЦифровойКодЗаданнойДлины(ИНН,12) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'ИНН должен состоять из 12 цифр'"), ,"ДекорацияИНН");
				МастерДалее = Ложь;
			КонецЕсли;
			
			// ОГРН
			Если ПустаяСтрока(ОГРН) Тогда 
			    ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните ОГРН'"), ,"ОГРН");
				МастерДалее = Ложь;
			ИначеЕсли НЕ (КонтекстЭДОКлиент.ПроверитьЦифровойКодЗаданнойДлины(ОГРН,15, Истина)) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'ОГРНИП должен состоять из 15 цифр'"), ,"ОГРН");
				МастерДалее = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		// регистрационный номер в ПФР
		Если СдаватьВПФР Тогда		
			Если ПустаяСтрока(СтрЗаменить(РегНомерПФР,"-","")) Тогда 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните регистрационный номер в ПФР'"), ,"ДекорацияРегНомерПФР");
				МастерДалее = Ложь;
			ИначеЕсли НЕ КонтекстЭДОКлиент.ПроверитьРегистрационныйНомерПФР(РегНомерПФР, Истина) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Регистрационный номер в ПФР должен состоять из 12 цифр (ХХХ-ХХХ-ХХХХХХ)'"), ,"ДекорацияРегНомерПФР");
				МастерДалее = Ложь;
			КонецЕсли;
		КонецЕсли;
				
		Если СдаватьВФСС Тогда
			// регистрационный номер в ФСС
			Если ПустаяСтрока(РегНомерФСС) Тогда 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните регистрационный номер в ФСС'"), ,"ДекорацияРегНомерФСС");
				МастерДалее = Ложь;
			ИначеЕсли НЕ КонтекстЭДОКлиент.ПроверитьЦифровойКодЗаданнойДлины(РегНомерФСС, 10, Истина) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Регистрационный номер в ФСС должен состоять из 10 цифр'"), ,"ДекорацияРегНомерФСС");
				МастерДалее = Ложь;
			КонецЕсли;
		
			// дополнительный код ФСС
			Если ПризнакОбособленногоПодразделения и ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ЭтоЮрЛицо(Организация) и СдаватьВФСС Тогда
				Если ПустаяСтрока(ДополнительныйКодФСС) Тогда 
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните дополнительный код ФСС'"), ,"ДополнительныйКодФСС");
					МастерДалее = Ложь;
				ИначеЕсли НЕ КонтекстЭДОКлиент.ПроверитьЦифровойКодЗаданнойДлины(ДополнительныйКодФСС, 10, Истина) Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Дополнительный код ФСС должен состоять из 10 цифр'"), ,"ДополнительныйКодФСС");
					МастерДалее = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// юридический адрес
		Если ПустаяСтрока(СтрЗаменить(АдрЮР,",","")) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Юридический адрес""'"), ,"АдресЮридический");
			МастерДалее = Ложь;
		Иначе	
			СтрокаОшибкаАдреса = КонтекстЭДОКлиент.ПроверитьАдрес(АдрЮР);
			Если НЕ ПустаяСтрока(СтрокаОшибкаАдреса) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Юридический адрес: %1'"),СтрокаОшибкаАдреса), ,"АдресЮридический");
				МастерДалее = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// фактический адрес
		Если ПустаяСтрока(СтрЗаменить(АдрФакт,",","")) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Фактический адрес""'"), ,"АдресФактический");
			МастерДалее = Ложь;
		Иначе
			СтрокаОшибкаАдреса = КонтекстЭДОКлиент.ПроверитьАдрес(АдрФакт);
			Если НЕ ПустаяСтрока(СтрокаОшибкаАдреса) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Фактический адрес: %1'"),СтрокаОшибкаАдреса), ,"АдресФактический");
				МастерДалее = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// телефон организации
		Если СтрДлина(СокрЛП(ТелефонОсновной)) = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Телефон организации""'"), ,"ТелефонОсновной");
			МастерДалее = Ложь;
		КонецЕсли;
		
		// электронная почта (теперь обязательна)
		Если НЕ КонтекстЭДОКлиент.ЭлектроннаяПочтаВведенаКорректно(
				ЭлектроннаяПочта,
				ПредопределенноеЗначение("Перечисление.ТипыЗаявленияАбонентаСпецоператораСвязи.Первичное")) Тогда
			МастерДалее = Ложь;
		КонецЕсли;
		
		Если ПодатьЗаявкуНаСертификатДляФСРАР Тогда
			
			Если НЕ ЗначениеЗаполнено(КодРегионаФСРАР) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Регион""'"), ,"КодРегионаФСРАР");
				МастерДалее = Ложь;
			КонецЕсли;
			
			Если МастерДалее = Истина Тогда
				
				РегионЮрАдреса = РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(АдрЮр).Регион;
				
				Если КодРегионаФСРАР <> РегионЮрАдреса И ЗначениеЗаполнено(РегионЮрАдреса) Тогда
					НаименованиеРегионаЮрАдреса = НаименованиеСубъектаРФ(Число(РегионЮрАдреса));
					КодРегионаСНаименованием = Формат(Число(РегионЮрАдреса), "ЧН=0; ЧГ=; ЧЦ=2; ЧВН=;") + ?(ЗначениеЗаполнено(НаименованиеРегионаЮрАдреса), " - ", "") + НаименованиеРегионаЮрАдреса;
					ОписаниеОповещения = Новый ОписаниеОповещения("ВопросРегионЗаявкиРосалькогольрегулированияЗавершение", ЭтотОбъект);
					ТекстВопроса = "Регион заявки для Росалкогольрегулирования отличается от указанного в юридическом адресе (""" + КодРегионаСНаименованием + """). Продолжить?";
					ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да);
					Возврат;
				КонецЕсли;
				
				Если МастерДалее И ЗначениеЗаполнено(КодРегионаФСРАР) Тогда
					
					ИнформацияОРегионе = ИнформацияОРегионеФСРАРНаСервере(КодРегионаФСРАР);
					
					СхемаСдачиОтчетности = ПредопределенноеЗначение("Перечисление.СхемыСдачиОтчетностиФСРАР.СдачаВручную");
					Если ИнформацияОРегионе <> Неопределено Тогда
						СхемаСдачиОтчетности = КонтекстЭДОКлиент.СхемаСдачиОтчетностиФСРАР(Ложь, ИнформацияОРегионе.ТипПортала, КодРегионаФСРАР);
					КонецЕсли;
					
					Если СхемаСдачиОтчетности = ПредопределенноеЗначение("Перечисление.СхемыСдачиОтчетностиФСРАР.СдачаВручную") Тогда
						
						ОписаниеОповещения = Новый ОписаниеОповещения("ВопросФСРАРСдачаВручнуюЗавершение", ЭтотОбъект);
						ТекстВопроса = "Для выбранного региона поддерживается функция формирования пакета, содержащего подписанную отчетность, для последующей загрузки на соответствующий портал в интернете." + Символы.ВК + Символы.ПС + Символы.ВК + Символы.ПС
							+ "Обратите внимание, функция отправки отчетности непосредственно из программы (кнопка ""Отправить"") в текущей версии не поддерживается. Продолжить?";
						ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да);
						Возврат;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если МастерДалее Тогда
			
			Если НЕ ЗначениеЗаполнено(КодРосстата) Тогда
				КодРосстата = КонтекстЭДОКлиент.ПолучитьКодТОГСа(КодРегионаФСРАР, Спецоператор, КодРосстата);
			КонецЕсли;
			
		Иначе
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.ВладельцыЭцп Тогда
		
		// фамилия
		Если ПустаяСтрока(ВладелецЭЦПФамилия) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните фамилию'"), ,"ВладелецЭЦПФамилия");
			МастерДалее = Ложь;
		КонецЕсли;
		
		// имя
		Если ПустаяСтрока(ВладелецЭЦПИмя) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните имя'"), ,"ВладелецЭЦПИмя");
			МастерДалее = Ложь;
		КонецЕсли;	
		
		// СНИЛС
		Если ПустаяСтрока(СтрЗаменить(ВладелецЭЦПСНИЛС, "-","")) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните СНИЛС'"), ,"ВладелецЭЦПСНИЛС");
			МастерДалее = Ложь;
		Иначе	
			Если НЕ КонтекстЭДОКлиент.ПроверитьСНИЛС(ВладелецЭЦПСНИЛС) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Некорректно указан СНИЛС сотрудника. Не соответствует маске ХХХ-ХХХ-ХХХ ХХ, где X – любая цифра'"), ,"ВладелецЭЦПСНИЛС");
				МастерДалее = Ложь;
			ИначеЕсли НЕ КонтекстЭДОКлиент.ПроверитьСНИЛС(ВладелецЭЦПСНИЛС, Ложь, Истина) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Некорректно указан СНИЛС сотрудника. Не сошлось контрольное число (СНИЛС не существует)'"), ,"ВладелецЭЦПСНИЛС");
				МастерДалее = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// должность
		Если ЭтоЮридическоеЛицо И ПустаяСтрока(ВладелецЭЦПДолжность) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Должность""'"), ,"ВладелецЭЦПДолжность");
			МастерДалее = Ложь;
		КонецЕсли;
		
		ДокументУдЛичность = Новый Структура("ВладелецЭЦПВидДокумента,ВладелецЭЦПСерияДокумента,ВладелецЭЦПНомерДокумента,ВладелецЭЦПДатаВыдачиДокумента,ВладелецЭЦПКемВыданДокумент",
											  ВладелецЭЦПВидДокумента, ВладелецЭЦПСерияДокумента, ВладелецЭЦПНомерДокумента, ВладелецЭЦПДатаВыдачиДокумента, ВладелецЭЦПКемВыданДокумент);
											  
		// документ, удостоверяющий личность
		Если ПустаяСтрока(ВладелецЭЦПВидДокумента) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Документ, удостоверяющий личность""'"), ,"ВладелецЭЦПВидДокумента");
			МастерДалее = Ложь;
		КонецЕсли;
		
		// серия
		Если ПустаяСтрока(ВладелецЭЦПСерияДокумента) И НЕ КонтекстЭДОКлиент.ПроверитьСериюДокумента(ВладелецЭЦПВидДокумента,ВладелецЭЦПСерияДокумента) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Серия""'"), ,"ВладелецЭЦПСерияДокумента");
			МастерДалее = Ложь;
		КонецЕсли;
		
		// номер
		Если ПустаяСтрока(ВладелецЭЦПНомерДокумента) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Номер""'"), ,"ВладелецЭЦПНомерДокумента");
			МастерДалее = Ложь;
		КонецЕсли;
		
		// дата выдачи
		Если ПустаяСтрока(ВладелецЭЦПДатаВыдачиДокумента) ИЛИ Строка(ВладелецЭЦПДатаВыдачиДокумента) = "01.01.0001 0:00:00" Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Дата выдачи""'"), ,"ВладелецЭЦПДатаВыдачиДокумента");
			МастерДалее = Ложь;
		ИначеЕсли ВладелецЭЦПДатаВыдачиДокумента > ДатаЗапускаМастера ИЛИ Год(ВладелецЭЦПДатаВыдачиДокумента) < 1900 Тогда	
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Некорректно указана дата выдачи'"), ,"ВладелецЭЦПДатаВыдачиДокумента");
			МастерДалее = Ложь;
		КонецЕсли;
		
		// кем выдан
		Если ПустаяСтрока(ВладелецЭЦПКемВыданДокумент) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Кем выдан""'"), ,"ВладелецЭЦПКемВыданДокумент");
			МастерДалее = Ложь;
		КонецЕсли;
	
	ИначеЕсли ТекущаяСтраница = Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.Направления Тогда
		
		// коды ФНС
		Если СдаватьВФНС И Получатели.Количество()=0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните коды ФНС'"), ,"Получатели");
			МастерДалее = Ложь;
		КонецЕсли;
		
		// код отделения ПФР
		Если СдаватьВПФР Тогда
			Если ПустаяСтрока(СтрЗаменить(КодПФР,"-","")) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Код отделения ПФР""'"), ,"КодПФР");
				МастерДалее = Ложь;
			ИначеЕсли СтрДлина(СокрЛП(КодПФР))<> 7 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Код отделения ПФР должен состоять из 6 цифр'"), ,"КодПФР");
				МастерДалее = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// код органа Росстата
		Если СдаватьВРосстат Тогда
			Если ПустаяСтрока(СтрЗаменить(КодРосстата,"-","")) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Код органа Росстата""'"), ,"КодРосстата");
				МастерДалее = Ложь;
			ИначеЕсли СтрДлина(СокрЛП(КодРосстата))<> 5 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Код органа Росстата должен состоять из 4 цифр'"), ,"КодПФР");
				МастерДалее = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если МастерДалее Тогда
			СформироватьТаблицуДляПодтвержденияДанных();
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.Подтверждение Тогда 
		
		ВладелецЭЦПТипПеречисление = КонтекстЭДОКлиент.ПолучитьТипВладельцаЭЦП(?(ВыборДиректора = 1,1,?(ВыборБухгалтера = 1,2,3)));
		
		// создание документа заявления
		СоздатьНовыйДокументЗаявление(2);
		
		ОповеститьОбИзменении(ДокументЗаявление.Ссылка);
				
		Если РежимРаботыСКлючами = 1 Тогда // Облачная ЭП
			СформироватьИОтправитьЗаявление();
			Возврат;
		КонецЕсли;
						
	ИначеЕсли ТекущаяСтраница = Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.ИнструкцияПоСозданиюКлючаЭЦП Тогда 
		
		// создание заявления и его отправка
		СформироватьИОтправитьЗаявление();
		Возврат;
		
	ИначеЕсли ТекущаяСтраница = Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.ПолучениеРезультатаОтправкиЗаявления Тогда
		
		Если ДокументЗаявление.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отклонено") Тогда
			
			ПараметрыФормы = Новый Структура("ЗначениеКопирования",ДокументЗаявление.Ссылка);
			Форма = ПолучитьФорму("Документ.ЗаявлениеАбонентаСпецоператораСвязи.ФормаОбъекта",ПараметрыФормы,,Истина);
			Форма.Открыть();
			
			ПрограммноеЗакрытие = Истина;
			Закрыть();
		ИначеЕсли ДокументЗаявление.Статус =  ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Подготовлено") Тогда
			СформироватьИОтправитьЗаявление();
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если МастерДалее Тогда
		ПоказатьСледующуюСтраницу();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельМастерДалееСтартЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПоказатьСледующуюСтраницу();
	
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельМастерДалееМестоХраненияЭлектроннойПодписиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	МастерДалее = ДополнительныеПараметры.МастерДалее;
	
	Если РежимРаботыСКлючами = 1 И Не ЗначениеЗаполнено(Спецоператор) Тогда
		Спецоператор = ПредопределенноеЗначение("Перечисление.СпецоператорыСвязи.КалугаАстрал");
		ОбновитьДанныеСпецОператора();
	КонецЕсли;
	
	Если МастерДалее Тогда
		ПоказатьСледующуюСтраницу();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПроСуществованиеУчетнойЗаписиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	МастерДалее = ДополнительныеПараметры.МастерДалее;
	Если Результат Тогда
		ГруппаДанныхДляЗаявления(МастерДалее);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ГруппаДанныхДляЗаявления(МастерДалее)
	
	// проверка заполненности сведений о руководителе
	Если ВыборДиректора = 1 И НЕ ЗначениеЗаполнено(Руководитель) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните сведения о руководителе'"), ,"ДекорацияРуководитель");
		МастерДалее = Ложь;
	КонецЕсли;
	
	// проверка заполненности сведений о бухгалтере
	Если ВыборБухгалтера = 1 И НЕ ЗначениеЗаполнено(ГлБухгалтер) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните сведения о бухгалтере'"), ,"ДекорацияГлБухгалтер");
		МастерДалее = Ложь;
	КонецЕсли;
	
	// проверка заполненности сведений о сотруднике
	Если ВыборИсполнителя = 1 И НЕ ЗначениеЗаполнено(СотрудникВыбор) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выберите сотрудника'"), ,"СотрудникВыбор");
		МастерДалее = Ложь;
	КонецЕсли;	
	
	// проверка сочетания выбранных контролирующих органов
	Если НЕ (СдаватьВФНС ИЛИ СдаватьВПФР ИЛИ СдаватьВФСС ИЛИ СдаватьВРосстат ИЛИ ПодатьЗаявкуНаСертификатДляФСРАР ИЛИ ПодатьЗаявкуНаПодключениеРПН) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Укажите хотя бы один контролирующий орган, в который будет сдаваться отчетность'"), ,"СдаватьВФНС");
		МастерДалее = Ложь;
	ИначеЕсли НЕ СдаватьВФНС И НЕ СдаватьВПФР Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Среди контролирующих органов, в которые будет сдаваться отчетность, должены быть ФНС или ПФР'"), ,"СдаватьВФНС");
		МастерДалее = Ложь;
	КонецЕсли;
	
	// проверка мобильного телефона
	Если ПолучатьСМС Тогда
		ТелефонМобильныйБезРазделителей = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ТелефонМобильныйБезРазделителей(ТелефонМобильный);
		Если ПустаяСтрока(ТелефонМобильныйБезРазделителей) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните мобильный телефон'"), ,"ТелефонМобильный");
			МастерДалее = Ложь;
		ИначеЕсли НЕ КонтекстЭДОКлиент.ПроверитьЦифровойКодЗаданнойДлины(ТелефонМобильныйБезРазделителей, 11, Истина) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Мобильный телефон должен иметь формат 
			|+7 (XXX) XXX-XX-XX'"), ,"ТелефонМобильный");
			МастерДалее = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если МастерДалее Тогда
		
		Элементы.НадписьРегистрационныйНомерВФСС.Видимость = СдаватьВФСС;
		Элементы.ДекорацияРегНомерФСС.Видимость = СдаватьВФСС;
		
		ОтключитьОбработчикОжидания("ОбновитьДанныеГлБухгалтера");
		ОтключитьОбработчикОжидания("ОбработкаОжиданияОбновитьДанныеРуководителя");
		УстановитьВидимостьКодовКонтролирующихОрганов();
		
		ОбновитьЭлементыСтраницыОтчетностьВФСРАР();
		ИзменитьОформлениеРеквизитовОрганизации();
		Элементы.НадписьОГРН.Заголовок = ?(ЭтоЮридическоеЛицо,"ОГРН:","ОГРНИП:");
		
		Если НЕ ДанныеВладельцаЭЦПЗаполненыКопированием Тогда
			Если ВыборДиректора = 1 Тогда
				ЗаполнитьДанныеСотрудника(1);
			ИначеЕсли ВыборБухгалтера = 1 Тогда
				ЗаполнитьДанныеСотрудника(2);
			ИначеЕсли ВыборИсполнителя = 1 Тогда
				ЗаполнитьДанныеСотрудника(3);
			Иначе
				ТипВыбора = 0;
			КонецЕсли;
		КонецЕсли;
		
		ИзменитьОформлениеРеквизитовВладельцаЭЦП();
		
	КонецЕсли;
	
	Если МастерДалее Тогда
		ПоказатьСледующуюСтраницу();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросРегионЗаявкиРосалькогольрегулированияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да И ЗначениеЗаполнено(КодРегионаФСРАР) Тогда
		
		ИнформацияОРегионе = ИнформацияОРегионеФСРАРНаСервере(КодРегионаФСРАР);
		
		СхемаСдачиОтчетности = ПредопределенноеЗначение("Перечисление.СхемыСдачиОтчетностиФСРАР.СдачаВручную");
		Если ИнформацияОРегионе <> Неопределено Тогда
			СхемаСдачиОтчетности = КонтекстЭДОКлиент.СхемаСдачиОтчетностиФСРАР(Ложь, ИнформацияОРегионе.ТипПортала, КодРегионаФСРАР);
		КонецЕсли;
		
		Если СхемаСдачиОтчетности = ПредопределенноеЗначение("Перечисление.СхемыСдачиОтчетностиФСРАР.СдачаВручную") Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросФСРАРСдачаВручнуюЗавершение", ЭтотОбъект);
			ТекстВопроса = "Для выбранного региона поддерживается функция формирования пакета, содержащего подписанную отчетность, для последующей загрузки на соответствующий портал в интернете." + Символы.ВК + Символы.ПС + Символы.ВК + Символы.ПС
			+ "Обратите внимание, функция отправки отчетности непосредственно из программы (кнопка ""Отправить"") в текущей версии не поддерживается. Продолжить?";
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да);
		Иначе
			КодРосстата = КонтекстЭДОКлиент.ПолучитьКодТОГСа(КодРегионаФСРАР, Спецоператор, КодРосстата);
			ПоказатьСледующуюСтраницу();
		КонецЕсли;
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросФСРАРСдачаВручнуюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		КодРосстата = КонтекстЭДОКлиент.ПолучитьКодТОГСа(КодРегионаФСРАР, Спецоператор, КодРосстата);
		ПоказатьСледующуюСтраницу();
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ИнформацияОРегионеФСРАРНаСервере(Знач КодРегиона)
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДОСервер.ИнформацияОРегионеФСРАР(КодРегиона);
	
КонецФункции

&НаКлиенте
Процедура УдалитьНаправление(Команда)
	
	ТекущаяСтрока = Элементы.Получатели.ТекущаяСтрока;
	
	Если КонтекстЭДОКлиент.ТекущаяСтрокаВыбрана(Получатели,ТекущаяСтрока,"удаления") Тогда
		ДополнительныеПараметры = Новый Структура("ТекущаяСтрока", ТекущаяСтрока);
		ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьНаправлениеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Удалить направление %1?'"),Элементы.Получатели.ТекущиеДанные.ТипПолучателя);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьНаправлениеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ТекущаяСтрока = ДополнительныеПараметры.ТекущаяСтрока;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЭлементКоллекции = Получатели.НайтиПоИдентификатору(ТекущаяСтрока);
		ИндексЭлементаКоллекции = Получатели.Индекс(ЭлементКоллекции);
		Получатели.Удалить(ИндексЭлементаКоллекции);
		Элементы.УдалитьНаправление.Доступность = Получатели.Количество() <> 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьНаправления(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ВосстановитьНаправленияЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Восстановить значения кодов по умолчанию?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьНаправленияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Получатели.Очистить();
		ВосстановитьНаправленияПоУмолчанию();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНаправление(Команда)
	
	Отбор = Новый Структура("ТипПолучателя",ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	
	НаправлениеДействие = "Добавить";
	
	ОткрытьФормуНаправления();
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьНаправление(Команда)
	ТекущаяСтрока = Элементы.Получатели.ТекущаяСтрока;
	
	Если КонтекстЭДОКлиент.ТекущаяСтрокаВыбрана(Получатели,ТекущаяСтрока,"копирования") Тогда
		ЭлементКоллекции = Получатели.НайтиПоИдентификатору(ТекущаяСтрока);
		Если ЭлементКоллекции.ТипПолучателя = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС") Тогда
			НаправлениеДействие = "Добавить";
			ОткрытьФормуНаправления();
		Иначе
			Сообщить(НСтр("ru = 'Выбранное действие допустимо только для направления ФНС'"));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьНаправление(Команда)
	РедактироватьВыбранноеНаправление();
КонецПроцедуры

&НаКлиенте
Процедура ВывестиСоглашениеНапечать(Команда)
	Элементы.ПолеHTMLЛицензии.Документ.execCommand("Print");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСсылкуНаСтатьюПоПодключению(Команда)
	КонтекстЭДОКлиент.ОткрытьИнструкциюПоПодключениюК1СОтчетности();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВидеоПоПодключению(Команда)
	КонтекстЭДОКлиент.ОткрытьВидеоИнструкциюПоПодключениюК1СОтчетности();
КонецПроцедуры

&НаКлиенте
Процедура СкачатьVipNet(Команда)
	
	КонтекстЭДОКлиент.СкачатьVipNet();
	УстановкаCSPПроизводиласьИзЭтогоОкна = Истина;		
	СохранитьВыборCSPВоВременныеНастройки(Организация);
		
КонецПроцедуры

&НаКлиенте
Процедура СкачатьCryptoPro(Команда)
	
	КонтекстЭДОКлиент.СкачатьCryptoPro();
	УстановкаCSPПроизводиласьИзЭтогоОкна = Истина;
	СохранитьВыборCSPВоВременныеНастройки(Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнструкциюПоУстановкеVipNet(Команда)
	ОбщегоНазначенияКлиент.ПерейтиПоСсылке("http://its.1c.ru/db/elreps#content:26:1:_%D0%A3%D1%81%D1%82%D0%B0%D0%BD%D0%BE%D0%B2%D0%BA%D0%B0_ViPNet_CSP");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнструкциюПоУстановкеCryptoProCSP(Команда)
	ОбщегоНазначенияКлиент.ПерейтиПоСсылке("http://www.cryptopro.ru/sites/default/files/private/csp/36R2/6497/doc.zip");	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодсказкуПоУдостоверяющемуЦентру(Команда)
	Форма = ПолучитьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ФормаПодсказкиЧтоТакоеУдостоверяющийЦентр");
	Форма.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСайтУдостоверяющегоЦентра(Команда)
	КонтекстЭДОКлиент.ОткрытьСтраницуУЦНажатие(Спецоператор);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодсказкуПоРегистрационномуНомеру(Команда)
	ПриложениеЗапущеноВРежимеВебКлиента = Ложь;
	
	Если РазделениеВключено Тогда
		Форма = ПолучитьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ФормаПодсказкиКакУзнатьРегНомерВебКлиент");
		Форма.Открыть();
	Иначе 
		Форма = ПолучитьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ФормаПодсказкиКакУзнатьРегНомер");
		Форма.Открыть();	
	КонецЕсли; 	
		
КонецПроцедуры

&НаКлиенте
Процедура НапечататьЗаявление(Команда)
	
	СоздатьНовыйДокументЗаявление(3);
	ЗаявлениеПолучатель = КонтекстЭДОКлиент.ПолучитьПараметрСпецоператораКлиент(Спецоператор,Новый Структура("ЗаявлениеПолучатель"),СтруктураДанныхСпецоператорыСвязи.Макет).ЗаявлениеПолучатель;
	КонтекстЭДОКлиент.НапечататьДокумент(КонтекстЭДОКлиент.ПодготовитьМакет(ДокументЗаявление,ЗаявлениеПолучатель,"ПАРАМЕТРЫ_ПЕЧАТИ_ПечатьЗаявка","ПечатьЗаявка"), "Заявление на подключение");

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодсказкуПоЭЦП(Команда)
	Форма = ПолучитьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ФормаПодсказкиПоЭЦП");
	Форма.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнструкциюПоСозданиюКлючаЭЦП(Команда)
	
	КонтекстЭДОКлиент.ОткрытьИнструкциюИнструкциюПоСозданиюКлючаЭЦП(ТипКриптопровайдера);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокПартнеров1С(Команда)
	ОбщегоНазначенияКлиент.ПерейтиПоСсылке("http://v8.1c.ru/edi/edi_app/1c-otchetnost/partners/index.htm");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура ЗаполнитьСписокУЦ()
	
	Элементы.Спецоператор.СписокВыбора.ЗагрузитьЗначения(КонтекстЭДОКлиент.ПолучитьСпецоператорыСвязи(СтруктураДанныхСпецоператорыСвязи.СпецоператорыСвязи,СтруктураДанныхСпецоператорыСвязи.Макет));
	Если Элементы.Спецоператор.СписокВыбора.Количество() = 1 Тогда
		Спецоператор = Элементы.Спецоператор.СписокВыбора.Получить(0).Значение;
		ОбновитьДанныеСпецОператора();
	ИначеЕсли НЕ ЗначениеЗаполнено(СпецОператор) И НЕ СтруктураДанныхСпецоператорыСвязи.ЗначениеЗаполненияСпецоператораСвязи = Неопределено Тогда
		СпецОператор = СтруктураДанныхСпецоператорыСвязи.ЗначениеЗаполненияСпецоператораСвязи;
		ОбновитьДанныеСпецОператора();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеКопирования()
	
	Спецоператор = Реквизит.СпецоператорСвязи;
	СпецоператорСвязи = Спецоператор;
	
	Если Реквизит.ТипКриптопровайдера = Перечисления.ТипыКриптоПровайдеров.VipNet Тогда
		ВыборКриптопровайдера = 1;
	Иначе
		ВыборКриптопровайдера = 2;
	КонецЕсли;
	
	Организация										= Реквизит.Организация;
	КраткоеНаименование								= Реквизит.КраткоеНаименование;
	ПолноеНаименование								= Реквизит.ПолноеНаименование;
	ИНН												= Реквизит.ИНН;
	КПП												= Реквизит.КПП;
	РегНомерПФР										= Реквизит.РегНомерПФР;
	РегНомерФСС										= Реквизит.РегНомерФСС;
	КрупнейшийНалогоплательщик						= Реквизит.ПризнакКрупнейшегоНалогоплательщика;
	ПризнакОбособленногоПодразделения				= Реквизит.ПризнакОбособленногоПодразделения;
	АдрЮР											= РегламентированнаяОтчетностьВызовСервера.ЗаменитьТекстРегионаНаКодРегиона(Реквизит.АдресЮридический);
	АдрФакт											= РегламентированнаяОтчетностьВызовСервера.ЗаменитьТекстРегионаНаКодРегиона(Реквизит.АдресФактический);
	АдресЮридический								= РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(Реквизит.АдресЮридический, Истина);
	АдресФактический								= РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(Реквизит.АдресФактический, Истина);
	Элементы.АдресФактический.КнопкаВыбора			= Истина;
	Элементы.АдресЮридический.КнопкаВыбора			= Истина;
	ТелефонОсновной									= Реквизит.ТелефонОсновной;
	ТелефонДополнительный							= Реквизит.ТелефонДополнительный;
	ТелефонМобильный								= Реквизит.ТелефонМобильный;
	ЭлектроннаяПочта								= Реквизит.ЭлектроннаяПочта;
	ЭтоЮридическоеЛицо								= Реквизит.ТипОрганизации;
	ВладелецЭЦП										= Реквизит.ВладелецЭЦП;
	ВладелецЭЦПФамилия								= Реквизит.ВладелецЭЦПФамилия;
	ВладелецЭЦПИмя									= Реквизит.ВладелецЭЦПИмя;
	ВладелецЭЦПОтчество								= Реквизит.ВладелецЭЦПОтчество;
	ВладелецЭЦПДолжность							= Реквизит.ВладелецЭЦПДолжность;
	ВладелецЭЦППодразделение						= Реквизит.ВладелецЭЦППодразделение;
	ВладелецЭЦПВидДокумента							= Реквизит.ВладелецЭЦПВидДокумента;
	ВладелецЭЦПСерияДокумента						= Реквизит.ВладелецЭЦПСерияДокумента;
	ВладелецЭЦПНомерДокумента						= Реквизит.ВладелецЭЦПНомерДокумента;
	ВладелецЭЦПДатаВыдачиДокумента					= Реквизит.ВладелецЭЦПДатаВыдачиДокумента;
	ВладелецЭЦПКемВыданДокумент						= Реквизит.ВладелецЭЦПКемВыданДокумент;
	ДополнительныйКодФСС							= Реквизит.ДополнительныйКодФСС;
	НомерОсновнойПоставки1с							= Реквизит.НомерОсновнойПоставки1с;
	ПодатьЗаявкуНаСертификатДляФСРАР				= Реквизит.ПодатьЗаявкуНаСертификатДляФСРАР;
	ПодатьЗаявкуНаПодключениеРПН					= Реквизит.ПодатьЗаявкуНаПодключениеРПН;
	КодРегионаФСРАР									= Реквизит.КодРегионаФСРАР;
	ВладелецЭЦПСНИЛС								= Реквизит.ВладелецЭЦПСНИЛС;
	ОГРН											= Реквизит.ОГРН;
	РежимРаботыСКлючами                             = ?(Реквизит.ЭлектроннаяПодписьВМоделиСервиса, 1, 2);
	
	Получатели.Очистить();
	Для Каждого СтрокаНаправления из Реквизит.Получатели цикл 
		
		Если СтрокаНаправления.ТипПолучателя = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС") Тогда
			СдаватьВФНС = Истина;
			НоваяСтрокаНаправления = Получатели.Добавить();
			НоваяСтрокаНаправления.ТипПолучателя	= СтрокаНаправления.ТипПолучателя;
			НоваяСтрокаНаправления.КодПолучателя	= СтрокаНаправления.КодПолучателя;
			НоваяСтрокаНаправления.КПП				= СтрокаНаправления.КПП;
		ИначеЕсли СтрокаНаправления.ТипПолучателя	=  ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ПФР") Тогда
			СдаватьВПФР = Истина;
			КодПФР = СтрокаНаправления.КодПолучателя;
		ИначеЕсли СтрокаНаправления.ТипПолучателя = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСС") Тогда
			СдаватьВФСС = Истина;	
		ИначеЕсли СтрокаНаправления.ТипПолучателя = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСГС") Тогда	
			СдаватьВРосстат = Истина;
			КодРосстата = СтрокаНаправления.КодПолучателя;
		КонецЕсли;
	КонецЦикла;
	
	ВладелецЭЦПТипПеречисление = Реквизит.ВладелецЭЦПТип;
	
	//заполнение дополнительных реквизитов формы, которых нет в документе
	СогласиеСЛицензионнымСоглашением = Истина;
	
	Если НЕ ПустаяСтрока(ТелефонМобильный) Тогда
		ПолучатьСМС = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокКриптопровайдеров(ВыполняемоеОповещение)
	
	Инфотекс	 = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ПолучитьПараметрыКриптопровайдера(КонтекстЭДОКлиент.СтруктураСсылочныхДанных.Перечисления_ТипыКриптоПровайдеров_VipNet);
	КриптоПро	 = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ПолучитьПараметрыКриптопровайдера(КонтекстЭДОКлиент.СтруктураСсылочныхДанных.Перечисления_ТипыКриптоПровайдеров_CryptoPro);
	
	ТаблицаЗначенийКС.Очистить();
	
	НоваяСтрока = ТаблицаЗначенийКС.Добавить();
	НоваяСтрока.Криптопровайдер	 = Инфотекс.ОтображаемоеНазвание;
	НоваяСтрока.УстановленОС	 = Ложь;
	НоваяСтрока.Выбран1с		 = Ложь;
	
	НоваяСтрока = ТаблицаЗначенийКС.Добавить();
	НоваяСтрока.Криптопровайдер	 = КриптоПро.ОтображаемоеНазвание;
	НоваяСтрока.УстановленОС	 = Ложь;
	НоваяСтрока.Выбран1с		 = Ложь;
	
	Контекст = Новый Структура("Инфотекс, КриптоПро, ВыполняемоеОповещение", Инфотекс, КриптоПро, ВыполняемоеОповещение);
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьСписокКриптопровайдеровЗавершение", ЭтотОбъект, Контекст);
	ДокументооборотСКОКриптографияКлиент.ПолучитьКриптопровайдеры(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокКриптопровайдеровЗавершение(Результат, ВходящийКонтекст) Экспорт
	
	ВыполняемоеОповещение = ВходящийКонтекст.ВыполняемоеОповещение;
	Инфотекс = ВходящийКонтекст.Инфотекс;
	КриптоПро = ВходящийКонтекст.КриптоПро;

	Если Результат.Выполнено Тогда
		Для Каждого Криптопровайдер Из Результат.Криптопровайдеры Цикл
			Если Криптопровайдер.Имя = Инфотекс.Имя И Строка(Криптопровайдер.Тип) = Инфотекс.Тип Тогда 
				ТаблицаЗначенийКС.Получить(0).УстановленОС = Истина;
			ИначеЕсли Криптопровайдер.Имя = КриптоПро.Имя И Строка(Криптопровайдер.Тип) = КриптоПро.Тип Тогда 
				ТаблицаЗначенийКС.Получить(1).УстановленОС = Истина;
			КонецЕсли;			
		КонецЦикла;
	КонецЕсли;
	
	ТипИмяКриптопровайдера = КонтекстЭДОКлиент.ПолучитьИмяТипКриптопровайдера();
	Имя = ТипИмяКриптопровайдера.Имя;
	Тип = ТипИмяКриптопровайдера.Тип;
	
	Если Тип <> Неопределено И Имя <> Неопределено Тогда
		Если Имя = Инфотекс.Имя И Строка(Тип) = Инфотекс.Тип Тогда
			ТаблицаЗначенийКС.Получить(0).Выбран1с = Истина;
		ИначеЕсли Имя = КриптоПро.Имя И Строка(Тип) = КриптоПро.Тип	 Тогда
			ТаблицаЗначенийКС.Получить(1).Выбран1с = Истина;
		КонецЕсли;
	КонецЕсли;
	
	КоличествоУстановленных = 0;
	
	// Определение, какой криптопровайдер установлен
	Для каждого Строка из ТаблицаЗначенийКС Цикл
		
		Инфотекс = Строка.Криптопровайдер =
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ПолучитьПараметрыКриптопровайдера(КонтекстЭДОКлиент.СтруктураСсылочныхДанных.Перечисления_ТипыКриптоПровайдеров_VipNet).ОтображаемоеНазвание;
		
		Если Строка.УстановленОС Тогда
			Строка.Статус = "(установлен на компьютере)";
			КоличествоУстановленных = КоличествоУстановленных + 1;
		ИначеЕсли  Инфотекс Тогда
			Строка.Статус = "(требуется установка)";
		Иначе
			Строка.Статус = "(требуется приобретение и установка)";
		КонецЕсли;
		
		Строка.ОтображаемыйТекст = Строка.Криптопровайдер + " " + Строка.Статус;
		
	КонецЦикла;
	
	// По умолчанию отображаем закладку ГруппаНеУстановленНиОдинКриптопровайдер, как будто ни один криптопровайдер не установлен
	ПанельВариантаУстановленногоКриптопровайдера = Элементы.ГруппаУстановленныеCSP; 
	ПанельВариантаУстановленногоКриптопровайдера.ТекущаяСтраница = Элементы.ГруппаНеУстановленНиОдинКриптопровайдер;
	
	Для каждого Строка из ТаблицаЗначенийКС Цикл
		Если Строка.УстановленОС Тогда
								
			Если Строка.Криптопровайдер = "VipNet CSP" Тогда
				ВыборКриптопровайдера = 1;
			Иначе
				ВыборКриптопровайдера = 2;
			КонецЕсли;
			
			// Настраиваем отображение текстов на закладке ГруппаУстановленХотяБыОдинКриптопровайдер в зависимости от установленного криптопровайдера
			Если УстановленыОбаCSP() Тогда 
				ПанельВариантаУстановленногоКриптопровайдера.ТекущаяСтраница = Элементы.ГруппаУстановленоДваКриптопровайдера;
			ИначеЕсли УстановленХотяБыОдинCSP() Тогда
				ПанельВариантаУстановленногоКриптопровайдера.ТекущаяСтраница = Элементы.ГруппаУстановленХотяБыОдинКриптопровайдер;
			Иначе
				ПанельВариантаУстановленногоКриптопровайдера.ТекущаяСтраница = Элементы.ГруппаНеУстановленНиОдинКриптопровайдер;
			КонецЕсли;
			
			УстановитьНаименованияКриптопровайдеровНаФорме(Строка.Криптопровайдер);
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ВыполняемоеОповещение = ВходящийКонтекст.ВыполняемоеОповещение;
	ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНаименованияКриптопровайдеровНаФорме(ИмяКриптопровайдера)

	ПолеПодсказкаУстановленныйКриптопровайдер = Элементы.ПодсказкаУстановленныйКриптопровайдер;
	ПолеПодсказкаУстановленныйКриптопровайдер.Заголовок = ИмяКриптопровайдера;
	
	ПолеТекстаСообщения = Элементы.ПодсказкаТекстСообщения;                   
	ПолеТекстаСообщения.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '" + ПолеТекстаСообщения.Заголовок + "'"), СтрЗаменить("VipNet CSPCryptoPro CSP", ИмяКриптопровайдера,""), ИмяКриптопровайдера);
	
	ПолеТекстаСообщения1 = Элементы.ПодсказкаТекстСообщения1;
	ПолеТекстаСообщения1.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '" + ПолеТекстаСообщения1.Заголовок + "'"), ИмяКриптопровайдера);

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПредыдущуюСтраницу()
	
	ТекущаяСтраница 		= Элементы.ОсновнаяПанель.ТекущаяСтраница;
	ИндексТекущейСтраницы 	= Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.Индекс(ТекущаяСтраница);
	
	Если ИндексТекущейСтраницы > 0 Тогда
		
		Индекс = ИндексТекущейСтраницы;
		Пока Индекс > 0 Цикл
			Индекс = Индекс - 1;
			Страница = Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.Получить(Индекс);
			Если Страница.Видимость Тогда		
		Элементы.ОсновнаяПанель.ТекущаяСтраница = Страница;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	КриптопровайдерВыбранВручную = Ложь;
	УправлениеКнопкамиНавигации();
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеКнопкамиНавигации()
	
	ТекущаяСтраница 		= Элементы.ОсновнаяПанель.ТекущаяСтраница;
	ИндексТекущейСтраницы 	= Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.Индекс(ТекущаяСтраница);
	ВсегоСтраниц 			= Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.Количество();
	
	КнопкаДалее	  = Элементы.КоманднаяПанельДалее.ПодчиненныеЭлементы.Далее;
	КнопкаНазад   = Элементы.КоманднаяПанельНазад.ПодчиненныеЭлементы.Назад;
	КнопкаЗакрыть = Элементы.КоманднаяПанельДалее.ПодчиненныеЭлементы.Закрыть;
	
	КнопкаДалее.Видимость 	= Истина;
	КнопкаНазад.Видимость 	= Истина;
	КнопкаЗакрыть.Видимость = Истина;
	
	Если ИндексТекущейСтраницы = 0 Тогда
		
		//Первая закладка
		УстановитьСвойстваКнопки(КнопкаНазад, 	"<  Назад", Ложь,	Ложь);
		УстановитьСвойстваКнопки(КнопкаДалее, 	"Далее  >", Истина,	Истина);
		УстановитьСвойстваКнопки(КнопкаЗакрыть, "Отмена", 	Истина,	Ложь);
		
	ИначеЕсли ИндексТекущейСтраницы = 2 Тогда
		
		КнопкаНазад.Заголовок 	= "<  Назад";
		КнопкаНазад.Видимость 	= Истина;
		
		// Если мы находимся на 2 шаге и ни один криптопровайдер не установлен
		// или установлено сразу два криптопровайдера, то не позволяем перейти на следующий шаг
		Если НЕ УстановленХотяБыОдинCSP() И МастерОткрытНаШагеУстановкиCSP() ИЛИ УстановленыОбаCSP() И НЕ КриптопровайдерВыбранВручную Тогда
			КнопкаДалее.Видимость 	= Ложь;
			КнопкаЗакрыть.Заголовок = "Закрыть";
			КнопкаЗакрыть.КнопкаПоУмолчанию = Истина;
		Иначе 
			КнопкаДалее.Видимость 	= Ложь;
			КнопкаДалее.Заголовок 	= "Далее  >";
			КнопкаДалее.Видимость 	= Истина;
			КнопкаДалее.КнопкаПоУмолчанию = Истина;
			КнопкаЗакрыть.Заголовок = "Отмена";
			
		КонецЕсли;
	
	ИначеЕсли ТекущаяСтраница = Элементы.Подтверждение Тогда
		
		КнопкаНазад.Заголовок = "<  Назад";
		КнопкаНазад.Видимость = Истина;
		
		Если РежимРаботыСКлючами = 1 Тогда // Облачная ЭП
			КнопкаДалее.Заголовок = "Отправить";
		Иначе
			КнопкаДалее.Заголовок = "Далее >";
		КонецЕсли;
		КнопкаДалее.Видимость = Истина;
		
	ИначеЕсли ТекущаяСтраница = Элементы.ИнструкцияПоСозданиюКлючаЭЦП Тогда
		
		КнопкаНазад.Заголовок = "<  Назад";
		КнопкаНазад.Видимость = Истина;
		
		КнопкаДалее.Заголовок = "Создать ключ электронной подписи";
		КнопкаДалее.Видимость = Истина;
		
	ИначеЕсли ТекущаяСтраница = Элементы.ПолучениеРезультатаОтправкиЗаявления Тогда	
		
		//последняя закладка
		Если ДокументЗаявление.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отправлено") Тогда 
			КнопкаДалее.Видимость 	= Ложь;
			КнопкаЗакрыть.Заголовок = "Закрыть";
			ПрограммноеЗакрытие 	= Истина;
			КнопкаНазад.Видимость 	= Ложь;
			КнопкаЗакрыть.КнопкаПоУмолчанию = Истина;
		ИначеЕсли ДокументЗаявление.Статус =  ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Подготовлено") Тогда   	
			КнопкаДалее.Видимость 	= Ложь;
			КнопкаДалее.Заголовок 	= "Отправить заявление еще раз";
			КнопкаДалее.Видимость 	= Истина;
			КнопкаНазад.Видимость 	= Ложь
		ИначеЕсли ДокументЗаявление.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отклонено") Тогда 	
			КнопкаДалее.Видимость 	= Ложь;
			КнопкаДалее.Заголовок 	= "Подготовить новое заявление";
			КнопкаДалее.Видимость 	= Истина;		
			КнопкаНазад.Видимость 	= Ложь
		КонецЕсли;
		
	Иначе
		
		//Все остальные закладки
		КнопкаДалее.Видимость 	= Ложь;		
		КнопкаДалее.Заголовок 	= "Далее  >";
		КнопкаДалее.Видимость 	= Истина;
		
		КнопкаНазад.Заголовок 	= "<  Назад";
		КнопкаНазад.Видимость 	= Истина;		
		КнопкаЗакрыть.Заголовок = "Отмена";
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСвойстваКнопки(Кнопка, Заголовок, Видимость, КнопкаПоУмолчанию)
	
	 Кнопка.Заголовок 			= Заголовок; 
	 Кнопка.Видимость 			= Видимость;
	 Кнопка.КнопкаПоУмолчанию 	= КнопкаПоУмолчанию;

КонецПроцедуры

&НаКлиенте
Функция УстановленХотяБыОдинCSP()
	
	Инфотекс 	= Ложь;
	КриптоПро 	= Ложь;
	
	Если ТаблицаЗначенийКС.Количество() > 0 Тогда
		Инфотекс = ТаблицаЗначенийКС.Получить(0).УстановленОС;
		КриптоПро = ТаблицаЗначенийКС.Получить(1).УстановленОС;
	КонецЕсли;
	
	Возврат Инфотекс ИЛИ КриптоПро;
	
КонецФункции

&НаКлиенте
Функция УстановленыОбаCSP()
	
	Возврат ТаблицаЗначенийКС.НайтиСтроки(Новый Структура("УстановленОС", "Да")).Количество() = 2;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьСледующуюСтраницу()
	
	ТекущаяСтраница = Элементы.ОсновнаяПанель.ТекущаяСтраница;
	ИндексТекущейСтраницы = Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.Индекс(ТекущаяСтраница);
	
	Пока Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.Индекс(ТекущаяСтраница) < Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.Количество() - 1 Цикл
		
		Страница = Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.Получить(Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.Индекс(ТекущаяСтраница) + 1);
		
		Если Страница.Видимость Тогда
			Элементы.ОсновнаяПанель.ТекущаяСтраница = Страница;
			Прервать;
		Иначе
			ТекущаяСтраница = Страница;
	КонецЕсли;
	
	КонецЦикла;	
	
	УправлениеКнопкамиНавигации();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьКонстанты(Криптопровайдер)
	Константы.ДокументооборотСКонтролирующимиОрганами_ТипКриптопровайдера.Установить(Криптопровайдер.Тип);
	Константы.ДокументооборотСКонтролирующимиОрганами_ИмяКриптопровайдера.Установить(Криптопровайдер.Имя);
КонецПроцедуры

&НаСервере
Процедура СоздатьНовыйДокументЗаявление(СохранитьИВыгрузить)
	
	НовыйДокументЗаявление = РеквизитФормыВЗначение("ДокументЗаявление");
	
	НовыйДокументЗаявление.УстановитьНовыйНомер();
	НовыйДокументЗаявление.Дата									= ТекущаяДатаСеанса();
	НовыйДокументЗаявление.Организация							= Организация;
	НовыйДокументЗаявление.ТипЗаявления							= Перечисления.ТипыЗаявленияАбонентаСпецоператораСвязи.Первичное;
	НовыйДокументЗаявление.ВладелецЭЦПТип						= ВладелецЭЦПТипПеречисление;
	НовыйДокументЗаявление.ВладелецЭЦП							= ВладелецЭЦП;
	НовыйДокументЗаявление.ИдентификаторДокументооборота		= нрег(СтрЗаменить(Строка(Новый("УникальныйИдентификатор")), "-", ""));
	НовыйДокументЗаявление.Статус								= Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Подготовлено;
	НовыйДокументЗаявление.СпецоператорСвязи					= Спецоператор;
	НовыйДокументЗаявление.ТипКриптопровайдера					= ТипКриптопровайдера;
	НовыйДокументЗаявление.ТипОрганизации						= ЭтоЮридическоеЛицо;
	НовыйДокументЗаявление.ИНН									= ИНН;
	НовыйДокументЗаявление.КПП									= КПП;
	НовыйДокументЗаявление.ПолноеНаименование					= ПолноеНаименование;
	НовыйДокументЗаявление.КраткоеНаименование					= КраткоеНаименование;
	НовыйДокументЗаявление.ПризнакКрупнейшегоНалогоплательщика	= КрупнейшийНалогоплательщик;
	НовыйДокументЗаявление.ПризнакОбособленногоПодразделения	= ПризнакОбособленногоПодразделения;
	НовыйДокументЗаявление.НомерОсновнойПоставки1с				= НомерОсновнойПоставки1с;
	НовыйДокументЗаявление.ДополнительныйКодФСС					= ДополнительныйКодФСС;
	
	НовыйДокументЗаявление.ЭлектроннаяПодписьВМоделиСервиса    = РежимРаботыСКлючами = 1;
	НовыйДокументЗаявление.ТелефонМобильныйДляАвторизации      = ТелефонМобильныйДляАвторизации;
	НовыйДокументЗаявление.ЭлектроннаяПочтаАутентификация      = ЭлектроннаяПочтаДляПаролей;
	
	
	НовыйДокументЗаявление.Получатели.Очистить();
	
	Если СдаватьВФНС Тогда
		Для Каждого СтрокаНаправлений Из Получатели Цикл
			НоваяСтрокаНаправления = НовыйДокументЗаявление.Получатели.Добавить();
			НоваяСтрокаНаправления.ТипПолучателя = СтрокаНаправлений.ТипПолучателя;
			НоваяСтрокаНаправления.КодПолучателя = СтрокаНаправлений.КодПолучателя;
			НоваяСтрокаНаправления.КПП = СтрокаНаправлений.КПП;
		КонецЦикла;
	КонецЕсли;
	
	Если СдаватьВПФР Тогда 
		НоваяСтрокаНаправления = НовыйДокументЗаявление.Получатели.Добавить();
		НоваяСтрокаНаправления.ТипПолучателя =  ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ПФР");
		НоваяСтрокаНаправления.КодПолучателя = КодПФР;
		НоваяСтрокаНаправления.КПП = "";
	КонецЕсли;
	
	Если СдаватьВФСС Тогда 
		НоваяСтрокаНаправления = НовыйДокументЗаявление.Получатели.Добавить();
		НоваяСтрокаНаправления.ТипПолучателя =  ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСС");
		НоваяСтрокаНаправления.КПП = "";
	КонецЕсли;
	
	Если СдаватьВРосстат Тогда 
		НоваяСтрокаНаправления = НовыйДокументЗаявление.Получатели.Добавить();
		НоваяСтрокаНаправления.ТипПолучателя =  ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСГС");
		НоваяСтрокаНаправления.КодПолучателя = КодРосстата;
		НоваяСтрокаНаправления.КПП = "";
	КонецЕсли;
	
	НовыйДокументЗаявление.ПодатьЗаявкуНаСертификатДляФСРАР = ПодатьЗаявкуНаСертификатДляФСРАР;
	НовыйДокументЗаявление.КодРегионаФСРАР 					= КодРегионаФСРАР;
	НовыйДокументЗаявление.ПодатьЗаявкуНаПодключениеРПН		= ПодатьЗаявкуНаПодключениеРПН;
	Если РежимРаботыСКлючами = 1 Тогда // Облачная ЭП
		НовыйДокументЗаявление.АдресЮридический = АдрЮР;
		НовыйДокументЗаявление.АдресФактический = АдрФакт;
	Иначе
	НовыйДокументЗаявление.АдресЮридический 				= РегламентированнаяОтчетностьВызовСервера.ЗаменитьТекстРегионаНаКодРегиона(АдрЮР);
	НовыйДокументЗаявление.АдресФактический 				= РегламентированнаяОтчетностьВызовСервера.ЗаменитьТекстРегионаНаКодРегиона(АдрФакт);
	КонецЕсли;
	НовыйДокументЗаявление.РегНомерПФР						= РегНомерПФР;
	НовыйДокументЗаявление.РегНомерФСС						= ?(СдаватьВФСС, РегНомерФСС, "");
	НовыйДокументЗаявление.ТелефонОсновной					= ТелефонОсновной;
	НовыйДокументЗаявление.ТелефонДополнительный			= ТелефонДополнительный;
	НовыйДокументЗаявление.ТелефонМобильный					= ?(ПолучатьСМС, ТелефонМобильный, "");
	НовыйДокументЗаявление.ЭлектроннаяПочта					= ЭлектроннаяПочта;
	НовыйДокументЗаявление.ВладелецЭЦПФамилия				= СокрЛП(ВладелецЭЦПФамилия);
	НовыйДокументЗаявление.ВладелецЭЦПИмя					= СокрЛП(ВладелецЭЦПИмя);
	НовыйДокументЗаявление.ВладелецЭЦПОтчество				= СокрЛП(ВладелецЭЦПОтчество);
	НовыйДокументЗаявление.ВладелецЭЦПДолжность				= ВладелецЭЦПДолжность;
	НовыйДокументЗаявление.ВладелецЭЦППодразделение			= ВладелецЭЦППодразделение;
	НовыйДокументЗаявление.ВладелецЭЦПВидДокумента			= ВладелецЭЦПВидДокумента;
	НовыйДокументЗаявление.ВладелецЭЦПНомерДокумента		= ВладелецЭЦПНомерДокумента;
	НовыйДокументЗаявление.ВладелецЭЦПСерияДокумента		= ВладелецЭЦПСерияДокумента;
	НовыйДокументЗаявление.ВладелецЭЦПДатаВыдачиДокумента	= ВладелецЭЦПДатаВыдачиДокумента;
	НовыйДокументЗаявление.ВладелецЭЦПКемВыданДокумент		= ВладелецЭЦПКемВыданДокумент;
	НовыйДокументЗаявление.Ответственный					= Пользователи.ТекущийПользователь();
	НовыйДокументЗаявление.ДатаСозданияУчетнойЗаписи		= '00010101';
	НовыйДокументЗаявление.ОГРН								= ОГРН;
	НовыйДокументЗаявление.ВладелецЭЦПСНИЛС					= ВладелецЭЦПСНИЛС;
	
	Если СохранитьИВыгрузить = 1 или СохранитьИВыгрузить = 2 Тогда
		НовыйДокументЗаявление.Записать();
	КонецЕсли;	
	
	ЗначениеВРеквизитФормы(НовыйДокументЗаявление, "ДокументЗаявление");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеОрганизации(ДанныеЗаполнения = Неопределено,ПрограммноеЗаполнение = Истина)
	
	ИнициализацияЗначений(Организация);
	
	ОчиститьДанныеСотрудника(НЕ ПрограммноеЗаполнение);
	Получатели.Очистить();
	ОчиститьРеквизитыФормы();
	ОчиститьДанныеСотрудникаСервер();
	
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураРеквизитов = Новый Структура("Организация, ПриОткрытии", Организация, НЕ ДанныеЗаполнения = Неопределено);
		Если ДанныеЗаполнения <> Неопределено Тогда
			СтруктураРеквизитов.Вставить("АдресЮридический",);
			СтруктураРеквизитов.Вставить("АдресФактический",);
		КонецЕсли;
		КонтекстЭДОКлиент.ЗаполнитьДанные(СтруктураРеквизитов);
		ДанныеЗаполнения 	= КонтекстЭДОКлиент.ПолучитьДанныеЗаполнения(СтруктураРеквизитов);
		ДанныеОрганизации 	= ДанныеЗаполнения.СтруктураДанныхОрганизации;
		
		ЗаполнитьДанныеПоОрганизации(ДанныеЗаполнения,ПрограммноеЗаполнение);
		
	КонецЕсли;
	
	ИзменитьОформлениеРеквизитовОрганизации();
	ИзменитьОформлениеВладельцаЭЦП();

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДанныеСотрудника(Очистить = Ложь)
	Если ЗначениеЗаполнено(Реквизит) И НЕ Очистить Тогда
		Возврат;
	КонецЕсли;
	ВладелецЭЦППодразделение = "";
	ВладелецЭЦПДолжность = "";
	ВладелецЭЦПФамилия = "";
	ВладелецЭЦПИмя = "";
	ВладелецЭЦПОтчество = "";
	ВладелецЭЦПСНИЛС = "";
	ВладелецЭЦПВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ПустаяСсылка");
	ВладелецЭЦПСерияДокумента = "";
	ВладелецЭЦПНомерДокумента = "";
	ВладелецЭЦПДатаВыдачиДокумента = "";
	ВладелецЭЦПКемВыданДокумент = "";
	Если НЕ ЗначениеЗаполнено(СотрудникВыбор) Тогда
		СотрудникВыбор = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДанныеСотрудникаСервер()
	ГлБухгалтер  = Неопределено; 	
	Руководитель = Неопределено; 
КонецПроцедуры	

&НаКлиенте
Процедура ВосстановитьНаправленияПоУмолчанию()
	КонтекстЭДОКлиент.ВосстановитьНаправленияПоУмолчанию(Получатели,ДанныеОрганизации,Истина);
	Элементы.УдалитьНаправление.Доступность = Получатели.Количество() <> 0;
КонецПроцедуры
 
&НаКлиенте
Процедура ПолучитьВидИсполнителя(ДанныеОрганизации, ОбъектТипИсполнителя = 0)
	
	ДанныеИсполнителяПолучить = КонтекстЭДОКлиент.ПолучитьВидИсполнителя(ДанныеОрганизации,Организация);
	
	Если ОбъектТипИсполнителя = 0 и ВыборДиректора = 0 и ВыборБухгалтера = 0 и ВыборИсполнителя = 0 Тогда
		// по умолчанию устанавливаем выбор на директоре 
		ВыборДиректора		= 1;
		ВыборБухгалтера		= 0;
		ВыборИсполнителя	= 0;
	Иначе
		
		Если ОбъектТипИсполнителя <> 0 Тогда
			ВыборДиректора		= 0;
			ВыборБухгалтера		= 0;
			ВыборИсполнителя	= 0;
			
			Если ОбъектТипИсполнителя = 1 Тогда
				ВыборДиректора = 1;
			ИначеЕсли ОбъектТипИсполнителя = 2 Тогда
				ВыборБухгалтера = 1;
			ИначеЕсли ОбъектТипИсполнителя = 3 Тогда
				ВыборИсполнителя = 1;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеСотрудника(ТипЗаполнения)
	
	Если ТипЗаполнения = 0 ИЛИ (ТипЗаполнения = 3 И НЕ ЗначениеЗаполнено(СотрудникВыбор)) ИЛИ НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыборДиректора = 1 Тогда
		ВладелецЭЦП = Руководитель;
	КонецЕсли;	
	Если ВыборБухгалтера = 1 Тогда
		ВладелецЭЦП = ГлБухгалтер;
	КонецЕсли;
	Если ВыборИсполнителя = 1 и ЗначениеЗаполнено(СотрудникВыбор)  Тогда
		ВладелецЭЦП = СотрудникВыбор;
	КонецЕсли;

	// Обновляем данные о сотрудниках
	КонтекстЭДОКлиент.ЗаполнитьДанные(СтруктураРеквизитов);
	ДанныеЗаполнения = КонтекстЭДОКлиент.ПолучитьДанныеЗаполнения(СтруктураРеквизитов);
	Если ДанныеЗаполнения.Свойство("СтруктураДанныхОрганизации") Тогда
		ДанныеОрганизации = ДанныеЗаполнения.СтруктураДанныхОрганизации;
	КонецЕсли;	

	ДанныеОрганизации.Вставить("Организация", Организация);
	ДанныеСотрудника = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ПолучитьДанныеСотрудника(ТипЗаполнения,ДанныеОрганизации,ВладелецЭЦП);
	
	ВладелецЭЦПИмя                 = ДанныеСотрудника.ФИО.Имя;
	ВладелецЭЦПФамилия             = ДанныеСотрудника.ФИО.Фамилия;
	ВладелецЭЦПОтчество            = ДанныеСотрудника.ФИО.Отчество;
	ВладелецЭЦПВидДокумента        = ПолучитьВидДокументаПоНаименованию(Строка(ДанныеСотрудника.ВидДокумента));
	ВладелецЭЦПСерияДокумента      = ДанныеСотрудника.Серия;
	ВладелецЭЦПНомерДокумента      = ДанныеСотрудника.Номер;
	ВладелецЭЦПДатаВыдачиДокумента = ДанныеСотрудника.ДатаВыдачи;
	ВладелецЭЦПКемВыданДокумент    = ДанныеСотрудника.КемВыдан;
	ВладелецЭЦПДолжность           = ДанныеСотрудника.Должность;
	ВладелецЭЦПСНИЛС			   = ДанныеСотрудника.СНИЛС;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеПоОрганизации(ДанныеЗаполнения, ПрограммноеЗаполнение = Истина)

	Если ЗначениеЗаполнено(ВладелецЭЦПТипПеречисление) И ПрограммноеЗаполнение Тогда
		ТипИсполнителя = КонтекстЭДОКлиент.ПолучитьТипИсполнителя(ВладелецЭЦПТипПеречисление);
	Иначе
		ТипИсполнителя = 0;
	КонецЕсли;
	
	ПолучитьВидИсполнителя(ДанныеОрганизации,ТипИсполнителя);
	
	// Определяем руководителя и гл бухгалтера
	ОпределитьОтветственныеЛицаОрганизации();
	
	Элементы.Исполнитель.Доступность	= Истина;
	Элементы.СотрудникВыбор.Доступность = ВыборИсполнителя = 1;
	
	ЭтоЮридическоеЛицо		 = ДанныеОрганизации.ТипОрганизации;
	ПолноеНаименование		 = ДанныеОрганизации.НаимЮЛПол;
	КраткоеНаименование		 = ДанныеОрганизации.КраткоеНаименование;
	ИНН						 = ДанныеОрганизации.ИННЮЛ;
	КПП						 = ДанныеОрганизации.КППЮЛ;
	ОГРН					 = ДанныеОрганизации.ОГРН;
	РегНомерПФР				 = ДанныеОрганизации.РегНомПФР;
	РегНомерФСС				 = ДанныеОрганизации.РегистрационныйНомерФСС;
	ТелефонОсновной			 = ДанныеОрганизации.ТелОрганизации;
	ТелефонДополнительный	 = ДанныеОрганизации.ТелРук;
	АдрЮР					 = ДанныеЗаполнения.АдресЮридический;
	АдрФакт				 	 = ДанныеЗаполнения.АдресФактический;
	АдресЮридический		 = ДанныеЗаполнения.ЮрАдрес;
	АдресФактический		 = ДанныеЗаполнения.ФактАдрес;
	
	Если ПустаяСтрока(НомерОсновнойПоставки1с) Тогда
		НомерОсновнойПоставки1с = ДанныеОрганизации.НомерОсновнойПоставки1с;
	КонецЕсли;
	
	Если АдресЮридический = ",,,,,,,,," Тогда
		АдресЮридический = "";
	КонецЕсли;
	
	Если АдресФактический = ",,,,,,,,," Тогда
		АдресФактический = "";
	КонецЕсли;
	
	Элементы.АдресЮридический.КнопкаВыбора = Истина;
	Элементы.АдресФактический.КнопкаВыбора = Истина;
	
	ЭлектроннаяПочта = ДанныеОрганизации.ЭлектроннаяПочта;
	
	Если ЭтоЮридическоеЛицо Тогда
		ПризнакОбособленногоПодразделения	= ДанныеОрганизации.ПризнакОбособленногоПодразделения;
		КрупнейшийНалогоплательщик			= ДанныеОрганизации.КрупнейшийНалогоплательщик;
	КонецЕсли;
	Элементы.ВладелецЭЦПДолжность.АвтоОтметкаНезаполненного = ЭтоЮридическоеЛицо;
	Элементы.ВладелецЭЦПДолжность.ОтметкаНезаполненного		= ЭтоЮридическоеЛицо и не ЗначениеЗаполнено(ВладелецЭЦПДолжность);	
	
	Если РеквизитыНеХранящиесяВБазе.Найти(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ДополнительныйКодФСС")) <> Неопределено Тогда
		ДополнительныйКодФСС 	= ДанныеОрганизации.РеквизитДопКодФСС;
	КонецЕсли;
	КодРегионаФСРАР 		= РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(АдрЮр).Регион;
	
	// Заполняем значения кодов контролирующих органов по умолчанию
	ВосстановитьНаправленияПоУмолчанию();
	УстановитьЗначенияКодовКонтролирующихОргановПоУмолчанию(ДанныеОрганизации);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСотрудника(ТипВыбора = 1)
	
	Если ТипВыбора = 1 Тогда 
		ВыборБухгалтера                   = 0;
		ВыборДиректора                    = 1;
		ВыборИсполнителя                  = 0;		
	ИначеЕсли ТипВыбора = 2 Тогда 
		ВыборБухгалтера                   = 1;
		ВыборДиректора                    = 0;
		ВыборИсполнителя                  = 0;
	ИначеЕсли ТипВыбора = 3 Тогда
		ВыборБухгалтера                   = 0;
		ВыборДиректора                    = 0;
		ВыборИсполнителя                  = 1;
	КонецЕсли;
	
	Элементы.СотрудникВыбор.АвтоОтметкаНезаполненного = (ВыборИсполнителя = 1);
	Элементы.СотрудникВыбор.ОтметкаНезаполненного = НЕ ЗначениеЗаполнено(СотрудникВыбор);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОформлениеВладельцаЭЦП()
	
	СинийЦвет 	= Новый Цвет(28,85,174);
	КрасныйЦвет = Новый Цвет(178,34,34);
	СерыйЦвет 	= Новый Цвет(192,192,192);
	
	Если ВыборДиректора = 0 и ВыборБухгалтера = 0 и ВыборИсполнителя = 0 Тогда 
		ВыборДиректора = 1;	
	КонецЕсли;	
	
	ОформитьЭлементФормы("ДекорацияРуководитель", Руководитель, Истина);
	ОформитьЭлементФормы("ДекорацияГлБухгалтер",  ГлБухгалтер,  Истина);
	
	Элементы.ДекорацияРуководитель.Гиперссылка = Истина;
	Элементы.ДекорацияРуководитель.Доступность = ВыборДиректора;
	Элементы.ДекорацияРуководитель.ЦветТекста  = ?(ВыборДиректора ,?(не ЗначениеЗаполнено(Руководитель),КрасныйЦвет,СинийЦвет),СерыйЦвет);
	
	Элементы.ДекорацияГлБухгалтер.Гиперссылка = Истина;
	Элементы.ДекорацияГлБухгалтер.Доступность = (ВыборБухгалтера);
	Элементы.ДекорацияГлБухгалтер.ЦветТекста  = ?(ВыборБухгалтера,?(не ЗначениеЗаполнено(ГлБухгалтер),КрасныйЦвет,СинийЦвет),СерыйЦвет);
	
	Элементы.СотрудникВыбор.Доступность = ВыборИсполнителя;
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНаправления(ТекущаяСтрока = Неопределено)
	ДанныеОрганизации.Вставить("ОбъектДополнительныйКодФСС",ДополнительныйКодФСС);
	КонтекстЭДОКлиент.ОткрытьФормуНаправленияДляФНС(ЭтаФорма,ТекущаяСтрока,КонтекстЭДОКлиент,ДанныеОрганизации);
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРеквизитыФормы() 
	АдресФактический = "";
	АдресЮридический = "";
	СотрудникВыбор = Неопределено;
	ИНН = "";
	КПП = "";
	ОГРН = "";
	КраткоеНаименование = "";
	ПолноеНаименование = "";
	ТелефонДополнительный = "";
	ТелефонОсновной = "";
	ЭлектроннаяПочта = "";
	РегНомерПФР = "";
	РегНомерФСС = "";
	КрупнейшийНалогоплательщик = Ложь;
	ПризнакОбособленногоПодразделения = Ложь;
	Элементы.АдресЮридический.КнопкаВыбора = Ложь;
	Элементы.АдресФактический.КнопкаВыбора = Ложь;
	СотрудникВыбор = "";
	ОчиститьДанныеСотрудника();
	Получатели.Очистить();
	ОчиститьДанныеСотрудникаСервер();
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьМастер()
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьАвтоматическоеОткрытиеМастера()
	
	//Если ни один CSP не установлен, а попытка установки уже производилась ранее через мастер (сохраненные настройки не пустые), 
	//тогда очищаем сохраненые настроки, чтобы мастер не появлялся сразу при открытии 1С
	Если ДокументооборотСКОВызовСервера.ПолучитьВыбранныйCSPИзВременныхНастроек() = Организация // мастер был открыт для текущей организации
		И НЕ УстановкаCSPПроизводиласьИзЭтогоОкна Тогда // после установки криптопровайдера перезагрузили компьютер
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.УдалитьВыборCSPИзВременныхНастроек();
	КонецЕсли;
	
КонецПроцедуры

// - заполняется текст лицензии 
// - определяется, будет ли сдаваться отчетность в Росалкогольрегулирование и в зависимости от этого настраивается видимость соотвествующих элементов
&НаКлиенте
Процедура ОбновитьДанныеСпецОператора()
	
	ПолеHTMLЛицензии = КонтекстЭДОКлиент.ЗаменитьЭлементыВСоглашении(СтруктураДанныхСпецоператорыСвязи, Спецоператор);
	
	ОбновитьВидимостьСтраницыОтчетностьВФСРАР();
	ОбновитьЭлементыСтраницыОтчетностьВФСРАР();	
	
	ЭлементСсылкаНаСайтУдостоверяющегоЦентра 		    = Элементы.ОткрытьСайтУдостоверяющегоЦентра;
	ЭлементСсылкаНаСайтУдостоверяющегоЦентра.Видимость  = ЗначениеЗаполнено(СпецОператор);
	ЭлементСсылкаНаСайтУдостоверяющегоЦентра.Заголовок  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сайт %1'"),Строка(Спецоператор));
	
	ОператорПоддерживаетСМСУведомление 			= (ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьПараметрСпецоператора(Спецоператор, "ПризнакПоддержкиСМС") = "Истина");
	
	Элементы.ГруппаДанныхПоСМСОповещению.Видимость 	= ОператорПоддерживаетСМСУведомление;
	
КонецПроцедуры	

&НаКлиенте
Процедура ОбновитьЭлементыСтраницыОтчетностьВФСРАР()
	
	//Если организация не сдает отчетность в Росалкогольрегулирование, тогда часть элементов делаем невидимыми
	Элементы.НадписьРегион.Видимость 		= ПодатьЗаявкуНаСертификатДляФСРАР;
	Элементы.КодРегионаФСРАР.Видимость 		= ПодатьЗаявкуНаСертификатДляФСРАР;
	
	Элементы.КодРегионаФСРАР.ТолькоПросмотр 		   = НЕ ПодатьЗаявкуНаСертификатДляФСРАР;
	Элементы.КодРегионаФСРАР.АвтоВыборНезаполненного   = ПодатьЗаявкуНаСертификатДляФСРАР;
	Элементы.КодРегионаФСРАР.АвтоОтметкаНезаполненного = ПодатьЗаявкуНаСертификатДляФСРАР;
	
КонецПроцедуры

// Определяется, будет ли сдаваться отчетность в Росалкогольрегулирование и в зависимости от этого настраивается видимость соотвествующих элементов
&НаКлиенте
Процедура ОбновитьВидимостьСтраницыОтчетностьВФСРАР()
	
	ПризнакПоддержкиФСРАР = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьПараметрСпецоператора(Спецоператор, "ФСРАРПризнак");
	ПризнакПоддержкиФСРАР = (ПризнакПоддержкиФСРАР = Истина ИЛИ ПризнакПоддержкиФСРАР = "Истина");
	
	Если НЕ ПризнакПоддержкиФСРАР Тогда
		ПодатьЗаявкуНаСертификатДляФСРАР = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НаименованиеСубъектаРФ(КодРегиона)
	
	Результат = "";
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	МакетКодыРегионов = КонтекстЭДОСервер.ПолучитьМакет("ФСРАРПорталыРегионов");
	
	НомерКолонкиКодРегиона = МакетКодыРегионов.Область("КодРегиона").Лево;
	НомерКолонкиНаименованиеРегиона = МакетКодыРегионов.Область("НаименованиеРегиона").Лево;
	ОбластьПоискаКодаРегиона = МакетКодыРегионов.Область(1, НомерКолонкиКодРегиона, МакетКодыРегионов.ВысотаТаблицы, НомерКолонкиКодРегиона);
	
	ОбластьСКодомРегиона = МакетКодыРегионов.НайтиТекст(Формат(Число(КодРегиона), "ЧН=0; ЧГ=; ЧЦ=2; ЧВН=;"), , ОбластьПоискаКодаРегиона, , Истина);
	
	Если ОбластьСКодомРегиона <> Неопределено Тогда
		Результат = МакетКодыРегионов.Область(ОбластьСКодомРегиона.Верх, НомерКолонкиНаименованиеРегиона, ОбластьСКодомРегиона.Верх, НомерКолонкиНаименованиеРегиона).Текст;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокВыбораРегионовРФ()
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	МакетРегионов = КонтекстЭДОСервер.ПолучитьМакет("ФСРАРПорталыРегионов");
	
	Для НомСтр = 1 По МакетРегионов.ВысотаТаблицы Цикл
		
		КодРегиона = СокрЛП(МакетРегионов.Область(НомСтр, 1, НомСтр, 1).Текст);
		НазваниеРегиона = СокрЛП(МакетРегионов.Область(НомСтр, 2, НомСтр, 2).Текст);
		
		Если ЗначениеЗаполнено(КодРегиона) Тогда
			Элементы.КодРегионаФСРАР.СписокВыбора.Добавить(КодРегиона, КодРегиона + " - " + НазваниеРегиона);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеСлужбыПоддержки()

	// Контактные данные ЗАО "Калуга Астрал"
	ТелефонСлужбыПоддержки = "8-800-700-86-68";
	АдресЭлектроннойПочтыСлужбыПоддержки = "1c@astralnalog.ru";

КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСайтКриптоПро()
	ОбщегоНазначенияКлиент.ПерейтиПоСсылке("http://www.cryptopro.ru/");
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСайтИнфотекс()
	ОбщегоНазначенияКлиент.ПерейтиПоСсылке("http://infotecs.ru/");
КонецПроцедуры 

&НаКлиенте
Функция МастерОткрытНаШагеУстановкиCSP()
		
	Возврат  (Элементы.ГруппаУстановленныеCSP.ПодчиненныеЭлементы.ГруппаНеУстановленНиОдинКриптопровайдер = Элементы.ГруппаУстановленныеCSP.ТекущаяСтраница); 	
	
КонецФункции

&НаКлиенте
Процедура ОткрытьМастерНаВторомШагеЕслиЭтоПродолжениеПодключения()
	
	//Если это продолжение подключения, тогда открываем на втором шаге 
	Если ДокументооборотСКОВызовСервера.ПолучитьВыбранныйCSPИзВременныхНастроек() = Организация Тогда  
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьМастерНаВторомШагеЕслиЭтоПродолжениеПодключенияПослеЗаполненияСпискаКриптопровайдеров", ЭтотОбъект);
		ЗаполнитьСписокКриптопровайдеров(ОписаниеОповещения);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьМастерНаВторомШагеЕслиЭтоПродолжениеПодключенияПослеЗаполненияСпискаКриптопровайдеров(Результат, ДополнительныеПараметры) Экспорт

	Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.ИспользуемыйКриптопровайдер;
	ПанельВариантаУстановленногоКриптопровайдера = Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.ИспользуемыйКриптопровайдер.ПодчиненныеЭлементы.ГруппаУстановленныеCSP;
	Если УстановленыОбаCSP() Тогда
		ПанельВариантаУстановленногоКриптопровайдера.ТекущаяСтраница = ПанельВариантаУстановленногоКриптопровайдера.ПодчиненныеЭлементы.ГруппаУстановленоДваКриптопровайдера; 	
	ИначеЕсли УстановленХотяБыОдинCSP() Тогда
		ПанельВариантаУстановленногоКриптопровайдера.ТекущаяСтраница = ПанельВариантаУстановленногоКриптопровайдера.ПодчиненныеЭлементы.ГруппаУстановленХотяБыОдинКриптопровайдер; 	
	Иначе 	
		ПанельВариантаУстановленногоКриптопровайдера.ТекущаяСтраница = ПанельВариантаУстановленногоКриптопровайдера.ПодчиненныеЭлементы.ГруппаНеУстановленНиОдинКриптопровайдер; 	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОжиданияОбновитьДанныеРуководителя()
	
	Результат = Неопределено;
	Если не ЗначениеЗаполнено(Руководитель) Тогда
		 Результат =   ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.Руководитель(Организация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат) Тогда 
		Руководитель = Результат;
		ЗаполнитьДанныеСотрудника(1);
		ОтключитьОбработчикОжидания("ОбработкаОжиданияОбновитьДанныеРуководителя");
	КонецЕсли;
	ИзменитьОформлениеВладельцаЭЦП();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеГлБухгалтера()
	
	Результат = Неопределено;
	Если НЕ ЗначениеЗаполнено(ГлБухгалтер) Тогда 
		Результат = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ГлБухгалтер(Организация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат) Тогда 
		ГлБухгалтер = Результат;
		ЗаполнитьДанныеСотрудника(2);
		ОтключитьОбработчикОжидания("ОбновитьДанныеГлБухгалтера");
	КонецЕсли;
	ИзменитьОформлениеВладельцаЭЦП();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОформлениеРеквизитовОрганизации()
	
	ОформитьЭлементФормы("ДекорацияКраткоеНаименование", КраткоеНаименование, 	Истина);
	ОформитьЭлементФормы("ДекорацияПолноеНаименование",  ПолноеНаименование,  	Истина);
	ОформитьЭлементФормы("ДекорацияИНН", 				 ИНН, 				 	Истина);
	ОформитьЭлементФормы("ДекорацияКПП", 				 КПП, 				 	Истина);
	ОформитьЭлементФормы("ДекорацияОГРН", 				 ОГРН, 				 	ЭтоЮридическоеЛицо);
	ОформитьЭлементФормы("ДекорацияРегНомерПФР", 		 РегНомерПФР, 		 	СдаватьВПФР);
	ОформитьЭлементФормы("ДекорацияРегНомерФСС", 		 РегНомерФСС, 		 	СдаватьВФСС);
	
	Если не ЭтоЮридическоеЛицо Тогда 		
		Элементы.ДекорацияКПП.Видимость = Ложь;
		Элементы.НадписьКПП.Видимость 	= Ложь;
		КПП = "";
	КонецЕсли;	
	
	// Доп код ФСС
	Если НЕ (ПризнакОбособленногоПодразделения И ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ЭтоЮрЛицо(Организация)) Тогда
		// Доп код ФСС не виден
		Элементы.ГруппаДополнительныйКодФСС.Видимость 	= Ложь;
		ДополнительныйКодФСС = "";
	Иначе
		// Доп код ФСС виден
		Элементы.ГруппаДополнительныйКодФСС.Видимость 	= Истина;
		
		// Определяем способ отображения доп кода ФСС - гиперссылка или поле
		Если РеквизитыНеХранящиесяВБазе.Найти(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ДополнительныйКодФСС")) = Неопределено Тогда
			Элементы.ГруппаСпособовВводаДополнительногоКодаФСС.ТекущаяСтраница = Элементы.СтраницаДекорацияДополнительныйКодФСС;
			ОформитьЭлементФормы("ДекорацияДополнительныйКодФСС", ДополнительныйКодФСС,	СдаватьВФСС);
		Иначе
			Элементы.ГруппаСпособовВводаДополнительногоКодаФСС.ТекущаяСтраница = Элементы.СтраницаДополнительныйКодФСС;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОформлениеРеквизитовВладельцаЭЦП()
	
	ОформитьЭлементФормы("ДекорацияВладелецЭЦПФамилия",  ВладелецЭЦПФамилия,  Истина);
	ОформитьЭлементФормы("ДекорацияВладелецЭЦПИмя", 	 ВладелецЭЦПИмя, 	  Истина);
	ОформитьЭлементФормы("ДекорацияВладелецЭЦПОтчество", ВладелецЭЦПОтчество, Ложь);
	
	Если ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.СНИЛСДоступенДляРедактирования(ВладелецЭЦП) Тогда
		Элементы.ГруппаСпособовВводаВладелецЭЦПСНИЛС.ТекущаяСтраница = Элементы.СтраницаДекорацияВладелецЭЦПСНИЛС;
		ОформитьЭлементФормы("ДекорацияВладелецЭЦПСНИЛС", 	 ВладелецЭЦПСНИЛС, 	  Истина);
	Иначе
		Элементы.ГруппаСпособовВводаВладелецЭЦПСНИЛС.ТекущаяСтраница = Элементы.СтраницаВладелецЭЦПСНИЛС;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьЭлементФормы(ИмяЭлемента, Знач Значение, ОбязательныйДляЗаполнения)
	
	СинийЦвет 				= Новый Цвет(28,85,174); 
	КрасныйЦвет 			= Новый Цвет(178,34,34);    
	СерыйЦвет 				= Новый Цвет(192,192,192);
	ЦветТекстаФормы			= Новый Цвет(65,48,3);
	
	Элемент 				= Элементы[ИмяЭлемента];
	
	ПроверяемоеЗначение 	= Строка(Значение);
	ПроверяемоеЗначение 	= СтрЗаменить(ПроверяемоеЗначение,"-","");
	ПроверяемоеЗначение 	= СтрЗаменить(ПроверяемоеЗначение,",","");
	ПроверяемоеЗначение 	= СтрЗаменить(ПроверяемоеЗначение," ","");
	
	ЗначениеЗаполнено 		= ЗначениеЗаполнено(ПроверяемоеЗначение);	
	Элемент.Гиперссылка 	= не ЗначениеЗаполнено;	
	
	Если ЗначениеЗаполнено тогда 		
		Элемент.ЦветТекста 	= ЦветТекстаФормы;
		Элемент.Заголовок  	= Строка(Значение);
	Иначе	
		Элемент.ЦветТекста 	= ?(ОбязательныйДляЗаполнения,КрасныйЦвет,СинийЦвет);
		Элемент.Заголовок  	= "Заполнить";
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРеквизитыОрганизации()
	
	ДанныеОрганизацииПредыдущие = ДанныеОрганизации;
	ДанныеЗаполненияПредыдущие  = ДанныеЗаполнения;

	//получаем новые данные по организации
	СтруктураРеквизитов = Новый Структура("Организация,ПриОткрытии", ?(ЗначениеЗаполнено(Организация),Организация,Неопределено),Ложь);
	КонтекстЭДОКлиент.ЗаполнитьДанные(СтруктураРеквизитов);
	ДанныеЗаполнения 	= КонтекстЭДОКлиент.ПолучитьДанныеЗаполнения(СтруктураРеквизитов);
	ДанныеОрганизации 	= ДанныеЗаполнения.СтруктураДанныхОрганизации;
	
	ТипИсполнителя 		= КонтекстЭДОКлиент.ПолучитьТипИсполнителя(ВладелецЭЦПТипПеречисление);
	ПолучитьВидИсполнителя(ДанныеОрганизации,ТипИсполнителя);
	
	ЭтоЮридическоеЛицо	= ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ЭтоЮрЛицо(Организация);
	
	Если ДанныеОрганизацииПредыдущие = Неопределено ИЛИ ДанныеЗаполненияПредыдущие = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПопытатьсяОбновитьРеквизит(ДанныеОрганизацииПредыдущие, "ТипОрганизации", 			ЭтоЮридическоеЛицо, 	ДанныеОрганизации, "ТипОрганизации", 		ДанныеОрганизацииЗаполненыКопированием);
	ПопытатьсяОбновитьРеквизит(ДанныеОрганизацииПредыдущие, "НаимЮЛПол", 				ПолноеНаименование, 	ДанныеОрганизации, "НаимЮЛПол",				ДанныеОрганизацииЗаполненыКопированием);
	ПопытатьсяОбновитьРеквизит(ДанныеОрганизацииПредыдущие, "КраткоеНаименование", 		КраткоеНаименование, 	ДанныеОрганизации, "КраткоеНаименование", 	ДанныеОрганизацииЗаполненыКопированием);
	ПопытатьсяОбновитьРеквизит(ДанныеОрганизацииПредыдущие, "ИННЮЛ", 					ИНН, 					ДанныеОрганизации, "ИННЮЛ", 				ДанныеОрганизацииЗаполненыКопированием);
	Если ЭтоЮридическоеЛицо Тогда
		ПопытатьсяОбновитьРеквизит(ДанныеОрганизацииПредыдущие, "КППЮЛ", КПП, ДанныеОрганизации, "КППЮЛ", ДанныеОрганизацииЗаполненыКопированием);
	Иначе
		КПП = "";	
	КонецЕсли;	
	
	ПопытатьсяОбновитьРеквизит(ДанныеОрганизацииПредыдущие, "ОГРН", 					ОГРН, 					ДанныеОрганизации, "ОГРН", 						ДанныеОрганизацииЗаполненыКопированием);
	ПопытатьсяОбновитьРеквизит(ДанныеОрганизацииПредыдущие, "РегНомПФР", 				РегНомерПФР,			ДанныеОрганизации, "РегНомПФР", 				ДанныеОрганизацииЗаполненыКопированием);
	ПопытатьсяОбновитьРеквизит(ДанныеОрганизацииПредыдущие, "РегистрационныйНомерФСС",	РегНомерФСС, 			ДанныеОрганизации, "РегистрационныйНомерФСС", 	ДанныеОрганизацииЗаполненыКопированием);
	
	Если РеквизитыНеХранящиесяВБазе.Найти(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ДополнительныйКодФСС")) = Неопределено Тогда 
		ПопытатьсяОбновитьРеквизит(ДанныеОрганизацииПредыдущие, "РеквизитДопКодФСС", 		ДополнительныйКодФСС, 	ДанныеОрганизации, "РеквизитДопКодФСС", 	ДанныеОрганизацииЗаполненыКопированием);
	КонецЕсли;
	
	ПопытатьсяОбновитьРеквизит(ДанныеОрганизацииПредыдущие, "ТелОрганизации", 			ТелефонОсновной, 		ДанныеОрганизации, "ТелОрганизации", 	ДанныеОрганизацииЗаполненыКопированием);
	ПопытатьсяОбновитьРеквизит(ДанныеОрганизацииПредыдущие, "ТелРук", 					ТелефонДополнительный, 	ДанныеОрганизации, "ТелРук",			ДанныеОрганизацииЗаполненыКопированием);
	
	ПопытатьсяОбновитьРеквизит(ДанныеЗаполненияПредыдущие, "АдресЮридический", 			АдрЮР, 					ДанныеЗаполнения, "АдресЮридический", 	ДанныеОрганизацииЗаполненыКопированием);
	ПопытатьсяОбновитьРеквизит(ДанныеЗаполненияПредыдущие, "АдресФактический", 			АдрФакт, 				ДанныеЗаполнения, "АдресФактический",	ДанныеОрганизацииЗаполненыКопированием);
	ПопытатьсяОбновитьРеквизит(ДанныеЗаполненияПредыдущие, "ЮрАдрес", 					АдресЮридический, 		ДанныеЗаполнения, "ЮрАдрес",			ДанныеОрганизацииЗаполненыКопированием);
	ПопытатьсяОбновитьРеквизит(ДанныеЗаполненияПредыдущие, "ФактАдрес", 				АдресФактический, 		ДанныеЗаполнения, "ФактАдрес",			ДанныеОрганизацииЗаполненыКопированием);
	ПопытатьсяОбновитьРеквизит(ДанныеОрганизацииПредыдущие,"ЭлектроннаяПочта", 			ЭлектроннаяПочта, 		ДанныеОрганизации, "ЭлектроннаяПочта",	ДанныеОрганизацииЗаполненыКопированием);
	
	КодРегионаФСРАРПредыдущиее 	= РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(ДанныеЗаполненияПредыдущие.АдресЮридический).Регион;
	КодРегионаФСРАРНовое 		= РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(ДанныеЗаполнения.АдресЮридический).Регион;
	ПопытатьсяОбновитьРеквизит(КодРегионаФСРАРПредыдущиее, , КодРегионаФСРАР, КодРегионаФСРАРНовое, , ДанныеОрганизацииЗаполненыКопированием);
	
	Если АдресЮридический = ",,,,,,,,," Тогда
		АдресЮридический = "";
	КонецЕсли;
	
	Если АдресФактический = ",,,,,,,,," Тогда
		АдресФактический = "";
	КонецЕсли;
	
	Если ЭтоЮридическоеЛицо Тогда
		Если ДанныеОрганизацииПредыдущие.Свойство("ПризнакОбособленногоПодразделения") Тогда
			ПопытатьсяОбновитьРеквизит(ДанныеОрганизацииПредыдущие, "ПризнакОбособленногоПодразделения", 	ПризнакОбособленногоПодразделения, 	ДанныеОрганизации, "ПризнакОбособленногоПодразделения", ДанныеОрганизацииЗаполненыКопированием);
		КонецЕсли;
		
		Если ДанныеОрганизацииПредыдущие.Свойство("КрупнейшийНалогоплательщик") Тогда
			ПопытатьсяОбновитьРеквизит(ДанныеОрганизацииПредыдущие, "КрупнейшийНалогоплательщик", 			КрупнейшийНалогоплательщик, 		ДанныеОрганизации, "КрупнейшийНалогоплательщик", 		ДанныеОрганизацииЗаполненыКопированием);
		КонецЕсли;	
	КонецЕсли;
	
	ИзменитьОформлениеРеквизитовОрганизации();
	ОбновитьЭлементыСтраницыОтчетностьВФСРАР();
	Элементы.НадписьОГРН.Заголовок = ?(ЭтоЮридическоеЛицо,"ОГРН:","ОГРНИП:");
	
	// Заполняем значения кодов контролирующих органов по умолчанию
	ВосстановитьНаправленияПоУмолчанию();
	
	НовыйКодПФР = КодПФР();
	Если НовыйКодПФР <> КодПФР Тогда
		КодПФР = НовыйКодПФР;
	КонецЕсли;
	
	НовыйКодРосстата = КодРосстата();
	Если НовыйКодРосстата <> КодРосстата Тогда
		КодРосстата = НовыйКодРосстата;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРеквизитыВладельцаЭЦП()
	
	Если ВыборДиректора = 1 Тогда
		ТипЗаполнения = 1;
	КонецЕсли;	
	Если ВыборБухгалтера = 1 Тогда
		ТипЗаполнения = 2;
	КонецЕсли;
	Если ВыборИсполнителя = 1 Тогда
		ТипЗаполнения = 3;
	КонецЕсли;
	
	ПредыдущиеДанныеСотрудника = ДанныеСотрудника;
	
	СтруктураРеквизитов = Новый Структура("Организация,ПриОткрытии",?(ЗначениеЗаполнено(Организация),Организация,Неопределено),Ложь);
	КонтекстЭДОКлиент.ЗаполнитьДанные(СтруктураРеквизитов);
	ДанныеЗаполнения 	= КонтекстЭДОКлиент.ПолучитьДанныеЗаполнения(СтруктураРеквизитов);
	ДанныеОрганизации 	= ДанныеЗаполнения.СтруктураДанныхОрганизации;
	
	ДанныеОрганизации.Вставить("Организация", Организация);
	ДанныеСотрудника = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ПолучитьДанныеСотрудника(ТипЗаполнения,ДанныеОрганизации,ВладелецЭЦП);
	
	// Если документ заполнен копированием, то заполняем структуру ПредыдущиеДанныеСотрудника из скопированных данных
	Если ПредыдущиеДанныеСотрудника = Неопределено И ДанныеВладельцаЭЦПЗаполненыКопированием Тогда
		
		ПредыдущиеДанныеСотрудника = Новый Структура;
		
		// ФИО
		ФИО = Новый Структура;
		ФИО.Вставить("Имя", 		ВладелецЭЦПИмя); 
		ФИО.Вставить("Фамилия", 	ВладелецЭЦПФамилия); 
		ФИО.Вставить("Отчество", 	ВладелецЭЦПОтчество);
		
		ПредыдущиеДанныеСотрудника.Вставить("ФИО", 			ФИО);
		
		// Паспортные данные
		ПредыдущиеДанныеСотрудника.Вставить("ВидДокумента", 	ВладелецЭЦПВидДокумента);
		ПредыдущиеДанныеСотрудника.Вставить("Серия", 			ВладелецЭЦПСерияДокумента);
		ПредыдущиеДанныеСотрудника.Вставить("Номер", 			ВладелецЭЦПНомерДокумента);
		ПредыдущиеДанныеСотрудника.Вставить("ДатаВыдачи", 		ВладелецЭЦПДатаВыдачиДокумента);
		ПредыдущиеДанныеСотрудника.Вставить("КемВыдан", 		ВладелецЭЦПКемВыданДокумент);
		ПредыдущиеДанныеСотрудника.Вставить("Должность", 		ВладелецЭЦПДолжность);
		ПредыдущиеДанныеСотрудника.Вставить("Подразделение",	ВладелецЭЦППодразделение);
		ПредыдущиеДанныеСотрудника.Вставить("СНИЛС", 			ВладелецЭЦПСНИЛС);
		
	КонецЕсли;
	
	Если ПредыдущиеДанныеСотрудника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// ФИО
	ПопытатьсяОбновитьРеквизит(ПредыдущиеДанныеСотрудника.ФИО, "Имя", 		ВладелецЭЦПИмя, 				ДанныеСотрудника.ФИО, "Имя");
	ПопытатьсяОбновитьРеквизит(ПредыдущиеДанныеСотрудника.ФИО, "Фамилия", 	ВладелецЭЦПФамилия, 			ДанныеСотрудника.ФИО, "Фамилия");
	ПопытатьсяОбновитьРеквизит(ПредыдущиеДанныеСотрудника.ФИО, "Отчество", 	ВладелецЭЦПОтчество, 			ДанныеСотрудника.ФИО, "Отчество");
	
	// Паспортные данные
	ПопытатьсяОбновитьРеквизитДляВидаДокумента(ПредыдущиеДанныеСотрудника, "ВидДокумента",					ВладелецЭЦПВидДокумента, ДанныеСотрудника, "ВидДокумента");
	ПопытатьсяОбновитьРеквизит(ПредыдущиеДанныеСотрудника, "Серия",			ВладелецЭЦПСерияДокумента, 		ДанныеСотрудника, "Серия");
	ПопытатьсяОбновитьРеквизит(ПредыдущиеДанныеСотрудника, "Номер", 		ВладелецЭЦПНомерДокумента, 		ДанныеСотрудника, "Номер");
	ПопытатьсяОбновитьРеквизит(ПредыдущиеДанныеСотрудника, "ДатаВыдачи", 	ВладелецЭЦПДатаВыдачиДокумента, ДанныеСотрудника, "ДатаВыдачи");
	ПопытатьсяОбновитьРеквизит(ПредыдущиеДанныеСотрудника, "КемВыдан", 		ВладелецЭЦПКемВыданДокумент, 	ДанныеСотрудника, "КемВыдан");
	ПопытатьсяОбновитьРеквизит(ПредыдущиеДанныеСотрудника, "Должность", 	ВладелецЭЦПДолжность, 			ДанныеСотрудника, "Должность");
	ПопытатьсяОбновитьРеквизит(ПредыдущиеДанныеСотрудника, "Подразделение", ВладелецЭЦППодразделение,		ДанныеСотрудника, "Подразделение");
	ПопытатьсяОбновитьРеквизит(ПредыдущиеДанныеСотрудника, "СНИЛС", 		ВладелецЭЦПСНИЛС, 				ДанныеСотрудника, "СНИЛС");
	
	ИзменитьОформлениеРеквизитовВладельцаЭЦП();
	
КонецПроцедуры	

&НаКлиенте
Процедура ПопытатьсяОбновитьРеквизит(СтарыеДанные, ПолеСтарыхДанных = Неопределено, ТекущееЗначение, НовыеДанные, ПолеНовыхДанных  = Неопределено, ДанныеЗаполненыКопированием = Ложь)
	
	СтароеЗначение = Неопределено;
	НовоеЗначение = Неопределено;
	
	// проверяем старые данные
	Если ТипЗнч(СтарыеДанные) = Тип("Структура") Тогда
		НайденоПолеВСтарыхДанных = СтарыеДанные.Свойство(ПолеСтарыхДанных, СтароеЗначение);
	Иначе
		НайденоПолеВСтарыхДанных = Истина;
		СтароеЗначение = СтарыеДанные;
	КонецЕсли;
	
	// проверяем новые данные
	Если ТипЗнч(НовыеДанные) = Тип("Структура") Тогда
		НайденоПолеВНовыхДанных = НовыеДанные.Свойство(ПолеНовыхДанных, НовоеЗначение);
	Иначе
		НайденоПолеВНовыхДанных = Истина;
		НовоеЗначение = НовыеДанные;
	КонецЕсли;
	
	// если поле присутствует и в старых данных и новых, тогда пытаемся обновить значение
	Если НайденоПолеВСтарыхДанных И НайденоПолеВНовыхДанных Тогда
		Если СтароеЗначение <> НовоеЗначение ИЛИ ТекущееЗначение <> НовоеЗначение И ДанныеЗаполненыКопированием Тогда
			ТекущееЗначение = НовоеЗначение;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПопытатьсяОбновитьРеквизитДляВидаДокумента(СтарыеДанные, ПолеСтарыхДанных, ТекущееЗначение, НовыеДанные, ПолеНовыхДанных)
	СтароеЗначение = Неопределено;
	НовоеЗначение = Неопределено;
	
	НайденоПолеВСтарыхДанных = СтарыеДанные.Свойство(ПолеСтарыхДанных, СтароеЗначение);
	НайденоПолеВНовыхДанных = НовыеДанные.Свойство(ПолеНовыхДанных, НовоеЗначение);
	
	// если поле присутствует и в старых данных и новых, тогда пытаемся обновить значение
	Если НайденоПолеВСтарыхДанных И НайденоПолеВНовыхДанных Тогда
		НовоеЗначениеВидаДокумента = ПолучитьВидДокументаПоНаименованию(НовоеЗначение);
		Если ПолучитьВидДокументаПоНаименованию(СтароеЗначение) <> НовоеЗначениеВидаДокумента 
			ИЛИ ТекущееЗначение <> НовоеЗначениеВидаДокумента Тогда
			ТекущееЗначение = НовоеЗначениеВидаДокумента;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьВидДокументаПоНаименованию(Наименование)
	
	Результат = Справочники.ВидыДокументовФизическихЛиц.НайтиПоНаименованию(Строка(Наименование));
	Если Результат = Неопределено ИЛИ Наименование = Неопределено Тогда
		Возврат Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка();
	Иначе 	
		Возврат Результат;
	КонецЕсли;	

КонецФункции

&НаКлиенте
Процедура СформироватьТаблицуДляПодтвержденияДанных()

	ТаблицаДанныхЗаявленияНаПодключение.Очистить();
	
	Если ДоступнаЭлектроннаяПодписьВМоделиСервиса Тогда
		Если РежимРаботыСКлючами = 1 Тогда // В облаке
			ДобавитьСтрокуВТаблицуДанныхЗаявления("Место хранения ключа электронной подписи"  , "В защищенном хранилище", Ложь);
			ДобавитьСтрокуВТаблицуДанныхЗаявления("Телефон для получения временных паролей", ТелефонМобильныйДляАвторизации, Ложь);
			Если ЗначениеЗаполнено(ЭлектроннаяПочтаДляПаролей) Тогда
				ДобавитьСтрокуВТаблицуДанныхЗаявления("Электронная почта для получения временных паролей", ЭлектроннаяПочтаДляПаролей, Ложь);
			КонецЕсли;
		Иначе
			ДобавитьСтрокуВТаблицуДанныхЗаявления("Место хранения ключа электронной подписи", "На компьютере", Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Криптопровайдер = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ПолучитьПараметрыКриптопровайдера(ТипКриптопровайдера);
	ОтображаемоеНазваниеКриптопровайдера = "";
	Если ЗначениеЗаполнено(Криптопровайдер) Тогда
		ОтображаемоеНазваниеКриптопровайдера = Криптопровайдер.ОтображаемоеНазвание;
	КонецЕсли;

	ДобавитьСтрокуВТаблицуДанныхЗаявления("Удостоверяющий центр", 			Спецоператор);
	
	Если РежимРаботыСКлючами = 2 Тогда
	ДобавитьСтрокуВТаблицуДанныхЗаявления("Используемый криптопровайдер", 	ОтображаемоеНазваниеКриптопровайдера);
	КонецЕсли;
	ДобавитьСтрокуВТаблицуДанныхЗаявления("Регистрационный номер программы",НомерОсновнойПоставки1с);
	
	// Сведения об организации
	ДобавитьСтрокуВТаблицуДанныхЗаявления("Сведения об организации", , Истина); // заголовок 
	
	ДобавитьСтрокуВТаблицуДанныхЗаявления("Краткое наименование", 			КраткоеНаименование);
	ДобавитьСтрокуВТаблицуДанныхЗаявления("Полное наименование", 			ПолноеНаименование);
	ДобавитьСтрокуВТаблицуДанныхЗаявления("ИНН", 							ИНН);
	ДобавитьСтрокуВТаблицуДанныхЗаявления("КПП", 							КПП);
	
	Если ЭтоЮридическоеЛицо Тогда
		ДобавитьСтрокуВТаблицуДанныхЗаявления("ОГРН", 						ОГРН);
	Иначе 
		ДобавитьСтрокуВТаблицуДанныхЗаявления("ОГРНИП", 					ОГРН);
	КОнецЕсли;		
	
	ДобавитьСтрокуВТаблицуДанныхЗаявления("Регистрационный номер в ПФР", 	РегНомерПФР);
	ДобавитьСтрокуВТаблицуДанныхЗаявления("Регистрационный номер в ФСС", 	РегНомерФСС);
	ДобавитьСтрокуВТаблицуДанныхЗаявления("Организация является крупнейшим налогоплательщиком", КрупнейшийНалогоплательщик);
	ДобавитьСтрокуВТаблицуДанныхЗаявления("Организация является обособленным подразделением", 	ПризнакОбособленногоПодразделения);
	ДобавитьСтрокуВТаблицуДанныхЗаявления("Юридический адрес", 				АдресЮридический);
	ДобавитьСтрокуВТаблицуДанныхЗаявления("Фактический адрес", 				АдресФактический);
	ДобавитьСтрокуВТаблицуДанныхЗаявления("Телефон основной", 				ТелефонОсновной);
	ДобавитьСтрокуВТаблицуДанныхЗаявления("Телефон дополнительный", 		ТелефонДополнительный);
	Если ОператорПоддерживаетСМСУведомление Тогда
		ДобавитьСтрокуВТаблицуДанныхЗаявления("Телефон мобильный", 		?(ПолучатьСМС, ТелефонМобильный, ""));
	КонецЕсли;
	
	ДобавитьСтрокуВТаблицуДанныхЗаявления("Электронная почта", 				ЭлектроннаяПочта);
	Если ПодатьЗаявкуНаСертификатДляФСРАР Тогда 
		ДобавитьСтрокуВТаблицуДанныхЗаявления("Регион", 					КодРегионаФСРАР);
	КонецЕсли;	
	
	// Сведения о сотруднике – владельце электронной подписи
	ДобавитьСтрокуВТаблицуДанныхЗаявления("Сведения о сотруднике – владельце электронной подписи", , Истина); // заголовок
	
	ДобавитьСтрокуВТаблицуДанныхЗаявления("Фамилия", 		ВладелецЭЦПФамилия);
	ДобавитьСтрокуВТаблицуДанныхЗаявления("Имя", 			ВладелецЭЦПИмя);
	ДобавитьСтрокуВТаблицуДанныхЗаявления("Отчество",		ВладелецЭЦПОтчество);
	ДобавитьСтрокуВТаблицуДанныхЗаявления("СНИЛС",			ВладелецЭЦПСНИЛС);
	ДобавитьСтрокуВТаблицуДанныхЗаявления("Должность", 		ВладелецЭЦПДолжность);
	ДобавитьСтрокуВТаблицуДанныхЗаявления("Подразделение", 	ВладелецЭЦППодразделение);
	ДобавитьСтрокуВТаблицуДанныхЗаявления("Документ, удостоверяющий личность", ВладелецЭЦПВидДокумента);
	ДобавитьСтрокуВТаблицуДанныхЗаявления("Серия, номер", 	Строка(ВладелецЭЦПСерияДокумента)+ "," + Строка(ВладелецЭЦПНомерДокумента));
	ДобавитьСтрокуВТаблицуДанныхЗаявления("Дата выдачи", 	ВладелецЭЦПДатаВыдачиДокумента);
	ДобавитьСтрокуВТаблицуДанныхЗаявления("Кем выдан", 		ВладелецЭЦПКемВыданДокумент);

	// Сведения о контролирующих органах
	ДобавитьСтрокуВТаблицуДанныхЗаявления("Сведения о контролирующих органах", , Истина);
	
	// Отображение данных для ФНС
	ДобавитьСтрокуВТаблицуДанныхЗаявления("Отчетность сдается в ФНС", СдаватьВФНС); // заголовок
	Для каждого СтрокаФНС Из Получатели Цикл
		ДобавитьСтрокуВТаблицуДанныхЗаявления("Код ФНС, КПП", Строка(СтрокаФНС.КодПолучателя) + "," + Строка(СтрокаФНС.КПП));
	КонецЦикла; 		
	
	// Отображение данных для ПФР
	ДобавитьСтрокуВТаблицуДанныхЗаявления("Отчетность сдается в ПФР", СдаватьВПФР);
	ОтображаемыйКодПФР = "";
	ОтображаемыйКодПФР = ?(СдаватьВПФР,КодПФР,"");
	ДобавитьСтрокуВТаблицуДанныхЗаявления("Код ПФР", ОтображаемыйКодПФР);
	
	// Отображение данных для ФСС
	ДобавитьСтрокуВТаблицуДанныхЗаявления("Отчетность сдается в ФСС", СдаватьВФСС);
	
	Если ПризнакОбособленногоПодразделения И ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ЭтоЮрЛицо(Организация) Тогда
		ОтображаемыйДополнительныйКодФСС = "";
		ОтображаемыйДополнительныйКодФСС = ?(СдаватьВФСС,ДополнительныйКодФСС,"");	
		ДобавитьСтрокуВТаблицуДанныхЗаявления("Дополнительный код ФСС", ОтображаемыйДополнительныйКодФСС);
	КонецЕсли;
	
	// Отображение данных для Росстат
	ДобавитьСтрокуВТаблицуДанныхЗаявления("Отчетность сдается в Росстат", СдаватьВРосстат);
	Если СдаватьВРосстат Тогда 
		ДобавитьСтрокуВТаблицуДанныхЗаявления("Код Росстата", КодРосстата);
	КонецЕсли;
	ДобавитьСтрокуВТаблицуДанныхЗаявления("Отчетность сдается в Росалкогольрегулирование", ПодатьЗаявкуНаСертификатДляФСРАР);
	ДобавитьСтрокуВТаблицуДанныхЗаявления("Отчетность сдается в Росприроднадзор", ПодатьЗаявкуНаПодключениеРПН);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуВТаблицуДанныхЗаявления(НазваниеРеквизита,  ЗначениеРеквизита = "", ВыделятьЖирным = Ложь )
	
	НоваяСтрока 						= ТаблицаДанныхЗаявленияНаПодключение.Добавить();
	НоваяСтрока.ВыделятьСтрокуЖирным 	= ВыделятьЖирным;
	НоваяСтрока.НазваниеРеквизита 		= НазваниеРеквизита;
	НоваяСтрока.ЗначениеРеквизита		= ЗначениеРеквизита;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьВыбранноеНаправление()
	ТекущаяСтрока = Элементы.Получатели.ТекущаяСтрока;
	
	Если КонтекстЭДОКлиент.ТекущаяСтрокаВыбрана(Получатели,ТекущаяСтрока,"редактирования") Тогда
		ЭлементКоллекции = Получатели.НайтиПоИдентификатору(ТекущаяСтрока);
		НаправлениеДействие = "Редактировать";
		ОткрытьФормуНаправления(ТекущаяСтрока);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СформироватьИОтправитьЗаявление()
	
	Если РежимРаботыСКлючами = 1 И Не ТелефонПодтвержден Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Укажите и подтвердите телефон для получения временных паролей'"),, "ТелефонМобильныйДляАвторизации");
		УправлениеФормой(ЭтаФорма);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СформироватьИОтправитьЗаявлениеЗавершение", ЭтотОбъект);
	КонтекстЭДОКлиент.СформироватьИОтправитьЗаявление(ДокументЗаявление, , Истина, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьИОтправитьЗаявлениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Свойство("ТекстОшибки") Тогда
	ПолученныйТекстОшибокОтправки = Результат.ТекстОшибки;
	ИначеЕсли Результат.Свойство("ОписаниеОшибки") Тогда
		ПолученныйТекстОшибокОтправки = Результат.ОписаниеОшибки;
	КонецЕсли;
	
	Если ТекстОшибокОтправки <> ПолученныйТекстОшибокОтправки Тогда
		ТекстОшибокОтправки = ПолученныйТекстОшибокОтправки;
	КонецЕсли;
		
	ОповеститьОбИзменении(ДокументЗаявление.Ссылка);
	
	ОткрытьФормуНаСтраницеРезультатаОтправки();
	
	ПоказатьСледующуюСтраницу();
	
	ЭтаФорма.Активизировать();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНаСтраницеРезультатаОтправки()
	
	Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.ПолучениеРезультатаОтправкиЗаявления;
    ПанельРезультатов = Элементы.ГруппаРезультатовОтправки;
	Если  ДокументЗаявление.Статус =  ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Подготовлено") Тогда 
		ПанельРезультатов.ТекущаяСтраница = ПанельРезультатов.ПодчиненныеЭлементы.ГруппаНеОтправлено; 				
	ИначеЕсли ДокументЗаявление.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отправлено") Тогда 
		ПанельРезультатов.ТекущаяСтраница = ПанельРезультатов.ПодчиненныеЭлементы.ГруппаОтправленоИПринято;
		ПрограммноеЗакрытие = Истина;
	ИначеЕсли ДокументЗаявление.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отклонено") Тогда 
		ПанельРезультатов.ТекущаяСтраница = ПанельРезультатов.ПодчиненныеЭлементы.ГруппаОтправленоИОтклонено;
		ПрограммноеЗакрытие = Истина;
	Иначе 	
		ПанельРезультатов.ТекущаяСтраница = ПанельРезультатов.ПодчиненныеЭлементы.ГруппаНеОтправлено;
		ПрограммноеЗакрытие = Истина;
	КонецЕсли;
	
	// Формируем текст заголовока 
	Элементы.ПодсказкаПоРезультатам8.Заголовок = НСтр("ru='Что делать?
			|1. Попробуйте отправить заявление еще раз.
			|2. Проверьте, что отключен контроль учетных записей (UAC) в Windows.'");
	Если ВыборКриптопровайдера = 1 Тогда
		 Элементы.ПодсказкаПоРезультатам8.Заголовок = Элементы.ПодсказкаПоРезультатам8.Заголовок + Символы.ПС + 
		 	НСтр("ru='3. Проверьте, что VipNet зарегистрирован.'");
	КонецЕсли;
	
	ЭтаФорма.Активизировать();
	
КонецПроцедуры	

&НаКлиенте
Процедура УстановитьВидимостьКодовКонтролирующихОрганов()
	
	Элементы.ГруппаКодовФНС.Видимость	= СдаватьВФНС;
    Элементы.КодПФР.Видимость			= СдаватьВПФР;
	Элементы.КодРосстата.Видимость		= СдаватьВРосстат;
	
КонецПроцедуры

&НаКлиенте 
Процедура УстановитьЗначенияКодовКонтролирующихОргановПоУмолчанию(ДанныеОрганизации)
	
	КодПФР 		= КодПФР(ДанныеОрганизации);
	КодРосстата = КодРосстата(ДанныеОрганизации);
	
КонецПроцедуры

&НаКлиенте
Функция КодРосстата(РеквизитыОрганизации = Неопределено)
	
	Если РеквизитыОрганизации = Неопределено Тогда 
		РеквизитыОрганизации = ДанныеОрганизации;
	КонецЕсли;
	
	Возврат РеквизитыОрганизации.КодОрганаФСГС;
	
КонецФункции	

&НаКлиенте 
Функция КодПФР(РеквизитыОрганизации = Неопределено)
	
	Если РеквизитыОрганизации = Неопределено Тогда 
		РеквизитыОрганизации = ДанныеОрганизации;
	КонецЕсли;
	
	ПолученыйКодПФР = "";
	
	Если ПустаяСтрока(РеквизитыОрганизации.КодОрганаПФР) ИЛИ СтрДлина(РеквизитыОрганизации.КодОрганаПФР) < 7 Тогда
		ПолученыйКодПФР = Лев(РеквизитыОрганизации.КодОрганаПФР,7); 
	Иначе
		ПолученыйКодПФР = РеквизитыОрганизации.КодОрганаПФР;
	КонецЕсли;
	
	Возврат ПолученыйКодПФР;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьВыборCSPВоВременныеНастройки(Значение) Экспорт

	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"МастерФормированияЗаявкиНаПодключение",
		"ВыбранныйКриптопровайдер",
		Значение,,
			
	);	

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТелефон(Команда)
	
	НомерТелефона = ТелефонМобильныйДляАвторизации;
	Если ЗначениеЗаполнено(НомерТелефона) И СтрДлина(СтрЗаменить(НомерТелефона, " ", "")) = 16 Тогда 
		ПроверочныйКод = Неопределено;
		КодОтправлен = ПроверитьТелефонНаСервере(НомерТелефона);
		
		Если Не КодОтправлен Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Сервис отправки SMS-сообщений временно недоступен. Повторите попытку позже.'"));
			Возврат;
		КонецЕсли;
		
		ТелефонПодтвержден = Ложь;
		ЗапуститьТаймерПовторнойОтправки();
		
		ТекущийЭлемент = Элементы.ПроверочныйКод;
		
		УправлениеФормой(ЭтаФорма);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Укажите номер мобильного телефона'"),, "ТелефонМобильныйДляАвторизации");
	КонецЕсли;
	ТелефонМобильныйДляАвторизации = НомерТелефона;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьТелефонНаСервере(ТелефонМобильныйДляАвторизации, Повторно = Ложь)
	
	Возврат КриптосервисВМоделиСервиса.ПолучитьПроверочныйКод(ТелефонМобильныйДляАвторизации, Повторно, "phone");
	
КонецФункции

&НаКлиенте
Процедура Подтвердить()
	
	Если Не ЗначениеЗаполнено(ПроверочныйКод)
		ИЛИ СтрДлина(СокрЛП(ПроверочныйКод)) <> 6 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Укажите код подтверждения из SMS-сообщения'"),, "ПроверочныйКод");
		Возврат;	
	КонецЕсли;
	
	ТелефонПодтвержден = ПодтвердитьНаСервере(ТелефонМобильныйДляАвторизации, ПроверочныйКод);
	Если Не ТелефонПодтвержден Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Указан неверный код подтверждения'"),, "ПроверочныйКод");
	КонецЕсли;
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьПочта()
	
	Если Не ЗначениеЗаполнено(ПроверочныйКодПочта)
		ИЛИ СтрДлина(СокрЛП(ПроверочныйКодПочта)) <> 6 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Укажите код подтверждения из письма'"),, "ПроверочныйКодПочта");
		Возврат;	
	КонецЕсли;
	
	ПочтаПодтверждена = ПодтвердитьПочтаНаСервере(ЭлектроннаяПочтаДляПаролей, ПроверочныйКодПочта);
	Если Не ПочтаПодтверждена Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Указан неверный код подтверждения'"),, "ПроверочныйКодПочта");
	КонецЕсли;
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодтвердитьНаСервере(ТелефонМобильныйДляАвторизации, ПроверочныйКод)
	
	Возврат КриптосервисВМоделиСервиса.ПроверитьНомерТелефона(ТелефонМобильныйДляАвторизации, ПроверочныйКод);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПодтвердитьПочтаНаСервере(ЭлектроннаяПочтаДляПаролей, ПроверочныйКод)
	
	Возврат КриптосервисВМоделиСервиса.ПроверитьАдресЭлектроннойПочты(ЭлектроннаяПочтаДляПаролей, ПроверочныйКод);
	
КонецФункции

&НаКлиенте
Процедура РежимРаботыСКлючамиПриИзменении(Элемент)
	
	КодОтправлен = Ложь;
	ТелефонПодтвержден = Ложь;
	ПроверочныйКод = Неопределено;
	ТелефонМобильныйДляАвторизации = Неопределено;
	
	КодОтправленПочта = Ложь;
	ПочтаПодтверждена = Ложь;
	ПроверочныйКодПочта = Неопределено;
	ЭлектроннаяПочтаДляПаролей = Неопределено;
	
	Таймер = 0;
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Элементы.ИспользуемыйКриптопровайдер.Видимость = Форма.РежимРаботыСКлючами <> 1;
		
	Элементы.ГруппаПодсказокПоУЦ.Видимость = Форма.РежимРаботыСКлючами <> 1;
	Элементы.ГруппаСсылокУЦ.Видимость = Форма.РежимРаботыСКлючами <> 1;
		
	Элементы.ГруппаПроверкаНомера.Доступность = Форма.РежимРаботыСКлючами = 1;
	Элементы.ГруппаПроверкаПочты.Доступность = Форма.РежимРаботыСКлючами = 1 И Форма.ТелефонПодтвержден;
	
	// Телефон подтвержден
	Элементы.КартинкаТелефонПроверен.Видимость = Форма.ТелефонПодтвержден;
	Элементы.ГруппаНадписьПовторнаяОтправкаСМС.Видимость = Не Форма.ТелефонПодтвержден;
	Элементы.ПроверитьТелефон.Видимость = Не Форма.ТелефонПодтвержден;
	Элементы.ПроверитьТелефон.Доступность = Не Форма.КодОтправлен;
	Элементы.ГруппаПолеПроверочногоКода.Видимость = Форма.КодОтправлен И Не Форма.ТелефонПодтвержден;
	Элементы.ТелефонМобильныйДляАвторизации.ТолькоПросмотр = Форма.КодОтправлен;
	Если Форма.КодОтправлен Тогда // Обход ошибки веб-клиента
		Элементы.ТелефонМобильныйДляАвторизации.Маска = "";
	Иначе
		Элементы.ТелефонМобильныйДляАвторизации.Маска = "+7 (999) 999-99-99";
	КонецЕсли;
	
	// Почта
	Элементы.КартинкаПочтаПроверена.Видимость = Форма.ПочтаПодтверждена;
	Элементы.ГруппаНадписьПовторнаяОтправкаПочта.Видимость = Не Форма.ПочтаПодтверждена И Форма.ТелефонПодтвержден;
	Элементы.ПроверитьПочту.Видимость = Не Форма.ПочтаПодтверждена;
	Элементы.ПроверитьПочту.Доступность = Не Форма.КодОтправленПочта;
	Элементы.ГруппаПроверочныйКодПочта.Видимость = Форма.КодОтправленПочта И Не Форма.ПочтаПодтверждена;
	Элементы.ЭлектроннаяПочтаДляПаролей.ТолькоПросмотр = Форма.КодОтправленПочта;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНадписьОбработногоОтчета()
	
	Если Таймер > 0 И Не ТелефонПодтвержден Тогда
		Таймер = Таймер - 1;
		Элементы.ВыслатьКодЕщеРаз.Доступность = Ложь;
		НадписьПовторнойОтправкиСМС = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '(через %1 сек...)'"), Таймер);

		ПодключитьОбработчикОжидания("ОбновитьНадписьОбработногоОтчета", 1, Истина);
	Иначе
		Элементы.ВыслатьКодЕщеРаз.Доступность = Истина;
		НадписьПовторнойОтправкиСМС = "";
	КонецЕсли;
	
	Если ТелефонПодтвержден Тогда
		Элементы.ВыслатьКодЕщеРаз.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНадписьОбработногоОтчетаПочта()
	
	Если Таймер > 0 И Не ПочтаПодтверждена Тогда
		Таймер = Таймер - 1;
		Элементы.ВыслатьКодЕщеРазПочта.Доступность = Ложь;
		НадписьПовторнойОтправкиПочты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '(через %1 сек...)'"), Таймер);

		ПодключитьОбработчикОжидания("ОбновитьНадписьОбработногоОтчетаПочта", 1, Истина);
	Иначе
		Элементы.ВыслатьКодЕщеРазПочта.Доступность = Истина;
		НадписьПовторнойОтправкиПочты = "";
	КонецЕсли;
	
	Если ПочтаПодтверждена Тогда
		Элементы.ВыслатьКодЕщеРазПочта.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыслатьКодЕщеРаз(Команда)
	
	ПроверочныйКод = Неопределено;
	КодОтправлен = ПроверитьТелефонНаСервере(ТелефонМобильныйДляАвторизации, Истина);
	
	ЗапуститьТаймерПовторнойОтправки();	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыслатьКодЕщеРазПочта(Команда)
	
	ПроверочныйКодПочта = Неопределено;
	КодОтправленПочта = ПроверитьАдресЭлектроннойПочтыНаСервере(ЭлектроннаяПочтаДляПаролей, Истина);
	
	ЗапуститьТаймерПовторнойОтправкиПочта();	
	
КонецПроцедуры


&НаКлиенте
Процедура ЗапуститьТаймерПовторнойОтправки()
	
	Таймер = 60;
	ПодключитьОбработчикОжидания("ОбновитьНадписьОбработногоОтчета", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьТаймерПовторнойОтправкиПочта()
	
	Таймер = 60;
	ПодключитьОбработчикОжидания("ОбновитьНадписьОбработногоОтчетаПочта", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьМобильногоТелефона()
	
	// доступность
	Элементы.ТелефонМобильный.Доступность = ПолучатьСМС;
	// значение
	Если ПолучатьСМС = Ложь Тогда
		#Если ВебКлиент Тогда
			ТелефонМобильный = "+7 (   )    -  -  ";
		#Иначе
			ТелефонМобильный = "";
		#КонецЕсли
	КонецЕсли;
	// отметка незаполненность
	Элементы.ТелефонМобильный.АвтоОтметкаНезаполненного = ПолучатьСМС;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучатьСМСПриИзменении(Элемент)
	УстановитьДоступностьМобильногоТелефона();
КонецПроцедуры

&НаКлиенте
Процедура УказатьКриптопровайдерВручнуюЗавершение(ВыборКриптопровайдера, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВыборКриптопровайдера) Тогда
		// устанавливаем текущую страницу ( установлен хотя бы один криптопровайдер)
		Если ВыборКриптопровайдера = 1 Тогда
			ИмяКриптопровайдера = "VipNet CSP";
		Иначе
			ИмяКриптопровайдера = "CryptoPro CSP";
		КонецЕсли;
		УстановитьНаименованияКриптопровайдеровНаФорме(ИмяКриптопровайдера);
		КриптопровайдерВыбранВручную = Истина;
		
	Иначе
		
		ВыборКриптопровайдера = 0;
		КриптопровайдерВыбранВручную = Ложь;
		
	КонецЕсли;
	
	УправлениеКнопкамиНавигации();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверочныйКодПриИзменении(Элемент)
	
	Если СтрДлина(СокрЛП(ПроверочныйКод)) = 6 Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьПолученныйКод", 0.5, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроверочныйКодАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если СтрДлина(СокрЛП(Текст)) = 6 Тогда
		ПроверочныйКод = Текст;
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьПолученныйКод", 0.5, Истина); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьПолученныйКод()
	
	Попытка
		Если СтрДлина(СокрЛП(ПроверочныйКод)) = 6 Тогда
			ТелефонПодтвержден = ПодтвердитьНаСервере(ТелефонМобильныйДляАвторизации, ПроверочныйКод);
			УправлениеФормой(ЭтаФорма);
			Если ТелефонПодтвержден Тогда
				ТекущийЭлемент = Элементы.Далее;
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Указан неверный код подтверждения'"),,"ПроверочныйКод"); 		
			КонецЕсли;
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось выполнить проверку'"),,"ПроверочныйКод");
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверочныйКодПочтаПриИзменении(Элемент)
	
	Если СтрДлина(СокрЛП(ПроверочныйКодПочта)) = 6 Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьПолученныйКодПочта", 0.5, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроверочныйКодПочтаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если СтрДлина(СокрЛП(Текст)) = 6 Тогда
		ПроверочныйКодПочта = Текст;
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьПолученныйКодПочта", 0.5, Истина); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьПолученныйКодПочта()
	
	Попытка
		Если СтрДлина(СокрЛП(ПроверочныйКодПочта)) = 6 Тогда
			ПочтаПодтверждена = ПодтвердитьПочтаНаСервере(ЭлектроннаяПочтаДляПаролей, ПроверочныйКодПочта);
			УправлениеФормой(ЭтаФорма);
			Если ПочтаПодтверждена Тогда
				ТекущийЭлемент = Элементы.Далее;
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Указан неверный код подтверждения'"),,"ПроверочныйКодПочта"); 		
			КонецЕсли;
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось выполнить проверку'"),,"ПроверочныйКодПочта");
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализацияЗначений(Организация)
	
	Если Организация <> Неопределено Тогда
		РеквизитыНеХранящиесяВБазе = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСерверПереопределяемый.РеквизитыНеХранящиесяВБазе(Организация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьАдресЭлектроннойПочты(Команда)
	
	АдресПочты = ЭлектроннаяПочтаДляПаролей;
	Если ЗначениеЗаполнено(АдресПочты) Тогда 
		ПроверочныйКодПочта = Неопределено;
		КодОтправленПочта = ПроверитьАдресЭлектроннойПочтыНаСервере(АдресПочты);
		
		Если Не КодОтправленПочта Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Сервис отправки электронной почты недоступен. Повторите попытку позже.'"));
			Возврат;
		КонецЕсли;
		
		ПочтаПодтверждена = Ложь;
		ЗапуститьТаймерПовторнойОтправкиПочта();
		
		ТекущийЭлемент = Элементы.ПроверочныйКодПочта;
		
		УправлениеФормой(ЭтаФорма);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Укажите адрес электронной почты'"),, "ЭлектроннаяПочтаДляПаролей");
	КонецЕсли;
	ЭлектроннаяПочтаДляПаролей = АдресПочты;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьАдресЭлектроннойПочтыНаСервере(ЭлектроннаяПочтаДляПаролей, Повторно = Ложь)
	
	Возврат КриптосервисВМоделиСервиса.ПолучитьПроверочныйКод(ЭлектроннаяПочтаДляПаролей, Повторно, "email");
	
КонецФункции

&НаКлиенте
Процедура ОпределитьОтветственныеЛицаОрганизации()
	
	Руководитель	= ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.Руководитель(Организация); 
	ГлБухгалтер		= ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ГлБухгалтер(Организация); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПодсказкаЕстьCSP10ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// позволяем пользователю вручную выбрать криптопровайдера
	ФормаВыбораКриптопровайдера = ПолучитьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ФормаВыбораКриптопровайдера");
	ОписаниеОповещения = Новый ОписаниеОповещения("УказатьКриптопровайдерВручнуюЗавершение", ЭтотОбъект);
	ФормаВыбораКриптопровайдера.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаВыбораКриптопровайдера.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаВыбораКриптопровайдера.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодсказкаЕстьCSP12ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПерейтиНаСайтИнфотекс();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодсказкаПерейтиНаСайтКриптоПроОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПерейтиНаСайтКриптоПро();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодсказкаНетCSP3ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПерейтиНаСайтИнфотекс();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодсказкаНетCSP5ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПерейтиНаСайтКриптоПро();
	
КонецПроцедуры
