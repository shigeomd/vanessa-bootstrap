#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПроверкиНаОтключениеФлага

Функция ТекстЗапросаИспользуетсяСправочник(ИмяСправочника)
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИскомыйСправочник.Ссылка
	|ИЗ
	|	Справочник.%1 КАК ИскомыйСправочник";
	
	ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, ИмяСправочника);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаИспользуетсяДокумент(ИмяДокумента, ОтборПоВидуОперации = Ложь, ТолькоПроверка = Истина)
	
	Если ТолькоПроверка Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИскомыйДокумент.Ссылка
		|ИЗ
		|	Документ.%1 КАК ИскомыйДокумент
		|ГДЕ
		|	ИскомыйДокумент.ПометкаУдаления = Ложь";
		Если ОтборПоВидуОперации Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	
			|	И ИскомыйДокумент.ВидОперации В (&ВидыОпераций)";
		КонецЕсли;
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ИскомыйДокумент.Ссылка КАК Ссылка,
		|	ИскомыйДокумент.Дата КАК Дата,
		|	ИскомыйДокумент.Ссылка КАК Представление
		|ИЗ
		|	Документ.%1 КАК ИскомыйДокумент
		|ГДЕ
		|	ИскомыйДокумент.ПометкаУдаления = ЛОЖЬ";
		Если ОтборПоВидуОперации Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	
			|	И ИскомыйДокумент.ВидОперации В (&ВидыОпераций)";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	Ссылка";
	КонецЕсли;
	
	ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, ИмяДокумента);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаИспользоватьВалютныйУчет()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка
	|ПОМЕСТИТЬ ВТ_СчетаССубконтоБанковскиеСчета
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Валютный = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Хозрасчетный.Регистратор КАК Ссылка
	|ИЗ
	|	ВТ_СчетаССубконтоБанковскиеСчета КАК ВТ_СчетаССубконтоБанковскиеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|		ПО ВТ_СчетаССубконтоБанковскиеСчета.Ссылка = Хозрасчетный.СчетДт
	|ГДЕ
	|	Хозрасчетный.ВалютнаяСуммаДт <> 0
	|	И Хозрасчетный.Активность = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Хозрасчетный.Регистратор
	|ИЗ
	|	ВТ_СчетаССубконтоБанковскиеСчета КАК ВТ_СчетаССубконтоБанковскиеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|		ПО ВТ_СчетаССубконтоБанковскиеСчета.Ссылка = Хозрасчетный.СчетКт
	|ГДЕ
	|	Хозрасчетный.ВалютнаяСуммаКт <> 0
	|	И Хозрасчетный.Активность = ИСТИНА";
	
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВедетсяДеятельностьПоДоговорамКомиссии()
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.ВидДоговора В(&ВидыДоговоров)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ИспользуетсяСинхронизацияДанных()
	
	Возврат Константы.ИспользоватьСинхронизациюДанных.Получить() И НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено();
	
КонецФункции 

Функция ОтказСнятьИспользоватьДенежныеДокументы()
	
	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ВыдачаДенежныхДокументов");

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ПоступлениеДенежныхДокументов");
	
	Запрос = Новый Запрос;

	УстановитьПривилегированныйРежим(Истина);

	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ОтказСнять = Ложь;
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ОтказСнять = Истина;
				
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьИспользоватьОплатуПоПлатежнымКартам()
	
	Если ИспользуетсяСинхронизацияДанных() Тогда
		ОтказСнять = Истина;
		Возврат ОтказСнять;
	КонецЕсли;
	
	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ОплатаПлатежнойКартой", , Истина);

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаОплатаВОтчетахОРозничныхПродажах(Истина);
	
	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ОтказСнять = Ложь;
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ОтказСнять = Истина;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьИспользоватьПлатежныеТребования()
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаИспользуетсяДокумент("ПлатежноеТребование");
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОтказСнять = НЕ РезультатЗапроса.Пустой();
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьИспользоватьВалютныйУчет()
	
	Если ИспользуетсяСинхронизацияДанных() Тогда
		ОтказСнять = Истина;
		Возврат ОтказСнять;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаИспользоватьВалютныйУчет();
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОтказСнять = НЕ РезультатЗапроса.Пустой();
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьВедетсяУчетВозвратнойТары()
	
	Если ИспользуетсяСинхронизацияДанных() Тогда
		ОтказСнять = Истина;
		Возврат ОтказСнять;
	КонецЕсли;
	
	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("АвансовыйОтчет", Истина);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("ВозвратТоваровОтПокупателя", Истина);

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("ВозвратТоваровПоставщику", Истина);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("ПередачаТоваров", Истина);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("ПеремещениеТоваров", Истина);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("ПоступлениеИзПереработки", Истина);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("ПоступлениеТоваровУслуг", Истина);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("РеализацияТоваровУслуг", Истина);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("СписаниеТоваров", Истина);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("СчетНаОплатуПокупателю", Истина);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("СчетНаОплатуПоставщика", Истина);
	
	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ОтказСнять = Ложь;
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ОтказСнять = Истина;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОтказСнять;

КонецФункции

Функция ОтказСнятьВедетсяУчетИмпортныхТоваров()
	
	Если ИспользуетсяСинхронизацияДанных() Тогда
		ОтказСнять = Истина;
		Возврат ОтказСнять;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаИспользуетсяСправочник("НомераГТД");
	
	УстановитьПривилегированныйРежим(Истина);

	РезультатЗапроса = Запрос.Выполнить();
	
	ОтказСнять = НЕ РезультатЗапроса.Пустой();
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьИспользоватьКомплектациюНоменклатуры()
	
	Если ИспользуетсяСинхронизацияДанных() Тогда
		ОтказСнять = Истина;
		Возврат ОтказСнять;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаИспользуетсяДокумент("КомплектацияНоменклатуры");
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОтказСнять = НЕ РезультатЗапроса.Пустой();
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьВедетсяУчетОсновныхСредств()
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаИспользуетсяСправочник("ОсновныеСредства");
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОтказСнять = НЕ РезультатЗапроса.Пустой();
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьВедетсяУчетНМА()
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаИспользуетсяСправочник("НематериальныеАктивы");
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОтказСнять = НЕ РезультатЗапроса.Пустой();
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьВедетсяОтгрузкаБезПереходаПраваСобственности()
	
	Если ИспользуетсяСинхронизацияДанных() Тогда
		ОтказСнять = Истина;
		Возврат ОтказСнять;
	КонецЕсли;
	
	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ВидыОпераций");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("РеализацияТоваровУслуг", Истина);
	НоваяСтрока.ВидыОпераций = Новый Массив;
	НоваяСтрока.ВидыОпераций.Добавить(Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности);

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("РеализацияОтгруженныхТоваров");
	
	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		Запрос.УстановитьПараметр("ВидыОпераций", СтрокаТЗ.ВидыОпераций);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ОтказСнять = Ложь;
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ОтказСнять = Истина;
				
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьИспользоватьПакетноеВыставлениеАктов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаИспользуетсяДокумент("ОказаниеУслуг");
	
	УстановитьПривилегированныйРежим(Истина);

	РезультатЗапроса = Запрос.Выполнить();
	
	ОтказСнять = НЕ РезультатЗапроса.Пустой();
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьВедетсяПроизводственнаяДеятельность()
	
	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ВидыОпераций");

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("АктОбОказанииПроизводственныхУслуг");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ОтчетПроизводстваЗаСмену");

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ИнвентаризацияНЗП");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ПоступлениеИзПереработки");

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ПередачаТоваров", Истина);
	НоваяСтрока.ВидыОпераций = Новый Массив;
	НоваяСтрока.ВидыОпераций.Добавить(Перечисления.ВидыОперацийПередачаТоваров.ВПереработку);
	НоваяСтрока.ВидыОпераций.Добавить(Перечисления.ВидыОперацийПередачаТоваров.ИзПереработки);

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ПоступлениеТоваровУслуг", Истина);
	НоваяСтрока.ВидыОпераций = Новый Массив;
	НоваяСтрока.ВидыОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку);

	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		Запрос.УстановитьПараметр("ВидыОпераций", СтрокаТЗ.ВидыОпераций);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ОтказСнять = Ложь;
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ОтказСнять = Истина;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьВедетсяУчетСпецодеждыСпецоснастки()
	
	Если ИспользуетсяСинхронизацияДанных() Тогда
		ОтказСнять = Истина;
		Возврат ОтказСнять;
	КонецЕсли;

	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ВидыОпераций");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ВыработкаМатериалов");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("СписаниеМатериаловИзЭксплуатации");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ВозвратМатериаловИзЭксплуатации");

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ПередачаМатериаловВЭксплуатацию");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("РегламентнаяОперация", Истина);
	НоваяСтрока.ВидыОпераций = Новый Массив;
	НоваяСтрока.ВидыОпераций.Добавить(Перечисления.ВидыРегламентныхОпераций.ПогашениеСтоимостиСпецодеждыИспецоснасткиВэксплуатации);
	
	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		Запрос.УстановитьПараметр("ВидыОпераций", СтрокаТЗ.ВидыОпераций);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ОтказСнять = Ложь;
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ОтказСнять = Истина;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьОсуществляетсяЗакупкаТоваровУслугДляКомитентов()
	
	Если ИспользуетсяСинхронизацияДанных() Тогда
		ОтказСнять = Истина;
		Возврат ОтказСнять;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаВедетсяДеятельностьПоДоговорамКомиссии();
	
	МассивВидовДоговоровКомиссииНаЗакупку = Новый Массив;
	МассивВидовДоговоровКомиссииНаЗакупку.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку);
	Запрос.УстановитьПараметр("ВидыДоговоров", МассивВидовДоговоровКомиссииНаЗакупку);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОтказСнять = НЕ РезультатЗапроса.Пустой();
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьОсуществляетсяЗакупкаТоваровУслугЧерезКомиссионеров()
	
	Если ИспользуетсяСинхронизацияДанных() Тогда
		ОтказСнять = Истина;
		Возврат ОтказСнять;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаВедетсяДеятельностьПоДоговорамКомиссии();
	
	МассивВидовДоговоровКомиссииНаЗакупку = Новый Массив;
	МассивВидовДоговоровКомиссииНаЗакупку.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
	Запрос.УстановитьПараметр("ВидыДоговоров", МассивВидовДоговоровКомиссииНаЗакупку);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОтказСнять = НЕ РезультатЗапроса.Пустой();
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьОсуществляетсяРеализацияТоваровУслугКомитентов()
	
	Если ИспользуетсяСинхронизацияДанных() Тогда
		ОтказСнять = Истина;
		Возврат ОтказСнять;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаВедетсяДеятельностьПоДоговорамКомиссии();
	
	МассивВидовДоговоровКомиссииНаПродажу = Новый Массив;
	МассивВидовДоговоровКомиссииНаПродажу.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	Запрос.УстановитьПараметр("ВидыДоговоров", МассивВидовДоговоровКомиссииНаПродажу);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОтказСнять = НЕ РезультатЗапроса.Пустой();
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьОсуществляетсяРеализацияТоваровУслугЧерезКомиссионеров()
	
	Если ИспользуетсяСинхронизацияДанных() Тогда
		ОтказСнять = Истина;
		Возврат ОтказСнять;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаВедетсяДеятельностьПоДоговорамКомиссии();
	
	МассивВидовДоговоровКомиссииНаПродажу = Новый Массив;
	МассивВидовДоговоровКомиссииНаПродажу.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	Запрос.УстановитьПараметр("ВидыДоговоров", МассивВидовДоговоровКомиссииНаПродажу);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОтказСнять = НЕ РезультатЗапроса.Пустой();
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьВедетсяРозничнаяТорговля()
	
	Если ИспользуетсяСинхронизацияДанных() Тогда
		ОтказСнять = Истина;
		Возврат ОтказСнять;
	КонецЕсли;
	
	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ВидыОпераций");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ОтчетОРозничныхПродажах");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ПриходныйКассовыйОрдер", Истина);
	НоваяСтрока.ВидыОпераций = Новый Массив;
	НоваяСтрока.ВидыОпераций.Добавить(Перечисления.ВидыОперацийПКО.РозничнаяВыручка);

	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		Запрос.УстановитьПараметр("ВидыОпераций", СтрокаТЗ.ВидыОпераций);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ОтказСнять = Ложь;
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ОтказСнять = Истина;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьИспользоватьУведомленияОКонтролируемыхСделках()
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаИспользуетсяДокумент("УведомлениеОКонтролируемыхСделках");
	
	УстановитьПривилегированныйРежим(Истина);

	РезультатЗапроса = Запрос.Выполнить();
	
	ОтказСнять = НЕ РезультатЗапроса.Пустой();
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьВедетсяУчетРозничнойПродажиАлкогольнойПродукцииПива()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СведенияОбАлкогольнойПродукции.Номенклатура
	|ИЗ
	|	РегистрСведений.СведенияОбАлкогольнойПродукции КАК СведенияОбАлкогольнойПродукции";
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОтказСнять = НЕ РезультатЗапроса.Пустой();
	
	Возврат ОтказСнять;
	
КонецФункции

#Область УправлениеЗачетомАвансовПогашениемЗадолженности

Функция ОтказСнятьУправлениеЗачетомАвансовПогашениемЗадолженности()
	
	Если ИспользуетсяСинхронизацияДанных() Тогда
		ОтказСнять = Истина;
		Возврат ОтказСнять;
	КонецЕсли;
	
	ТаблицаЗапросов = ТаблицаЗапросовУправлениеЗачетомАвансовПогашениемЗадолженности(Истина);
	
	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		Запрос.УстановитьПараметр("ВидыОперацийОплатаИВозврат", СтрокаТЗ.ВидыОперацийОплатаИВозврат);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ОтказСнять = Ложь;
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ОтказСнять = Истина;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьИспользоватьКорректировочныеДокументы()

	Если ИспользуетсяСинхронизацияДанных() Тогда
		ОтказСнять = Истина;
		Возврат ОтказСнять;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	ДокументыДляПроверки = Новый Массив;
	ДокументыДляПроверки.Добавить("КорректировкаПоступления");
	ДокументыДляПроверки.Добавить("КорректировкаРеализации");
	
	ОтказСнять = Ложь;
	
	Для каждого ДокументДляПроверки Из ДокументыДляПроверки Цикл
	
		Запрос.Текст = ТекстЗапросаИспользуетсяДокумент(ДокументДляПроверки);
		
		ОтказСнять = НЕ Запрос.Выполнить().Пустой();
		
		Если ОтказСнять Тогда
			Прервать;
		КонецЕсли; 
		
	КонецЦикла; 
	
	Возврат ОтказСнять;

КонецФункции 
 

Функция ТаблицаЗапросовУправлениеЗачетомАвансовПогашениемЗадолженности(ТолькоПроверка)

	// Начинаем поиск с документов, в которых наиболее вероятно 
	// используется зачет авансов (погашение задолженности) по документам.
	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ИмяДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ВидыОперацийОплатаИВозврат");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПоступлениеНаРасчетныйСчет";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаУправлениеПогашениемЗадолженностиКассаБанк("ПоступлениеНаРасчетныйСчет", ТолькоПроверка);
	НоваяСтрока.ВидыОперацийОплатаИВозврат = Новый Массив;
	НоваяСтрока.ВидыОперацийОплатаИВозврат.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя);
	НоваяСтрока.ВидыОперацийОплатаИВозврат.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "СписаниеСРасчетногоСчета";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаУправлениеПогашениемЗадолженностиКассаБанк("СписаниеСРасчетногоСчета", ТолькоПроверка);
	НоваяСтрока.ВидыОперацийОплатаИВозврат = Новый Массив;
	НоваяСтрока.ВидыОперацийОплатаИВозврат.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику);
	НоваяСтрока.ВидыОперацийОплатаИВозврат.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПриходныйКассовыйОрдер";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаУправлениеПогашениемЗадолженностиКассаБанк("ПриходныйКассовыйОрдер", ТолькоПроверка);
	НоваяСтрока.ВидыОперацийОплатаИВозврат = Новый Массив;
	НоваяСтрока.ВидыОперацийОплатаИВозврат.Добавить(Перечисления.ВидыОперацийПКО.ОплатаПокупателя);
	НоваяСтрока.ВидыОперацийОплатаИВозврат.Добавить(Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "РасходныйКассовыйОрдер";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаУправлениеПогашениемЗадолженностиКассаБанк("РасходныйКассовыйОрдер", ТолькоПроверка);
	НоваяСтрока.ВидыОперацийОплатаИВозврат = Новый Массив;
	НоваяСтрока.ВидыОперацийОплатаИВозврат.Добавить(Перечисления.ВидыОперацийРКО.ОплатаПоставщику);
	НоваяСтрока.ВидыОперацийОплатаИВозврат.Добавить(Перечисления.ВидыОперацийРКО.ВозвратПокупателю);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ОплатаПлатежнойКартой";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаУправлениеПогашениемЗадолженностиКассаБанк("ОплатаПлатежнойКартой", ТолькоПроверка);
	НоваяСтрока.ВидыОперацийОплатаИВозврат = Новый Массив;
	НоваяСтрока.ВидыОперацийОплатаИВозврат.Добавить(Перечисления.ВидыОперацийОплатаПлатежнойКартой.ОплатаПокупателя);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "РеализацияТоваровУслуг";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаУправлениеЗачетомАвансовРеализацияТоваровУслуг(ТолькоПроверка);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПоступлениеТоваровУслуг";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаУправлениеЗачетомАвансовПоступлениеТоваровУслуг(ТолькоПроверка);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПоступлениеДопРасходов";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаУправлениеЗачетомАвансовПоступлениеРеализация("ПоступлениеДопРасходов", ТолькоПроверка);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "АвансовыйОтчет";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаУправлениеПогашениемЗадолженностиАвансовыйОтчет(ТолькоПроверка);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "АктОбОказанииПроизводственныхУслуг";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаУправлениеЗачетомАвансовПоступлениеРеализация("АктОбОказанииПроизводственныхУслуг", ТолькоПроверка);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "РеализацияОтгруженныхТоваров";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаУправлениеЗачетомАвансовПоступлениеРеализация("РеализацияОтгруженныхТоваров", ТолькоПроверка);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ОтчетКомиссионераОПродажах";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаУправлениеЗачетомАвансовПоступлениеРеализация("ОтчетКомиссионераОПродажах", ТолькоПроверка);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПередачаОС";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаУправлениеЗачетомАвансовПоступлениеРеализация("ПередачаОС", ТолькоПроверка);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПередачаНМА";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаУправлениеЗачетомАвансовПоступлениеРеализация("ПередачаНМА", ТолькоПроверка);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПоступлениеНМА";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаУправлениеЗачетомАвансовПоступлениеРеализация("ПоступлениеНМА", ТолькоПроверка);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПоступлениеИзПереработки";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаУправлениеЗачетомАвансовПоступлениеРеализация("ПоступлениеИзПереработки", ТолькоПроверка);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "РеализацияУслугПоПереработке";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаУправлениеЗачетомАвансовПоступлениеРеализация("РеализацияУслугПоПереработке", ТолькоПроверка);

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "КорректировкаДолга";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаУправлениеКорректировкаДолга(ТолькоПроверка);

	
	Возврат ТаблицаЗапросов;

КонецФункции

Функция ДокументыПрепятствующиеОтключениюУправлениеЗачетомАвансовПогашениемЗадолженности()

	ТаблицаРезультатовЗапросов = ПустаяТаблицаДокументовПрепятствующиеОтключениюОпции();

	ТаблицаЗапросов = ТаблицаЗапросовУправлениеЗачетомАвансовПогашениемЗадолженности(Ложь);

	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		Запрос.УстановитьПараметр("ВидыОперацийОплатаИВозврат", СтрокаТЗ.ВидыОперацийОплатаИВозврат);
		
		СтрокаТаблицыДокументов = ТаблицаРезультатовЗапросов.Добавить();
		СтрокаТаблицыДокументов.ИмяДокумента = СтрокаТЗ.ИмяДокумента;
		МетаданныеДокумента = Метаданные.Документы.Найти(СтрокаТЗ.ИмяДокумента);
		СтрокаТаблицыДокументов.СинонимДокумента = МетаданныеДокумента.Синоним;
		СтрокаТаблицыДокументов.РезультатЗапроса = Запрос.Выполнить();
		
	КонецЦикла;
	
	// Отсортируем по алфавиту
	ТаблицаРезультатовЗапросов.Сортировать("СинонимДокумента");
	
	Возврат ТаблицаРезультатовЗапросов;
	
КонецФункции

Функция ТекстЗапросаУправлениеЗачетомАвансовРеализацияТоваровУслуг(ТолькоПроверка)
	
	// В реализации товаров и услуг для вида операции "Отгрузка без перехода права собственности"
	// и при передачи товаров комиссионеру на реализацию зачет авансов не выполняется.

	Если ТолькоПроверка Тогда
	
		ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДокументРТУ.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК ДокументРТУ
		|ГДЕ
		|	ДокументРТУ.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности)
		|	И ДокументРТУ.ДоговорКонтрагента.ВидДоговора <> ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером)
		|	И ДокументРТУ.СпособЗачетаАвансов <> ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.Автоматически)
		|	И ДокументРТУ.ПометкаУдаления = ЛОЖЬ";

	Иначе
	
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ДокументРТУ.Ссылка КАК Ссылка,
		|	ДокументРТУ.Дата КАК Дата,
		|	ПРЕДСТАВЛЕНИЕ(ДокументРТУ.Ссылка) КАК Представление
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК ДокументРТУ
		|ГДЕ
		|	ДокументРТУ.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности)
		|	И ДокументРТУ.ДоговорКонтрагента.ВидДоговора <> ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером)
		|	И ДокументРТУ.СпособЗачетаАвансов <> ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.Автоматически)
		|	И ДокументРТУ.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	Ссылка";
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаУправлениеЗачетомАвансовПоступлениеТоваровУслуг(ТолькоПроверка)
	
	// В поступлении товаров и услуг для вида операции "В переработку"
	// и при получения товаров от комитента на реализацию зачет авансов не выполняется.
	
	Если ТолькоПроверка Тогда
	
		ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДокументПТУ.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК ДокументПТУ
		|ГДЕ
		|	ДокументПТУ.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку)
		|	И ДокументПТУ.ДоговорКонтрагента.ВидДоговора <> ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомитентом)
		|	И ДокументПТУ.СпособЗачетаАвансов <> ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.Автоматически)
		|	И ДокументПТУ.ПометкаУдаления = ЛОЖЬ";
	
	Иначе

		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ДокументПТУ.Ссылка КАК Ссылка,
		|	ДокументПТУ.Дата КАК Дата,
		|	ПРЕДСТАВЛЕНИЕ(ДокументПТУ.Ссылка) КАК Представление
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК ДокументПТУ
		|ГДЕ
		|	ДокументПТУ.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку)
		|	И ДокументПТУ.ДоговорКонтрагента.ВидДоговора <> ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомитентом)
		|	И ДокументПТУ.СпособЗачетаАвансов <> ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.Автоматически)
		|	И ДокументПТУ.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	Ссылка";
	
	КонецЕсли;
		
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаУправлениеЗачетомАвансовПоступлениеРеализация(ИмяДокумента, ТолькоПроверка)
	
	Если ТолькоПроверка Тогда

		ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДокументПоступленияРеализации.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.АктОбОказанииПроизводственныхУслуг КАК ДокументПоступленияРеализации
		|ГДЕ
		|	ДокументПоступленияРеализации.СпособЗачетаАвансов <> ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.Автоматически)
		|	И ДокументПоступленияРеализации.ПометкаУдаления = ЛОЖЬ";
		
	Иначе

		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ДокументПоступленияРеализации.Ссылка КАК Ссылка,
		|	ДокументПоступленияРеализации.Дата КАК Дата,
		|	ПРЕДСТАВЛЕНИЕ(ДокументПоступленияРеализации.Ссылка) КАК Представление
		|ИЗ
		|	Документ.АктОбОказанииПроизводственныхУслуг КАК ДокументПоступленияРеализации
		|ГДЕ
		|	ДокументПоступленияРеализации.СпособЗачетаАвансов <> ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.Автоматически)
		|	И ДокументПоступленияРеализации.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	Ссылка";
	
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "АктОбОказанииПроизводственныхУслуг", ИмяДокумента);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаУправлениеПогашениемЗадолженностиКассаБанк(ИмяДокумента, ТолькоПроверка)
	
	Если ТолькоПроверка Тогда

		ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДокументКассаБанк.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПоступлениеНаРасчетныйСчет.РасшифровкаПлатежа КАК ДокументКассаБанк
		|ГДЕ
		|	ДокументКассаБанк.СпособПогашенияЗадолженности <> ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияЗадолженности.Автоматически)
		|	И ДокументКассаБанк.Ссылка.ВидОперации В (&ВидыОперацийОплатаИВозврат)
		|	И ДокументКассаБанк.Ссылка.ПометкаУдаления = ЛОЖЬ";
		
	Иначе

		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДокументКассаБанк.Ссылка КАК Ссылка,
		|	ДокументКассаБанк.Ссылка.Дата КАК Дата,
		|	ПРЕДСТАВЛЕНИЕ(ДокументКассаБанк.Ссылка) КАК Представление
		|ИЗ
		|	Документ.ПоступлениеНаРасчетныйСчет.РасшифровкаПлатежа КАК ДокументКассаБанк
		|ГДЕ
		|	ДокументКассаБанк.СпособПогашенияЗадолженности <> ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияЗадолженности.Автоматически)
		|	И ДокументКассаБанк.Ссылка.ВидОперации В (&ВидыОперацийОплатаИВозврат)
		|	И ДокументКассаБанк.Ссылка.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	Ссылка";
	
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПоступлениеНаРасчетныйСчет", ИмяДокумента);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаУправлениеПогашениемЗадолженностиАвансовыйОтчет(ТолькоПроверка)
	
	Если ТолькоПроверка Тогда
	
		ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	АвансовыйОтчет.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.АвансовыйОтчет.ОплатаПоставщикам КАК АвансовыйОтчет
		|ГДЕ
		|	АвансовыйОтчет.СпособПогашенияЗадолженности <> ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияЗадолженности.Автоматически)
		|	И АвансовыйОтчет.Ссылка.ПометкаУдаления = ЛОЖЬ";
		
	Иначе

		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	АвансовыйОтчет.Ссылка КАК Ссылка,
		|	АвансовыйОтчет.Ссылка.Дата КАК Дата,
		|	ПРЕДСТАВЛЕНИЕ(АвансовыйОтчет.Ссылка) КАК Представление
		|ИЗ
		|	Документ.АвансовыйОтчет.ОплатаПоставщикам КАК АвансовыйОтчет
		|ГДЕ
		|	АвансовыйОтчет.СпособПогашенияЗадолженности <> ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияЗадолженности.Автоматически)
		|	И АвансовыйОтчет.Ссылка.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	Ссылка";
	
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаУправлениеКорректировкаДолга(ТолькоПроверка)
	
	Если ТолькоПроверка Тогда
	
		ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КорректировкаДолга.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.КорректировкаДолга КАК КорректировкаДолга
		|ГДЕ
		|	КорректировкаДолга.ПометкаУдаления = ЛОЖЬ";
		
	Иначе

		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	КорректировкаДолга.Ссылка КАК Ссылка,
		|	КорректировкаДолга.Дата КАК Дата,
		|	ПРЕДСТАВЛЕНИЕ(КорректировкаДолга.Ссылка) КАК Представление
		|ИЗ
		|	Документ.КорректировкаДолга КАК КорректировкаДолга
		|ГДЕ
		|	КорректировкаДолга.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	Ссылка";
	
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ИспользованиеВозвратнойТары

Функция ТекстЗапросаВедетсяУчетВозвратнойТары(ИмяДокумента, ТолькоПроверка)
	
	Если ТолькоПроверка Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ Первые 1
		|	ДокументСВозвратнойТарой.Ссылка
		|ИЗ
		|	Документ.%1.ВозвратнаяТара КАК ДокументСВозвратнойТарой
		|ГДЕ 
		|	ДокументСВозвратнойТарой.Ссылка.ПометкаУдаления = Ложь";
	Иначе
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДокументСВозвратнойТарой.Ссылка КАК Ссылка,
		|	ДокументСВозвратнойТарой.Ссылка.Дата КАК Дата,
		|	ПРЕДСТАВЛЕНИЕ(ДокументСВозвратнойТарой.Ссылка) КАК Представление
		|ИЗ
		|	Документ.%1.ВозвратнаяТара КАК ДокументСВозвратнойТарой
		|ГДЕ
		|	ДокументСВозвратнойТарой.Ссылка.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	Ссылка";
		
	КонецЕсли;
	
	ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, ИмяДокумента);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТаблицаЗапросовВедетсяУчетВозвратнойТары()

	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ИмяДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "АвансовыйОтчет";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("АвансовыйОтчет", Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ВозвратТоваровОтПокупателя";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("ВозвратТоваровОтПокупателя", Ложь);

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ВозвратТоваровПоставщику";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("ВозвратТоваровПоставщику", Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПередачаТоваров";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("ПередачаТоваров", Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПеремещениеТоваров";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("ПеремещениеТоваров", Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПоступлениеИзПереработки";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("ПоступлениеИзПереработки", Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПоступлениеТоваровУслуг";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("ПоступлениеТоваровУслуг", Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "РеализацияТоваровУслуг";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("РеализацияТоваровУслуг", Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "СписаниеТоваров";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("СписаниеТоваров", Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "СчетНаОплатуПокупателю";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("СчетНаОплатуПокупателю", Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "СчетНаОплатуПоставщика";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("СчетНаОплатуПоставщика", Ложь);
	
	Возврат ТаблицаЗапросов;
	
КонецФункции 

Функция ДокументыПрепятствующиеОтключениюВозвратойТары()

	ТаблицаРезультатовЗапросов = ПустаяТаблицаДокументовПрепятствующиеОтключениюОпции();

	ТаблицаЗапросов = ТаблицаЗапросовВедетсяУчетВозвратнойТары();

	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		
		СтрокаТаблицыДокументов = ТаблицаРезультатовЗапросов.Добавить();
		СтрокаТаблицыДокументов.ИмяДокумента = СтрокаТЗ.ИмяДокумента;
		МетаданныеДокумента = Метаданные.Документы.Найти(СтрокаТЗ.ИмяДокумента);
		СтрокаТаблицыДокументов.СинонимДокумента = МетаданныеДокумента.Синоним;
		СтрокаТаблицыДокументов.РезультатЗапроса = Запрос.Выполнить();
		
	КонецЦикла;
	
	// Отсортируем по алфавиту
	ТаблицаРезультатовЗапросов.Сортировать("СинонимДокумента");
	
	Возврат ТаблицаРезультатовЗапросов;
	
КонецФункции

#КонецОбласти

#Область ОтгрузкаБезПереходаПраваСобственности

Функция ТаблицаЗапросовВедетсяОтгрузкаБезПереходаПраваСобственности()

	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ИмяДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ВидыОпераций");

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "РеализацияТоваровУслуг";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("РеализацияТоваровУслуг", Истина, Ложь);
	НоваяСтрока.ВидыОпераций = Новый Массив;
	НоваяСтрока.ВидыОпераций.Добавить(Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности);

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "РеализацияОтгруженныхТоваров";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("РеализацияОтгруженныхТоваров",, Ложь);
	
	Возврат ТаблицаЗапросов;
	
КонецФункции 

Функция ДокументыПрепятствующиеОтключениюОтгрузкаБезПереходаПраваСобственности()

	ТаблицаРезультатовЗапросов = ПустаяТаблицаДокументовПрепятствующиеОтключениюОпции();

	ТаблицаЗапросов = ТаблицаЗапросовВедетсяОтгрузкаБезПереходаПраваСобственности();

	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		Запрос.УстановитьПараметр("ВидыОпераций", СтрокаТЗ.ВидыОпераций);
		
		СтрокаТаблицыДокументов = ТаблицаРезультатовЗапросов.Добавить();
		СтрокаТаблицыДокументов.ИмяДокумента = СтрокаТЗ.ИмяДокумента;
		МетаданныеДокумента = Метаданные.Документы.Найти(СтрокаТЗ.ИмяДокумента);
		СтрокаТаблицыДокументов.СинонимДокумента = МетаданныеДокумента.Синоним;
		СтрокаТаблицыДокументов.РезультатЗапроса = Запрос.Выполнить();
		
	КонецЦикла;
	
	// Отсортируем по алфавиту
	ТаблицаРезультатовЗапросов.Сортировать("СинонимДокумента");
	
	Возврат ТаблицаРезультатовЗапросов;
	
КонецФункции 

#КонецОбласти

#Область ВедетсяУчетДенежныхДокументов

Функция ТаблицаЗапросовВедетсяУчетДенежныхДокументов()

	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ИмяДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПоступлениеДенежныхДокументов";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ПоступлениеДенежныхДокументов", Ложь, Ложь);

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ВыдачаДенежныхДокументов";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ВыдачаДенежныхДокументов", Ложь, Ложь);
	
	Возврат ТаблицаЗапросов;
	
КонецФункции 

Функция ДокументыПрепятствующиеОтключениюВедетсяУчетДенежныхДокументов()
	
	ТаблицаРезультатовЗапросов = ПустаяТаблицаДокументовПрепятствующиеОтключениюОпции();
	
	ТаблицаЗапросов = ТаблицаЗапросовВедетсяУчетДенежныхДокументов();
	
	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		
		СтрокаТаблицыДокументов = ТаблицаРезультатовЗапросов.Добавить();
		СтрокаТаблицыДокументов.ИмяДокумента = СтрокаТЗ.ИмяДокумента;
		МетаданныеДокумента = Метаданные.Документы.Найти(СтрокаТЗ.ИмяДокумента);
		СтрокаТаблицыДокументов.СинонимДокумента = МетаданныеДокумента.Синоним;
		СтрокаТаблицыДокументов.РезультатЗапроса = Запрос.Выполнить();
		
	КонецЦикла;
	
	// Отсортируем по алфавиту
	ТаблицаРезультатовЗапросов.Сортировать("СинонимДокумента");
	
	Возврат ТаблицаРезультатовЗапросов;
	
КонецФункции 

#КонецОбласти

#Область ВедетсяРозничнаяТорговля

Функция ТаблицаЗапросовВедетсяРозничнаяТорговля()

	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ИмяДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ВидыОпераций");

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ОтчетОРозничныхПродажах";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ОтчетОРозничныхПродажах",,Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПриходныйКассовыйОрдер";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ПриходныйКассовыйОрдер", Истина, Ложь);
	НоваяСтрока.ВидыОпераций = Новый Массив;
	НоваяСтрока.ВидыОпераций.Добавить(Перечисления.ВидыОперацийПКО.РозничнаяВыручка);
	
	Возврат ТаблицаЗапросов;
	
КонецФункции

Функция ДокументыПрепятствующиеОтключениюВедетсяРозничнаяТорговля()

	ТаблицаРезультатовЗапросов = ПустаяТаблицаДокументовПрепятствующиеОтключениюОпции();

	ТаблицаЗапросов = ТаблицаЗапросовВедетсяРозничнаяТорговля();

	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		Запрос.УстановитьПараметр("ВидыОпераций", СтрокаТЗ.ВидыОпераций);
		
		СтрокаТаблицыДокументов = ТаблицаРезультатовЗапросов.Добавить();
		СтрокаТаблицыДокументов.ИмяДокумента = СтрокаТЗ.ИмяДокумента;
		МетаданныеДокумента = Метаданные.Документы.Найти(СтрокаТЗ.ИмяДокумента);
		СтрокаТаблицыДокументов.СинонимДокумента = МетаданныеДокумента.Синоним;
		СтрокаТаблицыДокументов.РезультатЗапроса = Запрос.Выполнить();
		
	КонецЦикла;
	
	// Отсортируем по алфавиту
	ТаблицаРезультатовЗапросов.Сортировать("СинонимДокумента");
	
	Возврат ТаблицаРезультатовЗапросов;
	
КонецФункции 

#КонецОбласти

#Область ВедетсяПроизводственнаяДеятельность

Функция ТаблицаЗапросовВедетсяПроизводственнаяДеятельность()

	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ИмяДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ВидыОпераций");

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "АктОбОказанииПроизводственныхУслуг";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("АктОбОказанииПроизводственныхУслуг",,Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ОтчетПроизводстваЗаСмену";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ОтчетПроизводстваЗаСмену",,Ложь);

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ИнвентаризацияНЗП";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ИнвентаризацияНЗП",,Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПоступлениеИзПереработки";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ПоступлениеИзПереработки",,Ложь);

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПередачаТоваров";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ПередачаТоваров", Истина, Ложь);
	НоваяСтрока.ВидыОпераций = Новый Массив;
	НоваяСтрока.ВидыОпераций.Добавить(Перечисления.ВидыОперацийПередачаТоваров.ВПереработку);
	НоваяСтрока.ВидыОпераций.Добавить(Перечисления.ВидыОперацийПередачаТоваров.ИзПереработки);

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПоступлениеТоваровУслуг";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ПоступлениеТоваровУслуг", Истина, Ложь);
	НоваяСтрока.ВидыОпераций = Новый Массив;
	НоваяСтрока.ВидыОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку);
	
	Возврат ТаблицаЗапросов;
	
КонецФункции

Функция ДокументыПрепятствующиеОтключениюВедетсяПроизводственнаяДеятельность()

	ТаблицаРезультатовЗапросов = ПустаяТаблицаДокументовПрепятствующиеОтключениюОпции();

	ТаблицаЗапросов = ТаблицаЗапросовВедетсяПроизводственнаяДеятельность();

	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		Запрос.УстановитьПараметр("ВидыОпераций", СтрокаТЗ.ВидыОпераций);
		
		СтрокаТаблицыДокументов = ТаблицаРезультатовЗапросов.Добавить();
		СтрокаТаблицыДокументов.ИмяДокумента = СтрокаТЗ.ИмяДокумента;
		МетаданныеДокумента = Метаданные.Документы.Найти(СтрокаТЗ.ИмяДокумента);
		СтрокаТаблицыДокументов.СинонимДокумента = МетаданныеДокумента.Синоним;
		СтрокаТаблицыДокументов.РезультатЗапроса = Запрос.Выполнить();
		
	КонецЦикла;
	
	// Отсортируем по алфавиту
	ТаблицаРезультатовЗапросов.Сортировать("СинонимДокумента");
	
	Возврат ТаблицаРезультатовЗапросов;
	
КонецФункции 

#КонецОбласти

#Область ВедетсяУчетСпецодеждыСпецоснастки

Функция ТаблицаЗапросовВедетсяУчетСпецодеждыСпецоснастки()

	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ИмяДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ВидыОпераций");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ВыработкаМатериалов";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ВыработкаМатериалов",, Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "СписаниеМатериаловИзЭксплуатации";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("СписаниеМатериаловИзЭксплуатации",,Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ВозвратМатериаловИзЭксплуатации";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ВозвратМатериаловИзЭксплуатации", ,Ложь);

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПередачаМатериаловВЭксплуатацию";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ПередачаМатериаловВЭксплуатацию",,Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "РегламентнаяОперация";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("РегламентнаяОперация", Истина, Ложь);
	НоваяСтрока.ВидыОпераций = Новый Массив;
	НоваяСтрока.ВидыОпераций.Добавить(Перечисления.ВидыРегламентныхОпераций.ПогашениеСтоимостиСпецодеждыИспецоснасткиВэксплуатации);

	
	Возврат ТаблицаЗапросов;
	
КонецФункции 

Функция ДокументыПрепятствующиеОтключениюВедетсяУчетСпецодеждыСпецоснастки()

	ТаблицаРезультатовЗапросов = ПустаяТаблицаДокументовПрепятствующиеОтключениюОпции();

	ТаблицаЗапросов = ТаблицаЗапросовВедетсяУчетСпецодеждыСпецоснастки();

	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		Запрос.УстановитьПараметр("ВидыОпераций", СтрокаТЗ.ВидыОпераций);
		
		СтрокаТаблицыДокументов = ТаблицаРезультатовЗапросов.Добавить();
		СтрокаТаблицыДокументов.ИмяДокумента = СтрокаТЗ.ИмяДокумента;
		МетаданныеДокумента = Метаданные.Документы.Найти(СтрокаТЗ.ИмяДокумента);
		СтрокаТаблицыДокументов.СинонимДокумента = МетаданныеДокумента.Синоним;
		СтрокаТаблицыДокументов.РезультатЗапроса = Запрос.Выполнить();
		
	КонецЦикла;
	
	// Отсортируем по алфавиту
	ТаблицаРезультатовЗапросов.Сортировать("СинонимДокумента");
	
	Возврат ТаблицаРезультатовЗапросов;
	
КонецФункции 

#КонецОбласти

#Область ИспользуетсяОплатаПоПлатежнымКартам

Функция ТекстЗапросаОплатаВОтчетахОРозничныхПродажах(ТолькоПроверка = Истина)
	
	Если ТолькоПроверка Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ Первые 1
		|	ОплатаВОтчетеОРозничныхПродажах.Ссылка
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах.Оплата КАК ОплатаВОтчетеОРозничныхПродажах
		|ГДЕ 
		|	ОплатаВОтчетеОРозничныхПродажах.Ссылка.ПометкаУдаления = Ложь";
	Иначе
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОплатаВОтчетеОРозничныхПродажах.Ссылка КАК Ссылка,
		|	ОплатаВОтчетеОРозничныхПродажах.Ссылка.Дата КАК Дата,
		|	ПРЕДСТАВЛЕНИЕ(ОплатаВОтчетеОРозничныхПродажах.Ссылка) КАК Представление
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах.Оплата КАК ОплатаВОтчетеОРозничныхПродажах
		|ГДЕ
		|	ОплатаВОтчетеОРозничныхПродажах.Ссылка.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	Ссылка";
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТаблицаЗапросовИспользуетсяОплатаПоПлатежнымКартам()

	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ИмяДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ОплатаПлатежнойКартой";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ОплатаПлатежнойКартой",, Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ОтчетОРозничныхПродажах";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаОплатаВОтчетахОРозничныхПродажах(Ложь);
	
	Возврат ТаблицаЗапросов;
	
КонецФункции 

Функция ДокументыПрепятствующиеОтключениюИспользуетсяОплатаПоПлатежнымКартам()

	ТаблицаРезультатовЗапросов = ПустаяТаблицаДокументовПрепятствующиеОтключениюОпции();

	ТаблицаЗапросов = ТаблицаЗапросовИспользуетсяОплатаПоПлатежнымКартам();

	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		
		СтрокаТаблицыДокументов = ТаблицаРезультатовЗапросов.Добавить();
		СтрокаТаблицыДокументов.ИмяДокумента = СтрокаТЗ.ИмяДокумента;
		МетаданныеДокумента = Метаданные.Документы.Найти(СтрокаТЗ.ИмяДокумента);
		СтрокаТаблицыДокументов.СинонимДокумента = МетаданныеДокумента.Синоним;
		СтрокаТаблицыДокументов.РезультатЗапроса = Запрос.Выполнить();
		
	КонецЦикла;
	
	// Отсортируем по алфавиту
	ТаблицаРезультатовЗапросов.Сортировать("СинонимДокумента");
	
	Возврат ТаблицаРезультатовЗапросов;
	
КонецФункции

Функция ТаблицаЗапросовИспользуютсяКорректировочныеДокументы()

	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ИмяДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "КорректировкаПоступления";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("КорректировкаПоступления",, Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "КорректировкаРеализации";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("КорректировкаРеализации",, Ложь);
	
	Возврат ТаблицаЗапросов;

КонецФункции
 

Функция ДокументыПрепятствующиеОтключениюИспользуютсяКорректировочныеДокументы()

	ТаблицаРезультатовЗапросов = ПустаяТаблицаДокументовПрепятствующиеОтключениюОпции();

	ТаблицаЗапросов = ТаблицаЗапросовИспользуютсяКорректировочныеДокументы();

	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		
		СтрокаТаблицыДокументов = ТаблицаРезультатовЗапросов.Добавить();
		СтрокаТаблицыДокументов.ИмяДокумента = СтрокаТЗ.ИмяДокумента;
		МетаданныеДокумента = Метаданные.Документы.Найти(СтрокаТЗ.ИмяДокумента);
		СтрокаТаблицыДокументов.СинонимДокумента = МетаданныеДокумента.Синоним;
		СтрокаТаблицыДокументов.РезультатЗапроса = Запрос.Выполнить();
		
	КонецЦикла;
	
	// Отсортируем по алфавиту
	ТаблицаРезультатовЗапросов.Сортировать("СинонимДокумента");
	
	Возврат ТаблицаРезультатовЗапросов;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СписокДокументовПрепятствующихОтключению

Процедура СформироватьСписокДокументовПрепятствующихОтключениюОпции(Параметры, АдресХранилища) Экспорт

	Макет = УправлениеПечатью.ПолучитьМакет("Обработка.ФункциональностьПрограммы.СписокДокументов");
	
	ОбластьШапка 		= Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрока		= Макет.ПолучитьОбласть("Строка");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Если Параметры.Свойство("УправлениеЗачетомАвансовПогашениемЗадолженности") Тогда
		ТаблицаРезультатовЗапросов = ДокументыПрепятствующиеОтключениюУправлениеЗачетомАвансовПогашениемЗадолженности();
		ОбластьШапка.Параметры.Заголовок = НСтр("ru = 'Управление зачетом авансов и погашением задолженности'");
	ИначеЕсли Параметры.Свойство("ВедетсяУчетВозвратнойТары") Тогда
		ТаблицаРезультатовЗапросов = ДокументыПрепятствующиеОтключениюВозвратойТары();
		ОбластьШапка.Параметры.Заголовок = НСтр("ru = 'Возвратная тара'");
	ИначеЕсли Параметры.Свойство("ОтгрузкаБезПереходаПраваСобственности") Тогда
		ТаблицаРезультатовЗапросов = ДокументыПрепятствующиеОтключениюОтгрузкаБезПереходаПраваСобственности();
		ОбластьШапка.Параметры.Заголовок = НСтр("ru = 'Отгрузка без перехода права собственности'");
	ИначеЕсли Параметры.Свойство("ВедетсяРозничнаяТорговля") Тогда
		ТаблицаРезультатовЗапросов = ДокументыПрепятствующиеОтключениюВедетсяРозничнаяТорговля();
		ОбластьШапка.Параметры.Заголовок = НСтр("ru = 'Розничная торговля'");
	ИначеЕсли Параметры.Свойство("ВедетсяУчетСпецодеждыСпецоснастки") Тогда
		ТаблицаРезультатовЗапросов = ДокументыПрепятствующиеОтключениюВедетсяУчетСпецодеждыСпецоснастки();
		ОбластьШапка.Параметры.Заголовок = НСтр("ru = 'Спецодежда и спецоснастка'");
	ИначеЕсли Параметры.Свойство("ВедетсяУчетДенежныхДокументов") Тогда
		ТаблицаРезультатовЗапросов = ДокументыПрепятствующиеОтключениюВедетсяУчетДенежныхДокументов();
		ОбластьШапка.Параметры.Заголовок = НСтр("ru = 'Денежные документы'");
	ИначеЕсли Параметры.Свойство("ВедетсяПроизводственнаяДеятельность") Тогда
		ТаблицаРезультатовЗапросов = ДокументыПрепятствующиеОтключениюВедетсяПроизводственнаяДеятельность();
		ОбластьШапка.Параметры.Заголовок = НСтр("ru = 'Производство'");
	ИначеЕсли Параметры.Свойство("ИспользоватьОплатуПоПлатежнымКартам") Тогда
		ТаблицаРезультатовЗапросов = ДокументыПрепятствующиеОтключениюИспользуетсяОплатаПоПлатежнымКартам();
		ОбластьШапка.Параметры.Заголовок = НСтр("ru = 'Платежные карты'");
	ИначеЕсли Параметры.Свойство("ИспользоватьКорректировочныеДокументы") Тогда
		ТаблицаРезультатовЗапросов = ДокументыПрепятствующиеОтключениюИспользуютсяКорректировочныеДокументы();
		ОбластьШапка.Параметры.Заголовок = НСтр("ru = 'Исправительные и корректировочные документы'");
	КонецЕсли;

	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	НомерПП = 0;
	
	Для Каждого СтрокаТаблицыДокументов Из ТаблицаРезультатовЗапросов Цикл
		
		Выборка = СтрокаТаблицыДокументов.РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
		
			НомерПП = НомерПП + 1;
		
			ОбластьСтрока.Параметры.Заполнить(Выборка);
			ОбластьСтрока.Параметры.НомерПП = НомерПП;
			
			ТабличныйДокумент.Вывести(ОбластьСтрока);
		
		КонецЦикла;
	
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ТабличныйДокумент, АдресХранилища);
	
КонецПроцедуры

Функция ПустаяТаблицаДокументовПрепятствующиеОтключениюОпции()

	ТаблицаДокументов = Новый ТаблицаЗначений;
	ТаблицаДокументов.Колонки.Добавить("ИмяДокумента", 		ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаДокументов.Колонки.Добавить("СинонимДокумента", 	ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаДокументов.Колонки.Добавить("РезультатЗапроса");
	
	Возврат ТаблицаДокументов;

КонецФункции

#КонецОбласти

#Область ОбработчикОбновленияИнформационнойБазыБП

Процедура ЗаполнитьКонстантыУправленияФункциональностью() Экспорт
	
	МассивИменКонстант = Новый Массив;
	МассивИменКонстант.Добавить("ВедетсяУчетНМА");
	МассивИменКонстант.Добавить("ВедетсяУчетОсновныхСредств");
	МассивИменКонстант.Добавить("ВедетсяУчетСпецодеждыСпецоснастки");
	МассивИменКонстант.Добавить("ВедетсяОтгрузкаБезПереходаПраваСобственности");
	МассивИменКонстант.Добавить("ИспользоватьКомплектациюНоменклатуры");
	МассивИменКонстант.Добавить("ИспользоватьОплатуПоПлатежнымКартам");
	МассивИменКонстант.Добавить("ВедетсяУчетДенежныхДокументов");
	МассивИменКонстант.Добавить("ИспользоватьПакетноеВыставлениеАктов");
	МассивИменКонстант.Добавить("ИспользоватьПлатежныеТребования");
	МассивИменКонстант.Добавить("УправлениеЗачетомАвансовПогашениемЗадолженности");
	
	Для Каждого ИмяКонстанты Из МассивИменКонстант Цикл
		МенеджерКонстанты = Константы[ИмяКонстанты].СоздатьМенеджерЗначения();
		МенеджерКонстанты.Значение = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерКонстанты);
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьПолнуюФункциональность() Экспорт
	
	МассивИменКонстант = МассивИменКонстантФункциональности();
	ИменаКонстант = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(МассивИменКонстант);
	
	НаборКонстантФункциональности = Константы.СоздатьНабор(ИменаКонстант);
	НаборКонстантФункциональности.Прочитать();

	Для Каждого ИмяКонстанты Из МассивИменКонстант Цикл
		НаборКонстантФункциональности[ИмяКонстанты] = Истина;
	КонецЦикла;
	
	НаборКонстантФункциональности.Записать();
	
КонецПроцедуры

Процедура ЗаполнитьКонстантуАлкогольнаяПродукция() Экспорт
	
	ВедетсяРозничнаяТорговля = Константы.ВедетсяРозничнаяТорговля.Получить();
	
	МенеджерКонстанты = Константы.ВедетсяУчетРозничнойПродажиАлкогольнойПродукцииПива.СоздатьМенеджерЗначения();
	МенеджерКонстанты.Значение = ВедетсяРозничнаяТорговля;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерКонстанты);
	
КонецПроцедуры

Процедура ЗаполнитьКонстантуКорректировочныеДокументы() Экспорт

	ИспользоватьКорректировочныеДокументы = Константы.ИспользоватьКорректировочныеДокументы.СоздатьМенеджерЗначения();
	ИспользоватьКорректировочныеДокументы.Значение = Истина;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ИспользоватьКорректировочныеДокументы);

КонецПроцедуры


#КонецОбласти

#Область ВернутьМассивИменКонстант

// Формирует массив имен констант используемых для управления функциональностью
//
Функция МассивИменКонстантФункциональности() Экспорт
	
	МассивИменКонстант = Новый Массив;
	МассивИменКонстант.Добавить("ВедетсяУчетНМА");
	МассивИменКонстант.Добавить("ВедетсяУчетОсновныхСредств");
	МассивИменКонстант.Добавить("ВедетсяУчетСпецодеждыСпецоснастки");
	МассивИменКонстант.Добавить("ВедетсяОтгрузкаБезПереходаПраваСобственности");
	МассивИменКонстант.Добавить("ИспользоватьКомплектациюНоменклатуры");
	МассивИменКонстант.Добавить("ИспользоватьОплатуПоПлатежнымКартам");
	МассивИменКонстант.Добавить("ВедетсяУчетДенежныхДокументов");
	МассивИменКонстант.Добавить("ВедетсяПроизводственнаяДеятельность");
	МассивИменКонстант.Добавить("ОсуществляетсяРеализацияТоваровУслугКомитентов");
	МассивИменКонстант.Добавить("ОсуществляетсяРеализацияТоваровУслугЧерезКомиссионеров");
	МассивИменКонстант.Добавить("ОсуществляетсяЗакупкаТоваровУслугДляКомитентов");
	МассивИменКонстант.Добавить("ОсуществляетсяЗакупкаТоваровУслугЧерезКомиссионеров");
	МассивИменКонстант.Добавить("ВедетсяРозничнаяТорговля");
	МассивИменКонстант.Добавить("ВедетсяУчетВозвратнойТары");
	МассивИменКонстант.Добавить("ВедетсяУчетИмпортныхТоваров");
	МассивИменКонстант.Добавить("ИспользоватьВалютныйУчет");
	МассивИменКонстант.Добавить("ИспользоватьПакетноеВыставлениеАктов");
	МассивИменКонстант.Добавить("ИспользоватьПлатежныеТребования");
	МассивИменКонстант.Добавить("УправлениеЗачетомАвансовПогашениемЗадолженности");
	МассивИменКонстант.Добавить("ВедетсяУчетРозничнойПродажиАлкогольнойПродукцииПива");
	МассивИменКонстант.Добавить("ИспользоватьКорректировочныеДокументы");

	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПодразделениям") Тогда
		МассивИменКонстант.Добавить("ИспользоватьУведомленияОКонтролируемыхСделках");
	КонецЕсли;
	
	Возврат МассивИменКонстант;
	
КонецФункции

// Возвращает имена констант из переданного массива, у которых значение Истина
Функция МассивИспользуемыхКонстант(МассивИменКонстант)
	
	СтрокаИменКонстант = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(МассивИменКонстант);
	
	НаборКонстант = Константы.СоздатьНабор(СтрокаИменКонстант);
	НаборКонстант.Прочитать();
	
	МассивИспользуемыхКонстант = Новый Массив;
	
	Для Каждого ИмяКонстанты Из МассивИменКонстант Цикл
		Если НаборКонстант[ИмяКонстанты] = Истина Тогда
			МассивИспользуемыхКонстант.Добавить(ИмяКонстанты);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивИспользуемыхКонстант;
	
КонецФункции

// Возвращает имена констант, учавствующие в обменах
Функция МассивИменКонстантФункциональностиДляОбменов();
	
	МассивИменКонстант = Новый Массив;
	МассивИменКонстант.Добавить("ВедетсяУчетСпецодеждыСпецоснастки");
	МассивИменКонстант.Добавить("ВедетсяОтгрузкаБезПереходаПраваСобственности");
	МассивИменКонстант.Добавить("ИспользоватьКомплектациюНоменклатуры");
	МассивИменКонстант.Добавить("ОсуществляетсяРеализацияТоваровУслугКомитентов");
	МассивИменКонстант.Добавить("ОсуществляетсяРеализацияТоваровУслугЧерезКомиссионеров");
	МассивИменКонстант.Добавить("ОсуществляетсяЗакупкаТоваровУслугДляКомитентов");
	МассивИменКонстант.Добавить("ОсуществляетсяЗакупкаТоваровУслугЧерезКомиссионеров");
	МассивИменКонстант.Добавить("ВедетсяРозничнаяТорговля");
	МассивИменКонстант.Добавить("ВедетсяУчетВозвратнойТары");
	МассивИменКонстант.Добавить("ВедетсяУчетИмпортныхТоваров");
	МассивИменКонстант.Добавить("ИспользоватьВалютныйУчет");
	МассивИменКонстант.Добавить("УправлениеЗачетомАвансовПогашениемЗадолженности");
	МассивИменКонстант.Добавить("ИспользоватьОплатуПоПлатежнымКартам");
	
	Возврат МассивИменКонстант;
	
КонецФункции

// Возвращает имена констант, зависимых от переданной
Функция МассивИменЗависимыхКонстант(ИмяКонстанты) Экспорт;
	
	МассивИменКонстант = Новый Массив;
	
	Если ИмяКонстанты = "ВедетсяРозничнаяТорговля" Тогда
		
		МассивИменКонстант.Добавить("ВедетсяУчетРозничнойПродажиАлкогольнойПродукцииПива");
		
	КонецЕсли;
	
	Возврат МассивИменКонстант;
	
КонецФункции

#КонецОбласти

#Область ПодпискаНаСобытиеИзменениеКонстантыСинхронизацияДанных

// При установке флага Синхронизация Данных, включаем зависимые функциональные возможности
Процедура УстановитьКонстантыЗависимыеОтОбменов() Экспорт
	
	Если Константы.ИспользоватьСинхронизациюДанных.Получить() Тогда
		
		МассивИменКонстант = МассивИменКонстантФункциональностиДляОбменов();
		СтрокаИменКонстант = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(МассивИменКонстант);
		
		НаборКонстант = Константы.СоздатьНабор(СтрокаИменКонстант);
		НаборКонстант.Прочитать();
		Для Каждого ИмяКонстанты Из МассивИменКонстант Цикл
			НаборКонстант[ИмяКонстанты] = Истина;
		КонецЦикла;
		НаборКонстант.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыЗапускаПроверокКонстантНаВозможностьОтключения

Процедура МассивКонстантПроверкаНеПройденаВФоне(СтруктураПараметров, АдресХранилища) Экспорт
	
	ДанныеДляЗаполнения = Новый Структура();
	МассивКонстантПроверкаНеПройдена = Новый Массив;
	МассивКонстантПроверкаПройдена = Новый Массив;
	МассивПроверяемыхКонстант = МассивИспользуемыхКонстант(МассивИменКонстантФункциональности());
	
	Если ИспользуетсяСинхронизацияДанных() Тогда
		МассивКонстантПроверкаНеПройдена.Добавить("ИспользуетсяСинхронизацияДанных");
		МассивКонстантУчавствующихВОбмене = МассивИменКонстантФункциональностиДляОбменов();
		// Не проверям константы, которые учавствуют в обмене
		МассивПроверяемыхКонстант = ОбщегоНазначенияКлиентСервер.СократитьМассив(МассивПроверяемыхКонстант, МассивКонстантУчавствующихВОбмене);
	КонецЕсли;
	
	Для Каждого ИмяКонстанты Из МассивПроверяемыхКонстант Цикл
		
		ОтказСнять = ОтказСнятьИспользованиеКонстанты(ИмяКонстанты);
		
		Если ОтказСнять Тогда
			МассивКонстантПроверкаНеПройдена.Добавить(ИмяКонстанты);
		Иначе
			МассивКонстантПроверкаПройдена.Добавить(ИмяКонстанты);
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьИнтерфейс = Ложь;
	
	// Обработаем константы, у которых есть зависимые константы
	ОбработатьЗависимыеКонстанты(МассивКонстантПроверкаПройдена, МассивКонстантПроверкаНеПройдена);
	
	// Снимем флаги с констант, которые прошли проверку
	Если МассивКонстантПроверкаПройдена.Количество() > 0 Тогда
		
		СтрокаИменКонстант = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(МассивКонстантПроверкаПройдена);
		НаборКонстант = Константы.СоздатьНабор(СтрокаИменКонстант);
		Для Каждого ИмяКонстанты Из МассивКонстантПроверкаПройдена Цикл
			НаборКонстант[ИмяКонстанты] = Ложь;
		КонецЦикла;
		НаборКонстант.Записать();
		ОбновитьИнтерфейс = Истина;
		
	КонецЕсли;
	
	ДанныеДляЗаполнения.Вставить("Массив", МассивКонстантПроверкаНеПройдена);
	ДанныеДляЗаполнения.Вставить("ОбновитьИнтерфейс", ОбновитьИнтерфейс);
	
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
	
КонецПроцедуры

Функция МассивКонстантПроверкаНеПройдена(МассивИменКонстант) Экспорт
	
	МассивПроверяемыхКонстант = МассивИспользуемыхКонстант(МассивИменКонстант);
	МассивКонстантПроверкаНеПройдена = Новый Массив;
	
	Для Каждого ИмяКонстанты Из МассивПроверяемыхКонстант Цикл
		
		ОтказСнять = ОтказСнятьИспользованиеКонстанты(ИмяКонстанты);
		
		Если ОтказСнять Тогда
			МассивКонстантПроверкаНеПройдена.Добавить(ИмяКонстанты);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивКонстантПроверкаНеПройдена;
	
КонецФункции

Функция ОтказСнятьИспользованиеКонстанты(ИмяКонстанты)
	
	ОтказСнять = Истина;
	
	Если ИмяКонстанты = "ВедетсяУчетНМА" Тогда
		ОтказСнять = ОтказСнятьВедетсяУчетНМА();
	ИначеЕсли ИмяКонстанты = "ВедетсяУчетОсновныхСредств" Тогда
		ОтказСнять = ОтказСнятьВедетсяУчетОсновныхСредств();
	ИначеЕсли ИмяКонстанты = "ВедетсяУчетСпецодеждыСпецоснастки" Тогда
		ОтказСнять = ОтказСнятьВедетсяУчетСпецодеждыСпецоснастки()
	ИначеЕсли ИмяКонстанты = "ВедетсяОтгрузкаБезПереходаПраваСобственности" Тогда
		ОтказСнять = ОтказСнятьВедетсяОтгрузкаБезПереходаПраваСобственности()
	ИначеЕсли ИмяКонстанты = "ИспользоватьКомплектациюНоменклатуры" Тогда
		ОтказСнять = ОтказСнятьИспользоватьКомплектациюНоменклатуры()
	ИначеЕсли ИмяКонстанты = "ИспользоватьОплатуПоПлатежнымКартам" Тогда
		ОтказСнять = ОтказСнятьИспользоватьОплатуПоПлатежнымКартам()
	ИначеЕсли ИмяКонстанты = "ВедетсяУчетДенежныхДокументов" Тогда
		ОтказСнять = ОтказСнятьИспользоватьДенежныеДокументы()
	ИначеЕсли ИмяКонстанты = "ВедетсяПроизводственнаяДеятельность" Тогда
		ОтказСнять = ОтказСнятьВедетсяПроизводственнаяДеятельность()
	ИначеЕсли ИмяКонстанты = "ОсуществляетсяРеализацияТоваровУслугКомитентов" Тогда
		ОтказСнять = ОтказСнятьОсуществляетсяРеализацияТоваровУслугКомитентов()
	ИначеЕсли ИмяКонстанты = "ОсуществляетсяРеализацияТоваровУслугЧерезКомиссионеров" Тогда
		ОтказСнять = ОтказСнятьОсуществляетсяРеализацияТоваровУслугЧерезКомиссионеров()	
	ИначеЕсли ИмяКонстанты = "ОсуществляетсяЗакупкаТоваровУслугДляКомитентов" Тогда
		ОтказСнять = ОтказСнятьОсуществляетсяЗакупкаТоваровУслугДляКомитентов()
	ИначеЕсли ИмяКонстанты = "ОсуществляетсяЗакупкаТоваровУслугЧерезКомиссионеров" Тогда
		ОтказСнять = ОтказСнятьОсуществляетсяЗакупкаТоваровУслугЧерезКомиссионеров()
	ИначеЕсли ИмяКонстанты = "ВедетсяРозничнаяТорговля" Тогда
		ОтказСнять = ОтказСнятьВедетсяРозничнаяТорговля()
	ИначеЕсли ИмяКонстанты = "ВедетсяУчетВозвратнойТары" Тогда
		ОтказСнять = ОтказСнятьВедетсяУчетВозвратнойТары()
	ИначеЕсли ИмяКонстанты = "ВедетсяУчетИмпортныхТоваров" Тогда
		ОтказСнять = ОтказСнятьВедетсяУчетИмпортныхТоваров()
	ИначеЕсли ИмяКонстанты = "ИспользоватьВалютныйУчет" Тогда
		ОтказСнять = ОтказСнятьИспользоватьВалютныйУчет()
	ИначеЕсли ИмяКонстанты = "ИспользоватьПакетноеВыставлениеАктов" Тогда
		ОтказСнять = ОтказСнятьИспользоватьПакетноеВыставлениеАктов()
	ИначеЕсли ИмяКонстанты = "ИспользоватьПлатежныеТребования" Тогда
		ОтказСнять = ОтказСнятьИспользоватьПлатежныеТребования()
	ИначеЕсли ИмяКонстанты = "УправлениеЗачетомАвансовПогашениемЗадолженности" Тогда
		ОтказСнять = ОтказСнятьУправлениеЗачетомАвансовПогашениемЗадолженности()
	ИначеЕсли ИмяКонстанты = "ИспользоватьУведомленияОКонтролируемыхСделках" Тогда
		ОтказСнять = ОтказСнятьИспользоватьУведомленияОКонтролируемыхСделках()
	ИначеЕсли ИмяКонстанты = "ВедетсяУчетРозничнойПродажиАлкогольнойПродукцииПива" Тогда
		ОтказСнять = ОтказСнятьВедетсяУчетРозничнойПродажиАлкогольнойПродукцииПива()
	ИначеЕсли ИмяКонстанты = "ИспользоватьКорректировочныеДокументы" Тогда
		ОтказСнять = ОтказСнятьИспользоватьКорректировочныеДокументы()
	КонецЕсли;
	
	Возврат ОтказСнять;
	
КонецФункции

Процедура ОбработатьЗависимыеКонстанты(МассивКонстантПроверкаПройдена, МассивКонстантПроверкаНеПройдена)
	
	МассивКонстантУдалитьИзПроверкаПройдена = Новый Массив;
	
	Для Каждого ИмяПровереннойКонстанты ИЗ МассивКонстантПроверкаПройдена Цикл
		
		МассивИменЗависимыхКонстант = МассивИменЗависимыхКонстант(ИмяПровереннойКонстанты);
		
		ПроверкаЗависимойКонстантыНеПройдена = Ложь;
		// Проверим, пройдена ли проверка для подчиненных элементов
		Для Каждого ИмяЗависимойКонстанты Из МассивИменЗависимыхКонстант Цикл
			ПроверкаЗависимойКонстантыНеПройдена = МассивКонстантПроверкаНеПройдена.Найти(ИмяЗависимойКонстанты) <> Неопределено;
			Если ПроверкаЗависимойКонстантыНеПройдена Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ПроверкаЗависимойКонстантыНеПройдена Тогда
			МассивКонстантУдалитьИзПроверкаПройдена.Добавить(ИмяПровереннойКонстанты);
		КонецЕсли;
		
	КонецЦикла;
	
	МассивКонстантПроверкаПройдена = ОбщегоНазначенияКлиентСервер.СократитьМассив(МассивКонстантПроверкаПройдена, МассивКонстантУдалитьИзПроверкаПройдена);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли

