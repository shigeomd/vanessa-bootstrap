
&НаКлиенте
Перем ОбновитьИнтерфейс;

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДоступныПолныеПрава = РольДоступна("ПолныеПрава");
	Если НЕ РольДоступна("ПолныеПрава") Тогда
		Элементы.ВариантФункциональности.Доступность = Ложь;
		// Не выполняем проверку на доступность у не полных прав
		ДоступностьПроверенаБанкКасса			 = Истина;
		ДоступностьПроверенаЗапасы				 = Истина;
		ДоступностьПроверенаОСНМА				 = Истина;
		ДоступностьПроверенаПроизводство		 = Истина;
		ДоступностьПроверенаТорговля			 = Истина;
		ДоступностьПроверенаКонтролируемыеСделки = Истина;
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ВестиУчетПоПодразделениям") Тогда
		Элементы.ГруппаКонтролируемыеСделки.Видимость = Ложь;
	КонецЕсли;
	
	ВариантФункциональности = ОпределитьВариантФункциональности();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбновитьИнтерфейс();
	КонецЕсли;
	
	Если ФоновоеЗаданиеЗапущено Тогда
		ОтменитьВыполнениеЗадания();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

#Область ПриИзмененииКонстанты

&НаКлиенте
Процедура ИспользоватьВалютныйУчетПриИзменении(Элемент)
	ПриИзмененииРеквизитаНаКлиенте(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ВедетсяУчетДенежныхДокументовПриИзменении(Элемент)
	ПриИзмененииРеквизитаНаКлиенте(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОплатуПоПлатежнымКартамПриИзменении(Элемент)
	ПриИзмененииРеквизитаНаКлиенте(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПлатежныеТребованияПриИзменении(Элемент)
	ПриИзмененииРеквизитаНаКлиенте(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ВедетсяУчетСпецодеждыСпецоснасткиПриИзменении(Элемент)
	ПриИзмененииРеквизитаНаКлиенте(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ВедетсяУчетВозвратнойТарыПриИзменении(Элемент)
	ПриИзмененииРеквизитаНаКлиенте(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ВедетсяУчетИмпортныхТоваровПриИзменении(Элемент)
	ПриИзмененииРеквизитаНаКлиенте(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКомплектациюНоменклатурыПриИзменении(Элемент)
	ПриИзмененииРеквизитаНаКлиенте(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ВедетсяУчетОсновныхСредствПриИзменении(Элемент)
	ПриИзмененииРеквизитаНаКлиенте(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ВедетсяУчетНМАПриИзменении(Элемент)
	ПриИзмененииРеквизитаНаКлиенте(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ВедетсяРозничнаяТорговляПриИзменении(Элемент)
	ПриИзмененииРеквизитаНаКлиенте(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОсуществляетсяРеализацияТоваровУслугКомитентовПриИзменении(Элемент)
	ПриИзмененииРеквизитаНаКлиенте(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОсуществляетсяРеализацияТоваровУслугЧерезКомиссионеровПриИзменении(Элемент)
	ПриИзмененииРеквизитаНаКлиенте(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОсуществляетсяЗакупкаТоваровУслугДляКомитентовПриИзменении(Элемент)
	ПриИзмененииРеквизитаНаКлиенте(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОсуществляетсяЗакупкаТоваровУслугЧерезКомиссионеровПриИзменении(Элемент)
	ПриИзмененииРеквизитаНаКлиенте(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ВедетсяОтгрузкаБезПереходаПраваСобственностиПриИзменении(Элемент)
	ПриИзмененииРеквизитаНаКлиенте(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПакетноеВыставлениеАктовПриИзменении(Элемент)
	ПриИзмененииРеквизитаНаКлиенте(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура УправлениеЗачетомАвансовПогашениемЗадолженностиПриИзменении(Элемент)
	ПриИзмененииРеквизитаНаКлиенте(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКорректировочныеДокументыПриИзменении(Элемент)
	ПриИзмененииРеквизитаНаКлиенте(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ВедетсяПроизводственнаяДеятельностьПриИзменении(Элемент)
	ПриИзмененииРеквизитаНаКлиенте(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ВедетсяУчетАлкогольнойПродукцииПриИзменении(Элемент)
	ПриИзмененииРеквизитаНаКлиенте(Элемент);
КонецПроцедуры

#КонецОбласти

#Область ГиперссылкаГлавноеНажатие

&НаКлиенте
Процедура ГлавноеИспользуетсяСинхронизацияДанныхНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеВедетсяПроизводственнаяДеятельностьНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеВедетсяРозничнаяТорговляНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеИспользоватьВалютныйУчетНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеВедетсяУчетОсновныхСредствНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеВедетсяУчетНМАНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеУправлениеЗачетомАвансовПогашениемЗадолженностиНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеВедетсяУчетВозвратнойТарыНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеИспользоватьКорректировочныеДокументыНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры


&НаКлиенте
Процедура ГлавноеВедетсяУчетСпецодеждыСпецоснасткиНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеВедетсяУчетИмпортныхТоваровНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеИспользоватьОплатуПоПлатежнымКартамНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеВедетсяОтгрузкаБезПереходаПраваСобственностиНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеИспользоватьПакетноеВыставлениеАктовНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеВедетсяУчетДенежныхДокументовНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеИспользоватьПлатежныеТребованияНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеИспользоватьКомплектациюНоменклатурыНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеОсуществляетсяРеализацияТоваровУслугКомитентовНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеОсуществляетсяРеализацияТоваровУслугЧерезКомиссионеровНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеОсуществляетсяЗакупкаТоваровУслугДляКомитентовНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеОсуществляетсяЗакупкаТоваровУслугЧерезКомиссионеровНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеИспользоватьУведомленияОКонтролируемыхСделкахНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

&НаКлиенте
Процедура ГлавноеВедетсяУчетРозничнойПродажиАлкогольнойПродукцииПиваНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Главное");
КонецПроцедуры

#КонецОбласти

#Область ЗакладкиГиперссылкаНажатие

&НаКлиенте
Процедура ЗакладкиИспользоватьВалютныйУчетНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиВедетсяУчетДенежныхДокументовНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиИспользоватьОплатуПоПлатежнымКартамНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиИспользоватьПлатежныеТребованияНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиВедетсяУчетСпецодеждыСпецоснасткиНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиВедетсяУчетВозвратнойТарыНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиВедетсяУчетИмпортныхТоваровНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиИспользоватьКомплектациюНоменклатурыНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиВедетсяУчетОсновныхСредствНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиВедетсяУчетНМАНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиВедетсяРозничнаяТорговляНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиОсуществляетсяРеализацияТоваровУслугКомитентовНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиОсуществляетсяЗакупкаТоваровУслугЧерезКомиссионеровНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиОсуществляетсяЗакупкаТоваровУслугДляКомитентовНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиОсуществляетсяРеализацияТоваровУслугЧерезКомиссионеровНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиУправлениеЗачетомАвансовПогашениемЗадолженностиНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиИспользоватьКорректировочныеДокументыНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиВедетсяОтгрузкаБезПереходаПраваСобственностиНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиИспользоватьПакетноеВыставлениеАктовНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиВедетсяПроизводственнаяДеятельностьНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиИспользоватьУведомленияОКонтролируемыхСделкахНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиВедетсяУчетРозничнойПродажиАлкогольнойПродукцииПиваНажатие(Элемент)
	ОбработатьНажатиеОшибки(Элемент, "Закладки");
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	МассивИменКонстант = Новый Массив;
	Если ТекущаяСтраница = Элементы.ГруппаБанкКасса И НЕ ДоступностьПроверенаБанкКасса Тогда
		
		МассивИменКонстант.Добавить("ИспользоватьВалютныйУчет");
		МассивИменКонстант.Добавить("ВедетсяУчетДенежныхДокументов");
		МассивИменКонстант.Добавить("ИспользоватьОплатуПоПлатежнымКартам");
		МассивИменКонстант.Добавить("ИспользоватьПлатежныеТребования");
		
		УстановитьДоступностьЭлементовНаЗакладке(МассивИменКонстант, "БанкКасса");
		
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаЗапасы И НЕ ДоступностьПроверенаЗапасы Тогда
		
		МассивИменКонстант.Добавить("ВедетсяУчетСпецодеждыСпецоснастки");
		МассивИменКонстант.Добавить("ВедетсяУчетВозвратнойТары");
		МассивИменКонстант.Добавить("ВедетсяУчетИмпортныхТоваров");
		МассивИменКонстант.Добавить("ИспользоватьКомплектациюНоменклатуры");
		
		УстановитьДоступностьЭлементовНаЗакладке(МассивИменКонстант, "Запасы");
		
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаОСНМА И НЕ ДоступностьПроверенаОСНМА Тогда
		
		МассивИменКонстант.Добавить("ВедетсяУчетОсновныхСредств");
		МассивИменКонстант.Добавить("ВедетсяУчетНМА");
		
		УстановитьДоступностьЭлементовНаЗакладке(МассивИменКонстант, "ОСНМА");
		
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаТорговля И НЕ ДоступностьПроверенаТорговля Тогда
		
		МассивИменКонстант.Добавить("ВедетсяРозничнаяТорговля");
		МассивИменКонстант.Добавить("ВедетсяУчетРозничнойПродажиАлкогольнойПродукцииПива");
		МассивИменКонстант.Добавить("ОсуществляетсяРеализацияТоваровУслугКомитентов");
		МассивИменКонстант.Добавить("ОсуществляетсяРеализацияТоваровУслугЧерезКомиссионеров");
		МассивИменКонстант.Добавить("ОсуществляетсяЗакупкаТоваровУслугДляКомитентов");
		МассивИменКонстант.Добавить("ОсуществляетсяЗакупкаТоваровУслугЧерезКомиссионеров");
		МассивИменКонстант.Добавить("УправлениеЗачетомАвансовПогашениемЗадолженности");
		МассивИменКонстант.Добавить("ВедетсяОтгрузкаБезПереходаПраваСобственности");
		МассивИменКонстант.Добавить("ИспользоватьПакетноеВыставлениеАктов");
		МассивИменКонстант.Добавить("ИспользоватьКорректировочныеДокументы");
		
		УстановитьДоступностьЭлементовНаЗакладке(МассивИменКонстант, "Торговля");
		
		// Не даем снимать флаг с розничной торговли, если нельзя снять флаг с подчиненного элемента.
		Если НаборКонстант.ВедетсяУчетРозничнойПродажиАлкогольнойПродукцииПива 
			И НЕ Элементы.ВедетсяУчетРозничнойПродажиАлкогольнойПродукцииПива.Доступность Тогда
			Элементы.ВедетсяРозничнаяТорговля.Доступность = Ложь;
		КонецЕсли;

	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаПроизводство И НЕ ДоступностьПроверенаПроизводство Тогда
		
		МассивИменКонстант.Добавить("ВедетсяПроизводственнаяДеятельность");
		
		УстановитьДоступностьЭлементовНаЗакладке(МассивИменКонстант, "Производство");
		
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаКонтролируемыеСделки И НЕ ДоступностьПроверенаКонтролируемыеСделки Тогда
		
		МассивИменКонстант.Добавить("ИспользоватьУведомленияОКонтролируемыхСделках");
		
		УстановитьДоступностьЭлементовНаЗакладке(МассивИменКонстант, "КонтролируемыеСделки");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантФункциональностиПриИзменении(Элемент)
	
	Если ВариантФункциональности = "Основная" Тогда
		
		ОтключитьНеиспользуемуюФункциональностьНаКлиенте();
	
		ЖдатьЗавершенияФоновогоЗадания();
	
	ИначеЕсли ВариантФункциональности = "Полная" Тогда
		
		ВключитьПолнуюФункциональностьНаСервере();
		
		Элементы.СтраницыВыполненияОперации.ТекущаяСтраница = Элементы.ПустаяСтраница;
		УправлениеФормой(ЭтотОбъект);
		
		ОбновитьИнтерфейс = Истина;
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 1, Истина);
		
	Иначе
		Элементы.СтраницыВыполненияОперации.ТекущаяСтраница = Элементы.ПустаяСтраница;
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	ДоступностьПодчиненныхРозничнойТорговле = (Форма.НаборКонстант.ВедетсяРозничнаяТорговля);
	Элементы.ВедетсяУчетРозничнойПродажиАлкогольнойПродукцииПива.Доступность = ДоступностьПодчиненныхРозничнойТорговле;
	
	Если Форма.ВариантФункциональности = "Основная" Тогда
		Элементы.СтраницыСКартинкой.ТекущаяСтраница = Элементы.ГруппаОсновная;
	ИначеЕсли Форма.ВариантФункциональности = "Полная" Тогда
		Элементы.СтраницыСКартинкой.ТекущаяСтраница = Элементы.ГруппаПолный;
	Иначе
		Элементы.СтраницыСКартинкой.ТекущаяСтраница = Элементы.ГруппаВыборочная;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбновитьПовторноИспользуемыеЗначения();
		ОбновитьИнтерфейс();
		#Если ВебКлиент Тогда
		Активизировать();
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОпределитьВариантФункциональности()
	
	ПредыдущееЗначениеКонстанты = Неопределено;
	
	МассивИменКонстант = Обработки.ФункциональностьПрограммы.МассивИменКонстантФункциональности();
	СтрокаИменКонстант = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(МассивИменКонстант);
	
	НаборКонстантОбъект = Константы.СоздатьНабор(СтрокаИменКонстант);
	НаборКонстантОбъект.Прочитать();
	
	Для Каждого ИмяКонстанты Из МассивИменКонстант Цикл
		ЗначениеКонстанты = НаборКонстантОбъект[ИмяКонстанты];
		// Если снят или установлен хоть один флаг, то это выборочная функциональность
		Если ПредыдущееЗначениеКонстанты <> Неопределено И ПредыдущееЗначениеКонстанты <> ЗначениеКонстанты Тогда
			Возврат "Выборочная";
		Иначе
			ПредыдущееЗначениеКонстанты = ЗначениеКонстанты;
		КонецЕсли;
	КонецЦикла;
	
	// Если все флаги установлены, то это полная функциональность, иначе - основная
	Если ПредыдущееЗначениеКонстанты = Истина Тогда
		Возврат "Полная";
	Иначе
		Возврат "Основная";
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ВключитьПолнуюФункциональностьНаСервере()
	
	МассивИменКонстант = Обработки.ФункциональностьПрограммы.МассивИменКонстантФункциональности();
	ИменаКонстант = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(МассивИменКонстант);
	
	НаборКонстантФункциональности = Константы.СоздатьНабор(ИменаКонстант);
	НаборКонстантФункциональности.Прочитать();

	Для Каждого ИмяКонстанты Из МассивИменКонстант Цикл
		НаборКонстантФункциональности[ИмяКонстанты] = Истина;
	КонецЦикла;
	
	НаборКонстантФункциональности.Записать();
	// Обновим константы на форме
	ЗначениеВРеквизитФормы(НаборКонстантФункциональности, "НаборКонстант");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНажатиеОшибки(Элемент, ИмяЗаголовка)
	
	Если ИмяЗаголовка = "Главное" Тогда
		ПоказыватьСинхронизациюДляОпций = Ложь;
	ИначеЕсли ИмяЗаголовка = "Закладки" Тогда
		ПоказыватьСинхронизациюДляОпций = Истина;
	КонецЕсли;
	
	ИмяЭлемента = СтрЗаменить(Элемент.Имя, ИмяЗаголовка, "");

	Если ИмяЭлемента = "ВедетсяУчетДенежныхДокументов" Тогда
		ЗапуститьФормированиеСпискаДокументовПрепятствующихОтключениюОпцииНаКлиенте("ВедетсяУчетДенежныхДокументов");
	ИначеЕсли ИмяЭлемента = "ВедетсяУчетОсновныхСредств" Тогда
		ОткрытьФормуОбъекта("Справочник.ОсновныеСредства.ФормаСписка");
	ИначеЕсли ИмяЭлемента = "ВедетсяУчетНМА" Тогда
		ОткрытьФормуОбъекта("Справочник.НематериальныеАктивы.ФормаСписка");
	ИначеЕсли ИмяЭлемента = "ВедетсяУчетСпецодеждыСпецоснастки" Тогда
		Если ПоказыватьСинхронизациюДляОпций И ИспользуетсяСинхронизацияДанных() Тогда
			ОткрытьФормуОбъекта("Обработка.ФункциональностьПрограммы.Форма.ФормаИспользуетсяСинхронизацияДанных");
		Иначе
			ЗапуститьФормированиеСпискаДокументовПрепятствующихОтключениюОпцииНаКлиенте("ВедетсяУчетСпецодеждыСпецоснастки");
		КонецЕсли;
	ИначеЕсли ИмяЭлемента = "ИспользоватьКомплектациюНоменклатуры" Тогда
		Если ПоказыватьСинхронизациюДляОпций И ИспользуетсяСинхронизацияДанных() Тогда
			ОткрытьФормуОбъекта("Обработка.ФункциональностьПрограммы.Форма.ФормаИспользуетсяСинхронизацияДанных");
		Иначе
			ЗначениеОтбора  = Новый Структура("Организация", ПустаяОрганизация);
			ПараметрыФормы = Новый Структура("Отбор", ЗначениеОтбора);
			ОткрытьФормуОбъекта("Документ.КомплектацияНоменклатуры.ФормаСписка", ПараметрыФормы);
		КонецЕсли;
	ИначеЕсли ИмяЭлемента = "ВедетсяУчетИмпортныхТоваров" Тогда
		Если ПоказыватьСинхронизациюДляОпций И ИспользуетсяСинхронизацияДанных() Тогда
			ОткрытьФормуОбъекта("Обработка.ФункциональностьПрограммы.Форма.ФормаИспользуетсяСинхронизацияДанных");
		Иначе
			ОткрытьФормуОбъекта("Справочник.НомераГТД.ФормаСписка");
		КонецЕсли;
	ИначеЕсли ИмяЭлемента = "ОсуществляетсяРеализацияТоваровУслугКомитентов" Тогда
		Если ПоказыватьСинхронизациюДляОпций И ИспользуетсяСинхронизацияДанных() Тогда
			ОткрытьФормуОбъекта("Обработка.ФункциональностьПрограммы.Форма.ФормаИспользуетсяСинхронизацияДанных");
		Иначе
			СписокЗначений = Новый СписокЗначений;
			СписокЗначений.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом"));
			ЗначениеОтбора = Новый Структура("ВидДоговора, Организация", СписокЗначений, ПустаяОрганизация);
			ПараметрыФормы = Новый Структура("Отбор", ЗначениеОтбора);
			ОткрытьФормуОбъекта("Справочник.ДоговорыКонтрагентов.Форма.ФормаСписка", ПараметрыФормы);
		КонецЕсли;
	ИначеЕсли ИмяЭлемента = "ОсуществляетсяРеализацияТоваровУслугЧерезКомиссионеров" Тогда
		Если ПоказыватьСинхронизациюДляОпций И ИспользуетсяСинхронизацияДанных() Тогда
			ОткрытьФормуОбъекта("Обработка.ФункциональностьПрограммы.Форма.ФормаИспользуетсяСинхронизацияДанных");
		Иначе
			СписокЗначений = Новый СписокЗначений;
			СписокЗначений.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером"));
			ЗначениеОтбора = Новый Структура("ВидДоговора, Организация", СписокЗначений, ПустаяОрганизация);
			ПараметрыФормы = Новый Структура("Отбор", ЗначениеОтбора);
			ОткрытьФормуОбъекта("Справочник.ДоговорыКонтрагентов.Форма.ФормаСписка", ПараметрыФормы);
		КонецЕсли;
	ИначеЕсли ИмяЭлемента = "ОсуществляетсяЗакупкаТоваровУслугДляКомитентов" Тогда
		Если ПоказыватьСинхронизациюДляОпций И ИспользуетсяСинхронизацияДанных() Тогда
			ОткрытьФормуОбъекта("Обработка.ФункциональностьПрограммы.Форма.ФормаИспользуетсяСинхронизацияДанных");
		Иначе
			СписокЗначений = Новый СписокЗначений;
			СписокЗначений.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку"));
			ЗначениеОтбора = Новый Структура("ВидДоговора, Организация", СписокЗначений, ПустаяОрганизация);
			ПараметрыФормы = Новый Структура("Отбор", ЗначениеОтбора);
			ОткрытьФормуОбъекта("Справочник.ДоговорыКонтрагентов.Форма.ФормаСписка", ПараметрыФормы);
		КонецЕсли;
	ИначеЕсли ИмяЭлемента = "ОсуществляетсяЗакупкаТоваровУслугЧерезКомиссионеров" Тогда
		Если ПоказыватьСинхронизациюДляОпций И ИспользуетсяСинхронизацияДанных() Тогда
			ОткрытьФормуОбъекта("Обработка.ФункциональностьПрограммы.Форма.ФормаИспользуетсяСинхронизацияДанных");
		Иначе
			СписокЗначений = Новый СписокЗначений;
			СписокЗначений.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку"));
			ЗначениеОтбора = Новый Структура("ВидДоговора, Организация", СписокЗначений, ПустаяОрганизация);
			ПараметрыФормы = Новый Структура("Отбор", ЗначениеОтбора);
			ОткрытьФормуОбъекта("Справочник.ДоговорыКонтрагентов.Форма.ФормаСписка", ПараметрыФормы);
		КонецЕсли;		
	ИначеЕсли ИмяЭлемента = "ИспользоватьОплатуПоПлатежнымКартам" Тогда
		Если ПоказыватьСинхронизациюДляОпций И ИспользуетсяСинхронизацияДанных() Тогда
			ОткрытьФормуОбъекта("Обработка.ФункциональностьПрограммы.Форма.ФормаИспользуетсяСинхронизацияДанных");
		Иначе
			ЗапуститьФормированиеСпискаДокументовПрепятствующихОтключениюОпцииНаКлиенте("ИспользоватьОплатуПоПлатежнымКартам");
		КонецЕсли;
	ИначеЕсли ИмяЭлемента = "ИспользоватьПакетноеВыставлениеАктов" Тогда
		ЗначениеОтбора  = Новый Структура("Организация", ПустаяОрганизация);
		ПараметрыФормы = Новый Структура("Отбор", ЗначениеОтбора);
		ОткрытьФормуОбъекта("Документ.ОказаниеУслуг.ФормаСписка", ПараметрыФормы);
	ИначеЕсли ИмяЭлемента = "ВедетсяРозничнаяТорговля" Тогда
		Если ПоказыватьСинхронизациюДляОпций И ИспользуетсяСинхронизацияДанных() Тогда
			ОткрытьФормуОбъекта("Обработка.ФункциональностьПрограммы.Форма.ФормаИспользуетсяСинхронизацияДанных");
		Иначе
			ЗапуститьФормированиеСпискаДокументовПрепятствующихОтключениюОпцииНаКлиенте("ВедетсяРозничнаяТорговля");
		КонецЕсли;
	ИначеЕсли ИмяЭлемента = "ВедетсяУчетРозничнойПродажиАлкогольнойПродукцииПива" Тогда
		ОткрытьФормуОбъекта("РегистрСведений.СведенияОбАлкогольнойПродукции.ФормаСписка");
	ИначеЕсли ИмяЭлемента = "ВедетсяОтгрузкаБезПереходаПраваСобственности" Тогда
		Если ПоказыватьСинхронизациюДляОпций И ИспользуетсяСинхронизацияДанных() Тогда
			ОткрытьФормуОбъекта("Обработка.ФункциональностьПрограммы.Форма.ФормаИспользуетсяСинхронизацияДанных");
		Иначе
			ЗапуститьФормированиеСпискаДокументовПрепятствующихОтключениюОпцииНаКлиенте("ОтгрузкаБезПереходаПраваСобственности");
		КонецЕсли;
	ИначеЕсли ИмяЭлемента = "ВедетсяПроизводственнаяДеятельность" Тогда
		ЗапуститьФормированиеСпискаДокументовПрепятствующихОтключениюОпцииНаКлиенте("ВедетсяПроизводственнаяДеятельность");
	ИначеЕсли ИмяЭлемента = "ИспользоватьПлатежныеТребования" Тогда
		ЗначениеОтбора  = Новый Структура("Организация", ПустаяОрганизация);
		ПараметрыФормы = Новый Структура("Отбор", ЗначениеОтбора);
		ОткрытьФормуОбъекта("Документ.ПлатежноеТребование.ФормаСписка", ПараметрыФормы);
	ИначеЕсли ИмяЭлемента = "ИспользоватьСинхронизациюДанных" Тогда
		ОткрытьФормуОбъекта("Обработка.ПанельАдминистрированияБСП.Форма.НастройкиСинхронизацииДанных");
	ИначеЕсли ИмяЭлемента = "ИспользоватьВалютныйУчет" Тогда
		Если ПоказыватьСинхронизациюДляОпций И ИспользуетсяСинхронизацияДанных() Тогда
			ОткрытьФормуОбъекта("Обработка.ФункциональностьПрограммы.Форма.ФормаИспользуетсяСинхронизацияДанных");
		Иначе
			// Инициализация пользовательских настроек
			ПользовательскиеНастройкиДляСчета = Новый ПользовательскиеНастройкиКомпоновкиДанных;
			ДополнительныеСвойства = ПользовательскиеНастройкиДляСчета.ДополнительныеСвойства;
			ДополнительныеСвойства.Вставить("ПоказательВалютнаяСумма", 	Истина);
			ДополнительныеСвойства.Вставить("РежимРасшифровки", Истина);
			ДополнительныеСвойства.Вставить("Организация", 		Неопределено);
			ДополнительныеСвойства.Вставить("НачалоПериода", 	'00010101000001');
			ДополнительныеСвойства.Вставить("КонецПериода", 	'00010101000001');
			ДополнительныеСвойства.Вставить("ПоСубсчетам", 		Истина);
			
			ПользовательскиеОтборыДляСчета = ПользовательскиеНастройкиДляСчета.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
			ПользовательскиеОтборыДляСчета.ИдентификаторПользовательскойНастройки = "Отбор";
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборыДляСчета, "Счет.Валютный", Истина,);
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ВидРасшифровки", 2);
			ПараметрыОтбора.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройкиДляСчета);
			ПараметрыОтбора.Вставить("РежимРасшифровки", Истина);
			ОткрытьФорму("Отчет.ОборотноСальдоваяВедомость.Форма", ПараметрыОтбора, ЭтотОбъект);
		КонецЕсли;
	ИначеЕсли ИмяЭлемента = "УправлениеЗачетомАвансовПогашениемЗадолженности" Тогда
		Если ПоказыватьСинхронизациюДляОпций И ИспользуетсяСинхронизацияДанных() Тогда
			ОткрытьФормуОбъекта("Обработка.ФункциональностьПрограммы.Форма.ФормаИспользуетсяСинхронизацияДанных");
		Иначе
			ЗапуститьФормированиеСпискаДокументовПрепятствующихОтключениюОпцииНаКлиенте("УправлениеЗачетомАвансовПогашениемЗадолженности");
		КонецЕсли;
	ИначеЕсли ИмяЭлемента = "ВедетсяУчетВозвратнойТары" Тогда
		Если ПоказыватьСинхронизациюДляОпций И ИспользуетсяСинхронизацияДанных() Тогда
			ОткрытьФормуОбъекта("Обработка.ФункциональностьПрограммы.Форма.ФормаИспользуетсяСинхронизацияДанных");
		Иначе
			ЗапуститьФормированиеСпискаДокументовПрепятствующихОтключениюОпцииНаКлиенте("ВедетсяУчетВозвратнойТары");
		КонецЕсли;
	ИначеЕсли ИмяЭлемента = "ИспользуетсяСинхронизацияДанных" Тогда
		ОткрытьФормуОбъекта("Обработка.ФункциональностьПрограммы.Форма.ФормаИспользуетсяСинхронизацияДанных");
	ИначеЕсли ИмяЭлемента = "ИспользоватьУведомленияОКонтролируемыхСделках" Тогда
		ЗначениеОтбора  = Новый Структура("Организация", ПустаяОрганизация);
		ПараметрыФормы = Новый Структура("Отбор", ЗначениеОтбора);
		ОткрытьФормуОбъекта("Документ.УведомлениеОКонтролируемыхСделках.ФормаСписка", ПараметрыФормы);
	ИначеЕсли ИмяЭлемента = "ИспользоватьКорректировочныеДокументы" Тогда
		Если ПоказыватьСинхронизациюДляОпций И ИспользуетсяСинхронизацияДанных() Тогда
			ОткрытьФормуОбъекта("Обработка.ФункциональностьПрограммы.Форма.ФормаИспользуетсяСинхронизацияДанных");
		Иначе
			ЗапуститьФормированиеСпискаДокументовПрепятствующихОтключениюОпцииНаКлиенте("ИспользоватьКорректировочныеДокументы");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьГиперссылокНаФорме(МассивПроверкаНеПройдена)
	
	МассивКонстантФункциональности = Обработки.ФункциональностьПрограммы.МассивИменКонстантФункциональности();
	// Отдельно добавим синхронизации данных, так как она явно не участвует в функциональности
	МассивКонстантФункциональности.Добавить("ИспользуетсяСинхронизацияДанных");
	
	МассивПроверкаПройдена = ОбщегоНазначенияКлиентСервер.СократитьМассив(МассивКонстантФункциональности, МассивПроверкаНеПройдена);
	
	// Скроем видимость у прошедших проверку констант
	Для Каждого ИмяКонстанты Из МассивПроверкаПройдена Цикл
		Элементы["Главное" + ИмяКонстанты].Видимость = Ложь;
	КонецЦикла;
	// Установим видимость для констант не прошедших проверку
	Для Каждого ИмяКонстанты Из МассивПроверкаНеПройдена Цикл
		Элементы["Главное"+ИмяКонстанты].Видимость = Истина;
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовНаЗакладке(МассивИменКонстант, ИмяРаздела)
	
	МассивКонстантПроверкаНеПройдена = Обработки.ФункциональностьПрограммы.МассивКонстантПроверкаНеПройдена(МассивИменКонстант);
	
	Если МассивКонстантПроверкаНеПройдена.Количество() > 0 Тогда
		
		Для Каждого ИмяКонстанты Из МассивКонстантПроверкаНеПройдена Цикл
			Элементы[ИмяКонстанты].Доступность = Ложь;
			Элементы["Закладки"+ИмяКонстанты].Видимость = Истина;
		КонецЦикла;
		
		Элементы["ГруппаСтраницы"+ИмяРаздела].ТекущаяСтраница = Элементы["Страница"+ИмяРаздела+"ИспользуемыеВозможности"];
		
	КонецЕсли;
	
	ЭтотОбъект["ДоступностьПроверена" + ИмяРаздела] = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОбъекта(ИмяФормы, ПараметрыФормы = Неопределено)
	
	ОткрытьФорму(ИмяФормы, ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИспользуетсяСинхронизацияДанных()

	Возврат Константы.ИспользоватьСинхронизациюДанных.Получить() И НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено();

КонецФункции

#Область ИзменениеРеквизитов

&НаСервере
Функция ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	
	Результат = Новый Структура;
	
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	
	СохранитьЗначениеРеквизита(РеквизитПутьКДанным, Результат);
	
	ВариантФункциональности = ОпределитьВариантФункциональности();
	
	// Изменим связанные константы.
	Если ИмяЭлемента = "ИспользоватьВалютныйУчет" Тогда
		
		РегистрироватьСчетаФактурыНаСуммовыеРазницы = НаборКонстант.ИспользоватьВалютныйУчет 
			И (Константы.ИспользуетсяОСНО.Получить() ИЛИ Константы.ИспользуетсяНДФЛИП.Получить());
		
		Константы.РегистрироватьСчетаФактурыНаСуммовыеРазницы.Установить(РегистрироватьСчетаФактурыНаСуммовыеРазницы);
		
	КонецЕсли;
	
	// Снимем флаги с зависимых констант
	Если НЕ НаборКонстант[ИмяЭлемента] Тогда
		МассивЗависимыхКонстант = Обработки.ФункциональностьПрограммы.МассивИменЗависимыхКонстант(ИмяЭлемента);
		Если МассивЗависимыхКонстант.Количество() > 0 Тогда
			СтрокаИменКонстант = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(МассивЗависимыхКонстант);
			НаборКонстантОбъект = Константы.СоздатьНабор(СтрокаИменКонстант);
			НаборКонстантОбъект.Прочитать();
			
			Для Каждого ИмяКонстанты Из МассивЗависимыхКонстант Цикл
				НаборКонстантОбъект[ИмяКонстанты] = Ложь;
				// Обновим константы на форме
				НаборКонстант[ИмяКонстанты] = Ложь;
			КонецЦикла;
			
			НаборКонстантОбъект.Записать();
		КонецЕсли;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииРеквизитаНаКлиенте(Элемент, ОбновлятьИнтерфейс = Истина)
	
	Результат = ПриИзмененииРеквизитаСервер(Элемент.Имя);
	
	Если ОбновлятьИнтерфейс Тогда
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 1, Истина);
		ОбновитьИнтерфейс = Истина;
	КонецЕсли;

	СтандартныеПодсистемыКлиент.ПоказатьРезультатВыполнения(ЭтотОбъект, Результат);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначениеРеквизита(РеквизитПутьКДанным, Результат)
	
	// Сохранение значений реквизитов, не связанных с константами напрямую (в отношении один-к-одному).
	Если РеквизитПутьКДанным = "" Тогда
		Возврат;
	КонецЕсли;
	
	// Определение имени константы.
	КонстантаИмя = "";
	Если НРег(Лев(РеквизитПутьКДанным, 14)) = НРег("НаборКонстант.") Тогда
		// Если путь к данным реквизита указан через "НаборКонстант".
		КонстантаИмя = Сред(РеквизитПутьКДанным, 15);
	КонецЕсли;
	
	// Сохранения значения константы.
	Если КонстантаИмя <> "" Тогда
		КонстантаМенеджер = Константы[КонстантаИмя];
		КонстантаЗначение = НаборКонстант[КонстантаИмя];
		
		Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
			КонстантаМенеджер.Установить(КонстантаЗначение);
		КонецЕсли;
		
		СтандартныеПодсистемыКлиентСервер.РезультатВыполненияДобавитьОповещениеОткрытыхФорм(Результат, "Запись_НаборКонстант", Новый Структура, КонстантаИмя);
		// СтандартныеПодсистемы.ВариантыОтчетов
		ВариантыОтчетов.ДобавитьОповещениеПриИзмененииЗначенияКонстанты(Результат, КонстантаМенеджер);
		// Конец СтандартныеПодсистемы.ВариантыОтчетов
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДлительнаяОперация

&НаКлиенте
Процедура ЗапуститьФормированиеСпискаДокументовПрепятствующихОтключениюОпцииНаКлиенте(ИмяОпции)

	Результат = ЗапуститьФормированиеСпискаДокументовПрепятствующихОтключениюОпцииНаСервере(ИмяОпции);
	
	Если Результат <> Неопределено Тогда
		// Результат получен и уже обработан на стороне сервера
		ОткрытьФормуОтчетаПоДокументам();
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		// Результата еще нет, но есть шансы дождаться
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьОкончаниеФормированияОтчетаПоДокументам", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ЗапуститьФормированиеСпискаДокументовПрепятствующихОтключениюОпцииНаСервере(ИмяОпции)
	
	// Возможно, что фоновое задание было запущено раньше, 
	// пользователь дал команду его отменить, однако задание не отменено.
	// В таком случае не следует запускать задание повторно - следует дождаться его выполнения.
	// Мы можем отследить ситуацию только, если все это происходит в одной форме.
	// Потому что подсистема ДлительныеОперации не умеет устанавливать ключ фонового задания.
	Если ФоновоеЗаданиеЗапущено И ЗакрытиеМесяца.ЗаданиеЕщеВыполняется(ИдентификаторЗадания) Тогда
		// Надо ждать
		Возврат Неопределено;
	КонецЕсли;

	ИдентификаторЗадания = Неопределено;
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить(ИмяОпции);
	
	НаименованиеЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Формирование списка документов, препятствующих отключению опции ""%1""'"),
		ИмяОпции);
		
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Обработки.ФункциональностьПрограммы.СформироватьСписокДокументовПрепятствующихОтключениюОпции",
		ПараметрыОтчета,
		НаименованиеЗадания);
	
	АдресХранилища       = Результат.АдресХранилища;
	ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	
	Если Не Результат.ЗаданиеВыполнено Тогда
		// Надо ждать
		ФоновоеЗаданиеЗапущено = Истина;
		
		Возврат Неопределено;
	Иначе
		// Задание выполнено.
		
		Возврат Результат;
	
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьОкончаниеФормированияОтчетаПоДокументам()

	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			ФоновоеЗаданиеЗапущено = Ложь;
			ОткрытьФормуОтчетаПоДокументам();
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьОкончаниеФормированияОтчетаПоДокументам",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

&НаКлиенте 
Процедура ОткрытьФормуОтчетаПоДокументам()

	Если ЗначениеЗаполнено(АдресХранилища) Тогда
	
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("АдресХранилища", АдресХранилища);
	
		ОткрытьФорму("Обработка.ФункциональностьПрограммы.Форма.ФормаОтчетаПоДокументам", ПараметрыФормы, ЭтотОбъект);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОтключитьНеиспользуемуюФункциональностьНаКлиенте()
	
	// Возможно, что фоновое задание было запущено раньше, 
	// пользователь дал команду его отменить, однако задание не отменено.
	// В таком случае не следует запускать задание повторно - следует дождаться его выполнения.
	// Мы можем отследить ситуацию только, если все это происходит в одной форме.
	// Потому что подсистема ДлительныеОперации не умеет устанавливать ключ фонового задания.
	Если ФоновоеЗаданиеЗапущено И ЗакрытиеМесяца.ЗаданиеЕщеВыполняется(ИдентификаторЗадания) Тогда
		// Надо ждать
		Возврат;
	КонецЕсли;
	
	НаименованиеФоновогоЗадания = НСтр("ru = 'Ограничение функциональности до основной'");
	
	ПараметрыФункции = Новый Структура();
	
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Обработки.ФункциональностьПрограммы.МассивКонстантПроверкаНеПройденаВФоне", 
		ПараметрыФункции, 
		НаименованиеФоновогоЗадания);
	
	АдресХранилища = Результат.АдресХранилища;
	ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	
	Если НЕ Результат.ЗаданиеВыполнено Тогда
		Элементы.Страницы.ТолькоПросмотр = Истина;
		Элементы.СтраницыВыполненияОперации.ТекущаяСтраница = Элементы.СтраницаПожалуйстаПодождите;
		// Начнем ждать
		ФоновоеЗаданиеЗапущено = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЖдатьЗавершенияФоновогоЗадания()
	
	Если ФоновоеЗаданиеЗапущено Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьЗавершениеДлительнойОперации",
			ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	Иначе
		ОбработатьРезультатДлительнойОперации();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьЗавершениеДлительнойОперации()
	
	Если ФоновоеЗаданиеЗапущено Тогда
		Попытка
			Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
				Элементы.СтраницыВыполненияОперации.ТекущаяСтраница = Элементы.ПустаяСтраница;
				ФоновоеЗаданиеЗапущено = Ложь;
				ОбработатьРезультатДлительнойОперации();
			Иначе
				// Продолжим ожидание
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания(
					"Подключаемый_ПроверитьЗавершениеДлительнойОперации",
					ПараметрыОбработчикаОжидания.ТекущийИнтервал,
					Истина);
			КонецЕсли;
		Исключение
			Элементы.СтраницыВыполненияОперации.ТекущаяСтраница = Элементы.ПустаяСтраница;
			ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервере
Процедура ОтменитьВыполнениеЗадания()
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатДлительнойОперации()
	
	Элементы.Страницы.ТолькоПросмотр = Ложь;
	СтруктураРезультат = ПолучитьИзВременногоХранилища(АдресХранилища);
	ОбновитьИнтерфейс = СтруктураРезультат.ОбновитьИнтерфейс;
	
	МассивКонстантПроверкаНеПройдена = СтруктураРезультат.Массив;
	
	ОбработатьРезультатДлительнойОперацииНаСервере(МассивКонстантПроверкаНеПройдена, ОбновитьИнтерфейс);
	
	ИдентификаторЗадания = Неопределено;
	
	УправлениеФормой(ЭтотОбъект);
	Если ОбновитьИнтерфейс Тогда
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатДлительнойОперацииНаСервере(МассивКонстантПроверкаНеПройдена, Знач ОбновитьИнтерфейс)
	
	Если МассивКонстантПроверкаНеПройдена.Количество() > 0 Тогда
		Элементы.СтраницыВыполненияОперации.ТекущаяСтраница = Элементы.СтраницаГиперссылки;
		УстановитьВидимостьГиперссылокНаФорме(МассивКонстантПроверкаНеПройдена);
	Иначе
		Элементы.СтраницыВыполненияОперации.ТекущаяСтраница = Элементы.ПустаяСтраница;
	КонецЕсли;
	
	Если ОбновитьИнтерфейс Тогда
		// Обновим отображение констант на форме
		МассивИменКонстант = Обработки.ФункциональностьПрограммы.МассивИменКонстантФункциональности();
		СтрокаИменКонстант = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(МассивИменКонстант);
		НаборКонстантОбъект = Константы.СоздатьНабор(СтрокаИменКонстант);
		НаборКонстантОбъект.Прочитать();
		НаборКонстантОбъект.Записать();
		ЗначениеВРеквизитФормы(НаборКонстантОбъект, "НаборКонстант");
	КонецЕсли;
	
	ВариантФункциональности = ОпределитьВариантФункциональности();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти