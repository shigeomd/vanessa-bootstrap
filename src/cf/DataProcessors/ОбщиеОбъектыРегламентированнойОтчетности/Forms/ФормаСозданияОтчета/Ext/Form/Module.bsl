////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
&НаКлиенте
Перем ПараметрыВыбора;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",             Параметры.Организация);
	ПараметрыФормы.Вставить("ДатаНачалаПериодаОтчета", Параметры.ДатаНачалаПериодаОтчета);
	ПараметрыФормы.Вставить("ДатаКонцаПериодаОтчета",  Параметры.ДатаКонцаПериодаОтчета);
	ПараметрыФормы.Вставить("ПредставлениеВидаОчета",  Параметры.ПредставлениеВидаОтчета);
	
	ПараметрыФормы.Вставить("ЗаполнитьИзбранноеРанееСозданными",  Параметры.ЗаполнитьИзбранноеРанееСозданными);
	
	ДеревоВсехИспользуемыхОтчетовПоКатегориям = ДеревоВсехИспользуемыхОтчетов();
	
	Если ЗначениеЗаполнено(ПараметрыФормы.ПредставлениеВидаОчета) Тогда
		НайденныеОтчеты = ДеревоВсехИспользуемыхОтчетовПоКатегориям.Строки.НайтиСтроки(Новый Структура("Наименование", ПараметрыФормы.ПредставлениеВидаОчета), Истина);
		Для каждого НайденныйОтчет Из НайденныеОтчеты Цикл
			Если НайденныйОтчет.ЭтоГруппа <> Истина Тогда
				ДанныеНайденногоВидаОтчета = Новый Структура("Наименование,ПолноеИмя,Ссылка");
				ЗаполнитьЗначенияСвойств(ДанныеНайденногоВидаОтчета, НайденныйОтчет);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ДеревоВсехИспользуемыхОтчетовПоПолучателям  = ЗаполнитьДеревоОтчетовПоПолучателям(ДеревоВсехИспользуемыхОтчетовПоКатегориям);
	ДеревоВсехИспользуемыхОтчетовБезГруппировки = ЗаполнитьДеревоОтчетовБезГруппировки(ДеревоВсехИспользуемыхОтчетовПоКатегориям);
	
	ЗначениеВДанныеФормы(ДеревоВсехИспользуемыхОтчетовПоКатегориям,   ДеревоОтчетовПоКатегориям);
	ЗначениеВДанныеФормы(ДеревоВсехИспользуемыхОтчетовПоПолучателям,  ДеревоОтчетовПоПолучателям);
	ЗначениеВДанныеФормы(ДеревоВсехИспользуемыхОтчетовБезГруппировки, ДеревоОтчетовБезГруппировки);
	
	ДеревоОтчетовГруппировка = ХранилищеНастроекДанныхФорм.Загрузить(ЭтаФорма.ИмяФормы, "ФормаОтчетность_ФормаСозданияОтчета_ДеревоОтчетовГруппировка");
	Если ДеревоОтчетовГруппировка = 1 Тогда      // группировка по получателям
		КопироватьДанныеФормы(ДеревоОтчетовПоПолучателям, ДеревоОтчетов);
	ИначеЕсли ДеревоОтчетовГруппировка = 2 Тогда // без группировки
		КопироватьДанныеФормы(ДеревоОтчетовБезГруппировки, ДеревоОтчетов);
	Иначе                                        // группировка по категориям (по умолчанию)
		КопироватьДанныеФормы(ДеревоОтчетовПоКатегориям, ДеревоОтчетов);
	КонецЕсли;
	
	ТаблицаВсехРанееСозданныхОтчетов = ТаблицаСозданныхВидовОтчетов();
	
	ТаблицаРанееСозданныхОтчетов = ХранилищеНастроекДанныхФорм.Загрузить(ЭтаФорма.ИмяФормы, "ФормаОтчетность_ФормаСозданияОтчета_РанееСозданныеОтчеты");
	Если ТипЗнч(ТаблицаРанееСозданныхОтчетов) = Тип("ТаблицаЗначений") Тогда
		ДобавитьРанееСозданныеВИзбранные(ДеревоОтчетов, ТаблицаРанееСозданныхОтчетов);
	Иначе
		ДобавитьРанееСозданныеВИзбранные(ДеревоОтчетов, ТаблицаВсехРанееСозданныхОтчетов);
	КонецЕсли;
	РанееСозданныеОтчеты.Сортировать("Наименование");
	
	КоличествоЭлементовВРанееСозданных = РанееСозданныеОтчеты.Количество();
		
	Если КоличествоЭлементовВРанееСозданных = 0 Тогда
		Элементы.ГруппаВидыСписков.ТекущаяСтраница = Элементы["ГруппаДеревоОтчетов"];
	Иначе
		ТекСтраница = ХранилищеНастроекДанныхФорм.Загрузить(ЭтаФорма.ИмяФормы, "ФормаОтчетность_ФормаСозданияОтчета_ТекущаяСтраница");
		Если ТекСтраница <> Неопределено И Элементы.ГруппаВидыСписков.ПодчиненныеЭлементы.Найти(ТекСтраница) <> Неопределено Тогда
			Элементы.ГруппаВидыСписков.ТекущаяСтраница = Элементы[ТекСтраница];
		КонецЕсли;
	КонецЕсли;
		
	Элементы.СписокРанееСозданные.ТекущаяСтрока = ХранилищеНастроекДанныхФорм.Загрузить(ЭтаФорма.ИмяФормы, "ФормаОтчетность_ФормаСозданияОтчета_РанееСозданныеОтчеты_ТекущаяСтрока");
	Элементы.ДеревоОтчетов.ТекущаяСтрока        = ХранилищеНастроекДанныхФорм.Загрузить(ЭтаФорма.ИмяФормы, "ФормаОтчетность_ФормаСозданияОтчета_ДеревоОтчетов_ТекущаяСтрока");
	
	УправлениеЭУДереваОтчетов(Элементы, ДеревоОтчетовГруппировка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ТипЗнч(ДанныеНайденногоВидаОтчета) = Тип("Структура") И ДанныеНайденногоВидаОтчета.Свойство("Наименование") Тогда
		Если ЗначениеЗаполнено(ДанныеНайденногоВидаОтчета.Наименование) Тогда
			
			РанееОткрытыеВидыОтчетов = ЭтаФорма.ВладелецФормы.РанееОткрытыеВидыОтчетов;
			НайденныеОтчеты = РанееОткрытыеВидыОтчетов.НайтиСтроки(Новый Структура("ПолноеИмя,Ссылка", ДанныеНайденногоВидаОтчета.ПолноеИмя, ДанныеНайденногоВидаОтчета.Ссылка));
			Если НайденныеОтчеты.Количество() = 0 Тогда
				НоваяСтрока = РанееОткрытыеВидыОтчетов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеНайденногоВидаОтчета);
			КонецЕсли;
			ФормаОтчета = "";
			ОткрытьФормуОтчетаНаКлиенте(ДанныеНайденногоВидаОтчета, ПараметрыФормы.Организация, 
										ПараметрыФормы.ДатаНачалаПериодаОтчета, ПараметрыФормы.ДатаКонцаПериодаОтчета);
			
			СохранитьНастройки();
			
			Отказ = Истина;
			
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	УправлениеЭУ();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	СохранитьНастройки();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура Выбрать(Команда)
	
	ТекДеревоОтчетов = ОпределитьТекущееДерево();
	
	Если ТекДеревоОтчетов.ТекущиеДанные <> Неопределено
		И НЕ ТекДеревоОтчетов.ТекущиеДанные.ЭтоГруппа Тогда
		
		ОткрытьФормуОтчетаНаКлиенте(ТекДеревоОтчетов.ТекущиеДанные, ПараметрыФормы.Организация, 
									ПараметрыФормы.ДатаНачалаПериодаОтчета, 
									ПараметрыФормы.ДатаКонцаПериодаОтчета, , Истина);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПодробнееОбОтчетеНажатие(Элемент)
	
	ПараметрыОткрытияФормы = Новый Структура;
	
	ТекДеревоОтчетов = ОпределитьТекущееДерево();
	
	Если НЕ ЗначениеЗаполнено(ТекДеревоОтчетов.ТекущиеДанные.Ссылка) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Для выбранного отчета вывод подробной информации не предусмотрен.'"));
		Возврат;
	КонецЕсли;
	
	Если ТекДеревоОтчетов.ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru='Выберите отчет!'"));
		Возврат;
	КонецЕсли;
	
	Если ТекДеревоОтчетов.ТекущиеДанные.ЭтоГруппа = Истина Тогда
		ПоказатьПредупреждение(, НСтр("ru='Функция недоступна для группы отчетов!'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытияФормы.Вставить("НачальноеЗначениеВыбора", ТекДеревоОтчетов.ТекущиеДанные.Ссылка);
	
	ФормаПодробнееОФормах = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ПодробнееОбОтчете", ПараметрыОткрытияФормы, ЭтаФорма);
	ФормаПодробнееОФормах.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаПодробнееОФормах.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРанееСозданныеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекДеревоОтчетов = Элементы.СписокРанееСозданные;
	
	Если ТекДеревоОтчетов.ТекущиеДанные <> Неопределено
		И НЕ ТекДеревоОтчетов.ТекущиеДанные.ЭтоГруппа Тогда

		ОткрытьФормуОтчетаНаКлиенте(ТекДеревоОтчетов.ТекущиеДанные, ПараметрыФормы.Организация, 
									ПараметрыФормы.ДатаНачалаПериодаОтчета, 
									ПараметрыФормы.ДатаКонцаПериодаОтчета, , Истина);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРанееСозданныеПриАктивизацииСтроки(Элемент)
	
	УправлениеЭУ();
	УправлениеЭУДереваОтчетов(Элементы, ДеревоОтчетовГруппировка);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРанееСозданныеПередУдалением(Элемент, Отказ)
	
	УдалитьОтчетИзИзбранных();
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРанееСозданныеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтчетовГруппировкаПриИзменении(Элемент)
	
	Если ДеревоОтчетовГруппировка = 1 Тогда      // группировка по получателям
		ЗаполнитьДеревоОтчетовИзДругогоДерева(ДеревоОтчетовПоПолучателям);
	ИначеЕсли ДеревоОтчетовГруппировка = 2 Тогда // без группировки
		ЗаполнитьДеревоОтчетовИзДругогоДерева(ДеревоОтчетовБезГруппировки);
	Иначе                                        // группировка по категориям (по умолчанию)
		ЗаполнитьДеревоОтчетовИзДругогоДерева(ДеревоОтчетовПоКатегориям);
	КонецЕсли;
	
	УправлениеЭУ();
	УправлениеЭУДереваОтчетов(Элементы, ДеревоОтчетовГруппировка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтчетовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекДеревоОтчетов = Элементы.ДеревоОтчетов;
	
	Если ТекДеревоОтчетов.ТекущиеДанные <> Неопределено
		И НЕ ТекДеревоОтчетов.ТекущиеДанные.ЭтоГруппа Тогда
		
		Если Поле.Имя = "ДеревоОтчетовПометка" Тогда
			Если ТекДеревоОтчетов.ТекущиеДанные.Пометка = 0 Тогда
				ДобавитьОтчетВИзбранные();
			ИначеЕсли ТекДеревоОтчетов.ТекущиеДанные.Пометка = 1 Тогда
				УдалитьОтчетИзИзбранных(ТекДеревоОтчетов.ТекущиеДанные.ПолучитьИдентификатор());
			КонецЕсли;
		Иначе
			
			ОткрытьФормуОтчетаНаКлиенте(ТекДеревоОтчетов.ТекущиеДанные, ПараметрыФормы.Организация, 
										ПараметрыФормы.ДатаНачалаПериодаОтчета, 
										ПараметрыФормы.ДатаКонцаПериодаОтчета, , Истина);
									
		КонецЕсли;
									
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтчетовПриАктивизацииСтроки(Элемент)
	
	УправлениеЭУ();
	УправлениеЭУДереваОтчетов(Элементы, ДеревоОтчетовГруппировка);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаВидыСписковПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	УправлениеЭУ();
	УправлениеЭУДереваОтчетов(Элементы, ДеревоОтчетовГруппировка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВИзбранные(Команда)
	
	ДобавитьОтчетВИзбранные();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИзИзбранных(Команда)
	
	УдалитьОтчетИзИзбранных()
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Функция ОпределитьТекущееДерево()
	
	Если Элементы.ГруппаВидыСписков.ТекущаяСтраница.Имя = "ГруппаРанееСозданные" Тогда
		ТекДеревоОтчетов = Элементы.СписокРанееСозданные;
	Иначе
		ТекДеревоОтчетов = Элементы.ДеревоОтчетов;
	КонецЕсли;
	
	Возврат ТекДеревоОтчетов;
	
КонецФункции

&НаКлиенте
Процедура УправлениеЭУ()
	
	ТекДеревоОтчетов = ОпределитьТекущееДерево();
	
	ДоступностьЭУ = (ТекДеревоОтчетов.ТекущиеДанные <> Неопределено И НЕ ТекДеревоОтчетов.ТекущиеДанные.ЭтоГруппа);
	
	ТекДеревоОтчетов.КонтекстноеМеню.ПодчиненныеЭлементы[0].Доступность = ДоступностьЭУ;
	ТекДеревоОтчетов.КонтекстноеМеню.ПодчиненныеЭлементы[1].Доступность = ДоступностьЭУ;
	
	Элементы.Выбрать.Доступность   = ДоступностьЭУ;
	Элементы.Подробнее.Доступность = ДоступностьЭУ;
		
	ЭтаФорма.ТекущийЭлемент = ТекДеревоОтчетов;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЭУДереваОтчетов(Элементы, ДеревоОтчетовГруппировка)
	
	Если ДеревоОтчетовГруппировка = 1 Тогда // группировка по получателям
		
		Элементы.ДеревоОтчетовКатегория.Видимость  = Истина;
		Элементы.ДеревоОтчетовПолучатель.Видимость = Ложь;
		Элементы.ДеревоОтчетов.Отображение = ОтображениеТаблицы.Дерево;
		
	ИначеЕсли ДеревоОтчетовГруппировка = 2 Тогда // без группировки
		
		Элементы.ДеревоОтчетовКатегория.Видимость  = Истина;
		Элементы.ДеревоОтчетовПолучатель.Видимость = Истина;
		Элементы.ДеревоОтчетов.Отображение = ОтображениеТаблицы.Список;
		
	Иначе // группировка по категориям
		
		ДеревоОтчетовГруппировка = 0;
		Элементы.ДеревоОтчетовКатегория.Видимость  = Ложь;
		Элементы.ДеревоОтчетовПолучатель.Видимость = Истина;
		Элементы.ДеревоОтчетов.Отображение = ОтображениеТаблицы.Дерево;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОтчетВИзбранные()
	
	ТекущиеДанные = Элементы.ДеревоОтчетов.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено И НЕ ТекущиеДанные.ЭтоГруппа Тогда
		
		НайденныеОтчеты = РанееСозданныеОтчеты.НайтиСтроки(Новый Структура("ПолноеИмя,Ссылка", ТекущиеДанные.ПолноеИмя, ТекущиеДанные.Ссылка));
		
		Если НайденныеОтчеты.Количество() = 0 Тогда
			
			НоваяСтрока = РанееСозданныеОтчеты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущиеДанные);
			
			РанееСозданныеОтчеты.Сортировать("Наименование");
			
		КонецЕсли;
		
		ТекущиеДанные.Пометка = 1;
		
	КонецЕсли;
	
	КоличествоЭлементовВРанееСозданных = РанееСозданныеОтчеты.Количество();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОтчетВРанееОткрытыеВидыОтчетов()
	
	ТекущиеДанные = Элементы.ДеревоОтчетов.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено И НЕ ТекущиеДанные.ЭтоГруппа Тогда
		
		РанееОткрытыеВидыОтчетов = ЭтаФорма.ВладелецФормы.РанееОткрытыеВидыОтчетов;
		НайденныеОтчеты = РанееОткрытыеВидыОтчетов.НайтиСтроки(Новый Структура("ПолноеИмя,Ссылка", ТекущиеДанные.ПолноеИмя, ТекущиеДанные.Ссылка));
		
		Если НайденныеОтчеты.Количество() = 0 Тогда
			
			НоваяСтрока = РанееОткрытыеВидыОтчетов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущиеДанные);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьОтчетИзИзбранных(ИдентификаторЭлементаДерева = Неопределено)
	
	Если ИдентификаторЭлементаДерева <> Неопределено Тогда
		
		ТекущиеДанные = ДеревоОтчетов.НайтиПоИдентификатору(ИдентификаторЭлементаДерева);
		ТекущиеДанные.Пометка = 0;
		НайденныеОтчеты = РанееСозданныеОтчеты.НайтиСтроки(Новый Структура("ПолноеИмя,Ссылка", ТекущиеДанные.ПолноеИмя, ТекущиеДанные.Ссылка));
		Для каждого НайденныйОтчет Из НайденныеОтчеты Цикл
			РанееСозданныеОтчеты.Удалить(НайденныйОтчет);
		КонецЦикла;
		
		КоличествоЭлементовВРанееСозданных = РанееСозданныеОтчеты.Количество();
		
		Возврат;
		
	КонецЕсли;
	
	СписокОтчетов = Новый СписокЗначений;
	
	ВыделенныеСтроки = Элементы.СписокРанееСозданные.ВыделенныеСтроки;
	Для каждого ТекущийИдентификатор Из ВыделенныеСтроки Цикл
		ТекущиеДанные = РанееСозданныеОтчеты.НайтиПоИдентификатору(ТекущийИдентификатор);
		СписокОтчетов.Добавить(ТекущиеДанные.Ссылка, ТекущиеДанные.ПолноеИмя);
		РанееСозданныеОтчеты.Удалить(ТекущиеДанные);
	КонецЦикла;
	
	СписокОтчетов.СортироватьПоЗначению();
	
	СнятьПометкиВДеревеПоСписку(ДеревоОтчетов, СписокОтчетов);
	
	КоличествоЭлементовВРанееСозданных = РанееСозданныеОтчеты.Количество();
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометкиВДеревеПоСписку(Узел = Неопределено, СписокОтчетов)
	
	ЭлементыУзла = Узел.ПолучитьЭлементы();
	
	Для каждого ЭлементУзла Из ЭлементыУзла Цикл
		
		СнятьПометкиВДеревеПоСписку(ЭлементУзла, СписокОтчетов);
		
		Если ЭлементУзла.ЭтоГруппа <> Истина Тогда
			Если СписокОтчетов.Количество() = 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЭлементУзла.Ссылка) Тогда
				НайденныйОтчет = СписокОтчетов.НайтиПоЗначению(ЭлементУзла.Ссылка);
			Иначе
				НайденныйОтчет = Неопределено;
				Для Инд = 0 По СписокОтчетов.Количество() - 1 Цикл
					ЭлементСписка = СписокОтчетов.Получить(Инд);
					Если ЗначениеЗаполнено(ЭлементСписка.Значение) Тогда
						Прервать;
					КонецЕсли;
					Если ЭлементСписка.Представление = ЭлементУзла.ПолноеИмя Тогда
						НайденныйОтчет = ЭлементСписка;
						Прервать;
					КонецЕсли;
				КонецЦикла; 
			КонецЕсли;
			Если НайденныйОтчет <> Неопределено Тогда
				ЭлементУзла.Пометка = 0;
				СписокОтчетов.Удалить(НайденныйОтчет);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДеревоВсехИспользуемыхОтчетов()
	
	КоличествоЭлементовВДеревеОтчетов  = 0;
	
	ДеревоВсехИспользуемыхОтчетов = ДеревоИзСправочникаРегламентированныеОтчеты();
	
	// Добавим новые колонки для использования расширенных типов
	ДеревоВсехИспользуемыхОтчетов.Колонки.Добавить("Ссылка");
	ДеревоВсехИспользуемыхОтчетов.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	ДеревоВсехИспользуемыхОтчетов.Колонки.Добавить("ПолноеИмя",    Новый ОписаниеТипов("Строка"));
	ДеревоВсехИспользуемыхОтчетов.Колонки.Добавить("Категория",    Новый ОписаниеТипов("Строка"));
	
	ЗаполнитьНовыеКолонкиДереваОтчетов(ДеревоВсехИспользуемыхОтчетов);
	
	ДеревоВсехИспользуемыхОтчетов.Колонки.Удалить("СсылкаВидОтчета");
	ДеревоВсехИспользуемыхОтчетов.Колонки.Удалить("НаименованиеОтчета");
	ДеревоВсехИспользуемыхОтчетов.Колонки.Удалить("ИсточникОтчета");
	
	РегламентированнаяОтчетность.ДобавитьВДеревоРегламентированныхОтчетовДругиеОтчеты(ДеревоВсехИспользуемыхОтчетов);
	
	// Добавим дополнительные колонки для соответствия данным формы
	ДеревоВсехИспользуемыхОтчетов.Колонки.Добавить("Получатель",     Новый ОписаниеТипов("Строка"));
	ДеревоВсехИспользуемыхОтчетов.Колонки.Добавить("Пометка",        Новый ОписаниеТипов("Число"));
	ДеревоВсехИспользуемыхОтчетов.Колонки.Добавить("ИндексКартинки", Новый ОписаниеТипов("Число"));
	
	ОбработатьДеревоОтчетов(ДеревоВсехИспользуемыхОтчетов);
	
	ДеревоВсехИспользуемыхОтчетов.Колонки.Удалить("ТипПолучателя");
	
	Для каждого СтрокаПервогоУровня Из ДеревоВсехИспользуемыхОтчетов.Строки Цикл
	
		СтрокаПервогоУровня.Строки.Сортировать("Наименование", Истина);
	
	КонецЦикла;
	
	Возврат ДеревоВсехИспользуемыхОтчетов;
	
КонецФункции

&НаСервере
Функция ДеревоИзСправочникаРегламентированныеОтчеты()
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РегламентированныеОтчеты.Наименование КАК НаименованиеОтчета,
	|	РегламентированныеОтчеты.Ссылка КАК СсылкаВидОтчета,
	|	РегламентированныеОтчеты.ИсточникОтчета КАК ИсточникОтчета,
	|	ВидыОтправляемыхДокументов.ТипПолучателя КАК ТипПолучателя,
	|	РегламентированныеОтчеты.ЭтоГруппа
	|ИЗ
	|	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СкрытыеРегламентированныеОтчеты КАК СкрытыеРегламентированныеОтчеты
	|		ПО (СкрытыеРегламентированныеОтчеты.РегламентированныйОтчет = РегламентированныеОтчеты.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыОтправляемыхДокументов КАК ВидыОтправляемыхДокументов
	|		ПО РегламентированныеОтчеты.ИсточникОтчета = ВидыОтправляемыхДокументов.Источник
	|ГДЕ
	|	СкрытыеРегламентированныеОтчеты.РегламентированныйОтчет ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	СсылкаВидОтчета ИЕРАРХИЯ");
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
КонецФункции

&НаСервере
Функция ТаблицаСозданныхВидовОтчетов()
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТИПЗНАЧЕНИЯ(ЖурналОтчетовСтатусы.Ссылка) КАК ТипСсылки,
	|	ЖурналОтчетовСтатусы.НаименованиеОтчета КАК Наименование
	|ИЗ
	|	РегистрСведений.ЖурналОтчетовСтатусы КАК ЖурналОтчетовСтатусы
	|ГДЕ
	|	НЕ ЖурналОтчетовСтатусы.Ссылка ЕСТЬ NULL");
	
	ТаблицаСозданных = Запрос.Выполнить().Выгрузить();
	ТаблицаСозданных.Колонки.Добавить("ПолноеИмя", Новый ОписаниеТипов("Строка"));
	КоличествоСтрок = ТаблицаСозданных.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ОбрИндекс = КоличествоСтрок - Инд;
		СтрокаТаблицы = ТаблицаСозданных[ОбрИндекс];
		МетаОтчет = Метаданные.НайтиПоТипу(СтрокаТаблицы.ТипСсылки);
		Если МетаОтчет <> Неопределено Тогда
			СтрокаТаблицы.ПолноеИмя = МетаОтчет.ПолноеИмя();
		Иначе
			ТаблицаСозданных.Удалить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаСозданных;
	
КонецФункции

&НаСервере
Процедура ДобавитьРанееСозданныеВИзбранные(Узел = Неопределено, ТаблицаРанееСозданныхОтчетов)
	
	ЭлементыУзла = Узел.ПолучитьЭлементы();
	
	Для каждого ЭлементУзла Из ЭлементыУзла Цикл
		
		ДобавитьРанееСозданныеВИзбранные(ЭлементУзла, ТаблицаРанееСозданныхОтчетов);
		
		Если ЭлементУзла.ЭтоГруппа <> Истина Тогда
			
			Если ТаблицаРанееСозданныхОтчетов.Количество() = 0 Тогда
				Прервать;
			КонецЕсли;
			
			НайденныеОтчеты = ТаблицаРанееСозданныхОтчетов.НайтиСтроки(Новый Структура("ПолноеИмя,Наименование", ЭлементУзла.ПолноеИмя, ЭлементУзла.Наименование));
			Для каждого НайденныйОтчет Из НайденныеОтчеты Цикл
				НоваяСтрокаТаблицы = РанееСозданныеОтчеты.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицы, ЭлементУзла);
				ЭлементУзла.Пометка = 1;
				ТаблицаРанееСозданныхОтчетов.Удалить(НайденныйОтчет);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьНовыеКолонкиДереваОтчетов(Узел = Неопределено)
	
	СтрокиУзла = Узел.Строки;
	
	Для каждого СтрокаДерева Из СтрокиУзла Цикл
	
		ЗаполнитьНовыеКолонкиДереваОтчетов(СтрокаДерева);
		
		Если СтрокаДерева.ЭтоГруппа <> Истина Тогда
			
			СтрокаДерева.Ссылка = СтрокаДерева.СсылкаВидОтчета;
			СтрокаДерева.ПолноеИмя = "Документ.РегламентированныйОтчет";
			МетаОтчет = Метаданные.Отчеты.Найти(СтрокаДерева.ИсточникОтчета);
			Если МетаОтчет <> Неопределено И МетаОтчет.ОсновнаяФорма <> Неопределено Тогда
				СтрокаДерева.Наименование = МетаОтчет.ОсновнаяФорма.Синоним;
			Иначе
				СтрокаДерева.Наименование = СтрокаДерева.НаименованиеОтчета;
			КонецЕсли;
			
			// Назначим категорию (имя группы родителя)
			Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
				СтрокаДерева.Категория = Узел.НаименованиеОтчета;
			КонецЕсли;
			
		Иначе
			
			СтрокаДерева.Наименование = СтрокаДерева.НаименованиеОтчета;
			
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьДеревоОтчетов(Узел = Неопределено)
	
	СтрокиДерева = Узел.Строки;
	
	КолСтрок = СтрокиДерева.Количество();
	
	Для Инд = 1 По КолСтрок Цикл
		
		ОбрИндекс = КолСтрок - Инд;
		СтрокаДерева = СтрокиДерева.Получить(ОбрИндекс);
		
		ОбработатьДеревоОтчетов(СтрокаДерева);
		
		// Удаляем пустую группу
		Если СтрокаДерева.ЭтоГруппа И СтрокаДерева.Строки.Количество() = 0 Тогда
			СтрокиДерева.Удалить(СтрокаДерева);
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДерева.ЭтоГруппа <> Истина Тогда
			
			СтрокаДерева.Получатель = Строка(СтрокаДерева.ТипПолучателя);
			
			СтрокаДерева.ИндексКартинки = 1;
			Если ЗначениеЗаполнено(СтрокаДерева.Ссылка) Тогда
				СтрокаДерева.ИндексКартинки = ?(СтрокаДерева.Ссылка.ПометкаУдаления, 3, 1);
			КонецЕсли;
			
			КоличествоЭлементовВДеревеОтчетов = КоличествоЭлементовВДеревеОтчетов + 1;
			
			СтрокаДерева.Пометка = 0;
		Иначе
			СтрокаДерева.ИндексКартинки = 0;
			Если ЗначениеЗаполнено(СтрокаДерева.Ссылка) Тогда
				СтрокаДерева.ИндексКартинки = ?(СтрокаДерева.Ссылка.ПометкаУдаления, 2, 0);
			КонецЕсли;
			СтрокаДерева.Пометка = -1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьДеревоОтчетовПоПолучателям(ДеревоВсехИспользуемыхОтчетов)
	
	ТаблицаГруппДляСортировки = Новый ТаблицаЗначений;
	ТаблицаГруппДляСортировки.Колонки.Добавить("Поиск",      Новый ОписаниеТипов("Строка"));
	ТаблицаГруппДляСортировки.Колонки.Добавить("Замена",     Новый ОписаниеТипов("Строка"));
	ТаблицаГруппДляСортировки.Колонки.Добавить("Сортировка", Новый ОписаниеТипов("Строка"));
	ТаблицаГруппДляСортировки.Колонки.Добавить("СтрокаВДереве");
	
	СтрокаТаблицы = ТаблицаГруппДляСортировки.Добавить();
	СтрокаТаблицы.Поиск = "ФНС";
	СтрокаТаблицы.Замена = "ФНС";
	СтрокаТаблицы.Сортировка = "001.ФНС";
	СтрокаТаблицы = ТаблицаГруппДляСортировки.Добавить();
	СтрокаТаблицы.Поиск = "ПФР";
	СтрокаТаблицы.Замена = "ПФР";
	СтрокаТаблицы.Сортировка = "002.ПФР";
	СтрокаТаблицы = ТаблицаГруппДляСортировки.Добавить();
	СтрокаТаблицы.Поиск = "ФСС";
	СтрокаТаблицы.Замена = "ФСС";
	СтрокаТаблицы.Сортировка = "003.ФСС";
	СтрокаТаблицы = ТаблицаГруппДляСортировки.Добавить();
	СтрокаТаблицы.Поиск = "Росстат";
	СтрокаТаблицы.Замена = "Росстат";
	СтрокаТаблицы.Сортировка = "004.Росстат";
	СтрокаТаблицы = ТаблицаГруппДляСортировки.Добавить();
	СтрокаТаблицы.Поиск = "Росалкогольрегулирование";
	СтрокаТаблицы.Замена = "ФСРАР";
	СтрокаТаблицы.Сортировка = "005.ФСРАР";
	СтрокаТаблицы = ТаблицаГруппДляСортировки.Добавить();
	СтрокаТаблицы.Поиск = "яяя";
	СтрокаТаблицы.Замена = "Другие получатели";
	СтрокаТаблицы.Сортировка = "яяя";
	
	ДеревоЗначенийДляСортировки = ДеревоВсехИспользуемыхОтчетов.Скопировать();
	ДеревоЗначенийДляСортировки.Строки.Очистить();
	
	ЗаполнитьДеревоЗначенийПоПолучателям(ДеревоВсехИспользуемыхОтчетов, ДеревоЗначенийДляСортировки);
	
	ВсеГруппыПолучателей = ДеревоЗначенийДляСортировки.Строки.НайтиСтроки(Новый Структура("ЭтоГруппа", Истина), Истина);
	
	Для каждого ГруппаПолучателя Из ВсеГруппыПолучателей Цикл
		НайденныеСтроки = ТаблицаГруппДляСортировки.НайтиСтроки(Новый Структура("Поиск", ГруппаПолучателя.Наименование));
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденныеСтроки[0].СтрокаВДереве = ГруппаПолучателя;
			ГруппаПолучателя.Наименование = НайденныеСтроки[0].Сортировка;
		КонецЕсли;
	КонецЦикла;
	
	ДеревоЗначенийДляСортировки.Строки.Сортировать("Наименование", Истина);
	
	Для каждого СтрокаТаблицыГруппа Из ТаблицаГруппДляСортировки Цикл
		Если СтрокаТаблицыГруппа.СтрокаВДереве <> Неопределено Тогда
			СтрокаТаблицыГруппа.СтрокаВДереве.Наименование = СтрокаТаблицыГруппа.Замена;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДеревоЗначенийДляСортировки;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьДеревоЗначенийПоПолучателям(Узел, ДеревоРезультата)
	
	СтрокиУзла = Узел.Строки;
	
	Для каждого СтрокаДерева Из СтрокиУзла Цикл
	
		ЗаполнитьДеревоЗначенийПоПолучателям(СтрокаДерева, ДеревоРезультата);
		
		Если СтрокаДерева.ЭтоГруппа <> Истина Тогда
			
			Получатель = ?(ЗначениеЗаполнено(СтрокаДерева.Получатель), СтрокаДерева.Получатель, "яяя");
			
			НайденныеГруппыПолучателя = ДеревоРезультата.Строки.НайтиСтроки(Новый Структура("Наименование,ЭтоГруппа", Получатель, Истина), Истина);
			Если НайденныеГруппыПолучателя.Количество() > 0 Тогда
				НайденнаяГруппаПолучателя = НайденныеГруппыПолучателя[0];
			Иначе
				НайденнаяГруппаПолучателя = ДеревоРезультата.Строки.Добавить();
				НайденнаяГруппаПолучателя.Наименование = Получатель;
				НайденнаяГруппаПолучателя.ЭтоГруппа = Истина;
				НайденнаяГруппаПолучателя.Пометка = -1;
			КонецЕсли;
			
			НоваяСтрокаДерева = НайденнаяГруппаПолучателя.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДерева, СтрокаДерева);
			
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьДеревоОтчетовБезГруппировки(ДеревоВсехИспользуемыхОтчетов)
	
	ДеревоЗначенийДляСортировки = ДеревоВсехИспользуемыхОтчетов.Скопировать();
	ДеревоЗначенийДляСортировки.Строки.Очистить();
	
	ЗаполнитьДеревоЗначенийБезГруппировки(ДеревоВсехИспользуемыхОтчетов, ДеревоЗначенийДляСортировки);
	
	ДеревоЗначенийДляСортировки.Строки.Сортировать("Наименование, Получатель", Истина);
	
	Возврат ДеревоЗначенийДляСортировки;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьДеревоЗначенийБезГруппировки(Узел, ДеревоРезультата)
	
	СтрокиУзла = Узел.Строки;
	
	Для каждого СтрокаДерева Из СтрокиУзла Цикл
	
		ЗаполнитьДеревоЗначенийБезГруппировки(СтрокаДерева, ДеревоРезультата);
		
		Если СтрокаДерева.ЭтоГруппа <> Истина Тогда
			
			НоваяСтрокаДерева = ДеревоРезультата.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДерева, СтрокаДерева);
			
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДеревоОтчетовИзДругогоДерева(ИсходноеДеревоОтчетов)
	
	ДеревоОтчетов.ПолучитьЭлементы().Очистить();
	
	КопироватьДанныеФормы(ИсходноеДеревоОтчетов, ДеревоОтчетов);
	
	ПроставитьПометкиИзбранного(ДеревоОтчетов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьПометкиИзбранного(Узел = Неопределено)
	
	ЭлементыУзла = Узел.ПолучитьЭлементы();
	
	Для каждого ЭлементУзла Из ЭлементыУзла Цикл
		
		ПроставитьПометкиИзбранного(ЭлементУзла);
		
		Если ЭлементУзла.ЭтоГруппа <> Истина Тогда
			
			НайденныеОтчеты = РанееСозданныеОтчеты.НайтиСтроки(Новый Структура("ПолноеИмя,Наименование", ЭлементУзла.ПолноеИмя, ЭлементУзла.Наименование));
			Для каждого НайденныйОтчет Из НайденныеОтчеты Цикл
				ЭлементУзла.Пометка = 1;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОтчетаНаКлиенте(ДанныеОтчета, ОрганизацияОтчета = Неопределено, 
					ДатаНачалаПериодаОтчета = Неопределено, ДатаОкончанияПериодаОтчета = Неопределено, 
					ПериодичностьОтчета = Неопределено, ЭтоВыбор = Ложь)
	
	ФормаОткрытаУспешно = Истина;
		
	ТекДанныеОтчета = Новый Структура("Наименование,ПолноеИмя,Ссылка");
	ЗаполнитьЗначенияСвойств(ТекДанныеОтчета, ДанныеОтчета);
	НаименованиеОтчета = ТекДанныеОтчета.Наименование;
	
		
	Если ДанныеОтчета.ПолноеИмя = "Документ.РегламентированныйОтчет" Тогда
		
		ИсточникОтчета = "";		
		РезультатОткрытияФормыНаСервере = ОткрытьФормуОтчетаНаСервере(ТекДанныеОтчета, ОрганизацияОтчета, 
													ДатаНачалаПериодаОтчета, ДатаОкончанияПериодаОтчета, 
													ПериодичностьОтчета, ИсточникОтчета);
		
		Если РезультатОткрытияФормыНаСервере = "Недостаточно прав" Тогда

			ПоказатьПредупреждение(, НСтр("ru='Недостаточно прав!'"));
			ФормаОткрытаУспешно = Ложь;
			
		ИначеЕсли РезультатОткрытияФормыНаСервере = "Отчет не найден" Тогда
			
			ПоказатьПредупреждение(, НСтр("ru='Отчет не найден!'"));
			ФормаОткрытаУспешно = Ложь;
			
		ИначеЕсли РезультатОткрытияФормыНаСервере = "Не удалось открыть отчет" Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не удалось открыть отчет!'");
			Сообщение.Сообщить();
			
			ФормаОткрытаУспешно = Ложь;
				
		ИначеЕсли РезультатОткрытияФормыНаСервере = "Открыть внутренний отчет-документ" Тогда
			
			Если ИсточникОтчета = "РегламентированныйОтчетРСВ1" Тогда
				
				ИмяФормыОтчета = "Документ." + ИсточникОтчета + ".Форма." + РегламентированнаяОтчетностьКлиентСерверПереопределяемый.ИмяОсновнойФормыРСВ1();
								
			Иначе
				
				ИмяФормыОтчета = "Документ." + ИсточникОтчета + ".Форма.ОсновнаяФорма";
								
			КонецЕсли;
			
		
		ИначеЕсли ТипЗнч(РезультатОткрытияФормыНаСервере) = Тип("Структура") Тогда
			
			ВариантОткрытия = ?(РезультатОткрытияФормыНаСервере.ВнешнийОтчетИспользовать, "ВнешнийОтчет.", "Отчет.");
			Если ИсточникОтчета = "РегламентированныйОтчетРСВ1" Тогда
				
				ИмяФормыОтчета = ВариантОткрытия + РезультатОткрытияФормыНаСервере.ИсточникОтчета + ".Форма." + 
					РегламентированнаяОтчетностьКлиентСерверПереопределяемый.ИмяОсновнойФормыРСВ1();
								
			Иначе
				
				ИмяФормыОтчета = ВариантОткрытия + РезультатОткрытияФормыНаСервере.ИсточникОтчета + ".Форма.ОсновнаяФорма";
								
			КонецЕсли;
		КонецЕсли;
				
	ИначеЕсли ЗначениеЗаполнено(ДанныеОтчета.Ссылка) Тогда
		
		ПараметрыОткрытияОтчета = СформироватьПараметрыОтчетаНаСервере(ТекДанныеОтчета, ОрганизацияОтчета, 
																		ДатаНачалаПериодаОтчета, ДатаОкончанияПериодаОтчета);
		ИмяФормыОтчета = ДанныеОтчета.ПолноеИмя + ".ФормаОбъекта";
				
	Иначе
		
		ИмяФормыОтчета = ДанныеОтчета.ПолноеИмя + ".ФормаОбъекта";
				
	КонецЕсли;
	
	Если ФормаОткрытаУспешно Тогда
		
		Если ЭтоВыбор Тогда
		
			ПараметрыВыбора = Новый Структура;
			ПараметрыВыбора.Вставить("Организация", ПараметрыФормы.Организация);
			ПараметрыВыбора.Вставить("ДатаНачалаПериодаОтчета", ПараметрыФормы.ДатаНачалаПериодаОтчета);
			ПараметрыВыбора.Вставить("ДатаКонцаПериодаОтчета", ПараметрыФормы.ДатаКонцаПериодаОтчета);
			ПараметрыВыбора.Вставить("ПредставлениеВидаОтчета",НаименованиеОтчета);
			ПараметрыВыбора.Вставить("ИмяФормы",ИмяФормыОтчета);
						
			ЭтаФорма.ВладелецФормы.ПараметрыВыбораФормыСоздания = ПараметрыВыбора;
			Закрыть();
		
		Иначе
			
			// Сначала попробуем найти его среди открытых стартовых форм.
			// Необходимо для предотвращения
			// открытия нескольких стартовых форм одного отчета.
			НайденоОкно = Ложь;
			РегламентированнаяОтчетностьКлиент.ВебКлиентНайтиАктивизироватьОкно(ИмяФормыОтчета, ЭтаФорма, НайденоОкно);
			
			Если НайденоОкно <> Неопределено Тогда
				Если НайденоОкно Тогда
				
					Возврат;
				
				КонецЕсли;
			КонецЕсли;
			
			Если ТипЗнч(РезультатОткрытияФормыНаСервере) = Тип("Структура") Тогда
		
				ОткрытьФорму(ИмяФормыОтчета, РезультатОткрытияФормыНаСервере, ЭтаФорма.ВладелецФормы, 
						ИмяФормыОтчета,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			Иначе
						
				ОткрытьФорму(ИмяФормыОтчета, , ЭтаФорма.ВладелецФормы, ИмяФормыОтчета,,,, 
						РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЕсли;
	
	Если ФормаОткрытаУспешно И ТипЗнч(ДанныеОтчета) <> Тип("Структура") Тогда
		
		ДобавитьОтчетВРанееОткрытыеВидыОтчетов();
				
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОткрытьФормуОтчетаНаСервере(Знач Отчет, ОрганизацияОтчета = Неопределено, ДатаНачалаПериодаОтчета = Неопределено, ДатаОкончанияПериодаОтчета = Неопределено, ПериодичностьОтчета = Неопределено, ИсточникОтчета)
	
	ИсточникОтчета = Отчет.Ссылка.ИсточникОтчета;
	
	ПравоДоступаКОтчету = РегламентированнаяОтчетностьВызовСервера.ПравоДоступаКРегламентированномуОтчету(ИсточникОтчета);
	
	Если ПравоДоступаКОтчету = Ложь Тогда
		Возврат "Недостаточно прав";
	ИначеЕсли ПравоДоступаКОтчету = Неопределено Тогда
		Возврат "Отчет не найден";
	КонецЕсли;
	
	Если Метаданные.Документы.Найти(ИсточникОтчета) <> Неопределено Тогда // это внутренний отчет-документ
		Возврат "Открыть внутренний отчет-документ";
	КонецЕсли;
	
	ТекОтчет = РегламентированнаяОтчетность.РеглОтчеты(ИсточникОтчета);
	Если ТекОтчет = Неопределено Тогда
		Возврат "Не удалось открыть отчет";
	КонецЕсли;
	
	ТекФорма = РегламентированнаяОтчетность.ФормаРеглОтчета(ИсточникОтчета);
	Если ТекФорма = Неопределено Тогда
		Возврат "Не удалось открыть отчет";
	КонецЕсли;
	
	ПараметрыТекФормы = Новый Структура;
	ПараметрыТекФормы.Вставить("Организация");
	ПараметрыТекФормы.Вставить("мДатаНачалаПериодаОтчета");
	ПараметрыТекФормы.Вставить("мДатаКонцаПериодаОтчета");
	ПараметрыТекФормы.Вставить("мПериодичность");
	
	ПараметрыТекФормы.Организация = ОрганизацияОтчета;
	
	Если ЗначениеЗаполнено(ДатаНачалаПериодаОтчета) ИЛИ ЗначениеЗаполнено(ДатаОкончанияПериодаОтчета) Тогда
		
		Попытка
			ПараметрыТекФормы.мДатаНачалаПериодаОтчета = НачалоДня(ДатаНачалаПериодаОтчета);
			ПараметрыТекФормы.мДатаКонцаПериодаОтчета = КонецДня(ДатаОкончанияПериодаОтчета);
		Исключение
		КонецПопытки;
		Если ПериодичностьОтчета <> Неопределено Тогда
			Попытка
				ПараметрыТекФормы.мПериодичность = ПериодичностьОтчета;
			Исключение
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыТекФормы.Вставить("ВнешнийОтчетИспользовать", Отчет.Ссылка.ВнешнийОтчетИспользовать);
	ПараметрыТекФормы.Вставить("ИсточникОтчета", ИсточникОтчета);
	
	Возврат ПараметрыТекФормы;
	
КонецФункции

&НаСервере
Функция СформироватьПараметрыОтчетаНаСервере(Знач Отчет, ОрганизацияОтчета = Неопределено, ДатаНачалаПериодаОтчета = Неопределено, ДатаОкончанияПериодаОтчета = Неопределено)
	
	ПараметрыОткрытия = Новый Структура;
	
	Если Отчет.ПолноеИмя = "Документ.УниверсальныйРегламентированныйОтчет" Тогда
	
		ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", Новый Структура);
		
		ПараметрыОткрытия.ЗначенияЗаполнения.Вставить("ВидОтчета", Отчет.Ссылка);
		
		Если ЗначениеЗаполнено(ОрганизацияОтчета) Тогда
			ПараметрыОткрытия.ЗначенияЗаполнения.Вставить("Организация" , ОрганизацияОтчета);
		КонецЕсли;
		
	Иначе
		
		ПараметрыОткрытия.Вставить("Организация" , ОрганизацияОтчета);
		
	КонецЕсли;
	
	Возврат ПараметрыОткрытия;
	
КонецФункции

&НаСервере
Процедура СохранитьНастройки()
	
	ХранилищеНастроекДанныхФорм.Сохранить(ЭтаФорма.ИмяФормы, "ФормаОтчетность_ФормаСозданияОтчета_ТекущаяСтраница", Элементы.ГруппаВидыСписков.ТекущаяСтраница.Имя);
	ХранилищеНастроекДанныхФорм.Сохранить(ЭтаФорма.ИмяФормы, "ФормаОтчетность_ФормаСозданияОтчета_ДеревоОтчетовГруппировка", ДеревоОтчетовГруппировка);
	ХранилищеНастроекДанныхФорм.Сохранить(ЭтаФорма.ИмяФормы, "ФормаОтчетность_ФормаСозданияОтчета_РанееСозданныеОтчеты", ДанныеФормыВЗначение(РанееСозданныеОтчеты, Тип("ТаблицаЗначений")));
	ХранилищеНастроекДанныхФорм.Сохранить(ЭтаФорма.ИмяФормы, "ФормаОтчетность_ФормаСозданияОтчета_РанееСозданныеОтчеты_ТекущаяСтрока", Элементы.СписокРанееСозданные.ТекущаяСтрока);
	ХранилищеНастроекДанныхФорм.Сохранить(ЭтаФорма.ИмяФормы, "ФормаОтчетность_ФормаСозданияОтчета_ДеревоОтчетов_ТекущаяСтрока", Элементы.ДеревоОтчетов.ТекущаяСтрока);
	
КонецПроцедуры
