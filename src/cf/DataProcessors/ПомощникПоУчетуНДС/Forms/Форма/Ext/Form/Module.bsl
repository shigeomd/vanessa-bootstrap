&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Организация") Тогда
		Объект.Организация = Параметры.Организация;	
	КонецЕсли; 
	
	Если Параметры.Свойство("Период") Тогда
		Объект.ПериодРегистрации = НачалоКвартала(Параметры.Период);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ПериодРегистрации) Тогда
		РабочаяДатаПользователя = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
		Если РабочаяДатаПользователя = НачалоДня(ТекущаяДатаСеанса()) Тогда
			Объект.ПериодРегистрации = НачалоКвартала(ТекущаяДатаСеанса() - 21*24*60*60);
		Иначе
			Объект.ПериодРегистрации = НачалоКвартала(РабочаяДатаПользователя);
		КонецЕсли;
	КонецЕсли;
	
	ПредставлениеПериодаРегистрации = ВыборПериодаКлиентСервер.ПолучитьПредставлениеПериодаОтчета(
		Перечисления.ДоступныеПериодыОтчета.Квартал, НачалоКвартала(Объект.ПериодРегистрации), КонецКвартала(Объект.ПериодРегистрации));
	
	ИспользуетсяПостановлениеНДС1137 = УчетНДСПереопределяемый.ИспользуетсяПостановлениеНДС1137(КонецКвартала(Объект.ПериодРегистрации));
	
	ЗаполнитьСписокОпераций();
	
	//Построение полного дерева операций
	ПолноеДерево = РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.ЗаполнитьЗначенияДереваОпераций();
	ПолноеДерево.Колонки.Добавить("Контроль", Новый ОписаниеТипов("Булево"));
	ПолноеДерево.Колонки.Добавить("Актуальна", Новый ОписаниеТипов("Булево"));
	ПолноеДерево.Колонки.Добавить("Выполнена", Новый ОписаниеТипов("Булево"));
	ПолноеДерево.Колонки.Добавить("СостояниеОпераций", Новый ОписаниеТипов("ТаблицаЗначений"));
	ЗначениеВРеквизитФормы(ПолноеДерево.Скопировать(,"Узел,Связи,Контроль, Актуальна, Выполнена, СостояниеОпераций"),"ПолноеДеревоОпераций");
	
	НастройкиПредупреждений = ОбщегоНазначенияБП.НастройкиПредупрежденийОбИзменениях("УведомитьОнеобходимостиПерепроведенияДокументов");
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "СостояниеРегламентнойОперации" 
		ИЛИ ТипЗнч(Параметр) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		
		ОбновитьСостоянияИЭлементыРегламентныхОпераций();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("УведомитьОнеобходимостиПерепроведенияДокументов", 0.60, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	УправлениеФормой();
		
КонецПроцедуры

&НаКлиенте
Процедура КонтрольПоследовательностиНажатие(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация)
		ИЛИ НЕ ЗначениеЗаполнено(Объект.ПериодРегистрации) Тогда
		Возврат;
	КонецЕсли;

	НомерМесяцаВКвартале = Число(Прав(Элемент.Имя, 1));
	ТекущийМесяц = ДобавитьМесяц(НачалоКвартала(Объект.ПериодРегистрации), НомерМесяцаВКвартале - 1);

	СписокКоманд = Новый СписокЗначений;
	
	СведенияОНарушении = СведенияОНарушенииПоследовательностиЗаМесяц(Объект.Организация, ТекущийМесяц);
	
	ДатаНачалаПерепроведения = СведенияОНарушении.Дата;
	МожноВыполнятьПерепроведение = Истина;
	
	Если ЗначениеЗаполнено(ДатаНачалаПерепроведения) Тогда

		Если ДатаНачалаПерепроведения < НачалоКвартала(Объект.ПериодРегистрации) Тогда

			СписокКоманд.Добавить("ПерейтиККварталу", 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Перейти к %1 г. для перепроведения с %2'"),
					Формат(ДатаНачалаПерепроведения, "ДФ='ММММ гггг'"),
					Формат(ДатаНачалаПерепроведения, "ДЛФ=Д")));

			МожноВыполнятьПерепроведение = Ложь;

		КонецЕсли;
		
	КонецЕсли;
	
	Если МожноВыполнятьПерепроведение Тогда
		СписокКоманд.Добавить("ПерепровестиДокументы", НСтр("ru = 'Выполнить операцию'"),, БиблиотекаКартинок.Провести);
	КонецЕсли;

	Если НЕ СведенияОНарушении["МесяцИсключенИзПерепроведения"] Тогда
		СписокКоманд.Добавить("ПропуститьПоследовательность", НСтр("ru = 'Пропустить операцию'"),, БиблиотекаКартинок.ОперацияПропущена);
	КонецЕсли;

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("НомерМесяцаВКвартале", 		НомерМесяцаВКвартале);
	ДополнительныеПараметры.Вставить("ДатаНачалаПерепроведения", 	ДатаНачалаПерепроведения);

	ОписаниеОповещения = Новый ОписаниеОповещения("КонтрольПоследовательностиНажатиеЗавершение", 
		ЭтотОбъект, ДополнительныеПараметры);

	ПоказатьВыборИзМеню(ОписаниеОповещения, СписокКоманд, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура РегламентнаяОперацияНажатие(Элемент)
	
	ОбработкаНажатияСсылки(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаРегистрацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыВыбора = Новый Структура("НачалоПериода,КонецПериода", 
		Объект.ПериодРегистрации, КонецКвартала(Объект.ПериодРегистрации));
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериодаКвартал", ПараметрыВыбора, Элементы.ПредставлениеПериодаРегистрации);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаРегистрацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИзменитьПериод(ВыбранноеЗначение.НачалоПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура УменьшитьПериод(Команда)
	
	ИзменитьПериод(НачалоКвартала(Объект.ПериодРегистрации - 1));
	
КонецПроцедуры

&НаКлиенте
Процедура УвеличитьПериод(Команда)
	
	ИзменитьПериод(КонецКвартала(Объект.ПериодРегистрации) + 1);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОпределитьНеобходимостьКонтроляОпераций()
	
	РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.ОпределитьНеобходимостьКонтроляОпераций(Объект.Организация, Объект.ПериодРегистрации, ПолноеДеревоОпераций);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыРегламентныхОпераций()
	
	УпрощенныйУчетНДС = УчетнаяПолитика.УпрощенныйУчетНДС(Объект.Организация, Объект.ПериодРегистрации);
	
	ВсеОперацииВыполнены = Истина;
	НеВыполненнаяОперация = Неопределено;
	
	ВсеОперацииАктуальны = Истина;
	НеАктуальнаяОперация = Неопределено;
	
	ИндексОшибочнойОперации = Неопределено;
	СтатусОперации = Неопределено;
	
	КоличествоОперацийОжидающихВыполнение = 0;
	
	Для Каждого СтрокаУзла ИЗ ПолноеДеревоОпераций Цикл
		
		РегламентнаяОперация = СтрокаУзла.Узел;
		НайденныеСтроки = ТаблицаОпераций.НайтиСтроки(Новый Структура("РегламентнаяОперация", РегламентнаяОперация));
		Если НЕ НайденныеСтроки.Количество() > 0 Тогда	
			Продолжить; 
		КонецЕсли;
		
		ТекущаяСтрока = НайденныеСтроки[0];
		Если Объект.ПериодРегистрации >= '20120101' Тогда
			Если РегламентнаяОперация = Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНаСуммовыеРазницы
				ИЛИ РегламентнаяОперация = Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж0 Тогда
				
				Элементы["Группа"+ТекущаяСтрока.ИмяОперации].Видимость = Ложь;
				
				Продолжить;
				
			КонецЕсли;
		КонецЕсли;
		
		ОтобразитьРегламентнуюОперацию(РегламентнаяОперация, ТекущаяСтрока.ИмяОперации, СтрокаУзла.Контроль, СтрокаУзла.Выполнена, СтрокаУзла.Актуальна);
		
		// Установка расшифровки для выполнения действия по умолчанию
		Если РегламентнаяОперация = Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНаАванс
			ИЛИ РегламентнаяОперация = Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНалоговогоАгента
			ИЛИ РегламентнаяОперация = Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНаСуммовыеРазницы Тогда 
			
			Если СтрокаУзла.Актуальна Тогда
				ТекущаяСтрока.Действие = "ОткрытьСписокДокументов";
			Иначе	
				ТекущаяСтрока.Действие = "ДокументВвести";
			КонецЕсли; 
			
		ИначеЕсли РегламентнаяОперация = Перечисления.РегламентныеОперации.ПереходНаРаздельныйУчетНДСНаСчете19
			ИЛИ РегламентнаяОперация = Перечисления.РегламентныеОперации.ОбработкаНомеровСчетовФактур Тогда
			
			Если СтрокаУзла.Выполнена Тогда
				ТекущаяСтрока.Действие = "ОткрытьСписокДокументов";
			Иначе
				ТекущаяСтрока.Действие = "ДокументВвести";
			КонецЕсли; 
			
		Иначе
			
			Если СтрокаУзла.Выполнена Тогда
				Если СтрокаУзла.СостояниеОпераций.Количество() > 1 Тогда
					ТекущаяСтрока.Действие = "ОткрытьСписокДокументов";
				ИначеЕсли ЗначениеЗаполнено(СтрокаУзла.СостояниеОпераций[0].Регистратор) Тогда
					ТекущаяСтрока.Действие = "ДокументОткрыть";
				Иначе
					ТекущаяСтрока.Действие = "ДокументВвести";
				КонецЕсли; 
			Иначе
				ТекущаяСтрока.Действие = "ДокументВвести";
			КонецЕсли; 
			
		КонецЕсли; 
		
		Если СтрокаУзла.Контроль И ВсеОперацииВыполнены И ВсеОперацииАктуальны Тогда
			ВсеОперацииВыполнены = ВсеОперацииВыполнены И (СтрокаУзла.Выполнена);
			ВсеОперацииАктуальны = ВсеОперацииАктуальны И (СтрокаУзла.Актуальна);
			КоличествоОперацийОжидающихВыполнение = КоличествоОперацийОжидающихВыполнение + 1;
			Если НЕ ВсеОперацииВыполнены Тогда
				НеВыполненнаяОперация = СтрокаУзла.Узел;
				ИндексОшибочнойОперации = ТекущаяСтрока.ИмяОперации;
				СтатусОперации = "НеВыполнена";
			ИначеЕсли НЕ ВсеОперацииАктуальны Тогда
				НеАктуальнаяОперация = СтрокаУзла.Узел;
				ИндексОшибочнойОперации = ТекущаяСтрока.ИмяОперации;
				СтатусОперации = "НеАктуальна";
			КонецЕсли;
		КонецЕсли; 
		
	КонецЦикла;
	
	ОтсутствуютОперацииОблагаемыеНДС = НЕ КоличествоОперацийОжидающихВыполнение > 0;
	
	Элементы.ГруппаИнформационноеСообщение.Видимость = Ложь;
	
	Если УпрощенныйУчетНДС Тогда
		
		Элементы.ГруппаИнформационноеСообщение.Видимость = Истина;
		ИнформационноеСообщение = НСтр("ru = 'Формирование регламентных операций не требуется'");
				
	ИначеЕсли ОтсутствуютОперацииОблагаемыеНДС и ЗначениеЗаполнено(Объект.Организация) Тогда
		
		Элементы.ГруппаИнформационноеСообщение.Видимость = Истина;
		ИнформационноеСообщение = НСтр("ru = 'Операции, облагаемые НДС, отсутствуют'");

	КонецЕсли;
	
	Если ИндексОшибочнойОперации <> Неопределено И НЕ СтатусОперации = Неопределено Тогда
		
		Если СтатусОперации = "НеВыполнена" Тогда
			Элементы["Статус"+ИндексОшибочнойОперации].Картинка = БиблиотекаКартинок.СтрелкаНаправоЖелтая;
			Элементы[ИндексОшибочнойОперации].ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
		ИначеЕсли СтатусОперации = "НеАктуальна" Тогда
			Элементы["Статус"+ИндексОшибочнойОперации].Картинка = БиблиотекаКартинок.ОперацияВыполненаУспешно;
			Элементы[ИндексОшибочнойОперации].ЦветТекста = WebЦвета.СероСиний;
		КонецЕсли;
		
	КонецЕсли; 
	
	ПараметрыДекларации = Новый Структура;
	ПараметрыДекларации.Вставить("ИсточникОтчета", "РегламентированныйОтчетНДС");
	ПараметрыДекларации.Вставить("ДатаНачала", Объект.ПериодРегистрации);
	ПараметрыДекларации.Вставить("ДатаОкончания", КонецКвартала(Объект.ПериодРегистрации));
	ПараметрыДекларации.Вставить("Организация", Объект.Организация);
	
	Декларация = ПолучитьСформированнуюДекларацию(ПараметрыДекларации);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостоянияИЭлементыРегламентныхОпераций()
	
	ОпределитьНеобходимостьКонтроляОпераций();
	РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.ОпределитьСостояниеОпераций(Объект.Организация, Объект.ПериодРегистрации, ПолноеДеревоОпераций);
	ОбновитьЭлементыРегламентныхОпераций();
		
КонецПроцедуры

&НаСервере
Процедура ВыполнитьДействияПоПереходуНаРаздельныйУчетНДСНаСчете19НаСервере()
	
	СообщенияОбОшибках = Неопределено;
	Обработки.ПомощникПоУчетуНДС.ОтменитьДействияПоПереходуНаРаздельныйУчетНДСНаСчете19(
		Объект.Организация, Объект.ПериодРегистрации, СообщенияОбОшибках);
	Если СообщенияОбОшибках <> Неопределено Тогда
		Для каждого СообщениеОбОшибке Из СообщенияОбОшибках Цикл
			СообщениеОбОшибке.ПутьКДанным = "Объект";
			СообщениеОбОшибке.Сообщить();
		КонецЦикла;
	Иначе
		Обработки.ПомощникПоУчетуНДС.ВыполнитьДействияПоПереходуНаРаздельныйУчетНДСНаСчете19(
			Объект.Организация, Объект.ПериодРегистрации);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОтменитьДействияПоПереходуНаРаздельныйУчетНДСНаСчете19НаСервере()
	
	СообщенияОбОшибках = Неопределено;
	Обработки.ПомощникПоУчетуНДС.ОтменитьДействияПоПереходуНаРаздельныйУчетНДСНаСчете19(
		Объект.Организация, Объект.ПериодРегистрации, СообщенияОбОшибках);
	Если СообщенияОбОшибках <> Неопределено Тогда
		Для каждого СообщениеОбОшибке Из СообщенияОбОшибках Цикл
			СообщениеОбОшибке.ПутьКДанным = "Объект";
			СообщениеОбОшибке.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСформированнуюДекларацию(Параметры)

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РегламентированныйОтчет.Ссылка
		|ИЗ
		|	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
		|ГДЕ
		|	РегламентированныйОтчет.ИсточникОтчета = &ИсточникОтчета
		|	И РегламентированныйОтчет.ДатаНачала МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И РегламентированныйОтчет.Организация = &Организация
		|	И НЕ РегламентированныйОтчет.ПометкаУдаления";

	Запрос.УстановитьПараметр("ИсточникОтчета",Параметры.ИсточникОтчета);	
	Запрос.УстановитьПараметр("ДатаНачала",Параметры.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",Параметры.ДатаОкончания);
	Запрос.УстановитьПараметр("Организация",Параметры.Организация);
	
	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
		
	КонецЕсли;
	
	Возврат Документы.РегламентированныйОтчет.ПустаяСсылка();
	
КонецФункции
 
&НаСервере
Процедура УправлениеВидимостьюЭлементов()
	
	Элементы.ГруппаКонтрольПоследовательности.Доступность = ЗначениеЗаполнено(Объект.Организация);
	Элементы.ГруппаРегламентныеОперации.Доступность       = ЗначениеЗаполнено(Объект.Организация);
	Элементы.ГруппаОтчетыИНалоговаяДекларация.Доступность = ЗначениеЗаполнено(Объект.Организация);

КонецПроцедуры
 
&НаКлиенте
Процедура ОбработкаВыбранногоДействия(ВыбранноеДействие, ИмяОперации, ОперацияСсылка, ДокументСсылка = Неопределено, ОпределитьНаличиеДокументов = Ложь)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",	 Объект.Организация);
	ПараметрыФормы.Вставить("НачалоПериода", Объект.ПериодРегистрации);
	ПараметрыФормы.Вставить("КонецПериода",  КонецКвартала(Объект.ПериодРегистрации));
	
	Если ВыбранноеДействие = "ДокументВвести" Тогда
		
		ВвестиДокумент(ОперацияСсылка, ИмяОперации, ОпределитьНаличиеДокументов, ПараметрыФормы);
		Возврат;
		
	ИначеЕсли ВыбранноеДействие = "ДокументОткрыть" И НЕ ДокументСсылка = Неопределено Тогда
		
		ПолноеИмяФормы = "Документ." + СтрЗаменить(ИмяОперации, "0", "") + ".ФормаОбъекта";
		ПараметрыЗаполнения = Новый Структура("Ключ", ДокументСсылка);
		
	ИначеЕсли ВыбранноеДействие = "ОткрытьОтчет" тогда
		
		Если ИмяОперации = "КнигаПокупок" Тогда
			
			ПолноеИмяФормы = "Отчет.КнигаПокупок.Форма.ФормаОтчета";
						
			ПараметрыЗаполнения	= Новый Структура("ПараметрыЗаполненияФормы", ПараметрыФормы);
			
		ИначеЕсли ИмяОперации = "КнигаПродаж" Тогда
			
			ПолноеИмяФормы = "Отчет.КнигаПродаж.Форма.ФормаОтчета";
						
			ПараметрыЗаполнения	= Новый Структура("ПараметрыЗаполненияФормы", ПараметрыФормы);
			
		ИначеЕсли ИмяОперации = "Декларация" Тогда
			ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", Объект.ПериодРегистрации);     
			ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета", КонецКвартала(Объект.ПериодРегистрации));     
			ПараметрыФормы.Вставить("мПериодичность", ПредопределенноеЗначение("Перечисление.Периодичность.Квартал"));
			ПараметрыФормы.Вставить("Ключ",Декларация);
			ПараметрыФормы.Вставить("мВыбраннаяФорма","ФормаОтчета2009Кв4");
			
			Если НЕ Декларация.Пустая() Тогда
				ПолноеИмяФормы = "Документ.РегламентированныйОтчет.ФормаОбъекта";	
			Иначе
				ПолноеИмяФормы = "Отчет.РегламентированныйОтчетНДС.Форма.ФормаОтчета2009Кв4";
			КонецЕсли;
			
			ПараметрыЗаполнения	= ПараметрыФормы;
			
		КонецЕсли; 
		
	ИначеЕсли ВыбранноеДействие = "ОткрытьЖурналУчетаСчетовФактур" Тогда
		
		ПолноеИмяФормы = "Отчет.ЖурналУчетаСчетовФактур.Форма.ФормаОтчета";
				
		ПараметрыЗаполнения	= Новый Структура("ПараметрыЗаполненияФормы", ПараметрыФормы);
		
	Иначе
		
		Если ВыбранноеДействие = "ОткрытьСписокСчетовФактур" тогда
			
			Если ИмяОперации = "КнигаПокупок" Тогда
				ПолноеИмяФормы = "Документ.СчетФактураПолученный.ФормаСписка";
			ИначеЕсли ИмяОперации = "КнигаПродаж" Тогда
				ПолноеИмяФормы = "Документ.СчетФактураВыданный.ФормаСписка";
			КонецЕсли;
			
		ИначеЕсли ВыбранноеДействие = "ОткрытьСписокДокументов" Тогда
			
			Если ИмяОперации = "ФормированиеЗаписейКнигиПокупок0" Тогда
				
				ПараметрыФормы.Вставить("ПредъявленНДСКВычету0", Истина); 
				ПолноеИмяФормы = "Документ.ФормированиеЗаписейКнигиПокупок.ФормаСписка";
				
			ИначеЕсли ИмяОперации = "ФормированиеЗаписейКнигиПокупок" Тогда
				
				ПараметрыФормы.Вставить("ПредъявленНДСКВычету0", Ложь); 
				ПолноеИмяФормы = "Документ.ФормированиеЗаписейКнигиПокупок.ФормаСписка";
				
			ИначеЕсли ИмяОперации = "ФормированиеЗаписейКнигиПродаж0" Тогда
				
				ПараметрыФормы.Вставить("Реализация0", Истина); 
				ПолноеИмяФормы = "Документ.ФормированиеЗаписейКнигиПродаж.ФормаСписка";
				
			ИначеЕсли ИмяОперации = "ФормированиеЗаписейКнигиПродаж" Тогда
				
				ПараметрыФормы.Вставить("Реализация0", Ложь); 
				ПолноеИмяФормы = "Документ.ФормированиеЗаписейКнигиПродаж.ФормаСписка";
				
			ИначеЕсли ИмяОперации = "РегистрацияСчетовФактурНаАванс" Тогда
				
				ПараметрыФормы.Вставить("ВидСчетаФактуры", ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыВыставленного.НаАванс")); 
				ПолноеИмяФормы = "Документ.СчетФактураВыданный.ФормаСписка";
				
			ИначеЕсли ИмяОперации = "РегистрацияСчетовФактурНалоговогоАгента" Тогда
				
				ПараметрыФормы.Вставить("ВидСчетаФактуры", ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыВыставленного.НалоговыйАгент")); 
				ПолноеИмяФормы = "Документ.СчетФактураВыданный.ФормаСписка";
				
			ИначеЕсли ИмяОперации = "РегистрацияСчетовФактурНаСуммовыеРазницы" Тогда
				
				ПараметрыФормы.Вставить("ВидСчетаФактуры", ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу")); 
				ПолноеИмяФормы = "Документ.СчетФактураВыданный.ФормаСписка";
				
			Иначе
				ПолноеИмяФормы = "Документ."+ИмяОперации + ".ФормаСписка";
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыЗаполнения = Новый Структура("Отбор", ПараметрыФормы);
		
	КонецЕсли; 
	
	ОткрытьФорму(ПолноеИмяФормы, ПараметрыЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбранногоДействияОбработкаНомеровСчетовФактур()
	
	СписокКоманд = Новый СписокЗначений;
	СписокКоманд.Добавить("ВыполнитьОперацию", НСтр("ru = 'Выполнить операцию'"),, БиблиотекаКартинок.Провести);
	СписокКоманд.Добавить("ПометитьКакВыполненную", НСтр("ru = 'Пометить операцию как выполненную'"),, БиблиотекаКартинок.Провести);
	
	ОповещениеВыбораИзМеню = Новый ОписаниеОповещения("ОбработкаВыбранногоДействияОбработкаНомеровСчетовФактурЗавершение", ЭтотОбъект);
	ПоказатьВыборИзМеню(ОповещениеВыбораИзМеню, СписокКоманд, Элементы.ОбработкаНомеровСчетовФактур);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбранногоДействияОбработкаНомеровСчетовФактурЗавершение(Команда, Параметры) Экспорт
	
	Если Команда <> Неопределено Тогда
		
		Если Команда.Значение = "ВыполнитьОперацию" Тогда
			
			// Перепроведение счетов-фактур
			ВыполнитьОбработкуНомеровСчетовФактур();
		
		КонецЕсли;
		
		ЗафиксироватьФактВыполненияРегламентнойОперации(Объект.ПериодРегистрации,
				Объект.Организация,
				Неопределено,
				ПредопределенноеЗначение("Перечисление.РегламентныеОперации.ОбработкаНомеровСчетовФактур"));
		
		ОбновитьСостоянияИЭлементыРегламентныхОпераций();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьОбработкуНомеровСчетовФактур()
	
	Обработки.ПомощникПоУчетуНДС.ВыполнитьОбработкуНомеровСчетовФактур(
		Объект.Организация, Объект.ПериодРегистрации);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбранногоДействияПереходНаРаздельныйУчетНДСНаСчете19()
	
	СписокКоманд = Новый СписокЗначений;
	СписокКоманд.Добавить("ВыполнитьОперацию", НСтр("ru = 'Выполнить операцию'"),, БиблиотекаКартинок.Провести);
	СписокКоманд.Добавить("ОтменитьОперацию",  НСтр("ru = 'Отменить операцию'"),, БиблиотекаКартинок.ОтменаПроведения);
	
	ОповещениеВыбораИзМеню = Новый ОписаниеОповещения("ДействияПоПереходуНаРаздельныйУчетНДСНаСчете19Завершение", ЭтотОбъект);
	ПоказатьВыборИзМеню(ОповещениеВыбораИзМеню, СписокКоманд, Элементы.ПереходНаРаздельныйУчетНДСНаСчете19);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияПоПереходуНаРаздельныйУчетНДСНаСчете19Завершение(Команда, Параметры) Экспорт
	
	Если Команда <> Неопределено Тогда
		
		Если Команда.Значение = "ВыполнитьОперацию" Тогда
			
			// Создание документов по переходу
			ВыполнитьДействияПоПереходуНаРаздельныйУчетНДСНаСчете19НаСервере();
			
		Иначе
			// Удаление документов по переходу
			ОтменитьДействияПоПереходуНаРаздельныйУчетНДСНаСчете19НаСервере();
			
		КонецЕсли;
		
		ОбновитьСостоянияИЭлементыРегламентныхОпераций();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиДокумент(РегламентнаяОперация, ИмяОперации, ОпределитьНаличиеДокументов, ПараметрыФормы)
	
	Если НЕ ЗначениеЗаполнено(РегламентнаяОперация) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяОперации = "РегистрацияСчетовФактурНаАванс" 
		ИЛИ ИмяОперации = "РегистрацияСчетовФактурНалоговогоАгента" 
		ИЛИ ИмяОперации = "РегистрацияСчетовФактурНаСуммовыеРазницы" Тогда		
		ПараметрыЗаполнения	= Новый Структура("ПараметрыЗаполненияФормы", ПараметрыФормы);
		ПолноеИмяФормы = "Обработка."+ИмяОперации+".Форма";
	Иначе
		
		Если ОпределитьНаличиеДокументов Тогда
			ДокументыПоОперацииЗаПериод = ПолучитьДокументыПоКодуОперации(Объект.Организация, Объект.ПериодРегистрации, РегламентнаяОперация, ИмяОперации);
			Если ДокументыПоОперацииЗаПериод.Количество() > 0 Тогда
				Если ДокументыПоОперацииЗаПериод.Количество() = 1 Тогда
					ОбработкаВыбранногоДействия("ДокументОткрыть", ИмяОперации, РегламентнаяОперация,ДокументыПоОперацииЗаПериод[0]);
					Возврат;
				Иначе 
					ОбработкаВыбранногоДействия("ОткрытьСписокДокументов", ИмяОперации, РегламентнаяОперация);
					Возврат;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
		
		ПараметрыФормы.Вставить("Дата",КонецКвартала(Объект.ПериодРегистрации));
		
		Если ИмяОперации = "РаспределениеНДС" Тогда
			ПараметрыФормы.Вставить("НачалоПериода",Объект.ПериодРегистрации); 
		ИначеЕсли ИмяОперации = "ВосстановлениеНДС" Тогда
			ПараметрыФормы.Вставить("ОтразитьВКнигеПродаж",Объект.ПериодРегистрации>='20070101');
		КонецЕсли;
		
		Если ИмяОперации = "ФормированиеЗаписейКнигиПокупок0" Тогда
			ПолноеИмяФормы = "Документ.ФормированиеЗаписейКнигиПокупок.ФормаОбъекта";
			ПараметрыФормы.Вставить("ПредъявленНДСКВычету0",Истина);
			ПараметрыЗаполнения	= Новый Структура("ПараметрыЗаполненияФормы", ПараметрыФормы);
		ИначеЕсли ИмяОперации = "ФормированиеЗаписейКнигиПродаж0" Тогда
			ПолноеИмяФормы = "Документ.ФормированиеЗаписейКнигиПродаж.ФормаОбъекта";
			ПараметрыФормы.Вставить("Реализация0",Истина);
			ПараметрыЗаполнения	= Новый Структура("ПараметрыЗаполненияФормы", ПараметрыФормы);
		Иначе
			ПараметрыЗаполнения	= Новый Структура("ПараметрыЗаполненияФормы", ПараметрыФормы);
			ПолноеИмяФормы = "Документ."+ИмяОперации+".ФормаОбъекта";
		КонецЕсли; 
		
	КонецЕсли;
	
	ОткрытьФорму(ПолноеИмяФормы, ПараметрыЗаполнения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДокументыПоКодуОперации(Организация, ПериодРегистрации, ОперацияСсылка, ИмяТекущейОперации)
	
	Если НЕ (ОперацияСсылка = Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНаАванс
		ИЛИ ОперацияСсылка = Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНалоговогоАгента
		ИЛИ ОперацияСсылка = Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНаСуммовыеРазницы) Тогда
		
		// Проверим наличие непроведенных документов за период
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Документы.Ссылка,
		|	Документы.Проведен КАК Проведен,
		|	Документы.ПометкаУдаления КАК ПометкаУдаления,
		|	Документы.Представление
		|ИЗ
		|	Документ.ФормированиеЗаписейКнигиПокупок КАК Документы
		|ГДЕ
		|	Документы.Организация = &Организация
		|	И Документы.Дата >= &НачалоПериода
		|	И Документы.Дата <= &КонецПериода
		|	И НЕ Документы.ПометкаУдаления
		| 	И &ДополнительноеУсловие
		|
		|УПОРЯДОЧИТЬ ПО
		|	Проведен УБЫВ,
		|	ПометкаУдаления,
		|	Документы.Дата";
		
		
		Если ОперацияСсылка = Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок0 Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительноеУсловие", "Документы.ПредъявленНДСКВычету0");
		ИначеЕсли ОперацияСсылка = Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительноеУсловие", "НЕ Документы.ПредъявленНДСКВычету0");
		ИначеЕсли ОперацияСсылка = Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж0 Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"ФормированиеЗаписейКнигиПокупок","ФормированиеЗаписейКнигиПродаж");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительноеУсловие", "Документы.Реализация0");
		ИначеЕсли ОперацияСсылка = Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"ФормированиеЗаписейКнигиПокупок","ФормированиеЗаписейКнигиПродаж");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительноеУсловие", "НЕ Документы.Реализация0");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"ФормированиеЗаписейКнигиПокупок",ИмяТекущейОперации);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительноеУсловие", "Истина"); 
		КонецЕсли; 
		
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("НачалоПериода", ПериодРегистрации);
		Запрос.УстановитьПараметр("КонецПериода", КонецКвартала(ПериодРегистрации));
		
		ДокументыПоОперацииЗаПериодРезультат = Запрос.Выполнить().Выгрузить();
		ДокументыПоОперацииЗаПериодРезультат.Колонки.Добавить("Использован", Новый ОписаниеТипов("Булево"));
	Иначе
		ДокументыПоОперацииЗаПериодРезультат = Новый ТаблицаЗначений();
		ДокументыПоОперацииЗаПериодРезультат.Колонки.Добавить("Ссылка");
	КонецЕсли;
	
	Возврат ДокументыПоОперацииЗаПериодРезультат.ВыгрузитьКолонку("Ссылка");
	
КонецФункции // ПолучитьДокументыПоКодуОперации()

&НаСервере
Процедура ОтобразитьРегламентнуюОперацию(РегламентнаяОперация, ИмяОперации, КонтролироватьОперацию, ОперацияВыполнена, ОперацияАктуальна)
	
	Элементы.СтатусДекларация.Картинка = Новый Картинка();
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		
		Элементы["Группа"+ИмяОперации].Видимость = Истина;
		
		Элементы["Статус"+ИмяОперации].Картинка = Новый Картинка();

		Элементы[ИмяОперации].ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ОперацияВыполнена Тогда
		Если КонтролироватьОперацию Тогда
			
			Элементы["Группа"+ИмяОперации].Видимость = Истина;
			
			Элементы["Статус"+ИмяОперации].Картинка = Новый Картинка();
			
			Элементы[ИмяОперации].ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
			
		Иначе
			
			Элементы["Группа"+ИмяОперации].Видимость = Ложь;
			
		КонецЕсли;
	ИначеЕсли ОперацияАктуальна Тогда
		
		Элементы["Группа"+ИмяОперации].Видимость = Истина;
		
		Элементы["Статус"+ИмяОперации].Картинка = БиблиотекаКартинок.ОперацияВыполненаУспешно;
		
		Элементы[ИмяОперации].ЦветТекста = WebЦвета.Зеленый;
		
	Иначе
		
		Элементы["Группа"+ИмяОперации].Видимость = Истина;
		
		Элементы["Статус"+ИмяОперации].Картинка = БиблиотекаКартинок.ОперацияВыполненаУспешно;
		
		Элементы[ИмяОперации].ЦветТекста = WebЦвета.СероСиний;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНажатияСсылки(ИмяОперации)
	
	НайденныеСтроки = ТаблицаОпераций.НайтиСтроки(Новый Структура("ИмяОперации", ИмяОперации));
	
	Если НЕ НайденныеСтроки.Количество() > 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекущаяСтрока = НайденныеСтроки[0];
	
	Если ТекущаяСтрока.ИмяОперации = "КнигаПокупок" 
		ИЛИ ТекущаяСтрока.ИмяОперации = "КнигаПродаж" 
		ИЛИ ТекущаяСтрока.ИмяОперации = "Декларация" Тогда 
		
		ОбработкаВыбранногоДействия("ОткрытьОтчет", ТекущаяСтрока.ИмяОперации, Неопределено);
		
		Возврат;
		
	КонецЕсли;
	
	Если ТекущаяСтрока.ИмяОперации = "ЖурналУчетаСчетовФактур" Тогда  
		
		ОбработкаВыбранногоДействия("ОткрытьЖурналУчетаСчетовФактур", ТекущаяСтрока.ИмяОперации, Неопределено);
		
	КонецЕсли; 
	
	Если ТекущаяСтрока.ИмяОперации = "ПереходНаРаздельныйУчетНДСНаСчете19" Тогда
	
		ОбработкаВыбранногоДействияПереходНаРаздельныйУчетНДСНаСчете19();
		Возврат;
		
	КонецЕсли;
	
	Если ТекущаяСтрока.ИмяОперации = "ОбработкаНомеровСчетовФактур" Тогда
	
		ОбработкаВыбранногоДействияОбработкаНомеровСчетовФактур();
		Возврат;
		
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.РегламентнаяОперация) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Действие) Тогда
		НайденныеСтроки = ПолноеДеревоОпераций.НайтиСтроки(Новый Структура("Узел", ТекущаяСтрока.РегламентнаяОперация));
		ДокументОперации = Неопределено;
		Если НайденныеСтроки.Количество() > 0
			И ЗначениеЗаполнено(НайденныеСтроки[0].СостояниеОпераций)
			И НайденныеСтроки[0].СостояниеОпераций.Количество() > 0 Тогда
			ДокументОперации = НайденныеСтроки[0].СостояниеОпераций[0].Регистратор;
		КонецЕсли;
		
		СписокКоманд = Новый СписокЗначений;
		СписокКоманд.Добавить("ОткрытьОперацию", НСтр("ru = 'Открыть операцию'"));
		Если НайденныеСтроки[0].Выполнена Тогда
			СписокКоманд.Добавить("ОтменитьВыполнение", НСтр("ru = 'Снять отметку о выполнении'"));
		Иначе
			СписокКоманд.Добавить("ПометитьКакВыполненную", НСтр("ru = 'Пометить как выполненную'"));
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ТекущаяСтрока", ТекущаяСтрока);
		ДополнительныеПараметры.Вставить("ДокументОперации", ДокументОперации);
		ОповещениеВыбораИзМеню = Новый ОписаниеОповещения("ОткрытьПометитьОперациюЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВыборИзМеню(ОповещениеВыбораИзМеню, СписокКоманд, Элементы[ИмяОперации]);
		
	Иначе
		
		МенюРасшифровки = Новый СписокЗначений();
		ЕстьЗаписиОВыполнении = Ложь;
		
		Если ТекущаяСтрока.ИмяОперации = "РегистрацияСчетовФактурНаАванс"
			ИЛИ ТекущаяСтрока.ИмяОперации = "РегистрацияСчетовФактурНалоговогоАгента"
			ИЛИ ТекущаяСтрока.ИмяОперации = "РегистрацияСчетовФактурНаСуммовыеРазницы" Тогда
			
			ОбработкаВыбранногоДействия("ДокументВвести", ТекущаяСтрока.ИмяОперации, Неопределено,Ложь);
			
		Иначе
			
			Если ПолноеДеревоОпераций.НайтиСтроки(Новый Структура("Узел, Контроль", ТекущаяСтрока.РегламентнаяОперация, Истина)).Количество()>0 Тогда
				МенюРасшифровки.Добавить("ДокументВвести", "Ввести новый документ");
			КонецЕсли;
			
			МенюРасшифровки.Добавить("ОткрытьСписокДокументов", "Открыть список документов");
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ТекущаяСтрока", ТекущаяСтрока);
			ДополнительныеПараметры.Вставить("НайденныеСтроки", НайденныеСтроки);
			ОповещениеВыбораИзМеню = Новый ОписаниеОповещения("ВыбратьРасшифровкуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВыборИзМеню(ОповещениеВыбораИзМеню, МенюРасшифровки, ТекущаяСтрока.Действие);
		КонецЕсли;
		
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПометитьОперациюЗавершение(Команда, ДополнительныеПараметры) Экспорт
	
	Если Команда = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ДополнительныеПараметры.ТекущаяСтрока;
	ДокументОперации = ДополнительныеПараметры.ДокументОперации;
	
	Если Команда.Значение = "ОткрытьОперацию" Тогда
		
		ОбработкаВыбранногоДействия(ТекущаяСтрока.Действие, ТекущаяСтрока.ИмяОперации, ТекущаяСтрока.РегламентнаяОперация, 
			ДокументОперации, Истина);
		
	ИначеЕсли Команда.Значение = "ПометитьКакВыполненную" Тогда
		
		Если НЕ ЗначениеЗаполнено(ДокументОперации) Тогда
			МассивДокументов = ПолучитьДокументыПоКодуОперации(Объект.Организация, Объект.ПериодРегистрации, ТекущаяСтрока.РегламентнаяОперация, ТекущаяСтрока.ИмяОперации);
			Если МассивДокументов.Количество() > 0 Тогда
				ДокументОперации = МассивДокументов[0];
			КонецЕсли;
		КонецЕсли;
		
		ЗафиксироватьФактВыполненияРегламентнойОперации(Объект.ПериодРегистрации,
			Объект.Организация,
			ДокументОперации,
			ТекущаяСтрока.РегламентнаяОперация)
		
	ИначеЕсли Команда.Значение = "ОтменитьВыполнение" Тогда
		УдалитьФактВыполненияРегламентнойОперации(Объект.ПериодРегистрации,
			Объект.Организация,
			ДокументОперации,
			ТекущаяСтрока.РегламентнаяОперация)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьРасшифровкуЗавершение(ЭлементКВыбору, ДополнительныеПараметры) Экспорт
	
	Если НЕ ЭлементКВыбору = Неопределено Тогда
		
		ТекущаяСтрока = ДополнительныеПараметры.ТекущаяСтрока;
		НайденныеСтроки = ДополнительныеПараметры.НайденныеСтроки;
		
		ОбработкаВыбранногоДействия(ЭлементКВыбору.Значение, ТекущаяСтрока.ИмяОперации, ТекущаяСтрока.РегламентнаяОперация, 
			?(НайденныеСтроки.Количество() = 0, Неопределено, НайденныеСтроки[0].Регистратор));
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСписокОпераций()
	
	ТаблицаОпераций.Очистить();
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.ОбработкаНомеровСчетовФактур;
	СтрокаТаблицы.ИмяОперации = "ОбработкаНомеровСчетовФактур";
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.ПереходНаРаздельныйУчетНДСНаСчете19;
	СтрокаТаблицы.ИмяОперации = "ПереходНаРаздельныйУчетНДСНаСчете19";
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.ИмяОперации = "НачислениеНДСпоСМРхозспособом";
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.НачислениеНДСпоСМРхозспособом;
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.РаспределениеНДС;
	СтрокаТаблицы.ИмяОперации = "РаспределениеНДС";
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.ВосстановлениеНДС;
	СтрокаТаблицы.ИмяОперации = "ВосстановлениеНДС";
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок;
	СтрокаТаблицы.ИмяОперации = "ФормированиеЗаписейКнигиПокупок";
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок0;
	СтрокаТаблицы.ИмяОперации = "ФормированиеЗаписейКнигиПокупок0";
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.ПустаяСсылка();
	СтрокаТаблицы.ИмяОперации = "КнигаПокупок";
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНаАванс;
	СтрокаТаблицы.ИмяОперации = "РегистрацияСчетовФактурНаАванс";
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНалоговогоАгента;
	СтрокаТаблицы.ИмяОперации = "РегистрацияСчетовФактурНалоговогоАгента";
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.ПодтверждениеНулевойСтавкиНДС;
	СтрокаТаблицы.ИмяОперации = "ПодтверждениеНулевойСтавкиНДС";
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.ПодтверждениеОплатыНДСВБюджет;
	СтрокаТаблицы.ИмяОперации = "ПодтверждениеОплатыНДСВБюджет";
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.ВосстановлениеНДСПоОбъектамНедвижимости;
	СтрокаТаблицы.ИмяОперации = "ВосстановлениеНДСПоОбъектамНедвижимости";
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж;
	СтрокаТаблицы.ИмяОперации = "ФормированиеЗаписейКнигиПродаж";
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.ПустаяСсылка();
	СтрокаТаблицы.ИмяОперации = "КнигаПродаж";
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.ПустаяСсылка();
	СтрокаТаблицы.ИмяОперации = "Декларация";
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНаСуммовыеРазницы;
	СтрокаТаблицы.ИмяОперации = "РегистрацияСчетовФактурНаСуммовыеРазницы";
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж0;
	СтрокаТаблицы.ИмяОперации = "ФормированиеЗаписейКнигиПродаж0";
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.ПустаяСсылка();
	СтрокаТаблицы.ИмяОперации = "ЖурналУчетаСчетовФактур";
	
КонецФункции // ЗаполнитьСписокОпераций()

&НаСервере
Процедура УправлениеФормой()
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрОрганизацияФункциональныхОпцийФормы(
		ЭтаФорма,
		Объект.Организация,
		КонецКвартала(Объект.ПериодРегистрации));
	
	ОпределитьНеобходимостьКонтроляОпераций();
	ОбновитьЭлементыРегламентныхОпераций();
	УправлениеВидимостьюЭлементов();
	
	ПроверитьПоследовательность();
	
КонецПроцедуры 

&НаСервере
Процедура ЗафиксироватьФактВыполненияРегламентнойОперации(ПериодРегистрации,
														  Организация,
														  Регистратор,
														  РегламентнаяОперация,
														  Актуальность = Истина)
	
	РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.ЗафиксироватьФактВыполненияРегламентнойОперации(ПериодРегистрации,
		Организация,
		Регистратор,
		РегламентнаяОперация,
		Актуальность = Истина);
																									  
	ОбновитьСостоянияИЭлементыРегламентныхОпераций();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьФактВыполненияРегламентнойОперации(ПериодРегистрации,
													Организация,
													Регистратор,
													РегламентнаяОперация)
	
	РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.УдалитьФактВыполненияРегламентнойОперации(ПериодРегистрации,
		Организация,
		Регистратор,
		РегламентнаяОперация);
																									  
	ОбновитьСостоянияИЭлементыРегламентныхОпераций();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыКонтроляПоследовательности(НомерМесяцаВКвартале, МесяцИсключенИзПерепроведения, ПоследовательностьНарушена, ТекстНадписи)

	ЭлементСтатус 	= Элементы["СтатусКонтрольПоследовательности" + НомерМесяцаВКвартале];
	ЭлементКонтроль = Элементы["КонтрольПоследовательности" + НомерМесяцаВКвартале];

	ЭлементКонтроль.Заголовок = ТекстНадписи;

	Если МесяцИсключенИзПерепроведения Тогда
		ЭлементСтатус.Картинка 		= БиблиотекаКартинок.ОперацияПропущена;
		ЭлементКонтроль.ЦветТекста 	= ЦветаСтиля.ЦветТекстаФормы;
	
	ИначеЕсли ПоследовательностьНарушена Тогда
		ЭлементСтатус.Картинка 		= БиблиотекаКартинок.ОперациюНеобходимоПовторить;
		ЭлементКонтроль.ЦветТекста 	= WebЦвета.СероСиний;
	
	Иначе
		ЭлементСтатус.Картинка 		= БиблиотекаКартинок.ОперацияВыполненаУспешно;
		ЭлементКонтроль.ЦветТекста 	= WebЦвета.Зеленый;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонтрольПоследовательностиНажатиеЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт

	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ВыбранныйЭлемент.Значение = "ПерепровестиДокументы" Тогда
	
		Если ЗначениеЗаполнено(ДополнительныеПараметры.ДатаНачалаПерепроведения) Тогда
			ТекущийМесяц = ДобавитьМесяц(НачалоКвартала(Объект.ПериодРегистрации), ДополнительныеПараметры.НомерМесяцаВКвартале - 1);
			Если ДополнительныеПараметры.ДатаНачалаПерепроведения < ТекущийМесяц Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Сначала выполните перепроведение документов за %1 г.'"),
					Формат(ДополнительныеПараметры.ДатаНачалаПерепроведения, "ДФ='ММММ гггг'"));
				
				ПоказатьПредупреждение(, ТекстСообщения);
				Возврат;
			КонецЕсли;
		КонецЕсли;
	
		ПерепровестиДокументы(ДополнительныеПараметры.НомерМесяцаВКвартале);
	
	ИначеЕсли ВыбранныйЭлемент.Значение = "ПропуститьПоследовательность" Тогда
	
		ПропуститьПоследовательность(ДополнительныеПараметры.НомерМесяцаВКвартале);
	                                              
	ИначеЕсли ВыбранныйЭлемент.Значение = "ПерейтиККварталу" Тогда
	
		ПерейтиККварталу(ДополнительныеПараметры.ДатаНачалаПерепроведения);
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПерепровестиДокументы(НомерМесяцаВКвартале)
	
	ИБФайловая = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая;
	Результат  = ЗапуститьПерепроведениеДокументов(НомерМесяцаВКвартале, ИБФайловая);
	
	Если Результат <> Неопределено Тогда
		// Результат получен и уже обработан на стороне сервера
		ОбработатьЗавершениеДлительнойОперацииНаКлиенте(Результат);
		
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		// Результата еще нет, но есть шансы дождаться
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("ПроверитьЗавершениеДлительнойОперации", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗапуститьПерепроведениеДокументов(НомерМесяцаВКвартале, ИБФайловая)
	
	Если НЕ ИБФайловая Тогда
		// Возможно, что фоновое задание было запущено раньше, 
		// пользователь дал команду его отменить, однако задание не отменено.
		// В таком случае не следует запускать задание повторно - следует дождаться его выполнения.
		// Мы можем отследить ситуацию только, если все это происходит в одной форме.
		// Потому что подсистема ДлительныеОперации не умеет устанавливать ключ фонового задания.
		Если ЗакрытиеМесяца.ЗаданиеЕщеВыполняется(ИдентификаторЗадания) Тогда
			// Надо ждать
			Возврат Неопределено;
		КонецЕсли;
	Конецесли;

	ИдентификаторЗадания = Неопределено;

	ТекущийМесяц = ДобавитьМесяц(НачалоКвартала(Объект.ПериодРегистрации), НомерМесяцаВКвартале - 1);

	// Снимем отметку об исключении месяца из перепроведения. 
	// Управление исключенными из перепроведения месяцами выполняется только интерактивно пользователем
	// из обработки "Закрытия месяца" и "Помощника по учету НДС".
	// При вызове группового перепроведения из раздела "Администрирование" этот регистр не меняется.
	РегистрыСведений.ИсключенныеИзПерепроведенияМесяцы.УдалитьЗапись(Объект.Организация, ТекущийМесяц);

	МоментНарушения = РаботаСПоследовательностями.МоментНачалаПерепроведенияСУчетомИсключенныхМесяцев(
		Объект.Организация, КонецМесяца(ТекущийМесяц));

	Если МоментНарушения = Неопределено Тогда
		// Последовательность не нарушена. Восстанавливать ее не требуется.
		Результат = Новый Структура();
		Результат.Вставить("ПоследовательностьВосстановлена",	Истина);
		
		// Обозначим состояние последовательности на форме как ненарушенное.
		ПроверитьПоследовательность();
		
		Возврат Результат;
	КонецЕсли;
	
	// Подготовка параметров для группового перепроведения
	ПараметрыПерепроведения 								= Обработки.ГрупповоеПерепроведениеДокументов.ПараметрыПерепроведения();
	ПараметрыПерепроведения.Организация 					= Объект.Организация;
	ПараметрыПерепроведения.УникальныйИдентификаторФормы 	= УникальныйИдентификатор;
	ПараметрыПерепроведения.МоментНачала					= МоментНарушения;
	ПараметрыПерепроведения.ДатаОкончания					= КонецМесяца(ТекущийМесяц);
	ПараметрыПерепроведения.ЭтоПомощникПоУчетуНДС			= Истина;
	
	Результат =	Обработки.ГрупповоеПерепроведениеДокументов.ЗапуститьПерепроведение(ПараметрыПерепроведения);
		
	Если Результат = Неопределено Тогда
		Результат = Новый Структура();
		Результат.Вставить("ПоказатьПредупреждение", НСтр("ru = 'Перепроведение уже выполняется другим пользователем либо открыта для редактирования форма организации.'"));
		Возврат Результат;
	КонецЕсли;
		
	АдресХранилища       = Результат.АдресХранилища;
	ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		
	Если Не Результат.ЗаданиеВыполнено Тогда
		// Надо ждать
		Возврат Неопределено;
	Иначе
		// Задание выполнено.
		// Результат выполнения возвращен через хранилище значения.
		// Загрузим его в форму и передадим данные на клиент.
		
		Возврат ОбновитьДанныеПоРезультатуДлительнойОперации();
	
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(Знач ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура ПроверитьЗавершениеДлительнойОперации()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			ОбработатьЗавершениеДлительнойОперацииНаКлиенте(ОбновитьДанныеПоРезультатуДлительнойОперации());
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"ПроверитьЗавершениеДлительнойОперации",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал,
				Истина);
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ОбновитьДанныеПоРезультатуДлительнойОперации()
	
	// Результат закрытия подготовлен в 
	// Обработки.ГрупповоеПерепроведениеДокументов.ПерепроведениеДокументов()
	// Сообщения об ошибках могут храниться в фоновом задании
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РезультатДляКлиента = Новый Структура;
	
	Если Результат.Свойство("ПоследовательностьВосстановлена")  Тогда

		// Окончание группового перепроведения, разблокируем захваченную организацию.
		// Она блокируется при старте группового перепроведения в привязке к идентификатору формы,
		// из которой вызывано перепроведение.
		Обработки.ГрупповоеПерепроведениеДокументов.ПослеОкончанияПерепроведения(УникальныйИдентификатор);

		РезультатДляКлиента.Вставить("ПоследовательностьВосстановлена", Результат.ПоследовательностьВосстановлена);
		
		Если Результат.Свойство("АдресХранилищаСОшибками") Тогда
			РезультатДляКлиента.Вставить("АдресХранилищаСОшибками", Результат.АдресХранилищаСОшибками);
		КонецЕсли;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	// Обновим состояние формы.
	УправлениеФормой();
	
	Возврат РезультатДляКлиента;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьЗавершениеДлительнойОперацииНаКлиенте(Результат)
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// "Результат" - структура, содержит ключи
	// - ПоследовательностьВосстановлена     - (опционально)
	// - ПоказатьПредупреждение - (опционально) - текст предупреждения

	Если Результат.Свойство("ПоследовательностьВосстановлена") Тогда
		ОбработатьРезультатПерепроведенияДокументовНаКлиенте(Результат);
	КонецЕсли;

	Если Результат.Свойство("ПоказатьПредупреждение") Тогда
		ПоказатьПредупреждение(, Результат.ПоказатьПредупреждение);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатПерепроведенияДокументовНаКлиенте(РезультатПерепроведения)

	// Если выполняется в рамках общего закрытия месяца, то запустим следующие операции.
	ПоследовательностьВосстановлена	= Ложь;
	АдресХранилищаСОшибками 		= "";
	
	Если ТипЗнч(РезультатПерепроведения) = Тип("Структура") Тогда
		
		Если РезультатПерепроведения.Свойство("ПоследовательностьВосстановлена") Тогда
			ПоследовательностьВосстановлена = РезультатПерепроведения.ПоследовательностьВосстановлена;
		КонецЕсли;

		Если РезультатПерепроведения.Свойство("АдресХранилищаСОшибками") Тогда
			АдресХранилищаСОшибками = РезультатПерепроведения.АдресХранилищаСОшибками;
		КонецЕсли;

	КонецЕсли;

	// Отображаем отчет с ошибками перепроведения.
	Если НЕ ПоследовательностьВосстановлена Тогда
		ОбщегоНазначенияБПКлиент.ОткрытьФормуОшибокПерепроведения(ЭтотОбъект, АдресХранилищаСОшибками);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверитьПоследовательность()

	ПоследовательностьНарушена = Ложь;

	СведенияОНарушении = СведенияОНарушенииПоследовательностиЗаКвартал(Объект.Организация, Объект.ПериодРегистрации);
	
	ТекущийМесяц = НачалоКвартала(Объект.ПериодРегистрации);
	ПредыдущаяДатаНачалаПерепроведения = Неопределено;
		
	Для НомерМесяцаВКвартале = 1 По 3 Цикл
		
		ДатаНачалаПерепроведения = СведенияОНарушении["Дата" + НомерМесяцаВКвартале];
	
		ТекстНадписи = "";
		Если ЗначениеЗаполнено(ДатаНачалаПерепроведения)
			И ПредыдущаяДатаНачалаПерепроведения <> ДатаНачалаПерепроведения
			И (ДатаНачалаПерепроведения >= ТекущийМесяц 
					И ДатаНачалаПерепроведения <= КонецМесяца(ТекущийМесяц)
				ИЛИ ДатаНачалаПерепроведения < НачалоКвартала(Объект.ПериодРегистрации)) Тогда
		
			// Нарушение в месяце из прошлых кварталов, текущий квартал надо перепроводить целиком.
			ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 (начиная с %2)'"),
				НРег(Формат(ТекущийМесяц, "ДФ=ММММ")),
				Формат(ДатаНачалаПерепроведения, "ДЛФ=Д"));
		
		Иначе
			// Нарушения в текущем месяце нет либо требуется перепроводить весь месяц.
			ТекстНадписи = НРег(Формат(ТекущийМесяц, "ДФ=ММММ"));
		КонецЕсли;
		
		МесяцИсключенИзПерепроведения = СведенияОНарушении["Месяц" + НомерМесяцаВКвартале + "ИсключенИзПерепроведения"];
		
		Если МесяцИсключенИзПерепроведения Тогда
			ПоследовательностьНарушена = Ложь;
		Иначе
			ПоследовательностьНарушена = ПоследовательностьНарушена
				ИЛИ ЗначениеЗаполнено(ДатаНачалаПерепроведения);
		КонецЕсли;
		
		ПредыдущаяДатаНачалаПерепроведения = ДатаНачалаПерепроведения;
		
		ОбновитьЭлементыКонтроляПоследовательности(НомерМесяцаВКвартале, 
			МесяцИсключенИзПерепроведения,
			ПоследовательностьНарушена,
			ТекстНадписи);

		ТекущийМесяц = КонецМесяца(ТекущийМесяц) + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПропуститьПоследовательность(НомерМесяцаВКвартале)

	РегистрыСведений.ИсключенныеИзПерепроведенияМесяцы.ДобавитьЗапись(
		Объект.Организация, 
		ДобавитьМесяц(НачалоКвартала(Объект.ПериодРегистрации), НомерМесяцаВКвартале - 1));

	// Отобразим на форме факт пропуска
	ПроверитьПоследовательность();

КонецПроцедуры

&НаСервереБезКонтекста
Функция СведенияОНарушенииПоследовательностиЗаМесяц(Знач Организация, Знач ПериодРегистрации)

	Результат = Новый Структура();
	Результат.Вставить("Дата", 						 	Неопределено);
	Результат.Вставить("МесяцИсключенИзПерепроведения", Ложь);
	
	Результат.МесяцИсключенИзПерепроведения = РегистрыСведений.ИсключенныеИзПерепроведенияМесяцы.МесяцИсключенИзПерепроведения(
		Организация, НачалоМесяца(ПериодРегистрации));
	
	// Если текущий месяц исключен из перепроведения, то получим дату нарушения 
	// как если бы по состоянию на конец прошлого месяца, чтобы если пользователь
	// решит все-таки за текущий месяц выполнить перепроведение, то мы могли бы 
	// указать, с какой даты требуется перепроводить.
		
	Если Результат.МесяцИсключенИзПерепроведения Тогда
		МоментНарушения = РаботаСПоследовательностями.МоментНачалаПерепроведенияСУчетомИсключенныхМесяцев(
			Организация, НачалоМесяца(ПериодРегистрации) - 1);
	Иначе
		МоментНарушения = РаботаСПоследовательностями.МоментНачалаПерепроведенияСУчетомИсключенныхМесяцев(
			Организация, КонецМесяца(ПериодРегистрации));
	КонецЕсли;

	Если МоментНарушения <> Неопределено Тогда
		Результат.Дата = МоментНарушения.Дата;
	КонецЕсли;

	Возврат Результат;

КонецФункции

&НаСервереБезКонтекста
Функция СведенияОНарушенииПоследовательностиЗаКвартал(Знач Организация, Знач ПериодРегистрации)

	Результат = Новый Структура();
	Результат.Вставить("Дата1", 						 Неопределено);
	Результат.Вставить("Дата2", 						 Неопределено);
	Результат.Вставить("Дата3", 						 Неопределено);
	Результат.Вставить("Месяц1ИсключенИзПерепроведения", Ложь);
	Результат.Вставить("Месяц2ИсключенИзПерепроведения", Ложь);
	Результат.Вставить("Месяц3ИсключенИзПерепроведения", Ложь);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала", 	НачалоКвартала(ПериодРегистрации));
	Запрос.УстановитьПараметр("ДатаОкончания", 	КонецКвартала(ПериодРегистрации));
	Запрос.УстановитьПараметр("Организация", 	Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсключенныеИзПерепроведенияМесяцы.ПериодРегистрации КАК ПериодРегистрации
	|ИЗ
	|	РегистрСведений.ИсключенныеИзПерепроведенияМесяцы КАК ИсключенныеИзПерепроведенияМесяцы
	|ГДЕ
	|	ИсключенныеИзПерепроведенияМесяцы.Организация = &Организация
	|	И ИсключенныеИзПерепроведенияМесяцы.ПериодРегистрации МЕЖДУ &ДатаНачала И &ДатаОкончания
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
	
		Если НачалоМесяца(Выборка.ПериодРегистрации) = НачалоКвартала(ПериодРегистрации) Тогда
			Результат.Месяц1ИсключенИзПерепроведения = Истина;
		ИначеЕсли НачалоМесяца(Выборка.ПериодРегистрации) = ДобавитьМесяц(НачалоКвартала(ПериодРегистрации), 1) Тогда
			Результат.Месяц2ИсключенИзПерепроведения = Истина;
		Иначе
			Результат.Месяц3ИсключенИзПерепроведения = Истина;
		КонецЕсли;
	
	КонецЦикла;
		
	ТекущийМесяц = НачалоКвартала(ПериодРегистрации);
	Для НомерМесяцаВКвартале = 1 По 3 Цикл
		
		Если НЕ Результат["Месяц" + НомерМесяцаВКвартале + "ИсключенИзПерепроведения"] Тогда
			МоментНарушения = РаботаСПоследовательностями.МоментНачалаПерепроведенияСУчетомИсключенныхМесяцев(
				Организация, КонецМесяца(ТекущийМесяц));
			
			Если МоментНарушения <> Неопределено Тогда
				Результат["Дата" + НомерМесяцаВКвартале] = МоментНарушения.Дата;
			КонецЕсли;
		КонецЕсли;
		
		ТекущийМесяц = КонецМесяца(ТекущийМесяц) + 1;
	КонецЦикла;

	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ПерейтиККварталу(ДатаКвартала)

	ИзменитьПериод(НачалоКвартала(ДатаКвартала));
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПериод(НовыйПериод)

	Объект.ПериодРегистрации = НовыйПериод;
	ПредставлениеПериодаРегистрации = ВыборПериодаКлиентСервер.ПолучитьПредставлениеПериодаОтчета(
		ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Квартал"), 
		НачалоКвартала(Объект.ПериодРегистрации),
		КонецКвартала(Объект.ПериодРегистрации));
	
	УправлениеФормой();
	
КонецПроцедуры 

&НаКлиенте
Процедура УведомитьОнеобходимостиПерепроведенияДокументов()
	
	ОбщегоНазначенияБПКлиент.ПоказатьПредупреждениеОбИзменениях("КодыВидовОпераций2015", , НастройкиПредупреждений);
		
КонецПроцедуры	

#КонецОбласти
