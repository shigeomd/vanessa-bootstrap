#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Функция ПолучитьМакетОткрытияПомощника(Организация, Период) Экспорт
	
	МакетПомощника = Обработки.ПомощникПоУчетуНДС.ПолучитьМакет("ПерейтиКПомощнику");
	СекцияПомощника = МакетПомощника.ПолучитьОбласть("ПерейтиКПомощнику");
	РасшифровкаЯчейки = Новый Структура("ОткрытьПомощникПоУчетуНДС, Организация, Период");
	РасшифровкаЯчейки.Организация = Организация;
	РасшифровкаЯчейки.Период = Период;
	СекцияПомощника.Параметры.ПараметрыОткрытияПомощника = РасшифровкаЯчейки;
	
	Возврат(СекцияПомощника);
	
КонецФункции

Процедура ВыполнитьДействияПоПереходуНаРаздельныйУчетНДСНаСчете19(Организация, Период) Экспорт

	Счета19КВычету = Новый Массив;
	Счета19КВычету.Добавить(ПланыСчетов.Хозрасчетный.НДСприПриобретенииОсновныхСредств);
	Счета19КВычету.Добавить(ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымНематериальнымАктивам);
	Счета19КВычету.Добавить(ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ);
	Счета19КВычету.Добавить(ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымУслугам);
	Счета19КВычету.Добавить(ПланыСчетов.Хозрасчетный.НДСуплачиваемыйТаможеннымОрганам);
	Счета19КВычету.Добавить(ПланыСчетов.Хозрасчетный.НДСприСтроительствеОсновныхСредств);
	Счета19КВычету.Добавить(ПланыСчетов.Хозрасчетный.НДСПоУменьшениюСтоимостиРеализации);
	
	СубконтоСчета19 = Новый Массив;
	СубконтоСчета19.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	СубконтоСчета19.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СФПолученные);
	СубконтоСчета19.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СпособыУчетаНДС);
	
	СубконтоСчета1907 = Новый Массив;
	
	СубконтоСчета1907.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	СубконтоСчета1907.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СФПолученные);
	СубконтоСчета1907.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРеализации);
		
	СтруктураПараметров = Новый Структура();
	
	СтруктураПараметров.Вставить("КонецКвартала",	  Новый Граница(Период - 1, ВидГраницы.Включая));
	СтруктураПараметров.Вставить("Период",	  		  Период - 1);
	СтруктураПараметров.Вставить("Счета19КВычету",	  Счета19КВычету);
	СтруктураПараметров.Вставить("СубконтоСчета19",	  СубконтоСчета19);
	СтруктураПараметров.Вставить("СубконтоСчета1907", СубконтоСчета1907);
	СтруктураПараметров.Вставить("Организация",       Организация);
	СтруктураПараметров.Вставить("Счет1907",          ПланыСчетов.Хозрасчетный.НДСПоТоварамРеализованнымПоСтавке0);
	СтруктураПараметров.Вставить("ДокументыОперации", Новый Массив);
	
	// Операция 1 - списание НДС с 19 по пустому субконто "Способ учета НДС", формирование прихода
	// по таблице НДСНа19КВычету - со значением "Принимается к вычету" на тот же счет
	// по таблице НДСНа19Экспорт - со значением "Реализация по ставке 0%" на счет 19.03
	
	СформироватьДвиженияПоСчету19(СтруктураПараметров);
	
	// Операция 2 - обнуление регистра НДС по приобретенным ценностям по данным таблицы НДСПоПриобретеннымЦенностям
	// и формирование остатков по регистру "Раздельный учет НДС" по данным таблицы НДСПоПриобретеннымЦенностям
	
	СформироватьДвиженияНДСПоПриобретеннымЦенностям(СтруктураПараметров);
	
	// Операция 3 - обнуление остатков по регистру "НДС предъявленный" соответствующих остаткам регистра
	// "НДС предъявленный, реализация 0"
	
	СформироватьДвиженияНДСПредъявленный(СтруктураПараметров);
	
	Для каждого ДокументОперации Из СтруктураПараметров.ДокументыОперации Цикл
	
		РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.ЗафиксироватьФактВыполненияРегламентнойОперации(Период,
			Организация,
			ДокументОперации,
			Перечисления.РегламентныеОперации.ПереходНаРаздельныйУчетНДСНаСчете19,
			Истина);
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтменитьДействияПоПереходуНаРаздельныйУчетНДСНаСчете19(Организация, Период, СообщенияОбОшибках = Неопределено) Экспорт
	
	Если НЕ РазрешеноИзменениеОперацииБух(Организация, Период - 1, СообщенияОбОшибках) Тогда
		Возврат;
	КонецЕсли;
	
	Набор = РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.СоздатьНаборЗаписей();
	Набор.Отбор.ПериодРегистрации.Установить(Период);
	Набор.Отбор.Организация.Установить(Организация);
	Набор.Отбор.РегламентнаяОперация.Установить(Перечисления.РегламентныеОперации.ПереходНаРаздельныйУчетНДСНаСчете19);
	
	Набор.Прочитать();
	
	НачатьТранзакцию();
	
	Для каждого СтрокаНабора Из Набор Цикл
		
		ДокументОперации = СтрокаНабора.РегламентныйДокумент;
		
		Если ЗначениеЗаполнено(ДокументОперации)
			И ТипЗнч(ДокументОперации) = Тип("ДокументСсылка.ОперацияБух") Тогда
			
			ДокументОбъект = ДокументОперации.ПолучитьОбъект();
			
			Попытка
				ДокументОбъект.Заблокировать();
				ДокументОбъект.ПометкаУдаления = Истина;
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				ОтменитьТранзакцию();
				ВызватьИсключение ОписаниеОшибки();
			КонецПопытки;
			
		КонецЕсли; 
	КонецЦикла;
	
	Набор.Очистить();
	Набор.Записать();
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ВыполнитьОбработкуНомеровСчетовФактур(Организация, Период) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(НачалоКвартала(Период)));
	Запрос.УстановитьПараметр("КонецПериода",  КонецДня(КонецКвартала(Период)));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетФактураВыданный.Ссылка
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	НЕ СчетФактураВыданный.ПометкаУдаления
	|	И СчетФактураВыданный.Проведен
	|	И СчетФактураВыданный.Организация = &Организация
	|	И СчетФактураВыданный.Дата МЕЖДУ &НачалоПериода И &КонецПериода";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	
	Пока Выборка.Следующий() Цикл
		
		СчетФактураОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Попытка
			СчетФактураОбъект.Записать();
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать номер счета-фактуры ""%1"" по причине:
					|%2'"), 
					Выборка.Ссылка,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,, 
				Выборка.Ссылка, ТекстСообщения);
			
		КонецПопытки
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Функция РазрешеноИзменениеОперацииБух(Организация, Дата, СообщенияОбОшибках = Неопределено)

	ОперацияОбъект             = Документы.ОперацияБух.СоздатьДокумент();
	ОперацияОбъект.Дата        = Дата;
	ОперацияОбъект.Организация = Организация;
	
	Отказ = Ложь;
	ДатыЗапретаИзменения.ПроверитьДатуЗапретаИзмененияПередЗаписьюДокумента(
		ОперацияОбъект, Отказ, РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Неоперативный);
	Если Отказ Тогда
		СообщенияОбОшибках = Новый Массив(ПолучитьСообщенияПользователю(Истина));
	КонецЕсли;
		
	Возврат НЕ Отказ;

КонецФункции

Процедура СформироватьДвиженияПоСчету19(СтруктураПараметров)

	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ХозрасчетныйОстатки.Счет КАК СчетДт,
	|	ХозрасчетныйОстатки.Счет КАК СчетКт,
	|	ХозрасчетныйОстатки.Субконто1 КАК СубконтоДт1,
	|	ХозрасчетныйОстатки.Субконто2 КАК СубконтоДт2,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыУчетаНДС.ПринимаетсяКВычету) КАК СубконтоДт3,
	|	ХозрасчетныйОстатки.Субконто1 КАК СубконтоКт1,
	|	ХозрасчетныйОстатки.Субконто2 КАК СубконтоКт2,
	|	ХозрасчетныйОстатки.Субконто3 КАК СубконтоКт3,
	|	ХозрасчетныйОстатки.Организация,
	|	ХозрасчетныйОстатки.СуммаОстатокДт КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&КонецКвартала,
	|			Счет В (&Счета19КВычету),
	|			&СубконтоСчета19,
	|			Организация = &Организация
	|				И Субконто3 = ЗНАЧЕНИЕ(Перечисление.СпособыУчетаНДС.ПустаяСсылка)) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.СуммаОстатокДт <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ),
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Субконто2,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыУчетаНДС.ДляОперацийПо0),
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Субконто2,
	|	ХозрасчетныйОстатки.Субконто3,
	|	ХозрасчетныйОстатки.Организация,
	|	ХозрасчетныйОстатки.СуммаОстатокДт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецКвартала, Счет = &Счет1907, &СубконтоСчета1907, Организация = &Организация) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.СуммаОстатокДт <> 0";
	
	ОписаниеПараметровЗапроса = Запрос.НайтиПараметры();
	Для каждого Параметр Из ОписаниеПараметровЗапроса Цикл
		Запрос.УстановитьПараметр(Параметр.Имя, СтруктураПараметров[Параметр.Имя]);
	КонецЦикла; 
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		НачатьТранзакцию();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		Попытка
			ОперацияОбъект 				 = Документы.ОперацияБух.СоздатьДокумент();
			ОперацияОбъект.Дата 		 = СтруктураПараметров.Период;
			ОперацияОбъект.Организация 	 = СтруктураПараметров.Организация;
			ОперацияОбъект.Ответственный = Пользователи.ТекущийПользователь();
			ОперацияОбъект.Содержание	 = НСтр("ru = 'Переход на раздельный учет НДС (на счете 19): регистр бухгалтерии ""Хозрасчетный"": (перевод остатков по счету 19).'");
			ОперацияОбъект.Комментарий	 = НСтр("ru = '#Документ создан автоматически при переходе на раздельный учет НДС (на счете 19), операция - ""перевод остатков по счету 19""'");
			ОперацияОбъект.Записать();
		Исключение
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
		
		Движение = ОперацияОбъект.Движения.Хозрасчетный;
		Движение.Записывать = Истина;
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Запись = Движение.Добавить();
			Запись.Период      = СтруктураПараметров.Период;
			Запись.Организация = ВыборкаДетальныеЗаписи.Организация;
			
			Запись.СчетДт = ВыборкаДетальныеЗаписи.СчетДт;
			Запись.СчетКт = ВыборкаДетальныеЗаписи.СчетКт;
			
			БухгалтерскийУчет.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, 1, ВыборкаДетальныеЗаписи.СубконтоДт1);
			БухгалтерскийУчет.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, 2, ВыборкаДетальныеЗаписи.СубконтоДт2);
			БухгалтерскийУчет.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, 3, ВыборкаДетальныеЗаписи.СубконтоДт3);
			
			БухгалтерскийУчет.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, 1, ВыборкаДетальныеЗаписи.СубконтоКт1);
			БухгалтерскийУчет.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, 2, ВыборкаДетальныеЗаписи.СубконтоКт2);
			БухгалтерскийУчет.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, 3, ВыборкаДетальныеЗаписи.СубконтоКт3);
			
			Запись.Сумма = ВыборкаДетальныеЗаписи.Сумма;
			
		КонецЦикла;
		
		Попытка
			
			ОперацияОбъект.Движения.Записать();
			// запоминаем созданный документ
			Если СтруктураПараметров.Свойство("ДокументыОперации") Тогда	
				СтруктураПараметров.ДокументыОперации.Добавить(ОперацияОбъект.Ссылка);
			КонецЕсли;
		Исключение
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
		
		ЗафиксироватьТранзакцию();
		
		СформироватьДвиженияПоСчету19(СтруктураПараметров);
		
	Иначе
		Возврат;
	КонецЕсли;

КонецПроцедуры
 
Процедура СформироватьДвиженияНДСПоПриобретеннымЦенностям(СтруктураПараметров)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	&Период КАК Период,
	|	НДСПоПриобретеннымЦенностямОстатки.Организация,
	|	НДСПоПриобретеннымЦенностямОстатки.СчетУчета,
	|	НДСПоПриобретеннымЦенностямОстатки.Номенклатура,
	|	НДСПоПриобретеннымЦенностямОстатки.Склад,
	|	НДСПоПриобретеннымЦенностямОстатки.Партия,
	|	НДСПоПриобретеннымЦенностямОстатки.СчетФактура,
	|	НДСПоПриобретеннымЦенностямОстатки.НДСВключенВСтоимость,
	|	ВЫБОР
	|		КОГДА НДСПоПриобретеннымЦенностямОстатки.НДСВключенВСтоимость
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыУчетаНДС.УчитываетсяВCтоимости)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпособыУчетаНДС.ПринимаетсяКВычету)
	|	КОНЕЦ КАК СпособУчетаНДС,
	|	НДСПоПриобретеннымЦенностямОстатки.ВидЦенности,
	|	НДСПоПриобретеннымЦенностямОстатки.СчетУчетаНДС,
	|	НДСПоПриобретеннымЦенностямОстатки.СтавкаНДС,
	|	-НДСПоПриобретеннымЦенностямОстатки.КоличествоОстаток КАК Количество,
	|	-НДСПоПриобретеннымЦенностямОстатки.СтоимостьОстаток КАК Стоимость,
	|	НДСПоПриобретеннымЦенностямОстатки.СтоимостьОстаток - НДСПоПриобретеннымЦенностямОстатки.НДСОстаток КАК СуммаБезНДС,
	|	-НДСПоПриобретеннымЦенностямОстатки.НДСОстаток КАК НДС
	|ИЗ
	|	РегистрНакопления.НДСПоПриобретеннымЦенностям.Остатки(&КонецКвартала, Организация = &Организация) КАК НДСПоПриобретеннымЦенностямОстатки
	|ГДЕ
	|	(НДСПоПриобретеннымЦенностямОстатки.КоличествоОстаток <> 0
	|			ИЛИ НДСПоПриобретеннымЦенностямОстатки.СтоимостьОстаток <> 0
	|			ИЛИ НДСПоПриобретеннымЦенностямОстатки.НДСОстаток <> 0)";
	
	ОписаниеПараметровЗапроса = Запрос.НайтиПараметры();
	Для каждого Параметр Из ОписаниеПараметровЗапроса Цикл
		Запрос.УстановитьПараметр(Параметр.Имя, СтруктураПараметров[Параметр.Имя]);
	КонецЦикла; 
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		НачатьТранзакцию();
		СтруктураПараметров.Вставить("РезультатЗапроса", Результат);
		СтруктураПараметров.Вставить("ИмяРегистра", "НДСПоПриобретеннымЦенностям");
		СформироватьДокументОперацияБух(СтруктураПараметров);
		
		ТаблицаДвижений = ПодготовитьТаблицуДляОтраженияВРегистреРаздельныйУчетНДС(СтруктураПараметров);
		СтруктураПараметров.Вставить("РезультатЗапроса", Неопределено);
		СтруктураПараметров.Вставить("ТаблицаДвижений", ТаблицаДвижений);
		СтруктураПараметров.Вставить("ИмяРегистра", "НДСРаздельныйУчет");
		СформироватьДокументОперацияБух(СтруктураПараметров);
		
		ЗафиксироватьТранзакцию();
		
		СформироватьДвиженияНДСПоПриобретеннымЦенностям(СтруктураПараметров);
		
	Иначе
		Возврат;
	КонецЕсли;
		
КонецПроцедуры

Процедура СформироватьДвиженияНДСПредъявленный(СтруктураПараметров)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	НДСПредъявленный0.Организация,
	|	НДСПредъявленный0.СчетФактура,
	|	НДСПредъявленный0.ВидЦенности,
	|	НДСПредъявленный0.СтавкаНДС,
	|	НДСПредъявленный0.СчетУчетаНДС,
	|	-НДСПредъявленный0.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	-НДСПредъявленный0.НДСОстаток КАК НДС,
	|	НДСПредъявленный.Поставщик,
	|	НДСПредъявленный.ДоговорКонтрагента,
	|	НДСПредъявленный.ИсправленныйСчетФактура
	|ИЗ
	|	РегистрНакопления.НДСПредъявленныйРеализация0.Остатки(&КонецКвартала, Организация = &Организация) КАК НДСПредъявленный0
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НДСПредъявленный.Остатки(&КонецКвартала, Организация = &Организация) КАК НДСПредъявленный
	|		ПО НДСПредъявленный0.СчетФактура = НДСПредъявленный.СчетФактура
	|			И НДСПредъявленный0.ВидЦенности = НДСПредъявленный.ВидЦенности
	|			И НДСПредъявленный0.СтавкаНДС = НДСПредъявленный.СтавкаНДС
	|			И НДСПредъявленный0.СчетУчетаНДС = НДСПредъявленный.СчетУчетаНДС
	|ГДЕ
	|	(НДСПредъявленный0.СуммаБезНДСОстаток <> 0
	|			ИЛИ НДСПредъявленный0.НДСОстаток <> 0)";
	
	ОписаниеПараметровЗапроса = Запрос.НайтиПараметры();
	Для каждого Параметр Из ОписаниеПараметровЗапроса Цикл
		Запрос.УстановитьПараметр(Параметр.Имя, СтруктураПараметров[Параметр.Имя]);
	КонецЦикла; 
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		НачатьТранзакцию();
		
		СтруктураПараметров.Вставить("РезультатЗапроса", Результат);
		СтруктураПараметров.Вставить("ИмяРегистра", "НДСПредъявленный");
		СформироватьДокументОперацияБух(СтруктураПараметров);
		
		ЗафиксироватьТранзакцию();
		
	Иначе
		Возврат;
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьДокументОперацияБух(СтруктураПараметров)

	Попытка
		
		ОперацияОбъект 				 = Документы.ОперацияБух.СоздатьДокумент();
		ОперацияОбъект.Дата 		 = СтруктураПараметров.Период;
		ОперацияОбъект.Организация 	 = СтруктураПараметров.Организация;
		ОперацияОбъект.Ответственный = Пользователи.ТекущийПользователь();
		ОперацияОбъект.Содержание	 = НСтр("ru = 'Переход на раздельный учет НДС (на счете 19): ввод остатков по специальным регистрам НДС'");
		ОперацияОбъект.Комментарий	 = НСтр("ru = '#Документ создан автоматически при переходе на раздельный учет НДС (на счете 19), операция - ""ввод остатков по специальным регистрам НДС""'");
		
		ОперацияОбъект.Записать();		
		// Запоминаем созданный документ
		Если СтруктураПараметров.Свойство("ДокументыОперации") Тогда	
			СтруктураПараметров.ДокументыОперации.Добавить(ОперацияОбъект.Ссылка);
		КонецЕсли;
		
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
	НаборЗаписей = ОперацияОбъект.Движения[СтруктураПараметров.ИмяРегистра];
	НаборЗаписей.Записывать = Истина;
	
	Если СтруктураПараметров.РезультатЗапроса <> Неопределено Тогда
	
		ВыборкаДетальныеЗаписи = СтруктураПараметров.РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, ВыборкаДетальныеЗаписи);
		КонецЦикла;
		
	ИначеЕсли СтруктураПараметров.ТаблицаДвижений <> Неопределено Тогда
		
		Для каждого СтрокаДвижения Из СтруктураПараметров.ТаблицаДвижений Цикл
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, СтрокаДвижения);
		КонецЦикла;
		
	КонецЕсли;
	
	Попытка
		ОперацияОбъект.Движения.Записать();
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;

КонецПроцедуры

Функция ПодготовитьТаблицуДляОтраженияВРегистреРаздельныйУчетНДС(СтруктураПараметров)
	
	ПартионныйУчет = УчетнаяПолитика.СпособОценкиМПЗ(СтруктураПараметров.Организация, СтруктураПараметров.Период) = Перечисления.СпособыОценки.ФИФО;
	
	ДанныеДвижений = СтруктураПараметров.РезультатЗапроса.Выгрузить();

	ДанныеДвижений.Колонки.СчетУчета.Имя = "СчетЗатрат";
	
	ДанныеДвижений.Колонки.Добавить("Субконто1");
	ДанныеДвижений.Колонки.Добавить("Субконто2");
	ДанныеДвижений.Колонки.Добавить("Субконто3");
	ДанныеДвижений.Колонки.Добавить("Подразделение");
	ДанныеДвижений.Колонки.Добавить("АналитикаУчетаЗатрат",
		Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиУчетаЗатрат"));	
	ДанныеДвижений.Колонки.Добавить("АналитикаУчетаНДС",
		Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиУчетаНДС"));	

	Для каждого СтрокаТаблицы Из ДанныеДвижений Цикл

		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетЗатрат);
		Для Ном = 1 По СвойстваСчета.КоличествоСубконто Цикл
			Если СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура
				ИЛИ СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства Тогда
				СтрокаТаблицы["Субконто" + Ном] = СтрокаТаблицы.Номенклатура;
			ИначеЕсли СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады Тогда
				Если БухгалтерскийУчетВызовСервераПовтИсп.ВедетсяСуммовойУчетПоСкладам(СтрокаТаблицы.СчетЗатрат) Тогда
					СтрокаТаблицы["Субконто" + Ном] = СтрокаТаблицы.Склад;
				КонецЕсли;
			ИначеЕсли СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии Тогда
				Если ПартионныйУчет Тогда
					СтрокаТаблицы["Субконто" + Ном] = СтрокаТаблицы.Партия;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		СтрокаТаблицы.Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		
		СтрокаТаблицы.АналитикаУчетаЗатрат = Справочники.КлючиАналитикиУчетаЗатрат.КлючиАналитикиУчетаЗатратДокумента(СтрокаТаблицы);
		СтрокаТаблицы.АналитикаУчетаНДС = Справочники.КлючиАналитикиУчетаНДС.КлючиАналитикиУчетаНДСДокумента(СтрокаТаблицы);
		
		СтрокаТаблицы.Количество  = - СтрокаТаблицы.Количество;
		СтрокаТаблицы.НДС 		  = - СтрокаТаблицы.НДС;
				
	КонецЦикла;

	ДанныеДвижений.Колонки.Удалить("Номенклатура");
	ДанныеДвижений.Колонки.Удалить("Склад");
	ДанныеДвижений.Колонки.Удалить("Стоимость");
	ДанныеДвижений.Колонки.Удалить("НДСВключенВСтоимость");
	
	ДанныеДвижений.Свернуть("
		|Период,Организация,СпособУчетаНДС,
		|Партия,АналитикаУчетаЗатрат,АналитикаУчетаНДС",
		"Количество,СуммаБезНДС,НДС");
		
	Возврат ДанныеДвижений;
	
КонецФункции	

#КонецЕсли