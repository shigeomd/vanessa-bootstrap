
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	УдалениеПомеченныхОбъектов = Параметры.УдалениеПомеченныхОбъектов;
	Если УдалениеПомеченныхОбъектов Тогда
		Заголовок = НСтр("ru = 'Не удалось выполнить удаление помеченных объектов'");
		Элементы.ТекстСообщенияОбОшибке.Заголовок = НСтр("ru = 'Невозможно выполнить удаление помеченных объектов, т.к. в программе работают другие пользователи:'");
	КонецЕсли;
	
	АктивныеПользователиШаблон = НСтр("ru = 'Активные пользователи (%1)'");
	
	КоличествоАктивныхСеансов = СоединенияИБ.КоличествоСеансовИнформационнойБазы();
	Элементы.АктивныеПользователи.Заголовок = СтроковыеФункцииКлиентСервер.
		ПодставитьПараметрыВСтроку(АктивныеПользователиШаблон, КоличествоАктивныхСеансов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПодключитьОбработчикОжидания("ОбновитьКоличествоАктивныхСеансов", 30);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура АктивныеПользователиНажатие(Элемент)
	
	ОткрытьФорму("Обработка.АктивныеПользователи.Форма.ФормаСпискаАктивныхПользователей", Новый Структура("ОшибкаУстановкиМонопольногоРежима"));
	
КонецПроцедуры

&НаКлиенте
Процедура АктивныеПользователи2Нажатие(Элемент)
	
	ОткрытьФорму("Обработка.АктивныеПользователи.Форма.ФормаСпискаАктивныхПользователей");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗавершитьСеансыИПерезапуститьПрограмму(Команда)
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Страница2;
	ТекущаяСтраницаПомощника = "Страница2";
	Элементы.ФормаПовторитьЗапускПрограммы.Видимость = Ложь;
	Элементы.ФормаЗавершитьСеансыИПерезапуститьПрограмму.Видимость = Ложь;
	
	// Задание параметров блокировки ИБ.
	ОбновитьКоличествоАктивныхСеансов();
	УстановитьБлокировкуФайловойБазы();
	СоединенияИБКлиент.УстановитьОбработчикиОжиданияЗавершенияРаботыПользователей(Истина);
	ПодключитьОбработчикОжидания("ТаймАутЗавершенияРаботыПользователей", 60);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьЗапускПрограммы(Команда)
	
	ОтменитьБлокировкуФайловойБазы();
	
	Закрыть(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторитьЗапускПрограммы(Команда)
	
	Закрыть(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьКоличествоАктивныхСеансов()
	
	Результат = ОбновлениеКоличестваАктивныхСеансовНаСервере();
	Если Результат Тогда
		Закрыть(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбновлениеКоличестваАктивныхСеансовНаСервере()
	
	Если ТекущаяСтраницаПомощника = "Страница2" Тогда
		АктивныеПользователи = "АктивныеПользователи2";
	Иначе
		АктивныеПользователи = "АктивныеПользователи";
	КонецЕсли;

	СеансыИнформационнойБазы = ПолучитьСеансыИнформационнойБазы();
	КоличествоАктивныхСеансов = СеансыИнформационнойБазы.Количество();
	Элементы[АктивныеПользователи].Заголовок = СтроковыеФункцииКлиентСервер.
		ПодставитьПараметрыВСтроку(АктивныеПользователиШаблон, КоличествоАктивныхСеансов);
	
	КоличествоСеансовПрепятствующихОбновлению = 0;
	Для Каждого СеансИБ Из СеансыИнформационнойБазы Цикл
		
		Если СеансИБ.ИмяПриложения = "Designer" Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоСеансовПрепятствующихОбновлению = КоличествоСеансовПрепятствующихОбновлению + 1;
	КонецЦикла;
	
	Если КоличествоСеансовПрепятствующихОбновлению = 1 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ТаймАутЗавершенияРаботыПользователей()
	
	ПродолжительностьЗавершенияРаботыПользователей = ПродолжительностьЗавершенияРаботыПользователей + 1;
	
	Если ПродолжительностьЗавершенияРаботыПользователей >= 3 Тогда
		ОтменитьБлокировкуФайловойБазы();
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Страница1;
		ТекущаяСтраницаПомощника = "Страница1";
		Элементы.ТекстСообщенияОбОшибке.Заголовок = НСтр("ru = 'Невозможно выполнить обновление версии программы, т.к. не удалось завершить работу пользователей:'");
		Элементы.ФормаПовторитьЗапускПрограммы.Видимость = Истина;
		Элементы.ФормаЗавершитьСеансыИПерезапуститьПрограмму.Видимость = Истина;
		ОтключитьОбработчикОжидания("ТаймАутЗавершенияРаботыПользователей");
		ПродолжительностьЗавершенияРаботыПользователей = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьБлокировкуФайловойБазы()
	
	Объект.ВременноЗапретитьРаботуПользователей = Истина;
	Если УдалениеПомеченныхОбъектов Тогда
		Объект.НачалоДействияБлокировки = ТекущаяДатаСеанса() + 2*60;
		Объект.ОкончаниеДействияБлокировки = Объект.НачалоДействияБлокировки + 60;
		Объект.СообщениеДляПользователей = НСтр("ru = 'Программа заблокирована для удаления помеченных объектов.'");
	Иначе
		Объект.НачалоДействияБлокировки = ТекущаяДатаСеанса() + 2*60;
		Объект.ОкончаниеДействияБлокировки = Объект.НачалоДействияБлокировки + 5*60;
		Объект.СообщениеДляПользователей = НСтр("ru = 'Программа заблокирована для выполнения обновления.'");
	КонецЕсли;
	
	Попытка
		РеквизитФормыВЗначение("Объект").ВыполнитьУстановку();
	Исключение
		ЗаписьЖурналаРегистрации(СоединенияИБКлиентСервер.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеОписаниеОшибки(ОписаниеОшибки()), , );
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьБлокировкуФайловойБазы()
	
	РеквизитФормыВЗначение("Объект").ОтменитьБлокировку();
	
КонецПроцедуры

&НаСервере
Функция КраткоеОписаниеОшибки(ОписаниеОшибки)
	
	ТекстОшибки = ОписаниеОшибки;
	Позиция = Найти(ТекстОшибки, "}:");
	Если Позиция > 0 Тогда
		ТекстОшибки = СокрЛП(Сред(ТекстОшибки, Позиция + 2, СтрДлина(ТекстОшибки)));
	КонецЕсли;
	
	Возврат ТекстОшибки;
КонецФункции

#КонецОбласти
