////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не Параметры.Свойство("ИмяФайлаИнструкций") Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	НомерРелизаКонфигурации		= Метаданные.Версия;
	ИдентификаторКонфигурации	= Метаданные.Имя;
	
	ФайлИнструкций = Новый ТекстовыйДокумент;
	ФайлИнструкций.Прочитать(Параметры.ИмяФайлаИнструкций);
	
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Переносятся данные в %1'"), ФайлИнструкций.ПолучитьСтроку(1));
	
	ИмяФайлаПравил		= ФайлИнструкций.ПолучитьСтроку(2);
	ПериодГод			= ФайлИнструкций.ПолучитьСтроку(3);
	ИмяФайлаРезультатов	= ФайлИнструкций.ПолучитьСтроку(4);
	
	ПереноситьНачисленияПредыдущейПрограммы = Истина;
	
	КоличествоИнструкций = ФайлИнструкций.КоличествоСтрок();
	Если КоличествоИнструкций >= 8 Тогда
		МесяцНачалаЭксплуатации	= ФайлИнструкций.ПолучитьСтроку(8);
	КонецЕсли;
	Если КоличествоИнструкций >= 9 Тогда
		ПереноситьНачисленияПредыдущейПрограммы	= ФайлИнструкций.ПолучитьСтроку(9);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Перерисовать("ВОчереди");
	
	ПодключитьОбработчикОжидания("ВыгрузитьДанныеОбработчикОжидания", 0.1, Истина);
	
	Перерисовать("Выполняется");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ 

&НаКлиенте
Процедура ГиперссылкаОшибкиНажатие(Элемент)
	
	ПодготовитьОтчетОбОшибках();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура ВыгрузитьДанныеОбработчикОжидания()
	
	Успех = ВыгрузитьДанные();
	
	Если Успех Тогда
		Перерисовать("Успех");
		Закрыть();
		
	Иначе
		Элементы.СтраницыРезультат.ТекущаяСтраница		= Элементы.Ошибки;
		
	КонецЕсли;
	
КонецПроцедуры
	
&НаКлиенте
Функция ВыгрузитьДанные()
	
	КаталогВыгрузкиЗагрузки	= "";
	ИмяФайлаПротокола		= "";
	Ошибка =  ОпределитьКонфигурациюИПолучитьФайлы(НомерРелизаКонфигурации, ИмяФайлаПравил, КаталогВыгрузкиЗагрузки, ИмяФайлаПротокола);
	Если Ошибка Тогда
		Перерисовать();
		УдалитьФайлы(ИмяФайлаПравил);
		УдалитьФайлы(ИмяФайлаПротокола);
		Возврат Ложь;
	КонецЕсли;
	
	ОбработкаПрерыванияПользователя();
	ОбновитьОтображениеДанных();
	
	Попытка
		ОбработкаОбменаЗагрузитьПравилаОбмена(КаталогВыгрузкиЗагрузки);
		
	Исключение
		Перерисовать();
		Инфо = ИнформацияОбОшибке();
		Описание = "";
		Пока Инфо <> Неопределено Цикл
			Описание = Описание + Символы.ПС + Инфо.Описание;
			Инфо = Инфо.Причина;
		КонецЦикла;
		ТекстСообщения = Нстр("ru = 'Не удалось загрузить правила переноса данных: '") + Описание;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ЗафиксироватьОшибку(ЭтаФорма, ТекстСообщения, НСтр("ru = 'Возможно, в правилах конвертации ошибка. Обратитесь в техническую поддержку.'"));
		УдалитьФайлы(ИмяФайлаПравил);
		УдалитьФайлы(ИмяФайлаПротокола);
		Возврат Ложь;
		
	КонецПопытки;
	
	ОбработкаПрерыванияПользователя();
	ОбновитьОтображениеДанных();
	
	ФайлРезультатов = Новый ТекстовыйДокумент;
	
	БезОшибок = Истина;
	Попытка
		Для Каждого ЭтапВыгрузки Из СписокЭтаповВыгрузки Цикл
			ТекущийНомерВыгрузки = СписокЭтаповВыгрузки.Индекс(ЭтапВыгрузки) + 1;
			
			ЭтапКонвертации = ЭтапВыгрузки.Представление;
			
			ОбработкаПрерыванияПользователя();
			ОбновитьОтображениеДанных();
			
			ОбработкаОбменаВыполнитьВыгрузку(ЭтапВыгрузки.Значение, ТекущийНомерВыгрузки);
			
			ФайлПротокола = Новый ТекстовыйДокумент;
			ФайлПротокола.Прочитать(ИмяФайлаПротокола);
			
			ЕстьОшибки = Ложь;
			ТекстОшибок = "";
			Для Номер = 1 По ФайлПротокола.КоличествоСтрок() Цикл
				СтрокаРезультата = ФайлПротокола.ПолучитьСтроку(Номер);
				
				Если (ПустаяСтрока(СтрокаРезультата) И Не ЕстьОшибки)
					Или Найти(СтрокаРезультата, "Начало выгрузки") = 1
					Или Найти(СтрокаРезультата, "Окончание выгрузки") = 1
					Или Найти(СтрокаРезультата, "Выгружено объектов") = 1
					Или Найти(СтрокаРезультата, "Ошибка!!!") = 1 Тогда
					Продолжить;
				КонецЕсли;
				
				ЕстьОшибки = Истина;
				Если Не ПустаяСтрока(ТекстОшибок) Тогда
					ТекстОшибок = ТекстОшибок + Символы.ПС;
				КонецЕсли;
				ТекстОшибок = ТекстОшибок + СтрокаРезультата;
			КонецЦикла;
			
			Если ЕстьОшибки Тогда
				Перерисовать();
				БезОшибок = Ложь;
				ЗафиксироватьОшибку(ЭтаФорма, ТекстОшибок, НСтр("ru = 'Возможно, в правилах конвертации ошибка. Обратитесь в техническую поддержку.'"));
				
			Иначе
				ФайлРезультатов.ДобавитьСтроку(ЭтапВыгрузки.Значение + ";" + ЭтапВыгрузки.Представление);
				
			КонецЕсли;
		КонецЦикла;
		
	Исключение
		Перерисовать();
		Инфо = ИнформацияОбОшибке();
		Описание = "";
		Пока Инфо <> Неопределено Цикл
			Описание = Описание + Символы.ПС + Инфо.Описание;
			Инфо = Инфо.Причина;
		КонецЦикла;
		ТекстСообщения = НСтр("ru = 'Перенос данных завершился аварийно: '") + Описание;
		ЗафиксироватьОшибку(ЭтаФорма, ТекстСообщения, НСтр("ru = 'Воспользуйтесь вариантом загрузки данных из файла, предварительно сформировав его в информационной базе, из которой производится перенос данных.'"));
		УдалитьФайлы(ИмяФайлаПравил);
		УдалитьФайлы(ИмяФайлаПротокола);
		Возврат Ложь;
		
	КонецПопытки;
	
	ОбработкаПрерыванияПользователя();
	ОбновитьОтображениеДанных();
	
	УдалитьФайлы(ИмяФайлаПравил);
	УдалитьФайлы(ИмяФайлаПротокола);
	
	Если БезОшибок Тогда
		ФайлРезультатов.Записать(ИмяФайлаРезультатов);
	КонецЕсли;
	
	Возврат БезОшибок;
	
КонецФункции

&НаКлиенте
Функция ОпределитьКонфигурациюИПолучитьФайлы(
		НомерРелизаКонфигурации = "",
		ИмяВременногоФайлаПравил = "",
		КаталогВыгрузкиЗагрузки = "",
		ИмяВременногоФайлаПротокола = "")
		
	УИД = Новый УникальныйИдентификатор;
	
	#Если Не ВебКлиент Тогда
		КаталогВыгрузкиЗагрузки		= КаталогВременныхФайлов();
	#КонецЕсли
	
	ФайлОбмена = Новый ЧтениеXML();
	ФайлОбмена.ОткрытьФайл(ИмяВременногоФайлаПравил);
	Пока ФайлОбмена.Прочитать() Цикл
		Если ФайлОбмена.ЛокальноеИмя = "Источник" Тогда
			МинимальныйНомерРелиза = ФайлОбмена.ПолучитьАтрибут("ВерсияКонфигурации");
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ФайлОбмена.Закрыть();
	
	Если ПустаяСтрока(НомерРелизаКонфигурации) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ИмяВременногоФайлаПротокола = КаталогВыгрузкиЗагрузки + "ПереносДанных" + УИД + ".txt";
	
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НомерРелизаКонфигурации, МинимальныйНомерРелиза) < 0 Тогда
		ТекстСообщения =
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Текущая версия правил предназначена для релиза конфигурации не ниже %1'"), 
		МинимальныйНомерРелиза);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ЗафиксироватьОшибку(ЭтаФорма, ТекстСообщения, НСтр("ru = 'Рекомендуется обновить релиз конфигурации информационной базы, из которой производится перенос данных.'"));
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура Перерисовать(Состояние = "Ошибка")
	
	ЭтапСтрока = "Выгрузка";
	
	ИмяЗакладки = "НеВыполняется";
	Если Состояние = "ВОчереди" Тогда
		НомерСостояния = 1;
		
	ИначеЕсли Состояние = "Выполняется" Тогда
		НомерСостояния = 2;
		ИмяЗакладки = "Выполняется";
		
	ИначеЕсли Состояние = "Ошибка" Тогда
		НомерСостояния = 3;
		ИмяЗакладки = "Выполнено";
		
	ИначеЕсли Состояние = "Успех" Тогда
		НомерСостояния = 4;
		ИмяЗакладки = "Выполнено";
		
	Иначе
		НомерСостояния = 3;
		ИмяЗакладки = "Выполнено";
		
	КонецЕсли;
	
	Элементы[ЭтапСтрока].ТекущаяСтраница				= Элементы[ЭтапСтрока + НомерСостояния];
	Элементы[ЭтапСтрока + "Надпись"].ТекущаяСтраница	= Элементы[ЭтапСтрока + "Надпись" + ИмяЗакладки];
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗафиксироватьОшибку(Форма, ТекстОшибки, ТекстРекомендации = "", Расшифровка = Неопределено)
	
	Этап = Форма.ЭтапКонвертации;
	
	Если НЕ ЗначениеЗаполнено(Этап) Тогда
		Возврат;
	КонецЕсли;
	
	НоваяОшибка = Форма.ТаблицаОшибок.Добавить();
	НоваяОшибка.Этап			= Этап;
	НоваяОшибка.Ошибка			= ТекстОшибки;
	НоваяОшибка.Рекомендации	= ТекстРекомендации;
	НоваяОшибка.Расшифровка		= Расшифровка;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьОтчетОбОшибках()
	
	ОтчетОбОшибках = Новый ТабличныйДокумент;
	ПодготовитьОтчетОбОшибкахСервер(ОтчетОбОшибках);
	ОтчетОбОшибках.ТолькоПросмотр		= Истина;
	ОтчетОбОшибках.ОтображатьЗаголовки	= Ложь;
	ОтчетОбОшибках.ОтображатьСетку		= Ложь;
	ОтчетОбОшибках.Показать(НСтр("ru='Список ошибок'"));
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьОтчетОбОшибкахСервер(ОтчетОбОшибках)
	
	Макет = Обработки.ПереносДанныхБухгалтерия3Зарплата3.ПолучитьМакет("СписокОшибок");
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	
	ОтчетОбОшибках.Вывести(ОбластьШапка);
	
	Для Каждого СтрокаТаблицы Из ТаблицаОшибок Цикл
		ОбластьСтрока.Параметры.Этап			= СтрокаТаблицы.Этап;
		ОбластьСтрока.Параметры.Ошибка			= СтрокаТаблицы.Ошибка;
		ОбластьСтрока.Параметры.Рекомендации	= СтрокаТаблицы.Рекомендации;
		ОбластьСтрока.Параметры.Расшифровка		= СтрокаТаблицы.Расшифровка;
		
		ОтчетОбОшибках.Вывести(ОбластьСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОбменаЗагрузитьПравилаОбмена(КаталогВыгрузкиЗагрузки)
	
	ОбработкаОбъект = Обработки.УниверсальныйОбменДаннымиXML.Создать();
	ОбработкаОбъект.РежимОбмена												= "Выгрузка";
	ОбработкаОбъект.НеВыводитьНикакихИнформационныхСообщенийПользователю	= Истина;
	ОбработкаОбъект.ИмяФайлаПравилОбмена									= ИмяФайлаПравил;
	ОбработкаОбъект.ИмяФайлаПротоколаОбмена									= ИмяФайлаПротокола;
	ОбработкаОбъект.ЗагрузитьПравилаОбмена();
	ОбработкаОбъект.Параметры.ДатаНачалаПереносаРасчетныхДанных	= Дата(ПериодГод, 1, 1);
	ОбработкаОбъект.Параметры.Вставить("ПереноситьНачисленияПредыдущейПрограммы", ПереноситьНачисленияПредыдущейПрограммы);
	ОбработкаОбъект.Параметры.Вставить("МесяцНачалаЭксплуатации", МесяцНачалаЭксплуатации);
	
	УИД = Новый УникальныйИдентификатор;
	ПрефиксФайловВыгрузки = "ЗарплатаКадрыПереносДанных" + УИД;
	
	КорневыеСтрокиПравилВыгрузки	= ОбработкаОбъект.ТаблицаПравилВыгрузки.Строки;
	СтрокиКУдалению = Новый Массив;
	Для Каждого ПравилоВыгрузки Из КорневыеСтрокиПравилВыгрузки Цикл
		ПравилоВыгрузки.Включить = 0;
		ОбработкаОбъект.УстановитьПометкиПодчиненных(ПравилоВыгрузки, "Включить");
		
		Если ПереноситьНачисленияПредыдущейПрограммы Тогда
			Если Найти(ПравилоВыгрузки.Имя,"_УпрощенныйПеренос") Тогда
				СтрокиКУдалению.Добавить(ПравилоВыгрузки);
			КонецЕсли;
		Иначе
			Если Найти(ПравилоВыгрузки.Имя,"_ПереносНачислений") Тогда
				СтрокиКУдалению.Добавить(ПравилоВыгрузки);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого ПравилоВыгрузки Из СтрокиКУдалению Цикл
		КорневыеСтрокиПравилВыгрузки.Удалить(ПравилоВыгрузки);
	КонецЦикла;
	
	КоличествоЭтаповВыгрузки		= КорневыеСтрокиПравилВыгрузки.Количество();
	Для Каждого ПравилоВыгрузки Из КорневыеСтрокиПравилВыгрузки Цикл
		ПравилоВыгрузки.Включить = 0;
		ОбработкаОбъект.УстановитьПометкиПодчиненных(ПравилоВыгрузки, "Включить");
		
		ТекущийНомерВыгрузки	= КорневыеСтрокиПравилВыгрузки.Индекс(ПравилоВыгрузки) + 1;
		ИмяФайлаОбмена			= КаталогВыгрузкиЗагрузки + ПрефиксФайловВыгрузки + Прав("000" + ТекущийНомерВыгрузки, 3) + ".xml";
		СписокЭтаповВыгрузки.Добавить(ИмяФайлаОбмена, ПравилоВыгрузки.Наименование + " (" + ТекущийНомерВыгрузки + "/" + КоличествоЭтаповВыгрузки + ")");
	КонецЦикла;
	
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОбменаВыполнитьВыгрузку(ИмяФайлаОбмена, НомерВыгрузки)
	
	ОбработкаОбъект = Обработки.УниверсальныйОбменДаннымиXML.Создать();
	ОбработкаОбъект.РежимОбмена												= "Выгрузка";
	ОбработкаОбъект.НеВыводитьНикакихИнформационныхСообщенийПользователю	= Истина;
	ОбработкаОбъект.ИмяФайлаПравилОбмена									= ИмяФайлаПравил;
	ОбработкаОбъект.ИмяФайлаПротоколаОбмена									= ИмяФайлаПротокола;
	ОбработкаОбъект.ЗагрузитьПравилаОбмена();
	ОбработкаОбъект.Параметры.ДатаНачалаПереносаРасчетныхДанных	= Дата(ПериодГод, 1, 1);
	ОбработкаОбъект.Параметры.Вставить("ПереноситьНачисленияПредыдущейПрограммы", ПереноситьНачисленияПредыдущейПрограммы);
	ОбработкаОбъект.Параметры.Вставить("МесяцНачалаЭксплуатации", МесяцНачалаЭксплуатации);
	
	КорневыеСтрокиПравилВыгрузки	= ОбработкаОбъект.ТаблицаПравилВыгрузки.Строки;
	СтрокиКУдалению = Новый Массив;
	Для Каждого ПравилоВыгрузки Из КорневыеСтрокиПравилВыгрузки Цикл
		ПравилоВыгрузки.Включить = 0;
		ОбработкаОбъект.УстановитьПометкиПодчиненных(ПравилоВыгрузки, "Включить");
		Если ПереноситьНачисленияПредыдущейПрограммы Тогда
			Если Найти(ПравилоВыгрузки.Имя,"_УпрощенныйПеренос") Тогда
				СтрокиКУдалению.Добавить(ПравилоВыгрузки);
			КонецЕсли;
		Иначе
			Если Найти(ПравилоВыгрузки.Имя,"_ПереносНачислений") Тогда
				СтрокиКУдалению.Добавить(ПравилоВыгрузки);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ПравилоВыгрузки Из СтрокиКУдалению Цикл
		КорневыеСтрокиПравилВыгрузки.Удалить(ПравилоВыгрузки);
	КонецЦикла;
	
	ПравилоВыгрузки = КорневыеСтрокиПравилВыгрузки[НомерВыгрузки-1];
	ПравилоВыгрузки.Включить = 1;
	ОбработкаОбъект.УстановитьПометкиПодчиненных(ПравилоВыгрузки, "Включить");
	
	ОбработкаОбъект.ИмяФайлаОбмена = ИмяФайлаОбмена;
	ОбработкаОбъект.ВыполнитьВыгрузку();
	
КонецПроцедуры
