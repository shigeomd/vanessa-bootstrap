#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает полный путь к файлу данных из пакета электронных документов БЭД.
//
// Параметры:
//  ПапкаДляПоиска - Строка - путь к каталогу.
//
// Возвращаемое значение:
//  Строка - полный путь к файлу данных.
//
Функция ПолучитьИмяФайлаДанных(ПапкаДляПоиска) Экспорт
	
	МассивФайлов = НайтиФайлы(ПапкаДляПоиска, "meta*.xml", Истина);
	Если МассивФайлов.Количество() > 0 Тогда
		ФайлИнформации = МассивФайлов[0];
	Иначе
		Возврат "";
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ФайлИнформации.ПолноеИмя);
	ТипXDTO = ФабрикаXDTO.Тип("http://api-invoice.taxcom.ru/meta", "ContainerDescription");
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипXDTO);
	
	ИмяФайла = ОбъектXDTO.DocFlow[0].Documents.Document[0].Files.MainImage.Path;
	
	Возврат ПапкаДляПоиска + ИмяФайла;
	
КонецФункции

// Возвращает тип электронного документа по переданной строке.
//
// Параметры:
//  ТипДокумента - Строка - текстовое представление типа документа
//
// Возвращаемое значение:
//  Перечисление.ТипЭД - тип документа.
//
Функция ТипДокументаПоСтрокеТакском(ТипДокумента) Экспорт
	
	ФорматированнаяСтрока = НРег(СокрЛП(ТипДокумента));
	Если ФорматированнаяСтрока = "account" Тогда
		ВозвращаемоеЗначение = Перечисления.ТипыЭД.СчетНаОплату;
	ИначеЕсли ФорматированнаяСтрока = "statement" Тогда
		ВозвращаемоеЗначение = Перечисления.ТипыЭД.АктВыполненныхРабот;
	ИначеЕсли ФорматированнаяСтрока = "consignment" Тогда
		ВозвращаемоеЗначение = Перечисления.ТипыЭД.ТоварнаяНакладная;
	ИначеЕсли ФорматированнаяСтрока = "paymentorder" Тогда
		ВозвращаемоеЗначение = Перечисления.ТипыЭД.ПлатежноеПоручение;
	ИначеЕсли ФорматированнаяСтрока = "contract" Тогда
		ВозвращаемоеЗначение = Перечисления.ТипыЭД.Договор;
	ИначеЕсли ФорматированнаяСтрока = "statementappendix" Тогда
		ВозвращаемоеЗначение = Перечисления.ТипыЭД.ПриложениеКАкту;
	ИначеЕсли ФорматированнаяСтрока = "guaranteeletter" Тогда
		ВозвращаемоеЗначение = Перечисления.ТипыЭД.ГарантийноеПисьмо;
	ИначеЕсли ФорматированнаяСтрока = "formalizedstatementcustomer"
		ИЛИ ФорматированнаяСтрока = "formalizedstatementvendor"
		ИЛИ ФорматированнаяСтрока = "formalizedconsignmentcustomer"
		ИЛИ ФорматированнаяСтрока = "formalizedconsignmentvendor"
		ИЛИ ФорматированнаяСтрока = "invoice"
		ИЛИ ФорматированнаяСтрока = "correctiveinvoice"
		ИЛИ ФорматированнаяСтрока = "receivenotification"
		ИЛИ ФорматированнаяСтрока = "specificationnotice"
		ИЛИ ФорматированнаяСтрока = "sendingtimeconfirmation"
		ИЛИ ФорматированнаяСтрока = "other"
		Тогда
		ВозвращаемоеЗначение = Перечисления.ТипыЭД.Прочее;
	Иначе
		ЗаписьВЖурнал = НСтр("ru = 'Не задано сопоставление типа документа из карточки пакета ЭД ""%1"",
			|с перечислением конфигурации ""Типы ЭД""'");
		ЗаписьВЖурнал = СтрЗаменить(ЗаписьВЖурнал, "%1", ТипДокумента);
		ВидОперации = НСтр("ru = 'Чтение карточки пакета ЭД'");
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ЗаписьВЖурнал);
		ВозвращаемоеЗначение = Перечисления.ТипыЭД.Прочее;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Проверяет состояние фонового задания по переданному идентификатору.
//
// Параметры:
//  ИдентификаторЗадания - УникальныйИдентификатор - идентификатор фонового задания. 
//
// Возвращаемое значение:
//  Булево - состояние выполнения задания.
// 
Функция ЗаданиеВыполнено(Знач ИдентификаторЗадания) Экспорт
	
	Если ТипЗнч(ИдентификаторЗадания) = Тип("Строка") Тогда
		ИдентификаторЗадания = Новый УникальныйИдентификатор(ИдентификаторЗадания);
	КонецЕсли;
	
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	
	Если Задание <> Неопределено
		И Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОперацияНеВыполнена = Истина;
	ПоказатьПолныйТекстОшибки = Ложь;
	Если Задание = Неопределено Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Длительные операции.Фоновое задание не найдено'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение, , , Строка(ИдентификаторЗадания));
	Иначе
		Если Задание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
			ОшибкаЗадания = Задание.ИнформацияОбОшибке;
			Если ОшибкаЗадания <> Неопределено Тогда
				ПоказатьПолныйТекстОшибки = Истина;
			КонецЕсли;
		ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Длительные операции.Фоновое задание отменено администратором'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение,
				,
				,
				НСтр("ru = 'Выполнение фонового задания прервано администратором.'"));
			Возврат Истина;
		Иначе
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ПоказатьПолныйТекстОшибки Тогда
		ТекстОшибки = КраткоеПредставлениеОшибки(ПолучитьИнформациюОбОшибке(Задание.ИнформацияОбОшибке));
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПрочитатьКарточкиИзЭлектроннойПочтыАсинхронно(НастройкиЧтенияПочты, АдресХранилищаРезультата) Экспорт
	
	Письма = ПрочитатьПисьма(НастройкиЧтенияПочты);
	
	Если Письма = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	АдресаXMLФайлов = Новый Массив;
	
	Для Каждого Письмо ИЗ Письма Цикл
		Для Каждого Вложение ИЗ Письмо.Вложения Цикл
			Если НЕ ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(Вложение.Ключ) = "xml" Тогда
				Продолжить;
			КонецЕсли;
			АдресВХранилище = ПоместитьВоВременноеХранилище(Вложение.Значение, Новый УникальныйИдентификатор);
			АдресаXMLФайлов.Добавить(АдресВХранилище);
		КонецЦикла;
	КонецЦикла;
	
	ДанныеКарточек = Справочники.Контрагенты.РазобратьКарточкиКонтрагентовXML(АдресаXMLФайлов);
	ПоместитьВоВременноеХранилище(ДанныеКарточек, АдресХранилищаРезультата);
	
КонецПроцедуры

Процедура ПрочитатьДокументыИзЭлектроннойПочтыАсинхронно(НастройкиЧтенияПочты, АдресХранилищаРезультата) Экспорт
	
	ВариантЗагрузкиЭД = НастройкиЧтенияПочты.ВариантЗагрузкиЭД;
	Письма = ПрочитатьПисьма(НастройкиЧтенияПочты);
	
	Если Письма = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	АдресаXMLФайлов = Новый Массив;
	
	Для Каждого Письмо ИЗ Письма Цикл
		
		Для Каждого Вложение ИЗ Письмо.Вложения Цикл
			
			РасширениеИмениФайла = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(Вложение.Ключ);			
			ФайлОбрабатывать = Ложь;
			Если РасширениеИмениФайла = "xlsx" Или РасширениеИмениФайла = "mxl" Тогда
				
				ПараметрыДанных = Новый Структура;
				ИмяВременногоФайла = ПолучитьИмяВременногоФайла(РасширениеИмениФайла);				
				Вложение.Значение.Записать(ИмяВременногоФайла);
				ПараметрыДанных.Вставить("ИмяВременногоФайла", ИмяВременногоФайла);
				ПараметрыДанных.Вставить("Расширение", РасширениеИмениФайла);				
				АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
				ЭлектронныеДокументыБП.ПолучитьДанныеВФорматеБЭД(ПараметрыДанных, АдресХранилища);
				ПолученныеДанные = ПолучитьИзВременногоХранилища(АдресХранилища);				
				Если ПолученныеДанные.Свойство("ТекстОшибки") Тогда
					Продолжить;
				КонецЕсли;
				ПолученныеДанные.Вставить("РасширениеФайла", РасширениеИмениФайла);
				ПолученныеДанные.Вставить("ФайлТабличногоДокумента", Вложение.Значение);
				ФайлОбрабатывать = Истина;
				
			ИначеЕсли РасширениеИмениФайла = "zip" Тогда	
				
				ПолученныеДанные = Новый Структура;
				ПолученныеДанные.Вставить("ДвоичныеДанные", Вложение.Значение);
				ПолученныеДанные.Вставить("РасширениеФайла", РасширениеИмениФайла);				
				ФайлОбрабатывать = Истина;
				
			КонецЕсли;			
			Если ФайлОбрабатывать Тогда
				
				АдресВХранилище = ПоместитьВоВременноеХранилище(ПолученныеДанные, Новый УникальныйИдентификатор);
				АдресаXMLФайлов.Добавить(АдресВХранилище);						
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ВариантЗагрузкиЭД = Перечисления.ВариантыЗагрузкиЭД.СчетНаОплату Тогда
		ДанныеДокументов = Документы.СчетНаОплатуПокупателю.РазобратьСчетаНаОплатуПокупателюXML(АдресаXMLФайлов);
	ИначеЕсли ВариантЗагрузкиЭД = Перечисления.ВариантыЗагрузкиЭД.РеализацияТоваровИУслуг Тогда
		ДанныеДокументов = Документы.РеализацияТоваровУслуг.РазобратьРеализациюТоваровИУслугВXML(АдресаXMLФайлов);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(ДанныеДокументов, АдресХранилищаРезультата);
	
КонецПроцедуры

Процедура ДополнитьСтруктуруРеквизитовСчета(СтруктураРеквизитов, ЕстьОшибки) Экспорт
	
	Запрос = Новый Запрос;
	Если ЗначениеЗаполнено(СтруктураРеквизитов.РеквизитыКонтрагента.КПП) Тогда
		КПП = СтруктураРеквизитов.РеквизитыКонтрагента.КПП;
	Иначе
		КПП = "";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ИНН", СтруктураРеквизитов.РеквизитыКонтрагента.ИНН);
	Запрос.УстановитьПараметр("КПП", КПП);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН
	|	И Контрагенты.КПП = &КПП";
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	Если РезультатЗапроса.Следующий() Тогда
		СтруктураРеквизитов.Вставить("Контрагент", РезультатЗапроса.Ссылка);
	Иначе
		СоздатьКонтрагента(СтруктураРеквизитов, ЕстьОшибки);
	КонецЕсли;
	
	Если Не ЕстьОшибки Тогда
		БанковскийСчетКонтрагента = Справочники.БанковскиеСчета.НайтиПоРеквизиту("НомерСчета",
			СтруктураРеквизитов.РеквизитыКонтрагента.НомерСчета, , СтруктураРеквизитов.Контрагент);
		
		Если ЗначениеЗаполнено(БанковскийСчетКонтрагента) Тогда
			СтруктураРеквизитов.Вставить("СчетКонтрагента", БанковскийСчетКонтрагента);
		Иначе
			СоздатьБанковскийСчетКонтрагента(СтруктураРеквизитов, ЕстьОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЕстьОшибки Тогда
		ЗафиксироватьТранзакцию();
		СтруктураРеквизитов.Вставить("СуммаДокумента"    , СтруктураРеквизитов.ШапкаДокумента.СуммаДокумента);
		СтруктураРеквизитов.Вставить("СтавкаНДС"         , СтруктураРеквизитов.ШапкаДокумента.СтавкаНДС);
		СтруктураРеквизитов.Вставить("СуммаНДС"          , СтруктураРеквизитов.ШапкаДокумента.СуммаНДС);
		НазначениеПлатежа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Нстр("ru='Оплата по счету №%1 от %2'"), СтруктураРеквизитов.ШапкаДокумента.Номер,
			Формат(СтруктураРеквизитов.ШапкаДокумента.Дата, "ДФ=dd.MM.yyyy"));
		СтруктураРеквизитов.Вставить("НазначениеПлатежа", НазначениеПлатежа);
	Иначе
		ОтменитьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьКонтрагента(СтруктураРеквизитов, ЕстьОшибки)
	
	РеквизитыКонтрагента = СтруктураРеквизитов.РеквизитыКонтрагента;
	РеквизитыКонтрагента.Вставить("ЭтоЭлектронныйДокумент", Истина);
	Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
	Контрагент.Заполнить(РеквизитыКонтрагента);
	
	Попытка
		Контрагент.Записать();
		СтруктураРеквизитов.Вставить("Контрагент", Контрагент.Ссылка);
	Исключение
		ЕстьОшибки = Истина;
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Запись нового элемента справочника Контрагенты'"),
			УровеньЖурналаРегистрации.Ошибка,
			Контрагент.Метаданные(),
			Контрагент,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ТекстОшибки = НСтр("ru = 'Ошибка при записи нового элемента справочника Контрагенты
			|Подробности см. в Журнале регистрации.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

Процедура СоздатьБанковскийСчетКонтрагента(СтруктураРеквизитов, ЕстьОшибки)
	
	Банки = Справочники.Банки.ПолучитьТаблицуБанковПоРеквизитам("Код", СтруктураРеквизитов.РеквизитыКонтрагента.БИК);
	Если Банки.Количество() = 0 Тогда
		ЕстьОшибки = Истина;
		ШаблонСообщения = НСтр("ru='Загрузка прервана. БИК %1 банка контрагента не найден в классификаторе банков РФ.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураРеквизитов.РеквизитыКонтрагента.БИК);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	Иначе
		БанкКонтрагента = Банки[0].Ссылка;
	КонецЕсли;
	
	ДанныеРасчетногоСчета = Новый Структура;
	ДанныеРасчетногоСчета.Вставить("ЭтоЭлектронныйДокумент" , Истина);
	ДанныеРасчетногоСчета.Вставить("НомерСчета"             , СтруктураРеквизитов.РеквизитыКонтрагента.НомерСчета);
	ДанныеРасчетногоСчета.Вставить("Владелец"               , СтруктураРеквизитов.Контрагент);
	ДанныеРасчетногоСчета.Вставить("Банк"                   , БанкКонтрагента);
	ДанныеРасчетногоСчета.Вставить("ВалютаДенежныхСредств",
		ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
		
	БанковскийСчетКонтрагента = Справочники.БанковскиеСчета.СоздатьЭлемент();
	БанковскийСчетКонтрагента.Заполнить(ДанныеРасчетногоСчета);
	
	Попытка
		БанковскийСчетКонтрагента.Записать();
		СтруктураРеквизитов.Вставить("СчетКонтрагента", БанковскийСчетКонтрагента.Ссылка);
	Исключение
		ЕстьОшибки = Истина;
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Запись нового элемента справочника Банковские счета'"),
			УровеньЖурналаРегистрации.Ошибка,
			БанковскийСчетКонтрагента.Метаданные(),
			БанковскийСчетКонтрагента,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ТекстОшибки = НСтр("ru = 'Ошибка при записи нового элемента справочника Банковские счета
			|Подробности см. в Журнале регистрации.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

// работа с электронной почтой
Функция СоздатьАдаптированноеОписаниеПисьма(Колонки)
	
	Колонки = Новый Массив;
	Колонки.Добавить("Важность");
	Колонки.Добавить("Вложения");
	Колонки.Добавить("ДатаОтправления");
	Колонки.Добавить("ДатаПолучения");
	Колонки.Добавить("Заголовок");
	Колонки.Добавить("ИмяОтправителя");
	Колонки.Добавить("Идентификатор");
	Колонки.Добавить("Копии");
	Колонки.Добавить("ОбратныйАдрес");
	Колонки.Добавить("Отправитель");
	Колонки.Добавить("Получатели");
	Колонки.Добавить("Размер");
	Колонки.Добавить("Тема");
	Колонки.Добавить("Тексты");
	Колонки.Добавить("Кодировка");
	Колонки.Добавить("СпособКодированияНеASCIIСимволов");
	Колонки.Добавить("Частичное");
	
	Результат = Новый ТаблицаЗначений;
	
	Для Каждого НаименованиеКолонки Из Колонки Цикл
		Результат.Колонки.Добавить(НаименованиеКолонки);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьАдаптированныйНаборПисем(Знач НаборПисем, Знач Колонки = Неопределено)
	
	Результат = СоздатьАдаптированноеОписаниеПисьма(Колонки);
	
	Для Каждого ПочтовоеСообщение Из НаборПисем Цикл
		НоваяСтрока = Результат.Добавить();
		
		Для Каждого НаименованиеКолонки Из Колонки Цикл
			
			Значение = ПочтовоеСообщение[НаименованиеКолонки];
			
			Если ТипЗнч(Значение) = Тип("Строка") Тогда
				Значение = ОбщегоНазначенияКлиентСервер.УдалитьНедопустимыеСимволыXML(Значение);
			КонецЕсли;
			
			Если ТипЗнч(Значение) = Тип("ИнтернетПочтовыеАдреса") Тогда
				значение_итог = "";
				Для Каждого ОчереднойАдрес  Из Значение Цикл
					значение_вр =  ОчереднойАдрес.Адрес;
					Если ЗначениеЗаполнено(ОчереднойАдрес.ОтображаемоеИмя) Тогда
						значение_вр = ОчереднойАдрес.ОтображаемоеИмя + " <" + значение_вр + ">";
					КонецЕсли;
					Если ЗначениеЗаполнено(значение_вр) Тогда
						значение_вр = значение_вр + "; "
					КонецЕсли;
					значение_итог = значение_итог + значение_вр;
				КонецЦикла;
				
				Если ЗначениеЗаполнено(значение_итог) Тогда
					значение_итог = сред(значение_итог, 1, СтрДлина(значение_итог)-2)
				КонецЕсли;
				
				значение = значение_итог;
			КонецЕсли;
			
			Если ТипЗнч(Значение) = Тип("ИнтернетПочтовыйАдрес") Тогда
				значение_вр =  Значение.Адрес;
				Если ЗначениеЗаполнено(Значение.ОтображаемоеИмя) Тогда
					значение_вр = Значение.ОтображаемоеИмя + " <" + значение_вр + ">";
				КонецЕсли;
				значение = значение_вр;
			КонецЕсли;
			
			Если ТипЗнч(Значение) = Тип("ВажностьИнтернетПочтовогоСообщения") Тогда
				значение = Строка(Значение);
			КонецЕсли;
			
			Если ТипЗнч(Значение) = Тип("СпособКодированияНеASCIIСимволовИнтернетПочтовогоСообщения") Тогда
				значение = Строка(Значение);
			КонецЕсли;
			
			Если ТипЗнч(Значение) = Тип("ИнтернетПочтовыеВложения") Тогда
				значение_соотв = Новый Соответствие;
				
				Для Каждого ОчередноеВложение Из Значение Цикл
					ИмяВложения = ОчередноеВложение.Имя;
					Если ТипЗнч(ОчередноеВложение.Данные) = Тип("ДвоичныеДанные") Тогда
						значение_соотв.Вставить(ИмяВложения, ОчередноеВложение.Данные);
					Иначе
						ЗаполнитьВложения(значение_соотв, ИмяВложения, ОчередноеВложение.Данные);
					КонецЕсли;
				КонецЦикла;
				
				значение = значение_соотв;
			КонецЕсли;
			
			Если ТипЗнч(Значение) = Тип("ИнтернетТекстыПочтовогоСообщения") Тогда
				значение_масс = Новый Массив;
				Для Каждого ОчереднойТекст Из Значение Цикл
					значение_соотв = Новый Соответствие;
					
					значение_соотв.Вставить("Данные", ОчереднойТекст.Данные);
					значение_соотв.Вставить("Кодировка", ОчереднойТекст.Кодировка);
					значение_соотв.Вставить("Текст", ОбщегоНазначенияКлиентСервер.УдалитьНедопустимыеСимволыXML(ОчереднойТекст.Текст));
					значение_соотв.Вставить("ТипТекста", Строка(ОчереднойТекст.ТипТекста));
					
					значение_масс.Добавить(значение_соотв);
				КонецЦикла;
				значение = значение_масс;
			КонецЕсли;
			
			НоваяСтрока[НаименованиеКолонки] = Значение;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьВложения(Вложения, ИмяВложения, ИнтернетПочтовоеСообщение)
	
	Для Каждого ИнтернетПочтовоеВложение Из ИнтернетПочтовоеСообщение.Вложения Цикл
		ИмяВложения = ИнтернетПочтовоеВложение.Имя;
		Если ТипЗнч(ИнтернетПочтовоеВложение.Данные) = Тип("ДвоичныеДанные") Тогда
			Вложения.Вставить(ИмяВложения, ИнтернетПочтовоеВложение.Данные);
		Иначе
			ЗаполнитьВложения(Вложения, ИмяВложения, ИнтернетПочтовоеВложение.Данные);
		КонецЕсли;
	КонецЦикла;
	
	Индекс = 0;
	
	Для Каждого ИнтернетТекстыПочтовогоСообщения Из ИнтернетПочтовоеСообщение.Тексты Цикл
		
		Если ИнтернетТекстыПочтовогоСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.HTML Тогда
			Расширение = "html";
		ИначеЕсли ИнтернетТекстыПочтовогоСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст Тогда
			Расширение = "txt";
		Иначе
			Расширение = "rtf";
		КонецЕсли;
		ИмяТекстаВложения = "";
		Пока ИмяТекстаВложения = "" Или Вложения.Получить(ИмяТекстаВложения) <> Неопределено Цикл
			Индекс = Индекс + 1;
			ИмяТекстаВложения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 - (%2).%3", ИмяВложения, Индекс, Расширение);
		КонецЦикла;
		Вложения.Вставить(ИмяТекстаВложения, ИнтернетТекстыПочтовогоСообщения.Данные);
	КонецЦикла;
	
КонецПроцедуры

Функция ПрочитатьПисьма(ПараметрыОтбораПисем)
	
	Письма = Неопределено;
	
	ОдинМегабайтВБайтах = 1048576;
	
	Соединение    = Новый ИнтернетПочта;
	УчетнаяЗапись = ПараметрыОтбораПисем.УчетнаяЗапись;
	Профиль       = РаботаСПочтовымиСообщениямиСлужебный.ИнтернетПочтовыйПрофиль(УчетнаяЗапись, Истина);
	
	Протокол = ПротоколИнтернетПочты.POP3;
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗапись, "ПротоколВходящейПочты") = "IMAP" Тогда
		Протокол = ПротоколИнтернетПочты.IMAP;
	КонецЕсли;
	
	Соединение.Подключиться(Профиль, Протокол);
	
	Если ПараметрыОтбораПисем.ГлубинаПоиска > 0 Тогда
		ПослеДатыОтправления = КонецДня(ТекущаяДатаСеанса()) - 60 * 60 * 24 * ПараметрыОтбораПисем.ГлубинаПоиска + 1;
	Иначе
		ПослеДатыОтправления = '00010101';
	КонецЕсли;
	
	ПараметрыОтбораЗаголовков = Новый Структура;
	ПараметрыОтбораЗаголовков.Вставить("ПослеДатыОтправления", ПослеДатыОтправления);
	
	ЗаголовкиПисем = ЗагрузитьЗаголовкиПочтовыхСообщений(Соединение, ПараметрыОтбораЗаголовков);
	
	Если ЗаголовкиПисем.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗаголовкиПисем.Сортировать("ДатаОтправления Убыв");
	
	ИдентификаторыПисем = Новый Массив;	
	
	Для Каждого ЗаголовокПисьма Из ЗаголовкиПисем Цикл
		Если ЗаголовокПисьма.Размер > ОдинМегабайтВБайтах Тогда
			Продолжить;
		КонецЕсли;		
		ИдентификаторыПисем.Добавить(ЗаголовокПисьма.Идентификатор[0]);
	КонецЦикла;
	
	Если ИдентификаторыПисем.Количество() > 0 Тогда
		ПочтовыеСообщения = ЗагрузитьПочтовыеСообщенияПоИдентификаторам(Соединение, ИдентификаторыПисем);
	КонецЕсли;
	
	Соединение.Отключиться();
	
	Возврат ПочтовыеСообщения;
	
КонецФункции

Функция ЗагрузитьПочтовыеСообщенияПоИдентификаторам(Соединение, ИдентификаторыПисем)
	
	ПочтовыеСообщения = Соединение.Выбрать(Ложь, ИдентификаторыПисем);
	ПочтовыеСообщения = ПолучитьАдаптированныйНаборПисем(ПочтовыеСообщения);
	
	Возврат ПочтовыеСообщения;
	
КонецФункции

Функция ЗагрузитьЗаголовкиПочтовыхСообщений(Соединение, ПараметрыОтбораЗаголовков)
	
	ЗаголовкиПисем = Соединение.ПолучитьЗаголовки(ПараметрыОтбораЗаголовков);
	ЗаголовкиПисем = ПолучитьАдаптированныйНаборПисем(ЗаголовкиПисем);
	
	Возврат ЗаголовкиПисем;
	
КонецФункции

Функция ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке)
	
	Результат = ИнформацияОбОшибке;
	Если ИнформацияОбОшибке <> Неопределено Тогда
		Если ИнформацияОбОшибке.Причина <> Неопределено Тогда
			Результат = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке.Причина);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли