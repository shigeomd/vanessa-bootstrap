&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

&НаКлиенте
Перем ВремяНачалаОперации;

&НаКлиенте
Перем ВыполняетсяПолноеЗакрытиеМесяца;

&НаКлиенте
Перем МаксимальноеКоличествоДокументовДляПерепроведения;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.Организация       = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	Объект.ПериодРегистрации = ПериодПоУмолчанию();
	
	// РегламентнаяОперация
	Если ЗначениеЗаполнено(Параметры.РегламентнаяОперация) Тогда
		Объект.Организация = Параметры.РегламентнаяОперация.Организация;
		Объект.ПериодРегистрации = НачалоМесяца(Параметры.РегламентнаяОперация.Дата);
	КонецЕсли;
	
	// Организация
	Если ЗначениеЗаполнено(Параметры.Организация) Тогда
		Объект.Организация = Параметры.Организация;
	КонецЕсли;
	
	ПодготовкаКВосстановлениюНДСПриПереходеНаУСН = Параметры.ПодготовкаКВосстановлениюНДСПриПереходеНаУСН;
	
	ОбщегоНазначенияБПВызовСервера.ЗаполнитьСписокОрганизаций(Элементы.ПолеОрганизация, СоответствиеОрганизаций);
	ОбщегоНазначенияБПКлиентСервер.УстановитьЗначениеПолеОрганизация(
		ПолеОрганизация, Объект.Организация, Объект.ВключатьОбособленныеПодразделения);
	
	ПолучитьПараметрыОрганизации();
	
	// Период
	Если ЗначениеЗаполнено(Параметры.ПериодРегистрации) Тогда
		Объект.ПериодРегистрации = НачалоМесяца(Параметры.ПериодРегистрации);
	КонецЕсли;
	
	ПредставлениеПериодаРегистрации = ВыборПериодаКлиентСервер.ПолучитьПредставлениеПериодаОтчета(
		Перечисления.ДоступныеПериодыОтчета.Месяц, НачалоМесяца(Объект.ПериодРегистрации), КонецМесяца(Объект.ПериодРегистрации));
	
	УстановитьМожноЗакрыватьМесяц();
	
	НазваниеКонтрольПоследовательности = ЗакрытиеМесяца.ПредставлениеОперацииПерепроведениеДокументов();
	
	// Состояние закрытия месяца
	ЗаполнитьДанныеОбОперациях();
	
	СоздатьПропущенныеОперации();
	
	// Уведомим о появлении нового функционала
	НастройкиПредупреждений = ОбщегоНазначенияБП.НастройкиПредупрежденийОбИзменениях(
		"ПоказатьПредупреждение_ОкруглениеНалогов, УплатаЗемельногоНалогаИП2015");
		
	// Настройка элементов формы
	НастроитьФорму();
	
КонецПроцедуры // ПриСозданииНаСервере

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ОповеститьОбИзменении Тогда // При создании формы могут быть созданы пропущенные операции
		ОповеститьФормыРегламентныхОпераций();
	КонецЕсли;

	ПодключитьОбработчикиОжидания();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьЗакрытиеМесяца" Или ИмяСобытия = "ВыполненаЗаписьДокумента" Тогда
		
		ОбновитьОперации(Параметр);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбщегоНазначенияБПКлиент.ПолеОрганизацияПриИзменении(
		Элемент, 
		ПолеОрганизация,
		Объект.Организация, 
		Объект.ВключатьОбособленныеПодразделения);
		
	ПриИзмененииОрганизации();
	
	ПодключитьОбработчикиОжидания();
	
	Если ОповеститьОбИзменении Тогда // При изменении организации могут быть созданы пропущенные операции
		ОповеститьФормыРегламентныхОпераций();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОткрытие(Элемент, СтандартнаяОбработка)
	
	ОбщегоНазначенияБПКлиент.ПолеОрганизацияОткрытие(Элемент, СтандартнаяОбработка,
		ПолеОрганизация, СоответствиеОрганизаций);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбщегоНазначенияБПКлиент.ПолеОрганизацияОбработкаВыбора(
		Элемент, 
		ВыбранноеЗначение, 
		СтандартнаяОбработка, 
		СоответствиеОрганизаций, 
		Объект.Организация, 
		Объект.ВключатьОбособленныеПодразделения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаРегистрацииПриИзменении(Элемент)

	ПредставлениеПериодаРегистрации = ВыборПериодаКлиентСервер.ПолучитьПредставлениеПериодаОтчета(
		ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц"), 
		НачалоМесяца(Объект.ПериодРегистрации), 
		КонецМесяца(Объект.ПериодРегистрации));
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаРегистрацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыВыбора = Новый Структура("НачалоПериода, КонецПериода", НачалоМесяца(Объект.ПериодРегистрации), КонецМесяца(Объект.ПериодРегистрации));
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериодаМесяц", ПараметрыВыбора, Элементы.ПредставлениеПериодаРегистрации, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура РегламентнаяОперацияНажатие(Элемент)
	
	ВыполняетсяПолноеЗакрытиеМесяца = Ложь;
	
	Индекс = СтрЗаменить(Элемент.Имя, "РегламентнаяОперация", "");
	Попытка 
		Индекс = Число(Индекс);
	Исключение
		Возврат;
	КонецПопытки;
	
	СтрокиТаблицы = ТаблицаОпераций.НайтиСтроки(Новый Структура("НомерЭлементаФормы", Индекс));
	Если СтрокиТаблицы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	СтрокаТаблицы = СтрокиТаблицы[0];
	
	Если СтрокаТаблицы.ВидОперации = НазваниеКонтрольПоследовательности Тогда
		СписокКоманд = КомандыПоследовательности();
	Иначе
		СписокКоманд = КомандыРегламентнойОперации(СтрокаТаблицы);
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СтрокаТаблицы", СтрокаТаблицы);
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ОповещениеВыбораИзМеню = Новый ОписаниеОповещения("РегламентнаяОперацияНажатиеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ПоказатьВыборИзМеню(ОповещениеВыбораИзМеню, СписокКоманд, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбособленноеПодразделениеНажатие(Элемент)
	
	ДанныеОбОрганизации = ОбособленныеПодразделения.НайтиСтроки(Новый Структура("ИмяЭлемента", Элемент.Имя));
	Если ДанныеОбОрганизации.Количество() <> 1 Тогда
		Возврат; // Поломалось
	КонецЕсли;
	СтрокаТаблицы = ДанныеОбОрганизации[0];
	
	СписокКоманд = Новый СписокЗначений;
	СписокКоманд.Добавить("ПерейтиКОбособленномуПодразделению", НСтр("ru = 'Перейти к закрытию месяца по обособленному подразделению'"));
	СписокКоманд.Добавить("ОтчетОВыполненииОпераций",           ИмяКомандыОтчетОВыполненииОпераций());

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СтрокаТаблицы", СтрокаТаблицы);
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ОповещениеВыбораИзМеню = Новый ОписаниеОповещения("ОбособленноеПодразделениеНажатиеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВыборИзМеню(ОповещениеВыбораИзМеню, СписокКоманд, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДругиеОбособленныеПодразделенияНажатие(Элемент)
	
	СписокКоманд = Новый СписокЗначений;
	СписокКоманд.Добавить("ПолныйОтчетВыполнениеОпераций", ИмяКомандыОтчетОВыполненииОпераций());

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ОповещениеВыбораИзМеню = Новый ОписаниеОповещения("ДругиеОбособленныеПодразделенияНажатиеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВыборИзМеню(ОповещениеВыбораИзМеню, СписокКоманд, Элемент);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура КнопкаВыполнить(Команда)
	
	Если НЕ МожноВыполнятьКомандыФормы() Тогда
		Возврат;
	КонецЕсли;

	Если Объект.ВключатьОбособленныеПодразделения Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Нельзя выполнить закрытие месяца в целом по организации'"));
	КонецЕсли;
	
	ПроверитьПоследовательностьИЗакрытьМесяц();
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаОтменить(Команда)
	
	Если НЕ МожноВыполнятьКомандыФормы() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ВключатьОбособленныеПодразделения Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Нельзя отменить закрытие месяца в целом по организации'"));
	КонецЕсли;
	
	ОповеститьФормыРегламентныхОпераций(ОтменитьЗакрытиеМесяца());
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаОтчетПоМесяцу(Команда)
	
	Если НЕ МожноВыполнятьКомандыФормы() Тогда
		Возврат;
	КонецЕсли;
	
	ВывестиОтчетВыполненныеОперации(Объект.Организация, Объект.ВключатьОбособленныеПодразделения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСправкиРасчеты(Команда)
	
	Если НЕ МожноВыполнятьКомандыФормы() Тогда
		Возврат;
	КонецЕсли;
	
	СписокСправок = ПолучитьСписокСправокРасчетовПоВидуОперации(Неопределено);
	Выбор = Неопределено;
	Если СписокСправок.Количество() = 1 Тогда
		Выбор = СписокСправок[0];
		ВывестиСправкуРасчет(Выбор.Значение);
	ИначеЕсли СписокСправок.Количество() > 1 Тогда
		ОповещениеВыбораИзМеню = Новый ОписаниеОповещения("ПоказатьСправкиРасчетыЗавершение", ЭтотОбъект);
		ПоказатьВыборИзМеню(ОповещениеВыбораИзМеню, СписокСправок, Элементы.КнопкаСправкиРасчеты);
	Иначе
		ТекстСообщения = НСтр("ru = 'Отсутствуют выполненные операции, по которым формируются справки-расчеты'");
		Сообщить(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УменьшитьПериод(Команда)
	
	Объект.ПериодРегистрации = НачалоМесяца(Объект.ПериодРегистрации-1);
	ПриИзмененииПериода();
	
	ПодключитьОбработчикиОжидания();
	
	Если ОповеститьОбИзменении Тогда // При увеличении периода могут быть созданы пропущенные операции
		ОповеститьФормыРегламентныхОпераций();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УвеличитьПериод(Команда)
	
	Объект.ПериодРегистрации = КонецМесяца(Объект.ПериодРегистрации)+1;
	ПриИзмененииПериода();
	
	ПодключитьОбработчикиОжидания();
	
	Если ОповеститьОбИзменении Тогда // При изменении периода могут быть созданы пропущенные операции
		ОповеститьФормыРегламентныхОпераций();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// При изменении реквизитов

&НаСервере
Процедура ПриИзмененииОрганизации()

	ПолучитьПараметрыОрганизации();
	
	УстановитьМожноЗакрыватьМесяц();
	
	ЗаполнитьДанныеОбОперациях();
	
	СоздатьПропущенныеОперации();
	
	НастроитьФорму();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПериода()
	
	// Обновляем представление периода на форме.
	ПредставлениеПериодаРегистрации = ВыборПериодаКлиентСервер.ПолучитьПредставлениеПериодаОтчета(
		ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц"),
		Объект.ПериодРегистрации, 
		КонецМесяца(Объект.ПериодРегистрации));

	УстановитьМожноЗакрыватьМесяц();
	
	ЗаполнитьДанныеОбОперациях();
	
	СоздатьПропущенныеОперации();
	
	НастроитьФорму();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Инициализация реквизитов формы

&НаСервере
Процедура ПолучитьПараметрыОрганизации()
	
	НачислениеЗарплаты                       = ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии");
	ИспользуетсяНачислениеЗарплаты           = УчетЗарплаты.ИспользуетсяПодсистемаУчетаЗарплатыИКадров();
	РасчетЗарплатыДляНебольшихОрганизаций    = УчетЗарплаты.РасчетЗарплатыДляНебольшихОрганизаций();
	ВидДокументаНачисленияЗарплаты           = ЗакрытиеМесяца.ВидДокументаНачисленияЗарплаты(Объект.Организация);
	ПредставлениеДокументаНачислениеЗарплаты = Метаданные.Документы[ВидДокументаНачисленияЗарплаты].Представление();
	
	// Заполним реквизит ОбособленныеПодразделения
	ОбособленныеПодразделения.Очистить();
	Для Каждого ОбособленноеПодразделение Из ОбщегоНазначенияБПВызовСервераПовтИсп.ВсяОрганизация(Объект.Организация) Цикл
		ОбособленныеПодразделения.Добавить().Организация = ОбособленноеПодразделение;
	КонецЦикла;
	
	// Заполним параметры многофилиальной организации
	ГоловнаяОрганизация           = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Объект.Организация);
	ЕстьОбособленныеПодразделения = (Объект.Организация <> ГоловнаяОрганизация) ИЛИ (ОбособленныеПодразделения.Количество() > 1);
	
КонецПроцедуры

&НаКлиенте
Функция ИмяКомандыОтчетОВыполненииОпераций()
	Возврат НСтр("ru = 'Отчет о выполнении операций'");
КонецФункции

&НаСервере
Функция ПериодПоУмолчанию()
	
	ТекущийМесяц = НачалоМесяца(ТекущаяДатаСеанса());
	ПериодПоУмолчанию = НачалоМесяца(ТекущийМесяц-1);
	
	// Если месяц рабочей даты меньше прошлого календарного месяца, то используем месяц рабочей даты
	ПериодРабочейДаты = ОбщегоНазначения.РабочаяДатаПользователя();
	Если ЗначениеЗаполнено(ПериодРабочейДаты) Тогда
		МесяцРабочейДаты = (НачалоМесяца(ПериодРабочейДаты));
		Если МесяцРабочейДаты < ПериодПоУмолчанию Тогда
			ПериодПоУмолчанию = МесяцРабочейДаты;
		КонецЕсли;
	КонецЕсли;

	Возврат ПериодПоУмолчанию;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Получение данных о регламентных операциях

&НаСервере
Процедура СоздатьОрганизации(МенеджерВременныхТаблиц, ВместеСОбособленнымиПодразделениями = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если ВместеСОбособленнымиПодразделениями Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Организации.Ссылка КАК Организация
		|ПОМЕСТИТЬ Организации
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ГоловнаяОрганизация = &Организация
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация";
		
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	&Организация КАК Организация
		|ПОМЕСТИТЬ Организации
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация";
		
		Если Объект.ВключатьОбособленныеПодразделения Тогда
			Запрос.УстановитьПараметр("Организация", БухгалтерскийУчетПереопределяемый.ГоловнаяОрганизация(Объект.Организация));
		Иначе
			Запрос.УстановитьПараметр("Организация", Объект.Организация);
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Выполнить();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеОбОперациях()
	
	// ТАБЛИЦА ОПЕРАЦИЙ
	
	// Инициализируем таблицу 
	
	ТаблицаОпераций.Очистить();
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.ВидОперации         = НазваниеКонтрольПоследовательности;
	СтрокаТаблицы.Требуется           = Истина;
	СтрокаТаблицы.РучнаяКорректировка = Ложь;
	СтрокаТаблицы.НомерГруппы         = 0;
	СтрокаТаблицы.НомерЭлементаФормы  = 1;
	
	Для Счетчик = 1 По Перечисления.ВидыРегламентныхОпераций.Количество() Цикл
		СтрокаТаблицы = ТаблицаОпераций.Добавить();
		СтрокаТаблицы.ВидОперации        = Перечисления.ВидыРегламентныхОпераций.Получить(Счетчик - 1);
		СтрокаТаблицы.НомерЭлементаФормы = Счетчик + 1;
		СтрокаТаблицы.НомерГруппы        = ЗакрытиеМесяца.ГруппаПоВидуОперации(СтрокаТаблицы.ВидОперации);
	КонецЦикла;
	
	// Заполняем состояния
	
	Если НЕ МожноЗакрыватьМесяц Тогда
		
		Для Каждого СтрокаТаблицы Из ТаблицаОпераций Цикл
			СтрокаТаблицы.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено;
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;
	
	// Проставим состояние исходя из данных первичных документов
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Создаем временную таблицу Организации
	СоздатьОрганизации(МенеджерВременныхТаблиц);
	
	// Получаем детальный статус закрытия месяца
	ВидыОпераций = ЗакрытиеМесяца.ВсеВидыОпераций();
	Если Объект.ВключатьОбособленныеПодразделения Тогда
		ВидыОпераций = ВидыОпераций.Скопировать(Новый Структура("ПоОрганизацииВЦелом", Истина));
	КонецЕсли;
	
	ЗакрытиеМесяца.СоздатьДетальныйСтатусЗакрытияМесяца(
		МенеджерВременныхТаблиц,
		Объект.ПериодРегистрации,
		Объект.Организация,
		ВидыОпераций);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Статус.ВидОперации КАК ВидОперации,
	|	Статус.Организация КАК Организация,
	|	Статус.ПоОрганизацииВЦелом КАК ПоОрганизацииВЦелом,
	|	Статус.Требуется КАК Требуется,
	|	Статус.РучнаяКорректировка КАК РучнаяКорректировка,
	|	Статус.Состояние КАК Состояние,
	|	Статус.Устарела КАК Устарела,
	|	Статус.Ссылка КАК Ссылка
	|ИЗ
	|	ДетальныйСтатусЗакрытияМесяца КАК Статус
	|
	|УПОРЯДОЧИТЬ ПО
	|	Статус.ВидОперации.Порядок";
	
	СостояниеЗакрытияМесяца = Запрос.Выполнить().Выгрузить();
	
	ПроставитьСостоянияРегламентныхОпераций(СостояниеЗакрытияМесяца);
	
	ПроставитьОсобыеСостояния(); // Для операций, не представленных в СостояниеЗакрытияМесяца
	
	// ТАБЛИЦА ОБОСОБЛЕННЫХ ПОДРАЗДЕЛЕНИЙ
	ЗаполнитьОперацииОбособленныхПодразделений();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОперацииОбособленныхПодразделений()
	
	Если Объект.ВключатьОбособленныеПодразделения Тогда
		
		Для Каждого ДанныеПодразделения Из ОбособленныеПодразделения Цикл
			ДанныеПодразделения.ГруппаКВыполнению = 0;
		КонецЦикла;
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		// Создаем временную таблицу Организации
		СоздатьОрганизации(МенеджерВременныхТаблиц, Истина);
	
		// Получаем детальный статус закрытия месяца
		ВсеВидыОпераций = ЗакрытиеМесяца.ВсеВидыОпераций();
		ВидыОпераций = ВсеВидыОпераций.Скопировать(Новый Структура("ПоОрганизацииВЦелом", Ложь));
		ЗакрытиеМесяца.СоздатьДетальныйСтатусЗакрытияМесяца(
			МенеджерВременныхТаблиц, 
			Объект.ПериодРегистрации,
			Объект.Организация, 
			ВидыОпераций);
	
		// По этим данным определяем статус в разрезе подразделений
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Статус.Организация КАК Организация,
		|	МИНИМУМ(Статус.НомерГруппы) КАК ГруппаКВыполнению
		|ИЗ
		|	ДетальныйСтатусЗакрытияМесяца КАК Статус
		|ГДЕ
		|	Статус.Требуется
		|	И НЕ(Статус.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Пропущено)
		|				ИЛИ Статус.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено)
		|					И НЕ Статус.Устарела)
		|
		|СГРУППИРОВАТЬ ПО
		|	Статус.Организация";
	    
	    СтатусЗакрытияМесяца = Запрос.Выполнить().Выгрузить();
	
		Для Каждого СтрокаСтатуса Из СтатусЗакрытияМесяца Цикл
			
			ДанныеПодразделения = ОбособленныеПодразделения.НайтиСтроки(Новый Структура("Организация", СтрокаСтатуса.Организация));
			Если ДанныеПодразделения.Количество() = 1 Тогда
				ДанныеПодразделения = ДанныеПодразделения[0];
			Иначе
				// Может быть не более одной строки
				ДанныеПодразделения = ОбособленныеПодразделения.Добавить();
				ДанныеПодразделения.Организация = СтрокаСтатуса.Организация;
			КонецЕсли;
			
			ДанныеПодразделения.ГруппаКВыполнению = СтрокаСтатуса.ГруппаКВыполнению;
			
		КонецЦикла;
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроставитьСостоянияРегламентныхОпераций(ТаблицаВыполненныхОпераций)
	
	ТипВидыРегламентныхОпераций = Тип("ПеречислениеСсылка.ВидыРегламентныхОпераций");
	
	Для каждого СтрокаТаблицы Из ТаблицаОпераций Цикл
		СтрокаТаблицы.СправкиРасчеты.Очистить();
		
		Если ТипЗнч(СтрокаТаблицы.ВидОперации) <> ТипВидыРегламентныхОпераций Тогда
			СтрокаТаблицы.Видимость = СтрокаТаблицы.Требуется;
			Продолжить;
		КонецЕсли;
		
		СтрокаВыполненныхОпераций = ТаблицаВыполненныхОпераций.Найти(СтрокаТаблицы.ВидОперации, "ВидОперации");
		
		Если СтрокаВыполненныхОпераций = Неопределено ИЛИ ПодготовкаКВосстановлениюНДСПриПереходеНаУСН И СтрокаТаблицы.НомерГруппы > 1 Тогда
			СтрокаТаблицы.Требуется = Ложь;
			СтрокаТаблицы.Видимость = Ложь;
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаВыполненныхОпераций,
			"Организация, Требуется, РучнаяКорректировка, ПоОрганизацииВЦелом, Ссылка, Состояние, Устарела");
		СтрокаТаблицы.СправкиРасчеты = ПолучитьСписокСправокРасчетовПоВидуОперации(СтрокаТаблицы.ВидОперации);
		УстановитьВидимостьРегламентнойОперации(СтрокаТаблицы);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьРегламентнойОперации(СтрокаТаблицы)
	
	Если ТипЗнч(СтрокаТаблицы.ВидОперации) <> Тип("ПеречислениеСсылка.ВидыРегламентныхОпераций") Тогда
		СтрокаТаблицы.Видимость = СтрокаТаблицы.Требуется;
	Иначе
		СтрокаТаблицы.Видимость =
			СтрокаТаблицы.Требуется
			Или (ЗначениеЗаполнено(СтрокаТаблицы.Ссылка) И СтрокаТаблицы.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроставитьОсобыеСостояния()
	
	// Сбросим значения реквизитов формы, в которых сохраняется информация о нарушении последовательности.
	ДатаНарушенияПоследовательности = '0001-01-01';
	МесяцИсключенИзПерепроведения   = Ложь;
	
	ТекстНадписи  = "";
	СтрокаТаблицы = ТаблицаОпераций.Получить(0);
	Если Не Объект.ВключатьОбособленныеПодразделения Тогда
		// Проверить, требуется ли восстановление
		СведенияОНарушении = СведенияОНарушенииПоследовательности(Объект.Организация, Объект.ПериодРегистрации, Ложь);
		
		МесяцИсключенИзПерепроведения   = СведенияОНарушении.МесяцИсключенИзПерепроведения;
		ДатаНарушенияПоследовательности = СведенияОНарушении.Дата;
		
		Если МесяцИсключенИзПерепроведения Тогда
			СтрокаТаблицы.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Пропущено;
			СтрокаТаблицы.Устарела  = Ложь;
		ИначеЕсли НЕ ЗначениеЗаполнено(ДатаНарушенияПоследовательности) Тогда
			СтрокаТаблицы.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено;
			СтрокаТаблицы.Устарела  = Ложь;
		ИначеЕсли ДатаНарушенияПоследовательности > КонецМесяца(Объект.ПериодРегистрации) Тогда
			СтрокаТаблицы.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено;
			СтрокаТаблицы.Устарела  = Ложь;
		Иначе
			ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '(начиная с %1)'"),
				Формат(ДатаНарушенияПоследовательности, "ДЛФ=Д"));
			
			СтрокаТаблицы.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено;
			СтрокаТаблицы.Устарела  = Истина;
		КонецЕсли;
		
	Иначе
		СтрокаТаблицы.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено;
		СтрокаТаблицы.Требуется = Ложь;
	КонецЕсли;
	
	УстановитьВидимостьРегламентнойОперации(СтрокаТаблицы);
	
	Элементы.ТекстДатаПоследовательности.Заголовок = ТекстНадписи;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьУстаревшиеОперации()
	
	ЗаполнитьОперацииОбособленныхПодразделений();
	
	Для Каждого Операция Из ТаблицаОпераций Цикл
		Если ТипЗнч(Операция.ВидОперации) = Тип("ПеречислениеСсылка.ВидыРегламентныхОпераций") Тогда
			Операция.Устарела = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	СоздатьОрганизации(МенеджерВременныхТаблиц);
	ЗакрытиеМесяца.СоздатьВидыОпераций(МенеджерВременныхТаблиц);
	ЗакрытиеМесяца.СоздатьУстаревшиеОперации(МенеджерВременныхТаблиц, Объект.ПериодРегистрации, Объект.Организация);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УстаревшиеОперации.Организация КАК Организация,
	|	УстаревшиеОперации.ВидОперации КАК ВидОперации
	|ИЗ
	|	УстаревшиеОперации КАК УстаревшиеОперации";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Отбор = Новый Структура;
		Отбор.Вставить("Организация", Выборка.Организация);
		Отбор.Вставить("ВидОперации", Выборка.ВидОперации);
		УстаревшиеОперации = ТаблицаОпераций.НайтиСтроки(Отбор);
		Для Каждого Операция Из УстаревшиеОперации Цикл
			Операция.Устарела = Истина;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеОбОперациях()
	
	ЗаполнитьОперацииОбособленныхПодразделений();
	
	Для Каждого Операция Из ТаблицаОпераций Цикл
		
		Если ТипЗнч(Операция.ВидОперации) <> Тип("ПеречислениеСсылка.ВидыРегламентныхОпераций") Тогда
			Продолжить;
		КонецЕсли;
		
		Операция.Устарела            = Ложь;
		Операция.Состояние           = Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено;
		Операция.РучнаяКорректировка = Ложь;
		Операция.Устарела            = Ложь;
		Операция.Ссылка              = Неопределено;
		
	КонецЦикла;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	СоздатьОрганизации(МенеджерВременныхТаблиц);
	ЗакрытиеМесяца.СоздатьВидыОпераций(МенеджерВременныхТаблиц);
	ЗакрытиеМесяца.СоздатьДанныеРегламентныхОпераций(МенеджерВременныхТаблиц, Объект.ПериодРегистрации, Объект.Организация);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокументов.Организация КАК Организация,
	|	ДанныеДокументов.ВидОперации КАК ВидОперации,
	|	ДанныеДокументов.Состояние,
	|	ДанныеДокументов.РучнаяКорректировка,
	|	ДанныеДокументов.Устарела,
	|	ДанныеДокументов.Ссылка
	|ИЗ
	|	ДанныеРегламентныхОпераций КАК ДанныеДокументов";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Актуализируем состояние регламентных операций
		Отбор = Новый Структура();
		Отбор.Вставить("Организация", Выборка.Организация);
		Отбор.Вставить("ВидОперации", Выборка.ВидОперации);
		
		ОперацииКОбновлению = ТаблицаОпераций.НайтиСтроки(Отбор);
		Если ОперацииКОбновлению.Количество() = 1 Тогда
			ОперацияКОбновлению = ОперацииКОбновлению[0];
			ЗаполнитьЗначенияСвойств(ОперацияКОбновлению, Выборка, "Состояние, РучнаяКорректировка, Устарела, Ссылка");
			УстановитьВидимостьРегламентнойОперации(ОперацияКОбновлению);
		КонецЕсли;
	КонецЦикла;
	
	ПроставитьОсобыеСостояния();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОперации(ЧтоИзменилось)
	
	Если ПодходящийКонтекст(ЧтоИзменилось) Тогда
		// Изменилось то, что повлияет на эту форму
		ОбновитьДанныеОбОперациях();
		ОбновитьСостояниеЗакрытияМесяцаНаФорме();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПодходящийКонтекст(Знач ЧтоИзменилось)
	
	// Определяет, влияет ли то, что изменилось, на эту форму
		
	Если ТипЗнч(ЧтоИзменилось) <> Тип("Структура") Тогда
		Возврат Истина; // Неизвестно, что изменилось. Возможно, что влияет.
	КонецЕсли;
	
	Если ЧтоИзменилось.Свойство("ОбрабатываемыеОперации") Тогда
		ЧтоИзменилось = ЧтоИзменилось.ОбрабатываемыеОперации;
	ИначеЕсли ЧтоИзменилось.Свойство("ДокументСсылка") Тогда
		ЧтоИзменилось = ЧтоИзменилось.ДокументСсылка;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
	Если ТипЗнч(ЧтоИзменилось) = Тип("Массив") Тогда
		Ссылки = ЧтоИзменилось;
	Иначе
		Ссылки = Новый Массив;
		Ссылки.Добавить(ЧтоИзменилось);
	КонецЕсли;
			
	Если Ссылки.Количество() > 1000 Тогда
		// Многое изменилось. Дешевле решить, что и форму затронуло, чем скурпулезно проверять.
		Возврат Истина;
	ИначеЕсли Ссылки.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
			
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылки",              Ссылки);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("НачалоПериода",       НачалоМесяца(Объект.ПериодРегистрации));
	Запрос.УстановитьПараметр("КонецПериода",        КонецМесяца(Объект.ПериодРегистрации));
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегламентнаяОперация.Ссылка
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Организация.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|	И РегламентнаяОперация.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РегламентнаяОперация.Ссылка В(&Ссылки)";
	Возврат Не Запрос.Выполнить().Пустой();
				
КонецФункции	

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИдентификаторПоВидуОперации(ТаблицаОпераций, ВидОперации)

	Отбор = Новый Структура();
	Отбор.Вставить("ВидОперации", ВидОперации);
	
	НайденныеСтроки = ТаблицаОпераций.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Результат = НайденныеСтроки[0].ПолучитьИдентификатор();
	Иначе
		Результат = Неопределено;
	КонецЕсли;

	Возврат Результат;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Отображение элементов формы

&НаСервере
Процедура НастроитьФорму()
	
	Элементы.РегламентныеОперации.Доступность = МожноЗакрыватьМесяц;
	Элементы.КнопкаВыполнить.Доступность      = НЕ Объект.ВключатьОбособленныеПодразделения;
	Элементы.КнопкаОтменить.Доступность       = НЕ Объект.ВключатьОбособленныеПодразделения;
	
	// При открытии формы из "Помощника по переходу на УСН" - организацию изменять нельзя
	Элементы.ПолеОрганизация.Доступность = НЕ ПодготовкаКВосстановлениюНДСПриПереходеНаУСН;
	
	ОбновитьСостояниеЗакрытияМесяцаНаФорме();
	
	// Настроим представления регламентных операций
	Для Каждого СтрокаТаблицы Из ТаблицаОпераций Цикл
		
		ТекущийЭлементНадписи = Элементы.Найти("РегламентнаяОперация" + СтрокаТаблицы.НомерЭлементаФормы);
		
		Если ТекущийЭлементНадписи = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.ВидОперации = Перечисления.ВидыРегламентныхОпераций.НачислениеЗарплаты Тогда
			ТекущийЭлементНадписи.Заголовок = ЗакрытиеМесяца.ПредставлениеОперацииНачислениеЗарплаты(Объект.Организация);
		Иначе
			ТекущийЭлементНадписи.Заголовок  = СтрокаТаблицы.ВидОперации;
		КонецЕсли;
		
	КонецЦикла;
	
	// Установим заголовки групп
	ВыполняетсяПоОбособленномуПодразделению = ЕстьОбособленныеПодразделения И НЕ Объект.ВключатьОбособленныеПодразделения;
	
	КоличествоГрупп = 4;
	Для НомерГруппы = 1 По КоличествоГрупп Цикл 
		
		Элемент = Элементы["Панель" + НомерГруппы];
		
		Если ВыполняетсяПоОбособленномуПодразделению И ЗакрытиеМесяца.ГруппаВыполняетсяПоОрганизацииВЦелом(НомерГруппы) Тогда
			Элемент.Заголовок = "" + НомерГруппы + НСтр("ru = ' - выполняется в целом по организации'");
			Элемент.ЦветТекстаЗаголовка = ЦветаСтиля.НедоступныеДанныеЦвет;
		Иначе
			Элемент.Заголовок = "" + НомерГруппы;
			Элемент.ЦветТекстаЗаголовка = Новый Цвет;
		КонецЕсли;
		
	КонецЦикла;
	
	ПоказатьПредупрежденийОбОкругленииПрибыли = Объект.ПериодРегистрации >= Дата('20140101')
		И УчетнаяПолитика.СистемаНалогообложения(Объект.Организация, Объект.ПериодРегистрации) = Перечисления.СистемыНалогообложения.Общая
		И ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Объект.Организация);
		
	ПоказатьПредупреждениеОбУплатеЗемельногоНалогаИП2015 = Объект.ПериодРегистрации >= Дата('20150101')
		И Месяц(Объект.ПериодРегистрации) % 3 = 0
		И НЕ ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Объект.Организация)
		И Перечисления.УсловияПримененияТребованийЗаконодательства.УсловиеВыполняется(
			Перечисления.УсловияПримененияТребованийЗаконодательства.ЕстьЗемельныеУчастки,
			Объект.ПериодРегистрации, 
			?(Месяц(Объект.ПериодРегистрации) = 12, Перечисления.Периодичность.Год, Перечисления.Периодичность.Квартал),
			Объект.Организация);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеЗакрытияМесяцаНаФорме()
	
	// ОТОБРАЖЕНИЕ ОБОСОБЛЕННЫХ ПОДРАЗДЕЛЕНИЙ
	
	// Локализуем проблему
	Проблемы = Новый Массив;
	КоличествоГрупп  = 4;
	ПроблемнаяГруппа = КоличествоГрупп + 1;
	Если Объект.ВключатьОбособленныеПодразделения Тогда
		
		Для НомерГруппы = 1 По КоличествоГрупп Цикл
			
			Если ЗакрытиеМесяца.ГруппаВыполняетсяПоОрганизацииВЦелом(НомерГруппы) Тогда
				Продолжить;
			КонецЕсли;
			
			Проблемы = ОбособленныеПодразделения.НайтиСтроки(Новый Структура("ГруппаКВыполнению", НомерГруппы));
			Если Проблемы.Количество() > 0 Тогда
				ПроблемнаяГруппа = НомерГруппы;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Отобразим на форме статус подразделений
	МаксимальноеКоличествоПодразделений = 6;
	КоличествоПодразделений = Проблемы.Количество();
	Если КоличествоПодразделений > МаксимальноеКоличествоПодразделений Тогда
		КоличествоПодразделенийЗаСписком = КоличествоПодразделений - МаксимальноеКоличествоПодразделений + 1;
	Иначе
		КоличествоПодразделенийЗаСписком = 0;
	КонецЕсли;
	
	ВывестиСостояниеВФилиалах = МожноЗакрыватьМесяц И (ЕстьОбособленныеПодразделения И Объект.ВключатьОбособленныеПодразделения);
	Для НомерГруппы = 1 По КоличествоГрупп Цикл
		
		Если ПодготовкаКВосстановлениюНДСПриПереходеНаУСН и НомерГруппы > 1 Тогда
			ИмяРеквизита = "КомментарийНедоступностиГруппы" + НомерГруппы;
			Элементы[ИмяРеквизита].Видимость = Истина;
			ЭтотОбъект[ИмяРеквизита] = НСтр("ru = 'Регламентные операции данной группы не выполняются при подготовке к восстановлению НДС в связи с переходом на УСН'");
			Продолжить;
		КонецЕсли;
		
		Если ЗакрытиеМесяца.ГруппаВыполняетсяПоОрганизацииВЦелом(НомерГруппы) Тогда
			Продолжить;
		КонецЕсли;
		
		// Заголовок
		
		ИмяРеквизита = "СостояниеВФилиалахГруппа" + НомерГруппы;
		
		Элементы[ИмяРеквизита].Видимость = ВывестиСостояниеВФилиалах;
		
		Если ВывестиСостояниеВФилиалах Тогда
			
			Если НомерГруппы < ПроблемнаяГруппа Тогда
				ТекстСостоянияГруппы = НСтр("ru = 'Регламентные операции выполнены в обособленных подразделениях'");
			ИначеЕсли НомерГруппы = ПроблемнаяГруппа Тогда
				ТекстСостоянияГруппы = НСтр("ru = 'Требуется выполнить регламентные операции в обособленных подразделениях:'");
			Иначе // Нет проблемы
				ТекстСостоянияГруппы = НСтр("ru = 'Регламентные операции будут выполняться в обособленных подразделениях'");
			КонецЕсли;
				
			ЭтотОбъект[ИмяРеквизита] = ТекстСостоянияГруппы;
			
		КонецЕсли;
		
		// Список подразделений
		
		Для НомерПодразделения = 1 По МаксимальноеКоличествоПодразделений Цикл
			
			ИмяЭлемента = "Группа" + НомерГруппы + "ОбособленноеПодразделение" + НомерПодразделения;
			Элемент = Элементы[ИмяЭлемента];
			
			Если НЕ ВывестиСостояниеВФилиалах 
				Или НомерГруппы <> ПроблемнаяГруппа 
				Или НомерПодразделения > КоличествоПодразделений 
				Или НомерПодразделения = МаксимальноеКоличествоПодразделений И КоличествоПодразделенийЗаСписком > 0 Тогда
				Элемент.Видимость = Ложь;
			Иначе
				СтрокаТаблицы = Проблемы[НомерПодразделения - 1];
				СтрокаТаблицы.ИмяЭлемента = ИмяЭлемента; // Чтобы потом по имени элемента найти организацию
				Элемент.Заголовок = СтрокаТаблицы.Организация;
				Элемент.Видимость = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Элемент = Элементы["Группа" + НомерГруппы + "ДругиеОбособленныеПодразделения"];
		Если НЕ ВывестиСостояниеВФилиалах 
			Или НомерГруппы <> ПроблемнаяГруппа 
			Или КоличествоПодразделенийЗаСписком = 0 Тогда
			Элемент.Видимость = Ложь;
		Иначе
			ПредметИсчисления = НСтр("ru = 'подразделение,подразделения,подразделений'");
			ТекстДругиеОбособленныеПодразделения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '... и еще %1'"),			
				СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(КоличествоПодразделенийЗаСписком,ПредметИсчисления));
			Элемент.Заголовок = ТекстДругиеОбособленныеПодразделения;
			Элемент.Видимость = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	// ОТОБРАЖЕНИЕ ОПЕРАЦИЙ ВЫБРАННОГО ПОДРАЗДЕЛЕНИЯ
	
	Для Каждого СтрокаТаблицы Из ТаблицаОпераций Цикл
		
		ВидимостьОперации = Не МожноЗакрыватьМесяц Или СтрокаТаблицы.Видимость;
		
		ТекущийЭлементНадписи = Элементы.Найти("РегламентнаяОперация" + СтрокаТаблицы.НомерЭлементаФормы);
		ТекущийЭлементГалки   = Элементы.Найти("ПолеГалки" + СтрокаТаблицы.НомерЭлементаФормы);
		
		ТекущийЭлементНадписи.Видимость  = ВидимостьОперации;
		ТекущийЭлементГалки.Видимость    = ВидимостьОперации;
		
		Если СтрокаТаблицы.ВидОперации = НазваниеКонтрольПоследовательности Тогда
			// Элементы для последовательности состоят более, чем из одной гиперссылки.
			Элементы.ГруппаПоследовательность.Видимость = ВидимостьОперации;
		КонецЕсли;

		ТекущийЭлементГалки.Картинка = Новый Картинка;
		
		Если ВидимостьОперации Тогда
			
			ТекущийЭлементНадписи.ЦветТекста = ЦветРегламентнойОперации(СтрокаТаблицы);
			ТекущийЭлементГалки.Картинка     = КартинкаРегламентнойОперации(СтрокаТаблицы);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// ОТОБРАЖЕНИЕ ПЕРЕХОДОВ
	
	Если ПодготовкаКВосстановлениюНДСПриПереходеНаУСН Тогда 
		
		// при подготовке к переходу на УСН (форма открыта из "Помощника по переходу на УСН") -
		// стрелки всегда серые, т.к. показываются только операции 1 группы
		Для НомерСтрелки = 0 По КоличествоГрупп - 1 Цикл
			
			ИмяСтрелки = ИмяСтрелки(НомерСтрелки);
			
			Элементы[ИмяСтрелки+"Доступная"].Видимость = Ложь;
			Элементы[ИмяСтрелки+"Недоступная"].Видимость = Истина;
			
		КонецЦикла;
		
	Иначе
		
		ГруппаВРаботе = КоличествоГрупп;
		
		Для Каждого СтрокаТаблицы Из ТаблицаОпераций Цикл
			
			Если ЗакрытиеМесяцаКлиентСервер.ОперацияВРаботе(СтрокаТаблицы) Тогда
				
				ГруппаВРаботе = Мин(ГруппаВРаботе, СтрокаТаблицы.НомерГруппы);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Объект.ВключатьОбособленныеПодразделения Тогда
			
			Для Каждого СтрокаТаблицы Из ОбособленныеПодразделения Цикл
				
				Если СтрокаТаблицы.ГруппаКВыполнению = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ГруппаВРаботе = Мин(ГруппаВРаботе, СтрокаТаблицы.ГруппаКВыполнению);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Для НомерСтрелки = 0 По КоличествоГрупп - 1 Цикл
			
			ИмяСтрелки = ИмяСтрелки(НомерСтрелки);
			
			ПереходРазрешен = (ГруппаВРаботе > НомерСтрелки);
			Элементы[ИмяСтрелки+"Доступная"].Видимость = ПереходРазрешен;
			Элементы[ИмяСтрелки+"Недоступная"].Видимость = НЕ ПереходРазрешен;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// СТАТУС - НА ПАНЕЛИ НАЧАЛА РАБОТЫ
	
	Отбор = Новый Структура("Видимость", Истина);
	Отбор.Вставить("Состояние", Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено);
	Отбор.Вставить("Устарела", Ложь);
	КоличествоВыполнено          = ТаблицаОпераций.НайтиСтроки(Отбор).Количество();
	Отбор.Вставить("Устарела", Истина);
	КоличествоНеАктуально        = ТаблицаОпераций.НайтиСтроки(Отбор).Количество();
	
	Отбор = Новый Структура("Видимость", Истина);
	Отбор.Вставить("Состояние", Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено);
	Отбор.Вставить("Требуется", Истина);
	КоличествоНеВыполнено        = ТаблицаОпераций.НайтиСтроки(Отбор).Количество();
	
	Отбор = Новый Структура("Видимость", Истина);
	Отбор.Вставить("Состояние", Перечисления.ВидыСостоянийРегламентныхОпераций.ВыполненоСОшибками);
	КоличествоВыполненоСОшибками = ТаблицаОпераций.НайтиСтроки(Отбор).Количество();
	
	Отбор = Новый Структура("Видимость", Истина);
	Отбор.Вставить("Состояние", Перечисления.ВидыСостоянийРегламентныхОпераций.Пропущено);
	КоличествоПропущено          = ТаблицаОпераций.НайтиСтроки(Отбор).Количество();
	
	КоличествоОсталосьВыполнить  = КоличествоВыполненоСОшибками + КоличествоНеВыполнено + КоличествоНеАктуально;
	
	ОтображатьОсталосьВыполнить = (КоличествоОсталосьВыполнить > 0);
	// Не управляем видимостью, чтобы не изменилась высота формы.
	// Изменение высоты формы может привести к неприятному "морганию"
	Если ОтображатьОсталосьВыполнить Тогда 
		Элементы.ТекстОсталосьВыполнить.ЦветТекста      = Новый Цвет;
		Элементы.КоличествоОсталосьВыполнить.ЦветТекста = Новый Цвет;
	Иначе
		Элементы.ТекстОсталосьВыполнить.ЦветТекста      = ЦветаСтиля.ЦветФонаФормы;
		Элементы.КоличествоОсталосьВыполнить.ЦветТекста = ЦветаСтиля.ЦветФонаФормы;
	КонецЕсли;
	
	// Статус - сводно
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		
		Статус      = НСтр("ru = 'Не задана организация'");
		ЦветСтатуса = ЦветаСтиля.ЦветОсобогоТекста;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ПериодРегистрации) Тогда
		
		Статус = НСтр("ru = 'Не задан период'");
		ЦветСтатуса = ЦветаСтиля.ЦветОсобогоТекста;
		
	ИначеЕсли НЕ УчетнаяПолитикаСуществует Тогда
		
		Статус = НСтр("ru = 'Не задана учетная политика'");
		ЦветСтатуса = ЦветаСтиля.ЦветОсобогоТекста;
		
	ИначеЕсли НЕ ОрганизацияДоступна Тогда
		Статус = НСтр("ru = 'Недостаточно прав'");
		ЦветСтатуса = ЦветаСтиля.ЦветОсобогоТекста;
		
	ИначеЕсли КоличествоОсталосьВыполнить = 0 Тогда
		
		Статус      = ?(ПодготовкаКВосстановлениюНДСПриПереходеНаУСН, НСтр("ru = 'Подготовка к восстановлению НДС выполнена'"), НСтр("ru = 'Выполнено'"));
		ЦветСтатуса = WebЦвета.Зеленый;
		
	Иначе
		
		Статус      = ?(ПодготовкаКВосстановлениюНДСПриПереходеНаУСН, НСтр("ru = 'Подготовка к восстановлению НДС'"), НСтр("ru = 'Не выполнено'"));
		ЦветСтатуса = WebЦвета.Черный;
		
	КонецЕсли;
	
	Элементы.Статус.ЦветТекста = ЦветСтатуса;
	
КонецПроцедуры
 
&НаСервере
Функция ИмяСтрелки(НомерСтрелки)
	Возврат "Стрелка" + НомерСтрелки + (НомерСтрелки + 1);
КонецФункции

&НаСервере
Функция ЦветРегламентнойОперации(СтрокаТаблицы)
	
	Если СтрокаТаблицы.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено Тогда
		Если СтрокаТаблицы.Устарела Тогда
			Возврат WebЦвета.СероСиний;
		Иначе
			Возврат WebЦвета.Зеленый;
		КонецЕсли;
	ИначеЕсли СтрокаТаблицы.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.ВыполненоСОшибками Тогда
		Возврат WebЦвета.СветлоКоралловый;
	Иначе
		Возврат ЦветаСтиля.ЦветТекстаФормы;
	КонецЕсли;
		
КонецФункции

&НаСервере
Функция КартинкаРегламентнойОперации(СтрокаТаблицы)
	
	Если СтрокаТаблицы.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено Тогда
		Если СтрокаТаблицы.РучнаяКорректировка Тогда
			Возврат БиблиотекаКартинок.ОперацияИсправлена;
		ИначеЕсли СтрокаТаблицы.Устарела Тогда
			Возврат БиблиотекаКартинок.ОперациюНеобходимоПовторить;
		Иначе
			Возврат БиблиотекаКартинок.ОперацияВыполненаУспешно;
		КонецЕсли;
	ИначеЕсли СтрокаТаблицы.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.ВыполненоСОшибками Тогда
		Возврат БиблиотекаКартинок.ОперацияВыполненаСОшибками;
	ИначеЕсли СтрокаТаблицы.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Пропущено Тогда
		Возврат БиблиотекаКартинок.ОперацияПропущена;
	Иначе
		Возврат Новый Картинка;
	КонецЕсли;

КонецФункции

&НаСервере
Процедура УстановитьМожноЗакрыватьМесяц()
	
	Если Не ЗначениеЗаполнено(Объект.Организация)
		Или Не ЗначениеЗаполнено(Объект.ПериодРегистрации) Тогда
		УчетнаяПолитикаСуществует = Ложь;
		МожноЗакрыватьМесяц       = Ложь;
		ОрганизацияДоступна		  = Ложь;
		Возврат;
	КонецЕсли;
	
	УчетнаяПолитикаСуществует = УчетнаяПолитика.Существует(Объект.Организация, Объект.ПериодРегистрации);
	
	// Проверим доступ к выбранной организации
	ДоступныеОрганизации = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Истина);

	ОрганизацияДоступна = ДоступныеОрганизации.Найти(Объект.Организация) <> Неопределено;
	
	Если ОрганизацияДоступна И Объект.ВключатьОбособленныеПодразделения Тогда
		// Проверим доступ ко всем обособленным подразделениям
		Для Каждого СтрокаОП Из ОбособленныеПодразделения Цикл
			Если ДоступныеОрганизации.Найти(СтрокаОП.Организация) = Неопределено Тогда
				ОрганизацияДоступна = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	МожноЗакрыватьМесяц = УчетнаяПолитикаСуществует И ОрганизацияДоступна;
	
КонецПроцедуры

&НаКлиенте
Функция МожноВыполнятьКомандыФормы()
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Не задана организация'"));
		Возврат Ложь;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ПериодРегистрации) Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Не задан период'"));
		Возврат Ложь;
		
	ИначеЕсли НЕ УчетнаяПолитикаСуществует Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Не задана учетная политика'"));
		Возврат Ложь;
		
	ИначеЕсли НЕ ОрганизацияДоступна Тогда
	
		ПоказатьПредупреждение(, НСтр("ru = 'Недостаточно прав'"));
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Команды гиперссылок

&НаКлиенте
Функция КомандыРегламентнойОперации(СтрокаТаблицы)
	
	СписокКоманд = Новый СписокЗначений;
	
	ДоступноРедактирование = Не ЕстьОбособленныеПодразделения
		Или (Объект.ВключатьОбособленныеПодразделения = СтрокаТаблицы.ПоОрганизацииВЦелом);
	Выполнена = (СтрокаТаблицы.Состояние = ПредопределенноеЗначение("Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено"));
	ЕстьСсылка = ЗначениеЗаполнено(СтрокаТаблицы.Ссылка);
	ДокументРегламентнаяОперация = ЗакрытиеМесяцаКлиентСервер.ИспользуетсяДокументРегламентнаяОперация(СтрокаТаблицы.ВидОперации);
	
	// Просмотр ошибок
	Если СтрокаТаблицы.Состояние = ПредопределенноеЗначение("Перечисление.ВидыСостоянийРегламентныхОпераций.ВыполненоСОшибками") Тогда
		СписокКоманд.Добавить("Ошибки", НСтр("ru = 'Показать ошибки'"),, БиблиотекаКартинок.ОперацияВыполненаСОшибками);
	КонецЕсли;
	
	// Просмотр проводок
	Если ЕстьСсылка И Выполнена Тогда
		СписокКоманд.Добавить("Проводки", НСтр("ru = 'Показать проводки'"),, БиблиотекаКартинок.ЖурналПроводок);
	КонецЕсли;
	
	// Справки-расчеты
	Если Выполнена Тогда
		СписокСправок = СтрокаТаблицы.СправкиРасчеты;
		Для Каждого Справка Из СписокСправок Цикл
			СписокКоманд.Добавить(Справка.Значение, Справка.Представление,, БиблиотекаКартинок.Отчет);
		КонецЦикла;
	КонецЕсли;
	
	// Просмотр списка
	Если Не ДокументРегламентнаяОперация Тогда
		Если СтрокаТаблицы.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыРегламентныхОпераций.НачислениеНДС") Тогда
			СписокКоманд.Добавить("ОткрытьСписок", НСтр("ru = 'Открыть журнал регламентных документов по НДС'"));
		ИначеЕсли СтрокаТаблицы.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыРегламентныхОпераций.НачислениеЗарплаты") Тогда
			ТекстЗаголовка = НСтр("ru = 'Открыть список документов ""%1""'");
			ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаголовка, ПредставлениеДокументаНачислениеЗарплаты);
			СписокКоманд.Добавить("ОткрытьСписок", ТекстЗаголовка);
		ИначеЕсли СтрокаТаблицы.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыРегламентныхОпераций.НачислениеРезерваОтпусков") Тогда
			ТекстЗаголовка = НСтр("ru = 'Открыть список документов ""%1""'");
			ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаголовка, ПредставлениеДокументаНачислениеЗарплаты);
			СписокКоманд.Добавить("ОткрытьСписок", НСтр("ru = 'Открыть список документов ""Начисление оценочных обязательств по отпускам""'"));
		КонецЕсли;
	КонецЕсли;
	
	Если Не ДоступноРедактирование Тогда
		// Можно перейти туда, где редактирование доступно
		СписокКоманд.Добавить("ПерейтиПоОрганизацииВЦелом", НСтр("ru = 'Перейти к закрытию месяца в целом по организации'"));
	Иначе
		// Просмотр документа
		Если ЕстьСсылка
			И СтрокаТаблицы.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыРегламентныхОпераций.НачислениеЗарплаты")
			И НачислениеЗарплаты Тогда
			СписокКоманд.Добавить("ОткрытьНачислениеЗарплаты", НСтр("ru = 'Открыть документ ""Начисление зарплаты""'"),, БиблиотекаКартинок.Лупа);
		КонецЕсли;
		
		Если ЕстьСсылка
			И СтрокаТаблицы.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыРегламентныхОпераций.НачислениеРезерваОтпусков")
			И ИспользуетсяНачислениеЗарплаты Тогда
			СписокКоманд.Добавить("ОткрытьНачислениеРезерваОтпусков", НСтр("ru = 'Открыть документ ""Начисление оценочных обязательств по отпускам""'"),, БиблиотекаКартинок.Лупа);
		КонецЕсли;
		
		// Выполнение операций
		Если СтрокаТаблицы.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыРегламентныхОпераций.НачислениеЗарплаты") Тогда
			Если Не ЕстьСсылка 
				И НачислениеЗарплаты Тогда
				СписокКоманд.Добавить("НачислениеЗарплаты", НСтр("ru = 'Создать документ ""Начисление зарплаты""'"));
			КонецЕсли;
		ИначеЕсли СтрокаТаблицы.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыРегламентныхОпераций.НачислениеРезерваОтпусков") Тогда
			Если Не ЕстьСсылка 
				И ИспользуетсяНачислениеЗарплаты 
				И РасчетЗарплатыДляНебольшихОрганизаций Тогда
				СписокКоманд.Добавить("НачислениеРезерваОтпусков", НСтр("ru = 'Создать документ ""Начисление оценочных обязательств по отпускам""'"));
			КонецЕсли;
		ИначеЕсли СтрокаТаблицы.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыРегламентныхОпераций.НачислениеНДС") Тогда
			СписокКоманд.Добавить("ПомощникНДС", НСтр("ru = 'Открыть ""Помощник по учету НДС""'"));
		Иначе
			СписокКоманд.Добавить("Выполнить", НСтр("ru = 'Выполнить операцию'"),, БиблиотекаКартинок.Провести);
		КонецЕсли;
		
		// Редактирование регламентых операций
		Если ДокументРегламентнаяОперация Тогда
			
			Если ЕстьСсылка И СтрокаТаблицы.Состояние <> ПредопределенноеЗначение("Перечисление.ВидыСостоянийРегламентныхОпераций.НеВыполнено") Тогда
				СписокКоманд.Добавить("Отменить", НСтр("ru = 'Отменить операцию'"),, БиблиотекаКартинок.ОтменаПроведения);
				СписокКоманд.Добавить("ОтменитьПосле", НСтр("ru = 'Отменить операции после выбранной'"));
				Если СтрокаТаблицы.Устарела Тогда
					СписокКоманд.Добавить("Актуальность", НСтр("ru = 'Пометить как выполненные все операции до выбранной'"));
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаТаблицы.Состояние <> ПредопределенноеЗначение("Перечисление.ВидыСостоянийРегламентныхОпераций.Пропущено") Тогда
				СписокКоманд.Добавить("Пропустить", НСтр("ru = 'Пропустить операцию'"),, БиблиотекаКартинок.ОперацияПропущена);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СписокКоманд;
	
КонецФункции // КомандыРегламентнойОперации

&НаКлиенте
Функция КомандыПоследовательности()
	
	СписокКоманд = Новый СписокЗначений;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация)
		ИЛИ НЕ ЗначениеЗаполнено(Объект.ПериодРегистрации) Тогда
		Возврат СписокКоманд;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаНарушенияПоследовательности)
		И ДатаНарушенияПоследовательности < НачалоМесяца(Объект.ПериодРегистрации) Тогда

		СписокКоманд.Добавить("ПерейтиКМесяцуНарушенияПоследовательности",
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Перейти к закрытию месяца за %1 г. для перепроведения с %2'"),
				Формат(ДатаНарушенияПоследовательности, "ДФ='ММММ гггг'"),
				Формат(ДатаНарушенияПоследовательности, "ДЛФ=Д")));
	
	Иначе
		СписокКоманд.Добавить("ПерепровестиДокументы", НСтр("ru = 'Выполнить операцию'"),, БиблиотекаКартинок.Провести);
	КонецЕсли;

	Если НЕ МесяцИсключенИзПерепроведения Тогда
		СписокКоманд.Добавить("ПропуститьПоследовательность", НСтр("ru = 'Пропустить операцию'"),, БиблиотекаКартинок.ОперацияПропущена);
	КонецЕсли;

	Возврат СписокКоманд;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаНажатияКнопкиМеню(Команда, Элемент, СтрокаТаблицы)
	
	Если Найти(Команда,"СправкаРасчет") <> 0 Тогда
		ВывестиСправкуРасчет(Команда);
	ИначеЕсли Команда = "ОткрытьСписок" Тогда
		Если СтрокаТаблицы.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыРегламентныхОпераций.НачислениеНДС") Тогда
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("ПериодРегистрации", Объект.ПериодРегистрации);
			ПараметрыФормы.Вставить("Организация",       Объект.Организация);
			ОткрытьФорму("ЖурналДокументов.РегламентныеОперацииНДС.ФормаСписка", ПараметрыФормы, ЭтотОбъект);
		ИначеЕсли СтрокаТаблицы.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыРегламентныхОпераций.НачислениеЗарплаты") Тогда
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("ПериодРегистрации", КонецМесяца(Объект.ПериодРегистрации));
			ПараметрыФормы.Вставить("МесяцНачисления",   КонецМесяца(Объект.ПериодРегистрации));
			ПараметрыФормы.Вставить("Организация",       Объект.Организация);
			ОткрытьФорму("Документ." + ВидДокументаНачисленияЗарплаты + ".ФормаСписка", ПараметрыФормы, ЭтотОбъект);
		ИначеЕсли СтрокаТаблицы.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыРегламентныхОпераций.НачислениеРезерваОтпусков") Тогда
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("ПериодРегистрации", КонецМесяца(Объект.ПериодРегистрации));
			ПараметрыФормы.Вставить("МесяцНачисления",   КонецМесяца(Объект.ПериодРегистрации));
			ПараметрыФормы.Вставить("Организация",       Объект.Организация);
			ОткрытьФорму("Документ.НачислениеОценочныхОбязательствПоОтпускам.ФормаСписка", ПараметрыФормы, ЭтотОбъект);
		КонецЕсли;
	ИначеЕсли Команда = "ПерейтиПоОрганизацииВЦелом"  Тогда
		Объект.Организация = ГоловнаяОрганизация;
		Объект.ВключатьОбособленныеПодразделения = Истина;
		ОбщегоНазначенияБПКлиентСервер.УстановитьЗначениеПолеОрганизация(ПолеОрганизация, Объект.Организация, Объект.ВключатьОбособленныеПодразделения);
		ПриИзмененииОрганизации();
	ИначеЕсли Команда = "ПерейтиКОбособленномуПодразделению" Тогда
		Объект.Организация = СтрокаТаблицы.Организация;
		Объект.ВключатьОбособленныеПодразделения = Ложь;
		ОбщегоНазначенияБПКлиентСервер.УстановитьЗначениеПолеОрганизация(ПолеОрганизация, Объект.Организация, Объект.ВключатьОбособленныеПодразделения);
		ПриИзмененииОрганизации();
	ИначеЕсли Команда = "НачислениеЗарплаты" Тогда
		ВыполнитьРегламентнуюОперацию(СтрокаТаблицы);
		ОповеститьОбИзменении(Тип("ДокументСсылка." + ВидДокументаНачисленияЗарплаты));
	ИначеЕсли Команда = "НачислениеРезерваОтпусков" Тогда
		ВыполнитьРегламентнуюОперацию(СтрокаТаблицы);
		ОповеститьОбИзменении(Тип("ДокументСсылка.НачислениеОценочныхОбязательствПоОтпускам"));
	ИначеЕсли Команда = "ПомощникНДС" Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация", Объект.Организация);
		ПараметрыФормы.Вставить("Период",      Объект.ПериодРегистрации);
		ОткрытьФорму("Обработка.ПомощникПоУчетуНДС.Форма.Форма", ПараметрыФормы, ЭтотОбъект);
	ИначеЕсли Команда = "Выполнить" Тогда
		ПроверитьПредыдущиеИВыполнитьРегламентнуюОперацию(СтрокаТаблицы);
	ИначеЕсли Команда = "ОтменитьПосле" Тогда
		ОтменитьЗакрытиеМесяца(СтрокаТаблицы.ВидОперации);
		ОповеститьФормыОбИзменении();
	ИначеЕсли Команда = "Актуальность" Тогда
		УстановитьГраницуПроведенияЗакрытияМесяца(СтрокаТаблицы.ВидОперации);
	ИначеЕсли Команда = "ПерейтиКМесяцуНарушенияПоследовательности" Тогда
		ПерейтиКЗакрытиюМесяца(ДатаНарушенияПоследовательности);
	ИначеЕсли Команда = "ПерепровестиДокументы" Тогда
		ПерепровестиДокументы(Истина);
	ИначеЕсли Команда = "ПропуститьПоследовательность" Тогда
		ПропуститьПоследовательность();
	ИначеЕсли Команда = "Проводки" Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ДокументДвижений", СтрокаТаблицы.Ссылка);
		ОткрытьФорму("Обработка.КорректировкаДвижений.Форма", ПараметрыФормы, ЭтотОбъект, СтрокаТаблицы.Ссылка);
	ИначеЕсли Команда = "Ошибки" Тогда
		ЗакрытиеМесяцаКлиент.ОткрытьФормуОшибок(СтрокаТаблицы.Ссылка);
	ИначеЕсли Команда = "ОткрытьНачислениеЗарплаты" 
		ИЛИ Команда = "ОткрытьНачислениеРезерваОтпусков" Тогда
		ПоказатьЗначение(, СтрокаТаблицы.Ссылка);
	ИначеЕсли Команда = "Отменить" Тогда
		ОтменитьРегламентнуюОперацию(СтрокаТаблицы.ПолучитьИдентификатор());
		// т.к. рег.операция не проводится, управляется программно, то
		// также программно вызовем Оповещение
		ПоказатьОповещениеПользователя("Операция отменена", ПолучитьНавигационнуюСсылку(СтрокаТаблицы.Ссылка));
		ОповеститьФормыРегламентныхОпераций(СтрокаТаблицы.Ссылка);
	ИначеЕсли Команда = "Пропустить" Тогда
		ПропуститьОперацию(СтрокаТаблицы.ПолучитьИдентификатор());
		// т.к. рег.операция не проводится, управляется программно, то
		// также программно вызовем Оповещение
		ПоказатьОповещениеПользователя("Операция пропущена", ПолучитьНавигационнуюСсылку(СтрокаТаблицы.Ссылка), Строка(СтрокаТаблицы.Ссылка));
		ОповеститьФормыРегламентныхОпераций(СтрокаТаблицы.Ссылка);
	ИначеЕсли Команда = "ОтчетОВыполненииОпераций" Тогда
		ВывестиОтчетВыполненныеОперации(СтрокаТаблицы.Организация);
	ИначеЕсли Команда = "ПолныйОтчетВыполнениеОпераций" Тогда
		ВывестиОтчетВыполненныеОперации(Объект.Организация, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКЗакрытиюМесяца(НовыйПериодРегистрации)

	Объект.ПериодРегистрации = НачалоМесяца(НовыйПериодРегистрации);
	
	ПриИзмененииПериода();
	
	ПодключитьОбработчикиОжидания();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Описание оповещений

&НаКлиенте
Процедура РегламентнаяОперацияНажатиеЗавершение(Команда, ДополнительныеПараметры) Экспорт

	Если Команда <> Неопределено Тогда
		ОбработкаНажатияКнопкиМеню(Команда.Значение, ДополнительныеПараметры.Элемент, ДополнительныеПараметры.СтрокаТаблицы);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбособленноеПодразделениеНажатиеЗавершение(Команда, ДополнительныеПараметры) Экспорт

	Если Команда <> Неопределено Тогда
		ОбработкаНажатияКнопкиМеню(Команда.Значение, ДополнительныеПараметры.Элемент, ДополнительныеПараметры.СтрокаТаблицы);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДругиеОбособленныеПодразделенияНажатиеЗавершение(Команда, ДополнительныеПараметры) Экспорт

	Если Команда <> Неопределено Тогда
		ОбработкаНажатияКнопкиМеню(Команда.Значение, ДополнительныеПараметры.Элемент, Неопределено);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСправкиРасчетыЗавершение(Выбор, ДополнительныеПараметры) Экспорт

	Если Не Выбор = Неопределено Тогда
		ВывестиСправкуРасчет(Выбор.Значение);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ПериодРегистрации = РезультатВыбора.НачалоПериода;
	
	ПриИзмененииПериода();
	
	ПодключитьОбработчикиОжидания();
	
	Если ОповеститьОбИзменении Тогда // При изменении периода могут быть созданы пропущенные операции
		ОповеститьФормыРегламентныхОпераций();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Длительные операции - общие методы

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура ПроверитьЗавершениеДлительнойОперации(ИмяОбработчикаОжидания, ВыводитьСообщенияПользователю, ЗакрытьФормуДлительнойОперации)
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			
			Если ЗакрытьФормуДлительнойОперации Тогда
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			КонецЕсли;
			
			Результат = ОбновитьДанныеОперацийПоРезультатуДлительнойОперации(ВыводитьСообщенияПользователю);
			
			ОбработатьИзменениеРегламентныхОперацийНаКлиенте(Результат);

			Если ЗакрытьФормуДлительнойОперации Тогда
				// Замер выполняется до тех пор, пока пользователю не будет доступен 
				// интерфейс, поэтому если форма закрывается, то и замер прекращается.
				ЗакончитьЗамерВремени();
			КонецЕсли;
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				ИмяОбработчикаОжидания,
				ПараметрыОбработчикаОжидания.ТекущийИнтервал,
				Истина);
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьЗавершениеДлительнойОперации()

	ПроверитьЗавершениеДлительнойОперации("Подключаемый_ПроверитьЗавершениеДлительнойОперации", Истина, Истина);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьЗавершениеПерепроведения()
	
	// Возникшие в ходе перепроведения документов ошибки отображаются
	// в виде специального отчета об ошибках, поэтому системый вывод
	// сообщений не требуется.
	ПроверитьЗавершениеДлительнойОперации("Подключаемый_ПроверитьЗавершениеПерепроведения", Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьЗавершениеПерепроведенияВРамкахЗакрытия()
	
	// Возникшие в ходе перепроведения документов ошибки отображаются
	// в виде специального отчета об ошибках, поэтому системый вывод
	// сообщений не требуется. 
	// Форму длительных операций не закрываем, 
	// т.к. далее будет запуск регламетных операций закрытия месяца.
	ПроверитьЗавершениеДлительнойОперации("Подключаемый_ПроверитьЗавершениеПерепроведенияВРамкахЗакрытия", Ложь, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПредупреждениеОкруглениеПрибыли()
	
	ОбщегоНазначенияБПКлиент.ПоказатьПредупреждениеОбИзменениях("ОкруглениеПрибыли2014", , НастройкиПредупреждений);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Закрытие месяца "одной кнопкой" (используется механизм ДлительныеОперации)

&НаКлиенте
Процедура ПроверитьПоследовательностьИЗакрытьМесяц()

	// При закрытии месяца сначала проверим состояние последовательности.
	// Замер времени включаем в ЗакрытьМесяц(), чтобы учитывать только 
	// выполнение регламентных операций.
	
	Если НЕ Объект.ВключатьОбособленныеПодразделения Тогда
		
		СведенияОНарушении = СведенияОНарушенииПоследовательности(Объект.Организация, Объект.ПериодРегистрации, Истина);
		
		Если СведенияОНарушении <> Неопределено
			И ЗначениеЗаполнено(СведенияОНарушении.Дата)
			И НЕ СведенияОНарушении.МесяцИсключенИзПерепроведения Тогда
			
			Если СведенияОНарушении.Дата >= НачалоМесяца(Объект.ПериодРегистрации)
				И СведенияОНарушении.Дата <= КонецМесяца(Объект.ПериодРегистрации) Тогда
				// Напомним пользователю, что сначала необходимо перепровести документы

				Если СведенияОНарушении.КоличествоДокументовДляПерепроведения < МаксимальноеКоличествоДокументовДляПерепроведения Тогда
					ПерепровестиДокументы(Ложь);
				Иначе
		
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'В ходе закрытия месяца необходимо выполнить перепроведение документов, 
						|начиная с %1 (более %2 документов).'"),
						Формат(СведенияОНарушении.Дата, "ДЛФ=Д"),
						СведенияОНарушении.КоличествоДокументовДляПерепроведения);
					
					ОписаниеОповещения = Новый ОписаниеОповещения(
						"ПроверитьПоследовательностьИЗакрытьМесяцЗавершение", ЭтотОбъект);

					СписокКнопок = Новый СписокЗначений;
					СписокКнопок.Добавить("ВыполнитьВсе", НСтр("ru = 'Выполнить все'"));
					СписокКнопок.Добавить("Отмена", НСтр("ru = 'Отмена'"));
						
					ПоказатьВопрос(ОписаниеОповещения, ТекстСообщения, СписокКнопок, , "Отмена");
				
				КонецЕсли;
				
				Возврат;
			
			Иначе

				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Сначала необходимо выполнить перепроведение документов за %1 г., 
					|начиная с %2.'"),
					Формат(СведенияОНарушении.Дата, "ДФ='ММММ гггг'"),
					Формат(СведенияОНарушении.Дата, "ДЛФ=Д"));
					
				ПоказатьПредупреждение(, ТекстСообщения);
				Возврат;
					
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;

	// Сразу запускаем закрытие
	ЗакрытьМесяц();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПоследовательностьИЗакрытьМесяцЗавершение(ВыбранныйВариант, ДополнительныеПараметры) Экспорт

	Если ВыбранныйВариант = "ВыполнитьВсе" Тогда
	
		// Выполняем запуск перепроведения, а потом уже закрытие
		ПерепровестиДокументы(Ложь);
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьМесяц(ИдентификаторСтроки = Неопределено)

	// В состав замера времени включается только время выполнения регламентных операций
	// по закрытию месяца. Время, затрачиваемое на перепроведение документов, в замер 
	// не входит. Оно зависит от количества документов в базе, поэтому его нельзя 
	// сравнивать с фиксированным временем ключевой операции.
	НачатьЗамерВремени();
	
	ИБФайловая = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая;
	Результат  = ЗапуститьЗакрытиеМесяца(ИБФайловая, ИдентификаторСтроки);
	
	Если Результат <> Неопределено Тогда
		// Результат получен и уже обработан на стороне сервера
		ОбработатьИзменениеРегламентныхОперацийНаКлиенте(Результат);
		ЗакончитьЗамерВремени();
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		// Результата еще нет, но есть шансы дождаться
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьЗавершениеДлительнойОперации", 1, Истина);
		
		// Если вызывается после группового перепроведения, то форма может уже быть на экране.
		НадоОткрытьФорму = Истина;
		
		Если ТипЗнч(ФормаДлительнойОперации) = Тип("УправляемаяФорма") Тогда
			Если ФормаДлительнойОперации.Открыта() Тогда
				ФормаДлительнойОперации.ИдентификаторЗадания = ИдентификаторЗадания;
				НадоОткрытьФорму = Ложь;
			КонецЕсли;
		КонецЕсли;
		Если НадоОткрытьФорму Тогда
			ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗапуститьЗакрытиеМесяца(ИБФайловая, ИдентификаторФинишнойОперации = Неопределено)
	
	Если ИдентификаторФинишнойОперации = Неопределено Тогда
		ФинишнаяОперация    = Неопределено;
		ВидФинишнойОперации = ВидФинишнойОперации;
	Иначе
		ФинишнаяОперация = ТаблицаОпераций.НайтиПоИдентификатору(ИдентификаторФинишнойОперации);
		ВидФинишнойОперации = ФинишнаяОперация.ВидОперации;
	КонецЕсли;
	
	Если Не Объект.ВключатьОбособленныеПодразделения Тогда
		СтатусЗакрытияМесяца = ТаблицаОпераций.Выгрузить();
	Иначе
		Если ФинишнаяОперация <> Неопределено Тогда
			ГруппаКВыполнению = ФинишнаяОперация.НомерГруппы;
		Иначе
			// Определим группу, которую можно выполнять по организации в целом
			КоличествоГрупп   = 4;
			ГруппаКВыполнению = 0;
			Для НомерГруппы = 1 По КоличествоГрупп Цикл
				Если ЗакрытиеМесяца.ГруппаВыполняетсяПоОрганизацииВЦелом(НомерГруппы) Тогда
					ГруппаКВыполнению = НомерГруппы;
				Иначе
					Проблемы = ОбособленныеПодразделения.НайтиСтроки(Новый Структура("ГруппаКВыполнению", НомерГруппы));
					Если Проблемы.Количество() > 0 Тогда
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
			
		Отбор = Новый Структура("НомерГруппы", ГруппаКВыполнению);
		СтатусЗакрытияМесяца = ТаблицаОпераций.Выгрузить(Отбор);
		
	КонецЕсли;
	
	// Параметры обернем в структуру для их передачи в Обработки.ЗакрытиеМесяца.ЗакрытьМесяц()
	// через механизм ДлительныеОперации.
	ПараметрыФункции = Новый Структура();
	ПараметрыФункции.Вставить("Организация",          Объект.Организация);
	ПараметрыФункции.Вставить("Период",               Объект.ПериодРегистрации);
	ПараметрыФункции.Вставить("СтатусЗакрытияМесяца", СтатусЗакрытияМесяца);
	ПараметрыФункции.Вставить("ФинишнаяОперация",     ВидФинишнойОперации);
	// При закрытии месяца по головной организации не следует выполнять операции, которые выполняются по организации в целом
	ПараметрыФункции.Вставить(
		"ТолькоОперацииОбособленногоПодразделения", 
		ЕстьОбособленныеПодразделения И Не Объект.ВключатьОбособленныеПодразделения);
	
	Если ИБФайловая Тогда
		
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		Обработки.ЗакрытиеМесяца.ЗакрытьМесяц(ПараметрыФункции, АдресХранилища);
		
	Иначе
		
		// Возможно, что фоновое задание было запущено раньше, 
		// пользователь дал команду его отменить, однако задание не отменено.
		// В таком случае не следует запускать задание повторно - следует дождаться его выполнения.
		// Мы можем отследить ситуацию только, если все это происходит в одной форме.
		// Потому что подсистема ДлительныеОперации не умеет устанавливать ключ фонового задания.
		Если ЗакрытиеМесяца.ЗаданиеЕщеВыполняется(ИдентификаторЗадания) Тогда
			// Надо ждать
			Возврат Неопределено;
		КонецЕсли;
		
		НаименованиеФоновогоЗадания = НСтр("ru = 'Формирование операций по закрытию месяца'");
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор, 
			"Обработки.ЗакрытиеМесяца.ЗакрытьМесяц", 
			ПараметрыФункции, 
			НаименованиеФоновогоЗадания);
			
		АдресХранилища       = Результат.АдресХранилища;
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		
		Если Не Результат.ЗаданиеВыполнено Тогда
			// Надо ждать
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	// Задание выполнено.
	// Результат выполнения возвращен через хранилище значения.
	// Загрузим его в форму и передадим данные на клиент.
	Возврат ОбновитьДанныеОперацийПоРезультатуДлительнойОперации(Истина);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Выполнение регламентной операции (используется механизм ДлительныеОперации)

&НаКлиенте
Процедура ПроверитьПредыдущиеИВыполнитьРегламентнуюОперацию(СтрокаТаблицы)

	Если (СтрокаТаблицы.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыРегламентныхОпераций.НачислениеЗарплаты")
		И СтрокаТаблицы.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыРегламентныхОпераций.НачислениеРезерваОтпусков"))
		И НЕ Объект.ВключатьОбособленныеПодразделения Тогда
		
		ВыполняетсяПоОбособленномуПодразделению = ЕстьОбособленныеПодразделения И НЕ Объект.ВключатьОбособленныеПодразделения;
		
		СтатусПредыдущихОпераций = СтатусВыполненияПредыдущихОпераций(
			Объект.Организация, Объект.ПериодРегистрации, СтрокаТаблицы.ВидОперации, 
			ВыполняетсяПоОбособленномуПодразделению);
		
		// Если за предыдущий месяц все выполнено, то спросим у пользователя, 
		// хочет ли он повторно выполнить перепроведение документов 
		// и предыдущие рег.операции до выбранной.
		ТекстСообщения = "";
		
		КоличествоДокументовДляПерепроведения 	= 0;
		ТекстПредыдущихОперацийКВыполнению		= СтатусПредыдущихОпераций.ТекстПредыдущихОперацийКВыполнению;
		КоличествоПредыдущихОперацийКВыполнению = СтатусПредыдущихОпераций.КоличествоПредыдущихОперацийКВыполнению;
		СведенияОНарушении						= СтатусПредыдущихОпераций.СведенияОНарушении;
		ТолькоОперацииВЦеломПоОрганизации		= СтатусПредыдущихОпераций.ТолькоОперацииВЦеломПоОрганизации;
		ЕстьОперацииВЦеломПоОрганизации			= СтатусПредыдущихОпераций.ЕстьОперацииВЦеломПоОрганизации;
		ДатаНачалаПерепроведения				= '0001-01-01';
	
		ПоследовательностьНарушенаВПредыдущемМесяце = Ложь;
		
		Если СведенияОНарушении <> Неопределено 
			И ЗначениеЗаполнено(СведенияОНарушении.Дата) 
			И НЕ СведенияОНарушении.МесяцИсключенИзПерепроведения Тогда
			
			ДатаНачалаПерепроведения = СведенияОНарушении.Дата;
		
			Если СведенияОНарушении.Дата < НачалоМесяца(Объект.ПериодРегистрации) Тогда
				ПоследовательностьНарушенаВПредыдущемМесяце = Истина; 

			ИначеЕсли СведенияОНарушении.Дата <= КонецМесяца(Объект.ПериодРегистрации) Тогда

				Если СведенияОНарушении.КоличествоДокументовДляПерепроведения >= МаксимальноеКоличествоДокументовДляПерепроведения
					ИЛИ КоличествоПредыдущихОперацийКВыполнению <> 0 Тогда
					КоличествоДокументовДляПерепроведения 	= СведенияОНарушении.КоличествоДокументовДляПерепроведения;
				КонецЕсли;

			КонецЕсли;
		КонецЕсли;
		
		Если СтатусПредыдущихОпераций.ОперацииПредыдущегоМесяцаВыполнены И НЕ ПоследовательностьНарушенаВПредыдущемМесяце Тогда
			
			ТекстРегОперации = Строка(СтрокаТаблицы.ВидОперации);
			
			Если КоличествоДокументовДляПерепроведения > 0 И КоличествоПредыдущихОперацийКВыполнению > 0 Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'До выполнения ""%1"" следует выполнить:
					| - Перепроведение документов, начиная с %2 (более %3 документов),
					|%4.'"),
					ТекстРегОперации,
					Формат(ДатаНачалаПерепроведения, "ДЛФ=Д"),
					КоличествоДокументовДляПерепроведения,
					ТекстПредыдущихОперацийКВыполнению);

			ИначеЕсли КоличествоДокументовДляПерепроведения > 0 Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'До выполнения ""%1"" следует выполнить перепроведение документов, начиная с %2 (более %3 документов).'"),
					ТекстРегОперации,
					Формат(ДатаНачалаПерепроведения, "ДЛФ=Д"),
					КоличествоДокументовДляПерепроведения);
			
			ИначеЕсли ТолькоОперацииВЦеломПоОрганизации Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'До выполнения ""%1"" следует выполнить:
					|%2.'"),
					ТекстРегОперации,
					ТекстПредыдущихОперацийКВыполнению);
					
			ИначеЕсли КоличествоПредыдущихОперацийКВыполнению > 0 Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'До выполнения ""%1"" следует выполнить:
					|%2.'"),
					ТекстРегОперации,
					ТекстПредыдущихОперацийКВыполнению);

			КонецЕсли;
			
			Если НЕ ПустаяСтрока(ТекстСообщения) Тогда

				ДополнительныеПараметры = Новый Структура();
				ДополнительныеПараметры.Вставить("СтрокаТаблицы", СтрокаТаблицы);
				
				ОписаниеОповещения = Новый ОписаниеОповещения(
					"ПроверитьПредыдущиеИВыполнитьРегламентнуюОперациюЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			
				СписокКнопок = Новый СписокЗначений;
				Если ТолькоОперацииВЦеломПоОрганизации Тогда
					СписокКнопок.Добавить("ПерейтиПоОрганизацииВЦелом", НСтр("ru = 'Перейти к закрытию месяца в целом по организации'"));
				Иначе
					Если ЕстьОперацииВЦеломПоОрганизации Тогда
						СписокКнопок.Добавить("ВыполнитьВсе", НСтр("ru = 'Выполнить все по обособленному подразделению'"));
					Иначе
						СписокКнопок.Добавить("ВыполнитьВсе", НСтр("ru = 'Выполнить все'"));
					КонецЕсли;
				КонецЕсли;
				СписокКнопок.Добавить("Отмена", НСтр("ru = 'Отмена'"));
					
				ПоказатьВопрос(ОписаниеОповещения, ТекстСообщения, СписокКнопок, , "Отмена");
				
				Возврат;
				
			Иначе
			
				Если СведенияОНарушении <> Неопределено 
					И ЗначениеЗаполнено(СведенияОНарушении.Дата)
					И НЕ СведенияОНарушении.МесяцИсключенИзПерепроведения Тогда
			
					// Если последовательность нарушена в предыдущем месяце, то надо сначала закрыть его.
					// Подробно о тех операциях, которые в нем необходимо выполнить, будет рассказано 
					// в отчете об ошибках, который формируется при вызове РегламентнаяОперация.ВыполнитьОперацию().
					//
					// Если последовательность нарушена в текущем месяце, 
					// то сначала запускаем перепроведение, которое потом вызовет выполнение регламентной операции.
					//
					// Иначе будет запущено выполнение выбранной регламентной операции.
					//
					ПерепровестиДокументы(Ложь, СтрокаТаблицы.ВидОперации);
					Возврат;
				
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

	// Иначе просто выполняет текущую регламентную операцию.
	ВыполнитьРегламентнуюОперацию(СтрокаТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПредыдущиеИВыполнитьРегламентнуюОперациюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = "ВыполнитьВсе" Тогда
		// Выполняем запуск перепроведения, а потом уже закрытие
		ПерепровестиДокументы(Ложь, ДополнительныеПараметры.СтрокаТаблицы.ВидОперации);
	
	ИначеЕсли РезультатВопроса = "ПерейтиПоОрганизацииВЦелом" Тогда
		
		Объект.Организация = ГоловнаяОрганизация;
		Объект.ВключатьОбособленныеПодразделения = Истина;
		ОбщегоНазначенияБПКлиентСервер.УстановитьЗначениеПолеОрганизация(ПолеОрганизация, Объект.Организация, Объект.ВключатьОбособленныеПодразделения);
		ПриИзмененииОрганизации();
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьРегламентнуюОперацию(СтрокаТаблицы)
	
	ИБФайловая = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая;
	Результат  = ЗапуститьВыполнениеРегламентнойОперации(
		ИБФайловая, СтрокаТаблицы.ВидОперации, СтрокаТаблицы.Ссылка);
	
	Если Результат <> Неопределено Тогда
		// Результат получен и уже обработан на стороне сервера
		ОбработатьИзменениеРегламентныхОперацийНаКлиенте(Результат);
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		// Результата еще нет, но есть шансы дождаться
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьЗавершениеДлительнойОперации", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗапуститьВыполнениеРегламентнойОперации(ИБФайловая, Знач ВидОперации, Знач Ссылка)
	
	// Параметры обернем в структуру для их передачи в Обработки.ЗакрытиеМесяца.ВыполнитьОперацию()
	// через механизм ДлительныеОперации.
	ПараметрыФункции = Новый Структура();
	ПараметрыФункции.Вставить("Организация", Объект.Организация);
	ПараметрыФункции.Вставить("Период",      Объект.ПериодРегистрации);
	ПараметрыФункции.Вставить("ВидОперации", ВидОперации);
	ПараметрыФункции.Вставить("Ссылка",      Ссылка);
	
	Если ИБФайловая Тогда
		
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		Обработки.ЗакрытиеМесяца.ВыполнитьОперацию(ПараметрыФункции, АдресХранилища);
		
	Иначе
		
		// Возможно, что фоновое задание было запущено раньше, 
		// пользователь дал команду его отменить, однако задание не отменено.
		// В таком случае не следует запускать задание повторно - следует дождаться его выполнения.
		// Мы можем отследить ситуацию только, если все это происходит в одной форме.
		// Потому что подсистема ДлительныеОперации не умеет устанавливать ключ фонового задания.
		Если ЗакрытиеМесяца.ЗаданиеЕщеВыполняется(ИдентификаторЗадания) Тогда
			// Надо ждать
			Возврат Неопределено;
		КонецЕсли;
		
		ШаблонФоновогоЗадания = НСтр("ru = 'Формирование регламентной операции ""%1""'");
		НаименованиеФоновогоЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонФоновогоЗадания, ВидОперации);
		
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор, 
			"Обработки.ЗакрытиеМесяца.ВыполнитьОперацию", 
			ПараметрыФункции, 
			НаименованиеФоновогоЗадания);
			
		АдресХранилища       = Результат.АдресХранилища;
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		
		Если Не Результат.ЗаданиеВыполнено Тогда
			// Надо ждать
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	// Задание выполнено.
	// Результат выполнения возвращен через хранилище значения.
	// Загрузим его в форму и передадим данные на клиент.
	Возврат ОбновитьДанныеОперацийПоРезультатуДлительнойОперации(Истина);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Выполнение восстановления последовательности (используется механизм ДлительныеОперации)

// Вызывается при выборе пользователем пункта "Выполнить операцию" из
// меню гиперссылки "Перепроведение документов за месяц" или программно
// при попытке выполнения регламетных операций закрытия месяца при 
// нарушенной последовательности.
//
// Параметры:
//	СамостоятельнаяОперация - Булево 
//				- Истина, если вызов произведен пользователем из 
//						меню гиперссылки "Перепроведение документов за месяц"
//				- Ложь, если программный вызов из других операций
//	ВидОперации - ПеречислениеСсылка.ВидыРегламентныхОпераций
//					вид регламентной операции, при выполнении которой был 
//					произведен вызов перепроведения документов.
//					Используется при СамостоятельнаяОперация = Ложь.
//						
&НаКлиенте
Процедура ПерепровестиДокументы(СамостоятельнаяОперация, ВидОперации = Неопределено)
	
	ИБФайловая = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая;
	Результат  = ЗапуститьПерепроведениеДокументов(ИБФайловая, СамостоятельнаяОперация, ВидОперации);
	
	Если Результат <> Неопределено Тогда
		// Результат получен и уже обработан на стороне сервера
		ОбработатьИзменениеРегламентныхОперацийНаКлиенте(Результат);
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		// Результата еще нет, но есть шансы дождаться
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		Если СамостоятельнаяОперация Тогда
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьЗавершениеПерепроведения", 1, Истина);
		Иначе
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьЗавершениеПерепроведенияВРамкахЗакрытия", 1, Истина);
		КонецЕсли;
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗапуститьПерепроведениеДокументов(ИБФайловая, СамостоятельнаяОперация, ВидОперации)
	
	Если НЕ ИБФайловая Тогда
		// Возможно, что фоновое задание было запущено раньше, 
		// пользователь дал команду его отменить, однако задание не отменено.
		// В таком случае не следует запускать задание повторно - следует дождаться его выполнения.
		// Мы можем отследить ситуацию только, если все это происходит в одной форме.
		// Потому что подсистема ДлительныеОперации не умеет устанавливать ключ фонового задания.
		Если ЗакрытиеМесяца.ЗаданиеЕщеВыполняется(ИдентификаторЗадания) Тогда
			// Надо ждать
			Возврат Неопределено;
		КонецЕсли;
	Конецесли;

	ИдентификаторЗадания = Неопределено;
	
	// Вспомогательная информация, передаваемая в обработку группового перепроведения,
	// которая будет возвращена обработкой после завершения в исходном виде.
	// Используется для возможности автоматического запуска следующий операций закрытия месяца.
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("СамостоятельнаяОперация", СамостоятельнаяОперация);
	ДополнительныеПараметры.Вставить("ВидОперации", 			ВидОперации);

	// Снимем отметку об исключении месяца из перепроведения. 
	// Управление исключенными из перепроведения месяцами выполняется только интерактивно пользователем
	// из обработки "Закрытия месяца" и "Помощника по учету НДС".
	// При вызове группового перепроведения из раздела "Администрирование" этот регистр не меняется.
	Если СамостоятельнаяОперация Тогда
		РегистрыСведений.ИсключенныеИзПерепроведенияМесяцы.УдалитьЗапись(Объект.Организация, Объект.ПериодРегистрации);
	КонецЕсли;

	МоментНарушения = РаботаСПоследовательностями.МоментНачалаПерепроведенияСУчетомИсключенныхМесяцев(
		Объект.Организация, КонецМесяца(Объект.ПериодРегистрации));

	Если МоментНарушения = Неопределено Тогда
		// Последовательность не нарушена. Восстанавливать ее не требуется.
		Результат = Новый Структура();
		Результат.Вставить("ПоследовательностьВосстановлена",	Истина);
		Результат.Вставить("ДополнительныеПараметры", 			ДополнительныеПараметры);

		// Обозначим состояние последовательности на форме как ненарушенное.
		Если ЗначениеЗаполнено(ДатаНарушенияПоследовательности)
			ИЛИ МесяцИсключенИзПерепроведения Тогда
			ПроставитьОсобыеСостояния();
			ОбновитьСостояниеЗакрытияМесяцаНаФорме();
		КонецЕсли;
		
		Возврат Результат;
	ИначеЕсли МоментНарушения.Дата < НачалоМесяца(Объект.ПериодРегистрации) Тогда
		// Последовательность нарушена в предыдущих месяца и надо перепроводить сначала их,
		// скажем об этом пользователю.
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Сначала необходимо выполнить перепроведение документов за %1 г. (начиная с %2)'"),
			Формат(НачалоМесяца(МоментНарушения.Дата), "ДФ='ММММ гггг'"),
			Формат(МоментНарушения.Дата, "ДЛФ=Д"));
		
		// Ключ "ПоследовательностьВосстановлена" не добавляем в структуру, 
		// т.к. достаточно только показать сообщение.
			
		Результат = Новый Структура();
		Результат.Вставить("ПоказатьПредупреждение", ТекстСообщения);
		
		// Обозначим новые состояние последовательности.
		ПроставитьОсобыеСостояния();
		ОбновитьСостояниеЗакрытияМесяцаНаФорме();
		
		Возврат Результат;
	КонецЕсли;
	
	// Подготовка параметров для группового перепроведения
	ПараметрыПерепроведения 								= Обработки.ГрупповоеПерепроведениеДокументов.ПараметрыПерепроведения();
	ПараметрыПерепроведения.Организация 					= Объект.Организация;
	ПараметрыПерепроведения.УникальныйИдентификаторФормы 	= УникальныйИдентификатор;
	ПараметрыПерепроведения.МоментНачала					= МоментНарушения;
	ПараметрыПерепроведения.ДатаОкончания					= КонецМесяца(Объект.ПериодРегистрации);
	ПараметрыПерепроведения.ЭтоЗакрытиеМесяца 				= Истина;
	
	// Для организации последовательного вызова сначала перепроведения, 
	// а потом уже самих рег.операций запоминаем, для какой рег. операции произведен вызов
	ПараметрыПерепроведения.ДополнительныеПараметры			= ДополнительныеПараметры;

	Результат =	Обработки.ГрупповоеПерепроведениеДокументов.ЗапуститьПерепроведение(ПараметрыПерепроведения);
		
	Если Результат = Неопределено Тогда
		Результат = Новый Структура();
		Результат.Вставить("ПоказатьПредупреждение", НСтр("ru = 'Перепроведение уже выполняется другим пользователем либо открыта для редактирования форма организации.'"));
		Возврат Результат;
	КонецЕсли;
		
	АдресХранилища       = Результат.АдресХранилища;
	ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		
	Если Не Результат.ЗаданиеВыполнено Тогда
		// Надо ждать
		Возврат Неопределено;
	Иначе
		// Задание выполнено.
		// Результат выполнения возвращен через хранилище значения.
		// Загрузим его в форму и передадим данные на клиент.
		
		Возврат ОбновитьДанныеОперацийПоРезультатуДлительнойОперации(Ложь);
	
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьРезультатПерепроведенияДокументовНаКлиенте(РезультатПерепроведения)

	// Если выполняется в рамках общего закрытия месяца, то запустим следующие операции.
	ВидОперации 					= Неопределено;
	ПоследовательностьВосстановлена	= Ложь;
	СамостоятельнаяОперация 		= Истина;
	АдресХранилищаСОшибками 		= "";
	
	Если ТипЗнч(РезультатПерепроведения) = Тип("Структура")
		И РезультатПерепроведения.Свойство("ДополнительныеПараметры")
		И ТипЗнч(РезультатПерепроведения.ДополнительныеПараметры) = Тип("Структура") Тогда
		
		Если РезультатПерепроведения.Свойство("ПоследовательностьВосстановлена") Тогда
			ПоследовательностьВосстановлена = РезультатПерепроведения.ПоследовательностьВосстановлена;
		КонецЕсли;

		Если РезультатПерепроведения.Свойство("АдресХранилищаСОшибками") Тогда
			АдресХранилищаСОшибками = РезультатПерепроведения.АдресХранилищаСОшибками;
		КонецЕсли;

		Если РезультатПерепроведения.ДополнительныеПараметры.Свойство("СамостоятельнаяОперация") Тогда
			СамостоятельнаяОперация = РезультатПерепроведения.ДополнительныеПараметры.СамостоятельнаяОперация;
		КонецЕсли;
			
		Если РезультатПерепроведения.ДополнительныеПараметры.Свойство("ВидОперации") Тогда
			ВидОперации = РезультатПерепроведения.ДополнительныеПараметры.ВидОперации;
		КонецЕсли;
		
	КонецЕсли;

	Если ПоследовательностьВосстановлена И НЕ СамостоятельнаяОперация Тогда
		// Запускаем выполнение регламентной операции
		ИдентификаторСтроки = ПолучитьИдентификаторПоВидуОперации(ТаблицаОпераций, ВидОперации);
		ЗакрытьМесяц(ИдентификаторСтроки);
	Иначе	
		// Закром форму длительной операции, она больше не требуется.
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		
		// Отображаем отчет с ошибками перепроведения.
		Если НЕ ПоследовательностьВосстановлена Тогда
			ОбщегоНазначенияБПКлиент.ОткрытьФормуОшибокПерепроведения(ЭтотОбъект, АдресХранилищаСОшибками);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПропуститьПоследовательность()

	РегистрыСведений.ИсключенныеИзПерепроведенияМесяцы.ДобавитьЗапись(Объект.Организация, Объект.ПериодРегистрации);

	// Отметим в таблице операций факт пропуска
	ПроставитьОсобыеСостояния();
	ОбновитьСостояниеЗакрытияМесяцаНаФорме();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработка результата выполнения длительной операции

&НаСервере
Функция ОбновитьДанныеОперацийПоРезультатуДлительнойОперации(ВыводитьСообщенияПользователю)
	
	// Результат закрытия подготовлен в 
	// Обработки.ЗакрытиеМесяца.ЗакрытьМесяц() или 
	// Обработки.ЗакрытиеМесяца.ВыполнитьОперацию() или 
	// Обработки.ГрупповоеПерепроведениеДокументов.ПерепроведениеДокументов()
	// Сообщения об ошибках могут храниться в фоновом задании
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ВыводитьСообщенияПользователю Тогда
		ЗакрытиеМесяцаСообщенияОбОшибках.ПолучитьИзДлительнойОперацииСообщенияПользователю(ИдентификаторЗадания, УникальныйИдентификатор);
	КонецЕсли;
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Приведем результаты длительной операции к одинаковому формату
	ТекстПредупреждения = Неопределено;

	ИзмененныеОперации 	= Новый Массив; // Ссылки на измененные документы "РегламентнаяОперация"
	ОперацииСОшибками  	= Новый Массив; // Ссылки на документы "РегламентнаяОперация" с ошибками
	Изменения 			= Новый Массив;
	ЕстьОшибки 			= Ложь;

	РезультатДляКлиента	= Новый Структура;
	
	Если Результат.Свойство("Операции") И Результат.Свойство("Выполнено") Тогда
		Изменения = Результат.Операции;
		Если Не Результат.Выполнено Тогда
			ТекстПредупреждения = НСтр("ru = 'Закрытие месяца не выполнено: выявлены ошибки'");
		КонецЕсли;

	ИначеЕсли Результат.Свойство("ВидОперации")
		И Результат.Свойство("Ссылка") 
		И Результат.Свойство("Состояние") 
		И Результат.Свойство("Отказ") Тогда

		Колонки = "Организация, ВидОперации, Состояние, Ссылка";
		Изменения = ТаблицаОпераций.Выгрузить(, Колонки).СкопироватьКолонки(Колонки);
		Изменение = Изменения.Добавить();
		ЗаполнитьЗначенияСвойств(Изменение, Результат);
		Изменение.Организация = Объект.Организация;
		Если Результат.Отказ Тогда
			ТекстПредупреждения = НСтр("ru = 'Операция не выполнена'");
		КонецЕсли;

	ИначеЕсли Результат.Свойство("ПоследовательностьВосстановлена") Тогда

		// Окончание группового перепроведения, разблокируем захваченную организацию.
		// Она блокируется при старте группового перепроведения в привязке к идентификатору формы,
		// из которой вызывано перепроведение.
		Обработки.ГрупповоеПерепроведениеДокументов.ПослеОкончанияПерепроведения(УникальныйИдентификатор);
		ЕстьОшибки = НЕ Результат.ПоследовательностьВосстановлена;

		РезультатДляКлиента.Вставить("ПоследовательностьВосстановлена", Результат.ПоследовательностьВосстановлена);
		
		Если Результат.Свойство("АдресХранилищаСОшибками") Тогда
			РезультатДляКлиента.Вставить("АдресХранилищаСОшибками", Результат.АдресХранилищаСОшибками);
		КонецЕсли;
		
		Если Результат.Свойство("ДополнительныеПараметры") Тогда
			РезультатДляКлиента.Вставить("ДополнительныеПараметры", Результат.ДополнительныеПараметры);
		КонецЕсли;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Для Каждого Изменение Из Изменения Цикл
		
		Ссылка      = Изменение.Ссылка;
		Состояние   = Изменение.Состояние;
		ВидОперации = Изменение.ВидОперации;
		ЕстьСсылкаНаРегламентнуюОперацию = (ЗначениеЗаполнено(Ссылка) И ТипЗнч(Ссылка) = Тип("ДокументСсылка.РегламентнаяОперация"));
		
		Если ЕстьСсылкаНаРегламентнуюОперацию Тогда
			ИзмененныеОперации.Добавить(Ссылка);
		КонецЕсли;
		
		Если Состояние <> Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено Тогда
			
			ЕстьОшибки = Истина;
			
			Если ЕстьСсылкаНаРегламентнуюОперацию И Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.ВыполненоСОшибками Тогда
				ОперацииСОшибками.Добавить(Ссылка);
			Иначе
				// Информацию об ошибке не можем передать через форму ошибок регламентной операции
				ШаблонТекста = НСтр("ru = 'Ошибка при выполнении операции ""%1""'");
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, ВидОперации);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		// Обновим содержимое формы полностью, чтобы пользователь видил наиболее точную картину,
		// которая позволит разобраться с ошибкой
		ЗаполнитьДанныеОбОперациях();
	Иначе
		// Обновим данные обо всех регламентных операциях
		ОбновитьДанныеОбОперациях();
	КонецЕсли;
	ОбновитьСостояниеЗакрытияМесяцаНаФорме();
	
	РезультатДляКлиента.Вставить("ИзмененныеОперации", 		ИзмененныеОперации);
	
	// По результатам длительной операции должно открыться не более одной новой формы:
	// - или форма ошибок перепроведения (РезультатДляКлиента.ОткрытьФормуОшибкиПерепроведения)
	// - или форма ошибки выполнения регламетной операции
	// - или предупреждение о том, что ошибок несколько
	// - или список сообщений при выполнении регламентных операций
	Если ПолучитьСообщенияПользователю().Количество() = 0 Тогда
		Если ОперацииСОшибками.Количество() = 1 Тогда
			РезультатДляКлиента.Вставить("ОткрытьФормуОшибки", ОперацииСОшибками[0]);
		ИначеЕсли ЗначениеЗаполнено(ТекстПредупреждения) Тогда
			РезультатДляКлиента.Вставить("ПоказатьПредупреждение", ТекстПредупреждения);
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатДляКлиента;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьИзменениеРегламентныхОперацийНаКлиенте(Результат)
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// "Результат" - структура, содержит ключи
	// - ИзмененныеОперации     - (опционально) - массив ссылок на измененные операции
	// - ПоказатьПредупреждение - (опционально) - текст предупреждения
	// - ОткрытьФормуОшибки     - (опционально) - ссылка на операцию с ошибкой
	// - ПоследовательностьВосстановлена (опционально) - булево

	Если Результат.Свойство("ПоследовательностьВосстановлена") Тогда
		ОбработатьРезультатПерепроведенияДокументовНаКлиенте(Результат);
	КонецЕсли;

	Если Результат.Свойство("ОткрытьФормуОшибки") Тогда
		ЗакрытиеМесяцаКлиент.ОткрытьФормуОшибок(Результат.ОткрытьФормуОшибки);
	КонецЕсли;

	
	// Оповестим об изменении
	Если Результат.Свойство("ИзмененныеОперации") Тогда
		ОповеститьПользователя(
			Результат.ИзмененныеОперации,
			НСтр("ru = 'Операция изменена'"),
			НСтр("ru = 'Операции изменены (%1)'")); // Параметр - количество операций
			
		ОповеститьФормыРегламентныхОпераций(Результат.ИзмененныеОперации);
	КонецЕсли;
	
	Если Результат.Свойство("ПоказатьПредупреждение") Тогда
		ПоказатьПредупреждение(, Результат.ПоказатьПредупреждение);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Другие действия с регламентными операциями

&НаКлиенте
Процедура ОповеститьПользователя(Ссылки, ТекстОповещенияОднаОперация, ШаблонОповещенияНесколькоОпераций, ЗаписатьВИсторию = Ложь)
	
	// Т.к. рег.операция не проводится, управляется программно, то
	// также программно необходимо показать Оповещение пользователю, заполнить Историю.
	// Историю уже могли заполнить на сервере.
	
	КоличествоСсылок = Ссылки.Количество();
	
	Если КоличествоСсылок = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если КоличествоСсылок = 1 Тогда
		
		Ссылка = Ссылки[0];
		ПоказатьОповещениеПользователя(
			ТекстОповещенияОднаОперация,
			ПолучитьНавигационнуюСсылку(Ссылка), 
			Строка(Ссылка));
			
	Иначе // Несколько ссылок
		
		ТекстОповещения  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонОповещенияНесколькоОпераций,
			КоличествоСсылок);
		
		ПоказатьОповещениеПользователя(ТекстОповещения,, НСтр("ru = 'Регламентные операции'"));
			
	КонецЕсли;
	
	Если ЗаписатьВИсторию Тогда
		Для Каждого Ссылка Из Ссылки Цикл
			ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(Ссылка));
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьФормыРегламентныхОпераций(Ссылки = Неопределено)
	
	// Ссылки - это массив операций или одна операция
	
	ОповеститьОбИзменении = Ложь;
	
	Если Ссылки <> Неопределено Тогда
		ПараметрыОповещения = Новый Структура("ОбрабатываемыеОперации", Ссылки);
		Оповестить("ОбновитьРегламентныеОперации", ПараметрыОповещения);
	КонецЕсли;
	
	ОповеститьОбИзменении(Тип("ДокументСсылка.РегламентнаяОперация"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьФормыОбИзменении(ОбрабатываемыеОперации = Неопределено)
	
	// если открыта обработка Закрытие месяца, обновим Статус рег.операции в форме 
	Если ОбрабатываемыеОперации = Неопределено Тогда
		Оповестить("ОбновитьРегламентныеОперации");
	Иначе
		ПараметрыОповещения = Новый Структура("ОбрабатываемыеОперации", ОбрабатываемыеОперации);
		Оповестить("ОбновитьРегламентныеОперации", ПараметрыОповещения);
	КонецЕсли;
	
	ОповеститьОбИзменении(Тип("ДокументСсылка.РегламентнаяОперация"));
	
КонецПроцедуры

&НаСервере
Процедура ПропуститьОперацию(ИдентификаторСтроки)
	
	Операция = ТаблицаОпераций.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если ЗначениеЗаполнено(Операция.Ссылка) Тогда
		ДокументОбъект = Операция.Ссылка.ПолучитьОбъект();
	Иначе
		ДокументОбъект = Документы.РегламентнаяОперация.СоздатьДокумент();
		ДокументОбъект.Дата        = КонецМесяца(Объект.ПериодРегистрации);
		ДокументОбъект.Организация = Объект.Организация;
		ДокументОбъект.ВидОперации = Операция.ВидОперации;
	КонецЕсли;
	
	ДокументОбъект.ПропуститьОперацию();
	
	Операция.Состояние = ДокументОбъект.Состояние;
	
	Если НЕ ЗначениеЗаполнено(Операция.Ссылка) Тогда
		Операция.Ссылка = ДокументОбъект.Ссылка;
	КонецЕсли;
	
	ОбновитьУстаревшиеОперации();
	ОбновитьСостояниеЗакрытияМесяцаНаФорме();
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьРегламентнуюОперацию(ИдентификаторСтроки)
	
	СтрокаТаблицы = ТаблицаОпераций.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Ссылка = СтрокаТаблицы.Ссылка;
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект = Ссылка.ПолучитьОбъект();
	ДокументОбъект.ОтменитьОперацию();
	
	СтрокаТаблицы.Состояние = ДокументОбъект.Состояние;
	
	ОбновитьУстаревшиеОперации();
	ОбновитьСостояниеЗакрытияМесяцаНаФорме();
	
КонецПроцедуры

&НаСервере
Функция ОтменитьЗакрытиеМесяца(Знач НачалоОтмены = Неопределено)
	
	ИзмененныеОперации = Новый Массив;
	ЭтоПервыйДокумент = Истина;
	
	Для Счетчик = 1 По ТаблицаОпераций.Количество() Цикл
		
		СтрокаТаблицы = ТаблицаОпераций.Получить(ТаблицаОпераций.Количество() - Счетчик);// Отменяем с конца
		
		Если СтрокаТаблицы.ВидОперации = НачалоОтмены Тогда
			Прервать;
		КонецЕсли;
		
		Если Не ЗакрытиеМесяцаКлиентСервер.ИспользуетсяДокументРегламентнаяОперация(СтрокаТаблицы.ВидОперации) Тогда
			// Отмена выполнения распространяется только на регл.операции, выполняемые документом РегламентнаяОперация
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено
			Или СтрокаТаблицы.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Пропущено Тогда
			Продолжить;
		КонецЕсли;
		
		ДоступноРедактирование = Не ЕстьОбособленныеПодразделения
			Или (Объект.ВключатьОбособленныеПодразделения = СтрокаТаблицы.ПоОрганизацииВЦелом);
		
		Если Не ДоступноРедактирование Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект = СтрокаТаблицы.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ОтменитьОперацию(,,, ЭтоПервыйДокумент);
		СтрокаТаблицы.Состояние = ДокументОбъект.Состояние;
		
		ИзмененныеОперации.Добавить(ДокументОбъект.Ссылка);
		
		ЭтоПервыйДокумент = Ложь;
		
	КонецЦикла;
	
	Если ИзмененныеОперации.Количество() > 0 Тогда
		ОбновитьУстаревшиеОперации();
		ОбновитьСостояниеЗакрытияМесяцаНаФорме();
	КонецЕсли;
	
	Возврат ИзмененныеОперации;
	
КонецФункции

&НаСервере
Процедура УстановитьГраницуПроведенияЗакрытияМесяца(Знач ВидОперации)
	
	// Команда используется для исправления ошибок.
	// Поэтому начнем с того, что удалим заведомо ошибочные записи
	РегистрыСведений.НеАктуальныеРегламентныеОперации.УдалитьВремяИзДатыИОчиститьГруппу();
	
	// При выборе "Пометить как выполненные все операции до выбранной" в текущем месяце
	// считаем, что и в предыдущих месяцах тоже все операции правильно выполненные.
	РегистрыСведений.НеактуальныеРегламентныеОперации.УдалитьЗаписиПрошлыхПериодов(
		Объект.Организация, Объект.ПериодРегистрации);
	
	Для каждого Строка Из ТаблицаОпераций Цикл
		
		Если Не Строка.Устарела Тогда
			Продолжить;
		КонецЕсли;
		
		РегистрыСведений.НеАктуальныеРегламентныеОперации.УдалитьЗапись(Объект.Организация, Объект.ПериодРегистрации, Строка.ВидОперации);
		
		Если Строка.ВидОперации = ВидОперации Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьУстаревшиеОперации();
	ОбновитьСостояниеЗакрытияМесяцаНаФорме();
	
КонецПроцедуры // УстановитьГраницуПроведенияЗакрытияМесяц()

&НаСервере
Процедура СоздатьПропущенныеОперации()
	
	Если НЕ МожноЗакрыватьМесяц
		ИЛИ Объект.ВключатьОбособленныеПодразделения Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Операция Из ТаблицаОпераций Цикл
		
		Если Не ЗакрытиеМесяцаКлиентСервер.ИспользуетсяДокументРегламентнаяОперация(Операция.ВидОперации) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Операция.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено 
			Или Операция.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.ВыполненоСОшибками
			Или Операция.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Пропущено Тогда
			// За этот месяц уже пытались что-то закрывать. Поздно пропускать операции.
			Возврат;
		КонецЕсли;
			
	КонецЦикла;
	
	// Получим операции за предыдущий месяц
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	СоздатьОрганизации(МенеджерВременныхТаблиц);
	ЗакрытиеМесяца.СоздатьВидыОпераций(МенеджерВременныхТаблиц);
	ЗакрытиеМесяца.СоздатьДанныеРегламентныхОпераций(
		МенеджерВременныхТаблиц, 
		НачалоМесяца(Объект.ПериодРегистрации) - 1, 
		Объект.Организация);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокументов.ВидОперации
	|ИЗ
	|	ДанныеРегламентныхОпераций КАК ДанныеДокументов
	|ГДЕ
	|	ДанныеДокументов.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Пропущено)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеДокументов.ВидОперации
	|ИЗ
	|	ДанныеРегламентныхОпераций КАК ДанныеДокументов
	|ГДЕ
	|	ДанныеДокументов.Ссылка ССЫЛКА Документ.РегламентнаяОперация
	|	И ДанныеДокументов.Состояние <> ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Пропущено)";
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	
	Если ПакетЗапросов[0].Пустой() Тогда
		// За предыдущий период нет пропущенных операций
		Возврат;
	КонецЕсли;
	
	Если ПакетЗапросов[1].Пустой() Тогда
		// Все операции за предыдущий период - пропущенные.
		// Скорее всего, это первое закрытие периода после загрузки остатков.
		// При загрузке остатков пропущенные операции создаются системой, а не пользователем.
		// Поэтому нельзя на них опираться как на "волю пользователя".
		Возврат;
	КонецЕсли;
	
	Выборка = ПакетЗапросов[0].Выбрать();
	ОбновитьФорму = Ложь;
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.ВидОперации) Тогда
			Продолжить;
		КонецЕсли;
		
		Отбор = Новый Структура;
		Отбор.Вставить("Требуется",   Истина);
		Отбор.Вставить("ВидОперации", Выборка.ВидОперации);
		ОперацииДляПропуска = ТаблицаОпераций.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаТаблицы Из ОперацииДляПропуска Цикл
			
			ДокументОбъект = Документы.РегламентнаяОперация.СоздатьДокумент();
			ДокументОбъект.Дата        = КонецМесяца(Объект.ПериодРегистрации);
			ДокументОбъект.Организация = Объект.Организация;
			ДокументОбъект.ВидОперации = Выборка.ВидОперации;
			ДокументОбъект.ПропуститьОперацию();
			
			СтрокаТаблицы.Состояние = ДокументОбъект.Состояние;
			ОбновитьФорму = Истина;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ОбновитьФорму Тогда
		ОбновитьСостояниеЗакрытияМесяцаНаФорме();
		ОповеститьОбИзменении = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СведенияОНарушенииПоследовательности(Знач Организация, Знач ПериодРегистрации, Знач ОценитьКоличествоДокументов)

	Результат = Новый Структура();
	Результат.Вставить("Ссылка", 				Неопределено);
	Результат.Вставить("Дата", 					Неопределено);
	Результат.Вставить("МесяцИсключенИзПерепроведения", Ложь);
	Результат.Вставить("КоличествоДокументовДляПерепроведения", 0);
	
	МесяцИсключенИзПерепроведения = РегистрыСведений.ИсключенныеИзПерепроведенияМесяцы.МесяцИсключенИзПерепроведения(
		Организация, ПериодРегистрации);
		
	Результат.МесяцИсключенИзПерепроведения = МесяцИсключенИзПерепроведения;

	// Если текущий месяц исключен из перепроведения, то получим дату нарушения 
	// как если бы по состоянию на конец прошлого месяца, чтобы если пользователь
	// решит все-таки за текущий месяц выполнить перепроведение, то мы могли бы 
	// указать, с какой даты требуется перепроводить.
	Если МесяцИсключенИзПерепроведения Тогда
		МоментНарушения = РаботаСПоследовательностями.МоментНачалаПерепроведенияСУчетомИсключенныхМесяцев(
			Организация, НачалоМесяца(ПериодРегистрации) - 1);
	Иначе
		МоментНарушения = РаботаСПоследовательностями.МоментНачалаПерепроведенияСУчетомИсключенныхМесяцев(
			Организация, КонецМесяца(ПериодРегистрации));
	КонецЕсли;

	Если МоментНарушения <> Неопределено Тогда
		
		Результат.Ссылка 	= МоментНарушения.Ссылка;
		Результат.Дата 		= МоментНарушения.Дата;
	
		Если ОценитьКоличествоДокументов 
			И МоментНарушения.Дата <= КонецМесяца(ПериодРегистрации) Тогда
			
			Результат.КоличествоДокументовДляПерепроведения =  
				РаботаСПоследовательностями.ОценкаКоличестваДокументовДляПерепроведения(
					Организация, 
					НачалоМесяца(ПериодРегистрации), 
					КонецМесяца(ПериодРегистрации), 
					МоментНарушения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Определяет, были ли успешно выполнены операции,  предшествующие указанной.
//
// Возвращаемые значения:
//	Структура с ключами:
//		* СведенияОНарушении - Структура, см. СведенияОНарушенииПоследовательности().
//		* ПредыдущиеОперацииВыполнены - Булево, Истина, если все выполнено успешно, иначе Ложь.
//
&НаСервереБезКонтекста
Функция СтатусВыполненияПредыдущихОпераций(Знач Организация, Знач ПериодРегистрации, Знач ВидОперации, Знач ВыполняетсяПоОбособленномуПодразделению)

	Результат = Новый Структура();
	Результат.Вставить("СведенияОНарушении", 						Неопределено);
	Результат.Вставить("ОперацииПредыдущегоМесяцаВыполнены", 		Истина);
	
	// Все операции текущего месяца, которые надо выполнить (отсутствующие и устаревшие).
	Результат.Вставить("ТекстПредыдущихОперацийКВыполнению", 		""); 
	Результат.Вставить("КоличествоПредыдущихОперацийКВыполнению", 	0); 
	Результат.Вставить("ТолькоОперацииВЦеломПоОрганизации", 		Ложь); 
	Результат.Вставить("ЕстьОперацииВЦеломПоОрганизации", 			Ложь); 

	ОперацииПредыдущегоМесяцаВыполнены = ЗакрытиеМесяца.ВыполненаОперацияПредыдущегоМесяца(
		КонецМесяца(ПериодРегистрации), Организация, ВидОперации);

	Результат.Вставить("ОперацииПредыдущегоМесяцаВыполнены", 		ОперацииПредыдущегоМесяцаВыполнены);	

	Если ОперацииПредыдущегоМесяцаВыполнены Тогда
		СведенияОНарушении = СведенияОНарушенииПоследовательности(
			Организация, ПериодРегистрации, Истина);
		
		Результат.Вставить("СведенияОНарушении", СведенияОНарушении);
		
		// Найдем предшествующие по порядку операции текущего месяца, 
		// которые не были выполнены либо перестали быть актуальными.
		ДетальныйСтатусПредыдущихГрупп = ЗакрытиеМесяца.ДетальныйСтатусПредыдущихГрупп(
			КонецМесяца(ПериодРегистрации), Организация, ВидОперации);
		
		Если ДетальныйСтатусПредыдущихГрупп <> Неопределено Тогда
		
			КоличествоПредыдущихОперацийКВыполнению = 0;
			МассивВидовОпераций = Новый Массив;
		
			Для Каждого СтрокаТаблицы Из ДетальныйСтатусПредыдущихГрупп Цикл
			
				Если НЕ СтрокаТаблицы.Требуется Тогда
					Продолжить;
				КонецЕсли;

				Если СтрокаТаблицы.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено
					ИЛИ СтрокаТаблицы.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.ВыполненоСОшибками
					ИЛИ СтрокаТаблицы.Устарела Тогда
					
					КоличествоПредыдущихОперацийКВыполнению = КоличествоПредыдущихОперацийКВыполнению + 1;
					
					НомерГруппыОперации = ЗакрытиеМесяца.ГруппаПоВидуОперации(СтрокаТаблицы.ВидОперации);
					
					Если ВыполняетсяПоОбособленномуПодразделению 
						И ЗакрытиеМесяца.ГруппаВыполняетсяПоОрганизацииВЦелом(НомерГруппыОперации) Тогда
						
						Результат.ЕстьОперацииВЦеломПоОрганизации = Истина;
						
						Если МассивВидовОпераций.Количество() = 0 Тогда
							// В операции предыдущих групп по обособленному подразделению выполнены, 
							// далее по порядку нужно выполнять операции по организации в целом
							Результат.ТолькоОперацииВЦеломПоОрганизации = Истина;
							МассивВидовОпераций.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = ' - %1 (выполняется в целом по организации)'"), Строка(СтрокаТаблицы.ВидОперации)));
						Иначе
							МассивВидовОпераций.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Далее требуется переход к закрытию месяца в целом организации для выполнения ""%1""'"), 
								Строка(СтрокаТаблицы.ВидОперации)));
						КонецЕсли;
							
						// Остальные виды операций перечислять не будет, т.к. требуется сначала выполнить 
						// операцию в целом по организации.
						Прервать;
					
					Иначе
						МассивВидовОпераций.Добавить(" - " + Строка(СтрокаТаблицы.ВидОперации));
					КонецЕсли;

				КонецЕсли;
				
			КонецЦикла;

			Если КоличествоПредыдущихОперацийКВыполнению > 4 Тогда

				Сч = МассивВидовОпераций.ВГраница();
				Пока Сч > 2 Цикл
					МассивВидовОпераций.Удалить(Сч);
					Сч = Сч - 1;
				КонецЦикла;
			
				МассивВидовОпераций.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '... и еще %1'"),
                    СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
						КоличествоПредыдущихОперацийКВыполнению - 3, НСтр("ru = 'операция, операции, операций'"))));
				
			КонецЕсли;

			Результат.КоличествоПредыдущихОперацийКВыполнению = КоличествоПредыдущихОперацийКВыполнению;
			Результат.ТекстПредыдущихОперацийКВыполнению = СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(МассивВидовОпераций, Символы.ПС);
		
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Отчеты, справки-расчеты и т.п.

&НаСервере
Функция ПолучитьСписокСправокРасчетовПоВидуОперации(ВидОперации)
	
	СписокОпераций = Новый Массив;
	Если ВидОперации = Неопределено Тогда
		Для Каждого Строка Из ТаблицаОпераций Цикл
			Если Строка.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено Тогда
				СписокОпераций.Добавить(Строка.ВидОперации);
			Конецесли;
		КонецЦикла;
	Иначе
		СписокОпераций.Добавить(ВидОперации);
	КонецЕсли;
	
	Возврат ЗакрытиеМесяца.ПолучитьСписокСправокРасчетовПоВидуОперации(СписокОпераций, Объект.Организация, Объект.ПериодРегистрации);
	
КонецФункции

&НаКлиенте
Процедура ВывестиСправкуРасчет(Справка)
		
		ФормаОтчета = ПолучитьФорму("Отчет." + Справка + ".Форма.ФормаОтчета");
		ФормаОтчета.ОткрытьИСформировать(Новый Структура("Организация, НачалоПериода, КонецПериода,Период,НаборПоказателейОтчета,ВыводитьЗаголовок,ВыводитьПодвал,СНачалаГода",
			Объект.Организация,
			НачалоМесяца(Объект.ПериодРегистрации),
			КонецМесяца(Объект.ПериодРегистрации),
			ПредставлениеПериодаРегистрации,
			1,
			Истина,
			Истина,
			Ложь));
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиОтчетВыполненныеОперации(Знач Организация, ВсеОбособленныеПодразделения = Ложь)
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Период",                       Объект.ПериодРегистрации);
	ПараметрыОтчета.Вставить("Организация",                  Организация);
	ПараметрыОтчета.Вставить("ВсеОбособленныеПодразделения", ВсеОбособленныеПодразделения);
	
	ПараметрыКоманды = Новый Массив;
	ПараметрыКоманды.Добавить(ПредопределенноеЗначение("Документ.РегламентнаяОперация.ПустаяСсылка"));
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
		"Обработка.ЗакрытиеМесяца",
		"ВыполненныеОперации", 
		ПараметрыКоманды,
		ЭтотОбъект,
		Новый Структура("ЗаголовокФормы, ДополнительныеПараметры", ИмяКомандыОтчетОВыполненииОпераций(), ПараметрыОтчета));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Оценка производительности

&НаКлиенте
Процедура НачатьЗамерВремени()
	
	ВыполняетсяПолноеЗакрытиеМесяца = Истина;
	
	Если ОценкаПроизводительностиВызовСервераПовтИсп.ВыполнятьЗамерыПроизводительности() Тогда
		КлючеваяОперация = "ЗакрытиеМесяца";
		ВремяНачалаОперации = ОценкаПроизводительностиКлиентСервер.ЗначениеТаймера();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьЗамерВремени()
	
	Если ОценкаПроизводительностиВызовСервераПовтИсп.ВыполнятьЗамерыПроизводительности()
		И ВыполняетсяПолноеЗакрытиеМесяца Тогда
		КлючеваяОперация = "ЗакрытиеМесяца";
		ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачалаОперации);
		
		ВыполняетсяПолноеЗакрытиеМесяца = Ложь;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Длительные операции - общие методы

&НаКлиенте
Процедура ПодключитьОбработчикиОжидания()
	
	Если ПоказатьПредупрежденийОбОкругленииПрибыли Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПредупреждениеОкруглениеПрибыли", 0.5, 1);
	КонецЕсли;	
	
	Если ПоказатьПредупреждениеОбУплатеЗемельногоНалогаИП2015 Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПредупреждениеУплатаЗемельногоНалогаИП2015", 0.5, 1);
	КонецЕсли;
	
	Если ЗакрытиеМесяцаВызовСервера.ПоказатьПредупреждениеАктуализацияДанных(Объект.Организация) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПредупреждениеАктуализацияДанных", 0.5, 1);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПредупреждениеУплатаЗемельногоНалогаИП2015()
	
	ОбщегоНазначенияБПКлиент.ПоказатьПредупреждениеОбИзменениях("УплатаЗемельногоНалогаИП2015", , НастройкиПредупреждений);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПредупреждениеАктуализацияДанных()
	
	ОбщегоНазначенияБПКлиент.ПоказатьПредупреждениеОбИзменениях("АктуализацияДанных", , НастройкиПредупреждений);

КонецПроцедуры

// При наличии более указанного числа документов, подлежащих перепроведению, будем запрашивать пользователя.
МаксимальноеКоличествоДокументовДляПерепроведения = 100;
