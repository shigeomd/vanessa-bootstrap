#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура ВыполнитьОперацию(Параметры, АдресХранилища) Экспорт
	
	// Параметры и результат обернуты в структуру для их передачи через механизм ДлительныеОперации.
	// Состав параметров:
	// - Период
	// - Организация
	// - ВидОперации
	// - Ссылка
	// Состав результата:
	// - ВидОперации
	// - Ссылка
	// - Состояние
	// - Отказ
	
	Результат = ВыполнитьРегламентнуюОперацию(
		Параметры.Период, 
		Параметры.Организация, 
		Параметры.ВидОперации, 
		Параметры.Ссылка,
		Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено,
		Истина);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Процедура ЗакрытьМесяц(Параметры, АдресХранилища) Экспорт
	
	// Параметры и результат обернуты в структуру для их передачи через механизм ДлительныеОперации.
	// Состав параметров:
	// - Период
	// - Организация
	// - СтатусЗакрытияМесяца
	// - ФинишнаяОперация
	// - ТолькоОперацииОбособленногоПодразделения
	// Состав результата:
	// - Выполнено
	// - Операции
	
	Результат = ВыполнитьЗакрытиеМесяца(
		Параметры.Период,
		Параметры.Организация,
		Параметры.СтатусЗакрытияМесяца,
		Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено,
		Параметры.ФинишнаяОперация,
		Параметры.ТолькоОперацииОбособленногоПодразделения);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры

Функция ЗакрытьМесяцПоЗагруженнымДанным(Период, Организация, РезультатЗакрытияМесяцаОтраженОперациями = Ложь) Экспорт
	
	// Данные могут быть загружены только по организации, не имеющей обособленных подразделений на выделенном балансе.
	
	// Результат - это структура.
	// Состав результата:
	// - Выполнено
	// - Операции
	
	Если РезультатЗакрытияМесяцаОтраженОперациями Тогда
		Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Пропущено;
	Иначе
		Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Создаем временную таблицу Организации
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&Организация КАК Организация
	|ПОМЕСТИТЬ Организации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация";
	Запрос.Выполнить();
	
	// Получаем детальный статус закрытия месяца
	ЗакрытиеМесяца.СоздатьДетальныйСтатусЗакрытияМесяца(МенеджерВременныхТаблиц, Период, Организация);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Статус.Организация КАК Организация,
	|	Статус.ВидОперации.Порядок КАК ПорядокСледования,
	|	Статус.ВидОперации КАК ВидОперации,
	|	Статус.НомерГруппы КАК НомерГруппы,
	|	Статус.Требуется КАК Требуется,
	|	Статус.РучнаяКорректировка КАК РучнаяКорректировка,
	|	Статус.Ссылка КАК Ссылка,
	|	Статус.Состояние КАК Состояние,
	|	Статус.Устарела КАК Устарела
	|ИЗ
	|	ДетальныйСтатусЗакрытияМесяца КАК Статус
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерГруппы,
	|	Требуется УБЫВ,
	|	ПорядокСледования";
	СтатусЗакрытияМесяца = Запрос.Выполнить().Выгрузить();
    
	Результат = ВыполнитьЗакрытиеМесяца(
		Период,
		Организация,
		СтатусЗакрытияМесяца,
		Состояние);
		
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Печать

Процедура Печать(ПараметрыОтчета, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Формируем табличный документ и добавляем его в коллекцию печатных форм.
	УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм,
		"ВыполненныеОперации", 
		НСтр("ru = 'Отчет о выполнении операций'"), 
		ОтчетОВыполненииОпераций(ПараметрыПечати, ОбъектыПечати));
	
КонецПроцедуры

Функция ОтчетОВыполненииОпераций(Параметры, ОбъектыПечати)
	
	// Параметры:
	// Период
	// Организация
	// ВсеОбособленныеПодразделения
	// ПредварительноПолученныеДанные
	
	Период      = Параметры.Период;
	Организация = Параметры.Организация;
	
	ВсеОбособленныеПодразделения = (Параметры.Свойство("ВсеОбособленныеПодразделения") 
		И Параметры.ВсеОбособленныеПодразделения);
	
	// Пока не умеем обрабатывать ПредварительноПолученныеДанные.
	// Получим сведения о выполнении операций
	
	// Создаем временную таблицу Организации
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация",		Организация);
	Если ВсеОбособленныеПодразделения Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Организации.Ссылка КАК Организация
		|ПОМЕСТИТЬ Организации
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ГоловнаяОрганизация = &Организация
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация";
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ
		|	&Организация КАК Организация
		|ПОМЕСТИТЬ Организации
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация";
	КонецЕсли;
	Запрос.Выполнить();
	
	// Получаем детальный статус закрытия месяца
	ЗакрытиеМесяца.СоздатьДетальныйСтатусЗакрытияМесяца(МенеджерВременныхТаблиц, Период, Организация);
	
	// Составим таблицу с датам нарушения последовательности по каждой организациям.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Организация КАК Организация
	|ИЗ
	|	Организации КАК Организации";
	
	ТаблицаПоследовательности = Запрос.Выполнить().Выгрузить();
	ТаблицаПоследовательности.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоследовательности Цикл
		
		МоментНарушения = РаботаСПоследовательностями.МоментНачалаПерепроведенияСУчетомИсключенныхМесяцев(
			СтрокаТаблицы.Организация, КонецМесяца(Период));
		
		Если МоментНарушения <> Неопределено Тогда
			СтрокаТаблицы.Дата = МоментНарушения.Дата;
		КонецЕсли;
	
	КонецЦикла;
	
	
	// Отчет состоит из 4 разделов
	// В каждом из разделов операции группируются по организациям
	ЗаголовкиРазделов = Новый Соответствие;
	ЗаголовкиРазделов.Вставить(1, НСтр("ru = 'Список выполненных операций'"));
	ЗаголовкиРазделов.Вставить(2, НСтр("ru = 'Список операций, выполненных с ошибками'"));
	ЗаголовкиРазделов.Вставить(3, НСтр("ru = 'Список невыполненных операций'"));
	ЗаголовкиРазделов.Вставить(4, НСтр("ru = 'Список операций, рекомендуемых выполнить повторно'"));
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПоОрганизацииВЦелом", ВсеОбособленныеПодразделения);
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации",				НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериодаРегистрации",		КонецМесяца(Период));
	Запрос.УстановитьПараметр("ТекстПерепроведениеДокументов", 	ЗакрытиеМесяца.ПредставлениеОперацииПерепроведениеДокументов());
	Запрос.УстановитьПараметр("ТаблицаПоследовательности", 		ТаблицаПоследовательности);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПоследовательности.Организация КАК Организация,
	|	ТаблицаПоследовательности.Дата КАК Дата
	|ПОМЕСТИТЬ ДатыНарушенияПоследовательности
	|ИЗ
	|	&ТаблицаПоследовательности КАК ТаблицаПоследовательности
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НЕ ИсключенныеИзПерепроведенияМесяцы.ПериодРегистрации ЕСТЬ NULL
	|			ТОГДА 3 
	|		КОГДА ДатыНарушенияПоследовательности.Дата = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА 1
	|		КОГДА ДатыНарушенияПоследовательности.Дата <= &КонецПериодаРегистрации
	|			ТОГДА 4
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Раздел,
	|	ДатыНарушенияПоследовательности.Организация.Представление КАК ПредставлениеОрганизация,
	|	ДатыНарушенияПоследовательности.Организация КАК Организация,
	|	&ТекстПерепроведениеДокументов КАК ВидОперации,
	|	0 КАК ВидОперацииПорядок,
	|	&ТекстПерепроведениеДокументов КАК ПредставлениеВидОперации,
	|	0 КАК НомерГруппы,
	|	ЛОЖЬ КАК ПоОрганизацииВЦелом,
	|	ЛОЖЬ КАК РучнаяКорректировка,
	|	НЕОПРЕДЕЛЕНО КАК Ссылка
	|ИЗ
	|	ДатыНарушенияПоследовательности КАК ДатыНарушенияПоследовательности
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсключенныеИзПерепроведенияМесяцы КАК ИсключенныеИзПерепроведенияМесяцы
	|		ПО ДатыНарушенияПоследовательности.Организация = ИсключенныеИзПерепроведенияМесяцы.Организация
	|			И ИсключенныеИзПерепроведенияМесяцы.ПериодРегистрации = &ПериодРегистрации
	|ГДЕ
	|	(&ПоОрганизацииВЦелом
	|			ИЛИ ДатыНарушенияПоследовательности.Организация = &Организация)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Статус.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.ВыполненоСОшибками)
	|			ТОГДА 2
	|		КОГДА Статус.Устарела
	|			ТОГДА 4
	|		КОГДА Статус.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено)
	|			ТОГДА 1
	|		ИНАЧЕ 3
	|	КОНЕЦ,
	|	Статус.Организация.Представление,
	|	Статус.Организация,
	|	Статус.ВидОперации,
	|	Статус.ВидОперации.Порядок,
	|	ПРЕДСТАВЛЕНИЕ(Статус.ВидОперации),
	|	Статус.НомерГруппы,
	|	Статус.ПоОрганизацииВЦелом,
	|	Статус.РучнаяКорректировка,
	|	Статус.Ссылка
	|ИЗ
	|	ДетальныйСтатусЗакрытияМесяца КАК Статус
	|ГДЕ
	|	(Статус.Требуется
	|			ИЛИ Статус.Состояние <> ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.НеВыполнено))
	|	И (&ПоОрганизацииВЦелом
	|			ИЛИ Статус.Организация = &Организация)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Раздел,
	|	ПредставлениеОрганизация,
	|	НомерГруппы,
	|	ВидОперацииПорядок
	|ИТОГИ ПО
	|	Раздел,
	|	Организация";
	
    ВыборкаРаздел = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// Выведем отчет
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Отчет_о_выполнении_операций";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ЗакрытиеМесяца.ВыполненныеОперации");
	ОбластьМакета       = Макет.ПолучитьОбласть("Заголовок");
	ОбластьСостояние    = Макет.ПолучитьОбласть("Состояние");
	
	ОбластьМакетаОперация                  = Макет.ПолучитьОбласть("Операция");
	ОбластьМакетаОбособленноеПодразделение = Макет.ПолучитьОбласть("ОбособленноеПодразделение");
	
	ОбластьМакета.Параметры.Организация    = БухгалтерскиеОтчетыВызовСервера.ПолучитьТекстОрганизация(,Организация, ВсеОбособленныеПодразделения);
	ОбластьМакета.Параметры.Период         = Формат(Период, "ДФ='MMММ yyyy ""г.""'");
	ОбластьМакета.Параметры.ТекстСостояние = " на " + Формат(ТекущаяДатаСеанса(), "ДФ=dd.MM.yyyy");
	ТабДокумент.Вывести(ОбластьМакета);
	
	Для НомерРаздела = 1 По ЗаголовкиРазделов.Количество() Цикл
		
		// Заголовок списка
		ОбластьСостояние.Параметры.Состояние = ЗаголовкиРазделов[НомерРаздела];
		ТабДокумент.Вывести(ОбластьСостояние);
		
		// Пустой список
		Если НЕ ВыборкаРаздел.НайтиСледующий(НомерРаздела, "Раздел") Тогда
			ОбластьМакетаОперация.Параметры.Операция = НСтр("ru = 'Операций нет'");
			ТабДокумент.Вывести(ОбластьМакетаОперация);
			Продолжить;
		КонецЕсли;
		
		// Список
		ВыборкаОрганизации = ВыборкаРаздел.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаОрганизации.Следующий() Цикл
			
			Если ВсеОбособленныеПодразделения Тогда
				ОбластьМакетаОбособленноеПодразделение.Параметры.ОбособленноеПодразделение = ВыборкаОрганизации.Организация;
				ТабДокумент.Вывести(ОбластьМакетаОбособленноеПодразделение);
			КонецЕсли;
			
			НомерОперации = 0;
			ВыборкаОперации = ВыборкаОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаОперации.Следующий() Цикл
				НомерОперации = НомерОперации + 1;
				ОбластьМакетаОперация.Параметры.Операция = "" + НомерОперации + ". " + ВыборкаОперации.ВидОперации;
				ТабДокумент.Вывести(ОбластьМакетаОперация);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, 1, ОбъектыПечати, "Закрытие месяца");
	
	Возврат ТабДокумент;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Выполнение процедуры закрытия месяца

Функция ВыполнитьРегламентнуюОперацию(Период, Организация, ВидОперации, Ссылка, Состояние, ПроверятьПоследовательность)
	
	Результат = Новый Структура;
	Результат.Вставить("ВидОперации", ВидОперации);
	Результат.Вставить("Ссылка",      Ссылка);
	Результат.Вставить("Состояние",   Состояние);
	Результат.Вставить("Отказ",       Ложь);
	
	// Регламентная операция
	Если ЗакрытиеМесяцаКлиентСервер.ИспользуетсяДокументРегламентнаяОперация(ВидОперации) Тогда
		
		УстранитьДубли(Период, Организация, ВидОперации, Ссылка);
		
		Если ЗначениеЗаполнено(Ссылка) Тогда
			Объект = Ссылка.ПолучитьОбъект();
		Иначе
			Объект = Документы.РегламентнаяОперация.СоздатьДокумент();
			Объект.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено;
		КонецЕсли;
		
		Объект.Дата        = КонецМесяца(Период);
		Объект.Организация = Организация;
		Объект.ВидОперации = ВидОперации;
		
		// Отметим флаг необходимости проверки последовательности
		Если НЕ ПроверятьПоследовательность Тогда
			// По умолчанию последовательность проверяется, но сейчас этого делать не надо.
			Объект.ДополнительныеСвойства.Вставить("НеПроверятьПоследовательность", Истина);
		КонецЕсли;
		
		Если Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено Тогда
			Результат.Отказ = Не Объект.ВыполнитьОперацию();
		Иначе
			Объект.ПропуститьОперацию();
		КонецЕсли;
			
		Если Объект.ЭтоНовый() Тогда
			Результат.Вставить("Состояние", Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено);
		Иначе
			Если Результат.Отказ Тогда
				Объект.Прочитать();
			КонецЕсли;
			Результат.Вставить("Ссылка",    Объект.Ссылка);
			Результат.Вставить("Состояние", Объект.Состояние);
		КонецЕсли;
		
	// Начисление зарплаты	
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.НачислениеЗарплаты 
		И ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты") Тогда
		
		Если Состояние <> Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено Тогда
			// Начисление зарплаты "пропускать" не умеем
		Иначе
			
			СсылкаНачислениеЗарплаты = УчетЗарплаты.ПолучитьДокументНачисленияЗарплаты(НачалоМесяца(Период), Организация);
			Результат.Вставить("Ссылка", СсылкаНачислениеЗарплаты);
			
			Если НЕ ЗначениеЗаполнено(СсылкаНачислениеЗарплаты) Тогда
				Результат.Вставить("Состояние", Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено);
				Результат.Вставить("Отказ",     Истина);
			Иначе
				Объект = СсылкаНачислениеЗарплаты.ПолучитьОбъект();
				Попытка
					Объект.Записать(РежимЗаписиДокумента.Проведение);
					Результат.Вставить("Состояние", Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено);
				Исключение
					Результат.Вставить("Отказ",     Истина);
					Результат.Вставить("Состояние", Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено);
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
			
	// Начисление резерва отпусков
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.НачислениеРезерваОтпусков
		И УчетЗарплаты.ИспользуетсяПодсистемаУчетаЗарплатыИКадров()
		И УчетЗарплаты.ВедетсяУчетРезервовОтпусков(Организация, НачалоМесяца(Период)) Тогда
		
		Если Состояние <> Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено Тогда
			// Начисление резерва отпусков "пропускать" не умеем
		Иначе
			
			СсылкаНачислениеРезерваОтпусков = УчетЗарплаты.ПолучитьДокументНачисленияРезерваОтпусков(НачалоМесяца(Период), Организация);
			Результат.Вставить("Ссылка", СсылкаНачислениеРезерваОтпусков);
			
			Если НЕ ЗначениеЗаполнено(СсылкаНачислениеРезерваОтпусков) Тогда
				Результат.Вставить("Состояние", Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено);
				Результат.Вставить("Отказ",     Истина);
			Иначе
				Объект = СсылкаНачислениеРезерваОтпусков.ПолучитьОбъект();
				Попытка
					Объект.Записать(РежимЗаписиДокумента.Проведение);
					Результат.Вставить("Состояние", Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено);
				Исключение
					Результат.Вставить("Отказ",     Истина);
					Результат.Вставить("Состояние", Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено);
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Так как операцию изменили программно, то также программно запишем и историю
	Если ЗначениеЗаполнено(Ссылка) Тогда
		ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(Ссылка));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВыполнитьЗакрытиеМесяца(Период, Организация, СтатусЗакрытияМесяца, Состояние, ФинишнаяОперация = Неопределено, ТолькоОперацииОбособленногоПодразделения = Ложь)
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Истина);
	Результат.Вставить("Операции",  СтатусЗакрытияМесяца.СкопироватьКолонки("Организация, ВидОперации, Состояние, Ссылка"));
	
	// Найдем диапазон операций, которые следует выполнить
	ИндексСтартовойОперации = Неопределено;
	ИндексФинишнойОперации  = Неопределено;
	Если Не ЗначениеЗаполнено(ФинишнаяОперация) Тогда
		ИндексФинишнойОперации = СтатусЗакрытияМесяца.Количество() - 1;
	КонецЕсли;
		
	Для Каждого СтрокаТаблицы Из СтатусЗакрытияМесяца Цикл
		
		Индекс = СтатусЗакрытияМесяца.Индекс(СтрокаТаблицы);
		
		Если ИндексСтартовойОперации = Неопределено 
			И ЗакрытиеМесяцаКлиентСервер.ОперацияВРаботе(СтрокаТаблицы) 
			И СтрокаТаблицы.Организация = Организация Тогда
			ИндексСтартовойОперации = Индекс;
		КонецЕсли;
		
		Если ИндексФинишнойОперации = Неопределено И СтрокаТаблицы.ВидОперации = ФинишнаяОперация Тогда
			ИндексФинишнойОперации = Индекс;
		КонецЕсли;
		
		Если ИндексФинишнойОперации <> Неопределено Тогда
			Если ИндексСтартовойОперации <> Неопределено Или Индекс >= ИндексФинишнойОперации Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИндексСтартовойОперации = Неопределено Или ИндексФинишнойОперации = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Закроем месяц
	ФинишнаяГруппа = Неопределено; // Если произошли ошибки, то не выполняем группы, после той, в которой ошибка.
	ЭтоПерваяРегламентнаяОперация = Истина;
	
	Для Индекс = ИндексСтартовойОперации По ИндексФинишнойОперации Цикл
		
		Операция = СтатусЗакрытияМесяца[Индекс];
		
		Если ФинишнаяГруппа <> Неопределено И Операция.НомерГруппы > ФинишнаяГруппа Тогда
			Прервать;
		КонецЕсли;
		
		Если ТипЗнч(Операция.ВидОперации) <> Тип("ПеречислениеСсылка.ВидыРегламентныхОпераций") Тогда
			// Операция по проведению документов должна быть выполнена или пропущена до вызова процедуры
			Продолжить;
		КонецЕсли;
		
		Если Операция.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Пропущено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не Операция.Требуется И Операция.Состояние <> Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Операция.Организация <> Организация Тогда
			Прервать;
		КонецЕсли;
		
		Если ТолькоОперацииОбособленногоПодразделения И Операция.ПоОрганизацииВЦелом Тогда
			Прервать;
		КонецЕсли;
		
		// Сообщение о нарушении последовательности выдаем только вместе в первой регламентной операции.
		РезультатВыполненияОперации = ВыполнитьРегламентнуюОперацию(Период, Операция.Организация, Операция.ВидОперации, Операция.Ссылка, Состояние, ЭтоПерваяРегламентнаяОперация);
		
		Если РезультатВыполненияОперации.Отказ 
			Или РезультатВыполненияОперации.Состояние <> Состояние Тогда
			Результат.Вставить("Выполнено", Ложь);
			ФинишнаяГруппа = Операция.НомерГруппы;
		КонецЕсли;
		
		НоваяСтрока = Результат.Операции.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, РезультатВыполненияОперации);
		НоваяСтрока.ВидОперации = Операция.ВидОперации;
		НоваяСтрока.Организация = Операция.Организация;

		Если ЭтоПерваяРегламентнаяОперация 
			И ЗакрытиеМесяцаКлиентСервер.ИспользуетсяДокументРегламентнаяОперация(Операция.ВидОперации) Тогда
			ЭтоПерваяРегламентнаяОперация = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Находит операции, в которых указан одинаковый Период, Организация и ВидОперации.
// Если есть дубли, то отменяет выполнение у всех, кроме одной (предпочтительно - ссылка на которую передана).
Процедура УстранитьДубли(Период, Организация, ВидОперации, Ссылка)
	
	Дубли = Документы.РегламентнаяОперация.НайтиДубли(Период, Организация, ВидОперации, Ссылка);
	
	Если Дубли.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Дубли.Выбрать();
	ЭтоПервыйДокумент = Истина;
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.ОтменитьОперацию(,,, ЭтоПервыйДокумент);
		ЭтоПервыйДокумент = Ложь;
	КонецЦикла;
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// Актуализация данных 

Процедура ПроверитьАктуальностьВФоне(ПараметрыЗадания, АдресХранилища) Экспорт
	
	Организация      = ПараметрыЗадания.Организация;
	Период           = ПараметрыЗадания.Период;
	НачалоВыполнения = ПараметрыЗадания.НачалоВыполнения;
	
	Результат = ПроверитьАктуальность(Организация, Период, НачалоВыполнения);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Функция ПроверитьАктуальность(Организация, Период, НачалоВыполнения = Неопределено)
	
	Результат = Новый Структура;
	Результат.Вставить("ТребуетсяАктуализация", Ложь);
	Результат.Вставить("НачалоВыполнения", НачалоВыполнения);
	
	// Проверка актуальности не производится, это выключена соответствующая настройка.
	Если НЕ ЗакрытиеМесяцаВызовСервера.ПроверятьАктуальность() Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Без указания организации актуализация не выполняется.
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Актуализация проводится только в узле перепроведения.
	Если ОбщегоНазначенияБП.ИспользуютсяПланыОбмена(Истина) Тогда
		Если НЕ РаботаСПоследовательностямиПовтИсп.ЭтоУзелПерепроведенияДокументовПоОрганизации(Организация) Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	// Если период не указан, актуализируем на последний документ последовательности.
	КонецПоследовательности = РаботаСПоследовательностями.КонецПоследовательности(Организация);
	
	// Актуализация имеет смысл только при наличии документов в последовательности.
	Если КонецПоследовательности = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Данные должны быть актуальны до конца последовательности или до конца периода отчета (смотря что раньше).
	ПределАктуализации = Мин(КонецПоследовательности.Дата, ?(ЗначениеЗаполнено(Период), КонецДня(Период), КонецПоследовательности.Дата));
	
	Если ЗначениеЗаполнено(Период) Тогда
		Если КонецДня(Период) = КонецМесяца(Период) Тогда // Указанный период - конец месяца.
			ПределАктуализацииЗакрытияМесяца = НачалоМесяца(Период);
		Иначе // Данные по закрытию месяца должны быть актуальны на предыдущий месяц.
			ПределАктуализацииЗакрытияМесяца = НачалоМесяца(ДобавитьМесяц(Период, -1));
		КонецЕсли;
		ПределАктуализацииЗакрытияМесяца = Мин(ПределАктуализацииЗакрытияМесяца, НачалоМесяца(КонецПоследовательности.Дата));
	Иначе // Последний месяц в последовательности должен быть закрыт.
		ПределАктуализацииЗакрытияМесяца = НачалоМесяца(КонецПоследовательности.Дата);
	КонецЕсли;

	// Закрытие месяца актуализируется до начала текущего месяца.
	КонецПредыдущегоМесяца = КонецМесяца(ДобавитьМесяц(ТекущаяДатаСеанса(), -1));
	ПределАктуализацииЗакрытияМесяца = Мин(ПределАктуализацииЗакрытияМесяца, КонецПредыдущегоМесяца); 
	
	// Дата актуальности.
	ДатаАктуальности = Неопределено;
	
	МоментНачалаПоследовательности = РаботаСПоследовательностями.НачалоПоследовательности(Организация);
	
	Если МоментНачалаПоследовательности <> Неопределено Тогда // В базе есть проведенные документы.
	
		// Определение первого незакрытого периода.
		ПервыйНезакрытыйПериод = НачалоМесяца(МоментНачалаПоследовательности.Дата);
		
		ПериодРегистрации = НачалоМесяца(ПределАктуализацииЗакрытияМесяца);
		
		Пока ПериодРегистрации >= НачалоМесяца(МоментНачалаПоследовательности.Дата) Цикл
			Если Выполнено(Организация, ПериодРегистрации) Тогда
				ПервыйНезакрытыйПериод = ДобавитьМесяц(ПериодРегистрации, 1);
				Прервать;
			КонецЕсли;
			ПериодРегистрации = ДобавитьМесяц(ПериодРегистрации, -1);
		КонецЦикла;
		
		// Незакрытый месяц должен быть в пределах актуализируемого периода.
		Если ПервыйНезакрытыйПериод > ПределАктуализацииЗакрытияМесяца Тогда
			ПервыйНезакрытыйПериод = Неопределено;
		КонецЕсли;	
		
		МоментНарушенияПоследовательности = РаботаСПоследовательностями.МоментНачалаПерепроведенияСУчетомИсключенныхМесяцев(Организация, ПределАктуализации);
		
		// Вычисление даты актуальности.
		Если МоментНарушенияПоследовательности = Неопределено Тогда
			Если ПервыйНезакрытыйПериод <> Неопределено Тогда
				ДатаАктуальности = КонецМесяца(ПервыйНезакрытыйПериод);
			КонецЕсли;
		Иначе
			Если ПервыйНезакрытыйПериод = Неопределено Тогда
				ДатаАктуальности = МоментНарушенияПоследовательности.Дата;
			ИначеЕсли КонецМесяца(ПервыйНезакрытыйПериод) < МоментНарушенияПоследовательности.Дата Тогда
				ДатаАктуальности = КонецМесяца(ПервыйНезакрытыйПериод);
			Иначе
				ДатаАктуальности = МоментНарушенияПоследовательности.Дата;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаАктуальности) Тогда // Требуется актуализация итоговых данных.
		Результат.ТребуетсяАктуализация = Истина;
		Результат.Вставить("АктуализацияДоступна", ПравоИзмененияРегламентныхОпераций());
		Результат.Вставить("АктуализацияВозможна", АктуализацияВозможна(Организация));
		Результат.Вставить("ДатаАктуальности", ДатаАктуальности);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция Выполнено(Организация, Период) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Создаем временную таблицу Организации
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&Организация КАК Организация
	|ПОМЕСТИТЬ Организации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация";
	Запрос.Выполнить();
	
	// Получение детального статуса закрытия месяца.
	ЗакрытиеМесяца.СоздатьДетальныйСтатусЗакрытияМесяца(МенеджерВременныхТаблиц, Период, Организация);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Статус.Ссылка КАК Ссылка
	|ИЗ
	|	ДетальныйСтатусЗакрытияМесяца КАК Статус
	|ГДЕ
	|	Статус.Требуется = ИСТИНА";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда // Закрытие месяца не требуется.
		Возврат Истина;
	КонецЕсли;
	
	СтатусыНевыполненныхОпераций = Новый Массив;
	СтатусыНевыполненныхОпераций.Добавить(Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено);
	СтатусыНевыполненныхОпераций.Добавить(Перечисления.ВидыСостоянийРегламентныхОпераций.ВыполненоСОшибками);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СтатусыНевыполненныхОпераций", СтатусыНевыполненныхОпераций);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Статус.Ссылка КАК Ссылка
	|ИЗ
	|	ДетальныйСтатусЗакрытияМесяца КАК Статус
	|ГДЕ
	|	Статус.Требуется = ИСТИНА
	|	И Статус.Состояние В (&СтатусыНевыполненныхОпераций)";
	РезультатНевыполненныеОперации = Запрос.Выполнить();
	
	// Получение неактуальных операций.
	ЗакрытиеМесяца.СоздатьУстаревшиеОперации(МенеджерВременныхТаблиц, Период, Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УстаревшиеОперации.ВидОперации
	|ИЗ
	|	УстаревшиеОперации";
	РезультатУстаревшиеОперации = Запрос.Выполнить();
	
	Выполнено = РезультатНевыполненныеОперации.Пустой() И РезультатУстаревшиеОперации.Пустой();
	
	Возврат Выполнено;
 	
КонецФункции

Процедура АктуализироватьВФоне(ПараметрыЗадания, АдресХранилища) Экспорт
	
	Организация                  = ПараметрыЗадания.Организация;
	Период                       = ПараметрыЗадания.Период;
	УникальныйИдентификаторФормы = ПараметрыЗадания.УникальныйИдентификаторФормы;
	АдресХранилищаСОшибками      = ПараметрыЗадания.АдресХранилищаСОшибками;
	НачалоВыполнения             = ПараметрыЗадания.НачалоВыполнения;
	
	ИБФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	УспехБлокировки = Ложь;
	Если ИБФайловая Тогда
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Организация,, УникальныйИдентификаторФормы);
			УспехБлокировки = Истина;
		Исключение
			СообщенияПользователю = Новый Массив;
			СообщенияПользователю.Вставить(НСтр("ru='Не удалось заблокировать данные для актуализации.'"));
			РезультатАктуализации = Новый Структура("Выполнено", Ложь);
			РезультатАктуализации.Вставить("НачалоВыполнения", НачалоВыполнения);
			РезультатАктуализации.Вставить("СообщенияПользователю", СообщенияПользователю);
		КонецПопытки
	КонецЕсли;
	
	Если НЕ ИБФайловая ИЛИ ИБФайловая И УспехБлокировки Тогда
	
		КонецПоследовательности = РаботаСПоследовательностями.КонецПоследовательности(Организация);
		
		// Данные должны быть актуальны до конца последовательности или до конца периода отчета (смотря что раньше).
		ПределАктуализации = Мин(КонецПоследовательности.Дата, ?(ЗначениеЗаполнено(Период), КонецДня(Период), КонецПоследовательности.Дата));
		
		Если ЗначениеЗаполнено(Период) Тогда
			Если КонецДня(Период) = КонецМесяца(Период) Тогда // Указанный период - конец месяца.
				ПределАктуализацииЗакрытияМесяца = НачалоМесяца(Период);
			Иначе // Данные по закрытию месяца должны быть актуальны на предыдущий месяц.
				ПределАктуализацииЗакрытияМесяца = НачалоМесяца(ДобавитьМесяц(Период, -1));
			КонецЕсли;
			ПределАктуализацииЗакрытияМесяца = Мин(ПределАктуализацииЗакрытияМесяца, НачалоМесяца(КонецПоследовательности.Дата));
		Иначе // Последний месяц в последовательности должен быть закрыт.
			ПределАктуализацииЗакрытияМесяца = НачалоМесяца(КонецПоследовательности.Дата);
		КонецЕсли;

		// Закрытие месяца актуализируется до начала текущего месяца.
		КонецПредыдущегоМесяца = КонецМесяца(ДобавитьМесяц(ТекущаяДатаСеанса(), -1));
		ПределАктуализацииЗакрытияМесяца = Мин(ПределАктуализацииЗакрытияМесяца, КонецПредыдущегоМесяца); 
		
		РезультатПроверкиАктуальности = ПроверитьАктуальность(Организация, ПределАктуализации);
		Если РезультатПроверкиАктуальности.ТребуетсяАктуализация Тогда
			НачалоПериода = РезультатПроверкиАктуальности.ДатаАктуальности;
		Иначе
			НачалоПериода = ПределАктуализации;
		КонецЕсли;
		
		МоментНарушенияПоследовательности = РаботаСПоследовательностями.МоментНачалаПерепроведенияСУчетомИсключенныхМесяцев(Организация, ПределАктуализации);
		
		// Вычисление количества выполняемых действий.
		КоличествоДействий = 0;
		ПериодРегистрации = НачалоПериода;
		Пока НачалоМесяца(ПериодРегистрации) <= НачалоМесяца(ПределАктуализации) Цикл
			КоличествоДействий = КоличествоДействий + 2; // Каждый месяц это два действия: восстановление последовательности и закрытие месяца.
			ПериодРегистрации = ДобавитьМесяц(ПериодРегистрации, 1);
		КонецЦикла;
		
		РезультатАктуализации = Новый Структура("Выполнено", Истина);
		РезультатАктуализации.Вставить("НачалоВыполнения", НачалоВыполнения);
		РезультатАктуализации.Вставить("ПределАктуализации", ПределАктуализации);
		
		СчетчикДействий = 1;
		ПериодРегистрации = НачалоПериода;
		Пока НачалоМесяца(ПериодРегистрации) <= НачалоМесяца(ПределАктуализации) Цикл
			
			// Восстановление последовательности.
			Если МоментНарушенияПоследовательности <> Неопределено И КонецМесяца(ПериодРегистрации) >= МоментНарушенияПоследовательности.Дата Тогда
				ПараметрыПерепроведения 								= Обработки.ГрупповоеПерепроведениеДокументов.ПараметрыПерепроведения();
				ПараметрыПерепроведения.Организация 					= Организация;
				ПараметрыПерепроведения.УникальныйИдентификаторФормы 	= УникальныйИдентификаторФормы;
				ПараметрыПерепроведения.МоментНачала					= МоментНарушенияПоследовательности;
				ПараметрыПерепроведения.ДатаОкончания					= КонецМесяца(ПериодРегистрации);
				ПараметрыПерепроведения.ЭтоЗакрытиеМесяца 				= Истина;
				ПараметрыПерепроведения.АдресХранилищаСОшибками         = АдресХранилищаСОшибками;
				Результат =	Обработки.ГрупповоеПерепроведениеДокументов.ВыполнитьПерепроведение(ПараметрыПерепроведения);

				Если Результат.НеУдалосьПровести > 0 Тогда
					РезультатАктуализации.Выполнено = Ложь;
					РезультатАктуализации.Вставить("АдресХранилищаСОшибками", Результат.АдресХранилищаСОшибками);
					Прервать;
				КонецЕсли;
					
			КонецЕсли;
					
			// Индикация прогресса.
			СчетчикДействий = СчетчикДействий + 1;
			ДлительныеОперации.СообщитьПрогресс(Окр(СчетчикДействий / КоличествоДействий * 100, 0));
			
			// Закрытие месяца (актуализируется до начала текущего месяца).
			Если НачалоМесяца(ПериодРегистрации) <= ПределАктуализацииЗакрытияМесяца Тогда
			
				СтатусЗакрытияМесяца = СтатусЗакрытияМесяца(Организация, ПериодРегистрации);
				
				Попытка
					Результат = ВыполнитьЗакрытиеМесяца(
						ПериодРегистрации, 
						Организация, 
						СтатусЗакрытияМесяца, 
						Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено,
						Неопределено,
						Ложь);
				Исключение
					РезультатАктуализации.Выполнено = Ложь;
					СообщенияПользователю = ПолучитьСообщенияПользователю(Истина);
					СообщенияПользователю = ОбработатьСообщенияПользователю(СообщенияПользователю);
					СообщенияПользователю.Добавить(ОписаниеОшибки());
					РезультатАктуализации.Вставить("СообщенияПользователю", СообщенияПользователю);
					Прервать;
				КонецПопытки;	
					
				Если НЕ Результат.Выполнено Тогда
					ОшибочныеОперации = Результат.Операции.НайтиСтроки(Новый Структура("Состояние", Перечисления.ВидыСостоянийРегламентныхОпераций.ВыполненоСОшибками));
					РезультатАктуализации.Выполнено = Ложь;
					РезультатАктуализации.Вставить("ПериодРегистрации", НачалоМесяца(ПериодРегистрации));
					Если Результат.Операции.Количество() > 0 Тогда
						РезультатАктуализации.Вставить("ВидОперации", Результат.Операции[0].ВидОперации);
					КонецЕсли;
					Если ОшибочныеОперации.Количество() > 0 Тогда
						РезультатАктуализации.Вставить("РегламентнаяОперацияСОшибками", ОшибочныеОперации[0].Ссылка);
					КонецЕсли;
					СообщенияПользователю = ПолучитьСообщенияПользователю(Истина);
					РезультатАктуализации.Вставить("СообщенияПользователю", ОбработатьСообщенияПользователю(СообщенияПользователю));
					Прервать;
				КонецЕсли;
				
			КонецЕсли;
			
			// Индикация прогресса.
			СчетчикДействий = СчетчикДействий + 1;
			ДлительныеОперации.СообщитьПрогресс(Окр(СчетчикДействий / КоличествоДействий * 100, 0));
			
			ПериодРегистрации = ДобавитьМесяц(ПериодРегистрации, 1);
			
		КонецЦикла;
	
		РазблокироватьДанныеДляРедактирования(Организация, УникальныйИдентификаторФормы);
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(РезультатАктуализации, АдресХранилища);
	
КонецПроцедуры

Функция СтатусЗакрытияМесяца(Организация, Период) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Создаем временную таблицу Организации
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&Организация КАК Организация
	|ПОМЕСТИТЬ Организации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация";
	Запрос.Выполнить();                                                                          
	
	// Получаем детальный статус закрытия месяца
	ЗакрытиеМесяца.СоздатьДетальныйСтатусЗакрытияМесяца(МенеджерВременныхТаблиц, Период, Организация);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	ДетальныйСтатусЗакрытияМесяца КАК Статус
	|ГДЕ
	|	Статус.Требуется = ИСТИНА
	|УПОРЯДОЧИТЬ ПО
	|	Статус.ВидОперации.Порядок";
	СтатусЗакрытияМесяца = Запрос.Выполнить().Выгрузить();
	
	Возврат СтатусЗакрытияМесяца;
	
КонецФункции

// СЕРВИС

Функция ПравоИзмененияРегламентныхОпераций() Экспорт
	
	Возврат ПравоДоступа("Изменение", Метаданные.Документы.РегламентнаяОперация);
	
КонецФункции

Функция АктуализацияВозможна(Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчетнаяПолитикаОрганизаций.СистемаНалогообложения
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
	|ГДЕ
	|	УчетнаяПолитикаОрганизаций.Организация = &Организация
	|	И УчетнаяПолитикаОрганизаций.ПлательщикНДС = ИСТИНА";
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Пустой();
	
КонецФункции

Функция ОбработатьСообщенияПользователю(СообщенияПользователю)
	
	Результат = Новый Массив;
	
	Если СообщенияПользователю = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для каждого Сообщение Из СообщенияПользователю Цикл
		
		ПозицияСлужебнойПодстроки = Найти(Сообщение.Текст, "{СтандартныеПодсистемы.ДлительныеОперации}");
		Если ПозицияСлужебнойПодстроки <> 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Результат.Найти(Сообщение.Текст) = Неопределено Тогда
			Результат.Добавить(Сообщение.Текст);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецЕсли
