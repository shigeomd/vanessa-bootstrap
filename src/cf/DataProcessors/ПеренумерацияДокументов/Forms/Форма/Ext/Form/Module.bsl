
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	Если Параметры.ВидДокументов.Типы().Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ДоступнаРольПолныеПрава = Пользователи.РолиДоступны("ПолныеПрава");

	Организация = Параметры.Организация;
	НачалоПериода = Параметры.НачалоПериода;
	КонецПериода = Параметры.КонецПериода;
	ВидДокументов = Параметры.ВидДокументов;

	Если Не ДоступнаРольПолныеПрава Тогда
		// Дальнейшую инициализацию выполнять не будем, 
		// т.к. неполноправный пользователь не может выполнять перенумерацию, 
		// о чем скажем в ПриОткрытии()
		Возврат;
	КонецЕсли;
	
	НачальныйНомер = 1;
	
	ЗаполнитьСписокОбъектов();
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.НастройкаНомеров;
	
	ТребуетсяПодтверждениеЗакрытияФормы = Истина;
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.Печать
	
	ШаблонЗаголовка = НСтр("ru = 'Организация: %1
		|В хронологическом порядке с %2 по %3'");
		
	Элементы.НадписьОписаниеОтбора.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонЗаголовка, Параметры.Организация, Формат(Параметры.НачалоПериода, "ДФ=dd.MM.yyyy"), Формат(Параметры.КонецПериода, "ДФ=dd.MM.yyyy"));
		
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Перенумерация ""%1""'"),
		Метаданные.НайтиПоТипу(ВидДокументов.Типы()[0]).Синоним);
		
	ЭтоПеренумерацияПКО = ВидДокументов.Типы()[0] = Тип("ДокументСсылка.ПриходныйКассовыйОрдер");
	ЭтоПеренумерацияРКО = ВидДокументов.Типы()[0] = Тип("ДокументСсылка.РасходныйКассовыйОрдер");
	ЭтоПеренеумерацияСФ = ВидДокументов.Типы()[0] = Тип("ДокументСсылка.СчетФактураВыданный");
	
	Элементы.СписокГруппаПечатьПКО.Видимость = ЭтоПеренумерацияПКО;
	Элементы.СписокГруппаПечатьРКО.Видимость = ЭтоПеренумерацияРКО;
	Элементы.СписокГруппаПечатьСФ.Видимость = ЭтоПеренеумерацияСФ;
	Элементы.ПеренумерованныеГруппаПечатьПКО.Видимость = ЭтоПеренумерацияПКО;
	Элементы.ПеренумерованныеГруппаПечатьРКО.Видимость = ЭтоПеренумерацияРКО;
	Элементы.ПеренумерованныеГруппаПечатьСФ.Видимость = ЭтоПеренеумерацияСФ;
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Перенумерация объектов.Создание формы'"), УровеньЖурналаРегистрации.Информация,
		Метаданные.Обработки.ПеренумерацияДокументов);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Если ВидДокументов.Типы().Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Обработка ""Перенумерация документов"" может быть открыта только из экспресс-проверки ведения учета.'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ ДоступнаРольПолныеПрава Тогда
		ТекстСообщения = НСтр("ru = 'Проводить перенумерацию документов может только пользователь с ролью ""Полные права"".'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	Если НачалоГода(НачалоПериода) <> НачалоГода(КонецПериода) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Проводить перенумерацию документов возможно только в пределах года.'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	Если ТребуетсяПодтверждениеЗакрытияФормы Тогда
		Отказ = Истина;

		ТекстВопроса = НСтр("ru = 'Документы не были перенумерованы. Закрыть форму?'");
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить("Закрыть", НСтр("ru = 'Закрыть'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Не закрывать'"));
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки);

	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура НачальныйНомерПриИзменении(Элемент)
	СоставитьПланЗаменыНомеров();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <ИМЯ ТАБЛИЦЫ ФОРМЫ>

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.СписокПерейтиККонфликтующему.Доступность = ТекущиеДанные.НомерЗанят;
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПоказатьЗначение(, Элемент.ТекущиеДанные.Ссылка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Перенумеровать(Команда)
	ПодключитьОбработчикОжидания("ЗапуститьПроцессПеренумерации", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокумент(Команда)
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ПоказатьЗначение(, ТекущиеДанные.Ссылка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиККонфликтующему(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КонфликтующийДокумент = КонфликтующийДокумент(ТекущиеДанные.НовыйНомер);
	Если КонфликтующийДокумент <> Неопределено Тогда
		ПоказатьЗначение(, КонфликтующийДокумент);
	Иначе
		ТекущиеДанные.НомерЗанят = Ложь;
		ПоказатьПредупреждение(, НСтр("ru = 'Конфликтов номера не обнаружено.'"));
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.НастройкаНомеров Тогда
		УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Элементы.Список);
	Иначе
		УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Элементы.Перенумерованные);
	КонецЕсли;
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ЗаполнитьСписокОбъектов()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаОбъектов.Ссылка КАК Ссылка,
	|	ТаблицаОбъектов.Номер КАК СтарыйНомер,
	|	НАЧАЛОПЕРИОДА(ТаблицаОбъектов.Дата, ДЕНЬ) КАК Дата
	|ИЗ
	|	&ТаблицаОбъектов КАК ТаблицаОбъектов
	|ГДЕ
	|	ТаблицаОбъектов.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ТаблицаОбъектов.ПометкаУдаления = ЛОЖЬ
	|	И ТаблицаОбъектов.Организация = &Организация
	|	&ДополнительныеУсловия";
	
	ПолноеИмяДокумента = Метаданные.НайтиПоТипу(ВидДокументов.Типы()[0]).ПолноеИмя();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаОбъектов", ПолноеИмяДокумента);
	
	Если ПолноеИмяДокумента = "Документ.СчетФактураВыданный" Тогда
		// Системные номера исправленных счетов-фактур не используются нигде для 
		// вывода в отчеты, печатные формы и прочее. Вместо системного номера для 
		// исправленных счетов-фактур выводится реквизит НомерИсходногоДокумента
		// с номером первичного счета-фактуры, который исправляют.
		// При этом у исправленных счетов-фактур используется дополнительный префикс "И",
		// чтобы не нарушать нумерацию обычных и корректировочных счетов-фактур.
		// Поэтому исключаем из общей проверки исправленные счета-фактуры.
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДополнительныеУсловия", "И ТаблицаОбъектов.Исправление = ЛОЖЬ");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДополнительныеУсловия", "");
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(КонецПериода));
	Выборка = Запрос.Выполнить().Выбрать();
	НачальныйНомер = 1000000000;
	Список.Очистить();
	Пока Выборка.Следующий() Цикл
		Документ = Список.Добавить();
		ЗаполнитьЗначенияСвойств(Документ, Выборка);
		Документ.Префикс = ПолныйПрефикс(Документ.СтарыйНомер);
		Документ.СтарыйНомерЧислом = НомерЧислом(Документ.СтарыйНомер);
		НачальныйНомер = Мин(Документ.СтарыйНомерЧислом, НачальныйНомер);
	КонецЦикла;
	Список.Сортировать("Дата, СтарыйНомерЧислом");
	
	СоставитьПланЗаменыНомеров();
КонецПроцедуры

&НаСервере
Процедура СоставитьПланЗаменыНомеров()
	
	Для Каждого Документ Из Список Цикл
		Документ.НовыйНомер = "";
		Документ.НомерОтличается = Ложь;
	КонецЦикла;
	
	ПервыйНомерДокументаВПериоде = НачальныйНомер;
	
	ТаблицаДат = Список.Выгрузить(, "Дата");
	ТаблицаДат.Свернуть("Дата");
	ДатыДокументов = ТаблицаДат.ВыгрузитьКолонку("Дата");
	Для Каждого День Из ДатыДокументов Цикл
		ДокументыДня = Список.НайтиСтроки(Новый Структура("Дата", День));
		ПоследнийНомерДокументаВПериоде = ПервыйНомерДокументаВПериоде + ДокументыДня.Количество() - 1;
		НеназначенныеНомера = Новый Массив;
		Для Номер = ПервыйНомерДокументаВПериоде По ПоследнийНомерДокументаВПериоде Цикл
			НайденныеДокументы = Список.НайтиСтроки(Новый Структура("Дата,СтарыйНомерЧислом", День, Номер));
			Если НайденныеДокументы.Количество() > 0 Тогда
				Документ = НайденныеДокументы[0];
				Документ.НовыйНомер = Документ.СтарыйНомер;
				Документ.НовыйНомерЧислом = Документ.СтарыйНомерЧислом;
			Иначе
				НеназначенныеНомера.Добавить(Номер);
			КонецЕсли;
		КонецЦикла;
		ДокументыСИзменяемымНомером = Список.НайтиСтроки(Новый Структура("Дата,НовыйНомер", День, ""));
		Для Индекс = 0 По ДокументыСИзменяемымНомером.Количество() - 1 Цикл
			Документ = ДокументыСИзменяемымНомером[Индекс];
			Документ.НовыйНомерЧислом = НеназначенныеНомера[Индекс];
			ДлинаНомера = СтрДлина(Документ.СтарыйНомер);
			Документ.НовыйНомер = Документ.Префикс + СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Формат(Документ.НовыйНомерЧислом, "ЧГ=0"), ДлинаНомера - СтрДлина(Документ.Префикс), "0", "Слева");
			Документ.НомерОтличается = Истина;
		КонецЦикла;
		ПервыйНомерДокументаВПериоде = ПоследнийНомерДокументаВПериоде + 1;
	КонецЦикла;
	
	Список.Сортировать("НовыйНомерЧислом");
	
	ПроверитьКоллизии();

КонецПроцедуры

&НаСервере
Процедура ПроверитьКоллизии()

	ТаблицаКоллизийНомеров = ТаблицаКоллизийНомеров();
	Для Каждого ОписаниеОбъекта Из Список Цикл
		ОписаниеОбъекта.НомерЗанят = ТаблицаКоллизийНомеров.Найти(ОписаниеОбъекта.НовыйНомер) <> Неопределено;
		ОписаниеОбъекта.НомерОтличается = НомерЧислом(ОписаниеОбъекта.НовыйНомер) <> НомерЧислом(ОписаниеОбъекта.СтарыйНомер);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ТаблицаКоллизийНомеров()
	
	ТаблицаОбъектов = Список.Выгрузить(, "НовыйНомер, Ссылка");
	СписокНомеров = ТаблицаОбъектов.ВыгрузитьКолонку("НовыйНомер");
	СписокОбъектов = ТаблицаОбъектов.ВыгрузитьКолонку("Ссылка");
	
	Если СписокОбъектов.Количество() = 0 Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаОбъектов.Номер
	|ИЗ
	|	&ТаблицаОбъектов КАК ТаблицаОбъектов
	|ГДЕ
	|	ТаблицаОбъектов.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НЕ ТаблицаОбъектов.Ссылка В (&СписокОбъектов)
	|	И ТаблицаОбъектов.Номер В(&СписокНомеров)
	|	И ТаблицаОбъектов.ПометкаУдаления = ЛОЖЬ
	|	&ДополнительныеУсловия";
	
	ПолноеИмяДокумента = Метаданные.НайтиПоТипу(ВидДокументов.Типы()[0]).ПолноеИмя();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаОбъектов", ПолноеИмяДокумента);
	
	Если ПолноеИмяДокумента = "Документ.СчетФактураВыданный" Тогда
		// Системные номера исправленных счетов-фактур не используются нигде для 
		// вывода в отчеты, печатные формы и прочее. Вместо системного номера для 
		// исправленных счетов-фактур выводится реквизит НомерИсходногоДокумента
		// с номером первичного счета-фактуры, который исправляют.
		// При этом у исправленных счетов-фактур используется дополнительный префикс "И",
		// чтобы не нарушать нумерацию обычных и корректировочных счетов-фактур.
		// Поэтому исключаем из общей проверки исправленные счета-фактуры.
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДополнительныеУсловия", "И ТаблицаОбъектов.Исправление = ЛОЖЬ");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДополнительныеУсловия", "");
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокОбъектов", СписокОбъектов);
	Запрос.УстановитьПараметр("СписокНомеров", СписокНомеров);
	
	// для документов с периодичностью номера "год".
	Запрос.УстановитьПараметр("НачалоПериода", НачалоГода(НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода", КонецГода(КонецПериода));
	
	ТаблицаЗанятыхНомеров = Запрос.Выполнить().Выгрузить();
	ТаблицаЗанятыхНомеров.Индексы.Добавить("Номер");
	
	Возврат ТаблицаЗанятыхНомеров;
КонецФункции

&НаСервере
Функция КоличествоКоллизий()
	Возврат Список.НайтиСтроки(Новый Структура("НомерЗанят", Истина)).Количество();
КонецФункции

&НаСервере
Функция ЕстьКоллизии()
	Возврат КоличествоКоллизий() <> 0;
КонецФункции

&НаСервере
Функция КонфликтующийДокумент(НомерКонфликтующего)
	
	ТаблицаОбъектов = Список.Выгрузить(, "Ссылка");
	СписокОбъектов = ТаблицаОбъектов.ВыгрузитьКолонку("Ссылка");
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаОбъектов.Ссылка
	|ИЗ
	|	&ТаблицаОбъектов КАК ТаблицаОбъектов
	|ГДЕ
	|	ТаблицаОбъектов.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НЕ ТаблицаОбъектов.Ссылка В (&СписокОбъектов)
	|	И ТаблицаОбъектов.Номер = &НомерКонфликтующего
	|	И ТаблицаОбъектов.ПометкаУдаления = ЛОЖЬ
	|	&ДополнительныеУсловия";
	
	ПолноеИмяДокумента = Метаданные.НайтиПоТипу(ВидДокументов.Типы()[0]).ПолноеИмя();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаОбъектов", ПолноеИмяДокумента);
	
	Если ПолноеИмяДокумента = "Документ.СчетФактураВыданный" Тогда
		// Системные номера исправленных счетов-фактур не используются нигде для 
		// вывода в отчеты, печатные формы и прочее. Вместо системного номера для 
		// исправленных счетов-фактур выводится реквизит НомерИсходногоДокумента
		// с номером первичного счета-фактуры, который исправляют.
		// При этом у исправленных счетов-фактур используется дополнительный префикс "И",
		// чтобы не нарушать нумерацию обычных и корректировочных счетов-фактур.
		// Поэтому исключаем из общей проверки исправленные счета-фактуры.
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДополнительныеУсловия", "И ТаблицаОбъектов.Исправление = ЛОЖЬ");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДополнительныеУсловия", "");
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НомерКонфликтующего", НомерКонфликтующего);
	Запрос.УстановитьПараметр("СписокОбъектов", СписокОбъектов);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоГода(НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода", КонецГода(КонецПериода));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ЗапуститьПроцессПеренумерации()
	ОчиститьСообщения();
	Если ЕстьКоллизии() Тогда
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Нельзя перенумеровать документы в выбранном периоде, так как
						|некоторые номера заняты документами, находящимися за его пределами.
						|Выбрать документы для перенумерации за весь %1 год?'"),
			Формат(Год(НачалоПериода), "ЧГ=0"));
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Выбрать'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗапуститьПроцессПеренумерацииЗавершение", ЭтотОбъект);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки);
		Возврат;

	Иначе
		ВыполнитьПеренумерацию();
		Если Не РезультатФоновогоЗадания.ЗаданиеВыполнено Тогда
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("ПроверитьВыполнениеПеренумерации", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
			Возврат;
		Иначе
			ПеренумерацияЗавершена();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПроцессПеренумерацииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		НачалоПериода = НачалоГода(НачалоПериода);
		КонецПериода = КонецГода(КонецПериода);
		ЗаполнитьСписокОбъектов();
	Иначе
		Для Индекс = 0 По Список.Количество() - 1 Цикл
			Элемент = Список[Индекс];
			Если Элемент.НомерЗанят Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Номер %1 занят документом, находящимся за пределами выбранного периода.'"), Элемент.НовыйНомер),
					, "Список[" + Индекс + "].НовыйНомер");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыполнениеПеренумерации()
	
	Попытка
		РезультатФоновогоЗадания.ЗаданиеВыполнено = ЗаданиеВыполнено(РезультатФоновогоЗадания.ИдентификаторЗадания);
	Исключение
		ПеренумерацияЗавершена();
		ВызватьИсключение;
	КонецПопытки;
	
	Если РезультатФоновогоЗадания.ЗаданиеВыполнено Тогда
		ПеренумерацияЗавершена();
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("ПроверитьВыполнениеПеренумерации", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервере
Процедура ВыполнитьПеренумерацию()

	Элементы.Страницы.ТекущаяСтраница = Элементы.ДлительнаяОперация;
	Элементы.ФормаПеренумеровать.Видимость = Ложь;
	Элементы.ФормаОтмена.Заголовок = НСтр("ru = 'Закрыть'");

	ПараметрыПеренумерации = Новый Структура;
	ПараметрыПеренумерации.Вставить("НачалоПериода", НачалоПериода);
	ПараметрыПеренумерации.Вставить("КонецПериода", КонецПериода);
	ПараметрыПеренумерации.Вставить("Организация", Организация);
	ПараметрыПеренумерации.Вставить("ВидДокументов", Метаданные.НайтиПоТипу(ВидДокументов.Типы()[0]).ПолноеИмя());
	ПараметрыПеренумерации.Вставить("ИзменяемыеДокументы", Список.Выгрузить(Список.НайтиСтроки(Новый Структура("НомерОтличается", Истина))));
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		РезультатФоновогоЗадания = Новый Структура("АдресХранилища, ЗаданиеВыполнено", Неопределено, Истина);
		РезультатФоновогоЗадания.Вставить("АдресХранилища", ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор));
		Обработки.ПеренумерацияДокументов.ВыполнитьПеренумерацию(ПараметрыПеренумерации, РезультатФоновогоЗадания.АдресХранилища);
	Иначе
		РезультатФоновогоЗадания = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"Обработки.ПеренумерацияДокументов.ВыполнитьПеренумерацию",
			ПараметрыПеренумерации, 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Перенумерация документов %1'"),
				Метаданные.НайтиПоТипу(ВидДокументов.Типы()[0]).Синоним));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренумерацияЗавершена()
	
	ЕстьИзмененные = Ложь;

	ПеренумерацияЗавершенаНаСервере(ЕстьИзмененные);

	Если Не ЕстьИзмененные Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Перенумерация не выполнена.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПеренумерацияЗавершенаНаСервере(ЕстьИзмененные)
	
	Если РезультатФоновогоЗадания.ЗаданиеВыполнено = Истина Тогда
		ЗагрузитьРезультатФоновогоЗадания();
	КонецЕсли;
	
	ЕстьИзмененные = Список.НайтиСтроки(Новый Структура("НомерИзменен", Истина)).Количество() > 0;
	ЕстьНеизмененные = Список.НайтиСтроки(Новый Структура("НомерОтличается, НомерИзменен", Истина, Ложь)).Количество() > 0;
	
	Если Не ЕстьИзмененные Тогда
		Элементы.ФормаПеренумеровать.Видимость = Истина;
		Элементы.ФормаОтмена.Заголовок = НСтр("ru = 'Отмена'");
		Элементы.Страницы.ТекущаяСтраница = Элементы.НастройкаНомеров;
	Иначе                                                                                                                                		
		Элементы.Страницы.ТекущаяСтраница = Элементы.ПеренумерацияЗавершена;
		Элементы.ФормаПеренумеровать.Видимость = Ложь;
		ТребуетсяПодтверждениеЗакрытияФормы = Ложь;

		Если ЕстьНеизмененные Тогда
			Элементы.СтраницыПеренумерацияВыполнена.ТекущаяСтраница = Элементы.ПеренумерацияВыполненаЧастично;
		Иначе
			Элементы.СтраницыПеренумерацияВыполнена.ТекущаяСтраница = Элементы.ПеренумерацияВыполненаПолностью;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатФоновогоЗадания()
	
	РезультатПеренумерации = ПолучитьИзВременногоХранилища(РезультатФоновогоЗадания.АдресХранилища);
	Для Каждого Ссылка Из РезультатПеренумерации.ИзмененныеДокументы Цикл
		Для Каждого Документ Из Список.НайтиСтроки(Новый Структура("Ссылка", Ссылка)) Цикл
			Документ.НомерИзменен = Истина;
			ЗаполнитьЗначенияСвойств(Перенумерованные.Добавить(), Документ);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = "Закрыть" Тогда
		ТребуетсяПодтверждениеЗакрытияФормы = Ложь;
		Закрыть(Ложь);
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НомерЧислом(НомерСтрокой)

	ЧисловаяЧастьНомера = "";
	ДлинаСтроки = СтрДлина(НомерСтрокой);
	Для Счетчик = 0 По ДлинаСтроки - 1 Цикл
		НомерСимвола = ДлинаСтроки - Счетчик;
		ТекСимвол = Сред(НомерСтрокой, НомерСимвола, 1);
		ЭтоЧисло = Найти("0123456789", ТекСимвол) > 0;
		Если ЭтоЧисло Тогда
			ЧисловаяЧастьНомера = ТекСимвол + ЧисловаяЧастьНомера;
		ИначеЕсли НЕ ПустаяСтрока(ЧисловаяЧастьНомера) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Число("0"+ЧисловаяЧастьНомера);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолныйПрефикс(Знач Код)
	
	Пока СтрДлина(Код) > 0 Цикл
		
		Символ = Прав(Код, 1);
		
		Если Найти("0123456789", Символ) = 0 Тогда
			Прервать;
		КонецЕсли;
		
		Код = Лев(Код, СтрДлина(Код) - 1);
		
	КонецЦикла;
	
	Возврат Код;
КонецФункции


&НаКлиенте
Процедура ПриЗакрытии()
	
	Если ТипЗнч(РезультатФоновогоЗадания) = Тип("Структура")
		И Не РезультатФоновогоЗадания.ЗаданиеВыполнено Тогда
		ОтменитьВыполнениеЗадания(РезультатФоновогоЗадания.ИдентификаторЗадания);
	КонецЕсли;
	
	ОтметитьЗакрытиеФормыВЖурналеРегистрации();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтметитьЗакрытиеФормыВЖурналеРегистрации()
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Перенумерация объектов.Закрытие формы'"), УровеньЖурналаРегистрации.Информация,
		Метаданные.Обработки.ПеренумерацияДокументов);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
КонецПроцедуры

&НаКлиенте
Процедура ПеренумерованныеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПоказатьЗначение(, Элемент.ТекущиеДанные.Ссылка);
КонецПроцедуры
