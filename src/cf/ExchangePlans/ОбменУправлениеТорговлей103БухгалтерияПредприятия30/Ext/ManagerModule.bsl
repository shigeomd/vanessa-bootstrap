#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Позволяет переопределить настройки плана обмена, заданные по умолчанию.
// Значения настроек по умолчанию см. в ОбменДаннымиСервер.НастройкиПланаОбменаПоУмолчанию
// 
// Параметры:
//	Настройки - Структура - Сеодержит настройки по умолчанию
//
Процедура ОпределитьНастройки(Настройки, ИдентификаторНастройки) Экспорт
	Настройки.Вставить("ПредупреждатьОНесоответствииВерсийПравилОбмена", Ложь);
КонецПроцедуры

// Возвращает представление отбора для варианта дополнения выгрузки по сценарию узла.
//
// Параметры:
//     Получатель - ПланОбменаСсылка - узел, для которого определяется представление отбора.
//     Параметры  - Структура        - характеристики отбора.
//
// Возвращаемое значение: 
//     Строка - описание отбора
//
Функция ПредставлениеОтбораИнтерактивнойВыгрузки(Получатель, Параметры) Экспорт
	
КонецФункции

// Предназначена для настройки вариантов интерактивной настройки выгрузки по сценарию узла.
// Для настройки необходимо установить значения свойств параметров в необходимые значения.
//
// Параметры:
//  Получатель - ПланОбменаСсылка - узел, для которого производится настройка.
//  Параметры  - Структура        - параметры для изменения.
//
Процедура НастроитьИнтерактивнуюВыгрузку(Получатель, Параметры) Экспорт
	
КонецПроцедуры

// Обработчик события при получении данных узла-отправителя. Событие возникает при 
// получении данных узла-отправителя, когда данные узла прочитаны из сообщения обмена, 
// но не записаны в ин-формационную базу. В обработчике можно изменить полученные 
// данные или вовсе отказаться от получения данных узла.
// 
// Параметры:
//  Отправитель – ПланОбменаОбъект – узел плана обмена, от имени которого выполняется 
// 									 получение данных.
//  Игнорировать – Булево – признак отказа от получения данных узла. Если в обработчике 
//							установить значение этого параметра в Истина, то получение 
//							данных узла выполнено не будет. Значение по умолчанию – Ложь.
// 
Процедура ПриПолученииДанныхОтправителя(Отправитель, Игнорировать) Экспорт
	
КонецПроцедуры

// Обработчик события при отправке данных узла-отправителя. Событие возникает при 
// отправке данных узла-отправителя из текущей базы в базу-корреспондент, до 
// помещения данных узла в сообщение обмена. В обработчике можно изменить 
// отправляемые данные или вовсе отказаться от отправки данных узла.
// 
// Параметры:
//  Отправитель – ПланОбменаОбъект – узел плана обмена, от имени которого выполняется 
// 									 отправка данных.
//  Игнорировать – Булево – признак отказа от выгрузки данных узла. Если в обработчике 
//							установить значение этого параметра в Истина, то отправка 
//							данных узла выполнена не будет. Значение по умолчанию – Ложь.
// 
Процедура ПриОтправкеДанныхОтправителя(Отправитель, Игнорировать) Экспорт
	
КонецПроцедуры

// Обработчик события при подключении к корреспонденту. Событие возникает при успешном 
// подключении к корреспонденту и получении версии конфигурации корреспондента 
// при настройке обмена с использованием помощника через прямое подключение или 
// при подключении к корреспонденту через Интернет.
// 
// Параметры:
//  ВерсияКорреспондента - Строка - версия конфигурации корреспондента, например, "2.1.5.1".
// 
Процедура ПриПодключенииККорреспонденту(ВерсияКорреспондента) Экспорт
	
КонецПроцедуры

// Возвращает структуру значений по умолчению для узла;
// Структура настроек повторяет состав реквизитов шапки плана обмена;
// Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  СтруктураНастроек - Структура - структура значений по умолчанию на узле плана обмена
// 
Функция ЗначенияПоУмолчаниюНаУзле(ВерсияКорреспондента, ИмяФормы, ИдентификаторНастройки) Экспорт
	
	Возврат Новый Структура("СкладДляОбменаДаннымиСУТ");
	
КонецФункции

// Возвращает имя файла настроек по умолчанию;
// В этот файл будут выгружены настройки обмена для приемника;
// Это значение должно быть одинаковым в плане обмена источника и приемника.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  Строка, 255 - имя файла по умолчанию для выгрузки настроек обмена данными
//
Функция ИмяФайлаНастроекДляПриемника() Экспорт
	
	Возврат "Настройки обмена для БП-УТ";
	
КонецФункции

// Возвращает массив используемых транспортов сообщений для этого плана обмена
//
// 1. Например, если план обмена поддерживает только два транспорта сообщений FILE и FTP,
// то тело функции следует определить следующим образом:
//
//	Результат = Новый Массив;
//	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FILE);
//	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FTP);
//	Возврат Результат;
//
// 2. Например, если план обмена поддерживает все транспорты сообщений, определенных в конфигурации,
// то тело функции следует определить следующим образом:
//
//	Возврат ОбменДаннымиСервер.ВсеТранспортыСообщенийОбменаКонфигурации();
//
// Возвращаемое значение:
//  Массив - массив содержит значения перечисления ВидыТранспортаСообщенийОбмена
//
Функция ИспользуемыеТранспортыСообщенийОбмена() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FILE);
	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FTP);
	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.COM);
	Возврат Результат;
	
КонецФункции

// Возвращает пользовательскую форму для создания начального образа базы.
// Эта форма будет открыта после завершения настройки обмена с помощью помощника.
// Для планов обмена не РИБ функция возвращает пустую строку
//
// Возвращаемое значение:
//  Строка, Неогранич - имя формы
//
// Например:
//	Возврат "ПланОбмена._ДемоРаспределеннаяИнформационнаяБаза.Форма.ФормаСозданияНачальногоОбраза";
//
Функция ИмяФормыСозданияНачальногоОбраза() Экспорт
	
	Возврат "";
	
КонецФункции

// Возвращает представление команды создания нового обмена данными.
//
// Возвращаемое значение:
//  Строка, Неогранич - представление команды, выводимое в пользовательском интерфейсе.
//
// Например:
//	Возврат НСтр("ru = 'Создать обмен в распределенной информационной базе'");
//
Функция ЗаголовокКомандыДляСозданияНовогоОбменаДанными() Экспорт
	
	Возврат НСтр("ru = 'Управление торговлей, ред. 10.3'");
	
КонецФункции

// Определяет, будет ли использоваться помощник для создания новых узлов плана обмена.
//
// Возвращаемое значение:
//  Булево - признак использования помощника.
//
Функция ИспользоватьПомощникСозданияОбменаДанными() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает структуру значений по умолчению для узла базы корреспондента;
// Структура настроек повторяет состав реквизитов шапки плана обмена базы корреспондента;
// Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  СтруктураНастроек - Структура - структура значений по умолчанию на узле плана обмена базы корреспондента
//
Функция ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента(ВерсияКорреспондента, ИмяФормы, ИдентификаторНастройки) Экспорт
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ПодразделениеПоУмолчанию", "");
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Возвращает структуру отборов на узле плана обмена с установленными значениями по умолчанию;
// Структура настроек повторяет состав реквизитов шапки и табличных частей плана обмена;
// Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры,
// а для табличных частей используются структуры,
// содержащие массивы значений полей табличных частей плана обмена.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  СтруктураНастроек - Структура - структура отборов на узле плана обмена
// 
Функция НастройкаОтборовНаУзле(ВерсияКорреспондента, ИмяФормы, ИдентификаторНастройки) Экспорт
	
	СтруктураТабличнойЧастиОрганизации = Новый Структура;
	СтруктураТабличнойЧастиОрганизации.Вставить("Организация", Новый Массив);
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ДатаНачалаВыгрузкиДокументов", НачалоГода(ТекущаяДата()));
	СтруктураНастроек.Вставить("ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю", Перечисления.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю.НеВыгружать);
	СтруктураНастроек.Вставить("ИспользоватьОтборПоОрганизациям", Ложь);
	СтруктураНастроек.Вставить("Организации", СтруктураТабличнойЧастиОрганизации);
	СтруктураНастроек.Вставить("РежимВыгрузкиОбъектов", Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию);
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Возвращает структуру отборов на узле плана обмена базы корреспондента с установленными значениями по умолчанию;
// Структура настроек повторяет состав реквизитов шапки и табличных частей плана обмена базы корреспондента;
// Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры,
// а для табличных частей используются структуры,
// содержащие массивы значений полей табличных частей плана обмена.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  СтруктураНастроек - Структура - структура отборов на узле плана обмена базы корреспондента
// 
Функция НастройкаОтборовНаУзлеБазыКорреспондента(ВерсияКорреспондента, ИмяФормы, ИдентификаторНастройки) Экспорт
	СтруктураТабличнойЧастиОрганизации = Новый Структура;
	СтруктураТабличнойЧастиОрганизации.Вставить("Организация", Новый Массив);
	СтруктураТабличнойЧастиОрганизации.Вставить("Организация_Ключ", Новый Массив);
	
	СтруктураТабличнойЧастиСклады = Новый Структура;
	СтруктураТабличнойЧастиСклады.Вставить("Склад", Новый Массив);
	СтруктураТабличнойЧастиСклады.Вставить("Склад_Ключ", Новый Массив);
	
	СтруктураТабличнойЧастиПодразделения = Новый Структура;
	СтруктураТабличнойЧастиПодразделения.Вставить("Подразделение", Новый Массив);
	СтруктураТабличнойЧастиПодразделения.Вставить("Подразделение_Ключ", Новый Массив);
	
	СтруктураТабличнойЧастиКассы = Новый Структура;
	СтруктураТабличнойЧастиКассы.Вставить("Касса", Новый Массив);
	СтруктураТабличнойЧастиКассы.Вставить("Касса_Ключ", Новый Массив);
	//СтруктураТабличнойЧастиКассы.Вставить("Организация", Новый Массив);
	//СтруктураТабличнойЧастиКассы.Вставить("Организация_Ключ", Новый Массив);
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ПередаватьТолькоДокументыОтраженныеВБухгалтерскомУчете", Истина);
	СтруктураНастроек.Вставить("ВыгружатьАналитикуПоСкладам", Истина);
	СтруктураНастроек.Вставить("ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю", Перечисления.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю.НеВыгружать);
	СтруктураНастроек.Вставить("ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия", Перечисления.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.НеПереносить);
	СтруктураНастроек.Вставить("ДатаНачалаВыгрузкиДокументов", НачалоГода(ТекущаяДата()));
	СтруктураНастроек.Вставить("ИспользоватьОтборПоОрганизациям", Ложь);
	СтруктураНастроек.Вставить("ИспользоватьОтборПоСкладам", Ложь);
	СтруктураНастроек.Вставить("ИспользоватьОтборПоПодразделениям", Ложь);
	
	СтруктураНастроек.Вставить("Организации", СтруктураТабличнойЧастиОрганизации);
	СтруктураНастроек.Вставить("Склады", СтруктураТабличнойЧастиСклады);
	СтруктураНастроек.Вставить("Подразделения", СтруктураТабличнойЧастиПодразделения);
	СтруктураНастроек.Вставить("Кассы", СтруктураТабличнойЧастиКассы);
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Возвращает имена реквизитов и табличных частей плана обмена,
// перечисленных через запятую, которые являются общими для пары обменивающихся конфигураций.
// Например, если для плана обмена предусмотрено ограничение миграции данных по организациям в обе стороны,
// то табличная часть плана обмена, в которой перечислены разрешенные организации, считается общей.
// Возвращает пустую строку, если общие данные узлов не предусмотрены.
//
// Параметры:
//  ВерсияКорреспондента - Строка - версия конфигурации корреспондента, например, "2.1.5.1".
// 
Функция ОбщиеДанныеУзлов(ВерсияКорреспондента, ИмяФормы) Экспорт
	
	возврат "ДатаНачалаВыгрузкиДокументов,ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю,ИспользоватьОтборПоОрганизациям,Организации,РежимВыгрузкиПриНеобходимости";
	
КонецФункции

// Возвращает пользовательское представление значений по умолчанию в виде строки.
// Возвращает пустую строку, если значения по умолчанию на узле не предусмотрены.
//
Функция ОписаниеЗначениеПоУмолчанию() Экспорт
	возврат "";
КонецФункции

// Возвращает строку описания значений по умолчанию для пользователя;
// Прикладной разработчик на основе установленных значений по умолчанию на узле должен сформировать строку описания 
// удобную для восприятия пользователем.
// 
// Параметры:
//  ЗначенияПоУмолчаниюНаУзле - Структура - структура значений по умолчанию на узле плана обмена,
//                                       полученная при помощи функции ЗначенияПоУмолчаниюНаУзле().
// 
// Возвращаемое значение:
//  Строка, Неогранич. - строка описания для пользователя значений по умолчанию
//
Функция ОписаниеЗначенийПоУмолчанию(ЗначенияПоУмолчаниюНаУзле, ВерсияКорреспондента, ИдентификаторНастройки) Экспорт
	
	СкладДляОбменаДаннымиСУТ = "";
	
	// Контрагент
	Если ЗначениеЗаполнено(ЗначенияПоУмолчаниюНаУзле.СкладДляОбменаДаннымиСУТ) Тогда
		
		СкладДляОбменаДаннымиСУТ = НСтр("ru = 'Склад: [Склад]
		|Во всех загруженных документах будет установлен выбранный склад, если в управлении торговлей не установлен флажок ""Выгружать аналитику по складам"".'");
		СкладДляОбменаДаннымиСУТ = СтрЗаменить(СкладДляОбменаДаннымиСУТ, "[Склад]", Строка(ЗначенияПоУмолчаниюНаУзле.СкладДляОбменаДаннымиСУТ));
		
	Иначе
		
		СкладДляОбменаДаннымиСУТ = НСтр("ru = 'Если в управлении торговлей не установлен флажок ""Выгружать аналитику по складам"", необходимо указать склад.'");
		
	КонецЕсли;
	
	Результат = НСтр("ru = 'При загрузке реквизиты документов будет автоматически дозаполнены значениями:
						|[Склад]'");
	//
	Результат = СтрЗаменить(Результат, "[Склад]", СкладДляОбменаДаннымиСУТ);
	
	Возврат Результат;
	
КонецФункции

// Возвращает строку описания значений по умолчанию для базы корреспондента, которая отображается пользователю;
// Прикладной разработчик на основе установленных значений по умолчанию на узле базы корреспондента должен сформировать строку описания 
// удобную для восприятия пользователем.
// 
// Параметры:
//  ЗначенияПоУмолчаниюНаУзле - Структура - структура значений по умолчанию на узле плана обмена базы корреспондента,
//                                       полученная при помощи функции ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента().
// 
// Возвращаемое значение:
//  Строка, Неогранич. - строка описания для пользователя значений по умолчанию
//
Функция ОписаниеЗначенийПоУмолчаниюБазыКорреспондента(ЗначенияПоУмолчаниюНаУзле, ВерсияКорреспондента, ИдентификаторНастройки) Экспорт
	
	ТекстОписания = "Подразделение по умолчанию: ";
	Если ЗначениеЗаполнено(ЗначенияПоУмолчаниюНаУзле.ПодразделениеПоУмолчанию) Тогда
		ТекстОписания = ТекстОписания + Строка(ЗначенияПоУмолчаниюНаУзле.ПодразделениеПоУмолчанию);
	Иначе
		ТекстОписания = ТекстОписания + "не указано";
	КонецЕсли;
	ТекстОписания = ТекстОписания + ";";
	
	Возврат ТекстОписания;
	
КонецФункции

// Возвращает строку описания ограничений миграции данных для пользователя;
// Прикладной разработчик на основе установленных отборов на узле должен сформировать строку описания ограничений 
// удобную для восприятия пользователем.
// 
// Параметры:
//  НастройкаОтборовНаУзле - Структура - структура отборов на узле плана обмена,
//                                       полученная при помощи функции НастройкаОтборовНаУзле().
// 
// Возвращаемое значение:
//  Строка, Неогранич. - строка описания ограничений миграции данных для пользователя
//
Функция ОписаниеОграниченийПередачиДанных(НастройкаОтборовНаУзле, ВерсияКорреспондента, ИдентификаторНастройки) Экспорт
	
	Если НастройкаОтборовНаУзле.РежимВыгрузкиОбъектов = Перечисления.РежимыВыгрузкиОбъектовОбмена.НеВыгружать Тогда
		Результат = "Объекты выгружаются только 
			|из конфигурации Управление торговлей 
			|в конфигурацию Бухгалтерия предприятия.
			|Обратно передается служебная информация.";
		Возврат Результат;
	КонецЕсли;
	
	ОграничениеДатаНачалаВыгрузкиДокументов = "";
	ОграничениеВыгрузкиЗаказПокупателяСчетНаОплату = "";
	ОграничениеОтборПоОрганизациям = "";
	
	Если ЗначениеЗаполнено(НастройкаОтборовНаУзле.ДатаНачалаВыгрузкиДокументов) Тогда
		ОграничениеДатаНачалаВыгрузкиДокументов = НСтр("ru = 'Документы выгружаются начиная с [ДатаНачалаВыгрузкиДокументов]'");
		ОграничениеДатаНачалаВыгрузкиДокументов = СтрЗаменить(ОграничениеДатаНачалаВыгрузкиДокументов, "[ДатаНачалаВыгрузкиДокументов]", Формат(НастройкаОтборовНаУзле.ДатаНачалаВыгрузкиДокументов, "ДЛФ=DD"));
	Иначе
		ОграничениеДатаНачалаВыгрузкиДокументов = "Документы выгружаются за весь период";
	КонецЕсли;
	
	Если НастройкаОтборовНаУзле.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Перечисления.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю.НеВыгружать Тогда
		ОграничениеВыгрузкиЗаказПокупателяСчетНаОплату = НСтр("ru = ''");
	ИначеЕсли НастройкаОтборовНаУзле.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Перечисления.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю.ЗаказПокупателя Тогда
		ОграничениеВыгрузкиЗаказПокупателяСчетНаОплату = НСтр("ru = 'Документ ""Счет на оплату покупателю"" выгружается в документ ""Заказ покупателя""'");
	ИначеЕсли НастройкаОтборовНаУзле.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Перечисления.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю.СчетНаОплатуПокупателю Тогда
		ОграничениеВыгрузкиЗаказПокупателяСчетНаОплату = НСтр("ru = ''");
	КонецЕсли;
	
	Если НастройкаОтборовНаУзле.ИспользоватьОтборПоОрганизациям Тогда
		СтрокаПредставленияОтбора = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(НастройкаОтборовНаУзле.Организации.Организация, "; ");
		ОграничениеОтборПоОрганизациям = НСтр("ru = 'Отбор по организациям: [СтрокаПредставленияОтбора]'");
		ОграничениеОтборПоОрганизациям = СтрЗаменить(ОграничениеОтборПоОрганизациям, "[СтрокаПредставленияОтбора]", СтрокаПредставленияОтбора);
	Иначе
		ОграничениеОтборПоОрганизациям = НСтр("ru = 'По всем организациям'");
	КонецЕсли;
	
	Результат = НСтр("ru = 'Выгружать документы и справочную информацию:
							|[ОграничениеДатаНачалаВыгрузкиДокументов]
							|[ОграничениеВыгрузкиЗаказПокупателяСчетНаОплату]
							|[ОграничениеОтборПоОрганизациям]'");
	//
	
	Результат = СтрЗаменить(Результат, "[ОграничениеДатаНачалаВыгрузкиДокументов]", ОграничениеДатаНачалаВыгрузкиДокументов);
	Результат = СтрЗаменить(Результат, "[ОграничениеВыгрузкиЗаказПокупателяСчетНаОплату]", ОграничениеВыгрузкиЗаказПокупателяСчетНаОплату);
	Результат = СтрЗаменить(Результат, "[ОграничениеОтборПоОрганизациям]", ОграничениеОтборПоОрганизациям);
	
	Возврат Результат;
	
КонецФункции

// Возвращает строку описания ограничений миграции данных для базы корреспондента, которая отображается пользователю;
// Прикладной разработчик на основе установленных отборов на узле базы корреспондента должен сформировать строку описания ограничений 
// удобную для восприятия пользователем.
// 
// Параметры:
//  НастройкаОтборовНаУзле - Структура - структура отборов на узле плана обмена базы корреспондента,
//                                       полученная при помощи функции НастройкаОтборовНаУзлеБазыКорреспондента().
// 
// Возвращаемое значение:
//  Строка, Неогранич. - строка описания ограничений миграции данных для пользователя
//
Функция ОписаниеОграниченийПередачиДанныхБазыКорреспондента(НастройкаОтборовНаУзле, ВерсияКорреспондента, ИдентификаторНастройки) Экспорт
	
	ОграничениеВыгрузкиАналитикиПоСкладам = "";
	ОграничениеПереносаСебестоимости = "";
	ОграничениеДатаНачалаВыгрузкиДокументов = "";
	ОграничениеПередаватьДокументыОраженныеВБухгалтерскомУчете = "";
	ОграничениеВыгрузкиЗаказПокупателяСчетНаОплату = "";
	ОграничениеОтборПоОрганизациям = "";
	ОграничениеОтборПоСкладам = "";
	ОграничениеОтборПоПодразделениям = "";
	
	Если ЗначениеЗаполнено(НастройкаОтборовНаУзле.ДатаНачалаВыгрузкиДокументов) Тогда
		ОграничениеДатаНачалаВыгрузкиДокументов = НСтр("ru = 'Документы выгружаются начиная с [ДатаНачалаВыгрузкиДокументов]'");
		ОграничениеДатаНачалаВыгрузкиДокументов = СтрЗаменить(ОграничениеДатаНачалаВыгрузкиДокументов, "[ДатаНачалаВыгрузкиДокументов]", Формат(НастройкаОтборовНаУзле.ДатаНачалаВыгрузкиДокументов, "ДЛФ=DD"));
	Иначе
		ОграничениеДатаНачалаВыгрузкиДокументов = "Документы выгружаются за весь период";
	КонецЕсли;
	
	Если НастройкаОтборовНаУзле.ПередаватьТолькоДокументыОтраженныеВБухгалтерскомУчете Тогда
		ОграничениеПередаватьДокументыОраженныеВБухгалтерскомУчете = НСтр("ru = 'Документы выгружаются только отраженные в бухгалтерском учете'");
	Иначе
		ОграничениеПередаватьДокументыОраженныеВБухгалтерскомУчете = НСтр("ru = ''");
	КонецЕсли;
	
	Если НастройкаОтборовНаУзле.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Перечисления.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю.НеВыгружать Тогда
		ОграничениеВыгрузкиЗаказПокупателяСчетНаОплату = НСтр("ru = ''");
	ИначеЕсли НастройкаОтборовНаУзле.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Перечисления.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю.ЗаказПокупателя Тогда
		ОграничениеВыгрузкиЗаказПокупателяСчетНаОплату = НСтр("ru = 'Выгружается документ ""Заказ покупателя"" который является основанием для авансовых платежей при оптовой продаже товаров'");
	ИначеЕсли НастройкаОтборовНаУзле.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Перечисления.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю.СчетНаОплатуПокупателю Тогда
		ОграничениеВыгрузкиЗаказПокупателяСчетНаОплату = НСтр("ru = 'Выгружается документ ""Счет на оплату покупателю"" который является основанием для авансовых платежей при оптовой продаже товаров'");
	КонецЕсли;
	
	Если НастройкаОтборовНаУзле.ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия = Перечисления.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.НеПереносить Тогда
		ОграничениеПереносаСебестоимости = НСтр("ru = 'Себестоимость списания товаров, не переносится'");
	ИначеЕсли НастройкаОтборовНаУзле.ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия = Перечисления.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.ПереноситьДокументПартииИСебестоимость Тогда
		ОграничениеПереносаСебестоимости = НСтр("ru = 'При переносе себестоимости списания товаров, переносятся документы партии и себестоимость'");
	ИначеЕсли НастройкаОтборовНаУзле.ВариантПереносаСебестоимостиСписанияВБухгалтериюПредприятия = Перечисления.ВариантыПереносаСебестоимостиСписанияВБухгалтериюПредприятия.ПереноситьТолькоДокументПартии Тогда
		ОграничениеПереносаСебестоимости = НСтр("ru = 'При переносе себестоимости списания товаров, переносятся только документы партии'");
	КонецЕсли;
	
	Если НастройкаОтборовНаУзле.ВыгружатьАналитикуПоСкладам Тогда
		ОграничениеПереносаСебестоимости = НСтр("ru = 'Выгружатется аналитика по складам'");
	Иначе
		ОграничениеПереносаСебестоимости = НСтр("ru = 'Аналитика по складам не выгружается, во всех загруженных документах в бухгалтерии предприятия будет установлен один и тот же склад из настройки параметров учета'");
	КонецЕсли;
	
	Если НастройкаОтборовНаУзле.ИспользоватьОтборПоОрганизациям Тогда
		СтрокаПредставленияОтбора = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(НастройкаОтборовНаУзле.Организации.Организация, "; ");
		ОграничениеОтборПоОрганизациям = НСтр("ru = 'Отбор по организациям: [СтрокаПредставленияОтбора]'");
		ОграничениеОтборПоОрганизациям = СтрЗаменить(ОграничениеОтборПоОрганизациям, "[СтрокаПредставленияОтбора]", СтрокаПредставленияОтбора);
	Иначе
		ОграничениеОтборПоОрганизациям = НСтр("ru = 'По всем организациям'");
	КонецЕсли;
	
	Если НастройкаОтборовНаУзле.ИспользоватьОтборПоСкладам Тогда
		СтрокаПредставленияОтбора = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(НастройкаОтборовНаУзле.Склады.Склад, "; ");
		ОграничениеОтборПоСкладам = НСтр("ru = 'Отбор по складам: [СтрокаПредставленияОтбора]'");
		ОграничениеОтборПоСкладам = СтрЗаменить(ОграничениеОтборПоСкладам, "[СтрокаПредставленияОтбора]", СтрокаПредставленияОтбора);
	Иначе
		ОграничениеОтборПоСкладам = НСтр("ru = 'По всем складам'");
	КонецЕсли;
	
	Если НастройкаОтборовНаУзле.ИспользоватьОтборПоПодразделениям Тогда
		СтрокаПредставленияОтбора = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(НастройкаОтборовНаУзле.Подразделения.Подразделение, "; ");
		ОграничениеОтборПоПодразделениям = НСтр("ru = 'Отбор по подразделениям: [СтрокаПредставленияОтбора]'");
		ОграничениеОтборПоПодразделениям = СтрЗаменить(ОграничениеОтборПоПодразделениям, "[СтрокаПредставленияОтбора]", СтрокаПредставленияОтбора);
	Иначе
		ОграничениеОтборПоПодразделениям = НСтр("ru = 'По всем подразделениям'");
	КонецЕсли;
	
	Результат = НСтр("ru = 'Выгружать документы и справочную информацию:
							|[ОграничениеВыгрузкиАналитикиПоСкладам]
							|[ОграничениеПереносаСебестоимости]
							|[ОграничениеДатаНачалаВыгрузкиДокументов]
							|[ОграничениеПередаватьДокументыОраженныеВБухгалтерскомУчете]
							|[ОграничениеВыгрузкиЗаказПокупателяСчетНаОплату]
							|[ОграничениеОтборПоОрганизациям]
							|[ОграничениеОтборПоСкладам]
							|[ОграничениеОтборПоПодразделениям]'");
	//
	
	Результат = СтрЗаменить(Результат, "[ОграничениеВыгрузкиАналитикиПоСкладам]", ОграничениеВыгрузкиАналитикиПоСкладам);
	Результат = СтрЗаменить(Результат, "[ОграничениеПереносаСебестоимости]", ОграничениеПереносаСебестоимости);
	Результат = СтрЗаменить(Результат, "[ОграничениеДатаНачалаВыгрузкиДокументов]", ОграничениеДатаНачалаВыгрузкиДокументов);
	Результат = СтрЗаменить(Результат, "[ОграничениеПередаватьДокументыОраженныеВБухгалтерскомУчете]", ОграничениеПередаватьДокументыОраженныеВБухгалтерскомУчете);
	Результат = СтрЗаменить(Результат, "[ОграничениеВыгрузкиЗаказПокупателяСчетНаОплату]", ОграничениеВыгрузкиЗаказПокупателяСчетНаОплату);
	Результат = СтрЗаменить(Результат, "[ОграничениеОтборПоОрганизациям]", ОграничениеОтборПоОрганизациям);
	Результат = СтрЗаменить(Результат, "[ОграничениеОтборПоСкладам]", ОграничениеОтборПоСкладам);
	Результат = СтрЗаменить(Результат, "[ОграничениеОтборПоПодразделениям]", ОграничениеОтборПоПодразделениям);
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак использования плана обмена для организации обмена в модели сервиса.
//  Если признак установлен, то в сервисе можно включить обмен данными
//  с использованием этого плана обмена.
//  Если признак не установлен, то план обмена будет использоваться только 
//  для обмена в локальном режиме работы конфигурации.
// 
Функция ПланОбменаИспользуетсяВМоделиСервиса() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает признак того, что план обмена поддерживает обмен данными с корреспондентом, работающим в модели сервиса.
// Если признак установлен, то становится возможным создать обмен данными когда эта информационная база
// работает в локальном режиме, а корреспондент в модели сервиса.
//
Функция КорреспондентВМоделиСервиса() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Возвращает пояснение о последовательности действий пользователя для настройки параметров учета в текущей информационной базе.
//
Функция ПояснениеДляНастройкиПараметровУчета() Экспорт
	
	Возврат "";
	
КонецФункции

// Возвращает пояснение о последовательности действий пользователя для настройки параметров учета в базе-корреспонденте.
//
// Параметры:
//  ВерсияКорреспондента - Строка - версия конфигурации корреспондента, например, "2.1.5.1".
// 
Функция ПояснениеДляНастройкиПараметровУчетаБазыКорреспондента(ВерсияКорреспондента) Экспорт
	
	Возврат "";
	
КонецФункции

Процедура ОбработчикПроверкиПараметровУчета(Отказ, Получатель, Сообщение) Экспорт
	
КонецПроцедуры

// Возвращает имя конфигурации-источника (как задано в свойстве Имя в метаданных)
// для точной идентификации имени этой конфигурации 
// при настройке синхронизации данных в модели сервиса. 
Функция ИмяКонфигурацииИсточника() Экспорт
	
	Возврат УчетОбособленныхПодразделений.ИмяКонфигурацииИсточника();
	
КонецФункции

// Возвращает краткую информацию по обмену, выводимую при настройке синхронизации данных.
//
Функция КраткаяИнформацияПоОбмену(ИдентификаторНастройки) Экспорт
	
	ПоясняющийТекст = НСтр("ru = 'Позволяет синхронизировать данные с программой 1С:Управление торговлей, редакция 10.3, 
	|В синхронизации участвуют следующие типы данных: справочники (например, Организации), документы (например, 
	|Реализация товаров), регистры сведений (например, Курсы валют).
	|
	|Синхронизация является двухсторонней и позволяет иметь актуальные данные в каждой из информационных баз.'");

	Возврат ПоясняющийТекст;
	
КонецФункции

// Возвращаемое значение: Строка - Ссылка на подробную информацию по настраиваемой синхронизации,
// в виде гиперссылки или полного пути к форме
Функция ПодробнаяИнформацияПоОбмену(ИдентификаторНастройки) Экспорт
	
	Возврат "ПланОбмена.ОбменУправлениеТорговлей103БухгалтерияПредприятия30.Форма.ПодробнаяИнформация";
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
//Дополнение к функционалу БСП

//Возвращает режим запуска, в случае интерактивного инициирования синхронизации
//Возвращаемые значения АвтоматическаяСинхронизация Или ИнтерактивнаяСинхронизация
//На основании этих значений запускается либо помощник интерактивного обмена, либо автообмен
Функция РежимЗапускаСинхронизацииДанных(УзелИнформационнойБазы) Экспорт
	//Пример типового возврата
	Возврат "";
КонецФункции

//Возвращает сценарий работы помощника интерактивного сопостовления
//НеОтправлять, ИнтерактивнаяСинхронизацияДокументов, ИнтерактивнаяСинхронизацияСправочников либо пустую строку
Функция ИнициализироватьСценарийРаботыПомощникаИнтерактивногоОбмена(УзелИнформационнойБазы) Экспорт
	//Пример типового возврата
	Возврат "";
КонецФункции

//Возвращает значения ограничений объектов узла плана обмена для интерактивной регистрации к обмену
//Структура: ВсеДокументы, ВсеСправочники, ДетальныйОтбор
//Детальный отбор либо неопределено, либо массив объектов метаданных входящих в состав узла (Указывается полное имя метаданных)
Функция ДобавитьГруппыОграничений(УзелИнформационнойБазы) Экспорт
	//Пример типового возврата
	Возврат Новый Структура("ВсеДокументы, ВсеСправочники, ДетальныйОтбор", Ложь, Ложь, Неопределено);
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы

Процедура ОбновитьСвойстваПредопределенногоУзла() Экспорт
	//см. процедуру СообщенияУдаленногоАдминистрированияРеализация.ОбновитьСвойстваПредопределенныхУзлов
	
	Если Не ОбщегоНазначения.ИспользованиеРазделителяСеанса() Тогда
		Возврат;
	КонецЕсли;
	
	Наименование = Константы.ПредставлениеОбластиДанных.Получить();
	ИмяПланаОбмена = "ОбменУправлениеТорговлей103БухгалтерияПредприятия30";
	ЭтотУзел = ПланыОбмена[ИмяПланаОбмена].ЭтотУзел();
	СвойстваУзла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭтотУзел, "Код, Наименование");
			
	Если ПустаяСтрока(СвойстваУзла.Код) Тогда
				
		ЭтотУзелОбъект = ЭтотУзел.ПолучитьОбъект();
		ЭтотУзелОбъект.Код = ОбменДаннымиВМоделиСервиса.КодУзлаПланаОбменаВСервисе(РаботаВМоделиСервиса.ЗначениеРазделителяСеанса());
		ЭтотУзелОбъект.Наименование = Наименование;
		ЭтотУзелОбъект.ДополнительныеСвойства.Вставить("Загрузка");
		ЭтотУзелОбъект.Записать();
				
	ИначеЕсли СвойстваУзла.Наименование <> Наименование Тогда
				
		ЭтотУзелОбъект = ЭтотУзел.ПолучитьОбъект();
		ЭтотУзелОбъект.Наименование = Наименование;
		ЭтотУзелОбъект.ДополнительныеСвойства.Вставить("Загрузка");
		ЭтотУзелОбъект.Записать();
				
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли