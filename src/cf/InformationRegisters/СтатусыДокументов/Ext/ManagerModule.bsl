#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Устанавливает статус документа
//
// Параметры:
//  Документ - ДокументСсылка.* - документ
//  Статус   - ПеречислениеСсылка.* - новый статус документа
//
// Возвращаемое значение:
//  Булево - Истина, если статус документа изменен
//
Функция УстановитьСтатусДокумента(Документ, Статус) Экспорт
	
	СтатусИзменен = Ложь;
	
	Если ЗначениеЗаполнено(Документ) Тогда
		
		МассивДокументов = Новый Массив;
		МассивДокументов.Добавить(Документ);
		
		СтатусИзменен = УстановитьСтатусДокументов(МассивДокументов, Статус);
		
	КонецЕсли;
	
	Возврат СтатусИзменен;
	
КонецФункции

// Устанавливает статус нескольких документов
//
// Параметры:
//  МассивДокументов - Массив - содержит ссылки на документы (должны быть одного вида!)
//  Статус           - ПеречислениеСсылка.* - новый статус документа
//
// Возвращаемое значение:
//  Булево - Истина, если статус хотя бы одного документа изменен
//
Функция УстановитьСтатусДокументов(МассивДокументов, Статус) Экспорт
	
	СтатусИзменен = Ложь;
	
	Если Не ЗначениеЗаполнено(Статус) Или МассивДокументов.Количество() = 0 Тогда
		Возврат СтатусИзменен;
	КонецЕсли;
	
	ВремяНачалаОперации = ОценкаПроизводительностиКлиентСервер.ЗначениеТаймера();
	
	ИмяДокумента = МассивДокументов[0].Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаДокументов.Организация КАК Организация,
	|	ТаблицаДокументов.Ссылка КАК Документ,
	|	ЕСТЬNULL(СтатусыДокументов.Статус, НЕОПРЕДЕЛЕНО) КАК Статус
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю КАК ТаблицаДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументов КАК СтатусыДокументов
	|		ПО ТаблицаДокументов.Организация = СтатусыДокументов.Организация
	|			И ТаблицаДокументов.Ссылка = СтатусыДокументов.Документ
	|ГДЕ
	|	ТаблицаДокументов.Ссылка В(&МассивДокументов)";
	
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "СчетНаОплатуПокупателю", ИмяДокумента);
	
	ТаблицаСтатусов = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаСтатусов Цикл
		
		Если СтрокаТаблицы.Статус = Статус Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.СтатусыДокументов.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Документ.Значение = СтрокаТаблицы.Документ;
		НаборЗаписей.Отбор.Документ.Использование = Истина;
		
		Запись = НаборЗаписей.Добавить();
		Запись.Организация = СтрокаТаблицы.Организация;
		Запись.Документ    = СтрокаТаблицы.Документ;
		Запись.Статус      = Статус;
		
		НаборЗаписей.Записать();
		
		СтатусИзменен = Истина;
		
	КонецЦикла;
	
	ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени("УстановкаСтатуса" + ИмяДокумента, ВремяНачалаОперации);
	
	Возврат СтатусИзменен;
	
КонецФункции

// Возвращает текущий статус документа
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация
//  Документ    - ДокументСсылка.* - документ
//
// Возвращаемое значение:
//  ПеречислениеСсылка.* - статус документа
//
Функция ПолучитьСтатусДокумента(Организация, Документ) Экспорт
	
	Статус = СтатусНовогоДокумента(Документ);
	
	Если Не ЗначениеЗаполнено(Документ) Тогда
		// Новый документ
		Возврат Статус;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		СписокДоступныхОрганизаций = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Ложь);
		Если СписокДоступныхОрганизаций.Найти(Организация) = Неопределено Тогда
			// Недоступно по RLS
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("Документ",     Документ);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатусыДокументов.Статус
	|ИЗ
	|	РегистрСведений.СтатусыДокументов КАК СтатусыДокументов
	|ГДЕ
	|	СтатусыДокументов.Организация = &Организация
	|	И СтатусыДокументов.Документ = &Документ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.Статус) Тогда
		Статус = Выборка.Статус;
	КонецЕсли;
	
	Возврат Статус;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает статус документа по умолчанию
//
Функция СтатусНовогоДокумента(Документ)
	
	Перем Статус;
	
	ТипДокумента = ТипЗнч(Документ);
	
	Если ТипДокумента = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		
		Статус = Перечисления.СтатусОплатыСчетаПокупателю.СтатусНовогоДокумента();
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		Или ТипДокумента = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
		
		Статус = Перечисления.СтатусыДокументовРеализации.СтатусНовогоДокумента();
		
	КонецЕсли;
	
	Возврат Статус;
	
КонецФункции

// Обработка обновления ИБ. Выполняет первоначальное заполнение статусов счетов на оплату и переносит
// статусы оплаты из шапки в регистр сведений, если статусы уже использовались.
//
Процедура ЗаполнитьСтатусыОплатыСчетов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетНаОплатуПокупателю.Организация КАК Организация,
	|	СчетНаОплатуПокупателю.Ссылка КАК Документ,
	|	СчетНаОплатуПокупателю.УдалитьСтатусОплаты КАК Статус
	|ПОМЕСТИТЬ ВТ_СчетНаОплатуПокупателю
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументов КАК СтатусыДокументов
	|		ПО СчетНаОплатуПокупателю.Организация = СтатусыДокументов.Организация
	|			И СчетНаОплатуПокупателю.Ссылка = СтатусыДокументов.Документ
	|ГДЕ
	|	СтатусыДокументов.Документ ЕСТЬ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетНаОплатуПокупателю.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетНаОплатуПокупателю.Организация,
	|	СчетНаОплатуПокупателю.Документ,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СчетНаОплату ЕСТЬ NULL 
	|					И ПриходныйКассовыйОрдерРасшифровкаПлатежа.СчетНаОплату ЕСТЬ NULL 
	|					И ОплатаПлатежнойКартойРасшифровкаПлатежа.СчетНаОплату ЕСТЬ NULL 
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ) КАК Оплачен
	|ИЗ
	|	ВТ_СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеНаРасчетныйСчет.РасшифровкаПлатежа КАК ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа
	|		ПО СчетНаОплатуПокупателю.Документ = ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СчетНаОплату
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПриходныйКассовыйОрдерРасшифровкаПлатежа
	|		ПО СчетНаОплатуПокупателю.Документ = ПриходныйКассовыйОрдерРасшифровкаПлатежа.СчетНаОплату
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОплатаПлатежнойКартой.РасшифровкаПлатежа КАК ОплатаПлатежнойКартойРасшифровкаПлатежа
	|		ПО СчетНаОплатуПокупателю.Документ = ОплатаПлатежнойКартойРасшифровкаПлатежа.СчетНаОплату
	|ГДЕ
	|	СчетНаОплатуПокупателю.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусОплатыСчетаПокупателю.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетНаОплатуПокупателю.Организация,
	|	СчетНаОплатуПокупателю.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетНаОплатуПокупателю.Организация,
	|	СчетНаОплатуПокупателю.Документ,
	|	СчетНаОплатуПокупателю.Статус
	|ИЗ
	|	ВТ_СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
	|ГДЕ
	|	СчетНаОплатуПокупателю.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусОплатыСчетаПокупателю.ПустаяСсылка)";
	
	Результат = Запрос.ВыполнитьПакет();
	
	НаборЗаписей = РегистрыСведений.СтатусыДокументов.СоздатьНаборЗаписей();
	
	Выборка = Результат[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.Статус = ?(Выборка.Оплачен, Перечисления.СтатусОплатыСчетаПокупателю.Оплачен, Перечисления.СтатусОплатыСчетаПокупателю.Неоплачен);
		
		Если НаборЗаписей.Количество() >= 1000 Тогда
			ОбновлениеИнформационнойБазы_ЗаписатьОбъект(НаборЗаписей);
		КонецЕсли;
		
	КонецЦикла;
	
	Выборка = Результат[2].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		
		Если НаборЗаписей.Количество() >= 1000 Тогда
			ОбновлениеИнформационнойБазы_ЗаписатьОбъект(НаборЗаписей);
		КонецЕсли;
		
	КонецЦикла;
	
	Если НаборЗаписей.Количество() > 0 Тогда
		ОбновлениеИнформационнойБазы_ЗаписатьОбъект(НаборЗаписей);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_ЗаписатьОбъект(НаборЗаписей)
	
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
	НаборЗаписей.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	НаборЗаписей.Записать(Ложь);
	
	НаборЗаписей.Очистить();
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли