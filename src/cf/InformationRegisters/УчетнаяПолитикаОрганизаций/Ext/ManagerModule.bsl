#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Процедура УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, ИмяРеквизита, ЗначениеПоУмолчанию)

	Если НЕ ДанныеЗаполнения.Свойство(ИмяРеквизита, ЗаписьРегистра[ИмяРеквизита]) Тогда
		ЗаписьРегистра[ИмяРеквизита] = ЗначениеПоУмолчанию;
	КонецЕсли;

КонецПроцедуры

Процедура УстановкаПараметровУчетнойПолитикиПоУмолчанию(ЗаписьРегистра, ДанныеЗаполнения) Экспорт

	Если НЕ ДанныеЗаполнения.Свойство("Организация", ЗаписьРегистра.Организация) Тогда
		ЗаписьРегистра.Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;

	УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "Период", НачалоГода(ТекущаяДатаСеанса()));
	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоОбособленноеПодразделение(ЗаписьРегистра.Организация) Тогда
		ЗаписьРегистра.Организация = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(ЗаписьРегистра.Организация);
	КонецЕсли;
	
	ЭтоФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаписьРегистра.Организация, "ЮридическоеФизическоеЛицо")
		= Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	
	// Общие сведения
	ОсновнаяСистемаНалогообложения = Константы.ОсновнаяСистемаНалогообложения.Получить();
	Если НЕ ЗначениеЗаполнено(ОсновнаяСистемаНалогообложения)
		ИЛИ (ОсновнаяСистемаНалогообложения = Перечисления.СистемыНалогообложения.ОсобыйПорядок И НЕ ЭтоФизЛицо) Тогда
		ОсновнаяСистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая;
	КонецЕсли;
	
	УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "СистемаНалогообложения", ОсновнаяСистемаНалогообложения);
	
	Если ЗаписьРегистра.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная Тогда
		УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "ПрименяетсяУСН", Истина);
		УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "ПрименяетсяУСНДоходы", Истина);
		УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "ПрименяетсяУСНДоходыМинусРасходы", Ложь);
		УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "ПрименяетсяУСНПатент", Ложь);
		УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "ПлательщикНалогаНаПрибыль", Ложь);
		УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "ПлательщикНДС", Ложь);
		УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "ПлательщикНДФЛ", Ложь);
		УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "ПлательщикЕНВД", Ложь);
		УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "ПрименяетсяОсобыйПорядокНалогообложения", Ложь);
	ИначеЕсли ЗаписьРегистра.СистемаНалогообложения = Перечисления.СистемыНалогообложения.ОсобыйПорядок Тогда
		Если ДанныеЗаполнения.Свойство("ПлательщикЕНВД") И ДанныеЗаполнения.ПлательщикЕНВД Тогда
			// Только ЕНВД
			УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "ПлательщикЕНВД", Истина);
			УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "ПрименяетсяУСНПатент", Ложь);
		Иначе
			// Только Патент
			УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "ПлательщикЕНВД", Ложь);
			УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "ПрименяетсяУСНПатент", Истина);
		КонецЕсли;
		УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "ПрименяетсяУСН", Ложь);
		УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "ПрименяетсяУСНДоходы", Ложь);
		УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "ПрименяетсяУСНДоходыМинусРасходы", Ложь);
		УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "ПлательщикНалогаНаПрибыль", Ложь);
		УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "ПлательщикНДС", Ложь);
		УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "ПлательщикНДФЛ", Ложь);
		УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "ПрименяетсяОсобыйПорядокНалогообложения", Истина);
	Иначе
		УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "ПрименяетсяУСН", Ложь);
		УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "ПрименяетсяУСНДоходы", Ложь);
		УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "ПрименяетсяУСНДоходыМинусРасходы", Ложь);
		УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "ПрименяетсяУСНПатент", Ложь);
		УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "ПлательщикНалогаНаПрибыль", НЕ ЭтоФизЛицо);
		УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "ПлательщикНДС", Истина);
		УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "ПлательщикНДФЛ", ЭтоФизЛицо);
		УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "ПлательщикЕНВД", Ложь);
		УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "ПрименяетсяОсобыйПорядокНалогообложения", Ложь);
	КонецЕсли;
	
	// Налог на прибыль
	УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "МетодНачисленияАмортизацииНУ", 
		Перечисления.МетодыНачисленияАмортизации.Линейный);
	ПоддержкаПБУ18 = ?(ЗначениеЗаполнено(ЗаписьРегистра.Организация),
		(ЗаписьРегистра.Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо),
		Истина);
	УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "ПоддержкаПБУ18", ПоддержкаПБУ18);
	УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "СпособПогашенияСтоимостиСпецодеждыНУ", 
		Перечисления.СпособыПогашенияСтоимостиНУ.ПриПередачеВЭксплуатацию);

	// НДС
	УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "ПорядокРегистрацииСчетовФактурНаАванс",
		Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.НаВсеАвансы);
	УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "НачислятьНДСПоОтгрузке", Истина);
	УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "НачислятьНДСПриПередачеНедвижимости", Истина);
	УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "СложныйУчетНДС", Ложь);
	УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "УпрощенныйУчетНДС", Ложь);
	УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "ФормироватьСчетФактуруПоУЕвРублях", Истина);
	УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "УчитыватьПоложительныеСуммовыеРазницыПриНачисленииНДС", Истина);
	
	// УСН
	УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "ОбъектНалогообложенияУСН", 
		Перечисления.ОбъектыНалогообложенияПоУСН.Доходы);
	УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "ПоложенияПереходногоПериодаУСН", Ложь); 
	УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "ПорядокОтраженияАвансаУСН", 
		Перечисления.ПорядокОтраженияАвансов.ДоходУСН);
	УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "СтавкаНалогаУСН",
		?(ЗаписьРегистра.ПрименяетсяУСН, ?(ЗаписьРегистра.ПрименяетсяУСНДоходы, 6, 15), 0));
	УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "ПорядокПризнанияДопРасходов",
		Перечисления.ПорядокПризнанияДопРасходов.ВключатьВСтоимость);
	УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "ПорядокПризнанияТаможенныхПлатежей",
		Перечисления.ПорядокПризнанияТаможенныхПлатежей.ВключатьВСтоимость);
		
	// УСН: Учет расходов
	УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "ПорядокПризнанияМатериальныхРасходов", 
		Перечисления.ПорядокПризнанияМатериальныхРасходов.ПоОплатеПоставщику);
	УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "ПорядокПризнанияРасходовПоТоварам", 
		Перечисления.ПорядокПризнанияРасходовПоТоварам.ПоФактуПолученияДохода);
	УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "ПорядокПризнанияРасходовПоНДС", 
		Перечисления.ПорядокПризнанияРасходовПоНДС.ВключатьВСтоимость);
		
	// ЕНВД
	УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "РозничнаяТорговляОблагаетсяЕНВД",
	ЗаписьРегистра.ПлательщикЕНВД ИЛИ ЗаписьРегистра.ПрименяетсяУСНПатент);
	УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "БазаРаспределенияКосвенныхРасходовПоВидамДеятельности",
		Перечисления.БазыРаспределенияКосвенныхРасходовПоВидамДеятельности.ДоходыОтРеализации);
	УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "МетодРаспределенияРасходовУСНПоВидамДеятельности",
		Перечисления.МетодыРаспределенияРасходовУСНПоВидамДеятельности.ЗаКвартал);
	УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "БазаРаспределенияРасходовУСНПоВидамДеятельности",
		Перечисления.БазаРаспределенияРасходовУСНПоВидамДеятельности.ДоходыОтРеализацииБУ);
	
	// Индивидуальный предприниматель
	ВидДеятельностиПоУмолчанию	= РегистрыСведений.ВидыДеятельностиПредпринимателей.ВидДеятельностиПоУмолчанию(ЗаписьРегистра.Организация);
	УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "ОсновнойВидДеятельности", ВидДеятельностиПоУмолчанию);
	УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "ВидДеятельностиДоходовПоАвансамИП", ВидДеятельностиПоУмолчанию);
	УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "АвансыВключаютсяВДоходыВПериодеПолученияИП", Истина);
		
	Если ЗначениеЗаполнено(ВидДеятельностиПоУмолчанию) Тогда
			
		ХарактерДеятельности	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДеятельностиПоУмолчанию, "ХарактерДеятельности");
		
		ХарактерыДеятельностиЕНВД		= УчетДоходовИРасходовПредпринимателя.ХарактерыДеятельностиЕНВД();
		ХарактерыДеятельностиУСНПатент	= УчетДоходовИРасходовПредпринимателя.ХарактерыДеятельностиУСНПатент();
		
		Если НЕ ХарактерыДеятельностиЕНВД.Найти(ХарактерДеятельности) = Неопределено Тогда
			УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "ПлательщикЕНВД", Истина);
			УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "ВестиУчетПоВидамДеятельностиИП", Истина);
		ИначеЕсли НЕ ХарактерыДеятельностиУСНПатент.Найти(ХарактерДеятельности) = Неопределено Тогда
			УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "ПрименяетсяУСНПатент", Истина);
			УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "ВестиУчетПоВидамДеятельностиИП", Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	// Запасы
	Если (ЗаписьРегистра.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная
			И ЗаписьРегистра.ОбъектНалогообложенияУСН = Перечисления.ОбъектыНалогообложенияПоУСН.ДоходыМинусРасходы)
		ИЛИ (ЭтоФизЛицо И ЗаписьРегистра.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая) Тогда
		
		УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "СпособОценкиМПЗ", 
			Перечисления.СпособыОценки.ФИФО);
		
	Иначе
		УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "СпособОценкиМПЗ", 
			Перечисления.СпособыОценки.ПоСредней);
	КонецЕсли;
		
	// Розница
	УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "СпособОценкиТоваровВРознице", 
		Перечисления.СпособыОценкиТоваровВРознице.ПоСтоимостиПриобретения);

	// Производство
	УстановитьЗначениеРеквизита(
		ЗаписьРегистра, 
		ДанныеЗаполнения, 
		"ОсновнойСчетУчетаЗатрат",
		ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
	УстановитьЗначениеРеквизита(
		ЗаписьРегистра, 
		ДанныеЗаполнения, 
		"ВыпускПродукции",
		Ложь);
	УстановитьЗначениеРеквизита(
		ЗаписьРегистра, 
		ДанныеЗаполнения, 
		"ОказаниеУслуг",
		Ложь);    
	УстановитьЗначениеРеквизита(
		ЗаписьРегистра, 
		ДанныеЗаполнения, 
		"РассчитыватьСебестоимостьПолуфабрикатов",
		Ложь);
	УстановитьЗначениеРеквизита(
		ЗаписьРегистра, 
		ДанныеЗаполнения, 
		"РассчитыватьСебестоимостьУслугСобственнымПодразделениям",
		Ложь);
	УстановитьЗначениеРеквизита(
		ЗаписьРегистра, 
		ДанныеЗаполнения, 
		"ДиректКостинг", 
		Истина);
	УстановитьЗначениеРеквизита(
		ЗаписьРегистра, 
		ДанныеЗаполнения, 
		"ПорядокСписанияРасходовНаСебестоимостьУслуг", 
		Перечисления.ПорядокСписанияРасходовНаСебестоимостьУслуг.БезУчетаВыручки);
	
	// Производство: Выпуск продукции, услуг
	УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "СпособУчетаВыпускаГотовойПродукции", 
		Перечисления.СпособыУчетаВыпускаГотовойПродукции.БезИспользованияСчета40);
	УстановитьЗначениеРеквизита(ЗаписьРегистра, ДанныеЗаполнения, "СпособРасчетаСебестоимостиПроизводства", 
		Перечисления.СпособыРасчетаСебестоимостиПродукции.ПоПеределам);
	
КонецПроцедуры

Процедура УстановкаПараметровУчетнойПолитикиПоУмолчаниюНаПериод(ЗаписьРегистра) Экспорт

	Если ЗаписьРегистра.Период < '20060101' Тогда
		ЗаписьРегистра.НачислятьНДСПоОтгрузке = Ложь;
	КонецЕсли;

	Если ЗаписьРегистра.Период >= '20070101' Тогда
		ЗаписьРегистра.УчитыватьПоложительныеСуммовыеРазницыПриНачисленииНДС = Истина;
	КонецЕсли;

	Если ЗаписьРегистра.Период >= '20090101' Тогда
		ЗаписьРегистра.ПорядокПризнанияРасходовПоНДС        = Перечисления.ПорядокПризнанияРасходовПоНДС.ВключатьВСтоимость;
		ЗаписьРегистра.ПорядокПризнанияРасходовПоТоварам    = Перечисления.ПорядокПризнанияРасходовПоТоварам.ПоФактуПолученияДохода;
		ЗаписьРегистра.ПорядокПризнанияМатериальныхРасходов = Перечисления.ПорядокПризнанияМатериальныхРасходов.ПоОплатеПоставщику;
	КонецЕсли;
	Если ЗаписьРегистра.Период >= '20110101' Тогда
		ЗаписьРегистра.ПорядокПризнанияРасходовПоНДС        = Перечисления.ПорядокПризнанияРасходовПоНДС.ВключатьВСтоимость;
		ЗаписьРегистра.ПорядокПризнанияРасходовПоТоварам    = Перечисления.ПорядокПризнанияРасходовПоТоварам.ПоФактуРеализации;
		ЗаписьРегистра.ПорядокПризнанияМатериальныхРасходов = Перечисления.ПорядокПризнанияМатериальныхРасходов.ПоОплатеПоставщику;
	КонецЕсли;
	
	Если ЗаписьРегистра.Период >= '20111001' Тогда
		ЗаписьРегистра.УчитыватьПоложительныеСуммовыеРазницыПриНачисленииНДС = Ложь;
	КонецЕсли;

КонецПроцедуры

Процедура ОбновитьИспользуемыеСистемыНалогообложения() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользуемыеСистемыНалогообложения = ПолучитьИспользуемыеСистемыНалогообложения();
	
	Константы.ИспользуетсяОСНО.Установить(ИспользуемыеСистемыНалогообложения.ИспользуетсяОСНО);
	Константы.ИспользуетсяУСН.Установить(ИспользуемыеСистемыНалогообложения.ИспользуетсяУСН);
	Константы.ИспользуетсяНДФЛИП.Установить(ИспользуемыеСистемыНалогообложения.ИспользуетсяНДФЛИП);
	Константы.ИспользуетсяУСНПатент.Установить(ИспользуемыеСистемыНалогообложения.ИспользуетсяУСНПатент);
	Константы.ИспользуетсяЕНВД.Установить(ИспользуемыеСистемыНалогообложения.ИспользуетсяЕНВД);
	
	Справочники.ВидыНалоговИПлатежейВБюджет.СоздатьПоставляемыеЭлементы();
	
КонецПроцедуры

Функция ПолучитьИспользуемыеСистемыНалогообложения() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СистемыНалогообложения = Новый Структура();
	СистемыНалогообложения.Вставить("ИспользуетсяОСНО",                  Ложь);
	СистемыНалогообложения.Вставить("ИспользуетсяУСН",                   Ложь);
	СистемыНалогообложения.Вставить("ИспользуетсяУСНДоходы",             Ложь);
	СистемыНалогообложения.Вставить("ИспользуетсяУСНДоходыМинусРасходы", Ложь);
	СистемыНалогообложения.Вставить("ИспользуетсяНДФЛИП",                Ложь);
	СистемыНалогообложения.Вставить("ИспользуетсяУСНПатент",             Ложь);
	СистемыНалогообложения.Вставить("ИспользуетсяЕНВД",                  Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(СистемыНалогообложения.ИспользуетсяОСНО), ЛОЖЬ) КАК ИспользуетсяОСНО,
	|	ЕСТЬNULL(МАКСИМУМ(СистемыНалогообложения.ИспользуетсяУСН), ЛОЖЬ) КАК ИспользуетсяУСН,
	|	ЕСТЬNULL(МАКСИМУМ(СистемыНалогообложения.ИспользуетсяУСНДоходы), ЛОЖЬ) КАК ИспользуетсяУСНДоходы,
	|	ЕСТЬNULL(МАКСИМУМ(СистемыНалогообложения.ИспользуетсяУСНДоходыМинусРасходы), ЛОЖЬ) КАК ИспользуетсяУСНДоходыМинусРасходы,
	|	ЕСТЬNULL(МАКСИМУМ(СистемыНалогообложения.ИспользуетсяНДФЛИП), ЛОЖЬ) КАК ИспользуетсяНДФЛИП,
	|	ЕСТЬNULL(МАКСИМУМ(СистемыНалогообложения.ИспользуетсяУСНПатент), ЛОЖЬ) КАК ИспользуетсяУСНПатент,
	|	ЕСТЬNULL(МАКСИМУМ(СистемыНалогообложения.ИспользуетсяЕНВД), ЛОЖЬ) КАК ИспользуетсяЕНВД
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		УчетнаяПолитикаОрганизаций.ПлательщикНалогаНаПрибыль КАК ИспользуетсяОСНО,
	|		УчетнаяПолитикаОрганизаций.ПрименяетсяУСН КАК ИспользуетсяУСН,
	|		УчетнаяПолитикаОрганизаций.ПрименяетсяУСНДоходы КАК ИспользуетсяУСНДоходы,
	|		УчетнаяПолитикаОрганизаций.ПрименяетсяУСНДоходыМинусРасходы КАК ИспользуетсяУСНДоходыМинусРасходы,
	|		УчетнаяПолитикаОрганизаций.ПлательщикНДФЛ КАК ИспользуетсяНДФЛИП,
	|		УчетнаяПолитикаОрганизаций.ПрименяетсяУСНПатент КАК ИспользуетсяУСНПатент,
	|		УчетнаяПолитикаОрганизаций.ПлательщикЕНВД КАК ИспользуетсяЕНВД
	|	ИЗ
	|		РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
	|	ГДЕ
	|		НЕ УчетнаяПолитикаОрганизаций.Организация.ПометкаУдаления) КАК СистемыНалогообложения";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СистемыНалогообложения, Выборка);
	КонецЕсли;
	
	Если Не СистемыНалогообложения.ИспользуетсяУСН Тогда
		СистемыНалогообложения.ИспользуетсяУСНДоходы             = Ложь;
		СистемыНалогообложения.ИспользуетсяУСНДоходыМинусРасходы = Ложь;
	КонецЕсли;
	
	Возврат СистемыНалогообложения;
	
КонецФункции

Процедура ЗаполнитьЗакладкуЗатратыНаПроизводство() Экспорт
	
	// Выполнять без ограничений доступа, монопольно
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчетнаяПолитикаОрганизаций.Организация КАК Организация,
	|	УчетнаяПолитикаОрганизаций.Период КАК Период
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
	|ГДЕ
	|	НЕ УчетнаяПолитикаОрганизаций.ВыпускПродукции
	|	И НЕ УчетнаяПолитикаОрганизаций.ОказаниеУслуг
	|	И НЕ УчетнаяПолитикаОрганизаций.РассчитыватьСебестоимостьПолуфабрикатов
	|	И НЕ УчетнаяПолитикаОрганизаций.РассчитыватьСебестоимостьУслугСобственнымПодразделениям
	|	И УчетнаяПолитикаОрганизаций.ПорядокСписанияРасходовНаСебестоимостьУслуг = ЗНАЧЕНИЕ(Перечисление.ПорядокСписанияРасходовНаСебестоимостьУслуг.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Период УБЫВ";
	
	Периоды = Запрос.Выполнить().Выгрузить();
	Периоды.Колонки.Добавить("КонецПериода", Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	
	Сегодня      = ТекущаяДата();
	
	Организация  = Неопределено;
	КонецПериода = '0001-01-01';
	Для Каждого Запись Из Периоды Цикл
		
		Если Запись.Организация <> Организация Тогда
			Запись.КонецПериода = КонецМесяца(Макс(Запись.Период, Сегодня));
			Организация         = Запись.Организация;
		Иначе
			Запись.КонецПериода = КонецПериода;
		КонецЕсли;
		КонецПериода = КонецМесяца(Запись.Период);
		
	КонецЦикла;
	
	Периоды.Сортировать("Организация, Период");
	
	ВедетсяПроизводственнаяДеятельность = ПолучитьФункциональнуюОпцию("ВедетсяПроизводственнаяДеятельность");
	
	ДанныеПредыдущейЗаписи = Неопределено;
	
	Для Каждого ОписаниеЗаписи Из Периоды Цикл
		
		Запись = РегистрыСведений.УчетнаяПолитикаОрганизаций.СоздатьМенеджерЗаписи();
		Запись.Период      = ОписаниеЗаписи.Период;
		Запись.Организация = ОписаниеЗаписи.Организация;
		Запись.Прочитать();
		
		// Значение по умолчанию.
		// Остальные новые реквизиты - булевы, они уже находятся в значении по умолчанию - Ложь.
		Запись.ПорядокСписанияРасходовНаСебестоимостьУслуг = Перечисления.ПорядокСписанияРасходовНаСебестоимостьУслуг.БезУчетаВыручки;
		Если Не ВедетсяПроизводственнаяДеятельность Или Не Запись.УдалитьВедетсяПроизводственнаяДеятельность Тогда
			// Оставляем все по умолчанию
		Иначе
			
			// Определим по данным информационной базы
			Если Запись.Период >= Сегодня 
				И ДанныеПредыдущейЗаписи <> Неопределено 
				И ДанныеПредыдущейЗаписи.Организация = Запись.Организация Тогда
				
				// Унаследуем из предыдущей записи
				ЗаполнитьЗначенияСвойств(Запись, ДанныеПредыдущейЗаписи);
				
			Иначе
				
				Запись.ВыпускПродукции = ВыпускПродукции(ОписаниеЗаписи.Период, ОписаниеЗаписи.КонецПериода, ОписаниеЗаписи.Организация);
				Если Не Запись.ВыпускПродукции Тогда
					// Что-то же организация делает, раз был установлен флаг ВедетсяПроизводственнаяДеятельность
					Запись.ОказаниеУслуг = Истина;
				Иначе
					Запись.ОказаниеУслуг = ОказаниеУслуг(ОписаниеЗаписи.Период, ОписаниеЗаписи.КонецПериода, ОписаниеЗаписи.Организация);
				КонецЕсли;
				
				Запись.РассчитыватьСебестоимостьПолуфабрикатов = РассчитыватьСебестоимостьПолуфабрикатов(
					ОписаниеЗаписи.Период, 
					ОписаниеЗаписи.КонецПериода, 
					ОписаниеЗаписи.Организация);
					
				Запись.РассчитыватьСебестоимостьУслугСобственнымПодразделениям = РассчитыватьСебестоимостьУслугСобственнымПодразделениям(
					ОписаниеЗаписи.Период,
					ОписаниеЗаписи.КонецПериода,
					ОписаниеЗаписи.Организация);
					
			КонецЕсли;
			
			// ПорядокСписанияРасходовНаСебестоимостьУслуг
			Если Запись.УдалитьПорядокРаспределенияРасходовНаОказаниеУслуг = Перечисления.УдалитьПорядокРаспределенияРасходовНаОказаниеУслуг.ПоПлановымЦенам Тогда
				Запись.ПорядокСписанияРасходовНаСебестоимостьУслуг = Перечисления.ПорядокСписанияРасходовНаСебестоимостьУслуг.ТолькоПоПлановымЦенам;
			ИначеЕсли (Запись.ОказаниеУслуг И Запись.ВыпускПродукции) 
				Или Запись.РассчитыватьСебестоимостьПолуфабрикатов
				Или Запись.РассчитыватьСебестоимостьУслугСобственнымПодразделениям
				Или Запись.УдалитьПрямыеРасходыБезВыпускаВключатьВНЗП Тогда
				Запись.ПорядокСписанияРасходовНаСебестоимостьУслуг = Перечисления.ПорядокСписанияРасходовНаСебестоимостьУслуг.СУчетомВыручки;
			КонецЕсли;
			
			// СпособРасчетаСебестоимостиПроизводства
			Если Не Запись.РассчитыватьСебестоимостьПолуфабрикатов 
				И Не Запись.РассчитыватьСебестоимостьУслугСобственнымПодразделениям Тогда
				Запись.СпособРасчетаСебестоимостиПроизводства = Перечисления.СпособыРасчетаСебестоимостиПродукции.ПоПеределам;
			КонецЕсли;
			
			
		КонецЕсли;
		
		Запись.Записать();
		
		ДанныеПредыдущейЗаписи = Новый Структура;
		ДанныеПредыдущейЗаписи.Вставить("Организация");
		ДанныеПредыдущейЗаписи.Вставить("ВыпускПродукции");
		ДанныеПредыдущейЗаписи.Вставить("ОказаниеУслуг");
		ДанныеПредыдущейЗаписи.Вставить("РассчитыватьСебестоимостьПолуфабрикатов");
		ДанныеПредыдущейЗаписи.Вставить("РассчитыватьСебестоимостьУслугСобственнымПодразделениям");
		ЗаполнитьЗначенияСвойств(ДанныеПредыдущейЗаписи, Запись);
		
	КонецЦикла;
		
КонецПроцедуры

Функция ОказаниеУслуг(НачалоПериода, КонецПериода, Организация)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	Запрос.УстановитьПараметр("Организация",   Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РеализацияУслуг.Регистратор
	|ИЗ
	|	РегистрНакопления.РеализацияУслуг КАК РеализацияУслуг
	|ГДЕ
	|	РеализацияУслуг.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РеализацияУслуг.Активность
	|	И РеализацияУслуг.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	АктОбОказанииПроизводственныхУслуг.Ссылка
	|ИЗ
	|	Документ.АктОбОказанииПроизводственныхУслуг КАК АктОбОказанииПроизводственныхУслуг
	|ГДЕ
	|	АктОбОказанииПроизводственныхУслуг.Проведен
	|	И АктОбОказанииПроизводственныхУслуг.Организация = &Организация
	|	И АктОбОказанииПроизводственныхУслуг.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|";
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ВыпускПродукции(НачалоПериода, КонецПериода, Организация)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	Запрос.УстановитьПараметр("Организация",   Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Продукция.Ссылка
	|ИЗ
	|	Документ.ОтчетПроизводстваЗаСмену.Продукция КАК Продукция
	|ГДЕ
	|	Продукция.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Продукция.Ссылка.Проведен
	|	И Продукция.Ссылка.Организация = &Организация
	|";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция РассчитыватьСебестоимостьПолуфабрикатов(НачалоПериода, КонецПериода, Организация)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	Запрос.УстановитьПараметр("Организация",   Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВстречныйВыпуск.Период
	|ИЗ
	|	РегистрСведений.ВстречныйВыпускПродукцииУслуг.СрезПоследних(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И Продукция <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|				И НЕ Продукция.Услуга) КАК ВстречныйВыпуск
	|ГДЕ
	|	ВстречныйВыпуск.Учитывается
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Хозрасчетный.Регистратор
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Активность
	|	И Хозрасчетный.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Хозрасчетный.Организация = &Организация
	|	И Хозрасчетный.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Полуфабрикаты)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Хозрасчетный.Регистратор
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Активность
	|	И Хозрасчетный.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Хозрасчетный.Организация = &Организация
	|	И Хозрасчетный.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Полуфабрикаты)";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция РассчитыватьСебестоимостьУслугСобственнымПодразделениям(НачалоПериода, КонецПериода, Организация)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	Запрос.УстановитьПараметр("Организация",   Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Услуги.Ссылка
	|ИЗ
	|	Документ.ОтчетПроизводстваЗаСмену.Услуги КАК Услуги
	|ГДЕ
	|	Услуги.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Услуги.Ссылка.Проведен
	|	И Услуги.Ссылка.Организация = &Организация";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ЗначенияРесурсаУчетнойПолитикиЗаПериод(ИмяРесурса, Организация, НачалоПериода, ОкончаниеПериода) Экспорт
	
	СледующийМесяц = НачалоМесяца(ДобавитьМесяц(НачалоПериода, 1));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",      Организация);
	Запрос.УстановитьПараметр("НачалоПериода",    НачалоМесяца(НачалоПериода));
	Запрос.УстановитьПараметр("СледующийМесяц",   СледующийМесяц);
	Запрос.УстановитьПараметр("ОкончаниеПериода", КонецМесяца(ОкончаниеПериода));
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	УчетнаяПолитикаОрганизацийСрезПоследних.СистемаНалогообложения КАК Значение
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(&НачалоПериода, Организация = &Организация) КАК УчетнаяПолитикаОрганизацийСрезПоследних";
	
	Если СледующийМесяц < КонецМесяца(ОкончаниеПериода) Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|"+
		"ВЫБРАТЬ
		|	УчетнаяПолитикаОрганизаций.СистемаНалогообложения
		|ИЗ
		|	РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
		|ГДЕ
		|	УчетнаяПолитикаОрганизаций.Организация = &Организация
		|	И УчетнаяПолитикаОрганизаций.Период МЕЖДУ &СледующийМесяц И &ОкончаниеПериода";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СистемаНалогообложения", ИмяРесурса);
	
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Значение");
	
	Возврат Результат;
	
КонецФункции

// Печать

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Устанавливаем признак доступности печати покомплектно.
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	ПараметрыЗаполнения = ПараметрыЗаполненияШапкиПечатнойФормы(ПараметрыПечати.ИмяМакета, ПараметрыПечати);
	Если ПараметрыПечати.ИмяМакета = "ПланСчетов" Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"ПланСчетов",
			ПараметрыЗаполнения.ЗаголовокШапки,
			ТабличныйДокументПланСчетов(ПараметрыЗаполнения));
	ИначеЕсли ПараметрыПечати.ИмяМакета = "РегистрыБУ"
		ИЛИ ПараметрыПечати.ИмяМакета = "РегистрыНУ" 
		ИЛИ ПараметрыПечати.ИмяМакета = "ПервичныеДокументы" Тогда
		
		Если ПараметрыПечати.ИмяМакета = "РегистрыБУ" Тогда
			ТаблицаФорм = ТаблицаФормДокументовИлиРегистров(
				"РегистрыБУ", "РегистрыБУСлужебный", ПараметрыПечати, ПараметрыЗаполнения);
		ИначеЕсли ПараметрыПечати.ИмяМакета = "РегистрыНУ" Тогда
			ТаблицаФорм = ТаблицаФормДокументовИлиРегистров(
				"РегистрыНУ", "РегистрыНУСлужебный", ПараметрыПечати, ПараметрыЗаполнения);
		ИначеЕсли ПараметрыПечати.ИмяМакета = "ПервичныеДокументы" Тогда
			ТаблицаФорм = ТаблицаФормДокументовИлиРегистров(
				"ПервичныеДокументы", "ПервичныеДокументыСлужебный", ПараметрыПечати, ПараметрыЗаполнения);
		КонецЕсли;
		КоллекцияПечатныхФорм.Очистить();
		Для каждого СтрокаТаблицы Из ТаблицаФорм Цикл
			НоваяСтрока = КоллекцияПечатныхФорм.Добавить();
			НоваяСтрока.ИмяМакета = СтрокаТаблицы.Идентификатор;
			НоваяСтрока.СинонимМакета = СтрокаТаблицы.Наименование;
			НоваяСтрока.ТабличныйДокумент = СтрокаТаблицы.ТабличныйДокумент;
			НоваяСтрока.Экземпляров = 1;
		КонецЦикла;
		
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеПечатнойФормыУчетнойПолитики(ИмяМакета, Запись) Экспорт
	
	ДанныеПечатнойФормы = Новый Структура("Документ,ЗаголовокФормы");
	ДанныеПечатнойФормы.Документ = Новый ТабличныйДокумент;
	ПараметрыЗаполнения = ПараметрыЗаполненияШапкиПечатнойФормы(ИмяМакета, Запись);
	ДанныеПечатнойФормы.ЗаголовокФормы = ПараметрыЗаполнения.ЗаголовокФормы;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Если ИмяМакета = "УчетнаяПолитикаБУ" 
		ИЛИ ИмяМакета = "УчетнаяПолитикаНУ" Тогда
		ТабличныйДокумент = ТабличныйДокументУчетнойПолитикиБУ_НУ(ИмяМакета, Запись, ПараметрыЗаполнения);
	ИначеЕсли ИмяМакета = "Приказ" Тогда
		ТабличныйДокумент = ТабличныйДокументПриказ(Запись, ПараметрыЗаполнения);
	КонецЕсли;
	
	ДанныеПечатнойФормы.Документ = ФорматированныйДокументИзТабличного(ТабличныйДокумент);
	
	Возврат ДанныеПечатнойФормы;
	
КонецФункции

Функция ТабличныйДокументУчетнойПолитикиБУ_НУ(ИмяМакета, Запись, ПараметрыЗаполнения)
	
	Результат = Новый ТабличныйДокумент;
	
	МакетОформления = РегистрыСведений.УчетнаяПолитикаОрганизаций.ПолучитьМакет("МакетОформления");
	МакетСодержания = РегистрыСведений.УчетнаяПолитикаОрганизаций.ПолучитьМакет(ИмяМакета);
	
	ОбластьШапка   = МакетОформления.ПолучитьОбласть("Шапка");
	ОбластьШапка.Параметры.Заполнить(ПараметрыЗаполнения);
	Результат.Вывести(ОбластьШапка);
	
	ПараметрыСодержания = ПараметрыЗаполненияСодержанияПечатнойФормы(Запись);
	ОбластьСодержания   = МакетСодержания.ПолучитьОбласть("Содержание");
	ОбластьСодержания.Параметры.Заполнить(ПараметрыСодержания);
	ДокументСодержания = Новый ТабличныйДокумент;
	ДокументСодержания.Вывести(ОбластьСодержания);
	
	ПараметрыОпций = Новый Структура("Организация,Период", Запись.Организация, НачалоМесяца(Запись.Период));
	
	ЗначенияОпций  = Новый Соответствие;
	УстановитьДополнительныеЗначенияОпций(ЗначенияОпций, Запись);
	
	ВыводитьЗаголовок1  = Истина;
	ВыводитьЗаголовок2  = Истина;
	ВыводитьРазделитель = Ложь;
	НомерЗаголовка2     = 1;
	
	Для НомерСтроки = 1 По ДокументСодержания.ВысотаТаблицы Цикл
		
		ТекстЗаголовка1 = ДокументСодержания.Область(НомерСтроки, 1, НомерСтроки, 1).Текст;
		Если НЕ ПустаяСтрока(ТекстЗаголовка1) Тогда
			ВыводитьЗаголовок1 = ВыводитьТекущийУровень(ДокументСодержания, НомерСтроки, ЗначенияОпций, ПараметрыОпций);
			Если ВыводитьЗаголовок1 Тогда
				Если ВыводитьРазделитель Тогда
					ВывестиРазделитель(Результат, МакетОформления);
					ВыводитьРазделитель = Ложь;
				КонецЕсли;
				ВывестиЗаголовок1(Результат, ТекстЗаголовка1, МакетОформления);
				НомерЗаголовка2 = 1;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ВыводитьЗаголовок1 Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстЗаголовка2 = ДокументСодержания.Область(НомерСтроки, 2, НомерСтроки, 2).Текст;
		Если НЕ ПустаяСтрока(ТекстЗаголовка2) Тогда
			ВыводитьЗаголовок2 = ?(НЕ ПустаяСтрока(ТекстЗаголовка1),
				Истина,
				ВыводитьТекущийУровень(ДокументСодержания, НомерСтроки, ЗначенияОпций, ПараметрыОпций));
			Если ВыводитьЗаголовок2 Тогда
				Если ВыводитьРазделитель Тогда
					ВывестиРазделитель(Результат, МакетОформления);
					ВыводитьРазделитель = Ложь;
				КонецЕсли;
				ВывестиЗаголовок2(Результат, ТекстЗаголовка2, НомерЗаголовка2, МакетОформления);
				НомерЗаголовка2 = НомерЗаголовка2 + 1;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ВыводитьЗаголовок2 Тогда
			Продолжить;
		КонецЕсли;
		
		Текст = ДокументСодержания.Область(НомерСтроки, 3, НомерСтроки, 3).Текст;
		Если НЕ ПустаяСтрока(Текст) Тогда
			ВыводитьТекст = ?(НЕ ПустаяСтрока(ТекстЗаголовка1) ИЛИ НЕ ПустаяСтрока(ТекстЗаголовка2),
				Истина,
				ВыводитьТекущийУровень(ДокументСодержания, НомерСтроки, ЗначенияОпций, ПараметрыОпций));
			Если ВыводитьТекст Тогда
				ВывестиТекст(Результат, Текст, МакетОформления);
				ВыводитьРазделитель = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ТабличныйДокументПриказ(Запись, ПараметрыЗаполнения)
	
	Результат = Новый ТабличныйДокумент;
	
	МакетСодержания   = РегистрыСведений.УчетнаяПолитикаОрганизаций.ПолучитьМакет("Приказ");
	ОбластьСодержания = МакетСодержания.ПолучитьОбласть("Содержание");
	ОбластьСодержания.Параметры.Заполнить(ПараметрыЗаполнения);
	Результат.Вывести(ОбластьСодержания);
	
	Возврат Результат;
	
КонецФункции

Функция ТабличныйДокументПланСчетов(ПараметрыЗаполнения)

	Результат = ПланыСчетов.Хозрасчетный.ПечатьПланаСчетов(Ложь, ПараметрыЗаполнения);
	
	Возврат Результат;

КонецФункции

Функция ТаблицаФормДокументовИлиРегистров(ИмяМакетаФорм, ИмяМакетаСписка, Запись, ПараметрыЗаполнения)
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Наименование",  Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Ландшафт",      Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ТабличныйДокумент");
	
	// 1. Перечень всех форм используемых документов или регистров
	
	ПереченьФорм = Новый ТабличныйДокумент;
	
	МакетОформления = РегистрыСведений.УчетнаяПолитикаОрганизаций.ПолучитьМакет("МакетОформления");
	МакетСодержания = РегистрыСведений.УчетнаяПолитикаОрганизаций.ПолучитьМакет(ИмяМакетаСписка);
	
	ОбластьШапка   = МакетОформления.ПолучитьОбласть("Шапка");
	ОбластьШапка.Параметры.Заполнить(ПараметрыЗаполнения);
	ПереченьФорм.Вывести(ОбластьШапка);
	
	ДокументСодержания = МакетСодержания.ПолучитьОбласть("Содержание");
	
	ПараметрыОпций = Новый Структура("Организация,Период", Запись.Организация, НачалоМесяца(Запись.Период));
	ЗначенияОпций  = Новый Соответствие;
	УстановитьДополнительныеЗначенияОпций(ЗначенияОпций, Запись);
	
	ВыводитьЗаголовок1  = Истина;
	ВыводитьЗаголовок2  = Истина;
	ВыводитьРазделитель = Ложь;
	НомерЗаголовка2     = 1;
	
	Для НомерСтроки = 1 По ДокументСодержания.ВысотаТаблицы Цикл
		
		ТекстЗаголовка1 = ДокументСодержания.Область(НомерСтроки, 1, НомерСтроки, 1).Текст;
		Если НЕ ПустаяСтрока(ТекстЗаголовка1) Тогда
			ВыводитьЗаголовок1 = ВыводитьТекущийУровень(ДокументСодержания, НомерСтроки, ЗначенияОпций, ПараметрыОпций);
			Если ВыводитьЗаголовок1 Тогда
				Если ВыводитьРазделитель Тогда
					ВывестиРазделитель(ПереченьФорм, МакетОформления);
					ВыводитьРазделитель = Ложь;
				КонецЕсли;
				ВывестиЗаголовок1(ПереченьФорм, ТекстЗаголовка1, МакетОформления);
				НомерЗаголовка2 = 1;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ВыводитьЗаголовок1 Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстЗаголовка2 = ДокументСодержания.Область(НомерСтроки, 2, НомерСтроки, 2).Текст;
		Если НЕ ПустаяСтрока(ТекстЗаголовка2) Тогда
			ВыводитьЗаголовок2 = ?(НЕ ПустаяСтрока(ТекстЗаголовка1),
				Истина,
				ВыводитьТекущийУровень(ДокументСодержания, НомерСтроки, ЗначенияОпций, ПараметрыОпций));
			Если ВыводитьЗаголовок2 Тогда
				Если ВыводитьРазделитель Тогда
					ВывестиРазделитель(ПереченьФорм, МакетОформления);
					ВыводитьРазделитель = Ложь;
				КонецЕсли;
				ВывестиЗаголовок2(ПереченьФорм, ТекстЗаголовка2, НомерЗаголовка2, МакетОформления);
				НомерЗаголовка2 = НомерЗаголовка2 + 1;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ВыводитьЗаголовок2 Тогда
			Продолжить;
		КонецЕсли;
		
		Текст = ДокументСодержания.Область(НомерСтроки, 3, НомерСтроки, 3).Текст;
		Если НЕ ПустаяСтрока(Текст) Тогда
			ВыводитьТекст = ?(НЕ ПустаяСтрока(ТекстЗаголовка1) ИЛИ НЕ ПустаяСтрока(ТекстЗаголовка2),
				Истина,
				ВыводитьТекущийУровень(ДокументСодержания, НомерСтроки, ЗначенияОпций, ПараметрыОпций));
			Если ВыводитьТекст Тогда
				ВывестиТекст(ПереченьФорм, Текст, МакетОформления);
				ВыводитьРазделитель = Истина;
				Идентификатор = ДокументСодержания.Область(НомерСтроки, 6, НомерСтроки, 6).Текст;
				Если ЗначениеЗаполнено(Идентификатор) Тогда
					НоваяСтрока = Результат.Добавить();
					НоваяСтрока.Наименование  = Текст;
					НоваяСтрока.Идентификатор = Идентификатор;
					НоваяСтрока.Ландшафт      = ДокументСодержания.Область(НомерСтроки, 7, НомерСтроки, 7).Текст = "1";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// 2. Шаблоны всех форм используемых документов или регистров, каждый в отдельном табличном документе
	
	МакетФорм = РегистрыСведений.УчетнаяПолитикаОрганизаций.ПолучитьМакет(ИмяМакетаФорм);
	Для каждого СтрокаТаблицы Из Результат Цикл
	
		ФормаДокументаРегистра = Новый ТабличныйДокумент;
		ОбластьДокументаРегистра = МакетФорм.ПолучитьОбласть(СтрокаТаблицы.Идентификатор);
		ФормаДокументаРегистра.Вывести(ОбластьДокументаРегистра);
		ФормаДокументаРегистра.ОриентацияСтраницы = ?(СтрокаТаблицы.Ландшафт, 
			ОриентацияСтраницы.Ландшафт, 
			ОриентацияСтраницы.Портрет);
		ФормаДокументаРегистра.АвтоМасштаб        = Истина;
		СтрокаТаблицы.ТабличныйДокумент  = ФормаДокументаРегистра;
	
	КонецЦикла;
	
	НоваяСтрока = Результат.Вставить(0);
	НоваяСтрока.Наименование      = ПараметрыЗаполнения.ЗаголовокПеречня;
	НоваяСтрока.Идентификатор     = "ПереченьФорм";
	НоваяСтрока.Ландшафт          = Ложь;
	НоваяСтрока.ТабличныйДокумент = ПереченьФорм;
	
	Возврат Результат;
	
КонецФункции

Функция ФорматированныйДокументИзТабличного(ТабличныйДокумент)

	ФорматированныйДокумент = Новый ФорматированныйДокумент;
	
	Для НомерСтроки = 1 По ТабличныйДокумент.ВысотаТаблицы Цикл
		
		СтрокаТаблицы = ТабличныйДокумент.ПолучитьОбласть(НомерСтроки, , НомерСтроки);
		НовыйПараграф = ФорматированныйДокумент.Элементы.Добавить();
		НовыйПараграф.ГоризонтальноеПоложение = СтрокаТаблицы.Область(1, 1, 1, 1).ГоризонтальноеПоложение;
		Для НомерКолонки = 1 По СтрокаТаблицы.ШиринаТаблицы Цикл
			ОбластьЯчейки = СтрокаТаблицы.Область(1, НомерКолонки, 1, НомерКолонки);
			Если НЕ ПустаяСтрока(ОбластьЯчейки.Текст) Тогда
				НовыйЭлемент = НовыйПараграф.Элементы.Добавить(
					?(НовыйПараграф.Элементы.Количество() = 0, "", " ") + ОбластьЯчейки.Текст, 
					Тип("ТекстФорматированногоДокумента"));
				НовыйЭлемент.Шрифт      = ОбластьЯчейки.Шрифт;
				НовыйЭлемент.ЦветТекста = ОбластьЯчейки.ЦветТекста;
				НовыйЭлемент.ЦветФона   = ОбластьЯчейки.ЦветФона;
			КонецЕсли;
		КонецЦикла;
		Если НовыйПараграф.Элементы.Количество() = 0 Тогда
			НовыйПараграф.Элементы.Добавить("", Тип("ПереводСтрокиФорматированногоДокумента"));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ФорматированныйДокумент;

КонецФункции

Функция ПараметрыЗаполненияСодержанияПечатнойФормы(Запись)

	Результат = Новый Структура;
	
	Результат.Вставить("СпособОценкиМПЗ", 
		УчетнаяПолитика.СпособОценкиМПЗ(Запись.Организация, Запись.Период));
	Результат.Вставить("СпособОценкиТоваровВРознице", 
		УчетнаяПолитика.СпособОценкиТоваровВРознице(Запись.Организация, Запись.Период));
	
	Возврат Результат;

КонецФункции

Процедура УстановитьДополнительныеЗначенияОпций(ЗначенияОпций, Запись)

	СпособУчетаВыпускаГотовойПродукции = УчетнаяПолитика.СпособУчетаВыпускаГотовойПродукции(
		Запись.Организация, Запись.Период);
	ЗначенияОпций.Вставить("УчитыватьОтклоненияОтПлановойСебестоимости",
		СпособУчетаВыпускаГотовойПродукции = Перечисления.СпособыУчетаВыпускаГотовойПродукции.СИспользованиемСчета40);
	
	СпособПогашенияСтоимостиСпецодеждыНУ = УчетнаяПолитика.СпособПогашенияСтоимостиСпецодеждыНУ(
		Запись.Организация, Запись.Период);
	ЗначенияОпций.Вставить("ПогашениеСтоимостиСпецодеждыНУАналогичноБУ",
		СпособПогашенияСтоимостиСпецодеждыНУ = Перечисления.СпособыПогашенияСтоимостиНУ.АналогичноСпособуПринятомуДляБухгалтерскогоУчета);
	
КонецПроцедуры

Функция ВыводитьТекущийУровень(ДокументСодержания, НомерСтроки, ЗначенияОпций, ПараметрыОпций)
	
	СтрокаОпцийИстина = ДокументСодержания.Область(НомерСтроки, 4, НомерСтроки, 4).Текст;
	ОпцииИстина       = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(СтрокаОпцийИстина);
	СтрокаОпцийЛожь   = ДокументСодержания.Область(НомерСтроки, 5, НомерСтроки, 5).Текст;
	ОпцииЛожь         = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(СтрокаОпцийЛожь);
	
	Для каждого ИмяОпции Из ОпцииИстина Цикл
		ЗначениеОпции = ЗначенияОпций[ИмяОпции];
		Если ЗначениеОпции = Неопределено Тогда
			Если Метаданные.ФункциональныеОпции.Найти(ИмяОпции) = Неопределено Тогда
				ВызватьИсключение ("Нет функциональной опции " + ИмяОпции);
			КонецЕсли;
			ЗначениеОпции = ПолучитьФункциональнуюОпцию(ИмяОпции, ПараметрыОпций);
			ЗначенияОпций.Вставить(ИмяОпции, ЗначениеОпции);
		КонецЕсли;
		Если НЕ ЗначениеОпции Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ИмяОпции Из ОпцииЛожь Цикл
		ЗначениеОпции = ЗначенияОпций[ИмяОпции];
		Если ЗначениеОпции = Неопределено Тогда
			Если Метаданные.ФункциональныеОпции.Найти(ИмяОпции) = Неопределено Тогда
				ВызватьИсключение ("Нет функциональной опции " + ИмяОпции);
			КонецЕсли;
			ЗначениеОпции = ПолучитьФункциональнуюОпцию(ИмяОпции, ПараметрыОпций);
			ЗначенияОпций.Вставить(ИмяОпции, ЗначениеОпции);
		КонецЕсли;
		Если ЗначениеОпции Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
		
	Возврат Истина;
	
КонецФункции

Процедура ВывестиЗаголовок1(ТабличныйДокумент, Текст, МакетОформления)

	ОбластьЗаголовок1 = МакетОформления.ПолучитьОбласть("Заголовок1");
	ОбластьЗаголовок1.Параметры.Заголовок1 = Текст;
	ТабличныйДокумент.Вывести(ОбластьЗаголовок1);

КонецПроцедуры

Процедура ВывестиЗаголовок2(ТабличныйДокумент, Текст, НомерЗаголовка, МакетОформления)

	ОбластьЗаголовок2 = МакетОформления.ПолучитьОбласть("Заголовок2");
	ОбластьЗаголовок2.Параметры.Заголовок2 = ?(НомерЗаголовка > 0, Формат(НомерЗаголовка, "ЧГ=") + ". " + Текст, Текст);
	ТабличныйДокумент.Вывести(ОбластьЗаголовок2);

КонецПроцедуры

Процедура ВывестиТекст(ТабличныйДокумент, Текст, МакетОформления)

	ОбластьТекст = МакетОформления.ПолучитьОбласть("Текст");
	ОбластьТекст.Параметры.Текст = Текст;
	ТабличныйДокумент.Вывести(ОбластьТекст);

КонецПроцедуры

Процедура ВывестиРазделитель(ТабличныйДокумент, МакетОформления)

	ОбластьРазделитель = МакетОформления.ПолучитьОбласть("Разделитель");
	ТабличныйДокумент.Вывести(ОбластьРазделитель);

КонецПроцедуры

Функция ПараметрыЗаполненияШапкиПечатнойФормы(ИмяМакета, Запись)
	
	ДатаПриказа = Запись.Период;
	ПараметрыШапки = Новый Структура;
	ПараметрыШапки.Вставить("НомерПриказа",     "___________");
	ПараметрыШапки.Вставить("ДатаПриказа",      Формат(ДатаПриказа, "ДЛФ=D"));
	ПараметрыШапки.Вставить("НомерПриложения",  "");
	ПараметрыШапки.Вставить("ЗаголовокШапки",   НСтр("ru='Печать учетной политики'"));
	ПараметрыШапки.Вставить("ЗаголовокПеречня", НСтр("ru='Перечень форм'"));
	ПараметрыШапки.Вставить("ЗаголовокФормы",   НСтр("ru='Печать учетной политики'"));
	
	Если ИмяМакета = "Приказ" Тогда
		ПараметрыШапки.ЗаголовокФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Приказ об учетной политике от %1 по %2'"),
			Формат(Запись.Период, "ДЛФ=D"),
			Запись.Организация);
		СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Запись.Организация, ДатаПриказа);
		ПараметрыШапки.Вставить("ПолноеНаименованиеОрганизации",    СведенияОбОрганизации.ПолноеНаименование);
		Руководители = ОтветственныеЛицаБП.ОтветственныеЛица(Запись.Организация, ДатаПриказа);
		ПараметрыШапки.Вставить("ДолжностьРуководителяОрганизации", Руководители.РуководительДолжностьПредставление);
		ПараметрыШапки.Вставить("РуководительОрганизации",          Руководители.РуководительПредставление);
	ИначеЕсли ИмяМакета = "УчетнаяПолитикаБУ" Тогда
		ПараметрыШапки.НомерПриложения = 1;
		ПараметрыШапки.ЗаголовокШапки  = НСтр("ru='Учетная политика по бухгалтерскому учету'");
		ПараметрыШапки.ЗаголовокФормы  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Учетная политика БУ на %1 по %2'"),
			Формат(Запись.Период, "ДЛФ=D"),
			Запись.Организация);
	ИначеЕсли ИмяМакета = "ПланСчетов" Тогда
		ПараметрыШапки.НомерПриложения = 2;
		ПараметрыШапки.ЗаголовокШапки = НСтр("ru='Рабочий план счетов'");
		ПараметрыШапки.ЗаголовокФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Рабочий план счетов на %1 по %2'"),
			Формат(Запись.Период, "ДЛФ=D"),
			Запись.Организация);
	ИначеЕсли ИмяМакета = "ПервичныеДокументы" Тогда
		ПараметрыШапки.НомерПриложения  = 3;
		ПараметрыШапки.ЗаголовокШапки   = НСтр("ru='Формы первичных документов'");
		ПараметрыШапки.ЗаголовокПеречня = НСтр("ru='Перечень первичных документов'");
		ПараметрыШапки.ЗаголовокФормы   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Формы первичных документов на %1 по %2'"),
			Формат(Запись.Период, "ДЛФ=D"),
			Запись.Организация);
	ИначеЕсли ИмяМакета = "РегистрыБУ" Тогда
		ПараметрыШапки.НомерПриложения  = 4;
		ПараметрыШапки.ЗаголовокШапки   = НСтр("ru='Регистры бухгалтерского учета'");
		ПараметрыШапки.ЗаголовокПеречня = НСтр("ru='Перечень регистров бухгалтерского учета'");
		ПараметрыШапки.ЗаголовокФормы   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Регистры БУ на %1 по %2'"),
			Формат(Запись.Период, "ДЛФ=D"),
			Запись.Организация);
	ИначеЕсли ИмяМакета = "УчетнаяПолитикаНУ" Тогда
		ПараметрыШапки.НомерПриложения = 5;
		ПараметрыШапки.ЗаголовокШапки  = НСтр("ru='Учетная политика по налоговому учету'");
		ПараметрыШапки.ЗаголовокФормы  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Учетная политика НУ на %1 по %2'"),
			Формат(Запись.Период, "ДЛФ=D"),
			Запись.Организация);
	ИначеЕсли ИмяМакета = "РегистрыНУ" Тогда
		ПараметрыШапки.НомерПриложения  = 6;
		ПараметрыШапки.ЗаголовокШапки   = НСтр("ru='Регистры налогового учета'");
		ПараметрыШапки.ЗаголовокПеречня = НСтр("ru='Перечень регистров налогового учета'");
		ПараметрыШапки.ЗаголовокФормы   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Регистры НУ на %1 по %2'"),
			Формат(Запись.Период, "ДЛФ=D"),
			Запись.Организация);
	КонецЕсли;
	
	Возврат ПараметрыШапки;

КонецФункции 

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ОБНОВЛЕНИЯ

Процедура ЗаполнитьИспользуемыеСистемыНалогообложения() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	ОбновитьИспользуемыеСистемыНалогообложения();
	
КонецПроцедуры

Процедура ЗаполнитьСтавкуНалогаУСН() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчетнаяПолитикаОрганизаций.Период,
	|	УчетнаяПолитикаОрганизаций.Организация
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
	|ГДЕ
	|	УчетнаяПолитикаОрганизаций.ПрименяетсяУСН
	|	И УчетнаяПолитикаОрганизаций.СтавкаНалогаУСН = 0"
	;
	
	ВыборкаЗаписи = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗаписи.Следующий() Цикл
	
		Запись = РегистрыСведений.УчетнаяПолитикаОрганизаций.СоздатьМенеджерЗаписи();
		
		Запись.Период		= ВыборкаЗаписи.Период;
		Запись.Организация	= ВыборкаЗаписи.Организация;
		
		Запись.Прочитать();
		Запись.СтавкаНалогаУСН = ?(Запись.ПрименяетсяУСНДоходыМинусРасходы, 15, 6);
		Запись.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

//Заполняет значение ПорядокПризнанияТаможенныхПлатежей в записях учетной политики
Процедура УстановитьПорядокПризнанияТаможенныхПлатежей() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Набор = РегистрыСведений.УчетнаяПолитикаОрганизаций.СоздатьНаборЗаписей();
	Набор.Прочитать();

	Для каждого Запись Из Набор Цикл
		
		Если НЕ ЗначениеЗаполнено(Запись.ПорядокПризнанияТаможенныхПлатежей) Тогда
			Запись.ПорядокПризнанияТаможенныхПлатежей = Перечисления.ПорядокПризнанияТаможенныхПлатежей.ПоОплате;
		КонецЕсли;
		
	КонецЦикла;
	
	Попытка
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор, Истина);
	Исключение
		ТекстСообщения	= НСтр("ru = 'Не выполнено обновление записей регистра сведений ""Учетная политика""'");
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

Функция УплачиваютсяДобровольныеВзносыВФСС() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК УплачиваютсяДобровольныеВзносыВФСС
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
	|ГДЕ
	|	НЕ УчетнаяПолитикаОрганизаций.Организация.ПометкаУдаления
	|	И УчетнаяПолитикаОрганизаций.УплачиватьДобровольныеВзносыВФСС";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецЕсли
