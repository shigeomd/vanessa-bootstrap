////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Параметры.Ключ.Пустой() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	Если Параметры.ЗначениеКопирования.Пустой() Тогда
		ИсточникКопированияСпискаПрямыхРасходов = Неопределено;
	Иначе
		ИсточникКопированияСпискаПрямыхРасходов = Параметры.ЗначениеКопирования;
	КонецЕсли;
	
	Если Не ЭлементыЗатрат.ПоддерживаетсяУчетПоЭлементамЗатрат() Тогда
		Элементы.ДетализацияУчетаРасходов.Видимость = Ложь;
	КонецЕсли;
	
	// Заполнение группы информационных ссылок
	ИнформационныйЦентрСервер.ВывестиКонтекстныеСсылки(ЭтаФорма, Элементы.ИнформационныеСсылки);
	
	ВыводитсяПредупреждение = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	ПодготовитьФормуНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	// Установить текущую страницу
	Если ТипЗнч(ПараметрыОткрытия) = Тип("Структура") Тогда
		АктивныйЭлемент = Неопределено;
		ПараметрыОткрытия.Свойство("АктивныйЭлемент", АктивныйЭлемент);
		Если ТипЗнч(АктивныйЭлемент) = Тип("Строка") Тогда
			
			Если АктивныйЭлемент = "ПорядокРегистрацииСчетовФактурНаАванс" Тогда
				
				ЭтаФорма.Элементы.ГруппаСтраницы.ТекущаяСтраница = ЭтаФорма.Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаНДС;
								
				Если Год(Запись.Период) < 2012 Тогда
					ЭтаФорма.ТекущийЭлемент = ЭтаФорма.Элементы.Найти("ПорядокРегистрацииСчетовФактурНаАвансДо2012");
				Иначе
					ЭтаФорма.ТекущийЭлемент = ЭтаФорма.Элементы.Найти("ПорядокРегистрацииСчетовФактурНаАванс");
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ)

	УстановитьПараметрыРезервовПоСомнительнымДолгам();
	
	// Проверим, что на плане счетов достаточно аналитики для выбранных настроек учетной политики
	РасширеннаяАналитика = НеобходимыеРазрезыАналитики();
	УдалитьУжеВключенныеРазрезыАналитики(РасширеннаяАналитика);
	
	Если РасширеннаяАналитика.Количество() > 0 Тогда
		
		Отказ = Истина;
		ДиалогВключитьАналитику(РасширеннаяАналитика); 
		// Может быть вызвано оповещение, которое инициирует повторную запись и выполнение действий до конца процедуры.
		Возврат;
		
	КонецЕсли;
	
	// Определим, нужно ли выводить предупреждение после записи.
	ЕстьДвиженияЗаПериодПоОрганизации = Ложь;
	ПредупредитьОНеобходимостиПерепроведенияДокументов = НЕ Отказ И ЭтаФорма.Модифицированность;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	УстановитьПараметрыРасходовУСН(ТекущийОбъект);
	
	ПараметрыЗаписи.Вставить("ИспользуемыеСистемыНалогообложенияПередЗаписью", 
		РегистрыСведений.УчетнаяПолитикаОрганизаций.ПолучитьИспользуемыеСистемыНалогообложения());

КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	ЕстьДвиженияЗаПериодПоОрганизации = Ложь;
	
	Если ПредупредитьОНеобходимостиПерепроведенияДокументов Тогда
		ДатаНач = НачалоДня(Запись.Период);
		ДатаКон = КонецДня(ДатаОкончанияДействия);
		ЕстьДвиженияЗаПериодПоОрганизации = ЕстьДвиженияЗаПериод(ДатаНач, ДатаКон, Запись.Организация);
	КонецЕсли;
	
	СкопироватьСписокПрямыхРасходовПриЗаписи();

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	ПараметрыЗаписи.Вставить("ИспользуемыеСистемыНалогообложенияПослеЗаписи", 
		РегистрыСведений.УчетнаяПолитикаОрганизаций.ПолучитьИспользуемыеСистемыНалогообложения());
	
	ЗаполнитьРеквизитыФормы();
	
	РезультатВыполнения = КалендарьБухгалтера.ЗапуститьЗаполнениеВФоне(УникальныйИдентификатор, ТекущийОбъект.Организация);
	
	ПараметрыЗаписи.Вставить("ОповеститьОбИзмененииЗадачБухгалтера",
		РезультатВыполнения.ЗаданиеВыполнено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Перем ИспользуемыеСистемыНалогообложенияПередЗаписью, ИспользуемыеСистемыНалогообложенияПослеЗаписи;
	
	ОбновитьИнтерфейс = Ложь;
	Если ПараметрыЗаписи.Свойство("ИспользуемыеСистемыНалогообложенияПередЗаписью", ИспользуемыеСистемыНалогообложенияПередЗаписью)
		И ПараметрыЗаписи.Свойство("ИспользуемыеСистемыНалогообложенияПослеЗаписи", ИспользуемыеСистемыНалогообложенияПослеЗаписи) Тогда
		
		Для Каждого КлючИЗначение Из ИспользуемыеСистемыНалогообложенияПередЗаписью Цикл
			СтароеЗначение = КлючИЗначение.Значение;
			НовоеЗначение = Неопределено;
			Если НЕ ИспользуемыеСистемыНалогообложенияПослеЗаписи.Свойство(КлючИЗначение.Ключ, НовоеЗначение)
				ИЛИ СтароеЗначение <> НовоеЗначение Тогда
				ОбновитьИнтерфейс = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ОбновитьИнтерфейс Тогда
		ОбновитьИнтерфейс();
	КонеЦесли;
	
	Оповестить("ИзменениеУчетнойПолитики");
	
	ОповеститьОбИзменении(Тип("СправочникСсылка.ВидыНалоговИПлатежейВБюджет"));
	
	Если ПараметрыЗаписи.Свойство("ОповеститьОбИзмененииЗадачБухгалтера") И ПараметрыЗаписи.ОповеститьОбИзмененииЗадачБухгалтера Тогда
		ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.ЗадачиБухгалтера"));
	КонецЕсли;
	
	Если ЕстьДвиженияЗаПериодПоОрганизации Тогда
		ДатаНач = НачалоДня(Запись.Период);
		ДатаКон = КонецДня(ДатаОкончанияДействия);
		ТекстПредупреждения = НСтр("ru = 'Изменены параметры учетной политики.
			|Рекомендуется перепровести документы организации ""%1"" за период: %2'");
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстПредупреждения,
			Запись.Организация,
			ПредставлениеПериода(ДатаНач, ДатаКон, "ФП = Истина"));
		ВыводитсяПредупреждение = Истина;
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗаписиЗавершение", ЭтотОбъект);
		ПоказатьПредупреждение(ОписаниеОповещения, ТекстПредупреждения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиЗавершение(Результат) Экспорт
	
	// В данный обработчик мы можем попасть и при выполнении команды "Записать", и при выполнении команды "Записать и закрыть".
	// Необходимо, чтобы обработчик по-разному отрабатывал в этих ситуациях,
	// т.е. нам необходимо понять, нужно ли закрывать форму. 
	// Для этого используется следующий прием:
	// т.к. при выполнении команды "Записать и закрыть" в процедуру ПередЗакрытием мы попадаем раньше, 
	// чем в обработчик оповещения, то мы можем сбрасывать флаг предупреждения в ней, а не в обработчике.
	// А в обработчике по тому, что флаг сброшен, мы понимаем, что отработало ПередЗакрытием и нужно закрыть форму.
	
	Если НЕ ВыводитсяПредупреждение Тогда
		Закрыть();
	Иначе
		ВыводитсяПредупреждение = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	// Флаг предупреждения сбрасывается в процедуре ПередЗакрытием, а не в обработчике ПослеЗаписиЗавершение,
	// чтобы в обработчике по тому, что флаг сброшен, было понятно, что нужно закрыть форму.
	
    Если ВыводитсяПредупреждение Тогда  
        Отказ = Истина;
		ВыводитсяПредупреждение = Ложь; 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Запись.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая Тогда
		
		Если (ВедетсяУчетОсновныхСредств ИЛИ ВедетсяУчетНМА) И НЕ ЗначениеЗаполнено(Запись.МетодНачисленияАмортизацииНУ) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Метод начисления амортизации в налоговом учете'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "МетодНачисленияАмортизацииНУ", "Запись", Отказ);
		КонецЕсли;
		
		Если ВедетсяУчетСпецодеждыСпецоснастки И НЕ ЗначениеЗаполнено(Запись.СпособПогашенияСтоимостиСпецодеждыНУ) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Погашать стоимость спецодежды и спецоснастки'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "СпособПогашенияСтоимостиСпецодеждыНУ", "Запись", Отказ);
		КонецЕсли;
		
		Если ВедетсяПроизводственнаяДеятельность Тогда
			
			ЕстьСчет20 = Запись.ОказаниеУслуг ИЛИ Запись.ВыпускПродукции;
			Если НЕ ЗначениеЗаполнено(Запись.ПорядокСписанияРасходовНаСебестоимостьУслуг) Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Затраты списываются со счета 20 ""Основное производство""'"));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ПорядокСписанияРасходовНаСебестоимостьУслуг", "Запись", Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Запись.ПлательщикЕНВД Тогда
		
		Если Запись.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая Тогда
			
			Если НЕ ЗначениеЗаполнено(Запись.БазаРаспределенияКосвенныхРасходовПоВидамДеятельности) Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'База распределения'"));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "БазаРаспределенияКосвенныхРасходовПоВидамДеятельности", "Запись", Отказ);
			КонецЕсли;
			
		ИначеЕсли Запись.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная Тогда
			
			Если НЕ ЗначениеЗаполнено(Запись.МетодРаспределенияРасходовУСНПоВидамДеятельности) Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Метод распределения'"));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "МетодРаспределенияРасходовУСНПоВидамДеятельности", "Запись", Отказ);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Запись.БазаРаспределенияРасходовУСНПоВидамДеятельности) Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'База распределения'"));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "БазаРаспределенияРасходовУСНПоВидамДеятельности", "Запись", Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

	Если Запись.ПлательщикНДС Тогда
		
		Если Запись.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая Тогда
			
			Если НЕ ЗначениеЗаполнено(Запись.ПорядокРегистрацииСчетовФактурНаАванс) Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Порядок регистрации счетов-фактур на аванс'"));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ПорядокРегистрацииСчетовФактурНаАванс", "Запись", Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Запись.ПрименяетсяУСН Тогда
		
		Если НЕ ЗначениеЗаполнено(Запись.ОбъектНалогообложенияУСН) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Объект налогообложения'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ОбъектНалогообложенияУСН", "Запись", Отказ);
		КонецЕсли;
		
		ПорядокОтраженияАвансаУСНИмяПоля = НСтр("ru = 'Основной порядок отражения авансов от покупателя для целей налогообложения'");
		
		Если НЕ ЗначениеЗаполнено(Запись.ПорядокОтраженияАвансаУСН) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", ПорядокОтраженияАвансаУСНИмяПоля);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "УСНПорядокОтраженияАванса", , Отказ);
		Иначе
			Если (НЕ Запись.ПлательщикЕНВД И Запись.ПорядокОтраженияАвансаУСН = Перечисления.ПорядокОтраженияАвансов.ДоходЕНВД)
			 ИЛИ (НЕ Запись.ПрименяетсяУСНПатент И Запись.ПорядокОтраженияАвансаУСН = Перечисления.ПорядокОтраженияАвансов.ДоходПатент)
			 ИЛИ Запись.ПорядокОтраженияАвансаУСН = Перечисления.ПорядокОтраженияАвансов.ДоходИП Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Корректность", ПорядокОтраженияАвансаУСНИмяПоля);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "УСНПорядокОтраженияАванса", , Отказ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Запись.ПлательщикНДФЛ Тогда
		
		Если НЕ ЗначениеЗаполнено(Запись.ОсновнойВидДеятельности) Тогда
			ТекстСообщения		= ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Вид деятельности'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ОсновнойВидДеятельности", "Запись", Отказ);
		КонецЕсли;
		
		Если Запись.АвансыВключаютсяВДоходыВПериодеПолученияИП Тогда
		
			Если Запись.ВестиУчетПоВидамДеятельностиИП И НЕ ЗначениеЗаполнено(Запись.ВидДеятельностиДоходовПоАвансамИП) Тогда
				ТекстСообщения	= ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Вид деятельности доходов по авансам'"));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "УчетДоходовИП", "Запись", Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ Запись.ВестиУчетПоВидамДеятельностиИП И НеобходимоВестиУчетПоВидамДеятельностиИП(ЭтаФорма) Тогда
			ТекстСообщения	= НСтр("ru = 'Применяется особый порядок налогообложения по отдельным видам деятельности наравне с основным.
				|На закладке ""Доходы и расходы ИП"" необходимо установить флаг ""Книга учета доходов и расходов ведется по нескольким видам деятельности""'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ВестиУчетПоВидамДеятельностиИП", "Запись", Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВедетсяРозничнаяТорговля И НЕ ЗначениеЗаполнено(Запись.СпособОценкиТоваровВРознице) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Способ оценки товаров в рознице'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "СпособОценкиТоваровВРознице", "Запись", Отказ);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеПатента" Тогда
		
		Если Запись.ПрименяетсяУСНПатент И Запись.Организация = Параметр.Владелец Тогда
			ЗаполнитьСписокПатентовНаСервере();
			УправлениеФормой(ЭтаФорма);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

// Общие сведения

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	ЭтоЮрЛицо = ЭтоЮрЛицо(Запись.Организация);
	Если ЭтоЮрЛицо Тогда
		Запись.ПрименяетсяУСНПатент = Ложь;
		Если Запись.НалоговыеКаникулыУСН Тогда
			Запись.НалоговыеКаникулыУСН = Ложь;
			УстановитьСтавкуНалогаУСН();
		КонецЕсли;
		Если Запись.СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.ОсобыйПорядок") Тогда
			Запись.СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.Общая");
			СистемаНалогообложенияПредставление = ПолучитьПредставлениеСистемыНалогообложения(Запись.СистемаНалогообложения);
			СистемаНалогообложенияПриИзмененииНаКлиенте();
		КонецЕсли;
	КонецЕсли;
	
	ПроверкаМетодаФИФО(ЭтаФорма);
	ПредупреждениеОбУстановкеМетодаФИФО();
	
	ОрганизацияПриИзмененииНаСервере();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)

	Запись.УчитыватьПоложительныеСуммовыеРазницыПриНачисленииНДС = Запись.Период < '20111001';
	
	Если Запись.Период < '20110101' Тогда
		Запись.НачислятьНДСПриПередачеНедвижимости = Ложь;
	КонецЕсли;
	
	Если Запись.Период < '20120101' Тогда
		Запись.РаздельныйУчетНДСНаСчете19 = Ложь;
	КонецЕсли;
	
	Если Запись.Период < '20150101' И Запись.НалоговыеКаникулыУСН Тогда
		Запись.НалоговыеКаникулыУСН = Ложь;
		УстановитьСтавкуНалогаУСН();
	КонецЕсли;
	
	ДатаОкончанияДействия = НайтиДатуОкончанияДействия(Запись.Период, Запись.Организация, Параметры.Ключ);
	
	ЗаполнитьСписокВыбораСистемНалогообложения();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СистемаНалогообложенияПредставлениеПриИзменении(Элемент)
	
	Запись.СистемаНалогообложения = ПолучитьСистемуНалогообложения(СистемаНалогообложенияПредставление);
	
	Если СистемаНалогообложенияПредставление = "Патентная" Тогда
		Запись.ПрименяетсяУСНПатент = Истина;
		Запись.ПлательщикЕНВД       = Ложь;
	ИначеЕсли СистемаНалогообложенияПредставление = "ЕНВД" Тогда
		Запись.ПрименяетсяУСНПатент = Ложь;
		Запись.ПлательщикЕНВД       = Истина;
	КонецЕсли;
	
	СистемаНалогообложенияПриИзмененииНаКлиенте();
	
	ПроверкаМетодаФИФО(ЭтаФорма);
	ПредупреждениеОбУстановкеМетодаФИФО();
	
	ПроверкаПорядкаОтраженияАвансаУСН();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

// НДС

&НаКлиенте
Процедура СложныйУчетНДСПриИзменении(Элемент)

	Если Запись.СложныйУчетНДС И Запись.УпрощенныйУчетНДС Тогда
		Запись.УпрощенныйУчетНДС = Ложь;
	КонецЕсли;
	
	Запись.РаздельныйУчетНДСНаСчете19 = ?(Запись.Период < '20120101', Ложь, Запись.СложныйУчетНДС);
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура УпрощенныйУчетНДСПриИзменении(Элемент)

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

// УСН

&НаКлиенте
Процедура НалоговыеКаникулыУСНПриИзменении(Элемент)
	
	УстановитьСтавкуНалогаУСН();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектНалогообложенияУСНПриИзменении(Элемент)

	ОбъектНалогообложенияУСНПриИзмененииНаКлиенте();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СтавкаНалогаУСНПриИзменении(Элемент)
	
	// проверим введенное число
	// неотрицательное значение задать нельзя в силу ограничения типа
	// положительное - проверяем на превышение максимально допустимой ставки для выбранного объекта налогообложения
	ПределСтавки = 15;
	Если Запись.ПрименяетсяУСНДоходы Тогда
		ПределСтавки = 6;
	КонецЕсли;
	
	Если Запись.СтавкаНалогаУСН > ПределСтавки Тогда
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Выбранная ставка не может применяться.
			|Максимально допустимая ставка налога для выбранного объекта налогообложения равна %1 %.'"),
			ПределСтавки);
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Запись.СтавкаНалогаУСН = ТекущаяСтавкаНалогаУСН;
		Возврат;
	Иначе
		ТекущаяСтавкаНалогаУСН = Запись.СтавкаНалогаУСН;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПереходаНаУСНПриИзменении(Элемент)

	Если (ЗначениеЗаполнено(Запись.ДатаПереходаНаУСН)) Тогда
		Запись.ДатаПереходаНаУСН = НачалоГода(Запись.ДатаПереходаНаУСН);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УСНПорядокОтраженияАвансаПриИзменении(Элемент)
	
	Если ТипЗнч(УСНПорядокОтраженияАванса) = Тип("СправочникСсылка.Патенты") Тогда
		
		Если НЕ Запись.ПорядокОтраженияАвансаУСН = ПредопределенноеЗначение("Перечисление.ПорядокОтраженияАвансов.ДоходПатент") Тогда
			Запись.ПорядокОтраженияАвансаУСН	= ПредопределенноеЗначение("Перечисление.ПорядокОтраженияАвансов.ДоходПатент");
		КонецЕсли;
		
		Запись.ПатентУСН	= УСНПорядокОтраженияАванса;
		
	Иначе
		Запись.ПорядокОтраженияАвансаУСН	= УСНПорядокОтраженияАванса;
		Запись.ПатентУСН	= Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Доходы и расходы ИП

&НаКлиенте
Процедура ОсновнойВидДеятельностиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НеобходимоВестиУчетПоВидамДеятельностиИП(ЭтаФорма)  Тогда
		ВестиУчетПоВидамДеятельности = Истина;
	КонецЕсли;
	
	УстановитьВидДеятельностиСПроверкой("ОсновнойВидДеятельности", ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетПоВидамДеятельностиИППриИзменении(Элемент)
	
	Если НЕ Запись.ВестиУчетПоВидамДеятельностиИП
		И НеобходимоВестиУчетПоВидамДеятельностиИП(ЭтаФорма) Тогда
		
		Запись.ОсновнойВидДеятельности	= Неопределено;
		Запись.ВидДеятельностиДоходовПоАвансамИП	= Неопределено;
		
	КонецЕсли;
	
	УстановитьВидДеятельностиДоходовПоАвансамИП();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

// ЕНВД

&НаКлиенте
Процедура ПлательщикЕНВДПриИзменении(Элемент)

	СпециальныйНалоговыйРежимПриИзменении();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

// Патенты

&НаКлиенте
Процедура ПрименяетсяУСНПатентПриИзменении(Элемент)
	
	СпециальныйНалоговыйРежимПриИзменении();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

// Резервы по сомнительным долгам

&НаКлиенте
Процедура УстановитьПараметрыРезервовПоСомнительнымДолгам()
	
	Если Запись.СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.Упрощенная") Тогда
		
		Запись.ФормироватьРезервыПоСомнительнымДолгамНУ = Ложь;
	КонецЕсли;
	
	Если Не ЭтоЮрЛицо Тогда
		
		Запись.ФормироватьРезервыПоСомнительнымДолгамБУ = Ложь;
		Запись.ФормироватьРезервыПоСомнительнымДолгамНУ = Ложь;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура УчетДоходовИП(Команда)

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	ПараметрыФормы.Вставить("ВестиУчетПоВидамДеятельностиИП", Запись.ВестиУчетПоВидамДеятельностиИП);
	ПараметрыФормы.Вставить("АвансыВключаютсяВДоходыВПериодеПолученияИП", Запись.АвансыВключаютсяВДоходыВПериодеПолученияИП);
	ПараметрыФормы.Вставить("ВидДеятельностиДоходовПоАвансамИП", Запись.ВидДеятельностиДоходовПоАвансамИП);
	
	Оповещение = Новый ОписаниеОповещения(
		"ЗакрытиеДополнительнойФормыЗавершение",
		ЭтотОбъект);
	
	ОткрытьФорму("РегистрСведений.УчетнаяПолитикаОрганизаций.Форма.УчетДоходовИП", ПараметрыФормы, ЭтаФорма,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура УчетРасходовИП(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	ПараметрыФормы.Вставить("ПризнаватьРасходыПоОперациямПрошлогоГодаИП", Запись.ПризнаватьРасходыПоОперациямПрошлогоГодаИП);
	ПараметрыФормы.Вставить("ДляПризнанияРасходовТребуетсяПолучениеДоходаИП", Запись.ДляПризнанияРасходовТребуетсяПолучениеДоходаИП);
	
	Оповещение = Новый ОписаниеОповещения(
		"ЗакрытиеДополнительнойФормыЗавершение",
		ЭтотОбъект);
	
	ОткрытьФорму("РегистрСведений.УчетнаяПолитикаОрганизаций.Форма.УчетРасходовИП", ПараметрыФормы, ЭтаФорма,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокПризнанияРасходовУСН(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	ПараметрыФормы.Вставить("ПорядокПризнанияМатериальныхРасходов", Запись.ПорядокПризнанияМатериальныхРасходов);
	ПараметрыФормы.Вставить("ПорядокПризнанияРасходовПоТоварам", Запись.ПорядокПризнанияРасходовПоТоварам);
	ПараметрыФормы.Вставить("ПорядокПризнанияРасходовПоНДС", Запись.ПорядокПризнанияРасходовПоНДС);
	ПараметрыФормы.Вставить("ПорядокПризнанияДопРасходов", Запись.ПорядокПризнанияДопРасходов);
	ПараметрыФормы.Вставить("ПорядокПризнанияТаможенныхПлатежей", Запись.ПорядокПризнанияТаможенныхПлатежей);
	
	Оповещение = Новый ОписаниеОповещения(
		"ЗакрытиеДополнительнойФормыЗавершение",
		ЭтотОбъект);
	
	ОткрытьФорму("РегистрСведений.УчетнаяПолитикаОрганизаций.Форма.ПорядокПризнанияРасходовУСН", ПараметрыФормы, ЭтаФорма,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура КосвенныеРасходы(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	ПараметрыФормы.Вставить("ГоловнаяОрганизация", ГоловнаяОрганизация);
	ПараметрыФормы.Вставить("ДиректКостинг", Запись.ДиректКостинг);
	
	Оповещение = Новый ОписаниеОповещения(
		"ЗакрытиеДополнительнойФормыЗавершение",
		ЭтотОбъект);
	
	ОткрытьФорму("РегистрСведений.УчетнаяПолитикаОрганизаций.Форма.КосвенныеРасходы", ПараметрыФормы, ЭтаФорма,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура Дополнительно(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	ПараметрыФормы.Вставить("Организация", Запись.Организация);
	ПараметрыФормы.Вставить("РассчитыватьСебестоимостьПолуфабрикатов", Запись.РассчитыватьСебестоимостьПолуфабрикатов);
	ПараметрыФормы.Вставить("РассчитыватьСебестоимостьУслугСобственнымПодразделениям", Запись.РассчитыватьСебестоимостьУслугСобственнымПодразделениям);
	ПараметрыФормы.Вставить("СпособРасчетаСебестоимостиПроизводства", Запись.СпособРасчетаСебестоимостиПроизводства);
	ПараметрыФормы.Вставить("СпособУчетаВыпускаГотовойПродукции", Запись.СпособУчетаВыпускаГотовойПродукции);
	
	Оповещение = Новый ОписаниеОповещения(
		"ЗакрытиеДополнительнойФормыЗавершение",
		ЭтотОбъект);
	
	ОткрытьФорму("РегистрСведений.УчетнаяПолитикаОрганизаций.Форма.Дополнительно", ПараметрыФормы, ЭтаФорма,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура МетодыОпределенияПрямыхРасходовПроизводстваНУ(Команда)

	Если Запись.ИсходныйКлючЗаписи.Пустой() Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросРедактированиеСпискаПрямыхРасходовЗаписьДанныхЗавершение", ЭтотОбъект);
		ПоказатьВопрос(
			Оповещение, 
			НСтр("ru = 'Данные еще не записаны.
						|Редактирование списка прямых расходов возможно только после записи данных.
						|Данные будут записаны.'"), 
			РежимДиалогаВопрос.ОКОтмена, 
			, // Таймаут
			КодВозвратаДиалога.ОК, 
			НСтр("ru = 'Учетная политика организации'"));
		Возврат;
	КонецЕсли;
	
	ВопросРедактированиеСпискаПрямыхРасходовЗаписьДанныхЗавершение(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросРедактированиеСпискаПрямыхРасходовЗаписьДанныхЗавершение(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ИсточникКопированияСпискаПрямыхРасходов = Неопределено; // Пользователь посмотрел в этот список и должен сам принять решение, что с ним делать
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Записать();
	КонецЕсли;
	
	Если ЕстьПравоРедактированияСпискаПрямыхРасходов Тогда
	
		НаличиеСписков = НаличиеСписковПрямыхРасходов(ГоловнаяОрганизация, Запись.Период);
		ЗаголовокДиалогаВопроса = НСтр("ru = 'Методы определения прямых расходов НУ'");

		Если Не НаличиеСписков.ЕстьСписокТекущегоПериода И Не НаличиеСписков.ЕстьСписокПрошлогоПериода Тогда

			ТекстВопроса = НСтр("ru = 'Список пуст.
			|
			|Создать записи, соответствующие рекомендациям ст.318 НК РФ?'");
			Оповещение = Новый ОписаниеОповещения("ВопросСоздатьЗаписиСоответствующиеРекомендациямНКЗавершение", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, ЗаголовокДиалогаВопроса);
			Возврат;

		ИначеЕсли Не НаличиеСписков.ЕстьСписокТекущегоПериода И НаличиеСписков.ЕстьСписокПрошлогоПериода Тогда

			ТекстВопроса = НСтр("ru = 'Список пуст.		
			|
			| Скопировать записи прошлого периода?'");
			Оповещение = Новый ОписаниеОповещения("ВопросСкопироватьСписокПрошлогоПериодаЗавершение", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, ЗаголовокДиалогаВопроса);
			Возврат;

		КонецЕсли;
		
	КонецЕсли;

	МетодыОпределенияПрямыхРасходовПроизводстваНУЗавершение(Ложь, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеВидыДеятельности(Команда)
	
	ОткрытьФорму("Справочник.ВидыДеятельностиПредпринимателей.ФормаСписка", , ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВстречныйВыпускПродукцииУслуг(Команда)
	
	Если Запись.СпособРасчетаСебестоимостиПроизводства = ПредопределенноеЗначение("Перечисление.СпособыРасчетаСебестоимостиПродукции.ПоПеределам") Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Новый Структура("Организация", Запись.Организация));
		ОткрытьФорму("РегистрСведений.ВстречныйВыпускПродукцииУслуг.ФормаСписка", ПараметрыФормы);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НоменклатурныеГруппыРеализацииПродукцииУслуг(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура("Организация", ГоловнаяОрганизация));
	ОткрытьФорму("РегистрСведений.НоменклатурныеГруппыРеализацииПродукцииУслуг.ФормаСписка", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПатентыОрганизации(Команда)
	
	ПараметрыФормы  = Новый Структура("Отбор", Новый Структура("Владелец", Запись.Организация));
	
	ОткрытьФорму("Справочник.Патенты.ФормаСписка", ПараметрыФормы, ЭтаФорма, Запись.Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьПриказ(Команда)
	
	ВыполнитьКомандуПечати("Приказ");
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьУчетнаяПолитикаБУ(Команда)
	
	ВыполнитьКомандуПечати("УчетнаяПолитикаБУ");
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьПланСчетов(Команда)
	
	ВыполнитьКомандуПечати("ПланСчетов");
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьПервичныеДокументы(Команда)
	
	ВыполнитьКомандуПечати("ПервичныеДокументы");
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьРегистрыБУ(Команда)
	
	ВыполнитьКомандуПечати("РегистрыБУ");
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьУчетнаяПолитикаНУ(Команда)
	
	ВыполнитьКомандуПечати("УчетнаяПолитикаНУ");
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьРегистрыНУ(Команда)
	
	ВыполнитьКомандуПечати("РегистрыНУ");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	Если ЗначениеЗаполнено(Запись.Организация)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Запись.Организация, "ОбособленноеПодразделение") Тогда
		ЭтаФорма.ТолькоПросмотр = Истина;
		Элементы.Организация.РежимВыбораИзСписка = Ложь;
		Элементы.Организация.КнопкаВыбора        = Ложь;
	КонецЕсли;
	
	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь();
	ЕстьПравоРедактированияСпискаПрямыхРасходов = ПравоДоступа("Редактирование", Метаданные.РегистрыСведений.МетодыОпределенияПрямыхРасходовПроизводстваВНУ);
	
	ЭтоЮрЛицо = ЭтоЮрЛицо(Запись.Организация);
	
	ГоловныеОрганизации = БухгалтерскийУчетПереопределяемый.ПолучитьСписокГоловныхОрганизаций();
	Для каждого ЭлементСписка Из ГоловныеОрганизации Цикл
		Элементы.Организация.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;

	ЗаполнитьРеквизитыФормы();
	
	Параметры.Свойство("ПараметрыОткрытия", ПараметрыОткрытия);
	
	СистемаНалогообложенияПредставление = ПолучитьПредставлениеСистемыНалогообложения(
		Запись.СистемаНалогообложения, Запись.ПрименяетсяУСНПатент, Запись.ПлательщикЕНВД);
	
	ЗаполнитьСписокВыбораСистемНалогообложения();
	
	ВедетсяПроизводственнаяДеятельность = ПолучитьФункциональнуюОпцию("ВедетсяПроизводственнаяДеятельность");
	ВедетсяРозничнаяТорговля = ПолучитьФункциональнуюОпцию("ВедетсяРозничнаяТорговля");
	ВедетсяКомиссионнаяТорговля = ПолучитьФункциональнуюОпцию("ОсуществляетсяРеализацияТоваровУслугКомитентов");
	ВедетсяУчетНМА = ПолучитьФункциональнуюОпцию("ВедетсяУчетНМА");
	ВедетсяУчетОсновныхСредств = ПолучитьФункциональнуюОпцию("ВедетсяУчетОсновныхСредств");
	ВедетсяУчетСпецодеждыСпецоснастки = ПолучитьФункциональнуюОпцию("ВедетсяУчетСпецодеждыСпецоснастки");
	
	ЗаполнитьСписокПатентовНаСервере();
	
	ГоловнаяОрганизация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Запись.Организация, "ГоловнаяОрганизация");
	
	ФормироватьРезервыПоСомнительнымДолгам = Запись.ФормироватьРезервыПоСомнительнымДолгамБУ ИЛИ Запись.ФормироватьРезервыПоСомнительнымДолгамНУ;

	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Запись = Форма.Запись;
	
	// Видимость закладок
	
	Элементы.ГруппаНалогНаПрибыль.Видимость = Запись.ПлательщикНалогаНаПрибыль И Форма.ЭтоЮрЛицо;
	Элементы.ГруппаУСН.Видимость = Запись.ПрименяетсяУСН;

	Элементы.ГруппаНДС.Видимость = Запись.СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.Общая");
	Элементы.ГруппаДоходыИРасходыИП.Видимость = НЕ Форма.ЭтоЮрЛицо
		И Запись.СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.Общая");
	Элементы.ГруппаПатентыЕНВД.Видимость = Форма.СистемаНалогообложенияПредставление <> "ЕНВД";
	Элементы.ГруппаСтраховыеВзносыИП.Видимость = НЕ Форма.ЭтоЮрЛицо;
	Элементы.ГруппаРезервы.Видимость = Форма.ЭтоЮрЛицо;
	Элементы.УСНПорядокОтраженияАванса.Видимость = Запись.ПрименяетсяУСН ИЛИ Запись.ПрименяетсяУСНПатент;
	Элементы.НадписьФормироватьРезервыПоСомнительнымДолгам.Видимость = Форма.ЭтоЮрЛицо;
	Элементы.СпособОценкиТоваровВРознице.Видимость = Форма.ВедетсяРозничнаяТорговля;
	Элементы.НоменклатурныеГруппыРеализацииПродукцииУслуг.Видимость = 
		// Значение функциональной опции ВедетсяПроизводственнаяДеятельность
		Форма.ВедетсяПроизводственнаяДеятельность 
		// И будущее значение функциональной опции ПлательщикНалогаНаПрибыль
		И Форма.ЭтоЮрЛицо 
		И Запись.СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.Общая"); 
		
	// Налог на прибыль
	Если Запись.Период < '20150101' Тогда
		Запись.СпособПогашенияСтоимостиСпецодеждыНУ = ПредопределенноеЗначение(
			"Перечисление.СпособыПогашенияСтоимостиНУ.ПриПередачеВЭксплуатацию");
	КонецЕсли;
	Элементы.СпособПогашенияСтоимостиСпецодеждыНУ.ТолькоПросмотр = Запись.Период < '20150101';
		
	// НДС
	Элементы.ГруппаСтраницыНДС.Доступность = Запись.ПлательщикНДС;
	Элементы.ГруппаСтраницыНДС.ТекущаяСтраница = ?(Запись.Период < '20120101', Элементы.ГруппаНДСДо2012, Элементы.ГруппаНДС2012);
	Элементы.УпрощенныйУчетНДС.Доступность = НЕ Запись.СложныйУчетНДС;
	Элементы.УчитыватьПоложительныеСуммовыеРазницыПриНачисленииНДС.Доступность = НЕ Запись.УпрощенныйУчетНДС И Запись.Период < '20111001';
	Элементы.НачислятьНДСПриПередачеНедвижимостиДо2012.Доступность = Запись.Период >= '20110101';
	Элементы.РаздельныйУчетНДСНаСчете19.Доступность = Запись.СложныйУчетНДС;
	Элементы.НачислятьНДСПриПередачеНедвижимости.Видимость = Запись.Период < '20140701';
	Элементы.ПрименяетсяОсвобождениеОтУплатыНДС.Видимость = Запись.Период >= '20141001';
	
	// УСН
	Элементы.НалоговыеКаникулыУСН.Видимость = Не Форма.ЭтоЮрЛицо И Запись.Период >= '20150101';
	
	Элементы.СтавкаНалогаУСН.Доступность           = НЕ Запись.НалоговыеКаникулыУСН;
	Элементы.ДекорацияПроцентНалогаУСН.Доступность = НЕ Запись.НалоговыеКаникулыУСН;
	
	Элементы.СтраницыОбъектНалогообложенияУСН.ТекущаяСтраница = ?(Запись.ПрименяетсяУСНДоходыМинусРасходы,
		Элементы.СтраницаОбъектНалогообложенияУСНДоходыМинусРасходы, Элементы.СтраницаОбъектНалогообложенияУСНДоходы);
	
	// Доходы и расходы ИП
	Элементы.ВсеВидыДеятельности.Доступность = Запись.ВестиУчетПоВидамДеятельностиИП;
	
	// Патенты и ЕНВД
	Элементы.ГруппаПатенты.Видимость = НЕ Форма.ЭтоЮрЛицо И Форма.СистемаНалогообложенияПредставление <> "ЕНВД";
	
	Элементы.ГруппаПрименяетсяУСНПатентПатентнаяСистема.Видимость = Форма.СистемаНалогообложенияПредставление <> "Патентная"
		И Форма.СистемаНалогообложенияПредставление <> "ЕНВД";
		
	Элементы.ПлательщикЕНВД.Видимость = Форма.СистемаНалогообложенияПредставление <> "Патентная";
	
	Если Форма.ЭтоЮрЛицо ИЛИ Форма.СистемаНалогообложенияПредставление = "ЕНВД" Тогда
		Элементы.ГруппаПатентыЕНВД.Заголовок = НСтр("ru = 'ЕНВД'");
	ИначеЕсли НЕ Форма.ЭтоЮрЛицо И Форма.СистемаНалогообложенияПредставление = "Патентная" Тогда
		Элементы.ГруппаПатентыЕНВД.Заголовок = НСтр("ru = 'Патенты'");
	Иначе
		Элементы.ГруппаПатентыЕНВД.Заголовок = НСтр("ru = 'Патенты и ЕНВД'");
	КонецЕсли;
	
	Элементы.ПлательщикЕНВД.Заголовок = ?(Форма.ЭтоЮрЛицо,
		НСтр("ru = 'Организация является плательщиком единого налога на вмененный доход (ЕНВД)'"),
		НСтр("ru = 'Предприниматель является плательщиком единого налога на вмененный доход (ЕНВД)'"));
		
	Элементы.РозничнаяТорговляОблагаетсяЕНВД.Заголовок = ?(Форма.ЭтоЮрЛицо,
		НСтр("ru = 'Розничная торговля переведена на уплату ЕНВД'"),
		НСтр("ru = 'Розничная торговля переведена на патентную систему или уплату ЕНВД'"));
		
	Если Форма.ДатаОкончанияДействия < '20130101' Тогда
		Элементы.ГруппаПрименяетсяУСНПатентПатентнаяСистема.ТекущаяСтраница = Элементы.ГруппаПрименяетсяУСНПатент;
	Иначе
		Элементы.ГруппаПрименяетсяУСНПатентПатентнаяСистема.ТекущаяСтраница = Элементы.ГруппаПрименяетсяПатентнаяСистема;
	КонецЕсли;
	Элементы.ПатентыОрганизации.Доступность		= Запись.ПрименяетсяУСНПатент;
	
	Элементы.ГруппаСтраницыРозничнаяТорговляОблагаетсяЕНВД.ТекущаяСтраница	= 
		?(Запись.СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.ОсобыйПорядок"),
		Элементы.ГруппаРозничнаяТорговляВсегдаОблагаетсяЕНВД,
		Элементы.ГруппаВыборРозничнаяТорговляОблагаетсяЕНВД);
	
	Элементы.РозничнаяТорговляОблагаетсяЕНВД.Доступность = Форма.ВедетсяРозничнаяТорговля
		И (Запись.ПрименяетсяУСНПатент ИЛИ Запись.ПлательщикЕНВД);
		
	Элементы.БазаРаспределенияКосвенныхРасходовПоВидамДеятельности.Доступность = Запись.ПрименяетсяУСНПатент ИЛИ Запись.ПлательщикЕНВД;
	Элементы.МетодРаспределенияУСН.Доступность = Запись.ПрименяетсяУСНПатент ИЛИ Запись.ПлательщикЕНВД;
	Элементы.БазаРаспределенияУСН.Доступность = Запись.ПрименяетсяУСНПатент ИЛИ Запись.ПлательщикЕНВД;
	
	Если Запись.СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.Общая") Тогда
		Элементы.ГруппаСтраницыРаспределениеРасходовЕНВД.ТекущаяСтраница = Элементы.ГруппаРаспределениеРасходовНалогНаПрибыль;
	ИначеЕсли Запись.СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.Упрощенная") Тогда
		Элементы.ГруппаСтраницыРаспределениеРасходовЕНВД.ТекущаяСтраница = Элементы.ГруппаРаспределениеРасходовУСН;
	Иначе
		Элементы.ГруппаСтраницыРаспределениеРасходовЕНВД.ТекущаяСтраница = Элементы.ГруппаРаспределениеРасходовНеРаспределяются;
	КонецЕсли;
	
	// Расчеты с контрагентами
	ЗаполнитьСписокВыбораОтраженияАвансовУСН(Форма);
	
	ФормироватьРезервыПоСомнительнымДолгамВНУВидимость           = Форма.ЭтоЮрЛицо
		И (Запись.СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.Общая"));
	Элементы.ФормироватьРезервыПоСомнительнымДолгамВНУ.Видимость = ФормироватьРезервыПоСомнительнымДолгамВНУВидимость;
	
	// Запасы
	ДоступностьМетодаПоСредней = НЕ ((Запись.СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.Упрощенная") И Запись.ОбъектНалогообложенияУСН = ПредопределенноеЗначение("Перечисление.ОбъектыНалогообложенияПоУСН.ДоходыМинусРасходы"))
		ИЛИ (НЕ Форма.ЭтоЮрЛицо И Запись.СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.Общая")));
	Элементы.СпособОценкиМПЗ.Доступность = ДоступностьМетодаПоСредней;
	
	Если Запись.СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.Упрощенная")
		И Запись.ОбъектНалогообложенияУСН = ПредопределенноеЗначение("Перечисление.ОбъектыНалогообложенияПоУСН.ДоходыМинусРасходы") Тогда
		Форма.ТекстОНеобходимостиФИФО =
			"При применении упрощенной системы налогообложения
			|с объектом налогообложения ""Доходы минус расходы""
			|оценка стоимости МПЗ при выбытии возможна только методом ФИФО";

	ИначеЕсли НЕ Форма.ЭтоЮрЛицо И Запись.СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.Общая") Тогда
		Форма.ТекстОНеобходимостиФИФО =
			"При применении индивидуальным предпринимателем
			|общей системы налогообложения
			|оценка стоимости МПЗ при выбытии возможна только методом ФИФО";

	КонецЕсли;
	
	// Производство
	
	Элементы.СписаниеЗатрат.Доступность = Форма.Запись.ОказаниеУслуг;
	
	ЕстьСчет20 = Форма.Запись.ОказаниеУслуг Или Форма.Запись.ВыпускПродукции;
	
	Элементы.КосвенныеРасходы.Доступность = ЕстьСчет20;
	Элементы.Дополнительно.Доступность = ЕстьСчет20;
	
	Элементы.СписаниеЗатрат.АвтоОтметкаНезаполненного = ЕстьСчет20;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ЗаполнитьСписокВыбораСистемНалогообложения();
	ЗаполнитьСписокПатентовНаСервере();
	ГоловнаяОрганизация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Запись.Организация, "ГоловнаяОрганизация");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоЮрЛицо(Организация)
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ЭтоЮрЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ЮридическоеФизическоеЛицо")
			= Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	Иначе
		ЭтоЮрЛицо = Истина;
	КонецЕсли;
	
	Возврат ЭтоЮрЛицо;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьДвиженияЗаПериод(Знач ДатаНач, Знач ДатаКон, Знач Организация)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",     ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон",     ДатаКон);
	Запрос.УстановитьПараметр("Организация", Организация);

	Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ХозрасчетныйОбороты.Счет) КАК Счет
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, , , , Организация = &Организация, , ) КАК ХозрасчетныйОбороты";

	Результат = Запрос.Выполнить().Выбрать();
	Результат.Следующий();

	Возврат НЕ Результат.Счет = 0;

КонецФункции

&НаСервереБезКонтекста
Функция НайтиДатуОкончанияДействия(Знач ТекПериод, Знач ТекОрганизация, Знач КлючФормы)

	ДатаОкончания = ТекПериод;

	УчетнаяПолитикаВсехОрганизаций = ОбщегоНазначенияБПВызовСервера.ЗаполнениеУчетнойПолитики();
	
	УчетнаяПолитикаОрганизации = УчетнаяПолитикаВсехОрганизаций.Строки.Найти(ТекОрганизация, "Организация");
	Если УчетнаяПолитикаОрганизации <> Неопределено Тогда
		Для каждого СтрокаУчетнойПолитики Из УчетнаяПолитикаОрганизации.Строки Цикл
			Если СтрокаУчетнойПолитики.Период = КлючФормы.Период Тогда
				Продолжить;
			КонецЕсли;
			Если СтрокаУчетнойПолитики.Период > ДатаОкончания Тогда
				ДатаОкончания = СтрокаУчетнойПолитики.Период - 1;
				Возврат ДатаОкончания;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	ДатаОкончания = ?(ДатаОкончания = ТекПериод, КонецГода(ТекущаяДата()), КонецГода(ДатаОкончания));
	ДатаОкончания = ?(ТекПериод > ТекущаяДата(), КонецГода(ТекПериод), КонецГода(ДатаОкончания));

	Возврат ДатаОкончания;

КонецФункции

&НаСервере
Процедура УстановитьПараметрыРасходовУСН(ТекущийОбъект)

	Если ТекущийОбъект.СистемаНалогообложения <> Перечисления.СистемыНалогообложения.Упрощенная Тогда
		Если ТекущийОбъект.ПорядокПризнанияМатериальныхРасходов <> Перечисления.ПорядокПризнанияМатериальныхРасходов.ПустаяСсылка() Тогда
			ТекущийОбъект.ПорядокПризнанияМатериальныхРасходов = Перечисления.ПорядокПризнанияМатериальныхРасходов.ПустаяСсылка();
		КонецЕсли;
		Если ТекущийОбъект.ПорядокПризнанияРасходовПоТоварам <> Перечисления.ПорядокПризнанияРасходовПоТоварам.ПустаяСсылка() Тогда
			ТекущийОбъект.ПорядокПризнанияРасходовПоТоварам = Перечисления.ПорядокПризнанияРасходовПоТоварам.ПустаяСсылка();
		КонецЕсли;
		Если ТекущийОбъект.ПорядокПризнанияРасходовПоНДС <> Перечисления.ПорядокПризнанияРасходовПоНДС.ПустаяСсылка() Тогда
			ТекущийОбъект.ПорядокПризнанияРасходовПоНДС = Перечисления.ПорядокПризнанияРасходовПоНДС.ПустаяСсылка();
		КонецЕсли;
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыФормы()

	ДатаОкончанияДействия = НайтиДатуОкончанияДействия(Запись.Период, Запись.Организация, Параметры.Ключ);
	ДиректКостинг = Запись.ДиректКостинг;
	
	ТекущаяСтавкаНалогаУСН = Запись.СтавкаНалогаУСН;
	
	Элементы.ОсновнойСчетУчетаЗатратРасширеннаяПодсказка.Заголовок = ОсновнойСчетУчетаЗатратПриИзмененииНаСервере(Запись.ОсновнойСчетУчетаЗатрат);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверкаМетодаФИФО(Форма)
	
	Запись = Форма.Запись;

	Форма.ТребуетсяФИФО = Ложь;

	Если Запись.СпособОценкиМПЗ = ПредопределенноеЗначение("Перечисление.СпособыОценки.ФИФО") Тогда
		Возврат;
	КонецЕсли;

	Форма.ТребуетсяФИФО = (Запись.СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.Упрощенная")
		И Запись.ОбъектНалогообложенияУСН = ПредопределенноеЗначение("Перечисление.ОбъектыНалогообложенияПоУСН.ДоходыМинусРасходы"))
		ИЛИ (НЕ Форма.ЭтоЮрЛицо И Запись.СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.Общая"));

	Если Форма.ТребуетсяФИФО Тогда
		Запись.СпособОценкиМПЗ = ПредопределенноеЗначение("Перечисление.СпособыОценки.ФИФО");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПредупреждениеОбУстановкеМетодаФИФО()

	Если ТребуетсяФИФО Тогда
		УправлениеФормой(ЭтаФорма);	// Обновление текста предупреждения
		ПоказатьПредупреждение( , ТекстОНеобходимостиФИФО);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция НаличиеСписковПрямыхРасходов(Организация, Период)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПериодДействия", НачалоГода(Период));
	Запрос.УстановитьПараметр("ПрошлыйПериодДействия", НачалоГода(НачалоГода(Период) - 1));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	МетодыОпределенияПрямыхРасходовПроизводстваВНУ.ПериодДействия,
	|	МетодыОпределенияПрямыхРасходовПроизводстваВНУ.Организация
	|ИЗ
	|	РегистрСведений.МетодыОпределенияПрямыхРасходовПроизводстваВНУ КАК МетодыОпределенияПрямыхРасходовПроизводстваВНУ
	|ГДЕ
	|	МетодыОпределенияПрямыхРасходовПроизводстваВНУ.ПериодДействия = &ПериодДействия
	|	И МетодыОпределенияПрямыхРасходовПроизводстваВНУ.Организация = &Организация
	|
	|;
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	МетодыОпределенияПрямыхРасходовПроизводстваВНУ.ПериодДействия,
	|	МетодыОпределенияПрямыхРасходовПроизводстваВНУ.Организация
	|ИЗ
	|	РегистрСведений.МетодыОпределенияПрямыхРасходовПроизводстваВНУ КАК МетодыОпределенияПрямыхРасходовПроизводстваВНУ
	|ГДЕ
	|	МетодыОпределенияПрямыхРасходовПроизводстваВНУ.ПериодДействия = &ПрошлыйПериодДействия
	|	И МетодыОпределенияПрямыхРасходовПроизводстваВНУ.Организация = &Организация
	|
	|";

	РезультатыЗапроса = Запрос.ВыполнитьПакет();

	НаличиеСписков = Новый Структура();
	НаличиеСписков.Вставить("ЕстьСписокТекущегоПериода", НЕ РезультатыЗапроса[0].Пустой());
	НаличиеСписков.Вставить("ЕстьСписокПрошлогоПериода", НЕ РезультатыЗапроса[1].Пустой());

	Возврат НаличиеСписков;

КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьСписокПрямыхРасходов(Организация, Период, Скопировать = Неопределено)
	
	РегистрыСведений.МетодыОпределенияПрямыхРасходовПроизводстваВНУ.Настроить(
		Организация,
		НачалоГода(Период),
		Скопировать);
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьСписокПрямыхРасходовПриЗаписи()
	
	Если ИсточникКопированияСпискаПрямыхРасходов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСписокПрямыхРасходов(Запись.Организация, Запись.Период);
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидДеятельностиСПроверкой(ИмяРесурса, ВыбранноеЗначение, СтандартнаяОбработка)
	Перем ХарактерДеятельности;
	
	СтандартнаяОбработка = Ложь;
	Модифицированность   = Истина;
	
	Если НЕ Запись.ПлательщикЕНВД Тогда
		
		ХарактерДеятельности = ХарактерДеятельности(ВыбранноеЗначение);
		
		Если ХарактерДеятельности = ПредопределенноеЗначение("Перечисление.ХарактерДеятельности.РозничнаяТорговляЕНВД")
			ИЛИ ХарактерДеятельности = ПредопределенноеЗначение("Перечисление.ХарактерДеятельности.УслугиЕНВД") Тогда
			
			ТекстВопроса = НСтр("ru = 'Выбран вид деятельности облагаемый ЕНВД.
				|Включить учет ЕНВД в настройках учетной политики?'");
							
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ИмяРесурса", ИмяРесурса);
			ДополнительныеПараметры.Вставить("ВыбранноеЗначение", ВыбранноеЗначение);
				
			Оповещение = Новый ОписаниеОповещения("ВопросВключитьУчетЕНВДЗавершение", ЭтотОбъект, ДополнительныеПараметры);	
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
			Возврат;
	
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Запись.ПрименяетсяУСНПатент Тогда
		
		ХарактерДеятельности = ХарактерДеятельности(ВыбранноеЗначение);
		
		Если ХарактерДеятельности = ПредопределенноеЗначение("Перечисление.ХарактерДеятельности.ВсяДеятельностьНаПатенте") Тогда
			
			Если ДатаОкончанияДействия < '20130101' Тогда
				ТестВопроса = НСтр("ru = 'Выбран вид деятельности, относящийся к УСН на патенте.
					|Включить применение УСН на основе патента в настройках учетной политики?'");
			Иначе
				ТестВопроса = НСтр("ru = 'Выбран вид деятельности, в отношении которой применяется патентная система.
					|Включить применение патентной системы налогообложения настройках учетной политики?'");
			КонецЕсли;
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ИмяРесурса", ИмяРесурса);
			ДополнительныеПараметры.Вставить("ВыбранноеЗначение", ВыбранноеЗначение);
			
			Оповещение = Новый ОписаниеОповещения("ВопросВключитьПрименениеПатентнойСистемыЗавершение", ЭтотОбъект, ДополнительныеПараметры);	
			ПоказатьВопрос(Оповещение, ТестВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запись[ИмяРесурса] = ВыбранноеЗначение;
	
	Если ИмяРесурса = "ОсновнойВидДеятельности" Тогда
		УстановитьВидДеятельностиДоходовПоАвансамИП();
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросВключитьУчетЕНВДЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Запись.ПлательщикЕНВД	= Истина;
		Запись.РозничнаяТорговляОблагаетсяЕНВД	= Запись.ПлательщикЕНВД И ВедетсяРозничнаяТорговля;
		
		ИмяРесурса 		  = ДополнительныеПараметры.ИмяРесурса;
		ВыбранноеЗначение = ДополнительныеПараметры.ВыбранноеЗначение;
		
		Запись[ИмяРесурса]	= ВыбранноеЗначение;
	
		Если ИмяРесурса = "ОсновнойВидДеятельности" Тогда
			УстановитьВидДеятельностиДоходовПоАвансамИП();
		КонецЕсли;
	
		УправлениеФормой(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросВключитьПрименениеПатентнойСистемыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Запись.ПрименяетсяУСНПатент	= Истина;
		
		ИмяРесурса 		  = ДополнительныеПараметры.ИмяРесурса;
		ВыбранноеЗначение = ДополнительныеПараметры.ВыбранноеЗначение;
		
		Запись[ИмяРесурса]	= ВыбранноеЗначение;
	
		Если ИмяРесурса = "ОсновнойВидДеятельности" Тогда
			УстановитьВидДеятельностиДоходовПоАвансамИП();
		КонецЕсли;
	
		УправлениеФормой(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВидовДеятельностиИП()
	
	Если НЕ Запись.ПлательщикНДФЛ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Запись.ПлательщикЕНВД И НЕ Запись.ПрименяетсяУСНПатент Тогда
		Возврат;
	КонецЕсли;
	
	ХарактерыДеятельности	= ПолучитьХарактерыВидовДеятельностиИП(Запись.ОсновнойВидДеятельности, Запись.ВидДеятельностиДоходовПоАвансамИП);
	
	Если НЕ Запись.ПлательщикЕНВД Тогда
		
		Если ХарактерыДеятельности.ОсновнойХарактерДеятельности = ПредопределенноеЗначение("Перечисление.ХарактерДеятельности.РозничнаяТорговляЕНВД")
			ИЛИ ХарактерыДеятельности.ОсновнойХарактерДеятельности = ПредопределенноеЗначение("Перечисление.ХарактерДеятельности.УслугиЕНВД") Тогда
			
			Модифицированность	= Истина;
			
			Запись.ОсновнойВидДеятельности	= Неопределено;
			
			ТекстСообщения = НСтр("ru = 'На закладке ""Доходы и расходы ИП"" очищено поле ""Вид деятельности (основной)""'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
	
		Если ХарактерыДеятельности.ХарактерДеятельностиДоходовПоАвансамИП = ПредопределенноеЗначение("Перечисление.ХарактерДеятельности.РозничнаяТорговляЕНВД")
			ИЛИ ХарактерыДеятельности.ХарактерДеятельностиДоходовПоАвансамИП = ПредопределенноеЗначение("Перечисление.ХарактерДеятельности.УслугиЕНВД") Тогда
			
			Модифицированность	= Истина;
			
			Запись.ВидДеятельностиДоходовПоАвансамИП	= Запись.ОсновнойВидДеятельности;
			
			ТекстСообщения = НСтр("ru = 'На закладке ""Доходы и расходы ИП"" изменено поле ""Вид деятельности доходов по авансам""'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Запись.ПрименяетсяУСНПатент Тогда
	
		Если ХарактерыДеятельности.ОсновнойХарактерДеятельности = ПредопределенноеЗначение("Перечисление.ХарактерДеятельности.ВсяДеятельностьНаПатенте") Тогда
			
			Модифицированность	= Истина;
			
			Запись.ОсновнойВидДеятельности	= Неопределено;
			
			ТекстСообщения = НСтр("ru = 'На закладке ""Доходы и расходы ИП"" очищено поле ""Вид деятельности (основной)""'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
	
		Если ХарактерыДеятельности.ХарактерДеятельностиДоходовПоАвансамИП = ПредопределенноеЗначение("Перечисление.ХарактерДеятельности.ВсяДеятельностьНаПатенте") Тогда
			
			Модифицированность	= Истина;
			
			Запись.ВидДеятельностиДоходовПоАвансамИП	= Запись.ОсновнойВидДеятельности;
			
			ТекстСообщения = НСтр("ru = 'На закладке ""Доходы и расходы ИП"" изменено поле ""Вид деятельности доходов по авансам""'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьХарактерыВидовДеятельностиИП(ОсновнойВидДеятельности, ВидДеятельностиДоходовПоАвансамИП)
	
	ХарактерыДеятельности	= Новый Структура;
	ХарактерыДеятельности.Вставить("ОсновнойХарактерДеятельности",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОсновнойВидДеятельности, "ХарактерДеятельности"));
	ХарактерыДеятельности.Вставить("ХарактерДеятельностиДоходовПоАвансамИП",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДеятельностиДоходовПоАвансамИП, "ХарактерДеятельности"));
		
	Возврат ХарактерыДеятельности;
	
КонецФункции

&НаКлиенте
Процедура УстановитьВидДеятельностиДоходовПоАвансамИП()
	
	Если НЕ Запись.АвансыВключаютсяВДоходыВПериодеПолученияИП Тогда
		
		Запись.ВидДеятельностиДоходовПоАвансамИП	= Неопределено;
		
	ИначеЕсли НЕ Запись.ВестиУчетПоВидамДеятельностиИП
		ИЛИ НЕ ЗначениеЗаполнено(Запись.ВидДеятельностиДоходовПоАвансамИП) Тогда
		
		Запись.ВидДеятельностиДоходовПоАвансамИП	= Запись.ОсновнойВидДеятельности;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НеобходимоВестиУчетПоВидамДеятельностиИП(Форма)
	
	Запись	= Форма.Запись;
	
	Если НЕ ЗначениеЗаполнено(Запись.ОсновнойВидДеятельности) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ХарактерДеятельности = ХарактерДеятельности(Запись.ОсновнойВидДеятельности);
	
	Если Запись.ПлательщикЕНВД
		И НЕ ХарактерДеятельности = ПредопределенноеЗначение("Перечисление.ХарактерДеятельности.РозничнаяТорговляЕНВД")
		И НЕ ХарактерДеятельности = ПредопределенноеЗначение("Перечисление.ХарактерДеятельности.УслугиЕНВД") Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если Запись.ПрименяетсяУСНПатент
		И НЕ ХарактерДеятельности = ПредопределенноеЗначение("Перечисление.ХарактерДеятельности.ВсяДеятельностьНаПатенте") Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если Запись.ПлательщикЕНВД И Запись.ПрименяетсяУСНПатент Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокПатентовНаСервере()
	
	СписокПатентов	= Новый СписокЗначений;
	
	Запрос	= Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала",		Запись.Период);
	Запрос.УстановитьПараметр("ДатаОкончания",	ДатаОкончанияДействия);
	Запрос.УстановитьПараметр("Владелец",		Запись.Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Патенты.Ссылка,
	|	Патенты.Наименование
	|ИЗ
	|	Справочник.Патенты КАК Патенты
	|ГДЕ
	|	Патенты.ДатаНачала <= &ДатаНачала
	|	И Патенты.ДатаОкончания >= &ДатаОкончания
	|	И Патенты.Владелец = &Владелец
	|	И НЕ Патенты.ПометкаУдаления";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ПредставлениеПорядкаОтраженияАвансов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Доходы по патенту ""%1""'"), Выборка.Наименование);
			
			СписокПатентов.Добавить(Выборка.Ссылка, ПредставлениеПорядкаОтраженияАвансов);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСписокВыбораОтраженияАвансовУСН(Форма)
	
	Запись			= Форма.Запись;
	СписокВыбора	= Форма.Элементы.УСНПорядокОтраженияАванса.СписокВыбора;
	
	СписокВыбора.Очистить();
	Если Запись.ПрименяетсяУСН Тогда
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ПорядокОтраженияАвансов.ДоходУСН"),		НСтр("ru = 'Доходы УСН'"));
		Если Форма.ВедетсяКомиссионнаяТорговля Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ПорядокОтраженияАвансов.ДоходКомитента"),	НСтр("ru = 'Доходы комитента'"));
		КонецЕсли;
	КонецЕсли;
	Если Запись.ПлательщикНДФЛ Тогда
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ПорядокОтраженияАвансов.ДоходИП"),		НСтр("ru = 'Доходы ИП'"));
	КонецЕсли;
	Если Запись.ПлательщикЕНВД Тогда
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ПорядокОтраженияАвансов.ДоходЕНВД"),	НСтр("ru = 'Доходы ЕНВД'"));
	КонецЕсли;
	
	Если Запись.ПрименяетсяУСНПатент Тогда
		
		Для Каждого Патент Из Форма.СписокПатентов Цикл
			СписокВыбора.Добавить(Патент.Значение, Патент.Представление);
		КонецЦикла;
	
	КонецЕсли;
	
	Если Запись.ПорядокОтраженияАвансаУСН = ПредопределенноеЗначение("Перечисление.ПорядокОтраженияАвансов.ДоходПатент")
		И ЗначениеЗаполнено(Запись.ПатентУСН)
		И НЕ СписокВыбора.НайтиПоЗначению(Запись.ПатентУСН) = Неопределено Тогда
		
		Форма.УСНПорядокОтраженияАванса	= Запись.ПатентУСН;
		
	ИначеЕсли ЗначениеЗаполнено(Запись.ПорядокОтраженияАвансаУСН)
		И НЕ СписокВыбора.НайтиПоЗначению(Запись.ПорядокОтраженияАвансаУСН) = Неопределено Тогда
		
		Форма.УСНПорядокОтраженияАванса	= Запись.ПорядокОтраженияАвансаУСН;
		
	Иначе
		
		Форма.УСНПорядокОтраженияАванса	= ПредопределенноеЗначение("Перечисление.ПорядокОтраженияАвансов.ПустаяСсылка");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаПорядкаОтраженияАвансаУСН()

	Если (НЕ Запись.ПлательщикЕНВД И Запись.ПорядокОтраженияАвансаУСН = ПредопределенноеЗначение("Перечисление.ПорядокОтраженияАвансов.ДоходЕНВД"))
		ИЛИ (НЕ Запись.ПрименяетсяУСНПатент И Запись.ПорядокОтраженияАвансаУСН = ПредопределенноеЗначение("Перечисление.ПорядокОтраженияАвансов.ДоходПатент")) Тогда
	
		Модифицированность	= Истина;
		
		ЗаполнитьСписокВыбораОтраженияАвансовУСН(ЭтаФорма);
		
		СписокОтраженияАванса = Элементы.УСНПорядокОтраженияАванса.СписокВыбора;
		ОписаниеДействия = НСтр("ru = 'очищено'");
		Если СписокОтраженияАванса.Количество() = 1 Тогда
			УСНПорядокОтраженияАванса = СписокОтраженияАванса[0].Значение;
			УСНПорядокОтраженияАвансаПриИзменении(Элементы.УСНПорядокОтраженияАванса);
			ОписаниеДействия = НСтр("ru = 'изменено'");
		Иначе
			УСНПорядокОтраженияАванса = ПредопределенноеЗначение("Перечисление.ПорядокОтраженияАвансов.ПустаяСсылка");
			Запись.ПорядокОтраженияАвансаУСН	= Неопределено;
			Запись.ПатентУСН					= Неопределено;
		КонецЕсли;
		
		Если Запись.ПрименяетсяУСН Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'На закладке ""УСН"" %1 поле ""Основной порядок отражения авансов от покупателя для целей налогообложения""'"),
				ОписаниеДействия);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СпециальныйНалоговыйРежимПриИзменении()

	Запись.РозничнаяТорговляОблагаетсяЕНВД = ВедетсяРозничнаяТорговля
		И (Запись.ПлательщикЕНВД ИЛИ Запись.ПрименяетсяУСНПатент);
	
	ПроверкаПорядкаОтраженияАвансаУСН();
	
	ПроверкаВидовДеятельностиИП();

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтавкуНалогаУСН()

	Если Запись.ПрименяетсяУСН И Не Запись.НалоговыеКаникулыУСН Тогда
		Если Запись.ПрименяетсяУСНДоходы Тогда
			Запись.СтавкаНалогаУСН = 6;
		ИначеЕсли Запись.ПрименяетсяУСНДоходыМинусРасходы Тогда
			Запись.СтавкаНалогаУСН = 15;
		КонецЕсли;
	Иначе
		Запись.СтавкаНалогаУСН = 0;
	КонецЕсли;

	ТекущаяСтавкаНалогаУСН = Запись.СтавкаНалогаУСН;

КонецПроцедуры

&НаКлиенте
Процедура ОбъектНалогообложенияУСНПриИзмененииНаКлиенте()

	Запись.ПрименяетсяУСНДоходы = (Запись.СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.Упрощенная")
		И Запись.ОбъектНалогообложенияУСН = ПредопределенноеЗначение("Перечисление.ОбъектыНалогообложенияПоУСН.Доходы"));
	Запись.ПрименяетсяУСНДоходыМинусРасходы = (Запись.СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.Упрощенная")
		И Запись.ОбъектНалогообложенияУСН = ПредопределенноеЗначение("Перечисление.ОбъектыНалогообложенияПоУСН.ДоходыМинусРасходы"));
	
	УстановитьСтавкуНалогаУСН();
	
	ПроверкаМетодаФИФО(ЭтаФорма);
	ПредупреждениеОбУстановкеМетодаФИФО();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораСистемНалогообложения()
	
	СписокВыбора = Элементы.СистемаНалогообложенияПредставление.СписокВыбора;
	
	СписокВыбора.Очистить();
	
	СписокВыбора.Добавить(
				ПолучитьПредставлениеСистемыНалогообложения(Перечисления.СистемыНалогообложения.Общая),
				НСтр("ru = 'Общая     '"));
	СписокВыбора.Добавить(
				ПолучитьПредставлениеСистемыНалогообложения(Перечисления.СистемыНалогообложения.Упрощенная),
				НСтр("ru = 'Упрощенная'"));
	
	Если НЕ ЭтоЮрЛицо Тогда
		Если ДатаОкончанияДействия >= УчетУСН.ДатаНачалаДействияПатентнойСистемы() Тогда
			СписокВыбора.Добавить(
				ПолучитьПредставлениеСистемыНалогообложения(Перечисления.СистемыНалогообложения.ОсобыйПорядок, Истина, Ложь),
				НСтр("ru = 'Патентная '"));
		КонецЕсли;
		
		СписокВыбора.Добавить(
				ПолучитьПредставлениеСистемыНалогообложения(Перечисления.СистемыНалогообложения.ОсобыйПорядок, Ложь, Истина),
				НСтр("ru = 'ЕНВД      '"));
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СистемаНалогообложенияПриИзмененииНаКлиенте()
	
	Запись.ПлательщикНалогаНаПрибыль = Запись.СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.Общая") И ЭтоЮрЛицо;
	Запись.ПрименяетсяУСН = Запись.СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.Упрощенная");
	Запись.ПрименяетсяУСНДоходы = Запись.СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.Упрощенная")
		И Запись.ОбъектНалогообложенияУСН = ПредопределенноеЗначение("Перечисление.ОбъектыНалогообложенияПоУСН.Доходы");
	Запись.ПрименяетсяУСНДоходыМинусРасходы = Запись.СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.Упрощенная")
		И Запись.ОбъектНалогообложенияУСН = ПредопределенноеЗначение("Перечисление.ОбъектыНалогообложенияПоУСН.ДоходыМинусРасходы");
	Запись.ПлательщикНДФЛ = Запись.СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.Общая") И НЕ ЭтоЮрЛицо;

	Если Запись.ПрименяетсяУСН Тогда
		
		Запись.ПлательщикНДС = Ложь;
		Запись.ПоддержкаПБУ18 = Ложь;
		
		Если НЕ ЗначениеЗаполнено(Запись.МетодРаспределенияРасходовУСНПоВидамДеятельности) Тогда
			Запись.МетодРаспределенияРасходовУСНПоВидамДеятельности = ПредопределенноеЗначение("Перечисление.МетодыРаспределенияРасходовУСНПоВидамДеятельности.ЗаКвартал");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Запись.БазаРаспределенияРасходовУСНПоВидамДеятельности) Тогда
			Запись.БазаРаспределенияРасходовУСНПоВидамДеятельности = ПредопределенноеЗначение("Перечисление.БазаРаспределенияРасходовУСНПоВидамДеятельности.ДоходыОтРеализацииБУ");
		КонецЕсли;
		
	Иначе 
		
		Запись.ПлательщикНДС = Истина;
		Запись.ПоддержкаПБУ18 = Истина;
	
	КонецЕсли;

	Если НЕ Запись.ПрименяетсяУСН Тогда
		Запись.ПоложенияПереходногоПериодаУСН = Ложь;
		Запись.ДатаПереходаНаУСН = Дата('00010101');
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Запись.ОбъектНалогообложенияУСН) Тогда
		Запись.ОбъектНалогообложенияУСН = ПредопределенноеЗначение("Перечисление.ОбъектыНалогообложенияПоУСН.Доходы");
	КонецЕсли;
	
	Если НЕ Запись.ПлательщикНДС Тогда
		Запись.УпрощенныйУчетНДС = Ложь;
	КонецЕсли;
	
	Если Запись.СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.ОсобыйПорядок") Тогда
		
		СпециальныйНалоговыйРежимПриИзменении();
		
	КонецЕсли;
	
	УстановитьСтавкуНалогаУСН();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыпускПродукцииПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОказаниеУслугПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеНаИнформационнуюСсылку(Элемент)
	
	ИнформационныйЦентрКлиент.НажатиеНаИнформационнуюСсылку(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеНаСсылкуВсеИнформационныеСсылки(Элемент)
	
	ИнформационныйЦентрКлиент.НажатиеНаСсылкуВсеИнформационныеСсылки(ЭтаФорма.ИмяФормы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПредставлениеСистемыНалогообложения(СистемаНалогообложения, ПрименяетсяУСНПатент = Ложь, ПлательщикЕНВД = Ложь)
	
	ПредставлениеСистемыНалогообложения = Строка(СистемаНалогообложения);
	Если СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.ОсобыйПорядок") Тогда
		Если ПрименяетсяУСНПатент Тогда
			ПредставлениеСистемыНалогообложения = "Патентная";
		ИначеЕсли ПлательщикЕНВД Тогда
			ПредставлениеСистемыНалогообложения = "ЕНВД";
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПредставлениеСистемыНалогообложения;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСистемуНалогообложения(СистемаНалогообложенияПредставление)
	
	Если СистемаНалогообложенияПредставление = "Общая" Тогда
		СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.Общая");
	ИначеЕсли СистемаНалогообложенияПредставление = "Упрощенная" Тогда
		СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.Упрощенная");
	ИначеЕсли СистемаНалогообложенияПредставление = "Патентная" Тогда
		СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.ОсобыйПорядок");
	ИначеЕсли СистемаНалогообложенияПредставление = "ЕНВД" Тогда
		СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.ОсобыйПорядок");
	Иначе
		СистемаНалогообложения = Неопределено;
	КонецЕсли;
	
	Возврат СистемаНалогообложения;
	
КонецФункции

&НаКлиенте
Процедура ЗакрытиеДополнительнойФормыЗавершение(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Модифицированность = Истина;
		
		ЗаполнитьЗначенияСвойств(Запись, Результат);
		
		Если Результат.Свойство("АвансыВключаютсяВДоходыВПериодеПолученияИП") Тогда
			УстановитьВидДеятельностиДоходовПоАвансамИП();
		КонецЕсли;
		                        
		Если Результат.Свойство("ВидДеятельностиДоходовПоАвансамИП") Тогда
			УстановитьВидДеятельностиСПроверкой("ВидДеятельностиДоходовПоАвансамИП", Результат.ВидДеятельностиДоходовПоАвансамИП, Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МетодыОпределенияПрямыхРасходовПроизводстваНУЗавершение(ЗаполнитьСписокПоРекомендациям, СкопироватьСписокПрошлогоПериода)
		
	Если ЗаполнитьСписокПоРекомендациям ИЛИ СкопироватьСписокПрошлогоПериода Тогда
		ЗаполнитьСписокПрямыхРасходов(Запись.Организация, Запись.Период, СкопироватьСписокПрошлогоПериода);
	КонецЕсли;

	ПараметрыОтбора = Новый Структура("Организация, ПериодДействия", ГоловнаяОрганизация, НачалоГода(Запись.Период));
	ОткрытьФорму("РегистрСведений.МетодыОпределенияПрямыхРасходовПроизводстваВНУ.ФормаСписка", Новый Структура("Отбор", ПараметрыОтбора));

КонецПроцедуры

&НаКлиенте
Процедура ВопросСоздатьЗаписиСоответствующиеРекомендациямНКЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьСписокПоРекомендациям = (Результат = КодВозвратаДиалога.Да);
	
	МетодыОпределенияПрямыхРасходовПроизводстваНУЗавершение(ЗаполнитьСписокПоРекомендациям, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСкопироватьСписокПрошлогоПериодаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		МетодыОпределенияПрямыхРасходовПроизводстваНУЗавершение(Ложь, Истина);	
	Иначе
		ЗаголовокДиалогаВопроса = НСтр("ru = 'Методы определения прямых расходов НУ'");
		ТекстВопроса = НСтр("ru = 'Список пуст.
		|
		|Создать записи, соответствующие рекомендациям ст.318 НК РФ?'");
		Оповещение = Новый ОписаниеОповещения("ВопросСоздатьЗаписиСоответствующиеРекомендациямНКЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, ЗаголовокДиалогаВопроса);
	КонецЕсли;   
		
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойСчетУчетаЗатратПриИзменении(Элемент)
	
	Элемент.РасширеннаяПодсказка.Заголовок = ОсновнойСчетУчетаЗатратПриИзмененииНаСервере(Запись.ОсновнойСчетУчетаЗатрат);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОсновнойСчетУчетаЗатратПриИзмененииНаСервере(ОсновнойСчетУчетаЗатрат)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОсновнойСчетУчетаЗатрат, "Наименование");	
	
КонецФункции

// Включение аналитики

&НаКлиенте
Функция НеобходимыеРазрезыАналитики()
	
	РазрезыАналитики = Новый Массив;
	
	Если Запись.СпособОценкиМПЗ = ПредопределенноеЗначение("Перечисление.СпособыОценки.ФИФО") Тогда
		РазрезыАналитики.Добавить("ВестиПартионныйУчет");
	КонецЕсли;
	
	Если Запись.РаздельныйУчетНДСНаСчете19 Тогда
		РазрезыАналитики.Добавить("ВестиУчетНДСПоСпособам");
	КонецЕсли;
	
	Если Запись.УчитыватьРасходыПоЭлементамЗатрат Тогда
		РазрезыАналитики.Добавить("УчитыватьРасходыПоЭлементамЗатрат");
	КонецЕсли;
	
	Если Запись.УчитыватьРасходыПоСтатьямЗатрат Тогда
		РазрезыАналитики.Добавить("УчитыватьРасходыПоСтатьямЗатрат");
	КонецЕсли;
	
	Возврат РазрезыАналитики;
	
КонецФункции

&НаКлиенте
Процедура ДиалогВключитьАналитику(РазрезыАналитики)
	
	ТекстСообщенияПользователю = Новый Массив;
	Для Каждого ИмяПараметраУчета Из РазрезыАналитики Цикл
		
		Если ИмяПараметраУчета = "ВестиПартионныйУчет" Тогда
			ТекстСообщенияПользователю.Добавить(НСтр("ru = 'Для применения способа оценки МПЗ ""По ФИФО"" необходимо включить аналитический учет по партиям на счетах учета МПЗ.'"));
		КонецЕсли;
		
		Если ИмяПараметраУчета = "ВестиУчетНДСПоСпособам" Тогда
			ТекстСообщенияПользователю.Добавить(НСтр("ru = 'Для ведения раздельного учета НДС на счете 19 ""НДС по приобретенным ценностям"" необходимо включить аналитический учет по способам учета НДС.'"));
		КонецЕсли;
		
		Если ИмяПараметраУчета = "УчитыватьРасходыПоЭлементамЗатрат" Тогда
			Если РазрезыАналитики.Найти("УчитыватьРасходыПоСтатьямЗатрат") = Неопределено Тогда
				ТекстСообщенияПользователю.Добавить(НСтр("ru = 'Для учета расходов по элементам затрат необходимо добавить соответствующее субконто на счета расходов.'"));
			Иначе
				ТекстСообщенияПользователю.Добавить(НСтр("ru = 'Для учета расходов по элементам и статьям затрат необходимо добавить соответствующие субконто на счета расходов.'"));
			КонецЕсли;
		КонецЕсли;
		
		Если ИмяПараметраУчета = "УчитыватьРасходыПоСтатьямЗатрат" Тогда
			Если РазрезыАналитики.Найти("УчитыватьРасходыПоЭлементамЗатрат") = Неопределено Тогда
				ТекстСообщенияПользователю.Добавить(НСтр("ru = 'Для учета расходов по статьям затрат необходимо добавить соответствующее субконто на счета расходов.'"));
			Иначе
				Продолжить; // Выше сформировали единое сообщение и для статей и для элементов
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	МножественноеЧисло = (РазрезыАналитики.Количество() > 1);
	
	ТекстСообщенияПользователю.Добавить(""); // Разделитель повествовательной и вопросительной частей
	
	Если Не ЭтоПолноправныйПользователь Тогда
		
		ШаблонТекстаНедостаточноПрав = НСтр("ru = 'На выполнение %1 недостаточно прав. Учетная политика не может быть записана.'");
		ОписаниеДействий             = ?(МножественноеЧисло, НСтр("ru = 'этих действий'"), НСтр("ru = 'этого действия'"));
		ТекстНедостаточноПрав        = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаНедостаточноПрав, ОписаниеДействий);
		ТекстСообщенияПользователю.Добавить(ТекстНедостаточноПрав);
		
		ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(ТекстСообщенияПользователю, Символы.ПС));
		
		Возврат
		
	КонецЕсли;
	
	// Зададим вопрос о включении аналитики учета
	
	Если МножественноеЧисло Тогда
		
		ТекстВопроса = НСтр("ru = 'Включить эти разрезы учета?'");
		
	Иначе
		
		ИмяПараметраУчета = РазрезыАналитики[0];
		Если ИмяПараметраУчета = "ВестиПартионныйУчет" Тогда
			
			ТекстВопроса = НСтр("ru = 'Включить аналитический учет по партиям?'");
			
		ИначеЕсли ИмяПараметраУчета = "ВестиУчетНДСПоСпособам" Тогда
			
			ТекстВопроса = НСтр("ru = 'Включить аналитический учет по способам учета НДС?'");
			
		ИначеЕсли ИмяПараметраУчета = "УчитыватьРасходыПоСтатьямЗатрат" Тогда
			
			ТекстВопроса = НСтр("ru = 'Включить аналитический учет по статьям затрат?'");
			
		ИначеЕсли ИмяПараметраУчета = "УчитыватьРасходыПоЭлементамЗатрат" Тогда
			
			ТекстВопроса = НСтр("ru = 'Включить аналитический учет по элементам затрат?'");
			
		Иначе
			
			ТекстВопроса = НСтр("ru = 'Включить этот разрез учета?'");
			
		КонецЕсли;
		
	КонецЕсли;
		
	ТекстСообщенияПользователю.Добавить(ТекстВопроса);
	ТекстСообщенияПользователю = СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(ТекстСообщенияПользователю, Символы.ПС);
	
	Оповещение = Новый ОписаниеОповещения("ДиалогВключитьАналитикуЗавершение", ЭтотОбъект, РазрезыАналитики);
	ПоказатьВопрос(Оповещение, ТекстСообщенияПользователю, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьУжеВключенныеРазрезыАналитики(РазрезыАналитики)
	
	ПараметрыУчета = ОбщегоНазначенияБПВызовСервера.ОпределитьПараметрыУчета();
	
	КоличествоЭлементов = РазрезыАналитики.Количество();
	Для ОбратныйНомер = 1 По КоличествоЭлементов Цикл
		
		Индекс = КоличествоЭлементов - ОбратныйНомер; // Обходим с конца, так как будем удалять
		ИмяПараметраУчета = РазрезыАналитики[Индекс];
		
		Если ПараметрыУчета[ИмяПараметраУчета] Тогда
			РазрезыАналитики.Удалить(Индекс);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДиалогВключитьАналитикуЗавершение(Результат, РазрезыАналитики) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	РезультатВыполнения = ВключитьАналитику(РазрезыАналитики);
	Если РезультатВыполнения.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатВыполнения.ИзмененаАналитика Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Изменены параметры субконто'"),
			"e1cib/app/Обработка.ЖурналРегистрации", 
			"Журнал регистрации");
	КонецЕсли;
	
	Записать();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВключитьАналитику(Знач РазрезыАналитики)
	
	Результат = Новый Структура;
	Результат.Вставить("Отказ",             Ложь);
	Результат.Вставить("ИзмененаАналитика", Ложь);
	
	ПараметрыУчета = ОбщегоНазначенияБПВызовСервера.ОпределитьПараметрыУчета();
	Для Каждого ИмяПараметраУчета Из РазрезыАналитики Цикл
		ПараметрыУчета[ИмяПараметраУчета] = Истина;
	КонецЦикла;
	
	ОбщегоНазначенияБПВызовСервера.ПрименитьПараметрыУчета(ПараметрыУчета, Результат.ИзмененаАналитика, Результат.Отказ);
	
	Возврат Результат;
	
КонецФункции

// Печать

&НаКлиенте
Процедура ВыполнитьКомандуПечати(ИмяМакета)
	
	ТребуетсяЗапись = Параметры.Ключ.Пустой() ИЛИ Модифицированность;
	Если ТребуетсяЗапись Тогда
		ТекстСообщения = НСтр("ru = 'Перед печатью данные учетной политики необходимо записать.'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("ИмяМакета",   ИмяМакета);
	ПараметрыПечати.Вставить("Организация", Запись.Организация);
	ПараметрыПечати.Вставить("Период",      Запись.Период);
	
	Если ИмяМакета = "РегистрыНУ" ИЛИ ИмяМакета = "РегистрыБУ" 
		ИЛИ ИмяМакета = "ПервичныеДокументы"
		ИЛИ ИмяМакета = "ПланСчетов" Тогда
		
		ОбъектыПечати = Новый Массив;
		ОбъектыПечати.Добавить(Запись.Организация);
		Если ИмяМакета = "РегистрыБУ" Тогда
			ТекстЗаголовка = НСтр("ru='Регистры БУ на %1 по %2'");
		ИначеЕсли ИмяМакета = "РегистрыНУ" Тогда
			ТекстЗаголовка = НСтр("ru='Регистры НУ на %1 по %2'");
		ИначеЕсли ИмяМакета = "ПервичныеДокументы" Тогда
			ТекстЗаголовка = НСтр("ru='Формы первичных документов на %1 по %2'");
		ИначеЕсли ИмяМакета = "ПланСчетов" Тогда
			ТекстЗаголовка = НСтр("ru='Рабочий план счетов на %1 по %2'");
		КонецЕсли;
		ПараметрыПечати.Вставить("ЗаголовокФормы", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстЗаголовка,
			Формат(Запись.Период, "ДЛФ=D"),
			Запись.Организация));
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("РегистрСведений.УчетнаяПолитикаОрганизаций",
			ИмяМакета, ОбъектыПечати, ЭтотОбъект, ПараметрыПечати);
		
	Иначе
		ОткрытьФорму("РегистрСведений.УчетнаяПолитикаОрганизаций.Форма.ФормаПечати", 
			ПараметрыПечати, ЭтотОбъект, ИмяМакета);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервереБезКонтекста
Функция ХарактерДеятельности(Ссылка)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ХарактерДеятельности");
	
КонецФункции
