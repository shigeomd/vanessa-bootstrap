#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция НайтиПоКБК(Организация, КБК, КодТерритории) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("КБК",           КБК); // Настройка может быть выполнена так, что надо искать по части КБК - без символов 14-17 (см. заполнение реквизитов в клиент-банке). Но мы этим пренебрежем для простоты. Все равно настройка настолько непонятная, что вряд ли с ней кто-то справится.
	Запрос.УстановитьПараметр("КодТерритории", КодТерритории);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	Реквизиты.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	Реквизиты.ВидПлатежа КАК ВидПлатежа,
	|	Реквизиты.Организация,
	|	Реквизиты.ПоказательТипа,
	|	1 КАК Приоритет
	|ПОМЕСТИТЬ ПодходящиеКлючи
	|ИЗ
	|	РегистрСведений.РеквизитыУплатыНалоговИПлатежейВБюджет КАК Реквизиты
	|ГДЕ
	|	Реквизиты.ВидПлатежа.КодБК = &КБК
	|	И Реквизиты.Организация = &Организация
	|	И (Реквизиты.РегистрацияВНалоговомОргане.КодПоОКАТО = &КодТерритории
	|			ИЛИ Реквизиты.РегистрацияВНалоговомОргане.КодПоОКТМО = &КодТерритории)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 2
	|	Реквизиты.РегистрацияВНалоговомОргане,
	|	Реквизиты.ВидПлатежа,
	|	Реквизиты.Организация,
	|	Реквизиты.ПоказательТипа,
	|	2
	|ИЗ
	|	РегистрСведений.РеквизитыУплатыНалоговИПлатежейВБюджет КАК Реквизиты
	|ГДЕ
	|	Реквизиты.ВидПлатежа.КодБК = &КБК
	|	И Реквизиты.Организация = &Организация
	|	И Реквизиты.РегистрацияВНалоговомОргане = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 2
	|	Реквизиты.РегистрацияВНалоговомОргане,
	|	Реквизиты.ВидПлатежа,
	|	Реквизиты.Организация,
	|	Реквизиты.ПоказательТипа,
	|	3
	|ИЗ
	|	РегистрСведений.РеквизитыУплатыНалоговИПлатежейВБюджет КАК Реквизиты
	|ГДЕ
	|	Реквизиты.ВидПлатежа.КодБК = &КБК
	|	И Реквизиты.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	И Реквизиты.РегистрацияВНалоговомОргане = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ПодходящиеКлючи.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ МинимальныйПриоритет
	|ИЗ
	|	ПодходящиеКлючи КАК ПодходящиеКлючи
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.ПоказательТипа,
	|	Реквизиты.ВидПлатежа.СчетУчета КАК СчетУчета,
	|	Реквизиты.Получатель,
	|	Реквизиты.СчетПолучателя,
	|	Реквизиты.ВидПеречисленияВБюджет,
	|	Реквизиты.СтатусСоставителя,
	|	Реквизиты.ОчередностьПлатежа,
	|	Реквизиты.СтатьяДвиженияДенежныхСредств,
	|	Реквизиты.НазначениеПлатежа,
	|	Реквизиты.ПоказательОснования,
	|	Реквизиты.ПоказательПериода
	|ИЗ
	|	ПодходящиеКлючи КАК ПодходящиеКлючи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МинимальныйПриоритет КАК МинимальныйПриоритет
	|		ПО ПодходящиеКлючи.Приоритет = МинимальныйПриоритет.Приоритет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеквизитыУплатыНалоговИПлатежейВБюджет КАК Реквизиты
	|		ПО ПодходящиеКлючи.РегистрацияВНалоговомОргане = Реквизиты.РегистрацияВНалоговомОргане
	|			И ПодходящиеКлючи.ВидПлатежа = Реквизиты.ВидПлатежа
	|			И ПодходящиеКлючи.Организация = Реквизиты.Организация
	|			И ПодходящиеКлючи.ПоказательТипа = Реквизиты.ПоказательТипа";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		
		Выборка = Результат.Выбрать();
		Если Выборка.Количество() <> 1 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Реквизиты = Новый Структура;
		Реквизиты.Вставить("СчетУчета");
		Реквизиты.Вставить("ВидПеречисленияВБюджет");
		Реквизиты.Вставить("ПоказательТипа");
		Реквизиты.Вставить("Получатель");
		Реквизиты.Вставить("СчетПолучателя");
		Реквизиты.Вставить("СтатусСоставителя");
		Реквизиты.Вставить("ОчередностьПлатежа");
		Реквизиты.Вставить("НазначениеПлатежа");
		Реквизиты.Вставить("СтатьяДвиженияДенежныхСредств");
		Реквизиты.Вставить("ПоказательОснования");
		Реквизиты.Вставить("ПоказательПериода");
		
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(Реквизиты, Выборка);
		
		Возврат Реквизиты;
		
	КонецЕсли;
	
КонецФункции

Функция ДанныеЗаполнения(КлючЗаписи, Период) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",                 КлючЗаписи.Организация);
	Запрос.УстановитьПараметр("РегистрацияВНалоговомОргане", КлючЗаписи.РегистрацияВНалоговомОргане);
	Запрос.УстановитьПараметр("ВидПлатежа",                  КлючЗаписи.ВидПлатежа);
	Запрос.УстановитьПараметр("ПоказательТипа",              КлючЗаписи.ПоказательТипа);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Настройка.ВидПлатежа КАК Налог,
	|	Настройка.ВидПлатежа.ВидНалога КАК ВидНалога,
	|	Настройка.ВидПлатежа.КодБК КАК КодБК,
	|	Настройка.ВидПлатежа.СчетУчета КАК СчетУчета,
	|	Настройка.Организация КАК Организация,
	|	Настройка.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	Настройка.РегистрацияВНалоговомОргане.КПП КАК КПП,
	|	Настройка.ПоказательТипа КАК ПоказательТипа,
	|	Настройка.Получатель КАК Контрагент,
	|	Настройка.Получатель.ИНН КАК ИННПолучателя,
	|	Настройка.Получатель.КПП КАК КПППолучателя,
	|	Настройка.СчетПолучателя КАК СчетКонтрагента,
	|	Настройка.ВидПеречисленияВБюджет КАК ВидПеречисленияВБюджет,
	|	Настройка.СтатусСоставителя КАК СтатусСоставителя,
	|	Настройка.ПоказательОснования КАК ПоказательОснования,
	|	Настройка.ОчередностьПлатежа КАК ОчередностьПлатежа,
	|	Настройка.НазначениеПлатежа КАК НазначениеПлатежа,
	|	Настройка.ПоказательПериода КАК ПоказательПериода,
	|	Настройка.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств
	|ИЗ
	|	РегистрСведений.РеквизитыУплатыНалоговИПлатежейВБюджет КАК Настройка
	|ГДЕ
	|	Настройка.ВидПлатежа = &ВидПлатежа
	|	И Настройка.Организация = &Организация
	|	И Настройка.РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане
	|	И Настройка.ПоказательТипа = &ПоказательТипа";
	
	Настройка = Запрос.Выполнить().Выбрать();
	Если НЕ Настройка.Следующий() Тогда
		Возврат Новый Структура;
	КонецЕсли;
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Налог");
	ДанныеЗаполнения.Вставить("КодБК");
	ДанныеЗаполнения.Вставить("СчетУчета");
	ДанныеЗаполнения.Вставить("РегистрацияВНалоговомОргане");
	ДанныеЗаполнения.Вставить("ПоказательТипа");
	
	ДанныеЗаполнения.Вставить("Контрагент");
	ДанныеЗаполнения.Вставить("ИННПолучателя");
	ДанныеЗаполнения.Вставить("КПППолучателя");
	ДанныеЗаполнения.Вставить("СчетКонтрагента");
	
	ДанныеЗаполнения.Вставить("ВидПеречисленияВБюджет");
	ДанныеЗаполнения.Вставить("СтатусСоставителя");
	ДанныеЗаполнения.Вставить("ПоказательОснования");
	
	ДанныеЗаполнения.Вставить("ОчередностьПлатежа");
	ДанныеЗаполнения.Вставить("НазначениеПлатежа");
	
	ДанныеЗаполнения.Вставить("СтатьяДвиженияДенежныхСредств");
	
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Настройка);
	
	Если ЗначениеЗаполнено(Настройка.РегистрацияВНалоговомОргане) Тогда
		
		КодТерритории = Справочники.РегистрацииВНалоговомОргане.КодТерритории(
			Настройка.РегистрацияВНалоговомОргане,
			ОбщегоНазначенияБП.ПолучитьРабочуюДату());
		
		Если ЗначениеЗаполнено(КодТерритории) Тогда
			ДанныеЗаполнения.Вставить("КодОКАТО", КодТерритории);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Настройка.КПП) Тогда
			ДанныеЗаполнения.Вставить("КПП", Настройка.КПП);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Настройка.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж Тогда
		
		Если ЗначениеЗаполнено(Настройка.ВидНалога) Тогда
			// Указан поставляемый вид налога. Получаем значения КБК и счета учета с проверкой актуальности.
			ДанныеЗаполнения.Вставить("КодБК", 
				Справочники.ВидыНалоговИПлатежейВБюджет.КБК(Настройка.Налог, , Период));
			ДанныеЗаполнения.Вставить("СчетУчета", 
				Справочники.ВидыНалоговИПлатежейВБюджет.СчетУчета(Настройка.Налог, Период));
		КонецЕсли;
		
		НалоговыйПериод = ПлатежиВБюджетКлиентСервер.НалоговыйПериод(Период, Настройка.ПоказательПериода);
		ДанныеЗаполнения.Вставить("ПоказательПериода", НалоговыйПериод);
		
		НазначениеПлатежа = Настройка.НазначениеПлатежа;
		
		Если ПустаяСтрока(НазначениеПлатежа) Тогда
			// Автоназначение платежа
			НазначениеПлатежа=  Справочники.ВидыНалоговИПлатежейВБюджет.НазначениеПлатежа(
				Настройка.Налог, , Настройка.Организация, Период);
		Иначе
			// Пользовательское назначение платежа
			ПредставлениеНалоговогоПериода = ПлатежиВБюджетКлиентСервер.ПредставлениеНалоговогоПериода(НалоговыйПериод);
			
			Если Не ПустаяСтрока(ПредставлениеНалоговогоПериода) Тогда
				НазначениеПлатежа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1 %2'"), НазначениеПлатежа, ПредставлениеНалоговогоПериода);
			КонецЕсли;
			
		КонецЕсли;
		
		ДанныеЗаполнения.Вставить("НазначениеПлатежа", НазначениеПлатежа);
		
	КонецЕсли;
	
	// Сумма платежа
	
	Если ЗначениеЗаполнено(Настройка.СчетУчета)
		И (БухгалтерскийУчетВызовСервераПовтИсп.СчетВИерархии(Настройка.СчетУчета, ПланыСчетов.Хозрасчетный.РасчетыПоНалогам)
		Или БухгалтерскийУчетВызовСервераПовтИсп.СчетВИерархии(Настройка.СчетУчета, ПланыСчетов.Хозрасчетный.РасчетыПоСоциальномуСтрахованию)) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", Настройка.Организация);
		Запрос.УстановитьПараметр("СчетУчета",   Настройка.СчетУчета);
		
		ШаблонТекстаЗапроса =
		"ВЫБРАТЬ
		|	СУММА(ХозрасчетныйОстатки.СуммаОстатокКт) КАК Сумма
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			,
		|			Счет = &СчетУчета,
		|			[ВидыСубконто],
		|			Организация = &Организация
		|				[Условия]) КАК ХозрасчетныйОстатки";
		
		Аналитика = РасчетыСБюджетом.АналитикаНаСчетеРасчетовСБюджетом(
			Настройка.СчетУчета,
			Настройка.Организация,
			Настройка.РегистрацияВНалоговомОргане,
			Неопределено,
			Настройка.КодБК,
			Настройка.ПоказательОснования,
			Настройка.ПоказательТипа,
			Ложь); // Оборотные субконто исключаем
			
		ПараметрыТекста = Новый Структура;
		Если Аналитика.Количество() = 0 Тогда
			ПараметрыТекста.Вставить("ВидыСубконто", "");
			ПараметрыТекста.Вставить("Условия",      "");
		Иначе
			
			ПараметрыТекста.Вставить("ВидыСубконто", "&ВидыСубконто");
			Запрос.УстановитьПараметр("ВидыСубконто", Аналитика.ВыгрузитьКолонку("ВидСубконто"));
			
			УсловияНаСубконто = "";
			Для Индекс = 0 По Аналитика.Количество() - 1 Цикл
				ИмяСубконто = "Субконто" + (Индекс + 1);
				Запрос.УстановитьПараметр(ИмяСубконто, Аналитика[Индекс].Значение);
				УсловияНаСубконто = УсловияНаСубконто + " И " + ИмяСубконто + " = &" + ИмяСубконто;
			КонецЦикла;
			
			ПараметрыТекста.Вставить("Условия", УсловияНаСубконто);
			
		КонецЕсли;
		
		Запрос.Текст = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонТекстаЗапроса, ПараметрыТекста);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() И Выборка.Сумма > 0 Тогда
			ДанныеЗаполнения.Вставить("СуммаДокумента", Выборка.Сумма);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Функция ПолучитьНастройкуРеквизитыПлатежаВБюджет(УчетныеДанные, Организация, РегистрацияВНалоговомОргане) Экспорт
	
	ОбъединительЗапросов = "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|";
	ТекстыЗапросов = Новый Массив;
	Если ЗначениеЗаполнено(РегистрацияВНалоговомОргане) Тогда
		ТекстыЗапросов.Добавить("ВЫБРАТЬ
		|	1 КАК Приоритет,
		|	СписокРеквизитов.ВидПлатежа КАК ВидПлатежа,
		|	СписокРеквизитов.Организация КАК Организация,
		|	СписокРеквизитов.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
		|	СписокРеквизитов.ПоказательТипа КАК ПоказательТипа
		|ИЗ
		|	РегистрСведений.РеквизитыУплатыНалоговИПлатежейВБюджет КАК СписокРеквизитов
		|ГДЕ
		|	СписокРеквизитов.ВидПлатежа.СчетУчета = &СчетУчета
		|	И СписокРеквизитов.Организация = &Организация
		|	И СписокРеквизитов.РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане");
	КонецЕсли;
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	2 КАК Приоритет,
	|	СписокРеквизитов.ВидПлатежа КАК ВидПлатежа,
	|	СписокРеквизитов.Организация КАК Организация,
	|	СписокРеквизитов.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	СписокРеквизитов.ПоказательТипа КАК ПоказательТипа
	|ИЗ
	|	РегистрСведений.РеквизитыУплатыНалоговИПлатежейВБюджет КАК СписокРеквизитов
	|ГДЕ
	|	СписокРеквизитов.ВидПлатежа.СчетУчета = &СчетУчета
	|	И СписокРеквизитов.Организация = &Организация
	|	И СписокРеквизитов.РегистрацияВНалоговомОргане = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	3 КАК Приоритет,
	|	СписокРеквизитов.ВидПлатежа КАК ВидПлатежа,
	|	СписокРеквизитов.Организация КАК Организация,
	|	СписокРеквизитов.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	СписокРеквизитов.ПоказательТипа КАК ПоказательТипа
	|ИЗ
	|	РегистрСведений.РеквизитыУплатыНалоговИПлатежейВБюджет КАК СписокРеквизитов
	|ГДЕ
	|	СписокРеквизитов.ВидПлатежа.СчетУчета = &СчетУчета
	|	И СписокРеквизитов.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	И СписокРеквизитов.РегистрацияВНалоговомОргане = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)");
	
	ТекстЗапроса = СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(ТекстыЗапросов, ОбъединительЗапросов);
	
	Запрос = Новый Запрос;
	
	НомерСубконтоУровниБюджета = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НомерСубконто(
		УчетныеДанные.СчетУчета,
		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.УровниБюджетов);
	Если НомерСубконтоУровниБюджета > 0 Тогда
		РасположениеЭлементаКБК = ПлатежиВБюджетКлиентСервер.РасположениеЭлементаКБК("КодЭлементаДоходов");
		Если РасположениеЭлементаКБК <> Неопределено Тогда
			Запрос.УстановитьПараметр("КодыЭлементаДохода", ПлатежиВБюджет.КодыЭлементаДоходаПоУровнюБюджета(
				УчетныеДанные["Субконто" + НомерСубконтоУровниБюджета]));
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
				"СписокРеквизитов.ВидПлатежа.СчетУчета = &СчетУчета",
				"СписокРеквизитов.ВидПлатежа.СчетУчета = &СчетУчета
				|	И ПОДСТРОКА(СписокРеквизитов.ВидПлатежа.КодБК, "
				+ РасположениеЭлементаКБК.Начало
				+ ", " + РасположениеЭлементаКБК.Длина + ") В(&КодыЭлементаДохода)");
		КонецЕсли;
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет ВОЗР";
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("СчетУчета",   УчетныеДанные.СчетУчета);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("РегистрацияВНалоговомОргане", РегистрацияВНалоговомОргане);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат КлючЗаписиРеквизитыПлатежаВБюджет(Выборка);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает реквизиты для уплаты налога
//
// Параметры:
//  Налог                       - СправочникСсылка.ВидыНалоговИПлатежейВБюджет
//  Организация                 - СправочникСсылка.Организации
//  РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане
//
// Возвращаемое значение:
//  Структура - элементы структуры соответствуют ресурсам регистра РеквизитыУплатыНалоговИПлатежейВБюджет
//
Функция КлючНастройкиУплатыНалога(Налог, Организация, РегистрацияВНалоговомОргане) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидПлатежа",                  Налог);
	Запрос.УстановитьПараметр("Организация",                 Организация);
	Запрос.УстановитьПараметр("РегистрацияВНалоговомОргане", РегистрацияВНалоговомОргане);
	
	ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1 КАК Приоритет,
		|	РеквизитыУплатыНалоговИПлатежейВБюджет.ВидПлатежа,
		|	РеквизитыУплатыНалоговИПлатежейВБюджет.Организация,
		|	РеквизитыУплатыНалоговИПлатежейВБюджет.РегистрацияВНалоговомОргане,
		|	РеквизитыУплатыНалоговИПлатежейВБюджет.ПоказательТипа
		|ИЗ
		|	РегистрСведений.РеквизитыУплатыНалоговИПлатежейВБюджет КАК РеквизитыУплатыНалоговИПлатежейВБюджет
		|ГДЕ
		|	РеквизитыУплатыНалоговИПлатежейВБюджет.ВидПлатежа = &ВидПлатежа
		|	И РеквизитыУплатыНалоговИПлатежейВБюджет.Организация = &Организация
		|	И &УсловиеПоРегистрацииВНалоговомОргане";
	
	Если НалоговыйУчетОбособленныхПодразделений.УчетВРазрезеНалоговыхОрганов() Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоРегистрацииВНалоговомОргане",
			"РеквизитыУплатыНалоговИПлатежейВБюджет.РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане");
		
		ТекстЗапроса = ТекстЗапроса + 
			"
			|ОБЪЕДИНИТЬ ВСЕ
			|" + 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	2 КАК Приоритет,
			|	РеквизитыУплатыНалоговИПлатежейВБюджет.ВидПлатежа,
			|	РеквизитыУплатыНалоговИПлатежейВБюджет.Организация,
			|	РеквизитыУплатыНалоговИПлатежейВБюджет.РегистрацияВНалоговомОргане,
			|	РеквизитыУплатыНалоговИПлатежейВБюджет.ПоказательТипа
			|ИЗ
			|	РегистрСведений.РеквизитыУплатыНалоговИПлатежейВБюджет КАК РеквизитыУплатыНалоговИПлатежейВБюджет
			|ГДЕ
			|	РеквизитыУплатыНалоговИПлатежейВБюджет.ВидПлатежа = &ВидПлатежа
			|	И РеквизитыУплатыНалоговИПлатежейВБюджет.Организация = &Организация
			|	И РеквизитыУплатыНалоговИПлатежейВБюджет.РегистрацияВНалоговомОргане = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)";
		
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоРегистрацииВНалоговомОргане", "ИСТИНА");
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + 
		"
		|ОБЪЕДИНИТЬ ВСЕ
		|" + 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	3 КАК Приоритет,
		|	РеквизитыУплатыНалоговИПлатежейВБюджет.ВидПлатежа,
		|	РеквизитыУплатыНалоговИПлатежейВБюджет.Организация,
		|	РеквизитыУплатыНалоговИПлатежейВБюджет.РегистрацияВНалоговомОргане,
		|	РеквизитыУплатыНалоговИПлатежейВБюджет.ПоказательТипа
		|ИЗ
		|	РегистрСведений.РеквизитыУплатыНалоговИПлатежейВБюджет КАК РеквизитыУплатыНалоговИПлатежейВБюджет
		|ГДЕ
		|	РеквизитыУплатыНалоговИПлатежейВБюджет.ВидПлатежа = &ВидПлатежа
		|	И РеквизитыУплатыНалоговИПлатежейВБюджет.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = КлючЗаписиРеквизитыПлатежаВБюджет(Выборка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция КлючЗаписиРеквизитыПлатежаВБюджет(Выборка)
	
	ЗначениеКлюча = Новый Структура;
	ЗначениеКлюча.Вставить("ВидПлатежа");
	ЗначениеКлюча.Вставить("Организация");
	ЗначениеКлюча.Вставить("РегистрацияВНалоговомОргане");
	ЗначениеКлюча.Вставить("ПоказательТипа");
	
	ЗаполнитьЗначенияСвойств(ЗначениеКлюча, Выборка);
	
	ПараметрыКонструктора = Новый Массив;
	ПараметрыКонструктора.Добавить(ЗначениеКлюча);
	
	Возврат Новый(Тип("РегистрСведенийКлючЗаписи.РеквизитыУплатыНалоговИПлатежейВБюджет"), ПараметрыКонструктора);
	
КонецФункции

#КонецОбласти

#КонецЕсли
