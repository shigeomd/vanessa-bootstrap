#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Процедура ЗаполнитьПоНаличиюРегламентированныхОтчетов() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Поле1
	|ИЗ
	|	РегистрСведений.НалогиОтчеты КАК НалогиОтчеты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	РегистрСведений.ВариантыПримененияТребованийЗаконодательства КАК ВариантыПримененияТребованийЗаконодательства";
	Если Не Запрос.Выполнить().Пустой() Тогда
		// Уже что-то настроено
		Возврат;
	КонецЕсли;
	
	ЗаписиНалогиОтчеты = РегистрыСведений.НалогиОтчеты.СоздатьНаборЗаписей();
	ЗаписиВариантыТребований = РегистрыСведений.ВариантыПримененияТребованийЗаконодательства.СоздатьНаборЗаписей();
	
	// ДАННЫЕ, ОБЩИЕ ДЛЯ ВСЕХ ОРГАНИЗАЦИЙ
	// Задачи, которые можно включать
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Правила.Ссылка.Владелец КАК Задача,
	|	Правила.Ссылка.Владелец.Код КАК Идентификатор
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов.Условия КАК Правила
	|ГДЕ
	|	Правила.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияПримененияТребованийЗаконодательства.ЗадачаВыбранаПользователем)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	РеглОтчетыКоторыеВключаютЗадачи = Новый ТаблицаЗначений; // "Включают" - означает здесь "On", а не "Include"
	РеглОтчетыКоторыеВключаютЗадачи.Колонки.Добавить("РеглОтчет", Новый ОписаниеТипов("Строка"));
	РеглОтчетыКоторыеВключаютЗадачи.Колонки.Добавить("Задача",    Новый ОписаниеТипов("СправочникСсылка.ЗадачиБухгалтера"));
	РеглОтчетыКоторыеВключаютЗадачи.Индексы.Добавить("РеглОтчет");
	
	ИсполнителиЗадач = ИнтерфейсыВзаимодействияБРО.РеглОтчетыИсполнителиЗадачБухгалтера();
	Пока Выборка.Следующий() Цикл
		
		// В ранних версиях БРО возвращались имена правил, совпадающие с кодами справочника, т.е. с символами нижнего и верхнего регистров.
		// В более поздних - приведены к верхнему регистру.
		// Поиск в соответствии - регистрозависимый.
		РеглОтчеты = ИсполнителиЗадач[Выборка.Идентификатор];
		Если РеглОтчеты = Неопределено Тогда
			РеглОтчеты = ИсполнителиЗадач[ВРег(Выборка.Идентификатор)];
		КонецЕсли;
		
		Если РеглОтчеты <> Неопределено Тогда
			Для Каждого РеглОтчет Из РеглОтчеты Цикл
				НоваяСтрока = РеглОтчетыКоторыеВключаютЗадачи.Добавить();
				НоваяСтрока.Задача    = Выборка.Задача;
				НоваяСтрока.РеглОтчет = РеглОтчет;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// Правила, которые можно включать "поштучно" (статистика)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Правила.Ссылка КАК Правило,
	|	Правила.Ссылка.Владелец.Код КАК ИдентификаторЗадачи,
	|	Правила.Ссылка.Код КАК ИдентификаторПравила
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов.Условия КАК Правила
	|ГДЕ
	|	Правила.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияПримененияТребованийЗаконодательства.ПравилоВыбраноПользователем)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	РеглОтчетыКоторыеВключаютПравила = Новый ТаблицаЗначений;
	РеглОтчетыКоторыеВключаютПравила.Колонки.Добавить("РеглОтчет", Новый ОписаниеТипов("Строка"));
	РеглОтчетыКоторыеВключаютПравила.Колонки.Добавить("Правило",   Новый ОписаниеТипов("СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов"));
	РеглОтчетыКоторыеВключаютПравила.Индексы.Добавить("РеглОтчет");
	
	ИсполнителиТребований = ИнтерфейсыВзаимодействияБРО.РеглОтчетыИсполнителиТребований();
	Пока Выборка.Следующий() Цикл
		
		ИмяТребования = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.СкомпоноватьПолноеИмяПравила(
			Выборка.ИдентификаторЗадачи, 
			Выборка.ИдентификаторПравила);
			
		РеглОтчет = ИнтерфейсыВзаимодействияБРО.ИмяРеглОтчета(ИмяТребования);
		Если РеглОтчет <> Неопределено Тогда
			НоваяСтрока = РеглОтчетыКоторыеВключаютПравила.Добавить();
			НоваяСтрока.Правило   = Выборка.Правило;
			НоваяСтрока.РеглОтчет = РеглОтчет;
		КонецЕсли;
		
	КонецЦикла;
	
	// Форма бух. отчетности
	// Порядок уплаты налога на прибыль
	// Алкоголь
	// Доп. взносы сотрудников?
	НастройкиПримененияТребований = РегистрыСведений.ВариантыПримененияТребованийЗаконодательства.НастройкиПримененияТребований();
	УсловияКоторыеМожноВключать = Новый Массив;
	Для Каждого Настройка Из НастройкиПримененияТребований Цикл
		Если ТипЗнч(Настройка.Варианты) = Тип("ТаблицаЗначений") Тогда
			Для Каждого Вариант Из Настройка.Варианты Цикл
				Если ЗначениеЗаполнено(Вариант.Условие) Тогда
					УсловияКоторыеМожноВключать.Добавить(Вариант.Условие);
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ТипЗнч(Настройка.Варианты) = Тип("ПеречислениеСсылка.УсловияПримененияТребованийЗаконодательства") Тогда
			УсловияКоторыеМожноВключать.Добавить(Настройка.Варианты);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Условия", УсловияКоторыеМожноВключать);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПравилаПредставленияОтчетовУплатыНалоговУсловия.Условие КАК Условие,
	|	ПравилаПредставленияОтчетовУплатыНалоговУсловия.Ссылка КАК Правило,
	|	ПравилаПредставленияОтчетовУплатыНалоговУсловия.Ссылка.Код КАК ИдентификаторПравила,
	|	ПравилаПредставленияОтчетовУплатыНалоговУсловия.Ссылка.Владелец.Код КАК ИдентификаторЗадачи
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов.Условия КАК ПравилаПредставленияОтчетовУплатыНалоговУсловия
	|ГДЕ
	|	ПравилаПредставленияОтчетовУплатыНалоговУсловия.Условие В(&Условия)";
	РеглОтчетыКоторыеВключаютУсловия = Новый ТаблицаЗначений;
	РеглОтчетыКоторыеВключаютУсловия.Колонки.Добавить("Условие",   Новый ОписаниеТипов("ПеречислениеСсылка.УсловияПримененияТребованийЗаконодательства"));
	РеглОтчетыКоторыеВключаютУсловия.Колонки.Добавить("РеглОтчет", Новый ОписаниеТипов("Строка"));
	РеглОтчетыКоторыеВключаютУсловия.Индексы.Добавить("РеглОтчет");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ИмяТребования = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.СкомпоноватьПолноеИмяПравила(
			Выборка.ИдентификаторЗадачи, 
			Выборка.ИдентификаторПравила);
			
		РеглОтчет = ИнтерфейсыВзаимодействияБРО.ИмяРеглОтчета(ИмяТребования);
		Если РеглОтчет <> Неопределено Тогда
			НоваяСтрока = РеглОтчетыКоторыеВключаютУсловия.Добавить();
			НоваяСтрока.Условие   = Выборка.Условие;
			НоваяСтрока.РеглОтчет = РеглОтчет;
		КонецЕсли;
		
	КонецЦикла;
	
	// ДАННЫЕ ПО ОРГАНИЗАЦИЯМ
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РегламентированныйОтчет.ИсточникОтчета КАК РеглОтчет,
	|	РегламентированныйОтчет.Организация КАК Организация
	|ПОМЕСТИТЬ РеглОтчеты
	|ИЗ
	|	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
	|ГДЕ
	|	НЕ РегламентированныйОтчет.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА РеглОтчеты.Организация.ОбособленноеПодразделение
	|			ТОГДА РеглОтчеты.Организация.ГоловнаяОрганизация
	|		ИНАЧЕ РеглОтчеты.Организация
	|	КОНЕЦ КАК Организация,
	|	РеглОтчеты.РеглОтчет
	|ИЗ
	|	РеглОтчеты КАК РеглОтчеты
	|ИТОГИ ПО
	|	Организация";
	
	ВыборкаОрганизации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока ВыборкаОрганизации.Следующий() Цикл
		
		НалогиОтчетыДолжныБытьВключены = Новый Соответствие; // Чтобы исключить дубли
		УсловияДолжныБытьВключены      = Новый Соответствие;
		
		Отбор = Новый Структура;
		
		Выборка = ВыборкаОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока Выборка.Следующий() Цикл
		
			Отбор.Вставить("РеглОтчет", Выборка.РеглОтчет);
			
			// Задачи, которые можно включать
			ВключитьЗадачи = РеглОтчетыКоторыеВключаютЗадачи.НайтиСтроки(Отбор);
			Для Каждого ОписаниеЗадачи Из ВключитьЗадачи Цикл
				НалогиОтчетыДолжныБытьВключены.Вставить(ОписаниеЗадачи.Задача);
			КонецЦикла;
		
			// Правила, которые можно включать
			ВключитьПравила = РеглОтчетыКоторыеВключаютПравила.НайтиСтроки(Отбор);
			Для Каждого ОписаниеПравила Из ВключитьПравила Цикл
				НалогиОтчетыДолжныБытьВключены.Вставить(ОписаниеПравила.Правило);
			КонецЦикла;
			
			// Условия, которые надо включить
			ВключитьУсловия = РеглОтчетыКоторыеВключаютУсловия.НайтиСтроки(Отбор);
			Для Каждого ОписаниеУсловия Из ВключитьУсловия Цикл
				УсловияДолжныБытьВключены.Вставить(ОписаниеУсловия.Условие, ОписаниеУсловия.Условие);
			КонецЦикла;
			
		КонецЦикла;
		
		// Запишем список отчетов
		Для Каждого КлючИЗначение Из НалогиОтчетыДолжныБытьВключены Цикл
			НоваяЗапись = ЗаписиНалогиОтчеты.Добавить();
			НоваяЗапись.Организация = ВыборкаОрганизации.Организация;
			НоваяЗапись.НалогОтчет  = КлючИЗначение.Ключ;
		КонецЦикла;
			
		// Проверим совместимость условий
		ВключитьУсловия = Новый Массив;
		Для Каждого Настройка Из НастройкиПримененияТребований Цикл
			
			Если ТипЗнч(Настройка.Варианты) = Тип("ТаблицаЗначений") Тогда
				Если Настройка.Варианты.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				ВариантПоУмолчанию = Настройка.Варианты[0].Условие;
				Если УсловияДолжныБытьВключены[ВариантПоУмолчанию] <> Неопределено Тогда
					// Вариант по умолчанию не записываем
					Продолжить;
				КонецЕсли;
				Для Каждого Вариант Из Настройка.Варианты Цикл
					Условие = Вариант.Условие;
					Если ЗначениеЗаполнено(Условие) Тогда
						Если УсловияДолжныБытьВключены[Условие] <> Неопределено Тогда
							ВключитьУсловия.Добавить(Условие);
							Прервать; // Берем только первый подходящий вариант - остальные с ним несовместны
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ТипЗнч(Настройка.Варианты) = Тип("ПеречислениеСсылка.УсловияПримененияТребованийЗаконодательства") Тогда
				Если УсловияДолжныБытьВключены[Настройка.Варианты] <> Неопределено Тогда
					ВключитьУсловия.Добавить(Настройка.Варианты);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		// Запишем условия, определяющие варианты требований, в регистр
		Для Каждого Условие Из ВключитьУсловия Цикл
			НоваяЗапись = ЗаписиВариантыТребований.Добавить();
			НоваяЗапись.Организация = ВыборкаОрганизации.Организация;
			НоваяЗапись.Условие     = Условие;
		КонецЦикла;
		
	КонецЦикла;
	
	Если ЗаписиНалогиОтчеты.Модифицированность() Тогда
		ЗаписиНалогиОтчеты.Записать();
	КонецЕсли;
	
	Если ЗаписиВариантыТребований.Модифицированность() Тогда
		ЗаписиВариантыТребований.Записать();
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли
