
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Параметры.Организация) Тогда
		Организация = Параметры.Организация;
	Иначе
		Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;
	
	ПравоРедактированияНастроек = 
		ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НалогиОтчеты)
		И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ПорядокУплатыАкцизов)
		И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ПорядокУплатыНалоговНаМестах)
		И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ВариантыПримененияТребованийЗаконодательства);
	
	ЗаполнитьПоОрганизации();
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ПустаяСтрока(РезультатБлокировки) Тогда
		ПоказатьПредупреждение( , РезультатБлокировки);
		РезультатБлокировки = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		
		Отказ = Истина;
		
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗакрытиемЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		
		Модифицированность = Ложь;
		Закрыть();
		
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
		
		Записать();
		ОповеститьОбИзмененииНастроек();
		Модифицированность = Ложь;
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Организации" Тогда
		Если Организация = Источник Тогда
			ЗаполнитьПоОрганизации();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
	Если Не ПустаяСтрока(РезультатБлокировки) Тогда
		ПоказатьПредупреждение( , РезультатБлокировки);
		РезультатБлокировки = "";
	КонецЕсли;
	
КонецПроцедуры

Процедура ОрганизацияПриИзмененииНаСервере()
	
	РазблокироватьДанныеДляРедактирования(, УникальныйИдентификатор); // Все разблокируем
	ЗаполнитьПоОрганизации();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокИспользованиеПриИзменении(Элемент)
	
	Строка = Список.НайтиПоИдентификатору(Элементы.Список.ТекущаяСтрока);
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Строки = Строка.ПолучитьЭлементы();
	
	// Подчиненные строки
	Для Каждого ПодСтрока Из Строки Цикл
		ПодСтрока.Включен = Строка.Включен;
	КонецЦикла;
	
	// Вышележащая строка
	Родитель = Строка.ПолучитьРодителя();
	Если Родитель <> Неопределено Тогда
		Родитель.Включен = Ложь;
		Строки = Родитель.ПолучитьЭлементы();
		Для Каждого ПодСтрока Из Строки Цикл
			Родитель.Включен = Родитель.Включен Или ПодСтрока.Включен;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ДетальнаяНастройка" Тогда
		
		Если Элементы.Список.ТолькоПросмотр Тогда
			Возврат;
		КонецЕсли;
		
		Строка = Список.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Если Строка = Неопределено Или Не Строка.ЕстьДетальнаяНастройка Тогда
			Возврат;
		КонецЕсли;
			
		ПараметрыФормы = Новый Структура;
		Если Строка.Ключ <> "" Тогда
			Родитель = Строка.ПолучитьРодителя();
			Если Родитель = Неопределено Тогда
				Возврат;
			КонецЕсли;
			ПредметНастройки = Строка.Ключ;
			НалогОтчет = Родитель.Наименование + " (" + Строка.Наименование + ")";
		ИначеЕсли ТипЗнч(Строка.Ссылка) = Тип("ПеречислениеСсылка.ВидыПодакцизныхТоваров") Тогда
			Родитель = Строка.ПолучитьРодителя();
			Если Родитель = Неопределено Тогда
				Возврат;
			КонецЕсли;
			ПредметНастройки = Строка.Ссылка;
			НалогОтчет = Родитель.Ссылка;
		Иначе
			ПредметНастройки = Строка.Ссылка;
			НалогОтчет = Строка.Ссылка;
		КонецЕсли;
		ПараметрыФормы.Вставить("ПредметНастройки",                 ПредметНастройки);
		ПараметрыФормы.Вставить("НалогОтчет",                       НалогОтчет);
		ПараметрыФормы.Вставить("АдресЗначенияДетальнойНастройки",  АдресЗначенияДетальнойНастройки);
		ПараметрыФормы.Вставить("АдресПараметрыДетальнойНастройки", АдресПараметрыДетальнойНастройки);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ВыбраннаяСтрока", ВыбраннаяСтрока);
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("СписокВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("РегистрСведений.НалогиОтчеты.Форма.ДетальнаяНастройка", ПараметрыФормы,,,,,ОповещениеОЗакрытии);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ВыбраннаяСтрока = ДополнительныеПараметры.ВыбраннаяСтрока;
	
	РезультатДетальнойНастройки = РезультатЗакрытия;
	
	Если ТипЗнч(РезультатДетальнойНастройки) = Тип("Массив") Тогда
		Модифицированность = Истина;
		ОбработатьРезультатДетальнойНастройки(ВыбраннаяСтрока, РезультатДетальнойНастройки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные.НалогУплачиваетсяНаМестах Тогда
		
		ЕстьОшибки = Ложь;
		
		Строка = Список.НайтиПоИдентификатору(Элементы.Список.ТекущаяСтрока);
		Если Строка = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Строки = Строка.ПолучитьЭлементы();
		
		Для Каждого Подстрока Из Строки Цикл
			Если НЕ ЗначениеЗаполнено(Подстрока.РегистрацияВНалоговомОргане) Тогда
				Подстрока.Включен = Ложь;
				ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьОшибки Тогда
			ШаблонСообщения = НСтр("ru='Не заполнен код налоговой инспекции для организации %1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Организация);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Организация, "КодНалоговогоОргана");
			ТекущиеДанные.Включен = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаЗаписатьИЗакрыть(Команда)
	
	Если Модифицированность Тогда
		
		Записать(Ложь);
		ОповеститьОбИзмененииНастроек();
		
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписать(Команда)
	
	Если Модифицированность Тогда
		
		Записать();
		ОповеститьОбИзмененииНастроек();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Заполнение

&НаСервере
Процедура ЗаполнитьПоОрганизации()
	
	Модифицированность = Ложь;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Элементы.Список.ТолькоПросмотр = Истина;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПараметрыДетальнойНастройки();
	
	Если Не ПравоРедактированияНастроек Тогда
		Элементы.Список.ТолькоПросмотр = Истина;
	Иначе
	
		Элементы.Список.ТолькоПросмотр = Ложь;
		
		// Так как изменяем данные разных записей в одной форме, 
		// то наложим пессимистическую объектную блокировку вручную - 
		// по специальному набору измерений, который никогда не будет записан в регистр.
		ОписаниеКлюча = Новый Структура("Организация", Организация); 
		РезультатБлокировки = "";
		Попытка 
			ЗаблокироватьДанныеДляРедактирования(
				РегистрыСведений.НалогиОтчеты.СоздатьКлючЗаписи(ОписаниеКлюча),
				, // Данные не хранятся в ИБ
				УникальныйИдентификатор); // На все время жизни формы
		Исключение
			Элементы.Список.ТолькоПросмотр = Истина;
			РезультатБлокировки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
		
	КонецЕсли;
	
	// Запомним, на какой строке стоял курсор - потом оставим его на этой же
	ТекущаяСтрока = Неопределено;
	Если Элементы.Список.ТекущаяСтрока <> Неопределено Тогда
		Строка = Список.НайтиПоИдентификатору(Элементы.Список.ТекущаяСтрока);
		Если Строка <> Неопределено Тогда
			ТекущаяСтрока = Строка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	// Заполняем Список и ЗначенияДетальнойНастройки
	
	Дерево = РеквизитФормыВЗначение("Список");
	Дерево.Строки.Очистить();
	
	ПараметрыДетальнойНастройки = ПолучитьИзВременногоХранилища(АдресПараметрыДетальнойНастройки);
	// ЗначенияДетальнойНастройки будут помещены во временное хранилище
	// с адресом АдресЗначенияДетальнойНастройки
	ЗначенияДетальнойНастройки  = НовыйЗначенияДетальнойНастройки(ПараметрыДетальнойНастройки);
	
	// Список включенных правил
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ТекущаяДата = ТекущаяДатаСеанса();
	ВключенныеПравила = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ВключенныеПравилаОрганизации(Организация);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВключенныеПравила", ВключенныеПравила);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Правила.Правило КАК Правило,
	|	Правила.ВключеноПользователем КАК ВключеноПользователем
	|ПОМЕСТИТЬ ВТ_ВключенныеПравила
	|ИЗ
	|	&ВключенныеПравила КАК Правила
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Правило
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Правила.Ссылка КАК Правило,
	|	Правила.Владелец КАК Задача,
	|	ВключенныеПравила.ВключеноПользователем КАК ВключеноПользователем
	|ПОМЕСТИТЬ ВключенныеПравила
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК Правила
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ВключенныеПравила КАК ВключенныеПравила
	|		ПО Правила.Ссылка = ВключенныеПравила.Правило
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Правило
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ВключенныеПравила";
	Запрос.Выполнить();
	
	// ПЕРВЫЙ УРОВЕНЬ ДЕРЕВА
		
	// Список задач
	НалогиУплачиваемыеНаМестах = РегистрыСведений.ПорядокУплатыНалоговНаМестах.НалогиПорядокКоторыхУстанавливаетсяНаМестах();
	ТаблицаНалоговУплачиваемыхНаМестах = Новый ТаблицаЗначений;
	ТаблицаНалоговУплачиваемыхНаМестах.Колонки.Добавить("Налог", Новый ОписаниеТипов("СправочникСсылка.ЗадачиБухгалтера"));
	Для Каждого Налог Из НалогиУплачиваемыеНаМестах Цикл
		СтрокаТаблицыНалогов = ТаблицаНалоговУплачиваемыхНаМестах.Добавить();
		СтрокаТаблицыНалогов.Налог = Налог;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаНалоговУплачиваемыхНаМестах", ТаблицаНалоговУплачиваемыхНаМестах);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НалогиУплачиваемыеНаМестах.Налог КАК Налог
	|ПОМЕСТИТЬ НалогиУплачиваемыеНаМестах
	|ИЗ
	|	&ТаблицаНалоговУплачиваемыхНаМестах КАК НалогиУплачиваемыеНаМестах
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Налог
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Правила.Задача КАК Задача,
	|	МАКСИМУМ(Правила.ВключеноПользователем) КАК ВключеноПользователем
	|ПОМЕСТИТЬ ВключенныеЗадачи
	|ИЗ
	|	ВключенныеПравила КАК Правила
	|
	|СГРУППИРОВАТЬ ПО
	|	Правила.Задача
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Задача
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиБухгалтера.Ссылка КАК Ссылка,
	|	ЗадачиБухгалтера.НаименованиеПолное КАК Наименование,
	|	ЗадачиБухгалтера.РеквизитДопУпорядочивания КАК Порядок,
	|	ВЫБОР
	|		КОГДА Включены.Задача ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ Включены.ВключеноПользователем
	|	КОНЕЦ КАК ВключаетсяПользователем,
	|	ВЫБОР
	|		КОГДА НЕ Включены.Задача ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Включен,
	|	ВЫБОР
	|		КОГДА НалогиУплачиваемыеНаМестах.Налог ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК НалогУплачиваетсяНаМестах
	|ИЗ
	|	Справочник.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВключенныеЗадачи КАК Включены
	|		ПО ЗадачиБухгалтера.Ссылка = Включены.Задача
	|		ЛЕВОЕ СОЕДИНЕНИЕ НалогиУплачиваемыеНаМестах КАК НалогиУплачиваемыеНаМестах
	|		ПО ЗадачиБухгалтера.Ссылка = НалогиУплачиваемыеНаМестах.Налог
	|ГДЕ
	|	НЕ ЗадачиБухгалтера.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Дерево.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
	// Другие детальные настройки: варианты применения требований законодательства в разных условиях
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВыбранныеУсловия.Условие
	|ИЗ
	|	РегистрСведений.ВариантыПримененияТребованийЗаконодательства КАК ВыбранныеУсловия
	|ГДЕ
	|	ВыбранныеУсловия.Организация = &Организация
	|";
	УсловияВыбранныеПользователем = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Условие");
	
	Для Каждого Строка Из Дерево.Строки Цикл
		
		ПараметрыНастройкиНалогаОтчета = ПараметрыДетальнойНастройки[Строка.Ссылка];
		
		Если ПараметрыНастройкиНалогаОтчета = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для ИндексПараметра = 0 По ПараметрыНастройкиНалогаОтчета.ВГраница() Цикл
			
			ОписаниеПараметра = ПараметрыНастройкиНалогаОтчета[ИндексПараметра];
			
			Если ОписаниеПараметра = "ПорядокУплатыНалоговНаМестах" Тогда
				Продолжить;
			КонецЕсли;
			
			СпособОписанияВариантов = ТипЗнч(ОписаниеПараметра.Варианты);
			Если СпособОписанияВариантов = Тип("ПеречислениеСсылка.УсловияПримененияТребованийЗаконодательства") Тогда
				
				ЗначениеПараметра = (УсловияВыбранныеПользователем.Найти(ОписаниеПараметра.Варианты) <> Неопределено);
				
				ДобавитьЗначениеДетальнойНастройки(
					ЗначенияДетальнойНастройки,
					Строка.Ссылка,
					ИндексПараметра,
					ЗначениеПараметра);
				
			ИначеЕсли СпособОписанияВариантов = Тип("ТаблицаЗначений") Тогда
				
				ЗначениеПараметра = 0; // Вариант по умолчанию
				Для Каждого Вариант Из ОписаниеПараметра.Варианты Цикл
					Если УсловияВыбранныеПользователем.Найти(Вариант.Условие) <> Неопределено Тогда
						ЗначениеПараметра = ОписаниеПараметра.Варианты.Индекс(Вариант);
					КонецЕсли;
				КонецЦикла;
				
				ДобавитьЗначениеДетальнойНастройки(
					ЗначенияДетальнойНастройки,
					Строка.Ссылка,
					ИндексПараметра,
					ЗначениеПараметра);
					
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	// ВТОРОЙ УРОВЕНЬ ДЕРЕВА
	
	// Порядок уплаты нефедеральных налогов
	ПорядокУплатыНефедеральныхНалогов = РегистрыСведений.ПорядокУплатыНалоговНаМестах.ПорядокУплатыРегиональныхМестныхНалогов(Организация, ТекущаяДатаСеанса());
	
	Свойства = Новый Структура("КодКонтролирующегоОргана, ВидКонтролирующегоОргана",
		"", Перечисления.ТипыКонтролирующихОрганов.ФНС);
	
	КодыКонтролирующихОрганов = Новый Соответствие;
	
	НалоговыеОрганы = ПорядокУплатыНефедеральныхНалогов.ВыгрузитьКолонку("РегистрацияВНалоговомОргане");
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НалоговыеОрганы", НалоговыеОрганы);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РегистрацииВНалоговомОргане.Ссылка КАК РегистрацияВНалоговомОргане,
	|	РегистрацииВНалоговомОргане.Код КАК КодКонтролирующегоОргана
	|ИЗ
	|	Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	|ГДЕ
	|	РегистрацииВНалоговомОргане.Ссылка В(&НалоговыеОрганы)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		КодыКонтролирующихОрганов.Вставить(Выборка.РегистрацияВНалоговомОргане, Выборка.КодКонтролирующегоОргана);
	КонецЦикла;
	
	Для Каждого ПорядокУплатыНалога Из ПорядокУплатыНефедеральныхНалогов Цикл
		
		РодительНалог = Дерево.Строки.Найти(ПорядокУплатыНалога.Налог, "Ссылка");
		
		Если РодительНалог <> Неопределено Тогда
			
			НоваяСтрока = РодительНалог.Строки.Добавить();
			НоваяСтрока.Ссылка = ПорядокУплатыНалога.Налог;
			НоваяСтрока.РегистрацияВНалоговомОргане = ПорядокУплатыНалога.РегистрацияВНалоговомОргане;
			НоваяСтрока.Ключ = Строка(ПорядокУплатыНалога.Налог.УникальныйИдентификатор())
				+ Строка(ПорядокУплатыНалога.РегистрацияВНалоговомОргане.УникальныйИдентификатор());
			НоваяСтрока.ВключаетсяПользователем = Ложь;
			НоваяСтрока.Включен = РодительНалог.Включен;
			НоваяСтрока.ЕстьДетальнаяНастройка = Истина;
			НоваяСтрока.ДетальнаяНастройкаПредставление = ПорядокУплатыНалога.Описание;
			
			Если ЗначениеЗаполнено(ПорядокУплатыНалога.РегистрацияВНалоговомОргане) Тогда
				Свойства.КодКонтролирующегоОргана = КодыКонтролирующихОрганов[ПорядокУплатыНалога.РегистрацияВНалоговомОргане];
				НоваяСтрока.Наименование = РегламентированнаяОтчетностьВызовСервера.ПредставлениеКонтролирующегоОргана(Свойства);
			Иначе
				НоваяСтрока.Наименование = НСтр("ru = 'По месту нахождения организации'");
			КонецЕсли;
			
			ПараметрыНастройкиНалогаОтчета = ПараметрыДетальнойНастройки[НоваяСтрока.Ключ];
			Если ПараметрыНастройкиНалогаОтчета = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ИндексПараметра = ПараметрыНастройкиНалогаОтчета.Найти("ПорядокУплатыНалоговНаМестах");
			Если ИндексПараметра = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураПорядокУплаты = Новый Структура;
			СтруктураПорядокУплаты.Вставить("Период");
			СтруктураПорядокУплаты.Вставить("Налог");
			СтруктураПорядокУплаты.Вставить("СрокУплатыНалогаМесяцев");
			СтруктураПорядокУплаты.Вставить("СрокУплатыНалогаДней");
			СтруктураПорядокУплаты.Вставить("УплачиваютсяАвансы");
			СтруктураПорядокУплаты.Вставить("СрокУплатыАвансаМесяцев");
			СтруктураПорядокУплаты.Вставить("СрокУплатыАвансаДней");
			СтруктураПорядокУплаты.Вставить("Описание");
			ЗаполнитьЗначенияСвойств(СтруктураПорядокУплаты, ПорядокУплатыНалога);
		
			ДобавитьЗначениеДетальнойНастройки(
				ЗначенияДетальнойНастройки,
				НоваяСтрока.Ключ,
				ИндексПараметра,
				СтруктураПорядокУплаты);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Список отчетов, подчиненных задачам, который составляется пользователем непосредственно
	// Не допускаются правила, которые включаются _автоматически_ и находятся на втором уровне
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Правила.Ссылка КАК Правило
	|ПОМЕСТИТЬ ПравилаВключаемыеПользователем
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов.Условия КАК Правила
	|ГДЕ
	|	Правила.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияПримененияТребованийЗаконодательства.ПравилоВыбраноПользователем)
	|	И НЕ Правила.Ссылка.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Правило
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Правила.Правило.Владелец КАК Задача,
	|	Правила.Правило КАК Ссылка,
	|	Правила.Правило.Наименование КАК Наименование,
	|	ИСТИНА КАК ВключаетсяПользователем,
	|	ВЫБОР
	|		КОГДА ВключенныеПравила.Правило ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Включен
	|ИЗ
	|	ПравилаВключаемыеПользователем КАК Правила
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВключенныеПравила КАК ВключенныеПравила
	|		ПО Правила.Правило = ВключенныеПравила.Правило
	|
	|УПОРЯДОЧИТЬ ПО
	|	Правила.Правило.РеквизитДопУпорядочивания
	|ИТОГИ
	|	МАКСИМУМ(Включен)
	|ПО
	|	Задача";
	
	ВыборкаЗадач = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЗадач.Следующий() Цикл
		
		Родитель = Дерево.Строки.Найти(ВыборкаЗадач.Задача, "Ссылка");
		Если Родитель = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Родитель.Включен = Родитель.Включен Или ВыборкаЗадач.Включен;
		
		Выборка = ВыборкаЗадач.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = Родитель.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЦикла;
		
	КонецЦикла;
	
	// Список подакцизных товаров и значения их детальной настройки
	
	Акцизы = Справочники.ЗадачиБухгалтера.НайтиПоКоду("Акцизы");
	Если Не Акцизы.Пустая() Тогда
		РодительАкцизы = Дерево.Строки.Найти(Акцизы, "Ссылка");
	Иначе
		РодительАкцизы = Неопределено;
	КонецЕсли;
	
	Если РодительАкцизы <> Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация",        Организация);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыПодакцизныхТоваров.Ссылка КАК Ссылка,
		|	ВидыПодакцизныхТоваров.Порядок КАК Порядок,
		|	ПРЕДСТАВЛЕНИЕ(ВидыПодакцизныхТоваров.Ссылка) КАК Наименование,
		|	ВЫБОР
		|		КОГДА ПорядокУплатыАкцизов.ВидТовара ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Включен,
		|	ЕСТЬNULL(ПорядокУплатыАкцизов.ЛьготныйСрокУплаты, ЛОЖЬ) КАК ЛьготныйСрокУплаты,
		|	ЕСТЬNULL(ПорядокУплатыАкцизов.АвансыПриЗакупкеСырья, ЛОЖЬ) КАК АвансыПриЗакупкеСырья
		|ИЗ
		|	Перечисление.ВидыПодакцизныхТоваров КАК ВидыПодакцизныхТоваров
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУплатыАкцизов КАК ПорядокУплатыАкцизов
		|		ПО ВидыПодакцизныхТоваров.Ссылка = ПорядокУплатыАкцизов.ВидТовара
		|			И (ПорядокУплатыАкцизов.Организация = &Организация)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";
		
		Отбор = Новый Структура;
		Отбор.Вставить("ЛьготныйСрокУплаты");
		Отбор.Вставить("АвансыПриЗакупкеСырья");
		
		ОрганизацияПлатитАкцизы = Ложь;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = РодительАкцизы.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.ВключаетсяПользователем = Истина;
			
			// Определим, как настройка выполнена сейчас
			ПараметрыНастройкиВидаАкциза = ПараметрыДетальнойНастройки[Выборка.Ссылка];
			
			Если ПараметрыНастройкиВидаАкциза = Неопределено Тогда
				// Не требует настройки
			Иначе
				
				ЗаполнитьЗначенияСвойств(Отбор, Выборка);
				
				Для ИндексЭлементаНастройки = 0 По ПараметрыНастройкиВидаАкциза.Количество()-1 Цикл
					
					ЭлементНастройки = ПараметрыНастройкиВидаАкциза[ИндексЭлементаНастройки];
					
					Настройка = ЭлементНастройки.Варианты.НайтиСтроки(Отбор);
					Если Настройка.Количество() = 1 Тогда
						
						ДобавитьЗначениеДетальнойНастройки(
							ЗначенияДетальнойНастройки,
							Выборка.Ссылка,
							ИндексЭлементаНастройки,
							ЭлементНастройки.Варианты.Индекс(Настройка[0]));
							
					КонецЕсли;
						
				КонецЦикла; // По элементам настройки
				
				НоваяСтрока.ЕстьДетальнаяНастройка = Истина;
				НоваяСтрока.ДетальнаяНастройкаПредставление = ПредставлениеДетальнойНастройки(
					ПараметрыНастройкиВидаАкциза,
					ЗначенияДетальнойНастройки[Выборка.Ссылка]);
					
			КонецЕсли; // Закончили считывать настройку
			
		КонецЦикла; // По видам товаров (элементам выборки)
		
	КонецЕсли; // Акцизы
	
	// Условия, выбираемые в списке
	
	НастройкиПримененияТребований = РегистрыСведений.ВариантыПримененияТребованийЗаконодательства.НастройкиПримененияТребований();
	
	Для Каждого Настройка Из НастройкиПримененияТребований Цикл
		
		Если Не Настройка.ВыбиратьВСписке Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Настройка.Варианты) <> Тип("ПеречислениеСсылка.УсловияПримененияТребованийЗаконодательства") Тогда
			Продолжить;
		КонецЕсли;
		
		Родитель = Дерево.Строки.Найти(Настройка.Задача ,"Ссылка");
		Если Родитель = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Родитель.Строки.Добавить();
		НоваяСтрока.Ссылка                  = Настройка.Варианты;
		НоваяСтрока.Наименование            = Настройка.Наименование;
		НоваяСтрока.ВключаетсяПользователем = Истина;
		НоваяСтрока.Включен                 = (УсловияВыбранныеПользователем.Найти(НоваяСтрока.Ссылка) <> Неопределено);
		
	КонецЦикла;
	
	Для Каждого Строка Из Дерево.Строки Цикл
		
		Строка.ЕстьДетальнаяНастройка = Истина;
		Строка.ДетальнаяНастройкаПредставление = ПредставлениеДетальнойНастройки(
			ПараметрыДетальнойНастройки[Строка.Ссылка],
			ЗначенияДетальнойНастройки[Строка.Ссылка]);
		
	КонецЦикла;

	ЗначениеВРеквизитФормы(Дерево, "Список");
	АдресЗначенияДетальнойНастройки = ПоместитьВоВременноеХранилище(ЗначенияДетальнойНастройки, УникальныйИдентификатор);
	
	// Восстановим положение курсора
	Если ТекущаяСтрока <> Неопределено Тогда
		// Поиск по коллекции рекурсивным перебором
		ИдентификаторСтроки = НайтиНалогОтчетВСписке(Список, ТекущаяСтрока);
		Если ИдентификаторСтроки <> Неопределено Тогда
			Строка = Список.НайтиПоИдентификатору(ИдентификаторСтроки);
			Элементы.Список.ТекущаяСтрока = ИдентификаторСтроки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НайтиНалогОтчетВСписке(Список, Ссылка) 
	
	Для Каждого ЭлементСписка Из Список.ПолучитьЭлементы() Цикл
		
		Если ЭлементСписка.Ссылка = Ссылка Тогда
			Возврат ЭлементСписка.ПолучитьИдентификатор();
		КонецЕсли;
		
		РезультатПоискаНиже = НайтиНалогОтчетВСписке(ЭлементСписка, Ссылка);
		Если РезультатПоискаНиже <> Неопределено Тогда
			Возврат РезультатПоискаНиже;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область РаботаСКоллекциямиДетальныхНастроек

&НаСервере
Процедура ЗаполнитьПараметрыДетальнойНастройки()
	
	// Параметры детальной настройки
	ПараметрыДетальнойНастройки = Новый Соответствие; 
	// Элемент соответствия описывает все варианты настройки для строки списка.
	// Ключ - Ссылка
	// Значение - Массив с описанием настраиваемых параметров
	
	// Акцизы
	НастройкиУплатыАкцизов = РегистрыСведений.ПорядокУплатыАкцизов.НастройкиУплатыАкцизов();
	Для Каждого Настройка Из НастройкиУплатыАкцизов Цикл
		
		// Настройка содержит колонки "ЗаголовокВыбора", "Варианты"
		ДобавитьОписаниеДетальнойНастройки(ПараметрыДетальнойНастройки, Настройка.ВидТовара, Настройка);
		
	КонецЦикла;
	
	// Налоги, порядок уплаты которых устанавливается на региональном или местном уровне
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц; // Хранит МестныеНалогиВРазрезеНалоговыхОрганов
	РегистрыСведений.ПорядокУплатыНалоговНаМестах.СоздатьМестныеНалогиВРазрезеНалоговыхОрганов(МенеджерВременныхТаблиц, Организация);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МестныеНалогиВРазрезеНалоговыхОрганов.Налог,
	|	МестныеНалогиВРазрезеНалоговыхОрганов.НалоговыйОрган
	|ИЗ
	|	МестныеНалогиВРазрезеНалоговыхОрганов КАК МестныеНалогиВРазрезеНалоговыхОрганов";
	
	ДецентрализованныеНалоги = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Налог Из ДецентрализованныеНалоги Цикл
		Ключ = Строка(Налог.Налог.УникальныйИдентификатор()) + Строка(Налог.НалоговыйОрган.УникальныйИдентификатор());
		ДобавитьОписаниеДетальнойНастройки(ПараметрыДетальнойНастройки, Ключ, "ПорядокУплатыНалоговНаМестах");
	КонецЦикла;
	
	// Другие требования
	НастройкиПримененияТребований = РегистрыСведений.ВариантыПримененияТребованийЗаконодательства.НастройкиПримененияТребований();
	Для Каждого Настройка Из НастройкиПримененияТребований Цикл
		
		Если Настройка.ВыбиратьВСписке Тогда
			// Не является детальной настройкой - выбирается в основном списке настроек
			Продолжить;
		КонецЕсли;
		
		// Настройка содержит колонки "ЗаголовокВыбора", "Варианты"
		ДобавитьОписаниеДетальнойНастройки(ПараметрыДетальнойНастройки, Настройка.Задача, Настройка);
		
	КонецЦикла;
	
	АдресПараметрыДетальнойНастройки = ПоместитьВоВременноеХранилище(ПараметрыДетальнойНастройки, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Функция ДобавитьОписаниеДетальнойНастройки(КоллекцияОписаний, ПредметНастройки, НаборПараметров)
	
	ОписаниеНастройки = КоллекцияОписаний[ПредметНастройки];
	Если ОписаниеНастройки = Неопределено Тогда
		ОписаниеНастройки = Новый Массив;
		КоллекцияОписаний.Вставить(ПредметНастройки, ОписаниеНастройки);
	КонецЕсли;
	
	Если НаборПараметров = "ПорядокУплатыНалоговНаМестах" Тогда
		ОписаниеНастройки.Добавить(НаборПараметров);
	Иначе
		ОписаниеНастройки.Добавить(ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(НаборПараметров));
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция НовыйЗначенияДетальнойНастройки(ПараметрыДетальнойНастройки)
	
	// См. также ДобавитьЗначениеДетальнойНастройки()
	ЗначенияДетальнойНастройки = Новый Соответствие;
	
	Для Каждого ОписаниеДетальнойНастройки Из ПараметрыДетальнойНастройки Цикл
		
		Настройки = Новый Массив(ОписаниеДетальнойНастройки.Значение.Количество());
		
		ЗначенияДетальнойНастройки.Вставить(ОписаниеДетальнойНастройки.Ключ, Настройки);
		
	КонецЦикла;
	
	Возврат ЗначенияДетальнойНастройки;
	
КонецФункции

&НаСервере
Процедура ДобавитьЗначениеДетальнойНастройки(КоллекцияНастроек, ПредметНастройки, ИндексПараметра, ЗначениеПараметра)
	
	// КоллекцияНастроек - это соответствие.
	//  Ключ     - Ссылка 
	//  Значение - Массив
	//   - индекс массива - индекс настраиваемого параметра (строки таблицы из АдресПараметрыДетальнойНастройки)
	//   - элементы
	//       - Число - индекс строки таблицы Варианты, описывающей значение параметра
	//       - Структура - состав свойств как ресурсы регистра ПорядокУплатыНалоговНаМестах
	
	Настройки = КоллекцияНастроек[ПредметНастройки];
	Если Настройки = Неопределено Тогда
		Возврат; // Должна быть инициализирована
	КонецЕсли;
	
	Настройки[ИндексПараметра] = ЗначениеПараметра;
	
КонецПроцедуры

&НаСервере
Функция ПредставлениеДетальнойНастройки(ПараметрыДетальнойНастройки, ЗначенияДетальнойНастройки)
	
	Если ПараметрыДетальнойНастройки = Неопределено Или ЗначенияДетальнойНастройки = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Представления = Новый Массив;
	
	Для Индекс = 0 По ЗначенияДетальнойНастройки.ВГраница() Цикл
		
		ОписаниеПараметра = ПараметрыДетальнойНастройки[Индекс];
		ЗначениеПараметра = ЗначенияДетальнойНастройки[Индекс];
		
		Если ЗначениеПараметра = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОписаниеПараметра = "ПорядокУплатыНалоговНаМестах" Тогда
			Представления.Добавить(ЗначениеПараметра.Описание);
		Иначе
			ЗначениеПараметра = ОписаниеПараметра.Варианты[ЗначениеПараметра];
			Представления.Добавить(ЗначениеПараметра.Представление);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(Представления, "; ");
	
КонецФункции

&НаСервере
Процедура ОбработатьРезультатДетальнойНастройки(ИдентификаторСтроки, РезультатДетальнойНастройки)
	
	Строка = Список.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Строка.Включен Тогда
		Строка.Включен     = Истина;
	КонецЕсли;
	
	ПараметрыДетальнойНастройки = ПолучитьИзВременногоХранилища(АдресПараметрыДетальнойНастройки);
	Если Строка.Ключ = "" Тогда
		ОписаниеПараметров = ПараметрыДетальнойНастройки[Строка.Ссылка];
	Иначе
		ОписаниеПараметров = ПараметрыДетальнойНастройки[Строка.Ключ];
	КонецЕсли;
	
	// Обновим описание порядка уплаты налогов на местах
	Для ИндексПараметра = 0 По ОписаниеПараметров.ВГраница() Цикл
		Если ОписаниеПараметров[ИндексПараметра] = "ПорядокУплатыНалоговНаМестах" Тогда
			НастройкиУплатыНалога = РезультатДетальнойНастройки[ИндексПараметра];
			Если ТипЗнч(НастройкиУплатыНалога) = Тип("Структура") Тогда
				НастройкиУплатыНалога.Вставить("Описание", "");
				РегистрыСведений.ПорядокУплатыНалоговНаМестах.УстановитьОписание(НастройкиУплатыНалога);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Изменим значения во временном хранилище значений.
	ЗначенияДетальнойНастройки = ПолучитьИзВременногоХранилища(АдресЗначенияДетальнойНастройки);
	Если ЗначенияДетальнойНастройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Строка.Ключ = "" Тогда
		ЗначенияДетальнойНастройки.Вставить(Строка.Ссылка, РезультатДетальнойНастройки);
	Иначе
		ЗначенияДетальнойНастройки.Вставить(Строка.Ключ, РезультатДетальнойНастройки);
	КонецЕсли;
	АдресЗначенияДетальнойНастройки = ПоместитьВоВременноеХранилище(ЗначенияДетальнойНастройки, УникальныйИдентификатор);
	
	// Обновим представление детальной настройки
	Строка.ДетальнаяНастройкаПредставление = ПредставлениеДетальнойНастройки(
		ОписаниеПараметров,
		РезультатДетальнойНастройки);
	
КонецПроцедуры

#КонецОбласти

#Область СохранениеРезультатовРаботы

&НаСервере
Процедура Записать(ОбновитьСписок = Истина)
	
	Дерево = РеквизитФормыВЗначение("Список");
	ЗначенияДетальнойНастройки  = ПолучитьИзВременногоХранилища(АдресЗначенияДетальнойНастройки);
	ПараметрыДетальнойНастройки = ПолучитьИзВременногоХранилища(АдресПараметрыДетальнойНастройки);
	
	// Запишем:
	// НалогиОтчеты
	// ПорядокУплатыАкцизов
	// ВариантыПримененияТребованийЗаконодательства
	// ПорядокУплатыНалоговНаМестах
	
	// 1. Список налогов
	
	// НалогиОтчеты
	НаборЗаписейНалогиОтчеты = РегистрыСведений.НалогиОтчеты.СоздатьНаборЗаписей();
	НаборЗаписейНалогиОтчеты.Отбор.Организация.Установить(Организация);
	
	ТипНастройки = Метаданные.РегистрыСведений.НалогиОтчеты.Измерения.НалогОтчет.Тип;
	
	НалогиУплачиваемыеНаМестах = РегистрыСведений.ПорядокУплатыНалоговНаМестах.НалогиПорядокКоторыхУстанавливаетсяНаМестах();
	
	Отбор = Новый Структура;
	Отбор.Вставить("ВключаетсяПользователем", Истина);
	Отбор.Вставить("Включен",                 Истина);
	Для Каждого Строка Из Дерево.Строки.НайтиСтроки(Отбор, Истина) Цикл
		
		Если Строка.Строки.Количество() > 0 И НалогиУплачиваемыеНаМестах.Найти(Строка.Ссылка) = Неопределено Тогда
			Продолжить; // Значение определяется подчиненными строками
		КонецЕсли;
		
		Если Не ТипНастройки.СодержитТип(ТипЗнч(Строка.Ссылка)) Тогда
			Продолжить; // Это какая-то другая настройка
		КонецЕсли;
		
		Запись = НаборЗаписейНалогиОтчеты.Добавить();
		Запись.НалогОтчет  = Строка.Ссылка;
		Запись.Организация = Организация;
		
	КонецЦикла;
	
	// 2. Детальные настройки:
	// - ПорядокУплатыАкцизов
	// - ВариантыПримененияТребованийЗаконодательства
	// - ПорядокУплатыНалоговНаМестах
	
	НаборЗаписейПорядокУплатыАкцизов = РегистрыСведений.ПорядокУплатыАкцизов.СоздатьНаборЗаписей();
	НаборЗаписейПорядокУплатыАкцизов.Отбор.Организация.Установить(Организация);
	
	НаборЗаписейВариантыПримененияТребованийЗаконодательства = РегистрыСведений.ВариантыПримененияТребованийЗаконодательства.СоздатьНаборЗаписей();
	НаборЗаписейВариантыПримененияТребованийЗаконодательства.Отбор.Организация.Установить(Организация);
	
	НаборЗаписейПорядокУплатыНалоговНаМестах = РегистрыСведений.ПорядокУплатыНалоговНаМестах.СоздатьНаборЗаписей();
	НаборЗаписейПорядокУплатыНалоговНаМестах.Отбор.Организация.Установить(Организация);
	
	Отбор = Новый Структура;
	Отбор.Вставить("Включен", Истина);
	Для Каждого Строка Из Дерево.Строки.НайтиСтроки(Отбор, Истина) Цикл
		
		Если ТипЗнч(Строка.Ссылка) = Тип("ПеречислениеСсылка.ВидыПодакцизныхТоваров") Тогда
			
			Запись = НаборЗаписейПорядокУплатыАкцизов.Добавить();
			Запись.Организация = Организация;
			Запись.ВидТовара   = Строка.Ссылка;
			
			// Значения остальных ресурсов возьмем из настройки
			ПараметрыНастройкиВидаТовара = ПараметрыДетальнойНастройки[Строка.Ссылка];
			Если ПараметрыНастройкиВидаТовара = Неопределено Тогда
				Продолжить; // Все по умолчанию
			КонецЕсли;
			
			ЗначенияНастройкиВидаТовара = ЗначенияДетальнойНастройки[Строка.Ссылка];
			Для Индекс = 0 По ПараметрыНастройкиВидаТовара.ВГраница() Цикл
				Параметр                = ПараметрыНастройкиВидаТовара[Индекс];
				ИндексЗначенияПараметра = ЗначенияНастройкиВидаТовара[Индекс];
				ЗначениеПараметра       = Параметр.Варианты[ИндексЗначенияПараметра];
				ЗаполнитьЗначенияСвойств(Запись, ЗначениеПараметра);
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(Строка.Ссылка) = Тип("ПеречислениеСсылка.УсловияПримененияТребованийЗаконодательства") Тогда
			
			// Требования, выбираемые в списке
			Если ЗначениеЗаполнено(Строка.Ссылка) Тогда
				Запись = НаборЗаписейВариантыПримененияТребованийЗаконодательства.Добавить();
				Запись.Организация = Организация;
				Запись.Условие     = Строка.Ссылка;
			КонецЕсли;
			
		ИначеЕсли Строка.ЕстьДетальнаяНастройка Тогда
			
			// Детальная настройка, кроме акцизов
			
			Если Строка.Ключ = "" Тогда
				ПараметрыНастройкиВидаТовара = ПараметрыДетальнойНастройки[Строка.Ссылка];
			Иначе
				ПараметрыНастройкиВидаТовара = ПараметрыДетальнойНастройки[Строка.Ключ];
			КонецЕсли;
			Если ПараметрыНастройкиВидаТовара = Неопределено Тогда
				Продолжить; // Не требуется детальная настройка
			КонецЕсли;
			
			Если Строка.Ключ = "" Тогда
				ЗначенияНастройкиВидаТовара = ЗначенияДетальнойНастройки[Строка.Ссылка];
			Иначе
				ЗначенияНастройкиВидаТовара = ЗначенияДетальнойНастройки[Строка.Ключ];
			КонецЕсли;
			Для Индекс = 0 По ПараметрыНастройкиВидаТовара.ВГраница() Цикл
				
				Параметр          = ПараметрыНастройкиВидаТовара[Индекс];
				Если Параметр = "ПорядокУплатыНалоговНаМестах" Тогда
					
					ЗначениеПараметра = ЗначенияНастройкиВидаТовара[Индекс];
					
					Запись = НаборЗаписейПорядокУплатыНалоговНаМестах.Добавить();
					Запись.Организация					= Организация;
					Запись.Налог						= Строка.Ссылка;
					Запись.РегистрацияВНалоговомОргане	= Строка.РегистрацияВНалоговомОргане;
					ЗаполнитьЗначенияСвойств(Запись, ЗначениеПараметра);
					
				Иначе
					
					// ВариантыПримененияТребованийЗаконодательства
					ЗначениеПараметра = ЗначенияНастройкиВидаТовара[Индекс]; // Булево или индекс
					
					СпособОписанияВариантов = ТипЗнч(Параметр.Варианты);
					Если ЗначениеПараметра = Истина И СпособОписанияВариантов = Тип("ПеречислениеСсылка.УсловияПримененияТребованийЗаконодательства") Тогда
						Условие = Параметр.Варианты;
					ИначеЕсли СпособОписанияВариантов = Тип("ТаблицаЗначений") Тогда
						Условие = Параметр.Варианты[ЗначениеПараметра].Условие;
					Иначе
						Условие = Неопределено;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Условие) Тогда
						Запись = НаборЗаписейВариантыПримененияТребованийЗаконодательства.Добавить();
						Запись.Организация = Организация;
						Запись.Условие     = Условие;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	
	// Собственно запись
	НачатьТранзакцию();

	НаборЗаписейНалогиОтчеты.Записать();
	НаборЗаписейПорядокУплатыАкцизов.Записать();
	НаборЗаписейВариантыПримененияТребованийЗаконодательства.Записать();
	
	// прочитаем данные о настройках за предыдущие периоды, чтобы не потерять их
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПорядокУплатыНалоговНаМестах");
	ЭлементБлокировки.УстановитьЗначение("Организация", Организация);
	Блокировка.Заблокировать();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НовыеЗаписи", НаборЗаписейПорядокУплатыНалоговНаМестах.Выгрузить(,"Период, Организация, Налог, РегистрацияВНалоговомОргане"));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НовыеЗаписи.Период КАК Период,
	|	НовыеЗаписи.Организация КАК Организация,
	|	НовыеЗаписи.Налог КАК Налог,
	|	НовыеЗаписи.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
	|ПОМЕСТИТЬ НовыеЗаписи
	|ИЗ
	|	&НовыеЗаписи КАК НовыеЗаписи
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Организация,
	|	Налог,
	|	РегистрацияВНалоговомОргане
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПорядокУплатыНалоговНаМестах.Период,
	|	ПорядокУплатыНалоговНаМестах.Организация,
	|	ПорядокУплатыНалоговНаМестах.Налог,
	|	ПорядокУплатыНалоговНаМестах.РегистрацияВНалоговомОргане,
	|	ПорядокУплатыНалоговНаМестах.СрокУплатыНалогаМесяцев,
	|	ПорядокУплатыНалоговНаМестах.СрокУплатыНалогаДней,
	|	ПорядокУплатыНалоговНаМестах.УплачиваютсяАвансы,
	|	ПорядокУплатыНалоговНаМестах.СрокУплатыАвансаМесяцев,
	|	ПорядокУплатыНалоговНаМестах.СрокУплатыАвансаДней,
	|	ПорядокУплатыНалоговНаМестах.Описание
	|ИЗ
	|	РегистрСведений.ПорядокУплатыНалоговНаМестах КАК ПорядокУплатыНалоговНаМестах
	|		ЛЕВОЕ СОЕДИНЕНИЕ НовыеЗаписи КАК НовыеЗаписи
	|		ПО ПорядокУплатыНалоговНаМестах.Период = НовыеЗаписи.Период
	|			И ПорядокУплатыНалоговНаМестах.Организация = НовыеЗаписи.Организация
	|			И ПорядокУплатыНалоговНаМестах.Налог = НовыеЗаписи.Налог
	|			И ПорядокУплатыНалоговНаМестах.РегистрацияВНалоговомОргане = НовыеЗаписи.РегистрацияВНалоговомОргане
	|ГДЕ
	|	ПорядокУплатыНалоговНаМестах.Организация = &Организация
	|	И НовыеЗаписи.Период ЕСТЬ NULL";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(НаборЗаписейПорядокУплатыНалоговНаМестах.Добавить(), Выборка);
	КонецЦикла;
	
	НаборЗаписейПорядокУплатыНалоговНаМестах.Записать();

	ЗафиксироватьТранзакцию();
	
	Модифицированность = Ложь;
	
	Если ОбновитьСписок Тогда
		ЗаполнитьПоОрганизации();
	КонецЕсли;
	
	РегистрыСведений.ЗадачиБухгалтера.ОбновитьИЗаполнитьРегулярныеЗадачи(Организация, КалендарьБухгалтера.УпреждениеЗаполненияСписка());
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	
	// ДетальнаяНастройка
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДетальнаяНастройка");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.Включен", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	
	// Включен
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Включен");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.ВключаетсяПользователем", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОбИзмененииНастроек()
	
	ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.НалогиОтчеты"));
	ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.ПорядокУплатыАкцизов"));
	ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.ПорядокУплатыНалоговНаМестах"));
	ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.ВариантыПримененияТребованийЗаконодательства"));
	ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.ЗадачиБухгалтера"));
	Оповестить("Обновить дерево отчетов", "Обновить дерево отчетов", ЭтаФорма); // На языке регламентированной отчетности
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь; // Незачем очищать
КонецПроцедуры

#КонецОбласти

#КонецОбласти