#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура ДобавитьЗаявление(ДанныеЗаявления) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КлючЗаписи = РаботаВМоделиСервиса.СоздатьКлючЗаписиРегистраСведенийВспомогательныхДанных(
		РегистрыСведений.ЗаявленияАбонентовНаПодключениеЭлектроннойПодписиВМоделиСервиса,
		Новый Структура("Идентификатор", ДанныеЗаявления.ИдентификаторДокументооборота));
	
	ЗаблокироватьДанныеДляРедактирования(КлючЗаписи);
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗаявленияАбонентовНаПодключениеЭлектроннойПодписиВМоделиСервиса");
		ЭлементБлокировки.УстановитьЗначение("Идентификатор", ДанныеЗаявления.ИдентификаторДокументооборота);
		Блокировка.Заблокировать();
		
		МенеджерЗаписи = РегистрыСведений.ЗаявленияАбонентовНаПодключениеЭлектроннойПодписиВМоделиСервиса.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Идентификатор                      = ДанныеЗаявления.ИдентификаторДокументооборота;
		МенеджерЗаписи.ОбластьДанныхВспомогательныеДанные = ОбщегоНазначения.ЗначениеРазделителяСеанса();
		МенеджерЗаписи.Прочитать();
		
		МенеджерЗаписи.Идентификатор                      = ДанныеЗаявления.ИдентификаторДокументооборота;
		МенеджерЗаписи.ДанныеЗаявления                    = Новый ХранилищеЗначения(СериализоватьЗаявление(ДанныеЗаявления));
		МенеджерЗаписи.Статус                             = Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Подготовлено;
		МенеджерЗаписи.ИдентификаторДокумента             = ДанныеЗаявления.Ссылка.УникальныйИдентификатор();
		МенеджерЗаписи.ОбластьДанныхВспомогательныеДанные = ОбщегоНазначения.ЗначениеРазделителяСеанса();
		МенеджерЗаписи.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	РазблокироватьДанныеДляРедактирования(КлючЗаписи);
	
КонецПроцедуры

// Необходим для зачистики в случае удаления заявления пользователем
Процедура УдалитьЗаявление(ИдентификаторДокумента) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявленияАбонентовНаПодключениеЭлектроннойПодписиВМоделиСервиса.Идентификатор
	|ИЗ
	|	РегистрСведений.ЗаявленияАбонентовНаПодключениеЭлектроннойПодписиВМоделиСервиса КАК ЗаявленияАбонентовНаПодключениеЭлектроннойПодписиВМоделиСервиса
	|ГДЕ
	|	ЗаявленияАбонентовНаПодключениеЭлектроннойПодписиВМоделиСервиса.ИдентификаторДокумента = &ИдентификаторДокумента";
	Запрос.УстановитьПараметр("ИдентификаторДокумента", ИдентификаторДокумента);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		УдалитьЗаписьРегистра(Выборка.Идентификатор);	
	КонецЦикла;                                      
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура УдалитьЗаписьРегистра(Идентификатор)
	
	КлючЗаписи = РаботаВМоделиСервиса.СоздатьКлючЗаписиРегистраСведенийВспомогательныхДанных(
		РегистрыСведений.ЗаявленияАбонентовНаПодключениеЭлектроннойПодписиВМоделиСервиса,
		Новый Структура("Идентификатор", Идентификатор));
	
	ЗаблокироватьДанныеДляРедактирования(КлючЗаписи);
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗаявленияАбонентовНаПодключениеЭлектроннойПодписиВМоделиСервиса");
		ЭлементБлокировки.УстановитьЗначение("Идентификатор", Идентификатор);
		Блокировка.Заблокировать();
		
		МенеджерЗаписи = РегистрыСведений.ЗаявленияАбонентовНаПодключениеЭлектроннойПодписиВМоделиСервиса.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Идентификатор                      = Идентификатор;
		МенеджерЗаписи.ОбластьДанныхВспомогательныеДанные = ОбщегоНазначения.ЗначениеРазделителяСеанса();
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.Удалить();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	РазблокироватьДанныеДляРедактирования(КлючЗаписи);
	
КонецПроцедуры

Функция СериализоватьЗаявление(ДанныеЗаявления)
	
	Заявление = Новый Структура;
	
	// -> Subscriber
	Абонент = Новый Структура;
	Абонент.Вставить("Type", ?(ДанныеЗаявления.ПризнакУполномоченногоПредставителя, "УполномоченныйПредставитель", "Налогоплательщик"));
	Абонент.Вставить("ApplicationID", ОбщегоНазначения.ЗначениеРазделителяСеанса());
	
	// -> Organization
	Организация = Новый Структура;
	Организация.Вставить("ShortName",           ДанныеЗаявления.КраткоеНаименование);
	Организация.Вставить("FullName",            ДанныеЗаявления.ПолноеНаименование);
	Организация.Вставить("INN",                 ДанныеЗаявления.ИНН);
	Организация.Вставить("KPP",                 ДанныеЗаявления.КПП);
	Организация.Вставить("OGRN",                ДанныеЗаявления.ОГРН);
	Организация.Вставить("RegNumberPFR",        ДанныеЗаявления.РегНомерПФР);
	Организация.Вставить("RegNumberFSS",        ДанныеЗаявления.РегНомерФСС);
	Организация.Вставить("LargestTaxpayer",     ДанныеЗаявления.ПризнакКрупнейшегоНалогоплательщика);
	Организация.Вставить("SeparateSubdivision", ДанныеЗаявления.ПризнакОбособленногоПодразделения);
	Организация.Вставить("LegalAddress",        Адрес(ДанныеЗаявления.АдресЮридический));
	Организация.Вставить("ActualAddress",       Адрес(ДанныеЗаявления.АдресФактический));
	Организация.Вставить("Phone",               ДанныеЗаявления.ТелефонОсновной);
	Организация.Вставить("MobilePhone",         ДанныеЗаявления.ТелефонМобильный);
	Организация.Вставить("MobilePhoneAuth",     ДанныеЗаявления.ТелефонМобильныйДляАвторизации);
	Организация.Вставить("Email",               ДанныеЗаявления.ЭлектроннаяПочта);
	Организация.Вставить("EmailAuth",           ДанныеЗаявления.ЭлектроннаяПочтаАутентификация);
	Организация.Вставить("OptionalPhone",       ДанныеЗаявления.ТелефонДополнительный);
	Организация.Вставить("OptionalNumberFSS",   ДанныеЗаявления.ДополнительныйКодФСС);

	// -> DigitalSignatureOwner
	ВладелецЭП = Новый Структура;
	ВладелецЭП.Вставить("Type",        XMLСтрока(ДанныеЗаявления.ВладелецЭЦПТип));
	ВладелецЭП.Вставить("FirstName",   ДанныеЗаявления.ВладелецЭЦПИмя);
	ВладелецЭП.Вставить("MiddleName",  ДанныеЗаявления.ВладелецЭЦПОтчество);
	ВладелецЭП.Вставить("LastName",    ДанныеЗаявления.ВладелецЭЦПФамилия);
	ВладелецЭП.Вставить("SNILS",       ДанныеЗаявления.ВладелецЭЦПСНИЛС); 
	ВладелецЭП.Вставить("Post",        ДанныеЗаявления.ВладелецЭЦПДолжность);
	ВладелецЭП.Вставить("Subdivision", ДанныеЗаявления.ВладелецЭЦППодразделение);
	
	// -> DigitalSignatureOwner -> IdentityDocument
	Документ = Новый Структура;
	Документ.Вставить("Type",      РегламентированнаяОтчетностьПереопределяемый.ПолучитьКодВидаДокументаФизическогоЛица(ДанныеЗаявления.ВладелецЭЦПВидДокумента));
	Документ.Вставить("Serial",    ДанныеЗаявления.ВладелецЭЦПСерияДокумента);
	Документ.Вставить("Number",    ДанныеЗаявления.ВладелецЭЦПНомерДокумента);
	Документ.Вставить("Issuer",    ДанныеЗаявления.ВладелецЭЦПКемВыданДокумент);
	Документ.Вставить("IssueDate", ДанныеЗаявления.ВладелецЭЦПДатаВыдачиДокумента);
	
	ВладелецЭП.Вставить("IdentityDocument", Документ);
	
	// -> Recipients
	Получатели = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из ДанныеЗаявления.Получатели Цикл
		Получатель = Новый Структура;			
		Если СтрокаТаблицы.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФНС Тогда
			Получатель.Вставить("Type", XMLСтрока(СтрокаТаблицы.ТипПолучателя));
			Получатель.Вставить("Code", СтрокаТаблицы.КодПолучателя);
			Получатель.Вставить("KPP",  СтрокаТаблицы.КПП);
		ИначеЕсли СтрокаТаблицы.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФСС Тогда
			Получатель.Вставить("Type", XMLСтрока(СтрокаТаблицы.ТипПолучателя));			
		Иначе
			Получатель = Новый Структура;
			Получатель.Вставить("Type", XMLСтрока(СтрокаТаблицы.ТипПолучателя));
			Получатель.Вставить("Code", СтрокаТаблицы.КодПолучателя);
		КонецЕсли;
		
		Получатели.Добавить(Получатель);
	КонецЦикла;
	
	Если ДанныеЗаявления.ПодатьЗаявкуНаСертификатДляФСРАР Тогда
		Получатель = Новый Структура;
		Получатель.Вставить("Type", XMLСтрока(Перечисления.ТипыКонтролирующихОрганов.ФСРАР));
		Получатель.Вставить("Code", XMLСтрока(ДанныеЗаявления.КодРегионаФСРАР));
		Получатели.Добавить(Получатель);
	КонецЕсли;
	
	Заявление.Вставить("DigitalSignatureOwner", ВладелецЭП);
	Заявление.Вставить("Organization"         , Организация);	
	Заявление.Вставить("Recipients"           , Получатели);
	Заявление.Вставить("RequestID"            , ДанныеЗаявления.ИдентификаторДокументооборота);
	Заявление.Вставить("Type"                 , XMLСтрока(ДанныеЗаявления.ТипЗаявления));
	Заявление.Вставить("CreateDate"           , ТекущаяДатаСеанса());	
	Заявление.Вставить("CodeProduct1C"        , ДанныеЗаявления.НомерОсновнойПоставки1с);
	Заявление.Вставить("Subscriber"           , Абонент);
	Заявление.Вставить("Version"              , "1.4");
	Если ДанныеЗаявления.ТипЗаявления = Перечисления.ТипыЗаявленияАбонентаСпецоператораСвязи.Изменение Тогда
		Заявление.Вставить("KeyID", ДанныеЗаявления.УчетнаяЗапись.ИдентификаторДокументооборота);
		Заявление.Вставить("AbonentID", ДанныеЗаявления.УчетнаяЗапись.ИдентификаторАбонента);
	КонецЕсли;
	
	ИзменившиесяРеквизиты = Новый Массив;
	Для Каждого ИзменившийсяРеквизит Из ДанныеЗаявления.ИзменившиесяРеквизитыВторичногоЗаявления Цикл
		ИзменившиесяРеквизиты.Добавить(XMLСтрока(ИзменившийсяРеквизит.ИзмененныйРеквизит));		
	КонецЦикла;
	Заявление.Вставить("ChangedAttributes", ИзменившиесяРеквизиты);	
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку();
	
	ФабрикаXDTO.ЗаписатьXML(Запись, СериализаторXDTO.ЗаписатьXDTO(Заявление),,,, НазначениеТипаXML.Явное);
	
	Возврат Запись.Закрыть();
	
КонецФункции

Функция Адрес(АдресСтрокой)
	
	Если Не ЗначениеЗаполнено(АдресСтрокой) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЧастиАдреса = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(АдресСтрокой, ",");
	Если ЧастиАдреса.Количество() <> 10 И ЧастиАдреса.Количество() <> 13 Тогда
		ВызватьИсключение(НСтр("ru = 'Неверный формат адреса.'"));
	КонецЕсли;
	
	Address = Новый Структура("Country,Postcode,RegionCode,Region,District,City,Locality,Street,House,Building,Apartment");
	
	Address.Country    = ЧастиАдреса[0];
	Address.Postcode   = ЧастиАдреса[1];
	Address.RegionCode = ЧастиАдреса[2];
	Address.Region     = НазваниеРегионаПоКоду(ЧастиАдреса[2]);
	Address.District   = ЧастиАдреса[3];
	Address.City       = ЧастиАдреса[4];
	Address.Locality   = ЧастиАдреса[5];
	Address.Street     = ЧастиАдреса[6];
	Address.House      = ЧастиАдреса[7];
	Address.Building   = ЧастиАдреса[8];
	Address.Apartment  = ЧастиАдреса[9];

	Возврат Address;
	
КонецФункции

Функция НазваниеРегионаПоКоду(КодРегиона)
	
	Название = РегламентированнаяОтчетностьВызовСервера.ПолучитьНазваниеРегионаПоКоду(КодРегиона);
	
	Если Не ЗначениеЗаполнено(Название) Тогда
		// затем пробуем найти в таблице регионов
		МакетРегионы = Обработки.ОбщиеОбъектыРегламентированнойОтчетности.ПолучитьМакет("Регионы");
		нрегАдресРегион = нрег(Название);
		Для Индекс = 1 По МакетРегионы.ВысотаТаблицы Цикл
			ТекущийКодРегиона = СокрЛП(МакетРегионы.Область(Индекс, 2, Индекс, 2).Текст);
			Если ТекущийКодРегиона = КодРегиона Тогда
				Название = СокрЛП(МакетРегионы.Область(Индекс, 1, Индекс, 1).Текст);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Название;
	
КонецФункции

#КонецЕсли