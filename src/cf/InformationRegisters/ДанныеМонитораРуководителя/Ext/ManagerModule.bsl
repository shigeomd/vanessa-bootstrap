#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Пересчитывает остатки и обороты, отслеживаемые монитором руководителя, по указанной организации
// на указанную дату. Если задан интервал обновления, то проверяет актуальность данных.
// Если данные обновлялись в пределах интервала, то обновление не происходит.
//
// Параметры
// Организация - СправочникСсылка.Организации
// Дата - Дата - Дата, на которую нужно пересчитать данные
// ИнтервалОбновления - Число - Интервал в секундах, в пределах которого не нужно обновлять данные
//
Процедура ОбновитьДанныеМонитора(Организация, Дата = Неопределено, ИнтервалОбновления = 0) Экспорт
	
	Если Дата = Неопределено Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если ТекущиеДанныеАктуальны(Организация, Дата, ИнтервалОбновления) Тогда
		Возврат;
	КонецЕсли;
	
	НачДата = НачалоДня(ДобавитьМесяц(Дата, -1) + 60*60*24);
	КонДата = КонецДня(Дата);
	
	// Сначала посчитаем все данные
	
	ТаблицаОстатковДС = Отчеты.ОстаткиДенежныхСредств.ПолучитьОстаткиДенежныхСредствДляМонитораРуководителя(Организация, КонДата);
	
	ТаблицаДвиженийДС = Отчеты.АнализДвиженийДенежныхСредств.ПолучитьДвижениеДенежныхСредствДляМонитораРуководителя(Организация, НачДата, КонДата);
	
	ТаблицаПродажиПоКонтрагентам = Отчеты.Продажи.ПолучитьПродажиПоКонтрагентамДляМонитораРуководителя(Организация, НачДата, КонДата);
	
	ТаблицаПродажиПоНомГруппам = Отчеты.Продажи.ПолучитьПродажиПоНоменклатурнымГруппамДляМонитораРуководителя(Организация, НачДата, КонДата);
	
	ЗадолженностьПокупателей = Отчеты.ЗадолженностьПокупателей.ПолучитьЗадолженностьПокупателейДляМонитораРуководителя(Организация, КонДата);
	
	ЗадолженностьПоставщикам = Отчеты.ЗадолженностьПоставщикам.ПолучитьЗадолженностьПоставщикамДляМонитораРуководителя(Организация, КонДата);
	
	ПросроченнаяЗадолженностьПокупателей = Отчеты.ЗадолженностьПокупателейПоСрокамДолга.ПолучитьПросроченнуюЗадолженностьПокупателейДляМонитораРуководителя(Организация, КонДата);
	
	ПросроченнаяЗадолженностьПоставщикам = Отчеты.ЗадолженностьПоставщикамПоСрокамДолга.ПолучитьПросроченнуюЗадолженностьПоставщикамДляМонитораРуководителя(Организация, КонДата);
	
	НеоплаченныеСчетаПокупателей = Отчеты.АнализНеоплаченныхСчетовПокупателям.ДанныеОНеоплаченныхСчетахПокупателей(Организация);
	
	// Когда все данные постчитаны наложим блокировку и будем записывать
	НачатьТранзакцию();
	Попытка
		ЗаблокироватьДанныеДляРедактирования(СоздатьКлючЗаписи(Новый Структура("Организация", Организация)));
		// Остатки денежных средств
		Если ТаблицаОстатковДС <> Неопределено Тогда
			ЗаписатьДанныеРаздела(Перечисления.РазделыМонитораРуководителя.ОстаткиДенежныхСредств,
				Организация,
				Дата,
				ТаблицаОстатковДС);
		КонецЕсли;
		
		// Движение денежных средств
		Если ТаблицаДвиженийДС <> Неопределено Тогда
			ЗаписатьДанныеРаздела(Перечисления.РазделыМонитораРуководителя.ДвижениеДенежныхСредств,
				Организация,
				Дата,
				ТаблицаДвиженийДС);
		КонецЕсли;
		
		// Продажи по контрагентам
		Если ТаблицаПродажиПоКонтрагентам <> Неопределено Тогда
			ЗаписатьДанныеРаздела(Перечисления.РазделыМонитораРуководителя.ПродажиПоКонтрагентам,
				Организация,
				Дата,
				ТаблицаПродажиПоКонтрагентам);
		КонецЕсли;
		
		// Продажи по номенклатурным группам
		Если ТаблицаПродажиПоНомГруппам <> Неопределено Тогда
			ЗаписатьДанныеРаздела(Перечисления.РазделыМонитораРуководителя.ПродажиПоНоменклатурнымГруппам,
				Организация,
				Дата,
				ТаблицаПродажиПоНомГруппам);
		КонецЕсли;
		
		// Задолженность покупателей
		Если ЗадолженностьПокупателей <> Неопределено Тогда
			ЗаписатьДанныеРаздела(Перечисления.РазделыМонитораРуководителя.ЗадолженностьПокупателей,
				Организация,
				Дата,
				ЗадолженностьПокупателей);
		КонецЕсли;
		
		// Задолженность поставщикам
		Если ЗадолженностьПоставщикам <> Неопределено Тогда
			ЗаписатьДанныеРаздела(Перечисления.РазделыМонитораРуководителя.ЗадолженностьПоставщикам,
				Организация,
				Дата,
				ЗадолженностьПоставщикам);
		КонецЕсли;
		
		// Задолженность покупателей просроченная
		Если ПросроченнаяЗадолженностьПокупателей <> Неопределено Тогда
			ЗаписатьДанныеРаздела(Перечисления.РазделыМонитораРуководителя.ПросроченнаяЗадолженностьПокупателей,
				Организация,
				Дата,
				ПросроченнаяЗадолженностьПокупателей);
		КонецЕсли;
		
		// Задолженность поставщикам просроченная
		Если ПросроченнаяЗадолженностьПоставщикам <> Неопределено Тогда
			ЗаписатьДанныеРаздела(Перечисления.РазделыМонитораРуководителя.ПросроченнаяЗадолженностьПоставщикам,
				Организация,
				Дата,
				ПросроченнаяЗадолженностьПоставщикам);
		КонецЕсли;
		
		Если НеоплаченныеСчетаПокупателей <> Неопределено Тогда
			ЗаписатьДанныеРаздела(Перечисления.РазделыМонитораРуководителя.НеоплаченныеСчетаПокупателям,
				Организация,
				Дата,
				НеоплаченныеСчетаПокупателей);
		КонецЕсли;
	Исключение
		
		// Не удалось записать данные, скорее всего они уже записываются другим пользователем или регл. заданием
		
	КонецПопытки;
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Сформировать печатные формы объектов
//Параметры:
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати,
//   КоллекцияПечатныхФорм - ТаблицаЗначений - Сформированные табличные документы
// 	 ОбъектыПечати - Массив -  массив объектов печать
//   ПараметрыВывода - Структура - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Таблица = ПолучитьИзВременногоХранилища(ПараметрыПечати.ПечатнаяФормаМонитораПуть);
	ДатаФормированияМонитора = ПараметрыПечати.ДатаФормированияМонитора;
	УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "МониторРуководителя", "Монитор руководителя", Таблица);
	
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция проверяет актуальность данных, 
// если данные регистра обновлялись в пределах интервала обновления то данные считаются актуальными
// Параметры:
//	Организация - СправочникСсылка.Организации - организация для данных которой нужно проверить актуальность
//	Дата - Дата - дата и время на которую нужно проверить актупльность
//	ИнтервалОбновления - Число - Период времени в секундах в течении которого данные считать актульными
// Возвращаемое значение:
//  Булево - Истина, - Данные регистра актуальны, ложь - нет
//
Функция ТекущиеДанныеАктуальны(Организация, Дата, ИнтервалОбновления)
	
	// По умолчанию считаем данные неактуальными
	ДанныеАктуальны = Ложь;
	
	СписокДоступныхОрганизаций = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(ложь);
	
	Если СписокДоступныхОрганизаций.Найти(Организация) = Неопределено Тогда
		
		Возврат ДанныеАктуальны;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ДанныеМонитораРуководителя.ДатаОбновления КАК ДатаОбновления
	|ИЗ
	|	РегистрСведений.ДанныеМонитораРуководителя КАК ДанныеМонитораРуководителя
	|ГДЕ
	|	ДанныеМонитораРуководителя.Организация = &Организация";
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		// Если дата обновления регистра входит в интервал, то данные считаются актуальными
		Если ТипЗнч(Выборка.ДатаОбновления) = Тип("Дата") Тогда
			ДанныеАктуальны = Выборка.ДатаОбновления > (Дата - ИнтервалОбновления)
							И Выборка.ДатаОбновления < (Дата + ИнтервалОбновления);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеАктуальны;
	
КонецФункции

Процедура ЗаписатьДанныеРаздела(РазделМонитора, Организация, Дата, ТаблицаДанных) 
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.РазделМонитора.Установить(РазделМонитора);
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	НомерСтрокиРаздела = 1;
	Для Каждого Данные Из ТаблицаДанных Цикл
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Данные);
		Запись.Организация        = Организация;
		Запись.РазделМонитора     = РазделМонитора;
		Запись.НомерСтрокиРаздела = НомерСтрокиРаздела;
		Запись.ДатаОбновления     = Дата;
		
		НомерСтрокиРаздела = НомерСтрокиРаздела + 1;
		
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли