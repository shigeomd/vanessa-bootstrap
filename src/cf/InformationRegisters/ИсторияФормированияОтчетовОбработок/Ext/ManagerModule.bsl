
Функция ЭтоВнешнийОтчетОбработка(МетаПолноеИмя, ТипОбъекта)

	Если Найти(МетаПолноеИмя, "ВнешнийОтчет.") = 1 
		ИЛИ Найти(МетаПолноеИмя, "ExternalReport.") = 1
		Тогда
		
		ТипОбъекта = "ВнешнийОтчет";
		Возврат Истина;
		
	ИначеЕсли Найти(МетаПолноеИмя, "ВнешняяОбработка.") = 1
		ИЛИ Найти(МетаПолноеИмя, "ExternalDataProcessor.") = 1
		Тогда
		
		ТипОбъекта = "ВнешняяОбработка";
		Возврат Истина;
		
	ИначеЕсли Найти(МетаПолноеИмя, "Обработка.") = 1
		ИЛИ Найти(МетаПолноеИмя, "DataProcessor.") = 1
		Тогда
		
		ТипОбъекта = "Обработка";
		Возврат Ложь;
		
	ИначеЕсли Найти(МетаПолноеИмя, "Отчет.") = 1
		ИЛИ Найти(МетаПолноеИмя, "Report.") = 1
		Тогда
		
		ТипОбъекта = "Отчет";
		Возврат Ложь;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции 

Функция ТипРеквизитаОтчетИлиОбработка(ЗначениеРекв, ТипРекв)

	Если НЕ (ЗначениеРекв = Неопределено 
		ИЛИ ТипРекв = Тип("Число") 
		ИЛИ ТипРекв = Тип("Строка")
		ИЛИ ТипРекв = Тип("Булево")
		ИЛИ ТипРекв = Тип("Дата")
		ИЛИ Справочники.ТипВсеСсылки().СодержитТип(ТипРекв)
		ИЛИ Документы.ТипВсеСсылки().СодержитТип(ТипРекв)
		ИЛИ Перечисления.ТипВсеСсылки().СодержитТип(ТипРекв)
		ИЛИ ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипРекв)
		ИЛИ ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипРекв)
		ИЛИ ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипРекв)
		ИЛИ ПланыОбмена.ТипВсеСсылки().СодержитТип(ТипРекв) 
		ИЛИ БизнесПроцессы.ТипВсеСсылки().СодержитТип(ТипРекв) 
		ИЛИ Задачи.ТипВсеСсылки().СодержитТип(ТипРекв)) 
		Тогда
		
		Попытка
			МетаПоля = ЗначениеРекв.Метаданные(); 
			Если Метаданные.Отчеты.Найти(МетаПоля.Имя) <> Неопределено 
				ИЛИ Метаданные.Обработки.Найти(МетаПоля.Имя) <> Неопределено 
				Тогда
				Возврат Истина; 
			КонецЕсли; 
		Исключение
		КонецПопытки; 
		
	КонецЕсли; 
	
	Возврат Ложь; 
	
КонецФункции 
 
Функция СохранитьВосстановитьРеквизит(ЗначениеРекв, Объект, ФормаОбъекта, СоотвПолей, ИмяПоля, Действие)
	
	НовоеЗначение = ЗначениеРекв;
	
	ТипРекв = ТипЗнч(ЗначениеРекв);
	
	Если ТипРекв = ТипЗнч(Объект) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Если ТипРекв = Тип("ТаблицаЗначений") 
		ИЛИ ТипРекв = Тип("ДеревоЗначений") 
		ИЛИ ТипРекв = Тип("СписокЗначений")
		Тогда
		
		НовоеЗначение = ЗначениеРекв.Скопировать();
		
	ИначеЕсли ТипРекв = Тип("Массив") 
		ИЛИ ТипРекв = Тип("ФиксированныйМассив") 
		Тогда 
		
		НовоеЗначение = Новый Массив; 
		Для Каждого Элем Из ЗначениеРекв Цикл
			НовоеЗначение.Добавить(Элем);
		КонецЦикла; 
		
		Если ТипРекв = Тип("ФиксированныйМассив") Тогда
			НовоеЗначение = Новый ФиксированныйМассив(НовоеЗначение);
		КонецЕсли; 
		
	ИначеЕсли ТипРекв = Тип("Структура") 
		ИЛИ ТипРекв = Тип("ФиксированнаяСтруктура") 
		Тогда 
		
		НовоеЗначение = Новый Структура; 
		Для Каждого КлючЗначение Из ЗначениеРекв Цикл
			НовоеЗначение.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла; 
		
		Если ТипРекв = Тип("ФиксированнаяСтруктура") Тогда
			НовоеЗначение = Новый ФиксированнаяСтруктура(НовоеЗначение);
		КонецЕсли; 
		
	ИначеЕсли ТипРекв = Тип("Соответствие") 
		ИЛИ ТипРекв = Тип("ФиксированноеСоответствие") 
		Тогда 
		
		НовоеЗначение = Новый Соответствие; 
		Для Каждого КлючЗначение Из ЗначениеРекв Цикл
			НовоеЗначение.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла; 
		
		Если ТипРекв = Тип("ФиксированноеСоответствие") Тогда
			НовоеЗначение = Новый ФиксированноеСоответствие(НовоеЗначение);
		КонецЕсли; 
		
	ИначеЕсли ТипРекв = Тип("ПостроительОтчета")
		ИЛИ ТипРекв = Тип("КомпоновщикНастроекКомпоновкиДанных") 
		Тогда 	
		
		НовоеЗначение = ЗначениеРекв.ПолучитьНастройки();	
		
	Иначе  
		
		Если Действие = "Сохранить" И ТипРеквизитаОтчетИлиОбработка(ЗначениеРекв, ТипРекв) Тогда
			НовоеЗначение = ПолучитьСтруктуруНастроек(ЗначениеРекв, , , , );
		КонецЕсли; 
		
	КонецЕсли; 
	
	Если Действие = "Сохранить" Тогда
		
		СоотвПолей[ИмяПоля] = НовоеЗначение;
		
	ИначеЕсли Действие = "Восстановить" Тогда 
		
		Если ФормаОбъекта <> Неопределено Тогда
			ФормаОбъекта[ИмяПоля] = НовоеЗначение;
		Иначе
			Объект[ИмяПоля] = НовоеЗначение;
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат НовоеЗначение;
	
КонецФункции 

Функция ПолучитьСтруктуруНастроек(Объект, ФормаОбъекта, СтруктураИсклРеквизитов, СтруктураИсклТабЧастей, СтруктураИсклЭлементовФормы)

	Мета = Объект.Метаданные();
	
	Рез = Новый Структура(
	"Реквизиты, ТабличныеЧасти, ЭлементыФормы", 
	Новый Соответствие, Новый Соответствие, Новый Соответствие); 	
	
	// 1. Реквизиты
	Для Каждого Рекв Из Мета.Реквизиты Цикл
		
		Если СтруктураИсклРеквизитов <> Неопределено 
			И СтруктураИсклРеквизитов.Свойство(Рекв.Имя)
			Тогда
			Продолжить;
		КонецЕсли; 

		СохранитьВосстановитьРеквизит(Объект[Рекв.Имя], Объект, , Рез.Реквизиты, Рекв.Имя, "Сохранить");
		
	КонецЦикла;
	
	// 2. Табличные части
	Для Каждого МетаТабЧасть Из Мета.ТабличныеЧасти Цикл
		
		СтруктураИсклРеквизитов = Неопределено;
		Если СтруктураИсклТабЧастей <> Неопределено 
			И СтруктураИсклТабЧастей.Свойство(МетаТабЧасть, СтруктураИсклРеквизитов)
			Тогда
			
			Если СтруктураИсклРеквизитов = Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			
		КонецЕсли; 
		
		ТабЧасть = Объект[МетаТабЧасть.Имя].Выгрузить();
		ТабЧасть.Колонки.Удалить("НомерСтроки");
		
		Если СтруктураИсклРеквизитов <> Неопределено Тогда
			Для Каждого КлючЗначение Из СтруктураИсклРеквизитов Цикл
				Если ТабЧасть.Колонки.Найти(КлючЗначение.Ключ) <> Неопределено Тогда
					ТабЧасть.Колонки.Удалить(КлючЗначение.Ключ);
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
		
		Рез.ТабличныеЧасти.Вставить(МетаТабЧасть.Имя, ТабЧасть);
		
	КонецЦикла; 
	
	// 3. Элементы формы
	Если ФормаОбъекта <> Неопределено Тогда
		
		Для Каждого Элем Из ФормаОбъекта.ЭлементыФормы Цикл
			
			Если ТипЗнч(Элем) = Тип("ПолеВвода") 
				ИЛИ ТипЗнч(Элем) = Тип("ПолеВыбора") 
				ИЛИ ТипЗнч(Элем) = Тип("ТабличноеПоле") 
				Тогда
				
				ИмяПоля = Элем.Имя;
				ПутьКДанным = Элем.Данные;
				
				Если Найти(Элем.Данные, ".") > 0 Тогда
					
					ИмяПоля = Лев(Элем.Данные, Найти(Элем.Данные, ".")-1);
					ПутьКДанным = ИмяПоля;
					
					Попытка
						Элем = ФормаОбъекта[ИмяПоля];
					Исключение
						СтрОшибки = ОписаниеОшибки();
						Продолжить;
					КонецПопытки; 
					
				КонецЕсли; 
				
				Если (Мета.Реквизиты.Найти(ПутьКДанным) <> Неопределено И Рез.Реквизиты[ПутьКДанным] <> Неопределено)  
					ИЛИ (Мета.ТабличныеЧасти.Найти(ПутьКДанным) <> Неопределено И Рез.ТабличныеЧасти[ПутьКДанным] <> Неопределено) 
					ИЛИ Рез.ЭлементыФормы[ИмяПоля] <> Неопределено
					Тогда
					Продолжить;
				КонецЕсли; 
				
				Если СтруктураИсклЭлементовФормы <> Неопределено 
					И СтруктураИсклЭлементовФормы.Свойство(ИмяПоля)
					Тогда
					Продолжить;
				КонецЕсли; 
				
				Если ФормаОбъекта.ЭлементыФормы.Найти(ИмяПоля) <> Неопределено Тогда
					СохранитьВосстановитьРеквизит(Элем.Значение, Объект, ФормаОбъекта, Рез.ЭлементыФормы, ИмяПоля, "Сохранить");
				Иначе
					Попытка
						СохранитьВосстановитьРеквизит(ФормаОбъекта[ИмяПоля], Объект, ФормаОбъекта, Рез.ЭлементыФормы, ИмяПоля, "Сохранить");
					Исключение
						СтрОшибки = ОписаниеОшибки();
					КонецПопытки; 
				КонецЕсли; 

			КонецЕсли; 
			
		КонецЦикла; 
		
		Если Найти(Мета.ПолноеИмя(), "ВнешнийОтчет.") = 1 
			ИЛИ Найти(Мета.ПолноеИмя(), "ExternalReport.") = 1 
			Тогда
			
			Если НЕ Рез.ЭлементыФормы.Свойство("КомпоновщикНастроек") Тогда
				Рез.ЭлементыФормы.Вставить("КомпоновщикНастроек", ФормаОбъекта.КомпоновщикНастроек.ПолучитьНастройки());
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЕсли; 

	Возврат Рез;
	
КонецФункции 

// универсальная процедура сохранения настроек отчетов, обработок 
Функция СохранитьНастройкиОбъекта(Объект, ФормаОбъекта, НачалоВыполнения, НачалоВывода, ИмяПроцедурыФормирования="", ИмяФормы="", 
																													РезультатВыполнения=Неопределено, 
																													СтруктураИсклРеквизитов=Неопределено, 
																													СтруктураИсклТабЧастей=Неопределено, 
																													СтруктураИсклЭлементовФормы=Неопределено) Экспорт

	Мета = Объект.Метаданные();
	
	Рез = ПолучитьСтруктуруНастроек(Объект, ФормаОбъекта, СтруктураИсклРеквизитов, СтруктураИсклТабЧастей, СтруктураИсклЭлементовФормы);
	
	Если ЭтоВнешнийОтчетОбработка(Мета.ПолноеИмя(), ) Тогда
		ИспользуемоеИмяФайла = Объект.ИспользуемоеИмяФайла;
	Иначе
		ИспользуемоеИмяФайла = "";
	КонецЕсли;
	
	Рез.Вставить("ИмяПроцедурыФормирования", ИмяПроцедурыФормирования);
	Рез.Вставить("ИспользуемоеИмяФайла", ИспользуемоеИмяФайла);
	
	УстановитьПривилегированныйРежим(Истина); 
	
	Набор = РегистрыСведений.ИсторияФормированияОтчетовОбработок.СоздатьНаборЗаписей();
	
	Запись = Набор.Добавить();
	Запись.Период = ТекущаяДата();
	Запись.МетаданныеПолноеИмя = Мета.ПолноеИмя();
	Запись.ИмяФормы = ИмяФормы;
	Запись.Пользователь = ИмяПользователя();
	Запись.Компьютер = ИмяКомпьютера();
	Запись.ХранилищеНастройки = Новый ХранилищеЗначения(Рез, Новый СжатиеДанных(9));
	Если РезультатВыполнения <> Неопределено Тогда
		Запись.ХранилищеРезультата = Новый ХранилищеЗначения(РезультатВыполнения, Новый СжатиеДанных(9));
	КонецЕсли; 
	
	Если НачалоВыполнения <> Неопределено Тогда
		
		Если ТипЗнч(НачалоВыполнения) = Тип("Число") Тогда // универсальная дата в мс
			Запись.ДлительностьОбщая = Вычислить("ТекущаяУниверсальнаяДатаВМиллисекундах()") - НачалоВыполнения;
		ИначеЕсли ТипЗнч(НачалоВыполнения) = Тип("Дата") Тогда // дата и время
			Запись.ДлительностьОбщая = ТекущаяДата() - НачалоВыполнения;
		КонецЕсли; 
		
	КонецЕсли; 
	
	Если НачалоВывода <> Неопределено Тогда
		
		Если ТипЗнч(НачалоВывода) = Тип("Число") Тогда // универсальная дата в мс
			Запись.ДлительностьЗапроса = Вычислить("ТекущаяУниверсальнаяДатаВМиллисекундах()") - НачалоВывода;
		ИначеЕсли ТипЗнч(НачалоВывода) = Тип("Дата") Тогда // дата и время
			Запись.ДлительностьЗапроса = ТекущаяДата() - НачалоВывода;
		КонецЕсли; 
		
	КонецЕсли; 
	
	Попытка
		Набор.ОбменДанными.Загрузка = Истина; // доступно с версии 8.2.19, генерит более оптимальный запрос при записи 
		Замещать = Ложь; 
	Исключение
		Замещать = Истина; 
	КонецПопытки; 
	
	Попытка
		Набор.Записать(Замещать);
	Исключение
		Возврат Ложь; 
	КонецПопытки; 
	
	Возврат Истина; 
	
КонецФункции 

// универсальная процедура восстановления настроек отчетов, обработок 
Функция ВосстановитьНастройкиОбъекта(Объект, ФормаОбъекта, Настройки) Экспорт
	
	Мета = Объект.Метаданные();
	
	Если ТипЗнч(Настройки) = Тип("ХранилищеЗначения") Тогда
		Рез = Настройки.Получить();
	Иначе
		Рез = Настройки;
	КонецЕсли; 
	
	Если Рез = Неопределено Тогда
		Сообщить("Переданы пустые настройки для "+Мета.ПолноеИмя(), СтатусСообщения.Внимание); 
		Возврат Неопределено; 
	КонецЕсли; 
	
	// 1. Реквизиты
	Для Каждого КлючЗначение Из Рез.Реквизиты Цикл
		
		Если Мета.Реквизиты.Найти(КлючЗначение.Ключ) <> Неопределено Тогда
			
			Если ТипЗнч(КлючЗначение.Значение) = Тип("НастройкиКомпоновкиДанных") Тогда
				
				Если Мета.Реквизиты[КлючЗначение.Ключ].Тип.Типы()[0] = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
					Объект[КлючЗначение.Ключ].ЗагрузитьНастройки(КлючЗначение.Значение);
				КонецЕсли; 
				
			ИначеЕсли ТипЗнч(КлючЗначение.Значение) = Тип("НастройкиПостроителяОтчета") Тогда 
				
				Если Мета.Реквизиты[КлючЗначение.Ключ].Тип.Типы()[0] = Тип("ПостроительОтчета") Тогда
					Объект[КлючЗначение.Ключ].УстановитьНастройки(КлючЗначение.Значение);
				КонецЕсли; 
				
			Иначе
				Если ТипЗнч(КлючЗначение.Значение) = Тип("Структура")
					И ТипРеквизитаОтчетИлиОбработка(Объект[КлючЗначение.Ключ], ТипЗнч(Объект[КлючЗначение.Ключ]))
					Тогда
					ВосстановитьНастройкиОбъекта(Объект[КлючЗначение.Ключ], , КлючЗначение.Значение);
				Иначе
					Объект[КлючЗначение.Ключ] = КлючЗначение.Значение;
				КонецЕсли; 
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЦикла;
	
	// 2. Табличные части
	Для Каждого КлючЗначение Из Рез.ТабличныеЧасти Цикл
		
		Если Мета.ТабличныеЧасти.Найти(КлючЗначение.Ключ) <> Неопределено Тогда
			Объект[КлючЗначение.Ключ].Загрузить(КлючЗначение.Значение);
		КонецЕсли; 
		
	КонецЦикла; 
	
	// 3. Элементы формы
	Если ФормаОбъекта <> Неопределено Тогда
		
		Для Каждого КлючЗначение Из Рез.ЭлементыФормы Цикл

			ИмяПоля = КлючЗначение.Ключ;
			
			Если (Мета.Реквизиты.Найти(ИмяПоля) <> Неопределено И Рез.Реквизиты[ИмяПоля] <> Неопределено)  
				ИЛИ (Мета.ТабличныеЧасти.Найти(ИмяПоля) <> Неопределено И Рез.ТабличныеЧасти[ИмяПоля] <> Неопределено) 
				Тогда
				Продолжить;
			КонецЕсли;
				
			Элем = ФормаОбъекта.ЭлементыФормы.Найти(ИмяПоля);
			
			Если Элем = Неопределено Тогда
				Попытка
					Элем = ФормаОбъекта[ИмяПоля];
				Исключение
					СтрОшибки = ОписаниеОшибки();
					Продолжить; 
				КонецПопытки; 
			КонецЕсли; 
			
			Если ТипЗнч(Элем) = Тип("ПолеВвода") 
				ИЛИ ТипЗнч(Элем) = Тип("ПолеВыбора") 
				ИЛИ ТипЗнч(Элем) = Тип("ТабличноеПоле") 
				Тогда
				
				Элем.Значение = КлючЗначение.Значение;
				
			ИначеЕсли ТипЗнч(КлючЗначение.Значение) = Тип("НастройкиКомпоновкиДанных") Тогда
				
				Если ТипЗнч(Элем) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
					ФормаОбъекта[ИмяПоля].ЗагрузитьНастройки(КлючЗначение.Значение);
				КонецЕсли; 
				
			ИначеЕсли ТипЗнч(КлючЗначение.Значение) = Тип("НастройкиПостроителяОтчета") Тогда 
				
				Если ТипЗнч(Элем) = Тип("ПостроительОтчета") Тогда
					ФормаОбъекта[ИмяПоля].УстановитьНастройки(КлючЗначение.Значение);
				КонецЕсли; 
				
			Иначе
				
				Попытка
					Если ТипЗнч(КлючЗначение.Значение) = Тип("Структура")
						И ТипРеквизитаОтчетИлиОбработка(ФормаОбъекта[ИмяПоля], ТипЗнч(ФормаОбъекта[ИмяПоля]))
						Тогда
						ВосстановитьНастройкиОбъекта(ФормаОбъекта[ИмяПоля], , КлючЗначение.Значение);
					Иначе
						ФормаОбъекта[ИмяПоля] = КлючЗначение.Значение;
					КонецЕсли; 
				Исключение
					СтрОшибки = ОписаниеОшибки();
				КонецПопытки; 
				
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЕсли; 
	
	Возврат Рез;
	
КонецФункции 

// открытие формы с сохраненными настройками
#Если Клиент Тогда
Функция ОткрытьФормуОбъектаСНастройками(КлючЗаписи) Экспорт

	Если КлючЗаписи = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	МенЗаписи = РегистрыСведений.ИсторияФормированияОтчетовОбработок.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенЗаписи, КлючЗаписи);
	МенЗаписи.Прочитать();
	
	Настройки = МенЗаписи.ХранилищеНастройки.Получить();
	Если Настройки = Неопределено Тогда
		Сообщить("Переданы пустые настройки: "+КлючЗаписи.МетаданныеПолноеИмя, СтатусСообщения.Внимание); 
		Возврат Ложь;
	КонецЕсли; 
	
	ТипОтчетаОбработки = "";
	Если ЭтоВнешнийОтчетОбработка(КлючЗаписи.МетаданныеПолноеИмя, ТипОтчетаОбработки) Тогда
		
		Файл = Новый Файл(Настройки.ИспользуемоеИмяФайла);
		Если НЕ Файл.Существует() Тогда
			Сообщить("Не найден внешний отчет или обработка: "+Настройки.ИспользуемоеИмяФайла, СтатусСообщения.Внимание); 
			Возврат Ложь;
		Иначе
			Если ТипОтчетаОбработки = "ВнешнийОтчет" Тогда
				Объект = ВнешниеОтчеты.Создать(Настройки.ИспользуемоеИмяФайла, Ложь);
				Мета = Объект.Метаданные();
			ИначеЕсли ТипОтчетаОбработки = "ВнешняяОбработка" Тогда 
				Объект = ВнешниеОбработки.Создать(Настройки.ИспользуемоеИмяФайла, Ложь);
				Мета = Объект.Метаданные();
			КонецЕсли; 
		КонецЕсли; 
		
	Иначе
		
		ИмяМета = Сред(КлючЗаписи.МетаданныеПолноеИмя, Найти(КлючЗаписи.МетаданныеПолноеИмя, ".")+1);
		
		Если ТипОтчетаОбработки = "Отчет" Тогда
			
			Мета = Метаданные.Отчеты.Найти(ИмяМета);
			Если Мета = Неопределено Тогда
				Сообщить("Не найден отчет: "+КлючЗаписи.МетаданныеПолноеИмя, СтатусСообщения.Внимание); 
				Возврат Ложь;
			Иначе
				Объект = Отчеты[ИмяМета].Создать();
			КонецЕсли;
			
		ИначеЕсли ТипОтчетаОбработки = "Обработка" Тогда 
			
			Мета = Метаданные.Обработки.Найти(ИмяМета);
			Если Мета = Неопределено Тогда
				Сообщить("Не найдена обработка: "+КлючЗаписи.МетаданныеПолноеИмя, СтатусСообщения.Внимание); 
				Возврат Ложь;
			Иначе
				Объект = Обработки[ИмяМета].Создать();
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	Если ТипОтчетаОбработки = "" Тогда
		Сообщить("Не найден отчет или обработка: "+КлючЗаписи.МетаданныеПолноеИмя, СтатусСообщения.Внимание); 
		Возврат Ложь;
	КонецЕсли; 
	
	Если КлючЗаписи.ИмяФормы="" Тогда
		ИмяФормы = Неопределено;
	Иначе
		Если Мета.Формы.Найти(КлючЗаписи.ИмяФормы) = Неопределено Тогда
			Сообщить("Не найдена форма отчета или обработки: "+КлючЗаписи.ИмяФормы, СтатусСообщения.Внимание); 
			Возврат Ложь;
		Иначе
			ИмяФормы = КлючЗаписи.ИмяФормы;
		КонецЕсли; 
	КонецЕсли; 
	
	Попытка
		ФормаОбъекта = Объект.ПолучитьФорму(ИмяФормы);
	Исключение
		СтрОшибки = ОписаниеОшибки();
		Сообщить(СтрОшибки, СтатусСообщения.Внимание); 
	КонецПопытки; 
	
	Если ФормаОбъекта.Открыта() Тогда
		ФормаОбъекта.Модифицированность = Ложь; 
		ФормаОбъекта.Закрыть();
	КонецЕсли; 
	
	ФормаОбъекта.ВосстанавливатьЗначенияПриОткрытии = Ложь; 
	ФормаОбъекта.Открыть();
	
	ВосстановитьНастройкиОбъекта(Объект, ФормаОбъекта, Настройки);
	
КонецФункции 
#КонецЕсли 
 
 