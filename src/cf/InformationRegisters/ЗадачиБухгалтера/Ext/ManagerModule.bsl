#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// ИНТЕРФЕЙС МОДУЛЯ

Функция ОбновитьИЗаполнитьЗадачиНачалаРаботы(Знач ОтборОрганизации = Неопределено, СозданаНоваяОрганизация = Ложь) Экспорт
	
	ИзмененыЗаписи = Ложь;
	
	// Ищем новые задачи начала работы
	ЗадачиНачалаРаботы = НовыеЗадачиНачалаРаботы(ОтборОрганизации);
	
	Если СозданаНоваяОрганизация Тогда
		// При добавлении организации необходимо проверить параметры учета.
		// Если задача уже выполнена, сбрасываем у нее признак выполнения.
		НайденнаяСтрока = ЗадачиНачалаРаботы.Найти(Перечисления.ЗадачиНачалаРаботы.ПараметрыУчета, "Правило");
		Если НайденнаяСтрока = Неопределено Тогда
			НоваяСтрока = ЗадачиНачалаРаботы.Добавить();
			НоваяСтрока.Правило      = Перечисления.ЗадачиНачалаРаботы.ПараметрыУчета;
			НоваяСтрока.Наименование = Строка(Перечисления.ЗадачиНачалаРаботы.ПараметрыУчета);
			НоваяСтрока.Выполнено    = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗадачиНачалаРаботы.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗадачиБухгалтера");
	ЭлементБлокировки.Режим          = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ЗадачиНачалаРаботы;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Организация", "Организация");
	
	НачатьТранзакцию();
	
	Блокировка.Заблокировать();
	
	// Создадим новые задачи
	Для Каждого Задача Из ЗадачиНачалаРаботы Цикл
		
		Запись = РегистрыСведений.ЗадачиБухгалтера.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, Задача);
		Запись.Записать();
		
		ИзмененыЗаписи = Истина;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	Возврат ИзмененыЗаписи;
	
КонецФункции

Функция ОбновитьИЗаполнитьРегулярныеЗадачи(Знач ОтборОрганизации = Неопределено, Упреждение = 0) Экспорт
	
	Организации = МассивОрганизаций(ОтборОрганизации);
	Если Организации.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИзмененыЗаписи = Ложь;
	
	// Заблокируем для обновления
	КоличествоОрганизаций = Организации.Количество();
	Для Номер = 1 По КоличествоОрганизаций Цикл
		
		Индекс = КоличествоОрганизаций - Номер;// Обходим с конца, потому что будем удалять те, что не удалось заблокировать
		Организация = Организации[Индекс];
		
		ПараметрыКонструктора = Новый Массив;
		ПараметрыКонструктора.Добавить(Новый Структура("Организация", Организация));
		КлючЗаписи = Новый (Тип("РегистрСведенийКлючЗаписи.АктуальностьСпискаЗадачБухгалтера"), ПараметрыКонструктора);
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(КлючЗаписи); // До окончания вызова сервера
		Исключение
			Организации.Удалить(Индекс);
		КонецПопытки;
		
	КонецЦикла;
	
	// Задачи уже созданы? За какой период?
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Организация,
	|	ЕСТЬNULL(АктуальностьСписка.ДатаАктуальности, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаАктуальности
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АктуальностьСпискаЗадачБухгалтера КАК АктуальностьСписка
	|		ПО Организации.Ссылка = АктуальностьСписка.Организация
	|ГДЕ
	|	Организации.Ссылка В(&Организации)";
	
	ТекущаяДата      = НачалоДня(ТекущаяДатаСеанса());
	ДатаАктуализации = ТекущаяДата + Упреждение * 24 * 60 * 60;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// К появлению задач могут приводить какие-то события прошлого.
		
		// Делим это прошлое на две части:
		// - "некогда", "когда-то давно"
		// - "недавно"
		
		// События давнего прошлого могут приводить только к таким задачам,
		// которые еще можно выполнить в срок.
		// Просроченные задачи могут появляться только исходя из недавних событий.
		
		// При первом запуске (для новой организации, в новой версии) 
		// все прошлое считаем давним.
		// Другими словами, _дополняем_ список задач по событиям давнего прошлого.
		
		// При повторных запусках составляем расписание для давнего прошлого
		// на случай, если в периодах за это прошлое изменились данные ИБ,
		// приводящие к тому, что нужно уплачивать какие-то другие налоги 
		// или сдавать какие-то другие отчеты.
		// То есть в этом случае по событиям давнего прошлого мы _обновляем_ список задач.
		// А по недавним событиям - _дополняем_ список задач.
		
		// При обновлении (не дополнении) списка задач, как правило, не потребуется
		// вносить никаких изменений в список - достаточно лишь убедиться,
		// что список правильный.
		// Реже придется что-то поменять, но не все.
		// Поэтому будем записывать только отличия между правильным (рассчитанным в этой процедуре)
		// расписанием и уже имеющимся.
		
		Если ЗначениеЗаполнено(Выборка.ДатаАктуальности) Тогда
			
			// Обновим задачи по давним событиям
			Расписание = РасписаниеПоДавнимСобытиям(
				Выборка.Организация,
				Выборка.ДатаАктуальности, // До ДатаАктуальности
				ТекущаяДата);
			ЗаписатьИзменения(
				Выборка.Организация, 
				Расписание,
				ТекущаяДата,
				ИзмененыЗаписи);
				
			// Добавим задачи по недавним событиям
			Расписание = РасписаниеПоНедавнимСобытиям(
				Выборка.Организация,
				Выборка.ДатаАктуальности, // С  ДатаАктуальности
				ДатаАктуализации);        // По ДатаАктуализации
			ЗаписатьНовыеЗадачи(
				Выборка.Организация,
				Расписание,
				Выборка.ДатаАктуальности, // Старая ДатаАктуальности
				ДатаАктуализации,         // Новая ДатаАктуальности
				ТекущаяДата,
				ИзмененыЗаписи); 
				
		Иначе
			
			// Добавим задачи по давним событиям
			Расписание = РасписаниеПоДавнимСобытиям(
				Выборка.Организация,
				ДатаАктуализации, // Все считаем давними
				ТекущаяДата);
			ЗаписатьНовыеЗадачи(
				Выборка.Организация,
				Расписание,
				Выборка.ДатаАктуальности,
				ДатаАктуализации,
				ТекущаяДата,
				ИзмененыЗаписи);
				
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИзмененыЗаписи;
	
КонецФункции

Функция БлижайшаяДатаПоявленияЗадач(Организация = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Возврат БлижайшаяДатаПоявленияЗадачОрганизации(Организация);
	КонецЕсли;
	
	// По всем организациям
	Завтра = КонецДня(ТекущаяДатаСеанса()) + 1;
	БлижайшаяДата = Неопределено;
	
	Для Каждого ОднаОрганизация Из МассивОрганизаций(Организация) Цикл
		
		БлижайшаяДатаОрганизации = БлижайшаяДатаПоявленияЗадачОрганизации(ОднаОрганизация, БлижайшаяДата);
		
		Если БлижайшаяДата = Неопределено Тогда
			БлижайшаяДата = БлижайшаяДатаОрганизации;
		ИначеЕсли ТипЗнч(БлижайшаяДатаОрганизации) = Тип("Дата") Тогда
			БлижайшаяДата = Мин(БлижайшаяДата, БлижайшаяДатаОрганизации);
		КонецЕсли;
		
		Если БлижайшаяДата = Завтра Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат БлижайшаяДата;
	
КонецФункции

Функция УстановитьСтатусВыполнено(ИсточникДанныхКлючаЗаписи, Выполнено = Истина) Экспорт
	
	ЗначенияКлюча = Новый Структура("Организация, РегистрацияВНалоговомОргане, Правило, ПериодСобытия");
	ЗаполнитьЗначенияСвойств(ЗначенияКлюча, ИсточникДанныхКлючаЗаписи);
	
	МенеджерЗаписи = РегистрыСведений.ЗадачиБухгалтера.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ЗначенияКлюча);
	МенеджерЗаписи.Прочитать();
	
	МенеджерЗаписи.Выполнено = Выполнено;
	МенеджерЗаписи.Записать();
	
	Возврат РегистрыСведений.ЗадачиБухгалтера.СоздатьКлючЗаписи(ЗначенияКлюча);
	
КонецФункции

// Удаляем непросроченные задачи по заданному правилу
Функция УдалитьЗаписиПоПравилу(Организация, Правило, ТолькоАктуальные = Истина) Экспорт
	
	ИзмененыЗаписи = Ложь;
	
	ЗаписиКУдалению = ПолучитьСписокЗадачПоПравилу(Организация, Правило, ТолькоАктуальные);
	
	Если ЗаписиКУдалению.Количество() > 0 Тогда
		
		// Установим управляемые блокировки
		СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрСведений", "ЗадачиБухгалтера");
		
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Организация", Организация);
		ЗначенияБлокировки.Вставить("Правило",     Правило);
		
		НачатьТранзакцию();
		
		Если ОбщегоНазначенияБПВызовСервераПовтИсп.ИспользоватьУправляемыеБлокировки() Тогда
			ОбщегоНазначенияБПВызовСервера.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки);
		КонецЕсли;
		
		Для каждого ЗаписьКУдалению Из ЗаписиКУдалению Цикл
			
			Запись = РегистрыСведений.ЗадачиБухгалтера.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, ЗаписьКУдалению);
			Запись.Удалить();
			
			ИзмененыЗаписи = Истина;
			
		КонецЦикла; 
		
		
	КонецЕсли; 
	
	ЗафиксироватьТранзакцию();
	
	Возврат ИзмененыЗаписи;
	
КонецФункции

Функция РасписаниеПоНалогамИСборам(Организация, Правила, НачалоОбзора, КонецОбзора) Экспорт
	
	Расписание = НовыйРасписание();
	
	ЗаполнитьРасписаниеПоНалогамИСборам(Организация, Правила, Расписание, НачалоОбзора, КонецОбзора);
	
	Возврат Расписание;
	
КонецФункции

// СОСТАВЛЕНИЕ РАСПИСАНИЯ

Функция НовыйРасписание()

	Расписание = Новый ТаблицаЗначений;
	МетаданныеСпискаЗадач = Метаданные.РегистрыСведений.ЗадачиБухгалтера;
	
	Расписание.Колонки.Добавить("Организация",                 МетаданныеСпискаЗадач.Измерения.Организация.Тип);
	Расписание.Колонки.Добавить("РегистрацияВНалоговомОргане", МетаданныеСпискаЗадач.Измерения.РегистрацияВНалоговомОргане.Тип);
	Расписание.Колонки.Добавить("Правило",                     МетаданныеСпискаЗадач.Измерения.Правило.Тип);
	Расписание.Колонки.Добавить("ПериодСобытия",               МетаданныеСпискаЗадач.Измерения.ПериодСобытия.Тип);
	Расписание.Колонки.Добавить("Периодичность",               МетаданныеСпискаЗадач.Реквизиты.Периодичность.Тип);
	Расписание.Колонки.Добавить("Срок",                        МетаданныеСпискаЗадач.Реквизиты.Срок.Тип);
	Расписание.Колонки.Добавить("Наименование",                МетаданныеСпискаЗадач.Реквизиты.Наименование.Тип);
	Расписание.Колонки.Добавить("НачалоВыполнения",            МетаданныеСпискаЗадач.Реквизиты.НачалоВыполнения.Тип);
	
	Возврат Расписание;

КонецФункции

Процедура ЗаполнитьРасписаниеПоНалогамИСборам(Организация, Правила, Расписание, Знач НачалоОбзора, Знач КонецОбзора)
	
	День = 24 * 60 * 60;
	Если Не ЗначениеЗаполнено(НачалоОбзора) Тогда
		// Выведем только "свежие" события.
		// "Свежие" - это те, по которым срок выполнения еще не истек или истек недавно
		ОграничениеСнизу = КонецДня(ТекущаяДатаСеанса()) + 1;  // Дата, от которой будет рассчитано начало обзора
	Иначе
		ОграничениеСнизу = Неопределено;
	КонецЕсли;
	
	ДатаНачалаДеятельности = КалендарьБухгалтера.ДатаНачалаДеятельности(Организация);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц; // Хранит ПравилаУплатыНалоговНаМестах
	РегистрыСведений.ПорядокУплатыНалоговНаМестах.СоздатьПравилаУплатыНалоговНаМестах(МенеджерВременныхТаблиц, Организация);
	
	// Правила: Правило, ФинансовыйПериод
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Правила", Правила);
	Запрос.УстановитьПараметр("ОсновнойНалоговыйОрган", 
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "РегистрацияВНалоговомОргане"));

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Правила.Правило КАК Правило,
	|	Правила.ФинансовыйПериод КАК ФинансовыйПериод
	|ПОМЕСТИТЬ Правила
	|ИЗ
	|	&Правила КАК Правила
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Правило
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Правила.Правило КАК Правило,
	|	Правила.ФинансовыйПериод,
	|	МАКСИМУМ(ЕСТЬNULL(ПравилаУплатыНалоговНаМестах.ПериодДействияПравила, ДАТАВРЕМЯ(1, 1, 1))) КАК ПериодДействияПравила,
	|	ЕСТЬNULL(ПравилаУплатыНалоговНаМестах.РегистрацияВНалоговомОргане, &ОсновнойНалоговыйОрган) КАК РегистрацияВНалоговомОргане
	|ПОМЕСТИТЬ МестныеПравила
	|ИЗ
	|	Правила КАК Правила
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПравилаУплатыНалоговНаМестах КАК ПравилаУплатыНалоговНаМестах
	|		ПО Правила.Правило = ПравилаУплатыНалоговНаМестах.Правило
	|			И Правила.ФинансовыйПериод >= ПравилаУплатыНалоговНаМестах.ПериодДействияПравила
	|
	|СГРУППИРОВАТЬ ПО
	|	Правила.ФинансовыйПериод,
	|	Правила.Правило,
	|	ЕСТЬNULL(ПравилаУплатыНалоговНаМестах.РегистрацияВНалоговомОргане, &ОсновнойНалоговыйОрган)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Правило,
	|	ПериодДействияПравила,
	|	РегистрацияВНалоговомОргане
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МестныеПравила.ФинансовыйПериод КАК НачалоФинансовогоПериода,
	|	Регламент.Ссылка КАК Ссылка,
	|	Регламент.Владелец КАК Владелец,
	|	ПРЕДСТАВЛЕНИЕ(Регламент.Владелец),
	|	Регламент.Описание КАК Описание,
	|	Регламент.Действие КАК Действие,
	|	Регламент.ФинансовыйПериод КАК ФинансовыйПериод,
	|	Регламент.Периодичность КАК Периодичность,
	|	Регламент.ОграничениеПериода КАК ОграничениеПериода,
	|	ЕСТЬNULL(ПравилаУплатыНалоговНаМестах.СрокМесяцев, Регламент.СрокМесяцев) КАК СрокМесяцев,
	|	ЕСТЬNULL(ПравилаУплатыНалоговНаМестах.СрокДней, Регламент.СрокДней) КАК СрокДней,
	|	Регламент.СрокМожетЗакончитьсяВВыходной КАК СрокМожетЗакончитьсяВВыходной,
	|	Регламент.БазовыйПериод КАК БазовыйПериод,
	|	Регламент.ОтставаниеБазовогоПериода КАК ОтставаниеБазовогоПериода,
	|	ЕСТЬNULL(ПравилаУплатыНалоговНаМестах.РегистрацияВНалоговомОргане, ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) КАК РегистрацияВНалоговомОргане,
	|	ЕСТЬNULL(РегистрацииВНалоговомОргане.Код, ""0000"") КАК КодКонтролирующегоОргана
	|ИЗ
	|	МестныеПравила КАК МестныеПравила
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК Регламент
	|		ПО МестныеПравила.Правило = Регламент.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПравилаУплатыНалоговНаМестах КАК ПравилаУплатыНалоговНаМестах
	|		ПО МестныеПравила.Правило = ПравилаУплатыНалоговНаМестах.Правило
	|			И МестныеПравила.ПериодДействияПравила = ПравилаУплатыНалоговНаМестах.ПериодДействияПравила
	|			И МестныеПравила.РегистрацияВНалоговомОргане = ПравилаУплатыНалоговНаМестах.РегистрацияВНалоговомОргане
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	|		ПО МестныеПравила.РегистрацияВНалоговомОргане = РегистрацииВНалоговомОргане.Ссылка
	|ГДЕ
	|	ЕСТЬNULL(ПравилаУплатыНалоговНаМестах.Включено, ИСТИНА)";
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// "Релевантным" называется период, к которому относится действие
		// Составим перечень таких периодов
		РелевантныеПериоды = Новый Массив;
		// Для каждого релевантного периода определим дату, когда задачи за этот период появятся в списке
		НачалоВыполнения   = Новый Соответствие;
		
		// Часто задачу требуется выполнять после окончания периода, к которому она относится. 
		// Например: налог за январь платим в феврале.
		// В таких случаях часто базовый и релевантный период совпадают:
		// налог за январь платим по данным января.
		// Это - простые правила.
		// 
		// Кроме них есть и более сложные, когда базовый и релевантный период не совпадают.
		// Сложности, специфика начинаются только тогда, когда речь идет о разного рода 
		// _прогнозах_ и некоторых случаях _авансов_.
		// В большинстве (но не во всех) сложных правилах 
		// срок, отведенный на выполнение задачи, истекает до окончания периода, к которому она относится: 
		// аванс за январь платим в январе.
		
		СобытиеПозжеРелевантногоПериода = КалендарьБухгалтера.СрокИстекаетПослеОкончанияРелевантногоПериода(Выборка);
		ПростойБазовыйПериод            = КалендарьБухгалтера.БазовыйПериодОпределяетсяПросто(Выборка);
		
		КонецФинансовогоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Выборка.ФинансовыйПериод, Выборка.НачалоФинансовогоПериода);
		
		Если СобытиеПозжеРелевантногоПериода И ПростойБазовыйПериод Тогда
			
			// Даты начала выполнения будут лежать в интервале:
			НачалоИнтервала = Макс(Выборка.НачалоФинансовогоПериода, НачалоОбзора);
			КонецИнтервала  = Мин(КонецФинансовогоПериода, КонецДня(КонецОбзора));
			
			Если НачалоИнтервала > КонецИнтервала Тогда
				Продолжить;
			КонецЕсли;
			
			РелевантныеПериоды = ЗавершенныеИнтервалы(
				НачалоИнтервала,
				КонецИнтервала,
				Выборка.Периодичность);
			
			Для Каждого НачалоПериода Из РелевантныеПериоды Цикл
				КонецПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Выборка.Периодичность, НачалоПериода);
				НачалоВыполнения.Вставить(НачалоПериода, КонецПериода + 1);
			КонецЦикла;
				
		Иначе 
			
			// Базовый и релевантный периоды не совпадают.
			// Базовый период включает в себя один или несколько релевантных.
			Если ПростойБазовыйПериод Тогда
				БазовыйПериод = Выборка.Периодичность;
				ОтставаниеБазовогоПериода = 0;
			Иначе
				БазовыйПериод = Выборка.БазовыйПериод;
				ОтставаниеБазовогоПериода = Выборка.ОтставаниеБазовогоПериода;
			КонецЕсли;
			
			// Базовый период всегда предшествует сроку
			КалендарьБухгалтера.УточнитьОтставаниеБазовогоПериода(
				ОтставаниеБазовогоПериода, 
				БазовыйПериод, 
				Выборка.СрокМесяцев);
			
			// Интервал базовых периодов также не совпадает - опережает соответствующий финансовый период
			ОпережениеРелевантногоПериода = 1 + ОтставаниеБазовогоПериода;
			НачалоИнтервалаБазовыхПериодов = ИнтерфейсыВзаимодействияБРОКлиентСервер.ДобавитьПериод(
				Выборка.НачалоФинансовогоПериода,
				БазовыйПериод,
				- ОпережениеРелевантногоПериода);
			// Для расчета конца интервала нельзя прибавлять месяцы к дате конца другого периода,
			// так как в разных месяцах разное количество дней.
			// Поэтому конец интервала рассчитываем через начало следующего интервала.
			НачалоСледующегоФинансовогоПериода = КонецФинансовогоПериода + 1;
			НачалоИнтервалаСледующегоЗаИнтерваломБазовыхПериодов = 
				ИнтерфейсыВзаимодействияБРОКлиентСервер.ДобавитьПериод(
					НачалоСледующегоФинансовогоПериода,
					БазовыйПериод,
					- ОпережениеРелевантногоПериода);
			КонецИнтервалаБазовыхПериодов = НачалоИнтервалаСледующегоЗаИнтерваломБазовыхПериодов - 1;
				
			// Даты окончания базовых периодов будут лежать в интервале:
			НачалоИнтервалаБазовыхПериодов = Макс(НачалоИнтервалаБазовыхПериодов, НачалоОбзора);
			КонецИнтервалаБазовыхПериодов  = Мин(КонецИнтервалаБазовыхПериодов, КонецДня(КонецОбзора));
			
			Если НачалоИнтервалаБазовыхПериодов > КонецИнтервалаБазовыхПериодов Тогда
				Продолжить;
			КонецЕсли;
			
			// Составим перечень базовых периодов, которые завершились внутри интервала
			ЗавершенныеБазовыеПериоды = ЗавершенныеИнтервалы(
				НачалоИнтервалаБазовыхПериодов,
				КонецИнтервалаБазовыхПериодов,
				БазовыйПериод);
				
			ОтношениеБазовогоПериодаИРелевантного = 1;
			Если БазовыйПериод <> Выборка.Периодичность Тогда
				ПроизвольнаяДата = '0001-01-01';
				ДлинаБазовогоПериода     = ИнтерфейсыВзаимодействияБРОКлиентСервер.ДобавитьПериод(ПроизвольнаяДата, БазовыйПериод)         - ПроизвольнаяДата;
				ДлинаРелевантногоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.ДобавитьПериод(ПроизвольнаяДата, Выборка.Периодичность) - ПроизвольнаяДата;
				Если ДлинаРелевантногоПериода <> 0 Тогда
					ОтношениеБазовогоПериодаИРелевантного = ДлинаБазовогоПериода / ДлинаРелевантногоПериода;
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого НачалоБазовогоПериода Из ЗавершенныеБазовыеПериоды Цикл
				
				КонецБазовогоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(БазовыйПериод, НачалоБазовогоПериода);
				
				// Рассчитаем релевантный период.
				// Этот период всегда позже базового и, как правило (но не всегда), следует непосредственно за ним.
				РелевантныйПериод = КонецБазовогоПериода + 1;
				Если ОтставаниеБазовогоПериода > 0 Тогда
					РелевантныйПериод = ИнтерфейсыВзаимодействияБРОКлиентСервер.ДобавитьПериод(
						РелевантныйПериод, 
						БазовыйПериод,
						ОтставаниеБазовогоПериода);
				КонецЕсли;
				
				НачалоДиапазонаРелевантныхПериодов = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(БазовыйПериод, РелевантныйПериод);
				КонецДиапазонаРелевантныхПериодов  = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(БазовыйПериод, РелевантныйПериод);
				
				Если ОтношениеБазовогоПериодаИРелевантного <= 1 Тогда
					
					// Одному базовому периоду соответствует один релевантный
					// Они не совпадают по датам (базовый раньше релевантного - прогноз на февраль по данным января) 
					// и могут не совпадать по длине (прогноз на следующий год по данным 9 месяцев)
					РелевантныеПериоды.Добавить(НачалоДиапазонаРелевантныхПериодов);
					НачалоВыполнения.Вставить(НачалоДиапазонаРелевантныхПериодов, КонецБазовогоПериода + 1);
					
				ИначеЕсли ОтношениеБазовогоПериодаИРелевантного > 1 Тогда
					
					// Базовому периоду соответствует несколько релевантных
					// Например, 
					// - оплата за 1 полугодие по результатам прошлого года
					// - в январе, феврале и марте платим по 1/3 платежа за 4 квартал
					
					ПериодыВнутриБазового = ЗавершенныеИнтервалы(
						НачалоДиапазонаРелевантныхПериодов,
						КонецДиапазонаРелевантныхПериодов,
						Выборка.Периодичность);
						
					Для Каждого НачалоПериода Из ПериодыВнутриБазового Цикл
						РелевантныеПериоды.Добавить(НачалоПериода);
						НачалоВыполнения.Вставить(НачалоПериода, КонецБазовогоПериода + 1);
					КонецЦикла;
					
				КонецЕсли; 
			КонецЦикла;	// По базовым периодам
		КонецЕсли;
		
		// Исключим запрещенные периоды
		Если Не ПустаяСтрока(Выборка.ОграничениеПериода) Тогда
			
			// Ограничение периодов применяется к релевантным периодам, но не к базовым!
			
			Если Выборка.ФинансовыйПериод = Выборка.Периодичность Тогда
				// Особый случай - ограничение задается в номерах периодов в течение года.
				ПериодОграничения = Перечисления.Периодичность.Год;
			Иначе
				ПериодОграничения = Выборка.ФинансовыйПериод;
			КонецЕсли;
				
			ЗапрещенныеПериодыПоФинансовым = Новый Соответствие;
			РазмерМассива = РелевантныеПериоды.Количество();
			Для НомерСКонца = 1 По РазмерМассива Цикл
				Индекс = РазмерМассива - НомерСКонца;
				Период = РелевантныеПериоды[Индекс];
				ФинансовыйПериод = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(ПериодОграничения, Период);
				ЗапрещенныеПериоды = ЗапрещенныеПериодыПоФинансовым[ФинансовыйПериод];
				Если ЗапрещенныеПериоды = Неопределено Тогда
					КонецФинансовогоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(ПериодОграничения, Период);
					ЗапрещенныеПериоды = ЗапрещенныеИнтервалы(
						ФинансовыйПериод, 
						КонецФинансовогоПериода, 
						Выборка.Периодичность, 
						Выборка.ОграничениеПериода);
					ЗапрещенныеПериодыПоФинансовым.Вставить(ФинансовыйПериод, ЗапрещенныеПериоды);
				КонецЕсли;
				Если ЗапрещенныеПериоды.Найти(Период) <> Неопределено Тогда
					РелевантныеПериоды.Удалить(Индекс);
				КонецЕсли;
			КонецЦикла;
				
		КонецЕсли;
		
		// Заполним перечень событий
		Для Каждого НачалоПериода Из РелевантныеПериоды Цикл
			
			КонецПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Выборка.Периодичность, НачалоПериода);
			
			СтрокаРасписания = Расписание.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРасписания, ОписаниеДействия(Выборка, КонецПериода));
			СтрокаРасписания.НачалоВыполнения = НачалоВыполнения[НачалоПериода];
			
		КонецЦикла;
		
	КонецЦикла; // Выборка правил
	
КонецПроцедуры

Процедура ЗаполнитьРасписаниеРегулярныеПлатежи(Организация, Правила, Расписание, Знач НачалоОбзора, Знач КонецОбзора)
	
	ТекущаяДата = НачалоДня(ТекущаяДатаСеанса());
	
	Для каждого Правило Из Правила Цикл
		
		Если ЗначениеЗаполнено(НачалоОбзора) Тогда
			КонецПериодаОбзора = Макс(КонецОбзора, Правило.НачалоВыполнения)+1;
		Иначе
			// Событиями, приводящими к появлению напоминаний которые еще можно выполнить в срок, могут являться только события предыдущего и текущего периодов
			// т.к. оценка актуальности срока выполнения считается относительно текущей даты, глубину поиска источников актуальных задач отсчитываем -1 период от текущей даты сеанса
			НачалоОбзора = Макс(
				Правило.НачалоВыполнения, // период анализа не может быть раньше периода начала выполнения правила
				ИнтерфейсыВзаимодействияБРОКлиентСервер.ДобавитьПериод(ТекущаяДата, Правило.Периодичность, -1)); 
			КонецПериодаОбзора = КонецОбзора;
		КонецЕсли;
		
		// Первая задача по правилу в дату НачалоВыполнения, основное условие добавления - задача еще может быть выполнена в срок
		// Планируется в составе недавних событий в случае если дата начала выполнения больше текущей даты актуальности, 
		// И в составе давних - если дата начала выполнения меньше даты актуальности но больше текущей даты.
		Если Правило.НачалоВыполнения >= ТекущаяДата 
			И (Правило.НачалоВыполнения >= НачалоОбзора И Правило.НачалоВыполнения < КонецПериодаОбзора) Тогда
		
			ЗаполнитьЗаписьРасписанияРегулярныеПлатежи(
				Расписание.Добавить(), 
				Правило, 
				ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Правило.Периодичность, Правило.НачалоВыполнения));
		
		КонецЕсли; 
		
		// Массив дат начала периодов выполнения правила лежащих в периоде обзора. Соотвественно массив дат начала месяца, квартала или года
		// Для правил дата начала выполнения которых больше даты конца обзора - содержит один элемент - начало периода первого выполнения
		// Для правил, которые уже действуют на дату КонецОбзора будет содержать массив дат за периоды лежащие внутри обозреваемого интервала.
		Периоды = КалендарьБухгалтера.Периоды(НачалоОбзора, КонецОбзора, Правило.Периодичность);
		
		// Для каждого анализируемого периода рассчитаем срок выполнения правила в нем и проверим
		// - начинается ли в нем какое либо правило (тогда создаем задачу по правилу в этом периоде)
		// - попадает ли срок выполнения задачи по правилу в период обзора (тогда создаем очередную задачу по правилу в следующем периоде)
		Для каждого Период Из Периоды Цикл
			// Срок выполнения задачи по правилу в анализируемом периоде. Всегда лежит внутри периода.
			Срок = Справочники.ПравилаРегулярныхПлатежей.ДатаПлатежаВПериоде(Правило.Правило, Период);
			
			// Добавляем новую задачу по правилу, когда срок очередного выполнения задачи по правилу наступает в обозреваемом интервале. 
			// В этом случае записываем задачу по правилу на следующий, по отношению к анализируемому, период.
			Если Срок >= НачалоОбзора И Срок < КонецОбзора Тогда
				
				ЗаполнитьЗаписьРасписанияРегулярныеПлатежи(
					Расписание.Добавить(), 
					Правило,
					ИнтерфейсыВзаимодействияБРОКлиентСервер.ДобавитьПериод(Период, Правило.Периодичность));
					
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЗаписьРасписанияРегулярныеПлатежи(ЗаписьРасписания, Правило, ПериодВыполнения)

	ЗаполнитьЗначенияСвойств(ЗаписьРасписания, Правило);
	
	ЗаписьРасписания.Срок                   = Справочники.ПравилаРегулярныхПлатежей.ДатаПлатежаВПериоде(Правило, ПериодВыполнения);
	ЗаписьРасписания.ПериодСобытия          = ПериодВыполнения;
	ЗаписьРасписания.ПеренестиНаРабочийДень = -1;
	
	ЗначенияЗаполнения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Правило.АктивныйШаблон, "СуммаДокумента, Контрагент.Наименование");
	ЗаписьРасписания.Наименование = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
		НСтр("ru ='Оплата [СуммаДокумента] руб [КонтрагентНаименование]'"), 
		ЗначенияЗаполнения);

КонецПроцедуры

Процедура ПеренестиНаРабочиеДни(Расписание)

	// Перенесем на рабочие дни
	ПроизводственныйКалендарь = КалендарныеГрафики.ПроизводственныйКалендарьРоссийскойФедерации();
	
	// Если производственный календарь не заполнен - то ничего не делаем
	Если НЕ ЗначениеЗаполнено(ПроизводственныйКалендарь) Тогда
		Возврат;
	КонецЕсли; 
	
	ВариантыПереноса = Новый Соответствие;
	ВариантыПереноса.Вставить(1,  Ложь);
	ВариантыПереноса.Вставить(-1, Истина);
	
	Для каждого ВариантПереноса Из ВариантыПереноса Цикл
		
		ОтборСтрок = Новый Структура("ПеренестиНаРабочийДень", ВариантПереноса.Ключ);
		
		Интервалы = Расписание.НайтиСтроки(ОтборСтрок);
		
		ИсходныеДаты = ОбщегоНазначения.ВыгрузитьКолонку(Интервалы, "Срок", Истина);
	
		ГрафикПереноса = КалендарныеГрафики.ПолучитьДатыРабочихДней(
			ПроизводственныйКалендарь, 
			ИсходныеДаты, 
			ВариантПереноса.Значение,   // ПолучатьПредшествующие
			Ложь,                      // ВызыватьИсключение
			Истина);                  // ИгнорироватьНезаполненностьГрафика (график может быть еще не заполнен за следующий год, но заполнен за текущий)
			
		Для каждого Интервал Из Интервалы Цикл
		
			ДатаПереноса = ГрафикПереноса[Интервал.Срок];
			Если ЗначениеЗаполнено(ДатаПереноса) Тогда
				Интервал.Срок = ДатаПереноса;
			КонецЕсли;
		
		КонецЦикла; 
	
	КонецЦикла; 

КонецПроцедуры

Процедура УдалитьПросроченныеЗадачи(Расписание, ТекущаяДата)

	КоличествоСтрок = Расписание.Количество();
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		Индекс            = КоличествоСтрок - НомерСтроки;
		ЭлементРасписания = Расписание[Индекс];
		
		Если ЭлементРасписания.Срок < ТекущаяДата Тогда
			Расписание.Удалить(Индекс);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьСписокЗадачПоПравилу(Организация, Правило, ТолькоАктуальные)
	
	Условия = Новый Массив;
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Правило",     Правило);
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗадачиБухгалтера.Организация,
	|	ЗадачиБухгалтера.Правило,
	|	ЗадачиБухгалтера.ПериодСобытия
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|ГДЕ
	|	ЗадачиБухгалтера.Организация = &Организация
	|	И ЗадачиБухгалтера.Правило = &Правило";
	
	
	Если ТолькоАктуальные Тогда
		Запрос.Текст = ТекстЗапроса + " И ЗадачиБухгалтера.Срок >= &ТекущаяДата И НЕ ЗадачиБухгалтера.Выполнено";
	Иначе
		Запрос.Текст = ТекстЗапроса;
	КонецЕсли; 
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

// Составим набор интервалов, которые завершились в периоде обзора
Функция ЗавершенныеИнтервалы(НачалоРасписания, КонецРасписания, Периодичность)
	
	ЗавершенныеИнтервалы = Новый Массив;
	
	КонецКрайнегоИнтервала = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Периодичность, КонецРасписания + 1) - 1;
	
	Пока КонецКрайнегоИнтервала >= НачалоРасписания Цикл
		НачалоКрайнегоИнтервала = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Периодичность, КонецКрайнегоИнтервала);
		ЗавершенныеИнтервалы.Вставить(0, НачалоКрайнегоИнтервала); // Потому что обходим периоды задом наперед
		КонецКрайнегоИнтервала = НачалоКрайнегоИнтервала - 1; // Шаг назад
	КонецЦикла;
	
	Возврат ЗавершенныеИнтервалы;
	
КонецФункции

Функция ЗапрещенныеИнтервалы(НачалоФинансовогоПериода, КонецФинансовогоПериода, Периодичность, Ограничение)
	
	ЗапрещенныеИнтервалы = Новый Массив;
	
	Если ПустаяСтрока(Ограничение) Тогда
		Возврат ЗапрещенныеИнтервалы;
	КонецЕсли;
		
	НомераЗапрещенныхИнтервалов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Ограничение);
	
	ВсеИнтервалы = КалендарьБухгалтера.Периоды(НачалоФинансовогоПериода, КонецФинансовогоПериода, Периодичность);
	
	КоличествоИнтервалов = ВсеИнтервалы.Количество();
		
	Для Каждого НомерЗапрещенногоИнтервалаСтрокой Из НомераЗапрещенныхИнтервалов Цикл
		
		Попытка
			НомерЗапрещенногоИнтервала = Число(НомерЗапрещенногоИнтервалаСтрокой);
		Исключение
			Продолжить;
		КонецПопытки;
		
		Если НомерЗапрещенногоИнтервала < 1 Тогда
			Продолжить;
		КонецЕсли;
		
		Если НомерЗапрещенногоИнтервала > КоличествоИнтервалов Тогда
			Продолжить;
		КонецЕсли;
		
		ЗапрещенныеИнтервалы.Добавить(ВсеИнтервалы[НомерЗапрещенногоИнтервала - 1]);
			
	КонецЦикла;
	
	Возврат ЗапрещенныеИнтервалы;
	
КонецФункции

Функция РасписаниеПоДавнимСобытиям(Организация, КонецОбзора, ТекущаяДата)
	
	НачалоОбзора = '0001-01-01';
	
	Расписание = НовыйРасписание();
	
	// Служебная колонка, будет удалена в конце процедуры
	// Если значение ПеренестиНаРабочийДень = 1, то задача переносится на следующий рабочий день
	// Если значение ПеренестиНаРабочийДень = -1, то задача переносится на предыдущий рабочий день
	// Если значение ПеренестиНаРабочийДень = 0, то задача никуда не переносится
	Расписание.Колонки.Добавить("ПеренестиНаРабочийДень", Новый ОписаниеТипов("Число"));
	
	ПравилаОтчетыНалоги = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПравилаОрганизации(
		Организация, 
		НачалоОбзора, 
		КонецОбзора);
		
	ЗаполнитьРасписаниеПоНалогамИСборам(
		Организация, 
		ПравилаОтчетыНалоги, 
		Расписание,
		НачалоОбзора, 
		КонецОбзора);
		
	ПравилаРегулярныеПлатежи = Справочники.ПравилаРегулярныхПлатежей.ПравилаОрганизации(
		Организация, 
		НачалоОбзора, 
		КонецОбзора);
	
	ЗаполнитьРасписаниеРегулярныеПлатежи(
		Организация, 
		ПравилаРегулярныеПлатежи, 
		Расписание,
		НачалоОбзора, 
		КонецОбзора);
	
	ПеренестиНаРабочиеДни(Расписание);
	
	Расписание.Колонки.Удалить("ПеренестиНаРабочийДень");
	
	// Исключим из расписания просроченные задачи - их там будет немного,
	// так устроены функции ПравилаОрганизации() и ЗаполнитьРасписаниеПоНалогамИСборам(), ЗаполнитьРасписаниеРегулярныеПлатежи()
	УдалитьПросроченныеЗадачи(Расписание, ТекущаяДата);
	
	Расписание.ЗаполнитьЗначения(Организация, "Организация");
	
	Возврат Расписание;
	
КонецФункции

Функция РасписаниеПоНедавнимСобытиям(Организация, НачалоОбзора, КонецОбзора)
	
	Расписание = НовыйРасписание();
	
	// Служебная колонка, будет удалена в конце процедуры
	// Если значение ПеренестиНаРабочийДень = 1, то задача переносится на следующий рабочий день
	// Если значение ПеренестиНаРабочийДень = -1, то задача переносится на предыдущий рабочий день
	// Если значение ПеренестиНаРабочийДень = 0, то задача никуда не переносится
	Расписание.Колонки.Добавить("ПеренестиНаРабочийДень", Новый ОписаниеТипов("Число"));
	
	ПравилаОтчетыНалоги = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПравилаОрганизации(
		Организация, 
		НачалоОбзора, 
		КонецОбзора);
		
	ЗаполнитьРасписаниеПоНалогамИСборам(
		Организация, 
		ПравилаОтчетыНалоги, 
		Расписание,
		НачалоОбзора, 
		КонецОбзора);
	
	ПравилаРегулярныеПлатежи = Справочники.ПравилаРегулярныхПлатежей.ПравилаОрганизации(
		Организация, 
		НачалоОбзора, 
		КонецОбзора);
	
	ЗаполнитьРасписаниеРегулярныеПлатежи(
		Организация, 
		ПравилаРегулярныеПлатежи, 
		Расписание,
		НачалоОбзора, 
		КонецОбзора);
	
	ПеренестиНаРабочиеДни(Расписание);
	
	Расписание.Колонки.Удалить("ПеренестиНаРабочийДень");

	Расписание.ЗаполнитьЗначения(Организация, "Организация");
		
	Возврат Расписание;
		
КонецФункции

Процедура ЗаписатьНовыеЗадачи(Организация, Расписание, СтараяДатаАктуальности, НоваяДатаАктуальности, ТекущаяДата, ИзмененыЗаписи = Ложь)
	
	Если Расписание.Количество() = 0 И СтараяДатаАктуальности > ТекущаяДата Тогда
		// Не меняем дату актуальности, потому что РасписаниеПоНедавнимСобытиям() работает заведомо быстрее, чем РасписаниеПоДавнимСобытиям().
		// В том случае, если список задач бухгалтера не сочтет данные сильно устаревшими.
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Заблокируем на время транзакции
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗадачиБухгалтера");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Организация", Организация);
	
	НачатьТранзакцию();
	
	Блокировка.Заблокировать();
	
	// Создадим новые задачи
	Для Каждого ЭлементРасписания Из Расписание Цикл
		Запись = РегистрыСведений.ЗадачиБухгалтера.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, ЭлементРасписания);
		Запись.Записать();
		ИзмененыЗаписи = Истина;
	КонецЦикла;
	
	// Запишем, что актуализировали список
	Состояние = РегистрыСведений.АктуальностьСпискаЗадачБухгалтера.СоздатьМенеджерЗаписи();
	Состояние.Организация      = Организация;
	Состояние.ДатаАктуальности = НоваяДатаАктуальности;
	Состояние.Записать();
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ЗаписатьИзменения(Организация, Расписание, ТекущаяДата, ИзмененыЗаписи = Ложь)
	
	// Определять изменения - отличия между правильным (только что рассчитанным)
	// расписанием и уже имеющимся - будем запросом (позже, в транзакции).
	// Для передачи порядка строк таблицы в запрос добавляем в таблицу колонку Индекс.
	Расписание.Колонки.Добавить("Индекс", Новый ОписаниеТипов("Число"));
	Для Каждого СтрокаРасписания Из Расписание Цикл
		СтрокаРасписания.Индекс = Расписание.Индекс(СтрокаРасписания);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Заблокируем на время транзакции
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗадачиБухгалтера");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Организация", Организация);
	
	НачатьТранзакцию();
		
	Блокировка.Заблокировать();
	
	// Получим перечень отличий
	// Отличиями считаем добавившиеся или удаленные события, а также те, у которых изменился срок
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Расписание",    Расписание);
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("ТекущаяДата",   ТекущаяДата);
	
	// Тк при неналоговых регулярных платежах возможно изменение правила после выполнения по нему платежа, исключаем записи, по которым сделаны платежи, из обработки
	// Это делается для того, чтобы задачи по которым уже сделан платеж не исчезали из списка при изменении условий правила.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Расписание.Индекс,
	|	Расписание.Организация КАК Организация,
	|	Расписание.Правило КАК Правило,
	|	Расписание.ПериодСобытия КАК ПериодСобытия,
	|	Расписание.Срок КАК Срок
	|ПОМЕСТИТЬ Расписание
	|ИЗ
	|	&Расписание КАК Расписание
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Правило,
	|	ПериодСобытия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиБухгалтера.Организация КАК Организация,
	|	ЗадачиБухгалтера.Правило КАК Правило,
	|	ЗадачиБухгалтера.ПериодСобытия КАК ПериодСобытия
	|ПОМЕСТИТЬ МогутБытьУдалены
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегулярныеПлатежи КАК РегулярныеПлатежи
	|		ПО ЗадачиБухгалтера.Организация = РегулярныеПлатежи.Организация
	|			И ЗадачиБухгалтера.Правило = РегулярныеПлатежи.Правило
	|			И ЗадачиБухгалтера.ПериодСобытия = РегулярныеПлатежи.ПериодСобытия
	|ГДЕ
	|	ЗадачиБухгалтера.Организация = &Организация
	|	И НЕ ЗадачиБухгалтера.Выполнено
	|	И ЗадачиБухгалтера.Срок >= &ТекущаяДата
	|	И РегулярныеПлатежи.ПлатежноеПоручение ЕСТЬ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Правило,
	|	ПериодСобытия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Расписание.Индекс
	|ИЗ
	|	Расписание КАК Расписание
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|		ПО Расписание.Организация = ЗадачиБухгалтера.Организация
	|			И Расписание.Правило = ЗадачиБухгалтера.Правило
	|			И Расписание.ПериодСобытия = ЗадачиБухгалтера.ПериодСобытия
	|ГДЕ
	|	ЗадачиБухгалтера.Организация ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МогутБытьУдалены.Организация,
	|	МогутБытьУдалены.Правило,
	|	МогутБытьУдалены.ПериодСобытия
	|ИЗ
	|	МогутБытьУдалены КАК МогутБытьУдалены
	|		ЛЕВОЕ СОЕДИНЕНИЕ Расписание КАК Расписание
	|		ПО МогутБытьУдалены.Организация = Расписание.Организация
	|			И МогутБытьУдалены.Правило = Расписание.Правило
	|			И МогутБытьУдалены.ПериодСобытия = Расписание.ПериодСобытия
	|ГДЕ
	|	Расписание.Организация ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Расписание.Индекс КАК Индекс
	|ИЗ
	|	Расписание КАК Расписание
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|		ПО Расписание.Организация = ЗадачиБухгалтера.Организация
	|			И Расписание.Правило = ЗадачиБухгалтера.Правило
	|			И Расписание.ПериодСобытия = ЗадачиБухгалтера.ПериодСобытия
	|ГДЕ
	|	НЕ ЗадачиБухгалтера.Выполнено
	|	И Расписание.Срок <> ЗадачиБухгалтера.Срок";
	
	Результат = Запрос.ВыполнитьПакет();
	ИндексыНовыхЗаписей       = Результат[2].Выбрать();
	ЗаписиКУдалению           = Результат[3].Выбрать();
	ИндексыЗаписейИзмененСрок = Результат[4].Выбрать();
	
	// Создадим новые задачи
	Пока ИндексыНовыхЗаписей.Следующий() Цикл
		Запись = РегистрыСведений.ЗадачиБухгалтера.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, Расписание[ИндексыНовыхЗаписей.Индекс]);
		Запись.Записать();
		ИзмененыЗаписи = Истина;
	КонецЦикла;
	
	// Удалим задачи, ставшие неактуальными
	Пока ЗаписиКУдалению.Следующий() Цикл
		Запись = РегистрыСведений.ЗадачиБухгалтера.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, ЗаписиКУдалению);
		Запись.Удалить();
		ИзмененыЗаписи = Истина;
	КонецЦикла;
	
	// Сменим срок
	Пока ИндексыЗаписейИзмененСрок.Следующий() Цикл
		Запись = РегистрыСведений.ЗадачиБухгалтера.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, Расписание[ИндексыЗаписейИзмененСрок.Индекс]);
		Запись.Записать();
		ИзмененыЗаписи = Истина;
	КонецЦикла;
	
	// Дата актуальности не изменилась
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Функция ОписаниеДействия(Правило, КонецПериода)
	
	День = 24 * 60 * 60;
	
	ОписаниеДействия = Новый Структура;
	ОписаниеДействия.Вставить("Правило",                     Правило.Ссылка);
	ОписаниеДействия.Вставить("ПериодСобытия",               КонецПериода);
	ОписаниеДействия.Вставить("РегистрацияВНалоговомОргане", Правило.РегистрацияВНалоговомОргане);
	
	Срок = КонецМесяца(ДобавитьМесяц(КонецПериода, Правило.СрокМесяцев)) + Правило.СрокДней * День;
	ОписаниеДействия.Вставить("Срок",          Срок);
	ОписаниеДействия.Вставить("ПеренестиНаРабочийДень", ?(Правило.СрокМожетЗакончитьсяВВыходной, 0, 1));
	
	Если Правило.Действие = Перечисления.ВидыДействийКалендаряБухгалтера.Отчет Тогда
		ОписаниеДействия.Вставить("Периодичность", Правило.ФинансовыйПериод);
	Иначе
		ОписаниеДействия.Вставить("Периодичность", Правило.Периодичность);
	КонецЕсли;
	
	ПредставлениеПериода = КалендарьБухгалтера.ПредставлениеПериодаСобытия(
		ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(ОписаниеДействия.Периодичность, КонецПериода),
		КонецПериода);
	ОписаниеДействия.Вставить("ПредставлениеПериода", ПредставлениеПериода);
	
	НалоговыйОрган = "";
	Если ЗначениеЗаполнено(Правило.РегистрацияВНалоговомОргане) Тогда
		Свойства = Новый Структура("КодКонтролирующегоОргана, ВидКонтролирующегоОргана", 
			Правило.КодКонтролирующегоОргана, Перечисления.ТипыКонтролирующихОрганов.ФНС);
		ПредставлениеКонтролирующегоОргана =
			РегламентированнаяОтчетностьВызовСервера.ПредставлениеКонтролирующегоОргана(Свойства);
		НалоговыйОрган = " (" + ПредставлениеКонтролирующегоОргана + ")";
	КонецЕсли;	
	
	// Наименование действия состоит из трех частей:
	// названия задачи, описания действия и периода (для местных налогов дополняется налоговым органом).
	// Описание действия может отсутствовать.
	ШаблонТекста  = НСтр("ru = '[Задача][Событие] за [Период][НалоговыйОрган]'");
	ШаблонСобытие = НСтр("ru = ', [Описание]'");
	
	ПараметрыТекста = Новый Структура;
	ПараметрыТекста.Вставить("Задача",         "" + Правило.Владелец);
	ПараметрыТекста.Вставить("Описание",       Правило.Описание);
	ПараметрыТекста.Вставить("Период",         ПредставлениеПериода);
	ПараметрыТекста.Вставить("НалоговыйОрган", НалоговыйОрган);
	
	Если ПустаяСтрока(ПараметрыТекста.Описание) Тогда
		ПараметрыТекста.Вставить("Событие", "");
	Иначе
		ПараметрыТекста.Вставить(
			"Событие", 
			СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонСобытие, ПараметрыТекста));
	КонецЕсли;
	
	ОписаниеДействия.Вставить("Наименование", СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонТекста, ПараметрыТекста));
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция БлижайшаяДатаПоявленияЗадачОрганизации(Организация, Знач КонецИнтервалаПоиска = '00010101')
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Упреждение  = КалендарьБухгалтера.УпреждениеЗаполненияСписка() * 24 * 60 * 60;
	
	ДатаАктуальности = РегистрыСведений.АктуальностьСпискаЗадачБухгалтера.ДатаАктуальности(Организация);
	Если Не ЗначениеЗаполнено(ДатаАктуальности) Тогда
		ТекущаяДата = ТекущаяДатаСеанса() + Упреждение;
	Иначе
		ТекущаяДата = ДатаАктуальности + 1; // Текущая дата обозначает период, за который еще не созданы задачи
	КонецЕсли;
	
	ДатаНачалаДеятельности = КалендарьБухгалтера.ДатаНачалаДеятельности(Организация);
	ТекущаяДата = Макс(ТекущаяДата, ДатаНачалаДеятельности);
	
	Если Не ЗначениеЗаполнено(КонецИнтервалаПоиска) Тогда
		КонецИнтервалаПоиска = КонецГода(ДобавитьМесяц(ТекущаяДата, 6));
	КонецЕсли;
	
	Правила = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПравилаОрганизации(
		Организация,
		ТекущаяДата,
		КонецИнтервалаПоиска);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц; // Хранит ПравилаУплатыНалоговНаМестах
	РегистрыСведений.ПорядокУплатыНалоговНаМестах.СоздатьПравилаУплатыНалоговНаМестах(МенеджерВременныхТаблиц, Организация);
	
	// Правила: Правило, ФинансовыйПериод
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Правила", Правила);
	Запрос.УстановитьПараметр("ОсновнойНалоговыйОрган", 
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "РегистрацияВНалоговомОргане"));
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Правила.Правило КАК Правило,
	|	Правила.ФинансовыйПериод КАК ФинансовыйПериод
	|ПОМЕСТИТЬ Правила
	|ИЗ
	|	&Правила КАК Правила
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Правило
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Правила.Правило КАК Правило,
	|	Правила.ФинансовыйПериод,
	|	МАКСИМУМ(ЕСТЬNULL(ПравилаУплатыНалоговНаМестах.ПериодДействияПравила, ДАТАВРЕМЯ(1, 1, 1))) КАК ПериодДействияПравила,
	|	ЕСТЬNULL(ПравилаУплатыНалоговНаМестах.РегистрацияВНалоговомОргане, &ОсновнойНалоговыйОрган) КАК РегистрацияВНалоговомОргане
	|ПОМЕСТИТЬ МестныеПравила
	|ИЗ
	|	Правила КАК Правила
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПравилаУплатыНалоговНаМестах КАК ПравилаУплатыНалоговНаМестах
	|		ПО Правила.Правило = ПравилаУплатыНалоговНаМестах.Правило
	|			И Правила.ФинансовыйПериод >= ПравилаУплатыНалоговНаМестах.ПериодДействияПравила
	|
	|СГРУППИРОВАТЬ ПО
	|	Правила.ФинансовыйПериод,
	|	Правила.Правило,
	|	ЕСТЬNULL(ПравилаУплатыНалоговНаМестах.РегистрацияВНалоговомОргане, &ОсновнойНалоговыйОрган)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Правило,
	|	ПериодДействияПравила,
	|	РегистрацияВНалоговомОргане
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МестныеПравила.ФинансовыйПериод КАК НачалоФинансовогоПериода,
	|	Регламент.Ссылка КАК Ссылка,
	|	Регламент.Владелец КАК Владелец,
	|	ПРЕДСТАВЛЕНИЕ(Регламент.Владелец),
	|	Регламент.Описание КАК Описание,
	|	Регламент.Действие КАК Действие,
	|	Регламент.ФинансовыйПериод КАК ФинансовыйПериод,
	|	Регламент.Периодичность КАК Периодичность,
	|	Регламент.ОграничениеПериода КАК ОграничениеПериода,
	|	ЕСТЬNULL(ПравилаУплатыНалоговНаМестах.СрокМесяцев, Регламент.СрокМесяцев) КАК СрокМесяцев,
	|	ЕСТЬNULL(ПравилаУплатыНалоговНаМестах.СрокДней, Регламент.СрокДней) КАК СрокДней,
	|	Регламент.СрокМожетЗакончитьсяВВыходной КАК СрокМожетЗакончитьсяВВыходной,
	|	Регламент.БазовыйПериод КАК БазовыйПериод,
	|	Регламент.ОтставаниеБазовогоПериода КАК ОтставаниеБазовогоПериода,
	|	ЕСТЬNULL(ПравилаУплатыНалоговНаМестах.РегистрацияВНалоговомОргане, ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) КАК РегистрацияВНалоговомОргане
	|ИЗ
	|	МестныеПравила КАК МестныеПравила
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК Регламент
	|		ПО МестныеПравила.Правило = Регламент.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПравилаУплатыНалоговНаМестах КАК ПравилаУплатыНалоговНаМестах
	|		ПО МестныеПравила.Правило = ПравилаУплатыНалоговНаМестах.Правило
	|			И МестныеПравила.ПериодДействияПравила = ПравилаУплатыНалоговНаМестах.ПериодДействияПравила
	|			И МестныеПравила.РегистрацияВНалоговомОргане = ПравилаУплатыНалоговНаМестах.РегистрацияВНалоговомОргане
	|
	|УПОРЯДОЧИТЬ ПО
	|	НачалоФинансовогоПериода,
	|	Регламент.Периодичность.Порядок
	|ИТОГИ
	|	МАКСИМУМ(СрокМесяцев),
	|	МАКСИМУМ(СрокДней)
	|ПО
	|	Ссылка";
	
	ВыборкаПравил  = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ДалекоеБудущее = '29990101';
	БлижайшаяДата  = ДалекоеБудущее;
	Пока ВыборкаПравил.Следующий() Цикл
		
		БлижайшаяДатаПравила = БлижайшаяДата;
		
		СобытиеПозжеРелевантногоПериода = КалендарьБухгалтера.СрокИстекаетПослеОкончанияРелевантногоПериода(ВыборкаПравил);
		ПростойБазовыйПериод            = КалендарьБухгалтера.БазовыйПериодОпределяетсяПросто(ВыборкаПравил);
		
		Периодичность = ВыборкаПравил.Периодичность;
		Если Не ПростойБазовыйПериод Тогда
			Периодичность = ВыборкаПравил.БазовыйПериод;
		КонецЕсли;
		
		Выборка = ВыборкаПравил.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Выборка.Следующий() Цикл
			
			// Определим интервал базовых периодов
			
			КонецФинансовогоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Выборка.ФинансовыйПериод, Выборка.НачалоФинансовогоПериода);
			
			Если СобытиеПозжеРелевантногоПериода И ПростойБазовыйПериод Тогда
				
				НачалоИнтервалаБазовыхПериодов = Выборка.НачалоФинансовогоПериода;
				КонецИнтервалаБазовыхПериодов  = КонецФинансовогоПериода;
				
			Иначе
				
				// Базовый период всегда предшествует сроку
				ОтставаниеБазовогоПериода = Выборка.ОтставаниеБазовогоПериода;
				КалендарьБухгалтера.УточнитьОтставаниеБазовогоПериода(
					ОтставаниеБазовогоПериода, 
					Периодичность, 
					Выборка.СрокМесяцев);
				
				// Интервал базовых периодов опережает соответствующий финансовый период
				ОпережениеРелевантногоПериода = 1 +  ОтставаниеБазовогоПериода;
				НачалоИнтервалаБазовыхПериодов = ИнтерфейсыВзаимодействияБРОКлиентСервер.ДобавитьПериод(
					Выборка.НачалоФинансовогоПериода,
					Периодичность,
					- ОпережениеРелевантногоПериода);
				// Для расчета конца интервала нельзя прибавлять месяцы к дате конца другого периода,
				// так как в разных месяцах разное количество дней.
				// Поэтому конец интервала рассчитываем через начало следующего интервала.
				НачалоСледующегоФинансовогоПериода = КонецФинансовогоПериода + 1;
				НачалоИнтервалаСледующегоЗаИнтерваломБазовыхПериодов = 
					ИнтерфейсыВзаимодействияБРОКлиентСервер.ДобавитьПериод(
						НачалоСледующегоФинансовогоПериода,
						Периодичность,
						- ОпережениеРелевантногоПериода);
				КонецИнтервалаБазовыхПериодов = НачалоИнтервалаСледующегоЗаИнтерваломБазовыхПериодов - 1;

			КонецЕсли;
			
			Если НачалоИнтервалаБазовыхПериодов >= БлижайшаяДата Тогда
				Прервать; // Переходим к следующему правилу - все следующие периоды этого правила заведомо позже
			КонецЕсли;
			
			Если ТекущаяДата > КонецИнтервалаБазовыхПериодов Тогда
				Продолжить; // Переходим к следующему финансовому периоду - по этому периоду задачи уже должны быть созданы
			КонецЕсли;
			
			Если ТекущаяДата <= НачалоИнтервалаБазовыхПериодов Тогда
				
				БлижайшаяДатаПравила = НачалоИнтервалаБазовыхПериодов;
				
			Иначе
				
				// Найдем самый ранний из базовых периодов, за который не созданы задачи
				// ТекущаяДата относится к еще не завершившемуся периоду
				БлижайшийБазовыйПериод = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Периодичность, ТекущаяДата);
				
				БазовыеПериоды = КалендарьБухгалтера.Периоды(НачалоИнтервалаБазовыхПериодов, КонецИнтервалаБазовыхПериодов, Периодичность);
				Если БазовыеПериоды.Найти(БлижайшийБазовыйПериод) = Неопределено Тогда
					// В этом финансовом периоде подходящих нет.
					// Переходим к следующему финансовому периоду
					Продолжить; 
				КонецЕсли;
				
				БлижайшаяДатаПравила = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, БлижайшийБазовыйПериод) + 1;
					
				// Пренебрежем тем, что некоторые периоды могут быть ограничены.
					
			КонецЕсли;
			
			Прервать; // Если дошли до сюда, то определили ближайшую дату правила. А следующие периоды по определению позже нее.
			
		КонецЦикла; //Выборка (финансовых периодов)
		
		БлижайшаяДата = Мин(БлижайшаяДата, БлижайшаяДатаПравила);
		
	КонецЦикла; // ВыборкаПравил
	
	Если БлижайшаяДата >= ДалекоеБудущее Тогда
		Возврат Неопределено;
	Иначе
		Возврат БлижайшаяДата - Упреждение;
	КонецЕсли;
	
КонецФункции

// ПЕРЕДАЧА ПАРАМЕТРОВ

Функция МассивОрганизаций(ОтборОрганизации)
	
	Организации = Новый Массив;
	Если ТипЗнч(ОтборОрганизации) = Тип("Массив") Тогда
		Организации = ОтборОрганизации;
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организации",     ОтборОрганизации);
		Запрос.УстановитьПараметр("УстановленОтбор", ЗначениеЗаполнено(ОтборОрганизации));
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	НЕ Организации.ПометкаУдаления
		|	И НЕ Организации.ОбособленноеПодразделение
		|	И (НЕ &УстановленОтбор
		|			ИЛИ Организации.Ссылка В (&Организации))";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Организации.Добавить(Выборка.Ссылка);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Организации;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Задачи начала работы

Функция НовыеЗадачиНачалаРаботы(ОтборОрганизации)
	
	ЗадачиНачалаРаботы = Новый ТаблицаЗначений;
	ЗадачиНачалаРаботы.Колонки.Добавить("Организация",  Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ЗадачиНачалаРаботы.Колонки.Добавить("Правило",      Новый ОписаниеТипов("ПеречислениеСсылка.ЗадачиНачалаРаботы"));
	ЗадачиНачалаРаботы.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	ЗадачиНачалаРаботы.Колонки.Добавить("Выполнено",    Новый ОписаниеТипов("Булево"));
	
	ЗадачиНовыхОрганизаций = ЗадачиНовыхОрганизаций();
	
	// Добавим в список задачи настройки заполнения форм статистики
	// задачи настройки заполнения форм статистики зависят от настроек конкретной организации
	НастраиваемыеФормыСтатистики = ЗаполнениеФормСтатистики.НастраиваемыеФормыСтатистикиПредоставляемыеОрганизацией(ОтборОрганизации);
	
	// Составим список задач
	// Задача ПараметрыУчета в списке должна быть только одна
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗадачиНовыхОрганизаций.Задача КАК Задача,
	|	ЗадачиНовыхОрганизаций.ОбособленноеПодразделение КАК ОбособленноеПодразделение
	|ПОМЕСТИТЬ ЗадачиНачалаРаботы
	|ИЗ
	|	&ЗадачиНовыхОрганизаций КАК ЗадачиНовыхОрганизаций
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбособленноеПодразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастраиваемыеФормыСтатистики.Организация
	|ПОМЕСТИТЬ НастраиваемыеФормыСтатистики
	|ИЗ
	|	&НастраиваемыеФормыСтатистики КАК НастраиваемыеФормыСтатистики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Организация,
	|	Организации.ОбособленноеПодразделение КАК ОбособленноеПодразделение
	|ПОМЕСТИТЬ Организации
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	&УсловиеПоОрганизации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбособленноеПодразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Организация КАК Организация,
	|	ВсеЗадачиНачалаРаботы.Задача КАК Задача
	|ПОМЕСТИТЬ ПотребныеЗадачи
	|ИЗ
	|	ЗадачиНачалаРаботы КАК ВсеЗадачиНачалаРаботы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Организации КАК Организации
	|		ПО ВсеЗадачиНачалаРаботы.ОбособленноеПодразделение = Организации.ОбособленноеПодразделение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Перечисление.ЗадачиНачалаРаботы.ПараметрыУчета)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НастраиваемыеФормыСтатистики.Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ЗадачиНачалаРаботы.НастройкаЗаполненияФормСтатистики)
	|ИЗ
	|	НастраиваемыеФормыСтатистики КАК НастраиваемыеФормыСтатистики
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Задача
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА ПотребныеЗадачи.Задача = ЗНАЧЕНИЕ(Перечисление.ЗадачиНачалаРаботы.ПараметрыУчета)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|		ИНАЧЕ ПотребныеЗадачи.Организация
	|	КОНЕЦ КАК Организация,
	|	ПотребныеЗадачи.Задача КАК Правило,
	|	ПРЕДСТАВЛЕНИЕ(ПотребныеЗадачи.Задача) КАК Наименование,
	|	ЗначенияУпорядочивания.Порядок КАК Порядок
	|ИЗ
	|	ПотребныеЗадачи КАК ПотребныеЗадачи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиБухгалтера КАК СуществующиеЗадачи
	|		ПО ПотребныеЗадачи.Организация = СуществующиеЗадачи.Организация
	|			И ПотребныеЗадачи.Задача = СуществующиеЗадачи.Правило
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Перечисление.ЗадачиНачалаРаботы КАК ЗначенияУпорядочивания
	|		ПО ПотребныеЗадачи.Задача = ЗначенияУпорядочивания.Ссылка
	|ГДЕ
	|	СуществующиеЗадачи.Организация ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	
	Если ТипЗнч(ОтборОрганизации) = Тип("Массив") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоОрганизации", "Организации.Ссылка В(&ОтборОрганизации)");
	ИначеЕсли ЗначениеЗаполнено(ОтборОрганизации) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоОрганизации", "Организации.Ссылка = &ОтборОрганизации");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоОрганизации", "НЕ Организации.ПометкаУдаления");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ЗадачиНовыхОрганизаций",       ЗадачиНовыхОрганизаций);
	Запрос.УстановитьПараметр("НастраиваемыеФормыСтатистики", НастраиваемыеФормыСтатистики);
	Запрос.УстановитьПараметр("ОтборОрганизации",             ОтборОрганизации);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ЗадачиНачалаРаботы.Добавить(), Выборка);
	КонецЦикла;
	
	Возврат ЗадачиНачалаРаботы;
	
КонецФункции

Функция ЗадачиНовыхОрганизаций()
	
	ЗадачиОрганизаций = Новый ТаблицаЗначений;
	ЗадачиОрганизаций.Колонки.Добавить("Задача",                    Новый ОписаниеТипов("ПеречислениеСсылка.ЗадачиНачалаРаботы"));
	ЗадачиОрганизаций.Колонки.Добавить("ОбособленноеПодразделение", Новый ОписаниеТипов("Булево"));
	
	// Только в головных организациях
	НоваяЗадача = ЗадачиОрганизаций.Добавить();
	НоваяЗадача.Задача                    = Перечисления.ЗадачиНачалаРаботы.УчетнаяПолитика;
	НоваяЗадача.ОбособленноеПодразделение = Ложь;
	
	// Во всех организациях
	НоваяЗадача = ЗадачиОрганизаций.Добавить();
	НоваяЗадача.Задача                    = Перечисления.ЗадачиНачалаРаботы.НачальныеОстатки;
	НоваяЗадача.ОбособленноеПодразделение = Ложь;
	
	НоваяЗадача = ЗадачиОрганизаций.Добавить();
	НоваяЗадача.Задача                    = Перечисления.ЗадачиНачалаРаботы.СписокНалоговОтчетов;
	НоваяЗадача.ОбособленноеПодразделение = Ложь;
	
	НоваяЗадача = ЗадачиОрганизаций.Добавить();
	НоваяЗадача.Задача                    = Перечисления.ЗадачиНачалаРаботы.Подключение1СОтчетности;
	НоваяЗадача.ОбособленноеПодразделение = Ложь;
	
	НоваяЗадача = ЗадачиОрганизаций.Добавить();
	НоваяЗадача.Задача                    = Перечисления.ЗадачиНачалаРаботы.НачальныеОстатки;
	НоваяЗадача.ОбособленноеПодразделение = Истина;
	
	НоваяЗадача = ЗадачиОрганизаций.Добавить();
	НоваяЗадача.Задача                    = Перечисления.ЗадачиНачалаРаботы.СписокНалоговОтчетов;
	НоваяЗадача.ОбособленноеПодразделение = Истина;
	
	НоваяЗадача = ЗадачиОрганизаций.Добавить();
	НоваяЗадача.Задача                    = Перечисления.ЗадачиНачалаРаботы.Подключение1СОтчетности;
	НоваяЗадача.ОбособленноеПодразделение = Истина;
	
	Возврат ЗадачиОрганизаций;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления

// Обработчик обновления отмечает делает часть задач начала работы при обновлении с 2.0
//
Процедура ЗаполнениеЗадачНачалаРаботыПриОбновленииС20() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НевыполненныеЗадачи = Новый Массив;
	НевыполненныеЗадачи.Добавить(Перечисления.ЗадачиНачалаРаботы.СписокНалоговОтчетов);    // Нужно проверить - в 2.0 не было
	НевыполненныеЗадачи.Добавить(Перечисления.ЗадачиНачалаРаботы.Подключение1СОтчетности); // Нужно подключиться
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗадачиОрганизаций",   ЗадачиНовыхОрганизаций());
	Запрос.УстановитьПараметр("НевыполненныеЗадачи", НевыполненныеЗадачи);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗадачиОрганизаций.Задача КАК Задача,
	|	ЗадачиОрганизаций.ОбособленноеПодразделение КАК ОбособленноеПодразделение
	|ПОМЕСТИТЬ ВыполненныеЗадачиНачалаРаботы
	|ИЗ
	|	&ЗадачиОрганизаций КАК ЗадачиОрганизаций
	|ГДЕ
	|	НЕ ЗадачиОрганизаций.Задача В (&НевыполненныеЗадачи)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация,
	|	ВыполненныеЗадачиНачалаРаботы.Задача КАК Задача
	|ПОМЕСТИТЬ ВыполненныеЗадачиПоОрганизациям
	|ИЗ
	|	ВыполненныеЗадачиНачалаРаботы КАК ВыполненныеЗадачиНачалаРаботы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО ВыполненныеЗадачиНачалаРаботы.ОбособленноеПодразделение = Организации.ОбособленноеПодразделение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Перечисление.ЗадачиНачалаРаботы.ПараметрыУчета)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Задача
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыполненныеЗадачиПоОрганизациям.Организация,
	|	ВыполненныеЗадачиПоОрганизациям.Задача КАК Правило,
	|	ПРЕДСТАВЛЕНИЕ(ВыполненныеЗадачиПоОрганизациям.Задача) КАК Наименование,
	|	ИСТИНА КАК Выполнено
	|ИЗ
	|	ВыполненныеЗадачиПоОрганизациям КАК ВыполненныеЗадачиПоОрганизациям
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиБухгалтера КАК СуществующиеЗадачи
	|		ПО ВыполненныеЗадачиПоОрганизациям.Организация = СуществующиеЗадачи.Организация
	|			И ВыполненныеЗадачиПоОрганизациям.Задача = СуществующиеЗадачи.Правило
	|ГДЕ
	|	СуществующиеЗадачи.Организация ЕСТЬ NULL ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.ЗадачиБухгалтера.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Обработчик обновления переносит данные из удаленного регистра ВыполненныеЗадачиНачалаРаботы.
// При обновлении с 2.0 и начальном заполнении не выполняется.
//
Процедура ПеренестиДанныеИзРегистраВыполненныеЗадачиНачалаРаботы() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА УдалитьВыполненныеЗадачиНачалаРаботы.Задача = ЗНАЧЕНИЕ(Перечисление.ЗадачиНачалаРаботы.ПараметрыУчета)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|		ИНАЧЕ УдалитьВыполненныеЗадачиНачалаРаботы.Организация
	|	КОНЕЦ КАК Организация,
	|	УдалитьВыполненныеЗадачиНачалаРаботы.Задача КАК Правило,
	|	ПРЕДСТАВЛЕНИЕ(УдалитьВыполненныеЗадачиНачалаРаботы.Задача) КАК Наименование,
	|	ИСТИНА КАК Выполнено
	|ИЗ
	|	РегистрСведений.УдалитьВыполненныеЗадачиНачалаРаботы КАК УдалитьВыполненныеЗадачиНачалаРаботы";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.ЗадачиБухгалтера.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Записать();
	КонецЦикла;
	
КонецПроцедуры

#КонецЕсли
