////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОтборОрганизация = ОбщегоНазначенияБПВызовСервера.УстановитьОтборПоОсновнойОрганизации(ЭтаФорма);

	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ИзменениеОсновнойОрганизации" Тогда
		ОтборОрганизация = ОбщегоНазначенияБПКлиент.ИзменитьОтборПоОсновнойОрганизации(Список,, Параметр);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
		Список, 
		"Организация", 
		ОтборОрганизация, 
		ЗначениеЗаполнено(ОтборОрганизация));
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыКоманд = НовыеПараметрыКомандЗадачи();
	ЗаполнитьЗначенияСвойств(ПараметрыКоманд, Элемент.ТекущиеДанные);
	
	СписокКоманд = СписокКомандЗадачи(ПараметрыКоманд);
	
	КоличествоКоманд = СписокКоманд.Количество();
	Если КоличествоКоманд > 1 Тогда
		ОповещениеВыбораИзМеню = Новый ОписаниеОповещения("СписокЗадачВыборЗначенияЗавершение", ЭтотОбъект, ПараметрыКоманд);
		ПоказатьВыборИзМеню(ОповещениеВыбораИзМеню, СписокКоманд, Элемент);
	Иначе
		ВыполнитьДействие(ПараметрыКоманд);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗадачВыборЗначенияЗавершение(Команда, ПараметрыКоманды) Экспорт
	
	СписокЗадачВыполнитьКоманду(Команда, ПараметрыКоманды);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура КомандаУбратьИзВыполненных(Команда)
	
	КлючЗаписи = Элементы.Список.ТекущаяСтрока;
	
	Если КлючЗаписи = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УбратьИзВыполненных(КлючЗаписи);
	
	ОповеститьОбИзменении(КлючЗаписи);
	
	// Оповестим форму списка задач бухгалтера. Возможно, необходимо сменить текущую страницу формы.
	// Например, если до добавления нового налога, все задачи на сегодня выполнены.
	Оповестить("СписокЗадачБухгалтера_Изменение");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	
	// Выполнено
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Выполнено");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.Выполнено", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.РезультатУспехЦвет);
	
	
	// Выполнено
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Выполнено");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.Выполнено", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныеДанныеЦвет);
	
КонецПроцедуры

&НаСервере
Процедура УбратьИзВыполненных(КлючЗаписи)
	
	РегистрыСведений.ЗадачиБухгалтера.УстановитьСтатусВыполнено(КлючЗаписи,	Ложь);
	
КонецПроцедуры

&НаКлиенте
Функция НовыеПараметрыКомандЗадачи()
	
	ПараметрыКоманд = Новый Структура;
	ПараметрыКоманд.Вставить("Задача",                      Неопределено);
	ПараметрыКоманд.Вставить("ИдентификаторЗадачи",         "");
	ПараметрыКоманд.Вставить("Организация",                 Неопределено);
	ПараметрыКоманд.Вставить("РегистрацияВНалоговомОргане", Неопределено);
	ПараметрыКоманд.Вставить("Срок",                        '00010101');
	ПараметрыКоманд.Вставить("НачалоВыполнения",            '00010101');
	ПараметрыКоманд.Вставить("Правило",                     Неопределено);
	ПараметрыКоманд.Вставить("ИдентификаторПравила",        "");
	ПараметрыКоманд.Вставить("ПериодСобытия",               '00010101');
	ПараметрыКоманд.Вставить("Периодичность",               Неопределено); 
	ПараметрыКоманд.Вставить("Наименование",                "");
	ПараметрыКоманд.Вставить("Действие",                    Неопределено);
	ПараметрыКоманд.Вставить("ЕстьИнформацияНаИТС",         Ложь);
	ПараметрыКоманд.Вставить("АдресНаИТС",                  "");
	ПараметрыКоманд.Вставить("СпособОплаты",                Неопределено);
	
	Возврат ПараметрыКоманд;
	
КонецФункции

&НаСервереБезКонтекста
Функция СписокКомандЗадачи(ПараметрыКоманд)
	
	СписокКоманд = Новый СписокЗначений;
	
	Если ТипЗнч(ПараметрыКоманд.Правило) = Тип("СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов") Тогда
		ПараметрыКоманд.Действие = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыКоманд.Правило, "Действие");
	КонецЕсли;
	
	ЕстьПравоВыполненияЗадачи = КалендарьБухгалтера.ПравоВыполненияЗадачи(ПараметрыКоманд.Правило);
	
	Если ПараметрыКоманд.Действие = Перечисления.ВидыДействийКалендаряБухгалтера.Отчет И ЕстьПравоВыполненияЗадачи Тогда
		
		СписокКоманд.Добавить("ПодготовитьОтчет", 
			НСтр("ru = 'Подготовить отчет'"), , 
			БиблиотекаКартинок.РегламентированныйОтчет);
		
	ИначеЕсли ПараметрыКоманд.Действие = Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога И ЕстьПравоВыполненияЗадачи Тогда
		
		ЭтоЮрЛицо = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(ПараметрыКоманд.Организация);
		Если ЭтоЮрЛицо Тогда
			СписокКоманд.Добавить("Оплатить", 
				НСтр("ru = 'Оплатить'"), , 
				БиблиотекаКартинок.ЗадачаУплатаНалога);
		Иначе
			Если Справочники.БанковскиеСчета.ПолучитьКоличествоПодчиненныхЭлементовПоВладельцу(ПараметрыКоманд.Организация) > 0 Тогда
				СписокКоманд.Добавить("Оплатить", 
					НСтр("ru = 'Оплатить с банковского счета'"), , 
					БиблиотекаКартинок.ЗадачаУплатаНалога);
			КонецЕсли;
			СписокКоманд.Добавить("ОплатитьНаличными", 
				НСтр("ru = 'Оплатить наличными по квитанции'"), , 
				БиблиотекаКартинок.ЗадачаУплатаНалога);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ПараметрыКоманд.Правило) = Тип("СправочникСсылка.ПравилаРегулярныхПлатежей") Тогда
		
		Если ЕстьПравоВыполненияЗадачи Тогда
		
			СписокКоманд.Добавить("Оплатить", 
				НСтр("ru = 'Оплатить'"), , 
				БиблиотекаКартинок.ЗадачаУплатаНалога);
		
		КонецЕсли;
		
	Иначе
		
		СписокКоманд.Добавить("Выполнить", 
			Перечисления.ЗадачиНачалаРаботы.ПредставлениеКомандыВыполнить(ПараметрыКоманд.Правило), ,
			БиблиотекаКартинок.ЗадачаНачалаРаботы);
		
	КонецЕсли;
	
	Возврат СписокКоманд;
	
КонецФункции

&НаКлиенте
Процедура СписокЗадачВыполнитьКоманду(Команда, ПараметрыКоманды) Экспорт
	
	Если Команда = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Команда.Значение = "Оплатить" Тогда
		ПараметрыКоманды.СпособОплаты = ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.БанковскийПеревод");
	ИначеЕсли Команда.Значение = "ОплатитьНаличными" Тогда
		ПараметрыКоманды.СпособОплаты = ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.НаличнымиПоКвитанции");
	КонецЕсли;
	
	ВыполнитьДействие(ПараметрыКоманды);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействие(ПараметрыКоманды)
	
	ОписаниеДействия = ЗадачиБухгалтераКлиентСервер.ОписаниеДействия(ПараметрыКоманды);
	
	ВыполнениеЗадачБухгалтераКлиент.ВыполнитьДействие(ОписаниеДействия);
	
КонецПроцедуры
