#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ ДЕРЕВА РЕГЛАМЕНТНЫХ ОПЕРАЦИЙ

Функция ЗаполнитьЗначенияДереваОпераций() Экспорт
	
	ДеревоОпераций    = Новый ТаблицаЗначений;
	ДеревоОпераций.Колонки.Добавить("Узел");
	ДеревоОпераций.Колонки.Добавить("Связи");
	ДеревоОпераций.Колонки.Добавить("Ответственный");
	
	ЗаполнитьЗначенияДереваОперацийНДС(ДеревоОпераций);
	
	Возврат ДеревоОпераций;
	
КонецФункции

Процедура ОпределитьНеобходимостьКонтроляОпераций(Организация, ПериодРегистрации, ДеревоОпераций) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Установка флагов по умолчанию
	ОрганизацияПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Организация, ПериодРегистрации);
	РаздельныйУчетНДС = УчетнаяПолитика.РаздельныйУчетНДС(Организация, ПериодРегистрации);
	УпрощенныйУчетНДС = УчетнаяПолитика.УпрощенныйУчетНДС(Организация, ПериодРегистрации);
	
	Если УпрощенныйУчетНДС Тогда
		Для каждого ТекущаяОперация Из ДеревоОпераций Цикл
			ТекущаяОперация.Контроль = Ложь;
		КонецЦикла;
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("НачалоПериода", Новый Граница(ПериодРегистрации, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КонецПериода",  Новый Граница(КонецКвартала(ПериодРегистрации),  ВидГраницы.Включая));
	Запрос.УстановитьПараметр("НачалоПериодаДата", ПериодРегистрации);
	Запрос.УстановитьПараметр("КонецПериодаДата",  КонецКвартала(ПериодРегистрации));
	Запрос.УстановитьПараметр("Организация", Организация);
	
	МассивСчетовАвансовВыданных = Новый Массив();
	МассивСчетовАвансовВыданных.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным); // 62.02
	МассивСчетовАвансовВыданных.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымВал); // 62.22
	МассивСчетовАвансовВыданных.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымУЕ); // 62.32
	
	Запрос.УстановитьПараметр("МассивСчетовАвансовВыданных", МассивСчетовАвансовВыданных);
	
	МассивСчетовАвансовПолученных = Новый Массив();
	МассивСчетовАвансовПолученных.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным); // 60.02
	МассивСчетовАвансовПолученных.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымВал); // 60.22
	МассивСчетовАвансовПолученных.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымУЕ); // 60.32
	
	Запрос.УстановитьПараметр("МассивСчетовАвансовПолученных", МассивСчетовАвансовПолученных);

	МассивОбъектыНедвижимости = Новый Массив();
	МассивОбъектыНедвижимости.Добавить(Перечисления.ГруппыОС.Здания);
	МассивОбъектыНедвижимости.Добавить(Перечисления.ГруппыОС.Сооружения);
	МассивОбъектыНедвижимости.Добавить(Перечисления.ГруппыОС.МноголетниеНасаждения);
	МассивОбъектыНедвижимости.Добавить(Перечисления.ГруппыОС.ЗемельныеУчастки);
	МассивОбъектыНедвижимости.Добавить(Перечисления.ГруппыОС.ОбъектыПриродопользования);
	МассивОбъектыНедвижимости.Добавить(Перечисления.ГруппыОС.ПрочееИмуществоТребующееГосударственнойРегистрации);
	
	Запрос.УстановитьПараметр("ОбъектыНедвижимости", МассивОбъектыНедвижимости);
	
	ВидыСубконтоРасчеты = Новый Массив;
	ВидыСубконтоРасчеты.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконтоРасчеты.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	ВидыСубконтоРасчеты.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	
	Запрос.УстановитьПараметр("ВидыСубконтоРасчеты", ВидыСубконтоРасчеты);
	
	СчетаУчетаДенежныхСредствОрганизации = Новый Массив;
	СчетаУчетаДенежныхСредствОрганизации.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);
	СчетаУчетаДенежныхСредствОрганизации.Добавить(ПланыСчетов.Хозрасчетный.ВалютныеСчета);
	СчетаУчетаДенежныхСредствОрганизации.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизации);
	СчетаУчетаДенежныхСредствОрганизации.Добавить(ПланыСчетов.Хозрасчетный.ОперационнаяКасса);
	СчетаУчетаДенежныхСредствОрганизации.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизацииВал);

	Запрос.УстановитьПараметр("СчетаУчетаДенежныхСредств",		СчетаУчетаДенежныхСредствОрганизации);
	
	СубконтоЗаявленияОВвозе = Новый Массив;
	СубконтоЗаявленияОВвозе.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	СубконтоЗаявленияОВвозе.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	СубконтоЗаявленияОВвозе.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СФПолученные);
	
	Запрос.УстановитьПараметр("СубконтоЗаявлениеОВвозе",		СубконтоЗаявленияОВвозе);
	
	СчетаИсключения = Новый Массив;
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента);
	
	ВидыЦенностейНалоговыйАгент = Новый Массив;
	ВидыЦенностейНалоговыйАгент.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидыЦенностейНалоговыйАгент.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	ВидыЦенностейНалоговыйАгент.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	ВидыЦенностейНалоговыйАгент.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентКомитент);
	
	Запрос.УстановитьПараметр("СчетаИсключения", 			СчетаИсключения);
	Запрос.УстановитьПараметр("ВидыЦенностейНА", 			ВидыЦенностейНалоговыйАгент);
	Запрос.УстановитьПараметр("ВидыЦенностейСМР", 			Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	Запрос.УстановитьПараметр("СчетаСтроительство", 		
		БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств));
	Запрос.УстановитьПараметр("СчетаВекселяПолученные", 		
		БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ВекселяПолученные));
	Запрос.УстановитьПараметр("СубконтоСтроительство", 		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СпособыСтроительства);
	Запрос.УстановитьПараметр("УчетНДС2012", 				КонецКвартала(ПериодРегистрации) >= '20120101');
	Запрос.УстановитьПараметр("РаздельныйУчетНДСНаСчете19", УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Организация, ПериодРегистрации));
	
	СчетаУчетаДенежныхСредствОрганизации = Новый Массив;
	СчетаУчетаДенежныхСредствОрганизации.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);
	СчетаУчетаДенежныхСредствОрганизации.Добавить(ПланыСчетов.Хозрасчетный.ВалютныеСчета);
	СчетаУчетаДенежныхСредствОрганизации.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизации);
	СчетаУчетаДенежныхСредствОрганизации.Добавить(ПланыСчетов.Хозрасчетный.ОперационнаяКасса);
	СчетаУчетаДенежныхСредствОрганизации.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизацииВал);

	СубконтоЗаявленияОВвозе = Новый Массив;
	СубконтоЗаявленияОВвозе.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	СубконтоЗаявленияОВвозе.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	СубконтоЗаявленияОВвозе.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СФПолученные);
	
	Запрос.УстановитьПараметр("СчетУчетаКосвенногоНалога",	ПланыСчетов.Хозрасчетный.НДСТаможенныйСоюзКУплате);
	Запрос.УстановитьПараметр("СубконтоЗаявлениеОВвозе",	СубконтоЗаявленияОВвозе);
	Запрос.УстановитьПараметр("СчетаУчетаДенежныхСредств",	СчетаУчетаДенежныхСредствОрганизации);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет,
	|	ХозрасчетныйВидыСубконто.ВидСубконто КАК ВидСубконто
	|ПОМЕСТИТЬ ВТ_МассивСчетовАвансовВыданных
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|		ПО Хозрасчетный.Ссылка = ХозрасчетныйВидыСубконто.Ссылка
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&МассивСчетовАвансовВыданных)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет,
	|	ХозрасчетныйВидыСубконто.ВидСубконто КАК ВидСубконто
	|ПОМЕСТИТЬ ВТ_МассивСчетовАвансовПолученных
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|		ПО Хозрасчетный.Ссылка = ХозрасчетныйВидыСубконто.Ссылка
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&МассивСчетовАвансовПолученных)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НДСПредъявленныйОбороты.СчетФактура КАК ЗаявлениеОВвозе
	|ПОМЕСТИТЬ ВсеЗаявленияОВвозе
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный.Обороты(
	|			,
	|			&КонецПериода,
	|			Регистратор,
	|			Организация = &Организация
	|				И ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТаможенныйСоюз)) КАК НДСПредъявленныйОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НДСПредъявленныйОбороты.СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КнигаПокупок.СчетФактура КАК ЗаявлениеОВвозе
	|ПОМЕСТИТЬ КнигаПокупокВЧастиЗаявленийОВвозе
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок КАК КнигаПокупок
	|ГДЕ
	|	КнигаПокупок.Организация = &Организация
	|	И КнигаПокупок.Период <= &КонецПериодаДата
	|	И КнигаПокупок.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТаможенныйСоюз)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КнигаПокупок.СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВсеЗаявленияОВвозе.ЗаявлениеОВвозе КАК ЗаявлениеОВвозе
	|ПОМЕСТИТЬ НеподтвержденныеЗаявленияОВвозе
	|ИЗ
	|	ВсеЗаявленияОВвозе КАК ВсеЗаявленияОВвозе
	|		ЛЕВОЕ СОЕДИНЕНИЕ КнигаПокупокВЧастиЗаявленийОВвозе КАК КнигаПокупокВЧастиЗаявленийОВвозе
	|		ПО (КнигаПокупокВЧастиЗаявленийОВвозе.ЗаявлениеОВвозе = ВсеЗаявленияОВвозе.ЗаявлениеОВвозе)
	|ГДЕ
	|	КнигаПокупокВЧастиЗаявленийОВвозе.ЗаявлениеОВвозе ЕСТЬ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВсеЗаявленияОВвозе.ЗаявлениеОВвозе
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Субконто3 КАК ЗаявлениеОВвозе,
	|	ХозрасчетныйОбороты.Регистратор КАК ДокументОплаты
	|ПОМЕСТИТЬ ВТ_ДатыОплат
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(, &КонецПериода, Регистратор, Счет = &СчетУчетаКосвенногоНалога, &СубконтоЗаявлениеОВвозе, Организация = &Организация, КорСчет В (&СчетаУчетаДенежныхСредств), ) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	ХозрасчетныйОбороты.СуммаОборотДт > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Субконто3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаявленияОВвозе.ЗаявлениеОВвозе КАК ЗаявлениеОВвозе
	|ПОМЕСТИТЬ ЗаявлениеОВвозеТребующиеПодтверждения
	|ИЗ
	|	НеподтвержденныеЗаявленияОВвозе КАК ЗаявленияОВвозе
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДатыОплат КАК ДатыОплат
	|		ПО ЗаявленияОВвозе.ЗаявлениеОВвозе = ДатыОплат.ЗаявлениеОВвозе
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбъединенныеДанныеПоАвансам.РегламентнаяОперация
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Перечисление.РегламентныеОперации.РегистрацияСчетовФактурНаАванс) КАК РегламентнаяОперация
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				Регистратор,
	|				Счет В
	|					(ВЫБРАТЬ
	|						ВТ_МассивСчетовАвансовВыданных.Счет
	|					ИЗ
	|						ВТ_МассивСчетовАвансовВыданных
	|					ГДЕ
	|						ВТ_МассивСчетовАвансовВыданных.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСконтрагентами)),
	|				,
	|				Организация = &Организация,
	|				НЕ КорСчет В (&СчетаВекселяПолученные)
	|					И НЕ КорСчет В
	|							(ВЫБРАТЬ
	|								ВТ_МассивСчетовАвансовВыданных.Счет
	|							ИЗ
	|								ВТ_МассивСчетовАвансовВыданных),
	|				) КАК УсловиеПоОборотам
	|	ГДЕ
	|		ВЫБОР
	|				КОГДА УсловиеПоОборотам.Счет.Валютный
	|						И НЕ УсловиеПоОборотам.ВалютнаяСуммаОборотКт ЕСТЬ NULL 
	|					ТОГДА УсловиеПоОборотам.ВалютнаяСуммаОборотКт
	|				ИНАЧЕ УсловиеПоОборотам.СуммаОборотКт
	|			КОНЕЦ > 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Перечисление.РегламентныеОперации.РегистрацияСчетовФактурНаАванс)
	|	ИЗ
	|		Документ.ОтчетКомиссионераОПродажах КАК ОтчетКомиссионераОПродажах
	|	ГДЕ
	|		ОтчетКомиссионераОПродажах.ДенежныеСредства.ВидОтчетаПоПлатежам = ЗНАЧЕНИЕ(Перечисление.ВидыОтчетовПоПлатежамКомиссия.Аванс)
	|		И ОтчетКомиссионераОПродажах.Дата МЕЖДУ &НачалоПериодаДата И &КонецПериодаДата
	|		И ОтчетКомиссионераОПродажах.Организация = &Организация
	|		И ОтчетКомиссионераОПродажах.Проведен) КАК ОбъединенныеДанныеПоАвансам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗНАЧЕНИЕ(Перечисление.РегламентныеОперации.РегистрацияСчетовФактурНалоговогоАгента)
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Период,
	|			НЕ СчетДт В (&СчетаИсключения),
	|			&ВидыСубконтоРасчеты,
	|			,
	|			,
	|			Организация = &Организация
	|				И ВЫРАЗИТЬ(СубконтоДт2 КАК Справочник.ДоговорыКонтрагентов).УчетАгентскогоНДС) КАК УсловиеПоОборотам
	|ГДЕ
	|	УсловиеПоОборотам.СуммаОборот > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.РегламентныеОперации.НачислениеНДСпоСМРхозспособом)
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Период,
	|			счет В (&СчетаСтроительство),
	|			&СубконтоСтроительство,
	|			Организация = &Организация
	|				И (ВЫРАЗИТЬ(Субконто1 КАК Перечисление.СпособыСтроительства)) = ЗНАЧЕНИЕ(Перечисление.СпособыСтроительства.Хозспособ),
	|			,
	|			) КАК УсловиеПоОборотам
	|ГДЕ
	|	УсловиеПоОборотам.СуммаОборотДт > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.РегламентныеОперации.РегистрацияСчетовФактурНаСуммовыеРазницы)
	|ИЗ
	|	РегистрНакопления.НДСНачисленный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Период,
	|			Организация = &Организация
	|				И ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.СуммыСвязанныеСРасчетамиПоОплате)
	|				И ВидНачисления = ЗНАЧЕНИЕ(Перечисление.НДСВидНачисления.НДСНачисленКУплате)) КАК УсловиеПоОборотам
	|ГДЕ
	|	УсловиеПоОборотам.СуммаБезНДСПриход + УсловиеПоОборотам.НДСПриход > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УсловиеОперации.РегламентнаяОперация
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА УсловиеПоОборотам.Состояние = ЗНАЧЕНИЕ(Перечисление.НДССостоянияРеализация0.ОжидаетсяПодтверждение)
	|					ИЛИ &УчетНДС2012
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.РегламентныеОперации.ПодтверждениеНулевойСтавкиНДС)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж0)
	|		КОНЕЦ КАК РегламентнаяОперация
	|	ИЗ
	|		РегистрНакопления.НДСРеализация0.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				Период,
	|				НЕ &УчетНДС2012
	|					И Организация = &Организация) КАК УсловиеПоОборотам
	|	ГДЕ
	|		УсловиеПоОборотам.СуммаБезНДСПриход + УсловиеПоОборотам.НДСПриход > 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА УсловиеПоОстаткам.Состояние = ЗНАЧЕНИЕ(Перечисление.НДССостоянияРеализация0.ОжидаетсяПодтверждение)
	|					ИЛИ &УчетНДС2012
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.РегламентныеОперации.ПодтверждениеНулевойСтавкиНДС)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.НДСРеализация0.Остатки(&НачалоПериода, Организация = &Организация) КАК УсловиеПоОстаткам
	|	ГДЕ
	|		УсловиеПоОстаткам.СуммаБезНДСОстаток + УсловиеПоОстаткам.НДСОстаток > 0) КАК УсловиеОперации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УсловиеОперации.РегламентнаяОперация
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Перечисление.РегламентныеОперации.ПодтверждениеОплатыНДСВБюджет) КАК РегламентнаяОперация
	|	ИЗ
	|		ЗаявлениеОВвозеТребующиеПодтверждения КАК ЗаявлениеОВвозеТребующиеПодтверждения) КАК УсловиеОперации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УсловиеОперации.РегламентнаяОперация
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Перечисление.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок0) КАК РегламентнаяОперация
	|	ИЗ
	|		РегистрНакопления.НДСПредъявленныйРеализация0.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				Период,
	|				Организация = &Организация
	|					И НЕ Состояние = ЗНАЧЕНИЕ(Перечисление.НДССостоянияРеализация0.ОжидаетсяПодтверждение)) КАК УсловиеПоОборотам
	|	ГДЕ
	|		УсловиеПоОборотам.СуммаБезНДСПриход + УсловиеПоОборотам.НДСПриход > 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Перечисление.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок0)
	|	ИЗ
	|		РегистрНакопления.НДСПредъявленныйРеализация0.Остатки(
	|				&НачалоПериода,
	|				Организация = &Организация
	|					И НЕ Состояние = ЗНАЧЕНИЕ(Перечисление.НДССостоянияРеализация0.ОжидаетсяПодтверждение)) КАК УсловиеПоОстаткам
	|	ГДЕ
	|		УсловиеПоОстаткам.СуммаБезНДСОстаток + УсловиеПоОстаткам.НДСОстаток > 0) КАК УсловиеОперации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.РегламентныеОперации.РаспределениеНДС)
	|ИЗ
	|	РегистрНакопления.НДСКосвенныеРасходы.Обороты(&НачалоПериода, &КонецПериода, Период, Организация = &Организация) КАК УсловиеПоОборотам
	|ГДЕ
	|	УсловиеПоОборотам.СуммаБезНДСПриход + УсловиеПоОборотам.НДСПриход > 0
	|	И &РаздельныйУчетНДСНаСчете19 = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.РегламентныеОперации.РаспределениеНДС)
	|ИЗ
	|	РегистрНакопления.НДСРаздельныйУчет.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Период,
	|			Организация = &Организация
	|				И СпособУчетаНДС = ЗНАЧЕНИЕ(Перечисление.СпособыУчетаНДС.Распределяется)) КАК НДСРаздельныйУчетОбороты
	|ГДЕ
	|	НДСРаздельныйУчетОбороты.СуммаБезНДСПриход + НДСРаздельныйУчетОбороты.НДСПриход > 0
	|	И &РаздельныйУчетНДСНаСчете19
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.РегламентныеОперации.РаспределениеНДС)
	|ИЗ
	|	РегистрНакопления.НДСПредъявленныйРеализация0.Остатки(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И ДокументОтгрузки = НЕОПРЕДЕЛЕНО) КАК ЭкспортныйНДСПодлежащийРаспределению
	|ГДЕ
	|	&РаздельныйУчетНДСНаСчете19
	|	И ЭкспортныйНДСПодлежащийРаспределению.СуммаБезНДСОстаток + ЭкспортныйНДСПодлежащийРаспределению.НДСОстаток > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УсловиеОперации.РегламентнаяОперация
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА УсловиеПоОборотам.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.НДСВидНачисления.Реализация0)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.РегламентныеОперации.ВосстановлениеНДС)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж)
	|		КОНЕЦ КАК РегламентнаяОперация
	|	ИЗ
	|		РегистрНакопления.НДСНачисленный.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				Период,
	|				НЕ &УчетНДС2012
	|					И Организация = &Организация) КАК УсловиеПоОборотам
	|	ГДЕ
	|		УсловиеПоОборотам.СуммаБезНДСПриход + УсловиеПоОборотам.НДСПриход > 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА УсловиеПоОстаткам.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.НДСВидНачисления.Реализация0)
	|				ТОГДА НЕОПРЕДЕЛЕНО
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.НДСНачисленный.Остатки(
	|				&НачалоПериода,
	|				НЕ &УчетНДС2012
	|					И Организация = &Организация) КАК УсловиеПоОстаткам
	|	ГДЕ
	|		УсловиеПоОстаткам.СуммаБезНДСОстаток + УсловиеПоОстаткам.НДСОстаток > 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Перечисление.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж)
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				Регистратор,
	|				Счет В
	|					(ВЫБРАТЬ
	|						ВТ_МассивСчетовАвансовПолученных.Счет
	|					ИЗ
	|						ВТ_МассивСчетовАвансовПолученных
	|					ГДЕ
	|						ВТ_МассивСчетовАвансовПолученных.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСконтрагентами)),
	|				,
	|				Организация = &Организация,
	|				,
	|				) КАК УсловиеПоОборотам
	|	ГДЕ
	|		ВЫБОР
	|				КОГДА УсловиеПоОборотам.Счет.Валютный
	|						И НЕ УсловиеПоОборотам.ВалютнаяСуммаОборотКт ЕСТЬ NULL 
	|					ТОГДА УсловиеПоОборотам.ВалютнаяСуммаОборотКт
	|				ИНАЧЕ УсловиеПоОборотам.СуммаОборотКт
	|			КОНЕЦ > 0) КАК УсловиеОперации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УсловиеОперации.РегламентнаяОперация
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Перечисление.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок) КАК РегламентнаяОперация
	|	ИЗ
	|		РегистрНакопления.НДСПредъявленный.Обороты(&НачалоПериода, &КонецПериода, Период, Организация = &Организация) КАК УсловиеПоОборотам
	|	ГДЕ
	|		УсловиеПоОборотам.СуммаБезНДСПриход + УсловиеПоОборотам.НДСПриход > 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Перечисление.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок)
	|	ИЗ
	|		РегистрНакопления.НДСПредъявленный.Остатки(&НачалоПериода, Организация = &Организация) КАК УсловиеПоОстаткам
	|	ГДЕ
	|		УсловиеПоОстаткам.СуммаБезНДСОстаток + УсловиеПоОстаткам.НДСОстаток > 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Перечисление.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок)
	|	ИЗ
	|		РегистрНакопления.НДСсАвансов.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				Период,
	|				НЕ &УчетНДС2012
	|					И Организация = &Организация
	|					И (ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыПолученные)
	|						ИЛИ ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыПолученные0))) КАК УсловиеПоОборотам
	|	ГДЕ
	|		УсловиеПоОборотам.СуммаБезНДСПриход + УсловиеПоОборотам.НДСПриход > 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Перечисление.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок)
	|	ИЗ
	|		РегистрНакопления.НДСсАвансов.Остатки(
	|				&НачалоПериода,
	|				НЕ &УчетНДС2012
	|					И Организация = &Организация
	|					И (ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыПолученные)
	|						ИЛИ ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыПолученные0))) КАК УсловиеПоОстаткам
	|	ГДЕ
	|		УсловиеПоОстаткам.СуммаБезНДСОстаток + УсловиеПоОстаткам.НДСОстаток > 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Перечисление.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок)
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				Регистратор,
	|				Счет В
	|					(ВЫБРАТЬ
	|						ВТ_МассивСчетовАвансовВыданных.Счет
	|					ИЗ
	|						ВТ_МассивСчетовАвансовВыданных
	|					ГДЕ
	|						ВТ_МассивСчетовАвансовВыданных.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСконтрагентами)),
	|				,
	|				Организация = &Организация,
	|				,
	|				) КАК УсловиеПоОборотам
	|	ГДЕ
	|		ВЫБОР
	|				КОГДА УсловиеПоОборотам.Счет.Валютный
	|						И НЕ УсловиеПоОборотам.ВалютнаяСуммаОборотДт ЕСТЬ NULL 
	|					ТОГДА УсловиеПоОборотам.ВалютнаяСуммаОборотДт
	|				ИНАЧЕ УсловиеПоОборотам.СуммаОборотДт
	|			КОНЕЦ > 0) КАК УсловиеОперации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗНАЧЕНИЕ(Перечисление.РегламентныеОперации.ВосстановлениеНДСПоОбъектамНедвижимости)
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций.СрезПоследних(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И ОсновноеСредство.ГруппаОС В (&ОбъектыНедвижимости)
	|				И Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)) КАК СостоянияОСОрганизацийСрезПоследних";
	
	ОперацииТребующиеКонтроля = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("РегламентнаяОперация");
	
	КонтролируемыеОперации = Новый Соответствие();
	
	// Обороты по СМР хозспособом
	ЕстьСтроительствоХозспособом = (НЕ ОперацииТребующиеКонтроля.Найти(Перечисления.РегламентныеОперации.НачислениеНДСпоСМРхозспособом) = Неопределено);
	КонтролируемыеОперации.Вставить(Перечисления.РегламентныеОперации.НачислениеНДСпоСМРхозспособом, ОрганизацияПлательщикНДС и ЕстьСтроительствоХозспособом);
	
	// Проверка наличия авансов
	НаличиеАвансов = (НЕ ОперацииТребующиеКонтроля.Найти(Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНаАванс) = Неопределено);
	КонтролируемыеОперации.Вставить(Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНаАванс, ОрганизацияПлательщикНДС и НаличиеАвансов);
	
	// Проверка наличия оплат при исполнении обязанностей налогового агента
	НаличиеНА = (НЕ ОперацииТребующиеКонтроля.Найти(Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНалоговогоАгента) = Неопределено);
	КонтролируемыеОперации.Вставить(Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНалоговогоАгента, ОрганизацияПлательщикНДС и НаличиеНА);
	
	// Проверка выписки отдельных СФ на суммовую разницу (по УП НУ)
	НаличиеВыделенныхСуммовых = (НЕ ОперацииТребующиеКонтроля.Найти(Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНаСуммовыеРазницы) = Неопределено);
	КонтролируемыеОперации.Вставить(Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНаСуммовыеРазницы, ОрганизацияПлательщикНДС и НаличиеВыделенныхСуммовых);
	
	// Распределения НДС (по УП НУ)
	НаличиеНДСКРаспределению = (НЕ ОперацииТребующиеКонтроля.Найти(Перечисления.РегламентныеОперации.РаспределениеНДС) = Неопределено);
	КонтролируемыеОперации.Вставить(Перечисления.РегламентныеОперации.РаспределениеНДС, ОрганизацияПлательщикНДС И НаличиеНДСКРаспределению);
	
	// Наличие реализации по 0%
	ЕстьРеализация0КПодтверждению = (НЕ ОперацииТребующиеКонтроля.Найти(Перечисления.РегламентныеОперации.ПодтверждениеНулевойСтавкиНДС) = Неопределено);
	КонтролируемыеОперации.Вставить(Перечисления.РегламентныеОперации.ПодтверждениеНулевойСтавкиНДС, ЕстьРеализация0КПодтверждению);
	
	ЕстьРеализация0КОтражениюВКнигеПродаж = (НЕ ОперацииТребующиеКонтроля.Найти(Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж0) = Неопределено);
	КонтролируемыеОперации.Вставить(Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж0, ЕстьРеализация0КОтражениюВКнигеПродаж);
	
	ЕстьРеализация0КОтражениюВКнигеПокупок = (НЕ ОперацииТребующиеКонтроля.Найти(Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок0) = Неопределено);
	КонтролируемыеОперации.Вставить(Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок0, ЕстьРеализация0КОтражениюВКнигеПокупок);
	
	// Наличие неподтвержденных оплат заявлений о ввозе товаров
	ЕстьЗаявленияКПодтверждению = (НЕ ОперацииТребующиеКонтроля.Найти(Перечисления.РегламентныеОперации.ПодтверждениеОплатыНДСВБюджет) = Неопределено);
	КонтролируемыеОперации.Вставить(Перечисления.РегламентныеОперации.ПодтверждениеОплатыНДСВБюджет, ЕстьЗаявленияКПодтверждению);
	
	// Необходимость восстановления НДС
	РеализацияПод0_ТребуетсяВосстановление = (НЕ ОперацииТребующиеКонтроля.Найти(Перечисления.РегламентныеОперации.ВосстановлениеНДС) = Неопределено);
	КонтролируемыеОперации.Вставить(Перечисления.РегламентныеОперации.ВосстановлениеНДС, РеализацияПод0_ТребуетсяВосстановление);
	
	ЕстьПоступленияКОтражениюВКнигеПокупок = (НЕ ОперацииТребующиеКонтроля.Найти(Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок) = Неопределено);
	КонтролируемыеОперации.Вставить(Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок, ОрганизацияПлательщикНДС И ЕстьПоступленияКОтражениюВКнигеПокупок);
	
	ЕстьРеализацияКОтражениюВКнигеПродаж = (НЕ ОперацииТребующиеКонтроля.Найти(Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж) = Неопределено);
	КонтролируемыеОперации.Вставить(Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж, ЕстьРеализацияКОтражениюВКнигеПродаж);
	
	// Конец года
	ЕстьОбъектыНедвижимости = (НЕ ОперацииТребующиеКонтроля.Найти(Перечисления.РегламентныеОперации.ВосстановлениеНДСПоОбъектамНедвижимости) = Неопределено);
	ПоследнийМесяцГода = (Месяц(КонецКвартала(ПериодРегистрации)) = 12);
	КонтролируемыеОперации.Вставить(Перечисления.РегламентныеОперации.ВосстановлениеНДСПоОбъектамНедвижимости, ЕстьОбъектыНедвижимости 
		И ОрганизацияПлательщикНДС И ПоследнийМесяцГода И РаздельныйУчетНДС);
		
	Для каждого ТекущаяОперация Из ДеревоОпераций Цикл
		ТекущаяОперация.Контроль = КонтролируемыеОперации[ТекущаяОперация.Узел];
	КонецЦикла; 
	
	ОпределитьСостояниеОпераций(Организация, ПериодРегистрации, ДеревоОпераций);
	
КонецПроцедуры

Функция НеобходимостьДействийПоПереходуНаРаздельныйУчетНДСНаСчете19(Организация, Период)

	УстановитьПривилегированныйРежим(Истина);
	
	РаздельныйУчетНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Организация, Период);
	
	ТребуетсяКонтрольПереходаНаРаздельныйУчетНДСНаСчете19 = Ложь; // При переходе и (наличии остатков или наличии сформированных документов)
	ТребуетсяВыполнитьПереходНаРаздельныйУчетНДСНаСчете19 = Ложь; // При наличии остатков
	
	Если РаздельныйУчетНаСчете19 Тогда
		
		// Проверим, в каком квартале осуществлен переход на раздельный учет НДС на счете 19
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("Период", Период);
		Запрос.УстановитьПараметр("Организация", Организация);

		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	УчетнаяПолитикаОрганизаций.Период КАК Период
		|ИЗ
		|	РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
		|ГДЕ
		|	УчетнаяПолитикаОрганизаций.РаздельныйУчетНДСНаСчете19
		|	И УчетнаяПолитикаОрганизаций.Организация = &Организация
		|;
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	УчетнаяПолитикаОрганизаций.Период КАК Период
		|ИЗ
		|	РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
		|ГДЕ
		|	УчетнаяПолитикаОрганизаций.РаздельныйУчетНДСНаСчете19
		|	И УчетнаяПолитикаОрганизаций.Организация = &Организация
		|	И УчетнаяПолитикаОрганизаций.Период < &Период
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период";
		
		Результат = Запрос.ВыполнитьПакет();
		
		ПереходНаНовуюМетодикуВТекущемКвартале = НЕ Результат[0].Пустой() И Результат[1].Пустой(); // Учетная политика есть и переход производится в текущем квартале
		
		Если ПереходНаНовуюМетодикуВТекущемКвартале Тогда
			
			Счета19КВычету = Новый Массив;
			Счета19КВычету.Добавить(ПланыСчетов.Хозрасчетный.НДСприПриобретенииОсновныхСредств);
			Счета19КВычету.Добавить(ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымНематериальнымАктивам);
			Счета19КВычету.Добавить(ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ);
			Счета19КВычету.Добавить(ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымУслугам);
			Счета19КВычету.Добавить(ПланыСчетов.Хозрасчетный.НДСуплачиваемыйТаможеннымОрганам);
			Счета19КВычету.Добавить(ПланыСчетов.Хозрасчетный.НДСприСтроительствеОсновныхСредств);
			Счета19КВычету.Добавить(ПланыСчетов.Хозрасчетный.НДСПоУменьшениюСтоимостиРеализации);
			
			СубконтоСчета19 = Новый Массив;
			СубконтоСчета19.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
			СубконтоСчета19.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СФПолученные);
			СубконтоСчета19.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СпособыУчетаНДС);
			
			СубконтоСчета1907 = Новый Массив;
			
			СубконтоСчета1907.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
			СубконтоСчета1907.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СФПолученные);
			СубконтоСчета1907.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРеализации);
			
			СтруктураПараметров = Новый Структура();
			
			БУ = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымЦенностям.ПолучитьОбъект();
			СуществуетСубконтоНаСчете19 = БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СпособыУчетаНДС, "ВидСубконто") <> Неопределено;
			
			Запрос.УстановитьПараметр("Граница",		   			 Новый Граница(Период - 1, ВидГраницы.Включая));
			Запрос.УстановитьПараметр("Счета19КВычету",	   			 Счета19КВычету);
			Запрос.УстановитьПараметр("СубконтоСчета19",   			 СубконтоСчета19);
			Запрос.УстановитьПараметр("СубконтоСчета1907", 			 СубконтоСчета1907);
			Запрос.УстановитьПараметр("Счет1907",          			 ПланыСчетов.Хозрасчетный.НДСПоТоварамРеализованнымПоСтавке0);
			Запрос.УстановитьПараметр("СуществуетСубконтоНаСчете19", СуществуетСубконтоНаСчете19);
						
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	НДСПоПриобретеннымЦенностямОстатки.НДСОстаток
			|ИЗ
			|	РегистрНакопления.НДСПоПриобретеннымЦенностям.Остатки(&Граница, Организация = &Организация) КАК НДСПоПриобретеннымЦенностямОстатки
			|ГДЕ
			|	(НДСПоПриобретеннымЦенностямОстатки.КоличествоОстаток <> 0
			|			ИЛИ НДСПоПриобретеннымЦенностямОстатки.СтоимостьОстаток <> 0
			|			ИЛИ НДСПоПриобретеннымЦенностямОстатки.НДСОстаток <> 0)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ХозрасчетныйОстатки.СуммаОстатокДт
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки(
			|			&Граница,
			|			Счет В (&Счета19КВычету),
			|			&СубконтоСчета19,
			|			Организация = &Организация
			|				И Субконто3 = ЗНАЧЕНИЕ(Перечисление.СпособыУчетаНДС.ПустаяСсылка)) КАК ХозрасчетныйОстатки
			|ГДЕ
			|	ХозрасчетныйОстатки.СуммаОстатокДт <> 0
			|	И &СуществуетСубконтоНаСчете19
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ХозрасчетныйОстатки.СуммаОстатокДт
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Граница, Счет = &Счет1907, &СубконтоСчета1907, Организация = &Организация) КАК ХозрасчетныйОстатки
			|ГДЕ
			|	ХозрасчетныйОстатки.СуммаОстатокДт <> 0
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ВыполнениеРегламентныхОперацийНДС.РегламентныйДокумент
			|ИЗ
			|	РегистрСведений.ВыполнениеРегламентныхОперацийНДС КАК ВыполнениеРегламентныхОперацийНДС
			|ГДЕ
			|	ВыполнениеРегламентныхОперацийНДС.РегламентнаяОперация = ЗНАЧЕНИЕ(Перечисление.РегламентныеОперации.ПереходНаРаздельныйУчетНДСНаСчете19)
			|	И ВыполнениеРегламентныхОперацийНДС.Организация = &Организация
			|	И ВыполнениеРегламентныхОперацийНДС.ПериодРегистрации = &Период";
			
			Результат = Запрос.ВыполнитьПакет();
			
			ТребуетсяВыполнитьПереходНаРаздельныйУчетНДСНаСчете19 = НЕ Результат[0].Пустой();
			ТребуетсяКонтрольПереходаНаРаздельныйУчетНДСНаСчете19 = ТребуетсяВыполнитьПереходНаРаздельныйУчетНДСНаСчете19 ИЛИ НЕ Результат[1].Пустой();
		
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат Новый Структура("ТребуетсяКонтрольПереходаНаРаздельныйУчетНДСНаСчете19,ТребуетсяВыполнитьПереходНаРаздельныйУчетНДСНаСчете19",
		ТребуетсяКонтрольПереходаНаРаздельныйУчетНДСНаСчете19, ТребуетсяВыполнитьПереходНаРаздельныйУчетНДСНаСчете19); 

КонецФункции // ОпределитьНеобходимостьВыполненияПереходаНаРаздельныйУчетНДСНаСчете19()

Процедура ОпределитьСостояниеОпераций(Организация, ПериодРегистрации, ДеревоОпераций) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Факт.РегламентнаяОперация КАК РегламентнаяОперация,
	|	МАКСИМУМ(Факт.Актуальность) КАК Актуальна,
	|	МИНИМУМ(Факт.РегламентныйДокумент) КАК Регистратор
	|ИЗ
	|	РегистрСведений.ВыполнениеРегламентныхОперацийНДС КАК Факт
	|ГДЕ
	|	Факт.Организация = &Организация
	|	И НАЧАЛОПЕРИОДА(Факт.ПериодРегистрации, КВАРТАЛ) = НАЧАЛОПЕРИОДА(&ПериодРегистрации, КВАРТАЛ)
	|
	|СГРУППИРОВАТЬ ПО
	|	Факт.РегламентнаяОперация";
	
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	СостояниеОпераций = Запрос.Выполнить().Выгрузить();
	
	// Переход на раздельный учет НДС на счете 19
	СтруктураКонтроля = НеобходимостьДействийПоПереходуНаРаздельныйУчетНДСНаСчете19(Организация, ПериодРегистрации);
	
	ТребуетсяКонтрольПерепроведенияСчетовФактур = 
		РегистрыСведений.ПрефиксыИнформационныхБаз.НадоПерепровестиСчетаФактуры() И ПериодРегистрации = '20150101';
	НеобходимоПерепровестиСчетаФактуры = Ложь;
	
	Если ТребуетсяКонтрольПерепроведенияСчетовФактур Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВыполнениеРегламентныхОперацийНДС.РегламентныйДокумент
		|ИЗ
		|	РегистрСведений.ВыполнениеРегламентныхОперацийНДС КАК ВыполнениеРегламентныхОперацийНДС
		|ГДЕ
		|	ВыполнениеРегламентныхОперацийНДС.РегламентнаяОперация = ЗНАЧЕНИЕ(Перечисление.РегламентныеОперации.ОбработкаНомеровСчетовФактур)
		|	И ВыполнениеРегламентныхОперацийНДС.Организация = &Организация
		|	И ВыполнениеРегламентныхОперацийНДС.ПериодРегистрации = &ПериодРегистрации";
		
		Результат = Запрос.Выполнить();
		НеобходимоПерепровестиСчетаФактуры = Результат.Пустой();
		
	КонецЕсли;
	
	Для Каждого СтрокаУзла ИЗ ДеревоОпераций Цикл
		
		РегламентнаяОперация = СтрокаУзла.Узел;
		
		Если РегламентнаяОперация = Перечисления.РегламентныеОперации.ПереходНаРаздельныйУчетНДСНаСчете19 Тогда
			
			СтрокаУзла.Контроль = СтруктураКонтроля.ТребуетсяКонтрольПереходаНаРаздельныйУчетНДСНаСчете19;
			
			Если СтруктураКонтроля.ТребуетсяКонтрольПереходаНаРаздельныйУчетНДСНаСчете19 Тогда
				
				СтрокаУзла.Выполнена = НЕ СтруктураКонтроля.ТребуетсяВыполнитьПереходНаРаздельныйУчетНДСНаСчете19;
				СтрокаУзла.Актуальна = НЕ СтруктураКонтроля.ТребуетсяВыполнитьПереходНаРаздельныйУчетНДСНаСчете19;
				
			Иначе
				
				СтрокаУзла.Выполнена = Ложь;
				СтрокаУзла.Актуальна = Ложь;
				
			КонецЕсли;
						
			Продолжить;
			
		ИначеЕсли РегламентнаяОперация = Перечисления.РегламентныеОперации.ОбработкаНомеровСчетовФактур Тогда
			
			СтрокаУзла.Контроль  = ТребуетсяКонтрольПерепроведенияСчетовФактур;
			СтрокаУзла.Выполнена = ТребуетсяКонтрольПерепроведенияСчетовФактур И НЕ НеобходимоПерепровестиСчетаФактуры;
			СтрокаУзла.Актуальна = ТребуетсяКонтрольПерепроведенияСчетовФактур И НЕ НеобходимоПерепровестиСчетаФактуры;
			
			Продолжить;
			
		КонецЕсли;
	
		НайденныеОперации = СостояниеОпераций.НайтиСтроки(Новый Структура("РегламентнаяОперация", РегламентнаяОперация));
		
		ОперацияВыполнена = (НайденныеОперации.Количество() > 0);
		ОперацияАктуальна = (ОперацияВыполнена и НайденныеОперации[0].Актуальна);
		
		СтрокаУзла.Выполнена = ОперацияВыполнена;
		СтрокаУзла.Актуальна = ОперацияАктуальна;
		
		СтрокаУзла.СостояниеОпераций.Очистить();
		Для Каждого Операция Из НайденныеОперации Цикл
			ЗаполнитьЗначенияСвойств(СтрокаУзла.СостояниеОпераций.Добавить(), Операция);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВсеРегламентныеОперацииНДСВыполнены(Организация, ПериодРегистрации) Экспорт
	
	МоментНарушения = РаботаСПоследовательностями.МоментНачалаПерепроведенияСУчетомИсключенныхМесяцев(
		Организация, КонецКвартала(ПериодРегистрации));
		
	Если МоментНарушения <> Неопределено Тогда
		Если МоментНарушения.Дата <= КонецКвартала(ПериодРегистрации) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	// Переход на раздельный учет НДС на счете 19
	СтруктураКонтроля = НеобходимостьДействийПоПереходуНаРаздельныйУчетНДСНаСчете19(Организация, ПериодРегистрации);
	
	Если СтруктураКонтроля.ТребуетсяВыполнитьПереходНаРаздельныйУчетНДСНаСчете19 Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	ПолноеДерево = РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.ЗаполнитьЗначенияДереваОпераций();
	ПолноеДерево.Колонки.Добавить("Контроль", Новый ОписаниеТипов("Булево"));
	ПолноеДерево.Колонки.Добавить("Актуальна", Новый ОписаниеТипов("Булево"));
	ПолноеДерево.Колонки.Добавить("Выполнена", Новый ОписаниеТипов("Булево"));
	ПолноеДерево.Колонки.Добавить("СостояниеОпераций", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	ОпределитьНеобходимостьКонтроляОпераций(Организация, ПериодРегистрации, ПолноеДерево);
	
	Для Каждого ОперацияНДС ИЗ ПолноеДерево Цикл
		Если ОперацияНДС.Контроль И НЕ (ОперацияНДС.Выполнена И ОперацияНДС.Актуальна) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ВЫПОЛНЕНИЕ РЕГЛАМЕНТНЫХ ОПЕРАЦИЙ

// Процедура выполняет отражения факта выполнения регламентной операции в регистре сведений,
// при этом сбрасывается факт выполнения для всех подчиненных ей операций
Процедура ЗафиксироватьФактВыполненияРегламентнойОперации(ПериодРегистрации,
														  Организация,
														  Регистратор,
														  РегламентнаяОперация,
														  Актуальность = Истина) Экспорт
														  
	Ответственный = Пользователи.ТекущийПользователь();

	Набор = РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.СоздатьНаборЗаписей();
	Набор.Отбор.ПериодРегистрации.Установить(ПериодРегистрации);
	Набор.Отбор.Организация.Установить(Организация);
	Набор.Отбор.РегламентныйДокумент.Установить(Регистратор);
	Набор.Отбор.РегламентнаяОперация.Установить(РегламентнаяОперация);
	
	Набор.Прочитать();
	
	Если Набор.Количество() = 1 Тогда
		Запись = Набор[0];
		
		Запись.Ответственный = Ответственный;
		Запись.Актуальность  = Актуальность;
	Иначе
		Если Набор.Количество() > 1 Тогда
			Набор.Очистить();
		КонецЕсли;
		Запись = Набор.Добавить();
		Запись.Организация          = Организация;
		Запись.РегламентныйДокумент = Регистратор;
		Запись.ПериодРегистрации    = ПериодРегистрации;
		Запись.РегламентнаяОперация = РегламентнаяОперация;
		Запись.Ответственный        = Ответственный;
		Запись.Актуальность         = Актуальность;
	КонецЕсли;
	
	Набор.Записать();
	
	ДеревоОпераций = ЗаполнитьЗначенияДереваОпераций();
	
	СброситьФактВыполненияПодчиненныхОпераций(Организация, ПериодРегистрации,  ДеревоОпераций, РегламентнаяОперация, Регистратор);
	
КонецПроцедуры

// Процедура удаляет запись о выполнении регламентной операции в регистре сведений,
// при этом сбрасывается факт выполнения для всех подчиненных ей операций
Процедура УдалитьФактВыполненияРегламентнойОперации(ПериодРегистрации,
														  Организация,
														  Регистратор,
														  РегламентнаяОперация) Экспорт
														  
	Набор = РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.СоздатьНаборЗаписей();
	Набор.Отбор.ПериодРегистрации.Установить(ПериодРегистрации);
	Набор.Отбор.Организация.Установить(Организация);
	Набор.Отбор.РегламентныйДокумент.Установить(Регистратор);
	Набор.Отбор.РегламентнаяОперация.Установить(РегламентнаяОперация);
	
	Набор.Прочитать();
	Набор.Очистить();
	Набор.Записать();
	
	ДеревоОпераций = ЗаполнитьЗначенияДереваОпераций();
	
	СброситьФактВыполненияПодчиненныхОпераций(Организация, ПериодРегистрации,  ДеревоОпераций, РегламентнаяОперация, Регистратор);
	
КонецПроцедуры

// Сброс факта выполнения при отмене проведения документа
Процедура СброситьФактВыполненияОперации(Регистратор) Экспорт
	
	МетаданныеРегистратора = Регистратор.Метаданные();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
 		            |	НачалоПериода(Регистратор.Дата,Месяц) КАК ПериодРегистрации,
				    |	Регистратор.Организация КАК Организация,
					|   ВыполненныеОперации.РегламентнаяОперация КАК РегламентнаяОперация
		            |ИЗ
		            |	Документ." + МетаданныеРегистратора.Имя + " КАК Регистратор
		            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВыполнениеРегламентныхОперацийНДС КАК ВыполненныеОперации
		            |		ПО ВыполненныеОперации.РегламентныйДокумент = Регистратор.Ссылка
		            |
		            |ГДЕ
		            |	Регистратор.Ссылка = &РегистраторСсылка";
	Запрос.УстановитьПараметр("РегистраторСсылка", Регистратор); 
	Выборка = Запрос.Выполнить().Выбрать();
	
	// удаление всех записей по регистратору
	НаборЗаписей = РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.РегламентныйДокумент.Установить(Регистратор);
	НаборЗаписей.Записать();
	
	ДеревоОпераций = ЗаполнитьЗначенияДереваОпераций();
	
	ПоследняяОперация = Неопределено;
	Пока Выборка.Следующий() Цикл
		СброситьФактВыполненияПодчиненныхОпераций(Выборка.Организация , Выборка.ПериодРегистрации, ДеревоОпераций, Выборка.РегламентнаяОперация, Регистратор);
		ПоследняяОперация = Выборка.РегламентнаяОперация;
	КонецЦикла;	
	
	#Если Клиент Тогда
	Если не ПоследняяОперация = Неопределено Тогда
		Оповестить("ОбновленоСостояниеРегламентнойОперации",ПоследняяОперация,Регистратор);
	КонецЕсли; 
	#КонецЕсли
	
КонецПроцедуры

// Сбрасывает в регистре признак Актуальность для всех регламеyтных операций НДС
// по переданной организации за текущий и все последующие периоды.
// 
Процедура СброситьФактВыполненияВсехРегламетныхОпераций(Организация, ПериодРегистрации) Экспорт

	ПараметрыБлокировки = Новый Структура();
	ПараметрыБлокировки.Вставить("ИмяТаблицы", "ВыполнениеРегламентныхОперацийНДС");
	ПараметрыБлокировки.Вставить("ТипТаблицы", "РегистрСведений");
	
	ЗначенияБлокировки = Новый Структура();
	ЗначенияБлокировки.Вставить("Организация", Организация);
	
	ДиапазонПериода = Новый Диапазон(НачалоКвартала(ПериодРегистрации), Неопределено);
	ЗначенияБлокировки.Вставить("ПериодРегистрации", ДиапазонПериода);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации", НачалоКвартала(ПериодРегистрации));
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВыполнениеРегламентныхОперацийНДС.ПериодРегистрации
	|ИЗ
	|	РегистрСведений.ВыполнениеРегламентныхОперацийНДС КАК ВыполнениеРегламентныхОперацийНДС
	|ГДЕ
	|	ВыполнениеРегламентныхОперацийНДС.Организация = &Организация
	|	И ВыполнениеРегламентныхОперацийНДС.ПериодРегистрации >= &ПериодРегистрации
	|";
	
	Набор =  РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.СоздатьНаборЗаписей();
	
	Попытка
	
		НачатьТранзакцию();
	
		ОбщегоНазначенияБПВызовСервера.УстановитьУправляемуюБлокировку(ПараметрыБлокировки, ЗначенияБлокировки);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Набор.Отбор.Организация.Установить(Организация, Истина);
			Набор.Отбор.ПериодРегистрации.Установить(Выборка.ПериодРегистрации, Истина);
			
			Набор.Прочитать();
			Для Каждого Движение Из Набор Цикл
				Если Движение.Актуальность Тогда
					Движение.Актуальность = Ложь;
				КонецЕсли;
			КонецЦикла;
		
			Если Набор.Модифицированность() Тогда
				Набор.Записать(Истина);
			КонецЕсли;
			
		КонецЦикла;
	
		ЗафиксироватьТранзакцию();
		
	Исключение
	
		ТекстОшибки = ОписаниеОшибки();
		
		ОтменитьТранзакцию();
		
		ВызватьИсключение ТекстОшибки;
	
	КонецПопытки;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ ДВИЖЕНИЙ

Функция ПодготовитьПараметрыФактВыполненияРегламентнойОперации(Таблица)
	
	Параметры = Новый Структура;
	
	// Реквизиты
	СписокОбязательныхКолонок = ""
		+ "Период, "      		  // <Дата> - период движений - дата документа
		+ "Организация, " 		  // <СправочникСсылка.Организации>
		+ "Регистратор, "		  // <ДокументСсылка.ФормированиеЗаписейКнигиПокупок> - документ-регистратор	
		+ "РегламентнаяОперация"; // <ПеречислениеСсылка.РегламентныеОперации> - вид регламентной операции
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		Таблица, СписокОбязательныхКолонок));
		
	Возврат Параметры;
	
КонецФункции

Процедура СформироватьДвиженияФактВыполненияРегламентнойОперации(Таблица, Отказ)  Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыФактВыполненияРегламентнойОперации(Таблица);
	Если Параметры.Реквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	ЗафиксироватьФактВыполненияРегламентнойОперации(
		Реквизиты.Период, Реквизиты.Организация, Реквизиты.Регистратор, Реквизиты.РегламентнаяОперация);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедуры снимает признак выполнения для регламентных операций, включая подчиненные
Процедура СброситьФактВыполненияПодчиненныхОпераций(Знач Организация, ПериодРегистрации, ДеревоОпераций, Операция, Регистратор = Неопределено)
	Перем ОрганизацияЛокально;
	
	СтрокиДереваРегламентнойОперации = ДеревоОпераций.НайтиСтроки(Новый Структура("Узел", Операция));
	Для каждого СтрокаДереваРегламентнойОперации Из СтрокиДереваРегламентнойОперации Цикл
		Если СтрокаДереваРегламентнойОперации.Связи.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Набор = РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.СоздатьНаборЗаписей();
		Для каждого ПодчиненнаяОперация Из СтрокаДереваРегламентнойОперации.Связи Цикл
		
			Набор.Отбор.Организация.Установить(Организация);
			Набор.Отбор.ПериодРегистрации.Установить(ПериодРегистрации);
			Набор.Отбор.РегламентнаяОперация.Установить(ПодчиненнаяОперация.Значение);
			Набор.Прочитать();
			
			КолвоЗаписейВНаборе = Набор.Количество();
			Для ОбратныйИндекс = 1 По КолвоЗаписейВНаборе Цикл
				Запись = Набор[КолвоЗаписейВНаборе - ОбратныйИндекс];
				Если не Запись.Актуальность Тогда
					Продолжить;
				КонецЕсли; 
				
				Запись.Актуальность = Ложь;
				
			КонецЦикла;
			
			Набор.Записать();
			
			СброситьФактВыполненияПодчиненныхОпераций(Организация, ПериодРегистрации, ДеревоОпераций, ПодчиненнаяОперация.Значение, Регистратор);
		
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполнения общего дерева регламентных операций
Процедура ЗаполнитьЗначенияДереваОперацийНДС(ДеревоОпераций)

	СписокПодчиненных = Новый СписокЗначений();

	//**********************************
	// Книга продаж

	СтрокаУзла = ДеревоОпераций.Добавить();
	СтрокаУзла.Узел = Перечисления.РегламентныеОперации.ОбработкаНомеровСчетовФактур;
	СписокПодчиненных.Очистить();
	СтрокаУзла.Связи = СписокПодчиненных.Скопировать();
	
	СтрокаУзла = ДеревоОпераций.Добавить();
	СтрокаУзла.Узел = Перечисления.РегламентныеОперации.ПереходНаРаздельныйУчетНДСНаСчете19;
	СписокПодчиненных.Очистить();
	СтрокаУзла.Связи = СписокПодчиненных.Скопировать();
	
	СтрокаУзла = ДеревоОпераций.Добавить();
	СтрокаУзла.Узел = Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНаАванс;
	СписокПодчиненных.Очистить();
	СписокПодчиненных.Добавить(Перечисления.РегламентныеОперации.ПодтверждениеНулевойСтавкиНДС);
	СписокПодчиненных.Добавить(Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж);
	СписокПодчиненных.Добавить(Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок);
	СтрокаУзла.Связи = СписокПодчиненных.Скопировать();

	СтрокаУзла = ДеревоОпераций.Добавить();
	СтрокаУзла.Узел = Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНалоговогоАгента;
	СписокПодчиненных.Очистить();
	СписокПодчиненных.Добавить(Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж);
	СписокПодчиненных.Добавить(Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок);
	СтрокаУзла.Связи = СписокПодчиненных.Скопировать();

	СтрокаУзла = ДеревоОпераций.Добавить();
	СтрокаУзла.Узел = Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНаСуммовыеРазницы;
	СписокПодчиненных.Очистить();
	СписокПодчиненных.Добавить(Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж);
	СтрокаУзла.Связи = СписокПодчиненных.Скопировать();

	СтрокаУзла = ДеревоОпераций.Добавить();
	СтрокаУзла.Узел = Перечисления.РегламентныеОперации.ПодтверждениеНулевойСтавкиНДС;
	СписокПодчиненных.Очистить();
	СписокПодчиненных.Добавить(Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж0);
	СписокПодчиненных.Добавить(Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок0);
	СтрокаУзла.Связи = СписокПодчиненных.Скопировать();
	
	СтрокаУзла = ДеревоОпераций.Добавить();
	СтрокаУзла.Узел = Перечисления.РегламентныеОперации.ПодтверждениеОплатыНДСВБюджет;
	СписокПодчиненных.Очистить();
	СписокПодчиненных.Добавить(Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж);
	СписокПодчиненных.Добавить(Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок);
	СтрокаУзла.Связи = СписокПодчиненных.Скопировать();

	СтрокаУзла = ДеревоОпераций.Добавить();
	СтрокаУзла.Узел = Перечисления.РегламентныеОперации.ВосстановлениеНДСПоОбъектамНедвижимости;
	СписокПодчиненных.Очистить();
	СтрокаУзла.Связи = СписокПодчиненных.Скопировать();

	СтрокаУзла = ДеревоОпераций.Добавить();
	СтрокаУзла.Узел = Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж;
	СписокПодчиненных.Очистить();
	СтрокаУзла.Связи = СписокПодчиненных.Скопировать();

	СтрокаУзла = ДеревоОпераций.Добавить();
	СтрокаУзла.Узел = Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж0;
	СписокПодчиненных.Очистить();
	СтрокаУзла.Связи = СписокПодчиненных.Скопировать();

	// Книга продаж
	//**********************************

	//**********************************
	// Книга покупок

	СтрокаУзла = ДеревоОпераций.Добавить();
	СтрокаУзла.Узел = Перечисления.РегламентныеОперации.НачислениеНДСпоСМРхозспособом;
	СписокПодчиненных.Очистить();
	СписокПодчиненных.Добавить(Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок);
	СписокПодчиненных.Добавить(Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж);
	СтрокаУзла.Связи = СписокПодчиненных.Скопировать();

	СтрокаУзла = ДеревоОпераций.Добавить();
	СтрокаУзла.Узел = Перечисления.РегламентныеОперации.РаспределениеНДС;
	СписокПодчиненных.Очистить();
	СписокПодчиненных.Добавить(Перечисления.РегламентныеОперации.ВосстановлениеНДС);
	СписокПодчиненных.Добавить(Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок);
	СписокПодчиненных.Добавить(Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок0);
	СтрокаУзла.Связи = СписокПодчиненных.Скопировать();

	СтрокаУзла = ДеревоОпераций.Добавить();
	СтрокаУзла.Узел = Перечисления.РегламентныеОперации.ВосстановлениеНДС;
	СписокПодчиненных.Очистить();
	СписокПодчиненных.Добавить(Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок);
	СтрокаУзла.Связи = СписокПодчиненных.Скопировать();

	СтрокаУзла = ДеревоОпераций.Добавить();
	СтрокаУзла.Узел = Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок;
	СписокПодчиненных.Очистить();
	СписокПодчиненных.Добавить(Перечисления.РегламентныеОперации.ПереходНаРаздельныйУчетНДСНаСчете19);
	СтрокаУзла.Связи = СписокПодчиненных.Скопировать();

	СтрокаУзла = ДеревоОпераций.Добавить();
	СтрокаУзла.Узел = Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок0;
	СписокПодчиненных.Добавить(Перечисления.РегламентныеОперации.ПереходНаРаздельныйУчетНДСНаСчете19);
	СписокПодчиненных.Очистить();
	СтрокаУзла.Связи = СписокПодчиненных.Скопировать();
	
	// Книга покупок
	//**********************************

КонецПроцедуры

#КонецЕсли