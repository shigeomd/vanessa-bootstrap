
&НаКлиенте
Перем ФормаДлительнойОперации;

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем КонтекстЭДОКлиент;

&НаКлиенте
Перем ФормаОтчета; // Обход ошибки в платформе.

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ОпределитьДоступностьЭДО();
	
	// Инициализируем цвета
	ЦветАктивнойКнопки		= Новый Цвет(251, 225, 81);  // Желтый.
	ЦветНеактивнойКнопки	= Новый Цвет(242, 242, 242); // Серый.
	ЦветТекстаКнопки		= Новый Цвет(0, 0, 0);       // Черный.
	
	// Определяем организацию по-умолчанию в случае использования одной организации
	Организация = Неопределено;
	Если РегламентированнаяОтчетностьВызовСервера.ИспользуетсяОднаОрганизация() Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("Справочники.Организации");
		Организация = Модуль.ОрганизацияПоУмолчанию();
	КонецЕсли;
	
	// Если организаций больше одной, то используем основную организацию
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = РегламентированнаяОтчетность.ПолучитьОрганизациюПоУмолчанию();
	КонецЕсли;
	
	СохраненныйПериодОтчета = ХранилищеНастроекДанныхФорм.Загрузить(ЭтаФорма.ИмяФормы, "Форма1СОтчетность_ПериодОтчета");
	Если СохраненныйПериодОтчета <> Неопределено Тогда
		ПериодОтчета = СохраненныйПериодОтчета;
	КонецЕсли;
	СохраненныйНачалоПериода = ХранилищеНастроекДанныхФорм.Загрузить(ЭтаФорма.ИмяФормы, "Форма1СОтчетность_НачалоПериода");
	Если СохраненныйНачалоПериода <> Неопределено Тогда
		НачалоПериода = СохраненныйНачалоПериода;
	КонецЕсли;
	СохраненныйКонецПериода = ХранилищеНастроекДанныхФорм.Загрузить(ЭтаФорма.ИмяФормы, "Форма1СОтчетность_КонецПериода");
	Если СохраненныйКонецПериода <> Неопределено Тогда
		КонецПериода = СохраненныйКонецПериода;
	КонецЕсли;
	
	// Заполняем признак использования внешней программы для ведения персонифицированного учета
	ПерсонифицированныйУчетВедетсяВоВнешнейПрограмме = РегламентированнаяОтчетность.ПерсонифицированныйУчетВедетсяВоВнешнейПрограмме();
	
	// Заполняем список выбора для видов сверок
	СписокВыбораВидаСверки = Элементы.ОтборВидСверки.СписокВыбора;
	
	СписокВыбораВидаСверки.Добавить(Строка(Перечисления.ВидыУслугПриИОН.ПредставлениеАктовСверкиРасчетов));
	СписокВыбораВидаСверки.Добавить(Строка(Перечисления.ВидыУслугПриИОН.ПредставлениеВыпискиОперацийИзКарточкиРасчетыСБюджетом));
	СписокВыбораВидаСверки.Добавить(Строка(Перечисления.ВидыУслугПриИОН.ПредставлениеПеречняБухгалтерскойИНалоговойОтчетности));
	СписокВыбораВидаСверки.Добавить(Строка(Перечисления.ВидыУслугПриИОН.ПредставлениеСправкиОСостоянииРасчетовСБюджетом));
	СписокВыбораВидаСверки.Добавить(Строка(Перечисления.ВидыУслугПриИОН.ПредставлениеСправкиОбИсполненииОбязанностейПоУплате));
	СписокВыбораВидаСверки.Добавить(Строка(Перечисления.ВидыУслугПриИОС.СверкаФИОиСНИЛС));
	СписокВыбораВидаСверки.Добавить(Строка(Перечисления.ВидыУслугПриИОС.СправкаОСостоянииРасчетов));
	
	ОткрытьНаНужнойСтранице(Параметры);

	ДействияПриИзмененииОтборов(ЭтаФорма);
	
	УправлениеЭУ(ЭтаФорма, Истина);
	
	УправлениеЭУВРежимеСервиса();
	
	// Запуск фонового задания для поиска объектов, не записанных в регистры
	РезультатПроверкиКоличестваНезаписанныхОбъектов = ПроверитьКоличествоОбъектовНеЗаписанныхВРегистр();
	
	// Заполнение группы информационных ссылок
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("ТехнологияСервиса.ИнформационныйЦентр") Тогда
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ИнформационныйЦентрСервер");
		Модуль.ВывестиКонтекстныеСсылки(ЭтаФорма, Элементы.ИнформационныеСсылки);
	КонецЕсли;
	
	// Скрываем некоторые элементы при отключенной 1С-Отчетности
	УправлениеВидимостьюЭлементовПриОтключенномЭДО();
	
	УправлениеВидимостьюИОНОнлайнИЛичныхКабинетов();
	
	ЗаполнитьДеревоНовое();
	
	ЭтоТакси = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ЭтоВариантИнтерфейсаТакси();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии()
	
	Если Элементы.Разделы.ТекущаяСтраница = Элементы.СтраницаНастройки Тогда
		УправлениеЭУГруппаНастройки();
	КонецЕсли;
	
	#Если ВебКлиент Тогда 
		ЭтоВебКлиент = Истина;
 	#КонецЕсли
	
	// Обрабатываем результат запуска фонового задания по проверке наличия объектов, не записанных в регистры
	Если РезультатПроверкиКоличестваНезаписанныхОбъектов <> Неопределено Тогда
		// Результат получен и уже обработан на стороне сервера
		ПоказатьРезультатПроверки();
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеПодсчетаКоличестваНезаписанныхОбъектов", 1, Истина);
	КонецЕсли;
	
	// Из-за ошибки платформы скрываем отображение значка критических ошибок в вебе 
	Если ЭтоВебКлиент Тогда
		Элементы.ОтчетыЕстьКритическиеОшибкиОтправки.Видимость 		= Ложь;
		Элементы.УведомленияЕстьКритическиеОшибкиОтправки.Видимость = Ложь;
		Элементы.ПисьмаЕстьКритическиеОшибкиОтправки.Видимость 		= Ложь;
		Элементы.СверкиЕстьКритическиеОшибкиОтправки.Видимость 		= Ложь;
		Элементы.ЕГРЮЛЕстьКритическиеОшибкиОтправки.Видимость 		= Ложь;
		Элементы.ВходящиеЕстьКритическиеОшибкиОтправки.Видимость 	= Ложь;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПередОткрытиемОсновнойФормыРаботыСОтчетностью(УникальныйИдентификатор);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	ТекстОшибкиИнициализацииКонтекстаЭДО = Результат.ТекстОшибки;
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьНадписьВремяОбновления", 900);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Открытие формы 1С-Отчетность" Тогда
		
		Раздел = Параметр.Раздел;
		Если ЗакладкуНеобходимоСменить(Раздел) Тогда
			ОткрытьНаНужнойСтранице(Параметр);
			СделатьВсеГиперссылкиНеактивными();
			УправлениеЭУ(ЭтаФорма, Истина);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ИзменениеНастроекЭДООрганизации" ИЛИ ИмяСобытия = "ОбновитьУчетнуюЗапись" Тогда
		
		ОпределитьДоступностьЭДО();
		УправлениеВидимостьюЭлементовПриОтключенномЭДО();
		
		Если Параметр = Организация Тогда
			УправлениеЭУГруппаНастройки();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Завершение индексирования объектов журнала Отчетность"
		ИЛИ ИмяСобытия = "Завершение обновления" Тогда
		
		ОбновитьТекущуюТаблицу();
		ЗаполнитьДеревоНовое();
		ОбновитьКоличествоНепрочитанныхВходящихПисем(ЭтаФорма);

	ИначеЕсли Найти(ИмяСобытия, "Запись_") > 0 
		ИЛИ ИмяСобытия = "Завершение автообмена с сервером ФСС" ИЛИ ИмяСобытия = "Запись_ОтправкиФСС" ИЛИ ИмяСобытия = "Редактирование_ОтправкиФСС" 
		ИЛИ ИмяСобытия = "Завершение автообмена с сервером ФСРАР" ИЛИ ИмяСобытия = "Запись_ОтправкиФСРАР" ИЛИ ИмяСобытия = "Редактирование_ОтправкиФСРАР"
		ИЛИ ИмяСобытия = "Завершение автообмена с сервером РПН" ИЛИ ИмяСобытия = "Запись_ОтправкиРПН" ИЛИ ИмяСобытия = "Редактирование_ОтправкиРПН"
		ИЛИ ИмяСобытия = "Завершение отправки в контролирующий орган"
		ИЛИ ИмяСобытия = "Завершение отправки"
		ИЛИ ИмяСобытия = "Изменение пометки удаления объекта"
		ИЛИ ИмяСобытия = "Позиционирование в списке отчетов"
		ИЛИ ИмяСобытия = "Изменение признака прочтенности"
		ИЛИ ИмяСобытия = "Актуализация состояния отправки" Тогда
		
		ОрганизацияВКлюче = Неопределено;
		СсылкаВКлюче = Неопределено;
		Если ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("Организация") И Параметр.Свойство("Ссылка") Тогда
			ОрганизацияВКлюче 	= Параметр.Организация;
			СсылкаВКлюче 		= Параметр.Ссылка;
		Иначе
			Если КонтекстЭДОКлиент <> Неопределено И Источник <> Неопределено Тогда
				ОрганизацияВКлюче 	= КонтекстЭДОКлиент.СведенияПоОтправляемымОбъектам(Источник).Организация;
				СсылкаВКлюче 		= Источник;
			КонецЕсли;
		КонецЕсли;
			
		// Обновляем текущую таблицу
		Если Элементы.Разделы.ТекущаяСтраница = Элементы.СтраницаОтчеты Тогда
			
			Если ОрганизацияВКлюче <> Неопределено Тогда
				
				Отборы = Новый Массив;
				Отборы.Добавить(Новый Структура("Организация, Ссылка", ОрганизацияВКлюче, СсылкаВКлюче));
				
				КлючЗаписи = Новый(Тип("РегистрСведенийКлючЗаписи.ЖурналОтчетовСтатусы"), Отборы);
				
				Если НЕ КлючЗаписи.Пустой() Тогда
					
					ОповеститьОбИзменении(КлючЗаписи);
					Элементы.Отчеты.ТекущаяСтрока = КлючЗаписи;
					
					ДобавитьВидОтчетаВИзбранные(Отборы[0]);
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			// Определем текущую страницу
			СтраницаЖурнала = Неопределено;
			Если Элементы.Разделы.ТекущаяСтраница = Элементы.СтраницаУведомления Тогда
				СтраницаЖурнала = ПредопределенноеЗначение("Перечисление.СтраницыЖурналаОтчетность.Уведомления");
			ИначеЕсли Элементы.Разделы.ТекущаяСтраница = Элементы.СтраницаПисьма Тогда
				СтраницаЖурнала = ПредопределенноеЗначение("Перечисление.СтраницыЖурналаОтчетность.Письма");
			ИначеЕсли Элементы.Разделы.ТекущаяСтраница = Элементы.СтраницаСверки Тогда
				СтраницаЖурнала = ПредопределенноеЗначение("Перечисление.СтраницыЖурналаОтчетность.Сверки");
			ИначеЕсли Элементы.Разделы.ТекущаяСтраница = Элементы.СтраницаЕГРЮЛ Тогда
				СтраницаЖурнала = ПредопределенноеЗначение("Перечисление.СтраницыЖурналаОтчетность.ЕГРЮЛ");
			ИначеЕсли Элементы.Разделы.ТекущаяСтраница = Элементы.СтраницаВходящие Тогда
				СтраницаЖурнала = ПредопределенноеЗначение("Перечисление.СтраницыЖурналаОтчетность.Входящие");
			КонецЕсли;
			
			// Вызываем обновление только одной строки только данной страницы
			Если СтраницаЖурнала <> Неопределено Тогда
			
				Отборы = Новый Массив;
				Отборы.Добавить(Новый Структура("СтраницаЖурнала, Организация, Ссылка", СтраницаЖурнала, ОрганизацияВКлюче, СсылкаВКлюче));
				
				КлючЗаписи = Новый(Тип("РегистрСведенийКлючЗаписи.ЖурналОтправокВКонтролирующиеОрганы"), Отборы);
				
				Если НЕ КлючЗаписи.Пустой() Тогда
					ОповеститьОбИзменении(КлючЗаписи);
					
					// При записи объекта позиционируемся на нем в таблице
					Если Найти(ИмяСобытия, "Запись_") > 0 Тогда
						Если Элементы.Разделы.ТекущаяСтраница = Элементы.СтраницаУведомления Тогда
							Элементы.Уведомления.ТекущаяСтрока = КлючЗаписи;
						ИначеЕсли Элементы.Разделы.ТекущаяСтраница = Элементы.СтраницаПисьма Тогда
							Элементы.Письма.ТекущаяСтрока = КлючЗаписи;
						ИначеЕсли Элементы.Разделы.ТекущаяСтраница = Элементы.СтраницаСверки Тогда
							Элементы.Сверки.ТекущаяСтрока = КлючЗаписи;
						ИначеЕсли Элементы.Разделы.ТекущаяСтраница = Элементы.СтраницаЕГРЮЛ Тогда
							Элементы.ЕГРЮЛ.ТекущаяСтрока = КлючЗаписи;
						ИначеЕсли Элементы.Разделы.ТекущаяСтраница = Элементы.СтраницаВходящие Тогда
							Элементы.Входящие.ТекущаяСтрока = КлючЗаписи;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			ОбновитьКоличествоНепрочитанныхВходящихПисем(ЭтаФорма);
			
		КонецЕсли;
		
		Если ИмяСобытия = "Изменение признака прочтенности" Тогда
			СтрокиДерева = Новое.ПолучитьЭлементы();
			Для Каждого СтрокаДерева Из СтрокиДерева Цикл
				Если СтрокаДерева.Группа <> ПредопределенноеЗначение("Перечисление.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ПолученныеСообщения") Тогда
					Прервать;				
				КонецЕсли;
				
				Если ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("Ссылка")
					И СтрокаДерева.Ссылка = Параметр.Ссылка Тогда
					СтрокаДерева.НеПрочитано = Ложь;
					СписокСсылок = Новый Массив;
					СписокСсылок.Добавить(Параметр.Ссылка);
					ПометитьНовыеСобытияПросмотреннымиНаСервере(СписокСсылок);
					ОбновитьКоличествоНовых(ЭтаФорма);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ИмяСобытия = "Завершение автообмена с сервером ФСС" ИЛИ ИмяСобытия = "Завершение автообмена с сервером ФСРАР"
			ИЛИ ИмяСобытия = "Завершение автообмена с сервером РПН" ИЛИ ИмяСобытия = "Завершение отправки в контролирующий орган"
			ИЛИ ИмяСобытия = "Завершение отправки"  Тогда
			
			ЗаполнитьДеревоНовое();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ПриЗакрытии_ЭлектронныеПредставленияРегламентированныхОтчетов" Тогда	
		Если ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("ЭтоУведомление") Тогда
			ШаблонПредупреждения = НСтр("ru = '""%1"" отображается в разделе ""%2""'");
			Если Параметр.ЭтоУведомление И Элементы.Разделы.ТекущаяСтраница = Элементы.СтраницаОтчеты Тогда
				ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредупреждения, Строка(Источник), НСтр("ru = 'Уведомления'"));
				ПоказатьПредупреждение(, ТекстПредупреждения);
			ИначеЕсли Не Параметр.ЭтоУведомление И Элементы.Разделы.ТекущаяСтраница = Элементы.СтраницаУведомления Тогда
				ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредупреждения, Строка(Источник), НСтр("ru = 'Отчеты'"));
				ПоказатьПредупреждение(, ТекстПредупреждения);	
			КонецЕсли;
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если Элементы.Разделы.ТекущаяСтраница.Имя = "СтраницаНовое" Тогда
		ПометитьНовыеСобытияПросмотренными();
	КонецЕсли;
	
	СохранитьНастройки();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВидОтчетаВИзбранные(Отбор)
	
	МенеджерЗаписиОтчета = РегистрыСведений.ЖурналОтчетовСтатусы.СоздатьМенеджерЗаписи();
	МенеджерЗаписиОтчета.Организация = Отбор.Организация;
	МенеджерЗаписиОтчета.Ссылка      = Отбор.Ссылка;
	МенеджерЗаписиОтчета.Прочитать();
	
	ДанныеНайденногоВидаОтчета = Неопределено;
	
	Если МенеджерЗаписиОтчета.Выбран() Тогда
		Если ЗначениеЗаполнено(МенеджерЗаписиОтчета.НаименованиеОтчета) Тогда
			НайденныеОтчеты = РанееОткрытыеВидыОтчетов.НайтиСтроки(Новый Структура("Наименование", МенеджерЗаписиОтчета.НаименованиеОтчета));
			Для каждого НайденныйОтчет Из НайденныеОтчеты Цикл
				Если НайденныйОтчет.ЭтоГруппа <> Истина Тогда
					ДанныеНайденногоВидаОтчета = Новый Структура("Наименование,ПолноеИмя,Ссылка");
					ЗаполнитьЗначенияСвойств(ДанныеНайденногоВидаОтчета, НайденныйОтчет);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеНайденногоВидаОтчета <> Неопределено Тогда
		
		ТаблицаРанееСозданныхОтчетов = ХранилищеНастроекДанныхФорм.Загрузить(
			"Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.ФормаСозданияОтчета",
			"ФормаОтчетность_ФормаСозданияОтчета_РанееСозданныеОтчеты");
		
		Если ТипЗнч(ТаблицаРанееСозданныхОтчетов) = Тип("ТаблицаЗначений") Тогда
			НайденныеОтчеты = ТаблицаРанееСозданныхОтчетов.НайтиСтроки(
				Новый Структура("ПолноеИмя,Ссылка", ДанныеНайденногоВидаОтчета.ПолноеИмя, ДанныеНайденногоВидаОтчета.Ссылка));
			Если НайденныеОтчеты.Количество() = 0 Тогда
				НоваяСтрока = ТаблицаРанееСозданныхОтчетов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеНайденногоВидаОтчета);
				
				ХранилищеНастроекДанныхФорм.Сохранить(
					"Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.ФормаСозданияОтчета",
					"ФормаОтчетность_ФормаСозданияОтчета_РанееСозданныеОтчеты", ТаблицаРанееСозданныхОтчетов);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПриПереключенииРаздела(Элемент)
	
	Если Элементы.Разделы.ТекущаяСтраница.Имя = "СтраницаНовое" Тогда
		ПометитьНовыеСобытияПросмотренными();
	КонецЕсли;
	
	ВыделитьТекущийРаздел(ЭтаФорма, Элемент);
	ВывестиТаблицуРаздела(ЭтаФорма, Элемент.Имя);
	
	Если Элемент.Имя = "ГиперссылкаНастройки" Тогда
		УправлениеЭУГруппаНастройки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЭУ(Форма, ВыполнитьУстановкуСтраницы = Ложь)

	Форма.Элементы.ГруппаСсылокРазделы.ЦветФона = Форма.ЦветНеактивнойКнопки;
	
	// Кнопку текущего раздела делаем желтой
	Если ВыполнитьУстановкуСтраницы Тогда
		
		// Кнопку текущего раздела делаем желтой
		ТекущийРаздел = Форма.Элементы["Гиперссылка" + СтрЗаменить(Форма.Элементы.Разделы.ТекущаяСтраница.Имя, "Страница", "")];
		ОформитьКнопку(Форма, ТекущийРаздел, ТекущийРаздел);
		
	Иначе
		ТекущийРаздел = ТекущийРазделФормы(Форма);
	КонецЕсли;
	
	// Количество в разделе "Новое"
	Если Форма.КоличествоНовых > 0 Тогда
		Форма.Элементы.ГиперссылкаНовое.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
		Форма.Элементы.ГиперссылкаНовое.Заголовок = "Новое (" + ?(Форма.КоличествоНовых > 99, "99+", Форма.КоличествоНовых) + ")";
	КонецЕсли;
	
	// Раздел "Входящие"
	ОбновитьКоличествоНепрочитанныхВходящихПисем(Форма);
	
	// Выводим таблицу, соотвествующую разделу
	Если ТекущийРаздел <> Неопределено Тогда 
		ВывестиТаблицуРаздела(Форма, ТекущийРаздел.Имя);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОформитьКнопку(Форма, Гиперссылка, ТекущаяГиперссылка)
	
	АктивнаКнопка = (Гиперссылка = ТекущаяГиперссылка);
	
	Гиперссылка.ЦветФона	= ?(АктивнаКнопка, Форма.ЦветАктивнойКнопки, Форма.ЦветНеактивнойКнопки);
	Гиперссылка.Гиперссылка	= ?(АктивнаКнопка, Ложь, Истина);
	Гиперссылка.ЦветТекста	= Форма.ЦветТекстаКнопки;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВыделитьТекущийРаздел(Форма, ТекущийРаздел)
	
	МассивРазделов = Новый Массив;
	МассивРазделов.Добавить(Форма.Элементы.ГиперссылкаНовое);
	МассивРазделов.Добавить(Форма.Элементы.ГиперссылкаОтчеты);
	МассивРазделов.Добавить(Форма.Элементы.ГиперссылкаУведомления);
	МассивРазделов.Добавить(Форма.Элементы.ГиперссылкаПисьма);
	МассивРазделов.Добавить(Форма.Элементы.ГиперссылкаСверки);
	МассивРазделов.Добавить(Форма.Элементы.ГиперссылкаЕГРЮЛ);
	МассивРазделов.Добавить(Форма.Элементы.ГиперссылкаВходящие);
	МассивРазделов.Добавить(Форма.Элементы.ГиперссылкаСервисы);
	МассивРазделов.Добавить(Форма.Элементы.ГиперссылкаНастройки);
	
	// Делаем текущий раздел желтым
	Для каждого Раздел Из МассивРазделов Цикл
		
		Если Раздел.ЦветФона = Форма.ЦветАктивнойКнопки Тогда
			ОформитьКнопку(Форма, Раздел, ТекущийРаздел);
		ИначеЕсли Раздел = ТекущийРаздел Тогда
			ОформитьКнопку(Форма, Раздел, ТекущийРаздел);
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ДействияПриИзмененииОтборов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияНастройкиПриИзменении(Элемент)
	ДействияПриИзмененииОтборов(ЭтаФорма);
	УправлениеЭУГруппаНастройки();
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидОтчетаПриИзменении(Элемент)
	
	УстановитьОтборы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидОтчетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	МассивВидовОтчетов = ПолучитьСписокОтчетовИзРегистраСведений();
	
	Элемент.СписокВыбора.ЗагрузитьЗначения(МассивВидовОтчетов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидОтчетаОчистка(Элемент, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПериодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НачалоПериодаВыбор = ?(ЗначениеЗаполнено(НачалоПериода), НачалоПериода, НачалоКвартала(ТекущаяДата()));
	КонецПериодаВыбор  = ?(ЗначениеЗаполнено(КонецПериода), КонецПериода, КонецКвартала(ТекущаяДата()));
	
	ПараметрыВыбора = Новый Структура("НачалоПериода, КонецПериода, ВидПериода", НачалоПериодаВыбор, КонецПериодаВыбор, Неопределено);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтборВыбратьПериодЗавершение", ЭтаФорма);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.ВыборСтандартногоПериодаГодКвартал", ПараметрыВыбора, , , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НачалоПериода = РезультатВыбора.НачалоПериода;
	КонецПериода  = РезультатВыбора.КонецПериода;
	
	ПериодОтчета = ПредставлениеПериода(НачалоПериода, КонецПериода, "ФП=Истина");
	
	УстановитьОтборы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПериодОтчетаОчистка(Элемент, СтандартнаяОбработка)
	
	НачалоПериода = Дата(1, 1, 1);
	КонецПериода  = Дата(1, 1, 1);
	
	УстановитьОтборы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявлениеНаПодключениеК1СОтчетностиНажатие(Элемент)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьФормуМастераЗаявленияНаПодключение(Организация, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗаявленийНажатие(Элемент)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьФормуСпискаЗаявленийНаПодключение(Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиДокументооборотаСГосОрганамиНажатие(Элемент)
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиИнициализацииКонтекстаЭДО);
		Возврат;
	КонецЕсли;
	
	КонтекстЭДОКлиент.ОткрытьФормуОбщихНастроекЭДО();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭДОСНалоговымиОрганамиПФРИРосстатомНажатие(Элемент)
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиИнициализацииКонтекстаЭДО);
	Иначе
		КонтекстЭДОКлиент.ОткрытьФормуНастройкиЭДОсФНСиПФРиРосстатом(Организация, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭДОСФССНажатие(Элемент)
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиИнициализацииКонтекстаЭДО);
	Иначе
		КонтекстЭДОКлиент.ОткрытьФормуНастройкиЭДОсФСС(Организация, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭДОСРосалкогольрегулированиемНажатие(Элемент)
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиИнициализацииКонтекстаЭДО);
	Иначе
		КонтекстЭДОКлиент.ОткрытьФормуНастройкиЭДОсФСРАР(Организация, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭДОСРосприроднадзоромНажатие(Элемент)
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиИнициализацииКонтекстаЭДО);
	Иначе
		КонтекстЭДОКлиент.ОткрытьФормуНастройкиЭДОсРПН(Организация, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияСверкиПриИзменении(Элемент)
	 ДействияПриИзмененииОтборов(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидСверкиПриИзменении(Элемент)
	ДействияПриИзмененииОтборов(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияЕГРЮЛПриИзменении(Элемент)
	ДействияПриИзмененииОтборов(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияПисьмаПриИзменении(Элемент)
	ДействияПриИзмененииОтборов(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияУведомленияПриИзменении(Элемент)
	ДействияПриИзмененииОтборов(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияВходящиеПриИзменении(Элемент)
	
	ДействияПриИзмененииОтборов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидУведомленияПриИзменении(Элемент)
	
	ВидУведомления = ПредставлениеВидаУведомления;
	ДействияПриИзмененииОтборов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидУведомленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораВидаУведомления", ЭтотОбъект);
	
	ПараметрыФормы 	= Новый Структура;
	ПараметрыФормы.Вставить("Организация", Организация);
  	ПараметрыФормы.Вставить("УчитыватьУведомленияНеВходящиеВБРО", Истина);
	
	Если ЗначениеЗаполнено(ПредставлениеВидаУведомления) И ЗначениеЗаполнено(ВидУведомления) Тогда
		ПараметрыФормы.Вставить("ВидУведомления", ВидУведомления);
	КонецЕсли;
	
	ОткрытьФорму("Документ.УведомлениеОСпецрежимахНалогообложения.Форма.ФормаВыбораВидаСообщения", ПараметрыФормы,,,,, 
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ДокументыПоТребованиюФНСНажатие(Элемент)
	
	ОткрытьФорму("РегистрСведений.ДокументыПоТребованиюФНС.Форма.ФормаСписка", , ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеНаИнформационнуюСсылку(Элемент)
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("ТехнологияСервиса.ИнформационныйЦентр") Тогда
		
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ИнформационныйЦентрКлиент");
		Модуль.НажатиеНаИнформационнуюСсылку(ЭтаФорма, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеНаСсылкуВсеИнформационныеСсылки(Элемент)
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("ТехнологияСервиса.ИнформационныйЦентр") Тогда
		
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ИнформационныйЦентрКлиент");
		Модуль.НажатиеНаСсылкуВсеИнформационныеСсылки(ЭтаФорма.ИмяФормы);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

#Область ОбработчикиСобытийЭлементовТаблицыНовое

&НаКлиенте
Процедура ТаблицаНовоеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Поле.Имя = "ТаблицаНовоеОбъектНаименованиеСсылка" Тогда
		Если Элемент.ТекущиеДанные.ЕстьОтвет Тогда // есть ответ
			Если КонтекстЭДОКлиент <> Неопределено Тогда
				Ссылка = Элемент.ТекущиеДанные.Ссылка;
				Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика") Тогда
					КонтекстЭДОКлиент.ПоказатьОтветНаЗапросИОН(Ссылка);
				ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗапросНаИнформационноеОбслуживаниеСтрахователя") Тогда
					КонтекстЭДОКлиент.ПоказатьОтветНаЗапросИОС(Ссылка);
				ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП") Тогда
					КонтекстЭДОКлиент.ПоказатьОтветНаЗапросВыпискиЕГРЮЛ_ЕГРИП(Ссылка);
				КонецЕсли;				
			КонецЕсли;
		Иначе
			РедактироватьОбъект(Элемент);
		КонецЕсли;
	ИначеЕсли Поле.Имя = "ТаблицаНовоеСтатус" Тогда
		ПоказатьФормуСтатусовОтправкиИзСписка(Элемент);
	Иначе
		РедактироватьОбъект(Элемент);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыОтчеты

&НаКлиенте
Процедура ОтчетыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда

		Ссылка = ТекущиеДанные.РегламентированныйОтчет;
		Если Поле.Имя = "ОтчетыСтатус" Тогда
			
			// Переопределяем показ формы состояния отправки
			ОтображатьСтандартнуюФормуСостояния = Истина;
			ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ПоказатьСостояниеОтправкиОтчетаПереопределяемый(Ссылка, ОтображатьСтандартнуюФормуСостояния);
				
			// Если показ формы был выполнен в переопределяемой процедуре, то стандартную форму не показываем
			Если ОтображатьСтандартнуюФормуСостояния Тогда
				ПоказатьФормуСтатусовОтправкиИзСписка(Элемент);
			КонецЕсли;
			
		ИначеЕсли Поле.Имя = "ОтчетыЕстьКритическиеОшибкиОтправки" И ТекущиеДанные.ЕстьКритическиеОшибкиОтправки Тогда
			
			ПоказатьКритическиеОшибкиПоСсылке(Ссылка);
			
		Иначе
			
			ПоказатьЗначение(,Ссылка);
				
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
		
КонецПроцедуры

&НаКлиенте
Процедура ОтчетыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	ДокументооборотСКОКлиент.СоздатьЭлектронноеПредставлениеРегламентированныхОтчетовИзФайлов(ПараметрыПеретаскивания.Значение, УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ОтчетыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	Если Копирование Тогда
		
		ТекущиеДанные = Элементы.Отчеты.ТекущиеДанные;
		
		Если ТекущиеДанные <> Неопределено Тогда
			
			Ссылка = ТекущиеДанные.РегламентированныйОтчет;
			ПараметрыФормы = Новый Структура("ЗначениеКопирования", Ссылка); 
			
			Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ЭлектронныеПредставленияРегламентированныхОтчетов") Тогда
				
				ОткрытьФорму("Справочник.ЭлектронныеПредставленияРегламентированныхОтчетов.ФормаОбъекта", ПараметрыФормы);
				
			ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
				
				ОткрытьФорму("Документ.РегламентированныйОтчет.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
				
			Иначе
				
				ИмяФормыОбъекта = ИмяФормыОбъектаПоУмолчанию(Ссылка);
				ОткрытьФорму(ИмяФормыОбъекта, ПараметрыФормы);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СоздатьОтчет();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетыПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.Отчеты.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Ссылка = ТекущиеДанные.РегламентированныйОтчет;
		ПоказатьЗначение(,Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ПометитьНаУдалениеОбъект(Элемент);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыУведомления

&НаКлиенте
Процедура УведомленияПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	ПометитьНаУдалениеОбъект(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура УведомленияПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	РедактироватьОбъект(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура УведомленияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда

		Ссылка = ТекущиеДанные.Ссылка;
		
		Если Поле.Имя = "УведомленияСтатусОтправки" Тогда
			ПоказатьФормуСтатусовОтправкиИзСписка(Элемент);
		ИначеЕсли Поле.Имя = "УведомленияЕстьКритическиеОшибкиОтправки" И ТекущиеДанные.ЕстьКритическиеОшибкиОтправки Тогда
			ПоказатьКритическиеОшибкиПоСсылке(Ссылка);
		Иначе
			РедактироватьОбъект(Элемент);
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура УведомленияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	Если Копирование Тогда
		
		ТекущиеДанные = Элементы.Уведомления.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			
			Ссылка 			= ТекущиеДанные.Ссылка;
			ТипыСсылки 		= ТипЗнч(Ссылка);
			
			ПараметрыФормы 	= Новый Структура;
			ПараметрыФормы.Вставить("ЗначениеКопирования", Ссылка);
			
			Если ТипыСсылки = Тип("ДокументСсылка.УведомлениеОСпецрежимахНалогообложения") Тогда
				// Это уведомления из БРО
				ПараметрыФормы.Вставить("Организация", 		ТекущиеДанные.Организация);
				ПараметрыФормы.Вставить("ВидУведомления", 	ВидУведомленияОСпецрежимахНалогообложения(ТекущиеДанные.Ссылка));
				ОткрытьФорму("Документ.УведомлениеОСпецрежимахНалогообложения.ФормаОбъекта", ПараметрыФормы);
			ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ЭлектронныеПредставленияРегламентированныхОтчетов") Тогда
				// Это электронные представления
				ОткрытьФорму("Справочник.ЭлектронныеПредставленияРегламентированныхОтчетов.ФормаОбъекта", ПараметрыФормы);
			Иначе
				// Это объекты из ЗУПа
				ИмяТипа = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолноеИмяТипа(ТипыСсылки);
				ОткрытьФорму(ИмяТипа + ".ФормаОбъекта", ПараметрыФормы);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		СоздатьНовоеУведомление();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УведомленияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура УведомленияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	ДокументооборотСКОКлиент.СоздатьЭлектронноеПредставлениеРегламентированныхОтчетовИзФайлов(ПараметрыПеретаскивания.Значение, УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыПисьма

&НаКлиенте
Процедура ПисьмаПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	ПометитьНаУдалениеОбъект(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПисьмаПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	РедактироватьОбъект(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПисьмаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Ссылка = ТекущиеДанные.Ссылка;
		
		Если Поле.Имя = "ПисьмаСтатусОтправки" Тогда
			ПоказатьФормуСтатусовОтправкиИзСписка(Элемент);
		ИначеЕсли Поле.Имя = "ПисьмаЕстьКритическиеОшибкиОтправки" И ТекущиеДанные.ЕстьКритическиеОшибкиОтправки Тогда
			ПоказатьКритическиеОшибкиПоСсылке(Ссылка);
		Иначе
			РедактироватьОбъект(Элемент);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПисьмаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	Если Копирование Тогда
		
		ТекущиеДанные = Элементы.Письма.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			
			Ссылка = ТекущиеДанные.Ссылка;
			ПараметрыФормы = Новый Структура("ЗначениеКопирования", Ссылка);
			Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ПерепискаСКонтролирующимиОрганами") Тогда
				ОткрытьФорму("Справочник.ПерепискаСКонтролирующимиОрганами.ФормаОбъекта", ПараметрыФормы);
			Иначе
				ОткрытьФорму("Справочник.ОписиИсходящихДокументовВНалоговыеОрганы.ФормаОбъекта", ПараметрыФормы);
			КонецЕсли;
				
		КонецЕсли;
		
	Иначе
		
		СоздатьНовоеПисьмо();

	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыСверки

&НаКлиенте
Процедура СверкиПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	ПометитьНаУдалениеОбъект(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СверкиПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	РедактироватьОбъект(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СверкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		Ссылка = Элемент.ТекущиеДанные.Ссылка;

		Если Поле.Имя = "СверкиЕстьОтвет" Тогда
			Если Элемент.ТекущиеДанные.ЕстьОтвет Тогда // есть ответ
				Если КонтекстЭДОКлиент <> Неопределено Тогда
					
					Ссылка = Элемент.ТекущиеДанные.Ссылка;
					Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика") Тогда
						КонтекстЭДОКлиент.ПоказатьОтветНаЗапросИОН(Ссылка);
					ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗапросНаИнформационноеОбслуживаниеСтрахователя") Тогда
						КонтекстЭДОКлиент.ПоказатьОтветНаЗапросИОС(Ссылка);
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				РедактироватьОбъект(Элемент);
			КонецЕсли;
		ИначеЕсли Поле.Имя = "СверкиСтатусОтправки" Тогда
			ПоказатьФормуСтатусовОтправкиИзСписка(Элемент);
		ИначеЕсли Поле.Имя = "СверкиЕстьКритическиеОшибкиОтправки" И ТекущиеДанные.ЕстьКритическиеОшибкиОтправки Тогда
			ПоказатьКритическиеОшибкиПоСсылке(Ссылка);
		Иначе
			РедактироватьОбъект(Элемент);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СверкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	Если Копирование Тогда
		
		ТекущиеДанные = Элементы.Сверки.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			Ссылка = ТекущиеДанные.Ссылка;
			ПараметрыФормы = Новый Структура("ЗначениеКопирования", Ссылка); 
			Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика") Тогда
				ОткрытьФорму("Документ.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.Форма.ФормаДокумента", ПараметрыФормы);
			ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗапросНаИнформационноеОбслуживаниеСтрахователя") Тогда
				ОткрытьФорму("Документ.ЗапросНаИнформационноеОбслуживаниеСтрахователя.Форма.ФормаДокумента", ПараметрыФормы);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		СоздатьНовуюСверку();

	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыЕГРЮЛ

&НаКлиенте
Процедура ЕГРЮЛПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	Если Копирование Тогда
		
		ТекущиеДанные = Элементы.ЕГРЮЛ.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			Ссылка = ТекущиеДанные.Ссылка;
			ПараметрыФормы = Новый Структура("ЗначениеКопирования", Ссылка);
			ОткрытьФорму("Документ.ЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП.Форма.ФормаДокумента", ПараметрыФормы);
		КонецЕсли;
		
	Иначе
		
		СоздатьНовыйЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП();

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЕГРЮЛПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	РедактироватьОбъект(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ЕГРЮЛПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	ПометитьНаУдалениеОбъект(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ЕГРЮЛВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Ссылка = Элемент.ТекущиеДанные.Ссылка;
		
		СтандартнаяОбработка = Ложь;
		Если Поле.Имя = "ЕГРЮЛЕстьОтвет" Тогда
			Если Элемент.ТекущиеДанные.ЕстьОтвет Тогда // есть ответ
				Если КонтекстЭДОКлиент <> Неопределено Тогда
					КонтекстЭДОКлиент.ПоказатьОтветНаЗапросВыпискиЕГРЮЛ_ЕГРИП(Ссылка);
				КонецЕсли;
			Иначе
				РедактироватьОбъект(Элемент);
			КонецЕсли;
		ИначеЕсли Поле.Имя = "ЕГРЮЛСтатусОтправки" Тогда
			ПоказатьФормуСтатусовОтправкиИзСписка(Элемент);
		ИначеЕсли Поле.Имя = "ЕГРЮЛЕстьКритическиеОшибкиОтправки" И ТекущиеДанные.ЕстьКритическиеОшибкиОтправки Тогда
			ПоказатьКритическиеОшибкиПоСсылке(Ссылка);
		Иначе
			РедактироватьОбъект(Элемент);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыВходящие

&НаКлиенте
Процедура ВходящиеПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВходящиеПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	РедактироватьОбъект(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ВходящиеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Ссылка = Элемент.ТекущиеДанные.Ссылка;

		Если Поле.Имя = "ВходящиеСтатусОтправки" Тогда
			ПоказатьФормуСтатусовОтправкиИзСписка(Элемент);
		ИначеЕсли Поле.Имя = "ВходящиеЕстьОтвет" 
			И ТипЗнч(Ссылка) = Тип("СправочникСсылка.ДокументыРеализацииПолномочийНалоговыхОрганов") 
			И Элемент.ТекущиеДанные.ЕстьОтвет Тогда
			КонтекстЭДОКлиент.НажатиеНаКнопкуПоказатьОтветыПоТребованию(Ссылка);
		ИначеЕсли Поле.Имя = "ВходящиеЕстьКритическиеОшибкиОтправки" И ТекущиеДанные.ЕстьКритическиеОшибкиОтправки Тогда
			ПоказатьКритическиеОшибкиПоСсылке(Ссылка);
		Иначе
			РедактироватьОбъект(Элемент);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВходящиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область КомандыЗакладкиОтчетность

&НаКлиенте
Процедура Создать(Команда)
	
	СоздатьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОтчет(знач ПараметрыФормы = Неопределено)
		
	Если ПараметрыФормы = Неопределено Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация", Организация);
		ПараметрыФормы.Вставить("ДатаНачалаПериодаОтчета", НачалоПериода);
		ПараметрыФормы.Вставить("ДатаКонцаПериодаОтчета", КонецПериода);
		ПараметрыФормы.Вставить("ПредставлениеВидаОтчета",ВидОтчета);
		ПараметрыФормы.Вставить("ИмяФормы","");
	
	КонецЕсли; 
	
	Если ПараметрыФормы.ИмяФормы <> "" Тогда
		
		// Сначала попробуем найти его среди открытых стартовых форм.
		// Необходимо для предотвращения
		// открытия нескольких стартовых форм одного отчета.
		НайденоОкно = Ложь;
		РегламентированнаяОтчетностьКлиент.ВебКлиентНайтиАктивизироватьОкно(ПараметрыФормы.ИмяФормы, ЭтаФорма, НайденоОкно);
		
		Если НайденоОкно <> Неопределено Тогда
			Если НайденоОкно Тогда
			
				Возврат;
			
			КонецЕсли;
		КонецЕсли;

	КонецЕсли; 
			
	ЭтаФорма.ПараметрыВыбораФормыСоздания = Неопределено;
	ОписаниеОповещенияОЗакрытииФормыСозданияОтчета = Новый ОписаниеОповещения("ВыполнитьПослеЗакрытияСозданияОтчета", ЭтотОбъект);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.ФормаСозданияОтчета", ПараметрыФормы, ЭтаФорма,,,, 
				ОписаниеОповещенияОЗакрытииФормыСозданияОтчета, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеЗакрытияСозданияОтчета(Параметр  = Неопределено, ДопПараметр = Неопределено) Экспорт

	Если ЭтаФорма.ПараметрыВыбораФормыСоздания = Неопределено Тогда
		Возврат;	
	КонецЕсли; 
	
	СоздатьОтчет(ЭтаФорма.ПараметрыВыбораФормыСоздания);
			
КонецПроцедуры


&НаКлиенте
Процедура ПереустановитьКомпонентыПечатиМашиночитаемыхФорм(Команда)
	
	КаталогКомпонентыМЧБ = "";
	
	#Если ВебКлиент Тогда
		
		Если НЕ ПодключитьРасширениеРаботыСФайлами() Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ПереустановитьКомпонентыПечатиМашиночитаемыхФормЗавершение", ЭтотОбъект);
			НачатьУстановкуРасширенияРаботыСФайлами(ОписаниеОповещения);
		Иначе
			ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
			
			ДиалогВыбораКаталога.Заголовок = "Выберите каталог для сохранения дистрибутива компоненты печати машиночитаемых форм.";
			
			Если ДиалогВыбораКаталога.Выбрать() Тогда
				КаталогКомпонентыМЧБ = ДиалогВыбораКаталога.Каталог;
			КонецЕсли;
			
			Если КаталогКомпонентыМЧБ = Неопределено
				ИЛИ ПустаяСтрока(КаталогКомпонентыМЧБ)
				ИЛИ КаталогКомпонентыМЧБ = Ложь Тогда	
				Возврат;
			КонецЕсли;
			
			КаталогКомпонентыМЧБ = КаталогКомпонентыМЧБ + "\";
			УстановитьКомпонентуПечати(КаталогКомпонентыМЧБ);
			
		КонецЕсли;
		
	#Иначе
		
		УстановитьКомпонентуПечати(КаталогКомпонентыМЧБ);
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПереустановитьКомпонентыПечатиМашиночитаемыхФормЗавершение(ДополнительныеПараметры) Экспорт
	
	Если НЕ ПодключитьРасширениеРаботыСФайлами() Тогда
		ПоказатьПредупреждение(,НСтр("ru='Не удалось подключить расширение работы с файлами!
		|Установка компоненты печати машиночитаемых форм невозможна.'"));
	Иначе
		ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		
		ДиалогВыбораКаталога.Заголовок = "Выберите каталог для сохранения дистрибутива компоненты печати машиночитаемых форм.";
		
		Если ДиалогВыбораКаталога.Выбрать() Тогда
			КаталогКомпонентыМЧБ = ДиалогВыбораКаталога.Каталог;
		КонецЕсли;
		
		Если КаталогКомпонентыМЧБ = Неопределено
			ИЛИ ПустаяСтрока(КаталогКомпонентыМЧБ)
			ИЛИ КаталогКомпонентыМЧБ = Ложь Тогда	
			Возврат;
		КонецЕсли;
		
		КаталогКомпонентыМЧБ = КаталогКомпонентыМЧБ + "\";
		УстановитьКомпонентуПечати(КаталогКомпонентыМЧБ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКомпонентуПечати(КаталогКомпонентыМЧБ)
	
	ДистрибутивКомпонентыПечатиМашиночитаемыхФорм = Новый СписокЗначений;
	РегламентированнаяОтчетностьВызовСервера.ПолучитьДистрибутивКомпонентыПечатиМашиночитаемыхФорм(ДистрибутивКомпонентыПечатиМашиночитаемыхФорм);
	РегламентированнаяОтчетностьКлиент.УстановитьКомпонентуПечатиМашиночитаемыхФорм(Истина, ДистрибутивКомпонентыПечатиМашиночитаемыхФорм, КаталогКомпонентыМЧБ);
	УправлениеЭУПанельУстановкаКомпонентыПечати();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанные(Команда)
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиИнициализацииКонтекстаЭДО);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ИдентификаторВладельца", УникальныйИдентификатор);
	ОткрытьФорму("Обработка.ДокументооборотСКонтролирующимиОрганами.Форма.ДлительнаяОперация", ПараметрыФормы, ЭтаФорма);
			
	ПодключитьОбработчикОжидания("Подключаемый_ПроизвестиОбменСКонтролирующимОрганами", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроизвестиОбменСКонтролирующимОрганами()
	
	Активизировать();
	ПроизвестиОбменСКонтролирующимОрганами();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьНадписьВремяОбновления()
	
	НадписьВремяОбновления = ОбновитьНадписьВремяОбновления(ДатаПоследнегоОбновления);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбновитьНадписьВремяОбновления(ДатаПоследнегоОбновления)
	
	ДатаПоследнегоОбновления = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ДатаПоследнегоОбновленияСобытий();
	Возврат ЭлектронныйДокументооборотСКонтролирующимиОрганами.ПолучитьНадписьВремяОбновления(ДатаПоследнегоОбновления);
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиИнициализацииКонтекстаЭДО);
		Возврат;
	КонецЕсли;
	
	КонтекстЭДОКлиент.ПолучениеФайловДляИмпортаНачало(УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОнлайнПроверка(Элементы.Отчеты);
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ТекущиеДанные = Элементы.Отчеты.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Ссылка = ТекущиеДанные.РегламентированныйОтчет;
		
		Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ЭлектронныеПредставленияРегламентированныхОтчетов") Тогда
			
			Ссылка = ТекущиеДанные.РегламентированныйОтчет;
			НаименованиеОтчета = ТекущиеДанные.НаименованиеОтчета;
			ВыгрузкаЭлектронногоПредставления(Ссылка, НаименованиеОтчета);
			
		ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			
			Ссылка               = ТекущиеДанные.РегламентированныйОтчет;
			НаименованиеОтчета   = ТекущиеДанные.НаименованиеОтчета;
			ВариантОтчета        = ТекущиеДанные.ВариантОтчета;
			ПредставлениеПериода = ТекущиеДанные.ФинансовыйПериод;
			ОрганизацияСсылка	 = ТекущиеДанные.Организация;
						
			ВыгрузкаРегламентированногоОтчета(Ссылка, ОрганизацияСсылка, НаименованиеОтчета, ВариантОтчета, ПредставлениеПериода);
			
		Иначе
			
			// Остальные виды рег отчетов
			РегламентированнаяОтчетностьКлиент.Выгрузить(Ссылка);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьОтчет(Команда)
	
	ПечатьОтчетности(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьОтчет(Команда)
	
	ТекущиеДанные = Элементы.Отчеты.ТекущиеДанные;
	Закладка = Элементы.Отчеты;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ВыполнениеКомандыОтменено(?(ТекущиеДанные.Свойство("НаименованиеОтчета"), ТекущиеДанные.НаименованиеОтчета, ТекущиеДанные.Наименование), ТекущиеДанные.Организация, Команда.Имя) Тогда
			Возврат;
		КонецЕсли;
		
		// Переопределяем отправку в контролирующий орган
		ВыполнитьСтандартнуюОтправкуОтчета = Истина;
		
		ТекущиеДанныеНаименованиеОтчета = ?(ТекущиеДанные.Свойство("НаименованиеОтчета"), ТекущиеДанные.НаименованиеОтчета, ТекущиеДанные.Наименование);
		
		Если ТекущиеДанныеНаименованиеОтчета = "РСВ-1 ПФР" И ТипЗнч(ТекущиеДанные.РегламентированныйОтчет) <> Тип("СправочникСсылка.ЭлектронныеПредставленияРегламентированныхОтчетов") Тогда
			ОписаниеРСВ_1 = ОписаниеРегОтчета(ТекущиеДанные.РегламентированныйОтчет);
			Если ОписаниеРСВ_1.ВыбраннаяФорма = "ФормаОтчета2015Кв1" Тогда
				ПоказатьПредупреждение(, НСтр("ru='Выгрузка, проверка выгрузки, отправка новой редакции формы будут реализованы в следующих версиях программы.'"));
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		// Обход ошибки платформы.
		Если РегламентированнаяОтчетностьКлиент.ВебБраузер() = "MSIE" Тогда
			Если (ТекущиеДанныеНаименованиеОтчета = "РСВ-1 ПФР" И ТипЗнч(ТекущиеДанные.РегламентированныйОтчет) <> Тип("СправочникСсылка.ЭлектронныеПредставленияРегламентированныхОтчетов"))
				ИЛИ ТекущиеДанныеНаименованиеОтчета = "Декларация по НДС"
				ИЛИ ТекущиеДанныеНаименованиеОтчета = "Бухгалтерская отчетность (с 2011 года)"
				ИЛИ ТекущиеДанныеНаименованиеОтчета = "Бухгалтерская отчетность малых предприятий" Тогда
				ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
					"ru='Для выгрузки (проверки выгрузки, проверки в интернете, отправки) в браузере ""Internet Explorer"" необходимо открыть форму регламентированного отчета ""%1""'"),
					ТекущиеДанныеНаименованиеОтчета);
				ПоказатьПредупреждение(, ТекстПредупреждения);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если ТекущиеДанныеНаименованиеОтчета = "Уведомление о розничных ценах на табачные изделия" Тогда
			ПредупредитьОбОграничениях(Закладка, НСтр("ru = 'Отправка не предусмотрена'"));
			Возврат;
		КонецЕсли;
		
		Если ТекущиеДанныеНаименованиеОтчета = "РСВ-1 ПФР" И ТипЗнч(ТекущиеДанные.РегламентированныйОтчет) <> Тип("СправочникСсылка.ЭлектронныеПредставленияРегламентированныхОтчетов") Тогда
			ОписаниеРСВ_1 = ОписаниеРегОтчета(ТекущиеДанные.РегламентированныйОтчет);
			Если ОписаниеРСВ_1.ДатаКонцаПериодаОтчета >= '20140101' И НЕ (ПерсонифицированныйУчетВедетсяВоВнешнейПрограмме И ОписаниеРСВ_1.ОтчетСтарогоОбразца_20141101) Тогда
				ПоказатьПредупреждение(,НСтр("ru='Внимание! Отправлять в электронном виде форму РСВ-1 необходимо
				|из специализированного рабочего места подготовки квартальной
				|отчетности в ПФР. Отправка прервана.'"));
				Возврат;
			КонецЕсли;
		КонецЕсли;
						
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьВКонтролирующийОрганПереопределяемый(
			ТекущиеДанные.РегламентированныйОтчет, ТекущиеДанные.ВидКонтролирующегоОргана, ТекущиеДанные.КодКонтролирующегоОргана, ВыполнитьСтандартнуюОтправкуОтчета);
			
		// Если отправка была выполнена в переопределяемой процедуре, то стандартную отправку не выполняем
		Если ВыполнитьСтандартнуюОтправкуОтчета Тогда
			Если КонтекстЭДОКлиент = Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиИнициализацииКонтекстаЭДО);
				Возврат;
			КонецЕсли;
			
			Если ТекущиеДанные.НеОтправляетсяВКонтролирующийОрган Тогда
				
				ПредупредитьОбОграничениях(Закладка, НСтр("ru = 'Отправка не предусмотрена'"));

			Иначе
				
				Ссылка = ТекущиеДанные.РегламентированныйОтчет;
				
				КонтролирующийОрган = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ИмяПеречисления(ТекущиеДанные.ВидКонтролирующегоОргана);
				Если ЗначениеЗаполнено(КонтролирующийОрган) Тогда
					
					ПараметрыФормы = Новый Структура("СсылкаНаОтчет", Ссылка);
					ДополнительныеПараметры = Новый Структура();
					ДополнительныеПараметры.Вставить("КонтролирующийОрган", КонтролирующийОрган);
					ДополнительныеПараметры.Вставить("Ссылка", Ссылка);
					ДополнительныеПараметры.Вставить("Организация", ТекущиеДанные.Организация);
					ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьОтчетПодтверждениеОтправкиОтчетаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
					ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ПодтверждениеОтправкиОтчета", ПараметрыФормы,,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
					
				Иначе
					ПоказатьПредупреждение(, НСтр("ru = 'Не указан контролирующий орган. Отправка невозможна'"));
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьОтчетПодтверждениеОтправкиОтчетаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Ссылка = ДополнительныеПараметры.Ссылка;
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект, ДополнительныеПараметры);
		РегламентированнаяОтчетностьКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, Ссылка);
		Возврат;
		
	Иначе
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьОтчетЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Ложь);
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Ссылка = ДополнительныеПараметры.Ссылка;
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьОтчетЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	РегламентированнаяОтчетностьКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьОтчетЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, ДополнительныеПараметры.КонтролирующийОрган, , 
		Истина, ДополнительныеПараметры.Ссылка, ДополнительныеПараметры.Организация);
	
КонецПроцедуры	

&НаКлиенте
Процедура ПечатьОтчетШтрих(Команда)
	
	ПечатьОтчетности(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ТекущиеДанные = Элементы.Отчеты.ТекущиеДанные;
	Закладка = Элементы.Отчеты;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Ссылка = ТекущиеДанные.РегламентированныйОтчет;
		
		Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ЭлектронныеПредставленияРегламентированныхОтчетов") Тогда
			
			ПредупредитьОбОграничениях(Закладка, НСтр("ru = 'Проверка выгрузки не предусмотрена'"));
			Возврат;
			
		ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			
			СтандартнаяОбработка = Истина;
			
			Если ВыполнениеКомандыОтменено(?(ТекущиеДанные.Свойство("НаименованиеОтчета"), ТекущиеДанные.НаименованиеОтчета, ТекущиеДанные.Наименование), ТекущиеДанные.Организация) Тогда
				Возврат;
			КонецЕсли;
			
			ТекущиеДанныеНаименованиеОтчета = ?(ТекущиеДанные.Свойство("НаименованиеОтчета"), ТекущиеДанные.НаименованиеОтчета, ТекущиеДанные.Наименование);
									
			Если ТекущиеДанныеНаименованиеОтчета = "РСВ-1 ПФР" Тогда
				ОписаниеРСВ_1 = ОписаниеРегОтчета(Элементы.Отчеты.ТекущиеДанные.РегламентированныйОтчет);
				Если ОписаниеРСВ_1.ВыбраннаяФорма = "ФормаОтчета2015Кв1" Тогда
					ПоказатьПредупреждение(, НСтр("ru='Выгрузка, проверка выгрузки, отправка новой редакции формы будут реализованы в следующих версиях программы.'"));
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			// Обход ошибки платформы.
			Если РегламентированнаяОтчетностьКлиент.ВебБраузер() = "MSIE" Тогда
				Если ТекущиеДанныеНаименованиеОтчета = "РСВ-1 ПФР"
					ИЛИ ТекущиеДанныеНаименованиеОтчета = "Декларация по НДС"
					ИЛИ ТекущиеДанныеНаименованиеОтчета = "Бухгалтерская отчетность (с 2011 года)"
					ИЛИ ТекущиеДанныеНаименованиеОтчета = "Бухгалтерская отчетность малых предприятий" Тогда
					ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
						"ru='Для выгрузки (проверки выгрузки, проверки в интернете, отправки) в браузере ""Internet Explorer"" необходимо открыть форму регламентированного отчета ""%1""'"),
						ТекущиеДанныеНаименованиеОтчета);
					ПоказатьПредупреждение(, ТекстПредупреждения);
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			Если ТекущиеДанныеНаименованиеОтчета = "РСВ-1 ПФР" Тогда
				ОписаниеРСВ_1 = ОписаниеРегОтчета(Элементы.Отчеты.ТекущиеДанные.РегламентированныйОтчет);
				Если ОписаниеРСВ_1.ДатаКонцаПериодаОтчета >= '20140101' Тогда
					Если НЕ (ПерсонифицированныйУчетВедетсяВоВнешнейПрограмме И ОписаниеРСВ_1.ОтчетСтарогоОбразца_20141101) Тогда
						РегламентированнаяОтчетностьКлиент.ПриПроверкеВыгрузкиРСВ_1ИзЖурналаРеглОтчетов(Ссылка, ОписаниеРСВ_1, СтандартнаяОбработка);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
								
			Если СтандартнаяОбработка Тогда
				
				ДополнительныеПараметры = Новый Структура();
				ДополнительныеПараметры.Вставить("Ссылка", Ссылка);
				
				ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
				
				РегламентированнаяОтчетностьКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, Ссылка);
				Возврат;
				
			КонецЕсли;
			
		Иначе
			
			// Остальные виды отчетов
			ПредупредитьОбОграничениях(Закладка, НСтр("ru = 'Проверка выгрузки не предусмотрена'"));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СписокОтчетов = Новый СписокЗначений;
	СписокОтчетов.Добавить(ДополнительныеПараметры.Ссылка);
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПроверитьРегламентированныеОтчеты(СписокОтчетов) Тогда
		ПоказатьПредупреждение(,НСтр("ru='Проверка прервана!'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьПротоколовОтчетов(Команда)
	
	ТекущиеДанные = Элементы.Отчеты.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Ссылка 								= ТекущиеДанные.РегламентированныйОтчет;
		ВидКонтролирующегоОргана 			= ТекущиеДанные.ВидКонтролирующегоОргана;
		Наименование						= ТекущиеДанные.НаименованиеОтчета;
		НеОтправляетсяВКонтролирующийОрган	= ТекущиеДанные.НеОтправляетсяВКонтролирующийОрган;
		
		ПечатьПротоколовПоСсылке(Элементы.Отчеты, Ссылка, ВидКонтролирующегоОргана, НеОтправляетсяВКонтролирующийОрган, Наименование);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КомандыЗакладкиСверки

&НаКлиенте
Процедура ОтправитьСверку(Команда)
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиИнициализацииКонтекстаЭДО);
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Сверки.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ОтправляемыйОбъект = ТекущиеДанные.Ссылка;
		ТекущаяОрганизация = ТекущиеДанные.Организация;
		//Если запрос уже отправлялся, то повторно отправлять не позволяем
		Если ЕщеНеОтправлялся(ОтправляемыйОбъект) Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьСверкуЗавершение", ЭтотОбъект);
			Если ТипЗнч(ОтправляемыйОбъект) = Тип("ДокументСсылка.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика") Тогда
				КонтекстЭДОКлиент.ОтправкаЗапросаНаИнформационноеОбслуживание(ОтправляемыйОбъект, ТекущаяОрганизация,  ОписаниеОповещения);
			ИначеЕсли ТипЗнч(ОтправляемыйОбъект) = Тип("ДокументСсылка.ЗапросНаИнформационноеОбслуживаниеСтрахователя") Тогда
				КонтекстЭДОКлиент.ОтправкаЗапросаИОС(ОтправляемыйОбъект, ТекущаяОрганизация, ОписаниеОповещения);
			Иначе
				КонтекстЭДОКлиент.ОбъектЗаполненКорректно(ОтправляемыйОбъект);
			КонецЕсли;
		Иначе
			ПоказатьПредупреждение(, НСтр("ru = 'Запрос на сверку уже отправлен'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСверкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Элементы.Сверки.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПредставлениеАктовСверкиРасчетов(Команда)
	СоздатьСверку(ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеАктовСверкиРасчетов"));
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПредставлениеВыпискиОперацийИзКарточкиРасчетыСБюджетом(Команда)
	СоздатьСверку(ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеВыпискиОперацийИзКарточкиРасчетыСБюджетом"));
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПредставлениеПеречняБухгалтерскойИНалоговойОтчетности(Команда)
	СоздатьСверку(ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеПеречняБухгалтерскойИНалоговойОтчетности"));
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПредставлениеСправкиОСостоянииРасчетовСБюджетом(Команда)
	СоздатьСверку(ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеСправкиОСостоянииРасчетовСБюджетом"));
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПредставлениеСправкиОбИсполненииОбязанностейПоУплате(Команда)
	СоздатьСверку(ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеСправкиОбИсполненииОбязанностейПоУплате"));
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСверкаФИОиСНИЛС(Команда)
	СоздатьСверку(ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОС.СверкаФИОиСНИЛС"));
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСправкаОСостоянииРасчетов(Команда)
	СоздатьСверку(ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОС.СправкаОСостоянииРасчетов"));
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьСверку(Команда)
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиИнициализацииКонтекстаЭДО);
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Сверки.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		ОтправляемыйОбъект = ТекущиеДанные.Ссылка;

		Если ТипЗнч(ОтправляемыйОбъект) = Тип("ДокументСсылка.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика") Тогда
			КонтекстЭДОКлиент.ВыгрузитьЗапросИОНВФайл(ОтправляемыйОбъект, УникальныйИдентификатор);
		Иначе
			КонтекстЭДОКлиент.ВыгрузитьЗапросИОСВФайл(ОтправляемыйОбъект, УникальныйИдентификатор);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КомандыЗакладкиЕГРЮЛ

&НаКлиенте
Процедура СоздатьЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП(Команда)
	
	СоздатьНовыйЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП(Команда)
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиИнициализацииКонтекстаЭДО);
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ЕГРЮЛ.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ОтправляемыйОбъект = ТекущиеДанные.Ссылка;
		ТекущаяОрганизация = ТекущиеДанные.Организация;
		//Если запрос уже отправлялся, то повторно отправлять не позволяем
		Если ЕщеНеОтправлялся(ОтправляемыйОбъект) Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЗапросНаВыпискуИзЕГРЮЛ_ЕГРИПЗавершение", ЭтотОбъект);
			КонтекстЭДОКлиент.ОтправкаЗапросаНаВыпискуИзЕГР(ОтправляемыйОбъект, ТекущаяОрганизация, ОписаниеОповещения);
		Иначе
			ПоказатьПредупреждение(, НСтр("ru = 'Запрос уже отправлен'"));
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗапросНаВыпискуИзЕГРЮЛ_ЕГРИПЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Элементы.ЕГРЮЛ.Обновить();
	
КонецПроцедуры

#КонецОбласти

#Область КомандыЗакладкиПисьма

&НаКлиенте
Процедура СоздатьИсходящееПисьмо(Команда)
	
	СоздатьНовоеИсходящееПисьмо();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОписьИсходящихДокументов(Команда)
	
	СоздатьНовуюОписьИсходящихДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПисьма(Команда)
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиИнициализацииКонтекстаЭДО);
		Возврат;
	КонецЕсли;
 
	ТекущиеДанные = Элементы.Письма.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ОтправляемыйОбъект = ТекущиеДанные.Ссылка;
		ТекущаяОрганизация = ТекущиеДанные.Организация;
		//Если письмо уже отправлялось, то повторно отправлять не позволяем
		Если ЕщеНеОтправлялся(ОтправляемыйОбъект) Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьПисьмаЗавершение", ЭтотОбъект);
			
			Если ТипЗнч(ОтправляемыйОбъект) = Тип("СправочникСсылка.ПерепискаСКонтролирующимиОрганами") Тогда
				
				ВидКонтролирующегоОргана = ТекущиеДанные.ВидКонтролирующегоОргана;
				Если ВидКонтролирующегоОргана = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС") Тогда
					КонтекстЭДОКлиент.ОтправкаНеформализованногоДокументаВФНС(ОтправляемыйОбъект, ТекущаяОрганизация, ОписаниеОповещения);
				ИначеЕсли ВидКонтролирующегоОргана = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ПФР") Тогда
					КонтекстЭДОКлиент.ОтправкаНеформализованногоДокументаВПФР(ОтправляемыйОбъект, ТекущаяОрганизация, ОписаниеОповещения);
				ИначеЕсли ВидКонтролирующегоОргана = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСГС") Тогда
					КонтекстЭДОКлиент.ОтправкаНеформализованногоДокументаВФСГС(ОтправляемыйОбъект, ТекущаяОрганизация, ОписаниеОповещения);
				Иначе
					КонтекстЭДОКлиент.ОбъектЗаполненКорректно(ОтправляемыйОбъект);
				КонецЕсли;
			Иначе
				КонтекстЭДОКлиент.ОтправкаОписиИсходящихДокументовВФНС(ОтправляемыйОбъект, ТекущаяОрганизация, УникальныйИдентификатор,,ОписаниеОповещения);
			КонецЕсли;
		Иначе
			ПоказатьПредупреждение( , НСтр("ru = 'Письмо уже отправлено'"));
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПисьмаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОбработкаОповещения("Завершение отправки в контролирующий орган", , Результат);
	
КонецПроцедуры

#КонецОбласти

#Область КомандыЗакладкиУведомления

&НаКлиенте
Процедура СоздатьУведомление(Команда)
	
	СоздатьНовоеУведомление();
		
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьУведомления(Команда)
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиИнициализацииКонтекстаЭДО);
		Возврат;
	КонецЕсли;
	
	Закладка 		= Элементы.Уведомления;
	ТекущиеДанные 	= Элементы.Уведомления.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Ссылка 			= ТекущиеДанные.Ссылка;
		ТипыСсылки 		= ТипЗнч(Ссылка);
		
		Если ТекущиеДанные.НеОтправляетсяВКонтролирующийОрган Тогда
			
			ПредупредитьОбОграничениях(Закладка, НСтр("ru = 'Отправка не предусмотрена'"));
			
		Иначе
			
			ПараметрыФормы = Новый Структура("СсылкаНаОтчет", Ссылка);
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("ТипыСсылки", ТипыСсылки);
			ДополнительныеПараметры.Вставить("ВидКонтролирующегоОргана", ТекущиеДанные.ВидКонтролирующегоОргана);
			ДополнительныеПараметры.Вставить("Ссылка", Ссылка);
			ДополнительныеПараметры.Вставить("Организация", ТекущиеДанные.Организация);
			ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьУведомленияПодтверждениеОтправкиОтчетаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ПодтверждениеОтправкиОтчета", ПараметрыФормы,,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.Уведомления.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьУведомленияПодтверждениеОтправкиОтчетаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	ТипыСсылки 					= ДополнительныеПараметры.ТипыСсылки;
	ВидКонтролирующегоОргана 	= ДополнительныеПараметры.ВидКонтролирующегоОргана;
	Ссылка 						= ДополнительныеПараметры.Ссылка;
	ОрганизацияВДокументе 		= ДополнительныеПараметры.Организация;
	
	Если ТипыСсылки = Тип("ДокументСсылка.УведомлениеОСпецрежимахНалогообложения") 
		ИЛИ ТипыСсылки = Тип("СправочникСсылка.ЭлектронныеПредставленияРегламентированныхОтчетов") Тогда
		// Это уведомления из БРО или электронное представление реестра ФСС
		
		КонтролирующийОрган = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ИмяПеречисления(ВидКонтролирующегоОргана);
		
		РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, КонтролирующийОрган, , 
			Истина, Ссылка, ОрганизацияВДокументе);
		
	Иначе
		
		// Это объекты из ЗУПа
		КонтролирующийОрган = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ИмяПеречисления(ВидКонтролирующегоОргана);
		РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, КонтролирующийОрган, , 
			Истина, Ссылка, ОрганизацияВДокументе);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеУведомления(Команда)
	
	ОнлайнПроверка(Элементы.Уведомления);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьУведомлений(Команда)
	
	ТекущиеДанные = Элементы.Уведомления.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		УведомлениеДляПечати = ТекущиеДанные.Ссылка;
		Если Не ЗначениеЗаполнено(УведомлениеДляПечати) Тогда 
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(УведомлениеДляПечати) = Тип("ДокументСсылка.УведомлениеОСпецрежимахНалогообложения") Тогда
		
			МассивПечати = Новый Массив;
			МассивПечати.Добавить(УведомлениеДляПечати);
			
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
				"Документ.УведомлениеОСпецрежимахНалогообложения",
				"Уведомление", МассивПечати, Неопределено);
				
		ИначеЕсли ТипЗнч(УведомлениеДляПечати) = Тип("СправочникСсылка.ЭлектронныеПредставленияРегламентированныхОтчетов") Тогда
			
			// Печать электронного представления
			Ссылка 			= ТекущиеДанные.Ссылка;
			Наименование 	= ТекущиеДанные.Наименование;
			
			ПечатьЭлектронногоПредставления(Ссылка, Наименование);
			
		Иначе
			
			СведенияПоОбъекту = РегламентированнаяОтчетностьВызовСервера.СведенияПоОбъектуНеВходящемуВБРО(УведомлениеДляПечати);
			Если СведенияПоОбъекту <> Неопределено Тогда // это объект, не входящий в БРО
				НапечататьОбъектНеВходящийВБРО(УведомлениеДляПечати, СведенияПоОбъекту);
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьУведомления(Команда)
	
	ТекущиеДанные = Элементы.Уведомления.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		УведомлениеДляВыгрузки = ТекущиеДанные.Ссылка;
		Если Не ЗначениеЗаполнено(УведомлениеДляВыгрузки) Тогда 
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(УведомлениеДляВыгрузки) = Тип("ДокументСсылка.УведомлениеОСпецрежимахНалогообложения") Тогда
			
			ВыгружаемыеДанные = СформироватьXMLНаСервере(УникальныйИдентификатор, УведомлениеДляВыгрузки);
			Если ВыгружаемыеДанные <> Неопределено Тогда 
				РегламентированнаяОтчетностьКлиент.ВыгрузитьФайлы(ВыгружаемыеДанные);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(УведомлениеДляВыгрузки) = Тип("СправочникСсылка.ЭлектронныеПредставленияРегламентированныхОтчетов") Тогда
			
			Наименование = ТекущиеДанные.Наименование;
			ВыгрузкаЭлектронногоПредставления(УведомлениеДляВыгрузки, Наименование);
				
		Иначе
				
			РегламентированнаяОтчетностьКлиент.ВыгрузитьПереопределяемый(УведомлениеДляВыгрузки);
				
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьПротоколовУведомлений(Команда)
	
	ТекущиеДанные = Элементы.Уведомления.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Ссылка 								= ТекущиеДанные.Ссылка;
		ВидКонтролирующегоОргана 			= ТекущиеДанные.ВидКонтролирующегоОргана;
		Наименование						= ТекущиеДанные.Наименование;
		НеОтправляетсяВКонтролирующийОрган	= ТекущиеДанные.НеОтправляетсяВКонтролирующийОрган;
		
		ПечатьПротоколовПоСсылке(Элементы.Уведомления, Ссылка, ВидКонтролирующегоОргана, НеОтправляетсяВКонтролирующийОрган, Наименование);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КомандыЗакладкиВходящие

&НаКлиенте
Процедура СоздатьОтвет(Команда)
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиИнициализацииКонтекстаЭДО);
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Входящие.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Ссылка = ТекущиеДанные.Ссылка;
		Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ПерепискаСКонтролирующимиОрганами") Тогда
			
			КонтекстЭДОКлиент.СоздатьПисьмоОтвет(Ссылка);
			
		ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ДокументыРеализацииПолномочийНалоговыхОрганов") Тогда
			
			ЭтоТребование = КонтекстЭДОКлиент.ЭтоТребованиеОПредставленииДокументов(Ссылка);
			Если ЭтоТребование Тогда
				КонтекстЭДОКлиент.СоздатьИсходящуюОписьПоОснованию(Ссылка);
			Иначе
				КонтекстЭДОКлиент.СоздатьПисьмоОтветНаУведомление(Ссылка);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ТранспортноеСообщение") Тогда
			
			ТекстПредупреждения = НСтр("ru = 'Создание ответа на это письмо не предусмотрено'");
			ПоказатьПредупреждение(,ТекстПредупреждения);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КомандыЗакладкиНастройки

&НаКлиенте
Процедура ПроиндексироватьОбъекты(Команда)
	
	ДописатьОбъектыОтсутствующиеВРегистре(Истина);
	УправлениеЭУ(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНастройкиМеханизмаОнлайнСервисовРОНажатие(Элемент)
	
	ОткрытьФорму("Обработка.ОнлайнСервисыРегламентированнойОтчетности.Форма.НастройкиМеханизмаОнлайнСервисов");
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьИнформацияОбОбновленияхНажатие(Элемент)
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ОткрытьФормуДоступныхОбновленийРО();
	
КонецПроцедуры

#КонецОбласти

#Область КомандыЗакладкиСервисы

&НаКлиенте
Процедура СервисНажатие(Элемент)
	
	ПерейтиПоНавигационнойСсылке(Элемент.Подсказка);
	
КонецПроцедуры

&НаКлиенте
Процедура ФНССервис(Элемент)
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиИнициализацииКонтекстаЭДО);
		Возврат;
	КонецЕсли;
	
	КонтекстЭДОКлиент.ПерейтиПоСсылкеВИнтернетЭксплорере(Элемент.Подсказка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИОНСервисНажатие(Элемент)
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиИнициализацииКонтекстаЭДО);
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.СервисИОНОнлайн");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПометитьНовыеСобытияПросмотренными()

	СписокСсылок = Новый Массив;
	Для Каждого СтрокаСобытие Из Новое.ПолучитьЭлементы() Цикл
		Если ЗначениеЗаполнено(СтрокаСобытие.Ссылка) Тогда
			Если СтрокаСобытие.Группа = ПредопределенноеЗначение("Перечисление.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ПолученныеСообщения")
				И Не СтрокаСобытие.НеПрочитано
				ИЛИ СтрокаСобытие.Группа <> ПредопределенноеЗначение("Перечисление.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.НезавершенныеОтправки") Тогда
				СписокСсылок.Добавить(СтрокаСобытие.Ссылка);
				СтрокаСобытие.НеПрочитано = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПометитьНовыеСобытияПросмотреннымиНаСервере(СписокСсылок);
	ОбновитьКоличествоНовых(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПометитьНовыеСобытияПросмотреннымиНаСервере(СписокСсылок)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганами.ПометитьНовыеСобытияПросмотренными(СписокСсылок);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьКоличествоНовых(Форма)
	
	Форма.КоличествоНовых = 0;
	
	КоличествоПолученныеСообщения = 0;
	КоличествоОбработанныеЗапросы = 0;
	КоличествоЗавершенныеОтправки = 0;
	
	СтрокаБлокПолученныеСообщения = Неопределено;
	СтрокаБлокОбработанныеЗапросы = Неопределено;
	СтрокаБлокЗавершенныеОтправки = Неопределено;
	
	СтрокиДерева = Форма.Новое.ПолучитьЭлементы();
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если СтрокаДерева.Группа = ПредопределенноеЗначение("Перечисление.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ПолученныеСообщения") Тогда
			Если СтрокаДерева.ЭтоЗаголовокБлока Тогда
				СтрокаБлокПолученныеСообщения = СтрокаДерева;
			ИначеЕсли СтрокаДерева.НеПрочитано Тогда
				КоличествоПолученныеСообщения = КоличествоПолученныеСообщения + 1;
			КонецЕсли;
				
		ИначеЕсли СтрокаДерева.Группа = ПредопределенноеЗначение("Перечисление.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ОбработанныеЗапросы") Тогда 
			Если СтрокаДерева.ЭтоЗаголовокБлока Тогда
				СтрокаБлокОбработанныеЗапросы = СтрокаДерева;
			ИначеЕсли СтрокаДерева.НеПрочитано Тогда
				КоличествоОбработанныеЗапросы = КоличествоОбработанныеЗапросы + 1;
			КонецЕсли;
			
		ИначеЕсли СтрокаДерева.Группа = ПредопределенноеЗначение("Перечисление.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ЗавершенныеОтправки") Тогда 
			Если СтрокаДерева.ЭтоЗаголовокБлока Тогда
				СтрокаБлокЗавершенныеОтправки = СтрокаДерева;
			ИначеЕсли СтрокаДерева.НеПрочитано Тогда
				КоличествоЗавершенныеОтправки = КоличествоЗавершенныеОтправки + 1;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Форма.КоличествоНовых = КоличествоПолученныеСообщения + КоличествоОбработанныеЗапросы + КоличествоЗавершенныеОтправки;
	
	Если КоличествоПолученныеСообщения = 0 Тогда
		СтрокаБлокПолученныеСообщения.ЗаголовокБлока = НСтр("ru = 'Полученные сообщения'");	
	Иначе
		СтрокаБлокПолученныеСообщения.ЗаголовокБлока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Полученные сообщения (%1)'"), КоличествоПолученныеСообщения);
	КонецЕсли;
	
	Если КоличествоОбработанныеЗапросы = 0 Тогда
		СтрокаБлокОбработанныеЗапросы.ЗаголовокБлока = НСтр("ru = 'Обработанные запросы'");	
	Иначе
		СтрокаБлокОбработанныеЗапросы.ЗаголовокБлока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Обработанные запросы (%1)'"), КоличествоОбработанныеЗапросы);
	КонецЕсли;

	Если КоличествоЗавершенныеОтправки = 0 Тогда
		СтрокаБлокЗавершенныеОтправки.ЗаголовокБлока = НСтр("ru = 'Завершенные отправки'");	
	Иначе
		СтрокаБлокЗавершенныеОтправки.ЗаголовокБлока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Завершенные отправки (%1)'"), КоличествоЗавершенныеОтправки);
	КонецЕсли;

	// Количество в разделе "Новое"
	Если Форма.КоличествоНовых > 0 Тогда
		ТекстНовое = НСтр("ru = 'Новое (%1)'");
		ТекстНовое = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстНовое, ?(Форма.КоличествоНовых > 99, "99+", Форма.КоличествоНовых));
		Форма.Элементы.ГиперссылкаНовое.Заголовок = ТекстНовое;
	Иначе
		Форма.Элементы.ГиперссылкаНовое.Заголовок = НСтр("ru = 'Новое'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоНовое()
	
	ДеревоНовое = РеквизитФормыВЗначение("Новое");
	ЭлектронныйДокументооборотСКонтролирующимиОрганами.ЗаполнитьДеревоНовое(ДеревоНовое);
	ЗначениеВРеквизитФормы(ДеревоНовое, "Новое");
	
	ДатаПоследнегоОбновления = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ДатаПоследнегоОбновленияСобытий();
	НадписьВремяОбновления = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ПолучитьНадписьВремяОбновления(ДатаПоследнегоОбновления);
	
	ОбновитьКоличествоНовых(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокОтчетовИзРегистраСведений(ПараметрыОтбора = Неопределено)
	
	Запрос = Новый Запрос;
	ТекстЗапроса     = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	                   |	Журнал.НаименованиеОтчета КАК НаименованиеОтчета
	                   |ИЗ
	                   |	РегистрСведений.ЖурналОтчетовСтатусы КАК Журнал
	                   |";
	ТекстУпорядочить = "
	                   |УПОРЯДОЧИТЬ ПО
	                   |	НаименованиеОтчета";
	
	ТекстУсловия = "";
	
	Если НЕ ПараметрыОтбора = Неопределено Тогда
		
		ЕстьПараметры = Ложь;
		
		Если НЕ ПараметрыОтбора.Организация = Справочники.Организации.ПустаяСсылка() Тогда
			ТекстУсловия  = Символы.ПС + "	Журнал.Организация = &Организация ";
			Запрос.УстановитьПараметр("Организация", ПараметрыОтбора.Организация);
			ЕстьПараметры = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыОтбора.НачалоПериода)Тогда
			ТекстУсловия  = ТекстУсловия  + Символы.ПС + "	" + ?(ЕстьПараметры, "И ", "") + "Журнал.ДатаНачала >= &НачалоПериода";
			Запрос.УстановитьПараметр("НачалоПериода", ПараметрыОтбора.НачалоПериода);
			ЕстьПараметры = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыОтбора.КонецПериода)Тогда
			ТекстУсловия  = ТекстУсловия  + Символы.ПС + "	" + ?(ЕстьПараметры, "И ", "") + "Журнал.ДатаОкончания <= &КонецПериода";
			Запрос.УстановитьПараметр("КонецПериода", ПараметрыОтбора.КонецПериода);
			ЕстьПараметры = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстУсловия) Тогда
			ТекстЗапроса = ТекстЗапроса + "ГДЕ " + ТекстУсловия;
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса + ТекстУпорядочить;
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса.ВыгрузитьКолонку("НаименованиеОтчета");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиТаблицуРаздела(Форма, РазделОтчетности)
	
	Форма.Элементы.Разделы.ТекущаяСтраница = Форма.Элементы["Страница" + СтрЗаменить(РазделОтчетности, "Гиперссылка", "")];
	
	ТекущийРаздел = Форма.Элементы.Разделы.ТекущаяСтраница;
	
	// Эсли форма открыта на закладке с таблицей, то активизируем эту таблицу
	Если ТекущийРаздел <> Форма.Элементы.СтраницаНовое И ТекущийРаздел <> Форма.Элементы.СтраницаНастройки Тогда 
		
		ИмяЭлемента = СтрЗаменить(РазделОтчетности, "Гиперссылка", "");
		
		ЭлементТаблица = Форма.Элементы.Найти(ИмяЭлемента);
		Если ЭлементТаблица <> Неопределено Тогда 
			Форма.ТекущийЭлемент = ЭлементТаблица;
		КонецЕсли;
		
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеЭУПанельУстановкаКомпонентыПечати(ОперацияСКомпонентойСовершена = Ложь)
	
	Если РегламентированнаяОтчетностьКлиент.КомпонентаПечатиМашиночитаемыхФормДоступна() Тогда
		Элементы.ПереустановитьКомпонентыПечатиМашиночитаемыхФорм.Заголовок = НСтр("ru = 'Переустановить компоненты печати машиночитаемых форм'");
	Иначе
		Элементы.ПереустановитьКомпонентыПечатиМашиночитаемыхФорм.Заголовок = НСтр("ru = 'Установка компоненты печати'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеЭУГруппаНастройки()
	
	Элементы.ЗаявлениеНаПодключениеК1СОтчетности.Заголовок = 
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ЗаголовокГиперссылкиЗаявления(Организация);
		
	ВебБраузер = РегламентированнаяОтчетностьКлиент.ВебБраузер();
	
	Если ЗначениеЗаполнено(ВебБраузер)
	   И НЕ ВебБраузер = "MSIE" Тогда
	   
	   Элементы.ГруппаДвухмерногоШтрихкода.Видимость = Ложь;
		
	КонецЕсли;			
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныПечатиМашиночитаемыхФормНажатие()
	
	ОткрытьФорму("РегистрСведений.ШаблоныПечатиМашиночитаемыхФорм.Форма.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаXMLШаблоновНажатие(Элемент)
	
	ОткрытьФорму("РегистрСведений.ШаблоныЭВФОтчетовСтатистики.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаФорматаВыгрузкиНажатие(Элемент)
	
	РегламентированнаяОтчетностьКлиент.ПоказатьФормуНастроекФорматаВыгрузкиСтатистическойОтчетностиВЭлектронномВиде(Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналВыгруженныхОтчетовНажатие(Элемент)
	
	ОткрытьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаСписка", , ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СправочникРегламентированныхОтчетовНажатие(Элемент)
	
	ОткрытьФорму("Справочник.РегламентированныеОтчеты.Форма.ФормаСписка");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборы(Форма)
	
	//ОтборДинамическогоСписка = Форма.Отчеты.Отбор;
	ОтборДинамическогоСписка = Форма.Отчеты.КомпоновщикНастроек.Настройки.Отбор;
	
	ОтборДинамическогоСписка.Элементы.Очистить();
	
	ОтборВидОтчета        = ОтборДинамическогоСписка.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОрганизация      = ОтборДинамическогоСписка.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборДатаНачала       = ОтборДинамическогоСписка.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборДатаОкончания1   = ОтборДинамическогоСписка.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборДатаОкончания2   = ОтборДинамическогоСписка.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ОтборВидОтчета.ЛевоеЗначение      = Новый ПолеКомпоновкиДанных("НаименованиеОтчета");
	ОтборОрганизация.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Организация");
	ОтборДатаНачала.ЛевоеЗначение     = Новый ПолеКомпоновкиДанных("ДатаНачала");
	ОтборДатаОкончания1.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаОкончания");
	ОтборДатаОкончания2.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаОкончания");
	
	Если НЕ ЗначениеЗаполнено(Форма.Организация) Тогда
		ОтборОрганизация.Использование = Ложь;
	Иначе
		ОтборОрганизация.Использование  = Истина;
		ОтборОрганизация.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборОрганизация.ПравоеЗначение = Форма.Организация;
	КонецЕсли;
	
	Если Форма.ВидОтчета = "" Тогда
		ОтборВидОтчета.Использование = Ложь;
	Иначе
		ОтборВидОтчета.Использование  = Истина;
		ОтборВидОтчета.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборВидОтчета.ПравоеЗначение = Форма.ВидОтчета;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Форма.ПериодОтчета) Тогда
		ОтборДатаНачала.Использование = Ложь;
		ОтборДатаОкончания1.Использование = Ложь;
		ОтборДатаОкончания2.Использование = Ложь;
	Иначе
		Если ЗначениеЗаполнено(Форма.НачалоПериода) Тогда
			ОтборДатаНачала.Использование      = Истина;
			ОтборДатаНачала.ВидСравнения       = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
			ОтборДатаНачала.ПравоеЗначение     = НачалоГода(Форма.НачалоПериода);
			
			ОтборДатаОкончания1.Использование  = Истина;
			ОтборДатаОкончания1.ВидСравнения   = ВидСравненияКомпоновкиДанных.Больше;
			ОтборДатаОкончания1.ПравоеЗначение = Форма.НачалоПериода;
		Иначе
			ОтборДатаНачала.Использование      = Ложь;
			ОтборДатаОкончания1.Использование  = Ложь;
		КонецЕсли;
		Если ЗначениеЗаполнено(Форма.КонецПериода) Тогда
			ОтборДатаОкончания2.Использование  = Истина;
			ОтборДатаОкончания2.ВидСравнения   = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
			ОтборДатаОкончания2.ПравоеЗначение = Форма.КонецПериода;
		Иначе
			ОтборДатаОкончания2.Использование  = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ОтборДинамическогоСписка.ИдентификаторПользовательскойНастройки = Строка(Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВсеОрганизации()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Организации.Ссылка КАК Организация
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ПометкаУдаления = ЛОЖЬ";

	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаОрганизаций = РезультатЗапроса.Выгрузить();
	
	МассивОрганизаций = ТаблицаОрганизаций.ВыгрузитьКолонку("Организация");
	
	Возврат МассивОрганизаций;
	
КонецФункции

&НаКлиенте
Процедура ПроизвестиОбменСКонтролирующимОрганами()
	
	ВыбранныеОрганизации = ВсеОрганизации();
	
	Если ВыбранныеОрганизации.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Организация не выбрана'"), ,"Организация");
		Возврат;
	КонецЕсли;
	
	ОсуществитьОбменПоВыбраннымОрганизациям(ВыбранныеОрганизации, 0);
		
КонецПроцедуры

&НаКлиенте
Процедура ОсуществитьОбменПоВыбраннымОрганизациям(ВыбранныеОрганизации, НомерОбъекта)

	Если НомерОбъекта + 1 > ВыбранныеОрганизации.Количество() Тогда
		УправлениеЭУ(ЭтаФорма);		
		Оповестить("Завершение обновления");
		Оповестить("Закрыть_ДлительнаяОперация",, УникальныйИдентификатор);
	Иначе
		// Получим очередную организацию для обмена
		ОрганизацияДляОбмена = ВыбранныеОрганизации[НомерОбъекта];
		ДополнительныеПараметры = Новый Структура("ВыбранныеОрганизации, НомерОбъекта", ВыбранныеОрганизации, НомерОбъекта);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОсуществитьОбменПоВыбраннымОрганизациямЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		КонтекстЭДОКлиент.ОсуществитьОбменПоОрганизации(ЭтаФорма, ОрганизацияДляОбмена, ОписаниеОповещения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОсуществитьОбменПоВыбраннымОрганизациямЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВыбранныеОрганизации = ДополнительныеПараметры.ВыбранныеОрганизации;
	НомерОбъекта = ДополнительныеПараметры.НомерОбъекта;
	
	ОсуществитьОбменПоВыбраннымОрганизациям(ВыбранныеОрганизации, НомерОбъекта + 1)
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСверку(ВидУслуги)
		
	Если ТипЗнч(ВидУслуги) = Тип("ПеречислениеСсылка.ВидыУслугПриИОН") Тогда
		// Это запрос ИОН
		ФормаДокумента = "Документ.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.Форма.ФормаДокумента";
		
	Иначе
		// Это запрос ИОС
		ФормаДокумента = "Документ.ЗапросНаИнформационноеОбслуживаниеСтрахователя.Форма.ФормаДокумента";
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", Новый Структура("ВидУслуги, Организация", ВидУслуги, Организация));
	ОткрытьФорму(ФормаДокумента, ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьОбъект(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Ссылка = ТекущиеДанные.Ссылка;
		Если ЗначениеЗаполнено(Ссылка) Тогда
			ПоказатьЗначение(,Ссылка);		
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдалениеОбъект(Таблица)
	
	ТекущиеДанные = Таблица.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Таблица = Элементы.Отчеты Тогда 
		Ссылка = ТекущиеДанные.РегламентированныйОтчет;
	Иначе
		Ссылка = ТекущиеДанные.Ссылка;
	КонецЕсли;
	
	ПометитьНаУдалениеОбъектНаСервере(Ссылка);
	
	// Обновление списка "точечно"
	ПараметрОповещения = Новый Структура(); 
	ПараметрОповещения.Вставить("Ссылка", Ссылка);
	ПараметрОповещения.Вставить("Организация", ТекущиеДанные.Организация);
	Оповестить("Изменение пометки удаления объекта", ПараметрОповещения, Ссылка);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПометитьНаУдалениеОбъектНаСервере(Ссылка)
	
	УдалаяемыйОбъект = Ссылка.ПолучитьОбъект();
	УдалаяемыйОбъект.ПометкаУдаления = НЕ Ссылка.ПометкаУдаления;
	УдалаяемыйОбъект.Записать();
		
КонецПроцедуры

&НаСервере
Функция ЕщеНеОтправлялся(Ссылка)
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	СтатусОтправки = КонтекстЭДОСервер.ПолучитьСтатусОтправкиОбъекта(Ссылка);
	
	Возврат НЕ ЗначениеЗаполнено(СтатусОтправки) ИЛИ СтатусОтправки = Перечисления.СтатусыОтправки.ВКонверте;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекущийРазделФормы(Форма)
	
	Результат = Неопределено;
	
	Если Форма.Элементы.ГиперссылкаНовое.ЦветФона            = Форма.ЦветАктивнойКнопки Тогда
		Результат = Форма.Элементы.ГиперссылкаНовое;
	ИначеЕсли Форма.Элементы.ГиперссылкаОтчеты.ЦветФона      = Форма.ЦветАктивнойКнопки Тогда
		Результат = Форма.Элементы.ГиперссылкаОтчеты;
	ИначеЕсли Форма.Элементы.ГиперссылкаУведомления.ЦветФона = Форма.ЦветАктивнойКнопки Тогда
		Результат = Форма.Элементы.ГиперссылкаУведомления;
	ИначеЕсли Форма.Элементы.ГиперссылкаПисьма.ЦветФона      = Форма.ЦветАктивнойКнопки Тогда
		Результат = Форма.Элементы.ГиперссылкаПисьма;
	ИначеЕсли Форма.Элементы.ГиперссылкаСверки.ЦветФона      = Форма.ЦветАктивнойКнопки Тогда
		Результат = Форма.Элементы.ГиперссылкаСверки;
	ИначеЕсли Форма.Элементы.ГиперссылкаЕГРЮЛ.ЦветФона       = Форма.ЦветАктивнойКнопки Тогда
		Результат = Форма.Элементы.ГиперссылкаЕГРЮЛ;
	ИначеЕсли Форма.Элементы.ГиперссылкаВходящие.ЦветФона    = Форма.ЦветАктивнойКнопки Тогда
		Результат = Форма.Элементы.ГиперссылкаВходящие;
	ИначеЕсли Форма.Элементы.ГиперссылкаСервисы.ЦветФона	 = Форма.ЦветАктивнойКнопки Тогда
		Результат = Форма.Элементы.ГиперссылкаСервисы;
	ИначеЕсли Форма.Элементы.ГиперссылкаНастройки.ЦветФона   = Форма.ЦветАктивнойКнопки Тогда
		Результат = Форма.Элементы.ГиперссылкаНастройки;
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоОрганизацииИВидуДокумента(ДинамическийСписок, ОрганизацияДляОтбора = Неопределено, ВидОбъектаДляОтбора = Неопределено)
	
	ДинамическийСписок.Отбор.Элементы.Очистить();
	ГруппаОтбора = ДинамическийСписок.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	// отбор по организации
	Если ЗначениеЗаполнено(ОрганизацияДляОтбора) Тогда
		ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ПравоеЗначение = ОрганизацияДляОтбора;
	КонецЕсли;

	// отбор по виду сверки
	Если ЗначениеЗаполнено(ВидОбъектаДляОтбора) Тогда
		ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Наименование");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ПравоеЗначение = ВидОбъектаДляОтбора;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВидУведомленияОСпецрежимахНалогообложения(Ссылка)

	Возврат Ссылка.ВидУведомления;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДействияПриИзмененииОтборов(Форма)
	
	УстановитьОтборы(Форма);
	УстановитьОтборПоОрганизацииИВидуДокумента(Форма.Уведомления, 	Форма.Организация, Форма.ПредставлениеВидаУведомления);
	УстановитьОтборПоОрганизацииИВидуДокумента(Форма.Письма, 		Форма.Организация);
	УстановитьОтборПоОрганизацииИВидуДокумента(Форма.Сверки, 		Форма.Организация, Форма.ВидСверки);
	УстановитьОтборПоОрганизацииИВидуДокумента(Форма.ЕГРЮЛ, 		Форма.Организация);
	УстановитьОтборПоОрганизацииИВидуДокумента(Форма.Входящие, 		Форма.Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораВидаУведомления(Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если ТипЗнч(Результат) = Тип("ПеречислениеСсылка.ВидыУведомленийОСпецрежимахНалогообложения") Тогда
			ВидУведомления 					= Результат;
			ПредставлениеВидаУведомления 	= Строка(Результат);
		Иначе
			ВидУведомления 					= Результат.Тип;
			ПредставлениеВидаУведомления 	= Результат.Наименование;
		КонецЕсли;
	КонецЕсли;
	
	ДействияПриИзмененииОтборов(ЭтаФорма);

КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьXMLНаСервере(УникальныйИдентификатор, Объект)
	ДокОбъект = Объект.ПолучитьОбъект();
	Возврат ДокОбъект.ВыгрузитьДокумент(УникальныйИдентификатор);
КонецФункции

&НаСервереБезКонтекста
Функция КоличествоНепрочитанныхВходящихПисем()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	НепрочтеннаяПерепискаСКонтролирующимиОрганами.НепрочтенноеСообщение
		|ИЗ
		|	РегистрСведений.НепрочтеннаяПерепискаСКонтролирующимиОрганами КАК НепрочтеннаяПерепискаСКонтролирующимиОрганами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналОтправокВКонтролирующиеОрганы КАК ЖурналОтправокВКонтролирующиеОрганы
		|		ПО НепрочтеннаяПерепискаСКонтролирующимиОрганами.НепрочтенноеСообщение = ЖурналОтправокВКонтролирующиеОрганы.Ссылка";

	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Возврат ВыборкаДетальныеЗаписи.Количество();
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьКоличествоНепрочитанныхВходящихПисем(Форма)
	
	КоличествоНепрочитанныхВходящихПисем = КоличествоНепрочитанныхВходящихПисем();
	
	НадписьКоличество = "";
	Если КоличествоНепрочитанныхВходящихПисем > 99 Тогда  
		НадписьКоличество = " (99+)";
	ИначеЕсли КоличествоНепрочитанныхВходящихПисем <> 0 Тогда
		НадписьКоличество = " (" + Строка(КоличествоНепрочитанныхВходящихПисем) + ")";
	КонецЕсли;
	
	Форма.Элементы.ГиперссылкаВходящие.Заголовок = "Входящие" + НадписьКоличество;

КонецПроцедуры

&НаКлиенте
Процедура ПечатьОтчетности(ВидПечати)
	
	ТекущиеДанные 	= Элементы.Отчеты.ТекущиеДанные;
	Закладка	 	= Элементы.Отчеты;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Ссылка = ТекущиеДанные.РегламентированныйОтчет;
		
		Если ВидПечати = "ПечатьОтчет" Тогда
			
			Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ЭлектронныеПредставленияРегламентированныхОтчетов") Тогда
				// Печать электронного представления
				Ссылка 				= ТекущиеДанные.РегламентированныйОтчет;
				НаименованиеОтчета 	= ТекущиеДанные.НаименованиеОтчета;
				
				ПечатьЭлектронногоПредставления(Ссылка, НаименованиеОтчета);
				
			ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
				
				// Печать регламентированного отчета
				Ссылка             = ТекущиеДанные.РегламентированныйОтчет;
				НаименованиеОтчета = ТекущиеДанные.НаименованиеОтчета;
				
				ДополнительныеПараметры = Новый Структура();
				ДополнительныеПараметры.Вставить("НаименованиеОтчета", НаименованиеОтчета);
				ДополнительныеПараметры.Вставить("Ссылка", Ссылка);
				
				ОписаниеОповещения = Новый ОписаниеОповещения("ПечатьОтчетностиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
				
				РегламентированнаяОтчетностьКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, Ссылка);
				Возврат;
				
			Иначе
				// Печать объекта, не входящего в БРО
				СведенияПоОбъекту = РегламентированнаяОтчетностьВызовСервера.СведенияПоОбъектуНеВходящемуВБРО(Ссылка);
				Если СведенияПоОбъекту <> Неопределено Тогда
					НапечататьОбъектНеВходящийВБРО(Ссылка, СведенияПоОбъекту);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ВидПечати = "ПечатьОтчетШтрих" Тогда
			
			Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ЭлектронныеПредставленияРегламентированныхОтчетов") Тогда
				// Печать электронного представления
				Ссылка 				= ТекущиеДанные.РегламентированныйОтчет;
				НаименованиеОтчета 	= ТекущиеДанные.НаименованиеОтчета;
				
				ПечатьЭлектронногоПредставления(Ссылка, НаименованиеОтчета);
			ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
				// Печать регламентированного отчета со штрихкодом PDF417
				Ссылка             = ТекущиеДанные.РегламентированныйОтчет;
				НаименованиеОтчета = ТекущиеДанные.НаименованиеОтчета;
				
				Если ВыполнениеКомандыОтменено(?(ТекущиеДанные.Свойство("НаименованиеОтчета"), ТекущиеДанные.НаименованиеОтчета, ТекущиеДанные.Наименование), ТекущиеДанные.Организация) Тогда
					Возврат;
				КонецЕсли;
				
				ПечатьРегламентированногоОтчетаШтрих(Ссылка, НаименованиеОтчета);
			Иначе
				
				// Печать объекта, не входящего в БРО
				ПредупредитьОбОграничениях(Закладка, НСтр("ru = 'Печать со штрихкодом PDF417 не предусмотрена'"));
			
			КонецЕсли;
		
		ИначеЕсли ВидПечати = "ПечатьПротоколы" Тогда
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВыполнениеКомандыОтменено(НаименованиеОтчета, Организация, НаименованиеКоманды = "")
	
	Если (НаименованиеОтчета = "Бухгалтерская отчетность (с 2011 года)"
		ИЛИ НаименованиеОтчета = "Бухгалтерская отчетность малых предприятий"
		ИЛИ НаименованиеОтчета = "Бухгалтерская отчетность СО НКО")
		И НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация) Тогда
		
		Если НаименованиеКоманды = "ОтправитьОтчет" Тогда
			РегламентированнаяОтчетностьКлиент.ПоказатьПредупреждениеОНевозможностиОтправкиОтчета(); 
		Иначе
			РегламентированнаяОтчетностьКлиент.ПоказатьПредупреждениеОНевозможностиВыгрузкиОтчета(); 
		КонецЕсли;
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ПечатьОтчетностиЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПечатьРегламентированногоОтчета(ДополнительныеПараметры.Ссылка, ДополнительныеПараметры.НаименованиеОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЭлектронногоПредставления(Ссылка, Наименование)
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиИнициализацииКонтекстаЭДО);
		Возврат;
	КонецЕсли;
 
	КонтекстЭДОКлиент.ПечатьЭлектронногоПредставления(Ссылка, , Наименование);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьРегламентированногоОтчета(Ссылка, Наименование)
	
	СтандартнаяОбработка = Истина;
	
	Если Наименование = "РСВ-1 ПФР" Тогда
		
		ОписаниеРСВ_1 = ОписаниеРегОтчета(Ссылка);
		Если ОписаниеРСВ_1.ДатаКонцаПериодаОтчета >= '20140101' Тогда
			Если НЕ (ПерсонифицированныйУчетВедетсяВоВнешнейПрограмме И ОписаниеРСВ_1.ОтчетСтарогоОбразца_20141101) Тогда
				РегламентированнаяОтчетностьКлиент.ПриПечатиРСВ_1ИзЖурналаРеглОтчетов(Ссылка, ОписаниеРСВ_1, СтандартнаяОбработка);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтандартнаяОбработка Тогда
		
		СписокОтчетов = Новый СписокЗначений;
		СписокОтчетов.Добавить(Ссылка);
		
		РегламентированнаяОтчетностьКлиент.НапечататьОтчеты(СписокОтчетов, "ПоказатьБланк");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьРегламентированногоОтчетаШтрих(Ссылка, Наименование)
	
	ФормаОтчета = Неопределено; // Обход ошибки в платформе.
	
	ПредставлениеДокументаРеглОтч = "";
	
	ФормаОтчета = РегламентированнаяОтчетностьКлиент.ИнициализацияОтчета(Ссылка, ПредставлениеДокументаРеглОтч);
	Если ФормаОтчета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ФормаОтчета.СтруктураРеквизитовФормы.Свойство("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417")
	   И Найти(ФормаОтчета.ИмяФормы, "РегламентированныйОтчетСтатистика") = 0 Тогда
		РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФорму(ФормаОтчета, "ПоказатьСДвухмернымШтрихкодомPDF417");
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Для отчета """ + Наименование + """ не предусмотрена печать бланка формы с двухмерным штрихкодом PDF417!'");
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаЭлектронногоПредставления(Ссылка, НаименованиеОтчета)
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиИнициализацииКонтекстаЭДО);
		Возврат;
	КонецЕсли;
	
	КонтекстЭДОКлиент.ВыгрузкаЭлектронногоПредставления(Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаРегламентированногоОтчета(Ссылка, ОрганизацияСсылка, НаименованиеОтчета, ВариантОтчета, ПредставлениеПериода);
	
	Это_РСВ_1_2014_И_ЗагруженыВнешниеСведенияРаздела6 = Ложь;
	
	СтандартнаяОбработка = Истина;
	
	Если ВыполнениеКомандыОтменено(НаименованиеОтчета, ОрганизацияСсылка) Тогда
		Возврат;
	КонецЕсли;
			
	Если НаименованиеОтчета = "РСВ-1 ПФР" Тогда
		ОписаниеРСВ_1 = ОписаниеРегОтчета(Ссылка);
		Если ОписаниеРСВ_1.ВыбраннаяФорма = "ФормаОтчета2015Кв1" Тогда
			ПоказатьПредупреждение(, НСтр("ru='Выгрузка, проверка выгрузки, отправка новой редакции формы будут реализованы в следующих версиях программы.'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Обход ошибки платформы.
	Если РегламентированнаяОтчетностьКлиент.ВебБраузер() = "MSIE" Тогда
		Если НаименованиеОтчета = "РСВ-1 ПФР"
			ИЛИ НаименованиеОтчета = "Декларация по НДС"
			ИЛИ НаименованиеОтчета = "Бухгалтерская отчетность (с 2011 года)"
			ИЛИ НаименованиеОтчета = "Бухгалтерская отчетность малых предприятий" Тогда
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru='Для выгрузки (проверки выгрузки, проверки в интернете, отправки) в браузере ""Internet Explorer"" необходимо открыть форму регламентированного отчета ""%1""'"),
				НаименованиеОтчета);
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если НаименованиеОтчета = "РСВ-1 ПФР" Тогда
		
		ОписаниеРСВ_1 = ОписаниеРегОтчета(Ссылка);
		
		Если ОписаниеРСВ_1.ДатаКонцаПериодаОтчета >= '20140101' Тогда
			
			Если НЕ (ПерсонифицированныйУчетВедетсяВоВнешнейПрограмме И ОписаниеРСВ_1.ОтчетСтарогоОбразца_20141101) Тогда
				РегламентированнаяОтчетностьКлиент.ПриВыгрузкеРСВ_1ИзЖурналаРеглОтчетов(
					Ссылка, ОписаниеРСВ_1, СтандартнаяОбработка);
			КонецЕсли;
			
			Если ОписаниеРСВ_1.ЗагруженыВнешниеСведенияРаздела6 Тогда
				Это_РСВ_1_2014_И_ЗагруженыВнешниеСведенияРаздела6 = Истина;
			КонецЕсли;
			
		Иначе
			
			Если СокрЛП(ВариантОтчета) = "П"
				И НЕ РегламентированнаяОтчетностьКлиентСерверПереопределяемый.ИмяОсновнойФормыРСВ1() = "ОсновнаяФорма" Тогда
				
				ПоказатьПредупреждение(,НСтр("ru='Внимание! Выгружать в электронном виде первичную форму РСВ-1 необходимо
				|в комплекте с документами квартальной отчетности персонифицированного
				|учета из специализированного рабочего места подготовки квартальной
				|отчетности в ПФР. Выгрузка прервана.'"));
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НаименованиеОтчета = "Статистика: Форма П-1" Тогда
			
		Если НЕ ПроверитьВозможностьВыгрузкиП1ИзФормыОтчетностьНаСервере(Ссылка) Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для отчета ""Статистика: Форма П-1 за %1"" не выбрано Приложение №3.
				|Необходимо сначала осуществить выгрузку из формы отчета! Выгрузка прервана.'"), ПредставлениеПериода);
			Сообщение.Сообщить();
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НаименованиеОтчета = "Статистика: Форма П-1 Приложение 3" Тогда 
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Выгрузка отчета ""Статистика: форма П-1 (приложение 3) за %1"" производится из формы П-1 за соответствующий период.'"), ПредставлениеПериода);
		Сообщение.Сообщить();
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
	Если СтандартнаяОбработка Тогда
	
		СписокОтчетов = Новый СписокЗначений;
		СписокОтчетов.Добавить(Ссылка);
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("СписокОтчетов", СписокОтчетов);
		ДополнительныеПараметры.Вставить("Это_РСВ_1_2014_И_ЗагруженыВнешниеСведенияРаздела6", Это_РСВ_1_2014_И_ЗагруженыВнешниеСведенияРаздела6);
			
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузкаРегламентированногоОтчетаПослеПодключенияРасширенияРаботыСФайлами", ЭтотОбъект, ДополнительныеПараметры);
	
		НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаРегламентированногоОтчетаПослеПодключенияРасширенияРаботыСФайлами(Подключено, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Вставить("ПодключеноРасширениеРаботыСФайлами", Подключено);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузкаРегламентированногоОтчетаПродолжение", ЭтотОбъект, ДополнительныеПараметры);
	
	ТекстВопроса = "Выгрузить выбранный отчет?";
	ПоказатьВопрос(ОписаниеОповещения, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru='%1'"), ТекстВопроса), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаРегламентированногоОтчетаПродолжение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	СписокОтчетов = ДополнительныеПараметры.СписокОтчетов;

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузкаРегламентированногоОтчетаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		РегламентированнаяОтчетностьКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, СписокОтчетов[0].Значение)
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаРегламентированногоОтчетаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СписокОтчетов = ДополнительныеПараметры.СписокОтчетов;
	
	ВВебКлиентеСохранятьФайлВыгрузкиИнтерактивно = Истина;
	
	Если ДополнительныеПараметры.Это_РСВ_1_2014_И_ЗагруженыВнешниеСведенияРаздела6
		И ДополнительныеПараметры.ПодключеноРасширениеРаботыСФайлами Тогда
		ВВебКлиентеСохранятьФайлВыгрузкиИнтерактивно = Ложь;
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ВыгрузитьОтчеты(
		СписокОтчетов, , , ВВебКлиентеСохранятьФайлВыгрузкиИнтерактивно) Тогда
		ПоказатьПредупреждение(,НСтр("ru='Выгрузка прервана!'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьВозможностьВыгрузкиП1ИзФормыОтчетностьНаСервере(ОтчетСсылка)
	
	Перем ВыбранныйОтчетПриложение3;
	
	ДанныеОтчетаХЗ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОтчетСсылка, "ДанныеОтчета");
	ДанныеВыгружаемогоОтчета = ДанныеОтчетаХЗ.Получить();
	
	Если НЕ ДанныеВыгружаемогоОтчета.Свойство("ВыбранныйОтчетПриложение3", ВыбранныйОтчетПриложение3) Тогда
		Возврат Ложь;
	ИначеЕсли ВыбранныйОтчетПриложение3 = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьФормуСтатусовОтправкиИзСписка(Элемент)
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиИнициализацииКонтекстаЭДО);
		Возврат;
	КонецЕсли;
	
	КонтекстЭДОКлиент.ПоказатьФормуСтатусовОтправкиИзСписка(Элемент);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОписаниеРегОтчета(ДокументРегОтчет)
	
	ОписаниеРегОтч = Новый Структура;
	
	ОбъектРегОтч = ДокументРегОтчет.ПолучитьОбъект();
	
	ОписаниеРегОтч.Вставить("Организация",             ОбъектРегОтч.Организация);
	ОписаниеРегОтч.Вставить("ДатаНачалаПериодаОтчета", ОбъектРегОтч.ДатаНачала);
	ОписаниеРегОтч.Вставить("ДатаКонцаПериодаОтчета",  ОбъектРегОтч.ДатаОкончания);
	ОписаниеРегОтч.Вставить("КорректирующаяФорма",     ОбъектРегОтч.Вид > 0);
	ОписаниеРегОтч.Вставить("ВыбраннаяФорма",          СокрЛП(ОбъектРегОтч.ВыбраннаяФорма));
	
	Если СокрЛП(ОбъектРегОтч.НаименованиеОтчета) = "РСВ-1 ПФР" Тогда
		
		Если ОписаниеРегОтч.ВыбраннаяФорма = "ФормаОтчета2015Кв1" Тогда
			
			ОписаниеРегОтч.Вставить("ОтчетСтарогоОбразца_20141101", Ложь);
			
			ЗагруженыВнешниеСведенияРаздела6 = Неопределено;
			ОбъектРегОтч.ДанныеОтчета.Получить().Свойство("ВнешниеСведенияРаздела6", ЗагруженыВнешниеСведенияРаздела6);
			ЗагруженыВнешниеСведенияРаздела6 = ?(ЗагруженыВнешниеСведенияРаздела6 = Неопределено, Ложь, Истина);
			ОписаниеРегОтч.Вставить("ЗагруженыВнешниеСведенияРаздела6", ЗагруженыВнешниеСведенияРаздела6);
			
		ИначеЕсли ОписаниеРегОтч.ВыбраннаяФорма = "ФормаОтчета2014Кв1" Тогда
			
			ОтчетСтарогоОбразца_20141101 = Ложь;
			ОбъектРегОтч.ДанныеОтчета.Получить().Свойство("ОтчетСтарогоОбразца_20141101", ОтчетСтарогоОбразца_20141101);
			ОтчетСтарогоОбразца_20141101 = ?(ОтчетСтарогоОбразца_20141101 = Неопределено, Истина, ОтчетСтарогоОбразца_20141101);
			ОписаниеРегОтч.Вставить("ОтчетСтарогоОбразца_20141101", ОтчетСтарогоОбразца_20141101);
			
			ЗагруженыВнешниеСведенияРаздела6 = Неопределено;
			ОбъектРегОтч.ДанныеОтчета.Получить().Свойство("ВнешниеСведенияРаздела6", ЗагруженыВнешниеСведенияРаздела6);
			ЗагруженыВнешниеСведенияРаздела6 = ?(ЗагруженыВнешниеСведенияРаздела6 = Неопределено, Ложь, Истина);
			ОписаниеРегОтч.Вставить("ЗагруженыВнешниеСведенияРаздела6", ЗагруженыВнешниеСведенияРаздела6);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОписаниеРегОтч;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПротоколЕсть(Отправка)
	
	Если ЗначениеЗаполнено(Отправка) Тогда
		Возврат ЗначениеЗаполнено(Отправка.Протокол.Получить());
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура НапечататьОбъектНеВходящийВБРО(Ссылка, СведенияПоОбъекту)
	
	МакетПечати = СведенияПоОбъекту.ИмяОсновногоМакетаДляПечати;
	
	СтандартнаяПечатьОбъекта = Истина;
	РегламентированнаяОтчетностьКлиент.ПечатьПереопределяемый(Ссылка, МакетПечати, СтандартнаяПечатьОбъекта);
	
	Если СтандартнаяПечатьОбъекта Тогда
		
		Если МакетПечати <> Неопределено Тогда
			
			ИмяМенеджера = ИмяМенеджераПечати(Ссылка);
			
			МассивПечати = Новый Массив;
			МассивПечати.Добавить(Ссылка);
			
			Попытка
				УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(ИмяМенеджера, МакетПечати, МассивПечати, Неопределено);
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'При печати возникла ошибка'"));
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяМенеджераПечати(Ссылка)
	
	Возврат Ссылка.Метаданные().ПолноеИмя();
	
КонецФункции

&НаКлиенте
Процедура ПечатьПротоколовПоСсылке(Закладка, Ссылка, ВидКонтролирующегоОргана, НеОтправляетсяВКонтролирующийОрган, НаименованиеОтчета)
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиИнициализацииКонтекстаЭДО);
		Возврат;
	КонецЕсли;
	
	Если НеОтправляетсяВКонтролирующийОрган Тогда
		ПредупредитьОбОграничениях(Закладка, НСтр("ru = 'Печать протоколов не предусмотрена'"));
	Иначе
		
		ПоследнийЦиклИлиОтправка = Неопределено;
		ПротоколЕсть = Ложь;
		
		// ФСС
		Если ВидКонтролирующегоОргана = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСС") Тогда
			ПоследнийЦиклИлиОтправка = КонтекстЭДОКлиент.ПолучитьПоследнююОтправкуОтчетаВФСС(Ссылка);
			ПротоколЕсть 			 = ПротоколЕсть(ПоследнийЦиклИлиОтправка);
		// ФСРАР
		ИначеЕсли ВидКонтролирующегоОргана = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСРАР") Тогда	
			ПоследнийЦиклИлиОтправка = КонтекстЭДОКлиент.ПолучитьПоследнююОтправкуОтчетаВФСРАР(Ссылка);
			ПротоколЕсть 			 = ПротоколЕсть(ПоследнийЦиклИлиОтправка);
		// РПН
		ИначеЕсли ВидКонтролирующегоОргана = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.РПН") Тогда	
			ПоследнийЦиклИлиОтправка = КонтекстЭДОКлиент.ПолучитьПоследнююОтправкуОтчетаВРПН(Ссылка);
			ПротоколЕсть 			 = ПротоколЕсть(ПоследнийЦиклИлиОтправка);
		// Остальные контролирующие органы
		Иначе
			ПоследнийЦиклИлиОтправка = КонтекстЭДОКлиент.ПолучитьПоследнийЦиклОбмена(Ссылка);
			ПротоколЕсть 			 = Истина;
		КонецЕсли;
		
		// Предупреждаем об ошибке, если нет протокола  
		Если НЕ ЗначениеЗаполнено(ПоследнийЦиклИлиОтправка) ИЛИ НЕ ПротоколЕсть Тогда
			КонтекстЭДОКлиент.ПредупредитьОбОтсутствииПротокола();
			Возврат;
		КонецЕсли;
		
		// ФСС
		Если ВидКонтролирующегоОргана = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСС") Тогда
			КонтекстЭДОКлиент.ПоказатьПротоколОбработкиПоСсылкеИсточникаДляФСС(ПоследнийЦиклИлиОтправка);
		// ФСРАР
		ИначеЕсли ВидКонтролирующегоОргана = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСРАР") Тогда	
			КонтекстЭДОКлиент.ПоказатьПротоколОбработкиПоСсылкеИсточникаДляФСРАР(ПоследнийЦиклИлиОтправка);
		// РПН
		ИначеЕсли ВидКонтролирующегоОргана = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.РПН") Тогда	
			КонтекстЭДОКлиент.ПоказатьПротоколОбработкиПоСсылкеИсточникаДляРПН(ПоследнийЦиклИлиОтправка);
		// Остальные контролирующие органы
		Иначе
			КонтекстЭДОКлиент.ПоказатьДокументыЦикловОбмена(ПоследнийЦиклИлиОтправка, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьКоличествоОбъектовНеЗаписанныхВРегистр()
	
	ИдентификаторЗадания = Неопределено;
	
	ПараметрыЗапуска = Новый Структура;
	ПараметрыЗапуска.Вставить("УникальныйИдентификаторФормы", УникальныйИдентификатор);
	
	Результат = РегламентированнаяОтчетность.КоличествоОбъектовНеЗаписанныхВРегистр(ПараметрыЗапуска);
	
	Если Результат = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	АдресХранилища       = Результат.АдресХранилища;
	ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	
	Если Не Результат.ЗаданиеВыполнено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеПодсчетаКоличестваНезаписанныхОбъектов()

	Попытка
	
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ПоказатьРезультатПроверки();
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеПодсчетаКоличестваНезаписанныхОбъектов",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
			КонецЕсли;
			
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке().Описание;
		
		ТекстСообщенияОбОшибке =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при подсчете количества объектов, не отображаемых в форме 1С-Отчетность 
					 |%1'"), ИнформацияОбОшибке);
					 
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(
				ТекстСообщенияОбОшибке,"Ошибка",НСтр("ru = 'Задание завершилось с ошибкой.'"));
		
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРезультатПроверки()
	
	РезультатПроверки = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если НЕ ЗначениеЗаполнено(РезультатПроверки) Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатПроверки.КоличествоНезаписанныхОбъектов = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Неопределено;
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить("Проиндексировать", "Проиндексировать");
	Кнопки.Добавить("Отмена", 			"Отмена");
	
	ТекстВопроса = НСтр("ru='Для корректной работы формы необходимо проиндексировать объекты'");
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьРезультатПроверкиЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, 60, "Проиндексировать");
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРезультатПроверкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> "Проиндексировать" Тогда
		Возврат;
	КонецЕсли;
	
	ДописатьОбъектыОтсутствующиеВРегистре();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура ДописатьОбъектыОтсутствующиеВРегистре(СОчисткойРегистров = Ложь)
	
	Результат  = ЗапуститьДобавлениеОбъектовВРегистр(СОчисткойРегистров);
	
	Если Результат <> Неопределено Тогда
		// Задание отработало, результат получен
		Оповестить("Завершение индексирования объектов журнала Отчетность");
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьРезультатДобавленияОбъектовОтсутствующихВРегистре", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьРезультатДобавленияОбъектовОтсутствующихВРегистре()

	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда			
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			Оповестить("Завершение индексирования объектов журнала Отчетность");
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьРезультатДобавленияОбъектовОтсутствующихВРегистре",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

&НаСервере
Функция ЗапуститьДобавлениеОбъектовВРегистр(СОчисткойРегистров = Ложь)
	
	ИдентификаторЗадания = Неопределено;
	
	ПараметрыЗапуска = Новый Структура;
	ПараметрыЗапуска.Вставить("УникальныйИдентификаторФормы", УникальныйИдентификатор);
	ПараметрыЗапуска.Вставить("СОчисткойРегистров", СОчисткойРегистров);
	
	Результат = РегламентированнаяОтчетность.ДобавлениеОбъектовОтсутствующихВРегистре(ПараметрыЗапуска);
	
	Если Результат = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	АдресХранилища       = Результат.АдресХранилища;
	ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	
	Если Не Результат.ЗаданиеВыполнено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИмяФормыОбъектаПоУмолчанию(Ссылка)
	
	Возврат Ссылка.Метаданные().ПолноеИмя() + ".ФормаОбъекта";
	
КонецФункции

&НаКлиенте
Процедура ОбновитьТекущуюТаблицу()
	
	// Обновляем текущую таблицу
	Если Элементы.Разделы.ТекущаяСтраница = Элементы.СтраницаОтчеты Тогда
		Элементы.Отчеты.Обновить();
	КонецЕсли;
	Если Элементы.Разделы.ТекущаяСтраница = Элементы.СтраницаУведомления Тогда
		Элементы.Уведомления.Обновить();
	КонецЕсли;
	Если Элементы.Разделы.ТекущаяСтраница = Элементы.СтраницаПисьма Тогда
		Элементы.Письма.Обновить();
	КонецЕсли;
	Если Элементы.Разделы.ТекущаяСтраница = Элементы.СтраницаСверки Тогда
		Элементы.Сверки.Обновить();
	КонецЕсли;
	Если Элементы.Разделы.ТекущаяСтраница = Элементы.СтраницаЕГРЮЛ Тогда
		Элементы.ЕГРЮЛ.Обновить();
	КонецЕсли;
	Если Элементы.Разделы.ТекущаяСтраница = Элементы.СтраницаВходящие Тогда
		Элементы.Входящие.Обновить();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПереходаВСтарыйИнтерфейсНажатие(Элемент)
	
	СписокВыбора  = Новый СписокЗначений;
	СписокВыбора.Добавить(1, "Регламентированные отчеты");
	СписокВыбора.Добавить(2, "Сообщения в контролирующие органы");
	
	Оповещение = Новый ОписаниеОповещения("ГиперссылкаПереходаВСтарыйИнтерфейсНажатиеЗавершение", ЭтотОбъект);
	ПоказатьВыборИзМеню(Оповещение, СписокВыбора, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПереходаВСтарыйИнтерфейсНажатиеЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		Если ВыбранныйЭлемент.Значение = 1 Тогда
			ОткрытьФорму("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.УправлениеОтчетностью", , , "1С-Отчетность");
		ИначеЕсли ВыбранныйЭлемент.Значение = 2 Тогда
			ПараметрыФормы = Новый Структура("Тип", "Сообщения");
			ОткрытьФорму("Обработка.СообщенияВКонтролирующийОрган.Форма.ФормаОбработки", ПараметрыФормы, , "1С-Отчетность");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОнлайнПроверка(Закладка)
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиИнициализацииКонтекстаЭДО);
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные 	= Закладка.ТекущиеДанные;
	ЭтоОтчеты = Закладка = Элементы.Отчеты;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ВыполнениеКомандыОтменено(?(ТекущиеДанные.Свойство("НаименованиеОтчета"), ТекущиеДанные.НаименованиеОтчета, ТекущиеДанные.Наименование), ТекущиеДанные.Организация, "ОтправитьОтчет") Тогда
			Возврат;
		КонецЕсли;
		
		ПроверяемыйОбъект = ?(ЭтоОтчеты, ТекущиеДанные.РегламентированныйОтчет, ТекущиеДанные.Ссылка);
		ОрганизацияПроверяемогоОбъекта = ТекущиеДанные.Организация;
		Если ЭтоОтчеты Тогда
			Представление = ТекущиеДанные.НаименованиеОтчета;
		Иначе
			Представление = ТекущиеДанные.Наименование;
		КонецЕсли;
		
		// Обход ошибки платформы.
		Если РегламентированнаяОтчетностьКлиент.ВебБраузер() = "MSIE" Тогда
			Если (Представление = "РСВ-1 ПФР" И ТипЗнч(ПроверяемыйОбъект) <> Тип("СправочникСсылка.ЭлектронныеПредставленияРегламентированныхОтчетов"))
				ИЛИ Представление = "Декларация по НДС"
				ИЛИ Представление = "Бухгалтерская отчетность (с 2011 года)"
				ИЛИ Представление = "Бухгалтерская отчетность малых предприятий" Тогда
				ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
					"ru='Для выгрузки (проверки выгрузки, проверки в интернете, отправки) в браузере ""Internet Explorer"" необходимо открыть форму регламентированного отчета ""%1""'"),
					Представление);
				ПоказатьПредупреждение(, ТекстПредупреждения);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		КонтекстЭДОКлиент.ПроверитьВИнтернетеНачало(
			ПроверяемыйОбъект, Представление, ЭтоОтчеты, ОрганизацияПроверяемогоОбъекта, ТекущиеДанные.ВидКонтролирующегоОргана, КонтекстЭДОКлиент)
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернетеПоСсылке(ДополнительныеПараметры.ПроверяемыйОбъект, ДополнительныеПараметры.КонтролирующийОрган);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредупредитьОбОграничениях(Закладка, Знач ТекстПредупреждения)
	
	// Переводим первый символ в нижний регистр
	ТекстПредупреждения = НРег(Лев(ТекстПредупреждения, 1)) + Сред(ТекстПредупреждения, 2);
	
	ТекстПредупреждения = НСтр("ru = 'Для %1 ""%2"" '") + ТекстПредупреждения;
	
	ЭтоОтчеты = Закладка = Элементы.Отчеты;
	ТекущиеДанные = Закладка.ТекущиеДанные;
	
	ВидОбъекта = "";
	Наименование = "";
	Если ЭтоОтчеты Тогда
		ВидОбъекта = НСтр("ru = 'отчета'");
		Наименование = ТекущиеДанные.НаименованиеОтчета;
	Иначе
		ВидОбъекта = НСтр("ru = 'уведомления'"); 
		Наименование = ТекущиеДанные.Наименование;
	КонецЕсли;
	
	ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%1", ВидОбъекта);
	ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%2", Наименование);
	
	ПоказатьПредупреждение(,ТекстПредупреждения);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
		
	ХранилищеНастроекДанныхФорм.Сохранить(ЭтаФорма.ИмяФормы, "Форма1СОтчетность_ТекущаяСтраницаРазделов", Элементы.Разделы.ТекущаяСтраница.Имя);
	ХранилищеНастроекДанныхФорм.Сохранить(ЭтаФорма.ИмяФормы, "Форма1СОтчетность_ПериодОтчета",  ПериодОтчета);
	ХранилищеНастроекДанныхФорм.Сохранить(ЭтаФорма.ИмяФормы, "Форма1СОтчетность_НачалоПериода", НачалоПериода);
	ХранилищеНастроекДанныхФорм.Сохранить(ЭтаФорма.ИмяФормы, "Форма1СОтчетность_КонецПериода",  КонецПериода);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеВидимостьюЭлементовПриОтключенномЭДО()
	
	Элементы.ГруппаПанельИнформацииСКнопкой.Видимость 	= ЭлектронныйДокументооборотДоступен;
	Элементы.РазделительМеню.Видимость 					= ЭлектронныйДокументооборотДоступен;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеВидимостьюИОНОнлайнИЛичныхКабинетов()
	
	УправлениеВидимостьюИОНОнлайн();
	УправлениеВидимостьюЛичныхКабинетовНаправлений();
	УправлениеВидимостьюЛичныхКабинетовСпецоператоров();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеВидимостьюИОНОнлайн()
	
	Элементы.ГруппаИОНОнлайн.Видимость = НЕ ЭлектроннаяПодписьВМоделиСервисаВызовСервера.ЭтоЭлектроннаяПодписьВМоделиСервиса();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеВидимостьюЛичныхКабинетовНаправлений()
	
	СтрокаСписокПоддерживаемыхКО = "ФНС,ПФР,ФСС,ФСРАР,РПН";
	НаправленияЭталон = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаСписокПоддерживаемыхКО, ",");
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ПереопределитьСписокПоддерживаемыхНаправлений(СтрокаСписокПоддерживаемыхКО);
	НаправленияПереопределенный = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаСписокПоддерживаемыхКО, ",");
	
	Для каждого СтрокаНаправление Из НаправленияЭталон Цикл
		Если НаправленияПереопределенный.Найти(СтрокаНаправление) = Неопределено Тогда
			ИмяЭлемента = "Группа" + СтрокаНаправление + "Сервис";
			
			ЭлементГруппа = Элементы.Найти(ИмяЭлемента);
			Если ЭлементГруппа <> Неопределено Тогда 
				ЭлементГруппа.Видимость = Ложь;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеВидимостьюЛичныхКабинетовСпецоператоров()
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	
	Если КонтекстЭДОСервер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//получение списка используемых операторов
	МассивИспользуемыхСпецоператоров = КонтекстЭДОСервер.ПолучитьМассивИспользуемыхСпецоператоров();
	
	//заполнение таблицы свойств операторов
	ТаблицаСвойствОператоров = Новый ТаблицаЗначений;
	ТаблицаСвойствОператоров.Колонки.Добавить("ЛичныйКабинетНаименованиеСервиса");
	ТаблицаСвойствОператоров.Колонки.Добавить("ЛичныйКабинетАдресСервиса");
	ТаблицаСвойствОператоров.Колонки.Добавить("ЛичныйКабинетОписаниеСервиса");
	
	Для каждого ИспользуемыйСпецоператор Из МассивИспользуемыхСпецоператоров Цикл
		ПараметрыСтруктура = Новый Структура("ЛичныйКабинетНаименованиеСервиса, ЛичныйКабинетАдресСервиса, ЛичныйКабинетОписаниеСервиса");
		КонтекстЭДОСервер.ЗаполнитьПараметрыСпецоператора(ИспользуемыйСпецоператор, ПараметрыСтруктура);
		
		Если ЗначениеЗаполнено(ПараметрыСтруктура.ЛичныйКабинетАдресСервиса) Тогда
			//в таблицу попадают лишь спецоператоры, у которых есть личный кабинет
			ЗаполнитьЗначенияСвойств(ТаблицаСвойствОператоров.Добавить(), ПараметрыСтруктура);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаСвойствОператоров.Сортировать("ЛичныйКабинетАдресСервиса");	
	
	//заполнение таблицы личных кабинетов на основе свойств операторов
	//в этой таблице будут сгруппированы в одну строку спецоператоры с одинаковым адресом личных кабинетов
	//наименование и описание сервиса - по первому из операторов
	ТаблицаЛичныхКабинетов = Новый ТаблицаЗначений;
	ТаблицаЛичныхКабинетов.Колонки.Добавить("ЛичныйКабинетНаименованиеСервиса");
	ТаблицаЛичныхКабинетов.Колонки.Добавить("ЛичныйКабинетАдресСервиса");
	ТаблицаЛичныхКабинетов.Колонки.Добавить("ЛичныйКабинетОписаниеСервиса");
	
	ТекущееНазваниеСервиса 		= "";
	ТекущийАдресСервиса 		= "";
	ТекущееОписаниеСервиса 		= "";
	Для каждого СвойстваОператора Из ТаблицаСвойствОператоров Цикл
		
		Если ТекущийАдресСервиса <> СвойстваОператора.ЛичныйКабинетАдресСервиса Тогда
			//новый личный кабинет
			НовыйЛичныйКабинет = ТаблицаЛичныхКабинетов.Добавить();
			ТекущееНазваниеСервиса 		= СвойстваОператора.ЛичныйКабинетНаименованиеСервиса;
			ТекущийАдресСервиса 		= СвойстваОператора.ЛичныйКабинетАдресСервиса;
			ТекущееОписаниеСервиса 		= СвойстваОператора.ЛичныйКабинетОписаниеСервиса;
		КонецЕсли;
		
		НовыйЛичныйКабинет.ЛичныйКабинетНаименованиеСервиса = ТекущееНазваниеСервиса;
		НовыйЛичныйКабинет.ЛичныйКабинетАдресСервиса 	= ТекущийАдресСервиса;
		НовыйЛичныйКабинет.ЛичныйКабинетОписаниеСервиса = ТекущееОписаниеСервиса;
		
	КонецЦикла;

	// заполнение свойств элементов формы на основе таблицы личных кабинетов 
	Для каждого СтрокаЛичныйКабинет Из ТаблицаЛичныхКабинетов Цикл
		
		НомерЛК = ТаблицаЛичныхКабинетов.Индекс(СтрокаЛичныйКабинет) + 1;
		ЦветГиперссылкаБРО = Новый Цвет(28, 85, 174);
		НазваниеСервиса = Новый ФорматированнаяСтрока(СтрокаЛичныйКабинет.ЛичныйКабинетНаименованиеСервиса, , ЦветГиперссылкаБРО, , СтрокаЛичныйКабинет.ЛичныйКабинетАдресСервиса);
		
		ЭлементНазваниеСервиса = Элементы.Найти("ЛичныйКабинет1Сотчетность" + НомерЛК);
		Если ЭлементНазваниеСервиса <> Неопределено Тогда 
			ЭлементНазваниеСервиса.Заголовок = НазваниеСервиса;
			ЭлементНазваниеСервиса.Подсказка = СтрокаЛичныйКабинет.ЛичныйКабинетАдресСервиса;
		КонецЕсли;

		ЭлементОписаниеСервиса = Элементы.Найти("ПояснениеЛичныйКабинет1Сотчетность" + НомерЛК);
		Если ЭлементОписаниеСервиса <> Неопределено Тогда 
			ЭлементОписаниеСервиса.Заголовок = СтрокаЛичныйКабинет.ЛичныйКабинетОписаниеСервиса;
		КонецЕсли;

		ЭлементГруппаЛичныйКабинет = Элементы.Найти("ГруппаЛичныйКабинет1Сотчетность" + НомерЛК);
		Если ЭлементОписаниеСервиса <> Неопределено Тогда 
			ЭлементГруппаЛичныйКабинет.Видимость = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКритическиеОшибкиПоСсылке(Ссылка)
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиИнициализацииКонтекстаЭДО);
		Возврат;
	КонецЕсли;
	
	КонтекстЭДОКлиент.ПоказатьКритическиеОшибкиПоСсылке(Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОткрытьНаНужнойСтранице(Параметры)
	
	// Если в качестве параметра открытия формы 1С-Отчетность была передана закладка, то открывем на этой закладке,
	// инчае открываем на той, на которой форму закрыли в последний раз,
	// либо на закладке Отчеты, если форма открывается впервые
	Если Параметры.Свойство("Раздел") Тогда
		
		Раздел = Параметры.Раздел;
		Если Раздел = Перечисления.СтраницыЖурналаОтчетность.Отчеты Тогда
		    Элементы.Разделы.ТекущаяСтраница = Элементы.СтраницаОтчеты;
		ИначеЕсли Раздел = Перечисления.СтраницыЖурналаОтчетность.Уведомления Тогда
			Элементы.Разделы.ТекущаяСтраница = Элементы.СтраницаУведомления;
		ИначеЕсли Раздел = Перечисления.СтраницыЖурналаОтчетность.Письма Тогда
			Элементы.Разделы.ТекущаяСтраница = Элементы.СтраницаПисьма;
		ИначеЕсли Раздел = Перечисления.СтраницыЖурналаОтчетность.Сверки Тогда
			Элементы.Разделы.ТекущаяСтраница = Элементы.СтраницаСверки;
		ИначеЕсли Раздел = Перечисления.СтраницыЖурналаОтчетность.ЕГРЮЛ Тогда
			Элементы.Разделы.ТекущаяСтраница = Элементы.СтраницаЕГРЮЛ;
		ИначеЕсли Раздел = Перечисления.СтраницыЖурналаОтчетность.Сервисы Тогда
			Элементы.Разделы.ТекущаяСтраница = Элементы.СтраницаСервисы;
		КонецЕсли;
			
	Иначе
		
		// Восстанавливаем запомненную страницу
		ТекСтраница = ХранилищеНастроекДанныхФорм.Загрузить(ЭтаФорма.ИмяФормы, "Форма1СОтчетность_ТекущаяСтраницаРазделов");
		Если ТекСтраница <> Неопределено И Элементы.Разделы.ПодчиненныеЭлементы.Найти(ТекСтраница) <> Неопределено Тогда
			Элементы.Разделы.ТекущаяСтраница = Элементы[ТекСтраница];
		Иначе
			Элементы.Разделы.ТекущаяСтраница = Элементы.СтраницаОтчеты;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ЗакладкуНеобходимоСменить(Раздел)
	
	Возврат Раздел = ПредопределенноеЗначение("Перечисление.СтраницыЖурналаОтчетность.Отчеты") И Элементы.Разделы.ТекущаяСтраница <> Элементы.СтраницаОтчеты
		ИЛИ Раздел = ПредопределенноеЗначение("Перечисление.СтраницыЖурналаОтчетность.Уведомления") И Элементы.Разделы.ТекущаяСтраница <> Элементы.СтраницаУведомления
		ИЛИ Раздел = ПредопределенноеЗначение("Перечисление.СтраницыЖурналаОтчетность.Письма") И Элементы.Разделы.ТекущаяСтраница <> Элементы.СтраницаПисьма
		ИЛИ Раздел = ПредопределенноеЗначение("Перечисление.СтраницыЖурналаОтчетность.Сверки") И Элементы.Разделы.ТекущаяСтраница <> Элементы.СтраницаСверки
		ИЛИ Раздел = ПредопределенноеЗначение("Перечисление.СтраницыЖурналаОтчетность.ЕГРЮЛ") И Элементы.Разделы.ТекущаяСтраница <> Элементы.СтраницаЕГРЮЛ
		ИЛИ Раздел = ПредопределенноеЗначение("Перечисление.СтраницыЖурналаОтчетность.Сервисы") И Элементы.Разделы.ТекущаяСтраница <> Элементы.СтраницаСервисы;

КонецФункции
	
&НаСервере
Процедура СделатьВсеГиперссылкиНеактивными()
	
	МассивГиперссылок = Новый Массив;
	МассивГиперссылок.Добавить(Элементы.ГиперссылкаНовое);
	МассивГиперссылок.Добавить(Элементы.ГиперссылкаОтчеты);
	МассивГиперссылок.Добавить(Элементы.ГиперссылкаУведомления);
	МассивГиперссылок.Добавить(Элементы.ГиперссылкаПисьма);
	МассивГиперссылок.Добавить(Элементы.ГиперссылкаСверки);
	МассивГиперссылок.Добавить(Элементы.ГиперссылкаЕГРЮЛ);
	МассивГиперссылок.Добавить(Элементы.ГиперссылкаВходящие);
	МассивГиперссылок.Добавить(Элементы.ГиперссылкаСервисы);
	МассивГиперссылок.Добавить(Элементы.ГиперссылкаНастройки);
	
	Для каждого Гиперссылка Из МассивГиперссылок Цикл
	
		Гиперссылка.ЦветФона	= ЦветНеактивнойКнопки;
		Гиперссылка.Гиперссылка	= Истина;
		Гиперссылка.ЦветТекста	= ЦветТекстаКнопки;
	
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовоеУведомление()
	
	ПараметрыФормы 	= Новый Структура;
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("Создание_УведомлениеОСпецрежимахНалогообложения", Истина);
	ПараметрыФормы.Вставить("УчитыватьУведомленияНеВходящиеВБРО", Истина);
	ПараметрыФормы.Вставить("UIDФорма1СОтчетность", УникальныйИдентификатор);
	
	Если ЗначениеЗаполнено(ПредставлениеВидаУведомления) И ЗначениеЗаполнено(ВидУведомления) Тогда
		ПараметрыФормы.Вставить("ВидУведомления", ВидУведомления);
	КонецЕсли;
	
	ОткрытьФорму("Документ.УведомлениеОСпецрежимахНалогообложения.Форма.ФормаВыбораВидаСообщения", ПараметрыФормы,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовыйЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", Новый Структура("Организация", Организация));
	
	ОткрытьФорму("Документ.ЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП.Форма.ФормаДокумента", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовоеПисьмо()
	
	СписокВидовПисьма = Новый СписокЗначений;
	СписокВидовПисьма.Добавить("Письмо" ,НСтр("ru = 'Письмо'"));
	СписокВидовПисьма.Добавить("Ответ на требование" ,НСтр("ru = 'Ответ на требование'"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеВыбораВидаПисьма", ЭтотОбъект);
	СписокВидовПисьма.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru = 'Выберите вид письма'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВыбораВидаПисьма(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		// Значит пользователь нажал Отмена
	ИначеЕсли Результат.Значение = "Письмо" Тогда
		 СоздатьНовоеИсходящееПисьмо();
	ИначеЕсли Результат.Значение = "Ответ на требование" Тогда 
		 СоздатьНовуюОписьИсходящихДокументов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовоеИсходящееПисьмо()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", Новый Структура("Отправитель", Организация));
	
	ОткрытьФорму("Справочник.ПерепискаСКонтролирующимиОрганами.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовуюОписьИсходящихДокументов()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", Новый Структура("Организация", Организация));
	
	ОткрытьФорму("Справочник.ОписиИсходящихДокументовВНалоговыеОрганы.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовуюСверку()
	
	СписокВыбораВидаСверки = Новый СписокЗначений;
	
	СписокВыбораВидаСверки.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеАктовСверкиРасчетов"));
	СписокВыбораВидаСверки.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеВыпискиОперацийИзКарточкиРасчетыСБюджетом"));
	СписокВыбораВидаСверки.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеПеречняБухгалтерскойИНалоговойОтчетности"));
	СписокВыбораВидаСверки.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеСправкиОСостоянииРасчетовСБюджетом"));
	СписокВыбораВидаСверки.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеСправкиОбИсполненииОбязанностейПоУплате"));
	СписокВыбораВидаСверки.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОС.СверкаФИОиСНИЛС"));
	СписокВыбораВидаСверки.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОС.СправкаОСостоянииРасчетов"));

	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеВыбораВидаСверки", ЭтотОбъект);
	
	СписокВыбораВидаСверки.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru = 'Выберите вид сверки'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВыбораВидаСверки(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		СоздатьСверку(Результат.Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭУВРежимеСервиса()
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда 
		Элементы.НадписьИнформацияОбОбновлениях.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьДоступностьЭДО()
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер <> Неопределено Тогда
		ЭлектронныйДокументооборотДоступен = КонтекстЭДОСервер.ХотяБыОднаОрганизацияИспользуетДокументооборот();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти