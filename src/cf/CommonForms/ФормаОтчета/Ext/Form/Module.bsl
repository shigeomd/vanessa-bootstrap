&НаКлиенте
Перем ПараметрыОбработчика;

&НаКлиенте
Перем ПеременныеКлиента;

////////////////////////////////////////////////////////////////////////////////
// СОБЫТИЯ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ВариантыПанелиКлючТекущегоВарианта = " - ";
	
	Если ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		Элементы.КомандыЕще.Ширина = 15;
	КонецЕсли;
	
	// Параметры формы.
	РежимРасшифровки = (Параметры.Свойство("Расшифровка") И Параметры.Расшифровка <> Неопределено);
	РежимВариантаОтчета = (ТипЗнч(КлючТекущегоВарианта) = Тип("Строка") И Не ПустаяСтрока(КлючТекущегоВарианта));
	ПравоВывода = ПравоДоступа("Вывод", Метаданные);
	
	ФормаПараметры = Новый Структура(
		"КлючНазначенияИспользования, КлючПользовательскихНастроек,
		|Расшифровка, СформироватьПриОткрытии, ТолькоПросмотр,
		|ФиксированныеНастройки, Раздел, Подсистема, ПодсистемаПредставление");
	ЗаполнитьЗначенияСвойств(ФормаПараметры, Параметры);
	ФормаПараметры.Вставить("Отбор", Новый Структура);
	Если ТипЗнч(Параметры.Отбор) = Тип("Структура") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ФормаПараметры.Отбор, Параметры.Отбор, Истина);
		Параметры.Отбор.Очистить();
	КонецЕсли;
	ФормаПараметры = Новый ФиксированнаяСтруктура(ФормаПараметры);
	
	Если ФормаПараметры.Подсистема = Неопределено Тогда
		Элементы.ДругиеОтчеты.Видимость = Ложь;
	КонецЕсли;
	
	// Локальные переменные.
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	ОтчетМетаданные = ОтчетОбъект.Метаданные();
	НастройкиОтчета = ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию();
	АдресСхемы = ПоместитьВоВременноеХранилище(ОтчетОбъект.СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
	НастройкиОтчета.Вставить("АдресСхемы", АдресСхемы);
	НастройкиОтчета.Вставить("ПолноеИмя", ОтчетМетаданные.ПолноеИмя());
	НастройкиОтчета.Вставить("Наименование", СокрЛП(ОтчетМетаданные.Представление()));
	
	Информация = ВариантыОтчетов.СформироватьИнформациюОбОтчетеПоПолномуИмени(НастройкиОтчета.ПолноеИмя);
	НастройкиОтчета.Вставить("ОтчетСсылка", Информация.Отчет);
	НастройкиОтчета.Вставить("ВариантСсылка", ВариантыОтчетов.ПолучитьСсылку(НастройкиОтчета.ОтчетСсылка, КлючТекущегоВарианта));
	
	Если ВариантыОтчетовПовтИсп.ОтчетыСНастройками().Найти(НастройкиОтчета.ОтчетСсылка) <> Неопределено Тогда
		ОтчетОбъект.ОпределитьНастройкиФормы(ЭтотОбъект, КлючТекущегоВарианта, НастройкиОтчета);
		СоответствиеПериодичностиПараметров = Новый Соответствие;
		Для Каждого КлючИЗначение Из НастройкиОтчета.СоответствиеПериодичностиПараметров Цикл
			ПолеКД = КлючИЗначение.Ключ;
			Если ТипЗнч(ПолеКД) = Тип("ПараметрКомпоновкиДанных") Тогда
				ПолеКД = Новый ПолеКомпоновкиДанных("ПараметрыДанных." + Строка(ПолеКД));
			КонецЕсли;
			СоответствиеПериодичностиПараметров.Вставить(ПолеКД, КлючИЗначение.Значение);
		КонецЦикла;
		НастройкиОтчета.Вставить("СоответствиеПериодичностиПараметров", СоответствиеПериодичностиПараметров);
	КонецЕсли;
	
	НастройкиОтчета.Вставить("ПрочитатьФлажокФормироватьСразуИзПользовательскихНастроек", Истина);
	Если Параметры.Свойство("СформироватьПриОткрытии") И Параметры.СформироватьПриОткрытии = Истина Тогда
		Параметры.СформироватьПриОткрытии = Ложь;
		НастройкиОтчета.ФормироватьСразу = Истина;
		НастройкиОтчета.ПрочитатьФлажокФормироватьСразуИзПользовательскихНастроек = Ложь;
	КонецЕсли;
	
	НастройкиОтчета.Вставить("Внешний", ТипЗнч(НастройкиОтчета.ОтчетСсылка) = Тип("Строка"));
	НастройкиОтчета.Вставить("ПредопределенныеВарианты", Новый СписокЗначений);
	Если НастройкиОтчета.Внешний И ОтчетОбъект.СхемаКомпоновкиДанных <> Неопределено Тогда
		Для Каждого Вариант Из ОтчетОбъект.СхемаКомпоновкиДанных.ВариантыНастроек Цикл
			НастройкиОтчета.ПредопределенныеВарианты.Добавить(Вариант.Имя, Вариант.Представление);
		КонецЦикла;
	КонецЕсли;
	
	// Параметры по умолчанию
	Если НастройкиОтчета.Свойство("ВыводитьСуммуВыделенныхЯчеек") И Не НастройкиОтчета.ВыводитьСуммуВыделенныхЯчеек Тогда
		Элементы.АвтоСуммаГруппа.Видимость = Ложь;
		Элементы.ОтчетТабличныйДокумент.УстановитьДействие("ПриАктивизацииОбласти", "");
	КонецЕсли;
	
	// Скрытие команд вариантов
	Если Не НастройкиОтчета.Свойство("РазрешеноМенятьВарианты") Или Параметры.Свойство("ВидимостьКомандВариантовОтчетов") Тогда
		НастройкиОтчета.Вставить("РазрешеноМенятьВарианты", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ВидимостьКомандВариантовОтчетов"));
	КонецЕсли;
	Если ТипЗнч(НастройкиОтчета.РазрешеноМенятьВарианты) <> Тип("Булево") Тогда
		НастройкиОтчета.РазрешеноМенятьВарианты = ВариантыОтчетовПовтИсп.ПравоДобавления();
		Если НастройкиОтчета.РазрешеноМенятьВарианты // Команды не отключены параметрами открытия формы.
			И Параметры.КлючВарианта = Неопределено // Открывается без контекста.
			И ЗначениеЗаполнено(НастройкиОтчета.ВариантСсылка) Тогда // Вариант зарегистрирован.
			ПредопределенныйВариант = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкиОтчета.ВариантСсылка, "ПредопределенныйВариант");
			Если ЗначениеЗаполнено(ПредопределенныйВариант) Тогда
				Отключенные = ВариантыОтчетовПовтИсп.ОтключенныеВариантыПрограммы();
				Если Отключенные.Найти(ПредопределенныйВариант) <> Неопределено Тогда // Вариант отключен.
					Текст = НСтр("ru = 'Контекстный вариант ""%1"" отчета ""%2"" открыт без контекста.'");
					ВариантыОтчетов.ПредупреждениеПоВарианту(НастройкиОтчета.ВариантСсылка, Текст, НастройкиОтчета.ВариантСсылка, НастройкиОтчета.ОтчетСсылка);
					НастройкиОтчета.РазрешеноМенятьВарианты = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Не НастройкиОтчета.РазрешеноМенятьВарианты Тогда
		АвтоНавигационнаяСсылка = Ложь;
	КонецЕсли;
	
	// Регистрация команд и реквизитов формы, которые не удаляются при перезаполнении быстрых настроек.
	НаборРеквизитов = ПолучитьРеквизиты();
	Для Каждого Реквизит Из НаборРеквизитов Цикл
		ПолноеИмяРеквизита = Реквизит.Имя + ?(ПустаяСтрока(Реквизит.Путь), "", "." + Реквизит.Путь);
		ПостоянныеРеквизиты.Добавить(ПолноеИмяРеквизита);
	КонецЦикла;
	Для Каждого Команда Из Команды Цикл
		ПостоянныеКоманды.Добавить(Команда.Имя);
	КонецЦикла;
	
	// Приведение зависимых элементов формы к кондиции.
	ВидимостьДоступностьКорректность("");
	
	// Тесная интеграция с подсистемами БСП.
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РассылкаОтчетов") Тогда
		МодульРассылкаОтчетов = ОбщегоНазначения.ОбщийМодуль("РассылкаОтчетов");
		МодульРассылкаОтчетов.ФормаОтчетаДобавитьКоманды(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	КонецЕсли;
	
	// События.
	ОтчетыПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	Если НастройкиОтчета.События.ПриСозданииНаСервере Тогда
		ОтчетОбъект.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	КонецЕсли;
	
	// Если в подменю одна команда, то выпадающий список не отображается.
	Если Элементы.ГруппаОтправить_Левая.ПодчиненныеЭлементы.Количество() = 1 Тогда
		Элементы.ОтправитьПоЭлектроннойПочте_Левая.Заголовок = Элементы.ГруппаОтправить_Левая.Заголовок + "...";
		Элементы.Переместить(Элементы.ОтправитьПоЭлектроннойПочте_Левая, Элементы.КомандыЛевая, Элементы.ГруппаОтправить_Левая);
	КонецЕсли;
	Если Элементы.ГруппаОтправить.ПодчиненныеЭлементы.Количество() = 1 Тогда
		Элементы.ОтправитьПоЭлектроннойПочте.Заголовок = Элементы.ГруппаОтправить.Заголовок + "...";
		Элементы.Переместить(Элементы.ОтправитьПоЭлектроннойПочте, Элементы.КомандыЕще, Элементы.ГруппаОтправить);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПеременныеКлиента = Новый Структура;
	ПеременныеКлиента.Вставить("ИнтервалОжидания", ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 1, 0.2));
	Если Не Отказ Тогда
		ФормаОткрыта = Истина;
	КонецЕсли;
	Если НастройкиОтчета.ФормироватьСразу Тогда
		Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ФормированиеПриОткрытии", Истина);
		ПодключитьОбработчикОжидания("СФормировать", 0.1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(Результат, ПодчиненнаяФорма)
	РезультатОбработан = Ложь;
	
	// Приемка результата из стандартных форм.
	Если ТипЗнч(ПодчиненнаяФорма) = Тип("УправляемаяФорма") Тогда
		ИмяПодчиненнойФормы = ПодчиненнаяФорма.ИмяФормы;
		Если ИмяПодчиненнойФормы = "ХранилищеНастроек.ХранилищеВариантовОтчетов.Форма.НастройкиОтчета"
			Или ПодчиненнаяФорма.ОписаниеОповещенияОЗакрытии <> Неопределено Тогда
			РезультатОбработан = Истина; // См. ВсеНастройкиЗавершение.
		ИначеЕсли ТипЗнч(Результат) = Тип("Структура") Тогда
			ПозицияТочки = СтрДлина(ИмяПодчиненнойФормы);
			Пока КодСимвола(ИмяПодчиненнойФормы, ПозицияТочки) <> 46 Цикл // Не точка.
				ПозицияТочки = ПозицияТочки - 1;
			КонецЦикла;
			СуффиксФормыИсточника = ВРег(Сред(ИмяПодчиненнойФормы, ПозицияТочки + 1));
			Если СуффиксФормыИсточника = ВРег("ФормаНастроекОтчета")
				Или СуффиксФормыИсточника = ВРег("ФормаНастроек")
				Или СуффиксФормыИсточника = ВРег("ФормаВариантаОтчета")
				Или СуффиксФормыИсточника = ВРег("ФормаВарианта") Тогда
				БыстрыеНастройкиЗаполнить(Результат);
				Если Результат.Свойство("Переформировать") И Результат.Переформировать Тогда
					ОчиститьСообщения();
					Сформировать();
				КонецЕсли;
				РезультатОбработан = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Механизмы расширения.
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РассылкаОтчетов") Тогда
		МодульРассылкаОтчетовКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РассылкаОтчетовКлиент");
		МодульРассылкаОтчетовКлиент.ФормаОтчетаОбработкаВыбора(ЭтотОбъект, Результат, ПодчиненнаяФорма, РезультатОбработан);
	КонецЕсли;
	ОтчетыКлиентПереопределяемый.ОбработкаВыбора(ЭтотОбъект, Результат, ПодчиненнаяФорма, РезультатОбработан);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	ОповещениеОбработано = Ложь;
	Если ИмяСобытия = ВариантыОтчетовКлиентСервер.ИмяСобытияИзменениеВарианта() Тогда
		ОповещениеОбработано = Истина;
		ВариантыПанелиКлючТекущегоВарианта = " - ";
		ПодключитьОбработчикОжидания("ВидимостьДоступностьЕслиТребуется", 0.1, Истина);
	КонецЕсли;
	
	ОтчетыКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник, ОповещениеОбработано);
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеВариантаНаСервере(НовыеНастройкиКД)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Ничего не делать если отчет не на СКД и никаких настроек не загружено.
	РежимВариантаОтчета = (ТипЗнч(КлючТекущегоВарианта) = Тип("Строка") И Не ПустаяСтрока(КлючТекущегоВарианта));
	Если Не РежимВариантаОтчета И НовыеНастройкиКД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Обновление ссылки варианта отчета.
	Если ВариантыПанелиКлючТекущегоВарианта <> КлючТекущегоВарианта Тогда
		НастройкиОтчета.ВариантСсылка = ВариантыОтчетов.ПолучитьСсылку(НастройкиОтчета.ОтчетСсылка, КлючТекущегоВарианта);
	КонецЕсли;
	
	// Вызов переопределяемого модуля.
	ОтчетыПереопределяемый.ПередЗагрузкойВариантаНаСервере(ЭтотОбъект, НовыеНастройкиКД);
	Если НастройкиОтчета.События.ПередЗагрузкойВариантаНаСервере
		Или НастройкиОтчета.События.ПриЗагрузкеВариантаНаСервере Тогда
		ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	КонецЕсли;
	Если НастройкиОтчета.События.ПередЗагрузкойВариантаНаСервере Тогда
		ОтчетОбъект.ПередЗагрузкойВариантаНаСервере(ЭтотОбъект, НовыеНастройкиКД);
	КонецЕсли;
	
	// Загрузка фиксированных настроек для режима расшифровки.
	Если РежимРасшифровки Тогда
		ОтчетНаименованиеТекущегоВарианта = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НовыеНастройкиКД.ДополнительныеСвойства, "ВариантНаименование");
		Если Параметры <> Неопределено И Параметры.Свойство("Расшифровка") Тогда
			Отчет.КомпоновщикНастроек.ЗагрузитьФиксированныеНастройки(Параметры.Расшифровка.ПрименяемыеНастройки);
			Отчет.КомпоновщикНастроек.ФиксированныеНастройки.ДополнительныеСвойства.Вставить("РежимРасшифровки", Истина);
		КонецЕсли;
	Иначе
		Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ВариантНаименование", ОтчетНаименованиеТекущегоВарианта);
	КонецЕсли;
	Если ТипЗнч(ФормаПараметры.Отбор) = Тип("Структура") Тогда
		ПараметрыКД = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных;
		ОтборыКД = Отчет.КомпоновщикНастроек.Настройки.Отбор;
		Недоступный = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		Для Каждого КлючИЗначение Из ФормаПараметры.Отбор Цикл
			Имя = КлючИЗначение.Ключ;
			Значение = КлючИЗначение.Значение;
			Если ТипЗнч(Значение) = Тип("ФиксированныйМассив") Тогда
				Значение = Новый Массив(Значение);
			КонецЕсли;
			Если ТипЗнч(Значение) = Тип("Массив") Тогда
				Список = Новый СписокЗначений;
				Список.ЗагрузитьЗначения(Значение);
				Значение = Список;
			КонецЕсли;
			ПараметрКД = ПараметрыКД.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(Имя));
			Если ТипЗнч(ПараметрКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
				ПараметрКД.ИдентификаторПользовательскойНастройки = "";
				ПараметрКД.Использование    = Истина;
				ПараметрКД.РежимОтображения = Недоступный;
				ПараметрКД.Значение         = Значение;
				Продолжить;
			КонецЕсли;
			ДоступноеПолеКД = ОтборыКД.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных(Имя));
			Если ТипЗнч(ДоступноеПолеКД) = Тип("ДоступноеПолеОтбораКомпоновкиДанных") Тогда
				Если ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
					ВидСравненияКД = ВидСравненияКомпоновкиДанных.ВСписке;
				Иначе
					ВидСравненияКД = ВидСравненияКомпоновкиДанных.Равно;
				КонецЕсли;
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборыКД, Имя, Значение, ВидСравненияКД, , Истина, Недоступный, "");
				Продолжить;
			КонецЕсли;
			ТекстОшибки = НСтр("ru = 'Не удалось установить фиксированный отбор ""%1"".'");
			ВариантыОтчетов.ОшибкаПоВарианту(НастройкиОтчета.ВариантСсылка, ТекстОшибки, Имя);
		КонецЦикла;
	КонецЕсли;
	
	// Заполнение панели быстрых настроек.
	РежимВариантаОтчета = Истина;
	
	// Вызов переопределяемого модуля.
	Если НастройкиОтчета.События.ПриЗагрузкеВариантаНаСервере Тогда
		ОтчетОбъект.ПриЗагрузкеВариантаНаСервере(ЭтотОбъект, НовыеНастройкиКД);
	Иначе
		ОтчетыПереопределяемый.ПриЗагрузкеВариантаНаСервере(ЭтотОбъект, НовыеНастройкиКД);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(НовыеПользовательскиеНастройкиКД)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	Если Не РежимВариантаОтчета Тогда
		Возврат;
	КонецЕсли;
	
	// Вызов переопределяемого модуля.
	Если НастройкиОтчета.События.ПриЗагрузкеПользовательскихНастроекНаСервере Тогда
		ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
		ОтчетОбъект.ПриЗагрузкеПользовательскихНастроекНаСервере(ЭтотОбъект, НовыеПользовательскиеНастройкиКД);
	Иначе
		ОтчетыПереопределяемый.ПриЗагрузкеПользовательскихНастроекНаСервере(ЭтотОбъект, НовыеПользовательскиеНастройкиКД);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриОбновленииСоставаПользовательскихНастроекНаСервере(СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	Если Не РежимВариантаОтчета Тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Событие", Новый Структура);
	ПараметрыЗаполнения.Событие.Вставить("Имя", "ПриОбновленииСоставаПользовательскихНастроекНаСервере");
	ПараметрыЗаполнения.Событие.Вставить("СтандартнаяОбработка", СтандартнаяОбработка);
	БыстрыеНастройкиЗаполнить(ПараметрыЗаполнения);
	Если ПараметрыЗаполнения.Событие.СтандартнаяОбработка <> СтандартнаяОбработка Тогда
		СтандартнаяОбработка = ПараметрыЗаполнения.Событие.СтандартнаяОбработка;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	Если Не РежимВариантаОтчета Тогда
		Возврат;
	КонецЕсли;
	Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда // Для платформы 8.3.5.
		Возврат;
	КонецЕсли;
	ПользовательскиеНастройкиКД = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
	Для Каждого ПользовательскаяНастройкаКД Из ПользовательскиеНастройкиКД.Элементы Цикл
		Тип = ОтчетыКлиентСервер.ТипНастройкиСтрокой(ТипЗнч(ПользовательскаяНастройкаКД));
		
		Если Тип = "ЗначениеПараметраНастроек"
			И ТипЗнч(ПользовательскаяНастройкаКД.Значение) = Тип("СтандартныйПериод")
			И ПользовательскаяНастройкаКД.Использование Тогда
			
			ИдентификаторЭлемента = ОтчетыКлиентСервер.ПривестиИдентификаторКИмени(ПользовательскаяНастройкаКД.ИдентификаторПользовательскойНастройки);
			
			ПериодНачало    = Элементы.Найти(Тип + "_Начало_"    + ИдентификаторЭлемента);
			ПериодОкончание = Элементы.Найти(Тип + "_Окончание_" + ИдентификаторЭлемента);
			Если ПериодНачало = Неопределено Или ПериодОкончание = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Значение = ПользовательскаяНастройкаКД.Значение;
			Если ПериодНачало.АвтоОтметкаНезаполненного
				И Не ЗначениеЗаполнено(Значение.ДатаНачала)
				И Не ЗначениеЗаполнено(Значение.ДатаОкончания) Тогда
				ТекстОшибки = НСтр("ru = 'Не указан период'");
				ПутьКДанным = ПериодНачало.ПутьКДанным;
			ИначеЕсли Значение.ДатаНачала > Значение.ДатаОкончания Тогда
				ТекстОшибки = НСтр("ru = 'Конец периода должен быть больше начала'");
				ПутьКДанным = ПериодОкончание.ПутьКДанным;
			Иначе
				Продолжить;
			КонецЕсли;
			
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , ПутьКДанным);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииВариантаНаСервере(НастройкиКД)
	Если Не РежимВариантаОтчета Тогда
		Возврат;
	КонецЕсли;
	НовыеНастройкиКД = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
	Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(НовыеНастройкиКД);
	// Для платформы 8.3.5.
	НастройкиКД.ДополнительныеСвойства.Вставить("Адрес", ПоместитьВоВременноеХранилище(НовыеНастройкиКД));
	НастройкиКД = НовыеНастройкиКД;
	ВариантыПанелиКлючТекущегоВарианта = " - ";
	ВидимостьДоступностьКорректность("ВариантОтчета");
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииПользовательскихНастроекНаСервере(ПользовательскиеНастройкиКД)
	Если Не РежимВариантаОтчета Тогда
		Возврат;
	КонецЕсли;
	ВариантыОтчетов.ПриСохраненииПользовательскихНастроекНаСервере(ЭтотОбъект, ПользовательскиеНастройкиКД);
	ЗаполнитьКомандыВыбораВариантов();
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	Если ФоновоеЗаданиеИдентификатор <> Неопределено Тогда
		ФоновоеЗаданиеОтменить(ФоновоеЗаданиеИдентификатор);
		ФоновоеЗаданиеИдентификатор = Неопределено;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СОБЫТИЯ ЭЛЕМЕНТОВ

#Область ОбработчикиСобытийЭлементовШапкиФормы

////////////////////////////////////////////////////////////////////////////////
// Табличный документ

&НаКлиенте
Процедура ОтчетТабличныйДокументОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	ОтчетыКлиентПереопределяемый.ОбработкаРасшифровки(ЭтотОбъект, Элемент, Расшифровка, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ОтчетТабличныйДокументОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	ОтчетыКлиентПереопределяемый.ОбработкаДополнительнойРасшифровки(ЭтотОбъект, Элемент, Расшифровка, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ОтчетТабличныйДокументПриАктивизацииОбласти(Элемент)
	Если НастройкиОтчета.ВыводитьСуммуВыделенныхЯчеек Тогда
		ПодключитьОбработчикОжидания("РассчитатьСуммуЯчеек", ПеременныеКлиента.ИнтервалОжидания, Истина);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подключаемые

&НаКлиенте
Процедура Подключаемый_ФлажокИспользование_ПриИзменении(Элемент)
	ИдентификаторЭлемента = Прав(Элемент.Имя, 32);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеВвода_ПриИзменении(Элемент)
	ИдентификаторЭлемента = Прав(Элемент.Имя, 32);
	
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента);
	Если ТипЗнч(ПользовательскаяНастройкаКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		Значение = ПользовательскаяНастройкаКД.Значение;
	ИначеЕсли ТипЗнч(ПользовательскаяНастройкаКД) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		Значение = ПользовательскаяНастройкаКД.ПравоеЗначение;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Значение) Тогда
		ПользовательскаяНастройкаКД.Использование = Истина;
	КонецЕсли;
	
	Если ПользовательскаяНастройкаКД.Использование Тогда // Очистка значений при изменении значения.
		Найденные = ОтключаемыеСвязи.НайтиСтроки(Новый Структура("ВедущийИдентификаторВФорме", ИдентификаторЭлемента));
		Для Каждого Связь Из Найденные Цикл
			Если Не ЗначениеЗаполнено(Связь.ПодчиненныйИдентификаторВФорме) Тогда
				Продолжить;
			КонецЕсли;
			Если Связь.ТипСвязи = "ПараметровВыбора" Тогда
				Если Связь.ПодчиненныйДействие <> РежимИзмененияСвязанногоЗначения.Очищать Тогда
					Продолжить;
				КонецЕсли;
			Иначе
				Продолжить;
			КонецЕсли;
			ПодчиненныйДополнительно = ОтчетыКлиент.НайтиДополнительныеНастройкиЭлемента(ЭтотОбъект, Связь.ПодчиненныйИдентификаторВФорме);
			Если ПодчиненныйДополнительно <> Неопределено Тогда
				Если ПодчиненныйДополнительно.ВыводитьФлажок Тогда
					ПодчиненныйНастройкаКД = ОтчетыКлиент.НайтиПользовательскуюНастройкуЭлемента(ЭтотОбъект, Связь.ПодчиненныйИдентификаторВФорме);
					Если ПодчиненныйНастройкаКД <> Неопределено Тогда
						ПодчиненныйНастройкаКД.Использование = Ложь;
					КонецЕсли;
				КонецЕсли;
				Если Не ПодчиненныйДополнительно.ОграничиватьВыборУказаннымиЗначениями Тогда
					ПодчиненныйДополнительно.ЗначенияДляВыбора.Очистить();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ФлажокЗначения_ПриИзменении(Элемент)
	ИдентификаторЭлемента = Прав(Элемент.Имя, 32);
	Значение = ЭтотОбъект[Элемент.Имя];
	
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента);
	Если ТипЗнч(ПользовательскаяНастройкаКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		ПользовательскаяНастройкаКД.Значение = Значение;
	Иначе
		ПользовательскаяНастройкаКД.ПравоеЗначение = Значение;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокКомпоновщика_Значение_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОтчетыКлиент.СписокКомпоновщикаНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подключаемые - Стандартный период.

&НаКлиенте
Процедура Подключаемый_СтандартныйПериод_Вид_ПриИзменении(Элемент)
	
	ВидПериодаИмя = Элемент.Имя;
	ИдентификаторЭлемента  = Прав(ВидПериодаИмя, 32);
	СвойстваНастройкиТип = Лев(ВидПериодаИмя, Найти(ВидПериодаИмя, "_Вид_")-1);
	
	СтраницыИмя             = СвойстваНастройкиТип + "_Страницы_"      + ИдентификаторЭлемента;
	ПериодЗначениеИмя       = СвойстваНастройкиТип + "_Значение_"      + ИдентификаторЭлемента;
	ПериодПредставлениеИмя  = СвойстваНастройкиТип + "_Представление_" + ИдентификаторЭлемента;
	СтраницаПроизвольныйИмя = СвойстваНастройкиТип + "_СтраницаПроизвольный_" + ИдентификаторЭлемента;
	СтраницаСтандартныйИмя  = СвойстваНастройкиТип + "_СтраницаСтандартный_" + ИдентификаторЭлемента;
	
	Значение = ЭтотОбъект[ПериодЗначениеИмя];
	
	ВидПериода = ЭтотОбъект[ВидПериодаИмя];
	
	Если ЗначениеЗаполнено(ВидПериода) Тогда
		ВыбранПроизвольный = ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.ПроизвольныйПериод");
	Иначе
		ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.ПроизвольныйПериод");
		ЭтотОбъект[ВидПериодаИмя] = ВидПериода;
		ВыбранПроизвольный = Истина;
	КонецЕсли;
	
	Если ВыбранПроизвольный Тогда
		
		// Переключение страницы.
		Элементы[СтраницыИмя].ТекущаяСтраница = Элементы[СтраницаПроизвольныйИмя];
		
		Значение.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
		
	Иначе
		
		// Переключение страницы.
		Элементы[СтраницыИмя].ТекущаяСтраница = Элементы[СтраницаСтандартныйИмя];
		
		// Приведение значения периода в соответствие с выбранным видом.
		ДатаСеанса = НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса());
		НачалоПериода = НачалоДня(Значение.ДатаНачала);
		КонецПериода = КонецДня(Значение.ДатаОкончания);
		Если Не ЗначениеЗаполнено(НачалоПериода)
			Или (ДатаСеанса >= НачалоПериода И ДатаСеанса <= КонецПериода) Тогда
			НачалоПериода = ДатаСеанса;
		КонецЕсли;
		НачалоПериода = ОтчетыКлиентСервер.НачалоПериодаОтчета(ВидПериода, НачалоПериода);
		КонецПериода  = ОтчетыКлиентСервер.КонецПериодаОтчета(ВидПериода, НачалоПериода);
		
		Значение.ДатаНачала    = НачалоПериода;
		Значение.ДатаОкончания = КонецПериода;
		
	КонецЕсли;
	
	Представление = ОтчетыКлиентСервер.ПредставлениеСтандартногоПериода(Значение, ВидПериода);
	ЭтотОбъект[ПериодПредставлениеИмя] = Представление;
	ЭтотОбъект[ПериодЗначениеИмя]      = Значение;
	
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента);
	Если ТипЗнч(ПользовательскаяНастройкаКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		ПользовательскаяНастройкаКД.Значение = Значение;
	Иначе
		ПользовательскаяНастройкаКД.ПравоеЗначение = Значение;
	КонецЕсли;
	
	ПользовательскаяНастройкаКД.Использование = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СтандартныйПериод_Значение_НачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	// Формирование сведений по элементу.
	ПериодПредставлениеИмя = Элемент.Имя;
	ИдентификаторЭлемента  = Прав(ПериодПредставлениеИмя, 32);
	СвойстваНастройкиТип = Лев(ПериодПредставлениеИмя, Найти(ПериодПредставлениеИмя, "_Представление_")-1);
	
	ПериодЗначениеИмя = СвойстваНастройкиТип + "_Значение_"      + ИдентификаторЭлемента;
	ВидПериодаИмя     = СвойстваНастройкиТип + "_Вид_"           + ИдентификаторЭлемента;
	
	Значение   = ЭтотОбъект[ПериодЗначениеИмя];
	ВидПериода = ЭтотОбъект[ВидПериодаИмя];
	
	НачалоПериода = Значение.ДатаНачала;
	Если НачалоПериода = '00010101' Тогда
		НачалоПериода = ОтчетыКлиентСервер.НачалоПериодаОтчета(ВидПериода, ОбщегоНазначенияКлиент.ДатаСеанса());
	КонецЕсли;
	
	// Параметры для чтения из обработчиков:
	ПараметрыВыбора = Новый Структура;
	// Для выбора значения:
	ПараметрыВыбора.Вставить("Значение",               Значение);
	ПараметрыВыбора.Вставить("Элемент",                Элемент);
	// Для загрузки значения:
	ПараметрыВыбора.Вставить("ИдентификаторЭлемента",  ИдентификаторЭлемента);
	ПараметрыВыбора.Вставить("ПериодПредставлениеИмя", ПериодПредставлениеИмя);
	ПараметрыВыбора.Вставить("ПериодЗначениеИмя",      ПериодЗначениеИмя);
	ПараметрыВыбора.Вставить("ВидПериода",             ВидПериода);
	ПараметрыВыбора.Вставить("ЭтоПараметр",            СвойстваНастройкиТип = "ЗначениеПараметраНастроек");
	
	ВыборПериодаИзВыпадающегоСписка(-1, ПараметрыВыбора);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СтандартныйПериод_НачалоПериода_ПриИзменении(Элемент)
	
	// Формирование сведений по элементу.
	ПериодНачалоИмя = Элемент.Имя;
	ИдентификаторЭлемента  = Прав(ПериодНачалоИмя, 32);
	СвойстваНастройкиТип = Лев(ПериодНачалоИмя, Найти(ПериодНачалоИмя, "_Начало_")-1);
	ПериодЗначениеИмя = СвойстваНастройкиТип + "_Значение_" + ИдентификаторЭлемента;
	
	Значение = ЭтотОбъект[ПериодЗначениеИмя];
	
	Если Значение.ДатаНачала <> '00010101' Тогда
		Значение.ДатаНачала = НачалоДня(Значение.ДатаНачала);
	КонецЕсли;
	
	// Запись значения в пользовательские настройки компоновки данных.
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента);
	Если ТипЗнч(ПользовательскаяНастройкаКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		ПользовательскаяНастройкаКД.Значение = Значение;
	Иначе
		ПользовательскаяНастройкаКД.ПравоеЗначение = Значение;
	КонецЕсли;
	
	Если Значение.ДатаНачала <> '00010101' Тогда
		ПользовательскаяНастройкаКД.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СтандартныйПериод_КонецПериода_ПриИзменении(Элемент)
	
	// Формирование сведений по элементу.
	ПериодОкончаниеИмя = Элемент.Имя;
	ИдентификаторЭлемента  = Прав(ПериодОкончаниеИмя, 32);
	СвойстваНастройкиТип = Лев(ПериодОкончаниеИмя, Найти(ПериодОкончаниеИмя, "_Окончание_")-1);
	
	ПериодЗначениеИмя = СвойстваНастройкиТип + "_Значение_" + ИдентификаторЭлемента;
	
	Значение = ЭтотОбъект[ПериодЗначениеИмя];
	
	Если Значение.ДатаОкончания <> '00010101' Тогда
		Значение.ДатаОкончания = КонецДня(Значение.ДатаОкончания);
	КонецЕсли;
	
	// Запись значения в пользовательские настройки компоновки данных.
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента);
	Если ТипЗнч(ПользовательскаяНастройкаКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		ПользовательскаяНастройкаКД.Значение = Значение;
	Иначе
		ПользовательскаяНастройкаКД.ПравоеЗначение = Значение;
	КонецЕсли;
	
	Если Значение.ДатаОкончания <> '00010101' Тогда
		ПользовательскаяНастройкаКД.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СтандартныйПериод_Значение_Очистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СОБЫТИЯ КНОПОК

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВсеНастройки(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НастройкиОтчета",     НастройкиОтчета);
	ПараметрыФормы.Вставить("КомпоновщикНастроек", Отчет.КомпоновщикНастроек);
	ПараметрыФормы.Вставить("ВариантНаименование", Строка(ОтчетНаименованиеТекущегоВарианта));
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	Обработчик = Новый ОписаниеОповещения("ВсеНастройкиЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("ХранилищеНастроек.ХранилищеВариантовОтчетов.Форма.НастройкиОтчета", ПараметрыФормы, ЭтотОбъект, , , , Обработчик, Режим);
КонецПроцедуры

&НаКлиенте
Процедура ВсеНастройкиЗавершение(Результат, ПараметрыВыполнения) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	БыстрыеНастройкиЗаполнить(Результат);
	Если Результат.Свойство("Переформировать") И Результат.Переформировать Тогда
		ОчиститьСообщения();
		Сформировать();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВариантОтчета(Команда)
	ПараметрыФормы = Новый Структура(ФормаПараметры);
	ПараметрыФормы.Вставить("Вариант",                               Отчет.КомпоновщикНастроек.Настройки);
	ПараметрыФормы.Вставить("КлючВарианта",                          Строка(КлючТекущегоВарианта));
	ПараметрыФормы.Вставить("ПользовательскиеНастройки",             Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("ПредставлениеВарианта",                 Строка(ОтчетНаименованиеТекущегоВарианта));
	ПараметрыФормы.Вставить("ПредставлениеПользовательскихНастроек", "");
	
	ОткрытьФорму(НастройкиОтчета.ПолноеИмя + ".ФормаВарианта", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПоУмолчанию(Команда)
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Событие", Новый Структура);
	ПараметрыЗаполнения.Событие.Вставить("Имя", "НастройкиПоУмолчанию");
	ПараметрыЗаполнения.Вставить("СброситьПользовательскиеНастройки", Истина);
	ПараметрыЗаполнения.Вставить("ПользовательскиеНастройкиМодифицированы", Истина);
	
	БыстрыеНастройкиЗаполнить(ПараметрыЗаполнения);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПоЭлектроннойПочте(Команда)
	ОтображениеСостояния = Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния;
	Если ОтображениеСостояния.Видимость = Истина
		И ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность Тогда
		ТекстВопроса = НСтр("ru = 'Отчет не сформирован. Сформировать?'");
		Обработчик = Новый ОписаниеОповещения("ОтправитьПоЭлектроннойПочтеЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	Иначе
		ПоказатьДиалогОтправкиПоЭлектроннойПочте();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтчетСкомпоноватьРезультат(Команда)
	ОчиститьСообщения();
	Сформировать();
КонецПроцедуры

&НаКлиенте
Процедура ВычислитьСумму(Команда)
	ВыделенныеОбласти = СтандартныеПодсистемыКлиент.ВыделенныеОбласти(ОтчетТабличныйДокумент);
	СуммаВыделенныхЯчеек = ВычислитьСуммуСервер(ОтчетТабличныйДокумент, ВыделенныеОбласти);
	Элементы.АвтоСуммаКнопка.Доступность = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ФормироватьСразу(Команда)
	
	ФормироватьСразу = Не НастройкиОтчета.ФормироватьСразу;
	НастройкиОтчета.ФормироватьСразу = ФормироватьСразу;
	Элементы.ФормироватьСразу.Пометка = ФормироватьСразу;
	
	СостояниеДоИзменения = Новый Структура("Видимость, ДополнительныйРежимОтображения, Картинка, Текст");
	ЗаполнитьЗначенияСвойств(СостояниеДоИзменения, Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния);
	
	Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ФормироватьСразу", ФормироватьСразу);
	ПользовательскиеНастройкиМодифицированы = Истина;
	
	ЗаполнитьЗначенияСвойств(Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния, СостояниеДоИзменения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДругиеОтчеты(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВариантСсылка",     НастройкиОтчета.ВариантСсылка);
	ПараметрыФормы.Вставить("ОтчетСсылка",       НастройкиОтчета.ОтчетСсылка);
	ПараметрыФормы.Вставить("ПодсистемаСсылка",  ФормаПараметры.Подсистема);
	ПараметрыФормы.Вставить("ОтчетНаименование", НастройкиОтчета.Наименование);
	
	Блокировать = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму("ХранилищеНастроек.ХранилищеВариантовОтчетов.Форма.ПанельДругихОтчетов", ПараметрыФормы, ЭтотОбъект, Истина, , , , Блокировать);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подключаемые

&НаКлиенте
Процедура Подключаемый_Команда(Команда)
	// Механизмы расширения
	Результат = Ложь;
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РассылкаОтчетов") Тогда
		МодульРассылкаОтчетовКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РассылкаОтчетовКлиент");
		МодульРассылкаОтчетовКлиент.ФормаОтчетаОбработчикКоманды(ЭтотОбъект, Команда, Результат);
	КонецЕсли;
	ОтчетыКлиентПереопределяемый.ОбработчикКоманды(ЭтотОбъект, Команда, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗагрузитьВариантОтчета(Команда)
	Найденные = ДобавленныеВарианты.НайтиСтроки(Новый Структура("ИмяКоманды", Команда.Имя));
	Если Найденные.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Вариант отчета не найден.'"));
		Возврат;
	КонецЕсли;
	ВариантФормы = Найденные[0];
	ЗагрузитьВариант(ВариантФормы.КлючВарианта);
	КлючУникальности = Лев(КлючУникальности, Найти(КлючУникальности, "/")) + "КлючВарианта." + ВариантФормы.КлючВарианта;
	Если НастройкиОтчета.ФормироватьСразу Тогда
		ПодключитьОбработчикОжидания("Сформировать", 0.1, Истина);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Клиент

&НаКлиенте
Процедура ВыборПериодаИзВыпадающегоСписка(Результат, ПараметрыВыбора) Экспорт
	Если Результат = Неопределено Тогда
		Возврат; // Отмена выбора.
	КонецЕсли;
	
	Если Результат = -1 Тогда // Начало выбора.
		// Чтение параметров для формирования списка из сохраненного значения периода.
		ПараметрыВыбора.Вставить("НачалоПериода", ПараметрыВыбора.Значение.ДатаНачала);
		ПараметрыВыбора.Вставить("Вариант",       ПараметрыВыбора.Значение.Вариант);
		ИндексНачальногоЗначения = Неопределено;
	ИначеЕсли ТипЗнч(Результат.Значение) = Тип("Структура") Тогда
		// Чтение параметров для формирования списка из выбранного значения.
		ПараметрыВыбора.Вставить("НачалоПериода", Результат.Значение.НачалоПериода);
		ПараметрыВыбора.Вставить("Вариант",       Результат.Значение.Вариант);
		ИндексНачальногоЗначения = Результат.Значение.ИндексНачальногоЗначения;
	Иначе
		// Загрузка результата выбора.
		ЗагрузитьРезультатВыбораПериодаИзВыпадающегоСписка(Результат, ПараметрыВыбора);
		Возврат;
	КонецЕсли;
	
	// Формирование списка выбора.
	Если ПараметрыВыбора.Вариант = Неопределено Или ПараметрыВыбора.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод Тогда
		
		СписокПериодов = ОтчетыКлиентСервер.СписокФиксированныхПериодов(ПараметрыВыбора.НачалоПериода, ПараметрыВыбора.ВидПериода);
		
		Если ИндексНачальногоЗначения = Неопределено Тогда
			ИндексНачальногоЗначения = СписокПериодов.НайтиПоЗначению(ПараметрыВыбора.НачалоПериода);
		КонецЕсли;
		
		ОписаниеНавигационногоЭлемента = Новый Структура;
		ОписаниеНавигационногоЭлемента.Вставить("НачалоПериода",            СписокПериодов[0].Значение);
		ОписаниеНавигационногоЭлемента.Вставить("Вариант",                  Неопределено);
		ОписаниеНавигационногоЭлемента.Вставить("ИндексНачальногоЗначения", 0);
		СписокПериодов[0].Значение = ОписаниеНавигационногоЭлемента;
		
		ОписаниеНавигационногоЭлемента = Новый Структура;
		ОписаниеНавигационногоЭлемента.Вставить("НачалоПериода",            СписокПериодов[8].Значение);
		ОписаниеНавигационногоЭлемента.Вставить("Вариант",                  Неопределено);
		ОписаниеНавигационногоЭлемента.Вставить("ИндексНачальногоЗначения", 8);
		СписокПериодов[8].Значение = ОписаниеНавигационногоЭлемента;
		
		Если Не ПараметрыВыбора.Свойство("ВариантСтандартногоПериодаПоВиду") Тогда
			ПараметрыВыбора.Вставить("ВариантСтандартногоПериодаПоВиду", ОтчетыКлиентСервер.ПривестиВидПериодаКСтандартному(ПараметрыВыбора.ВидПериода));
		КонецЕсли;
		
		ОписаниеНавигационногоЭлемента = Новый Структура;
		ОписаниеНавигационногоЭлемента.Вставить("НачалоПериода",            ПараметрыВыбора.НачалоПериода);
		ОписаниеНавигационногоЭлемента.Вставить("Вариант",                  ПараметрыВыбора.ВариантСтандартногоПериодаПоВиду);
		ОписаниеНавигационногоЭлемента.Вставить("ИндексНачальногоЗначения", Неопределено);
		СписокПериодов.Добавить(ОписаниеНавигационногоЭлемента, НСтр("ru = 'Относительный...'"));
		
	Иначе
		
		СписокПериодов = ОтчетыКлиентСервер.СписокВычисляемыхПериодов(ПараметрыВыбора.ВидПериода);
		
		Если ИндексНачальногоЗначения = Неопределено Тогда
			ИндексНачальногоЗначения = СписокПериодов.НайтиПоЗначению(ПараметрыВыбора.Вариант);
		КонецЕсли;
		
		ОписаниеНавигационногоЭлемента = Новый Структура;
		ОписаниеНавигационногоЭлемента.Вставить("НачалоПериода",            ПараметрыВыбора.НачалоПериода);
		ОписаниеНавигационногоЭлемента.Вставить("Вариант",                  Неопределено);
		ОписаниеНавигационногоЭлемента.Вставить("ИндексНачальногоЗначения", Неопределено);
		СписокПериодов.Добавить(ОписаниеНавигационногоЭлемента, НСтр("ru = 'Фиксированный...'"));
		
	КонецЕсли;
	
	Если ИндексНачальногоЗначения = Неопределено Тогда
		ИндексНачальногоЗначения = СписокПериодов.Количество() - 1;
	КонецЕсли;
	
	ПеременныеКлиента.Вставить("ВыборПериодаИзВыпадающегоСписка", Новый Структура);
	ПеременныеКлиента.ВыборПериодаИзВыпадающегоСписка.Вставить("ПараметрыВыбора", ПараметрыВыбора);
	ПеременныеКлиента.ВыборПериодаИзВыпадающегоСписка.Вставить("СписокПериодов", СписокПериодов);
	ПеременныеКлиента.ВыборПериодаИзВыпадающегоСписка.Вставить("ИндексНачальногоЗначения", ИндексНачальногоЗначения);
	Если Результат = -1 Тогда
		НачатьВыборПериодаИзВыпадающегоСписка();
	Иначе
		ПодключитьОбработчикОжидания("НачатьВыборПериодаИзВыпадающегоСписка", 0.1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НачатьВыборПериодаИзВыпадающегоСписка()
	Если ПеременныеКлиента.Свойство("ВыборПериодаИзВыпадающегоСписка") Тогда
		Контекст = ПеременныеКлиента.ВыборПериодаИзВыпадающегоСписка;
		ПеременныеКлиента.Удалить("ВыборПериодаИзВыпадающегоСписка");
		Обработчик = Новый ОписаниеОповещения("ВыборПериодаИзВыпадающегоСписка", ЭтотОбъект, Контекст.ПараметрыВыбора);
		ПоказатьВыборИзСписка(Обработчик, Контекст.СписокПериодов, Контекст.ПараметрыВыбора.Элемент, Контекст.ИндексНачальногоЗначения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРезультатВыбораПериодаИзВыпадающегоСписка(Результат, ПараметрыВыбора)
	Значение = ПараметрыВыбора.Значение;
	
	// Запись результата выбора в данные формы и пользовательские настройки КД.
	Если ТипЗнч(Результат.Значение) = Тип("ВариантСтандартногоПериода") Тогда
		ЭтотОбъект[ПараметрыВыбора.ПериодПредставлениеИмя] = ?(ПустаяСтрока(Результат.Представление), Строка(Результат.Значение), Результат.Представление);
		Значение.Вариант = Результат.Значение;
	Иначе
		НачалоПериода = ОтчетыКлиентСервер.НачалоПериодаОтчета(ПараметрыВыбора.ВидПериода, Результат.Значение);
		КонецПериода  = ОтчетыКлиентСервер.КонецПериодаОтчета(ПараметрыВыбора.ВидПериода, Результат.Значение);
		
		ЭтотОбъект[ПараметрыВыбора.ПериодПредставлениеИмя] = Результат.Представление;
		
		Значение.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
		Значение.ДатаНачала    = НачалоПериода;
		Значение.ДатаОкончания = КонецПериода;
	КонецЕсли;
	
	ЭтотОбъект[ПараметрыВыбора.ПериодЗначениеИмя] = Значение;
	
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(ПараметрыВыбора.ИдентификаторЭлемента);
	Если ПараметрыВыбора.ЭтоПараметр Тогда
		ПользовательскаяНастройкаКД.Значение = Значение;
	Иначе
		ПользовательскаяНастройкаКД.ПравоеЗначение = Значение;
	КонецЕсли;
	
	ПользовательскаяНастройкаКД.Использование = Истина;
	
КонецПроцедуры

&НаКлиенте
Функция НайтиПользовательскуюНастройкуЭлемента(ИмяИлиИдентификаторЭлемента)
	// Для пользовательских настроек хранятся идентификаторы компоновки данных,
	//  поскольку они не могут храниться по ссылке (происходит копирование значения).
	Если СтрДлина(ИмяИлиИдентификаторЭлемента) = 32 Тогда
		ИдентификаторЭлемента = ИмяИлиИдентификаторЭлемента;
	Иначе
		ИдентификаторЭлемента = Прав(ИмяИлиИдентификаторЭлемента, 32);
	КонецЕсли;
	ИдентификаторКД = БыстрыйПоискПользовательскихНастроек.Получить(ИдентификаторЭлемента);
	Возврат Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ПолучитьОбъектПоИдентификатору(ИдентификаторКД);
КонецФункции

&НаКлиенте
// Исключение из стандартов разработки.
Функция ВыполнитьКонтекстныйВызовСервера(КлючОперации, ПараметрыОперации) Экспорт
	// Программный интерфейс для контекстного вызова сервера из клиентского общего модуля.
	
	Возврат КонтекстныйВызовСервера(КлючОперации, ПараметрыОперации);
	
КонецФункции

&НаКлиенте
Процедура ФоновоеЗаданиеПроверитьНаКлиенте()
	Если ФоновоеЗаданиеВыполнено() Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Отчет сформирован'"), , Заголовок);
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", ПараметрыОбработчика.ТекущийИнтервал, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуЯчеек()
	СуммаВыделенныхЯчеек = СтандартныеПодсистемыКлиентСервер.СуммаЯчеек(ОтчетТабличныйДокумент, Неопределено);
	Элементы.АвтоСуммаКнопка.Доступность = (СуммаВыделенныхЯчеек = "<");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПоЭлектроннойПочтеЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		СформироватьНепосредственно();
		ПоказатьДиалогОтправкиПоЭлектроннойПочте();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДиалогОтправкиПоЭлектроннойПочте()
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьДиалогОтправкиПоЭлектроннойПочтеЗавершение", ЭтотОбъект);
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
		МодульРаботаСПочтовымиСообщениямиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСПочтовымиСообщениямиКлиент");
		МодульРаботаСПочтовымиСообщениямиКлиент.ПроверитьНаличиеУчетнойЗаписиДляОтправкиПочты(ОписаниеОповещения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДиалогОтправкиПоЭлектроннойПочтеЗавершение(УчетнаяЗаписьНастроена, ДополнительныеПараметры) Экспорт
	Если УчетнаяЗаписьНастроена <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ТабличныеДокументы = Новый СписокЗначений;
	ТабличныеДокументы.Добавить(ЭтотОбъект.ОтчетТабличныйДокумент, ЭтотОбъект.ОтчетНаименованиеТекущегоВарианта);
	
	ФормаЗаголовок = СтрЗаменить(НСтр("ru = 'Отправка отчета ""%1"" по почте'"), "%1", ЭтотОбъект.ОтчетНаименованиеТекущегоВарианта);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТабличныеДокументы", ТабличныеДокументы);
	ПараметрыФормы.Вставить("Тема",               ЭтотОбъект.ОтчетНаименованиеТекущегоВарианта);
	ПараметрыФормы.Вставить("Заголовок",          ФормаЗаголовок);
	
	ОткрытьФорму("ОбщаяФорма.ОтправкаТабличныхДокументовПоПочте", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура Сформировать()
	Если СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая
		Или ТипЗнч(НастройкиОтчета.ОтчетСсылка) = Тип("Строка") Тогда
		СформироватьНепосредственно();
	Иначе
		ТребуетсяОбработчик = ФоновоеЗаданиеЗапустить();
		Если ТребуетсяОбработчик Тогда
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
			ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", 1, Истина);
		КонецЕсли;
	КонецЕсли;
	
	СостояниеДоИзменения = Новый Структура("Видимость, ДополнительныйРежимОтображения, Картинка, Текст");
	ЗаполнитьЗначенияСвойств(СостояниеДоИзменения, Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния);
	
	Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Удалить("ФормированиеПриОткрытии");
	
	ЗаполнитьЗначенияСвойств(Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния, СостояниеДоИзменения);
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьДоступностьЕслиТребуется()
	Если ВариантыПанелиКлючТекущегоВарианта <> " - " Тогда // Изменения уже применены
		Возврат;
	КонецЕсли;
	ВидимостьДоступностьКорректность("");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вызов сервера

&НаСервере
Процедура ВидимостьДоступностьКорректность(Изменения = "")
	ПоказыватьКомандыВариантовОтчетов = РежимВариантаОтчета И НастройкиОтчета.РазрешеноМенятьВарианты;
	
	Если Изменения = "" Тогда
		// Вычисление параметров отображения.
		ЕстьНастройки = ЕстьБыстрыеНастройки Или ЕстьОбычныеНастройки;
		
		// Применение параметров отображения.
		Элементы.ВсеНастройки_Левая.Видимость = ПоказыватьКомандыВариантовОтчетов Или ЕстьОбычныеНастройки;
		Элементы.ВсеНастройки.Видимость       = ПоказыватьКомандыВариантовОтчетов Или ЕстьОбычныеНастройки;
		Элементы.ГруппаНастройкиОтчета_Левая.Видимость = ПоказыватьКомандыВариантовОтчетов;
		Элементы.ВыбратьВариант.Видимость              = ПоказыватьКомандыВариантовОтчетов И Не РежимРасшифровки;
		Элементы.СохранитьВариант.Видимость            = ПоказыватьКомандыВариантовОтчетов;
		Элементы.ИзменитьВариант.Видимость             = ПоказыватьКомандыВариантовОтчетов;
		Элементы.ГруппаПользовательскиеНастройки.Видимость = ПоказыватьКомандыВариантовОтчетов И ЕстьНастройки;
		
		// Формировать сразу.
		Элементы.ФормироватьСразу.Пометка = НастройкиОтчета.ФормироватьСразу;
	КонецЕсли;
	
	// Команды выбора вариантов.
	Если ВариантыПанелиКлючТекущегоВарианта <> КлючТекущегоВарианта Тогда
		ВариантыПанелиКлючТекущегоВарианта = КлючТекущегоВарианта;
		
		Если ПоказыватьКомандыВариантовОтчетов Тогда
			ЗаполнитьКомандыВыбораВариантов();
		КонецЕсли;
		
		Если ПравоВывода Тогда
			Уникальность = НастройкиОтчета.ПолноеИмя;
			Если ЗначениеЗаполнено(КлючТекущегоВарианта) Тогда
				Уникальность = Уникальность + "/КлючВарианта." + КлючТекущегоВарианта;
			КонецЕсли;
			
			КлючСохраненияПоложенияОкна = Уникальность;
			
			НастройкиОтчета.Печать.Вставить("КлючПараметровПечати", Уникальность);
			НастройкиПечатиВосстановить();
		КонецЕсли;
	КонецЕсли;
	
	// Заголовок.
	ОтчетНаименованиеТекущегоВарианта = СокрЛП(ОтчетНаименованиеТекущегоВарианта);
	Если ЗначениеЗаполнено(ОтчетНаименованиеТекущегоВарианта) Тогда
		Заголовок = ОтчетНаименованиеТекущегоВарианта;
	Иначе
		Заголовок = НастройкиОтчета.Наименование;
	КонецЕсли;
	Если РежимРасшифровки Тогда
		Заголовок = Заголовок + " (" + НСтр("ru = 'Расшифровка'") + ")";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура БыстрыеНастройкиЗаполнить(Знач ПараметрыЗаполнения)
	
	// Вставка значений по умолчанию для обязательных ключей параметров заполнения.
	БыстрыеНастройкиДозаполнитьПараметры(ПараметрыЗаполнения);
	
	Если НастройкиОтчета.События.ПередЗаполнениемПанелиБыстрыхНастроек
		Или НастройкиОтчета.События.ПослеЗаполненияПанелиБыстрыхНастроек Тогда
		ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	КонецЕсли;
	
	// Вызов переопределяемого модуля.
	Если НастройкиОтчета.События.ПередЗаполнениемПанелиБыстрыхНастроек Тогда
		ОтчетОбъект.ПередЗаполнениемПанелиБыстрыхНастроек(ЭтотОбъект, ПараметрыЗаполнения);
	Иначе
		ОтчетыПереопределяемый.ПередЗаполнениемПанелиБыстрыхНастроек(ЭтотОбъект, ПараметрыЗаполнения);
	КонецЕсли;
	
	// Запись новых настроек варианта и пользовательских настроек в компоновщик.
	БыстрыеНастройкиЗагрузитьНастройкиВКомпоновщик(ПараметрыЗаполнения);
	
	// Получение информации из КД.
	УсловияВывода = Новый Структура;
	УсловияВывода.Вставить("ТолькоПользовательские", Истина);
	УсловияВывода.Вставить("ТолькоБыстрые",          Истина);
	УсловияВывода.Вставить("ИдентификаторТекущегоУзлаКД", Неопределено);
	Информация = ОтчетыСервер.РасширеннаяИнформацияОНастройках(Отчет.КомпоновщикНастроек, ЭтотОбъект, УсловияВывода);
	ЕстьБыстрыеНастройки = Информация.ЕстьБыстрыеНастройки;
	ЕстьОбычныеНастройки = Информация.ЕстьОбычныеНастройки;
	
	// Удаление элементов старых настроек.
	БыстрыеНастройкиУдалитьСтарыеЭлементыИКоманды(ПараметрыЗаполнения);
	
	// Добавление элементов актуальных настроек и загрузка значений.
	БыстрыеНастройкиСоздатьЭлементыУправленияИЗагрузитьЗначения(ПараметрыЗаполнения, Информация);
	
	// Связи.
	ЗарегистрироватьОтключаемыеСвязи(Информация);
	
	// Обработка дополнительных настроек.
	ПослеИзмененияКлючевыхСостояний(ПараметрыЗаполнения);
	
	// Заголовок, видимость/доступность элементов, параметры печати и окна.
	ВидимостьДоступностьКорректность("");
	
	// Вызов переопределяемого модуля.
	Если НастройкиОтчета.События.ПослеЗаполненияПанелиБыстрыхНастроек Тогда
		ОтчетОбъект.ПослеЗаполненияПанелиБыстрыхНастроек(ЭтотОбъект, ПараметрыЗаполнения);
	Иначе
		ОтчетыПереопределяемый.ПослеЗаполненияПанелиБыстрыхНастроек(ЭтотОбъект, ПараметрыЗаполнения);
	КонецЕсли;
	
	Если НастройкиОтчета.Свойство("ОтчетОбъект") Тогда
		НастройкиОтчета.Удалить("ОтчетОбъект");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция КонтекстныйВызовСервера(КлючОперации, ПараметрыОперации)
	РезультатВызова = Новый Структура;
	Если НастройкиОтчета.События.КонтекстныйВызовСервера Тогда
		ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
		ОтчетОбъект.КонтекстныйВызовСервера(ЭтотОбъект, КлючОперации, ПараметрыОперации, РезультатВызова);
	Иначе
		ОтчетыПереопределяемый.КонтекстныйВызовСервера(ЭтотОбъект, КлючОперации, ПараметрыОперации, РезультатВызова);
	КонецЕсли;
	Возврат РезультатВызова;
КонецФункции

&НаСервере
Процедура СформироватьНепосредственно()
	
	ДопСвойства = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
	
	// Формирование отчета.
	ДопСвойства.Вставить("КлючВарианта", КлючТекущегоВарианта);
	НастройкиПечатиСохранить();
	ИнформацияОбОшибке = Неопределено;
	Попытка
		СкомпоноватьРезультат(РежимКомпоновкиРезультата.Авто);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
	КонецПопытки;
	ДопСвойства.Удалить("КлючВарианта");
	НастройкиПечатиВосстановить();
	
	Если ИнформацияОбОшибке <> Неопределено Тогда
		ПоказатьОшибкиФормирования(ИнформацияОбОшибке);
		Возврат;
	КонецЕсли;
	
	// Перезаполнение настроек.
	РезультатФормирования = Новый Структура;
	РезультатФормирования.Вставить("ВариантМодифицирован", Ложь);
	РезультатФормирования.Вставить("ПользовательскиеНастройкиМодифицированы", Ложь);
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДопСвойства, "ВариантМодифицирован") = Истина Тогда
		РезультатФормирования.ВариантМодифицирован = Истина;
	КонецЕсли;
	Если РезультатФормирования.ВариантМодифицирован
		Или ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДопСвойства, "ПользовательскиеНастройкиМодифицированы") = Истина Тогда
		РезультатФормирования.ПользовательскиеНастройкиМодифицированы = Истина;
	КонецЕсли;
	ДопСвойства.Удалить("ВариантМодифицирован");
	ДопСвойства.Удалить("ПользовательскиеНастройкиМодифицированы");
	
	Если РезультатФормирования.ВариантМодифицирован
		Или РезультатФормирования.ПользовательскиеНастройкиМодифицированы Тогда
		РезультатФормирования.Вставить("Событие", Новый Структура);
		РезультатФормирования.Событие.Вставить("Имя", "ПослеФормирования");
		РезультатФормирования.Событие.Вставить("Непосредственно", Истина);
		БыстрыеНастройкиЗаполнить(РезультатФормирования);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ФоновоеЗаданиеЗапустить()
	ДопСвойства = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
	
	ФормированиеПриОткрытии = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДопСвойства, "ФормированиеПриОткрытии", Ложь);
	Если Не ПроверитьЗаполнение() Тогда
		Если ФормированиеПриОткрытии Тогда
			ТекстОшибки = "";
			Сообщения = ПолучитьСообщенияПользователю(Истина);
			Для Каждого Сообщение Из Сообщения Цикл
				ТекстОшибки = ТекстОшибки + ?(ТекстОшибки = "", "", ";" + Символы.ПС + Символы.ПС) + Сообщение.Текст;
			КонецЦикла;
			ПоказатьОшибкиФормирования(ТекстОшибки);
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	// Запуск фонового задания
	ДопСвойства.Вставить("КлючВарианта", КлючТекущегоВарианта);
	
	ПараметрыФормированияОтчета = Новый Структура;
	ПараметрыФормированияОтчета.Вставить("ОтчетСсылка", НастройкиОтчета.ОтчетСсылка);
	ПараметрыФормированияОтчета.Вставить("Настройки",                 Отчет.КомпоновщикНастроек.Настройки);
	ПараметрыФормированияОтчета.Вставить("ФиксированныеНастройки",    Отчет.КомпоновщикНастроек.ФиксированныеНастройки);
	ПараметрыФормированияОтчета.Вставить("ПользовательскиеНастройки", Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
	
	ИнформацияОбОшибке = Неопределено;
	Попытка
		РезультатФоновогоЗадания = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"ВариантыОтчетов.СформироватьОтчет",
			ПараметрыФормированияОтчета,
			НСтр("ru = 'Варианты отчетов: Формирование отчета'"));
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
	КонецПопытки;
	ДопСвойства.Удалить("КлючВарианта");
	Если ИнформацияОбОшибке <> Неопределено Тогда
		ПоказатьОшибкиФормирования(ИнформацияОбОшибке);
		Возврат Ложь;
	КонецЕсли;
	
	ФоновоеЗаданиеИдентификатор  = РезультатФоновогоЗадания.ИдентификаторЗадания;
	ФоновоеЗаданиеАдресХранилища = РезультатФоновогоЗадания.АдресХранилища;
	
	Если РезультатФоновогоЗадания.ЗаданиеВыполнено Тогда
		ФоновоеЗаданиеЗагрузитьРезультат();
		ЗаданиеЗапущено = Ложь;
	Иначе
		ОтображениеСостояния = Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния;
		ОтображениеСостояния.Видимость                      = Истина;
		ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
		ОтображениеСостояния.Картинка                       = БиблиотекаКартинок.ДлительнаяОперация48;
		ОтображениеСостояния.Текст                          = НСтр("ru = 'Отчет формируется...'");
		
		ЗаданиеЗапущено = Истина;
	КонецЕсли;
	
	Возврат ЗаданиеЗапущено;
	
КонецФункции

&НаСервере
Функция ФоновоеЗаданиеВыполнено()
	Попытка
		ЗаданиеВыполнено = ДлительныеОперации.ЗаданиеВыполнено(ФоновоеЗаданиеИдентификатор);
	Исключение
		ПоказатьОшибкиФормирования(ИнформацияОбОшибке());
		ВызватьИсключение;
	КонецПопытки;
	
	Если ЗаданиеВыполнено Тогда
		ФоновоеЗаданиеЗагрузитьРезультат();
	КонецЕсли;
	
	Возврат ЗаданиеВыполнено;
КонецФункции

&НаСервереБезКонтекста
Процедура ФоновоеЗаданиеОтменить(ФоновоеЗаданиеИдентификатор)
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ФоновоеЗаданиеИдентификатор);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВычислитьСуммуСервер(Знач ОтчетТабличныйДокумент, Знач ВыделенныеОбласти)
	Возврат СтандартныеПодсистемыКлиентСервер.СуммаЯчеек(ОтчетТабличныйДокумент, ВыделенныеОбласти);
КонецФункции

&НаСервере
Процедура ЗагрузитьВариант(КлючВарианта)
	УстановитьТекущийВариант(КлючВарианта);
	ОтображениеСостояния = Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния;
	ОтображениеСостояния.Видимость = Истина;
	ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
	ОтображениеСостояния.Картинка  = БиблиотекаКартинок.Информация32;
	ОтображениеСостояния.Текст     = НСтр("ru = 'Выбран другой вариант отчета. Нажмите ""Сформировать"" для получения отчета.'");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Сервер

&НаСервере
Процедура БыстрыеНастройкиДозаполнитьПараметры(ПараметрыЗаполнения)
	Если Не ПараметрыЗаполнения.Свойство("Событие") Тогда
		ПараметрыЗаполнения.Вставить("Событие", Новый Структура("Имя", ""));
	КонецЕсли;
	Если Не ПараметрыЗаполнения.Свойство("ВариантМодифицирован") Тогда
		ПараметрыЗаполнения.Вставить("ВариантМодифицирован", Ложь);
	КонецЕсли;
	Если Не ПараметрыЗаполнения.Свойство("ПользовательскиеНастройкиМодифицированы") Тогда
		ПараметрыЗаполнения.Вставить("ПользовательскиеНастройкиМодифицированы", Ложь);
	КонецЕсли;
	Если Не ПараметрыЗаполнения.Свойство("СброситьПользовательскиеНастройки") Тогда
		ПараметрыЗаполнения.Вставить("СброситьПользовательскиеНастройки", Ложь);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура БыстрыеНастройкиЗагрузитьНастройкиВКомпоновщик(ПараметрыЗаполнения)
	Если ПараметрыЗаполнения.Свойство("КомпоновщикНастроекКД") Тогда
		Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(ПараметрыЗаполнения.КомпоновщикНастроекКД.Настройки);
		Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ПараметрыЗаполнения.КомпоновщикНастроекКД.ПользовательскиеНастройки);
	КонецЕсли;
	
	Если ПараметрыЗаполнения.Свойство("НастройкиКД") Тогда
		Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(ПараметрыЗаполнения.НастройкиКД);
	КонецЕсли;
	
	Если ПараметрыЗаполнения.Свойство("ПользовательскиеНастройкиКД") Тогда
		Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ПараметрыЗаполнения.ПользовательскиеНастройкиКД);
	КонецЕсли;
	
	Если ПараметрыЗаполнения.СброситьПользовательскиеНастройки Тогда
		ПустойКомпоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
		Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ПустойКомпоновщик.ПользовательскиеНастройки);
	КонецЕсли;
	
	Если ПараметрыЗаполнения.Свойство("ФормаНастроекРасширенныйРежим") Тогда
		НастройкиОтчета.Вставить("ФормаНастроекРасширенныйРежим", ПараметрыЗаполнения.ФормаНастроекРасширенныйРежим);
	КонецЕсли;
	Если ПараметрыЗаполнения.Свойство("ФормаНастроекИмяСтраницы") Тогда
		НастройкиОтчета.Вставить("ФормаНастроекИмяСтраницы", ПараметрыЗаполнения.ФормаНастроекИмяСтраницы);
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ВариантМодифицирован Тогда
		ВариантМодифицирован = Истина;
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ПользовательскиеНастройкиМодифицированы Тогда
		ПользовательскиеНастройкиМодифицированы = Истина;
	КонецЕсли;
	
	Если НастройкиОтчета.ПрочитатьФлажокФормироватьСразуИзПользовательскихНастроек Тогда
		НастройкиОтчета.ПрочитатьФлажокФормироватьСразуИзПользовательскихНастроек = Ложь;
		НастройкиОтчета.ФормироватьСразу = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства,
			"ФормироватьСразу",
			НастройкиОтчета.ФормироватьСразу);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура БыстрыеНастройкиУдалитьСтарыеЭлементыИКоманды(ПараметрыЗаполнения)
	// Удаление элементов.
	УдаляемыеЭлементы = Новый Массив;
	ДобавитьПодчиненныеЭлементы(УдаляемыеЭлементы, Элементы.БыстрыеНастройки.ПодчиненныеЭлементы);
	Для Каждого Элемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(Элемент);
	КонецЦикла;
	
	// Удаление команд
	УдаляемыеКоманды = Новый Массив;
	Для Каждого Команда Из Команды Цикл
		Если ПостоянныеКоманды.НайтиПоЗначению(Команда.Имя) = Неопределено Тогда
			УдаляемыеКоманды.Добавить(Команда);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Команда Из УдаляемыеКоманды Цикл
		Команды.Удалить(Команда);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ДобавитьПодчиненныеЭлементы(Куда, Откуда)
	Для Каждого ПодчиненныйЭлемент Из Откуда Цикл
		Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаФормы")
			Или ТипЗнч(ПодчиненныйЭлемент) = Тип("ТаблицаФормы") Тогда
			ДобавитьПодчиненныеЭлементы(Куда, ПодчиненныйЭлемент.ПодчиненныеЭлементы);
		КонецЕсли;
		Куда.Добавить(ПодчиненныйЭлемент);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура БыстрыеНастройкиСоздатьЭлементыУправленияИЗагрузитьЗначения(ПараметрыЗаполнения, Информация)
	// Кэши для быстрого поиска с клиента.
	СоответствиеПользовательскихНастроек = Новый Соответствие;
	СоответствиеИменОбъектовМетаданных   = Информация.СоответствиеИменОбъектовМетаданных;
	СоответствиеОтключаемыхСвязей        = Новый Соответствие;
	
	// Удаление реквизитов
	ПараметрыЗаполнения.Вставить("Реквизиты", Новый Структура);
	ПараметрыЗаполнения.Реквизиты.Вставить("Добавляемые",  Новый Массив);
	ПараметрыЗаполнения.Реквизиты.Вставить("Удаляемые",    Новый Массив);
	ПараметрыЗаполнения.Реквизиты.Вставить("Существующие", Новый Соответствие);
	ВсеРеквизиты = ПолучитьРеквизиты();
	Для Каждого Реквизит Из ВсеРеквизиты Цикл
		ПолноеИмяРеквизита = Реквизит.Имя + ?(ПустаяСтрока(Реквизит.Путь), "", "." + Реквизит.Путь);
		Если ПостоянныеРеквизиты.НайтиПоЗначению(ПолноеИмяРеквизита) = Неопределено Тогда
			ПараметрыЗаполнения.Реквизиты.Существующие.Вставить(ПолноеИмяРеквизита, Реквизит.ТипЗначения);
		КонецЕсли;
	КонецЦикла;
	
	// Локальные переменные для установки значений и свойств после создания реквизитов.
	ДобавленныеПоляВвода          = Новый Структура;
	ДобавленныеСтандартныеПериоды = Новый Массив;
	
	// Структура связей.
	Связи = Информация.Связи;
	
	ИменаОсновныхРеквизитовФормы     = Новый Соответствие;
	ИменаЭлементовДляУстановкиСвязей = Новый Соответствие;
	ИменаФлажковИспользование        = Новый Соответствие;
	НастройкиСВидомСравненияРавно    = Новый Соответствие;
	
	КомпоновщикНастроекКД       = Отчет.КомпоновщикНастроек;
	ПользовательскиеНастройкиКД = КомпоновщикНастроекКД.ПользовательскиеНастройки;
	НастройкиКД                 = КомпоновщикНастроекКД.ПолучитьНастройки();
	
	ДополнительныеНастройкиЭлементов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПользовательскиеНастройкиКД.ДополнительныеСвойства, "ЭлементыФормы");
	Если ДополнительныеНастройкиЭлементов = Неопределено Тогда
		ДополнительныеНастройкиЭлементов = Новый Соответствие;
	КонецЕсли;
	
	Режимы = РежимОтображенияЭлементаНастройкиКомпоновкиДанных;
	
	ШаблонНастройки = Новый Структура("Тип, Подтип, Шаблон, СтрокаДерева,
		|ПользовательскаяНастройкаКД, Идентификатор, НастройкаВариантаКД, ДоступнаяНастройкаКД");
	ШаблонНастройки.Вставить("Иерархия", Ложь);
	ШаблонНастройки.Вставить("ФлажокИспользование", Ложь);
	ШаблонНастройки.Вставить("ВводСписком", Ложь);
	ШаблонНастройки.Вставить("ОграничиватьВыборУказаннымиЗначениями", Ложь);
	ШаблонНастройки = Новый ФиксированнаяСтруктура(ШаблонНастройки);
	
	ГруппыВывода = Новый Структура;
	ГруппыВывода.Вставить("Быстрые", Новый Структура("Порядок, Размер", Новый Массив, 0));
	
	ЕстьЗагрузкаДанныхИзФайла = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла");
	
	ВыводимыеНастройки = Информация.ПользовательскиеНастройки.Скопировать(Новый Структура("ВыводРазрешен, Быстрая", Истина, Истина));
	ВыводимыеНастройки.Сортировать("ИндексВКоллекции Возр");
	
	Прочее = Новый Структура;
	Прочее.Вставить("Связи",       Связи);
	Прочее.Вставить("ОтчетОбъект", Неопределено);
	Прочее.Вставить("ПараметрыЗаполнения",       ПараметрыЗаполнения);
	Прочее.Вставить("ПутьККомпоновщику",         "Отчет.КомпоновщикНастроек");
	Прочее.Вставить("ЕстьЗагрузкаДанныхИзФайла", ЕстьЗагрузкаДанныхИзФайла);
	Прочее.Вставить("ДополнительныеНастройкиЭлементов",   ДополнительныеНастройкиЭлементов);
	Прочее.Вставить("ИменаОсновныхРеквизитовФормы",       ИменаОсновныхРеквизитовФормы);
	Прочее.Вставить("ИменаЭлементовДляУстановкиСвязей",   ИменаЭлементовДляУстановкиСвязей);
	Прочее.Вставить("СоответствиеИменОбъектовМетаданных", СоответствиеИменОбъектовМетаданных);
	Прочее.Вставить("ДобавленныеПоляВвода",          ДобавленныеПоляВвода);
	Прочее.Вставить("ДобавленныеСтандартныеПериоды", ДобавленныеСтандартныеПериоды);
	Прочее.Вставить("ДобавленныеСпискиЗначений",     Неопределено);
	
	Для Каждого СвойстваНастройки Из ВыводимыеНастройки Цикл
		СоответствиеПользовательскихНастроек.Вставить(СвойстваНастройки.ИдентификаторЭлемента, СвойстваНастройки.ИдентификаторКД);
		ГруппаВывода = ГруппыВывода.Быстрые;
		ОтчетыСервер.ВывестиЭлементыНастройки(ЭтотОбъект, Элементы, СвойстваНастройки, ГруппаВывода, Прочее);
	КонецЦикла;
	
	ОтчетыСервер.ВывестиПоПорядку(ЭтотОбъект, ГруппыВывода.Быстрые, Элементы.БыстрыеНастройки, 2, Ложь);
	
	// Удаление старых и добавление новых реквизитов.
	Для Каждого КлючИЗначение Из ПараметрыЗаполнения.Реквизиты.Существующие Цикл
		ПараметрыЗаполнения.Реквизиты.Удаляемые.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	ИзменитьРеквизиты(ПараметрыЗаполнения.Реквизиты.Добавляемые, ПараметрыЗаполнения.Реквизиты.Удаляемые);
	
	// Поля ввода (установка значений и связей).
	Для Каждого КлючИЗначение Из ДобавленныеПоляВвода Цикл
		ИмяРеквизита = КлючИЗначение.Ключ;
		ЭтотОбъект[ИмяРеквизита] = КлючИЗначение.Значение;
		Элементы[ИмяРеквизита].ПутьКДанным = ИмяРеквизита;
	КонецЦикла;
	
	// Стандартные периоды (установка значений и связей).
	Для Каждого СвойстваНастройки Из ДобавленныеСтандартныеПериоды Цикл
		Дополнительно = СвойстваНастройки.Дополнительно;
		ЭтотОбъект[Дополнительно.ЗначениеИмя]      = СвойстваНастройки.Значение;
		ЭтотОбъект[Дополнительно.ВидПериодаИмя]    = Дополнительно.ВидПериода;
		ЭтотОбъект[Дополнительно.ПредставлениеИмя] = Дополнительно.Представление;
		Элементы[Дополнительно.ВидПериодаИмя].ПутьКДанным    = Дополнительно.ВидПериодаИмя;
		Элементы[Дополнительно.ПредставлениеИмя].ПутьКДанным = Дополнительно.ПредставлениеИмя;
		Элементы[Дополнительно.ПериодНачалоИмя].ПутьКДанным    = Дополнительно.ЗначениеИмя + ".ДатаНачала";
		Элементы[Дополнительно.ПериодОкончаниеИмя].ПутьКДанным = Дополнительно.ЗначениеИмя + ".ДатаОкончания";
	КонецЦикла;
	
	// Сохранение соответствий для быстрого поиска в данные формы.
	БыстрыйПоискПользовательскихНастроек = Новый ФиксированноеСоответствие(СоответствиеПользовательскихНастроек);
	БыстрыйПоискИменОбъектовМетаданных   = Новый ФиксированноеСоответствие(СоответствиеИменОбъектовМетаданных);
	БыстрыйПоискОтключаемыхСвязей        = Новый ФиксированноеСоответствие(СоответствиеОтключаемыхСвязей);
	
	ПользовательскиеНастройкиКД.ДополнительныеСвойства.Вставить("ЭлементыФормы", ДополнительныеНастройкиЭлементов);
КонецПроцедуры

&НаСервере
Процедура НастройкиПечатиСохранить()
	ЗаполнитьЗначенияСвойств(НастройкиОтчета.Печать, ОтчетТабличныйДокумент);
КонецПроцедуры

&НаСервере
Процедура НастройкиПечатиВосстановить()
	ЗаполнитьЗначенияСвойств(ОтчетТабличныйДокумент, НастройкиОтчета.Печать);
КонецПроцедуры

&НаСервере
Процедура ФоновоеЗаданиеЗагрузитьРезультат()
	
	ОтображениеСостояния = Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния;
	ОтображениеСостояния.Видимость                      = Ложь;
	ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
	ОтображениеСостояния.Картинка                       = Новый Картинка;
	ОтображениеСостояния.Текст                          = "";
	
	РезультатФормирования = ПолучитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
	
	Если РезультатФормирования = Неопределено Тогда
		
		СформироватьНепосредственно();
		
	Иначе
		
		НастройкиПечатиСохранить();
		ОтчетТабличныйДокумент = РезультатФормирования.ОтчетТабличныйДокумент;
		НастройкиПечатиВосстановить();
		
		Если ЗначениеЗаполнено(ОтчетДанныеРасшифровки) И ЭтоАдресВременногоХранилища(ОтчетДанныеРасшифровки) Тогда
			УдалитьИзВременногоХранилища(ОтчетДанныеРасшифровки);
		КонецЕсли;
		ОтчетДанныеРасшифровки = ПоместитьВоВременноеХранилище(РезультатФормирования.ОтчетРасшифровка, УникальныйИдентификатор);
		
		Если РезультатФормирования.ВариантМодифицирован
			Или РезультатФормирования.ПользовательскиеНастройкиМодифицированы Тогда
			РезультатФормирования.Вставить("Событие", Новый Структура);
			РезультатФормирования.Событие.Вставить("Имя", "ПослеФормирования");
			РезультатФормирования.Событие.Вставить("Непосредственно", Ложь);
			БыстрыеНастройкиЗаполнить(РезультатФормирования);
		КонецЕсли;
		
	КонецЕсли;
	
	УдалитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
	ФоновоеЗаданиеАдресХранилища = Неопределено;
	ФоновоеЗаданиеИдентификатор = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьОшибкиФормирования(ИнформацияОбОшибке)
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
		ОписаниеОшибки = ОтчетыКлиентСервер.КраткоеПредставлениеОшибкиФормированияОтчета(ИнформацияОбОшибке);
		ПодробноеПредставлениеОшибки = НСтр("ru = 'Ошибка при формировании:'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		Если ПустаяСтрока(ОписаниеОшибки) Тогда
			ОписаниеОшибки = ПодробноеПредставлениеОшибки;
		КонецЕсли;
	Иначе
		ОписаниеОшибки = ИнформацияОбОшибке;
		ПодробноеПредставлениеОшибки = "";
	КонецЕсли;
	
	ОтображениеСостояния = Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния;
	ОтображениеСостояния.Видимость                      = Истина;
	ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
	ОтображениеСостояния.Картинка                       = Новый Картинка;
	ОтображениеСостояния.Текст                          = ОписаниеОшибки;
	
	Если Не ПустаяСтрока(ПодробноеПредставлениеОшибки) Тогда
		ВариантыОтчетов.ПредупреждениеПоВарианту(НастройкиОтчета.ВариантСсылка, ПодробноеПредставлениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура РекурсивныйАнализНастроекКД(Коллекция, Соответствие)
	Если Коллекция = Неопределено Тогда
		РекурсивныйАнализНастроекКД(Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы, Соответствие);
		РекурсивныйАнализНастроекКД(Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы, Соответствие);
		РекурсивныйАнализНастроекКД(Отчет.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы, Соответствие);
		РекурсивныйАнализНастроекКД(Отчет.КомпоновщикНастроек.ФиксированныеНастройки.ПараметрыДанных.Элементы, Соответствие);
	Иначе
		// Регистрация значений включенных отборов и параметров КД, не выведенных в быстрый доступ.
		Для Каждого НастройкаВарианта Из Коллекция Цикл
			// ЭлементОтбораКомпоновкиДанных, ГруппаЭлементовОтбораКомпоновкиДанных,
			// ЗначениеПараметраКомпоновкиДанных, ЗначениеПараметраНастроекКомпоновкиДанных.
			Если ТипЗнч(НастройкаВарианта) = Тип("ЗначениеПараметраКомпоновкиДанных") Тогда
				Значение = НастройкаВарианта.Значение;
				Если ЗначениеИлиПолеКомпоновкиДанныхЗаполнено(Значение) Тогда
					ПолеКД = Новый ПолеКомпоновкиДанных("ПараметрыДанных." + Строка(НастройкаВарианта.Параметр));
					Соответствие.Вставить(ПолеКД, Значение);
				КонецЕсли;
				РекурсивныйАнализНастроекКД(НастройкаВарианта.ЗначенияВложенныхПараметров, Соответствие);
				Продолжить;
			КонецЕсли;
			
			Если НастройкаВарианта.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ
				И ЗначениеЗаполнено(НастройкаВарианта.ИдентификаторПользовательскойНастройки) Тогда
				Продолжить;
			КонецЕсли;
			Если НастройкаВарианта.Использование <> Истина Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(НастройкаВарианта) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				РекурсивныйАнализНастроекКД(НастройкаВарианта.Элементы, Соответствие);
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(НастройкаВарианта) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				Значение = НастройкаВарианта.ПравоеЗначение;
				Если ЗначениеИлиПолеКомпоновкиДанныхЗаполнено(Значение) Тогда
					ПолеКД = НастройкаВарианта.ЛевоеЗначение;
					Соответствие.Вставить(ПолеКД, Значение);
				КонецЕсли;
			ИначеЕсли ТипЗнч(НастройкаВарианта) = Тип("ЗначениеПараметраКомпоновкиДанных") Тогда
				Значение = НастройкаВарианта.ПравоеЗначение;
				Если ЗначениеИлиПолеКомпоновкиДанныхЗаполнено(Значение) Тогда
					ПолеКД = Новый ПолеКомпоновкиДанных("ПараметрыДанных." + Строка(НастройкаВарианта.Параметр));
					Соответствие.Вставить(ПолеКД, Значение);
				КонецЕсли;
				РекурсивныйАнализНастроекКД(НастройкаВарианта.ЗначенияВложенныхПараметров, Соответствие);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗначениеИлиПолеКомпоновкиДанныхЗаполнено(Значение)
	Если ТипЗнч(Значение) = Тип("ПолеКомпоновкиДанных") Тогда
		Возврат ЗначениеЗаполнено(Строка(Значение));
	Иначе
		Возврат ЗначениеЗаполнено(Значение);
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ЗаполнитьКомандыВыбораВариантов()
	ВариантыФормы = РеквизитФормыВЗначение("ДобавленныеВарианты");
	ВариантыФормы.Колонки.Добавить("Найден", Новый ОписаниеТипов("Булево"));
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Отчеты", ОтчетыКлиентСервер.ЗначениеВМассив(НастройкиОтчета.ОтчетСсылка));
	ПараметрыПоиска.Вставить("ПометкаУдаления", Ложь);
	ПараметрыПоиска.Вставить("ПолучатьИтоговуюТаблицу", Истина);
	РезультатПоиска = ВариантыОтчетов.НайтиСсылки(ПараметрыПоиска);
	ТаблицаВариантов = РезультатПоиска.ТаблицаЗначений;
	Если НастройкиОтчета.Внешний Тогда // Добавить предопределенные варианты внешнего отчета в таблицу вариантов.
		Для Каждого ЭлементСписка Из НастройкиОтчета.ПредопределенныеВарианты Цикл
			СтрокаТаблицы = ТаблицаВариантов.Добавить();
			СтрокаТаблицы.Наименование = ЭлементСписка.Представление;
			СтрокаТаблицы.КлючВарианта = ЭлементСписка.Значение;
		КонецЦикла;
	КонецЕсли;
	ТаблицаВариантов.Свернуть("Ссылка, КлючВарианта, Наименование");
	ТаблицаВариантов.Сортировать("Наименование Возр, КлючВарианта Возр");
	
	Группа = Элементы.ВариантыОтчета_Левая;
	КнопкиГруппы = Группа.ПодчиненныеЭлементы;
	ПоследнийИндекс = ВариантыФормы.Количество() - 1;
	Для Каждого СтрокаТаблицы Из ТаблицаВариантов Цикл
		Найденные = ВариантыФормы.НайтиСтроки(Новый Структура("КлючВарианта, Найден", СтрокаТаблицы.КлючВарианта, Ложь));
		Если Найденные.Количество() = 1 Тогда
			ВариантФормы = Найденные[0];
			ВариантФормы.Найден = Истина;
			Кнопка = Элементы.Найти(ВариантФормы.ИмяКоманды);
			Кнопка.Видимость = Истина;
			Кнопка.Заголовок = СтрокаТаблицы.Наименование;
			Элементы.Переместить(Кнопка, Группа);
		Иначе
			ПоследнийИндекс = ПоследнийИндекс + 1;
			ВариантФормы = ВариантыФормы.Добавить();
			ЗаполнитьЗначенияСвойств(ВариантФормы, СтрокаТаблицы);
			ВариантФормы.Найден = Истина;
			ВариантФормы.ИмяКоманды = "ВыбратьВариант_" + Формат(ПоследнийИндекс, "ЧН=0; ЧГ=");
			
			Команда = Команды.Добавить(ВариантФормы.ИмяКоманды);
			Команда.Действие = "Подключаемый_ЗагрузитьВариантОтчета";
			
			Кнопка = Элементы.Добавить(ВариантФормы.ИмяКоманды, Тип("КнопкаФормы"), Группа);
			Кнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
			Кнопка.ИмяКоманды = ВариантФормы.ИмяКоманды;
			Кнопка.Заголовок = СтрокаТаблицы.Наименование;
			
			ПостоянныеКоманды.Добавить(ВариантФормы.ИмяКоманды);
		КонецЕсли;
		Кнопка.Пометка = (НастройкиОтчета.ВариантСсылка = ВариантФормы.Ссылка);
	КонецЦикла;
	
	Найденные = ВариантыФормы.НайтиСтроки(Новый Структура("Найден", Ложь));
	Для Каждого ВариантФормы Из Найденные Цикл
		Кнопка = Элементы.Найти(ВариантФормы.ИмяКоманды);
		Кнопка.Видимость = Ложь;
	КонецЦикла;
	
	ВариантыФормы.Колонки.Удалить("Найден");
	ЗначениеВРеквизитФормы(ВариантыФормы, "ДобавленныеВарианты");
КонецПроцедуры

&НаСервере
Процедура ПослеИзмененияКлючевыхСостояний(ПараметрыЗаполнения)
	Если ПараметрыЗаполнения.Событие.Имя <> "ПослеФормирования" Тогда
		Переформировать = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗаполнения, "Переформировать");
		Если Переформировать = Истина Тогда
			ОтображениеСостояния = Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния;
			ОтображениеСостояния.Видимость                      = Истина;
			ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
			ОтображениеСостояния.Картинка                       = БиблиотекаКартинок.ДлительнаяОперация48;
			ОтображениеСостояния.Текст                          = НСтр("ru = 'Отчет формируется...'");
		ИначеЕсли ПараметрыЗаполнения.ВариантМодифицирован
			Или ПараметрыЗаполнения.ПользовательскиеНастройкиМодифицированы
			Или ПараметрыЗаполнения.СброситьПользовательскиеНастройки Тогда
			ОтображениеСостояния = Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния;
			ОтображениеСостояния.Видимость = Истина;
			ОтображениеСостояния.Текст     = НСтр("ru = 'Изменились настройки. Нажмите ""Сформировать"" для получения отчета.'");
			Если Переформировать = Неопределено Тогда
				ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
			Иначе
				ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьОтключаемыеСвязи(Информация)
	ОтключаемыеСвязи.Очистить();
	Для Каждого ОписаниеСвязи Из Информация.ОтключаемыеСвязи Цикл
		Связь = ОтключаемыеСвязи.Добавить();
		ЗаполнитьЗначенияСвойств(Связь, ОписаниеСвязи);
		Связь.ВедущийИдентификаторВФорме     = ОписаниеСвязи.Ведущий.ИдентификаторЭлемента;
		Связь.ПодчиненныйИдентификаторВФорме = ОписаниеСвязи.Подчиненный.ИдентификаторЭлемента;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти
