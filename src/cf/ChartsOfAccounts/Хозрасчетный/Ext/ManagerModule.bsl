#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// Описывает простой рабочий план счетов
//
Функция ОсновнойСчет(Назначение) Экспорт
	
	Если Назначение = "Затраты" Тогда
		
		Возврат ОбщехозяйственныеРасходы;
		
	ИначеЕсли Назначение = "Запасы" Тогда
		
		Возврат ТоварыНаСкладах;
		
	ИначеЕсли Назначение = "ЗапасыВЦенахПродажи" Тогда
		
		Возврат ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ;
		
	ИначеЕсли Назначение = "ОборудованиеНаСкладе" Тогда
		
		Возврат ПриобретениеОбъектовОсновныхСредств;
		
	ИначеЕсли Назначение = "ТоварыПринятыеНаКомиссию" Тогда
		
		Возврат ТоварыНаСкладе;
		
	ИначеЕсли Назначение = "ТоварыПриобретенныеДляКомитента" Тогда
		
		Возврат ТМЦпринятыеНаОтветственноеХранение;
		
	ИначеЕсли Назначение = "ЗапасыОтгруженные" Тогда
		
		// См. СчетОтгруженныхЗапасов()
		Возврат ПокупныеТоварыОтгруженные;
		
	ИначеЕсли Назначение = "МатериалыПринятыеВПереработку" Тогда
		
		Возврат МатериалыПринятыеВПереработку;
		
	ИначеЕсли Назначение = "МатериалыПринятыеВПереработкуВПроизводстве" Тогда
		
		Возврат МатериалыПринятыеВПереработкуВПроизводстве;
		
	ИначеЕсли Назначение = "ПредъявленныйНДС_Запасы" Тогда
		
		Возврат НДСпоПриобретеннымМПЗ;
		
	ИначеЕсли Назначение = "ПредъявленныйНДС_Расходы" Тогда
		
		Возврат НДСпоПриобретеннымУслугам;
		
	ИначеЕсли Назначение = "ПредъявленныйНДС_ОсновныеСредства" Тогда
		
		Возврат НДСприПриобретенииОсновныхСредств;
		
	ИначеЕсли Назначение = "ПредъявленныйНДС_ОбъектыСтроительства" Тогда
		
		Возврат НДСприСтроительствеОсновныхСредств;
		
	ИначеЕсли Назначение = "ПредъявленныйНДС_НематериальныеАктивы" Тогда
		
		Возврат НДСпоПриобретеннымНематериальнымАктивам;
		
	ИначеЕсли Назначение = "НаличныеДеньги" Тогда
		
		Возврат КассаОрганизации;
		
	ИначеЕсли Назначение = "БезналичныеДеньги" Тогда
		
		Возврат РасчетныеСчета;
		
	ИначеЕсли Назначение = "Инкассация" Тогда
		
		Возврат ПереводыВПути;
		
	ИначеЕсли Назначение = "НаличныеДеньгиВВалюте" Тогда
		
		Возврат КассаОрганизацииВал;
		
	ИначеЕсли Назначение = "БезналичныеДеньгиВВалюте" Тогда
		
		Возврат ВалютныеСчета;
		
	ИначеЕсли Назначение = "ИнкассацияВВалюте" Тогда
		
		Возврат ПереводыВПутиВал;
		
	ИначеЕсли Назначение = "РасходыНаПродажу" Тогда
		
		Возврат ИздержкиОбращения;
		
	ИначеЕсли Назначение = "ОбъектыСтроительства" Тогда
		
		Возврат СтроительствоОбъектовОсновныхСредств;
		
	ИначеЕсли Назначение = "ПрочиеДоходы" Тогда
		
		Возврат ПрочиеДоходы;
		
	ИначеЕсли Назначение = "ПрочиеРасходы" Тогда
		
		Возврат ПрочиеРасходы;
		
	ИначеЕсли Назначение = "Налоги" Тогда
		
		Возврат ПрочиеНалогиИСборы
		
	Иначе
		
		Возврат ПустаяСсылка();
		
	КонецЕсли;
	
КонецФункции

Функция СчетОтгруженныхЗапасов(СчетЗапасов) Экспорт
	
	// Правило для балансовых счетов
	СчетОтгруженныхЗапасов = ПрочиеТоварыОтгруженные; // 45.03
	
	Если Не ЗначениеЗаполнено(СчетЗапасов) Тогда
		Возврат СчетОтгруженныхЗапасов;
	КонецЕсли;
	
	// Правило для забалансовых счетов
	Если СчетЗапасов.Забалансовый Тогда
		СчетОтгруженныхЗапасов = СчетЗапасов;
	КонецЕсли;
	
	// Исключения
	СоответствиеСчетов = Новый Соответствие;
	СоответствиеСчетов.Вставить(
		ГотоваяПродукция,             // 43
		ГотоваяПродукцияОтгруженная); // 45.02
	СоответствиеСчетов.Вставить(
		Товары,                       // 41
		ПокупныеТоварыОтгруженные);   // 45.01
	СоответствиеСчетов.Вставить(
		ТоварыНаСкладе,               // 004.01
		ТоварыПереданныеНаКомиссию);  // 004.02
		
	Для Каждого ЭлементСоответствияСчетов Из СоответствиеСчетов Цикл
		Если БухгалтерскийУчетВызовСервераПовтИсп.СчетВИерархии(СчетЗапасов, ЭлементСоответствияСчетов.Ключ) Тогда
			СчетОтгруженныхЗапасов = ЭлементСоответствияСчетов.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СчетОтгруженныхЗапасов;
		
КонецФункции

Функция ПолучитьСчетаИсключения() Экспорт
	
	МассивСчетовИсключений = Новый Массив;
	
	МассивСчетовИсключений.Добавить(ПланыСчетов.Хозрасчетный.ВекселяВыданные); 											// 60.03
	МассивСчетовИсключений.Добавить(ПланыСчетов.Хозрасчетный.ВекселяПолученные); 										// 62.03
	МассивСчетовИсключений.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоИмущественномуЛичномуИДобровольномуСтрахованию);	// 76.01
	МассивСчетовИсключений.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоПричитающимсяДивидендам); 						// 76.03
	МассивСчетовИсключений.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоИмущественномуИЛичномуСтрахованиюВал);      		// 76.21
	МассивСчетовИсключений.Добавить(ПланыСчетов.Хозрасчетный.СпецоснасткаИСпецодеждаВЭксплуатации);                     // 10.11
	
	Возврат Новый ФиксированныйМассив(МассивСчетовИсключений);
	
КонецФункции

// Обработка добавления счетов 19.10 и 68.42
//
Процедура ОбработатьДобавлениеСчетовУчетаНДСВТаможенномСоюзе() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	СчетОбъект = ПланыСчетов.Хозрасчетный.НДСУплачиваемыйПриИмпортеИзТаможенногоСоюза.ПолучитьОбъект();
	СчетОбъект.КодБыстрогоВыбора = "1910";
	
	ПараметрыУчета = ОбщегоНазначенияБПВызовСервера.ОпределитьПараметрыУчета();

	Если ПараметрыУчета.ВестиУчетНДСПоСпособам Тогда
		
		СтрокаСубконто = СчетОбъект.ВидыСубконто.Добавить();
		
		ИзмененыПараметрыСубконто = Ложь;
		ПараметрыУчета.ВестиУчетНДСПоСпособам = Истина;
		Отказ = Ложь;
		
		ОбщегоНазначенияБПВызовСервера.ПрименитьПараметрыУчета(ПараметрыУчета, ИзмененыПараметрыСубконто, Отказ, Истина);
		
	КонецЕсли;
		
	Попытка
		СчетОбъект.Записать();
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось установить код быстрого выбора
			|для счета 19.10 ""НДС, уплачиваемый при импорте из Таможенного союза"", 
			|рекомендуется установить самостоятельно.
			|
			|%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
	КонецПопытки;
	
	СчетОбъект = ПланыСчетов.Хозрасчетный.НДСТаможенныйСоюзКУплате.ПолучитьОбъект();
	СчетОбъект.КодБыстрогоВыбора = "6842";
	
	Попытка
		СчетОбъект.Записать();
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось установить код быстрого выбора
			|для счета 68.42 ""НДС при импорте товаров из Таможенного союза"", 
			|рекомендуется установить самостоятельно.
			|
			|%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

// Обработка переименования счета 68.12
//
Процедура ПереименоватьСчетНалогаУСН() Экспорт

	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
	
		СчетСсылка = ПланыСчетов.Хозрасчетный.ЕНприУСН;

		РеквизитыСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СчетСсылка,
			"Код, Наименование, ЗапретитьИспользоватьВПроводках, Забалансовый");
			
		Если НЕ РеквизитыСчета.ЗапретитьИспользоватьВПроводках
			И НЕ РеквизитыСчета.Забалансовый
			И РеквизитыСчета.Код = "68.12"
			И СокрЛП(РеквизитыСчета.Наименование) = НСтр("ru = 'Единый налог при применении упрощенной системы налогообложения'") Тогда

			// Счет не модифицировался пользователем
			// Можно менять наименование
			
			СчетОбъект = СчетСсылка.ПолучитьОбъект();
			СчетОбъект.Наименование = НСтр("ru = 'Налог при упрощенной системе налогообложения'");
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(СчетОбъект, Истина);
		
		КонецЕсли;
		
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось установить новое наименование
			|для счета 68.12 ""Единый налог при применении упрощенной системы налогообложения"".
			|
			|%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
	КонецПопытки;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Накладная на оприходование товаров
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПростойСписок";
	КомандаПечати.Представление = НСтр("ru = 'Простой список'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru = 'План счетов'");
	КомандаПечати.СписокФорм    = "ФормаСписка, ФормаВыбора";
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	
	// Накладная на оприходование товаров
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СПодробнымиОписаниями";
	КомандаПечати.Представление = НСтр("ru = 'С подробными описаниями'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru = 'План счетов (с подробными описаниями)'");
	КомандаПечати.СписокФорм    = "ФормаСписка, ФормаВыбора";
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	
КонецПроцедуры

Функция ПечатьПланаСчетов(ВыводитьОписания = Ложь, ПараметрыПриказа = Неопределено) Экспорт
	
	Макет = ПланыСчетов.Хозрасчетный.ПолучитьМакет("Описание");
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	Если ПараметрыПриказа <> Неопределено Тогда
		Приказ = Макет.ПолучитьОбласть("Приказ");
		Приказ.Параметры.Заполнить(ПараметрыПриказа);
		ТабДокумент.Вывести(Приказ);
	КонецЕсли;
	
	Шапка = Макет.ПолучитьОбласть("Шапка");
	Если ПараметрыПриказа <> Неопределено Тогда
		Шапка.Параметры.Заполнить(ПараметрыПриказа);
	Иначе
		Шапка.Параметры.ЗаголовокШапки = НСтр("ru='План счетов бухгалтерского учета'");
	КонецЕсли;
	ТабДокумент.Вывести(Шапка);
	
	ТабДокумент.ФиксацияСверху = ТабДокумент.ВысотаТаблицы;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИспользоватьВалютныйУчет", БухгалтерскийУчетПереопределяемый.ИспользоватьВалютныйУчет());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПланаСчетов.Ссылка КАК Ссылка,
	|	ТаблицаПланаСчетов.ЭтоГруппа КАК ЭтоГруппа,
	|	ТаблицаПланаСчетов.Ссылка.Код КАК Код,
	|	ТаблицаПланаСчетов.Ссылка.Наименование КАК Наименование,
	|	ТаблицаПланаСчетов.Ссылка.Валютный КАК Валютный,
	|	ТаблицаПланаСчетов.Ссылка.Количественный КАК Количественный,
	|	ТаблицаПланаСчетов.Ссылка.Забалансовый КАК Забалансовый,
	|	ТаблицаПланаСчетов.Ссылка.Вид КАК Вид,
	|	ТаблицаПланаСчетов.Ссылка.ВидыСубконто.(
	|		НомерСтроки КАК НомерСтроки,
	|		ВидСубконто.Наименование КАК Наименование,
	|		ТолькоОбороты КАК ТолькоОбороты
	|	) КАК ВидыСубконто
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПланСчетов1.Ссылка КАК Ссылка,
	|		ВЫБОР
	|			КОГДА КОЛИЧЕСТВО(ПланСчетов2.Ссылка) > 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ЭтоГруппа
	|	ИЗ
	|		ПланСчетов.Хозрасчетный КАК ПланСчетов1
	|			ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК ПланСчетов2
	|			ПО ПланСчетов1.Ссылка = ПланСчетов2.Родитель
	|	ГДЕ
	|		ПланСчетов1.ПометкаУдаления = ЛОЖЬ
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПланСчетов1.Ссылка) КАК ТаблицаПланаСчетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константы КАК Константы
	|		ПО (&ИспользоватьВалютныйУчет
	|				ИЛИ НЕ &ИспользоватьВалютныйУчет
	|					И НЕ ТаблицаПланаСчетов.Ссылка.Валютный)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаПланаСчетов.Ссылка.Порядок";
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ЭтоГруппа Тогда
			Строка = Макет.ПолучитьОбласть("Группа");
		Иначе
			Строка = Макет.ПолучитьОбласть("Строка");
		КонецЕсли;
			
		Строка.Параметры.Заполнить(Выборка);
			
		Если Выборка.Вид = ВидСчета.Активный Тогда
			Строка.Параметры.Активность = "А";
		ИначеЕсли Выборка.Вид = ВидСчета.Пассивный Тогда
			Строка.Параметры.Активность = "П";
		Иначе
			Строка.Параметры.Активность = "АП";
		КонецЕсли;
		
		ВидыСубконто = Выборка.ВидыСубконто.Выбрать();
		Пока ВидыСубконто.Следующий() Цикл
			Строка.Параметры["Субконто" + ВидыСубконто.НомерСтроки] = ?(ВидыСубконто.ТолькоОбороты, "(об) ", "") + ВидыСубконто.Наименование;
		КонецЦикла;
			
		ТабДокумент.Вывести(Строка);
		
		Если ВыводитьОписания Тогда
		
			Попытка
				Описание = Макет.ПолучитьОбласть(ПланыСчетов[Выборка.Ссылка.Метаданные().Имя].ПолучитьИмяПредопределенного(Выборка.Ссылка));
				ТабДокумент.Вывести(Описание);
			Исключение
				// Запись в журнал регистрации не требуется
			КонецПопытки;
		
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПростойСписок") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПростойСписок", "План счетов бухгалтерского учета", ПечатьПланаСчетов());                                            
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СПодробнымиОписаниями") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СПодробнымиОписаниями", "План счетов бухгалтерского учета", ПечатьПланаСчетов(Истина));                                            
	КонецЕсли;
		
КонецПроцедуры

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если Не БухгалтерскийУчетПереопределяемый.ИспользоватьВалютныйУчет() Тогда
		Параметры.Отбор.Вставить("Валютный", Ложь);
	КонецЕсли;
	
	// При вводе кода счета с цифровой клавиатуры заменяем запятую на точку
	Если ТипЗнч(Параметры.СтрокаПоиска) = Тип("Строка") Тогда
		Параметры.СтрокаПоиска = СтрЗаменить(Параметры.СтрокаПоиска, ",", ".");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБНОВЛЕНИЯ

Процедура ОбновитьПараметрыСчета96_09() Экспорт
	
	СчетОбъект = ПланыСчетов.Хозрасчетный.РезервыПредстоящихРасходовПрочие.ПолучитьОбъект();
	СчетОбъект.Родитель = ПланыСчетов.Хозрасчетный.РезервыПредстоящихРасходов;
	СчетОбъект.КодБыстрогоВыбора = СокрЛП(СтрЗаменить(СчетОбъект.Код, ".", ""));
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СчетОбъект);
	
КонецПроцедуры


#КонецЕсли


