////////////////////////////////////////////////////////////////////////////////
// ПоступлениеТоваровУслугФормы: серверные процедуры и функции, вызываемые из форм
// документа "Поступление (акт, накладная)".
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт

	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(Форма, Форма.Элементы.ГруппаПечать);
	// Конец СтандартныеПодсистемы.Печать

	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(Форма, ДополнительныеОтчетыИОбработкиКлиентСервер.ТипФормыОбъекта());
	// Конец ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(Форма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Форма.Параметры.Ключ.Пустая() Тогда
		Форма.ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	// Уведомим о появлении функционала
	Если Форма.РасчетыВУЕ Тогда	
		Форма.НастройкиПредупреждений = ОбщегоНазначенияБП.НастройкиПредупрежденийОбИзменениях("РабочаяДатаИзДокумента, ВычетПоСтавкам4и2, ПереоценкаЗадолженностиПоДоговорамВУЕ2015");
	Иначе
		Форма.НастройкиПредупреждений = ОбщегоНазначенияБП.НастройкиПредупрежденийОбИзменениях("РабочаяДатаИзДокумента, ВычетПоСтавкам4и2");
	КонецЕсли;	
	
	Форма.ЗначениеРабочейДаты = ОбщегоНазначения.РабочаяДатаПользователя();
	
	// Показываем, если это новый документ и сама рабочая дата еще не установлена.
	Форма.НастройкиПредупреждений.РабочаяДатаИзДокумента = Форма.НастройкиПредупреждений.РабочаяДатаИзДокумента
		И Форма.Параметры.Ключ.Пустая()
		И НЕ ЗначениеЗаполнено(Форма.ЗначениеРабочейДаты);
	
	// Заполнение группы информационных ссылок
	ИнформационныйЦентрСервер.ВывестиКонтекстныеСсылки(Форма, Форма.Элементы.ИнформационныеСсылки);
	
	// Если форма вызвана в режиме смена вида операции - модифицируем сразу при открытии, 
	// чтобы можно было подтвердить или отказаться от изменения путем сохранения или 
	// отказа от сохранения документа.
	Если Форма.Параметры.Свойство("ИзменитьВидОперации")
		И Форма.Параметры.ИзменитьВидОперации Тогда
		
		// Не кэшируем переменную Объект, т.к. может вызываться Форма.ИзменитьРеквизиты(),
		// которая меняет Объект.
		Форма.Объект.ВидОперации = Форма.Параметры.ЗначенияЗаполнения.ВидОперации;
		ВидОперацииОбработатьИзменение(Форма);
		
		ПоступлениеТоваровУслугФормыКлиентСервер.ЗаполнитьРеквизитыПроСчетФактуру(Форма);

		УстановитьЗаголовокФормы(Форма);
		Форма.ОбновитьИтогиНаСервере();
		Форма.УправлениеФормойНаСервере();
		Форма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(Форма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения	

	Форма.ПодготовитьФормуНаСервере();

КонецПроцедуры

Процедура ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт

	Объект = Форма.Объект;

	УстановитьЗаголовокФормы(Форма);

	Форма.ТекстСостоянияЭД = ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСостоянияЭД(Объект.Ссылка, Форма);

	Форма.ЗаполнитьДобавленныеКолонкиТаблиц();
	УстановитьПорядокУчетаРасчетов(Форма);
	
	Если ЗначениеЗаполнено(Форма.НомерСчетаФактурыПолученного)
		И ЗначениеЗаполнено(Форма.ДатаСчетаФактурыПолученного) И Форма.ТребуетсяСчетФактура Тогда
		
		Если Форма.ЭтоКомиссияНаЗакупку И НЕ ЗначениеЗаполнено(Форма.Продавец) Тогда
			Возврат;
		КонецЕсли;
		
		Результат = УчетНДСВызовСервера.СоздатьСчетФактуруПолученныйНаОсновании(
			ТекущийОбъект.Ссылка, 
			Форма.НомерСчетаФактурыПолученного, 
			Форма.ДатаСчетаФактурыПолученного, 
			?(Форма.ЭтоКомиссияНаЗакупку, Форма.Продавец, Неопределено));
		
		ПоступлениеТоваровУслугФормыКлиентСервер.ЗаполнитьРеквизитыПроСчетФактуру(Форма, Результат);
			
		Форма.УправлениеФормойНаСервере();
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		Ценообразование.ОбновитьЦеныНоменклатуры(Объект.Ссылка, 
			Перечисления.СпособыЗаполненияЦен.ПоЗакупочнымЦенам,
			Объект.ВалютаДокумента,
			Объект.СуммаВключаетНДС);
	КонецЕсли;

КонецПроцедуры

// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

Процедура ДатаПриИзменении(Форма) Экспорт

	ДатаОбработатьИзменение(Форма);
	Форма.УправлениеФормойНаСервере();

КонецПроцедуры

Процедура ОрганизацияПриИзменении(Форма) Экспорт

	ОрганизацияОбработатьИзменение(Форма);
	
	Форма.УправлениеФормойНаСервере();

КонецПроцедуры

Процедура СкладПриИзменении(Форма) Экспорт

	СкладОбработатьИзменение(Форма);	
	
	Форма.УправлениеФормойНаСервере();
	
КонецПроцедуры

Процедура КонтрагентПриИзменении(Форма) Экспорт

	КонтрагентОбработатьИзменение(Форма, Новый Массив);
	ПоступлениеТоваровУслугФормыКлиентСервер.ЗаполнитьРеквизитыПроСчетФактуру(Форма);
	Форма.УправлениеФормойНаСервере();

КонецПроцедуры

Процедура ДоговорКонтрагентаПриИзменении(Форма) Экспорт

	ДоговорКонтрагентаОбработатьИзменение(Форма, Новый Массив);
	ПоступлениеТоваровУслугФормыКлиентСервер.ЗаполнитьРеквизитыПроСчетФактуру(Форма);
	Форма.УправлениеФормойНаСервере();

КонецПроцедуры

// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Товары

Процедура ТоварыНоменклатураПриИзменении(СтрокаТабличнойЧасти, Знач ДанныеОбъекта, Знач СчетаУчетаКЗаполнению) Экспорт
	
	ЗаполненныеСчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.ПоступлениеТоваровУслуг,
		СчетаУчетаКЗаполнению,
		ДанныеОбъекта,
		"Товары",
		СтрокаТабличнойЧасти);
		
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗаполненныеСчета);
		
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоЗакупочнымЦенам);
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("СпособЗаполненияРозничнойЦены", Перечисления.СпособыЗаполненияЦен.ПоЗакупочнымЦенам);

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта, Ложь);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения		= СведенияОНоменклатуре.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент			= СведенияОНоменклатуре.Коэффициент;
	СтрокаТабличнойЧасти.Цена					= СведенияОНоменклатуре.Цена;
	СтрокаТабличнойЧасти.СтавкаНДС				= СведенияОНоменклатуре.СтавкаНДС;
	СтрокаТабличнойЧасти.НомерГТД				= СведенияОНоменклатуре.НомерГТД;
	СтрокаТабличнойЧасти.СтранаПроисхождения	= СведенияОНоменклатуре.СтранаПроисхождения;
	
	Если ДанныеОбъекта.РассчитыватьСуммаВРознице Тогда
		СтрокаТабличнойЧасти.ЦенаВРознице = СведенияОНоменклатуре.ЦенаВРознице;
	КонецЕсли;
	
	Если ДанныеОбъекта.ЗаполнятьСтавкуНДСВРознице Тогда
		СтрокаТабличнойЧасти.СтавкаНДСВРознице = СведенияОНоменклатуре.СтавкаНДС;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ОтражениеВУСН = ПоступлениеТоваровУслугФормыКлиентСервер.ОтражениеВУСН(
		ДанныеОбъекта.ВидОперации, ДанныеОбъекта.ЭтоКомиссия);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС, ДанныеОбъекта.ПрименяютсяСтавки4и2);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВРозницеТабЧасти(СтрокаТабличнойЧасти);
	
КонецПроцедуры

Процедура ОбработкаОповещенияОбработкиТабличнойЧастиТовары(Форма, Параметры) Экспорт

	Объект = Форма.Объект;
	
	СтрокиДляДополнительнойОбработки = Обработки.ИзменениеТаблицыТоваров.ЗагрузитьТабличнуюЧастьВДанныеФормы(Объект.Товары, Параметры);
	
	СчетаУчетаВДокументах.ЗаполнитьСтроки(СтрокиДляДополнительнойОбработки, "Товары", Объект, Документы.ПоступлениеТоваровУслуг, Истина);
	
КонецПроцедуры

// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Услуги

Процедура УслугиНоменклатураПриИзменении(СтрокаТабличнойЧасти, Знач ДанныеОбъекта, Знач СчетаУчетаКЗаполнению) Экспорт
	
	ЗаполненныеСчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.ПоступлениеТоваровУслуг,
		СчетаУчетаКЗаполнению,
		ДанныеОбъекта,
		"Услуги",
		СтрокаТабличнойЧасти);
		
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗаполненныеСчета);
		
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоЗакупочнымЦенам);
	КонецЕсли;	

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта, Ложь);
		
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Содержание		= СведенияОНоменклатуре.НаименованиеПолное;
	СтрокаТабличнойЧасти.Цена			= СведенияОНоменклатуре.Цена;
	СтрокаТабличнойЧасти.СтавкаНДС		= СведенияОНоменклатуре.СтавкаНДС;
	
	СтрокаТабличнойЧасти.ОтражениеВУСН	= ПоступлениеТоваровУслугФормыКлиентСервер.ОтражениеВУСН(
		ДанныеОбъекта.ВидОперации, ДанныеОбъекта.ЭтоКомиссия);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, 1);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
	
КонецПроцедуры

// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМ ДОКУМЕНТА ПоступлениеТоваровУслуг

Процедура СвернутьТовары(Форма) Экспорт

	Объект = Форма.Объект;

	ТаблицаТоваров = Объект.Товары.Выгрузить();
	ТаблицаТоваров.Свернуть("СтавкаНДС, ОтражениеВУСН, СтавкаНДСВРознице", "Сумма, СуммаНДС, Всего, СуммаВРознице");
	Объект.Товары.Загрузить(ТаблицаТоваров);
	ПоступлениеТоваровУслугФормыКлиентСервер.УстановитьРеквизитФормы(Форма, "ТоварыСвернуты", Истина);

КонецПроцедуры

Процедура ОпределитьНеобходимостьРасчетаСуммыВРознице(Форма) Экспорт
	
	Объект = Форма.Объект;
	УчетВПродажныхЦенах = ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "УчетВПродажныхЦенах");

	ТипСклада = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Склад, "ТипСклада");
	Если ТипСклада <> Перечисления.ТипыСкладов.ОптовыйСклад
		И УчетВПродажныхЦенах
		И (Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование)
		И Форма.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		РассчитыватьСуммаВРознице = Истина;
	Иначе
		РассчитыватьСуммаВРознице = Ложь;
	КонецЕсли;

	ПоступлениеТоваровУслугФормыКлиентСервер.УстановитьРеквизитФормы(Форма, "РассчитыватьСуммаВРознице", РассчитыватьСуммаВРознице);
	
	НТТ = ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка;
	ПоступлениеТоваровУслугФормыКлиентСервер.УстановитьРеквизитФормы(Форма, "НТТ", НТТ);
	
КонецПроцедуры

Процедура ЗаполнитьРассчитатьСуммы(Форма, 
					Знач ВалютаДоИзменения, 
					КурсДоИзменения, 
					КратностьДоИзменения, 
					ПерезаполнитьЦены = Ложь, 
					ПересчитатьЦены = Ложь, 
					ПересчитатьНДС = Ложь,
					ПрименяютсяСтавки4и2 = Ложь) Экспорт

	Объект = Форма.Объект;

	ТаблицаЦенНоменклатуры = Неопределено;
	
	Если ПерезаполнитьЦены Тогда 
		СписокНоменклатуры	=  Новый Массив;
		
		Если Объект.Свойство("Товары") Тогда
			ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(СписокНоменклатуры,
			ОбщегоНазначения.ВыгрузитьКолонку(Объект.Товары, "Номенклатура"));
		КонецЕсли;
		
		Если Объект.Свойство("Услуги") Тогда
			ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(СписокНоменклатуры,
			ОбщегоНазначения.ВыгрузитьКолонку(Объект.Услуги, "Номенклатура"));
		КонецЕсли;
		
		Если Объект.Свойство("ВозвратнаяТара") Тогда
			ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(СписокНоменклатуры,
			ОбщегоНазначения.ВыгрузитьКолонку(Объект.ВозвратнаяТара, "Номенклатура"));
		КонецЕсли;
		
		Если Объект.Свойство("АгентскиеУслуги") Тогда
			ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(СписокНоменклатуры,
			ОбщегоНазначения.ВыгрузитьКолонку(Объект.АгентскиеУслуги, "Номенклатура"));
		КонецЕсли;
		
		Если Объект.Свойство("Оборудование") Тогда
			ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(СписокНоменклатуры,
			ОбщегоНазначения.ВыгрузитьКолонку(Объект.Оборудование, "Номенклатура"));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда	
			ТаблицаЦенНоменклатуры = Ценообразование.ПолучитьТаблицуЦенНоменклатуры(
			СписокНоменклатуры,
			Объект.ТипЦен,
			Объект.Дата);
		КонецЕсли;	
		
	ИначеЕсли ПересчитатьЦены Тогда

	Если КурсДоИзменения <> 0 И КратностьДоИзменения <> 0 Тогда
		СтруктураКурса = Новый Структура("Курс, Кратность", КурсДоИзменения, КратностьДоИзменения);
	Иначе
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДоИзменения, Объект.Дата);
	КонецЕсли;

	КонецЕсли;
	
	Если Объект.Свойство("Товары") Тогда
		Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
			ЗаполнитьРассчитатьСуммыВСтроке(Форма, СтрокаТаблицы, ТаблицаЦенНоменклатуры, ВалютаДоИзменения,
				СтруктураКурса,  ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, Истина, 0, ПрименяютсяСтавки4и2, Объект.НДСНеВыделять);
		КонецЦикла;
	КонецЕсли;
	
	Если Объект.Свойство("ОбъектыСтроительства") Тогда
		Для Каждого СтрокаТаблицы Из Объект.ОбъектыСтроительства Цикл
			ЗаполнитьРассчитатьСуммыВСтрокеПоОбъектамСтроительства(Форма, СтрокаТаблицы, ВалютаДоИзменения,
				СтруктураКурса, ПересчитатьЦены, ПересчитатьНДС, Истина, 0, ПрименяютсяСтавки4и2, Объект.НДСНеВыделять);
		КонецЦикла;
	КонецЕсли;
	
	Если Объект.Свойство("Оборудование") Тогда
		Для Каждого СтрокаТаблицы Из Объект.Оборудование Цикл
			ЗаполнитьРассчитатьСуммыВСтроке(Форма, СтрокаТаблицы, ТаблицаЦенНоменклатуры, ВалютаДоИзменения,
				СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, Истина, 0, ПрименяютсяСтавки4и2, Объект.НДСНеВыделять);
		КонецЦикла;
	КонецЕсли;
	
	Если Объект.Свойство("ВозвратнаяТара") Тогда
		Для Каждого СтрокаТаблицы Из Объект.ВозвратнаяТара Цикл
			ЗаполнитьРассчитатьСуммыВСтроке(Форма, СтрокаТаблицы, ТаблицаЦенНоменклатуры, ВалютаДоИзменения,
				СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, Ложь, 0, ПрименяютсяСтавки4и2, Объект.НДСНеВыделять);
		КонецЦикла;
	КонецЕсли;
	
	Если Объект.Свойство("Услуги") Тогда
		Для Каждого СтрокаТаблицы Из Объект.Услуги Цикл
			ЗаполнитьРассчитатьСуммыВСтроке(Форма, СтрокаТаблицы, ТаблицаЦенНоменклатуры, ВалютаДоИзменения,
				СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, Истина, 1, ПрименяютсяСтавки4и2, Объект.НДСНеВыделять);
		КонецЦикла;
	КонецЕсли;
	
	Если Объект.Свойство("АгентскиеУслуги") Тогда
		Для Каждого СтрокаТаблицы Из Объект.АгентскиеУслуги Цикл
			ЗаполнитьРассчитатьСуммыВСтроке(Форма, СтрокаТаблицы, ТаблицаЦенНоменклатуры, ВалютаДоИзменения,
				СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, Истина, 1, ПрименяютсяСтавки4и2, Объект.НДСНеВыделять);
		КонецЦикла;	
	КонецЕсли;
	
	Форма.ЗаполнитьДобавленныеКолонкиТаблиц();
	Форма.ОбновитьИтогиНаСервере();

КонецПроцедуры

Процедура УстановитьПорядокУчетаРасчетов(Форма) Экспорт
	
	ОсобенностиУчетаРасчетов = Документы.ПоступлениеТоваровУслуг.ОсобенностиУчетаРасчетов(
		Форма.Объект.ВидОперации,
		Форма.Объект.ДоговорКонтрагента);
		
	УчетВзаиморасчетовФормы.УстановитьПорядокУчетаРасчетов(Форма, ОсобенностиУчетаРасчетов);

КонецПроцедуры

Процедура ОбработкаВыбораПорядокУчетаРасчетов(Форма, ВыбранноеЗначение) Экспорт

	УчетВзаиморасчетовФормы.ОбработкаВыбораПорядокУчетаРасчетов(Форма, ВыбранноеЗначение);
	УстановитьПорядокУчетаРасчетов(Форма);

КонецПроцедуры

Процедура ОбработкаЗаполненияПоСчету(Форма, ВыбранноеЗначение, ТабличнаяЧасть) Экспорт

	Объект = Форма.Объект;

	// Заполняем полностью весь документ по счету на оплату
	РеквизитыСчетаНаОплату = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ВыбранноеЗначение, "Контрагент, ДоговорКонтрагента");

	Объект.СчетНаОплатуПоставщика 	= ВыбранноеЗначение;
	Объект.Контрагент 				= РеквизитыСчетаНаОплату.Контрагент;
	Объект.ДоговорКонтрагента 		= РеквизитыСчетаНаОплату.ДоговорКонтрагента;
	
	ПричиныИзмененияСчетовУчета = Новый Массив;
	ПричиныИзмененияСчетовУчета.Добавить("СчетНаОплатуПоставщика"); // В результате в обработчиках изменения контрагента и договора счета учета заполнены не будут
	
	КонтрагентОбработатьИзменение(Форма, ПричиныИзмененияСчетовУчета);
	ДоговорКонтрагентаОбработатьИзменение(Форма, ПричиныИзмененияСчетовУчета);

	ДокументОбъект = Форма.РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьПоСчету(ТабличнаяЧасть, ВыбранноеЗначение); // Счета учета заполняются здесь
	Форма.ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");

КонецПроцедуры

Функция ОбработкаВыбораПодбор(Форма, ВыбранноеЗначение, ИмяТаблицы) Экспорт

	Объект = Форма.Объект;

	ЭтоКомиссия					= ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "ЭтоКомиссия");
	НТТ 						= ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "НТТ");
	УчетВПродажныхЦенах 		= ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "УчетВПродажныхЦенах");
	РассчитыватьСуммаВРознице 	= ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "РассчитыватьСуммаВРознице");
	РазделениеПоСтавкамВРознице = ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "РазделениеПоСтавкамВРознице");
	ПрименяютсяСтавки4и2 		= ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "ПрименяютсяСтавки4и2");	
	
	ДобавленныеИзмененныеСтроки = Новый Структура;
	ДобавленныеИзмененныеСтроки.Вставить("Оборудование", 	Новый Массив());
	ДобавленныеИзмененныеСтроки.Вставить("Товары", 		Новый Массив());
	ДобавленныеИзмененныеСтроки.Вставить("Услуги", 		Новый Массив());
	ДобавленныеИзмененныеСтроки.Вставить("ВозвратнаяТара",Новый Массив());

	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	
	ДанныеОбъекта = Новый Структура("Дата, ВидОперации, Организация, ПодразделениеОрганизации, Склад, ЭтоКомиссия, ДоговорКонтрагента");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.ЭтоКомиссия = ЭтоКомиссия;
	СтавкаБезНДС = Ложь;
	
	Если ЗначениеЗаполнено(ДанныеОбъекта.ДоговорКонтрагента) Тогда
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеОбъекта.ДоговорКонтрагента, "ПредъявляетНДС, УчетАгентскогоНДС");
		Если РеквизитыДоговора <> Неопределено 
			И Не РеквизитыДоговора.ПредъявляетНДС
			И Не РеквизитыДоговора.УчетАгентскогоНДС Тогда
			СтавкаБезНДС = Истина;
		КонецЕсли;
	КонецЕсли;

	СтавкаБезНДС = СтавкаБезНДС ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку ИЛИ Объект.НДСНеВыделять;
	
	Если СтавкаБезНДС Тогда 
		ДанныеОбъекта.Вставить("СтавкаНДС", Перечисления.СтавкиНДС.БезНДС)
	КонецЕсли;
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта, Ложь);
	
	Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		ЦенаВключаетНДС	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТипЦен, "ЦенаВключаетНДС");
	Иначе
		ЦенаВключаетНДС	= Объект.СуммаВключаетНДС;
	КонецЕсли;
	
	СтрокиДляЗаполненияСчетов = Новый Массив;
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СтруктураОтбора = Новый Структура("Номенклатура, Цена", СтрокаТовара.Номенклатура, СтрокаТовара.Цена);
		СтрокаТабличнойЧасти = НайтиСтрокуТабличнойЧасти(Форма, ИмяТаблицы, СтруктураОтбора);
				
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			// Нашли - увеличиваем количество.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
			
			Если ИмяТаблицы = "Оборудование" Тогда	
				// Рассчитываем реквизиты табличной части
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС, ПрименяютсяСтавки4и2);
				
			ИначеЕсли ИмяТаблицы = "Товары" Тогда
				// Рассчитываем реквизиты табличной части
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС, ПрименяютсяСтавки4и2);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВРозницеТабЧасти(СтрокаТабличнойЧасти);
				
			ИначеЕсли ИмяТаблицы = "Услуги" Тогда
				// Рассчитываем реквизиты табличной части
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС, ПрименяютсяСтавки4и2);
				
			ИначеЕсли ИмяТаблицы = "ВозвратнаяТара" Тогда
				// Рассчитать реквизиты табличной части
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
			КонецЕсли;
			
		Иначе
			
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара);
			
			СтрокиДляЗаполненияСчетов.Добавить(СтрокаТабличнойЧасти);
			
			СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовара.Номенклатура);
			Если СведенияОНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ИмяТаблицы = "Оборудование" Тогда
				
				// Заполняем реквизиты табличной части
				СтрокаТабличнойЧасти.ЕдиницаИзмерения		= СведенияОНоменклатуре.ЕдиницаИзмерения;
				СтрокаТабличнойЧасти.Коэффициент			= СведенияОНоменклатуре.Коэффициент;
				СтрокаТабличнойЧасти.СтавкаНДС				= СведенияОНоменклатуре.СтавкаНДС;
				СтрокаТабличнойЧасти.НомерГТД				= СведенияОНоменклатуре.НомерГТД;
				СтрокаТабличнойЧасти.СтранаПроисхождения	= СведенияОНоменклатуре.СтранаПроисхождения;
				
				СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				СтрокаТабличнойЧасти.Цена, ЦенаВключаетНДС, Объект.СуммаВключаетНДС,
				УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
				
				// Рассчитываем реквизиты табличной части
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
				
			ИначеЕсли ИмяТаблицы = "Товары" Тогда
				
				// Заполняем реквизиты табличной части
				СтрокаТабличнойЧасти.ЕдиницаИзмерения		= СведенияОНоменклатуре.ЕдиницаИзмерения;
				СтрокаТабличнойЧасти.Коэффициент			= СведенияОНоменклатуре.Коэффициент;
				СтрокаТабличнойЧасти.СтавкаНДС				= СведенияОНоменклатуре.СтавкаНДС;
				СтрокаТабличнойЧасти.НомерГТД				= СведенияОНоменклатуре.НомерГТД;
				СтрокаТабличнойЧасти.СтранаПроисхождения	= СведенияОНоменклатуре.СтранаПроисхождения;
				
				СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				СтрокаТабличнойЧасти.Цена, ЦенаВключаетНДС, Объект.СуммаВключаетНДС,
				УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС, ПрименяютсяСтавки4и2));
				
				Если РассчитыватьСуммаВРознице Тогда
					СтрокаТабличнойЧасти.ЦенаВРознице = СведенияОНоменклатуре.ЦенаВРознице;
				КонецЕсли;
				
				Если НТТ И УчетВПродажныхЦенах И РазделениеПоСтавкамВРознице Тогда
					СтрокаТабличнойЧасти.СтавкаНДСВРознице = СведенияОНоменклатуре.СтавкаНДС;
				КонецЕсли;
				
				СтрокаТабличнойЧасти.ОтражениеВУСН = ПоступлениеТоваровУслугФормыКлиентСервер.ОтражениеВУСН(
					Объект.ВидОперации, ЭтоКомиссия);
				
				// Рассчитываем реквизиты табличной части
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС, ПрименяютсяСтавки4и2);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВРозницеТабЧасти(СтрокаТабличнойЧасти);
				
			ИначеЕсли ИмяТаблицы = "Услуги" Тогда
				
				// Заполняем реквизиты табличной части
				СтрокаТабличнойЧасти.Содержание	= СведенияОНоменклатуре.НаименованиеПолное;
				СтрокаТабличнойЧасти.СтавкаНДС		= СведенияОНоменклатуре.СтавкаНДС;
				
				СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				СтрокаТабличнойЧасти.Цена, ЦенаВключаетНДС, Объект.СуммаВключаетНДС,
				УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
				
				// Рассчитываем реквизиты табличной части
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС, ПрименяютсяСтавки4и2);
				
				СтрокаТабличнойЧасти.ОтражениеВУСН = ПоступлениеТоваровУслугФормыКлиентСервер.ОтражениеВУСН(
					Объект.ВидОперации, ЭтоКомиссия);
				
			ИначеЕсли ИмяТаблицы = "ВозвратнаяТара" Тогда
				
				СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				СтрокаТабличнойЧасти.Цена, ЦенаВключаетНДС, Истина,
				УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СведенияОНоменклатуре.СтавкаНДС, ПрименяютсяСтавки4и2));
				
				// Рассчитать реквизиты табличной части
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Запоминаем 
		ДобавленныеИзмененныеСтроки[ИмяТаблицы].Добавить(СтрокаТабличнойЧасти);
		
	КонецЦикла; // По ТаблицаТоваров
	
	СчетаУчетаВДокументах.ЗаполнитьСтроки(СтрокиДляЗаполненияСчетов, ИмяТаблицы, Объект, Документы.ПоступлениеТоваровУслуг);
	
	Возврат ДобавленныеИзмененныеСтроки;

КонецФункции

Процедура УстановитьЗаголовокФормы(Форма) Экспорт
	
	Объект = Форма.Объект;

	ТекстЗаголовка = НСтр("ru = 'Поступление'");
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары Тогда
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru = ' товаров: Накладная'");
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги Тогда
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru = ' услуг: Акт'");
	Иначе
		ТекстЗаголовка = ТекстЗаголовка + ": " + Строка(Объект.ВидОперации);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстЗаголовка = ТекстЗаголовка + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru=' %1 от %2'"), Объект.Номер, Объект.Дата);
	Иначе
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru = ' (создание)'");
	КонецЕсли;
	
	Форма.Заголовок = ТекстЗаголовка;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ВидОперацииОбработатьИзменение(Форма)
	
	Объект = Форма.Объект;
	ЭтоКомиссия = ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "ЭтоКомиссия");
	
	Если Не ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	ПричиныИзмененияСчетовУчета = Новый Массив;
	ПричиныИзмененияСчетовУчета.Добавить("ВидОперации");
	
	МассивВидовДоговоров = Форма.ПолучитьМассивВидовДоговоров();

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Если МассивВидовДоговоров.Найти(Форма.ВидДоговора) = Неопределено Тогда
			Объект.ДоговорКонтрагента = Неопределено;
			Форма.ВидДоговора = МассивВидовДоговоров[0];
		КонецЕсли;
	КонецЕсли;

	Если Объект.Свойство("ВозвратнаяТара") Тогда
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку
				ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства
				ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары
				ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги Тогда
			Если Объект.ВозвратнаяТара.Количество() > 0 Тогда
				Объект.ВозвратнаяТара.Очистить();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если Объект.Свойство("Товары") Тогда
		Если ЭтоКомиссия ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
			// Очистим реквизиты счетов в табличных частях.
			Для каждого Строка Из Объект.Товары Цикл
				Строка.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.Контрагент) И ЗначениеЗаполнено(Объект.Организация) Тогда
		БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(Объект.ДоговорКонтрагента,
			Объект.Контрагент, Объект.Организация, МассивВидовДоговоров);
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаОбработатьИзменение(Форма, ПричиныИзмененияСчетовУчета);
		ЭтоКомиссия = ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "ЭтоКомиссия");
	КонецЕсли;
	
	ЗаполнитьСчетаУчета(Форма, ПричиныИзмененияСчетовУчета, "ВидОперации");
	
	НовыйМассивПараметров = Новый Массив;
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора", 
		Новый ФиксированныйМассив(МассивВидовДоговоров)));
	НовыеПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	Форма.Элементы.ДоговорКонтрагента.ПараметрыВыбора = НовыеПараметрыВыбора;
	
	Форма.УстановитьПараметрыВыбораДляСчетовУчета();
	
	Форма.ТребуетсяСчетФактура = НЕ Форма.УчетАгентскогоНДС И НЕ ЭтоКомиссия
		И Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку
		И НЕ Объект.НДСНеВыделять;
		
	ПоступлениеТоваровУслугФормыКлиентСервер.ЗаполнитьРеквизитыПроСчетФактуру(Форма);
	
КонецПроцедуры

Процедура ДатаОбработатьИзменение(Форма)
	
	Объект = Форма.Объект;

	Если Не ЗначениеЗаполнено(Объект.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Форма.УстановитьФункциональныеОпцииФормы();
	
	ПересчитатьЦены   = Ложь;
	ПерезаполнитьЦены = Ложь;
	ПересчитатьНДС    = Ложь;
	
	НовыйТипЦен = Объект.ТипЦен;
	ВалютаДоИзменения 	= Объект.ВалютаДокумента;
	КурсДоИзменения 	= Объект.КурсВзаиморасчетов;
	КратностьДоИзменения= Объект.КратностьВзаиморасчетов;

	ОпределитьНеобходимостьРасчетаСуммыВРознице(Форма);
	ТоварыСвернуты 	= ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "ТоварыСвернуты");
	НТТ 			= ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "НТТ");
	ПлательщикНДС	= ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "ПлательщикНДС");
	
	РассчитыватьСуммаВРознице = ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "РассчитыватьСуммаВРознице");
	ТоварыСвернуты	= ТоварыСвернуты И НТТ И РассчитыватьСуммаВРознице;
	ПоступлениеТоваровУслугФормыКлиентСервер.УстановитьРеквизитФормы(Форма, "ТоварыСвернуты", ТоварыСвернуты);
	
	Объект.НДСВключенВСтоимость = НЕ ПлательщикНДС;
	Если Объект.НДСНеВыделять <> Форма.ПрименениеУСНДоходы Тогда
		Объект.НДСНеВыделять = Форма.ПрименениеУСНДоходы;
		ЗаполнитьРассчитатьСуммы(Форма, Объект.ВалютаДокумента, Объект.КурсВзаиморасчетов, Объект.КратностьВзаиморасчетов, , , Истина);
	КонецЕсли;
	
	// При изменении даты предложить перезаполнить курс валюты

	Если Объект.ВалютаДокумента <> Форма.ВалютаРегламентированногоУчета И ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		СтарыйКурс      = Объект.КурсВзаиморасчетов;
		СтараяКратность = Объект.КратностьВзаиморасчетов;

		СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;

		Если СтарыйКурс <> Объект.КурсВзаиморасчетов ИЛИ СтараяКратность <> Объект.КратностьВзаиморасчетов Тогда
			ПересчитатьЦены = ЕстьСтрокиВТабличныхЧастях(Форма);
			ЗаполнитьРассчитатьСуммы(Форма, ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС);
		КонецЕсли;
	КонецЕсли;
	
	Форма.ОбновитьУсловноеОформлениеНаСервере();
	
КонецПроцедуры

Процедура ОрганизацияОбработатьИзменение(Форма)

	Объект = Форма.Объект;

	Форма.УстановитьФункциональныеОпцииФормы();
	
	ПричиныИзмененияСчетовУчета = Новый Массив;
	ПричиныИзмененияСчетовУчета.Добавить("Организация");
	
	ПодразделениеПоУмолчанию = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");
	Если БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ПодразделениеПоУмолчанию, Объект.Организация) Тогда
		Объект.ПодразделениеОрганизации = ПодразделениеПоУмолчанию;
	КонецЕсли;
	
	Если Объект.Свойство("Услуги") Тогда
		Для каждого СтрокаУслуги Из Объект.Услуги Цикл
			ПодразделениеУслуг = Объект.ПодразделениеОрганизации;
			Если НЕ СтрокаУслуги.СчетЗатрат.УчетПоПодразделениям Тогда
				СтрокаУслуги.ПодразделениеЗатрат = Неопределено;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаУслуги.ПодразделениеЗатрат)
				И БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(СтрокаУслуги.ПодразделениеЗатрат, Объект.Организация) Тогда
				Продолжить;
			КонецЕсли;
			СтрокаУслуги.ПодразделениеЗатрат = Объект.ПодразделениеОрганизации;
		КонецЦикла;
	КонецЕсли;
	
	ОпределитьНеобходимостьРасчетаСуммыВРознице(Форма);
	
	ТоварыСвернуты 			  = ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "ТоварыСвернуты");
	НТТ 					  = ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "НТТ");
	РассчитыватьСуммаВРознице = ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "РассчитыватьСуммаВРознице");
	
	ТоварыСвернуты = ТоварыСвернуты И НТТ И РассчитыватьСуммаВРознице;
	ПоступлениеТоваровУслугФормыКлиентСервер.УстановитьРеквизитФормы(Форма, "ТоварыСвернуты", ТоварыСвернуты);
	
	Объект.НДСВключенВСтоимость	= НЕ Форма.ПлательщикНДС;
	Если Объект.НДСНеВыделять <> Форма.ПрименениеУСНДоходы Тогда
		Объект.НДСНеВыделять = Форма.ПрименениеУСНДоходы;
		ЗаполнитьРассчитатьСуммы(Форма, Объект.ВалютаДокумента, Объект.КурсВзаиморасчетов, Объект.КратностьВзаиморасчетов, , , Истина);
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентОбработатьИзменение(Форма, ПричиныИзмененияСчетовУчета);
	КонецЕсли;
	
	ЗаполнитьСчетаУчета(Форма, ПричиныИзмененияСчетовУчета, "Организация");

	Форма.ОбновитьУсловноеОформлениеНаСервере();

КонецПроцедуры

Процедура СкладОбработатьИзменение(Форма)
	
	Объект = Форма.Объект;

	ОпределитьНеобходимостьРасчетаСуммыВРознице(Форма);
	
	Объект.ПодразделениеОрганизации = ОбщегоНазначенияБПВызовСервера.ПолучитьПодразделение(Объект.Организация, Объект.Склад);
	
	ЗаполнитьСчетаУчета(Форма, Новый Массив, "Склад");
	
КонецПроцедуры

Процедура КонтрагентОбработатьИзменение(Форма, ПричиныИзмененияСчетовУчета)

	Объект = Форма.Объект;

	ПричиныИзмененияСчетовУчета.Добавить("Контрагент");
	
	МассивВидовДоговоров = Форма.ПолучитьМассивВидовДоговоров();

	БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(Объект.ДоговорКонтрагента,
		Объект.Контрагент, Объект.Организация, МассивВидовДоговоров);

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаОбработатьИзменение(Форма, ПричиныИзмененияСчетовУчета);
	КонецЕсли;
	
	ЗаполнитьСчетаУчета(Форма, ПричиныИзмененияСчетовУчета, "Контрагент");
	
	Форма.ПоставщикРезидентТаможенногоСоюза = УчетНДС.КонтрагентРезидентТаможенногоСоюза(Объект.Контрагент);

КонецПроцедуры

Процедура ДоговорКонтрагентаОбработатьИзменение(Форма, ПричиныИзмененияСчетовУчета)
	
	Объект = Форма.Объект;
	
	ПричиныИзмененияСчетовУчета.Добавить("ДоговорКонтрагента");

	ВалютаДоИзменения 	= Объект.ВалютаДокумента;
	КурсДоИзменения 	= Объект.КурсВзаиморасчетов;
	КратностьДоИзменения= Объект.КратностьВзаиморасчетов;
	
	ПерезаполнитьЦены = Ложь;
	ПересчитатьЦены   = Ложь;
	ПересчитатьНДС    = Ложь;
	
	ДоговорУказан 	  = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.ДоговорКонтрагента,
		"ВалютаВзаиморасчетов, Владелец, ТипЦен, ВидДоговора, УчетАгентскогоНДС, РасчетыВУсловныхЕдиницах, НДСПоСтавкам4и2");
	
	ЭтоКомиссия 	     		= ДоговорУказан И РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
	ПоступлениеТоваровУслугФормыКлиентСервер.УстановитьРеквизитФормы(Форма, "ЭтоКомиссия", ЭтоКомиссия);
	Форма.ЭтоКомиссияНаЗакупку 	= ДоговорУказан И РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку;
	Форма.УчетАгентскогоНДС    	= ДоговорУказан И РеквизитыДоговора.УчетАгентскогоНДС;
	Форма.ПрименяютсяСтавки4и2 	= ДоговорУказан И РеквизитыДоговора.НДСПоСтавкам4и2;
	Форма.РасчетыВУЕ            = ДоговорУказан И РеквизитыДоговора.РасчетыВУсловныхЕдиницах;
	
	Если ДоговорУказан Тогда
		Форма.ВидДоговора           = РеквизитыДоговора.ВидДоговора;
		Форма.ВалютаВзаиморасчетов  = РеквизитыДоговора.ВалютаВзаиморасчетов;
		Объект.ВалютаДокумента 		= Форма.ВалютаВзаиморасчетов;
		Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Объект.Контрагент = РеквизитыДоговора.Владелец;
		КонецЕсли;
	Иначе
		Объект.ВалютаДокумента = Форма.ВалютаРегламентированногоУчета;
	КонецЕсли;
	
	Если ВалютаДоИзменения <> Объект.ВалютаДокумента Тогда
		СтруктураКурсаДокумента        = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	
	НовыйТипЦен = Объект.ТипЦен;
	Если ДоговорУказан И ЗначениеЗаполнено(РеквизитыДоговора.ТипЦен) Тогда
		НовыйТипЦен = РеквизитыДоговора.ТипЦен;
	КонецЕсли;
	
	ЕстьСтроки = ЕстьСтрокиВТабличныхЧастях(Форма);
	
	Если Объект.ВалютаДокумента <> ВалютаДоИзменения
		ИЛИ КурсДоИзменения <> Объект.КурсВзаиморасчетов 
		ИЛИ Объект.ТипЦен <> НовыйТипЦен Тогда
		ПересчитатьЦены = ЕстьСтроки;
	КонецЕсли;
	
	ПрежнийСуммаВключаетНДС = Объект.СуммаВключаетНДС;
	Если ДоговорУказан И ЗначениеЗаполнено(НовыйТипЦен) Тогда
		Объект.ТипЦен 			= НовыйТипЦен;
		Объект.СуммаВключаетНДС = НовыйТипЦен.ЦенаВключаетНДС;
		ПересчитатьНДС 			= Объект.СуммаВключаетНДС <> ПрежнийСуммаВключаетНДС;
	КонецЕсли;
	
	ОпределитьНеобходимостьРасчетаСуммыВРознице(Форма);
	
	ТоварыСвернуты			  = ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "ТоварыСвернуты");
	НТТ 					  = ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "НТТ");
	РассчитыватьСуммаВРознице = ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "РассчитыватьСуммаВРознице");
	
	Если НТТ И РассчитыватьСуммаВРознице И НЕ ТоварыСвернуты И Объект.Свойство("Товары") Тогда
		Для каждого СтрокаТаблицы Из Объект.Товары Цикл
			Если СтрокаТаблицы.ЦенаВРознице = 0 Тогда
				СтрокаТаблицы.ЦенаВРознице = Ценообразование.ПолучитьЦенуНоменклатуры(СтрокаТаблицы.Номенклатура,
					Объект.Склад.ТипЦенРозничнойТорговли, Объект.Дата, Форма.ВалютаРегламентированногоУчета, 1, 1);
				СтрокаТаблицы.СуммаВРознице = СтрокаТаблицы.Количество * СтрокаТаблицы.ЦенаВРознице;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТоварыСвернуты = ТоварыСвернуты И НТТ И РассчитыватьСуммаВРознице;
	ПоступлениеТоваровУслугФормыКлиентСервер.УстановитьРеквизитФормы(Форма, "ТоварыСвернуты", ТоварыСвернуты);
	
	Если ДоговорУказан Тогда
		Форма.УстановитьПараметрыВыбораДляСчетовУчета();
	КонецЕсли;
	
	Если Объект.ЗачетАвансов.Количество() > 0 Тогда
		Объект.ЗачетАвансов.Очистить();
	КонецЕсли;
	
	ЗаполнитьСчетаУчета(Форма, ПричиныИзмененияСчетовУчета, "ДоговорКонтрагента");
	
	Если ЕстьСтроки И (ПерезаполнитьЦены ИЛИ ПересчитатьЦены ИЛИ ПересчитатьНДС) Тогда
		ЗаполнитьРассчитатьСуммы(Форма, ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС);
	КонецЕсли;
	
	ЗаполнитьОтражениеВУСНВТабличнойЧасти(Форма);
	
	Форма.ТребуетсяСчетФактура = НЕ Форма.УчетАгентскогоНДС И НЕ ЭтоКомиссия
		И Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку
		И НЕ Объект.НДСНеВыделять;
	
	Форма.ОбновитьУсловноеОформлениеНаСервере();
		
КонецПроцедуры

Процедура ЗаполнитьРассчитатьСуммыВСтроке(Форма, 
					СтрокаТаблицы, 
					ТаблицаЦенНоменклатуры, 
					ВалютаПередИзменением, 
					СтруктураКурса, 
					ПерезаполнитьЦены, 
					ПересчитатьЦены, 
					ПересчитатьНДС,  
					ЕстьНДС, 
					ЗначениеПустогоКоличества,
					ПрименяютсяСтавки4и2,
					НДСНеВыделять)

	Объект = Форма.Объект;

	Если ПерезаполнитьЦены И ТаблицаЦенНоменклатуры <> Неопределено Тогда
		
		НайденнаяСтрока	= ТаблицаЦенНоменклатуры.Найти(СтрокаТаблицы.Номенклатура, "Номенклатура");
		Если НайденнаяСтрока <> Неопределено Тогда
			Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				НайденнаяСтрока.Цена, НайденнаяСтрока.Валюта, Объект.ВалютаДокумента, НайденнаяСтрока.Курс,
				Объект.КурсВзаиморасчетов, НайденнаяСтрока.Кратность, Объект.КратностьВзаиморасчетов);
			ЦенаВключаетНДС = НайденнаяСтрока.ЦенаВключаетНДС;
		Иначе
			Цена = 0;
			// Признак того, что цена включает НДС, хранится в реквизите ЦенаВключаетНДС типа цен
            Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
                ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТипЦен, "ЦенаВключаетНДС");
            Иначе
                ЦенаВключаетНДС = Ложь;
            КонецЕсли;
		КонецЕсли;
		
	Иначе
		Если ПересчитатьЦены Тогда

			Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				СтрокаТаблицы.Цена, ВалютаПередИзменением, Объект.ВалютаДокумента, СтруктураКурса.Курс,
				Объект.КурсВзаиморасчетов, СтруктураКурса.Кратность, Объект.КратностьВзаиморасчетов);

		Иначе
			Цена = СтрокаТаблицы.Цена;
		КонецЕсли;
		// Признак того, что цена включает НДС, хранится в реквизите СуммаВключаетНДС документа
		ЦенаВключаетНДС = ?(ПересчитатьНДС, НЕ Объект.СуммаВключаетНДС, Объект.СуммаВключаетНДС);
	КонецЕсли;

	Если ЕстьНДС Тогда
		
		Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, ЦенаВключаетНДС,
			Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС, ПрименяютсяСтавки4и2));

		// У объектов строительства нет поля Цена
		Если СтрокаТаблицы.Свойство("Цена") <> Неопределено Тогда
			СтрокаТаблицы.Цена = Цена;
		КонецЕсли;

		СтрокаТаблицы.Сумма = Цена * ?(СтрокаТаблицы.Количество = 0, ЗначениеПустогоКоличества, СтрокаТаблицы.Количество);

		Если НДСНеВыделять Тогда
			СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЕсли;
		
		СтрокаТаблицы.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(СтрокаТаблицы.Сумма,
			Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС, ПрименяютсяСтавки4и2));
	Иначе
		// У объектов строительства нет поля Цена
		Если СтрокаТаблицы.Свойство("Цена") <> Неопределено Тогда
			СтрокаТаблицы.Цена = Цена;
		КонецЕсли;
		СтрокаТаблицы.Сумма = Цена * ?(СтрокаТаблицы.Количество =0, ЗначениеПустогоКоличества, СтрокаТаблицы.Количество);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРассчитатьСуммыВСтрокеПоОбъектамСтроительства(Форма, 
					СтрокаТаблицы, 
					ВалютаПередИзменением, 
					СтруктураКурса,
					ПересчитатьЦены,
					ПересчитатьНДС,
					ЕстьНДС, 
					ЗначениеПустогоКоличества,
					ПрименяютсяСтавки4и2,
					НДСНеВыделять)

	Объект = Форма.Объект;

	Если ПересчитатьЦены Тогда
		Сумма = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.Сумма,
			ВалютаПередИзменением,
			Объект.ВалютаДокумента,
			СтруктураКурса.Курс,
			Объект.КурсВзаиморасчетов,
			СтруктураКурса.Кратность,
			Объект.КратностьВзаиморасчетов);
	Иначе
		Сумма = СтрокаТаблицы.Сумма;
	КонецЕсли;

	// Признак того, что цена включает НДС, хранится в реквизите СуммаВключаетНДС документа
	ЦенаВключаетНДС = ?(ПересчитатьНДС, НЕ Объект.СуммаВключаетНДС, Объект.СуммаВключаетНДС);

	Если ЕстьНДС Тогда
		
		Если НДСНеВыделять Тогда
			СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЕсли;
		
		Сумма = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
			Сумма,
			ЦенаВключаетНДС,
			Объект.СуммаВключаетНДС,
			УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС, ПрименяютсяСтавки4и2));

		СтрокаТаблицы.Сумма = Сумма;

		СтрокаТаблицы.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
			СтрокаТаблицы.Сумма,
			Объект.СуммаВключаетНДС,
			УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС, ПрименяютсяСтавки4и2));
	Иначе
		СтрокаТаблицы.Сумма = Сумма;
	КонецЕсли;

КонецПроцедуры

Функция ЕстьСтрокиВТабличныхЧастях(Форма)

	Объект = Форма.Объект;

	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги Тогда
		Возврат (Объект.Свойство("Товары") И Объект.Товары.Количество() > 0 
			ИЛИ Объект.Свойство("Услуги") И Объект.Услуги.Количество() > 0 
			ИЛИ Объект.Свойство("ВозвратнаяТара") И Объект.ВозвратнаяТара.Количество() > 0 
			ИЛИ Объект.Свойство("АгентскиеУслуги") И Объект.АгентскиеУслуги.Количество() > 0);

	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
		Возврат (Объект.Товары.Количество() > 0);

	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
		Возврат (Объект.Оборудование.Количество() > 0 ИЛИ Объект.Товары.Количество() > 0 
			ИЛИ Объект.Услуги.Количество() > 0 ИЛИ Объект.ВозвратнаяТара.Количество() > 0);

	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства Тогда
		Возврат (Объект.ОбъектыСтроительства.Количество() > 0 ИЛИ Объект.Услуги.Количество() > 0);

	Иначе
		Возврат Ложь;

	КонецЕсли;

КонецФункции

Процедура ЗаполнитьОтражениеВУСНВТабличнойЧасти(Форма)

	Объект = Форма.Объект;

	Если НЕ Объект.Свойство("Товары") Тогда
		Возврат;
	КонецЕсли;

	ЭтоКомиссия = ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "ЭтоКомиссия");

	ОтражениеВУСН	= ПоступлениеТоваровУслугФормыКлиентСервер.ОтражениеВУСН(Объект.ВидОперации, ЭтоКомиссия);
	
	Для каждого СтрокаТаблицы Из Объект.Товары Цикл
		СтрокаТаблицы.ОтражениеВУСН	= ОтражениеВУСН;
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиСтрокуТабличнойЧасти(Форма, ИмяТабличнойЧасти, СтруктураОтбора)

	Объект = Форма.Объект;

	СтрокаТабличнойЧасти = Неопределено;

	МассивНайденныхСтрок = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
	Если МассивНайденныхСтрок.Количество() > 0 Тогда
		// Нашли. Вернем первую найденную строку.
		СтрокаТабличнойЧасти = МассивНайденныхСтрок[0];
	КонецЕсли;

	Возврат СтрокаТабличнойЧасти;

КонецФункции

Процедура ЗаполнитьСчетаУчета(Форма, ПричиныИзмененияСчетовУчета, ИмяРеквизита)
	
	Если Не СчетаУчетаВДокументахКлиентСервер.МожноНачатьЗаполнениеСчетовУчета(ИмяРеквизита, ПричиныИзмененияСчетовУчета) Тогда
		Возврат;
	КонецЕсли;
		
	ПараметрыЗаполнения = ПоступлениеТоваровУслугФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(ПричиныИзмененияСчетовУчета, Форма.Объект);
	СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(ПараметрыЗаполнения);
	
	Для Каждого ИмяТабличнойЧасти Из СчетаУчетаВДокументахКлиентСервер.ТабличныеЧастиКЗаполнению(ПараметрыЗаполнения.КЗаполнению) Цикл
		Форма.ЗаполнитьДобавленныеКолонкиТаблиц(ИмяТабличнойЧасти);
	КонецЦикла;
		
КонецПроцедуры
