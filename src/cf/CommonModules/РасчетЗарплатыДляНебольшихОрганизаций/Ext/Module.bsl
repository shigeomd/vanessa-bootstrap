////////////////////////////////////////////////////////////////////////////////
// РасчетЗарплатыДляНебольшихОрганизаций: 
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает признак возможности использования режима расчета зарплаты для
// небольших организаций.
//
// Возвращаемое значение;
//		Булево - Возвращает Истина, если использование возможно, Ложь - нет.
//
Функция РасчетЗарплатыДляНебольшихОрганизацийВозможен() Экспорт
	
	РасчетВозможен = Истина;
	
	ТекущиеКоличества = ТекущееКоличествоСотрудников();
	Если ТекущиеКоличества.Количество() > 0 Тогда
		
		МаксимальноеКоличествоСотрудниковВОрганизации = ТекущиеКоличества[0].КоличествоСотрудников;
		РасчетВозможен = (МаксимальноеКоличествоСотрудниковВОрганизации <= ПорогЗапрета());
		
	КонецЕсли;
	
	Возврат РасчетВозможен;
	
КонецФункции

// Возвращает текущее количество работающих сотрудников организации.
//
// Параметры:
//		Организация - СправочникСсылка.Организации
//
// Возвращаемое значение:
//		Число
//
Функция КоличествоСотрудниковОрганизации(Организация) Экспорт
	
	КоличествоСотрудников = 0;
	
	КоличестваСотрудников = ТекущееКоличествоСотрудников(Организация);
	Если КоличестваСотрудников.Количество() > 0 Тогда
		КоличествоСотрудников = КоличестваСотрудников[0].КоличествоСотрудников;
	КонецЕсли; 
	
	Возврат КоличествоСотрудников;
	
КонецФункции

// Возвращает текст предупреждения об ограничениях использования режима расчета зарплаты
// для небольших организаций, если количество сотрудников, достигло порогового значения.
//
// Параметры:
//		Организация - СправочникСсылка.Организации
//
// Возвращаемое значение:
//		Строка
//
Функция ТекстПредупрежденияОбОграниченияхРежимаРасчетаЗарплатыДляНебольшихОрганизаций(Организация, ПредыдущееКоличествоСотрудников) Экспорт
	
	ТекстПредупреждения = "";
	КоличествоСотрудников = КоличествоСотрудниковОрганизации(Организация);
	Если ПредыдущееКоличествоСотрудников < КоличествоСотрудников
		И КоличествоСотрудников > ПорогЗапрета() - ПорогПредупреждения() Тогда
		
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			РасчетЗарплатыДляНебольшихОрганизацийПереопределяемый.ТекстСообщенияОПриближенииКМаксимальноДопустимомуКоличествуРаботающихСотрудников(),
			ПорогЗапрета(),
			Организация,
			КоличествоСотрудников);
				
	КонецЕсли; 
	
	Возврат ТекстПредупреждения;
	
КонецФункции

// Запоминает во временном хранилище текущее количество работающих сотрудников организации.
//
// Параметры:
//		Форма		- УправляемаяФорма
//		Организация - СправочникСсылка.Организации
//
Процедура ЗапомнитьТекущееКоличествоСотрудников(Форма, Организация) Экспорт
	
	Если Форма.ПолучитьФункциональнуюОпциюФормы("РасчетЗарплатыДляНебольшихОрганизаций")
		И ЗначениеЗаполнено(Организация) Тогда
		
		Форма.ТекущееКоличествоСотрудников = КоличествоСотрудниковОрганизации(Организация);
		
	КонецЕсли; 
	
КонецПроцедуры

// Возвращает максимально возможное количество сотрудников, при  котором возможно
// использование режима расчета зарплаты для небольших организаций.
//
// Возвращаемое значение;
//		Число
//
Функция ПорогЗапрета() Экспорт
	
	Возврат 60;
	
КонецФункции

// Возвращает средний заработок на указанную дату.
//
// Параметры:
//		Сотрудник		- СправочникСсылка.Сотрудники
//		ДатаСведений	- Дата
//		ПериодЛет		- Число
//
// Возвращаемое значение:
//		Число
//
Функция СреднийЗаработок(Сотрудник, ДатаСведений, ПериодЛет = 1) Экспорт
	
	СреднийДневнойЗаработок = 0;
	
	ПериодМесяцев = ПериодЛет * 12 - 1;
	
	ОкончаниеПериода = НачалоМесяца(ДатаСведений) - 1;
	НачалоПериода = ДобавитьМесяц(НачалоМесяца(ОкончаниеПериода), - ПериодМесяцев);
	
	КадровыеДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Сотрудник, "ГоловнаяОрганизация");
	Если КадровыеДанныеСотрудника.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", КадровыеДанныеСотрудника[0].ГоловнаяОрганизация);
		Запрос.УстановитьПараметр("ФизическоеЛицо", КадровыеДанныеСотрудника[0].ФизическоеЛицо);
		Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
		Запрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериода);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация,
			|	ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо,
			|	МИНИМУМ(НАЧАЛОПЕРИОДА(ВЫБОР
			|				КОГДА ТекущиеКадровыеДанныеСотрудников.ДатаПриема > &НачалоПериода
			|					ТОГДА ТекущиеКадровыеДанныеСотрудников.ДатаПриема
			|				ИНАЧЕ &НачалоПериода
			|			КОНЕЦ, ДЕНЬ)) КАК НачалоПериода,
			|	МАКСИМУМ(КОНЕЦПЕРИОДА(ВЫБОР
			|				КОГДА ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения < &ОкончаниеПериода
			|						И ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1)
			|					ТОГДА ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения
			|				ИНАЧЕ &ОкончаниеПериода
			|			КОНЕЦ, ДЕНЬ)) КАК ОкончаниеПериода
			|ПОМЕСТИТЬ ВТПериодыРаботыФизическихЛиц
			|ИЗ
			|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
			|ГДЕ
			|	ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация = &ГоловнаяОрганизация
			|	И ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо = &ФизическоеЛицо
			|	И ТекущиеКадровыеДанныеСотрудников.ДатаПриема <= &ОкончаниеПериода
			|	И ТекущиеКадровыеДанныеСотрудников.ДатаПриема <> ДАТАВРЕМЯ(1, 1, 1)
			|	И (ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения >= &НачалоПериода
			|			ИЛИ ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1))
			|
			|СГРУППИРОВАТЬ ПО
			|	ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо,
			|	ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	НачисленияУдержанияПоСотрудникам.ФизическоеЛицо,
			|	СУММА(НачисленияУдержанияПоСотрудникам.Сумма) КАК Сумма
			|ПОМЕСТИТЬ ВТНачисления
			|ИЗ
			|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыРаботыФизическихЛиц КАК ПериодыРаботыФизическихЛиц
			|		ПО НачисленияУдержанияПоСотрудникам.Организация.ГоловнаяОрганизация = ПериодыРаботыФизическихЛиц.ГоловнаяОрганизация
			|			И НачисленияУдержанияПоСотрудникам.ФизическоеЛицо = ПериодыРаботыФизическихЛиц.ФизическоеЛицо
			|			И НачисленияУдержанияПоСотрудникам.Период <= ПериодыРаботыФизическихЛиц.ОкончаниеПериода
			|			И (НачисленияУдержанияПоСотрудникам.Период >= НАЧАЛОПЕРИОДА(ПериодыРаботыФизическихЛиц.НачалоПериода, МЕСЯЦ))
			|			И (НачисленияУдержанияПоСотрудникам.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено))
			|			И (НЕ НачисленияУдержанияПоСотрудникам.НачислениеУдержание.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоПрофзаболевание), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодам)))
			|
			|СГРУППИРОВАТЬ ПО
			|	НачисленияУдержанияПоСотрудникам.ФизическоеЛицо
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПериодыРаботыФизическихЛиц.ФизическоеЛицо,
			|	ВЫБОР
			|		КОГДА БольничныйЛист.ДатаНачала > ПериодыРаботыФизическихЛиц.НачалоПериода
			|			ТОГДА БольничныйЛист.ДатаНачала
			|		ИНАЧЕ ПериодыРаботыФизическихЛиц.НачалоПериода
			|	КОНЕЦ КАК ДатаНачала,
			|	ВЫБОР
			|		КОГДА БольничныйЛист.ДатаОкончания < ПериодыРаботыФизическихЛиц.ОкончаниеПериода
			|			ТОГДА БольничныйЛист.ДатаОкончания
			|		ИНАЧЕ ПериодыРаботыФизическихЛиц.ОкончаниеПериода
			|	КОНЕЦ КАК ДатаОкончания
			|ПОМЕСТИТЬ ВТОтсутствия
			|ИЗ
			|	Документ.БольничныйЛист КАК БольничныйЛист
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыРаботыФизическихЛиц КАК ПериодыРаботыФизическихЛиц
			|		ПО БольничныйЛист.Организация.ГоловнаяОрганизация = ПериодыРаботыФизическихЛиц.ГоловнаяОрганизация
			|			И БольничныйЛист.ФизическоеЛицо = ПериодыРаботыФизическихЛиц.ФизическоеЛицо
			|			И БольничныйЛист.ДатаНачала <= ПериодыРаботыФизическихЛиц.ОкончаниеПериода
			|			И БольничныйЛист.ДатаОкончания >= ПериодыРаботыФизическихЛиц.НачалоПериода
			|			И (БольничныйЛист.Проведен)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ПериодыРаботыФизическихЛиц.ФизическоеЛицо,
			|	ВЫБОР
			|		КОГДА Отпуск.ДатаНачалаОсновногоОтпуска > ПериодыРаботыФизическихЛиц.НачалоПериода
			|			ТОГДА Отпуск.ДатаНачалаОсновногоОтпуска
			|		ИНАЧЕ ПериодыРаботыФизическихЛиц.НачалоПериода
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА Отпуск.ДатаОкончанияОсновногоОтпуска < ПериодыРаботыФизическихЛиц.ОкончаниеПериода
			|			ТОГДА Отпуск.ДатаОкончанияОсновногоОтпуска
			|		ИНАЧЕ ПериодыРаботыФизическихЛиц.ОкончаниеПериода
			|	КОНЕЦ
			|ИЗ
			|	Документ.Отпуск КАК Отпуск
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыРаботыФизическихЛиц КАК ПериодыРаботыФизическихЛиц
			|		ПО Отпуск.Организация.ГоловнаяОрганизация = ПериодыРаботыФизическихЛиц.ГоловнаяОрганизация
			|			И Отпуск.ФизическоеЛицо = ПериодыРаботыФизическихЛиц.ФизическоеЛицо
			|			И Отпуск.ДатаНачалаОсновногоОтпуска <= ПериодыРаботыФизическихЛиц.ОкончаниеПериода
			|			И Отпуск.ДатаОкончанияОсновногоОтпуска >= ПериодыРаботыФизическихЛиц.НачалоПериода
			|			И (Отпуск.Проведен)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Отсутствия.ФизическоеЛицо,
			|	СУММА(РАЗНОСТЬДАТ(Отсутствия.ДатаНачала, Отсутствия.ДатаОкончания, ДЕНЬ) + 1) КАК НеОтработанныеДни
			|ПОМЕСТИТЬ ВТНеОтработанныеДни
			|ИЗ
			|	ВТОтсутствия КАК Отсутствия
			|
			|СГРУППИРОВАТЬ ПО
			|	Отсутствия.ФизическоеЛицо
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПериодыРаботыФизическихЛиц.ГоловнаяОрганизация,
			|	ПериодыРаботыФизическихЛиц.ФизическоеЛицо,
			|	ЕСТЬNULL(Начисления.Сумма, 0) КАК Сумма,
			|	РАЗНОСТЬДАТ(ПериодыРаботыФизическихЛиц.НачалоПериода, ПериодыРаботыФизическихЛиц.ОкончаниеПериода, ДЕНЬ) + 1 КАК КалендарныеРабочиеДни,
			|	ЕСТЬNULL(НеОтработанныеКалендарныеДни.НеОтработанныеДни, 0) КАК НеОтработанныеДни
			|ПОМЕСТИТЬ ВТДанныеДляРасчета
			|ИЗ
			|	ВТПериодыРаботыФизическихЛиц КАК ПериодыРаботыФизическихЛиц
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНеОтработанныеДни КАК НеОтработанныеКалендарныеДни
			|		ПО ПериодыРаботыФизическихЛиц.ФизическоеЛицо = НеОтработанныеКалендарныеДни.ФизическоеЛицо
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисления КАК Начисления
			|		ПО ПериодыРаботыФизическихЛиц.ФизическоеЛицо = Начисления.ФизическоеЛицо
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА ДанныеДляРасчета.КалендарныеРабочиеДни = ДанныеДляРасчета.НеОтработанныеДни
			|			ТОГДА 0
			|		КОГДА ДанныеДляРасчета.КалендарныеРабочиеДни - ДанныеДляРасчета.НеОтработанныеДни = 0
			|			ТОГДА 0
			|		ИНАЧЕ ДанныеДляРасчета.Сумма / (ДанныеДляРасчета.КалендарныеРабочиеДни - ДанныеДляРасчета.НеОтработанныеДни)
			|	КОНЕЦ КАК СреднийДневнойЗаработок
			|ИЗ
			|	ВТДанныеДляРасчета КАК ДанныеДляРасчета";
			
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			СреднийДневнойЗаработок = Выборка.СреднийДневнойЗаработок;
			
		КонецЕсли; 
			
	КонецЕсли; 
	
	Возврат СреднийДневнойЗаработок;
	
КонецФункции

// Уточняет отработанное время в табличной части Начисления.
//
// Параметры:
//		Объект - ДокументОбъект.НачислениеЗарплаты
//
Процедура ЗаполнитьРезультатНачисления(Объект, Начисления) Экспорт
	
	ПроизводственныйКалендарьРФ = КалендарныеГрафики.ПроизводственныйКалендарьРоссийскойФедерации();
	Если ПроизводственныйКалендарьРФ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	НачалоПериода = НачалоДня(Объект.МесяцНачисления);
	КонецПериода = НачалоДня(КонецМесяца(НачалоПериода));
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("НачалоПериода", Объект.МесяцНачисления);
	Запрос.УстановитьПараметр("ОкончаниеПериода", КонецМесяца(Объект.МесяцНачисления));
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	НачисленияУдержанияПоСотрудникам.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВЫБОР
		|		КОГДА НачисленияУдержанияПоСотрудникам.ДатаНачала < &НачалоПериода
		|			ТОГДА &НачалоПериода
		|		ИНАЧЕ НачисленияУдержанияПоСотрудникам.ДатаНачала
		|	КОНЕЦ КАК ДатаНачала,
		|	ВЫБОР
		|		КОГДА НачисленияУдержанияПоСотрудникам.ДатаОкончания > &ОкончаниеПериода
		|			ТОГДА &ОкончаниеПериода
		|		ИНАЧЕ НачисленияУдержанияПоСотрудникам.ДатаОкончания
		|	КОНЕЦ КАК ДатаОкончания
		|ИЗ
		|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
		|ГДЕ
		|	НачисленияУдержанияПоСотрудникам.Организация = &Организация
		|	И НачисленияУдержанияПоСотрудникам.ДатаНачала <= &ОкончаниеПериода
		|	И НачисленияУдержанияПоСотрудникам.ДатаОкончания >= &НачалоПериода
		|	И НачисленияУдержанияПоСотрудникам.Регистратор <> &Ссылка
		|	И НачисленияУдержанияПоСотрудникам.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
		|	И НачисленияУдержанияПоСотрудникам.НачислениеУдержание.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоПрофзаболевание), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодам))";
		
	ВытесненноеВремяПоСотрудникам = Новый Соответствие;
		
	ТаблицаВытеснений = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаВытеснения Из ТаблицаВытеснений Цикл
		
		РабочихДнейЧасов = РасчетЗарплатыБазовый.РабочихДнейЧасовВПериоде(ПроизводственныйКалендарьРФ, СтрокаВытеснения.ДатаНачала, СтрокаВытеснения.ДатаОкончания);
		
		Если РабочихДнейЧасов.Дней > 0 Тогда
			
			ВытесненноеВремяСотрудника = ВытесненноеВремяПоСотрудникам.Получить(СтрокаВытеснения.ФизическоеЛицо);
			Если ВытесненноеВремяСотрудника = Неопределено Тогда
				ВытесненноеВремяСотрудника = Новый Структура("Дней,Часов", 0, 0);
			КонецЕсли; 
			
			ВытесненноеВремяСотрудника.Дней = ВытесненноеВремяСотрудника.Дней + РабочихДнейЧасов.Дней;
			ВытесненноеВремяСотрудника.Часов = ВытесненноеВремяСотрудника.Часов + РабочихДнейЧасов.Часов;
			
			ВытесненноеВремяПоСотрудникам.Вставить(СтрокаВытеснения.ФизическоеЛицо, ВытесненноеВремяСотрудника);
			
		КонецЕсли;
			
	КонецЦикла;
	
	КоэффициентыПересчета = Новый Соответствие;
	
	Если ВытесненноеВремяПоСотрудникам.Количество() > 0 Тогда
		
		Если ТипЗнч(Начисления) = Тип("ДанныеФормыКоллекция") Тогда
			ФизическиеЛицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Начисления.Выгрузить(, "Сотрудник").ВыгрузитьКолонку("Сотрудник"), "ФизическоеЛицо");
		Иначе
			ФизическиеЛицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Начисления.ВыгрузитьКолонку("Сотрудник"), "ФизическоеЛицо");
		КонецЕсли;
		
		Для каждого СтрокаНачислений Из Начисления Цикл
			
			Если ЗначениеЗаполнено(СтрокаНачислений.ОтработаноДней) И СтрокаНачислений.ОтработаноДней > 0 Тогда
				
				ОтработаноДней = СтрокаНачислений.ОтработаноДней;
				
				ВытеснениеСотрудника = ВытесненноеВремяПоСотрудникам.Получить(ФизическиеЛицаСотрудников.Получить(СтрокаНачислений.Сотрудник));
				Если ВытеснениеСотрудника <> Неопределено Тогда
					
					СтрокаНачислений.ОтработаноДней = СтрокаНачислений.ОтработаноДней - ВытеснениеСотрудника.Дней;
					Если СтрокаНачислений.ОтработаноДней < 0 Тогда
						СтрокаНачислений.ОтработаноДней = 0;
					КонецЕсли; 
					
					СтрокаНачислений.ОтработаноЧасов = СтрокаНачислений.ОтработаноЧасов - ВытеснениеСотрудника.Часов;
					Если СтрокаНачислений.ОтработаноЧасов < 0 Тогда
						СтрокаНачислений.ОтработаноЧасов = 0;
					КонецЕсли; 
					
				КонецЕсли; 
				
				Если СтрокаНачислений.ОтработаноДней <> ОтработаноДней Тогда
					КоэффициентыПересчета.Вставить(СтрокаНачислений.Сотрудник, СтрокаНачислений.ОтработаноДней / ОтработаноДней);
				КонецЕсли; 
				
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЕсли; 
	
	Если КоэффициентыПересчета.Количество() > 0 Тогда
		
		Для каждого ОписаниеКоэффициентаПересчета Из КоэффициентыПересчета Цикл
			
			КоэффициентПересчета = ОписаниеКоэффициентаПересчета.Значение;
			СтрокиНачислений = Начисления.НайтиСтроки(Новый Структура("Сотрудник", ОписаниеКоэффициентаПересчета.Ключ));
			Для каждого СтрокаНачислений Из СтрокиНачислений Цикл
				СтрокаНачислений.Результат = СтрокаНачислений.Результат * КоэффициентПересчета;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры

// Заполняет табличную часть Удержания, плановыми удержаниями сотрудников. При заданной
// таблице значений ДобавляемыеНачисления производится дозаполнение табличной части Удержания.
//
// Параметры:
//		Объект 					- ДокументОбъект.НачислениеЗарплаты
//		ДобавляемыеНачисления	- ТаблицаЗначений, по составу колонок идентичная табличной части Начисления,
//									документа НачислениеЗарплаты.
//
Процедура ЗаполнитьРезультатУдержаний(Объект, ДобавляемыеНачисления = Неопределено) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("РасчетЗарплатыДляНебольшихОрганизаций")
		ИЛИ НЕ РасчетЗарплатыДляНебольшихОрганизацийВозможен() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Период", Объект.МесяцНачисления);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("НДФЛ", Объект.НДФЛ.Выгрузить());
	
	Если ДобавляемыеНачисления = Неопределено Тогда
		Объект.Удержания.Очистить();
		Запрос.УстановитьПараметр("Начисления", Объект.Начисления.Выгрузить());
	Иначе
		Запрос.УстановитьПараметр("Начисления", ДобавляемыеНачисления);
	КонецЕсли;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	&Период КАК Период,
		|	&Организация КАК Организация,
		|	Начисления.Сотрудник КАК Сотрудник,
		|	Начисления.Результат КАК Результат
		|ПОМЕСТИТЬ ВТДанныеНачисленийДокумента
		|ИЗ
		|	&Начисления КАК Начисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Начисления.Период КАК Период,
		|	Начисления.Организация КАК Организация,
		|	Начисления.Сотрудник КАК Сотрудник,
		|	СУММА(Начисления.Результат) КАК Результат
		|ПОМЕСТИТЬ ВТДанныеНачисленийПредварительно
		|ИЗ
		|	ВТДанныеНачисленийДокумента КАК Начисления
		|
		|СГРУППИРОВАТЬ ПО
		|	Начисления.Период,
		|	Начисления.Организация,
		|	Начисления.Сотрудник
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	НачисленияУдержанияПоСотрудникам.Период,
		|	НачисленияУдержанияПоСотрудникам.Организация,
		|	НачисленияУдержанияПоСотрудникам.Сотрудник,
		|	СУММА(НачисленияУдержанияПоСотрудникам.Сумма)
		|ИЗ
		|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
		|ГДЕ
		|	НачисленияУдержанияПоСотрудникам.Регистратор <> &Ссылка
		|	И НачисленияУдержанияПоСотрудникам.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
		|	И НачисленияУдержанияПоСотрудникам.Период = &Период
		|	И НачисленияУдержанияПоСотрудникам.Организация = &Организация
		|
		|СГРУППИРОВАТЬ ПО
		|	НачисленияУдержанияПоСотрудникам.Период,
		|	НачисленияУдержанияПоСотрудникам.Организация,
		|	НачисленияУдержанияПоСотрудникам.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Начисления.Период КАК Период,
		|	Начисления.Организация КАК Организация,
		|	Начисления.Сотрудник КАК Сотрудник,
		|	СУММА(Начисления.Результат) КАК Результат
		|ПОМЕСТИТЬ ВТДанныеНачислений
		|ИЗ
		|	ВТДанныеНачисленийПредварительно КАК Начисления
		|
		|СГРУППИРОВАТЬ ПО
		|	Начисления.Период,
		|	Начисления.Организация,
		|	Начисления.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НДФЛ.ФизическоеЛицо,
		|	НДФЛ.Налог
		|ПОМЕСТИТЬ ВТДанныеНДФЛПредварительно
		|ИЗ
		|	&НДФЛ КАК НДФЛ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НДФЛ.ФизическоеЛицо,
		|	СУММА(НДФЛ.Налог) КАК Налог
		|ПОМЕСТИТЬ ВТДанныеНДФЛ
		|ИЗ
		|	ВТДанныеНДФЛПредварительно КАК НДФЛ
		|
		|СГРУППИРОВАТЬ ПО
		|	НДФЛ.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НАЧАЛОПЕРИОДА(ДанныеНачислений.Период, МЕСЯЦ) КАК Период,
		|	ДанныеНачислений.Организация,
		|	ВЫРАЗИТЬ(ДанныеНачислений.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТФизическиеЛица
		|ИЗ
		|	ВТДанныеНачислений КАК ДанныеНачислений
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КОНЕЦПЕРИОДА(ДанныеНачислений.Период, МЕСЯЦ),
		|	ДанныеНачислений.Организация,
		|	ВЫРАЗИТЬ(ДанныеНачислений.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо
		|ИЗ
		|	ВТДанныеНачислений КАК ДанныеНачислений";
		
	Запрос.Выполнить();
		
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеУдержания",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТФизическиеЛица",
			"Организация,ФизическоеЛицо"
		)
	);
		
	Запрос.Текст =
		"ВЫБРАТЬ
		|	МИНИМУМ(ПлановыеУдержанияСрезПоследних.Период) КАК Период,
		|	ПлановыеУдержанияСрезПоследних.ФизическоеЛицо,
		|	ПлановыеУдержанияСрезПоследних.Удержание,
		|	ПлановыеУдержанияСрезПоследних.ДокументОснование КАК ИсполнительныйДокумент,
		|	ЕСТЬNULL(ДанныеНачислений.Результат, 0) КАК Начисления,
		|	ЕСТЬNULL(ДанныеНДФЛ.Налог, 0) КАК Налог
		|ПОМЕСТИТЬ ВТУдержания
		|ИЗ
		|	ВТПлановыеУдержанияСрезПоследних КАК ПлановыеУдержанияСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеНачислений КАК ДанныеНачислений
		|		ПО (ПлановыеУдержанияСрезПоследних.ФизическоеЛицо = ВЫРАЗИТЬ(ДанныеНачислений.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо)
		|			И ПлановыеУдержанияСрезПоследних.Организация = ДанныеНачислений.Организация
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеНДФЛ КАК ДанныеНДФЛ
		|		ПО ПлановыеУдержанияСрезПоследних.ФизическоеЛицо = ДанныеНДФЛ.ФизическоеЛицо
		|ГДЕ
		|	ПлановыеУдержанияСрезПоследних.Используется
		|
		|СГРУППИРОВАТЬ ПО
		|	ПлановыеУдержанияСрезПоследних.ФизическоеЛицо,
		|	ПлановыеУдержанияСрезПоследних.Удержание,
		|	ПлановыеУдержанияСрезПоследних.ДокументОснование,
		|	ДанныеНачислений.Результат,
		|	ДанныеНДФЛ.Налог";
		
	Запрос.Выполнить();
		
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"УсловияУдержанияПоИсполнительномуДокументу",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТУдержания",
			"ИсполнительныйДокумент"
		)
	);
		
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Удержания.ФизическоеЛицо КАК Сотрудник,
		|	Удержания.Удержание,
		|	Удержания.ИсполнительныйДокумент,
		|	Удержания.Начисления,
		|	Удержания.Налог,
		|	ВЫРАЗИТЬ(Удержания.Удержание КАК ПланВидовРасчета.Удержания).КатегорияУдержания КАК КатегорияУдержания,
		|	УсловияУдержанияПоИсполнительномуДокументуСрезПоследних.Получатель КАК Контрагент,
		|	УсловияУдержанияПоИсполнительномуДокументуСрезПоследних.СпособРасчета,
		|	УсловияУдержанияПоИсполнительномуДокументуСрезПоследних.Процент,
		|	УсловияУдержанияПоИсполнительномуДокументуСрезПоследних.Сумма,
		|	УсловияУдержанияПоИсполнительномуДокументуСрезПоследних.Числитель,
		|	УсловияУдержанияПоИсполнительномуДокументуСрезПоследних.Знаменатель
		|ИЗ
		|	ВТУдержания КАК Удержания
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУсловияУдержанияПоИсполнительномуДокументуСрезПоследних КАК УсловияУдержанияПоИсполнительномуДокументуСрезПоследних
		|		ПО Удержания.ФизическоеЛицо = УсловияУдержанияПоИсполнительномуДокументуСрезПоследних.ФизическоеЛицо
		|			И Удержания.ИсполнительныйДокумент = УсловияУдержанияПоИсполнительномуДокументуСрезПоследних.ИсполнительныйДокумент";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СтрокаУдержаний = Объект.Удержания.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаУдержаний, Выборка);
			Если ЗначениеЗаполнено(Выборка.СпособРасчета) Тогда
				
				БазаУдержаний = Выборка.Начисления - Выборка.Налог;
				Если Выборка.СпособРасчета = Перечисления.СпособыРасчетаУдержанияПоИсполнительномуДокументу.ФиксированнойСуммой Тогда
					СтрокаУдержаний.Результат = СтрокаУдержаний.Результат + Выборка.Сумма;
				ИначеЕсли Выборка.СпособРасчета = Перечисления.СпособыРасчетаУдержанияПоИсполнительномуДокументу.Процентом Тогда
					СтрокаУдержаний.Результат = СтрокаУдержаний.Результат + БазаУдержаний * Выборка.Процент / 100;
				ИначеЕсли Выборка.СпособРасчета = Перечисления.СпособыРасчетаУдержанияПоИсполнительномуДокументу.Долей Тогда
					
					Если Выборка.Знаменатель <> 0 Тогда
						СтрокаУдержаний.Результат = СтрокаУдержаний.Результат + БазаУдержаний * Выборка.Числитель / Выборка.Знаменатель;
					КонецЕсли;
					
				КонецЕсли;
				
				Если СтрокаУдержаний.Результат > БазаУдержаний Тогда
					СтрокаУдержаний.Результат = БазаУдержаний;
				КонецЕсли; 
				
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события формы документа НачислениеЗарплаты.
//
// Параметры:
//		Форма - УправляемаяФорма
//
Процедура ПриСозданииФормыДокументаНачислениеЗарплаты(Форма) Экспорт
	
	Если Форма.Параметры.Ключ.Пустая() Тогда
		ПриПолученииДанных(Форма);
	КонецЕсли; 
	
	Если НЕ ПолучитьФункциональнуюОпцию("РасчетЗарплатыДляНебольшихОрганизаций")
		ИЛИ НЕ РасчетЗарплатыДляНебольшихОрганизацийВозможен() Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ГлавноеСтраница",
			"Видимость",
			Ложь
		);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"УдержанияКонтрагент",
			"Видимость",
			Ложь
		);
		
	КонецЕсли;
	
КонецПроцедуры

// При чтении данных документа НачислениеЗарплаты в форму, дозаполняет
// вторичные данные ТЧ Сотрудники.
//
// Параметры:
//		Форма - УправляемаяФорма
//
Процедура ПриПолученииДанных(Форма) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("РасчетЗарплатыДляНебольшихОрганизаций")
		ИЛИ НЕ РасчетЗарплатыДляНебольшихОрганизацийВозможен() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТНачисленияПоОтсутствиям(Запрос.МенеджерВременныхТаблиц, Истина, Форма.Объект.МесяцНачисления, Форма.Объект.Организация, Форма.Объект.Подразделение);
	
	Запрос.УстановитьПараметр("Ссылка", Форма.Объект.Ссылка);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НачислениеЗарплатыНачисления.Сотрудник,
		|	НачислениеЗарплатыНачисления.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МАКСИМУМ(НачислениеЗарплатыНачисления.ОтработаноДней) КАК ОтработаноДней,
		|	МАКСИМУМ(НачислениеЗарплатыНачисления.ОтработаноЧасов) КАК ОтработаноЧасов,
		|	СУММА(НачислениеЗарплатыНачисления.Результат) КАК Начислено
		|ПОМЕСТИТЬ ВТНачисленияДокумента
		|ИЗ
		|	Документ.НачислениеЗарплаты.Начисления КАК НачислениеЗарплатыНачисления
		|ГДЕ
		|	НачислениеЗарплатыНачисления.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	НачислениеЗарплатыНачисления.Сотрудник,
		|	НачислениеЗарплатыНачисления.Сотрудник.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачислениеЗарплатыУдержания.Сотрудник КАК ФизическоеЛицо,
		|	СУММА(НачислениеЗарплатыУдержания.Результат) КАК Удержано
		|ПОМЕСТИТЬ ВТУдержанияДокумента
		|ИЗ
		|	Документ.НачислениеЗарплаты.Удержания КАК НачислениеЗарплатыУдержания
		|ГДЕ
		|	НачислениеЗарплатыУдержания.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	НачислениеЗарплатыУдержания.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачислениеЗарплатыНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СУММА(НачислениеЗарплатыНДФЛ.Налог) КАК НДФЛ
		|ПОМЕСТИТЬ ВТНДФЛДокумента
		|ИЗ
		|	Документ.НачислениеЗарплаты.НДФЛ КАК НачислениеЗарплатыНДФЛ
		|ГДЕ
		|	НачислениеЗарплатыНДФЛ.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	НачислениеЗарплатыНДФЛ.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачислениеЗарплатыВзносы.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СУММА(НачислениеЗарплатыВзносы.ФФОМС) КАК ФФОМС,
		|	СУММА(НачислениеЗарплатыВзносы.ФФОМСЕНВД) КАК ФФОМСЕНВД,
		|	СУММА(НачислениеЗарплатыВзносы.ТФОМС) КАК ТФОМС,
		|	СУММА(НачислениеЗарплатыВзносы.ТФОМСЕНВД) КАК ТФОМСЕНВД,
		|	СУММА(НачислениеЗарплатыВзносы.ФСС) КАК ФСС,
		|	СУММА(НачислениеЗарплатыВзносы.ФССЕНВД) КАК ФССЕНВД,
		|	СУММА(НачислениеЗарплатыВзносы.ФССНесчастныеСлучаи) КАК ФССНесчастныеСлучаи,
		|	СУММА(НачислениеЗарплатыВзносы.ПФРНакопительная) КАК ПФРНакопительная,
		|	СУММА(НачислениеЗарплатыВзносы.ПФРНакопительнаяЕНВД) КАК ПФРНакопительнаяЕНВД,
		|	СУММА(НачислениеЗарплатыВзносы.ПФРСтраховая) КАК ПФРСтраховая,
		|	СУММА(НачислениеЗарплатыВзносы.ПФРСтраховаяЕНВД) КАК ПФРСтраховаяЕНВД,
		|	СУММА(НачислениеЗарплатыВзносы.ПФРПоСуммарномуТарифу) КАК ПФРПоСуммарномуТарифу,
		|	СУММА(НачислениеЗарплатыВзносы.ПФРПоСуммарномуТарифуЕНВД) КАК ПФРПоСуммарномуТарифуЕНВД,
		|	СУММА(НачислениеЗарплатыВзносы.ПФРНаДоплатуЛетчикам) КАК ПФРНаДоплатуЛетчикам,
		|	СУММА(НачислениеЗарплатыВзносы.ПФРНаДоплатуШахтерам) КАК ПФРНаДоплатуШахтерам,
		|	СУММА(НачислениеЗарплатыВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах) КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботах,
		|	СУММА(НачислениеЗарплатыВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах) КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах,
		|	СУММА(НачислениеЗарплатыВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахОпасный) КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботахОпасный,
		|	СУММА(НачислениеЗарплатыВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный1) КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный1,
		|	СУММА(НачислениеЗарплатыВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный2) КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный2,
		|	СУММА(НачислениеЗарплатыВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный3) КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный3,
		|	СУММА(НачислениеЗарплатыВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный4) КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный4,
		|	СУММА(НачислениеЗарплатыВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахОпасный) КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахОпасный,
		|	СУММА(НачислениеЗарплатыВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный1) КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный1,
		|	СУММА(НачислениеЗарплатыВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный2) КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный2,
		|	СУММА(НачислениеЗарплатыВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный3) КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный3,
		|	СУММА(НачислениеЗарплатыВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный4) КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный4
		|ПОМЕСТИТЬ ВТВзносыДокумента
		|ИЗ
		|	Документ.НачислениеЗарплаты.Взносы КАК НачислениеЗарплатыВзносы
		|ГДЕ
		|	НачислениеЗарплатыВзносы.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	НачислениеЗарплатыВзносы.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачислениеЗарплатыСотрудники.Сотрудник,
		|	НачислениеЗарплатыСотрудники.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	Документ.НачислениеЗарплаты.Сотрудники КАК НачислениеЗарплатыСотрудники
		|ГДЕ
		|	НачислениеЗарплатыСотрудники.Ссылка = &Ссылка";
		
	Запрос.Выполнить();
	
	ТаблицаСотрудники = ТаблицаСотрудники(Запрос.МенеджерВременныхТаблиц);
	
	Для каждого СтрокаТЧСотрудники Из Форма.Объект.Сотрудники Цикл
		
		СтрокиТаблицы = ТаблицаСотрудники.НайтиСтроки(Новый Структура("Сотрудник", СтрокаТЧСотрудники.Сотрудник));
		Если СтрокиТаблицы.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТЧСотрудники, СтрокиТаблицы[0],
				"ФизическоеЛицо,ОтработаноДней,ОтработаноЧасов,Начислено,ОтпускаБольничные,ВсегоНачислено,"
					+ "НДФЛ,ПрочееУдержано,ВсегоУдержано,Взносы");
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает таблицу значений, содержащую сумму начислений по больничным листам
// и отпускам сотрудников.
//
// Параметры:
//		СписокСотрудников	- Массив, элементу - СправочникСсылка.Сотрудники.
//		МесяцНачисления		- Дата, первое число месяца за который получаются данные.
//		Организация			- СправочникСсылка.Организации
//		Подразделение		- СправочникСсылка.ПодразделенияОрганизаций
//								если подразделение не указывать, сведения будут собираться без
//								учета подразделения.
//
// Возвращаемое значение:
//		ТаблицаЗначений - содержит колонки.
//			* Сотрудник			- СправочникСсылка.Сотрудники
//			* ФизическоеЛицо	- СправочникСсылка.ФизическиеЛица
//			* Сумма				- Число
//
Функция СведенияНачисленийПоОтсутствиям(СписокСотрудников, МесяцНачисления, Организация, Подразделение) Экспорт
	
	РезультатЗапроса = СоздатьВТНачисленияПоОтсутствиям(
		Новый МенеджерВременныхТаблиц,
		Истина,
		МесяцНачисления,
		Организация,
		Подразделение,
		СписокСотрудников,
		"");
		
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

// Формирует табличную часть Сотрудники, документа НачислениеЗарплаты.
//
// Параметры:
//		Объект  - ДокументОбъект.НачислениеЗарплаты
//
Процедура СформироватьТабличнуюЧастьСотрудники(Объект) Экспорт
	
	Объект.Сотрудники.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТНачисленияПоОтсутствиям(Запрос.МенеджерВременныхТаблиц, Истина, Объект.МесяцНачисления, Объект.Организация, Объект.Подразделение);
	
	Запрос.УстановитьПараметр("Начисления", Объект.Начисления.Выгрузить());
	Запрос.УстановитьПараметр("Удержания", Объект.Удержания.Выгрузить());
	Запрос.УстановитьПараметр("НДФЛ", Объект.НДФЛ.Выгрузить());
	Запрос.УстановитьПараметр("Взносы", Объект.Взносы.Выгрузить());
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НачислениеЗарплатыНачисления.Сотрудник,
		|	НачислениеЗарплатыНачисления.ОтработаноДней КАК ОтработаноДней,
		|	НачислениеЗарплатыНачисления.ОтработаноЧасов КАК ОтработаноЧасов,
		|	НачислениеЗарплатыНачисления.Результат КАК Результат
		|ПОМЕСТИТЬ ВТНачисленияДокументаПредварительно
		|ИЗ
		|	&Начисления КАК НачислениеЗарплатыНачисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачислениеЗарплатыНачисления.Сотрудник,
		|	ВЫРАЗИТЬ(НачислениеЗарплатыНачисления.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо КАК ФизическоеЛицо,
		|	МАКСИМУМ(НачислениеЗарплатыНачисления.ОтработаноДней) КАК ОтработаноДней,
		|	МАКСИМУМ(НачислениеЗарплатыНачисления.ОтработаноЧасов) КАК ОтработаноЧасов,
		|	СУММА(НачислениеЗарплатыНачисления.Результат) КАК Начислено
		|ПОМЕСТИТЬ ВТНачисленияДокумента
		|ИЗ
		|	ВТНачисленияДокументаПредварительно КАК НачислениеЗарплатыНачисления
		|
		|СГРУППИРОВАТЬ ПО
		|	НачислениеЗарплатыНачисления.Сотрудник,
		|	ВЫРАЗИТЬ(НачислениеЗарплатыНачисления.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачислениеЗарплатыУдержания.Сотрудник КАК Сотрудник,
		|	НачислениеЗарплатыУдержания.Результат КАК Результат
		|ПОМЕСТИТЬ ВТУдержанияДокументаПредварительно
		|ИЗ
		|	&Удержания КАК НачислениеЗарплатыУдержания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачислениеЗарплатыУдержания.Сотрудник КАК ФизическоеЛицо,
		|	СУММА(НачислениеЗарплатыУдержания.Результат) КАК Удержано
		|ПОМЕСТИТЬ ВТУдержанияДокумента
		|ИЗ
		|	ВТУдержанияДокументаПредварительно КАК НачислениеЗарплатыУдержания
		|
		|СГРУППИРОВАТЬ ПО
		|	НачислениеЗарплатыУдержания.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачислениеЗарплатыНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НачислениеЗарплатыНДФЛ.Налог КАК Налог
		|ПОМЕСТИТЬ ВТНДФЛДокументаПредварительно
		|ИЗ
		|	&НДФЛ КАК НачислениеЗарплатыНДФЛ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачислениеЗарплатыНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СУММА(НачислениеЗарплатыНДФЛ.Налог) КАК НДФЛ
		|ПОМЕСТИТЬ ВТНДФЛДокумента
		|ИЗ
		|	ВТНДФЛДокументаПредварительно КАК НачислениеЗарплатыНДФЛ
		|
		|СГРУППИРОВАТЬ ПО
		|	НачислениеЗарплатыНДФЛ.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачислениеЗарплатыВзносы.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НачислениеЗарплатыВзносы.ФФОМС КАК ФФОМС,
		|	НачислениеЗарплатыВзносы.ФФОМСЕНВД КАК ФФОМСЕНВД,
		|	НачислениеЗарплатыВзносы.ТФОМС КАК ТФОМС,
		|	НачислениеЗарплатыВзносы.ТФОМСЕНВД КАК ТФОМСЕНВД,
		|	НачислениеЗарплатыВзносы.ФСС КАК ФСС,
		|	НачислениеЗарплатыВзносы.ФССЕНВД КАК ФССЕНВД,
		|	НачислениеЗарплатыВзносы.ФССНесчастныеСлучаи КАК ФССНесчастныеСлучаи,
		|	НачислениеЗарплатыВзносы.ПФРНакопительная КАК ПФРНакопительная,
		|	НачислениеЗарплатыВзносы.ПФРНакопительнаяЕНВД КАК ПФРНакопительнаяЕНВД,
		|	НачислениеЗарплатыВзносы.ПФРСтраховая КАК ПФРСтраховая,
		|	НачислениеЗарплатыВзносы.ПФРСтраховаяЕНВД КАК ПФРСтраховаяЕНВД,
		|	НачислениеЗарплатыВзносы.ПФРПоСуммарномуТарифу КАК ПФРПоСуммарномуТарифу,
		|	НачислениеЗарплатыВзносы.ПФРПоСуммарномуТарифуЕНВД КАК ПФРПоСуммарномуТарифуЕНВД,
		|	НачислениеЗарплатыВзносы.ПФРНаДоплатуЛетчикам КАК ПФРНаДоплатуЛетчикам,
		|	НачислениеЗарплатыВзносы.ПФРНаДоплатуШахтерам КАК ПФРНаДоплатуШахтерам,
		|	НачислениеЗарплатыВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботах,
		|	НачислениеЗарплатыВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах,
		|	НачислениеЗарплатыВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахОпасный КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботахОпасный,
		|	НачислениеЗарплатыВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный1 КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный1,
		|	НачислениеЗарплатыВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный2 КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный2,
		|	НачислениеЗарплатыВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный3 КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный3,
		|	НачислениеЗарплатыВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный4 КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный4,
		|	НачислениеЗарплатыВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахОпасный КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахОпасный,
		|	НачислениеЗарплатыВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный1 КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный1,
		|	НачислениеЗарплатыВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный2 КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный2,
		|	НачислениеЗарплатыВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный3 КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный3,
		|	НачислениеЗарплатыВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный4 КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный4
		|ПОМЕСТИТЬ ВТВзносыДокументаПредварительно
		|ИЗ
		|	&Взносы КАК НачислениеЗарплатыВзносы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачислениеЗарплатыВзносы.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СУММА(НачислениеЗарплатыВзносы.ФФОМС) КАК ФФОМС,
		|	СУММА(НачислениеЗарплатыВзносы.ФФОМСЕНВД) КАК ФФОМСЕНВД,
		|	СУММА(НачислениеЗарплатыВзносы.ТФОМС) КАК ТФОМС,
		|	СУММА(НачислениеЗарплатыВзносы.ТФОМСЕНВД) КАК ТФОМСЕНВД,
		|	СУММА(НачислениеЗарплатыВзносы.ФСС) КАК ФСС,
		|	СУММА(НачислениеЗарплатыВзносы.ФССЕНВД) КАК ФССЕНВД,
		|	СУММА(НачислениеЗарплатыВзносы.ФССНесчастныеСлучаи) КАК ФССНесчастныеСлучаи,
		|	СУММА(НачислениеЗарплатыВзносы.ПФРНакопительная) КАК ПФРНакопительная,
		|	СУММА(НачислениеЗарплатыВзносы.ПФРНакопительнаяЕНВД) КАК ПФРНакопительнаяЕНВД,
		|	СУММА(НачислениеЗарплатыВзносы.ПФРСтраховая) КАК ПФРСтраховая,
		|	СУММА(НачислениеЗарплатыВзносы.ПФРСтраховаяЕНВД) КАК ПФРСтраховаяЕНВД,
		|	СУММА(НачислениеЗарплатыВзносы.ПФРПоСуммарномуТарифу) КАК ПФРПоСуммарномуТарифу,
		|	СУММА(НачислениеЗарплатыВзносы.ПФРПоСуммарномуТарифуЕНВД) КАК ПФРПоСуммарномуТарифуЕНВД,
		|	СУММА(НачислениеЗарплатыВзносы.ПФРНаДоплатуЛетчикам) КАК ПФРНаДоплатуЛетчикам,
		|	СУММА(НачислениеЗарплатыВзносы.ПФРНаДоплатуШахтерам) КАК ПФРНаДоплатуШахтерам,
		|	СУММА(НачислениеЗарплатыВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах) КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботах,
		|	СУММА(НачислениеЗарплатыВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах) КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах,
		|	СУММА(НачислениеЗарплатыВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахОпасный) КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботахОпасный,
		|	СУММА(НачислениеЗарплатыВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный1) КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный1,
		|	СУММА(НачислениеЗарплатыВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный2) КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный2,
		|	СУММА(НачислениеЗарплатыВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный3) КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный3,
		|	СУММА(НачислениеЗарплатыВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный4) КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный4,
		|	СУММА(НачислениеЗарплатыВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахОпасный) КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахОпасный,
		|	СУММА(НачислениеЗарплатыВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный1) КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный1,
		|	СУММА(НачислениеЗарплатыВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный2) КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный2,
		|	СУММА(НачислениеЗарплатыВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный3) КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный3,
		|	СУММА(НачислениеЗарплатыВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный4) КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный4
		|ПОМЕСТИТЬ ВТВзносыДокумента
		|ИЗ
		|	ВТВзносыДокументаПредварительно КАК НачислениеЗарплатыВзносы
		|
		|СГРУППИРОВАТЬ ПО
		|	НачислениеЗарплатыВзносы.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачисленияДокумента.Сотрудник,
		|	НачисленияДокумента.ФизическоеЛицо
		|ПОМЕСТИТЬ ВТСотрудникиПредварительно
		|ИЗ
		|	ВТНачисленияДокумента КАК НачисленияДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УдержанияДокумента.ФизическоеЛицо
		|ИЗ
		|	ВТУдержанияДокумента КАК УдержанияДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиПредварительно КАК СотрудникиПредварительно
		|		ПО УдержанияДокумента.ФизическоеЛицо = СотрудникиПредварительно.ФизическоеЛицо
		|ГДЕ
		|	СотрудникиПредварительно.ФизическоеЛицо ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НДФЛДокумента.ФизическоеЛицо
		|ИЗ
		|	ВТНДФЛДокумента КАК НДФЛДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиПредварительно КАК СотрудникиПредварительно
		|		ПО НДФЛДокумента.ФизическоеЛицо = СотрудникиПредварительно.ФизическоеЛицо
		|ГДЕ
		|	СотрудникиПредварительно.ФизическоеЛицо ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВзносыДокумента.ФизическоеЛицо
		|ИЗ
		|	ВТВзносыДокумента КАК ВзносыДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиПредварительно КАК СотрудникиПредварительно
		|		ПО ВзносыДокумента.ФизическоеЛицо = СотрудникиПредварительно.ФизическоеЛицо
		|ГДЕ
		|	СотрудникиПредварительно.ФизическоеЛицо ЕСТЬ NULL ";
		
	ФизическиеЛицаБезСотрудников = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВТСотрудникиПредварительно.Сотрудник,
		|	ВТСотрудникиПредварительно.ФизическоеЛицо
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	ВТСотрудникиПредварительно КАК ВТСотрудникиПредварительно";
	
	Если ФизическиеЛицаБезСотрудников.Количество() > 0 Тогда
		
		КадровыйУчет.СоздатьВТОсновныеСотрудникиФизическихЛиц(
			Запрос.МенеджерВременныхТаблиц,
			Истина,
			ФизическиеЛицаБезСотрудников,
			Объект.Организация,
			Объект.МесяцНачисления,
			КонецМесяца(Объект.МесяцНачисления));
		
		Запрос.Текст = Запрос.Текст + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ОсновныеСотрудникиФизическихЛиц.Сотрудник,
			|	ОсновныеСотрудникиФизическихЛиц.ФизическоеЛицо
			|ИЗ
			|	ВТОсновныеСотрудникиФизическихЛиц КАК ОсновныеСотрудникиФизическихЛиц";
		
	КонецЕсли; 
	
	Запрос.Выполнить();
		
	Объект.Сотрудники.Загрузить(ТаблицаСотрудники(Запрос.МенеджерВременныхТаблиц));
	
КонецПроцедуры

// Возвращает годы, за которые рассчитывается средний заработок для пособий ФСС.
//
// Параметры:
//		ДатаСобытия - Дата
//
// Возвращаемое значение:
//		Массив
//
Функция РасчетныеГодыСреднегоФСС(ДатаСобытия) Экспорт
	
	РасчетныеГоды = Новый Массив;
	
	Если ЗначениеЗаполнено(ДатаСобытия) Тогда
		
		ГодОкончания = Год(НачалоГода(ДатаСобытия) - 1);
		ГодНачала = ГодОкончания - 1;
		
		РасчетныеГоды.Добавить(ГодНачала);
		РасчетныеГоды.Добавить(ГодОкончания);
		
	КонецЕсли; 
	
	Возврат РасчетныеГоды;
	
КонецФункции

// Возвращает данные о заработке для расчета среднего заработка пособий ФСС.
//
// Параметры:
//		Сотрудник			- СправочникСсылка.Сотрудники
//		Организация			- СправочникСсылка.Организации
//		ДатаНачалаСобытия	- Дата
//		РасчетныеГоды		- Массив, года за которые рассчитывается заработок.
// Возвращаемое значение%
//		Соответствие
//
Функция ДанныеОЗаработкеДляРасчетаСреднегоФСС(Сотрудник, Организация, ДатаНачалаСобытия, РасчетныеГоды) Экспорт
	
	ДанныеОЗаработке = Новый Соответствие;
	
	ПараметрыЗаполнения = УчетПособийСоциальногоСтрахования.ПараметрыЗаполненияСправкиОЗаработкеИДняхОтсутствия(Неопределено);
	ПараметрыЗаполнения.Сотрудник = Сотрудник;
	ПараметрыЗаполнения.Организация = Организация;
	ПараметрыЗаполнения.РасчетныеГоды = РасчетныеГоды;
	ПараметрыЗаполнения.ГодНачала = ПараметрыЗаполнения.РасчетныеГоды[0];
	ПараметрыЗаполнения.ГодОкончания = ПараметрыЗаполнения.РасчетныеГоды[1];
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ФизическоеЛицо", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "ФизическоеЛицо"));
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(ПараметрыЗаполнения.Организация));
	Запрос.УстановитьПараметр("ОграничиватьРазмерЗаработка", ПараметрыЗаполнения.ОграничиватьРазмерЗаработка);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	&ФизическоеЛицо КАК ФизическоеЛицо,
		|	&ГоловнаяОрганизация КАК ГоловнаяОрганизация
		|ПОМЕСТИТЬ ВТФизЛицаОрганизаций";
		
	Запрос.Выполнить();
	
	УчетСтраховыхВзносов.СформироватьВТРасширенныеСведенияОДоходахИВзносах(Дата(ПараметрыЗаполнения.ГодНачала, 1, 1), КонецГода(Дата(ПараметрыЗаполнения.ГодОкончания, 1, 1)), ПараметрыЗаполнения.Организация, Запрос.МенеджерВременныхТаблиц, Истина, , , , Истина);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ГОД(СведенияОДоходах.Период) КАК Год,
		|	МЕСЯЦ(СведенияОДоходах.Период) КАК Месяц,
		|	СУММА(СведенияОДоходах.БазаФСС) КАК Заработок
		|ИЗ
		|	ВТРасширенныеСведенияОДоходах КАК СведенияОДоходах
		|
		|СГРУППИРОВАТЬ ПО
		|	ГОД(СведенияОДоходах.Период),
		|	МЕСЯЦ(СведенияОДоходах.Период)
		|
		|ИМЕЮЩИЕ
		|	СУММА(СведенияОДоходах.БазаФСС) <> 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Год";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Год") Цикл
		
		СведенияГода = ДанныеОЗаработке.Получить(Выборка.Год);
		Если СведенияГода = Неопределено Тогда
			СведенияГода = Новый Соответствие;
		КонецЕсли; 
		
		Пока Выборка.Следующий() Цикл
			СведенияМесяца = Новый Структура("Сумма,ДнейБолезниУходаЗаДетьми", Выборка.Заработок, 0);
			СведенияГода.Вставить(Выборка.Месяц, СведенияМесяца);
		КонецЦикла;
		
		ДанныеОЗаработке.Вставить(Выборка.Год, СведенияГода);
		
	КонецЦикла;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	БольничныйЛист.ДатаНачала,
		|	БольничныйЛист.ДатаОкончания
		|ИЗ
		|	Документ.БольничныйЛист КАК БольничныйЛист
		|ГДЕ
		|	БольничныйЛист.Проведен
		|	И БольничныйЛист.Сотрудник = &Сотрудник
		|	И БольничныйЛист.ДатаНачала <= &ОкончаниеВторогоГода
		|	И БольничныйЛист.ДатаОкончания >= &НачалоПервогоГода";
		
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("НачалоПервогоГода", НачалоГода(Дата(ПараметрыЗаполнения.ГодНачала, 1, 1)));
	Запрос.УстановитьПараметр("ОкончаниеВторогоГода", КонецГода(Дата(ПараметрыЗаполнения.ГодОкончания, 1, 1)));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ДатаНачала = Выборка.ДатаНачала;
			ДатаОкончания = Выборка.ДатаОкончания;
			
			Если ДатаНачала < Дата(ПараметрыЗаполнения.ГодНачала, 1, 1) Тогда
				ДатаНачала = Дата(ПараметрыЗаполнения.ГодНачала, 1, 1);
			КонецЕсли;
			
			Пока ДатаНачала <= ДатаОкончания Цикл
				
				Год = Год(ДатаНачала);
				Если Год = ПараметрыЗаполнения.ГодНачала
					Или Год = ПараметрыЗаполнения.ГодОкончания Тогда
					
					Месяц = Месяц(ДатаНачала);
					ДатаОкончанияВМесяце = Мин(НачалоДня(КонецМесяца(ДатаНачала)), ДатаОкончания);
					
					СведенияГода = ДанныеОЗаработке.Получить(Год);
					Если СведенияГода = Неопределено Тогда
						СведенияГода = Новый Соответствие;
					КонецЕсли; 
					
					СведенияМесяца = СведенияГода.Получить(Месяц);
					Если СведенияМесяца = Неопределено Тогда
						СведенияМесяца = Новый Структура("Сумма,ДнейБолезниУходаЗаДетьми", 0, 0);
					КонецЕсли; 
					
					ДнейБолезниУходаЗаДетьми = (КонецДня(ДатаОкончанияВМесяце) - ДатаНачала + 1) / УчетПособийСоциальногоСтрахованияКлиентСервер.ДлинаСуток();
					СведенияМесяца.ДнейБолезниУходаЗаДетьми = СведенияМесяца.ДнейБолезниУходаЗаДетьми + ДнейБолезниУходаЗаДетьми;
					
					СведенияГода.Вставить(Месяц, СведенияМесяца);
					ДанныеОЗаработке.Вставить(Год, СведенияГода);
					
				КонецЕсли; 
				
				ДатаНачала = КонецМесяца(ДатаНачала) + 1;
				
			КонецЦикла;
			
		КонецЦикла; 
		
	КонецЕсли;
	
	Возврат ДанныеОЗаработке;
	
КонецФункции

// Возвращает среднедневной заработок для расчета пособий ФСС.
//
// Параметры:
//		ДанныеОЗаработке			- Соответствие
//		ДатаНачалаСобытия			- Дата
//		ПричинаНетрудоспособности	- ПеречислениеСсылка.ПричиныНетрудоспособности
//		РайонныйКоэффициентРФ		- Число
//		РасчетныеГоды				- Массив
//
// Возвращаемое значение:
//		Структура
//
Функция СреднийДневнойЗаработокФСС(ДанныеОЗаработке, ДнейБолезниУходаЗаДетьми, ДатаНачалаСобытия, ПричинаНетрудоспособности, РайонныйКоэффициентРФ, РасчетныеГоды, ПособиеЗаНеполныйРасчетныйПериод) Экспорт
	
	ПредельныеВеличиныСтраховыхВзносов = УчетПособийСоциальногоСтрахования.ПредельнаяВеличинаБазыСтраховыхВзносов(РасчетныеГоды);
	
	СреднийЗаработок = 0;
	Для каждого СведенияОЗаработке Из ДанныеОЗаработке Цикл
		
		Если ПричинаНетрудоспособности = ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.ТравмаНаПроизводстве") 
			Или ПричинаНетрудоспособности = ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.Профзаболевание") 
			Или ПособиеЗаНеполныйРасчетныйПериод Тогда
			ПредельнаяВеличина = Неопределено;
		Иначе 
			ПредельнаяВеличина = ПредельныеВеличиныСтраховыхВзносов.Получить(СведенияОЗаработке.Год);
		КонецЕсли;
		
		Если ПредельнаяВеличина <> Неопределено И СведенияОЗаработке.Сумма > ПредельнаяВеличина Тогда
			СреднийЗаработок = СреднийЗаработок + ПредельнаяВеличина;
		Иначе
			СреднийЗаработок = СреднийЗаработок + СведенияОЗаработке.Сумма;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПособиеЗаНеполныйРасчетныйПериод Тогда
		КалендарныеДни = КалендарныхДнейЗаНеполныйРасчетныйПериодПоПричинеНетрудоспособностиДляСреднегоФСС(ДатаНачалаСобытия, ПричинаНетрудоспособности, ДнейБолезниУходаЗаДетьми);
	Иначе 	
		КалендарныеДни = КалендарныхДнейПоПричинеНетрудоспособностиДляСреднегоФСС(РасчетныеГоды, ПричинаНетрудоспособности, ДнейБолезниУходаЗаДетьми);	
	КонецЕсли;
	
	СреднедневнойЗаработок = СреднийЗаработок / КалендарныеДни;
	
	Если ПособиеЗаНеполныйРасчетныйПериод Тогда 
		Если Не (ПричинаНетрудоспособности = ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.ТравмаНаПроизводстве") 
			Или ПричинаНетрудоспособности = ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.Профзаболевание")) Тогда
			МаксимальныйСреднедневнойЗаработок = МаксимальныйСреднедневнойЗаработокДляНеполногоРасчетногоПериода(ДатаНачалаСобытия);
			СреднедневнойЗаработок = Мин(МаксимальныйСреднедневнойЗаработок, СреднедневнойЗаработок);			
		КонецЕсли;
	ИначеЕсли ПричинаНетрудоспособности = ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.ПоБеременностиИРодам") Тогда 
		МаксимальныйСреднедневнойЗаработок = МаксимальныйСреднедневнойЗаработокДляОплатыПособияПоМатеринству(ПредельныеВеличиныСтраховыхВзносов);
		СреднедневнойЗаработок = Мин(МаксимальныйСреднедневнойЗаработок, СреднедневнойЗаработок);			
	КонецЕсли;
	
	МинимальныйРазмерОплатыТрудаРФ = ЗарплатаКадры.МинимальныйРазмерОплатыТрудаРФ(ДатаНачалаСобытия);
	МинимальныйСреднедневнойЗаработок = МинимальныйРазмерОплатыТрудаРФ * 24 / 730;
	
	РезультатРасчета = Новый Структура;
	РезультатРасчета.Вставить("СреднийЗаработок", СреднедневнойЗаработок);
	РезультатРасчета.Вставить("МинимальныйСреднедневнойЗаработок", МинимальныйСреднедневнойЗаработок);
	
	Возврат РезультатРасчета;
	
КонецФункции

// Возвращает структуру, содержащую параметры получения среднего заработка для расчета отпусков.
//
//	Возвращаемое значение:
//	Структура
//
Функция ПараметрыПолученияДанныхСреднегоОбщего() Экспорт
	
	ПараметрыПолученияДанныхСреднего = Новый Структура;
	
	ПараметрыПолученияДанныхСреднего.Вставить("ТаблицыПоСотруднику"); 
	ПараметрыПолученияДанныхСреднего.Вставить("ДатаНачалаПериода"); 
	ПараметрыПолученияДанныхСреднего.Вставить("ДатаОкончанияПериода"); 
	ПараметрыПолученияДанныхСреднего.Вставить("ДатаНачалаСобытия", '00010101');
	
	Возврат	ПараметрыПолученияДанныхСреднего;
	
КонецФункции

// Возвращает результат расчета среднего заработка для расчета отпусков.
//
// Параметры:
//		ПараметрыПолученияДанныхСреднего - Структура
//
// Возвращаемое значение:
//		Структура
//
Функция ДанныеРасчетаСреднегоЗаработкаОбщего(ПараметрыПолученияДанныхСреднего) Экспорт
	
	ДанныеОНачислениях 			= ПараметрыПолученияДанныхСреднего.ТаблицыПоСотруднику["ДанныеОНачислениях"]; 
	ДанныеОВремени 				= ПараметрыПолученияДанныхСреднего.ТаблицыПоСотруднику["ДанныеОВремени"]; 
	ДатаНачалаПериода 			= ПараметрыПолученияДанныхСреднего.ДатаНачалаПериода; 
	ДатаОкончанияПериода 		= ПараметрыПолученияДанныхСреднего.ДатаОкончанияПериода; 
	ДатаНачалаСобытия 			= ПараметрыПолученияДанныхСреднего.ДатаНачалаСобытия;
	
	Заработок = Новый ТаблицаЗначений;
	Заработок.Колонки.Добавить("Месяц", 						Новый ОписаниеТипов("Дата"));
	Заработок.Колонки.Добавить("Сумма", 						Новый ОписаниеТипов("Число"));
	Заработок.Колонки.Добавить("Учтено", 						Новый ОписаниеТипов("Число"));
	
	ОтработанноеВремя = Новый ТаблицаЗначений;
	ОтработанноеВремя.Колонки.Добавить("Месяц", 							Новый ОписаниеТипов("Дата"));
	ОтработанноеВремя.Колонки.Добавить("КалендарныхДней", 					Новый ОписаниеТипов("Число"));
	ОтработанноеВремя.Колонки.Добавить("Учтено", 							Новый ОписаниеТипов("Число"));
	
	ДанныеОВремениПоПериодам = Новый Соответствие;
	
	Для Каждого СтрокаВремени Из ДанныеОВремени Цикл
		
		// Используем данные только за рассчитываемый период.
		Если СтрокаВремени.Период < ДатаНачалаПериода Или СтрокаВремени.Период > ДатаОкончанияПериода Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаОтработанноеВремя = СтрокаКоллекцииПоПериоду(ОтработанноеВремя, СтрокаВремени.Период);
		
		СтрокаОтработанноеВремя.КалендарныхДней = СтрокаВремени.ОтработаноДнейКалендарных;
		
		// Если отработано календарных дней меньше, 
		// чем всего в месяце уменьшаем среднемесячное количество дней пропорционально.
		ДнейПериода = КоличествоУчтенныхДнейОтпуска(ДатаНачалаСобытия, СтрокаВремени.Период, СтрокаВремени.ОтработаноДнейКалендарных);
		СтрокаОтработанноеВремя.Учтено = ДнейПериода;
		
	КонецЦикла;	
	
	КоличествоМесяцевПериодаРасчета = КоличествоМесяцевПериодаРасчетаСреднего(ДатаНачалаПериода, ДатаОкончанияПериода);
	
	ОтражатьДолюВремени = Ложь;
	
	Для Каждого СтрокаНачислений Из ДанныеОНачислениях Цикл
		
		// Используем данные только за рассчитываемый период.
		Если СтрокаНачислений.Период < ДатаНачалаПериода 
			Или СтрокаНачислений.Период > ДатаОкончанияПериода Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаЗаработка 		= СтрокаКоллекцииПоПериоду(Заработок, СтрокаНачислений.Период);
		СтрокаЗаработка.Сумма 	= СтрокаЗаработка.Сумма + СтрокаНачислений.Сумма;
		СтрокаЗаработка.Учтено 	= Окр(СтрокаЗаработка.Сумма, 2);
		
	КонецЦикла;	
	
	Заработок.Сортировать("Месяц");
	ОтработанноеВремя.Сортировать("Месяц");
	
	Итоги = Новый Структура;
	Итоги.Вставить("ВсегоЗаработка",				Заработок.Итог("Учтено"));
	Итоги.Вставить("ВсегоКалендарныхДней", 			ОтработанноеВремя.Итог("КалендарныхДней"));
	Итоги.Вставить("ВсегоДнейЧасов", 				ОтработанноеВремя.Итог("Учтено"));
	
	ВсегоЗаработок = ?(Итоги.ВсегоДнейЧасов = 0, 0, Итоги.ВсегоЗаработка / Итоги.ВсегоДнейЧасов);
	Итоги.Вставить("СреднедневнойЗаработок", 		Окр(ВсегоЗаработок, 2));
	
	Возврат Новый Структура("Итоги,Заработок,ОтработанноеВремя", Итоги, Заработок, ОтработанноеВремя);
	
КонецФункции

// Возвращает количество учетных дней отпуска.
//
// Параметры:
//		ДатаСобытия					- Дата
//		Месяц						- Дата
//		ОтработаноДнейКалендарных	- Число
//
// Возвращаемое значение:
//		Число
//
Функция КоличествоУчтенныхДнейОтпуска(ДатаСобытия, Месяц, ОтработаноДнейКалендарных) Экспорт
	
	Возврат Окр(КоличествоДнейВМесяцеДляОплатыОтпусков(ДатаСобытия) * (ОтработаноДнейКалендарных / ЗарплатаКадрыКлиентСервер.КоличествоДнейМесяца(Месяц)), 2);
	
КонецФункции

// Возвращает среднее количество дней в месяце для оплаты отпусков.
//
// Параметры:
//		ДатаНачалаСобытия - Дата
//
// Возвращаемое значение:
//		Число
//
Функция КоличествоДнейВМесяцеДляОплатыОтпусков(ДатаНачалаСобытия) Экспорт
	
	Возврат ?(Не ЗначениеЗаполнено(ДатаНачалаСобытия), 29.4, ?(ДатаНачалаСобытия < ДатаИзмененияКоличестваДнейДляОтпускных(), 29.4, 29.3));	

КонецФункции

// Возвращает количество календарных дней в годах за которые рассчитывается средний заработок для пособий ФСС.
//
// Параметры:
//		РасчетныеГоды				- Массив
//		ПричинаНетрудоспособности	- ПеречислениеСсылка.ПричиныНетрудоспособности
//		ДнейБолезниУходаЗаДетьми	- Число
//
// Возвращаемое значение:
//		Число
//
Функция КалендарныхДнейПоПричинеНетрудоспособностиДляСреднегоФСС(РасчетныеГоды, ПричинаНетрудоспособности, ДнейБолезниУходаЗаДетьми) Экспорт
	
	Если ПричинаНетрудоспособности = ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.ПоБеременностиИРодам") Тогда
		
		КалендарныеДни = 0;
		Для каждого РасчетныйГод Из РасчетныеГоды Цикл
			
			КалендарныеДни = КалендарныеДни
				+ (КонецГода(Дата(РасчетныйГод, 1, 1)) - НачалоГода(Дата(РасчетныйГод, 1, 1)) + 1) / УчетПособийСоциальногоСтрахованияКлиентСервер.ДлинаСуток();
				
		КонецЦикла;
			
		КалендарныеДни = КалендарныеДни - ДнейБолезниУходаЗаДетьми;	
		
	Иначе
		КалендарныеДни = 730;
	КонецЕсли;
	
	Возврат КалендарныеДни;
	
КонецФункции

// Возвращает количество календарных дней в годах неполного расчетного периода за которые рассчитывается средний заработок для пособий ФСС.
//
// Параметры:
//		ДатаНачалаСобытия			- Дата
//		ПричинаНетрудоспособности	- ПеречислениеСсылка.ПричиныНетрудоспособности
//		ДнейБолезниУходаЗаДетьми	- Число
//
// Возвращаемое значение:
//		Число
//
Функция КалендарныхДнейЗаНеполныйРасчетныйПериодПоПричинеНетрудоспособностиДляСреднегоФСС(ДатаНачалаСобытия, ПричинаНетрудоспособности, ДнейБолезниУходаЗаДетьми) Экспорт
	УчитываемыхДнейВКалендарныхГодах = 0;
	
	Если ДатаНачалаСобытия < '20160101'  Тогда
		УчитываемыхДнейВКалендарныхГодах = 289;
	Иначе
		УчитываемыхДнейВКалендарныхГодах = 654;
	КонецЕсли;
	
	Если ПричинаНетрудоспособности = ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.ПоБеременностиИРодам") Тогда
		УчитываемыхДнейВКалендарныхГодах = УчитываемыхДнейВКалендарныхГодах - ДнейБолезниУходаЗаДетьми;
	КонецЕсли;
	
	Возврат УчитываемыхДнейВКалендарныхГодах;

КонецФункции

// Возвращает максимальный среднедневной заработок для пособий ФСС неполного расчетного периода.
//
// Параметры:
//		ДатаНачалаСобытия			- Дата
//
// Возвращаемое значение:
//		Число
//
Функция МаксимальныйСреднедневнойЗаработокДляНеполногоРасчетногоПериода(ДатаНачалаСобытия) Экспорт
	
	МаксимальныйСреднедневнойЗаработок = 0;
	Если ДатаНачалаСобытия < '20160101'  Тогда
		МаксимальныйСреднедневнойЗаработок = 1632.88;
	Иначе
		МаксимальныйСреднедневнойЗаработок = (624000 + 670000) / 730;
	КонецЕсли;
	
	Возврат Окр(МаксимальныйСреднедневнойЗаработок, 2);
	
КонецФункции

// Возвращает максимальный среднедневной заработок для пособий ФСС неполного расчетного периода.
//
// Параметры:
//		ПредельныеВеличиныСтраховыхВзносов	- Соответсвие
//
// Возвращаемое значение:
//		Число
//
Функция МаксимальныйСреднедневнойЗаработокДляОплатыПособияПоМатеринству(ПредельныеВеличиныСтраховыхВзносов) Экспорт
	
	ПредельнаяВеличина = 0;
	Для каждого ПредельнаяВеличинаЗаГод Из ПредельныеВеличиныСтраховыхВзносов Цикл
	    
		ПредельнаяВеличина = ПредельнаяВеличина + ПредельнаяВеличинаЗаГод.Значение;
	
	КонецЦикла;
	
	МаксимальныйСреднедневнойЗаработок = ПредельнаяВеличина / 730;
	
	Возврат Окр(МаксимальныйСреднедневнойЗаработок, 2);
	
КонецФункции

// Возвращает данные для расчета среднего заработка, для расчета отпусков.
//
// Параметры:
//		Сотрудник				- СправочникСсылка.Сотрудники
//		Организация				- СправочникСсылка.Организации
//		НачалоПериодаРасчета	- Дата
//		ОкончаниеПериодаРасчета - Дата
//
// Возвращаемое значение:
//		Структура
//
Функция ДанныеДляРасчетаОбщегоСреднегоЗаработкаСотрудника(Сотрудник, Организация, НачалоПериодаРасчета, ОкончаниеПериодаРасчета) Экспорт
	
	ДанныеДляРасчета = Новый Структура("ДанныеОНачислениях,ДанныеОВремени");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("ФизическоеЛицо", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "ФизическоеЛицо"));
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериодаРасчета);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериодаРасчета);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация,
		|	ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо,
		|	МИНИМУМ(НАЧАЛОПЕРИОДА(ВЫБОР
		|				КОГДА ТекущиеКадровыеДанныеСотрудников.ДатаПриема > &НачалоПериода
		|					ТОГДА ТекущиеКадровыеДанныеСотрудников.ДатаПриема
		|				ИНАЧЕ &НачалоПериода
		|			КОНЕЦ, ДЕНЬ)) КАК НачалоПериода,
		|	МАКСИМУМ(КОНЕЦПЕРИОДА(ВЫБОР
		|				КОГДА ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения < &ОкончаниеПериода
		|						И ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1)
		|					ТОГДА ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения
		|				ИНАЧЕ &ОкончаниеПериода
		|			КОНЕЦ, ДЕНЬ)) КАК ОкончаниеПериода
		|ПОМЕСТИТЬ ВТПериодыРаботыФизическихЛиц
		|ИЗ
		|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|ГДЕ
		|	ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация = &ГоловнаяОрганизация
		|	И ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо = &ФизическоеЛицо
		|	И ТекущиеКадровыеДанныеСотрудников.ДатаПриема <= &ОкончаниеПериода
		|	И ТекущиеКадровыеДанныеСотрудников.ДатаПриема <> ДАТАВРЕМЯ(1, 1, 1)
		|	И (ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения >= &НачалоПериода
		|			ИЛИ ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1))
		|
		|СГРУППИРОВАТЬ ПО
		|	ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо,
		|	ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачисленияУдержанияПоСотрудникам.ФизическоеЛицо,
		|	СУММА(НачисленияУдержанияПоСотрудникам.Сумма) КАК Сумма,
		|	НАЧАЛОПЕРИОДА(НачисленияУдержанияПоСотрудникам.Период, МЕСЯЦ) КАК Период,
		|	ВЫБОР
		|		КОГДА НАЧАЛОПЕРИОДА(НачисленияУдержанияПоСотрудникам.Период, МЕСЯЦ) > ПериодыРаботыФизическихЛиц.НачалоПериода
		|			ТОГДА НАЧАЛОПЕРИОДА(НачисленияУдержанияПоСотрудникам.Период, МЕСЯЦ)
		|		ИНАЧЕ ПериодыРаботыФизическихЛиц.НачалоПериода
		|	КОНЕЦ КАК ДатаНачала,
		|	ВЫБОР
		|		КОГДА КОНЕЦПЕРИОДА(НачисленияУдержанияПоСотрудникам.Период, МЕСЯЦ) < ПериодыРаботыФизическихЛиц.ОкончаниеПериода
		|			ТОГДА КОНЕЦПЕРИОДА(НачисленияУдержанияПоСотрудникам.Период, МЕСЯЦ)
		|		ИНАЧЕ ПериодыРаботыФизическихЛиц.ОкончаниеПериода
		|	КОНЕЦ КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТНачисления
		|ИЗ
		|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыРаботыФизическихЛиц КАК ПериодыРаботыФизическихЛиц
		|		ПО НачисленияУдержанияПоСотрудникам.Организация.ГоловнаяОрганизация = ПериодыРаботыФизическихЛиц.ГоловнаяОрганизация
		|			И НачисленияУдержанияПоСотрудникам.ФизическоеЛицо = ПериодыРаботыФизическихЛиц.ФизическоеЛицо
		|			И НачисленияУдержанияПоСотрудникам.Период <= ПериодыРаботыФизическихЛиц.ОкончаниеПериода
		|			И (НачисленияУдержанияПоСотрудникам.Период >= НАЧАЛОПЕРИОДА(ПериодыРаботыФизическихЛиц.НачалоПериода, МЕСЯЦ))
		|			И (НачисленияУдержанияПоСотрудникам.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено))
		|			И (НЕ НачисленияУдержанияПоСотрудникам.НачислениеУдержание.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоПрофзаболевание), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодам)))
		|
		|СГРУППИРОВАТЬ ПО
		|	НачисленияУдержанияПоСотрудникам.ФизическоеЛицо,
		|	НачисленияУдержанияПоСотрудникам.Период,
		|	ВЫБОР
		|		КОГДА НАЧАЛОПЕРИОДА(НачисленияУдержанияПоСотрудникам.Период, МЕСЯЦ) > ПериодыРаботыФизическихЛиц.НачалоПериода
		|			ТОГДА НАЧАЛОПЕРИОДА(НачисленияУдержанияПоСотрудникам.Период, МЕСЯЦ)
		|		ИНАЧЕ ПериодыРаботыФизическихЛиц.НачалоПериода
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА КОНЕЦПЕРИОДА(НачисленияУдержанияПоСотрудникам.Период, МЕСЯЦ) < ПериодыРаботыФизическихЛиц.ОкончаниеПериода
		|			ТОГДА КОНЕЦПЕРИОДА(НачисленияУдержанияПоСотрудникам.Период, МЕСЯЦ)
		|		ИНАЧЕ ПериодыРаботыФизическихЛиц.ОкончаниеПериода
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПериодыРаботыФизическихЛиц.ФизическоеЛицо,
		|	ВЫБОР
		|		КОГДА БольничныйЛист.ДатаНачала > ПериодыРаботыФизическихЛиц.НачалоПериода
		|			ТОГДА БольничныйЛист.ДатаНачала
		|		ИНАЧЕ ПериодыРаботыФизическихЛиц.НачалоПериода
		|	КОНЕЦ КАК ДатаНачала,
		|	ВЫБОР
		|		КОГДА БольничныйЛист.ДатаОкончания < ПериодыРаботыФизическихЛиц.ОкончаниеПериода
		|			ТОГДА БольничныйЛист.ДатаОкончания
		|		ИНАЧЕ ПериодыРаботыФизическихЛиц.ОкончаниеПериода
		|	КОНЕЦ КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТОтсутствияПредварительно
		|ИЗ
		|	Документ.БольничныйЛист КАК БольничныйЛист
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыРаботыФизическихЛиц КАК ПериодыРаботыФизическихЛиц
		|		ПО БольничныйЛист.Организация.ГоловнаяОрганизация = ПериодыРаботыФизическихЛиц.ГоловнаяОрганизация
		|			И БольничныйЛист.ФизическоеЛицо = ПериодыРаботыФизическихЛиц.ФизическоеЛицо
		|			И БольничныйЛист.ДатаНачала <= ПериодыРаботыФизическихЛиц.ОкончаниеПериода
		|			И БольничныйЛист.ДатаОкончания >= ПериодыРаботыФизическихЛиц.НачалоПериода
		|			И (БольничныйЛист.Проведен)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПериодыРаботыФизическихЛиц.ФизическоеЛицо,
		|	ВЫБОР
		|		КОГДА Отпуск.ДатаНачалаОсновногоОтпуска > ПериодыРаботыФизическихЛиц.НачалоПериода
		|			ТОГДА Отпуск.ДатаНачалаОсновногоОтпуска
		|		ИНАЧЕ ПериодыРаботыФизическихЛиц.НачалоПериода
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА Отпуск.ДатаОкончанияОсновногоОтпуска < ПериодыРаботыФизическихЛиц.ОкончаниеПериода
		|			ТОГДА Отпуск.ДатаОкончанияОсновногоОтпуска
		|		ИНАЧЕ ПериодыРаботыФизическихЛиц.ОкончаниеПериода
		|	КОНЕЦ
		|ИЗ
		|	Документ.Отпуск КАК Отпуск
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыРаботыФизическихЛиц КАК ПериодыРаботыФизическихЛиц
		|		ПО Отпуск.Организация.ГоловнаяОрганизация = ПериодыРаботыФизическихЛиц.ГоловнаяОрганизация
		|			И Отпуск.ФизическоеЛицо = ПериодыРаботыФизическихЛиц.ФизическоеЛицо
		|			И Отпуск.ДатаНачалаОсновногоОтпуска <= ПериодыРаботыФизическихЛиц.ОкончаниеПериода
		|			И Отпуск.ДатаОкончанияОсновногоОтпуска >= ПериодыРаботыФизическихЛиц.НачалоПериода
		|			И (Отпуск.Проведен)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(Отсутствия.ДатаНачала, МЕСЯЦ) КАК Период,
		|	Отсутствия.ФизическоеЛицо,
		|	Отсутствия.ДатаНачала,
		|	ВЫБОР
		|		КОГДА Отсутствия.ДатаОкончания > НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(Отсутствия.ДатаНачала, МЕСЯЦ), ДЕНЬ)
		|			ТОГДА НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(Отсутствия.ДатаНачала, МЕСЯЦ), ДЕНЬ)
		|		ИНАЧЕ Отсутствия.ДатаОкончания
		|	КОНЕЦ КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТОтсутствия
		|ИЗ
		|	ВТОтсутствияПредварительно КАК Отсутствия
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ОтсутствияСледующийМесяц.ДатаОкончания, МЕСЯЦ),
		|	ОтсутствияСледующийМесяц.ФизическоеЛицо,
		|	НАЧАЛОПЕРИОДА(ОтсутствияСледующийМесяц.ДатаОкончания, МЕСЯЦ),
		|	ОтсутствияСледующийМесяц.ДатаОкончания
		|ИЗ
		|	ВТОтсутствияПредварительно КАК ОтсутствияСледующийМесяц
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(ОтсутствияСледующийМесяц.ДатаОкончания, ДЕНЬ) > НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(ОтсутствияСледующийМесяц.ДатаНачала, МЕСЯЦ), ДЕНЬ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Отсутствия.Период,
		|	Отсутствия.ФизическоеЛицо,
		|	СУММА(РАЗНОСТЬДАТ(Отсутствия.ДатаНачала, Отсутствия.ДатаОкончания, ДЕНЬ) + 1) КАК НеОтработанныеДни
		|ПОМЕСТИТЬ ВТНеОтработанныеДни
		|ИЗ
		|	ВТОтсутствия КАК Отсутствия
		|
		|СГРУППИРОВАТЬ ПО
		|	Отсутствия.ФизическоеЛицо,
		|	Отсутствия.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Начисления.Период,
		|	ПериодыРаботыФизическихЛиц.ГоловнаяОрганизация,
		|	ПериодыРаботыФизическихЛиц.ФизическоеЛицо,
		|	ЕСТЬNULL(Начисления.Сумма, 0) КАК Сумма,
		|	РАЗНОСТЬДАТ(Начисления.ДатаНачала, Начисления.ДатаОкончания, ДЕНЬ) + 1 КАК КалендарныеРабочиеДни,
		|	ЕСТЬNULL(НеОтработанныеКалендарныеДни.НеОтработанныеДни, 0) КАК НеОтработанныеДни
		|ПОМЕСТИТЬ ВТДанныеДляРасчета
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНеОтработанныеДни КАК НеОтработанныеКалендарныеДни
		|		ПО Начисления.Период = НеОтработанныеКалендарныеДни.Период
		|			И Начисления.ФизическоеЛицо = НеОтработанныеКалендарныеДни.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыРаботыФизическихЛиц КАК ПериодыРаботыФизическихЛиц
		|		ПО Начисления.ФизическоеЛицо = ПериодыРаботыФизическихЛиц.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Начисления.ФизическоеЛицо,
		|	Начисления.Сумма,
		|	Начисления.Период
		|ИЗ
		|	ВТНачисления КАК Начисления";
		
	ДанныеДляРасчета.ДанныеОНачислениях = Запрос.Выполнить().Выгрузить();
	

	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеДляРасчета.Период,
		|	ДанныеДляРасчета.КалендарныеРабочиеДни - ДанныеДляРасчета.НеОтработанныеДни КАК ОтработаноДнейКалендарных
		|ИЗ
		|	ВТДанныеДляРасчета КАК ДанныеДляРасчета";
		
	ДанныеДляРасчета.ДанныеОВремени = Запрос.Выполнить().Выгрузить();
	
	Возврат ДанныеДляРасчета;
			
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьИсключаемыеПунктыМенюВводаНаОснованииСотрудников(ИсключаемыеПунктыМеню) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("РасчетЗарплатыДляНебольшихОрганизаций") Тогда
		ИсключаемыеПунктыМеню.Добавить("Документы.БольничныйЛист");
		ИсключаемыеПунктыМеню.Добавить("Документы.Отпуск");
	КонецЕсли; 
	
КонецПроцедуры

// Возвращает максимально возможное значение разницы между максимально возможным количеством
// сотрудников и фактическим количеством сотрудников, при достижении которого выдаются предупреждения
// об ограничениях применения режима расчета зарплаты для небольших организаций.
//
// Возвращаемое значение:
//		Число
//
Функция ПорогПредупреждения()
	
	Возврат 5;
	
КонецФункции

Функция ТекущееКоличествоСотрудников(Организация = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация КАК Организация,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТекущиеКадровыеДанныеСотрудников.Сотрудник) КАК КоличествоСотрудников
		|ИЗ
		|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|ГДЕ
		|	ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)
		|	И ТекущиеКадровыеДанныеСотрудников.ДатаПриема <> ДАТАВРЕМЯ(1, 1, 1)
		|	И ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
		|	И ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация
		|
		|УПОРЯДОЧИТЬ ПО
		|	КоличествоСотрудников УБЫВ";
		
	Если Организация <> Неопределено Тогда
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "<> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)", "= &Организация");
		Запрос.УстановитьПараметр("Организация", Организация);
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция СоздатьВТНачисленияПоОтсутствиям(МенеджерВременныхТаблиц, ТолькоРазрешенные, МесяцНачисления, Организация, Подразделение = Неопределено, СписокСотрудников = Неопределено,  ИмяВТНачисленияПоОтсутствиям = "ВТНачисленияПоОтсутствиям")
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НачисленияУдержанияПоСотрудникам.Сотрудник,
		|	НачисленияУдержанияПоСотрудникам.ФизическоеЛицо,
		|	СУММА(НачисленияУдержанияПоСотрудникам.Сумма) КАК Сумма
		|ПОМЕСТИТЬ ВТНачисленияПоОтсутствиям
		|ИЗ
		|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
		|ГДЕ
		|	НачисленияУдержанияПоСотрудникам.Период = &МесяцНачисления
		|	И НачисленияУдержанияПоСотрудникам.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
		|	И ВЫРАЗИТЬ(НачисленияУдержанияПоСотрудникам.НачислениеУдержание КАК ПланВидовРасчета.Начисления).КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоПрофзаболевание), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодам))
		|	И НачисленияУдержанияПоСотрудникам.Организация = &Организация
		|	И НачисленияУдержанияПоСотрудникам.Подразделение В ИЕРАРХИИ(&Подразделение)
		|	И НачисленияУдержанияПоСотрудникам.Сотрудник В(&СписокСотрудников)
		|
		|СГРУППИРОВАТЬ ПО
		|	НачисленияУдержанияПоСотрудникам.Сотрудник,
		|	НачисленияУдержанияПоСотрудникам.ФизическоеЛицо";
		
	Запрос.УстановитьПараметр("МесяцНачисления", МесяцНачисления);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Если ЗначениеЗаполнено(Подразделение) Тогда
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НачисленияУдержанияПоСотрудникам.Подразделение В ИЕРАРХИИ(&Подразделение)", "");
	КонецЕсли;
	
	Если СписокСотрудников = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НачисленияУдержанияПоСотрудникам.Сотрудник В(&СписокСотрудников)", "");
	Иначе
		Запрос.УстановитьПараметр("СписокСотрудников", СписокСотрудников);
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТНачисленияПоОтсутствиям", ИмяВТНачисленияПоОтсутствиям);
		
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ТаблицаСотрудники(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.Сотрудник,
		|	ВЫРАЗИТЬ(Сотрудники.Сотрудник КАК Справочник.Сотрудники).Наименование КАК СотрудникНаименование,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НачисленияДокумента.ОтработаноДней,
		|	НачисленияДокумента.ОтработаноЧасов,
		|	НачисленияДокумента.Начислено КАК Начислено,
		|	ОтпускаБольничные.Сумма КАК ОтпускаБольничные,
		|	ЕСТЬNULL(НачисленияДокумента.Начислено, 0) + ЕСТЬNULL(ОтпускаБольничные.Сумма, 0) КАК ВсегоНачислено,
		|	НДФЛДокумента.НДФЛ КАК НДФЛ,
		|	УдержанияДокумента.Удержано КАК ПрочееУдержано,
		|	ЕСТЬNULL(УдержанияДокумента.Удержано, 0) + ЕСТЬNULL(НДФЛДокумента.НДФЛ, 0) КАК ВсегоУдержано,
		|	ВзносыДокумента.ФФОМС + ВзносыДокумента.ФФОМСЕНВД + ВзносыДокумента.ТФОМС + ВзносыДокумента.ТФОМСЕНВД + ВзносыДокумента.ФСС + ВзносыДокумента.ФССЕНВД + ВзносыДокумента.ФССНесчастныеСлучаи + ВзносыДокумента.ПФРНакопительная + ВзносыДокумента.ПФРНакопительнаяЕНВД + ВзносыДокумента.ПФРСтраховая + ВзносыДокумента.ПФРСтраховаяЕНВД + ВзносыДокумента.ПФРПоСуммарномуТарифу + ВзносыДокумента.ПФРПоСуммарномуТарифуЕНВД + ВзносыДокумента.ПФРНаДоплатуЛетчикам + ВзносыДокумента.ПФРНаДоплатуШахтерам + ВзносыДокумента.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах + ВзносыДокумента.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах + ВзносыДокумента.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахОпасный + ВзносыДокумента.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный1 + ВзносыДокумента.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный2 + ВзносыДокумента.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный3 + ВзносыДокумента.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахВредный4 + ВзносыДокумента.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахОпасный + ВзносыДокумента.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный1 + ВзносыДокумента.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный2 + ВзносыДокумента.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный3 + ВзносыДокумента.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахВредный4 КАК Взносы
		|ИЗ
		|	ВТСотрудники КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияДокумента КАК НачисленияДокумента
		|		ПО Сотрудники.Сотрудник = НачисленияДокумента.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУдержанияДокумента КАК УдержанияДокумента
		|		ПО Сотрудники.ФизическоеЛицо = УдержанияДокумента.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНДФЛДокумента КАК НДФЛДокумента
		|		ПО Сотрудники.ФизическоеЛицо = НДФЛДокумента.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВзносыДокумента КАК ВзносыДокумента
		|		ПО Сотрудники.ФизическоеЛицо = ВзносыДокумента.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияПоОтсутствиям КАК ОтпускаБольничные
		|		ПО Сотрудники.Сотрудник = ОтпускаБольничные.Сотрудник
		|
		|УПОРЯДОЧИТЬ ПО
		|	СотрудникНаименование";
		
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции

Функция СтрокаКоллекцииПоПериоду(Коллекция, Месяц)
	
	Отбор = Новый Структура();
	Отбор.Вставить("Месяц", Месяц);
	
	НайденныеСтроки = Коллекция.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() > 0 Тогда
		СтрокаКоллекции = НайденныеСтроки[0];
	Иначе
		СтрокаКоллекции = Коллекция.Добавить();
		СтрокаКоллекции.Месяц = Месяц;
	КонецЕсли;
	
	Возврат  СтрокаКоллекции
	
КонецФункции

// Функция возвращает количество месяцев между двумя датами.
//
Функция КоличествоМесяцевПериодаРасчетаСреднего(ДатаНачалаПериода, ДатаОкончанияПериода)
	
	Возврат (Год(ДатаОкончанияПериода) - Год(ДатаНачалаПериода)) * 12 + Месяц(ДатаОкончанияПериода) - Месяц(ДатаНачалаПериода) + 1;	
	
КонецФункции	

Функция ДатаИзмененияКоличестваДнейДляОтпускных()

	Возврат '20140402'

КонецФункции

#Область БлокФункцийПервоначальногоЗаполненияИОбновленияИБ

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.18.7";
	Обработчик.Процедура = "РасчетЗарплатыДляНебольшихОрганизаций.УстановитьФОРасчетЗарплатыДляНебольшихОрганизаций";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.18.7";
	Обработчик.Процедура = "РасчетЗарплатыДляНебольшихОрганизаций.ЗаполнитьТабличнуюЧастьСотрудникиДокументовНачислениеЗарплаты";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.18.12";
	Обработчик.Процедура = "РасчетЗарплатыДляНебольшихОрганизаций.ЗаполнитьНачисленоУдержаноНачисленийЗарплаты";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.19.23";
	Обработчик.Процедура = "РасчетЗарплатыДляНебольшихОрганизаций.ЗаполнитьГодыРасчетаСреднегоФСС";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.19.23";
	Обработчик.Процедура = "РасчетЗарплатыДляНебольшихОрганизаций.ЗаполнитьГодыРасчетаСреднегоФСС";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.112";
	Обработчик.Процедура = "УчетСтажаПФРБазовый.ЗаполнитьПервоначальныеДанныеУчета";
	
КонецПроцедуры

Процедура УстановитьФОРасчетЗарплатыДляНебольшихОрганизаций() Экспорт
	
	Константы.РасчетЗарплатыДляНебольшихОрганизаций.Установить(
		Константы.ИспользоватьНачислениеЗарплаты.Получить() И РасчетЗарплатыДляНебольшихОрганизацийВозможен());
	
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьСотрудникиДокументовНачислениеЗарплаты() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачислениеЗарплаты.Ссылка
		|ПОМЕСТИТЬ ВТНеобработанныеДокументы
		|ИЗ
		|	Документ.НачислениеЗарплаты КАК НачислениеЗарплаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.НачислениеЗарплаты.Сотрудники КАК НачислениеЗарплатыСотрудники
		|		ПО (НачислениеЗарплатыСотрудники.Ссылка = НачислениеЗарплаты.Ссылка)
		|ГДЕ
		|	НачислениеЗарплатыСотрудники.Ссылка ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НеобработанныеДокументы.Ссылка
		|ИЗ
		|	ВТНеобработанныеДокументы КАК НеобработанныеДокументы";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			СформироватьТабличнуюЧастьСотрудники(ДокументОбъект);
			
			ДокументОбъект.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.Записать();
			
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьНачисленоУдержаноНачисленийЗарплаты() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НачислениеЗарплатыНачисления.Ссылка,
		|	НачислениеЗарплатыНачисления.Ссылка.Начислено,
		|	СУММА(НачислениеЗарплатыНачисления.Результат) КАК Результат
		|ПОМЕСТИТЬ ВТНачисления
		|ИЗ
		|	Документ.НачислениеЗарплаты.Начисления КАК НачислениеЗарплатыНачисления
		|
		|СГРУППИРОВАТЬ ПО
		|	НачислениеЗарплатыНачисления.Ссылка,
		|	НачислениеЗарплатыНачисления.Ссылка.Начислено
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачислениеЗарплатыУдержания.Ссылка,
		|	НачислениеЗарплатыУдержания.Ссылка.Удержано КАК Удержано,
		|	СУММА(НачислениеЗарплатыУдержания.Результат) КАК Результат
		|ПОМЕСТИТЬ ВТУдержанияСНДФЛ
		|ИЗ
		|	Документ.НачислениеЗарплаты.Удержания КАК НачислениеЗарплатыУдержания
		|
		|СГРУППИРОВАТЬ ПО
		|	НачислениеЗарплатыУдержания.Ссылка,
		|	НачислениеЗарплатыУдержания.Ссылка.Удержано
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НачислениеЗарплатыНДФЛ.Ссылка,
		|	НачислениеЗарплатыНДФЛ.Ссылка.Удержано,
		|	СУММА(НачислениеЗарплатыНДФЛ.Налог)
		|ИЗ
		|	Документ.НачислениеЗарплаты.НДФЛ КАК НачислениеЗарплатыНДФЛ
		|
		|СГРУППИРОВАТЬ ПО
		|	НачислениеЗарплатыНДФЛ.Ссылка,
		|	НачислениеЗарплатыНДФЛ.Ссылка.Удержано
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УдержанияСНДФЛ.Ссылка,
		|	УдержанияСНДФЛ.Удержано,
		|	СУММА(УдержанияСНДФЛ.Результат) КАК Результат
		|ПОМЕСТИТЬ ВТУдержания
		|ИЗ
		|	ВТУдержанияСНДФЛ КАК УдержанияСНДФЛ
		|
		|СГРУППИРОВАТЬ ПО
		|	УдержанияСНДФЛ.Ссылка,
		|	УдержанияСНДФЛ.Удержано
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Начисления.Ссылка,
		|	Начисления.Начислено,
		|	Начисления.Результат
		|ИЗ
		|	ВТНачисления КАК Начисления
		|ГДЕ
		|	Начисления.Начислено <> Начисления.Результат
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Удержания.Ссылка,
		|	Удержания.Удержано,
		|	Удержания.Результат
		|ИЗ
		|	ВТУдержания КАК Удержания
		|ГДЕ
		|	Удержания.Удержано <> Удержания.Результат";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			ДокументОбъект.ЗаполнитьНачисленоУдержано();
			
			ДокументОбъект.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.Записать();
			
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьГодыРасчетаСреднегоФСС() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	БольничныйЛист.Ссылка
		|ИЗ
		|	Документ.БольничныйЛист КАК БольничныйЛист
		|ГДЕ
		|	(БольничныйЛист.ПериодРасчетаСреднегоЗаработкаПервыйГод = 0
		|			ИЛИ БольничныйЛист.ПериодРасчетаСреднегоЗаработкаВторойГод = 0)";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			ДокументОбъект.ПериодРасчетаСреднегоЗаработкаПервыйГод = Год(ДокументОбъект.ДатаНачалаСобытия) - 2;
			ДокументОбъект.ПериодРасчетаСреднегоЗаработкаВторойГод = ДокументОбъект.ПериодРасчетаСреднегоЗаработкаПервыйГод + 1;
			
			ДокументОбъект.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
