////////////////////////////////////////////////////////////////////////////////
// ЭлектронныеДокументыПереопределяемый: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Заполняет массив актуальными видами электронных документов для прикладного решения.
//
// Параметры:
//  Массив - виды актуальных ЭД.
//
Процедура ПолучитьАктуальныеВидыЭД(Массив) Экспорт
	
	Массив.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
	Массив.Добавить(Перечисления.ВидыЭД.ТОРГ12Покупатель);
	Массив.Добавить(Перечисления.ВидыЭД.АктИсполнитель);
	Массив.Добавить(Перечисления.ВидыЭД.АктЗаказчик);
	Массив.Добавить(Перечисления.ВидыЭД.АктНаПередачуПрав);
	Массив.Добавить(Перечисления.ВидыЭД.СчетФактура);
	Массив.Добавить(Перечисления.ВидыЭД.КорректировочныйСчетФактура);
	Массив.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель);
	Массив.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель);
	Массив.Добавить(Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара);
	Массив.Добавить(Перечисления.ВидыЭД.ПлатежноеПоручение);
	Массив.Добавить(Перечисления.ВидыЭД.ЗапросВыписки);
	Массив.Добавить(Перечисления.ВидыЭД.ВыпискаБанка);
	
	Массив.Добавить(Перечисления.ВидыЭД.СчетНаОплату);
	
КонецПроцедуры

// Определяет параметры электронного документа по типу владельца.
//
// Параметры:
//  Источник - объекта либо ссылка документа/справочника-источника.
//  ПараметрыЭД - структура параметров источника, необходимых для определения
//                настроек обмена ЭД. Обязательные параметры: НаправлениеЭД, ВидЭД,
//                Контрагент, СоглашениеЭД или Организация.
//  ФорматCML - булево, если истина, то для формирования ЭД будут использоваться схемы CML (не ФНС),
//    в параметрах должны быть указаны соответствующие виды ЭД.
//
Процедура ЗаполнитьПараметрыЭДПоИсточнику(Источник, ПараметрыЭД, ФорматCML = Ложь) Экспорт
	
	ТипИсточника = ТипЗнч(Источник);
	
	Если ТипИсточника = Тип("ДокументСсылка.СчетНаОплатуПокупателю")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.СчетНаОплатуПокупателю") Тогда
		
		ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату;
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент = Источник.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента = Источник.ДоговорКонтрагента;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетНаОплатуПоставщика")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.СчетНаОплатуПоставщика") Тогда
		
		ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату;
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент = Источник.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента = Источник.ДоговорКонтрагента;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		
		Если ФорматCML Тогда
			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12;
		ИначеЕсли ТипИсточника = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			ПараметрыЭД.ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ВидЭлектронногоДокумента");
		Иначе
			ПараметрыЭД.ВидЭД = Источник.ВидЭлектронногоДокумента;
		КонецЕсли;
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент = Источник.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента = Источник.ДоговорКонтрагента;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
		
		Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик Тогда
			
			ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		Иначе
			ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
		КонецЕсли;
		
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент = Источник.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента = Источник.ДоговорКонтрагента;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетФактураВыданный")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.СчетФактураВыданный") Тогда
		
		Если ЭтоКорректировочныйДокумент(Источник) Тогда
			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
		Иначе
			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура;
		КонецЕсли;
		
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент = Источник.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента = Источник.ДоговорКонтрагента;		
		
		ДокументОснование = Источник.ДокументОснование;
		Если ЗначениеЗаполнено(ДокументОснование) И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
			
			РеквизитыОснования = Новый Структура("Контрагент");
			Если ДокументОснование.Метаданные().Реквизиты.Найти("Договор") <> Неопределено Тогда
				РеквизитыОснования.Вставить("Договор"); 
			КонецЕсли;
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, РеквизитыОснования);
			ПараметрыЭД.Контрагент = ЗначенияРеквизитов.Контрагент;
			Если ЗначенияРеквизитов.Свойство("Договор") Тогда
				ПараметрыЭД.ДоговорКонтрагента = ЗначенияРеквизитов.Договор;
			КонецЕсли;
			
		КонецЕсли;	
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетФактураПолученный")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.СчетФактураПолученный") Тогда
		
		Если ЭтоКорректировочныйДокумент(Источник) Тогда
			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
		Иначе
			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура;
		КонецЕсли;
		
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент = Источник.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента = Источник.ДоговорКонтрагента;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.КорректировкаРеализации")
		 ИЛИ ТипИсточника = Тип("ДокументОбъект.КорректировкаРеализации") Тогда
		
		ИсходныйИсправляемыйДокумент = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументРеализации(Источник.ДокументРеализации, Истина);
		ИсправляемыйДокумент = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументРеализации(Источник.ДокументРеализации);
		
		Если Источник.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение
			 ИЛИ (ТипЗнч(ИсправляемыйДокумент) = Тип("ДокументСсылка.КорректировкаРеализации") 
			     И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсправляемыйДокумент, "ВидОперации") = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение) Тогда
			 
			// Выполняется согласованное изменение или исправление согласованного изменения
			ПараметрыЭД.ВидЭД         = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель;
			ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
			
		ИначеЕсли ТипЗнч(ИсходныйИсправляемыйДокумент) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			
			Если СуществуютТовары(ИсходныйИсправляемыйДокумент) Тогда
				ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец;
			Иначе
				ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель;
			КонецЕсли;
			
			ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
			
		КонецЕсли;
		
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент = Источник.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента = Источник.ДоговорКонтрагента;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.КорректировкаПоступления") 
		 ИЛИ ТипИсточника = Тип("ДокументОбъект.КорректировкаПоступления") Тогда
		 
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент = Источник.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента = Источник.ДоговорКонтрагента;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ПлатежноеПоручение")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ПлатежноеПоручение") Тогда
		
		ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение;
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.Организация = Источник.Организация;
		СчетОрганизации = Источник.СчетОрганизации;
		Если ЗначениеЗаполнено(СчетОрганизации) Тогда
			ПараметрыЭД.Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетОрганизации, "Банк");
		КонецЕсли;
		ПараметрыЭД.ДоговорКонтрагента = Источник.ДоговорКонтрагента;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ОтчетКомитентуОПродажах") Тогда
		
		ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара;
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		Если ТипИсточника = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
			
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент, ДоговорКонтрагента");
			ПараметрыЭД.Организация = ЗначенияРеквизитов.Организация;
			ПараметрыЭД.Контрагент = ЗначенияРеквизитов.Контрагент;
			ПараметрыЭД.ДоговорКонтрагента = ЗначенияРеквизитов.ДоговорКонтрагента;
			
		Иначе
			
			ПараметрыЭД.Организация = Источник.Организация;
			ПараметрыЭД.Контрагент = Источник.Контрагент;
			ПараметрыЭД.ДоговорКонтрагента = Источник.ДоговорКонтрагента;
			
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ОтчетКомиссионераОПродажах") Тогда
		
		ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара;
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
		Если ТипИсточника = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
			
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент, ДоговорКонтрагента");
			ПараметрыЭД.Организация = ЗначенияРеквизитов.Организация;
			ПараметрыЭД.Контрагент = ЗначенияРеквизитов.Контрагент;
			ПараметрыЭД.ДоговорКонтрагента = ЗначенияРеквизитов.ДоговорКонтрагента;
			
		Иначе
			
			ПараметрыЭД.Организация = Источник.Организация;
			ПараметрыЭД.Контрагент = Источник.Контрагент;
			ПараметрыЭД.ДоговорКонтрагента = Источник.ДоговорКонтрагента;
			
		КонецЕсли;  	
						
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Определение соответствий объектов библиотеки ЭД и прикладного решения

// Определяет имя реквизита владельца справочника НоменклатураПоставщика.
//
// Параметры:
//  ИмяРеквизитаВладельца - строка - имя реквизита владельца.
//
Процедура ОпределитьИмяРеквизитаВладельцаНоменклатурыПоставщиков(ИмяРеквизитаВладельца) Экспорт
	
	ИмяРеквизитаВладельца = "Контрагент";
	
КонецПроцедуры

// Определяет соответствие справочников библиотеки и прикладного решения,
// в случае различий в наименовании справочников.
//
// Параметры:
//  СоответствиеСправочников - Соответствие - список справочников.
//
Процедура ПолучитьСоответствиеСправочников(СоответствиеСправочников) Экспорт
	
	СоответствиеСправочников.Вставить("Организации", "Организации");
	СоответствиеСправочников.Вставить("Контрагенты", "Контрагенты");
	СоответствиеСправочников.Вставить("Партнеры",    "");
	СоответствиеСправочников.Вставить("ДоговорыКонтрагентов", "ДоговорыКонтрагентов");
	СоответствиеСправочников.Вставить("Номенклатура", "Номенклатура");
	СоответствиеСправочников.Вставить("ЕдиницыИзмерения", "КлассификаторЕдиницИзмерения");
	СоответствиеСправочников.Вставить("УпаковкиНоменклатуры", "КлассификаторЕдиницИзмерения");
	СоответствиеСправочников.Вставить("НоменклатураПоставщиков", "НоменклатураПоставщиков");
	СоответствиеСправочников.Вставить("Валюты", "Валюты");
	СоответствиеСправочников.Вставить("Банки", "Банки");
	СоответствиеСправочников.Вставить("БанковскийСчет", "БанковскиеСчета");
	СоответствиеСправочников.Вставить("БанковскиеСчетаОрганизаций", "БанковскиеСчета");
	СоответствиеСправочников.Вставить("БанковскиеСчетаКонтрагентов", "БанковскиеСчета");
	
КонецПроцедуры

// Получает значение перечисления по имени объектов метаданных.
// 
// Параметры:
//  СоответствиеПеречислений - соответствие библиотечных и прикладных перечислений.
//
Процедура ПолучитьСоответствиеПеречислений(СоответствиеПеречислений) Экспорт
	
	СоответствиеПеречислений.Вставить("НДС", "СтавкиНДС");
	СоответствиеПеречислений.Вставить("ЮрФизЛицо", "ЮридическоеФизическоеЛицо");

КонецПроцедуры

// В функции описана структура сопоставления имен переменных библиотеки,
// наименованиям объектов и реквизитов метаданных прикладного решения.
// 
// Параметры:
//  Ключ соответствия - имя переменной, используемой в коде библиотеки;
//  Значение соответствия - наименование объекта метаданных или реквизита объекта
//  в прикладном решении.
//
Процедура ПолучитьСоответствиеНаименованийОбъектовМДиРеквизитов(СоответствиеРеквизитовОбъекта) Экспорт
	
	СоответствиеРеквизитовОбъекта.Вставить("СчетФактураВыданныйВМетаданных",       "СчетФактураВыданный");
	СоответствиеРеквизитовОбъекта.Вставить("СчетФактураПолученныйВМетаданных",     "СчетФактураПолученный");
	СоответствиеРеквизитовОбъекта.Вставить("ДатаВыставленияВСчетеФактуреВыданном", "ДатаВыставления");
	СоответствиеРеквизитовОбъекта.Вставить("ДатаПолученияВСчетеФактуреПолученном", "Дата");
	
	СоответствиеРеквизитовОбъекта.Вставить("ПлатежноеПоручениеВМетаданных",        "ПлатежноеПоручение");
	СоответствиеРеквизитовОбъекта.Вставить("НомерСчета",                           "НомерСчета");
	
	СоответствиеРеквизитовОбъекта.Вставить("ИННКонтрагента",                       "ИНН");
	СоответствиеРеквизитовОбъекта.Вставить("КППКонтрагента",                       "КПП");
	СоответствиеРеквизитовОбъекта.Вставить("НаименованиеКонтрагента",              "НаименованиеПолное");
	СоответствиеРеквизитовОбъекта.Вставить("НаименованиеКонтрагентаДляСообщенияПользователю", "Наименование");
	СоответствиеРеквизитовОбъекта.Вставить("ВнешнийКодКонтрагента",                "Код");
	СоответствиеРеквизитовОбъекта.Вставить("ПартнерКонтрагента",                   Неопределено);
	
	СоответствиеРеквизитовОбъекта.Вставить("ИННОрганизации",                       "ИНН");
	СоответствиеРеквизитовОбъекта.Вставить("КППОрганизации",                       "КПП");
	СоответствиеРеквизитовОбъекта.Вставить("НаименованиеОрганизации",              "НаименованиеПолное");
	СоответствиеРеквизитовОбъекта.Вставить("СокращенноеНаименованиеОрганизации",   "НаименованиеСокращенное");
	СоответствиеРеквизитовОбъекта.Вставить("ОГРНОрганизации",   "ОГРН");
	
КонецПроцедуры

// Определяет соответствие функциональных опций библиотеки и прикладного решения,
// в случае различий в наименовании.
//
// Параметры:
//  СоответствиеФО - Соответствие - список функциональных опций.
//
Процедура ПолучитьСоответствиеФункциональныхОпций(СоответствиеФО) Экспорт
	
	// Электронные документы
	СоответствиеФО.Вставить("ИспользоватьОбменЭД",                    "ИспользоватьОбменЭД");
	СоответствиеФО.Вставить("ИспользоватьЭлектронныеПодписи", 		  "ИспользоватьЭлектронныеПодписи");
	СоответствиеФО.Вставить("ИспользоватьОбменЭДМеждуОрганизациями",  "ИспользоватьОбменЭДМеждуОрганизациями");
	СоответствиеФО.Вставить("ИспользоватьОбменЭДСБанками",            "ИспользоватьОбменЭДСБанками");
	// Конец электронные документы
	
КонецПроцедуры

// В процедуре указывается соответствие строковых представлений ставок НДС (используемые в БЭД)
// с прикладными значениями этих ставок.
//
// Параметры:
//   Соответствие - Соответствие - заполняемое соответствие ставок НДС.
//
// Пример:
//   Соответствие.Вставить("0",       Перечисления.СтавкиНДС.НДС0);
//   Соответствие.Вставить("10",      Перечисления.СтавкиНДС.НДС10);
//   Соответствие.Вставить("18",      Перечисления.СтавкиНДС.НДС18);
//   Соответствие.Вставить("10/110",  Перечисления.СтавкиНДС.НДС10_110);
//   Соответствие.Вставить("18/118",  Перечисления.СтавкиНДС.НДС18_118);
//   Соответствие.Вставить("без НДС", Перечисления.СтавкиНДС.БезНДС);
//
Процедура ЗаполнитьСоответствиеСтавокНДС(Соответствие) Экспорт
	
	Соответствие.Вставить("0",       Перечисления.СтавкиНДС.НДС0);
	Соответствие.Вставить("10",      Перечисления.СтавкиНДС.НДС10);
	Соответствие.Вставить("18",      Перечисления.СтавкиНДС.НДС18);
	Соответствие.Вставить("20",      Перечисления.СтавкиНДС.НДС20);
	Соответствие.Вставить("10/110",  Перечисления.СтавкиНДС.НДС10_110);
	Соответствие.Вставить("18/118",  Перечисления.СтавкиНДС.НДС18_118);
	Соответствие.Вставить("20/120",  Перечисления.СтавкиНДС.НДС20_120);
	Соответствие.Вставить("без НДС", Перечисления.СтавкиНДС.БезНДС);
	
КонецПроцедуры

// Устаревшая процедура, вместо этой процедуры следует использовать ЗаполнитьСоответствиеСтавокНДС.
// Необходимо заполнить соответствие ставок и сумм НДС
//
Процедура ПолучитьСоответствиеСтавокНДС(СоответствиеСтавокНДС) Экспорт
	
	СоответствиеСтавокНДС.Вставить(Перечисления.СтавкиНДС.НДС10,     0);
	СоответствиеСтавокНДС.Вставить(Перечисления.СтавкиНДС.НДС10_110, 0);
	СоответствиеСтавокНДС.Вставить(Перечисления.СтавкиНДС.НДС18,     0);
	СоответствиеСтавокНДС.Вставить(Перечисления.СтавкиНДС.НДС18_118, 0);
	СоответствиеСтавокНДС.Вставить(Перечисления.СтавкиНДС.НДС0,      0);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Настройка обмена

// Определяет, является ли объект корректировочным документом
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка._ДемоСчетФактураВыданный
//
// Возвращаемое значение:
//  Булево
//
Функция ЭтоКорректировочныйДокумент(СсылкаНаОбъект) Экспорт
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		Возврат СсылкаНаОбъект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		Возврат СсылкаНаОбъект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Процедура возвращает признак использования справочника Партнеров в качестве
// дополнительной аналитики к справочнику Контрагенты.
//
// Параметры:
//  ИспользуетсяСправочникПартнеры - Булево - флаг использования в библиотеке справочника Партеры.
//
Процедура ДополнительнаяАналитикаКонтрагентовСправочникПартнеры(ИспользуетсяСправочникПартнеры) Экспорт
	
	ИспользуетсяСправочникПартнеры = Ложь;
	
КонецПроцедуры

// Процедура возвращает признак использования справочника "Характеристики номенклатуры" в качестве
// дополнительной аналитики к справочнику Номенклатура.
//
// Параметры:
//  ИспользуетсяСправочникХарактеристикиНоменклатуры - Булево - флаг использования в библиотеке справочника "Характеристики номенклатуры".
//
Процедура ДополнительнаяАналитикаСправочникХарактеристикиНоменклатуры(ИспользуетсяСправочникХарактеристикиНоменклатуры) Экспорт
	
	ИспользуетсяСправочникХарактеристикиНоменклатуры = Ложь;
	
КонецПроцедуры

// Устаревшая процедура, будет удалена при переходе на новую редакцию БЭД.
// Получает текст запроса по настройкам обмена.
//
// Возвращаемое значение:
//  ТекстЗапроса - текст запроса.
//
Функция ПолучитьТекстНастроекОбменаПоСоглашению() Экспорт
	
	ТекстЗапроса = "";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Устаревшая процедура, будет удалена при переходе на новую редакцию БЭД.
// Получает текст запроса по настройкам обмена с приоритетами.
//
// Возвращаемое значение:
//  ТекстЗапроса - текст запроса.
//
Функция ПолучитьТекстЗапросаНастроекОбменаСПриоритетами() Экспорт
	
	ТекстЗапроса = "";
	
	Возврат ТекстЗапроса;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Определение ключевых реквизитов объектов для регистрации изменений

// Получает ключевые реквизиты объекта по текстовому представлению.
//
// Параметры:
//  ИмяОбъекта - Строка, текстовое представление объекта, ключевые реквизиты которого необходимо получить.
//
// Возвращаемое значение:
//  СтруктураКлючевыхРеквизитов - перечень параметров объекта.
//
Процедура ПолучитьСтруктуруКлючевыхРеквизитовОбъекта(ИмяОбъекта, СтруктураКлючевыхРеквизитов) Экспорт
	
	Если ИмяОбъекта = "Документ.РеализацияТоваровУслуг" Тогда
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Контрагент, ВалютаДокумента, ПометкаУдаления, ВидЭлектронногоДокумента");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		
		СтрокаРеквизитовОбъекта = ("Количество, Номенклатура, Цена, Сумма");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		СтрокаРеквизитовОбъекта = ("Цена, Сумма");
		СтруктураКлючевыхРеквизитов.Вставить("Услуги", СтрокаРеквизитовОбъекта);
		СтруктураКлючевыхРеквизитов.Вставить("АгентскиеУслуги", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.ПоступлениеТоваровУслуг" Тогда
		СтрокаРеквизитовОбъекта = ("Организация, Контрагент");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		
		СтрокаРеквизитовОбъекта = ("Количество, Номенклатура, Цена, Сумма");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		СтрокаРеквизитовОбъекта = ("Цена, Сумма");
		СтруктураКлючевыхРеквизитов.Вставить("Услуги", СтрокаРеквизитовОбъекта);
	ИначеЕсли ИмяОбъекта = "Документ.СчетФактураВыданный" Тогда
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, КодСпособаВыставления");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
	ИначеЕсли ИмяОбъекта = "Документ.СчетФактураПолученный" Тогда
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, КодСпособаПолучения");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
	ИначеЕсли ИмяОбъекта = "Документ.КорректировкаРеализации" Тогда
		// шапка
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Контрагент, ПометкаУдаления");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		
		// ТЧ
		СтрокаРеквизитовОбъекта = ("Номенклатура, Количество, Цена, Сумма, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		СтрокаРеквизитовОбъекта = ("Номенклатура, Количество, Цена, Сумма, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Услуги", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.КорректировкаПоступления" Тогда
		// шапка
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Контрагент, ПометкаУдаления");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		
		// ТЧ
		СтрокаРеквизитовОбъекта = ("Номенклатура, Количество, Цена, Сумма, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		СтрокаРеквизитовОбъекта = ("Номенклатура, Количество, Цена, Сумма, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Услуги", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.ПлатежноеПоручение" Тогда
		
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, СчетОрганизации, Контрагент, СчетКонтрагента, СуммаДокумента, ПометкаУдаления");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.СчетНаОплатуПокупателю" Тогда
		// шапка
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Контрагент, ПометкаУдаления");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		
		// ТЧ
		СтрокаРеквизитовОбъекта = ("Номенклатура, Количество, Цена, Сумма, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.ОтчетКомитентуОПродажах" Тогда	
		
		// шапка
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, ПометкаУдаления");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		
		// ТЧ
		СтрокаРеквизитовОбъекта = ("Номенклатура");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.ОтчетКомиссионераОПродажах" Тогда	
				
		// шапка
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, ПометкаУдаления");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);		
		
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Формирование данных для электронных документов

// Работа с деревом данных ФНС

// Подготавливает данные для электронного документа типа Торг12 титул продавца.
//
// Параметры:
//  СсылкаНаОбъект - документСсылка - ссылка на объект информационной базы,
//  по которому необходимо создать электронный документ.
//  СтруктураЭД - структура - структура данных для формирования электронного документа.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоТорг12ПродавецФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	МассивОбъектов = Новый Массив();
	МассивОбъектов.Добавить(СсылкаНаОбъект);
	
	ВключатьУслуги = Истина;
	
	Если ТипЗнч(СсылкаНаОбъект)=Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		ВидОперации = Перечисления.ВидыОперацийЭД.Исправление;
		ДанныеДляПечати = Документы.КорректировкаРеализации.ПолучитьТаблицуСведенийТОРГ12(МассивОбъектов, ВключатьУслуги);
	Иначе
		ВидОперации = Перечисления.ВидыОперацийЭД.ПродажаКомиссия;
		ДанныеДляПечати = Документы.РеализацияТоваровУслуг.ПолучитьТаблицуСведенийТОРГ12(МассивОбъектов, ВключатьУслуги);
	КонецЕсли;
	
	Если ДанныеДляПечати.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыШапки = ДанныеДляПечати[0];
	ТабличнаяЧасть = РеквизитыШапки.ТаблицаДокумента;
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерТоварнойНакладной", РеквизитыШапки.НомерДокумента);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаТоварнойНакладной",  РеквизитыШапки.ДатаДокумента);
	
	Если ВидОперации = Перечисления.ВидыОперацийЭД.Исправление Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления",	РеквизитыШапки.НомерИсправления);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления",	РеквизитыШапки.ДатаИсправления);
	КонецЕсли;
	
	// Выводим общие реквизиты шапки
	СведенияОПоставщике       = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Поставщик, РеквизитыШапки.ДатаДляПолученияСведений, РеквизитыШапки.БанковскийСчетПродавца);
	СведенияОГрузоотправителе = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Грузоотправитель, РеквизитыШапки.ДатаДляПолученияСведений);
	СведенияОПокупателе       = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Покупатель, РеквизитыШапки.ДатаДляПолученияСведений);
	СведенияОГрузополучателе  = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Грузополучатель,  РеквизитыШапки.ДатаДляПолученияСведений);
	
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПоставщике, "Поставщик", "Юр");
	Если РеквизитыШапки.Организация <> РеквизитыШапки.Грузоотправитель Тогда
		ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОГрузоотправителе, "Грузоотправитель", "Факт");
	КонецЕсли;
	
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПокупателе,       "Плательщик",      "Юр");
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОГрузополучателе,  "Грузополучатель", "Факт");
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод", РеквизитыШапки.ВалютаКод);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВидОперации", ВидОперации);
	
	
	Если ЗначениеЗаполнено(РеквизитыШапки.ДокументОснование) Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									"ДокументыОснования",
									РеквизитыШапки.ДокументОснование);
	КонецЕсли;
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									"ДокОснованиеДата",
									РеквизитыШапки.ОснованиеДата);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									"ДокОснованиеНомер",
									РеквизитыШапки.ОснованиеНомер);
	
	ТаблицаТоваров = Новый ТаблицаЗначений();
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("НаименованиеНоменклатуры");
	ТаблицаТоваров.Колонки.Добавить("НаименованиеХарактеристики");
	ТаблицаТоваров.Колонки.Добавить("Сорт");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("КодТовара");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод");
	ТаблицаТоваров.Колонки.Добавить("ВидУпаковки");
	ТаблицаТоваров.Колонки.Добавить("КоличествоВОдномМесте");
	ТаблицаТоваров.Колонки.Добавить("КоличествоМест");
	ТаблицаТоваров.Колонки.Добавить("МассаБрутто");
	ТаблицаТоваров.Колонки.Добавить("МассаНетто");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС");
	ТаблицаТоваров.Колонки.Добавить("ДокументОснование");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеПодписанные");
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеНеПодписанные");
	
	Для Каждого ДанныеСтроки Из ТабличнаяЧасть Цикл
		
		Если ДанныеСтроки.СуммаБезНДС + ДанныеСтроки.СуммаНДС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицыДокумента = ТаблицаТоваров.Добавить();
		СтрокаТаблицыДокумента.Номенклатура             = ДанныеСтроки.Товар;
		СтрокаТаблицыДокумента.НаименованиеНоменклатуры = ДанныеСтроки.ТоварНаименование;
		СтрокаТаблицыДокумента.КодТовара                = ДанныеСтроки.ТоварКод;
		СтрокаТаблицыДокумента.ЕдиницаИзмерения         = ДанныеСтроки.ЕдиницаИзмеренияНаименование;
		СтрокаТаблицыДокумента.БазоваяЕдиницаКод        = СокрЛП(ДанныеСтроки.ЕдиницаИзмеренияКод);
		СтрокаТаблицыДокумента.МассаНетто               = ДанныеСтроки.Количество;
		
		СтрокаТаблицыДокумента.СуммаСНДС	= ДанныеСтроки.СуммаСНДС;
		СтрокаТаблицыДокумента.СуммаНДС		= ДанныеСтроки.СуммаНДС;
		СтрокаТаблицыДокумента.СуммаБезНДС	= ДанныеСтроки.СуммаБезНДС;
		СтрокаТаблицыДокумента.СтавкаНДС	= ДанныеСтроки.СтавкаНДС;
		СтрокаТаблицыДокумента.Цена			= ДанныеСтроки.Цена;
		
		Если ЗначениеЗаполнено(ДанныеСтроки.КоличествоМест)
			И ЗначениеЗаполнено(ДанныеСтроки.ВидУпаковки) Тогда
			СтрокаТаблицыДокумента.КоличествоМест        = ДанныеСтроки.КоличествоМест;
			СтрокаТаблицыДокумента.КоличествоВОдномМесте = ДанныеСтроки.КоличествоВОдномМесте;
			СтрокаТаблицыДокумента.ВидУпаковки           = ДанныеСтроки.ВидУпаковкиНаименование;
			СтрокаТаблицыДокумента.Упаковка              = ДанныеСтроки.ВидУпаковки;
		КонецЕсли;
		
		СтруктураДопДанных = Новый Структура;
		СтруктураДопДанных.Вставить("СтавкаНДС", ДанныеСтроки.СтавкаНДС);
		СтрокаТаблицыДокумента.ДопДанныеПодписанные = СтруктураДопДанных;
		
	КонецЦикла;
	
	ПроверитьЗаполнениеТабличнойЧасти(ТаблицаТоваров);
	
	ОбщегоНазначенияЭД.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "ТаблицаТоваров");
	
	ИтоговыеСуммы = РассчитатьИтоговыеСуммыДокумента(ТаблицаТоваров);
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияПоОтпускуГруза.ОтпущеноНаСумму",
			ИтоговыеСуммы.ИтогоСуммаСНДС);
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияПоОтпускуГруза.ДатаОтпуска",
			РеквизитыШапки.ДатаПодписанияДокумента);
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ОбщиеСведенияОТоварнойНакладной.КоличествоПорядковыхНомеровЗаписей",
			ИтоговыеСуммы.КоличествоПорядковыхНомеровЗаписей);
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ОбщиеСведенияОТоварнойНакладной.ВсегоМест",
			ИтоговыеСуммы.ИтогоМест);
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ОбщиеСведенияОТоварнойНакладной.МассаГрузаНетто",
			ИтоговыеСуммы.ИтогоМассаНетто);
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ОбщиеСведенияОТоварнойНакладной.МассаГрузаБрутто",
			ИтоговыеСуммы.ИтогоМассаБрутто);
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоПоНакладной.КоличествоМест",
			ИтоговыеСуммы.ИтогоМест);
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоПоНакладной.МассаБрутто",
			ИтоговыеСуммы.ИтогоМассаБрутто);
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоПоНакладной.МассаНетто",
			ИтоговыеСуммы.ИтогоМассаНетто);
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоПоНакладной.СуммаБезНДС",
			ИтоговыеСуммы.ИтогоСуммаБезНДС);
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоПоНакладной.СуммаНДС",
			ИтоговыеСуммы.ИтогоНДС);
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоПоНакладной.СуммаСНДС",
			ИтоговыеСуммы.ИтогоСуммаСНДС);
			
	ВидДоговораКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыШапки.Договор, "ВидДоговора");
	Если ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
				
		СтрокаДопДанных = ДеревоДанных.Строки.Найти("ДопДанные", "ПолныйПуть", Истина);
		ОбщегоНазначенияЭД.ДобавитьДопДанныеВДерево(СтрокаДопДанных, Новый Структура("ПередачаТовараКомитентом", Истина), Истина);	
		
	КонецЕсли;
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Торг12 титул покупателя.
//
// Параметры:
//  СсылкаНаЭД   - Ссылка на ЭД, по которому необходимо сформировать электронный документ,
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоТорг12ПокупательФНС(СсылкаНаЭД, СтруктураЭД, ДеревоДанных) Экспорт
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаПолученияГруза", ТекущаяДатаСеанса());
	
КонецПроцедуры

// Подготавливает данные титула исполнителя для электронного документа типа Акт выполненных работ
// формата 5.01.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоАкт501ИсполнительФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(СсылкаНаОбъект);
	
	Если ТипЗнч(СсылкаНаОбъект)=Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		ТаблицаСведенийАктаОбОказанииУслуг = Документы.КорректировкаРеализации.ПолучитьТаблицуСведенийАктаОбОказанииУслуг(МассивОбъектов);
		ВидОперации = Перечисления.ВидыОперацийЭД.Исправление;
	Иначе
		ТаблицаСведенийАктаОбОказанииУслуг = Документы.РеализацияТоваровУслуг.ПолучитьТаблицуСведенийАктаОбОказанииУслуг(МассивОбъектов);
		ВидОперации = Перечисления.ВидыОперацийЭД.ПродажаКомиссия;
	КонецЕсли;
	
	Если ТаблицаСведенийАктаОбОказанииУслуг.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыШапки = ТаблицаСведенийАктаОбОказанииУслуг[0];
	ТабличнаяЧасть = РеквизитыШапки.ТаблицаДокумента;
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерАкта",   РеквизитыШапки.НомерДокумента);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаАкта",    РеквизитыШапки.ДатаДокумента);
	
	Если ВидОперации = Перечисления.ВидыОперацийЭД.Исправление Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления",	РеквизитыШапки.НомерИсправления);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления",	РеквизитыШапки.ДатаИсправления);
	КонецЕсли;
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВидОперации", ВидОперации);
	Если ЗначениеЗаполнено(РеквизитыШапки.ВалютаКод) Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод", РеквизитыШапки.ВалютаКод);
	КонецЕсли;
	
	ТекстЗаголовка = "Мы, нижеподписавшиеся, представитель ИСПОЛНИТЕЛЯ, с одной стороны и представитель ЗАКАЗЧИКА с другой"
		+ " стороны, составили настоящий акт в том, что ИСПОЛНИТЕЛЬ выполнил, а ЗАКАЗЧИК принял следующие работы (услуги).";
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Заголовок", ТекстЗаголовка);
	
	// Выводим общие реквизиты шапки
	СведенияОПоставщике       = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Поставщик,  РеквизитыШапки.ДатаДляПолученияСведений);
	СведенияОПокупателе       = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Получатель, РеквизитыШапки.ДатаДляПолученияСведений);
	
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПоставщике, "Исполнитель", "Юр");
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПокупателе, "Заказчик", "Юр");
	
	Если ЗначениеЗаполнено(РеквизитыШапки.ДокументОснование) Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									"ДокументыОснования",
									РеквизитыШапки.ДокументОснование);
	КонецЕсли;
	
	ТаблицаУслуг = Новый ТаблицаЗначений();
	ТаблицаУслуг.Колонки.Добавить("Номенклатура");
	ТаблицаУслуг.Колонки.Добавить("НаименованиеНоменклатуры");
	ТаблицаУслуг.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
	ТаблицаУслуг.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТаблицаУслуг.Колонки.Добавить("Количество");
	ТаблицаУслуг.Колонки.Добавить("Цена");
	ТаблицаУслуг.Колонки.Добавить("СуммаБезНДС");
	ТаблицаУслуг.Колонки.Добавить("СтавкаНДС");
	ТаблицаУслуг.Колонки.Добавить("СуммаНДС");
	ТаблицаУслуг.Колонки.Добавить("СуммаСНДС");
	ТаблицаУслуг.Колонки.Добавить("Описание");
	ТаблицаУслуг.Колонки.Добавить("ДокументОснование");
	ТаблицаУслуг.Колонки.Добавить("ДопДанныеПодписанные");
	ТаблицаУслуг.Колонки.Добавить("ДопДанныеНеПодписанные");
	
	Для Каждого Строка Из ТабличнаяЧасть Цикл
		
		Если НЕ ЗначениеЗаполнено(Строка.Номенклатура) Тогда
			ТекстСообщения = НСтр("ru='В строке %1 табличной части %2 не заполнена номенклатура. Для передачи электронного документа заполнение номенклатуры обязательно.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка.НомерСтроки, Строка.ТабличнаяЧасть);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, СсылкаНаОбъект);
			Продолжить;
		КонецЕсли;
		
		Если Строка.Сумма + Строка.СуммаНДС = 0 Тогда
			Продолжить;
		КонецЕсли;
	
		СтрокаТаблицыДокумента = ТаблицаУслуг.Добавить();
	
		СтрокаТаблицыДокумента.Номенклатура                 = Строка.Номенклатура;
		СтрокаТаблицыДокумента.НаименованиеНоменклатуры     = Строка.НоменклатураНаименование;
		СтрокаТаблицыДокумента.ЕдиницаИзмеренияКод          = ?(ЗначениеЗаполнено(Строка.ЕдиницаИзмерения),СокрЛП(Строка.ЕдиницаИзмеренияКод), "796");
		СтрокаТаблицыДокумента.ЕдиницаИзмеренияНаименование = Строка.ЕдиницаИзмеренияНаименование;
		СтрокаТаблицыДокумента.Количество                   = Строка.Количество;
		СтрокаТаблицыДокумента.Описание                     = Строка.НоменклатураНаименование;
		
		СтрокаТаблицыДокумента.СуммаБезНДС     = Строка.СуммаБезНДС;
		СтрокаТаблицыДокумента.СуммаСНДС       = Строка.СуммаСНДС;
		СтрокаТаблицыДокумента.СтавкаНДС       = Строка.СтавкаНДС;
		СтрокаТаблицыДокумента.СуммаНДС        = Строка.СуммаНДС;
		СтрокаТаблицыДокумента.Цена            = ?(СтрокаТаблицыДокумента.Количество = 0, СтрокаТаблицыДокумента.СуммаБезНДС, Окр(СтрокаТаблицыДокумента.СуммаБезНДС/СтрокаТаблицыДокумента.Количество,2));
		
	КонецЦикла;
	
	ПроверитьЗаполнениеТабличнойЧасти(ТаблицаУслуг);
	
	ОбщегоНазначенияЭД.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаУслуг, "ТаблицаУслуг");
	
	// Не заполняем эти поля, потому что у пользователя нет возможности их изменить
	//ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ОписаниеУслуги.НачалоРабот", РеквизитыШапки.ДатаДокумента);
	//ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ОписаниеУслуги.КонецРабот",  РеквизитыШапки.ДатаДокумента);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ОписаниеУслуги.СуммаБезНДСИтого",
		ТаблицаУслуг.Итог("СуммаБезНДС"));
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ОписаниеУслуги.СуммаНДСИтого",
		ТаблицаУслуг.Итог("СуммаНДС"));
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ОписаниеУслуги.СуммаСНДСИтого",
		ТаблицаУслуг.Итог("СуммаСНДС"));
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияПоВыполнениюУслуг.ДатаИсполнения",
		РеквизитыШапки.ДатаДокумента);
	
КонецПроцедуры

// Подготавливает данные титула заказчика для электронного документа типа Акт выполненных работ
// формата 5.01.
//
// Параметры:
//  СсылкаНаЭД   - Ссылка на ЭД, по которому необходимо сформировать электронный документ,
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоАкт501ЗаказчикФНС(СсылкаНаЭД, СтруктураЭД, ДеревоДанных) Экспорт
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияПоВыполнениюУслуг.ДатаЗаказа",
		ТекущаяДатаСеанса());
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Счет-Фактура.
//
// Параметры:
//  СсылкаНаОбъект - документСсылка - ссылка на объект информационной базы,
//  по которому необходимо создать электронный документ.
//  СтруктураЭД - структура - структура данных для формирования электронного документа.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоСчетуФактуреФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	
	МассивСчетовФактур = Новый Массив();
	МассивСчетовФактур.Добавить(СсылкаНаОбъект);
	ТаблицаСчетовФактур = УчетНДС.ПолучитьДанныеДляПечатиСчетаФактуры1137(
		МассивСчетовФактур, Документы.СчетФактураВыданный.ТекстЗапросаПечатьСчетовФактур());
	Если ТаблицаСчетовФактур = Неопределено
			ИЛИ ТаблицаСчетовФактур.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДляФормированияЭД = ТаблицаСчетовФактур[0];
	ДанныеШапки = ДанныеДляФормированияЭД.ДанныеШапки;
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерСчетаФактуры", ДанныеШапки.Номер);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаСчетаФактуры",  ДанныеШапки.Дата);
	Если ДанныеШапки.Исправление Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления", ДанныеШапки.НомерИсправления);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления",  ДанныеШапки.ДатаИсправления);
	КонецЕсли;
	
	СведенияОПокупателе = ПолучитьДанныеЮрФизЛица(ДанныеШапки.Покупатель, ДанныеШапки.Дата);
	СведенияОПоставщике  = ПолучитьДанныеЮрФизЛица(ДанныеШапки.Поставщик, ДанныеШапки.Дата);
	СведенияОПокупателе.ИНН = ДанныеШапки.ИННпокупателя;
	СведенияОПокупателе.КПП = ДанныеШапки.КППпокупателя;
	
	СведенияОПоставщике.ИНН = ДанныеШапки.ИННпоставщика;
	СведенияОПоставщике.КПП = ДанныеШапки.КППпоставщика;
	
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПоставщике, "Продавец",   "Юр");
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПокупателе, "Покупатель", "Юр");
	
	Если НЕ ЗначениеЗаполнено(ДанныеШапки.Грузоотправитель)ИЛИ (ДанныеШапки.Грузоотправитель = "он же") Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОГрузоотправителе.ОнЖе", Истина);
	Иначе
		ЗаполнитьДанныеГрузоОтправителяПолучателя(ДеревоДанных, ПолучитьДанныеЮрФизЛица(ДанныеШапки.Грузоотправитель, ДанныеШапки.Дата), "СведенияОГрузоотправителе.Грузоотправитель");
	КонецЕсли;
	
	Грузополучатель 	= ?(НЕ ЗначениеЗаполнено(ДанныеШапки.Грузополучатель) ИЛИ (ДанныеШапки.Грузополучатель = "он же"),
				СтруктураЭД.Контрагент, ДанныеШапки.Грузополучатель);
	ЗаполнитьДанныеГрузоОтправителяПолучателя(ДеревоДанных, ПолучитьДанныеЮрФизЛица(Грузополучатель, ДанныеШапки.Дата), "Грузополучатель");
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеШапки.Валюта, "Код"));
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснования", ДанныеДляФормированияЭД.ДокументыОснования);
		
	РеквизитыСчетаФактуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаОбъект, "ВидСчетаФактуры, КодВидаОперации");		
	Если РеквизитыСчетаФактуры.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию  
		 И РеквизитыСчетаФактуры.КодВидаОперации = "04" Тогда
		// Получателем данного счета-фактуры является комиссионер. Поместим данные о получателе в доп. данные.
		СведенияОКомиссионере = ПолучитьДанныеЮрФизЛица(СтруктураЭД.Контрагент);
		ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОКомиссионере, "Комиссионер", "Юр");
	КонецЕсли;
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки");
	ТаблицаТоваров.Колонки.Добавить("НаименованиеНоменклатуры");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТаблицаТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18,3)));
	ТаблицаТоваров.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17,2)));
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДСТип");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17,3)));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17,3)));
	ТаблицаТоваров.Колонки.Добавить("Акциза");
	ТаблицаТоваров.Колонки.Добавить("КодСтраныПроисхождения");
	ТаблицаТоваров.Колонки.Добавить("НомерТаможеннойДекларации");
	ТаблицаТоваров.Колонки.Добавить("ДокументОснование");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеПодписанные");
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеНеПодписанные");
	
	НомерСтроки = 1;
	ТолькоУслуги = Истина;
	
	Для каждого Строка Из ДанныеДляФормированияЭД.ТаблицаДокумента Цикл
		Если Строка.Стоимость + Строка.СуммаНДС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		
		Если ТолькоУслуги
			 И ((ТипЗнч(Строка.Товар) = Тип("СправочникСсылка.Номенклатура") И НЕ Строка.Товар.Услуга)
				 ИЛИ ТипЗнч(Строка.Товар) = Тип("СправочникСсылка.ОсновныеСредства")) Тогда
			ТолькоУслуги = Ложь;
		КонецЕсли;
		
		НоваяСтрока.НомерСтроки              = НомерСтроки;
		НоваяСтрока.НаименованиеНоменклатуры = Строка.ТоварНаименование;
		НоваяСтрока.ЕдиницаИзмеренияКод      = СокрЛП(Строка.ЕдиницаИзмеренияКод);
		НоваяСтрока.Количество               = Строка.Количество;
		НоваяСтрока.Цена         = Строка.Цена;
		НоваяСтрока.СуммаБезНДС  = Строка.Стоимость;
		НоваяСтрока.СтавкаНДС    = Строка.СтавкаНДС;
		НоваяСтрока.СуммаНДС     = Строка.СуммаНДС;
		НоваяСтрока.СуммаСНДС    = Строка.Всего;
		НоваяСтрока.КодСтраныПроисхождения    = ПолучитьКорректныйКодСтраны(Строка.СтранаПроисхожденияКод);
		НоваяСтрока.НомерТаможеннойДекларации = ?(ЗначениеЗаполнено(Строка.НомерГТД), СокрЛП(Строка.НомерГТД), "");
		НоваяСтрока.Акциза      = "без акциза";
		
		НоваяСтрока.Номенклатура   = Строка.Товар;
		НоваяСтрока.Упаковка       = Строка.ЕдиницаИзмерения;
		
		НоваяСтрока.ДопДанныеПодписанные = Новый Структура;
		НоваяСтрока.ДопДанныеПодписанные.Вставить("ЕдиницаИзмеренияНаименование", Строка.ЕдиницаИзмеренияНаименование);
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	ПроверитьЗаполнениеТабличнойЧасти(ТаблицаТоваров);
	
	ПлатежныеДокументы = Новый ТаблицаЗначений();
	ПлатежныеДокументы.Колонки.Добавить("ДатаПРД");
	ПлатежныеДокументы.Колонки.Добавить("НомерПРД");
	
	Если ДанныеШапки.ТаблицаПлатежныхДокументов <> Неопределено Тогда
		Для Каждого ПлатежныйДокумент ИЗ ДанныеШапки.ТаблицаПлатежныхДокументов Цикл
			НовыйПлатежныйДокумент = ПлатежныеДокументы.Добавить();
			НовыйПлатежныйДокумент.ДатаПРД  = ПлатежныйДокумент.ДатаДокумента;
			НовыйПлатежныйДокумент.НомерПРД = ПлатежныйДокумент.НомерДокумента;
		КонецЦикла;
	КонецЕсли;
	
	ОбщегоНазначенияЭД.ЗагрузитьТаблицуВДерево(ДеревоДанных, ПлатежныеДокументы, "ПлатежноРасчетныеДокументы");
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоКОплате.СуммаБезНДСВсего", ТаблицаТоваров.Итог("СуммаБезНДС"));
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоКОплате.СуммаСНДСВсего",  ТаблицаТоваров.Итог("СуммаСНДС"));
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоКОплате.СуммаНДСВсего",   ТаблицаТоваров.Итог("СуммаНДС"));
	
	ОбщегоНазначенияЭД.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "ТаблицаТоваров");
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ТолькоУслуги", ТолькоУслуги);
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Корректировочный Счет-Фактура.
//
// Параметры:
//  СсылкаНаОбъект - документСсылка - ссылка на объект информационной базы,
//  по которому необходимо создать электронный документ.
//  СтруктураЭД - структура - структура данных для формирования электронного документа.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоКорректировочномуСчетуФактуреФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	МассивСчетовФактур = Новый Массив();
	МассивСчетовФактур.Добавить(СсылкаНаОбъект);
	ТаблицаСчетовФактур = УчетНДС.ПолучитьДанныеДляПечатиКорректировочныхСчетовФактур1137(
		МассивСчетовФактур, Документы.СчетФактураВыданный.ТекстЗапросаПечатьКорректировочныхСчетовФактур());
		
	Если ТаблицаСчетовФактур = Неопределено
			ИЛИ ТаблицаСчетовФактур.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДляФормированияЭД = ТаблицаСчетовФактур[0];
	ДанныеШапки = ДанныеДляФормированияЭД.ДанныеШапки;
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерКорСчетаФактуры", ДанныеШапки.Номер);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаКорСчетаФактуры",  ДанныеШапки.Дата);
	
	Если ДанныеШапки.Исправление Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"НомерИсправленияКорСчетаФактуры", ДанныеШапки.НомерИсправленияКорректировочного);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ДатаИсправленияКорСчетаФактуры", ДанныеШапки.ДатаИсправленияКорректировочного);
	КонецЕсли;
	
	КорректируемыеСчетаФактуры = ДанныеШапки.ТаблицаРеквизитовОснований;
	Если КорректируемыеСчетаФактуры.Количество()>0 Тогда
		КорректируемыйСчетФактура = КорректируемыеСчетаФактуры[0];
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерСчетаФактуры", КорректируемыйСчетФактура.НомерСчетаФактуры);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаСчетаФактуры",  КорректируемыйСчетФактура.ДатаСчетаФактуры);
		Если КорректируемыйСчетФактура.УчитыватьИсправлениеИсходногоДокумента Тогда
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления", КорректируемыйСчетФактура.НомерИсправления);
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления", КорректируемыйСчетФактура.ДатаИсправления);
		КонецЕсли;
	КонецЕсли;
	
	СведенияОПокупателе = ПолучитьДанныеЮрФизЛица(ДанныеШапки.Покупатель, ДанныеШапки.Дата);
	СведенияОПоставщике  = ПолучитьДанныеЮрФизЛица(ДанныеШапки.Поставщик, ДанныеШапки.Дата);
	
	СведенияОПокупателе.ИНН = ДанныеШапки.ИННпокупателя;
	СведенияОПокупателе.КПП = ДанныеШапки.КППпокупателя;
	
	СведенияОПоставщике.ИНН = ДанныеШапки.ИННпродавца;
	СведенияОПоставщике.КПП = ДанныеШапки.КППпродавца;
	
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПоставщике, "Продавец",   "Юр");
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПокупателе, "Покупатель", "Юр");
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснования", ДанныеДляФормированияЭД.ДокументыОснования);
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеШапки.Валюта, "Код"));
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки");
	ТаблицаТоваров.Колонки.Добавить("НаименованиеНоменклатуры");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКодДо");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТаблицаТоваров.Колонки.Добавить("КоличествоДо", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18,3)));
	ТаблицаТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18,3)));
	ТаблицаТоваров.Колонки.Добавить("ЦенаДо", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДСДо", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17,2)));
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДСДо");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДСТипДо");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДСТип");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДСДо", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17,3)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17,3)));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСДо", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17,3)));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17,3)));
	ТаблицаТоваров.Колонки.Добавить("АкцизаДо");
	ТаблицаТоваров.Колонки.Добавить("Акциза");
	ТаблицаТоваров.Колонки.Добавить("ДокументОснование");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеПодписанные");
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеНеПодписанные");
	
	ТолькоУслуги = Истина;
	НомерСтроки = 1;
	Для каждого Строка Из ДанныеДляФормированияЭД.ТаблицаДокумента Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		
		Если ТолькоУслуги
			 И ((ТипЗнч(Строка.Товар) = Тип("СправочникСсылка.Номенклатура") И НЕ Строка.Товар.Услуга)
				 ИЛИ ТипЗнч(Строка.Товар) = Тип("СправочникСсылка.ОсновныеСредства")) Тогда
			ТолькоУслуги = Ложь;
		КонецЕсли;
		
		НоваяСтрока.НомерСтроки              = НомерСтроки;
		НоваяСтрока.НаименованиеНоменклатуры = Строка.НаименованиеНоменклатуры;
		НоваяСтрока.ЕдиницаИзмеренияКодДо    = СокрЛП(Строка.ЕдиницаИзмеренияКод);
		НоваяСтрока.ЕдиницаИзмеренияКод      = СокрЛП(Строка.ЕдиницаИзмеренияКод);
		НоваяСтрока.КоличествоДо             = Строка.КоличествоДоИзменения;
		НоваяСтрока.Количество               = Строка.КоличествоПослеИзменения;
		НоваяСтрока.ЦенаДо                   = Строка.ЦенаДоИзменения;
		НоваяСтрока.Цена                     = Строка.ЦенаПослеИзменения;
		НоваяСтрока.СуммаБезНДСДо            = Строка.СтоимостьБезНДСДоИзменения;
		НоваяСтрока.СуммаБезНДС              = Строка.СтоимостьБезНДСПослеИзменения;
		НоваяСтрока.СтавкаНДСДо              = Строка.СтавкаНДС;
		НоваяСтрока.СтавкаНДС                = Строка.СтавкаНДС;
		НоваяСтрока.СуммаНДСДо               = Строка.СуммаНДСДоИзменения;
		НоваяСтрока.СуммаНДС                 = Строка.СуммаНДСПослеИзменения;
		НоваяСтрока.СуммаСНДСДо              = Строка.СтоимостьСНДСДоИзменения;
		НоваяСтрока.СуммаСНДС                = Строка.СтоимостьСНДСПослеИзменения;
		
		НоваяСтрока.Номенклатура             = Строка.Товар;
		НоваяСтрока.Упаковка                 = Строка.НаименованиеЕдиницыИзмерения;
		
		НоваяСтрока.АкцизаДо                 = "без акциза";
		НоваяСтрока.Акциза                   = "без акциза";
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	ПроверитьЗаполнениеТабличнойЧасти(ТаблицаТоваров);
	
	ОбщегоНазначенияЭД.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "ТаблицаТоваров");
	
	Сумма = ТаблицаТоваров.Итог("СуммаСНДС");
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоКОплате.СуммаСНДСВсего", Сумма);
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ТолькоУслуги", ТолькоУслуги);
	
КонецПроцедуры

// Заполняет данные для электронного документа типа СоглашениеОбИзмененииСтоимостиОтправитель.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоКорректировочномуДокументу(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	МассивОбъектов = Новый Массив();
	МассивОбъектов.Добавить(СсылкаНаОбъект);
	
	СведенийСоглашенияОбИзмененииСтоимости = Документы.КорректировкаРеализации.ПолучитьТаблицуСведенийСоглашенияОбИзмененииСтоимости(СсылкаНаОбъект);
	
	Если СведенийСоглашенияОбИзмененииСтоимости.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыШапки = СведенийСоглашенияОбИзмененииСтоимости[0];
	ТабличнаяЧасть = РеквизитыШапки.ТаблицаДокумента;
	
	Если РеквизитыШапки.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки Тогда
		ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Исправление;
	Иначе
		ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Корректировка;
	КонецЕсли;
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерТоварнойНакладной", РеквизитыШапки.НомерДокумента);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаТоварнойНакладной", РеквизитыШапки.ДатаДокумента);
	
	Если ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Исправление Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,"НомерИсправления", РеквизитыШапки.НомерИсправления);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,"ДатаИсправления", РеквизитыШапки.ДатаИсправления);
	КонецЕсли;
	Если ЗначениеЗаполнено(РеквизитыШапки.НомерИсходногоДокумента) Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,"НомерИсходногоДокумента", РеквизитыШапки.НомерИсходногоДокумента);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,"ДатаИсходногоДокумента", РеквизитыШапки.ДатаИсходногоДокумента);
		
		Если ЗначениеЗаполнено(РеквизитыШапки.НомерИсправленияИсходногоДокумента) Тогда
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,"НомерИсправленияИсходногоДокумента", РеквизитыШапки.НомерИсправленияИсходногоДокумента);
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,"ДатаИсправленияИсходногоДокумента", РеквизитыШапки.ДатаИсправленияИсходногоДокумента);
		КонецЕсли;
	КонецЕсли;
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									"ДокОснованиеДата",
									РеквизитыШапки.ОснованиеДата);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									"ДокОснованиеНомер",
									РеквизитыШапки.ОснованиеНомер);
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,"ПредставлениеИсходногоДокумента", РеквизитыШапки.ЗаголовокДокументаОснования);
	
	// Выводим общие реквизиты шапки
	СведенияОПоставщике       = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Поставщик, РеквизитыШапки.ДатаДляПолученияСведений, РеквизитыШапки.БанковскийСчетПродавца);
	СведенияОГрузоотправителе = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Грузоотправитель, РеквизитыШапки.ДатаДляПолученияСведений);
	СведенияОПокупателе       = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Покупатель, РеквизитыШапки.ДатаДляПолученияСведений);
	СведенияОГрузополучателе  = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Грузополучатель, РеквизитыШапки.ДатаДляПолученияСведений);
	
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПоставщике,       "Поставщик",        "Юр");
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОГрузоотправителе, "Грузоотправитель", "Факт");
	
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПокупателе,       "Плательщик",      "Юр");
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОГрузополучателе,  "Грузополучатель", "Факт");
	
	СтруктураДопДанных = Новый Структура;
	СтруктураДопДанных.Вставить("ВалютаКод",   РеквизитыШапки.ВалютаКод);  
	СтруктураДопДанных.Вставить("ВидОперации", ВидОперацииЭД);
	ОбщегоНазначенияЭД.ДобавитьДопДанныеВДерево(ДеревоДанных, СтруктураДопДанных, Истина);
	
	Если ЗначениеЗаполнено(РеквизитыШапки.ДокументОснование) Тогда
		МассивДокументовОснований = Новый Массив;
		МассивДокументовОснований.Добавить(РеквизитыШапки.ДокументОснование);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
							ДеревоДанных,
							"ДокументыОснования",
							МассивДокументовОснований);
	КонецЕсли;
	
	// Добавим данные об товарах
	ТаблицаТоваров = Новый ТаблицаЗначений();
	ТаблицаТоваров.Колонки.Добавить("НаименованиеНоменклатуры");
	ТаблицаТоваров.Колонки.Добавить("НаименованиеХарактеристики");
	ТаблицаТоваров.Колонки.Добавить("Сорт");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("КодТовара");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод");
	ТаблицаТоваров.Колонки.Добавить("ВидУпаковки");
	ТаблицаТоваров.Колонки.Добавить("КоличествоВОдномМесте");
	ТаблицаТоваров.Колонки.Добавить("КоличествоМест");
	ТаблицаТоваров.Колонки.Добавить("МассаБрутто");
	ТаблицаТоваров.Колонки.Добавить("МассаНеттоДоКорректировки");
	ТаблицаТоваров.Колонки.Добавить("МассаНетто");
	ТаблицаТоваров.Колонки.Добавить("ЦенаДоКорректировки");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДСДоКорректировки");
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДСДоКорректировки");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСДоКорректировки");
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС");
	ТаблицаТоваров.Колонки.Добавить("ДокументОснования");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("ДопДанные");
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеПодписанные");
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеНеПодписанные");
	
	Для Каждого Строка Из ТабличнаяЧасть Цикл
		
		СтрокаТаблицыДокумента = ТаблицаТоваров.Добавить();
		
		СтрокаТаблицыДокумента.Номенклатура              = Строка.Номенклатура;
		СтрокаТаблицыДокумента.БазоваяЕдиницаКод         = СокрЛП(Строка.ЕдиницаИзмеренияКод);
		СтрокаТаблицыДокумента.ЕдиницаИзмерения          = Строка.ЕдиницаИзмеренияНаименование;
		СтрокаТаблицыДокумента.КодТовара                 = Строка.НоменклатураКод;
		СтрокаТаблицыДокумента.НаименованиеНоменклатуры  = Строка.НоменклатураНаименование;
		СтрокаТаблицыДокумента.МассаНетто                = Строка.Количество;
		СтрокаТаблицыДокумента.МассаНеттоДоКорректировки = Строка.КоличествоДоКорректировки;
		СтрокаТаблицыДокумента.Упаковка                  = Строка.ЕдиницаИзмерения;
		
		СтрокаТаблицыДокумента.СуммаСНДС   = Строка.СуммаСНДС;
		СтрокаТаблицыДокумента.СуммаНДС    = Строка.СуммаНДС;
		СтрокаТаблицыДокумента.СуммаБезНДС = Строка.СуммаБезНДС;
		СтрокаТаблицыДокумента.СтавкаНДС   = Строка.СтавкаНДС;
		
		СтрокаТаблицыДокумента.СуммаСНДСДоКорректировки   = Строка.СуммаСНДСДоКорректировки;
		СтрокаТаблицыДокумента.СуммаНДСДоКорректировки    = Строка.СуммаНДСДоКорректировки;
		СтрокаТаблицыДокумента.СуммаБезНДСДоКорректировки = Строка.СуммаБезНДСДоКорректировки;
		
		СтрокаТаблицыДокумента.Цена = Строка.Цена;
		СтрокаТаблицыДокумента.ЦенаДоКорректировки = Строка.ЦенаДоКорректировки;
		
		СтруктураДопДанных = Новый Структура;
		СтруктураДопДанных.Вставить("СтавкаНДС", Строка.СтавкаНДС);
		
		СтрокаТаблицыДокумента.ДопДанныеПодписанные = СтруктураДопДанных;
		
	КонецЦикла;
	
	ПроверитьЗаполнениеТабличнойЧасти(ТаблицаТоваров);
	
	ОбщегоНазначенияЭД.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "ТаблицаТоваров");
	
	ИтоговыеСуммы = РассчитатьИтоговыеСуммыКорректировочногоДокумента(ТаблицаТоваров);
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								"СведенияПоОтпускуГруза.ОтпущеноНаСумму",
								ИтоговыеСуммы.ИтогоСуммаСНДС);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								"ОбщиеСведенияОТоварнойНакладной.ВсегоМест",
								ИтоговыеСуммы.ИтогоМест);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								"ОбщиеСведенияОТоварнойНакладной.МассаГрузаНетто",
								ИтоговыеСуммы.ИтогоМассаНетто);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								"ОбщиеСведенияОТоварнойНакладной.МассаГрузаБрутто",
								ИтоговыеСуммы.ИтогоМассаБрутто);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								"ВсегоПоНакладной.КоличествоМест",
								ИтоговыеСуммы.ИтогоМест);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								"ВсегоПоНакладной.МассаБрутто",
								ИтоговыеСуммы.ИтогоМассаБрутто);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								"ВсегоПоНакладной.МассаНетто",
								ИтоговыеСуммы.ИтогоМассаНетто);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								"ВсегоПоНакладной.СуммаБезНДС",
								ИтоговыеСуммы.ИтогоСуммаБезНДС);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								"ВсегоПоНакладной.СуммаНДС",
								ИтоговыеСуммы.ИтогоНДС);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								"ВсегоПоНакладной.СуммаСНДС",
								ИтоговыеСуммы.ИтогоСуммаСНДС);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								"ВсегоПоНакладной.МассаНеттоДоКорректировки",
								ИтоговыеСуммы.ИтогоМассаНетто);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								"ВсегоПоНакладной.СуммаБезНДСДоКорректировки",
								ИтоговыеСуммы.ИтогоСуммаДоКорректировки);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								"ВсегоПоНакладной.СуммаНДСДоКорректировки",
								ИтоговыеСуммы.ИтогоНДСДоКорректировки);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								"ВсегоПоНакладной.СуммаСНДСДоКорректировки",
								ИтоговыеСуммы.ИтогоСуммаСНДСДоКорректировки);
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа СоглашениеОбИзмененииСтоимостиПолучатель.
//
// Параметры:
//  СсылкаНаЭД   - Ссылка на ЭД, по которому необходимо сформировать электронный документ,
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоКорректировочномуДокументуПолучатель(СсылкаНаЭД, СтруктураЭД, ДеревоДанных) Экспорт
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаПолученияГруза", ТекущаяДатаСеанса());
	
КонецПроцедуры

// Работа со деревом данных CML

// Заполняет данные для электронного документа типа Акт на передачу прав формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоАктуНаПередачуПрав(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	МассивДокументов = Новый Массив();
	МассивДокументов.Добавить(СсылкаНаОбъект);
	
	ДанныеДляФормированияЭД = Документы.РеализацияТоваровУслуг.ПолучитьТаблицуСведенийАктаНаПередачуПрав(МассивДокументов);
	
	РеквизитыШапки   = ДанныеДляФормированияЭД[0];
	ТаблицаДокумента = ДанныеДляФормированияЭД[0].ТаблицаДокумента;
	
	ТаблицаТоваров = Новый ТаблицаЗначений();	
	ТаблицаТоваров.Колонки.Добавить("Артикул");   
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("ШтрихКод");
	ТаблицаТоваров.Колонки.Добавить("ИдТовараУКонтрагента");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименование");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименованиеПолное");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаМеждународноеСокращение");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("НДСУчтеноВСумме");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	
	Для Каждого ДанныеСтроки Из ТаблицаДокумента Цикл
		
		СтрокаТаблицыТоваров = ТаблицаТоваров.Добавить();
		
		СтрокаТаблицыТоваров.Артикул 					= ДанныеСтроки.ТоварКод;
		СтрокаТаблицыТоваров.Наименование				= ДанныеСтроки.ТоварНаименование;
		СтрокаТаблицыТоваров.Номенклатура 				= ДанныеСтроки.Товар;
		СтрокаТаблицыТоваров.Упаковка 					= ДанныеСтроки.ЕдиницаИзмерения;
		СтрокаТаблицыТоваров.БазоваяЕдиницаКод 			= СокрЛП(ДанныеСтроки.ЕдиницаИзмеренияКод);
		СтрокаТаблицыТоваров.БазоваяЕдиницаНаименование = ДанныеСтроки.ЕдиницаИзмеренияНаименование;
		СтрокаТаблицыТоваров.БазоваяЕдиницаНаименованиеПолное = ДанныеСтроки.ЕдиницаИзмеренияНаименованиеПолное;
		СтрокаТаблицыТоваров.БазоваяЕдиницаМеждународноеСокращение = "-";
		
		СтрокаТаблицыТоваров.Количество 		= ДанныеСтроки.Количество;
		СтрокаТаблицыТоваров.НДСУчтеноВСумме 	= РеквизитыШапки.СуммаВключаетНДС;
		
		Если РеквизитыШапки.СуммаВключаетНДС Тогда
			СтрокаТаблицыТоваров.Сумма = ДанныеСтроки.СуммаСНДС;
			СтрокаТаблицыТоваров.Цена = ?(ДанныеСтроки.Количество = 0, ДанныеСтроки.СуммаСНДС, ДанныеСтроки.СуммаСНДС / ДанныеСтроки.Количество);
		Иначе
			СтрокаТаблицыТоваров.Сумма = ДанныеСтроки.СуммаБезНДС;
			СтрокаТаблицыТоваров.Цена = ?(ДанныеСтроки.Количество = 0, ДанныеСтроки.СуммаБезНДС, ДанныеСтроки.СуммаБезНДС / ДанныеСтроки.Количество);
		КонецЕсли;
		
		СтрокаТаблицыТоваров.СуммаНДС = ДанныеСтроки.СуммаНДС;
		СтрокаТаблицыТоваров.СтавкаНДС = ДанныеСтроки.СтавкаНДС;
			
	КонецЦикла;
	
	ВставитьЗначениеВДерево(ДеревоДанных, "Номер", РеквизитыШапки.НомерДокумента);
	ВставитьЗначениеВДерево(ДеревоДанных, "Дата", РеквизитыШапки.ДатаДокумента);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Валюта", РеквизитыШапки.ВалютаКод);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Курс", "1");
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Сумма", ТаблицаДокумента.Итог("СуммаСНДС"));
	
	Если ЗначениеЗаполнено(РеквизитыШапки.ДокументОснование) Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									"ДокументыОснования",
									РеквизитыШапки.ДокументОснование);
	КонецЕсли;
	
	СведенияОЛицензиаре = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Лицензиар, РеквизитыШапки.ДатаДляПолученияСведений);
	СведенияОЛицензиате = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Лицензиат, РеквизитыШапки.ДатаДляПолученияСведений);
	СведенияОПлательщике = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Плательщик, РеквизитыШапки.ДатаДляПолученияСведений);
	
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОЛицензиаре, "Лицензиар",  "Факт");
	
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОЛицензиате, "Лицензиат",  "Факт");
	
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПлательщике, "Плательщик", "Юр");
	
	ОбщегоНазначенияЭД.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "Товары");
	
	СтруктураЭД.Вставить("СуммаДокумента", ТаблицаДокумента.Итог("СуммаСНДС"));
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Реквизиты организации формата CML 2.
//
// Параметры: 
// СсылкаНаОбъект - СправочникСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
// СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДокумента - дерево значений - дерево значений, соответствующее макету РеквизитыОрганизации обработки ЭлектронныеДокументы.
//
Процедура ЗаполнитьДанныеРеквизитыОрганизации(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт

	СведенияОбОрганизации = ПолучитьДанныеЮрФизЛица(СсылкаНаОбъект);
	
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОбОрганизации, "Организация", "Юр");
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БанковскиеСчета.НомерСчета КАК НомерСчета,
	|	БанковскиеСчета.Наименование КАК Комментарий,
	|	ЕСТЬNULL(Банки.Наименование, """") КАК БанкНаименование,
	|	ЕСТЬNULL(Банки.Код, """") КАК БанкБИК,
	|	ЕСТЬNULL(БанковскиеСчета.Банк.КоррСчет, """") КАК БанкСчетКорр,
	|	"""" КАК БанкSWIFT,
	|	ЕСТЬNULL(БанкиКорреспондент.Наименование, """") КАК БанкКоррНаименование,
	|	ЕСТЬNULL(БанкиКорреспондент.Код, """") КАК БанкКоррБИК,
	|	ЕСТЬNULL(БанкиКорреспондент.КоррСчет, """") КАК БанкКоррБанкСчетКорр,
	|	"""" КАК БанкКоррSWIFT
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Банки КАК Банки
	|		ПО БанковскиеСчета.Банк = Банки.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Банки КАК БанкиКорреспондент
	|		ПО БанковскиеСчета.БанкДляРасчетов = БанкиКорреспондент.Ссылка
	|ГДЕ
	|	БанковскиеСчета.Владелец = &Владелец";
	Запрос.УстановитьПараметр("Владелец", СсылкаНаОбъект);
	Результат = Запрос.Выполнить();
	БанковскиеСчета = Результат.Выгрузить();
	
	ЕстьОшибкиЗаполнения = Ложь;
	ТекстОшибки = "";
	
	Для Каждого ТекСчет Из БанковскиеСчета Цикл
		
		ШаблонСообщения = НСтр("ru = 'Длина номера банковского счета организации не равна %1 символам.'");
		ЭлектронныеДокументыСлужебный.ПроверитьДлинуНомераСчета(ТекСчет.НомерСчета, ШаблонСообщения, ЕстьОшибкиЗаполнения, ТекстОшибки);
		
		Если Не ЗначениеЗаполнено(ТекСчет.БанкКоррБанкСчетКорр) Тогда
			Продолжить;
		КонецЕсли;
		
		ШаблонСообщения = НСтр("ru = 'Длина номера корреспондентского счета банка организации не равна %1 символам.'");
		ЭлектронныеДокументыСлужебный.ПроверитьДлинуНомераСчета(ТекСчет.БанкКоррБанкСчетКорр, ШаблонСообщения, ЕстьОшибкиЗаполнения, ТекстОшибки);
		
	КонецЦикла;
	
	Если ЕстьОшибкиЗаполнения Тогда
		ВставитьЗначениеВДерево(ДеревоДанных, "ТекстОшибки", ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияЭД.ЗагрузитьТаблицуВДерево(ДеревоДанных, БанковскиеСчета, "РасчетныеСчета");
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаФормирования", ТекущаяДатаСеанса());
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Наименование", "Реквизиты "+СсылкаНаОбъект.Наименование);
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа КаталогТоваров.
//
// Параметры:
//  Организация - СправочникСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  ТоварыКаталога - Массив, список товаров для заполнения каталога.
//  ДеревоДанных - дерево значений, дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоКаталогуТоваровCML(Организация, ТоварыКаталога, ДеревоДанных) Экспорт
	
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ПрайсЛист формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДокумента - Дерево значений - Дерево значений, соответствующее макету ПрайсЛист обработки ЭлектронныеДокументы.
//
Процедура ЗаполнитьДанныеПоПрайсЛисту(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента) Экспорт
	
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Счет формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  Дерево документа - дерево значений - дерево значений, соответствующее макету СчетНаОплату обработки ЭлектронныеДокументы.
//
Процедура ЗаполнитьДанныеПоСчету(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента) Экспорт
	
	МассивДокументов = Новый Массив();
	МассивДокументов.Добавить(СсылкаНаОбъект);
	
	ДанныеДляФормированияЭД = Документы.СчетНаОплатуПокупателю.ПолучитьТаблицуСведенийСчетаНаОплату(МассивДокументов);
	
	РеквизитыШапки   = ДанныеДляФормированияЭД[0];
	ТаблицаДокумента = ДанныеДляФормированияЭД[0].ТаблицаДокумента;
	
	ТаблицаТоваров = Новый ТаблицаЗначений();	
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("ШтрихКод");
	ТаблицаТоваров.Колонки.Добавить("ИдТовараУКонтрагента");
	ТаблицаТоваров.Колонки.Добавить("Описание");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименование");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("НДСУчтеноВСумме");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	
	Для Каждого ДанныеСтроки Из ТаблицаДокумента Цикл
		
		СтрокаТаблицыТоваров = ТаблицаТоваров.Добавить();
		
		СтрокаТаблицыТоваров.Артикул 					= ДанныеСтроки.НоменклатураАртикул;
		СтрокаТаблицыТоваров.Наименование				= ДанныеСтроки.НоменклатураНаименование;
		СтрокаТаблицыТоваров.Описание 					= ДанныеСтроки.Содержание;
		СтрокаТаблицыТоваров.Номенклатура 				= ДанныеСтроки.Номенклатура;
		СтрокаТаблицыТоваров.Упаковка 					= ДанныеСтроки.ЕдиницаИзмерения;
		СтрокаТаблицыТоваров.БазоваяЕдиницаКод 			= СокрЛП(ДанныеСтроки.ЕдиницаИзмеренияКод);
		СтрокаТаблицыТоваров.БазоваяЕдиницаНаименование = ДанныеСтроки.ЕдиницаИзмеренияНаименование;
		СтрокаТаблицыТоваров.Цена 				= ДанныеСтроки.Цена;
		СтрокаТаблицыТоваров.Количество 		= ДанныеСтроки.Количество;
		СтрокаТаблицыТоваров.Сумма 				= ДанныеСтроки.Сумма;
		СтрокаТаблицыТоваров.НДСУчтеноВСумме 	= РеквизитыШапки.СуммаВключаетНДС;
		Если ДанныеСтроки.СуммаНДС = 0 Тогда
			// Обход ошибки
			СтрокаТаблицыТоваров.СуммаНДС = "0";
		Иначе
			СтрокаТаблицыТоваров.СуммаНДС = ДанныеСтроки.СуммаНДС;
		КонецЕсли;
		СтрокаТаблицыТоваров.СтавкаНДС = ДанныеСтроки.СтавкаНДС;
			
	КонецЦикла;
	
	ПроверитьЗаполнениеТабличнойЧасти(ТаблицаТоваров);
	
	СведенияОПоставщике = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Поставщик, РеквизитыШапки.ДатаДляПолученияСведений);
	СведенияОПокупателе = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Покупатель, РеквизитыШапки.ДатаДляПолученияСведений);
	
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПоставщике, "Продавец",   "Юр");
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПокупателе, "Покупатель", "Юр");
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Валюта", РеквизитыШапки.ВалютаКод);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Курс",   РеквизитыШапки.КурсВзаиморасчетов);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Сумма",  ТаблицаТоваров.Итог("Сумма"));
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "НазначениеПлатежа", "");   
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "СрокПлатежа", '00010101'); 
	
	ОбщегоНазначенияЭД.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаТоваров, "Товары");
	
	// Расчетный счет
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.НомерСчета", РеквизитыШапки.НомерСчета);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.Наименование", РеквизитыШапки.БанкНаименование);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.БИК", РеквизитыШапки.БИК);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.СчетКорреспондентский", РеквизитыШапки.КоррСчет);
	
	Если ЗначениеЗаполнено(РеквизитыШапки.БанкДляРасчетов) Тогда
		
		РеквизитыБанка = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(РеквизитыШапки.БанкДляРасчетов, "Наименование,КоррСчет,Код");
		
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.Наименование", РеквизитыБанка.Наименование);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.БИК", РеквизитыБанка.Код);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.СчетКорреспондентский", РеквизитыБанка.КоррСчет);
	
	КонецЕсли;
	
	// Итоги по документу
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.Сумма", ТаблицаТоваров.Итог("Сумма"));
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаСкидки", 0);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаБезСкидки",  ТаблицаТоваров.Итог("Сумма"));
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаНДС",        ТаблицаТоваров.Итог("СуммаНДС"));
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.ЦенаВключаетНДС", РеквизитыШапки.СуммаВключаетНДС);
	
	// Отвественные лица
	ЗаполнитьДанныеФизическогоЛица(ДеревоДокумента, "Продавец.Руководитель", РеквизитыШапки.РуководительСтруктураФИО, РеквизитыШапки.РуководительДолжностьНаименование);
	
	// Итоговая строка
	СуммаКПрописи = ТаблицаТоваров.Итог("Сумма");
	
	ШаблонСтроки =	НСтр("ru = 'Всего наименований %1, на сумму %2'");
	
	ИтоговаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки,
		ТаблицаТоваров.Количество(),
		ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаКПрописи, РеквизитыШапки.Валюта));
		
	ИтоговаяСтрока = ИтоговаяСтрока +  Символы.ПС + ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СуммаКПрописи, РеквизитыШапки.Валюта);
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогиПрописью", ИтоговаяСтрока);
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ЗаказТоваров формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДокумента - дерево значений - дерево значений, соответствующее макету ЗаказТовара обработки ЭлектронныеДокументы.
//
Процедура ЗаполнитьДанныеПоЗаказуТоваров(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента) Экспорт
	
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ОтветНаЗаказ формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДокумента - дерево значений - дерево значений, соответствующее макету ОтветНаЗаказ обработки ЭлектронныеДокументы.
//
Процедура ЗаполнитьДанныеПоОтветуНаЗаказ(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента) Экспорт
	
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ОтчетКомитенту формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДокумента - дерево значений - дерево значений, соответствующее макету ОтчетКомиссионераОПродажах обработки ЭлектронныеДокументы.
//
// Особенность:
//  Параметр ДополнительныеРеквизитыДляТаблицыТоваров в общей структуре параметров предназначен для заполнения
//  колонки ДополнительныеРеквизиты в таблице товаров.
//
Процедура ЗаполнитьДанныеПоОтчетуОПродажахКомиссионногоТовара(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтчетКомитентуОПродажах.Дата,
	|	ОтчетКомитентуОПродажах.ВалютаДокумента,
	|	ОтчетКомитентуОПродажах.ВалютаДокумента.Код КАК ВалютаКод,
	|	ОтчетКомитентуОПродажах.СуммаДокумента,
	|	ОтчетКомитентуОПродажах.СуммаВключаетНДС,
	|	ОтчетКомитентуОПродажах.СуммаВознаграждения,
	|	ОтчетКомитентуОПродажах.СпособРасчетаКомиссионногоВознаграждения,
	|	ОтчетКомитентуОПродажах.ПроцентКомиссионногоВознаграждения,
	|	ОтчетКомитентуОПродажах.СтавкаНДСВознаграждения,
	|	ОтчетКомитентуОПродажах.Организация,
	|	ОтчетКомитентуОПродажах.Контрагент КАК Контрагент,
	|	ОтчетКомитентуОПродажах.УдержатьВознаграждение
	|ИЗ
	|	Документ.ОтчетКомитентуОПродажах КАК ОтчетКомитентуОПродажах
	|ГДЕ
	|	ОтчетКомитентуОПродажах.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Сумма КАК СуммаПродажи,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.СуммаНДС КАК СуммаНДС,
	|	Товары.СуммаВознаграждения КАК СуммаВознаграждения,
	|	Товары.Покупатель КАК Контрагент,
	|	Товары.Цена КАК ЦенаПродажи,
	|	Товары.Номенклатура,
	|	Товары.Количество,
	|	Товары.ЦенаПоступления КАК Цена,
	|	Товары.СуммаПоступления КАК Сумма,
	|	Товары.Номенклатура.Наименование,
	|	Товары.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	Товары.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	Товары.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	Товары.Номенклатура.Наименование КАК Наименование,
	|	Товары.ДатаРеализации
	|ИЗ
	|	Документ.ОтчетКомитентуОПродажах.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	РеквизитыШапки = РезультатЗапроса[0].Выбрать();
	РеквизитыШапки.Следующий();
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ДатаФормирования", 
			ТекущаяДатаСеанса());
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Валюта", 
			РеквизитыШапки.ВалютаКод);	
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Сумма", 
			РеквизитыШапки.СуммаДокумента);
			
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогоПоДокументу.СтавкаНДСВознаграждения", 
			?(РеквизитыШапки.СтавкаНДСВознаграждения = Перечисления.СтавкиНДС.ПустаяСсылка(), 
													Перечисления.СтавкиНДС.БезНДС, РеквизитыШапки.СтавкаНДСВознаграждения));
			
	СведенияОКомитенте = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Контрагент);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОКомитенте, "Комитент", "Юр");
	
	СведенияОКомиссионере = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Организация);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОКомиссионере, "Комиссионер", "Юр");
	
	ТаблицаТоваров = РезультатЗапроса[1].Выгрузить();
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("ИдТовараУКонтрагента");
	ОбщегоНазначенияЭД.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаТоваров, "Товары");	
	СтрокаТаблицаТоваров = ДеревоДокумента.Строки.Найти("Товары", "ПолныйПуть");
	Для Каждого Товар Из СтрокаТаблицаТоваров.Строки Цикл
		
		ИндексСтроки = Число(Товар.Значение) - 1;
		Покупатель = ТаблицаТоваров[ИндексСтроки].Контрагент;		
		СведенияОПокупателе = ПолучитьДанныеЮрФизЛица(Покупатель);
		ЗаполнитьДанныеУчастника(Товар, СведенияОПокупателе, "Товары.НомерСтроки.Покупатель", "Юр", "Товары.НомерСтроки");
		
		МассивЗначений = Товар.Строки.НайтиСтроки(Новый Структура("ПолныйПуть", "Товары.НомерСтроки.Покупатель.Адрес.Структурированный"), Истина);
		Если МассивЗначений.Количество() > 0 Тогда
			
			СтрокиЗначений = МассивЗначений[0].Строки;
			Для Каждого СтрокаЗначения Из СтрокиЗначений Цикл
				
				СтрокаЗначения.Уровень4 = СтрокаЗначения.Уровень6;
				
			КонецЦикла;
			
		КонецЕсли;		
		ДатаРеализации = ТаблицаТоваров[ИндексСтроки].ДатаРеализации;
		СтрокаДопДанных = Товар.Строки.Найти("Товары.НомерСтроки.ДопДанныеПодписанные", "ПолныйПуть", Истина);
		ОбщегоНазначенияЭД.ДобавитьДопДанныеВДерево(СтрокаДопДанных, Новый Структура("ДатаРеализации", ДатаРеализации));
		
	КонецЦикла; 	
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(РеквизитыШапки.Организация, РеквизитыШапки.Дата);
	СтрокаДопДанных = ДеревоДокумента.Строки.Найти("ДопДанные", "ПолныйПуть", Истина);
	ОбщегоНазначенияЭД.ДобавитьДопДанныеВДерево(СтрокаДопДанных, Новый Структура("ПлательщикНДС", ПлательщикНДС), Истина);
	ОбщегоНазначенияЭД.ДобавитьДопДанныеВДерево(СтрокаДопДанных, Новый Структура("УдержатьВознаграждение", РеквизитыШапки.УдержатьВознаграждение), Истина);
	 
	Если РеквизитыШапки.СуммаДокумента < 0 Тогда
		ТекстИтоговаяСтрока = Нстр("ru = 'Всего возвращено наименований'");
	Иначе
		ТекстИтоговаяСтрока = Нстр("ru = 'Всего продано наименований'");
	КонецЕсли;
	
	ИтоговаяСтрока = ТекстИтоговаяСтрока
		+ " "
		+ ТаблицаТоваров.Количество()
		+ Нстр("ru = ', на сумму'")
		+ " "
		+ ФорматСумм(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.ВалютаДокумента);
	
	СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.ВалютаДокумента);
		
	Если РеквизитыШапки.СуммаВознаграждения <> 0 Тогда
		СуммаВознаграждения = Нстр("ru = 'Сумма комиссионного вознаграждения составила'")
			+ " "
			+ ?(РеквизитыШапки.СуммаВознаграждения < 0, Нстр("ru = 'минус'") + " ", "")
			+ РаботаСКурсамиВалют.СформироватьСуммуПрописью(РеквизитыШапки.СуммаВознаграждения, РеквизитыШапки.ВалютаДокумента);
	КонецЕсли;
	
	ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС + СуммаПрописью + Символы.ПС + СуммаВознаграждения;
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогиПрописью", 
			ИтоговаяСтрока); 
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ОтчетКомитентуОСписании формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  ДеревоДокумента - дерево значений - дерево значений, соответствующее макету ОтчетКомиссионераОСписании обработки ЭлектронныеДокументы.
//
Процедура ЗаполнитьДанныеПоОтчетуОСписанииКомиссионногоТовара(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента) Экспорт
	
	
КонецПроцедуры

// Устаревшие: Работа со структурой данных ФНС

// Устаревшая процедура, вместо этой процедуры следует использовать ЗаполнитьДанныеПоТорг12ПродавецФНС.
// Подготавливает данные для электронного документа типа Торг12 титул продавца.
//
// Параметры:
//  СсылкаНаОбъект - документСсылка - ссылка на объект информационной базы,
//  по которому необходимо создать электронный документ.
//  СтруктураЭД - структура - структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоТорг12(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
КонецПроцедуры

// Устаревшая процедура, вместо этой процедуры следует использовать ЗаполнитьДанныеПоТОРГ12ПокупательФНС.
// Подготавливает данные для электронного документа типа Торг12 титул покупателя.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоТорг12Покупатель(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
КонецПроцедуры

// Устаревшая процедура, вместо этой процедуры следует использовать ЗаполнитьДанныеПоАкт501ИсполнительФНС.
// Подготавливает данные титула исполнителя для электронного документа типа Акт выполненных работ
// формата 5.01.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоАкт501(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
КонецПроцедуры

// Устаревшая процедура, вместо этой процедуры следует использовать ЗаполнитьДанныеПоАкт501ЗаказчикФНС.
// Подготавливает данные титула заказчика для электронного документа типа Акт выполненных работ
// формата 5.01.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоАкт501Заказчик(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
КонецПроцедуры

// Устаревшая процедура, вместо этой процедуры следует использовать ЗаполнитьДанныеПоСчетуФактуреФНС.
// Подготавливает данные для электронного документа типа СчетФактураВыданный.
//
// Параметры:
//  СсылкаНаОбъект - документСсылка - ссылка на объект информационной базы, по которому необходимо создать электронный документ;
//  СтруктураЭД - структура - структура данных для формирования электронного документа;
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоСчетФактуре(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
КонецПроцедуры

// Устаревшая процедура, вместо этой процедуры следует использовать ЗаполнитьДанныеПоКорректировочномуСчетуФактуреФНС.
// Подготавливает данные для электронного документа типа КорректировочныйСчетФактураВыданный.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//
Процедура ПодготовитьДанныеПоКорректировочномуСчетуФактуре(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
КонецПроцедуры

// Устаревшие: Работа со структурой данных CML

// Устаревшая процедура, вместо этой процедуры следует использовать ЗаполнитьДанныеПоКаталогуТоваровCML.
// Подготавливает данные для электронного документа типа КаталогТоваров.
//
// Параметры: 
// СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
// ТоварыКаталога - Массив, список товаров для заполнения каталога.
// СтруктураЭД - Структура, структура данных для формирования электронного документа.
// СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоКаталогуТоваров(СсылкаНаОбъект, ТоварыКаталога, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
КонецПроцедуры

// Устаревшая процедура, вместо этой процедуры следует использовать ЗаполнитьДанныеПоПрайсЛисту.
//Подготавливает данные для электронного документа типа ПрайсЛист формата CML 4.02
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоПрайсЛисту(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
КонецПроцедуры

// Устаревшая процедура, вместо этой процедуры следует использовать ЗаполнитьДанныеПоСчету.
// Подготавливает данные для электронного документа типа Счет формата CML 4.02
//  
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
// Устаревшая процедура 
Процедура ПодготовитьДанныеПоСчету(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	МассивДокументов = Новый Массив();
	МассивДокументов.Добавить(СсылкаНаОбъект);
	
	ДанныеДляФормированияЭД = Документы.СчетНаОплатуПокупателю.ПолучитьТаблицуСведенийСчетаНаОплату(МассивДокументов);
	
	РеквизитыШапки   = ДанныеДляФормированияЭД[0];
	ТаблицаДокумента = ДанныеДляФормированияЭД[0].ТаблицаДокумента;
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Ид");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Описание");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиница");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименование");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименованиеПолное");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаМеждународноеСокращение");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("Коэффициент");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	
	ТаблицаТоваров.Колонки.Добавить("СуммаСкидки");
	
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаКод");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаНаименование");
	
	ТаблицаТоваров.Колонки.Добавить("ДополнительныеРеквизиты");
	
	Для Каждого Строка Из ТаблицаДокумента Цикл
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		
		НоваяСтрока.Номенклатура 	= Строка.Номенклатура;
		НоваяСтрока.Описание 		= Строка.Содержание;
		НоваяСтрока.Артикул 		= Строка.НоменклатураАртикул;
		НоваяСтрока.БазоваяЕдиница 				= Строка.ЕдиницаИзмерения;
		НоваяСтрока.БазоваяЕдиницаКод 			= СокрЛП(Строка.ЕдиницаИзмеренияКод);
		НоваяСтрока.БазоваяЕдиницаНаименование 	= Строка.ЕдиницаИзмеренияНаименование;
		НоваяСтрока.БазоваяЕдиницаНаименованиеПолное 	= Строка.ЕдиницаИзмеренияНаименованиеПолное;
		НоваяСтрока.Количество 	= Строка.Количество;
		НоваяСтрока.Коэффициент = 1;
		НоваяСтрока.Цена 		= Строка.Цена;
		НоваяСтрока.Сумма 		= Строка.Сумма;
		НоваяСтрока.СтавкаНДС 	= Строка.СтавкаНДС;
		НоваяСтрока.СуммаНДС 	= Строка.СуммаНДС;
		
		НоваяСтрока.СуммаСНДС   = ?(РеквизитыШапки.СуммаВключаетНДС, Строка.Сумма, Строка.Сумма + Строка.СуммаНДС);
		НоваяСтрока.СуммаСкидки = 0;
		
		НоваяСтрока.Упаковка 			 = Строка.ЕдиницаИзмерения;
		НоваяСтрока.УпаковкаКод 		 = СокрЛП(Строка.ЕдиницаИзмеренияКод);
		НоваяСтрока.УпаковкаНаименование = Строка.ЕдиницаИзмеренияНаименование;
		
		НоваяСтрока.Наименование = ПолучитьНаименованиеНоменклатуры(Строка.НоменклатураНаименование, Строка.ЕдиницаИзмеренияНаименование);
		НоваяСтрока.Ид = ПолучитьИДНоменклатуры(НоваяСтрока.Номенклатура, НоваяСтрока.Характеристика, НоваяСтрока.Упаковка);
		
	КонецЦикла;
	
	ПроверитьЗаполнениеТабличнойЧасти(ТаблицаТоваров);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Исполнитель", 	СтруктураЭД.Отправитель);
	СтруктураПараметров.Вставить("ВерсияСхемы", 	"4.02");
	СтруктураПараметров.Вставить("ТаблицаТоваров", 	ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация", 	СтруктураЭД.Организация);
	СтруктураПараметров.Вставить("Контрагент", 		СтруктураЭД.Контрагент);
	СтруктураПараметров.Вставить("Ид", 				СтруктураЭД.НомерЭД);
	СтруктураПараметров.Вставить("ДатаФормирования", ТекущаяДатаСеанса());
	СтруктураПараметров.Вставить("Номер", 			СокрЛП(СтруктураЭД.НомерДокументаОтправителя));
	СтруктураПараметров.Вставить("Дата", 			СтруктураЭД.ДатаДокументаОтправителя);
	СтруктураПараметров.Вставить("Валюта", 			РеквизитыШапки.Валюта);
	СтруктураПараметров.Вставить("Курс", 			РеквизитыШапки.КурсВзаиморасчетов);
	СтруктураПараметров.Вставить("Сумма", 			ТаблицаТоваров.Итог("СуммаСНДС"));
	СтруктураПараметров.Вставить("ЦенаВключаетНДС", РеквизитыШапки.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("СуммаНДС", 		ТаблицаТоваров.Итог("СуммаНДС"));
	СтруктураПараметров.Вставить("ВидЭД", 			СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД", 	СтруктураЭД.НаправлениеЭД);
	
	СтруктураПараметров.Вставить("НазначениеПлатежа", "");
	СтруктураПараметров.Вставить("СрокПлатежа", '00010101');
	
	// Расчетный счет
	РасчетныйСчет = Новый Структура;
	РасчетныйСчет.Вставить("НомерСчета", РеквизитыШапки.НомерСчета);
	РасчетныйСчет.Вставить("Банк", РеквизитыШапки.БанкНаименование);
	РасчетныйСчет.Вставить("КоррСчет", РеквизитыШапки.КоррСчет);
	РасчетныйСчет.Вставить("БИК", РеквизитыШапки.БИК);
	
	Если ЗначениеЗаполнено(РеквизитыШапки.БанкДляРасчетов) Тогда
		
		РеквизитыБанка = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(РеквизитыШапки.БанкДляРасчетов, "Наименование,КоррСчет,Код");
		
		БанкКорреспондент = Новый Структура;
		БанкКорреспондент.Вставить("Банк", РеквизитыБанка.Наименование);
		БанкКорреспондент.Вставить("КоррСчет", РеквизитыБанка.КоррСчет);
		БанкКорреспондент.Вставить("БИК", РеквизитыБанка.Код);
		
		РасчетныйСчет.Вставить("БанкКорреспондент", БанкКорреспондент);
		
	КонецЕсли;
	
	СтруктураПараметров.Вставить("РасчетныйСчет", РасчетныйСчет);
	
	// Отвественные лица
	СтруктураПараметров.Вставить("Руководитель", РеквизитыШапки.Руководитель);
	СтруктураПараметров.Вставить("Бухгалтер", РеквизитыШапки.ГлавныйБухгалтер);
				
	// Итоговая строка
	СуммаКПрописи = ТаблицаТоваров.Итог("СуммаСНДС");
	
	ШаблонСтроки =	НСтр("ru = 'Всего наименований %1, на сумму %2'");
		
	ИтоговаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки,
		ТаблицаТоваров.Количество(),
		ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаКПрописи, РеквизитыШапки.Валюта));
		
	ИтоговаяСтрока = ИтоговаяСтрока +  Символы.ПС + ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СуммаКПрописи, РеквизитыШапки.Валюта);
	
	СтруктураПараметров.Вставить("ИтогиПрописью", ИтоговаяСтрока);
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Контрагент, Ид, ДатаФормирования, Номер, Дата, ВидЭД, НаправлениеЭД, ТаблицаТоваров");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений", "ИД, Наименование, Количество, БазоваяЕдиницаКод, СуммаНДС, СуммаСНДС");
	
КонецПроцедуры

// Устаревшая процедура, вместо этой процедуры следует использовать ЗаполнитьДанныеПоЗаказуТоваров.
// 
// Подготавливает данные для электронного документа типа ЗаказТоваров формата CML 4.02
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоЗаказуТоваров(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
КонецПроцедуры

// Устаревшая процедура, вместо этой процедуры следует использовать ЗаполнитьДанныеПоОтветуНаЗаказ.
// 
// Подготавливает данные для электронного документа типа ОтветНаЗаказ формата CML 4.02
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
// УСТАРЕВШАЯ ПРОЦЕДУРА
Процедура ПодготовитьДанныеПоОтветуНаЗаказ(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
КонецПроцедуры

// Устаревшая процедура, вместо этой процедуры следует использовать ЗаполнитьДанныеПоОтчетуОПродажахКомиссионногоТовара. 
// Подготавливает данные для электронного документа типа ОтчетКомитенту формата CML 4.02
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура, параметры для заполнения.
//
// Особенность:
//  Параметр ДополнительныеРеквизитыДляТаблицыТоваров в общей структуре параметров предназначен для заполнения
//  колонки ДополнительныеРеквизиты в таблице товаров.
//
Процедура ПодготовитьДанныеПоОтчетуОПродажахКомиссионногоТовара(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
		
КонецПроцедуры

// Устаревшая процедура, вместо этой процедуры следует использовать ЗаполнитьДанныеПоОтчетуОСписанииКомиссионногоТовара.
// Подготавливает данные для электронного документа типа ОтчетКомитентуОСписании формата CML 4.02
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура, параметры для заполнения.
//
//
Процедура ПодготовитьДанныеПоОтчетуОСписанииКомиссионногоТовара(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
КонецПроцедуры

// Устаревшая процедура, будет удалена при переходе на новую редакцию БЭД.
// Подготавливает данные для электронного документа типа Накладная.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоНакладной(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслугТовары.Номенклатура.Артикул КАК Артикул,
		|	РеализацияТоваровУслугТовары.Номенклатура.Наименование КАК Наименование,
		|	РеализацияТоваровУслугТовары.Номенклатура,
		|	РеализацияТоваровУслугТовары.Номенклатура.Код КАК КодТовара,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(110)) КАК Ид,
		|	РеализацияТоваровУслугТовары.Количество КАК Количество,
		|	РеализацияТоваровУслугТовары.Сумма КАК Сумма,
		|	РеализацияТоваровУслугТовары.Цена КАК Цена,
		|	NULL КАК Характеристика,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугТовары.Номенклатура.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
		|			ТОГДА &КодЕдиницыИзмеренияПоУмолчанию
		|		ИНАЧЕ РеализацияТоваровУслугТовары.Номенклатура.ЕдиницаИзмерения.Код
		|	КОНЕЦ КАК БазоваяЕдиницаКод,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугТовары.Номенклатура.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
		|			ТОГДА &НаименованиеЕдиницыИзмеренияПоУмолчанию
		|		ИНАЧЕ РеализацияТоваровУслугТовары.Номенклатура.ЕдиницаИзмерения.Наименование
		|	КОНЕЦ КАК БазоваяЕдиницаНаименование,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугТовары.Номенклатура.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
		|			ТОГДА &НаименованиеЕдиницыИзмеренияПоУмолчанию
		|		ИНАЧЕ РеализацияТоваровУслугТовары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное
		|	КОНЕЦ КАК БазоваяЕдиницаНаименованиеПолное,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугТовары.Номенклатура.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
		|			ТОГДА &НаименованиеЕдиницыИзмеренияПоУмолчанию
		|		ИНАЧЕ РеализацияТоваровУслугТовары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное
		|	КОНЕЦ КАК БазоваяЕдиницаМеждународноеСокращение,
		|	РеализацияТоваровУслугТовары.ЕдиницаИзмерения.Наименование КАК УпаковкаНаименование,
		|	РеализацияТоваровУслугТовары.ЕдиницаИзмерения.Код КАК УпаковкаКод,
		|	РеализацияТоваровУслугТовары.ЕдиницаИзмерения КАК Упаковка,
		|	РеализацияТоваровУслугТовары.СтавкаНДС КАК СтавкаНДС,
		|	РеализацияТоваровУслугТовары.СуммаНДС КАК СуммаНДС,
		|	1 КАК Коэффициент,
		|	0 КАК СуммаСкидки,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслуг.СуммаВключаетНДС
		|			ТОГДА РеализацияТоваровУслугТовары.Сумма
		|		ИНАЧЕ РеализацияТоваровУслугТовары.Сумма + РеализацияТоваровУслугТовары.СуммаНДС
		|	КОНЕЦ КАК СуммаСНДС
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ПО РеализацияТоваровУслугТовары.Ссылка = РеализацияТоваровУслуг.Ссылка
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РеализацияТоваровУслугУслуги.Номенклатура.Артикул,
		|	РеализацияТоваровУслугУслуги.Номенклатура.Наименование,
		|	РеализацияТоваровУслугУслуги.Номенклатура,
		|	РеализацияТоваровУслугУслуги.Номенклатура.Код,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(110)),
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугУслуги.Количество = 0
		|			ТОГДА 1
		|		ИНАЧЕ РеализацияТоваровУслугУслуги.Количество
		|	КОНЕЦ,
		|	РеализацияТоваровУслугУслуги.Сумма,
		|	РеализацияТоваровУслугУслуги.Цена,
		|	NULL,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугУслуги.Номенклатура.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
		|			ТОГДА &КодЕдиницыИзмеренияПоУмолчанию
		|		ИНАЧЕ РеализацияТоваровУслугУслуги.Номенклатура.ЕдиницаИзмерения.Код
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугУслуги.Номенклатура.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
		|			ТОГДА &НаименованиеЕдиницыИзмеренияПоУмолчанию
		|		ИНАЧЕ РеализацияТоваровУслугУслуги.Номенклатура.ЕдиницаИзмерения.Наименование
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугУслуги.Номенклатура.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
		|			ТОГДА &НаименованиеЕдиницыИзмеренияПоУмолчанию
		|		ИНАЧЕ РеализацияТоваровУслугУслуги.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугУслуги.Номенклатура.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
		|			ТОГДА &НаименованиеЕдиницыИзмеренияПоУмолчанию
		|		ИНАЧЕ РеализацияТоваровУслугУслуги.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугУслуги.Номенклатура.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
		|			ТОГДА &НаименованиеЕдиницыИзмеренияПоУмолчанию
		|		ИНАЧЕ РеализацияТоваровУслугУслуги.Номенклатура.ЕдиницаИзмерения.Наименование
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугУслуги.Номенклатура.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
		|			ТОГДА &КодЕдиницыИзмеренияПоУмолчанию
		|		ИНАЧЕ РеализацияТоваровУслугУслуги.Номенклатура.ЕдиницаИзмерения.Код
		|	КОНЕЦ,
		|	РеализацияТоваровУслугУслуги.Номенклатура.ЕдиницаИзмерения,
		|	РеализацияТоваровУслугУслуги.СтавкаНДС,
		|	РеализацияТоваровУслугУслуги.СуммаНДС,
		|	1,
		|	0,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслуг.СуммаВключаетНДС
		|			ТОГДА РеализацияТоваровУслугУслуги.Сумма
		|		ИНАЧЕ РеализацияТоваровУслугУслуги.Сумма + РеализацияТоваровУслугУслуги.СуммаНДС
		|	КОНЕЦ
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ПО РеализацияТоваровУслугУслуги.Ссылка = РеализацияТоваровУслуг.Ссылка
		|ГДЕ
		|	РеализацияТоваровУслугУслуги.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РеализацияТоваровУслугАгентскиеУслуги.Номенклатура.Артикул,
		|	РеализацияТоваровУслугАгентскиеУслуги.Номенклатура.Наименование,
		|	РеализацияТоваровУслугАгентскиеУслуги.Номенклатура,
		|	РеализацияТоваровУслугАгентскиеУслуги.Номенклатура.Код,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(110)),
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугАгентскиеУслуги.Количество = 0
		|			ТОГДА 1
		|		ИНАЧЕ РеализацияТоваровУслугАгентскиеУслуги.Количество
		|	КОНЕЦ,
		|	РеализацияТоваровУслугАгентскиеУслуги.Сумма,
		|	РеализацияТоваровУслугАгентскиеУслуги.Цена,
		|	NULL,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугАгентскиеУслуги.Номенклатура.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
		|			ТОГДА &КодЕдиницыИзмеренияПоУмолчанию
		|		ИНАЧЕ РеализацияТоваровУслугАгентскиеУслуги.Номенклатура.ЕдиницаИзмерения.Код
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугАгентскиеУслуги.Номенклатура.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
		|			ТОГДА &НаименованиеЕдиницыИзмеренияПоУмолчанию
		|		ИНАЧЕ РеализацияТоваровУслугАгентскиеУслуги.Номенклатура.ЕдиницаИзмерения.Наименование
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугАгентскиеУслуги.Номенклатура.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
		|			ТОГДА &НаименованиеЕдиницыИзмеренияПоУмолчанию
		|		ИНАЧЕ РеализацияТоваровУслугАгентскиеУслуги.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугАгентскиеУслуги.Номенклатура.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
		|			ТОГДА &НаименованиеЕдиницыИзмеренияПоУмолчанию
		|		ИНАЧЕ РеализацияТоваровУслугАгентскиеУслуги.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугАгентскиеУслуги.Номенклатура.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
		|			ТОГДА &НаименованиеЕдиницыИзмеренияПоУмолчанию
		|		ИНАЧЕ РеализацияТоваровУслугАгентскиеУслуги.Номенклатура.ЕдиницаИзмерения.Наименование
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугАгентскиеУслуги.Номенклатура.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
		|			ТОГДА &КодЕдиницыИзмеренияПоУмолчанию
		|		ИНАЧЕ РеализацияТоваровУслугАгентскиеУслуги.Номенклатура.ЕдиницаИзмерения.Код
		|	КОНЕЦ,
		|	РеализацияТоваровУслугАгентскиеУслуги.Номенклатура.ЕдиницаИзмерения,
		|	РеализацияТоваровУслугАгентскиеУслуги.СтавкаНДС,
		|	РеализацияТоваровУслугАгентскиеУслуги.СуммаНДС,
		|	1,
		|	0,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслуг.СуммаВключаетНДС
		|			ТОГДА РеализацияТоваровУслугАгентскиеУслуги.Сумма
		|		ИНАЧЕ РеализацияТоваровУслугАгентскиеУслуги.Сумма + РеализацияТоваровУслугАгентскиеУслуги.СуммаНДС
		|	КОНЕЦ
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.АгентскиеУслуги КАК РеализацияТоваровУслугАгентскиеУслуги
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ПО РеализацияТоваровУслугАгентскиеУслуги.Ссылка = РеализацияТоваровУслуг.Ссылка
		|ГДЕ
		|	РеализацияТоваровУслугАгентскиеУслуги.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РеализацияТоваровУслуг.ВалютаДокумента,
		|	РеализацияТоваровУслуг.КурсВзаиморасчетов,
		|	РеализацияТоваровУслуг.Грузополучатель,
		|	РеализацияТоваровУслуг.Грузоотправитель,
		|	РеализацияТоваровУслуг.СуммаВключаетНДС
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка = &Ссылка";
		
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	Запрос.УстановитьПараметр("КодЕдиницыИзмеренияПоУмолчанию", "643");
	Запрос.УстановитьПараметр("НаименованиеЕдиницыИзмеренияПоУмолчанию", "шт");
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаТоваров   = РезультатЗапроса[0].Выгрузить();
	РеквизитыШапки   = РезультатЗапроса[1].Выбрать();
	РеквизитыШапки.Следующий();

	ТаблицаТоваров.Колонки.Добавить("ДополнительныеРеквизиты");
	
	
	Для Каждого Строка из ТаблицаТоваров Цикл
		
		Строка.БазоваяЕдиницаКод = СокрЛП(Строка.БазоваяЕдиницаКод);
		Строка.УпаковкаКод = СокрЛП(Строка.УпаковкаКод);

		Строка.ИД = ПолучитьИДНоменклатуры(Строка.Номенклатура, Строка.Характеристика, Строка.Упаковка);
		Строка.Наименование = ПолучитьНаименованиеНоменклатуры(Строка.Наименование, Строка.БазоваяЕдиницаНаименование);
		
		// пример передачи дополнительной информации по товару
		ДополнительныеРеквизиты = Новый Структура;
		МассивДопЗначений = Новый Массив();
		МассивДопЗначений.Добавить(Строка.КодТовара);
		ДополнительныеРеквизиты.Вставить("КодТовара", МассивДопЗначений);
		Строка.ДополнительныеРеквизиты = ДополнительныеРеквизиты;
		
	КонецЦикла;
	
	ПроверитьЗаполнениеТабличнойЧасти(ТаблицаТоваров);
	
	СтруктураПараметров.Вставить("Исполнитель", СтруктураЭД.Отправитель);
	СтруктураПараметров.Вставить("ВерсияСхемы", "4.02");
	СтруктураПараметров.Вставить("ТаблицаТоваров", ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация", СтруктураЭД.Организация);
	СтруктураПараметров.Вставить("Контрагент", СтруктураЭД.Контрагент);
	СтруктураПараметров.Вставить("Ид", СтруктураЭД.НомерЭД);
	СтруктураПараметров.Вставить("ДатаФормирования", ТекущаяДатаСеанса());
	СтруктураПараметров.Вставить("Номер", СтруктураЭД.НомерДокументаОтправителя);
	СтруктураПараметров.Вставить("Дата", СтруктураЭД.ДатаДокументаОтправителя);
	СтруктураПараметров.Вставить("Сумма", ТаблицаТоваров.Итог("СуммаСНДС"));
	СтруктураПараметров.Вставить("ВидЭД", СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД", СтруктураЭД.НаправлениеЭД);
	Если ЗначениеЗаполнено(РеквизитыШапки.Грузоотправитель) Тогда
		СтруктураПараметров.Вставить("Грузоотправитель", РеквизитыШапки.Грузоотправитель);
		СтруктураПараметров.Вставить("ТипГрузоотправителя", "Контрагент");
	Иначе	
		СтруктураПараметров.Вставить("Грузоотправитель", СтруктураЭД.Организация);
		СтруктураПараметров.Вставить("ТипГрузоотправителя", "Организация");
	КонецЕсли;
	Если ЗначениеЗаполнено(РеквизитыШапки.Грузополучатель) Тогда
		СтруктураПараметров.Вставить("Грузополучатель", РеквизитыШапки.Грузополучатель);
	Иначе
		СтруктураПараметров.Вставить("Грузополучатель",	СтруктураЭД.Контрагент);
	КонецЕсли;
	СтруктураПараметров.Вставить("Валюта", РеквизитыШапки.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс", РеквизитыШапки.КурсВзаиморасчетов);
	СтруктураПараметров.Вставить("ЦенаВключаетНДС", РеквизитыШапки.СуммаВключаетНДС);
	
КонецПроцедуры

// Устаревшая процедура, будет удалена при переходе на новую редакцию БЭД.
// Подготавливает данные для электронного документа типа АктВыполненияРабот.
//
// Параметры: 
// СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
// СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоАктуВыполненныхРабот(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Поиск и создание документов

// Сохраняет данные из электронного документа в объект ИБ.
//
// Параметры:
//  СтрокаДляЗагрузки - строка параметров для загрузки,
//  ДеревоРазбора     - ДеревоЗначений, структура параметров документа ИБ.
//  СсылкаНаВладельца - Ссылка на объект ИБ, владельца электронного документа.
//
// Возвращаемое значение:
//  НайденныйОбъект - ссылка объекта.
//
Функция СохранитьДанныеОбъектаВБД(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина) Экспорт
	
	НайденныйОбъект = Неопределено;
	
	Если СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.ТОРГ12
		ИЛИ СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
		ИЛИ СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
		ИЛИ СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда

		ВидОперации = ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "ВидОперации", Истина, ДеревоРазбора);	
		Если ВидОперации = Перечисления.ВидыОперацийЭД.Исправление Тогда
			НайденныйОбъект = НайтиСоздатьКорректировкуПоступления(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца);
		Иначе
			НайденныйОбъект = НайтиСоздатьПоступлениеТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца);
		КонецЕсли;
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда

		НайденныйОбъект = НайтиСоздатьКорректировкуПоступления(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца);
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.СчетФактура
		ИЛИ СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
		
		НайденныйОбъект = НайтиСоздатьСчетФактуру(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца);
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
		
		НайденныйОбъект = НайтиСоздатьСчетНаОплатуПоставщика(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца);

	ИначеЕсли ВРег(СтрокаДляЗагрузки.ВидЭД) = ВРег("РеквизитыОрганизации") Тогда
		
		НайденныйОбъект = ЭлектронныеДокументыБП.НовыйКонтрагент(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца);	
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭд = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара Тогда
		
		НайденныйОбъект = НайтиСоздатьОтчетКомиссионера(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца);	
		
	КонецЕсли;
	
	Возврат НайденныйОбъект;
	
КонецФункции

// Создает объект в ИБ по дереву параметров.
//
// Параметры:
//  СтрокаОбъекта - Структура параметров записываемого объекта,
//  ДеревоРазбора - ДеревоЗначений, результат разбора электронного документа.
//
// Возвращаемое значение:
//  НовыйЭлемент - ссылка на новый элемент в информационной базе.
//
Функция СоздатьОбъектВБД(СтрокаОбъекта, ДеревоРазбора) Экспорт
	
	НовЭл = Неопределено;
	Если СтрокаОбъекта.ОписаниеТипа = "СправочникСсылка.НоменклатураПоставщиков" Тогда
		НовЭл = СоздатьПерезаполнитьНоменклатуруПоставщика(СтрокаОбъекта, ДеревоРазбора);
	КонецЕсли;
	
	Возврат НовЭл;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Создание элементов справочников

// Находит ссылку на объект ИБ по типу, ИД и дополнительным реквизитам
// 
// Параметры:
//  ТипОбъекта - Строка, идентификатор типа объекта, который необходимо найти,
//  ИДОбъекта - Строка, идентификатор объекта заданного типа,
//  ДополнительныеРеквизиты - Структура, набор дополнительных полей объекта для поиска.
//
Функция НайтиСсылкуНаОбъект(ТипОбъекта, ИдОбъекта = "", ДополнительныеРеквизиты = Неопределено, ИДЭД = Неопределено) Экспорт
	
	Результат = Неопределено;

	Если ТипОбъекта = "Валюты" ИЛИ ТипОбъекта = "Банки" Тогда
		Результат = НайтиСсылкуНаОбъектПоРеквизиту(ТипОбъекта, "Код", ИдОбъекта);
	ИначеЕсли ТипОбъекта = "ЕдиницыИзмерения" Тогда
		Результат = НайтиСсылкуНаОбъектПоРеквизиту("КлассификаторЕдиницИзмерения", "Код", ИдОбъекта);
	ИначеЕсли (ТипОбъекта = "Контрагенты" ИЛИ ТипОбъекта = "Организации") И ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
		ПараметрПоиска = "";
		ИНН = "";
		КПП = "";
		Если ДополнительныеРеквизиты.Свойство("ИНН")
			И ЗначениеЗаполнено(ДополнительныеРеквизиты.ИНН) Тогда 
			ИНН = ДополнительныеРеквизиты.ИНН;
		КонецЕсли;
		Если ДополнительныеРеквизиты.Свойство("КПП")
			И ЗначениеЗаполнено(ДополнительныеРеквизиты.КПП) Тогда 
			КПП = ДополнительныеРеквизиты.КПП;
		КонецЕсли;
		Если ЗначениеЗаполнено(ИНН) Тогда
			Результат = СсылкаНаОбъектПоИННКПП(ТипОбъекта, ИНН, КПП); 
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Результат) И ДополнительныеРеквизиты.Свойство("Наименование", ПараметрПоиска) Тогда
			Результат = НайтиСсылкуНаОбъектПоРеквизиту(ТипОбъекта, "Наименование", ПараметрПоиска); 
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = "НоменклатураПоставщиков" И ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
		Контрагент = "";
		ПараметрПоиска = "";
		Если ДополнительныеРеквизиты.Свойство("Идентификатор", ПараметрПоиска)
			И ДополнительныеРеквизиты.Свойство("Владелец", Контрагент) Тогда // есть Идентификатор
			Результат = НайтиСсылкуНаНоменклатуруПоставщикаПоИдентификатору(ПараметрПоиска, Контрагент, "НоменклатураПоставщика");
		КонецЕсли;
	ИначеЕсли ТипОбъекта = "Номенклатура" И ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
		ПараметрПоиска = "";
		Контрагент = "";
		Если ДополнительныеРеквизиты.Свойство("Идентификатор", ПараметрПоиска)
			И ДополнительныеРеквизиты.Свойство("Владелец", Контрагент) Тогда // по Идентификатору
			Результат = НайтиСсылкуНаНоменклатуруПоставщикаПоИдентификатору(ПараметрПоиска, Контрагент);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Результат) И ДополнительныеРеквизиты.Свойство("Артикул", ПараметрПоиска) Тогда // по Коду номенклатуры своей компании
			Результат = НайтиСсылкуНаОбъектПоРеквизиту(ТипОбъекта, "Код", ПараметрПоиска);
		КонецЕсли;
	ИначеЕсли ТипОбъекта = "ВидыКонтактнойИнформации" Тогда
		Попытка 
			Результат = Справочники.ВидыКонтактнойИнформации[ИдОбъекта];
		Исключение
			Результат = Неопределено;
		КонецПопытки;
	ИначеЕсли (ТипОбъекта = "БанковскиеСчетаОрганизаций" Или ТипОбъекта = "БанковскиеСчетаКонтрагентов") И ЗначениеЗаполнено(ДополнительныеРеквизиты)Тогда
		Владелец = "";
		Если ДополнительныеРеквизиты.Свойство("Владелец", Владелец) Тогда
			ИмяПрикладногоСправочника = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьИмяПрикладногоСправочника(ТипОбъекта);
			Результат = НайтиСсылкуНаОбъектПоРеквизиту(ИмяПрикладногоСправочника, "НомерСчета", ИдОбъекта, Владелец);
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = "СтраныМира" Тогда
		Результат = НайтиСсылкуНаОбъектПоРеквизиту("СтраныМира", "Код", ИдОбъекта);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Находит ссылку на справочник по переданному реквизиту.
//
// Параметры:
//  ИмяСправочника - Строка, имя справочника, объект которого надо найти,
//  ИмяРеквизита - Строка, имя реквизита, по которому будет проведен поиск,
//  ЗначРеквизита - произвольное значение, значение реквизита, по которому будет проведен поиск,
//  Владелец - Ссылка на владельца для поиска в иерархическом справочнике.
//
Функция НайтиСсылкуНаОбъектПоРеквизиту(ИмяСправочника, ИмяРеквизита, ЗначРеквизита, Владелец = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	ОбъектМетаданных = Метаданные.Справочники[ИмяСправочника];
	Если НЕ ОбщегоНазначения.ЭтоСтандартныйРеквизит(ОбъектМетаданных.СтандартныеРеквизиты, ИмяРеквизита)
		И НЕ ОбъектМетаданных.Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
		
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИскСправочник.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник." + ИмяСправочника + " КАК ИскСправочник
	|ГДЕ
	|	ИскСправочник." + ИмяРеквизита + " = &ЗначРеквизита";
	
	Если ЗначениеЗаполнено(Владелец) Тогда
		Запрос.Текст = Запрос.Текст + " И ИскСправочник.Владелец = &Владелец";
		Запрос.УстановитьПараметр("Владелец", Владелец);
	КонецЕсли;
	Запрос.УстановитьПараметр("ЗначРеквизита", ЗначРеквизита);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Находит элемент справочника по реквизитам ИНН и КПП
// Если элемент не найден возвращаем Неопределено
// Параметры:
//  ТипОбъекта - Строка, имя справочника в метаданных;
//  ИНН - строка;
//  КПП - строка;
//  Организация - Организация, ссылка на элемент справочника организации
//
// Возвращаемое значение:
//  Результат - ссылка на справочник или неопределено
//
Функция СсылкаНаОбъектПоИННКПП(ТипОбъекта, ИНН, КПП, Организация = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник." + ТипОбъекта + " КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН
	|	И НЕ Контрагенты.ПометкаУдаления";
	Если ЗначениеЗаполнено(КПП) Тогда
		ТекстЗапроса = ТекстЗапроса + " И
			|	Контрагенты.КПП = &КПП";
		Запрос.УстановитьПараметр("КПП", КПП);
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ИНН", ИНН);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Заполняет реквизиты объекта данными из струкутры реквизитов.
//
// Параметры:
//  СтруктураРеквизитов - струтура - перечень значений реквизитов
//
// Возвращаемое значение:
//  Контрагент.Ссылка - ссылка на справочник контрагентов
//
Функция ЗаполнитьРеквизитыКонтрагента(СтруктураРеквизитов) Экспорт
	
	Результат = Неопределено;
	
	Если ЗначениеЗаполнено(СтруктураРеквизитов.Контрагент) Тогда
		Контрагент = СтруктураРеквизитов.Контрагент.ПолучитьОбъект();
	Иначе
		Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
		Контрагент.УстановитьСсылкуНового(Справочники.Контрагенты.ПолучитьСсылку());
	КонецЕсли;
	Контрагент.Наименование = СтруктураРеквизитов.Наименование;
	Контрагент.НаименованиеПолное = СтруктураРеквизитов.Наименование;
	ИНН_КПП = СтруктураРеквизитов.ИНН_КПП;
	Контрагент.ИНН = Сред(ИНН_КПП,1,Найти(ИНН_КПП,"/")-1);
	Контрагент.КПП = Сред(ИНН_КПП,Найти(ИНН_КПП,"/")+1);
	Если СтрДлина(СокрЛП(Контрагент.ИНН))>10 Тогда
		Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	Иначе
		Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	КонецЕсли;
	
	Если Контрагент.ЭтоНовый() Тогда
		Контрагент.ГоловнойКонтрагент = Контрагент.ПолучитьСсылкуНового();
		Контрагент.СтранаРегистрации = Справочники.СтраныМира.Россия;
	КонецЕсли;
	Контрагент.Записать();
	
	Возврат Контрагент.Ссылка;
	
КонецФункции

// Заполняет структуру реквизитов товара
//
// Параметры:
//  РеквизитыНоменклатуры - Структура, содержащая параметры поиска 
//  СтруктураВозврата -Структура содержащая ссылки на номенклатуру, характеристику, упаковку
//  ИД - идентификатор обмена ЭД
//
Процедура ПолучитьРеквизитыТовара(РеквизитыНоменклатуры, СтруктураВозврата, ИД = Неопределено) Экспорт
	
	ПараметрПоиска = "";
	НоменклатураПоставщика = Неопределено;
	Если РеквизитыНоменклатуры.Свойство("НоменклатураПоставщика", НоменклатураПоставщика) Тогда
		СтруктураВозврата.Номенклатура = НоменклатураПоставщика.Номенклатура;
	Иначе
		СтруктураВозврата.Номенклатура = Неопределено;
	КонецЕсли;
	
	СтруктураВозврата.Характеристика = Неопределено;
	СтруктураВозврата.Упаковка = Неопределено;
	
КонецПроцедуры

// Возвращает ИД контрагента.
//
// Параметры
//  Контрагент – ссылка на контрагента (Организация или Контрагент)
//  ВидКонтрагента - строка, определяющая вид контрагента
//
// Возвращаемое значение:
// ИдКонтрагента - строка - значение ИдКонтрагента
//
Функция ПолучитьИДКонтрагента(Контрагент, ВидКонтрагента) Экспорт
	
	ИдКонтрагента = "";
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат ИдКонтрагента;
	КонецЕсли;
	
	Если ВРег(ВидКонтрагента) = ВРег("Организация") Тогда
		ИдКонтрагента = Контрагент.ИНН + "_" + Контрагент.КПП;
	ИначеЕсли ВРег(ВидКонтрагента) = ВРег("Контрагент") Тогда
		ИдКонтрагента = Контрагент.ИНН + "_" + Контрагент.КПП;
	КонецЕсли;
	
	Возврат ИдКонтрагента;
	
КонецФункции

// Формирует тест запроса для получения таблицы сопоставления номенклатуры
//
// Параметры:
//  ТекстЗапроса - Строка - текст запроса
//
Процедура ТекстЗапросаСопоставленияНоменклатуры(ТекстЗапроса) Экспорт
	
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаИнформацияОТоваре.Ид КАК Идентификатор,
		|	ТаблицаИнформацияОТоваре.Артикул КАК АртикулНоменклатурыКонтрагента,
		|	ТаблицаИнформацияОТоваре.Наименование КАК НаименованиеНоменклатурыКонтрагента,
		|	ТаблицаИнформацияОТоваре.БазоваяЕдиницаКод КАК БазоваяЕдиницаКод,
		|	ТаблицаИнформацияОТоваре.Описание КАК Описание
		|ПОМЕСТИТЬ ТаблицаИнформацияОТоваре
		|ИЗ
		|	&ТаблицаИнформацияОТоваре КАК ТаблицаИнформацияОТоваре
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаИнформацияОТоваре.Идентификатор,
		|	ТаблицаИнформацияОТоваре.АртикулНоменклатурыКонтрагента,
		|	ТаблицаИнформацияОТоваре.НаименованиеНоменклатурыКонтрагента,
		|	ЕСТЬNULL(ЕдиницыИзмерения.Ссылка, НЕОПРЕДЕЛЕНО) КАК ЕдиницаНоменклатурыКонтрагента,
		|	ТаблицаИнформацияОТоваре.Описание
		|ИЗ
		|	ТаблицаИнформацияОТоваре КАК ТаблицаИнформацияОТоваре
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
		|		ПО ТаблицаИнформацияОТоваре.Идентификатор = НоменклатураПоставщиков.Идентификатор
		|			И (НоменклатураПоставщиков.Владелец = &Контрагент)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторЕдиницИзмерения КАК ЕдиницыИзмерения
		|		ПО ТаблицаИнформацияОТоваре.БазоваяЕдиницаКод = ЕдиницыИзмерения.Код
		|ГДЕ
		|	(НоменклатураПоставщиков.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|			ИЛИ НоменклатураПоставщиков.Номенклатура ЕСТЬ NULL )";
	
КонецПроцедуры

// Сохраняет результат ручного сопоставления Номенклатуры в БД
//
// Параметры:
//  ТаблицаСопоставления -таблицаЗначений, содержащая данные сопоставления
//  Контрагент - СправочникСсылка.Контрагенты
//  Отказ - Булево, признак ошибки
//
Процедура ЗаписатьСопоставлениеНоменклатуры(ТаблицаСопоставления, Контрагент, Отказ) Экспорт
	
	Для Каждого Запись из ТаблицаСопоставления Цикл
		Если ЗначениеЗаполнено(Запись.Номенклатура) Тогда
			СпрСсылка = НайтиСсылкуНаНоменклатуруПоставщикаПоИдентификатору(Запись.Идентификатор, Контрагент, "НоменклатураПоставщика");
			Если ЗначениеЗаполнено(СпрСсылка) Тогда
				СпрОбъект = СпрСсылка.ПолучитьОбъект();
			Иначе
				СпрОбъект = Справочники.НоменклатураПоставщиков.СоздатьЭлемент();
				СпрОбъект.Наименование  = Запись.НаименованиеНоменклатурыКонтрагента;
				СпрОбъект.Владелец      = Контрагент;
				СпрОбъект.Артикул       = Запись.АртикулНоменклатурыКонтрагента;
				СпрОбъект.Идентификатор = Запись.Идентификатор;
			КонецЕсли;
			СпрОбъект.Номенклатура = Запись.Номенклатура;
			Попытка
				СпрОбъект.Записать();
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),,,,Отказ);
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Сопоставление номенклатуры

// Возвращает структуру для открытия формы сопоставления номенклатуры
//
// Параметры:
//  СсылкаНаЭД - СправочникСсылка.ЭДПрисоединенныеФайлы
//
// Возвращаемое значение:
//  Структура, содержащая ИмяФормы и ПараметрыОткрытияФормы
//
Функция ПолучитьПараметрыФормыСопоставленияНоменклатуры(СсылкаНаЭД) Экспорт
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ИмяФормы", "ОбщаяФорма.СопоставлениеДанныхПоНоменклатуре");
	ПараметрыОткрытияФормы = Новый Структура("ЭлектронныйДокумент, НеОткрыватьФормуПриОтсутствииНесопоставленнойНоменклатуры",
		СсылкаНаЭД, Истина);
	СтруктураПараметров.Вставить("ПараметрыОткрытияФормы", ПараметрыОткрытияФормы);
	
	Возврат СтруктураПараметров
	
КонецФункции

// Производит заполнение реквизитов формы переданными значениями 
//
// Параметры:
//  ДанныеФормы - Данные управляемой формы;
//  ЗначениеЗаполнения - ссылка данные во временном хранилище.
//
Процедура ЗаполнитьИсточник(ДанныеФормы, ЗначениеЗаполнения) Экспорт
	
	ДанныеФормы.ЗаполнитьТоварыИзВременногоХранилищаСервер(ЗначениеЗаполнения);
	ДанныеФормы.ОбновитьОтображениеДанных();
	
КонецПроцедуры

// Заполняет адрес хранилища с таблицей значений - каталога товаров
//
// Параметры:
//  АдресВоВременномХранилище - адрес хранения католога товаров;
//  ИдентификаторФормы - уникальный  идентификатор формы, вызвавшей функцию.
//
Процедура ПоместитьКаталогТоваровВоВременноеХранилище(АдресВоВременномХранилище, ИдентификаторФормы) Экспорт
	
	
	
КонецПроцедуры

// Получает значение перечисления по имени перечисления и представлению в библиотеке.
// 
// Параметры:
//  ИмяПеречисления - Строка, наименование перечисления.
//  ПредставлениеПеречисления - Строка, наименование значения перечисления.
//  НайденноеЗначение - значение искомого перечисления.
//
Процедура ПолучитьЗначениеПеречисления(ИмяПеречисления, ПредставлениеПеречисления, НайденноеЗначение) Экспорт
	
	Если ИмяПеречисления = "СтавкиНДС" Тогда
		НайденноеЗначение = ПолучитьСтавкуНДСПеречислением(ПредставлениеПеречисления);
	ИначеЕсли ИмяПеречисления = "ЮридическоеФизическоеЛицо" Тогда
		Если ПредставлениеПеречисления = "ФизЛицо" Тогда
			НайденноеЗначение = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		Иначе
			НайденноеЗначение = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Получает данные о физическом (юридическом) лице по ссылке.
//
// Параметры:
//  ЮрФизЛицо - Ссылка на элемент справочника, по которому надо получить данные.
//
Функция ПолучитьДанныеЮрФизЛица(ЮрФизЛицо, ДатаСведений = Неопределено, БанковскийСчет = Неопределено) Экспорт
	
	Дата = ?(ДатаСведений = Неопределено, ТекущаяДатаСеанса(), ДатаСведений);
	
	ДанныеЮрФизЛица = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(ЮрФизЛицо, Дата, БанковскийСчет);
	ТипЮрФизЛица = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ЮрФизЛицо, "ЮридическоеФизическоеЛицо");
	
	Если ТипЮрФизЛица = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		Если ТипЗнч(ЮрФизЛицо)=Тип("СправочникСсылка.Организации") Тогда
			ИП = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ЮрФизЛицо, "ИндивидуальныйПредприниматель");
			ФИО = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ИП, "Наименование");
		Иначе
			ФИО = ДанныеЮрФизЛица.ПолноеНаименование;
			Если ВРЕГ(Лев(ФИО,2))="ИП" Тогда
				ФИО = Прав(ФИО, СтрДлина(ФИО)-2);
			ИначеЕсли ВРЕГ(Лев(ФИО, СтрДлина("Индивидуальный предприниматель")))="ИНДИВИДУАЛЬНЫЙ ПРЕДПРИНИМАТЕЛЬ" Тогда
				ФИО = Прав(ФИО, СтрДлина(ФИО)-СтрДлина("Индивидуальный предприниматель"));
			КонецЕсли;
			ФИО = СтрЗаменить(ФИО, """","");
			ФИО = СтрЗаменить(ФИО, "'","");
			ФИО = СокрЛП(ФИО);
		КонецЕсли;
		
		ЗаполнитьФИОиДолжность(ДанныеЮрФизЛица, ФИО);
		ДанныеЮрФизЛица.ПолноеНаименование      = ФИО;
	КонецЕсли;
	
	ДанныеЮрФизЛица.Вставить("ОфициальноеНаименование", ДанныеЮрФизЛица.ПолноеНаименование);
	ДанныеЮрФизЛица.Вставить("ТипЮрФизЛица", ТипЮрФизЛица);
	ДанныеЮрФизЛица.Вставить("ЮрФизЛицоСсылка", ЮрФизЛицо.Ссылка);
	
	Возврат ДанныеЮрФизЛица;
	
КонецФункции

// Получает данные свидетельства о регистрации ИП по ссылке.
//
// Параметры:
//  ИП - Ссылка на элемент справочника - по которому нужно получить данные;
//  Сведения - Строка - сведения о ругистрации индивидуального предпринимателя.
//
Процедура ДанныеСвидетельстваОРегистрацииИП(ИП, Сведения) Экспорт
	
	Если ТипЗнч(ИП) = Тип("СправочникСсылка.Организации") Тогда
		Сведения = "Свидетельство о регистрации № "+СокрЛП(ИП.СвидетельствоСерияНомер)+" от "+Формат(ИП.СвидетельствоДатаВыдачи,"ДФ=dd.MM.yyyy");
	Иначе
		Сведения = "";
	КонецЕсли;
	
КонецПроцедуры

// Получает контактную информацию организации по ссылке
//
// Параметры:
//  Организация - ссылка на элемент справочника Организации, по которой нужно получить данные.
//
Функция ПолучитьКонтактнуюИнформацию(Организация) Экспорт
	
	//В запросе реквизит Представление присваивается полю Значение, т.к в схеме XDTO поле Значение обязательно к заполнению,
	//а для адреса электронной почты реквизит Значение пустой
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОрганизацииКонтакнтаяИнформация.Вид,
	|	ВЫРАЗИТЬ(ОрганизацииКонтакнтаяИнформация.Представление КАК СТРОКА(1000)) КАК Значение,
	|	ВЫРАЗИТЬ(ОрганизацииКонтакнтаяИнформация.Представление КАК СТРОКА(1000)) КАК Комментарий
	|ИЗ
	|	Справочник.Организации.КонтактнаяИнформация КАК ОрганизацииКонтакнтаяИнформация
	|ГДЕ
	|	ОрганизацииКонтакнтаяИнформация.Ссылка = &Объект
	|	И (ОрганизацииКонтакнтаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailОрганизации)
	|			ИЛИ ОрганизацииКонтакнтаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонОрганизации)
	|			ИЛИ ОрганизацииКонтакнтаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФаксОрганизации))";
	
	Запрос.УстановитьПараметр("Объект", Организация);
	
	ТабЗн = Запрос.Выполнить().Выгрузить();
	Для Каждого стр Из ТабЗн Цикл
		стр.Значение    = СокрП(стр.Значение);
		стр.Комментарий = СокрП(стр.Комментарий);
	КонецЦикла;
	
	Возврат ТабЗн;
	
КонецФункции

// Возвращает название региона по коду
//
// Параметры:
//  КодРегиона - Строка, содержащая двухсимвольный код региона
//
// Возвращаемое значение:
//  Строка - название региона.
//
Функция НазваниеРегиона(КодРегиона) Экспорт
	
	Если НЕ ЗначениеЗаполнено(КодРегиона) Тогда
		Возврат("");
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("КодРегиона", Число(КодРегиона));
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	АдресныеОбъекты.Наименование,
	|	АдресныеОбъекты.Сокращение
	|ИЗ
	|	РегистрСведений.АдресныеОбъекты КАК АдресныеОбъекты
	|ГДЕ
	|	АдресныеОбъекты.Уровень = 1
	|	И АдресныеОбъекты.КодСубъектаРФ = &КодРегиона";
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат(СокрЛП(Выборка.Наименование+" "+Выборка.Сокращение));
	КонецЕсли;
	
	Возврат КодРегиона;
	
КонецФункции

// Получает структуру, содержащую информацию о юридическом адресе контрагента.
//
// Параметры:
//  СтруктураАдреса     - структура - содержит ссылки на элементы справочника;
//  СтруктураПараметров - структура - содержит ссылки на элементы справочника;
//  ВидКонтрагента      - строка - имя метаданных справочника;
//  ВидАдреса           - Строка - "Факт" или "Юр";
//  ТекстОшибки         - Строка - описание ошибки;
//
Процедура ПолучитьАдресСтруктурой(СтруктураАдреса, СтруктураПараметров, ВидКонтрагента, ВидАдреса, ТекстОшибки) Экспорт
	
	СтруктураАдреса.Вставить("АдресРФ", Истина);
	СтруктураАдреса.Вставить("КодСтр", "");
	СтруктураАдреса.Вставить("Индекс", "");
	СтруктураАдреса.Вставить("КодРегион", "");
	СтруктураАдреса.Вставить("Район", "");
	СтруктураАдреса.Вставить("Город", "");
	СтруктураАдреса.Вставить("НаселПункт", "");
	СтруктураАдреса.Вставить("Улица", "");
	СтруктураАдреса.Вставить("Дом", "");
	СтруктураАдреса.Вставить("Корпус", "");
	СтруктураАдреса.Вставить("Кварт", "");
	СтруктураАдреса.Вставить("АдрТекст", "");
	
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров[ВидКонтрагента]) Тогда
		Возврат;
	КонецЕсли; 
	
	Если ТипЗнч(СтруктураПараметров[ВидКонтрагента]) = Тип("СправочникСсылка.Организации") Тогда
		Если ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтруктураПараметров[ВидКонтрагента], "ЮридическоеФизическоеЛицо") = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			Объект = СтруктураПараметров[ВидКонтрагента];
			ВидКонтактнойИнформации = ?(ВидАдреса = "Юр", Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
			ИмяСправочника = "Организации";
		Иначе
			Объект = ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтруктураПараметров[ВидКонтрагента], "ИндивидуальныйПредприниматель");
			ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица;
			ИмяСправочника = "ФизическиеЛица";
		КонецЕсли;
	Иначе
		Объект = СтруктураПараметров[ВидКонтрагента];
		ВидКонтактнойИнформации = ?(ВидАдреса = "Юр", Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
		ИмяСправочника = "Контрагенты";
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактнаяИнформация.ЗначенияПолей
		|ИЗ
		|	Справочник." + ИмяСправочника + ".КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Ссылка = &Ссылка
		|	И КонтактнаяИнформация.Вид = &Вид";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", Объект);
	Запрос.УстановитьПараметр("Вид",    ВидКонтактнойИнформации);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		АдресСтруктурой = УправлениеКонтактнойИнформацией.ПредыдущаяСтруктураКонтактнойИнформацииXML(Выборка.ЗначенияПолей, ВидКонтактнойИнформации);
		
		Страна = ?(АдресСтруктурой.Свойство("Страна"), Справочники.СтраныМира.НайтиПоНаименованию(АдресСтруктурой.Страна), Справочники.СтраныМира.Россия);
		Если Страна <> Справочники.СтраныМира.ПустаяСсылка() Тогда
			СтруктураАдреса.Вставить("КодСтр", ОбщегоНазначения.ПолучитьЗначениеРеквизита(Страна, "Код"));
			СтруктураАдреса.Вставить("АдресРФ", Страна = Справочники.СтраныМира.Россия);
		Иначе
			СтруктураАдреса.Вставить("КодСтр", "");
			СтруктураАдреса.Вставить("АдресРФ", Ложь);
		КонецЕсли;
		
		СтруктураАдреса.Вставить("АдрТекст", АдресСтруктурой.Представление);
		
		КодРегиона = Неопределено;
		АдресСтруктурой.Свойство("КодРегиона", Формат(КодРегиона, "ЧЦ=2; ЧДЦ=; ЧВН=; ЧГ=0"));
		Если НЕ ЗначениеЗаполнено(КодРегиона)
			И АдресСтруктурой.Свойство("Регион") Тогда
			АдресСтруктурой.Вставить("КодРегиона", РегламентированнаяОтчетностьВызовСервера.КодРегионаПоНазванию(АдресСтруктурой.Регион));
		КонецЕсли;
		
		АдресСтруктурой.Свойство("Индекс",          СтруктураАдреса.Индекс);
		АдресСтруктурой.Свойство("КодРегиона",      СтруктураАдреса.КодРегион);
		АдресСтруктурой.Свойство("Район",           СтруктураАдреса.Район);
		АдресСтруктурой.Свойство("Город",           СтруктураАдреса.Город);
		АдресСтруктурой.Свойство("НаселенныйПункт", СтруктураАдреса.НаселПункт);
		АдресСтруктурой.Свойство("Улица",           СтруктураАдреса.Улица);
		АдресСтруктурой.Свойство("Дом",             СтруктураАдреса.Дом);
		АдресСтруктурой.Свойство("Корпус",          СтруктураАдреса.Корпус);
		АдресСтруктурой.Свойство("Квартира",        СтруктураАдреса.Кварт);
	КонецЕсли;
	
КонецПроцедуры

// Получает адрес электронной почты контрагента.
//
// Параметры:
//  Контрагент - справочник - ссылка на элемент справочника контрагенты,
//                            адрес которого надо получить.
//
// Возвращаемое значение:
//  АдресЭП - адрес электронной почтц.
//
Функция АдресЭлектроннойПочтыКонтрагента(Контрагент) Экспорт
	
	Если Контрагент  <> Неопределено Тогда
		
		ТипыКИ = Новый Массив;
		ТипыКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		
		Объекты = Новый Массив();
		Объекты.Добавить(Контрагент);
		АдресаПолучателя = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(Объекты, ТипыКИ);
		
		Если АдресаПолучателя.Количество() > 0 Тогда
			
			Возврат АдресаПолучателя[0].Представление;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Получает печатный номер документа.
//
// Параметры:
//  СсылкаНаОбъект - документссылка - ссылка на документ информационной базы.
//
// Возвращаемое значение:
//  НомерОбъекта - номер документа.
//
Функция ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект) Экспорт
	
	Возврат ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(
		ОбщегоНазначения.ПолучитьЗначениеРеквизита(СсылкаНаОбъект, "Номер"), Истина, Ложь);
	
КонецФункции

// Получает банковские счета.
//
// Параметры:
//  Организация - СправочникСсылка.Организация - ссылка на организацию.
//  Банк - СправочникСсылка - ссылка на элемент справочника с банками
//
// Возвращаемое значение:
//  Таблица - таблица значений с перечнем банковских счетов.
//
Функция ПолучитьБанковскиеСчета(Организация, Банк = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	БанковскиеСчета.Ссылка КАК БанковскийСчет
	               |ИЗ
	               |	Справочник.БанковскиеСчета КАК БанковскиеСчета
	               |ГДЕ
	               |	БанковскиеСчета.Владелец = &Организация";
	Если ЗначениеЗаполнено(Банк) Тогда
		Запрос.Текст = Запрос.Текст + "
	               |	И БанковскиеСчета.Банк = &Банк";
	КонецЕсли;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Банк", Банк);
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Возврат Таблица;
	
КонецФункции

// Получает банковские реквизиты.
//
// Параметры:
//  МассивСчетов - массив - список банковских счетов.
//
// Возвращаемое значение:
//  Таблица - перечень банковских реквизитов.
//
Функция ПолучитьБанковскиеРеквизиты(МассивСчетов) Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БанковскиеСчета.Ссылка КАК Ссылка,
	|	БанковскиеСчета.НомерСчета КАК РасчетныйСчет,
	|	ЕСТЬNULL(БанковскиеСчета.Банк.КоррСчет, """") КАК КорреспондентскийСчет,
	|	ЕСТЬNULL(БанковскиеСчета.Банк.Код, """") КАК БИК,
	|	ЕСТЬNULL(БанковскиеСчета.Банк.Наименование, """") КАК Банк,
	|	ЕСТЬNULL(БанковскиеСчета.БанкДляРасчетов.Наименование, """") КАК БанкДляРасчетов,
	|	ЕСТЬNULL(БанковскиеСчета.БанкДляРасчетов.Код, """") КАК БанкДляРасчетовБИК,
	|	ЕСТЬNULL(БанковскиеСчета.БанкДляРасчетов.КоррСчет, """") КАК БанкДляРасчетовКоррСчет
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Ссылка В(&МассивСчетов)";
	Запрос.УстановитьПараметр("МассивСчетов", МассивСчетов);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Возврат Таблица;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа со счет-фактурами

// В процедуре выполняется заполнение реквизитов (дата выставления, признак выставления,
// дата получения, признак получения) документов счета-фактуры, по ключевым событиям,
// описанным в приказе от 25 апреля 2011 г. N 50н.: получение ПДО, ПДП, ИП, ПДОИП.
//
// Параметры:
//  ВладелецЭД - документ-ссылка, ссылка на документ ИБ счет-фактура выданный/полученный.
//  ЭД - справочник-ссылка, ссылка на элемент справочника ЭДПрисоединенныеФайлы.
//
Процедура ЗаполнитьРеквизитыЭСФ(ВладелецЭД, ЭД) Экспорт
	
	Если ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ Тогда
		
		//  Датой выставления покупателю счета-фактуры в электронном виде по телекоммуникационным
		// каналам связи считается дата поступления файла счета-фактуры Оператору ЭДО от продавца, 
		// указанная в подтверждении (ПДПЭСФ) этого Оператора ЭДО.  ПРИКАЗ от 25 апреля 2011 г. N 50н
		
		ЭСФ = ВладелецЭД.ПолучитьОбъект();
		Если ЭСФ.Дата >= '20130608' Тогда
			ЭСФ.ДатаВыставления = ЭД.ДатаДокументаОтправителя;
			ЭСФ.КодСпособаВыставления = 2;
			ЭСФ.Выставлен = Истина;
			ЭСФ.Записать(?(ЭСФ.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
		КонецЕсли;
		
	ИначеЕсли ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ Тогда
		
		//  Датой получения покупателем счета-фактуры в электронном виде по телекоммуникационным 
		// каналам связи считается дата направления покупателю Оператором ЭДО файла счета-фактуры продавца, 
		// указанная в подтверждении (ПДОЭСФ) Оператора ЭДО.  ПРИКАЗ от 25 апреля 2011 г. N 50н
		
		ЭСФ = ВладелецЭД.ПолучитьОбъект();
		Если КонецДня(ЭСФ.Дата) <> КонецДня(ЭД.ДатаДокументаОтправителя)
			ИЛИ ЭСФ.КодСпособаПолучения <> 2 Тогда
			ДатаДоИзменения = ЭСФ.Дата;
			ЭСФ.Дата = ЭД.ДатаДокументаОтправителя + (ЭСФ.Дата - НачалоДня(ЭСФ.Дата)) ;
			РазностьЛет = Год(ДатаДоИзменения) - Год(ЭД.ДатаДокументаОтправителя);
			Если РазностьЛет <> 0 Тогда
				ЭСФ.УстановитьНовыйНомер();
			КонецЕсли;
			ЭСФ.КодСпособаПолучения = 2;
			ЭСФ.Записать(?(ЭСФ.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
		КонецЕсли;
		
	ИначеЕсли ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ Тогда
		
		// Счет-фактура в электронном виде считается выставленным, если продавцу поступило 
		// соответствующее подтверждение (ПДПЭСФ) Оператора ЭДО, при наличии у продавца извещения покупателя 
		// о получении счета-фактуры (ИПЭСФ), подписанного ЭЦП покупателя и полученного через Оператора ЭДО.
		// ПРИКАЗ от 25 апреля 2011 г. N 50н
		
		СвойстваЭСФ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВладелецЭД, "Выставлен, КодСпособаВыставления, ДатаВыставления");
		ДатаВыставленияЭСФ = ЭлектронныеДокументы.ДатаВыставленияСчетФактуры(ВладелецЭД.Ссылка);
		Если НЕ СвойстваЭСФ.Выставлен ИЛИ СвойстваЭСФ.КодСпособаВыставления <> 2
				ИЛИ СвойстваЭСФ.ДатаВыставления <> ДатаВыставленияЭСФ Тогда
			ЭСФ = ВладелецЭД.ПолучитьОбъект();
			ЭСФ.ДатаВыставления = ДатаВыставленияЭСФ;
			ЭСФ.КодСпособаВыставления = 2;
			ЭСФ.Выставлен = Истина;
			ЭСФ.Записать(?(ЭСФ.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
		КонецЕсли;
		
	ИначеЕсли ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ Тогда
		
		//  Счет-фактура в электронном виде считается полученным покупателем, если ему поступило 
		// соответствующее подтверждение (ПДОЭСФ) Оператора ЭДО, при наличии извещения покупателя 
		// о получении счета-фактуры (ИПЭСФ), подписанного ЭЦП покупателя и подтвержденного (ПДОИПЭСФ)
		// Оператором ЭДО.  ПРИКАЗ от 25 апреля 2011 г. N 50н
		
		СвойстваЭСФ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВладелецЭД, "КодСпособаПолучения");
		Если СвойстваЭСФ.КодСпособаПолучения <> 2 Тогда
			ЭСФ = ВладелецЭД.ПолучитьОбъект();
			ЭСФ.КодСпособаПолучения = 2;
			ЭСФ.Записать(?(ЭСФ.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Устарела. Будет удалена при переходе на новую редакцию БЭД.
// Выполняет заполнение структуры параметров подписанта для ЭД вида извещение о получении.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметровПодписанта - структура - параметры заполнения подписанта электронного документа.
//
Процедура ЗаполнитьСтруктуруДанныхПодписанта(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметровПодписанта) Экспорт
	
	
КонецПроцедуры

// Получает должность подписанта по ФИО.
//
// Параметры:
//  ФИО - строка - фамилия, имя и отчество подписанта,
//  Организация - ссылка - ссылка на элемент справочника организации,
//  Должность - Строка - наименование должности подписанта.
//
Процедура ДолжностьПодписанта(ФИО, Организация, Должность) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("ФИО", ФИО);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ФизическиеЛица.Ссылка
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.Наименование = &ФИО";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДанныеФизЛица = УчетЗарплаты.ДанныеФизическихЛиц(Организация, Выборка.Ссылка, ТекущаяДатаСеанса());
		Если ЗначениеЗаполнено(ДанныеФизЛица.Должность) Тогда
			Должность = Строка(ДанныеФизЛица.Должность);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Получение данных для формирования электронных документов

// Заполняет таблицу реквизитов контрагента для приглашения к обмену.
//
// Параметры:
//  ТаблицаРеквизитов - таблица значений с полями: Участник, Наименование, ИНН, КПП, АдресЭП, ВнешнийКод,
//  НаименованиеДляСообщенияПользователю.
//    Наименование - передается Оператору ЭДО,
//    НаименованиеДляСообщенияПользователю - выводится в сообщении пользователю ИБ.
//  МассивКонтрагентов - массив ссылок на участников-контрагентов.
//
Процедура ЗаполнитьРеквизитыКонтрагентовДляПриглашенияКОбмену(ТаблицаРеквизитов, МассивКонтрагентов, СоглашениеЭД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Контрагенты.Ссылка КАК Участник,
		|	Контрагенты.Наименование КАК Наименование,
		|	Контрагенты.ИНН КАК ИНН,
		|	Контрагенты.КПП КАК КПП,
		|	Контрагенты.Код КАК ВнешнийКод,
		|	УчастникиОбменовЭДЧерезОператоровЭДО.АдресЭП КАК АдресЭП,
		|	Контрагенты.НаименованиеПолное КАК НаименованиеДляСообщенияПользователю
		|ИЗ
		|	РегистрСведений.УчастникиОбменовЭДЧерезОператоровЭДО КАК УчастникиОбменовЭДЧерезОператоровЭДО
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО УчастникиОбменовЭДЧерезОператоровЭДО.Участник = Контрагенты.Ссылка
		|ГДЕ
		|	УчастникиОбменовЭДЧерезОператоровЭДО.Участник В(&СписокУчастников)
		|	И УчастникиОбменовЭДЧерезОператоровЭДО.СоглашениеОбИспользованииЭД = &СоглашениеЭД";
	Запрос.УстановитьПараметр("СписокУчастников", МассивКонтрагентов);
	Запрос.УстановитьПараметр("СоглашениеЭД", СоглашениеЭД);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	ТаблицаРеквизитов = ТЗ.Скопировать();
	
КонецПроцедуры

// Возвращает текстовое описание организации.
//
// Параметры:
//  СведенияОКонтрагенте - Структура, сведения об организации, по которой надо составить описание.
//  Список - Строка, список запрашиваемых параметров организации.
//  СПрефиксом - Булево, признак вывода префикса параметра организации.
//
Функция ОписаниеОрганизации(СведенияОКонтрагенте, Список = "", СПрефиксом = Истина) Экспорт
	
	СписокПолей = ?(Список = "", "ПолноеНаименование,ИНН,Свидетельство,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет", Список);
	Возврат ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКонтрагенте, СписокПолей, СПрефиксом);
	
КонецФункции

// Формирует текст НДС по этапу оплаты
//
// Параметры:
//  СоответствиеСтавокНДС - Соответствие - соответствие, полученное с помощью функции ПолучитьСоответствиеСтавокНДС()
//  ПроцентПлатежа       - Число - Процент платежа по этапу
//
// Возвращаемое значение:
//  ТекстНДС - Строка - описание ставки НДС
//
Функция СформироватьТекстНДСЭтапаОплаты(СоответствиеСтавокНДС, ПроцентПлатежа) Экспорт
	
	ТекстНДС = "";
	
	Если СоответствиеСтавокНДС.Количество() > 0 Тогда
		
		Для Каждого ТекСтавкаНДС Из СоответствиеСтавокНДС Цикл
			
			Если ТекСтавкаНДС.Значение <> 0 Тогда
				
				ТекстНДС = ТекстНДС + ?(ПустаяСтрока(ТекстНДС), НСтр("ru='НДС(%СтавкаНДС%) %СуммаНДС%'"),
					НСтр("ru=', НДС(%СтавкаНДС%) %СуммаНДС%'"));
				ТекстНДС = СтрЗаменить(ТекстНДС, "%СтавкаНДС%", ТекСтавкаНДС.Ключ);
				ТекстНДС = СтрЗаменить(ТекстНДС, "%СуммаНДС%",  Формат(ТекСтавкаНДС.Значение / 100 * ПроцентПлатежа, "ЧЦ=15; ЧДЦ=2"));
			
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстНДС) Тогда
		ТекстНДС = НСтр("ru='В т.ч. '") + ТекстНДС;
	Иначе
		ТекстНДС = НСтр("ru='Без налога (НДС)'");
	КонецЕсли;
	
	Возврат ТекстНДС;
	
КонецФункции

// Возвращает текстовое представление суммы.
//
// Параметры:
//  СуммаКПрописи - Число, сумма, по которой надо получить представление.
//  КодВалюты - Число, код используемой валюты.
//  ЧН - Строка, параметр нулевого значения числа.
//  ЧРГ - Строка, разделитель групп целой части числа.
//
Функция ФорматСумм(СуммаКПрописи, КодВалюты = Неопределено, ЧН = "", ЧРГ = "") Экспорт
	
	Валюта = НайтиСсылкуНаОбъект("Валюты",КодВалюты);
	Возврат ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаКПрописи, Валюта,  ЧН, ЧРГ);
	
КонецФункции

// Возвращает сумму прописью.
//
// Параметры:
//  СуммаЧислом - Число, преобразуемая сумма.
//  КодВалюты - Число, код используемой валюты.
//
Функция СуммаПрописью(СуммаЧислом, КодВалюты) Экспорт
	
	Валюта = НайтиСсылкуНаОбъект("Валюты",КодВалюты);
	Если Валюта = Неопределено Тогда
		Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	
	Возврат ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СуммаЧислом, Валюта);
	
КонецФункции

// Формирует текст НДС по ставке для печатной формы счета и заказа
//
// Параметры:
//  СтавкаНДС       - ПеречислениеСсылка.СтавкиНДС - ставка НДС, для которой необходимо сформировать текст
//  ЦенаВключаетНДС - Булево - Признак включения НДС в цену
//
// Возвращаемое значение:
//  Строка
//
Функция ТекстНДСПоСтавке(СтавкаНДС, ЦенаВключаетНДС) Экспорт
	
	ТекстНДСПоСтавке = ?(ЦенаВключаетНДС, НСтр("ru='В т.ч. НДС (%СтавкаНДС%):'"), НСтр("ru='НДС (%СтавкаНДС%):'"));
	ТекстНДСПоСтавке = СтрЗаменить(ТекстНДСПоСтавке, "%СтавкаНДС%", СтавкаНДС);
	
	Возврат ТекстНДСПоСтавке;
	
КонецФункции

// Возвращает ответственного за электронный документооборот по данному соглашению
//
// Параметры:
//  Контрагент - СправочникСсылка.Контрагенты, ссылка на контрагента, по которому надо получить ответственного.
//  Соглашение - СправочникСсылка.СоглашениеОбИспользованииЭД, ссылка на соглашение, по которому надо найти ответственного.
//
Функция ПолучитьОтветственногоПоЭД(Контрагент, Соглашение) Экспорт
	
	ОтветственныйПоЭД = Пользователи.ТекущийПользователь();
	Возврат ОтветственныйПоЭД;
	
КонецФункции

// Возвращает признак физ. лица.
//
// Параметры:
//  ДанныеКонтрагента - ссылка на элемент справочника.
//
Функция ЭтоФизЛицо(ДанныеКонтрагента) Экспорт
	
	ЭтоФизЛицо = Ложь;
	
	Если ДанныеКонтрагента.Метаданные().Реквизиты.Найти("ЮридическоеФизическоеЛицо") = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЮрФизЛицо = ДанныеКонтрагента.ЮридическоеФизическоеЛицо;
	
	Если ТипЗнч(ЮрФизЛицо) <> Тип("ПеречислениеСсылка.ЮридическоеФизическоеЛицо") Тогда
		Возврат Ложь;
	КонецЕсли;
		
	ЭтоФизЛицо = Ложь;
	Если ЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		ЭтоФизЛицо = Истина;
	КонецЕсли;
	
	Возврат ЭтоФизЛицо;
	
КонецФункции

// Функция возвращает, нужно ли вы водить данные о скидках в печатную форму документа
//
Функция НужноВыводитьСкидки(Знач Товары, ИспользоватьСкидки) Экспорт
	
	
	
	Возврат Ложь;
	
КонецФункции

// Получает имя дополнительной колонки.
//
// Возвращаемое значение:
//  ИмяКолонки - строка колонки.
//
Функция ИмяДополнительнойКолонки() Экспорт
	
	Возврат "Код";
	
КонецФункции

// Устаревшая процедура, будет удалена при переходе на новую редакцию БЭД.
// Возвращает числовое значение ставки НДС по значению перечисления
//
// Параметры:
//  СтавкаНДС - ПеречислениеСсылка.СтавкиНДС - значение перечисления СтавкиНДС
//
// Возвращаемое значение:
//  Число - Значение ставки НДС числом
//  Если СтавкаНДС = 0%, то число = О;
//  Если СтавкаНДС = БезНДС, то число = Неопределено.
//
Функция ПолучитьСтавкуНДСЧислом(Знач СтавкаНДС) Экспорт
	
	
	Если СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
		Возврат Неопределено;
	Иначе
		Возврат УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС)/100;
	КонецЕсли;
	
КонецФункции

Функция ЗначениеПеречисленияСтавкаНДС(СтавкаЧислом) Экспорт
	
	Возврат ПолучитьСтавкуНДСПеречислением(СтавкаЧислом);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Переопределение поведения электронных документов

// Данное событие возникает при изменении элемента справочника ЭДПрисоединенныеФайлы
// Предназначено для переопределения или добавления изменяемых реквизитов электронного документа
//
// Параметры:
//  Объект - СправочникСсылка.ЭДПрисоединенныеФайлы - изменяемый объект
//  СтруктураПараметров - Структура, содержит структуру изменяемых реквизитов
//
Процедура ПриИзмененииПрисоединенногоФайла(Объект, СтруктураПараметров) Экспорт
	
	Если НЕ СтруктураПараметров.Свойство("Ответственный") Тогда
		СтруктураПараметров.Вставить("Ответственный", Пользователи.АвторизованныйПользователь());
	КонецЕсли;
	
КонецПроцедуры

// Выполняет дополнительную обработку электронного документа, которому назначили статус "Утвержден".
// 
// Параметры:
//  ЭлектронныйДокумент - ссылка на присоединенный файл.
//
Процедура НазначенСтатусУтвержден(ЭлектронныйДокумент) Экспорт
	
	Попытка
		ФайлОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
		ФайлОбъект.Изменил = ПараметрыСеанса.ТекущийПользователь;
		ФайлОбъект.Записать();
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) + НСтр("ru = ' (подробности см. в Журнале регистрации).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'утверждение ЭД'"), ТекстОшибки, ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

// Выполняет дополнительную обработку электронного документа, которому назначили статус "Подписан".
// 
// Параметры:
//  ЭлектронныйДокумент - ссылка на присоединенный файл.
//
Процедура НазначенСтатусПодписан(ЭлектронныйДокумент) Экспорт
	
КонецПроцедуры

// Проверяет, готовность документов ИБ для формирования ЭД, и удаляет из массива неготовые документы
//
// Параметры
//  ДокументыМассив - Массив   - ссылки на документы, которые должны быть проверены перед формированием ЭД.
//
Процедура ПроверитьГотовностьИсточников(ДокументыМассив, ФормаИсточник = Неопределено) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияТипаИзМассива(ДокументыМассив, Тип("СтрокаГруппировкиДинамическогоСписка"));
	
	МассивПроводимыхДокументов = ЭлектронныеДокументыСлужебныйВызовСервера.МассивПроводимыхДокументов(ДокументыМассив);
	
	МассивБезСчетФактур = Новый Массив;
	МассивСчетовФактур  = Новый Массив;
	Для каждого Элемент из  МассивПроводимыхДокументов Цикл
		Если ТипЗнч(Элемент) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			МассивСчетовФактур.Добавить(Элемент)
		Иначе
			МассивБезСчетФактур.Добавить(Элемент)
		КонецЕсли;
	КонецЦикла;
	МассивНепроведенныхДокументов = ОбщегоНазначения.ПроверитьПроведенностьДокументов(МассивБезСчетФактур);
	КоличествоНепроведенныхДокументов = МассивНепроведенныхДокументов.Количество();
	
	Если КоличествоНепроведенныхДокументов > 0 Тогда
		Если КоличествоНепроведенныхДокументов = 1 Тогда
			Текст = НСтр("ru = 'Для того чтобы сформировать электронную версию документа,
			|его необходимо предварительно провести.'");
		Иначе
			Текст = НСтр("ru = 'Для того чтобы сформировать электронные версии документов,
			|их необходимо предварительно провести.'");
		КонецЕсли;

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		
		ШаблонСообщения = НСтр("ru = 'Документ %1 не проведен.'");
		Для Каждого НепроведенныйДокумент Из МассивНепроведенныхДокументов Цикл
			Найденный = ДокументыМассив.Найти(НепроведенныйДокумент.Ссылка);
			Если Найденный <> Неопределено Тогда
				
				ДокументыМассив.Удалить(Найденный);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Строка(НепроведенныйДокумент.Ссылка)),
					НепроведенныйДокумент.Ссылка);
			КонецЕсли;
				
		КонецЦикла;
	КонецЕсли;   	
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("СписокСчетовФактур", МассивСчетовФактур);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетФактураВыданный.Представление,
	|	СчетФактураВыданный.Ссылка,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.СчетФактураНеВыставляется
	|			ТОГДА ""Не выставляется""
	|		КОГДА СчетФактураВыданный.СводныйКомиссионный
	|				ИЛИ СчетФактураВыданный.СводныйКорректировочный
	|			ТОГДА ""Сводный""
	|	КОНЕЦ КАК Флаг
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	(СчетФактураВыданный.СчетФактураНеВыставляется
	|			ИЛИ СчетФактураВыданный.СводныйКорректировочный
	|			ИЛИ СчетФактураВыданный.СводныйКомиссионный)
	|	И СчетФактураВыданный.Ссылка В(&СписокСчетовФактур)";
	Выборка = Запрос.Выполнить().Выбрать();
	ШаблонСообщения = НСтр("ru = 'У %1 установлен флаг ""%2"". Для таких документов формировать электронный счет-фактуру нельзя.'");
	Пока Выборка.Следующий() Цикл
		Найденный = ДокументыМассив.Найти(Выборка.Ссылка);
		Если Найденный <> Неопределено Тогда
			ДокументыМассив.Удалить(Найденный);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Выборка.Представление, Выборка.Флаг),
				Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("СписокСчетовФактур", МассивСчетовФактур);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетФактураВыданный.Номер,
	|	СчетФактураВыданный.Дата,
	|	СчетФактураВыданный.Ссылка,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СчетФактураВыданныйДокументыОснования.ДокументОснование) КАК КоличествоДокументовОснований
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|		ПО СчетФактураВыданныйДокументыОснования.Ссылка = СчетФактураВыданный.Ссылка
	|ГДЕ
	|	СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|	И СчетФактураВыданный.Ссылка В(&СписокСчетовФактур)
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетФактураВыданный.Номер,
	|	СчетФактураВыданный.Дата,
	|	СчетФактураВыданный.Ссылка
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СчетФактураВыданныйДокументыОснования.ДокументОснование) > 1";
	Выборка = Запрос.Выполнить().Выбрать();
	ШаблонСообщения = НСтр("ru = 'У корректировочного счета-фактуры №%1 от %2 указано несколько документов-оснований. Отправка таких счетов-фактур не поддерживается.'");
	Пока Выборка.Следующий() Цикл
		Найденный = ДокументыМассив.Найти(Выборка.Ссылка);
		Если Найденный <> Неопределено Тогда
			ДокументыМассив.Удалить(Найденный);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Выборка.Номер, Выборка.Дата),
				Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	
	// Проверим заполнение вида электронного документа
	
	МассивДляПроверки = Новый Массив;
	Для Каждого Элемент Из ДокументыМассив Цикл
		Если ТипЗнч(Элемент) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Или ТипЗнч(Элемент) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
			МассивДляПроверки.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивДляПроверки.Количество() > 0 Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("МассивСсылок", МассивДляПроверки);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Ссылка,
		|	РеализацияТоваровУслуг.Представление
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.ВидЭлектронногоДокумента = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПустаяСсылка)
		|	И РеализацияТоваровУслуг.Ссылка В(&МассивСсылок)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОтчетКомитентуОПродажахТовары.Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(ОтчетКомитентуОПродажахТовары.Ссылка) КАК Представление
		|ИЗ
		|	Документ.ОтчетКомитентуОПродажах.Товары КАК ОтчетКомитентуОПродажахТовары
		|ГДЕ
		|	ОтчетКомитентуОПродажахТовары.Ссылка В(&МассивСсылок)
		|	И (ОтчетКомитентуОПродажахТовары.Покупатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ИЛИ ОтчетКомитентуОПродажахТовары.ДатаРеализации = ДАТАВРЕМЯ(1, 1, 1))";
		
		РезультаЗапроса = Запрос.ВыполнитьПакет();		
		
		// проверка РТиУ
		Выборка = РезультаЗапроса[0].Выбрать();
		ШаблонСообщения = НСтр("ru = '%1 - не выбран вид электронного документа.'");
		Пока Выборка.Следующий() Цикл
			Найденный = ДокументыМассив.Найти(Выборка.Ссылка);
			Если Найденный <> Неопределено Тогда
				ДокументыМассив.Удалить(Найденный);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Выборка.Представление),
				Выборка.Ссылка);
			КонецЕсли;
		КонецЦикла;
		
		// проверка отчета комитенту
		Выборка = РезультаЗапроса[1].Выбрать();
		ШаблонСообщения = НСтр("ru = '%1 - в табличной части товаров и услуг не заполнены поля %2 или %3.'");		
		Пока Выборка.Следующий() Цикл
			Найденный = ДокументыМассив.Найти(Выборка.Ссылка);
			Если Найденный <> Неопределено Тогда
				ДокументыМассив.Удалить(Найденный);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Выборка.Представление, """Покупатель""", """Дата реализации"""),
				Выборка.Ссылка);
			КонецЕсли;
		КонецЦикла;		
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет все ли необходимые подписи установлены перед отправкой контрагенту.
// 
// Параметры:
//  ЭлектронныйДокумент - ссылка на присоединенный файл.
//  ФлагПодписанПолностью - булево - признак полностью подписанного документа.
//
Процедура ЭлектронныйДокументПолностьюПодписан(ЭлектронныйДокумент, ФлагПодписанПолностью) Экспорт

КонецПроцедуры

// Проверяет выполняются ли необходимые автоматические условия для утверждения документа.
//
// Параметры:
//  ЭлектронныйДокумент - ссылка на присоединенный файл.
//
Функция ЭлектронныйДокументГотовКУтверждению(ЭлектронныйДокумент) Экспорт
	
	Возврат Истина;
КонецФункции

// Определяет возможно ли редактировать объект информационной базы
//
// Параметры
//  <СсылкаНаОбъект>  - <любая ссылка> - ссылка на проверяемый объект
/// <РедактированиеРазрешено> - <Булево>   - возвращает разрешено или нет редактирование
//
Функция ПроверитьВозможностьРедактированияОбъекта(СсылкаНаОбъект, РедактированиеРазрешено) Экспорт

	
	
КонецФункции

// Выполняется проверка возможности корректного чтения Пакета ЭД.
// Необходимость данной проверки возникает при работе с данными внешней информационной базы (через com-соединение).
//
// Параметры:
//  ПакетЭД - ДокументСсылка.ПакетЭД - исследуемый пакет электронных документов.
//  ЧтениеПакетаВозможно - булево/неопределено - Ложь - чтение пакета не будет выполняться, во всех остальных случаях,
//    (включая пустое значение) пакет будет прочитан.
//
Процедура ОпределитьВозможностьЧтенияДвоичныхДанныхПакетаЭД(ПакетЭД, ЧтениеПакетаВозможно) Экспорт
	
	
	
КонецПроцедуры

// Проверяет на корректность заполнения параметров электронного документа.
//
// Параметры:
//  ПараметрыЭД - структура - перечень параметров ЭД.
//
// Возвращаемое значение:
//  Булево - Истина если правильно заполнен объект выгрузки
//
Функция ПроверитьПравильностьЗаполненияОбъекта(ПараметрыЭД) Экспорт
	
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с правами

// Проверяет наличие прав обрабатывать электронный документы.
//
// Возвращаемое значение:
//  Булево - истина или ложь, в зависимости от установленных прав.
//
Функция ЕстьПравоОбработкиЭД() Экспорт
	
	Результат = Пользователи.РолиДоступны("ВыполнениеОбменаЭД, ПолныеПрава");
	
	Возврат Результат;
	
КонецФункции

// Проверяет наличие прав читать электронный документы.
//
// Возвращаемое значение:
//  Булево - истина или ложь, в зависимости от установленных прав.
//
Функция ЕстьПравоЧтенияЭД() Экспорт
	
	Результат = Пользователи.РолиДоступны("ВыполнениеОбменаЭД, ЧтениеЭД, ПолныеПрава");
	
	Возврат Результат;
	
КонецФункции

// Проверяет наличие прав на открытие журнала регистрации.
//
// Возвращаемое значение:
//  Булево - истина или ложь, в зависимости от установленных прав.
//
Функция ЕстьПравоОткрытияЖурналаРегистрации() Экспорт
	
	Результат = Пользователи.ЭтоПолноправныйПользователь();
	
	Возврат Результат;
	
КонецФункции

Функция ЕстьПравоНастройкиПараметровЭД() Экспорт
	
	Результат = Пользователи.РолиДоступны("НастройкаПараметровЭД") ИЛИ Пользователи.ЭтоПолноправныйПользователь();
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с элементами форм

// Изменяет поведение элементов управляемой или обычной формы.
//
// Параметры:
//  Форма - <Управляемая или обычная форма> - управляемая или обычная форма для изменения.
//  СтруктураПараметров - <Структура> - параметры процедуры
//
Процедура ИзменитьСвойстваЭлементовФормы(Форма, СтруктураПараметров) Экспорт
	
	Если СтруктураПараметров.Свойство("ВидОперации")
		И СтруктураПараметров.Свойство("ЗначениеПараметра") Тогда
		Если ВРег(СтруктураПараметров.ВидОперации) = ВРег("УстановкаГиперссылки")
			И СтруктураПараметров.Свойство("ТекстСостоянияЭД") Тогда
			// Зададим особые условия.
			Если Найти(СтруктураПараметров.ТекстСостоянияЭД, "Не сформирован") > 0
				ИЛИ Найти(СтруктураПараметров.ТекстСостоянияЭД, "Нет действующего соглашения") > 0 Тогда
				СтруктураПараметров.ЗначениеПараметра = Ложь;
			КонецЕсли;
			// Определим элемент формы.
			НайденныйЭлементФормы = Неопределено;
			Если НЕ Форма.Элементы.Найти("СостояниеЭД") = Неопределено Тогда
				НайденныйЭлементФормы = Форма.Элементы.СостояниеЭД;
			КонецЕсли;
				
			// Заполним свойство найденного элемента.
			Если НЕ НайденныйЭлементФормы = Неопределено
				И НайденныйЭлементФормы.Вид = ВидПоляФормы.ПолеНадписи Тогда
				НайденныйЭлементФормы.Гиперссылка = СтруктураПараметров.ЗначениеПараметра;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЕстьПравоЧтенияЭД() Или Не ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД") Тогда
		Если НЕ Форма.Элементы.Найти("ГруппаСостояниеЭД") = Неопределено Тогда
			Форма.Элементы.ГруппаСостояниеЭД.Видимость = Ложь;
		ИначеЕсли НЕ Форма.Элементы.Найти("СостояниеЭД") = Неопределено Тогда
			Форма.Элементы.СостояниеЭД.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Переопределение сообщений пользователю

// Переопределяет выводимое сообщение об ошибке
// КодОшибки - строка
// ТекстОшибки - строка
Процедура ИзменитьСообщениеОбОшибке(КодОшибки, ТекстОшибки) Экспорт
	
	Если КодОшибки = "100" ИЛИ КодОшибки = "110" Тогда
		ТекстОшибки = "Проверьте общие настройки криптографии."
	КонецЕсли;
	
КонецПроцедуры

// Определяет текст сообщения о необходимости настройки системы взависимости от вида операции.
//
// Параметры:
//  ВидОперации    - строка - признак выполняемой операции;
//  ТекстСообщения - строка - текст сообщения.
//
Процедура ТекстСообщенияОНеобходимостиНастройкиСистемы(ВидОперации, ТекстСообщения) Экспорт
	
	Если ВРег(ВидОперации) = "РАБОТАСЭД" Тогда
		ТекстСообщения = НСтр("ru = 'Для работы с электронными документами необходимо
			|в настройках системы включить использование обмена электронными документами.'");
	ИначеЕсли ВРег(ВидОперации) = "ПОДПИСАНИЕЭД" Тогда
		ТекстСообщения = НСтр("ru = 'Для возможности подписания ЭД необходимо
			|в настройках системы включить опцию использования электронных цифровых подписей.'");
	ИначеЕсли ВРег(ВидОперации) = "НАСТРОЙКАКРИПТОГРАФИИ" Тогда
		ТекстСообщения = НСтр("ru = 'Для возможности настройки криптографии необходимо 
			|в настройках системы включить опцию использования электронных цифровых подписей.'");
	ИначеЕсли ВРег(ВидОперации) = "РАБОТАСБАНКАМИ" Тогда
			ТекстСообщения = НСтр("ru = 'Для возможности обмена ЭД с банками необходимо 
			|в настройках программы включить опцию использования прямого обмена с банками.'");
	Иначе
		ТекстСообщения = НСтр("ru='Операция не может быть выполнена. Не выполнены необходимые настройки программы.'");
	КонецЕсли;
	
КонецПроцедуры

// Переопределяет сообщение о нехватке прав доступа
//
// Параметры:
//  ТекстСообщения - строка сообщения
//
Процедура ПодготовитьТекстСообщенияОНарушенииПравДоступа(ТекстСообщения) Экспорт
	
	// При необходимости можно переопределить или дополнить текст сообщения
	
КонецПроцедуры

// Получает таблицу соотвествий параметров для типов метаданных их пользовательским представлениям.
//
// Параметры:
//  ТаблицаСоответствия - таблица - соответствие параметров для типов метаданных их пользовательским представлениям
//  содержит следующие колонки: ТипИсточника, Параметр, Представление.
//
Процедура ПолучитьТаблицуСоответствияПараметровПользовательскимПредставлениям(ТаблицаСоответствия) Экспорт
	
	Макет                   = Обработки.ЭлектронныеДокументы.ПолучитьМакет("ПользовательскоеПредставлениеОбязательныхПолей");
	ОбластьДокументов       = Макет.ПолучитьОбласть("ОбязательныеПоля");
	ОбластьДокументовВысота = ОбластьДокументов.ВысотаТаблицы;

	Для НСтр = 1 По ОбластьДокументовВысота Цикл
		
		НоваяСтрока = ТаблицаСоответствия.Добавить();
		НоваяСтрока.ТипИсточника  = Тип(СокрЛП(ОбластьДокументов.Область(НСтр, 1).Текст));
		НоваяСтрока.Параметр      = СокрЛП(ОбластьДокументов.Область(НСтр, 2).Текст);
		НоваяСтрока.Представление = СокрЛП(ОбластьДокументов.Область(НСтр, 3).Текст);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет соответствие кодов реквизитов схем электронных документов их пользовательскому представлению.
//
// Параметры:
//  СоответствиеВозврата - Соответствие, исходное соответствие для заполнения.
//
Процедура СоответствиеКодовРеквизитовИПредставлений(СоответствиеВозврата) Экспорт
	
	Макет = Обработки.ЭлектронныеДокументы.ПолучитьМакет("ПрикладноеПредставлениеРеквизитов");
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	Для НСтр = 1 По ВысотаТаблицы Цикл
		СоответствиеВозврата.Вставить(СокрЛП(Макет.Область(НСтр, 1).Текст), СокрЛП(Макет.Область(НСтр,2).Текст));
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Заполнение таблиц соответствий элементов справочников

// Создает таблицу порядка создания типов при загрузке электронного документа.
//
// Возвращаемое значение:
//  Таблица - таблица значений.
//
Функция ЗаполнитьТаблицуПорядкаСозданияТиповОбъектов() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	
	Таблица.Колонки.Добавить("ТипОбъекта");
	Таблица.Колонки.Добавить("Порядок");
	
	НовСтрока = Таблица.Добавить();
	НовСтрока.ТипОбъекта = "НоменклатураПоставщиков";
	НовСтрока.Порядок    = 2;
	
	Возврат Таблица;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с временными каталогами и файлами

// При необходимости, в функции можно определить каталог для временных файлов,
// отличный от устанавливаемого по умолчанию в библиотеке ЭД.
//
// Парамтеры:
//  ТекущийКаталог - путь к каталогу временных файлов.
//
Процедура ТекущийКаталогВременныхФайлов(ТекущийКаталог) Экспорт
	
	ТекущийКаталог = КаталогВременныхФайлов();
	
КонецПроцедуры

// Получает имя временного файла.
//
// Параметры:
//  ИмяВременногоФайла - Строка - имя временного файла;
//  Расширение - Строка - расширение для временного файла.
//
Процедура ТекущееИмяВременногоФайла(ИмяВременногоФайла, Расширение = "") Экспорт
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Общие процедуры и функции

// Разбирает из переданной строки фамилию, имя и отчество.
//
// Параметры
//  ПолноеНаименование - строка с наименованием;
//  Фамилия - строка с фамилией;
//  Имя - строка с именем;
//  Отчество - строка с отчеством.
//
Процедура РазобратьНаименованиеФизЛица(ПолноеНаименование, Фамилия = " ", Имя = " ", Отчество = " ") Экспорт
	
	ОбщегоНазначенияБПВызовСервера.ФамилияИнициалыФизЛица(ПолноеНаименование, Фамилия, Имя, Отчество);
	
КонецПроцедуры

// Осуществляет разбор файла с реквизитами контрагента
// в ней можно внести изменения в структуру возвращаемых данных
//
// Параметры:
//  СсылкаНаФайл - адрес хранилища файла с реквизитами контрагента;
//  СтруктураВозврата - Структура - перечень параметров;
//  ОшибкаРазбора - текст, описание ошибки.
//
// Возвращаемое значение:
//  РезультатРазбора - Булево - Истина - разбор файла выполнен; Ложь - разбор файла не выполнялся.
//
Процедура РазобратьФайлРеквизитовКонтрагента(СсылкаНаФайл, СтруктураВозврата, РезультатРазбора, ОшибкаРазбора) Экспорт
	
	
КонецПроцедуры

// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект.
// 
// Если не задан альтернативный алгоритм получения значений реквизитов (процедура пуста), то используется функция БСП:
// ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ИменаРеквизитов).
// 
// Параметры:
//  Ссылка       - ссылка на объект, - элемент справочника, документ, ...
//  ИменаРеквизитов - Строка или Структура - если Строка, то имена реквизитов, 
//               перечисленные через запятую, в формате требований к свойствам структуры.
//               Например, "Код, Наименование, Родитель".
//               Если Структура, то в качестве ключа передается псевдоним поля для
//               возвращаемой структуры с результатом, а в качестве значения (опционально) 
//               - фактическое имя поля в таблице. 
//               Если значение не определено, то имя поля берется из ключа.
//  СтруктураДанных - содержит список свойств, как список имен в строке
//                 ИменаРеквизитов, со значениям реквизитов, прочитанных
//                 из информационной базы.
// 
Процедура ПолучитьСтруктуруЗначенийРеквизитов(Ссылка, ИменаРеквизитов, СтруктураДанных) Экспорт
	
	
	
КонецПроцедуры

// Выполняет заполнение списка документов по виду электронного документа.
//
// Параметры:
//  ВидЭД           - Перечисления   - вид электронного документа;
//  СписокВозврата  - СписокЗначений - список ссылок на документы информационной базы.
//
Процедура СписокТиповДокументовПоВидуЭД(ВидЭД, СписокВозврата) Экспорт
	
	Если ВидЭД = Перечисления.ВидыЭД.ТОРГ12 ИЛИ ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
		ИЛИ ВидЭД = Перечисления.ВидыЭД.АктИсполнитель	Тогда
		СписокВозврата.Добавить(Документы.ПоступлениеТоваровУслуг.ПустаяСсылка(),
			Метаданные.Документы.ПоступлениеТоваровУслуг.Представление());
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель ИЛИ ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
		СписокВозврата.Добавить(Документы.КорректировкаПоступления.ПустаяСсылка(),
			Метаданные.Документы.КорректировкаПоступления.Представление());
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СчетФактура Тогда
		СписокВозврата.Добавить(Документы.СчетФактураПолученный.ПустаяСсылка(),
			Метаданные.Документы.СчетФактураПолученный.Представление());
	ИначеЕсли ВРег(ВидЭД) = ВРег("РеквизитыОрганизации") Тогда
		СписокВозврата.Добавить(Справочники.Контрагенты.ПустаяСсылка(),
									Метаданные.Справочники.Контрагенты.Представление());	
			
	КонецЕсли;
	
КонецПроцедуры

// Задает имя файла "по умолчанию", с которым будет предложено пользователю сохранить
// ЭД при выгрузке по сценарию "Однократной сделки".
//
// Параметры:
//  ВладелецЭД - ссылка на документ ИБ, на основании которого формируется и выгружается ЭД,
//  НаименованиеФайла - Строка - имя файла.
//
Процедура ЗадатьИмяСохраняемогоФайлаПриБыстромОбмене(ВладелецЭД, НаименованиеФайла) Экспорт
	
КонецПроцедуры

// Получает реквизиты элемнта справочника "Организации", для выгрузки в xml-файл.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - элемент справочника организации;
//  СтруктураВозврата - струтура - перечень параметров организации.
//
Процедура ПолучитьРеквизитыОрганизацииДляВыгрузкиВФайл(Организация, СтруктураВозврата) Экспорт
	
	
	Реквизиты = Новый Структура("Наименование, ИНН, КПП, ЮрФизЛицо, НаименованиеПолное", "Наименование",
		"ИНН", "КПП", "ЮридическоеФизическоеЛицо", "НаименованиеПолное");
	ЗаполнитьЗначенияСвойств(СтруктураВозврата, ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, Реквизиты));
	
КонецПроцедуры

// Функция должна возвращать дату и номер документов оснований (договоров) по массиву ссылок.
// Параметры функции:
// Парам 1 -  массив ссылок на документы ИБ
// (в качестве возможных значений следует принимать те типы документов,
// на основании которых в данном прикладном решении формируется электронный документ вида «Акт приемки-сдачи работ (услуг)»)
//
// Параметры:
//  МассивСсылок - массив ссылок на документы ИБ;
//  ВозвращаемоеСоответствие - Соответствие со следующими свойствами:
//    ключ соответствия - ссылка на выгружаемый документ ИБ, взятая из входящего параметра
//    значение соответствия - Структура, с полями:
//    НомерДоговора, тип: Строка
//    ДатаДоговора, тип: Дата
// В случае, если требуемые реквизиты у договора не заполнены или при невозможности получения данных реквизитов, помещать пустые значения указанных типов.
//
Процедура ПолучитьНомерДатаДоговораДокументов(МассивСсылок, ВозвращаемоеСоответствие) Экспорт
	
	ВозвращаемоеСоответствие = 
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ПолучитьНомерДатаДоговораДокументов(МассивСсылок);
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ПередачаТоваровМеждуОрганизациями.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура, параметры для заполнения.
//
Процедура ПодготовитьДанныеПоПередачеТоваровМеждуОрганизациями(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ВозвратТоваровМеждуОрганизациями.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  СтруктураПараметров - структура, параметры для заполнения.
//
Процедура ПодготовитьДанныеПоВозвратуТоваровМеждуОрганизациями(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обмен с банком

// Используется для включения подсистемы Сбербанк в прикладном решении.
//
// Параметры:
//  ФлагИспользования - <Булево> - необходимо присвоить параметру Истина, если используется подсистема Сбербанк.
//
Процедура ПроверитьИспользованиеПодсистемыСбербанк(ФлагИспользования) Экспорт
	
	ФлагИспользования = Ложь;
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Платежное поручение.
//
// Параметры:
// СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы,
//                  по которому необходимо создать электронный документ.
// СтруктураЭД - Структура, структура данных для формирования электронного документа.
// ДеревоДокумента - ДеревоЗначений - соответствует макету ПлатежноеПоручение обработки ЭлектронныеДокументы.
//
Процедура ЗаполнитьДанныеПоПлатежномуПоручению(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента) Экспорт
	
	ПлатежныеПоручения = Новый Массив;
	ПлатежныеПоручения.Добавить(СсылкаНаОбъект);
	ПлатежныеТребования = Новый Массив;
	ТаблицаДокументов = Обработки.КлиентБанк.ПолучитьТаблицуДокументовДляЭкспорта(ПлатежныеПоручения, ПлатежныеТребования);
	
	Если ТаблицаДокументов.Количество()>0 Тогда
		
		ПлатежноеПоручение = ТаблицаДокументов[0];
		
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Дата", ПлатежноеПоручение.Дата);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Сумма", ПлатежноеПоручение.СуммаДокумента);
		
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлатежа.ВидПлатежа", ПлатежноеПоручение.ВидПлатежа);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлатежа.ВидОплаты", "01");
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлатежа.Очередность", ПлатежноеПоручение.ОчередностьПлатежа);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлатежа.Код", ПлатежноеПоручение.ИдентификаторПлатежа);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлатежа.НазначениеПлатежа", ПлатежноеПоручение.НазначениеПлатежа);
		
		// Плательщик
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлательщика.Наименование", ПлатежноеПоручение.ТекстПлательщика);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлательщика.ИНН", ПлатежноеПоручение.ИННПлательщика);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлательщика.КПП", ПлатежноеПоручение.КПППлательщика);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлательщика.РасчСчет", ПлатежноеПоручение.ОрганизацияНомерСчета);
		
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлательщика.Банк.БИК", ПлатежноеПоручение.ОрганизацияБИКБанка);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлательщика.Банк.Наименование", ПлатежноеПоручение.ОрганизацияБанк);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлательщика.Банк.Город", ПлатежноеПоручение.ОрганизацияГородБанка);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлательщика.Банк.КоррСчет", ПлатежноеПоручение.ОрганизацияРасчСчет);
		
		Если ПлатежноеПоручение.НепрямыеРасчетыУПлательщика Тогда
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "БанкПлательщикаДляНепрямыхРасчетов.БИК", ПлатежноеПоручение.ОрганизацияБИКРЦБанка);
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "БанкПлательщикаДляНепрямыхРасчетов.Наименование", ПлатежноеПоручение.ОрганизацияБанкДляРасчетов);
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "БанкПлательщикаДляНепрямыхРасчетов.Город", ПлатежноеПоручение.ОрганизацияГородРЦБанка);
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "БанкПлательщикаДляНепрямыхРасчетов.КоррСчет", ПлатежноеПоручение.ОрганизацияКоррСчетРЦБанка);
		КонецЕсли;
		
		// Получатель
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Получатель", ПлатежноеПоручение.Контрагент);
		
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПолучателя.Наименование", ПлатежноеПоручение.ТекстПолучателя);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПолучателя.ИНН", ПлатежноеПоручение.ИННПолучателя);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПолучателя.КПП", ПлатежноеПоручение.КПППолучателя);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПолучателя.РасчСчет", ПлатежноеПоручение.КонтрагентНомерСчета);
		
		
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПолучателя.Банк.БИК", ПлатежноеПоручение.КонтрагентБИКБанка);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПолучателя.Банк.Наименование", ПлатежноеПоручение.КонтрагентБанк);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПолучателя.Банк.Город", ПлатежноеПоручение.КонтрагентГородБанка);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПолучателя.Банк.КоррСчет", ПлатежноеПоручение.КонтрагентРасчСчет);
		
		Если ПлатежноеПоручение.НепрямыеРасчетыУПолучателя Тогда
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "БанкПолучателяДляНепрямыхРасчетов.БИК", ПлатежноеПоручение.КонтрагентБИКРЦБанка);
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "БанкПолучателяДляНепрямыхРасчетов.Наименование", ПлатежноеПоручение.КонтрагентБанкДляРасчетов);
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "БанкПолучателяДляНепрямыхРасчетов.Город", ПлатежноеПоручение.КонтрагентГородРЦБанка);
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "БанкПолучателяДляНепрямыхРасчетов.БИК", ПлатежноеПоручение.КонтрагентКоррСчетРЦБанка);
		КонецЕсли;
		
		// Платежи в бюджет
		Если ПлатежноеПоручение.ПеречислениеВБюджет Тогда
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ПлатежиВБюджет.СтатусСоставителя", ПлатежноеПоручение.СтатусСоставителя);
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ПлатежиВБюджет.ПоказательКБК", ПлатежноеПоручение.КодБК);
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ПлатежиВБюджет.ОКТМО", ПлатежноеПоручение.КодОКАТО);
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ПлатежиВБюджет.ПоказательОснования", ПлатежноеПоручение.ПоказательОснования);
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ПлатежиВБюджет.ПоказательПериода", ПлатежноеПоручение.ПоказательПериода);
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ПлатежиВБюджет.ПоказательНомера", ПлатежноеПоручение.ПоказательНомера);
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ПлатежиВБюджет.ПоказательДаты", ПлатежноеПоручение.ПоказательДаты);
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ПлатежиВБюджет.ПоказательТипа", ПлатежноеПоручение.ПоказательТипа);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Платежное требование.
//
// Параметры:
// СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы,
//                  по которому необходимо создать электронный документ.
// СтруктураЭД - Структура, структура данных для формирования электронного документа.
// ДеревоДокумента - ДеревоЗначений - соответствует макету ПлатежноеТребование обработки ЭлектронныеДокументы.
//
Процедура ЗаполнитьДанныеПоПлатежномуТребованию(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента) Экспорт
	
	// _Демо начало примера
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПлатежноеТребование.Дата,
	|	ПлатежноеТребование.СуммаДокумента КАК Сумма,
	|	ПлатежноеТребование.Контрагент.НаименованиеПолное КАК РеквизитыПлательщика_Наименование,
	|	ПлатежноеТребование.Контрагент.ИНН КАК РеквизитыПлательщика_ИНН,
	|	ПлатежноеТребование.Контрагент.КПП КАК РеквизитыПлательщика_КПП,
	|	ПлатежноеТребование.СчетКонтрагента.НомерСчета КАК РеквизитыПлательщика_РасчСчет,
	|	ПлатежноеТребование.СчетКонтрагента.Банк.Код КАК РеквизитыПлательщика_Банк_БИК,
	|	ПлатежноеТребование.СчетКонтрагента.Банк.Наименование КАК РеквизитыПлательщика_Банк_Наименование,
	|	ПлатежноеТребование.СчетКонтрагента.Банк.Город КАК РеквизитыПлательщика_Банк_Город,
	|	ПлатежноеТребование.СчетКонтрагента.Банк.КоррСчет КАК РеквизитыПлательщика_Банк_КоррСчет,
	|	ПлатежноеТребование.Организация.Наименование КАК РеквизитыПолучателя_Наименование,
	|	ПлатежноеТребование.Организация.ИНН КАК РеквизитыПолучателя_ИНН,
	|	ПлатежноеТребование.Организация.КПП КАК РеквизитыПолучателя_КПП,
	|	ПлатежноеТребование.СчетОрганизации.НомерСчета КАК РеквизитыПолучателя_РасчСчет,
	|	ПлатежноеТребование.СчетОрганизации.Банк.Код КАК РеквизитыПолучателя_Банк_БИК,
	|	ПлатежноеТребование.СчетОрганизации.Банк.Наименование КАК РеквизитыПолучателя_Банк_Наименование,
	|	ПлатежноеТребование.СчетОрганизации.Банк.Город КАК РеквизитыПолучателя_Банк_Город,
	|	ПлатежноеТребование.СчетОрганизации.Банк.КоррСчет КАК РеквизитыПолучателя_Банк_КоррСчет,
	|	ПлатежноеТребование.ВидПлатежа КАК РеквизитыПлатежа_ВидПлатежа,
	|	""02"" КАК РеквизитыПлатежа_ВидОплаты,
	|	ПлатежноеТребование.ОчередностьПлатежа КАК РеквизитыПлатежа_Очередность,
	|	ПлатежноеТребование.НазначениеПлатежа КАК РеквизитыПлатежа_НазначениеПлатежа,
	|	ПлатежноеТребование.УсловиеОплаты,
	|	ПлатежноеТребование.СрокАкцепта,
	|	ПлатежноеТребование.ДатаОтсылкиДокументов,
	|	ПлатежноеТребование.Контрагент КАК Плательщик
	|ИЗ
	|	Документ._ДемоПлатежныйДокумент КАК ПлатежноеТребование
	|ГДЕ
	|	ПлатежноеТребование.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	ТаблицаДанныхДокумента = Запрос.Выполнить().Выгрузить();
	
	СтрокаДанных = ТаблицаДанныхДокумента[0];
	Индекс = 0;
	
	Для Индекс = 0 По 25 Цикл
		Путь = СтрЗаменить(ТаблицаДанныхДокумента.Колонки[Индекс].Имя, "_", ".");
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, Путь, СтрокаДанных[Индекс]);
	КонецЦикла;
	
	// _Демо конец примера
	
КонецПроцедуры

// Используется для получения номеров счетов в виде массив строк
//
// Параметры:
//  Организация - <СправочникСсылка.Организации> - отбор по организации.
//  Банк - <СправочникСсылка.КлассификаторБанковРФ> - отбор по банку.
//  МассивНомеровБанковскихСчетов - массив возврата, в элементах строки с номерами счетов
//
Процедура ПолучитьНомераБанковскихСчетов(Организация, Банк, МассивНомеровБанковскихСчетов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БанковскиеСчета.НомерСчета
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Банк = &Банк
	|	И БанковскиеСчета.Владелец = &Организация
	|	И НЕ БанковскиеСчета.ПометкаУдаления
	|	И БанковскиеСчета.Валютный = ЛОЖЬ";
	Запрос.УстановитьПараметр("Банк", Банк);
	Запрос.УстановитьПараметр("Организация", Организация);
	ТабРез = Запрос.Выполнить().Выгрузить();
	МассивНомеровБанковскихСчетов = ТабРез.ВыгрузитьКолонку("НомерСчета");
	
КонецПроцедуры

Процедура ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОбУчастнике, ВидУчастника, ВидАдреса, КорневойЭлементДерева = "")
	
	Если СведенияОбУчастнике.ТипЮрФизЛица = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ЮЛ.ИНН",
									СведенияОбУчастнике.ИНН, КорневойЭлементДерева);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ЮЛ.КПП",
									СведенияОбУчастнике.КПП, КорневойЭлементДерева);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации",
									СведенияОбУчастнике.ПолноеНаименование, КорневойЭлементДерева);
	Иначе
		ПолныйПуть = ВидУчастника + ".ТипУчастника.ФЛ.ПолноеНаименование";
		Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть) Тогда
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть, СведенияОбУчастнике.ПолноеНаименование, КорневойЭлементДерева);
		КонецЕсли;
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ФЛ.ИНН",
									СведенияОбУчастнике.ИНН, КорневойЭлементДерева);
		Фамилия = ""; Имя = ""; Отчество = "";
		ЭлектронныеДокументы.ФамилияИнициалыФизЛица(СведенияОбУчастнике.ПолноеНаименование, Фамилия, Имя, Отчество);
		
		ЕстьРеквизитПолноеНаименование = ДеревоДанных.Строки.Найти(ВидУчастника + ".ТипУчастника.ФЛ.ПолноеНаименование",
			"ПолныйПуть", Истина);
		Если ЕстьРеквизитПолноеНаименование <> Неопределено Тогда
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ВидУчастника + ".ТипУчастника.ФЛ.ПолноеНаименование",
				СведенияОбУчастнике.НаименованиеДляПечатныхФорм, КорневойЭлементДерева);
		КонецЕсли;
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ФЛ.Фамилия",
									Фамилия, КорневойЭлементДерева);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ФЛ.Имя",
									Имя, КорневойЭлементДерева);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ФЛ.Отчество",
									Отчество, КорневойЭлементДерева);
	КонецЕсли;
	
	АдресУчастника = Новый Структура;
	ЭлектронныеДокументыПереопределяемый.ПолучитьАдресСтруктурой(АдресУчастника, СведенияОбУчастнике.ЮрФизЛицоСсылка, "Ссылка", ВидАдреса, "");
	
	Если ЗначениеЗаполнено(АдресУчастника) Тогда
		ПолныйПуть = ВидУчастника + ".Адрес.Структурированный";
		Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть) Тогда
			ТипАдреса = ?(АдресУчастника.АдресРФ, "Структурированный", "Иностранный");
		Иначе
			ТипАдреса = "Произвольный";
		КонецЕсли;
		
		ЗаполнитьАдресВДереве(ДеревоДанных, АдресУчастника, ТипАдреса, ВидУчастника, КорневойЭлементДерева);
		
	КонецЕсли;
	
	ПолныйПуть = ВидУчастника + ".Контакт.Телефон";
	Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть) Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								ВидУчастника + ".Контакт.Телефон",
								СведенияОбУчастнике.Телефоны, КорневойЭлементДерева);
	КонецЕсли;
	
	ПолныйПуть = ВидУчастника + ".БанковскийСчет";
	НомерСчета = "";
	Если СведенияОбУчастнике.Свойство("НомерСчета", НомерСчета) И ЗначениеЗаполнено(НомерСчета)
		И ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть) Тогда
		Банк = "";
		БИК = "";
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ВидУчастника + ".БанковскийСчет.НомерСчета",
				НомерСчета, КорневойЭлементДерева);
		Если СведенияОбУчастнике.Свойство("Банк", Банк) И ЗначениеЗаполнено(Банк) Тогда
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".БанковскийСчет.НаимБанк",
										Банк.Наименование, КорневойЭлементДерева);
		КонецЕсли;
		Если СведенияОбУчастнике.Свойство("БИК", БИК) И ЗначениеЗаполнено(БИК) Тогда
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".БанковскийСчет.БИК",
										БИК, КорневойЭлементДерева);
		КонецЕсли;
	КонецЕсли;
	
	ПолныйПуть = ВидУчастника + ".Руководитель";
	Значение = "";
	Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть)
		И СведенияОбУчастнике.Свойство("Руководитель", Значение) Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Фамилия", Значение.Фамилия, КорневойЭлементДерева);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Имя", Значение.Имя, КорневойЭлементДерева);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Отчество", Значение.Отчество, КорневойЭлементДерева);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Должность", Значение.Должность, КорневойЭлементДерева);
	КонецЕсли;
	
	ПолныйПуть = ВидУчастника + ".Комментарий";
	Значение = "";
	Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть)
		И СведенияОбУчастнике.Свойство("Комментарий", Значение) Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть, Значение, КорневойЭлементДерева);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет соответствующий тип адреса переданными данными.
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - Строка дерева, содержащая данные участника
//  АдресУчастника - Структура - содержит данные адреса участника обмена. Имена полей структуры должны совпадать с
//    именами полей структуры выбранного типа адреса:
//    Структурированный - "Индекс, КодРегион, Район, Город, НаселПункт, Улица, Дом, Корпус, Кварт";
//    Произвольный/Иностранный - "КодСтраны, АдресСтрокой" (вынесены в разные элементы списка для того,
//      чтобы правильно заполнить ЭД).
//  ТипАдреса - Строка - один из 3-х вариантов: Структурированный, Произвольный, Иностранный.
//
Процедура ЗаполнитьАдресВДереве(ДеревоДанных, АдресУчастника, ТипАдреса, ВидУчастника, КорневойЭлементДерева = "")
	
	Если ТипАдреса = "Произвольный" Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".Адрес.Произвольный",
									АдресУчастника.АдрТекст, КорневойЭлементДерева);
	Иначе
		Если АдресУчастника.АдресРФ Тогда
			АдресУчастника.Удалить("АдресРФ");
			АдресУчастника.Удалить("КодСтр");
			АдресУчастника.Удалить("АдрТекст");
		Иначе
			АдресУчастника.Удалить("АдресРФ");
			АдресУчастника.Удалить("Индекс");
			АдресУчастника.Удалить("КодРегион");
			АдресУчастника.Удалить("Район");
			АдресУчастника.Удалить("Город");
			АдресУчастника.Удалить("НаселПункт");
			АдресУчастника.Удалить("Улица");
			АдресУчастника.Удалить("Дом");
			АдресУчастника.Удалить("Корпус");
			АдресУчастника.Удалить("Кварт");
		КонецЕсли;
		Для Каждого Элемент Из АдресУчастника Цикл
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".Адрес." + ТипАдреса + "." + Элемент.Ключ,
									Элемент.Значение, КорневойЭлементДерева);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьЗначениеРеквизитаДерева(СтрокаДерева, ИмяРеквизита, ВключатьПодчиненные = Ложь, ДеревоРазбора = Неопределено)
	
	Результат = Неопределено;
	
	Если СтрокаДерева.Строки.Количество() > 0 Тогда
		НайденнаяСтрока = СтрокаДерева.Строки.Найти(ИмяРеквизита, "Реквизит", ВключатьПодчиненные);
	Иначе
		НайденнаяСтрока = СтрокаДерева;
	КонецЕсли;
	
	Если НайденнаяСтрока <> Неопределено Тогда
		Результат = НайденнаяСтрока.ЗначениеРеквизита;
		// Если реквизит ссылочного типа (передали реквизит ДеревоРазбора),
		// тогда нашли всего лишь индекс строки
		Если ЗначениеЗаполнено(ДеревоРазбора) Тогда 
			НайденнаяСтрока = ДеревоРазбора.Строки.Найти(Результат, "ИндексСтроки", Истина);
			Если НайденнаяСтрока <> Неопределено Тогда
				Результат = НайденнаяСтрока.СсылкаНаОбъект;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НайтиСоздатьПоступлениеТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляПоступленияТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора);
	НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ПередачаТовараКомитентом", Истина);
	Если НайденноеЗначение <> Неопределено Тогда
		
		ПередачаТовараКомитентом = Булево(НайденноеЗначение);
		
	Иначе	
		
		ПередачаТовараКомитентом = Ложь;
		
	КонецЕсли;
	
	Если ДанныеДляЗагрузки.Свойство("Шапка") Тогда 
		ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	КонецЕсли;
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда // получены изменения по существующему документу
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		КонецЕсли;
	Иначе  // создаем новый
		ДокументОбъект = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
		ЗагрузкаИзExcel = Ложь;
		Если ДанныеЗаполнения.Свойство("ЗагрузкаИзФайлаExcel", ЗагрузкаИзExcel) И Булево(ЗагрузкаИзExcel) 
			И ЗначениеЗаполнено(ДанныеЗаполнения.Дата) Тогда		
			
			ДокументОбъект.Дата = ДанныеЗаполнения.Дата;
			
		Иначе
			
			ДокументОбъект.Дата = ТекущаяДатаСеанса();
			
		КонецЕсли;
		
		ЗаполнениеДокументов.Заполнить(ДокументОбъект, ДанныеЗаполнения);
		
		СписокВидовДоговоров = Новый СписокЗначений;
		Если ПередачаТовараКомитентом Тогда
			
			СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
			
		Иначе			
			
			СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
			СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
			СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
			
		КонецЕсли;
		ОтборПоВалюте       = Новый Структура("ЗначениеОтбора", ДокументОбъект.ВалютаДокумента);
		СтруктураПараметров = Новый Структура("ВалютаВзаиморасчетов", ОтборПоВалюте);
		
		БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(ДокументОбъект.ДоговорКонтрагента,
						ДокументОбъект.Контрагент, ДокументОбъект.Организация, СписокВидовДоговоров, СтруктураПараметров);
		
		// Заполнение реквизитов, специфичных для документа:
		ДокументОбъект.ДополнительныеСвойства.Вставить("ЗаполнитьСчетаУчетаПередЗаписью", Истина);
		
	КонецЕсли;
	
	// вручную переопределим, если требуется
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
	ВидОперации = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ВидОперации", Истина);	
	Если ПередачаТовараКомитентом Тогда
		
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
		
	Иначе
		
		Если ДанныеДляЗагрузки.Товары.Количество()=0 Тогда
			ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги;
		ИначеЕсли ДанныеДляЗагрузки.Услуги.Количество()=0 Тогда
			ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары;
		Иначе
			ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
		КонецЕсли;
		
	КонецЕсли;
	
	ДокументОбъект.СуммаВключаетНДС = Ложь;
	
	ТипСклада   = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Склад, "ТипСклада");
	ВидДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.ДоговорКонтрагента, "ВидДоговора");
	УчетВПродажныхЦенах = УчетнаяПолитика.СпособОценкиТоваровВРознице(ДокументОбъект.Организация, ДокументОбъект.Дата) = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости;
	РассчитыватьСуммаВРознице = ТипСклада <> Перечисления.ТипыСкладов.ОптовыйСклад
								И УчетВПродажныхЦенах
								И (ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия
									ИЛИ ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары)
								И ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;

	НТТ = ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка;
	СвойстваСчета4112 = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(
		ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ);
	РазделениеПоСтавкамВРознице = СвойстваСчета4112.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС
		ИЛИ СвойстваСчета4112.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС
		ИЛИ СвойстваСчета4112.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС;
	
	ЗаполнятьСтавкуНДСВРознице = НТТ И УчетВПродажныхЦенах И РазделениеПоСтавкамВРознице;
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(ДокументОбъект.Организация, ДокументОбъект.Дата);
	
	ДокументОбъект.Товары.Очистить();
	Для Каждого СтрокаНакладной Из ДанныеДляЗагрузки.Товары Цикл
		
		СтрокаТЧ = ДокументОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаНакладной);
		
		Если РассчитыватьСуммаВРознице Тогда
			ОбработкаТабличныхЧастей.ЗаполнитьЦенуВРозницеТабЧасти(СтрокаТЧ, ДокументОбъект, ДокументОбъект.Метаданные());
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВРозницеТабЧасти(СтрокаТЧ);
		КонецЕсли;
		
		Если ЗаполнятьСтавкуНДСВРознице Тогда
			СтрокаТЧ.СтавкаНДСВРознице = ?(ПлательщикНДС, СтрокаТЧ.СтавкаНДС, Перечисления.СтавкиНДС.БезНДС);
		КонецЕсли;
		
	КонецЦикла;
	
	ДокументОбъект.Услуги.Очистить();
	Для Каждого СтрокаНакладной Из ДанныеДляЗагрузки.Услуги Цикл
		СтрокаТЧ = ДокументОбъект.Услуги.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаНакладной);
		
		ЭтоКомиссия = ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
		
		СтрокаТЧ.ОтражениеВУСН = ПоступлениеТоваровУслугФормыКлиентСервер.ОтражениеВУСН(ДокументОбъект.ВидОперации, ЭтоКомиссия);
		
	КонецЦикла;
	
	Документы.ПоступлениеТоваровУслуг.ЗаполнитьСчетаУчетаВТабличнойЧасти(ДокументОбъект, "Товары");
	Документы.ПоступлениеТоваровУслуг.ЗаполнитьСчетаУчетаВТабличнойЧасти(ДокументОбъект, "Услуги");
	
	ЗаписатьДокумент(ДокументОбъект, РежимЗаписи);
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции

Функция НайтиСоздатьСчетФактуру(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураДляЗагрузки = ПодготовитьСтруктуруДляСчетФактуры(СтрокаДляЗагрузки, ДеревоРазбора);
	ДанныеДляЗагрузки = СтруктураДляЗагрузки.ДанныеЗаполненияШапки;
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда // получены изменения по существующему документу
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		КонецЕсли;
	Иначе  // создаем новый
		ДокументОбъект = Документы.СчетФактураПолученный.СоздатьДокумент();
		ДокументОбъект.Дата = ДанныеДляЗагрузки.ДатаПолучения;
		// вручную переопределим, если требуется
		ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеДляЗагрузки);
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.Заполнить(ДокументОбъект);
		
		Если СтруктураДляЗагрузки.ВыставленаКомитентом Тогда
			
			ДокументОбъект.КодВидаОперации = "04";
			
		Иначе
			
			ДокументОбъект.КодВидаОперации = "01";
			
		КонецЕсли;
		ДокументОбъект.ВидСчетаФактуры = ДанныеДляЗагрузки.ВидСчетаФактуры;
	КонецЕсли;
	
	ДокументОбъект.ДокументыОснования.Очистить();
	Для Каждого ДокументОснование Из ДанныеДляЗагрузки.ДокументыОснования Цикл
		ДокументОбъект.ДокументыОснования.Добавить().ДокументОснование = ДокументОснование;
	КонецЦикла;
	
	ДокументОбъект.ДокументОснование = ?(ДокументОбъект.ДокументыОснования.Количество()>0, ДокументОбъект.ДокументыОснования[0].ДокументОснование, Неопределено);
	Если ТипЗнч(ДокументОбъект.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
		
		ДокументОбъект.ДоговорКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.ДокументОснование, "ДоговорКонтрагента");
		
	КонецЕсли;
	
	ДокументОбъект.КодСпособаПолучения = 2;
	ДокументОбъект.НомерВходящегоДокумента = ДанныеДляЗагрузки.НомерВходящего;
	ДокументОбъект.ДатаВходящегоДокумента  = ДанныеДляЗагрузки.ДатаВходящего;
	ДокументОбъект.НомерИсходногоДокумента = ДанныеДляЗагрузки.НомерИсходногоДокумента;
	ДокументОбъект.ДатаИсходногоДокумента  = ДанныеДляЗагрузки.ДатаИсходногоДокумента;
	Если ДанныеДляЗагрузки.Свойство("Исправление") Тогда
		ДокументОбъект.Исправление       = ДанныеДляЗагрузки.Исправление;
		ДокументОбъект.НомерИсправления  = ДанныеДляЗагрузки.НомерИсправления;
		ДокументОбъект.ДатаИсправления   = ДанныеДляЗагрузки.ДатаИсправления;
	КонецЕсли;
	
	Если ДокументОбъект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
		Если ДокументОбъект.ДокументыОснования.Количество()>0 Тогда
			ОснованиеСчетаФактуры = ДокументОбъект.ДокументыОснования[0];
			ОснованиеСчетаФактуры.НомерИсходногоДокумента = ДанныеДляЗагрузки.НомерИсходногоДокумента;
			ОснованиеСчетаФактуры.ДатаИсходногоДокумента  = ДанныеДляЗагрузки.ДатаИсходногоДокумента;
			ОснованиеСчетаФактуры.УчитыватьИсправлениеИсходногоДокумента = ДанныеДляЗагрузки.Свойство("УчитыватьИсправлениеИсходногоДокумента");
			ОснованиеСчетаФактуры.СуммаУвеличение    = ДанныеДляЗагрузки.СуммаУвеличение;
			ОснованиеСчетаФактуры.СуммаУменьшение    = ДанныеДляЗагрузки.СуммаУменьшение;
			ОснованиеСчетаФактуры.СуммаНДСУвеличение = ДанныеДляЗагрузки.СуммаНДСУвеличение;
			ОснованиеСчетаФактуры.СуммаНДСУменьшение = ДанныеДляЗагрузки.СуммаНДСУменьшение;
			
			Если ДанныеДляЗагрузки.Свойство("УчитыватьИсправлениеИсходногоДокумента") Тогда
				ОснованиеСчетаФактуры.НомерИсправленияИсходногоДокумента = ДанныеДляЗагрузки.НомерИсправленияИсходногоДокумента;
				ОснованиеСчетаФактуры.ДатаИсправленияИсходногоДокумента  = ДанныеДляЗагрузки.ДатаИсправленияИсходногоДокумента;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ДокументОбъект.НомерИсходногоДокумента = ДанныеДляЗагрузки.НомерИсходногоДокумента;
		ДокументОбъект.ДатаИсходногоДокумента  = ДанныеДляЗагрузки.ДатаИсходногоДокумента;
	КонецЕсли;
	
	// Отражение вычета НДС по умолчанию
	СтруктураПараметров	= Новый Структура("Дата, Организация, ВидСчетаФактуры, ДокументОснование, Исправление");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ДокументОбъект);
	ДокументОбъект.НДСПредъявленКВычету = Документы.СчетФактураПолученный.ПолучитьПорядокОтраженияВычетаПоУмолчанию(СтруктураПараметров);
	
	ДокументОбъект.СуммаУвеличение    = ДанныеДляЗагрузки.СуммаУвеличение;
	ДокументОбъект.СуммаУменьшение    = ДанныеДляЗагрузки.СуммаУменьшение;
	ДокументОбъект.СуммаНДСУвеличение = ДанныеДляЗагрузки.СуммаНДСУвеличение;
	ДокументОбъект.СуммаНДСУменьшение = ДанныеДляЗагрузки.СуммаНДСУменьшение;
	Если ДанныеДляЗагрузки.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
		ДокументОбъект.СуммаДокумента     = ?(ДанныеДляЗагрузки.СуммаУвеличение = Неопределено, 0, ДанныеДляЗагрузки.СуммаУвеличение)
											- ?(ДанныеДляЗагрузки.СуммаУменьшение = Неопределено, 0, ДанныеДляЗагрузки.СуммаУменьшение);
		ДокументОбъект.СуммаНДСДокумента     = ?(ДанныеДляЗагрузки.СуммаНДСУвеличение = Неопределено, 0, ДанныеДляЗагрузки.СуммаНДСУвеличение)
											- ?(ДанныеДляЗагрузки.СуммаНДСУменьшение = Неопределено, 0, ДанныеДляЗагрузки.СуммаНДСУменьшение);
	Иначе
		ДокументОбъект.СуммаДокумента     = ДанныеДляЗагрузки.СуммаДокумента;
		ДокументОбъект.СуммаНДСДокумента  = ДанныеДляЗагрузки.СуммаНДСДокумента;
	КонецЕсли;
	
	ЗаписатьДокумент(ДокументОбъект, РежимЗаписи);
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции

Функция ПодготовитьСтруктуруДляПоступленияТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	
	Товары = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	Услуги = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка().Услуги.ВыгрузитьКолонки();
	
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		Если СтрокаРеквизита.Реквизит = "СписокОписаний" Тогда
			СтрокаРеквизитаОписанийРабот = ПолучитьЗначениеРеквизита(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			Для Каждого СтрокаРеквизитаОписания Из СтрокаРеквизитаОписанийРабот.Строки Цикл
				Если СтрокаРеквизитаОписания.Строки.Количество() = 0 Тогда
					Реквизит = ПолучитьЗначениеРеквизита(СтрокаРеквизитаОписания, СтрокаРеквизитаОписания.Реквизит, Истина, ДеревоРазбора);
					Если ЗначениеЗаполнено(Реквизит) Тогда
						ДанныеЗаполненияШапки.Вставить(СтрокаРеквизитаОписания.Реквизит, Реквизит);
					КонецЕсли;
				Иначе
					ДанныеДляЗаполненияСтрокиТЧ = ПолучитьДанныеСтрокиТЧ(СтрокаРеквизитаОписания.Строки, ДеревоРазбора);
					ЗаполнитьЗначенияСвойств(Услуги.Добавить(), ДанныеДляЗаполненияСтрокиТЧ);
				КонецЕсли;
			КонецЦикла;
		Иначе
			Если СтрокаРеквизита.Строки.Количество() = 0 Тогда
				Реквизит = ПолучитьЗначениеРеквизита(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
				Если ЗначениеЗаполнено(Реквизит) Тогда
					ДанныеЗаполненияШапки.Вставить(СтрокаРеквизита.Реквизит, Реквизит);
				КонецЕсли;
			Иначе
				ДанныеДляЗаполненияСтрокиТЧ = ПолучитьДанныеСтрокиТЧ(СтрокаРеквизита.Строки, ДеревоРазбора);
				Если ДанныеДляЗаполненияСтрокиТЧ.Свойство("Услуга")
					И ДанныеДляЗаполненияСтрокиТЧ.Услуга = Истина Тогда
					ЗаполнитьЗначенияСвойств(Услуги.Добавить(), ДанныеДляЗаполненияСтрокиТЧ);
				Иначе
					ЗаполнитьЗначенияСвойств(Товары.Добавить(), ДанныеДляЗаполненияСтрокиТЧ);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СкопироватьЗначениеСтруктуры(ДанныеЗаполненияШапки, "Валюта", "ВалютаДокумента");
	СкопироватьЗначениеСтруктуры(ДанныеЗаполненияШапки, "Курс", "КурсВзаиморасчетов");
	Если НЕ ДанныеЗаполненияШапки.Свойство("КратностьВзаиморасчетов") Тогда
		ДанныеЗаполненияШапки.Вставить("КратностьВзаиморасчетов", 1);
	КонецЕсли;
	
	Организация = ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "Организация", Истина, ДеревоРазбора);
	Если Организация = Неопределено Тогда
		
		ИндексСтроки = ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "Организация", Истина);
		НайденнаяСтрока = ДеревоРазбора.Строки.Найти(ИндексСтроки, "ИндексСтроки", Истина);
		ИННОрганизации = ПолучитьЗначениеРеквизита(НайденнаяСтрока, "ИНН", Истина);
		КППОрганизации = ПолучитьЗначениеРеквизита(НайденнаяСтрока, "КПП", Истина);
		
		Если ИННОрганизации <> Неопределено Тогда
			
			Организация = СсылкаНаОбъектПоИННКПП("Организации", ИННОрганизации, КППОрганизации);
			Если Организация = Неопределено Тогда
				
				Организация = СсылкаНаОбъектПоИННКПП("Организации", ИННОрганизации, Неопределено);			
				
			КонецЕсли;
			Если Организация <> Неопределено Тогда
				
				ДанныеЗаполненияШапки.Вставить("Организация", Организация);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Вставить("СчетНаОплатуПоставщика",  ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "Основание", Истина, ДеревоРазбора));
	
	ДанныеЗаполненияШапки.Вставить("НомерВходящегоДокумента", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "Номер"));
	ДанныеЗаполненияШапки.Вставить("ДатаВходящегоДокумента",  ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "Дата"));
	
	ДанныеЗаполненияШапки.Удалить("ВидОперации");
	
	ДанныеДляОбъекта.Вставить("Шапка", ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", Товары);
	ДанныеДляОбъекта.Вставить("Услуги", Услуги);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляСчетФактуры(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	ДанныеЗаполненияШапки.Вставить("НомерВходящего", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "Номер"));
	ДанныеЗаполненияШапки.Вставить("ДатаВходящего", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "Дата"));
	
	ДанныеЗаполненияШапки.Вставить("НомерИсходногоДокумента", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "НомерСчетаФактуры"));
	ДанныеЗаполненияШапки.Вставить("ДатаИсходногоДокумента", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "ДатаСчетаФактуры"));
	
	ДанныеЗаполненияШапки.Вставить("ДатаПолучения", ТекущаяДатаСеанса());
	
	Если СтрокаДляЗагрузки.ОписаниеОбъекта = "Корректировочный" Тогда
		ДанныеЗаполненияШапки.Вставить("ВидСчетаФактуры",Перечисления.ВидСчетаФактурыПолученного.Корректировочный);
		Если ЗначениеЗаполнено (ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "НомерИсправления")) Тогда
			ДанныеЗаполненияШапки.Вставить("Исправление", Истина);
			ДанныеЗаполненияШапки.Вставить("НомерИсправления", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "НомерИсправления"));
			ДанныеЗаполненияШапки.Вставить("ДатаИсправления", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "ДатаИсправления"));
		КонецЕсли;
		Если ЗначениеЗаполнено(ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "НомерИсправленияСчетаФактуры")) Тогда
			ДанныеЗаполненияШапки.Вставить("УчитыватьИсправлениеИсходногоДокумента", Истина);
			ДанныеЗаполненияШапки.Вставить("НомерИсправленияИсходногоДокумента", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "НомерИсправленияСчетаФактуры"));
			ДанныеЗаполненияШапки.Вставить("ДатаИсправленияИсходногоДокумента", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "ДатаИсправленияСчетаФактуры"));
		КонецЕсли;
	Иначе
		ДанныеЗаполненияШапки.Вставить("ВидСчетаФактуры",Перечисления.ВидСчетаФактурыПолученного.НаПоступление);
		Если ЗначениеЗаполнено (ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "НомерИсправления")) Тогда
			ДанныеЗаполненияШапки.Вставить("Исправление", Истина);
			ДанныеЗаполненияШапки.Вставить("НомерИсправления", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "НомерИсправления"));
			ДанныеЗаполненияШапки.Вставить("ДатаИсправления", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "ДатаИсправления"));
		КонецЕсли;
	КонецЕсли;
	
	//Заполняем документы-основания
	МассивДокументовОснований = Новый Массив();
	НайденнаяСтрока = СтрокаДляЗагрузки.Строки.Найти("ДокументыОснования", "Реквизит");
	Если НайденнаяСтрока <> Неопределено Тогда 
		Для Каждого Строка Из НайденнаяСтрока.Строки Цикл
			МассивДокументовОснований.Добавить(Строка.СсылкаНаОбъект);
		КонецЦикла;
	КонецЕсли;
	ДанныеЗаполненияШапки.Вставить("ДокументыОснования", МассивДокументовОснований);
	
	ВалКод = ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "ВалКод");
	Если НЕ  ВалКод="643" Тогда
		ДанныеЗаполненияШапки.Вставить("ВИностраннойВалюте", Истина);
		ДанныеЗаполненияШапки.Вставить("ВалютаДокумента", НайтиСсылкуНаОбъект("Валюты", ВалКод));
	Иначе
		ДанныеЗаполненияШапки.Вставить("ВалютаДокумента", Константы.ВалютаРегламентированногоУчета.Получить());
	КонецЕсли;
	
	Комиссионер = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ДанныеКомиссионера");
	ВыставленаКомитентом = Ложь;
	Если ЗначениеЗаполнено(Комиссионер) Тогда
		
		ВыставленаКомитентом = Истина;
						
	КонецЕсли;
	
	// Cчет-фактура на поступление
	ДанныеЗаполненияШапки.Вставить("Организация", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Организация", Истина, ДеревоРазбора));
	Контрагент = ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "Контрагент", Истина, ДеревоРазбора);
	ДанныеЗаполненияШапки.Вставить("Контрагент", Контрагент); 
	
	ДанныеЗаполненияШапки.Вставить("СуммаДокумента",ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "СтТовУчНал"));
	ДанныеЗаполненияШапки.Вставить("СуммаНДСДокумента",ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "СумНДС"));
	
	ДанныеЗаполненияШапки.Вставить("СуммаУменьшение",ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "СтТовУчНалВсегоУм"));
	ДанныеЗаполненияШапки.Вставить("СуммаНДСУменьшение",ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "СумНДСУм"));

	ДанныеЗаполненияШапки.Вставить("СуммаУвеличение",ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "СтТовУчНалВсегоУвел"));
	ДанныеЗаполненияШапки.Вставить("СуммаНДСУвеличение",ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "СумНДСУвел"));
	
	Возврат Новый Структура("ДанныеЗаполненияШапки, ВыставленаКомитентом", ДанныеЗаполненияШапки, ВыставленаКомитентом);
	
КонецФункции

Функция СоздатьПерезаполнитьНоменклатуруПоставщика(СтрокаОбъекта, ДеревоРазбора)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(СтрокаОбъекта.СсылкаНаОбъект) Тогда
		НовЭл = СтрокаОбъекта.СсылкаНаОбъект.ПолучитьОбъект();
		СсылкаНаОбъектНоменклатура = СтрокаОбъекта.СсылкаНаОбъект.Номенклатура;
	Иначе
		НовЭл = Справочники.НоменклатураПоставщиков.СоздатьЭлемент();
		СсылкаНаОбъектНоменклатура = Неопределено;
	КонецЕсли;
	//
	ЗаполнитьРеквизитыОбъектаПоСоответствиюИмен(СтрокаОбъекта, НовЭл);
	// если нет ссылки на номенклатуру, то будем создавать ее
	Если НЕ ЗначениеЗаполнено(СсылкаНаОбъектНоменклатура) Тогда 
		НайденнаяСтрока = СтрокаОбъекта.Строки.Найти("Номенклатура", "Реквизит", Истина);
		Если НайденнаяСтрока <> Неопределено Тогда
			Если ЗначениеЗаполнено(НайденнаяСтрока.СсылкаНаОбъект) Тогда // Найдена ссылка
				СсылкаНаОбъектНоменклатура = НайденнаяСтрока.СсылкаНаОбъект;
			Иначе // будем искать по индексу
				ИндексИскомойСтроки = НайденнаяСтрока.ЗначениеРеквизита;	
				НайденнаяСтрока = ДеревоРазбора.Строки.Найти(ИндексИскомойСтроки, "ИндексСтроки", Истина); // строка с объектом
				Если НайденнаяСтрока <> Неопределено Тогда
					Если ЗначениеЗаполнено(НайденнаяСтрока.СсылкаНаОбъект) Тогда // есть ссылка на объект БД
						СсылкаНаОбъектНоменклатура = НайденнаяСтрока.СсылкаНаОбъект;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		НовЭл.Номенклатура = СсылкаНаОбъектНоменклатура;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(НовЭл.Код) Тогда
		НовЭл.УстановитьНовыйКод();
	КонецЕсли;
	//
	НовЭл.ОбменДанными.Загрузка = Истина;
	Попытка
		НовЭл.Записать();
	Исключение
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Создание элемента справочника %1.'"),
			"Номенклатура поставщиков") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(Текст, 2, УровеньЖурналаРегистрации.Ошибка);
		ВызватьИсключение;
	КонецПопытки;
	
	СсылкаНаОбъект = НовЭл.Ссылка;
	
	Возврат СсылкаНаОбъект;
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Формирование данных для электронных документов

Процедура ЗаполнитьФИОИДолжность(СтруктураПриемник, ИсточникДанных, Должность = Неопределено)
	
	Фамилия = ""; Имя = ""; Отчество = "";
	ЭлектронныеДокументы.ФамилияИнициалыФизЛица(ИсточникДанных, Фамилия, Имя, Отчество);
	СтруктураПриемник.Вставить("Фамилия", Фамилия);
	СтруктураПриемник.Вставить("Имя", Имя);
	СтруктураПриемник.Вставить("Отчество", Отчество);
	Если Должность <> Неопределено Тогда
		СтруктураПриемник.Вставить("Должность", Должность);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Заполнение объектов

// Перезаполняет реквизиты шапки объекта.
//
// Параметры:
//  ТекущийОбъект    - Объект ИБ, реквизиты шапки которого необходимо заполнить,
//  ДанныеЗаполнения - Структура значений, которые необходимо подставить в объект ИБ.
//
Процедура ПерезаполнениеЗначенийРеквизитовШапки(ТекущийОбъект, ДанныеЗаполнения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого Строка Из ДанныеЗаполнения Цикл
		
		Если ЗначениеЗаполнено(Строка.Ключ) И ТекущийОбъект.Метаданные().Реквизиты.Найти(Строка.Ключ) <> Неопределено Тогда
			Если ТекущийОбъект[Строка.Ключ] <> Строка.Значение Тогда
				ТекущийОбъект[Строка.Ключ] = Строка.Значение;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет реквизиты объекта по соответствию наименований
//
// Параметры:
//  СтрокаМассива - СтрокаДереваЗначений, набор параметров, по которому будет происходить заполнение
//  ОбъектМетаданных - Объект ИБ, реквизиты которого необходимо заполнить.
//
Процедура ЗаполнитьРеквизитыОбъектаПоСоответствиюИмен(СтрокаМассива, ОбъектМетаданных)
	
	Для Каждого ТекСтрока Из СтрокаМассива.Строки Цикл
		Если НЕ ЗначениеЗаполнено(ТекСтрока.ЗначениеРеквизита) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЭтоСтандартныйРеквизит(ОбъектМетаданных.Метаданные().СтандартныеРеквизиты, ТекСтрока.Реквизит) Тогда
			ОбъектМетаданных[ТекСтрока.Реквизит] = ТекСтрока.ЗначениеРеквизита;
		ИначеЕсли ОбъектМетаданных.Метаданные().Реквизиты.Найти(ТекСтрока.Реквизит) <> Неопределено Тогда
			Если ЗначениеЗаполнено(ТекСтрока.СсылкаНаОбъект) Тогда
				ОбъектМетаданных[ТекСтрока.Реквизит] = ТекСтрока.СсылкаНаОбъект;
			Иначе
				ОбъектМетаданных[ТекСтрока.Реквизит] = ТекСтрока.ЗначениеРеквизита;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВставитьЗначениеВДерево(ДеревоДанных, ИмяРеквизита, ЗначениеРеквизита)
	
	НовСтрока = ДеревоДанных.Строки.Найти(ИмяРеквизита, "ПолныйПуть", Истина);
	Если НовСтрока = Неопределено Тогда
		НовСтрока = ДеревоДанных.Строки.Добавить();
		НомерУровня = СтрЧислоВхождений(ИмяРеквизита, ".") + 1;
		НовСтрока.ПолныйПуть = ИмяРеквизита;
		НовСтрока["Уровень" + НомерУровня] = ОбщегоНазначенияЭД.НазваниеКолонки(ИмяРеквизита);
	КонецЕсли;
	НовСтрока.Значение = ЗначениеРеквизита;

КонецПроцедуры

Функция ПолучитьОбъектТипаCML(Тип, ВерсияСхемы = "4.01") Экспорт
	
	Если ТипЗнч(Тип) = Тип("Строка") Тогда
		ТипОбъекта = ПолучитьТипОбъектаCML(Тип, ВерсияСхемы);
	Иначе
		ТипОбъекта = Тип;
	КонецЕсли;
	
	Если ТипОбъекта = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйОбъект = ФабрикаXDTO.Создать(ТипОбъекта);
	
	Возврат НовыйОбъект;
	
КонецФункции

Функция ПолучитьТипОбъектаCML(Тип, ВерсияСхемы)
	
	МассивПути = ЭлектронныеДокументыВнутренний.МассивПодстрок(Тип, ".");
	
	ПервыйЭлемент = МассивПути[0];
	Если Лев(ПервыйЭлемент,1) = "{" И Прав(ПервыйЭлемент,1) = "}" Тогда
		ИмяПакета = Сред(ПервыйЭлемент, 2, СтрДлина(ПервыйЭлемент) - 2);
		Коллекция = ФабрикаXDTO.Пакеты.Получить(ИмяПакета).КорневыеСвойства;
	ИначеЕсли ВерсияСхемы <> "4.02" Тогда
		ТипОбъекта = ФабрикаXDTO.Тип(ВерсияСхемы, ПервыйЭлемент);
		Коллекция = ТипОбъекта.Свойства;
	Иначе
		ТипОбъекта = ФабрикаXDTO.Тип("http://v8.1c.ru/edi/edi_stnd", ПервыйЭлемент);
		Коллекция = ТипОбъекта.Свойства;
	КонецЕсли;
	
	МассивПути.Удалить(0);
	Пока МассивПути.Количество() > 0 Цикл
		
		Если Коллекция = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Свойство = Коллекция.Получить(МассивПути[0]);
		Если Свойство = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ТипОбъекта = Свойство.Тип;
		МассивПути.Удалить(0);
		Попытка
			Коллекция = ТипОбъекта.Свойства;
		Исключение
			Коллекция = Неопределено;
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат ТипОбъекта;
	
КонецФункции

Процедура ЗаполнитьДанныеГрузоОтправителяПолучателя(ДеревоДанных, СведенияОбУчастнике, ВидУчастника, ВидАдреса = "Факт")
	
	Если СведенияОбУчастнике.ТипЮрФизЛица = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".Наименование.НаименованиеОрганизации",
			СведенияОбУчастнике.ПолноеНаименование);
	Иначе
		Фамилия = ""; Имя = ""; Отчество = "";
		ЭлектронныеДокументы.ФамилияИнициалыФизЛица(СведенияОбУчастнике.ПолноеНаименование, Фамилия, Имя, Отчество);
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".Наименование.ФИОИП.Фамилия",
			Фамилия);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".Наименование.ФИОИП.Имя",
			Имя);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".Наименование.ФИОИП.Отчество",
			Отчество);
	КонецЕсли;
	
	АдресУчастника = Новый Структура;
	ЭлектронныеДокументыПереопределяемый.ПолучитьАдресСтруктурой(АдресУчастника, СведенияОбУчастнике.ЮрФизЛицоСсылка, "Ссылка", ВидАдреса, "");
	
	Если ЗначениеЗаполнено(АдресУчастника) Тогда
		ТипАдреса = ?(АдресУчастника.АдресРФ, "Структурированный", "Иностранный");
		ЗаполнитьАдресВДереве(ДеревоДанных, АдресУчастника, ТипАдреса, ВидУчастника);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Создание элементов справочников

// Создает контрагента в ИБ по структуре параметров.
//
// Параметры:
//  ПараметрыКонтрагента - Структура параметров нового контрагента,
//  НовыйКонтрагент - Ссылка, ссылка на элемент справочника Контрагенты.
//
Процедура СоздатьКонтрагентаВБД(ПараметрыКонтрагента, НовыйКонтрагент) Экспорт
	
	
КонецПроцедуры

Процедура ЗаполнитьДанныеФизическогоЛица(ДеревоДанных, ТипЛица, СтруктураФИО, НаименованиеДолжности = "")
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ТипЛица + ".Фамилия", СтруктураФИО.Фамилия);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ТипЛица + ".Имя", СтруктураФИО.Имя);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ТипЛица + ".Отчество", СтруктураФИО.Отчество);
	Если ЗначениеЗаполнено(НаименованиеДолжности) Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ТипЛица + ".Должность", НаименованиеДолжности);
	КонецЕсли;
	
КонецПроцедуры

Функция РассчитатьИтоговыеСуммыДокумента(ТаблицаДокумента)
	
	ИтоговыеСуммы = ИтоговыеСуммыДокумента();
	
	Для Каждого Строка ИЗ ТаблицаДокумента Цикл
		
		ИтоговыеСуммы.ИтогоМест        = ИтоговыеСуммы.ИтогоМест        + ?(ЗначениеЗаполнено(Строка.КоличествоМест),Строка.КоличествоМест, 0);
		ИтоговыеСуммы.ИтогоСуммаБезНДС = ИтоговыеСуммы.ИтогоСуммаБезНДС + Строка.СуммаБезНДС;
		ИтоговыеСуммы.ИтогоНДС         = ИтоговыеСуммы.ИтогоНДС         + Строка.СуммаНДС;
		ИтоговыеСуммы.ИтогоСуммаСНДС   = ИтоговыеСуммы.ИтогоСуммаСНДС   + Строка.СуммаБезНДС + Строка.СуммаНДС;
		
	КонецЦикла;
	
	ИтоговыеСуммы.КоличествоПорядковыхНомеровЗаписей = ТаблицаДокумента.Количество();
	
	Возврат ИтоговыеСуммы;
	
КонецФункции

Функция РассчитатьИтоговыеСуммыКорректировочногоДокумента(ТаблицаДокумента)
	
	ИтоговыеСуммы = ИтоговыеСуммыДокумента();
	
	Для Каждого Строка ИЗ ТаблицаДокумента Цикл
		
		ИтоговыеСуммы.ИтогоСуммаБезНДС = ИтоговыеСуммы.ИтогоСуммаБезНДС + Строка.СуммаБезНДС;
		ИтоговыеСуммы.ИтогоНДС         = ИтоговыеСуммы.ИтогоНДС         + Строка.СуммаНДС;
		ИтоговыеСуммы.ИтогоСуммаСНДС   = ИтоговыеСуммы.ИтогоСуммаСНДС   + Строка.СуммаБезНДС + Строка.СуммаНДС;
		
		ИтоговыеСуммы.ИтогоСуммаДоКорректировки     = ИтоговыеСуммы.ИтогоСуммаДоКорректировки     + Строка.СуммаБезНДСДоКорректировки;
		ИтоговыеСуммы.ИтогоНДСДоКорректировки       = ИтоговыеСуммы.ИтогоНДСДоКорректировки       + Строка.СуммаНДСДоКорректировки;
		ИтоговыеСуммы.ИтогоСуммаСНДСДоКорректировки = ИтоговыеСуммы.ИтогоСуммаСНДСДоКорректировки + Строка.СуммаСНДСДоКорректировки;
		
	КонецЦикла;
	
	ИтоговыеСуммы.КоличествоПорядковыхНомеровЗаписей = ТаблицаДокумента.Количество();
	
	Возврат ИтоговыеСуммы;
	
КонецФункции

Функция ИтоговыеСуммыДокумента()
	
	Структура = Новый Структура;
	
	// Инициализация итогов по документу.
	Структура.Вставить("ИтогоМест", 0);
	Структура.Вставить("ИтогоСуммаСНДС", 0);
	Структура.Вставить("ИтогоСуммаБезНДС", 0);
	Структура.Вставить("ИтогоНДС", 0);
	Структура.Вставить("ИтогоСуммаСНДСДоКорректировки", 0);
	Структура.Вставить("ИтогоСуммаДоКорректировки", 0);
	Структура.Вставить("ИтогоНДСДоКорректировки", 0);
	Структура.Вставить("ИтогоМассаБрутто", 0);
	Структура.Вставить("ИтогоМассаНетто", 0);
	//Структура.Вставить("ИтогоРазницаБезНДСУвеличение", 0);
	//Структура.Вставить("ИтогоРазницаБезНДСУменьшение", 0);
	//Структура.Вставить("ИтогоРазницаНДСУвеличение", 0);
	//Структура.Вставить("ИтогоРазницаНДСУменьшение", 0);
	//Структура.Вставить("ИтогоРазницаСНДСУвеличение", 0);
	//Структура.Вставить("ИтогоРазницаСНДСУменьшение", 0);
	
	Структура.Вставить("КоличествоПорядковыхНомеровЗаписей", 0);
	Структура.Вставить("СуммаПрописью", "");
	
	Возврат Структура;
	
КонецФункции

// Получает итоговые суммы и заполняет колонку "Сумма документа" в таблице документов на подпись.
//
// Параметры:
//  ТаблицаДокументовНаПодпись - ТаблицаЗначений - таблица документов на подпись.
//
Процедура ОпределитьСуммыВТаблицеДокументовНаПодпись(ТаблицаДокументовНаПодпись) Экспорт
	
	Для каждого СтрокаТаблицы Из ТаблицаДокументовНаПодпись Цикл
		ВладелецЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.ЭлектронныйДокумент, "ВладелецФайла");
		Если ВладелецЭД.Метаданные().Реквизиты.Найти("СуммаДокумента") <> Неопределено Тогда
			СтрокаТаблицы.СуммаДокумента = ВладелецЭД.СуммаДокумента;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Формирование данных для электронных документов

Функция НайтиСоздатьСчетНаОплатуПоставщика(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляСчетаНаОплатуПоставщика(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Если ДанныеДляЗагрузки.Свойство("Шапка") Тогда 
		ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	КонецЕсли;
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда // получены изменения по существующему документу
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
		Если ДокументОбъект.Проведен Тогда
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		КонецЕсли;
	Иначе // создаем новый 
		ДокументОбъект = Документы.СчетНаОплатуПоставщика.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		
		ЗаполнениеДокументов.Заполнить(ДокументОбъект, ДанныеЗаполнения);
		
		СписокВидовДоговоров = Новый СписокЗначений;
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
		ОтборПоВалюте       = Новый Структура("ЗначениеОтбора", ДокументОбъект.ВалютаДокумента);
		СтруктураПараметров = Новый Структура("ВалютаВзаиморасчетов", ОтборПоВалюте);
		
		БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(ДокументОбъект.ДоговорКонтрагента,
						ДокументОбъект.Контрагент, ДокументОбъект.Организация, СписокВидовДоговоров, СтруктураПараметров);

	КонецЕсли;
	
	// вручную переопределим, если требуется
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
	
	ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
	
	ЗаписатьДокумент(ДокументОбъект, РежимЗаписи);
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции

Функция ПодготовитьСтруктуруДляСчетаНаОплатуПоставщика(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	
	Товары = Документы.СчетНаОплатуПоставщика.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	
	ЦенаВключаетНДС = ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "ЦенаВключаетНДС", Истина, ДеревоРазбора);
	Если ЦенаВключаетНДС = Неопределено Тогда
		ЦенаВключаетНДС = Ложь;
	КонецЕсли;
	
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		
		Если СтрокаРеквизита.Строки.Количество() = 0 Тогда
			
			Реквизит = ПолучитьЗначениеРеквизита(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			Если ЗначениеЗаполнено(Реквизит) Тогда
				ДанныеЗаполненияШапки.Вставить(СтрокаРеквизита.Реквизит, Реквизит);
			КонецЕсли;
			
		Иначе
			
			ДанныеДляЗаполненияСтрокиТЧ = ПолучитьДанныеСтрокиТЧ(СтрокаРеквизита.Строки, ДеревоРазбора, ЦенаВключаетНДС);			
			ЗаполнитьЗначенияСвойств(Товары.Добавить(), ДанныеДляЗаполненияСтрокиТЧ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СкопироватьЗначениеСтруктуры(ДанныеЗаполненияШапки, "Валюта", "ВалютаДокумента");
	СкопироватьЗначениеСтруктуры(ДанныеЗаполненияШапки, "Курс", "КурсВзаиморасчетов");
	
	СкопироватьЗначениеСтруктуры(ДанныеЗаполненияШапки, "ЦенаВключаетНДС", "СуммаВключаетНДС");
	
	Если НЕ ДанныеЗаполненияШапки.Свойство("КратностьВзаиморасчетов") Тогда
		ДанныеЗаполненияШапки.Вставить("КратностьВзаиморасчетов", 1);
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Вставить("НомерВходящегоДокумента",ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "Номер"));
	ДанныеЗаполненияШапки.Вставить("ДатаВходящегоДокумента", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "Дата"));
	
	ДанныеДляОбъекта.Вставить("Шапка", ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", Товары);	
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция НайтиСоздатьКорректировкуПоступления(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляКорректировкиПоступления(СтрокаДляЗагрузки, ДеревоРазбора);
	
	ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	РежимЗаписи      = РежимЗаписиДокумента.Запись;
	
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда // получены изменения по существующему документу
		
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
		
		Если СсылкаНаВладельца.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		КонецЕсли;
		
	Иначе // создаем новый
		
		ДокументОбъект = Документы.КорректировкаПоступления.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		// вручную переопределим, если требуется
		ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
		
		ЗаполнениеДокументов.Заполнить(ДокументОбъект, ДанныеЗаполнения);
		
	КонецЕсли;
	
	Если ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийЭД.Исправление Тогда
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки;
	Иначе
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение;
	КонецЕсли;
	
	ДокументОбъект.ЗаполнитьСвойстваШапки();
	
	Если ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийЭД.Исправление Тогда
		ДокументОбъект.НомерИсправления = ДанныеЗаполнения.НомерИсправления;
		ДокументОбъект.ДатаИсправления = ДанныеЗаполнения.ДатаИсправления;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения.НомерИсходногоДокумента) Тогда
		ДокументОбъект.НомерИсходногоДокумента = ДанныеЗаполнения.НомерИсходногоДокумента;
		ДокументОбъект.ДатаИсходногоДокумента  = ДанныеЗаполнения.ДатаИсходногоДокумента;
		Если ЗначениеЗаполнено(ДанныеЗаполнения.НомерИсправленияИсходногоДокумента) Тогда
			ДокументОбъект.НомерИсправленияИсходногоДокумента = ДанныеЗаполнения.НомерИсправленияИсходногоДокумента;
			ДокументОбъект.ДатаИсправленияИсходногоДокумента  = ДанныеЗаполнения.ДатаИсправленияИсходногоДокумента;
		КонецЕсли;
	КонецЕсли;
	
	ДокументПоступления = ДокументОбъект.ДокументПоступления;
	Если Не ЗначениеЗаполнено(ДокументПоступления) И ДанныеЗаполнения.Свойство("Основание") Тогда
		ДокументПоступления = ДанныеЗаполнения.Основание;
	КонецЕсли;
	
	// Заполненим корректировку поступления данными основания
	Если ЗначениеЗаполнено(ДокументПоступления) Тогда
		ДокументОбъект.Заполнить(ДокументПоступления);
	КонецЕсли;
	
	// Заполним табличные части данными корректировки
	ТабличныеЧастиДляЗаполения = Новый Структура("Товары, Услуги");
	СтрокиТабличнойЧастиДляПерезаполнения = Новый Структура("Товары, Услуги",
			"Количество, Цена, Сумма, СуммаНДС", "Количество, Цена, Сумма, СуммаНДС, Содержание");
	СтрокиТабличнойЧастиДляПерезаполненияНового = Новый Структура("Товары, Услуги",
			"КоличествоДоИзменения, ЦенаДоИзменения, СуммаДоИзменения, СуммаНДСДоИзменения", "КоличествоДоИзменения, ЦенаДоИзменения, СуммаДоИзменения, СуммаНДСДоИзменения, СодержаниеДоИзменения");
	Для Каждого ТабличнаяЧасть Из ТабличныеЧастиДляЗаполения Цикл
		
		ИмяТЧ = ТабличнаяЧасть.Ключ;
		
		СтруктураПоиска = Новый Структура("Номенклатура, СтавкаНДС");
		
		Для Каждого СтрокаДокумента Из ДокументОбъект[ИмяТЧ] Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаДокумента);
			РезультатПоискаДанныхЗаполнения = ДанныеДляЗагрузки[ИмяТЧ].НайтиСтроки(СтруктураПоиска);
			
			Если РезультатПоискаДанныхЗаполнения.Количество() = 0 Тогда
				
				// Такой строки в данных корректировки нет - обнуляем данные строки документа.
				СтрокаДокумента.Количество = 0;
				СтрокаДокумента.Цена       = 0;
				СтрокаДокумента.Сумма      = 0;
				СтрокаДокумента.СуммаНДС   = 0;
				
			Иначе
				
				СтрокаДанныхЗаполнения = РезультатПоискаДанныхЗаполнения[0];
				ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаДанныхЗаполнения, СтрокиТабличнойЧастиДляПерезаполнения[ИмяТЧ]);
				
				// Удалим обработанную строку из данных заполнения
				ДанныеДляЗагрузки[ИмяТЧ].Удалить(СтрокаДанныхЗаполнения);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Добавим новые строки в документ
		Если ДанныеДляЗагрузки[ИмяТЧ].Количество() > 0 Тогда
			
			Для Каждого СтрокаДанныхЗаполнения Из ДанныеДляЗагрузки[ИмяТЧ] Цикл
				
				НоваяСтрока = ДокументОбъект[ИмяТЧ].Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанныхЗаполнения, , СтрокиТабличнойЧастиДляПерезаполненияНового[ИмяТЧ]);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаписатьДокумент(ДокументОбъект, РежимЗаписи);
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции

Функция ПодготовитьСтруктуруДляКорректировкиПоступления(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта      = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	
	Товары = Документы.КорректировкаПоступления.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	Услуги = Документы.КорректировкаПоступления.ПустаяСсылка().Услуги.ВыгрузитьКолонки();
	
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		
		Если СтрокаРеквизита.Реквизит = "СписокОписаний" Тогда
			 
			СтрокаРеквизитаОписанийРабот = ПолучитьЗначениеРеквизита(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			
			Для Каждого СтрокаРеквизитаОписания Из СтрокаРеквизитаОписанийРабот.Строки Цикл
				
				Если СтрокаРеквизитаОписания.Строки.Количество() = 0 Тогда
					ЗначениеРеквизита = ПолучитьЗначениеРеквизита(СтрокаРеквизитаОписания, СтрокаРеквизитаОписания.Реквизит, Истина, ДеревоРазбора);
					Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
						ДанныеЗаполненияШапки.Вставить(СтрокаРеквизитаОписания.Реквизит, ЗначениеРеквизита);
					КонецЕсли;
				Иначе
					ДанныеДляЗаполненияСтрокиТЧ = ПолучитьДанныеСтрокиТЧ(СтрокаРеквизитаОписания.Строки, ДеревоРазбора);
					ЗаполнитьЗначенияСвойств(Услуги.Добавить(), ДанныеДляЗаполненияСтрокиТЧ);
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			Если СтрокаРеквизита.Строки.Количество() = 0 Тогда 
				
				// Заполним реквизит шапки
				ЗначениеРеквизита = ПолучитьЗначениеРеквизита(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
				
				Если СтрокаРеквизита.Реквизит = "ДатаПоДаннымКлиента" Тогда
					ИмяРеквизита = "ДатаПоДаннымПокупателя";
				ИначеЕсли СтрокаРеквизита.Реквизит = "НомерПоДаннымКлиента" Тогда
					ИмяРеквизита = "НомерПоДаннымПокупателя";
				ИначеЕсли СтрокаРеквизита.Реквизит = "Валюта" Тогда
					ИмяРеквизита = "ВалютаДокумента";
				ИначеЕсли СтрокаРеквизита.Реквизит = "ДокументОснования" Тогда
					ИмяРеквизита = "ДокументПоступления";
				Иначе
					ИмяРеквизита = СтрокаРеквизита.Реквизит;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
					ДанныеЗаполненияШапки.Вставить(ИмяРеквизита, ЗначениеРеквизита);
				КонецЕсли;
				
			Иначе 
				
				// Добавим строку табличной части
				ДанныеДляЗаполненияСтрокиТЧ = ПолучитьДанныеСтрокиТЧ(СтрокаРеквизита.Строки, ДеревоРазбора);
				
				Если ДанныеДляЗаполненияСтрокиТЧ.Свойство("Услуга")
					И ДанныеДляЗаполненияСтрокиТЧ.Услуга = Истина Тогда
					ЗаполнитьЗначенияСвойств(Услуги.Добавить(), ДанныеДляЗаполненияСтрокиТЧ);
					
				Иначе
					ЗаполнитьЗначенияСвойств(Товары.Добавить(), ДанныеДляЗаполненияСтрокиТЧ);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеЗаполненияШапки.Вставить("ВидОперации", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "ВидОперации", Истина, ДеревоРазбора));
	
	// спец. значения 
	Если ЗначениеЗаполнено(ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "НомерСчетаФактуры")) Тогда // указана счет-фактура
		ДанныеЗаполненияШапки.Вставить("НомерСчетаФактуры",ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "НомерСчетаФактуры"));
		ДанныеЗаполненияШапки.Вставить("ДатаСчетаФактуры", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "ДатаСчетаФактуры"));
	КонецЕсли;
	
	Если ДанныеЗаполненияШапки.ВидОперации = Перечисления.ВидыОперацийЭД.Исправление Тогда
		ДанныеЗаполненияШапки.Вставить("НомерИсправления",ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "НомерИсправления"));
		ДанныеЗаполненияШапки.Вставить("ДатаИсправления", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "ДатаИсправления"));
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Вставить("НомерИсходногоДокумента",ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "НомерИсходногоДокумента"));
	ДанныеЗаполненияШапки.Вставить("ДатаИсходногоДокумента", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "ДатаИсходногоДокумента"));
	ДанныеЗаполненияШапки.Вставить("НомерИсправленияИсходногоДокумента",ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "НомерИсправленияИсходногоДокумента"));
	ДанныеЗаполненияШапки.Вставить("ДатаИсправленияИсходногоДокумента", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "ДатаИсправленияИсходногоДокумента"));
	
	ДанныеЗаполненияШапки.Вставить("НомерВходящегоДокумента",ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "Номер"));
	ДанныеЗаполненияШапки.Вставить("ДатаВходящегоДокумента", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "Дата"));
	
	ДанныеДляОбъекта.Вставить("Шапка",  ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", Товары);
	ДанныеДляОбъекта.Вставить("Услуги", Услуги);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПолучитьИДНоменклатуры(Номенклатура, Характеристика, Упаковка)
	
	ИДТовара = Номенклатура.УникальныйИдентификатор();
	ИДХарактеристики = ?(ЗначениеЗаполнено(Характеристика), Характеристика.УникальныйИдентификатор(), "");
	ИДУпаковки = ?(ЗначениеЗаполнено(Упаковка), Упаковка.УникальныйИдентификатор(), "");
	
	Возврат Строка(ИДТовара) + "#" + Строка(ИДХарактеристики) + "#" + Строка(ИДУпаковки);
	
КонецФункции

Функция ПолучитьНаименованиеНоменклатуры(Наименование, БазоваяЕдиницаНаименование)
	
	Возврат Наименование
			+ ?(ЗначениеЗаполнено(БазоваяЕдиницаНаименование), "  (", "")
			+ ?(ЗначениеЗаполнено(БазоваяЕдиницаНаименование), БазоваяЕдиницаНаименование, "")
			+ ?(ЗначениеЗаполнено(БазоваяЕдиницаНаименование), ")", "");
	
КонецФункции

Функция НайтиСсылкуНаНоменклатуруПоставщикаПоИдентификатору(Идентификатор, Контрагент, ТипВозвращаемогоЗначения = "Номенклатура")
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СпрНоменклатура.Номенклатура КАК Номенклатура,
	               |	СпрНоменклатура.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.НоменклатураПоставщиков КАК СпрНоменклатура
	               |ГДЕ
	               |	СпрНоменклатура.Идентификатор = &Идентификатор
	               |	И СпрНоменклатура.Владелец = &Контрагент";
	
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если ТипВозвращаемогоЗначения = "Номенклатура" Тогда
			Результат = Выборка.Номенклатура;
		Иначе
			Результат = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьЗначениеРеквизита(СтрокаДерева, ИмяРеквизита, ВключатьПодчиненные = Ложь, ДеревоРазбора = Неопределено)
	
	Результат = Неопределено;
	
	Если СтрокаДерева.Строки.Количество()>0 Тогда
		НайденнаяСтрока = СтрокаДерева.Строки.Найти(ИмяРеквизита, "Реквизит", ВключатьПодчиненные);
	Иначе
		НайденнаяСтрока = СтрокаДерева;
	КонецЕсли;
	
	Если НайденнаяСтрока <> Неопределено Тогда
		Результат = НайденнаяСтрока.ЗначениеРеквизита;
		// Если реквизит ссылочного типа (передали реквизит ДеревоРазбора),
		// тогда нашли всего лишь индекс строки
		Если ЗначениеЗаполнено(ДеревоРазбора) Тогда 
			НайденнаяСтрока = ДеревоРазбора.Строки.Найти(Результат, "ИндексСтроки", Истина);
			Если НайденнаяСтрока <> Неопределено Тогда
				Результат = НайденнаяСтрока.СсылкаНаОбъект;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура СкопироватьЗначениеСтруктуры(Структура, ПолеИсточник, НовоеПоле)
	
	Если Структура.Свойство(ПолеИсточник) И Не Структура.Свойство(НовоеПоле) Тогда
		Структура.Вставить(НовоеПоле, Структура[ПолеИсточник]);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Общие процедуры и функции

Процедура ЗаписатьДокумент(ДокументОбъект, РежимЗаписи)
	
	// Документ записывается дважды:
	// Первый раз запись происходит с установкой признака ОбменДанными.Загрузка = Истина
	// Второй раз запись выполняется без установленного признака ОбменДанными.Загрузка
	
	Попытка
		
		ДокументОбъект.ДополнительныеСвойства.Вставить("ЕстьСоглашение", Истина);
		Если ДокументОбъект.Ссылка.Пустая()
			И НЕ ЗначениеЗаполнено(ДокументОбъект.Номер) Тогда
			ДокументОбъект.УстановитьНовыйНомер();
		КонецЕсли;
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
		
	Исключение
		
		ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(
						НСтр("ru = 'Запись документа ИБ'"), 
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	Попытка
		
		ДокументОбъект.ОбменДанными.Загрузка = Ложь;
		ДокументОбъект.Записать(РежимЗаписи);
		
	Исключение
		
		ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(
						НСтр("ru = 'Запись документа ИБ'"), 
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеТабличнойЧасти(ТабличнаяЧасть)
	
	КолонкиЕдиницИзмеренияСтрокой = ВРег(",БазоваяЕдиницаКод,ЕдиницаИзмеренияКодДо,ЕдиницаИзмеренияКод,УпаковкаКод,");
	
	КолонкиЕдиницИзмерения = Новый Структура;
	Для Каждого Колонка Из ТабличнаяЧасть.Колонки Цикл
		Если Найти(КолонкиЕдиницИзмеренияСтрокой, "," + ВРег(Колонка.Имя) + ",") > 0 Тогда
			КолонкиЕдиницИзмерения.Вставить(Колонка.Имя);	
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из ТабличнаяЧасть Цикл
		
		// Проверим длину кода единицы измерения  
		Для Каждого КлючЗначение Из КолонкиЕдиницИзмерения Цикл
			ИмяКолонки = КлючЗначение.Ключ;
			Если СтрДлина(Строка[ИмяКолонки]) = 4 Тогда
				ВызватьИсключение "Документ содержит 4-х значные коды ОКЕИ, отправка таких документов не поддерживается.";
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьКорректныйКодСтраны(КодСтраны)
	
	Если КодСтраны = NULL Тогда
		Возврат "";
	КонецЕсли;
	
	Для К=1 По СтрДлина(КодСтраны) Цикл
		
		СимволКода = Сред(КодСтраны, К, 1);
		Если Найти("0123456789", СимволКода)=0 Тогда
			//Код страны в электронном документе должен содеражать только цифры
			Возврат "";
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КодСтраны;
	
КонецФункции

Функция ПолучитьСтавкуНДСПеречислением(СтавкаНДС, ОбратнаяСтавка = Ложь)
	
	ЗначениеНДС = Неопределено;
	
	Если ТипЗнч(СтавкаНДС) = Тип("Строка") Тогда
		ПредставлениеСтавкиНДС = СтавкаНДС;
	ИначеЕсли ТипЗнч(СтавкаНДС) = Тип("Число") Тогда 
		ПредставлениеСтавкиНДС = Строка(СтавкаНДС);
	Иначе // неправильный тип
		ПредставлениеСтавкиНДС = Неопределено;
	КонецЕсли;
	
	Если ПредставлениеСтавкиНДС = Неопределено ИЛИ ВРЕГ(ПредставлениеСтавкиНДС) = "БЕЗ НДС" Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.БезНДС;
		
	ИначеЕсли ПредставлениеСтавкиНДС = "0" ИЛИ ПредставлениеСтавкиНДС = "0%" Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.НДС0;
		
	ИначеЕсли Найти("10#0.1#0,1#0.10#0,10#10%", ПредставлениеСтавкиНДС) > 0 Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.НДС10;
		
	ИначеЕсли Найти("20#0.2#0,2#0.20#0,20#20%", ПредставлениеСтавкиНДС) > 0 Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.НДС20;
		
	ИначеЕсли Найти("18#0.18#0,18#0.18#0,18#18%", ПредставлениеСтавкиНДС) > 0 Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.НДС18;
		
	ИначеЕсли Найти("10/110#10% / 110%#10%/110%", ПредставлениеСтавкиНДС) > 0 Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.НДС10_110;
		
	ИначеЕсли Найти("18/118#18% / 118%#18%/118%", ПредставлениеСтавкиНДС) > 0 Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.НДС18_118;
		
	ИначеЕсли Найти("20/120#20% / 120%#20%/120%", ПредставлениеСтавкиНДС) > 0 Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.НДС20_120;
		
	КонецЕсли;
	
	Возврат ЗначениеНДС;
	
КонецФункции

Функция СуществуютТовары(Документ)
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Документ", Документ);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РеализацияТоваровУслугТовары.Ссылка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &Документ
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РеализацияТоваровУслугВозвратнаяТара.Ссылка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК РеализацияТоваровУслугВозвратнаяТара
	|ГДЕ
	|	РеализацияТоваровУслугВозвратнаяТара.Ссылка = &Документ";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ПолучитьДанныеСтрокиТЧ(ДанныеЗаполнения, ДеревоРазбора, ЦенаВключаетНДС = Ложь)
	
	ДанныеДляЗаполненияСтрокиТЧ = Новый Структура();
	
	Для Каждого ТекСтрока Из ДанныеЗаполнения Цикл
		
		ИмяРеквизитаВБД = ТекСтрока.Реквизит;
		
		Если ВРег(ИмяРеквизитаВБД) = ВРег("Мест") Тогда
			ИмяРеквизитаВБД = "КоличествоМест";
		ИначеЕсли ВРег(ИмяРеквизитаВБД) = ВРег("Описание") Тогда
			ИмяРеквизитаВБД = "Содержание";
		ИначеЕсли Найти(ИмяРеквизитаВБД, "ДоКорректировки") <> 0 Тогда
			ИмяРеквизитаВБД = СтрЗаменить(ИмяРеквизитаВБД, "ДоКорректировки", "ДоИзменения");
		КонецЕсли;
		
		НайденноеЗначение = ПолучитьЗначениеРеквизита(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
		
		ДанныеДляЗаполненияСтрокиТЧ.Вставить(ИмяРеквизитаВБД, НайденноеЗначение);
		
		Если ТекСтрока.Реквизит = "Номенклатура" И ЗначениеЗаполнено(НайденноеЗначение) Тогда
			
			ДанныеДляЗаполненияСтрокиТЧ.Вставить("Услуга", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НайденноеЗначение, "Услуга"));
			СтрокаНоменклатура = ДеревоРазбора.Строки.Найти(ТекСтрока.ЗначениеРеквизита,"ИндексСтроки",Истина);
			НайденноеЗначение = ПолучитьЗначениеРеквизита(СтрокаНоменклатура, "ЕдиницаИзмерения", Истина, ДеревоРазбора);
			ДанныеДляЗаполненияСтрокиТЧ.Вставить("ЕдиницаИзмерения", НайденноеЗначение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДанныеДляЗаполненияСтрокиТЧ.Свойство("СуммаСНДС") И ЦенаВключаетНДС Тогда
		ДанныеДляЗаполненияСтрокиТЧ.Сумма = ДанныеДляЗаполненияСтрокиТЧ.СуммаСНДС; 	
	КонецЕсли;
	
	ЗаполняемСтавкуНДС = 0;
	ДанныеДляРасчетаСтавки = Новый Структура("СтавкаНДС, СуммаНДС, Сумма");
	ЗаполнитьЗначенияСвойств(ДанныеДляРасчетаСтавки, ДанныеДляЗаполненияСтрокиТЧ);
	
	Если НЕ ЗначениеЗаполнено(ДанныеДляРасчетаСтавки.СтавкаНДС) Тогда
		Если ЗначениеЗаполнено(ДанныеДляРасчетаСтавки.СуммаНДС) 
			И ЗначениеЗаполнено(ДанныеДляРасчетаСтавки.Сумма) Тогда
			//Определим ставку НДС расчетным путем
			ЗначениеСтавки = ОКР(ДанныеДляРасчетаСтавки.СуммаНДС / ДанныеДляРасчетаСтавки.Сумма,2);
			ДанныеДляЗаполненияСтрокиТЧ.Вставить("СтавкаНДС", ПолучитьСтавкуНДСПеречислением(ЗначениеСтавки));
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ДанныеДляЗаполненияСтрокиТЧ.Свойство("Содержание") И ДанныеДляЗаполненияСтрокиТЧ.Свойство("Наименование") Тогда
		ДанныеДляЗаполненияСтрокиТЧ.Вставить("Содержание", ДанныеДляЗаполненияСтрокиТЧ.Наименование);
	КонецЕсли;
	
	Возврат ДанныеДляЗаполненияСтрокиТЧ;
	
КонецФункции

Функция НайтиСоздатьОтчетКомиссионера(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Текст = "";
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляОтчетаКомиссионера(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Если ДанныеДляЗагрузки.Свойство("Шапка") Тогда 
		ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	КонецЕсли; 
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда // получены изменения по существующему документу
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru = 'Операция возможна только для непроведенных документов!'");
		КонецЕсли;
	Иначе  // создаем новый
		
		ДокументОбъект = Документы.ОтчетКомиссионераОПродажах.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ЗаполнениеДокументов.Заполнить(ДокументОбъект, ДанныеЗаполнения);
		
		СписокВидовДоговоров = Новый СписокЗначений;
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
		ОтборПоВалюте			= Новый Структура("ЗначениеОтбора", ДокументОбъект.ВалютаДокумента);
		СтруктураПараметров		= Новый Структура("ВалютаВзаиморасчетов", ОтборПоВалюте);
		
		БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(ДокументОбъект.ДоговорКонтрагента,
						ДокументОбъект.Контрагент, ДокументОбъект.Организация, СписокВидовДоговоров, СтруктураПараметров);		
		// Заполнение реквизитов, специфичных для документа:		
		Документы.ОтчетКомиссионераОПродажах.ЗаполнитьСчетаУчетаРасчетов(,, ДокументОбъект);	
		
		Если ЗначениеЗаполнено(ДокументОбъект.ДоговорКонтрагента) Тогда
			
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОбъект.ДоговорКонтрагента, "СпособРасчетаКомиссионногоВознаграждения, ПроцентКомиссионногоВознаграждения");
			ДокументОбъект.СпособРасчетаКомиссионногоВознаграждения = ЗначенияРеквизитов.СпособРасчетаКомиссионногоВознаграждения;
			ДокументОбъект.ПроцентКомиссионногоВознаграждения = ЗначенияРеквизитов.ПроцентКомиссионногоВознаграждения;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// установка счета и статей затрат
	Если Не ЗначениеЗаполнено(ДокументОбъект.СчетУчетаЗатрат) Тогда
		
		ДокументОбъект.СчетУчетаЗатрат = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("ПланСчетов.Хозрасчетный.ИздержкиОбращения");
		СвойстваСчетаЗатрат = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ДокументОбъект.СчетУчетаЗатрат);
		СтатьяЗатрат = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатьиЗатрат.УслугиКомиссионеров");
		Для Индекс = 1 По СвойстваСчетаЗатрат.КоличествоСубконто Цикл
			Если СвойстваСчетаЗатрат["ВидСубконто" + Индекс] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат Тогда
				Если НЕ ЗначениеЗаполнено(ДокументОбъект["Субконто" + Индекс]) Тогда
					ДокументОбъект["Субконто" + Индекс] = СтатьяЗатрат;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла; 
	
	КонецЕсли;	
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	
	// вручную переопределим, если требуется
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);	
	
	ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);		
	ДокументОбъект.Услуги.Загрузить(ДанныеДляЗагрузки.Услуги);		
	ДокументОбъект.Покупатели.Загрузить(ДанныеДляЗагрузки.Покупатели);  	
	Документы.ОтчетКомиссионераОПродажах.ЗаполнитьСчетаУчетаВТабличнойЧасти(ДокументОбъект, "Товары");
	Документы.ОтчетКомиссионераОПродажах.ЗаполнитьСчетаУчетаВТабличнойЧасти(ДокументОбъект, "Услуги");
	
	ЗаписатьДокумент(ДокументОбъект, РежимЗаписи);
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции

Функция ПодготовитьСтруктуруДляОтчетаКомиссионера(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеТоваров = ДеревоРазбора.Строки.Найти("Номенклатура", "ТипОбъекта", Истина);
	Если ДанныеТоваров <> Неопределено Тогда
			
		Для Каждого СтрокаТовара Из ДанныеТоваров.Строки Цикл
			
			Если СтрокаТовара.СсылкаНаОбъект.ПолучитьОбъект() = Неопределено Тогда
								
				НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(СтрокаТовара, "Наименование", Истина);	
				НоменклатураПоставщика = Справочники.НоменклатураПоставщиков.НайтиПоНаименованию(НайденноеЗначение);
				СтрокаТовара.СсылкаНаОбъект = ?(ЗначениеЗаполнено(НоменклатураПоставщика), НоменклатураПоставщика.Номенклатура, 
					Неопределено);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;	
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	ТаблицаТоваров = Документы.ОтчетКомиссионераОПродажах.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	ТаблицаТоваров.Колонки.Добавить("ДатаСФ");
	ТаблицаТоваров.Колонки.Добавить("Покупатель");
	ТаблицаУслуг = Документы.ОтчетКомиссионераОПродажах.ПустаяСсылка().Услуги.ВыгрузитьКолонки();			
	ТаблицаУслуг.Колонки.Добавить("ДатаСФ");
	ТаблицаУслуг.Колонки.Добавить("Покупатель");	
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		Если СтрокаРеквизита.Строки.Количество()=0 Тогда // примитивный тип
			Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			Если ЗначениеЗаполнено(Реквизит) Тогда
				ДанныеЗаполненияШапки.Вставить(СтрокаРеквизита.Реквизит, Реквизит);
			КонецЕсли;
		ИначеЕсли СтрокаРеквизита.Реквизит = "СтрокаТЧ" Тогда // добавим строку ТЧ
			
			ЭтоУслуга = Ложь;
			Номенклатура = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, "Номенклатура", Истина, ДеревоРазбора);
			Если ЗначениеЗаполнено(Номенклатура) Тогда
				
				ЭтоУслуга = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Номенклатура, "ВидНоменклатуры.Услуга");
				Если ЭтоУслуга Тогда
					
					НоваяСтрока = ТаблицаУслуг.Добавить();
					КолонкиТаблицы = ТаблицаУслуг.Колонки;
					
				Иначе
					
					НоваяСтрока = ТаблицаТоваров.Добавить();
					КолонкиТаблицы = ТаблицаТоваров.Колонки;
					
				КонецЕсли;
				
			Иначе
				
				НоваяСтрока = ТаблицаТоваров.Добавить();
				КолонкиТаблицы = ТаблицаУслуг.Колонки;
				
			КонецЕсли;			
			ДанныеПокупателя = Новый Структура("НаименованиеПолное, ИНН, КПП, ЮрАдрес, ФактАдрес");	
			Для Каждого ТекСтрока Из СтрокаРеквизита.Строки Цикл
				
				ИмяРеквизитаВБД = ТекСтрока.Реквизит;				
				Если ИмяРеквизитаВБД = "ПокупательНаименование" Тогда	
					
					НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
					ДанныеПокупателя.НаименованиеПолное = НайденноеЗначение;
					
				ИначеЕсли ИмяРеквизитаВБД = "ПокупательИНН" Тогда	
					
					НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
					ДанныеПокупателя.ИНН = НайденноеЗначение;
					
				ИначеЕсли ИмяРеквизитаВБД = "ПокупательКПП" Тогда	
					
					НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
					ДанныеПокупателя.КПП = НайденноеЗначение;
					
				ИначеЕсли ИмяРеквизитаВБД = "ПокупательЮрАдрес" Тогда	
					
					НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
					ДанныеПокупателя.ЮрАдрес = НайденноеЗначение;
					
				ИначеЕсли ИмяРеквизитаВБД = "ПокупательФактАдрес" Тогда	
					
					НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
					ДанныеПокупателя.ФактАдрес = НайденноеЗначение;
					
				ИначеЕсли ИмяРеквизитаВБД = "Цена" И Не ЭтоУслуга Тогда
					
					НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
					НоваяСтрока["ЦенаПередачи"] = НайденноеЗначение;
					
				ИначеЕсли ИмяРеквизитаВБД = "Сумма" И Не ЭтоУслуга Тогда
					
					НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
					НоваяСтрока["СуммаПередачи"] = НайденноеЗначение;
					
				ИначеЕсли ИмяРеквизитаВБД = "ЦенаПродажи" Тогда
					
					НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
					НоваяСтрока["Цена"] = НайденноеЗначение;
					
				ИначеЕсли ИмяРеквизитаВБД = "СуммаПродажи" Тогда				
					
					НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
					НоваяСтрока["Сумма"] = НайденноеЗначение;					
					
				ИначеЕсли ИмяРеквизитаВБД = "ДатаРеализации" Тогда				
					
					НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
					НоваяСтрока["ДатаСФ"] = ?(ЗначениеЗаполнено(НайденноеЗначение), Дата(НайденноеЗначение), Неопределено);		
					
				ИначеЕсли ИмяРеквизитаВБД = "Номенклатура" И ЭтоУслуга Тогда	
					
					НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина);
					Если НайденноеЗначение <> Неопределено Тогда
						
						ОписаниеОбъекта = ДеревоРазбора.Строки.Найти(НайденноеЗначение, "ИндексСтроки", Истина).ОписаниеОбъекта;	
						НоваяСтрока["Содержание"] = ОписаниеОбъекта;
						НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
						НоваяСтрока["Номенклатура"] = НайденноеЗначение;
						
					КонецЕсли;				
					
				ИначеЕсли КолонкиТаблицы.Найти(ИмяРеквизитаВБД) <> Неопределено Тогда
					
					НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
					НоваяСтрока[ИмяРеквизитаВБД] = НайденноеЗначение;
									
				КонецЕсли;
				
			КонецЦикла;
			Покупатель = СсылкаНаОбъектПоИННКПП("Контрагенты", ДанныеПокупателя.ИНН, ДанныеПокупателя.КПП);			
			Если НЕ ЗначениеЗаполнено(Покупатель) Тогда
				
				ИндексСтроки = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, "Покупатель");
				СтрокаКонтрагента = ДеревоРазбора.Строки.Найти(ИндексСтроки, "ИндексСтроки", Истина);
				Если СтрокаКонтрагента <> Неопределено Тогда
					
					Покупатель = ЭлектронныеДокументыБП.НовыйКонтрагент(СтрокаКонтрагента, ДеревоРазбора, Неопределено);
					
				КонецЕсли;
				
			КонецЕсли; 			
			НоваяСтрока.Покупатель = Покупатель;
			
		КонецЕсли;				
		
	КонецЦикла;
	
	ДанныеЗаполненияШапки.Вставить("НомерВходящегоДокумента",ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Номер"));
	ДанныеЗаполненияШапки.Вставить("ДатаВходящегоДокумента", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Дата"));
	ДанныеЗаполненияШапки.Вставить("СтавкаНДСВознаграждения", ПолучитьСтавкуНДСПеречислением(ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "СтавкаНДСВознаграждения")));
	
	НомерСтрокиДокумента = 0;
	Для Каждого ТекСтрока Из ТаблицаТоваров Цикл 
		// заполним Количество с учетом единиц измерения
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Количество) Тогда
			Если ЗначениеЗаполнено(ТекСтрока.Упаковка) Тогда
				ТекКоэффициент = ТекСтрока.Упаковка.Коэффициент;
			Иначе
				ТекКоэффициент = 1;
			КонецЕсли;
			ТекСтрока.Количество = ТекСтрока.КоличествоУпаковок*ТекКоэффициент;
		КонецЕсли;
		
	КонецЦикла;
	
	// получение данных о покупателях
	ТаблицаПокупателей = Документы.ОтчетКомиссионераОПродажах.ПустаяСсылка().Покупатели.ВыгрузитьКолонки();		
	Для Каждого СтрокаТЗ Из ТаблицаТоваров Цикл
		
		СтрокаПокупателя = ТаблицаПокупателей.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПокупателя, СтрокаТЗ);
			
	КонецЦикла;
	Для Каждого СтрокаТЗ Из ТаблицаУслуг Цикл
		
		СтрокаПокупателя = ТаблицаПокупателей.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПокупателя, СтрокаТЗ);
			
	КонецЦикла;
	
	// установка ключа строки	
	ТаблицаПокупателей.Свернуть("Покупатель, ДатаСФ", "ВыставленСФ, КлючСтроки");
	Счетчик = 0;
	Для Каждого СтрокаПокупателя Из ТаблицаПокупателей Цикл
		
		Счетчик = Счетчик + 1;
		СтрокаПокупателя.КлючСтроки = Счетчик;
		
	КонецЦикла;
	Для Каждого СтрокаТЗ Из ТаблицаТоваров Цикл
		
		СтруктураПоиска = Новый Структура("Покупатель, ДатаСФ", СтрокаТЗ.Покупатель, СтрокаТЗ.ДатаСФ);
		НайденныеСтроки = ТаблицаПокупателей.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			СтрокаТЗ.КлючСтроки = НайденныеСтроки[0].КлючСтроки;
			
		КонецЕсли;
		
	КонецЦикла;
	Для Каждого СтрокаТЗ Из ТаблицаУслуг Цикл
		
		СтруктураПоиска = Новый Структура("Покупатель, ДатаСФ", СтрокаТЗ.Покупатель, СтрокаТЗ.ДатаСФ);
		НайденныеСтроки = ТаблицаПокупателей.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			СтрокаТЗ.КлючСтроки = НайденныеСтроки[0].КлючСтроки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// определяем, нужно ли перевыставлять счета-фактуры
	ПлательщикНДС = ПолучитьЗначениеРеквизитаДерева(ДеревоРазбора, "ПлательщикНДС", Истина);
	Если ЗначениеЗаполнено(ПлательщикНДС) И Булево(ПлательщикНДС) Тогда
		
		ТаблицаПокупателей.ЗаполнитьЗначения(Истина, "ВыставленСФ");
		
	КонецЕсли;
		
	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТаблицаТоваров);	
	ДанныеДляОбъекта.Вставить("Услуги", ТаблицаУслуг);	
	ДанныеДляОбъекта.Вставить("Покупатели", ТаблицаПокупателей);
	
	Возврат ДанныеДляОбъекта;

КонецФункции
