
#Область СлужебныеПроцедурыИФункции

Процедура СформироватьДвиженияПлановыхНачислений(РегистраторОбъект, Движения, СтруктураДанных, ЗаполнятьНаборЗаписей = Истина) Экспорт
	
	Если СтруктураДанных.ДанныеОПлановыхНачислениях = Неопределено
		ИЛИ СтруктураДанных.ДанныеОПлановыхНачислениях.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	Движения.ПлановыеНачисления.Записывать = Истина;
	
	Если ЗаполнятьНаборЗаписей Тогда
		СтруктураДанных.ДанныеОПлановыхНачислениях.Колонки.ДатаСобытия.Имя = "Период";
		Движения.ПлановыеНачисления.Загрузить(СтруктураДанных.ДанныеОПлановыхНачислениях);
	КонецЕсли; 
	
	Если РегистраторОбъект.ДополнительныеСвойства.Свойство("ОтключитьПроверкуДатыЗапретаИзменения")
		И РегистраторОбъект.ДополнительныеСвойства.ОтключитьПроверкуДатыЗапретаИзменения Тогда
		
		Движения.ПлановыеНачисления.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияПлановыхУдержаний(Движения, СтруктураДанных) Экспорт
	
	ДанныеПлановыхУдержаний = СтруктураДанных.ДанныеПлановыхУдержаний;
	
	ЗаполнятьДокументОснование = ДанныеПлановыхУдержаний.Колонки.Найти("ДокументОснование") <> Неопределено;
	ИспользуютсяВозвратныеСобытия = ДанныеПлановыхУдержаний.Колонки.Найти("ДействуетДо") <> Неопределено;
	
	// Признак Использования по окончании может быть и в явном виде указан в таблице, 
	// в этом случае используем именно его значение.
	ИспользованиеПоОкончанииОпределено = ДанныеПлановыхУдержаний.Колонки.Найти("ИспользуетсяПоОкончании") <> Неопределено;
	
	Регистратор = Движения.ПлановыеУдержания.Отбор.Регистратор.Значение;
	
	Если ИспользуютсяВозвратныеСобытия Тогда
		
		// Получим действующие начисления, чтобы записать возвратные движения,
		// Признак Используется начисления должен соответствовать значению, действующему на дату текущего события.
		
		ИзмеренияДаты = Новый ТаблицаЗначений;
		ИзмеренияДаты.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
		ИзмеренияДаты.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
		ИзмеренияДаты.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		ИзмеренияДаты.Колонки.Добавить("Удержание", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Удержания"));
		Если ЗаполнятьДокументОснование Тогда
			ИзмеренияДаты.Колонки.Добавить("ДокументОснование", Метаданные.РегистрыСведений.ПлановыеУдержания.Измерения.ДокументОснование.Тип);
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеПлановыхУдержаний, ИзмеренияДаты);
		ИзмеренияДаты.Колонки.ДатаСобытия.Имя = "Период";
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Регистратор);
		
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
			"ПлановыеУдержания",
			МенеджерВременныхТаблиц,
			Истина,
			ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты),
			ПараметрыПостроения);
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПлановыеУдержания.ФизическоеЛицо,
		|	ПлановыеУдержания.Организация,
		|	ПлановыеУдержания.Удержание,
		|	ПлановыеУдержания.ДокументОснование,
		|	ПлановыеУдержания.Размер
		|ИЗ
		|	ВТПлановыеУдержанияСрезПоследних КАК ПлановыеУдержания
		|ГДЕ
		|	ПлановыеУдержания.Используется");
		
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		ДействующиеУдержания = Запрос.Выполнить().Выгрузить();
		
		ОтборСтрок = Новый Структура;
		ОтборСтрок.Вставить("ФизическоеЛицо");
		ОтборСтрок.Вставить("Организация");
		ОтборСтрок.Вставить("Удержание");
		
		Если ЗаполнятьДокументОснование Тогда
			ОтборСтрок.Вставить("ДокументОснование");
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из ДанныеПлановыхУдержаний Цикл
		
		СтрокаДвижений = Движения.ПлановыеУдержания.Добавить();
		СтрокаДвижений.Период = СтрокаДанных.ДатаСобытия;
		СтрокаДвижений.Организация = СтрокаДанных.Организация;
		СтрокаДвижений.ФизическоеЛицо = СтрокаДанных.ФизическоеЛицо;
		СтрокаДвижений.Удержание = СтрокаДанных.Удержание;
		
		Если ЗаполнятьДокументОснование Тогда
			СтрокаДвижений.ДокументОснование = СтрокаДанных.ДокументОснование;
		КонецЕсли;
		
		СтрокаДвижений.Используется = СтрокаДанных.Используется;
		СтрокаДвижений.Размер = СтрокаДанных.Размер;
		
		Если ИспользуютсяВозвратныеСобытия И ЗначениеЗаполнено(СтрокаДанных.ДействуетДо) Тогда
			
			СтрокаДвижений.ДействуетДо = СтрокаДанных.ДействуетДо;
			ЗаполнитьЗначенияСвойств(ОтборСтрок, СтрокаДвижений);
			НайденныеСтроки = ДействующиеУдержания.НайтиСтроки(ОтборСтрок);
			УдержаниеИспользовалось = НайденныеСтроки.Количество() > 0;
			
			Если ИспользованиеПоОкончанииОпределено Тогда
				// Использование по окончании указано в исходной таблице.
				СтрокаДвижений.ИспользуетсяПоОкончании = СтрокаДанных.ИспользуетсяПоОкончании;
			Иначе
				// Использование по окончании соответствует действию удержания до текущего события.
				СтрокаДвижений.ИспользуетсяПоОкончании = УдержаниеИспользовалось;
			КонецЕсли;
			
			Если УдержаниеИспользовалось Тогда 
				СтрокаДвижений.РазмерПоОкончании = НайденныеСтроки[0].Размер;
			КонецЕсли;
			
		КонецЕсли;
		
		Движения.ПлановыеУдержания.Записывать = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьДвиженияПлановыхВыплат(Движения, ДанныеОПлановыхВыплатах) Экспорт
	
	Для Каждого СтрокаДанных Из ДанныеОПлановыхВыплатах Цикл
		
		Движения.ПлановыеАвансы.Записывать = Истина;
		
		НоваяСтрока = Движения.ПлановыеАвансы.Добавить();
		
		НоваяСтрока.Период = СтрокаДанных.ДатаСобытия;
		НоваяСтрока.Сотрудник = СтрокаДанных.Сотрудник;
		НоваяСтрока.ФизическоеЛицо = СтрокаДанных.ФизическоеЛицо;
		НоваяСтрока.СпособРасчетаАванса = СтрокаДанных.СпособРасчетаАванса;
		НоваяСтрока.Аванс = СтрокаДанных.Аванс;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодобратьДокументНачисленияЗарплаты(ДокументСсылка, МесяцНачисления, Организация, Подразделение = Неопределено) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НачислениеЗарплаты.Ссылка КАК Документ
	|ИЗ
	|	Документ.НачислениеЗарплаты КАК НачислениеЗарплаты
	|ГДЕ
	|	НачислениеЗарплаты.МесяцНачисления = &МесяцНачисления
	|	И НачислениеЗарплаты.Организация = &Организация
	|	И (НачислениеЗарплаты.Подразделение = &Подразделение
	|			ИЛИ &ПоВсемПодразделениям)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НачислениеЗарплаты.Дата,
	|	НачислениеЗарплаты.Ссылка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МесяцНачисления", МесяцНачисления);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("ПоВсемПодразделениям", Подразделение = Неопределено);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		ДокументОбъект = Выборка.Документ.ПолучитьОбъект();
	Иначе
		ДокументОбъект = Документы.НачислениеЗарплаты.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект.МесяцНачисления = МесяцНачисления;
		ДокументОбъект.Организация = Организация;
		Если ЗначениеЗаполнено(Подразделение) Тогда
			ДокументОбъект.Подразделение = Подразделение;
		КонецЕсли;
	КонецЕсли;
	ЗаполнитьДокументНачисленияЗарплаты(ДокументОбъект);
	ДокументОбъект.Записать();
	
	ДокументСсылка = ДокументОбъект.Ссылка;
	
КонецПроцедуры

Функция РазностьДатьПроизводственныхКалендарейПоВидамДней(ПроизводственныйКалендарь, НачалоПериода, ОкончаниеПериода) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериода);
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", ПроизводственныйКалендарь);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыДнейПроизводственногоКалендаря.Ссылка КАК ВидДня,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеПроизводственногоКалендаря.Дата) КАК КоличествоДней
		|ИЗ
		|	Перечисление.ВидыДнейПроизводственногоКалендаря КАК ВидыДнейПроизводственногоКалендаря
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|		ПО ВидыДнейПроизводственногоКалендаря.Ссылка = ДанныеПроизводственногоКалендаря.ВидДня
		|			И (ДанныеПроизводственногоКалендаря.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода)
		|			И (ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВидыДнейПроизводственногоКалендаря.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидДня";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоДнейПоВидам = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		КоличествоДнейПоВидам.Вставить(Выборка.ВидДня, Выборка.КоличествоДней);
	КонецЦикла;
		
	Возврат КоличествоДнейПоВидам;
	
КонецФункции

Функция РабочихДнейЧасовВПериоде(ПроизводственныйКалендарь, НачалоПериода, ОкончаниеПериода) Экспорт
	
	РабочихДнейЧасов = Новый Структура("Дней,Часов", 0, 0);
	
	ДанныеКалендаря = РазностьДатьПроизводственныхКалендарейПоВидамДней(ПроизводственныйКалендарь, НачалоПериода, ОкончаниеПериода);
	
	РабочиеДни = ДанныеКалендаря.Получить(Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий);
	ПредпраздничныеДни = ДанныеКалендаря.Получить(Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный);
	
	РабочихДнейЧасов.Дней = РабочиеДни + ПредпраздничныеДни;
	РабочихДнейЧасов.Часов = РабочиеДни * 8 + ПредпраздничныеДни * 7;
	
	Возврат РабочихДнейЧасов;
	
КонецФункции

// Заполняет таблицу значений, содержащую данные для начисления зарплаты.
//
// Параметры:
//	см. РасчетЗарплаты.РезультатНачисленияРасчетаЗарплаты
//	МесяцНачисления - в базовой реализации начисления получаются 
//	только за месяц в целом, а не за произвольный период
//
Функция РезультатНачисленияРасчетаЗарплаты(Организация, МесяцНачисления, Документ, Подразделение = НеОпределено, Сотрудники = НеОпределено) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Регистратор", Документ);
	
	КадровыеДанныеДокумента = "ГоловнаяОрганизация,Организация,Подразделение,ТарифнаяСтавка,ПроцентСевернойНадбавки,ДатаРождения";
	КадровыеДанные = КадровыеДанныеДокумента;
	Если ЗарплатаКадры.ДополнитьКадровымиДаннымиНастрокиПорядкаСписка(КадровыеДанные) Тогда
		ПоляСортировки = Сред(КадровыеДанные, СтрДлина(КадровыеДанныеДокумента) + 2);
	Иначе
		ПоляСортировки = "";
	КонецЕсли;
	
	Если Сотрудники = Неопределено Тогда
		
		ИмяВТСотрудникиОрганизации = "ВТСотрудникиОрганизацииПредварительно";
		
		// Получаем сотрудников, работавших в организации из подсистемы КадровыйУчет.
		ПараметрыПолученияСотрудниковОрганизаций = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		ПараметрыПолученияСотрудниковОрганизаций.Организация 					= Организация;
		ПараметрыПолученияСотрудниковОрганизаций.Подразделение 					= Подразделение;
		ПараметрыПолученияСотрудниковОрганизаций.ОтбиратьПоГоловнойОрганизации 	= Ложь;
		ПараметрыПолученияСотрудниковОрганизаций.НачалоПериода 					= МесяцНачисления;
		ПараметрыПолученияСотрудниковОрганизаций.ОкончаниеПериода 				= КонецМесяца(МесяцНачисления);
		ПараметрыПолученияСотрудниковОрганизаций.КадровыеДанные					= КадровыеДанные;
		
		КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудниковОрганизаций, ИмяВТСотрудникиОрганизации);
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	СотрудникиОрганизации.Период КАК Период,
			|	СотрудникиОрганизации.Сотрудник КАК Сотрудник,
			|	СотрудникиОрганизации.ФизическоеЛицо КАК ФизическоеЛицо,
			|	СотрудникиОрганизации.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	СотрудникиОрганизации.Организация КАК Организация,
			|	СотрудникиОрганизации.Подразделение КАК Подразделение,
			|	СотрудникиОрганизации.ТарифнаяСтавка КАК ТарифнаяСтавка,
			|	СотрудникиОрганизации.ПроцентСевернойНадбавки КАК ПроцентСевернойНадбавки,
			|	СотрудникиОрганизации.ДатаРождения КАК ДатаРождения
			|ПОМЕСТИТЬ ВТСотрудникиОрганизации
			|ИЗ
			|	ВТСотрудникиОрганизацииПредварительно КАК СотрудникиОрганизации
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
			|		ПО (НАЧАЛОПЕРИОДА(СотрудникиОрганизации.Период, МЕСЯЦ) = НачисленияУдержанияПоСотрудникам.Период)
			|			И СотрудникиОрганизации.Сотрудник = НачисленияУдержанияПоСотрудникам.Сотрудник
			|			И (НачисленияУдержанияПоСотрудникам.Регистратор <> &Регистратор)
			|			И (НачисленияУдержанияПоСотрудникам.Регистратор ССЫЛКА Документ.НачислениеЗарплаты)
			|ГДЕ
			|	НачисленияУдержанияПоСотрудникам.Сумма ЕСТЬ NULL 
			|	И СотрудникиОрганизации.Подразделение В ИЕРАРХИИ(&Подразделение)";
			
		Если Не ПустаяСтрока(ПоляСортировки) Тогда
			
			СтрокаЗамены = "СотрудникиОрганизации.ДатаРождения КАК ДатаРождения";
			ПоляСортировки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПоляСортировки);
			
			Для каждого ПолеСортировки Из ПоляСортировки Цикл
				СтрокаЗамены = СтрокаЗамены + "," + Символы.ПС + Символы.Таб
					+ "СотрудникиОрганизации." + ПолеСортировки + " КАК " + ПолеСортировки;
			КонецЦикла;
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиОрганизации.ДатаРождения КАК ДатаРождения", СтрокаЗамены);
			
		КонецЕсли; 
			
		Если Не ЗначениеЗаполнено(Подразделение) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СотрудникиОрганизации.Подразделение В ИЕРАРХИИ(&Подразделение)", "");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		Запрос.Выполнить();
		
	Иначе
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	&Период КАК Период,
			|	Сотрудники.Ссылка КАК Сотрудник
			|ПОМЕСТИТЬ ВТСотрудникиПериоды
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
			|		ПО (НачисленияУдержанияПоСотрудникам.Период = &Месяц)
			|			И Сотрудники.Ссылка = НачисленияУдержанияПоСотрудникам.Сотрудник
			|			И (НачисленияУдержанияПоСотрудникам.Регистратор <> &Регистратор)
			|			И (НачисленияУдержанияПоСотрудникам.Регистратор ССЫЛКА Документ.НачислениеЗарплаты)
			|ГДЕ
			|	Сотрудники.Ссылка В(&Сотрудники)
			|	И НачисленияУдержанияПоСотрудникам.Сумма ЕСТЬ NULL ";
				
			
		Запрос.УстановитьПараметр("Период", КонецМесяца(МесяцНачисления));
		Запрос.УстановитьПараметр("Месяц", НачалоМесяца(МесяцНачисления));
		Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
		Запрос.Выполнить();
		
		ОписательВТ = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиПериоды");
		ОписательВТ.ИмяВТКадровыеДанныеСотрудников = "ВТСотрудникиОрганизации";
		
		КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВТ, Истина, КадровыеДанные);
		
	КонецЕсли;
	
	Если МесяцНачисления < УчетСтраховыхВзносовКлиентСервер.ДатаОбъединенияСтраховойИНакопительнойЧастейВзносовПФР() Тогда
		КадровыйУчет.ПроверитьЗаполнениеДатыРожденияПоВременнойТаблице(Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиОрганизации");
	КонецЕсли; 
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
			"ПлановыеНачисления",
			Запрос.МенеджерВременныхТаблиц,
			Истина,
			ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
				"ВТСотрудникиОрганизации",
				"Сотрудник"));
			
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПлановыеНачисления.Сотрудник КАК Сотрудник,
		|	КадровыеДанныеСотрудников.Подразделение КАК Подразделение,
		|	ПлановыеНачисления.Начисление КАК Начисление,
		|	ПлановыеНачисления.Размер КАК Результат,
		|	ВЫБОР
		|		КОГДА ПлановыеНачисления.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда)
		|			ТОГДА ИСТИНА
		|		КОГДА ПлановыеНачисления.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.Прочее)
		|				И ПлановыеНачисления.Начисление.ВходитВБазуРКИСН
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ВходитВБазуРКиСН
		|ПОМЕСТИТЬ ВТДанныеНачисленийПоСотрудникам
		|ИЗ
		|	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК КадровыеДанныеСотрудников
		|		ПО ПлановыеНачисления.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
		|ГДЕ
		|	ПлановыеНачисления.Размер <> 0";
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
		|	КадровыеДанныеСотрудников.Подразделение КАК Подразделение,
		|	Начисления.Ссылка КАК Начисление,
		|	КадровыеДанныеСотрудников.ТарифнаяСтавка КАК Результат,
		|	ИСТИНА КАК ВходитВБазуРКиСН
		|ПОМЕСТИТЬ ВТДанныеНачисленийПоСотрудникам
		|ИЗ
		|	ВТСотрудникиОрганизации КАК КадровыеДанныеСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО (Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда))";
		
	КонецЕсли;
	
	Запрос.Выполнить();
		
	Возврат ТаблицаЗаполненияНачислений(Запрос.МенеджерВременныхТаблиц);
	
КонецФункции

Функция ТаблицаЗаполненияНачислений(МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеНачисленийПоСотрудникам.Сотрудник,
		|	ДанныеНачисленийПоСотрудникам.Подразделение,
		|	СУММА(ДанныеНачисленийПоСотрудникам.Результат) КАК Результат
		|ПОМЕСТИТЬ ВТСводныеДанныеНачисленийПоСотрудникам
		|ИЗ
		|	ВТДанныеНачисленийПоСотрудникам КАК ДанныеНачисленийПоСотрудникам
		|ГДЕ
		|	ДанныеНачисленийПоСотрудникам.ВходитВБазуРКиСН
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеНачисленийПоСотрудникам.Сотрудник,
		|	ДанныеНачисленийПоСотрудникам.Подразделение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КадровыеДанныеСотрудников.Период,
		|	ВЫРАЗИТЬ(КадровыеДанныеСотрудников.Сотрудник КАК Справочник.Сотрудники) КАК Сотрудник,
		|	ВЫРАЗИТЬ(КадровыеДанныеСотрудников.Подразделение КАК Справочник.ПодразделенияОрганизаций) КАК Подразделение,
		|	СводныеДанныеНачисленийПоСотрудникам.Результат КАК Результат,
		|	КадровыеДанныеСотрудников.ПроцентСевернойНадбавки КАК ПроцентСевернойНадбавки,
		|	ВЫБОР
		|		КОГДА КадровыеДанныеСотрудников.Подразделение.РайонныйКоэффициент > 1
		|			ТОГДА КадровыеДанныеСотрудников.Подразделение.РайонныйКоэффициент
		|		КОГДА КадровыеДанныеСотрудников.Организация.РайонныйКоэффициент > 1
		|			ТОГДА КадровыеДанныеСотрудников.Организация.РайонныйКоэффициент
		|		КОГДА КадровыеДанныеСотрудников.ГоловнаяОрганизация.РайонныйКоэффициент > 1
		|			ТОГДА КадровыеДанныеСотрудников.ГоловнаяОрганизация.РайонныйКоэффициент
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК РайонныйКоэффициент
		|ПОМЕСТИТЬ ВТДанныеПоКоэффициентамСотрудников
		|ИЗ
		|	ВТСотрудникиОрганизации КАК КадровыеДанныеСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСводныеДанныеНачисленийПоСотрудникам КАК СводныеДанныеНачисленийПоСотрудникам
		|		ПО КадровыеДанныеСотрудников.Сотрудник = СводныеДанныеНачисленийПоСотрудникам.Сотрудник
		|			И КадровыеДанныеСотрудников.Подразделение = СводныеДанныеНачисленийПоСотрудникам.Подразделение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеПоКоэффициентамСотрудников.Период,
		|	ДанныеПоКоэффициентамСотрудников.Подразделение КАК СтруктурнаяЕдиница
		|ПОМЕСТИТЬ ВТПодразделенияПериоды
		|ИЗ
		|	ВТДанныеПоКоэффициентамСотрудников КАК ДанныеПоКоэффициентамСотрудников";
		
	Запрос.Выполнить();
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ТерриториальныеУсловияПФР",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТПодразделенияПериоды", "СтруктурнаяЕдиница"));
		
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеПоСотрудникам.Сотрудник КАК Сотрудник,
		|	ДанныеПоСотрудникам.Подразделение КАК Подразделение,
		|	ДанныеПоСотрудникам.Начисление КАК Начисление,
		|	ВЫБОР
		|		КОГДА ДанныеПоСотрудникам.Начисление.КодДоходаНДФЛ.ИмеетЕдинственныйВычет
		|			ТОГДА ДанныеПоСотрудникам.Начисление.КодДоходаНДФЛ.ВычетПоУмолчанию
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.ПустаяСсылка)
		|	КОНЕЦ КАК КодВычета,
		|	ДанныеПоСотрудникам.Результат КАК Результат,
		|	ДанныеПоСотрудникам.ВходитВБазуРКиСН КАК ВходитВБазуРКиСН,
		|	0 КАК КоэффициентПересчета
		|ИЗ
		|	ВТДанныеНачисленийПоСотрудникам КАК ДанныеПоСотрудникам
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК КадровыеДанныеСотрудников
		|		ПО ДанныеПоСотрудникам.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеПоКоэффициентамСотрудников.Сотрудник,
		|	ДанныеПоКоэффициентамСотрудников.Подразделение,
		|	Начисления.Ссылка,
		|	ВЫБОР
		|		КОГДА Начисления.КодДоходаНДФЛ.ИмеетЕдинственныйВычет
		|			ТОГДА Начисления.КодДоходаНДФЛ.ВычетПоУмолчанию
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.ПустаяСсылка)
		|	КОНЕЦ,
		|	ДанныеПоКоэффициентамСотрудников.Результат * (ДанныеПоКоэффициентамСотрудников.РайонныйКоэффициент - 1),
		|	ЛОЖЬ,
		|	ДанныеПоКоэффициентамСотрудников.РайонныйКоэффициент - 1
		|ИЗ
		|	ВТДанныеПоКоэффициентамСотрудников КАК ДанныеПоКоэффициентамСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО (Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент))
		|			И (ДанныеПоКоэффициентамСотрудников.РайонныйКоэффициент <> 1)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК КадровыеДанныеСотрудников
		|		ПО ДанныеПоКоэффициентамСотрудников.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеПоКоэффициентамСотрудников.Сотрудник,
		|	ДанныеПоКоэффициентамСотрудников.Подразделение,
		|	Начисления.Ссылка,
		|	ВЫБОР
		|		КОГДА Начисления.КодДоходаНДФЛ.ИмеетЕдинственныйВычет
		|			ТОГДА Начисления.КодДоходаНДФЛ.ВычетПоУмолчанию
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.ПустаяСсылка)
		|	КОНЕЦ,
		|	ДанныеПоКоэффициентамСотрудников.Результат * ДанныеПоКоэффициентамСотрудников.ПроцентСевернойНадбавки / 100,
		|	ЛОЖЬ,
		|	ДанныеПоКоэффициентамСотрудников.ПроцентСевернойНадбавки / 100
		|ИЗ
		|	ВТДанныеПоКоэффициентамСотрудников КАК ДанныеПоКоэффициентамСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО (Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка))
		|			И (ДанныеПоКоэффициентамСотрудников.ПроцентСевернойНадбавки <> 0)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТерриториальныеУсловияПФРСрезПоследних КАК ТерриториальныеУсловия
		|		ПО ДанныеПоКоэффициентамСотрудников.Период = ТерриториальныеУсловия.Период
		|			И ДанныеПоКоэффициентамСотрудников.Подразделение = ТерриториальныеУсловия.СтруктурнаяЕдиница
		|			И (ТерриториальныеУсловия.ТерриториальныеУсловияПФР <> ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловияПФР.ПустаяСсылка))
		|			И (ТерриториальныеУсловия.ТерриториальныеУсловияПФР <> ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловияПФР.ПРОЧ))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК КадровыеДанныеСотрудников
		|		ПО ДанныеПоКоэффициентамСотрудников.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
		|
		|УПОРЯДОЧИТЬ ПО
		|	Начисление";
		
	ЗарплатаКадры.ДополнитьТекстЗапросаУпорядочиваниемСпискаСотрудников(Запрос, "КадровыеДанныеСотрудников");
		
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Конструирует объект для хранения данных для проведения.
// Структура может содержать
//		НачисленияПоСотрудникам - таблица значений
//			ФизическоеЛицо.
//			Сотрудник
//			Подразделение
//			Начисление
//			Сумма
//			ОтработаноДней
//			ОтработаноЧасов
//
//		УдержанияПоСотрудникам - таблица значений
//			ФизическоеЛицо.
//			Удержание
//			Сумма
//
//		ИсчисленныйНДФЛ - таблица значений.
//
//		ИсчисленныеВзносы - таблица значений.
//
//		МенеджерВременныхТаблиц - менеджер временных таблиц на котором могут 
//		удерживаться таблицы
//			ВТНачисления (данные о начисленных суммах).
//				Сотрудник
//				ПериодДействия
//				ДатаНачала
//				Начисление
//				СуммаДохода
//				СуммаВычетаНДФЛ
//				СуммаВычетаВзносы
//				КодВычетаНДФЛ
//				Подразделение
//			ВТФизическиеЛица (список людей по которым выполняется расчет)
//				ФизическоеЛицо.
//
Функция СоздатьДанныеДляПроведенияНачисленияЗарплаты() Экспорт
	
	ПоляСтруктуры = 
	"МенеджерВременныхТаблиц, 
	|НачисленияПоСотрудникам,
	|ОтработанноеВремяПоСотрудникам,
	|УдержанияПоСотрудникам, 
	|ИсчисленныйНДФЛ, 
	|ИсчисленныеВзносы";
	
	ДанныеДляПроведения = Новый Структура(ПоляСтруктуры);
	ДанныеДляПроведения.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Возврат ДанныеДляПроведения;
	
КонецФункции

Процедура ЗаполнитьНачисления(ДанныеДляПроведенияНачисленияЗарплаты, Документ, ТаблицаНачислений, ПолеДатыДействия, ФизическиеЛица) Экспорт
	
	Если ФизическиеЛица = Неопределено Тогда
		ОтборПоФизическимЛицам = Ложь;
	Иначе
		ОтборПоФизическимЛицам = Истина;
	КонецЕсли;
	
	// Получаем массив имен табличных частей.
	ИменаТаблицНачислений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТаблицаНачислений);
	
	// Метаданные документа используем для обращения к таблице.
	МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипЗнч(Документ));
	
	// Составляем текст запроса создания временной таблицы.
	ТекстЗапроса = "";
	ПерваяТаблица = Истина;
	Для Каждого ИмяТаблицыНачислений Из ИменаТаблицНачислений Цикл
		Если Не ПерваяТаблица Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ТаблицаНачислений.Сотрудник КАК Сотрудник,
		|	НАЧАЛОПЕРИОДА(ТаблицаНачислений.ДатаДействия, МЕСЯЦ) КАК ПериодДействия,
		|	ТаблицаНачислений.ДатаДействия КАК ДатаНачала,
		|	ТаблицаНачислений.Начисление КАК Начисление,
		|	ТаблицаНачислений.Результат КАК СуммаДохода,
		|	ТаблицаНачислений.СуммаВычета КАК СуммаВычетаНДФЛ,
		|	ТаблицаНачислений.СуммаВычета КАК СуммаВычетаВзносы,
		|	ТаблицаНачислений.КодВычета КАК КодВычетаНДФЛ,
		|	ТаблицаНачислений.Подразделение,
		|	ТаблицаНачислений.Подразделение КАК ПодразделениеОрганизации
		|";
		Если ПерваяТаблица Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ПОМЕСТИТЬ ВТНачисления
			|";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|ИЗ
		|	#ТаблицаНачислений КАК ТаблицаНачислений
		|ГДЕ
		|	ТаблицаНачислений.Ссылка = &Ссылка
		|";
		Если ОтборПоФизическимЛицам Тогда
			ТекстЗапроса = ТекстЗапроса + "
				|	И ВЫРАЗИТЬ(ТаблицаНачислений.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо В (&ФизическиеЛица)
				|";
		КонецЕсли; 
		ПерваяТаблица = Ложь;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаНачислений", МетаданныеДокумента.ПолноеИмя() + "." + ИмяТаблицыНачислений);
	КонецЦикла;
	
	// Устанавливаем поле даты действия.
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДатаДействия, МЕСЯЦ) КАК ПериодДействия", ПолеДатыДействия + ", МЕСЯЦ) КАК ПериодДействия");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДатаДействия КАК ДатаНачала", ПолеДатыДействия + " КАК ДатаНачала");
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Документ);
	Запрос.МенеджерВременныхТаблиц = ДанныеДляПроведенияНачисленияЗарплаты.МенеджерВременныхТаблиц;
	Если ОтборПоФизическимЛицам Тогда
		Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
	КонецЕсли; 
	Запрос.Выполнить();
	
	// Составляем текст запроса таблицы значений.
	ТекстЗапроса = "";
	ПерваяТаблица = Истина;
	Для Каждого ИмяТаблицыНачислений Из ИменаТаблицНачислений Цикл
		Если Не ПерваяТаблица Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		
		ТекстЗапросаПолей =
		"ВЫБРАТЬ
		|	Начисления.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Начисления.Сотрудник КАК Сотрудник,
		|	Начисления.Подразделение,
		|	Начисления.Начисление КАК Начисление,
		|	Начисления.Результат КАК Сумма,
		|	Начисления.ОтработаноДней КАК ОтработаноДней,
		|	Начисления.ОтработаноЧасов КАК ОтработаноЧасов,
		|	Начисления.ОтработаноДней КАК ОплаченоДней,
		|	Начисления.ОтработаноЧасов КАК ОплаченоЧасов,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачала,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОкончания
		|ИЗ
		|	#ТаблицаНачислений КАК Начисления
		|ГДЕ
		|	Начисления.Ссылка = &Ссылка
		|";
		Если ОтборПоФизическимЛицам Тогда
			ТекстЗапросаПолей = ТекстЗапросаПолей + "
				|	И ВЫРАЗИТЬ(Начисления.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо В (&ФизическиеЛица)
				|";
		КонецЕсли;
			
		Если МетаданныеДокумента.ТабличныеЧасти[ИмяТаблицыНачислений].Реквизиты.Найти("ОплаченоДней") <> Неопределено Тогда
			
			ТекстЗапросаПолей = СтрЗаменить(ТекстЗапросаПолей, "Начисления.ОтработаноДней КАК ОплаченоДней", "Начисления.ОплаченоДней КАК ОплаченоДней");
			
			Если МетаданныеДокумента.ТабличныеЧасти[ИмяТаблицыНачислений].Реквизиты.Найти("ОплаченоЧасов") <> Неопределено Тогда
				ТекстЗапросаПолей = СтрЗаменить(ТекстЗапросаПолей, "Начисления.ОтработаноЧасов КАК ОплаченоЧасов", "Начисления.ОплаченоЧасов КАК ОплаченоЧасов");
			Иначе
				ТекстЗапросаПолей = СтрЗаменить(ТекстЗапросаПолей, "Начисления.ОтработаноЧасов КАК ОплаченоЧасов", "Начисления.ОплаченоДней * 8 КАК ОплаченоЧасов");
			КонецЕсли;
			
		КонецЕсли;
		
		Если МетаданныеДокумента.ТабличныеЧасти[ИмяТаблицыНачислений].Реквизиты.Найти("ДатаНачала") <> Неопределено Тогда
			ТекстЗапросаПолей = СтрЗаменить(ТекстЗапросаПолей, "ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачала", "Начисления.ДатаНачала КАК ДатаНачала");
		КонецЕсли;
		
		Если МетаданныеДокумента.ТабличныеЧасти[ИмяТаблицыНачислений].Реквизиты.Найти("ДатаОкончания") <> Неопределено Тогда
			ТекстЗапросаПолей = СтрЗаменить(ТекстЗапросаПолей, "ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОкончания", "Начисления.ДатаОкончания КАК ДатаОкончания");
		КонецЕсли;
		
		ПерваяТаблица = Ложь;
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаПолей;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаНачислений", МетаданныеДокумента.ПолноеИмя() + "." + ИмяТаблицыНачислений);
	КонецЦикла;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ 
		|	Начисления.ФизическоеЛицо,
		|	Начисления.Сотрудник,
		|	Начисления.Подразделение,
		|	Начисления.Начисление,
		|	Начисления.ДатаНачала,
		|	Начисления.ДатаОкончания,
		|	СУММА(Начисления.Сумма) КАК Сумма,
		|	СУММА(Начисления.ОтработаноДней) КАК ОтработаноДней,
		|	СУММА(Начисления.ОтработаноЧасов) КАК ОтработаноЧасов,
		|	СУММА(Начисления.ОплаченоДней) КАК ОплаченоДней,
		|	СУММА(Начисления.ОплаченоЧасов) КАК ОплаченоЧасов
		|ПОМЕСТИТЬ ВТНачисленияИОтработанноеВремя
		|ИЗ
		|(" + ТекстЗапроса + ") КАК Начисления
		|
		|СГРУППИРОВАТЬ ПО
		|	Начисления.ФизическоеЛицо,
		|	Начисления.Сотрудник,
		|	Начисления.Подразделение,
		|	Начисления.Начисление,
		|	Начисления.ДатаНачала,
		|	Начисления.ДатаОкончания";
	
	ТекстЗапроса = ТекстЗапроса + ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов() +
		"ВЫБРАТЬ
		|	НачисленияИОтработанноеВремя.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НачисленияИОтработанноеВремя.Сотрудник КАК Сотрудник,
		|	НачисленияИОтработанноеВремя.Подразделение КАК Подразделение,
		|	НачисленияИОтработанноеВремя.Начисление КАК Начисление,
		|	НачисленияИОтработанноеВремя.ДатаНачала,
		|	НачисленияИОтработанноеВремя.ДатаОкончания,
		|	НачисленияИОтработанноеВремя.Сумма КАК Сумма,
		|	НачисленияИОтработанноеВремя.ОтработаноДней КАК ОтработаноДней,
		|	НачисленияИОтработанноеВремя.ОтработаноЧасов КАК ОтработаноЧасов,
		|	НачисленияИОтработанноеВремя.ОплаченоДней КАК ОплаченоДней,
		|	НачисленияИОтработанноеВремя.ОплаченоЧасов КАК ОплаченоЧасов
		|ИЗ
		|	ВТНачисленияИОтработанноеВремя КАК НачисленияИОтработанноеВремя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачисленияИОтработанноеВремя.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НачисленияИОтработанноеВремя.Сотрудник КАК Сотрудник,
		|	НачисленияИОтработанноеВремя.Подразделение КАК Подразделение,
		|	НачисленияИОтработанноеВремя.Начисление КАК Начисление,
		|	СУММА(НачисленияИОтработанноеВремя.ОтработаноДней) КАК ОтработаноДней,
		|	СУММА(НачисленияИОтработанноеВремя.ОтработаноЧасов) КАК ОтработаноЧасов,
		|	СУММА(НачисленияИОтработанноеВремя.ОплаченоДней) КАК ОплаченоДней,
		|	СУММА(НачисленияИОтработанноеВремя.ОплаченоЧасов) КАК ОплаченоЧасов
		|ИЗ
		|	ВТНачисленияИОтработанноеВремя КАК НачисленияИОтработанноеВремя
		|ГДЕ
		|	НЕ(НачисленияИОтработанноеВремя.ОтработаноДней = 0
		|				И НачисленияИОтработанноеВремя.ОтработаноЧасов = 0
		|				И НачисленияИОтработанноеВремя.ОплаченоДней = 0
		|				И НачисленияИОтработанноеВремя.ОплаченоЧасов = 0)
		|
		|СГРУППИРОВАТЬ ПО
		|	НачисленияИОтработанноеВремя.ФизическоеЛицо,
		|	НачисленияИОтработанноеВремя.Сотрудник,
		|	НачисленияИОтработанноеВремя.Подразделение,
		|	НачисленияИОтработанноеВремя.Начисление";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Документ);
	Если ОтборПоФизическимЛицам Тогда
		Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
	КонецЕсли; 
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеДляПроведенияНачисленияЗарплаты.НачисленияПоСотрудникам = РезультатыЗапроса[1].Выгрузить();
	ДанныеДляПроведенияНачисленияЗарплаты.ОтработанноеВремяПоСотрудникам = РезультатыЗапроса[2].Выгрузить();
	
КонецПроцедуры

// Заполняет данные для проведения удержаниями.
//	
// Параметры:	
// 		ДанныеДляПроведенияНачисленияЗарплаты.
//		Документ
//		ТаблицаУдержаний - имя табличной части с удержаниями, не обязательно, по умолчанию - "Удержания".
//
Процедура ЗаполнитьУдержания(ДанныеДляПроведенияНачисленияЗарплаты, Документ, ТаблицаУдержаний = "Удержания", ФизическиеЛица) Экспорт
	
	Если ФизическиеЛица = Неопределено Тогда
		ОтборПоФизическимЛицам = Ложь;
	Иначе
		ОтборПоФизическимЛицам = Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Документ);
	Если ОтборПоФизическимЛицам Тогда
		Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
	КонецЕсли; 
	
	МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипЗнч(Документ));
	ИмяТаблицыУдержаний = МетаданныеДокумента.ПолноеИмя() + "." + ТаблицаУдержаний;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Удержания.Сотрудник КАК ФизическоеЛицо,
	|	Удержания.Удержание,
	|	Удержания.Удержание.КатегорияУдержания КАК КатегорияУдержания,
	|	Удержания.Контрагент КАК Контрагент,
	|	СУММА(Удержания.Результат) КАК Сумма
	|ИЗ
	|	#ТаблицаУдержаний КАК Удержания
	|ГДЕ
	|	Удержания.Ссылка = &Ссылка
	|	И Удержания.Сотрудник В(&ФизическиеЛица)
	|
	|СГРУППИРОВАТЬ ПО
	|	Удержания.Сотрудник,
	|	Удержания.Удержание,
	|	Удержания.Контрагент,
	|	Удержания.Удержание.КатегорияУдержания";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаУдержаний", ИмяТаблицыУдержаний);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Удержания.Сотрудник В(&ФизическиеЛица)", "");
	
	ДанныеДляПроведенияНачисленияЗарплаты.УдержанияПоСотрудникам = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// Дополняет структуру данных для проведения таблицей НДФЛ.
//
Процедура ЗаполнитьДанныеНДФЛ(ДанныеДляПроведения, ДокументСсылка, ФизическиеЛица) Экспорт
	
	НДФЛ = УчетНДФЛ.ДанныеДокументаОНалогеПоОсновнойСтавкеИВычетах(ДокументСсылка, , , ФизическиеЛица);
	Если НДФЛ.Колонки.Найти("ПодразделениеСотрудника") = Неопределено Тогда  
		НДФЛ.Колонки.Добавить("ПодразделениеСотрудника", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	КонецЕсли;
	
	Для каждого СтрокаТЗ Из НДФЛ Цикл
		СтрокаТЗ.ПодразделениеСотрудника = СтрокаТЗ.Подразделение;
	КонецЦикла;
	
	ДанныеДляПроведения.Вставить("НДФЛ", НДФЛ);
	
КонецПроцедуры

// Дополняет структуру данных для проведения таблицей страховых взносов.
//
Процедура ЗаполнитьДанныеСтраховыхВзносов(ДанныеДляПроведения, ДокументСсылка, ФизическиеЛица = Неопределено) Экспорт
	
	ДанныеДляПроведения.Вставить("СтраховыеВзносы", УчетСтраховыхВзносов.ДанныеОВзносахИзДокумента(ДокументСсылка, , , ФизическиеЛица));

КонецПроцедуры

// Возвращает таблицу значений с колонками
//	ФизическоеЛицо.
//	Сотрудник
//	Подразделение
//	Сумма
//
// Параметры:
//	ФизическиеЛица
//	МесяцНачисления
//
Функция ПолучитьБазуУдержанийПоУмолчанию(ФизическиеЛица, МесяцНачисления, Организация) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПолученияСотрудниковОрганизаций = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудниковОрганизаций.Организация 			= Организация;
	ПараметрыПолученияСотрудниковОрганизаций.СписокФизическихЛиц 	= ФизическиеЛица;
	ПараметрыПолученияСотрудниковОрганизаций.КадровыеДанные			= "ТарифнаяСтавка,Подразделение,ДатаПриема,ДатаУвольнения,ВАрхиве";
	
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудниковОрганизаций);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст  = 
	"ВЫБРАТЬ
	|	КадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	|	КадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
	|	КадровыеДанныеСотрудников.Подразделение КАК Подразделение,
	|	ЕСТЬNULL(КадровыеДанныеСотрудников.ТарифнаяСтавка, 0) КАК Сумма
	|ИЗ
	|	ВТСотрудникиОрганизации КАК КадровыеДанныеСотрудников
	|ГДЕ
	|	НЕ КадровыеДанныеСотрудников.ВАрхиве
	|	И (КадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ НАЧАЛОПЕРИОДА(КадровыеДанныеСотрудников.ДатаУвольнения, МЕСЯЦ) >= &МесяцНачисления)
	|	И КадровыеДанныеСотрудников.ДатаПриема < КОНЕЦПЕРИОДА(&МесяцНачисления, МЕСЯЦ)";
	
	Запрос.УстановитьПараметр("МесяцНачисления", МесяцНачисления);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура СформироватьПланВидовРасчетаПоНастройкам() Экспорт
	
	ПланыВидовРасчета.Начисления.СоздатьНачисленияПоНастройкам();
	ПланыВидовРасчета.Удержания.СоздатьУдержанияПоНастройкам();

КонецПроцедуры

Процедура СформироватьВидыРасчетаРКиСН() Экспорт
	
	ПланыВидовРасчета.Начисления.СоздатьНачисленияРКиСН();
	
КонецПроцедуры

// Создает временную таблицу ВТПорядокПредопределенныхНачисленийУдержаний.
//	Поля
//		Ссылка - ссылка, ПланыВидовРасчета.Начисления, ПланыВидовРасчета.Удержания
//		Порядок - число
//		НачислениеУдержание - строка, "Начисление" или "Удержание".
// 
Процедура СоздатьВТПорядокПредопределенныхНачисленийУдержаний(МенеджерВременныхТаблиц, ТолькоРазрешенные) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Начисления.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда)
	|			ТОГДА 1
	|		КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент)
	|			ТОГДА 2
	|		КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка)
	|			ТОГДА 3
	|	КОНЕЦ КАК Порядок,
	|	""Начисления"" КАК НачислениеУдержание
	|ПОМЕСТИТЬ ВТПорядокПредопределенныхНачисленийУдержаний
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланВидовРасчета.Удержания.ПустаяСсылка),
	|	0,
	|	""Удержания""
	|ИЗ
	|	ПланВидовРасчета.Удержания КАК Удержания
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	Если НЕ ТолькоРазрешенные Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ");
	КонецЕсли;
	
	Запрос.Выполнить();

КонецПроцедуры

Процедура ЗаполнитьДокументНачисленияЗарплаты(Объект) Экспорт
	
	ЗаполнитьРезультатНачисления(Объект);
	ЗаполнитьНДФЛиВзносы(Объект);
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РасчетЗарплатыДляНебольшихОрганизаций") Тогда
		МодульРасчетЗарплатыДляНебольшихОрганизаций = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("РасчетЗарплатыДляНебольшихОрганизаций");
		МодульРасчетЗарплатыДляНебольшихОрганизаций.ЗаполнитьРезультатУдержаний(Объект);
		МодульРасчетЗарплатыДляНебольшихОрганизаций.СформироватьТабличнуюЧастьСотрудники(Объект);
	КонецЕсли;
	
КонецПроцедуры	

Процедура ЗаполнитьРезультатНачисления(Объект)
	
	Объект.Начисления.Очистить();
	
	РезультатНачисления = РасчетЗарплаты.РезультатНачисленияРасчетаЗарплаты(Объект.Организация, Объект.МесяцНачисления, КонецМесяца(Объект.МесяцНачисления), Объект.МесяцНачисления, Объект.Ссылка, Объект.Подразделение);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатНачисления, Объект.Начисления);
	
	ЗаполнитьОтработанноеВремя(Объект.Начисления, Объект.МесяцНачисления);
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РасчетЗарплатыДляНебольшихОрганизаций") Тогда
		МодульРасчетЗарплатыДляНебольшихОрганизаций = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("РасчетЗарплатыДляНебольшихОрганизаций");
		МодульРасчетЗарплатыДляНебольшихОрганизаций.ЗаполнитьРезультатНачисления(Объект, Объект.Начисления);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОтработанноеВремя(СтрокиНачислений, МесяцНачисления) Экспорт
	
	КоличествоДней = 0;
	КоличествоЧасов = 0;
	
	// Получаем количество дней по календарю.
	ПроизводственныйКалендарьРФ = КалендарныеГрафики.ПроизводственныйКалендарьРоссийскойФедерации();
	Если ПроизводственныйКалендарьРФ <> Неопределено Тогда
		
		// Если производственный календарь определить не удалось - оставляем число дней нулевым.
		РабочихДнейЧасов = РабочихДнейЧасовВПериоде(ПроизводственныйКалендарьРФ, НачалоМесяца(МесяцНачисления), КонецМесяца(МесяцНачисления));
		
		КоличествоДней = РабочихДнейЧасов.Дней;
		КоличествоЧасов = РабочихДнейЧасов.Часов;
		
	КонецЕсли;
	
	Если ТипЗнч(СтрокиНачислений) = Тип("ТаблицаЗначений") Тогда
		СотрудникиНачислений = СтрокиНачислений.ВыгрузитьКолонку("Сотрудник");
	Иначе
		СотрудникиНачислений = СтрокиНачислений.Выгрузить(, "Сотрудник").ВыгрузитьКолонку("Сотрудник");
	КонецЕсли;
	
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, СотрудникиНачислений, "ДатаПриема,ДатаУвольнения");
	
	Начисления = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиНачислений, "Начисление", Истина);
	КатегорииНачислений = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Начисления, "КатегорияНачисленияИлиНеоплаченногоВремени");
	
	КоэффициентыПересчетаСотрудников = Новый Соответствие;
	
	Для Каждого Строка Из СтрокиНачислений Цикл
		
		Если КатегорииНачислений[Строка.Начисление] = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда Тогда
			
			НачалоПериодаРаботы = НачалоМесяца(МесяцНачисления);
			ОкончаниеПериодаРаботы = КонецМесяца(МесяцНачисления);
			
			ДанныеСотрудника = КадровыеДанные.НайтиСтроки(Новый Структура("Сотрудник", Строка.Сотрудник));
			Если ПроизводственныйКалендарьРФ <> Неопределено
				И ДанныеСотрудника.Количество() > 0
				И (ДанныеСотрудника[0].ДатаПриема > НачалоПериодаРаботы
					ИЛИ ЗначениеЗаполнено(ДанныеСотрудника[0].ДатаУвольнения)
						И ДанныеСотрудника[0].ДатаУвольнения < ОкончаниеПериодаРаботы) Тогда
						
				Если ДанныеСотрудника[0].ДатаПриема > НачалоПериодаРаботы Тогда
					НачалоПериодаРаботы = ДанныеСотрудника[0].ДатаПриема;
				КонецЕсли; 
				
				Если ЗначениеЗаполнено(ДанныеСотрудника[0].ДатаУвольнения)
					И ДанныеСотрудника[0].ДатаУвольнения < ОкончаниеПериодаРаботы Тогда
					
					ОкончаниеПериодаРаботы = ДанныеСотрудника[0].ДатаУвольнения;
					
				КонецЕсли; 
						
				РабочихДнейЧасов = РабочихДнейЧасовВПериоде(ПроизводственныйКалендарьРФ, НачалоПериодаРаботы, ОкончаниеПериодаРаботы);
				
				КоличествоОтработанныхДней = РабочихДнейЧасов.Дней;
				КоличествоОтработанныхЧасов = РабочихДнейЧасов.Часов;
				
			Иначе
				КоличествоОтработанныхДней = КоличествоДней;
				КоличествоОтработанныхЧасов = КоличествоЧасов;
			КонецЕсли;
			
			Строка.ОтработаноДней = КоличествоОтработанныхДней;
			Строка.ОтработаноЧасов = КоличествоОтработанныхЧасов;
			
			Если Строка.ОтработаноДней <> КоличествоДней И КоличествоДней <> 0 Тогда
				
				КоэффициентыПересчета = Строка.ОтработаноДней / КоличествоДней;
				КоэффициентыПересчетаСотрудников.Вставить(Строка.Сотрудник, КоэффициентыПересчета);
				Строка.Результат = Строка.Результат * КоэффициентыПересчета;
				
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Строка Из СтрокиНачислений Цикл
		
		Если КатегорииНачислений[Строка.Начисление] <> Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда Тогда
			
			КоэффициентыПересчета = КоэффициентыПересчетаСотрудников.Получить(Строка.Сотрудник);
			Если КоэффициентыПересчета <> Неопределено Тогда
				Строка.Результат = Строка.Результат * КоэффициентыПересчета;
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьВТДляРасчетаНДФЛиВзносов(МенеджерВременныхТаблиц, Объект, Сотрудники = Неопределено) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Начисления.Сотрудник,
	|	Начисления.Начисление,
	|	&МесяцНачисления КАК ПериодДействия,
	|	&МесяцНачисления КАК ДатаНачала,
	|	Начисления.Результат КАК СуммаДохода,
	|	Начисления.КодВычета КАК КодВычетаНДФЛ,
	|	Начисления.СуммаВычета КАК СуммаВычетаНДФЛ,
	|	Начисления.СуммаВычета КАК СуммаВычетаВзносы,
	|	Начисления.Подразделение
	|ПОМЕСТИТЬ ВТВсеНачисления
	|ИЗ
	|	&Начисления КАК Начисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисления.Сотрудник,
	|	Начисления.Начисление,
	|	Начисления.ПериодДействия,
	|	Начисления.ДатаНачала,
	|	Начисления.СуммаДохода,
	|	Начисления.КодВычетаНДФЛ,
	|	Начисления.СуммаВычетаНДФЛ,
	|	Начисления.СуммаВычетаВзносы,
	|	Начисления.Подразделение,
	|	Начисления.Подразделение КАК ПодразделениеОрганизации
	|ПОМЕСТИТЬ ВТНачисления
	|ИЗ
	|	ВТВсеНачисления КАК Начисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК СотрудникОтбор
	|			ПО (СотрудникОтбор.Ссылка В (&Сотрудники))
	|				И (&ПоВсемСотрудникам = ЛОЖЬ)
	|		ПО (ФизическиеЛица.Ссылка = СотрудникОтбор.ФизическоеЛицо)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО (Сотрудники.ФизическоеЛицо = ФизическиеЛица.Ссылка)
	|			И (Сотрудники.Ссылка = Начисления.Сотрудник)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Начисления.Сотрудник,
	|	Начисления.Начисление,
	|	Начисления.ПериодДействия,
	|	Начисления.ДатаНачала,
	|	Начисления.СуммаДохода,
	|	Начисления.КодВычетаНДФЛ,
	|	Начисления.СуммаВычетаНДФЛ,
	|	Начисления.СуммаВычетаВзносы,
	|	Начисления.Подразделение,
	|	Начисления.Подразделение
	|ИЗ
	|	ВТВсеНачисления КАК Начисления
	|ГДЕ
	|	&ПоВсемСотрудникам = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Удержания.Сотрудник КАК ФизическоеЛицо,
	|	Удержания.Удержание КАК Удержание,
	|	Удержания.Результат КАК Сумма
	|ПОМЕСТИТЬ ВТВсеУдержания
	|ИЗ
	|	&Удержания КАК Удержания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Удержания.ФизическоеЛицо,
	|	Удержания.Удержание,
	|	Удержания.Сумма
	|ПОМЕСТИТЬ ВТУдержания
	|ИЗ
	|	ВТВсеУдержания КАК Удержания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК СотрудникОтбор
	|		ПО (СотрудникОтбор.ФизическоеЛицо = Удержания.ФизическоеЛицо)
	|			И (СотрудникОтбор.Ссылка В (&Сотрудники))
	|			И (&ПоВсемСотрудникам = ЛОЖЬ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Удержания.ФизическоеЛицо,
	|	Удержания.Удержание,
	|	Удержания.Сумма
	|ИЗ
	|	ВТВсеУдержания КАК Удержания
	|ГДЕ
	|	&ПоВсемСотрудникам = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТФизическиеЛица
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО (Сотрудники.ФизическоеЛицо = ФизическиеЛица.Ссылка)
	|			И (Сотрудники.Ссылка В (&Сотрудники))
	|			И (&ПоВсемСотрудникам = ЛОЖЬ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.ФизическоеЛицо
	|ИЗ
	|	ВТНачисления КАК Начисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО (Сотрудники.Ссылка = Начисления.Сотрудник)
	|ГДЕ
	|	&ПоВсемСотрудникам = ИСТИНА";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Начисления", Объект.Начисления.Выгрузить());
	Запрос.УстановитьПараметр("Удержания", Объект.Удержания.Выгрузить());
	Запрос.УстановитьПараметр("МесяцНачисления", Объект.МесяцНачисления);
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("ПоВсемСотрудникам", Сотрудники = Неопределено);
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ЗаполнитьНДФЛиВзносы(Объект, ЗаполнятьНДФЛ = Истина, ЗаполнятьВзносы = Истина) Экспорт
	
	Если Объект.КорректироватьНДФЛ И Объект.КорректироватьВзносы Тогда
		Возврат;
	КонецЕсли;
	
	// Составляем временные таблицы для расчета НДФЛ и взносов.
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТДляРасчетаНДФЛиВзносов(МенеджерВременныхТаблиц, Объект);

	ДатаОперации = Мин(Объект.Дата, КонецДня(Объект.МесяцНачисления));
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗаполнятьНДФЛ Тогда
		ЗаполнитьНДФЛ(Объект, МенеджерВременныхТаблиц, ДатаОперации);
	КонецЕсли; 
	
	Если ЗаполнятьВзносы Тогда
		ЗаполнитьВзносы(Объект, МенеджерВременныхТаблиц, ДатаОперации);	
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ЗаполнитьНДФЛ(Объект, МенеджерВременныхТаблиц, ДатаОперации)
	
	Если Объект.КорректироватьНДФЛ Тогда
		Возврат;
	КонецЕсли;
	
	// Расчет НДФЛ
	РезультатРасчетаНДФЛ = РезультатРасчетаНДФЛ(МенеджерВременныхТаблиц, Объект, ДатаОперации);
	
	Объект.НДФЛ.Очистить();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатРасчетаНДФЛ.НДФЛ, Объект.НДФЛ);
	
	Объект.ПримененныеВычетыНаДетейИИмущественные.Очистить();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатРасчетаНДФЛ.ПримененныеВычетыНаДетейИИмущественные, Объект.ПримененныеВычетыНаДетейИИмущественные);
	
КонецПроцедуры

Процедура ЗаполнитьВзносы(Объект, МенеджерВременныхТаблиц, ДатаОперации)
	
	Если Объект.КорректироватьВзносы Тогда
		Возврат;
	КонецЕсли;
	
	// Расчет страховых взносов
	Взносы = РезультатРасчетаВзносов(МенеджерВременныхТаблиц, Объект.Ссылка, Объект.Организация, Объект.МесяцНачисления);
	
	// Перенос результата расчета страховых взносов в форму.
	Объект.Взносы.Очистить();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Взносы, Объект.Взносы);
	
КонецПроцедуры

Функция РезультатРасчетаНДФЛ(МенеджерВременныхТаблиц, Объект, ДатаОперации) Экспорт
	
	// Подготавливаем структуру наборов записей документа, имитирующую коллекцию Движения.
	НаборыЗаписей = ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.НачислениеЗарплаты);
	
	Если Не ТранзакцияАктивна() Тогда
		НачатьТранзакцию();
		ОтменятьЗапись = Истина;
	КонецЕсли;
	
	УчетНДФЛ.СформироватьСоциальныеВычетыПоВременнойТаблице(Объект.Ссылка, НаборыЗаписей,  Неопределено, Объект.Организация, ДатаОперации, Объект.МесяцНачисления, МенеджерВременныхТаблиц, Истина);
	УчетНДФЛ.СформироватьДоходыНДФЛПоНачислениям(НаборыЗаписей, Неопределено, Объект.Организация, ДатаОперации, ДатаОперации, МенеджерВременныхТаблиц, Объект.МесяцНачисления, Истина);
	
	// Расчет НДФЛ
	РезультатРасчетаНДФЛ = УчетНДФЛ.РезультатРасчетаНДФЛ(МенеджерВременныхТаблиц, Объект.Ссылка, Объект.Организация, Объект.МесяцНачисления, Истина, НачалоДня(КонецМесяца(Объект.МесяцНачисления)));
	
	Если ОтменятьЗапись = Истина Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
	
	Возврат РезультатРасчетаНДФЛ;
	
КонецФункции

// Составляет таблицу для заполнения страховых взносов в форме документов.
//
// Параметры:
//	МенеджерВременныхТаблиц - менеджер временных таблиц, в котором определены таблицы ВТНачисления и ВТФизическиеЛица.
//
// Возвращаемое значение - таблица значений Взносы.
//
Функция РезультатРасчетаВзносов(МенеджерВременныхТаблиц, ДокументСсылка, Организация, МесяцНачисления) Экспорт
	
	// Подготавливаем структуру наборов записей документа, имитирующую коллекцию Движения.
	НаборыЗаписей = ЗарплатаКадры.НаборыЗаписейРегистратора(ДокументСсылка.Метаданные(),?(ДокументСсылка.Пустая(), Неопределено, ДокументСсылка));
	
	Если Не ТранзакцияАктивна() Тогда
		НачатьТранзакцию();
		ОтменятьЗапись = Истина;
	КонецЕсли;
	
	// Расчет страховых взносов
	ДанныеДляПроведения = РасчетЗарплаты.СоздатьДанныеДляПроведенияНачисленияЗарплаты();
	ДанныеДляПроведения.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ОтражениеЗарплатыВБухучете.ДополнитьНачисленияДаннымиОЕНВД(ДанныеДляПроведения, ДокументСсылка, МесяцНачисления, Организация, Истина);
	
	УчетСтраховыхВзносов.СформироватьСведенияОДоходахСтраховыеВзносы(НаборыЗаписей, Неопределено, Организация, МесяцНачисления, МенеджерВременныхТаблиц, , Истина);
	
	Взносы = УчетСтраховыхВзносов.РассчитатьВзносы(ДокументСсылка, Организация, МесяцНачисления, МенеджерВременныхТаблиц, Ложь);
	
	Если ОтменятьЗапись = Истина Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
	
	Возврат Взносы;
	
КонецФункции

Процедура УстановитьВходимостьНачисленийВБазуРКИСН() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Начисления.Ссылка
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|ГДЕ
		|	НЕ Начисления.ВходитВБазуРКИСН
		|	И Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда)";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Начисления.Ссылка
			|ИЗ
			|	ПланВидовРасчета.Начисления КАК Начисления
			|ГДЕ
			|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В(ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.Прочее))";
			
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
			НачислениеОбъект.ВходитВБазуРКИСН = Истина;
			НачислениеОбъект.ОбменДанными.Загрузка = Истина;
			НачислениеОбъект.Записать();
			
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура УстановитьСпособРасчетаАвансаСотрудников() Экспорт
	
	// Документы ПриемНаРаботу
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПриемНаРаботу.Ссылка КАК Регистратор,
		|	ПриемНаРаботу.ДатаПриема КАК Период,
		|	ПриемНаРаботу.Сотрудник,
		|	ПриемНаРаботу.ФизическоеЛицо,
		|	ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаАванса.ПроцентомОтТарифа) КАК СпособРасчетаАванса,
		|	ПриемНаРаботу.Аванс
		|ИЗ
		|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
		|ГДЕ
		|	ПриемНаРаботу.СпособРасчетаАванса = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаАванса.ПустаяСсылка)";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ДокументОбъект = Выборка.Регистратор.ПолучитьОбъект();
			
			ДокументОбъект.СпособРасчетаАванса = Перечисления.СпособыРасчетаАванса.ПроцентомОтТарифа;
			
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.Записать();
			
			НаборЗаписей = РегистрыСведений.ПлановыеАвансы.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			
			НаборЗаписей.ДополнительныеСвойства.Вставить("ПроверятьБизнесЛогикуПриЗаписи", Истина);
			
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать();
			
		КонецЦикла; 
		
	КонецЕсли; 
	
	// Регистр сведений ТекущаяТарифнаяСтавкаСотрудников.
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК Период
		|ПОМЕСТИТЬ ВТИзмеренияДаты
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники";
		
	Запрос.Выполнить();
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеАвансы",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТИзмеренияДаты",
			"Сотрудник"
		)
	);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТекущаяТарифнаяСтавкаСотрудников.Сотрудник,
		|	ВЫБОР
		|		КОГДА ПлановыеАвансы.Сотрудник ЕСТЬ NULL 
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаАванса.ПроцентомОтТарифа)
		|		ИНАЧЕ ПлановыеАвансы.СпособРасчетаАванса
		|	КОНЕЦ КАК ТекущийСпособРасчетаАванса,
		|	ВЫБОР
		|		КОГДА ПлановыеАвансы.Сотрудник ЕСТЬ NULL 
		|			ТОГДА 0
		|		ИНАЧЕ ПлановыеАвансы.Аванс
		|	КОНЕЦ КАК ТекущийАванс
		|ИЗ
		|	РегистрСведений.ТекущаяТарифнаяСтавкаСотрудников КАК ТекущаяТарифнаяСтавкаСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеАвансыСрезПоследних КАК ПлановыеАвансы
		|		ПО ТекущаяТарифнаяСтавкаСотрудников.Сотрудник = ПлановыеАвансы.Сотрудник
		|ГДЕ
		|	ТекущаяТарифнаяСтавкаСотрудников.ТекущийСпособРасчетаАванса = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаАванса.ПустаяСсылка)";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НаборЗаписей = РегистрыСведений.ТекущаяТарифнаяСтавкаСотрудников.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() > 0 Тогда
				
				НаборЗаписей[0].ТекущийСпособРасчетаАванса = Выборка.ТекущийСпособРасчетаАванса;
				НаборЗаписей[0].ТекущийАванс = Выборка.ТекущийАванс;
				
				НаборЗаписей.ОбменДанными.Загрузка = Истина;
				НаборЗаписей.Записать();
				
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура СформироватьВидыРасчетаБольничныхОтпусковИсполнительныхЛистов() Экспорт
	
	РасчетЗарплаты.СформироватьПланВидовРасчетаПоНастройкам();
	
КонецПроцедуры

#КонецОбласти
