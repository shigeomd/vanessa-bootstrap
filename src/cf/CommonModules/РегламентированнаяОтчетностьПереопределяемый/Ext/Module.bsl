
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОЛУЧЕНИЯ СВЕДЕНИЙ ОБ ОРГАНИЗАЦИИ
//

// Функция возвращает сведения об организации.
//
// Параметры:
//  Организация       - ссылка на элемент справочника "Организации";
//  ДатаЗначения      - дата, на которую нужно получить сведения;
//  СписокПоказателей - список показателей, значения которых нужно вернуть.
//  
// Возвращаемое значение:
//  Структура с ключами из списка показателей и возвращаемыми значениями.
//
// Пример:
//	ОргСведения = Новый Структура;
//  Для Каждого Показатель Из СписокПоказателей Цикл
//  	ИмяПоказателя = Показатель.Представление;
//      Если Имяпоказателя = "КодНО" Тогда
//      	Значение = Организация.КодНалоговогоОргана;
//      ИначеЕсли ИмяПоказателя = "ОГРН" Тогда
//      	Значение = Организация.ОГРН;
//      Иначе
//      	Значение = "";
//      КонецЕсли;
//      ОргСведения.Вставить(ИмяПоказателя, Значение);
//  КонецЦикла;
//  Возврат ОргСведения;
//
Функция ПолучитьСведенияОбОрганизации(Знач Организация, Знач ДатаЗначения = Неопределено, Знач СписокПоказателей = Неопределено) Экспорт
	
	Перем ОргСведения;
	Перем Значение;

	// Структура, в которой будут возвращаться найденные значения
	ОргСведения = Новый Структура;
	
	Если ДатаЗначения = Неопределено Тогда
		ДатаЗначения = ТекущаяДатаСеанса();
	КонецЕсли;
	ДатаЗначения = КонецДня(ДатаЗначения);
	
	ПустаяДата = '00010101000000';
	ПустойАдрес = ",,,,,,,,,";
	
	Организация = Организация.ПолучитьОбъект();
	Организация.Прочитать();
	
	Кэш = Новый Структура;
	Кэш.Вставить("Организация", Организация);
	Кэш.Вставить("ДатаЗначения", ДатаЗначения);
	
	ПБОЮЛ = НЕ ЭтоЮридическоеЛицо(Организация);
	Кэш.Вставить("ПБОЮЛ", ПБОЮЛ);
	
	ДомашнийТелефонФизЛица = ?(РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Справочники.ВидыКонтактнойИнформации, "ТелефонДомашнийФизическиеЛица"), Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица, Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица);
			
	Если СписокПоказателей = Неопределено Тогда
		
		СписокПоказателей = Новый Массив;
		СписокПоказателей.Добавить("СтавкаПрибФед");
		СписокПоказателей.Добавить("СтавкаПрибРесп");
		СписокПоказателей.Добавить("СтавкаПрибМест");
		СписокПоказателей.Добавить("ТипНП");
		СписокПоказателей.Добавить("КатНП");
		СписокПоказателей.Добавить("НаимНО");
		СписокПоказателей.Добавить("КодНО");
		СписокПоказателей.Добавить("ОснВидДеят");
		СписокПоказателей.Добавить("ОКВЭД");
		СписокПоказателей.Добавить("ОГРН");
		СписокПоказателей.Добавить("ОКАТО");
		СписокПоказателей.Добавить("ОКТМО");
		СписокПоказателей.Добавить("РегНомПФР");
		СписокПоказателей.Добавить("ИПРегНомПФР");
		СписокПоказателей.Добавить("НаимОргПФР");
		СписокПоказателей.Добавить("ОКПО");
		СписокПоказателей.Добавить("ОргПравФорм");
		СписокПоказателей.Добавить("ОКОПФ");
		СписокПоказателей.Добавить("ФормСобств");
		СписокПоказателей.Добавить("ОКФС");
		СписокПоказателей.Добавить("ДатаРегистрации");
		СписокПоказателей.Добавить("АдрПочт");
		СписокПоказателей.Добавить("СвидСН");
		СписокПоказателей.Добавить("СвидДВ");
		СписокПоказателей.Добавить("СвидНО");
		СписокПоказателей.Добавить("СвидНОКод");
		СписокПоказателей.Добавить("НаимЮЛПол");
		СписокПоказателей.Добавить("ИННЮЛ");
		СписокПоказателей.Добавить("КППЮЛ");
		СписокПоказателей.Добавить("АдрЮР");
		СписокПоказателей.Добавить("ОргИндекс");
		СписокПоказателей.Добавить("ОргСубъект");
		СписокПоказателей.Добавить("ОргКодСубъект");
		СписокПоказателей.Добавить("ОргРайон");
		СписокПоказателей.Добавить("ОргГород");
		СписокПоказателей.Добавить("ОргНПункт");
		СписокПоказателей.Добавить("ОргУлица");
		СписокПоказателей.Добавить("ОргДом");
		СписокПоказателей.Добавить("ОргКорпус");
		СписокПоказателей.Добавить("ОргКвартира");
		СписокПоказателей.Добавить("НаимОППол");
		СписокПоказателей.Добавить("КППОП");
		СписокПоказателей.Добавить("АдрОП");
		СписокПоказателей.Добавить("ИндексОП");
		СписокПоказателей.Добавить("СубъектОП");
		СписокПоказателей.Добавить("КодСубъектОП");
		СписокПоказателей.Добавить("РайонОП");
		СписокПоказателей.Добавить("ГородОП");
		СписокПоказателей.Добавить("НПунктОП");
		СписокПоказателей.Добавить("УлицаОП");
		СписокПоказателей.Добавить("ДомОП");
		СписокПоказателей.Добавить("КорпусОП");
		СписокПоказателей.Добавить("КвартираОП");
		СписокПоказателей.Добавить("КодТелАдрОП");
		СписокПоказателей.Добавить("ТелАдрОП");
		СписокПоказателей.Добавить("ФаксАдрОП");
		СписокПоказателей.Добавить("НаимОИОПол");
		СписокПоказателей.Добавить("ИННИО");
		СписокПоказателей.Добавить("КППИО");
		СписокПоказателей.Добавить("АдрОтдИОРФ");
		СписокПоказателей.Добавить("ИндексОИО");
		СписокПоказателей.Добавить("СубъектОИО");
		СписокПоказателей.Добавить("КодСубъектОИО");
		СписокПоказателей.Добавить("РайонОИО");
		СписокПоказателей.Добавить("ГородОИО");
		СписокПоказателей.Добавить("НПунктОИО");
		СписокПоказателей.Добавить("УлицаОИО");
		СписокПоказателей.Добавить("ДомОИО");
		СписокПоказателей.Добавить("КорпусОИО");
		СписокПоказателей.Добавить("КвартираОИО");
		СписокПоказателей.Добавить("КодИОСтрРег");
		СписокПоказателей.Добавить("НаимИОПол");
		СписокПоказателей.Добавить("СтрИО");
		СписокПоказателей.Добавить("КодСтрИО");
		СписокПоказателей.Добавить("СтрПостИО");
		СписокПоказателей.Добавить("КодСтрПостИО");
		СписокПоказателей.Добавить("АдрИО");
		СписокПоказателей.Добавить("ФИО");
		СписокПоказателей.Добавить("ФИООтпрФЛ");
		СписокПоказателей.Добавить("ФамилияИП");
		СписокПоказателей.Добавить("ИмяИП");
		СписокПоказателей.Добавить("ОтчествоИП");
		СписокПоказателей.Добавить("ИННФЛ");
		СписокПоказателей.Добавить("СНИЛС");
		СписокПоказателей.Добавить("ДатаРожд");
		СписокПоказателей.Добавить("МестоРожд");
		СписокПоказателей.Добавить("Пол");
		СписокПоказателей.Добавить("Гражд");
		СписокПоказателей.Добавить("ГраждСтрана");
		СписокПоказателей.Добавить("КодУдЛичн");
		СписокПоказателей.Добавить("ВидУдЛичн");
		СписокПоказателей.Добавить("ОрганВыданУдЛичн");
		СписокПоказателей.Добавить("СерияУдЛичн");
		СписокПоказателей.Добавить("НомерУдЛичн");
		СписокПоказателей.Добавить("ДатаУдЛичн");
		СписокПоказателей.Добавить("АдрПрописки");
		СписокПоказателей.Добавить("АдрМЖ");
		СписокПоказателей.Добавить("ИндексМЖ");
		СписокПоказателей.Добавить("СубъектМЖ");
		СписокПоказателей.Добавить("КодСубъектМЖ");
		СписокПоказателей.Добавить("РайонМЖ");
		СписокПоказателей.Добавить("ГородМЖ");
		СписокПоказателей.Добавить("НПунктМЖ");
		СписокПоказателей.Добавить("УлицаМЖ");
		СписокПоказателей.Добавить("ДомМЖ");
		СписокПоказателей.Добавить("КорпусМЖ");
		СписокПоказателей.Добавить("КвартираМЖ");
		СписокПоказателей.Добавить("ТелСлуж");
		СписокПоказателей.Добавить("ТелДом");
		СписокПоказателей.Добавить("ФИОРук");
		СписокПоказателей.Добавить("ДолжнРук");
		СписокПоказателей.Добавить("ФамилияРук");
		СписокПоказателей.Добавить("ИмяРук");
		СписокПоказателей.Добавить("ОтчествоРук");
		СписокПоказателей.Добавить("ИННРук");
		СписокПоказателей.Добавить("ДатаРождРук");
		СписокПоказателей.Добавить("МестоРождРук");
		СписокПоказателей.Добавить("ПолРук");
		СписокПоказателей.Добавить("ГраждРук");
		СписокПоказателей.Добавить("ГраждСтранаРук");
		СписокПоказателей.Добавить("ТелРук");
		СписокПоказателей.Добавить("КодУдЛичнРук");
		СписокПоказателей.Добавить("ВидУдЛичнРук");
		СписокПоказателей.Добавить("ОрганВыданУдЛичнРук");
		СписокПоказателей.Добавить("СерияУдЛичнРук");
		СписокПоказателей.Добавить("НомерУдЛичнРук");
		СписокПоказателей.Добавить("ДатаУдЛичнРук");
		СписокПоказателей.Добавить("АдрМЖРукРФ");
		СписокПоказателей.Добавить("ИндексМЖРук");
		СписокПоказателей.Добавить("СубъектМЖРук");
		СписокПоказателей.Добавить("КодСубъектМЖРук");
		СписокПоказателей.Добавить("РайонМЖРук");
		СписокПоказателей.Добавить("ГородМЖРук");
		СписокПоказателей.Добавить("НПунктМЖРук");
		СписокПоказателей.Добавить("УлицаМЖРук");
		СписокПоказателей.Добавить("ДомМЖРук");
		СписокПоказателей.Добавить("КорпусМЖРук");
		СписокПоказателей.Добавить("КвартираМЖРук");
		СписокПоказателей.Добавить("ФИОБух");
		СписокПоказателей.Добавить("ФИООтпр");
		СписокПоказателей.Добавить("ФамилияБух");
		СписокПоказателей.Добавить("ИмяБух");
		СписокПоказателей.Добавить("ОтчествоБух");
		СписокПоказателей.Добавить("ИННБух");
		СписокПоказателей.Добавить("ДатаРождРук");
		СписокПоказателей.Добавить("МестоРождБух");
		СписокПоказателей.Добавить("ПолБух");
		СписокПоказателей.Добавить("ПолУпПред");
		СписокПоказателей.Добавить("ГраждБух");
		СписокПоказателей.Добавить("ГраждУпПред");
		СписокПоказателей.Добавить("ГраждСтранаБух");
		СписокПоказателей.Добавить("ГраждСтранаУпПред");
		СписокПоказателей.Добавить("ТелБух");
		СписокПоказателей.Добавить("ТелОтпр");
		СписокПоказателей.Добавить("КодУдЛичнБух");
		СписокПоказателей.Добавить("ВидУдЛичнБух");
		СписокПоказателей.Добавить("ОрганВыданУдЛичнБух");
		СписокПоказателей.Добавить("СерияУдЛичнБух");
		СписокПоказателей.Добавить("НомерУдЛичнБух");
		СписокПоказателей.Добавить("ДатаУдЛичнБух");
		СписокПоказателей.Добавить("АдрМЖБухРФ");
		СписокПоказателей.Добавить("ИндексМЖБух");
		СписокПоказателей.Добавить("СубъектМЖБух");
		СписокПоказателей.Добавить("КодСубъектМЖБух");
		СписокПоказателей.Добавить("РайонМЖБух");
		СписокПоказателей.Добавить("ГородМЖБух");
		СписокПоказателей.Добавить("НПунктМЖБух");
		СписокПоказателей.Добавить("УлицаМЖБух");
		СписокПоказателей.Добавить("ДомМЖБух");
		СписокПоказателей.Добавить("КорпусМЖБух");
		СписокПоказателей.Добавить("КвартираМЖБух");
		СписокПоказателей.Добавить("ФИОУпПред");
		СписокПоказателей.Добавить("ИННУпПред");
		СписокПоказателей.Добавить("ТелУпПред");
		СписокПоказателей.Добавить("КодУдЛичнУпПред");
		СписокПоказателей.Добавить("ВидУдЛичнУпПред");
		СписокПоказателей.Добавить("ОрганВыданУдЛичнУпПред");
		СписокПоказателей.Добавить("СерияУдЛичнУпПред");
		СписокПоказателей.Добавить("НомерУдЛичнУпПред");
		СписокПоказателей.Добавить("ДатаУдЛичнУпПред");
		СписокПоказателей.Добавить("ДатаРождУпПред");
		СписокПоказателей.Добавить("АдрМЖУпПредРФ");
		СписокПоказателей.Добавить("МестоРождУпПред");
		СписокПоказателей.Добавить("ИндексМЖУпПред");
		СписокПоказателей.Добавить("СубъектМЖУпПред");
		СписокПоказателей.Добавить("КодСубъектМЖУпПред");
		СписокПоказателей.Добавить("РайонМЖУпПред");
		СписокПоказателей.Добавить("ГородМЖУпПред");
		СписокПоказателей.Добавить("НПунктМЖУпПред");
		СписокПоказателей.Добавить("УлицаМЖУпПред");
		СписокПоказателей.Добавить("ДомМЖУпПред");
		СписокПоказателей.Добавить("КорпусМЖУпПред");
		СписокПоказателей.Добавить("КвартираМЖУпПред");
		СписокПоказателей.Добавить("ФаксИсп");
		СписокПоказателей.Добавить("ДолжнОтпр");
		СписокПоказателей.Добавить("СтавкаРефинансирования");
		СписокПоказателей.Добавить("ДатаПереходаНаУСН");
		СписокПоказателей.Добавить("БанкСчетНомер");
		СписокПоказателей.Добавить("БанкСчетНаимБанка");
		СписокПоказателей.Добавить("БанкСчетКоррСчетБанка");
		СписокПоказателей.Добавить("БанкСчетБИКБанка");
		СписокПоказателей.Добавить("РегистрационныйНомерФСС");
		СписокПоказателей.Добавить("НаименованиеТерриториальногоОрганаФСС");
		СписокПоказателей.Добавить("КодПодчиненностиФСС");
		СписокПоказателей.Добавить("КодОКОНХ");
		СписокПоказателей.Добавить("СтраховойТариф");
		СписокПоказателей.Добавить("ТелОрганизации");
		СписокПоказателей.Добавить("ФаксОрганизации");
		СписокПоказателей.Добавить("ОбъектНалогообложенияУСН");
		СписокПоказателей.Добавить("СтавкаНалогаУСН");
		СписокПоказателей.Добавить("НаимГоловнОрг");
		СписокПоказателей.Добавить("КППГоловнОрг");
		СписокПоказателей.Добавить("ФИОИсп");
		СписокПоказателей.Добавить("ДолжнИсп");
		СписокПоказателей.Добавить("ТелИсп");
		СписокПоказателей.Добавить("КодОрганаПФР");
		СписокПоказателей.Добавить("АдресЭлектроннойПочтыОрганизации");
		СписокПоказателей.Добавить("РегНомТФОМС");
		СписокПоказателей.Добавить("КодПодчФССДобрСтрах");
		СписокПоказателей.Добавить("КодОрганаФСГС");
		СписокПоказателей.Добавить("ШифрСтрахователяФСС");
		СписокПоказателей.Добавить("СистемыНалогообложения");
		СписокПоказателей.Добавить("ВидПлательщикаСтраховыхВзносов");
		
	КонецЕсли;
	
	РоссийскийАдрес = Новый Соответствие;
	РоссийскийАдрес.Вставить("Индекс",          "");
	РоссийскийАдрес.Вставить("Регион",          "");
	РоссийскийАдрес.Вставить("КодРегиона",      "");
	РоссийскийАдрес.Вставить("Район",           "");
	РоссийскийАдрес.Вставить("Город",           "");
	РоссийскийАдрес.Вставить("НаселенныйПункт", "");
	РоссийскийАдрес.Вставить("Улица",           "");
	РоссийскийАдрес.Вставить("Дом",             "");
	РоссийскийАдрес.Вставить("Корпус",          "");
	РоссийскийАдрес.Вставить("Квартира",        "");
	
	ЭтоМассив = (ТипЗнч(СписокПоказателей) = Тип("Массив"));
	
	Для Каждого Показатель Из СписокПоказателей Цикл

		ИмяПоказателя = ?(ЭтоМассив, Показатель, Показатель.Представление);
		
		Если ИмяПоказателя = "СтавкаПрибФед" Тогда
			
			Ставки = ПолучитьСУчетомКэша(Кэш, "СтавкаНалогаНаПрибыль");
			Если Ставки <> Неопределено И Ставки.Количество() > 0 Тогда
				Значение = Ставки.СтавкаФБ;
			Иначе
				Значение = 0;
			КонецЕсли;

		ИначеЕсли ИмяПоказателя = "СтавкаПрибРесп" Тогда
			Ставки = ПолучитьСУчетомКэша(Кэш, "СтавкаНалогаНаПрибыль");
			Если Ставки <> Неопределено И Ставки.Количество() > 0 Тогда
				Значение = Ставки.СтавкаСубъектРФ;
			Иначе
				Значение = 0;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СтавкаПрибМест" Тогда
			Ставки = ПолучитьСУчетомКэша(Кэш, "СтавкаНалогаНаПрибыль");
			Если Ставки <> Неопределено И Ставки.Количество() > 0 Тогда
				Значение = Ставки.СтавкаМестный;
			Иначе
				Значение = 0;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ТипНП" Тогда
			
			Если Организация.ИностраннаяОрганизация Тогда
				Значение = 5;
			Иначе
				Если Организация.ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка()
				 ИЛИ Организация.ГоловнаяОрганизация = Организация.Ссылка Тогда
					Если ПБОЮЛ Тогда
						Значение = 3;
					Иначе
						Значение = 1;
					КонецЕсли;
				Иначе
					Значение = 2;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КатНП" Тогда
			
			Значение = "01";
			
		ИначеЕсли Имяпоказателя = "НаимНО" Тогда
			
			Значение = "";
			Если НЕ Организация.РегистрацияВНалоговомОргане.Пустая() Тогда
				Значение = СокрЛП(Организация.РегистрацияВНалоговомОргане.НаименованиеИФНС);
			КонецЕсли;
			
		ИначеЕсли Имяпоказателя = "КодНО" Тогда
			
			Значение = "";
			Если НЕ Организация.РегистрацияВНалоговомОргане.Пустая() Тогда
				Значение = СокрЛП(Организация.РегистрацияВНалоговомОргане.Код);
			Иначе
				Значение = Организация.КодНалоговогоОргана;
			КонецЕсли;
			
		ИначеЕсли Имяпоказателя = "ОснВидДеят" Тогда
			
			Значение = Организация.НаименованиеОКВЭД;
			
		ИначеЕсли Имяпоказателя = "ОКВЭД" Тогда
			
			Значение = Организация.КодОКВЭД;
			
		ИначеЕсли ИмяПоказателя	= "ОГРН" Тогда
			
			Значение = Организация.ОГРН;
			
		ИначеЕсли ИмяПоказателя = "ОКАТО" Тогда
			
			Значение = "";
			Если ЗначениеЗаполнено(Организация.РегистрацияВНалоговомОргане) Тогда
				Значение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация.РегистрацияВНалоговомОргане, "КодПоОКАТО");
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОКТМО" Тогда
			
			Значение = "";
			Если ЗначениеЗаполнено(Организация.РегистрацияВНалоговомОргане) Тогда
				Значение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация.РегистрацияВНалоговомОргане, "КодПоОКТМО");
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "РегНомТФОМС" Тогда
			
			Если Метаданные.Справочники.Организации.Реквизиты.Найти("РегистрационныйНомерТФОМС") <> Неопределено Тогда
				Значение = СокрЛП(Организация.РегистрационныйНомерТФОМС);
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "РегНомТФОМСЗаСебя" Тогда
			
			Если ПБОЮЛ Тогда
				Если Метаданные.Справочники.Организации.Реквизиты.Найти("ИПРегистрационныйНомерТФОМС") <> Неопределено Тогда
					Значение = СокрЛП(Организация.ИПРегистрационныйНомерТФОМС); 
				Иначе
					Если Метаданные.Справочники.Организации.Реквизиты.Найти("РегистрационныйНомерТФОМС") <> Неопределено Тогда
						Значение = СокрЛП(Организация.РегистрационныйНомерТФОМС);
					Иначе
						Значение = "";
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;	
			
		ИначеЕсли ИмяПоказателя = "РегНомПФР" Тогда
			
			Значение = УчетЗарплаты.РегистрационныйНомерПФР(Организация.Ссылка, ДатаЗначения);
			
		ИначеЕсли ИмяПоказателя = "ИПРегНомПФР" Тогда
			
			Значение = Организация.ИПРегистрационныйНомерПФР;
			
		ИначеЕсли ИмяПоказателя = "НаимОргПФР" Тогда
			
			Значение = Организация.НаименованиеТерриториальногоОрганаПФР;
			
		ИначеЕсли ИмяПоказателя = "РегНомПФРЗаСебя" Тогда	
						
			Если ПБОЮЛ Тогда
				Если Метаданные.Справочники.Организации.Реквизиты.Найти("ИПРегистрационныйНомерПФР") <> Неопределено Тогда
					Значение = СокрЛП(Организация.ИПРегистрационныйНомерПФР); 
				Иначе
					Значение = Организация.РегистрационныйНомерПФР;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
						
		ИначеЕсли ИмяПоказателя = "КодОрганаПФР" Тогда
			
			Значение = Организация.КодОрганаПФР;
			
		ИначеЕсли ИмяПоказателя = "ОКПО" Тогда
			
			Значение = Организация.КодПоОКПО;
						
		ИначеЕсли ИмяПоказателя = "ОргПравФорм" Тогда
			
			Значение  = Организация.НаименованиеОКОПФ;
						
		ИначеЕсли ИмяПоказателя = "ОКОПФ" Тогда
			
			Значение  = Организация.КодОКОПФ;
						
		ИначеЕсли ИмяПоказателя = "ФормСобств" Тогда
			
			Значение = Организация.НаименованиеОКФС;
						
		ИначеЕсли ИмяПоказателя = "ОКФС" Тогда
			
			Значение = Организация.КодОКФС;
						
		ИначеЕсли ИмяПоказателя = "РегистрационныйНомерФСС" Тогда
			
			Значение = Организация.РегистрационныйНомерФСС;
			
		ИначеЕсли ИмяПоказателя = "РегистрационныйНомерФССДобрСтрах" Тогда	
			
			Если ПБОЮЛ Тогда
				Если Метаданные.Справочники.Организации.Реквизиты.Найти("ИПРегистрационныйНомерФСС") <> Неопределено Тогда
					Значение = СокрЛП(Организация.ИПРегистрационныйНомерФСС); 
				Иначе
					Значение = Организация.РегистрационныйНомерФСС;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КодПодчиненностиФСС" Тогда
			
			Если Метаданные.Справочники.Организации.Реквизиты.Найти("КодПодчиненностиФСС") <> Неопределено Тогда
				Значение = СокрЛП(Организация.КодПодчиненностиФСС);
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КодПодчФССДобрСтрах" Тогда	
			
			Если ПБОЮЛ Тогда
				Если Метаданные.Справочники.Организации.Реквизиты.Найти("ИПКодПодчиненностиФСС") <> Неопределено Тогда
					Значение = СокрЛП(Организация.ИПКодПодчиненностиФСС); 
				Иначе
					Если Метаданные.Справочники.Организации.Реквизиты.Найти("КодПодчиненностиФСС") <> Неопределено Тогда
						Значение = СокрЛП(Организация.КодПодчиненностиФСС);
					Иначе
						Значение = "";
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "НаименованиеТерриториальногоОрганаФСС" Тогда
			
			Если Метаданные.Справочники.Организации.Реквизиты.Найти("НаименованиеТерриториальногоОрганаФСС") <> Неопределено Тогда
				Значение = Организация.НаименованиеТерриториальногоОрганаФСС;
			Иначе
				Значение = "";
			КонецЕсли;	
			
		ИначеЕсли ИмяПоказателя = "КодОКОНХ" Тогда
			
			Значение = Организация.КодОКОНХ;
			
		ИначеЕсли ИмяПоказателя = "КодОрганаФСГС" Тогда
			
			Значение = Организация.КодОрганаФСГС;
			
		ИначеЕсли ИмяПоказателя = "ДатаРегистрации" Тогда
			
			Если Метаданные.Справочники.Организации.Реквизиты.Найти("ДатаРегистрации") <> Неопределено Тогда
				Значение = Организация.ДатаРегистрации;
			Иначе
				Значение = ПустаяДата;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СтраховойТариф" Тогда
			
			Результат = РегистрыСведений.СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев.СрезПоследних(ДатаЗначения, Новый Структура("Организация", Организация.Ссылка));
			Если Результат.Количество() > 0 Тогда
				Значение = Результат[0].Ставка;
			Иначе
				Значение = 0;
			КонецЕсли;
						
		ИначеЕсли ИмяПоказателя = "АдрПочт" Тогда
			
			ИмяПредопределенного = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации;
			Данные = Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, ИмяПредопределенного);

			Результат = Организация.КонтактнаяИнформация.НайтиСтроки(Данные);

			Если Результат.Количество() > 0 Тогда
				Значение = АдресВФормате9Запятых(Результат[0]);
			Иначе
				Значение = ПустойАдрес;
			КонецЕсли;
			
			Если ПустаяСтрока(Значение) Тогда
				Значение = ПустойАдрес;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ПолныйАдрПочт" Тогда
			
			ИмяПредопределенного = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации;
			Данные = Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, ИмяПредопределенного);
			
			Результат = Организация.КонтактнаяИнформация.НайтиСтроки(Данные);
			
			Если Результат.Количество() > 0 Тогда
				Значение = Результат[0].Представление;
			Иначе
				Значение = ПустойАдрес;
			КонецЕсли;
			
			Если ПустаяСтрока(Значение) Тогда
				Значение = ПустойАдрес;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдресЭлектроннойПочтыОрганизации" Тогда
			
			Данные = Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Справочники.ВидыКонтактнойИнформации.EmailОрганизации);
	
			Результат = Организация.КонтактнаяИнформация.НайтиСтроки(Данные);
			
			Если Результат.Количество() > 0 Тогда
				Значение = Результат[0].Представление;
			Иначе
				Значение = "";
			КонецЕсли;	
			
		ИначеЕсли ИмяПоказателя = "СвидСН" Тогда
			
			Если Метаданные.Справочники.Организации.Реквизиты.Найти("СвидетельствоСерияНомер") <> Неопределено Тогда
				Значение = Организация.СвидетельствоСерияНомер;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СвидДВ" Тогда
			
			Если Метаданные.Справочники.Организации.Реквизиты.Найти("СвидетельствоДатаВыдачи") <> Неопределено Тогда
				Значение = Организация.СвидетельствоДатаВыдачи;
			Иначе
				Значение = ПустаяДата;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СвидНО" Тогда
			
			Если Метаданные.Справочники.Организации.Реквизиты.Найти("СвидетельствоНаименованиеОргана") <> Неопределено Тогда
				Значение = Организация.СвидетельствоНаименованиеОргана;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СвидНОКод" Тогда
			
			Если Метаданные.Справочники.Организации.Реквизиты.Найти("СвидетельствоКодОргана") <> Неопределено Тогда
				Значение = Организация.СвидетельствоКодОргана;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "НаимЮЛПол" Тогда
			
			Значение = Организация.НаименованиеПолное;
			
		ИначеЕсли ИмяПоказателя = "ИННЮЛ" Тогда
			
			Значение = СокрЛП(Организация.ИНН);
			
		ИначеЕсли ИмяПоказателя = "КППЮЛ" Тогда
			
			Значение = Организация.КПП;
			
		ИначеЕсли ИмяПоказателя = "АдрЮР" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				Значение = АдресВФормате9Запятых(Результат);
			Иначе
				Значение = ПустойАдрес;
			КонецЕсли;
			
			Если ПустаяСтрока(Значение) Тогда
				Значение = ПустойАдрес;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ПолныйАдрЮР" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				Значение = Результат.Представление;
			Иначе
				Значение = ПустойАдрес;
			КонецЕсли;
			
			Если ПустаяСтрока(Значение) Тогда
				Значение = ПустойАдрес;
			КонецЕсли;

		ИначеЕсли ИмяПоказателя = "АдрФакт" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ФактАдресОрганизации");
			Если Результат <> Неопределено Тогда
				Значение = АдресВФормате9Запятых(Результат);
			Иначе
				Значение = ПустойАдрес;
			КонецЕсли;
			
			Если ПустаяСтрока(Значение) Тогда
				Значение = ПустойАдрес;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ТелОрганизации" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ТелефонОрганизации");

			Если Результат <> Неопределено Тогда
				Значение = Результат.Представление;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ФаксОрганизации" Тогда
			
			Если Кэш.ПБОЮЛ Тогда
				Значение = "";
			Иначе
				ИмяПредопределенного = Справочники.ВидыКонтактнойИнформации.ФаксОрганизации;
				Данные = Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.Факс, ИмяПредопределенного);
				Результат = Кэш.Организация.КонтактнаяИнформация.НайтиСтроки(Данные);
				Если Результат.Количество() > 0 Тогда
					Значение = Результат[0].Представление;
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОргИндекс" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
				
				Значение = РоссийскийАдрес["Индекс"];
								
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОргСубъект" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
								
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
				
				Значение = РоссийскийАдрес["Регион"];				
					
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОргКодСубъект" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
				
				Значение = РоссийскийАдрес["КодРегиона"];
					
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОргРайон" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
				
				Значение = РоссийскийАдрес["Район"];
					
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОргГород" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
				
				Значение = РоссийскийАдрес["Город"];
					
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОргНПункт" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
				
				Значение = РоссийскийАдрес["НаселенныйПункт"];
					
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОргУлица" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
				
				Значение = РоссийскийАдрес["Улица"];
					
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОргДом" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
				
				Значение = РоссийскийАдрес["Дом"];
					
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОргКорпус" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
				
				Значение = РоссийскийАдрес["Корпус"];
					
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОргКвартира" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
				
				Значение = РоссийскийАдрес["Квартира"];
					
			Иначе
				Значение = "";
			КонецЕсли;
			
		//*************************************************************для обособленного подразделения
		ИначеЕсли ИмяПоказателя = "НаимОППол" Тогда
		
			Если Организация.ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка() Тогда
				Значение = "";
			Иначе
				Значение = Организация.НаименованиеПолное;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КППОП" Тогда
			
			Если Организация.ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка() Тогда
				Значение = "";
			Иначе
				Значение = Организация.КПП;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдрОП" Тогда
			
			Если Организация.ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка() Тогда
				Значение = ПустойАдрес;
			Иначе
				
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
					Значение = АдресВФормате9Запятых(Результат);
				Иначе
					Значение = ПустойАдрес;
				КонецЕсли;
			КонецЕсли;
			
			Если ПустаяСтрока(Значение) Тогда
				Значение = ПустойАдрес;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ИндексОП" Тогда
			
			Если Организация.ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка() Тогда
				Значение = "";
			Иначе
				
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
										
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
				
					Значение = РоссийскийАдрес["Индекс"];
							
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СубъектОП" Тогда
			
			Если Организация.ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка() Тогда
				Значение = "";
			Иначе
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
										
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
				
					Значение = РоссийскийАдрес["Регион"];
						
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КодСубъектОП" Тогда
			
			Если Организация.ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка() Тогда
				Значение = "";
			Иначе
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
					
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
				
					Значение = РоссийскийАдрес["КодРегиона"];
					
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "РайонОП" Тогда
			
			Если Организация.ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка() Тогда
				Значение = "";
			Иначе
				
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
										
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
				
					Значение = РоссийскийАдрес["Район"];
					
				Иначе
					Значение = "";
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ГородОП" Тогда
			
			Если Организация.ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка() Тогда
				Значение = "";
			Иначе

				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
										
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
				
					Значение = РоссийскийАдрес["Город"];
					
				Иначе
					Значение = "";
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "НПунктОП" Тогда
			
			Если Организация.ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка() Тогда
				Значение = "";
			Иначе
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
										
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
				
					Значение = РоссийскийАдрес["НаселенныйПункт"];
					
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "УлицаОП" Тогда
			
			Если Организация.ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка() Тогда
				Значение = "";
			Иначе
				
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
										
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
				
					Значение = РоссийскийАдрес["Улица"];
					
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ДомОП" Тогда
			
			Если Организация.ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка() Тогда
				Значение = "";
			Иначе
				
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
					
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
				
					Значение = РоссийскийАдрес["Дом"];
					
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КорпусОП" Тогда
			
			Если Организация.ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка() Тогда
				Значение = "";
			Иначе
				
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
										
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
				
					Значение = РоссийскийАдрес["Корпус"];
					
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "КвартираОП" Тогда
			
			Если Организация.ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка() Тогда
				Значение = "";
			Иначе
				
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
										
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
				
					Значение = РоссийскийАдрес["Квартира"];
					
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КодТелАдрОП" Тогда
			
			Если Организация.ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка() Тогда
				Значение = "";
			Иначе
				
				Результат = ПолучитьСУчетомКэша(Кэш, "ТелефонОрганизации");

				Если Результат <> Неопределено Тогда
										
					Значение = "";
					
					Для НомСтр = 1 По СтрЧислоСтрок(Результат.ЗначенияПолей) Цикл
						
						Стр = СтрПолучитьСтроку(Результат.ЗначенияПолей, НомСтр);
						
						Если Найти(Стр, "НомерТелефона=") = 1 Тогда
							
							Значение = Сред(Стр, Найти(Стр, "=") + 1);
							Прервать;
							
						КонецЕсли;
						
					КонецЦикла;
						
				Иначе
					Значение = "";
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ТелАдрОП" Тогда
			
			Если Организация.ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка() Тогда
				Значение = "";
			Иначе
				
				Результат = ПолучитьСУчетомКэша(Кэш, "ТелефонОрганизации");

				Если Результат <> Неопределено Тогда
					Значение = Результат.Представление;
				Иначе
					Значение = "";
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ФаксАдрОП" Тогда
			
			Если Организация.ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка() Тогда
				Значение = "";
			Иначе
				
				Данные = Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.Факс, Справочники.ВидыКонтактнойИнформации.ФаксОрганизации);

				Результат = Организация.КонтактнаяИнформация.НайтиСтроки(Данные);

				Если Результат.Количество() > 0 Тогда
					Значение = Результат[0].Представление;
					
				Иначе
					Значение = "";
				КонецЕсли;
				
			КонецЕсли;
			
		//********************************************************сведения об иностранной организации
		ИначеЕсли ИмяПоказателя = "НаимОИОПол" Тогда
		
			Если НЕ Организация.ИностраннаяОрганизация Тогда
				Значение = "";
			Иначе
				Значение = Организация.НаименованиеПолное;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ИННИО" Тогда
			
			Если НЕ Организация.ИностраннаяОрганизация Тогда
				Значение = "";
			Иначе
				Значение = СокрЛП(Организация.ИНН);
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КППИО" Тогда
			
			Если НЕ Организация.ИностраннаяОрганизация Тогда
				Значение = "";
			Иначе
				Значение = Организация.КПП;				
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдрОтдИОРФ" Тогда
			
			Если НЕ Организация.ИностраннаяОрганизация Тогда
				Значение = ПустойАдрес;
			Иначе
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
					Значение = АдресВФормате9Запятых(Результат);
				Иначе
					Значение = ПустойАдрес;
				КонецЕсли;
			КонецЕсли;
			
			Если ПустаяСтрока(Значение) Тогда
				Значение = ПустойАдрес;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ИндексОИО" Тогда
			
			Если НЕ Организация.ИностраннаяОрганизация Тогда
				Значение = "";
			Иначе
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
					
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
				
					Значение = РоссийскийАдрес["Индекс"];
					
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СубъектОИО" Тогда
			
			Если НЕ Организация.ИностраннаяОрганизация Тогда
				Значение = "";
			Иначе
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
					
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
				
					Значение = РоссийскийАдрес["Регион"];
						
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КодСубъектОИО" Тогда
			
			Если НЕ Организация.ИностраннаяОрганизация Тогда
				Значение = "";
			Иначе
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
					
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
				
					Значение = РоссийскийАдрес["КодРегиона"];
						
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "РайонОИО" Тогда
			
			Если НЕ Организация.ИностраннаяОрганизация Тогда
				Значение = "";
			Иначе
				
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
										
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
				
					Значение = РоссийскийАдрес["Район"];
						
				Иначе
					Значение = "";
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ГородОИО" Тогда
			
			Если НЕ Организация.ИностраннаяОрганизация Тогда
				Значение = "";
			Иначе

				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
										
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
				
					Значение = РоссийскийАдрес["Город"];
						
				Иначе
					Значение = "";
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "НПунктОИО" Тогда
			
			Если НЕ Организация.ИностраннаяОрганизация Тогда
				Значение = "";
			Иначе
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
										
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
				
					Значение = РоссийскийАдрес["НаселенныйПункт"];
						
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "УлицаОИО" Тогда
			
			Если НЕ Организация.ИностраннаяОрганизация Тогда
				Значение = "";
			Иначе
				
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
										
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
				
					Значение = РоссийскийАдрес["Улица"];
						
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ДомОИО" Тогда
			
			Если НЕ Организация.ИностраннаяОрганизация Тогда
				Значение = "";
			Иначе
				
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
										
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
				
					Значение = РоссийскийАдрес["Дом"];
						
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КорпусОИО" Тогда
			
			Если НЕ Организация.ИностраннаяОрганизация Тогда
				Значение = "";
			Иначе
				
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
					
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
				
					Значение = РоссийскийАдрес["Корпус"];
					
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "КвартираОИО" Тогда
			
			Если НЕ Организация.ИностраннаяОрганизация Тогда
				Значение = "";
			Иначе
				
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
										
					РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
				
					Значение = РоссийскийАдрес["Квартира"];
						
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КодИОСтрРег" Тогда
			
			Если Организация.ИностраннаяОрганизация Тогда
				Значение = Организация.КодВСтранеРегистрации;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "НаимИОПол" Тогда
			
			Если Организация.ИностраннаяОрганизация Тогда
				Значение = Организация.НаименованиеИнострОрганизации;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СтрИО" Тогда
			
			Если Организация.ИностраннаяОрганизация Тогда
				Значение = Организация.СтранаРегистрации.НаименованиеПолное;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КодСтрИО" Тогда
			
			Если Организация.ИностраннаяОрганизация Тогда
				Значение = Организация.СтранаРегистрации.КодАльфа2;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СтрПостИО" Тогда
			
			Если Организация.ИностраннаяОрганизация Тогда
				Значение = Организация.СтранаПостоянногоМестонахождения.НаименованиеПолное;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КодСтрПостИО" Тогда
			
			Если Организация.ИностраннаяОрганизация Тогда
				Значение = Организация.СтранаПостоянногоМестонахождения.КодАльфа2;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдрИО" Тогда
			
			Если НЕ Организация.ИностраннаяОрганизация Тогда
				Значение = ПустойАдрес;
			Иначе
				
				Данные = Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, Справочники.ВидыКонтактнойИнформации.УчредительныйАдресИностраннойОрганизации);

				Результат = Организация.КонтактнаяИнформация.НайтиСтроки(Данные);

				Если Результат.Количество() > 0 Тогда
					Значение = Результат[0].Представление;
				Иначе
					Значение = ПустойАдрес;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПустаяСтрока(Значение) Тогда
				Значение = ПустойАдрес;
			КонецЕсли;
			
		//***************************************************сведения об индивидуальном предпринимателе			
		ИначеЕсли ИмяПоказателя = "ФИО" ИЛИ ИмяПоказателя = "ФИООтпрФЛ" Тогда
			
			Если ПБОЮЛ Тогда
				Если Метаданные.Справочники.Организации.Реквизиты.Найти("ИндивидуальныйПредприниматель") <> Неопределено Тогда
					ФЛ = Организация.ИндивидуальныйПредприниматель;
					Если ФЛ = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = Организация.НаименованиеПолное;
					Иначе
						ДанныеФЛ = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизическоеЛицо",ФЛ));
						Если ДанныеФЛ.Количество() > 0 Тогда
							Значение = СокрЛП(СокрЛП(ДанныеФЛ[0].Фамилия) + " " + СокрЛП(ДанныеФЛ[0].Имя) + " " + СокрЛП(ДанныеФЛ[0].Отчество));
						Иначе
							Значение = СокрЛП(ФЛ.Наименование);
						КонецЕсли;
					КонецЕсли;
				Иначе
					Значение = Организация.НаименованиеПолное; 
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ФамилияИП" Тогда
			
			Если ПБОЮЛ Тогда
				Если Метаданные.Справочники.Организации.Реквизиты.Найти("ИндивидуальныйПредприниматель") <> Неопределено Тогда
					ФЛ = Организация.ИндивидуальныйПредприниматель;
					Если ФЛ = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = Организация.НаименованиеПолное;
					Иначе
						ДанныеФЛ = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизическоеЛицо",ФЛ));
						Если ДанныеФЛ.Количество() > 0 Тогда
							Значение = СокрЛП(ДанныеФЛ[0].Фамилия);
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				Иначе
					Значение = Организация.НаименованиеПолное; 
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ИмяИП" Тогда
			
			Если ПБОЮЛ Тогда
				Если Метаданные.Справочники.Организации.Реквизиты.Найти("ИндивидуальныйПредприниматель") <> Неопределено Тогда
					ФЛ = Организация.ИндивидуальныйПредприниматель;
					Если ФЛ = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = Организация.НаименованиеПолное;
					Иначе
						ДанныеФЛ = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизическоеЛицо",ФЛ));
						Если ДанныеФЛ.Количество() > 0 Тогда
							Значение = СокрЛП(ДанныеФЛ[0].Имя);
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				Иначе
					Значение = Организация.НаименованиеПолное; 
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОтчествоИП" Тогда
			
			Если ПБОЮЛ Тогда
				Если Метаданные.Справочники.Организации.Реквизиты.Найти("ИндивидуальныйПредприниматель") <> Неопределено Тогда
					ФЛ = Организация.ИндивидуальныйПредприниматель;
					Если ФЛ = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = Организация.НаименованиеПолное;
					Иначе
						ДанныеФЛ = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизическоеЛицо",ФЛ));
						Если ДанныеФЛ.Количество() > 0 Тогда
							Значение = СокрЛП(ДанныеФЛ[0].Отчество);
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				Иначе
					Значение = Организация.НаименованиеПолное; 
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ИННФЛ" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						Значение = Результат[0].ФизическоеЛицо.ИНН;
					КонецЕсли;
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СНИЛС" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						Значение = Результат[0].ФизическоеЛицо.СтраховойНомерПФР;
					КонецЕсли;
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;	
			
		ИначеЕсли ИмяПоказателя = "ДатаРожд" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = ПустаяДата;
					Иначе
						Значение = Результат[0].ФизическоеЛицо.ДатаРождения;
					КонецЕсли;
				Иначе
					Значение = ПустаяДата;
				КонецЕсли;
				
			Иначе
				Значение = ПустаяДата;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "МестоРожд" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						Значение = Результат[0].ФизическоеЛицо.МестоРождения;
					КонецЕсли;
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "Пол" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = 0;
					Иначе
						Если Результат[0].ФизическоеЛицо.Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
							Значение = 2;
						ИначеЕсли Результат[0].ФизическоеЛицо.Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда
							Значение = 1;
						Иначе
							Значение = 0;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Значение = 0;
				КонецЕсли;
				
			Иначе
				Значение = 0;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "Гражд" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						Гражданство = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеГражданство", Результат[0].ФизическоеЛицо);
						//Гражданство = ПолучитьГражданство(Результат[0].ФизическоеЛицо, ДатаЗначения);
						Если Гражданство = Неопределено Тогда
							Значение = "";
						Иначе
							Значение = Гражданство.Код;
						КонецЕсли;

					КонецЕсли;
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ГраждСтрана" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						Гражданство = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеГражданство", Результат[0].ФизическоеЛицо);
						//Гражданство = ПолучитьГражданство(Результат[0].ФизическоеЛицо, ДатаЗначения);
						Если Гражданство = Неопределено Тогда
							Значение = "";
						Иначе
							Значение = ?(ПустаяСтрока(Гражданство.НаименованиеПолное), Гражданство.Наименование, Гражданство.НаименованиеПолное);
						КонецЕсли;
					КонецЕсли;
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КодУдЛичн" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеПаспортныеДанные", Результат[0].ФизическоеЛицо);
						Если УдЛичн = Неопределено Тогда
							Значение = Неопределено;
						Иначе
							Если УдЛичн.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка() Тогда
								Значение = "";
							Иначе
								Значение = УдЛичн.ВидДокумента.КодМВД;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ВидУдЛичн" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеПаспортныеДанные", Результат[0].ФизическоеЛицо);
						Если УдЛичн = Неопределено Тогда
							Значение = "";
						Иначе
							Если УдЛичн.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка() Тогда
								Значение = "";
							Иначе
								Значение = УдЛичн.ВидДокумента.Наименование;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОрганВыданУдЛичн" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеПаспортныеДанные", Результат[0].ФизическоеЛицо);
						Если УдЛичн = Неопределено Тогда
							Значение = "";
						Иначе
							Значение = УдЛичн.КемВыдан;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СерияУдЛичн" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеПаспортныеДанные", Результат[0].ФизическоеЛицо);
						Если УдЛичн = Неопределено Тогда
							Значение = "";
						Иначе
							Значение = УдЛичн.Серия;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "НомерУдЛичн" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеПаспортныеДанные", Результат[0].ФизическоеЛицо);
						Если УдЛичн = Неопределено Тогда
							Значение = "";
						Иначе
							Значение = УдЛичн.Номер;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ДатаУдЛичн" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = ПустаяДата;
					Иначе
						УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеПаспортныеДанные", Результат[0].ФизическоеЛицо);
						Если УдЛичн = Неопределено Тогда
							Значение = ПустаяДата;
						Иначе
							Значение = УдЛичн.ДатаВыдачи;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Значение = ПустаяДата;
				КонецЕсли;
				
			Иначе
				Значение = ПустаяДата;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдрПрописки" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = ПустойАдрес;
					Иначе
						
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеАдресПрописки", Результат[0].ФизическоеЛицо);

						Если Результат2 <> Неопределено Тогда
							Значение = АдресВФормате9Запятых(Результат2);
						Иначе
							Значение = ПустойАдрес;
						КонецЕсли;
						
					КонецЕсли;
				Иначе
					Значение = ПустойАдрес;
				КонецЕсли;
				
			Иначе
				Значение = ПустойАдрес;
			КонецЕсли;
			
			Если ПустаяСтрока(Значение) Тогда
				Значение = ПустойАдрес;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдрМЖ" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = ПустойАдрес;
					Иначе
						
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеАдрес", Результат[0].ФизическоеЛицо);

						Если Результат2 <> Неопределено Тогда
							Значение = АдресВФормате9Запятых(Результат2);
						Иначе
							Значение = ПустойАдрес;
						КонецЕсли;
						
					КонецЕсли;
				Иначе
					Значение = ПустойАдрес;
				КонецЕсли;
				
			Иначе
				Значение = ПустойАдрес;
			КонецЕсли;
			
			Если ПустаяСтрока(Значение) Тогда
				Значение = ПустойАдрес;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ИндексМЖ" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеАдрес", Результат[0].ФизическоеЛицо);

						Если Результат2 <> Неопределено Тогда
														
							РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат2.ЗначенияПолей, РоссийскийАдрес);
				
							Значение = РоссийскийАдрес["Индекс"];
							
						Иначе
							Значение = "";
						КонецЕсли;
						
					КонецЕсли;
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СубъектМЖ" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеАдрес", Результат[0].ФизическоеЛицо);

						Если Результат2 <> Неопределено Тогда
														
							РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат2.ЗначенияПолей, РоссийскийАдрес);
				
							Значение = РоссийскийАдрес["Регион"];
						
						Иначе
							Значение = "";
						КонецЕсли;
						
					КонецЕсли;
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				
				Значение = "";
				
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "КодСубъектМЖ" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеАдрес", Результат[0].ФизическоеЛицо);

						Если Результат2 <> Неопределено Тогда
							
							РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат2.ЗначенияПолей, РоссийскийАдрес);
				
							Значение = РоссийскийАдрес["КодРегиона"];
						
						Иначе
							Значение = "";
						КонецЕсли;
						
					КонецЕсли;
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				
				Значение = "";
				
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "РайонМЖ" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеАдрес", Результат[0].ФизическоеЛицо);

						Если Результат2 <> Неопределено Тогда
							
							РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат2.ЗначенияПолей, РоссийскийАдрес);
				
							Значение = РоссийскийАдрес["Район"];
						
						Иначе
							Значение = "";
						КонецЕсли;
						
					КонецЕсли;
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				
				Значение = "";
				
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "ГородМЖ" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеАдрес", Результат[0].ФизическоеЛицо);

						Если Результат2 <> Неопределено Тогда
							
							РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат2.ЗначенияПолей, РоссийскийАдрес);
				
							Значение = РоссийскийАдрес["Город"];
						
						Иначе
							Значение = "";
						КонецЕсли;
						
					КонецЕсли;
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				
				Значение = "";
				
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "НПунктМЖ" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеАдрес", Результат[0].ФизическоеЛицо);

						Если Результат2 <> Неопределено Тогда
							
							РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат2.ЗначенияПолей, РоссийскийАдрес);
				
							Значение = РоссийскийАдрес["НаселенныйПункт"];
						
						Иначе
							Значение = "";
						КонецЕсли;
						
					КонецЕсли;
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				
				Значение = "";
				
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "УлицаМЖ" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеАдрес", Результат[0].ФизическоеЛицо);

						Если Результат2 <> Неопределено Тогда
							
							РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат2.ЗначенияПолей, РоссийскийАдрес);
				
							Значение = РоссийскийАдрес["Улица"];
						
						Иначе
							Значение = "";
						КонецЕсли;
						
					КонецЕсли;
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				
				Значение = "";
				
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "ДомМЖ" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеАдрес", Результат[0].ФизическоеЛицо);

						Если Результат2 <> Неопределено Тогда
							
							РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат2.ЗначенияПолей, РоссийскийАдрес);
				
							Значение = РоссийскийАдрес["Дом"];
						
						Иначе
							Значение = "";
						КонецЕсли;
						
					КонецЕсли;
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				
				Значение = "";
				
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "КорпусМЖ" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеАдрес", Результат[0].ФизическоеЛицо);

						Если Результат2 <> Неопределено Тогда
							
							РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат2.ЗначенияПолей, РоссийскийАдрес);
				
							Значение = РоссийскийАдрес["Корпус"];
						
						Иначе
							Значение = "";
						КонецЕсли;
						
					КонецЕсли;
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				
				Значение = "";
				
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КвартираМЖ" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеАдрес", Результат[0].ФизическоеЛицо);

						Если Результат2 <> Неопределено Тогда
							
							РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат2.ЗначенияПолей, РоссийскийАдрес);
				
							Значение = РоссийскийАдрес["Квартира"];
						
						Иначе
							Значение = "";
						КонецЕсли;
						
					КонецЕсли;
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ТелСлуж" Тогда
			
			Если ПБОЮЛ Тогда
			
				Результат = ПолучитьСУчетомКэша(Кэш, "ТелефонОрганизации");

				Если Результат <> Неопределено Тогда
					Значение = Результат.Представление;
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				
				Значение = "";
				
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ТелДом" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						
						Значение = "";
						
					Иначе
						
						Данные = Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.Телефон, ДомашнийТелефонФизЛица);

						Результат2 = Результат[0].ФизическоеЛицо.КонтактнаяИнформация.НайтиСтроки(Данные);

						Если Результат2.Количество() > 0 Тогда
							Значение = Результат2[0].Представление;
						Иначе
							Значение = "";
						КонецЕсли;
						
					КонецЕсли;
					
				Иначе
					
					Значение = "";
					
				КонецЕсли;
				
			Иначе
				
				Значение = "";
				
			КонецЕсли;
			
		//******************************************************************сведения о руководителе организации
		ИначеЕсли ИмяПоказателя = "ФИОРук" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				ФЛ = Результат[0]["ФизическоеЛицо"];
				Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
					Значение = "";
				Иначе
					Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
						Значение = "";
					Иначе
						ДанныеФЛ = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизическоеЛицо",ФЛ));
						Если ДанныеФЛ.Количество() > 0 Тогда
							Значение = СокрЛП(СокрЛП(ДанныеФЛ[0].Фамилия) + " " + СокрЛП(ДанныеФЛ[0].Имя) + " " + СокрЛП(ДанныеФЛ[0].Отчество));
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ФамилияРук" Тогда
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				ФЛ = Результат[0]["ФизическоеЛицо"];
				Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
					Значение = "";
				Иначе
					Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
						Значение = "";
					Иначе
						ДанныеФЛ = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизическоеЛицо",ФЛ));
						Если ДанныеФЛ.Количество() > 0 Тогда
							Значение = СокрЛП(ДанныеФЛ[0].Фамилия);
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
		
		ИначеЕсли ИмяПоказателя = "ИмяРук" Тогда
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				ФЛ = Результат[0]["ФизическоеЛицо"];
				Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
					Значение = "";
				Иначе
					Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
						Значение = "";
					Иначе
						ДанныеФЛ = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизическоеЛицо",ФЛ));
						Если ДанныеФЛ.Количество() > 0 Тогда
							Значение = СокрЛП(ДанныеФЛ[0].Имя);
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОтчествоРук" Тогда
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				ФЛ = Результат[0]["ФизическоеЛицо"];
				Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
					Значение = "";
				Иначе
					Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
						Значение = "";
					Иначе
						ДанныеФЛ = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизическоеЛицо",ФЛ));
						Если ДанныеФЛ.Количество() > 0 Тогда
							Значение = СокрЛП(ДанныеФЛ[0].Отчество);
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ДолжнРук" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Значение = Результат[0].Должность.Наименование;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ИННРук" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда

				ФЛ = Результат[0].ФизическоеЛицо;

				Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
					Значение = "";
				Иначе
					Значение = ФЛ.ИНН;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ДатаРождРук" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				ФЛ = Результат[0].ФизическоеЛицо;
				Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
					Значение = ПустаяДата;
				Иначе
					Значение = ФЛ.ДатаРождения;
				КонецЕсли;
				
			Иначе
				Значение = ПустаяДата;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "МестоРождРук" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				ФЛ = Результат[0].ФизическоеЛицо;
				Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
					Значение = "";
				Иначе
					Значение = ФЛ.МестоРождения;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ПолРук" Тогда

			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = 0;
				Иначе
					Если Результат[0].ФизическоеЛицо.Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
						Значение = 2;
					ИначеЕсли Результат[0].ФизическоеЛицо.Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда
						Значение = 1;
					Иначе
						Значение = 0;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = 0;
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "ГраждРук" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				ФЛ = Результат[0].ФизическоеЛицо;
				Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
					Значение = "";
				Иначе
					Гражданство = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеГражданство", ФЛ);
					Если Гражданство = Неопределено Тогда
						Значение = "";
					Иначе
						Значение = Гражданство.Код;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ГраждСтранаРук" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				ФЛ = Результат[0].ФизическоеЛицо;
				Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
					Значение = "";
				Иначе
					Гражданство = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеГражданство", ФЛ);
					Если Гражданство = Неопределено Тогда
						Значение = "";
					Иначе
						Значение = ?(ПустаяСтрока(Гражданство.НаименованиеПолное), Гражданство.Наименование, Гражданство.НаименованиеПолное);
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ТелРук" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				ФЛ = Результат[0].ФизическоеЛицо;
				Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
					Значение = "";
				Иначе
					Данные = Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.Телефон, ДомашнийТелефонФизЛица);
					Результат2 = ФЛ.КонтактнаяИнформация.НайтиСтроки(Данные);
					Если Результат2.Количество() > 0 Тогда
						Значение = Результат2[0].Представление;
					Иначе
						Значение = "";
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КодУдЛичнРук" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеПаспортныеДанные", Результат[0].ФизическоеЛицо);
					Если УдЛичн = Неопределено Тогда
						Значение = "";
					Иначе
						Если УдЛичн.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка() Тогда
							Значение = "";
						Иначе
							Значение = УдЛичн.ВидДокумента.КодМВД;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ВидУдЛичнРук" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеПаспортныеДанные", Результат[0].ФизическоеЛицо);
					Если УдЛичн = Неопределено Тогда
						Значение = "";
					Иначе
						Если УдЛичн.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка() Тогда
							Значение = "";								
						Иначе
							Значение = УдЛичн.ВидДокумента.Наименование;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОрганВыданУдЛичнРук" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				ФЛ = Результат[0].ФизическоеЛицо;
				Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
					Значение = "";
				Иначе
					УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеПаспортныеДанные", ФЛ);
					Если УдЛичн = Неопределено Тогда
						Значение = "";
					Иначе
						Значение = УдЛичн.КемВыдан;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СерияУдЛичнРук" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				ФЛ = Результат[0].ФизическоеЛицо;
				Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
					Значение = "";
				Иначе
					УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеПаспортныеДанные", ФЛ);
					Если УдЛичн = Неопределено Тогда
						Значение = "";
					Иначе
						Значение = УдЛичн.Серия;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "НомерУдЛичнРук" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				ФЛ = Результат[0].ФизическоеЛицо;
				Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
					Значение = "";
				Иначе
					УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеПаспортныеДанные", ФЛ);
					Если УдЛичн = Неопределено Тогда
						Значение = "";
					Иначе
						Значение = УдЛичн.Номер;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ДатаУдЛичнРук" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				ФЛ = Результат[0].ФизическоеЛицо;
				Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
					Значение = "";
				Иначе
					УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеПаспортныеДанные", ФЛ);
					Если УдЛичн = Неопределено Тогда
						Значение = "";
					Иначе
						Значение = УдЛичн.ДатаВыдачи;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдрМЖРукРФ" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
					Значение = ПустойАдрес;
				Иначе
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеАдрес", Результат[0].ФизическоеЛицо);
					Если Результат2 <> Неопределено Тогда
						Значение = АдресВФормате9Запятых(Результат2);
					Иначе
						Значение = ПустойАдрес;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = ПустойАдрес;
			КонецЕсли;
			
			Если ПустаяСтрока(Значение) Тогда
				Значение = ПустойАдрес;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ИндексМЖРук" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
								
				Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
					Значение = "";
				Иначе
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеАдрес", Результат[0].ФизическоеЛицо);
					Если Результат2 <> Неопределено Тогда
						
						РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат2.ЗначенияПолей, РоссийскийАдрес);
				
						Значение = РоссийскийАдрес["Индекс"];
						
					Иначе
						Значение = "";
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СубъектМЖРук" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
					Значение = "";
				Иначе
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеАдрес", Результат[0].ФизическоеЛицо);
					Если Результат2 <> Неопределено Тогда
						
						РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат2.ЗначенияПолей, РоссийскийАдрес);
				
						Значение = РоссийскийАдрес["Регион"];
						
					Иначе
						Значение = "";
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "КодСубъектМЖРук" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
					Значение = "";
				Иначе
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеАдрес", Результат[0].ФизическоеЛицо);
					Если Результат2 <> Неопределено Тогда
						
						РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат2.ЗначенияПолей, РоссийскийАдрес);
				
						Значение = РоссийскийАдрес["КодРегиона"];
						
					Иначе
						Значение = "";
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "РайонМЖРук" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
					Значение = "";
				Иначе
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеАдрес", Результат[0].ФизическоеЛицо);
					Если Результат2 <> Неопределено Тогда
						
						РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат2.ЗначенияПолей, РоссийскийАдрес);
				
						Значение = РоссийскийАдрес["Район"];
						
					Иначе
						Значение = "";
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "ГородМЖРук" Тогда
				
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
					Значение = "";
				Иначе
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеАдрес", Результат[0].ФизическоеЛицо);
					Если Результат2 <> Неопределено Тогда
						
						РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат2.ЗначенияПолей, РоссийскийАдрес);
				
						Значение = РоссийскийАдрес["Город"];
						
					Иначе
						Значение = "";
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "НПунктМЖРук" Тогда
				
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
					Значение = "";
				Иначе
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеАдрес", Результат[0].ФизическоеЛицо);
					Если Результат2 <> Неопределено Тогда
						
						РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат2.ЗначенияПолей, РоссийскийАдрес);
				
						Значение = РоссийскийАдрес["НаселенныйПункт"];
						
					Иначе
						Значение = "";
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "УлицаМЖРук" Тогда
				
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
					Значение = "";
				Иначе
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеАдрес", Результат[0].ФизическоеЛицо);
					Если Результат2 <> Неопределено Тогда
						
						РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат2.ЗначенияПолей, РоссийскийАдрес);
				
						Значение = РоссийскийАдрес["Улица"];
						
					Иначе
						Значение = "";
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "ДомМЖРук" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
					Значение = "";
				Иначе
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеАдрес", Результат[0].ФизическоеЛицо);
					Если Результат2 <> Неопределено Тогда
						
						РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат2.ЗначенияПолей, РоссийскийАдрес);
				
						Значение = РоссийскийАдрес["Дом"];
						
					Иначе
						Значение = "";
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "КорпусМЖРук" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
					Значение = "";
				Иначе
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеАдрес", Результат[0].ФизическоеЛицо);
					Если Результат2 <> Неопределено Тогда
						
						РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат2.ЗначенияПолей, РоссийскийАдрес);
				
						Значение = РоссийскийАдрес["Корпус"];
						
					Иначе
						Значение = "";
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КвартираМЖРук" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
					Значение = "";
				Иначе
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеАдрес", Результат[0].ФизическоеЛицо);
					Если Результат2 <> Неопределено Тогда
						
						РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат2.ЗначенияПолей, РоссийскийАдрес);
				
						Значение = РоссийскийАдрес["Квартира"];
						
					Иначе
						Значение = "";
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
			
		//*******************************************************************Сведения о главном бухгалтере
		ИначеЕсли ИмяПоказателя = "ФИОБух" ИЛИ ИмяПоказателя = "ФИООтпр" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				ФЛ = Результат[0]["ФизическоеЛицо"];
				Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
					Значение = "";
				Иначе
					Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
						Значение = "";
					Иначе
						ДанныеФЛ = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизическоеЛицо",ФЛ));
						Если ДанныеФЛ.Количество() > 0 Тогда
							Значение = СокрЛП(СокрЛП(ДанныеФЛ[0].Фамилия) + " " + СокрЛП(ДанныеФЛ[0].Имя) + " " + СокрЛП(ДанныеФЛ[0].Отчество));
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ФамилияБух" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				ФЛ = Результат[0]["ФизическоеЛицо"];
				Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
					Значение = "";
				Иначе
					Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
						Значение = "";
					Иначе
						ДанныеФЛ = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизическоеЛицо",ФЛ));
						Если ДанныеФЛ.Количество() > 0 Тогда
							Значение = СокрЛП(СокрЛП(ДанныеФЛ[0].Фамилия));
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ИмяБух" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				ФЛ = Результат[0]["ФизическоеЛицо"];
				Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
					Значение = "";
				Иначе
					Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
						Значение = "";
					Иначе
						ДанныеФЛ = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизическоеЛицо",ФЛ));
						Если ДанныеФЛ.Количество() > 0 Тогда
							Значение = СокрЛП(СокрЛП(ДанныеФЛ[0].Имя));
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОтчествоБух" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				ФЛ = Результат[0]["ФизическоеЛицо"];
				Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
					Значение = "";
				Иначе
					Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
						Значение = "";
					Иначе
						ДанныеФЛ = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизическоеЛицо",ФЛ));
						Если ДанныеФЛ.Количество() > 0 Тогда
							Значение = СокрЛП(СокрЛП(ДанныеФЛ[0].Отчество));
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ИННБух" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				ФЛ = Результат[0].ФизическоеЛицо;
				
				Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
					Значение = "";
				Иначе
					Значение = ФЛ.ИНН;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ДатаРождБух" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				ФЛ = Результат[0].ФизическоеЛицо;
				Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
					Значение = ПустаяДата;
				Иначе
					Значение = ФЛ.ДатаРождения;
				КонецЕсли;
				
			Иначе
				Значение = ПустаяДата;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ДатаРождУпПред" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = ПустаяДата;
				Иначе
					Значение = Результат[0].ФизическоеЛицо.ДатаРождения;
				КонецЕсли;
			Иначе
				Значение = ПустаяДата;
			КонецЕсли;

		ИначеЕсли ИмяПоказателя = "МестоРождБух" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				ФЛ = Результат[0].ФизическоеЛицо;
				Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
					Значение = "";
				Иначе
					Значение = ФЛ.МестоРождения;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;

		ИначеЕсли ИмяПоказателя = "МестоРождУпПред" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					Значение = Результат[0].ФизическоеЛицо.МестоРождения;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;

		ИначеЕсли ИмяПоказателя = "ПолБух" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = 0;
				Иначе
					Если Результат[0].ФизическоеЛицо.Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
						Значение = 2;
					ИначеЕсли Результат[0].ФизическоеЛицо.Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда
						Значение = 1;
					Иначе
						Значение = 0;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = 0;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ПолУпПред" Тогда

			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = 0;
				Иначе
					Если Результат[0].ФизическоеЛицо.Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
						Значение = 2;
					ИначеЕсли Результат[0].ФизическоеЛицо.Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда
						Значение = 1;
					Иначе
						Значение = 0;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = 0;
			КонецЕсли;

		ИначеЕсли ИмяПоказателя = "ГраждБух" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				ФЛ = Результат[0].ФизическоеЛицо;
				Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
					Значение = "";
				Иначе
					Гражданство = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереГражданство", ФЛ);
					Если Гражданство = Неопределено Тогда
						Значение = "";
					Иначе
						Значение = Гражданство.Код;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ГраждСтранаБух" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				ФЛ = Результат[0].ФизическоеЛицо;
				Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
					Значение = "";
				Иначе
					Гражданство = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереГражданство", ФЛ);
					Если Гражданство = Неопределено Тогда
						Значение = "";
					Иначе
						Значение = ?(ПустаяСтрока(Гражданство.НаименованиеПолное), Гражданство.Наименование, Гражданство.НаименованиеПолное);
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;

		ИначеЕсли ИмяПоказателя = "ГраждУпПред" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					Гражданство = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеГражданство", Результат[0].ФизическоеЛицо);
					Если Гражданство = Неопределено Тогда
						Значение = "";
					Иначе
						Значение = Гражданство.Код;
					КонецЕсли;

				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;

		ИначеЕсли ИмяПоказателя = "ГраждСтранаУпПред" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					Гражданство = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеГражданство", Результат[0].ФизическоеЛицо);
					Если Гражданство = Неопределено Тогда
						Значение = "";
					Иначе
						Значение = ?(ПустаяСтрока(Гражданство.НаименованиеПолное), Гражданство.Наименование, Гражданство.НаименованиеПолное);
					КонецЕсли;

				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;

		ИначеЕсли ИмяПоказателя = "ТелБух" ИЛИ ИмяПоказателя = "ТелОтпр" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				ФЛ = Результат[0].ФизическоеЛицо;
				Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
					Значение = "";
				Иначе
					Данные = Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.Телефон, ДомашнийТелефонФизЛица);
					Результат2 = ФЛ.КонтактнаяИнформация.НайтиСтроки(Данные);
					Если Результат2.Количество() > 0 Тогда
						Значение = Результат2[0].Представление;
					Иначе
						Значение = "";
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "КодУдЛичнБух" Тогда

			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереПаспортныеДанные", Результат[0].ФизическоеЛицо);
					Если УдЛичн = Неопределено Тогда
						Значение = "";
					Иначе
						Если УдЛичн.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка() Тогда
							Значение = "";
						Иначе
							Значение = УдЛичн.ВидДокумента.КодМВД;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "ВидУдЛичнБух" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереПаспортныеДанные", Результат[0].ФизическоеЛицо);
					Если УдЛичн = Неопределено Тогда
						Значение = "";
					Иначе
						Если УдЛичн.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка() Тогда
							Значение = "";								
						Иначе
							Значение = УдЛичн.ВидДокумента.Наименование;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОрганВыданУдЛичнБух" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				ФЛ = Результат[0].ФизическоеЛицо;
				Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
					Значение = "";
				Иначе
					УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереПаспортныеДанные", ФЛ);
					Если УдЛичн = Неопределено Тогда
						Значение = "";
					Иначе
						Значение = УдЛичн.КемВыдан;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СерияУдЛичнБух" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				ФЛ = Результат[0].ФизическоеЛицо;
				Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
					Значение = "";
				Иначе
					УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереПаспортныеДанные", ФЛ);
					Если УдЛичн = Неопределено Тогда
						Значение = "";
					Иначе
						Значение = УдЛичн.Серия;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "НомерУдЛичнБух" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				ФЛ = Результат[0].ФизическоеЛицо;
				Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
					Значение = "";
				Иначе
					УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереПаспортныеДанные", ФЛ);
					Если УдЛичн = Неопределено Тогда
						Значение = "";
					Иначе
						Значение = УдЛичн.Номер;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ДатаУдЛичнБух" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				ФЛ = Результат[0].ФизическоеЛицо;
				Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
					Значение = "";
				Иначе
					УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереПаспортныеДанные", ФЛ);
					Если УдЛичн = Неопределено Тогда
						Значение = "";
					Иначе
						Значение = УдЛичн.ДатаВыдачи;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдрМЖБухРФ" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
					Значение = ПустойАдрес;
				Иначе
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереАдрес", Результат[0].ФизическоеЛицо);
					Если Результат2 <> Неопределено Тогда
						Значение = АдресВФормате9Запятых(Результат2);
					Иначе
						Значение = ПустойАдрес;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = ПустойАдрес;
			КонецЕсли;
			
			Если ПустаяСтрока(Значение) Тогда
				Значение = ПустойАдрес;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ИндексМЖБух" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
					Значение = "";
				Иначе
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереАдрес", Результат[0].ФизическоеЛицо);
					Если Результат2 <> Неопределено Тогда
						
						РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат2.ЗначенияПолей, РоссийскийАдрес);
				
						Значение = РоссийскийАдрес["Индекс"];
						
					Иначе
						Значение = "";
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СубъектМЖБух" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
					Значение = "";
				Иначе
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереАдрес", Результат[0].ФизическоеЛицо);
					Если Результат2 <> Неопределено Тогда
						
						РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат2.ЗначенияПолей, РоссийскийАдрес);
				
						Значение = РоссийскийАдрес["Регион"];
						
					Иначе
						Значение = "";
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "КодСубъектМЖБух" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
					Значение = "";
				Иначе
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереАдрес", Результат[0].ФизическоеЛицо);
					Если Результат2 <> Неопределено Тогда
						
						РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат2.ЗначенияПолей, РоссийскийАдрес);
				
						Значение = РоссийскийАдрес["КодРегиона"];
						
					Иначе
						Значение = "";
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "РайонМЖБух" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
					Значение = "";
				Иначе
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереАдрес", Результат[0].ФизическоеЛицо);
					Если Результат2 <> Неопределено Тогда
						
						РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат2.ЗначенияПолей, РоссийскийАдрес);
				
						Значение = РоссийскийАдрес["Район"];
						
					Иначе
						Значение = "";
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "ГородМЖБух" Тогда
				
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
					Значение = "";
				Иначе
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереАдрес", Результат[0].ФизическоеЛицо);
					Если Результат2 <> Неопределено Тогда
						
						РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат2.ЗначенияПолей, РоссийскийАдрес);
				
						Значение = РоссийскийАдрес["Город"];
						
					Иначе
						Значение = "";
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "НПунктМЖБух" Тогда
				
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
					Значение = "";
				Иначе
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереАдрес", Результат[0].ФизическоеЛицо);
					Если Результат2 <> Неопределено Тогда
						
						РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат2.ЗначенияПолей, РоссийскийАдрес);
				
						Значение = РоссийскийАдрес["НаселенныйПункт"];
						
					Иначе
						Значение = "";
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "УлицаМЖБух" Тогда
				
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
					Значение = "";
				Иначе
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереАдрес", Результат[0].ФизическоеЛицо);
					Если Результат2 <> Неопределено Тогда
						
						РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат2.ЗначенияПолей, РоссийскийАдрес);
				
						Значение = РоссийскийАдрес["Улица"];
						
					Иначе
						Значение = "";
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "ДомМЖБух" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
					Значение = "";
				Иначе
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереАдрес", Результат[0].ФизическоеЛицо);
					Если Результат2 <> Неопределено Тогда
						
						РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат2.ЗначенияПолей, РоссийскийАдрес);
				
						Значение = РоссийскийАдрес["Дом"];
						
					Иначе
						Значение = "";
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "КорпусМЖБух" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
					Значение = "";
				Иначе
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереАдрес", Результат[0].ФизическоеЛицо);
					Если Результат2 <> Неопределено Тогда
						
						РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат2.ЗначенияПолей, РоссийскийАдрес);
				
						Значение = РоссийскийАдрес["Корпус"];
						
					Иначе
						Значение = "";
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КвартираМЖБух" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
					Значение = "";
				Иначе
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереАдрес", Результат[0].ФизическоеЛицо);
					Если Результат2 <> Неопределено Тогда
						
						РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат2.ЗначенияПолей, РоссийскийАдрес);
				
						Значение = РоссийскийАдрес["Квартира"];
						
					Иначе
						Значение = "";
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
			
		//**********************************************Сведения об уполномоченном представителе
		ИначеЕсли ИмяПоказателя = "ФИОУпПред" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					//Значение = Результат[0].ФизическоеЛицо.Наименование;
					ФЛ = Результат[0].ФизическоеЛицо;
					Если ФЛ = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						ДанныеФЛ = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизическоеЛицо",ФЛ));
						Если ДанныеФЛ.Количество() > 0 Тогда
							Значение = СокрЛП(СокрЛП(ДанныеФЛ[0].Фамилия) + " " + СокрЛП(ДанныеФЛ[0].Имя) + " " + СокрЛП(ДанныеФЛ[0].Отчество));
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ИННУпПред" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					Значение = Результат[0].ФизическоеЛицо.ИНН;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ТелУпПред" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					
					Значение = "";
					
				Иначе
					
					Данные = Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.Телефон, ДомашнийТелефонФизЛица);

					Результат2 = Результат[0].ФизическоеЛицо.КонтактнаяИнформация.НайтиСтроки(Данные);

					Если Результат2.Количество() > 0 Тогда
						Значение = Результат2[0].Представление;
					Иначе
						Значение = "";
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				Значение = "";
				
			КонецЕсли;
				
				
		ИначеЕсли ИмяПоказателя = "КодУдЛичнУпПред" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеПаспортныеДанные", Результат[0].ФизическоеЛицо);
					Если УдЛичн = Неопределено Тогда
						Значение = "";
					Иначе
						Если УдЛичн.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка() Тогда
							Значение = "";								
						Иначе
							Значение = УдЛичн.ВидДокумента.КодМВД;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "ВидУдЛичнУпПред" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеПаспортныеДанные", Результат[0].ФизическоеЛицо);
					Если УдЛичн = Неопределено Тогда
						Значение = "";
					Иначе
						Если УдЛичн.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка() Тогда
							Значение = "";								
						Иначе
							Значение = УдЛичн.ВидДокумента.Наименование;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОрганВыданУдЛичнУпПред" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеПаспортныеДанные", Результат[0].ФизическоеЛицо);
					Если УдЛичн = Неопределено Тогда
						Значение = "";
					Иначе
						Значение = УдЛичн.КемВыдан;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СерияУдЛичнУпПред" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеПаспортныеДанные", Результат[0].ФизическоеЛицо);
					Если УдЛичн = Неопределено Тогда
						Значение = "";
					Иначе
						Значение = УдЛичн.Серия;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "НомерУдЛичнУпПред" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеПаспортныеДанные", Результат[0].ФизическоеЛицо);
					Если УдЛичн = Неопределено Тогда
						Значение = "";
					Иначе
						Значение = УдЛичн.Номер;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ДатаУдЛичнУпПред" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = ПустаяДата;
				Иначе
					УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеПаспортныеДанные", Результат[0].ФизическоеЛицо);
					Если УдЛичн = Неопределено Тогда
						Значение = ПустаяДата;
					Иначе
						Значение = УдЛичн.ДатаВыдачи;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = ПустаяДата;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдрМЖУпПредРФ" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = ПустойАдрес;
				Иначе
					
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеАдрес", Результат[0].ФизическоеЛицо);

					Если Результат2 <> Неопределено Тогда
						Значение = АдресВФормате9Запятых(Результат2);
					Иначе
						Значение = ПустойАдрес;
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				Значение = ПустойАдрес;
			КонецЕсли;
			
			Если ПустаяСтрока(Значение) Тогда
				Значение = ПустойАдрес;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ИндексМЖУпПред" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеАдрес", Результат[0].ФизическоеЛицо);

					Если Результат2 <> Неопределено Тогда
												
						РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат2.ЗначенияПолей, РоссийскийАдрес);
				
						Значение = РоссийскийАдрес["Индекс"];
						
					Иначе
						Значение = "";
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СубъектМЖУпПред" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеАдрес", Результат[0].ФизическоеЛицо);

					Если Результат2 <> Неопределено Тогда
						
						РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат2.ЗначенияПолей, РоссийскийАдрес);
				
						Значение = РоссийскийАдрес["Регион"];
						
					Иначе
						Значение = "";
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "КодСубъектМЖУпПред" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеАдрес", Результат[0].ФизическоеЛицо);

					Если Результат2 <> Неопределено Тогда
												
						РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат2.ЗначенияПолей, РоссийскийАдрес);
				
						Значение = РоссийскийАдрес["КодРегиона"];
						
					Иначе
						Значение = "";
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "РайонМЖУпПред" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеАдрес", Результат[0].ФизическоеЛицо);

					Если Результат2 <> Неопределено Тогда
						
						РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат2.ЗначенияПолей, РоссийскийАдрес);
				
						Значение = РоссийскийАдрес["Район"];
					
					Иначе
						Значение = "";
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "ГородМЖУпПред" Тогда
				
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеАдрес", Результат[0].ФизическоеЛицо);

					Если Результат2 <> Неопределено Тогда
												
						РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат2.ЗначенияПолей, РоссийскийАдрес);
				
						Значение = РоссийскийАдрес["Город"];
					
					Иначе
						Значение = "";
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "НПунктМЖУпПред" Тогда
				
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеАдрес", Результат[0].ФизическоеЛицо);

					Если Результат2 <> Неопределено Тогда
											
						РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат2.ЗначенияПолей, РоссийскийАдрес);
				
						Значение = РоссийскийАдрес["НаселенныйПункт"];
					
					Иначе
						Значение = "";
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "УлицаМЖУпПред" Тогда
				
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеАдрес", Результат[0].ФизическоеЛицо);

					Если Результат2 <> Неопределено Тогда
												
						РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат2.ЗначенияПолей, РоссийскийАдрес);
				
						Значение = РоссийскийАдрес["Улица"];
					
					Иначе
						Значение = "";
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "ДомМЖУпПред" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеАдрес", Результат[0].ФизическоеЛицо);

					Если Результат2 <> Неопределено Тогда
												
						РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат2.ЗначенияПолей, РоссийскийАдрес);
				
						Значение = РоссийскийАдрес["Дом"];
					
					Иначе
						Значение = "";
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "КорпусМЖУпПред" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеАдрес", Результат[0].ФизическоеЛицо);

					Если Результат2 <> Неопределено Тогда
												
						РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат2.ЗначенияПолей, РоссийскийАдрес);
				
						Значение = РоссийскийАдрес["Корпус"];
					
					Иначе
						Значение = "";
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КвартираМЖУпПред" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеАдрес", Результат[0].ФизическоеЛицо);

					Если Результат2 <> Неопределено Тогда
												
						РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат2.ЗначенияПолей, РоссийскийАдрес);
				
						Значение = РоссийскийАдрес["Квартира"];
					
					Иначе
						Значение = "";
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		//прочие сведения
		ИначеЕсли ИмяПоказателя = "ФаксИсп" Тогда
			
			Значение = "";
			
		ИначеЕсли ИмяПоказателя = "ДолжнОтпр" Тогда
			
			Значение = "ГЛАВНЫЙ БУХГАЛТЕР"
			
		ИначеЕсли ИмяПоказателя = "СтавкаРефинансирования" Тогда
			
			Результат = РегистрыСведений.СтавкаРефинансированияЦБ.СрезПоследних(ДатаЗначения);
			Если Результат.Количество() > 0 Тогда
				Значение = Результат[0].Размер;
			Иначе
				Значение = 0;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ПрименяетсяУСН" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "УчетнаяПолитикаНалоговыйУчет");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				ПромежуточноеЗначение = ?(ТипЗнч(Результат) = Тип("Структура"), Результат.ПрименяетсяУСН, Результат[0].ПрименяетсяУСН);
				Если ПромежуточноеЗначение = Истина Тогда
					Значение = 1;
				Иначе
					Значение = 0;
				КонецЕсли;
			Иначе
				Значение = 0;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ДатаПереходаНаУСН" Тогда

			Результат = ПолучитьСУчетомКэша(Кэш, "УчетнаяПолитикаНалоговыйУчет");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Значение = ?(ТипЗнч(Результат) = Тип("Структура"), Результат.ДатаПереходаНаУСН, Результат[0].ДатаПереходаНаУСН);
			Иначе
				Значение = ПустаяДата;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОбъектНалогообложенияУСН" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "УчетнаяПолитикаНалоговыйУчет");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				ПромежуточноеЗначение = ?(ТипЗнч(Результат) = Тип("Структура"), Результат.ОбъектНалогообложенияУСН, Результат[0].ОбъектНалогообложенияУСН);
				Если ПромежуточноеЗначение = Перечисления.ОбъектыНалогообложенияПоУСН.Доходы Тогда
					Значение = 1;
				ИначеЕсли ПромежуточноеЗначение = Перечисления.ОбъектыНалогообложенияПоУСН.ДоходыМинусРасходы Тогда
					Значение = 2;
				Иначе
					Значение = 0;
				КонецЕсли;
			Иначе
				Значение = 0;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СтавкаНалогаУСН" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "УчетнаяПолитикаНалоговыйУчет");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				ПромежуточноеЗначение = ?(ТипЗнч(Результат) = Тип("Структура"), Результат.ОбъектНалогообложенияУСН, Результат[0].ОбъектНалогообложенияУСН);
				Если ПромежуточноеЗначение = Перечисления.ОбъектыНалогообложенияПоУСН.Доходы Тогда
					Значение = 6;
				ИначеЕсли ПромежуточноеЗначение = Перечисления.ОбъектыНалогообложенияПоУСН.ДоходыМинусРасходы Тогда
					Значение = ?(ТипЗнч(Результат) = Тип("Структура"), Результат.СтавкаНалогаУСН, Результат[0].СтавкаНалогаУСН);
					Значение = ?(ЗначениеЗаполнено(Значение), Значение, 15);
				Иначе
					Значение = 0;
				КонецЕсли;
			Иначе
				Значение = 0;
			КонецЕсли;
						
		//сведения о банковском счете организации
		ИначеЕсли ИмяПоказателя = "БанкСчетНомер" Тогда
			
			БанкСчет = Организация.ОсновнойБанковскийСчет;
			Если БанкСчет = Справочники.БанковскиеСчета.ПустаяСсылка() Тогда
				Значение = "";
			Иначе
				Значение = БанкСчет.НомерСчета;
			КонецЕсли;
						
		ИначеЕсли ИмяПоказателя = "БанкСчетНаимБанка" Тогда
			
			БанкСчет = Организация.ОсновнойБанковскийСчет;
			Если БанкСчет = Справочники.БанковскиеСчета.ПустаяСсылка() Тогда
				Значение = "";
			Иначе
				Банк = БанкСчет.Банк;
				Если Банк = Справочники.Банки.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					Значение = Банк.Наименование;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "БанкСчетКоррСчетБанка" Тогда
			
			БанкСчет = Организация.ОсновнойБанковскийСчет;
			Если БанкСчет = Справочники.БанковскиеСчета.ПустаяСсылка() Тогда
				Значение = "";
			Иначе
				Банк = БанкСчет.Банк;
				Если Банк = Справочники.Банки.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					Значение = Банк.КоррСчет;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "БанкСчетБИКБанка" Тогда
			
			БанкСчет = Организация.ОсновнойБанковскийСчет;
			Если БанкСчет = Справочники.БанковскиеСчета.ПустаяСсылка() Тогда
				Значение = "";
			Иначе
				Банк = БанкСчет.Банк;
				Если Банк = Справочники.Банки.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					Значение = Банк.Код;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "НаимГоловнОрг" Тогда

			Если Организация.ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка() Тогда
				Значение = "";
			Иначе
				Значение = Организация.ГоловнаяОрганизация.НаименованиеПолное;
			КонецЕсли;

		ИначеЕсли ИмяПоказателя = "КППГоловнОрг" Тогда

			Если Организация.ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка() Тогда
				Значение = "";
			Иначе
				Значение = Организация.ГоловнаяОрганизация.КПП;
			КонецЕсли;

		ИначеЕсли ИмяПоказателя = "ФИОИсп" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИсполнителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				ФЛ = Результат[0]["ФизическоеЛицо"];
				Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
					Значение = "";
				Иначе
					ФЛ = Результат[0]["ФизическоеЛицо"];
					Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
						Значение = "";
					Иначе
						ДанныеФЛ = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизическоеЛицо",ФЛ));
						Если ДанныеФЛ.Количество() > 0 Тогда
							Значение = СокрЛП(СокрЛП(ДанныеФЛ[0].Фамилия) + " " + СокрЛП(ДанныеФЛ[0].Имя) + " " + СокрЛП(ДанныеФЛ[0].Отчество));
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ДолжнИсп" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИсполнителе");
			
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если НЕ ЗначениеЗаполнено(Результат[0].Должность) Тогда
					Значение = "";
				Иначе
					Значение = СокрЛП(Результат[0].Должность.Наименование);
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ТелИсп" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИсполнителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				ФизЛицо = Результат[0].ФизическоеЛицо;
				Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
					Значение = "";
				Иначе
					Данные = Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.Телефон, ДомашнийТелефонФизЛица);
					Результат2 = ФизЛицо.КонтактнаяИнформация.НайтиСтроки(Данные);
					Если Результат2.Количество() > 0 Тогда
						Значение = Результат2[0].Представление;
					Иначе
						Значение = "";
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ШифрСтрахователяФСС" Тогда
			
			Тарифы = РегистрыСведений.ПрименяемыеТарифыСтраховыхВзносов.СрезПоследних(ДатаЗначения, Новый Структура("ГоловнаяОрганизация", Организация.Ссылка));
			
			Если Тарифы.Количество() > 0 Тогда
				Значение = СокрЛП(Тарифы[0].ВидТарифа.КодФСС2012);
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СистемыНалогообложения" Тогда
			
			Значение = "";
			
			УчетныеПолитики = РегистрыСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(ДатаЗначения, Новый Структура("Организация", Организация.Ссылка));
			
			Если УчетныеПолитики.Количество() > 0 Тогда
				ДействующаяУчетнаяПолитика = УчетныеПолитики[0];
				
				Если Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
					Если ДействующаяУчетнаяПолитика.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая Тогда
						Значение = "ОСНО";
					ИначеЕсли ДействующаяУчетнаяПолитика.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная Тогда
						Значение = "УСН";
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Значение) И ДействующаяУчетнаяПолитика.ПлательщикЕНВД Тогда
						Значение = Значение + ",ЕНВД";
					КонецЕсли;
					
				ИначеЕсли Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
					Если ДействующаяУчетнаяПолитика.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая Тогда
						Значение = "ОСНО"
						         + ?(ДействующаяУчетнаяПолитика.ПлательщикЕНВД, ",ЕНВД", "")
						         + ?(ДействующаяУчетнаяПолитика.ПрименяетсяУСНПатент, ",ПСН", "");
						
					ИначеЕсли ДействующаяУчетнаяПолитика.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная Тогда
						Значение = "УСН"
						         + ?(ДействующаяУчетнаяПолитика.ПлательщикЕНВД, ",ЕНВД", "")
						         + ?(ДействующаяУчетнаяПолитика.ПрименяетсяУСНПатент, ",ПСН", "");
						
					ИначеЕсли ДействующаяУчетнаяПолитика.СистемаНалогообложения = Перечисления.СистемыНалогообложения.ОсобыйПорядок Тогда
						Если ДействующаяУчетнаяПолитика.ПлательщикЕНВД Тогда
							Значение = "ЕНВД";
						ИначеЕсли ДействующаяУчетнаяПолитика.ПрименяетсяУСНПатент Тогда
							Значение = "ПСН";
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ВидПлательщикаСтраховыхВзносов" Тогда
			
			Значение = "00";
			
		Иначе
			
			Значение = "";//если вернуть строку - больше шансов угадать, так как большинство сведений - строковые
			
		КонецЕсли;
		
		ОргСведения.Вставить(ИмяПоказателя, Значение);
		
	КонецЦикла;
	
	Возврат ОргСведения;
	
КонецФункции

// Функция возвращает сведения о физлице.
//
// Параметры:
//  ФизЛицо           - ссылка на элемент справочника "ФизическиеЛица";
//  ДатаЗначения      - дата, на которую нужно получить сведения;
//  МассивПоказателей - массив показателей, значения которых нужно вернуть.
//  
// Возвращаемое значение:
//  Структура с ключами из массива показателей и возвращаемыми значениями.
//
// Пример:
//	Если МассивПоказателей = Неопределено Тогда
//		МассивПоказателей = Новый Массив;
//		МассивПоказателей.Добавить("ИНН");
//		МассивПоказателей.Добавить("Фамилия");
//		МассивПоказателей.Добавить("Имя");
//		МассивПоказателей.Добавить("Отчество");
//	КонецЕсли;
//	ФЛСведения = Новый Структура;
//	Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
//		Если ИмяПоказателя = "ИНН" Тогда
//			Значение = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ФизЛицо, "ИНН");
//		ИначеЕсли ИмяПоказателя = "Фамилия"
//			  ИЛИ ИмяПоказателя = "Имя"
//			  ИЛИ ИмяПоказателя = "Отчество" Тогда
//			ТаблицаСрезПоследних = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизическоеЛицо", ФизЛицо));
//			Если ТаблицаСрезПоследних.Количество() > 0 Тогда
//				Значение = ТаблицаСрезПоследних[0][ИмяПоказателя];
//			Иначе
//				Значение = "";
//			КонецЕсли;
//		Иначе
//			Значение = "";
//		КонецЕсли;
//		ФЛСведения.Вставить(ИмяПоказателя, Значение);
//	КонецЦикла;
//	Возврат ФЛСведения;
//
Функция ПолучитьСведенияОФизЛице(Знач ФизЛицо, Знач МассивПоказателей = Неопределено, Знач ДатаЗначения = Неопределено) Экспорт
	
	Возврат ФизическиеЛицаЗарплатаКадры.ДанныеФизическогоЛицаДляРегламентированнойОтчетности(ФизЛицо, МассивПоказателей, ДатаЗначения);			
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА АВТОМАТИЧЕСКОГО ЗАПОЛНЕНИЯ
//

// Функция возвращает структуру показателей.
// Ключ структуры – идентификатор показателя.
// Значение структуры – массив из двух элементов:
// 	- признак автозаполнения показателя;
//	- признак расшифровки показателя.
//
// Параметры:
// 	ИДОтчета         - идентификатор отчета;
//	ИДРедакцииОтчета - идентификатор редакции формы отчета;
//  ПараметрыОтчета  - структура параметров отчета.
//
// Пример:
//	ПоказателиОтчета = Новый Структура;
//	Если ИДОтчета = "РегламентированныйОтчетРСВ1" Тогда
//		Если ИДРедакцииОтчета = "ФормаОтчета2011Кв1" Тогда
//			РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100010003", Истина, Истина);
//		КонецЕсли;
//	КонецЕсли;
//	Возврат ПоказателиОтчета;
//
Функция ПолучитьСведенияОПоказателяхОтчета(ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета = Неопределено) Экспорт
	
	ПоказателиОтчета = Новый Структура;
	
	Если ИДОтчета = "РегламентированныйОтчетБухОтчетность" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2011Кв1" Тогда
			
			ЗаполнениеБухгалтерскойОтчетности.ПолучитьСведенияОПоказателяхОтчетаБухОтчетностьФормаОтчета2011Кв1(ПоказателиОтчета);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2011Кв3" Тогда
			
			ЗаполнениеБухгалтерскойОтчетностиВызовСервера.ПолучитьСведенияОПоказателяхОтчетаБухОтчетностьФормаОтчета2011Кв3(ПоказателиОтчета, ПараметрыОтчета);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2011Кв4" Тогда
			
			ЗаполнениеБухгалтерскойОтчетностиВызовСервера.ПолучитьСведенияОПоказателяхОтчетаБухОтчетностьФормаОтчета2011Кв4(ПоказателиОтчета, ПараметрыОтчета);
			
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетБухОтчетностьМП" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2012Кв4" Тогда
			
			ЗаполнениеБухгалтерскойОтчетностиВызовСервера.ПолучитьСведенияОПоказателяхОтчетаБухОтчетностьМПФормаОтчета2012Кв4(ПоказателиОтчета, ПараметрыОтчета);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2012Кв4_2" Тогда
			
			ЗаполнениеБухгалтерскойОтчетностиВызовСервера.ПолучитьСведенияОПоказателяхОтчетаБухОтчетностьМПФормаОтчета2012Кв4_2(ПоказателиОтчета, ПараметрыОтчета);
			
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетБухОтчетностьСОНКО" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2012Кв4" Тогда
			
			ЗаполнениеБухгалтерскойОтчетностиВызовСервера.ПолучитьСведенияОПоказателяхОтчетаБухОтчетностьСОНКОФормаОтчета2012Кв4(ПоказателиОтчета, ПараметрыОтчета);
			
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетНДС" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2009Кв4" Тогда
			
			УчетНДС.ПолучитьСведенияОПоказателяхОтчетаНДСФормаОтчета2009Кв4(ПоказателиОтчета);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2015Кв1" Тогда
			
			УчетНДСФормированиеОтчетности.ПолучитьСведенияОПоказателяхОтчетаНДСФормаОтчета2015Кв1(ПоказателиОтчета);
			
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетКосвенныеНалогиТамСоюз" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2010Кв3" Тогда
		
			УчетНДС.ПолучитьСведенияОПоказателяхОтчетаКосвенныеНалогиТамСоюзФормаОтчета2010Кв3(ПоказателиОтчета);
		
		КонецЕсли;	
	
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетПрибыль" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2010Кв4" Тогда
			НалоговыйУчет.ПолучитьСведенияОПоказателяхОтчетаПрибыльФормаОтчета2010Кв4(ПоказателиОтчета);
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2012Кв1" Тогда
			НалоговыйУчет.ПолучитьСведенияОПоказателяхОтчетаПрибыльФормаОтчета2012Кв1(ПоказателиОтчета);
		Иначе
			// часть показателей заполняется модулем НалоговыйУчет
			Если ИДРедакцииОтчета = "ФормаОтчета2013Кв4" Тогда
				НалоговыйУчет.ПолучитьСведенияОПоказателяхОтчетаПрибыльФормаОтчета2013Кв4(ПоказателиОтчета);
			ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2015Кв1" Тогда
				НалоговыйУчет.ПолучитьСведенияОПоказателяхОтчетаПрибыльФормаОтчета2015Кв1(ПоказателиОтчета);
			КонецЕсли;
			
			// другая часть - модулем НалогНаПрибыльДекларация
			НомераЯчеек = НалогНаПрибыльДекларация.ЗаполняемыеЯчейкиРегламентированногоОтчета(
				ИДРедакцииОтчета,
				ПараметрыОтчета.Организация,
				ПараметрыОтчета.мДатаКонцаПериодаОтчета);
			
			Для Каждого НомерЯчейки Из НомераЯчеек Цикл
				РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, НомерЯчейки, Истина, Истина);
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетАвансыИмущество" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2011Кв3" Тогда
			
			УправлениеВнеоборотнымиАктивами.ПолучитьСведенияОПоказателяхОтчетаАвансыИмуществоФормаОтчета2011Кв3(ПоказателиОтчета);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2013Кв4" Тогда
			
			УправлениеВнеоборотнымиАктивами.ПолучитьСведенияОПоказателяхОтчетаАвансыИмуществоФормаОтчета2013Кв4(ПоказателиОтчета);
			
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетЗемельныйНалог" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2011Кв1" Тогда
			
			УправлениеВнеоборотнымиАктивами.ПолучитьСведенияОПоказателяхОтчетаЗемельныйНалогФормаОтчета2011Кв1(ПоказателиОтчета);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2013Кв4" Тогда
			
			УправлениеВнеоборотнымиАктивами.ПолучитьСведенияОПоказателяхОтчетаЗемельныйНалогФормаОтчета2013Кв4(ПоказателиОтчета);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2014Кв4" Тогда
			
			УправлениеВнеоборотнымиАктивами.ПолучитьСведенияОПоказателяхОтчетаЗемельныйНалогФормаОтчета2014Кв4(ПоказателиОтчета);
			
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетУСН" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2009Кв1" Тогда
			
			УчетУСН.ПолучитьСведенияОПоказателяхОтчетаУСНФормаОтчета2009Кв1(ПоказателиОтчета);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2014Кв1" Тогда
			
			УчетУСН.ПолучитьСведенияОПоказателяхОтчетаУСНФормаОтчета2014Кв1(ПоказателиОтчета);
			
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетТранспортныйНалог" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2007Кв1" Тогда
			
			УправлениеВнеоборотнымиАктивами.ПолучитьСведенияОПоказателяхОтчетаТранспортныйНалогФормаОтчета2007Кв1(ПоказателиОтчета);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2012Кв1" Тогда
			
			УправлениеВнеоборотнымиАктивами.ПолучитьСведенияОПоказателяхОтчетаТранспортныйНалогФормаОтчета2012Кв1(ПоказателиОтчета);

		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2012Кв4" Тогда
			
			УправлениеВнеоборотнымиАктивами.ПолучитьСведенияОПоказателяхОтчетаТранспортныйНалогФормаОтчета2012Кв4(ПоказателиОтчета);
		
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2013Кв4" Тогда
			
			УправлениеВнеоборотнымиАктивами.ПолучитьСведенияОПоказателяхОтчетаТранспортныйНалогФормаОтчета2013Кв4(ПоказателиОтчета);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2014Кв1" Тогда
			
			УправлениеВнеоборотнымиАктивами.ПолучитьСведенияОПоказателяхОтчетаТранспортныйНалогФормаОтчета2014Кв1(ПоказателиОтчета);
			
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетИмущество" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2011Кв3" Тогда
			
			УправлениеВнеоборотнымиАктивами.ПолучитьСведенияОПоказателяхОтчетаИмуществоФормаОтчета2011Кв3(ПоказателиОтчета);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2013Кв4" Тогда
			
			УправлениеВнеоборотнымиАктивами.ПолучитьСведенияОПоказателяхОтчетаИмуществоФормаОтчета2013Кв4(ПоказателиОтчета);
			
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетАлкоПриложение11" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2012Кв3"
			ИЛИ ИДРедакцииОтчета = "ФормаОтчета2014Кв1" Тогда
			
			УчетТоваров.ПолучитьСведенияОПоказателяхОтчетаРегламентированныйОтчетАлкоПриложение11ФормаОтчета2012Кв3(ПоказателиОтчета);
			
		КонецЕсли;
		
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетАлкоПриложение12" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2012Кв3" Тогда
			
			УчетТоваров.ПолучитьСведенияОПоказателяхОтчетаРегламентированныйОтчетАлкоПриложение12ФормаОтчета2012Кв3(ПоказателиОтчета);
			
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетСтатистикаФормаП3"
		Или ИДОтчета = "РегламентированныйОтчетСтатистикаФормаП1"
		Или ИДОтчета = "РегламентированныйОтчетСтатистикаФормаП1Приложение3" 	
		Или ИДОтчета = "РегламентированныйОтчетСтатистикаФормаП2" 
		Или ИДОтчета = "РегламентированныйОтчетСтатистикаФормаП2к"
		Или ИДОтчета = "РегламентированныйОтчетСтатистикаФорма5З"
		Или ИДОтчета = "РегламентированныйОтчетСтатистикаФормаП5М" 
		Или ИДОтчета = "РегламентированныйОтчетСтатистикаФорма1РП"
		Или ИДОтчета = "РегламентированныйОтчетСтатистикаФормаП6"
		Или ИДОтчета = "РегламентированныйОтчетСтатистикаФормаПМ"
		Или ИДОтчета = "РегламентированныйОтчетСтатистикаФорма3ТОРГПМ"
		Тогда
		
		ЗаполнениеФормСтатистики.ЗаполнитьСписокАвтозаполняемыхПолей(ПоказателиОтчета, ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета.Период);
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетСтатистикаФормаП4" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2012Кв1" Тогда
			
			УчетЗарплаты.ПолучитьСведенияОПоказателяхОтчетаРегламентированныйОтчетСтатистикаФормаП4ФормаОтчета2012Кв1(ПоказателиОтчета);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2013Кв1" 
			ИЛИ ИДРедакцииОтчета = "ФормаОтчета2014Кв1" Тогда
			
			УчетЗарплаты.ПолучитьСведенияОПоказателяхОтчетаРегламентированныйОтчетСтатистикаФормаП4ФормаОтчета2013Кв1(ПоказателиОтчета);
			
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчет3НДФЛ" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2015кв1" Тогда
			
			УчетДоходовИРасходовПредпринимателя.ПолучитьСведенияОПоказателяхОтчетаРегламентированныйОтчет3НДФЛ2015(ПоказателиОтчета);
			
		КонецЕсли;
		
	Иначе
		
		ЗарплатаКадры.ЗаполнитьПоказателиРегламентированногоОтчета(ПоказателиОтчета, ИДОтчета, ИДРедакцииОтчета);
		
	КонецЕсли;
	
	Возврат ПоказателиОтчета;
	
КонецФункции

// Функция возвращает признак реализации настройки автозаполняемых показателей регл. отчета.
//
// Параметры:
// 	ИДОтчета         - идентификатор отчета;
//	ИДРедакцииОтчета - идентификатор редакции формы отчета;
//
// Пример:
//  Если ИДОтчета = "РегламентированныйОтчетСтатистикаФормаП1" Тогда
//		Если ИДРедакцииОтчета = "ФормаОтчета2010Кв1" Тогда	
//			Возврат Истина;
//		КонецЕсли;
//	КонецЕсли;
//	Возврат Ложь;
//
Функция РеализованаНастройкаАвтозаполняемыхПоказателейРеглОтчета(ИДОтчета, ИДРедакцииОтчета) Экспорт
	
	Отбор = Новый Структура;
	Отбор.Вставить("ИмяОтчета", ИДОтчета);
	Отбор.Вставить("ИмяФормы",  ИДРедакцииОтчета);
	НастраиваемыеФормыСтатистики = ЗаполнениеФормСтатистики.НастраиваемыеФормыСтатистики(Отбор);
	Возврат НастраиваемыеФормыСтатистики.Количество() > 0;
	
КонецФункции

// Процедура заполняет переданную в виде контейнера структуру данных отчета.
//
// Пример:
//	Если ИДОтчета = "РегламентированныйОтчетРСВ1" Тогда
//		Если ИДРедакцииОтчета = "ФормаОтчета2011Кв1" Тогда	
//			Контейнер.Раздел30.П000300030103 = 100;
//			Контейнер.Раздел41.Добавить();
//		КонецЕсли;
//	КонецЕсли;
//
Процедура ЗаполнитьОтчет(ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета, Контейнер) Экспорт
	
	Если ИДОтчета = "РегламентированныйОтчетБухОтчетность" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2011Кв1" Тогда
			
			ЗаполнениеБухгалтерскойОтчетности.ЗаполнитьОтчетБухОтчетностьФормаОтчета2011Кв1(ПараметрыОтчета, Контейнер);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2011Кв3" Тогда
			
			ЗаполнениеБухгалтерскойОтчетностиВызовСервера.ЗаполнитьОтчетБухОтчетностьФормаОтчета2011Кв3(ПараметрыОтчета, Контейнер);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2011Кв4" Тогда
			
			ЗаполнениеБухгалтерскойОтчетностиВызовСервера.ЗаполнитьОтчетБухОтчетностьФормаОтчета2011Кв4(ПараметрыОтчета, Контейнер);
			
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетБухОтчетностьМП" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2012Кв4" Тогда
			
			ЗаполнениеБухгалтерскойОтчетностиВызовСервера.ЗаполнитьОтчетБухОтчетностьМПФормаОтчета2012Кв4(ПараметрыОтчета, Контейнер);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2012Кв4_2" Тогда
			
			ЗаполнениеБухгалтерскойОтчетностиВызовСервера.ЗаполнитьОтчетБухОтчетностьМПФормаОтчета2012Кв4_2(ПараметрыОтчета, Контейнер);
			
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетБухОтчетностьСОНКО" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2012Кв4" Тогда
			
			ЗаполнениеБухгалтерскойОтчетностиВызовСервера.ЗаполнитьОтчетБухОтчетностьСОНКОФормаОтчета2012Кв4(ПараметрыОтчета, Контейнер);
			
		КонецЕсли;
			
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетНДС" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2009Кв4" Тогда
			
			УчетНДС.ЗаполнитьОтчетНДСФормаОтчета2009Кв4(ПараметрыОтчета, Контейнер);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2015Кв1" Тогда
			
			УчетНДСФормированиеОтчетности.ЗаполнитьОтчетНДСФормаОтчета2015Кв1(ПараметрыОтчета, Контейнер);
			
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетКосвенныеНалогиТамСоюз" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2010Кв3" Тогда
		
			УчетНДС.ЗаполнитьОтчетКосвенныеНалогиТамСоюзФормаОтчета2010Кв3(ПараметрыОтчета, Контейнер);
		
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетПрибыль" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2010Кв4" Тогда	
			
			НалоговыйУчет.ЗаполнитьОтчетПрибыльФормаОтчета2010Кв4(ПараметрыОтчета, Контейнер);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2012Кв1" Тогда	

			НалоговыйУчет.ЗаполнитьОтчетПрибыльФормаОтчета2012Кв1(ПараметрыОтчета, Контейнер);
			
		Иначе
			
			// Таблица для сбора сведений о расшифровке. 
			// Инициализируется в процедуре добавления записи 
			// с помощью ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки()
			ТаблицаРасшифровки = Неопределено; 
			
			// часть показателей заполняется модулем НалоговыйУчет
			Если ИДРедакцииОтчета = "ФормаОтчета2013Кв4" Тогда
				НалоговыйУчет.ЗаполнитьОтчетПрибыльФормаОтчета2013Кв4(ПараметрыОтчета, Контейнер, ТаблицаРасшифровки);
			ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2015Кв1" Тогда
				НалоговыйУчет.ЗаполнитьОтчетПрибыльФормаОтчета2015Кв1(ПараметрыОтчета, Контейнер, ТаблицаРасшифровки);
			КонецЕсли;
			
			// ... другая часть - модулем НалогНаПрибыльДекларация
			НалогНаПрибыльДекларация.ЗаполнитьРегламентированныйОтчет(
				Контейнер,
				ТаблицаРасшифровки,
				ИДРедакцииОтчета,
				ПараметрыОтчета.Организация,
				ПараметрыОтчета.мДатаКонцаПериодаОтчета);
				
			// ... третья - с помощью БЗКБ
			Если ИДРедакцииОтчета = "ФормаОтчета2015Кв1" Тогда
				АвтоматическоеЗаполнениеОтчетности.ЗначенияПоказателей_РасчетПоНалогуНаПрибыль_2015Кв1(ПараметрыОтчета, Контейнер);
			КонецЕсли;
			
			// Так как расшифровка составляется разными алгоритмами, то в общем случае порядок показателей в ней может оказаться непонятным для пользователя.
			// Поэтому отсортируем показатели расшифровки по возрастанию их номеров ячеек.
			// Исходя из формата ячеек это должно привести к тому, что показатели в расшифровке будут идти в том же порядке,
			// как в распечатанном отчете.
			// Однако, так как номер ячейки - не ключевое поле, то сортировку нужно выполнять так,
			// чтобы не нарушить порядок записей расшифровки каждого конкретного поля.
			Если ТипЗнч(ТаблицаРасшифровки) = Тип("ТаблицаЗначений") 
				И ТаблицаРасшифровки.Колонки.Найти("ИмяПоказателя") <> Неопределено
				И ТаблицаРасшифровки.Колонки.Найти("ИсходныйПорядок") = Неопределено Тогда
				ТаблицаРасшифровки.Колонки.Добавить("ИсходныйПорядок", Новый ОписаниеТипов("Число"));
				Для Каждого СтрокаРасшифровки Из ТаблицаРасшифровки Цикл
					СтрокаРасшифровки.ИсходныйПорядок = ТаблицаРасшифровки.Индекс(СтрокаРасшифровки);
				КонецЦикла;
				ТаблицаРасшифровки.Сортировать("ИмяПоказателя, ИсходныйПорядок");
				ТаблицаРасшифровки.Колонки.Удалить("ИсходныйПорядок");
			КонецЕсли;
			
			// Сохраняем таблицу расшифровок во временном хранилище в привязке к уникальному идентификатору формы
			ПараметрыОтчета.АдресВременногоХранилищаРасшифровки = 
				ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, ПараметрыОтчета.УникальныйИдентификаторФормы);
			
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетАвансыИмущество" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2011Кв3" Тогда	
			
			УправлениеВнеоборотнымиАктивами.ЗаполнитьОтчетАвансыИмуществоФормаОтчета2011Кв3(ПараметрыОтчета, Контейнер);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2013Кв4" Тогда	
			
			УправлениеВнеоборотнымиАктивами.ЗаполнитьОтчетАвансыИмуществоФормаОтчета2013Кв4(ПараметрыОтчета, Контейнер);	
			
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетЗемельныйНалог" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2011Кв1" Тогда
			
			УправлениеВнеоборотнымиАктивами.ЗаполнитьОтчетЗемельныйНалогФормаОтчета2011Кв1(ПараметрыОтчета, Контейнер);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2013Кв4" Тогда
			
			УправлениеВнеоборотнымиАктивами.ЗаполнитьОтчетЗемельныйНалогФормаОтчета2013Кв4(ПараметрыОтчета, Контейнер);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2014Кв4" Тогда
			
			УправлениеВнеоборотнымиАктивами.ЗаполнитьОтчетЗемельныйНалогФормаОтчета2014Кв4(ПараметрыОтчета, Контейнер);
			
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетУСН" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2009Кв1" Тогда
			
			УчетУСН.ЗаполнитьОтчетУСНФормаОтчета2009Кв1(ПараметрыОтчета, Контейнер);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2014Кв1" Тогда
			
			УчетУСН.ЗаполнитьОтчетУСНФормаОтчета2014Кв1(ПараметрыОтчета, Контейнер);
			
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетТранспортныйНалог" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2007Кв1" Тогда
			
			УправлениеВнеоборотнымиАктивами.ЗаполнитьОтчетТранспортныйНалогФормаОтчета2007Кв1(ПараметрыОтчета, Контейнер);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2012Кв1" Тогда
			
			УправлениеВнеоборотнымиАктивами.ЗаполнитьОтчетТранспортныйНалогФормаОтчета2012Кв1(ПараметрыОтчета, Контейнер);

		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2012Кв4" Тогда
			
			УправлениеВнеоборотнымиАктивами.ЗаполнитьОтчетТранспортныйНалогФормаОтчета2012Кв4(ПараметрыОтчета, Контейнер);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2013Кв4" Тогда
			
			УправлениеВнеоборотнымиАктивами.ЗаполнитьОтчетТранспортныйНалогФормаОтчета2013Кв4(ПараметрыОтчета, Контейнер);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2014Кв1" Тогда
			
			УправлениеВнеоборотнымиАктивами.ЗаполнитьОтчетТранспортныйНалогФормаОтчета2014Кв1(ПараметрыОтчета, Контейнер);
			
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетИмущество" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2011Кв3" Тогда	
			
			УправлениеВнеоборотнымиАктивами.ЗаполнитьОтчетИмуществоФормаОтчета2011Кв3(ПараметрыОтчета, Контейнер);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2013Кв4" Тогда	
			
			УправлениеВнеоборотнымиАктивами.ЗаполнитьОтчетИмуществоФормаОтчета2013Кв4(ПараметрыОтчета, Контейнер);
			
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетАлкоПриложение11" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2012Кв3"
			ИЛИ ИДРедакцииОтчета = "ФормаОтчета2014Кв1" Тогда
			
			УчетТоваров.ЗаполнитьРегламентированныйОтчетАлкоПриложение11ФормаОтчета2012Кв3(ПараметрыОтчета, Контейнер);
			
		КонецЕсли;
		
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетАлкоПриложение12" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2012Кв3" Тогда
			
			УчетТоваров.ЗаполнитьРегламентированныйОтчетАлкоПриложение12ФормаОтчета2012Кв3(ПараметрыОтчета, Контейнер);
			
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетСтатистикаФормаП3"
		Или ИДОтчета = "РегламентированныйОтчетСтатистикаФормаП1"
		Или ИДОтчета = "РегламентированныйОтчетСтатистикаФормаП1Приложение3" 
		Или ИДОтчета = "РегламентированныйОтчетСтатистикаФормаП2" 
		Или ИДОтчета = "РегламентированныйОтчетСтатистикаФормаП2к" 
		Или ИДОтчета = "РегламентированныйОтчетСтатистикаФорма5З"
		Или ИДОтчета = "РегламентированныйОтчетСтатистикаФормаП5М" 
		Или ИДОтчета = "РегламентированныйОтчетСтатистикаФорма1РП"
		Или ИДОтчета = "РегламентированныйОтчетСтатистикаФормаП6"
		Или ИДОтчета = "РегламентированныйОтчетСтатистикаФормаПМ"
		Или ИДОтчета = "РегламентированныйОтчетСтатистикаФорма3ТОРГПМ"
		Тогда
		
		ЗаполнениеФормСтатистики.ЗаполнитьФормуСтатистики(Контейнер, ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета);
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчетСтатистикаФормаП4" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2012Кв1" Тогда
			
			УчетЗарплаты.ЗаполнитьРегламентированныйОтчетСтатистикаФормаП4ФормаОтчета2012Кв1(ПараметрыОтчета, Контейнер);
			
		ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2013Кв1" 
			ИЛИ ИДРедакцииОтчета = "ФормаОтчета2014Кв1" Тогда
			
			УчетЗарплаты.ЗаполнитьРегламентированныйОтчетСтатистикаФормаП4ФормаОтчета2013Кв1(ПараметрыОтчета, Контейнер);
			
		КонецЕсли;
		
	ИначеЕсли ИДОтчета = "РегламентированныйОтчет3НДФЛ" Тогда
		
		Если ИДРедакцииОтчета = "ФормаОтчета2015кв1" Тогда
			УчетДоходовИРасходовПредпринимателя.ЗаполнитьРегламентированныйОтчет3НДФЛ2015(ПараметрыОтчета, Контейнер);
		Иначе
			УчетДоходовИРасходовПредпринимателя.ЗаполнитьРегламентированныйОтчет3НДФЛ(ПараметрыОтчета, Контейнер);
		КонецЕсли;
			
	Иначе
		
		ЗарплатаКадры.ЗаполнитьРегламентированныйОтчет(ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета, Контейнер);
		
	КонецЕсли;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТАТИСТИКИ
//

Процедура ЗаполнитьОтчетВФоне(ПараметрыОтчета, АдресХранилища) Экспорт
	
	ЗаполнитьОтчет(ПараметрыОтчета.ИДОтчета, ПараметрыОтчета.ИДРедакцииОтчета, ПараметрыОтчета.ПараметрыОтчета, ПараметрыОтчета.Контейнер);
	Попытка
		ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(ПараметрыОтчета.ПараметрыОтчета.АдресВременногоХранилищаРасшифровки);
	Исключение
		ТаблицаРасшифровки = Неопределено;
	КонецПопытки;
	
	СтруктураДанных = Новый Структура();
	СтруктураДанных.Вставить("Контейнер", ПараметрыОтчета.Контейнер);
	СтруктураДанных.Вставить("ТаблицаРасшифровки", ТаблицаРасшифровки);
	
	ПоместитьВоВременноеХранилище(СтруктураДанных, АдресХранилища);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ИНТЕГРАЦИИ СО СПИСКОМ ЗАДАЧ БУХГАЛТЕРА 

// Процедура изменят заголовки кнопок.
//
Процедура НастроитьКнопкиКалендаряБухгалтера(КнопкаСправочникОтчетов = Неопределено, КнопкаКалендарь = Неопределено) Экспорт
	
	Если КнопкаКалендарь <> Неопределено Тогда
		КнопкаКалендарь.Заголовок = НСтр("ru = 'Календарь бухгалтера'");
	КонецЕсли;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ИНТЕРФЕЙСА ВЗАИМОДЕЙСТВИЯ С КОНФИГУРАЦИЯМИ (БИБЛИОТЕКАМИ) - ПОТРЕБИТЕЛЯМИ

// Процедура возвращает структуру с табличными документами разделов 2.5 и 6 формы РСВ-1.
//
// Параметры:
//  СсылкаНаСохрРеглОтчет - ссылка на регламентированный отчет;
//  СтруктураРазделов     - структура:
//    ключ                - имя раздела;
//    значение            - массив структур с полями:
//     Описание           - строка;
//     ТабличныйДокумент  -  табличный документ.
//
Процедура ПолучитьРаздел25иРаздел6ФормыРСВ1(СсылкаНаСохрРеглОтчет, СтруктураРазделов,
	                                        НумероватьСтраницы,
											НомерПервойстраницыРаздела25,
											НомерПоследнейстраницыРаздела25,
											НомерПервойстраницыРаздела6,
											ОбщееКоличествоСтраницРаздела6) Экспорт
	
	ПерсонифицированныйУчет.ЗаполнитьПечатныеФормыРазделовРСВ1(
	СсылкаНаСохрРеглОтчет,
	СтруктураРазделов,
	НумероватьСтраницы,
	НомерПервойстраницыРаздела25,
	НомерПоследнейстраницыРаздела25,
	НомерПервойстраницыРаздела6,
	ОбщееКоличествоСтраницРаздела6);
		
КонецПроцедуры

// Процедура заполняет данные для выгрузки раздела 2.5 формы РСВ-1
//
// Параметры:
//  СсылкаНаСохрРеглОтчет – ссылка на регламентированный отчет;
//  ДанныеРаздела25       – структура.
//
Процедура ЗаполнитьДанныеДляВыгрузкиРаздела25РСВ_1(СсылкаНаСохрРеглОтчет, ДанныеРаздела25) Экспорт
	
	ПерсонифицированныйУчет.ЗаполнитьДанныеДляВыгрузкиРаздела25РСВ_1(СсылкаНаСохрРеглОтчет, ДанныеРаздела25);
	
КонецПроцедуры

Процедура ПриСозданииФормыРеглОтчета(ИмяОтчета, ИмяФормы, Форма) Экспорт
	
	Если ИмяОтчета = "РегламентированныйОтчетПрибыль" И ИмяФормы = "ФормаОтчета2013Кв4" Тогда
		
		ДобавляемыеРеквизитыФормы = Новый Массив;
		ДобавляемыеРеквизитыФормы.Добавить(Новый РеквизитФормы("НастройкиПредупрежденийОбИзменениях", Новый ОписаниеТипов("Неопределено")));
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизитыФормы);
		
		Форма.НастройкиПредупрежденийОбИзменениях = ОбщегоНазначенияБП.НастройкиПредупрежденийОбИзменениях("ДобавленСчет69027");
		
	ИначеЕсли ИмяОтчета = "РегламентированныйОтчетАлкоПриложение12" И ИмяФормы = "ФормаОтчета2012Кв3" Тогда
		
		ДобавляемыеРеквизитыФормы = Новый Массив;
		ДобавляемыеРеквизитыФормы.Добавить(Новый РеквизитФормы("НастройкиПредупрежденийОбИзменениях", Новый ОписаниеТипов("Неопределено")));
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизитыФормы);
		
		Форма.НастройкиПредупрежденийОбИзменениях = ОбщегоНазначенияБП.НастройкиПредупрежденийОбИзменениях("ВведениеАлкогольныхКодов261");
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция возвращает идентификатор конфигурации.
// Длина идентификатора не должна превышать 8 символов.
//
// Пример:
//  Возврат "БПКОРП";
//
Функция ИДКонфигурации() Экспорт
	
	МетаданныеИмя = Метаданные.Имя;
	Если МетаданныеИмя = "БухгалтерияПредприятия" 
		ИЛИ МетаданныеИмя = "БухгалтерияПредприятияБазовая" 
		ИЛИ МетаданныеИмя = "БухгалтерияПредприятияУчебная" Тогда
		Возврат "БП";
	ИначеЕсли МетаданныеИмя = "БухгалтерияПредприятияКОРП" Тогда
		Возврат "БПКОРП";
	Иначе
		Возврат МетаданныеИмя;
	КонецЕсли;
	
КонецФункции

// Функция возвращает краткое название конфигурации.
// Длина возвращаемого значения не должна превышать 30 символов.
//
// Пример:
//  Возврат "1С:Бухгалтерия";
//
Функция КраткоеНазваниеПрограммы() Экспорт
		
	МетаданныеИмя = Метаданные.Имя;
	
	Если МетаданныеИмя = "БухгалтерияПредприятия" 
		ИЛИ МетаданныеИмя = "БухгалтерияПредприятияБазовая" 
		ИЛИ МетаданныеИмя = "БухгалтерияПредприятияУчебная" Тогда
		Возврат "1С:Бухгалтерия";
	ИначеЕсли МетаданныеИмя = "БухгалтерияПредприятияКОРП" Тогда
		Возврат "1С:Бухгалтерия КОРП";
	Иначе
		Возврат МетаданныеИмя;
	КонецЕсли;
	
КонецФункции

// Функция возвращает список используемых в конфигурации регламентированных отчетов.
//
// Пример:
// 	СписокРегламентированныхОтчетов = Новый СписокЗначений;
//	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетНДС");
//	Возврат СписокРегламентированныхОтчетов;
//
Функция ПолучитьСписокРегламентированныхОтчетов() Экспорт
	
	СписокРегламентированныхОтчетов = Новый СписокЗначений;
	
	// Бухгалтерская отчетность
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетБухОтчетность");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетБухОтчетностьМП");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетБухОтчетностьСОНКО");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетРасчетЧистыхАктивов");
	
	// Налоговая отчетность
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетНДС");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетПрибыль");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетДоходыЗаПределамиРФ");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетИмущество");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетИзвещениеОбУплатеАвансовогоПлатежаАкциза");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетИзвещениеОбОсвАвансовогоПлатежаАкциза");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАкцизыПриложение1");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАкцизыПриложение5");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАкцизыПриложение7");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАкцизыТабак");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетРозничныеЦеныНаТабак");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетНалогНаИгорныйБизнес");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетЕдиныйНалогНаВмененныйДоход");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетНедра");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетУСН");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетВода");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетЖивотныйМир");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетВодныеБиоресурсы");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетВодныеБиоресурсыПрилов");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетНДПИ");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетЕСХН");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетРасчетПлатыОкрСредаСвод");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетОтходыСубъектовМСП");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетФорма2ТПОтходы");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетРасчетПоОплатеЗаВоду");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетДоходыИностраннымОрганизациям");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетЗемельныйНалог");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетПрибыльСРП");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетТранспортныйНалог");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетЕУНД");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАвансыИмущество");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетКосвенныеНалогиТамСоюз");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетЗаявлениеОВвозеТоваров");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаУчетаПеремещенияТоваровТС");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетПрибыльСколковоРасчетПрибыли");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетПрибыльСколковоРасчетНалоговойБазы");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСведенияОДолеДоходовОтОбразовательнойИлиМедицинскойДеятельности");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетФинансовыйРезультатИнвестиционногоТоварищества");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетФорма2ТПОтходы");

	// Отчетность по физлицам
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчет4НДФЛ");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчет3НДФЛ");
	
	// Отчетность в фонды
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчет4ФСС");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчет4аФСС");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтраховыеВзносыНСИПЗ");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетПодтверждениеВидаДеятельности");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетРВ3");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетРСВ1");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетРСВ2");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистика1Квотирование");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСоответствиеУсловийТруда");
	
	// Налоговая отчетность иностранных организаций
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетПрибыльИностраннойОрганизации");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетДеятельностьИнОргВРФ");
	
	// Статистика
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаБухОтчетность");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаП1");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаП1Приложение3");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаП1СХ");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаП2");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаП3");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаП4");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаП4НЗ");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаП5М");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаП6");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаПМ");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаПМПром");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаПМТорг");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1И");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма3Информ");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма3Ф");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма5З");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаП2инв");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаП2к");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма11");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма11К");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1Т");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1П");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1РП");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаМПм");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаЗПОбразование");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаЗПКультура");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаЗПНаука");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаЗПСоц");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаЗПЗдрав");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаС1");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаС2");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1ДАП");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаДАС");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма22ЖКХсв");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1Автотранс");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1Алкоголь");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1АлкогольОпт");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма2ЦеныПриобр");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма9КС");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1ИПсвед");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1Услуги");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1ЦеныПроизв");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1ДАуслуги");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма65Автотранс");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1Закупки");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма3СБвывоз");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма11Сделка");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаДАППМ");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма3ТОРГПМ");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма2НаукаКр");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1ТРавто");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1Учет");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма8ВЭСуслуги");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1ВЭС");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма11ТЭР");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма4ТЭР");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма12Ф");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1ТОРГ");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1НатураБМ");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма7Травматизм");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма2ТПВоздух");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма26ЖКХ");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма12Строительство");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма4Запасы");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1Технология");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаДАФЛ");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаМПмсх");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1ЦеныПриобр");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма4Инновация");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма24Энергетика");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма14МЕТлом");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1Туст");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1Тчзп");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма85К");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1ТЕП");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1Кадры");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1КСРКраткая");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1КСР");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1ДМ");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма2ДМДавальческоеСырье");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма4ДМ");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1РабочаяСила");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1СХцены");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма2СБСеверСр");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма2МПинн");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма11НА");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаПрочиеФормы");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1РЖ");
	
	// Справки
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСведенияОрублевыхСчетах");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСведенияОСчетахвВиностраннойВалюте");
	
	// Декларирование производства и оборота алкогольной продукции
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение1");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение2");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение3");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение4");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение5");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение6");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение7");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение8");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение9");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение10");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение11");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетАлкоПриложение12");
	
	// Отчетность прочая
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСведенияОСреднесписочнойЧисленностиРаботников");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетУтилизационныйСбор");
	
	Возврат СписокРегламентированныхОтчетов;
	
КонецФункции

// Функция возвращает признак - является ли организация физ. или юр. лицом.
//
// Параметры:
//  Организация - ссылка на элемент справочника "Организации".
//
// Возвращаемое значение:
//  Истина - организация является юр. лицом;
//  Ложь   - организация является физ. лицом.
//
Функция ЭтоЮридическоеЛицо(Организация) Экспорт
	
	Возврат (Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	
КонецФункции

// Функция возвращает признак - уплачивает ли налогоплательщик единый налог на вмененный доход (ЕНВД).
//
// Параметры:
//  Организация - ссылка на элемент справочника "Организации".
//  Период      - дата, на которую нужно получить признак.
//
// Возвращаемое значение:
//  Истина - налогоплательщик уплачивает ЕНВД.
//  Ложь   - налогоплательщик не уплачивает ЕНВД.
//
Функция ПлательщикЕНВД(Организация, Период) Экспорт
	
	Возврат УчетнаяПолитика.ПлательщикЕНВД(Организация, Период);
	
КонецФункции

// Функция возвращает систему налогообложения организации.
//
// Параметры:
//  Организация - ссылка на элемент справочника "Организации".
//  Период      - дата, на которую нужно получить систему налогообложения.
//
// Возвращаемое значение:
//  Общая      - общая система налогообложения.
//  Упрощенная - упрощенная система налогообложения.
//
Функция СистемаНалогообложения(Организация, Период) Экспорт
	
	УчетнаяПолитикаОрганизации = УчетнаяПолитика.СистемаНалогообложения(Организация, Период);
	
	Если УчетнаяПолитикаОрганизации = Перечисления.СистемыНалогообложения.Общая Тогда
		Возврат "Общая";
	Иначе
		Возврат "Упрощенная";
	КонецЕсли;
		
КонецФункции

// Функция возвращает признак применения ПБУ 18/02.
//
// Параметры:
//  Организация - ссылка на элемент справочника "Организации".
//  Период      - дата, на которую нужно получить признак.
//
// Возвращаемое значение:
//  Истина - ПБУ 18/02 применяется.
//  Ложь   - ПБУ 18/02 не применяется.
//
Функция ПрименяетсяПБУ18(Организация, Период) Экспорт
	
	Возврат УчетнаяПолитика.ПоддержкаПБУ18(Организация, Период);
	
КонецФункции 

// Функция возвращает признак - является ли организация иностранной.
//
// Параметры:
//  Организация - ссылка на элемент справочника "Организации".
//
// Возвращаемое значение:
//  Истина - организация является иностранной;
//  Ложь   - организация не является иностранной.
//
Функция ЭтоИностраннаяОрганизация(Организация) Экспорт
	
	Если Организация.Метаданные().Реквизиты.Найти("ИностраннаяОрганизация") <> Неопределено Тогда
		Возврат Организация.ИностраннаяОрганизация;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Функция возвращает сведения о сотрудниках (застрахованных лицах) организации по состоянию на указанную дату.
//
// Параметры:
//  Организация - ссылка на элемент справочника Организации, по которому требуется получить сведения.
//  ДатаЗапроса - дата, по состоянию на которую требуется получить сведения
//
// Возвращаемое значение:
//  ТаблицаЗначений с колонками "Фамилия", "Имя", "Отчество" и "СтраховойНомерПФР", в которых
//  содержится информация о фамилии, имени, отчестве и страховом номере (СНИЛС) каждого
//  из сотрудников (застрахованных лиц) организации соответственно.
//
// Пример:
//
//  СтруктураПараметров = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизаций();
//  СтруктураПараметров.Организация = Организация;
//  СтруктураПараметров.ОкончаниеПериода = ДатаЗапроса;
//
//  Сотрудники = КадровыйУчет.СотрудникиОрганизации(Истина, СтруктураПараметров);
//
//  Возврат КадровыйУчет.КадровыеДанныеСотрудников(Истина, Сотрудники.ВыгрузитьКолонку("Сотрудник"), "Фамилия,Имя,Отчество,СтраховойНомерПФР", ДатаЗапроса);
//
Функция ПолучитьСписокЗастрахованныхЛицОрганизации(Организация, ДатаЗапроса) Экспорт
	
	Возврат ЗарплатаКадры.СписокЗастрахованныхЛицОрганизацииЗаОтчетныйПериодПФР(Организация, ДатаЗапроса);
	
КонецФункции

// Процедура добавляет в форму назначаемую команду.
//
// Параметры:
//   Форма - форма, в которую добавляется команда.
//   ГруппаФормы - группа формы, в которой будет располагаться команда.
//
Процедура ДобавитьНазначаемуюКоманду(Форма, ГруппаФормы) Экспорт

	ИмяКоманды = "ОткрытьЭкспрессПроверкуВеденияУчета";
	
	Команда = Форма.Команды.Добавить(ИмяКоманды);
	Команда.Заголовок = НСтр("ru = 'Экспресс-проверка ведения учета'");
	Команда.Действие = "Подключаемый_ВыполнитьНазначаемуюКоманду";
	
	Кнопка = Форма.Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ГруппаФормы);
	Кнопка.ИмяКоманды = ИмяКоманды;
	Кнопка.Вид = ВидКнопкиФормы.Гиперссылка;
	
	ГруппаФормы.Видимость = Истина;
	
КонецПроцедуры

// Функция возвращает заголовок формы "УправлениеОтчетностью" обработки "ОбщиеОбъектыРегламентированнойОтчетности".
// Если функция возвращает пустую строку, то используется заголовок формы, указанный по умолчанию.
//
// Пример:
//  Возврат "";
//
Функция ЗаголовокФормыУправлениеОтчетностью() Экспорт
	
	Возврат "";
	
КонецФункции

// Функция возвращает признак - является ли индивидуальный предприниматель работодателем для наемных сотрудников.
//
// Параметры:
//  Организация - ссылка на элемент справочника "Организации".
//
// Возвращаемое значение:
//  Истина - ИП является работодателем;
//  Ложь   - ИП не является работодателем.
//
// Пример:
//   Возврат НЕ ЭтоЮридическоеЛицо(Организация)
//	      И (ЗначениеЗаполнено(Организация.РегистрационныйНомерПФР)
//			ИЛИ ЗначениеЗаполнено(Организация.КодОрганаПФР)
//			ИЛИ ЗначениеЗаполнено(Организация.НаименованиеТерриториальногоОрганаПФР)
//			ИЛИ ЗначениеЗаполнено(Организация.РегистрационныйНомерТФОМС)
//			ИЛИ ЗначениеЗаполнено(Организация.РегистрационныйНомерФСС)
//			ИЛИ ЗначениеЗаполнено(Организация.КодПодчиненностиФСС)
//			ИЛИ ЗначениеЗаполнено(Организация.НаименованиеТерриториальногоОрганаФСС));
//
Функция ИПИспользуетТрудНаемныхРаботников(Организация) Экспорт
	
	Возврат УчетЗарплаты.ИПИспользуетТрудНаемныхРаботников(Организация);
	
КонецФункции

// Функция возвращает имя справочника обособленных подразделений,
// используемого для автоматического заполнения статистической отчетности.
//
// Пример:
//  Возврат "ПодразделенияОрганизаций";
//
Функция ИмяСправочникаОбособленныхПодразделений() Экспорт
	
	Возврат "ПодразделенияОрганизаций";
	
КонецФункции

// Функция возвращает имя реквизита справочника подразделений, который
// определяет, является ли подразделение обособленным (в трактовке Росстата).
// Используется для автоматического заполнения статистической отчетности.
//
// Тип реквизита - Булево.
// Если значение реквизита равно Истина - подразделение является обособленным.
// Если значение реквизита равно Ложь - подразделение не является обособленным.
//
// Пример:
//  Возврат "ИмеетНомерТерриториальногоОрганаРосстата";
//
Функция ИмяРеквизитаПризнакаОбособленногоПодразделения() Экспорт
	
	Возврат "";
	
КонецФункции

// Функция возвращает значение строки 130 раздела 3 книги учета доходов и расходов.
//
// Параметры:
//  Организация - ссылка на элемент справочника "Организации".
//  ДатаОкончанияПериода - дата окончания периода отчета.
//
// Пример:
//  Запрос = Новый Запрос;
//  Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
//  |       КнигаУчетаДоходовИРасходовОбороты.Период КАК Период,
//  |       КнигаУчетаДоходовИРасходовОбороты.Графа4Оборот КАК Графа4,
//  |       КнигаУчетаДоходовИРасходовОбороты.Графа5Оборот КАК Графа5,
//  |       КнигаУчетаДоходовИРасходовОбороты.Графа6Оборот КАК Графа6,
//  |       КнигаУчетаДоходовИРасходовОбороты.Графа7Оборот КАК Графа7
//  |ИЗ
//  |       РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&НачалоПериода, &КонецПериода, Квартал, Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОбороты
//  |
//  |УПОРЯДОЧИТЬ ПО
//  |       Период";
//  НачалоПериода = НачалоГода(ДатаОкончанияПериода);
//  КонецПериода = ДатаОкончанияПериода;
//  Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
//  Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
//  Запрос.УстановитьПараметр("Организация", Организация);
//  ТаблицаДанныхКнигиУчетаДоходовИРасходов = Запрос.Выполнить().Выгрузить();
//  Запрос = Новый Запрос;
//  Запрос.УстановитьПараметр("Организация", Организация);
//  Запрос.УстановитьПараметр("Период", ДатаОкончанияПериода);
//  Запрос.Текст = "ВЫБРАТЬ
//  |       РегистрацияСуммыУбыткаУСН.Ссылка,
//  |       РегистрацияСуммыУбыткаУСН.НомерСтроки КАК НомерСтроки,
//  |       РегистрацияСуммыУбыткаУСН.Год,
//  |       РегистрацияСуммыУбыткаУСН.СуммаНеПеренесенныхУбытков,
//  |       РегистрацияСуммыУбыткаУСН.Ссылка.УбытокОтУплатыМинимальногоНалога КАК УбытокОтУплатыМинимальногоНалога,
//  |       РегистрацияСуммыУбыткаУСН.Ссылка.Проведен
//  |ИЗ
//  |       Документ.РегистрацияСуммыУбыткаУСН.Убытки КАК РегистрацияСуммыУбыткаУСН
//  |ГДЕ
//  |       РегистрацияСуммыУбыткаУСН.Ссылка.Организация = &Организация
//  |       И РегистрацияСуммыУбыткаУСН.Ссылка.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Период, ГОД) И КОНЕЦПЕРИОДА(&Период, ГОД)
//  |       И РегистрацияСуммыУбыткаУСН.Ссылка.Проведен
//  |
//  |УПОРЯДОЧИТЬ ПО
//  |       НомерСтроки";
//  ТаблицаУбытков = Запрос.Выполнить().Выгрузить();
//  Раздел1_П010 = ТаблицаДанныхКнигиУчетаДоходовИРасходов.Итог("Графа5");
//  Раздел1_П020 = ТаблицаДанныхКнигиУчетаДоходовИРасходов.Итог("Графа7");
//  Если ТаблицаУбытков.Количество() = 0 Тогда
//  	Раздел1_П030 = 0;
//  Иначе
//   	Раздел1_П030 = ТаблицаУбытков[0].УбытокОтУплатыМинимальногоНалога;
//  КонецЕсли;
//  Раздел1_П040 = ?(Раздел1_П010 - Раздел1_П020 - Раздел1_П030 >= 0, Раздел1_П010 - Раздел1_П020 - Раздел1_П030, 0);
//  П010 = ТаблицаУбытков.Итог("СуммаНеПеренесенныхУбытков");
//  Возврат Мин(Раздел1_П040, П010);
//
Функция СуммаФактическогоУменьшенияНалоговойБазы(Организация, ДатаОкончанияПериода) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	КнигаУчетаДоходовИРасходовОбороты.Графа4Оборот КАК Графа4,
	               |	КнигаУчетаДоходовИРасходовОбороты.Графа5Оборот КАК Графа5,
	               |	КнигаУчетаДоходовИРасходовОбороты.Графа6Оборот КАК Графа6,
	               |	КнигаУчетаДоходовИРасходовОбороты.Графа7Оборот КАК Графа7
	               |ИЗ
	               |	РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&НачалоПериода, &КонецПериода, , Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОбороты";
				   
	НачалоПериода = НачалоГода(ДатаОкончанияПериода);
	КонецПериода = ДатаОкончанияПериода;
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Графа5 = 0;
	Графа7 = 0;
	ВыборкаКУДиР = Запрос.Выполнить().Выбрать();
	Если ВыборкаКУДиР.Следующий() Тогда		
		Графа5 = ВыборкаКУДиР.Графа5;
		Графа7 = ВыборкаКУДиР.Графа7;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период", ДатаОкончанияПериода);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(РегистрацияСуммыУбыткаУСН.СуммаНеПеренесенныхУбытков) КАК СуммаНеПеренесенныхУбытков,
	               |	РегистрацияСуммыУбыткаУСН.Ссылка
	               |ПОМЕСТИТЬ НеперенесенныеУбытки
	               |ИЗ
	               |	Документ.РегистрацияСуммыУбыткаУСН.Убытки КАК РегистрацияСуммыУбыткаУСН
	               |ГДЕ
	               |	РегистрацияСуммыУбыткаУСН.Ссылка.Организация = &Организация
	               |	И РегистрацияСуммыУбыткаУСН.Ссылка.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Период, ГОД) И КОНЕЦПЕРИОДА(&Период, ГОД)
	               |	И РегистрацияСуммыУбыткаУСН.Ссылка.Проведен
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РегистрацияСуммыУбыткаУСН.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(СУММА(РегистрацияСуммыУбыткаУСН.УбытокОтУплатыМинимальногоНалога), 0) КАК УбытокОтУплатыМинимальногоНалога,
	               |	ЕСТЬNULL(СУММА(НеперенесенныеУбытки.СуммаНеПеренесенныхУбытков), 0) КАК СуммаНеПеренесенныхУбытков
	               |ИЗ
	               |	НеперенесенныеУбытки КАК НеперенесенныеУбытки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РегистрацияСуммыУбыткаУСН КАК РегистрацияСуммыУбыткаУСН
	               |		ПО НеперенесенныеУбытки.Ссылка = РегистрацияСуммыУбыткаУСН.Ссылка";
	
	СуммаНеПеренесенныхУбытков = 0;
	УбытокОтУплатыМинимальногоНалога = 0;
	ВыборкаУбытки = Запрос.Выполнить().Выбрать();
	Если ВыборкаУбытки.Следующий() Тогда
		СуммаНеПеренесенныхУбытков       = ВыборкаУбытки.СуммаНеПеренесенныхУбытков;
		УбытокОтУплатыМинимальногоНалога = ВыборкаУбытки.УбытокОтУплатыМинимальногоНалога;
	КонецЕсли; 
	
	Раздел1_П010 = Графа5;
	Раздел1_П020 = Графа7;
	
	Раздел1_П030 = УбытокОтУплатыМинимальногоНалога;
	Раздел1_П040 = ?(Раздел1_П010 - Раздел1_П020 - Раздел1_П030 >= 0, Раздел1_П010 - Раздел1_П020 - Раздел1_П030, 0);
	
	П010 = СуммаНеПеренесенныхУбытков;
	
	Возврат Мин(Раздел1_П040, П010);
	
КонецФункции

// Функция возвращает код вида документа физического лица.
//
// Параметры:
//  ВидДокументаФизическогоЛица - ссылка на элемент справочника "ВидыДокументовФизическихЛиц".
//
// Тип возвращаемого значения:
//  Строка(2).
//
// Пример:
//  Возврат ВидДокументаФизическогоЛица.КодМВД;
//
Функция ПолучитьКодВидаДокументаФизическогоЛица(ВидДокументаФизическогоЛица) Экспорт
	
	КодВидаДокумента = "";
	
	Если ЗначениеЗаполнено(ВидДокументаФизическогоЛица) Тогда
		КодВидаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДокументаФизическогоЛица, "КодМВД");
	КонецЕсли;
	
	Возврат КодВидаДокумента;
	
КонецФункции

// Процедура возвращает ссылку на предопределенный элемент из справочника "ВидыКонтактнойИнформации".
//
// Параметры:
//  ВидКИ      - ссылка на предопределенный элемент справочника "ВидыКонтактнойИнформации".
//  НаимВидаКИ - Строка - наименование предопределенного элемента справочника "ВидыКонтактнойИнформации".
//
// Пример:
//  ВидКИ = Справочники.ВидыКонтактнойИнформации[НаимВидаКИ];
//
Процедура ПолучитьВидКонтактнойИнформации(ВидКИ, НаимВидаКИ) Экспорт
	
	ВидКИ = Справочники.ВидыКонтактнойИнформации[НаимВидаКИ];
	
КонецПроцедуры

// Процедура возвращает признак ведения персонифицированного учета во внешней программе.
//
// Параметры:
//  ПризнакПерсУчета - булево - признак ведения персонифицированного учета во внешней программе.
//                     Истина - персонифицированный учет ведется во внешней программе;
//                     Ложь   - персонифицированный учет ведется в конфигурации.
//
Процедура ПолучитьПризнакВеденияПерсонифицированногоУчетаВоВнешнейПрограмме(ПризнакПерсУчета) Экспорт
	
	ПараметрыУчета = ОбщегоНазначенияБПВызовСервера.ОпределитьПараметрыУчета();
	ПризнакПерсУчета = ПараметрыУчета.УчетЗарплатыИКадровВоВнешнейПрограмме;
	
КонецПроцедуры

// Процедура возвращает признак учета расходов по элементам затрат.
//
// Параметры:
//  НачалоПериода        - Дата - начало периода отчета (СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета).
//  КонецПериода         - Дата - окончание периода отчета (СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета).
//  Организация          - СправочникСсылка - ссылка на элемент справочника "Организации".
//  ПризнакУчетаРасходов - Булево - признак учета расходов по элементам затрат.
//                           Истина - расходы учитываются по элементам затрат;
//                           Ложь   - расходы не учитываются по элементам затрат.
// Пример:
//  ПризнакУчетаРасходов = ЭлементыЗатратНастройкаПараметровУчета.РасходыУчитываютсяПоЭлементамЗатрат(
//  	НачалоПериода, КонецПериода, Организация);
//
Процедура ПолучитьПризнакУчетаРасходовПоЭлементамЗатрат(НачалоПериода, КонецПериода, Организация, ПризнакУчетаРасходов) Экспорт
	
	ПризнакУчетаРасходов = ЭлементыЗатратНастройкаПараметровУчета.РасходыУчитываютсяПоЭлементамЗатрат(НачалоПериода, КонецПериода, Организация);
	
КонецПроцедуры

// Процедура возвращает УИД конфигурации для целей регламентированной отчетности.
//
// Параметры:
// 	УИДКонфигурации - Строка - Уникальный идентификатор конфигурации 
//							   для целей регламентированной отчетности.
//
// Пример:
//  УИДКонфигурации = "e54b72a0-171f-11df-85fa-001b24e002fe";
//
Процедура ПолучитьУИДКонфигурации(УИДКонфигурации) Экспорт
	
	МетаданныеИмя = Метаданные.Имя;
	Если МетаданныеИмя = "БухгалтерияПредприятия" 
		ИЛИ МетаданныеИмя = "БухгалтерияПредприятияБазовая" 
		ИЛИ МетаданныеИмя = "БухгалтерияПредприятияУчебная" Тогда
		УИДКонфигурации = "0daf6254-b4b4-42ac-8f62-e0c6ccd5e421";
	ИначеЕсли МетаданныеИмя = "БухгалтерияПредприятияКОРП" Тогда
		УИДКонфигурации = "16cce818-2e61-481d-acc9-0d1b3a8e73ff";
	КонецЕсли;
	
КонецПроцедуры


#Область НоваяФормаРегламентированнойОтчетности

// Процедура переопределяет обработчик подписки на событие "ЗаписьОбъектовРегламентированнойОтчетности*"
//
// Параметры:
//	Ссылка - СправочникСсылка, ДокументСсылка - Ссылка на объект - источник события
//	Отказ  - Булево - Управляет значением параметра "Отказ" вызывающего обработчика подписки на событие
//	СтандартнаяОбработка - Булево - Если СтандартнаяОбработка = Истина, то будут выполнены действия вызывающего обработчика подписки на событие
//
Процедура ЗаписьОбъектовРегламентированнойОтчетности(Ссылка, Отказ, СтандартнаяОбработка) Экспорт
	
	ЗарплатаКадры.ЗаписьОбъектовРегламентированнойОтчетности(Ссылка, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

// Процедура переопределяет свойства объекта, с которыми он будет отображен в форме Отчетность
// Параметры:
//  СвойстваОбъектов  - ТаблицаЗначений - Таблица, содержащая в себе описания ссылок, переданных в закладке Ссылка таблицы
//		Каждая колонка таблицы соотвествует свойству объекта.
//		Таблица содержит следующие колонки:
//			- ДатаСоздания - Дата - Дата создания объекта
//			- Наименование - Строка - Наименование объекта, с которым он будет отображаться в форме Отчетность
//			- КодКонтролирующегоОргана - Строка - Код контролирующего органа, в который отправляется отчетности по ТКС
//			- ДатаНачала - Дата - Дата начала периода. Пустая, если дата начала периода отсуствует
//			- ДатаОкончания - Дата - Дата окончания периода. Пустая, если дата окончания периода отсуствует 
//			- ВариантОтчета - Строка(3) - Корректировочный номер (0 - Первичный)
//			- ПометкаУдаления - Булево - Истина, если объект помечен на удаление 
//			- Организация - СправочникСсылка.Организации - Организация, которой принадлежит объект
//			- Комментарий - Строка - Комментарий из объекта
Процедура ОпределитьСвойстваОбъектовДляОтображенииВФормеОтчетность(СвойстваОбъектов) Экспорт
	
	УчетОбособленныхПодразделений.ОпределитьСвойстваОбъектовДляОтображенииВФормеОтчетность(СвойстваОбъектов);
	
	ЗарплатаКадры.ОпределитьСвойстваОбъектовДляОтображенииВФормеОтчетность(СвойстваОбъектов);
	
	УчетНДС.ОпределитьСвойстваОбъектовДляОтображенииВФормеОтчетность(СвойстваОбъектов);	
	
КонецПроцедуры

// Определяет свойства, касающиеся общих свойств объектов конфигураций-потребителей для отображения в форме Отчетность
// и возможности содания новый объектов из формы Отчетность
//
// Параметры:
//  ТаблицаОписания  - ТаблицаЗначений - Таблица, содержащая в себе описания объектов конфигураций-потребителей
//		Каждая колонка таблицы соотвествует свойству объекта.
//		Таблица содержит следующие колонки:
//			- ТипОбъекта - Тип - Тип описываемого объекта
//			- ВидКонтролирующегоОргана - Перечисления.ТипыКонтролирующихОрганов - контролирующий орган, в который сдается отчетности
//			- ГруппаВДереве - Строка - Определяет имя группы, в которой будет отображаться объект в случае иерархическкого отображения списка объектов
//			- ВидДокумента - Перечисления.СтраницыЖурналаОтчетность - Определяет страницу формы Отчетность, на которой будет отображаться объект
//				Может принимать одно из следующих значений:
//						Перечисления.СтраницыЖурналаОтчетность.Уведомления
//						Перечисления.СтраницыЖурналаОтчетность.Отчеты
//			- НеОтправляетсяВКонтролирующийОрган - Булево - Истина, если объект не отправляется в контролирующий орган по ТКС
//			- ЯвляетсяАктуальным - Булево - Определят, можно ли создавать новые объекты данного вида
//			- ИмяОсновногоМакетаДляПечати - Строка - имя макета, который будет использоваться для печати по умолчанию
Процедура ОпределитьТаблицуОписанияОбъектовРегламентированнойОтчетности(ТаблицаОписания) Экспорт
	
	УчетОбособленныхПодразделений.ОпределитьТаблицуОписанияОбъектовРегламентированнойОтчетности(ТаблицаОписания);
	
	ЗарплатаКадры.ОпределитьТаблицуОписанияОбъектовРегламентированнойОтчетности(ТаблицаОписания);	
	
	УчетНДС.ОпределитьТаблицуОписанияОбъектовРегламентированнойОтчетности(ТаблицаОписания);
	
КонецПроцедуры

// Дополняет дерево регламентированных отчетов для использования в форме выбора видов отчетов,
// которая вызывается из формы "Отчетность" при нажатии на кнопку "Создать" на вкладке "Отчеты"
//
// Параметры:
//  ДеревоОтчетов - ДеревоЗначений - Дерево содержит описания видов отчетов, дополняемые из конфигураций-потребителей
//		Деревоз значений содержит следующие колонки:
//			- Наименование - Строка - Наименование вида отчета, как оно должно отображаться в форме
//			- ПолноеИмя - Строка - Полное имя (как в метаданных) документа или справочник для хранения данных отчета,
//				например: "Документ.РегламентированныйОтчет" или "Документ.УниверсальныйРегламентированныйОтчет" (для БГУ)
//			- Ссылка - СправочникСсылка - Ссылка на элемент справочника, содержащий описание вида отчета (если существует),
//				например, ссылка на элемент справочника "ВидыОтчетов" в БГУ
//			- ТипПолучателя - Перечисления.ТипыКонтролирующихОрганов - контролирующий орган, в который сдается отчетность
//			- Категория - Строка - Наименование категории отчета или название группы, в которую входит отчет (для группировки в форме)
//			- ЭтоГруппа - Булево - Если элемент дерева должен отображаться в форме как группа
//
Процедура ДобавитьВДеревоРегламентированныхОтчетовДругиеОтчеты(ДеревоОтчетов) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ФильтрацияОрганизацийВСтартовойФормеРегламентированногоОтчета

// Процедура возвращает текст запроса для получения организаций - юридических лиц.
//
// Параметры:
//  ТекстЗапроса - Строка - текст запроса для получения организаций, являющихся юридическими лицами.
//
// Пример:
//	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
//				   |	Организации.Ссылка,
//				   |	Организации.Наименование
//				   |ИЗ
//				   |	Справочник.Организации КАК Организации
//				   |ГДЕ
//				   |	Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
//				   |	И НЕ Организации.ПометкаУдаления";
//
Процедура СформироватьТекстЗапросаДляПолученияДоступныхЮридическихЛиц(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Ссылка,
	|	Организации.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|	И НЕ Организации.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование,
	|	Ссылка";
	
КонецПроцедуры

// Процедура возвращает текст запроса для получения организаций - индивидуальных предпринимателей.
//
// Параметры:
//  ТекстЗапроса - Строка - текст запроса для получения организаций, являющихся индивидуальными предпринимателями.
//
// Пример:
//	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
//				   |	Организации.Ссылка,
//				   |	Организации.Наименование
//				   |ИЗ
//				   |	Справочник.Организации КАК Организации
//				   |ГДЕ
//				   |	Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
//				   |	И НЕ Организации.ПометкаУдаления";
//
Процедура СформироватьТекстЗапросаДляПолученияДоступныхИндивидуальныхПредпринимателей(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Ссылка,
	|	Организации.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|	И НЕ Организации.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование,
	|	Ссылка";
	
КонецПроцедуры

// Процедура возвращает текст запроса для получения организаций -
// юридических лиц и индивидуальных предпринимателей.
//
// Параметры:
//  ТекстЗапроса - Строка - текст запроса для получения организаций -
//                          юридических лиц и индивидуальных предпринимателей.
//
// Пример:
//	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
//				   |	Организации.Ссылка,
//				   |	Организации.Наименование
//				   |ИЗ
//				   |	Справочник.Организации КАК Организации
//				   |ГДЕ
//				   |	НЕ Организации.ПометкаУдаления
//				   |
//				   |УПОРЯДОЧИТЬ ПО
//				   |	Наименование";
//
Процедура СформироватьТекстЗапросаДляПолученияДоступныхОрганизаций(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка,
	|	Организации.Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организации.Наименование";
	
КонецПроцедуры

#КонецОбласти

Функция ПолучитьСУчетомКэша(Кэш, Параметр, ФизЛицо = Неопределено)
	Перем ЗначениеПараметра;
	Перем Ставки;
	
	Если Кэш.Свойство(Параметр, ЗначениеПараметра) Тогда
		Возврат ЗначениеПараметра;
	КонецЕсли;
	
	Если Параметр = "СтавкаНалогаНаПрибыль" Тогда
		СтавкаФБ = 0;
		СтавкаРФ = 0;
		СтруктураПараметров = Новый Структура("Организация, Дата", Кэш.Организация.Ссылка, Кэш.ДатаЗначения);
		НалоговыйУчет.ПолучитьСтавкуНалогаНаПрибыль(СтруктураПараметров, ,СтавкаФБ, СтавкаРФ, 0);
		Результат = Новый Структура("СтавкаФБ, СтавкаСубъектРФ, СтавкаМестный", СтавкаФБ * 100, СтавкаРФ * 100, 0);
	ИначеЕсли Параметр = "ЮрАдресОрганизации" ИЛИ Параметр = "ФактАдресОрганизации" Тогда
		
		Если Кэш.ПБОЮЛ Тогда
			
			ЭлементАдрес = Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица;
			Данные = Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, ЭлементАдрес);
			Результат = Кэш.Организация.ИндивидуальныйПредприниматель.КонтактнаяИнформация.НайтиСтроки(Данные);
			Если Результат.Количество() > 0 Тогда
				Результат = Результат[0];
			Иначе
				Результат = Неопределено;
			КонецЕсли;
			
		Иначе
			
			ЭлементАдрес = ?(Параметр = "ЮрАдресОрганизации",Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации , Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
			Результат = Неопределено;
			Для Каждого Элемент Из Кэш.Организация.КонтактнаяИнформация Цикл
				Если Элемент.Вид.Наименование = ЭлементАдрес.Наименование Тогда
					Результат = Элемент;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли Параметр = "СведенияОбИндивидуальномПредпринимателе" Тогда
		Если Кэш.Организация.Метаданные().Реквизиты.Найти("ИндивидуальныйПредприниматель") <> Неопределено Тогда
			Результат = Новый Массив;
			Результат.Добавить(Новый Структура("ФизическоеЛицо", Кэш.Организация.ИндивидуальныйПредприниматель));
		КонецЕсли;
	ИначеЕсли Параметр = "СведенияОРуководителе" Тогда
		Данные = Новый Структура("СтруктурнаяЕдиница, ОтветственноеЛицо", Кэш.Организация.Ссылка, Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
		Результат = РегистрыСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(Кэш.ДатаЗначения, Данные);
	ИначеЕсли Параметр = "СведенияОБухгалтере" Тогда
		Данные = Новый Структура("СтруктурнаяЕдиница, ОтветственноеЛицо", Кэш.Организация.Ссылка, Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);
		Результат = РегистрыСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(Кэш.ДатаЗначения, Данные);
	ИначеЕсли Параметр = "СведенияОбИсполнителе" Тогда
		Если Метаданные.Перечисления.ОтветственныеЛицаОрганизаций.ЗначенияПеречисления.Найти("Исполнитель") <> Неопределено Тогда
			Данные = Новый Структура("СтруктурнаяЕдиница, ОтветственноеЛицо", Кэш.Организация.Ссылка, Перечисления.ОтветственныеЛицаОрганизаций.Исполнитель);
		Иначе
			Данные = Новый Структура("СтруктурнаяЕдиница, ОтветственноеЛицо", Кэш.Организация.Ссылка, Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);
		КонецЕсли;
		Результат = РегистрыСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(Кэш.ДатаЗначения, Данные);
	ИначеЕсли Параметр = "СведенияОУполномоченномПредставителе" Тогда
		Данные = Новый Структура("СтруктурнаяЕдиница, ОтветственноеЛицо", Кэш.Организация.Ссылка, Перечисления.ОтветственныеЛицаОрганизаций.Уполномоченныйпредставитель);
		Результат = РегистрыСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(Кэш.ДатаЗначения, Данные);
	ИначеЕсли Параметр = "ТелефонОрганизации" Тогда
		Если Кэш.ПБОЮЛ Тогда
			Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Справочники.ВидыКонтактнойИнформации, "ТелефонРабочийФизическиеЛица") Тогда
				ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица;
			ИначеЕсли РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Справочники.ВидыКонтактнойИнформации, "ТелефонДомашнийФизическиеЛица") Тогда
				ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица;
			КонецЕсли;
			Данные = Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.Телефон, ВидКонтактнойИнформации);
			Результат = Кэш.Организация.ИндивидуальныйПредприниматель.КонтактнаяИнформация.НайтиСтроки(Данные);
			Если Результат.Количество() > 0 Тогда
				Результат = Результат[0];
			Иначе
				Результат = Неопределено;
			КонецЕсли;
		Иначе
			ЭлементТелефон = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации;
			Данные = Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.Телефон, ЭлементТелефон);
			Результат = Кэш.Организация.КонтактнаяИнформация.НайтиСтроки(Данные);
			Если Результат.Количество() > 0 Тогда
				Результат = Результат[0];
			Иначе
				Результат = Неопределено;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Параметр = "УчетнаяПолитикаНалоговыйУчет" Тогда
		Результат = РегистрыСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(Кэш.ДатаЗначения, Новый Структура("Организация", Кэш.Организация.Ссылка));
	ИначеЕсли Параметр = "СведенияОбИндивидуальномПредпринимателеПаспортныеДанные" 
		ИЛИ Параметр = "СведенияОРуководителеПаспортныеДанные" 
		ИЛИ Параметр = "СведенияОБухгалтереПаспортныеДанные" 
		ИЛИ Параметр = "СведенияОУполномоченномПредставителеПаспортныеДанные" Тогда
		
		Результат = РегламентированнаяОтчетность.ПолучитьДокФизЛица(ФизЛицо, Кэш.ДатаЗначения);
		
	ИначеЕсли Параметр = "СведенияОРуководителеАдрес" 
		ИЛИ Параметр = "СведенияОБухгалтереАдрес" 
		ИЛИ Параметр = "СведенияОУполномоченномПредставителеАдрес" Тогда
		
		Данные = Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица);
		Результат = ФизЛицо.КонтактнаяИнформация.НайтиСтроки(Данные);
		
		Если Результат.Количество() > 0 Тогда
			Результат = Результат[0];
		Иначе
			Результат = Неопределено;
		КонецЕсли;
				
	ИначеЕсли Параметр = "СведенияОбИндивидуальномПредпринимателеАдресПрописки" ИЛИ Параметр = "СведенияОбИндивидуальномПредпринимателеАдрес" Тогда
		
		Данные = Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица);
		Результат = ФизЛицо.КонтактнаяИнформация.НайтиСтроки(Данные);
		Если Результат.Количество() > 0 Тогда
			Результат = Результат[0];
		Иначе
			Результат = Неопределено;
		КонецЕсли;
		
	ИначеЕсли Параметр = "СведенияОбИндивидуальномПредпринимателеГражданство" 
		ИЛИ Параметр = "СведенияОРуководителеГражданство" 
		ИЛИ Параметр = "СведенияОБухгалтереГражданство" 
		ИЛИ Параметр = "СведенияОУполномоченномПредставителеГражданство" Тогда
		
		Результат = ПолучитьГражданство(ФизЛицо, Кэш.ДатаЗначения);
	КонецЕсли;
				
	Кэш.Вставить(Параметр, Результат);
	Возврат Результат;
	
КонецФункции

Функция АдресВФормате9Запятых(Запись)
	
	СтруктураАдреса = Новый Структура("Индекс, Регион, Район, Город, НаселенныйПункт, Улица, Дом, Корпус, Квартира, ТипДома, ТипКорпуса, ТипКвартиры");
		
	СтруктураАдресаЗаписи = УправлениеКонтактнойИнформацией.ПредыдущаяСтруктураКонтактнойИнформацииXML(Запись.ЗначенияПолей);
	ЗаполнитьЗначенияСвойств(СтруктураАдреса, СтруктураАдресаЗаписи);
			
	АдресБезКодаСтраны = СокрЛП(СтруктураАдреса.Индекс) + "," + СокрЛП(СтруктураАдреса.Регион) + "," + СокрЛП(СтруктураАдреса.Район) + "," + 
						СокрЛП(СтруктураАдреса.Город) + "," + СокрЛП(СтруктураАдреса.НаселенныйПункт) + "," + СокрЛП(СтруктураАдреса.Улица) + "," + 
						СокрЛП(СтруктураАдреса.Дом) + "," + СокрЛП(СтруктураАдреса.Корпус) + "," + СокрЛП(СтруктураАдреса.Квартира);
						
	Если СтруктураАдреса.Свойство("ТипДома") И СтруктураАдреса.Свойство("ТипКорпуса") И СтруктураАдреса.Свойство("ТипКвартиры") Тогда
							
		АдресБезКодаСтраны = АдресБезКодаСтраны + "," + ?(СокрЛП(СтруктураАдреса.Дом) = "", "", СокрЛП(СтруктураАдреса.ТипДома)) + ","
													  + ?(СокрЛП(СтруктураАдреса.Корпус) = "", "", СокрЛП(СтруктураАдреса.ТипКорпуса)) + ","
													  + ?(СокрЛП(СтруктураАдреса.Квартира) = "", "", СокрЛП(СтруктураАдреса.ТипКвартиры));
													  
	КонецЕсли;												  					

	Если АдресБезКодаСтраны = ",,,,,,,,,,," Тогда
		Возврат ",,,,,,,,,";
	Иначе
		Возврат "643," + АдресБезКодаСтраны;
	КонецЕсли;
	
КонецФункции


Функция ПолучитьГражданство(ФизЛицо, ДатаЗначения) 
	
	Гражд = РегистрыСведений.ГражданствоФизическихЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизическоеЛицо", ФизЛицо));
	
	Если Гражд.Количество() > 0 Тогда
		Возврат Гражд[0].Страна;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции
