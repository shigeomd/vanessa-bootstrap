////////////////////////////////////////////////////////////////////////////////
// Подсистема "Базовая функциональность БРО".
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Для задания обработчиков параметров сеанса следует использовать шаблон:
// Обработчики.Вставить("<ИмяПараметраСеанса>|<НачалоИмениПараметраСеанса*>", "Обработчик");
//
// Примечание. Символ '*'используется в конце имени параметра сеанса и обозначает,
//             что один обработчик будет вызван для инициализации всех параметров сеанса
//             с именем, начинающимся на слово НачалоИмениПараметраСеанса
//
Процедура ОбработчикиИнициализацииПараметровСеанса(Обработчики) Экспорт
	
	// Электронный документооборот с контролирующими органами
	Обработчики.Вставить("ТекущиеУчетныеЗаписиНалогоплательщика", "ДокументооборотСКОВызовСервера.УстановитьПараметрСеансаТекущиеУчетныеЗаписиНалогоплательщика");
	Обработчики.Вставить("ТекущийСеансДокументооборотаСКО", "ДокументооборотСКО.УстановитьПараметрСеансаТекущийСеансДокументооборотаСКО");
	// Конец Электронный документооборот с контролирующими органами
	
	// ЭлектроннаяПодписьВМоделиСервиса
	Обработчики.Вставить("СеансовыеКлючиЭлектроннойПодписиВМоделиСервиса", "ЭлектроннаяПодписьВМоделиСервиса.УстановитьПараметрСеансаСеансовыеКлючиЭлектроннойПодписиВМоделиСервиса");		
	// Конец ЭлектроннаяПодписьВМоделиСервиса
	
	// Электронный документооборот с контролирующими органами
	Обработчики.Вставить("ПараметрыВнешнихРегламентированныхОтчетов", "РегламентированнаяОтчетностьВызовСервера.УстановитьПараметрыВнешнихРегламентированныхОтчетов");
	// Конец Электронный документооборот с контролирующими органами
	
КонецПроцедуры

// Заполняет структуру массивами поддерживаемых версий всех подлежащих версионированию программных интерфейсов,
// используя в качестве ключей имена программных интерфейсов.
// Обеспечивает функциональность Web-сервиса InterfaceVersion.
// При внедрении надо поменять тело процедуры так, чтобы она возвращала актуальные наборы версий (см. пример.ниже).
//
// Параметры:
// СтруктураПоддерживаемыхВерсий - Структура:
//  Ключ - Имя программного интерфейса,
//  Значение - Массив(Строка) - поддерживаемые версии программного интерфейса.
//
// Пример реализации:
//
//  // СервисПередачиФайлов
//  МассивВерсий = Новый Массив;
//  МассивВерсий.Добавить("1.0.1.1");
//  МассивВерсий.Добавить("1.0.2.1"); 
//  СтруктураПоддерживаемыхВерсий.Вставить("СервисПередачиФайлов", МассивВерсий);
//  // Конец СервисПередачиФайлов
//
Процедура ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов(СтруктураПоддерживаемыхВерсий) Экспорт
	
	// ЭлектроннаяПодписьВМоделиСервиса
	ЭлектроннаяПодписьВМоделиСервиса.ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов(СтруктураПоддерживаемыхВерсий);
	// Конец ЭлектроннаяПодписьВМоделиСервиса
	
	// СервисФормированияМЧБсPDF417
	МассивВерсий = Новый Массив;
	МассивВерсий.Добавить("1.0.1.1");
	МассивВерсий.Добавить("1.0.1.2");
	СтруктураПоддерживаемыхВерсий.Вставить("СервисФормированияМЧБсPDF417", МассивВерсий);
	// Конец СервисФормированияМЧБсPDF417
	
КонецПроцедуры

// Возвращает структуру параметров, необходимых для работы клиентского кода
// при запуске конфигурации, т.е. в обработчиках событий
// - ПередНачаломРаботыСистемы,
// - ПриНачалеРаботыСистемы
//
// Важно: при запуске недопустимо использовать команды сброса кэша
// повторно используемых модулей, иначе запуск может привести
// к непредсказуемым ошибкам и лишним серверным вызовам
//
// Параметры:
//   Параметры - Структура - (возвращаемое значение) структура параметров работы клиента при запуске.
//
// Пример реализации:
//   Для установки параметров работы клиента можно использовать шаблон:
//
//     Параметры.Вставить(<ИмяПараметра>, <код получения значения параметра>);
//
//
Процедура ПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	Если ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущемуПользователюЭДОДоступен = ДокументооборотСКОВызовСервера.ТекущемуПользователюЭДОДоступен();
	Параметры.Вставить("ДокументооборотСКонтролирующимиОрганами_ТекущемуПользователюЭДОДоступен", ТекущемуПользователюЭДОДоступен);
	
	ТекущемуПользователюАОДоступен = ДокументооборотСКОВызовСервера.ТекущемуПользователюАОДоступен();
	Параметры.Вставить("ДокументооборотСКонтролирующимиОрганами_ТекущемуПользователюАОДоступен", ТекущемуПользователюАОДоступен);
	
	ВыбранныйCSPИзВременныхНастроек = ДокументооборотСКОВызовСервера.ПолучитьВыбранныйCSPИзВременныхНастроек();
	Параметры.Вставить("ДокументооборотСКонтролирующимиОрганами_ВыбранныйCSPИзВременныхНастроек", ВыбранныйCSPИзВременныхНастроек);
	
	ИспользованиеЭлектроннойПодписиВМоделиСервисаВозможно = Ложь;
	Подсистема = "РегламентированнаяОтчетность.ЭлектронныйДокументооборотСКонтролирующимиОрганами.ЭлектроннаяПодписьВМоделиСервиса";
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует(Подсистема) Тогда
		МодульЭлектроннаяПодписьВМоделиСервисаВызовСервера = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ЭлектроннаяПодписьВМоделиСервисаВызовСервера");
		ИспользованиеЭлектроннойПодписиВМоделиСервисаВозможно = МодульЭлектроннаяПодписьВМоделиСервисаВызовСервера.ИспользованиеВозможно();
	КонецЕсли;
	Параметры.Вставить("ДокументооборотСКонтролирующимиОрганами_ИспользованиеЭлектроннойПодписиВМоделиСервисаВозможно", ИспользованиеЭлектроннойПодписиВМоделиСервисаВозможно);
	
КонецПроцедуры