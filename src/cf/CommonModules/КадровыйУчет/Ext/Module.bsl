////////////////////////////////////////////////////////////////////////////////
// КадровыйУчет: методы кадрового учета, работающие на стороне сервера.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ПолучениеКадровыхДанных

// Возвращает таблицу значений заполненную данными физических лиц, перечисленными в 
// параметре СписокНеобходимыхДанных.
//
// Параметры:
//	ТолькоРазрешенные - Булево
//  СписокФизическихЛиц - Массив ссылок на элементы справочника физические лица или
//						  СправочникСсылка.ФизическиеЛица.
//  КадровыеДанные 	- 	Строка - список полей данных, перечисленных через запятую.
//					-	Массив строк с полями данных,
//						  которые необходимо получить. Ниже приведены идентификаторы 
//						  получаемых данных и описание значения, которое будет возвращено в 
//						  таблице значений.
//
//	ДатаПолученияДанных	- дата на которую необходимо получить данные физических лиц, 
//						  применимо к данным, носящим периодический характер (например - ФИО).
//						  Если дату не указывать, будут получены самые последние данные.
//
//  ПоляОтбораПериодическихДанных - Структура, в качестве ключа указывается имя таблицы, содержащей
//						  периодические данные (например ФИОФизическихЛиц, ГражданствоФизическихЛиц).
//						  В качестве значений коллекция условий отбора, 
//						  соединяемых по "И" и применяемых к регистру сведений.
//						  Коллекция строки которой имеют поля.
//							 * ЛевоеЗначение - строка, имя поля регистра сведений.
//							 * ВидСравнения - строка, вид сравнения, допустимый в языке запросов.
//							 * ПравоеЗначение - значение для сравнения с полем ЛевоеЗначение.
//
//	Список полей, допустимых в параметре КадровыеДанные см. КадровыйУчетВнутренний.ЗапросВТКадровыеДанныеФизическихЛиц.
//
// Возвращаемое значение:
//   ТаблицаЗначений   - Таблица значений, содержащая обязательные поля ФизическоеЛицо, Период поля запрошенных
//						 кадровых данных.
//
Функция КадровыеДанныеФизическихЛиц(ТолькоРазрешенные, СписокФизическихЛиц, КадровыеДанные, ДатаПолученияДанных = '00010101', ПоляОтбораПериодическихДанных = Неопределено) Экспорт
	
	Если ТипЗнч(КадровыеДанные) = Тип("Строка") Тогда
		// Преобразуем параметр КадровыеДанные из строки в массив идентификаторов.
		МассивНеобходимыхДанных = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрЗаменить(КадровыеДанные, " ",""), ",");
	Иначе
		МассивНеобходимыхДанных = КадровыеДанные;
	КонецЕсли; 
	
	// Подготовим Запрос и Менеджер временных таблиц.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Сформируем временную таблицу ВТКадровыеДанныеФизическихЛиц.
	СоздатьНаДатуВТКадровыеДанныеФизическихЛиц(Запрос.МенеджерВременныхТаблиц, ТолькоРазрешенные, СписокФизическихЛиц, КадровыеДанные, ДатаПолученияДанных, ПоляОтбораПериодическихДанных);
	
	// Выберем кадровые данные физлиц из временной таблицы.
	Запрос.Текст = "ВЫБРАТЬ КадровыеДанныеФизическихЛиц.* ИЗ ВТКадровыеДанныеФизическихЛиц КАК КадровыеДанныеФизическихЛиц";
	КадровыеДанныеФизическихЛиц = Запрос.Выполнить().Выгрузить();
	
	Возврат КадровыеДанныеФизическихЛиц;
	
КонецФункции

// Возвращает таблицу значений заполненную данными сотрудников, перечисленными в 
// параметре СписокНеобходимыхДанных.
//
// Параметры:
//	ТолькоРазрешенные - Булево
//  СписокСотрудников - Массив ссылок на элементы справочника сотрудники или
//						  СправочникСсылка.Сотрудники.
//  КадровыеДанные - 	Строка - список полей данных, перечисленных через запятую 
//						или Массив строк с полями данных,
//						которые необходимо получить. Ниже приведены идентификаторы 
//						получаемых данных и описание значения, которое будет возвращено в 
//						таблице значений
//						которые необходимо получить. Ниже приведены идентификаторы 
//						получаемых данных и описание значения, которое будет возвращено в 
//						таблице значений.
//
//	ДатаПолученияДанных	- дата на которую необходимо получить данные сотрудников, 
//						применимо к данным, носящим периодический характер.
//						Если дату не указывать, будут получены самые последние данные.
//
//
//  ПоляОтбораПериодическихДанных - Структура, в качестве ключа указывается имя таблицы, содержащей
//									периодические данные (например ФИОФизическихЛиц, ГражданствоФизическихЛиц).
//									В качестве значений коллекция условий отбора, 
//									соединяемых по "И" и применяемых к регистру сведений.
//									Коллекция строки которой имеют поля.
//										* ЛевоеЗначение - строка, имя поля регистра сведений.
//										* ВидСравнения - строка, вид сравнения, допустимый в языке запросов.
//										* ПравоеЗначение - значение для сравнения с полем ЛевоеЗначение.
//
//	Список полей, допустимых в параметре КадровыеДанные см. КадровыйУчетВнутренний.ЗапросВТКадровыеДанныеСотрудников.
//
// Возвращаемое значение:
//   ТаблицаЗначений   - Таблица значений, содержащая запрошенные данные.
//
Функция КадровыеДанныеСотрудников(ТолькоРазрешенные, СписокСотрудников, КадровыеДанные, ДатаПолученияДанных = '00010101', ПоляОтбораПериодическихДанных = Неопределено, ФормироватьСПериодичностьДень = Истина) Экспорт
	
	Если ТипЗнч(КадровыеДанные) = Тип("Строка") Тогда
		// Преобразуем параметр КадровыеДанные из строки в массив идентификаторов.
		МассивНеобходимыхДанных = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрЗаменить(КадровыеДанные, " ",""), ",");
	Иначе
		МассивНеобходимыхДанных = КадровыеДанные;
	КонецЕсли; 
	
	// Подготовим Запрос и Менеджер временных таблиц.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Сформируем временную таблицу ВТКадровыеДанныеФизическихЛиц.
	СоздатьНаДатуВТКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, ТолькоРазрешенные, СписокСотрудников, МассивНеобходимыхДанных, ДатаПолученияДанных, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень);
	
	// Выберем кадровые данные физлиц из временной таблицы.
	Запрос.Текст = "ВЫБРАТЬ КадровыеДанныеСотрудников.* ИЗ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников";
	КадровыеДанныеСотрудников = Запрос.Выполнить().Выгрузить();
	
	Возврат КадровыеДанныеСотрудников;
	
КонецФункции

// Возвращает таблицу значений заполненную физическими лицами, работавшими в организации в
// заданном периоде.
//
// Параметры:
//	ТолькоРазрешенные - Булево
//  Организация - СправочникСсылка.Организации - организация по которой необходимо отобрать работавших
//				  в ней физических лиц.
//	НачалоПериода 		- Дата
//	ОкончаниеПериода 	- Дата
//  Подразделение - СправочникСсылка.ПодразделенияОрганизаций - подразделение, по которому необходимо отобрать
//					работавших физических лиц. Если подразделение не указывать - будут отобраны физические
//					лица по всей организации.
//
// Возвращаемое значение:
//   ТаблицаЗначений   - Таблица значений, содержащая поля Период (Дата, соответствует указанному параметру
//                       ОкончаниеПериода) и ФизическоеЛицо.
//
Функция ФизическиеЛицаРаботавшиеВОрганизации(ТолькоРазрешенные, Организация, НачалоПериода, ОкончаниеПериода, Подразделение = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Сформируем временную таблицу ВТФизическиеЛицаРаботавшиеВОрганизации.
	СоздатьВТФизическиеЛицаРаботавшиеВОрганизации(Запрос.МенеджерВременныхТаблиц, ТолькоРазрешенные, Организация, НачалоПериода, ОкончаниеПериода, Подразделение);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ФизическиеЛицаРаботавшиеВОрганизации.* ИЗ ВТФизическиеЛицаРаботавшиеВОрганизации КАК ФизическиеЛицаРаботавшиеВОрганизации";
	
	ФизическиеЛицаРаботавшиеВОрганизации = Запрос.Выполнить().Выгрузить();
	
	Возврат ФизическиеЛицаРаботавшиеВОрганизации;
	
КонецФункции

// Возвращает таблицу значений заполненную данными документов физических лиц.
//
// Параметры:
//  СписокФизическихЛиц - Массив ссылок на элементы справочника физические лица или
//						  СправочникСсылка.ФизическиеЛица.
//	ТолькоРазрешенные - Булево
//  ВидДокумента		- СправочникСсылка.ВидыДокументовФизическихЛиц, вид необходимого 
//						  документа.
//	ДатаПолученияДанных	- дата на которую необходимо получить данные документов физических лиц, 
//						если дату не указывать, данные будут получены на текущую дату.
//
// Возвращаемое значение:
//   ТаблицаЗначений   - Таблица значений, содержащая поля.
//						Период - Дата
//						ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
//						ВидДокумента - СправочникСсылка.ВидыДокументовФизическихЛиц
//						Серия - Строка
//						Номер - Строка 
//						ДатаВыдачи - Дата
//						КемВыдан Строка
//						КодПодразделения - Строка
//						ЯвляетсяДокументомУдостоверяющимЛичность - Булево
//						Представление - Строка
//
Функция ДокументыФизическихЛиц(СписокФизическихЛиц, ТолькоРазрешенные, ВидДокумента, ДатаПолученияДанных = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДатаПолученияДанных", ?(ДатаПолученияДанных = Неопределено, ТекущаяДатаСеанса(),ДатаПолученияДанных));
	Запрос.УстановитьПараметр("СписокФизическихЛиц", СписокФизическихЛиц);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	&ДатаПолученияДанных КАК Период,
	|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТФизическихЛица
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.Ссылка В(&СписокФизическихЛиц)";
	
	Если НЕ ТолькоРазрешенные Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ");
	КонецЕсли;
	
	Запрос.Выполнить();
	
	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ИзмеренияДаты.Добавить().Период = ?(ДатаПолученияДанных = Неопределено, ТекущаяДатаСеанса(), ДатаПолученияДанных);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Физлицо", " В ", СписокФизическихЛиц);
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "ВидДокумента", " = ", ВидДокумента);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ДокументыФизическихЛиц",
		Запрос.МенеджерВременныхТаблиц,
		ТолькоРазрешенные,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты),
		ПараметрыПостроения,
		"ВТУдостоверенияЛичности");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ФизическихЛица.Период,
	|	ФизическихЛица.ФизическоеЛицо,
	|	ЕСТЬNULL(ДокументыФизическихЛиц.ВидДокумента, ЗНАЧЕНИЕ(Справочник.ВидыДокументовФизическихЛиц.ПустаяСсылка)) КАК ВидДокумента,
	|	ЕСТЬNULL(ДокументыФизическихЛиц.Серия, """") КАК Серия,
	|	ЕСТЬNULL(ДокументыФизическихЛиц.Номер, """") КАК Номер,
	|	ЕСТЬNULL(ДокументыФизическихЛиц.ДатаВыдачи, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаВыдачи,
	|	ЕСТЬNULL(ДокументыФизическихЛиц.СрокДействия, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК СрокДействия,
	|	ЕСТЬNULL(ДокументыФизическихЛиц.КемВыдан, """") КАК КемВыдан,
	|	ЕСТЬNULL(ДокументыФизическихЛиц.КодПодразделения, """") КАК КодПодразделения,
	|	ЕСТЬNULL(ДокументыФизическихЛиц.ЯвляетсяДокументомУдостоверяющимЛичность, НЕОПРЕДЕЛЕНО) КАК ЯвляетсяДокументомУдостоверяющимЛичность,
	|	ЕСТЬNULL(ДокументыФизическихЛиц.Представление, """") КАК Представление
	|ИЗ
	|	ВТФизическихЛица КАК ФизическихЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУдостоверенияЛичности КАК ДокументыФизическихЛиц
	|		ПО ФизическихЛица.ФизическоеЛицо = ДокументыФизическихЛиц.Физлицо";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает структуру параметров для СоздатьВТСотрудникиОрганизаций.
//
// Возвращаемое значение:
//   Структура - Содержит ключи:
//				Организация - СправочникСсылка.Организации, если параметр опустить в таблицу войдут все сотрудник
//					независимо от организации.
//				ОтбиратьПоГоловнойОрганизации - если Истина, то отбор по головной организации, иначе по текущей организации.
//					По умолчанию - ЛОЖЬ
//				Подразделение - СправочникСсылка.ПодразделенияОрганизаций, в таблицу войдут сотрудники указанного подразделения
//					и всех подразделений, подчиненных указанному, если параметр опустить в таблицу войдут все сотрудники.
//				СписокФизическихЛиц - Массив ссылок на элементы справочника ФизическиеЛица, если параметр опустить,
//					в таблицу войдут сотрудники всех физических лиц когда либо работавших в Организации.
//				НачалоПериода - Дата, значение по умолчанию '00010101'. Если параметр устанавливается, параметр ОкончаниеПериода
//					обязателен к заполнению.
//				ОкончаниеПериода - Дата, значение по умолчанию '00010101'. При установке должно выполняться условие
//					ОкончаниеПериода >= НачалоПериода. Используется для выборки кадровых данных сотрудников, если
//					параметр не указан, выборка будет производиться на текущую дату сеанса.
//				КадровыеДанные - Строка, содержит список полей кадровых данных, см. описание к функции КадровыеДанныеСотрудников.
//
Функция ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц() Экспорт
	
	Возврат КадровыйУчетВнутренний.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	
КонецФункции

// Возвращает структуру параметров для СоздатьВТСотрудникиОрганизаций.
//
// Возвращаемое значение:
//   Структура - Содержит ключи:
//				Организация - СправочникСсылка.Организации, если параметр опустить в таблицу войдут все сотрудник
//					независимо от организации.
//				ОтбиратьПоГоловнойОрганизации - если Истина, то отбор по головной организации, иначе по текущей организации.
//					По умолчанию - ЛОЖЬ
//				Подразделение - СправочникСсылка.ПодразделенияОрганизаций, в таблицу войдут сотрудники указанного подразделения
//					и всех подразделений, подчиненных указанному, если параметр опустить в таблицу войдут все сотрудники.
//				ИмяВТФизическиеЛица - Строка, имя временной таблицы, содержащей физические лица (по умолчанию "ВТФизическиеЛица").
//				ИмяПоляФизическоеЛицо - Строка, имя поля - Физическое лицо (по умолчанию "ФизическоеЛицо").
//				НачалоПериода - Дата, значение по умолчанию '00010101'. Если параметр устанавливается, параметр ОкончаниеПериода
//					обязателен к заполнению.
//				ОкончаниеПериода - Дата, значение по умолчанию '00010101'. При установке должно выполняться условие
//					ОкончаниеПериода >= НачалоПериода. Используется для выборки кадровых данных сотрудников, если
//					параметр не указан, выборка будет производиться на текущую дату сеанса.
//				КадровыеДанные - Строка, содержит список полей кадровых данных, см. описание к функции КадровыеДанныеСотрудников.
//
Функция ПараметрыПолученияСотрудниковОрганизацийПоВременнойТаблице() Экспорт
		
	Возврат КадровыйУчетВнутренний.ПараметрыПолученияСотрудниковОрганизацийПоВременнойТаблице();
	
КонецФункции

// Возвращает таблицу значений, заполненную сотрудниками.
//
// Параметры:
//	ТолькоРазрешенные - Булево
//	Параметры - Структура, подготовленная с помощью методов
//	            ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц,
//	            ПараметрыПолученияСотрудниковОрганизацийПоВременнойТаблице
//
// Возвращаемое значение:
//   ТаблицаЗначений   - Таблица значений, содержащая поля Период (Дата, соответствует указанному параметру
//                       ОкончаниеПериода),
//						 Сотрудник, соответствующее сотруднику ФизическоеЛицо, и кадровые данные, указанные в ключе КадровыеДанные
//						 параметра Параметры.
//
Функция СотрудникиОрганизации(ТолькоРазрешенные, Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры);
	
	Запрос.Текст = 
	"ВЫБРАТЬ СотрудникиОрганизации.* ИЗ ВТСотрудникиОрганизации КАК СотрудникиОрганизации";
	
	СотрудникиОрганизации = Запрос.Выполнить().Выгрузить();
	
	Возврат СотрудникиОрганизации;
	
КонецФункции

// Возвращает таблицу значений содержащую поля ФизическоеЛицо и Сотрудник. Сотрудник отбирается по принципам:
//		- Работает на указанный период.
//		- Выбирается сотрудник, работающий по основному месту работы, если такового не существует, выбирается
//			сотрудник, работающий по совместительству, принятый на наиболее раннюю дату.
//
// Параметры:
//			СписокФизическихЛиц - Массив ссылок на элементы справочника ФизическиеЛица или 
//				СправочникСсылка.ФизическиеЛица, если параметр опустить, в таблицу войдут
//				основные сотрудники всех физических лиц когда либо работавших в организации.
//			ТолькоРазрешенные - Булево
//			Организация - СправочникСсылка.Организации
//			Период - Дата
//
//
// Возвращаемое значение:
//   ТаблицаЗначений   - Таблица значений, содержащая поля Сотрудник и соответствующее сотруднику ФизическоеЛицо.
//
Функция ОсновныеСотрудникиФизическихЛиц(СписокФизическихЛиц, ТолькоРазрешенные, Организация, Период) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТОсновныеСотрудникиФизическихЛиц(Запрос.МенеджерВременныхТаблиц, ТолькоРазрешенные, СписокФизическихЛиц, Организация, Период);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ОсновныеСотрудникиФизическихЛиц.* ИЗ ВТОсновныеСотрудникиФизическихЛиц КАК ОсновныеСотрудникиФизическихЛиц";
	
	ОсновныеСотрудникиФизическихЛиц = Запрос.Выполнить().Выгрузить();
	
	Возврат ОсновныеСотрудникиФизическихЛиц;
	
КонецФункции

// Заполняет кадровые движения документа
//		КадроваяИсторияСотрудников
//		ЗанятыеПозицииШтатногоРасписания.
//
// Параметры:
//  РегистраторОбъект
//	Движения - коллекция движений, в которой необходимо заполнить кадровые движения.
//	КадровыеДвижения - таблица значений с полями:
//		ДатаСобытия
//		ВидСобытия - Перечисление.ВидыКадровыхСобытий
//		Сотрудник
//		ГоловнаяОрганизация
//		Организация
//		Подразделение
//		Должность
//		ВидЗанятости
// 		
Процедура СформироватьКадровыеДвижения(РегистраторОбъект, Движения, КадровыеДвижения) Экспорт
	
	КадровыйУчетВнутренний.СформироватьКадровыеДвижения(РегистраторОбъект, Движения, КадровыеДвижения);
	
КонецПроцедуры

// Функция возвращает ссылку на физическое лицо, найденное по переданным фамилии, имени, отчеству СНИЛС и организации 
// (см. функцию ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ФизЛицоПоФИО).
//
// Параметры:
//  Фамилия		- Строка - Фамилия физического лица.
//  Имя			- Строка - Имя физического лица.
//  Отчество	- Строка - Отчество физического лица.
//  СНИЛС		- Строка - СНИЛС физического лица.
//  Организация - СправочникиСсылка.Организации - организация, в которой работает физическое лицо.
//
// Возвращаемое значение:
//   СправочникиСсылка.ФизическиеЛица
//
Функция ФизическоеЛицоПоФИОСНИЛСИОрганизации(Фамилия, Имя, Отчество, СНИЛС, Организация) Экспорт
	
	ВозвращаемоеЗначение = Справочники.ФизическиеЛица.ПустаяСсылка();
	
	СписокФизическихЛиц = ФизическиеЛицаЗарплатаКадры.ФизическиеЛицаПоФИОИСНИЛС(Фамилия, Имя, Отчество, СНИЛС);
	
	Если СписокФизическихЛиц.Количество() > 0 Тогда
		
		Параметры = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		Параметры.Организация = Организация;
		Параметры.ОкончаниеПериода = ТекущаяДатаСеанса();
		Параметры.СписокФизическихЛиц = СписокФизическихЛиц;
		
		СотрудникиФизическихЛиц = КадровыйУчет.СотрудникиОрганизации(Истина, Параметры);
		Если СотрудникиФизическихЛиц.Количество() > 0 Тогда
			ВозвращаемоеЗначение = СотрудникиФизическихЛиц[0].ФизическоеЛицо;
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение; 
	
КонецФункции

// Возвращает таблицу значений в строках которой содержится информация о периодах
// изменения (регистрации) фамилии, имени и отчества физических лиц.
//
// Параметры:
//		СписокФизическихЛиц - Массив, ссылок справочника ФизическиеЛица
//							- СправочникСсылка.ФизическиеЛица
//
// Возвращаемое значение:
//		ТаблицаЗначений - содержит колонки:
//			* Период			- Дата
//			* ФизическоеЛицо	- СправочникСсылка.ФизическиеЛица
//			* Фамилия			- Строка
//			* Имя				- Строка
//			* Отчество			- Строка
//
Функция ПериодыИзмененияФИОФизическихЛиц(СписокФизическихЛиц) Экспорт
	
	Если ТипЗнч(СписокФизическихЛиц) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ФизическиеЛица = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СписокФизическихЛиц);
	Иначе
		ФизическиеЛица = СписокФизическихЛиц;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("СписокФизическихЛиц", ФизическиеЛица);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачала,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОкончания,
		|	ФизическиеЛица.Ссылка
		|ПОМЕСТИТЬ ВТОтборФизическихЛиц
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Ссылка В(&СписокФизическихЛиц)";
		
	Запрос.Выполнить();
	
	ОписательВТ = ОписательВременныхТаблицДляСоздатьВТИсторияИзмененияФИОФизическихЛиц(
		Запрос.МенеджерВременныхТаблиц,
		"ВТОтборФизическихЛиц",
		"Ссылка");
	
	РезультатЗапроса = СоздатьВТИсторияИзмененияФИОФизическихЛиц(Истина, ОписательВТ, "");
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

// Возвращает объект справочника ФизическиеЛица, созданный по переданным фамилии,
// имени, отчеству и другим данным (см. параметр ДанныеФизическогоЛица)
//
// Параметры:
//		ФИО						- Строка, содержит фамилию, имя и отчество
//								- Структура с ключами:
//									* Фамилия	- Строка
//									* Имя		- Строка
//									* Отчество	- Строка
//		ДанныеФизическогоЛица	- Структура, содержащая ключи одноименные реквизитам (включая стандартные)
//									справочника ФизическиеЛица, за исключением реквизитов:
//									Наименование, ФИО, УточнениеНаименования
//		ПериодДанных			- Дата, дата на которую будет зарегистрирована запись о ФИО
//
// Возвращаемое значение:
//		СправочникОбъект.ФизическиеЛица
//
Функция НовоеФизическоеЛицо(Знач ФИО, Знач ДанныеФизическогоЛица = Неопределено, Знач ПериодДанных = Неопределено) Экспорт
	
	Если ТипЗнч(ФИО) = Тип("Строка") Тогда
		ФамилияИмяОтчество = ФизическиеЛицаКлиентСервер.ФамилияИмяОтчество(ФИО);
	Иначе
		ФамилияИмяОтчество = Новый Структура("Фамилия,Имя,Отчество");
		ЗаполнитьЗначенияСвойств(ФамилияИмяОтчество, ФИО);
	КонецЕсли;
	
	УточнениеНаименования = "";
	Если ДанныеФизическогоЛица <> Неопределено
		И ДанныеФизическогоЛица.Свойство("УточнениеНаименования")
		И ЗначениеЗаполнено(ДанныеФизическогоЛица.УточнениеНаименования) Тогда

		УточнениеНаименования = ДанныеФизическогоЛица.УточнениеНаименования;
		
	КонецЕсли;
	
	Наименование = КадровыйУчетКлиентСервер.ПолноеНаименованиеСотрудника(
		ФамилияИмяОтчество.Фамилия, ФамилияИмяОтчество.Имя, ФамилияИмяОтчество.Отчество, УточнениеНаименования);
		
	ФизическоеЛицоОбъект = Справочники.ФизическиеЛица.СоздатьЭлемент();
	
	ФизическоеЛицоОбъект.Наименование = Наименование;
	ФизическоеЛицоОбъект.УточнениеНаименования = УточнениеНаименования;
	
	ФизическоеЛицоОбъект.ФИО = ФамилияИмяОтчество.Фамилия + " " + ФамилияИмяОтчество.Имя + " " + ФамилияИмяОтчество.Отчество;
	
	Если ДанныеФизическогоЛица <> Неопределено Тогда
		
		ИсключаемыеСвойства = "";
		Если ДанныеФизическогоЛица.Свойство("Наименование") Тогда
			ИсключаемыеСвойства = "Наименование";
		КонецЕсли; 
		
		Если ДанныеФизическогоЛица.Свойство("ФИО")Тогда
			ИсключаемыеСвойства = ?(ПустаяСтрока(ИсключаемыеСвойства), "", ИсключаемыеСвойства + ",") + "ФИО";
		КонецЕсли; 
		
		Если ДанныеФизическогоЛица.Свойство("УточнениеНаименования")Тогда
			ИсключаемыеСвойства = ?(ПустаяСтрока(ИсключаемыеСвойства), "", ИсключаемыеСвойства + ",") + "УточнениеНаименования";
		КонецЕсли; 
		
		ЗаполнитьЗначенияСвойств(ФизическоеЛицоОбъект, ДанныеФизическогоЛица, , ИсключаемыеСвойства);
		
	КонецЕсли;
	
	ФизическоеЛицоОбъект.Записать();
	
	Если Не ПустаяСтрока(Наименование) Тогда
		
		Набор = РегистрыСведений.ФИОФизическихЛиц.СоздатьНаборЗаписей();
		Набор.Отбор.ФизическоеЛицо.Установить(ФизическоеЛицоОбъект.Ссылка);
			
		Запись = Набор.Добавить();
		Запись.Фамилия 	= ФамилияИмяОтчество.Фамилия;
		Запись.Имя	 	= ФамилияИмяОтчество.Имя;
		Запись.Отчество = ФамилияИмяОтчество.Отчество;
		Запись.ФизическоеЛицо = ФизическоеЛицоОбъект.Ссылка;
		
		Если ПериодДанных = Неопределено Тогда
			Запись.Период = ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведений();
		Иначе
			Запись.Период = ПериодДанных;
		КонецЕсли;
		
		Набор.Записать();
		
	КонецЕсли; 
	
	Возврат ФизическоеЛицоОбъект;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает настроенную структуру параметров для СоздатьВТСотрудникиОрганизаций
// для получения всех возможных рабочих мест. см. функцию ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц.
//
Функция ПараметрыПолученияРабочихМестВОрганизацийПоСпискуФизическихЛиц() Экспорт
	
	Возврат КадровыйУчетВнутренний.ПараметрыПолученияРабочихМестВОрганизацийПоСпискуФизическихЛиц();
	
КонецФункции

// Возвращает настроенную структуру параметров для СоздатьВТСотрудникиОрганизаций
// для получения всех возможных рабочих мест. см. функцию ПараметрыПолученияСотрудниковОрганизацийПоВременнойТаблице.
//
Функция ПараметрыПолученияРабочихМестВОрганизацийПоВременнойТаблице() Экспорт
	
	Возврат КадровыйУчетВнутренний.ПараметрыПолученияРабочихМестВОрганизацийПоВременнойТаблице();
	
КонецФункции

// Выводит сообщения пользователю по физическим лицам, которые не работают в указанный период.
// Вызывается из документов в обработчике ОбработкаПроверкиЗаполнения.
//
// Параметры:
//		СписокФизическихЛиц							- Массив ссылок на элементы справочника ФизическиеЛица или СправочникСсылка.ФизическиеЛица.
//		ПараметрыПолученияСотрудниковОрганизаций 	- Структура, см. функцию ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц
//		Отказ										- Булево - Если установить данному параметру значение Истина, то будет выполнен отказ от
//														продолжения работы после выполнения проверки заполнения.
//		ПараметрыСообщения							- Структура
//														* ИмяПоляСотрудник - Строка - наименование реквизита формы.
//														* ИмяОбъекта - Строка - путь к данным (путь к реквизиту формы).
//
Процедура ПроверитьРаботающихФизическихЛиц(СписокФизическихЛиц, ПараметрыПолученияСотрудниковОрганизаций, Отказ, ПараметрыСообщения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СписокФизическихЛиц", СписокФизическихЛиц);
	
	ПараметрыПолученияСотрудниковОрганизаций.СписокФизическихЛиц = СписокФизическихЛиц;
	СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудниковОрганизаций);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	|		ПО (ФизическиеЛица.Ссылка = ВЫРАЗИТЬ(СотрудникиОрганизации.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо)
	|ГДЕ
	|	ФизическиеЛица.Ссылка В(&СписокФизическихЛиц)
	|	И СотрудникиОрганизации.Сотрудник ЕСТЬ NULL ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		НачалоПериода = ПараметрыПолученияСотрудниковОрганизаций.НачалоПериода;
		ОкончаниеПериода = ПараметрыПолученияСотрудниковОрганизаций.ОкончаниеПериода;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если НачалоПериода = ОкончаниеПериода Или (ЗначениеЗаполнено(НачалоПериода) И Не ЗначениеЗаполнено(ОкончаниеПериода)) Тогда
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Сотрудник %1 не работает в организации на дату %2г.'"), Выборка.ФизическоеЛицо, Формат(НачалоПериода, "ДЛФ=Д"));
					
			Иначе
					
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Сотрудник %1 не работает в организации за период с %2г. по %3г.'"), Выборка.ФизическоеЛицо, Формат(НачалоПериода, "ДЛФ=Д"), Формат(ОкончаниеПериода, "ДЛФ=Д"));
					
			КонецЕсли;
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , ПараметрыСообщения.ИмяПоляСотрудник, ПараметрыСообщения.ИмяОбъекта, Отказ);
			
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры

// Выводит сообщения пользователю по сотрудникам, которые не работают в указанный период.
// Вызывается из документов в обработчике ОбработкаПроверкиЗаполнения.
//
// Параметры:
//		СписокСотрудников							- Массив ссылок на элементы справочника Сотрудники или СправочникСсылка.Сотрудники.
//		ПараметрыПолученияСотрудниковОрганизаций 	- Структура, см. функцию ПараметрыПолученияСотрудниковОрганизацийПоВременнойТаблице
//		Отказ										- Булево - Если установить данному параметру значение Истина, то будет выполнен
//														отказ от продолжения работы после выполнения проверки заполнения.
//		ПараметрыСообщения 							- Структура
//														* ИмяПоляСотрудник - Строка - наименование реквизита формы.
//														* ИмяОбъекта - Строка - путь к данным (путь к реквизиту формы).
//
Процедура ПроверитьРаботающихСотрудников(СписокСотрудников, ПараметрыПолученияСотрудниковОрганизаций, Отказ, ПараметрыСообщения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СписокСотрудников", СписокСотрудников);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Сотрудники.Ссылка КАК Сотрудник,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТФизическиеЛица
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&СписокСотрудников)";
	
	Запрос.Выполнить();
	
	СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудниковОрганизаций);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ФизическиеЛица.Сотрудник КАК Сотрудник
	|ИЗ
	|	ВТФизическиеЛица КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	|		ПО ФизическиеЛица.Сотрудник = СотрудникиОрганизации.Сотрудник
	|ГДЕ
	|	СотрудникиОрганизации.Сотрудник ЕСТЬ NULL ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		НачалоПериода = ПараметрыПолученияСотрудниковОрганизаций.НачалоПериода;
		ОкончаниеПериода = ПараметрыПолученияСотрудниковОрганизаций.ОкончаниеПериода;
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если НачалоПериода = ОкончаниеПериода Или (ЗначениеЗаполнено(НачалоПериода) И Не ЗначениеЗаполнено(ОкончаниеПериода)) Тогда
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Сотрудник %1 не работает в организации на дату %2г.'"), Выборка.Сотрудник, Формат(НачалоПериода, "ДЛФ=Д"));
					
			Иначе
					
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Сотрудник %1 не работает в организации за период с %2г. по %3г.'"), Выборка.Сотрудник, Формат(НачалоПериода, "ДЛФ=Д"), Формат(ОкончаниеПериода, "ДЛФ=Д"));
					
			КонецЕсли;
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , ПараметрыСообщения.ИмяПоляСотрудник, ПараметрыСообщения.ИмяОбъекта, Отказ);
			
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьВозможностьПроведенияПоКадровомуУчету(ДатаСобытия, Сотрудники, ИсключаемыеСсылки, Отказ, ВидСобытия = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИзмеренияДаты.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ИзмеренияДаты.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	
	Если ТипЗнч(Сотрудники) = Тип("СправочникСсылка.Сотрудники") Тогда
		НоваяСтрокаИзмеренияДаты  = ИзмеренияДаты.Добавить();
		НоваяСтрокаИзмеренияДаты.Сотрудник = Сотрудники;
	Иначе
		Для каждого Сотрудник Из Сотрудники Цикл
			НоваяСтрокаИзмеренияДаты  = ИзмеренияДаты.Добавить();
			НоваяСтрокаИзмеренияДаты.Сотрудник = Сотрудник;
		КонецЦикла;
	КонецЕсли;
	
	Если ТипЗнч(ИсключаемыеСсылки) <> Тип("Массив") Тогда
		ИсключаемыеСсылкиМассив = Новый Массив;
		ИсключаемыеСсылкиМассив.Добавить(ИсключаемыеСсылки);
	Иначе
		ИсключаемыеСсылкиМассив = ИсключаемыеСсылки;
	КонецЕсли;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "НЕ В", ИсключаемыеСсылкиМассив);

	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"КадроваяИсторияСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ОписаниеФильтра,
		ПараметрыПостроения);
		
	Запрос.УстановитьПараметр("ДатаСобытия", ДатаСобытия);
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("ВидСобытия", ВидСобытия);
	
	// Проверка на уникальность событий Прием и Увольнение.
		
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КадроваяИсторияСотрудников.Регистратор,
		|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
		|	КадроваяИсторияСотрудников.Период,
		|	КадроваяИсторияСотрудников.ВидСобытия
		|ИЗ
		|	ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|ГДЕ
		|	КадроваяИсторияСотрудников.ВидСобытия = &ВидСобытия
		|	И &ВидСобытия В (ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием), ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник
		|АВТОУПОРЯДОЧИВАНИЕ";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ТекстСообщенияПользователю = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='По сотруднику %1, уже зарегистрировано событие ""%2"" (%3), документ противоречит кадровому приказу %4'"),
				Выборка.Сотрудник,
				Выборка.ВидСобытия,
				Формат(Выборка.Период, "ДЛФ=D"),
				Выборка.Регистратор);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщенияПользователю,
					Выборка.Регистратор,
					,
					,
					Отказ);
					
		КонецЦикла;
				
		Возврат;		
		
	КонецЕсли; 
	
	// Проверка корректности заданного периода Период, должен быть более даты приема,
	// а для событий кадрового перевода менее даты увольнения.
	
	Если ВидСобытия = Перечисления.ВидыКадровыхСобытий.Перемещение
		ИЛИ ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
			|	КадроваяИсторияСотрудников.Период КАК Период,
			|	КадроваяИсторияСотрудников.Регистратор КАК Регистратор
			|ПОМЕСТИТЬ ВТДатыПриема
			|ИЗ
			|	ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
			|ГДЕ
			|	КадроваяИсторияСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
			|	КадроваяИсторияСотрудников.Период КАК Период,
			|	КадроваяИсторияСотрудников.Регистратор КАК Регистратор
			|ПОМЕСТИТЬ ВТДатыУвольнения
			|ИЗ
			|	ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
			|ГДЕ
			|	КадроваяИсторияСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЕСТЬNULL(ДатыПриема.Сотрудник, ДатыУвольнения.Сотрудник) КАК Сотрудник,
			|	ЕСТЬNULL(ДатыПриема.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПриема,
			|	ЕСТЬNULL(ДатыПриема.Регистратор, ЗНАЧЕНИЕ(Документ.ПриемНаРаботу.ПустаяСсылка)) КАК ПриказОПриеме,
			|	ЕСТЬNULL(ДатыУвольнения.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаУвольнения,
			|	ЕСТЬNULL(ДатыУвольнения.Регистратор, ЗНАЧЕНИЕ(Документ.Увольнение.ПустаяСсылка)) КАК ПриказОбУвольнении
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыПриема КАК ДатыПриема
			|		ПО Сотрудники.Ссылка = ДатыПриема.Сотрудник
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыУвольнения КАК ДатыУвольнения
			|		ПО Сотрудники.Ссылка = ДатыУвольнения.Сотрудник
			|ГДЕ
			|	Сотрудники.Ссылка В(&Сотрудники)";

		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				ТекстСообщенияПользователю = "";
				ДокументПриказ = Неопределено;
				
				Если Выборка.ДатаПриема > ДатаСобытия Тогда
					
					ТекстСообщенияПользователю = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='По сотруднику %1, невозможно зарегистрировать событие ""%2"" ранее, чем дата приема на работу (%3 - %4)'"),
						Выборка.Сотрудник,
						ВидСобытия,
						Формат(Выборка.ДатаПриема, "ДЛФ=D"),
						Выборка.ПриказОПриеме);
					
					ДокументПриказ = Выборка.ПриказОПриеме;
					
				ИначеЕсли Выборка.ДатаУвольнения < ДатаСобытия И ЗначениеЗаполнено(Выборка.ДатаУвольнения) Тогда
					
					ТекстСообщенияПользователю = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='По сотруднику %1, невозможно зарегистрировать событие ""%2"" позднее, чем дата увольнения (%3 - %4)'"),
						Выборка.Сотрудник,
						ВидСобытия,
						Формат(Выборка.ДатаУвольнения, "ДЛФ=D"),
						Выборка.ПриказОбУвольнении);
						
					ДокументПриказ = Выборка.ПриказОбУвольнении;
					
				КонецЕсли;
				
				Если НЕ ПустаяСтрока(ТекстСообщенияПользователю) Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщенияПользователю,
						ДокументПриказ,
						,
						,
						Отказ);
				КонецЕсли; 
						
			КонецЦикла;
			
			Возврат;

		КонецЕсли; 
		
	КонецЕсли;
	
	// Проверка того, что прием на работу самое первое событие.
		
	Если ВидСобытия = Перечисления.ВидыКадровыхСобытий.Прием Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
			|	МИНИМУМ(КадроваяИсторияСотрудников.Период) КАК Период
			|ПОМЕСТИТЬ ВТРанниеПериоды
			|ИЗ
			|	ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
			|
			|СГРУППИРОВАТЬ ПО
			|	КадроваяИсторияСотрудников.Сотрудник
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
			|	КадроваяИсторияСотрудников.Период КАК Период,
			|	КадроваяИсторияСотрудников.ВидСобытия КАК ВидСобытия,
			|	КадроваяИсторияСотрудников.Регистратор КАК Регистратор
			|ИЗ
			|	ВТРанниеПериоды КАК РанниеПериоды
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
			|		ПО РанниеПериоды.Сотрудник = КадроваяИсторияСотрудников.Сотрудник
			|			И РанниеПериоды.Период = КадроваяИсторияСотрудников.Период
			|ГДЕ
			|	РанниеПериоды.Период < &ДатаСобытия";
			
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
					
				ТекстСообщенияПользователю = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Сотрудника %1 необходимо принять на работу ранее кадрового события ""%2"" (%3 - %4)'"),
					Выборка.Сотрудник,
					Выборка.ВидСобытия,
					Формат(Выборка.Период, "ДЛФ=D"),
					Выборка.Регистратор);
						
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщенияПользователю,
					Выборка.Регистратор,
					,
					,
					Отказ);
				
			КонецЦикла;
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверка того, что увольнение самое последнее событие.
		
	Если ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
			|	МАКСИМУМ(КадроваяИсторияСотрудников.Период) КАК Период
			|ПОМЕСТИТЬ ВТПоздниеПериоды
			|ИЗ
			|	ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
			|
			|СГРУППИРОВАТЬ ПО
			|	КадроваяИсторияСотрудников.Сотрудник
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
			|	КадроваяИсторияСотрудников.Период КАК Период,
			|	КадроваяИсторияСотрудников.ВидСобытия КАК ВидСобытия,
			|	КадроваяИсторияСотрудников.Регистратор КАК Регистратор
			|ИЗ
			|	ВТПоздниеПериоды КАК ПоздниеПериоды
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
			|		ПО ПоздниеПериоды.Сотрудник = КадроваяИсторияСотрудников.Сотрудник
			|			И ПоздниеПериоды.Период = КадроваяИсторияСотрудников.Период
			|ГДЕ
			|	ПоздниеПериоды.Период > &ДатаСобытия";
			
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
					
				ТекстСообщенияПользователю = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Сотрудника %1 необходимо уволить позднее кадрового события ""%2"" (%3 - %4)'"),
					Выборка.Сотрудник,
					Выборка.ВидСобытия,
					Формат(Выборка.Период, "ДЛФ=D"),
					Выборка.Регистратор);
						
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщенияПользователю,
					Выборка.Регистратор,
					,
					,
					Отказ);
				
			КонецЦикла;
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверка того, что на период, равный ДатаСобытия, еще нет зарегистрированных событий.
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КадроваяИсторияСотрудников.Регистратор,
		|	КадроваяИсторияСотрудников.Сотрудник,
		|	КадроваяИсторияСотрудников.Период,
		|	КадроваяИсторияСотрудников.ВидСобытия
		|ИЗ
		|	ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|ГДЕ
		|	КадроваяИсторияСотрудников.Период = &ДатаСобытия";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ТекстСообщенияПользователю = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='По сотруднику %1, дата кадрового события (%2) противоречит кадровому приказу %3'"),
				Выборка.Сотрудник,
				Формат(Выборка.Период, "ДЛФ=D"),
				Выборка.Регистратор);
					
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщенияПользователю,
				Выборка.Регистратор,
				,
				,
				Отказ);
			
		КонецЦикла;
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьСоответствиеСотрудниковОрганизации(Организация, Сотрудник, Отказ) Экспорт
	
	ГоловнаяОрганизация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация);
	
	ГоловнаяОрганизацияСотрудника = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "ГоловнаяОрганизация");
	
	Если ГоловнаяОрганизацияСотрудника <> ГоловнаяОрганизация Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Сотрудник %1 не соответствует организации %2.'"),
			Сотрудник,
			Организация);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,
			"Объект.Сотрудник",
			,
			Отказ);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеДатыРожденияПоВременнойТаблице(МенеджерВременныхТаблиц, ИмяВТОтбораСотрудников, ДатаРожденияВТаблице = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если Не ДатаРожденияВТаблице Тогда
		// Если даты рождения в таблице нет, нужно ее дополнительно получить.
		ИмяВТСпискаСотрудников = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТКадровыеДанныеСотрудников");
		ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
			Запрос.МенеджерВременныхТаблиц,
			ИмяВТОтбораСотрудников);
		ОписательВременныхТаблиц.ИмяВТКадровыеДанныеСотрудников = ИмяВТСпискаСотрудников;
		СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "ДатаРождения");
	Иначе
		ИмяВТСпискаСотрудников = ИмяВТОтбораСотрудников;
	КонецЕсли; 
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.Сотрудник КАК Сотрудник
	|ИЗ
	|	ВТОтбораСотрудников КАК Сотрудники
	|ГДЕ
	|	Сотрудники.ДатаРождения = ДАТАВРЕМЯ(1, 1, 1)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОтбораСотрудников", ИмяВТСпискаСотрудников);
		
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		// Все хорошо, нет сотрудников с незаполненной датой рождения.
		Возврат;
	КонецЕсли;
		
	Выборка = РезультатЗапроса.Выбрать();
	
	// Если записей больше 9, выводим только 5 из них.
	ВсегоОшибок = Выборка.Количество();
	КоличествоСообщений = ВсегоОшибок;
	Если КоличествоСообщений > 9 Тогда
		КоличествоСообщений = 5;
	КонецЕсли;
	
	Счетчик = 1;
	Пока Выборка.Следующий() Цикл
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='У сотрудника %1 не заполнена дата рождения'"), Выборка.Сотрудник);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Выборка.Сотрудник, "ДатаРождения", "ФизическоеЛицо");
		Счетчик = Счетчик + 1;
		Если Счетчик > КоличествоСообщений Тогда
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Если ВсегоОшибок > КоличествоСообщений Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='..и еще у %1 сотрудников'"), ВсегоОшибок - КоличествоСообщений);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	ВызватьИсключение НСтр("ru = 'У одного или нескольких сотрудников не заполнена дата рождения.'");
	
КонецПроцедуры

// Возвращает соответствие сотрудников, переданным физическим лицам. Поиск сотрудников ведется
// в рамках головной организации, которая задается параметром Организация. Если, переданная 
// организация, является обособленным подразделением, то поиск ведется среди сотрудников головной
// этого обособленного подразделения.
// Если сотрудника не удается найти - создается новый.
// В ходе поиска сотрудников не производится проверка оформленности на работу. Предполагается, что
// функция вызывается для физических лиц, по которым не был определен сотрудник методом СотрудникиОрганизации.
//
// Параметры:
//			ФизическиеЛица 						- Массив ссылок на Справочник.ФизическиеЛица или ссылка на элемент.
//			Организация 						- СправочникСсылка.Организации
//			ВключатьВПоискУволенныхСотрудников	- Булево
//
// Возвращаемое значение:
//		Соответствие - ключи соответствия ссылки на переданные в параметрах физические лица.
//				Значения - соответствующие им сотрудники.
//
Функция НеоформленныеСотрудникиФизическихЛиц(ФизическиеЛица, Организация, ВключатьВПоискУволенныхСотрудников = Истина) Экспорт
	
	СоответствиеСотрудниковФизическимЛицам = Новый Соответствие;
	
	ГоловнаяОрганизация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация);
	
	Если ТипЗнч(ФизическиеЛица) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическиеЛица);
	Иначе
		СписокФизическихЛиц = ФизическиеЛица;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("СписокФизическихЛиц", СписокФизическихЛиц);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	
	Если ВключатьВПоискУволенныхСотрудников Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Сотрудники.ФизическоеЛицо,
			|	Сотрудники.Ссылка КАК Сотрудник
			|ПОМЕСТИТЬ ВТСотрудники
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники
			|ГДЕ
			|	Сотрудники.ФизическоеЛицо В(&СписокФизическихЛиц)
			|	И Сотрудники.ГоловнаяОрганизация = &ГоловнаяОрганизация";
			
	Иначе
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Сотрудники.ФизическоеЛицо,
			|	Сотрудники.Ссылка КАК Сотрудник
			|ПОМЕСТИТЬ ВТСотрудники
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
			|		ПО Сотрудники.Ссылка = ТекущиеКадровыеДанныеСотрудников.Сотрудник
			|ГДЕ
			|	Сотрудники.ФизическоеЛицо В(&СписокФизическихЛиц)
			|	И Сотрудники.ГоловнаяОрганизация = &ГоловнаяОрганизация
			|	И ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)";
			
	КонецЕсли;
	
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо,
		|	МИНИМУМ(ЕСТЬNULL(Сотрудники.Сотрудник, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка))) КАК Сотрудник
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудники КАК Сотрудники
		|		ПО (Сотрудники.ФизическоеЛицо = ФизическиеЛица.Ссылка)
		|ГДЕ
		|	ФизическиеЛица.Ссылка В(&СписокФизическихЛиц)
		|
		|СГРУППИРОВАТЬ ПО
		|	ФизическиеЛица.Ссылка";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Сотрудник) Тогда
			СотрудникФизическогоЛица = Выборка.Сотрудник;
		Иначе
			СотрудникФизическогоЛица = НовыйСотрудникФизическогоЛица(Выборка.ФизическоеЛицо, ГоловнаяОрганизация);
		КонецЕсли;
			
		СоответствиеСотрудниковФизическимЛицам.Вставить(Выборка.ФизическоеЛицо, СотрудникФизическогоЛица);
		
	КонецЦикла;
	
	Возврат СоответствиеСотрудниковФизическимЛицам;
	
КонецФункции

// Возвращает вновь созданного сотрудника по переданным физическому лицу и организации.
// Сотрудник создается для головной организации, переданной в параметре.
// 
// Параметры:
//		ФизическоеЛицо	- СправочникСсылка.ФизическиеЛица
//		Организация		- СправочникСсылка.Организации
//
// ВозвращаемоеЗначение:
//		СправочникСсылка.Сотрудники
//
Функция НовыйСотрудникФизическогоЛица(ФизическоеЛицо, Организация) Экспорт
	
	СотрудникОбъект = Справочники.Сотрудники.СоздатьЭлемент();
	СотрудникОбъект.ФизическоеЛицо = ФизическоеЛицо;
	СотрудникОбъект.ГоловнаяОрганизация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация);
	СотрудникОбъект.Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФизическоеЛицо, "ФИО");
			
	СотрудникОбъект.Записать();
		
	Возврат СотрудникОбъект.Ссылка;
	
КонецФункции

// Формирует временную таблицу, содержащую поле Сотрудник, с сотрудниками не оформленными по
// трудовым договорам. В выборку включаются все неоформленные сотрудники, создававшиеся для головной организации.
//
// Параметры:
//		МенеджерВременныхТаблиц
//		ТолькоРазрешенные
//		Организация - если в качестве параметра передано обособленное подразделения, то в выборку войдут
//						не оформлявшиеся сотрудники головной организации обособленного подразделения
//		ИмяВТСотрудникиНеОформленныеПоТрудовомуДоговору.
//
Процедура СоздатьВТСотрудникиНеОформленныеПоТрудовомуДоговору(МенеджерВременныхТаблиц, ТолькоРазрешенные, Организация, ИмяВТСотрудникиНеОформленныеПоТрудовомуДоговору = "ВТСотрудникиНеОформленныеПоТрудовомуДоговору") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация));
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Сотрудники.Ссылка КАК Сотрудник
		|ПОМЕСТИТЬ ВТСотрудникиНеОформленныеПоТрудовомуДоговору
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|		ПО Сотрудники.Ссылка = ТекущиеКадровыеДанныеСотрудников.Сотрудник
		|			И (ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
		|ГДЕ
		|	Сотрудники.ГоловнаяОрганизация = &ГоловнаяОрганизация
		|	И ТекущиеКадровыеДанныеСотрудников.Сотрудник ЕСТЬ NULL ";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСотрудникиНеОформленныеПоТрудовомуДоговору", ИмяВТСотрудникиНеОформленныеПоТрудовомуДоговору);
	
	Если НЕ ТолькоРазрешенные Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ");
	КонецЕсли; 
		
	Запрос.Выполнить();
	
КонецПроцедуры

// Возвращает структуру описывающую временную таблицу отборов для получения истории изменения
// ФИО физических лиц.
//
// Параметры:
//		МенеджерВременныхТаблиц	- МенеджерВременныхТаблиц
//		ИмяВТОтборов			- Строка
//		ИмяПоляФизическоеЛицо	- Строка
//
// Возвращаемое значение:
//		Структура - содержит ключи:
//			* МенеджерВременныхТаблиц	- МенеджерВременныхТаблиц.
//			* ИмяВТОтборов				- Строка.
//			* ИмяПоляФизическоеЛицо		- Строка.
//
Функция ОписательВременныхТаблицДляСоздатьВТИсторияИзмененияФИОФизическихЛиц(МенеджерВременныхТаблиц, ИмяВТОтборов, ИмяПоляФизическоеЛицо) Экспорт
	
	ОписательВТ = Новый Структура;
	
	ОписательВТ.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
	ОписательВТ.Вставить("ИмяВТОтборов", ИмяВТОтборов);
	ОписательВТ.Вставить("ИмяПоляФизическоеЛицо", ИмяПоляФизическоеЛицо);
	
	Возврат ОписательВТ;
	
КонецФункции

// Создает временную таблицу, содержащую записи регистра сведений ФИОФизическихЛиц,
// по переданному отбору во временной таблице, содержащейся в МенеджереВременныхТаблиц.
//
// Параметры:
//		ТолькоРазрешенные						- Булево
//		ОписательВременныхТаблиц				- Структура (см. ОписательВременныхТаблицДляСоздатьВТИсторияИзмененияФИОФизическихЛиц).
//		ИмяВТИсторияИзмененияФИОФизическихЛиц	- Строка
//
// Возвращаемое значение:
//		РезультатЗапроса
//
Функция СоздатьВТИсторияИзмененияФИОФизическихЛиц(ТолькоРазрешенные, ОписательВременныхТаблиц, ИмяВТИсторияИзмененияФИОФизическихЛиц = "ВТИсторияИзмененияФИОФизическихЛиц") Экспорт
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ОписательВременныхТаблиц.ИмяВТОтборов, "ФизическоеЛицо");
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("ФизическоеЛицо", ОписательВременныхТаблиц.ИмяПоляФизическоеЛицо);
	
	Запрос = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистра(
		"ФИОФизическихЛиц",
		ТолькоРазрешенные,
		ОписаниеФильтра,
		,
		ИмяВТИсторияИзмененияФИОФизическихЛиц);
		
	Запрос.МенеджерВременныхТаблиц = ОписательВременныхТаблиц.МенеджерВременныхТаблиц;
	Возврат Запрос.Выполнить();
	
КонецФункции

// Добавляет команду печати
Процедура ДобавитьКомандуПечатиПриказаОПредоставленииОтпуска(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьКадровыхПриказов";
	КомандаПечати.Идентификатор = "ПФ_MXL_Т6";
	КомандаПечати.Представление = НСтр("ru = 'Приказ о предоставлении отпуска (Т-6)'");
	КомандаПечати.Порядок = 10;
	
КонецПроцедуры

// Возвращает таблицу договоров, сформированную по условиям переданным в параметре
// ТаблицаФизическихЛиц
//
// Параметры:
//		ТаблицаФизическихЛиц - ТаблицаЗначений с колонками
//									* ФизическоеЛицо		- СправочникСсылка.ФизическиеЛица
//									* ГоловнаяОрганизация	- СправочникСсылка.Организации
//									* НачалоПериода			- Дата
//									* ОкончаниеПериода		- Дата
//
// Возвращаемое значение:
//		ТаблицаЗначений с колонками
//			* ФизическоеЛицо	- СправочникСсылка.ФизическиеЛица
//			* ВидДоговора		- Булево, ложь - трудовой договор, истина - договор ГПХ
//			* ВидДоговораГПХ	- Булево, ложь - оказание услуг, истина - авторский
//									имеет смысл при значении ВидДоговора равное истина
//			* Номер				- Строка
//			* Дата				- Дата
//			* Организация		- СправочникСсылка.Организации
//			* Начало			- Дата
//			* Окончание			- Дата
//
Функция ДоговорыФизическихЛиц(ТаблицаФизическихЛиц) Экспорт
	
	Возврат КадровыйУчетВнутренний.ДоговорыФизическихЛиц(ТаблицаФизическихЛиц);
	
КонецФункции

#Область КадровыеДанныеФизическихЛиц

// Возвращает структуру, описывающую временную таблицу отборов физических лиц.
//
// Параметры:
//				ИмяВременнойТаблицыОтборовФизическихЛиц - Строка, имя временной таблицы
//								в менеджере запросов.
//				ИмяПоляФизическоеЛицо - Строка, указывает имя поля временной таблицы,
//								содержащего ссылку на физическое лицо.
//				ИмяПоляПериод - Строка, указывает имя поля временной таблицу, содержащее
//								период, на который предполагается получить кадровые данные.
//
Функция ОписаниеВременнойТаблицыОтборовФизическихЛиц(ИмяВременнойТаблицыОтборовФизическихЛиц, ИмяПоляФизическоеЛицо = "ФизическоеЛицо", ИмяПоляПериод = "Период") Экспорт
	
	ОписательВременнойТаблицыОтборов = Новый Структура;
	ОписательВременнойТаблицыОтборов.Вставить("ИмяВременнойТаблицыОтборовФизическихЛиц", ИмяВременнойТаблицыОтборовФизическихЛиц);
	ОписательВременнойТаблицыОтборов.Вставить("ИмяПоляФизическоеЛицо", ИмяПоляФизическоеЛицо);
	ОписательВременнойТаблицыОтборов.Вставить("ИмяПоляПериод", ИмяПоляПериод);
	
	Возврат ОписательВременнойТаблицыОтборов;
	
КонецФункции

Функция ЗапросВТКадровыеДанныеФизическихЛиц(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, КадровыеДанные, ПоляОтбораПериодическихДанных, ИмяВТКадровыеДанныеФизическихЛиц = "ВТКадровыеДанныеФизическихЛиц") Экспорт
	
	Возврат КадровыйУчетВнутренний.ЗапросВТКадровыеДанныеФизическихЛиц(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, КадровыеДанные, ПоляОтбораПериодическихДанных, ИмяВТКадровыеДанныеФизическихЛиц);
	
КонецФункции

Функция ЗапросВТПостоянныеКадровыеДанныеФизическихЛиц(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, КадровыеДанные, ИмяВТПостоянныеКадровыеДанныеФизическихЛиц = "ВТПостоянныеКадровыеДанныеФизическихЛиц") Экспорт
	
	Возврат КадровыйУчетВнутренний.ЗапросВТПостоянныеКадровыеДанныеФизическихЛиц(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, КадровыеДанные, ИмяВТПостоянныеКадровыеДанныеФизическихЛиц);
		
КонецФункции

Функция ЗапросВТДокументыУдостоверяющиеЛичность(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИмяВТДокументыУдостоверяющиеЛичность = "ВТДокументыУдостоверяющиеЛичность") Экспорт
	
	Запрос = Новый Запрос;
	
	ИмяВТМаксимальныеПериодыДокументов = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТМаксимальныеПериодыДокументов");
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаОтборовФизическихЛиц.Период КАК Период,
		|	ТаблицаОтборовФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МАКСИМУМ(ДокументыФизическихЛиц.Период) КАК ПоследнийПериод
		|ПОМЕСТИТЬ ВТМаксимальныеПериодыДокументов
		|ИЗ
		|	ВТОтборовФизическихЛиц КАК ТаблицаОтборовФизическихЛиц
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыФизическихЛиц КАК ДокументыФизическихЛиц
		|		ПО ТаблицаОтборовФизическихЛиц.ФизическоеЛицо = ДокументыФизическихЛиц.Физлицо
		|			И (ДокументыФизическихЛиц.ЯвляетсяДокументомУдостоверяющимЛичность)
		|			И (ТаблицаОтборовФизическихЛиц.Период >= ДокументыФизическихЛиц.Период
		|				ИЛИ ТаблицаОтборовФизическихЛиц.Период = ДАТАВРЕМЯ(1, 1, 1))
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаОтборовФизическихЛиц.Период,
		|	ТаблицаОтборовФизическихЛиц.ФизическоеЛицо
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	ФизическоеЛицо,
		|	ПоследнийПериод
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МаксимальныеПериодыДокументов.Период КАК Период,
		|	МаксимальныеПериодыДокументов.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДокументыФизическихЛиц.ВидДокумента КАК ДокументВид,
		|	ДокументыФизическихЛиц.ВидДокумента.КодМВД КАК ДокументКодМВД,
		|	ДокументыФизическихЛиц.Серия КАК ДокументСерия,
		|	ДокументыФизическихЛиц.Номер КАК ДокументНомер,
		|	ДокументыФизическихЛиц.ДатаВыдачи КАК ДокументДатаВыдачи,
		|	ДокументыФизическихЛиц.СрокДействия КАК ДокументСрокДействия,
		|	ДокументыФизическихЛиц.КемВыдан КАК ДокументКемВыдан,
		|	ДокументыФизическихЛиц.КодПодразделения КАК ДокументКодПодразделения,
		|	ДокументыФизическихЛиц.Представление КАК ДокументПредставление
		|ПОМЕСТИТЬ ВТДокументыУдостоверяющиеЛичность
		|ИЗ
		|	ВТМаксимальныеПериодыДокументов КАК МаксимальныеПериодыДокументов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыФизическихЛиц КАК ДокументыФизическихЛиц
		|		ПО МаксимальныеПериодыДокументов.ПоследнийПериод = ДокументыФизическихЛиц.Период
		|			И МаксимальныеПериодыДокументов.ФизическоеЛицо = ДокументыФизическихЛиц.Физлицо
		|			И (ДокументыФизическихЛиц.ЯвляетсяДокументомУдостоверяющимЛичность)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизическоеЛицо,
		|	Период";
		
	Если НЕ ТолькоРазрешенные Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ");
	КонецЕсли; 

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаОтборовФизическихЛиц.Период", "ТаблицаОтборовФизическихЛиц." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаОтборовФизическихЛиц.ФизическоеЛицо", "ТаблицаОтборовФизическихЛиц." + ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТМаксимальныеПериодыДокументов", ИмяВТМаксимальныеПериодыДокументов);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(ТекстЗапроса, "ВТДокументыУдостоверяющиеЛичность", ИмяВТДокументыУдостоверяющиеЛичность);
		
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапроса, ТолькоРазрешенные);
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТСведенияОбИнвалидности(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияОбИнвалидности = "ВТСведенияОбИнвалидности") Экспорт
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц, "Период,ФизическоеЛицо");
		
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("СведенияОбИнвалидностиФизическихЛиц", ПоляОтбора);
	КонецЕсли;
	
	ПараметрыПостроения.Отборы = ПоляОтбора;
	 
	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
			"СведенияОбИнвалидностиФизическихЛиц",
			ТолькоРазрешенные,
			ОписаниеФильтра,
			ПараметрыПостроения,
			Истина,
			ИмяВТСведенияОбИнвалидности);
			
	Возврат ЗапросВТИмяРегистраСрез;
	
КонецФункции

Функция ЗапросВТСведенияОГражданстве(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияОГражданстве = "ВТСведенияОГражданстве") Экспорт
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц, "Период,ФизическоеЛицо");
		
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("ГражданствоФизическихЛиц", ПоляОтбора);
	КонецЕсли;
	 
	ПараметрыПостроения.Отборы = ПоляОтбора;
	 
	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
			"ГражданствоФизическихЛиц",
			ТолькоРазрешенные,
			ОписаниеФильтра,
			ПараметрыПостроения,
			Истина,
			ИмяВТСведенияОГражданстве);
			
	Возврат ЗапросВТИмяРегистраСрез;
	
КонецФункции

Функция ЗапросВТСведенияОФИОФизическихЛиц(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияОФИОФизическихЛиц = "ВТСведенияОФИОФизическихЛиц") Экспорт
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц, "Период,ФизическоеЛицо");
		
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("ФИОФизическихЛиц", ПоляОтбора);
	КонецЕсли;
	 
	ПараметрыПостроения.Отборы = ПоляОтбора;
	 
	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"ФИОФизическихЛиц",
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина,
		ИмяВТСведенияОФИОФизическихЛиц);
			
	Возврат ЗапросВТИмяРегистраСрез;
	
КонецФункции

#КонецОбласти

#Область КадровыеДанныеСотрудников

// Возвращает структуру, описывающую временную таблицу отборов физических лиц.
//
// Параметры:
//				ИмяВременнойТаблицыОтборовСотрудников - Строка, имя временной таблицы
//								в менеджере запросов.
//				ИмяПоляСотрудник - Строка, указывает имя поля временной таблицы,
//								содержащего ссылку на сотрудника.
//				ИмяПоляПериод - Строка, указывает имя поля временной таблицу, содержащее
//								период, на который предполагается получить кадровые данные.
//
Функция ОписаниеВременнойТаблицыОтборовСотрудников(ИмяВременнойТаблицыОтборовСотрудников, ИмяПоляСотрудник = "Сотрудник", ИмяПоляПериод = "Период") Экспорт
	
	ОписательВременнойТаблицыОтборов = Новый Структура;
	ОписательВременнойТаблицыОтборов.Вставить("ИмяВременнойТаблицыОтборовСотрудников", ИмяВременнойТаблицыОтборовСотрудников);
	ОписательВременнойТаблицыОтборов.Вставить("ИмяПоляСотрудник", ИмяПоляСотрудник);
	ОписательВременнойТаблицыОтборов.Вставить("ИмяПоляПериод", ИмяПоляПериод);
	
	Возврат ОписательВременнойТаблицыОтборов;
	
КонецФункции

Функция ЗапросВТКадровыеДанныеСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, КадровыеДанные, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень = Истина, ИмяВТКадровыеДанныеСотрудников = "ВТКадровыеДанныеСотрудников") Экспорт
	
	Возврат КадровыйУчетВнутренний.ЗапросВТКадровыеДанныеСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, КадровыеДанные, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, ИмяВТКадровыеДанныеСотрудников);
	
КонецФункции

Функция ЗапросВТПостоянныеКадровыеДанныеСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, КадровыеДанные, ИмяВТПостоянныеКадровыеДанныеСотрудников = "ВТПостоянныеКадровыеДанныеСотрудников") Экспорт

	Возврат КадровыйУчетВнутренний.ЗапросВТПостоянныеКадровыеДанныеСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, КадровыеДанные, ИмяВТПостоянныеКадровыеДанныеСотрудников);
	
КонецФункции

#КонецОбласти

#Область ОбслуживаниеОтображенияСведенийОГражданствеДляЛицБезГражданства

Процедура СоздатьВТСтраныМираДляГражданства(МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтраныМира.Ссылка КАК Страна,
	|	СтраныМира.Код,
	|	СтраныМира.Наименование
	|ПОМЕСТИТЬ ВТСтраныМираДляГражданства
	|ИЗ
	|	Справочник.СтраныМира КАК СтраныМира
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка),
	|	""999"",
	|	""Лицо без гражданства""
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтраныМира.Ссылка";
	
	Запрос.Выполнить();

КонецПроцедуры

#КонецОбласти

#Область ФормированиеВременныхТаблицСКадровымиДанными

// Формирует временную таблицу ВТКадровыеДанныеФизическихЛиц, содержащую кадровые данные физических лиц,
// переданных ей в качестве параметра на указанную дату.
//
// Параметры:
//		МенеджерВременныхТаблиц - МенеджерВременныхТаблиц в котором формируется временная таблица.
//		ТолькоРазрешенные - Булево
//		СписокФизическихЛиц - Массив ссылок или ссылка на элемент справочника ФизическиеЛица.
//		КадровыеДанные - см. описание к функции КадровыеДанныеФизическихЛиц.
//		ДатаПолученияДанных - Дата, на которую необходимо получить "периодические" данные.
//		ПоляОтбораПериодическихДанных -  см. описание к функции КадровыеДанныеФизическихЛиц.
// 
Процедура СоздатьНаДатуВТКадровыеДанныеФизическихЛиц(МенеджерВременныхТаблиц, ТолькоРазрешенные, СписокФизическихЛиц, КадровыеДанные, Знач ДатаПолученияДанных, ПоляОтбораПериодическихДанных = Неопределено) Экспорт
	
	// Проверим Передана ли нам дата на которую необходимо получать периодические данные.
	Если ДатаПолученияДанных = '00010101000000' Тогда
		ДатаПолученияДанных = ТекущаяДатаСеанса();
	КонецЕсли;
	
	// Проверим, если в качестве параметра СписокФизическихЛиц, передана ссылка, создадим массив.
	Если ТипЗнч(СписокФизическихЛиц) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		МассивФизическихЛиц = Новый Массив;
		МассивФизическихЛиц.Добавить(СписокФизическихЛиц);
	Иначе
		МассивФизическихЛиц = СписокФизическихЛиц;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивФизическихЛиц", МассивФизическихЛиц);
	Запрос.УстановитьПараметр("ДатаПолученияДанных", ДатаПолученияДанных);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	&ДатаПолученияДанных КАК Период,
	|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТСписокФизическихЛиц
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.Ссылка В(&МассивФизическихЛиц)";
	
	Если НЕ ТолькоРазрешенные Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ");
	КонецЕсли;	
	
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеФизическихЛиц(
		МенеджерВременныхТаблиц,
		"ВТСписокФизическихЛиц");
	СоздатьВТКадровыеДанныеФизическихЛиц(ОписательВременныхТаблиц, ТолькоРазрешенные, КадровыеДанные, ПоляОтбораПериодическихДанных);
	
	Запрос.Текст = "УНИЧТОЖИТЬ ВТСписокФизическихЛиц";
	Запрос.Выполнить();
	
КонецПроцедуры

// Возвращает структуру описания полей отбора для методов получения кадровых данных физических лиц.
//
// Параметры:
//		ИменаПолейВременнойТаблицыОтборовФизическихЛиц - строка с именами полей отбора
//							физических лиц ",". Строка должна содержать два имени поля, разделенные
//							запятой. Первое имя соответствует полю "ФизическоеЛицо", второе полю "Период".
//
// Возвращаемое значение:
//		Структура содержащая имена полей отбора сотрудников
//			 КлючиСтруктуры:
//			 	ФизическоеЛицо
//				Период
//
Функция ПоляОтбораФизическихЛиц(ИменаПолейВременнойТаблицыОтборовФизическихЛиц = "ФизическоеЛицо,Период") Экспорт
	
	МассивИменПолейОтбораФизическихЛиц = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаПолейВременнойТаблицыОтборовФизическихЛиц, ",");
	Возврат Новый Структура("ФизическоеЛицо,Период", МассивИменПолейОтбораФизическихЛиц[0], МассивИменПолейОтбораФизическихЛиц[1]);
	
КонецФункции

// Возвращает структуру с параметрами для метода СоздатьВТКадровыеДанныеФизическихЛиц.
//
// Параметры:
//		МенеджерВременныхТаблиц
//		ИмяВременнойТаблицыОтборовФизическихЛиц - имя временной таблицы - "фильтра".
//		ИменаПолейВременнойТаблицыОтборовФизическихЛиц - строка с именами полей отбора
//							физических лиц ",". Строка должна содержать два имени поля, разделенные
//							запятой. Первое имя соответствует полю "ФизическоеЛицо", второе полю "Период".
//
// Возвращаемое значение:
//		Структура с полями:
//			МенеджерВременныхТаблиц
//			ИмяВременнойТаблицыОтборовФизическихЛиц - имя временной таблицы отборов физических лиц.
//			ИмяВТКадровыеДанныеФизическихЛиц - имя создаваемой временной таблицы.
//			ПоляОтбораФизическихЛиц - см. ПоляОтбораФизическихЛиц.
//
Функция ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеФизическихЛиц(МенеджерВременныхТаблиц, ИмяВременнойТаблицыОтборовФизическихЛиц, ИменаПолейВременнойТаблицыОтборовФизическихЛиц = "ФизическоеЛицо,Период") Экспорт
	
	ОписательВременныхТаблиц = Новый Структура;
	
	ОписательВременныхТаблиц.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
	ОписательВременныхТаблиц.Вставить("ИмяВременнойТаблицыОтборовФизическихЛиц", ИмяВременнойТаблицыОтборовФизическихЛиц);
	ОписательВременныхТаблиц.Вставить("ИмяВТКадровыеДанныеФизическихЛиц", "ВТКадровыеДанныеФизическихЛиц");
	ОписательВременныхТаблиц.Вставить("ПоляОтбораФизическихЛиц", ПоляОтбораФизическихЛиц(ИменаПолейВременнойТаблицыОтборовФизическихЛиц));
	
	Возврат ОписательВременныхТаблиц;
	
КонецФункции

// Формирует временную таблицу ВТКадровыеДанныеФизическихЛиц, список физических лиц и периодов,
// по которым необходимо получить данные, берутся из временной таблицы в менеджере временных
// таблиц, переданном в качестве параметра. Временная таблица обязательно должна содержать
// колонки ФизическоеЛицо и Период.
//
// Параметры:
//		ОписательВременныхТаблиц - структура, сформированная 
//				методом ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеФизическихЛиц.
//		ТолькоРазрешенные - Булево
//		КадровыеДанные - см. описание к функции КадровыеДанныеФизическихЛиц.
//		ПоляОтбораПериодическихДанных -  см. описание к функции КадровыеДанныеФизическихЛиц.
//
Процедура СоздатьВТКадровыеДанныеФизическихЛиц(ОписательВременныхТаблиц, ТолькоРазрешенные, КадровыеДанные, ПоляОтбораПериодическихДанных = Неопределено) Экспорт
	
	Если ТипЗнч(КадровыеДанные) = Тип("Строка") Тогда
		// Преобразуем параметр КадровыеДанные из строки в массив идентификаторов.
		МассивНеобходимыхКадровыхДанных = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрЗаменить(КадровыеДанные, " ",""), ",");
	Иначе
		МассивНеобходимыхКадровыхДанных = КадровыеДанные;
	КонецЕсли; 
	
	Описатель = ОписаниеВременнойТаблицыОтборовФизическихЛиц(
		ОписательВременныхТаблиц.ИмяВременнойТаблицыОтборовФизическихЛиц,
		ОписательВременныхТаблиц.ПоляОтбораФизическихЛиц.ФизическоеЛицо,
		ОписательВременныхТаблиц.ПоляОтбораФизическихЛиц.Период);
	
	Запрос = ЗапросВТКадровыеДанныеФизическихЛиц(
		ТолькоРазрешенные,
		Описатель,
		МассивНеобходимыхКадровыхДанных,
		ПоляОтбораПериодическихДанных,
		ОписательВременныхТаблиц.ИмяВТКадровыеДанныеФизическихЛиц);
		
	Запрос.МенеджерВременныхТаблиц = ОписательВременныхТаблиц.МенеджерВременныхТаблиц;
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Формирует временную таблицу ВТКадровыеДанныеСотрудников, содержащую кадровые данные сотрудников,
// переданных ей в качестве параметра на указанную дату.
//
// Параметры:
//		МенеджерВременныхТаблиц - МенеджерВременныхТаблиц в котором формируется временная таблица.
//		ТолькоРазрешенные - Булево
//		СписокСотрудников - Массив ссылок или ссылка на элемент справочника Сотрудники.
//		КадровыеДанные - см. описание к функции КадровыеДанныеСотрудников.
//		ДатаПолученияДанных - Дата, на которую необходимо получить "периодические" данные.
//		ПоляОтбораПериодическихДанных -  см. описание к функции КадровыеДанныеСотрудников.
// 
Процедура СоздатьНаДатуВТКадровыеДанныеСотрудников(МенеджерВременныхТаблиц, ТолькоРазрешенные, СписокСотрудников, КадровыеДанные, Знач ДатаПолученияДанных, ПоляОтбораПериодическихДанных = Неопределено, ФормироватьСПериодичностьДень = Истина) Экспорт
	
	// Проверим, если в качестве параметра СписокФизическихЛиц, передана ссылка, создадим массив.
	Если ТипЗнч(СписокСотрудников) = Тип("СправочникСсылка.Сотрудники") Тогда
		МассивСотрудников = Новый Массив;
		МассивСотрудников.Добавить(СписокСотрудников);
	Иначе
		МассивСотрудников = СписокСотрудников;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивСотрудников", МассивСотрудников);
	Запрос.УстановитьПараметр("ДатаПолученияДанных", ДатаПолученияДанных);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	&ДатаПолученияДанных КАК Период,
	|	ДанныеСотрудников.Ссылка КАК Сотрудник
	|ПОМЕСТИТЬ ВТСписокСотрудников
	|ИЗ
	|	Справочник.Сотрудники КАК ДанныеСотрудников
	|ГДЕ
	|	ДанныеСотрудников.Ссылка В(&МассивСотрудников)";

	Если НЕ ТолькоРазрешенные Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ");
	КонецЕсли;	
	
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		МенеджерВременныхТаблиц,
		"ВТСписокСотрудников");
	СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, ТолькоРазрешенные, КадровыеДанные, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень);
	
	Запрос.Текст = "УНИЧТОЖИТЬ ВТСписокСотрудников";
	Запрос.Выполнить();
	
КонецПроцедуры

// Возвращает структуру описания полей отбора для методов получения кадровых данных сотрудников.
//
// Параметры:
//		ИменаПолейВременнойТаблицыОтборовСотрудников - строка с именами полей отбора
//							сотрудников ",". Строка должна содержать два имени поля, разделенные
//							запятой. Первое имя соответствует полю "Сотрудник", второе полю "Период".
//
// Возвращаемое значение:
//		Структура содержащая имена полей отбора сотрудников
//			 КлючиСтруктуры:
//			 	Сотрудник
//				Период
//
Функция ПоляОтбораСотрудников(ИменаПолейВременнойТаблицыОтборовСотрудников = "Сотрудник,Период") Экспорт
	
	МассивИменПолейОтбораСотрудников = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаПолейВременнойТаблицыОтборовСотрудников, ",");
	Возврат Новый Структура("Сотрудник,Период", МассивИменПолейОтбораСотрудников[0], МассивИменПолейОтбораСотрудников[1]);
	
КонецФункции

// Возвращает структуру с параметрами для метода СоздатьВТКадровыеДанныеСотрудников.
//
// Параметры:
//		МенеджерВременныхТаблиц
//		ИмяВременнойТаблицыОтборовСотрудников - имя временной таблицы - "фильтра".
//		ИменаПолейВременнойТаблицыОтборовСотрудников - строка с именами полей отбора
//							сотрудников ",". Строка должна содержать два имени поля, разделенные
//							запятой. Первое имя соответствует полю "Сотрудник", второе полю "Период".
//
// Возвращаемое значение:
//		Структура с полями:
//			МенеджерВременныхТаблиц
//			ИмяВременнойТаблицыОтборовСотрудников - имя временной таблицы отборов сотрудников.
//			ПоляОтбораСотрудников - см. ПоляОтбораСотрудников.
//
Функция ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(МенеджерВременныхТаблиц, ИмяВременнойТаблицыОтборовСотрудников, ИменаПолейВременнойТаблицыОтборовСотрудников = "Сотрудник,Период") Экспорт
	
	ОписательВременныхТаблиц = Новый Структура;
	
	ОписательВременныхТаблиц.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
	ОписательВременныхТаблиц.Вставить("ИмяВременнойТаблицыОтборовСотрудников", ИмяВременнойТаблицыОтборовСотрудников);
	ОписательВременныхТаблиц.Вставить("ПоляОтбораСотрудников", ПоляОтбораСотрудников(ИменаПолейВременнойТаблицыОтборовСотрудников));
	ОписательВременныхТаблиц.Вставить("ИмяВТКадровыеДанныеСотрудников", "ВТКадровыеДанныеСотрудников");
	
	Возврат ОписательВременныхТаблиц;
	
КонецФункции

// Формирует временную таблицу ВТКадровыеДанныеСотрудников, список сотрудников и периодов,
// по которым необходимо получить данные, берутся из временной таблицы в менеджере временных
// таблиц, переданном в качестве параметра. Временная таблица обязательно должна содержать
// колонки Сотрудник и Период.
//
// Параметры:
//		ОписательВременныхТаблиц - структура, сформированная 
//				методом ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников.
//		ТолькоРазрешенные - Булево
//		КадровыеДанные - см. описание к функции КадровыеДанныеСотрудников.
//		ПоляОтбораПериодическихДанных -  см. описание к функции КадровыеДанныеСотрудников.
//
Процедура СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, ТолькоРазрешенные, КадровыеДанные, ПоляОтбораПериодическихДанных = Неопределено, ФормироватьСПериодичностьДень = Истина) Экспорт
	
	Если ТипЗнч(КадровыеДанные) = Тип("Строка") Тогда
		// Преобразуем параметр КадровыеДанные из строки в массив идентификаторов.
		МассивНеобходимыхКадровыхДанных = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрЗаменить(КадровыеДанные, " ",""), ",");
	Иначе
		МассивНеобходимыхКадровыхДанных = КадровыеДанные;
	КонецЕсли;
	
	ОписательВременнойТаблицыОтборов = КадровыйУчет.ОписаниеВременнойТаблицыОтборовСотрудников(
		ОписательВременныхТаблиц.ИмяВременнойТаблицыОтборовСотрудников,
		ОписательВременныхТаблиц.ПоляОтбораСотрудников.Сотрудник,
		ОписательВременныхТаблиц.ПоляОтбораСотрудников.Период);
	
	Запрос = ЗапросВТКадровыеДанныеСотрудников(
		ТолькоРазрешенные, 
		ОписательВременнойТаблицыОтборов, 
		МассивНеобходимыхКадровыхДанных, 
		ПоляОтбораПериодическихДанных,
		ФормироватьСПериодичностьДень,
		ОписательВременныхТаблиц.ИмяВТКадровыеДанныеСотрудников);
	
	Запрос.МенеджерВременныхТаблиц = ОписательВременныхТаблиц.МенеджерВременныхТаблиц;
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Формирует временную таблицу ВТФизическиеЛицаРаботавшиеВОрганизации со списком физических лиц, работавших в указанных
// организации, подразделении и в заданном периоде. Если подразделение не указывать в список будут отобраны физические
// лица работавшие в организации независимо от подразделения.
// Временная таблица содержит поля ФизическоеЛицо и Период. Значение поля Период всегда равно значению параметра
// ОкончаниеПериода.
//
// Параметры:
//		МенеджерВременныхТаблиц
//		ТолькоРазрешенные - Булево
//		Организация
//		НачалоПериода - Дата
//		ОкончаниеПериода - Дата
//		Подразделение
//		ИмяВТФизическиеЛицаРаботавшиеВОрганизации - Строка
//
Процедура СоздатьВТФизическиеЛицаРаботавшиеВОрганизации(МенеджерВременныхТаблиц, ТолькоРазрешенные, Организация, Знач НачалоПериода, Знач ОкончаниеПериода, Подразделение = Неопределено, ОтбиратьПоГоловнойОрганизации = Ложь, ИмяВТФизическиеЛицаРаботавшиеВОрганизации = "ВТФизическиеЛицаРаботавшиеВОрганизации") Экспорт
	
	ПараметрыПолученияСотрудниковОрганизаций = ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	
	Если ОтбиратьПоГоловнойОрганизации Тогда
		ПараметрыПолученияСотрудниковОрганизаций.Организация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация);
	Иначе
		ПараметрыПолученияСотрудниковОрганизаций.Организация = Организация;
	КонецЕсли;
	
	ПараметрыПолученияСотрудниковОрганизаций.Подразделение 					= Подразделение;
	ПараметрыПолученияСотрудниковОрганизаций.ОтбиратьПоГоловнойОрганизации	= ОтбиратьПоГоловнойОрганизации;
	ПараметрыПолученияСотрудниковОрганизаций.НачалоПериода					= НачалоПериода;
	ПараметрыПолученияСотрудниковОрганизаций.ОкончаниеПериода				= ОкончаниеПериода;
	
	СоздатьВТСотрудникиОрганизации(МенеджерВременныхТаблиц, ТолькоРазрешенные, ПараметрыПолученияСотрудниковОрганизаций);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫРАЗИТЬ(СотрудникиОрганизации.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТФизическиеЛицаРаботавшиеВОрганизации
		|ИЗ
		|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСотрудникиОрганизации";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТФизическиеЛицаРаботавшиеВОрганизации", ИмяВТФизическиеЛицаРаботавшиеВОрганизации);
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Формирует временную таблицу ВТСотрудникиОрганизации, содержащую поля Сотрудник и ФизическоеЛицо.
// Если заданы параметры НачалоПериода и ОкончаниеПериода метод вернет список сотрудников, работавших
// в заданном периоде. Если НачалоПериода и ОкончаниеПериода заданы и равны сформирует таблицу.
// Сотрудников работавших на заданную дату.
//
// Параметры:
//				МенеджерВременныхТаблиц
//				ТолькоРазрешенные - Булево
//				Параметры - Структура, подготовленная с помощью метода ПараметрыПолученияСотрудниковОрганизаций.
//				ИмяВТСотрудникиОрганизации - Строка
//
Процедура СоздатьВТСотрудникиОрганизации(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудникиОрганизации = "ВТСотрудникиОрганизации") Экспорт
	
	Запрос = ЗапросВТСотрудникиОрганизации(
		ТолькоРазрешенные, 
		ИмяВТСотрудникиОрганизации, 
		Параметры);
		
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Возвращает структуру параметров получения основных сотрудников организации.
//
// Параметры:
//				СписокФизическихЛиц - Массив ссылок на элементы справочника ФизическиеЛица или 
//					СправочникСсылка.ФизическиеЛица, если параметр опустить, в таблицу войдут
//					основные сотрудники всех физических лиц когда либо работавших в организации.
//				НачалоПериода - Дата
//				ОкончаниеПериода - Дата, если ОкончаниеПериода меньше НачалоПериода, данные будут 
//					получены на дату НачалоПериода.
//				Организация - СправочникСсылка.Организации
//
Функция ПараметрыПолученияОсновныхСотрудниковФизическихЛиц(СписокФизическихЛиц, Организация, НачалоПериода, ОкончаниеПериода)
	
	Возврат КадровыйУчетВнутренний.ПараметрыПолученияОсновныхСотрудниковФизическихЛиц(СписокФизическихЛиц, Организация, НачалоПериода, ОкончаниеПериода);
	
КонецФункции

// Формирует временную таблицу содержащую поля ФизическоеЛицо и Сотрудник. Сотрудник отбирается по принципам:
//		- Работает на указанный период.
//		- Выбирается сотрудник, работающий по основному месту работы, если такового не существует, выбирается
//			сотрудник, работающий по совместительству, принятый на наиболее раннюю дату.
//
// Параметры:
//				МенеджерВременныхТаблиц
//				ТолькоРазрешенные - Булево
//				СписокФизическихЛиц - Массив ссылок на элементы справочника ФизическиеЛица или 
//					СправочникСсылка.ФизическиеЛица, если параметр опустить, в таблицу войдут
//					основные сотрудники всех физических лиц когда либо работавших в организации.
//				НачалоПериода - Дата
//				ОкончаниеПериода - Дата, если ОкончаниеПериода меньше НачалоПериода, данные будут 
//					получены на дату НачалоПериода.
//				Организация - СправочникСсылка.Организации
//
Процедура СоздатьВТОсновныеСотрудникиФизическихЛиц(МенеджерВременныхТаблиц, ТолькоРазрешенные, СписокФизическихЛиц, Организация, НачалоПериода, ОкончаниеПериода = '00010101') Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ПараметрыПолученияСотрудниковОрганизаций = ПараметрыПолученияОсновныхСотрудниковФизическихЛиц(СписокФизическихЛиц, Организация, НачалоПериода, ОкончаниеПериода);
	СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, ТолькоРазрешенные, ПараметрыПолученияСотрудниковОрганизаций);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
	|	КадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТСотрудникиПоОсновномуМестуРаботы
	|ИЗ
	|	ВТСотрудникиОрганизации КАК КадровыеДанныеСотрудников
	|ГДЕ
	|	КадровыеДанныеСотрудников.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
	|	КадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	|	КадровыеДанныеСотрудников.ВидЗанятости КАК ВидЗанятости,
	|	КадровыеДанныеСотрудников.ДатаПриема КАК ДатаПриема
	|ПОМЕСТИТЬ ВТВсеСотрудникиПоСовместительству
	|ИЗ
	|	ВТСотрудникиОрганизации КАК КадровыеДанныеСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиПоОсновномуМестуРаботы КАК СотрудникиПоОсновномуМестуРаботы
	|		ПО КадровыеДанныеСотрудников.ФизическоеЛицо = СотрудникиПоОсновномуМестуРаботы.ФизическоеЛицо
	|ГДЕ
	|	ЕСТЬNULL(КадровыеДанныеСотрудников.ВидЗанятости, ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
	|	И СотрудникиПоОсновномуМестуРаботы.ФизическоеЛицо ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВсеСотрудникиПоСовместительству.ФизическоеЛицо,
	|	МИНИМУМ(ВсеСотрудникиПоСовместительству.ДатаПриема) КАК ДатаПриема
	|ПОМЕСТИТЬ ВТРанниеДатыПриемаСовместителей
	|ИЗ
	|	ВТВсеСотрудникиПоСовместительству КАК ВсеСотрудникиПоСовместительству
	|
	|СГРУППИРОВАТЬ ПО
	|	ВсеСотрудникиПоСовместительству.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВсеСотрудникиПоСовместительству.Сотрудник) КАК Сотрудник,
	|	ВсеСотрудникиПоСовместительству.ФизическоеЛицо
	|ПОМЕСТИТЬ ВТСотрудникиПоСовместительству
	|ИЗ
	|	ВТВсеСотрудникиПоСовместительству КАК ВсеСотрудникиПоСовместительству
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРанниеДатыПриемаСовместителей КАК РанниеДатыПриемаСовместителей
	|		ПО ВсеСотрудникиПоСовместительству.ФизическоеЛицо = РанниеДатыПриемаСовместителей.ФизическоеЛицо
	|			И ВсеСотрудникиПоСовместительству.ДатаПриема = РанниеДатыПриемаСовместителей.ДатаПриема
	|
	|СГРУППИРОВАТЬ ПО
	|	ВсеСотрудникиПоСовместительству.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиПоОсновномуМестуРаботы.Сотрудник,
	|	СотрудникиПоОсновномуМестуРаботы.ФизическоеЛицо
	|ПОМЕСТИТЬ ВТОсновныеСотрудникиФизическихЛиц
	|ИЗ
	|	ВТСотрудникиПоОсновномуМестуРаботы КАК СотрудникиПоОсновномуМестуРаботы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СотрудникиПоСовместительству.Сотрудник,
	|	СотрудникиПоСовместительству.ФизическоеЛицо
	|ИЗ
	|	ВТСотрудникиПоСовместительству КАК СотрудникиПоСовместительству
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСотрудникиОрганизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСотрудникиПоОсновномуМестуРаботы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТВсеСотрудникиПоСовместительству
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТРанниеДатыПриемаСовместителей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСотрудникиПоСовместительству";
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Формирует массив физических лиц сотрудников.
//
// Параметры:
//	Сотрудники - массив
//
// Возвращаемое значение - массив уникальных физических лиц.
//	
Функция ФизическиеЛицаСотрудников(Сотрудники) Экспорт
	
	Соответствие = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, "ФизическоеЛицо");
	
	Возврат ОбщегоНазначения.ВыгрузитьКолонку(Соответствие, "Значение", Истина);
	
КонецФункции

#КонецОбласти

#Область ФункцииДляРегламентированнойОтчетности

// Функция рассчитывает среднесписочную численность работников, 
// среднесписочную численность женщин, среднесписочную численность инвалидов за период.
//
// Параметры:
//		Организация
//		НачалоПериода
//		КонецПериода
//
Функция СреднесписочнаяЧисленностьРаботающих(Организация, НачалоПериода, КонецПериода) Экспорт 
	Возврат КадровыйУчетВнутренний.СреднесписочнаяЧисленностьРаботающих(Организация, НачалоПериода, КонецПериода)	
КонецФункции

Процедура ОписаниеПоказателей_РСВ1_2015Кв1(ПоказателиОтчета) Экспорт
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "СрСписЧисл", Истина, Ложь);
	
КонецПроцедуры

Процедура ЗначенияПоказателей_РСВ1_2015Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	Контейнер.Титульный.СрСписЧисл = СреднесписочнаяЧисленностьРаботающих(ПараметрыОтчета.Организация, ПараметрыОтчета.ДатаНачалаПериодаОтчета, ПараметрыОтчета.ДатаКонцаПериодаОтчета);
	
КонецПроцедуры

Процедура ОписаниеПоказателей_РСВ1_2014Кв1(ПоказателиОтчета) Экспорт
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "СрСписЧисл", Истина, Ложь);
	
КонецПроцедуры

Процедура ЗначенияПоказателей_РСВ1_2014Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	Контейнер.Титульный.СрСписЧисл = СреднесписочнаяЧисленностьРаботающих(ПараметрыОтчета.Организация, ПараметрыОтчета.ДатаНачалаПериодаОтчета, ПараметрыОтчета.ДатаКонцаПериодаОтчета);
	
КонецПроцедуры

Процедура ОписаниеПоказателей_РСВ1_2013Кв1(ПоказателиОтчета) Экспорт
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "СрСписЧисл", Истина, Ложь);
	
КонецПроцедуры

Процедура ЗначенияПоказателей_РСВ1_2013Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	Контейнер.Титульный.СрСписЧисл = СреднесписочнаяЧисленностьРаботающих(ПараметрыОтчета.Организация, ПараметрыОтчета.ДатаНачалаПериодаОтчета, ПараметрыОтчета.ДатаКонцаПериодаОтчета);
	
КонецПроцедуры

Процедура ОписаниеПоказателей_РСВ1_2012Кв1(ПоказателиОтчета) Экспорт
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "СрСписЧисл", Истина, Ложь);
	
КонецПроцедуры

Процедура ЗначенияПоказателей_РСВ1_2012Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	Контейнер.Титульный.СрСписЧисл = СреднесписочнаяЧисленностьРаботающих(ПараметрыОтчета.Организация, ПараметрыОтчета.ДатаНачалаПериодаОтчета, ПараметрыОтчета.ДатаКонцаПериодаОтчета);
	
КонецПроцедуры

Процедура ОписаниеПоказателей_РСВ1_2011Кв1(ПоказателиОтчета) Экспорт
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "СрСписЧисл", Истина, Ложь);
	
КонецПроцедуры

Процедура ЗначенияПоказателей_РСВ1_2011Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	Контейнер.Титульный.СрСписЧисл = СреднесписочнаяЧисленностьРаботающих(ПараметрыОтчета.Организация, ПараметрыОтчета.ДатаНачалаПериодаОтчета, ПараметрыОтчета.ДатаКонцаПериодаОтчета);
	
КонецПроцедуры

Процедура ОписаниеПоказателей_СреднесписочнаяЧисленностьРаботников_2007Кв1(ПоказателиОтчета) Экспорт
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "Численность", Истина, Ложь);
	
КонецПроцедуры

Процедура ЗначенияПоказателей_СреднесписочнаяЧисленностьРаботников_2007Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	Контейнер.Титульный.Численность = СреднесписочнаяЧисленностьРаботающих(ПараметрыОтчета.Организация, ПараметрыОтчета.ДатаНачалаПериодаОтчета, ПараметрыОтчета.ДатаКонцаПериодаОтчета);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТаблицаНачисленийСотрудниковПоВременнойТаблице(МенеджерВременныхТаблиц, ИмяВТСотрудникиПериоды, ИмяПоляПериод = "Период", ИмяПоляСотрудник = "Сотрудник") Экспорт
	
	Возврат КадровыйУчетВнутренний.ТаблицаНачисленийСотрудниковПоВременнойТаблице(МенеджерВременныхТаблиц, ИмяВТСотрудникиПериоды, ИмяПоляПериод, ИмяПоляСотрудник);
	
КонецФункции

Процедура ОбновитьТекущиеКадровыеДанныеСотрудников(Сотрудники, СохранитьДатыПриема = Ложь) Экспорт
	
		Если Сотрудники.Количество() = 0 Тогда
			Возврат;
		КонецЕсли; 
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Запрос.УстановитьПараметр("МассивСотрудниковДляОбновления", Сотрудники);
		
		// Подготовим таблицу ИзмеренияДаты для получения среза последних.
		ИзмеренияДаты = Новый ТаблицаЗначений;
		ИзмеренияДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
		ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
		
		Для Каждого Сотрудник Из Сотрудники Цикл
			СтрокаИзмеренияДаты = ИзмеренияДаты.Добавить();
			СтрокаИзмеренияДаты.Сотрудник = Сотрудник;
		КонецЦикла;
		
		// Получим последние значения занятости.
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
			"КадроваяИсторияСотрудников",
			Запрос.МенеджерВременныхТаблиц,
			Истина,
			ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты));
		
		// Подготовим таблицу ИзмеренияДаты Для получения информации о датах приема и увольнения.
		ИзмеренияДаты.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
		ИзмеренияДаты.Колонки.Период.Имя = "ДатаОкончания";
		
		// Сформируем отбор по события прием и увольнение.
		СобытияПриемУвольнение = Новый Массив;
		СобытияПриемУвольнение.Добавить(Перечисления.ВидыКадровыхСобытий.Прием);
		СобытияПриемУвольнение.Добавить(Перечисления.ВидыКадровыхСобытий.Увольнение);
		
		// Получим таблицу событий прием и увольнения.
		ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты);
		
		ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "ВидСобытия","В", СобытияПриемУвольнение);
	
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
			"КадроваяИсторияСотрудников",
			Запрос.МенеджерВременныхТаблиц,
			Истина,
			ОписаниеФильтра,
			ПараметрыПостроения);
			
		Запрос.УстановитьПараметр("СохранитьДатыПриема", СохранитьДатыПриема);
			
		КадровыйУчетВнутренний.ОбновитьТекущиеКадровыеДанныеСотрудников(Запрос);
		
КонецПроцедуры

Процедура ОбновитьЗначенияДоступаСотрудников(Сотрудники) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ОграничиватьДоступНаУровнеЗаписей") Тогда
		Возврат;
	КонецЕсли; 
	
	Если Сотрудники.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = ЗапросВТВсеЗначенияДоступаСотрудников(Сотрудники);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	Запрос.УстановитьПараметр("ПроверяемыеСотрудники", Сотрудники);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СотрудникиНаборыЗначенийДоступа.Ссылка,
		|	СотрудникиНаборыЗначенийДоступа.ЗначениеДоступа
		|ПОМЕСТИТЬ ВТТекущиеЗначенияДоступаСотрудников
		|ИЗ
		|	Справочник.Сотрудники.НаборыЗначенийДоступа КАК СотрудникиНаборыЗначенийДоступа
		|ГДЕ
		|	СотрудникиНаборыЗначенийДоступа.Ссылка В(&ПроверяемыеСотрудники)
		|	И ТИПЗНАЧЕНИЯ(СотрудникиНаборыЗначенийДоступа.ЗначениеДоступа) <> ТИП(Справочник.ФизическиеЛица)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ЗначенияДоступаСотрудников.Сотрудник, ТекущиеЗначенияДоступаСотрудников.Ссылка) КАК Сотрудник,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ЗначенияДоступаСотрудников.Сотрудник ЕСТЬ NULL 
		|					ИЛИ ТекущиеЗначенияДоступаСотрудников.Ссылка ЕСТЬ NULL 
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК НеобходимостьОбновления
		|ПОМЕСТИТЬ ВТСотрудникиСПризнакомОбновления
		|ИЗ
		|	ВТВсеЗначенияДоступаСотрудников КАК ЗначенияДоступаСотрудников
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТТекущиеЗначенияДоступаСотрудников КАК ТекущиеЗначенияДоступаСотрудников
		|		ПО ЗначенияДоступаСотрудников.Сотрудник = ТекущиеЗначенияДоступаСотрудников.Ссылка
		|			И ЗначенияДоступаСотрудников.ЗначениеДоступа = ТекущиеЗначенияДоступаСотрудников.ЗначениеДоступа
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(ЗначенияДоступаСотрудников.Сотрудник, ТекущиеЗначенияДоступаСотрудников.Ссылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СотрудникиСПризнакомОбновления.Сотрудник
		|ИЗ
		|	ВТСотрудникиСПризнакомОбновления КАК СотрудникиСПризнакомОбновления
		|ГДЕ
		|	СотрудникиСПризнакомОбновления.НеобходимостьОбновления";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СотрудникОбъект = Выборка.Сотрудник.ПолучитьОбъект();
			
			Попытка
				СотрудникОбъект.Заблокировать();
			Исключение
				
				ТекстИсключенияЗаписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось обновить права доступа к %1.
						|Возможно, данные сотрудника редактируются другим пользователем'"),
					Выборка.Сотрудник);
				ВызватьИсключение ТекстИсключенияЗаписи;
				
			КонецПопытки;
			
			СотрудникОбъект.Записать();
			
		КонецЦикла; 
		
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ЗапросВТВсеЗначенияДоступаСотрудников(Сотрудники) Экспорт
	
	Возврат КадровыйУчетВнутренний.ЗапросВТВсеЗначенияДоступаСотрудников(Сотрудники);
	
КонецФункции

Процедура ИсключитьПовторениеЗаписейТекущихДанныыхСотрудников(ИмяРегистраТекущихСведений, ОтключитьБизнесЛогику = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РегистрСведений.Сотрудник,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РегистрСведений.ТекущаяОрганизация) КАК КоличествоЗаписей
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК РегистрСведений
		|
		|СГРУППИРОВАТЬ ПО
		|	РегистрСведений.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Сотрудники.Сотрудник
		|ПОМЕСТИТЬ ВТСотрудникиСПовторением
		|ИЗ
		|	ВТСотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.КоличествоЗаписей > 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	СотрудникиСПовторением.Сотрудник
		|ИЗ
		|	ВТСотрудникиСПовторением КАК СотрудникиСПовторением";
		
	Если ВРег(ИмяРегистраТекущихСведений) <> ВРег("ТекущиеКадровыеДанныеСотрудников") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТекущиеКадровыеДанныеСотрудников", ИмяРегистраТекущихСведений);
	КонецЕсли; 
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистра(ИмяРегистраТекущихСведений);
		
		ВыборкаПолей = "МАКСИМУМ(РегистрСведений.ТекущаяОрганизация) КАК ТекущаяОрганизация";
			
		Для каждого ИмяПоля Из ОписаниеРегистра.Ресурсы Цикл
			ВыборкаПолей = ВыборкаПолей + ",
			|	МАКСИМУМ(РегистрСведений." + ИмяПоля + ") КАК " + ИмяПоля;
		КонецЦикла;
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	РегистрСведений.Сотрудник,
			|	ВЫРАЗИТЬ(РегистрСведений.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо КАК ФизическоеЛицо,
			|	ВЫРАЗИТЬ(РегистрСведений.Сотрудник КАК Справочник.Сотрудники).ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	МАКСИМУМ(РегистрСведений.ТекущаяОрганизация) КАК ТекущаяОрганизация
			|ИЗ
			|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК РегистрСведений
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиСПовторением КАК СотрудникиСПовторением
			|		ПО РегистрСведений.Сотрудник = СотрудникиСПовторением.Сотрудник
			|
			|СГРУППИРОВАТЬ ПО
			|	РегистрСведений.Сотрудник,
			|	ВЫРАЗИТЬ(РегистрСведений.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо,
			|	ВЫРАЗИТЬ(РегистрСведений.Сотрудник КАК Справочник.Сотрудники).ГоловнаяОрганизация";
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "МАКСИМУМ(РегистрСведений.ТекущаяОрганизация) КАК ТекущаяОрганизация", ВыборкаПолей);
				
		Если ВРег(ИмяРегистраТекущихСведений) <> ВРег("ТекущиеКадровыеДанныеСотрудников") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТекущиеКадровыеДанныеСотрудников", ИмяРегистраТекущихСведений);
		КонецЕсли; 
			
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Набор = РегистрыСведений[ИмяРегистраТекущихСведений].СоздатьНаборЗаписей();
			Набор.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
			
			ЗаполнитьЗначенияСвойств(Набор.Добавить(), Выборка);
			
			Если ОтключитьБизнесЛогику Тогда
				
				Набор.ОбменДанными.Загрузка = Истина;
				Если ВРег(ИмяРегистраТекущихСведений) = ВРег("ТекущиеКадровыеДанныеСотрудников") Тогда
					РегистрыСведений.ТекущиеКадровыеДанныеСотрудников.УстановитьОсновноеРабочееМестоВОрганизации(Набор);
				КонецЕсли; 
				
			КонецЕсли; 
			
			Набор.Записать();
			
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры

#Область КадровыеДанныеФизическихЛиц

Функция НеобходимыПостоянныеКадровыеДанныеФизическихЛиц(Знач ИмяПоля) Экспорт
	
	Возврат КадровыйУчетВнутренний.НеобходимыПостоянныеКадровыеДанныеФизическихЛиц(ИмяПоля)
	
КонецФункции

Функция ЭтоОбязательноеПолеКадровыхДанныхФизическогоЛица(Знач ИмяПоля) Экспорт
	
	ПропуститьОбработку = Ложь;
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Если ПустаяСтрока(ИмяПоля) 
		ИЛИ ИмяПоля = ВРег("Период")
		ИЛИ ИмяПоля = ВРег("ФизическоеЛицо") Тогда
		
		ПропуститьОбработку = Истина;
		
	КонецЕсли;
	
	Возврат ПропуститьОбработку;
	
КонецФункции

Процедура ДобавитьВТекстЗапросаОписаниеПолей(ТекстЗапроса, ТекстОписанияПолей, СтрокаПоместить) Экспорт
	
	Если НЕ ПустаяСтрока(ТекстОписанияПолей) Тогда
		
		ПозицияДляВстраиванияПолей = Найти(ТекстЗапроса, СтрокаПоместить);
		ТекстЗапроса = СокрЛП(Лев(ТекстЗапроса, ПозицияДляВстраиванияПолей - 1))
			+ ТекстОписанияПолей
			+ Символы.ПС
			+ Сред(ТекстЗапроса, ПозицияДляВстраиванияПолей);
		
	КонецЕсли; 
		
КонецПроцедуры

Функция НеобходимыЗначенияРеквизитовСправочникаФизическиеЛица(Знач ИмяПоля) Экспорт
	
	Возврат КадровыйУчетВнутренний.НеобходимыЗначенияРеквизитовСправочникаФизическиеЛица(ИмяПоля);
			
КонецФункции

// Контактная информация

Функция НеобходимаКонтактнаяИнформацияФизическогоЛица(Знач ИмяПоля) Экспорт
	
	Возврат КадровыйУчетВнутренний.НеобходимаКонтактнаяИнформацияФизическогоЛица(ИмяПоля);
		
КонецФункции

#КонецОбласти

#Область КадровыеДанныеСотрудников

Функция ЭтоОбязательноеПолеКадровыхДанныхСотрудника(Знач ИмяПоля) Экспорт
	
	ПропуститьОбработку = Ложь;
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Если ПустаяСтрока(ИмяПоля) 
		ИЛИ ИмяПоля = ВРег("Период")
		ИЛИ ИмяПоля = ВРег("Сотрудник")
		ИЛИ ИмяПоля = ВРег("ФизическоеЛицо") Тогда
		
		ПропуститьОбработку = Истина;
		
	КонецЕсли;
	
	Возврат ПропуститьОбработку;
	
КонецФункции

Функция НеобходимыПостоянныеКадровыеДанныеСотрудников(Знач ИмяПоля) Экспорт
	
	Возврат КадровыйУчетВнутренний.НеобходимыПостоянныеКадровыеДанныеСотрудников(ИмяПоля)
	
КонецФункции

// Текущие кадровые данные

Функция НеобходимыСведенияТекущихКадровыхДанныхСотрудников(Знач ИмяПоля) Экспорт
	
	Возврат КадровыйУчетВнутренний.НеобходимыСведенияТекущихКадровыхДанныхСотрудников(ИмяПоля);
	
КонецФункции

Функция ПутьКДаннымСведенийТекущихКадровыхДанныхСотрудников(Знач ИмяПоля) Экспорт
	
	Возврат КадровыйУчетВнутренний.ПутьКДаннымСведенийТекущихКадровыхДанныхСотрудников(ИмяПоля);
	
КонецФункции

Функция НеобходимыСведенияТекущихТарифныхСтавкахСотрудников(Знач ИмяПоля) Экспорт
	
	Возврат КадровыйУчетВнутренний.НеобходимыСведенияТекущихТарифныхСтавкахСотрудников(ИмяПоля);
	
КонецФункции

Функция ПутьКДаннымСведенийТекущихТарифныхСтавокСотрудников(Знач ИмяПоля) Экспорт
	
	Возврат КадровыйУчетВнутренний.ПутьКДаннымСведенийТекущихТарифныхСтавокСотрудников(ИмяПоля);
	
КонецФункции

// Сведения о приказах на прием и увольнение.

Функция ЗапросВТСведенийПриказовОПриеме(ИмяВТКадроваяИсторияСотрудников, ТолькоРазрешенные, ИмяВТСведенийПриказовОПриеме = "ВТСведенийПриказовОПриеме") Экспорт
	
	Возврат КадровыйУчетВнутренний.ЗапросВТСведенийПриказовОПриеме(ИмяВТКадроваяИсторияСотрудников, ТолькоРазрешенные, ИмяВТСведенийПриказовОПриеме);
	
КонецФункции

Функция ЗапросВТСведенийПриказовОбУвольнении(ИмяВТКадроваяИсторияСотрудников, ТолькоРазрешенные, ИмяВТСведенийПриказовОбУвольнении = "ВТСведенийПриказовОбУвольнении") Экспорт
	
	Возврат КадровыйУчетВнутренний.ЗапросВТСведенийПриказовОбУвольнении(ИмяВТКадроваяИсторияСотрудников, ТолькоРазрешенные, ИмяВТСведенийПриказовОбУвольнении);
	
КонецФункции

Функция НеобходимыСведенияПриказаОПриеме(Знач ИмяПоля) Экспорт
	
	Возврат КадровыйУчетВнутренний.НеобходимыСведенияПриказаОПриеме(ИмяПоля);
	
КонецФункции

Функция ПутьКДаннымСведенийПриказаОПриемеОбУвольнении(Знач ИмяПоля) Экспорт
	
	Возврат КадровыйУчетВнутренний.ПутьКДаннымСведенийПриказаОПриемеОбУвольнении(ИмяПоля);
	
КонецФункции

// Сведения кадровой истории сотрудников.

Функция НеобходимыСведенияКадровойИсторииСотрудников(Знач ИмяПоля) Экспорт
	
	Возврат КадровыйУчетВнутренний.НеобходимыСведенияКадровойИсторииСотрудников(ИмяПоля);
	
КонецФункции

Функция ПутьКДаннымСведенийКадровойИсторииСотрудников(Знач ИмяПоля) Экспорт
	
	Возврат КадровыйУчетВнутренний.ПутьКДаннымСведенийКадровойИсторииСотрудников(ИмяПоля);
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияКадроваяИсторияСотрудников(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных) Экспорт
	
	КадровыйУчетВнутренний.ДобавитьТекстЗапросаВТСведенияКадроваяИсторияСотрудников(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
	
КонецПроцедуры

// Сведения об оплате труда

Функция НеобходимыСведенияОбОплатеТруда(Знач ИмяПоля) Экспорт
	
	Возврат КадровыйУчетВнутренний.НеобходимыСведенияОбОплатеТруда(ИмяПоля);
	
КонецФункции

Функция ПутьКДаннымСведенийОбОплатеТруда(Знач ИмяПоля) Экспорт
	
	Возврат КадровыйУчетВнутренний.ПутьКДаннымСведенийОбОплатеТруда(ИмяПоля);
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииФормированияОтчетов

Функция ПолучитьСтруктуруПараметровКадровогоПриказа() Экспорт
	
	СтруктураПараметровКадровогоПриказа = Новый Структура;
	
	СтруктураПараметровКадровогоПриказа.Вставить("Ссылка");
	СтруктураПараметровКадровогоПриказа.Вставить("НазваниеОрганизации", "");
	СтруктураПараметровКадровогоПриказа.Вставить("КодПоОКПО", "");
	СтруктураПараметровКадровогоПриказа.Вставить("НомерДок", "");
	СтруктураПараметровКадровогоПриказа.Вставить("ДатаДок", '00010101');
	СтруктураПараметровКадровогоПриказа.Вставить("Работник", "");
	СтруктураПараметровКадровогоПриказа.Вставить("Пол");
	СтруктураПараметровКадровогоПриказа.Вставить("ТрудовойДоговорЧисло", "    ");
	СтруктураПараметровКадровогоПриказа.Вставить("ТрудовойДоговорМесяцГод", "______________ 20__");
	СтруктураПараметровКадровогоПриказа.Вставить("ТрудовойДоговорДата", '00010101');
	СтруктураПараметровКадровогоПриказа.Вставить("ТрудовойДоговорНомер", "____");
	СтруктураПараметровКадровогоПриказа.Вставить("ТабельныйНомер", "");
	СтруктураПараметровКадровогоПриказа.Вставить("Подразделение");
	СтруктураПараметровКадровогоПриказа.Вставить("Должность");
	СтруктураПараметровКадровогоПриказа.Вставить("РазрядКатегория");
	СтруктураПараметровКадровогоПриказа.Вставить("ДолжностьРуководителя", "");
	СтруктураПараметровКадровогоПриказа.Вставить("РуководительРасшифровкаПодписи", "");
	
	Возврат СтруктураПараметровКадровогоПриказа;
		
КонецФункции

Процедура ЗаполнитьПараметрыКадровогоПриказа(Параметры, КадровыеДанные, УчитыватьНастройкиФормированияПечатныхФорм = Истина) Экспорт
	
	ЗаполнитьЗначенияСвойств(Параметры, КадровыеДанные);
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	Если НЕ УчитыватьНастройкиФормированияПечатныхФорм
		ИЛИ НастройкиПечатныхФорм.УдалятьПрефиксыОрганизацииИИБИзНомеровКадровыхПриказов Тогда
		
		Параметры.НомерДок = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Параметры.НомерДок, Истина, Истина);
		
	КонецЕсли;
	
	Если УчитыватьНастройкиФормированияПечатныхФорм
		И НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений
		И ЗначениеЗаполнено(Параметры.Подразделение) Тогда
		
		Параметры.Подразделение = Параметры.Подразделение.ПолноеНаименование();
		
	КонецЕсли; 
	
	Параметры.ДатаДок = ?(ЗначениеЗаполнено(Параметры.ДатаДок), Параметры.ДатаДок, ТекущаяДатаСеанса());
	Параметры.ТабельныйНомер = ПрефиксацияОбъектовКлиентСервер.УдалитьПрефиксыИзНомераОбъекта(Параметры.ТабельныйНомер, Истина, Истина);
	
	Если ЗначениеЗаполнено(Параметры.ТрудовойДоговорДата) Тогда
		
		ПредставлениеДатыТрудовогоДоговора  = Формат(Параметры.ТрудовойДоговорДата, "ДЛФ=DD");
		
		Параметры.ТрудовойДоговорЧисло = СокрЛП(Лев(ПредставлениеДатыТрудовогоДоговора,2));
		Параметры.ТрудовойДоговорМесяцГод = СокрЛП(Прав(ПредставлениеДатыТрудовогоДоговора, СтрДлина(ПредставлениеДатыТрудовогоДоговора)-2));
		
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Параметры.РазрядКатегория) Тогда
		Параметры.РазрядКатегория = ", " + Параметры.РазрядКатегория;
	КонецЕсли; 
	
КонецПроцедуры	

Функция ДополнительныеСведенияУнифицированнойФормыТ2(СтрокиДанных, ДатаОтчета) Экспорт
	
	Возврат КадровыйУчетВнутренний.ДополнительныеСведенияУнифицированнойФормыТ2(СтрокиДанных, ДатаОтчета)
	
КонецФункции

Функция СформироватьЗапросДляТ1(МассивОбъектов) Экспорт
	
	Возврат КадровыйУчетВнутренний.СформироватьЗапросДляТ1(МассивОбъектов);
	
КонецФункции

Функция СформироватьЗапросДляТ5(МассивОбъектов) Экспорт
	
	Возврат КадровыйУчетВнутренний.СформироватьЗапросДляТ5(МассивОбъектов);
	
КонецФункции

Функция СформироватьЗапросДляТ6(МассивОбъектов) Экспорт
	
	Возврат КадровыйУчетВнутренний.СформироватьЗапросДляТ6(МассивОбъектов);
	
КонецФункции

Функция СформироватьЗапросДляТ8(МассивОбъектов) Экспорт
	
	Возврат КадровыйУчетВнутренний.СформироватьЗапросДляТ8(МассивОбъектов);		
	
КонецФункции	

Процедура СоздатьВТДанныеДокументовКадровыхПеремещений(МенеджерВременныхТаблиц, МассивОбъектов) Экспорт
	
	КадровыйУчетВнутренний.СоздатьВТДанныеДокументовКадровыхПеремещений(МенеджерВременныхТаблиц, МассивОбъектов);
	
КонецПроцедуры

Процедура СоздатьВТДанныеДокументовПриемНаРаботу(МенеджерВременныхТаблиц, МассивОбъектов) Экспорт
	
	КадровыйУчетВнутренний.СоздатьВТДанныеДокументовПриемНаРаботу(МенеджерВременныхТаблиц, МассивОбъектов);
	
КонецПроцедуры

Процедура СоздатьВТДанныеДокументовУвольнение(МенеджерВременныхТаблиц, МассивОбъектов) Экспорт
	
	КадровыйУчетВнутренний.СоздатьВТДанныеДокументовУвольнение(МенеджерВременныхТаблиц, МассивОбъектов);
	
КонецПроцедуры

Функция КадровыеДанныеДляПечатиКадровыхПриказов() Экспорт
	
	Возврат КадровыйУчетВнутренний.КадровыеДанныеДляПечатиКадровыхПриказов();
	
КонецФункции

Функция ОписанияСоставаНачисленийПоВременнойТаблице(МенеджерВременныхТаблиц, ИмяВТСотрудникиПериоды, ИмяПоляПериод = "Период", ИмяПоляСотрудник = "Сотрудник") Экспорт
	
	Возврат КадровыйУчетВнутренний.ОписанияСоставаНачисленийПоВременнойТаблице(МенеджерВременныхТаблиц, ИмяВТСотрудникиПериоды, ИмяПоляПериод, ИмяПоляСотрудник);
	
КонецФункции

Функция ЗапросВТТарифныеСтавкиСотрудников(ТолькоРазрешенные, ИмяВТТарифныеСтавкиСотрудников, ИмяВременнойТаблицыОтборовСотрудников, ПоляОтбораСотрудников, ПоляОтбораПериодическихДанных) Экспорт
	
	Возврат КадровыйУчетВнутренний.ЗапросВТТарифныеСтавкиСотрудников(ТолькоРазрешенные, ИмяВТТарифныеСтавкиСотрудников, ИмяВременнойТаблицыОтборовСотрудников, ПоляОтбораСотрудников, ПоляОтбораПериодическихДанных);
	
КонецФункции

Функция НеобходимыКадровыеДанныеФизическогоЛица(Знач ИмяПоля) Экспорт
	
	Возврат КадровыйУчетВнутренний.НеобходимыКадровыеДанныеФизическогоЛица(ИмяПоля);
	
КонецФункции

Функция ЗапросВТСотрудникиОрганизации(ТолькоРазрешенные, ИмяВТСотрудникиОрганизации, Параметры) Экспорт
	
	Возврат КадровыйУчетВнутренний.ЗапросВТСотрудникиОрганизации(ТолькоРазрешенные, ИмяВТСотрудникиОрганизации, Параметры);
	
КонецФункции

Процедура ЗапомнитьСписокСотрудниковДляОбновления(Источник, Отказ) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		
		ИмяРегистраСведений = Источник.Метаданные().Имя;
		
		// Обновлять записи необходимо, только при записи набора, содержащего первичные данные.
		Если Источник.ДополнительныеСвойства.Свойство("ЭтоВторичныйНабор") 
			И Источник.ДополнительныеСвойства.ЭтоВторичныйНабор Тогда
			Возврат;
		КонецЕсли;
		
		// Соберем информацию о сотрудниках, у которых меняются данные кадровой истории.
	    Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		ИзмеренияДаты = Новый ТаблицаЗначений;
		ИзмеренияДаты.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
		ИзмеренияДаты.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
		СтрокаИзмеренияДаты = ИзмеренияДаты.Добавить();
		
		ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты);
		
		ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "=", Источник.Отбор.Регистратор.Значение.Ссылка);
	
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
			ИмяРегистраСведений,
			Запрос.МенеджерВременныхТаблиц,
			Истина,
			ОписаниеФильтра,
			ПараметрыПостроения,
			"ВТПредыдущиеЗначения");
		
		Запрос.УстановитьПараметр("Регистратор", Источник.Отбор.Регистратор.Значение.Ссылка);
		Запрос.УстановитьПараметр("Источник", Источник.Выгрузить());
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	НаборИсточник.Сотрудник
		|ПОМЕСТИТЬ ВТСохраняемыеЗначения
		|ИЗ
		|	&Источник КАК НаборИсточник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА СохраняемыеЗначения.Сотрудник ЕСТЬ NULL 
		|			ТОГДА ПредыдущиеЗначения.Сотрудник
		|		ИНАЧЕ СохраняемыеЗначения.Сотрудник
		|	КОНЕЦ КАК Сотрудник
		|ИЗ
		|	ВТПредыдущиеЗначения КАК ПредыдущиеЗначения
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТСохраняемыеЗначения КАК СохраняемыеЗначения
		|		ПО ПредыдущиеЗначения.Сотрудник = СохраняемыеЗначения.Сотрудник";
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Источник.ДополнительныеСвойства.Вставить("МассивСотрудниковДляОбновления", РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Сотрудник"));
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьТекущиеТарифныеСтавки(МассивСотрудниковДляОбновления) Экспорт
	
	КадровыйУчетВнутренний.ОбновитьТекущиеТарифныеСтавки(МассивСотрудниковДляОбновления);
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеРабочихМест

// Возвращает структуру параметров для ЗапросВТРабочиеМестаСотрудниковПоСпискуСотрудников.
//
// Параметры:
//				Сотрудники - СправочникСсылка.Сотрудники, массив сотрудников, если параметр опущен
//							рабочие места будут подбираться по всем сотрудникам соответствующим отбору
//							по организации и подразделению.
//				НачалоПериода - Дата, Строка (при встраивание в тест другого запроса).
//				ОкончаниеПериода - Дата, если не указана - будут отбираться все рабочие места,
//							начиная с НачалоПериода.
//								- Строка (при встраивание в тест другого запроса).
//
// Возвращаемое значение:
//   Структура - Содержит ключи, возвращаемые методом ПараметрыДляЗапросВТРабочиеМестаСотрудников.
//				СписокСотрудников - Массив ссылок справочника сотрудники.
//				НачалоПериода - Дата, значение по умолчанию '00010101'. 
//				ОкончаниеПериода - Дата, значение по умолчанию '00010101'. При установке должно выполняться условие
//					ОкончаниеПериода >= НачалоПериода. Используется для выборки кадровых данных сотрудников, если
//					параметр не указан, выборка будет производиться на текущую дату сеанса.
//
Функция ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоСпискуСотрудников(Сотрудники = Неопределено, НачалоПериода = '00010101', ОкончаниеПериода = '00010101') Экспорт
		
	ПараметрыПолученияРабочихМестСотрудников = ПараметрыДляЗапросВТРабочиеМестаСотрудников();
	
	ПараметрыПолученияРабочихМестСотрудников.Вставить("НачалоПериода", НачалоПериода);
	ПараметрыПолученияРабочихМестСотрудников.Вставить("ОкончаниеПериода", ОкончаниеПериода);
	
	Если ТипЗнч(Сотрудники) = Тип("СправочникСсылка.Сотрудники") Тогда
		СписокСотрудников = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудники);
	Иначе
		СписокСотрудников = Сотрудники;
	КонецЕсли;
	
	ПараметрыПолученияРабочихМестСотрудников.Вставить("СписокСотрудников", СписокСотрудников);

	Возврат ПараметрыПолученияРабочихМестСотрудников;
	
КонецФункции

// Возвращает структуру параметров для ЗапросВТРабочиеМестаСотрудниковПоВременнойТаблице.
//
// Параметры:
//			ИмяВТСотрудникиПериоды - Строка
//			ИмяПоляСотрудник - Строка, 
//			ИмяПоляНачалоПериода - Строка
//			ИмяПоляОкончаниеПериода - Строка
//
// Возвращаемое значение:
//   Структура - Содержит ключи, возвращаемые методом ПараметрыДляЗапросВТРабочиеМестаСотрудников
//				ИмяВТСотрудникиПериоды
//				ИмяПоляСотрудник
//				ИмяПоляНачалоПериода
//				ИмяПоляОкончаниеПериода.
//
Функция ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоВременнойТаблице(ИмяВТСотрудникиПериоды = "ВТСотрудникиПериоды", ИмяПоляСотрудник = "Сотрудник", ИмяПоляНачалоПериода = "НачалоПериода", ИмяПоляОкончаниеПериода = "ОкончаниеПериода") Экспорт
		
	ПараметрыПолученияРабочихМестСотрудников = ПараметрыДляЗапросВТРабочиеМестаСотрудников();
	
	ПараметрыПолученияРабочихМестСотрудников.Вставить("ИмяВТСотрудникиПериоды", ИмяВТСотрудникиПериоды);
	ПараметрыПолученияРабочихМестСотрудников.Вставить("ИмяПоляСотрудник", ИмяПоляСотрудник);
	ПараметрыПолученияРабочихМестСотрудников.Вставить("ИмяПоляНачалоПериода", ИмяПоляНачалоПериода);
	ПараметрыПолученияРабочихМестСотрудников.Вставить("ИмяПоляОкончаниеПериода", ИмяПоляОкончаниеПериода);

	Возврат ПараметрыПолученияРабочихМестСотрудников;
	
КонецФункции

// Создает временную таблицу в переданном менеджере временных таблиц.
//
// Параметры:
//		МенеджерВременныхТаблиц 		- МенеджерВременныхТаблиц
//		ТолькоРазрешенные				- Булево
//		Параметры 						- Структура, см. функцию ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоСпискуСотрудников.
//		ИмяВТРабочиеМестаСотрудников	- Строка
//
Процедура СоздатьВТРабочиеМестаСотрудников(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТРабочиеМестаСотрудников = "ВТРабочиеМестаСотрудников") Экспорт
	
	Запрос = ЗапросВТРабочиеМестаСотрудниковПоСпискуСотрудников(ТолькоРазрешенные, ИмяВТРабочиеМестаСотрудников, Параметры);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

// Создает временную таблицу в переданном менеджере временных таблиц.
//
// Параметры:
//		МенеджерВременныхТаблиц 		- МенеджерВременныхТаблиц
//		ТолькоРазрешенные				- Булево
//		Параметры 						- Структура, см. функцию ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоВременнойТаблице.
//		ИмяВТРабочиеМестаСотрудников	- Строка
//
Процедура СоздатьВТРабочиеМестаСотрудниковПоВременнойТаблице(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТРабочиеМестаСотрудников = "ВТРабочиеМестаСотрудников") Экспорт
	
	Запрос = ЗапросВТРабочиеМестаСотрудниковПоВременнойТаблице(ТолькоРазрешенные, ИмяВТРабочиеМестаСотрудников, Параметры);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ЗапросВТРабочиеМестаСотрудниковПоСпискуСотрудников(ТолькоРазрешенные, ИмяВТРабочиеМестаСотрудников, Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	ИмяВТСотрудникиПериоды = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТСотрудникиПериоды");
	
	Если ТипЗнч(Параметры.НачалоПериода) = Тип("Строка") Тогда
		ТекстДатаНачала = Параметры.НачалоПериода;
	Иначе
		Если ТипЗнч(Параметры.НачалоПериода) <> Тип("Дата") Тогда
			Параметры.НачалоПериода = '00010101';
		КонецЕсли;
		ТекстДатаНачала = "ДАТАВРЕМЯ(" + Формат(Параметры.НачалоПериода, "ДФ='гггг, М, д, Ч, м, с'; ДП=") + ")";
	КонецЕсли;
	
	Если ТипЗнч(Параметры.ОкончаниеПериода) = Тип("Строка") Тогда
		ТекстДатаОкончания = Параметры.ОкончаниеПериода;
	Иначе
		Если ТипЗнч(Параметры.ОкончаниеПериода) <> Тип("Дата") Тогда
			Параметры.ОкончаниеПериода = '00010101';
		КонецЕсли;
		ТекстДатаОкончания = "ДАТАВРЕМЯ(" + Формат(Параметры.ОкончаниеПериода, "ДФ='гггг, М, д, Ч, м, с'; ДП=") + ")";
	КонецЕсли;
	
	ТекстЗапросаВТСотрудникиПериоды =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	&НачалоПериода КАК НачалоПериода,
		|	&ОкончаниеПериода КАК ОкончаниеПериода
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	&ТекстОтборовСотрудникиПериоды";
		
	Если НЕ ТолькоРазрешенные Тогда
		ТекстЗапросаВТСотрудникиПериоды = СтрЗаменить(ТекстЗапросаВТСотрудникиПериоды, " РАЗРЕШЕННЫЕ", "");
	КонецЕсли;
	
	ТекстЗапросаВТСотрудникиПериоды = СтрЗаменить(ТекстЗапросаВТСотрудникиПериоды, "&НачалоПериода", ТекстДатаНачала);
	ТекстЗапросаВТСотрудникиПериоды = СтрЗаменить(ТекстЗапросаВТСотрудникиПериоды, "&ОкончаниеПериода", ТекстДатаОкончания);
	ТекстЗапросаВТСотрудникиПериоды = СтрЗаменить(ТекстЗапросаВТСотрудникиПериоды, "ВТСотрудникиПериоды", ИмяВТСотрудникиПериоды);
	
	ТекстОтборовСотрудникиПериоды = "";
	
	Если Параметры.СписокСотрудников <> Неопределено Тогда
		
		ТекстОтборовСотрудникиПериоды = "Сотрудники.Ссылка В(&СписокСотрудников)";
		
		Запрос.УстановитьПараметр("СписокСотрудников", Параметры.СписокСотрудников);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.Организация) Тогда
		
		ТекстОтборовСотрудникиПериоды = ?(ПустаяСтрока(ТекстОтборовСотрудникиПериоды), "", ТекстОтборовСотрудникиПериоды + Символы.ПС + "И ")
			+ "Сотрудники.ГоловнаяОрганизация = &ГоловнаяОрганизация";
			
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Параметры.Организация));
			
	КонецЕсли; 
	
	ТекстЗапросаВТСотрудникиПериоды = СтрЗаменить(ТекстЗапросаВТСотрудникиПериоды, "&ТекстОтборовСотрудникиПериоды", ?(ПустаяСтрока(ТекстОтборовСотрудникиПериоды), "(ИСТИНА)", ТекстОтборовСотрудникиПериоды));
	
	Запрос.Текст = ТекстЗапросаВТСотрудникиПериоды;
	
	ПараметрыПоВТ = ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоВременнойТаблице();
	ЗаполнитьЗначенияСвойств(ПараметрыПоВТ, Параметры);
	
	ПараметрыПоВТ.ИмяВТСотрудникиПериоды = ИмяВТСотрудникиПериоды;

	ЗапросПоВТ = ЗапросВТРабочиеМестаСотрудниковПоВременнойТаблице(ТолькоРазрешенные, ИмяВТРабочиеМестаСотрудников, ПараметрыПоВТ);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(Запрос, ЗапросПоВТ);
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТРабочиеМестаСотрудниковПоВременнойТаблице(ТолькоРазрешенные, ИмяВТРабочиеМестаСотрудников, Параметры) Экспорт
	
	Возврат КадровыйУчетВнутренний.ЗапросВТРабочиеМестаСотрудниковПоВременнойТаблице(ТолькоРазрешенные, ИмяВТРабочиеМестаСотрудников, Параметры);
	
КонецФункции

Функция ПоляВТРабочиеМестаСотрудников() Экспорт
	
	Возврат КадровыйУчетВнутренний.ПоляВТРабочиеМестаСотрудников();
	
КонецФункции

// Возвращает структуру параметров для, формирующих ВТРабочиеМестаСотрудников.
//
// Возвращаемое значение:
//   Структура - Содержит ключи:
//				Организация - СправочникСсылка.Организации, если параметр опустить в таблицу войдут все сотрудник
//					независимо от организации.
//				ОтбиратьПоГоловнойОрганизации - если Истина, то отбор по головной организации, иначе по текущей организации.
//					По умолчанию - ЛОЖЬ
//				Подразделение - СправочникСсылка.ПодразделенияОрганизаций, в таблицу войдут сотрудники указанного подразделения
//					и всех подразделений, подчиненных указанному, если параметр опустить в таблицу войдут все сотрудники.
//
Функция ПараметрыДляЗапросВТРабочиеМестаСотрудников()
	
	Возврат КадровыйУчетВнутренний.ПараметрыДляЗапросВТРабочиеМестаСотрудников();
	
КонецФункции

#КонецОбласти

#Область СобытияРегистровСведений

Процедура КадроваяИсторияСотрудниковПередЗаписью(НаборЗаписей, Отказ) Экспорт
	
	КадровыйУчетВнутренний.КадроваяИсторияСотрудниковПередЗаписью(НаборЗаписей, Отказ);
	
КонецПроцедуры

Процедура КадроваяИсторияСотрудниковПриЗаписи(НаборЗаписей, Отказ) Экспорт
	
	КадровыйУчетВнутренний.КадроваяИсторияСотрудниковПриЗаписи(НаборЗаписей, Отказ);
	
КонецПроцедуры

Процедура ПлановыеНачисленияПередЗаписью(НаборЗаписей, Отказ) Экспорт
	
	КадровыйУчетВнутренний.ПлановыеНачисленияПередЗаписью(НаборЗаписей, Отказ);
	
КонецПроцедуры

Процедура ПлановыеНачисленияПриЗаписи(НаборЗаписей, Отказ) Экспорт
	
	КадровыйУчетВнутренний.ПлановыеНачисленияПриЗаписи(НаборЗаписей, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Процедура ОписатьДокумент(СсылкаНаЭлемент = Неопределено, Наименование = "", КодМВД = "", КодПФР = "")

	Если Не ЗначениеЗаполнено(СсылкаНаЭлемент) Тогда
		Если Наименование = "" Тогда
			Возврат
		КонецЕсли;
		СсылкаНаЭлемент = Справочники.ВидыДокументовФизическихЛиц.НайтиПоНаименованию(Наименование);
	КонецЕсли;

	Если ЗначениеЗаполнено(СсылкаНаЭлемент) Тогда
		ДанныеИБ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаЭлемент, "КодМВД, КодПФР");
		Если ДанныеИБ.КодМВД = КодМВД И ДанныеИБ.КодПФР = КодПФР Тогда
			Возврат
		КонецЕсли;
		Элемент = СсылкаНаЭлемент.ПолучитьОбъект();
	Иначе
		Элемент = Справочники.ВидыДокументовФизическихЛиц.СоздатьЭлемент();
	КонецЕсли;

	Если ЗначениеЗаполнено(Наименование) Тогда
		Элемент.Наименование = Наименование;
	КонецЕсли;
	Элемент.КодМВД = КодМВД;
	Элемент.КодПФР = КодПФР;
	
	Элемент.ОбменДанными.Загрузка = Истина;
	Элемент.Записать();

КонецПроцедуры

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.0.0";
	Обработчик.Процедура = "КадровыйУчет.ОбновитьВидыКонтактнойИнформацииФизическогоЛица";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.0";
	Обработчик.Процедура = "КадровыйУчет.ЗаполнитьДокументыФизическихЛицПоКлассификаторуМВД";
	Обработчик.Опциональный = Ложь;
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.3.11";
	Обработчик.Процедура = "КадровыйУчет.ПеренестиТекущиеКадровыеДанныеСотрудниковИзСправочникаВРегистры";
	Обработчик.Опциональный = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.3.15";
	Обработчик.Процедура = "КадровыйУчет.ЗаполнитьФИОФизическихЛицПоНаименованию";
	Обработчик.Опциональный = Ложь;
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.ОснованияУвольнения) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.5.3";
		Обработчик.Процедура = "Справочники.ОснованияУвольнения.НачальноеЗаполнение";
		Обработчик.Опциональный = Ложь;
		Обработчик.НачальноеЗаполнение = Истина;
		Обработчик.ОбщиеДанные = ЗарплатаКадры.ЭтоОбщиеДанные(Метаданные.Справочники.ОснованияУвольнения);
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.3";
	Обработчик.Процедура = "КадровыйУчет.ПеренестиТекущиеВидыЗанятостиСправочниковВРегистр";
	Обработчик.Опциональный = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.16";
	Обработчик.Процедура = "КадровыйУчет.ЗаполнитьФизическоеЛицоВКадроваяИсторияСотрудников";
	Обработчик.Опциональный = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.16";
	Обработчик.Процедура = "КадровыйУчет.ЗаполнитьФизическоеЛицоВПлановыеНачисления";
	Обработчик.Опциональный = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.19";
	Обработчик.Процедура = "КадровыйУчет.ЗаполнитьОрганизациюТекущихДанныхСотрудников";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.11";
	Обработчик.Процедура = "КадровыйУчет.ПерезаполнитьСлужебныеИдентификаторыФизическихЛиц";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.10";
	Обработчик.Процедура = "СотрудникиФормы.ОбновитьРежимыРаботыФормы";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.19";
	Обработчик.Процедура = "КадровыйУчет.УдалитьУправляющиеКонструкцииСлужебныхИдентификаторовФизическихЛиц";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.22";
	Обработчик.Процедура = "КадровыйУчет.ЗаполнитьЗаписиПоУмолчаниюРегистровСведений";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.31";
	Обработчик.Процедура = "СотрудникиФормы.ОбновитьРежимыРаботыФормы";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.7.22";
	Обработчик.Процедура = "КадровыйУчет.ИсключитьПовторениеТекущихДанныхСотрудников";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.12.8";
	Обработчик.Процедура = "КадровыйУчет.ЗаполнитьНаименованияКраткиеДолжностей";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.13.2";
	Обработчик.Процедура = "КадровыйУчет.ЗаполнитьНаборыЗначенийДоступаСотрудников";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.15.3";
	Обработчик.Процедура = "КадровыйУчет.ЗаполнитьОбособленныеПодразделенияКадровыхПереводов";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.17.2";
	Обработчик.Процедура = "КадровыйУчет.УстановитьПризнакТолькоРоссийскийАдресовФизическогоЛица";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.18.14";
	Обработчик.Процедура = "КадровыйУчет.ЗаполнитьГоловногоСотрудника";
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.ОснованияУвольнения) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.0.20.24";
		Обработчик.Процедура = "Справочники.ОснованияУвольнения.ОбновитьСправочникИзКлассификатора";
		Обработчик.Опциональный = Ложь;
		Обработчик.ОбщиеДанные = ЗарплатаКадры.ЭтоОбщиеДанные(Метаданные.Справочники.ОснованияУвольнения);
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет справочник ДокументыФизическихЛиц по классификатору МВД.
//
Процедура ЗаполнитьДокументыФизическихЛицПоКлассификаторуМВД() Экспорт
	
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.ПаспортСССР,			"", 						"01", НСтр("ru='ПАСПОРТ'"));		// R-ББ 999999
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.ЗагранпаспортСССР,		"", 						"02", НСтр("ru='ЗГПАСПОРТ'"));		// 99 0999999
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.СвидетельствоОРождении,	"", 						"03", НСтр("ru='СВИД О РОЖД'"));	// R-ББ 999999
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.УдостоверениеОфицера,	"", 						"04", НСтр("ru='УДОСТ ОФИЦЕРА'"));	// ББ 9999990
	ОписатьДокумент(, НСтр("ru='Справка об освобождении'"),														"05", НСтр("ru='СПРАВКА ОБ ОСВ'"));	// -
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.ПаспортМинморфлота, 	"",							"06", НСтр("ru='ПАСПОРТ МОРФЛТ'"));	// ББ 999999
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.ВоенныйБилет,
		НСтр("ru='Военный билет солдата (матроса, сержанта, старшины)'"), 										"07", НСтр("ru='ВОЕННЫЙ БИЛЕТ'"));	// ББ 0999999
	// -
	ОписатьДокумент(, НСтр("ru='Временное удостоверение, выданное взамен военного билета'"),					"08", НСтр("ru='ПРОЧЕЕ'"));
	// 99 9999999
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.ДипломатическийПаспорт, "",							"09", НСтр("ru='ДИППАСПОРТ РФ'"));
	ОписатьДокумент(, НСтр("ru='Иностранный паспорт'"),															"10", НСтр("ru='ИНПАСПОРТ'"));		// -
	// -
	ОписатьДокумент(, НСтр("ru='Свидетельство о регистрации ходатайства иммигранта о признании его беженцем'"), "11", НСтр("ru='СВИД БЕЖЕНЦА'"));
	ОписатьДокумент(, НСтр("ru='Вид на жительство'"),															"12", НСтр("ru='ВИД НА ЖИТЕЛЬ'"));	// -
	ОписатьДокумент(, НСтр("ru='Удостоверение беженца'"),														"13", НСтр("ru='УДОСТ БЕЖЕНЦА'"));	// -
	// -
	ОписатьДокумент(, НСтр("ru='Временное удостоверение личности гражданина РФ'"),								"14", НСтр("ru='ВРЕМ УДОСТ'"));
	// -
	ОписатьДокумент(, НСтр("ru='Разрешение на временное проживание в Российской Федерации'"),					"15", НСтр("ru='ПРОЧЕЕ'"));
	ОписатьДокумент(,
		// ББ-999 9999999
		НСтр("ru='Свидетельство о предоставлении временного убежища на территории Российской Федерации'"), 		"18", НСтр("ru='ПРОЧЕЕ'"));
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ,				"",							"21", НСтр("ru='ПАСПОРТ РОССИИ'"));	// 99 99 9999990
	// 99 9999999
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.ЗагранпаспортРФ,		"",							"22", НСтр("ru='ЗГПАСПОРТ РФ'"));
	ОписатьДокумент(, 
		// -
		НСтр("ru='Свидетельство о рождении, выданное уполномоченным органом иностранного государства'"), 		"23", НСтр("ru='ПРОЧЕЕ'"));
	ОписатьДокумент(, НСтр("ru='Удостоверение личности военнослужащего Российской Федерации'"),					"24", НСтр("ru='ПРОЧЕЕ'"));			// ББ 9999999
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.ПаспортМоряка,			"",							"26", НСтр("ru='ПАСПОРТ МОРЯКА'"));	// ББ 0999999
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.ВоенныйБилетОфицераЗапаса, "",						"27", НСтр("ru='БИЛЕТ ОЗ'"));		// ББ 0999999
	ОписатьДокумент(, НСтр("ru='Иные документы, выдаваемые органами МВД'"),										"91", НСтр("ru='ПРОЧЕЕ'"));			// -
	
КонецПроцедуры

// Процедура переносит текущие данные об организации, подразделении, должности, дате приема, дате увольнения и тарифной
// ставке сотрудника  из справочника "Сотрудники" в регистры сведений "ТекущиеКадровыеДанныеСотрудников" и
// "ТекущаяТарифнаяСтавкаСотрудников".
//
Процедура ПеренестиТекущиеКадровыеДанныеСотрудниковИзСправочникаВРегистры() Экспорт
	КадровыйУчетВнутренний.ПеренестиТекущиеКадровыеДанныеСотрудниковИзСправочникаВРегистры();
КонецПроцедуры

// Процедура производит первоначальное заполнение ФИО физических лиц
// ФИО берется из поля наименование.
Процедура ЗаполнитьФИОФизическихЛицПоНаименованию() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ФизическиеЛица.Ссылка,
	               |	ФизическиеЛица.Наименование
	               |ИЗ
	               |	Справочник.ФизическиеЛица КАК ФизическиеЛица
	               |ГДЕ
	               |	ФизическиеЛица.ЭтоГруппа = ЛОЖЬ";
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			 ФизическоеЛицоОбъект = Выборка.Ссылка.ПолучитьОбъект();
			 ФизическоеЛицоОбъект.ФИО = Выборка.Наименование;
			 ФизическоеЛицоОбъект.Записать();
		КонецЦикла;	
	КонецЕсли;
КонецПроцедуры

Процедура ПеренестиТекущиеВидыЗанятостиСправочниковВРегистр() Экспорт
	
	КадровыйУчетВнутренний.ПеренестиТекущиеВидыЗанятостиСправочниковВРегистр();
	
КонецПроцедуры

Процедура ЗаполнитьФизическоеЛицоВКадроваяИсторияСотрудников() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КадроваяИсторияСотрудников.Регистратор
	|ПОМЕСТИТЬ ВТРегистраторыБезФизическогоЛица
	|ИЗ
	|	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
	|ГДЕ
	|	КадроваяИсторияСотрудников.ФизическоеЛицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(КадроваяИсторияСотрудников.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо КАК ФизическоеЛицо,
	|	КадроваяИсторияСотрудников.*
	|ИЗ
	|	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
	|ГДЕ
	|	КадроваяИсторияСотрудников.Регистратор В
	|			(ВЫБРАТЬ
	|				РегистраторыБезФизическогоЛица.Регистратор
	|			ИЗ
	|				ВТРегистраторыБезФизическогоЛица КАК РегистраторыБезФизическогоЛица)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки";
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыСведений.КадроваяИсторияСотрудников.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьФизическоеЛицоВПлановыеНачисления() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПлановыеНачисления.Регистратор
	|ПОМЕСТИТЬ ВТРегистраторыБезФизическогоЛица
	|ИЗ
	|	РегистрСведений.ПлановыеНачисления КАК ПлановыеНачисления
	|ГДЕ
	|	ПлановыеНачисления.ФизическоеЛицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ПлановыеНачисления.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо КАК ФизическоеЛицо,
	|	ПлановыеНачисления.*
	|ИЗ
	|	РегистрСведений.ПлановыеНачисления КАК ПлановыеНачисления
	|ГДЕ
	|	ПлановыеНачисления.Регистратор В
	|			(ВЫБРАТЬ
	|				РегистраторыБезФизическогоЛица.Регистратор
	|			ИЗ
	|				ВТРегистраторыБезФизическогоЛица КАК РегистраторыБезФизическогоЛица)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки";
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыСведений.ПлановыеНачисления.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОрганизациюТекущихДанныхСотрудников() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация
		|ИЗ
		|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|ГДЕ
		|	ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ТекущиеКадровыеДанныеСотрудников.Сотрудник,
			|	ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо,
			|	ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация,
			|	ТекущиеКадровыеДанныеСотрудников.УдалитьТекущаяОрганизация КАК ТекущаяОрганизация,
			|	ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение,
			|	ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжность,
			|	ТекущиеКадровыеДанныеСотрудников.ДатаПриема,
			|	ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения,
			|	ТекущиеКадровыеДанныеСотрудников.ОсновноеРабочееМестоВОрганизации,
			|	ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости,
			|	ТекущиеКадровыеДанныеСотрудников.УдалитьТекущаяОрганизация
			|ИЗ
			|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников";
			
		НаборЗаписей = РегистрыСведений.ТекущиеКадровыеДанныеСотрудников.СоздатьНаборЗаписей();
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		
		НаборЗаписей.Загрузить(Запрос.Выполнить().Выгрузить());
		
		НаборЗаписей.Записать();
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ТекущаяТарифнаяСтавкаСотрудников.Сотрудник,
			|	ТекущаяТарифнаяСтавкаСотрудников.ФизическоеЛицо,
			|	ТекущаяТарифнаяСтавкаСотрудников.ГоловнаяОрганизация,
			|	МАКСИМУМ(ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация) КАК ТекущаяОрганизация,
			|	ТекущаяТарифнаяСтавкаСотрудников.ТекущаяТарифнаяСтавка
			|ИЗ
			|	РегистрСведений.ТекущаяТарифнаяСтавкаСотрудников КАК ТекущаяТарифнаяСтавкаСотрудников
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
			|		ПО ТекущаяТарифнаяСтавкаСотрудников.Сотрудник = ТекущиеКадровыеДанныеСотрудников.Сотрудник
			|			И ТекущаяТарифнаяСтавкаСотрудников.ФизическоеЛицо = ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо
			|
			|СГРУППИРОВАТЬ ПО
			|	ТекущаяТарифнаяСтавкаСотрудников.Сотрудник,
			|	ТекущаяТарифнаяСтавкаСотрудников.ФизическоеЛицо,
			|	ТекущаяТарифнаяСтавкаСотрудников.ГоловнаяОрганизация,
			|	ТекущаяТарифнаяСтавкаСотрудников.ТекущаяТарифнаяСтавка";
			
		НаборЗаписей = РегистрыСведений.ТекущаяТарифнаяСтавкаСотрудников.СоздатьНаборЗаписей();
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		
		НаборЗаписей.Загрузить(Запрос.Выполнить().Выгрузить());
		
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПерезаполнитьСлужебныеИдентификаторыФизическихЛиц() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ФизическиеЛица.Ссылка,
		|	ФизическиеЛица.Наименование,
		|	ФизическиеЛица.НаименованиеСлужебное
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	НЕ ФизическиеЛица.ЭтоГруппа";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка= РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НаименованиеСлужебное = ФизическиеЛицаЗарплатаКадры.НаименованиеСлужебное(Выборка.Наименование);
			Если Выборка.НаименованиеСлужебное <> НаименованиеСлужебное Тогда
					
				ФизическоеЛицоОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ФизическоеЛицоОбъект.НаименованиеСлужебное = НаименованиеСлужебное;
				ФизическоеЛицоОбъект.ОбменДанными.Загрузка = Истина;
				ФизическоеЛицоОбъект.Записать();
				
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура УдалитьУправляющиеКонструкцииСлужебныхИдентификаторовФизическихЛиц() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ФизическиеЛица.Ссылка,
		|	ФизическиеЛица.Наименование
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	(ФизическиеЛица.НаименованиеСлужебное ПОДОБНО ""%[%""
		|			ИЛИ ФизическиеЛица.НаименованиеСлужебное ПОДОБНО ""%]%"")
		|	И НЕ ФизическиеЛица.ЭтоГруппа";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ФизическоеЛицоОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ФизическоеЛицоОбъект.НаименованиеСлужебное =
				ФизическиеЛицаЗарплатаКадры.НаименованиеСлужебное(Выборка.Наименование);
			ФизическоеЛицоОбъект.ОбменДанными.Загрузка = Истина;
			ФизическоеЛицоОбъект.Записать();
			
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьЗаписиПоУмолчаниюРегистровСведений() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФизическиеЛица.Ссылка
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизическихЛиц КАК ГражданствоФизическихЛиц
		|		ПО ГражданствоФизическихЛиц.ФизическоеЛицо = ФизическиеЛица.Ссылка
		|ГДЕ
		|	НЕ ФизическиеЛица.ЭтоГруппа
		|	И ГражданствоФизическихЛиц.Период ЕСТЬ NULL ";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ЗаписьПоУмолчанию = РегистрыСведений.ГражданствоФизическихЛиц.СоздатьМенеджерЗаписи();
		
		Набор = РегистрыСведений.ГражданствоФизическихЛиц.СоздатьНаборЗаписей();
		Набор.Прочитать();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Запись = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, ЗаписьПоУмолчанию);
			Запись.ФизическоеЛицо = Выборка.Ссылка;
			
		КонецЦикла;
		
		Набор.ОбменДанными.Загрузка = Истина;
		Набор.Записать();
		
	КонецЕсли; 
		
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФизическиеЛица.Ссылка
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусФизическихЛицКакНалогоплательщиковНДФЛ КАК СтатусФизическихЛицКакНалогоплательщиковНДФЛ
		|		ПО (СтатусФизическихЛицКакНалогоплательщиковНДФЛ.ФизическоеЛицо = ФизическиеЛица.Ссылка)
		|ГДЕ
		|	НЕ ФизическиеЛица.ЭтоГруппа
		|	И СтатусФизическихЛицКакНалогоплательщиковНДФЛ.Период ЕСТЬ NULL ";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ЗаписьПоУмолчанию = РегистрыСведений.СтатусФизическихЛицКакНалогоплательщиковНДФЛ.СоздатьМенеджерЗаписи();
		
		Набор = РегистрыСведений.СтатусФизическихЛицКакНалогоплательщиковНДФЛ.СоздатьНаборЗаписей();
		Набор.Прочитать();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Запись = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, ЗаписьПоУмолчанию);
			Запись.ФизическоеЛицо = Выборка.Ссылка;
			
		КонецЦикла;
		
		Набор.ОбменДанными.Загрузка = Истина;
		Набор.Записать();
		
	КонецЕсли; 
		
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФизическиеЛица.Ссылка
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыЗастрахованныхФизическихЛиц КАК СтатусыЗастрахованныхФизическихЛиц
		|		ПО (СтатусыЗастрахованныхФизическихЛиц.ФизическоеЛицо = ФизическиеЛица.Ссылка)
		|ГДЕ
		|	НЕ ФизическиеЛица.ЭтоГруппа
		|	И СтатусыЗастрахованныхФизическихЛиц.Период ЕСТЬ NULL ";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ЗаписьПоУмолчанию = РегистрыСведений.СтатусыЗастрахованныхФизическихЛиц.СоздатьМенеджерЗаписи();
		
		Набор = РегистрыСведений.СтатусыЗастрахованныхФизическихЛиц.СоздатьНаборЗаписей();
		Набор.Прочитать();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Запись = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, ЗаписьПоУмолчанию);
			Запись.ФизическоеЛицо = Выборка.Ссылка;
			
		КонецЦикла;
		
		Набор.ОбменДанными.Загрузка = Истина;
		Набор.Записать();
		
	КонецЕсли; 
		
КонецПроцедуры

Процедура ИсключитьПовторениеТекущихДанныхСотрудников() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТекущиеКадровыеДанныеСотрудников.Сотрудник,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация) КАК КоличествоЗаписей
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|
		|СГРУППИРОВАТЬ ПО
		|	ТекущиеКадровыеДанныеСотрудников.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Сотрудники.Сотрудник
		|ПОМЕСТИТЬ ВТСотрудникиСПовторением
		|ИЗ
		|	ВТСотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.КоличествоЗаписей > 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	СотрудникиСПовторением.Сотрудник
		|ИЗ
		|	ВТСотрудникиСПовторением КАК СотрудникиСПовторением";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ТекущиеКадровыеДанныеСотрудников.Сотрудник,
			|	ВЫРАЗИТЬ(ТекущиеКадровыеДанныеСотрудников.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо КАК ФизическоеЛицо,
			|	ВЫРАЗИТЬ(ТекущиеКадровыеДанныеСотрудников.Сотрудник КАК Справочник.Сотрудники).ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	МАКСИМУМ(ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация) КАК ТекущаяОрганизация,
			|	МАКСИМУМ(ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение) КАК ТекущееПодразделение,
			|	МАКСИМУМ(ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжность) КАК ТекущаяДолжность,
			|	МАКСИМУМ(ТекущиеКадровыеДанныеСотрудников.ДатаПриема) КАК ДатаПриема,
			|	МАКСИМУМ(ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения) КАК ДатаУвольнения,
			|	МАКСИМУМ(ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости) КАК ТекущийВидЗанятости,
			|	МАКСИМУМ(ТекущиеКадровыеДанныеСотрудников.УдалитьТекущаяОрганизация) КАК УдалитьТекущаяОрганизация
			|ИЗ
			|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиСПовторением КАК СотрудникиСПовторением
			|		ПО ТекущиеКадровыеДанныеСотрудников.Сотрудник = СотрудникиСПовторением.Сотрудник
			|
			|СГРУППИРОВАТЬ ПО
			|	ТекущиеКадровыеДанныеСотрудников.Сотрудник,
			|	ВЫРАЗИТЬ(ТекущиеКадровыеДанныеСотрудников.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо,
			|	ВЫРАЗИТЬ(ТекущиеКадровыеДанныеСотрудников.Сотрудник КАК Справочник.Сотрудники).ГоловнаяОрганизация";
			
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Набор = РегистрыСведений.ТекущиеКадровыеДанныеСотрудников.СоздатьНаборЗаписей();
			Набор.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
			
			ЗаполнитьЗначенияСвойств(Набор.Добавить(), Выборка);
			РегистрыСведений.ТекущиеКадровыеДанныеСотрудников.УстановитьОсновноеРабочееМестоВОрганизации(Набор);
			
			Набор.ОбменДанными.Загрузка = Истина;
			Набор.Записать();
			
		КонецЦикла; 
		
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТекущаяТарифнаяСтавкаСотрудников.Сотрудник,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТекущаяТарифнаяСтавкаСотрудников.ТекущаяОрганизация) КАК КоличествоЗаписей
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	РегистрСведений.ТекущаяТарифнаяСтавкаСотрудников КАК ТекущаяТарифнаяСтавкаСотрудников
		|
		|СГРУППИРОВАТЬ ПО
		|	ТекущаяТарифнаяСтавкаСотрудников.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Сотрудники.Сотрудник
		|ПОМЕСТИТЬ ВТСотрудникиСПовторением
		|ИЗ
		|	ВТСотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.КоличествоЗаписей > 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	СотрудникиСПовторением.Сотрудник
		|ИЗ
		|	ВТСотрудникиСПовторением КАК СотрудникиСПовторением";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ТекущаяТарифнаяСтавкаСотрудников.Сотрудник,
			|	ВЫРАЗИТЬ(ТекущаяТарифнаяСтавкаСотрудников.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо КАК ФизическоеЛицо,
			|	ВЫРАЗИТЬ(ТекущаяТарифнаяСтавкаСотрудников.Сотрудник КАК Справочник.Сотрудники).ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	МАКСИМУМ(ТекущаяТарифнаяСтавкаСотрудников.ТекущаяОрганизация) КАК ТекущаяОрганизация,
			|	МАКСИМУМ(ТекущаяТарифнаяСтавкаСотрудников.ТекущаяТарифнаяСтавка) КАК ТекущаяТарифнаяСтавка
			|ИЗ
			|	РегистрСведений.ТекущаяТарифнаяСтавкаСотрудников КАК ТекущаяТарифнаяСтавкаСотрудников
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиСПовторением КАК СотрудникиСПовторением
			|		ПО ТекущаяТарифнаяСтавкаСотрудников.Сотрудник = СотрудникиСПовторением.Сотрудник
			|
			|СГРУППИРОВАТЬ ПО
			|	ТекущаяТарифнаяСтавкаСотрудников.Сотрудник,
			|	ВЫРАЗИТЬ(ТекущаяТарифнаяСтавкаСотрудников.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо,
			|	ВЫРАЗИТЬ(ТекущаяТарифнаяСтавкаСотрудников.Сотрудник КАК Справочник.Сотрудники).ГоловнаяОрганизация";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Набор = РегистрыСведений.ТекущаяТарифнаяСтавкаСотрудников.СоздатьНаборЗаписей();
			Набор.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
			
			ЗаполнитьЗначенияСвойств(Набор.Добавить(), Выборка);
			
			Набор.ОбменДанными.Загрузка = Истина;
			Набор.Записать();
			
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбновитьВидыКонтактнойИнформацииФизическогоЛица() Экспорт
	
	КадровыйУчетВнутренний.ОбновитьВидыКонтактнойИнформацииФизическогоЛица();
	
КонецПроцедуры

Процедура ОбновитьСобытияУвольнений() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КадроваяИсторияСотрудников.Регистратор,
		|	ДОБАВИТЬКДАТЕ(Увольнение.ДатаУвольнения, ДЕНЬ, 1) КАК Период
		|ПОМЕСТИТЬ ВТРегистраторы
		|ИЗ
		|	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Увольнение КАК Увольнение
		|		ПО КадроваяИсторияСотрудников.Регистратор = Увольнение.Ссылка
		|			И (КадроваяИсторияСотрудников.Период = ЕСТЬNULL(Увольнение.ДатаУвольнения, ДАТАВРЕМЯ(1, 1, 1)))
		|			И (КадроваяИсторияСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВТРегистраторы.Регистратор
		|ИЗ
		|	ВТРегистраторы КАК ВТРегистраторы";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		КадровыйУчетВнутренний.ОбновитьСобытияУвольнений(Запрос.МенеджерВременныхТаблиц);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНаименованияКраткиеДолжностей() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Должности.Ссылка
		|ИЗ
		|	Справочник.Должности КАК Должности
		|ГДЕ
		|	Должности.НаименованиеКраткое = """"";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ДолжностьОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДолжностьОбъект.НаименованиеКраткое = ДолжностьОбъект.Наименование;
			ДолжностьОбъект.ОбменДанными.Загрузка = Истина;
			ДолжностьОбъект.Записать();
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьНаборыЗначенийДоступаСотрудников() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СотрудникиНаборыЗначенийДоступа.Ссылка,
		|	СотрудникиНаборыЗначенийДоступа.НомерНабора
		|ПОМЕСТИТЬ ВТТекущиеЗначенияДоступаСотрудниковПоФизическимЛицам
		|ИЗ
		|	Справочник.Сотрудники.НаборыЗначенийДоступа КАК СотрудникиНаборыЗначенийДоступа
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(СотрудникиНаборыЗначенийДоступа.ЗначениеДоступа) = ТИП(Справочник.ФизическиеЛица)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СотрудникиНаборыЗначенийДоступа.Ссылка,
		|	СотрудникиНаборыЗначенийДоступа.НомерНабора
		|ПОМЕСТИТЬ ВТТекущиеЗначенияДоступаСотрудниковПоОрганизациям
		|ИЗ
		|	Справочник.Сотрудники.НаборыЗначенийДоступа КАК СотрудникиНаборыЗначенийДоступа
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(СотрудникиНаборыЗначенийДоступа.ЗначениеДоступа) <> ТИП(Справочник.ФизическиеЛица)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ЗначенияДоступаСотрудниковПоФизическимЛицам.Ссылка, ЗначенияДоступаСотрудниковПоОрганизациям.Ссылка) КАК Сотрудник,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ЗначенияДоступаСотрудниковПоФизическимЛицам.Ссылка ЕСТЬ NULL 
		|					ИЛИ ЗначенияДоступаСотрудниковПоОрганизациям.Ссылка ЕСТЬ NULL 
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК НеобходимостьОбновления
		|ПОМЕСТИТЬ ВТСотрудникиСПризнакомОбновления
		|ИЗ
		|	ВТТекущиеЗначенияДоступаСотрудниковПоФизическимЛицам КАК ЗначенияДоступаСотрудниковПоФизическимЛицам
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТТекущиеЗначенияДоступаСотрудниковПоОрганизациям КАК ЗначенияДоступаСотрудниковПоОрганизациям
		|		ПО ЗначенияДоступаСотрудниковПоФизическимЛицам.Ссылка = ЗначенияДоступаСотрудниковПоОрганизациям.Ссылка
		|			И ЗначенияДоступаСотрудниковПоФизическимЛицам.НомерНабора = ЗначенияДоступаСотрудниковПоОрганизациям.НомерНабора
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(ЗначенияДоступаСотрудниковПоФизическимЛицам.Ссылка, ЗначенияДоступаСотрудниковПоОрганизациям.Ссылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СотрудникиСПризнакомОбновления.Сотрудник
		|ИЗ
		|	ВТСотрудникиСПризнакомОбновления КАК СотрудникиСПризнакомОбновления
		|ГДЕ
		|	СотрудникиСПризнакомОбновления.НеобходимостьОбновления";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СотрудникОбъект = Выборка.Сотрудник.ПолучитьОбъект();
			
			Попытка
				СотрудникОбъект.Заблокировать();
			Исключение
				
				ТекстИсключенияЗаписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось обновить права доступа к %1.
						|Возможно, данные сотрудника редактируется другим пользователем'"),
					Выборка.Сотрудник);
				ВызватьИсключение ТекстИсключенияЗаписи;
				
			КонецПопытки;
			
			СотрудникОбъект.Записать();
			
		КонецЦикла; 
		
	КонецЕсли; 
		
КонецПроцедуры

Процедура ЗаполнитьОбособленныеПодразделенияКадровыхПереводов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КадровыйПеревод.Ссылка,
		|	КадровыйПеревод.Подразделение.Владелец КАК ОбособленноеПодразделение
		|ИЗ
		|	Документ.КадровыйПеревод КАК КадровыйПеревод
		|ГДЕ
		|	КадровыйПеревод.ОбособленноеПодразделение = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|	И КадровыйПеревод.Подразделение <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|	И КадровыйПеревод.ИзменитьПодразделениеИДолжность";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.ОбособленноеПодразделение = Выборка.ОбособленноеПодразделение;
			
			ДокументОбъект.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			
		КонецЦикла; 
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КадроваяИсторияСотрудников.Регистратор
		|ИЗ
		|	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|ГДЕ
		|	КадроваяИсторияСотрудников.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|	И КадроваяИсторияСотрудников.Подразделение <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НаборЗаписей = РегистрыСведений.КадроваяИсторияСотрудников.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			
			НаборЗаписей.Прочитать();
			
			Для каждого ЗаписьНабора Из НаборЗаписей Цикл
				Если НЕ ЗначениеЗаполнено(ЗаписьНабора.Организация) Тогда
					ЗаписьНабора.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаписьНабора.Подразделение, "Владелец");
				КонецЕсли; 
			КонецЦикла;
			
			НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать();
			
		КонецЦикла; 
		
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТекущиеКадровыеДанныеСотрудников.Сотрудник
		|ИЗ
		|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|ГДЕ
		|	ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|	И ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ВЫРАЗИТЬ(ТекущиеКадровыеДанныеСотрудников.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо КАК ФизическоеЛицо,
			|	ТекущиеКадровыеДанныеСотрудников.Сотрудник,
			|	ВЫРАЗИТЬ(ТекущиеКадровыеДанныеСотрудников.Сотрудник КАК Справочник.Сотрудники).ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	ВЫБОР
			|		КОГДА ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|			ТОГДА ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение.Владелец
			|		ИНАЧЕ ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация
			|	КОНЕЦ КАК ТекущаяОрганизация,
			|	МАКСИМУМ(ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение) КАК ТекущееПодразделение,
			|	МАКСИМУМ(ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжность) КАК ТекущаяДолжность,
			|	МАКСИМУМ(ТекущиеКадровыеДанныеСотрудников.ДатаПриема) КАК ДатаПриема,
			|	МАКСИМУМ(ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения) КАК ДатаУвольнения,
			|	МАКСИМУМ(ТекущиеКадровыеДанныеСотрудников.ОсновноеРабочееМестоВОрганизации) КАК ОсновноеРабочееМестоВОрганизации,
			|	МАКСИМУМ(ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости) КАК ТекущийВидЗанятости
			|ИЗ
			|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
			|
			|СГРУППИРОВАТЬ ПО
			|	ВЫРАЗИТЬ(ТекущиеКадровыеДанныеСотрудников.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо,
			|	ТекущиеКадровыеДанныеСотрудников.Сотрудник,
			|	ВЫРАЗИТЬ(ТекущиеКадровыеДанныеСотрудников.Сотрудник КАК Справочник.Сотрудники).ГоловнаяОрганизация,
			|	ВЫБОР
			|		КОГДА ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|			ТОГДА ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение.Владелец
			|		ИНАЧЕ ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация
			|	КОНЕЦ";
			
		НаборЗаписей = РегистрыСведений.ТекущиеКадровыеДанныеСотрудников.СоздатьНаборЗаписей();
		НаборЗаписей.Загрузить(Запрос.Выполнить().Выгрузить());
		
		НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
			
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТекущаяТарифнаяСтавкаСотрудников.Сотрудник
		|ИЗ
		|	РегистрСведений.ТекущаяТарифнаяСтавкаСотрудников КАК ТекущаяТарифнаяСтавкаСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|		ПО ТекущаяТарифнаяСтавкаСотрудников.Сотрудник = ТекущиеКадровыеДанныеСотрудников.Сотрудник
		|			И ТекущаяТарифнаяСтавкаСотрудников.ТекущаяОрганизация = ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация
		|ГДЕ
		|	ТекущиеКадровыеДанныеСотрудников.Сотрудник ЕСТЬ NULL ";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ВЫРАЗИТЬ(ТекущаяТарифнаяСтавкаСотрудников.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо КАК ФизическоеЛицо,
			|	ТекущаяТарифнаяСтавкаСотрудников.Сотрудник,
			|	ВЫРАЗИТЬ(ТекущаяТарифнаяСтавкаСотрудников.Сотрудник КАК Справочник.Сотрудники).ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация КАК ТекущаяОрганизация,
			|	МАКСИМУМ(ТекущаяТарифнаяСтавкаСотрудников.ТекущаяТарифнаяСтавка) КАК ТекущаяТарифнаяСтавка
			|ИЗ
			|	РегистрСведений.ТекущаяТарифнаяСтавкаСотрудников КАК ТекущаяТарифнаяСтавкаСотрудников
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
			|		ПО ТекущаяТарифнаяСтавкаСотрудников.Сотрудник = ТекущиеКадровыеДанныеСотрудников.Сотрудник
			|
			|СГРУППИРОВАТЬ ПО
			|	ВЫРАЗИТЬ(ТекущаяТарифнаяСтавкаСотрудников.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо,
			|	ТекущаяТарифнаяСтавкаСотрудников.Сотрудник,
			|	ВЫРАЗИТЬ(ТекущаяТарифнаяСтавкаСотрудников.Сотрудник КАК Справочник.Сотрудники).ГоловнаяОрганизация,
			|	ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация";
		
		НаборЗаписей = РегистрыСведений.ТекущаяТарифнаяСтавкаСотрудников.СоздатьНаборЗаписей();
		НаборЗаписей.Загрузить(Запрос.Выполнить().Выгрузить());
		
		НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
			
	КонецЕсли; 
	
КонецПроцедуры

Процедура УстановитьПризнакТолькоРоссийскийАдресовФизическогоЛица() Экспорт
	
	НастройкиПроверки = Новый Структура;
	НастройкиПроверки.Вставить("АдресТолькоРоссийский", Истина);
	НастройкиПроверки.Вставить("ПроверятьКорректность", Ложь);
	НастройкиПроверки.Вставить("ЗапрещатьВводНекорректного", Ложь);
	НастройкиПроверки.Вставить("СкрыватьНеактуальныеАдреса", Ложь);
	НастройкиПроверки.Вставить("ВключатьСтрануВПредставление", Истина);
	
	УправлениеКонтактнойИнформацией.ОбновитьВидКонтактнойИнформации(
		Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица,
		Перечисления.ТипыКонтактнойИнформации.Адрес,
		"",
		Ложь,
		Истина,
		Ложь,
		,
		,
		НастройкиПроверки);
		
	УправлениеКонтактнойИнформацией.ОбновитьВидКонтактнойИнформации(
		Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица,
		Перечисления.ТипыКонтактнойИнформации.Адрес,
		"",
		Ложь,
		Истина,
		Ложь,
		,
		,
		НастройкиПроверки);
		
КонецПроцедуры

Процедура ЗаполнитьГоловногоСотрудника() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.ГоловнойСотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СотрудникОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СотрудникОбъект.ГоловнойСотрудник = СотрудникОбъект.Ссылка;
			СотрудникОбъект.ОбменДанными.Загрузка = Истина;
			СотрудникОбъект.Записать();
			
		КонецЦикла; 
		
	КонецЕсли; 
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти
