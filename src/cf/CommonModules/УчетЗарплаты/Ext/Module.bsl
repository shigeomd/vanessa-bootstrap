////////////////////////////////////////////////////////////////////////////////
// НАЧИСЛЕНИЕ ЗАРПЛАТЫ И НАЛОГОВ (ВЗНОСОВ) С ФОТ
//

////////////////////////////////////////////////////////////////////////////////
// ИНТЕРФЕЙС ВЗАИМОДЕЙСТВИЯ С БЗКБ
//
// Предназначена для генерации всех движений, связанных с отражением в регл. учете
//
// Параметры:
//	Движения
//	Отказ
//	Организация
//	ПериодРегистрации
//	ДанныеДляОтражения - таблицы движений
//
Процедура СформироватьДвиженияПоОтражениюЗарплатыВРегламентированномУчете(Движения, Отказ, Организация, ПериодРегистрации, ДанныеДляОтражения) Экспорт
		
	// Начисление зарплаты и налогов с ФОТ
	ДанныеПоЗарплате = Новый Структура;
	Если ДанныеДляОтражения.Свойство("НачисленнаяЗарплатаИВзносы") Тогда
		ДанныеПоЗарплате.Вставить("НачисленнаяЗарплатаИВзносы", ДанныеДляОтражения.НачисленнаяЗарплатаИВзносы);
	КонецЕсли;
	Если ДанныеДляОтражения.Свойство("НачисленныйНДФЛ") Тогда
		ДанныеПоЗарплате.Вставить("НачисленныйНДФЛ", ДанныеДляОтражения.НачисленныйНДФЛ);
	КонецЕсли;
	Если ДанныеПоЗарплате.Количество() <> 0 Тогда
		СформироватьДвиженияНачислениеЗарплаты(Движения, Отказ, Организация, ПериодРегистрации, ДанныеПоЗарплате);
	КонецЕсли;
			
	Если ДанныеДляОтражения.Свойство("Депоненты") Тогда
		ДанныеПоДепонентам = ДанныеДляОтражения.Депоненты;
		Если ДанныеПоДепонентам.Количество() <> 0 Тогда
			СформироватьДвиженияДепонированиеЗарплаты(Движения, Отказ, Организация, ПериодРегистрации, ДанныеПоДепонентам);
		КонецЕсли;
	КонецЕсли;
		
	Если ДанныеДляОтражения.Свойство("УдержаннаяЗарплата") Тогда
		ДанныеПоУдержаниям = ДанныеДляОтражения.УдержаннаяЗарплата;
		Если ДанныеДляОтражения.Свойство("НачисленнаяЗарплатаИВзносы") Тогда
			НачисленнаяЗарплатаИВзносы = ДанныеДляОтражения.НачисленнаяЗарплатаИВзносы;
		Иначе
			НачисленнаяЗарплатаИВзносы = Неопределено;
		КонецЕсли;
		Если ДанныеПоУдержаниям.Количество() <> 0 Тогда
			СформироватьДвиженияУдержания(Движения, Отказ, Организация, ПериодРегистрации, ДанныеПоУдержаниям, НачисленнаяЗарплатаИВзносы);
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеДляОтражения.Свойство("ОценочныеОбязательства") Тогда
		ДанныеПоРезервам = ДанныеДляОтражения.ОценочныеОбязательства;
		Если ДанныеПоРезервам.Количество() <> 0 Тогда
			СформироватьДвиженияНачислениеРезервов(Движения, Отказ, Организация, ПериодРегистрации, ДанныеПоРезервам);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// НАЧИСЛЕНИЕ ЗАРПЛАТЫ И НАЛОГОВ С ФОТ
//

Процедура СформироватьДвиженияНачислениеЗарплаты(Движения, Отказ, Организация, ПериодРегистрации, ДанныеДляОтражения)
	
	Дополнять = Ложь;
	
	Регистратор = Движения.Хозрасчетный.Отбор.Регистратор.Значение;
	
	Если ДанныеДляОтражения.Свойство("НачисленнаяЗарплатаИВзносы") Тогда		
		Параметры = ПодготовитьПараметрыПоОтражениюЗарплатыВУчете(ДанныеДляОтражения.НачисленнаяЗарплатаИВзносы, Организация, ПериодРегистрации, Регистратор);
		Реквизиты = Параметры.Реквизиты[0];
		ТаблицаЗаработнойПлаты = Параметры.ТаблицаЗаработнойПлаты;
		Если ТаблицаЗаработнойПлаты.Колонки.Найти("РегистрацияВНалоговомОргане") = Неопределено Тогда
			Массив = Новый Массив;
			Массив.Добавить(Тип("СправочникСсылка.РегистрацииВНалоговомОргане"));
			ОписаниеТиповРегистрацииВНалоговомОргане =  Новый ОписаниеТипов(Массив, , );
			ТаблицаЗаработнойПлаты.Колонки.Добавить("РегистрацияВНалоговомОргане", ОписаниеТиповРегистрацииВНалоговомОргане);
		КонецЕсли;
		РазвернутьТаблицуЗаработнойПлаты(ТаблицаЗаработнойПлаты);
		Дополнять = Истина;
	КонецЕсли;
	
	Если ДанныеДляОтражения.Свойство("НачисленныйНДФЛ") Тогда
		ПараметрыНДФЛ = ПодготовитьПараметрыПоОтражениюНДФЛВУчете(ДанныеДляОтражения.НачисленныйНДФЛ, Организация, ПериодРегистрации, Регистратор);
		ТаблицаНДФЛ = ДополнитьТаблицуНДФЛАналитикойПоРегистрации(ПараметрыНДФЛ.ТаблицаНДФЛ, Организация);
		Если Дополнять Тогда
			ТаблицаЗаработнойПлаты = ДополнитьТаблицуЗаработнойПлатыДаннымиПоНДФЛ(ТаблицаЗаработнойПлаты, ТаблицаНДФЛ, Организация, ПериодРегистрации);
		Иначе
			Реквизиты = ПараметрыНДФЛ.Реквизиты[0];
			ТаблицаЗаработнойПлаты = ТаблицаНДФЛ;
			ТаблицаЗаработнойПлаты.Колонки.Добавить("ВидОперацииРасходовЗаСчетФСС",Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийПоЗарплате"));
			Дополнять = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ОчиститьТаблицуЗаработнойПлаты(ТаблицаЗаработнойПлаты);
	
	ТаблицаЗаработнойПлаты = ДополнитьТаблицуЗарплатыАналитикойБухУчета(ТаблицаЗаработнойПлаты);
	
	ПроверитьЗаполненностьСпособаОтраженияВУчете(ТаблицаЗаработнойПлаты, Реквизиты);
	
	СформироватьПроводкиПоОтражениюЗарплатыВУчете(ТаблицаЗаработнойПлаты, Реквизиты, Движения, Отказ);	
	
	// Проведение по подсистеме УСН	
	СформироватьДвиженияПоРегистрамУСННачислениеЗарплаты(Параметры, ТаблицаЗаработнойПлаты, Реквизиты, Движения, Отказ);
	
	// Учет доходов и расходов ИП
	СформироватьДвиженияПоРегистрамИПНачислениеЗарплаты(Параметры, ТаблицаЗаработнойПлаты, Реквизиты, Движения, Отказ);
	
КонецПроцедуры

Процедура СформироватьДвиженияДепонированиеЗарплаты(Движения, Отказ, Организация, ПериодРегистрации, Депоненты)
	
	Регистратор = Движения.Хозрасчетный.Отбор.Регистратор.Значение;
	Параметры = ПодготовитьПараметрыПоОтражениюДепонентовУчете(Депоненты, Организация, ПериодРегистрации, Регистратор);
	Реквизиты = Параметры.Реквизиты[0];
	ТаблицаЗаработнойПлаты = Параметры.ТаблицаДепонирование;
	Дополнять = Истина;
	
	ТаблицаЗаработнойПлаты = ДополнитьТаблицуЗарплатыАналитикойБухУчета(ТаблицаЗаработнойПлаты);
	
	ПроверитьЗаполненностьСпособаОтраженияВУчете(ТаблицаЗаработнойПлаты, Реквизиты);
		
	СформироватьПроводкиПоОтражениюЗарплатыВУчете(ТаблицаЗаработнойПлаты, Реквизиты, Движения, Отказ);	
		
	// Проведение по подсистеме УСН	
	СформироватьДвиженияПоРегистрамУСННачислениеЗарплаты(Параметры, ТаблицаЗаработнойПлаты, Реквизиты, Движения, Отказ);
	
	// Учет доходов и расходов ИП
	СформироватьДвиженияПоРегистрамИПНачислениеЗарплаты(Параметры, ТаблицаЗаработнойПлаты, Реквизиты, Движения, Отказ);
	
КонецПроцедуры

Процедура РазвернутьТаблицуЗаработнойПлаты(ТаблицаЗаработнойПлаты)
	
	ВидыОпераций = Новый Соответствие;
	ВидыОпераций.Вставить("ПФРНакопительная",                       Перечисления.ВидыОперацийПоЗарплате.ПФРНакопительнаяЧасть);
	ВидыОпераций.Вставить("ПФРСтраховая",                           Перечисления.ВидыОперацийПоЗарплате.ПФРСтраховаяЧасть);
	ВидыОпераций.Вставить("ПФРПоСуммарномуТарифу",                  Перечисления.ВидыОперацийПоЗарплате.ПФРПоСуммарномуТарифу);
	ВидыОпераций.Вставить("ПФРНаДоплатуЛетчикам",                   Перечисления.ВидыОперацийПоЗарплате.ПФРДополнительныйТарифЛЭ);
	ВидыОпераций.Вставить("ПФРНаДоплатуШахтерам",                   Перечисления.ВидыОперацийПоЗарплате.ПФРДополнительныйТарифШахтеры);
	ВидыОпераций.Вставить("ПФРЗаЗанятыхНаПодземныхИВредныхРаботах", Перечисления.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах);
	ВидыОпераций.Вставить("ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах",    Перечисления.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах);
	ВидыОпераций.Вставить("ФСС",                                    Перечисления.ВидыОперацийПоЗарплате.ФСС);
	ВидыОпераций.Вставить("ФССНесчастныеСлучаи",                    Перечисления.ВидыОперацийПоЗарплате.ФССНС);
	ВидыОпераций.Вставить("ФФОМС",                                  Перечисления.ВидыОперацийПоЗарплате.ФФОМС);
	ВидыОпераций.Вставить("ТФОМС",                                  Перечисления.ВидыОперацийПоЗарплате.ТФОМС);
	
	МассивОперацийРасходовЗаСчетФСС = Новый Массив;
	МассивОперацийРасходовЗаСчетФСС.Добавить(Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФСС);
	
	МассивКолонок = Новый Массив;
	МассивКолонок.Добавить("ПФРНакопительная");
	МассивКолонок.Добавить("ПФРСтраховая");
	МассивКолонок.Добавить("ПФРПоСуммарномуТарифу");
	МассивКолонок.Добавить("ПФРНаДоплатуЛетчикам");
	МассивКолонок.Добавить("ПФРНаДоплатуШахтерам");
	МассивКолонок.Добавить("ПФРЗаЗанятыхНаПодземныхИВредныхРаботах");
	МассивКолонок.Добавить("ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах");
	МассивКолонок.Добавить("ФСС");
	МассивКолонок.Добавить("ФССНесчастныеСлучаи");
	МассивКолонок.Добавить("ФФОМС");
	МассивКолонок.Добавить("ТФОМС");
	
	КоличествоИндексовМассива = МассивКолонок.Количество() - 1;
	
	ТаблицаЗаработнойПлаты.Колонки.Добавить("ВидОперацииРасходовЗаСчетФСС",Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийПоЗарплате"));
	ТаблицаЗаработнойПлаты.Колонки.Добавить("ВедущийВидОперации",Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийПоЗарплате"));
	
	ТаблицаНалоговСФОТ = ТаблицаЗаработнойПлаты.СкопироватьКолонки();

	Для Каждого СтрокаТаблицы ИЗ ТаблицаЗаработнойПлаты Цикл
		
		СтрокаТаблицы.ВедущийВидОперации = СтрокаТаблицы.ВидОперации;
		
		Для ИндексМассива = 0 По КоличествоИндексовМассива Цикл
			
			Если СтрокаТаблицы[МассивКолонок[ИндексМассива]] <> 0 Тогда
				НоваяСтрока = ТаблицаНалоговСФОТ.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				НоваяСтрока.Сумма = СтрокаТаблицы[МассивКолонок[ИндексМассива]];
				Если МассивОперацийРасходовЗаСчетФСС.Найти(НоваяСтрока.ВидОперации) <> Неопределено Тогда
					НоваяСтрока.ВидОперацииРасходовЗаСчетФСС = НоваяСтрока.ВидОперации;
				КонецЕсли;
				НоваяСтрока.ВидОперации = ВидыОпераций.Получить(МассивКолонок[ИндексМассива]);
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;

	Для Каждого СтрокаТаблицы ИЗ ТаблицаНалоговСФОТ Цикл
		
		НоваяСтрока = ТаблицаЗаработнойПлаты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
	КонецЦикла;
	
	ТаблицаЗаработнойПлаты.Свернуть("ФизическоеЛицо, ВидОперации, Подразделение, 
									|СпособОтраженияЗарплатыВБухучете, ОблагаетсяЕНВД, 
									|ВидНачисленияОплатыТрудаДляНУ,
									|РегистрацияВНалоговомОргане,
									|ВидОперацииРасходовЗаСчетФСС,
									|ВедущийВидОперации", "Сумма");
	
КонецПроцедуры

Процедура ОчиститьТаблицуЗаработнойПлаты(ТаблицаЗаработнойПлаты)
	
	Отбор = Новый Структура("Сумма", 0);
	МассивСтрок = ТаблицаЗаработнойПлаты.НайтиСтроки(Отбор);
	Для Каждого СтрокаМассива ИЗ МассивСтрок Цикл
		ТаблицаЗаработнойПлаты.Удалить(СтрокаМассива);
	КонецЦикла;
		
КонецПроцедуры

Функция ПодготовитьПараметрыПоОтражениюЗарплатыВУчете(ДанныеДляПроводок, Организация, ПериодРегистрации, Регистратор)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	Реквизиты = Новый ТаблицаЗначений;
	
	Реквизиты.Колонки.Добавить("Организация");
	Реквизиты.Колонки.Добавить("Период");
	Реквизиты.Колонки.Добавить("Регистратор");
	
	НоваяСтрока             = Реквизиты.Добавить();
	НоваяСтрока.Организация = Организация;
	НоваяСтрока.Период      = КонецМесяца(ПериодРегистрации);
	НоваяСтрока.Регистратор = Регистратор;
	
	Параметры.Вставить("Реквизиты", Реквизиты);
		
	// Подготовка таблицы по заработной плате:
	СписокОбязательныхКолонок = ""
	+ "ФизическоеЛицо,"
	+ "ВидОперации,"
	+ "Подразделение,"
	+ "СпособОтраженияЗарплатыВБухучете,"
	+ "ОблагаетсяЕНВД,"	
	+ "ВидНачисленияОплатыТрудаДляНУ,"
	+ "ПФРЗаЗанятыхНаПодземныхИВредныхРаботах,"
	+ "ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах,"
	+ "ПФРНаДоплатуЛетчикам,"
	+ "ПФРНаДоплатуШахтерам,"
	+ "ПФРНакопительная,"
	+ "ПФРСтраховая,"
	+ "ПФРПоСуммарномуТарифу,"
	+ "ТФОМС,"
	+ "ФСС,"
	+ "ФССНесчастныеСлучаи,"
	+ "ФФОМС,"
	+ "Сумма"
	;	
	Параметры.Вставить("ТаблицаЗаработнойПлаты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ДанныеДляПроводок, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьПараметрыПоОтражениюНДФЛВУчете(ДанныеДляПроводок, Организация, ПериодРегистрации, Регистратор)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	Реквизиты = Новый ТаблицаЗначений;
	
	Реквизиты.Колонки.Добавить("Организация");
	Реквизиты.Колонки.Добавить("Период");
	Реквизиты.Колонки.Добавить("Регистратор");
	
	НоваяСтрока             = Реквизиты.Добавить();
	НоваяСтрока.Организация = Организация;
	НоваяСтрока.Период      = КонецМесяца(ПериодРегистрации);
	НоваяСтрока.Регистратор = Регистратор;
	
	Параметры.Вставить("Реквизиты", Реквизиты);
		
	// Подготовка таблицы по заработной плате:
	СписокОбязательныхКолонок = ""
	+ "ФизическоеЛицо,"
	+ "ВидОперации,"
	+ "КПП,"
	+ "КодНалоговогоОргана,"
	+ "КодПоОКАТО,"
	+ "КодПоОКТМО,"
	+ "Сумма"
	;	
	Параметры.Вставить("ТаблицаНДФЛ", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ДанныеДляПроводок, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьПараметрыПоОтражениюДепонентовУчете(ДанныеДляПроводок, Организация, ПериодРегистрации, Регистратор)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	Реквизиты = Новый ТаблицаЗначений;
	
	Реквизиты.Колонки.Добавить("Организация");
	Реквизиты.Колонки.Добавить("Период");
	Реквизиты.Колонки.Добавить("Регистратор");
	
	НоваяСтрока             = Реквизиты.Добавить();
	НоваяСтрока.Организация = Организация;
	НоваяСтрока.Период      = ПериодРегистрации;
	НоваяСтрока.Регистратор = Регистратор;
	
	Параметры.Вставить("Реквизиты", Реквизиты);
		
	// Подготовка таблицы по заработной плате:
	СписокОбязательныхКолонок = ""
	+ "ФизическоеЛицо,"
	+ "ВидОперации,"
	+ "Сумма"
	;	
	Параметры.Вставить("ТаблицаДепонирование", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ДанныеДляПроводок, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ДополнитьТаблицуЗаработнойПлатыДаннымиПоНДФЛ(НачисленнаяЗарплатаИВзносы, НачисленныйНДФЛ, Организация, ПериодРегистрации)
	
	ДополнятьТаблицуНДФЛ = Ложь;
	
	Если НачисленнаяЗарплатаИВзносы.Колонки.Найти("ВидОперацииРасходовЗаСчетФСС") = Неопределено Тогда
		НачисленнаяЗарплатаИВзносы.Колонки.Добавить("ВидОперацииРасходовЗаСчетФСС",Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийПоЗарплате"));
	КонецЕсли;
	
	Если УчетнаяПолитика.ПрименяетсяУСН(Организация, ПериодРегистрации) Тогда
		
		ДополнятьТаблицуНДФЛ = Истина;
		
		МассивНачислений = Новый Массив;
		МассивНачислений.Добавить(Перечисления.ВидыОперацийПоЗарплате.НачисленоДоход);
		МассивНачислений.Добавить(Перечисления.ВидыОперацийПоЗарплате.НатуральныйДоход);
		МассивНачислений.Добавить(Перечисления.ВидыОперацийПоЗарплате.НачисленоСдельноДоход);
		МассивНачислений.Добавить(Перечисления.ВидыОперацийПоЗарплате.ДивидендыСотрудников);
		МассивНачислений.Добавить(Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФСС);
		МассивНачислений.Добавить(Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФССНС);
		МассивНачислений.Добавить(Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюРаботодатель);
		МассивНачислений.Добавить(Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюБюджет);
		МассивНачислений.Добавить(Перечисления.ВидыОперацийПоЗарплате.ДоговорАвторскогоЗаказа);
		МассивНачислений.Добавить(Перечисления.ВидыОперацийПоЗарплате.ДоговорРаботыУслуги);
		МассивНачислений.Добавить(Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпуск);
		МассивНачислений.Добавить(Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускОценочныеОбязательства);
		МассивНачислений.Добавить(Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускОценочныеОбязательстваИРезервы);
		МассивНачислений.Добавить(Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускРезервы);
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("НачисленнаяЗарплатаИВзносы", НачисленнаяЗарплатаИВзносы);
		Запрос.УстановитьПараметр("НачисленныйНДФЛ", НачисленныйНДФЛ);
		Запрос.УстановитьПараметр("МассивНачислений", МассивНачислений);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НачисленнаяЗарплатаИВзносы.ФизическоеЛицо,
		|	НачисленнаяЗарплатаИВзносы.Сумма,
		|	НачисленнаяЗарплатаИВзносы.ВидОперации,
		|	НачисленнаяЗарплатаИВзносы.ОблагаетсяЕНВД,
		|	НачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухУчете,
		|	НачисленнаяЗарплатаИВзносы.ВидОперацииРасходовЗаСчетФСС,
		|	НачисленнаяЗарплатаИВзносы.Подразделение
		|ПОМЕСТИТЬ ВТ_НачисленнаяЗарплатаИВзносы
		|ИЗ
		|	&НачисленнаяЗарплатаИВзносы КАК НачисленнаяЗарплатаИВзносы
		|ГДЕ
		|	НачисленнаяЗарплатаИВзносы.ВидОперации В(&МассивНачислений)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачисленныйНДФЛ.ФизическоеЛицо,
		|	НачисленныйНДФЛ.Сумма,
		|	НачисленныйНДФЛ.ВидОперации,
		|	НачисленныйНДФЛ.РегистрацияВНалоговомОргане
		|ПОМЕСТИТЬ ВТ_НачисленныйНДФЛ
		|ИЗ
		|	&НачисленныйНДФЛ КАК НачисленныйНДФЛ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_НачисленныйНДФЛ.ФизическоеЛицо,
		|	ВТ_НачисленныйНДФЛ.ВидОперации,
		|	ВТ_НачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухУчете,
		|	ВТ_НачисленнаяЗарплатаИВзносы.ОблагаетсяЕНВД,
		|	ВТ_НачисленныйНДФЛ.Сумма КАК СуммаНалога,
		|	ВТ_НачисленнаяЗарплатаИВзносы.Сумма КАК СуммаДохода,
		|	ВТ_НачисленныйНДФЛ.РегистрацияВНалоговомОргане,
		|	ВТ_НачисленнаяЗарплатаИВзносы.ВидОперацииРасходовЗаСчетФСС
		|ПОМЕСТИТЬ ВТ_ПромежуточныйНДФЛ
		|ИЗ
		|	ВТ_НачисленнаяЗарплатаИВзносы КАК ВТ_НачисленнаяЗарплатаИВзносы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НачисленныйНДФЛ КАК ВТ_НачисленныйНДФЛ
		|		ПО ВТ_НачисленнаяЗарплатаИВзносы.ФизическоеЛицо = ВТ_НачисленныйНДФЛ.ФизическоеЛицо
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_НачисленныйНДФЛ.ФизическоеЛицо,
		|	ВТ_НачисленныйНДФЛ.ВидОперации,
		|	ВТ_НачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухУчете,
		|	ВТ_НачисленнаяЗарплатаИВзносы.ОблагаетсяЕНВД,
		|	ВТ_НачисленныйНДФЛ.Сумма,
		|	ВТ_НачисленнаяЗарплатаИВзносы.Сумма,
		|	ВТ_НачисленныйНДФЛ.РегистрацияВНалоговомОргане,
		|	ВТ_НачисленнаяЗарплатаИВзносы.ВидОперацииРасходовЗаСчетФСС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПромежуточныйНДФЛ.ФизическоеЛицо,
		|	ВТ_ПромежуточныйНДФЛ.ВидОперации,
		|	ВТ_ПромежуточныйНДФЛ.СпособОтраженияЗарплатыВБухУчете,
		|	ВТ_ПромежуточныйНДФЛ.ОблагаетсяЕНВД,
		|	ВТ_ПромежуточныйНДФЛ.РегистрацияВНалоговомОргане,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ЕСТЬNULL(СУММА(ВТ_ПромежуточныйНДФЛИтог.СуммаДохода), 0) = 0
		|				ТОГДА 0
		|			КОГДА ВТ_ПромежуточныйНДФЛ.СуммаДохода = СУММА(ВТ_ПромежуточныйНДФЛИтог.СуммаДохода)
		|				ТОГДА ВТ_ПромежуточныйНДФЛ.СуммаНалога
		|			ИНАЧЕ ВТ_ПромежуточныйНДФЛ.СуммаНалога * (ВТ_ПромежуточныйНДФЛ.СуммаДохода / СУММА(ВТ_ПромежуточныйНДФЛИтог.СуммаДохода))
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Сумма,
		|	ВТ_ПромежуточныйНДФЛ.ВидОперацииРасходовЗаСчетФСС
		|ИЗ
		|	ВТ_ПромежуточныйНДФЛ КАК ВТ_ПромежуточныйНДФЛ
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПромежуточныйНДФЛ КАК ВТ_ПромежуточныйНДФЛИтог
		|		ПО ВТ_ПромежуточныйНДФЛ.ФизическоеЛицо = ВТ_ПромежуточныйНДФЛИтог.ФизическоеЛицо
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ПромежуточныйНДФЛ.ФизическоеЛицо,
		|	ВТ_ПромежуточныйНДФЛ.ВидОперации,
		|	ВТ_ПромежуточныйНДФЛ.СпособОтраженияЗарплатыВБухУчете,
		|	ВТ_ПромежуточныйНДФЛ.ОблагаетсяЕНВД,
		|	ВТ_ПромежуточныйНДФЛ.СуммаНалога,
		|	ВТ_ПромежуточныйНДФЛ.СуммаДохода,
		|	ВТ_ПромежуточныйНДФЛ.РегистрацияВНалоговомОргане,
		|	ВТ_ПромежуточныйНДФЛ.ВидОперацииРасходовЗаСчетФСС";
		
		Результат = Запрос.Выполнить().Выгрузить();
		
		// корректировка погрешности вычисления
		СтруктураОтбора = Новый Структура();
		СтруктураОтбораНДФЛ = Новый Структура();
		
		Для Каждого СтрокаТаблицы ИЗ НачисленныйНДФЛ Цикл
			
			НачисленныйНДФЛСуммаНалога = СтрокаТаблицы.Сумма;
			НачисленныйНДФЛСуммаНалогаИсходный = СтрокаТаблицы.Сумма;
			
			СтруктураОтбора.Вставить("ФизическоеЛицо",СтрокаТаблицы.ФизическоеЛицо);
			СтруктураОтбора.Вставить("ВидОперации",СтрокаТаблицы.ВидОперации);
			
			МассивОтбора = Результат.НайтиСтроки(СтруктураОтбора);
			
			Если МассивОтбора.Количество() <> 0 Тогда
				Если МассивОтбора.Количество() = 1 Тогда
					Если МассивОтбора[0].Сумма <> СтрокаТаблицы.Сумма Тогда
						МассивОтбора[0].Сумма = СтрокаТаблицы.Сумма;
					КонецЕсли;				
					
					СтруктураОтбораНДФЛ.Вставить("ФизическоеЛицо",МассивОтбора[0].ФизическоеЛицо);
					СтруктураОтбораНДФЛ.Вставить("ВидОперации",МассивОтбора[0].ВидОперации);
					СтруктураОтбораНДФЛ.Вставить("РегистрацияВНалоговомОргане",МассивОтбора[0].РегистрацияВНалоговомОргане);
					
					МассивОтбораНачисленныйНДФЛ = НачисленныйНДФЛ.НайтиСтроки(СтруктураОтбораНДФЛ);
					
					Если МассивОтбораНачисленныйНДФЛ.Количество() <> 0 Тогда
						СуммаНалогаНачисленного = 0;
						МассивСуммНалогаНачисленного = Новый Массив;
						Для Каждого СтрокаМассиваНалогаНачисленного ИЗ МассивОтбораНачисленныйНДФЛ Цикл
							СуммаНалогаНачисленного = СуммаНалогаНачисленного + СтрокаМассиваНалогаНачисленного.Сумма;
							МассивСуммНалогаНачисленного.Добавить(СтрокаМассиваНалогаНачисленного.Сумма);
						КонецЦикла;
						
						Если НачисленныйНДФЛСуммаНалогаИсходный - СуммаНалогаНачисленного <> 0 Тогда
							МассивНовыхСумм = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(НачисленныйНДФЛСуммаНалогаИсходный, МассивСуммНалогаНачисленного);
							Если МассивНовыхСумм <> Неопределено Тогда
								НомерСтроки = 0;
								Для Каждого СтрокаМассива ИЗ МассивОтбораНачисленныйНДФЛ Цикл
									СтрокаМассива.Сумма = СтрокаМассива.Сумма - МассивНовыхСумм[НомерСтроки];
									НомерСтроки = НомерСтроки + 1;
								КонецЦикла;
							КонецЕсли;
						Иначе
							Для Каждого СтрокаМассива ИЗ МассивОтбораНачисленныйНДФЛ Цикл
								СтрокаМассива.Сумма = 0;
							КонецЦикла;
						КонецЕсли; 
						
					КонецЕсли;
					
				Иначе
					СуммаНалога = 0;
					МассивСумм = Новый Массив;
					Для Каждого СтрокаМассива ИЗ МассивОтбора Цикл
						СуммаНалога = СуммаНалога + СтрокаМассива.Сумма;
						МассивСумм.Добавить(СтрокаМассива.Сумма);
												
						СтруктураОтбораНДФЛ.Вставить("ФизическоеЛицо",СтрокаМассива.ФизическоеЛицо);
						СтруктураОтбораНДФЛ.Вставить("ВидОперации",СтрокаМассива.ВидОперации);
						СтруктураОтбораНДФЛ.Вставить("РегистрацияВНалоговомОргане",СтрокаМассива.РегистрацияВНалоговомОргане);
					
						МассивОтбораНачисленныйНДФЛ = НачисленныйНДФЛ.НайтиСтроки(СтруктураОтбораНДФЛ);
						
						Если МассивОтбораНачисленныйНДФЛ.Количество() <> 0 Тогда
							СуммаНалогаНачисленного = 0;
							МассивСуммНалогаНачисленного = Новый Массив;
							Для Каждого СтрокаМассиваНалогаНачисленного ИЗ МассивОтбораНачисленныйНДФЛ Цикл
								СуммаНалогаНачисленного = СуммаНалогаНачисленного + СтрокаМассиваНалогаНачисленного.Сумма;
								МассивСуммНалогаНачисленного.Добавить(СтрокаМассиваНалогаНачисленного.Сумма);
							КонецЦикла;
							
							Если НачисленныйНДФЛСуммаНалогаИсходный - СуммаНалогаНачисленного <> 0 Тогда
								МассивНовыхСумм = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(НачисленныйНДФЛСуммаНалогаИсходный, МассивСуммНалогаНачисленного);
								Если МассивНовыхСумм <> Неопределено Тогда
									НомерСтроки = 0;
									Для Каждого СтрокаМассива ИЗ МассивОтбораНачисленныйНДФЛ Цикл
										СтрокаМассива.Сумма = СтрокаМассива.Сумма - МассивНовыхСумм[НомерСтроки];
										НомерСтроки = НомерСтроки + 1;
									КонецЦикла;
								КонецЕсли; 
							Иначе
								Для Каждого СтрокаМассива ИЗ МассивОтбораНачисленныйНДФЛ Цикл
									СтрокаМассива.Сумма = 0;
								КонецЦикла;
							КонецЕсли; 
							
						КонецЕсли;
						
					КонецЦикла;
										
					Если НачисленныйНДФЛСуммаНалога - СуммаНалога <> 0 Тогда
						МассивНовыхСумм = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(НачисленныйНДФЛСуммаНалога, МассивСумм);
						Если МассивНовыхСумм <> Неопределено Тогда
							НомерСтроки = 0;
							Для Каждого СтрокаМассива ИЗ МассивОтбора Цикл
								СтрокаМассива.Сумма = МассивНовыхСумм[НомерСтроки];
								НомерСтроки = НомерСтроки + 1;
							КонецЦикла;
						КонецЕсли; 
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;	
		
	Иначе
		Результат  =  НачисленныйНДФЛ;
	КонецЕсли;
	
	Для Каждого СтрокаРезультата ИЗ Результат Цикл
		НоваяСтрока = НачисленнаяЗарплатаИВзносы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРезультата);
	КонецЦикла;	
	
	Если ДополнятьТаблицуНДФЛ Тогда
		Для Каждого СтрокаРезультата ИЗ НачисленныйНДФЛ Цикл
			Если СтрокаРезультата.Сумма <> 0 Тогда
				НоваяСтрока = НачисленнаяЗарплатаИВзносы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРезультата);
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
		
	Возврат НачисленнаяЗарплатаИВзносы;
	
КонецФункции

Функция ДополнитьТаблицуНДФЛАналитикойПоРегистрации(ТаблицаНДФЛ, Организация)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ТаблицаНДФЛ", ТаблицаНДФЛ);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаНДФЛ.ФизическоеЛицо,
	|	ТаблицаНДФЛ.Сумма,
	|	ТаблицаНДФЛ.ВидОперации,
	|	ВЫРАЗИТЬ(ТаблицаНДФЛ.КПП КАК СТРОКА(9)) КАК КПП,
	|	ВЫРАЗИТЬ(ТаблицаНДФЛ.КодНалоговогоОргана КАК СТРОКА(4)) КАК КодНалоговогоОргана,
	|	ВЫРАЗИТЬ(ТаблицаНДФЛ.КодПоОКАТО КАК СТРОКА(11)) КАК КодПоОКАТО,
	|	ВЫРАЗИТЬ(ТаблицаНДФЛ.КодПоОКТМО КАК СТРОКА(11)) КАК КодПоОКТМО
	|ПОМЕСТИТЬ ВТ_ТаблицаНДФЛ
	|ИЗ
	|	&ТаблицаНДФЛ КАК ТаблицаНДФЛ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистрацииВНалоговомОргане.Ссылка,
	|	РегистрацииВНалоговомОргане.Владелец,
	|	РегистрацииВНалоговомОргане.Владелец.ГоловнаяОрганизация,
	|	РегистрацииВНалоговомОргане.КПП,
	|	РегистрацииВНалоговомОргане.Код КАК КодНалоговогоОргана,
	|	РегистрацииВНалоговомОргане.КодПоОКАТО,
	|	РегистрацииВНалоговомОргане.КодПоОКТМО
	|ПОМЕСТИТЬ ВТ_РегистрацииВНалоговомОргане
	|ИЗ
	|	Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	|ГДЕ
	|	(РегистрацииВНалоговомОргане.Владелец = &Организация
	|			ИЛИ РегистрацииВНалоговомОргане.Владелец.ГоловнаяОрганизация = &Организация)
	|	И НЕ РегистрацииВНалоговомОргане.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаНДФЛ.ФизическоеЛицо,
	|	ВТ_ТаблицаНДФЛ.Сумма,
	|	ВТ_ТаблицаНДФЛ.ВидОперации,
	|	ВТ_ТаблицаНДФЛ.КПП,
	|	ВТ_ТаблицаНДФЛ.КодПоОКАТО,
	|	ВТ_ТаблицаНДФЛ.КодПоОКТМО,
	|	МАКСИМУМ(ВТ_РегистрацииВНалоговомОргане.Ссылка) КАК РегистрацияВНалоговомОргане
	|ИЗ
	|	ВТ_ТаблицаНДФЛ КАК ВТ_ТаблицаНДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РегистрацииВНалоговомОргане КАК ВТ_РегистрацииВНалоговомОргане
	|		ПО ВТ_ТаблицаНДФЛ.КПП = ВТ_РегистрацииВНалоговомОргане.КПП
	|			И ВТ_ТаблицаНДФЛ.КодПоОКАТО = ВТ_РегистрацииВНалоговомОргане.КодПоОКАТО
	|			И ВТ_ТаблицаНДФЛ.КодПоОКТМО = ВТ_РегистрацииВНалоговомОргане.КодПоОКТМО
	|			И ВТ_ТаблицаНДФЛ.КодНалоговогоОргана = ВТ_РегистрацииВНалоговомОргане.КодНалоговогоОргана
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаНДФЛ.ФизическоеЛицо,
	|	ВТ_ТаблицаНДФЛ.КодПоОКАТО,
	|	ВТ_ТаблицаНДФЛ.КодПоОКТМО,
	|	ВТ_ТаблицаНДФЛ.ВидОперации,
	|	ВТ_ТаблицаНДФЛ.Сумма,
	|	ВТ_ТаблицаНДФЛ.КПП,
	|	ВТ_ТаблицаНДФЛ.КодНалоговогоОргана";
	
	Возврат Запрос.Выполнить().Выгрузить();	
	
КонецФункции

Функция ДополнитьТаблицуЗарплатыАналитикойБухУчета(ТаблицаЗаработнойПлаты)
	
	///////////////////////////////////////
	// Описание типов для дополнения таблиц
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("ПеречислениеСсылка.ВидыНачисленийОплатыТрудаДляНУ"));
	ОписаниеТиповВидыНачисленийОплатыТрудаДляНУ =  Новый ОписаниеТипов(Массив, , );
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("СправочникСсылка.СпособыОтраженияЗарплатыВБухУчете"));
	ОписаниеТиповСпособыОтраженияЗарплатыВБухУчете =  Новый ОписаниеТипов(Массив, , );
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("СправочникСсылка.РегистрацииВНалоговомОргане"));
	ОписаниеТиповРегистрацииВНалоговомОргане =  Новый ОписаниеТипов(Массив, , );
	
	ОписаниеТиповПодразделенияОрганизаций =  БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения();
	
	Если ТаблицаЗаработнойПлаты.Колонки.Найти("ВидНачисленияОплатыТрудаДляНУ") = Неопределено Тогда
		ТаблицаЗаработнойПлаты.Колонки.Добавить("ВидНачисленияОплатыТрудаДляНУ", ОписаниеТиповВидыНачисленийОплатыТрудаДляНУ);
	КонецЕсли;
	
	Если ТаблицаЗаработнойПлаты.Колонки.Найти("СпособОтраженияЗарплатыВБухУчете") = Неопределено Тогда
		ТаблицаЗаработнойПлаты.Колонки.Добавить("СпособОтраженияЗарплатыВБухУчете", ОписаниеТиповСпособыОтраженияЗарплатыВБухУчете);
	КонецЕсли;
	
	Если ТаблицаЗаработнойПлаты.Колонки.Найти("Подразделение") = Неопределено Тогда
		ТаблицаЗаработнойПлаты.Колонки.Добавить("Подразделение", ОписаниеТиповПодразделенияОрганизаций);
	КонецЕсли;
	
	Если ТаблицаЗаработнойПлаты.Колонки.Найти("ОблагаетсяЕНВД") = Неопределено Тогда
		ТаблицаЗаработнойПлаты.Колонки.Добавить("ОблагаетсяЕНВД", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Если ТаблицаЗаработнойПлаты.Колонки.Найти("РегистрацияВНалоговомОргане") = Неопределено Тогда
		ТаблицаЗаработнойПлаты.Колонки.Добавить("РегистрацияВНалоговомОргане", ОписаниеТиповРегистрацииВНалоговомОргане);
	КонецЕсли;
	
	Если ТаблицаЗаработнойПлаты.Колонки.Найти("ВидОперацииРасходовЗаСчетФСС") = Неопределено Тогда
		ТаблицаЗаработнойПлаты.Колонки.Добавить("ВидОперацииРасходовЗаСчетФСС",Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийПоЗарплате"));
	КонецЕсли;
	
	Если ТаблицаЗаработнойПлаты.Колонки.Найти("ВедущийВидОперации") = Неопределено Тогда
		ТаблицаЗаработнойПлаты.Колонки.Добавить("ВедущийВидОперации",Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийПоЗарплате"));
		Для Каждого СтрокаТаблицы ИЗ ТаблицаЗаработнойПлаты Цикл
			СтрокаТаблицы.ВедущийВидОперации = СтрокаТаблицы.ВидОперации;
		КонецЦикла;
	КонецЕсли;
	
	// Описание типов для дополнения таблиц
	///////////////////////////////////////
	
	МассивОпераций = Новый Массив;
	МассивОпераций.Добавить(Перечисления.ВидыОперацийПоЗарплате.ПФРНакопительнаяЧасть);
	МассивОпераций.Добавить(Перечисления.ВидыОперацийПоЗарплате.ПФРСтраховаяЧасть);
	МассивОпераций.Добавить(Перечисления.ВидыОперацийПоЗарплате.ПФРПоСуммарномуТарифу);
	МассивОпераций.Добавить(Перечисления.ВидыОперацийПоЗарплате.ПФРДополнительныйТарифЛЭ);
	МассивОпераций.Добавить(Перечисления.ВидыОперацийПоЗарплате.ПФРДополнительныйТарифШахтеры);
	МассивОпераций.Добавить(Перечисления.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах);
	МассивОпераций.Добавить(Перечисления.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах);
	МассивОпераций.Добавить(Перечисления.ВидыОперацийПоЗарплате.ФСС);
	МассивОпераций.Добавить(Перечисления.ВидыОперацийПоЗарплате.ФССНС);
	МассивОпераций.Добавить(Перечисления.ВидыОперацийПоЗарплате.ФФОМС);
	МассивОпераций.Добавить(Перечисления.ВидыОперацийПоЗарплате.ТФОМС);
	
	МассивСчетовУчетаНУ = Новый Массив;
	МассивСчетовУчетаНУ.Добавить(ПланыСчетов.Хозрасчетный.РасходыНаОплатуТрудаБудущихПериодов);
	
	СчетУчетаНераспределеннаяПрибыль = ПланыСчетов.Хозрасчетный.НераспределеннаяПрибыль;
	СчетУчетаПрочиеРасходы = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
	РасходыПоУплатеСтраховыхВзносов = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.РасходыПоУплатеСтраховыхВзносов");	
	ПрочиеВнереализационныеДоходыРасходы = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.ПрочиеВнереализационныеДоходыРасходы");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачисленнаяЗарплатаИВзносы",           ТаблицаЗаработнойПлаты);	
	Запрос.УстановитьПараметр("МассивСчетовУчетаНУ",                  МассивСчетовУчетаНУ);
	Запрос.УстановитьПараметр("МассивОпераций",                       МассивОпераций);	
	Запрос.УстановитьПараметр("СчетУчетаНераспределеннаяПрибыль",     СчетУчетаНераспределеннаяПрибыль);	
	Запрос.УстановитьПараметр("СчетУчетаПрочиеРасходы",               СчетУчетаПрочиеРасходы);	
	Запрос.УстановитьПараметр("РасходыПоУплатеСтраховыхВзносов",      РасходыПоУплатеСтраховыхВзносов);	
	Запрос.УстановитьПараметр("ПрочиеВнереализационныеДоходыРасходы", ПрочиеВнереализационныеДоходыРасходы);	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачисленнаяЗарплатаИВзносы.ФизическоеЛицо,
	|	НачисленнаяЗарплатаИВзносы.Сумма,
	|	НачисленнаяЗарплатаИВзносы.ВидОперации,
	|	НачисленнаяЗарплатаИВзносы.ВидНачисленияОплатыТрудаДляНУ,
	|	НачисленнаяЗарплатаИВзносы.ОблагаетсяЕНВД,
	|	НачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухУчете,
	|	НачисленнаяЗарплатаИВзносы.Подразделение,
	|	НачисленнаяЗарплатаИВзносы.РегистрацияВНалоговомОргане,
	|	НачисленнаяЗарплатаИВзносы.ВидОперацииРасходовЗаСчетФСС,
	|	НачисленнаяЗарплатаИВзносы.ВедущийВидОперации
	|ПОМЕСТИТЬ ВТ_НачисленнаяЗарплатаИВзносы
	|ИЗ
	|	&НачисленнаяЗарплатаИВзносы КАК НачисленнаяЗарплатаИВзносы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_НачисленнаяЗарплатаИВзносы.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВТ_НачисленнаяЗарплатаИВзносы.Сумма КАК Сумма,
	|	ВТ_НачисленнаяЗарплатаИВзносы.ВидОперации КАК ВидОперации,
	|	ВТ_НачисленнаяЗарплатаИВзносы.ВидНачисленияОплатыТрудаДляНУ КАК ВидНачисленияОплатыТрудаДляНУ,
	|	ВТ_НачисленнаяЗарплатаИВзносы.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	ВТ_НачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухУчете КАК СпособОтраженияЗарплатыВБухУчете,
	|	ВТ_НачисленнаяЗарплатаИВзносы.Подразделение КАК Подразделение,
	|	ВТ_НачисленнаяЗарплатаИВзносы.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ПорядокОтраженияЗарплатыВБухУчете.Счет КАК Счет,
	|	ПорядокОтраженияЗарплатыВБухУчете.Субконто1 КАК Субконто1,
	|	ПорядокОтраженияЗарплатыВБухУчете.Субконто2 КАК Субконто2,
	|	ПорядокОтраженияЗарплатыВБухУчете.Субконто3 КАК Субконто3,
	|	ПорядокОтраженияЗарплатыВБухУчете.ОтражениеВУСН КАК ОтражениеВУСН,
	|	ВЫБОР
	|		КОГДА ПорядокОтраженияЗарплатыВБухУчете.Счет В ИЕРАРХИИ (&СчетУчетаНераспределеннаяПрибыль)
	|			ТОГДА &СчетУчетаПрочиеРасходы
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВТ_НачисленнаяЗарплатаИВзносы.ВидОперации В (&МассивОпераций)
	|					ТОГДА ВЫБОР
	|							КОГДА ВТ_НачисленнаяЗарплатаИВзносы.ОблагаетсяЕНВД
	|								ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|							КОГДА НЕ ПорядокОтраженияЗарплатыВБухУчете.Счет В (&МассивСчетовУчетаНУ)
	|								ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|							ИНАЧЕ ПорядокОтраженияЗарплатыВБухУчете.СчетНУ
	|						КОНЕЦ
	|				ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|			КОНЕЦ
	|	КОНЕЦ КАК СчетНУ,
	|	ВЫБОР
	|		КОГДА ПорядокОтраженияЗарплатыВБухУчете.Счет В ИЕРАРХИИ (&СчетУчетаНераспределеннаяПрибыль)
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_НачисленнаяЗарплатаИВзносы.ВидОперации В (&МассивОпераций)
	|						ТОГДА &РасходыПоУплатеСтраховыхВзносов
	|					ИНАЧЕ &ПрочиеВнереализационныеДоходыРасходы
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВТ_НачисленнаяЗарплатаИВзносы.ВидОперации В (&МассивОпераций)
	|					ТОГДА ВЫБОР
	|							КОГДА ВТ_НачисленнаяЗарплатаИВзносы.ОблагаетсяЕНВД
	|								ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)
	|							КОГДА НЕ ПорядокОтраженияЗарплатыВБухУчете.Счет В (&МассивСчетовУчетаНУ)
	|								ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)
	|							ИНАЧЕ ПорядокОтраженияЗарплатыВБухУчете.СубконтоНУ1
	|						КОНЕЦ
	|				ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)
	|			КОНЕЦ
	|	КОНЕЦ КАК СубконтоНУ1,
	|	ВЫБОР
	|		КОГДА ПорядокОтраженияЗарплатыВБухУчете.Счет В ИЕРАРХИИ (&СчетУчетаНераспределеннаяПрибыль)
	|			ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВТ_НачисленнаяЗарплатаИВзносы.ВидОперации В (&МассивОпераций)
	|					ТОГДА ВЫБОР
	|							КОГДА ВТ_НачисленнаяЗарплатаИВзносы.ОблагаетсяЕНВД
	|								ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)
	|							КОГДА НЕ ПорядокОтраженияЗарплатыВБухУчете.Счет В (&МассивСчетовУчетаНУ)
	|								ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)
	|							ИНАЧЕ ПорядокОтраженияЗарплатыВБухУчете.СубконтоНУ2
	|						КОНЕЦ
	|				ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)
	|			КОНЕЦ
	|	КОНЕЦ КАК СубконтоНУ2,
	|	ВЫБОР
	|		КОГДА ПорядокОтраженияЗарплатыВБухУчете.Счет В ИЕРАРХИИ (&СчетУчетаНераспределеннаяПрибыль)
	|			ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВТ_НачисленнаяЗарплатаИВзносы.ВидОперации В (&МассивОпераций)
	|					ТОГДА ВЫБОР
	|							КОГДА ВТ_НачисленнаяЗарплатаИВзносы.ОблагаетсяЕНВД
	|								ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)
	|							КОГДА НЕ ПорядокОтраженияЗарплатыВБухУчете.Счет В (&МассивСчетовУчетаНУ)
	|								ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)
	|							ИНАЧЕ ПорядокОтраженияЗарплатыВБухУчете.СубконтоНУ3
	|						КОНЕЦ
	|				ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)
	|			КОНЕЦ
	|	КОНЕЦ КАК СубконтоНУ3,
	|	ВТ_НачисленнаяЗарплатаИВзносы.ВидОперацииРасходовЗаСчетФСС КАК ВидОперацииРасходовЗаСчетФСС,
	|	ВТ_НачисленнаяЗарплатаИВзносы.ВедущийВидОперации
	|ПОМЕСТИТЬ ВТ_ТаблицаСПроводками
	|ИЗ
	|	ВТ_НачисленнаяЗарплатаИВзносы КАК ВТ_НачисленнаяЗарплатаИВзносы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокОтраженияЗарплатыВБухУчете КАК ПорядокОтраженияЗарплатыВБухУчете
	|		ПО ВТ_НачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухУчете = ПорядокОтраженияЗарплатыВБухУчете.СпособОтраженияЗарплатыВБухУчете
	|			И ВТ_НачисленнаяЗарплатаИВзносы.ОблагаетсяЕНВД = ПорядокОтраженияЗарплатыВБухУчете.ЕНВД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаСПроводками.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВТ_ТаблицаСПроводками.Сумма КАК Сумма,
	|	ВТ_ТаблицаСПроводками.ВидОперации КАК ВидОперации,
	|	ВТ_ТаблицаСПроводками.ВидНачисленияОплатыТрудаДляНУ КАК ВидНачисленияОплатыТрудаДляНУ,
	|	ВТ_ТаблицаСПроводками.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	ВТ_ТаблицаСПроводками.СпособОтраженияЗарплатыВБухУчете КАК СпособОтраженияЗарплатыВБухУчете,
	|	ВТ_ТаблицаСПроводками.Подразделение КАК Подразделение,
	|	ВТ_ТаблицаСПроводками.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ВЫБОР
	|		КОГДА ВТ_ТаблицаСПроводками.ОблагаетсяЕНВД
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(ВТ_ТаблицаСПроводками.Счет, ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)) = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|						ТОГДА ПорядокОтраженияЗарплатыВБухУчете.Счет
	|					ИНАЧЕ ВТ_ТаблицаСПроводками.Счет
	|				КОНЕЦ
	|		ИНАЧЕ ВТ_ТаблицаСПроводками.Счет
	|	КОНЕЦ КАК Счет,
	|	ВЫБОР
	|		КОГДА ВТ_ТаблицаСПроводками.ОблагаетсяЕНВД
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(ВТ_ТаблицаСПроводками.Счет, ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)) = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|						ТОГДА ПорядокОтраженияЗарплатыВБухУчете.Субконто1
	|					ИНАЧЕ ВТ_ТаблицаСПроводками.Субконто1
	|				КОНЕЦ
	|		ИНАЧЕ ВТ_ТаблицаСПроводками.Субконто1
	|	КОНЕЦ КАК Субконто1,
	|	ВЫБОР
	|		КОГДА ВТ_ТаблицаСПроводками.ОблагаетсяЕНВД
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(ВТ_ТаблицаСПроводками.Счет, ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)) = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|						ТОГДА ПорядокОтраженияЗарплатыВБухУчете.Субконто2
	|					ИНАЧЕ ВТ_ТаблицаСПроводками.Субконто2
	|				КОНЕЦ
	|		ИНАЧЕ ВТ_ТаблицаСПроводками.Субконто2
	|	КОНЕЦ КАК Субконто2,
	|	ВЫБОР
	|		КОГДА ВТ_ТаблицаСПроводками.ОблагаетсяЕНВД
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(ВТ_ТаблицаСПроводками.Счет, ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)) = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|						ТОГДА ПорядокОтраженияЗарплатыВБухУчете.Субконто3
	|					ИНАЧЕ ВТ_ТаблицаСПроводками.Субконто3
	|				КОНЕЦ
	|		ИНАЧЕ ВТ_ТаблицаСПроводками.Субконто3
	|	КОНЕЦ КАК Субконто3,
	|	ВЫБОР
	|		КОГДА ВТ_ТаблицаСПроводками.ОблагаетсяЕНВД
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(ВТ_ТаблицаСПроводками.Счет, ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)) = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ОтражениеВУСН.НеПринимаются)
	|					ИНАЧЕ ВТ_ТаблицаСПроводками.ОтражениеВУСН
	|				КОНЕЦ
	|		ИНАЧЕ ВТ_ТаблицаСПроводками.ОтражениеВУСН
	|	КОНЕЦ КАК ОтражениеВУСН,
	|	ВТ_ТаблицаСПроводками.СчетНУ КАК СчетНУ,
	|	ВТ_ТаблицаСПроводками.СубконтоНУ1 КАК СубконтоНУ1,
	|	ВТ_ТаблицаСПроводками.СубконтоНУ2 КАК СубконтоНУ2,
	|	ВТ_ТаблицаСПроводками.СубконтоНУ3 КАК СубконтоНУ3,
	|	ВТ_ТаблицаСПроводками.ВидОперацииРасходовЗаСчетФСС,
	|	ВТ_ТаблицаСПроводками.ВедущийВидОперации
	|ПОМЕСТИТЬ ВТ_ИтоговаяТаблица
	|ИЗ
	|	ВТ_ТаблицаСПроводками КАК ВТ_ТаблицаСПроводками
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокОтраженияЗарплатыВБухУчете КАК ПорядокОтраженияЗарплатыВБухУчете
	|		ПО ВТ_ТаблицаСПроводками.СпособОтраженияЗарплатыВБухУчете = ПорядокОтраженияЗарплатыВБухУчете.СпособОтраженияЗарплатыВБухУчете
	|			И (ВТ_ТаблицаСПроводками.ОблагаетсяЕНВД)
	|			И (ЕСТЬNULL(ВТ_ТаблицаСПроводками.Счет, ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)) = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ИтоговаяТаблица.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВТ_ИтоговаяТаблица.Сумма КАК Сумма,
	|	ВТ_ИтоговаяТаблица.ВидОперации КАК ВидОперации,
	|	ВТ_ИтоговаяТаблица.ВидНачисленияОплатыТрудаДляНУ КАК ВидНачисленияОплатыТрудаДляНУ,
	|	ВТ_ИтоговаяТаблица.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	ВТ_ИтоговаяТаблица.СпособОтраженияЗарплатыВБухУчете КАК СпособОтраженияЗарплатыВБухУчете,
	|	ВТ_ИтоговаяТаблица.Подразделение КАК Подразделение,
	|	ВТ_ИтоговаяТаблица.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ВЫБОР
	|		КОГДА ВТ_ИтоговаяТаблица.Счет В ИЕРАРХИИ (&СчетУчетаНераспределеннаяПрибыль)
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_ИтоговаяТаблица.ВидОперации В (&МассивОпераций)
	|						ТОГДА &СчетУчетаПрочиеРасходы
	|					ИНАЧЕ ВТ_ИтоговаяТаблица.Счет
	|				КОНЕЦ
	|		ИНАЧЕ ВТ_ИтоговаяТаблица.Счет
	|	КОНЕЦ КАК Счет,
	|	ВЫБОР
	|		КОГДА ВТ_ИтоговаяТаблица.Счет В ИЕРАРХИИ (&СчетУчетаНераспределеннаяПрибыль)
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_ИтоговаяТаблица.ВидОперации В (&МассивОпераций)
	|						ТОГДА &РасходыПоУплатеСтраховыхВзносов
	|					ИНАЧЕ ВТ_ИтоговаяТаблица.Субконто1
	|				КОНЕЦ
	|		ИНАЧЕ ВТ_ИтоговаяТаблица.Субконто1
	|	КОНЕЦ КАК Субконто1,
	|	ВЫБОР
	|		КОГДА ВТ_ИтоговаяТаблица.Счет В ИЕРАРХИИ (&СчетУчетаНераспределеннаяПрибыль)
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_ИтоговаяТаблица.ВидОперации В (&МассивОпераций)
	|						ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)
	|					ИНАЧЕ ВТ_ИтоговаяТаблица.Субконто2
	|				КОНЕЦ
	|		ИНАЧЕ ВТ_ИтоговаяТаблица.Субконто2
	|	КОНЕЦ КАК Субконто2,
	|	ВЫБОР
	|		КОГДА ВТ_ИтоговаяТаблица.Счет В ИЕРАРХИИ (&СчетУчетаНераспределеннаяПрибыль)
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_ИтоговаяТаблица.ВидОперации В (&МассивОпераций)
	|						ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)
	|					ИНАЧЕ ВТ_ИтоговаяТаблица.Субконто3
	|				КОНЕЦ
	|		ИНАЧЕ ВТ_ИтоговаяТаблица.Субконто3
	|	КОНЕЦ КАК Субконто3,
	|	ВТ_ИтоговаяТаблица.ОтражениеВУСН КАК ОтражениеВУСН,
	|	ВЫБОР
	|		КОГДА ВТ_ИтоговаяТаблица.СчетНУ В ИЕРАРХИИ (&СчетУчетаНераспределеннаяПрибыль)
	|			ТОГДА &СчетУчетаПрочиеРасходы
	|		ИНАЧЕ ВТ_ИтоговаяТаблица.СчетНУ
	|	КОНЕЦ КАК СчетНУ,
	|	ВЫБОР
	|		КОГДА ВТ_ИтоговаяТаблица.СчетНУ В ИЕРАРХИИ (&СчетУчетаНераспределеннаяПрибыль)
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_ИтоговаяТаблица.ВидОперации В (&МассивОпераций)
	|						ТОГДА &РасходыПоУплатеСтраховыхВзносов
	|					ИНАЧЕ &ПрочиеВнереализационныеДоходыРасходы
	|				КОНЕЦ
	|		ИНАЧЕ ВТ_ИтоговаяТаблица.СубконтоНУ1
	|	КОНЕЦ КАК СубконтоНУ1,
	|	ВЫБОР
	|		КОГДА ВТ_ИтоговаяТаблица.СчетНУ В ИЕРАРХИИ (&СчетУчетаНераспределеннаяПрибыль)
	|			ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)
	|		ИНАЧЕ ВТ_ИтоговаяТаблица.СубконтоНУ2
	|	КОНЕЦ КАК СубконтоНУ2,
	|	ВЫБОР
	|		КОГДА ВТ_ИтоговаяТаблица.СчетНУ В ИЕРАРХИИ (&СчетУчетаНераспределеннаяПрибыль)
	|			ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)
	|		ИНАЧЕ ВТ_ИтоговаяТаблица.СубконтоНУ3
	|	КОНЕЦ КАК СубконтоНУ3,
	|	ВТ_ИтоговаяТаблица.ВидОперацииРасходовЗаСчетФСС КАК ВидОперацииРасходовЗаСчетФСС,
	|	ВТ_ИтоговаяТаблица.ВедущийВидОперации КАК ВедущийВидОперации
	|ИЗ
	|	ВТ_ИтоговаяТаблица КАК ВТ_ИтоговаяТаблица";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура СформироватьПроводкиПоОтражениюЗарплатыВУчете(ТаблицаЗаработнойПлаты, Реквизиты, Движения, Отказ)
	
	Если ТаблицаЗаработнойПлаты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВестиУчетПоРаботникам = Константы.ВедетсяУчетРасчетовПоЗарплатеПоРаботникам.Получить();
		
	ТаблицаНачисленийУдержаний = ПодготовитьТаблицуНачисленийУдержаний(ТаблицаЗаработнойПлаты,,,Реквизиты);
	ТаблицаНалоговВзносовСФОТ  = ПодготовитьТаблицуНалоговВзносовСФОТ(ТаблицаЗаработнойПлаты,,,Реквизиты);
	ТаблицаДепонентов          = ПодготовитьТаблицуДепонентов(Реквизиты, ТаблицаЗаработнойПлаты);
	
	МассивТаблицПоЗаработнойПлате = Новый Массив;
	МассивТаблицПоЗаработнойПлате.Добавить(ТаблицаНачисленийУдержаний);
	МассивТаблицПоЗаработнойПлате.Добавить(ТаблицаНалоговВзносовСФОТ);
	МассивТаблицПоЗаработнойПлате.Добавить(ТаблицаДепонентов);
	
	СодержанияПроводок = Новый Соответствие;	
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.НачисленоДоход,                                "Начислена заработная плата");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.НатуральныйДоход,                              "Начислен доход в натуральной форме");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.НачисленоСдельноДоход,                         "Начислена заработная плата (сдельно)");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.НачисленоПроцентовПоЗайму,                     "Начислены проценты по займу");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ДивидендыСотрудников,                          "Начислены дивиденды");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.Дивиденды,                                     "Начислены дивиденды");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ДоходыКонтрагентов,                            "Начислен доход прочему физическому лицу");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ВыплатыБывшимСотрудникам,                      "Начислен доход бывшему работнику");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ДоговорАвторскогоЗаказа,                       "Начислен доход по договору авторского заказа");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ДоговорРаботыУслуги,                           "Начислен доход по договору гражданско-правового характера");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.НДФЛ,                                          "Удержан НДФЛ");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.НДФЛДоначисленныйПоРезультатамПроверки,        "Доначислен НДФЛ");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.НФДЛДивидендыСотрудникам,                      "Удержан НДФЛ с дивидендов");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.НФДЛДивиденды,                                 "Удержан НДФЛ с дивидендов");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.НДФЛПрочиеРасчетыСПерсоналом,                  "Удержан НДФЛ по прочим расчетам с персоналом");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.НДФЛПередачаЗадолженностиВНалоговыйОрган,      "Задолженность по НДФЛ передана в налоговый орган");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.НДФЛДоходыКонтрагентов,                        "Удержан НДФЛ по расчетам с прочими физическими лицами");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.НДФЛРасчетыСБывшимиСотрудниками,               "Удержан НДФЛ по расчетам с бывшим работником");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПФРНакопительнаяЧасть,                         "Накопительная часть трудовой пенсии");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПФРСтраховаяЧасть,                             "Страховая часть трудовой пенсии");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПФРПоСуммарномуТарифу,                         "Обязательное пенсионное страхование");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПФРДополнительныйТарифЛЭ,                      "Взносы на доплату к пенсии членам летных экипажей");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПФРДополнительныйТарифШахтеры,                 "Взносы на доплату к пенсии работникам угольной промышленности");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах,        "Дополнительные взносы на работников, занятым на работах с вредными условиями труда");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах,           "Дополнительные взносы на работников, занятым на работах с тяжелыми условиями труда");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ФСС,                                           "Расчеты по социальному страхованию");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ФССНС,                                         "Расчеты по обязательному социальному страхованию от НС и ПЗ");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ФФОМС,                                         "Федеральный фонд ОМС");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ТФОМС,                                         "Территориальный фонд ОМС");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФССНС,                     "Расчеты по обязательному социальному страхованию от НС и ПЗ");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФСС,                       "Расчеты по социальному страхованию");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.Депонирование,                                 "Депонирование невыплаченной заработной платы");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.СписаниеДепонента,                             "Списание депонированной заработной платы");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПрочиеРасчетыСПерсоналом,                      "Прочие расчеты с персоналом");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.МатериальнаяПомощь,                            "Материальная помощь");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюРаботодатель,              "Оплата больничного за счет работодателя");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.КомпенсацияЗаЗадержкуЗарплаты,                 "Компенсация за задержку зарплаты");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпуск,                               "Начислен ежегодный отпуск");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускОценочныеОбязательства,         "Начислен ежегодный отпуск за счете оценочных обязательств по отпускам");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускОценочныеОбязательстваИРезервы, "Начислен ежегодный отпуск");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускРезервы,                        "Начислен ежегодный отпуск за счет резервов отпусков");
	
	СчетРасчетовСПерсоналомПоОплатеТруда = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
	
	Для Каждого ТаблицаМассива ИЗ МассивТаблицПоЗаработнойПлате Цикл
		
		Если ТаблицаМассива.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьКолонкаСчетНУ = Ложь;
		Если ТаблицаМассива.Колонки.Найти("СчетНУ") <> Неопределено Тогда
			ЕстьКолонкаСчетНУ = Истина;
		КонецЕсли;
		
		Для Каждого СтрокаТаблицы Из ТаблицаМассива Цикл
									
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Счет)
				ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицы.КорСчет) Тогда
				// не заполнены счет и аналитика
				Продолжить;
			КонецЕсли;
						
			Если СтрокаТаблицы.Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			УказанСчетНУ = Ложь;
			Если ЕстьКолонкаСчетНУ Тогда
				УказанСчетНУ = ЗначениеЗаполнено(СтрокаТаблицы.СчетНУ);				
			КонецЕсли;
			
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Сумма       = СтрокаТаблицы.Сумма;
			Проводка.Содержание  = СодержанияПроводок.Получить(СтрокаТаблицы.ВидОперации);
			
			Проводка.СчетДт = СтрокаТаблицы.Счет;
			
			Если СтрокаТаблицы.Счет = СчетРасчетовСПерсоналомПоОплатеТруда Тогда
				Если ВестиУчетПоРаботникам Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", СтрокаТаблицы.Субконто1);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидНачисленийОплатыТрудаПоСтатье255НК", СтрокаТаблицы.Субконто2);
				Иначе
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидНачисленийОплатыТрудаПоСтатье255НК", СтрокаТаблицы.Субконто1);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.Субконто2);
				КонецЕсли;				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.Субконто3);
			Иначе
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.Субконто1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.Субконто2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.Субконто3);
			КонецЕсли;
			
			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = СтрокаТаблицы.Подразделение;
			КонецЕсли;
			
			Если УказанСчетНУ Тогда
				Если СвойстваСчетаДт.НалоговыйУчет Тогда				
					Проводка.СуммаВРДт = СтрокаТаблицы.Сумма;
				КонецЕсли;
			КонецЕсли;
			
			Проводка.СчетКт = СтрокаТаблицы.КорСчет;
			
			Если СтрокаТаблицы.КорСчет = СчетРасчетовСПерсоналомПоОплатеТруда Тогда
				Если ВестиУчетПоРаботникам Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", СтрокаТаблицы.КорСубконто1);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидНачисленийОплатыТрудаПоСтатье255НК", СтрокаТаблицы.КорСубконто2);
				Иначе
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидНачисленийОплатыТрудаПоСтатье255НК", СтрокаТаблицы.КорСубконто1);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.КорСубконто2);
				КонецЕсли;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.КорСубконто3);
			Иначе
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.КорСубконто1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.КорСубконто2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.КорСубконто3);
			КонецЕсли;
			
			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = СтрокаТаблицы.Подразделение;
			КонецЕсли;
			
			Если УказанСчетНУ Тогда
				
				// указан счет НУ - отличный от БУ
				// это в частности страховые взносы 
				// по переходящим отпускам
				
				СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетНУ);
				Если НЕ СвойстваСчетаДт.НалоговыйУчет Тогда
					Продолжить;
				КонецЕсли;
				
				Проводка = Движения.Хозрасчетный.Добавить();
				Проводка.Период      = Реквизиты.Период;
				Проводка.Организация = Реквизиты.Организация;
				Проводка.СуммаНУДт       = СтрокаТаблицы.Сумма;
				Проводка.СуммаВРДт     = - СтрокаТаблицы.Сумма;
				Проводка.Содержание  = СодержанияПроводок.Получить(СтрокаТаблицы.ВидОперации);
				
				Проводка.СчетДт = СтрокаТаблицы.СчетНУ;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоНУ1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоНУ2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.СубконтоНУ3);
				
				СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
				Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеДт = СтрокаТаблицы.Подразделение;
				КонецЕсли;
				
				Проводка.СчетКт = СтрокаТаблицы.КорСчет;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.КорСубконто1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.КорСубконто2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.КорСубконто3);
				
				СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
				Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеКт = СтрокаТаблицы.Подразделение;
				КонецЕсли;
				
			КонецЕсли;
						
		КонецЦикла;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Функция СоздатьКлючСортировки(ИсходныеДанные)
	
	ПриоритетВидаОперации = 1000;
	
	// Доходы
	// Диапазон ключей 1-100
	// 1-50   :: Доходы работников
	// 51-70  :: Договора
	// 71-80  :: Дивиденды
	// 81-100 :: Прочие

	Если ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НачисленоДоход Тогда
		ПриоритетВидаОперации = 1;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НачисленоСдельноДоход Тогда
		ПриоритетВидаОперации = 2;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НатуральныйДоход Тогда
		ПриоритетВидаОперации = 3;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.МатериальнаяПомощь Тогда
		ПриоритетВидаОперации = 4;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюБюджет Тогда
		ПриоритетВидаОперации = 5;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюРаботодатель Тогда
		ПриоритетВидаОперации = 6;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФСС Тогда
		ПриоритетВидаОперации = 7;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФССНС Тогда
		ПриоритетВидаОперации = 8;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпуск Тогда
		ПриоритетВидаОперации = 9;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускОценочныеОбязательстваИРезервы Тогда
		ПриоритетВидаОперации = 10;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускОценочныеОбязательства Тогда
		ПриоритетВидаОперации = 11;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускРезервы Тогда
		ПриоритетВидаОперации = 12;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ДоговорРаботыУслуги Тогда
		ПриоритетВидаОперации = 51;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ДоходыКонтрагентов Тогда
		ПриоритетВидаОперации = 52;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ДоговорАвторскогоЗаказа Тогда
		ПриоритетВидаОперации = 53;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ДивидендыСотрудников Тогда
		ПриоритетВидаОперации = 71;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.Дивиденды Тогда
		ПриоритетВидаОперации = 72;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НачисленоПроцентовПоЗайму Тогда
		ПриоритетВидаОперации = 81;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ПрочиеРасчетыСПерсоналом Тогда
		ПриоритетВидаОперации = 82;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ВознаграждениеПлатежногоАгента Тогда
		ПриоритетВидаОперации = 83;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ВыплатыБывшимСотрудникам Тогда
		ПриоритетВидаОперации = 84;
	КонецЕсли;
	
	// Удержания
	// Диапазон ключей 201-300
	// 201-220 :: НДФЛ
	// 221-240 :: Исполительные документы
	// 241-260 :: Удержания текущей деятельности
	// 261-270 :: Удержания текущей деятельности (нарушения)
	// 271–280 :: Удержания добровольных взносов
	// 291-300 :: Прочие
	Если ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НДФЛ Тогда
		ПриоритетВидаОперации = 201;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НДФЛДоходыКонтрагентов Тогда
		ПриоритетВидаОперации = 202;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НФДЛДивидендыСотрудникам Тогда
		ПриоритетВидаОперации = 203;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НДФЛДоначисленныйПоРезультатамПроверки Тогда
		ПриоритетВидаОперации = 204;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НФДЛДивиденды Тогда
		ПриоритетВидаОперации = 205;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НДФЛПрочиеРасчетыСПерсоналом Тогда
		ПриоритетВидаОперации = 206;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НДФЛРасчетыСБывшимиСотрудниками Тогда
		ПриоритетВидаОперации = 207;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.АлиментыПрочиеИсполнительныеЛисты Тогда
		ПриоритетВидаОперации = 221;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.Профвзносы Тогда
		ПриоритетВидаОперации = 241;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ПроцентыПоЗайму Тогда
		ПриоритетВидаОперации = 242;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ПогашениеЗаймов Тогда
		ПриоритетВидаОперации = 243;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ВозмещениеУщерба Тогда
		ПриоритетВидаОперации = 261;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.УдержаниеНеизрасходованныхПодотчетныхСумм Тогда
		ПриоритетВидаОперации = 262;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.УдержаниеЗаОтпуск Тогда
		ПриоритетВидаОперации = 263;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.УдержаниеПоПрочимОперациямСРаботниками Тогда
		ПриоритетВидаОперации = 264;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ДСВ Тогда
		ПриоритетВидаОперации = 271;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ДобровольныеВзносыВНПФ Тогда
		ПриоритетВидаОперации = 272;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ДобровольныеВзносыВНПФ Тогда
		ПриоритетВидаОперации = 281;
	КонецЕсли;
	
	// Взносы
	// Диапазон ключей 301-400
	Если ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ФСС Тогда
		ПриоритетВидаОперации = 301;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ПФРПоСуммарномуТарифу Тогда
		ПриоритетВидаОперации = 302;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ПФРСтраховаяЧасть Тогда
		ПриоритетВидаОперации = 303;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ПФРНакопительнаяЧасть Тогда
		ПриоритетВидаОперации = 304;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ФФОМС Тогда
		ПриоритетВидаОперации = 305;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ТФОМС Тогда
		ПриоритетВидаОперации = 306;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ФССНС Тогда
		ПриоритетВидаОперации = 307;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ПФРДополнительныйТарифШахтеры Тогда
		ПриоритетВидаОперации = 308;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ПФРДополнительныйТарифЛЭ Тогда
		ПриоритетВидаОперации = 309;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах Тогда
		ПриоритетВидаОперации = 310;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах Тогда
		ПриоритетВидаОперации = 311;
	КонецЕсли;
	
	// Расчеты
	// Диапазон ключей 401-...
	// 401-410  :: Депоненты
	// 411-420  :: Компенсации
	// 421-430  :: Расчеты по налогам
	// 431-...  :: Расчеты по доходам
	Если ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.Депонирование Тогда
		ПриоритетВидаОперации = 401;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.СписаниеДепонента Тогда
		ПриоритетВидаОперации = 402;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.КомпенсацияЗаЗадержкуЗарплаты Тогда
		ПриоритетВидаОперации = 411;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НДФЛПередачаЗадолженностиВНалоговыйОрган Тогда
		ПриоритетВидаОперации = 421;
	ИначеЕсли ИсходныеДанные.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ВозвратИзлишнеВыплаченныхСуммВследствиеСчетныхОшибок Тогда
		ПриоритетВидаОперации = 431;
	КонецЕсли;
	
	Возврат ПриоритетВидаОперации;
		
КонецФункции

Функция ПодготовитьТаблицуНачисленийУдержаний(ТаблицаЗаработнойПлаты, УСН = Ложь, ИП = Ложь, Реквизиты)
		
	ТаблицаНачисленийИУдержаний = ТаблицаЗаработнойПлаты.СкопироватьКолонки();
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("КорСчет");
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("КорСубконто1");
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("КорСубконто2");
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("КорСубконто3");
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("КлючСортировки");
	
	СчетУчетаНераспределеннаяПрибыль = ПланыСчетов.Хозрасчетный.НераспределеннаяПрибыль;
	ЕстьУчетНУ = Ложь;
	Если ТаблицаЗаработнойПлаты.Найти(Перечисления.ВидыОперацийПоЗарплате.МатериальнаяПомощь, "ВидОперации") <> Неопределено Тогда
		ЕстьУчетНУ = Истина;
	КонецЕсли;
	
	МассивСчет84 = Новый Массив();
	ВыборкаСчетов = ПланыСчетов.Хозрасчетный.ВыбратьИерархически(ПланыСчетов.Хозрасчетный.НераспределеннаяПрибыль);
	Пока ВыборкаСчетов.Следующий() Цикл
		МассивСчет84.Добавить(ВыборкаСчетов.Ссылка);
	КонецЦикла;
	
	// Счета учета
	СчетРасчетовСПерсоналомПоОплатеТруда        = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;             // 70
	РасчетыПоПредоставленнымЗаймам              = ПланыСчетов.Хозрасчетный.РасчетыПоПредоставленнымЗаймам;              // 73.01
	РасчетыПоПрочимОперациям                    = ПланыСчетов.Хозрасчетный.РасчетыПоПрочимОперациям;                    // 73.03
	РасчетыПоВыплатеДоходов                     = ПланыСчетов.Хозрасчетный.РасчетыПоВыплатеДоходов;                     // 75.02
	ПрочиеРасчетыСРазнымиДебиторамиИКредиторами = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами; // 76.09
	ПрочиеРасходы                               = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;                               // 91.02
	СчетРезерваОтпусков                         = ПланыСчетов.Хозрасчетный.ОценочныеОбязательстваПоВознаграждениям;     // 96.01.1
	РасчетыПоБольничнымФСС                      = ПланыСчетов.Хозрасчетный.ФСС;                                         // 69.01
	РасчетыПоБольничнымФССНС                    = ПланыСчетов.Хозрасчетный.ФСС_НСиПЗ;                                   // 69.11
	СчетУчетаНДФЛ                               = ПланыСчетов.Хозрасчетный.НДФЛ;                                        // 68.01
	ПустойСчет                                  = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	
	// Аналитика учета
	ВидПлатежаВГосБюджет                        = Перечисления.ВидыПлатежейВГосБюджет.Налог;
	ВидПлатежаВГосБюджетАкт                     = Перечисления.ВидыПлатежейВГосБюджет.НалогАкт;
	ВидПлатежаВГосБюджетРасходыПоСтрахованию    = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию;
	ПрочиеВнереализационныеДоходыРасходы        = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.ПрочиеВнереализационныеДоходыРасходы");
	ВидыНачисленийОплатыТрудаДляНУ_пп7ст255     = Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп7ст255;
	ПустоеСубконто                              = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка();
	
	НастройкиУчетаЗарплаты = РегистрыСведений.НастройкиУчетаЗарплаты.Получить(Новый Структура("Организация", Реквизиты.Организация));
	РезервОтпусковЭлемент  = НастройкиУчетаЗарплаты.РезервОтпусков;
	
	ВестиУчетПоРаботникам                    = Константы.ВедетсяУчетРасчетовПоЗарплатеПоРаботникам.Получить();
	УчетЗарплатыИКадровСредствамиБухгалтерии = Константы.УчетЗарплатыИКадровСредствамиБухгалтерии.Получить();
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаЗаработнойПлаты Цикл
		
		Если СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НачисленоДоход
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НачисленоСдельноДоход
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ДивидендыСотрудников
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФССНС
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФСС
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюРаботодатель
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюБюджет
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ДоговорАвторскогоЗаказа
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ДоговорРаботыУслуги
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.МатериальнаяПомощь
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.КомпенсацияЗаЗадержкуЗарплаты
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпуск Тогда
			
			Если НЕ ЕстьУчетНУ Тогда
				Если МассивСчет84.Найти(СтрокаТаблицы.Счет) <> Неопределено Тогда
					ЕстьУчетНУ = Истина;
				КонецЕсли;
			КонецЕсли;
							
			НоваяСтрока = ТаблицаНачисленийИУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.КорСчет      = СчетРасчетовСПерсоналомПоОплатеТруда;
			
			Если ВестиУчетПоРаботникам ИЛИ ((УСН ИЛИ ИП) И УчетЗарплатыИКадровСредствамиБухгалтерии)Тогда
				
				НоваяСтрока.КорСубконто1 = СтрокаТаблицы.ФизическоеЛицо;
				НоваяСтрока.КорСубконто2 = СтрокаТаблицы.ВидНачисленияОплатыТрудаДляНУ;
				
			Иначе
				
				НоваяСтрока.КорСубконто1 = СтрокаТаблицы.ВидНачисленияОплатыТрудаДляНУ;
				
			КонецЕсли;
			
			Если СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФССНС
				ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФСС Тогда
				Если (НЕ ЗначениеЗаполнено(НоваяСтрока.Счет)) // на случай когда счет не пришел
					ИЛИ // на случай когда счет задан и надо сохранить аналитику
					(ЗначениеЗаполнено(НоваяСтрока.Счет) И (НоваяСтрока.Счет <> РасчетыПоБольничнымФССНС) И (НоваяСтрока.Счет <> РасчетыПоБольничнымФСС))
					Тогда
					Если  СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФССНС Тогда
						НоваяСтрока.Счет = РасчетыПоБольничнымФССНС;
					Иначе
						НоваяСтрока.Счет = РасчетыПоБольничнымФСС;
					КонецЕсли;
					НоваяСтрока.Субконто1 = ВидПлатежаВГосБюджетРасходыПоСтрахованию;
				КонецЕсли;					
			КонецЕсли;
			
			НоваяСтрока.КлючСортировки = СоздатьКлючСортировки(СтрокаТаблицы);
			
		ИначеЕсли СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускОценочныеОбязательстваИРезервы Тогда
			
			НоваяСтрока = ТаблицаНачисленийИУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			
			НоваяСтрока.КорСчет      = СчетРасчетовСПерсоналомПоОплатеТруда;
			
			Если ВестиУчетПоРаботникам ИЛИ ((УСН ИЛИ ИП) И УчетЗарплатыИКадровСредствамиБухгалтерии)Тогда
				
				НоваяСтрока.КорСубконто1 = СтрокаТаблицы.ФизическоеЛицо;
				НоваяСтрока.КорСубконто2 = ВидыНачисленийОплатыТрудаДляНУ_пп7ст255;
				
			Иначе
				
				НоваяСтрока.КорСубконто1 = ВидыНачисленийОплатыТрудаДляНУ_пп7ст255;
				
			КонецЕсли;
			
			НоваяСтрока.Счет      = СчетРезерваОтпусков;
			НоваяСтрока.Субконто1 = РезервОтпусковЭлемент;
			НоваяСтрока.Субконто2 = ПустоеСубконто;
			НоваяСтрока.Субконто3 = ПустоеСубконто;
			
			НоваяСтрока.КлючСортировки = СоздатьКлючСортировки(СтрокаТаблицы);
			
		ИначеЕсли СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускОценочныеОбязательства
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускРезервы Тогда
			
			НоваяСтрока = ТаблицаНачисленийИУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			
			НоваяСтрока.КорСчет      = СчетРасчетовСПерсоналомПоОплатеТруда;
			
			Если ВестиУчетПоРаботникам ИЛИ ((УСН ИЛИ ИП) И УчетЗарплатыИКадровСредствамиБухгалтерии)Тогда
				
				НоваяСтрока.КорСубконто1 = СтрокаТаблицы.ФизическоеЛицо;
				НоваяСтрока.КорСубконто2 = ВидыНачисленийОплатыТрудаДляНУ_пп7ст255;
				
			Иначе
				
				НоваяСтрока.КорСубконто1 = ВидыНачисленийОплатыТрудаДляНУ_пп7ст255;
				
			КонецЕсли;
			
			Если СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускОценочныеОбязательства Тогда
				
				НоваяСтрока.СчетНУ      = ПрочиеРасходы;
				НоваяСтрока.СубконтоНУ1 = ПрочиеВнереализационныеДоходыРасходы;
				НоваяСтрока.СубконтоНУ2 = ПустоеСубконто;
				НоваяСтрока.СубконтоНУ3 = ПустоеСубконто;
				
				НоваяСтрока.Счет      = СчетРезерваОтпусков;
				НоваяСтрока.Субконто1 = РезервОтпусковЭлемент;
				НоваяСтрока.Субконто2 = ПустоеСубконто;
				НоваяСтрока.Субконто3 = ПустоеСубконто;
			
			ИначеЕсли СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускРезервы Тогда
				
				НоваяСтрока.СчетНУ      = СчетРезерваОтпусков;
				НоваяСтрока.СубконтоНУ1 = РезервОтпусковЭлемент;
				НоваяСтрока.СубконтоНУ2 = ПустоеСубконто;
				НоваяСтрока.СубконтоНУ3 = ПустоеСубконто;
				
			КонецЕсли;
			
			НоваяСтрока.КлючСортировки = СоздатьКлючСортировки(СтрокаТаблицы);
			
		ИначеЕсли СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ПрочиеРасчетыСПерсоналом Тогда
			
			НоваяСтрока = ТаблицаНачисленийИУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.КорСчет      = РасчетыПоПрочимОперациям;
			НоваяСтрока.КорСубконто1 = СтрокаТаблицы.ФизическоеЛицо;
			
			НоваяСтрока.КлючСортировки = СоздатьКлючСортировки(СтрокаТаблицы);
			
		ИначеЕсли СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ДоходыКонтрагентов
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ВыплатыБывшимСотрудникам Тогда
			
			НоваяСтрока = ТаблицаНачисленийИУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.КорСчет      = ПрочиеРасчетыСРазнымиДебиторамиИКредиторами;
			НоваяСтрока.КорСубконто1 = ПустоеСубконто; //Контрагент
			НоваяСтрока.КорСубконто2 = ПустоеСубконто; //Договор
			
			НоваяСтрока.КлючСортировки = СоздатьКлючСортировки(СтрокаТаблицы);
			
		ИначеЕсли СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.Дивиденды Тогда
			
			НоваяСтрока = ТаблицаНачисленийИУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.КорСчет      = РасчетыПоВыплатеДоходов;
			НоваяСтрока.КорСубконто1 = ПустоеСубконто; //Контрагент
			
			НоваяСтрока.КлючСортировки = СоздатьКлючСортировки(СтрокаТаблицы);
			
		ИначеЕсли СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НачисленоПроцентовПоЗайму Тогда
			
			НоваяСтрока = ТаблицаНачисленийИУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.КорСчет      = НоваяСтрока.Счет;
			НоваяСтрока.КорСубконто1 = НоваяСтрока.Субконто1;
			НоваяСтрока.КорСубконто2 = НоваяСтрока.Субконто2;
			НоваяСтрока.КорСубконто3 = НоваяСтрока.Субконто3;
			НоваяСтрока.Счет         = РасчетыПоПредоставленнымЗаймам;
			НоваяСтрока.Субконто1    = СтрокаТаблицы.ФизическоеЛицо;
			НоваяСтрока.Субконто2    = ПустоеСубконто;
			НоваяСтрока.Субконто3    = ПустоеСубконто;
			
			НоваяСтрока.КлючСортировки = СоздатьКлючСортировки(СтрокаТаблицы);
			
		ИначеЕсли СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НДФЛ 
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НФДЛДивидендыСотрудникам Тогда
			
			НоваяСтрока = ТаблицаНачисленийИУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Счет         = СчетРасчетовСПерсоналомПоОплатеТруда;
			
			Если ВестиУчетПоРаботникам ИЛИ ((УСН ИЛИ ИП) И УчетЗарплатыИКадровСредствамиБухгалтерии) Тогда
				
				НоваяСтрока.Субконто1    = СтрокаТаблицы.ФизическоеЛицо;			
			Иначе
				
				НоваяСтрока.Субконто1    = ПустоеСубконто;
				
			КонецЕсли;
			
			НоваяСтрока.Субконто2    = ПустоеСубконто;
			НоваяСтрока.Субконто3    = ПустоеСубконто;
			
			НоваяСтрока.КорСчет      = СчетУчетаНДФЛ;
			НоваяСтрока.КорСубконто1 = ВидПлатежаВГосБюджет;
			НоваяСтрока.КорСубконто2 = СтрокаТаблицы.РегистрацияВНалоговомОргане;
			НоваяСтрока.КорСубконто3 = ПустоеСубконто;
			
			НоваяСтрока.КлючСортировки = СоздатьКлючСортировки(СтрокаТаблицы);
			
		ИначеЕсли СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НДФЛДоначисленныйПоРезультатамПроверки Тогда
			
			НоваяСтрока = ТаблицаНачисленийИУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Счет         = СчетРасчетовСПерсоналомПоОплатеТруда;
			
			Если ВестиУчетПоРаботникам ИЛИ ((УСН ИЛИ ИП) И УчетЗарплатыИКадровСредствамиБухгалтерии) Тогда
				
				НоваяСтрока.Субконто1    = СтрокаТаблицы.ФизическоеЛицо;			
			Иначе
				
				НоваяСтрока.Субконто1    = ПустоеСубконто;
				
			КонецЕсли;
			
			НоваяСтрока.Субконто2    = ПустоеСубконто;
			НоваяСтрока.Субконто3    = ПустоеСубконто;
			
			НоваяСтрока.КорСчет      = СчетУчетаНДФЛ;
			НоваяСтрока.КорСубконто1 = ВидПлатежаВГосБюджетАкт;
			НоваяСтрока.КорСубконто2 = СтрокаТаблицы.РегистрацияВНалоговомОргане;
			НоваяСтрока.КорСубконто3 = ПустоеСубконто;
			
			НоваяСтрока.КлючСортировки = СоздатьКлючСортировки(СтрокаТаблицы);
			
		ИначеЕсли СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НДФЛПрочиеРасчетыСПерсоналом Тогда
			
			НоваяСтрока = ТаблицаНачисленийИУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Счет         = РасчетыПоПрочимОперациям;
			НоваяСтрока.Субконто1    = СтрокаТаблицы.ФизическоеЛицо;			
			НоваяСтрока.Субконто2    = ПустоеСубконто;
			НоваяСтрока.Субконто3    = ПустоеСубконто;
			
			НоваяСтрока.КорСчет      = СчетУчетаНДФЛ;
			НоваяСтрока.КорСубконто1 = ВидПлатежаВГосБюджет;
			НоваяСтрока.КорСубконто2 = СтрокаТаблицы.РегистрацияВНалоговомОргане;
			НоваяСтрока.КорСубконто3 = ПустоеСубконто;
			
			НоваяСтрока.КлючСортировки = СоздатьКлючСортировки(СтрокаТаблицы);
			
		ИначеЕсли СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НДФЛПередачаЗадолженностиВНалоговыйОрган Тогда
			
			НоваяСтрока = ТаблицаНачисленийИУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Счет         = СчетРасчетовСПерсоналомПоОплатеТруда;
			
			Если ВестиУчетПоРаботникам ИЛИ ((УСН ИЛИ ИП) И УчетЗарплатыИКадровСредствамиБухгалтерии) Тогда
				
				НоваяСтрока.Субконто1    = СтрокаТаблицы.ФизическоеЛицо;			
			Иначе
				
				НоваяСтрока.Субконто1    = ПустоеСубконто;
				
			КонецЕсли;
			
			НоваяСтрока.Субконто2    = ПустоеСубконто;
			НоваяСтрока.Субконто3    = ПустоеСубконто;
			
			НоваяСтрока.КорСчет      = СчетУчетаНДФЛ;
			НоваяСтрока.КорСубконто1 = ВидПлатежаВГосБюджетАкт;
			НоваяСтрока.КорСубконто2 = СтрокаТаблицы.РегистрацияВНалоговомОргане;
			НоваяСтрока.КорСубконто3 = ПустоеСубконто;
			
			НоваяСтрока.Сумма        = - НоваяСтрока.Сумма;
			
			НоваяСтрока.КлючСортировки = СоздатьКлючСортировки(СтрокаТаблицы);
			
		ИначеЕсли СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НДФЛДоходыКонтрагентов 
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НДФЛРасчетыСБывшимиСотрудниками Тогда
			
			НоваяСтрока = ТаблицаНачисленийИУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Счет         = ПрочиеРасчетыСРазнымиДебиторамиИКредиторами;
			НоваяСтрока.Субконто1    = ПустоеСубконто; // Контрагент
			НоваяСтрока.Субконто2    = ПустоеСубконто; // Договор
			НоваяСтрока.Субконто3    = ПустоеСубконто;
			
			НоваяСтрока.КорСчет      = СчетУчетаНДФЛ;
			НоваяСтрока.КорСубконто1 = ВидПлатежаВГосБюджет;
			НоваяСтрока.КорСубконто2 = СтрокаТаблицы.РегистрацияВНалоговомОргане;
			НоваяСтрока.КорСубконто3 = ПустоеСубконто;
			
			НоваяСтрока.КлючСортировки = СоздатьКлючСортировки(СтрокаТаблицы);
			
		ИначеЕсли СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НФДЛДивиденды Тогда
			
			НоваяСтрока = ТаблицаНачисленийИУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Счет         = РасчетыПоВыплатеДоходов;
			НоваяСтрока.Субконто1    = ПустоеСубконто; // Контрагент
			НоваяСтрока.Субконто2    = ПустоеСубконто;
			НоваяСтрока.Субконто3    = ПустоеСубконто;
			
			НоваяСтрока.КорСчет      = СчетУчетаНДФЛ;
			НоваяСтрока.КорСубконто1 = ВидПлатежаВГосБюджет;
			НоваяСтрока.КорСубконто2 = СтрокаТаблицы.РегистрацияВНалоговомОргане;
			НоваяСтрока.КорСубконто3 = ПустоеСубконто;
			
			НоваяСтрока.КлючСортировки = СоздатьКлючСортировки(СтрокаТаблицы);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаСвертки = "КлючСортировки, ВидОперации, Подразделение, Счет, Субконто1, Субконто2, Субконто3, КорСчет, КорСубконто1, КорСубконто2, КорСубконто3";
	Если УСН Тогда
		СтрокаСвертки = СтрокаСвертки + ", ОтражениеВУСН";
	КонецЕсли;
	
	Если ИП Тогда
		СтрокаСвертки = СтрокаСвертки + ", ВидНачисленияУдержания";
	КонецЕсли;
	
	Если ЕстьУчетНУ И НЕ (УСН ИЛИ ИП) Тогда
		СтрокаСвертки = СтрокаСвертки + ", СчетНУ, СубконтоНУ1, СубконтоНУ2, СубконтоНУ3";
	КонецЕсли;
	
	ТаблицаНачисленийИУдержаний.Свернуть(СтрокаСвертки, "Сумма");
	ТаблицаНачисленийИУдержаний.Сортировать(СтрокаСвертки);
	
	Возврат ТаблицаНачисленийИУдержаний;
		
КонецФункции

Функция ПодготовитьТаблицуНалоговВзносовСФОТ(ТаблицаЗаработнойПлаты, УСН = Ложь, ИП = Ложь, Реквизиты)
	
	СчетаУчетаНалоговВзносовСФОТ = Новый Соответствие;
	СчетаУчетаНалоговВзносовСФОТ.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПФРНакопительнаяЧасть,                  ПланыСчетов.Хозрасчетный.ПФР_нак);
	СчетаУчетаНалоговВзносовСФОТ.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПФРСтраховаяЧасть,                      ПланыСчетов.Хозрасчетный.ПФР_страх);
	СчетаУчетаНалоговВзносовСФОТ.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПФРПоСуммарномуТарифу,                  ПланыСчетов.Хозрасчетный.ПФР_ОПС);
	СчетаУчетаНалоговВзносовСФОТ.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПФРДополнительныйТарифЛЭ,               ПланыСчетов.Хозрасчетный.ПФР_доп);
	СчетаУчетаНалоговВзносовСФОТ.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПФРДополнительныйТарифШахтеры,          ПланыСчетов.Хозрасчетный.ПФР_доп_шахтеры);
	СчетаУчетаНалоговВзносовСФОТ.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах, ПланыСчетов.Хозрасчетный.ПФР_доп_ВредныеУсловияТруда);
	СчетаУчетаНалоговВзносовСФОТ.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах,    ПланыСчетов.Хозрасчетный.ПФР_доп_ТяжелыеУсловияТруда);
	СчетаУчетаНалоговВзносовСФОТ.Вставить(Перечисления.ВидыОперацийПоЗарплате.ФСС,                                    ПланыСчетов.Хозрасчетный.ФСС);
	СчетаУчетаНалоговВзносовСФОТ.Вставить(Перечисления.ВидыОперацийПоЗарплате.ФССНС,                                  ПланыСчетов.Хозрасчетный.ФСС_НСиПЗ);
	СчетаУчетаНалоговВзносовСФОТ.Вставить(Перечисления.ВидыОперацийПоЗарплате.ФФОМС,                                  ПланыСчетов.Хозрасчетный.ФФОМС);
	СчетаУчетаНалоговВзносовСФОТ.Вставить(Перечисления.ВидыОперацийПоЗарплате.ТФОМС,                                  ПланыСчетов.Хозрасчетный.ТФОМС);
	
	ТаблицаНалоговВзносовСФОТ = ТаблицаЗаработнойПлаты.СкопироватьКолонки();
	ТаблицаНалоговВзносовСФОТ.Колонки.Добавить("КорСчет");
	ТаблицаНалоговВзносовСФОТ.Колонки.Добавить("КорСубконто1");
	ТаблицаНалоговВзносовСФОТ.Колонки.Добавить("КорСубконто2");
	ТаблицаНалоговВзносовСФОТ.Колонки.Добавить("КорСубконто3");
	ТаблицаНалоговВзносовСФОТ.Колонки.Добавить("КлючСортировки");
	
	// Счета учета
	РасчетыПоБольничнымФСС     = ПланыСчетов.Хозрасчетный.ФСС;                                      // 69.01
	РасчетыПоБольничнымФССНС   = ПланыСчетов.Хозрасчетный.ФСС_НСиПЗ;                                // 69.11
	ПрочиеРасходы              = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;                            // 91.02
	СчетВзносовРезерваОтпусков = ПланыСчетов.Хозрасчетный.ОценочныеОбязательстваПостраховымВзносам; // 96.01.2
	
	МассивСчет84 = Новый Массив();
	ВыборкаСчетов = ПланыСчетов.Хозрасчетный.ВыбратьИерархически(ПланыСчетов.Хозрасчетный.НераспределеннаяПрибыль);
	Пока ВыборкаСчетов.Следующий() Цикл
		МассивСчет84.Добавить(ВыборкаСчетов.Ссылка);
	КонецЦикла;
	
	// Аналитика учета
	ПустоеСубконто                           = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка();
	ВидПлатежаВГосБюджет                     = Перечисления.ВидыПлатежейВГосБюджет.Налог;
	РасходыПоУплатеСтраховыхВзносов          = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.РасходыПоУплатеСтраховыхВзносов");
	ВидПлатежаВГосБюджетРасходыПоСтрахованию = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию;
	
	НастройкиУчетаЗарплаты = РегистрыСведений.НастройкиУчетаЗарплаты.Получить(Новый Структура("Организация", Реквизиты.Организация));
	РезервОтпусковЭлемент  = НастройкиУчетаЗарплаты.РезервОтпусков;
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаЗаработнойПлаты Цикл
		
		Если СчетаУчетаНалоговВзносовСФОТ.Получить(СтрокаТаблицы.ВидОперации) = Неопределено Тогда
			
			Продолжить;
			
		Иначе
			
			НоваяСтрока = ТаблицаНалоговВзносовСФОТ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			
			Если НоваяСтрока.ВедущийВидОперации = Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускОценочныеОбязательстваИРезервы Тогда
				НоваяСтрока.Счет         = СчетВзносовРезерваОтпусков;
				НоваяСтрока.Субконто1    = РезервОтпусковЭлемент;
				НоваяСтрока.Субконто2    = ПустоеСубконто;
				НоваяСтрока.Субконто3    = ПустоеСубконто;
			ИначеЕсли НоваяСтрока.ВедущийВидОперации = Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускОценочныеОбязательства Тогда
				НоваяСтрока.СчетНУ      = ПрочиеРасходы;
				НоваяСтрока.СубконтоНУ1 = РасходыПоУплатеСтраховыхВзносов;
				НоваяСтрока.СубконтоНУ2 = ПустоеСубконто;
				НоваяСтрока.СубконтоНУ3 = ПустоеСубконто;
				
				НоваяСтрока.Счет      = СчетВзносовРезерваОтпусков;
				НоваяСтрока.Субконто1 = РезервОтпусковЭлемент;
				НоваяСтрока.Субконто2 = ПустоеСубконто;
				НоваяСтрока.Субконто3 = ПустоеСубконто;
			ИначеЕсли НоваяСтрока.ВедущийВидОперации = Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускРезервы Тогда
				НоваяСтрока.СчетНУ      = СчетВзносовРезерваОтпусков;
				НоваяСтрока.СубконтоНУ1 = РезервОтпусковЭлемент;
				НоваяСтрока.СубконтоНУ2 = ПустоеСубконто;
				НоваяСтрока.СубконтоНУ3 = ПустоеСубконто;
			ИначеЕсли МассивСчет84.Найти(НоваяСтрока.Счет) = Неопределено Тогда
				НоваяСтрока.Счет         = НоваяСтрока.Счет;
				НоваяСтрока.Субконто1    = НоваяСтрока.Субконто1;
				НоваяСтрока.Субконто2    = НоваяСтрока.Субконто2;
				НоваяСтрока.Субконто3    = НоваяСтрока.Субконто3;
			Иначе
				НоваяСтрока.Счет         = ПрочиеРасходы;
				НоваяСтрока.Субконто1    = РасходыПоУплатеСтраховыхВзносов;
				НоваяСтрока.Субконто2    = ПустоеСубконто;
				НоваяСтрока.Субконто3    = ПустоеСубконто;
			КонецЕсли;
			НоваяСтрока.КорСчет      = СчетаУчетаНалоговВзносовСФОТ.Получить(СтрокаТаблицы.ВидОперации);
			НоваяСтрока.КорСубконто1 = ВидПлатежаВГосБюджет;
			НоваяСтрока.КорСубконто2 = ПустоеСубконто;
			НоваяСтрока.КорСубконто3 = ПустоеСубконто;
			
			Если Год(Реквизиты.Период) >= 2015 Тогда
				Если СтрокаТаблицы.ВидОперацииРасходовЗаСчетФСС = Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФСС Тогда
					Если (НЕ ЗначениеЗаполнено(НоваяСтрока.Счет)) // на случай когда счет не пришел
						ИЛИ // на случай когда счет задан и надо сохранить аналитику
						(ЗначениеЗаполнено(НоваяСтрока.Счет) И (НоваяСтрока.Счет <> РасчетыПоБольничнымФССНС) И (НоваяСтрока.Счет <> РасчетыПоБольничнымФСС))
						Тогда
						Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СпособОтраженияЗарплатыВБухУчете) Тогда // способ отражения был задан
							НоваяСтрока.Счет = РасчетыПоБольничнымФСС;
							НоваяСтрока.Субконто1 = ВидПлатежаВГосБюджетРасходыПоСтрахованию;
						КонецЕсли;
					КонецЕсли;					
				КонецЕсли;
			КонецЕсли;
			
			НоваяСтрока.КлючСортировки = СоздатьКлючСортировки(СтрокаТаблицы);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаСвертки = "КлючСортировки, ВидОперации, Подразделение, Счет, Субконто1, Субконто2, Субконто3, КорСчет, КорСубконто1, КорСубконто2, КорСубконто3";
	Если УСН Тогда
		СтрокаСвертки = СтрокаСвертки + ", ОтражениеВУСН";
	ИначеЕсли ИП Тогда
		СтрокаСвертки = СтрокаСвертки + ", ВидНачисленияУдержания";
	Иначе
		СтрокаСвертки = СтрокаСвертки + ", СчетНУ, СубконтоНУ1, СубконтоНУ2, СубконтоНУ3";
	КонецЕсли;
	
	ТаблицаНалоговВзносовСФОТ.Свернуть(СтрокаСвертки, "Сумма");
	ТаблицаНалоговВзносовСФОТ.Сортировать(СтрокаСвертки);
	
	// Замена статей затрат, видов прочих расходов
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СтатьиЗатратПоНалогамВзносамСФОТ.СтатьяЗатратНачисления <> НЕОПРЕДЕЛЕНО
	|			ТОГДА СтатьиЗатратПоНалогамВзносамСФОТ.СтатьяЗатратНачисления
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СтатьиЗатратПоНалогамВзносамСФОТ.СтатьяЗатрат ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|					ТОГДА ЗНАЧЕНИЕ(Справочник.ПрочиеДоходыИРасходы.ПустаяСсылка)
	|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)
	|			КОНЕЦ
	|	КОНЕЦ КАК СтатьяЗатратНачисления,
	|	СтатьиЗатратПоНалогамВзносамСФОТ.СтатьяЗатрат КАК СтатьяЗатрат
	|ИЗ
	|	РегистрСведений.СтатьиЗатратПоНалогамВзносамСФОТ КАК СтатьиЗатратПоНалогамВзносамСФОТ
	|ГДЕ
	|	СтатьиЗатратПоНалогамВзносамСФОТ.ВидСтатьиЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДополнительныхСтатейЗатрат.ФСС_НС)";
	
	СтатьиЗатрат_ФСС_НСиПЗ = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СтатьиЗатратПоНалогамВзносамСФОТ.СтатьяЗатратНачисления <> НЕОПРЕДЕЛЕНО
	|			ТОГДА СтатьиЗатратПоНалогамВзносамСФОТ.СтатьяЗатратНачисления
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СтатьиЗатратПоНалогамВзносамСФОТ.СтатьяЗатрат ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|					ТОГДА ЗНАЧЕНИЕ(Справочник.ПрочиеДоходыИРасходы.ПустаяСсылка)
	|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)
	|			КОНЕЦ
	|	КОНЕЦ КАК СтатьяЗатратНачисления,
	|	СтатьиЗатратПоНалогамВзносамСФОТ.СтатьяЗатрат КАК СтатьяЗатрат
	|ИЗ
	|	РегистрСведений.СтатьиЗатратПоНалогамВзносамСФОТ КАК СтатьиЗатратПоНалогамВзносамСФОТ
	|ГДЕ
	|	СтатьиЗатратПоНалогамВзносамСФОТ.ВидСтатьиЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДополнительныхСтатейЗатрат.СтраховыеВзносы)";
	
	СтатьиЗатрат_СтраховыеВзносы = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаНалоговВзносовСФОТ Цикл
		
		Если СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ФССНС
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФССНС Тогда
			
			// Взносы в ФСС от НС и ПЗ
			
			Для НомерСубконто = 1 По 3 Цикл
				
				ЗаменитьЗначениеСтатьиЗатрат(СтрокаТаблицы, НомерСубконто, СтатьиЗатрат_ФСС_НСиПЗ);

			КонецЦикла;
						
			
		Иначе
			
			// Взносы в ПФР, ФОМС и ФСС
			
			Для НомерСубконто = 1 По 3 Цикл
				
				ЗаменитьЗначениеСтатьиЗатрат(СтрокаТаблицы, НомерСубконто, СтатьиЗатрат_СтраховыеВзносы);

			КонецЦикла;
			
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаНалоговВзносовСФОТ;
		
КонецФункции

Функция ПодготовитьТаблицуДепонентов(Реквизиты, ТаблицаЗаработнойПлаты, УСН = Ложь)
	
	ТаблицаНачисленийИУдержаний = ТаблицаЗаработнойПлаты.СкопироватьКолонки();
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("КорСчет");
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("КорСубконто1");
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("КорСубконто2");
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("КорСубконто3");
	ТаблицаНачисленийИУдержаний.Колонки.Добавить("КлючСортировки");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПорядокОтраженияЗарплатыВБухУчете.Счет КАК КорСчет,
	|	ПорядокОтраженияЗарплатыВБухУчете.Субконто1 КАК КорСубконто1,
	|	ПорядокОтраженияЗарплатыВБухУчете.Субконто2 КАК КорСубконто2,
	|	ПорядокОтраженияЗарплатыВБухУчете.Субконто3 КАК КорСубконто3,
	|	ПорядокОтраженияЗарплатыВБухУчете.ОтражениеВУСН КАК ОтражениеВУСН,
	|	НастройкиУчетаЗарплаты.СписаниеДепонированныхСумм
	|ИЗ
	|	РегистрСведений.НастройкиУчетаЗарплаты КАК НастройкиУчетаЗарплаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокОтраженияЗарплатыВБухУчете КАК ПорядокОтраженияЗарплатыВБухУчете
	|		ПО НастройкиУчетаЗарплаты.СписаниеДепонированныхСумм = ПорядокОтраженияЗарплатыВБухУчете.СпособОтраженияЗарплатыВБухУчете
	|ГДЕ
	|	НастройкиУчетаЗарплаты.Организация = &Организация
	|	И НЕ ПорядокОтраженияЗарплатыВБухУчете.ЕНВД";
	
	ПорядокСписанияДепонентов = Запрос.Выполнить().Выбрать();
	ПорядокСписанияДепонентов.Следующий();
	
	
	СчетРасчетовСПерсоналомПоОплатеТруда = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
	СчетУчетаДепонентов                  = ПланыСчетов.Хозрасчетный.РасчетыПоДепонированнымСуммам;
	СчетУчетаПрочихДоходов               = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
	
	ПустоеСубконто                       = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка();
	
	ВидПрочегоДохода                     = ПустоеСубконто;
	
	ВестиУчетПоРаботникам                    = Константы.ВедетсяУчетРасчетовПоЗарплатеПоРаботникам.Получить();
	УчетЗарплатыИКадровСредствамиБухгалтерии = Константы.УчетЗарплатыИКадровСредствамиБухгалтерии.Получить();
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаЗаработнойПлаты Цикл
		
		Если СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.Депонирование Тогда
			
			НоваяСтрока = ТаблицаНачисленийИУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			
			НоваяСтрока.Счет         = СчетРасчетовСПерсоналомПоОплатеТруда;
			НоваяСтрока.КорСчет      = СчетУчетаДепонентов;			
			
			Если ВестиУчетПоРаботникам ИЛИ (УСН И УчетЗарплатыИКадровСредствамиБухгалтерии) Тогда
				
				НоваяСтрока.Субконто1    = СтрокаТаблицы.ФизическоеЛицо;
				НоваяСтрока.КорСубконто1 = СтрокаТаблицы.ФизическоеЛицо;				

			КонецЕсли;
			
			НоваяСтрока.КлючСортировки = СоздатьКлючСортировки(СтрокаТаблицы);
			
		ИначеЕсли СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.СписаниеДепонента Тогда
			
			Если НЕ ЗначениеЗаполнено(ПорядокСписанияДепонентов.СписаниеДепонированныхСумм) Тогда
				ТекстСообщения = НСтр("ru = '%1. В настройках учета зарплаты не задан способ учета для списания депонированных сумм.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстСообщения,
				Реквизиты.Регистратор); 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор);
			КонецЕсли;
			
			НоваяСтрока = ТаблицаНачисленийИУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ПорядокСписанияДепонентов);
						
			НоваяСтрока.Счет = СчетУчетаДепонентов;
			
			Если ВестиУчетПоРаботникам Тогда
				
				НоваяСтрока.Субконто1    = СтрокаТаблицы.ФизическоеЛицо;

			КонецЕсли;
			
			НоваяСтрока.ОтражениеВУСН = СтрокаТаблицы.ОтражениеВУСН;
			
			НоваяСтрока.КлючСортировки = СоздатьКлючСортировки(СтрокаТаблицы);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаСвертки = "КлючСортировки, ВидОперации, Подразделение, Счет, Субконто1, Субконто2, Субконто3, КорСчет, КорСубконто1, КорСубконто2, КорСубконто3";
	Если УСН Тогда
		СтрокаСвертки = СтрокаСвертки + ", ОтражениеВУСН";
	КонецЕсли;
		
	ТаблицаНачисленийИУдержаний.Свернуть(СтрокаСвертки, "Сумма");
	ТаблицаНачисленийИУдержаний.Сортировать(СтрокаСвертки);
	
	Возврат ТаблицаНачисленийИУдержаний;
		
КонецФункции

Процедура ЗаменитьЗначениеСтатьиЗатрат(СтрокаТаблицы, НомерСубконто, ТаблицаЗамены)
	
	ТекущаяКолонка = "Субконто" + НомерСубконто;
	
	ИскомоеЗначение = СтрокаТаблицы[ТекущаяКолонка];
	
	СтрокаЗамещения = ТаблицаЗамены.Найти(ИскомоеЗначение, "СтатьяЗатратНачисления");
	
	Если СтрокаЗамещения <> Неопределено Тогда
		СтрокаТаблицы[ТекущаяКолонка] = СтрокаЗамещения.СтатьяЗатрат;
	Иначе
		Если ТипЗнч(ИскомоеЗначение) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			СтрокаЗамещения = ТаблицаЗамены.Найти(Справочники.СтатьиЗатрат.ПустаяСсылка(), "СтатьяЗатратНачисления");
			Если СтрокаЗамещения <> Неопределено Тогда
				СтрокаТаблицы[ТекущаяКолонка] = СтрокаЗамещения.СтатьяЗатрат;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ИскомоеЗначение) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
			СтрокаЗамещения = ТаблицаЗамены.Найти(Справочники.ПрочиеДоходыИРасходы.ПустаяСсылка(), "СтатьяЗатратНачисления");
			Если СтрокаЗамещения <> Неопределено Тогда
				СтрокаТаблицы[ТекущаяКолонка] = СтрокаЗамещения.СтатьяЗатрат;
			КонецЕсли;
		КонецЕсли;					
	КонецЕсли;
		
КонецПроцедуры

Процедура ПроверитьЗаполненностьСпособаОтраженияВУчете(ТаблицаЗаработнойПлаты, Реквизиты)
	
	ТаблицаПроверки = ТаблицаЗаработнойПлаты.Скопировать(,"ФизическоеЛицо, СпособОтраженияЗарплатыВБухУчете, Счет");	
	ТаблицаПроверки.Свернуть("ФизическоеЛицо, СпособОтраженияЗарплатыВБухУчете, Счет",);
	
	ДополнениеСообщения = "";
	Если Константы.УчетЗарплатыИКадровСредствамиБухгалтерии.Получить() Тогда
		ДополнениеСообщения = НСтр("ru = ' Проверьте настройку начислений/удержаний.'");;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаПроверки Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.СпособОтраженияЗарплатыВБухУчете) Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Счет) Тогда
				ТекстСообщения = НСтр("ru = '%1. Работник: %2 - не указаны счет и аналитика для способа учета зарплаты ""%3""!%4'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстСообщения,
					Реквизиты.Регистратор,
					СтрокаТаблицы.ФизическоеЛицо,
					СтрокаТаблицы.СпособОтраженияЗарплатыВБухУчете,
					ДополнениеСообщения); 
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

///////////////////////////////
// Проведение по подсистеме УСН

Процедура СформироватьДвиженияПоРегистрамУСННачислениеЗарплаты(Параметры, ТаблицаЗаработнойПлаты, Реквизиты, Движения, Отказ)
	
	Если ТаблицаЗаработнойПлаты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Константы.УчетЗарплатыИКадровСредствамиБухгалтерии.Получить() Тогда		
		РаспределитьНДФЛБольничногоЛиста(ТаблицаЗаработнойПлаты, Реквизиты);
	КонецЕсли;
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("ПланСчетовСсылка.Хозрасчетный"));
	ОписаниеТиповПланСчетов =  Новый ОписаниеТипов(Массив, , );
    	
	ОписаниеТиповСубконто = Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип;
		
	Массив = Новый Массив;
	Массив.Добавить(Тип("ПеречислениеСсылка.ОтражениеВУСН"));
	ОписаниеТиповОтражениеВУСН =  Новый ОписаниеТипов(Массив, , );
	
	ОписаниеТиповЧисло15_2 = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
		
	ТаблицаУСННачислениеЗарплаты = Новый ТаблицаЗначений;
	ТаблицаУСННачислениеЗарплаты.Колонки.Добавить("Счет",          ОписаниеТиповПланСчетов);
	ТаблицаУСННачислениеЗарплаты.Колонки.Добавить("Субконто1",     ОписаниеТиповСубконто);
	ТаблицаУСННачислениеЗарплаты.Колонки.Добавить("Субконто2",     ОписаниеТиповСубконто);
	ТаблицаУСННачислениеЗарплаты.Колонки.Добавить("Субконто3",     ОписаниеТиповСубконто);
	ТаблицаУСННачислениеЗарплаты.Колонки.Добавить("КорСчет",       ОписаниеТиповПланСчетов);
	ТаблицаУСННачислениеЗарплаты.Колонки.Добавить("КорСубконто1",  ОписаниеТиповСубконто);
	ТаблицаУСННачислениеЗарплаты.Колонки.Добавить("КорСубконто2",  ОписаниеТиповСубконто);
	ТаблицаУСННачислениеЗарплаты.Колонки.Добавить("КорСубконто3",  ОписаниеТиповСубконто);
	ТаблицаУСННачислениеЗарплаты.Колонки.Добавить("ОтражениеВУСН", ОписаниеТиповОтражениеВУСН);
	ТаблицаУСННачислениеЗарплаты.Колонки.Добавить("Сумма",         ОписаниеТиповЧисло15_2);
			
	ТаблицаНачисленийУдержаний = ПодготовитьТаблицуНачисленийУдержаний(ТаблицаЗаработнойПлаты, Истина,, Реквизиты);
	ТаблицаНалоговВзносовСФОТ  = ПодготовитьТаблицуНалоговВзносовСФОТ(ТаблицаЗаработнойПлаты, Истина,, Реквизиты);
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаНачисленийУдержаний Цикл
		
		НоваяСтрока = ТаблицаУСННачислениеЗарплаты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаНалоговВзносовСФОТ Цикл
		
		НоваяСтрока = ТаблицаУСННачислениеЗарплаты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
	КонецЦикла;
	
	Если ТаблицаУСННачислениеЗарплаты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Движения.Найти("РасходыПриУСН") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("ТаблицаУСННачислениеЗарплаты", ТаблицаУСННачислениеЗарплаты);
	Параметры.Вставить("ПериодРегистрации", Реквизиты.Период);
	
	ДокументОбъект = Новый Структура();
	ДокументОбъект.Вставить("Организация", Реквизиты.Организация);
	ДокументОбъект.Вставить("Дата",        Реквизиты.Период);
	ДокументОбъект.Вставить("Имя",         "НачислениеЗарплаты");
	ДокументОбъект.Вставить("Ссылка",      Реквизиты.Регистратор);	
	ДокументОбъект.Вставить("Движения",    Движения);
	
	НалоговыйУчетУСН.СформироватьДвиженияУСН(ДокументОбъект, Параметры, Ложь);
	
КонецПроцедуры

// Определяет долю исчисленного НДФЛ, которая приходится за счет ФСС (непринимаемый НДФЛ)
Процедура РаспределитьНДФЛБольничногоЛиста(ТаблицаЗаработнойПлаты, Реквизиты)
	
	МассивФизическихЛиц =  ТаблицаЗаработнойПлаты.ВыгрузитьКолонку("ФизическоеЛицо");
	МассивСчетовФСС = Новый Массив;
	МассивСчетовФСС.Добавить(ПланыСчетов.Хозрасчетный.ФСС);       // 69.01
	МассивСчетовФСС.Добавить(ПланыСчетов.Хозрасчетный.ФСС_НСиПЗ); // 69.11

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БольничныйЛист.Ссылка,
	|	БольничныйЛист.ФизическоеЛицо
	|ПОМЕСТИТЬ ВТ_Регистраторы
	|ИЗ
	|	Документ.БольничныйЛист КАК БольничныйЛист
	|ГДЕ
	|	БольничныйЛист.ФизическоеЛицо В(&МассивФизическихЛиц)
	|	И БольничныйЛист.Организация = &Организация
	|	И МЕСЯЦ(БольничныйЛист.Дата) = МЕСЯЦ(&Период)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Отпуск.Ссылка,
	|	Отпуск.ФизическоеЛицо
	|ИЗ
	|	Документ.Отпуск КАК Отпуск
	|ГДЕ
	|	Отпуск.ФизическоеЛицо В(&МассивФизическихЛиц)
	|	И Отпуск.Организация = &Организация
	|	И МЕСЯЦ(Отпуск.Дата) = МЕСЯЦ(&Период)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА ПрочиеРасчеты.СчетУчета В (&МассивСчетовФСС)
	|				ТОГДА ПрочиеРасчеты.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаФСС,
	|	ВТ_Регистраторы.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ ПрочиеРасчеты.СчетУчета В (&МассивСчетовФСС)
	|				ТОГДА ПрочиеРасчеты.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаВсего
	|ИЗ
	|	РегистрНакопления.ПрочиеРасчеты КАК ПрочиеРасчеты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Регистраторы КАК ВТ_Регистраторы
	|		ПО ПрочиеРасчеты.Регистратор = ВТ_Регистраторы.Ссылка
	|ГДЕ
	|	ПрочиеРасчеты.Организация = &Организация
	|	И ПрочиеРасчеты.Регистратор В
	|			(ВЫБРАТЬ
	|				ВТ_Регистраторы.Ссылка КАК Ссыка
	|			ИЗ
	|				ВТ_Регистраторы)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Регистраторы.ФизическоеЛицо";
	
	Запрос.УстановитьПараметр("Организация",         Реквизиты.Организация);
	Запрос.УстановитьПараметр("Период",              Реквизиты.Период);
	Запрос.УстановитьПараметр("МассивФизическихЛиц", МассивФизическихЛиц);
	Запрос.УстановитьПараметр("МассивСчетовФСС",     МассивСчетовФСС);
	
	ТаблицаБольничных = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаБольничных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаБольничных Цикл
		
		СуммаДохода = 0;
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ФизическоеЛицо", СтрокаТаблицы.ФизическоеЛицо);
		СтруктураОтбора.Вставить("ВидОперации",    Перечисления.ВидыОперацийПоЗарплате.НачисленоДоход);
		НайденныеСтроки = ТаблицаЗаработнойПлаты.Скопировать(СтруктураОтбора);
		СуммаВсегоРасходов = НайденныеСтроки.Итог("Сумма");
		ДоляБольничного = СтрокаТаблицы.СуммаФСС/(СуммаВсегоРасходов + СтрокаТаблицы.СуммаВсего);
			
		Если ДоляБольничного > 1 Тогда
			ДоляБольничного = 1;
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ФизическоеЛицо", СтрокаТаблицы.ФизическоеЛицо);
		СтруктураОтбора.Вставить("ВидОперации",    Перечисления.ВидыОперацийПоЗарплате.НДФЛ);
		СтруктураОтбора.Вставить("ОтражениеВУСН",  Перечисления.ОтражениеВУСН.Принимаются);
		
		МассивСтрокНДФЛ = ТаблицаЗаработнойПлаты.НайтиСтроки(СтруктураОтбора);
		
		Если МассивСтрокНДФЛ.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СуммаНДФЛБольничного = 0;
		Для Каждого СтрокаМассива ИЗ МассивСтрокНДФЛ Цикл
			Если ДоляБольничного = 1 Тогда
				СтрокаМассива.ОтражениеВУСН = Перечисления.ОтражениеВУСН.НеПринимаются;
			Иначе
				НоваяСтрока = ТаблицаЗаработнойПлаты.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМассива);
				
				НоваяСтрока.ОтражениеВУСН = Перечисления.ОтражениеВУСН.НеПринимаются;
				НоваяСтрока.Сумма         = Цел(СтрокаМассива.Сумма * ДоляБольничного);
				
				СуммаНДФЛБольничного = СуммаНДФЛБольничного + НоваяСтрока.Сумма;
				
				СтрокаМассива.Сумма = СтрокаМассива.Сумма - НоваяСтрока.Сумма;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
		
КонецПроцедуры

// Формирует движения по отражению зарплаты в УСН
Процедура СформироватьДвиженияОтраженияЗарплатыУСН(ТаблицаОтраженияЗарплатыУСН, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыДвиженийОтраженияЗарплатыУСН(ТаблицаОтраженияЗарплатыУСН, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	Если Параметры.ТаблицаОтраженияЗарплатыУСН.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Движения.Найти("РасходыПриУСН") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("ТаблицаУСННачислениеЗарплаты", Параметры.ТаблицаОтраженияЗарплатыУСН);
	Параметры.Вставить("ПериодРегистрации", Реквизиты.Период);
	
	ДокументОбъект = Новый Структура();
	ДокументОбъект.Вставить("Организация", Реквизиты.Организация);
	ДокументОбъект.Вставить("Дата",        Реквизиты.Период);
	ДокументОбъект.Вставить("Имя",         "НачислениеЗарплаты");
	ДокументОбъект.Вставить("Ссылка",      Реквизиты.Ссылка);	
	ДокументОбъект.Вставить("Движения",    Движения);
	
	НалоговыйУчетУСН.СформироватьДвиженияУСН(ДокументОбъект, Параметры, Ложь);

КонецПроцедуры

Функция ПодготовитьПараметрыДвиженийОтраженияЗарплатыУСН(ТаблицаОтраженияЗарплатыУСН, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"				// <Дата> - счет по дебету проводки (счет учета денежных средств)
	+ "Организация,"		// <СправочникСсылка.Организации> - организация документа
	+ "Ссылка,"				// <ДокументСсылка> - документ-регистратор
	+ "ПериодРегистрации"   // <Дата> - период регистрации
	;
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	
	// Подготовка таблицы по заработной плате:
	СписокОбязательныхКолонок = ""
	+ "Счет,"						// <ПланСчетовСсылка.Хозрасчетный>
	+ "Субконто1,"					// <> - значение аналитики 
	+ "Субконто2,"					// <> - значение аналитики 
	+ "Субконто3,"					// <> - значение аналитики
	+ "КорСчет,"					// <ПланСчетовСсылка.Хозрасчетный>
	+ "КорСубконто1,"				// <> - значение аналитики 
	+ "КорСубконто2,"				// <> - значение аналитики 
	+ "КорСубконто3,"				// <> - значение аналитики	
	+ "ОтражениеВУСН,"				// <Перечисление.ОтражениеВУСН>
	+ "Сумма"						// <Число(15,2)>
	;	
	
	Параметры.Вставить("ТаблицаОтраженияЗарплатыУСН", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОтраженияЗарплатыУСН, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

///////////////////////////////
// Проведение по подсистеме ИП

Процедура ОпределитьВидНачисленийУдержанийИП(ТаблицаЗаработнойПлаты)
	
	СоответствиеВидовНачисленийУдержаний = Новый Соответствие;
	СоответствиеВидовНачисленийУдержаний.Вставить(Перечисления.ВидыОперацийПоЗарплате.НачисленоДоход,          Перечисления.ИПВидыНачисленийУдержаний.НачисленоПовременно);
	СоответствиеВидовНачисленийУдержаний.Вставить(Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпуск,         Перечисления.ИПВидыНачисленийУдержаний.НачисленоПовременно);
	СоответствиеВидовНачисленийУдержаний.Вставить(Перечисления.ВидыОперацийПоЗарплате.НачисленоСдельноДоход,   Перечисления.ИПВидыНачисленийУдержаний.НачисленоСдельно);
	СоответствиеВидовНачисленийУдержаний.Вставить(Перечисления.ВидыОперацийПоЗарплате.НатуральныйДоход,        Перечисления.ИПВидыНачисленийУдержаний.НачисленоНатуральныйДоход);
	СоответствиеВидовНачисленийУдержаний.Вставить(Перечисления.ВидыОперацийПоЗарплате.НДФЛ,                    Перечисления.ИПВидыНачисленийУдержаний.УдержаноНДФЛ);
	
	Если ТаблицаЗаработнойПлаты.Колонки.Найти("ВидНачисленияУдержания") = Неопределено Тогда
		ТаблицаЗаработнойПлаты.Колонки.Добавить("ВидНачисленияУдержания", Новый ОписаниеТипов("ПеречислениеСсылка.ИПВидыНачисленийУдержаний"));
		Для каждого Начисление Из ТаблицаЗаработнойПлаты Цикл
			Начисление.ВидНачисленияУдержания	= СоответствиеВидовНачисленийУдержаний.Получить(Начисление.ВидОперации);			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияПоРегистрамИПНачислениеЗарплаты(Параметры, ТаблицаЗаработнойПлаты, Реквизиты, Движения, Отказ)
	
	ОпределитьВидНачисленийУдержанийИП(ТаблицаЗаработнойПлаты);
	
	Если ТаблицаЗаработнойПлаты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("ПланСчетовСсылка.Хозрасчетный"));
	ОписаниеТиповПланСчетов =  Новый ОписаниеТипов(Массив, , );
	
	ОписаниеТиповСубконто = Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип;
		
	Массив = Новый Массив;
	Массив.Добавить(Тип("ПеречислениеСсылка.ИПВидыНачисленийУдержаний"));
	ОписаниеТиповВидНачисленияУдержания =  Новый ОписаниеТипов(Массив, , );
	
	ОписаниеТиповЧисло15_2 = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
		
	ТаблицаИПНачислениеЗарплаты = Новый ТаблицаЗначений;
	ТаблицаИПНачислениеЗарплаты.Колонки.Добавить("Счет",          ОписаниеТиповПланСчетов);
	ТаблицаИПНачислениеЗарплаты.Колонки.Добавить("Субконто1",     ОписаниеТиповСубконто);
	ТаблицаИПНачислениеЗарплаты.Колонки.Добавить("Субконто2",     ОписаниеТиповСубконто);
	ТаблицаИПНачислениеЗарплаты.Колонки.Добавить("Субконто3",     ОписаниеТиповСубконто);
	ТаблицаИПНачислениеЗарплаты.Колонки.Добавить("КорСчет",       ОписаниеТиповПланСчетов);
	ТаблицаИПНачислениеЗарплаты.Колонки.Добавить("КорСубконто1",  ОписаниеТиповСубконто);
	ТаблицаИПНачислениеЗарплаты.Колонки.Добавить("КорСубконто2",  ОписаниеТиповСубконто);
	ТаблицаИПНачислениеЗарплаты.Колонки.Добавить("КорСубконто3",  ОписаниеТиповСубконто);
	ТаблицаИПНачислениеЗарплаты.Колонки.Добавить("ВидНачисленияУдержания", ОписаниеТиповВидНачисленияУдержания);
	ТаблицаИПНачислениеЗарплаты.Колонки.Добавить("Сумма",         ОписаниеТиповЧисло15_2);
			
	ТаблицаНачисленийУдержаний = ПодготовитьТаблицуНачисленийУдержаний(ТаблицаЗаработнойПлаты, , Истина, Реквизиты);
	ТаблицаНалоговВзносовСФОТ  = ПодготовитьТаблицуНалоговВзносовСФОТ(ТаблицаЗаработнойПлаты, , Истина, Реквизиты);
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаНачисленийУдержаний Цикл
		
		НоваяСтрока = ТаблицаИПНачислениеЗарплаты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаНалоговВзносовСФОТ Цикл
		
		НоваяСтрока = ТаблицаИПНачислениеЗарплаты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
	КонецЦикла;
	
	Если ТаблицаИПНачислениеЗарплаты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Движения.Найти("ИПРасходыНаОплатуТруда") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Реквизиты.Колонки.Найти("Ссылка") = Неопределено Тогда
		Параметры.Реквизиты.Колонки.Добавить("Ссылка",	Документы.ТипВсеСсылки());
		Параметры.Реквизиты.ЗаполнитьЗначения(Реквизиты.Регистратор, "Ссылка");
	КонецЕсли;
	
	Если Параметры.Реквизиты.Колонки.Найти("Удержания") = Неопределено Тогда
		Параметры.Реквизиты.Колонки.Добавить("Удержания");
		Параметры.Реквизиты.ЗаполнитьЗначения(Ложь, "Удержания");
	КонецЕсли;
	
	Параметры.Вставить("ТаблицаИПНачислениеЗарплаты", ТаблицаИПНачислениеЗарплаты);
	
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияРасходовНаОплатуТруда(
		Параметры.ТаблицаИПНачислениеЗарплаты, Параметры.Реквизиты, Движения, Отказ);
	
КонецПроцедуры

Функция ПодготовитьПараметрыДвиженийОтраженияЗарплатыИП(ТаблицаНачисленияУдержания, ТаблицаРеквизитов)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"						// <Дата> - период движений - дата документа
		+ "Ссылка,"						// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация";				// <СправочникСсылка.Организации> - оранизация
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.ТаблицаОтраженияЗарплатыИП
	
	СписокОбязательныхКолонок = ""
		+ "Счет,"						//	<ПланСчетовСсылка.Хозрасчетный>
		+ "Субконто1,"					//  <Характеристика.ВидыСубконтоХозрасчетные>
		+ "Субконто2,"					//  <Характеристика.ВидыСубконтоХозрасчетные> 
		+ "Субконто3,"					//  <Характеристика.ВидыСубконтоХозрасчетные>
		+ "КорСчет,"					//	<ПланСчетовСсылка.Хозрасчетный> 
		+ "КорСубконто1,"				//  <Характеристика.ВидыСубконтоХозрасчетные>
		+ "КорСубконто2,"				//  <Характеристика.ВидыСубконтоХозрасчетные> 
		+ "КорСубконто3,"				//  <Характеристика.ВидыСубконтоХозрасчетные>
		+ "ВидНачисленияУдержания,"		//  <ПеречислениеСсылка.ИПВидыНачисленийУдержаний> - вид начисления/удержания
		+ "Сумма";						//	<Сумма, 15, 2> - сумма начисления/удержания в рублях
		
	Параметры.Вставить("ТаблицаОтраженияЗарплатыИП", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаНачисленияУдержания, СписокОбязательныхКолонок));
		
	Возврат Параметры;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// УДЕРЖАНИЯ ИЗ ЗАРПЛАТЫ
//

Процедура СформироватьДвиженияУдержания(Движения, Отказ, Организация, ПериодРегистрации, ДанныеДляОтражения, НачисленнаяЗарплатаИВзносы = Неопределено)
		
	Если Константы.УчетЗарплатыИКадровСредствамиБухгалтерии.Получить() И НЕ Константы.РасчетЗарплатыДляНебольшихОрганизаций.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	Регистратор = Движения.Хозрасчетный.Отбор.Регистратор.Значение;
	Параметры   = ПодготовитьПараметрыПоОтражениюУдержанийВУчете(ДанныеДляОтражения, Организация, ПериодРегистрации, Регистратор);
	Реквизиты   = Параметры.Реквизиты[0];
	
	СформироватьПроводкиПоОтражениюУдержанийВУчете(Параметры.ТаблицаУдержаний, Реквизиты, Движения, Отказ);	
	
	// Учет доходов и расходов ИП
	Если НачисленнаяЗарплатаИВзносы <> Неопределено Тогда
		ПараметрыДоходов = ПодготовитьПараметрыПоОтражениюЗарплатыВУчете(НачисленнаяЗарплатаИВзносы, Организация, ПериодРегистрации, Регистратор);
		ТаблицаЗаработнойПлаты = ПараметрыДоходов.ТаблицаЗаработнойПлаты;
	Иначе
		ТаблицаЗаработнойПлаты = Неопределено;
	КонецЕсли;
		
	СформироватьДвиженияПоРегистрамИПУдержания(Параметры, Параметры.ТаблицаУдержаний, Реквизиты, ТаблицаЗаработнойПлаты, Движения, Отказ);
		
КонецПроцедуры

Функция ПодготовитьПараметрыПоОтражениюУдержанийВУчете(ДанныеДляПроводок, Организация, ПериодРегистрации, Регистратор)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	Реквизиты = Новый ТаблицаЗначений;
	
	Реквизиты.Колонки.Добавить("Организация");
	Реквизиты.Колонки.Добавить("Период");
	Реквизиты.Колонки.Добавить("Регистратор");
	
	НоваяСтрока             = Реквизиты.Добавить();
	НоваяСтрока.Организация = Организация;
	НоваяСтрока.Период      = КонецМесяца(ПериодРегистрации);
	НоваяСтрока.Регистратор = Регистратор;
	
	Параметры.Вставить("Реквизиты", Реквизиты);
		
	// Подготовка таблицы по заработной плате:
	СписокОбязательныхКолонок = ""
	+ "ФизическоеЛицо,"
	+ "ВидОперации,"
	+ "Подразделение,"
	+ "Контрагент,"	
	+ "Сумма"
	;	
	Параметры.Вставить("ТаблицаУдержаний", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ДанныеДляПроводок, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьПроводкиПоОтражениюУдержанийВУчете(ТаблицаУдержаний, Реквизиты, Движения, Отказ)
	
	Если ТаблицаУдержаний.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	ТаблицаУдержанийРаботников = ПодготовитьТаблицуУдержаний(ТаблицаУдержаний);
	
	СодержанияПроводок = Новый Соответствие;	
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПроцентыПоЗайму,                        "Удержаны проценты по займам");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПогашениеЗаймов,                        "Удержано погашение займа");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.АлиментыПрочиеИсполнительныеЛисты,      "Удержано по исполнительному листу");	
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.Профвзносы,                             "Удержаны профвзносы");	
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ДСВ,                                    "Удержаны добровольные взносы на накопительная часть трудовой пенсии");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПрочиеУдержания,                        "Прочие удержания из заработной платы");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ДобровольныеВзносыВНПФ,                 "Удержаны добровольные взносы в негосударственный пенсионный фонд");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ВознаграждениеПлатежногоАгента,         "Удержано вознаграждение платежного агента");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ВозмещениеУщерба,                       "Удержано возмещение ущерба");
	
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.УдержаниеПоПрочимОперациямСРаботниками,               "Удержание по прочим операциям с работниками");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.УдержаниеНеизрасходованныхПодотчетныхСумм,            "Удержание неизрасходованных подотчетных сумм");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ВозвратИзлишнеВыплаченныхСуммВследствиеСчетныхОшибок, "Возврат излишне выплаченных сумм");
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.УдержаниеЗаОтпуск,                                    "Удержание за неотработанные дни предоставленного авансом отпуска");
	
	СчетРасчетовСПерсоналомПоОплатеТруда = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
	
	ВестиУчетПоРаботникам = Константы.ВедетсяУчетРасчетовПоЗарплатеПоРаботникам.Получить();
		
	Для Каждого СтрокаТаблицы Из ТаблицаУдержанийРаботников Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Счет)
			ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицы.КорСчет) Тогда
			// не заполнены счет и аналитика
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Сумма       = СтрокаТаблицы.Сумма;
		Проводка.Содержание  = СодержанияПроводок.Получить(СтрокаТаблицы.ВидОперации);
		
		Проводка.СчетКт = СтрокаТаблицы.Счет;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.Субконто1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.Субконто2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.Субконто3);
		
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = СтрокаТаблицы.Подразделение;
		КонецЕсли;
		
		Проводка.СчетДт = СтрокаТаблицы.КорСчет;		
		Если ВестиУчетПоРаботникам Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", СтрокаТаблицы.КорСубконто1);
		КонецЕсли;
		
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = СтрокаТаблицы.Подразделение;
		КонецЕсли;
		
	КонецЦикла;
	
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьТаблицуУдержаний(ТаблицаУдержанийРаботника, УСН = Ложь, ИП = Ложь)
		
	ТаблицаУдержаний = ТаблицаУдержанийРаботника.СкопироватьКолонки();
	ТаблицаУдержаний.Колонки.Добавить("Счет");
	ТаблицаУдержаний.Колонки.Добавить("Субконто1");
	ТаблицаУдержаний.Колонки.Добавить("Субконто2");
	ТаблицаУдержаний.Колонки.Добавить("Субконто3");
	ТаблицаУдержаний.Колонки.Добавить("КорСчет");
	ТаблицаУдержаний.Колонки.Добавить("КорСубконто1");
	ТаблицаУдержаний.Колонки.Добавить("КорСубконто2");
	ТаблицаУдержаний.Колонки.Добавить("КорСубконто3");
	
	СчетРасчетовСПерсоналомПоОплатеТруда = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
	
	РасчетыСПодотчетнымиЛицами                  = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами;                  // 71.01
	РасчетыПоПредоставленнымЗаймам              = ПланыСчетов.Хозрасчетный.РасчетыПоПредоставленнымЗаймам;              // 73.01
	РасчетыПоВозмещениюМатериальногоУщерба      = ПланыСчетов.Хозрасчетный.РасчетыПоВозмещениюМатериальногоУщерба;      // 73.02
	РасчетыПоПрочимОперациям                    = ПланыСчетов.Хозрасчетный.РасчетыПоПрочимОперациям;                    // 73.03
	РасчетыПоИсполнительнымДокументамРаботников = ПланыСчетов.Хозрасчетный.РасчетыПоИсполнительнымДокументамРаботников; // 76.41
	РасчетыПоПрочимУдержаниямРаботников         = ПланыСчетов.Хозрасчетный.РасчетыПоПрочимУдержаниямРаботников;         // 76.49
	ПФР_ДОБР_сотр                               = ПланыСчетов.Хозрасчетный.ПФР_ДОБР_сотр;                               // 69.05.2
	ПрочиеДоходы                                = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;                                // 91.01
	
	ВидПлатежаВГосБюджет                 = Перечисления.ВидыПлатежейВГосБюджет.Налог;
	ПрочиеВнереализационныеДоходыРасходы = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.ПрочиеВнереализационныеДоходыРасходы");

	Для Каждого СтрокаТаблицы ИЗ ТаблицаУдержанийРаботника Цикл
		
		Если СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ПогашениеЗаймов
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ПроцентыПоЗайму Тогда
			
			НоваяСтрока = ТаблицаУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Счет      = РасчетыПоПредоставленнымЗаймам;
			НоваяСтрока.Субконто1 = СтрокаТаблицы.ФизическоеЛицо;
			НоваяСтрока.КорСчет      = СчетРасчетовСПерсоналомПоОплатеТруда;
			НоваяСтрока.КорСубконто1 = СтрокаТаблицы.ФизическоеЛицо;
						
		ИначеЕсли СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.АлиментыПрочиеИсполнительныеЛисты Тогда
			
			НоваяСтрока = ТаблицаУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Счет         = РасчетыПоИсполнительнымДокументамРаботников;
			НоваяСтрока.Субконто1    = СтрокаТаблицы.Контрагент;
			НоваяСтрока.КорСчет      = СчетРасчетовСПерсоналомПоОплатеТруда;
			НоваяСтрока.КорСубконто1 = СтрокаТаблицы.ФизическоеЛицо;
			
		ИначеЕсли СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ДСВ Тогда
			
			НоваяСтрока = ТаблицаУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Счет         = ПФР_ДОБР_сотр;
			НоваяСтрока.Субконто1    = ВидПлатежаВГосБюджет;
			НоваяСтрока.КорСчет      = СчетРасчетовСПерсоналомПоОплатеТруда;
			НоваяСтрока.КорСубконто1 = СтрокаТаблицы.ФизическоеЛицо;
			
		ИначеЕсли СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.Профвзносы Тогда
			
			НоваяСтрока = ТаблицаУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Счет         = РасчетыПоПрочимУдержаниямРаботников;
			НоваяСтрока.Субконто1    = СтрокаТаблицы.Контрагент;
			НоваяСтрока.КорСчет      = СчетРасчетовСПерсоналомПоОплатеТруда;
			НоваяСтрока.КорСубконто1 = СтрокаТаблицы.ФизическоеЛицо;
			
		ИначеЕсли СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ПрочиеУдержания Тогда
			
			НоваяСтрока = ТаблицаУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			Если ЗначениеЗаполнено(СтрокаТаблицы.Контрагент) Тогда
				НоваяСтрока.Счет      = РасчетыПоПрочимУдержаниямРаботников;
				НоваяСтрока.Субконто1 = СтрокаТаблицы.Контрагент;
			Иначе
				НоваяСтрока.Счет      = РасчетыПоПрочимОперациям;
				НоваяСтрока.Субконто1 = СтрокаТаблицы.ФизическоеЛицо;
			КонецЕсли;
			НоваяСтрока.КорСчет      = СчетРасчетовСПерсоналомПоОплатеТруда;
			НоваяСтрока.КорСубконто1 = СтрокаТаблицы.ФизическоеЛицо;
			
		ИначеЕсли СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ДобровольныеВзносыВНПФ
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ВознаграждениеПлатежногоАгента Тогда
			
			НоваяСтрока = ТаблицаУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Счет         = РасчетыПоПрочимУдержаниямРаботников;
			НоваяСтрока.Субконто1    = СтрокаТаблицы.Контрагент;
			НоваяСтрока.КорСчет      = СчетРасчетовСПерсоналомПоОплатеТруда;
			НоваяСтрока.КорСубконто1 = СтрокаТаблицы.ФизическоеЛицо;
			
		ИначеЕсли СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ВозмещениеУщерба Тогда
			
			НоваяСтрока = ТаблицаУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Счет         = РасчетыПоВозмещениюМатериальногоУщерба;
			НоваяСтрока.Субконто1    = СтрокаТаблицы.ФизическоеЛицо;
			НоваяСтрока.КорСчет      = СчетРасчетовСПерсоналомПоОплатеТруда;
			НоваяСтрока.КорСубконто1 = СтрокаТаблицы.ФизическоеЛицо;						
			
		ИначеЕсли СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.УдержаниеПоПрочимОперациямСРаботниками Тогда
			
			НоваяСтрока = ТаблицаУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Счет         = РасчетыПоПрочимОперациям;
			НоваяСтрока.Субконто1    = СтрокаТаблицы.ФизическоеЛицо;
			НоваяСтрока.КорСчет      = СчетРасчетовСПерсоналомПоОплатеТруда;
			НоваяСтрока.КорСубконто1 = СтрокаТаблицы.ФизическоеЛицо;						
			
		ИначеЕсли СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.УдержаниеНеизрасходованныхПодотчетныхСумм Тогда
			
			НоваяСтрока = ТаблицаУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Счет         = РасчетыСПодотчетнымиЛицами;
			НоваяСтрока.Субконто1    = СтрокаТаблицы.ФизическоеЛицо;
			НоваяСтрока.КорСчет      = СчетРасчетовСПерсоналомПоОплатеТруда;
			НоваяСтрока.КорСубконто1 = СтрокаТаблицы.ФизическоеЛицо;						
			
		ИначеЕсли СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ВозвратИзлишнеВыплаченныхСуммВследствиеСчетныхОшибок Тогда
			
			НоваяСтрока = ТаблицаУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Счет         = ПрочиеДоходы;
			НоваяСтрока.Субконто1    = ПрочиеВнереализационныеДоходыРасходы;
			НоваяСтрока.КорСчет      = СчетРасчетовСПерсоналомПоОплатеТруда;
			НоваяСтрока.КорСубконто1 = СтрокаТаблицы.ФизическоеЛицо;						
			
		ИначеЕсли СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.УдержаниеЗаОтпуск Тогда
			
			НоваяСтрока = ТаблицаУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Счет         = ПрочиеДоходы;
			НоваяСтрока.Субконто1    = ПрочиеВнереализационныеДоходыРасходы;
			НоваяСтрока.КорСчет      = СчетРасчетовСПерсоналомПоОплатеТруда;
			НоваяСтрока.КорСубконто1 = СтрокаТаблицы.ФизическоеЛицо;						
			
		КонецЕсли; 
		
	КонецЦикла;
		
	СтрокаСвертки = "ВидОперации, Подразделение, Счет, Субконто1, Субконто2, Субконто3, КорСчет, КорСубконто1, КорСубконто2, КорСубконто3";
	Если УСН Тогда
		СтрокаСвертки = СтрокаСвертки + ", ОтражениеВУСН";
	КонецЕсли;
	
	Если ИП Тогда
		СтрокаСвертки = СтрокаСвертки + ", ВидНачисленияУдержания";
	КонецЕсли;
		
	ТаблицаУдержаний.Свернуть(СтрокаСвертки, "Сумма");
	
	Возврат ТаблицаУдержаний;
		
КонецФункции

///////////////////////////////
// Проведение по подсистеме ИП

Процедура ОпределитьВидУдержанийИП(ТаблицаЗаработнойПлаты)
	
	СоответствиеВидовНачисленийУдержаний = Новый Соответствие;	
	СоответствиеВидовНачисленийУдержаний.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПрочиеУдержания,                        Перечисления.ИПВидыНачисленийУдержаний.УдержаноДругое);
	СоответствиеВидовНачисленийУдержаний.Вставить(Перечисления.ВидыОперацийПоЗарплате.ДСВ,                                    Перечисления.ИПВидыНачисленийУдержаний.УдержаноДругое);
	СоответствиеВидовНачисленийУдержаний.Вставить(Перечисления.ВидыОперацийПоЗарплате.ДобровольныеВзносыВНПФ,                 Перечисления.ИПВидыНачисленийУдержаний.УдержаноДругое);
	СоответствиеВидовНачисленийУдержаний.Вставить(Перечисления.ВидыОперацийПоЗарплате.ВознаграждениеПлатежногоАгента,         Перечисления.ИПВидыНачисленийУдержаний.УдержаноДругое);
	СоответствиеВидовНачисленийУдержаний.Вставить(Перечисления.ВидыОперацийПоЗарплате.АлиментыПрочиеИсполнительныеЛисты,      Перечисления.ИПВидыНачисленийУдержаний.УдержаноИсполнительныйЛист);
	СоответствиеВидовНачисленийУдержаний.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПогашениеЗаймов,                        Перечисления.ИПВидыНачисленийУдержаний.УдержаноДругое);
	СоответствиеВидовНачисленийУдержаний.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПроцентыПоЗайму,                        Перечисления.ИПВидыНачисленийУдержаний.УдержаноДругое);
	СоответствиеВидовНачисленийУдержаний.Вставить(Перечисления.ВидыОперацийПоЗарплате.ВозмещениеУщерба,                       Перечисления.ИПВидыНачисленийУдержаний.УдержаноДругое);
	СоответствиеВидовНачисленийУдержаний.Вставить(Перечисления.ВидыОперацийПоЗарплате.УдержаниеПоПрочимОперациямСРаботниками, Перечисления.ИПВидыНачисленийУдержаний.УдержаноДругое);
	СоответствиеВидовНачисленийУдержаний.Вставить(Перечисления.ВидыОперацийПоЗарплате.УдержаниеНеизрасходованныхПодотчетныхСумм, Перечисления.ИПВидыНачисленийУдержаний.УдержаноДругое);
		
	Если ТаблицаЗаработнойПлаты.Колонки.Найти("ВидНачисленияУдержания") = Неопределено Тогда
		ТаблицаЗаработнойПлаты.Колонки.Добавить("ВидНачисленияУдержания", Новый ОписаниеТипов("ПеречислениеСсылка.ИПВидыНачисленийУдержаний"));
		Для каждого Начисление Из ТаблицаЗаработнойПлаты Цикл
			Начисление.ВидНачисленияУдержания	= СоответствиеВидовНачисленийУдержаний.Получить(Начисление.ВидОперации);			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияПоРегистрамИПУдержания(Параметры, ТаблицаУдержаний, Реквизиты, ТаблицаЗаработнойПлаты, Движения, Отказ)
	
	ОпределитьВидУдержанийИП(ТаблицаУдержаний);
	
	Если ТаблицаУдержаний.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаУдержаний = ПодготовитьТаблицуУдержаний(ТаблицаУдержаний, , Истина);
	
	Если ТаблицаУдержаний.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
			
	Если Движения.Найти("ИПРасходыНаОплатуТруда") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаЗаработнойПлаты <> Неопределено Тогда
		ДополнитьТаблицуУдержанийИсточникамиДоходов(ТаблицаУдержаний, ТаблицаЗаработнойПлаты, Реквизиты);
	КонецЕсли;
		
	Если Параметры.Реквизиты.Колонки.Найти("Ссылка") = Неопределено Тогда
		Параметры.Реквизиты.Колонки.Добавить("Ссылка",	Документы.ТипВсеСсылки());
		Параметры.Реквизиты.ЗаполнитьЗначения(Реквизиты.Регистратор, "Ссылка");
	КонецЕсли;
	
	Если Параметры.Реквизиты.Колонки.Найти("Удержания") = Неопределено Тогда
		Параметры.Реквизиты.Колонки.Добавить("Удержания");
		Параметры.Реквизиты.ЗаполнитьЗначения(Истина, "Удержания");
	КонецЕсли;
	
	Параметры.Вставить("ТаблицаИПНачислениеЗарплаты", ТаблицаУдержаний);
	
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияРасходовНаОплатуТруда_Удержания(
		Параметры.ТаблицаИПНачислениеЗарплаты, Параметры.Реквизиты, Движения, Отказ);
	
КонецПроцедуры

Процедура ДополнитьТаблицуУдержанийИсточникамиДоходов(ТаблицаУдержаний, ТаблицаЗаработнойПлаты, Реквизиты)
	
	ОчиститьТаблицуЗаработнойПлаты(ТаблицаЗаработнойПлаты);
	ТаблицаЗаработнойПлаты = ДополнитьТаблицуЗарплатыАналитикойБухУчета(ТаблицаЗаработнойПлаты);
	ОпределитьВидНачисленийУдержанийИП(ТаблицаЗаработнойПлаты);
	ТаблицаЗаработнойПлаты = ПодготовитьТаблицуНачисленийУдержаний(ТаблицаЗаработнойПлаты, , Истина, Реквизиты);
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаЗаработнойПлаты Цикл
		
		СтруктураСчетАналитика = Новый Структура("Счет, Субконто1, Субконто2, Субконто3",
			СтрокаТаблицы.КорСчет, СтрокаТаблицы.КорСубконто1, СтрокаТаблицы.КорСубконто2, СтрокаТаблицы.КорСубконто3);
		
		СтруктураКорСчетАналитика = Новый Структура("КорСчет, КорСубконто1, КорСубконто2, КорСубконто3",
			СтрокаТаблицы.Счет, СтрокаТаблицы.Субконто1, СтрокаТаблицы.Субконто2, СтрокаТаблицы.Субконто3);
			
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтруктураСчетАналитика);
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтруктураКорСчетАналитика);
		
		НоваяСтрока = ТаблицаУдержаний.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
	КонецЦикла;
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// НАЧИСЛЕНИЕ РЕЗЕРВОВ
//

Процедура СформироватьДвиженияНачислениеРезервов(Движения, Отказ, Организация, ПериодРегистрации, ДанныеПоРезервам)
	
	Регистратор = Движения.Хозрасчетный.Отбор.Регистратор.Значение;

	Параметры = ПодготовитьПараметрыПоОтражениюРезервовВУчете(ДанныеПоРезервам, Организация, ПериодРегистрации, Регистратор);
	Реквизиты = Параметры.Реквизиты[0];
	ТаблицаРезервов = Параметры.ТаблицаРезервов;
	
	РазвернутьТаблицуРезервов(ТаблицаРезервов);
	
	ТаблицаРезервов = ДополнитьТаблицуРезервовАналитикойБухУчета(ТаблицаРезервов);
	
	СформироватьПроводкиПоОтражениюРезервовВУчете(ТаблицаРезервов, Реквизиты, Движения, Отказ);
	
	
КонецПроцедуры

Функция ПодготовитьПараметрыПоОтражениюРезервовВУчете(ДанныеДляПроводок, Организация, ПериодРегистрации, Регистратор)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	Реквизиты = Новый ТаблицаЗначений;
	
	Реквизиты.Колонки.Добавить("Организация");
	Реквизиты.Колонки.Добавить("Период");
	Реквизиты.Колонки.Добавить("Регистратор");
	
	НоваяСтрока             = Реквизиты.Добавить();
	НоваяСтрока.Организация = Организация;
	НоваяСтрока.Период      = КонецМесяца(ПериодРегистрации);
	НоваяСтрока.Регистратор = Регистратор;
	
	Параметры.Вставить("Реквизиты", Реквизиты);
		
	// Подготовка таблицы по заработной плате:
	СписокОбязательныхКолонок = ""
	+ "Подразделение,"
	+ "СпособОтраженияЗарплатыВБухучете,"
	+ "СуммаРезерва,"	
	+ "СуммаРезерваСтраховыхВзносов,"
	+ "СуммаРезерваФССНесчастныеСлучаи,"
	+ "СуммаРезерваНУ,"
	+ "СуммаРезерваСтраховыхВзносовНУ,"
	+ "СуммаРезерваФССНесчастныеСлучаиНУ"
	;	
	Параметры.Вставить("ТаблицаРезервов", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ДанныеДляПроводок, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура РазвернутьТаблицуРезервов(ТаблицаРезервов)
	
	///////////////////////////////////////
	// Описание типов для дополнения таблиц
	ТипОперации = Новый КвалификаторыЧисла(1,0);
	ТипЧисла    = Новый КвалификаторыЧисла(15,2);
	Массив      = Новый Массив;
	Массив.Добавить(Тип("Число"));
	ОписаниеТиповЧисла    = Новый ОписаниеТипов(Массив, , ,ТипЧисла);
	ОписаниеТиповОперации = Новый ОписаниеТипов(Массив, , ,ТипОперации);
	
	// Описание типов для дополнения таблиц
	///////////////////////////////////////
	
	Если ТаблицаРезервов.Колонки.Найти("ВидОперации") = Неопределено Тогда
		ТаблицаРезервов.Колонки.Добавить("ВидОперации", ОписаниеТиповЧисла);
	КонецЕсли;
	
	Если ТаблицаРезервов.Колонки.Найти("СуммаНУ") = Неопределено Тогда
		ТаблицаРезервов.Колонки.Добавить("СуммаНУ", ОписаниеТиповЧисла);
	КонецЕсли;
	
	Если ТаблицаРезервов.Колонки.Найти("Сумма") = Неопределено Тогда
		ТаблицаРезервов.Колонки.Добавить("Сумма", ОписаниеТиповЧисла);
	КонецЕсли;

	МассивКолонок = Новый Массив;
	МассивКолонок.Добавить("СуммаРезерва");                    // Вид операции - 1
	МассивКолонок.Добавить("СуммаРезерваСтраховыхВзносов");    // Вид операции - 2
	МассивКолонок.Добавить("СуммаРезерваФССНесчастныеСлучаи"); // Вид операции - 3
	
	КоличествоИндексовМассива = МассивКолонок.Количество() - 1;
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаРезервов Цикл
		
		Если СтрокаТаблицы.ВидОперации = 0 Тогда
			
			Для ИндексМассива = 0 По КоличествоИндексовМассива Цикл
				
				Если СтрокаТаблицы[МассивКолонок[ИндексМассива]] <> 0 Тогда
					НоваяСтрока = ТаблицаРезервов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
					НоваяСтрока.Сумма   = СтрокаТаблицы[МассивКолонок[ИндексМассива]];
					НоваяСтрока.СуммаНУ = СтрокаТаблицы[МассивКолонок[ИндексМассива]+"НУ"];
					НоваяСтрока.ВидОперации = ИндексМассива + 1;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;

	ТаблицаРезервов.Свернуть("ВидОперации,Подразделение,СпособОтраженияЗарплатыВБухучете",
							"Сумма, СуммаНУ");
	
КонецПроцедуры

Функция ДополнитьТаблицуРезервовАналитикойБухУчета(ТаблицаРезервов)
	
	МассивСчетовУчетаНУ = Новый Массив;
	МассивСчетовУчетаНУ.Добавить(ПланыСчетов.Хозрасчетный.РасходыНаОплатуТрудаБудущихПериодов);
	
	СчетУчетаНераспределеннаяПрибыль = ПланыСчетов.Хозрасчетный.НераспределеннаяПрибыль;
	СчетУчетаПрочиеРасходы = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
	РасходыПоУплатеСтраховыхВзносов = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.РасходыПоУплатеСтраховыхВзносов");	
	ПрочиеВнереализационныеДоходыРасходы = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.ПрочиеВнереализационныеДоходыРасходы");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаРезервов", ТаблицаРезервов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаРезервов.Сумма,
	|	ТаблицаРезервов.СуммаНУ,
	|	ТаблицаРезервов.ВидОперации,
	|	ЛОЖЬ КАК ОблагаетсяЕНВД,
	|	ТаблицаРезервов.СпособОтраженияЗарплатыВБухУчете,
	|	ТаблицаРезервов.Подразделение
	|ПОМЕСТИТЬ ВТ_Резервы
	|ИЗ
	|	&ТаблицаРезервов КАК ТаблицаРезервов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВТ_Резервы.Сумма) КАК Сумма,
	|	СУММА(ВТ_Резервы.СуммаНУ) КАК СуммаНУ,
	|	ВТ_Резервы.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	ВТ_Резервы.Подразделение КАК Подразделение,
	|	ВТ_Резервы.ВидОперации КАК ВидОперации,
	|	ПорядокОтраженияЗарплатыВБухУчете.Счет КАК Счет,
	|	ПорядокОтраженияЗарплатыВБухУчете.Субконто1 КАК Субконто1,
	|	ПорядокОтраженияЗарплатыВБухУчете.Субконто2 КАК Субконто2,
	|	ПорядокОтраженияЗарплатыВБухУчете.Субконто3 КАК Субконто3
	|ИЗ
	|	ВТ_Резервы КАК ВТ_Резервы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокОтраженияЗарплатыВБухУчете КАК ПорядокОтраженияЗарплатыВБухУчете
	|		ПО ВТ_Резервы.СпособОтраженияЗарплатыВБухУчете = ПорядокОтраженияЗарплатыВБухУчете.СпособОтраженияЗарплатыВБухУчете
	|			И ВТ_Резервы.ОблагаетсяЕНВД = ПорядокОтраженияЗарплатыВБухУчете.ЕНВД
	|
	|СГРУППИРОВАТЬ ПО
	|	ПорядокОтраженияЗарплатыВБухУчете.Счет,
	|	ВТ_Резервы.Подразделение,
	|	ВТ_Резервы.ВидОперации,
	|	ПорядокОтраженияЗарплатыВБухУчете.Субконто1,
	|	ПорядокОтраженияЗарплатыВБухУчете.Субконто2,
	|	ПорядокОтраженияЗарплатыВБухУчете.Субконто3,
	|	ВТ_Резервы.ОблагаетсяЕНВД";
	
	ТаблицаРезервовСчетаИАналитика =  Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СтатьиЗатратПоНалогамВзносамСФОТ.СтатьяЗатратНачисления <> НЕОПРЕДЕЛЕНО
	|			ТОГДА СтатьиЗатратПоНалогамВзносамСФОТ.СтатьяЗатратНачисления
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СтатьиЗатратПоНалогамВзносамСФОТ.СтатьяЗатрат ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|					ТОГДА ЗНАЧЕНИЕ(Справочник.ПрочиеДоходыИРасходы.ПустаяСсылка)
	|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)
	|			КОНЕЦ
	|	КОНЕЦ КАК СтатьяЗатратНачисления,
	|	СтатьиЗатратПоНалогамВзносамСФОТ.СтатьяЗатрат КАК СтатьяЗатрат
	|ИЗ
	|	РегистрСведений.СтатьиЗатратПоНалогамВзносамСФОТ КАК СтатьиЗатратПоНалогамВзносамСФОТ
	|ГДЕ
	|	СтатьиЗатратПоНалогамВзносамСФОТ.ВидСтатьиЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДополнительныхСтатейЗатрат.ФСС_НС)";
	
	СтатьиЗатрат_ФСС_НСиПЗ = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СтатьиЗатратПоНалогамВзносамСФОТ.СтатьяЗатратНачисления <> НЕОПРЕДЕЛЕНО
	|			ТОГДА СтатьиЗатратПоНалогамВзносамСФОТ.СтатьяЗатратНачисления
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СтатьиЗатратПоНалогамВзносамСФОТ.СтатьяЗатрат ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|					ТОГДА ЗНАЧЕНИЕ(Справочник.ПрочиеДоходыИРасходы.ПустаяСсылка)
	|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)
	|			КОНЕЦ
	|	КОНЕЦ КАК СтатьяЗатратНачисления,
	|	СтатьиЗатратПоНалогамВзносамСФОТ.СтатьяЗатрат КАК СтатьяЗатрат
	|ИЗ
	|	РегистрСведений.СтатьиЗатратПоНалогамВзносамСФОТ КАК СтатьиЗатратПоНалогамВзносамСФОТ
	|ГДЕ
	|	СтатьиЗатратПоНалогамВзносамСФОТ.ВидСтатьиЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДополнительныхСтатейЗатрат.СтраховыеВзносы)";
	
	СтатьиЗатрат_СтраховыеВзносы = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаРезервовСчетаИАналитика Цикл
		
		Если СтрокаТаблицы.ВидОперации = 3 Тогда
			
			// Взносы в ФСС от НС и ПЗ
			
			Для НомерСубконто = 1 По 3 Цикл
				
				ЗаменитьЗначениеСтатьиЗатрат(СтрокаТаблицы, НомерСубконто, СтатьиЗатрат_ФСС_НСиПЗ);

			КонецЦикла;
						
			
		ИначеЕсли СтрокаТаблицы.ВидОперации = 2 Тогда
			
			// Взносы в ПФР, ФОМС и ФСС
			
			Для НомерСубконто = 1 По 3 Цикл
				
				ЗаменитьЗначениеСтатьиЗатрат(СтрокаТаблицы, НомерСубконто, СтатьиЗатрат_СтраховыеВзносы);

			КонецЦикла;
			
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаРезервовСчетаИАналитика;
	
КонецФункции

Процедура СформироватьПроводкиПоОтражениюРезервовВУчете(ТаблицаРезервов, Реквизиты, Движения, Отказ)
	
	Если ТаблицаРезервов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СодержанияПроводок = Новый Соответствие;	
	СодержанияПроводок.Вставить(1, "Начисление обязательств по предстоящим отпускам");
	СодержанияПроводок.Вставить(2, "Начисление страховых взносов с обязательств по предстоящим отпускам");
	СодержанияПроводок.Вставить(3, "Начисление взносов в ФСС от НС и ПЗ с обязательств по предстоящим отпускам");
	
	СчетРезерваОтпусков        = ПланыСчетов.Хозрасчетный.ОценочныеОбязательстваПоВознаграждениям;
	СчетВзносовРезерваОтпусков = ПланыСчетов.Хозрасчетный.ОценочныеОбязательстваПостраховымВзносам;
	
	НастройкиУчетаЗарплаты = РегистрыСведений.НастройкиУчетаЗарплаты.Получить(Новый Структура("Организация", Реквизиты.Организация));
	РезервОтпусковЭлемент = НастройкиУчетаЗарплаты.РезервОтпусков;
	
	ТаблицаРезервов.Сортировать("ВидОперации, Счет, Подразделение, Субконто1, Субконто2, Субконто3");
	
	Для Каждого СтрокаТаблицы Из ТаблицаРезервов Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Счет) Тогда
			// не заполнены счет и аналитика
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.Сумма = 0 
			И СтрокаТаблицы.СуммаНУ = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Сумма       = СтрокаТаблицы.Сумма;
		Проводка.Содержание  = СодержанияПроводок.Получить(СтрокаТаблицы.ВидОперации);
		
		Проводка.СчетДт = СтрокаТаблицы.Счет;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.Субконто1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.Субконто2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.Субконто3);
		
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = СтрокаТаблицы.Подразделение;
		КонецЕсли;
		
		Если СвойстваСчетаДт.НалоговыйУчет Тогда
			Проводка.СуммаНУДт = СтрокаТаблицы.СуммаНУ;
			Проводка.СуммаВРДт = СтрокаТаблицы.Сумма - СтрокаТаблицы.СуммаНУ;
		КонецЕсли;
		
		Проводка.СчетКт = ?(СтрокаТаблицы.ВидОперации = 1, СчетРезерваОтпусков, СчетВзносовРезерваОтпусков);
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, РезервОтпусковЭлемент);
		
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = СтрокаТаблицы.Подразделение;
		КонецЕсли;
		
		Если СвойстваСчетаКт.НалоговыйУчет Тогда
			Проводка.СуммаНУКт = СтрокаТаблицы.СуммаНУ;
			Проводка.СуммаВРКт = СтрокаТаблицы.Сумма - СтрокаТаблицы.СуммаНУ;
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВЫПЛАТА ЗАРПЛАТЫ
//

// Предназначена для генерации движений, связанных с отражением в регл. учете перечисления/выплаты зарплаты
//
// Параметры:
//	ТаблицаПеречислениеЗарплаты - таблица значений с колонками
//      Подразделение
//		ФизическоеЛицо
//      СуммаКВыплате
//      КомпенсацияЗаЗадержкуЗарплаты
//      СтатьяДвиженияДенежныхСредств
//      БанковскийСчет
//      СчетУчета
//      СчетУчетаКомпенсации
//      СубконтоУчетаКомпенсации1
//      СубконтоУчетаКомпенсации2
//      СубконтоУчетаКомпенсации3
//      ПодразделениеУчетаКомпенсации
//      Ведомость
//	ТаблицаРеквизиты  - таблица значений содержит реквизиты документа
//	Движения
//	Отказ
//
Процедура СформироватьДвиженияПеречислениеВыплатаЗарплаты(ДокументОбъект, ТаблицаПеречислениеЗарплаты, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыВыплатыЗарплаты(ТаблицаПеречислениеЗарплаты, ТаблицаРеквизиты);
	
	Если Параметры.ВыплатаЗаработнойПлаты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	СформироватьПроводкиПоВыплатеЗарплаты(Параметры.ВыплатаЗаработнойПлаты, Реквизиты, Движения, Отказ);
	
	УчетЗарплатыИКадровСредствамиБухгалтерии = ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии");
	УчетЗарплатыИКадровВоВнешнейПрограмме    = ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме");
	ВедетсяУчетРасчетовПоЗарплатеСводно      = ПолучитьФункциональнуюОпцию("ВедетсяУчетРасчетовПоЗарплатеСводно");

	// Обращение к БЗКБ
	Если УчетЗарплатыИКадровСредствамиБухгалтерии
		ИЛИ (УчетЗарплатыИКадровВоВнешнейПрограмме И НЕ ВедетсяУчетРасчетовПоЗарплатеСводно) Тогда
		МассивВедомостей    = ТаблицаПеречислениеЗарплаты.ВыгрузитьКолонку("Ведомость");
		МассивФизическихЛиц = ТаблицаПеречислениеЗарплаты.ВыгрузитьКолонку("ФизическоеЛицо");
		ЗарплатаКадры.ЗарегистрироватьОплатуВедомостей(ДокументОбъект, Реквизиты.Организация, МассивВедомостей, МассивФизическихЛиц,, Отказ);
	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыВыплатыЗарплаты(ТаблицаПеречислениеЗарплаты, ТаблицаРеквизиты)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"                    // <Дата> - период движений - дата документа
	+ "Регистратор,"               // <ДокументСсылка>
	+ "Содержание,"                // <Строка>
	+ "Организация";               // <СправочникСсылка.Организации>
	
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.ВыплатаЗаработнойПлаты
	
	СписокОбязательныхКолонок = ""
	+ "Подразделение,"                 // <Ссылка на справочник подразделений>  - подразделение, задолженность по которому погашается
	+ "ФизическоеЛицо,"                // <СправочникСсылка.ФизическиеЛица> - физическое лико, которому выплачивается зарплата
	+ "СуммаКВыплате,"                 // <Число,15,2> - сумма выплаты в валюте документа
	+ "КомпенсацияЗаЗадержкуЗарплаты," // <Число,15,2> - сумма компенсации в валюте документа
	+ "СтатьяДвиженияДенежныхСредств," // <СправочникСсылка.СтатьиДвиженияДенежныхСредств>
	+ "БанковскийСчет,"                // <СправочникСсылка.БанковскиеСчета>
	+ "СчетУчета,"                     // <ПланСчетовСсылка.Хозрасчетный> - счет учета денежных средств
	+ "СчетУчетаКомпенсации,"          // <ПланСчетовСсылка.Хозрасчетный> - счет учета компенсации
	+ "СубконтоУчетаКомпенсации1,"     //<Характеристика.ВидыСубконтоХозрасчетные> - субконто 1 по счету учета комппенсации
	+ "СубконтоУчетаКомпенсации2,"     //<Характеристика.ВидыСубконтоХозрасчетные> - субконто 2 по счету учета комппенсации
	+ "СубконтоУчетаКомпенсации3,"     //<Характеристика.ВидыСубконтоХозрасчетные> - субконто 3 по счету учета комппенсации
	+ "ПодразделениеУчетаКомпенсации," // <Ссылка на справочник подразделений>  - подразделение, задолженность по депонентам которого погашается	
	+ "Ведомость";                     // <ДокументСсылка.ВедомостьВКассу...ДокументСсылка.ВедомостьВБанк> - ведомости, по которым производится выплата
	
	Если Константы.УчетЗарплатыИКадровСредствамиБухгалтерии.Получить() Тогда
		СписокОбязательныхКолонок = СписокОбязательныхКолонок
		+ ",ИспользуетсяЭлектронныйОбмен"  // Булево - информация о том, что используется электронный обмен с банком
	КонецЕсли;
		
	Параметры.Вставить("ВыплатаЗаработнойПлаты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаПеречислениеЗарплаты, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции

Процедура СформироватьПроводкиПоВыплатеЗарплаты(ТаблицаВыплатыЗаработнойПлаты, Реквизиты, Движения, Отказ)
	
	ТаблицаВыплаты = ТаблицаВыплатыЗаработнойПлаты.Скопировать();
	
	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	
	СчетРасчетовСПерсоналомПоОплатеТруда = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
	
	ВестиУчетПоРаботникам = Константы.ВедетсяУчетРасчетовПоЗарплатеПоРаботникам.Получить();
	
	Содержание = Реквизиты.Содержание;
	
	Если НЕ ВестиУчетПоРаботникам Тогда
		ТаблицаВыплаты.Свернуть("Подразделение, СтатьяДвиженияДенежныхСредств, СчетУчета, БанковскийСчет, СчетУчетаКомпенсации,
		|СубконтоУчетаКомпенсации1, СубконтоУчетаКомпенсации2, СубконтоУчетаКомпенсации3, ПодразделениеУчетаКомпенсации", "СуммаКВыплате, КомпенсацияЗаЗадержкуЗарплаты");
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаВыплаты Цикл
		
		Если СтрокаТаблицы.СуммаКВыплате + СтрокаТаблицы.КомпенсацияЗаЗадержкуЗарплаты = 0 Тогда
			
			Продолжить;
		КонецЕсли;
				
		// Выплата заработной платы
		
		Если СтрокаТаблицы.СуммаКВыплате <> 0 Тогда
			
			Проводка = Движения.Хозрасчетный.Добавить();
			
			Проводка.Период       = Реквизиты.Период;
			Проводка.Организация  = Реквизиты.Организация;
			Проводка.Содержание   = "Выплата заработной платы" + Содержание;
			
			Проводка.Сумма = СтрокаТаблицы.СуммаКВыплате;
			
			Проводка.СчетДт = СчетРасчетовСПерсоналомПоОплатеТруда;
			
			Если ВестиУчетПоРаботникам Тогда			
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", СтрокаТаблицы.ФизическоеЛицо);
			КонецЕсли;
			
			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = СтрокаТаблицы.Подразделение;
			КонецЕсли;
			
			Проводка.СчетКт = СтрокаТаблицы.СчетУчета;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиДвиженияДенежныхСредств", СтрокаТаблицы.СтатьяДвиженияДенежныхСредств);
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.БанковскийСчет) Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "БанковскиеСчета", СтрокаТаблицы.БанковскийСчет);
			КонецЕсли;
			
			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = СтрокаТаблицы.Подразделение;
			КонецЕсли;
			
			Если ОтражатьВНалоговомУчете Тогда
				
				Если СвойстваСчетаДт.НалоговыйУчет Тогда
					Проводка.СуммаНУДт = СтрокаТаблицы.СуммаКВыплате;
				КонецЕсли;
				Если СвойстваСчетаКт.НалоговыйУчет Тогда
					Проводка.СуммаНУКт = СтрокаТаблицы.СуммаКВыплате;
				КонецЕсли;
				
			КонецЕсли;
						
		КонецЕсли;
		
		// Выплата компенсации за задержку заработной платы
		
		Если СтрокаТаблицы.КомпенсацияЗаЗадержкуЗарплаты <> 0 Тогда
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаКомпенсации) Тогда
				ТекстСообщения = НСтр("ru = 'Не указан счет учета расчетов по компенсации за задержку заработной платы!'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор,,, Отказ);
				Прервать;
			КонецЕсли;
			
			Проводка = Движения.Хозрасчетный.Добавить();
			
			Проводка.Период       = Реквизиты.Период;
			Проводка.Организация  = Реквизиты.Организация;
			Проводка.Содержание   = "Выплата компенсации за задержку заработной платы" + Содержание;
			
			Проводка.Сумма = СтрокаТаблицы.КомпенсацияЗаЗадержкуЗарплаты;
			
			Проводка.СчетДт = СтрокаТаблицы.СчетУчетаКомпенсации;
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоУчетаКомпенсации1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоУчетаКомпенсации2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.СубконтоУчетаКомпенсации3);
			
			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = СтрокаТаблицы.ПодразделениеУчетаКомпенсации;
			КонецЕсли;
			
			Проводка.СчетКт = СтрокаТаблицы.СчетУчета;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиДвиженияДенежныхСредств", СтрокаТаблицы.СтатьяДвиженияДенежныхСредств);
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.БанковскийСчет) Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "БанковскиеСчета", СтрокаТаблицы.БанковскийСчет);
			КонецЕсли;
			
			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = СтрокаТаблицы.Подразделение;
			КонецЕсли;
			
			Если ОтражатьВНалоговомУчете Тогда
				
				Если СвойстваСчетаДт.НалоговыйУчет Тогда
					Проводка.СуммаНУДт = СтрокаТаблицы.КомпенсацияЗаЗадержкуЗарплаты;
				КонецЕсли;
				Если СвойстваСчетаКт.НалоговыйУчет Тогда
					Проводка.СуммаНУКт = СтрокаТаблицы.КомпенсацияЗаЗадержкуЗарплаты;
				КонецЕсли;
				
			КонецЕсли;
						
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВЫПЛАТА ДЕПОНЕНТОВ
//

// Предназначена для генерации движений, связанных с отражением в регл. учете выплаты депонентов
//
// Параметры:
//	ТаблицаПеречислениеЗарплаты - таблица значений с колонками
//      Подразделение
//		ФизическоеЛицо
//      СуммаКВыплате
//      СтатьяДвиженияДенежныхСредств
//      СчетУчета
//      Ведомость
//	ТаблицаРеквизиты  - таблица значений содержит реквизиты документа
//	Движения
//	Отказ
//
Процедура СформироватьДвиженияВыплатаДепонентов(ТаблицаВыплатаДепонентов, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыВыплатыДепонентов(ТаблицаВыплатаДепонентов, ТаблицаРеквизиты);
	
	Если Параметры.ВыплатаДепонентов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	СуммаДокумента = Реквизиты.СуммаДокумента;
    	
	ВыплатаДепонентов = Параметры.ВыплатаДепонентов;
	СуммаПоПустойВедомости = СуммаДокумента - ВыплатаДепонентов.Итог("СуммаКВыплате");
	
	Если СуммаПоПустойВедомости <> 0 Тогда
		НоваяСтрока = ВыплатаДепонентов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыплатаДепонентов[0]);
		НоваяСтрока.СуммаКВыплате = СуммаПоПустойВедомости;
		НоваяСтрока.Ведомость = Неопределено;
	КонецЕсли;
		
	СформироватьПроводкиПоВыплатеДепонентов(ВыплатаДепонентов, Реквизиты, Движения, Отказ);
	
	УчетЗарплатыИКадровВоВнешнейПрограмме = ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме");
	ВедетсяУчетРасчетовПоЗарплатеСводно   = ПолучитьФункциональнуюОпцию("ВедетсяУчетРасчетовПоЗарплатеСводно");
	// Обращение к БЗКБ
	Если НЕ УчетЗарплатыИКадровВоВнешнейПрограмме И НЕ ВедетсяУчетРасчетовПоЗарплатеСводно Тогда
		Параметры.ВыплатаДепонентов.Колонки.СуммаКВыплате.Имя = "Сумма";		
		УчетДепонированнойЗарплаты.СписатьДепонированнуюЗарплату(Движения, Отказ, Реквизиты.Организация, Реквизиты.Период, Параметры.ВыплатаДепонентов, , Строка(Реквизиты.Регистратор));
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьПараметрыВыплатыДепонентов(ТаблицаВыплатаДепонентов, ТаблицаРеквизиты)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"                    // <Дата> - период движений - дата документа
	+ "Регистратор,"               // <ДокументСсылка>
	+ "СуммаДокумента,"            // <Число,15,2> - сумма выплаты в валюте документа
	+ "Организация";               // <СправочникСсылка.Организации>
	
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.ВыплатаДепонентов
	
	СписокОбязательныхКолонок = ""
	+ "Подразделение,"                 // <Ссылка на справочник подразделений>  - подразделение, задолженность по которому погашается
	+ "ФизическоеЛицо,"                // <СправочникСсылка.ФизическиеЛица> - физическое лико, которому выплачивается зарплата
	+ "СуммаКВыплате,"                 // <Число,15,2> - сумма выплаты в валюте документа	
	+ "БанковскийСчет,"                // <СправочникСсылка.БанковскиеСчета>
	+ "СтатьяДвиженияДенежныхСредств," // <СправочникСсылка.СтатьиДвиженияДенежныхСредств>
	+ "СчетУчета,"                     // <ПланСчетовСсылка.Хозрасчетный> - счет учета денежных средств
	+ "Ведомость";                     // <ДокументСсылка.ВедомостьВКассу> - ведомость, по которым производится выплата
	
	Параметры.Вставить("ВыплатаДепонентов", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВыплатаДепонентов, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции

Процедура СформироватьПроводкиПоВыплатеДепонентов(ТаблицаВыплатаДепонентов, Реквизиты, Движения, Отказ)
	
	ТаблицаВыплаты = ТаблицаВыплатаДепонентов.Скопировать();

	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	
	СчетРасчетовПоДепонированнымСуммам = ПланыСчетов.Хозрасчетный.РасчетыПоДепонированнымСуммам;
	
	ВестиУчетПоРаботникам = Константы.ВедетсяУчетРасчетовПоЗарплатеПоРаботникам.Получить();
	
	СтрокаСвертки = "Подразделение, СтатьяДвиженияДенежныхСредств, СчетУчета, БанковскийСчет";
	Если ВестиУчетПоРаботникам Тогда
		СтрокаСвертки = "ФизическоеЛицо," + СтрокаСвертки;
	КонецЕсли;
	ТаблицаВыплаты.Свернуть(СтрокаСвертки, "СуммаКВыплате");
		
	Для Каждого СтрокаТаблицы Из ТаблицаВыплаты Цикл
		
		Если СтрокаТаблицы.СуммаКВыплате = 0 Тогда
			
			Продолжить;
		КонецЕсли;
				
		Если СтрокаТаблицы.СуммаКВыплате <> 0 Тогда
			
			Проводка = Движения.Хозрасчетный.Добавить();
			
			Проводка.Период       = Реквизиты.Период;
			Проводка.Организация  = Реквизиты.Организация;
			Проводка.Содержание   = "Выплата депонентов";
			
			Проводка.Сумма = СтрокаТаблицы.СуммаКВыплате;
			
			Проводка.СчетДт = СчетРасчетовПоДепонированнымСуммам;
			
			Если ВестиУчетПоРаботникам Тогда			
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", СтрокаТаблицы.ФизическоеЛицо);
			КонецЕсли;
			
			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = СтрокаТаблицы.Подразделение;
			КонецЕсли;
			
			Проводка.СчетКт = СтрокаТаблицы.СчетУчета;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиДвиженияДенежныхСредств", СтрокаТаблицы.СтатьяДвиженияДенежныхСредств);
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.БанковскийСчет) Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "БанковскиеСчета", СтрокаТаблицы.БанковскийСчет);
			КонецЕсли;
			
			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = СтрокаТаблицы.Подразделение;
			КонецЕсли;
			
			Если ОтражатьВНалоговомУчете Тогда
				
				Если СвойстваСчетаДт.НалоговыйУчет Тогда
					Проводка.СуммаНУДт = СтрокаТаблицы.СуммаКВыплате;
				КонецЕсли;
				Если СвойстваСчетаКт.НалоговыйУчет Тогда
					Проводка.СуммаНУКт = СтрокаТаблицы.СуммаКВыплате;
				КонецЕсли;
				
			КонецЕсли;
						
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// РАСЧЕТЫ ПО НАЛОГАМ
//

///////////////////////////////
// Перечисление налогов и взносов

Функция ПодготовитьПараметрыПеречисленияНалоговИВзносовСФОТ(ТаблицаПеречислениеНалогов, ТаблицаРеквизиты)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"                    // <Дата> - период движений - дата документа
	+ "Регистратор,"               // <ДокументСсылка>
	+ "ВидОперации,"               // <ПеречислениеСсылка.ВидыОперацийСписаниеДенежныхСредств>
	+ "ДатаВходящегоДокумента,"    // <Дата> - дата платежного поручения
	+ "НомерВходящегоДокумента,"   // Строка
	+ "Организация";               // <СправочникСсылка.Организации>
	
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.ТаблицаПеречислениеНалогов
	
	СписокОбязательныхКолонок = ""
	+ "НалоговыйПериод,"        // <Дата> - период за который отражена уплата налога
	+ "Период,"                 // <Дата> - период движений - дата документа
	+ "СчетДт,"                 // <ПланСчетовСсылка.Хозрасчетный> - счет учета налогов и взносов с ФОТ
	+ "СубконтоДт1,"            // <ПланВидовХарактеристик.ВидыСубконтоХозрасчетные>
	+ "СубконтоДт2,"            // <ПланВидовХарактеристик.ВидыСубконтоХозрасчетные>     
	+ "СубконтоДт3,"            // <ПланВидовХарактеристик.ВидыСубконтоХозрасчетные>
	+ "ПодразделениеДт,"        // <СправочникСсылка.ПодразделенияОрганизации>
	+ "СуммаРуб";               // <Число,15,2> - сумма налога, взноса
	
	Параметры.Вставить("ТаблицаПеречислениеНалогов", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаПеречислениеНалогов, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияПоНалогамИВзносамСФОТ(ТаблицаПеречислениеНалогов, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыПеречисленияНалоговИВзносовСФОТ(ТаблицаПеречислениеНалогов, ТаблицаРеквизиты);
		
	Если Параметры.ТаблицаПеречислениеНалогов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Если Реквизиты.ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога
		И Реквизиты.ВидОперации <> Перечисления.ВидыОперацийРКО.УплатаНалога Тогда
		Возврат;
	КонецЕсли;
	
	ПеречисленныйНалог = Параметры.ТаблицаПеречислениеНалогов.Итог("СуммаРуб");
	
	Если ПеречисленныйНалог = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьНачислениеЗарплаты = ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты");
	
	Если ИспользоватьНачислениеЗарплаты Тогда
		
		ТаблицаПеречислениеНалогов = Параметры.ТаблицаПеречислениеНалогов.Скопировать();
				
		СчетаУчетаНалоговВзносовСФОТ = Новый Соответствие;
		СчетаУчетаНалоговВзносовСФОТ.Вставить(ПланыСчетов.Хозрасчетный.ПФР_нак,         Перечисления.ВидыОбязательногоСтрахованияСотрудников.ПФРНакопительная);
		СчетаУчетаНалоговВзносовСФОТ.Вставить(ПланыСчетов.Хозрасчетный.ПФР_страх,       Перечисления.ВидыОбязательногоСтрахованияСотрудников.ПФРСтраховая);
		СчетаУчетаНалоговВзносовСФОТ.Вставить(ПланыСчетов.Хозрасчетный.ПФР_доп,         Перечисления.ВидыОбязательногоСтрахованияСотрудников.ДоплатаКПенсииЛетчикам);
		СчетаУчетаНалоговВзносовСФОТ.Вставить(ПланыСчетов.Хозрасчетный.ПФР_доп_шахтеры, Перечисления.ВидыОбязательногоСтрахованияСотрудников.ДоплатаКПенсииШахтерам);
		СчетаУчетаНалоговВзносовСФОТ.Вставить(ПланыСчетов.Хозрасчетный.ПФР_доп_ВредныеУсловияТруда, Перечисления.ВидыОбязательногоСтрахованияСотрудников.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах);
		СчетаУчетаНалоговВзносовСФОТ.Вставить(ПланыСчетов.Хозрасчетный.ПФР_доп_ТяжелыеУсловияТруда, Перечисления.ВидыОбязательногоСтрахованияСотрудников.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах);
		СчетаУчетаНалоговВзносовСФОТ.Вставить(ПланыСчетов.Хозрасчетный.ФСС,             Перечисления.ВидыОбязательногоСтрахованияСотрудников.ФСС);
		СчетаУчетаНалоговВзносовСФОТ.Вставить(ПланыСчетов.Хозрасчетный.ФСС_НСиПЗ,       Перечисления.ВидыОбязательногоСтрахованияСотрудников.ФССНесчастныеСлучаи);
		СчетаУчетаНалоговВзносовСФОТ.Вставить(ПланыСчетов.Хозрасчетный.ФФОМС,           Перечисления.ВидыОбязательногоСтрахованияСотрудников.ФФОМС);
		СчетаУчетаНалоговВзносовСФОТ.Вставить(ПланыСчетов.Хозрасчетный.ТФОМС,           Перечисления.ВидыОбязательногоСтрахованияСотрудников.ТФОМС);
		СчетаУчетаНалоговВзносовСФОТ.Вставить(ПланыСчетов.Хозрасчетный.ПФР_ОПС,         Перечисления.ВидыОбязательногоСтрахованияСотрудников.ПФРПоСуммарномуТарифу);
		
		ТаблицаПеречислениеНалогов.Колонки.Добавить("ВидОбязательногоСтрахованияСотрудников");
		ТаблицаПеречислениеНалогов.Колонки.Добавить("ЭтоСтраховыеВзносы");
		ТаблицаПеречислениеНалогов.Колонки.Добавить("ВидДвижения");
		ТаблицаПеречислениеНалогов.Колонки.Добавить("ПлатежноеПоручениеНомер");
		ТаблицаПеречислениеНалогов.Колонки.Добавить("ПлатежноеПоручениеДата");
		
		ТаблицаПеречислениеНалогов.ЗаполнитьЗначения(Реквизиты.НомерВходящегоДокумента, "ПлатежноеПоручениеНомер");
		ТаблицаПеречислениеНалогов.ЗаполнитьЗначения(Реквизиты.ДатаВходящегоДокумента, "ПлатежноеПоручениеДата");
		
		ТаблицаПеречислениеНалогов.Колонки.СуммаРуб.Имя = "Сумма";
		ТаблицаПеречислениеНалогов.Колонки.ПодразделениеДт.Имя = "Подразделение";
				
		Для Каждого СтрокаТаблицы ИЗ ТаблицаПеречислениеНалогов Цикл
			СтрокаТаблицы.ВидОбязательногоСтрахованияСотрудников = СчетаУчетаНалоговВзносовСФОТ.Получить(ТаблицаПеречислениеНалогов[0].СчетДт);
			СтрокаТаблицы.ЭтоСтраховыеВзносы = Истина;
			СтрокаТаблицы.ВидДвижения = ВидДвиженияНакопления.Расход;
		КонецЦикла;
		
		МассивНазначенийПлатежа = Новый Массив;
		МассивНазначенийПлатежа.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Налог);
		МассивНазначенийПлатежа.Добавить(Перечисления.ВидыПлатежейВГосБюджет.НалогСам);
		МассивНазначенийПлатежа.Добавить(Перечисления.ВидыПлатежейВГосБюджет.НалогАкт);		
				
		Если ТаблицаПеречислениеНалогов[0].СчетДт = ПланыСчетов.Хозрасчетный.НДФЛ Тогда
						
			Если МассивНазначенийПлатежа.Найти(ТаблицаПеречислениеНалогов[0].СубконтоДт1) = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ТаблицаПеречислениеНалогов[0].НалоговыйПериод) Тогда
				Возврат;
			КонецЕсли;
			
			РегистрацияВНалоговомОргане = Неопределено;			
			Если ЗначениеЗаполнено(ТаблицаПеречислениеНалогов[0].СубконтоДт2) Тогда
				РегистрацияВНалоговомОргане = ТаблицаПеречислениеНалогов[0].СубконтоДт2;
			КонецЕсли;
			
			ТаблицаПеречислениеНалогов.Колонки.НалоговыйПериод.Имя = "МесяцНалоговогоПериода";
			// НДФЛ
			УчетНДФЛ.СформироватьПеречисленныйНалог(
				Реквизиты.Регистратор, Движения, Отказ, Реквизиты.Организация, Реквизиты.Период,
				ТаблицаПеречислениеНалогов, , РегистрацияВНалоговомОргане, ?(Год(Реквизиты.Период) > 2014, Истина, Ложь));
			
		ИначеЕсли СчетаУчетаНалоговВзносовСФОТ.Получить(ТаблицаПеречислениеНалогов[0].СчетДт) <> Неопределено Тогда 
			
			МассивНазначенийПлатежа.Добавить(Перечисления.ВидыПлатежейВГосБюджет.НеПринято);
			Если МассивНазначенийПлатежа.Найти(ТаблицаПеречислениеНалогов[0].СубконтоДт1) = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			//Взносы
			УчетСтраховыхВзносов.СформироватьУплатуВзносовВФонд(Движения, Отказ, Реквизиты.Организация, ТаблицаПеречислениеНалогов);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПеречисленныйНалогРегистратораПоФизическимЛицам(Регистратор) Экспорт
	
	Если Год(Регистратор.Дата) > 2014 Тогда
		Возврат УчетНДФЛ.ПеречисленныйНалогРегистратораПоФизическимЛицам(Регистратор);
	Иначе
		ПустаяТаблица = Новый ТаблицаЗначений;
		ПустаяТаблица.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		ПустаяТаблица.Колонки.Добавить("Сумма",          ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		Возврат ПустаяТаблица;
	КонецЕсли;
	
КонецФункции

///////////////////////////////
// Возврат/возмещение налогов и взносов

Функция ПодготовитьПараметрыВозвратаНалоговИВзносовСФОТ(ТаблицаВозвратНалогов, ТаблицаРеквизиты)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"                    // <Дата> - период движений - дата документа
	+ "Регистратор,"               // <ДокументСсылка>
	+ "Организация";               // <СправочникСсылка.Организации>
	
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.ТаблицаПеречислениеНалогов
	
	СписокОбязательныхКолонок = ""
	+ "СчетКт,"                 // <ПланСчетовСсылка.Хозрасчетный> - счет учета налогов и взносов с ФОТ
	+ "СубконтоКт1,"            // <ПланВидовХарактеристик.ВидыСубконтоХозрасчетные>
	+ "СубконтоКт2,"            // <ПланВидовХарактеристик.ВидыСубконтоХозрасчетные>     
	+ "СубконтоКт3,"            // <ПланВидовХарактеристик.ВидыСубконтоХозрасчетные>
	+ "СуммаРуб";               // <Число,15,2> - сумма налога, взноса
	
	Параметры.Вставить("ТаблицаВозвратНалогов", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВозвратНалогов, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияПоВозвратамНалоговИВзносовСФОТ(ТаблицаВозвратНалогов, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыВозвратаНалоговИВзносовСФОТ(ТаблицаВозвратНалогов, ТаблицаРеквизиты);
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Если Параметры.ТаблицаВозвратНалогов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СуммаНалога = Параметры.ТаблицаВозвратНалогов.Итог("СуммаРуб");
	
	Если СуммаНалога = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьНачислениеЗарплаты = ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты");
	
	Если ИспользоватьНачислениеЗарплаты Тогда
		
		ПромежуточнаяТаблица   = Параметры.ТаблицаВозвратНалогов.Скопировать();
		
		ТаблицаВозвратНалогов = Новый ТаблицаЗначений;
		ТаблицаВозвратНалогов.Колонки.Добавить("Период");
		ТаблицаВозвратНалогов.Колонки.Добавить("ВидОбязательногоСтрахованияСотрудников");
		ТаблицаВозвратНалогов.Колонки.Добавить("ЭтоСтраховыеВзносы");
		ТаблицаВозвратНалогов.Колонки.Добавить("Сумма");
				
		// возмещение расходов по соц.страхованию
		СчетаУчетаРасчетовСФСС = Новый Соответствие;		
		СчетаУчетаРасчетовСФСС.Вставить(ПланыСчетов.Хозрасчетный.ФСС,             Перечисления.ВидыОбязательногоСтрахованияСотрудников.ФСС);
		СчетаУчетаРасчетовСФСС.Вставить(ПланыСчетов.Хозрасчетный.ФСС_НСиПЗ,       Перечисления.ВидыОбязательногоСтрахованияСотрудников.ФССНесчастныеСлучаи);
				
		Для Каждого СтрокаТаблицы ИЗ ПромежуточнаяТаблица Цикл			
			ВидОбязательногоСтрахованияСотрудников = СчетаУчетаРасчетовСФСС.Получить(СтрокаТаблицы.СчетКт);
			Если ВидОбязательногоСтрахованияСотрудников <> Неопределено Тогда
				Если (СтрокаТаблицы.СубконтоКт1 = Перечисления.ВидыПлатежейВГосБюджет.ПолученоИзФонда)
					ИЛИ (СтрокаТаблицы.СубконтоКт1 = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию) Тогда
					НоваяСтрока = ТаблицаВозвратНалогов.Добавить();
					НоваяСтрока.Период = Реквизиты.Период;
					НоваяСтрока.ВидОбязательногоСтрахованияСотрудников = ВидОбязательногоСтрахованияСотрудников;
					НоваяСтрока.ЭтоСтраховыеВзносы = Истина;				
					НоваяСтрока.Сумма = СтрокаТаблицы.СуммаРуб;			
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
				
		Если ТаблицаВозвратНалогов.Количество() <> 0 Тогда
			УчетСтраховыхВзносов.СформироватьВозмещениеРасходовПоСоциальномуСтрахованию(Движения, Отказ, Реквизиты.Организация, ТаблицаВозвратНалогов);
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

///////////////////////////////
// Регистрация расчетов по налогам и сборамм документами ВНО, Операция и т.п.

Функция ПодготовитьПараметрыПроведенияОстатки_РасчетыПоНалогамИСборам(
			ТаблицаРасчетыПоНалогамИСборам,
			ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаРасчетыПоНалогамИСборам

	СписокОбязательныхКолонок = ""
	+ "Период,"               // <Дата>
	+ "СчетУчета,"            // <План счетов бухгалтерского учета>
	+ "ВидПлатежаВБюджет,"    // <ПеречислениеСсылка.Виды платежей в бюджет (фонды)>
	+ "Сумма,"                // <Число (15,2)>
	+ "СуммаКт,"              // <Число (15,2)>
	+ "РегистрацияВНалоговомОргане";     // <СправочникСсылка.РегистрацииВНалоговомОргане>

	Параметры.Вставить("ТаблицаРасчетыПоНалогамИСборам",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРасчетыПоНалогамИСборам, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "ПодразделениеОрганизации,"       // <СправочникСсылка.ПодразделенияОрганизации>
	+ "РазделУчета,"                    // <ПеречислениеСсылка.РазделыУчетаДляВводаОстатков>
	+ "ОтражатьВБухгалтерскомУчете,"    // <Булево>
	+ "ОтражатьВНалоговомУчете,"        // <Булево>
	+ "ОтражатьПоСпециальнымРегистрам"; // <Булево>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьОстатки_РасчетыПоНалогамИСборам(ПараметрыПроведения, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если ПараметрыПроведения.Реквизиты[0].РазделУчета <> Перечисления.РазделыУчетаДляВводаОстатков.РасчетыПоНалогамИСборам Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПроведенияОстатки_РасчетыПоНалогамИСборам(
		ПараметрыПроведения.ТаблицаРасчетыПоНалогамИСборам,
		ТаблицаРеквизиты);
		
	Реквизиты = Параметры.Реквизиты[0];
	
	Если НЕ Реквизиты.ОтражатьПоСпециальнымРегистрам Тогда
		Возврат;
	КонецЕсли;

    ПромежуточнаяТаблица = Параметры.ТаблицаРасчетыПоНалогамИСборам;
	
	Если ПромежуточнаяТаблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьНачислениеЗарплаты = ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты");
	
	Если ИспользоватьНачислениеЗарплаты Тогда
				
		// регистрация расчетов с фондами
				
		ТаблицаРасчетовСФондами = Новый ТаблицаЗначений;
		ТаблицаРасчетовСФондами.Колонки.Добавить("Период");
		ТаблицаРасчетовСФондами.Колонки.Добавить("ВидОбязательногоСтрахованияСотрудников");
		ТаблицаРасчетовСФондами.Колонки.Добавить("ЭтоСтраховыеВзносы");
		ТаблицаРасчетовСФондами.Колонки.Добавить("ГодЗадолженностиПоЕСН");
		ТаблицаРасчетовСФондами.Колонки.Добавить("ВидДвижения");
		ТаблицаРасчетовСФондами.Колонки.Добавить("РасчетыПоПособиям");
		ТаблицаРасчетовСФондами.Колонки.Добавить("Сумма");
		
		СчетаУчетаНалоговВзносовСФОТ = Новый Соответствие;
		СчетаУчетаНалоговВзносовСФОТ.Вставить(ПланыСчетов.Хозрасчетный.ПФР_нак,         Перечисления.ВидыОбязательногоСтрахованияСотрудников.ПФРНакопительная);
		СчетаУчетаНалоговВзносовСФОТ.Вставить(ПланыСчетов.Хозрасчетный.ПФР_страх,       Перечисления.ВидыОбязательногоСтрахованияСотрудников.ПФРСтраховая);
		СчетаУчетаНалоговВзносовСФОТ.Вставить(ПланыСчетов.Хозрасчетный.ПФР_доп,         Перечисления.ВидыОбязательногоСтрахованияСотрудников.ДоплатаКПенсииЛетчикам);
		СчетаУчетаНалоговВзносовСФОТ.Вставить(ПланыСчетов.Хозрасчетный.ПФР_доп_шахтеры, Перечисления.ВидыОбязательногоСтрахованияСотрудников.ДоплатаКПенсииШахтерам);
		СчетаУчетаНалоговВзносовСФОТ.Вставить(ПланыСчетов.Хозрасчетный.ФСС,             Перечисления.ВидыОбязательногоСтрахованияСотрудников.ФСС);
		СчетаУчетаНалоговВзносовСФОТ.Вставить(ПланыСчетов.Хозрасчетный.ФСС_НСиПЗ,       Перечисления.ВидыОбязательногоСтрахованияСотрудников.ФССНесчастныеСлучаи);
		СчетаУчетаНалоговВзносовСФОТ.Вставить(ПланыСчетов.Хозрасчетный.ФФОМС,           Перечисления.ВидыОбязательногоСтрахованияСотрудников.ФФОМС);
		СчетаУчетаНалоговВзносовСФОТ.Вставить(ПланыСчетов.Хозрасчетный.ТФОМС,           Перечисления.ВидыОбязательногоСтрахованияСотрудников.ТФОМС);
		СчетаУчетаНалоговВзносовСФОТ.Вставить(ПланыСчетов.Хозрасчетный.ПФР_ОПС,         Перечисления.ВидыОбязательногоСтрахованияСотрудников.ПФРПоСуммарномуТарифу);
		
		СчетаУчетаРасчетовСФСС = Новый Соответствие;		
		СчетаУчетаРасчетовСФСС.Вставить(ПланыСчетов.Хозрасчетный.ФСС,       Перечисления.ВидыОбязательногоСтрахованияСотрудников.ФСС);
		СчетаУчетаРасчетовСФСС.Вставить(ПланыСчетов.Хозрасчетный.ФСС_НСиПЗ, Перечисления.ВидыОбязательногоСтрахованияСотрудников.ФССНесчастныеСлучаи);
		
		ВидыРасчетовПоСредствамФСС = Новый Соответствие;
		ВидыРасчетовПоСредствамФСС.Вставить(Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию, Перечисления.ВидыРасчетовПоСредствамФСС.РасходыПоСтрахованию);
		ВидыРасчетовПоСредствамФСС.Вставить(Перечисления.ВидыПлатежейВГосБюджет.ПолученоИзФонда,      Перечисления.ВидыРасчетовПоСредствамФСС.ПолученоИзФонда);
		ВидыРасчетовПоСредствамФСС.Вставить(Перечисления.ВидыПлатежейВГосБюджет.НеПринято,            Перечисления.ВидыРасчетовПоСредствамФСС.НеПринято);
		
		Для Каждого СтрокаТаблицы ИЗ ПромежуточнаяТаблица Цикл			
			ВидОбязательногоСтрахованияСотрудников = СчетаУчетаНалоговВзносовСФОТ.Получить(СтрокаТаблицы.СчетУчета);
			Если ВидОбязательногоСтрахованияСотрудников <> Неопределено Тогда
				Если (СтрокаТаблицы.ВидПлатежаВБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог)
					ИЛИ (СтрокаТаблицы.ВидПлатежаВБюджет = Перечисления.ВидыПлатежейВГосБюджет.НалогСам)
					ИЛИ (СтрокаТаблицы.ВидПлатежаВБюджет = Перечисления.ВидыПлатежейВГосБюджет.ПолученоИзФонда)
					ИЛИ (СтрокаТаблицы.ВидПлатежаВБюджет = Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию) Тогда
					
					НоваяСтрока = ТаблицаРасчетовСФондами.Добавить();
					НоваяСтрока.Период = СтрокаТаблицы.Период;
					НоваяСтрока.ВидОбязательногоСтрахованияСотрудников = ВидОбязательногоСтрахованияСотрудников;
					НоваяСтрока.ЭтоСтраховыеВзносы = ?(СтрокаТаблицы.Период >= Дата('20100101'),Истина, Ложь);				
					Если НЕ НоваяСтрока.ЭтоСтраховыеВзносы Тогда
						НоваяСтрока.ГодЗадолженностиПоЕСН = Год(СтрокаТаблицы.Период);
					КонецЕсли;					
					Если СтрокаТаблицы.СуммаКт <> 0 Тогда
						НоваяСтрока.Сумма = СтрокаТаблицы.СуммаКт;
						НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
					Иначе
						НоваяСтрока.Сумма = СтрокаТаблицы.Сумма;			
						НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
					КонецЕсли;
					
					Если СчетаУчетаНалоговВзносовСФОТ.Получить(СтрокаТаблицы.СчетУчета) <> Неопределено Тогда
						РасчетыПоПособиям = ВидыРасчетовПоСредствамФСС.Получить(СтрокаТаблицы.ВидПлатежаВБюджет);
						Если РасчетыПоПособиям <> Неопределено Тогда
							НоваяСтрока.РасчетыПоПособиям = РасчетыПоПособиям;
						КонецЕсли;	
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ТаблицаРасчетовСФондами.Количество() <> 0 Тогда
			УчетСтраховыхВзносов.СформироватьРасчетыСФондом(Движения, Отказ, Реквизиты.Организация, ТаблицаРасчетовСФондами);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ ВСПОМОГАТЕЛЬНЫХ ДАННЫХ ДЛЯ ОТРАЖЕНИЯ ЗАРПЛАТЫ В РЕГЛ. УЧЕТЕ

// Процедура дополняет таблицу выплат, полученную из подсистемы учета зарплаты
// колконками, в которых будет храниться необходимая для формирования проводок 
// информация
//
// Параметры:
//	ВыплатаЗарплаты - таблица значений
//
Процедура ПодготовитьТаблицуВыплатыЗарплаты(ВыплатаЗарплаты) Экспорт
	
	ВыплатаЗарплаты.Колонки.Добавить("Подразделение");	
	ВыплатаЗарплаты.Колонки.Добавить("СтатьяДвиженияДенежныхСредств");
	ВыплатаЗарплаты.Колонки.Добавить("БанковскийСчет");
	ВыплатаЗарплаты.Колонки.Добавить("СчетУчета");
	ВыплатаЗарплаты.Колонки.Добавить("СчетУчетаКомпенсации");
	ВыплатаЗарплаты.Колонки.Добавить("СубконтоУчетаКомпенсации1");
	ВыплатаЗарплаты.Колонки.Добавить("СубконтоУчетаКомпенсации2");
	ВыплатаЗарплаты.Колонки.Добавить("СубконтоУчетаКомпенсации3");
	ВыплатаЗарплаты.Колонки.Добавить("ПодразделениеУчетаКомпенсации");	
	ВыплатаЗарплаты.Колонки.Добавить("ИспользуетсяЭлектронныйОбмен", Новый ОписаниеТипов("Булево"));	
	
КонецПроцедуры

// Функция формирует таблицу выплаты зарплаты для передачи в подсистему УСН
//
Функция ПолучитьТаблицуВыплатыЗарплатыДляУСН(ВыплатаЗарплаты) Экспорт
	
	ВедетсяУчетРасчетовПоЗарплатеСводно   = Константы.ВедетсяУчетРасчетовПоЗарплатеСводно.Получить();
	УчетЗарплатыИКадровВоВнешнейПрограмме = Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.Получить();
	

	ТаблицаВыплатаЗарплаты = Новый ТаблицаЗначений;
	ТаблицаВыплатаЗарплаты.Колонки.Добавить("Работник");	
	ТаблицаВыплатаЗарплаты.Колонки.Добавить("Сделка");
	ТаблицаВыплатаЗарплаты.Колонки.Добавить("КурсВзаиморасчетов");
	ТаблицаВыплатаЗарплаты.Колонки.Добавить("КратностьВзаиморасчетов");
	ТаблицаВыплатаЗарплаты.Колонки.Добавить("Сумма");
	
	Если ВедетсяУчетРасчетовПоЗарплатеСводно И УчетЗарплатыИКадровВоВнешнейПрограмме ИЛИ ВыплатаЗарплаты = Неопределено Тогда
		Возврат ТаблицаВыплатаЗарплаты;
	КонецЕсли;
		
	Для каждого СтрокаТаблицы Из ВыплатаЗарплаты Цикл
		
		НоваяСтрока = ТаблицаВыплатаЗарплаты.Добавить();
		НоваяСтрока.Работник                = СтрокаТаблицы.ФизическоеЛицо;
		НоваяСтрока.Сделка                  = Неопределено;
		НоваяСтрока.КурсВзаиморасчетов      = 1;
		НоваяСтрока.КратностьВзаиморасчетов = 1;
		НоваяСтрока.Сумма                   = СтрокаТаблицы.СуммаКВыплате;
		
	КонецЦикла;
	
	ТаблицаВыплатаЗарплаты.Свернуть("Работник, Сделка, КурсВзаиморасчетов, КратностьВзаиморасчетов", "Сумма");
	
	Возврат ТаблицаВыплатаЗарплаты;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ ДАННЫХ О ДОКУМЕНТАХ ПОДСИСТЕМЫ ЗАРПЛАТА

Функция ПолучитьДанныеВедомостейДляОплатыТаблично(Регистратор = Неопределено, Ведомости, ФизическиеЛица = Неопределено, Оплаченные = Ложь) Экспорт
	
	ТаблицаВедомостей = ВзаиморасчетыССотрудниками.ДанныеВедомостейДляОплатыДокументом(Регистратор, Ведомости, ФизическиеЛица, Оплаченные);
	
	УчитыватьКомпенсациюЗаЗадержкуЗарплаты = Ложь;
	
	Если Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.Получить() Тогда
		Если ЗначениеЗаполнено(Регистратор) Тогда
			Организация = Регистратор.Организация;
		Иначе
			Организация = Ведомости[0].Организация;
		КонецЕсли;
		УчитыватьКомпенсациюЗаЗадержкуЗарплаты = ПолучитьФункциональнуюОпцию("ИспользоватьФорматОбменаЗУП25", Новый Структура("Организация", Организация));
	КонецЕсли;
	
	Если НЕ УчитыватьКомпенсациюЗаЗадержкуЗарплаты Тогда
		Для Каждого СтрокаТаблицы ИЗ ТаблицаВедомостей Цикл
			СтрокаТаблицы.СуммаКВыплате = СтрокаТаблицы.СуммаКВыплате + СтрокаТаблицы.КомпенсацияЗаЗадержкуЗарплаты;
			СтрокаТаблицы.КомпенсацияЗаЗадержкуЗарплаты = 0;
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаВедомостей.Свернуть("Ведомость, ФизическоеЛицо", "СуммаКВыплате, КомпенсацияЗаЗадержкуЗарплаты");
	
	Возврат ТаблицаВедомостей;
	
КонецФункции

Функция НевыплаченныеДепоненты(Регистратор, Организация, ДатаВыплаты, ФизическиеЛица = Неопределено, ДепонированоДо = Неопределено) Экспорт

	Возврат УчетДепонированнойЗарплаты.ОстатокДепонированнойЗарплаты(Регистратор, Организация, ДатаВыплаты, ФизическиеЛица, ДепонированоДо);		                
	
КонецФункции

Функция ВыплачиватьКомпенсациюЗаЗадержкуЗарплаты(Организация, ДокументВыплаты, Ведомости, ФизическоеЛицо = Неопределено) Экспорт
	
	Если Не Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.Получить() Тогда
		// В 1С:Бухгалтерии компенсация не может быть рассчитана
		Возврат Ложь;
	КонецЕсли;
	
	ИспользуетсяЗУП25 = ПолучитьФункциональнуюОпцию("ИспользоватьФорматОбменаЗУП25", Новый Структура("Организация", Организация));
	Если Не ИспользуетсяЗУП25 Тогда
		// Расчет компенсации выполняется в ЗУП 2.5
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеВедомостей = ПолучитьДанныеВедомостейДляОплатыТаблично(ДокументВыплаты, Ведомости, ФизическоеЛицо, Неопределено);
		
	Возврат ДанныеВедомостей.Итог("КомпенсацияЗаЗадержкуЗарплаты") <> 0;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ЕСЛИ УЧЕТ ВЕДЕТСЯ ВО ВНЕШНЕЙ ПРОГРАММЕ

// Формирует движения по отражению зарплаты в бух. учете
Процедура СформироватьДвиженияОтраженияЗарплаты(ТаблицаОтраженияВУчете, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	Параметры = ПодготовитьПараметрыДвиженийОтраженияЗарплаты(ТаблицаОтраженияВУчете, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	Если Параметры.ТаблицаОтраженияВУчете.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаПБУ18          = УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);
	
	ТаблицаОтраженияВУчете = Параметры.ТаблицаОтраженияВУчете;

	Для Каждого СтрокаТаблицы из ТаблицаОтраженияВУчете Цикл
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Организация	= Реквизиты.Организация;
		Проводка.Период			= Реквизиты.Период;
		

		Проводка.СчетДт	= СтрокаТаблицы.СчетДт;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоДт1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоДт2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.СубконтоДт3);
		Если СтрокаТаблицы.УчетПоПодразделениямДт Тогда
			Проводка.ПодразделениеДт = СтрокаТаблицы.ПодразделениеДт;
		КонецЕсли;
		
		Проводка.СчетКт	= СтрокаТаблицы.СчетКт;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.СубконтоКт1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.СубконтоКт2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.СубконтоКт3);
		
		Если СтрокаТаблицы.УчетПоПодразделениямКт Тогда
			Проводка.ПодразделениеКт = СтрокаТаблицы.ПодразделениеКт;
		КонецЕсли;
		
		Проводка.Сумма = СтрокаТаблицы.Сумма;
		
		Если ОтражатьВНалоговомУчете Тогда
			НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СтрокаТаблицы.СуммаНУДт, СтрокаТаблицы.СуммаНУКт, СтрокаТаблицы.СуммаПРДт, СтрокаТаблицы.СуммаПРКт, СтрокаТаблицы.СуммаВРДт, СтрокаТаблицы.СуммаВРКт , Проводка, ПоддержкаПБУ18);
		КонецЕсли;
		
		Проводка.Содержание = СтрокаТаблицы.Содержание;
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыДвиженийОтраженияЗарплаты(ТаблицаОтраженияВУчете, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"			// <Дата> - счет по дебету проводки (счет учета денежных средств)
	+ "Организация"		// <СправочникСсылка.Организации> - организация документа
	;
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	
	// Подготовка таблицы по заработной плате:
	СписокОбязательныхКолонок = ""
	+ "СчетДт,"						// <ПланСчетовСсылка.Хозрасчетный>
	+ "ПодразделениеДт,"			// <Ссылка на справочник подразделений>
	+ "УчетПоПодразделениямДт,"		// Булево - признак учета по подразделениям счета Дт
	+ "СубконтоДт1,"				// <> - значение аналитики 
	+ "СубконтоДт2,"				// <> - значение аналитики 
	+ "СубконтоДт3,"				// <> - значение аналитики
	+ "СчетКт,"						// <ПланСчетовСсылка.Хозрасчетный>
	+ "УчетПоПодразделениямКт,"		// Булево - признак учета по подразделениям счета Кт
	+ "ПодразделениеКт,"			// <Ссылка на справочник подразделений>
	+ "СубконтоКт1,"				// <> - значение аналитики 
	+ "СубконтоКт2,"				// <> - значение аналитики 
	+ "СубконтоКт3,"				// <> - значение аналитики	
	+ "Содержание,"					// Строка - содержание проводки
	+ "Сумма,"						// <Число(15,2)>
	+ "СуммаНУДт,"					// <Число(15,2)>
	+ "СуммаПРДт,"					// <Число(15,2)>
	+ "СуммаВРДт,"					// <Число(15,2)>
	+ "СуммаНУКт,"					// <Число(15,2)>
	+ "СуммаПРКт,"					// <Число(15,2)>
	+ "СуммаВРКт"					// <Число(15,2)>
	;	
	
	Параметры.Вставить("ТаблицаОтраженияВУчете", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОтраженияВУчете, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// Формирует движения по отражению зарплаты для ИП
Процедура СформироватьДвиженияОтраженияЗарплатыИП(ТаблицаОтраженияЗарплатыИП, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыДвиженийОтраженияЗарплатыИП(ТаблицаОтраженияЗарплатыИП, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	Если Параметры.ТаблицаОтраженияЗарплатыИП.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	ВедетсяУчетРасчетовПоЗарплатеСводно   = Константы.ВедетсяУчетРасчетовПоЗарплатеСводно.Получить();
	УчетЗарплатыИКадровВоВнешнейПрограмме = Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.Получить();
	
	ТаблицаОтраженияЗарплатыИП = Параметры.ТаблицаОтраженияЗарплатыИП;
	
	Если  ВедетсяУчетРасчетовПоЗарплатеСводно И УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
		СтрокиКУдалению = Новый Массив();
		Для Каждого СтрокаТаблицы ИЗ ТаблицаОтраженияЗарплатыИП	Цикл		
			Если СтрокаТаблицы.КорСчет = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда Тогда
				СтрокиКУдалению.Добавить(СтрокаТаблицы);				
			КонецЕсли;
		КонецЦикла;
		
		Если СтрокиКУдалению.Количество() > 0 Тогда
			Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
				ТаблицаОтраженияЗарплатыИП.Удалить(СтрокаКУдалению);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Реквизиты.Колонки.Найти("Удержания") = Неопределено Тогда
		Параметры.Реквизиты.Колонки.Добавить("Удержания");
		Параметры.Реквизиты.ЗаполнитьЗначения(Ложь, "Удержания");
	КонецЕсли;
	
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияРасходовНаОплатуТруда(
		ТаблицаОтраженияЗарплатыИП,
		Параметры.Реквизиты, Движения, Отказ);

КонецПроцедуры

Процедура ЗаполнитьНедостающиеРеквизитыЗагруженныхОбъектов(Элемент) Экспорт
	
	Если ТипЗнч(Элемент) = Тип("СправочникСсылка.СтатьиЗатрат")
		ИЛИ ТипЗнч(Элемент) = Тип("СправочникОбъект.СтатьиЗатрат") Тогда
		Если НЕ ЗначениеЗаполнено(Элемент.ВидДеятельностиДляНалоговогоУчетаЗатрат) Тогда
			Если ТипЗнч(Элемент) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
				Объект = Элемент.ПолучитьОбъект();
			Иначе
				Объект = Элемент;
			КонецЕсли;
			
			Если Объект.ЭтоГруппа Тогда
				Возврат;
			КонецЕсли;
			
			Объект.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения;
			Объект.ОбменДанными.Загрузка = Истина;
			Объект.Записать();
			Возврат;			
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Элемент) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы")
		ИЛИ ТипЗнч(Элемент) = Тип("СправочникОбъект.ПрочиеДоходыИРасходы") Тогда
		Если НЕ ЗначениеЗаполнено(Элемент.ВидДеятельностиДляНалоговогоУчетаЗатрат) Тогда
			Если ТипЗнч(Элемент) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
				Объект = Элемент.ПолучитьОбъект();
			Иначе
				Объект = Элемент;
			КонецЕсли;
			
			Если Объект.ЭтоГруппа Тогда
				Возврат;
			КонецЕсли;
						
			Объект.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения;
			Объект.ОбменДанными.Загрузка = Истина;
			Объект.Записать();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// УСТАНОВКА И ПОЛУЧЕНИЕ ОТДЕЛЬНЫХ НАСТРОЕК УЧЕТА ЗАРПЛАТЫ

// Обработчик подписки на событие ПроверитьНеобходимостьИспользованияПодсистемыЗарплатаИКадры.
// Вызывается при записи элемента справочника "Организации".
//
Процедура ПроверитьНеобходимостьИспользованияПодсистемыЗарплатаИКадры(Источник, Отказ) Экспорт
	
	Если Источник.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо 
		ИЛИ ИПИспользуетТрудНаемныхРаботников(Источник) Тогда
		Если НЕ ИспользуетсяПодсистемаУчетаЗарплатыИКадров() Тогда
			ВключитьПодсистемуУчетаЗарплатыИКадров();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ИспользуетсяПодсистемаУчетаЗарплатыИКадров() Экспорт
	
	Если Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.Получить()
		ИЛИ Константы.УчетЗарплатыИКадровСредствамиБухгалтерии.Получить() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
		
КонецФункции

// Отключается подсистема учета зарплаты и кадров при первом запуске
//
Процедура ОтключитьПодсистемуУчетаЗарплатыИКадров() Экспорт
		
	УстановитьПривилегированныйРежим(Истина);
	
	// Отключение подсистемы	
	Константы.ОтображатьПодсистемуСотрудникиИЗарплата82.Установить(Ложь);
	Константы.ОтображатьПодсистемуЗарплатаИКадры.Установить(Ложь);
		
	МенеджерЗначенияКонстанты = Константы.УчетЗарплатыИКадровСредствамиБухгалтерии.СоздатьМенеджерЗначения();
	МенеджерЗначенияКонстанты.Значение = Ложь;
	МенеджерЗначенияКонстанты.ОбменДанными.Загрузка = Истина;
	МенеджерЗначенияКонстанты.Записать();
	
	МенеджерЗначенияКонстанты = Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.СоздатьМенеджерЗначения();
	МенеджерЗначенияКонстанты.Значение = Ложь;
	МенеджерЗначенияКонстанты.ОбменДанными.Загрузка = Истина;
	МенеджерЗначенияКонстанты.Записать();
	
	Константы.ИспользоватьНачислениеЗарплаты.Установить(Ложь);
	Константы.ИспользоватьКадровыйУчет.Установить(Ложь);	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	Иначе
		Выборка = Результат.Выбрать();
	КонецЕсли;
	
	ОтражениеВРегламентированномУчетеНастройкиОрганизаций = РегистрыСведений.ОтражениеВРегламентированномУчетеНастройкиОрганизаций.СоздатьМенеджерЗаписи();
	УчетнаяПолитикаПоНДФЛ  = РегистрыСведений.УчетнаяПолитикаПоНДФЛ.СоздатьМенеджерЗаписи();
	
	НастройкиУчетаЗарплаты  = РегистрыСведений.НастройкиУчетаЗарплаты.СоздатьМенеджерЗаписи();
	
	Пока Выборка.Следующий() Цикл
		ОтражениеВРегламентированномУчетеНастройкиОрганизаций.Организация = Выборка.Организация;
		ОтражениеВРегламентированномУчетеНастройкиОрганизаций.Прочитать();
		ОтражениеВРегламентированномУчетеНастройкиОрганизаций.Организация = Выборка.Организация;
		ОтражениеВРегламентированномУчетеНастройкиОрганизаций.ФормироватьПроводкиВКонцеПериода = Ложь;
		ОтражениеВРегламентированномУчетеНастройкиОрганизаций.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ВключитьПодсистемуУчетаЗарплатыИКадров() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Константы.ОтображатьПодсистемуСотрудникиИЗарплата82.Установить(Константы.ИнтерфейсВерсии82.Получить());
	Константы.ОтображатьПодсистемуЗарплатаИКадры.Установить(Константы.ИнтерфейсТакси.Получить());
	
	Константы.УчетЗарплатыИКадровСредствамиБухгалтерии.Установить(Истина);
	Константы.ИспользоватьКадровыйУчет.Установить(Истина);
	УстановитьНастройкиУчетаЗарплаты(Ложь);
	
	Справочники.ПрочиеДоходыИРасходы.СоздатьУстановитьПредопределенныеЭлементыДляУчетаЗарплаты();
	
КонецПроцедуры

// Обработчик обновления
// Определеляет необходимость использования подсистемы учета зарплаты и кадров
// Если подсистема не требуется - она отключается
//
Процедура НастроитьПодсистемуЗарплатаИКадры() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|	И ВЫБОР
	|			КОГДА Организации.РегистрационныйНомерПФР = """"
	|					И Организации.КодОрганаПФР = """"
	|					И Организации.РегистрационныйНомерТФОМС = """"
	|					И Организации.РегистрационныйНомерФСС = """"
	|					И Организации.КодПодчиненностиФСС = """"
	|					И (ВЫРАЗИТЬ(Организации.НаименованиеТерриториальногоОрганаФСС КАК СТРОКА(1))) = """"
	|					И (ВЫРАЗИТЬ(Организации.НаименованиеТерриториальногоОрганаПФР КАК СТРОКА(1))) = """"
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Хозрасчетный.Организация
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Хозрасчетный.Организация
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда)";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ОтключитьПодсистемуУчетаЗарплатыИКадров();
	Иначе
		Константы.ОтображатьПодсистемуСотрудникиИЗарплата82.Установить(Константы.ИнтерфейсВерсии82.Получить());
		Константы.ОтображатьПодсистемуЗарплатаИКадры.Установить(Константы.ИнтерфейсТакси.Получить());
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьНастройкиУчетаЗарплаты(ВестиУчетЗарплатыИКадровВоВнешнейПрограмме) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Константы.ИспользоватьНачислениеЗарплаты.Установить(НЕ ВестиУчетЗарплатыИКадровВоВнешнейПрограмме);
	Если ВестиУчетЗарплатыИКадровВоВнешнейПрограмме Тогда
		Константы.ИспользоватьКадровыйУчет.Установить(Ложь);
		Константы.РасчетЗарплатыДляНебольшихОрганизаций.Установить(Ложь);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	Иначе
		Выборка = Результат.Выбрать();
	КонецЕсли;
	
	ОтражениеВРегламентированномУчетеНастройкиОрганизаций = РегистрыСведений.ОтражениеВРегламентированномУчетеНастройкиОрганизаций.СоздатьМенеджерЗаписи();
	УчетнаяПолитикаПоНДФЛ = РегистрыСведений.УчетнаяПолитикаПоНДФЛ.СоздатьМенеджерЗаписи();
	
	НастройкиУчетаЗарплаты         = РегистрыСведений.НастройкиУчетаЗарплаты.СоздатьМенеджерЗаписи();
	НастройкиЗарплатаКадры         = РегистрыСведений.НастройкиЗарплатаКадры.СоздатьМенеджерЗаписи();
	НастройкиУчетаСтраховыхВзносов = РегистрыСведений.НастройкиУчетаСтраховыхВзносов.СоздатьМенеджерЗаписи();
	
	Пока Выборка.Следующий() Цикл
		
		ОтражениеВРегламентированномУчетеНастройкиОрганизаций.Организация = Выборка.Организация;
		ОтражениеВРегламентированномУчетеНастройкиОрганизаций.Прочитать();
		ОтражениеВРегламентированномУчетеНастройкиОрганизаций.Организация = Выборка.Организация;
		ОтражениеВРегламентированномУчетеНастройкиОрганизаций.ФормироватьПроводкиВКонцеПериода = ВестиУчетЗарплатыИКадровВоВнешнейПрограмме;
		ОтражениеВРегламентированномУчетеНастройкиОрганизаций.Записать();
		
		Если НЕ ВестиУчетЗарплатыИКадровВоВнешнейПрограмме Тогда
			
			НастройкиУчетаЗарплаты.Организация = Выборка.Организация;
			НастройкиУчетаЗарплаты.Прочитать();
			НастройкиУчетаЗарплаты.Организация = Выборка.Организация;
			НастройкиУчетаЗарплаты.ИспользоватьФорматОбменаЗУП25 = Ложь;
			НастройкиУчетаЗарплаты.Записать();
			
			Если ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Выборка.Организация) = Выборка.Организация Тогда
				УчетнаяПолитикаПоНДФЛ.ГоловнаяОрганизация = Выборка.Организация;
				УчетнаяПолитикаПоНДФЛ.Прочитать();
				УчетнаяПолитикаПоНДФЛ.ГоловнаяОрганизация = Выборка.Организация;
				УчетнаяПолитикаПоНДФЛ.ОсобенностиИсчисленияНДФЛ = Перечисления.ОсобенностиИсчисленияНДФЛ.СтандартныеВычетыНарастающимИтогом;
				УчетнаяПолитикаПоНДФЛ.Записать();
			КонецЕсли;
			
		Иначе
			НастройкиУчетаСтраховыхВзносов.Организация = Выборка.Организация;
			НастройкиУчетаСтраховыхВзносов.Прочитать();
			НастройкиУчетаСтраховыхВзносов.Организация                                        = Выборка.Организация;
			НастройкиУчетаСтраховыхВзносов.ИспользуетсяТрудФармацевтов                        = Ложь;
			НастройкиУчетаСтраховыхВзносов.ИспользуетсяТрудЧленовЛетныхЭкипажей               = Ложь;
			НастройкиУчетаСтраховыхВзносов.ИспользуетсяТрудЧленовЭкипажейМорскихСудов         = Ложь;
			НастройкиУчетаСтраховыхВзносов.ИспользуетсяТрудШахтеров                           = Ложь;
			НастройкиУчетаСтраховыхВзносов.ИспользуютсяРаботыСДосрочнойПенсией                = Ложь;
			НастройкиУчетаСтраховыхВзносов.ПрименяютсяРезультатыСпециальнойОценкиУсловийТруда = Ложь;
			НастройкиУчетаСтраховыхВзносов.Записать();
			
			НастройкиЗарплатаКадры.Организация = Выборка.Организация;
			НастройкиЗарплатаКадры.Прочитать();
			НастройкиЗарплатаКадры.Организация                                 = Выборка.Организация;
			НастройкиЗарплатаКадры.ПрименятьСевернуюНадбавку                   = Ложь;
			НастройкиЗарплатаКадры.ПрименятьРайонныйКоэффициент                = Ложь;
			НастройкиЗарплатаКадры.ПрименятьСевернуюНадбавкуВПодразделениях    = Ложь;
			НастройкиЗарплатаКадры.ПрименятьРайонныйКоэффициентВПодразделениях = Ложь;
			НастройкиЗарплатаКадры.Записать();
			
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьПараметрыУчетаЗарплаты(Организация) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.НастройкиУчетаЗарплаты.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		
		Запись = НаборЗаписей.Добавить();
		Запись.Организация = Организация;
				
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.БухучетЗарплатыОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Наименование", "Отражение начислений по умолчанию");
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СпособыОтраженияЗарплатыВБухУчете.Ссылка
		|ИЗ
		|	Справочник.СпособыОтраженияЗарплатыВБухУчете КАК СпособыОтраженияЗарплатыВБухУчете
		|ГДЕ
		|	СпособыОтраженияЗарплатыВБухУчете.Наименование = &Наименование";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Количество() <> 0 Тогда
			Выборка.Следующий();
			СпособОтраженияЗарплатыВБухучете = Выборка.Ссылка;
		Иначе
			НовыйСпособОтраженияЗарплатыВБухучете = Справочники.СпособыОтраженияЗарплатыВБухУчете.СоздатьЭлемент();
			НовыйСпособОтраженияЗарплатыВБухучете.Наименование = "Отражение начислений по умолчанию";
			НовыйСпособОтраженияЗарплатыВБухучете.Записать();
			
			СтатьяЗатратОплатаТруда 	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатьиЗатрат.ОплатаТруда");
			СтатьяЗатратОплатаТрудаЕНВД = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатьиЗатрат.ОплатаТрудаЕНВД");
			
			СпособОтраженияЗарплатыВБухучете = НовыйСпособОтраженияЗарплатыВБухучете.Ссылка;
			
			МенеджерЗаписи = РегистрыСведений.ПорядокОтраженияЗарплатыВБухУчете.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ЕНВД                             = Ложь;
			МенеджерЗаписи.СпособОтраженияЗарплатыВБухУчете = СпособОтраженияЗарплатыВБухучете;
			МенеджерЗаписи.Прочитать();		
			МенеджерЗаписи.СпособОтраженияЗарплатыВБухУчете = СпособОтраженияЗарплатыВБухучете;
			МенеджерЗаписи.ЕНВД                             = Ложь;
			МенеджерЗаписи.Счет                             = ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы;
			МенеджерЗаписи.Субконто1                        = СтатьяЗатратОплатаТруда;
			МенеджерЗаписи.ОтражениеВУСН                    = Перечисления.ОтражениеВУСН.Принимаются;
			МенеджерЗаписи.Записать();
			
			МенеджерЗаписи = РегистрыСведений.ПорядокОтраженияЗарплатыВБухУчете.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ЕНВД                             = Истина;
			МенеджерЗаписи.СпособОтраженияЗарплатыВБухУчете = СпособОтраженияЗарплатыВБухучете;
			МенеджерЗаписи.Прочитать();		
			МенеджерЗаписи.СпособОтраженияЗарплатыВБухУчете = СпособОтраженияЗарплатыВБухучете;
			МенеджерЗаписи.ЕНВД                             = Истина;
			МенеджерЗаписи.Счет                             = ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы;
			МенеджерЗаписи.Субконто1                        = СтатьяЗатратОплатаТрудаЕНВД;
			МенеджерЗаписи.ОтражениеВУСН                    = Перечисления.ОтражениеВУСН.НеПринимаются;
			МенеджерЗаписи.Записать();
			
		КонецЕсли;	
		
		Запись = НаборЗаписей.Добавить();
		Запись.Организация = Организация;
		Запись.Период = НачалоГода(ТекущаяДатаСеанса());
		Запись.СпособОтраженияЗарплатыВБухучете = СпособОтраженияЗарплатыВБухучете;
		Запись.ОтношениеКЕНВД = Перечисления.ОтношениеКЕНВДЗатратНаЗарплату.НеЕНВД;
		НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Организация) = Организация Тогда
		НаборЗаписей = РегистрыСведений.УчетнаяПолитикаПоНДФЛ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ГоловнаяОрганизация.Установить(Организация);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			
			Запись = НаборЗаписей.Добавить();
			Запись.ГоловнаяОрганизация = Организация;
			Запись.ОсобенностиИсчисленияНДФЛ = Перечисления.ОсобенностиИсчисленияНДФЛ.СтандартныеВычетыНарастающимИтогом;
			
			НаборЗаписей.Записать();
			
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);	
	
КонецПроцедуры

Функция ВедетсяКадровыйУчет() Экспорт
	
	Возврат Константы.ИспользоватьКадровыйУчет.Получить();
		
КонецФункции

Процедура УстановитьНастройкиКадровогоУчета(КадровыйУчет = Неопределено, УчетЗарплатыИКадровСредствамиБухгалтерии = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если УчетЗарплатыИКадровСредствамиБухгалтерии = Неопределено Тогда
		УчетЗарплатыИКадровСредствамиБухгалтерии = Константы.УчетЗарплатыИКадровСредствамиБухгалтерии.Получить();
	КонецЕсли;
	
	Если УчетЗарплатыИКадровСредствамиБухгалтерии Тогда
		Константы.ИспользоватьКадровыйУчет.Установить(КадровыйУчет);
	Иначе
		Константы.ИспользоватьКадровыйУчет.Установить(Ложь);
	КонецЕсли;
		
КонецПроцедуры

Функция ИспользуетсяОбменСЗУП30(Организация) Экспорт
	
	//*********************************
	// Обслуживание обмена с ЗУП 3.0
	//*********************************
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОбменЗарплата3Бухгалтерия3ПоВсемОрганизациямЗарплатаКадрыБазовая")
		ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьОбменЗарплата3Бухгалтерия3ПоОрганизацииЗарплатаКадрыБазовая", Новый Структура("Организация", Организация)) Тогда
		Если  ПолучитьФункциональнуюОпцию("ВедетсяУчетРасчетовПоЗарплатеСводно") Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
		
КонецФункции

Функция РегистрацияВНалоговомОргане(СтруктурнаяЕдиница) Экспорт
	
	ЗарплатаКадры.РегистрацияВНалоговомОргане(СтруктурнаяЕдиница);
	
КонецФункции

Процедура ПроверитьВозможностьИспользованияОбменаЗарплата3Бухгалтерия3ПередЗаписью(Источник, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Источник.Ссылка <> ПланыОбмена.ОбменЗарплата3Бухгалтерия3.ЭтотУзел() Тогда
		Если Константы.УчетЗарплатыИКадровСредствамиБухгалтерии.Получить() Тогда			
			ТекстСообщения = НСтр("ru = 'В настройках параметров учета установлен учет зарплаты во внешней программе.'");			
			Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.Установить(Истина);
			Константы.ИспользоватьНачислениеЗарплаты.Установить(НЕ Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.Получить());
			Константы.УчетЗарплатыИКадровСредствамиБухгалтерии.Установить(НЕ Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.Получить());
			УстановитьНастройкиУчетаЗарплаты(Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.Получить());
			УстановитьНастройкиКадровогоУчета(Ложь);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция РегистрационныйНомерПФР(Организация, ДатаСведений) Экспорт
	
	Запрос = Новый Запрос;
	
	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	НоваяСтрока = ИзмеренияДаты.Добавить();
	НоваяСтрока.Организация = Организация;
	НоваяСтрока.Период = ?(ДатаСведений = Неопределено, ТекущаяДатаСеанса(), ДатаСведений);
	
	Запрос.УстановитьПараметр("ВТИзмеренияДатыПараметр", ИзмеренияДаты);	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИзмеренияДаты.Период,
	|	ИзмеренияДаты.Организация,
	|	ИзмеренияДаты.Период КАК Период1
	|ПОМЕСТИТЬ ВТИзмеренияДаты
	|ИЗ
	|	&ВТИзмеренияДатыПараметр КАК ИзмеренияДаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИзмеренияДаты.Период КАК ЗаданныйПериод,
	|	ИзмеренияДаты.Организация КАК Организация,
	|	МАКСИМУМ(РегистрСведений.Период) КАК Период
	|ПОМЕСТИТЬ ВТМаксимальныеПериодыИсторияРегистрацийВОрганеПФР
	|{ВЫБРАТЬ
	|	ЗаданныйПериод,
	|	Организация}
	|ИЗ
	|	ВТИзмеренияДаты КАК ИзмеренияДаты
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияРегистрацийВОрганеПФР КАК РегистрСведений
	|		ПО (РегистрСведений.Период <= ИзмеренияДаты.Период
	|				ИЛИ ИзмеренияДаты.Период = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	|			И (РегистрСведений.Организация = ИзмеренияДаты.Организация)}
	|{ГДЕ
	|	РегистрСведений.Организация.*}
	|
	|СГРУППИРОВАТЬ ПО
	|	ИзмеренияДаты.Период,
	|	ИзмеренияДаты.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МаксимальныеПериоды.ЗаданныйПериод КАК Период,
	|	РегистрСведений.Период КАК ПериодЗаписи,
	|	МаксимальныеПериоды.Организация,
	|	РегистрСведений.РегистрационныйНомерПФР КАК РегистрационныйНомерПФР
	|ПОМЕСТИТЬ ВТИсторияРегистрацийВОрганеПФРСрезПоследних
	|{ВЫБРАТЬ
	|	Период,
	|	ПериодЗаписи,
	|	Организация,
	|	РегистрационныйНомерПФР}
	|ИЗ
	|	ВТМаксимальныеПериодыИсторияРегистрацийВОрганеПФР КАК МаксимальныеПериоды
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияРегистрацийВОрганеПФР КАК РегистрСведений
	|		ПО (РегистрСведений.Период = МаксимальныеПериоды.Период)
	|			И (РегистрСведений.Организация = МаксимальныеПериоды.Организация)}
	|ГДЕ
	|	НЕ РегистрСведений.Период ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсторияРегистрацийВОрганеПФР.РегистрационныйНомерПФР КАК РегистрационныйНомерПФР
	|ИЗ
	|	ВТИсторияРегистрацийВОрганеПФРСрезПоследних КАК ИсторияРегистрацийВОрганеПФР";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат "";
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.РегистрационныйНомерПФР;
	
	
КонецФункции

Функция ВедетсяУчетРезервовОтпусков(Организация, ДатаСведений) Экспорт
	
	ВедетсяУчетРезервовОтпусков = Ложь;
	
	Если ИспользуетсяПодсистемаУчетаЗарплатыИКадров() Тогда
		НастройкиРезервовОтпусков = РезервОтпусков.НастройкиРезервовОтпусков(Организация, ДатаСведений);
		ВедетсяУчетРезервовОтпусков = НастройкиРезервовОтпусков.ФормироватьРезервОтпусковБУ 
		ИЛИ НастройкиРезервовОтпусков.ФормироватьРезервОтпусковНУ;
	КонецЕсли;
	
	Возврат ВедетсяУчетРезервовОтпусков;
	
КонецФункции

Функция РасчетЗарплатыДляНебольшихОрганизаций() Экспорт
	
	РасширеннаяЗарплата = Ложь;
	Если ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии") Тогда
		Если ПолучитьФункциональнуюОпцию("РасчетЗарплатыДляНебольшихОрганизаций") Тогда
			РасширеннаяЗарплата = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РасширеннаяЗарплата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ КАДРОВЫХ ДАННЫХ

Функция ПолучитьФизическоеЛицо(Объект) Экспорт
	
	ТипОбъекта = ТипЗнч(Объект);
	Если ТипОбъекта = Тип("СправочникСсылка.ФизическиеЛица") или ТипОбъекта = Тип("СправочникОбъект.ФизическиеЛица") Тогда
		ФизическоеЛицо = Объект;
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Сотрудники") или ТипОбъекта = Тип("СправочникОбъект.Сотрудники") Тогда
		ФизическоеЛицо = Объект.ФизическоеЛицо;
	Иначе
		ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ФизическоеЛицо;
	
КонецФункции
	
Функция ДанныеФизическихЛиц(Организация = Неопределено, ФизическиеЛица, ДатаСреза, ФИОКратко = Истина, РезультатТаблично = Ложь) Экспорт
	
	ПоГруппе = Ложь;
	Если ТипЗнч(ФизическиеЛица) = Тип("Массив") Тогда
		ПоГруппе = Истина;
	КонецЕсли;
	
	СписокКадровыхДанных = "Фамилия, Имя, Отчество, ФамилияИО, СтраховойНомерПФР, ИНН, ФИОПолные, ДокументВид, ДокументСерия, ДокументНомер, ДокументДатаВыдачи, ДокументКемВыдан, ДокументКодПодразделения, ДокументПредставление";
	
	КадровыеДанныеФизЛиц = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина, ФизическиеЛица, СписокКадровыхДанных, ДатаСреза);
	
	Если Организация <> Неопределено Тогда
		ТаблицаСотрудников = КадровыйУчет.ОсновныеСотрудникиФизическихЛиц(ФизическиеЛица, Истина, Организация, ДатаСреза); 
		
		Если ТаблицаСотрудников.Количество() <> 0 Тогда
			
			Если ПоГруппе Тогда
				Сотрудники = ТаблицаСотрудников.ВыгрузитьКолонку("Сотрудник");
			Иначе
				Сотрудники = ТаблицаСотрудников[0].Сотрудник;
			КонецЕсли;
			
			СписокКадровыхДанных = "ТабельныйНомер, Подразделение, Должность, ФизическоеЛицо";
			КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Сотрудники, СписокКадровыхДанных, ДатаСреза); 
		Иначе
			КадровыеДанныеСотрудников = Неопределено;
		КонецЕсли;
		
	Иначе
		КадровыеДанныеСотрудников = Неопределено;
	КонецЕсли;
	
	Если РезультатТаблично Тогда
		
		ТабРезультат = Новый ТаблицаЗначений();
		ТабРезультат.Колонки.Добавить("Фамилия");
		ТабРезультат.Колонки.Добавить("Имя");
		ТабРезультат.Колонки.Добавить("Отчество");
		ТабРезультат.Колонки.Добавить("Представление");
		ТабРезультат.Колонки.Добавить("ИНН");
		ТабРезультат.Колонки.Добавить("СтраховойНомерПФР");
		ТабРезультат.Колонки.Добавить("ВидДокумента");		
		ТабРезультат.Колонки.Добавить("Серия");
		ТабРезультат.Колонки.Добавить("Номер");
		ТабРезультат.Колонки.Добавить("ДатаВыдачи");
		ТабРезультат.Колонки.Добавить("КемВыдан");
		ТабРезультат.Колонки.Добавить("КодПодразделения");
		ТабРезультат.Колонки.Добавить("ПредставлениеДокумента");
		
		ТабРезультат.Колонки.Добавить("ТабельныйНомер");
		ТабРезультат.Колонки.Добавить("Должность");
		ТабРезультат.Колонки.Добавить("ПодразделениеОрганизации");
		ТабРезультат.Колонки.Добавить("Сотрудник");
		
	Иначе
		
		Результат = Новый Структура("Фамилия, Имя, Отчество, Представление, ИНН, СтраховойНомерПФР, ТабельныйНомер, Должность, ПодразделениеОрганизации, ВидДокумента, Серия, Номер, ДатаВыдачи, КемВыдан, КодПодразделения, ПредставлениеДокумента, Сотрудник");
		
	КонецЕсли;
	
	Для Каждого ДанныеФизЛиц Из КадровыеДанныеФизЛиц Цикл
		
		Если РезультатТаблично Тогда
			Результат = ТабРезультат.Добавить();
		Иначе
			Если КадровыеДанныеФизЛиц.Индекс(ДанныеФизЛиц) > 0 Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
		Результат.Фамилия  = ОбщегоНазначенияБП.ЕстьNull(ДанныеФизЛиц.Фамилия, "");
		Результат.Имя      = ОбщегоНазначенияБП.ЕстьNull(ДанныеФизЛиц.Имя, "");
		Результат.Отчество = ОбщегоНазначенияБП.ЕстьNull(ДанныеФизЛиц.Отчество, "");
		Если ФИОКратко Тогда
			Результат.Представление = ОбщегоНазначенияБП.ЕстьNull(ДанныеФизЛиц.ФамилияИО, "");
		Иначе
			Результат.Представление = ОбщегоНазначенияБП.ЕстьNull(ДанныеФизЛиц.ФИОПолные, "");
		КонецЕсли;
		Результат.ВидДокумента           = ОбщегоНазначенияБП.ЕстьNull(ДанныеФизЛиц.ДокументВид, "");
		Результат.Серия                  = ОбщегоНазначенияБП.ЕстьNull(ДанныеФизЛиц.ДокументСерия, "");
		Результат.Номер                  = ОбщегоНазначенияБП.ЕстьNull(ДанныеФизЛиц.ДокументНомер, "");
		Результат.ДатаВыдачи             = ОбщегоНазначенияБП.ЕстьNull(ДанныеФизЛиц.ДокументДатаВыдачи, "");
		Результат.КемВыдан               = ОбщегоНазначенияБП.ЕстьNull(ДанныеФизЛиц.ДокументКемВыдан, "");
		Результат.КодПодразделения       = ОбщегоНазначенияБП.ЕстьNull(ДанныеФизЛиц.ДокументКодПодразделения, "");
		Результат.ПредставлениеДокумента = ОбщегоНазначенияБП.ЕстьNull(ДанныеФизЛиц.ДокументПредставление, "");
		Результат.ИНН                    = ОбщегоНазначенияБП.ЕстьNull(ДанныеФизЛиц.ИНН, "");
		Результат.СтраховойНомерПФР      = ОбщегоНазначенияБП.ЕстьNull(ДанныеФизЛиц.СтраховойНомерПФР, "");
		
		Если КадровыеДанныеСотрудников <> Неопределено Тогда
			СтруктураОтбора = Новый Структура("ФизическоеЛицо", ДанныеФизЛиц.ФизическоеЛицо);
			МассивСведений = КадровыеДанныеСотрудников.НайтиСтроки(СтруктураОтбора);
			Если МассивСведений.Количество() <> 0 Тогда
				Результат.ТабельныйНомер           = МассивСведений[0].ТабельныйНомер;
				Результат.Должность                = МассивСведений[0].Должность;
				Результат.ПодразделениеОрганизации = МассивСведений[0].Подразделение;
				Результат.Сотрудник                = МассивСведений[0].Сотрудник;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если РезультатТаблично Тогда
		Возврат ТабРезультат;
	Иначе
		Возврат Результат;
	КонецЕсли;
	
КонецФункции

Процедура ПолучитьТаблицуСотрудников(ТаблицаФизическихЛиц) Экспорт
	
	ТаблицаФизическихЛиц.Колонки.Добавить("Сотрудник",                            Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаФизическихЛиц.Колонки.Добавить("СотрудникКод",                         Новый ОписаниеТипов("Строка"));
	ТаблицаФизическихЛиц.Колонки.Добавить("ПодразделениеСотрудника",              Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаФизическихЛиц.Колонки.Добавить("ПодразделениеСотрудникаКод",           Новый ОписаниеТипов("Строка"));
	ТаблицаФизическихЛиц.Колонки.Добавить("ПредставлениеПодразделенияСотрудника", Новый ОписаниеТипов("Строка"));
	
	СписокКадровыхДанных = "ТабельныйНомер, Подразделение";
	Для Каждого СтрокаТаблицы ИЗ ТаблицаФизическихЛиц Цикл
		ТаблицаСотрудников = КадровыйУчет.ОсновныеСотрудникиФизическихЛиц(СтрокаТаблицы.ФизическоеЛицо, Истина, СтрокаТаблицы.Организация, СтрокаТаблицы.Дата); 
		Если ТаблицаСотрудников.Количество() <> 0 Тогда			
			Сотрудник = ТаблицаСотрудников[0].Сотрудник;
			СтрокаТаблицы.Сотрудник = Сотрудник;
			КадровыеДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Сотрудник, СписокКадровыхДанных, СтрокаТаблицы.Дата); 
			Если КадровыеДанныеСотрудника <> Неопределено Тогда
				Подразделение = КадровыеДанныеСотрудника[0].Подразделение;
				СтрокаТаблицы.ПодразделениеСотрудника = Подразделение;				
				СтрокаТаблицы.СотрудникКод =  КадровыеДанныеСотрудника[0].ТабельныйНомер;
				Если ЗначениеЗаполнено(Подразделение) Тогда
					СтрокаТаблицы.ПодразделениеСотрудникаКод = Подразделение.Код;
					Если ЗначениеЗаполнено(Подразделение.НаименованиеПолное) Тогда
						СтрокаТаблицы.ПредставлениеПодразделенияСотрудника = Подразделение.НаименованиеПолное;
					Иначе
						СтрокаТаблицы.ПредставлениеПодразделенияСотрудника = Подразделение.Наименование;
					КонецЕсли;
				КонецЕсли;				
			КонецЕсли;			
		КонецЕсли;
	КонецЦикла
		
КонецПроцедуры

// Возвращает признак необходимости начислять зарплату
// для данной организации в указанный период
//
// Параметры:
//		Организация - СправочникСсылка.Организации
//		Период      - Дата
//
// Возвращаемое значение:
//		Булево
//
Функция НеобходимоНачислятьЗарплату(Организация, Период) Экспорт
	
	ЭтоФизЛицо	= Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	
	УчетЗарплатыИКадровСредствамиБухгалтерии = ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии");
	Если НЕ УчетЗарплатыИКадровСредствамиБухгалтерии Тогда
		Возврат Ложь;
	ИначеЕсли ЭтоФизЛицо И НЕ ИПИспользуетТрудНаемныхРаботников(Организация) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыПолученияСотрудниковОрганизаций = Новый Структура("Подразделение,СписокФизическихЛиц");
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("Организация", Организация);
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("КадровыеДанные", "");
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("ОтбиратьПоГоловнойОрганизации", Ложь);
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("НачалоПериода", '00010101');
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("ОкончаниеПериода", КонецМесяца(Период));
	
	ТаблицаСотрудников = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолученияСотрудниковОрганизаций);
	
	Возврат ТаблицаСотрудников.Количество() > 0;
	
КонецФункции

Функция ИПИспользуетТрудНаемныхРаботников(Организация) Экспорт
	
	Если ТипЗнч(Организация) = Тип("СправочникОбъект.Организации")
		ИЛИ ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
		ОрганизацияСсылка = Организация.Ссылка;
	Иначе
		Возврат Ложь;
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(ОрганизацияСсылка) Тогда
		Возврат Ложь;
	Иначе
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОрганизацияСсылка, "ИПИспользуетТрудНаемныхРаботников");
	КонецЕсли;
		
КонецФункции

Функция ПолучитьДокументНачисленияЗарплаты(МесяцНачисления, Организация) Экспорт
	
	ДокументНачисленияЗарплаты = Неопределено;
	Попытка
		ДокументНачисленияЗарплаты = РасчетЗарплаты.ДокументНачисленияЗарплаты(МесяцНачисления, Организация);
	Исключение
		ШаблонСообщения = НСтр("ru = 'Не удалось записать документ'");		
		ОписаниеОшибки = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(ШаблонСообщения, УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки.Описание);
	КонецПопытки;
	
	Возврат ДокументНачисленияЗарплаты;
	
КонецФункции

Функция ПолучитьДокументНачисленияРезерваОтпусков(МесяцНачисления, Организация) Экспорт
	
	ДокументНачисленияРезерваОтпусков = Неопределено;
	Попытка
		ДокументНачисленияРезерваОтпусков = РезервОтпусков.ДокументНачислениеОценочныхОбязательствПоОтпускам(МесяцНачисления, Организация);
	Исключение
		ШаблонСообщения = НСтр("ru = 'Не удалось записать документ'");		
		ОписаниеОшибки = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(ШаблонСообщения, УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки.Описание);
	КонецПопытки;
	
	Возврат ДокументНачисленияРезерваОтпусков;
	
КонецФункции

Процедура СформироватьКадровыеПриказы() Экспорт
	
	КадровыйУчетБазовый.СформироватьКадровыеПриказы();
	
КонецПроцедуры

Функция СоздатьФизическоеЛицо(Наименование, ИНН) Экспорт
	
	НовыйЭлемент = Справочники.ФизическиеЛица.СоздатьЭлемент();
	
	НовыйЭлемент.Наименование = Наименование;
	НовыйЭлемент.ФИО          = Наименование;
	НовыйЭлемент.ИНН          = ИНН;
	Если НовыйЭлемент.ПолучитьСсылкуНового().Пустая() Тогда
		НовыйЭлемент.УстановитьСсылкуНового(Справочники.ФизическиеЛица.ПолучитьСсылку());
	КонецЕсли;
	НовыйЭлемент.Записать();
	
	МенеджерЗаписиФИО = РегистрыСведений.ФИОФизическихЛиц.СоздатьМенеджерЗаписи();
	
	СтруктураФИО = ФизическиеЛицаКлиентСервер.ФамилияИмяОтчество(НовыйЭлемент.ФИО);
	Если СтруктураФИО.Фамилия <> Неопределено Тогда
		МенеджерЗаписиФИО.Фамилия  = СтруктураФИО.Фамилия;
		Если СтруктураФИО.Имя <> Неопределено Тогда
			МенеджерЗаписиФИО.Имя = СтруктураФИО.Имя;
		КонецЕсли;
		Если СтруктураФИО.Отчество <> Неопределено Тогда
			МенеджерЗаписиФИО.Отчество = СтруктураФИО.Отчество;
		КонецЕсли;
		
		МенеджерЗаписиФИО.Период         = ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведений();
		МенеджерЗаписиФИО.ФизическоеЛицо = НовыйЭлемент.Ссылка;
		МенеджерЗаписиФИО.Записать();
	КонецЕсли;
	
	Возврат НовыйЭлемент.Ссылка;
	
КонецФункции

Функция СоздатьСчетФизическогоЛица(ФизическоеЛицо, СтруктураРеквизиовСчета) Экспорт
	
	НовыйЭлемент = Справочники.БанковскиеСчета.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(НовыйЭлемент, СтруктураРеквизиовСчета,
	"НомерСчета, Банк, БанкДляРасчетов, ВалютаДенежныхСредств, ВидСчета, ТекстКорреспондента, ТекстНазначения, МесяцПрописью, СуммаБезКопеек, ВсегдаУказыватьКПП");
	НовыйЭлемент.Владелец = ФизическоеЛицо;
	НовыйЭлемент.Наименование = Лев(СокрЛП(СтруктураРеквизиовСчета.НомерСчета) + ", " + СтруктураРеквизиовСчета.Банк, 100);
	
	Если НовыйЭлемент.ПолучитьСсылкуНового().Пустая() Тогда
		НовыйЭлемент.УстановитьСсылкуНового(Справочники.БанковскиеСчета.ПолучитьСсылку());
	КонецЕсли;
	НовыйЭлемент.Записать();
	
	Возврат НовыйЭлемент.Ссылка;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ ОТЧЕТНОСТИ

//***********************************
// Среднесписочная численность

Процедура ПолучитьСведенияОПоказателяхОтчетаРегламентированныйОтчетСтатистикаФормаП4ФормаОтчета2012Кв1(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П0001001В1", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П0001002В1", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П0001002А1", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П010000202", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П010000203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П010000205", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П010000206", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П010000208", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П010000209", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П010000211", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П030001801", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П030002001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П030002401", Истина, Ложь);

КонецПроцедуры

Процедура ЗаполнитьРегламентированныйОтчетСтатистикаФормаП4ФормаОтчета2012Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	П0001001В1 = "";
	П0001002В1 = "";
	П0001002А1 = "";
	
	Запрос = Новый Запрос;	
	Запрос.УстановитьПараметр("Организация",    ПараметрыОтчета.Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.КодОКВЭД КАК КодОКВЭД,
	|	Организации.НаименованиеОКВЭД КАК НаименованиеОКВЭД
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка = &Организация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		П0001001В1 = Выборка.КодОКВЭД;
		П0001002В1 = Выборка.КодОКВЭД;
		П0001002А1 = Выборка.НаименованиеОКВЭД;
	КонецЕсли;		
	
	Запрос.УстановитьПараметр("НачалоГода", 		       НачалоГода(ПараметрыОтчета.ДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("ОкончаниеИнтервала", 	   КонецМесяца(ПараметрыОтчета.ДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("ОкончаниеПериодаИнтервала", КонецМесяца(ПараметрыОтчета.ДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("КонецКвартала", 		       КонецМесяца(ПараметрыОтчета.ДатаКонцаПериодаОтчета));	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ТекущиеКадровыеДанныеСотрудников.Сотрудник) КАК КоличествоСотрудников
	|ИЗ
	|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	|ГДЕ
	|	(ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация = &Организация
	|			ИЛИ ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация ЕСТЬ NULL )
	|	И (ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1)
	|			И ТекущиеКадровыеДанныеСотрудников.ДатаПриема <= &ОкончаниеПериодаИнтервала)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если НЕ Выборка.Следующий() Тогда
		Возврат;
	Иначе
		ФормироватьСНачалаГода = Выборка.КоличествоСотрудников > 15;
	КонецЕсли;
	
	ВидыВыплатСоциальногоХарактера = Новый Массив;
	ВидыВыплатСоциальногоХарактера.Добавить(Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп9ст255);
	ВидыВыплатСоциальногоХарактера.Добавить(Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп12_1ст255);
	ВидыВыплатСоциальногоХарактера.Добавить(Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп13ст255);
	ВидыВыплатСоциальногоХарактера.Добавить(Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп16ст255);
	ВидыВыплатСоциальногоХарактера.Добавить("2710");		
	ВидыВыплатСоциальногоХарактера.Добавить("2720");
	ВидыВыплатСоциальногоХарактера.Добавить("2760");
	ВидыВыплатСоциальногоХарактера.Добавить("2762");
	ВидыВыплатСоциальногоХарактера.Добавить("2510");		
	
	Запрос.УстановитьПараметр("ВидыВыплатСоциальногоХарактера", ВидыВыплатСоциальногоХарактера);
	
	Если НЕ ФормироватьСНачалаГода Тогда
		Запрос.УстановитьПараметр("НачалоПериодаИнтервала",    НачалоМесяца(ПараметрыОтчета.ДатаНачалаПериодаОтчета));
		Запрос.УстановитьПараметр("НачалоИнтервала", 		   НачалоМесяца(ПараметрыОтчета.ДатаНачалаПериодаОтчета));
	Иначе
		Запрос.УстановитьПараметр("НачалоПериодаИнтервала",    НачалоГода(ПараметрыОтчета.ДатаНачалаПериодаОтчета));
		Запрос.УстановитьПараметр("НачалоИнтервала", 		   НачалоГода(ПараметрыОтчета.ДатаНачалаПериодаОтчета));
	КонецЕсли;
	
	 Запрос.Текст = 
	 "ВЫБРАТЬ
	 |	0 КАК Цифра
	 |ПОМЕСТИТЬ Цифры
	 |
	 |ОБЪЕДИНИТЬ ВСЕ
	 |
	 |ВЫБРАТЬ
	 |	1
	 |
	 |ОБЪЕДИНИТЬ ВСЕ
	 |
	 |ВЫБРАТЬ
	 |	2
	 |
	 |ОБЪЕДИНИТЬ ВСЕ
	 |
	 |ВЫБРАТЬ
	 |	3
	 |
	 |ОБЪЕДИНИТЬ ВСЕ
	 |
	 |ВЫБРАТЬ
	 |	4
	 |
	 |ОБЪЕДИНИТЬ ВСЕ
	 |
	 |ВЫБРАТЬ
	 |	5
	 |
	 |ОБЪЕДИНИТЬ ВСЕ
	 |
	 |ВЫБРАТЬ
	 |	6
	 |
	 |ОБЪЕДИНИТЬ ВСЕ
	 |
	 |ВЫБРАТЬ
	 |	7
	 |
	 |ОБЪЕДИНИТЬ ВСЕ
	 |
	 |ВЫБРАТЬ
	 |	8
	 |
	 |ОБЪЕДИНИТЬ ВСЕ
	 |
	 |ВЫБРАТЬ
	 |	9
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ВЫБОР
	 |		КОГДА &НачалоПериодаИнтервала <> ДАТАВРЕМЯ(1, 1, 1)
	 |			ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&НачалоПериодаИнтервала, ДЕНЬ, Цифры.Цифра + ЕСТЬNULL(Цифры10.Цифра, 0) * 10 + ЕСТЬNULL(Цифры100.Цифра, 0) * 100 + ЕСТЬNULL(Цифры1000.Цифра, 0) * 1000 + ЕСТЬNULL(Цифры10000.Цифра, 0) * 10000 + ЕСТЬNULL(Цифры100000.Цифра, 0) * 100000), ДЕНЬ)
	 |		ИНАЧЕ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ДАТАВРЕМЯ(1980, 1, 1), ДЕНЬ, Цифры.Цифра + ЕСТЬNULL(Цифры10.Цифра, 0) * 10 + ЕСТЬNULL(Цифры100.Цифра, 0) * 100 + ЕСТЬNULL(Цифры1000.Цифра, 0) * 1000 + ЕСТЬNULL(Цифры10000.Цифра, 0) * 10000 + ЕСТЬNULL(Цифры100000.Цифра, 0) * 100000), ДЕНЬ)
	 |	КОНЕЦ КАК Дата
	 |ПОМЕСТИТЬ Календарь
	 |ИЗ
	 |	Цифры КАК Цифры
	 |		ЛЕВОЕ СОЕДИНЕНИЕ Цифры КАК Цифры10
	 |		ПО (РАЗНОСТЬДАТ(&НачалоПериодаИнтервала, &ОкончаниеПериодаИнтервала, ДЕНЬ) > 9)
	 |		ЛЕВОЕ СОЕДИНЕНИЕ Цифры КАК Цифры100
	 |		ПО (РАЗНОСТЬДАТ(&НачалоПериодаИнтервала, &ОкончаниеПериодаИнтервала, ДЕНЬ) > 99)
	 |		ЛЕВОЕ СОЕДИНЕНИЕ Цифры КАК Цифры1000
	 |		ПО (РАЗНОСТЬДАТ(&НачалоПериодаИнтервала, &ОкончаниеПериодаИнтервала, ДЕНЬ) > 999)
	 |		ЛЕВОЕ СОЕДИНЕНИЕ Цифры КАК Цифры10000
	 |		ПО (РАЗНОСТЬДАТ(&НачалоПериодаИнтервала, &ОкончаниеПериодаИнтервала, ДЕНЬ) > 9999)
	 |		ЛЕВОЕ СОЕДИНЕНИЕ Цифры КАК Цифры100000
	 |		ПО (РАЗНОСТЬДАТ(&НачалоПериодаИнтервала, &ОкончаниеПериодаИнтервала, ДЕНЬ) > 99999)
	 |ГДЕ
	 |	ВЫБОР
	 |			КОГДА &НачалоПериодаИнтервала <> ДАТАВРЕМЯ(1, 1, 1)
	 |				ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&НачалоПериодаИнтервала, ДЕНЬ, Цифры.Цифра + ЕСТЬNULL(Цифры10.Цифра, 0) * 10 + ЕСТЬNULL(Цифры100.Цифра, 0) * 100 + ЕСТЬNULL(Цифры1000.Цифра, 0) * 1000 + ЕСТЬNULL(Цифры10000.Цифра, 0) * 10000 + ЕСТЬNULL(Цифры100000.Цифра, 0) * 100000), ДЕНЬ)
	 |			ИНАЧЕ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ДАТАВРЕМЯ(1980, 1, 1), ДЕНЬ, Цифры.Цифра + ЕСТЬNULL(Цифры10.Цифра, 0) * 10 + ЕСТЬNULL(Цифры100.Цифра, 0) * 100 + ЕСТЬNULL(Цифры1000.Цифра, 0) * 1000 + ЕСТЬNULL(Цифры10000.Цифра, 0) * 10000 + ЕСТЬNULL(Цифры100000.Цифра, 0) * 100000), ДЕНЬ)
	 |		КОНЕЦ МЕЖДУ &НачалоИнтервала И &ОкончаниеИнтервала
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |УНИЧТОЖИТЬ Цифры
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	Календарь.Дата КАК Дата,
	 |	НАЧАЛОПЕРИОДА(Календарь.Дата, МЕСЯЦ) КАК Месяц
	 |ПОМЕСТИТЬ ВТСписокДат
	 |ИЗ
	 |	Календарь КАК Календарь
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ТекущиеКадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
	 |	СписокДат.Дата КАК Дата,
	 |	СписокДат.Месяц,
	 |	ЛОЖЬ КАК Совместитель
	 |ПОМЕСТИТЬ ВТДатыИСотрудники
	 |ИЗ
	 |	ВТСписокДат КАК СписокДат
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	 |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	 |			ПО ТекущиеКадровыеДанныеСотрудников.Сотрудник = Сотрудники.Ссылка
	 |				И (ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы))
	 |		ПО СписокДат.Дата >= ТекущиеКадровыеДанныеСотрудников.ДатаПриема
	 |			И (СписокДат.Дата <= ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения
	 |					И ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1)
	 |				ИЛИ ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1))
	 |ГДЕ
	 |	ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация = &Организация
	 |
	 |ОБЪЕДИНИТЬ ВСЕ
	 |
	 |ВЫБРАТЬ
	 |	ТекущиеКадровыеДанныеСотрудников.Сотрудник,
	 |	СписокДат.Дата,
	 |	СписокДат.Месяц,
	 |	ИСТИНА
	 |ИЗ
	 |	ВТСписокДат КАК СписокДат
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	 |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	 |			ПО ТекущиеКадровыеДанныеСотрудников.Сотрудник = Сотрудники.Ссылка
	 |				И (ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство))
	 |		ПО СписокДат.Дата >= ТекущиеКадровыеДанныеСотрудников.ДатаПриема
	 |			И (СписокДат.Дата <= ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения
	 |					И ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1)
	 |				ИЛИ ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1))
	 |ГДЕ
	 |	ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация = &Организация
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	СУММА(ВЫБОР
	 |			КОГДА СписокДат.Сотрудник ЕСТЬ НЕ NULL 
	 |				ТОГДА 1
	 |			ИНАЧЕ 0
	 |		КОНЕЦ) КАК КоличествоСотрудников,
	 |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СписокДат.Дата) КАК ДнейВМесяце,
	 |	СписокДат.Месяц,
	 |	СписокДат.Совместитель
	 |ПОМЕСТИТЬ ВТСредняяЧисленностьПоМесяцам
	 |ИЗ
	 |	ВТДатыИСотрудники КАК СписокДат
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	СписокДат.Месяц,
	 |	СписокДат.Совместитель
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	НачислениеЗарплатыНачисления.Сотрудник,
	 |	НачислениеЗарплатыНачисления.ОтработаноЧасов,
	 |	НачислениеЗарплатыНачисления.Ссылка.МесяцНачисления,
	 |	НачислениеЗарплатыНачисления.Результат,
	 |	НачислениеЗарплатыНачисления.Начисление
	 |ПОМЕСТИТЬ ВТНачислениеЗарплаты
	 |ИЗ
	 |	Документ.НачислениеЗарплаты.Начисления КАК НачислениеЗарплатыНачисления
	 |ГДЕ
	 |	НачислениеЗарплатыНачисления.Ссылка.Организация = &Организация
	 |	И НачислениеЗарплатыНачисления.Ссылка.МесяцНачисления МЕЖДУ &НачалоИнтервала И &ОкончаниеИнтервала
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ВТДатыИСотрудники.Сотрудник,
	 |	ВТДатыИСотрудники.Месяц,
	 |	ВТДатыИСотрудники.Совместитель
	 |ПОМЕСТИТЬ ВТСписокСотрудниковИДат
	 |ИЗ
	 |	ВТДатыИСотрудники КАК ВТДатыИСотрудники
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	ВТДатыИСотрудники.Сотрудник,
	 |	ВТДатыИСотрудники.Месяц,
	 |	ВТДатыИСотрудники.Совместитель
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	Начисления.Ссылка КАК Начисление
	 |ПОМЕСТИТЬ ВТВидыНачисленийСоциальногоХарактера
	 |ИЗ
	 |	ПланВидовРасчета.Начисления КАК Начисления
	 |ГДЕ
	 |	(Начисления.ВидНачисленияДляНУ В (&ВидыВыплатСоциальногоХарактера)
	 |			ИЛИ Начисления.КодДоходаНДФЛ.Код В (&ВидыВыплатСоциальногоХарактера))
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ВЫБОР
	 |		КОГДА СредняяЧисленностьПоМесяцам.Совместитель
	 |			ТОГДА 0
	 |		ИНАЧЕ ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(СредняяЧисленностьПоМесяцам.КоличествоСотрудников / СредняяЧисленностьПоМесяцам.ДнейВМесяце КАК ЧИСЛО(15, 0))) / КОЛИЧЕСТВО(СредняяЧисленностьПоМесяцам.Месяц), 0)
	 |	КОНЕЦ КАК СреднесписочнаяЧисленность,
	 |	ВЫБОР
	 |		КОГДА СредняяЧисленностьПоМесяцам.Совместитель
	 |			ТОГДА ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(СредняяЧисленностьПоМесяцам.КоличествоСотрудников / СредняяЧисленностьПоМесяцам.ДнейВМесяце КАК ЧИСЛО(15, 0))) / КОЛИЧЕСТВО(СредняяЧисленностьПоМесяцам.Месяц), 0)
	 |		ИНАЧЕ 0
	 |	КОНЕЦ КАК СреднесписочнаяЧисленностьСовместители
	 |ИЗ
	 |	ВТСредняяЧисленностьПоМесяцам КАК СредняяЧисленностьПоМесяцам
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	СредняяЧисленностьПоМесяцам.Совместитель
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ВЫРАЗИТЬ(ЕСТЬNULL(НачислениеЗарплатыНачисления.Результат, 0) / 1000 КАК ЧИСЛО(15, 1)) КАК ВыплатыСоциальногоХарактера,
	 |	НачислениеЗарплатыНачисления.Сотрудник
	 |ИЗ
	 |	Документ.НачислениеЗарплаты.Начисления КАК НачислениеЗарплатыНачисления
	 |ГДЕ
	 |	НачислениеЗарплатыНачисления.Ссылка.Организация = &Организация
	 |	И НачислениеЗарплатыНачисления.Ссылка.МесяцНачисления МЕЖДУ &НачалоГода И &ОкончаниеИнтервала
	 |	И НачислениеЗарплатыНачисления.Начисление В
	 |			(ВЫБРАТЬ
	 |				ВидыНачисленийСоциальногоХарактера.Начисление КАК Начисление
	 |			ИЗ
	 |				ВТВидыНачисленийСоциальногоХарактера КАК ВидыНачисленийСоциальногоХарактера)
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ВТСписокСотрудниковИДат.Сотрудник,
	 |	ВТСписокСотрудниковИДат.Месяц,
	 |	СУММА(ЕСТЬNULL(ВТНачислениеЗарплаты.ОтработаноЧасов, 0)) КАК ОтработаноЧасов,
	 |	СУММА(ВЫРАЗИТЬ(ЕСТЬNULL(ВТНачислениеЗарплаты.Результат, 0) / 1000 КАК ЧИСЛО(15, 1))) КАК Результат,
	 |	0 КАК ОтработаноЧасовСовместитель,
	 |	0 КАК РезультатСовместитель,
	 |	ВТСписокСотрудниковИДат.Совместитель
	 |ИЗ
	 |	ВТСписокСотрудниковИДат КАК ВТСписокСотрудниковИДат
	 |		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачислениеЗарплаты КАК ВТНачислениеЗарплаты
	 |		ПО ВТСписокСотрудниковИДат.Сотрудник = ВТНачислениеЗарплаты.Сотрудник
	 |			И ВТСписокСотрудниковИДат.Месяц = ВТНачислениеЗарплаты.МесяцНачисления
	 |ГДЕ
	 |	НЕ ВТСписокСотрудниковИДат.Совместитель
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	ВТСписокСотрудниковИДат.Сотрудник,
	 |	ВТСписокСотрудниковИДат.Месяц,
	 |	ВТСписокСотрудниковИДат.Совместитель
	 |
	 |ОБЪЕДИНИТЬ ВСЕ
	 |
	 |ВЫБРАТЬ
	 |	ВТСписокСотрудниковИДат.Сотрудник,
	 |	ВТСписокСотрудниковИДат.Месяц,
	 |	0,
	 |	0,
	 |	СУММА(ЕСТЬNULL(ВТНачислениеЗарплаты.ОтработаноЧасов, 0)),
	 |	СУММА(ВЫРАЗИТЬ(ЕСТЬNULL(ВТНачислениеЗарплаты.Результат, 0) / 1000 КАК ЧИСЛО(15, 1))),
	 |	ВТСписокСотрудниковИДат.Совместитель
	 |ИЗ
	 |	ВТСписокСотрудниковИДат КАК ВТСписокСотрудниковИДат
	 |		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачислениеЗарплаты КАК ВТНачислениеЗарплаты
	 |		ПО ВТСписокСотрудниковИДат.Сотрудник = ВТНачислениеЗарплаты.Сотрудник
	 |			И ВТСписокСотрудниковИДат.Месяц = ВТНачислениеЗарплаты.МесяцНачисления
	 |ГДЕ
	 |	ВТСписокСотрудниковИДат.Совместитель
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	ВТСписокСотрудниковИДат.Сотрудник,
	 |	ВТСписокСотрудниковИДат.Месяц,
	 |	ВТСписокСотрудниковИДат.Совместитель
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	КОЛИЧЕСТВО(ТекущиеКадровыеДанныеСотрудников.ДатаПриема) КАК Принятые,
	 |	0 КАК Уволенные
	 |ИЗ
	 |	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	 |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	 |		ПО ТекущиеКадровыеДанныеСотрудников.Сотрудник = Сотрудники.Ссылка
	 |			И (ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы))
	 |ГДЕ
	 |	ТекущиеКадровыеДанныеСотрудников.ДатаПриема >= &НачалоГода
	 |	И ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация = &Организация
	 |
	 |ОБЪЕДИНИТЬ ВСЕ
	 |
	 |ВЫБРАТЬ
	 |	0,
	 |	КОЛИЧЕСТВО(ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения)
	 |ИЗ
	 |	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	 |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	 |		ПО ТекущиеКадровыеДанныеСотрудников.Сотрудник = Сотрудники.Ссылка
	 |			И (ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы))
	 |ГДЕ
	 |	ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения <= &ОкончаниеПериодаИнтервала
	 |	И ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1)
	 |	И ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация = &Организация";
	 
	 Запрос.ВыполнитьПакет();
	 
	 Результаты = Запрос.ВыполнитьПакет();
	 КоличестовРезультатов = Результаты.Количество();
	 
	 СведенияОЧисленности           = Результаты[КоличестовРезультатов-4].Выбрать();
	 П010000202 = 0;
	 П010000203 = 0;
	 Пока СведенияОЧисленности.Следующий() Цикл
		 П010000202 = П010000202 + СведенияОЧисленности.СреднесписочнаяЧисленность;
		 П010000203 = П010000203 + СведенияОЧисленности.СреднесписочнаяЧисленностьСовместители;
	 КонецЦикла;
	 
	 СведенияОСоциальныхВыплатах    = Результаты[КоличестовРезультатов-3].Выбрать();
	 П010000211 = 0;
	 Пока СведенияОСоциальныхВыплатах.Следующий() Цикл
		 П010000211 = П010000211 + СведенияОСоциальныхВыплатах.ВыплатыСоциальногоХарактера;
	 КонецЦикла;
	 
	 СведенияОЗаработнойПлате       = Результаты[КоличестовРезультатов-2].Выбрать();
	 П010000205 = 0;
	 П010000206 = 0;
	 П010000208 = 0;
	 П010000209 = 0;
	 Пока СведенияОЗаработнойПлате.Следующий() Цикл
		 П010000205 = П010000205 + СведенияОЗаработнойПлате.ОтработаноЧасов;
		 П010000206 = П010000206 + СведенияОЗаработнойПлате.ОтработаноЧасовСовместитель;
		 П010000208 = П010000208 + СведенияОЗаработнойПлате.Результат;
		 П010000209 = П010000209 + СведенияОЗаработнойПлате.РезультатСовместитель;
	 КонецЦикла;
	 
	 СведенияОбИзмененииЧисленности = Результаты[КоличестовРезультатов-1].Выбрать();
	 П030001801 = 0;
	 П030002001 = 0;
	 Пока СведенияОбИзмененииЧисленности.Следующий() Цикл
		 П030001801 = П030001801 + СведенияОбИзмененииЧисленности.Принятые;
		 П030002001 = П030002001 + СведенияОбИзмененииЧисленности.Уволенные;
	 КонецЦикла;
	 
	 ПоляОтчета = Контейнер.ПолеТабличногоДокументаФормаОтчета;
	 
	 ПоляОтчета.П0001001В1 = П0001001В1;
	 ПоляОтчета.П0001002В1 = П0001002В1;
	 ПоляОтчета.П0001002А1 = П0001002А1;
	 
	 ПоляОтчета.П010000202 = П010000202;
	 ПоляОтчета.П010000203 = П010000203;
	 ПоляОтчета.П010000205 = П010000205;
	 ПоляОтчета.П010000206 = П010000206;
	 ПоляОтчета.П010000211 = П010000211;
	 ПоляОтчета.П010000205 = П010000205;
	 ПоляОтчета.П010000206 = П010000206;
	 ПоляОтчета.П010000208 = П010000208;
	 ПоляОтчета.П010000209 = П010000209;		
	 ПоляОтчета.П030001801 = П030001801;
	 ПоляОтчета.П030002001 = П030002001;
	 ПоляОтчета.П030002401 = П010000202;
	 
КонецПроцедуры

Процедура ПолучитьСведенияОПоказателяхОтчетаРегламентированныйОтчетСтатистикаФормаП4ФормаОтчета2013Кв1(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П0001001В1", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П0001002В1", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П0001002А1", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П010000202", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П010000203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П010000205", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П010000206", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П010000208", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П010000209", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П010000211", Истина, Ложь);
	 
 КонецПроцедуры

Процедура ЗаполнитьРегламентированныйОтчетСтатистикаФормаП4ФормаОтчета2013Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	П0001001В1 = "";
	П0001002В1 = "";
	П0001002А1 = "";
	
	Запрос = Новый Запрос;	
	Запрос.УстановитьПараметр("Организация",    ПараметрыОтчета.Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.КодОКВЭД КАК КодОКВЭД,
	|	Организации.НаименованиеОКВЭД КАК НаименованиеОКВЭД
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка = &Организация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		П0001001В1 = Выборка.КодОКВЭД;
		П0001002В1 = Выборка.КодОКВЭД;
		П0001002А1 = Выборка.НаименованиеОКВЭД;
	КонецЕсли;		
	
	Запрос.УстановитьПараметр("НачалоГода", 		       НачалоГода(ПараметрыОтчета.ДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("ОкончаниеИнтервала", 	   КонецМесяца(ПараметрыОтчета.ДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("ОкончаниеПериодаИнтервала", КонецМесяца(ПараметрыОтчета.ДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("КонецКвартала", 		       КонецМесяца(ПараметрыОтчета.ДатаКонцаПериодаОтчета));	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ТекущиеКадровыеДанныеСотрудников.Сотрудник) КАК КоличествоСотрудников
	|ИЗ
	|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	|ГДЕ
	|	(ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация = &Организация
	|			ИЛИ ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация ЕСТЬ NULL )
	|	И (ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1)
	|			И ТекущиеКадровыеДанныеСотрудников.ДатаПриема <= &ОкончаниеПериодаИнтервала)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если НЕ Выборка.Следующий() Тогда
		Возврат;
	Иначе
		ФормироватьСНачалаГода = Выборка.КоличествоСотрудников > 15;
	КонецЕсли;
	
	ВидыВыплатСоциальногоХарактера = Новый Массив;
	ВидыВыплатСоциальногоХарактера.Добавить(Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп9ст255);
	ВидыВыплатСоциальногоХарактера.Добавить(Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп12_1ст255);
	ВидыВыплатСоциальногоХарактера.Добавить(Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп13ст255);
	ВидыВыплатСоциальногоХарактера.Добавить(Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп16ст255);
	ВидыВыплатСоциальногоХарактера.Добавить("2710");		
	ВидыВыплатСоциальногоХарактера.Добавить("2720");
	ВидыВыплатСоциальногоХарактера.Добавить("2760");
	ВидыВыплатСоциальногоХарактера.Добавить("2762");
	ВидыВыплатСоциальногоХарактера.Добавить("2510");		
	
	Запрос.УстановитьПараметр("ВидыВыплатСоциальногоХарактера", ВидыВыплатСоциальногоХарактера);
	
	Если НЕ ФормироватьСНачалаГода Тогда
		Запрос.УстановитьПараметр("НачалоПериодаИнтервала",    НачалоМесяца(ПараметрыОтчета.ДатаНачалаПериодаОтчета));
		Запрос.УстановитьПараметр("НачалоИнтервала", 		   НачалоМесяца(ПараметрыОтчета.ДатаНачалаПериодаОтчета));
	Иначе
		Запрос.УстановитьПараметр("НачалоПериодаИнтервала",    НачалоГода(ПараметрыОтчета.ДатаНачалаПериодаОтчета));
		Запрос.УстановитьПараметр("НачалоИнтервала", 		   НачалоГода(ПараметрыОтчета.ДатаНачалаПериодаОтчета));
	КонецЕсли;
	
	 Запрос.Текст = 
	 "ВЫБРАТЬ
	 |	0 КАК Цифра
	 |ПОМЕСТИТЬ Цифры
	 |
	 |ОБЪЕДИНИТЬ ВСЕ
	 |
	 |ВЫБРАТЬ
	 |	1
	 |
	 |ОБЪЕДИНИТЬ ВСЕ
	 |
	 |ВЫБРАТЬ
	 |	2
	 |
	 |ОБЪЕДИНИТЬ ВСЕ
	 |
	 |ВЫБРАТЬ
	 |	3
	 |
	 |ОБЪЕДИНИТЬ ВСЕ
	 |
	 |ВЫБРАТЬ
	 |	4
	 |
	 |ОБЪЕДИНИТЬ ВСЕ
	 |
	 |ВЫБРАТЬ
	 |	5
	 |
	 |ОБЪЕДИНИТЬ ВСЕ
	 |
	 |ВЫБРАТЬ
	 |	6
	 |
	 |ОБЪЕДИНИТЬ ВСЕ
	 |
	 |ВЫБРАТЬ
	 |	7
	 |
	 |ОБЪЕДИНИТЬ ВСЕ
	 |
	 |ВЫБРАТЬ
	 |	8
	 |
	 |ОБЪЕДИНИТЬ ВСЕ
	 |
	 |ВЫБРАТЬ
	 |	9
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ВЫБОР
	 |		КОГДА &НачалоПериодаИнтервала <> ДАТАВРЕМЯ(1, 1, 1)
	 |			ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&НачалоПериодаИнтервала, ДЕНЬ, Цифры.Цифра + ЕСТЬNULL(Цифры10.Цифра, 0) * 10 + ЕСТЬNULL(Цифры100.Цифра, 0) * 100 + ЕСТЬNULL(Цифры1000.Цифра, 0) * 1000 + ЕСТЬNULL(Цифры10000.Цифра, 0) * 10000 + ЕСТЬNULL(Цифры100000.Цифра, 0) * 100000), ДЕНЬ)
	 |		ИНАЧЕ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ДАТАВРЕМЯ(1980, 1, 1), ДЕНЬ, Цифры.Цифра + ЕСТЬNULL(Цифры10.Цифра, 0) * 10 + ЕСТЬNULL(Цифры100.Цифра, 0) * 100 + ЕСТЬNULL(Цифры1000.Цифра, 0) * 1000 + ЕСТЬNULL(Цифры10000.Цифра, 0) * 10000 + ЕСТЬNULL(Цифры100000.Цифра, 0) * 100000), ДЕНЬ)
	 |	КОНЕЦ КАК Дата
	 |ПОМЕСТИТЬ Календарь
	 |ИЗ
	 |	Цифры КАК Цифры
	 |		ЛЕВОЕ СОЕДИНЕНИЕ Цифры КАК Цифры10
	 |		ПО (РАЗНОСТЬДАТ(&НачалоПериодаИнтервала, &ОкончаниеПериодаИнтервала, ДЕНЬ) > 9)
	 |		ЛЕВОЕ СОЕДИНЕНИЕ Цифры КАК Цифры100
	 |		ПО (РАЗНОСТЬДАТ(&НачалоПериодаИнтервала, &ОкончаниеПериодаИнтервала, ДЕНЬ) > 99)
	 |		ЛЕВОЕ СОЕДИНЕНИЕ Цифры КАК Цифры1000
	 |		ПО (РАЗНОСТЬДАТ(&НачалоПериодаИнтервала, &ОкончаниеПериодаИнтервала, ДЕНЬ) > 999)
	 |		ЛЕВОЕ СОЕДИНЕНИЕ Цифры КАК Цифры10000
	 |		ПО (РАЗНОСТЬДАТ(&НачалоПериодаИнтервала, &ОкончаниеПериодаИнтервала, ДЕНЬ) > 9999)
	 |		ЛЕВОЕ СОЕДИНЕНИЕ Цифры КАК Цифры100000
	 |		ПО (РАЗНОСТЬДАТ(&НачалоПериодаИнтервала, &ОкончаниеПериодаИнтервала, ДЕНЬ) > 99999)
	 |ГДЕ
	 |	ВЫБОР
	 |			КОГДА &НачалоПериодаИнтервала <> ДАТАВРЕМЯ(1, 1, 1)
	 |				ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&НачалоПериодаИнтервала, ДЕНЬ, Цифры.Цифра + ЕСТЬNULL(Цифры10.Цифра, 0) * 10 + ЕСТЬNULL(Цифры100.Цифра, 0) * 100 + ЕСТЬNULL(Цифры1000.Цифра, 0) * 1000 + ЕСТЬNULL(Цифры10000.Цифра, 0) * 10000 + ЕСТЬNULL(Цифры100000.Цифра, 0) * 100000), ДЕНЬ)
	 |			ИНАЧЕ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ДАТАВРЕМЯ(1980, 1, 1), ДЕНЬ, Цифры.Цифра + ЕСТЬNULL(Цифры10.Цифра, 0) * 10 + ЕСТЬNULL(Цифры100.Цифра, 0) * 100 + ЕСТЬNULL(Цифры1000.Цифра, 0) * 1000 + ЕСТЬNULL(Цифры10000.Цифра, 0) * 10000 + ЕСТЬNULL(Цифры100000.Цифра, 0) * 100000), ДЕНЬ)
	 |		КОНЕЦ МЕЖДУ &НачалоИнтервала И &ОкончаниеИнтервала
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |УНИЧТОЖИТЬ Цифры
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	Календарь.Дата КАК Дата,
	 |	НАЧАЛОПЕРИОДА(Календарь.Дата, МЕСЯЦ) КАК Месяц
	 |ПОМЕСТИТЬ ВТСписокДат
	 |ИЗ
	 |	Календарь КАК Календарь
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ТекущиеКадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
	 |	СписокДат.Дата КАК Дата,
	 |	СписокДат.Месяц,
	 |	ЛОЖЬ КАК Совместитель
	 |ПОМЕСТИТЬ ВТДатыИСотрудники
	 |ИЗ
	 |	ВТСписокДат КАК СписокДат
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	 |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	 |			ПО ТекущиеКадровыеДанныеСотрудников.Сотрудник = Сотрудники.Ссылка
	 |				И (ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы))
	 |		ПО СписокДат.Дата >= ТекущиеКадровыеДанныеСотрудников.ДатаПриема
	 |			И (СписокДат.Дата <= ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения
	 |					И ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1)
	 |				ИЛИ ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1))
	 |ГДЕ
	 |	ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация = &Организация
	 |
	 |ОБЪЕДИНИТЬ ВСЕ
	 |
	 |ВЫБРАТЬ
	 |	ТекущиеКадровыеДанныеСотрудников.Сотрудник,
	 |	СписокДат.Дата,
	 |	СписокДат.Месяц,
	 |	ИСТИНА
	 |ИЗ
	 |	ВТСписокДат КАК СписокДат
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	 |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	 |			ПО ТекущиеКадровыеДанныеСотрудников.Сотрудник = Сотрудники.Ссылка
	 |				И (ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство))
	 |		ПО СписокДат.Дата >= ТекущиеКадровыеДанныеСотрудников.ДатаПриема
	 |			И (СписокДат.Дата <= ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения
	 |					И ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1)
	 |				ИЛИ ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1))
	 |ГДЕ
	 |	ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация = &Организация
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	СУММА(ВЫБОР
	 |			КОГДА СписокДат.Сотрудник ЕСТЬ НЕ NULL 
	 |				ТОГДА 1
	 |			ИНАЧЕ 0
	 |		КОНЕЦ) КАК КоличествоСотрудников,
	 |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СписокДат.Дата) КАК ДнейВМесяце,
	 |	СписокДат.Месяц,
	 |	СписокДат.Совместитель
	 |ПОМЕСТИТЬ ВТСредняяЧисленностьПоМесяцам
	 |ИЗ
	 |	ВТДатыИСотрудники КАК СписокДат
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	СписокДат.Месяц,
	 |	СписокДат.Совместитель
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	НачислениеЗарплатыНачисления.Сотрудник,
	 |	НачислениеЗарплатыНачисления.ОтработаноЧасов,
	 |	НачислениеЗарплатыНачисления.Ссылка.МесяцНачисления,
	 |	НачислениеЗарплатыНачисления.Результат,
	 |	НачислениеЗарплатыНачисления.Начисление
	 |ПОМЕСТИТЬ ВТНачислениеЗарплаты
	 |ИЗ
	 |	Документ.НачислениеЗарплаты.Начисления КАК НачислениеЗарплатыНачисления
	 |ГДЕ
	 |	НачислениеЗарплатыНачисления.Ссылка.Организация = &Организация
	 |	И НачислениеЗарплатыНачисления.Ссылка.МесяцНачисления МЕЖДУ &НачалоИнтервала И &ОкончаниеИнтервала
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ВТДатыИСотрудники.Сотрудник,
	 |	ВТДатыИСотрудники.Месяц,
	 |	ВТДатыИСотрудники.Совместитель
	 |ПОМЕСТИТЬ ВТСписокСотрудниковИДат
	 |ИЗ
	 |	ВТДатыИСотрудники КАК ВТДатыИСотрудники
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	ВТДатыИСотрудники.Сотрудник,
	 |	ВТДатыИСотрудники.Месяц,
	 |	ВТДатыИСотрудники.Совместитель
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	Начисления.Ссылка КАК Начисление
	 |ПОМЕСТИТЬ ВТВидыНачисленийСоциальногоХарактера
	 |ИЗ
	 |	ПланВидовРасчета.Начисления КАК Начисления
	 |ГДЕ
	 |	(Начисления.ВидНачисленияДляНУ В (&ВидыВыплатСоциальногоХарактера)
	 |			ИЛИ Начисления.КодДоходаНДФЛ.Код В (&ВидыВыплатСоциальногоХарактера))
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ВЫБОР
	 |		КОГДА СредняяЧисленностьПоМесяцам.Совместитель
	 |			ТОГДА 0
	 |		ИНАЧЕ ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(СредняяЧисленностьПоМесяцам.КоличествоСотрудников / СредняяЧисленностьПоМесяцам.ДнейВМесяце КАК ЧИСЛО(15, 0))) / КОЛИЧЕСТВО(СредняяЧисленностьПоМесяцам.Месяц), 0)
	 |	КОНЕЦ КАК СреднесписочнаяЧисленность,
	 |	ВЫБОР
	 |		КОГДА СредняяЧисленностьПоМесяцам.Совместитель
	 |			ТОГДА ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(СредняяЧисленностьПоМесяцам.КоличествоСотрудников / СредняяЧисленностьПоМесяцам.ДнейВМесяце КАК ЧИСЛО(15, 0))) / КОЛИЧЕСТВО(СредняяЧисленностьПоМесяцам.Месяц), 0)
	 |		ИНАЧЕ 0
	 |	КОНЕЦ КАК СреднесписочнаяЧисленностьСовместители
	 |ИЗ
	 |	ВТСредняяЧисленностьПоМесяцам КАК СредняяЧисленностьПоМесяцам
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	СредняяЧисленностьПоМесяцам.Совместитель
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ВЫРАЗИТЬ(ЕСТЬNULL(НачислениеЗарплатыНачисления.Результат, 0) / 1000 КАК ЧИСЛО(15, 1)) КАК ВыплатыСоциальногоХарактера,
	 |	НачислениеЗарплатыНачисления.Сотрудник
	 |ИЗ
	 |	Документ.НачислениеЗарплаты.Начисления КАК НачислениеЗарплатыНачисления
	 |ГДЕ
	 |	НачислениеЗарплатыНачисления.Ссылка.Организация = &Организация
	 |	И НачислениеЗарплатыНачисления.Ссылка.МесяцНачисления МЕЖДУ &НачалоГода И &ОкончаниеИнтервала
	 |	И НачислениеЗарплатыНачисления.Начисление В
	 |			(ВЫБРАТЬ
	 |				ВидыНачисленийСоциальногоХарактера.Начисление КАК Начисление
	 |			ИЗ
	 |				ВТВидыНачисленийСоциальногоХарактера КАК ВидыНачисленийСоциальногоХарактера)
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ВТСписокСотрудниковИДат.Сотрудник,
	 |	ВТСписокСотрудниковИДат.Месяц,
	 |	СУММА(ЕСТЬNULL(ВТНачислениеЗарплаты.ОтработаноЧасов, 0)) КАК ОтработаноЧасов,
	 |	СУММА(ВЫРАЗИТЬ(ЕСТЬNULL(ВТНачислениеЗарплаты.Результат, 0) / 1000 КАК ЧИСЛО(15, 1))) КАК Результат,
	 |	0 КАК ОтработаноЧасовСовместитель,
	 |	0 КАК РезультатСовместитель,
	 |	ВТСписокСотрудниковИДат.Совместитель
	 |ИЗ
	 |	ВТСписокСотрудниковИДат КАК ВТСписокСотрудниковИДат
	 |		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачислениеЗарплаты КАК ВТНачислениеЗарплаты
	 |		ПО ВТСписокСотрудниковИДат.Сотрудник = ВТНачислениеЗарплаты.Сотрудник
	 |			И ВТСписокСотрудниковИДат.Месяц = ВТНачислениеЗарплаты.МесяцНачисления
	 |ГДЕ
	 |	НЕ ВТСписокСотрудниковИДат.Совместитель
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	ВТСписокСотрудниковИДат.Сотрудник,
	 |	ВТСписокСотрудниковИДат.Месяц,
	 |	ВТСписокСотрудниковИДат.Совместитель
	 |
	 |ОБЪЕДИНИТЬ ВСЕ
	 |
	 |ВЫБРАТЬ
	 |	ВТСписокСотрудниковИДат.Сотрудник,
	 |	ВТСписокСотрудниковИДат.Месяц,
	 |	0,
	 |	0,
	 |	СУММА(ЕСТЬNULL(ВТНачислениеЗарплаты.ОтработаноЧасов, 0)),
	 |	СУММА(ВЫРАЗИТЬ(ЕСТЬNULL(ВТНачислениеЗарплаты.Результат, 0) / 1000 КАК ЧИСЛО(15, 1))),
	 |	ВТСписокСотрудниковИДат.Совместитель
	 |ИЗ
	 |	ВТСписокСотрудниковИДат КАК ВТСписокСотрудниковИДат
	 |		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачислениеЗарплаты КАК ВТНачислениеЗарплаты
	 |		ПО ВТСписокСотрудниковИДат.Сотрудник = ВТНачислениеЗарплаты.Сотрудник
	 |			И ВТСписокСотрудниковИДат.Месяц = ВТНачислениеЗарплаты.МесяцНачисления
	 |ГДЕ
	 |	ВТСписокСотрудниковИДат.Совместитель
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	ВТСписокСотрудниковИДат.Сотрудник,
	 |	ВТСписокСотрудниковИДат.Месяц,
	 |	ВТСписокСотрудниковИДат.Совместитель
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	КОЛИЧЕСТВО(ТекущиеКадровыеДанныеСотрудников.ДатаПриема) КАК Принятые,
	 |	0 КАК Уволенные
	 |ИЗ
	 |	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	 |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	 |		ПО ТекущиеКадровыеДанныеСотрудников.Сотрудник = Сотрудники.Ссылка
	 |			И (ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы))
	 |ГДЕ
	 |	ТекущиеКадровыеДанныеСотрудников.ДатаПриема >= &НачалоГода
	 |	И ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация = &Организация
	 |
	 |ОБЪЕДИНИТЬ ВСЕ
	 |
	 |ВЫБРАТЬ
	 |	0,
	 |	КОЛИЧЕСТВО(ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения)
	 |ИЗ
	 |	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	 |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	 |		ПО ТекущиеКадровыеДанныеСотрудников.Сотрудник = Сотрудники.Ссылка
	 |			И (ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы))
	 |ГДЕ
	 |	ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения <= &ОкончаниеПериодаИнтервала
	 |	И ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1)
	 |	И ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация = &Организация";
	 
	 Запрос.ВыполнитьПакет();
	 
	 Результаты = Запрос.ВыполнитьПакет();
	 КоличестовРезультатов = Результаты.Количество();
	 
	 СведенияОЧисленности           = Результаты[КоличестовРезультатов-4].Выбрать();
	 П010000202 = 0;
	 П010000203 = 0;
	 Пока СведенияОЧисленности.Следующий() Цикл
		 П010000202 = П010000202 + СведенияОЧисленности.СреднесписочнаяЧисленность;
		 П010000203 = П010000203 + СведенияОЧисленности.СреднесписочнаяЧисленностьСовместители;
	 КонецЦикла;
	 
	 СведенияОСоциальныхВыплатах    = Результаты[КоличестовРезультатов-3].Выбрать();
	 П010000211 = 0;
	 Пока СведенияОСоциальныхВыплатах.Следующий() Цикл
		 П010000211 = П010000211 + СведенияОСоциальныхВыплатах.ВыплатыСоциальногоХарактера;
	 КонецЦикла;
	 
	 СведенияОЗаработнойПлате       = Результаты[КоличестовРезультатов-2].Выбрать();
	 П010000205 = 0;
	 П010000206 = 0;
	 П010000208 = 0;
	 П010000209 = 0;
	 Пока СведенияОЗаработнойПлате.Следующий() Цикл
		 П010000205 = П010000205 + СведенияОЗаработнойПлате.ОтработаноЧасов;
		 П010000206 = П010000206 + СведенияОЗаработнойПлате.ОтработаноЧасовСовместитель;
		 П010000208 = П010000208 + СведенияОЗаработнойПлате.Результат;
		 П010000209 = П010000209 + СведенияОЗаработнойПлате.РезультатСовместитель;
	 КонецЦикла;
	 
	 ПоляОтчета = Контейнер.ПолеТабличногоДокументаФормаОтчета;
	 
 	 ПоляОтчета.П0001001В1 = П0001001В1;
	 ПоляОтчета.П0001002В1 = П0001002В1;
	 ПоляОтчета.П0001002А1 = П0001002А1;

	 ПоляОтчета.П010000202 = П010000202;
	 ПоляОтчета.П010000203 = П010000203;
	 ПоляОтчета.П010000205 = П010000205;
	 ПоляОтчета.П010000206 = П010000206;
	 ПоляОтчета.П010000211 = П010000211;
	 ПоляОтчета.П010000205 = П010000205;
	 ПоляОтчета.П010000206 = П010000206;
	 ПоляОтчета.П010000208 = П010000208;
	 ПоляОтчета.П010000209 = П010000209;		
	 
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С ВАРИАНТАМИ ОТЧЕТОВ

// Определяет разделы, в которых доступна панель отчетов.
//
// Параметры:
//   Разделы (Массив) из (ОбъектМетаданных)
//
// Описание:
//   В Разделы необходимо добавить метаданные подсистем тех разделов,
//   в которых размещены команды вызова панелей отчетов.
//
// Например:
//	Разделы.Добавить(Метаданные.Подсистемы.ИмяПодсистемы);
//
Процедура ОпределитьРазделыСВариантамиОтчетов(Разделы) Экспорт
	
	Разделы.Добавить(Метаданные.Подсистемы.ЗарплатаИКадры.Подсистемы.КадровыйУчет);
	Разделы.Добавить(Метаданные.Подсистемы.ЗарплатаИКадры.Подсистемы.Зарплата);
	Разделы.Добавить(Метаданные.Подсистемы.СотрудникиИЗарплата82.Подсистемы.КадровыйУчет);
	Разделы.Добавить(Метаданные.Подсистемы.СотрудникиИЗарплата82.Подсистемы.Зарплата);
		
КонецПроцедуры

Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	
	ЗарплатаКадрыОтчеты.НастроитьВариантыОтчетов(Настройки);
	
КонецПроцедуры

Функция ИспользуетсяТрудЧленовЛетныхЭкипажей() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользуетсяТрудЧленовЛетныхЭкипажей");
	
КонецФункции

Функция ИспользуетсяТрудШахтеров() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользуетсяТрудШахтеров");
	
КонецФункции

Функция ИспользуютсяРаботыСДосрочнойПенсией() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользуютсяРаботыСДосрочнойПенсией");
	
КонецФункции

Функция УдерживаютсяДобровольныеВзносыВПФР() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	Удержания.Ссылка
	|ИЗ
	|	ПланВидовРасчета.Удержания КАК Удержания
	|ГДЕ
	|	Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ДобровольныеВзносыВНПФ)";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

