
////////////////////////////////////////////////////////////////////////////////
// Подсистема "Обработка заявлений абонента 
//             на подключение электронной подписи в модели сервиса".
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура ОбработкаЗаявленийАбонентов() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаявленияАбонентовНаПодключениеЭлектроннойПодписиВМоделиСервиса.Идентификатор,
	|	ЗаявленияАбонентовНаПодключениеЭлектроннойПодписиВМоделиСервиса.Статус,
	|	ЗаявленияАбонентовНаПодключениеЭлектроннойПодписиВМоделиСервиса.ДанныеЗаявления,
	|	ЗаявленияАбонентовНаПодключениеЭлектроннойПодписиВМоделиСервиса.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанных,
	|	ЗаявленияАбонентовНаПодключениеЭлектроннойПодписиВМоделиСервиса.ИдентификаторДокумента
	|ИЗ
	|	РегистрСведений.ЗаявленияАбонентовНаПодключениеЭлектроннойПодписиВМоделиСервиса КАК ЗаявленияАбонентовНаПодключениеЭлектроннойПодписиВМоделиСервиса
	|ГДЕ
	|	(ЗаявленияАбонентовНаПодключениеЭлектроннойПодписиВМоделиСервиса.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Подготовлено)
	|			ИЛИ ЗаявленияАбонентовНаПодключениеЭлектроннойПодписиВМоделиСервиса.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отправлено))";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Статус = Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отправлено Тогда
			ОбработатьИзменениеСтатусаЗаявленияАбонента(Выборка);
		ИначеЕсли Выборка.Статус = Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Подготовлено Тогда
			ВыгрузитьЗаявлениеАбонента(Выборка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ОбработатьИзменениеСтатусаЗаявленияАбонента(Параметры)
	
	Попытка
		Результат = МодульУчетаЗаявленийАбонентаВМоделиСервиса.ПолучитьСтатус(Параметры.Идентификатор);
		Если Результат.Статус <> Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Одобрено
			И Результат.Статус <> Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отклонено Тогда
			Возврат;
		КонецЕсли;
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Электронная подпись в модели сервиса.Обработка заявлений.Обновление статуса'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		Возврат;
	КонецПопытки;
	
	ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, Параметры.ОбластьДанных);
	
	НачатьТранзакцию();
	Попытка
		ЗаявлениеСсылка = Документы.ЗаявлениеАбонентаСпецоператораСвязи.ПолучитьСсылку(Параметры.ИдентификаторДокумента);
		ЗаблокироватьДанныеДляРедактирования(ЗаявлениеСсылка);
				
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.ЗаявлениеАбонентаСпецоператораСвязи");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ЗаявлениеСсылка);
		Блокировка.Заблокировать();
		
		Заявление = ЗаявлениеСсылка.ПолучитьОбъект();
		
		// Проверка существования заявления в БД
		Если Заявление = Неопределено Тогда
			ОтменитьТранзакцию();
			
			ТекстКомментария = НСтр("ru = 'В информационной базе не найдено заявление абонента на подключение с идентификатором ссылки %1.
                                     |Идентификатор записи в регистре %2.
                                     |Вероятно документ был удален пользователем.'");
									
			ТекстКомментария = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстКомментария, Параметры.ИдентификаторДокумента, Параметры.Идентификатор);
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Электронная подпись в модели сервиса.Обработка заявлений.Обновление статуса'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,, ТекстКомментария);
				
			
		    Возврат;
		КонецЕсли;
		
		Заявление.Статус              = Результат.Статус;
		Заявление.ДатаПолученияОтвета = ТекущаяДатаСеанса();
		Если Результат.Свойство("Пояснение") Тогда
			Заявление.СтатусКомментарий = Результат.Пояснение;
		КонецЕсли;
		Если Результат.Свойство("ИдентификаторКлючевогоКонтейнера") Тогда
			Заявление.ИдентификаторКлючевогоКонтейнера = Результат.ИдентификаторКлючевогоКонтейнера;
			
			Если ЗначениеЗаполнено(Заявление.УчетнаяЗапись) Тогда 
				ЗаблокироватьДанныеДляРедактирования(Заявление.УчетнаяЗапись);
				УчетнаяЗапись = Заявление.УчетнаяЗапись.ПолучитьОбъект();
				УчетнаяЗапись.ИдентификаторДокументооборота = Результат.ИдентификаторКлючевогоКонтейнера;
				УчетнаяЗапись.Записать();
			КонецЕсли;
		КонецЕсли;
		Заявление.Записать();
		ОбновитьСтатусЗаявленияВРегистре(Параметры.Идентификатор, Результат.Статус);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Электронная подпись в модели сервиса.Обработка заявлений.Обновление статуса'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, ЭлектроннаяПодписьВМоделиСервиса.ПодробноеПредставлениеИнформацияОбОшибке(ИнформацияОбОшибке()));
	КонецПопытки;
	
	ОбщегоНазначения.УстановитьРазделениеСеанса(Ложь);
	
КонецПроцедуры

Процедура ВыгрузитьЗаявлениеАбонента(Параметры)
	
	ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, Параметры.ОбластьДанных);
	
	НачатьТранзакцию();
	Попытка
		ДанныеЗаявленияТекст = Параметры.ДанныеЗаявления.Получить();
		ДанныеЗаявления = ДесериализоватьДанныеЗаявления(ДанныеЗаявленияТекст);
		
		Если МодульУчетаЗаявленийАбонентаВМоделиСервиса.Добавить(ДанныеЗаявления) Тогда			
			ОбновитьСтатусЗаявленияВРегистре(Параметры.Идентификатор, Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отправлено);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Попытка
			ДокументСсылка = Документы.ЗаявлениеАбонентаСпецоператораСвязи.ПолучитьСсылку(Параметры.ИдентификаторДокумента);
		Исключение
			ДокументСсылка = Неопределено;
		КонецПопытки;
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Электронная подпись в модели сервиса.Обработка заявлений.Выгрузка'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.ЗаявлениеАбонентаСпецоператораСвязи, 
			ДокументСсылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецПопытки;
		
	ОбщегоНазначения.УстановитьРазделениеСеанса(Ложь);
		
КонецПроцедуры

Процедура ОбновитьСтатусЗаявленияВРегистре(Идентификатор, Статус);
	
	КлючЗаписи = РаботаВМоделиСервиса.СоздатьКлючЗаписиРегистраСведенийВспомогательныхДанных(
		РегистрыСведений.ЗаявленияАбонентовНаПодключениеЭлектроннойПодписиВМоделиСервиса,
		Новый Структура("Идентификатор", Идентификатор));
		
	ЗаблокироватьДанныеДляРедактирования(КлючЗаписи);	
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗаявленияАбонентовНаПодключениеЭлектроннойПодписиВМоделиСервиса");
	ЭлементБлокировки.УстановитьЗначение("Идентификатор", Идентификатор);
	Блокировка.Заблокировать();
	
	МенеджерЗаписи = РегистрыСведений.ЗаявленияАбонентовНаПодключениеЭлектроннойПодписиВМоделиСервиса.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Идентификатор = Идентификатор;
	МенеджерЗаписи.Прочитать();
	
	МенеджерЗаписи.Идентификатор = Идентификатор;
	МенеджерЗаписи.Статус = Статус;
	МенеджерЗаписи.Записать();
	
	РазблокироватьДанныеДляРедактирования(КлючЗаписи);
	
КонецПроцедуры

Функция ДесериализоватьДанныеЗаявления(ДанныеЗаявленияТекст)
	
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(ДанныеЗаявленияТекст);
	
	Возврат СериализаторXDTO.ПрочитатьXDTO(ФабрикаXDTO.ПрочитатьXML(Чтение));
	
КонецФункции