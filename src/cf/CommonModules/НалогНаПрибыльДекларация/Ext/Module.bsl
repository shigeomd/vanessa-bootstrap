#Область ПрограммныйИнтерфейс 

// Рассчитывает данные декларации и помещает их в контейнер, поставляемый БРО
//
// Параметры:
//  Контейнер    - см. РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет()
//  Расшифровка  - см. ОбщаяФорма.РасшифровкаПоказателейРегламентированныхОтчетов.ПриСозданииНаСервере()
//  ИмяРедакции  - Строка - Имя редакции отчета в терминах БРО
//  Организация  - СправочникСсылка.Организации
//  КонецПериода - Дата - характеризует отчетный период. Отчетный период всегда начинается с начала года.
//
Процедура ЗаполнитьРегламентированныйОтчет(Контейнер, Расшифровка, ИмяРедакции, Организация, КонецПериода) Экспорт
	
	СхемаРасчета        = СхемаРасчета(Организация, КонецПериода, ОписаниеСуммНалоговыйУчет());
	ОписаниеФормыОтчета = ОписаниеФормыОтчета(ИмяРедакции, СхемаРасчета);
	
	Отбор = НовыйОтборРасчета();
	Для Каждого ПоказательОтчета Из ОписаниеФормыОтчета Цикл
		ЗаполнитьЗначенияСвойств(Отбор.Добавить(), ПоказательОтчета);
	КонецЦикла;
	
	РезультатРасчета = Рассчитать(СхемаРасчета, Отбор);
	
	ПередатьРассчитанныеЗначенияБРО(Контейнер, РезультатРасчета.РассчитанныеЗначения, ОписаниеФормыОтчета, ИмяРедакции, СхемаРасчета);
	ПередатьПротоколРасчетаБРО(Расшифровка,    РезультатРасчета,                      ОписаниеФормыОтчета, ИмяРедакции, СхемаРасчета);
	
КонецПроцедуры

// Определяет перечень ячеек отчета (в терминах БРО), данные для заполнения которых предоставляются прикладным решением.
//
// Параметры:
//  ИмяРедакции - Строка - Имя редакции отчета в терминах БРО
//  Организация  - СправочникСсылка.Организации
//  КонецПериода - Дата - характеризует отчетный период. Отчетный период всегда начинается с начала года.
//
Функция ЗаполняемыеЯчейкиРегламентированногоОтчета(ИмяРедакции, Организация, КонецПериода) Экспорт
	
	Ячейки = Новый Массив;
	
	СхемаРасчета        = СхемаРасчета(Организация, КонецПериода, ОписаниеСуммНалоговыйУчет());
	ОписаниеФормыОтчета = ОписаниеФормыОтчета(ИмяРедакции, СхемаРасчета);
	
	Для Каждого ПоказательОтчета Из ОписаниеФормыОтчета Цикл
		Ячейки.Добавить(НомерПоказателяБРО(ПоказательОтчета, ИмяРедакции));
	КонецЦикла;
	
	// также прикладное решение заполняет служебные ячейки, по которым бро определяет, есть на листе данные или нет
	СлужебныеЯчейки = Новый Массив; // используем отдельный массив, чтобы исключить дубли элементов в Ячейки
	Для Каждого ПоказательОтчета Из ОписаниеФормыОтчета Цикл
		НомерСлужебнойЯчейки = НомерСлужебнойЯчейкиПризнакНалогоплательщика(
			ПоказательОтчета.НомерЛиста,
			ПоказательОтчета.НомерПриложения,
			ИмяРедакции);
		СлужебныеЯчейки.Добавить(НомерСлужебнойЯчейки);
	КонецЦикла;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Ячейки, СлужебныеЯчейки, Истина);
	
	Возврат Новый ФиксированныйМассив(Ячейки);
	
КонецФункции

#КонецОбласти

#Область ПорядокЗаполненияДекларации

#Область СхемаРасчета

// Описывает в общем (прикладном) виде порядок расчета налога на прибыль.
// Порядок расчета включает в себя описание:
// - данных, которые нужно получить из информационной базы
// - арифметических действий, которые нужно с этими данными выполнить
//
// Параметры:
//  Организация  - СправочникСсылка.Организации
//  КонецПериода - Дата - характеризует отчетный период. Отчетный период всегда начинается с начала года.
//  ОписаниеСумм - см. КоллекцииСумм.НовыйОписаниеКоллекцииСумм() - набор сумм, которые нужно рассчитать в соответствии со схемой
//
// Возвращаемое значение:
//  см. НовыйСхемаРасчета()
//
Функция СхемаРасчета(Организация, КонецПериода, ОписаниеСумм)
	
	СхемаРасчета = НовыйСхемаРасчета(Организация, КонецПериода, ОписаниеСумм);

	НачалоНалоговогоПериода = НачалоНалоговогоПериода(КонецПериода);

	#Область Расходы
	
	ДобавитьРасчет(СхемаРасчета, "Расходы");
	ДобавитьСлагаемое(СхемаРасчета, "ПроизводствоРеализация");
	ДобавитьОписание(СхемаРасчета,  "02", "2", "130", "Расходы, связанные с производством и реализацией"); // Ст. 253
	ДобавитьСлагаемое(СхемаРасчета, "Внереализационные"); // Ст. 265
	
	ДобавитьРасчет(СхемаРасчета, "Расходы.ПроизводствоРеализация");
	ДобавитьСлагаемое(СхемаРасчета, "Прямые");
	ДобавитьСлагаемое(СхемаРасчета, "Косвенные");
	ДобавитьОписание(СхемаРасчета,  "02", "2", "040", "Косвенные расходы");
	ДобавитьСлагаемое(СхемаРасчета, "ПрочаяРеализация");
	ДобавитьСлагаемое(СхемаРасчета, "ОсобыйПорядокПризнанияУбытков");
	
	ДобавитьРасчет(СхемаРасчета, "Расходы.Внереализационные");
	ДобавитьСлагаемое(СхемаРасчета, "Затраты");
	ДобавитьОписание(СхемаРасчета,  "02", "2", "200", "Внереализационые расходы"); // п. 1 ст. 265
	ДобавитьСлагаемое(СхемаРасчета, "Убытки");
	ДобавитьОписание(СхемаРасчета,  "02", "2", "300", "Убытки, приравниваемые к внереализационным расходам"); // п. 2 ст. 265
	
	#Область РасходыПрямые
	
	ДобавитьРасчет(СхемаРасчета, "Расходы.ПроизводствоРеализация.Прямые");
	ДобавитьСлагаемое(СхемаРасчета, "РеализацияПродукцииУслуг");
	ДобавитьОписание(СхемаРасчета,  "02", "2", "010", "Прямые расходы, относящиеся к реализованным товарам (продукции), работам, услугам"); // Ст. 318
	ДобавитьСлагаемое(СхемаРасчета, "ТорговыеОперации");
	ДобавитьОписание(СхемаРасчета,  "02", "2", "020", "Прямые расходы по торговым операциям"); // Ст. 320
	
	ДобавитьРасчет(СхемаРасчета, "Расходы.ПроизводствоРеализация.Прямые.РеализацияПродукцииУслуг", Ложь);
	ДобавитьСлагаемое(СхемаРасчета,  "Расходы:СебестоимостьПродаж");
	ДобавитьИсточникДанных(СхемаРасчета, "ПрямыеРасходы");
	ДобавитьВычитаемое(СхемаРасчета, "Расходы.ПроизводствоРеализация.Прямые.ТорговыеОперации.ПокупныеТовары");
	
	ДобавитьРасчет(СхемаРасчета, "Расходы.ПроизводствоРеализация.Прямые.ТорговыеОперации");
	ДобавитьСлагаемое(СхемаРасчета, "ПокупныеТовары");
	ДобавитьОписание(СхемаРасчета,  "02", "2", "030", "Стоимость реализованных покупных товаров");
	ДобавитьСлагаемое(СхемаРасчета, "ТранспортныеРасходы");
	
	ДобавитьРасчет(СхемаРасчета, "Расходы.ПроизводствоРеализация.Прямые.ТорговыеОперации.ПокупныеТовары");
	ДобавитьСлагаемое(СхемаРасчета, "ЧерезСклады");
	ДобавитьСлагаемое(СхемаРасчета, "Транзитом");
	
	ДобавитьРасчет(СхемаРасчета, "Расходы.ПроизводствоРеализация.Прямые.ТорговыеОперации.ТранспортныеРасходы");
	ИсточникДанных = ДобавитьИсточникДанных(СхемаРасчета, "КосвенныеРасходы");
	ИсточникДанных.ОтборДанных.Счет        = ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажу; // в отличие от других косвенных расходов, здесь только один счет
	ИсточникДанных.ОтборДанных.ВидРасходов = Перечисления.ВидыРасходовНУ.ТранспортныеРасходы;
	
	ДобавитьРасчет(СхемаРасчета, "Расходы.ПроизводствоРеализация.Прямые.ТорговыеОперации.ПокупныеТовары.ЧерезСклады");
	ДобавитьСлагаемоеПрямыеРасходы(СхемаРасчета, ПланыСчетов.Хозрасчетный.Товары);
	ДобавитьСлагаемоеПрямыеРасходы(СхемаРасчета, ПланыСчетов.Хозрасчетный.ТорговаяНаценка);
	ДобавитьСлагаемоеПрямыеРасходы(СхемаРасчета, ПланыСчетов.Хозрасчетный.ПокупныеТоварыОтгруженные);
	
	// См. Приказ Минсельхоза от 13.06.2001 № 654
	// "организации на счете 90 отражают также операции по продаже товаров транзитом с участием в расчетах за эти товары: 
	// по дебету счета 90 отражают стоимость товаров согласно расчетным документам поставщиков 
	// (в корреспонденции со счетом 60 "Расчеты с поставщиками и подрядчиками")
	ДобавитьРасчет(СхемаРасчета, "Расходы.ПроизводствоРеализация.Прямые.ТорговыеОперации.ПокупныеТовары.Транзитом");
	ДобавитьСлагаемоеПрямыеРасходы(СхемаРасчета, ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками);
	ДобавитьСлагаемоеПрямыеРасходы(СхемаРасчета, ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками);
	ДобавитьСлагаемоеПрямыеРасходы(СхемаРасчета, ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами);
		
	#КонецОбласти
	
	#Область РасходыКосвенные
	
	ДобавитьРасчет(СхемаРасчета, "Расходы.ПроизводствоРеализация.Косвенные", Ложь);
	ДобавитьСлагаемое(СхемаРасчета,  "Расходы.ПроизводствоРеализация.Косвенные.ОбычныеВидыДеятельности");
	ДобавитьВычитаемое(СхемаРасчета, "Расходы.ПроизводствоРеализация.Прямые.ТорговыеОперации.ТранспортныеРасходы");
	ДобавитьСлагаемое(СхемаРасчета,  "Расходы.ПроизводствоРеализация.Косвенные.Прочие");
	
	// Косвенные.ОбычныеВидыДеятельности
	ДобавитьРасчет(СхемаРасчета, "Расходы.ПроизводствоРеализация.Косвенные.ОбычныеВидыДеятельности");
	Для Каждого Счет Из СчетаКосвенныхРасходов() Цикл
		ДобавитьСлагаемое(СхемаРасчета, Счет.ИмяПредопределенныхДанных);
		ИсточникДанных = ДобавитьИсточникДанных(СхемаРасчета, "КосвенныеРасходы");
		ИсточникДанных.ОтборДанных.Счет = Счет;
	КонецЦикла;
	
	ДобавитьРасчет(СхемаРасчета, "Расходы.ПроизводствоРеализация.Косвенные.ОбычныеВидыДеятельности.Раскрытие");
	ДобавитьСлагаемоеКосвенныеРасходыПоВидуРасходов(СхемаРасчета, Перечисления.ВидыРасходовНУ.НалогиИСборы);
	ДобавитьСлагаемоеКосвенныеРасходыПоВидуРасходов(СхемаРасчета, Перечисления.ВидыРасходовНУ.АмортизационнаяПремия);
	ДобавитьОписание(СхемаРасчета,  "02", "2", "042", "Расходы на капитальные вложения в соответствии с абз. вторым пункта 9 ст. 258 (""амортизационная премия"")");
	ДобавитьСлагаемое(СхемаРасчета, "ИсследованияРазработки");
	ДобавитьОписание(СхемаРасчета,  "02", "2", "052", "Расходы на НИОКР");
	
	ДобавитьРасчет(СхемаРасчета, "Расходы.ПроизводствоРеализация.Косвенные.ОбычныеВидыДеятельности.Раскрытие.ИсследованияРазработки");
	ДобавитьСлагаемоеКосвенныеРасходыПоВидуРасходов(СхемаРасчета, Перечисления.ВидыРасходовНУ.НИОКР);
	ДобавитьСлагаемоеКосвенныеРасходыПоВидуРасходов(СхемаРасчета, Перечисления.ВидыРасходовНУ.НИОКРПоПеречнюПравительстваРФ);
	ДобавитьОписание(СхемаРасчета,  "02", "2", "054", "Расходы на НИОКР в соответствии с п. 7 ст. 262 (по перечню, установленному Правительством)");
	
	// Косвенные.Прочие
	ДобавитьРасчет(СхемаРасчета, "Расходы.ПроизводствоРеализация.Косвенные.Прочие");
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.НалогиИСборы);
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеКосвенныеРасходы);
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеОперационныеДоходыРасходы);
	
	// Косвенные.НалогиИСборы
	ДобавитьРасчет(СхемаРасчета, "Расходы.ПроизводствоРеализация.Косвенные.НалогиИСборы", Ложь);
	ДобавитьОписание(СхемаРасчета,  "02", "2", "041", "Суммы налогов и сборов, за исключением перечисленных в ст. 270");
	ДобавитьСлагаемое(СхемаРасчета, "Расходы.ПроизводствоРеализация.Косвенные.ОбычныеВидыДеятельности.Раскрытие.НалогиИСборы");
	ДобавитьСлагаемое(СхемаРасчета, "Расходы.ПроизводствоРеализация.Косвенные.Прочие.НалогиИСборы");
	
	#КонецОбласти
	
	#Область РасходыПрочаяРеализация
	
	ДобавитьРасчет(СхемаРасчета, "Расходы.ПроизводствоРеализация.ПрочаяРеализация");
	ДобавитьСлагаемое(СхемаРасчета, "ИмущественныеПрава"); // см. также строку 013 в Приложении 1 к Листу 02
	ДобавитьОписание(СхемаРасчета, "02", "2", "059", "Стоимость реализованных имущественных прав, кроме учитываемых в особом порядке в Приложении 3 к Листу 02");
	ДобавитьСлагаемое(СхемаРасчета, "ПрочееИмущество");    // см. также строку 014 в Приложении 1 к Листу 02
	ДобавитьОписание(СхемаРасчета, "02", "2", "060", "Цена приобретения реализованного прочего имущества и расходы, связанные с его реализацией");// подп. 2 п.1 ст. 268
	ДобавитьСлагаемое(СхемаРасчета, "ЦенныеБумаги");       // см. также строку 020 в Приложении 1 к Листу 02
	ДобавитьОписание(СхемаРасчета, "02", "2", "070", "Расходы профессиональных участников рынка ценных бумаг, связанные с реализацией ценных бумаг");
	
	// За исключением доходов и расходов 
	// 1. по операциям, отражаемым в Приложении 3 к Листу 02
	// 2. по реализации права требования после наступления срока платежа 
	//    (см. "Расходы.Внереализационные.Убытки.РеализацияПраваТребованияПослеНаступленияСрокаПлатежа")
	ПрочаяРеализация = Новый Структура;
	// подп. 2.1 п.1 ст. 268
	ПрочаяРеализация.Вставить("ИмущественныеПрава", Новый Массив);
	ПрочаяРеализация.ИмущественныеПрава.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияИмущественныхПравКромеПраваТребования);
	ПрочаяРеализация.ИмущественныеПрава.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияКакОказанияФинансовыхУслуг);
	// подп. 2 п.1 ст. 268
	ПрочаяРеализация.Вставить("ПрочееИмущество", Новый Массив);
	ПрочаяРеализация.ПрочееИмущество.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОбъектовСтроительства);
	ПрочаяРеализация.ПрочееИмущество.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПрочегоИмущества);
	ПрочаяРеализация.Вставить("ЦенныеБумаги", Новый Массив);
	ПрочаяРеализация.ЦенныеБумаги.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияЦенныхБумаг);
	
	Для Каждого ВидРеализуемогоАктива Из ПрочаяРеализация Цикл
		ДобавитьРасчет(СхемаРасчета, "Расходы.ПроизводствоРеализация.ПрочаяРеализация." + ВидРеализуемогоАктива.Ключ);
		Для Каждого ВидСтатьи Из ВидРеализуемогоАктива.Значение Цикл
			ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, ВидСтатьи);
		КонецЦикла;
	КонецЦикла;
	
	#КонецОбласти
	
	#Область РасходыОсобыйПорядокПризнанияУбытков
	// См. также ПрочиеУбытки
	
	ДобавитьРасчет(СхемаРасчета, "Расходы.ПроизводствоРеализация.ОсобыйПорядокПризнанияУбытков");
	ДобавитьСлагаемое(СхемаРасчета, "РасходыТекущегоПериода");   // расходы по операциям, убытки по которым не признаются для целей налогообложения в текущем периоде, но могут быть частично признаны в следующих периодах в составе УбыткиПредыдущихПериодов
	ДобавитьОписание(СхемаРасчета,  "02", "2", "080", "Расходы по операциям, отраженным в Приложении 3 к Листу 02");
	ДобавитьСлагаемое(СхемаРасчета, "УбыткиПредыдущихПериодов"); // в предыдущих периодах соответствующие операции были отражены в составе РасходыТекущегоПериода
	
	ДобавитьРасчет(СхемаРасчета, "Расходы.ПроизводствоРеализация.ОсобыйПорядокПризнанияУбытков.РасходыТекущегоПериода", Ложь);
	ДобавитьСлагаемое(СхемаРасчета, "ПрочиеУбытки.Расходы");// см. Приложение 3 к Листу 02
	
	ДобавитьРасчет(СхемаРасчета, "Расходы.ПроизводствоРеализация.ОсобыйПорядокПризнанияУбытков.УбыткиПредыдущихПериодов", Ложь);
	ДобавитьСлагаемое(СхемаРасчета, "ПрочиеУбытки.ОбслуживающиеПроизводства.Расходы.ПризнанныеПослеПолученияУбытка");// ст. 275.1
	ДобавитьОписание(СхемаРасчета,  "02", "2", "090", "Сумма убытка обслуживающих производств и хозяйств, признаваемая расходами текущего периода");
	ДобавитьСлагаемое(СхемаРасчета, "ПрочиеУбытки.РеализацияАмортизируемогоИмущества.Расходы.ПризнанныеПослеРеализации");//п.3 ст. 268
	ДобавитьОписание(СхемаРасчета,  "02", "2", "100", "Сумма убытка от реализации амортизируемого имущества, признаваемая расходами текущего периода");
	
	#КонецОбласти
	
	#Область РасходыВнереализационные
	
	// Расходы.Внереализационные.Затраты
	ДобавитьРасчет(СхемаРасчета, "Расходы.Внереализационные.Затраты");
	// подп. 1 п. 1 ст. 265
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.СдачаИмуществаВАрендуИлиСубаренду);
	// подп. 2 п. 1 ст. 265
	ДобавитьСлагаемое(СхемаРасчета, "Проценты"); 
	ДобавитьОписание(СхемаРасчета,  "02", "2", "201", "Проценты по долговым обязательствам (кредитам, займам, ценным бумагам, в связи с реструктуризацией задолженности по налогам и др.)"); 
	// подп. 5 и 6 п. 1 ст. 265
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницы);
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницыПоРасчетамВУЕ);
	// подп. 7 п. 1 ст. 265
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.ОтчисленияВОценочныеРезервы);
	// подп. 8 п. 1 ст. 265
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.ЛиквидацияОсновныхСредств);
	ДобавитьОписание(СхемаРасчета, "02", "2", "204", "Расходы на ликвидацию выводимых из эксплуатации основных средств, списание нематериальных активов, демонтаж, разборку, вывоз разобранного имущества, охрану недр и т.п.");
	// подп. 13 п. 1 ст. 265
	ДобавитьСлагаемое(СхемаРасчета, "Нарушения"); 
	ДобавитьОписание(СхемаРасчета,  "02", "2", "205", "Штрафы, пени и иные санкции за нарушение договорных или долговых обязательств, расходы на возмещение причиненного ущерба"); 
	// подп. 14 п. 1 ст. 265
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.НДСПоСписаннойКредиторскойЗадолженности);
	// подп. 15 п. 1 ст. 265
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.РасходыНаУслугиБанков);
	// подп. 18 п. 1 ст. 265
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.ОперацииСФинансовымиИнструментамиСрочныхСделок);
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.ОперацииСФинансовымиИнструментамиСрочныхСделокОР);
	// подп. 19.1 п. 1 ст. 265
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.ПремияПокупателю);
	// подп. 20 п. 1 ст. 265
	// - классификация для целей, связанных с налогом на прибыль
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы);
	// - классификация для целей, не связанных с налогом на прибыль
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.РасходыОтСниженияСтоимостиАктивов);
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.РасходыПоПередачеТоваровБезвозмездноИДляСобственныхНужд);
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.ДолевоеУчастиеВИностранныхОрганизациях);
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.ДолевоеУчастиеВРоссийскихОрганизациях);
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.УчастиеВДругихОрганизациях);
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.РазницаМеждуПервоначальнойИНоминальнойСтоимостьюПоДолговымЦеннымБумагам);
	// - статьи доходов, приведенные для полноты списка
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.БезвозмездноеПолучениеИмуществаРаботУслугИмущественныхПрав);
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыПоГосударственнымЦеннымБумагам);
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0);
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.ВосстановлениеАмортизационнойПремии);
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.КорректировкаПрибылиДоРыночныхЦен);
	
	ДобавитьРасчет(СхемаРасчета, "Расходы.Внереализационные.Затраты.Проценты");
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыКПолучениюУплате);
	ДобавитьОписание(СхемаРасчета, , , , "Проценты, признаваемые исходя из фактических ставок"); 
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыНачисленныеПоСт269);
	ДобавитьОписание(СхемаРасчета, , , , "Проценты, возникшие в результате контролируемых сделок - признаются в пределах лимитов, установленных ст. 269"); 
	
	ДобавитьРасчет(СхемаРасчета, "Расходы.Внереализационные.Затраты.Нарушения");
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате);
	ДобавитьОписание(СхемаРасчета, , , , "Штрафы, пени и иные санкции за нарушение договорных или долговых обязательств"); 
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.ВозмещениеУбытковКПолучениюУплате);
	ДобавитьОписание(СхемаРасчета, , , , "Расходы на возмещение причиненного ущерба"); 
	
	// Расходы.Внереализационные.Убытки
	ДобавитьРасчет(СхемаРасчета, "Расходы.Внереализационные.Убытки");
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет);
	ДобавитьОписание(СхемаРасчета,  "02", "2", "301", "Убытки прошлых налоговых периодов, выявленные в отчетном периоде"); // подп. 1 п. 2 ст. 265
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.СписаниеДебиторскойКредиторскойЗадолженности);
	ДобавитьОписание(СхемаРасчета,  "02", "2", "302", "Суммы безнадежных долгов"); // подп. 2 п. 2 ст. 265
	ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеУбыткиПриравненныеКВнереализационнымРасходам); // подп. 3-7 п. 2 ст. 265
	Если НалоговыйУчет.УбытокОтРеализацииПраваТребованияВключаетсяЕдиновременно(НачалоНалоговогоПериода) Тогда
		// Подп. 7 п. 2 ст. 265 предписывает отражать в составе убытков, приравненных к внереализационным расходам,
		// сумму убытков от реализации права требования.
		//
		// В НК имеется в виду та часть убытков, которая до 2015 года признавалась по истечении срока в 45 дней, установленного п.2 ст. 279 НК.
		// При этом до 2015 года доходы, расходы и часть убытка отражались в Приложении 3 к Листу 02 декларации, 
		// а оставшаяся часть убытка - в строке 300 Приложения 2 к Листу 03.
		//
		// С 2015 года п.2 ст. 279 предписывает всю сумму убытков отражать единовременно.
		// Но формулировка подп. 7 п. 2 ст. 265 осталась неизменной.
		//
		// Из буквального толкования подп. 7 п. 2 ст. 265 следует, что всю сумму убытков следует показать свернуто,
		// в строке 300 Приложения  2 к Листу 03.
		// Однако, такой вариант толкования не снимает противоречия и разночтения.
		// Альтернативный вариант толкования предполагает, что суммы выручки и расходов по таким операциям следует показать в декларации так же
		// как и по остальным операциям реализации прав требования, для которых не установлен особый порядок признания убытков,
		// а именно - в строке 013 Приложения 1 к Листу 02 и строке 059 Приложения 2 к Листу 02 развернуто (отдельно выручку и отдельно расходы).
		// 
		// Здесь применяем буквальное толкование и с 2015 года отражаем сумму убытка свернуто в строке 300 Приложения 2 к Листу 02.
		ДобавитьСлагаемое(СхемаРасчета, "РеализацияПраваТребованияПослеНаступленияСрокаПлатежа");
		
		// См. также "ПрочиеУбытки.УступкаПраваТребования.ПослеСрокаПлатежа"
		ДобавитьРасчет(СхемаРасчета, "Расходы.Внереализационные.Убытки.РеализацияПраваТребованияПослеНаступленияСрокаПлатежа");
		ВидСтатьи = Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияПослеНаступленияСрокаПлатежа;
		ДобавитьВычитаемое(СхемаРасчета,  "Выручка");
		ИсточникДанных = ДобавитьИсточникДанных(СхемаРасчета, "ПрочиеДоходы");
		ИсточникДанных.ОтборДанных.ВидСтатьи = ВидСтатьи;
		ДобавитьСлагаемое(СхемаРасчета,   "Расходы");
		ИсточникДанных = ДобавитьИсточникДанных(СхемаРасчета, "ПрочиеРасходы");
		ИсточникДанных.ОтборДанных.ВидСтатьи = ВидСтатьи;
		ДобавитьОграничение(СхемаРасчета, 0, "Снизу");
		
	КонецЕсли;
	// Слагаемые к Расходы.Внереализационные.Убытки ниже добавлять нельзя, так как этот расчет прерван выше расчетом Расходы.Внереализационные.Убытки.РеализацияПраваТребованияПослеНаступленияСрокаПлатежа
	
	#КонецОбласти
	
	#КонецОбласти
	
	#Область ПрочиеУбытки
	
	// Прочими убытками называем те, которые для целей налогообложения учитываются с учетом ограничений,
	// установленных ст. 268, 275.1, 276, 279, 323.
	// Прочими мы их называем потому, что соответствующие доходы и расходы отражаются на счете 91.
	
	ДобавитьРасчет(СхемаРасчета, "ПрочиеУбытки.НеПризнаютсяДляЦелейНалогообложения", Ложь);
	ДобавитьОписание(СхемаРасчета, "02", "3", "360", "Убытки по операциям, отраженным в Приложении 3 Листа 02");
	
	ДобавитьСлагаемое(СхемаРасчета, "ПрочиеУбытки.РеализацияАмортизируемогоИмущества");
	ДобавитьОписание(СхемаРасчета, "02", "3", "060", "Убытки от реализации амортизируемого имущества", "Убыток"); // п. 9 ст. 262, ст. 268, ст. 323
	
	ДобавитьСлагаемое(СхемаРасчета, "ПрочиеУбытки.УступкаПраваТребования.ДоСрокаПлатежа");
	ДобавитьОписание(СхемаРасчета, "02", "3", "150", "Убыток от реализации права требования долга до наступления срока платежа", "Убыток"); // п. 1 ст. 279 НК
	
	Если Не НалоговыйУчет.УбытокОтРеализацииПраваТребованияВключаетсяЕдиновременно(НачалоНалоговогоПериода) Тогда
		ДобавитьСлагаемое(СхемаРасчета, "ПрочиеУбытки.УступкаПраваТребования.ПослеСрокаПлатежа");
		ДобавитьОписание(СхемаРасчета, "02", "3", "160", "Убыток от реализации права требования долга после наступления срока платежа", "Убыток"); // п. 2 ст. 279 НК
	КонецЕсли;
	
	ДобавитьРасчет(СхемаРасчета, "ПрочиеУбытки.ОбслуживающиеПроизводства"); // Не включается в расчет строки 360
	ДобавитьОписание(СхемаРасчета, "02", "3", "200", "Убытки обслуживающих производств и хозяйств", "Убыток"); // ст. 275.1
	
	// Убыток от реализации некоторого имущества не учитывается для целей налогообложения - ст. 262 (пункт 9).
	// 
	// В тех случаях, когда учитывается, то п. 3. ст. 268:
	// "Полученный убыток включается в состав прочих расходов налогоплательщика равными долями в течение срока, 
	// определяемого как разница между сроком полезного использования этого имущества и фактическим сроком его 
	// эксплуатации до момента реализации."
	//
	// Включение в состав прочих расходов отражается по строке 100 приложения 2 к листу 02.
	//
	// А в периоде получения убытка он исключается из расчета налогооблагаемой базы (ст. 323) 
	// и отражается в приложении 3 к листу 02 в следующем порядке:
	// "Налогоплательщик определяет прибыль (убыток) от реализации или выбытия амортизируемого имущества 
	// на основании аналитического учета по каждому объекту на дату признания дохода (расхода)"
	
	ДобавитьРасчет(СхемаРасчета, "ПрочиеУбытки.РеализацияАмортизируемогоИмущества");
	ДобавитьИсточникДанныхРеализацияАмортизируемогоИмущества(СхемаРасчета, "Убыток"); // Рассчитывается по каждому объекту обособленно как "Выручка минус Расходы.ПриРеализации"
	
	ДобавитьРасчет(СхемаРасчета, "ПрочиеУбытки.РеализацияАмортизируемогоИмущества.КоличествоВсего");
	ДобавитьОписание(СхемаРасчета,  "02", "3", "010", "Количество реализованных объектов амортизируемого имущества");
	ДобавитьИсточникДанныхРеализацияАмортизируемогоИмущества(СхемаРасчета, "КоличествоВсего");
	
	ДобавитьРасчет(СхемаРасчета, "ПрочиеУбытки.РеализацияАмортизируемогоИмущества.КоличествоУбыток");
	ДобавитьОписание(СхемаРасчета,  "02", "3", "020", "Количество объектов амортизируемого имущества, реализованных с убытком");
	ДобавитьИсточникДанныхРеализацияАмортизируемогоИмущества(СхемаРасчета, "КоличествоУбыток");
	
	ДобавитьРасчет(СхемаРасчета, "ПрочиеУбытки.РеализацияАмортизируемогоИмущества.Выручка");
	ДобавитьОписание(СхемаРасчета,  "02", "3", "030", "Выручка от реализации амортизируемого имущества");
	ДобавитьИсточникДанныхРеализацияАмортизируемогоИмущества(СхемаРасчета, "Выручка");

	ДобавитьРасчет(СхемаРасчета, "ПрочиеУбытки.РеализацияАмортизируемогоИмущества.Расходы");
	ДобавитьОписание(СхемаРасчета,  "02", "3", "040", "Расходы, связанные с реализацией амортизируемого имущества (включая остаточную стоимость)");
	// см. также ДобавитьРасчетПрочегоУбытка()
	ДобавитьСлагаемое(СхемаРасчета, "ВключаяПризнанныеПослеРеализации");
	ДобавитьВычитаемое(СхемаРасчета, "ПризнанныеПослеРеализации");
	
	ДобавитьРасчет(СхемаРасчета, "ПрочиеУбытки.РеализацияАмортизируемогоИмущества.Расходы.ВключаяПризнанныеПослеРеализации");
	ДобавитьИсточникДанныхРеализацияАмортизируемогоИмущества(СхемаРасчета, "Расходы");
	ДобавитьРасчет(СхемаРасчета, "ПрочиеУбытки.РеализацияАмортизируемогоИмущества.Расходы.ПризнанныеПослеРеализации");
	ДобавитьИсточникДанныхРеализацияАмортизируемогоИмущества(СхемаРасчета, "РасходыПослеРеализации");
	
	ДобавитьРасчет(СхемаРасчета, "ПрочиеУбытки.РеализацияАмортизируемогоИмущества.Прибыль", Ложь);
	ДобавитьОписание(СхемаРасчета,  "02", "3", "050", "Прибыль от реализации амортизируемого имущества");
	ДобавитьСлагаемое(СхемаРасчета, "ПрочиеУбытки.РеализацияАмортизируемогоИмущества.Выручка");
	ДобавитьВычитаемое(СхемаРасчета, "ПрочиеУбытки.РеализацияАмортизируемогоИмущества.Расходы");
	ДобавитьСлагаемое(СхемаРасчета, "ПрочиеУбытки.РеализацияАмортизируемогоИмущества");
	
	// п.1 ст. 279 НК
	// Уступка продавцом права требования до наступления срока платежа.
	// Убыток от такой реализации для целей налогообложения признается только в пределах,
	// суммы процентов, которые налогоплательщик уплатил бы исходя из ставки процента, определенной в соответствии с п. 1 ст. 279.
	// С 2015 года п. 1 ст. 279 предоставляет выбор налогоплательщику, как определять эту ставку:
	// - либо исходя из публикуемых индексных ставок (п. 1.2 ст. 269)
	// - либо методами, установленными разделом V.1
	// Таким образом, для расчета этого предела в программе нет данных.
	// Здесь рассчитаем только общую сумму убытка и осторожно не признаем ее для целей налогообложения.
	
	ДобавитьРасчетПрочегоУбытка(
		СхемаРасчета,
		"ПрочиеУбытки.УступкаПраваТребования.ДоСрокаПлатежа",
		Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияДоНаступленияСрокаПлатежа,
		"100", "Выручка от реализации права требования долга до наступления срока платежа",
		"120", "Стоимость реализованного права требования долга до наступления срока платежа");
	
	// п.2 ст. 279 НК
	
	// Уступка продавцом права требования после наступления срока платежа.
	// До 2015 года убыток от такой операции принимался в целях налогообложения в следующем порядке:
	// - 50 процентов от суммы убытка подлежат включению в состав внереализационных расходов на дату уступки права требования;
	// - 50 процентов от суммы убытка подлежат включению в состав внереализационных расходов по истечении 45 календарных дней 
	//   с даты уступки права требования.
	// Расчет "старения" суммы убытка в программе не реализован,
	// поэтому всю сумму убытка осторожно не признаем в составе внереализационных расходов текущего периода.
	
	Если Не НалоговыйУчет.УбытокОтРеализацииПраваТребованияВключаетсяЕдиновременно(НачалоНалоговогоПериода) Тогда
		
		// См. также "Расходы.Внереализационные.Убытки.РеализацияПраваТребованияПослеНаступленияСрокаПлатежа"
		
		ДобавитьРасчетПрочегоУбытка(
			СхемаРасчета,
			"ПрочиеУбытки.УступкаПраваТребования.ПослеСрокаПлатежа",
			Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияПослеНаступленияСрокаПлатежа,
			"110", "Выручка от реализации права требования долга после наступления срока платежа",
			"130", "Стоимость реализованного права требования долга	после наступления срока платежа");
			
	КонецЕсли;
			
	// Ст. 275.1
	// Убыток от деятельности, связанной с использованием объектов обслуживающих производств и хозяйств
	// признается для целей налогообложения при соблюдении ряда условий.
	// Если не выполняется хотя бы одно из этих условий,
	// то налогоплательщик вправе перенести убыток на срок, не превышающий десять лет,
	// и направить на его погашение только прибыль, полученную при осуществлении указанных видов деятельности.
	// Здесь рассчитываем только полную сумму убытка, так как не можем определить, выполняются ли эти условия.
	
	ДобавитьРасчетПрочегоУбытка(
		СхемаРасчета,
		"ПрочиеУбытки.ОбслуживающиеПроизводства",
		Перечисления.ВидыПрочихДоходовИРасходов.РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводствИХозяйств,
		"180", "Выручка обслуживающих производств и хозяйств",
		"190", "Расходы обслуживающих производств и хозяйств",
		Перечисления.ВидыРБП.УбыткиПрошлыхЛетОбслуживающихПроизводствИХозяйств);
	
	// Итоги по выручке и расходам
	
	ДобавитьРасчет(СхемаРасчета, "ПрочиеУбытки.Выручка", Ложь);
	ДобавитьОписание(СхемаРасчета, "02", "3", "340", "Выручка по операциям, отраженным в Приложении 3 к Листу 02");
	ДобавитьСлагаемое(СхемаРасчета, "ПрочиеУбытки.РеализацияАмортизируемогоИмущества.Выручка");           // 030
	ДобавитьСлагаемое(СхемаРасчета, "ПрочиеУбытки.УступкаПраваТребования.ДоСрокаПлатежа.Выручка");        // 100
	Если Не НалоговыйУчет.УбытокОтРеализацииПраваТребованияВключаетсяЕдиновременно(НачалоНалоговогоПериода) Тогда
		ДобавитьСлагаемое(СхемаРасчета, "ПрочиеУбытки.УступкаПраваТребования.ПослеСрокаПлатежа.Выручка"); // 110
	КонецЕсли;
	ДобавитьСлагаемое(СхемаРасчета, "ПрочиеУбытки.ОбслуживающиеПроизводства.Выручка");                    // 180
	//210-211
	//240
	
	ДобавитьРасчет(СхемаРасчета, "ПрочиеУбытки.Расходы", Ложь);
	ДобавитьОписание(СхемаРасчета, "02", "3", "350", "Расходы по операциям, отраженным в Приложении 3 к Листу 02");
	ДобавитьСлагаемое(СхемаРасчета, "ПрочиеУбытки.РеализацияАмортизируемогоИмущества.Расходы");               // 040
	ДобавитьСлагаемое(СхемаРасчета, "ПрочиеУбытки.УступкаПраваТребования.ДоСрокаПлатежа.Расходы");            // 120
	Если Не НалоговыйУчет.УбытокОтРеализацииПраваТребованияВключаетсяЕдиновременно(НачалоНалоговогоПериода) Тогда
		ДобавитьСлагаемое(СхемаРасчета, "ПрочиеУбытки.УступкаПраваТребования.ПослеСрокаПлатежа.Расходы");     // 130
	КонецЕсли;
	ДобавитьСлагаемое(СхемаРасчета, "ПрочиеУбытки.ОбслуживающиеПроизводства.Расходы");                        // 190
	//220-221
	//250
	
	#КонецОбласти
	
	Возврат СхемаРасчета;
	
КонецФункции

#КонецОбласти

#Область Соглашения

Функция НачалоНалоговогоПериода(КонецПериода)
	
	Возврат НачалоГода(КонецПериода);
	
КонецФункции

Функция ОписаниеСуммНалоговыйУчет()
	
	ОписаниеСумм = КоллекцииСумм.НовыйОписаниеКоллекцииСумм();
	КоллекцииСумм.ДобавитьНаборСумм(ОписаниеСумм, "НалоговыйУчет", "СуммаНУ");
	Возврат ОписаниеСумм;
	
КонецФункции

#КонецОбласти

#Область РедакцииФормыДекларации

// Составляет перечень показателей, размещенных в форме декларации, 
// с указанием актуальных для редакции этой декларации номеров строк
//
// Параметры:
//  ИмяРедакции  - Строка - Имя редакции отчета в терминах БРО
//  СхемаРасчета - см. СхемаРасчета() - схема, на основании которой составляется описание
// Возвращаемое значение:
//  см. НовыйОписаниеФормыОтчета() 
//
Функция ОписаниеФормыОтчета(ИмяРедакции, СхемаРасчета)
	
	// Поддерживаются редакции КНД 1151006:
	// 1. ФНС РФ, приказ № ММВ-7-3/600@ от 26 ноября 2014 г.                     - "ФормаОтчета2015Кв1"
	// 2. ФНС РФ, приказ N ММВ-7-3/174@ от 22 марта 2012 г. в ред. от 14.11.2013 - "ФормаОтчета2013Кв4"
	//
	// См. также НомерЯчейкиБРО()
	
	ОписаниеФормыОтчета = НовыйОписаниеФормыОтчета();
	
	Для Каждого Показатель Из СхемаРасчета.Показатели Цикл
		Если ЗначениеЗаполнено(Показатель.НомерСтроки) Тогда
			ЗаполнитьЗначенияСвойств(ОписаниеФормыОтчета.Добавить(), Показатель);
		КонецЕсли;
	КонецЦикла;
	
	ОписаниеФормыОтчета.Индексы.Добавить("Имя");
	
	Возврат ОписаниеФормыОтчета;
	
КонецФункции

#КонецОбласти

#Область ЭтапыРасчета

Функция ЭтапыРасчета(ПрименяютсяСпециальныеРежимы)
	
	// Для лучшей иллюстративности расчета, каждый показатель рассчитываем в следующем порядке:
	// - сначала берем полную сумму, отраженную для показателя, скажем оборот по счету 91 по определенным статьям
	// - затем вычитаем
	// -- 1. не учитываемые для целей исчисления налога на прибыль
	// -- 2. относящиеся к специальным режимам налогообложения
	// -- 3. часть распределяемых (для расходов)
	
	ЭтапыРасчета = Новый Массив;
	ЭтапыРасчета.Добавить("Все");
	ЭтапыРасчета.Добавить("НеУчитываемые");
	Если ПрименяютсяСпециальныеРежимы Тогда
		ЭтапыРасчета.Добавить("ОтнесенныеНаСпециальныеРежимы");
		ЭтапыРасчета.Добавить("РаспределенныеНаСпециальныеРежимы");
	КонецЕсли;
	Возврат ЭтапыРасчета;
	
КонецФункции

Функция ЭтапРасчетаСпециальныеРежимы(ЭтапРасчета)
	
	Возврат ЭтапРасчета = "ОтнесенныеНаСпециальныеРежимы" Или ЭтапРасчета = "РаспределенныеНаСпециальныеРежимы";
	
КонецФункции

Функция ОператорЭтапаРасчета(ЭтапРасчета)
	
	// См. комментарий в ЭтапыРасчета()
	
	Если ЭтапРасчета = "НеУчитываемые" 
		Или ЭтапРасчета = "ОтнесенныеНаСпециальныеРежимы"
		Или ЭтапРасчета = "РаспределенныеНаСпециальныеРежимы" Тогда
		Возврат "-";
	Иначе
		Возврат "+";
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеЭтапаРасчета(ЭтапРасчета)
	
	Если ЭтапРасчета = "НеУчитываемые" Тогда
		Представление = НСтр("ru = 'в части, не учитываемой для целей налогообложения'");
	ИначеЕсли ЭтапРасчета = "ОтнесенныеНаСпециальныеРежимы" Тогда
		Представление = НСтр("ru = 'в части, относящейся к видам деятельности с особым порядком налогообложения'");
	ИначеЕсли ЭтапРасчета = "РаспределенныеНаСпециальныеРежимы" Тогда
		Представление = НСтр("ru = 'в части расходов, распределенных на виды деятельности с особым порядком налогообложения'");
	Иначе
		Представление = НСтр("");
	КонецЕсли;
	
	Если ПустаяСтрока(Представление) Тогда
		Возврат Представление;
	КонецЕсли;
	
	ШаблонПредставления = НСтр("ru = '
                                |- %1'");
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления, Представление);
	
КонецФункции

Процедура ОтключитьОтображениеЭтапаРасчетаНеУчитываемые(ЗаписьПротокола, ЭтапРасчета, ОписаниеСумм)
	
	// В отличие от показателей, определяемых на других этапах расчета, не учитываемые для целей налогообложения,
	// как правило, не отражаются в налоговом учете.
	// Исключением могут быть операции, в которых пользователь ошибочно вручную указал сумму НУ.
	// Поэтому, не следует всегда показывать пользователю строки протокола про не учитываемые для целей налогообложения доходы и расходы.
	
	Если ЭтапРасчета <> "НеУчитываемые" Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваОписанияСумм = КоллекцииСумм.ИменаСвойств(ОписаниеСумм);
	Если СвойстваОписанияСумм.Количество() <> 1 Или СвойстваОписанияСумм[0] <> "СуммаНУ" Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьПротокола.ПоказыватьПользователюТолькоЕслиСуммаЗаполнена = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОписаниеИсточниковДанных

Процедура ДобавитьСлагаемоеПрямыеРасходы(СхемаРасчета, КорСчет)
	
	ИмяСлагаемого = КорСчет.ИмяПредопределенныхДанных;
	ДобавитьСлагаемое(СхемаРасчета, ИмяСлагаемого);
	
	ИсточникДанных = ДобавитьИсточникДанных(СхемаРасчета, "ПрямыеРасходы");
	ИсточникДанных.ОтборДанных.КорСчет = КорСчет;
	
КонецПроцедуры

Функция СчетаКосвенныхРасходов()
	
	СчетаКосвенныхРасходов = Новый Массив;
	СчетаКосвенныхРасходов.Добавить(ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажу);
	СчетаКосвенныхРасходов.Добавить(ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходы);
	
	Возврат Новый ФиксированныйМассив(СчетаКосвенныхРасходов);
	
КонецФункции

Процедура ДобавитьСлагаемоеКосвенныеРасходыПоВидуРасходов(СхемаРасчета, ВидСтатьиРасходов)
	
	ИмяСлагаемого = ОбщегоНазначения.ИмяЗначенияПеречисления(ВидСтатьиРасходов);
	ДобавитьСлагаемое(СхемаРасчета, ИмяСлагаемого);
	
	ПолноеИмяПоказателя = ПолноеИмяЗаполняемогоПоказателя(СхемаРасчета);
	
	ТочкаОстановки = ОстановитьПостроениеДерева(СхемаРасчета);
	
	ДобавитьРасчет(СхемаРасчета, ПолноеИмяПоказателя);
	
	Для Каждого Счет Из СчетаКосвенныхРасходов() Цикл
		
		ДобавитьСлагаемое(СхемаРасчета, Счет.ИмяПредопределенныхДанных);
		
		ИсточникДанных = ДобавитьИсточникДанных(СхемаРасчета, "КосвенныеРасходы");
		ИсточникДанных.ОтборДанных.ВидРасходов = ВидСтатьиРасходов;
		ИсточникДанных.ОтборДанных.Счет        = Счет;
		
	КонецЦикла;
	
	ПродолжитьПостроениеДерева(СхемаРасчета, ТочкаОстановки);
	
КонецПроцедуры

Процедура ДобавитьСлагаемоеПрочиеРасходы(СхемаРасчета, ВидСтатьиРасходов)
	
	ИмяСлагаемого = ОбщегоНазначения.ИмяЗначенияПеречисления(ВидСтатьиРасходов);
	ДобавитьСлагаемое(СхемаРасчета, ИмяСлагаемого);
	ИсточникДанных = ДобавитьИсточникДанных(СхемаРасчета, "ПрочиеРасходы");
	ИсточникДанных.ОтборДанных.ВидСтатьи = ВидСтатьиРасходов;
	
КонецПроцедуры

Процедура ДобавитьРасчетПрочегоУбытка(СхемаРасчета, Имя, ВидСтатьи, НомерСтрокиВыручки, ОписаниеВыручки, НомерСтрокиРасходов, ОписаниеРасходов, СпособПереносаУбытка = Неопределено)
	
	НомерЛиста      = "02";
	НомерПриложения = "3";
	
	ДобавитьРасчет(СхемаРасчета, Имя);
	
	// Здесь повторяем формулу, которая приведена для подобных показателей в инструкциях по заполнению,
	// а именно - "-Выручка+Расходы".
	// Это позволит формировать расшифровку в том же стиле, что и текст в инструкции по заполнению.
	
	ДобавитьВычитаемое(СхемаРасчета,  "Выручка");
	ДобавитьОписание(СхемаРасчета,  НомерЛиста, НомерПриложения, НомерСтрокиВыручки, ОписаниеВыручки);
	
	ДобавитьСлагаемое(СхемаРасчета,   "Расходы");
	ДобавитьОписание(СхемаРасчета,  НомерЛиста, НомерПриложения, НомерСтрокиРасходов, ОписаниеРасходов);
	
	ДобавитьОграничение(СхемаРасчета, 0, "Снизу");
	
	ДобавитьРасчет(СхемаРасчета, Имя + ".Выручка");
	ИсточникДанных = ДобавитьИсточникДанных(СхемаРасчета, "ПрочиеДоходы");
	ИсточникДанных.ОтборДанных.ВидСтатьи = ВидСтатьи;
	
	ДобавитьРасчет(СхемаРасчета, Имя + ".Расходы");
	Если СпособПереносаУбытка = Неопределено Тогда
		// не может быть перенесен
		ИсточникДанных = ДобавитьИсточникДанных(СхемаРасчета, "ПрочиеРасходы");
		ИсточникДанных.ОтборДанных.ВидСтатьи = ВидСтатьи;
	Иначе
		ДобавитьСлагаемое(СхемаРасчета,  "ВключаяПризнанныеПослеПолученияУбытка");
		ДобавитьВычитаемое(СхемаРасчета, "ПризнанныеПослеПолученияУбытка");
		
		ДобавитьРасчет(СхемаРасчета, Имя + ".Расходы.ВключаяПризнанныеПослеПолученияУбытка");
		ИсточникДанных = ДобавитьИсточникДанных(СхемаРасчета, "ПрочиеРасходы");
		ИсточникДанных.ОтборДанных.ВидСтатьи = ВидСтатьи;
		
		ДобавитьРасчет(СхемаРасчета, Имя + ".Расходы.ПризнанныеПослеПолученияУбытка");
		ИсточникДанных = ДобавитьИсточникДанных(СхемаРасчета, "ПрочиеРасходыПризнанныеПослеПолученияУбытка");
		ИсточникДанных.ОтборДанных.ВидСтатьи            = ВидСтатьи;
		ИсточникДанных.ОтборДанных.СпособПереносаУбытка = СпособПереносаУбытка;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьИсточникДанныхРеализацияАмортизируемогоИмущества(СхемаРасчета, ИмяПоказателя)
	
	ВидыИмущества = Новый Структура;
	ВидыИмущества.Вставить("ОсновныеСредства",     Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОсновныхСредств);
	ВидыИмущества.Вставить("НематериальныеАктивы", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияНематериальныхАктивов);
	
	Для Каждого ВидИмущества Из ВидыИмущества Цикл
		
		ДобавитьСлагаемое(СхемаРасчета, ВидИмущества.Ключ);
		
		ИсточникДанных = ДобавитьИсточникДанных(СхемаРасчета, "РеализацияАмортизируемогоИмущества");
		ИсточникДанных.ОтборДанных.Показатель = ИмяПоказателя;
		ИсточникДанных.ОтборДанных.ВидСтатьи  = ВидИмущества.Значение;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеДанных // и описание порядка получения данных

// Процедура-маршрутизатор: вызывает конкретные алгоритмы получения данных информационной базы.
// Сами алгоритмы размещены в областях внутри области ПолучениеДанных
//
// Параметры:
//  ПроцессорПолученияДанных - см. НовыйПроцессорПолученияДанных() - структура, определяющая, что нужно сделать.
//                             Результат выполнения - полученные данные - записывается в список задач внутри процессора.
Процедура ПолучитьДанныеИнформационнойБазы(ПроцессорПолученияДанных)
	
	Алгоритм = ПроцессорПолученияДанных.ИмяАлгоритма;
	
	
	Если Алгоритм = "ПрямыеРасходы" Тогда
		
		ПолучитьПрямыеРасходы(ПроцессорПолученияДанных);
		
	ИначеЕсли Алгоритм = "КосвенныеРасходы" Тогда
		
		ПолучитьКосвенныеРасходы(ПроцессорПолученияДанных);
			
	ИначеЕсли Алгоритм = "ПрочиеДоходы" Или Алгоритм = "ПрочиеРасходы" Тогда
		
		ПолучитьПрочиеДоходыРасходы(ПроцессорПолученияДанных, Алгоритм);
		
	ИначеЕсли Алгоритм = "ПрочиеРасходыПризнанныеПослеПолученияУбытка" Тогда
		// См. также ПолучитьРеализацияАмортизируемогоИмущества()
		ПолучитьПрочиеРасходыПризнанныеПослеПолученияУбытка(ПроцессорПолученияДанных);
			
	ИначеЕсли Алгоритм = "РеализацияАмортизируемогоИмущества" Тогда
		
		ПолучитьРеализацияАмортизируемогоИмущества(ПроцессорПолученияДанных);
		
	КонецЕсли;
	
КонецПроцедуры

// Конструктор коллекции, содержащей отбор данных информационной базы, с помощью которого можно параметризовать алгоритм получения данных.
// То есть, отбор содержит те поля, с помощью которых можно управлять тем, какие именно данные будут получены.
// Конкретный набор полей и их семантика определяется алгоритмом.
//
// Параметры:
//  ИмяАлгоритма - Строка
// Возвращаемое значение:
//  Структура - Ключ - имя поля, по которому выполняется отбор, Значение - значение отбора
Функция НовыйОтборДанных(ИмяАлгоритма)
	
	ОтборДанных = Новый Структура;
	
	Если ИмяАлгоритма = "ПрямыеРасходы" Тогда
		ОтборДанных.Вставить("КорСчет", ПланыСчетов.Хозрасчетный.ПустаяСсылка()); // пустая ссылка означает "по всем корсчетам"
	ИначеЕсли ИмяАлгоритма = "КосвенныеРасходы" Тогда
		ОтборДанных.Вставить("Счет",        ПланыСчетов.Хозрасчетный.ПустаяСсылка()); // 90.07 или 90.08
		ОтборДанных.Вставить("ВидРасходов", Перечисления.ВидыРасходовНУ.ПустаяСсылка()); // пустая ссылка означает "по всем видам расходов"
	ИначеЕсли ИмяАлгоритма = "ПрочиеДоходы" Или ИмяАлгоритма = "ПрочиеРасходы" Тогда
		ОтборДанных.Вставить("ВидСтатьи",   Перечисления.ВидыПрочихДоходовИРасходов.ПустаяСсылка());
	ИначеЕсли ИмяАлгоритма = "РеализацияАмортизируемогоИмущества" Тогда
		ОтборДанных.Вставить("Показатель",           ""); // См. РассчитываемыеПоказатели в РеализацияАмортизируемогоИмущества()
		ОтборДанных.Вставить("ВидСтатьи",            Перечисления.ВидыПрочихДоходовИРасходов.ПустаяСсылка());
	ИначеЕсли ИмяАлгоритма = "ПрочиеРасходыПризнанныеПослеПолученияУбытка" Тогда
		ОтборДанных.Вставить("ВидСтатьи",            Перечисления.ВидыПрочихДоходовИРасходов.ПустаяСсылка());
		ОтборДанных.Вставить("СпособПереносаУбытка", Перечисления.ВидыРБП.ПустаяСсылка());
	КонецЕсли;
	
	Возврат ОтборДанных;
	
КонецФункции

// Конструктор коллекции, содержащей условия, в соответствии с которым были получены данные информационной базы.
// Включает в себя 
// - (всегда) - отбор - см. НовыйОтборДанных()
// - (всегда) - счет, по которому получены данные, заданный алгоритмом "жестко"
// - (когда данные получаются из информационной базы с большей детализацией) - другие поля 
// Конкретный набор полей и их семантика определяется алгоритмом.
//
// Параметры:
//  ИмяАлгоритма - Строка
// Возвращаемое значение:
//  Структура - Ключ - имя поля, по которому выполняется отбор, Значение - значение отбора
Функция НовыйУсловиеПолученияДанныхИнформационнойБазы(ИмяАлгоритма)
	
	Условие = НовыйОтборДанных(ИмяАлгоритма);
	
	Если ИмяАлгоритма = "ПрямыеРасходы" Тогда
		Условие.Вставить("Счет",        ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	ИначеЕсли ИмяАлгоритма = "ПрочиеДоходы" Или ИмяАлгоритма = "ПрочиеРасходы" Тогда
		Условие.Вставить("Счет",        ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	ИначеЕсли ИмяАлгоритма = "РеализацияАмортизируемогоИмущества" Тогда
		Условие.Вставить("ВсеРеализованныеОбъекты", Ложь);
		Условие.Вставить("РеализованныйОбъект",     Неопределено); // Справочник.ОсновныеСредства, Справочник.НематериальныеАктивы
		Условие.Вставить("СчетДоходовРасходов",     ПланыСчетов.Хозрасчетный.ПустаяСсылка());
		Условие.Вставить("СчетУбытков",             ПланыСчетов.Хозрасчетный.ПустаяСсылка());
		Условие.Вставить("СпособПереносаУбытка",    Перечисления.ВидыРБП.ПустаяСсылка());
	ИначеЕсли ИмяАлгоритма = "ПрочиеРасходыПризнанныеПослеПолученияУбытка" Тогда
		Условие.Вставить("СчетРасходов",         ПланыСчетов.Хозрасчетный.ПустаяСсылка());
		Условие.Вставить("СчетУбытков",          ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	КонецЕсли;
	
	Возврат Условие;
	
КонецФункции

// Процедура-маршрутизатор: вызывает конкретные алгоритмы подготовки настроек стандартного отчета,
// с помощью которого можно проиллюстрировать шаг расчета.
// Сами алгоритмы размещены в областях внутри области ПолучениеДанных.
//
// Параметры:
//  ЗаписьПротокола	 - см. НовыйПротоколРасчета() - иллюстрируемая запись протокола расчета
//  СхемаРасчета	 - см. НовыйСхемаРасчета()    - общая схема иллюстрируемого расчета
// Возвращаемое значение:
// см. НовыйНастройкиОтчетаПоРегиструБухгалтерии() - настройки отчета в формате, понятном форме РасшифровкаПоказателейРегламентированныхОтчетов.
Функция НастройкиОтчетаРасшифровкаЗначения(ЗаписьПротокола, СхемаРасчета)
	
	Настройки = Неопределено;
	
	Если ЗаписьПротокола.ТипЗаписи = "ПрямыеРасходы" Тогда
		
		Настройки = НастройкиОтчетаПрямыеРасходы(
			ЗаписьПротокола.ЭтапРасчета,
			ЗаписьПротокола.Условие.Счет,
			ЗаписьПротокола.Условие.КорСчет,
			СхемаРасчета);
			
	ИначеЕсли ЗаписьПротокола.ТипЗаписи = "КосвенныеРасходы" Тогда
		
		Настройки = НастройкиОтчетаКосвенныеРасходы(
			ЗаписьПротокола.ЭтапРасчета,
			ЗаписьПротокола.Условие.Счет,
			ЗаписьПротокола.Условие.ВидРасходов,
			СхемаРасчета);
	
	ИначеЕсли ЗаписьПротокола.ТипЗаписи = "ПрочиеДоходы" Или ЗаписьПротокола.ТипЗаписи = "ПрочиеРасходы" Тогда
		
		Настройки = НастройкиОтчетаПрочиеДоходыРасходы(
			ЗаписьПротокола.ЭтапРасчета,
			ЗаписьПротокола.Условие.Счет,
			ЗаписьПротокола.Условие.ВидСтатьи,
			СхемаРасчета);
			
	ИначеЕсли ЗаписьПротокола.ТипЗаписи = "ПрочиеРасходыПризнанныеПослеПолученияУбытка" Тогда
		
		Настройки = НастройкиОтчетаПрочиеРасходыПризнанныеПослеПолученияУбытка(
			ЗаписьПротокола.ЭтапРасчета,
			ЗаписьПротокола.Условие.СчетРасходов,
			ЗаписьПротокола.Условие.ВидСтатьи,
			ЗаписьПротокола.Условие.СчетУбытков,
			ЗаписьПротокола.Условие.СпособПереносаУбытка,
			СхемаРасчета);
		
	ИначеЕсли ЗаписьПротокола.ТипЗаписи = "РеализацияАмортизируемогоИмущества" Тогда
		
		Настройки = НастройкиОтчетаРеализацияАмортизируемогоИмущества(
			ЗаписьПротокола.ЭтапРасчета,
			ЗаписьПротокола.Условие.Показатель,
			ЗаписьПротокола.Условие.ВсеРеализованныеОбъекты,
			ЗаписьПротокола.Условие.РеализованныйОбъект,
			ЗаписьПротокола.Условие.СчетДоходовРасходов,
			ЗаписьПротокола.Условие.ВидСтатьи,
			ЗаписьПротокола.Условие.СчетУбытков,
			ЗаписьПротокола.Условие.СпособПереносаУбытка,
			СхемаРасчета);
			
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

#Область ОбщиеДанные

Процедура СоздатьВременнуюТаблицуСчетаУчета(СчетаУчета, ПроцессорПолученияДанных)
	
	// Это локальная временная таблица - она должна жить только до конца процедуры, в которой создана.
	
	Если ТипЗнч(СчетаУчета) = Тип("Массив") Тогда
		СчетаУчетаМассив = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СчетаУчета);
	Иначе
		СчетаУчетаМассив = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СчетаУчета);
	КонецЕсли;
	
	Запрос = НовыйЗапрос(ПроцессорПолученияДанных.КонтекстРасчета, ПроцессорПолученияДанных.ВременныеТаблицы);
	
	Если СчетаУчетаМассив.Количество() = 0 Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК Счет,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК Ссылка
		|ПОМЕСТИТЬ СчетаУчета
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка";
	Иначе
		
		СхемаЗапроса = Новый СхемаЗапроса;
		
		ЗапросВыбора = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
		ЗапросВыбора.ТаблицаДляПомещения = "СчетаУчета";
		
		Для Индекс = 0 По СчетаУчетаМассив.ВГраница() Цикл
			
			// Шаблон см. выше в ветке с пустым массивом счетов
			
			ИмяПараметра = "ИмяСчета" + Формат(Индекс + 1, "ЧГ=0");
			
			ОператорЗапроса = ЗапросВыбора.Операторы.Добавить();
			ОператорЗапроса.ТипОбъединения = ТипОбъединенияСхемыЗапроса.Объединить;
			ОператорЗапроса.Источники.Добавить("ПланСчетов.Хозрасчетный", "Хозрасчетный");
			ОператорЗапроса.ВыбираемыеПоля.Добавить("&" + ИмяПараметра);
			ОператорЗапроса.ВыбираемыеПоля.Добавить("Хозрасчетный.Ссылка");
			ОператорЗапроса.Отбор.Добавить("Хозрасчетный.Ссылка В ИЕРАРХИИ(&" + ИмяПараметра + ")");
			
			Запрос.УстановитьПараметр(ИмяПараметра, СчетаУчетаМассив[Индекс]);
			
		КонецЦикла;
		
		ЗапросВыбора.Колонки[0].Псевдоним = "Счет";
		ЗапросВыбора.Колонки[1].Псевдоним = "Ссылка";
		ЗапросВыбора.Индекс.Добавить(ЗапросВыбора.Колонки[1]);
		
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
		
	КонецЕсли;
		
	ВыполнитьЗапрос(Запрос, ПроцессорПолученияДанных.ВременныеТаблицы);
	
КонецПроцедуры

Процедура СоздатьВременнуюТаблицуДолиСпециальныеРежимы(ПроцессорПолученияДанных)
	
	// Это глобальная временная таблица - будет существовать до уничтожения процессора
	
	Запрос = НовыйЗапрос(ПроцессорПолученияДанных.КонтекстРасчета, ПроцессорПолученияДанных.ВременныеТаблицы);
	Запрос.Текст = НалоговыйУчет.ТекстЗапросаСоздатьВременнуюТаблицуДолиСпециальныеРежимы();
	ВыполнитьЗапрос(Запрос, ПроцессорПолученияДанных.ВременныеТаблицы, "ДолиСпециальныеРежимы");
	
КонецПроцедуры

Функция НовыйОтборПоЭтапуРасчета(ЭтапРасчета)
	
	Отбор = Новый Структура;
	
	Если ЭтапРасчета = "Все" Тогда
		// дополнительный отбор не требуется по определению
	ИначеЕсли ЭтапРасчета = "НеУчитываемые" Тогда
		Отбор.Вставить("Учитываются",     Ложь);
	ИначеЕсли ЭтапРасчета = "ОтнесенныеНаСпециальныеРежимы" Тогда
		Отбор.Вставить("ВидДеятельности", Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения);
		Отбор.Вставить("Учитываются",     Истина);
	ИначеЕсли ЭтапРасчета = "РаспределенныеНаСпециальныеРежимы" Тогда
		Отбор.Вставить("ВидДеятельности", Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты);
		Отбор.Вставить("Учитываются",     Истина);
	КонецЕсли;
	
	Возврат Отбор;
	
КонецФункции

#КонецОбласти

#Область ПрямыеРасходы

Процедура ПолучитьПрямыеРасходы(ПроцессорПолученияДанных)
	
	// варианты алгоритма
	Варианты = Новый ТаблицаЗначений;
	Варианты.Колонки.Добавить("ОтборПоКорСчетам", Новый ОписаниеТипов("Булево"));
	Варианты.Колонки.Добавить("Задачи",           Новый ОписаниеТипов("Массив"));
	Варианты.Колонки.Добавить("КорСчета",         Новый ОписаниеТипов("Массив"));
	Варианты.Колонки.Добавить("ШаблонОписания",   Новый ОписаниеТипов("Строка"));
	
	// 1. сводно
	Вариант = Варианты.Добавить();
	Вариант.ШаблонОписания = НСтр("ru = 'Оборот по дебету счета [Счет][ЭтапРасчета]'");
	Для Каждого Задача Из ПроцессорПолученияДанных.Задачи Цикл
		Если Не ЗначениеЗаполнено(Задача.ОтборДанных.КорСчет) Тогда
			Вариант.Задачи.Добавить(Задача);
		КонецЕсли;
	КонецЦикла;
	
	// 2. по корсчетам
	Вариант = Варианты.Добавить();
	Вариант.ОтборПоКорСчетам = Истина;
	Вариант.ШаблонОписания = НСтр("ru = 'Оборот по дебету счета [Счет] в корреспонденции со счетом [КорСчет][ЭтапРасчета]'");
	Для Каждого Задача Из ПроцессорПолученияДанных.Задачи Цикл
		Если ЗначениеЗаполнено(Задача.ОтборДанных.КорСчет) Тогда
			Вариант.Задачи.Добавить(Задача);
			Вариант.КорСчета.Добавить(Задача.ОтборДанных.КорСчет);
		КонецЕсли;
	КонецЦикла;
	
	// общие параметры получения данных
	СчетСебестоимостиПродаж = ПланыСчетов.Хозрасчетный.СебестоимостьПродаж;
	
	ПараметрыОписания = Новый Структура;
	ПараметрыОписания.Вставить("Счет", СчетСебестоимостиПродаж); // может быть уточнен
	ПараметрыОписания.Вставить("КорСчет");
	ПараметрыОписания.Вставить("ЭтапРасчета");
	
	Для Каждого Вариант Из Варианты Цикл
		
		Если Не ЗначениеЗаполнено(Вариант.Задачи) Тогда
			Продолжить;
		КонецЕсли;
		
		// получение данных из регистра бухгалтерии
		ШаблонТекстаЗапроса = // модифицируется при помощи СхемаЗапроса с небезопасным обращением к элементам запроса по индексу
		"ВЫБРАТЬ
		|	ХозрасчетныйОбороты.Счет КАК Счет,
		|	ХозрасчетныйОбороты.КорСчет КАК КорСчет
		|ПОМЕСТИТЬ ВТ_Обороты
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			Счет В (&СчетаСебестоимостиПродаж),
		|			,
		|			Организация В (&Организации),
		|			КорСчет В
		|				(ВЫБРАТЬ
		|					СчетаУчета.Ссылка
		|				ИЗ
		|					СчетаУчета),
		|			) КАК ХозрасчетныйОбороты
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КорСчет";
		
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(ШаблонТекстаЗапроса);
		
		Если Вариант.ОтборПоКорСчетам Тогда
			СоздатьВременнуюТаблицуСчетаУчета(Вариант.КорСчета, ПроцессорПолученияДанных);
		Иначе
			// избавимся от условия по кор.счету
			ПакетЗапросов = СхемаЗапроса.ПакетЗапросов[0];
			ОператорВыбрать = ПакетЗапросов.Операторы[0];
			ОператорВыбрать.Источники[0].Источник.Параметры[6].Выражение = Новый ВыражениеСхемыЗапроса("");// УсловиеКорСчета
			ОператорВыбрать.ВыбираемыеПоля.Удалить(1); // КорСчет. Автоматически будет удален индекс
			ПакетЗапросов.Индекс.Добавить("Счет");
		КонецЕсли;
	
		ДобавитьКолонкиСумм(СхемаЗапроса, "ХозрасчетныйОбороты.%ОборотДт", ПроцессорПолученияДанных.ОписаниеСумм);
	
		Запрос = НовыйЗапрос(ПроцессорПолученияДанных.КонтекстРасчета, ПроцессорПолученияДанных.ВременныеТаблицы);
		Запрос.УстановитьПараметр("СчетаСебестоимостиПродаж", БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(СчетСебестоимостиПродаж));
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
		ВыполнитьЗапрос(Запрос, ПроцессорПолученияДанных.ВременныеТаблицы); // создана ВТ_Обороты
		
		// Группировка данных регистра бухгалтерии отличается для разных этапов расчета.
		ШаблонТекстаЗапросов = // модифицируется при помощи СхемаЗапроса с небезопасным обращением к элементам запроса по индексу
		"ВЫБРАТЬ
		|	КорСчета.Счет КАК КорСчет,
		|	СчетаДоходовИРасходовЕНВД.Счет КАК Счет
		|ИЗ
		|	ВТ_Обороты КАК Обороты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаУчета КАК КорСчета
		|		ПО Обороты.КорСчет = КорСчета.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СчетаДоходовИРасходовЕНВД КАК СчетаДоходовИРасходовЕНВД
		|		ПО Обороты.Счет = СчетаДоходовИРасходовЕНВД.Счет
		|
		|СГРУППИРОВАТЬ ПО
		|	КорСчета.Счет,
		|	СчетаДоходовИРасходовЕНВД.Счет";
		
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(ШаблонТекстаЗапросов);
		
		Если Не Вариант.ОтборПоКорСчетам Тогда
			// избавимся от соединения с КорСчета
			ПакетЗапросов = СхемаЗапроса.ПакетЗапросов[0];
			ОператорВыбрать = ПакетЗапросов.Операторы[0];
			ОператорВыбрать.Источники.Удалить(1); // КорСчета. Поле и группировка будут удалены автоматически
		КонецЕсли;
	
		ДобавитьКолонкиСумм(СхемаЗапроса, "ЕСТЬNULL(СУММА(Обороты.%), 0)", ПроцессорПолученияДанных.ОписаниеСумм);
		// Пояснение по ЕСТЬNULL:
		// - в этом запросе группировки могут быть удалены
		// - в запросе без группировок агрегатная функция СУММА() приведет к значению NULL, когда данных нет
		
		ТекстыЗапросовЭтаповРасчета = Новый Структура;   // Здесь можем идентифицировать только два этапа, остальные будем пропускать.
		ТекстыЗапросовЭтаповРасчета.Вставить("Все", ""); // ниже определим из той же СхемаЗапроса, убрав информацию о счетах специальных режимов
		ТекстыЗапросовЭтаповРасчета.Вставить("ОтнесенныеНаСпециальныеРежимы", СхемаЗапроса.ПолучитьТекстЗапроса());
		
		ИсточникиЗапроса  = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Источники;
		ИсточникиЗапроса.Удалить(ИсточникиЗапроса.Количество() - 1); // последний - с СчетаДоходовИРасходовЕНВД; автоматически будет удалено и поле Счет
		ТекстыЗапросовЭтаповРасчета.Все = СхемаЗапроса.ПолучитьТекстЗапроса();
		СхемаЗапроса = Неопределено; // использование этого экземпляра ниже может привести к ошибкам
		
		Выборки = Новый Структура;
		Запрос = НовыйЗапрос(ПроцессорПолученияДанных.КонтекстРасчета, ПроцессорПолученияДанных.ВременныеТаблицы);
		Для Каждого ЭтапРасчета Из ПроцессорПолученияДанных.ЭтапыРасчета Цикл
			Если ТекстыЗапросовЭтаповРасчета.Свойство(ЭтапРасчета) Тогда
				Запрос.Текст = ТекстыЗапросовЭтаповРасчета[ЭтапРасчета];
				РезультатЗапроса = ВыполнитьЗапрос(Запрос, ПроцессорПолученияДанных.ВременныеТаблицы);
				Выборки.Вставить(ЭтапРасчета, РезультатЗапроса.Выбрать());
			КонецЕсли;
		КонецЦикла;
	
		// Запишем результат
		Для Каждого Задача Из Вариант.Задачи Цикл
			
			Если Не Выборки.Свойство(Задача.ЭтапРасчета) Тогда
				// не можем идентифицировать такие расходы
				ПропуститьПолучениеДанных(ПроцессорПолученияДанных, Задача);
				Продолжить;
			КонецЕсли;
			
			// описание
			ПараметрыОписания.КорСчет     = Задача.ОтборДанных.КорСчет;
			ПараметрыОписания.ЭтапРасчета = ПредставлениеЭтапаРасчета(Задача.ЭтапРасчета);
				
			// расчет 
			Отбор = Новый Структура;
			Если Вариант.ОтборПоКорСчетам Тогда
				Отбор.Вставить("КорСчет", Задача.ОтборДанных.КорСчет);
			КонецЕсли;
			
			Выборка = Выборки[Задача.ЭтапРасчета];
			Выборка.Сбросить(); // Используем обход выборки, чтобы сохранить порядок, выбранный запросом
			
			Пока Выборка.НайтиСледующий(Отбор) Цикл
				
				КоллекцииСумм.Сложить(Задача, Выборка, ПроцессорПолученияДанных.ОписаниеСумм);
				
				// протокол - детально по субсчетам
				Если Задача.ЭтапРасчета <> "Все" Тогда
					
					ПараметрыОписанияДетально = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыОписания);
					ПараметрыОписанияДетально.Вставить("Счет",        Выборка.Счет);
					ПараметрыОписанияДетально.Вставить("ЭтапРасчета", ""); // и так понятно из номера счета
					
					ЗаписьПротокола = ДобавитьЗаписьПротоколаПолученияДанныхИнформационнойБазы(ПроцессорПолученияДанных, Задача, Выборка);
					ЗаписьПротокола.Описание = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
						Вариант.ШаблонОписания,
						ПараметрыОписанияДетально);
					ЗаполнитьЗначенияСвойств(ЗаписьПротокола.Условие, Выборка);
					
				КонецЕсли;
				
			КонецЦикла;
			
			// протокол - сводно
			Если Не Задача.ПротоколЗаполнен Тогда
				ЗаписьПротокола = ДобавитьЗаписьПротоколаПолученияДанныхИнформационнойБазы(ПроцессорПолученияДанных, Задача);
				ЗаписьПротокола.Описание        = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Вариант.ШаблонОписания, ПараметрыОписания);
				ЗаписьПротокола.Условие.Счет    = СчетСебестоимостиПродаж;
				ЗаписьПротокола.Условие.КорСчет = Задача.ОтборДанных.КорСчет;
			КонецЕсли;
			
		КонецЦикла; // Задачи
	КонецЦикла; // Варианты
	
КонецПроцедуры

Функция НастройкиОтчетаПрямыеРасходы(ЭтапРасчета, Счет, КорСчет, СхемаРасчета)
		
	Настройки = НовыйНастройкиОтчетаПоРегиструБухгалтерии(
		"ОборотыСчета",
		СхемаРасчета.КонтекстРасчета.Организация,
		СхемаРасчета.КонтекстРасчета.НачалоПериода,
		СхемаРасчета.КонтекстРасчета.КонецПериода,
		Счет,
		СхемаРасчета.ОписаниеСумм);
		
	Если ЗначениеЗаполнено(КорСчет) Тогда
		ДобавитьОтборВНастройкиОтчета(Настройки, "КорСчетОтбор", КорСчет, ВидСравненияКомпоновкиДанных.ВИерархии);
	КонецЕсли;
	
	// состав субконто - по умолчанию
	ОписаниеСубконто = ОписаниеСубконтоСчета("Субконто", Счет, 1);
	Если ОписаниеСубконто <> Неопределено Тогда
		ДобавитьГруппировкуВНастройкиОтчета(Настройки, ОписаниеСубконто.Имя, ОписаниеСубконто.Представление);
	КонецЕсли;
	
	СвойстваОтчета = Настройки.Отчет.ПользовательскиеНастройки.ДополнительныеСвойства;
	СвойстваОтчета.Вставить("ОборотыЗаПериодДт", Истина);
	СвойстваОтчета.Вставить("ПоСубсчетам", 		 Ложь);
	
	Возврат Настройки;
		
КонецФункции

#КонецОбласти

#Область КосвенныеРасходы

Процедура ПолучитьКосвенныеРасходы(ПроцессорПолученияДанных)
	
	// варианты алгоритма
	Варианты = Новый ТаблицаЗначений;
	Варианты.Колонки.Добавить("ОтборПоВидамРасходов", Новый ОписаниеТипов("Булево"));
	Варианты.Колонки.Добавить("Задачи",               Новый ОписаниеТипов("Массив"));
	Варианты.Колонки.Добавить("ВидыРасходов",         Новый ОписаниеТипов("Массив"));
	Варианты.Колонки.Добавить("ШаблонОписания",       Новый ОписаниеТипов("Строка"));
	
	// 1. сводно
	Вариант = Варианты.Добавить();
	Вариант.ШаблонОписания = НСтр("ru = 'Оборот по дебету счета [Счет][ЭтапРасчета]'");
	Для Каждого Задача Из ПроцессорПолученияДанных.Задачи Цикл
		Если Не ЗначениеЗаполнено(Задача.ОтборДанных.ВидРасходов) Тогда
			Вариант.Задачи.Добавить(Задача);
		КонецЕсли;
	КонецЦикла;
	
	// 2. по видам расходов
	Вариант = Варианты.Добавить();
	Вариант.ОтборПоВидамРасходов = Истина;
	Вариант.ШаблонОписания = НСтр("ru = 'Оборот по дебету счета [Счет] в корреспонденции со счетами затрат по статьям вида ""[ВидРасходов]""[ЭтапРасчета]'");
	Для Каждого Задача Из ПроцессорПолученияДанных.Задачи Цикл
		Если ЗначениеЗаполнено(Задача.ОтборДанных.ВидРасходов) Тогда
			Вариант.Задачи.Добавить(Задача);
			Вариант.ВидыРасходов.Добавить(Задача.ОтборДанных.ВидРасходов);
		КонецЕсли;
	КонецЦикла;
	
	// общие параметры получения данных
	СчетаУчета   = Новый Массив;
	Для Каждого Задача Из ПроцессорПолученияДанных.Задачи Цикл
		СчетаУчета.Добавить(Задача.ОтборДанных.Счет);
	КонецЦикла;
	
	ПараметрыОписания = Новый Структура;
	ПараметрыОписания.Вставить("Счет");        // 90.07, 90.08 или их субсчета
	ПараметрыОписания.Вставить("ВидРасходов");
	ПараметрыОписания.Вставить("ЭтапРасчета");
	
	// Получение данных регистра бухгалтерии
	СоздатьВременнуюТаблицуСчетаУчета(СчетаУчета, ПроцессорПолученияДанных);
	
	Запрос = НовыйЗапрос(ПроцессорПолученияДанных.КонтекстРасчета, ПроцессорПолученияДанных.ВременныеТаблицы);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Движения.СчетДт КАК Счет,
	|	ВЫБОР
	|		КОГДА Движения.ВидСубконтоКт1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
	|			ТОГДА Движения.СубконтоКт1
	|		КОГДА Движения.ВидСубконтоКт2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
	|			ТОГДА Движения.СубконтоКт2
	|		КОГДА Движения.ВидСубконтоКт3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
	|			ТОГДА Движения.СубконтоКт3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)
	|	КОНЕЦ КАК СтатьяЗатрат,
	|	СУММА(Движения.Сумма) КАК Сумма,
	|	СУММА(Движения.СуммаНУДт) КАК СуммаНУ,
	|	СУММА(Движения.СуммаПРДт) КАК СуммаПР,
	|	СУММА(Движения.СуммаВРДт) КАК СуммаВР
	|ПОМЕСТИТЬ ВТ_Обороты
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Организация В (&Организации)
	|				И Активность
	|				И СчетДт В
	|					(ВЫБРАТЬ
	|						СчетаУчета.Ссылка
	|					ИЗ
	|						СчетаУчета),
	|			,
	|			) КАК Движения
	|
	|СГРУППИРОВАТЬ ПО
	|	Движения.СчетДт,
	|	ВЫБОР
	|		КОГДА Движения.ВидСубконтоКт1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
	|			ТОГДА Движения.СубконтоКт1
	|		КОГДА Движения.ВидСубконтоКт2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
	|			ТОГДА Движения.СубконтоКт2
	|		КОГДА Движения.ВидСубконтоКт3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
	|			ТОГДА Движения.СубконтоКт3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтатьяЗатрат";
	
	ВыполнитьЗапрос(Запрос, ПроцессорПолученияДанных.ВременныеТаблицы); // Создана ВТ_Обороты
	
	// Для группировки нужна информация о статьях затрат
	Запрос = НовыйЗапрос(ПроцессорПолученияДанных.КонтекстРасчета, ПроцессорПолученияДанных.ВременныеТаблицы);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатьиЗатрат.Ссылка КАК Ссылка,
	|	СтатьиЗатрат.ВидРасходовНУ КАК ВидРасходов,
	|	СтатьиЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат КАК ВидДеятельности,
	|	ВЫБОР
	|		КОГДА СтатьиЗатрат.ВидРасходовНУ = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Учитываются
	|ПОМЕСТИТЬ ВТ_СтатьиЗатрат
	|ИЗ
	|	Справочник.СтатьиЗатрат КАК СтатьиЗатрат
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	ВыполнитьЗапрос(Запрос, ПроцессорПолученияДанных.ВременныеТаблицы);
	
	// Группировка данных регистра бухгалтерии отличается для разных вариантов и этапов расчета.
	// Всего пять вариантов группировки: два для этапа "Все" (с отбором и без) и по одному для остальных этапов.
	ТекстыЗапросовЭтаповРасчета = Новый Структура;
	// 1a - Все, без отбора
	ТекстЗапроса = // модифицируется при помощи СхемаЗапроса
	"ВЫБРАТЬ
	|	СчетаУчета.Счет КАК Счет
	|ИЗ
	|	ВТ_Обороты КАК Обороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаУчета КАК СчетаУчета
	|		ПО Обороты.Счет = СчетаУчета.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетаУчета.Счет";
	ТекстыЗапросовЭтаповРасчета.Вставить("Все_БезОтбора", ТекстЗапроса);
	
	// 1b - Все, с отбором
	ТекстЗапроса = // модифицируется при помощи СхемаЗапроса
	"ВЫБРАТЬ
	|	СчетаУчета.Счет КАК Счет,
	|	СтатьиЗатрат.ВидРасходов КАК ВидРасходов
	|ИЗ
	|	ВТ_Обороты КАК Обороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаУчета КАК СчетаУчета
	|		ПО Обороты.Счет = СчетаУчета.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СтатьиЗатрат КАК СтатьиЗатрат
	|		ПО Обороты.СтатьяЗатрат = СтатьиЗатрат.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетаУчета.Счет,
	|	СтатьиЗатрат.ВидРасходов";
	ТекстыЗапросовЭтаповРасчета.Вставить("Все", ТекстЗапроса);
		
	// 2 - НеУчитываемые
	ТекстЗапроса = // модифицируется при помощи СхемаЗапроса
	"ВЫБРАТЬ
	|	СчетаУчета.Счет КАК Счет,
	|	СтатьиЗатрат.ВидРасходов КАК ВидРасходов
	|ИЗ
	|	ВТ_Обороты КАК Обороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаУчета КАК СчетаУчета
	|		ПО Обороты.Счет = СчетаУчета.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СтатьиЗатрат КАК СтатьиЗатрат
	|		ПО Обороты.СтатьяЗатрат = СтатьиЗатрат.Ссылка
	|			И (НЕ СтатьиЗатрат.Учитываются)
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетаУчета.Счет,
	|	СтатьиЗатрат.ВидРасходов";
	ТекстыЗапросовЭтаповРасчета.Вставить("НеУчитываемые", ТекстЗапроса);
	
	// 3 - ОтнесенныеНаСпециальныеРежимы
	ТекстЗапроса = // модифицируется при помощи СхемаЗапроса
	"ВЫБРАТЬ
	|	СчетаУчета.Счет КАК Счет,
	|	СчетаДоходовИРасходовЕНВД.Счет КАК СчетСпециальныеРежимы,
	|	ЕСТЬNULL(СтатьиЗатрат.ВидРасходов, ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.ПустаяСсылка)) КАК ВидРасходов
	|ИЗ
	|	ВТ_Обороты КАК Обороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаУчета КАК СчетаУчета
	|		ПО Обороты.Счет = СчетаУчета.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СчетаДоходовИРасходовЕНВД КАК СчетаДоходовИРасходовЕНВД
	|		ПО Обороты.Счет = СчетаДоходовИРасходовЕНВД.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтатьиЗатрат КАК СтатьиЗатрат
	|		ПО Обороты.СтатьяЗатрат = СтатьиЗатрат.Ссылка
	|ГДЕ
	|	ЕСТЬNULL(СтатьиЗатрат.ВидДеятельности, ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)) <> ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты)
	|	И ЕСТЬNULL(СтатьиЗатрат.Учитываются, ИСТИНА)
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетаУчета.Счет,
	|	СчетаДоходовИРасходовЕНВД.Счет,
	|	ЕСТЬNULL(СтатьиЗатрат.ВидРасходов, ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.ПустаяСсылка))";
	ТекстыЗапросовЭтаповРасчета.Вставить("ОтнесенныеНаСпециальныеРежимы", ТекстЗапроса);
	
	// 4 - РаспределенныеНаСпециальныеРежимы
	ТекстЗапроса = // модифицируется при помощи СхемаЗапроса
	"ВЫБРАТЬ
	|	СчетаУчета.Счет КАК Счет,
	|	СчетаДоходовИРасходовЕНВД.Счет КАК СчетСпециальныеРежимы,
	|	СтатьиЗатрат.ВидРасходов КАК ВидРасходов
	|ИЗ
	|	ВТ_Обороты КАК Обороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаУчета КАК СчетаУчета
	|		ПО Обороты.Счет = СчетаУчета.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СчетаДоходовИРасходовЕНВД КАК СчетаДоходовИРасходовЕНВД
	|		ПО Обороты.Счет = СчетаДоходовИРасходовЕНВД.Счет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СтатьиЗатрат КАК СтатьиЗатрат
	|		ПО Обороты.СтатьяЗатрат = СтатьиЗатрат.Ссылка
	|			И (СтатьиЗатрат.ВидДеятельности = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты))
	|			И (СтатьиЗатрат.Учитываются)
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетаУчета.Счет,
	|	СчетаДоходовИРасходовЕНВД.Счет,
	|	СтатьиЗатрат.ВидРасходов";
	ТекстыЗапросовЭтаповРасчета.Вставить("РаспределенныеНаСпециальныеРежимы", ТекстЗапроса);
		
	Выборки = Новый Структура;
	Запрос  = НовыйЗапрос(ПроцессорПолученияДанных.КонтекстРасчета, ПроцессорПолученияДанных.ВременныеТаблицы);
	СхемаЗапроса = Новый СхемаЗапроса;
	Для Каждого ОписаниеТекстаЗапроса Из ТекстыЗапросовЭтаповРасчета Цикл
		Если ОписаниеТекстаЗапроса.Ключ = "Все_БезОтбора" Тогда
			ЭтапРасчета = "Все";
		Иначе
			ЭтапРасчета = ОписаниеТекстаЗапроса.Ключ;
		КонецЕсли;
		Если ПроцессорПолученияДанных.ЭтапыРасчета.Найти(ЭтапРасчета) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СхемаЗапроса.УстановитьТекстЗапроса(ОписаниеТекстаЗапроса.Значение);
		ДобавитьКолонкиСумм(СхемаЗапроса, "СУММА(Обороты.%)", ПроцессорПолученияДанных.ОписаниеСумм);
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
		РезультатЗапроса = ВыполнитьЗапрос(Запрос, ПроцессорПолученияДанных.ВременныеТаблицы);
		Выборки.Вставить(ОписаниеТекстаЗапроса.Ключ, РезультатЗапроса.Выбрать());
	КонецЦикла;
	
	Для Каждого Вариант Из Варианты Цикл
		
		// Запишем результат
		Для Каждого Задача Из Вариант.Задачи Цикл
			
			Если Задача.ЭтапРасчета = "Все" Тогда
				ИмяВыборки = ?(Вариант.ОтборПоВидамРасходов, "Все", "Все_БезОтбора");
			Иначе
				ИмяВыборки = Задача.ЭтапРасчета;
			КонецЕсли;
			
			Если Не Выборки.Свойство(ИмяВыборки) Тогда
				// не можем идентифицировать такие расходы
				ПропуститьПолучениеДанных(ПроцессорПолученияДанных, Задача);
				Продолжить;
			КонецЕсли;
			
			Если Задача.ЭтапРасчета = "НеУчитываемые"
				И Вариант.ОтборПоВидамРасходов
				И Задача.ОтборДанных.ВидРасходов <> Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения Тогда
				// заведомо бессмысленный шаг
				ПропуститьПолучениеДанных(ПроцессорПолученияДанных, Задача);
				Продолжить;
			КонецЕсли;
			
			// описание
			ЗаполнитьЗначенияСвойств(ПараметрыОписания, Задача.ОтборДанных);
			ПараметрыОписания.ЭтапРасчета = ПредставлениеЭтапаРасчета(Задача.ЭтапРасчета);
			
			// расчет 
			Отбор = Новый Структура;
			Отбор.Вставить("Счет", Задача.ОтборДанных.Счет);
			Если Вариант.ОтборПоВидамРасходов Тогда
				Отбор.Вставить("ВидРасходов",  Задача.ОтборДанных.ВидРасходов);
			КонецЕсли;
			
			Выборка = Выборки[Задача.ЭтапРасчета];
			Выборка.Сбросить();
			Пока Выборка.НайтиСледующий(Отбор) Цикл // по счетам учета
				
				КоллекцииСумм.Сложить(Задача, Выборка, ПроцессорПолученияДанных.ОписаниеСумм);
				
				// протокол - детально по субсчетам
				Если ЭтапРасчетаСпециальныеРежимы(Задача.ЭтапРасчета) Тогда
					
					ПараметрыОписанияДетально = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыОписания);
					ПараметрыОписанияДетально.Вставить("Счет", Выборка.СчетСпециальныеРежимы);
					
					ЗаписьПротокола = ДобавитьЗаписьПротоколаПолученияДанныхИнформационнойБазы(ПроцессорПолученияДанных, Задача, Выборка);
					ЗаписьПротокола.Описание     = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
						Вариант.ШаблонОписания,
						ПараметрыОписанияДетально);
					ЗаполнитьЗначенияСвойств(ЗаписьПротокола.Условие, Выборка);
					ЗаписьПротокола.Условие.Счет = Выборка.СчетСпециальныеРежимы;
					
				КонецЕсли;
				
			КонецЦикла;
			
			// протокол - сводно
			Если Не Задача.ПротоколЗаполнен Тогда
				ЗаписьПротокола = ДобавитьЗаписьПротоколаПолученияДанныхИнформационнойБазы(ПроцессорПолученияДанных, Задача);
				ЗаписьПротокола.Описание = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Вариант.ШаблонОписания, ПараметрыОписания);
				ЗаполнитьЗначенияСвойств(ЗаписьПротокола.Условие, Задача.ОтборДанных);
			КонецЕсли;
			
		КонецЦикла; // Задачи
	КонецЦикла; // Варианты
	
КонецПроцедуры

Функция НастройкиОтчетаКосвенныеРасходы(ЭтапРасчета, Счет, ВидРасходов, СхемаРасчета)
		
	Настройки = НовыйНастройкиОтчетаПоРегиструБухгалтерии(
		"ОборотыСчета",
		СхемаРасчета.КонтекстРасчета.Организация,
		СхемаРасчета.КонтекстРасчета.НачалоПериода,
		СхемаРасчета.КонтекстРасчета.КонецПериода,
		Счет,
		СхемаРасчета.ОписаниеСумм);
	
	Отбор = Настройки.Отчет.ПользовательскиеНастройки.Элементы.Найти("Отбор");
	
	ДобавитьГруппировкуВНастройкиОтчета(Настройки, "КорСубконто1", НСтр("ru = 'Кор. Субконто1'"));
	
	СвойстваОтчета = Настройки.Отчет.ПользовательскиеНастройки.ДополнительныеСвойства;
	
	СвойстваОтчета.Вставить("СальдоНаНачалоДт",   Истина);
	СвойстваОтчета.Вставить("ОборотыСоСчетамиДт", Истина);
	СвойстваОтчета.Вставить("ПоСубсчетам",        Ложь);
	
	Если ЗначениеЗаполнено(ВидРасходов) Тогда
		ДобавитьВНастройкиОтчетаОтборПоСвойствамКорСубконто(Настройки, "ВидРасходовНУ", ВидРасходов);
	КонецЕсли;
	
	Если ЭтапРасчета = "НеУчитываемые" Тогда
		
		ДобавитьВНастройкиОтчетаОтборПоСвойствамКорСубконто(
			Настройки,
			"ВидРасходовНУ",
			Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения);
		
	ИначеЕсли ЭтапРасчета = "РаспределенныеНаСпециальныеРежимы" Тогда
			
		ДобавитьВНастройкиОтчетаОтборПоСвойствамКорСубконто(
			Настройки,
			"ВидДеятельностиДляНалоговогоУчетаЗатрат",
			Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты,
			ВидСравненияКомпоновкиДанных.Равно);
			
	ИначеЕсли ЭтапРасчета = "ОтнесенныеНаСпециальныеРежимы" Тогда
		
		// Расходы идентифицируются по счету учета в качестве связанных с видами деятельности, облагаемых налогом в рамках специальных режимов
		// (далее - "связанных со специальными режимами").
		// Однако, среди этих расходов следует выделить расходы, сразу отнесенные на специальные режимы или распределенные позднее.
		// То есть "связанные = отнесенные + распределенные".
		// Для разделения на "отнесенные" и "распределенные" используем свойство корреспондирующей статьи.
		// Так как в общем случае это свойство недостаточно надежный признак, то расходами, отнесенными на специальные режимы считаем все,
		// связанные со специальными режимами, кроме распределенных на специальные режимы.
		
		ДобавитьВНастройкиОтчетаОтборПоСвойствамКорСубконто(
			Настройки,
			"ВидДеятельностиДляНалоговогоУчетаЗатрат",
			Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты,
			ВидСравненияКомпоновкиДанных.НеРавно);
			
	КонецЕсли;
		
	Возврат Настройки;
	
КонецФункции

Процедура ДобавитьВНастройкиОтчетаОтборПоСвойствамКорСубконто(Настройки, ИмяСвойства, ЗначениеОтбора, ВидСравненияОтбора = Неопределено)
	
	Отбор = Настройки.Отчет.ПользовательскиеНастройки.Элементы.Найти("Отбор");
	Если Отбор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ГруппаИЛИ = Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	Для НомерСубконто = 1 По 3 Цикл
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(
			ГруппаИЛИ,
			"КорСубконто" + НомерСубконто + "." + ИмяСвойства,
			ЗначениеОтбора,
			ВидСравненияОтбора,
			,       // Использование
			Истина);// В пользовательские настройки
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ПрочиеДоходыРасходы

// ИмяПоказателя - Строка - "ПрочиеДоходы" или "ПрочиеРасходы"
Процедура ПолучитьПрочиеДоходыРасходы(ПроцессорПолученияДанных, ИмяПоказателя)
	
	// Виды статей
	ВидыСтатей = Новый Массив;
	Для Каждого Задача Из ПроцессорПолученияДанных.Задачи Цикл
		ВидыСтатей.Добавить(Задача.ОтборДанных.ВидСтатьи);
	КонецЦикла;
	СоздатьВременнуюТаблицуСтатьиПрочихДоходовРасходов(ВидыСтатей, ПроцессорПолученияДанных);
	
	// Выполним запрос
	ХарактеристикиДоходовРасходов = ХарактеристикиПрочиеДоходыРасходы(ИмяПоказателя, Ложь);
	РезультатЗапроса = РезультатЗапросаПрочиеДоходыРасходы(ХарактеристикиДоходовРасходов, ПроцессорПолученияДанных);
	
	Выборка = РезультатЗапроса.Выбрать();
	
	// Запишем результат
	Для Каждого Задача Из ПроцессорПолученияДанных.Задачи Цикл
		
		Если Не СтатьяПрочихДоходовРасходовПрименима(Задача.ОтборДанных.ВидСтатьи, ИмяПоказателя, Задача.ЭтапРасчета) Тогда
			ПропуститьПолучениеДанных(ПроцессорПолученияДанных, Задача);
			Продолжить;
		КонецЕсли;
		
		// описание
		ХарактеристикиДоходовРасходов.ПараметрыОписания.ВидСтатьи   = Задача.ОтборДанных.ВидСтатьи;
		ХарактеристикиДоходовРасходов.ПараметрыОписания.ЭтапРасчета = ПредставлениеЭтапаРасчета(Задача.ЭтапРасчета);
			
		// расчет
		Отбор = НовыйОтборПрочихДоходовРасходов(Задача.ЭтапРасчета, Задача.ОтборДанных.ВидСтатьи);
		
		Выборка.Сбросить();
		Пока Выборка.НайтиСледующий(Отбор) Цикл
			
			Если Задача.ЭтапРасчета = "РаспределенныеНаСпециальныеРежимы" И ИмяПоказателя = "ПрочиеРасходы" Тогда
				// Учтем долю специальных режимов
				СуммаСпециальныеРежимы = КоллекцииСумм.НовыйКоллекцияСумм(ПроцессорПолученияДанных.ОписаниеСумм);
				Для Каждого ИмяСвойства Из КоллекцииСумм.ИменаСвойств(ПроцессорПолученияДанных.ОписаниеСумм) Цикл
					СуммаСпециальныеРежимы[ИмяСвойства] = Выборка[ИмяСвойства] * Выборка.ДоляСпециальныеРежимы;
				КонецЦикла;
				КоллекцииСумм.Сложить(Задача, СуммаСпециальныеРежимы, ПроцессорПолученияДанных.ОписаниеСумм);
			Иначе
				КоллекцииСумм.Сложить(Задача, Выборка, ПроцессорПолученияДанных.ОписаниеСумм);
			КонецЕсли;
			
		КонецЦикла;
		
		// протокол
		ЗаписьПротокола = ДобавитьЗаписьПротоколаПолученияДанныхИнформационнойБазы(ПроцессорПолученияДанных, Задача);
		ЗаписьПротокола.Описание = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
			ХарактеристикиДоходовРасходов.ШаблонОписания,
			ХарактеристикиДоходовРасходов.ПараметрыОписания);
		ЗаписьПротокола.Условие.Счет      = ХарактеристикиДоходовРасходов.Счет;
		ЗаписьПротокола.Условие.ВидСтатьи = Задача.ОтборДанных.ВидСтатьи;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ХарактеристикиПрочиеДоходыРасходы(ИмяПоказателя, ДетализироватьПоРеализованнымОбъектам)
	
	Параметры = Новый Структура;
	
	// счета учета
	Параметры.Вставить("Счет", ПланыСчетов.Хозрасчетный[ИмяПоказателя]);
	Если ИмяПоказателя = "ПрочиеРасходы" Тогда
		Параметры.Вставить("СторонаСчета", "Дебет");
	Иначе
		Параметры.Вставить("СторонаСчета", "Кредит");
	КонецЕсли;
	
	// детализация
	Параметры.Вставить("ДетализироватьПоРеализованнымОбъектам", ДетализироватьПоРеализованнымОбъектам);
	Параметры.Вставить("УчитыватьДолиСпециальныеРежимы", (ИмяПоказателя = "ПрочиеРасходы" И Не ДетализироватьПоРеализованнымОбъектам));
	
	// описание расчета
	Если Параметры.СторонаСчета = "Кредит" Тогда
		ШаблонОписания = НСтр("ru = 'Оборот по кредиту счета [Счет] по статьям вида ""[ВидСтатьи]""[ЭтапРасчета]'");
	Иначе
		ШаблонОписания = НСтр("ru = 'Оборот по дебету счета [Счет] по статьям вида ""[ВидСтатьи]""[ЭтапРасчета]'");
	КонецЕсли;
	Параметры.Вставить("ШаблонОписания", ШаблонОписания);
	Параметры.Вставить("ПараметрыОписания", Новый Структура);
	Параметры.ПараметрыОписания.Вставить("Счет", Параметры.Счет);
	Параметры.ПараметрыОписания.Вставить("ВидСтатьи");   // должен быть установлен при подготовке текста описания
	Параметры.ПараметрыОписания.Вставить("ЭтапРасчета"); // должен быть установлен при подготовке текста описания
	
	Возврат Параметры;
	
КонецФункции

Функция РезультатЗапросаПрочиеДоходыРасходы(ХарактеристикиДоходовРасходов, ПроцессорПолученияДанных)
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	Если ХарактеристикиДоходовРасходов.ДетализироватьПоРеализованнымОбъектам Тогда
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РеализуемыеАктивы);
	КонецЕсли;
	
	// Данные регистра бухгалтерии
	ТекстЗапроса = // модифицируется при помощи СхемаЗапроса с небезопасным обращением к элементам запроса по индексу
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Субконто1 КАК СтатьяДоходов
	|ПОМЕСТИТЬ ВТ_Обороты
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Счет В (&Счет),
	|			&ВидыСубконто,
	|			Организация В (&Организации)
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						СтатьиПрочихДоходовРасходов.Ссылка
	|					ИЗ
	|						СтатьиПрочихДоходовРасходов),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтатьяДоходов";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	Если ХарактеристикиДоходовРасходов.СторонаСчета = "Кредит" Тогда
		ШаблонСумм = "ХозрасчетныйОбороты.%ОборотКт";
	Иначе
		ШаблонСумм = "ХозрасчетныйОбороты.%ОборотДт";
	КонецЕсли;
	ДобавитьКолонкиСумм(СхемаЗапроса, ШаблонСумм, ПроцессорПолученияДанных.ОписаниеСумм);
	
	Если ХарактеристикиДоходовРасходов.УчитыватьДолиСпециальныеРежимы Тогда
		// нужна детализация по месяцам, так как в разных месяцах может быть разная доля специальных режимов
		СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Источники[0].Источник.Параметры[2].Выражение = Новый ВыражениеСхемыЗапроса("Месяц");
		ДобавитьПолеСхемыЗапроса(СхемаЗапроса, "Период", "Месяц");
	КонецЕсли;
	
	Если ХарактеристикиДоходовРасходов.ДетализироватьПоРеализованнымОбъектам Тогда
		ДобавитьПолеСхемыЗапроса(СхемаЗапроса, "ХозрасчетныйОбороты.Субконто2", "РеализованныйОбъект");
	КонецЕсли;
	
	Запрос = НовыйЗапрос(ПроцессорПолученияДанных.КонтекстРасчета, ПроцессорПолученияДанных.ВременныеТаблицы);
	Запрос.УстановитьПараметр("Счет",         БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ХарактеристикиДоходовРасходов.Счет));
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	РезультатЗапроса = ВыполнитьЗапрос(Запрос, ПроцессорПолученияДанных.ВременныеТаблицы);
	
	// Группировка данных регистра бухгалтерии
	
	// Соединение с временной таблицей ДолиСпециальныеРежимы используется для расходов.
	// В этом запросе группируем по ДоляСпециальныеРежимы, чтобы избежать ошибок округления:
	// сначала просуммируем по статьям, затем (вне запроса) будем умножать на долю.
	ТекстЗапроса = // модифицируется при помощи СхемаЗапроса
	"ВЫБРАТЬ
	|	СтатьиПрочихДоходовРасходов.ВидСтатьи КАК ВидСтатьи,
	|	СтатьиПрочихДоходовРасходов.ВидДеятельности КАК ВидДеятельности,
	|	СтатьиПрочихДоходовРасходов.Учитываются КАК Учитываются,
	|	ЕСТЬNULL(ДолиСпециальныеРежимы.Доля, 0) КАК ДоляСпециальныеРежимы
	|ИЗ
	|	ВТ_Обороты КАК Обороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтатьиПрочихДоходовРасходов КАК СтатьиПрочихДоходовРасходов
	|		ПО Обороты.СтатьяДоходов = СтатьиПрочихДоходовРасходов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДолиСпециальныеРежимы КАК ДолиСпециальныеРежимы
	|		ПО Обороты.Месяц = ДолиСпециальныеРежимы.Месяц
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(ДолиСпециальныеРежимы.Доля, 0),
	|	СтатьиПрочихДоходовРасходов.ВидСтатьи,
	|	СтатьиПрочихДоходовРасходов.ВидДеятельности,
	|	СтатьиПрочихДоходовРасходов.Учитываются";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	Если ХарактеристикиДоходовРасходов.ДетализироватьПоРеализованнымОбъектам Тогда
		ДобавитьПолеСхемыЗапроса(СхемаЗапроса, "Обороты.РеализованныйОбъект", "РеализованныйОбъект", Истина);
	КонецЕсли;
	
	ДобавитьКолонкиСумм(СхемаЗапроса, "СУММА(Обороты.%)", ПроцессорПолученияДанных.ОписаниеСумм);
		
	Если ХарактеристикиДоходовРасходов.УчитыватьДолиСпециальныеРежимы Тогда
		
		СоздатьВременнуюТаблицуДолиСпециальныеРежимы(ПроцессорПолученияДанных);
		
	Иначе // Удалим соединение с ДолиСпециальныеРежимы
		
		Источники = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Источники;
		КоличествоИсточников = Источники.Количество();
		Для НомерСКонца = 1 По КоличествоИсточников Цикл
			Индекс = КоличествоИсточников - НомерСКонца;
			Если Источники[Индекс].Источник.Псевдоним = "ДолиСпециальныеРежимы" Тогда
				Источники.Удалить(Индекс);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// Выполним запрос
	Запрос = НовыйЗапрос(ПроцессорПолученияДанных.КонтекстРасчета, ПроцессорПолученияДанных.ВременныеТаблицы);
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	Результат = Запрос.Выполнить();
	
	Возврат Результат;
	
КонецФункции

Функция НастройкиОтчетаПрочиеДоходыРасходы(ЭтапРасчета, Счет, ВидСтатьи, СхемаРасчета)
	
	Настройки = НовыйНастройкиОтчетаПоРегиструБухгалтерии(
		"ОборотноСальдоваяВедомостьПоСчету",
		СхемаРасчета.КонтекстРасчета.Организация,
		СхемаРасчета.КонтекстРасчета.НачалоПериода,
		СхемаРасчета.КонтекстРасчета.КонецПериода,
		Счет,
		СхемаРасчета.ОписаниеСумм);
	
	ОписаниеПоляСтатьяДоходовРасходов = ОписаниеСубконтоСчета(
		"Субконто",
		Счет,
		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
		
	Если ОписаниеПоляСтатьяДоходовРасходов <> Неопределено Тогда
		
		ДобавитьГруппировкуВНастройкиОтчета(
			Настройки,
			ОписаниеПоляСтатьяДоходовРасходов.Имя,
			ОписаниеПоляСтатьяДоходовРасходов.Представление);
	
		ДобавитьОтборПрочихДоходовРасходовВНастройкиОтчета(Настройки, ОписаниеПоляСтатьяДоходовРасходов.Имя, ЭтапРасчета, ВидСтатьи);
			
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

Функция ДанныеПоСчетуПрочиеРасходыМожноПолучитьОтчетомОборотыСчета()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	Хозрасчетный.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ Счета
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеРасходы))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ         
	|	Счета.Ссылка 
	|ИЗ
	|	Счета КАК Счета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйВидыСубконто.ВидСубконто КАК ВидСубконто
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Счета КАК Счета
	|		ПО ХозрасчетныйВидыСубконто.Ссылка = Счета.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ХозрасчетныйВидыСубконто.НомерСтроки";

	Результат = Запрос.ВыполнитьПакет();
	
	// субсчетов не должно быть
	Если Результат[1].Выбрать().Количество() <> 1 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// субконто должны быть следующими (в том же порядке):
	ПотребныеСубконто = Новый Массив;
	ПотребныеСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	ПотребныеСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РеализуемыеАктивы);
	
	Выборка = Результат[2].Выбрать();
	Для Каждого ВидСубконто Из ПотребныеСубконто Цикл
		Если Не Выборка.Следующий() Или Выборка.ВидСубконто <> ВидСубконто Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;

КонецФункции

Процедура СоздатьВременнуюТаблицуСтатьиПрочихДоходовРасходов(ВидыДоходовРасходов, ПроцессорПолученияДанных)
	
	Запрос = НовыйЗапрос(ПроцессорПолученияДанных.КонтекстРасчета, ПроцессорПолученияДанных.ВременныеТаблицы);
	Запрос.УстановитьПараметр("ВидыДоходовРасходов", ВидыДоходовРасходов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПрочиеДоходыИРасходы.Ссылка КАК Ссылка,
	|	ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов КАК ВидСтатьи,
	|	ПрочиеДоходыИРасходы.ВидДеятельностиДляНалоговогоУчетаЗатрат КАК ВидДеятельности,
	|	ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету КАК Учитываются
	|ПОМЕСТИТЬ СтатьиПрочихДоходовРасходов
	|ИЗ
	|	Справочник.ПрочиеДоходыИРасходы КАК ПрочиеДоходыИРасходы
	|ГДЕ
	|	ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов В(&ВидыДоходовРасходов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	ВыполнитьЗапрос(Запрос, ПроцессорПолученияДанных.ВременныеТаблицы);
	
КонецПроцедуры

Функция НовыйОтборПрочихДоходовРасходов(ЭтапРасчета, ВидСтатьи)
	

	Отбор = НовыйОтборПоЭтапуРасчета(ЭтапРасчета);
	Отбор.Вставить("ВидСтатьи", ВидСтатьи);
	
	Возврат Отбор;
	
КонецФункции

Процедура ДобавитьОтборПрочихДоходовРасходовВНастройкиОтчета(Настройки, ИмяИлиОписаниеПоля, ЭтапРасчета, ВидСтатьи)
	
	// См. также НовыйОтборПрочихДоходовРасходов(), НастройкиОтчетаПрочиеДоходыРасходы()
	
	Если ТипЗнч(ИмяИлиОписаниеПоля) = Тип("Структура") Тогда
		ИмяПоля = ИмяИлиОписаниеПоля.Имя;
	Иначе
		ИмяПоля = ИмяИлиОписаниеПоля;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ИмяПоля) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьОтборВНастройкиОтчета(Настройки, ИмяПоля + "." + "ВидПрочихДоходовИРасходов", ВидСтатьи);
			
	Если ЭтапРасчета = "НеУчитываемые" Тогда
		
		ДобавитьОтборВНастройкиОтчета(Настройки, ИмяПоля + "." + "ПринятиеКналоговомуУчету", Ложь);
		
	ИначеЕсли ЭтапРасчета = "ОтнесенныеНаСпециальныеРежимы" Тогда
		
		ДобавитьОтборВНастройкиОтчета(
			Настройки, 
			ИмяПоля + "." + "ВидДеятельностиДляНалоговогоУчетаЗатрат",
			Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения);
		
		ДобавитьОтборВНастройкиОтчета(Настройки, ИмяПоля + "." + "ПринятиеКналоговомуУчету", Истина);
		
	КонецЕсли;
		
КонецПроцедуры

Функция СтатьяПрочихДоходовРасходовПрименима(ВидСтатьи, Показатель, ЭтапРасчета)
	
	Если ЭтапРасчета = "РаспределенныеНаСпециальныеРежимы" Тогда
		
		Если Показатель = "ПрочиеДоходы" Или Перечисления.ВидыПрочихДоходовИРасходов.ИспользуетсяДляДоходов(ВидСтатьи) Тогда 
			// доходы не могут быть распределяемыми
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ПрочиеРасходыПризнанныеПослеПолученияУбытка

Процедура ПолучитьПрочиеРасходыПризнанныеПослеПолученияУбытка(ПроцессорПолученияДанных)
	
	ХарактеристикиРасходов = ХарактеристикиРасходыПризнанныеПослеПолученияУбытка(Ложь);
	
	Для Каждого Задача Из ПроцессорПолученияДанных.Задачи Цикл
		ЗаполнитьЗначенияСвойств(ХарактеристикиРасходов.ВидыСтатей.Добавить(), Задача.ОтборДанных);
	КонецЦикла;
	
	СоздатьВременнуюТаблицуСтатьиПрочихДоходовРасходов(
		ХарактеристикиРасходов.ВидыСтатей.ВыгрузитьКолонку("ВидСтатьи"),
		ПроцессорПолученияДанных);
	
	РезультатЗапроса = РезультатЗапросаРасходыПризнанныеПослеПолученияУбытка(ХарактеристикиРасходов, ПроцессорПолученияДанных);
		
	Выборка = РезультатЗапроса.Выбрать();
	
	// Запишем результат
	Для Каждого Задача Из ПроцессорПолученияДанных.Задачи Цикл
		
		Если Не СтатьяПрочихДоходовРасходовПрименима(Задача.ОтборДанных.ВидСтатьи, "ПрочиеРасходы", Задача.ЭтапРасчета) Тогда
			ПропуститьПолучениеДанных(ПроцессорПолученияДанных, Задача);
			Продолжить;
		КонецЕсли;
		
		// описание
		ХарактеристикиРасходов.ПараметрыОписания.ВидСтатьи            = Задача.ОтборДанных.ВидСтатьи;
		ХарактеристикиРасходов.ПараметрыОписания.СпособПереносаУбытка = Задача.ОтборДанных.СпособПереносаУбытка;
		ХарактеристикиРасходов.ПараметрыОписания.ЭтапРасчета          = ПредставлениеЭтапаРасчета(Задача.ЭтапРасчета);
		
		// расчет
		Отбор = НовыйОтборПрочихДоходовРасходов(Задача.ЭтапРасчета, Задача.ОтборДанных.ВидСтатьи);
		Выборка.Сбросить();
		Пока Выборка.НайтиСледующий(Отбор) Цикл
			КоллекцииСумм.Сложить(Задача, Выборка, ПроцессорПолученияДанных.ОписаниеСумм);
		КонецЦикла;
		
		// протокол - сводно
		Если Не Задача.ПротоколЗаполнен Тогда
			ЗаписьПротокола = ДобавитьЗаписьПротоколаПолученияДанныхИнформационнойБазы(ПроцессорПолученияДанных, Задача);
			ЗаписьПротокола.Описание = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
				ХарактеристикиРасходов.ШаблонОписания,
				ХарактеристикиРасходов.ПараметрыОписания);
			ЗаполнитьЗначенияСвойств(ЗаписьПротокола.Условие, ХарактеристикиРасходов);
			ЗаполнитьЗначенияСвойств(ЗаписьПротокола.Условие, Задача.ОтборДанных);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ХарактеристикиРасходыПризнанныеПослеПолученияУбытка(ДетализироватьПоРеализованнымОбъектам)

	Параметры = Новый Структура;
	// счета учета
	Параметры.Вставить("СчетРасходов", ПланыСчетов.Хозрасчетный.ПрочиеРасходы);
	Параметры.Вставить("СчетУбытков",  ПланыСчетов.Хозрасчетный.РасходыБудущихПериодов);
	// аналитика на этих счетах
	Параметры.Вставить("ДетализироватьПоРеализованнымОбъектам",   ДетализироватьПоРеализованнымОбъектам);
	Параметры.Вставить("ВидыСтатей",                              Новый ТаблицаЗначений);
	Параметры.ВидыСтатей.Колонки.Добавить("ВидСтатьи",            Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПрочихДоходовИРасходов"));
	Параметры.ВидыСтатей.Колонки.Добавить("СпособПереносаУбытка", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыРБП"));
	// описание расчета
	Параметры.Вставить(
		"ШаблонОписания",
		НСтр("ru = 'Оборот по дебету счета [СчетРасходов] по статьям вида ""[ВидСтатьи]"" в корреспонденции со счетом [СчетУбытков] по статьям вида ""[СпособПереносаУбытка]""[ЭтапРасчета]'"));
	Параметры.Вставить("ПараметрыОписания", Новый Структура);
	Параметры.ПараметрыОписания.Вставить("СчетРасходов", Параметры.СчетРасходов);
	Параметры.ПараметрыОписания.Вставить("СчетУбытков",  Параметры.СчетУбытков);
	Параметры.ПараметрыОписания.Вставить("ВидСтатьи");            // должен быть установлен при подготовке текста описания
	Параметры.ПараметрыОписания.Вставить("СпособПереносаУбытка"); // должен быть установлен при подготовке текста описания
	Параметры.ПараметрыОписания.Вставить("ЭтапРасчета");          // должен быть установлен при подготовке текста описания

	Возврат Параметры;
		
КонецФункции

Функция РезультатЗапросаРасходыПризнанныеПослеПолученияУбытка(ХарактеристикиРасходов, ПроцессорПолученияДанных)
	
	Запрос = НовыйЗапрос(ПроцессорПолученияДанных.КонтекстРасчета, ПроцессорПолученияДанных.ВременныеТаблицы);
	Запрос.УстановитьПараметр("ВидыСтатей", ХарактеристикиРасходов.ВидыСтатей);
	
	// Получим списки статей переданных видов
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВидыСтатей.ВидСтатьи КАК ВидСтатьи,
	|	ВидыСтатей.СпособПереносаУбытка КАК СпособПереносаУбытка
	|ПОМЕСТИТЬ ВТ_ВидыСтатей
	|ИЗ
	|	&ВидыСтатей КАК ВидыСтатей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходыБудущихПериодов.Ссылка КАК Статья
	|ПОМЕСТИТЬ ВТ_РасходыБудущихПериодов
	|ИЗ
	|	Справочник.РасходыБудущихПериодов КАК РасходыБудущихПериодов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ВидыСтатей КАК ВидыСтатей
	|		ПО РасходыБудущихПериодов.ВидРБП = ВидыСтатей.СпособПереносаУбытка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасходыБудущихПериодов.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатьиПрочихДоходовРасходов.Ссылка КАК Статья
	|ПОМЕСТИТЬ ВТ_ПрочиеДоходыРасходы
	|ИЗ
	|	СтатьиПрочихДоходовРасходов КАК СтатьиПрочихДоходовРасходов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ВидыСтатей КАК ВидыСтатей
	|		ПО СтатьиПрочихДоходовРасходов.ВидСтатьи = ВидыСтатей.ВидСтатьи
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Статья";
	
	ВыполнитьЗапрос(Запрос, ПроцессорПолученияДанных.ВременныеТаблицы); // ВТ_ВидыСтатей, ВТ_РасходыБудущихПериодов, ВТ_ПрочиеДоходыРасходы
	
	Запрос = НовыйЗапрос(ПроцессорПолученияДанных.КонтекстРасчета, ПроцессорПолученияДанных.ВременныеТаблицы);
	Запрос.УстановитьПараметр(
		"СчетаРасходов",
		БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ХарактеристикиРасходов.СчетРасходов));
	ВидыСубконтоСчетаРасходов = Новый Массив;
	ВидыСубконтоСчетаРасходов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	Если ХарактеристикиРасходов.ДетализироватьПоРеализованнымОбъектам Тогда
		ВидыСубконтоСчетаРасходов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РеализуемыеАктивы);
	КонецЕсли;
	Запрос.УстановитьПараметр("ВидыСубконтоСчетаРасходов", ВидыСубконтоСчетаРасходов);
	Запрос.УстановитьПараметр(
		"СчетаРасходовБудущихПериодов",
		БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ХарактеристикиРасходов.СчетУбытков));
		
	ТекстЗапроса = // модифицируется при помощи СхемаЗапроса
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Субконто1 КАК СтатьяДоходов
	|ПОМЕСТИТЬ ВТ_Обороты
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Счет В (&СчетаРасходов),
	|			&ВидыСубконтоСчетаРасходов,
	|			Организация В (&Организации)
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						Статьи.Статья
	|					ИЗ
	|						ВТ_ПрочиеДоходыРасходы КАК Статьи)
	|				И КорСубконто1 В
	|					(ВЫБРАТЬ
	|						Статьи.Статья
	|					ИЗ
	|						ВТ_РасходыБудущихПериодов КАК Статьи),
	|			КорСчет В (&СчетаРасходовБудущихПериодов),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов)) КАК ХозрасчетныйОбороты";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	ДобавитьКолонкиСумм(СхемаЗапроса, "ХозрасчетныйОбороты.%ОборотДт", ПроцессорПолученияДанных.ОписаниеСумм);
	
	Если ХарактеристикиРасходов.ДетализироватьПоРеализованнымОбъектам Тогда
		ДобавитьПолеСхемыЗапроса(СхемаЗапроса, "ХозрасчетныйОбороты.Субконто2", "РеализованныйОбъект");
	КонецЕсли;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	ВыполнитьЗапрос(Запрос, ПроцессорПолученияДанных.ВременныеТаблицы); // ВТ_Обороты
	
	// Группировка данных регистра бухгалтерии
	ТекстЗапроса = // модифицируется при помощи СхемаЗапроса
	"ВЫБРАТЬ
	|	СтатьиПрочихДоходовРасходов.ВидСтатьи КАК ВидСтатьи,
	|	СтатьиПрочихДоходовРасходов.ВидДеятельности КАК ВидДеятельности,
	|	СтатьиПрочихДоходовРасходов.Учитываются КАК Учитываются
	|ИЗ
	|	ВТ_Обороты КАК Обороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтатьиПрочихДоходовРасходов КАК СтатьиПрочихДоходовРасходов
	|		ПО Обороты.СтатьяДоходов = СтатьиПрочихДоходовРасходов.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СтатьиПрочихДоходовРасходов.ВидСтатьи,
	|	СтатьиПрочихДоходовРасходов.ВидДеятельности,
	|	СтатьиПрочихДоходовРасходов.Учитываются";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	Если ХарактеристикиРасходов.ДетализироватьПоРеализованнымОбъектам Тогда
		ДобавитьПолеСхемыЗапроса(СхемаЗапроса, "Обороты.РеализованныйОбъект", "РеализованныйОбъект", Истина);
	КонецЕсли;
	ДобавитьКолонкиСумм(СхемаЗапроса, "СУММА(Обороты.%)", ПроцессорПолученияДанных.ОписаниеСумм);
		
	// Выполним запрос
	Запрос = НовыйЗапрос(ПроцессорПолученияДанных.КонтекстРасчета, ПроцессорПолученияДанных.ВременныеТаблицы);
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	РезультатЗапроса = ВыполнитьЗапрос(Запрос, ПроцессорПолученияДанных.ВременныеТаблицы);
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция НастройкиОтчетаПрочиеРасходыПризнанныеПослеПолученияУбытка(ЭтапРасчета, СчетРасходов, ВидСтатьиРасходов, СчетУбытков, ВидСтатьиУбытков, СхемаРасчета)
	
	ОписанияСчетов = Новый Структура;
	ОписанияСчетов.Вставить("СчетУбытков", Новый Структура);
	ОписанияСчетов.СчетУбытков.Вставить("Префикс",                      ""); // основной счет
	ОписанияСчетов.СчетУбытков.Вставить("Счет",                         СчетУбытков);
	ОписанияСчетов.СчетУбытков.Вставить("ВидСубконто",                  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов);
	ОписанияСчетов.СчетУбытков.Вставить("ШаблонПредставленияСубконто",  НСтр("ru = 'Субконто%1'"));
	ОписанияСчетов.Вставить("СчетРасходов", Новый Структура);
	ОписанияСчетов.СчетРасходов.Вставить("Префикс",                     "Кор");
	ОписанияСчетов.СчетРасходов.Вставить("Счет",                        СчетРасходов);
	ОписанияСчетов.СчетРасходов.Вставить("ВидСубконто",                 ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	ОписанияСчетов.СчетРасходов.Вставить("ШаблонПредставленияСубконто", НСтр("ru = 'Кор. Субконто%1'"));
	
	Для Каждого ОписаниеСчета Из ОписанияСчетов Цикл
		ПрефиксИмениСубконто = ОписаниеСчета.Значение.Префикс + "Субконто";
		ОписаниеПоля = ОписаниеСубконтоСчета(ПрефиксИмениСубконто, ОписаниеСчета.Значение.Счет, ОписаниеСчета.Значение.ВидСубконто);
		ОписаниеСчета.Значение.Вставить("ИмяПоляСубконто",           "");
		ОписаниеСчета.Значение.Вставить("ПредставлениеПоляСубконто", "");
		ОписаниеСчета.Значение.Вставить("НомерСубконто",             "");
		Если ОписаниеПоля <> Неопределено Тогда
			ОписаниеСчета.Значение.ИмяПоляСубконто           = ОписаниеПоля.Имя;
			ОписаниеСчета.Значение.ПредставлениеПоляСубконто = ОписаниеПоля.Представление;
			ОписаниеСчета.Значение.НомерСубконто             = ОписаниеПоля.Номер;
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеПоСчетуПрочиеРасходыМожноПолучитьОтчетомОборотыСчета() Тогда
		
		Настройки = НовыйНастройкиОтчетаПоРегиструБухгалтерии(
			"ОборотыСчета",
			СхемаРасчета.КонтекстРасчета.Организация,
			СхемаРасчета.КонтекстРасчета.НачалоПериода,
			СхемаРасчета.КонтекстРасчета.КонецПериода,
			ОписанияСчетов.СчетУбытков.Счет,
			СхемаРасчета.ОписаниеСумм);
		
		ДобавитьОтборВНастройкиОтчета(Настройки, "КорСчетОтбор", ОписанияСчетов.СчетРасходов.Счет, ВидСравненияКомпоновкиДанных.ВИерархии);
		
		СвойстваОтчета = Настройки.Отчет.ПользовательскиеНастройки.ДополнительныеСвойства;
		СвойстваОтчета.Вставить("СальдоНаНачалоКт", 	Истина);
		СвойстваОтчета.Вставить("ОборотыСоСчетамиКт", 	Истина);
		СвойстваОтчета.Вставить("СальдоНаКонецКт", 		Истина);
		СвойстваОтчета.Вставить("ПоСубсчетамКорСчетов", Истина);
		СвойстваОтчета.Вставить("ПоСубсчетам", 			Ложь);
		
		Для Каждого ОписаниеСчета Из ОписанияСчетов Цикл
			
			Если ПустаяСтрока(ОписаниеСчета.Значение.ИмяПоляСубконто) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПустаяСтрока(ОписаниеСчета.Значение.Префикс) Тогда
				Представление = ОписаниеСчета.Значение.ПредставлениеПоляСубконто;
			Иначе
				Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ОписаниеСчета.Значение.ШаблонПредставленияСубконто,
					ОписаниеСчета.Значение.НомерСубконто);
			КонецЕсли;
		
			ДобавитьГруппировкуВНастройкиОтчета(Настройки, ОписаниеСчета.Значение.ИмяПоляСубконто, Представление);
			
		КонецЦикла;
		
		ИмяПоляСубконтоСчетУбытков  = ОписанияСчетов.СчетУбытков.ИмяПоляСубконто;
		ИмяПоляСубконтоСчетРасходов = ОписанияСчетов.СчетРасходов.ИмяПоляСубконто;
		
	Иначе
		
		Настройки = НовыйНастройкиОтчетаПоРегиструБухгалтерии(
			"ОборотыМеждуСубконто",
			СхемаРасчета.КонтекстРасчета.Организация,
			СхемаРасчета.КонтекстРасчета.НачалоПериода,
			СхемаРасчета.КонтекстРасчета.КонецПериода,
			Неопределено,
			СхемаРасчета.ОписаниеСумм);
			
		СвойстваОтчета = Настройки.Отчет.ПользовательскиеНастройки.ДополнительныеСвойства;
		
		СхемаОтчета = Новый Структура;
		СхемаОтчета.Вставить("СчетУбытков",  "");
		СхемаОтчета.Вставить("СчетРасходов", "Кор");
		
		ИмяПоляСубконтоСчетУбытков  = "Субконто1";
		ИмяПоляСубконтоСчетРасходов = "КорСубконто1";
		
		Для Каждого ЭлементОтчета Из СхемаОтчета Цикл
			
			Суффикс = ЭлементОтчета.Значение;
			ИмяСпискаВидовСубконто = "СписокВидов" + Суффикс + "Субконто";
			ИмяОтбораПоСчету       = Суффикс + "Счет";
			
			ОписаниеСчета = ОписанияСчетов[ЭлементОтчета.Ключ];
			
			ДобавитьОтборВНастройкиОтчета(Настройки, ИмяОтбораПоСчету, ОписаниеСчета.Счет, ВидСравненияКомпоновкиДанных.ВИерархии);
			
			СвойстваОтчета[ИмяСпискаВидовСубконто].Добавить(ОписаниеСчета.ВидСубконто, ОписаниеСчета.ПредставлениеПоляСубконто);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДобавитьОтборПрочихДоходовРасходовВНастройкиОтчета(Настройки, ИмяПоляСубконтоСчетРасходов, ЭтапРасчета, ВидСтатьиРасходов);
	
	Если ЗначениеЗаполнено(ИмяПоляСубконтоСчетУбытков) Тогда
		ДобавитьОтборВНастройкиОтчета(Настройки, ИмяПоляСубконтоСчетУбытков + "." + "ВидРБП", ВидСтатьиУбытков);
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

#КонецОбласти

#Область РеализацияАмортизируемогоИмущества

Процедура ПолучитьРеализацияАмортизируемогоИмущества(ПроцессорПолученияДанных)
	
	// Значения части показателей получаются (выбираются) из информационной базы в разрезе реализованных объектов.
	// Это три показателя, суммы доходов и расходов.
	// Данные из базы выбираются с учетом видов статей (и в разрезе видов статей).
	ВидыСтатей = Новый Массив;
	Для Каждого Задача Из ПроцессорПолученияДанных.Задачи Цикл
		ВидыСтатей.Добавить(Задача.ОтборДанных.ВидСтатьи);
	КонецЦикла;
	СоздатьВременнуюТаблицуСтатьиПрочихДоходовРасходов(ВидыСтатей, ПроцессорПолученияДанных);
	
	// Остальные показатели рассчитываются на основе первых трех.
	// Всего для расчета нужно выполнить шесть шагов.
	ШагиРасчета = Новый ТаблицаЗначений;
	ШагиРасчета.Колонки.Добавить("Имя",        ТипИмя());
	ШагиРасчета.Колонки.Добавить("ПоДаннымИБ", Новый ОписаниеТипов("Булево"));
	ШагиРасчета.Колонки.Добавить("Выборка");
	ШагиРасчета.Колонки.Добавить("ШаблонОписания",    Новый ОписаниеТипов("Строка"));
	ШагиРасчета.Колонки.Добавить("ПараметрыОписания");// ссылка на структуру - параметры текста описания
	ШагиРасчета.Колонки.Добавить("Условие",           Новый ОписаниеТипов("Структура"));// для записи в протокол - та часть условия, что одинакова для всех задач
	ШагиРасчета.Колонки.Добавить("Задачи",            Новый ОписаниеТипов("Массив"));
	ШагиРасчета.Индексы.Добавить("Имя");
	
	// 1. Выручка
	ШагРасчета = ШагиРасчета.Добавить();
	ШагРасчета.Имя               = "Выручка";
	ШагРасчета.ПоДаннымИБ        = Истина;
	
	ХарактеристикиДоходов = ХарактеристикиПрочиеДоходыРасходы("ПрочиеДоходы", Истина);
	РезультатЗапроса      = РезультатЗапросаПрочиеДоходыРасходы(ХарактеристикиДоходов, ПроцессорПолученияДанных);
	
	ШагРасчета.Выборка           = РезультатЗапроса.Выбрать();;
	ШагРасчета.ШаблонОписания    = ХарактеристикиДоходов.ШаблонОписания;
	ШагРасчета.ПараметрыОписания = ХарактеристикиДоходов.ПараметрыОписания;
	ШагРасчета.Условие.Вставить("СчетДоходовРасходов", ХарактеристикиДоходов.Счет);
	СчетВыручки = ХарактеристикиДоходов.Счет;
	
	// 2. Расходы
	
	ШагРасчета = ШагиРасчета.Добавить();
	ШагРасчета.Имя               = "Расходы";
	ШагРасчета.ПоДаннымИБ        = Истина;
	
	ХарактеристикиРасходов = ХарактеристикиПрочиеДоходыРасходы("ПрочиеРасходы", Истина);
	РезультатЗапроса       = РезультатЗапросаПрочиеДоходыРасходы(ХарактеристикиРасходов, ПроцессорПолученияДанных);
	
	ШагРасчета.Выборка           = РезультатЗапроса.Выбрать();
	ШагРасчета.ШаблонОписания    = ХарактеристикиРасходов.ШаблонОписания;
	ШагРасчета.ПараметрыОписания = ХарактеристикиРасходов.ПараметрыОписания;
	ШагРасчета.Условие.Вставить("СчетДоходовРасходов", ХарактеристикиРасходов.Счет);
	СчетРасходов = ХарактеристикиРасходов.Счет;
	
	// 3. Расходы после реализации
	// Расходы могут отражаться по счету 91 дважды:
	// - первый раз - в периоде реализации, в корреспонденции со счетами 01, 04   (при реализации)
	// - второй раз - в периоде признания убытков, в корреспонденции со счетом 97 (после реализации, в будущих периодах).
	// При расчете убытка следует использовать расходы в периоде реализации - т.е. исключить из общей величины расходов расходы после реализации.
	
	ШагРасчета = ШагиРасчета.Добавить();
	ШагРасчета.Имя               = "РасходыПослеРеализации";
	ШагРасчета.ПоДаннымИБ        = Истина;
	
	СпособПереносаУбытка = Перечисления.ВидыРБП.УбыткиОтРеализацииАмортизируемогоИмущества; // аналитика на счете 97
	
	ХарактеристикиРасходов = ХарактеристикиРасходыПризнанныеПослеПолученияУбытка(Истина);
	Для Каждого ВидСтатьи Из ВидыСтатей Цикл
		НоваяСтрока = ХарактеристикиРасходов.ВидыСтатей.Добавить();
		НоваяСтрока.ВидСтатьи            = ВидСтатьи;
		НоваяСтрока.СпособПереносаУбытка = СпособПереносаУбытка;
	КонецЦикла;
	РезультатЗапроса = РезультатЗапросаРасходыПризнанныеПослеПолученияУбытка(ХарактеристикиРасходов, ПроцессорПолученияДанных);
	
	ШагРасчета.Выборка           = РезультатЗапроса.Выбрать();
	ШагРасчета.ШаблонОписания    = ХарактеристикиРасходов.ШаблонОписания;
	ШагРасчета.ПараметрыОписания = ХарактеристикиРасходов.ПараметрыОписания;
	ШагРасчета.ПараметрыОписания.СпособПереносаУбытка = СпособПереносаУбытка;
	ШагРасчета.Условие.Вставить("СчетДоходовРасходов",  ХарактеристикиРасходов.СчетРасходов);
	ШагРасчета.Условие.Вставить("СчетУбытков",          ХарактеристикиРасходов.СчетУбытков);
	ШагРасчета.Условие.Вставить("СпособПереносаУбытка", СпособПереносаУбытка);
	
	// 4. Количество реализованных объектов
	ШагРасчета = ШагиРасчета.Добавить();
	ШагРасчета.Имя            = "КоличествоВсего";
	ШагРасчета.ШаблонОписания = НСтр("ru = 'Количество объектов имущества, реализация которого отражена по кредиту счета [СчетВыручки] по статьям вида ""[ВидСтатьи]""'");
	ШагРасчета.ПараметрыОписания = Новый Структура;
	ШагРасчета.ПараметрыОписания.Вставить("СчетВыручки",  СчетВыручки);
	ШагРасчета.ПараметрыОписания.Вставить("СчетРасходов", СчетРасходов);
	ШагРасчета.ПараметрыОписания.Вставить("ВидСтатьи");    // заполняется при обходе показателей
	ШагРасчета.ПараметрыОписания.Вставить("ЭтапРасчета");  // для унификации кода, фактически не используется
	ПараметрыОписанияУбытка = ШагРасчета.ПараметрыОписания; // для остальных шагов - те же параметры
	
	// 5. Убыток 
	ШагРасчета = ШагиРасчета.Добавить();
	ШагРасчета.Имя               = "Убыток";
	ШагРасчета.ШаблонОписания    = НСтр("ru = 'Убыток, определенный по оборотам счетов [СчетВыручки] и [СчетРасходов] по статьям вида ""[ВидСтатьи]"" по каждому реализованному объекту раздельно'");
	ШагРасчета.ПараметрыОписания = ПараметрыОписанияУбытка;
	
	// 6. Количество объектов, реализованных с убытком
	ШагРасчета = ШагиРасчета.Добавить();
	ШагРасчета.Имя               = "КоличествоУбыток";
	ШагРасчета.ШаблонОписания    = НСтр("ru = 'Количество объектов имущества, убыток от реализации которого определен по оборотам счетов [СчетВыручки] и [СчетРасходов] по статьям вида ""[ВидСтатьи]""'");
	ШагРасчета.ПараметрыОписания = ПараметрыОписанияУбытка;
	
	ШаблонОписанияДетализации = НСтр("ru = '%1
      |Реализованный объект - ""%2""'");
	  
	Для Каждого Задача Из ПроцессорПолученияДанных.Задачи Цикл
		ШагРасчета = ШагиРасчета.Найти(Задача.ОтборДанных.Показатель, "Имя");
		Если ШагРасчета <> Неопределено Тогда
			ШагРасчета.Задачи.Добавить(Задача);
		КонецЕсли;
	КонецЦикла;
	
	// "Налогоплательщик определяет убыток ... по каждому объекту"
	// Чтобы это обеспечить, собираем данные о доходах и расходах по каждому объекту в коллекции Убытки
	// Затем по данным этой коллекции рассчитываем остальные показатели.
	Убытки = Новый ТаблицаЗначений;
	Убытки.Колонки.Добавить("ВидСтатьи",            Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПрочихДоходовИРасходов"));
	Убытки.Колонки.Добавить("РеализованныйОбъект",  Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства, СправочникСсылка.НематериальныеАктивы"));
	Убытки.Колонки.Добавить("Выручка");             // КоллекцияСумм - используется для расчета КоличествоВсего
	Убытки.Колонки.Добавить("Результат");           // КоллекцияСумм - используется для расчета Убыток
	Убытки.Колонки.Добавить("Убыток");              // КоллекцияСумм - используется для расчета КоличествоУбыток
	Убытки.Колонки.Добавить("Протокол",             Новый ОписаниеТипов("ТаблицаЗначений")); // см. ИнициализироватьПротоколРасчетаУбыткаРеализацияАмортизируемогоИмущества()
	
	ПоляОтбора = "ВидСтатьи, РеализованныйОбъект";
	Убытки.Индексы.Добавить(ПоляОтбора);
	ОтборУбыток = Новый Структура(ПоляОтбора);
	
	Для Каждого ШагРасчета Из ШагиРасчета Цикл
	
		Для Каждого Задача Из ШагРасчета.Задачи Цикл
			
			Если Не СтатьяПрочихДоходовРасходовПрименима(Задача.ОтборДанных.ВидСтатьи, "ПрочиеРасходы", Задача.ЭтапРасчета) Тогда
				ПропуститьПолучениеДанных(ПроцессорПолученияДанных, Задача);
				Продолжить;
			КонецЕсли;
			
			// Подготовим описание
			ШагРасчета.ПараметрыОписания.ВидСтатьи   = Задача.ОтборДанных.ВидСтатьи;
			ШагРасчета.ПараметрыОписания.ЭтапРасчета = ПредставлениеЭтапаРасчета(Задача.ЭтапРасчета);
			
			Описание = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШагРасчета.ШаблонОписания, ШагРасчета.ПараметрыОписания); // Может быть уточнено ниже - см. ШаблонОписанияДетализации
			
			Если ШагРасчета.ПоДаннымИБ Тогда
				
				// это шаги, на которых в таблице Убытки заполняется колонка Результат
				
				ОтборВыборки = НовыйОтборПоЭтапуРасчета(Задача.ЭтапРасчета);
				ОтборВыборки.Вставить("ВидСтатьи");
				ЗаполнитьЗначенияСвойств(ОтборВыборки, Задача.ОтборДанных);
				
				ШагРасчета.Выборка.Сбросить();
				ПротоколПоказателя = Новый Массив;
				Пока ШагРасчета.Выборка.НайтиСледующий(ОтборВыборки) Цикл// по реализованным объектам
					
					ЗаполнитьЗначенияСвойств(ОтборУбыток, ШагРасчета.Выборка);
					Убыток = Убытки.НайтиСтроки(ОтборУбыток);
					Если Убыток.Количество() > 0 Тогда
						Убыток = Убыток[0];
					Иначе
						Убыток = Убытки.Добавить();
						ЗаполнитьЗначенияСвойств(Убыток, ОтборУбыток);
						Убыток.Выручка   = КоллекцииСумм.НовыйКоллекцияСумм(ПроцессорПолученияДанных.ОписаниеСумм);
						Убыток.Результат = КоллекцииСумм.НовыйКоллекцияСумм(ПроцессорПолученияДанных.ОписаниеСумм);
						Убыток.Убыток    = КоллекцииСумм.НовыйКоллекцияСумм(ПроцессорПолученияДанных.ОписаниеСумм);
						ИнициализироватьПротоколРасчетаУбыткаРеализацияАмортизируемогоИмущества(Убыток.Протокол);
					КонецЕсли;
					
					// Запишем значение показателя
					КоллекцииСумм.Сложить(Задача, ШагРасчета.Выборка, ПроцессорПолученияДанных.ОписаниеСумм);
					
					// Рассчитаем финансовый результат - с учетом знака этапа расчета.
					ОператорЭтапаРасчета = ОператорЭтапаРасчета(Задача.ЭтапРасчета);
					ОператорШагаРасчета  = ОператорШагаРасчетаРеализацияАмортизируемогоИмущества(ШагРасчета.Имя);
					ОператорРасчетаРезультата = РаскрытьСкобки(ОператорЭтапаРасчета, ОператорШагаРасчета);
					
					Если ОператорРасчетаРезультата = "-" Тогда
						КоллекцииСумм.Вычесть(Убыток.Результат, ШагРасчета.Выборка, ПроцессорПолученияДанных.ОписаниеСумм);
						Если ШагРасчета.Имя = "Выручка" Тогда
							КоллекцииСумм.Вычесть(Убыток.Выручка, ШагРасчета.Выборка, ПроцессорПолученияДанных.ОписаниеСумм);
						КонецЕсли;
					Иначе
						КоллекцииСумм.Сложить(Убыток.Результат, ШагРасчета.Выборка, ПроцессорПолученияДанных.ОписаниеСумм);
						Если ШагРасчета.Имя = "Выручка" Тогда
							КоллекцииСумм.Сложить(Убыток.Выручка, ШагРасчета.Выборка, ПроцессорПолученияДанных.ОписаниеСумм);
						КонецЕсли;
					КонецЕсли;
					
					// запишем порядок расчета - в разрезе объектов
					ЗаписьПротокола = ДобавитьЗаписьПротоколаПолученияДанныхИнформационнойБазы(ПроцессорПолученияДанных, Задача, ШагРасчета.Выборка);
					ЗаписьПротокола.Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонОписанияДетализации,
						Описание,
						Убыток.РеализованныйОбъект); // "пустое" наименование объекта не всегда уместно выводить, поэтому ниже описание может быть заменено
					ЗаполнитьЗначенияСвойств(ЗаписьПротокола.Условие, ШагРасчета.Выборка);
					ЗаполнитьЗначенияСвойств(ЗаписьПротокола.Условие, ШагРасчета.Условие);
					ЗаписьПротокола.Условие.Показатель = ШагРасчета.Имя;
					ЗаписьПротокола.ПоказыватьПользователюТолькоЕслиСуммаЗаполнена = Истина;
					
					// ниже - вне цикла - можем модифицировать описание в записи протокола
					ПротоколПоказателя.Добавить(ЗаписьПротокола);
					
					// для того, чтобы позднее вывести детальный протокол расчета убытка
					ЗаписьПротоколаОбъекта = Убыток.Протокол.Добавить();
					ЗаписьПротоколаОбъекта.Оператор   = ОператорРасчетаРезультата;
					ЗаписьПротоколаОбъекта.Запись     = ЗаписьПротокола;
					ЗаписьПротоколаОбъекта.ШагРасчета = ШагРасчета.Имя;
					
				КонецЦикла;
				
				Если ПротоколПоказателя.Количество() = 1 И Не ЗначениеЗаполнено(ПротоколПоказателя[0].Условие.РеализованныйОбъект) Тогда
					ПротоколПоказателя[0].Описание = Описание; // нет смысла упоминать реализованный объект
				КонецЕсли;
				
			Иначе
				
				// Рассчитываем показатели по данным таблицы Убытки.
				// Так как в таблице убытки - сводные данные по всем этапам расчета, то пропускаем все промежуточные этапы расчета
				
				Если Задача.ЭтапРасчета <> "Все" Тогда
					ПропуститьПолучениеДанных(ПроцессорПолученияДанных, Задача);
					Продолжить;
				КонецЕсли;
				
				Для Каждого Убыток Из Убытки Цикл
					
					Если Убыток.ВидСтатьи <> Задача.ОтборДанных.ВидСтатьи Тогда
						Продолжить;
					КонецЕсли;
					
					Если ШагРасчета.Имя = "Убыток" Тогда
						
						Значение = КоллекцииСумм.НовыйКоллекцияСумм(ПроцессорПолученияДанных.ОписаниеСумм);
						
						// убыток - это отрицательный финансовый результат, но с противоположным знаком
						КоллекцииСумм.Заполнить(Убыток.Убыток, Убыток.Результат, ПроцессорПолученияДанных.ОписаниеСумм);
						
						// 1. отсекаем положительный результат
						ОграничитьСверху(Убыток.Убыток, Значение, ПроцессорПолученияДанных.ОписаниеСумм);
						
						// 2. меняем знак
						КоллекцииСумм.Вычесть(Значение, Убыток.Убыток, ПроцессорПолученияДанных.ОписаниеСумм);
						КоллекцииСумм.Заполнить(Убыток.Убыток, Значение, ПроцессорПолученияДанных.ОписаниеСумм);
						
					Иначе // количества
						
						Если Не ЗначениеЗаполнено(Убыток.РеализованныйОбъект) Тогда
							Значение = КоллекцииСумм.НовыйКоллекцияСумм(ПроцессорПолученияДанных.ОписаниеСумм);
						ИначеЕсли ШагРасчета.Имя = "КоличествоВсего" Тогда
							Значение = КоличествоНенулевыхЗначений(Убыток.Выручка, ПроцессорПолученияДанных.ОписаниеСумм);
						Иначе // КоличествоУбыток
							Значение = КоличествоНенулевыхЗначений(Убыток.Убыток, ПроцессорПолученияДанных.ОписаниеСумм);
						КонецЕсли;
						
					КонецЕсли;
					
					КоллекцииСумм.Сложить(Задача, Значение, ПроцессорПолученияДанных.ОписаниеСумм);
					
					// Подготовим протокол расчета
					СуммыДляПротокола = Новый Структура;
					Для Каждого ИмяСвойства Из КоллекцииСумм.ИменаСвойств(ПроцессорПолученияДанных.ОписаниеСумм) Цикл
						Если Значение[ИмяСвойства] <> 0 Тогда
							СуммыДляПротокола.Вставить(ИмяСвойства);
						КонецЕсли;
					КонецЦикла;
					
					Если СуммыДляПротокола.Количество() > 0 Тогда
						Если ШагРасчета.Имя <> "Убыток" Тогда
							
							Если ШагРасчета.Имя = "КоличествоУбыток" Тогда
								// только те суммы, по которым есть убыток
								ЗаполнитьЗначенияСвойств(СуммыДляПротокола, Значение);
							Иначе
								СуммыДляПротокола = Значение;
							КонецЕсли;
							
							// просто перечень реализованных объектов
							ЗаписьПротокола = ДобавитьЗаписьПротоколаПолученияДанныхИнформационнойБазы(ПроцессорПолученияДанных, Задача, СуммыДляПротокола);
							ЗаписьПротокола.Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонОписанияДетализации,
								Описание,
								Убыток.РеализованныйОбъект);
							ЗаполнитьЗначенияСвойств(ЗаписьПротокола.Условие, Убыток);
							ЗаполнитьЗначенияСвойств(ЗаписьПротокола.Условие, ШагРасчета.Условие);
							ЗаписьПротокола.ПоказыватьПользователюТолькоЕслиСуммаЗаполнена = Истина;
							
						Иначе // "Убыток"
							
							// Детальный протокол расчета - включает все шаги расчета
							// Показываем его только тогда, когда есть убыток - см. СуммыДляПротокола
							
							Для Каждого ЗаписьПротоколаОбъекта Из Убыток.Протокол Цикл
								
								ЗаполнитьЗначенияСвойств(СуммыДляПротокола, ЗаписьПротоколаОбъекта.Запись);// только те суммы, по которым есть убыток
								
								Оператор = РаскрытьСкобки(ЗаписьПротоколаОбъекта.Оператор, ЗаписьПротоколаОбъекта.Запись.Оператор);
								Оператор = РаскрытьСкобки("-", Оператор); // протокол объекта содержит расчет финансового результата; а здесь нужен расчет убытка
								
								ЗаписьПротокола = ДобавитьЗаписьПротоколаПолученияДанныхИнформационнойБазы(ПроцессорПолученияДанных, Задача, СуммыДляПротокола);
								ЗаписьПротокола.Описание = ЗаписьПротоколаОбъекта.Запись.Описание;
								ЗаписьПротокола.Оператор = Оператор;
								ЗаполнитьЗначенияСвойств(ЗаписьПротокола.Условие, ЗаписьПротоколаОбъекта.Запись.Условие);
								ЗаписьПротокола.Условие.Показатель = ЗаписьПротоколаОбъекта.ШагРасчета;
								ЗаписьПротокола.ПоказыватьПользователюТолькоЕслиСуммаЗаполнена = Истина;
								
							КонецЦикла;
							
						КонецЕсли; // детальный протокол расчета убытка
						
					КонецЕсли; // определены суммы для протокола
					
				КонецЦикла;
				
			КонецЕсли; // ШагРасчета.ПоДаннымИБ
			
			// протокол - сводно
			Если Не Задача.ПротоколЗаполнен Тогда
				ЗаписьПротокола = ДобавитьЗаписьПротоколаПолученияДанныхИнформационнойБазы(ПроцессорПолученияДанных, Задача);
				ЗаписьПротокола.Описание = Описание;
				ЗаполнитьЗначенияСвойств(ЗаписьПротокола.Условие, ШагРасчета.Условие);
				ЗаполнитьЗначенияСвойств(ЗаписьПротокола.Условие, Задача.ОтборДанных);
				ЗаписьПротокола.Условие.ВсеРеализованныеОбъекты = Истина;
			КонецЕсли;
			
		КонецЦикла; // По Задачи
	КонецЦикла; // По РассчитываемыеПоказатели
		
КонецПроцедуры

Функция ОператорШагаРасчетаРеализацияАмортизируемогоИмущества(ИмяШага)
	
	// Результат = Выручка - (Расходы - РасходыПослеРеализации) = Выручка - Расходы + РасходыПослеРеализации;
	Если ИмяШага = "Расходы" Тогда
		Возврат "-";
	Иначе // Выручка, РасходыПослеРеализации
		Возврат "+"; 
	КонецЕсли;
	
КонецФункции

Функция ИнициализироватьПротоколРасчетаУбыткаРеализацияАмортизируемогоИмущества(Протокол)
	
	// Протокол содержит ссылки на строки протокола получения данных.
	// В совокупности они иллюстрируют ход расчета финансового результата по конкретному реализованному объекту.
	
	Протокол.Колонки.Добавить("Запись");    // ссылка на запись протокола
	Протокол.Колонки.Добавить("Оператор",   ТипОператорФормулы()); // оператор, который нужно применить записи протокола, чтобы получить финансовый результат
	Протокол.Колонки.Добавить("ШагРасчета", ТипИмя());
	
КонецФункции

Функция НастройкиОтчетаРеализацияАмортизируемогоИмущества(ЭтапРасчета, ИмяПоказателя, ВсеРеализованныеОбъекты, РеализованныйОбъект, СчетДоходовРасходов, ВидСтатьиРасходов, СчетУбытков, ВидСтатьиУбытков, СхемаРасчета)
	
	Если ИмяПоказателя = "РасходыПослеРеализации" Тогда
		
		Настройки = НастройкиОтчетаПрочиеРасходыПризнанныеПослеПолученияУбытка(
			ЭтапРасчета,
			СчетДоходовРасходов,
			ВидСтатьиРасходов,
			СчетУбытков,
			ВидСтатьиУбытков,
			СхемаРасчета);
		
		// Отбор и группировка по реализованным объектам
		ОписаниеПоля = ОписаниеСубконтоСчета("КорСубконто", СчетДоходовРасходов, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РеализуемыеАктивы);
		
		Если ОписаниеПоля <> Неопределено Тогда
			
			СвойстваОтчета = Настройки.Отчет.ПользовательскиеНастройки.ДополнительныеСвойства;
			Если СвойстваОтчета.Свойство("СписокВидовКорСубконто") Тогда
				// "ОборотыМеждуСубконто"
				ПредставлениеПоля = ОписаниеПоля.Представление;
				СвойстваОтчета.СписокВидовКорСубконто.Добавить(
					ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РеализуемыеАктивы,
					ПредставлениеПоля);
				НомерСубконтоВОтчете = СвойстваОтчета.СписокВидовКорСубконто.Количество();
				ИмяПоля = "КорСубконто" + НомерСубконтоВОтчете;
				ДобавитьГруппировкуВНастройкиОтчета(Настройки, ИмяПоля, ПредставлениеПоля);
				Если Не ВсеРеализованныеОбъекты Тогда
					ДобавитьОтборВНастройкиОтчета(Настройки, ИмяПоля, РеализованныйОбъект);
				КонецЕсли;
			Иначе
				// "ОборотыСчета"
				ПредставлениеПоля = НСтр("ru = 'Кор. Субконто2'");// см. ДанныеПоСчетуПрочиеРасходыМожноПолучитьОтчетомОборотыСчета()
				ДобавитьГруппировкуВНастройкиОтчета(Настройки, ОписаниеПоля.Имя, ПредставлениеПоля);
				Если Не ВсеРеализованныеОбъекты Тогда
					ДобавитьОтборВНастройкиОтчета(Настройки, ОписаниеПоля.Имя, РеализованныйОбъект);
				КонецЕсли;
			КонецЕсли;
		
			
		КонецЕсли;
	
	ИначеЕсли ИмяПоказателя = "Выручка" Или ИмяПоказателя = "Расходы" Тогда
		
		Настройки = НастройкиОтчетаПрочиеДоходыРасходы(ЭтапРасчета, СчетДоходовРасходов, ВидСтатьиРасходов, СхемаРасчета);
		
		// дополним настройки отчета детализацией и отборами по реализованным объектам
				
		ОписаниеПоля = ОписаниеСубконтоСчета(
			"Субконто",
			СчетДоходовРасходов,
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РеализуемыеАктивы);
			
		Если ОписаниеПоля <> Неопределено Тогда
			
			ДобавитьГруппировкуВНастройкиОтчета(Настройки, ОписаниеПоля.Имя, ОписаниеПоля.Представление);
			Если Не ВсеРеализованныеОбъекты Тогда
				ДобавитьОтборВНастройкиОтчета(Настройки, ОписаниеПоля.Имя, РеализованныйОбъект);
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат Настройки;
			
КонецФункции

#КонецОбласти

#КонецОбласти // ПолучениеДанных

#КонецОбласти // ПорядокЗаполненияДекларации

#Область СлужебныеПроцедурыИФункции

#Область Расчет

Функция Рассчитать(СхемаРасчета, Отбор)
	
	// Сначала составим план расчета:
	// - получим список показателей, для которых нужно получить данные информационной базы
	// - составим перечень операций для расчета каждого производного показателя ("формул")
	// 
	// Составление списка показателей отделено от собственно расчета,
	// так как это позволит использовать более эффективные запросы к базе данных.
	// 
	// Для составления плана расчета рекурсивно обойдем все показатели, попавшие в отбор.
	// Рекурсия нужна, потому что 
	// - показатели могут быть формульными - для их расчета могут потребоваться другие показатели
	// - для расчета показателей, попавших в отбор, могут понадобиться значения показателей, не попавших в отбор
	
	ПланРасчета = Новый Структура;
	ПланРасчета.Вставить("ДанныеИнформационнойБазы", Новый ТаблицаЗначений);
	ПланРасчета.Вставить("Формулы",                  Новый ТаблицаЗначений);
	
	ПланРасчета.ДанныеИнформационнойБазы.Колонки.Добавить("Имя",         ТипИмя());
	ПланРасчета.ДанныеИнформационнойБазы.Колонки.Добавить("ЭтапРасчета", ТипИмя());
	ПланРасчета.ДанныеИнформационнойБазы.Колонки.Добавить("Показатель"); // Ссылка на показатель из схемы расчета
	ПланРасчета.ДанныеИнформационнойБазы.Индексы.Добавить("Имя, ЭтапРасчета");
	
	ПланРасчета.Формулы.Колонки.Добавить("Имя",                       ТипИмя());
	ПланРасчета.Формулы.Колонки.Добавить("ЭтапРасчета",               ТипИмя());
	ПланРасчета.Формулы.Колонки.Добавить("Показатель");               // Ссылка на показатель из схемы расчета
	ПланРасчета.Формулы.Колонки.Добавить("ЭлементФормулыИмя",         ТипИмя());
	ПланРасчета.Формулы.Колонки.Добавить("ЭлементФормулыЭтапРасчета", ТипИмя());
	ПланРасчета.Формулы.Колонки.Добавить("Оператор",                  ТипОператорФормулы()); // "+", "-" или "="
	ПланРасчета.Формулы.Индексы.Добавить("Имя, ЭтапРасчета");
	
	Для Каждого Показатель Из СхемаРасчета.Показатели Цикл
		
		ЭтапыРасчетаПоказателя = Отбор.НайтиСтроки(Новый Структура("Имя", Показатель.Имя));
		
		Для Каждого ЭтапРасчета Из ЭтапыРасчетаПоказателя Цикл
			
			ДополнитьПланРасчетаРекурсивно(
				ПланРасчета,
				Показатель,
				ЭтапРасчета.ЭтапРасчета,
				СхемаРасчета,
				СхемаРасчета.ЭтапыРасчета);
			
		КонецЦикла;
			
	КонецЦикла;
	
	Результат = НовыйРезультатРасчета(СхемаРасчета.ОписаниеСумм);
	
	// Получим данные информационной базы.
	
	ВременныеТаблицы = НовыйРасширенныйМенеджерВременныхТаблиц();
	
	// Как правило, оптимально получать данные информационной базы так, чтобы один алгоритм получения данных 
	// выполнялся один раз (или небольшое число раз), получая за один "проход" данные всех (или большого числа) показателей.
	// Поэтому сгруппируем показатели, требующие получения данных информационной базы, по алгоритмам получения данных.
	// Затем каждый алгоритм будет выполнен отдельным "процессором".
	
	ПроцессорыПолученияДанных = Новый Соответствие; // Ключ - имя алгоритма, Значение - процессор получения данных
	Для Каждого Показатель Из ПланРасчета.ДанныеИнформационнойБазы Цикл
		
		ИмяАлгоритма = Показатель.Показатель.АлгоритмПолученияДанных;
		
		ПроцессорПолученияДанных = ПроцессорыПолученияДанных[ИмяАлгоритма];
		Если ПроцессорПолученияДанных = Неопределено Тогда
			ПроцессорПолученияДанных = НовыйПроцессорПолученияДанных(ИмяАлгоритма, ВременныеТаблицы, СхемаРасчета, Результат);
			ПроцессорыПолученияДанных.Вставить(ИмяАлгоритма, ПроцессорПолученияДанных);
		КонецЕсли;
		
		ЗадачаПолученияДанных = ПроцессорПолученияДанных.Задачи.Добавить();
		ЗадачаПолученияДанных.Показатель  = Показатель.Имя;
		ЗадачаПолученияДанных.ЭтапРасчета = Показатель.ЭтапРасчета;
		ЗадачаПолученияДанных.ОтборДанных = Показатель.Показатель.ОтборДанных;
		
	КонецЦикла;
	
	// Выполним алгоритмы, запишем результат
	
	Для Каждого Алгоритм Из ПроцессорыПолученияДанных Цикл
		
		ПроцессорПолученияДанных = Алгоритм.Значение;
		
		ЭтапыРасчета = ПроцессорПолученияДанных.Задачи.ВыгрузитьКолонку("ЭтапРасчета");
		ПроцессорПолученияДанных.ЭтапыРасчета = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ЭтапыРасчета);
		
		ПолучитьДанныеИнформационнойБазы(ПроцессорПолученияДанных);
		
		Для Каждого Задача Из ПроцессорПолученияДанных.Задачи Цикл
			УстановитьРассчитанноеЗначение(Результат, Задача.Показатель, Задача.ЭтапРасчета, Задача);
		КонецЦикла;
		
	КонецЦикла;
	
	ПроцессорыПолученияДанных = Неопределено;
	
	// Вычислим значения производных показателей (применим формулы)
	
	Для Каждого ШагРасчета Из ПланРасчета.Формулы Цикл
		
		Если Не ЗначениеЗаполнено(ШагРасчета.Оператор) Тогда
			Продолжить;
		КонецЕсли;
		
		// В качестве элементов формул можно использовать только суммы.
		// При выполнении этого условия в Значение и ЗначениеЭлементаФормулы будет коллекция сумм.
		
		Значение = РассчитанноеЗначение(Результат.РассчитанныеЗначения, ШагРасчета.Имя, ШагРасчета.ЭтапРасчета);
		Если Значение = Неопределено Тогда
			Значение = КоллекцииСумм.НовыйКоллекцияСумм(СхемаРасчета.ОписаниеСумм);
		КонецЕсли;
		
		Если ПроверитьОграничение(Результат, Значение, ШагРасчета, СхемаРасчета) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеЭлементаФормулы = РассчитанноеЗначение(
			Результат.РассчитанныеЗначения,
			ШагРасчета.ЭлементФормулыИмя,
			ШагРасчета.ЭлементФормулыЭтапРасчета);
			
		Если ЗначениеЭлементаФормулы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
				
		Если ШагРасчета.Оператор = "-" Тогда
			КоллекцииСумм.Вычесть(Значение, ЗначениеЭлементаФормулы, СхемаРасчета.ОписаниеСумм);
		ИначеЕсли ШагРасчета.Оператор = "+" Тогда
			КоллекцииСумм.Сложить(Значение, ЗначениеЭлементаФормулы, СхемаРасчета.ОписаниеСумм);
		Иначе
			Продолжить;
		КонецЕсли;
		
		УстановитьРассчитанноеЗначение(Результат, ШагРасчета.Имя, ШагРасчета.ЭтапРасчета, Значение);
		
		ЗаписьПротокола = ДобавитьЗаписьПротокола(Результат, ШагРасчета.Имя, ШагРасчета.ЭтапРасчета, "Формула", ЗначениеЭлементаФормулы);
		ЗаписьПротокола.Оператор            = ШагРасчета.Оператор;
		ЗаписьПротокола.Условие.Имя         = ШагРасчета.ЭлементФормулыИмя;
		ЗаписьПротокола.Условие.ЭтапРасчета = ШагРасчета.ЭлементФормулыЭтапРасчета;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Конструктор служебной коллекции, используемой для получения данных конкретным алгоритмом.
// Она нужна, чтобы сократить описание процедур, непосредственно получающих данные: передавать один параметр, а не набор параметров.
//
// Процессор содержит
// - описание данных, которые нужно получить ("задачи")
// - особенности получения данных (контекст - организация, период; этапы расчета; состав рассчитываемых сумм)
// - полученные данные
// - объекты, используемые в ходе всего расчета (менеджер временных таблиц, ссылку на протокол)
//
// Параметры:
//  ИмяАлгоритма	 - Строка - имя алгоритма, с помощью которого будут получены данные
//  ВременныеТаблицы - см. НовыйРасширенныйМенеджерВременныхТаблиц() - менеджер временных таблиц, используемых в ходе получения данных
//  СхемаРасчета	 - см. НовыйСхемаРасчета() - общая схема расчета
//  РезультатРасчета - см. НовыйРезультатРасчета() - коллекция, хранящая протокол расчета (протокол будет дополняться в ходе расчета)
Функция НовыйПроцессорПолученияДанных(ИмяАлгоритма, ВременныеТаблицы, СхемаРасчета, РезультатРасчета)
	
	Процессор = Новый Структура;
	Процессор.Вставить("ИмяАлгоритма",     ИмяАлгоритма);
	Процессор.Вставить("КонтекстРасчета",  СхемаРасчета.КонтекстРасчета);
	Процессор.Вставить("ВременныеТаблицы", ВременныеТаблицы);
	Процессор.Вставить("ОписаниеСумм",     СхемаРасчета.ОписаниеСумм);
	Процессор.Вставить("Задачи",           Новый ТаблицаЗначений);
	Процессор.Вставить("ЭтапыРасчета",     Новый Массив);     // Те, что упоминаются в Задачи
	Процессор.Вставить("РезультатРасчета", РезультатРасчета); // В ходе получения данных в результате заполняется только протокол
	
	Процессор.Задачи.Колонки.Добавить("Показатель",  ТипИмя());
	Процессор.Задачи.Колонки.Добавить("ЭтапРасчета", ТипИмя());
	Процессор.Задачи.Колонки.Добавить("ОтборДанных"); // см. НовыйОтборДанных()
	КоллекцииСумм.ДополнитьТаблицуЗначенийКолонкамиСумм(Процессор.Задачи, Процессор.ОписаниеСумм);
	Процессор.Задачи.Колонки.Добавить("ПротоколЗаполнен", Новый ОписаниеТипов("Булево"));
	
	Возврат Процессор;
	
КонецФункции

Функция ДобавитьЗаписьПротоколаПолученияДанныхИнформационнойБазы(ПроцессорПолученияДанных, Задача, Значение = Неопределено)
	
	Задача.ПротоколЗаполнен = Истина;
	
	Если Значение = Неопределено Тогда
		Значение = Задача;
	КонецЕсли;
	
	ЗаписьПротокола = ДобавитьЗаписьПротокола(
		ПроцессорПолученияДанных.РезультатРасчета,
		Задача.Показатель,
		Задача.ЭтапРасчета,
		ПроцессорПолученияДанных.ИмяАлгоритма,
		Значение);
		
	ОтключитьОтображениеЭтапаРасчетаНеУчитываемые(ЗаписьПротокола, Задача.ЭтапРасчета, ПроцессорПолученияДанных.ОписаниеСумм);
	
	Возврат ЗаписьПротокола;
	
КонецФункции

Процедура ПропуститьПолучениеДанных(ПроцессорПолученияДанных, Задача)
	
	ДобавитьЗаписьПротокола(
		ПроцессорПолученияДанных.РезультатРасчета,
		Задача.Показатель,
		Задача.ЭтапРасчета,
		"Пропустить");
		
	Задача.ПротоколЗаполнен = Истина;
	
КонецПроцедуры

Функция ПроверитьОграничение(Результат, Значение, ШагРасчета, СхемаРасчета)
		
	Если ШагРасчета.Оператор <> "=" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Это последний шаг расчета показателя. На этом шаге проверим ограничение
	Ограничение = СхемаРасчета.Ограничения.Найти(ШагРасчета.Имя, "Показатель"); // См. НовыйОграничения()
	Если Ограничение = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Границы = Новый Структура;
	Границы.Вставить("Сумма",   Ограничение.Граница);
	Границы.Вставить("СуммаНУ", Ограничение.Граница);
	
	ОграничениеКоллекцияСумм = КоллекцииСумм.НовыйКоллекцияСумм(СхемаРасчета.ОписаниеСумм);
	КоллекцииСумм.Заполнить(ОграничениеКоллекцияСумм, Границы, СхемаРасчета.ОписаниеСумм);
	
	Если Ограничение.Тип = "Сверху" Тогда
		ОграничитьСверху(Значение, ОграничениеКоллекцияСумм, СхемаРасчета.ОписаниеСумм);
	Иначе
		ОграничитьСнизу(Значение, ОграничениеКоллекцияСумм, СхемаРасчета.ОписаниеСумм);
	КонецЕсли;
	
	УстановитьРассчитанноеЗначение(Результат, ШагРасчета.Имя, ШагРасчета.ЭтапРасчета, Значение);
	
	ЗаписьПротокола = ДобавитьЗаписьПротокола(
		Результат,
		ШагРасчета.Имя,
		ШагРасчета.ЭтапРасчета,
		"Ограничение",
		ОграничениеКоллекцияСумм);
	ЗаписьПротокола.Оператор = "=";
	ЗаписьПротокола.Условие  = Ограничение.Тип;
		
	Возврат Истина;
	
КонецФункции

Функция НовыйОтборРасчета()
	
	Отбор = Новый ТаблицаЗначений;
	Отбор.Колонки.Добавить("Имя",         ТипИмя());
	Отбор.Колонки.Добавить("ЭтапРасчета", ТипИмя());
	
	Отбор.Индексы.Добавить("Имя, ЭтапРасчета");
	
	Возврат Отбор;
	
КонецФункции

Процедура ДополнитьПланРасчетаРекурсивно(ПланРасчета, Показатель, ЭтапРасчета, СхемаРасчета, ЭтапыРасчета)
	
	// План включает элементы трех типов:
	// - "неявные" формулы, определенные логикой этапов расчета (из общей суммы вычитаем непринимаемые и спец. режимы)
	// - формулы, описанные явно в схеме расчета
	// - получение данных информационной базы
	
	// Для того, чтобы исключить показатели, уже включенные в план
	Отбор = Новый Структура;
	Отбор.Вставить("Имя",         Показатель.Имя);
	Отбор.Вставить("ЭтапРасчета", ЭтапРасчета);
	
	Если Не ПустаяСтрока(Показатель.АлгоритмПолученияДанных) И Не ПустаяСтрока(ЭтапРасчета) Тогда
		
		// Следует получить данные информационной базы
		Если ПланРасчета.ДанныеИнформационнойБазы.НайтиСтроки(Отбор).Количество() = 0 Тогда
			НоваяСтрока = ПланРасчета.ДанныеИнформационнойБазы.Добавить();
			НоваяСтрока.Имя         = Показатель.Имя;
			НоваяСтрока.ЭтапРасчета = ЭтапРасчета;
			НоваяСтрока.Показатель  = Показатель;
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
		
	Если ПланРасчета.Формулы.НайтиСтроки(Отбор).Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
		
	Формула = Формула(СхемаРасчета, Показатель.Имя);
	
	Если Формула <> Неопределено Тогда
		
		// Применим явную формулу
		Для Каждого ЭлементФормулы Из Формула Цикл
			
			НоваяСтрока = ПланРасчета.Формулы.Добавить();
			НоваяСтрока.Имя                       = Показатель.Имя;
			НоваяСтрока.ЭтапРасчета               = ЭтапРасчета;
			НоваяСтрока.Показатель                = Показатель;
			НоваяСтрока.ЭлементФормулыИмя         = ЭлементФормулы.ЭлементФормулы;
			НоваяСтрока.ЭлементФормулыЭтапРасчета = ЭтапРасчета;
			НоваяСтрока.Оператор                  = ЭлементФормулы.Оператор;
			
			ДополнитьПланРасчетаРекурсивно(
				ПланРасчета,
				ПоказательСхемыРасчета(СхемаРасчета, ЭлементФормулы.ЭлементФормулы),
				ЭтапРасчета,
				СхемаРасчета,
				ЭтапыРасчета);
				
			// Для того, чтобы план можно было выполнить последовательно, все строки, добавленные при вызове ДополнитьПланРасчетаРекурсивно()
			// должны быть раньше, чем строка для рассчитываемого показателя.
			// В то же время, добавлять новые строки нужно до рекурсивного вызова, чтобы избежать повторного включения показателя в план 
			// (в т.ч. зацикливания)
			СдвинутьВКонец(НоваяСтрока);
				
		КонецЦикла;
			
	ИначеЕсли ПустаяСтрока(ЭтапРасчета) Тогда
	
		// Применим неявную формулу - пройдем все этапы расчета
		Для Каждого ВложенныйЭтапРасчета Из ЭтапыРасчета Цикл
			
			НоваяСтрока = ПланРасчета.Формулы.Добавить();
			НоваяСтрока.Имя                       = Показатель.Имя;
			НоваяСтрока.ЭтапРасчета               = ЭтапРасчета;
			НоваяСтрока.Показатель                = Показатель;
			НоваяСтрока.ЭлементФормулыИмя         = Показатель.Имя;
			НоваяСтрока.ЭлементФормулыЭтапРасчета = ВложенныйЭтапРасчета;
			НоваяСтрока.Оператор                  = ОператорЭтапаРасчета(ВложенныйЭтапРасчета);
			
			ДополнитьПланРасчетаРекурсивно(ПланРасчета, Показатель, ВложенныйЭтапРасчета, СхемаРасчета, ЭтапыРасчета);
			
			СдвинутьВКонец(НоваяСтрока);
			
		КонецЦикла;
	Иначе
		
		// Порядок расчета показателя не определен
		НоваяСтрока = ПланРасчета.Формулы.Добавить();
		НоваяСтрока.Имя         = Показатель.Имя;
		НоваяСтрока.ЭтапРасчета = ЭтапРасчета;
		НоваяСтрока.Показатель  = Показатель;
		
	КонецЕсли;
	
	// Отметим, где нужно применить ограничение
	Если ПустаяСтрока(ЭтапРасчета) Тогда
		НоваяСтрока = ПланРасчета.Формулы.Добавить();
		НоваяСтрока.Имя         = Показатель.Имя;
		НоваяСтрока.ЭтапРасчета = ЭтапРасчета;
		НоваяСтрока.Показатель  = Показатель;
		НоваяСтрока.Оператор    = "=";
	КонецЕсли;
	
КонецПроцедуры

Процедура СдвинутьВКонец(СтрокаТаблицыЗначений)
	
	ТаблицаЗначений = СтрокаТаблицыЗначений.Владелец();
	КоличествоПозиций = ТаблицаЗначений.Количество() - ТаблицаЗначений.Индекс(СтрокаТаблицыЗначений) - 1;
	Если КоличествоПозиций = 0 Тогда
		Возврат;
	КонецЕсли;
	ТаблицаЗначений.Сдвинуть(СтрокаТаблицыЗначений, КоличествоПозиций);
	
КонецПроцедуры

Функция ТипОператорФормулы()
	Возврат ОбщегоНазначения.ОписаниеТипаСтрока(1); // Допускаются "+", "-" и "=" ("=" означает "проверить ограничение")
КонецФункции

Функция Формула(СхемаРасчета, ИмяПоказателя)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Результат", ИмяПоказателя);
	ЭлементыФормулы = СхемаРасчета.Формулы.НайтиСтроки(Отбор);
	Если ЭлементыФормулы.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		
		// Упорядочим записи для понятного представления в протоколе
		Формула = СхемаРасчета.Формулы.СкопироватьКолонки();
		Формула.Колонки.Добавить("Упорядочивание", Новый ОписаниеТипов("Число"));
		Для Каждого ЭлементФормулы Из ЭлементыФормулы Цикл
			НоваяСтрока = Формула.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементФормулы);
			НоваяСтрока.Упорядочивание = СхемаРасчета.Формулы.Индекс(ЭлементФормулы);
		КонецЦикла;
		
		Возврат Формула;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область РезультатРасчета

Функция НовыйРезультатРасчета(ОписаниеСумм)
	
	Результат = Новый Структура;
	
	Результат.Вставить("ОписаниеСумм",         ОписаниеСумм);
	Результат.Вставить("РассчитанныеЗначения", Новый ТаблицаЗначений);
	Результат.Вставить("Протокол",             НовыйПротоколРасчета(ОписаниеСумм));
	
	Результат.РассчитанныеЗначения.Колонки.Добавить("Имя",             ТипИмя());
	Результат.РассчитанныеЗначения.Колонки.Добавить("ЭтапРасчета",     ТипИмя());
	КоллекцииСумм.ДополнитьТаблицуЗначенийКолонкамиСумм(Результат.РассчитанныеЗначения, ОписаниеСумм);
	
	Результат.РассчитанныеЗначения.Индексы.Добавить("Имя");
	Результат.РассчитанныеЗначения.Индексы.Добавить("Имя,ЭтапРасчета");
	
	Возврат Результат;
	
КонецФункции

Функция РассчитанноеЗначение(РассчитанныеЗначения, ИмяПоказателя, ЭтапРасчета = "")
	
	Отбор = Новый Структура;
	Отбор.Вставить("Имя",           ИмяПоказателя);
	Отбор.Вставить("ЭтапРасчета",   ЭтапРасчета);
	
	НайденныеСтроки = РассчитанныеЗначения.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Возврат НайденныеСтроки[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура УстановитьРассчитанноеЗначение(РезультатРасчета, ИмяПоказателя, ЭтапРасчета, Значение)
	
	Если Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Строка = РассчитанноеЗначение(РезультатРасчета.РассчитанныеЗначения, ИмяПоказателя, ЭтапРасчета);
	Если Строка = Неопределено Тогда
		Строка = РезультатРасчета.РассчитанныеЗначения.Добавить();
		Строка.Имя         = ИмяПоказателя;
		Строка.ЭтапРасчета = ЭтапРасчета;
	КонецЕсли;
	
	КоллекцииСумм.Заполнить(Строка, Значение, РезультатРасчета.ОписаниеСумм);
	
КонецПроцедуры

#КонецОбласти

#Область ПротоколРасчета

Функция НовыйПротоколРасчета(ОписаниеСумм)
	
	Протокол = Новый ТаблицаЗначений;
	
	Протокол.Колонки.Добавить("Показатель",  ТипИмя());
	Протокол.Колонки.Добавить("ЭтапРасчета", ТипИмя());
	Протокол.Колонки.Добавить("ТипЗаписи",   ТипИмя());
	Протокол.Колонки.Добавить("Описание",    ОбщегоНазначения.ОписаниеТипаСтрока(0)); // Для вывода пользователю
	Протокол.Колонки.Добавить("Оператор",    ТипОператорФормулы());
	КоллекцииСумм.ДополнитьТаблицуЗначенийКолонкамиСумм(Протокол, ОписаниеСумм);
	Протокол.Колонки.Добавить("Условие",     Новый ОписаниеТипов("Структура"));       // Состав определяется типом записи
	Протокол.Колонки.Добавить("ПоказыватьПользователюТолькоЕслиСуммаЗаполнена",
	                                         Новый ОписаниеТипов("Булево"));
	
	Возврат Протокол;
	
КонецФункции

Функция ДобавитьЗаписьПротокола(РезультатРасчета, Показатель, ЭтапРасчета, ТипЗаписи, Значение = Неопределено)
	
	Запись = РезультатРасчета.Протокол.Добавить();
	Запись.Показатель  = Показатель;
	Запись.ЭтапРасчета = ЭтапРасчета;
	Запись.ТипЗаписи   = ТипЗаписи;
	Запись.Условие     = НовыйУсловиеЗаписиПротокола(ТипЗаписи);
	Запись.Оператор    = "+";
	Если Значение <> Неопределено Тогда
		КоллекцииСумм.Заполнить(Запись, Значение, РезультатРасчета.ОписаниеСумм);
	КонецЕсли;
	
	Возврат Запись;
	
КонецФункции

Функция НовыйУсловиеЗаписиПротокола(ТипЗаписи)
	
	Условие = Неопределено;
	
	Если ТипЗаписи = "Формула" Тогда
		
		Условие = Новый Структура();
		Условие.Вставить("Имя");
		Условие.Вставить("ЭтапРасчета");
		
	ИначеЕсли ТипЗаписи = "Ограничение" Тогда
		
		Условие = ""; // "Сверху" или "Снизу"
		
	Иначе // Прикладные алгоритмы
		
		Условие = НовыйУсловиеПолученияДанныхИнформационнойБазы(ТипЗаписи);
		
	КонецЕсли;
	
	Возврат Условие;
	
КонецФункции

#КонецОбласти

#Область КоллекцияСхемаРасчета

Функция НовыйСхемаРасчета(Организация, КонецПериода, ОписаниеСумм)
	
	СхемаРасчета = Новый Структура;
	СхемаРасчета.Вставить("Показатели",   НовыйПоказатели());
	СхемаРасчета.Вставить("Формулы",      НовыйФормулы());
	СхемаРасчета.Вставить("Ограничения",  НовыйОграничения());
	СхемаРасчета.Вставить("ЭтапыРасчета", Новый Массив); // Этапы, которые допустимы в данном контексте расчета. Заполняется ниже
	
	СхемаРасчета.Вставить("ОписаниеСумм",    ОписаниеСумм);
	
	СхемаРасчета.Вставить("КонтекстРасчета", Новый Структура); // Описывает контекст, в котором применяется схема - организацию, период, отдельные сведения учетной политики
	СхемаРасчета.КонтекстРасчета.Вставить("НачалоПериода", НачалоНалоговогоПериода(КонецПериода));
	СхемаРасчета.КонтекстРасчета.Вставить("КонецПериода",  КонецМесяца(КонецПериода));
	СхемаРасчета.КонтекстРасчета.Вставить("Организация",   Организация);
	СхемаРасчета.КонтекстРасчета.Вставить("Организации",   ОбщегоНазначенияБПВызовСервераПовтИсп.ВсяОрганизация(Организация));
	
	ПрименяютсяСпециальныеРежимы = Не УчетнаяПолитика.ТолькоОсновнаяСистемаНалогообложенияЗаПериод(
		СхемаРасчета.КонтекстРасчета.Организация,
		СхемаРасчета.КонтекстРасчета.НачалоПериода,
		СхемаРасчета.КонтекстРасчета.КонецПериода);
		
	СхемаРасчета.ЭтапыРасчета = ЭтапыРасчета(ПрименяютсяСпециальныеРежимы);
		
	СхемаРасчета.Вставить("КонтекстЗаполнения", Новый Структура); // Служебная, используется в ходе заполнения коллекции
	СхемаРасчета.КонтекстЗаполнения.Вставить("Показатель",            Неопределено); // Крайняя добавленная строка
	СхемаРасчета.КонтекстЗаполнения.Вставить("Коллекция",             Неопределено); // Крайняя добавленная коллекция
	СхемаРасчета.КонтекстЗаполнения.Вставить("КраткаяФормаИмен",      Истина);       // При добавлении элементов коллекции указывается часть имени элемента, дополняющая имя коллекции
	
	Возврат СхемаРасчета;
	
КонецФункции

Функция НовыйПоказатели()
	
	Показатели = НовыйОписаниеФормыОтчета();
	Показатели.Колонки.Добавить("ЭтапРасчета",             ТипИмя());
	Показатели.Колонки.Добавить("АлгоритмПолученияДанных", ТипИмя());
	Показатели.Колонки.Добавить("ОтборДанных");            // см. НовыйОтборДанных()
	
	Показатели.Индексы.Добавить("Имя");
	Показатели.Индексы.Добавить("Имя,ЭтапРасчета");
	Показатели.Индексы.Добавить("АлгоритмПолученияДанных");
	
	Возврат Показатели;
	
КонецФункции

Функция НовыйОписаниеФормыОтчета()
	
	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("Имя",                      ТипИмя());
	Показатели.Колонки.Добавить("НомерЛиста",               ОбщегоНазначения.ОписаниеТипаСтрока(2));
	Показатели.Колонки.Добавить("НомерПриложения",          ОбщегоНазначения.ОписаниеТипаСтрока(1));
	Показатели.Колонки.Добавить("НомерСтроки",              ОбщегоНазначения.ОписаниеТипаСтрока(3));
	Показатели.Колонки.Добавить("Представление",            ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Показатели.Колонки.Добавить("ОсобенностьПредставления", ТипИмя()); // Сейчас поддерживается только одна особенность: "Убыток"
	
	Возврат Показатели;
	
КонецФункции

Функция НовыйФормулы()
	
	Формулы = Новый ТаблицаЗначений;
	Формулы.Колонки.Добавить("Результат",      ТипИмя());
	Формулы.Колонки.Добавить("ЭлементФормулы", ТипИмя());
	Формулы.Колонки.Добавить("Оператор",       ТипОператорФормулы());
	Формулы.Индексы.Добавить("Результат");
	
	Возврат Формулы;
	
КонецФункции

Функция НовыйОграничения()
	
	Ограничения = Новый ТаблицаЗначений;
	Ограничения.Колонки.Добавить("Показатель", ТипИмя());
	Ограничения.Колонки.Добавить("Тип",        ТипИмя()); // "Сверху" или "Снизу"
	Ограничения.Колонки.Добавить("Граница",    Новый ОписаниеТипов("Число"));
	Ограничения.Индексы.Добавить("Показатель");
	
	Возврат Ограничения;
	
КонецФункции

Функция ТипИмя()
	Возврат ОбщегоНазначения.ОписаниеТипаСтрока(255);
КонецФункции

Функция ПоказательСхемыРасчета(СхемаРасчета, ИмяПоказателя)
	
	Возврат СхемаРасчета.Показатели.Найти(ИмяПоказателя, "Имя");
	
КонецФункции

#Область ОписаниеЭлементовСхемыРасчета

Функция ДобавитьПоказатель(СхемаРасчета, ПолноеИмяПоказателя)
	
	Показатель = СхемаРасчета.Показатели.Найти(ПолноеИмяПоказателя, "Имя");
	Если Показатель = Неопределено Тогда
		Показатель = СхемаРасчета.Показатели.Добавить();
		Показатель.Имя        = ПолноеИмяПоказателя;
	КонецЕсли;
	
	СхемаРасчета.КонтекстЗаполнения.Показатель = Показатель;
	
	Возврат Показатель;
	
КонецФункции

Процедура ДобавитьРасчет(СхемаРасчета, ПолноеИмяПоказателя, КраткаяФормаИмен = Истина)
	
	НоваяСтрока = ДобавитьПоказатель(СхемаРасчета, ПолноеИмяПоказателя);
	
	СхемаРасчета.КонтекстЗаполнения.Коллекция        = НоваяСтрока;
	СхемаРасчета.КонтекстЗаполнения.КраткаяФормаИмен = КраткаяФормаИмен;
	
КонецПроцедуры

Процедура ДобавитьОписание(СхемаРасчета, НомерЛиста = "", НомерПриложения = "", НомерСтроки = "", Представление = "", ОсобенностьПредставления = "")
	
	ТекущаяСтрока = СхемаРасчета.КонтекстЗаполнения.Показатель;
	ТекущаяСтрока.НомерЛиста               = НомерЛиста;
	ТекущаяСтрока.НомерПриложения          = НомерПриложения;
	ТекущаяСтрока.НомерСтроки              = НомерСтроки;
	ТекущаяСтрока.Представление            = Представление;
	ТекущаяСтрока.ОсобенностьПредставления = ОсобенностьПредставления;
	
КонецПроцедуры

Процедура ДобавитьСлагаемое(СхемаРасчета, ИмяПоказателя, Оператор = "+")
	
	ИмяВладельца = СхемаРасчета.КонтекстЗаполнения.Коллекция.Имя;
	Если СхемаРасчета.КонтекстЗаполнения.КраткаяФормаИмен Тогда
		ПолноеИмяПоказателя = ИмяВладельца + "." + ИмяПоказателя;
	Иначе
		ПолноеИмяПоказателя = ИмяПоказателя;
	КонецЕсли;
	
	ДобавитьПоказатель(СхемаРасчета, ПолноеИмяПоказателя);
	
	Элемент = СхемаРасчета.Формулы.Добавить();
	Элемент.Результат      = ИмяВладельца;
	Элемент.ЭлементФормулы = ПолноеИмяПоказателя;
	Элемент.Оператор       = Оператор;
	
КонецПроцедуры

Процедура ДобавитьВычитаемое(СхемаРасчета, ИмяПоказателя)
	
	ДобавитьСлагаемое(СхемаРасчета, ИмяПоказателя, "-");
	
КонецПроцедуры

Функция ДобавитьИсточникДанных(СхемаРасчета, Знач АлгоритмПолученияДанных = "")
	
	ТекущаяСтрока = СхемаРасчета.КонтекстЗаполнения.Показатель;
	
	Если Не ПустаяСтрока(АлгоритмПолученияДанных) Тогда
		ТекущаяСтрока.АлгоритмПолученияДанных = АлгоритмПолученияДанных;
	Иначе
		ТекущаяСтрока.АлгоритмПолученияДанных = ТекущаяСтрока.Имя;
	КонецЕсли;
	ТекущаяСтрока.ОтборДанных = НовыйОтборДанных(ТекущаяСтрока.АлгоритмПолученияДанных);
	
	Возврат ТекущаяСтрока; // для установки отбора данных
	
КонецФункции

Процедура ДобавитьОграничение(СхемаРасчета, Граница, Тип)
	
	ИмяВладельца = СхемаРасчета.КонтекстЗаполнения.Коллекция.Имя;
	
	Ограничение = СхемаРасчета.Ограничения.Добавить();
	Ограничение.Показатель = ИмяВладельца;
	Ограничение.Тип        = Тип;
	Ограничение.Граница    = Граница;
	
КонецПроцедуры

Функция ПолноеИмяЗаполняемогоПоказателя(СхемаРасчета)
	
	Показатель = СхемаРасчета.КонтекстЗаполнения.Показатель;
	Если Показатель = Неопределено Тогда
		Возврат Неопределено;
	Иначе
	 	Возврат Показатель.Имя;
	КонецЕсли;
	
КонецФункции

Функция ОстановитьПостроениеДерева(СхемаРасчета)
	
	Возврат ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СхемаРасчета.КонтекстЗаполнения);
	
КонецФункции

Процедура ПродолжитьПостроениеДерева(СхемаРасчета, ТочкаОстановки)
	
	ЗаполнитьЗначенияСвойств(СхемаРасчета.КонтекстЗаполнения, ТочкаОстановки);
	
КонецПроцедуры


#КонецОбласти

#КонецОбласти

#Область РаботаСЗапросами

// Инициализирует запрос в контексте заполнения декларации
//
// Параметры:
//  Контекст		 - элемент схемы расчета, см. НовыйСхемаРасчета()
//  ВременныеТаблицы - см. НовыйРасширенныйМенеджерВременныхТаблиц() - менеджер временных таблиц
// Возвращаемое значение:
//  Запрос 
Функция НовыйЗапрос(Контекст, ВременныеТаблицы = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", Контекст.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  Контекст.КонецПериода);
	Запрос.УстановитьПараметр("Организация",   Контекст.Организация);
	Запрос.УстановитьПараметр("Организации",   Контекст.Организации);
	
	Если ВременныеТаблицы <> Неопределено Тогда
		Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы.Менеджер;
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

// Конструктор коллекции, используемой для выполнения многоэтапных программ обработки данных, 
// подразумевающих последовательное выполнение запросов с использованием одних и тех же данных.
//
// Содержит МенеджерВременныхТаблиц и коллекции, из которых можно получить список временных таблиц, которые содержатся в Менеджере.
//
// Временные таблицы, управляемые с помощью менеджера, включают в себя локальные и глобальные.
// Локальные временные таблицы могут многократно создаваться и уничтожаться в ходе обработки данных.
// Как правило, такие временные таблицы следует использовать внутри одной процедуры или функции.
// Глобальные временные таблицы уничтожаются, когда потребные для обработки данные получены - при уничтожении менеджера.
// 
// Список временных таблиц можно получить, если создание и уничтожение таблиц выполняется с помощью методов
// - ВыполнитьЗапрос()
// - УничтожитьЛокальныеВременныеТаблицы()
//
// Возвращаемое значение:
//  Структура 
Функция НовыйРасширенныйМенеджерВременныхТаблиц()
	
	ВременныеТаблицы = Новый Структура;
	ВременныеТаблицы.Вставить("Менеджер",           Новый МенеджерВременныхТаблиц);
	ВременныеТаблицы.Вставить("ГлобальныеТаблицы",  Новый Массив);
	ВременныеТаблицы.Вставить("ЛокальныеТаблицы",   Новый Массив);
	
	Возврат ВременныеТаблицы;
	
КонецФункции

// Выполняет запрос с использованием временных таблиц, управление которых выполняется с помощью НовыйРасширенныйМенеджерВременныхТаблиц().
// Перед выполнением запроса уничтожаются локальные временные таблицы, если их существование не позволяет выполнить запрос.
//
// Параметры:
//  Запрос								 - Запрос - запрос с установленным текстом и параметрами
//  ВременныеТаблицы					 - см. НовыйРасширенныйМенеджерВременныхТаблиц() 
//  ИменаГлобальныхТаблиц				 - Строка,Массив - перечень имен временных таблиц, 
//                                                         которые создаются запросом 
//                                                         и не должны уничтожаться в течение жизни менеджера временных таблиц.
//                                                         Если запрос не создает таблицу, имя которой указано в ИменаГлобальныхТаблиц, 
//                                                         то вызывается исключение.
//  УничтожитьЛокальныеВременныеТаблицы	 - Булево - позволяет уничтожить все временные таблицы, созданные в этом запросе, 
//                                                  за исключением перечисленных в ИменаГлобальныхТаблиц
// Возвращаемое значение:
//  РезультатЗапроса
Функция ВыполнитьЗапрос(Запрос, ВременныеТаблицы, Знач ИменаГлобальныхТаблиц = Неопределено, УничтожитьЛокальныеВременныеТаблицы = Ложь)
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	
	НовыеТаблицы         = Новый Массив; // Сначала поместим туда все таблицы, а потом удалим глобальные - останутся вновь добавленные локальные.
	ТаблицыКПересозданию = Новый Массив; // Возможно, какие-то таблицы уже созданы. В этом случае предварительно удалим их.
	Для Каждого ЗапросСхемыЗапроса Из СхемаЗапроса.ПакетЗапросов Цикл
		
		Если ТипЗнч(ЗапросСхемыЗапроса) <> Тип("ЗапросВыбораСхемыЗапроса") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПустаяСтрока(ЗапросСхемыЗапроса.ТаблицаДляПомещения) Тогда
			Продолжить;
		КонецЕсли;
		
		НовыеТаблицы.Добавить(ЗапросСхемыЗапроса.ТаблицаДляПомещения);
		
		Если ВременныеТаблицы.ЛокальныеТаблицы.Найти(ЗапросСхемыЗапроса.ТаблицаДляПомещения) <> Неопределено Тогда
			ТаблицыКПересозданию.Добавить(ЗапросСхемыЗапроса.ТаблицаДляПомещения);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТаблицыКПересозданию) Тогда
		УничтожитьЛокальныеВременныеТаблицы(ВременныеТаблицы, ТаблицыКПересозданию);
	КонецЕсли;
	
	Если ТипЗнч(ИменаГлобальныхТаблиц) = Тип("Строка") Тогда
		ИменаГлобальныхТаблиц = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаГлобальныхТаблиц,,Истина,Истина);
	КонецЕсли;
	
	Если ТипЗнч(ИменаГлобальныхТаблиц) = Тип("Массив") Тогда
		Для Каждого ИмяТаблицы Из ИменаГлобальныхТаблиц Цикл
			
			ИндексТаблицы = НовыеТаблицы.Найти(ИмяТаблицы);
			
			Если ИндексТаблицы = Неопределено Тогда
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неверно задано имя временной таблицы %1'"), ИмяТаблицы);
			КонецЕсли;
			
			НовыеТаблицы.Удалить(ИндексТаблицы);
			ВременныеТаблицы.ГлобальныеТаблицы.Добавить(ИмяТаблицы);
			
		КонецЦикла;
	КонецЕсли;
	
	Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы.Менеджер;
	РезультатЗапроса = Запрос.Выполнить();
	
	Если УничтожитьЛокальныеВременныеТаблицы Тогда
		// Удалим локальные таблицы, созданные в этой процедуре
		УничтожитьЛокальныеВременныеТаблицы(ВременныеТаблицы, НовыеТаблицы);
	Иначе
		// Дополним список временных таблиц
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВременныеТаблицы.ЛокальныеТаблицы, НовыеТаблицы);
	КонецЕсли;
	
	Возврат РезультатЗапроса;
	
КонецФункции

// Уничтожает локальные временные таблицы, управление которыми выполняется с помощью НовыйРасширенныйМенеджерВременныхТаблиц().
//
// Параметры:
//  ВременныеТаблицы - см. НовыйРасширенныйМенеджерВременныхТаблиц()
//  КУничтожению	 - Массив - перечень имен временных таблиц к уничтожению. Допускается передавать имена таблиц, созданных ранее.
//                              Если перечень имен не передан, то уничтожаются все локальные временные таблицы.
Процедура УничтожитьЛокальныеВременныеТаблицы(ВременныеТаблицы, Знач КУничтожению = Неопределено)
	
	Если КУничтожению = Неопределено Тогда
		КУничтожению = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ВременныеТаблицы.ЛокальныеТаблицы);
		ВременныеТаблицы.ЛокальныеТаблицы.Очистить();
	Иначе
		
		КоличествоЭлементов = КУничтожению.Количество();
		Для НомерСКонца = 1 По КоличествоЭлементов Цикл
			
			ИндексВПараметре = КоличествоЭлементов - НомерСКонца;
			ИмяТаблицы       = КУничтожению[ИндексВПараметре];
			
			ИндексВМенеджере = ВременныеТаблицы.ЛокальныеТаблицы.Найти(ИмяТаблицы);
			Если ИндексВМенеджере = Неопределено Тогда
				КУничтожению.Удалить(ИндексВПараметре); // не можем уничтожить - нет такой таблицы
			Иначе
				ВременныеТаблицы.ЛокальныеТаблицы.Удалить(ИндексВМенеджере);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если КУничтожению.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	Для Каждого ИмяТаблицы Из КУничтожению Цикл
		Пакет = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросУничтоженияТаблицыСхемыЗапроса"));
		Пакет.ИмяТаблицы = ИмяТаблицы;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы.Менеджер;
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	Запрос.Выполнить();
	
КонецПроцедуры


// Добавляет в текст запроса выбора поля для суммовых значений, в соответствии с переданным описанием сумм.
//
// Параметры:
//  СхемаЗапроса - СхемаЗапроса - содержит модифицируемый текст запроса
//  ШаблонСумм	 - Строка - описание выражения; может содержать символ %, который будет заменен на значение псевдонима поля 
//  ОписаниеСумм - см. НовыйОписаниеКоллекцииСумм()	- описание сумм, которые нужно получить с помощью запроса
Процедура ДобавитьКолонкиСумм(СхемаЗапроса, ШаблонСумм, ОписаниеСумм)
	
	Выражения = Новый Структура;
	Для Каждого ИмяСвойства Из КоллекцииСумм.ИменаСвойств(ОписаниеСумм) Цикл
		Выражения.Вставить(ИмяСвойства, СтрЗаменить(ШаблонСумм, "%", ИмяСвойства));
	КонецЦикла;
	
	ДобавитьПоляСхемыЗапроса(СхемаЗапроса, Выражения);
	
КонецПроцедуры

// Добавляет поле в текст запроса выбора. 
// Модифицируется первый запрос в первом пакете запросов. Модифицируемый запрос не должен содержать объединений.
//
// Параметры:
//  СхемаЗапроса - СхемаЗапроса - содержит модифицируемый текст запроса
//  Выражение	 - Строка - выражение, выбираемое запросом
//  Псевдоним	 - Строка - псевдоним, назначаемый новому полю
//  Группировать - Булево - Истина, если добавленное поле должно входить в состав группировок
Процедура ДобавитьПолеСхемыЗапроса(СхемаЗапроса, Выражение, Псевдоним, Группировать = Ложь)
	
	Выражения = Новый Структура;
	Выражения.Вставить(Псевдоним, Выражение);
	
	ДобавитьПоляСхемыЗапроса(СхемаЗапроса, Выражения, Группировать);
	
КонецПроцедуры

// Добавляет несколько полей в текст запроса выбора
// Модифицируется первый запрос в первом пакете запросов. Модифицируемый запрос не должен содержать объединений.
//
// Параметры:
//  СхемаЗапроса - СхемаЗапроса - содержит модифицируемый текст запроса
//  Выражения	 - Структура - Ключ: псевдоним поля; Значение: выражение выбора
//  Группировать - Булево - Истина, если добавленные поля должны входить в состав группировок
Процедура ДобавитьПоляСхемыЗапроса(СхемаЗапроса, Выражения, Группировать = Ложь)
	
	ЗапросВыбора         = СхемаЗапроса.ПакетЗапросов[0];
	ОператорСхемыЗапроса = ЗапросВыбора.Операторы[0];
	
	// В версии 8.3.5 СхемаЗапроса не позволяет просто добавить выражение с полем, отсутствующим в доступных полях - 
	// т.е. таким, которое выбирается из временной таблицы, созданной другим запросом.
	// Поэтому для модификации запроса используем не только СхемаЗапроса, но и средства работы со строками:
	// - в СхемаЗапроса опишем выражения, в которых будет параметр с уникальным именем
	// - средствами работы с текстами заменим такие параметры на выражения
	// - модифицированным текстом инициализируем СхемуЗапроса.
	
	// Но если в запросе уже есть группировки и в ходе вызова этой функции добавляются выражения без агрегатных функций,
	// то установить получившийся текст схеме не получится, так как
	// - выражения в виде временных параметров нельзя поместить в группировку
	// - после замены параметров на выражения появятся поля, не входящие в группировки.
	// Поэтому: 
	// - добавим такие группировки, которые будут включать и временный параметр, и уже существующее в схеме поле
	// - заменим в тексте запроса эти группировки на выражения
	
	ВременныеПараметры   = Новый Соответствие;
	
	УжеЕстьГруппировки = ОператорСхемыЗапроса.Группировка.Количество() > 0;
	Если Группировать И УжеЕстьГруппировки Тогда
		СлужебноеПолеГруппировок = "" + ОператорСхемыЗапроса.Группировка[0];
	Иначе
		СлужебноеПолеГруппировок = Неопределено;
	КонецЕсли;
	
	Для Каждого Выражение Из Выражения Цикл
		
		ВременныйПараметр = "&Поле" + СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");
		ВременныеПараметры.Вставить(ВременныйПараметр, Выражение.Значение);
		
		ОператорСхемыЗапроса.ВыбираемыеПоля.Добавить(ВременныйПараметр);
		Индекс = ОператорСхемыЗапроса.ВыбираемыеПоля.Количество() - 1;
		ЗапросВыбора.Колонки[Индекс].Псевдоним = Выражение.Ключ;
		
		Если Группировать И СлужебноеПолеГруппировок <> Неопределено Тогда
			ВременныйПараметр = "&Группировка" + СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");
			ВременнаяГруппировка = "ЕСТЬNULL(" + ВременныйПараметр + ", " + СлужебноеПолеГруппировок + ")";
			ВременныеПараметры.Вставить(ВременнаяГруппировка, Выражение.Значение);
			ОператорСхемыЗапроса.Группировка.Добавить(ВременнаяГруппировка);
		КонецЕсли;
		
	КонецЦикла;

	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	Для Каждого ВременныйПараметр Из ВременныеПараметры Цикл
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ВременныйПараметр.Ключ, ВременныйПараметр.Значение);
	КонецЦикла;
	
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	Если Группировать И Не УжеЕстьГруппировки Тогда
		ЗапросВыбора         = СхемаЗапроса.ПакетЗапросов[0];
		ОператорСхемыЗапроса = ЗапросВыбора.Операторы[0];
		Для Каждого Выражение Из Выражения Цикл
			ОператорСхемыЗапроса.Группировка.Добавить(Выражение.Значение);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИнтерфейсБРО

Процедура ПередатьРассчитанныеЗначенияБРО(Контейнер, РассчитанныеЗначения, ОписаниеФормыОтчета, ИмяРедакции, СхемаРасчета)
	
	ЗаполненныеСтраницы = Новый Соответствие; // См. комментарий ниже про "Признак налогоплательщика"
	
	Для Каждого Показатель Из ОписаниеФормыОтчета Цикл
		
		// Значение - в контейнер
		Значение = СуммаНУПоказателя(РассчитанныеЗначения, Показатель.Имя);
		
		ИмяРазделаБРО = ИмяРазделаБРО(Показатель);
		
		Если Не Контейнер.Свойство(ИмяРазделаБРО) Тогда
			Продолжить;
		КонецЕсли;
		
		РазделБРО = Контейнер[ИмяРазделаБРО];
		
		Если ТипЗнч(РазделБРО) <> Тип("ТаблицаЗначений") 
			И ТипЗнч(РазделБРО) <> Тип("ДанныеФормыКоллекция") Тогда
			// Не умеем такие обрабатывать
		КонецЕсли;
			
		// Многостраничный раздел.
		Если РазделБРО.Количество() = 0 Тогда
			// Не можем заполнить
			Возврат;
		КонецЕсли;
		
		НомерЯчейкиБРО = НомерПоказателяБРО(Показатель, ИмяРедакции);
		
		// Умеем работать только с первой страницей.
		ПоместитьЗначениеПоказателяНаСтраницуБРО(РазделБРО[0], НомерЯчейкиБРО, Значение);
		
		// Очистим значение показателя на всех страницах, кроме первой.
		Для ИндексСтраницы = 1 По РазделБРО.Количество() - 1 Цикл
			ПоместитьЗначениеПоказателяНаСтраницуБРО(РазделБРО[ИндексСтраницы], НомерЯчейкиБРО, Неопределено);
		КонецЦикла;
		
		// Отметим, что страница содержит данные
		Если ЗначениеЗаполнено(Значение) И ЗаполненныеСтраницы[ИмяРазделаБРО] = Неопределено Тогда
			НомерСлужебнойЯчейки = НомерСлужебнойЯчейкиПризнакНалогоплательщика(Показатель.НомерЛиста, Показатель.НомерПриложения, ИмяРедакции);
			ЗаполненныеСтраницы.Вставить(ИмяРазделаБРО, НомерСлужебнойЯчейки);
		КонецЕсли;
		
	КонецЦикла;
	
	// Заполним служебное поле "Признак налогоплательщика".
	// Название этого поля - "признак налогоплательщика" - не отражает его сути.
	// Поле есть на каждой странице и имеет двойное назначение: "техническое" и "налоговое".
	// 1. С технической точки зрения, оно показывает, используется ли конкретная страница - будет ли она представлена в составе декларации.
	// Поэтому, если есть данные для заполнения на этой странице, то нужно убедиться, что поле также заполнено.
	// 2. С налоговой точки зрения, значение в этом поле информирует получателя отчета об особенностях операций,
	// отраженных на конкретной странице.
	// Автоматическое заполнение предполагает, что речь идет об обычных операциях - без особенностей.
	ПризнакНалогоплательщика = "1";
	Для Каждого ОписаниеСтраницы Из ЗаполненныеСтраницы Цикл
		РазделБРО      = Контейнер[ОписаниеСтраницы.Ключ]; // Выше уже убедились, что этот раздел пригоден для ПоместитьЗначениеПоказателяНаСтраницуБРО()
		ПоместитьЗначениеПоказателяНаСтраницуБРО(РазделБРО[0], ОписаниеСтраницы.Значение, ПризнакНалогоплательщика);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПередатьПротоколРасчетаБРО(Контейнер, РезультатРасчета, ОписаниеФормыОтчета, ИмяРедакции, СхемаРасчета)
	
	// Контейнер инициализируется при первом вызове ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки()
	
	// Преобразуем протокол в "дерево", чтобы 
	// - обеспечить быстрый поиск
	// - при поиске сохранить порядок строк
	// - связать протокол с описанием формы отчета.
	Протокол = Новый ТаблицаЗначений;
	Протокол.Колонки.Добавить("Имя",         ТипИмя());
	Протокол.Колонки.Добавить("ЭтапРасчета", ТипИмя());
	Протокол.Колонки.Добавить("Протокол",    Новый ОписаниеТипов("Массив")); // строки протокола
	Протокол.Колонки.Добавить("Показатель"); // Строка из ОписаниеФормыОтчета
	Протокол.Индексы.Добавить("Имя, ЭтапРасчета");
	Отбор = Новый Структура("Имя, ЭтапРасчета");
	Для Каждого ЗаписьПротокола Из РезультатРасчета.Протокол Цикл
		
		Отбор.Имя         = ЗаписьПротокола.Показатель;
		Отбор.ЭтапРасчета = ЗаписьПротокола.ЭтапРасчета;
		
		ГруппаЗаписей = Протокол.НайтиСтроки(Отбор);
		Если ГруппаЗаписей.Количество() > 0 Тогда
			ГруппаЗаписей = ГруппаЗаписей[0];
		Иначе
			
			ГруппаЗаписей = Протокол.Добавить();
			ЗаполнитьЗначенияСвойств(ГруппаЗаписей, Отбор);
			
			Если ПустаяСтрока(Отбор.ЭтапРасчета) Тогда
				ГруппаЗаписей.Показатель = ОписаниеФормыОтчета.Найти(Отбор.Имя, "Имя");
			КонецЕсли;
			
		КонецЕсли;
		ГруппаЗаписей.Протокол.Добавить(ЗаписьПротокола);
		
	КонецЦикла;
	
	Для Каждого Показатель Из ОписаниеФормыОтчета Цикл
		
		РасшифровкаПоказателя = Новый ТаблицаЗначений; // Соответствуют параметрам ДобавитьСтрокуРасшифровки()
		РасшифровкаПоказателя.Колонки.Добавить("ЗнакОперации");
		РасшифровкаПоказателя.Колонки.Добавить("НаименованиеСлагаемого");
		РасшифровкаПоказателя.Колонки.Добавить("Сумма");
		РасшифровкаПоказателя.Колонки.Добавить("ДополнительныеПараметры");
		
		ДобавитьЗаписиРасшифровкиПоказателяБРО(
			РасшифровкаПоказателя,
			Показатель.Имя,
			"", // ЭтапРасчета не заполнен - в декларацию выводятся только итоговые данные налогового учета
			РезультатРасчета.РассчитанныеЗначения,
			Протокол,
			СхемаРасчета,
			ОписаниеФормыОтчета, 
			ИмяРедакции);
		
		НомерЯчейки         = НомерПоказателяБРО(Показатель, ИмяРедакции);
		ИмяРазделаБРО       = ИмяРазделаБРО(Показатель);
		ПредставлениеСтроки = ПредставлениеСтрокиДекларации(Показатель);
		Для Каждого ЭлементРасшифровкиПоказателя Из РасшифровкаПоказателя Цикл
			
			ЗнакОперации = ЭлементРасшифровкиПоказателя.ЗнакОперации;
			Сумма        = ЭлементРасшифровкиПоказателя.Сумма;
			
			Если Показатель.ОсобенностьПредставления = "Убыток" Тогда
				// Обычно выручка - положительная, а расходы - отрицательные.
				// Сложение величин дает положительный результат при прибыли и отрицательный при убытке.
				// Но для показателей убытка все наоборот: при убытке в декларации положительное число.
				//
				// Несмотря на это, в расшифровке таких показателей выручку показываем привычно - положительным числом.
				// Соответственно, расходы - отрицательным.
				// Таким образом, итог расшифровки показателя убытка будет всегда отрицательным.
				//
				// Опыт показал, что отрицательный итог расшифровки, не совпадающий по знаку с данными в строке декларации,
				// понятен для пользователей: убыток же.
				// И наоборот: вычитание выручки из расходов вызывало недоумение.
				ЗнакОперации = РаскрытьСкобки("-", ЗнакОперации);
			КонецЕсли;
			
			Если ЗнакОперации = "-" Тогда
				// В форму РасшифровкаПоказателейРегламентированныхОтчетов суммы передаются так, чтобы их сложение дало значение расшифровываемого показателя
				Сумма = - Сумма;
			КонецЕсли;
			
			ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
				Контейнер,
				НомерЯчейки,
				ПредставлениеСтроки,
				ЗнакОперации,
				ЭлементРасшифровкиПоказателя.НаименованиеСлагаемого,
				Сумма,
				ИмяРазделаБРО,
				ЭлементРасшифровкиПоказателя.ДополнительныеПараметры);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если Контейнер <> Неопределено Тогда
		// В контейнере расшифровок колонка Организация может отсутствовать, но для корректной работы формы она необходима.
		Если Контейнер.Колонки.Найти("Организация") = Неопределено Тогда
			Контейнер.Колонки.Добавить("Организация");
		КонецЕсли;
		Контейнер.ЗаполнитьЗначения(СхемаРасчета.КонтекстРасчета.Организация, "Организация");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоместитьЗначениеПоказателяНаСтраницуБРО(СтраницаБРО, НомерЯчейкиБРО, Значение)
	
	ПоказателиБРО = РаспаковатьПоказателиБРО(СтраницаБРО);
	Если ПоказателиБРО = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// БРО предоставляет контейнер, инициализированный номерами ячеек
	Если Не ПоказателиБРО.Свойство(НомерЯчейкиБРО) Тогда
		Возврат;
	КонецЕсли;
	
	// В ходе заполнения нельзя менять тип значения в контейнере
	ТекущееЗначение = ПоказателиБРО[НомерЯчейкиБРО];
	ДопустимыйТип   = ТипЗнч(ТекущееЗначение);
	
	Если ТипЗнч(Значение) = ДопустимыйТип Тогда
		ПоказателиБРО.Вставить(НомерЯчейкиБРО, Значение);
	Иначе
		// очистим значение
		ОписаниеТипов = Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДопустимыйТип));
		ПоказателиБРО.Вставить(НомерЯчейкиБРО, ОписаниеТипов.ПривестиЗначение(Значение));
	КонецЕсли;
	
КонецПроцедуры

Функция ИмяРазделаБРО(ОписаниеПоказателя)
	
	Возврат "Лист" + ОписаниеПоказателя.НомерЛиста + "_" + ОписаниеПоказателя.НомерПриложения;
	
КонецФункции

Функция НомерПоказателяБРО(ОписаниеПоказателя, ИмяРедакции)
	
	Возврат НомерЯчейкиБРО(
		ОписаниеПоказателя.НомерЛиста,
		ОписаниеПоказателя.НомерПриложения,
		ОписаниеПоказателя.НомерСтроки,
		"03", // в печатной форме отчета колонки понумерованы; номер 3 - сумма в рублях
		ИмяРедакции);
	
КонецФункции

Функция НомерЯчейкиБРО(Знач НомерЛиста, Знач НомерПриложения, Знач НомерСтроки, Знач НомерГрафы, ИмяРедакции)
	
	// Структура номера: ПРРРРРСССССГГ, где
	// П - Префикс      - традиционный префикс, символ "П"
	// Р - НомерРаздела - условный номер раздела (листа, приложения и т.п.)
	// С - НомерСтроки  - условный номер строки
	// Г - НомерГрафы   - условный номер графы (колонки)
	// В разных редакциях формы отличается внутренняя структура перечисленных элементов.
	Префикс    = "П";
	
	// НомерРаздела включает в себя номер листа и номер приложения к нему.
	// В разных редакциях формы эти номера разной длины.
	Если ИмяРедакции = "ФормаОтчета2013Кв4" Тогда
		ДлинаНомераЛиста = 3;
	Иначе
		ДлинаНомераЛиста = 4;
	КонецЕсли;
	ДлинаНомераПриложения = 5 - ДлинаНомераЛиста;
	НомерЛиста      = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(НомерЛиста,      ДлинаНомераЛиста);
	НомерПриложения = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(НомерПриложения, ДлинаНомераПриложения);
	НомерРаздела    = НомерЛиста + НомерПриложения;
	
	НомерСтроки = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(НомерСтроки, 5);
	НомерГрафы  = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(НомерГрафы,  2);
	
	Возврат Префикс + НомерРаздела + НомерСтроки + НомерГрафы;
	
КонецФункции

Функция НомерСлужебнойЯчейкиПризнакНалогоплательщика(НомерЛиста, НомерПриложения, ИмяРедакции)
	
	// О назначении служебного поля см. комментарий в ПередатьРассчитанныеЗначенияБРО()
	УсловныйНомерСтроки = "1";
	УсловныйНомерГрафы  = "0";
	Возврат НомерЯчейкиБРО(НомерЛиста, НомерПриложения, УсловныйНомерСтроки, УсловныйНомерГрафы, ИмяРедакции);
	
КонецФункции

Функция СуммаНУПоказателя(РассчитанныеЗначения, ИмяПоказателя, ЭтапРасчета = "")
	
	Значение = РассчитанноеЗначение(РассчитанныеЗначения, ИмяПоказателя, ЭтапРасчета);
	Если Значение = Неопределено Тогда
		Возврат Неопределено; // Нужно отличать показатели, для которых нет значения, от нуля
	Иначе
		Возврат Значение.СуммаНУ; // См. ОписаниеСуммНалоговыйУчет()
	КонецЕсли;
					
КонецФункции

Функция РаспаковатьПоказателиБРО(СтраницаБРО)
			
	// Техническая особенность БРО: показатели хранятся внутри списка значений, в котором всегда одна строка.
	ХранилищеПоказателейБРО = СтраницаБРО.Данные;
	Если ХранилищеПоказателейБРО.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПоказателиБРО = ХранилищеПоказателейБРО[0].Значение;
	Если ТипЗнч(ПоказателиБРО) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПоказателиБРО;
	
КонецФункции

Функция ПредставлениеСтрокиДекларации(ОписаниеПоказателя, Краткое = Ложь)
	
	Если Краткое Тогда
		Шаблон = НСтр("ru = 'Строка %1 - ""%4""'");
	ИначеЕсли ОписаниеПоказателя.НомерПриложения = 0 Тогда
		Шаблон = НСтр("ru = 'Строка %1 листа %3 - ""%4""'");
	Иначе
		Шаблон = НСтр("ru = 'Строка %1 приложения %2 к листу %3 - ""%4""'");
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Шаблон,
		ОписаниеПоказателя.НомерСтроки,
		ОписаниеПоказателя.НомерПриложения,
		ОписаниеПоказателя.НомерЛиста,
		ОписаниеПоказателя.Представление);
	
КонецФункции

Процедура ДобавитьЗаписиРасшифровкиПоказателяБРО(РасшифровкаПоказателя, ИмяПоказателя, ЭтапРасчета, РассчитанныеЗначения, Протокол, СхемаРасчета, ОписаниеОтчета, ИмяРедакции, ЗнакШагаРасчета = "+")
	
	Отбор = Новый Структура;
	Отбор.Вставить("Имя",         ИмяПоказателя);
	Отбор.Вставить("ЭтапРасчета", ЭтапРасчета);
	ПротоколПоказателя = Протокол.НайтиСтроки(Отбор);
	
	Для Каждого ГруппаЗаписей Из ПротоколПоказателя Цикл // должно быть не более одной группы
		
		Для Каждого ЗаписьПротокола Из ГруппаЗаписей.Протокол Цикл
			
			Если ЗаписьПротокола.ТипЗаписи = "Формула" Тогда
				
				ЗнакПредыдущегоШагаРасчета = РаскрытьСкобки(ЗнакШагаРасчета, ЗаписьПротокола.Оператор);
				
				НужнаПодробнаяРасшифровка = Истина;
				Если ГруппаЗаписей.Показатель <> Неопределено Тогда
					// Если значение есть в декларации, то не будем его подробно расписывать - сошлемся просто на номер строки декларации.
					ЗаполнитьЗначенияСвойств(Отбор, ЗаписьПротокола.Условие);
					ДругиеПоказатели = Протокол.НайтиСтроки(Отбор);
				
					Если ДругиеПоказатели.Количество() > 0 Тогда
						
						РасшифровывающийПоказатель = ДругиеПоказатели[0].Показатель;
						
						Если РасшифровывающийПоказатель <> Неопределено Тогда
							
							РасшифровываемыйПоказательОтчета = ОписаниеОтчета.Найти(ГруппаЗаписей.Показатель.Имя,   "Имя");
							РасшифровывающийПоказательОтчета = ОписаниеОтчета.Найти(РасшифровывающийПоказатель.Имя, "Имя");
							
							Если РасшифровывающийПоказательОтчета <> Неопределено Тогда
							
								НужнаПодробнаяРасшифровка = Ложь;
								
								// отправим пользователя к другому показателю декларации
								КраткоеПредставление =
									(РасшифровываемыйПоказательОтчета <> Неопределено
									И РасшифровываемыйПоказательОтчета.НомерЛиста      = РасшифровывающийПоказательОтчета.НомерЛиста
									И РасшифровываемыйПоказательОтчета.НомерПриложения = РасшифровывающийПоказательОтчета.НомерПриложения);
								ПредставлениеСтрокиДекларации = ПредставлениеСтрокиДекларации(РасшифровывающийПоказательОтчета, КраткоеПредставление);
								
								НоваяСтрокаРасшифровки = РасшифровкаПоказателя.Добавить();
								НоваяСтрокаРасшифровки.ЗнакОперации           = ЗнакПредыдущегоШагаРасчета;
								НоваяСтрокаРасшифровки.НаименованиеСлагаемого = ПредставлениеСтрокиДекларации;
								НоваяСтрокаРасшифровки.Сумма                  = ЗаписьПротокола.СуммаНУ; // См. ОписаниеСуммНалоговыйУчет()
									
								// расшифровка
								НоваяСтрокаРасшифровки.ДополнительныеПараметры = Новый Структура;
								НоваяСтрокаРасшифровки.ДополнительныеПараметры.Вставить("Отчет", Новый Структура);
								НоваяСтрокаРасшифровки.ДополнительныеПараметры.Отчет.Вставить("ИмяОтчета", "ОбщаяФорма.РасшифровкаПоказателейРегламентированныхОтчетов");
								НоваяСтрокаРасшифровки.ДополнительныеПараметры.Отчет.Вставить("ПараметрыФормы", Новый Структура);
								НоваяСтрокаРасшифровки.ДополнительныеПараметры.Отчет.ПараметрыФормы.Вставить(
									"ИДИменПоказателей",
									ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НомерПоказателяБРО(РасшифровывающийПоказательОтчета, ИмяРедакции)));
									
							КонецЕсли;
								
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если НужнаПодробнаяРасшифровка Тогда
					Если ИмяПоказателя <> ЗаписьПротокола.Условие.Имя Или ЭтапРасчета <> ЗаписьПротокола.Условие.ЭтапРасчета Тогда // защита от бесконечной рекурсии
						ДобавитьЗаписиРасшифровкиПоказателяБРО(
							РасшифровкаПоказателя,
							ЗаписьПротокола.Условие.Имя,
							ЗаписьПротокола.Условие.ЭтапРасчета,
							РассчитанныеЗначения,
							Протокол,
							СхемаРасчета,
							ОписаниеОтчета,
							ИмяРедакции,
							ЗнакПредыдущегоШагаРасчета);
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ЗаписьПротокола.ТипЗаписи = "Ограничение" Тогда
				
				// В расшифровке будет общая сумма, без учета ограничения.
				Продолжить;
				
			ИначеЕсли ЗаписьПротокола.ТипЗаписи = "Пропустить" Тогда
				
				Продолжить;
				
			Иначе // "прикладные" типы записей
				
				Сумма = ЗаписьПротокола.СуммаНУ; // См. ОписаниеСуммНалоговыйУчет()
				
				Если Сумма = 0 И ЗаписьПротокола.ПоказыватьПользователюТолькоЕслиСуммаЗаполнена Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрокаРасшифровки = РасшифровкаПоказателя.Добавить();
				НоваяСтрокаРасшифровки.ЗнакОперации            = РаскрытьСкобки(ЗнакШагаРасчета, ЗаписьПротокола.Оператор);
				НоваяСтрокаРасшифровки.НаименованиеСлагаемого  = ЗаписьПротокола.Описание;
				НоваяСтрокаРасшифровки.Сумма                   = Сумма;
				НоваяСтрокаРасшифровки.ДополнительныеПараметры = НастройкиОтчетаРасшифровкаЗначения(ЗаписьПротокола, СхемаРасчета);
					
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция РаскрытьСкобки(ОператорЗаСкобкой, ОператорВнутриСкобки)
	
	Если ОператорЗаСкобкой <> "-" Тогда
		Возврат ОператорВнутриСкобки;
	КонецЕсли;
	
	Если ОператорВнутриСкобки = "-" Тогда
		Возврат "+";
	Иначе
		Возврат "-";
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СтандартныеОтчеты

Функция НовыйНастройкиОтчетаПоРегиструБухгалтерии(ВидОтчета, Организация, НачалоПериода, КонецПериода, Счет, ОписаниеСумм)
	
	// Готовит настройки в формате, понятном форме РасшифровкаПоказателейРегламентированныхОтчетов
	
	// ВидОтчета
	// - ОборотноСальдоваяВедомостьПоСчету
	// - АнализСчета
	// - ОтчетПоПроводкам
	// - ОборотыМеждуСубконто
	// - ОборотыСчета
	
	Настройки = Новый Структура;
	Настройки.Вставить("Организация", Организация);
	Настройки.Вставить("Отчет", Новый Структура);
	Настройки.Отчет.Вставить("ИмяОтчета", "Отчет." + ВидОтчета + ".Форма.ФормаОтчета");
	
	Настройки.Отчет.Вставить("ПараметрыФормы", Новый Структура);
	Настройки.Отчет.ПараметрыФормы.Вставить("РежимРасшифровки",        Истина);
	Настройки.Отчет.ПараметрыФормы.Вставить("ВидРасшифровки",          2); // Из параметров формы
	Настройки.Отчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	Настройки.Отчет.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Организация",   Организация);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", НачалоПериода);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  КонецПериода);
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Счет", Счет);
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоСубсчетам", Истина);
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Группировка", Новый Массив);
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ВыводитьЗаголовок", Истина);
	
	ИменаСумм = Новый Соответствие;
	ИменаСумм.Вставить("Сумма",   "ПоказательБУ");
	ИменаСумм.Вставить("СуммаНУ", "ПоказательНУ");
	ИменаСумм.Вставить("СуммаПР", "ПоказательПР");
	ИменаСумм.Вставить("СуммаВР", "ПоказательВР");
	
	Для Каждого КлючИЗначение Из ИменаСумм Цикл
		ПользовательскиеНастройки.ДополнительныеСвойства.Вставить(КлючИЗначение.Значение, Ложь);
	КонецЦикла;
	
	Для Каждого ИмяСуммы Из КоллекцииСумм.ИменаСвойств(ОписаниеСумм) Цикл
		ИмяСвойства = ИменаСумм[ИмяСуммы];
		Если ИмяСвойства <> Неопределено Тогда
			ПользовательскиеНастройки.ДополнительныеСвойства.Вставить(ИмяСвойства, Истина);
		КонецЕсли;
	КонецЦикла;
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательКонтроль", Ложь);
	
	Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
	
	Если ВидОтчета = "ОборотыМеждуСубконто" Тогда
		ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("СписокВидовСубконто",    Новый СписокЗначений);
		ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("СписокВидовКорСубконто", Новый СписокЗначений);
	КонецЕсли;
	
	Возврат Настройки;

КонецФункции

Функция ДобавитьОтборВНастройкиОтчета(Настройки, ИмяПоля, Значение, ВидСравнения = Неопределено)
	
	Отбор = Настройки.Отчет.ПользовательскиеНастройки.Элементы.Найти("Отбор");
	
	ЭлементОтбора = БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(
		Отбор,
		ИмяПоля,
		Значение,
		ВидСравнения,
		Истина,
		Истина);
		
	Возврат ЭлементОтбора;
	
КонецФункции

Процедура ДобавитьГруппировкуВНастройкиОтчета(Настройки, ИмяПоля, Представление, ТипГруппировки = 0)
	
	// Добавляет групировку в настройки стандартного отчета - в том виде, который принят в стандартных отчетах.
	// А именно:
	//  - настройка группировки представлена в виде массива структур
	//  - элемент массива соответствует строке таблицы группировок в отчете
	//  - структура содержит ключи и значения:
	//    -- Использование, 	Булево (здесь Истина)
	//    -- Поле, 				Строка (имя поля группировки в терминах отчета)
	//    -- Представление, 	Строка (представление группировки (поля))
	//    -- ТипГруппировки, 	Число  (0 - Без групп, 1 - С группами, 2 - Только группы)
	
	НастройкаГруппировки = Неопределено;
	Если Настройки.Отчет.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("Группировка", НастройкаГруппировки) Тогда
		
		СтрокаНастройкиГруппировки = Новый Структура;
		СтрокаНастройкиГруппировки.Вставить("Использование",  Истина);
		СтрокаНастройкиГруппировки.Вставить("Поле",           ИмяПоля);
		СтрокаНастройкиГруппировки.Вставить("Представление",  Представление);
		СтрокаНастройкиГруппировки.Вставить("ТипГруппировки", ТипГруппировки);
		
		НастройкаГруппировки.Добавить(СтрокаНастройкиГруппировки);
		
	КонецЕсли;
	
	
КонецПроцедуры

Функция ОписаниеСубконтоСчета(ПолеВиртуальнойТаблицы, Счет, ВидИлиНомерСубконто)
	
	// Возвращает описание поля субконто в виде структуры
	// Состав структуры:
	// - Имя, Строка (Имя поля)
	// - Представление, Строка (Пользовательское представление вида субконто)
	
	// Определим номер субконто на счете
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет",        Счет);
	Если ТипЗнч(ВидИлиНомерСубконто) = Тип("Число") Тогда
		Запрос.УстановитьПараметр("НомерСубконто", ВидИлиНомерСубконто);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыСубконто.НомерСтроки КАК НомерСтроки,
		|	ВидыСубконто.ВидСубконто.Представление
		|ИЗ
		|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконто
		|ГДЕ
		|	ВидыСубконто.НомерСтроки = &НомерСубконто
		|	И ВидыСубконто.Ссылка = &Счет";
	Иначе
		Запрос.УстановитьПараметр("ВидСубконто", ВидИлиНомерСубконто);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыСубконто.НомерСтроки КАК НомерСтроки,
		|	ВидыСубконто.ВидСубконто.Представление
		|ИЗ
		|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконто
		|ГДЕ
		|	ВидыСубконто.ВидСубконто = &ВидСубконто
		|	И ВидыСубконто.Ссылка = &Счет";
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОписаниеСубконто = Новый Структура;
	ОписаниеСубконто.Вставить("Имя",           ПолеВиртуальнойТаблицы + Выборка.НомерСтроки);
	ОписаниеСубконто.Вставить("Номер",         Выборка.НомерСтроки);
	ОписаниеСубконто.Вставить("Представление", Выборка.Представление);
	
	Возврат ОписаниеСубконто;
	
КонецФункции

#КонецОбласти

#Область КоллекцииСумм

Процедура ОграничитьСверху(Суммы, Ограничения, ОписаниеКоллекций)
	// Min(Суммы,Ограничения)
	
	КоллекцииСумм.Ограничить(Суммы, Ограничения, ОписаниеКоллекций);
	
КонецПроцедуры

Процедура ОграничитьСнизу(Суммы, Ограничения, ОписаниеКоллекций)
	// Max(Суммы, Ограничения)
	
	// Для ограничения "снизу" применим ОграничитьСверху(), но поменяем знаки чисел.
	// Max(A,  B) = - (Min(-A,-B))
	// e.g.
	// Max(-2, 0) = - (Min(2,  0)) = - (0)  = 0
	// Max(2,  5) = - (Min(-2,-5)) = - (-5) = 5
	МинусЗначение = КоллекцииСумм.НовыйКоллекцияСумм(ОписаниеКоллекций);
	КоллекцииСумм.Вычесть(МинусЗначение, Суммы, ОписаниеКоллекций);
	
	МинусОграничение = КоллекцииСумм.НовыйКоллекцияСумм(ОписаниеКоллекций);
	КоллекцииСумм.Вычесть(МинусОграничение, Ограничения, ОписаниеКоллекций);
	
	КоллекцииСумм.Ограничить(МинусЗначение, МинусОграничение, ОписаниеКоллекций);
	
	Результат = КоллекцииСумм.НовыйКоллекцияСумм(ОписаниеКоллекций);
	КоллекцииСумм.Вычесть(Результат, МинусЗначение, ОписаниеКоллекций);
	
	КоллекцииСумм.Заполнить(Суммы, Результат, ОписаниеКоллекций);
	
КонецПроцедуры

Функция КоличествоНенулевыхЗначений(Коллекция, ОписаниеКоллекции)
	
	Результат = КоллекцииСумм.НовыйКоллекцияСумм(ОписаниеКоллекции);
	
	Для Каждого ИмяСвойства Из КоллекцииСумм.ИменаСвойств(ОписаниеКоллекции) Цикл
		Если Коллекция[ИмяСвойства] <> 0 Тогда
			Результат[ИмяСвойства] = 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти
