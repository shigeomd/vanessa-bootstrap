// Получает контекст платежного документа, не зависящий от прикладного решения 
//
// Параметры:
//  СвойстваКонтекста - Структура - содержит сведения, необходимые для получения контекста.
//               Состав потребных сведений (ключей, значений) определяется конфигурацией-потребителем 
//               и описан в НовыйИсточникДанныхКонтекстаПлатежногоДокумента().
//               Для БП3 - "Период", "Организация", "СчетПолучателя"
//
// Возвращаемое значение:
//  Структура - содержит ключи, описанные в ПлатежиВБюджетКлиентСервер.ПоляКонтекста()
//
Функция КонтекстПлатежногоДокумента(ИсточникДанных) Экспорт
	
	Контекст = ПлатежиВБюджетКлиентСервер.НовыйКонтекст();
	
	Если ЗначениеЗаполнено(ИсточникДанных.Период) Тогда
		Период = ИсточникДанных.Период;
	Иначе
		Период = НачалоДня(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИсточникДанных.Налог) Тогда
		ВидНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсточникДанных.Налог, "ВидНалога");
	КонецЕсли;
	
	ПоказателиНалоговогоПериода = ПоказателиНалоговогоПериода(ИсточникДанных.Организация, ВидНалога, Период);
	
	Контекст.Период            = ПоказателиНалоговогоПериода.Период;
	Контекст.ПоказательПериода = ПоказателиНалоговогоПериода.ПоказательПериода;
	
	Контекст.НазначениеПлатежа = Справочники.ВидыНалоговИПлатежейВБюджет.НазначениеПлатежа(
		ИсточникДанных.Налог,
		ИсточникДанных.ВидНалоговогоОбязательства,
		ИсточникДанных.Организация,
		Макс(ПоказателиНалоговогоПериода.Период, Период),
		ПоказателиНалоговогоПериода.ПредставлениеНалоговогоПериода);
	
	Контекст.НалоговыйАгент = РасчетыСБюджетом.НалоговыйАгент(ВидНалога);
	
	Контекст.КБК = Справочники.ВидыНалоговИПлатежейВБюджет.КБК(
		ИсточникДанных.Налог,
		ИсточникДанных.ВидНалоговогоОбязательства,
		Макс(ПоказателиНалоговогоПериода.Период, Период));
	
	Если ВидГосударственногоОргана(Контекст.КБК) = Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган Тогда
		Контекст.ВидПеречисления = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж;
	Иначе
		Контекст.ВидПеречисления = Перечисления.ВидыПеречисленийВБюджет.ИнойПлатеж;
	КонецЕсли;
	
	Контекст.ФизическоеЛицо           = Не ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(ИсточникДанных.Организация);
	Контекст.НомерСчетаПолучателя     = ИсточникДанных.СчетПолучателя.НомерСчета;
	
	Контекст.КодТерриторииПоУмолчанию = Справочники.Организации.ПолучитьКодТерритории(ИсточникДанных.Организация, Период);
	Если ИсточникДанных.Свойство("РегистрацияВНалоговомОргане") И ЗначениеЗаполнено(ИсточникДанных.РегистрацияВНалоговомОргане) Тогда
		Контекст.КодТерритории = Справочники.РегистрацииВНалоговомОргане.КодТерритории(
			ИсточникДанных.РегистрацияВНалоговомОргане, Период);
	Иначе
		Контекст.КодТерритории = Контекст.КодТерриторииПоУмолчанию;
	КонецЕсли;
	
	Контекст.ОчередностьПлатежа = УчетДенежныхСредствКлиентСервер.ОчередностьПлатежаНалогиВзносы();
	
	Возврат Контекст;
	
КонецФункции

Функция НовыйИсточникДанныхКонтекстаПлатежногоДокумента() Экспорт
	
	ИсточникДанных = Новый Структура;
	ИсточникДанных.Вставить("Период",                      '0001-01-01');
	ИсточникДанных.Вставить("Организация",                 Справочники.Организации.ПустаяСсылка());
	ИсточникДанных.Вставить("Получатель",                  Справочники.Контрагенты.ПустаяСсылка());
	ИсточникДанных.Вставить("СчетПолучателя",              Справочники.БанковскиеСчета.ПустаяСсылка());
	ИсточникДанных.Вставить("Налог",                       Справочники.ВидыНалоговИПлатежейВБюджет.ПустаяСсылка());
	ИсточникДанных.Вставить("ВидНалоговогоОбязательства",  Перечисления.ВидыПлатежейВГосБюджет.ПустаяСсылка());
	ИсточникДанных.Вставить("РегистрацияВНалоговомОргане", Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка());
	
	Возврат ИсточникДанных;
	
КонецФункции

Функция ДублиУИН(ИдентификаторПлатежа, Ссылка) Экспорт
	
	Дубли = Новый СписокЗначений;
	
	Если Не ПлатежиВБюджетКлиентСервер.РеквизитЗаполнен(ИдентификаторПлатежа) Тогда
		Возврат Дубли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторПлатежа", ИдентификаторПлатежа);
	Запрос.УстановитьПараметр("Ссылка",               Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПлатежноеПоручение.Ссылка КАК Ссылка,
	|	ПлатежноеПоручение.Дата КАК Дата,
	|	ПлатежноеПоручение.Представление КАК Представление
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|ГДЕ
	|	ПлатежноеПоручение.ИдентификаторПлатежа = &ИдентификаторПлатежа
	|	И ПлатежноеПоручение.Ссылка <> &Ссылка
	|	И ПлатежноеПоручение.ПеречислениеВБюджет
	|	И НЕ ПлатежноеПоручение.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ,
	|	Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Дубли.Добавить(Выборка.Ссылка, Выборка.Представление);
	КонецЦикла;
	
	Возврат Дубли;
	
КонецФункции

Функция ВидГосударственногоОргана(КБК) Экспорт
	
	Если ПустаяСтрока(КБК) Тогда
		Возврат Перечисления.ВидыГосударственныхОрганов.ПустаяСсылка();
	КонецЕсли;
	
	КодГлавногоАдминистратора = ПлатежиВБюджетКлиентСервер.КодГлавногоАдминистратора(КБК);
	
	Если ПустаяСтрока(КБК) ИЛИ КодГлавногоАдминистратора = "182" Тогда
		ВидГосударственногоОргана = ПредопределенноеЗначение("Перечисление.ВидыГосударственныхОрганов.НалоговыйОрган");
	ИначеЕсли КодГлавногоАдминистратора = "392" Тогда
		ВидГосударственногоОргана = ПредопределенноеЗначение("Перечисление.ВидыГосударственныхОрганов.ОрганПФР");
	ИначеЕсли КодГлавногоАдминистратора = "393" Тогда
		ВидГосударственногоОргана = ПредопределенноеЗначение("Перечисление.ВидыГосударственныхОрганов.ОрганФСС");
	Иначе
		ВидГосударственногоОргана = ПредопределенноеЗначение("Перечисление.ВидыГосударственныхОрганов.Прочий");
	КонецЕсли;
	
	Возврат ВидГосударственногоОргана;
	
КонецФункции

Функция ПериодичностьПоКлассификатору(Периодичность) Экспорт
	
	Если Периодичность = Перечисления.Периодичность.Год Тогда
		
		Возврат ПлатежиВБюджетКлиентСервер.ПериодичностьГод();
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
		
		Возврат ПлатежиВБюджетКлиентСервер.ПериодичностьПолугодие();
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		
		Возврат ПлатежиВБюджетКлиентСервер.ПериодичностьКвартал();
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		
		Возврат ПлатежиВБюджетКлиентСервер.ПериодичностьМесяц();
		
	Иначе
		
		Возврат ПлатежиВБюджетКлиентСервер.ПлатежПоКонкретнойДате();
		
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеПорядкаОтраженияБУ(Параметры = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Представление", ОбщегоНазначенияБПКлиентСервер.ПредставлениеНезаполненногоЗначения());
	Результат.Вставить("Заполнен",      Ложь);
	
	Если Параметры <> Неопределено И ЗначениеЗаполнено(Параметры.СчетУчета) Тогда
		
		// Подготовим текст и перечень реквизитов, требующих заполнения
		ЭлементыТекста = Новый Массив;
		
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Параметры.СчетУчета);
		ЭлементыТекста.Добавить(СвойстваСчета.Код);
		
		Для НомерСубконто = 1 По СвойстваСчета.КоличествоСубконто Цикл
			ЗначениеСубконто = Параметры["Субконто" + НомерСубконто];
			Если Не ЗначениеЗаполнено(ЗначениеСубконто) Тогда
				Если СвойстваСчета["ВидСубконто" + НомерСубконто] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыСтраховыхВзносовИП Тогда
					ЭлементыТекста.Добавить(НСтр("ru = '<Авто>'"));
				КонецЕсли;
			Иначе
				ЭлементыТекста.Добавить(Параметры["Субконто" + НомерСубконто]);
			КонецЕсли;
		КонецЦикла;
		
		Результат.Представление = СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(ЭлементыТекста, НСтр("ru = ', '"));
		Если Не ПустаяСтрока(Результат.Представление) Тогда
			// Предложение следует начинать с заглавной буквы
			Результат.Представление = ВРег(Лев(Результат.Представление, 1)) + Сред(Результат.Представление, 2);
		КонецЕсли;
		
		Результат.Заполнен = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПоказателиНалоговогоПериода(Организация, ВидНалога, Период) Экспорт
	
	Показатели = Новый Структура("Период, ПоказательПериода, ПредставлениеНалоговогоПериода");
	
	ПорядокУплатыНалога = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПорядокУплатыНалога(Организация, ВидНалога, Период);
	
	Если ПорядокУплатыНалога <> Неопределено Тогда
		
		НалоговыйПериодДляПлатежейВБюджет = ПорядокУплатыНалога.Периодичность;
		
		Если ВидНалога = Перечисления.ВидыНалогов.НДС Тогда
			// Особенность НДС в том, что он уплачивается несколькими (ежемесячными) платежами,
			// каждый из которых относится к одному и тому же периоду (кварталу).
			// Из текста правил оформления  документов нельзя сделать однозначный вывод, что указывать в данном случае - месяц или квартал.
			// Сейчас местные УФНС рекомендуют указывать значение "КВ" (квартал).
			НалоговыйПериодДляПлатежейВБюджет = Перечисления.Периодичность.Квартал;
			
		ИначеЕсли ВидНалога = Перечисления.ВидыНалогов.НДФЛ_ИП Тогда
			
			// Если по годовому платежу предусматривается более одного срока уплаты налогового платежа
			// и установлены конкретные даты уплаты, то указываются эти даты.
			
			НалоговыйПериодДляПлатежейВБюджет = Неопределено;
			
		ИначеЕсли ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоФиксированныеВзносы(ВидНалога) Тогда
			
			НалоговыйПериодДляПлатежейВБюджет = Перечисления.Периодичность.Год;
			
		КонецЕсли;
		
		ПериодичностьПоКлассификатору = ПериодичностьПоКлассификатору(НалоговыйПериодДляПлатежейВБюджет);
		Если ПериодичностьПоКлассификатору = ПлатежиВБюджетКлиентСервер.ПлатежПоКонкретнойДате() 
			Или НалоговыйПериодДляПлатежейВБюджет <> ПорядокУплатыНалога.Периодичность Тогда
			ПоказательПериода = ПлатежиВБюджетКлиентСервер.НалоговыйПериод(ПорядокУплатыНалога.Срок, ПериодичностьПоКлассификатору);
		Иначе
			ПоказательПериода = ПлатежиВБюджетКлиентСервер.НалоговыйПериод(ПорядокУплатыНалога.ПериодСобытия, ПериодичностьПоКлассификатору);
		КонецЕсли;
		
		Показатели.Период                         = ПорядокУплатыНалога.ПериодСобытия;
		Показатели.ПоказательПериода              = ПоказательПериода;
		Показатели.ПредставлениеНалоговогоПериода = ПлатежиВБюджетКлиентСервер.ПредставлениеНалоговогоПериода(ПоказательПериода);
		
	Иначе
		
		Показатели.Период                         = Период;
		Показатели.ПоказательПериода              = ПлатежиВБюджетКлиентСервер.НалоговыйПериод(Период, ПлатежиВБюджетКлиентСервер.ПлатежПоКонкретнойДате());
		Показатели.ПредставлениеНалоговогоПериода = "";
		
	КонецЕсли;
	
	Возврат Показатели;
	
КонецФункции