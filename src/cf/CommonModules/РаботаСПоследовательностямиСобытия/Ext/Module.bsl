////////////////////////////////////////////////////////////////////////////////
// Работа с последовательностями
// 
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Процедура при проведении документа сбрасывает в последовательности 
// "Документы организаций" состояние в значение 
// "Проведен с нарушением последовательности".
//
Процедура ЗарегистрироватьВПоследовательностиПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ТипДокумента = ТипЗнч(Источник);
	
	Если ТипДокумента = Тип("ДокументОбъект.УстановкаЦенНоменклатуры") Тогда
		// У документа "Установка цен номенклатуры" нет организации в шапке, 
		// поэтому для него регистрируем по всем организациям с учетной политикой
		// "Розница в продажных ценах".
		ЗарегистрироватьВПоследовательностиПриЗаписиУстановкаЦенНоменклатуры(Источник, Отказ);
		Возврат;
		
	КонецЕсли;

	РаботаСПоследовательностями.УстановитьБлокировкуНабораЗаписейПоследовательностиПоРегистратору(Источник.Ссылка, Отказ);

	НаборЗаписей = Источник.ПринадлежностьПоследовательностям.ДокументыОрганизаций;
	НаборЗаписей.Прочитать();
	
	Если ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.ОперацияБух") Тогда
		ДокументПроведен = НЕ Источник.ПометкаУдаления;
	Иначе
		ДокументПроведен = Источник.Проведен;
	КонецЕсли;
	
	Если НЕ ДокументПроведен И НаборЗаписей.Количество() = 0 Тогда
		// Документ непроведенный и прошлых записей в последовательности нет, поэтому менять нечего.
		Возврат;
	КонецЕсли;
	
	// Записи последовательности по прошлым организациям отметим, как требующие исключения.
	
	ВГраница = НаборЗаписей.Количество() - 1;
	Для Сч = 0 По ВГраница Цикл
		
		Движение = НаборЗаписей[ВГраница - Сч];
		
		Если Движение.Организация = Источник.Организация И ДокументПроведен Тогда
			// Для проведенного документа состояние в последовательности определяем отдельно.
			НаборЗаписей.Удалить(Движение);
		ИначеЕсли Движение.СостояниеПроведения <> Перечисления.СостоянияПроведенияВПоследовательности.ИсключенИзПоследовательности Тогда
			Движение.СостояниеПроведения = Перечисления.СостоянияПроведенияВПоследовательности.ИсключенИзПоследовательности;
		КонецЕсли;
	
	КонецЦикла;

	Если ДокументПроведен Тогда

		СостояниеПроведения = Перечисления.СостоянияПроведенияВПоследовательности.ПроведенСНарушениемПоследовательности;

		Если Источник.ДополнительныеСвойства.Свойство("ПроведенВХронологическойПоследовательности") Тогда
			Если Источник.ДополнительныеСвойства.ПроведенВХронологическойПоследовательности Тогда
				СостояниеПроведения = Перечисления.СостоянияПроведенияВПоследовательности.ПроведенВПоследовательности;
			КонецЕсли;
		КонецЕсли;
		
		// Запись по текущей организации.
		Движение = НаборЗаписей.Добавить();
		
		// Свойства
		Если ТипДокумента = Тип("ДокументОбъект.НачислениеЗарплаты") Тогда
			// Зарплатные документы проводятся концом месяца
			Движение.Период 	= КонецМесяца(Источник.МесяцНачисления);
		ИначеЕсли ТипДокумента = Тип("ДокументОбъект.ОтражениеЗарплатыВБухучете")
			ИЛИ ТипДокумента = Тип("ДокументОбъект.ОтражениеЗарплатыВУчете")
			ИЛИ ТипДокумента = Тип("ДокументОбъект.Отпуск")
			ИЛИ ТипДокумента = Тип("ДокументОбъект.БольничныйЛист")
			ИЛИ ТипДокумента = Тип("ДокументОбъект.НачислениеОценочныхОбязательствПоОтпускам") Тогда
			// Зарплатные документы проводятся концом месяца
			Движение.Период 	= КонецМесяца(Источник.ПериодРегистрации);
		ИначеЕсли ТипДокумента = Тип("ДокументОбъект.ВводНачальныхОстатков") Тогда
			// Ввод начальных остатков может быть проведен в месяце, 
			// за которых еще не заполнена учетная политика, т.к. учет будет только со следующего месяца.
			// В таком случае отражаем документ "Ввод начальных остатков" в последовательности
			// за первое число следующего месяца.
			Если НЕ УчетнаяПолитика.Существует(Источник.Организация, Источник.Дата) Тогда
				Движение.Период = КонецМесяца(Источник.Дата) + 1;
			Иначе
				Движение.Период = Источник.Дата;
			КонецЕсли;
		Иначе
			Движение.Период 	= Источник.Дата;
		КонецЕсли;
		Движение.Регистратор    = Источник.Ссылка;
		
		// Измерения
		Движение.Организация	= Источник.Организация;
		Движение.СостояниеПроведения = СостояниеПроведения;
	
	КонецЕсли;
	
	НаборЗаписей.Записать();

КонецПроцедуры

// В обработчике перед физическим удалением документа из базы устанавливается 
// состояние нарушения последовательности для следующего документа за удаляемым.
//
Процедура ЗарегистрироватьВПоследовательностиПередУдалением(Источник, Отказ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Источник.Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПоследовательности.Организация КАК Организация,
	|	ТаблицаПоследовательности.Период КАК Период
	|ИЗ
	|	Последовательность.ДокументыОрганизаций КАК ТаблицаПоследовательности
	|ГДЕ
	|	ТаблицаПоследовательности.Регистратор = &Регистратор";
	
	ТаблицаОрганизаций = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаОрганизаций.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоНарушенийПоследовательностиДоДокумента = 0;
	
	Для Каждого СтрокаТаблицы Из ТаблицаОрганизаций Цикл
		МоментНарушения = РаботаСПоследовательностями.МоментНачалаПерепроведенияСУчетомИсключенныхМесяцев(
			СтрокаТаблицы.Организация, СтрокаТаблицы.Период);
		
		Если МоментНарушения <> Неопределено Тогда
			Если МоментНарушения.Сравнить(Источник.МоментВремени()) < 0 Тогда
				КоличествоНарушенийПоследовательностиДоДокумента = КоличествоНарушенийПоследовательностиДоДокумента + 1;
			КонецЕсли;
		КонецЕсли;
	
	КонецЦикла;
	
	Если ТаблицаОрганизаций.Количество() = КоличествоНарушенийПоследовательностиДоДокумента Тогда
		// По всем организациям, в которых был когда-либо зарегистрирован документ, 
		// момент нарушения последовательности раньше самого документа, 
		// поэтому удаление документа ни на что не повлияет.
		Возврат;
	КонецЕсли;
	
	// Заблокируем последовательность по тем организациям, которые встречаются 
	// в наборе	текущего документа.
	ПараметрыБлокировки = Новый Структура();
	ПараметрыБлокировки.Вставить("ТипТаблицы", 		"Последовательность");
	ПараметрыБлокировки.Вставить("ИмяТаблицы", 		"ДокументыОрганизаций");
	ПараметрыБлокировки.Вставить("ИсточникДанных",	ТаблицаОрганизаций);
	
	ПоляИсточникаДанныхБлокировки = Новый Структура();
	ПоляИсточникаДанныхБлокировки.Вставить("Организация", "Организация");
	
	ОбщегоНазначенияБПВызовСервера.УстановитьУправляемуюБлокировку(ПараметрыБлокировки, , ПоляИсточникаДанныхБлокировки, Отказ);
	
	ДатаДокумента = Источник.Дата;
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.УстановкаЦенНоменклатуры") Тогда
		ДатаДокумента = НачалоДня(ДатаДокумента); // Цены региструются с точностью до дня
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МоментДокумента", 	Новый МоментВремени(ДатаДокумента, Источник.Ссылка));
	Запрос.УстановитьПараметр("Организации", 		ТаблицаОрганизаций.ВыгрузитьКолонку("Организация"));
	
	// Находим следующий за удаляемым документ. Если у него состояние "Проведен в последовательности",
	// то заменяем его на "Проведен с нарушением последовательности".
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПоследовательности.Организация КАК Организация,
	|	МИНИМУМ(ТаблицаПоследовательности.Период) КАК Период
	|ПОМЕСТИТЬ ВТ_БлижайшиеДаты
	|ИЗ
	|	Последовательность.ДокументыОрганизаций КАК ТаблицаПоследовательности
	|ГДЕ
	|	ТаблицаПоследовательности.Организация В(&Организации)
	|	И ТаблицаПоследовательности.МоментВремени > &МоментДокумента
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПоследовательности.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_БлижайшиеДаты.Организация,
	|	ВТ_БлижайшиеДаты.Период,
	|	МИНИМУМ(ТаблицаПоследовательности.Регистратор) КАК Регистратор
	|ИЗ
	|	ВТ_БлижайшиеДаты КАК ВТ_БлижайшиеДаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Последовательность.ДокументыОрганизаций КАК ТаблицаПоследовательности
	|		ПО ВТ_БлижайшиеДаты.Организация = ТаблицаПоследовательности.Организация
	|			И ВТ_БлижайшиеДаты.Период = ТаблицаПоследовательности.Период
	|			И (ТаблицаПоследовательности.СостояниеПроведения = ЗНАЧЕНИЕ(Перечисление.СостоянияПроведенияВПоследовательности.ПроведенВПоследовательности))
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_БлижайшиеДаты.Организация,
	|	ВТ_БлижайшиеДаты.Период";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		РаботаСПоследовательностями.СброситьСостояниеПоследовательностиДокумента(
			Выборка.Регистратор,
			Выборка.Период,
			Выборка.Организация);
	
	КонецЦикла;

КонецПроцедуры

// Выполняет фильтрацию по организации в записей последовательности при отправке данных по РИБ
//
Процедура ПроверитьОрганизациюВПоследовательностиПриОтправкеДанныхПодчиненному(Источник, ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза) Экспорт
	
	Если ТипЗнч(ЭлементДанных) <> Тип("ПоследовательностьНаборЗаписей.ДокументыОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	// Признак отправки мог быть изменен в более ранних обработчиках подписок на события,
	// если это так, то не меняем его.
	Если ОтправкаЭлемента <> ОтправкаЭлементаДанных.Авто Тогда
		Возврат;
	КонецЕсли;
	
	// Если организация не входит в список организаций, 
	// перечисленных в табличной части Организации текущего узла,
	// то удаляем такую запись из набора последовательности.
	ВГраница = ЭлементДанных.Количество() - 1;
	Для Сч = 0 По ВГраница Цикл
		
		Движение = ЭлементДанных[ВГраница - Сч];
		Если Источник.Организации.Найти(Движение.Организация) = Неопределено Тогда
			ЭлементДанных.Удалить(Движение);
		КонецЕсли;
	
	КонецЦикла;
	
	Если ЭлементДанных.Количество() = 0 Тогда
		// Нет данных для передачи.
		ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// У документа "Установка цен номенклатуры" нет организации в шапке, 
// поэтому для него регистрируем в последовательности по всем организациям с учетной политикой
// "Розница в продажных ценах".
//
Процедура ЗарегистрироватьВПоследовательностиПриЗаписиУстановкаЦенНоменклатуры(Источник, Отказ)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаАктуальности", Источник.Дата);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчетнаяПолитикаОрганизаций.Организация
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(&ДатаАктуальности, ) КАК УчетнаяПолитикаОрганизаций
	|ГДЕ
	|	УчетнаяПолитикаОрганизаций.СпособОценкиТоваровВРознице = ЗНАЧЕНИЕ(Перечисление.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости)";
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();

	НаборЗаписей = Источник.ПринадлежностьПоследовательностям.ДокументыОрганизаций;
	НаборЗаписей.Очистить();
	
	Если Источник.Проведен Тогда
		СостояниеПроведения = Перечисления.СостоянияПроведенияВПоследовательности.ПроведенСНарушениемПоследовательности;
		Если Источник.ДополнительныеСвойства.Свойство("ПроведенВХронологическойПоследовательности") Тогда
			Если Источник.ДополнительныеСвойства.ПроведенВХронологическойПоследовательности Тогда
				СостояниеПроведения = Перечисления.СостоянияПроведенияВПоследовательности.ПроведенВПоследовательности;
			КонецЕсли;
		КонецЕсли;
	Иначе
		СостояниеПроведения = Перечисления.СостоянияПроведенияВПоследовательности.ИсключенИзПоследовательности;
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
	
		Движение = НаборЗаписей.Добавить();
		
		// Свойства
		Движение.Период 		= НачалоДня(Источник.Дата); // Цены номенклатуры регистрируются с точностью до дня
		Движение.Регистратор 	= Источник.Ссылка;
		
		// Измерения
		Движение.Организация = Выборка.Организация;
		Движение.СостояниеПроведения = СостояниеПроведения;
	
	КонецЦикла;
	
	НаборЗаписей.Записать();

КонецПроцедуры
