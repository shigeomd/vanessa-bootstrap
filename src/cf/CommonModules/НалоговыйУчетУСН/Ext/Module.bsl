
// Получить полное наименование контрагента для содержания КУДиР
//
Функция НаименованиеКонтрагентаНаПечать(Контрагент) Экспорт

	РеквизитыКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент, "Наименование, НаименованиеПолное");
	
	НаименованиеКонтрагента = ?(ЗначениеЗаполнено(РеквизитыКонтрагента.НаименованиеПолное),
				РеквизитыКонтрагента.НаименованиеПолное, РеквизитыКонтрагента.Наименование);
	
	Возврат НаименованиеКонтрагента;

КонецФункции

// Процедура заполняет данные по УСН в платежных документах
//
// Параметры:
//
// ДокументОбъект -        объект (основной реквизит) формы; в процедуре устанавливаются реквизиты объекта и анализируются данные объекта
// ПараметрыУСН   -        Структура, содержит дополнительные параметры, требуемые для настройки отражения объекта в УСН;
//                         при вызове из форм можно заполнять из значений, кэшируемых в реквизитах формы, но не сохраняемые в Объекте.
//                         Состав структуры - см. функцию ПараметрыНастройкиУСН()
//
Процедура ЗаполнитьОтражениеДокументаВУСН(ДокументОбъект, ПараметрыУСН) Экспорт
	
	НастройкаКУДиР = Новый Структура("Графа4_УСН, Графа5_УСН, Графа6_УСН, Графа7_УСН,
		|НДС_УСН, ДоходыЕНВД_УСН, РасходыЕНВД_УСН");
	ЗаполнитьЗначенияСвойств(НастройкаКУДиР, ДокументОбъект);
	
	ПрименениеУСН = ПараметрыУСН.ПрименениеУСН;
	
	Если НЕ ПрименениеУСН Тогда
		НастройкаКУДиР.Графа4_УСН            = 0;
		НастройкаКУДиР.Графа5_УСН            = 0;
		НастройкаКУДиР.Графа6_УСН            = 0;
		НастройкаКУДиР.Графа7_УСН            = 0;
		НастройкаКУДиР.НДС_УСН               = 0;
		НастройкаКУДиР.ДоходыЕНВД_УСН        = Ложь;
		НастройкаКУДиР.РасходыЕНВД_УСН       = Ложь;
		ЗаполнитьЗначенияСвойств(ДокументОбъект, НастройкаКУДиР);
		Возврат;
	КонецЕсли;

	ВидОперации = ПараметрыУСН.ВидОперации;
	
	// Доходы
	ОбъектДоходы  = ПараметрыУСН.ПрименениеУСНДоходы;
	// Доходы минус расходы
	ОбъектРасходы = (ПараметрыУСН.ПрименениеУСН И НЕ ПараметрыУСН.ПрименениеУСНДоходы);

	ВалютаРегламентированногоУчета = ПараметрыУСН.ВалютаРегламентированногоУчета;

	// сумма для отражения в КУДиР
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхДокументов.ПоступлениеОтПодотчетногоЛица
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхДокументов.ПоступлениеОтПоставщика
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхДокументов.ПрочееПоступление Тогда
		СуммаДляКУДиР = ДокументОбъект.ДенежныеДокументы.Итог("Сумма");
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВыдачаДенежныхДокументов.ВозвратПоставщику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийВыдачаДенежныхДокументов.ВыдачаПодотчетномуЛицу 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийВыдачаДенежныхДокументов.ПрочаяВыдача Тогда
		СуммаДляКУДиР = ДокументОбъект.ДенежныеДокументы.Итог("Стоимость");
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийОтчетКомитентуОПродажах.ОтчетОПродажах Тогда
		СуммаДляКУДиР = ДокументОбъект.Товары.Итог("СуммаВознаграждения");
	Иначе
		СуммаДляКУДиР = ДокументОбъект.СуммаДокумента;
	КонецЕсли;
	
	Если НЕ ДокументОбъект.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
		СуммаДляКУДиР = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаДляКУДиР,
									ДокументОбъект.ВалютаДокумента, ВалютаРегламентированногоУчета,
									ПараметрыУСН.КурсДокумента, 1,
									ПараметрыУСН.КратностьДокумента, 1);
	КонецЕсли;

	Графа4_УСН      = 0;
	Графа5_УСН      = 0;
	Графа6_УСН      = 0;
	Графа7_УСН      = 0;
	ДоходыЕНВД_УСН  = Ложь;
	РасходыЕНВД_УСН = Ложь;

	//Поступление
	Если (ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика //Доходы
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация) Тогда
		Графа4_УСН = 0;
		Графа5_УСН = 0;

	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты) Тогда
		Графа4_УСН = СуммаДляКУДиР;
		Графа5_УСН = 0;

	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ПрочийПриход) Тогда
		Графа4_УСН = СуммаДляКУДиР;
		Графа5_УСН = СуммаДляКУДиР;

	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймам) Тогда
		
		Если ДокументОбъект.РасшифровкаПлатежа.Количество() > 0 Тогда
			Для каждого СтрокаТЧ Из ДокументОбъект.РасшифровкаПлатежа Цикл
				ЗаполнитьОтражениеВУСНСтрокиРасшифровкиПлатежа(СтрокаТЧ, ПараметрыУСН);
			КонецЦикла;
			Графа5_УСН = ДокументОбъект.РасшифровкаПлатежа.Итог("ДоходыУСН");
		КонецЕсли;
		
		Графа4_УСН = СуммаДляКУДиР;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами Тогда
		
		Если ДокументОбъект.РасшифровкаПлатежа.Количество() > 0 Тогда
			Для каждого СтрокаТЧ Из ДокументОбъект.РасшифровкаПлатежа Цикл
				ЗаполнитьОтражениеВУСНСтрокиРасшифровкиПлатежа(СтрокаТЧ, ПараметрыУСН);
			КонецЦикла;
			Графа5_УСН = ДокументОбъект.РасшифровкаПлатежа.Итог("ДоходыУСН");
		КонецЕсли;
		
		Графа4_УСН = СуммаДляКУДиР;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя Тогда
			
		Графа4_УСН = СуммаДляКУДиР;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам
			И ОбъектДоходы Тогда

		Графа4_УСН = СуммаДляКУДиР;
		Графа5_УСН = СуммаДляКУДиР + ДокументОбъект.СуммаУслуг;

	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка
		ИЛИ ВидОперации = Перечисления.ВидыОперацийОплатаПлатежнойКартой.РозничнаяВыручка)
		И ПараметрыУСН.НТТПоПродажнымЦенам Тогда

		Графа4_УСН = СуммаДляКУДиР;
		
		Если ПараметрыУСН.НТТНаЕНВД Тогда
			ДоходыЕНВД_УСН = Истина; 
			Графа5_УСН = 0;
		Иначе
			ДоходыЕНВД_УСН = Ложь;
			Графа5_УСН = СуммаДляКУДиР;
		КонецЕсли;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхДокументов.ПоступлениеОтПоставщика Тогда

		Графа4_УСН = СуммаДляКУДиР;
		Графа5_УСН = 0;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхДокументов.ПрочееПоступление Тогда
		
		Графа4_УСН = СуммаДляКУДиР;
		Графа5_УСН = 0;

	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийВыдачаДенежныхДокументов.ПрочаяВыдача)
			И ОбъектРасходы Тогда
	
		Графа6_УСН = СуммаДляКУДиР;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВыдачаДенежныхДокументов.ВозвратПоставщику Тогда
		
		Графа4_УСН = - СуммаДляКУДиР;
		Графа5_УСН = 0;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийОтчетКомитентуОПродажах.ОтчетОПродажах И ОбъектДоходы Тогда	
		
		Если ДокументОбъект.УдержатьВознаграждение Тогда
			Графа5_УСН = СуммаДляКУДиР;
		КонецЕсли; 
		
	//Списание
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю
			И ОбъектДоходы Тогда //Доходы

		Графа4_УСН = -СуммаДляКУДиР;
		Графа5_УСН = -СуммаДляКУДиР;
		Графа6_УСН = 0;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю
			И ОбъектДоходы Тогда

		Графа4_УСН = -СуммаДляКУДиР;
		Графа5_УСН = -СуммаДляКУДиР;
		Графа6_УСН = 0;

	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ПрочийРасход)
			И ОбъектРасходы Тогда
			
		Графа6_УСН = СуммаДляКУДиР;
		
		Если ПараметрыУСН.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПрочиеРасходы
			И ЗначениеЗаполнено(ПараметрыУСН.СубконтоДт1)
			И ТипЗнч(ПараметрыУСН.СубконтоДт1) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
			
			ВидПрочихРасходов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыУСН.СубконтоДт1, "ВидПрочихДоходовИРасходов");
			Если ВидПрочихРасходов = Перечисления.ВидыПрочихДоходовИРасходов.РасходыНаУслугиБанков Тогда
				Графа7_УСН = СуммаДляКУДиР;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.УплатаНалога) И ОбъектРасходы Тогда
		
		Графа6_УСН = СуммаДляКУДиР;
		
	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам)
			И ОбъектРасходы Тогда
		
		Если ДокументОбъект.РасшифровкаПлатежа.Количество() > 0 Тогда
			Для каждого СтрокаТЧ Из ДокументОбъект.РасшифровкаПлатежа Цикл
				ЗаполнитьОтражениеВУСНСтрокиРасшифровкиПлатежа(СтрокаТЧ, ПараметрыУСН);
			КонецЦикла; 
		КонецЕсли;
		
		Графа6_УСН = СуммаДляКУДиР;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами
			И ОбъектРасходы Тогда

		Если ДокументОбъект.РасшифровкаПлатежа.Количество() > 0 Тогда
			Для каждого СтрокаТЧ Из ДокументОбъект.РасшифровкаПлатежа Цикл
				ЗаполнитьОтражениеВУСНСтрокиРасшифровкиПлатежа(СтрокаТЧ, ПараметрыУСН);
			КонецЦикла; 
		КонецЕсли;
		
		Графа6_УСН = СуммаДляКУДиР;

	КонецЕсли;
	
	НастройкаКУДиР.Графа4_УСН      = Графа4_УСН;
	НастройкаКУДиР.Графа5_УСН      = Графа5_УСН;
	НастройкаКУДиР.Графа6_УСН      = Графа6_УСН;
	НастройкаКУДиР.Графа7_УСН      = Графа7_УСН;
	НастройкаКУДиР.НДС_УСН         = 0;
	НастройкаКУДиР.ДоходыЕНВД_УСН  = ДоходыЕНВД_УСН;
	НастройкаКУДиР.РасходыЕНВД_УСН = РасходыЕНВД_УСН;
	
	// Устанавливаем параметры отражения УСН в документе
	ЗаполнитьЗначенияСвойств(ДокументОбъект, НастройкаКУДиР);

КонецПроцедуры

Процедура ЗаполнитьДоходыРасходыВсего(ДокументОбъект, ПараметрыУСН) Экспорт

	НастройкаКУДиР = Новый Структура("Графа4_УСН, Графа6_УСН");
	ЗаполнитьЗначенияСвойств(НастройкаКУДиР, ДокументОбъект);
	
	ПрименениеУСН = ПараметрыУСН.ПрименениеУСН;
	
	Если НЕ ПрименениеУСН Тогда
		НастройкаКУДиР.Графа4_УСН            = 0;
		НастройкаКУДиР.Графа6_УСН            = 0;
		ЗаполнитьЗначенияСвойств(ДокументОбъект, НастройкаКУДиР);
		Возврат;
	КонецЕсли;

	ВидОперации = ПараметрыУСН.ВидОперации;
	
	// Доходы
	ОбъектДоходы  = ПараметрыУСН.ПрименениеУСНДоходы;
	// Доходы минус расходы
	ОбъектРасходы = (ПараметрыУСН.ПрименениеУСН И НЕ ПараметрыУСН.ПрименениеУСНДоходы);

	ВалютаРегламентированногоУчета = ПараметрыУСН.ВалютаРегламентированногоУчета;

	// сумма для отражения в КУДиР
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхДокументов.ПоступлениеОтПодотчетногоЛица
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхДокументов.ПоступлениеОтПоставщика
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхДокументов.ПрочееПоступление Тогда
		СуммаДляКУДиР = ДокументОбъект.ДенежныеДокументы.Итог("Сумма");
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВыдачаДенежныхДокументов.ВозвратПоставщику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийВыдачаДенежныхДокументов.ВыдачаПодотчетномуЛицу 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийВыдачаДенежныхДокументов.ПрочаяВыдача Тогда
		СуммаДляКУДиР = ДокументОбъект.ДенежныеДокументы.Итог("Стоимость");
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийОтчетКомитентуОПродажах.ОтчетОПродажах Тогда
		СуммаДляКУДиР = ДокументОбъект.Товары.Итог("СуммаВознаграждения");
	Иначе
		СуммаДляКУДиР = ДокументОбъект.СуммаДокумента;
	КонецЕсли;
	
	Если НЕ ДокументОбъект.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
		СуммаДляКУДиР = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаДляКУДиР,
									ДокументОбъект.ВалютаДокумента, ВалютаРегламентированногоУчета,
									ПараметрыУСН.КурсДокумента, 1,
									ПараметрыУСН.КратностьДокумента, 1);
	КонецЕсли;

	Графа4_УСН      = 0;
	Графа6_УСН      = 0;

	//Поступление
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика //Доходы
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация Тогда
		
		Графа4_УСН = 0;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ПрочийПриход
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхДокументов.ПоступлениеОтПоставщика
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхДокументов.ПрочееПоступление Тогда
			
		Графа4_УСН = СуммаДляКУДиР;

	ИначеЕсли ОбъектДоходы 
		И ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам Тогда

		Графа4_УСН = СуммаДляКУДиР;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка И ПараметрыУСН.НТТПоПродажнымЦенам Тогда

		Графа4_УСН = СуммаДляКУДиР;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийОтчетКомитентуОПродажах.ОтчетОПродажах И ОбъектДоходы Тогда	 
		
		Графа4_УСН = 0;
		
	//Списание
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВыдачаДенежныхДокументов.ВозвратПоставщику Тогда
		
		Графа4_УСН = - СуммаДляКУДиР;
		
	ИначеЕсли ОбъектДоходы
		И (ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю) Тогда //Доходы

		Графа4_УСН = -СуммаДляКУДиР;
		Графа6_УСН = 0;

	ИначеЕсли ОбъектРасходы 
		И (ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ПрочийРасход
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.УплатаНалога
		ИЛИ ВидОперации = Перечисления.ВидыОперацийВыдачаДенежныхДокументов.ПрочаяВыдача) Тогда
		
		Графа6_УСН = СуммаДляКУДиР;
		
	КонецЕсли;
	
	НастройкаКУДиР.Графа4_УСН      = Графа4_УСН;
	НастройкаКУДиР.Графа6_УСН      = Графа6_УСН;
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект, НастройкаКУДиР);

КонецПроцедуры 

Процедура ЗаполнитьОтражениеВУСНСтрокиРасшифровкиПлатежа(СтрокаТЧ, Параметры) Экспорт
	
	ДанныеСтрокиТЧ = Новый Структура("ДоходыУСН, РасходыУСН, НДСУСН, РаспределятьРасходыУСН, СчетУчетаРасчетовСКонтрагентом");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТЧ, СтрокаТЧ);
	
	СуммаНУ = СтрокаТЧ.СуммаПлатежа;
	Если Не Параметры.ВалютаДокумента = Параметры.ВалютаРегламентированногоУчета Тогда
		СуммаНУ = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаНУ,
												Параметры.ВалютаДокумента, Параметры.ВалютаРегламентированногоУчета,
												Параметры.КурсДокумента, 1,
												Параметры.КратностьДокумента, 1);
	КонецЕсли; 
	
	ЕстьРасчетыПоДоходамУСН  = УчетУСН.ЕстьПрочиеРасчетыПоДоходам(Параметры.ВидОперации);
	ЕстьРасчетыПоРасходамУСН = УчетУСН.ЕстьПрочиеРасчетыПоРасходам(Параметры.ВидОперации);
	ЕстьКредитыИЗаймыУСН     = УчетДенежныхСредствКлиентСервер.ЕстьРасчетыПоКредитам(Параметры.ВидОперации);
	
	Если Не Параметры.ПрименениеУСН Тогда
		Если ЕстьРасчетыПоДоходамУСН Тогда
			ДанныеСтрокиТЧ.ДоходыУСН = СуммаНУ;
		ИначеЕсли ЕстьРасчетыПоРасходамУСН Тогда
			ДанныеСтрокиТЧ.РасходыУСН = 0;
			ДанныеСтрокиТЧ.НДСУСН     = 0;
			ДанныеСтрокиТЧ.РаспределятьРасходыУСН = Ложь;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, ДанныеСтрокиТЧ);
		Возврат;
	КонецЕсли; 
	
	Если ЕстьРасчетыПоДоходамУСН Тогда
		// по умолчанию доходы принимаются в полной сумме, за исключением поступления кредита или займа
		Если ЕстьКредитыИЗаймыУСН Тогда
			
			Если ДанныеСтрокиТЧ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.КраткосрочныеКредиты
				ИЛИ ДанныеСтрокиТЧ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.КраткосрочныеКредитыВал
				ИЛИ ДанныеСтрокиТЧ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.КраткосрочныеЗаймы
				ИЛИ ДанныеСтрокиТЧ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.КраткосрочныеЗаймыВал
				ИЛИ ДанныеСтрокиТЧ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ДолгосрочныеКредиты
				ИЛИ ДанныеСтрокиТЧ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ДолгосрочныеКредитыВал
				ИЛИ ДанныеСтрокиТЧ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ДолгосрочныеЗаймы
				ИЛИ ДанныеСтрокиТЧ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ДолгосрочныеЗаймыВал Тогда
				ДанныеСтрокиТЧ.ДоходыУСН = 0;
			Иначе
				ДанныеСтрокиТЧ.ДоходыУСН = СуммаНУ;
			КонецЕсли;
			
		Иначе
			ДанныеСтрокиТЧ.ДоходыУСН = СуммаНУ;
		КонецЕсли; 
		
	ИначеЕсли ЕстьРасчетыПоРасходамУСН Тогда
		
		// по умолчанию расходы не принимаются, за исключением уплаты процентов по кредитам и займам
		ДанныеСтрокиТЧ.РасходыУСН = 0;
		ДанныеСтрокиТЧ.НДСУСН     = 0;
		ДанныеСтрокиТЧ.РаспределятьРасходыУСН = Ложь;
		
		Если НЕ Параметры.ПрименениеУСНДоходы И ЕстьКредитыИЗаймыУСН Тогда
		
			Если ДанныеСтрокиТЧ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймам
				ИЛИ	ДанныеСтрокиТЧ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймамВал
				ИЛИ ДанныеСтрокиТЧ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймам
				ИЛИ	ДанныеСтрокиТЧ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймамВал
				ИЛИ	ДанныеСтрокиТЧ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымКредитам
				ИЛИ	ДанныеСтрокиТЧ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымКредитамВал
				ИЛИ	ДанныеСтрокиТЧ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымКредитам
				ИЛИ ДанныеСтрокиТЧ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымКредитамВал
				ИЛИ ДанныеСтрокиТЧ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымКредитам
				ИЛИ ДанныеСтрокиТЧ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымКредитамВал Тогда
				ДанныеСтрокиТЧ.РасходыУСН = СуммаНУ;
			КонецЕсли; 
		
		КонецЕсли; 
		
	КонецЕсли; 

	ЗаполнитьЗначенияСвойств(СтрокаТЧ, ДанныеСтрокиТЧ);
	
КонецПроцедуры

// Процедура заполняет содержание записи КУДиР для операций,
// при которых оно отображается на форме документа
//
Процедура ЗаполнитьОтображаемоеСодержаниеКУДиР(ДокументОбъект, ПараметрыУСН) Экспорт
	
	ПрименениеУСН = ПараметрыУСН.ПрименениеУСН;
	
	Если НЕ ПрименениеУСН Тогда
		ДокументОбъект.Содержание_УСН = "";
		Возврат;
	КонецЕсли;

	ВидОперации = ПараметрыУСН.ВидОперации;
	
	// Доходы
	ОбъектДоходы  = ПараметрыУСН.ПрименениеУСНДоходы;
	// Доходы минус расходы
	ОбъектРасходы = НЕ ПараметрыУСН.ПрименениеУСНДоходы;

	Содержание_УСН = СокрЛП(ВидОперации) + ".";

	//Поступление
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ПрочийПриход Тогда
			
		Если ЗначениеЗаполнено(ПараметрыУСН.СтатьяДвиженияДенежныхСредств) Тогда
			Содержание_УСН = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"Прочий приход денежных средств: %1.", ПараметрыУСН.СтатьяДвиженияДенежныхСредств);
		Иначе
		    Содержание_УСН = "Прочий приход денежных средств.";
		КонецЕсли;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка И ПараметрыУСН.НТТПоПродажнымЦенам Тогда
		
		Содержание_УСН = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"Прием розничной выручки с торговой точки ""%1"".", ДокументОбъект.Контрагент);
		
	//Списание
	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ПрочийРасход)
		И ОбъектРасходы Тогда
		
		Если ЗначениеЗаполнено(ПараметрыУСН.СтатьяДвиженияДенежныхСредств) Тогда
			Содержание_УСН = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"Прочий расход денежных средств: %1.", ПараметрыУСН.СтатьяДвиженияДенежныхСредств);
		Иначе
		    Содержание_УСН = "Прочий расход денежных средств.";
		КонецЕсли; 
		
		Если ПараметрыУСН.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПрочиеРасходы
			И ЗначениеЗаполнено(ПараметрыУСН.СубконтоДт1)
			И ТипЗнч(ПараметрыУСН.СубконтоДт1) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
			
			ВидПрочихРасходов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыУСН.СубконтоДт1, "ВидПрочихДоходовИРасходов");
			Если ВидПрочихРасходов = Перечисления.ВидыПрочихДоходовИРасходов.РасходыНаУслугиБанков Тогда
				Содержание_УСН = "Расходы, связанные с оплатой услуг, оказываемых кредитными организациями.";
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога
			Или ВидОперации = Перечисления.ВидыОперацийРКО.УплатаНалога)
			И ОбъектРасходы Тогда
		
		НазначениеПлатежа = Справочники.ВидыНалоговИПлатежейВБюджет.НазначениеПлатежа(ПараметрыУСН.Налог);
		Содержание_УСН = ?(Не ПустаяСтрока(НазначениеПлатежа), НазначениеПлатежа, НСтр("ru = 'Уплата налога'"));
		
	КонецЕсли;
	
	ДокументОбъект.Содержание_УСН  = Содержание_УСН;

КонецПроцедуры

// Процедура формирует содержание записи КУДиР для операций,
// при которых редактирование содержания пользователем недоступно
//
Функция СодержаниеОперацииДляКУДиР(ПараметрыУСН) Экспорт
	
	ПрименениеУСН = ПараметрыУСН.ПрименениеУСН;
	
	Если НЕ ПрименениеУСН Тогда
		Возврат "";
	КонецЕсли;

	ВидОперации = ПараметрыУСН.ВидОперации;
	
	// Доходы
	ОбъектДоходы  = ПараметрыУСН.ПрименениеУСНДоходы;
	// Доходы минус расходы
	ОбъектРасходы = (ПараметрыУСН.ПрименениеУСН И НЕ ПараметрыУСН.ПрименениеУСНДоходы);

	ВалютаРегламентированногоУчета = ПараметрыУСН.ВалютаРегламентированногоУчета;

	Содержание_УСН = СокрЛП(ВидОперации) + ".";
	
	//Поступление
	Если ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка И ПараметрыУСН.НТТПоПродажнымЦенам Тогда
		Содержание_УСН = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"Прием розничной выручки с торговой точки ""%1"".", ПараметрыУСН.Контрагент);

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами Тогда
		Содержание_УСН = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Расчеты с ""%1"" по договору ""%2"".'"),
			ПараметрыУСН.Контрагент,
			ПараметрыУСН.ДоговорКонтрагента);

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам
			Или ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймам Тогда
		Содержание_УСН = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Расчеты по кредитам и займам с ""%1"" по договору ""%2"".'"),
			ПараметрыУСН.Контрагент,
			ПараметрыУСН.ДоговорКонтрагента);

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхДокументов.ПоступлениеОтПоставщика Тогда
		Содержание_УСН = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"Поступление денежных документов. Принято от ""%1"".", НаименованиеКонтрагентаНаПечать(ПараметрыУСН.Контрагент));

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхДокументов.ПрочееПоступление Тогда
		Содержание_УСН = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"Поступление денежных документов. Принято от ""%1"".", ПараметрыУСН.ПринятоОт);

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВыдачаДенежныхДокументов.ПрочаяВыдача
			И ОбъектРасходы Тогда
		Содержание_УСН = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"Выдача денежных документов. Выдано ""%1"".", ПараметрыУСН.Выдано);

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВыдачаДенежныхДокументов.ВозвратПоставщику Тогда
		Содержание_УСН = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"Возврат денежных документов контрагенту ""%1"".", НаименованиеКонтрагентаНаПечать(ПараметрыУСН.Контрагент));

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийОтчетКомитентуОПродажах.ОтчетОПродажах И ОбъектДоходы Тогда
		Содержание_УСН = "Комиссионное вознаграждение удержано из выручки комитента.";
		
	//Списание
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам
			Или ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам
			И ОбъектРасходы Тогда
		Содержание_УСН = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Расчеты по кредитам и займам с ""%1"" по договору ""%2"".'"),
			ПараметрыУСН.Контрагент,
			ПараметрыУСН.ДоговорКонтрагента);
			
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами
			И ОбъектРасходы Тогда
		Содержание_УСН = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Расчеты с ""%1"" по договору ""%2"".'"),
			ПараметрыУСН.Контрагент,
			ПараметрыУСН.ДоговорКонтрагента);
		
	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога
			Или ВидОперации = Перечисления.ВидыОперацийРКО.УплатаНалога)
			И ОбъектРасходы Тогда
		
		НазначениеПлатежа = Справочники.ВидыНалоговИПлатежейВБюджет.НазначениеПлатежа(ПараметрыУСН.Налог);
		Содержание_УСН = ?(Не ПустаяСтрока(НазначениеПлатежа), НазначениеПлатежа, НСтр("ru = 'Уплата налога'"));
		
	КонецЕсли;
	
	Возврат Содержание_УСН;

КонецФункции

//Возвращает реквизиты первичного документа для занесения в графу 2 КУДиР
//
Функция РеквизитыПервичногоДокумента(Документ, ТЧ = "", Строка = 0, УказыватьВид = Ложь) Экспорт

	ВидНаПечать		= "";
	НомерНаПечать	= "";
	ДатаНаПечать	= "";
	
	МетаданныеДокумента	= Документ.Метаданные();

	//Проверим дату и номер первичного документа в табличной части
	Если (ЗначениеЗаполнено(ТЧ)) и (Строка > 0) Тогда

		Если ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("НомерВходящегоДокумента", МетаданныеДокумента, ТЧ) И
			ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("ДатаВходящегоДокумента", МетаданныеДокумента, ТЧ) Тогда

			Если НЕ Документ[ТЧ].Количество() < Строка-1 Тогда

				НомерНаПечать	= Документ[ТЧ][Строка-1].НомерВходящегоДокумента;
				ДатаНаПечать	= Формат(Документ[ТЧ][Строка-1].ДатаВходящегоДокумента, "ДЛФ=D");

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	//Проверим дату и номер первичного документа в шапке
	Если НЕ ЗначениеЗаполнено(НомерНаПечать) И НЕ ЗначениеЗаполнено(ДатаНаПечать) Тогда

		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("НомерВходящегоДокумента", МетаданныеДокумента) И
			ОбщегоНазначения.ЕстьРеквизитОбъекта("ДатаВходящегоДокумента", МетаданныеДокумента) Тогда

			НомерНаПечать	= Документ.НомерВходящегоДокумента;
			ДатаНаПечать	= Формат(Документ.ДатаВходящегоДокумента, "ДЛФ=D");

		КонецЕсли;

	КонецЕсли;

	//Если дата и номер первичного документа не указаны или не заполнены, используем дату и номер регистрации
	Если НЕ ЗначениеЗаполнено(НомерНаПечать) Тогда

		НомерНаПечать	= ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Документ.Номер, Истина, Ложь);

	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ДатаНаПечать) Тогда

		ДатаНаПечать	= Формат(Документ.Дата, "ДЛФ=D");

	КонецЕсли;
	
	Если УказыватьВид Тогда
	
		ВидНаПечать	= МетаданныеДокумента.Синоним + " ";
	
	КонецЕсли;
	
	РеквизитыПервичногоДокумента	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1№ %2 от %3'"),
		ВидНаПечать, НомерНаПечать, ДатаНаПечать);

	Возврат РеквизитыПервичногоДокумента;
	
КонецФункции

//Дополняет таблицу списанных партий колонкой, с новым статусом списания и количеством
//списанным по новому статусу
Процедура ЗаполнитьОтражениеВНУпоСписанию(Реквизиты, ТаблицаСписанныхПартий, ВидОперации) Экспорт

	ВыручкаВсего    = 0;
	ВыручкаЕНВД     = 0;
	ВыручкаКомиссии = 0;

	ДокументСсылка = Реквизиты.Ссылка;

	Если ТаблицаСписанныхПартий.Колонки.Найти("СтатусСписания") = Неопределено Тогда
		ТаблицаСписанныхПартий.Колонки.Добавить("СтатусСписания");
	КонецЕсли;
	Если ТаблицаСписанныхПартий.Колонки.Найти("КоличествоПоСтатусуСписания") = Неопределено Тогда
		ТаблицаСписанныхПартий.Колонки.Добавить("КоличествоПоСтатусуСписания");
	КонецЕсли;
	ТаблицаСписанныхПартий.ЗаполнитьЗначения(Перечисления.ОтражениеВУСН.Принимаются, "СтатусСписания");
	ТаблицаСписанныхПартий.ЗаполнитьЗначения(0, "КоличествоПоСтатусуСписания");

	//Подменим ссылку если документ - реализация отгруженной продукции
	Если (ДокументСсылка.Метаданные().ТабличныеЧасти.Количество() = 0) И (НЕ ДокументСсылка.Метаданные().Реквизиты.Найти("ДокументОтгрузки") = Неопределено) Тогда
		Если ЗначениеЗаполнено(ДокументСсылка.ДокументОтгрузки) Тогда
			ДокументСсылка = Реквизиты.Ссылка.ДокументОтгрузки;
		КонецЕсли;
	КонецЕсли;

	МетаданныеДокумента = ДокументСсылка.Метаданные();
	ИмяВидаДокумента = МетаданныеДокумента.Имя;

	ТабличныеЧасти = Новый Массив;

	Если НЕ ДокументСсылка.Метаданные().ТабличныеЧасти.Найти("ИспользованныеМатериалы") = НЕОПРЕДЕЛЕНО Тогда
		ТабличныеЧасти.Добавить("ИспользованныеМатериалы");
	ИначеЕсли НЕ ДокументСсылка.Метаданные().ТабличныеЧасти.Найти("Материалы") = НЕОПРЕДЕЛЕНО Тогда
		ТабличныеЧасти.Добавить("Материалы");
	ИначеЕсли НЕ ДокументСсылка.Метаданные().ТабличныеЧасти.Найти("Товары") = НЕОПРЕДЕЛЕНО Тогда
		ТабличныеЧасти.Добавить("Товары");
	ИначеЕсли НЕ ДокументСсылка.Метаданные().ТабличныеЧасти.Найти("Спецодежда") = НЕОПРЕДЕЛЕНО Тогда
		ТабличныеЧасти.Добавить("Спецодежда");
		Если НЕ ДокументСсылка.Метаданные().ТабличныеЧасти.Найти("Спецоснастка") = НЕОПРЕДЕЛЕНО Тогда
			ТабличныеЧасти.Добавить("Спецоснастка");
		КонецЕсли;
		Если НЕ ДокументСсылка.Метаданные().ТабличныеЧасти.Найти("ИнвентарьИХозяйственныеПринадлежности") = НЕОПРЕДЕЛЕНО Тогда
			ТабличныеЧасти.Добавить("ИнвентарьИХозяйственныеПринадлежности");
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;

	Если ВидОперации = "ВозвратПоставщику" 
		ИЛИ (ОбщегоНазначения.ЕстьРеквизитОбъекта("ДеятельностьНаПатенте", МетаданныеДокумента) И (ДокументСсылка.ДеятельностьНаПатенте)) Тогда
		Для Каждого Строка Из ТаблицаСписанныхПартий Цикл
			Строка.СтатусСписания = Перечисления.ОтражениеВУСН.НеПринимаются;
			Строка.КоличествоПоСтатусуСписания = Строка.Количество;
		КонецЦикла;
		Возврат;
	КонецЕсли;

	ТаблицаСписанныхПартий.Индексы.Добавить("Номенклатура");

	Для Каждого ИмяТЧ Из ТабличныеЧасти Цикл
		//Если отражение в НУ указывается явно
		Если ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("ОтражениеВУСН", МетаданныеДокумента, ИмяТЧ) Тогда

			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Ссылка",		 ДокументСсылка);
			Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);

			Текст =

			"ВЫБРАТЬ
			|	СУММА(РеализацияТоваровУслугТовары.Количество) КАК Количество,
			|	РеализацияТоваровУслугТовары.ОтражениеВУСН,
			|	РеализацияТоваровУслугТовары.Номенклатура
			|ИЗ
			|	Документ." + ИмяВидаДокумента + "." + ИмяТЧ + " КАК РеализацияТоваровУслугТовары
			|
			|ГДЕ
			|	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	РеализацияТоваровУслугТовары.ОтражениеВУСН,
			|	РеализацияТоваровУслугТовары.Номенклатура";

			Запрос.Текст = Текст;
			ТаблицаРезультата = Запрос.Выполнить().Выгрузить();

			Для Каждого Строка Из ТаблицаРезультата Цикл
				Если Строка.ОтражениеВУСН <> Перечисления.ОтражениеВУСН.Принимаются Тогда

					СтруктураОтбора = Новый Структура;
					СтруктураОтбора.Вставить("Номенклатура",				Строка.Номенклатура);

					НайденныеСтроки = ТаблицаСписанныхПартий.НайтиСтроки(СтруктураОтбора);
					КоличествоПоСтроке = Строка.Количество;

					Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
						Если КоличествоПоСтроке = 0 Тогда
							Прервать;
						КонецЕсли;

						Учесть = Мин(КоличествоПоСтроке, СтрокаТаблицы.Количество - СтрокаТаблицы.КоличествоПоСтатусуСписания);

						Если Учесть = 0 Тогда
							Продолжить;
						КонецЕсли;

						Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СтатусСписания)
							ИЛИ (СтрокаТаблицы.СтатусСписания = Строка.ОтражениеВУСН) Тогда
							СтрокаТаблицы.СтатусСписания = Строка.ОтражениеВУСН;
							СтрокаТаблицы.КоличествоПоСтатусуСписания = СтрокаТаблицы.КоличествоПоСтатусуСписания + Учесть;

						Иначе
							НоваяСтрока = ТаблицаСписанныхПартий.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);

							НоваяСтрока.Количество = Учесть;
							НоваяСтрока.КоличествоПоСтатусуСписания = Учесть;
							НоваяСтрока.СтатусСписания = ?(ЗначениеЗаполнено(Строка.ОтражениеВУСН), Строка.ОтражениеВУСН, Перечисления.ОтражениеВУСН.НеПринимаются);

							СтрокаТаблицы.Количество = СтрокаТаблицы.Количество - Учесть;

						КонецЕсли;
						КоличествоПоСтроке = КоличествоПоСтроке - Учесть;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;

			//Если реализация - выделяем реализованные по ЕНВД и устанавливаем им статус не принимаемых
		ИначеЕсли ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("СчетДоходов", МетаданныеДокумента, ИмяТЧ) Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Ссылка",		 ДокументСсылка);
			Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
			
			Текст =
			"ВЫБРАТЬ
			|	СУММА(РеализацияТоваровУслугТовары.Количество) КАК Количество,
			|	РеализацияТоваровУслугТовары.СчетДоходов,
			|	РеализацияТоваровУслугТовары.Номенклатура
			|ИЗ
			|	Документ." + ИмяВидаДокумента + "." + ИмяТЧ + " КАК РеализацияТоваровУслугТовары
			|
			|ГДЕ
			|	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	РеализацияТоваровУслугТовары.СчетДоходов,
			|	РеализацияТоваровУслугТовары.Номенклатура";
			
			Запрос.Текст = Текст;
			ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
			
			Для каждого Строка Из ТаблицаРезультата Цикл
				Если БухгалтерскийУчетВызовСервераПовтИсп.СчетОтноситсяКДеятельностиЕНВД(Строка.СчетДоходов) Тогда
					СтруктураОтбора = Новый Структура;
					СтруктураОтбора.Вставить("Номенклатура", Строка.Номенклатура);
					
					НайденныеСтроки = ТаблицаСписанныхПартий.НайтиСтроки(СтруктураОтбора);
					КоличествоПоСтроке = Строка.Количество;
					
					Для каждого СтрокаТаблицы Из НайденныеСтроки Цикл
						Если КоличествоПоСтроке = 0 Тогда
							Прервать;
						КонецЕсли;
						Учесть = Мин(КоличествоПоСтроке, СтрокаТаблицы.Количество - СтрокаТаблицы.КоличествоПоСтатусуСписания);
						СтрокаТаблицы.СтатусСписания = Перечисления.ОтражениеВУСН.НеПринимаются;
						СтрокаТаблицы.КоличествоПоСтатусуСписания = СтрокаТаблицы.КоличествоПоСтатусуСписания + Учесть;
						КоличествоПоСтроке = КоличествоПоСтроке - Учесть;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Получает курс переданной валюты на переданную дату из переданного соответствия - кэша
// Если в кэше курс не найден - получает из РС "КурсыВалют" и сохраняет в кэше
// для поиска используется составная строка: УИД элемента справочника "Валюты" + литерал даты без времени
Функция ПолучитьКурсВалютыИзКэша(Валюта, ДатаКурса, КэшКурсовВалют)
	
	Если КэшКурсовВалют = Неопределено Тогда
		КэшКурсовВалют = Новый Соответствие;
	КонецЕсли;
	
	КлючЗаписи = Строка(Валюта.УникальныйИдентификатор()) + "%%" + Год(ДатаКурса) + Месяц(ДатаКурса) + День(ДатаКурса);
	
	СтруктураКурса = КэшКурсовВалют[КлючЗаписи];
	Если СтруктураКурса = Неопределено Тогда
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, ДатаКурса);
		КэшКурсовВалют.Вставить(КлючЗаписи, СтруктураКурса);
	КонецЕсли;
	
	Возврат СтруктураКурса;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ РАБОТЫ С ЕНВД И УСН
//

Функция ПолучитьКоэффРаспределенияЕНВД(СтруктураШапкиДокумента, Период = "Квартал", Способ = "БУ") Экспорт

	Коэфф = 0;
	НачальнаяДата = ?(Период = "Квартал", НачалоКвартала(СтруктураШапкиДокумента.Дата), НачалоГода(СтруктураШапкиДокумента.Дата));

	Если Способ = "БУ" Тогда
		Коэфф = НалоговыйУчет.КоэффициентРаспределенияРасходовПоВидамДеятельности(
			СтруктураШапкиДокумента.Организация, 
			НачальнаяДата,
			СтруктураШапкиДокумента.Дата);
	Иначе
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НачДата", НачальнаяДата);
		Запрос.УстановитьПараметр("КонДата", КонецМесяца(СтруктураШапкиДокумента.Дата));
		Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КнигаУчетаДоходовИРасходовОбороты.Графа5Оборот,
		|	КнигаУчетаДоходовИРасходовОбороты.ДоходЕНВДОборот,
		|	КнигаУчетаДоходовИРасходовОбороты.Графа4Оборот
		|ИЗ
		|	РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&НачДата, &КонДата, , Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОбороты";

		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда

			ДоходЕНВДОборот = ?(НЕ ЗначениеЗаполнено(Результат.ДоходЕНВДОборот), 0, Результат.ДоходЕНВДОборот);
			Графа4Оборот 	= ?(НЕ ЗначениеЗаполнено(Результат.Графа4Оборот), 0, Результат.Графа4Оборот);
			Графа5Оборот 	= ?(НЕ ЗначениеЗаполнено(Результат.Графа5Оборот), 0, Результат.Графа5Оборот);

			Если Способ = "НУ" Тогда
				Коэфф = ?(ДоходЕНВДОборот + Графа5Оборот = 0, 0, Результат.ДоходЕНВДОборот/(ДоходЕНВДОборот + Графа5Оборот));
			Иначе
				Коэфф = ?(Графа4Оборот = 0, 0, Результат.ДоходЕНВДОборот/Графа4Оборот);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Коэфф;

КонецФункции

Функция СодержаниеКУДиР(СтруктураШапкиДокумента, ВидОперации, МетаданныеДокумента)

	СтрокаСодержание = "";
	ДокументСсылка = СтруктураШапкиДокумента.Ссылка;

	Если ВидОперации = "Поступление" Тогда

		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
			СтрокаСодержание = "Представлен авансовый отчет: " + ДокументСсылка.ФизЛицо
				+ ", назначение аванса """ + СокрЛП(ДокументСсылка.НазначениеАванса) + """. ";
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
			СтрокаСодержание = "Контрагентом """ + НаименованиеКонтрагентаНаПечать(ДокументСсылка.Контрагент) + """ по договору """
				+ ДокументСсылка.ДоговорКонтрагента + """ оказаны услуги """ + СокрЛП(ДокументСсылка.Содержание) + """. ";
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			Если ДокументСсылка.Услуги.Количество() = 0 Тогда
				СтрокаСодержание = "Поступление ТМЦ от """ + НаименованиеКонтрагентаНаПечать(ДокументСсылка.Контрагент)
					+ """ по договору """ +	ДокументСсылка.ДоговорКонтрагента +	""". ";
			ИначеЕсли ДокументСсылка.Товары.Количество() = 0 Тогда
				СтрокаСодержание = "Контрагентом """ + НаименованиеКонтрагентаНаПечать(ДокументСсылка.Контрагент)
					+ """ оказаны услуги по договору """ + ДокументСсылка.ДоговорКонтрагента + """. ";
			Иначе
				СтрокаСодержание = "Поступление ТМЦ и услуг от """ + НаименованиеКонтрагентаНаПечать(ДокументСсылка.Контрагент)
					+ """ по договору """ + ДокументСсылка.ДоговорКонтрагента + """. ";
			КонецЕсли;
		Иначе
			СтрокаСодержание = МетаданныеДокумента.Синоним + ". ";
		КонецЕсли;

	ИначеЕсли ВидОперации = "Оплата" Тогда

		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
			СтрокаСодержание = "Подотчетным лицом: " + ДокументСсылка.ФизЛицо +
			", назначение аванса """ + СокрЛП(ДокументСсылка.НазначениеАванса) + """. ";
			Если ДокументСсылка.ОплатаПоставщикам.Количество() = 1 Тогда
				СтрокаСодержание = СтрокаСодержание + " произведена оплата поставщику """ +
					НаименованиеКонтрагентаНаПечать(ДокументСсылка.ОплатаПоставщикам[0].Контрагент) + """ по договору """ +
					ДокументСсылка.ОплатаПоставщикам[0].ДоговорКонтрагента + """. ";
			Иначе
				СтрокаСодержание = СтрокаСодержание + " произведена оплата поставщикам. ";
			КонецЕсли;
		ИначеЕсли Не МетаданныеДокумента.ТабличныеЧасти.Найти("РасшифровкаПлатежа") = Неопределено Тогда
			Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
				СтрокаСодержание = "Выдача из кассы: оплата поставщику";
			Иначе
				СтрокаСодержание = "Списание с р/с: оплата поставщику";
			КонецЕсли;
			Если ДокументСсылка.РасшифровкаПлатежа.Количество() = 1 Тогда
				СтрокаСодержание = СтрокаСодержание + " """ + 
					НаименованиеКонтрагентаНаПечать(ДокументСсылка.Контрагент) + """ по договору """ + 
				ДокументСсылка.РасшифровкаПлатежа[0].ДоговорКонтрагента + """. ";
			ИначеЕсли ДокументСсылка.РасшифровкаПлатежа.Количество() > 1 Тогда
				СтрокаДоговоров = "";
				МассивДоговоров = ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(
					ДокументСсылка.РасшифровкаПлатежа.ВыгрузитьКолонку("ДоговорКонтрагента"));
				Для каждого Договор Из МассивДоговоров Цикл
					СтрокаДоговоров = СтрокаДоговоров + ?(ПустаяСтрока(СтрокаДоговоров), "", """, """) + Договор;
				КонецЦикла;
				СтрокаДоговоров = ?(МассивДоговоров.Количество() > 1, """ по договорам """, """ по договору """) + СтрокаДоговоров;
				СтрокаСодержание = СтрокаСодержание + " """ + 
					НаименованиеКонтрагентаНаПечать(ДокументСсылка.Контрагент) + СтрокаДоговоров + """. ";
			Иначе
				СтрокаСодержание = СтрокаСодержание + " """ + ДокументСсылка.Контрагент + """. ";
			КонецЕсли;
		Иначе
			СтрокаСодержание = МетаданныеДокумента.Синоним + " (оплата поставщику). ";
		КонецЕсли;

	ИначеЕсли ВидОперации = "ОплатаОтПокупателя" Тогда

		Если Не МетаданныеДокумента.ТабличныеЧасти.Найти("РасшифровкаПлатежа") = Неопределено Тогда
			Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
				СтрокаСодержание = "Поступление в кассу: оплата от покупателя";
			Иначе
				СтрокаСодержание = "Поступление на р/с: оплата от покупателя";
			КонецЕсли;
			Если ДокументСсылка.РасшифровкаПлатежа.Количество() = 1 Тогда
				СтрокаСодержание = СтрокаСодержание + " """
					+ НаименованиеКонтрагентаНаПечать(ДокументСсылка.Контрагент) + """ по договору """
					+ ДокументСсылка.РасшифровкаПлатежа[0].ДоговорКонтрагента + """. ";
			ИначеЕсли ДокументСсылка.РасшифровкаПлатежа.Количество() > 1 Тогда
				СтрокаДоговоров = "";
				МассивДоговоров = ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(
					ДокументСсылка.РасшифровкаПлатежа.ВыгрузитьКолонку("ДоговорКонтрагента"));		
				Для каждого Договор Из МассивДоговоров Цикл
					СтрокаДоговоров = СтрокаДоговоров + ?(ПустаяСтрока(СтрокаДоговоров), "", """, """) + Договор;
				КонецЦикла;
				СтрокаДоговоров = ?(МассивДоговоров.Количество() > 1, """ по договорам """, """ по договору """) + СтрокаДоговоров;
				СтрокаСодержание = СтрокаСодержание + " """
					+ НаименованиеКонтрагентаНаПечать(ДокументСсылка.Контрагент)
					+ СтрокаДоговоров + """. ";
			Иначе
				СтрокаСодержание = СтрокаСодержание + " """ + ДокументСсылка.Контрагент + """. ";
			КонецЕсли;
		Иначе
			СтрокаСодержание = МетаданныеДокумента.Синоним + " (оплата от покупателя). ";
		КонецЕсли;

	ИначеЕсли ВидОперации = "ВозвратОтПодотчетногоЛица" Тогда

		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеДенежныхДокументов") Тогда
			СтрокаСодержание = "Поступление денежных документов: принято от подотчетного лица " + ДокументСсылка.Контрагент + ". ";
		Иначе
			СтрокаСодержание = "Поступление в кассу: возврат аванса подотчетным лицом " + ДокументСсылка.Контрагент + ". ";
		КонецЕсли;

	ИначеЕсли ВидОперации = "ВозвратОтПоставщика" Тогда

		Если Не МетаданныеДокумента.ТабличныеЧасти.Найти("РасшифровкаПлатежа") = Неопределено Тогда
			Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
				СтрокаСодержание = "Поступление в кассу: возврат денежных средств поставщиком";
			Иначе
				СтрокаСодержание = "Поступление на р/с: возврат денежных средств поставщиком";
			КонецЕсли;
			Если ДокументСсылка.РасшифровкаПлатежа.Количество() = 1 Тогда
				СтрокаСодержание = СтрокаСодержание + " """
					+ НаименованиеКонтрагентаНаПечать(ДокументСсылка.Контрагент) + """ по договору """
					+ ДокументСсылка.РасшифровкаПлатежа[0].ДоговорКонтрагента + """. ";
			ИначеЕсли ДокументСсылка.РасшифровкаПлатежа.Количество() > 1 Тогда
				СтрокаДоговоров = "";
				МассивДоговоров = ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(
					ДокументСсылка.РасшифровкаПлатежа.ВыгрузитьКолонку("ДоговорКонтрагента"));
				Для каждого Договор Из МассивДоговоров Цикл
					СтрокаДоговоров = СтрокаДоговоров + ?(ПустаяСтрока(СтрокаДоговоров), "", """, """) + Договор;
				КонецЦикла;
				СтрокаДоговоров = ?(МассивДоговоров.Количество() > 1, """ по договорам """, """ по договору """) + СтрокаДоговоров;
				СтрокаСодержание = СтрокаСодержание + " """
					+ НаименованиеКонтрагентаНаПечать(ДокументСсылка.Контрагент) + СтрокаДоговоров + """.";
			Иначе
				СтрокаСодержание = СтрокаСодержание + " """ + ДокументСсылка.Контрагент + """. ";
			КонецЕсли;
		Иначе
			СтрокаСодержание = МетаданныеДокумента.Синоним + " (возврат денежных средств поставщиком). ";
		КонецЕсли;

	ИначеЕсли (ВидОперации = "ВыручкаККМ") ИЛИ (ВидОперации = "ВыручкаСНТТ") Тогда

		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
			СтрокаСодержание = "Поступление в кассу: выручка в торговой точке  " + ДокументСсылка.Контрагент + ". ";
		Иначе
			СтрокаСодержание = МетаданныеДокумента.Синоним + ". ";
		КонецЕсли;

	ИначеЕсли ВидОперации = "ВыдачаПодотчетномуЛицу" Тогда

		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
			СтрокаСодержание = "Выдача из кассы: выдано под отчет сотруднику " + ДокументСсылка.Контрагент + ". ";
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ВыдачаДенежныхДокументов") Тогда
			СтрокаСодержание = "Выдача денежных документов: выдано под отчет сотруднику " + ДокументСсылка.Контрагент + ". ";
		ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("ФизЛицо", МетаданныеДокумента) Тогда
			СтрокаСодержание = "Списание с р/с: перечислено под отчет сотруднику " + ДокументСсылка.ФизЛицо + ". ";
		Иначе
			СтрокаСодержание = МетаданныеДокумента.Синоним + " (выдача под отчет сотруднику). ";
		КонецЕсли;

	ИначеЕсли ВидОперации = "ВыплатаЗП" Тогда
		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
			СтрокаСодержание = "Выдача из кассы: выплата заработной платы по ведомости. ";
		Иначе
			СтрокаСодержание = "Списание с р/с: перечисление заработной платы. ";
		КонецЕсли;

	ИначеЕсли ВидОперации = "ВыплатаЗПРаботнику" Тогда
		
		СтрокаСодержание = "Выдача из кассы: выплата заработной платы работнику " + ДокументСсылка.Контрагент + ". ";

	ИначеЕсли ВидОперации = "ВыплатаДепонентов" Тогда

		СтрокаСодержание = "Выдача из кассы: выплата депонированной заработной платы. ";

	ИначеЕсли ВидОперации = "ПеречислениеНалога" Или ВидОперации = "УплатаНалогаПоКвитанции" Тогда
		
		НазначениеПлатежа = Справочники.ВидыНалоговИПлатежейВБюджет.НазначениеПлатежа(ДокументСсылка.Налог,, ДокументСсылка.Организация);
		СтрокаСодержание = ?(Не ПустаяСтрока(НазначениеПлатежа), НазначениеПлатежа, НСтр("ru = 'Уплата налога'"));
		
	ИначеЕсли ВидОперации = "ВозвратПокупателю" Тогда

		Если Не МетаданныеДокумента.ТабличныеЧасти.Найти("РасшифровкаПлатежа") = Неопределено Тогда
			Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
				СтрокаСодержание = "Выдача из кассы: возврат денежных средств покупателю";
			Иначе
				СтрокаСодержание = "Списание с р/с: возврат денежных средств покупателю";
			КонецЕсли;
			Если ДокументСсылка.РасшифровкаПлатежа.Количество() = 1 Тогда
				СтрокаСодержание = СтрокаСодержание + " """
					+ НаименованиеКонтрагентаНаПечать(ДокументСсылка.Контрагент) + """ по договору """
					+ ДокументСсылка.РасшифровкаПлатежа[0].ДоговорКонтрагента + """. ";
			ИначеЕсли ДокументСсылка.РасшифровкаПлатежа.Количество() > 1 Тогда
				СтрокаДоговоров = "";
				МассивДоговоров = ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(
					ДокументСсылка.РасшифровкаПлатежа.ВыгрузитьКолонку("ДоговорКонтрагента"));
				Для каждого Договор Из МассивДоговоров Цикл
					СтрокаДоговоров = СтрокаДоговоров + ?(ПустаяСтрока(СтрокаДоговоров), "", """, """) + Договор;
				КонецЦикла;
				СтрокаДоговоров = ?(МассивДоговоров.Количество() > 1, """ по договорам """, """ по договору """) + СтрокаДоговоров;
				СтрокаСодержание = СтрокаСодержание + " """
					+ НаименованиеКонтрагентаНаПечать(ДокументСсылка.Контрагент)
					+ СтрокаДоговоров + """.";
			Иначе
				СтрокаСодержание = СтрокаСодержание + " """ + ДокументСсылка.Контрагент + """. ";
			КонецЕсли;
		Иначе
			СтрокаСодержание = МетаданныеДокумента.Синоним + " (возврат денежных средств покупателю). ";
		КонецЕсли;

	ИначеЕсли ВидОперации = "РеализацияУслуг" Тогда

		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
			СтрокаСодержание = "Оказание производственных услуг; контрагент """
				+ НаименованиеКонтрагентаНаПечать(ДокументСсылка.Контрагент) + """ по договору """ + ДокументСсылка.ДоговорКонтрагента + """. ";
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПередачаНМА") Тогда
			СтрокаСодержание = "Передача нематериальных активов контрагенту """ + НаименованиеКонтрагентаНаПечать(ДокументСсылка.Контрагент)
				+ """ по договору """ +	ДокументСсылка.ДоговорКонтрагента +	""". ";
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОказаниеУслуг") Тогда
			СтрокаСодержание = "Реализация услуг """ + НаименованиеКонтрагентаНаПечать(ДокументСсылка.Номенклатура) + """ списку контрагентов. ";
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПередачаОС") Тогда
			СтрокаСодержание = "Передача основных средств контрагенту """ + НаименованиеКонтрагентаНаПечать(ДокументСсылка.Контрагент)
				+ """ по договору """ +	ДокументСсылка.ДоговорКонтрагента +	""". ";
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РеализацияУслугПоПереработке") Тогда
			СтрокаСодержание = "Реализация услуг по переработке; контрагент """ + НаименованиеКонтрагентаНаПечать(ДокументСсылка.Контрагент)
				+ """ по договору """ + ДокументСсылка.ДоговорКонтрагента +	""". ";
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")  Тогда
			СтрокаСодержание = "Оказание посреднических услуг в торговле (комиссионное вознаграждение); комитент """
				+ НаименованиеКонтрагентаНаПечать(ДокументСсылка.Контрагент)
				+ """ по договору """ + ДокументСсылка.ДоговорКонтрагента +	""". ";
		Иначе
			СтрокаСодержание = МетаданныеДокумента.Синоним + ". ";
		КонецЕсли;

	ИначеЕсли ВидОперации = "ВозвратПоставщику" Тогда

		СтрокаСодержание = "Возврат товаров поставщику """ + НаименованиеКонтрагентаНаПечать(ДокументСсылка.Контрагент)
		+ """ по договору """ + ДокументСсылка.ДоговорКонтрагента +	""". ";

	ИначеЕсли ВидОперации = "НачислениеЗП" Тогда

		СтрокаСодержание = "Начисление заработной платы и налогов с ФОТ за " + Формат(СтруктураШапкиДокумента.ПериодРегистрации,"ДФ=""ММММ гггг""") + ". ";

	ИначеЕсли (ВидОперации = "УслугаКомиссионера")
		ИЛИ (ВидОперации = "ЗачетВознагражденияКомиссионера")
		ИЛИ (ВидОперации = "ЗачетВознагражденияКомиссионераНДС") Тогда

		СтрокаСодержание = "Отчет комиссионера """ + НаименованиеКонтрагентаНаПечать(ДокументСсылка.Контрагент)
			+ """ по договору """ + ДокументСсылка.ДоговорКонтрагента +	"""; ";
		Если ВидОперации = "ЗачетВознагражденияКомиссионера" Тогда
			СтрокаСодержание = СтрокаСодержание + "вознаграждение комиссионера зачтено из выручки от реализации. ";
		ИначеЕсли ВидОперации = "ЗачетВознагражденияКомиссионераНДС" Тогда
			СтрокаСодержание = СтрокаСодержание + "НДС с вознаграждения комиссионера зачтен из выручки от реализации. ";
		Иначе
			СтрокаСодержание = СтрокаСодержание + "оказаны посреднические услуги в торговле. "
		КонецЕсли;

	ИначеЕсли ВидОперации = "РеализацияКомиссионером" Тогда

		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
			СтрокаСодержание = "Отчет комиссионера """ + НаименованиеКонтрагентаНаПечать(ДокументСсылка.Контрагент)
				+ """ по договору """ +	ДокументСсылка.ДоговорКонтрагента +	"""; реализованы товары. ";
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") Тогда
			СтрокаСодержание = "Реализованы товары, отгруженные """ + НаименованиеКонтрагентаНаПечать(ДокументСсылка.Контрагент)
				+ """ по договору """ +	ДокументСсылка.ДоговорКонтрагента +	""". ";
		КонецЕсли;

	ИначеЕсли ВидОперации = "Розница" Тогда

		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
			СтрокаСодержание = "Продажа в розницу в торговой точке " + ДокументСсылка.Склад + ". ";
		КонецЕсли;

	ИначеЕсли ВидОперации = "ВПереработку" Тогда

		СтрокаСодержание = "Передача материалов в переработку """ + НаименованиеКонтрагентаНаПечать(ДокументСсылка.Контрагент)
			+ """ по договору """ + ДокументСсылка.ДоговорКонтрагента + """. ";

	ИначеЕсли ВидОперации = "УслугаПоПереработке" Тогда

		СтрокаСодержание = "Поступление из переработки; контрагентом """ + НаименованиеКонтрагентаНаПечать(ДокументСсылка.Контрагент)
			+ """ оказаны услуги по переработке, договор """ + ДокументСсылка.ДоговорКонтрагента + """. ";

	ИначеЕсли ВидОперации = "ИзПереработки" Тогда

		СтрокаСодержание = "Поступление из переработки; списаны материалы, переданные в переработку контрагенту """
			+ НаименованиеКонтрагентаНаПечать(ДокументСсылка.Контрагент) + """ по договору """ + ДокументСсылка.ДоговорКонтрагента + """. ";

	ИначеЕсли ВидОперации = "Реализация" Тогда

		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			Если ДокументСсылка.Услуги.Количество() = 0 Тогда
				СтрокаСодержание = "Реализация товаров покупателю """ + НаименованиеКонтрагентаНаПечать(ДокументСсылка.Контрагент)
					+ """ по договору """ + ДокументСсылка.ДоговорКонтрагента +	""". ";
			ИначеЕсли ДокументСсылка.Товары.Количество() = 0 Тогда
				СтрокаСодержание = "Реализация услуг покупателю """ + НаименованиеКонтрагентаНаПечать(ДокументСсылка.Контрагент)
					+ """ по договору """ + ДокументСсылка.ДоговорКонтрагента +	""". ";
			Иначе
				СтрокаСодержание = "Реализация товаров и услуг покупателю """ + НаименованиеКонтрагентаНаПечать(ДокументСсылка.Контрагент)
					+ """ по договору """ +	ДокументСсылка.ДоговорКонтрагента +	""". ";
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли ВидОперации = "Списание" Тогда

		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.СписаниеТоваров") Тогда
			СтрокаСодержание = "Списание МПЗ со склада """ + ДокументСсылка.Склад + """ на недостачи и потери от порчи ценностей. ";
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПередачаМатериаловВЭксплуатацию") Тогда
			СтрокаСодержание = "Передача материалов в эксплуатацию со склада """ + ДокументСсылка.Склад + """. ";
		ИначеЕсли (ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ТребованиеНакладная")) Тогда
			СтрокаСодержание = "Требование накладная на списание материалов со склада """ + ДокументСсылка.Склад + """";
			Если Не ДокументСсылка.СчетаУчетаЗатратВТаблице Тогда
				СтрокаСодержание = СтрокаСодержание + "; счет затрат " + ДокументСсылка.СчетЗатрат.Код + " """ +
				ДокументСсылка.СчетЗатрат.Наименование + """";
			КонецЕсли;
			СтрокаСодержание = СтрокаСодержание + ". ";
		ИначеЕсли (ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену")) Тогда
			СтрокаСодержание = "Требование накладная на списание материалов со склада """ + ДокументСсылка.Склад + """";
			СтрокаСодержание = СтрокаСодержание + "; счет затрат " + ДокументСсылка.СчетЗатрат.Код + " """ +
				ДокументСсылка.СчетЗатрат.Наименование + """";
			СтрокаСодержание = СтрокаСодержание + ". ";
		КонецЕсли;

	ИначеЕсли ВидОперации = "ПереносЗадолженности" Тогда
		СтрокаСодержание = "Перенос задолженности контрагента """ + НаименованиеКонтрагентаНаПечать(ДокументСсылка.КонтрагентДебитор) + """. "

	ИначеЕсли ВидОперации = "ПроведениеВзаимозачетаДебитор" Тогда
		СтрокаСодержание = "Проведение взаимозачета между """ + НаименованиеКонтрагентаНаПечать(ДокументСсылка.КонтрагентДебитор)
			+ """(дебитор) и """ + НаименованиеКонтрагентаНаПечать(ДокументСсылка.КонтрагентКредитор) + """(кредитор); по дебиторской задолженности. ";

	ИначеЕсли ВидОперации = "ПроведениеВзаимозачетаКредитор" Тогда
		СтрокаСодержание = "Проведение взаимозачета между """ + НаименованиеКонтрагентаНаПечать(ДокументСсылка.КонтрагентДебитор)
			+ """(дебитор) и """ + НаименованиеКонтрагентаНаПечать(ДокументСсылка.КонтрагентКредитор) + """(кредитор); по кредиторской задолженности. ";

	ИначеЕсли ВидОперации = "СписаниеДебиторскойЗадолженности" Тогда
		СтрокаСодержание = "Списание дебиторской задолженности контрагента """ + НаименованиеКонтрагентаНаПечать(ДокументСсылка.КонтрагентДебитор) + """. ";

	ИначеЕсли ВидОперации = "СписаниеКредиторскойЗадолженности" Тогда
		СтрокаСодержание = "Списание кредиторской задолженности контрагента """ + НаименованиеКонтрагентаНаПечать(ДокументСсылка.КонтрагентДебитор) + """. "

	ИначеЕсли ВидОперации = "ГТД" Тогда
		НомерГТД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураШапкиДокумента.Ссылка, "НомерГТД");
		СтрокаСодержание = "Ввоз ТМЦ по ГТД № " + НомерГТД + """. ";

	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(СтрокаСодержание) Тогда
		СтрокаСодержание = МетаданныеДокумента.Синоним + ". ";
	КонецЕсли;

	Возврат СтрокаСодержание;

КонецФункции

//Возвращает представление вида операции платежного документа
//
Функция ВидОперацииДДС(СтруктураШапкиДокумента) Экспорт

	ПредставлениеВида = "";
	ВидОперации = СтруктураШапкиДокумента.ВидОперации;
	МетаданныеДокумента = СтруктураШапкиДокумента.Ссылка.Метаданные();

	Если (ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам) Тогда

		ПредставлениеВида = "ОплатаОтПокупателя";

	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка) Тогда

		ПредставлениеВида = "ВыручкаККМ";
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВыручкаСНТТ", МетаданныеДокумента) Тогда
			ПредставлениеВида = ?(СтруктураШапкиДокумента.Ссылка.ВыручкаСНТТ, "ВыручкаСНТТ", "ВыручкаККМ");
		КонецЕсли;

	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю) Тогда

		ПредставлениеВида = "ВозвратПокупателю";

	ИначеЕсли СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСНДоходы Тогда
		//При объекте "Доходы" для всех операций, кроме расчетов с покупателями, используются реквизиты платежного документа
		ПредставлениеВида = "ПрочееДДС";

	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПодотчетногоЛица) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхДокументов.ПоступлениеОтПодотчетногоЛица) Тогда

		ПредставлениеВида = "ВозвратОтПодотчетногоЛица";

	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика) Тогда

		ПредставлениеВида = "ВозвратОтПоставщика";

	ИначеЕсли
		(ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхДокументов.ПрочееПоступление) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийВыдачаДенежныхДокументов.ПрочаяВыдача) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхДокументов.ПоступлениеОтПоставщика) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийВыдачаДенежныхДокументов.ВозвратПоставщику) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийПКО.ПрочийПриход) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймам) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийРКО.ПрочийРасход) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание) Тогда

		ПредставлениеВида = "ПрочееДДС";

	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику) Тогда

		ПредставлениеВида = "Оплата";

	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаПодотчетномуЛицу) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийВыдачаДенежныхДокументов.ВыдачаПодотчетномуЛицу) Тогда

		ПредставлениеВида = "ВыдачаПодотчетномуЛицу";

	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП) Тогда

		ПредставлениеВида = "ВыплатаЗП";

	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику) Тогда

		ПредставлениеВида = "ВыплатаЗПРаботнику";

	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов) ИЛИ 
		(ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДепонентов) Тогда

		ПредставлениеВида = "ВыплатаДепонентов";

	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.УплатаНалога) Тогда
		
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СчетУчетаРасчетовСКонтрагентом", МетаданныеДокумента)
			И (ЗначениеЗаполнено(СтруктураШапкиДокумента.Ссылка.СчетУчетаРасчетовСКонтрагентом)) Тогда
			
			СчетНалога = СтруктураШапкиДокумента.Ссылка.СчетУчетаРасчетовСКонтрагентом;
			
			СчетаНалоговИВзносов  = УчетУСНВызовСервераПовтИсп.СчетаУчетаАвтоначисляемыхНалоговВключаемыхВРасходы();
			
			ЭтоНалогИлиВзнос  = СчетаНалоговИВзносов.Найти(СчетНалога) <> Неопределено;
			
			ПлатежУчитываетсяВРасходах = Ложь;
			Если ЭтоНалогИлиВзнос Тогда
				
				Если (ОбщегоНазначения.ЕстьРеквизитОбъекта("СубконтоДт1", МетаданныеДокумента)
					И ЗначениеЗаполнено(СтруктураШапкиДокумента.Ссылка.СубконтоДт1)
					И ТипЗнч(СтруктураШапкиДокумента.Ссылка.СубконтоДт1) = Тип("ПеречислениеСсылка.ВидыПлатежейВГосБюджет")) Тогда
				
					ВидыНалоговыхПлатежей = УчетУСНВызовСервераПовтИсп.ВидыПлатежейВГосБюджетНалоговые();
					ПлатежУчитываетсяВРасходах = ВидыНалоговыхПлатежей.Найти(СтруктураШапкиДокумента.Ссылка.СубконтоДт1) <> Неопределено;
					
				Иначе
					// Уплата НДС налоговым агентом (счет 68.32)
					ПлатежУчитываетсяВРасходах = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ ЭтоНалогИлиВзнос ИЛИ НЕ ПлатежУчитываетсяВРасходах Тогда
				ПредставлениеВида = "ПрочееДДС";
			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.УплатаНалога Тогда
				ПредставлениеВида = "УплатаНалогаПоКвитанции";
			Иначе
				ПредставлениеВида = "ПеречислениеНалога";
			КонецЕсли;
			
		КонецЕсли;
	Иначе

		ПредставлениеВида = "НеОтражатьВНУ";

	КонецЕсли;

	Возврат ПредставлениеВида;

КонецФункции

// Преобразует таблицу значений в таблицу со вложенными таблицами, группируя значения по колонкам, формирование итога по строкам
Функция ТаблицуЗначенийВТаблицуСГруппировкой(ТаблицаРезультатов, знач ГруппировочныеКолонки= "",знач КолонкиИтогов = "", ВидОперации) Экспорт

	ИтоговаяТаблица  = Новый ТаблицаЗначений();
	ПромежуточнаяТаблица = Новый ТаблицаЗначений();
	Для каждого Колонка из ТаблицаРезультатов.Колонки Цикл
		ИтоговаяТаблица.Колонки.Добавить(Колонка.Имя,Колонка.ТипЗначения,Колонка.Заголовок,Колонка.Ширина);
		ПромежуточнаяТаблица.Колонки.Добавить(Колонка.Имя,Колонка.ТипЗначения,Колонка.Заголовок,Колонка.Ширина);
	КонецЦикла;
	ИтоговаяТаблица.Колонки.Добавить("Строки");

	//Если ПустаяСтрока(ГруппировочныеКолонки) Тогда
	//	Для каждого СтрокаТаблицы Из ТаблицаРезультатов Цикл
	//		СтрокаДерева = ИтоговаяТаблица.Добавить();

	//		ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаТаблицы);

	//	КонецЦикла;
	//
	//	Возврат ИтоговаяТаблица;
	//КонецЕсли;

	ТаблицаГруппировок = ТаблицаРезультатов.Скопировать();
	ТаблицаГруппировок.Свернуть(ГруппировочныеКолонки,КолонкиИтогов);

	Для каждого СтрокаТаблицы Из ТаблицаГруппировок Цикл
		СтрокаДерева = ИтоговаяТаблица.Добавить();

		ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаТаблицы);

	КонецЦикла;

	ЗначенияОтбора = Новый Структура(ГруппировочныеКолонки);
	Если НЕ ПустаяСтрока(ГруппировочныеКолонки) Тогда
		ТаблицаРезультатов.Индексы.Добавить(ГруппировочныеКолонки);
	КонецЕсли;
	Для каждого СтрокаДерева из ИтоговаяТаблица Цикл
		//Формирование структуры отбора
		Для каждого ПараметрОтбора Из ЗначенияОтбора Цикл
			ЗначенияОтбора.Вставить(ПараметрОтбора.Ключ, СтрокаДерева[ПараметрОтбора.Ключ]);
		КонецЦикла;
		ПромежуточнаяТаблица.Очистить();
		//Поиск и заполнение подчиненными колонками
		Если ЗначенияОтбора.Количество() > 0 Тогда
			МассивПодчиненныхСтрок = ТаблицаРезультатов.НайтиСтроки(ЗначенияОтбора);
		Иначе
			МассивПодчиненныхСтрок = ТаблицаРезультатов;
		КонецЕсли;
		Для каждого СтрокаТаблицы Из МассивПодчиненныхСтрок Цикл
			ПодчиненнаяСтрокаДерева = ПромежуточнаяТаблица.Добавить();

			ЗаполнитьЗначенияСвойств(ПодчиненнаяСтрокаДерева, СтрокаТаблицы);

		КонецЦикла;
		СтрокаДерева.Строки = ПромежуточнаяТаблица.Скопировать();
	КонецЦикла;

	Возврат ИтоговаяТаблица;
КонецФункции

Функция ПодготовитьТаблицуПартий(ТаблицаТМЦ, ВидОперации)

	ТаблицаПартий = Новый ТаблицаЗначений;

	ТаблицаПартий.Колонки.Добавить("Номенклатура");
	ТаблицаПартий.Колонки.Добавить("СчетУчета");
	ТаблицаПартий.Колонки.Добавить("Склад");
	ТаблицаПартий.Колонки.Добавить("ДокументОприходования");
	ТаблицаПартий.Колонки.Добавить("Количество");

	Если (ВидОперации = "Перемещение")
		ИЛИ (ВидОперации = "Комплектация")
		ИЛИ (ВидОперации = "НаРеализацию")
		ИЛИ (ВидОперации = "ВПереработку")
		ИЛИ (ВидОперации = "ВозвратСРеализации")
		ИЛИ (ВидОперации = "ВозвратИзПереработки") Тогда

		ТаблицаПартий.Колонки.Добавить("КорНоменклатура");
		ТаблицаПартий.Колонки.Добавить("КорСчетУчета");
		ТаблицаПартий.Колонки.Добавить("КорСклад");
		ТаблицаПартий.Колонки.Добавить("КорДокументОприходования");
		ТаблицаПартий.Колонки.Добавить("КорКоличество");
	КонецЕсли;

	Если ТаблицаТМЦ = Неопределено Тогда
		Возврат ТаблицаПартий;
	КонецЕслИ;

	Для Каждого СтрокаПартии ИЗ ТаблицаТМЦ Цикл
		Если СтрокаПартии.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		СтрокаИтоговойТаблицы = ТаблицаПартий.Добавить();
		СтрокаИтоговойТаблицы.Номенклатура          = СтрокаПартии.Номенклатура;
		СтрокаИтоговойТаблицы.СчетУчета             = СтрокаПартии.СчетУчета;
		СтрокаИтоговойТаблицы.Склад                 = СтрокаПартии.Склад;
		СтрокаИтоговойТаблицы.ДокументОприходования = СтрокаПартии.Партия;
		СтрокаИтоговойТаблицы.Количество            = СтрокаПартии.Количество;

		Если (ВидОперации = "Перемещение")
				ИЛИ (ВидОперации = "Комплектация")
				ИЛИ (ВидОперации = "НаРеализацию")
				ИЛИ (ВидОперации = "ВПереработку")
				ИЛИ (ВидОперации = "ВозвратСРеализации")
				ИЛИ (ВидОперации = "ВозвратИзПереработки") Тогда

			СтрокаИтоговойТаблицы.КорСчетУчета = СтрокаПартии.КорСчетСписания;

			Если (ВидОперации = "Комплектация") Тогда
				СтрокаИтоговойТаблицы.КорНоменклатура          = СтрокаПартии.КорСубконто1;
				СтрокаИтоговойТаблицы.КорДокументОприходования = СтрокаПартии.КорСубконто3;
				СтрокаИтоговойТаблицы.КорКоличество            = СтрокаПартии.КоличествоДт;
			Иначе
				СтрокаИтоговойТаблицы.КорНоменклатура          = СтрокаПартии.Номенклатура;
				СтрокаИтоговойТаблицы.КорДокументОприходования = СтрокаПартии.Партия;
				СтрокаИтоговойТаблицы.КорКоличество            = СтрокаПартии.Количество;
			КонецЕсли;

			Если (ВидОперации = "Перемещение") Тогда
				СтрокаИтоговойТаблицы.КорСклад = СтрокаПартии.КорСубконто2;
			ИначеЕсли (ВидОперации = "ВозвратСРеализации")
					ИЛИ (ВидОперации = "ВозвратИзПереработки") Тогда
				СтрокаИтоговойТаблицы.КорСклад = СтрокаПартии.Склад;
			Иначе
				СтрокаИтоговойТаблицы.КорСклад = Справочники.Склады.ПустаяСсылка();
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Возврат ТаблицаПартий;

КонецФункции

//Определяет долю выручки, не включаемую в доходы разделяя ее на выручку комитента
//и выручку по деятельности ЕНВД
Функция ДоляЕНВДиКомиссии(СтруктураШапкиДокумента, ТаблицаСписанныхПартий = Неопределено, ДвиженияРегистров = Неопределено, ВидОперации = "Оплата")

	ВыручкаВсего 	= 0;
	ВыручкаЕНВД 	= 0;
	ВыручкаКомиссии = 0;
	ВыручкаПатент 	= 0;

	ДокументСсылка      = СтруктураШапкиДокумента.Ссылка;
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	ИмяВидаДокумента    = МетаданныеДокумента.Имя;

	//Подменим ссылку если документ - реализация отгруженной продукции
	Если (МетаданныеДокумента.ТабличныеЧасти.Количество() = 0) И (НЕ МетаданныеДокумента.Реквизиты.Найти("ДокументОтгрузки") = Неопределено) Тогда
		Если ЗначениеЗаполнено(ДокументСсылка.ДокументОтгрузки) Тогда
			ДокументСсылка      = СтруктураШапкиДокумента.Ссылка.ДокументОтгрузки;
			МетаданныеДокумента = ДокументСсылка.Метаданные();
			ИмяВидаДокумента    = МетаданныеДокумента.Имя;
		КонецЕсли;
	КонецЕсли;

	ЕстьНДССверху = Ложь;
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СуммаВключаетНДС", МетаданныеДокумента) Тогда
		ЕстьНДССверху = НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "СуммаВключаетНДС");
	КонецЕсли;

	//В товарах

	Если (НЕ МетаданныеДокумента.ТабличныеЧасти.Найти("Товары") = НЕОПРЕДЕЛЕНО) И (НЕ ВидОперации = "РеализацияУслуг") Тогда

		//Переданные = (НЕ ТаблицаСписанныхПартий.Колонки.Найти("ДокументПередачи") = Неопределено);

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка",        ДокументСсылка);
		Запрос.УстановитьПараметр("Организация",   СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("ЕстьНДССверху", ЕстьНДССверху);

		Текст =
		"ВЫБРАТЬ
		|	СУММА(ТаблицаТовары.Количество) КАК Количество,
		|	ТаблицаТовары.СчетДоходов,
		|	СУММА(ТаблицаТовары.Сумма + ВЫБОР
		|			КОГДА &ЕстьНДССверху = ИСТИНА
		|				ТОГДА ТаблицаТовары.СуммаНДС
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Сумма,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.СчетУчета
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.СчетДоходов,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.СчетУчета";

		Запрос.Текст = СтрЗаменить(Текст, "РеализацияТоваровУслуг", ИмяВидаДокумента);

		ТаблицаРезультата = Запрос.Выполнить().Выгрузить();

		Для Каждого Строка Из ТаблицаРезультата Цикл
			Если НЕ (Строка.СчетУчета.Забалансовый) Тогда
				Если БухгалтерскийУчетВызовСервераПовтИсп.СчетОтноситсяКДеятельностиЕНВД(Строка.СчетДоходов) Тогда
					ВыручкаЕНВД = ВыручкаЕНВД + Строка.Сумма;
				КонецЕсли;
				Продолжить;
			Иначе
				ВыручкаКомиссии = ВыручкаКомиссии + Строка.Сумма;
			КонецЕсли;
		КонецЦикла;

		ВыручкаВсего = ВыручкаВсего + ТаблицаРезультата.Итог("Сумма");
	КонецЕсли;

	//В услугах
	Если ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("СчетДоходов", МетаданныеДокумента, "Услуги") Тогда

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка",        ДокументСсылка);
		Запрос.УстановитьПараметр("ЕстьНДССверху", ЕстьНДССверху);
		//Всего = 0;

		Текст = 
		"ВЫБРАТЬ
		|	ТаблицаУслуги.СчетДоходов,
		|	СУММА(ТаблицаУслуги.Сумма + ВЫБОР
		|			КОГДА &ЕстьНДССверху = ИСТИНА
		|				ТОГДА ТаблицаУслуги.СуммаНДС
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Сумма
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Услуги КАК ТаблицаУслуги
		|ГДЕ
		|	ТаблицаУслуги.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаУслуги.СчетДоходов";

		Запрос.Текст = СтрЗаменить(Текст, "РеализацияТоваровУслуг", ИмяВидаДокумента);

		ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
		ВыручкаВсего = ВыручкаВсего + ТаблицаРезультата.Итог("Сумма");

		Для Каждого СтрокаСчета Из ТаблицаРезультата Цикл
			Если БухгалтерскийУчетВызовСервераПовтИсп.СчетОтноситсяКДеятельностиЕНВД(СтрокаСчета.СчетДоходов) Тогда
				ВыручкаЕНВД = ВыручкаЕНВД + СтрокаСчета.Сумма;
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

	//В агентских услугах
	Если ОбщегоНазначенияБП.ЕстьТабЧастьДокумента("АгентскиеУслуги", МетаданныеДокумента) Тогда

		СуммаАгентскихУслуг = ДокументСсылка.АгентскиеУслуги.Итог("Сумма")
			+ ?(ЕстьНДССверху, ДокументСсылка.АгентскиеУслуги.Итог("СуммаНДС"), 0);
		
		ВыручкаКомиссии = ВыручкаКомиссии + СуммаАгентскихУслуг;
		ВыручкаВсего	= ВыручкаВсего + СуммаАгентскихУслуг;

	КонецЕсли;

	//В документе "Оказание услуг" - оказание услуг списку контрагентов
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СчетДоходов", МетаданныеДокумента)
		И (НЕ МетаданныеДокумента.ТабличныеЧасти.Найти("Контрагенты") = НЕОПРЕДЕЛЕНО) Тогда

		ВыручкаВсего = ВыручкаВсего + ДокументСсылка.Контрагенты.Итог("Сумма")
			+ ?(ЕстьНДССверху, ДокументСсылка.Контрагенты.Итог("СуммаНДС"), 0);
		Если БухгалтерскийУчетВызовСервераПовтИсп.СчетОтноситсяКДеятельностиЕНВД(ДокументСсылка.СчетДоходов) Тогда
			ВыручкаЕНВД = ВыручкаВсего;
		КонецЕсли;

	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ДеятельностьНаПатенте", МетаданныеДокумента)
		И (ДокументСсылка.ДеятельностьНаПатенте) Тогда
		
		ВыручкаПатент = ВыручкаВсего - ВыручкаКомиссии;
		ВыручкаЕНВД   = 0;
		
	КонецЕсли;
	
	Возврат Новый Структура("Всего, ЕНВД, Комиссия, Патент", ВыручкаВсего, ВыручкаЕНВД, ВыручкаКомиссии, ВыручкаПатент);

КонецФункции

//Собирает таблицу остатков взаиморасчетов по установленным фильтрам
//Таблица фильтров содержит колонки:
// - Имя поля (строка),
// - Значение поля (произвольный),
// - Условие (строка)
Функция ВыполнитьЗапросПоВзаиморасчетамПрочееУСН(Граница, Организация, ТаблицаФильтров, ДополнитьДоходами = Ложь) Экспорт

	УстановитьБлокировкиПоТаблицеФильтров("ПрочиеРасчеты", ТаблицаФильтров,, Организация);
	ОбработатьТаблицуФильтров(ТаблицаФильтров);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Граница",	 Граница);
	Для каждого Фильтр Из ТаблицаФильтров Цикл
		Запрос.УстановитьПараметр(Фильтр.ИмяПоля,	 Фильтр.ЗначениеПоля);
	КонецЦикла;
	Текст =
	"ВЫБРАТЬ
	|	ПрочиеРасчетыОстатки.Организация,
	|	ПрочиеРасчетыОстатки.Контрагент,
	|	ПрочиеРасчетыОстатки.СчетУчета,
	|	ПрочиеРасчетыОстатки.РасчетныйДокумент КАК РасчетныйДокумент,
	|	РеквизитыДокументов.ДатаРегистратора КАК РасчетныйДокументДата,
	|	СУММА(ПрочиеРасчетыОстатки.СуммаОстаток) КАК Сумма
	|ИЗ
	|	РегистрНакопления.ПрочиеРасчеты.Остатки(&Граница, Организация = &Организация";

	Для каждого Фильтр Из ТаблицаФильтров Цикл
		Если Найти(Фильтр.Условие, "В") = 0 Тогда
			Текст = Текст + " И " + Фильтр.ИмяПоля + " " + Фильтр.Условие + " &" + Фильтр.ИмяПоля;
		Иначе
			Текст = Текст + " И " + Фильтр.ИмяПоля + " " + Фильтр.Условие + " (&" + Фильтр.ИмяПоля + ")";
		КонецЕсли;
	КонецЦикла;

	Текст = Текст + ") КАК ПрочиеРасчетыОстатки
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументов
	|	ПО ПрочиеРасчетыОстатки.Организация = РеквизитыДокументов.Организация
	|		И ПрочиеРасчетыОстатки.РасчетныйДокумент = РеквизитыДокументов.Документ
	|
	|СГРУППИРОВАТЬ ПО
	|	ПрочиеРасчетыОстатки.Организация,
	|	ПрочиеРасчетыОстатки.Контрагент,
	|	ПрочиеРасчетыОстатки.СчетУчета,
	|	ПрочиеРасчетыОстатки.РасчетныйДокумент,
	|	РеквизитыДокументов.ДатаРегистратора
	|
	|УПОРЯДОЧИТЬ ПО
	|	РасчетныйДокументДата,
	|	РасчетныйДокумент";

	Запрос.Текст = Текст;
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

//Собирает таблицу остатков расходов по установленным фильтрам
//Таблица фильтров содержит колонки:
// - Имя поля (строка),
// - Значение поля (произвольный),
// - Условие (строка)
Функция ВыполнитьЗапросПоРасходам(Граница, Организация, ТаблицаФильтров, ТаблицаБлокировок = Неопределено) Экспорт

	УстановитьБлокировкиПоТаблицеФильтров("РасходыПриУСН", ТаблицаФильтров, ТаблицаБлокировок, Организация);
	
	ОбработатьТаблицуФильтров(ТаблицаФильтров);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Граница",	 Граница);
	Для каждого Фильтр Из ТаблицаФильтров Цикл
		Запрос.УстановитьПараметр(Фильтр.ИмяПоля,	 Фильтр.ЗначениеПоля);
	КонецЦикла;
	Текст =
	"ВЫБРАТЬ
	|	РасходыУСН.Организация,
	|	РасходыУСН.ВидРасхода,
	|	РасходыУСН.ЭлементРасхода,
	|	РасходыУСН.СчетУчета,
	|	РасходыУСН.Валюта,
	|	РасходыУСН.ДоговорКонтрагента,
	|	РасходыУСН.РасчетныйДокумент КАК РасчетныйДокумент,
	|	РасходыУСН.СтатусыПартийУСН,
	|	РасходыУСН.Партия КАК Партия,
	|	РасходыУСН.ОтражениеВУСН,
	|	РасходыУСН.СтатусыОплатыРасходовУСН,
	|	РасходыУСН.СтатусыОплатыРасходовУСН.Порядок КАК СтатусыОплатыРасходовУСНПорядок,
	|	СУММА(РасходыУСН.КоличествоОстаток) КАК Количество,
	|	СУММА(РасходыУСН.СуммаОстаток) КАК Сумма,
	|	СУММА(РасходыУСН.НДСОстаток) КАК НДС,
	|	РасходыУСН.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	РасходыУСН.РеквизитыДокументаОплаты КАК РеквизитыДокументаОплаты,
	|	РеквизитыПартий.ДатаРегистратора КАК ПартияДата,
	|	РеквизитыРасчетныхДокументов.ДатаРегистратора КАК РасчетныйДокументДата
	|ИЗ
	|	РегистрНакопления.РасходыПриУСН.Остатки(&Граница, Организация = &Организация";

	Для каждого Фильтр Из ТаблицаФильтров Цикл
		Если Найти(Фильтр.Условие, "В") = 0 Тогда
			Текст = Текст + " И " + Фильтр.ИмяПоля + " " + Фильтр.Условие + " &" + Фильтр.ИмяПоля;
		Иначе
			Текст = Текст + " И " + Фильтр.ИмяПоля + " " + Фильтр.Условие + " (&" + Фильтр.ИмяПоля + ")";
		КонецЕсли;
	КонецЦикла;

	Текст = Текст + ") КАК РасходыУСН
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыРасчетныхДокументов
	|	ПО РасходыУСН.Организация = РеквизитыРасчетныхДокументов.Организация
	|		И РасходыУСН.РасчетныйДокумент = РеквизитыРасчетныхДокументов.Документ
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыПартий
	|	ПО РасходыУСН.Организация = РеквизитыПартий.Организация
	|		И РасходыУСН.Партия = РеквизитыПартий.Документ
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходыУСН.Организация,
	|	РасходыУСН.ВидРасхода,
	|	РасходыУСН.ЭлементРасхода,
	|	РасходыУСН.СчетУчета,
	|	РасходыУСН.Валюта,
	|	РасходыУСН.ДоговорКонтрагента,
	|	РасходыУСН.РасчетныйДокумент,
	|	РасходыУСН.СтатусыПартийУСН,
	|	РасходыУСН.Партия,
	|	РасходыУСН.ОтражениеВУСН,
	|	РасходыУСН.СтатусыОплатыРасходовУСН,
	|	РасходыУСН.НомерСтрокиДокумента,
	|	РасходыУСН.РеквизитыДокументаОплаты,
	|	РеквизитыПартий.ДатаРегистратора,
	|	РеквизитыРасчетныхДокументов.ДатаРегистратора
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтатусыОплатыРасходовУСНПорядок,
	|	ПартияДата,
	|	Партия,
	|	РасчетныйДокументДата,
	|	РасчетныйДокумент,
	|	НомерСтрокиДокумента";

	Запрос.Текст = Текст;
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

//Собирает таблицу остатков расходов по установленным фильтрам
//Остатки получаются на момент документа корректировки, при необходимости - дополняются остатками на начало года
//Остатки сортируются в "обратном" порядке, по сравнению с запросом для стандартных документов
//Таблица фильтров содержит колонки:
// - Имя поля (строка),  
// - Значение поля (произвольный),  
// - Условие (строка)
Функция ВыполнитьЗапросПоРасходамДляКорректировочныхДокументов(ДокументКорректировкиСсылка, Организация, ТаблицаФильтров, ТаблицаБлокировок = Неопределено, ДополнитьОстаткамиНаНачалоГода = Ложь) Экспорт
	
	УстановитьБлокировкиПоТаблицеФильтров("РасходыПриУСН", ТаблицаФильтров, ТаблицаБлокировок, Организация);
	ОбработатьТаблицуФильтров(ТаблицаФильтров);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ГраницаТек", Новый Граница(ДокументКорректировкиСсылка.МоментВремени(), ВидГраницы.Включая));
	Если ДополнитьОстаткамиНаНачалоГода Тогда
		Запрос.УстановитьПараметр("НачалоГода", НачалоГода(ДокументКорректировкиСсылка.Дата));
	КонецЕсли; 
	Для каждого Фильтр Из ТаблицаФильтров Цикл
		Запрос.УстановитьПараметр(Фильтр.ИмяПоля, Фильтр.ЗначениеПоля);
	КонецЦикла;
	Текст = 
	"ВЫБРАТЬ
	|	ОстаткиРасходовУСН.Организация,
	|	ОстаткиРасходовУСН.ВидРасхода,
	|	ОстаткиРасходовУСН.ЭлементРасхода,
	|	ОстаткиРасходовУСН.СчетУчета,
	|	ОстаткиРасходовУСН.Валюта,
	|	ОстаткиРасходовУСН.ДоговорКонтрагента,
	|	ОстаткиРасходовУСН.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ОстаткиРасходовУСН.СтатусыПартийУСН,
	|	ОстаткиРасходовУСН.Партия КАК Партия,
	|	ОстаткиРасходовУСН.ОтражениеВУСН,
	|	ОстаткиРасходовУСН.СтатусыОплатыРасходовУСН,
	|	ОстаткиРасходовУСН.СтатусыОплатыРасходовУСНПорядок КАК СтатусыОплатыРасходовУСНПорядок,
	|	СУММА(ОстаткиРасходовУСН.КоличествоТек) КАК Количество,
	|	СУММА(ОстаткиРасходовУСН.СуммаТек) КАК Сумма,
	|	СУММА(ОстаткиРасходовУСН.НДСТек) КАК НДС,
	|	СУММА(ОстаткиРасходовУСН.КоличествоНачалоГода) КАК КоличествоНачалоГода,
	|	СУММА(ОстаткиРасходовУСН.СуммаНачалоГода) КАК СуммаНачалоГода,
	|	СУММА(ОстаткиРасходовУСН.НДСНачалоГода) КАК НДСНачалоГода,
	|	ОстаткиРасходовУСН.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	ОстаткиРасходовУСН.РеквизитыДокументаОплаты,
	|	ЕстьNULL(ОстаткиРасходовУСН.ДокументОплатыДата, НЕОПРЕДЕЛЕНО) КАК ДокументОплатыДата,
	|	ОстаткиРасходовУСН.ПартияДата КАК ПартияДата,
	|	ОстаткиРасходовУСН.РасчетныйДокументДата КАК РасчетныйДокументДата
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасходыУСНТекущие.Организация КАК Организация,
	|		РасходыУСНТекущие.ВидРасхода КАК ВидРасхода,
	|		РасходыУСНТекущие.ЭлементРасхода КАК ЭлементРасхода,
	|		РасходыУСНТекущие.СчетУчета КАК СчетУчета,
	|		РасходыУСНТекущие.Валюта КАК Валюта,
	|		РасходыУСНТекущие.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|		РасходыУСНТекущие.РасчетныйДокумент КАК РасчетныйДокумент,
	|		РасходыУСНТекущие.СтатусыПартийУСН КАК СтатусыПартийУСН,
	|		РасходыУСНТекущие.Партия КАК Партия,
	|		РасходыУСНТекущие.ОтражениеВУСН КАК ОтражениеВУСН,
	|		РасходыУСНТекущие.СтатусыОплатыРасходовУСН КАК СтатусыОплатыРасходовУСН,
	|		РасходыУСНТекущие.СтатусыОплатыРасходовУСН.Порядок КАК СтатусыОплатыРасходовУСНПорядок,
	|		РасходыУСНТекущие.КоличествоОстаток КАК КоличествоТек,
	|		РасходыУСНТекущие.СуммаОстаток КАК СуммаТек,
	|		РасходыУСНТекущие.НДСОстаток КАК НДСТек,
	|		0 КАК КоличествоНачалоГода,
	|		0 КАК СуммаНачалоГода,
	|		0 КАК НДСНачалоГода,
	|		РасходыУСНТекущие.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|		РасходыУСНТекущие.РеквизитыДокументаОплаты КАК РеквизитыДокументаОплаты,
	|		РеквизитыДокументовОплаты.ДатаРегистратора КАК ДокументОплатыДата,
	|		РеквизитыПартий.ДатаРегистратора КАК ПартияДата,
	|		РеквизитыРасчетныхДокументов.ДатаРегистратора КАК РасчетныйДокументДата
	|	ИЗ
	|		РегистрНакопления.РасходыПриУСН.Остатки(&ГраницаТек, Организация = &Организация";
	
	Для каждого Фильтр Из ТаблицаФильтров Цикл
		Если Найти(Фильтр.Условие, "В") = 0 Тогда
			Текст = Текст + " И " + Фильтр.ИмяПоля + " " + Фильтр.Условие + " &" + Фильтр.ИмяПоля; 
		Иначе
			Текст = Текст + " И " + Фильтр.ИмяПоля + " " + Фильтр.Условие + " (&" + Фильтр.ИмяПоля + ")";
		КонецЕсли;
	КонецЦикла;
	
	Текст = Текст + ") КАК РасходыУСНТекущие
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыРасчетныхДокументов
	|		ПО РасходыУСНТекущие.Организация = РеквизитыРасчетныхДокументов.Организация
	|			И РасходыУСНТекущие.РасчетныйДокумент = РеквизитыРасчетныхДокументов.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыПартий
	|		ПО РасходыУСНТекущие.Организация = РеквизитыПартий.Организация
	|			И РасходыУСНТекущие.Партия = РеквизитыПартий.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументовОплаты
	|		ПО РасходыУСНТекущие.Организация = РеквизитыДокументовОплаты.Организация
	|			И РасходыУСНТекущие.РеквизитыДокументаОплаты = РеквизитыДокументовОплаты.Документ
	|";
	
	Если ДополнитьОстаткамиНаНачалоГода Тогда
		
		Текст = Текст + " 
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		РасходыУСННачалоГода.Организация,
		|		РасходыУСННачалоГода.ВидРасхода,
		|		РасходыУСННачалоГода.ЭлементРасхода,
		|		РасходыУСННачалоГода.СчетУчета,
		|		РасходыУСННачалоГода.Валюта,
		|		РасходыУСННачалоГода.ДоговорКонтрагента,
		|		РасходыУСННачалоГода.РасчетныйДокумент,
		|		РасходыУСННачалоГода.СтатусыПартийУСН,
		|		РасходыУСННачалоГода.Партия,
		|		РасходыУСННачалоГода.ОтражениеВУСН,
		|		РасходыУСННачалоГода.СтатусыОплатыРасходовУСН,
		|		РасходыУСННачалоГода.СтатусыОплатыРасходовУСН.Порядок,
		|		0,
		|		0,
		|		0,
		|		РасходыУСННачалоГода.КоличествоОстаток,
		|		РасходыУСННачалоГода.СуммаОстаток,
		|		РасходыУСННачалоГода.НДСОстаток,
		|		РасходыУСННачалоГода.НомерСтрокиДокумента,
		|		РасходыУСННачалоГода.РеквизитыДокументаОплаты,
		|		РеквизитыДокументовОплаты.ДатаРегистратора,
		|		РеквизитыПартий.ДатаРегистратора,
		|		РеквизитыРасчетныхДокументов.ДатаРегистратора
		|	ИЗ
		|		РегистрНакопления.РасходыПриУСН.Остатки(&НачалоГода, Организация = &Организация";
		
		Для каждого Фильтр Из ТаблицаФильтров Цикл
			Если Найти(Фильтр.Условие, "В") = 0 Тогда
				Текст = Текст + " И " + Фильтр.ИмяПоля + " " + Фильтр.Условие + " &" + Фильтр.ИмяПоля; 
			Иначе
				Текст = Текст + " И " + Фильтр.ИмяПоля + " " + Фильтр.Условие + " (&" + Фильтр.ИмяПоля + ")";
			КонецЕсли;
		КонецЦикла;
		
		Текст = Текст + ") КАК РасходыУСННачалоГода
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыРасчетныхДокументов
		|		ПО РасходыУСННачалоГода.Организация = РеквизитыРасчетныхДокументов.Организация
		|			И РасходыУСННачалоГода.РасчетныйДокумент = РеквизитыРасчетныхДокументов.Документ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыПартий
		|		ПО РасходыУСННачалоГода.Организация = РеквизитыПартий.Организация
		|			И РасходыУСННачалоГода.Партия = РеквизитыПартий.Документ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументовОплаты
		|		ПО РасходыУСННачалоГода.Организация = РеквизитыДокументовОплаты.Организация
		|			И РасходыУСННачалоГода.РеквизитыДокументаОплаты = РеквизитыДокументовОплаты.Документ
		|";
	КонецЕсли;

	Текст = Текст + ") КАК ОстаткиРасходовУСН
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиРасходовУСН.СтатусыПартийУСН,
	|	ОстаткиРасходовУСН.Партия,
	|	ОстаткиРасходовУСН.ОтражениеВУСН,
	|	ОстаткиРасходовУСН.СтатусыОплатыРасходовУСН,
	|	ОстаткиРасходовУСН.Организация,
	|	ОстаткиРасходовУСН.ЭлементРасхода,
	|	ОстаткиРасходовУСН.ВидРасхода,
	|	ОстаткиРасходовУСН.РеквизитыДокументаОплаты,
	|	ЕстьNULL(ОстаткиРасходовУСН.ДокументОплатыДата, НЕОПРЕДЕЛЕНО),
	|	ОстаткиРасходовУСН.ПартияДата,
	|	ОстаткиРасходовУСН.РасчетныйДокументДата,
	|	ОстаткиРасходовУСН.РасчетныйДокумент,
	|	ОстаткиРасходовУСН.ДоговорКонтрагента,
	|	ОстаткиРасходовУСН.Валюта,
	|	ОстаткиРасходовУСН.СчетУчета,
	|	ОстаткиРасходовУСН.СтатусыОплатыРасходовУСНПорядок,
	|	ОстаткиРасходовУСН.НомерСтрокиДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтатусыОплатыРасходовУСНПорядок УБЫВ,
	|	ПартияДата УБЫВ,
	|	Партия УБЫВ,
	|	РасчетныйДокументДата УБЫВ,
	|	РасчетныйДокумент УБЫВ,
	|	НомерСтрокиДокумента УБЫВ";
	
	Запрос.Текст = Текст;
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

//Собирает таблицы прихода и расхода в единую таблицу движений регистров
//Возвращает структуру, состоящую из трех таблиц (движения по трем регистрам
Функция СобратьТаблицыДвижений(СтруктураРасходов, ТаблицаВзаиморасчетов = Неопределено, ДопТаблицаРасходов = Неопределено, ДопСтруктураРасходов = Неопределено)

	ТаблицаКорректировкиРасход = СтруктураРасходов.ТаблицаРасход;
	ТаблицаКорректировкиПриход = СтруктураРасходов.ТаблицаПриход;
	ТаблицаПризнанныхРасходов  = СтруктураРасходов.ТаблицаПринятых;

	Если НЕ ТаблицаКорректировкиПриход.Колонки.Найти("СтатусСписания") = Неопределено Тогда
		ТаблицаКорректировкиПриход.ЗаполнитьЗначения(Перечисления.ОтражениеВУСН.ПустаяСсылка(), "СтатусСписания");
	КонецЕсли;

	Если ТаблицаВзаиморасчетов = Неопределено Тогда
		Если НЕ ДопСтруктураРасходов = Неопределено Тогда
			ТаблицаВзаиморасчетов = ДопСтруктураРасходов.ВзаиморасчетыРасход.СкопироватьКолонки();
		Иначе
			ТаблицаВзаиморасчетов = Новый ТаблицаЗначений;
		КонецЕсли;
	КонецЕсли;

	Если НЕ ДопСтруктураРасходов = Неопределено Тогда

		ТаблицаРезультат = ДопСтруктураРасходов.РасходыУСН.Скопировать();

		Для Каждого Строка Из ТаблицаКорректировкиРасход Цикл
			НоваяСтрока = ТаблицаРезультат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.ВидДвижения	 		= ВидДвиженияНакопления.Расход;
		КонецЦикла;

		Для Каждого Строка Из ДопСтруктураРасходов.КУДиР Цикл
			НоваяСтрока = ТаблицаПризнанныхРасходов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;

		Для Каждого Строка Из ДопСтруктураРасходов.ВзаиморасчетыРасход Цикл
			НоваяСтрока = ТаблицаВзаиморасчетов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;

	ИначеЕсли НЕ ДопТаблицаРасходов = Неопределено Тогда

		ТаблицаРезультат = ДопТаблицаРасходов.Скопировать();

		Если ТаблицаРезультат.Колонки.Найти("ВидДвижения") = Неопределено Тогда
			ТаблицаРезультат.Колонки.Добавить("ВидДвижения");
		КонецЕсли;

		ТаблицаРезультат.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход,"ВидДвижения");

		Для Каждого Строка Из ТаблицаКорректировкиРасход Цикл
			НоваяСтрока = ТаблицаРезультат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.ВидДвижения	 		= ВидДвиженияНакопления.Расход;
		КонецЦикла;

	Иначе

		ТаблицаРезультат = ТаблицаКорректировкиРасход.Скопировать();

		Если ТаблицаРезультат.Колонки.Найти("ВидДвижения") = Неопределено Тогда
			ТаблицаРезультат.Колонки.Добавить("ВидДвижения");
		КонецЕсли;

		ТаблицаРезультат.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход,"ВидДвижения");

	КонецЕсли;

	Для Каждого Строка Из ТаблицаКорректировкиПриход Цикл
		НоваяСтрока = ТаблицаРезультат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.ВидДвижения 		= ВидДвиженияНакопления.Приход;
	КонецЦикла;

	Возврат (Новый Структура("ВзаиморасчетыРасход, РасходыУСН, КУДиР",
								ТаблицаВзаиморасчетов, ТаблицаРезультат, ТаблицаПризнанныхРасходов));
КонецФункции

//Возвращает текущий статус отражения в НУ на основании комбинации двух статусов
//поступления и списания
Функция ПолучитьКомбинациюСтатусовОтражениеВНУ(Статус1, Статус2)

	СписокСтатусов = Новый СписокЗначений;
	СписокСтатусов.Добавить(Статус1);
	СписокСтатусов.Добавить(Статус2);

	Если НЕ СписокСтатусов.НайтиПоЗначению(Перечисления.ОтражениеВУСН.ПустаяСсылка()) = Неопределено Тогда
		Возврат Перечисления.ОтражениеВУСН.НеПринимаются;

	ИначеЕсли НЕ СписокСтатусов.НайтиПоЗначению(Перечисления.ОтражениеВУСН.НеПринимаются) = Неопределено Тогда
		Возврат Перечисления.ОтражениеВУСН.НеПринимаются;

	ИначеЕсли НЕ СписокСтатусов.НайтиПоЗначению(Перечисления.ОтражениеВУСН.Распределяются) = Неопределено Тогда
		Возврат Перечисления.ОтражениеВУСН.Распределяются;

	Иначе
		Возврат Перечисления.ОтражениеВУСН.Принимаются;
	КонецЕсли;

КонецФункции

//Получить курс по документу оплаты (используется при зачете аванса поставщику
//
Функция ОпределитьКурсПоДокументу(Договор, Сделка, РасчетныйДокумент)

	Курс = 1;

	Если НЕ ЗначениеЗаполнено(РасчетныйДокумент) Тогда
		Возврат Курс;
	Конецесли;

	Если (ТипЗнч(Договор) = Тип("СправочникСсылка.ДоговорыКонтрагентов")) И (ЗначениеЗаполнено(Договор)) Тогда

		Если Договор.РасчетыВУсловныхЕдиницах Тогда

			МетаданныеДокумента = РасчетныйДокумент.Метаданные();

			Если ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("СуммаПлатежа", МетаданныеДокумента, "РасшифровкаПлатежа") И
				ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("СуммаВзаиморасчетов", МетаданныеДокумента, "РасшифровкаПлатежа") И
				ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("ДоговорКонтрагента", МетаданныеДокумента, "РасшифровкаПлатежа") И
				ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("Сделка", МетаданныеДокумента, "РасшифровкаПлатежа") Тогда

				Сумма = 0;
				СуммаВзаиморасчетов = 0;

				Для Каждого Строка ИЗ РасчетныйДокумент.РасшифровкаПлатежа Цикл

					Если Договор = Строка.ДоговорКонтрагента И ((Сделка = Строка.Сделка) ИЛИ (Не ЗначениеЗаполнено(Строка.Сделка))) Тогда

						Сумма = Сумма + Строка.СуммаПлатежа;
						СуммаВзаиморасчетов = СуммаВзаиморасчетов + Строка.СуммаВзаиморасчетов;

					КонецЕсли;

				КонецЦикла;

				Курс = ?(СуммаВзаиморасчетов = 0, 1, Сумма/СуммаВзаиморасчетов);

			ИначеЕсли ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("Сумма", МетаданныеДокумента, "ОплатаПоставщику") И
				ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("СуммаВзаиморасчетов", МетаданныеДокумента, "ОплатаПоставщику") И
				ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("ДоговорКонтрагента", МетаданныеДокумента, "ОплатаПоставщику") И
				ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("Сделка", МетаданныеДокумента, "ОплатаПоставщику") Тогда

				Сумма = 0;
				СуммаВзаиморасчетов = 0;

				Для Каждого Строка ИЗ РасчетныйДокумент.ОплатаПоставщику Цикл

					Если Договор = Строка.ДоговорКонтрагента И ((Сделка = Строка.Сделка) ИЛИ (Не ЗначениеЗаполнено(Строка.Сделка))) Тогда

						Сумма = Сумма + Строка.Сумма;
						СуммаВзаиморасчетов = СуммаВзаиморасчетов + Строка.СуммаВзаиморасчетов;

					КонецЕсли;

				КонецЦикла;

				Курс = ?(СуммаВзаиморасчетов = 0, 1, Сумма/СуммаВзаиморасчетов);

			КонецЕсли;

		Иначе
			Курс =  ЗаполнениеДокументов.КурсДокумента(РасчетныйДокумент, Константы.ВалютаРегламентированногоУчета.Получить())/ЗаполнениеДокументов.КратностьДокумента(РасчетныйДокумент, Константы.ВалютаРегламентированногоУчета.Получить());
		КонецЕсли;

	Иначе

		Курс =  ЗаполнениеДокументов.КурсДокумента(РасчетныйДокумент, Константы.ВалютаРегламентированногоУчета.Получить())/ЗаполнениеДокументов.КратностьДокумента(РасчетныйДокумент, Константы.ВалютаРегламентированногоУчета.Получить());

	КонецЕсли;

	Возврат Курс;
КонецФункции

 //Заменяет пустые ссылки в таблице фильтров на значения "Неопределено"
//
Процедура ОбработатьТаблицуФильтров(ТаблицаФильтров)

	Для Каждого Фильтр Из ТаблицаФильтров Цикл
		Если Тип("Массив") = ТипЗнч(Фильтр.ЗначениеПоля) Тогда
			Для Каждого Элемент Из Фильтр.ЗначениеПоля Цикл
				Если НЕ ЗначениеЗаполнено(Элемент) Тогда
					Элемент = Неопределено;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Если НЕ ЗначениеЗаполнено(Фильтр.ЗначениеПоля) Тогда
				Фильтр.ЗначениеПоля = Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

//Возвращает новый статус оплаты расхода, полученный из текущего статуса
//переданным событием
Функция ПолучитьНовыйСтатусОплаты(СтруктураШапкиДокумента, Расход, ТекСтатус, Событие = "Оплата", ПризнаватьРасход = Ложь)

	НовыйСтатус = ТекСтатус;
	РасходыПоОплате = Ложь;
	РасходыПоОтгрузке = Ложь;
	Если ЗначениеЗаполнено(Расход.СчетУчета) И (Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.Номенклатура) Тогда
		ТоварыПоОплате = (СтруктураШапкиДокумента.ПорядокПризнанияРасходовПоТоварам = Перечисления.ПорядокПризнанияРасходовПоТоварам.ПоОплатеПоставщику);
		РасходыПоОтгрузке = (СтруктураШапкиДокумента.ПорядокПризнанияРасходовПоТоварам = Перечисления.ПорядокПризнанияРасходовПоТоварам.ПоФактуРеализации);
		МатериалыПоОплате = (СтруктураШапкиДокумента.ПорядокПризнанияМатериальныхРасходов = Перечисления.ПорядокПризнанияМатериальныхРасходов.ПоОплатеПоставщику);
		ЭтоТовар = ((Расход.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ТоварыОтгруженные)) ИЛИ
					(Расход.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Товары)));
		ЭтоМатериал = Расход.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Материалы);
		РасходыПоОплате = ((ТоварыПоОплате И ЭтоТовар) ИЛИ (МатериалыПоОплате И ЭтоМатериал));

	ИначеЕсли ЗначениеЗаполнено(Расход.СчетУчета)
			И (Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.ДопРасходы
				ИЛИ Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.ТаможенныеПлатежи) Тогда
				
		ТоварыПоОплате = (СтруктураШапкиДокумента.ПорядокПризнанияРасходовПоТоварам = Перечисления.ПорядокПризнанияРасходовПоТоварам.ПоОплатеПоставщику);
		МатериалыПоОплате = (СтруктураШапкиДокумента.ПорядокПризнанияМатериальныхРасходов = Перечисления.ПорядокПризнанияМатериальныхРасходов.ПоОплатеПоставщику);
		ЭтоТовар = ((Расход.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ТоварыОтгруженные)) ИЛИ
					(Расход.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Товары)));
		ЭтоМатериал = Расход.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Материалы);
		РасходыПоОплате = (ЭтоТовар И ТоварыПоОплате) ИЛИ (МатериалыПоОплате И ЭтоМатериал);

	КонецЕсли;

	Если Событие = "Оплата"
		ИЛИ Событие = "НачислениеЗП"
		ИЛИ Событие = "НачислениеСтраховыхВзносовИП"
		ИЛИ Событие = "НачислениеИмущественныхНалогов" Тогда

		Если ТекСтатус = Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено Тогда
			Если РасходыПоОплате Тогда
				Если Расход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются Тогда
					НовыйСтатус = Перечисления.СтатусыРасходовУСН.НеСписаноПринято;
					ПризнаватьРасход = Истина;
				ИначеЕсли Расход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Распределяются Тогда
					НовыйСтатус = Перечисления.СтатусыРасходовУСН.НеСписаноНеРаспределено;
				Иначе
					НовыйСтатус = Перечисления.СтатусыРасходовУСН.ПустаяСсылка();
				КонецЕсли;
			Иначе
				НовыйСтатус = Перечисления.СтатусыРасходовУСН.НеСписано;
			КонецЕсли;
		ИначеЕсли ТекСтатус = Перечисления.СтатусыРасходовУСН.НеОплаченоНеОплаченоПокупателем Тогда
			НовыйСтатус = Перечисления.СтатусыРасходовУСН.НеОплаченоПокупателем;
			Если РасходыПоОтгрузке ИЛИ РасходыПоОплате Тогда
				НовыйСтатус = Перечисления.СтатусыРасходовУСН.ПустаяСсылка();
				ПризнаватьРасход = Истина;
			КонецЕсли;
		ИначеЕсли ТекСтатус = Перечисления.СтатусыРасходовУСН.НеОплачено Тогда
			НовыйСтатус = Перечисления.СтатусыРасходовУСН.ПустаяСсылка();
			ПризнаватьРасход = Истина;
			//Если после 2006 г. отражается оплата НМА, поступивших до 2006 года.
			Если (Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.НМА) И
				(СтруктураШапкиДокумента.Дата >= Дата("20060101")) Тогда
				ПризнаватьРасход = Ложь;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли (Событие = "Списание") или (Событие = "ВозвратПоставщику") Или Событие = "КорректировкаПоступления" Тогда

		Если ТекСтатус = Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено Тогда
			НовыйСтатус = Перечисления.СтатусыРасходовУСН.НеОплачено;
		ИначеЕсли ТекСтатус = Перечисления.СтатусыРасходовУСН.НеСписано Тогда
			НовыйСтатус = Перечисления.СтатусыРасходовУСН.ПустаяСсылка();
			ПризнаватьРасход = Истина;
		ИначеЕсли ТекСтатус = Перечисления.СтатусыРасходовУСН.НеСписаноПринято Тогда
			НовыйСтатус = Перечисления.СтатусыРасходовУСН.ПустаяСсылка();
		ИначеЕсли ТекСтатус = Перечисления.СтатусыРасходовУСН.НеСписаноНеРаспределено Тогда
			НовыйСтатус = Перечисления.СтатусыРасходовУСН.НеРаспределено;
		КонецЕсли;

	ИначеЕсли (Событие = "Реализация") Или (Событие = "КорректировкаРеализации") Тогда	

		Если ТекСтатус = Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено Тогда
			Если РасходыПоОтгрузке ИЛИ РасходыПоОплате Тогда
				НовыйСтатус = Перечисления.СтатусыРасходовУСН.НеОплачено;
			Иначе
				НовыйСтатус = Перечисления.СтатусыРасходовУСН.НеОплаченоНеОплаченоПокупателем;
			КонецЕсли;
		ИначеЕсли ТекСтатус = Перечисления.СтатусыРасходовУСН.НеСписано Тогда
			Если РасходыПоОтгрузке ИЛИ РасходыПоОплате Тогда
				НовыйСтатус = Перечисления.СтатусыРасходовУСН.ПустаяСсылка();
				ПризнаватьРасход = Истина;
			Иначе
				НовыйСтатус = Перечисления.СтатусыРасходовУСН.НеОплаченоПокупателем;
			КонецЕсли;
		ИначеЕсли ТекСтатус = Перечисления.СтатусыРасходовУСН.НеСписаноПринято Тогда
			НовыйСтатус = Перечисления.СтатусыРасходовУСН.ПустаяСсылка();
		ИначеЕсли ТекСтатус = Перечисления.СтатусыРасходовУСН.НеСписаноНеРаспределено Тогда
			НовыйСтатус = Перечисления.СтатусыРасходовУСН.НеРаспределено;
		КонецЕсли;

	ИначеЕсли Событие = "Розница" Тогда

		Если ТекСтатус = Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено Тогда
			НовыйСтатус = Перечисления.СтатусыРасходовУСН.НеОплачено;
		ИначеЕсли ТекСтатус = Перечисления.СтатусыРасходовУСН.НеСписано Тогда
			НовыйСтатус = Перечисления.СтатусыРасходовУСН.ПустаяСсылка();
			ПризнаватьРасход = Истина;
		ИначеЕсли ТекСтатус = Перечисления.СтатусыРасходовУСН.НеСписаноПринято Тогда
			НовыйСтатус = Перечисления.СтатусыРасходовУСН.ПустаяСсылка();
		ИначеЕсли ТекСтатус = Перечисления.СтатусыРасходовУСН.НеСписаноНеРаспределено Тогда
			НовыйСтатус = Перечисления.СтатусыРасходовУСН.НеРаспределено;
		КонецЕсли;

	ИначеЕсли Событие = "Доход" Тогда

		Если ТекСтатус = Перечисления.СтатусыРасходовУСН.НеОплаченоНеОплаченоПокупателем Тогда
			НовыйСтатус = Перечисления.СтатусыРасходовУСН.НеОплачено;
		ИначеЕсли ТекСтатус = Перечисления.СтатусыРасходовУСН.НеОплаченоПокупателем Тогда
			НовыйСтатус = Перечисления.СтатусыРасходовУСН.ПустаяСсылка();
			ПризнаватьРасход = Истина;
		КонецЕсли;

	ИначеЕсли Событие = "РаспределениеЕНВД" Тогда

		//Если ТекСтатус = Перечисления.СтатусыРасходовУСН.НеРаспределено Тогда
			НовыйСтатус = Перечисления.СтатусыРасходовУСН.ПустаяСсылка();
			ПризнаватьРасход = Истина;
		//ИначеЕсли ТекСтатус = Перечисления.СтатусыРасходовУСН.НеСписаноНеРаспределено Тогда
		//	НовыйСтатус = Перечисления.СтатусыРасходовУСН.НеСписаноПринято;
		//КонецЕсли;

	КонецЕсли;

	Возврат НовыйСтатус;

КонецФункции

Процедура ВыделитьБезналичнуюОплату(СтруктураШапкиДокумента, ТаблицаДвижений, Выручка)

	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах Тогда
		
		СуммаБезналичнойОплаты = ТаблицаДвижений.Итог("Сумма");
		
		КоэффБН = ?(Выручка.Всего = 0, 0, СуммаБезналичнойОплаты / Выручка.Всего);
		Выручка.Всего = Выручка.Всего - СуммаБезналичнойОплаты;
		
		СуммаЕНВД_БН = Окр(КоэффБН*Выручка.ЕНВД, 2, 1);
		Выручка.ЕНВД = Выручка.ЕНВД - СуммаЕНВД_БН;
		
		СуммаКомиссии_БН = Окр(КоэффБН*Выручка.Комиссия, 2, 1);
		Выручка.Комиссия = Выручка.Комиссия - СуммаКомиссии_БН;
		
		СуммаПатент_БН = Окр(КоэффБН*Выручка.Патент, 2, 1);
		Выручка.Патент = Выручка.Патент - СуммаПатент_БН;
	
	ИначеЕсли (НЕ СтруктураШапкиДокумента.Ссылка.Метаданные().ТабличныеЧасти.Найти("Оплата") = НЕОПРЕДЕЛЕНО) Тогда
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ОтчетОРозничныхПродажахОплата.ДоговорКонтрагента,
		|	СУММА(ОтчетОРозничныхПродажахОплата.СуммаОплаты) КАК СуммаОплаты
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах.Оплата КАК ОтчетОРозничныхПродажахОплата
		|ГДЕ
		|	ОтчетОРозничныхПродажахОплата.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтчетОРозничныхПродажахОплата.ДоговорКонтрагента";

		Результат = Запрос.Выполнить().Выбрать();

		Пока Результат.Следующий() Цикл

			КоэффБН = ?(Выручка.Всего = 0, 0, Результат.СуммаОплаты / Выручка.Всего);
			Выручка.Всего = Выручка.Всего - Результат.СуммаОплаты;
			
			СуммаЕНВД_БН = Окр(КоэффБН*Выручка.ЕНВД, 2, 1);
			Выручка.ЕНВД = Выручка.ЕНВД - СуммаЕНВД_БН;
			
			СуммаКомиссии_БН = Окр(КоэффБН*Выручка.Комиссия, 2, 1);
			Выручка.Комиссия = Выручка.Комиссия - СуммаКомиссии_БН;
			
			СуммаПатент_БН = Окр(КоэффБН*Выручка.Патент, 2, 1);
			Выручка.Патент = Выручка.Патент - СуммаПатент_БН;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Процедура ВыделитьТаможенныйНДСВПринятыхРасходах(ТаблицыРасходов)

	Если ТаблицыРасходов.Свойство("ТаблицаПринятых") И ТаблицыРасходов.ТаблицаПринятых.Количество() > 0 Тогда
		
		ТаблицаЗамены = ТаблицыРасходов.ТаблицаПринятых.СкопироватьКолонки();
		
		Если ТаблицаЗамены.Колонки.Найти("ЭтоТаможенныйНДС") = Неопределено Тогда
			ТаблицаЗамены.Колонки.Добавить("ЭтоТаможенныйНДС", новый ОписаниеТипов("Булево"));
		КонецЕсли;
		
		Для каждого СтрокаПризнанногоРасхода Из ТаблицыРасходов.ТаблицаПринятых Цикл
		
			НоваяСтрокаРасхода = ТаблицаЗамены.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРасхода, СтрокаПризнанногоРасхода);
			
			Если НоваяСтрокаРасхода.ВидРасхода = Перечисления.ВидыРасходовУСН.ТаможенныеПлатежи
				И НоваяСтрокаРасхода.НДС <> 0
				И (НоваяСтрокаРасхода.Сумма - НоваяСтрокаРасхода.НДС <> 0) Тогда
			
				ПрочиеТаможенныеПлатежи = СтрокаПризнанногоРасхода.Сумма - СтрокаПризнанногоРасхода.НДС;
				
				// в текущей строке расхода оставляем только НДС
				НоваяСтрокаРасхода.Сумма			= НоваяСтрокаРасхода.НДС;
				НоваяСтрокаРасхода.НДС				= 0;
				НоваяСтрокаРасхода.ЭтоТаможенныйНДС	= Истина;
				
				// добавляем строку расхода по прочим таможенным платежам без учета НДС
				НоваяСтрокаБезНДС = ТаблицаЗамены.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаБезНДС, СтрокаПризнанногоРасхода);
				НоваяСтрокаБезНДС.Сумма				= ПрочиеТаможенныеПлатежи;
				НоваяСтрокаБезНДС.НДС				= 0;
				НоваяСтрокаБезНДС.ЭтоТаможенныйНДС	= Ложь;
			
			КонецЕсли;
		
		КонецЦикла;
		
		// заменяем таблицу принятых расходов
		ТаблицыРасходов.ТаблицаПринятых = Неопределено;
		ТаблицыРасходов.Вставить("ТаблицаПринятых", ТаблицаЗамены);
		
	КонецЕсли;

КонецПроцедуры

Процедура СкорректироватьРаспределениеПредыдущихКварталов(СтруктураШапкиДокумента, Коэфф, ТаблицаПринятых)

	ЗапросРасходы = Новый Запрос;
	ЗапросРасходы.УстановитьПараметр("НачДата", НачалоГода(СтруктураШапкиДокумента.Дата));
	ЗапросРасходы.УстановитьПараметр("КонДата", НачалоМесяца(СтруктураШапкиДокумента.Дата));
	ЗапросРасходы.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	ЗапросРасходы.УстановитьПараметр("НеРаспределено", Перечисления.СтатусыРасходовУСН.НеРаспределено);
	ЗапросРасходы.Текст =
	"ВЫБРАТЬ
	|	СУММА(РасходыПриУСНОбороты.СуммаРасход) КАК СуммаРасход,
	|	РасходыПриУСНОбороты.Валюта,
	|	РасходыПриУСНОбороты.Регистратор
	|ИЗ
	|	РегистрНакопления.РасходыПриУСН.Обороты(&НачДата, &КонДата, Регистратор, Организация = &Организация) КАК РасходыПриУСНОбороты
	|ГДЕ
	|	РасходыПриУСНОбороты.СтатусыОплатыРасходовУСН = &НеРаспределено
	|	И РасходыПриУСНОбороты.Регистратор ССЫЛКА Документ.РегламентнаяОперация
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходыПриУСНОбороты.Валюта,
	|	РасходыПриУСНОбороты.Регистратор";

	Результат = ЗапросРасходы.Выполнить().Выбрать();
	ВсегоРаспределено = 0;
	Пока Результат.Следующий() Цикл
		СуммаРасход 	= ?(НЕ ЗначениеЗаполнено(Результат.СуммаРасход), 0, Результат.СуммаРасход);
		Валюта 			= ?(НЕ ЗначениеЗаполнено(Результат.Валюта), СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, Результат.Валюта);
		Регистратор 	= ?(НЕ ЗначениеЗаполнено(Результат.Регистратор), СтруктураШапкиДокумента.Ссылка, Результат.Регистратор);
		Если Результат.Валюта = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
			ВсегоРаспределено = ВсегоРаспределено + СуммаРасход;
		Иначе
			СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, Регистратор.Дата);
			ВсегоРаспределено = ВсегоРаспределено + РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаРасход, Валюта,
																				СтруктураШапкиДокумента.ВалютаРегламентированногоУчета,
																				СтруктураКурса.Курс, 1,
																				СтруктураКурса.Кратность, 1);
		КонецЕсли;
	КонецЦикла;

	Если ВсегоРаспределено = 0 Тогда
		Возврат;
	КонецЕсли;

	ЗапросПринято = Новый Запрос;
	ЗапросПринято.УстановитьПараметр("НачДата", НачалоГода(СтруктураШапкиДокумента.Дата));
	ЗапросПринято.УстановитьПараметр("КонДата", НачалоМесяца(СтруктураШапкиДокумента.Дата));
	ЗапросПринято.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	ЗапросПринято.УстановитьПараметр("ЭтапПроведения", 2);
	ЗапросПринято.Текст =
	"ВЫБРАТЬ
	|	СУММА(КнигаУчетаДоходовИРасходов.Графа7) КАК Графа7
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходов КАК КнигаУчетаДоходовИРасходов
	|ГДЕ
	|	КнигаУчетаДоходовИРасходов.Период МЕЖДУ &НачДата И &КонДата
	|	И КнигаУчетаДоходовИРасходов.Организация = &Организация
	|	И КнигаУчетаДоходовИРасходов.Регистратор ССЫЛКА Документ.РегламентнаяОперация
	|	И КнигаУчетаДоходовИРасходов.ЭтапПроведения = &ЭтапПроведения";



	Результат = ЗапросПринято.Выполнить().Выбрать();
	ВсегоПринято = 0;
	Если Результат.Следующий() Тогда
		ВсегоПринято = ?(НЕ ЗначениеЗаполнено(Результат.Графа7), 0, Результат.Графа7);
	КонецЕсли;

	СуммаКорректировки = ВсегоРаспределено - Окр(ВсегоРаспределено*Коэфф, 2, 1) - ВсегоПринято;

	Если СуммаКорректировки <> 0 Тогда
		СтрокаРасхода 							= ТаблицаПринятых.Добавить();
		СтрокаРасхода.Организация 				= СтруктураШапкиДокумента.Организация;
		СтрокаРасхода.ОтражениеВУСН 			= Перечисления.ОтражениеВУСН.Принимаются;
		СтрокаРасхода.РасчетныйДокумент 		= СтруктураШапкиДокумента.Ссылка;
		СтрокаРасхода.Сумма 					= СуммаКорректировки;
		СтрокаРасхода.НДС 						= 0;
		СтрокаРасхода.Валюта 					= СтруктураШапкиДокумента.ВалютаРегламентированногоУчета;
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьЗаписьРасшифровки(СтруктураШапкиДокумента, НаборЗаписейРасшифровки, Расход, ЗаписьКУДиР, ВидОперации)

	Если Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.Номенклатура Тогда
		Расход.Строки.Свернуть("Организация, ВидРасхода, СчетУчета, Валюта, ДоговорКонтрагента,
								|РасчетныйДокумент, СтатусыПартийУСН, Партия, ОтражениеВУСН, СтатусыОплатыРасходовУСН,
								|РеквизитыДокументаОплаты",
								"Сумма, НДС");
	ИначеЕсли Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.НДС Тогда
        Расход.Строки.Свернуть("Организация, ВидРасхода, СчетУчета, Валюта, ДоговорКонтрагента,
								|РасчетныйДокумент, СтатусыПартийУСН, Партия, ОтражениеВУСН, СтатусыОплатыРасходовУСН,
								|РеквизитыДокументаОплаты",
								"Сумма, НДС");

	ИначеЕсли Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.Услуги Тогда
        Расход.Строки.Свернуть("Организация, ВидРасхода, ЭлементРасхода, СчетУчета, Валюта, ДоговорКонтрагента,
								|РасчетныйДокумент, СтатусыПартийУСН, Партия, ОтражениеВУСН, СтатусыОплатыРасходовУСН,
								|РеквизитыДокументаОплаты",
								"Сумма, НДС");

	ИначеЕсли Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.ДопРасходы Тогда
		Расход.Строки.Свернуть("Организация, ВидРасхода, ДоговорКонтрагента, Партия,
								|РасчетныйДокумент, ОтражениеВУСН, СтатусыОплатыРасходовУСН,
								|РеквизитыДокументаОплаты",
								"Сумма, НДС");

	ИначеЕсли Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.ТаможенныеПлатежи Тогда
		Расход.Строки.Свернуть("Организация, ВидРасхода, СчетУчета, ДоговорКонтрагента, Партия,
								|РасчетныйДокумент, ОтражениеВУСН, СтатусыОплатыРасходовУСН,
								|РеквизитыДокументаОплаты, ЭтоТаможенныйНДС",
								"Сумма, НДС");

	ИначеЕсли Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.Зарплата Тогда
		Расход.Строки.Свернуть("ВидРасхода, ЭлементРасхода, ОтражениеВУСН, РеквизитыДокументаОплаты",
								"Сумма, НДС");

	ИначеЕсли Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.Налоги Тогда
		Расход.Строки.Свернуть("ВидРасхода, СчетУчета, ОтражениеВУСН, РеквизитыДокументаОплаты",
								"Сумма, НДС");

	КонецЕсли;

	Счетчик = 1;
	Для Каждого Строка Из Расход.Строки Цикл
		Запись 					= НаборЗаписейРасшифровки.Добавить();
		Запись.Период 			= ЗаписьКУДиР.Период;
		Запись.Регистратор 		= ЗаписьКУДиР.Регистратор;
		Запись.Активность 		= Истина;
		Запись.Организация 		= ЗаписьКУДиР.Организация;
		Запись.ВидРасхода 		= Строка.ВидРасхода;
		Запись.СтрокаДокумента 	= ЗаписьКУДиР.СтрокаДокумента;
		Запись.ЭтапПроведения 	= ЗаписьКУДиР.ЭтапПроведения;
		Запись.Графа7			= Строка.Сумма;
		Запись.СтрокаРасхода	= Счетчик;
		Счетчик = Счетчик + 1;

		Запись.РеквизитыПервичногоДокумента = ЗаписьКУДиР.РеквизитыПервичногоДокумента;
		Запись.РеквизитыДокументаОплаты		= Строка.РеквизитыДокументаОплаты;

		Запись.Графа7			= Строка.Сумма;

		Описание = "";
		Если Строка.ВидРасхода = Перечисления.ВидыРасходовУСН.Номенклатура Тогда
			Описание = "ТМЦ, учитываемые на счете: """ + Строка.СчетУчета + """ .";
			Если ТипЗнч(Строка.ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				Описание = Описание + " Оплачено поставщику:""" + НаименованиеКонтрагентаНаПечать(Строка.ДоговорКонтрагента.Владелец) + """.";
			ИначеЕсли ТипЗнч(Строка.ДоговорКонтрагента) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				Если ТипЗнч(Строка.РасчетныйДокумент) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
					Описание = Описание + " Оплачено подотчетным лицом:""" + Строка.ДоговорКонтрагента + """.";
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Строка.ВидРасхода = Перечисления.ВидыРасходовУСН.ДопРасходы Тогда
			Описание = "Доп. расходы по ТМЦ, списанным документом: """ + РеквизитыПервичногоДокумента(Строка.Партия,,, Истина) + """ .";
			Если ТипЗнч(Строка.ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				Описание = Описание + " Оплачено поставщику:""" + НаименованиеКонтрагентаНаПечать(Строка.ДоговорКонтрагента.Владелец) + """.";
			ИначеЕсли ТипЗнч(Строка.ДоговорКонтрагента) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				Если ТипЗнч(Строка.РасчетныйДокумент) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
					Описание = Описание + " Оплачено подотчетным лицом:""" + Строка.ДоговорКонтрагента + """.";
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Строка.ВидРасхода = Перечисления.ВидыРасходовУСН.ТаможенныеПлатежи Тогда
			
			Описание = "Таможенные платежи ";
			
			СтрокаНДС = ?(Строка.ЭтоТаможенныйНДС, "(НДС) ", "");
			Описание  = Описание + СтрокаНДС;
			
			ЭтоМатериал = Ложь;
			Если ЗначениеЗаполнено(Строка.СчетУчета) Тогда
				ЭтоМатериал = Строка.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Материалы);
			КонецЕсли;
			
			СтрокаГТД = "";
			СтрокаУплаты = "";
			Если ЗначениеЗаполнено(Строка.РасчетныйДокумент)
				И ТипЗнч(Строка.РасчетныйДокумент) = Тип("ДокументСсылка.ГТДИмпорт") Тогда
				
				РеквизитыГТД	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.РасчетныйДокумент, "НомерГТД, Контрагент");
				СтрокаГТД		= "Таможенная декларация № " + РеквизитыГТД.НомерГТД + """. ";
				СтрокаУплаты	= "Уплачено в адрес таможенного органа """ + РеквизитыГТД.Контрагент + """.";
				
			КонецЕсли;
			
			Если ЭтоМатериал Тогда
				Описание = Описание + "по материалам. " + СтрокаГТД + СтрокаУплаты;
			Иначе
				Описание = описание + "по товарам. " + СтрокаГТД + СтрокаУплаты;
			КонецЕсли;
			
		ИначеЕсли Строка.ВидРасхода = Перечисления.ВидыРасходовУСН.Услуги Тогда
			Описание = "Услуги сторонних организаций";
			Если ЗначениеЗаполнено(Строка.ЭлементРасхода) Тогда
				Описание = Описание + ": """ + Строка.ЭлементРасхода + """";
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.СчетУчета) Тогда
				Описание = Описание + ", отнесенные на счет: """ + Строка.СчетУчета + """.";
			Иначе
				Описание = Описание + ".";
			КонецЕсли;
			Если ТипЗнч(Строка.ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				Описание = Описание + " Оплачено поставщику: """ + НаименованиеКонтрагентаНаПечать(Строка.ДоговорКонтрагента.Владелец) + """.";
			ИначеЕсли ТипЗнч(Строка.ДоговорКонтрагента) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				Если ТипЗнч(Строка.РасчетныйДокумент) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
					Описание = Описание + " Оплачено подотчетным лицом:""" + Строка.ДоговорКонтрагента + """.";
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Строка.ВидРасхода = Перечисления.ВидыРасходовУСН.РБП Тогда
			Описание = "Статья РБП: """ + Строка.ЭлементРасхода + """, общая сумма:" + Строка.ЭлементРасхода.Сумма
				+ ", период списания с:" + Строка.ЭлементРасхода.ДатаНачалаСписания
				+ " по:" + Строка.ЭлементРасхода.ДатаОкончанияСписания + ".";
			Если ТипЗнч(Строка.ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				Описание = Описание + " Оплачено поставщику:""" + НаименованиеКонтрагентаНаПечать(Строка.ДоговорКонтрагента.Владелец) + """.";
			ИначеЕсли ТипЗнч(Строка.ДоговорКонтрагента) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				Если ТипЗнч(Строка.РасчетныйДокумент) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
					Описание = Описание + " Оплачено подотчетным лицом:""" + Строка.ДоговорКонтрагента + """.";
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Строка.ВидРасхода = Перечисления.ВидыРасходовУСН.Зарплата Тогда
			Описание = "Оплата труда сотрудника: """ + Строка.ЭлементРасхода + """.";
		ИначеЕсли Строка.ВидРасхода = Перечисления.ВидыРасходовУСН.Налоги Тогда
			Описание = "Налоги и сборы: """ + Строка.СчетУчета.Наименование + " (счет учета " + Строка.СчетУчета + ")"".";
		ИначеЕсли Строка.ВидРасхода = Перечисления.ВидыРасходовУСН.НМА Тогда
			Описание = "НМА: """ + Строка.ЭлементРасхода + """.";

		ИначеЕсли Строка.ВидРасхода = Перечисления.ВидыРасходовУСН.НДС Тогда
			Описание = "НДС, предъявленный поставщиком";
			Если ЗначениеЗаполнено(Строка.СчетУчета) Тогда
				Если Строка.СчетУчета.Количественный Тогда
					Описание = Описание + " по приобретенным ТМЦ, учитываемым на счете: """ + Строка.СчетУчета + """.";
				Иначе
					Описание = Описание + " по услугам, отнесенным на счет: """ + Строка.СчетУчета + """.";
				КонецЕсли;
			Иначе
				Описание = Описание + ".";
			КонецЕсли;

			Если ТипЗнч(Строка.ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				Описание = Описание + " Оплачено поставщику: """ + НаименованиеКонтрагентаНаПечать(Строка.ДоговорКонтрагента.Владелец) + """.";
			ИначеЕсли ТипЗнч(Строка.ДоговорКонтрагента) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				Если ТипЗнч(Строка.РасчетныйДокумент) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
					Описание = Описание + " Оплачено подотчетным лицом: """ + Строка.ДоговорКонтрагента + """.";
				КонецЕсли;
			КонецЕсли;

		ИначеЕсли (НЕ ЗначениеЗаполнено(Расход.ВидРасхода)) И (ВидОперации = "РаспределениеЕНВД") Тогда
			Если Строка.РасчетныйДокумент = СтруктураШапкиДокумента.Ссылка Тогда
				Описание = "Скорректированы результаты распределения предыдущих отчетных периодов.";
			Иначе
				Описание = "Распределены расходы, зарегистрированные документом " + Строка.РасчетныйДокумент;
				Запись.РеквизитыДокументаОплаты	= Строка.РасчетныйДокумент;
			КонецЕсли;

		КонецЕсли;

		Запись.Содержание = Описание;

		Если СтруктураШапкиДокумента.ПорядокПризнанияРасходовПоНДС = Перечисления.ПорядокПризнанияРасходовПоНДС.ВключатьВСтоимость
			И НЕ Запись.ВидРасхода = Перечисления.ВидыРасходовУСН.ТаможенныеПлатежи
			И Строка.НДС <> 0 Тогда
			
			ЗаписьНДС = НаборЗаписейРасшифровки.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьНДС, Запись);
			ЗаписьНДС.ВидРасхода = Перечисления.ВидыРасходовУСН.НДС;
			ЗаписьНДС.Содержание = "Расходы на уплату НДС, предъявленного поставщиком.";
			ЗаписьНДС.СтрокаРасхода	= Счетчик;
			Счетчик = Счетчик + 1;
			ЗаписьНДС.Графа7 = Строка.НДС;
			Запись.Графа7 = Запись.Графа7 - ЗаписьНДС.Графа7;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

//Отражает событие "списание" по регистру расходов при УСН
//ТаблицаПартий - таблица движений регистра партионного учета НУ
Процедура СписаниеРасходовУСН(СтруктураШапкиДокумента, ТаблицаПартий, ДвиженияРегистров, ВидРасхода, Договор, СтатусПартии, ВидОперации = "Списание")

	//Подготовка наборов фильтров
	МассивНоменклатуры = ТаблицаПартий.ВыгрузитьКолонку("Номенклатура");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивНоменклатуры);

	МассивСчетов = ТаблицаПартий.ВыгрузитьКолонку("СчетУчета");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивСчетов);

	МассивПартий = ТаблицаПартий.ВыгрузитьКолонку("ДокументОприходования");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивПартий);

	//Заполним таблицу блокировок
	ТаблицаБлокировок = ТаблицаПартий.Скопировать(, "Номенклатура, СчетУчета, ДокументОприходования");
	ТаблицаБлокировок.Колонки.Номенклатура.Имя = "ЭлементРасхода";
	ТаблицаБлокировок.Колонки.ДокументОприходования.Имя = "Партия";

	Статусы = Новый Массив;
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено);
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписано);
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноПринято);
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеРаспределено);

	//Формирование таблицы фильтров
	ТаблицаФильтров = Новый ТаблицаЗначений;
	ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
	ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
	ТаблицаФильтров.Колонки.Добавить("Условие");

	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "ВидРасхода";
	Фильтр.ЗначениеПоля	= ВидРасхода;
	Фильтр.Условие			= "=";

	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "СтатусыПартийУСН";
	Фильтр.ЗначениеПоля	= СтатусПартии;
	Фильтр.Условие			= "=";

	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "СчетУчета";
	Фильтр.ЗначениеПоля	= МассивСчетов;
	Фильтр.Условие			= "В";

	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "ЭлементРасхода";
	Фильтр.ЗначениеПоля	= МассивНоменклатуры;
	Фильтр.Условие			= "В";

	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "Партия";
	Фильтр.ЗначениеПоля	= МассивПартий;
	Фильтр.Условие			= "В";

	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "СтатусыОплатыРасходовУСН";
	Фильтр.ЗначениеПоля	= Статусы;
	Фильтр.Условие			= "В";

	//Из таблицы расходов выбираем соответствующие партии и элементы расходов
	ТаблицаРасходов = ВыполнитьЗапросПоРасходам(Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Включая), СтруктураШапкиДокумента.Организация, ТаблицаФильтров, ТаблицаБлокировок);
	ТаблицаРасходов.Индексы.Добавить("ЭлементРасхода, Партия");

	ТаблицаДляСписания = Новый ТаблицаЗначений;
	Для Каждого Кол Из ТаблицаРасходов.Колонки Цикл
		ТаблицаДляСписания.Колонки.Добавить(Кол.Имя, Кол.ТипЗначения);
	КонецЦикла;

	ТаблицаДляСписания.Колонки.Добавить("СтатусСписания");
	ТаблицаДляСписания.Колонки.Добавить("КоличествоПоСтатусуСписания");

	Если ВидОперации  = "КорректировкаРеализации" Тогда		
		Если СтруктураШапкиДокумента.ЭтоКорректировкаПрошлогоПериода Тогда			
			ТаблицаДляСписания.Колонки.Добавить("ДатаКорректировки", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
		КонецЕсли; 
	КонецЕсли; 
	
	//Заполняем таблицу списываемых расходов по таблице расходов и фильтрам партионного учета
	Для Каждого СтрокаПартии Из ТаблицаПартий Цикл
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ЭлементРасхода",	СтрокаПартии.Номенклатура);
		СтруктураОтбора.Вставить("Партия",			СтрокаПартии.ДокументОприходования);
		СтруктураОтбора.Вставить("СчетУчета",		СтрокаПартии.СчетУчета);

		НайденныеСтроки = ТаблицаРасходов.НайтиСтроки(СтруктураОтбора);

		// Подлежащее погашению при списании количество
		КоличествоОсталосьПогасить = СтрокаПартии.Количество;
		Если НЕ ТаблицаПартий.Колонки.Найти("СтатусСписания") = Неопределено Тогда
			КоличествоОсталосьПоСтСписания = СтрокаПартии.КоличествоПоСтатусуСписания;
		Иначе
			КоличествоОсталосьПоСтСписания = 0;
		КонецЕсли;
		Для Каждого Строка Из НайденныеСтроки Цикл
			Если КоличествоОсталосьПогасить <= 0 Тогда
				Прервать;
			КонецЕсли;
			Если Строка.Количество <= 0 Тогда
				Продолжить;
			КонецЕсли;

			КоличествоСписания = Мин(Строка.Количество, КоличествоОсталосьПогасить);
			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - КоличествоСписания;

			НоваяСтрока = ТаблицаДляСписания.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);

			Если Строка.Количество > КоличествоСписания Тогда
				К = КоличествоСписания / Строка.Количество;
				НоваяСтрока.Количество = КоличествоСписания;
				НоваяСтрока.Сумма      = Окр(К*НоваяСтрока.Сумма, 3);
				НоваяСтрока.НДС        = Окр(К*НоваяСтрока.НДС, 3);
				Если НЕ ТаблицаДляСписания.Колонки.Найти("КоличествоПоСтатусуСписания") = Неопределено Тогда
					НоваяСтрока.КоличествоПоСтатусуСписания = НоваяСтрока.Количество;
				КонецЕсли;
			КонецЕсли;

			Если НЕ ТаблицаПартий.Колонки.Найти("СтатусСписания") = Неопределено Тогда
				НовыйСтатус = ПолучитьКомбинациюСтатусовОтражениеВНУ(Строка.ОтражениеВУСН, СтрокаПартии.СтатусСписания);
				НоваяСтрока.СтатусСписания = НовыйСтатус;
				НоваяСтрока.КоличествоПоСтатусуСписания = НоваяСтрока.Количество;
				Если НЕ ЗначениеЗаполнено(СтрокаПартии.СтатусСписания) Тогда

				ИначеЕсли Строка.ОтражениеВУСН = НовыйСтатус Тогда
					КоличествоСписанияПоСтатусу = Мин(Строка.Количество, КоличествоОсталосьПоСтСписания);
					КоличествоОсталосьПоСтСписания = КоличествоОсталосьПоСтСписания - КоличествоСписанияПоСтатусу;

				ИначеЕсли КоличествоОсталосьПогасить < КоличествоОсталосьПоСтСписания Тогда
					КоличествоСписанияПоСтатусу = Мин(Строка.Количество, КоличествоОсталосьПоСтСписания - КоличествоОсталосьПогасить);
					КоличествоОсталосьПоСтСписания = КоличествоОсталосьПоСтСписания - КоличествоСписанияПоСтатусу;

					НоваяСтрока.КоличествоПоСтатусуСписания = КоличествоСписанияПоСтатусу;
				КонецЕсли;
			КонецЕсли;

			Строка.Количество = Строка.Количество - НоваяСтрока.Количество;
			Строка.Сумма = Строка.Сумма - НоваяСтрока.Сумма;
			Строка.НДС = Строка.НДС - НоваяСтрока.НДС;

		КонецЦикла;
	КонецЦикла;

	//Разложим таблицу списываемых расходов на движения корректировки статуса и принятые расходы
	ТаблицыДвижений = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаДляСписания, , ВидОперации, Ложь);

	Если ВидОперации = "НаРеализацию" Тогда
		ТаблицыДвижений.ТаблицаПриход.ЗаполнитьЗначения(Перечисления.СтатусыПартийУСН.НаРеализации,"СтатусыПартийУСН");
	ИначеЕсли ВидОперации = "ВПереработку" Тогда
		ТаблицыДвижений.ТаблицаПриход.ЗаполнитьЗначения(Перечисления.СтатусыПартийУСН.ВПереработке,"СтатусыПартийУСН");
	ИначеЕсли (ВидОперации = "ВозвратСРеализации") ИЛИ (ВидОперации = "ВозвратИзПереработки") Тогда
		ТаблицыДвижений.ТаблицаПриход.ЗаполнитьЗначения(Перечисления.СтатусыПартийУСН.Купленные,"СтатусыПартийУСН");
	ИначеЕсли ВидОперации = "ВозвратПоставщику" или ВидОперации = "Перемещение" Тогда
		ТаблицыДвижений.ТаблицаПриход.Очистить();
	ИначеЕсли ВидОперации = "КорректировкаРеализации" Тогда
		ТаблицыДвижений.ТаблицаПриход.ЗаполнитьЗначения(Перечисления.СтатусыПартийУСН.Списанные,"СтатусыПартийУСН");
		ТаблицыДвижений.ТаблицаПриход.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДокументРеализацииСсылка, "Партия");
		// Если корректируется прошлый период, и есть сторно принятых расходов - требуется отражать в НУ последним днем корректируемого года
		Если СтруктураШапкиДокумента.ЭтоКорректировкаПрошлогоПериода Тогда		
			Для каждого СтрокаПринятых Из ТаблицыДвижений.ТаблицаПринятых Цикл			
				Если СтрокаПринятых.Сумма < 0 И ЗначениеЗаполнено(СтрокаПринятых.РеквизитыДокументаОплаты) Тогда
					Если СтрокаПринятых.РеквизитыДокументаОплаты.Дата <= КонецГода(СтруктураШапкиДокумента.ДокументРеализацииДата) Тогда				
						СтрокаПринятых.ДатаКорректировки = КонецГода(СтруктураШапкиДокумента.ДокументРеализацииДата);				
					КонецЕсли; 
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли;
	Иначе
		ТаблицыДвижений.ТаблицаПриход.ЗаполнитьЗначения(Перечисления.СтатусыПартийУСН.Списанные,"СтатусыПартийУСН");
		ТаблицыДвижений.ТаблицаПриход.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка,"Партия");
	КонецЕсли;

	ДвиженияРегистров = СобратьТаблицыДвижений(ТаблицыДвижений,,,);
	ДвиженияРегистров.Вставить("ТаблицаПриход", ТаблицыДвижений.ТаблицаПриход);

КонецПроцедуры

//Отражает изменения по регистру расходов при УСН не влияющие на статус расхода
//Такие как изменение счета учета или статуса партии.
//
//ТаблицаПартийПриход - таблица движений "Приход" регистра партионного учета НУ
//ТаблицаПартийРасход - таблица движений "Расход" регистра партионного учета НУ
Процедура ПеремещениеРасходовУСН(СтруктураШапкиДокумента, ТаблицаПартий, ДвиженияРегистров, ВидРасхода, Договор, СтатусПартии, ВидОперации = "Списание")

	Если ТаблицаПартий.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	//Подготовка наборов фильтров
	МассивНоменклатуры = ТаблицаПартий.ВыгрузитьКолонку("Номенклатура");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивНоменклатуры);

	МассивСчетов = ТаблицаПартий.ВыгрузитьКолонку("СчетУчета");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивСчетов);

	МассивПартий = ТаблицаПартий.ВыгрузитьКолонку("ДокументОприходования");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивПартий);

	//Заполним таблицу блокировок
	ТаблицаБлокировок = ТаблицаПартий.Скопировать(, "Номенклатура, СчетУчета, ДокументОприходования");
	ТаблицаБлокировок.Колонки.Номенклатура.Имя = "ЭлементРасхода";
	ТаблицаБлокировок.Колонки.ДокументОприходования.Имя = "Партия";

	Статусы = Новый Массив;
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено);
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписано);
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноПринято);
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеРаспределено);

	//Формирование таблицы фильтров
	ТаблицаФильтров = Новый ТаблицаЗначений;
	ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
	ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
	ТаблицаФильтров.Колонки.Добавить("Условие");

	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "ВидРасхода";
	Фильтр.ЗначениеПоля	= ВидРасхода;
	Фильтр.Условие			= "=";

	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "СтатусыПартийУСН";
	Фильтр.ЗначениеПоля	= СтатусПартии;
	Фильтр.Условие			= "=";

	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "СчетУчета";
	Фильтр.ЗначениеПоля	= МассивСчетов;
	Фильтр.Условие			= "В";

	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "ЭлементРасхода";
	Фильтр.ЗначениеПоля	= МассивНоменклатуры;
	Фильтр.Условие			= "В";

	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "Партия";
	Фильтр.ЗначениеПоля	= МассивПартий;
	Фильтр.Условие			= "В";

	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "СтатусыОплатыРасходовУСН";
	Фильтр.ЗначениеПоля	= Статусы;
	Фильтр.Условие			= "В";

	//Из таблицы расходов выбираем соответствующие партии и элементы расходов
	ТаблицаРасходов = ВыполнитьЗапросПоРасходам(Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Включая), СтруктураШапкиДокумента.Организация, ТаблицаФильтров, ТаблицаБлокировок);
	ТаблицаРасходов.Индексы.Добавить("ЭлементРасхода,Партия, СчетУчета");

	ТаблицаДляСписания = ТаблицаРасходов.СкопироватьКолонки();

	//Соберем допрасходы для переноса на другую партию/номенклатуру
	Если ВидОперации = "Комплектация" Тогда
		//Подготовка наборов фильтров
		МассивНоменклатуры = ТаблицаПартий.ВыгрузитьКолонку("Номенклатура");
		ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивНоменклатуры);

		МассивПартий = ТаблицаПартий.ВыгрузитьКолонку("ДокументОприходования");
		ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивПартий);

		//Заполним таблицу блокировок
		ТаблицаБлокировок = ТаблицаПартий.Скопировать(, "Номенклатура, ДокументОприходования");
		ТаблицаБлокировок.Колонки.Номенклатура.Имя = "ЭлементРасхода";
		ТаблицаБлокировок.Колонки.ДокументОприходования.Имя = "Партия";

		Статусы = Новый Массив;
		Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено);
		Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписано);
		Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноПринято);
		Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеРаспределено);

		//Формирование таблицы фильтров
		ТаблицаФильтров = Новый ТаблицаЗначений;
		ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
		ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
		ТаблицаФильтров.Колонки.Добавить("Условие");

		Фильтр = ТаблицаФильтров.Добавить();
		Фильтр.ИмяПоля			= "ВидРасхода";
		Фильтр.ЗначениеПоля	= Перечисления.ВидыРасходовУСН.ДопРасходы;
		Фильтр.Условие			= "=";

		Фильтр = ТаблицаФильтров.Добавить();
		Фильтр.ИмяПоля			= "ЭлементРасхода";
		Фильтр.ЗначениеПоля	= МассивНоменклатуры;
		Фильтр.Условие			= "В";

		Фильтр = ТаблицаФильтров.Добавить();
		Фильтр.ИмяПоля			= "Партия";
		Фильтр.ЗначениеПоля	= МассивПартий;
		Фильтр.Условие			= "В";

		Фильтр = ТаблицаФильтров.Добавить();
		Фильтр.ИмяПоля			= "СтатусыОплатыРасходовУСН";
		Фильтр.ЗначениеПоля	= Статусы;
		Фильтр.Условие			= "В";

		//Из таблицы расходов выбираем соответствующие партии и элементы расходов
		ТаблицаДопРасходов = ВыполнитьЗапросПоРасходам(Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Включая), СтруктураШапкиДокумента.Организация, ТаблицаФильтров, ТаблицаБлокировок);
		ТаблицаДопРасходов.Индексы.Добавить("ЭлементРасхода,Партия");

		ТаблицаРасчетныхДокументов = ТаблицаДопРасходов.Скопировать();
		ТаблицаРасчетныхДокументов.Свернуть("ЭлементРасхода, Партия, РасчетныйДокумент", "Количество");

		ТаблицаДопРасходов.Индексы.Добавить("ЭлементРасхода,Партия,РасчетныйДокумент");
		ТаблицаРасчетныхДокументов.Индексы.Добавить("ЭлементРасхода,Партия");
	КонецЕсли;

	ТаблицаДляСписания.Колонки.Добавить("СчетПриход");
	ТаблицаДляСписания.Колонки.Добавить("НоменклатураПриход");
	ТаблицаДляСписания.Колонки.Добавить("ПартияПриход");
	ТаблицаДляСписания.Колонки.Добавить("КоличествоПриход");

	//Заполняем таблицу списываемых расходов по таблице расходов и фильтрам партионного учета
	Для Каждого СтрокаПартии ИЗ ТаблицаПартий Цикл

		Если (ВидОперации = "Перемещение") и (СтрокаПартии.СчетУчета = СтрокаПартии.КорСчетУчета) Тогда
			Продолжить;
		КонецЕсли;

		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ЭлементРасхода",	СтрокаПартии.Номенклатура);
		СтруктураОтбора.Вставить("Партия",			СтрокаПартии.ДокументОприходования);
		СтруктураОтбора.Вставить("СчетУчета",		СтрокаПартии.СчетУчета);

		НайденныеСтроки = ТаблицаРасходов.НайтиСтроки(СтруктураОтбора);

		// Подлежащее погашению при списании количество
		КоличествоОсталосьПогасить = СтрокаПартии.Количество;
		Для Каждого Строка Из НайденныеСтроки Цикл
			Если КоличествоОсталосьПогасить <= 0 Тогда
				Прервать;
			КонецЕсли;
			Если Строка.Количество <= 0 Тогда
				Продолжить;
			КонецЕсли;

			КоличествоСписания = Мин(Строка.Количество, КоличествоОсталосьПогасить);
			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - КоличествоСписания;

			НоваяСтрока = ТаблицаДляСписания.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);

			НоваяСтрока.СчетПриход 			= СтрокаПартии.КорСчетУчета;
			НоваяСтрока.НоменклатураПриход 	= СтрокаПартии.КорНоменклатура;
			НоваяСтрока.ПартияПриход 		= СтрокаПартии.КорДокументОприходования;

			Если Строка.Количество > КоличествоСписания Тогда
				К = КоличествоСписания / Строка.Количество;
				НоваяСтрока.Количество = КоличествоСписания;
				НоваяСтрока.Сумма      = Окр(К*НоваяСтрока.Сумма, 3);
				НоваяСтрока.НДС        = Окр(К*НоваяСтрока.НДС, 3);
			КонецЕсли;

			НоваяСтрока.КоличествоПриход = ?(СтрокаПартии.Количество = 0, 0, НоваяСтрока.Количество * СтрокаПартии.КорКоличество / СтрокаПартии.Количество);

			Строка.Количество = Строка.Количество - НоваяСтрока.Количество;
			Строка.Сумма = Строка.Сумма - НоваяСтрока.Сумма;
			Строка.НДС = Строка.НДС - НоваяСтрока.НДС;
		КонецЦикла;

		//Обработаем доп. расходы по партии
		Если ВидОперации = "Комплектация" Тогда
			КоличествоСписанияПоПартииТМЦ = СтрокаПартии.Количество - КоличествоОсталосьПогасить;

			//Пропустим операции поступления и перемещения
			Если НЕ КоличествоСписанияПоПартииТМЦ > 0 Тогда
				Продолжить;
			КонецЕсли;

			//Выберем расчетные документы доп.расходов
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("ЭлементРасхода",	СтрокаПартии.Номенклатура);
			СтруктураОтбора.Вставить("Партия",			СтрокаПартии.ДокументОприходования);

			НайденныеСтрокиРД = ТаблицаРасчетныхДокументов.НайтиСтроки(СтруктураОтбора);

			Для Каждого СтрокаРасчетныйДокумент Из НайденныеСтрокиРД Цикл

				КоличествоСписанияРД = Мин(СтрокаРасчетныйДокумент.Количество, КоличествоСписанияПоПартииТМЦ);

				//Выберем доп. расходы данной номенклатуры/партии
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("ЭлементРасхода",	СтрокаПартии.Номенклатура);
				СтруктураОтбора.Вставить("Партия",			СтрокаПартии.ДокументОприходования);
				СтруктураОтбора.Вставить("РасчетныйДокумент",СтрокаРасчетныйДокумент.РасчетныйДокумент);

				НайденныеСтроки = ТаблицаДопРасходов.НайтиСтроки(СтруктураОтбора);

				Для Каждого Строка Из НайденныеСтроки Цикл

					Если Строка.Количество <= 0 Тогда
						Продолжить;
					КонецЕсли;

					Если КоличествоСписанияРД <= 0 Тогда
						Прервать;
					КонецЕсли;

					КоличествоСписания = Мин(Строка.Количество, КоличествоСписанияРД);

					НоваяСтрока = ТаблицаДляСписания.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);

					НоваяСтрока.НоменклатураПриход 	= СтрокаПартии.КорНоменклатура;
					НоваяСтрока.ПартияПриход 		= СтрокаПартии.КорДокументОприходования;

					Если Строка.Количество <> КоличествоСписания Тогда
						К = КоличествоСписания / Строка.Количество;
						НоваяСтрока.Количество = КоличествоСписания;
						НоваяСтрока.Сумма      = Окр(К*НоваяСтрока.Сумма, 3);
						НоваяСтрока.НДС        = Окр(К*НоваяСтрока.НДС, 3);
					КонецЕсли;

					НоваяСтрока.КоличествоПриход = ?(СтрокаПартии.Количество = 0, 0, НоваяСтрока.Количество * СтрокаПартии.КорКоличество / СтрокаПартии.Количество);

					Строка.Количество 	=  Строка.Количество - НоваяСтрока.Количество;
					Строка.Сумма 		=  Строка.Сумма - НоваяСтрока.Сумма;
					Строка.НДС 			=  Строка.НДС - НоваяСтрока.НДС;

					КоличествоСписанияРД = КоличествоСписанияРД - КоличествоСписания;
					СтрокаРасчетныйДокумент.Количество = СтрокаРасчетныйДокумент.Количество - КоличествоСписания;
				КонецЦикла;

			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	//Разложим таблицу списываемых расходов на движения корректировки статуса и принятые расходы
	ТаблицаКорректировкиРасход = Новый ТаблицаЗначений;
	ТаблицаКорректировкиПриход = Новый ТаблицаЗначений;
	ТаблицаПризнанныхРасходов  = Новый ТаблицаЗначений;

	Для Каждого Колонка Из ТаблицаДляСписания.Колонки Цикл
		ТаблицаКорректировкиРасход.Колонки.Добавить(Колонка.Имя);
		ТаблицаКорректировкиПриход.Колонки.Добавить(Колонка.Имя);
		ТаблицаПризнанныхРасходов.Колонки.Добавить(Колонка.Имя);
	КонецЦикла;

	Для Каждого Расход Из ТаблицаДляСписания Цикл
		СтрокаКорректировкиРасход = ТаблицаКорректировкиРасход.Добавить();
		СтрокаКорректировкиПриход = ТаблицаКорректировкиПриход.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаКорректировкиРасход, Расход);
		ЗаполнитьЗначенияСвойств(СтрокаКорректировкиПриход, Расход);

		Если НЕ Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.ДопРасходы Тогда
			СтрокаКорректировкиПриход.СчетУчета 	= Расход.СчетПриход;
		КонецЕсли;
		СтрокаКорректировкиПриход.ЭлементРасхода= Расход.НоменклатураПриход;
		СтрокаКорректировкиПриход.Партия 		= Расход.ПартияПриход;
		СтрокаКорректировкиПриход.Количество 	= Расход.КоличествоПриход;
	КонецЦикла;

	ТаблицыДвижений = Новый Структура("ТаблицаПриход, ТаблицаРасход, ТаблицаПринятых", ТаблицаКорректировкиПриход, ТаблицаКорректировкиРасход, ТаблицаПризнанныхРасходов);

	Если ВидОперации = "НаРеализацию" Тогда
		ТаблицыДвижений.ТаблицаПриход.ЗаполнитьЗначения(Перечисления.СтатусыПартийУСН.НаРеализации,"СтатусыПартийУСН");
	ИначеЕсли ВидОперации = "ВПереработку" Тогда
		ТаблицыДвижений.ТаблицаПриход.ЗаполнитьЗначения(Перечисления.СтатусыПартийУСН.ВПереработке,"СтатусыПартийУСН");
	ИначеЕсли (ВидОперации = "ВозвратСРеализации") ИЛИ (ВидОперации = "ВозвратИзПереработки") Тогда
		ТаблицыДвижений.ТаблицаПриход.ЗаполнитьЗначения(Перечисления.СтатусыПартийУСН.Купленные,"СтатусыПартийУСН");
	ИначеЕсли ВидОперации = "ВозвратПоставщику" Тогда
		ТаблицыДвижений.ТаблицаПриход.Очистить();
	КонецЕсли;

	ДвиженияРегистров = СобратьТаблицыДвижений(ТаблицыДвижений,,,);
	ДвиженияРегистров.Вставить("ТаблицаПриход", ТаблицыДвижений.ТаблицаПриход);

КонецПроцедуры

//Отражает перенос задолженности с одного контрагента на другого.
//
Процедура КорректировкаЗадолженностиУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, КУДиР, ВидДвижения, ВидОперации)

	ТаблицаДвиженияВзаиморасчетов = ТаблицаОплат.Скопировать();
	ТаблицаДвиженияВзаиморасчетов.Колонки.ДокументРасчетов.Имя = "РасчетныйДокумент";
	ТаблицаДвиженияВзаиморасчетов.Колонки.Добавить("СтруктураКурса");

	//Формирование таблицы фильтров
	ТаблицаФильтров = Новый ТаблицаЗначений;
	ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
	ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
	ТаблицаФильтров.Колонки.Добавить("Условие");

	Фильтр = ТаблицаФильтров.Добавить();
	Если ВидДвижения = ВидДвиженияНакопления.Приход Тогда
		ИмяПоляФильтра	= "РасчетныйДокумент";

		Статусы = Новый Массив;
		Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеОплаченоНеОплаченоПокупателем);
		Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено);
		Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеОплачено);

	ИначеЕсли ВидДвижения = ВидДвиженияНакопления.Расход Тогда
		ИмяПоляФильтра	= "Партия";

		Статусы = Новый Массив;
		Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеОплаченоНеОплаченоПокупателем);
		Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеОплаченоПокупателем);

	КонецЕсли;

	ИтоговаяСтруктура = Новый Структура("ТаблицаПриход, ТаблицаРасход, ТаблицаПринятых", Новый ТаблицаЗначений(), Новый ТаблицаЗначений(), Новый ТаблицаЗначений());

	Фильтр.ИмяПоля			= ИмяПоляФильтра;
	Фильтр.ЗначениеПоля		= ТаблицаДвиженияВзаиморасчетов.ВыгрузитьКолонку("РасчетныйДокумент");
	Фильтр.Условие			= "В";

	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "СтатусыОплатыРасходовУСН";
	Фильтр.ЗначениеПоля	= Статусы;
	Фильтр.Условие			= "В";

	ТаблицаРасходов = ВыполнитьЗапросПоРасходам(Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая), СтруктураШапкиДокумента.Организация, ТаблицаФильтров);
	ТаблицаДвиженияРасходов = ТаблицаРасходов.СкопироватьКолонки();
	ТаблицаДвиженияРасходов.Колонки.Добавить("СтруктураКурса");
	
	//Заполняем таблицу списываемых расходов по таблице расходов и фильтрам партионного учета
	Для Каждого СтрокаПлатеж Из ТаблицаДвиженияВзаиморасчетов Цикл

		ИмяКолонкиКорДоговора = "";
		
		Если ВидОперации = "ПереносЗадолженности" Тогда
			
			Если ТипЗнч(СтрокаПлатеж.КорСубконто1) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				ИмяКолонкиКорДоговора = "КорСубконто1";
			ИначеЕсли ТипЗнч(СтрокаПлатеж.КорСубконто2) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				ИмяКолонкиКорДоговора = "КорСубконто2";
			ИначеЕсли ТипЗнч(СтрокаПлатеж.КорСубконто2) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				ИмяКолонкиКорДоговора = "КорСубконто3";
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВидОперации = "ПереносЗадолженности" Тогда
			
			Если ЗначениеЗаполнено(СтрокаПлатеж[ИмяКолонкиКорДоговора])
				и ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента)
				и СтрокаПлатеж[ИмяКолонкиКорДоговора].Владелец = СтрокаПлатеж.ДоговорКонтрагента.Владелец
				и СтрокаПлатеж[ИмяКолонкиКорДоговора].ВалютаВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;	
		
		Курс = 1;
		Кратность = 1;
		Если Не ТаблицаДвиженияВзаиморасчетов.Колонки.Найти("КурсВзаиморасчетов") = Неопределено Тогда
			Курс = СтрокаПлатеж.КурсВзаиморасчетов;
		КонецЕсли;
		Если Не ТаблицаДвиженияВзаиморасчетов.Колонки.Найти("КратностьВзаиморасчетов") = Неопределено Тогда
			Кратность = СтрокаПлатеж.КратностьВзаиморасчетов;
		КонецЕсли;
		
		Если (НЕ ВидОперации = "ПереносЗадолженности") Тогда
			СтруктураКурса = Новый Структура("Курс, Кратность",Курс, Кратность);
		Иначе
			
			Если ЗначениеЗаполнено(СтрокаПлатеж[ИмяКолонкиКорДоговора])
				и ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента)
				и СтрокаПлатеж[ИмяКолонкиКорДоговора].ВалютаВзаиморасчетов <> СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
				
				СтруктураКурса = Новый Структура("Курс, Кратность, ВалютаПолучателя",Курс, Кратность, СтрокаПлатеж[ИмяКолонкиКорДоговора].ВалютаВзаиморасчетов);
				
				КурсПолучателя = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтрокаПлатеж[ИмяКолонкиКорДоговора].ВалютаВзаиморасчетов,СтруктураШапкиДокумента.Дата);
				СтруктураКурса.Курс = ?(КурсПолучателя.Курс = 0, СтруктураКурса.Курс, СтруктураКурса.Курс/КурсПолучателя.Курс);
				СтруктураКурса.Кратность = ?(КурсПолучателя.Кратность = 0, СтруктураКурса.Курс, СтруктураКурса.Кратность/КурсПолучателя.Кратность);
				
			КонецЕсли;
			
		КонецЕсли;	
		
		СтруктураОтбора = Новый Структура(ИмяПоляФильтра,  СтрокаПлатеж.РасчетныйДокумент);
		НайденныеСтроки = ТаблицаРасходов.НайтиСтроки(СтруктураОтбора);

		// Подлежащее погашению при списании количество
		СуммаОсталосьПогасить = СтрокаПлатеж.СуммаВзаиморасчетов;
		Для Каждого Строка Из НайденныеСтроки Цикл
			Если СуммаОсталосьПогасить <= 0 Тогда
				Прервать;
			КонецЕсли;

			СуммаСписания = Мин(Строка.Сумма, СуммаОсталосьПогасить);
			СуммаОсталосьПогасить = СуммаОсталосьПогасить - СуммаСписания;

			НоваяСтрока = ТаблицаДвиженияРасходов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);

			Если Строка.Сумма > СуммаСписания Тогда
				НоваяСтрока.Сумма				= Мин(Строка.Сумма, СуммаСписания);
				НоваяСтрока.Количество	 		= СуммаСписания/НоваяСтрока.Сумма*Строка.Количество;
				НоваяСтрока.НДС			 		= СуммаСписания/НоваяСтрока.Сумма*Строка.НДС;
			Иначе
				НоваяСтрока.Сумма 				= Строка.Сумма;
				НоваяСтрока.Количество	 		= Строка.Количество;
				НоваяСтрока.НДС 				= Строка.НДС;
			КонецЕсли;
			НоваяСтрока.СтруктураКурса = СтруктураКурса;
		КонецЦикла;

		Если ВидОперации = "ПереносЗадолженности" Тогда
			Если ЗначениеЗаполнено(СтрокаПлатеж[ИмяКолонкиКорДоговора]) И
				ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) И
				СтрокаПлатеж[ИмяКолонкиКорДоговора].Владелец = СтрокаПлатеж.ДоговорКонтрагента.Владелец Тогда
				НовыйРасчетныйДокумент = Неопределено;
			Иначе
				НовыйРасчетныйДокумент = СтруктураШапкиДокумента.Ссылка;
			КонецЕсли;
			ИтоговаяСтруктура = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаДвиженияРасходов, СтрокаПлатеж.СуммаВзаиморасчетов, "КорректировкаПоАО",, НовыйРасчетныйДокумент, ИтоговаяСтруктура);
			ТаблицаДвиженияРасходов.Очистить();
		КонецЕсли;
	КонецЦикла;

	Если ВидОперации = "ПереносЗадолженности" Тогда
		ДвиженияРегистров = СобратьТаблицыДвижений(ИтоговаяСтруктура, , , ДвиженияРегистров);
	Иначе
		Если ТаблицаДвиженияРасходов.Колонки.Найти("ВидДвижения") = Неопределено Тогда
			ТаблицаДвиженияРасходов.Колонки.Добавить("ВидДвижения");
		КонецЕсли;
		ТаблицаДвиженияРасходов.ЗаполнитьЗначения(ВидДвижения,"ВидДвижения");
		ТаблицаРасходов.Очистить();

		ТаблицыДвижений = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаРасходов, , Неопределено, Ложь);
		ТаблицыДвижений.Вставить("ТаблицаРасход",ТаблицаДвиженияРасходов);

		ДвиженияРегистров = СобратьТаблицыДвижений(ТаблицыДвижений,,,);
	КонецЕсли;

Конецпроцедуры

Процедура СписаниеТЗР(СтруктураШапкиДокумента, ДвиженияРегистров)

	//Подготовка наборов фильтров
	Статусы = Новый Массив;
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено);
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписано);
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноПринято);
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеРаспределено);

	//Формирование таблицы фильтров
	ТаблицаФильтров = Новый ТаблицаЗначений;
	ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
	ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
	ТаблицаФильтров.Колонки.Добавить("Условие");

	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "ВидРасхода";
	Фильтр.ЗначениеПоля		= Перечисления.ВидыРасходовУСН.ДопРасходы;
	Фильтр.Условие			= "=";

	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "СтатусыОплатыРасходовУСН";
	Фильтр.ЗначениеПоля	= Статусы;
	Фильтр.Условие			= "В";

	//Из таблицы расходов выбираем соответствующие партии и элементы расходов
	ТаблицаРасходов = ВыполнитьЗапросПоРасходам(Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Включая), СтруктураШапкиДокумента.Организация, ТаблицаФильтров);

	ТаблицаРасчетныхДокументов = ТаблицаРасходов.Скопировать();
	ТаблицаРасчетныхДокументов.Свернуть("ЭлементРасхода, Партия, РасчетныйДокумент", "Количество");

	ТаблицаРасходов.Индексы.Добавить("ЭлементРасхода,Партия,РасчетныйДокумент");
	ТаблицаРасчетныхДокументов.Индексы.Добавить("ЭлементРасхода,Партия");

	ТаблицаДляСписания = ТаблицаРасходов.СкопироватьКолонки();
	ТаблицаДляСписания.Колонки.Добавить("СтатусСписания");
	ТаблицаДляСписания.Колонки.Добавить("КоличествоПоСтатусуСписания");

	МассивНоменклатуры = ТаблицаРасходов.ВыгрузитьКолонку("ЭлементРасхода");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивНоменклатуры);
	ОбщегоНазначенияБПКлиентСервер.УдалитьНеЗаполненныеЭлементыМассива(МассивНоменклатуры);

	МассивПартий = ТаблицаРасходов.ВыгрузитьКолонку("Партия");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивПартий);
	ОбщегоНазначенияБПКлиентСервер.УдалитьНеЗаполненныеЭлементыМассива(МассивПартий);

	// Установим управляемые блокировки
	СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "РасходыПриУСН");
	
	ЗначенияБлокировки = Новый Соответствие;
	ЗначенияБлокировки.Вставить("Период",      Новый Диапазон(НачалоКвартала(СтруктураШапкиДокумента.Дата), КонецКвартала(СтруктураШапкиДокумента.Дата)));
	ЗначенияБлокировки.Вставить("Организация", СтруктураШапкиДокумента.Организация);
	ЗначенияБлокировки.Вставить("ВидРасхода", Перечисления.ВидыРасходовУСН.Номенклатура);

	СтруктураПараметров.Вставить("ИсточникДанных", ТаблицаРасходов);
	ОписаниеИсточника = Новый Соответствие;
	ОписаниеИсточника.Вставить("ЭлементРасхода","ЭлементРасхода");
	ОписаниеИсточника.Вставить("Партия",	 	"Партия");

	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ИспользоватьУправляемыеБлокировки() И ТранзакцияАктивна() Тогда
		ОбщегоНазначенияБПВызовСервера.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки, ОписаниеИсточника);
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачДата", НачалоКвартала(СтруктураШапкиДокумента.Дата));
	Запрос.УстановитьПараметр("КонДата", КонецКвартала(СтруктураШапкиДокумента.Дата));
	Запрос.УстановитьПараметр("Организация", 		СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ВидРасхода", 		Перечисления.ВидыРасходовУСН.Номенклатура);
	Запрос.УстановитьПараметр("ВидДвижения", 		ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("СтатусСписания", 	Перечисления.ОтражениеВУСН.ПустаяСсылка());
	Запрос.УстановитьПараметр("Номенклатура", МассивНоменклатуры);
	Запрос.УстановитьПараметр("Партии", МассивПартий);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходыПриУСН.СтатусСписания,
	|	СУММА(РасходыПриУСН.Количество) КАК КоличествоСписания,
	|	МАКСИМУМ(РасходыПриУСН.Период) КАК Период,
	|	РасходыПриУСН.ЭлементРасхода КАК Номенклатура,
	|	РасходыПриУСН.Партия КАК ДокументОприходования,
	|	РасходыПриУСН.Регистратор
	|ИЗ
	|	РегистрНакопления.РасходыПриУСН КАК РасходыПриУСН
	|ГДЕ
	|	РасходыПриУСН.ВидРасхода = &ВидРасхода
	|	И РасходыПриУСН.СтатусСписания <> &СтатусСписания
	|	И РасходыПриУСН.Организация = &Организация
	|	И РасходыПриУСН.Период МЕЖДУ &НачДата И &КонДата
	|	И РасходыПриУСН.Партия В(&Партии)
	|	И РасходыПриУСН.ЭлементРасхода В(&Номенклатура)
	|	И РасходыПриУСН.ВидДвижения = &ВидДвижения
	|	И РасходыПриУСН.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходыПриУСН.СтатусСписания,
	|	РасходыПриУСН.ЭлементРасхода,
	|	РасходыПриУСН.Партия,
	|	РасходыПриУСН.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";

	ТаблицаПартий = Запрос.Выполнить().Выгрузить();

	Для Каждого СтрокаПартии Из ТаблицаПартий Цикл
		КоличествоСписанияПоРегистратору = СтрокаПартии.КоличествоСписания;

		ТаблицаДляСписания.Очистить();

		//Пропустим операции поступления и перемещения
		Если НЕ КоличествоСписанияПоРегистратору > 0 Тогда
			Продолжить;
		КонецЕсли;

		//Выберем расчетные документы доп.расходов
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ЭлементРасхода",	СтрокаПартии.Номенклатура);
		СтруктураОтбора.Вставить("Партия",			СтрокаПартии.ДокументОприходования);

		НайденныеСтрокиРД = ТаблицаРасчетныхДокументов.НайтиСтроки(СтруктураОтбора);

		Для Каждого СтрокаРасчетныйДокумент Из НайденныеСтрокиРД Цикл

			КоличествоСписанияРД = Мин(СтрокаРасчетныйДокумент.Количество, КоличествоСписанияПоРегистратору);

			//Выберем доп. расходы данной номенклатуры/партии
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("ЭлементРасхода",	СтрокаПартии.Номенклатура);
			СтруктураОтбора.Вставить("Партия",			СтрокаПартии.ДокументОприходования);
			СтруктураОтбора.Вставить("РасчетныйДокумент",СтрокаРасчетныйДокумент.РасчетныйДокумент);

			НайденныеСтроки = ТаблицаРасходов.НайтиСтроки(СтруктураОтбора);

			Для Каждого Строка Из НайденныеСтроки Цикл

				Если Строка.Количество <= 0 Тогда
					Продолжить;
				КонецЕсли;

				Если КоличествоСписанияРД <= 0 Тогда
					Прервать;
				КонецЕсли;

				КоличествоСписания = Мин(Строка.Количество, КоличествоСписанияРД);

				НоваяСтрока = ТаблицаДляСписания.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);

				НовыйСтатус = ПолучитьКомбинациюСтатусовОтражениеВНУ(Строка.ОтражениеВУСН, СтрокаПартии.СтатусСписания);
				Если ЗначениеЗаполнено(СтрокаПартии.СтатусСписания) Тогда
					НоваяСтрока.СтатусСписания = НовыйСтатус;
					НоваяСтрока.КоличествоПоСтатусуСписания = КоличествоСписания;
				КонецЕсли;

				Если Строка.Количество <> КоличествоСписания Тогда
					К = КоличествоСписания / Строка.Количество;
					НоваяСтрока.Количество 	= Окр(КоличествоСписания,3,1);
					НоваяСтрока.Сумма	 	= Окр(К*НоваяСтрока.Сумма,3,1);
					НоваяСтрока.НДС 		= Окр(К*НоваяСтрока.НДС,3,1);
				КонецЕсли;

				Строка.Количество 	=  Строка.Количество - НоваяСтрока.Количество;
				Строка.Сумма 		=  Строка.Сумма - НоваяСтрока.Сумма;
				Строка.НДС 			=  Строка.НДС - НоваяСтрока.НДС;

				КоличествоСписанияРД = КоличествоСписанияРД - КоличествоСписания;
				СтрокаРасчетныйДокумент.Количество = СтрокаРасчетныйДокумент.Количество - КоличествоСписания;
			КонецЦикла;

		КонецЦикла;

		//Разложим таблицу списываемых расходов на движения корректировки статуса и принятые расходы.
		ТаблицыДвижений = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаДляСписания, , "Списание", Ложь);
		ТаблицыДвижений.ТаблицаПриход.ЗаполнитьЗначения(Перечисления.СтатусыПартийУСН.Списанные,"СтатусыПартийУСН");
		ТаблицыДвижений.ТаблицаПриход.ЗаполнитьЗначения(СтрокаПартии.Регистратор,"Партия");
		ТаблицыДвижений.ТаблицаПринятых.ЗаполнитьЗначения(СтрокаПартии.Регистратор,"Партия");
		ДвиженияРегистров = СобратьТаблицыДвижений(ТаблицыДвижений,,,ДвиженияРегистров);

	КонецЦикла;

КонецПроцедуры

Процедура СписаниеТаможенныхПлатежей(СтруктураШапкиДокумента, ДвиженияРегистров)

	//Подготовка наборов фильтров
	Статусы = Новый Массив;
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено);
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписано);
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноПринято);
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеРаспределено);

	//Формирование таблицы фильтров
	ТаблицаФильтров = Новый ТаблицаЗначений;
	ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
	ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
	ТаблицаФильтров.Колонки.Добавить("Условие");

	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "ВидРасхода";
	Фильтр.ЗначениеПоля		= Перечисления.ВидыРасходовУСН.ТаможенныеПлатежи;
	Фильтр.Условие			= "=";

	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "СтатусыОплатыРасходовУСН";
	Фильтр.ЗначениеПоля	= Статусы;
	Фильтр.Условие			= "В";

	//Из таблицы расходов выбираем соответствующие партии и элементы расходов
	ТаблицаРасходов = ВыполнитьЗапросПоРасходам(Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Включая), СтруктураШапкиДокумента.Организация, ТаблицаФильтров);

	ТаблицаРасчетныхДокументов = ТаблицаРасходов.Скопировать();
	ТаблицаРасчетныхДокументов.Свернуть("ЭлементРасхода, Партия, РасчетныйДокумент, ДоговорКонтрагента", "Количество");

	ТаблицаРасходов.Индексы.Добавить("ЭлементРасхода,Партия,РасчетныйДокумент,ДоговорКонтрагента");
	ТаблицаРасчетныхДокументов.Индексы.Добавить("ЭлементРасхода,Партия,ДоговорКонтрагента");

	ТаблицаДляСписания = ТаблицаРасходов.СкопироватьКолонки();
	ТаблицаДляСписания.Колонки.Добавить("СтатусСписания");
	ТаблицаДляСписания.Колонки.Добавить("КоличествоПоСтатусуСписания");
	ТаблицаДляСписания.Колонки.Добавить("ЭтоТаможенныйНДС", Новый ОписаниеТипов("Булево"));

	МассивНоменклатуры = ТаблицаРасходов.ВыгрузитьКолонку("ЭлементРасхода");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивНоменклатуры);
	ОбщегоНазначенияБПКлиентСервер.УдалитьНеЗаполненныеЭлементыМассива(МассивНоменклатуры);

	МассивПартий = ТаблицаРасходов.ВыгрузитьКолонку("Партия");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивПартий);
	ОбщегоНазначенияБПКлиентСервер.УдалитьНеЗаполненныеЭлементыМассива(МассивПартий);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачДата", НачалоКвартала(СтруктураШапкиДокумента.Дата));
	Запрос.УстановитьПараметр("КонДата", КонецКвартала(СтруктураШапкиДокумента.Дата));
	Запрос.УстановитьПараметр("Организация", 		СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ВидРасхода", 		Перечисления.ВидыРасходовУСН.Номенклатура);
	Запрос.УстановитьПараметр("ВидДвижения", 		ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("СтатусСписания", 	Перечисления.ОтражениеВУСН.ПустаяСсылка());
	Запрос.УстановитьПараметр("Номенклатура", МассивНоменклатуры);
	Запрос.УстановитьПараметр("Партии", МассивПартий);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходыПриУСН.СтатусСписания,
	|	СУММА(РасходыПриУСН.Количество) КАК КоличествоСписания,
	|	МАКСИМУМ(РасходыПриУСН.Период) КАК Период,
	|	РасходыПриУСН.ЭлементРасхода КАК Номенклатура,
	|	РасходыПриУСН.Партия КАК ДокументОприходования,
	|	РасходыПриУСН.Регистратор
	|ИЗ
	|	РегистрНакопления.РасходыПриУСН КАК РасходыПриУСН
	|ГДЕ
	|	РасходыПриУСН.ВидРасхода = &ВидРасхода
	|	И РасходыПриУСН.СтатусСписания <> &СтатусСписания
	|	И РасходыПриУСН.Организация = &Организация
	|	И РасходыПриУСН.Период МЕЖДУ &НачДата И &КонДата
	|	И РасходыПриУСН.Партия В(&Партии)
	|	И РасходыПриУСН.ЭлементРасхода В(&Номенклатура)
	|	И РасходыПриУСН.ВидДвижения = &ВидДвижения
	|	И РасходыПриУСН.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходыПриУСН.СтатусСписания,
	|	РасходыПриУСН.ЭлементРасхода,
	|	РасходыПриУСН.Партия,
	|	РасходыПриУСН.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";

	ТаблицаПартий = Запрос.Выполнить().Выгрузить();

	Для Каждого СтрокаПартии Из ТаблицаПартий Цикл
		КоличествоСписанияПоРегистратору = СтрокаПартии.КоличествоСписания;

		ТаблицаДляСписания.Очистить();

		//Пропустим операции поступления и перемещения
		Если НЕ КоличествоСписанияПоРегистратору > 0 Тогда
			Продолжить;
		КонецЕсли;

		//Выберем расчетные документы таможенных платежей
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ЭлементРасхода",		СтрокаПартии.Номенклатура);
		СтруктураОтбора.Вставить("Партия",				СтрокаПартии.ДокументОприходования);

		НайденныеСтрокиРД = ТаблицаРасчетныхДокументов.НайтиСтроки(СтруктураОтбора);

		Для Каждого СтрокаРасчетныйДокумент Из НайденныеСтрокиРД Цикл

			КоличествоСписанияРД = Мин(СтрокаРасчетныйДокумент.Количество, КоличествоСписанияПоРегистратору);

			//Выберем таможенные платежи по данной номенклатуре/партии
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("ЭлементРасхода",	СтрокаПартии.Номенклатура);
			СтруктураОтбора.Вставить("Партия",			СтрокаПартии.ДокументОприходования);
			СтруктураОтбора.Вставить("РасчетныйДокумент",СтрокаРасчетныйДокумент.РасчетныйДокумент);
			СтруктураОтбора.Вставить("ДоговорКонтрагента",СтрокаРасчетныйДокумент.ДоговорКонтрагента);

			НайденныеСтроки = ТаблицаРасходов.НайтиСтроки(СтруктураОтбора);

			Для Каждого Строка Из НайденныеСтроки Цикл

				Если Строка.Количество <= 0 Тогда
					Продолжить;
				КонецЕсли;

				Если КоличествоСписанияРД <= 0 Тогда
					Прервать;
				КонецЕсли;

				КоличествоСписания = Мин(Строка.Количество, КоличествоСписанияРД);

				НоваяСтрока = ТаблицаДляСписания.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);

				НовыйСтатус = ПолучитьКомбинациюСтатусовОтражениеВНУ(Строка.ОтражениеВУСН, СтрокаПартии.СтатусСписания);
				Если ЗначениеЗаполнено(СтрокаПартии.СтатусСписания) Тогда
					НоваяСтрока.СтатусСписания = НовыйСтатус;
					НоваяСтрока.КоличествоПоСтатусуСписания = КоличествоСписания;
				КонецЕсли;

				Если Строка.Количество <> КоличествоСписания Тогда
					К = КоличествоСписания / Строка.Количество;
					НоваяСтрока.Количество 	= Окр(КоличествоСписания,3,1);
					НоваяСтрока.Сумма	 	= Окр(К*НоваяСтрока.Сумма,3,1);
					НоваяСтрока.НДС 		= Окр(К*НоваяСтрока.НДС,3,1);
				КонецЕсли;
				
				Строка.Количество 	=  Строка.Количество - НоваяСтрока.Количество;
				Строка.Сумма 		=  Строка.Сумма - НоваяСтрока.Сумма;
				Строка.НДС 			=  Строка.НДС - НоваяСтрока.НДС;

				КоличествоСписанияРД = КоличествоСписанияРД - КоличествоСписания;
				СтрокаРасчетныйДокумент.Количество = СтрокаРасчетныйДокумент.Количество - КоличествоСписания;
			КонецЦикла;

		КонецЦикла;

		//Разложим таблицу списываемых расходов на движения корректировки статуса и принятые расходы.
		ТаблицыДвижений = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаДляСписания, , "Списание", Ложь);
		
		ВыделитьТаможенныйНДСВПринятыхРасходах(ТаблицыДвижений);
		
		ТаблицыДвижений.ТаблицаПриход.ЗаполнитьЗначения(Перечисления.СтатусыПартийУСН.Списанные,"СтатусыПартийУСН");
		ТаблицыДвижений.ТаблицаПриход.ЗаполнитьЗначения(СтрокаПартии.Регистратор,"Партия");
		ТаблицыДвижений.ТаблицаПринятых.ЗаполнитьЗначения(СтрокаПартии.Регистратор,"Партия");
		ДвиженияРегистров = СобратьТаблицыДвижений(ТаблицыДвижений,,,ДвиженияРегистров);

	КонецЦикла;

КонецПроцедуры

//Отражает прочее (настроенное вручную) движение денежных средств в КУДиР
//
Процедура ПрочееДДС(Документ, ДвиженияРегистров, КУДиР) Экспорт

	Если (Документ.Графа4_УСН = 0) И
		(Документ.Графа5_УСН = 0) И
		(Документ.Графа6_УСН = 0) И
		(Документ.Графа7_УСН = 0) И
		(Документ.НДС_УСН = 0) Тогда

		Возврат;
	КонецЕсли;

	КУДиР.Графа4			= Документ.Графа4_УСН;

	Если Документ.ДоходыЕНВД_УСН Тогда
        КУДиР.ДоходЕНВД = Документ.Графа4_УСН - Документ.Графа5_УСН;
	Иначе
		КУДиР.Графа5 = Документ.Графа5_УСН;
	КонецЕсли;

	КУДиР.Графа6 = Документ.Графа6_УСН;

	МетаданныеДокумента = Документ.Метаданные();
	
	ВалютаРеглУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВидОперации", МетаданныеДокумента)
		И УчетУСН.ЕстьПрочиеРасчетыПоРасходам(Документ.ВидОперации) Тогда
		// расходы указаны в табличной части
		ЕстьНДС = ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("НДСУСН", МетаданныеДокумента, "РасшифровкаПлатежа");
		
		Для каждого СтрокаТЧ Из Документ.РасшифровкаПлатежа Цикл
			
			Если СтрокаТЧ.РаспределятьРасходыУСН Тогда
				
				Если ДвиженияРегистров = Неопределено Тогда
					ДвиженияРегистров = Новый Структура("ВзаиморасчетыРасход, РасходыУСН, КУДиР, ТаблицаПриход",
						Новый ТаблицаЗначений, Новый ТаблицаЗначений, Новый ТаблицаЗначений, Новый ТаблицаЗначений);
					ДвиженияРегистров.РасходыУСН = РегистрыНакопления.РасходыПриУСН.СоздатьНаборЗаписей().ВыгрузитьКолонки();
				КонецЕсли;
				
				СтрокаРасхода 							= ДвиженияРегистров.РасходыУСН.Добавить();
				СтрокаРасхода.Период					= Документ.Дата;
				СтрокаРасхода.Регистратор 				= Документ;
				СтрокаРасхода.ВидДвижения 				= ВидДвиженияНакопления.Приход;
				СтрокаРасхода.Активность 				= Истина;
				СтрокаРасхода.Организация 				= Документ.Организация;
				СтрокаРасхода.ОтражениеВУСН 			= Перечисления.ОтражениеВУСН.Распределяются;
				СтрокаРасхода.СтатусыОплатыРасходовУСН 	= Перечисления.СтатусыРасходовУСН.НеРаспределено;
				СтрокаРасхода.РасчетныйДокумент 		= Документ;
				СтрокаРасхода.Сумма 					= СтрокаТЧ.РасходыУСН;
				СтрокаРасхода.НДС 						= ?(ЕстьНДС, СтрокаТЧ.НДСУСН, 0);
				СтрокаРасхода.Валюта 					= ВалютаРеглУчета;
				
			Иначе
				
				КУДиР.Графа7 = КУДиР.Графа7 + СтрокаТЧ.РасходыУСН;
				КУДиР.НДС    = КУДиР.НДС    + ?(ЕстьНДС, СтрокаТЧ.НДСУСН, 0);
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		// расходы в шапке
		Если Документ.РасходыЕНВД_УСН Тогда
			
			Если ДвиженияРегистров = Неопределено Тогда
				ДвиженияРегистров = Новый Структура("ВзаиморасчетыРасход, РасходыУСН, КУДиР, ТаблицаПриход",
					Новый ТаблицаЗначений, Новый ТаблицаЗначений, Новый ТаблицаЗначений, Новый ТаблицаЗначений);
				ДвиженияРегистров.РасходыУСН = РегистрыНакопления.РасходыПриУСН.СоздатьНаборЗаписей().ВыгрузитьКолонки();
			КонецЕсли;
			
			СтрокаРасхода 							= ДвиженияРегистров.РасходыУСН.Добавить();
			СтрокаРасхода.Период					= Документ.Дата;
			СтрокаРасхода.Регистратор 				= Документ;
			СтрокаРасхода.ВидДвижения 				= ВидДвиженияНакопления.Приход;
			СтрокаРасхода.Активность 				= Истина;
			СтрокаРасхода.Организация 				= Документ.Организация;
			СтрокаРасхода.ОтражениеВУСН 			= Перечисления.ОтражениеВУСН.Распределяются;
			СтрокаРасхода.СтатусыОплатыРасходовУСН 	= Перечисления.СтатусыРасходовУСН.НеРаспределено;
			СтрокаРасхода.РасчетныйДокумент 		= Документ;
			СтрокаРасхода.Сумма 					= Документ.Графа7_УСН;
			СтрокаРасхода.НДС 						= Документ.НДС_УСН;
			СтрокаРасхода.Валюта 					= ВалютаРеглУчета;
			
		Иначе
			
			КУДиР.Графа7 = Документ.Графа7_УСН;
			КУДиР.НДС    = Документ.НДС_УСН;
			
		КонецЕсли;
	КонецЕсли; 

	КУДиР.Содержание = Документ.Содержание_УСН;

КонецПроцедуры

//Начисление ЗП документом отражение зарплаты в регл. учете
//
Процедура НачислениеЗП(СтруктураШапкиДокумента, ДвиженияРегистров, КУДиР, Параметры)

	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоНалогам);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоСоциальномуСтрахованию);
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;	
	Запрос.УстановитьПараметр("ТаблицаУСННачислениеЗарплаты", Параметры.ТаблицаУСННачислениеЗарплаты);
	Запрос.УстановитьПараметр("Счет70", 		
		БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда));
	Запрос.УстановитьПараметр("СчетаНалогов", 	МассивСчетов);
	Запрос.УстановитьПараметр("Зарплата", 		Перечисления.ВидыРасходовУСН.Зарплата);
	Запрос.УстановитьПараметр("Налоги", 	  	Перечисления.ВидыРасходовУСН.Налоги);
	Запрос.УстановитьПараметр("Сводно", 	  	Справочники.ФизическиеЛица.ПустаяСсылка());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИсхТаб.Счет,
	|	ИсхТаб.Субконто1,
	|	ИсхТаб.Субконто2,
	|	ИсхТаб.Субконто3,
	|	ИсхТаб.КорСчет,
	|	ИсхТаб.КорСубконто1,
	|	ИсхТаб.КорСубконто2,
	|	ИсхТаб.КорСубконто3,
	|	ИсхТаб.Сумма,
	|	ИсхТаб.ОтражениеВУСН
	|ПОМЕСТИТЬ ОтражениеВУчете
	|ИЗ
	|	&ТаблицаУСННачислениеЗарплаты КАК ИсхТаб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ ВТ_СчетаНалогов
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетаНалогов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Зарплата КАК ВидРасхода,
	|	ОтражениеЗарплатыВУчетеУСН.КорСубконто1 КАК ЭлементРасхода,
	|	НЕОПРЕДЕЛЕНО КАК СчетУчета,
	|	ОтражениеЗарплатыВУчетеУСН.Сумма КАК Сумма,
	|	ОтражениеЗарплатыВУчетеУСН.ОтражениеВУСН КАК ОтражениеВУСН
	|ИЗ
	|	ОтражениеВУчете КАК ОтражениеЗарплатыВУчетеУСН
	|ГДЕ
	|	НЕ ОтражениеЗарплатыВУчетеУСН.КорСубконто1 = &Сводно
	|	И НЕ ОтражениеЗарплатыВУчетеУСН.КорСубконто1 = НЕОПРЕДЕЛЕНО
	|	И НЕ ОтражениеЗарплатыВУчетеУСН.КорСубконто1 ССЫЛКА Перечисление.ВидыНачисленийОплатыТрудаДляНУ
	|	И ОтражениеЗарплатыВУчетеУСН.КорСчет В(&Счет70)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Зарплата,
	|	ОтражениеЗарплатыВУчетеУСН.Субконто1,
	|	НЕОПРЕДЕЛЕНО,
	|	-ОтражениеЗарплатыВУчетеУСН.Сумма,
	|	ОтражениеЗарплатыВУчетеУСН.ОтражениеВУСН
	|ИЗ
	|	ОтражениеВУчете КАК ОтражениеЗарплатыВУчетеУСН
	|ГДЕ
	|	НЕ ОтражениеЗарплатыВУчетеУСН.Субконто1 = &Сводно
	|	И НЕ ОтражениеЗарплатыВУчетеУСН.Субконто1 = НЕОПРЕДЕЛЕНО
	|	И НЕ ОтражениеЗарплатыВУчетеУСН.Субконто1 ССЫЛКА Перечисление.ВидыНачисленийОплатыТрудаДляНУ
	|	И ОтражениеЗарплатыВУчетеУСН.Счет В(&Счет70)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Налоги,
	|	НЕОПРЕДЕЛЕНО,
	|	ОтражениеЗарплатыВУчетеУСН.КорСчет,
	|	ОтражениеЗарплатыВУчетеУСН.Сумма,
	|	ОтражениеЗарплатыВУчетеУСН.ОтражениеВУСН
	|ИЗ
	|	ОтражениеВУчете КАК ОтражениеЗарплатыВУчетеУСН
	|ГДЕ
	|	ОтражениеЗарплатыВУчетеУСН.КорСчет В
	|			(ВЫБРАТЬ
	|				ВТ_СчетаНалогов.Счет
	|			ИЗ
	|				ВТ_СчетаНалогов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.Счет КАК СчетУчета,
	|	СУММА(ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.Сумма) КАК Сумма
	|ИЗ
	|	ОтражениеВУчете КАК ОтражениеЗарплатыВРеглУчетеОтражениеВУчете
	|ГДЕ
	|	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.Счет В
	|			(ВЫБРАТЬ
	|				ВТ_СчетаНалогов.Счет
	|			ИЗ
	|				ВТ_СчетаНалогов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.Счет";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаРасходов = РезультатыЗапроса[2].Выгрузить();
	ТаблицаРасходов.Индексы.Добавить("ВидРасхода, ЭлементРасхода,СчетУчета,ОтражениеВУСН,Сумма");
	
	ТаблицаЗачетаНалогов = РезультатыЗапроса[3].Выгрузить();
	ТаблицаЗачетаНалогов.Индексы.Добавить("СчетУчета");
	
	//Обработать удержания с незаполненным порядком признания расходов
	
	КоличествоСтрок = ТаблицаРасходов.Количество();
	Для НС = 0 по КоличествоСтрок - 1 Цикл
	
		ТекСтрока = ТаблицаРасходов[НС];
	
		Если (ТекСтрока.ВидРасхода = Перечисления.ВидыРасходовУСН.Зарплата) И
			(ТекСтрока.Сумма < 0) И
			(НЕ ЗначениеЗаполнено(ТекСтрока.ОтражениеВУСН)) Тогда
	
			СуммаКРаспределению = ТекСтрока.Сумма;
	
			//Распределим удержание
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("ВидРасхода",  	ТекСтрока.ВидРасхода);
			СтруктураОтбора.Вставить("ЭлементРасхода", 	ТекСтрока.ЭлементРасхода);
	
			НайденныеСтроки = ТаблицаРасходов.НайтиСтроки(СтруктураОтбора);
	
			БазаПринимаемых = 0;
			БазаНеПринимаемых = 0;
			Для Каждого НайденнаяСтрока ИЗ НайденныеСтроки Цикл
	
				Если НайденнаяСтрока.Сумма < 0 Тогда
					Продолжить;
				КонецЕсли;
	
				Если НайденнаяСтрока.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются Тогда
					БазаПринимаемых = БазаПринимаемых + НайденнаяСтрока.Сумма;
				Иначе
					БазаНеПринимаемых = БазаНеПринимаемых + НайденнаяСтрока.Сумма;
				КонецЕсли;
	
			КонецЦикла;
	
			СуммаПринимаемых = ?(БазаПринимаемых = 0, 0, СуммаКРаспределению * БазаПринимаемых / (БазаПринимаемых + БазаНеПринимаемых));
			СуммаНеПринимаемых = СуммаКРаспределению - СуммаПринимаемых;
	
			Если СуммаПринимаемых = 0 Тогда
				ТекСтрока.ОтражениеВУСН = Перечисления.ОтражениеВУСН.НеПринимаются;
			ИначеЕсли СуммаНеПринимаемых = 0 Тогда
				ТекСтрока.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
			ИначеЕсли НЕ СуммаКРаспределению = 0 Тогда
				ТекСтрока.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
				ТекСтрока.Сумма = СуммаПринимаемых;
	
				НоваяСтрока 				= ТаблицаРасходов.Добавить();
				НоваяСтрока.ВидРасхода 		= ТекСтрока.ВидРасхода;
				НоваяСтрока.ЭлементРасхода	= ТекСтрока.ЭлементРасхода;
				НоваяСтрока.СчетУчета 		= ТекСтрока.СчетУчета;
				НоваяСтрока.ОтражениеВУСН 	= Перечисления.ОтражениеВУСН.НеПринимаются;
				НоваяСтрока.Сумма	 		= СуммаНеПринимаемых;
			КонецЕсли;
	
			//Если это НДФЛ - ищем среди налогов
	
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("ВидРасхода",  	Перечисления.ВидыРасходовУСН.Налоги);
			СтруктураОтбора.Вставить("ЭлементРасхода", 	Неопределено);
			СтруктураОтбора.Вставить("СчетУчета", 		ПланыСчетов.Хозрасчетный.НДФЛ);
			СтруктураОтбора.Вставить("ОтражениеВУСН",  	Перечисления.ОтражениеВУСН.ПустаяСсылка());
			СтруктураОтбора.Вставить("Сумма", 			- СуммаКРаспределению);
	
			НайденныеСтроки = ТаблицаРасходов.НайтиСтроки(СтруктураОтбора);
	
			Если НайденныеСтроки.Количество() > 0 Тогда
				СтрокаНДФЛ = НайденныеСтроки[0];
	
				Если СуммаПринимаемых = 0 Тогда
					СтрокаНДФЛ.ОтражениеВУСН = Перечисления.ОтражениеВУСН.НеПринимаются;
				ИначеЕсли СуммаНеПринимаемых = 0 Тогда
					СтрокаНДФЛ.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
				ИначеЕсли НЕ СуммаКРаспределению = 0 Тогда
					СтрокаНДФЛ.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
					СтрокаНДФЛ.Сумма = - СуммаПринимаемых;
	
					НоваяСтрока 				= ТаблицаРасходов.Добавить();
					НоваяСтрока.ВидРасхода 		= СтрокаНДФЛ.ВидРасхода;
					НоваяСтрока.ЭлементРасхода	= СтрокаНДФЛ.ЭлементРасхода;
					НоваяСтрока.СчетУчета 		= СтрокаНДФЛ.СчетУчета;
					НоваяСтрока.ОтражениеВУСН 	= Перечисления.ОтражениеВУСН.НеПринимаются;
					НоваяСтрока.Сумма	 		= - СуммаНеПринимаемых;
				КонецЕсли;
	
			КонецЕсли;
	
		ИначеЕсли (ТекСтрока.ВидРасхода = Перечисления.ВидыРасходовУСН.Зарплата) И
			(НЕ ЗначениеЗаполнено(ТекСтрока.ОтражениеВУСН)) Тогда
	
			ТекСтрока.ОтражениеВУСН = Перечисления.ОтражениеВУСН.НеПринимаются;
	
		КонецЕсли;
	
	КонецЦикла;
	
	ТаблицаРасходов.Свернуть("ВидРасхода, ЭлементРасхода, СчетУчета, ОтражениеВУСН", "Сумма");
	ТаблицаРасходов.Сортировать("ВидРасхода, ЭлементРасхода, СчетУчета, ОтражениеВУСН");
	ТаблицаРасходов.Колонки.Добавить("Валюта");
	ТаблицаРасходов.Колонки.Добавить("РасчетныйДокумент");
	ТаблицаРасходов.Колонки.Добавить("СтатусыОплатыРасходовУСН");
	ТаблицаРасходов.Колонки.Добавить("НДС");
	ТаблицаРасходов.Колонки.Добавить("ДокументОплаты");
	
	ТаблицаРасходов.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВалютаВзаиморасчетов, "Валюта");
	ТаблицаРасходов.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка, "РасчетныйДокумент");
	ТаблицаРасходов.ЗаполнитьЗначения(Перечисления.СтатусыРасходовУСН.НеОплачено, "СтатусыОплатыРасходовУСН");
	ТаблицаРасходов.ЗаполнитьЗначения(0, "НДС");
	
	МассивРаботников = ТаблицаРасходов.ВыгрузитьКолонку("ЭлементРасхода");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивРаботников);
	
	//Формирование таблицы фильтров
	ТаблицаФильтров = Новый ТаблицаЗначений;
	ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
	ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
	ТаблицаФильтров.Колонки.Добавить("Условие");
	
	//Расчеты с работниками
	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "Контрагент";
	Фильтр.ЗначениеПоля		= МассивРаботников;
	Фильтр.Условие			= "В";
	
	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "СчетУчета";
	Фильтр.ЗначениеПоля		= ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
	Фильтр.Условие			= "=";
	
	ТаблицаПлатежей = ВыполнитьЗапросПоВзаиморасчетамПрочееУСН(Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая), СтруктураШапкиДокумента.Организация, ТаблицаФильтров);
	ТаблицаПлатежей.Индексы.Добавить("Контрагент");
	
	ТаблицаФильтров.Очистить();
	
	МассивСчетов = ТаблицаРасходов.ВыгрузитьКолонку("СчетУчета");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивСчетов);
	
	//Расчеты по налогам
	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "СчетУчета";
	Фильтр.ЗначениеПоля		= МассивСчетов;
	Фильтр.Условие			= "В";
	
	ТаблицаПлатежейНалогов = ВыполнитьЗапросПоВзаиморасчетамПрочееУСН(Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая), СтруктураШапкиДокумента.Организация, ТаблицаФильтров);
	ТаблицаПлатежейНалогов.Индексы.Добавить("СчетУчета");
	
	ТаблицаДвиженияВзаиморасчетов = ТаблицаПлатежей.СкопироватьКолонки();
	ТаблицаДвиженияРасходов = ТаблицаРасходов.СкопироватьКолонки();
	ТаблицаДвиженияРасходов.Колонки.Добавить("КлючУникальности");
	
	//Заполняем таблицу списываемых расходов по таблице расходов
	Для Каждого Расход Из ТаблицаРасходов Цикл
		
		СуммаОсталосьПогасить = Расход.Сумма;
		
		//Учтем начисления за счет ФСС
		Если Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.Налоги
			И ТаблицаЗачетаНалогов.Количество() > 0 Тогда
			
			НайденныеСтроки = ТаблицаЗачетаНалогов.НайтиСтроки(Новый Структура("СчетУчета",  Расход.СчетУчета));
			
			Для Каждого Строка Из НайденныеСтроки Цикл
				Если СуммаОсталосьПогасить <= 0 Тогда
					Прервать;
				КонецЕсли;
				Если Строка.Сумма <= 0 Тогда
					Продолжить;
				КонецЕсли;
				
				СуммаСписания = Мин(Строка.Сумма, СуммаОсталосьПогасить);
				СуммаОсталосьПогасить = СуммаОсталосьПогасить - СуммаСписания;
				
				НоваяСтрокаРасходов = ТаблицаДвиженияРасходов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаРасходов, Расход);
				
				НоваяСтрокаРасходов.КлючУникальности = Расход.СчетУчета;
				НоваяСтрокаРасходов.Сумма = Мин(Расход.Сумма, СуммаСписания);
				
				Строка.Сумма = Строка.Сумма - СуммаСписания;
			КонецЦикла;
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура;
		Если Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.Зарплата Тогда
			СтруктураОтбора.Вставить("Контрагент",  Расход.ЭлементРасхода);
			НайденныеСтроки = ТаблицаПлатежей.НайтиСтроки(СтруктураОтбора);
		Иначе
			СтруктураОтбора.Вставить("СчетУчета",  Расход.СчетУчета);
			НайденныеСтроки = ТаблицаПлатежейНалогов.НайтиСтроки(СтруктураОтбора);
		КонецЕсли;
	
		Для Каждого Строка Из НайденныеСтроки Цикл
			Если СуммаОсталосьПогасить <= 0 Тогда
				Прервать;
			КонецЕсли;
			Если Строка.Сумма <= 0 Тогда
				Продолжить;
			КонецЕсли;
	
			СуммаСписания = Мин(Строка.Сумма, СуммаОсталосьПогасить);
			СуммаОсталосьПогасить = СуммаОсталосьПогасить - СуммаСписания;
	
			НоваяСтрока = ТаблицаДвиженияВзаиморасчетов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	
			НоваяСтрокаРасходов = ТаблицаДвиженияРасходов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРасходов, Расход);
	
			Если НЕ Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.Зарплата Тогда
				НоваяСтрокаРасходов.КлючУникальности = Расход.СчетУчета;
			КонецЕсли;
			
			НоваяСтрокаРасходов.ДокументОплаты = Строка.РасчетныйДокумент;
			
			НоваяСтрока.Сумма = Мин(Строка.Сумма, СуммаСписания);
			НоваяСтрокаРасходов.Сумма = Мин(Расход.Сумма, СуммаСписания);
	
			Строка.Сумма = Строка.Сумма - СуммаСписания;
	
		КонецЦикла;
		Если СуммаОсталосьПогасить > 0 Тогда
			Если Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.Зарплата Тогда
				ДвижениеВзиморасчетовПрочееУСН(ТаблицаДвиженияВзаиморасчетов, СтруктураШапкиДокумента.Организация, Расход.ЭлементРасхода, СтруктураШапкиДокумента.Ссылка, ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда, СуммаОсталосьПогасить);
			Иначе
				ДвижениеВзиморасчетовПрочееУСН(ТаблицаДвиженияВзаиморасчетов, СтруктураШапкиДокумента.Организация, , СтруктураШапкиДокумента.Ссылка, Расход.СчетУчета, СуммаОсталосьПогасить);
			КонецЕсли;
		КонецЕсли;
	
	КонецЦикла;
	
	ТаблицыДвиженийРез = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаДвиженияРасходов, , "НачислениеЗП", Ложь);
	
	Если ТаблицаДвиженияВзаиморасчетов.Колонки.Найти("ВидДвижения") = Неопределено Тогда
		ТаблицаДвиженияВзаиморасчетов.Колонки.Добавить("ВидДвижения");
	КонецЕсли;
	ТаблицаДвиженияВзаиморасчетов.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход,"ВидДвижения");
	
	ДвиженияРегистров = СобратьТаблицыДвижений(ТаблицыДвиженийРез, ТаблицаДвиженияВзаиморасчетов, ТаблицаРасходов, );
	
	Если ТаблицаЗачетаНалогов.Итог("Сумма") > 0 Тогда
		ТаблицаЗачетаНалогов.Колонки.СчетУчета.Имя = "ДоговорКонтрагента";
		КУДиР_Оплаты = Новый Структура("ДоходЕНВД, Графа4, Графа5, Графа6, Графа7, НДС, Содержание", 0,0,0,0,0,0,"");
		ОплатаПрочееУСН(СтруктураШапкиДокумента, ТаблицаЗачетаНалогов, ДвиженияРегистров, КУДиР_Оплаты, "Налог");
	КонецЕсли;

КонецПроцедуры

// Отражение расходов по начисленным страховым взносам ИП
//
Процедура НачислениеСтраховыхВзносовИП(СтруктураШапкиДокумента, ДвиженияРегистров, КУДиР, Параметры)

	ПлательщикЕНВД = УчетнаяПолитика.ПлательщикЕНВД(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата);
	
	ТаблицаВзносов = Параметры.ТаблицаВзносовИП;
	
	ТаблицаПоступленияРасходов = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("РасходыПриУСН");
	ТаблицаПоступленияРасходов.Колонки.Добавить("ВидСтраховогоВзноса");
	ТаблицаПоступленияРасходов.Колонки.Добавить("ДокументОплаты");
	ТаблицаПоступленияРасходов.Колонки.Добавить("ДополнительноеОписание");
	
	ТаблицаСписанияРасходов = ТаблицаПоступленияРасходов.СкопироватьКолонки();
	ТаблицаСписанияРасходов.Колонки.Добавить("КлючУникальности");
	
	// поступление расходов
	
	Для каждого СтраховойВзнос Из ТаблицаВзносов Цикл
		
		Если СтраховойВзнос.ВидСтраховогоВзноса = Перечисления.ВидыСтраховыхВзносовИП.СтраховыеВзносыСДоходов Тогда
			
			// разбиваем взносы на принимаемые и непринимаемые
			СтруктураДоходов = УчетСтраховыхВзносовИП.СтруктураДоходовПоВидамДеятельности(СтруктураШапкиДокумента.Организация,
				НачалоГода(СтраховойВзнос.СтраховойПериод), КонецГода(СтраховойВзнос.СтраховойПериод), Ложь);
			
			// Если перешли на УСН с общего режима, расходы по взносам, начисленным с доходов ИП на общем режиме, отражаются в УСН
			ДоходыНУ    = СтруктураДоходов.СуммаДоходаИП + СтруктураДоходов.СуммаДоходаУСН;
			ДоходыВсего = СтруктураДоходов.СуммаДоходаИП + СтруктураДоходов.СуммаДоходаУСН
						+ СтруктураДоходов.ПотенциальноВозможныйДоход + СтруктураДоходов.ВмененныйДоход;
			
			ДоляВзносовПоПринимаемымДоходам = 0;
			Если ДоходыВсего > 0 Тогда
				ДоляВзносовПоПринимаемымДоходам = ДоходыНУ / ДоходыВсего;
			КонецЕсли;
			
			СуммаПринимаемых = Окр(СтраховойВзнос.Сумма * ДоляВзносовПоПринимаемымДоходам, 2, 1);
			
			Если ДоляВзносовПоПринимаемымДоходам > 0 Тогда
				
				СтрокаРасхода = ТаблицаПоступленияРасходов.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаРасхода, СтраховойВзнос);
				СтрокаРасхода.Сумма = СуммаПринимаемых;
				
				СтрокаРасхода.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
				СтрокаРасхода.ДополнительноеОписание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"Расходы приняты в части взносов, исчисленных с налогооблагаемых доходов за %1",
					ПредставлениеПериода(НачалоГода(СтраховойВзнос.СтраховойПериод), КонецГода(СтраховойВзнос.СтраховойПериод), "ФП=Истина"));
				
			КонецЕсли;
			
			Если ДоляВзносовПоПринимаемымДоходам < 1 Тогда
				
				// есть непринимаемая часть
				СтрокаРасхода = ТаблицаПоступленияРасходов.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаРасхода, СтраховойВзнос);
				СтрокаРасхода.ОтражениеВУСН = Перечисления.ОтражениеВУСН.НеПринимаются;
				СтрокаРасхода.Сумма = СтраховойВзнос.Сумма - СуммаПринимаемых;
				
			КонецЕсли;
			
		Иначе // фиксированные взносы
			СтрокаРасхода = ТаблицаПоступленияРасходов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРасхода, СтраховойВзнос);
			
			Если БухгалтерскийУчетВызовСервераПовтИсп.СчетВИерархии(СтраховойВзнос.СчетУчета, ПланыСчетов.Хозрасчетный.ФСС_СтраховойГод) Тогда
				СтрокаРасхода.ОтражениеВУСН = Перечисления.ОтражениеВУСН.НеПринимаются;
			Иначе
				СтрокаРасхода.ОтражениеВУСН = ?(ПлательщикЕНВД,
					Перечисления.ОтражениеВУСН.Распределяются,
					Перечисления.ОтражениеВУСН.Принимаются);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаПоступленияРасходов.ЗаполнитьЗначения(Перечисления.ВидыРасходовУСН.Налоги, "ВидРасхода");
	ТаблицаПоступленияРасходов.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВалютаВзаиморасчетов, "Валюта");
	ТаблицаПоступленияРасходов.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка, "РасчетныйДокумент");
	ТаблицаПоступленияРасходов.ЗаполнитьЗначения(Перечисления.СтатусыРасходовУСН.НеОплачено, "СтатусыОплатыРасходовУСН");
	ТаблицаПоступленияРасходов.ЗаполнитьЗначения(0, "НДС");
	
	// списание оплаченных расходов и отражение в КУДиР
	
	МассивСчетовУчета = ТаблицаВзносов.ВыгрузитьКолонку("СчетУчета");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивСчетовУчета);
	
	//Формирование таблицы фильтров
	ТаблицаФильтров = Новый ТаблицаЗначений;
	ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
	ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
	ТаблицаФильтров.Колонки.Добавить("Условие");
	
	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "СчетУчета";
	Фильтр.ЗначениеПоля		= МассивСчетовУчета;
	Фильтр.Условие			= "В";
	
	УстановитьБлокировкиПоТаблицеФильтров("ПрочиеРасчеты", ТаблицаФильтров, , СтруктураШапкиДокумента.Организация);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Граница",     СтруктураШапкиДокумента.Ссылка.МоментВремени());
	Запрос.УстановитьПараметр("СчетаУчета",  МассивСчетовУчета);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрочиеРасчетыОстатки.Организация,
	|	ПрочиеРасчетыОстатки.Контрагент,
	|	ПрочиеРасчетыОстатки.СчетУчета,
	|	ПрочиеРасчетыОстатки.РасчетныйДокумент,
	|	ВЫБОР
	|		КОГДА ПрочиеРасчетыОстатки.РасчетныйДокумент ССЫЛКА Документ.СписаниеСРасчетногоСчета
	|			ТОГДА ВЫБОР
	|					КОГДА ПрочиеРасчетыОстатки.РасчетныйДокумент.СубконтоДт2 ССЫЛКА Перечисление.ВидыСтраховыхВзносовИП
	|						ТОГДА ПрочиеРасчетыОстатки.РасчетныйДокумент.СубконтоДт2
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыСтраховыхВзносовИП.ФиксированныеСтраховыеВзносы)
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыСтраховыхВзносовИП.ФиксированныеСтраховыеВзносы)
	|	КОНЕЦ КАК ВидСтраховогоВзноса,
	|	ПрочиеРасчетыОстатки.РасчетныйДокумент.Дата КАК РасчетныйДокументДата,
	|	ПрочиеРасчетыОстатки.СуммаОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.ПрочиеРасчеты.Остатки(
	|			&Граница,
	|			Организация = &Организация
	|				И СчетУчета В (&СчетаУчета)) КАК ПрочиеРасчетыОстатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	РасчетныйДокументДата";
	
	ТаблицаПлатежей = Запрос.Выполнить().Выгрузить();
	
	ТаблицаПлатежей.Индексы.Добавить("СчетУчета");
	ТаблицаПлатежей.Индексы.Добавить("ВидСтраховогоВзноса");
	
	ТаблицаДвиженияВзаиморасчетов = ТаблицаПлатежей.СкопироватьКолонки();
	
	//Заполняем таблицу списываемых расходов по таблице расходов
	Для Каждого Расход Из ТаблицаПоступленияРасходов Цикл
		
		СуммаОсталосьПогасить = Расход.Сумма;
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("СчетУчета",  Расход.СчетУчета);
		СтруктураОтбора.Вставить("ВидСтраховогоВзноса",  Расход.ВидСтраховогоВзноса);
		НайденныеСтроки = ТаблицаПлатежей.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого Строка Из НайденныеСтроки Цикл
			
			Если СуммаОсталосьПогасить <= 0 Тогда
				Прервать;
			КонецЕсли;
			Если Строка.Сумма <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СуммаСписания = Мин(Строка.Сумма, СуммаОсталосьПогасить);
			СуммаОсталосьПогасить = СуммаОсталосьПогасить - СуммаСписания;
			
			НоваяСтрокаРасходов = ТаблицаСписанияРасходов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРасходов, Расход);
			
			НоваяСтрокаРасходов.КлючУникальности = Расход.СчетУчета;
			НоваяСтрокаРасходов.ДокументОплаты   = Строка.РасчетныйДокумент;
			
			НоваяСтрока = ТаблицаДвиженияВзаиморасчетов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			
			НоваяСтрока.Сумма = Мин(Строка.Сумма, СуммаСписания);
			НоваяСтрокаРасходов.Сумма = Мин(Расход.Сумма, СуммаСписания);
			
			Строка.Сумма = Строка.Сумма - СуммаСписания;
			
		КонецЦикла;
		
		Если СуммаОсталосьПогасить > 0 Тогда
			ДвижениеВзиморасчетовПрочееУСН(ТаблицаДвиженияВзаиморасчетов, СтруктураШапкиДокумента.Организация, , СтруктураШапкиДокумента.Ссылка, Расход.СчетУчета, СуммаОсталосьПогасить);
		КонецЕсли;
	
	КонецЦикла;
	
	ТаблицыДвиженийРез = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаСписанияРасходов, , "НачислениеСтраховыхВзносовИП", Ложь);
	
	Если ТаблицаДвиженияВзаиморасчетов.Колонки.Найти("ВидДвижения") = Неопределено Тогда
		ТаблицаДвиженияВзаиморасчетов.Колонки.Добавить("ВидДвижения");
	КонецЕсли;
	ТаблицаДвиженияВзаиморасчетов.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход,"ВидДвижения");
	
	ДвиженияРегистров = СобратьТаблицыДвижений(ТаблицыДвиженийРез, ТаблицаДвиженияВзаиморасчетов, ТаблицаПоступленияРасходов, );

КонецПроцедуры

// Отражение расходов по начисленным имущественным налогам:
// транспортный налог, земельный налог; с 2015 года - налог на имущество.
//
Процедура НачислениеИмущественныхНалогов(СтруктураШапкиДокумента, ДвиженияРегистров, КУДиР, Параметры)

	ТаблицаНалогов = Параметры.ТаблицаРасходов;
	
	ТаблицаПоступленияРасходов = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("РасходыПриУСН");
	ТаблицаПоступленияРасходов.Колонки.Добавить("ДокументОплаты");
	
	ТаблицаСписанияРасходов = ТаблицаПоступленияРасходов.СкопироватьКолонки();
	ТаблицаСписанияРасходов.Колонки.Добавить("КлючУникальности");
	
	// поступление расходов
	
	Для каждого СтрокаНалога Из ТаблицаНалогов Цикл
		СтрокаРасхода = ТаблицаПоступленияРасходов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРасхода, СтрокаНалога);
	КонецЦикла;
	
	ТаблицаПоступленияРасходов.ЗаполнитьЗначения(Перечисления.ВидыРасходовУСН.Налоги, "ВидРасхода");
	ТаблицаПоступленияРасходов.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВалютаВзаиморасчетов, "Валюта");
	ТаблицаПоступленияРасходов.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка, "РасчетныйДокумент");
	ТаблицаПоступленияРасходов.ЗаполнитьЗначения(Перечисления.СтатусыРасходовУСН.НеОплачено, "СтатусыОплатыРасходовУСН");
	ТаблицаПоступленияРасходов.ЗаполнитьЗначения(0, "НДС");
	
	// списание оплаченных расходов и отражение в КУДиР
	
	МассивСчетовУчета = ТаблицаНалогов.ВыгрузитьКолонку("СчетУчета");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивСчетовУчета);
	
	//Формирование таблицы фильтров
	ТаблицаФильтров = Новый ТаблицаЗначений;
	ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
	ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
	ТаблицаФильтров.Колонки.Добавить("Условие");
	
	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "СчетУчета";
	Фильтр.ЗначениеПоля		= МассивСчетовУчета;
	Фильтр.Условие			= "В";
	
	ТаблицаПлатежей = ВыполнитьЗапросПоВзаиморасчетамПрочееУСН(
		Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая),
		СтруктураШапкиДокумента.Организация,
		ТаблицаФильтров);
	ТаблицаПлатежей.Индексы.Добавить("СчетУчета");
	
	ТаблицаДвиженияВзаиморасчетов = ТаблицаПлатежей.СкопироватьКолонки();
	
	//Заполняем таблицу списываемых расходов по таблице расходов
	Для Каждого Расход Из ТаблицаПоступленияРасходов Цикл
		
		СуммаОсталосьПогасить = Расход.Сумма;
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("СчетУчета",  Расход.СчетУчета);
		НайденныеСтроки = ТаблицаПлатежей.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого Строка Из НайденныеСтроки Цикл
			
			Если СуммаОсталосьПогасить <= 0 Тогда
				Прервать;
			КонецЕсли;
			Если Строка.Сумма <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СуммаСписания = Мин(Строка.Сумма, СуммаОсталосьПогасить);
			СуммаОсталосьПогасить = СуммаОсталосьПогасить - СуммаСписания;
			
			НоваяСтрокаРасходов = ТаблицаСписанияРасходов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРасходов, Расход);
			
			НоваяСтрокаРасходов.КлючУникальности = Расход.СчетУчета;
			НоваяСтрокаРасходов.ДокументОплаты   = Строка.РасчетныйДокумент;
			
			НоваяСтрока = ТаблицаДвиженияВзаиморасчетов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			
			НоваяСтрока.Сумма = Мин(Строка.Сумма, СуммаСписания);
			НоваяСтрокаРасходов.Сумма = Мин(Расход.Сумма, СуммаСписания);
			
			Строка.Сумма = Строка.Сумма - СуммаСписания;
			
		КонецЦикла;
		
		Если СуммаОсталосьПогасить > 0 Тогда
			ДвижениеВзиморасчетовПрочееУСН(ТаблицаДвиженияВзаиморасчетов, СтруктураШапкиДокумента.Организация, , СтруктураШапкиДокумента.Ссылка, Расход.СчетУчета, СуммаОсталосьПогасить);
		КонецЕсли;
	
	КонецЦикла;
	
	ТаблицыДвиженийРез = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаСписанияРасходов, , "НачислениеИмущественныхНалогов", Ложь);
	
	Если ТаблицаДвиженияВзаиморасчетов.Колонки.Найти("ВидДвижения") = Неопределено Тогда
		ТаблицаДвиженияВзаиморасчетов.Колонки.Добавить("ВидДвижения");
	КонецЕсли;
	ТаблицаДвиженияВзаиморасчетов.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход,"ВидДвижения");
	
	ДвиженияРегистров = СобратьТаблицыДвижений(ТаблицыДвиженийРез, ТаблицаДвиженияВзаиморасчетов, ТаблицаПоступленияРасходов, );

КонецПроцедуры

//Расчет и списание расходов будущих периодов
//
Процедура СписаниеРБПУСН(СтруктураШапкиДокумента, ДвиженияРегистров, КУДиР)

	Заголовок = "Списание РБП для целей УСН";

	Статусы = Новый Массив;
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено);
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписано);

	//Формирование таблицы фильтров
	ТаблицаФильтров = Новый ТаблицаЗначений;
	ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
	ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
	ТаблицаФильтров.Колонки.Добавить("Условие");

	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "ВидРасхода";
	Фильтр.ЗначениеПоля		= Перечисления.ВидыРасходовУСН.РБП;
	Фильтр.Условие			= "=";

	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "СтатусыОплатыРасходовУСН";
	Фильтр.ЗначениеПоля	= Статусы;
	Фильтр.Условие			= "В";

	//Из таблицы расходов выбираем соответствующие партии и элементы расходов
	ТаблицаРасходов = ВыполнитьЗапросПоРасходам(Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Включая), СтруктураШапкиДокумента.Организация, ТаблицаФильтров);

	ТаблицаДляСписания = Новый ТаблицаЗначений;
	Для Каждого Кол Из ТаблицаРасходов.Колонки Цикл
		ТаблицаДляСписания.Колонки.Добавить(Кол.Имя, Кол.ТипЗначения);
	КонецЦикла;
	НачМесяца = НачалоМесяца(СтруктураШапкиДокумента.Дата);
	КонМесяца = КонецМесяца(СтруктураШапкиДокумента.Дата);

	//Заполняем таблицу списываемых расходов по таблице расходов и фильтрам партионного учета
	Для Каждого Строка Из ТаблицаРасходов Цикл
		Если Строка.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		РБП = Строка.ЭлементРасхода;

		Если Не ЗначениеЗаполнено(РБП) Тогда
			Продолжить;
		КонецЕсли;

		Если Не ЗначениеЗаполнено(РБП.ДатаНачалаСписания) Тогда
			ТекстСообщения = "В справочнике ""Расходы будущих периодов"" для статьи """+ РБП + """ не заполнен дата начала списания !";
			////? ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Ложь, Заголовок);
			Продолжить;
		КонецЕсли;

		Если Не ЗначениеЗаполнено(РБП.ДатаОкончанияСписания) Тогда
			ТекстСообщения = "В справочнике ""Расходы будущих периодов"" для статьи """+ РБП + """ не заполнен дата окончания списания !";
			////? ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Ложь, Заголовок);
			Продолжить;
		КонецЕсли;

		ВспомогательныеДанныеРасчета = Новый Структура("КоличествоМесяцевДней, КоличествоМесяцевДнейТекущегоПериода", 0, 0);
		ДатаНачала = ?(РБП.ДатаНачалаСписания > НачМесяца, РБП.ДатаНачалаСписания, НачМесяца);
		СуммаСписания = БухгалтерскийУчет.СуммаСписанияЗаМесяц(РБП, ДатаНачала, РБП.ДатаОкончанияСписания, Строка.Сумма, ВспомогательныеДанныеРасчета, НачМесяца, КонМесяца);

		Если НЕ (СуммаСписания > 0.05 Или СуммаСписания < -0.05) Тогда
			Продолжить;
		КонецЕсли;

		НоваяСтрока = ТаблицаДляСписания.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);

		Если Строка.Сумма > СуммаСписания Тогда
			К = СуммаСписания / Строка.Сумма;
			НоваяСтрока.Количество 	= К*НоваяСтрока.Количество;
			НоваяСтрока.Сумма	 	= К*НоваяСтрока.Сумма;
			НоваяСтрока.НДС 		= К*НоваяСтрока.НДС;
		КонецЕсли;
	КонецЦикла;

	//Разложим таблицу списываемых расходов на движения корректировки статуса и принятые расходы
	ТаблицыДвижений = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаДляСписания, , "Списание", Ложь);

	ДвиженияРегистров = СобратьТаблицыДвижений(ТаблицыДвижений,,,);

КонецПроцедуры

 //Расчет и списание расходов будущих периодов
//
Процедура РаспределениеЕНВД(СтруктураШапкиДокумента, ДвиженияРегистров, КУДиР)

	//Формирование таблицы фильтров
	ТаблицаФильтров = Новый ТаблицаЗначений;
	ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
	ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
	ТаблицаФильтров.Колонки.Добавить("Условие");

	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "СтатусыОплатыРасходовУСН";
	Фильтр.ЗначениеПоля		= Перечисления.СтатусыРасходовУСН.НеРаспределено;
	Фильтр.Условие			= "=";
	МетаданныеДокумента = СтруктураШапкиДокумента.Ссылка.Метаданные();
	СтруктураШапкиДокумента.Дата = ?(ОбщегоНазначения.ЕстьРеквизитОбъекта("ПериодРегистрации", МетаданныеДокумента), КонецКвартала(СтруктураШапкиДокумента.Ссылка.ПериодРегистрации), КонецКвартала(СтруктураШапкиДокумента.Дата));

	//Из таблицы расходов выбираем соответствующие партии и элементы расходов
	ТаблицаРасходов = ВыполнитьЗапросПоРасходам(Новый Граница(КонецМесяца(СтруктураШапкиДокумента.Дата), ВидГраницы.Включая), СтруктураШапкиДокумента.Организация, ТаблицаФильтров);

	ТаблицаДляСписания = Новый ТаблицаЗначений;
	Для Каждого Кол Из ТаблицаРасходов.Колонки Цикл
		ТаблицаДляСписания.Колонки.Добавить(Кол.Имя, Кол.ТипЗначения);
	КонецЦикла;

	//Разложим таблицу списываемых расходов на движения корректировки статуса и принятые расходы
	ТаблицыДвижений = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаРасходов, , "РаспределениеЕНВД", Ложь);

	Метод = ?(СтруктураШапкиДокумента.МетодРаспределения = Перечисления.МетодыРаспределенияРасходовУСНПоВидамДеятельности.НарастающимИтогомСНачалаГода, "Год", "Квартал");
	База = ?(СтруктураШапкиДокумента.БазаРаспределения = Перечисления.БазаРаспределенияРасходовУСНПоВидамДеятельности.ДоходыВсегоНУ, "НВ",
			?(СтруктураШапкиДокумента.БазаРаспределения = Перечисления.БазаРаспределенияРасходовУСНПоВидамДеятельности.ДоходыПринимаемыеНУ, "НУ", "БУ"));

	Коэфф = ПолучитьКоэффРаспределенияЕНВД(СтруктураШапкиДокумента, Метод, База);

	ИтогРаспределения = ТаблицыДвижений.ТаблицаПринятых.Итог("Сумма")*Коэфф;
	Распределено = 0;
	МаксПозиция = Неопределено;
	МаксСумма = 0;

	Если (Коэфф = 0) ИЛИ (ТаблицыДвижений.ТаблицаПринятых.Количество() = 0) Тогда
		//Все расходы относятся к УСН или нет распределенных расходов
	ИначеЕсли (Коэфф = 1) И (ТаблицыДвижений.ТаблицаПринятых.Количество() > 0) Тогда
		// Все расходы относятся к ЕНВД, записи в КУДиР не требуются
		ТаблицыДвижений.ТаблицаПринятых.Очистить();
	Иначе
		Для Каждого Расход Из ТаблицыДвижений.ТаблицаПринятых Цикл
			Если Расход.Сумма > 0 Тогда
				Расход.Количество 	= Расход.Количество - Окр(Коэфф*Расход.Количество,3,1);

				Если МаксСумма < Расход.Сумма Тогда
					МаксПозиция = Расход;
					МаксСумма = Расход.Сумма;
				КонецЕсли;
				Распределено = Распределено + Окр(Коэфф*Расход.Сумма,2,1);

				Расход.Сумма	 	= Расход.Сумма - Окр(Коэфф*Расход.Сумма,2,1);
				Расход.НДС 			= Расход.НДС - Окр(Коэфф*Расход.НДС,2,1);
			КонецЕсли;
		КонецЦикла;

		Если (Распределено <> ИтогРаспределения) И (МаксПозиция <> Неопределено) Тогда
			МаксПозиция.Сумма = МаксПозиция.Сумма - (ИтогРаспределения - Распределено);
		КонецЕсли;
	КонецЕсли;

	Если (НЕ Метод = "Квартал") И (НЕ НачалоГода(СтруктураШапкиДокумента.Дата) = НачалоКвартала(СтруктураШапкиДокумента.Дата)) Тогда
		СкорректироватьРаспределениеПредыдущихКварталов(СтруктураШапкиДокумента, Коэфф, ТаблицыДвижений.ТаблицаПринятых);
	КонецЕсли;

	ДвиженияРегистров = СобратьТаблицыДвижений(ТаблицыДвижений,,,);

КонецПроцедуры

//Формирует таблицы движений регистра "Расходы при УСН" по таблице остатков расходов
//на заданную сумму по установленному виду операции
Функция ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаРасходов, Сумма = 0, ВидОперации = "Оплата", КонтролироватьСумму = Истина, ДокументОплаты = Неопределено, ВходящаяСтруктура = Неопределено)

	ВалютаРеглУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();

	ВыделятьНДСУСН = (СтруктураШапкиДокумента.ПорядокПризнанияРасходовПоНДС = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику);

	ТаблицаКорректировкиРасход = Новый ТаблицаЗначений;
	ТаблицаКорректировкиПриход = Новый ТаблицаЗначений;
	ТаблицаПризнанныхРасходов  = Новый ТаблицаЗначений;

	Если ТаблицаРасходов.Колонки.Найти("НДС") = Неопределено Тогда
		ТаблицаРасходов.Колонки.Добавить("НДС");
		ТаблицаРасходов.ЗаполнитьЗначения(0, "НДС");
	КонецЕсли;
	Если ТаблицаРасходов.Колонки.Найти("Количество") = Неопределено Тогда
		ТаблицаРасходов.Колонки.Добавить("Количество");
		ТаблицаРасходов.ЗаполнитьЗначения(0, "Количество");
	КонецЕсли;
	Если ТаблицаРасходов.Колонки.Найти("РеквизитыДокументаОплаты") = Неопределено Тогда
		ТаблицаРасходов.Колонки.Добавить("РеквизитыДокументаОплаты");
	КонецЕсли;

	ТаблицаКорректировкиРасход = ТаблицаРасходов.СкопироватьКолонки();
	ТаблицаКорректировкиПриход = ТаблицаРасходов.СкопироватьКолонки();
	ТаблицаПризнанныхРасходов  = ТаблицаРасходов.СкопироватьКолонки();

	Для Каждого Расход Из ТаблицаРасходов Цикл
		Если ЗначениеЗаполнено(Расход.РеквизитыДокументаОплаты) Тогда
			Отказ = Ложь;
			ВыделятьНДСУСНДокумент = ?(Отказ, ВыделятьНДСУСН, (УчетнаяПолитика.ПорядокПризнанияРасходовПоНДС(СтруктураШапкиДокумента.Организация, Расход.РеквизитыДокументаОплаты.Дата) = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику));
		ИначеЕсли ЗначениеЗаполнено(Расход.РасчетныйДокумент) Тогда
			ДатаПереходаНаУСН = УчетнаяПолитика.ДатаПереходаНаУСН(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата);
			Отказ = НЕ УчетнаяПолитика.Существует(СтруктураШапкиДокумента.Организация, Расход.РасчетныйДокумент.Дата)
				И (ДатаПереходаНаУСН < Расход.РасчетныйДокумент.Дата);
			ВыделятьНДСУСНДокумент = ?(Отказ, ВыделятьНДСУСН, (УчетнаяПолитика.ПорядокПризнанияРасходовПоНДС(СтруктураШапкиДокумента.Организация, Расход.РасчетныйДокумент.Дата) = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику));
		Иначе
			ВыделятьНДСУСНДокумент = ВыделятьНДСУСН;
		КонецЕсли;
		Если КонтролироватьСумму Тогда
			Если Сумма = 0 Тогда
				Прервать;
			КонецЕсли;
			Если Расход.Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;
			Если ВыделятьНДСУСНДокумент И
				(Расход.ВидРасхода <> Перечисления.ВидыРасходовУСН.ОС) И
				(Расход.ВидРасхода <> Перечисления.ВидыРасходовУСН.НМА) Тогда
				СуммаКорректировки = Мин(Расход.Сумма + Расход.НДС, Сумма);
				Сумма = Макс(0, Сумма - СуммаКорректировки);
				К = СуммаКорректировки / (Расход.Сумма + Расход.НДС);
			Иначе
				СуммаКорректировки = Мин(Расход.Сумма, Сумма);
				Сумма = Сумма - СуммаКорректировки;
				К = СуммаКорректировки / Расход.Сумма;
			КонецЕсли;
		Иначе
			К = 1;
			СуммаКорректировки = Расход.Сумма;
		КонецЕсли;
		ПризнаватьРасход = Ложь;
		НовыйСтатусОплаты = ПолучитьНовыйСтатусОплаты(СтруктураШапкиДокумента, Расход, Расход.СтатусыОплатыРасходовУСН, ВидОперации, ПризнаватьРасход);
		Если НЕ ВидОперации = "РаспределениеЕНВД" Тогда
			Если НЕ ЗначениеЗаполнено(НовыйСтатусОплаты) И Расход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Распределяются Тогда
				НовыйСтатусОплаты = Перечисления.СтатусыРасходовУСН.НеРаспределено;
			КонецЕсли;
			Если (НЕ ЗначениеЗаполнено(НовыйСтатусОплаты)) И (НЕ ТаблицаРасходов.Колонки.Найти("СтатусСписания") = Неопределено) Тогда
				НовыйСтатусРасхода = ПолучитьКомбинациюСтатусовОтражениеВНУ(Расход.ОтражениеВУСН, Расход.СтатусСписания);

				Если НовыйСтатусРасхода = Перечисления.ОтражениеВУСН.Распределяются Тогда
					НовыйСтатусОплаты = Перечисления.СтатусыРасходовУСН.НеРаспределено;
				КонецЕсли;

			КонецЕсли;
		КонецЕсли;
		СтрокаКорректировкиРасход = ТаблицаКорректировкиРасход.Добавить();

		НомерСтрокиРасходов = 0;
		Если ЗначениеЗаполнено(НовыйСтатусОплаты) Тогда
			СтрокаКорректировкиПриход = ТаблицаКорректировкиПриход.Добавить();
		Иначе
			СтрокаКорректировкиПриход = ТаблицаПризнанныхРасходов.Добавить();
			НомерСтрокиРасходов = ТаблицаПризнанныхРасходов.Количество();
		КонецЕсли;

		ЗаполнитьЗначенияСвойств(СтрокаКорректировкиРасход, Расход);
		ЗаполнитьЗначенияСвойств(СтрокаКорректировкиПриход, Расход);

		Если ВидОперации = "РаспределениеЕНВД" Тогда
			Если НЕ ЗначениеЗаполнено(НовыйСтатусОплаты) И Расход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Распределяются Тогда
				СтрокаКорректировкиПриход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
			КонецЕсли;
		КонецЕсли;

		Если ВидОперации = "КорректировкаПоАО" И ЗначениеЗаполнено(ДокументОплаты) Тогда
			СтрокаКорректировкиПриход.РасчетныйДокумент = ДокументОплаты;
		КонецЕсли;

		СтрокаКорректировкиПриход.СтатусыОплатыРасходовУСН = НовыйСтатусОплаты;
		Если НЕ К = 1 Тогда
			СтрокаКорректировкиРасход.Сумма 		= К*СтрокаКорректировкиРасход.Сумма;
			СтрокаКорректировкиРасход.Количество	= К*СтрокаКорректировкиРасход.Количество;
			СтрокаКорректировкиРасход.НДС			= К*СтрокаКорректировкиРасход.НДС;
			СтрокаКорректировкиПриход.Сумма 		= К*СтрокаКорректировкиПриход.Сумма;
			СтрокаКорректировкиПриход.Количество	= К*СтрокаКорректировкиПриход.Количество;
			СтрокаКорректировкиПриход.НДС			= К*СтрокаКорректировкиПриход.НДС;
		КонецЕсли;
		Если (СтрокаКорректировкиРасход.Валюта <> ВалютаРеглУчета)
			И НомерСтрокиРасходов > 0
			И (НЕ ТаблицаРасходов.Колонки.Найти("СтруктураКурса") = Неопределено) Тогда
			Если ЗначениеЗаполнено(Расход.СтруктураКурса) Тогда
				Курс = Расход.СтруктураКурса.Курс;
				Кратность = ?(Расход.СтруктураКурса.Кратность = 0, 1, Расход.СтруктураКурса.Кратность);
				СтрокаКорректировкиПриход.Сумма 		= СтрокаКорректировкиПриход.Сумма*Курс/Кратность;
				СтрокаКорректировкиПриход.НДС			= СтрокаКорректировкиПриход.НДС*Курс/Кратность;
				Если Курс <> 1 Тогда
					СтрокаКорректировкиПриход.Валюта = ?(Расход.СтруктураКурса.Свойство("ВалютаПолучателя"), Расход.СтруктураКурса.ВалютаПолучателя, ВалютаРеглУчета);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		//Признаем расходы в части входящего НДС
		Если (ВидОперации = "Оплата") И (СтрокаКорректировкиПриход.НДС > 0) И
			(СтрокаКорректировкиРасход.ВидРасхода <> Перечисления.ВидыРасходовУСН.ОС) И
			(СтрокаКорректировкиРасход.ВидРасхода <> Перечисления.ВидыРасходовУСН.НМА) И
			(СтрокаКорректировкиРасход.ВидРасхода <> Перечисления.ВидыРасходовУСН.ТаможенныеПлатежи) И
			(СтрокаКорректировкиРасход.ОтражениеВУСН <> Перечисления.ОтражениеВУСН.ПустаяСсылка()) И
			(СтрокаКорректировкиРасход.ОтражениеВУСН <> Перечисления.ОтражениеВУСН.НеПринимаются) Тогда

			Если (ВыделятьНДСУСН) Тогда
				Если СтрокаКорректировкиРасход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются Тогда
					СтрокаНДС = ТаблицаПризнанныхРасходов.Добавить();
				Иначе
					СтрокаНДС = ТаблицаКорректировкиПриход.Добавить();
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(СтрокаНДС, Расход);

				Если НЕ СтрокаКорректировкиРасход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются Тогда
					СтрокаНДС.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеРаспределено;
				КонецЕсли;

				СтрокаНДС.ВидРасхода	= Перечисления.ВидыРасходовУСН.НДС;
				СтрокаНДС.Сумма 		= СтрокаКорректировкиПриход.НДС;
				СтрокаНДС.Валюта		= СтрокаКорректировкиПриход.Валюта;
				СтрокаНДС.Количество	= 0;
				СтрокаНДС.НДС			= 0;

				Если Не ВыделятьНДСУСНДокумент Тогда
					СтрокаКорректировкиПриход.Сумма = СтрокаКорректировкиПриход.Сумма - СтрокаКорректировкиПриход.НДС;
					СтрокаКорректировкиПриход.НДС	= 0;
				КонецЕсли;

			ИначеЕсли (НЕ ВыделятьНДСУСН) И (ВыделятьНДСУСНДокумент) Тогда

				СтрокаКорректировкиПриход.Сумма = СтрокаКорректировкиПриход.Сумма + СтрокаКорректировкиПриход.НДС;
			КонецЕсли;
		КонецЕсли;

		//Признаем расходы, отраженные по статусу "Не списано, принято"
		Если (ВидОперации = "Оплата") И
			(СтрокаКорректировкиПриход.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписаноПринято) И
			(СтрокаКорректировкиРасход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются) Тогда

			СтрокаРасходов = ТаблицаПризнанныхРасходов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРасходов, СтрокаКорректировкиПриход);

		КонецЕсли;

		// Изменение статуса расхода по списанию
		Если НЕ ТаблицаРасходов.Колонки.Найти("СтатусСписания") = Неопределено Тогда
			НовыйСтатусРасхода = ПолучитьКомбинациюСтатусовОтражениеВНУ(Расход.ОтражениеВУСН, Расход.СтатусСписания);
			Если НЕ ЗначениеЗаполнено(Расход.СтатусСписания) Тогда

			ИначеЕсли Расход.ОтражениеВУСН = НовыйСтатусРасхода Тогда

			ИначеЕсли Расход.Количество > Расход.КоличествоПоСтатусуСписания Тогда

				К2 = Расход.КоличествоПоСтатусуСписания / Расход.Количество;
				СумКорректировки = К2*СтрокаКорректировкиПриход.Сумма;
				КолКорректировки = К2*СтрокаКорректировкиПриход.Количество;
				НДСКорректировки = К2*СтрокаКорректировкиПриход.НДС;
				СтрокаКорректировкиПриход.Сумма 		= СтрокаКорректировкиПриход.Сумма - СумКорректировки;
				СтрокаКорректировкиПриход.Количество 	= СтрокаКорректировкиПриход.Количество - КолКорректировки;
				СтрокаКорректировкиПриход.НДС 			= СтрокаКорректировкиПриход.НДС - НДСКорректировки;

				Если НЕ ЗначениеЗаполнено(НовыйСтатусОплаты) Тогда
					СтрокаКорректировкиПриход = ТаблицаПризнанныхРасходов.Добавить();
				Иначе
					СтрокаКорректировкиПриход = ТаблицаКорректировкиПриход.Добавить();
				КонецЕсли;

				ЗаполнитьЗначенияСвойств(СтрокаКорректировкиРасход, Расход);
				ЗаполнитьЗначенияСвойств(СтрокаКорректировкиПриход, Расход);

				Если НЕ ЗначениеЗаполнено(НовыйСтатусОплаты) И НовыйСтатусРасхода = Перечисления.ОтражениеВУСН.Распределяются Тогда
					НовыйСтатусОплаты = Перечисления.СтатусыРасходовУСН.НеРаспределено;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(НовыйСтатусОплаты) И НовыйСтатусРасхода = Перечисления.ОтражениеВУСН.НеПринимаются Тогда
					ПризнаватьРасход = Ложь;
				КонецЕсли;
				СтрокаКорректировкиПриход.СтатусыОплатыРасходовУСН = НовыйСтатусОплаты;
				СтрокаКорректировкиПриход.ОтражениеВУСН  = НовыйСтатусРасхода;
				СтрокаКорректировкиПриход.Сумма 		= СумКорректировки;
				СтрокаКорректировкиПриход.Количество 	= КолКорректировки;
				СтрокаКорректировкиПриход.НДС 			= НДСКорректировки;

				ПроверитьСторноРасходовПОСписанию(СтруктураШапкиДокумента, НомерСтрокиРасходов, ВыделятьНДСУСНДокумент,
												ТаблицаКорректировкиРасход, ТаблицаКорректировкиПриход, ТаблицаПризнанныхРасходов,
												СтрокаКорректировкиРасход, СтрокаКорректировкиПриход);
			Иначе
                Если НЕ ЗначениеЗаполнено(НовыйСтатусОплаты) И НовыйСтатусРасхода = Перечисления.ОтражениеВУСН.Распределяются Тогда
					НовыйСтатусОплаты = Перечисления.СтатусыРасходовУСН.НеРаспределено;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(НовыйСтатусОплаты) И НовыйСтатусРасхода = Перечисления.ОтражениеВУСН.НеПринимаются Тогда
					ПризнаватьРасход = Ложь;
				КонецЕсли;
				СтрокаКорректировкиПриход.СтатусыОплатыРасходовУСН = НовыйСтатусОплаты;
				СтрокаКорректировкиПриход.ОтражениеВУСН = НовыйСтатусРасхода;

				ПроверитьСторноРасходовПОСписанию(СтруктураШапкиДокумента, НомерСтрокиРасходов, ВыделятьНДСУСНДокумент,
											ТаблицаКорректировкиРасход, ТаблицаКорректировкиПриход, ТаблицаПризнанныхРасходов,
											СтрокаКорректировкиРасход, СтрокаКорректировкиПриход);
			КонецЕсли;

		КонецЕсли;

		Если (НомерСтрокиРасходов > 0) И (СтрокаКорректировкиПриход.НДС > 0) И
			(НЕ ВыделятьНДСУСН) И (ВыделятьНДСУСНДокумент) И (НЕ ВидОперации = "Оплата") Тогда

			СтрокаКорректировкиПриход.НДС = 0;
		КонецЕсли;

		Если (НомерСтрокиРасходов > 0) и (НЕ ПризнаватьРасход) Тогда
			ТаблицаПризнанныхРасходов.Удалить(НомерСтрокиРасходов-1);
		КонецЕсли;

		Если К = 1 Тогда
			Расход.Сумма = 0;
			Расход.Количество = 0;
			Расход.НДС = 0;
		Иначе
			Расход.Сумма = Расход.Сумма - К*Расход.Сумма;
			Расход.Количество = Расход.Количество - К*Расход.Количество;
			Расход.НДС = Расход.НДС - К*Расход.НДС;
		КонецЕсли;

	КонецЦикла;

	Если ВидОперации = "Оплата" Тогда
		Если ТаблицаКорректировкиПриход.Колонки.Найти("РеквизитыДокументаОплаты") = Неопределено Тогда
			ТаблицаКорректировкиПриход.Колонки.Добавить("РеквизитыДокументаОплаты");
		КонецЕсли;
		Если ТаблицаПризнанныхРасходов.Колонки.Найти("РеквизитыДокументаОплаты") = Неопределено Тогда
			ТаблицаПризнанныхРасходов.Колонки.Добавить("РеквизитыДокументаОплаты");
		КонецЕсли;
		ТаблицаКорректировкиПриход.ЗаполнитьЗначения(?(ЗначениеЗаполнено(ДокументОплаты), ДокументОплаты, СтруктураШапкиДокумента.Ссылка),"РеквизитыДокументаОплаты");
		ТаблицаПризнанныхРасходов.ЗаполнитьЗначения(?(ЗначениеЗаполнено(ДокументОплаты), ДокументОплаты, СтруктураШапкиДокумента.Ссылка),"РеквизитыДокументаОплаты");
	ИначеЕсли ВидОперации = "НачислениеЗП"
		ИЛИ ВидОперации = "НачислениеСтраховыхВзносовИП"
		ИЛИ ВидОперации = "НачислениеИмущественныхНалогов" Тогда
		
		Если ТаблицаПризнанныхРасходов.Колонки.Найти("ДокументОплаты") <> Неопределено Тогда
			ТаблицаПризнанныхРасходов.ЗагрузитьКолонку(ТаблицаПризнанныхРасходов.ВыгрузитьКолонку("ДокументОплаты"), "РеквизитыДокументаОплаты");
		КонецЕсли;
		Если ВидОперации = "НачислениеСтраховыхВзносовИП" ИЛИ ВидОперации = "НачислениеИмущественныхНалогов"
			И ТаблицаКорректировкиПриход.Колонки.Найти("ДокументОплаты") <> Неопределено Тогда
			ТаблицаКорректировкиПриход.ЗагрузитьКолонку(ТаблицаКорректировкиПриход.ВыгрузитьКолонку("ДокументОплаты"), "РеквизитыДокументаОплаты");		
		КонецЕсли;
		
	КонецЕсли;


	Если ЗначениеЗаполнено(ВходящаяСтруктура) Тогда
		Если ВходящаяСтруктура.ТаблицаПриход.Количество() > 0 Тогда
			Для Каждого Строка Из ТаблицаКорректировкиПриход Цикл
				НоваяСтрока = ВходящаяСтруктура.ТаблицаПриход.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			КонецЦикла;
		Иначе
			ВходящаяСтруктура.ТаблицаПриход = ТаблицаКорректировкиПриход;
		КонецЕсли;
		Если ВходящаяСтруктура.ТаблицаРасход.Количество() > 0 Тогда
			Для Каждого Строка Из ТаблицаКорректировкиРасход Цикл
				НоваяСтрока = ВходящаяСтруктура.ТаблицаРасход.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			КонецЦикла;
		Иначе
			ВходящаяСтруктура.ТаблицаРасход = ТаблицаКорректировкиРасход;
		КонецЕсли;
		Если ВходящаяСтруктура.ТаблицаПринятых.Количество() > 0 Тогда
			Для Каждого Строка Из ТаблицаПризнанныхРасходов Цикл
				НоваяСтрока = ВходящаяСтруктура.ТаблицаПринятых.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			КонецЦикла;
		Иначе
			ВходящаяСтруктура.ТаблицаПринятых = ТаблицаПризнанныхРасходов;
		КонецЕсли;
		ИтоговаяСтруктура = ВходящаяСтруктура;
	Иначе
		ИтоговаяСтруктура = Новый Структура("ТаблицаПриход, ТаблицаРасход, ТаблицаПринятых", ТаблицаКорректировкиПриход, ТаблицаКорректировкиРасход, ТаблицаПризнанныхРасходов);
	КонецЕсли;

	Возврат ИтоговаяСтруктура;

КонецФункции

Процедура ПроверитьСторноРасходовПоСписанию(СтруктураШапкиДокумента, НомерСтрокиРасходов, ВыделятьНДСУСНДокумент,
											ТаблицаКорректировкиРасход, ТаблицаКорректировкиПриход, ТаблицаПризнанныхРасходов,
											СтрокаКорректировкиРасход, СтрокаКорректировкиПриход)

	Если СтрокаКорректировкиРасход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.НеПринимаются Тогда
		Возврат;
	КонецЕсли;

	ВыделятьНДСУСН = ВыделятьНДСУСНДокумент;
	//ВыделятьНДСУСН = (СтруктураШапкиДокумента.ПорядокПризнанияРасходовПоНДС = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику);

	Если (СтрокаКорректировкиПриход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Распределяются) И
		(СтрокаКорректировкиРасход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются) Тогда

		//В части входящего НДС
		Если (ВыделятьНДСУСН) И (СтрокаКорректировкиПриход.НДС > 0) И
			(СтрокаКорректировкиРасход.ВидРасхода <> Перечисления.ВидыРасходовУСН.ОС) И
			(СтрокаКорректировкиРасход.ВидРасхода <> Перечисления.ВидыРасходовУСН.НМА) И
			(СтрокаКорректировкиРасход.ВидРасхода <> Перечисления.ВидыРасходовУСН.ТаможенныеПлатежи) И
			(СтрокаКорректировкиПриход.СтатусыОплатыРасходовУСН <> Перечисления.СтатусыРасходовУСН.НеОплачено) И
			(СтрокаКорректировкиПриход.СтатусыОплатыРасходовУСН <> Перечисления.СтатусыРасходовУСН.НеОплаченоНеОплаченоПокупателем) Тогда

			//Сторно
			СтрокаНДС = ТаблицаПризнанныхРасходов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНДС, СтрокаКорректировкиРасход);

			СтрокаНДС.ВидРасхода	= Перечисления.ВидыРасходовУСН.НДС;
			СтрокаНДС.Сумма 		= - СтрокаКорректировкиПриход.НДС;
			СтрокаНДС.Количество	= 0;
			СтрокаНДС.НДС			= 0;

			//Распределяемые расходы
			СтрокаНДС = ТаблицаКорректировкиПриход.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНДС, СтрокаКорректировкиПриход);

			СтрокаНДС.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеРаспределено;
			СтрокаНДС.ВидРасхода	= Перечисления.ВидыРасходовУСН.НДС;
			СтрокаНДС.Сумма 		= СтрокаКорректировкиПриход.НДС;
			СтрокаНДС.Количество	= 0;
			СтрокаНДС.НДС			= 0;
		КонецЕсли;

		Если СтрокаКорректировкиРасход.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписаноПринято Тогда

			//Сторно
			СтрокаСторно = ТаблицаПризнанныхРасходов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСторно, СтрокаКорректировкиРасход);

			СтрокаСторно.Сумма 		= - СтрокаКорректировкиПриход.Сумма;
			СтрокаСторно.Количество	= - СтрокаКорректировкиПриход.Количество;
			СтрокаСторно.НДС		= - СтрокаКорректировкиПриход.НДС;

			//Распределяемые расходы
			СтрокаКорректировкиПриход.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеРаспределено;

		КонецЕсли;

	ИначеЕсли (СтрокаКорректировкиПриход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.НеПринимаются) И
		(СтрокаКорректировкиРасход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются) Тогда

		//В части входящего НДС
		Если (ВыделятьНДСУСН) И (СтрокаКорректировкиПриход.НДС > 0) И
			(СтрокаКорректировкиРасход.ВидРасхода <> Перечисления.ВидыРасходовУСН.ОС) И
			(СтрокаКорректировкиРасход.ВидРасхода <> Перечисления.ВидыРасходовУСН.НМА) И
			(СтрокаКорректировкиПриход.СтатусыОплатыРасходовУСН <> Перечисления.СтатусыРасходовУСН.НеОплачено) И
			(СтрокаКорректировкиПриход.СтатусыОплатыРасходовУСН <> Перечисления.СтатусыРасходовУСН.НеОплаченоНеОплаченоПокупателем) Тогда

			//Сторно
			СтрокаНДС = ТаблицаПризнанныхРасходов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНДС, СтрокаКорректировкиРасход);

			СтрокаНДС.ВидРасхода	= Перечисления.ВидыРасходовУСН.НДС;
			СтрокаНДС.Сумма 		= - СтрокаКорректировкиПриход.НДС;
			СтрокаНДС.Количество	= 0;
			СтрокаНДС.НДС			= 0;

		КонецЕсли;

		Если СтрокаКорректировкиРасход.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписаноПринято Тогда

			//Сторно
			НомерСтрокиРасходов = 0;
			СтрокаКорректировкиПриход.Сумма 		= - СтрокаКорректировкиПриход.Сумма;
			СтрокаКорректировкиПриход.Количество	= - СтрокаКорректировкиПриход.Количество;
			СтрокаКорректировкиПриход.НДС			= - СтрокаКорректировкиПриход.НДС;
		КонецЕсли;

	ИначеЕсли (СтрокаКорректировкиПриход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Распределяются) И
		(СтрокаКорректировкиРасход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.НеПринимаются) Тогда //Не обрабатываем

	КонецЕсли;

КонецПроцедуры

//Операция зачета аванса поставщику
//ТаблицаДвижений - Таблица движений приход регистра Расходы УСН (сформированная процедурой списание расходов)
Процедура РасчетыСКонтрагентами_ЗачетАвансаОтПокупателяУСН(СтруктураШапкиДокумента, ТаблицаАвансов, ТаблицаДвижений, ДвиженияРегистровВх, ДвиженияРегистров, ДвиженияКУДиРПатент, КУДиР, Выручка)

	ТаблицаДвиженияВзаиморасчетов = ТаблицаАвансов.Скопировать();
	ТаблицаДвиженияВзаиморасчетов.Колонки.ДокументРасчетов.Имя = "РасчетныйДокумент";
	ТаблицаДвиженияВзаиморасчетов.Колонки.Добавить("СтруктураКурса");
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	СуммаДокумента	 	= Выручка.Всего; 
	СуммаЕНВД 			= Выручка.ЕНВД;
	СуммаКомиссии 		= Выручка.Комиссия;
	СуммаПатент 		= Выручка.Патент;

	НеЗачтено = 0;
	Для Каждого Строка Из ТаблицаДвиженияВзаиморасчетов Цикл
		Если Строка.СуммаВзаиморасчетов <= 0 Тогда
			Продолжить;
		КонецЕсли;

		Если Строка.РасчетныйДокумент = СтруктураШапкиДокумента.Ссылка Тогда
			НеЗачтено = НеЗачтено + Строка.СуммаВзаиморасчетов;
			Продолжить;
		КонецЕсли;

		КурсДокумента = ОпределитьКурсПоДокументу(Строка.ДоговорКонтрагента, Неопределено, Строка.РасчетныйДокумент);
		КурсДокумента = ?(КурсДокумента = 0, 1, КурсДокумента);

		НеПризнанныеДоходы = 0;
		НеПризнанныеДоходыКомитента = 0;
		Если ЗначениеЗаполнено(Строка.РасчетныйДокумент) Тогда
 
			НеПризнанныеДоходы = (Строка.СуммаВзаиморасчетовЕНВД * КурсДокумента) + (Строка.СуммаВзаиморасчетовПатент * КурсДокумента) + (Строка.СуммаВзаиморасчетовКомитента * КурсДокумента);	
			НеПризнанныеДоходыКомитента = (Строка.СуммаВзаиморасчетовКомитента * КурсДокумента);

		КонецЕсли;

		Если СуммаКомиссии > 0 Тогда
			СуммаКоррДоходов  			= Окр(Строка.СуммаВзаиморасчетов * КурсДокумента * СуммаКомиссии / СуммаДокумента, 2, 1);

			ЗачтеноНеПризнанныеДоходы 	= Мин(СуммаКоррДоходов, НеПризнанныеДоходы);
			СуммаКоррДоходов  			= СуммаКоррДоходов - ЗачтеноНеПризнанныеДоходы;
			НеПризнанныеДоходы			= НеПризнанныеДоходы - ЗачтеноНеПризнанныеДоходы;
			НеПризнанныеДоходыКомитента = НеПризнанныеДоходыКомитента - Мин(ЗачтеноНеПризнанныеДоходы, НеПризнанныеДоходыКомитента);
			
			Если СуммаКоррДоходов > 0 Тогда
				КУДиР.Содержание = КУДиР.Содержание + "Аванс на сумму " + ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаКоррДоходов, , , " ")
					+ " руб. определен как выручка комитента. ";
				КУДиР.Графа5 = КУДиР.Графа5 - СуммаКоррДоходов;
			КонецЕсли;
		КонецЕсли;
		Если СуммаЕНВД > 0 Тогда
			СуммаКоррДоходов  = Окр(Строка.СуммаВзаиморасчетов * КурсДокумента * СуммаЕНВД / СуммаДокумента, 2, 1);

			ЗачтеноНеПризнанныеДоходы 	= Мин(СуммаКоррДоходов, НеПризнанныеДоходы);
			СуммаКоррДоходов  			= СуммаКоррДоходов - ЗачтеноНеПризнанныеДоходы;
			НеПризнанныеДоходы			= НеПризнанныеДоходы - ЗачтеноНеПризнанныеДоходы;
			
			Если СуммаКоррДоходов > 0 Тогда
				КУДиР.Содержание = КУДиР.Содержание + "Аванс на сумму " + ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаКоррДоходов, , , " ")
					+ " руб. отнесен к деятельности ЕНВД. ";
				КУДиР.Графа5 = КУДиР.Графа5 - СуммаКоррДоходов;
				КУДиР.ДоходЕНВД	 = КУДиР.ДоходЕНВД + СуммаКоррДоходов;			
			КонецЕсли;
		КонецЕсли;
		Если СуммаПатент > 0 Тогда
			СуммаКоррДоходов  = Окр(Строка.СуммаВзаиморасчетов * КурсДокумента * СуммаПатент / СуммаДокумента, 2, 1);
			
			ЗачтеноНеПризнанныеДоходы 	= Мин(СуммаКоррДоходов, НеПризнанныеДоходы);
			СуммаКоррДоходов  			= СуммаКоррДоходов - ЗачтеноНеПризнанныеДоходы;
			НеПризнанныеДоходы			= НеПризнанныеДоходы - ЗачтеноНеПризнанныеДоходы;
			
			Если СуммаКоррДоходов > 0 Тогда
				КУДиР.Содержание = КУДиР.Содержание + "Аванс на сумму " + ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаКоррДоходов, , , " ")
					+ " руб. отнесен к деятельности на патенте. ";
				КУДиР.Графа5 = КУДиР.Графа5 - СуммаКоррДоходов;
				КУДиР.ДоходЕНВД	 = КУДиР.ДоходЕНВД + СуммаКоррДоходов;
			КонецЕсли;
		КонецЕсли;
		Если (СуммаЕНВД + СуммаКомиссии + СуммаПатент < СуммаДокумента) И НеПризнанныеДоходы > 0 Тогда
			СуммаКоррДоходов  = Окр(Строка.СуммаВзаиморасчетов * КурсДокумента * (СуммаДокумента - СуммаЕНВД - СуммаКомиссии - СуммаПатент) / СуммаДокумента, 2, 1);
			
			ЗачтеноНеПризнанныеДоходы 	= Мин(СуммаКоррДоходов, НеПризнанныеДоходы);
			СуммаКоррДоходов  			= ЗачтеноНеПризнанныеДоходы;
			НеПризнанныеДоходы			= НеПризнанныеДоходы - ЗачтеноНеПризнанныеДоходы;
			
			КУДиР.Содержание = КУДиР.Содержание + "Аванс на сумму " + ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаКоррДоходов, , , " ")
				+ " руб. отнесен к деятельности УСН. ";
			КУДиР.Графа5 = КУДиР.Графа5 + СуммаКоррДоходов;
			
			ЗачтеноДоходыКомитента		= Мин(ЗачтеноНеПризнанныеДоходы, НеПризнанныеДоходыКомитента);
			СуммаКоррДоходовЕНВД		= СуммаКоррДоходов - ЗачтеноДоходыКомитента;
			НеПризнанныеДоходыКомитента = НеПризнанныеДоходыКомитента - ЗачтеноДоходыКомитента;
			КУДиР.ДоходЕНВД	 			= КУДиР.ДоходЕНВД - СуммаКоррДоходовЕНВД;
		КонецЕсли;
		
		Если Строка.СуммаВзаиморасчетовПатент > 0 И ЗначениеЗаполнено(Строка.РасчетныйДокумент) Тогда
			//Определим исходный патент
			МетаданныеАванса = Строка.РасчетныйДокумент.Метаданные();
			Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Патент", МетаданныеАванса) Тогда
				ПатентАванса = Строка.РасчетныйДокумент.Патент;
				Если СуммаПатент > 0 Тогда
					//Проверим, совпадает ли патент аванса  с патентом реализации
					ДокументСсылка = СтруктураШапкиДокумента.Ссылка;
					//Подменим ссылку если документ - реализация отгруженной продукции
					Если (ДокументСсылка.Метаданные().ТабличныеЧасти.Количество() = 0) И (НЕ ДокументСсылка.Метаданные().Реквизиты.Найти("ДокументОтгрузки") = Неопределено) Тогда
						Если ЗначениеЗаполнено(ДокументСсылка.ДокументОтгрузки) Тогда
							ДокументСсылка = СтруктураШапкиДокумента.Ссылка.ДокументОтгрузки;
						КонецЕсли;
					КонецЕсли;
					МетаданныеДокумента = ДокументСсылка.Метаданные();
					Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Патент", МетаданныеДокумента) И (ДокументСсылка.Патент <> ПатентАванса) Тогда
						
						ЗаписьКУДиРПатент = ДвиженияКУДиРПатент.Добавить();
						ЗаписьКУДиРПатент.Патент = ПатентАванса;
						ЗаписьКУДиРПатент.Содержание = СодержаниеКУДиР(СтруктураШапкиДокумента, СтруктураШапкиДокумента.ВидОперацииУСН, МетаданныеДокумента) + 
						"Аванс на сумму " + Строка.СуммаВзаиморасчетовПатент * КурсДокумента + " руб. использован в деятельности, не подпадающей под действие патента. ";;
						ЗаписьКУДиРПатент.Графа4 = - Окр(Строка.СуммаВзаиморасчетовПатент * КурсДокумента, 2, 1);
												
						ЗаписьКУДиРПатент = ДвиженияКУДиРПатент.Добавить();
						ЗаписьКУДиРПатент.Патент = ДокументСсылка.Патент;
						ЗаписьКУДиРПатент.Содержание = СодержаниеКУДиР(СтруктураШапкиДокумента, СтруктураШапкиДокумента.ВидОперацииУСН, МетаданныеДокумента);
						ЗаписьКУДиРПатент.Графа4 = Окр(Строка.СуммаВзаиморасчетов * КурсДокумента * СуммаПатент / СуммаДокумента, 2, 1);
						
					КонецЕсли;
				Иначе
					ЗаписьКУДиРПатент = ДвиженияКУДиРПатент.Добавить();
					ЗаписьКУДиРПатент.Патент = ПатентАванса;
					ЗаписьКУДиРПатент.Содержание = СодержаниеКУДиР(СтруктураШапкиДокумента, СтруктураШапкиДокумента.ВидОперацииУСН, МетаданныеДокумента)
						+ "Аванс на сумму " + ОбщегоНазначенияБПВызовСервера.ФорматСумм(Строка.СуммаВзаиморасчетовПатент * КурсДокумента, , , " ")
						+ " руб. использован в деятельности, не подпадающей под действие патента. ";;
					ЗаписьКУДиРПатент.Графа4 = - Окр(Строка.СуммаВзаиморасчетовПатент * КурсДокумента, 2, 1);
				КонецЕсли;	 
			КонецЕсли;
		ИначеЕсли СуммаПатент > 0 Тогда
			//Отразим запись в книге по патенту
			ДокументСсылка = СтруктураШапкиДокумента.Ссылка;
			//Подменим ссылку если документ - реализация отгруженной продукции
			Если (ДокументСсылка.Метаданные().ТабличныеЧасти.Количество() = 0) И (НЕ ДокументСсылка.Метаданные().Реквизиты.Найти("ДокументОтгрузки") = Неопределено) Тогда
				Если ЗначениеЗаполнено(ДокументСсылка.ДокументОтгрузки) Тогда
					ДокументСсылка = СтруктураШапкиДокумента.Ссылка.ДокументОтгрузки;
				КонецЕсли;
			КонецЕсли;
			МетаданныеДокумента = ДокументСсылка.Метаданные();
			Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Патент", МетаданныеДокумента) И ЗначениеЗаполнено(ДокументСсылка.Патент) Тогда
				ЗаписьКУДиРПатент = ДвиженияКУДиРПатент.Добавить();
				ЗаписьКУДиРПатент.Патент = ДокументСсылка.Патент;
				ЗаписьКУДиРПатент.Содержание = СодержаниеКУДиР(СтруктураШапкиДокумента, СтруктураШапкиДокумента.ВидОперацииУСН, МетаданныеДокумента);
				ЗаписьКУДиРПатент.Графа4 = Окр(Строка.СуммаВзаиморасчетов * КурсДокумента * СуммаПатент / СуммаДокумента, 2, 1);				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСНДоходы Тогда
		Возврат;
	КонецЕсли;

	КоэффЗачета =  ?(ТаблицаДвиженияВзаиморасчетов.Итог("СуммаВзаиморасчетов") = 0, 0, (ТаблицаДвиженияВзаиморасчетов.Итог("СуммаВзаиморасчетов") - НеЗачтено) / ТаблицаДвиженияВзаиморасчетов.Итог("СуммаВзаиморасчетов"));

	ТаблицаДляСписания = ТаблицаДвижений.СкопироватьКолонки();
	Для Каждого Строка Из ТаблицаДвижений Цикл
		Если Строка.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеРаспределено Тогда
			Продолжить;
		КонецЕсли;
		Сумма = КоэффЗачета * Строка.Сумма;
		Количество = КоэффЗачета * Строка.Количество;
		НДС = КоэффЗачета * Строка.НДС;
		Если Сумма = 0 Тогда
			Продолжить;
		Конецесли;
		НоваяСтрока = ТаблицаДляСписания.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);

		НоваяСтрока.Сумма = Сумма;
		НоваяСтрока.Количество = Количество;
		НоваяСтрока.НДС = НДС;
	КонецЦикла;

	//Разложим таблицу расходов на движения корректировки статуса и принятые расходы
	НовыеТаблицыДвижений = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаДляСписания, , "Доход", Ложь);

	ДвиженияРегистров = СобратьТаблицыДвижений(НовыеТаблицыДвижений, , ,ДвиженияРегистровВх);

КонецПроцедуры

//Отразить оплату поставщику по взаиморасчетам УСН и расходам УСН
//
Процедура РасчетыСКонтрагентамиУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, ДвиженияКУДиРПатент, КУДиР, ВидОперации = "Оплата")

	ВалютаРеглУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ВыделятьНДСУСН = (СтруктураШапкиДокумента.ПорядокПризнанияРасходовПоНДС = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику);

	ТаблицаДвиженияВзаиморасчетов = ТаблицаОплат.Скопировать();
	ТаблицаДвиженияВзаиморасчетов.Колонки.ДокументРасчетов.Имя = "РасчетныйДокумент";
	ТаблицаДвиженияВзаиморасчетов.Колонки.СчетРасчетов.Имя = "СчетУчета";
	ТаблицаДвиженияВзаиморасчетов.Колонки.Добавить("СтруктураКурса");

	Если ВидОперации = "Доход" Тогда
		//Услуги банка, удержанные из оплаты покупателя
		СуммаУслуг = 0;
		Если СтруктураШапкиДокумента.Ссылка.Метаданные().Реквизиты.Найти("СуммаУслуг") <> Неопределено И
			СтруктураШапкиДокумента.Ссылка.Метаданные().Реквизиты.Найти("СчетБанк") <> Неопределено Тогда
			СуммаУслуг = СтруктураШапкиДокумента.Ссылка.СуммаУслуг;
			Если СуммаУслуг > 0 Тогда
				ТаблицаДвиженияВзаиморасчетов.Свернуть("РасчетныйДокумент, СчетУчета, ВалютаВзаиморасчетов, Контрагент, ДоговорКонтрагента,
														|РасчетыВУсловныхЕдиницах, СтруктураКурса", "СуммаРуб,
														|СуммаВзаиморасчетов, СуммаВзаиморасчетовЕНВД, СуммаВзаиморасчетовПатент, СуммаВзаиморасчетовКомитента, ОстатокВзаиморасчетов");
			КонецЕсли;
		КонецЕсли;
		СуммаУслугВсего = СуммаУслуг;
		СуммаКоррДоходовКомитента 	= 0;
		СуммаКоррДоходовЕНВД		= 0;
		СуммаКоррДоходовПатент  	= 0;
		СуммаНаЗакупкуДляКомитента 	= 0;
	КонецЕсли;

	//Заполняем таблицу списываемых расходов по таблице расходов и фильтрам партионного учета
	Для Каждого СтрокаПлатеж Из ТаблицаДвиженияВзаиморасчетов Цикл

		Если СтрокаПлатеж.СуммаВзаиморасчетов = 0 Тогда
			Продолжить;
		КонецЕсли;

		Курс = 1;
		Кратность = 1;
		
		Если СтрокаПлатеж.ВалютаВзаиморасчетов <> ВалютаРеглУчета Тогда
			Курс = ?(СтрокаПлатеж.СуммаВзаиморасчетов = 0, Курс, СтрокаПлатеж.СуммаРуб / СтрокаПлатеж.СуммаВзаиморасчетов);
		КонецЕсли;
		
		Если Не ТаблицаОплат.Колонки.Найти("КурсВзаиморасчетов") = Неопределено Тогда
			Курс = ?(СтрокаПлатеж.КурсВзаиморасчетов = 0, Курс, СтрокаПлатеж.КурсВзаиморасчетов);
		КонецЕсли;
		Если Не ТаблицаОплат.Колонки.Найти("КратностьВзаиморасчетов") = Неопределено Тогда
			Кратность = ?(СтрокаПлатеж.КратностьВзаиморасчетов = 0, Кратность, СтрокаПлатеж.КратностьВзаиморасчетов);
		КонецЕсли;
		СтруктураКурса = Новый Структура("Курс, Кратность",Курс,Кратность);
		СтрокаПлатеж.СтруктураКурса = СтруктураКурса;

		Если ВидОперации = "Оплата" Тогда
			КУДиР.Графа6 = КУДиР.Графа6 + СтрокаПлатеж.СуммаВзаиморасчетов*Курс/Кратность;

		ИначеЕсли ВидОперации = "ВозвратПокупателю" Тогда

			СторноДоходов 	= СтрокаПлатеж.СуммаБУ;
			
			Если ТаблицаОплат.Колонки.Найти("СуммаБУ_Комитента") = Неопределено Тогда
				ДоходЕНВД 		= 0;
				ДоходКомитента 	= 0;
				ДоходПатент 	= 0;
			Иначе
				ДоходКомитента	= СтрокаПлатеж.СуммаБУ_Комитента;
				ДоходЕНВД 		= СтрокаПлатеж.СуммаБУ_ЕНВД;
				ДоходПатент		= СтрокаПлатеж.СуммаБУ_Патент;
			КонецЕсли;

			СторноПринимаемыхДоходов = Макс(0, СторноДоходов - ДоходКомитента - ДоходЕНВД - ДоходПатент);
			СторноДоходовЕНВД		 = Макс(0, ДоходЕНВД + ДоходПатент);
			
			Если НЕ ТаблицаОплат.Колонки.Найти("ДоговорКонтрагента") = Неопределено 
				И ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента)
				И СтрокаПлатеж.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку 
				И ЗначениеЗаполнено(СтрокаПлатеж.РасчетныйДокумент) И (ТипЗнч(СтрокаПлатеж.РасчетныйДокумент) <> Тип("ДокументСсылка.ОтчетКомитентуОПродажах")) Тогда
				СторноПринимаемыхДоходов	= 0;
				СторноДоходовЕНВД			= 0;
			КонецЕсли;

			КУДиР.Графа4	= КУДиР.Графа4 - СторноДоходов;
			КУДиР.Графа5	= КУДиР.Графа5 - СторноПринимаемыхДоходов;
			КУДиР.ДоходЕНВД	= КУДиР.ДоходЕНВД - СторноДоходовЕНВД;
			Если СторноДоходов - СторноПринимаемыхДоходов > 0 Тогда
				КУДиР.Содержание = КУДиР.Содержание + "Аванс на сумму " + ОбщегоНазначенияБПВызовСервера.ФорматСумм(СторноДоходов - СторноПринимаемыхДоходов, , , " ")
					+ " руб. не был включен в доходы, в том числе: ";
				Если ДоходКомитента > 0 Тогда
					КУДиР.Содержание = КУДиР.Содержание + "доходы комитента - " + ОбщегоНазначенияБПВызовСервера.ФорматСумм(ДоходКомитента, , , " ")+ " руб.; ";
				КонецЕсли;
				Если ДоходЕНВД > 0 Тогда
					КУДиР.Содержание = КУДиР.Содержание + "доходы по деятельности ЕНВД - " + ОбщегоНазначенияБПВызовСервера.ФорматСумм(ДоходЕНВД, , , " ")+ " руб.; ";
				КонецЕсли;
				Если ДоходПатент > 0 Тогда
					КУДиР.Содержание = КУДиР.Содержание + "доходы по деятельности на патенте - " + ОбщегоНазначенияБПВызовСервера.ФорматСумм(ДоходПатент, , , " ")+ " руб.; ";
				КонецЕсли;
				КУДиР.Содержание = Лев(КУДиР.Содержание, СтрДлина(КУДиР.Содержание) - 2) + ". ";
			КонецЕсли;
			
			Если ДоходПатент > 0 И ЗначениеЗаполнено(СтрокаПлатеж.РасчетныйДокумент) Тогда
				//Отразим запись в книге по патенту
				ДокументСсылка = СтрокаПлатеж.РасчетныйДокумент;
				МетаданныеДокумента = ДокументСсылка.Метаданные();
				Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Патент", МетаданныеДокумента) И ЗначениеЗаполнено(ДокументСсылка.Патент) Тогда
					ЗаписьКУДиРПатент = ДвиженияКУДиРПатент.Добавить();
					ЗаписьКУДиРПатент.Патент = ДокументСсылка.Патент;
					ЗаписьКУДиРПатент.Содержание = СодержаниеКУДиР(СтруктураШапкиДокумента, СтруктураШапкиДокумента.ВидОперацииУСН, МетаданныеДокумента);
					ЗаписьКУДиРПатент.Графа4 = - ДоходПатент;
				КонецЕсли;
			КонецЕсли;

		ИначеЕсли ВидОперации = "Доход" Тогда
			КУДиР.Графа4 = КУДиР.Графа4 + Окр((СтрокаПлатеж.СуммаВзаиморасчетов - СуммаУслуг)*Курс/Кратность, 2, РежимОкругления.Окр15как20);

			Если ЗначениеЗаполнено(СтрокаПлатеж.РасчетныйДокумент) Тогда
				//Не включается в доходы в соответствии с положениями переходного периода ст.346.25 НК РФ
				ДоПереходаНаУСН = ((УчетнаяПолитика.ПоложенияПереходногоПериодаУСН(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата)
				И УчетнаяПолитика.ДатаПереходаНаУСН(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата) > СтрокаПлатеж.РасчетныйДокумент.Дата));
			Иначе
				ДоПереходаНаУСН = Ложь;
			КонецЕсли;
			
			Если НЕ ТаблицаОплат.Колонки.Найти("ДоговорКонтрагента") = Неопределено 
				И ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента)
				И БухгалтерскийУчетПереопределяемый.ЭтоВидДоговораСКомитентомНаЗакупку(СтрокаПлатеж.ДоговорКонтрагента.ВидДоговора)
				И ЗначениеЗаполнено(СтрокаПлатеж.РасчетныйДокумент) И (ТипЗнч(СтрокаПлатеж.РасчетныйДокумент) <> Тип("ДокументСсылка.ОтчетКомитентуОПродажах")) Тогда
				
				СуммаНаЗакупкуДляКомитента = СуммаНаЗакупкуДляКомитента + (СтрокаПлатеж.СуммаВзаиморасчетов - СуммаУслуг)*Курс/Кратность;
				Продолжить;
				
			КонецЕсли;

			СуммаВзаиморасчетов = СтрокаПлатеж.СуммаВзаиморасчетов;
			Если ТаблицаОплат.Колонки.Найти("СуммаВзаиморасчетовКомитента") = Неопределено Тогда
				ДоходЕНВД 			= 0;
				ДоходКомитента 		= 0;
				ДоходПатент 		= 0;
			Иначе
				ДоходКомитента		= СтрокаПлатеж.СуммаВзаиморасчетовКомитента;
				ДоходЕНВД 			= СтрокаПлатеж.СуммаВзаиморасчетовЕНВД;
				ДоходПатент			= СтрокаПлатеж.СуммаВзаиморасчетовПатент;
			КонецЕсли;

			//Отражение платежа в КУДиР производиться только в части фактически поступивших средств
			Если СуммаУслуг > 0 Тогда
				СписатьУслуг = Мин(СуммаВзаиморасчетов, СуммаУслуг);
				СуммаУслуг = СуммаУслуг - СписатьУслуг;

				СуммаЕНВД_БН = Окр(?(СуммаВзаиморасчетов = 0, 0, СписатьУслуг / СуммаВзаиморасчетов)*ДоходЕНВД, 2, 1);
				СуммаПатент_БН = Окр(?(СуммаВзаиморасчетов = 0, 0, СписатьУслуг / СуммаВзаиморасчетов)*ДоходПатент, 2, 1);
				СуммаКомиссии_БН = Окр(?(СуммаВзаиморасчетов = 0, 0, СписатьУслуг / СуммаВзаиморасчетов)*ДоходКомитента, 2, 1);

				//Уменьшим сумму расходов на услуги банка в части ЕНВД
				СуммаУслугВсего = СуммаУслугВсего - СуммаЕНВД_БН - СуммаПатент_БН;
			КонецЕсли;

			Если НЕ ДоПереходаНаУСН Тогда
				КУДиР.Графа5 = КУДиР.Графа5 + Окр((СуммаВзаиморасчетов - ДоходЕНВД - ДоходКомитента - ДоходПатент)*Курс/Кратность, 2, РежимОкругления.Окр15как20);
				Если ДоходКомитента > 0 Тогда
					СуммаКоррДоходовКомитента  = СуммаКоррДоходовКомитента + ДоходКомитента * Курс/Кратность;
				КонецЕсли;
				Если ДоходЕНВД > 0 Тогда
					СуммаКоррДоходов = ДоходЕНВД * Курс/Кратность;
					СуммаКоррДоходовЕНВД  = СуммаКоррДоходовЕНВД + СуммаКоррДоходов;
					КУДиР.ДоходЕНВД	 = КУДиР.ДоходЕНВД + СуммаКоррДоходов;
				КонецЕсли;
				Если ДоходПатент > 0 Тогда
					СуммаКоррДоходов = ДоходПатент * Курс/Кратность;
					СуммаКоррДоходовПатент  = СуммаКоррДоходовПатент + СуммаКоррДоходов;
					КУДиР.ДоходЕНВД	 = КУДиР.ДоходЕНВД + СуммаКоррДоходов;
					Если ЗначениеЗаполнено(СтрокаПлатеж.РасчетныйДокумент) Тогда
						ДокументСсылка = СтрокаПлатеж.РасчетныйДокумент;
						//Подменим ссылку если документ - реализация отгруженной продукции
						Если (ДокументСсылка.Метаданные().ТабличныеЧасти.Количество() = 0) И (НЕ ДокументСсылка.Метаданные().Реквизиты.Найти("ДокументОтгрузки") = Неопределено) Тогда
							Если ЗначениеЗаполнено(ДокументСсылка.ДокументОтгрузки) Тогда
								ДокументСсылка = СтруктураШапкиДокумента.Ссылка.ДокументОтгрузки;
							КонецЕсли;
						КонецЕсли;
						МетаданныеДокумента = ДокументСсылка.Метаданные();
						Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Патент", МетаданныеДокумента) 
							И ЗначениеЗаполнено(ДокументСсылка.Патент) Тогда
							
							ЗаписьКУДиРПатент = ДвиженияКУДиРПатент.Добавить();
							ЗаписьКУДиРПатент.Патент = ДокументСсылка.Патент;
							ЗаписьКУДиРПатент.Содержание = СодержаниеКУДиР(СтруктураШапкиДокумента, СтруктураШапкиДокумента.ВидОперацииУСН, СтруктураШапкиДокумента.Ссылка.Метаданные());
							ЗаписьКУДиРПатент.Графа4 = СуммаКоррДоходов;
														
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Если ВидОперации = "Доход" Тогда
		Если СуммаНаЗакупкуДляКомитента > 0 Тогда
			КУДиР.Содержание = КУДиР.Содержание + "Поступление на сумму "
				+ ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаНаЗакупкуДляКомитента, , , " ")
				+ " руб. определено как поступление на закупку по договору комиссии. ";
		КонецЕсли;
		Если СуммаКоррДоходовКомитента > 0 Тогда
			КУДиР.Содержание = КУДиР.Содержание + "Оплата на сумму "
				+ ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаКоррДоходовКомитента, , , " ")
				+ " руб. определена как выручка комитента. ";
		КонецЕсли;
		Если СуммаКоррДоходовЕНВД > 0 Тогда
			КУДиР.Содержание = КУДиР.Содержание + "Оплата на сумму "
				+ ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаКоррДоходовЕНВД, , , " ")
				+ " руб. отнесена к деятельности ЕНВД. ";
		КонецЕсли;
		Если СуммаКоррДоходовПатент > 0 Тогда
			КУДиР.Содержание = КУДиР.Содержание + "Оплата на сумму "
				+ ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаКоррДоходовПатент, , , " ")
				+ " руб. отнесена к деятельности на патенте. ";
		КонецЕсли;
		Если (СуммаУслугВсего) > 0 И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
			КУДиР.Содержание = КУДиР.Содержание + "Удержана комиссия банка на сумму "
				+ ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаУслугВсего, , , " ") + " руб. ";
			КУДиР.Графа7 = КУДиР.Графа7 + СуммаУслугВсего;
		КонецЕсли;
	КонецЕсли;

	Если ТаблицаДвиженияВзаиморасчетов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Если (НЕ (ВидОперации = "Оплата" ИЛИ ВидОперации = "ОплатаАО" ИЛИ ВидОперации = "Доход"))
		ИЛИ НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		Возврат;
	КонецЕсли;

	ТаблицаФильтров = Новый ТаблицаЗначений;
	ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
	ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
	ТаблицаФильтров.Колонки.Добавить("Условие");

	Статусы = Новый Массив;
	Если ВидОперации = "Оплата" ИЛИ ВидОперации = "ОплатаАО" Тогда
		УсловиеПоПолюРасходы = "РасчетныйДокумент";
		УсловиеПоПолюРасчеты = "РасчетныйДокумент";
		МассивУсловия = ТаблицаДвиженияВзаиморасчетов.ВыгрузитьКолонку("РасчетныйДокумент");
		ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивУсловия);

		Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено);
		Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеОплачено);
		Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеОплаченоНеОплаченоПокупателем);

		Фильтр = ТаблицаФильтров.Добавить();
		Фильтр.ИмяПоля			= "СчетУчета";
		Фильтр.ЗначениеПоля		= ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента;
		Фильтр.Условие			= "<>";

	ИначеЕсли ВидОперации = "Доход" Тогда
		УсловиеПоПолюРасходы = "Партия";
		УсловиеПоПолюРасчеты = "РасчетныйДокумент";
		МассивУсловия = ТаблицаДвиженияВзаиморасчетов.ВыгрузитьКолонку("РасчетныйДокумент");
		ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивУсловия);

		ВидыРасходов = Новый Массив;
		ВидыРасходов.Добавить(Перечисления.ВидыРасходовУСН.Номенклатура);

		Фильтр = ТаблицаФильтров.Добавить();
		Фильтр.ИмяПоля			= "ВидРасхода";
		Фильтр.ЗначениеПоля		= ВидыРасходов;
		Фильтр.Условие			= "В";

		Фильтр = ТаблицаФильтров.Добавить();
		Фильтр.ИмяПоля			= "СтатусыПартийУСН";
		Фильтр.ЗначениеПоля		= Перечисления.СтатусыПартийУСН.Списанные;
		Фильтр.Условие			= "=";

		Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеОплаченоНеОплаченоПокупателем);
		Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеОплаченоПокупателем);
	КонецЕсли;

	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= УсловиеПоПолюРасходы;
	Фильтр.ЗначениеПоля		= МассивУсловия;
	Фильтр.Условие			= "В";

	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "СтатусыОплатыРасходовУСН";
	Фильтр.ЗначениеПоля	= Статусы;
	Фильтр.Условие			= "В";

	Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.ДатаОплаты) Тогда
		МоментДокумента = СтруктураШапкиДокумента.Ссылка.МоментВремени();
	Иначе
		МоментДокумента = Новый МоментВремени(КонецДня(СтруктураШапкиДокумента.ДатаОплаты), СтруктураШапкиДокумента.Ссылка);
	КонецЕсли;
	ТаблицаРасходов = ВыполнитьЗапросПоРасходам(Новый Граница(МоментДокумента, ВидГраницы.Включая), СтруктураШапкиДокумента.Организация, ТаблицаФильтров);
	ТаблицаРасходов.Индексы.Добавить(УсловиеПоПолюРасходы);

	ТаблицаДляСписания = Новый ТаблицаЗначений;
	Для Каждого Кол Из ТаблицаРасходов.Колонки Цикл
		ТаблицаДляСписания.Колонки.Добавить(Кол.Имя, Кол.ТипЗначения);
	КонецЦикла;
	ТаблицаДляСписания.Колонки.Добавить("СтруктураКурса");

	//Заполняем таблицу списываемых расходов по таблице расходов и фильтрам партионного учета
	Для Каждого СтрокаПартии Из ТаблицаДвиженияВзаиморасчетов Цикл

		Если СтрокаПартии.РасчетныйДокумент = СтруктураШапкиДокумента.Ссылка Тогда
			Продолжить;
		КонецЕсли;

		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить(УсловиеПоПолюРасходы, СтрокаПартии[УсловиеПоПолюРасчеты]);

		НайденныеСтроки = ТаблицаРасходов.НайтиСтроки(СтруктураОтбора);
		СтруктураКурса = СтрокаПартии.СтруктураКурса;

		КоэффРасчетов = ?(СтрокаПартии.ОстатокВзаиморасчетов = 0, 1, СтрокаПартии.СуммаВзаиморасчетов / СтрокаПартии.ОстатокВзаиморасчетов);
		СуммаОсталосьПогасить = СтрокаПартии.СуммаВзаиморасчетов;
		Для Каждого Строка Из НайденныеСтроки Цикл
			Если СуммаОсталосьПогасить <= 0 Тогда
				Прервать;
			КонецЕсли;
			Если Строка.Сумма <= 0 Тогда
				Продолжить;
			КонецЕсли;

			Если НЕ ВидОперации = "Доход" Тогда

				//Исключим агентский НДС, зарегистрированный по тому же расчетному документу
				Если УсловиеПоПолюРасходы = "РасчетныйДокумент"
					И УсловиеПоПолюРасчеты = "РасчетныйДокумент"
					И Строка.ВидРасхода = Перечисления.ВидыРасходовУСН.Налоги Тогда
					Продолжить;
				КонецЕсли;

				Если ЗначениеЗаполнено(Строка.РасчетныйДокумент) Тогда
					Отказ = Ложь;
					ВыделятьНДСУСНДокумент = ?(Отказ, ВыделятьНДСУСН, (УчетнаяПолитика.ПорядокПризнанияРасходовПоНДС(СтруктураШапкиДокумента.Организация, Строка.РасчетныйДокумент.Дата) =
						Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику));
				Иначе
					ВыделятьНДСУСНДокумент = ВыделятьНДСУСН;
				КонецЕсли;

				Если ВыделятьНДСУСНДокумент И
					(Строка.ВидРасхода <> Перечисления.ВидыРасходовУСН.ОС) И
					(Строка.ВидРасхода <> Перечисления.ВидыРасходовУСН.НМА) Тогда

					СуммаСписания = Мин(Строка.Сумма + Строка.НДС, СуммаОсталосьПогасить);
					СуммаОсталосьПогасить = Макс(0, СуммаОсталосьПогасить - СуммаСписания);
					КоэффРасчетов = СуммаСписания / (Строка.Сумма + Строка.НДС);
				Иначе
					СуммаСписания = Мин(Строка.Сумма, СуммаОсталосьПогасить);
					СуммаОсталосьПогасить = СуммаОсталосьПогасить - СуммаСписания;
					КоэффРасчетов = СуммаСписания / (Строка.Сумма);
				КонецЕсли;
			КонецЕсли;

			НоваяСтрока = ТаблицаДляСписания.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);

			Если НЕ КоэффРасчетов = 1 Тогда
				НоваяСтрока.Сумма	 	= КоэффРасчетов*НоваяСтрока.Сумма;
				НоваяСтрока.Количество 	= КоэффРасчетов*НоваяСтрока.Количество;
				НоваяСтрока.НДС 		= КоэффРасчетов*НоваяСтрока.НДС;
			КонецЕсли;
			НоваяСтрока.СтруктураКурса = СтруктураКурса;

			Если НЕ ВидОперации = "Доход" Тогда
				Строка.Сумма 		= Строка.Сумма - НоваяСтрока.Сумма;
				Строка.Количество 	= Строка.Количество - НоваяСтрока.Количество;
				Строка.НДС 			= Строка.НДС - НоваяСтрока.НДС;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	ТаблицыДвижений = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаДляСписания, , ВидОперации, Ложь);

	Если ВидОперации = "ОплатаАО" Тогда
		ТаблицыДвижений.ТаблицаПриход.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка,"РасчетныйДокумент");
		ТаблицыДвижений.ТаблицаПриход.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка.ФизЛицо,"ДоговорКонтрагента");
	КонецЕсли;

	ДвиженияРегистров = СобратьТаблицыДвижений(ТаблицыДвижений,,,);

КонецПроцедуры

//Отразить оплату поставщику по взаиморасчетам УСН и расходам УСН
//
Процедура ОплатаПрочееУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, КУДиР, Получатель = "Налог", ВидДвижения = Неопределено)

	Если ВидДвижения = Неопределено Тогда
		ВидДвижения = ВидДвиженияНакопления.Приход;
	КонецЕсли;

	Если ВидДвижения = ВидДвиженияНакопления.Приход Тогда
		КЗ = -1; //Коэффициент знака взаиморасчетов (+1 или -1)
		ВидОперации = "Оплата";
	Иначе
		КЗ = +1; //Коэффициент знака взаиморасчетов (+1 или -1)
		ВидОперации = "Доход";
	КонецЕсли;

	ВыделятьНДСУСН = (СтруктураШапкиДокумента.ПорядокПризнанияРасходовПоНДС = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику);

	//Формирование таблицы фильтров
	ТаблицаФильтров = Новый ТаблицаЗначений;
	ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
	ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
	ТаблицаФильтров.Колонки.Добавить("Условие");

	Фильтр = ТаблицаФильтров.Добавить();
	Если Получатель = "ПодотчетноеЛицо" Тогда //Подотчетное лицо
		МассивФильтра = ТаблицаОплат.ВыгрузитьКолонку("ДоговорКонтрагента");
		ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивФильтра);
		Фильтр.ИмяПоля			= "Контрагент";
		Фильтр.ЗначениеПоля		= МассивФильтра;
		Фильтр.Условие			= "В";

		Фильтр = ТаблицаФильтров.Добавить();
		Фильтр.ИмяПоля			= "СчетУчета";
		Фильтр.ЗначениеПоля		= БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами_);
		Фильтр.Условие			= "В";

	ИначеЕсли Получатель = "Работник" Тогда //Работник
		МассивФильтра = ТаблицаОплат.ВыгрузитьКолонку("Работник");
		ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивФильтра);
		Фильтр.ИмяПоля			= "Контрагент";
		Фильтр.ЗначениеПоля		= МассивФильтра;
		Фильтр.Условие			= "В";

		Фильтр = ТаблицаФильтров.Добавить();
		Фильтр.ИмяПоля			= "СчетУчета";
		Фильтр.ЗначениеПоля		= ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
		Фильтр.Условие			= "=";

	ИначеЕсли Получатель = "Налог" Тогда //Налоги
		МассивФильтра = ТаблицаОплат.ВыгрузитьКолонку("ДоговорКонтрагента");
		ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивФильтра);
		Фильтр.ИмяПоля			= "СчетУчета";
		Фильтр.ЗначениеПоля		= МассивФильтра;
		Фильтр.Условие			= "В";
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.ДатаОплаты) Тогда
		МоментДокумента = СтруктураШапкиДокумента.Ссылка.МоментВремени();
	Иначе
		МоментДокумента = Новый МоментВремени(КонецДня(СтруктураШапкиДокумента.ДатаОплаты), СтруктураШапкиДокумента.Ссылка);
	КонецЕсли;

	ТаблицаПлатежей = ВыполнитьЗапросПоВзаиморасчетамПрочееУСН(МоментДокумента, СтруктураШапкиДокумента.Организация, ТаблицаФильтров);
	СтрокаИндекса = "";
	Если Получатель = "Налог" Тогда
		СтрокаИндекса = "СчетУчета";
	Иначе
		СтрокаИндекса = "Контрагент";
	КонецЕсли;

	ТаблицаПлатежей.Индексы.Добавить(СтрокаИндекса);

	ТаблицаДвиженияВзаиморасчетов = ТаблицаПлатежей.СкопироватьКолонки();
	ТаблицаДвиженияВзаиморасчетов.Колонки.Добавить("СтруктураКурса");

	//Заполняем таблицу списываемых расходов по таблице расходов и фильтрам партионного учета
	Для Каждого СтрокаПлатеж Из ТаблицаОплат Цикл

		Если СтрокаПлатеж.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтруктураОтбора = Новый Структура;
		Если Получатель = "Налог" Тогда
			СтруктураОтбора.Вставить("СчетУчета",  СтрокаПлатеж.ДоговорКонтрагента);
		ИначеЕсли Получатель = "Работник" Тогда
			СтруктураОтбора.Вставить("Контрагент",  СтрокаПлатеж.Работник);
		Иначе
			СтруктураОтбора.Вставить("Контрагент",  СтрокаПлатеж.ДоговорКонтрагента);
		КонецЕсли;

		НайденныеСтроки = ТаблицаПлатежей.НайтиСтроки(СтруктураОтбора);

		Курс = 1;
		Кратность = 1;

		Если Не ТаблицаОплат.Колонки.Найти("КурсВзаиморасчетов") = Неопределено Тогда
			Курс = ?(СтрокаПлатеж.КурсВзаиморасчетов = 0, Курс, СтрокаПлатеж.КурсВзаиморасчетов);
		КонецЕсли;
		Если Не ТаблицаОплат.Колонки.Найти("КратностьВзаиморасчетов") = Неопределено Тогда
			Кратность = ?(СтрокаПлатеж.КратностьВзаиморасчетов = 0, Кратность, СтрокаПлатеж.КратностьВзаиморасчетов);
		КонецЕсли;
		СтруктураКурса = Новый Структура("Курс, Кратность",Курс,Кратность);

		Если ВидДвижения = ВидДвиженияНакопления.Приход Тогда
			КУДиР.Графа6 = КУДиР.Графа6 + СтрокаПлатеж.Сумма*Курс/Кратность;
		ИначеЕсли ВидДвижения = ВидДвиженияНакопления.Расход Тогда
			КУДиР.Графа4 = КУДиР.Графа4 + СтрокаПлатеж.Сумма*Курс/Кратность;
		КонецЕсли;

		// Подлежащее погашению при списании количество
		СуммаОсталосьПогасить = СтрокаПлатеж.Сумма;
		Для Каждого Строка Из НайденныеСтроки Цикл
			Если СуммаОсталосьПогасить <= 0 Тогда
				Прервать;
			КонецЕсли;
			Если КЗ*(Строка.Сумма)<= 0 Тогда
				Продолжить;
			КонецЕсли;

			СуммаСписания = Мин(КЗ*(Строка.Сумма), СуммаОсталосьПогасить);
			СуммаОсталосьПогасить = СуммаОсталосьПогасить - СуммаСписания;

			НоваяСтрока = ТаблицаДвиженияВзаиморасчетов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);

			Если КЗ*(Строка.Сумма) > СуммаСписания Тогда
				НоваяСтрока.Сумма = Мин(КЗ*(Строка.Сумма), СуммаСписания);
			Иначе
				НоваяСтрока.Сумма = КЗ*(Строка.Сумма);
			КонецЕсли;
			НоваяСтрока.СтруктураКурса = СтруктураКурса;
			Строка.Сумма = Строка.Сумма - НоваяСтрока.Сумма;
		КонецЦикла;
		Если СуммаОсталосьПогасить > 0 Тогда
			Если Получатель = "Налог" Тогда
				ДвижениеВзиморасчетовПрочееУСН(ТаблицаДвиженияВзаиморасчетов, СтруктураШапкиДокумента.Организация, , СтруктураШапкиДокумента.Ссылка, СтрокаПлатеж.ДоговорКонтрагента, СуммаОсталосьПогасить);
			ИначеЕсли Получатель = "Работник" Тогда
				ДвижениеВзиморасчетовПрочееУСН(ТаблицаДвиженияВзаиморасчетов, СтруктураШапкиДокумента.Организация, СтрокаПлатеж.Работник, СтруктураШапкиДокумента.Ссылка, ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда, СуммаОсталосьПогасить);
			Иначе
				ДвижениеВзиморасчетовПрочееУСН(ТаблицаДвиженияВзаиморасчетов, СтруктураШапкиДокумента.Организация, СтрокаПлатеж.ДоговорКонтрагента, СтруктураШапкиДокумента.Ссылка, ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами, СуммаОсталосьПогасить);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если ТаблицаДвиженияВзаиморасчетов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ТаблицаФильтров = Новый ТаблицаЗначений;
	ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
	ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
	ТаблицаФильтров.Колонки.Добавить("Условие");

	Статусы = Новый Массив;
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено);
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеОплачено);
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеОплаченоНеОплаченоПокупателем);

	УсловиеПоПолюРасходы = "РасчетныйДокумент";
	УсловиеПоПолюРасчеты = "РасчетныйДокумент";

	МассивУсловияВрем = ТаблицаДвиженияВзаиморасчетов.ВыгрузитьКолонку("РасчетныйДокумент");
	МассивУсловия = Новый Массив;
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивУсловия);
	// Тип "Расчетного документа" должен быть прописан в типах измерения "Расчетный документ" регистра "РасходыПриУСН"
	// Если такого типа там нет, то документ в массив условий не добавлять, иначе будет ошибка при установке блокировки
	Для каждого ТекущийДокумент Из МассивУсловияВрем Цикл
		Если Метаданные.РегистрыНакопления.РасходыПриУСН.Измерения.РасчетныйДокумент.Тип.СодержитТип(ТипЗнч(ТекущийДокумент)) Тогда
			МассивУсловия.Добавить(ТекущийДокумент);
		КонецЕсли;
	КонецЦикла;
	Если МассивУсловия.Количество() > 0 Тогда
		Фильтр = ТаблицаФильтров.Добавить();
		Фильтр.ИмяПоля      = УсловиеПоПолюРасходы;
		Фильтр.ЗначениеПоля = МассивУсловия;
		Фильтр.Условие      = "В";
	КонецЕсли;

	ДопУсловиеПоПолюРасходы = "";
	Если Получатель = "Работник" Тогда //Работник
		ДопУсловиеПоПолюРасходы = "ЭлементРасхода";
		ДопУсловиеПоПолюРасчеты = "Контрагент";
		ДопМассивУсловия = ТаблицаДвиженияВзаиморасчетов.ВыгрузитьКолонку("Контрагент");
		ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(ДопМассивУсловия);
	ИначеЕсли Получатель = "Налог" Тогда //Налоги
		ДопУсловиеПоПолюРасходы = "СчетУчета";
		ДопУсловиеПоПолюРасчеты = "СчетУчета";
		ДопМассивУсловия = ТаблицаДвиженияВзаиморасчетов.ВыгрузитьКолонку("СчетУчета");
		ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(ДопМассивУсловия);
	КонецЕсли;

	Если НЕ ДопУсловиеПоПолюРасходы = "" Тогда
		Фильтр = ТаблицаФильтров.Добавить();
		Фильтр.ИмяПоля			= ДопУсловиеПоПолюРасходы;
		Фильтр.ЗначениеПоля		= ДопМассивУсловия;
		Фильтр.Условие			= "В";
	КонецЕслИ;

	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "СтатусыОплатыРасходовУСН";
	Фильтр.ЗначениеПоля	= Статусы;
	Фильтр.Условие			= "В";

	Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.ДатаОплаты) Тогда
		МоментДокумента = СтруктураШапкиДокумента.Ссылка.МоментВремени();
	Иначе
		МоментДокумента = Новый МоментВремени(КонецДня(СтруктураШапкиДокумента.ДатаОплаты), СтруктураШапкиДокумента.Ссылка);
	КонецЕсли;
	ТаблицаРасходов = ВыполнитьЗапросПоРасходам(Новый Граница(МоментДокумента, ВидГраницы.Включая), СтруктураШапкиДокумента.Организация, ТаблицаФильтров);
	ТаблицаРасходов.Индексы.Добавить(?(ДопУсловиеПоПолюРасходы = "", УсловиеПоПолюРасходы, УсловиеПоПолюРасходы + "," + ДопУсловиеПоПолюРасходы));

	ТаблицаДляСписания = Новый ТаблицаЗначений;
	Для Каждого Кол Из ТаблицаРасходов.Колонки Цикл
		ТаблицаДляСписания.Колонки.Добавить(Кол.Имя, Кол.ТипЗначения);
	КонецЦикла;
	ТаблицаДляСписания.Колонки.Добавить("СтруктураКурса");

	//Заполняем таблицу списываемых расходов по таблице расходов и фильтрам партионного учета
	Для Каждого СтрокаПартии Из ТаблицаДвиженияВзаиморасчетов Цикл

		Если СтрокаПартии.РасчетныйДокумент =  СтруктураШапкиДокумента.Ссылка Тогда
			Продолжить;
		КонецЕсли;
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить(УсловиеПоПолюРасходы, СтрокаПартии[УсловиеПоПолюРасчеты]);
		Если НЕ ДопУсловиеПоПолюРасходы = "" Тогда
			СтруктураОтбора.Вставить(ДопУсловиеПоПолюРасходы, СтрокаПартии[ДопУсловиеПоПолюРасчеты]);
		КонецЕсли;

		НайденныеСтроки = ТаблицаРасходов.НайтиСтроки(СтруктураОтбора);
		СтруктураКурса = СтрокаПартии.СтруктураКурса;
		// Подлежащее погашению при списании количество
		СуммаОсталосьПогасить = СтрокаПартии.Сумма;
		Для Каждого Строка Из НайденныеСтроки Цикл
			Если СуммаОсталосьПогасить <= 0 Тогда
				Прервать;
			КонецЕсли;
			Если Строка.Сумма <= 0 Тогда
				Продолжить;
			КонецЕсли;

			Если ВыделятьНДСУСН И
				(Строка.ВидРасхода <> Перечисления.ВидыРасходовУСН.ОС) И
				(Строка.ВидРасхода <> Перечисления.ВидыРасходовУСН.НМА) Тогда

				СуммаСписания = Мин(Строка.Сумма + Строка.НДС, СуммаОсталосьПогасить);
				СуммаОсталосьПогасить = Макс(0, СуммаОсталосьПогасить - СуммаСписания);
				К = СуммаСписания / (Строка.Сумма + Строка.НДС);
			Иначе
				СуммаСписания = Мин(Строка.Сумма, СуммаОсталосьПогасить);
				СуммаОсталосьПогасить = СуммаОсталосьПогасить - СуммаСписания;
				К = СуммаСписания / (Строка.Сумма);
			КонецЕсли;

			НоваяСтрока = ТаблицаДляСписания.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);

			Если НЕ К = 1 Тогда
				НоваяСтрока.Сумма	 	= К*НоваяСтрока.Сумма;
				НоваяСтрока.Количество 	= К*НоваяСтрока.Количество;
				НоваяСтрока.НДС 		= К*НоваяСтрока.НДС;
			КонецЕсли;
			НоваяСтрока.СтруктураКурса = СтруктураКурса;

			Строка.Сумма 		= Строка.Сумма - НоваяСтрока.Сумма;
			Строка.Количество 	= Строка.Количество - НоваяСтрока.Количество;
			Строка.НДС 			= Строка.НДС - НоваяСтрока.НДС;

		КонецЦикла;
	КонецЦикла;

	ТаблицыДвижений = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаДляСписания, , ВидОперации, Ложь);

	Если ТаблицаДвиженияВзаиморасчетов.Колонки.Найти("ВидДвижения") = Неопределено Тогда
		ТаблицаДвиженияВзаиморасчетов.Колонки.Добавить("ВидДвижения");
	КонецЕсли;
	ТаблицаДвиженияВзаиморасчетов.ЗаполнитьЗначения(ВидДвижения,"ВидДвижения");

	ДвиженияРегистров = СобратьТаблицыДвижений(ТаблицыДвижений, ТаблицаДвиженияВзаиморасчетов,, ДвиженияРегистров);

КонецПроцедуры

//Добавить движение по регистру взаиморасчетов УСН
//
Процедура ДвижениеВзиморасчетовПрочееУСН(ТаблицаДвижений, Организация, Контрагент = Неопределено, РасчетныйДокумент, СчетУчета, СуммаДокумента) Экспорт

	Движение = ТаблицаДвижений.Добавить();
	Движение.Организация 		= Организация;
	Движение.Контрагент 		= Контрагент;
	Движение.СчетУчета	 		= СчетУчета;
	Движение.РасчетныйДокумент 	= РасчетныйДокумент;
	Движение.Сумма 				= СуммаДокумента;

КонецПроцедуры

//Операция зачета аванса поставщику
//ТаблицаДвижений - Таблица движений приход регистра Расходы УСН
Процедура РасчетыСКонтрагентами_ЗачетАвансаПоставщикуУСН(СтруктураШапкиДокумента, ТаблицаАвансов, ТаблицаДвижений, ДвиженияРегистров, Договор, СуммаДокумента, ПриходОтражен = Ложь) Экспорт

	ТаблицаДвиженияВзаиморасчетов = ТаблицаАвансов.Скопировать();
	ТаблицаДвиженияВзаиморасчетов.Колонки.ДокументРасчетов.Имя = "РасчетныйДокумент";
	ТаблицаДвиженияВзаиморасчетов.Колонки.Добавить("СтруктураКурса");

	СуммаРегл = 0;
	СуммаОсталосьПогасить = СуммаДокумента;
	СтрокаРеквизитовПлДок = "";

	ИтоговаяСтруктура = Новый Структура("ТаблицаПриход, ТаблицаРасход, ТаблицаПринятых", Новый ТаблицаЗначений(), Новый ТаблицаЗначений(), Новый ТаблицаЗначений());

	ТаблицаРасходов = ТаблицаДвижений.Скопировать();

	Для Каждого Строка Из ТаблицаДвиженияВзаиморасчетов Цикл

		Если Строка.РасчетныйДокумент = СтруктураШапкиДокумента.Ссылка Тогда
			Продолжить;
		КонецЕсли;

		Если Строка.СуммаВзаиморасчетов = 0 Тогда
			Продолжить;
		КонецЕсли;

		СуммаСписания = Строка.СуммаВзаиморасчетов;

		//Проверка оплаты авансового отчета
		Если ТипЗнч(Строка.РасчетныйДокумент) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда

			//Формирование таблицы фильтров
			ТаблицаФильтров = Новый ТаблицаЗначений;
			ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
			ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
			ТаблицаФильтров.Колонки.Добавить("Условие");

			Фильтр = ТаблицаФильтров.Добавить();
			Фильтр.ИмяПоля			= "РасчетныйДокумент";
			Фильтр.ЗначениеПоля		= Строка.РасчетныйДокумент;
			Фильтр.Условие			= "=";

			ТаблицаРасчетовАО = ВыполнитьЗапросПоВзаиморасчетамПрочееУСН(Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая), СтруктураШапкиДокумента.Организация, ТаблицаФильтров);

			Если ТаблицаРасчетовАО.Итог("Сумма") < 0 Тогда
				НеОплаченоПодотчетномуЛицу = Мин(Строка.СуммаВзаиморасчетов, -(ТаблицаРасчетовАО.Итог("Сумма")));
				Для Каждого ЗаписьПоАО Из ТаблицаРасчетовАО Цикл
					Если НеОплаченоПодотчетномуЛицу <= 0 Тогда
						Прервать;
					КонецЕсли;
					Если ЗаписьПоАО.Сумма > 0 Тогда
						Продолжить;
					КонецЕсли;
					КорректировкаПоАО 		   = Мин(-ЗаписьПоАО.Сумма, НеОплаченоПодотчетномуЛицу);
					НеОплаченоПодотчетномуЛицу = НеОплаченоПодотчетномуЛицу - КорректировкаПоАО;
					СуммаСписания 			   = СуммаСписания - КорректировкаПоАО;

					Если ТаблицаРасходов.Колонки.Найти("СтруктураКурса") = Неопределено Тогда
						ТаблицаРасходов.Колонки.Добавить("СтруктураКурса");
					КонецЕсли;
					ТаблицаРасходов.ЗаполнитьЗначения(Новый Структура("Курс, Кратность",ОпределитьКурсПоДокументу(Договор, Неопределено, Строка.РасчетныйДокумент),1), "СтруктураКурса");
					ИтоговаяСтруктура = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаРасходов, КорректировкаПоАО, "КорректировкаПоАО",, Строка.РасчетныйДокумент, ИтоговаяСтруктура);
				КонецЦикла;
				Если СуммаСписания = 0 Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если ТаблицаРасходов.Колонки.Найти("СтруктураКурса") = Неопределено Тогда
			ТаблицаРасходов.Колонки.Добавить("СтруктураКурса");
		КонецЕсли;

		ТаблицаРасходов.ЗаполнитьЗначения(Новый Структура("Курс, Кратность",ОпределитьКурсПоДокументу(Договор, Неопределено, Строка.РасчетныйДокумент),1), "СтруктураКурса");
		ИтоговаяСтруктура = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаРасходов, СуммаСписания, "Оплата",, Строка.РасчетныйДокумент, ИтоговаяСтруктура);

	КонецЦикла;

	Если НЕ ПриходОтражен Тогда
		Для Каждого Строка ИЗ ТаблицаДвижений Цикл
			НоваяСтрока = ИтоговаяСтруктура.ТаблицаПриход.Вставить(0);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
	КонецЕсли;

	ДвиженияРегистров = СобратьТаблицыДвижений(ИтоговаяСтруктура, , , ДвиженияРегистров);
КонецПроцедуры

//Операция зачета аванса поставщику
//ТаблицаДвижений - Таблица движений приход регистра Расходы УСН
Процедура РасчетыПрочие_ЗачетАвансаПоставщикуУСН(СтруктураШапкиДокумента, ТаблицаДвижений, ДвиженияРегистров, Договор, СуммаДокумента, ПриходОтражен = Ложь) Экспорт

	КЗ = 1; //Коэффициент знака взаиморасчетов (+1 или -1)

	//Формирование таблицы фильтров
	ТаблицаФильтров = Новый ТаблицаЗначений;
	ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
	ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
	ТаблицаФильтров.Колонки.Добавить("Условие");

	Фильтр = ТаблицаФильтров.Добавить();

	Если ТипЗнч(Договор) = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
		Фильтр.ИмяПоля			= "СчетУчета";
		Фильтр.ЗначениеПоля	= Договор;
		Фильтр.Условие 		= "=";
	Иначе
		Фильтр.ИмяПоля			= "Контрагент";
		Фильтр.ЗначениеПоля	= Договор;
		Фильтр.Условие 		= "=";
		Фильтр = ТаблицаФильтров.Добавить();
		Фильтр.ИмяПоля			= "СчетУчета";
		Фильтр.ЗначениеПоля		= БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами_);
		Фильтр.Условие			= "В";
	КонецЕсли;

	ТаблицаПлатежей = ВыполнитьЗапросПоВзаиморасчетамПрочееУСН(Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая), СтруктураШапкиДокумента.Организация, ТаблицаФильтров);

	ТаблицаДвиженияВзаиморасчетов = ТаблицаПлатежей.СкопироватьКолонки();
	ТаблицаДвиженияВзаиморасчетов.Колонки.Добавить("СтруктураКурса");
	СуммаРегл = 0;
	СуммаОсталосьПогасить = СуммаДокумента;
	СтрокаРеквизитовПлДок = "";
	ИтоговаяСтруктура = Новый Структура("ТаблицаПриход, ТаблицаРасход, ТаблицаПринятых", Новый ТаблицаЗначений(), Новый ТаблицаЗначений(), Новый ТаблицаЗначений());

	ТаблицаРасходов = ТаблицаДвижений.Скопировать();

	Для Каждого Строка Из ТаблицаПлатежей Цикл
		Если СуммаОсталосьПогасить <= 0 Тогда
			Прервать;
		КонецЕсли;
		Если КЗ*(Строка.Сумма)<= 0 Тогда
			Продолжить;
		КонецЕсли;

		СуммаСписания = Мин(КЗ*(Строка.Сумма), СуммаОсталосьПогасить);
		СуммаОсталосьПогасить = СуммаОсталосьПогасить - СуммаСписания;

		НоваяСтрока = ТаблицаДвиженияВзаиморасчетов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);

		НоваяСтрока.Сумма = СуммаСписания;

		Если ТаблицаРасходов.Колонки.Найти("СтруктураКурса") = Неопределено Тогда
			ТаблицаРасходов.Колонки.Добавить("СтруктураКурса");
		КонецЕсли;

		ТаблицаРасходов.ЗаполнитьЗначения(Новый Структура("Курс, Кратность",ОпределитьКурсПоДокументу(Договор, Неопределено, Строка.РасчетныйДокумент),1), "СтруктураКурса");
		ИтоговаяСтруктура = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаРасходов, СуммаСписания, "Оплата",, Строка.РасчетныйДокумент, ИтоговаяСтруктура);

	КонецЦикла;

	Если СуммаОсталосьПогасить > 0 Тогда
		Если ТипЗнч(Договор) = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
			ДвижениеВзиморасчетовПрочееУСН(ТаблицаДвиженияВзаиморасчетов, СтруктураШапкиДокумента.Организация, , СтруктураШапкиДокумента.Ссылка, Договор, СуммаОсталосьПогасить);
		Иначе
			ДвижениеВзиморасчетовПрочееУСН(ТаблицаДвиженияВзаиморасчетов, СтруктураШапкиДокумента.Организация, Договор, СтруктураШапкиДокумента.Ссылка, ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами, СуммаОсталосьПогасить);
		КонецЕслИ;
		ИтоговаяСтруктура = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаРасходов, 0, "Оплата",, СтруктураШапкиДокумента.Ссылка, ИтоговаяСтруктура);
	КонецЕсли;

	Если ТаблицаДвиженияВзаиморасчетов.Колонки.Найти("ВидДвижения") = Неопределено Тогда
		ТаблицаДвиженияВзаиморасчетов.Колонки.Добавить("ВидДвижения");
	КонецЕсли;

	ТаблицаДвиженияВзаиморасчетов.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход,"ВидДвижения");

	Если НЕ ПриходОтражен Тогда
		Для Каждого Строка ИЗ ТаблицаДвижений Цикл
			НоваяСтрока = ИтоговаяСтруктура.ТаблицаПриход.Вставить(0);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
	КонецЕсли;

	ДвиженияРегистров = СобратьТаблицыДвижений(ИтоговаяСтруктура, ТаблицаДвиженияВзаиморасчетов, , ДвиженияРегистров);

КонецПроцедуры

Процедура ОтражениеТаможенныхРасходовУСН(СтруктураШапкиДокумента, ТаблицаАвансов = Неопределено, ТаблицаДвижений, ДвиженияРегистров)

	ИтоговаяСтруктура = Новый Структура("ТаблицаПриход, ТаблицаРасход, ТаблицаПринятых", Новый ТаблицаЗначений(), Новый ТаблицаЗначений(), Новый ТаблицаЗначений());

	ТаблицаРасходов = ТаблицаДвижений.Скопировать();
	ТаблицаРасходов.Колонки.Добавить("ЭтоТаможенныйНДС", Новый ОписаниеТипов("Булево"));
	
	ЕстьРасходыВВалюте = ЗначениеЗаполнено(СтруктураШапкиДокумента.ВалютаВзаиморасчетов)
		И СтруктураШапкиДокумента.ВалютаВзаиморасчетов <> СтруктураШапкиДокумента.ВалютаРегламентированногоУчета;
	
	Если ЕстьРасходыВВалюте И ТаблицаРасходов.Колонки.Найти("СтруктураКурса") = Неопределено Тогда
		ТаблицаРасходов.Колонки.Добавить("СтруктураКурса", Новый ОписаниеТипов("Структура"));
		ТаблицаРасходов.ЗаполнитьЗначения(
			РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтруктураШапкиДокумента.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.Дата),
			"СтруктураКурса");
	КонецЕсли;
	
	ИтоговаяСтруктура = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаРасходов, , "Оплата", Ложь, СтруктураШапкиДокумента.Ссылка, ИтоговаяСтруктура);
	
	ВыделитьТаможенныйНДСВПринятыхРасходах(ИтоговаяСтруктура);
	
	ДвиженияРегистров = СобратьТаблицыДвижений(ИтоговаяСтруктура, , , ДвиженияРегистров);

КонецПроцедуры

Процедура КорректировкаРеализацииУСН(СтруктураШапкиДокумента, РеквизитыКорректировки, ТаблицаВозврат, ТаблицаРасходыУСНПоСделке, ДвиженияРегистровВх)
	
	Перем КэшКурсовВалют;
	
	Если ТаблицаВозврат = Неопределено ИЛИ ТаблицаВозврат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоКорректировкаПрошлогоПериода = РеквизитыКорректировки.ЭтоКорректировкаПрошлогоПериода;
	
	// параметры учетной политики на дату корректировки
	ПорядокПризнанияРасходовПоНДС           = УчетнаяПолитика.ПорядокПризнанияРасходовПоНДС(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата);
	ПорядокПризнанияРасходовПоТоварам       = УчетнаяПолитика.ПорядокПризнанияРасходовПоТоварам(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата);
	ПорядокПризнанияМатериальныхРасходов    = УчетнаяПолитика.ПорядокПризнанияМатериальныхРасходов(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата);
	
	// параметры учетной политики на дату реализации
	ПорядокПризнанияРасходовПоНДСРеализация        = УчетнаяПолитика.ПорядокПризнанияРасходовПоНДС(РеквизитыКорректировки.Организация, РеквизитыКорректировки.ДокументРеализацииДата);
	ПорядокПризнанияРасходовПоТоварамРеализация    = УчетнаяПолитика.ПорядокПризнанияРасходовПоТоварам(РеквизитыКорректировки.Организация, РеквизитыКорректировки.ДокументРеализацииДата);
	ПорядокПризнанияМатериальныхРасходовРеализация = УчетнаяПолитика.ПорядокПризнанияМатериальныхРасходов(РеквизитыКорректировки.Организация, РеквизитыКорректировки.ДокументРеализацииДата);
	
	ВыделятьНДСУСН           = (ПорядокПризнанияРасходовПоНДС           = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику);
	ВыделятьНДСУСНРеализация = (ПорядокПризнанияРасходовПоНДСРеализация = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику);

	ТоварыПоОплате    = (ПорядокПризнанияРасходовПоТоварам    = Перечисления.ПорядокПризнанияРасходовПоТоварам.ПоОплатеПоставщику);
	ТоварыПоОтгрузке  = (ПорядокПризнанияРасходовПоТоварам    = Перечисления.ПорядокПризнанияРасходовПоТоварам.ПоФактуРеализации);
	МатериалыПоОплате = (ПорядокПризнанияМатериальныхРасходов = Перечисления.ПорядокПризнанияМатериальныхРасходов.ПоОплатеПоставщику);
	
	ТоварыПоОплатеРеализация    = (ПорядокПризнанияРасходовПоТоварамРеализация    = Перечисления.ПорядокПризнанияРасходовПоТоварам.ПоОплатеПоставщику);
	ТоварыПоОтгрузкеРеализация  = (ПорядокПризнанияРасходовПоТоварамРеализация    = Перечисления.ПорядокПризнанияРасходовПоТоварам.ПоФактуРеализации);
	МатериалыПоОплатеРеализация = (ПорядокПризнанияМатериальныхРасходовРеализация = Перечисления.ПорядокПризнанияМатериальныхРасходов.ПоОплатеПоставщику);
	
	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ТаблицаТовары = ТаблицаВозврат.Скопировать(, "Номенклатура, СчетУчета, Количество");
	ТаблицаТовары.Свернуть("Номенклатура, СчетУчета", "Количество");
	
	// Подготовить пустые таблицы для формирования движений
	НаборЗаписей = РегистрыНакопления.РасходыПриУСН.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(РеквизитыКорректировки.ДокументРеализацииСсылка);
	ТаблицаДвиженийРасходов = НаборЗаписей.ВыгрузитьКолонки();
	// Добавить обязательные колонки
	ТаблицаДвиженийРасходов.Колонки.Добавить("ЭтоТовар", Новый ОписаниеТипов("Булево"));
	ТаблицаДвиженийРасходов.Колонки.Добавить("ЭтоМатериал", Новый ОписаниеТипов("Булево"));
	
	ТаблицаКорректировкиКУДиР = ТаблицаДвиженийРасходов.Скопировать();
	ТаблицаКорректировкиКУДиР.Колонки.Добавить("ДатаКорректировки", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТаблицаКорректировкиКУДиР.Колонки.Добавить("ДополнительноеОписание", ОбщегоНазначения.ОписаниеТипаСтрока(200));

	// Добавим в партии информацию об изменении ОтражениеВУСН
	НалоговыйУчетУСН.ЗаполнитьОтражениеВНУпоСписанию(СтруктураШапкиДокумента, ТаблицаВозврат, "Реализация"); 

	// Формирование таблицы фильтров
	
	МассивНоменклатуры = ТаблицаТовары.ВыгрузитьКолонку("Номенклатура");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивНоменклатуры);

	//МассивСчетовУчета = ТаблицаТовары.ВыгрузитьКолонку("СчетУчета");
	//ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивСчетовУчета);
	
	ТаблицаФильтров = Новый ТаблицаЗначений;
	ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
	ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
	ТаблицаФильтров.Колонки.Добавить("Условие");

	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля      = "ВидРасхода";
	Фильтр.ЗначениеПоля = Перечисления.ВидыРасходовУСН.Номенклатура;
	Фильтр.Условие      = "=";

	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля      = "СтатусыПартийУСН";
	Фильтр.ЗначениеПоля = Перечисления.СтатусыПартийУСН.Списанные;
	Фильтр.Условие      = "=";
	
	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля      = "ЭлементРасхода";
	Фильтр.ЗначениеПоля = МассивНоменклатуры;
	Фильтр.Условие      = "В";

	//Фильтр = ТаблицаФильтров.Добавить();
	//Фильтр.ИмяПоля      = "СчетУчета";
	//Фильтр.ЗначениеПоля = МассивСчетовУчета;
	//Фильтр.Условие      = "В";
	
	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля      = "Партия";
	Фильтр.ЗначениеПоля = РеквизитыКорректировки.ДокументРеализацииСсылка;
	Фильтр.Условие      = "=";

	// Из остатков расходов выбираем соответствующие партии и элементы расходов
	ТаблицаОстатковРасходов = НалоговыйУчетУСН.ВыполнитьЗапросПоРасходамДляКорректировочныхДокументов(
		СтруктураШапкиДокумента.Ссылка, СтруктураШапкиДокумента.Организация,
		ТаблицаФильтров, , ЭтоКорректировкаПрошлогоПериода);

	ТаблицаВозврат.Индексы.Добавить("Номенклатура");
	ТаблицаРасходыУСНПоСделке.Индексы.Добавить("ЭлементРасхода,Партия");
	ТаблицаОстатковРасходов.Индексы.Добавить("ЭлементРасхода");

	// Цикл по товарам, ...
	Для Каждого Строка Из ТаблицаТовары Цикл

		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Номенклатура", Строка.Номенклатура);

		НайденныеСтроки = ТаблицаВозврат.НайтиСтроки(СтруктураОтбора);

		//Добавить строки поступления по партиям
		КоличествоОсталосьСписать = Строка.Количество; 
		
		Для Каждого СтрокаПартии Из НайденныеСтроки Цикл
			Если НЕ КоличествоОсталосьСписать > 0 Тогда
				Прервать;
			КонецЕсли;
			Если НЕ СтрокаПартии.Количество > 0 Тогда
				Продолжить;
			КонецЕсли;

			СтатусСписания = СтрокаПартии.СтатусСписания;
			
			КоличествоСписать         = Мин(КоличествоОсталосьСписать, СтрокаПартии.Количество);
			КоличествоОсталосьСписать = КоличествоОсталосьСписать - КоличествоСписать;
			СтрокаПартии.Количество   = СтрокаПартии.Количество - КоличествоСписать;

			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("ЭлементРасхода", Строка.Номенклатура);

			СтруктураОтбораПоПартиям = Новый Структура;
			СтруктураОтбораПоПартиям.Вставить("ЭлементРасхода", Строка.Номенклатура);
			СтруктураОтбораПоПартиям.Вставить("Партия",         СтрокаПартии.Партия);

			НайденныеСтрокиСписано = ТаблицаРасходыУСНПоСделке.НайтиСтроки(СтруктураОтбораПоПартиям);
			НайденныеСтрокиОстаток = ТаблицаОстатковРасходов.НайтиСтроки(СтруктураОтбора);

			// 1. Изменяем статусы текущих остатков расходов
			КоличествоОсталосьСписатьРасход = КоличествоСписать;
			Для Каждого СтрокаСписания Из НайденныеСтрокиСписано Цикл
				Если НЕ СтрокаСписания.Количество > 0 Тогда
					Продолжить;
				КонецЕсли;
				Для Каждого СтрокаОстатка Из НайденныеСтрокиОстаток Цикл
					Если НЕ СтрокаСписания.Количество > 0 Тогда
						Продолжить;
					КонецЕсли;
					Если НЕ КоличествоОсталосьСписатьРасход > 0 Тогда
						Прервать;
					КонецЕсли;
					Если НЕ СтрокаОстатка.Количество > 0 Тогда
						Продолжить;
					КонецЕсли;

					КоличествоСписатьРасход = Мин(КоличествоОсталосьСписатьРасход, СтрокаСписания.Количество, СтрокаОстатка.Количество);
					Коэфф = ?(СтрокаОстатка.Количество = 0, 0, КоличествоСписатьРасход/СтрокаОстатка.Количество);
					//Добавить строки поступления по расходам
					НоваяСтрокаРасход = ТаблицаДвиженийРасходов.Добавить();
					НоваяСтрокаПриход = ТаблицаДвиженийРасходов.Добавить();

					ЗаполнитьЗначенияСвойств(НоваяСтрокаРасход, СтрокаОстатка);
					ЗаполнитьЗначенияСвойств(НоваяСтрокаПриход, СтрокаОстатка);

					НоваяСтрокаРасход.ВидДвижения = ВидДвиженияНакопления.Расход;
					НоваяСтрокаПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
					НоваяСтрокаПриход.СтатусыПартийУСН  = СтрокаСписания.СтатусыПартийУСН;
					НоваяСтрокаПриход.Партия            = СтрокаСписания.Партия;
					Если (НоваяСтрокаПриход.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеОплаченоПокупателем)
							ИЛИ (НоваяСтрокаПриход.СтатусыОплатыРасходовУСН  = Перечисления.СтатусыРасходовУСН.НеРаспределено) Тогда
						НоваяСтрокаПриход.СтатусыОплатыРасходовУСН   = Перечисления.СтатусыРасходовУСН.НеСписано;
					Иначе
						НоваяСтрокаПриход.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено;
					КонецЕсли;
					//Движение расход
					НоваяСтрокаРасход.Сумма      = Коэфф*СтрокаОстатка.Сумма;
					НоваяСтрокаРасход.НДС        = Коэфф*СтрокаОстатка.НДС;
					НоваяСтрокаРасход.Количество = КоличествоСписатьРасход;
					//Движение приход
					НоваяСтрокаПриход.Сумма      = Коэфф * СтрокаОстатка.Сумма;
					НоваяСтрокаПриход.НДС        = Коэфф * СтрокаОстатка.НДС;
					НоваяСтрокаПриход.Количество = КоличествоСписатьРасход;

					КоличествоОсталосьСписатьРасход = КоличествоОсталосьСписатьРасход - КоличествоСписатьРасход;
					СтрокаСписания.Количество       = СтрокаСписания.Количество - НоваяСтрокаПриход.Количество;
					СтрокаСписания.Сумма            = СтрокаСписания.Сумма - НоваяСтрокаПриход.Сумма;
					СтрокаСписания.НДС              = СтрокаСписания.НДС - НоваяСтрокаПриход.НДС;

					СтрокаОстатка.Количество = СтрокаОстатка.Количество - НоваяСтрокаПриход.Количество;
					СтрокаОстатка.Сумма      = СтрокаОстатка.Сумма - НоваяСтрокаПриход.Сумма;
					СтрокаОстатка.НДС        = СтрокаОстатка.НДС - НоваяСтрокаПриход.НДС;
                    // если корректировка прошлого года - учтем в остатках на начало года количество возврата, уже распределенное на текущие остатки
					Если ЭтоКорректировкаПрошлогоПериода Тогда						
						СтрокаОстатка.КоличествоНачалоГода = СтрокаОстатка.КоличествоНачалоГода - НоваяСтрокаПриход.Количество;
						СтрокаОстатка.СуммаНачалоГода      = СтрокаОстатка.СуммаНачалоГода - НоваяСтрокаПриход.Сумма;
						СтрокаОстатка.НДСНачалоГода        = СтрокаОстатка.НДСНачалоГода - НоваяСтрокаПриход.НДС;
					КонецЕсли; 
					
					Если (РеквизитыКорректировки.Период >= Дата("20060101"))
							И (ТоварыПоОтгрузке)
							И (НоваяСтрокаРасход.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеОплаченоПокупателем)
							И (НоваяСтрокаПриход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются)
							И (СтатусСписания <> Перечисления.ОтражениеВУСН.НеПринимаются) Тогда

						КурсВалюты = ПолучитьКурсВалютыИзКэша(НоваяСтрокаПриход.Валюта, РеквизитыКорректировки.Период, КэшКурсовВалют);
						
						СуммаСторноРасходов = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(НоваяСтрокаПриход.Сумма,
													НоваяСтрокаПриход.Валюта, ВалютаРеглУчета,
													КурсВалюты.Курс, 1,
													КурсВалюты.Кратность, 1);
													
						СуммаСторноНДС = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(НоваяСтрокаПриход.НДС,
													НоваяСтрокаПриход.Валюта, ВалютаРеглУчета,
													КурсВалюты.Курс, 1,
													КурсВалюты.Кратность, 1);

						НоваяСтрокаКУДиР = ТаблицаКорректировкиКУДиР.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаКУДиР, НоваяСтрокаПриход);
						НоваяСтрокаКУДиР.Сумма = - СуммаСторноРасходов;
						НоваяСтрокаКУДиР.НДС   = - СуммаСторноНДС;
						НоваяСтрокаКУДиР.ДатаКорректировки = РеквизитыКорректировки.Период;
						
					ИначеЕсли (ВыделятьНДСУСН)
							И (НоваяСтрокаПриход.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписано)
							И (НоваяСтрокаПриход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются)
							И (СтатусСписания = Перечисления.ОтражениеВУСН.НеПринимаются) Тогда

						КурсВалюты = ПолучитьКурсВалютыИзКэша(НоваяСтрокаПриход.Валюта, РеквизитыКорректировки.Период, КэшКурсовВалют);
						
						СуммаПризнанияНДС = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(НоваяСтрокаПриход.НДС,
													НоваяСтрокаПриход.Валюта, ВалютаРеглУчета,
													КурсВалюты.Курс, 1,
													КурсВалюты.Кратность, 1);

						НоваяСтрокаКУДиР = ТаблицаКорректировкиКУДиР.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаКУДиР, НоваяСтрокаПриход);
						НоваяСтрокаКУДиР.Сумма = СуммаПризнанияНДС;
						НоваяСтрокаКУДиР.НДС   = 0;
						НоваяСтрокаКУДиР.ВидРасхода = Перечисления.ВидыРасходовУСН.НДС;
						НоваяСтрокаКУДиР.ДатаКорректировки = РеквизитыКорректировки.Период;
						НоваяСтрокаКУДиР.ДополнительноеОписание = "При уменьшении количества реализованных ТМЦ признаны расходы на уплату НДС, сторнированные при реализации.";
						
					КонецЕсли;

				КонецЦикла;
			КонецЦикла;

			// 2. Если количество к возврату не распределено полностью на текущие остатки расходов - 
			//    отражаем приход из ранее принятых расходов в текущем периоде, сторнируя сумму принятых в КУДиР
			Если КоличествоОсталосьСписатьРасход > 0 Тогда
				Для Каждого СтрокаСписания Из НайденныеСтрокиСписано Цикл
					Если НЕ СтрокаСписания.Количество > 0 Тогда
						Продолжить;
					КонецЕсли;
					
					// если корректируется прошлый период - на текущем этапе приходуем только списанные (признанные) расходы текущего периода;
					// корректировка КУДиР также производится в текущем периоде
					КоличествоСписатьРасходТекущегоПериода = Мин(КоличествоОсталосьСписатьРасход, СтрокаСписания.Количество);
					
					Если ЭтоКорректировкаПрошлогоПериода Тогда
						КоличествоПризнаноТекущийПериод = 0;
						Для каждого СтрокаОстатка Из НайденныеСтрокиОстаток Цикл
							КоличествоПризнаноТекущийПериод = КоличествоПризнаноТекущийПериод + СтрокаОстатка.КоличествоНачалоГода;
						КонецЦикла;
						КоличествоСписатьРасходТекущегоПериода = Мин(КоличествоПризнаноТекущийПериод, КоличествоСписатьРасходТекущегоПериода);
					КонецЕсли; 
					
					Если НЕ КоличествоСписатьРасходТекущегоПериода > 0 Тогда
						// в текущем периоде расходы по данной строке списания не признавались
						Продолжить;
					КонецЕсли; 
					
					Коэфф = ?(СтрокаСписания.Количество = 0, 0, КоличествоСписатьРасходТекущегоПериода/СтрокаСписания.Количество);

					//Добавить строки поступления по расходам
					НоваяСтрокаПриход = ТаблицаДвиженийРасходов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаПриход, СтрокаСписания);
					НоваяСтрокаПриход.ВидДвижения = ВидДвиженияНакопления.Приход;

					//Определим сумму сторнируемых расходов
					ЭтоТовар	= СтрокаСписания.ЭтоТовар;
					ЭтоМатериал	= СтрокаСписания.ЭтоМатериал;
					
					РасходыПоОплате = ((ТоварыПоОплате И ЭтоТовар) ИЛИ (МатериалыПоОплате И ЭтоМатериал));
				
					Если (РасходыПоОплате) И (НоваяСтрокаПриход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются) Тогда
						НоваяСтрокаПриход.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписаноПринято;
					Иначе
						НоваяСтрокаПриход.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписано;
					КонецЕсли;

					//Движение приход
					НоваяСтрокаПриход.Сумма      = Коэфф*СтрокаСписания.Сумма;
					НоваяСтрокаПриход.НДС        = Коэфф*СтрокаСписания.НДС;
					НоваяСтрокаПриход.Количество = КоличествоСписатьРасходТекущегоПериода;

					КоличествоОсталосьСписатьРасход = КоличествоОсталосьСписатьРасход - КоличествоСписатьРасходТекущегоПериода;
					СтрокаСписания.Количество       = СтрокаСписания.Количество - НоваяСтрокаПриход.Количество;
					СтрокаСписания.Сумма            = СтрокаСписания.Сумма - НоваяСтрокаПриход.Сумма;
					СтрокаСписания.НДС              = СтрокаСписания.НДС - НоваяСтрокаПриход.НДС;

					Если (НЕ ВыделятьНДСУСНРеализация) И (ВыделятьНДСУСН) Тогда
						НоваяСтрокаПриход.Сумма = НоваяСтрокаПриход.Сумма - НоваяСтрокаПриход.НДС;
					КонецЕсли;

					// сторнируем расходы в КУДиР текущим периодом
					
					Если (НЕ РасходыПоОплате) И (НоваяСтрокаПриход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются)
							И (НЕ СтатусСписания = Перечисления.ОтражениеВУСН.НеПринимаются) Тогда
						
						КурсВалюты = ПолучитьКурсВалютыИзКэша(НоваяСтрокаПриход.Валюта, РеквизитыКорректировки.Период, КэшКурсовВалют);
						
						СуммаСторноРасходов = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(НоваяСтрокаПриход.Сумма,
								НоваяСтрокаПриход.Валюта,ВалютаРеглУчета,
								КурсВалюты.Курс, 1,
								КурсВалюты.Кратность, 1);
						
						СуммаСторноНДС = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(НоваяСтрокаПриход.НДС,
								НоваяСтрокаПриход.Валюта, ВалютаРеглУчета,
								КурсВалюты.Курс, 1,
								КурсВалюты.Кратность, 1);

						НоваяСтрокаКУДиР = ТаблицаКорректировкиКУДиР.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаКУДиР, НоваяСтрокаПриход);
					    НоваяСтрокаКУДиР.Количество = 0;
						НоваяСтрокаКУДиР.Сумма 		= - СуммаСторноРасходов; 
						НоваяСтрокаКУДиР.НДС 		= - СуммаСторноНДС;
						НоваяСтрокаКУДиР.ДатаКорректировки = РеквизитыКорректировки.Период;		
								
					ИначеЕсли (ВыделятьНДСУСН)
						И (НоваяСтрокаПриход.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписано)
						И (НоваяСтрокаПриход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются)
						И (СтатусСписания = Перечисления.ОтражениеВУСН.НеПринимаются) Тогда

						КурсВалюты = ПолучитьКурсВалютыИзКэша(НоваяСтрокаПриход.Валюта, РеквизитыКорректировки.Период, КэшКурсовВалют);
						
						СуммаПризнанияНДС = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(НоваяСтрокаПриход.НДС,
								НоваяСтрокаПриход.Валюта, ВалютаРеглУчета,
								КурсВалюты.Курс, 1,
								КурсВалюты.Кратность, 1);

						НоваяСтрокаКУДиР = ТаблицаКорректировкиКУДиР.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаКУДиР, НоваяСтрокаПриход);
						НоваяСтрокаКУДиР.Сумма = СуммаПризнанияНДС;
						НоваяСтрокаКУДиР.НДС   = 0;
						НоваяСтрокаКУДиР.ВидРасхода = Перечисления.ВидыРасходовУСН.НДС;
						НоваяСтрокаКУДиР.ДатаКорректировки = РеквизитыКорректировки.Период;
						НоваяСтрокаКУДиР.ДополнительноеОписание = "При уменьшении количества реализованных ТМЦ признаны расходы на уплату НДС, сторнированные при реализации.";
								
					КонецЕсли;

				КонецЦикла;
			КонецЕсли;
			
			// 3. Если количество к возврату не распределено полностью на текущие остатки расходов, и на расходы, признанные в текущем периоде:
			//    отражаем приход из ранее принятых расходов прошлого периода, сторнируя сумму принятых в КУДиР датой окончания корректируемого года
			Если ЭтоКорректировкаПрошлогоПериода И КоличествоОсталосьСписатьРасход > 0 Тогда
				Для Каждого СтрокаСписания Из НайденныеСтрокиСписано Цикл
					Если НЕ СтрокаСписания.Количество > 0 Тогда
						Продолжить;
					КонецЕсли;
					
					КоличествоСписатьРасходПрошлогоПериода = Мин(КоличествоОсталосьСписатьРасход, СтрокаСписания.Количество); 
					
					Коэфф = ?(СтрокаСписания.Количество = 0, 0, КоличествоСписатьРасходПрошлогоПериода/СтрокаСписания.Количество);

					//Добавить строки поступления по расходам
					НоваяСтрокаПриход = ТаблицаДвиженийРасходов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаПриход, СтрокаСписания);
					НоваяСтрокаПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
 
					Если НЕ НоваяСтрокаПриход.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписаноПринято Тогда
						НоваяСтрокаПриход.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписано;
					КонецЕсли;

					//Движение приход
					НоваяСтрокаПриход.Сумма      = Коэфф*СтрокаСписания.Сумма;
					НоваяСтрокаПриход.НДС        = Коэфф*СтрокаСписания.НДС;
					НоваяСтрокаПриход.Количество = КоличествоСписатьРасходПрошлогоПериода;

					КоличествоОсталосьСписатьРасход = КоличествоОсталосьСписатьРасход - КоличествоСписатьРасходПрошлогоПериода;
					СтрокаСписания.Количество       = СтрокаСписания.Количество - НоваяСтрокаПриход.Количество;
					СтрокаСписания.Сумма            = СтрокаСписания.Сумма - НоваяСтрокаПриход.Сумма;
					СтрокаСписания.НДС              = СтрокаСписания.НДС - НоваяСтрокаПриход.НДС;

					Если (НЕ ВыделятьНДСУСНРеализация) И (ВыделятьНДСУСН) Тогда
						НоваяСтрокаПриход.Сумма = НоваяСтрокаПриход.Сумма - НоваяСтрокаПриход.НДС;
					КонецЕсли;

					// сторнируем расходы в КУДиР датой окончания прошлого периода
					Если (НЕ НоваяСтрокаПриход.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписаноПринято)
							И (НоваяСтрокаПриход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются)
							И (НЕ СтатусСписания = Перечисления.ОтражениеВУСН.НеПринимаются) Тогда
						
						КурсВалюты = ПолучитьКурсВалютыИзКэша(НоваяСтрокаПриход.Валюта, КонецГода(РеквизитыКорректировки.ДокументРеализацииДата), КэшКурсовВалют);
						
						СуммаСторноРасходов = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(НоваяСтрокаПриход.Сумма,
													НоваяСтрокаПриход.Валюта, ВалютаРеглУчета,
													КурсВалюты.Курс, 1,
													КурсВалюты.Кратность, 1);
								
						
						СуммаСторноНДС = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(НоваяСтрокаПриход.НДС,
													НоваяСтрокаПриход.Валюта, ВалютаРеглУчета,
													КурсВалюты.Курс, 1,
													КурсВалюты.Кратность, 1);

						Если (НЕ ВыделятьНДСУСНРеализация) И (ВыделятьНДСУСН) Тогда // вернем обратно сумму НДС в расход
							СуммаСторноРасходов = СуммаСторноРасходов + СуммаСторноНДС;
						КонецЕсли;							
													
						НоваяСтрокаКУДиР = ТаблицаКорректировкиКУДиР.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаКУДиР, НоваяСтрокаПриход);
					    НоваяСтрокаКУДиР.Количество = 0;
						НоваяСтрокаКУДиР.Сумма 		= - СуммаСторноРасходов; 
						НоваяСтрокаКУДиР.НДС 		= - СуммаСторноНДС;
						НоваяСтрокаКУДиР.ДатаКорректировки = КонецГода(РеквизитыКорректировки.ДокументРеализацииДата);
					
					ИначеЕсли (ВыделятьНДСУСНРеализация)
						И (НоваяСтрокаПриход.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписано)
						И (НоваяСтрокаПриход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются)
						И (СтатусСписания = Перечисления.ОтражениеВУСН.НеПринимаются) Тогда

						КурсВалюты = ПолучитьКурсВалютыИзКэша(НоваяСтрокаПриход.Валюта, РеквизитыКорректировки.Период, КэшКурсовВалют);
						
						СуммаПризнанияНДС = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(НоваяСтрокаПриход.НДС,
								НоваяСтрокаПриход.Валюта, ВалютаРеглУчета,
								КурсВалюты.Курс, 1,
								КурсВалюты.Кратность, 1);

						НоваяСтрокаКУДиР = ТаблицаКорректировкиКУДиР.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаКУДиР, НоваяСтрокаПриход);
						НоваяСтрокаКУДиР.Сумма = СуммаПризнанияНДС;
						НоваяСтрокаКУДиР.НДС   = 0;
						НоваяСтрокаКУДиР.ВидРасхода = Перечисления.ВидыРасходовУСН.НДС;
						НоваяСтрокаКУДиР.ДатаКорректировки = РеквизитыКорректировки.Период; // признание НДС делаем текущей датой
						НоваяСтрокаКУДиР.ДополнительноеОписание = "При уменьшении количества реализованных ТМЦ признаны расходы на уплату НДС, сторнированные при реализации."
						
					КонецЕсли;

				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;

		Если КоличествоОсталосьСписать > 0 Тогда
			//Оприходовать по документу возврата
		КонецЕсли;

	КонецЦикла;

	//Недостающие поля.
	ТаблицаДвиженийРасходов.ЗаполнитьЗначения(РеквизитыКорректировки.Организация, "Организация");
	ТаблицаДвиженийРасходов.ЗаполнитьЗначения(РеквизитыКорректировки.Период, "Период");
	ТаблицаДвиженийРасходов.ЗаполнитьЗначения(РеквизитыКорректировки.Регистратор, "Регистратор");
	ТаблицаДвиженийРасходов.ЗаполнитьЗначения(Истина, "Активность");
	
	// Соберем таблицы движений
	Если ДвиженияРегистровВх.Свойство("РасходыУСН") Тогда
		Для каждого СтрокаДвижения Из ТаблицаДвиженийРасходов Цикл
			НоваяСтрокаДвижений = ДвиженияРегистровВх.РасходыУСН.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДвижений, СтрокаДвижения);
		КонецЦикла;		
	Иначе
		ДвиженияРегистровВх.Вставить("РасходыУСН", ТаблицаДвиженийРасходов);
	КонецЕсли;  

	Если ДвиженияРегистровВх.Свойство("КУДиР") Тогда		
		ДвиженияКУДиР = ДвиженияРегистровВх.КУДиР;		
		Если ДвиженияКУДиР.Колонки.Найти("ДатаКорректировки") = Неопределено Тогда		
			ДвиженияКУДиР.Колонки.Добавить("ДатаКорректировки", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));		
		КонецЕсли;
		Если ДвиженияКУДиР.Колонки.Найти("ДополнительноеОписание") = Неопределено Тогда
			ДвиженияКУДиР.Колонки.Добавить("ДополнительноеОписание", ОбщегоНазначения.ОписаниеТипаСтрока(200));
		КонецЕсли; 
		Для каждого СтрокаДвижения Из ТаблицаКорректировкиКУДиР Цикл
			НоваяСтрокаДвижений = ДвиженияКУДиР.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДвижений, СтрокаДвижения);
		КонецЦикла;
	Иначе
		ДвиженияРегистровВх.Вставить("КУДиР", ТаблицаКорректировкиКУДиР);
	КонецЕсли;
	
КонецПроцедуры

Процедура РаспределениеРозничнойВыручкиУСН(СтруктураШапкиДокумента, ТаблицаПартий, ДвиженияРегистров, ДвиженияКУДиРПатент, Выручка, КУДиР, СтруктураДопПараметров)

	ДокументСсылка = СтруктураШапкиДокумента.Ссылка;
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	
	ЕстьПатентВДокументе = ОбщегоНазначения.ЕстьРеквизитОбъекта("Патент", МетаданныеДокумента);
	
	Если ЕстьПатентВДокументе Тогда
	
		РеквизитыДокумента = 
		ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Склад, Патент");
		
	Иначе
		
		РеквизитыДокумента = 
		ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Склад");
		
	КонецЕсли;	

	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах Тогда
		
		СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата);
		
		Если СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости Тогда
			
			// При учете в НТТ в ценах продажи документом "Отчет о розничных продажах" отражаются только продажи товаров и услуг комитентов
			// Ранее признанную доходами выручку необходимо отсторнировать в КУДиР
			
			ДвиженияПрочихРасчетов	 = Неопределено;
			ТаблицаОплаченнойВыручки = Неопределено;
			СтруктураДопПараметров.Свойство("ТаблицаРасчетов", ДвиженияПрочихРасчетов);
			СтруктураДопПараметров.Свойство("ТаблицаОплаченнойВыручки", ТаблицаОплаченнойВыручки);
			
			// выделяем безналичную оплату
			Если ДвиженияПрочихРасчетов <> Неопределено И ДвиженияПрочихРасчетов.Количество() > 0 Тогда
				ОтборДвижений = Новый Структура("ВидДвижения", ВидДвиженияНакопления.Расход);
				НеоплаченныеРасчеты = ДвиженияПрочихРасчетов.Скопировать(ОтборДвижений);
				ВыделитьБезналичнуюОплату(СтруктураШапкиДокумента, НеоплаченныеРасчеты, Выручка);
			КонецЕсли;
			
			// Распределяем выручку, приходящуюся на доходы комитента, по оплаченной выручке
			Если Выручка.Комиссия > 0 Тогда
				
				Если ТаблицаОплаченнойВыручки <> Неопределено И ТаблицаОплаченнойВыручки.Количество() > 0 Тогда
					
					ТаблицаОплаченнойВыручки.Свернуть("Патент", "СуммаРуб, СуммаРубЕНВД, СуммаРубКомитент, СуммаРубПатент");
					
					ТаблицаОплаченнойВыручки.Колонки.Добавить("СторноВсего", Новый ОписаниеТипов("Число"));
					ТаблицаОплаченнойВыручки.Колонки.Добавить("СторноЕНВД", Новый ОписаниеТипов("Число"));
					ТаблицаОплаченнойВыручки.Колонки.Добавить("СторноКомиссия", Новый ОписаниеТипов("Число"));
					ТаблицаОплаченнойВыручки.Колонки.Добавить("СторноПатент", Новый ОписаниеТипов("Число"));
					
					ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
						Выручка.Комиссия, ТаблицаОплаченнойВыручки,"СторноВсего", "СуммаРуб");
						
					// распределяем отражение в НУ
					Для каждого СтрокаВыручки Из ТаблицаОплаченнойВыручки Цикл
						КоэффициентРаспределения = ?(СтрокаВыручки.СуммаРуб = 0, 0, СтрокаВыручки.СторноВсего/СтрокаВыручки.СуммаРуб);
						СтрокаВыручки.СторноЕНВД		= СтрокаВыручки.СуммаРубЕНВД * КоэффициентРаспределения;
						СтрокаВыручки.СторноПатент		= СтрокаВыручки.СуммаРубПатент * КоэффициентРаспределения;
					КонецЦикла;
					
					СторноЕНВД	 = Окр(ТаблицаОплаченнойВыручки.Итог("СторноЕНВД"), 2);
					СторноПатент = Окр(ТаблицаОплаченнойВыручки.Итог("СторноПатент"), 2);
					СторноУСН	 = Выручка.Комиссия - СторноЕНВД - СторноПатент;
					
					// Сторно выручки, отраженной ранее в доходах
					Если СторноУСН > 0 Тогда
						КУДиР.Содержание = КУДиР.Содержание + "Оплаченная выручка на сумму "
							+ ОбщегоНазначенияБПВызовСервера.ФорматСумм(СторноУСН, , , " ") + " руб. отнесена к доходам комитента. ";
						КУДиР.Графа5 = КУДиР.Графа5 - СторноУСН;
					КонецЕсли;
					Если СторноЕНВД > 0 Тогда
						КУДиР.Содержание = КУДиР.Содержание + "Оплаченная выручка на сумму "
							+ ОбщегоНазначенияБПВызовСервера.ФорматСумм(СторноЕНВД, , , " ") + " руб. определена как не относящаяся к деятельности ЕНВД. ";
						КУДиР.ДоходЕНВД = КУДиР.ДоходЕНВД - СторноЕНВД;
					КонецЕсли;
					Если СторноПатент > 0 Тогда
						КУДиР.Содержание = КУДиР.Содержание + "Оплаченная выручка на сумму "
							+ ОбщегоНазначенияБПВызовСервера.ФорматСумм(СторноПатент, , , " ")
							+ " руб. определена как не относящаяся к деятельности на патенте. ";
						КУДиР.ДоходЕНВД = КУДиР.ДоходЕНВД - СторноПатент;
					КонецЕсли;
					
					// сторнируем доходы, отраженные по патентам
					Для каждого СтрокаВыручки Из ТаблицаОплаченнойВыручки Цикл
						Если СтрокаВыручки.СторноПатент > 0 И ЗначениеЗаполнено(СтрокаВыручки.Патент) Тогда
							ЗаписьКУДиРПатент = ДвиженияКУДиРПатент.Добавить();
							ЗаписьКУДиРПатент.Патент = СтрокаВыручки.Патент;
							ЗаписьКУДиРПатент.Содержание = СодержаниеКУДиР(СтруктураШапкиДокумента, СтруктураШапкиДокумента.ВидОперацииУСН, МетаданныеДокумента);
							ЗаписьКУДиРПатент.Содержание = ЗаписьКУДиРПатент.Содержание + "Ранее отраженная в доходах выручка отнесена к доходам комитента. ";
							ЗаписьКУДиРПатент.Графа4 = - СтрокаВыручки.СторноПатент;
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе // учет в рознице в ценах покупки
			
			ДвиженияПрочихРасчетов = Неопределено;
			СтруктураДопПараметров.Свойство("ТаблицаРасчетов", ДвиженияПрочихРасчетов);
			
			Если ЗначениеЗаполнено(ДвиженияПрочихРасчетов) И ДвиженияПрочихРасчетов.Количество() > 0 Тогда
				
				ОтборДвижений = Новый Структура("ВидДвижения", ВидДвиженияНакопления.Расход);
				НеоплаченныеРасчеты = ДвиженияПрочихРасчетов.Скопировать(ОтборДвижений);
				
				ВыделитьБезналичнуюОплату(СтруктураШапкиДокумента, НеоплаченныеРасчеты, Выручка);
				
			КонецЕсли;
			
			СчетаДоходовРасходов = 
				БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаВНТТ(
					СтруктураШапкиДокумента.Организация, 
					РеквизитыДокумента.Склад, 
					СтруктураШапкиДокумента.Дата,
					Новый Структура(
									"РозничнаяТорговляОблагаетсяЕНВД", 
									УчетнаяПолитика.РозничнаяТорговляОблагаетсяЕНВД(
										СтруктураШапкиДокумента.Организация, 
										СтруктураШапкиДокумента.Дата)));
										
			ЕНВД = БухгалтерскийУчетВызовСервераПовтИсп.СчетОтноситсяКДеятельностиЕНВД(СчетаДоходовРасходов.СчетДоходовОтРеализации);
			
			Если ЕНВД Тогда
				СуммаНеЕНВД = Выручка.Всего - Выручка.ЕНВД - Выручка.Комиссия - Выручка.Патент;
				Если СуммаНеЕНВД > 0 Тогда
					КУДиР.Содержание = КУДиР.Содержание + "Розничная выручка на сумму "
						+ ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаНеЕНВД, , , " ")
						+ " руб. определена как не подпадающая под ЕНВД. ";
					КУДиР.Графа5	 = КУДиР.Графа5 + СуммаНеЕНВД;
					КУДиР.ДоходЕНВД	 = КУДиР.ДоходЕНВД - СуммаНеЕНВД;
				КонецЕсли;
				Если Выручка.Комиссия > 0 Тогда
					КУДиР.Содержание = КУДиР.Содержание + "Розничная выручка на сумму "
						+ ОбщегоНазначенияБПВызовСервера.ФорматСумм(Выручка.Комиссия, , , " ")
						+ " руб. определена как выручка комитента. ";
					КУДиР.ДоходЕНВД	 = КУДиР.ДоходЕНВД - Выручка.Комиссия;
				КонецЕсли;
			Иначе
				КУДиР.Графа5 = КУДиР.Графа5  - Выручка.ЕНВД - Выручка.Комиссия - Выручка.Патент;
				Если Выручка.Комиссия > 0 Тогда
					КУДиР.Содержание = КУДиР.Содержание + "Розничная выручка на сумму "
						+ ОбщегоНазначенияБПВызовСервера.ФорматСумм(Выручка.Комиссия, , , " ")
						+ " руб. определена как выручка комитента. ";
				КонецЕсли;
				Если Выручка.Патент > 0 Тогда
					КУДиР.Содержание = КУДиР.Содержание + "Розничная выручка на сумму "
						+ ОбщегоНазначенияБПВызовСервера.ФорматСумм(Выручка.Патент, , , " ")
						+ " руб. отнесена к деятельности на патенте. ";
					КУДиР.ДоходЕНВД	 = КУДиР.ДоходЕНВД + Выручка.Патент;
				КонецЕсли;
				Если Выручка.ЕНВД > 0 Тогда
					КУДиР.Содержание = КУДиР.Содержание + "Розничная выручка на сумму "
						+ ОбщегоНазначенияБПВызовСервера.ФорматСумм(Выручка.ЕНВД, , , " ")
						+ " руб. отнесена к деятельности ЕНВД. ";
					КУДиР.ДоходЕНВД	 = КУДиР.ДоходЕНВД + Выручка.ЕНВД;
				КонецЕсли;
			КонецЕсли;
			
			Если Выручка.Патент > 0
				И ЕстьПатентВДокументе
				И ЗначениеЗаполнено(РеквизитыДокумента.Патент) Тогда
				
				ЗаписьКУДиРПатент = ДвиженияКУДиРПатент.Добавить();
				ЗаписьКУДиРПатент.Патент = РеквизитыДокумента.Патент;
				ЗаписьКУДиРПатент.Содержание = СодержаниеКУДиР(СтруктураШапкиДокумента, СтруктураШапкиДокумента.ВидОперацииУСН, МетаданныеДокумента);
				ЗаписьКУДиРПатент.Графа4 = Выручка.Патент;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе // АТТ
		
		ВыделитьБезналичнуюОплату(СтруктураШапкиДокумента, ДвиженияРегистров.ВзаиморасчетыРасход, Выручка);
		
		КУДиР.Графа4 = КУДиР.Графа4  + Выручка.Всего;
		КУДиР.Графа5 = КУДиР.Графа5  + Выручка.Всего - Выручка.ЕНВД - Выручка.Комиссия - Выручка.Патент;
		
		Если Выручка.Комиссия > 0 Тогда
			КУДиР.Содержание = КУДиР.Содержание + "Розничная выручка на сумму "
				+ ОбщегоНазначенияБПВызовСервера.ФорматСумм(Выручка.Комиссия, , , " ") + " руб. определена как выручка комитента. ";
		КонецЕсли;
		Если Выручка.Патент > 0 Тогда
			КУДиР.Содержание = КУДиР.Содержание + "Розничная выручка на сумму "
				+ ОбщегоНазначенияБПВызовСервера.ФорматСумм(Выручка.Патент, , , " ") + " руб. отнесена к деятельности на патенте. ";
			КУДиР.ДоходЕНВД	 = КУДиР.ДоходЕНВД + Выручка.Патент;
		КонецЕсли;
		Если Выручка.ЕНВД > 0 Тогда
			КУДиР.Содержание = КУДиР.Содержание + "Розничная выручка на сумму "
				+ ОбщегоНазначенияБПВызовСервера.ФорматСумм(Выручка.ЕНВД, , , " ") + " руб. отнесена к деятельности ЕНВД. ";
			КУДиР.ДоходЕНВД	 = КУДиР.ДоходЕНВД + Выручка.ЕНВД;
		КонецЕсли;
		
		Если Выручка.Патент > 0
			И ЕстьПатентВДокументе
			И ЗначениеЗаполнено(РеквизитыДокумента.Патент) Тогда
			
			ЗаписьКУДиРПатент = ДвиженияКУДиРПатент.Добавить();
			ЗаписьКУДиРПатент.Патент = РеквизитыДокумента.Патент;
			ЗаписьКУДиРПатент.Содержание = СодержаниеКУДиР(СтруктураШапкиДокумента, СтруктураШапкиДокумента.ВидОперацииУСН, МетаданныеДокумента);
			ЗаписьКУДиРПатент.Графа4 = Выручка.Патент;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

//Изменение стоимости, списание остатков расходов и корректировка КУДиР по данным корректировочного документа
Процедура КорректировкаПоступленияУСН(СтруктураШапкиДокумента, РеквизитыКорректировки, ТаблицаКорректировки, ДвиженияРегистров)

	Перем КэшКурсовВалют;
	
	Если ТаблицаКорректировки = Неопределено ИЛИ ТаблицаКорректировки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВыделятьНДСУСН = (СтруктураШапкиДокумента.ПорядокПризнанияРасходовПоНДС = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику);
	ВыделятьНДСУСНДокумент = (РеквизитыКорректировки.ПорядокПризнанияРасходовПоНДС = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику);
	
	ЭтоКорректировкаПрошлогоПериода = РеквизитыКорректировки.ЭтоКорректировкаПрошлогоПериода; 
	
	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	СтруктураКурсаВалютыРегл = ПолучитьКурсВалютыИзКэша(ВалютаРеглУчета, СтруктураШапкиДокумента.Дата, КэшКурсовВалют);
	Если СтруктураКурсаВалютыРегл.Курс = 0 Тогда			
		СтруктураКурсаВалютыРегл.Курс = 1;
	КонецЕсли;
	Если СтруктураКурсаВалютыРегл.Кратность = 0 Тогда			
		СтруктураКурсаВалютыРегл.Кратность = 1;
	КонецЕсли;
	
	СтруктураКурса = Новый Структура("Курс, Кратность", СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КратностьДокумента);
	
	СтруктураКурсаПредыдущийГод = Новый Структура("Курс, Кратность", 1, 1);
	Если ЭтоКорректировкаПрошлогоПериода И РеквизитыКорректировки.Валюта <> ВалютаРеглУчета Тогда		
		СтруктураКурсаПредыдущийГод = ПолучитьКурсВалютыИзКэша(РеквизитыКорректировки.Валюта, КонецГода(РеквизитыКорректировки.ДокументПоступленияДата), КэшКурсовВалют);
	КонецЕсли; 
	
	// Получим остатки расходов УСН для корректировки
	//Подготовка наборов фильтров
	МассивНоменклатуры = ТаблицаКорректировки.ВыгрузитьКолонку("ЭлементРасхода");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивНоменклатуры);
	
	МассивСчетов = ТаблицаКорректировки.ВыгрузитьКолонку("СчетУчета");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивСчетов);
	
	ВидыРасходов = ТаблицаКорректировки.ВыгрузитьКолонку("ВидРасхода");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(ВидыРасходов);
	
	//Заполним таблицу блокировок
	ТаблицаБлокировок = ТаблицаКорректировки.Скопировать(, "ЭлементРасхода, СчетУчета");
		
	//Формирование таблицы фильтров
	ТаблицаФильтров = Новый ТаблицаЗначений;
	ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
	ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
	ТаблицаФильтров.Колонки.Добавить("Условие");
		
	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "ВидРасхода";
	Фильтр.ЗначениеПоля	= ВидыРасходов;
	Фильтр.Условие			= "В";
	
	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "СчетУчета";
	Фильтр.ЗначениеПоля	= МассивСчетов;
	Фильтр.Условие			= "В";
	
	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "ЭлементРасхода";
	Фильтр.ЗначениеПоля	= МассивНоменклатуры;
	Фильтр.Условие			= "В";
	
	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "РасчетныйДокумент";
	Фильтр.ЗначениеПоля		= РеквизитыКорректировки.ДокументПоступленияСсылка;
	Фильтр.Условие			= "=";
	
	//Из таблицы расходов выбираем соответствующие партии и элементы расходов
	ТаблицаРасходов = ВыполнитьЗапросПоРасходамДляКорректировочныхДокументов(СтруктураШапкиДокумента.Ссылка, СтруктураШапкиДокумента.Организация, ТаблицаФильтров, ТаблицаБлокировок, ЭтоКорректировкаПрошлогоПериода);
	ТаблицаРасходов.Индексы.Добавить("ЭлементРасхода, СчетУчета");
	
	// промежуточные итоги по остаткам расходов по элементу расхода и счету учета
	ОстаткиРасходовСводные = ТаблицаРасходов.Скопировать(, "ЭлементРасхода, СчетУчета, Валюта, РасчетныйДокументДата, ДокументОплатыДата, Количество, КоличествоНачалоГода, Сумма, СуммаНачалоГода, НДС, НДСНачалоГода");
	ОстаткиРасходовСводные.Свернуть("ЭлементРасхода, СчетУчета, Валюта, РасчетныйДокументДата, ДокументОплатыДата", "Количество, КоличествоНачалоГода, Сумма, СуммаНачалоГода, НДС, НДСНачалоГода");
	ОстаткиРасходовСводные.Индексы.Добавить("ЭлементРасхода, СчетУчета");
	
	ТаблицаДляСписания = Новый ТаблицаЗначений;
	Для Каждого Кол Из ТаблицаРасходов.Колонки Цикл
		ТаблицаДляСписания.Колонки.Добавить(Кол.Имя, Кол.ТипЗначения);		
	КонецЦикла;
	
	ТаблицаДляСписания.Колонки.Добавить("СтатусСписания");
	ТаблицаДляСписания.Колонки.Добавить("КоличествоПоСтатусуСписания");
	// для возможного пересчета валютных сумм
	ТаблицаДляСписания.Колонки.Добавить("СтруктураКурса");
	// для возможной корректировки прошлого периода
	ТаблицаДляСписания.Колонки.Добавить("ДатаКорректировки", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	// для дополнительных пояснений в содержание КУДиР
	ТаблицаДляСписания.Колонки.Добавить("ДополнительноеОписание", ОбщегоНазначения.ОписаниеТипаСтрока(200));
	
	ТаблицаПриход = ТаблицаДляСписания.Скопировать();
	
	ТаблицаКорректировкиКУДиР      = ТаблицаДляСписания.Скопировать();	
	ТаблицаКорректировкиКУДиР_ЕНВД = ТаблицаДляСписания.Скопировать();
	
	Для каждого СтрокаКорректировки Из ТаблицаКорректировки Цикл		
		
		КоличествоОсталосьПогасить = - СтрокаКорректировки.Количество;
		СписатьСуммуВал 		   = - (СтрокаКорректировки.Сумма - СтрокаКорректировки.НДС); // из параметров проведения всегда приходят суммы с НДС
		СписатьНДСВал			   = - СтрокаКорректировки.НДС;
		
		СтруктураОтбора = Новый Структура("ЭлементРасхода, СчетУчета", СтрокаКорректировки.ЭлементРасхода, СтрокаКорректировки.СчетУчета);		
		
		// получим сводные остатки
		КоличествоОстатокТекущий 	= 0;
		КоличествоОстатокНачалоГода = 0;
		СуммаВалОстатокТекущий			= 0;
		СуммаВалОстатокНачалоГода		= 0;
		
		СтрокиОстатков = ОстаткиРасходовСводные.НайтиСтроки(СтруктураОтбора);
		Для каждого СтрокаОстатка Из СтрокиОстатков Цикл
			
			КоличествоОстатокТекущий	= КоличествоОстатокТекущий + СтрокаОстатка.Количество;
			КоличествоОстатокНачалоГода = КоличествоОстатокНачалоГода + СтрокаОстатка.КоличествоНачалоГода;
			
			Если СтрокаКорректировки.ВидРасхода = Перечисления.ВидыРасходовУСН.Услуги Тогда // суммовые остатки получаем только для услуг
				
				ДатаОстатка = СтрокаОстатка.РасчетныйДокументДата;
				Если ЗначениеЗаполнено(СтрокаОстатка.ДокументОплатыДата) Тогда
					ДатаОстатка = СтрокаОстатка.ДокументОплатыДата;									
				КонецЕсли;
				
				ВыделятьНДСУСНОстаток  = (УчетнаяПолитика.ПорядокПризнанияРасходовПоНДС(РеквизитыКорректировки.Организация, ДатаОстатка) = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику);
				
				Если СтрокаОстатка.Валюта = РеквизитыКорректировки.Валюта Тогда				
					СуммаВалОстатокТекущий			= СуммаВалОстатокТекущий + СтрокаОстатка.Сумма - ?(ВыделятьНДСУСНОстаток, 0, СтрокаОстатка.НДС);
					СуммаВалОстатокНачалоГода		= СуммаВалОстатокНачалоГода + СтрокаОстатка.СуммаНачалоГода - ?(ВыделятьНДСУСНОстаток, 0, СтрокаОстатка.НДСНачалоГода);
				Иначе
					// приводим к валюте корректировки
					СтруктураКурсаОстатка = ?(СтрокаОстатка.Валюта = ВалютаРеглУчета,
											СтруктураКурсаВалютыРегл,
											ПолучитьКурсВалютыИзКэша(СтрокаОстатка.Валюта, ДатаОстатка, КэшКурсовВалют));
					СтруктураКурсаДокумента = ?(РеквизитыКорректировки.Валюта = ВалютаРеглУчета,
											СтруктураКурсаВалютыРегл,
											ПолучитьКурсВалютыИзКэша(РеквизитыКорректировки.Валюта, ДатаОстатка, КэшКурсовВалют));
					СуммаОстатка = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаОстатка.Сумма,
																		СтрокаОстатка.Валюта, РеквизитыКорректировки.Валюта,
																		СтруктураКурсаОстатка.Курс, СтруктураКурсаДокумента.Курс,
																		СтруктураКурсаОстатка.Кратность, СтруктураКурсаДокумента.Кратность);
					СуммаОстаткаНачалоГода = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаОстатка.СуммаНачалоГода,
																		СтрокаОстатка.Валюта, РеквизитыКорректировки.Валюта,
																		СтруктураКурсаОстатка.Курс, СтруктураКурсаДокумента.Курс,
																		СтруктураКурсаОстатка.Кратность, СтруктураКурсаДокумента.Кратность);													
					НДСОстатка	 = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаОстатка.НДС,
																		СтрокаОстатка.Валюта, РеквизитыКорректировки.Валюта,
																		СтруктураКурсаОстатка.Курс, СтруктураКурсаДокумента.Курс,
																		СтруктураКурсаОстатка.Кратность, СтруктураКурсаДокумента.Кратность);
					НДСОстаткаНачалоГода	 = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаОстатка.НДСНачалоГода,
																		СтрокаОстатка.Валюта, РеквизитыКорректировки.Валюта,
																		СтруктураКурсаОстатка.Курс, СтруктураКурсаДокумента.Курс,
																		СтруктураКурсаОстатка.Кратность, СтруктураКурсаДокумента.Кратность);													
					СуммаВалОстатокТекущий			= СуммаВалОстатокТекущий + СуммаОстатка - ?(ВыделятьНДСУСНОстаток, 0, НДСОстатка);
					СуммаВалОстатокНачалоГода		= СуммаВалОстатокНачалоГода + СуммаОстаткаНачалоГода - ?(ВыделятьНДСУСНОстаток, 0, НДСОстаткаНачалоГода);
											
				КонецЕсли;
				
			КонецЕсли;  
		КонецЦикла; 
		
		// корректируем текущие остатки расходов
		СтрокиРасходов = ТаблицаРасходов.НайтиСтроки(СтруктураОтбора);
		
		// списываем остатки расходов по количеству, если они есть
		Если КоличествоОсталосьПогасить > 0 Тогда
			Для каждого СтрокаРасхода Из СтрокиРасходов Цикл			
				Если СтрокаРасхода.Количество <= 0 Тогда
					Продолжить;
				КонецЕсли;
				Если КоличествоОсталосьПогасить <= 0 Тогда
					Прервать;
				КонецЕсли;
				
				СписатьКоличество = Мин(КоличествоОсталосьПогасить, СтрокаРасхода.Количество);
				
				НоваяСтрока = ТаблицаДляСписания.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасхода);
				
				Если СтрокаРасхода.Количество > СписатьКоличество Тогда
					К = СписатьКоличество / СтрокаРасхода.Количество;
					НоваяСтрока.Количество 	= СписатьКоличество;
					НоваяСтрока.Сумма	 	= Окр(К*НоваяСтрока.Сумма, 2);
					НоваяСтрока.НДС 		= Окр(К*НоваяСтрока.НДС, 2);
				КонецЕсли;
				
				// все расходы из остатков списываем как непринимаемые - движений КУДиР для данной операции возникать не должно
				НоваяСтрока.КоличествоПоСтатусуСписания = НоваяСтрока.Количество;
				НоваяСтрока.СтатусСписания				= Перечисления.ОтражениеВУСН.НеПринимаются;
				
				// Учтем списание текущих остатков расходов в остатках количества и сумм к корректировке
				КоличествоОсталосьПогасить  = КоличествоОсталосьПогасить  - НоваяСтрока.Количество;
				
				ДатаРасхода = СтрокаРасхода.РасчетныйДокументДата;
				Если ЗначениеЗаполнено(СтрокаРасхода.РеквизитыДокументаОплаты) Тогда
					ДатаРасхода = СтрокаРасхода.РеквизитыДокументаОплаты.Дата;									
				КонецЕсли;
			
				ВыделятьНДСУСНРасход  = (УчетнаяПолитика.ПорядокПризнанияРасходовПоНДС(РеквизитыКорректировки.Организация, ДатаРасхода) = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику); 
				
				Если НоваяСтрока.Валюта = РеквизитыКорректировки.Валюта Тогда
					
					СписатьСуммуВал = СписатьСуммуВал - НоваяСтрока.Сумма + ?(ВыделятьНДСУСНРасход, 0, НоваяСтрока.НДС);
					СписатьНДСВал	= СписатьНДСВал   - НоваяСтрока.НДС;
					
				Иначе	
					
					СтруктураКурсаРасхода = ?(НоваяСтрока.Валюта = ВалютаРеглУчета,
									   СтруктураКурсаВалютыРегл,
									   ПолучитьКурсВалютыИзКэша(НоваяСтрока.Валюта, ДатаРасхода, КэшКурсовВалют));
					СтруктураКурсаДокумента = ?(РеквизитыКорректировки.Валюта = ВалютаРеглУчета,
									   СтруктураКурсаВалютыРегл,
									   ПолучитьКурсВалютыИзКэша(РеквизитыКорректировки.Валюта, ДатаРасхода, КэшКурсовВалют));				   
					
					НоваяСтрока.СтруктураКурса = ?(НоваяСтрока.Валюта = ВалютаРеглУчета, Неопределено, СтруктураКурсаРасхода);
					
					УчтеннаяСуммаВал = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(НоваяСтрока.Сумма, 
																НоваяСтрока.Валюта, РеквизитыКорректировки.Валюта,
																СтруктураКурсаРасхода.Курс, СтруктураКурсаДокумента.Курс,
																СтруктураКурсаРасхода.Кратность, СтруктураКурсаДокумента.Кратность);
					УчтенныйНДСВал	= РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(НоваяСтрока.НДС, 
																НоваяСтрока.Валюта, РеквизитыКорректировки.Валюта,
																СтруктураКурсаРасхода.Курс, СтруктураКурсаДокумента.Курс,
																СтруктураКурсаРасхода.Кратность, СтруктураКурсаДокумента.Кратность);
					
					СписатьСуммуВал = СписатьСуммуВал - УчтеннаяСуммаВал + ?(ВыделятьНДСУСНРасход, 0, УчтенныйНДСВал);
					СписатьНДСВал	= СписатьНДСВал   - УчтенныйНДСВал;
					
				КонецЕсли;  
				
				// также учтем списание в таблице остатков расходов
				СтрокаРасхода.Количество = СтрокаРасхода.Количество - НоваяСтрока.Количество;
				СтрокаРасхода.Сумма		 = СтрокаРасхода.Сумма		- НоваяСтрока.Сумма;
				СтрокаРасхода.НДС		 = СтрокаРасхода.НДС		- НоваяСтрока.НДС;
				
			КонецЦикла;
		КонецЕсли;  
		
		// если осталась сумма к изменению - распределяем по остаткам непризнанных, и по признанным расходам за период с даты поступления по дату корректировки
		Если СписатьСуммуВал <> 0 ИЛИ СписатьНДСВал <> 0 Тогда
			
			ЗнакСписания = 1;  // по умолчанию - списание
			Если СписатьСуммуВал < 0 Тогда  // это увеличение суммы, потребуется "переворачивать"				
				ЗнакСписания = -1;
			ИначеЕсли СписатьСуммуВал = 0 Тогда
				ЗнакСписания = ?(СписатьНДСВал > 0, 1, - 1);
			КонецЕсли; 
			
			КоличествоПоПоступлению = СтрокаКорректировки.КоличествоПоПоступлению;
			КоличествоПослеКорректировки = КоличествоПоПоступлению + СтрокаКорректировки.Количество;
			СуммаПоПоступлению = СтрокаКорректировки.СуммаПоПоступлению - СтрокаКорректировки.НДСПоПоступлению; // из параметров проведения всегда приходят суммы с НДС
			
			// По остаткам несписанных расходов
			Для каждого СтрокаРасхода Из СтрокиРасходов Цикл				
				
				Если СтрокаКорректировки.ВидРасхода = Перечисления.ВидыРасходовУСН.Номенклатура Тогда
					Если СтрокаРасхода.Количество <= 0 Тогда									
						Продолжить;
					КонецЕсли;
				Иначе
					Если СтрокаРасхода.Сумма <= 0 Тогда						
						Продолжить;
					КонецЕсли; 
				КонецЕсли;   
				
				НоваяСтрока = ?(ЗнакСписания = 1, ТаблицаДляСписания.Добавить(), ТаблицаПриход.Добавить());
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасхода);
				
				НоваяСтрока.Количество = 0;
				// все расходы из остатков списываем как непринимаемые - движений КУДиР для данной операции возникать не должно
				НоваяСтрока.КоличествоПоСтатусуСписания = 0;
				НоваяСтрока.СтатусСписания = Перечисления.ОтражениеВУСН.НеПринимаются;				
				
				ДатаРасхода = СтрокаРасхода.РасчетныйДокументДата;
				Если ЗначениеЗаполнено(СтрокаРасхода.РеквизитыДокументаОплаты) Тогда
					ДатаРасхода = СтрокаРасхода.РеквизитыДокументаОплаты.Дата;									
				КонецЕсли;
				
				ВыделятьНДСУСНРасход  = (УчетнаяПолитика.ПорядокПризнанияРасходовПоНДС(РеквизитыКорректировки.Организация, ДатаРасхода) = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику);
				
				СтруктураКурсаРасхода = ?(СтрокаРасхода.Валюта = ВалютаРеглУчета,
									   СтруктураКурсаВалютыРегл,
									   ПолучитьКурсВалютыИзКэша(СтрокаРасхода.Валюта, ДатаРасхода, КэшКурсовВалют));
				СтруктураКурсаДокумента = ?(РеквизитыКорректировки.Валюта = ВалютаРеглУчета,
									   СтруктураКурсаВалютыРегл,
									   ПолучитьКурсВалютыИзКэша(РеквизитыКорректировки.Валюта, ДатаРасхода, КэшКурсовВалют));
									   
				Если СтрокаКорректировки.ВидРасхода = Перечисления.ВидыРасходовУСН.Номенклатура Тогда				
					К = СтрокаРасхода.Количество / КоличествоПослеКорректировки;
				Иначе
					Если СтрокаРасхода.Валюта <> РеквизитыКорректировки.Валюта Тогда						
						СуммаРасходаВал = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаРасхода.Сумма - ?(ВыделятьНДСУСНРасход, 0, СтрокаРасхода.НДС),
															НоваяСтрока.Валюта, РеквизитыКорректировки.Валюта,
															СтруктураКурсаРасхода.Курс, СтруктураКурсаДокумента.Курс,
															СтруктураКурсаРасхода.Кратность, СтруктураКурсаДокумента.Кратность);
						К = СуммаРасходаВал / СуммаПоПоступлению;
					Иначе
						К = (СтрокаРасхода.Сумма - ?(ВыделятьНДСУСНРасход, 0, СтрокаРасхода.НДС)) / СуммаПоПоступлению;
					КонецЕсли; 
				КонецЕсли;					   
									   
				СуммаКорректировкиВал = СписатьСуммуВал * К * ЗнакСписания;
				СуммаКорректировкиНДСВал = СписатьНДСВал * К * ЗнакСписания;
				Если НЕ ВыделятьНДСУСНРасход Тогда				
					СуммаКорректировкиВал = СуммаКорректировкиВал + СуммаКорректировкиНДСВал;				
				КонецЕсли; 
				
				Если НоваяСтрока.Валюта <> РеквизитыКорректировки.Валюта Тогда
					
					НоваяСтрока.СтруктураКурса = ?(НоваяСтрока.Валюта = ВалютаРеглУчета, Неопределено, СтруктураКурсаРасхода);
					
					НоваяСтрока.Сумма = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаКорректировкиВал,
															РеквизитыКорректировки.Валюта, НоваяСтрока.Валюта,
															СтруктураКурсаДокумента.Курс, СтруктураКурсаРасхода.Курс,
															СтруктураКурсаДокумента.Кратность, СтруктураКурсаРасхода.Кратность);
					НоваяСтрока.НДС   = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаКорректировкиНДСВал,
															РеквизитыКорректировки.Валюта, НоваяСтрока.Валюта,
															СтруктураКурсаДокумента.Курс, СтруктураКурсаРасхода.Курс,
															СтруктураКурсаДокумента.Кратность, СтруктураКурсаРасхода.Кратность);
				Иначе
					НоваяСтрока.Сумма = СуммаКорректировкиВал;
					НоваяСтрока.НДС   = СуммаКорректировкиНДСВал;
				КонецЕсли; 
				
			КонецЦикла; 
			
			// По признанным расходам
			Если СтрокаКорректировки.ОтражениеВУСН <> Перечисления.ОтражениеВУСН.НеПринимаются Тогда
				
				//     При корректном ведении учета, если строка полностью удаляется из исходного документа поступления (КоличествоПослеКорректировки = 0),
				//     ожидается, что по этой строке расходы не были признаны вообще, и в ветку корректировки КУДиР алгоритм не зайдет - все коэффициенты нулевые.
				//     Однако, возможна ситуация, когда списывается количество большее, чем имеется в остатках расходов УСН (КоличествоОсталосьПогасить > 0)
				//     Это значит, что в результате корректировки возникают отрицательные остатки. При корректном ведении учета такая ситуация маловероятна.
				//     Тем не менее, при корректировке поступления на количество, превышающее остатки в расходах УСН, используем общую методику:
				//     считаем все расходы, которых нет в остатках, признанными в УСН, и сторнируем их.
				
				Если СтрокаКорректировки.ВидРасхода = Перечисления.ВидыРасходовУСН.Номенклатура Тогда					
					// если были приняты расходы (остаток по количеству в РасходыПриУСН меньше, чем количество по исходному документу) - 
					// производим записи в КУДиР на дату корректировки
					Если (КоличествоПослеКорректировки + КоличествоОсталосьПогасить) <> 0 Тогда				
						К1 = (КоличествоПоПоступлению - КоличествоОстатокТекущий) / (КоличествоПослеКорректировки+КоличествоОсталосьПогасить); // коэффициент текущего года					
					Иначе
						К1 = 0;
					КонецЕсли;
					К2 = 0; // коэффициент прошлого года
				Иначе
					К1 = ?(СуммаПоПоступлению = 0, 0, (СуммаПоПоступлению - СуммаВалОстатокТекущий) / СуммаПоПоступлению);
					К2 = 0;
				КонецЕсли;
				
				Если ЭтоКорректировкаПрошлогоПериода И (СписатьСуммуВал > 0 ИЛИ (СписатьСуммуВал = 0 И СписатьНДСВал > 0)) Тогда
					// корректировка прошлого года, уменьшение суммы - требуется отражение корректировки признанных в прошлом году расходов
					// последней датой корректируемого года
					Если СтрокаКорректировки.ВидРасхода = Перечисления.ВидыРасходовУСН.Номенклатура Тогда
						Если (КоличествоПослеКорректировки + КоличествоОсталосьПогасить) <> 0 Тогда						
							К1 = (КоличествоОстатокНачалоГода - КоличествоОстатокТекущий) / (КоличествоПослеКорректировки + КоличествоОсталосьПогасить);
							К2 = (КоличествоПоПоступлению - КоличествоОстатокНачалоГода) / (КоличествоПослеКорректировки + КоличествоОсталосьПогасить);
						Иначе
							К1 = 0;
							К2 = 0;
						КонецЕсли; 
					Иначе
						К1 = ?(СуммаПоПоступлению = 0, 0, (СуммаВалОстатокНачалоГода - СуммаВалОстатокТекущий) / СуммаПоПоступлению);
						К2 = ?(СуммаПоПоступлению = 0, 0, (СуммаПоПоступлению - СуммаВалОстатокНачалоГода) / СуммаПоПоступлению);
					КонецЕсли; 					
				КонецЕсли; 
				
				ЭтоРасходЕНВД = (СтрокаКорректировки.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Распределяются);
				
				// расходы текущего года
				Если К1 > 0 Тогда				
					
					НоваяСтрока = ?(ЭтоРасходЕНВД, ТаблицаКорректировкиКУДиР_ЕНВД.Добавить(), ТаблицаКорректировкиКУДиР.Добавить());
					НоваяСтрока.ВидРасхода = СтрокаКорректировки.ВидРасхода;
					НоваяСтрока.ЭлементРасхода = СтрокаКорректировки.ЭлементРасхода;
					НоваяСтрока.СчетУчета = СтрокаКорректировки.СчетУчета;
					НоваяСтрока.СтатусыПартийУСН = Перечисления.СтатусыПартийУСН.Купленные;
					НоваяСтрока.Валюта = РеквизитыКорректировки.Валюта;
					НоваяСтрока.ДоговорКонтрагента = РеквизитыКорректировки.ДоговорКонтрагента;
					НоваяСтрока.Количество = 0;
					НоваяСтрока.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
					НоваяСтрока.Партия = РеквизитыКорректировки.ДокументПоступленияСсылка;
					НоваяСтрока.РасчетныйДокумент = РеквизитыКорректировки.ДокументПоступленияСсылка;
					НоваяСтрока.СтатусСписания = Перечисления.ОтражениеВУСН.Принимаются;
					НоваяСтрока.ДатаКорректировки = РеквизитыКорректировки.Период;
					
					НоваяСтрока.Сумма = - Окр(К1 * СписатьСуммуВал, 2);
					НоваяСтрока.НДС   = - Окр(К1 * СписатьНДСВал, 2);  
					
					// если расходы в валюте - пересчитаем в рубли
					Если НоваяСтрока.Валюта <> ВалютаРеглУчета Тогда						
						Курс = СтруктураКурса.Курс;
						Кратность = ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
						НоваяСтрока.Сумма 		= НоваяСтрока.Сумма*Курс/Кратность;
						НоваяСтрока.НДС			= НоваяСтрока.НДС*Курс/Кратность;
						Если Курс <> 1 Тогда
							НоваяСтрока.Валюта = ВалютаРеглУчета;
						КонецЕсли;
					КонецЕсли; 
					
					// если входящий НДС "по оплате" - его необходимо выделить отдельно
					Если ВыделятьНДСУСН Тогда					
						НоваяСтрокаНДС = ?(ЭтоРасходЕНВД, ТаблицаКорректировкиКУДиР_ЕНВД.Добавить(), ТаблицаКорректировкиКУДиР.Добавить());
						ЗаполнитьЗначенияСвойств(НоваяСтрокаНДС, НоваяСтрока);
						НоваяСтрокаНДС.ВидРасхода = Перечисления.ВидыРасходовУСН.НДС;
						НоваяСтрокаНДС.Сумма = НоваяСтрока.НДС;
						НоваяСтрокаНДС.НДС = 0;
						//НоваяСтрока.НДС = 0;						
					Иначе
						НоваяСтрока.Сумма = НоваяСтрока.Сумма + НоваяСтрока.НДС;
					КонецЕсли; 
					
				КонецЕсли; 
				
				// расходы прошлого периода
				Если К2 > 0 Тогда				
					
					НоваяСтрока = ?(ЭтоРасходЕНВД, ТаблицаКорректировкиКУДиР_ЕНВД.Добавить(), ТаблицаКорректировкиКУДиР.Добавить());
					НоваяСтрока.ВидРасхода = СтрокаКорректировки.ВидРасхода;
					НоваяСтрока.ЭлементРасхода = СтрокаКорректировки.ЭлементРасхода;
					НоваяСтрока.СчетУчета = СтрокаКорректировки.СчетУчета;
					НоваяСтрока.СтатусыПартийУСН = Перечисления.СтатусыПартийУСН.Купленные;
					НоваяСтрока.Валюта = РеквизитыКорректировки.Валюта;
					НоваяСтрока.ДоговорКонтрагента = РеквизитыКорректировки.ДоговорКонтрагента;
					НоваяСтрока.Количество = 0;
					НоваяСтрока.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
					НоваяСтрока.Партия = РеквизитыКорректировки.ДокументПоступленияСсылка;
					НоваяСтрока.РасчетныйДокумент = РеквизитыКорректировки.ДокументПоступленияСсылка;
					НоваяСтрока.СтатусСписания = Перечисления.ОтражениеВУСН.Принимаются;
					НоваяСтрока.ДатаКорректировки = КонецГода(РеквизитыКорректировки.ДокументПоступленияДата);
					
					НоваяСтрока.Сумма = - Окр(К2 * СписатьСуммуВал, 2);
					НоваяСтрока.НДС   = - Окр(К2 * СписатьНДСВал, 2);
					
					// если расходы в валюте - пересчитаем в рубли
					Если НоваяСтрока.Валюта <> ВалютаРеглУчета Тогда						
						Курс = СтруктураКурсаПредыдущийГод.Курс;
						Кратность = ?(СтруктураКурсаПредыдущийГод.Кратность = 0, 1, СтруктураКурсаПредыдущийГод.Кратность);
						НоваяСтрока.Сумма 		= НоваяСтрока.Сумма*Курс/Кратность;
						НоваяСтрока.НДС			= НоваяСтрока.НДС*Курс/Кратность;
						Если Курс <> 1 Тогда
							НоваяСтрока.Валюта = ВалютаРеглУчета;
						КонецЕсли;
					КонецЕсли;
					
					// если входящий НДС по оплате - его необходимо выделить отдельно
					Если ВыделятьНДСУСНДокумент Тогда					
						НоваяСтрокаНДС = ?(ЭтоРасходЕНВД, ТаблицаКорректировкиКУДиР_ЕНВД.Добавить(), ТаблицаКорректировкиКУДиР.Добавить());
						ЗаполнитьЗначенияСвойств(НоваяСтрокаНДС, НоваяСтрока);
						НоваяСтрокаНДС.ВидРасхода = Перечисления.ВидыРасходовУСН.НДС;
						НоваяСтрокаНДС.Сумма = НоваяСтрока.НДС;
						НоваяСтрокаНДС.НДС = 0;
						//НоваяСтрока.НДС = 0;
					Иначе
						НоваяСтрока.Сумма = НоваяСтрока.Сумма + НоваяСтрока.НДС;
					КонецЕсли;
					
				КонецЕсли; 
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла; 
	
	//Разложим таблицу списываемых расходов на движения корректировки статуса и принятые расходы
	ТаблицыДвижений = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаДляСписания, , "КорректировкаПоступления", Ложь);
	// добавим движения прихода - увеличения сумм
	ТаблицыДвижений.ТаблицаПриход.Очистить();
	ТаблицыДвижений.ТаблицаПриход = ТаблицаПриход;
	
	// Если корректируется прошлый период, и есть сторно принятых расходов - требуется отражать в НУ последним днем корректируемого года
	Если ЭтоКорректировкаПрошлогоПериода Тогда		
		Для каждого СтрокаПринятых Из ТаблицыДвижений.ТаблицаПринятых Цикл			
			Если СтрокаПринятых.Сумма < 0 И ЗначениеЗаполнено(СтрокаПринятых.РеквизитыДокументаОплаты) Тогда
				Если СтрокаПринятых.ДокументОплатыДата <= КонецГода(РеквизитыКорректировки.ДокументПоступленияДата) Тогда				
					СтрокаПринятых.ДатаКорректировки = КонецГода(РеквизитыКорректировки.ДокументПоступленияДата);				
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
	Если ТаблицаКорректировкиКУДиР_ЕНВД.Количество() > 0 Тогда		
		КорректировкаКУДиР_РаспределениеЕНВД(СтруктураШапкиДокумента, РеквизитыКорректировки, ТаблицаКорректировкиКУДиР_ЕНВД);
	КонецЕсли; 
	
	// корректировка принятых в полной сумме
	Для каждого СтрокаКорректировкиКУДиР Из ТаблицаКорректировкиКУДиР Цикл	
		НоваяСтрока = ТаблицыДвижений.ТаблицаПринятых.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКорректировкиКУДиР);	
	КонецЦикла; 
	
	// корректировка принятых распределяемых
	Для каждого СтрокаКорректировкиКУДиР Из ТаблицаКорректировкиКУДиР_ЕНВД Цикл
		НоваяСтрока = ТаблицыДвижений.ТаблицаПринятых.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКорректировкиКУДиР);
	КонецЦикла; 
	
	Если ТипЗнч(ДвиженияРегистров) = Тип("Структура") Тогда		
		Если ДвиженияРегистров.Свойство("КУДиР") Тогда
			Если ТипЗнч(ДвиженияРегистров.КУДиР) = Тип("ТаблицаЗначений") Тогда			
				ДвиженияРегистров.КУДиР.Колонки.Добавить("ДатаКорректировки", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
				ДвиженияРегистров.КУДиР.Колонки.Добавить("ДополнительноеОписание", ОбщегоНазначения.ОписаниеТипаСтрока(200));
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;  
	
	ДвиженияРегистров = СобратьТаблицыДвижений(ТаблицыДвижений,,,ДвиженияРегистров);
	
КонецПроцедуры

Процедура КорректировкаКУДиР_РаспределениеЕНВД(СтруктураШапкиДокумента, ПараметрыКорректировки, ТаблицаПринятых)

	ЭтоКорректировкаПрошлогоПериода = ПараметрыКорректировки.ЭтоКорректировкаПрошлогоПериода;
	
	// методы распределения расходов
	РасходыПоквартальноТек = (УчетнаяПолитика.МетодРаспределенияРасходовУСНПоВидамДеятельности(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата)
	                                     = Перечисления.МетодыРаспределенияРасходовУСНПоВидамДеятельности.ЗаКвартал)
								И НачалоКвартала(СтруктураШапкиДокумента.Дата) > НачалоГода(СтруктураШапкиДокумента.Дата) ;
	Если ЭтоКорректировкаПрошлогоПериода Тогда
		РасходыПоквартальноПрошлыйГод = (УчетнаяПолитика.МетодРаспределенияРасходовУСНПоВидамДеятельности(ПараметрыКорректировки.Организация, ПараметрыКорректировки.ДокументПоступленияДата)
		                                  = Перечисления.МетодыРаспределенияРасходовУСНПоВидамДеятельности.ЗаКвартал);
	КонецЕсли;
	
	ДатыКорректировки = ТаблицаПринятых.ВыгрузитьКолонку("ДатаКорректировки");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(ДатыКорректировки);
	
	// Корректировка может быть либо датой корректировки, либо концом корректируемого года
	// разложим таблицу корректировки КУДиР на текущую и "прошлогоднюю"
	СтруктураОтбора = Новый Структура("ДатаКорректировки", СтруктураШапкиДокумента.Дата);
	ТаблицаПринятыхТекПериод = ТаблицаПринятых.Скопировать(СтруктураОтбора);
	Если ЭтоКорректировкаПрошлогоПериода Тогда		
		СтруктураОтбора = Новый Структура("ДатаКорректировки", КонецГода(ПараметрыКорректировки.ДокументПоступленияДата));
		ТаблицаПринятыхПрошлыйПериод = ТаблицаПринятых.Скопировать(СтруктураОтбора);
	КонецЕсли;  
	
	// 1. Получим коэффициенты распределения расходов УСН и ЕНВД за корректируемые периоды
	
	КоэффициентТекущийПериод = 0;
	КоэффициентПрошлыйГод = 0;
	ТабКоэффициентыПоквартально = Новый ТаблицаЗначений;
	ТабКоэффициентыПоквартально.Колонки.Добавить("Период", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТабКоэффициентыПоквартально.Колонки.Добавить("Коэффициент");
	
	//НачДатаПоквартально = Неопределено;
	//КонДатаПоквартально = Неопределено;
	
	//    текущий период
	Если ТаблицаПринятыхТекПериод.Количество() > 0 Тогда		
		
		Если НачалоКвартала(СтруктураШапкиДокумента.Дата) > НачалоГода(СтруктураШапкиДокумента.Дата) Тогда // если корректировка в 1 квартале - расходы еще не приняты, распределять нечего
			
			БазаРаспределенияРасходовУСН = УчетнаяПолитика.БазаРаспределенияРасходовУСНПоВидамДеятельности(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата);
			База = ?(БазаРаспределенияРасходовУСН = Перечисления.БазаРаспределенияРасходовУСНПоВидамДеятельности.ДоходыВсегоНУ, "НВ",
					?(БазаРаспределенияРасходовУСН = Перечисления.БазаРаспределенияРасходовУСНПоВидамДеятельности.ДоходыПринимаемыеНУ, "НУ", "БУ"));
			
			Если РасходыПоквартальноТек Тогда // получим границы, внутри которых требуется рассчитать коэффициенты
				
				НачДатаПоквартально = НачалоГода(СтруктураШапкиДокумента.Дата);
				КонДатаПоквартально = КонецКвартала(ДобавитьМесяц(СтруктураШапкиДокумента.Дата, -3));
				
				КоэффициентыЕНВД = ПолучитьКоэффицентыРаспределенияЕНВДПоКварталам(СтруктураШапкиДокумента, НачДатаПоквартально, КонДатаПоквартально, База);
				
				ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(КоэффициентыЕНВД, ТабКоэффициентыПоквартально);
				
			Иначе // получим коэффициент распределения за год
				
				ПараметрыДляЕНВД = Новый Структура("Организация, Дата", СтруктураШапкиДокумента.Организация, КонецКвартала(ДобавитьМесяц(СтруктураШапкиДокумента.Дата, -3)));				
				КоэффициентТекущийПериод = ПолучитьКоэффРаспределенияЕНВД(ПараметрыДляЕНВД, "Год", База);
				
			КонецЕсли;
			
		КонецЕсли; 
	КонецЕсли;
	
	// 	 прошлый период
	Если ЭтоКорректировкаПрошлогоПериода И ТаблицаПринятыхПрошлыйПериод.Количество() > 0 Тогда		
		
		БазаРаспределенияРасходовУСН = УчетнаяПолитика.БазаРаспределенияРасходовУСНПоВидамДеятельности(ПараметрыКорректировки.Организация, ПараметрыКорректировки.ДокументПоступленияДата);
		База = ?(БазаРаспределенияРасходовУСН = Перечисления.БазаРаспределенияРасходовУСНПоВидамДеятельности.ДоходыВсегоНУ, "НВ",
				?(БазаРаспределенияРасходовУСН = Перечисления.БазаРаспределенияРасходовУСНПоВидамДеятельности.ДоходыПринимаемыеНУ, "НУ", "БУ"));
		
		Если РасходыПоквартальноПрошлыйГод Тогда // получим границы, внутри которых требуется рассчитать коэффициенты			
			
			НачДатаПоквартально = НачалоКвартала(ПараметрыКорректировки.ДокументПоступленияДата);
			КонДатаПоквартально = КонецГода(ПараметрыКорректировки.ДокументПоступленияДата);
			
			КоэффициентыЕНВД = ПолучитьКоэффицентыРаспределенияЕНВДПоКварталам(ПараметрыКорректировки, НачДатаПоквартально, КонДатаПоквартально, База);
			
			ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(КоэффициентыЕНВД, ТабКоэффициентыПоквартально);			
			
		Иначе // получим коэффициент распределения за год			
			
			ПараметрыДляЕНВД = Новый Структура("Организация, Дата", ПараметрыКорректировки.Организация, КонецГода(ПараметрыКорректировки.ДокументПоступленияДата));
			КоэффициентПрошлыйГод = ПолучитьКоэффРаспределенияЕНВД(ПараметрыДляЕНВД, "Год", База);
			
		КонецЕсли;
		
	КонецЕсли;	
	
	
	// 2. Получим обороты по ежеквартальному списанию распределенных расходов УСН и ЕНВД за корректируемые периоды, если распределение было поквартальным
	
	РезультатЗапросаРасходыПоквартально = Неопределено;
	НомераТаблиц = Новый Структура;
	Запрос = Новый Запрос;
	ТекстЗапроса = "";
	
	Если ЭтоКорректировкаПрошлогоПериода И РасходыПоквартальноПрошлыйГод И ТаблицаПринятыхПрошлыйПериод.Количество() > 0 Тогда
	
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РасходыПриУСНОбороты.ЭлементРасхода,
		|	РасходыПриУСНОбороты.ВидРасхода,
		|	РасходыПриУСНОбороты.СчетУчета,
		|	РасходыПриУСНОбороты.Валюта,
		|	РасходыПриУСНОбороты.ОтражениеВУСН,
		|	РасходыПриУСНОбороты.СуммаРасход КАК Сумма,
		|	РасходыПриУСНОбороты.НДСРасход КАК НДС,
		|	НАЧАЛОПЕРИОДА(РасходыПриУСНОбороты.Период, КВАРТАЛ) КАК Период
		|ИЗ
		|	РегистрНакопления.РасходыПриУСН.Обороты(
		|			&НачалоПериодаПрошл,
		|			&КонецПериодаПрошл,
		|			Квартал,
		|			Организация = &Организация
		|				И ОтражениеВУСН = Значение(Перечисление.ОтражениеВУСН.Распределяются)
		|				И РасчетныйДокумент = &РасчетныйДокумент
		|				И СтатусыОплатыРасходовУСН = Значение(Перечисление.СтатусыРасходовУСН.НеРаспределено)
		|				И СчетУчета В (&СчетаУчетаПрошл)
		|				И ВидРасхода В (&ВидыРасходаПрошл)
		|				И ЭлементРасхода В (&ЭлементыРасходаПрошл)) КАК РасходыПриУСНОбороты"
		;
		
		НомераТаблиц.Вставить("РаспределенныеПрошлыйПериод", НомераТаблиц.Количество());
		
		НачДатаПоквартально = ПараметрыКорректировки.ДокументПоступленияДата;
		КонДатаПоквартально = КонецГода(ПараметрыКорректировки.ДокументПоступленияДата);
		
		МассивНоменклатуры = ТаблицаПринятыхПрошлыйПериод.ВыгрузитьКолонку("ЭлементРасхода");
		ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивНоменклатуры);
		
		МассивСчетовУчета = ТаблицаПринятыхПрошлыйПериод.ВыгрузитьКолонку("СчетУчета");
		ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивСчетовУчета);
		
		МассивВидовРасхода = ТаблицаПринятыхПрошлыйПериод.ВыгрузитьКолонку("ВидРасхода");
		ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивВидовРасхода);
		
		Запрос.УстановитьПараметр("НачалоПериодаПрошл",   НачДатаПоквартально);
		Запрос.УстановитьПараметр("КонецПериодаПрошл",    КонДатаПоквартально);
		Запрос.УстановитьПараметр("Организация",		  ПараметрыКорректировки.Организация);
		Запрос.УстановитьПараметр("РасчетныйДокумент",    ПараметрыКорректировки.ДокументПоступленияСсылка);
		Запрос.УстановитьПараметр("СчетаУчетаПрошл",	  МассивСчетовУчета);
		Запрос.УстановитьПараметр("ЭлементыРасходаПрошл", МассивНоменклатуры);
		Запрос.УстановитьПараметр("ВидыРасходаПрошл",     МассивВидовРасхода);
		
	КонецЕсли; 
	
	
	Если РасходыПоквартальноТек И ТаблицаПринятыхТекПериод.Количество() > 0
		 И НачалоКвартала(СтруктураШапкиДокумента.Дата) > НачалоГода(СтруктураШапкиДокумента.Дата) Тогда
		
		Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда			
			ТекстЗапроса = ТекстЗапроса + "
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|";
		КонецЕсли; 
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РасходыПриУСНОбороты.ЭлементРасхода,
		|	РасходыПриУСНОбороты.ВидРасхода,
		|	РасходыПриУСНОбороты.СчетУчета,
		|	РасходыПриУСНОбороты.Валюта,
		|	РасходыПриУСНОбороты.ОтражениеВУСН,
		|	РасходыПриУСНОбороты.СуммаРасход КАК Сумма,
		|	РасходыПриУСНОбороты.НДСРасход КАК НДС,
		|	НАЧАЛОПЕРИОДА(РасходыПриУСНОбороты.Период, КВАРТАЛ) КАК Период
		|ИЗ
		|	РегистрНакопления.РасходыПриУСН.Обороты(
		|			&НачалоПериодаТек,
		|			&КонецПериодаТек,
		|			Квартал,
		|			Организация = &Организация
		|				И ОтражениеВУСН = Значение(Перечисление.ОтражениеВУСН.Распределяются)
		|				И РасчетныйДокумент = &РасчетныйДокумент
		|				И СтатусыОплатыРасходовУСН = Значение(Перечисление.СтатусыРасходовУСН.НеРаспределено)
		|				И СчетУчета В (&СчетаУчетаТек)
		|				И ВидРасхода В (&ВидыРасходаТек)
		|				И ЭлементРасхода В (&ЭлементыРасходаТек)) КАК РасходыПриУСНОбороты"
		;
		
		НомераТаблиц.Вставить("РаспределенныеТекПериод", НомераТаблиц.Количество());
		
		НачДатаПоквартально = НачалоГода(СтруктураШапкиДокумента.Дата);
		КонДатаПоквартально = КонецКвартала(ДобавитьМесяц(СтруктураШапкиДокумента.Дата, -3));
		
		МассивНоменклатуры = ТаблицаПринятыхТекПериод.ВыгрузитьКолонку("ЭлементРасхода");
		ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивНоменклатуры);
		
		МассивСчетовУчета = ТаблицаПринятыхТекПериод.ВыгрузитьКолонку("СчетУчета");
		ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивСчетовУчета);
		
		МассивВидовРасхода = ТаблицаПринятыхТекПериод.ВыгрузитьКолонку("ВидРасхода");
		ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивВидовРасхода);
		
		Запрос.УстановитьПараметр("НачалоПериодаТек",   НачДатаПоквартально);
		Запрос.УстановитьПараметр("КонецПериодаТек",    КонДатаПоквартально);
		Запрос.УстановитьПараметр("Организация",		ПараметрыКорректировки.Организация);
		Запрос.УстановитьПараметр("РасчетныйДокумент",  ПараметрыКорректировки.ДокументПоступленияСсылка);
		Запрос.УстановитьПараметр("СчетаУчетаТек",		МассивСчетовУчета);
		Запрос.УстановитьПараметр("ЭлементыРасходаТек",	МассивНоменклатуры);
		Запрос.УстановитьПараметр("ВидыРасходаТек",     МассивВидовРасхода);
		
	КонецЕсли;
	
	Если НомераТаблиц.Количество() > 0 Тогда
		
		Запрос.Текст = ТекстЗапроса;
		РезультатЗапросаРасходыПоквартально = Запрос.ВыполнитьПакет();
		
		Ном = 0;
		Если НомераТаблиц.Свойство("РаспределенныеТекПериод", Ном) Тогда			
			РаспределенныеТекПериод = РезультатЗапросаРасходыПоквартально[Ном].Выгрузить();
			РаспределенныеТекПериод.Индексы.Добавить("ЭлементРасхода");
			РаспределенныеТекПериод.Индексы.Добавить("ВидРасхода");
			РаспределенныеТекПериод.Индексы.Добавить("СчетУчета");
		КонецЕсли;
		Если НомераТаблиц.Свойство("РаспределенныеПрошлыйПериод", Ном) Тогда			
			РаспределенныеПрошлыйПериод = РезультатЗапросаРасходыПоквартально[Ном].Выгрузить();
			РаспределенныеПрошлыйПериод.Индексы.Добавить("ЭлементРасхода");
			РаспределенныеПрошлыйПериод.Индексы.Добавить("ВидРасхода");
			РаспределенныеПрошлыйПериод.Индексы.Добавить("СчетУчета");
		КонецЕсли; 
	
	КонецЕсли; 
	
	// 3. Поправим корректируемые расходы по найденным коэффициентам распределения
	
	ТаблицаПринятых.Очистить();
	
	//    текущий период
	Если ТаблицаПринятыхТекПериод.Количество() > 0
		 И НачалоКвартала(СтруктураШапкиДокумента.Дата) > НачалоГода(СтруктураШапкиДокумента.Дата) Тогда		
		
		Если РасходыПоквартальноТек Тогда // разбиваем корректировку КУДиР по результатам ежеквартального распределения УСН/ЕНВД
			
			РаспределеноСводныеИтоги = РаспределенныеТекПериод.Скопировать(, "ВидРасхода, ЭлементРасхода, СчетУчета, Сумма, НДС");
			РаспределеноСводныеИтоги.Свернуть("ВидРасхода, ЭлементРасхода, СчетУчета", "Сумма, НДС");
			
			Для каждого СтрокаКорректировки Из ТаблицаПринятыхТекПериод Цикл
				
				СуммаРаспределеноВсего = 0;
				НДСРаспределеноВсего = 0;
				
				СтруктураОтбора = Новый Структура("ВидРасхода, ЭлементРасхода, СчетУчета", СтрокаКорректировки.ВидРасхода, СтрокаКорректировки.ЭлементРасхода, СтрокаКорректировки.СчетУчета);
				
				// всего распределено за год
				СтрокиИтогов = РаспределеноСводныеИтоги.НайтиСтроки(СтруктураОтбора);
				Для каждого СтрокаИтога Из СтрокиИтогов Цикл
					СуммаРаспределеноВсего = СуммаРаспределеноВсего + СтрокаИтога.Сумма;
					НДСРаспределеноВсего   = НДСРаспределеноВсего + СтрокаИтога.НДС;
				КонецЦикла; 
				
				СтрокиРаспределенных = РаспределенныеТекПериод.НайтиСтроки(СтруктураОтбора);
				
				Для каждого СтрокаРаспределения Из СтрокиРаспределенных Цикл
					
					КоэффЕНВДКвартал = 0;
					СтрокаКоэффициента = ТабКоэффициентыПоквартально.Найти(СтрокаРаспределения.Период, "Период");
					КоэффЕНВДКвартал = ?(СтрокаКоэффициента = Неопределено, 0, СтрокаКоэффициента.Коэффициент);
					
					К_Квартал_Сумма = ?(СуммаРаспределеноВсего = 0, 0, СтрокаРаспределения.Сумма/СуммаРаспределеноВсего);
					
					СуммаКорректировкиКвартал = К_Квартал_Сумма * СтрокаКорректировки.Сумма; 			  // сумма корректировки по принятому расходу, приходящаяся на тек. квартал
					СуммаПризнанногоКвартал = СуммаКорректировкиКвартал - Окр(КоэффЕНВДКвартал * СуммаКорректировкиКвартал, 2, 1); // сумма корректировки признанного расхода с учетом распределения УСН/ЕНВД за тек квартал
					
					К_Квартал_НДС = ?(НДСРаспределеноВсего = 0, 0, СтрокаРаспределения.НДС/НДСРаспределеноВсего);
					
					НДСКорректировкиКвартал = К_Квартал_НДС * СтрокаКорректировки.НДС; 			  // сумма корректировки по принятому НДС, приходящаяся на тек. квартал
					НДСПризнанногоКвартал = НДСКорректировкиКвартал - Окр(КоэффЕНВДКвартал * НДСКорректировкиКвартал, 2, 1); // сумма корректировки признанного НДС с учетом распределения УСН/ЕНВД за тек квартал
					
					Если СуммаКорректировкиКвартал <> 0 ИЛИ НДСКорректировкиКвартал <> 0 Тогда
						
						ТекстПериод = ПредставлениеПериода(НачалоКвартала(СтрокаРаспределения.Период), КонецКвартала(СтрокаРаспределения.Период), "ФП = Истина");
						
						НоваяСтрока = ТаблицаПринятых.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКорректировки);
						
						НоваяСтрока.Сумма = СуммаПризнанногоКвартал;
						НоваяСтрока.НДС   = НДСПризнанногоКвартал;
						
						//ТаблицаПринятых.ДатаКорректировки = КонецКвартала(СтрокаРаспределения.Период);
						Если ТаблицаПринятых.Колонки.Найти("ДополнительноеОписание") <> Неопределено Тогда							
							НоваяСтрока.ДополнительноеОписание = "Учтены результаты распределения (УСН/ЕНВД) за " + ТекстПериод;
						КонецЕсли;
						
					КонецЕсли; 
					
				КонецЦикла; 
				
			КонецЦикла; 
			
		Иначе
			
			ТекстПериод = ПредставлениеПериода(НачалоГода(СтруктураШапкиДокумента.Дата), КонецКвартала(ДобавитьМесяц(СтруктураШапкиДокумента.Дата, -3)), "ФП = Истина");
			Для каждого СтрокаРасхода Из ТаблицаПринятыхТекПериод Цикл
				
				НоваяСтрока = ТаблицаПринятых.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасхода);
				
				НоваяСтрока.Сумма = НоваяСтрока.Сумма - Окр(КоэффициентТекущийПериод*НоваяСтрока.Сумма,2,1);
				НоваяСтрока.НДС   = НоваяСтрока.НДС - Окр(КоэффициентТекущийПериод*НоваяСтрока.НДС,2,1);
				
				Если ТаблицаПринятых.Колонки.Найти("ДополнительноеОписание") <> Неопределено Тогда
					Если КоэффициентТекущийПериод > 0 Тогда
						НоваяСтрока.ДополнительноеОписание = "Учтены результаты распределения (УСН/ЕНВД) за " + ТекстПериод;
					КонецЕсли;
				КонецЕсли; 
				
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли; 
	
	//    и прошлый период
	Если ЭтоКорректировкаПрошлогоПериода И ТаблицаПринятыхПрошлыйПериод.Количество() > 0 Тогда		
		
		Если РасходыПоквартальноПрошлыйГод Тогда // разбиваем корректировку КУДиР по результатам ежеквартального распределения УСН/ЕНВД
			
			РаспределеноСводныеИтоги = РаспределенныеПрошлыйПериод.Скопировать(, "ВидРасхода, ЭлементРасхода, СчетУчета, Сумма, НДС");
			РаспределеноСводныеИтоги.Свернуть("ВидРасхода, ЭлементРасхода, СчетУчета", "Сумма, НДС");
			
			Для каждого СтрокаКорректировки Из ТаблицаПринятыхПрошлыйПериод Цикл
				
				СуммаРаспределеноВсего = 0;
				НДСРаспределеноВсего = 0;
				
				СтруктураОтбора = Новый Структура("ВидРасхода, ЭлементРасхода, СчетУчета", СтрокаКорректировки.ВидРасхода, СтрокаКорректировки.ЭлементРасхода, СтрокаКорректировки.СчетУчета);
				
				// всего распределено за год
				СтрокиИтогов = РаспределеноСводныеИтоги.НайтиСтроки(СтруктураОтбора);
				Для каждого СтрокаИтога Из СтрокиИтогов Цикл
					СуммаРаспределеноВсего = СуммаРаспределеноВсего + СтрокаИтога.Сумма;
					НДСРаспределеноВсего   = НДСРаспределеноВсего + СтрокаИтога.НДС;
				КонецЦикла; 
				
				СтрокиРаспределенных = РаспределенныеПрошлыйПериод.НайтиСтроки(СтруктураОтбора);
				
				Для каждого СтрокаРаспределения Из СтрокиРаспределенных Цикл
					
					КоэффЕНВДКвартал = 0;
					СтрокаКоэффициента = ТабКоэффициентыПоквартально.Найти(СтрокаРаспределения.Период, "Период");
					КоэффЕНВДКвартал = ?(СтрокаКоэффициента = Неопределено, 0, СтрокаКоэффициента.Коэффициент);
					
					К_Квартал_Сумма = ?(СуммаРаспределеноВсего = 0, 0, СтрокаРаспределения.Сумма/СуммаРаспределеноВсего);
					
					СуммаКорректировкиКвартал = К_Квартал_Сумма * СтрокаКорректировки.Сумма; 			  // сумма корректировки по принятому расходу, приходящаяся на тек. квартал
					СуммаПризнанногоКвартал = СуммаКорректировкиКвартал - Окр(КоэффЕНВДКвартал * СуммаКорректировкиКвартал, 2, 1); // сумма корректировки признанного расхода с учетом распределения УСН/ЕНВД за тек квартал
					
					К_Квартал_НДС = ?(НДСРаспределеноВсего = 0, 0, СтрокаРаспределения.НДС/НДСРаспределеноВсего);
					
					НДСКорректировкиКвартал = К_Квартал_НДС * СтрокаКорректировки.НДС; 			  // сумма корректировки по принятому НДС, приходящаяся на тек. квартал
					НДСПризнанногоКвартал = НДСКорректировкиКвартал - Окр(КоэффЕНВДКвартал * НДСКорректировкиКвартал, 2, 1); // сумма корректировки признанного НДС с учетом распределения УСН/ЕНВД за тек квартал
					
					Если СуммаКорректировкиКвартал <> 0 ИЛИ НДСКорректировкиКвартал <> 0 Тогда
						
						ТекстПериод = ПредставлениеПериода(НачалоКвартала(СтрокаРаспределения.Период), КонецКвартала(СтрокаРаспределения.Период), "ФП = Истина");
						
						НоваяСтрока = ТаблицаПринятых.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКорректировки);
						
						НоваяСтрока.Сумма = СуммаПризнанногоКвартал;
						НоваяСтрока.НДС   = НДСПризнанногоКвартал;
						
						//ТаблицаПринятых.ДатаКорректировки = КонецКвартала(СтрокаРаспределения.Период);
						Если ТаблицаПринятых.Колонки.Найти("ДополнительноеОписание") <> Неопределено Тогда							
							НоваяСтрока.ДополнительноеОписание = "Учтены результаты распределения (УСН/ЕНВД) за " + ТекстПериод;
						КонецЕсли;
						
					КонецЕсли; 
					
				КонецЦикла; 
				
			КонецЦикла; 
			
		Иначе
			
			ТекстПериод = ПредставлениеПериода(НачалоГода(ПараметрыКорректировки.ДокументПоступленияДата), КонецГода(ПараметрыКорректировки.ДокументПоступленияДата), "ФП = Истина");
			Для каждого СтрокаРасхода Из ТаблицаПринятыхПрошлыйПериод Цикл
				
				НоваяСтрока = ТаблицаПринятых.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасхода);
				
				НоваяСтрока.Сумма = НоваяСтрока.Сумма - Окр(КоэффициентПрошлыйГод*НоваяСтрока.Сумма,2,1);
				НоваяСтрока.НДС   = НоваяСтрока.НДС - Окр(КоэффициентПрошлыйГод*НоваяСтрока.НДС,2,1);
				
				Если ТаблицаПринятых.Колонки.Найти("ДополнительноеОписание") <> Неопределено Тогда
					Если КоэффициентПрошлыйГод > 0 Тогда
						НоваяСтрока.ДополнительноеОписание = "Учтены результаты распределения (УСН/ЕНВД) за " + ТекстПериод;
					КонецЕсли;
				КонецЕсли; 
				
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьКоэффицентыРаспределенияЕНВДПоКварталам(СтруктураПараметров, НачДата, КонДата, База = "БУ")
	
	ТабКоэффициенты = Новый ТаблицаЗначений;
	ТабКоэффициенты.Колонки.Добавить("Период", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТабКоэффициенты.Колонки.Добавить("Коэффициент", Новый ОписаниеТипов("Число"));
	
	ТабКварталов = Новый ТаблицаЗначений;
	ТабКварталов.Колонки.Добавить("Период", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТекПериод = НачалоКвартала(НачДата);
	Пока ТекПериод < КонДата Цикл		
		НоваяСтрока = ТабКварталов.Добавить();
		НоваяСтрока.Период = ТекПериод;
		ТекПериод = ДобавитьМесяц(ТекПериод, 3);
	КонецЦикла; 
	
	Если База = "БУ" Тогда
		
		ВключатьПрочиеДоходы = ?(УчетнаяПолитика.БазаРаспределенияКосвенныхРасходовПоВидамДеятельности(СтруктураПараметров.Организация, КонДата)
		                         = Перечисления.БазыРаспределенияКосвенныхРасходовПоВидамДеятельности.ДоходыОтРеализацииИВнереализационные, Истина, Ложь); 	
								 
		Запрос = Новый Запрос;
		
		// Массив счетов, по которым рассчитывается выручка
		СчетаВыручки = Новый Массив;
		СчетаВыручки.Добавить(ПланыСчетов.Хозрасчетный.Выручка);
		СчетаВыручки.Добавить(ПланыСчетов.Хозрасчетный.Продажи_НДС);
		СчетаВыручки.Добавить(ПланыСчетов.Хозрасчетный.Продажи_Акцизы);
		СчетаВыручки.Добавить(ПланыСчетов.Хозрасчетный.Продажи_ЭкспортныеПошлины);
		
		Запрос.УстановитьПараметр("НачалоПериода",        НачалоКвартала(НачДата));
		Запрос.УстановитьПараметр("КонецПериода",         КонецКвартала(КонДата));
		Запрос.УстановитьПараметр("Организация",          СтруктураПараметров.Организация);
		Запрос.УстановитьПараметр("СчетаВыручки",         СчетаВыручки);
		Запрос.УстановитьПараметр("ВключатьПрочиеДоходы", ВключатьПрочиеДоходы);
		Запрос.УстановитьПараметр("ТаблицаПериодов",	  ТабКварталов);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаПериодов.Период
		|ПОМЕСТИТЬ ТаблицаПериодов
		|ИЗ
		|	&ТаблицаПериодов КАК ТаблицаПериодов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет
		|ПОМЕСТИТЬ СчетаВыручки
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетаВыручки)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Счет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет
		|ПОМЕСТИТЬ СчетаПрочиеДоходы
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеДоходы))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Счет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ХозрасчетныйОбороты.Период, КВАРТАЛ) КАК Период,
		|	ХозрасчетныйОбороты.Счет КАК Счет,
		|	-ХозрасчетныйОбороты.СуммаОборот КАК Сумма
		|ПОМЕСТИТЬ Выручка
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Квартал,
		|			Счет В
		|				(ВЫБРАТЬ
		|					СчетаВыручки.Счет
		|				ИЗ
		|					СчетаВыручки),
		|			,
		|			Организация = &Организация,
		|			НЕ КорСчет В
		|						(ВЫБРАТЬ
		|							СчетаВыручки.Счет
		|						ИЗ
		|							СчетаВыручки)
		|				И КорСчет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж),
		|			) КАК ХозрасчетныйОбороты
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Счет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ХозрасчетныйОбороты.Период, КВАРТАЛ) КАК Период,
		|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ПрочиеДоходыИРасходы) КАК ПрочиеДоходыИРасходы,
		|	-ХозрасчетныйОбороты.СуммаОборот КАК Сумма
		|ПОМЕСТИТЬ ПрочиеДоходы
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Квартал,
		|			Счет В
		|				(ВЫБРАТЬ
		|					СчетаПрочиеДоходы.Счет
		|				ИЗ
		|					СчетаПрочиеДоходы),
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы),
		|			&ВключатьПрочиеДоходы
		|				И Организация = &Организация,
		|			НЕ КорСчет В
		|					(ВЫБРАТЬ
		|						СчетаПрочиеДоходы.Счет
		|					ИЗ
		|						СчетаПрочиеДоходы),
		|			) КАК ХозрасчетныйОбороты
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПрочиеДоходыИРасходы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПериодов.Период,
		|	СУММА(ЕСТЬNULL(Выручка.Всего, 0)) КАК Всего,
		|	СУММА(ЕСТЬNULL(Выручка.ОсобыйПорядок, 0)) КАК ОсобыйПорядок
		|ИЗ
		|	ТаблицаПериодов КАК ТаблицаПериодов
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			Выручка.Период КАК Период,
		|			Выручка.Сумма КАК Всего,
		|			ВЫБОР
		|				КОГДА ЕНВД.Счет ЕСТЬ NULL 
		|					ТОГДА 0
		|				ИНАЧЕ Выручка.Сумма
		|			КОНЕЦ КАК ОсобыйПорядок
		|		ИЗ
		|			Выручка КАК Выручка
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаДоходовИРасходовЕНВД КАК ЕНВД
		|				ПО Выручка.Счет = ЕНВД.Счет
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			ПрочиеДоходы.Период,
		|			ПрочиеДоходы.Сумма,
		|			ВЫБОР
		|				КОГДА ПрочиеДоходы.ПрочиеДоходыИРасходы.ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
		|					ТОГДА ПрочиеДоходы.Сумма
		|				ИНАЧЕ 0
		|			КОНЕЦ
		|		ИЗ
		|			ПрочиеДоходы КАК ПрочиеДоходы) КАК Выручка
		|		ПО ТаблицаПериодов.Период = Выручка.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаПериодов.Период";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Коэффициент = 0;
			
			Если Выборка.Всего = 0 ИЛИ Выборка.ОсобыйПорядок = 0 Тогда
				// Если нет определенности, то считаем, что все расходы относятся к деятельности на основной системе обложения
				Коэффициент = 0;
			Иначе
				Коэффициент = Выборка.ОсобыйПорядок / Выборка.Всего;
			КонецЕсли;
			
			НоваяСтрока = ТабКоэффициенты.Добавить();
			
			НоваяСтрока.Период = Выборка.Период;
			НоваяСтрока.Коэффициент = Коэффициент;
			
		КонецЦикла;
		
	Иначе
		// запрос по доходам НУ по периодам
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НачДата", НачалоКвартала(НачДата));
		Запрос.УстановитьПараметр("КонДата", КонецКвартала(КонДата));
		Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
		Запрос.УстановитьПараметр("ТаблицаПериодов", ТабКварталов);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаПериодов.Период
		|ПОМЕСТИТЬ ТаблицаПериодов
		|ИЗ
		|	&ТаблицаПериодов КАК ТаблицаПериодов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПериодов.Период КАК Период,
		|	СУММА(ЕСТЬNULL(КнигаУчетаДоходовИРасходовОбороты.Графа5Оборот, 0)) КАК Графа5Оборот,
		|	СУММА(ЕСТЬNULL(КнигаУчетаДоходовИРасходовОбороты.ДоходЕНВДОборот, 0)) КАК ДоходЕНВДОборот,
		|	СУММА(ЕСТЬNULL(КнигаУчетаДоходовИРасходовОбороты.Графа4Оборот, 0)) КАК Графа4Оборот
		|ИЗ
		|	ТаблицаПериодов КАК ТаблицаПериодов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&НачДата, &КонДата, Квартал, Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОбороты
		|		ПО (ТаблицаПериодов.Период = НАЧАЛОПЕРИОДА(КнигаУчетаДоходовИРасходовОбороты.Период, КВАРТАЛ))
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаПериодов.Период";
		
		Результат = Запрос.Выполнить().Выбрать();
		Пока Результат.Следующий() Цикл
			
			Коэффициент = 0;
			
			ДоходЕНВДОборот = ?(НЕ ЗначениеЗаполнено(Результат.ДоходЕНВДОборот), 0, Результат.ДоходЕНВДОборот);
			Графа4Оборот 	= ?(НЕ ЗначениеЗаполнено(Результат.Графа4Оборот), 0, Результат.Графа4Оборот);
			Графа5Оборот 	= ?(НЕ ЗначениеЗаполнено(Результат.Графа5Оборот), 0, Результат.Графа5Оборот);
			
			Если База = "НУ" Тогда
				Коэффициент = ?(ДоходЕНВДОборот + Графа5Оборот = 0, 0, Результат.ДоходЕНВДОборот/(ДоходЕНВДОборот + Графа5Оборот));
			Иначе
				Коэффициент = ?(Графа4Оборот = 0, 0, Результат.ДоходЕНВДОборот/Графа4Оборот);
			КонецЕсли;
			
			НоваяСтрока = ТабКоэффициенты.Добавить();
			
			НоваяСтрока.Период = Результат.Период;
			НоваяСтрока.Коэффициент = Коэффициент;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТабКоэффициенты;	

КонецФункции // ПолучитьКоэффицентыРаспределенияЕНВДПоКварталам()

//Основная процедура - собирает необходимые данные и вызывает
//ситуационные процедуры в зависимости от вида операции. Выполняет движения по регистрам
Процедура ОтразитьВУСН(ДокументСсылка, ВидОперации = Неопределено, Параметры = Неопределено, ЭтапПроведения = 0, СтруктураДопПараметров = Неопределено) Экспорт

	Если НЕ УчетнаяПолитика.ПрименяетсяУСН(ДокументСсылка.Организация, ДокументСсылка.Дата) 
		И НЕ УчетнаяПолитика.ПрименяетсяУСНПатент(ДокументСсылка.Организация, ДокументСсылка.Дата) Тогда
		Возврат;
	КонецЕсли;

	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();

	Сделка = ?(ОбщегоНазначения.ЕстьРеквизитОбъекта("Сделка", МетаданныеДокумента), ДокументСсылка.Сделка, Неопределено);
	Договор = ?(ОбщегоНазначения.ЕстьРеквизитОбъекта("ДоговорКонтрагента", МетаданныеДокумента), ДокументСсылка.ДоговорКонтрагента, ?(ОбщегоНазначения.ЕстьРеквизитОбъекта("ФизЛицо", МетаданныеДокумента),ДокументСсылка.ФизЛицо,Неопределено));
	ВалютаДокумента = ?(ОбщегоНазначения.ЕстьРеквизитОбъекта("ВалютаДокумента", МетаданныеДокумента), ДокументСсылка.ВалютаДокумента, ВалютаРегламентированногоУчета);
	ВалютаВзаиморасчетов = ?(ОбщегоНазначения.ЕстьРеквизитОбъекта("ДоговорКонтрагента", МетаданныеДокумента), ДокументСсылка.ДоговорКонтрагента.ВалютаВзаиморасчетов, ВалютаДокумента);
	КурсВзаиморасчетов = ?(ОбщегоНазначения.ЕстьРеквизитОбъекта("КурсВзаиморасчетов", МетаданныеДокумента), ДокументСсылка.КурсВзаиморасчетов, ЗаполнениеДокументов.КурсДокумента(ДокументСсылка, ВалютаРегламентированногоУчета));
	КратностьВзаиморасчетов = ?(ОбщегоНазначения.ЕстьРеквизитОбъекта("КратностьВзаиморасчетов", МетаданныеДокумента), ДокументСсылка.КратностьВзаиморасчетов, ЗаполнениеДокументов.КратностьДокумента(ДокументСсылка, ВалютаРегламентированногоУчета));

	ДатаОплаты = ?(ОбщегоНазначения.ЕстьРеквизитОбъекта("ДатаОплаты", МетаданныеДокумента), ДокументСсылка.ДатаОплаты, Неопределено);
	ВидОперацииДок = ?(ОбщегоНазначения.ЕстьРеквизитОбъекта("ВидОперации", МетаданныеДокумента), ДокументСсылка.ВидОперации, Неопределено);

	СторнироватьДоходыПриВозврате = Истина;
	
	РеквизитыКорректировки = Неопределено; // для корректировочных документов - их движения отражаются в КУДиР особым способом

	ДвиженияРегистров = Неопределено;
	ДвиженияКУДиРПатент = РегистрыНакопления.КнигаУчетаДоходовПатент.СоздатьНаборЗаписей().ВыгрузитьКолонки();

	Если Параметры = Неопределено Тогда
		СтруктураШапкиДокумента = Новый Структура("Ссылка, Объект, Организация, Дата", ДокументСсылка, ДокументСсылка.ПолучитьОбъект(), ДокументСсылка.Организация, ДокументСсылка.Дата);
	Иначе
		СтруктураШапкиДокумента = Параметры;
	КонецЕсли;

	Если СтруктураДопПараметров = Неопределено Тогда
		ТаблицаТМЦ = Неопределено;
	ИначеЕсли СтруктураДопПараметров.Свойство("ТаблицаТМЦ") Тогда
		ТаблицаТМЦ = СтруктураДопПараметров.ТаблицаТМЦ;
	КонецЕсли;

	СтруктураШапкиДокумента.Вставить("ВалютаВзаиморасчетов",ВалютаВзаиморасчетов);
	СтруктураШапкиДокумента.Вставить("ВалютаРегламентированногоУчета",ВалютаРегламентированногоУчета);
	СтруктураШапкиДокумента.Вставить("ВалютаДокумента",ВалютаДокумента);
	СтруктураШапкиДокумента.Вставить("ДатаОплаты",ДатаОплаты);
	СтруктураШапкиДокумента.Вставить("ВидОперации",ВидОперацииДок);
	СтруктураШапкиДокумента.Вставить("ДоговорКонтрагента",Договор);
	СтруктураШапкиДокумента.Вставить("ПорядокПризнанияРасходовПоНДС",УчетнаяПолитика.ПорядокПризнанияРасходовПоНДС(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата));
	СтруктураШапкиДокумента.Вставить("ПорядокПризнанияРасходовПоТоварам",УчетнаяПолитика.ПорядокПризнанияРасходовПоТоварам(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата));
	СтруктураШапкиДокумента.Вставить("ПорядокПризнанияМатериальныхРасходов",УчетнаяПолитика.ПорядокПризнанияМатериальныхРасходов(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата));
	СтруктураШапкиДокумента.Вставить("ПорядокПризнанияТаможенныхПлатежей",УчетнаяПолитика.ПорядокПризнанияТаможенныхПлатежей(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата));
	СтруктураШапкиДокумента.Вставить("МетодРаспределения",УчетнаяПолитика.МетодРаспределенияРасходовУСНПоВидамДеятельности(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата));
	СтруктураШапкиДокумента.Вставить("БазаРаспределения",УчетнаяПолитика.БазаРаспределенияРасходовУСНПоВидамДеятельности(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата));
	СтруктураШапкиДокумента.Вставить("Сделка",Сделка);
	
	Если НЕ СтруктураШапкиДокумента.Свойство("ОтражатьВНалоговомУчетеУСН") Тогда
		Если УчетнаяПолитика.ПрименяетсяУСНПатент(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата) Тогда
			СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСН",			Ложь);
			СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСНДоходы",	Ложь);
			СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСНПатент",	Истина);
		ИначеЕсли УчетнаяПолитика.ПрименяетсяУСНДоходы(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата) Тогда
			СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСН",			Ложь);
			СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСНДоходы",	Истина);
			СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСНПатент",	Ложь);
		Иначе
			СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСН",			Истина);
			СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСНДоходы",	Ложь);
			СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСНПатент",	Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Если ВидОперации = "НачислениеЗП" Тогда
		Если СтруктураДопПараметров.Свойство("ПериодРегистрации") Тогда
			СтруктураШапкиДокумента.Вставить("ПериодРегистрации", СтруктураДопПараметров.ПериодРегистрации);
		КонецЕсли;
	КонецЕсли;

	Если ВидОперации = Неопределено Тогда
		ВидОперации = ВидОперацииДДС(СтруктураШапкиДокумента);
	КонецЕсли;

	Если ВидОперации = "НеОтражатьВНУ" Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураШапкиДокумента.Вставить("ВидОперацииУСН",ВидОперации);

	КУДиР = Новый Структура("ДоходЕНВД, Графа4, Графа5, Графа6, Графа7, НДС, Содержание", 0,0,0,0,0,0,"");

	КУДиР.Содержание = СодержаниеКУДиР(СтруктураШапкиДокумента, ВидОперации, МетаданныеДокумента);

	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВалютаДокумента", МетаданныеДокумента) Тогда
		СтруктураШапкиДокумента.Вставить("КурсДокумента", 		ЗаполнениеДокументов.КурсДокумента(ДокументСсылка, ВалютаРегламентированногоУчета));
		СтруктураШапкиДокумента.Вставить("КратностьДокумента", 	ЗаполнениеДокументов.КратностьДокумента(ДокументСсылка, ВалютаРегламентированногоУчета));
	Иначе
		СтруктураШапкиДокумента.Вставить("КурсДокумента", 		1);
		СтруктураШапкиДокумента.Вставить("КратностьДокумента", 	1);
	КонецЕсли;

	// 1. Заполнить структуру ДвиженияРегистров, которая будет состоять из таблиц ВзаиморасчетыРасход, РасходыУСН, КУДиР
	Если (ВидОперации = "Поступление")
		ИЛИ (ВидОперации = "УслугаКомиссионера")
		ИЛИ (ВидОперации = "УслугаПоПереработке") Тогда

		НаборЗаписей = РегистрыНакопления.РасходыПриУСН.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
		НаборЗаписей.Прочитать();
		ТаблицаПрихода = НаборЗаписей.Выгрузить();

		Статусы = Новый СписокЗначений;
		Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено);
		Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеОплачено);
		Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеОплаченоНеОплаченоПокупателем);

		Если ЭтапПроведения > 0 Тогда
			Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеОплачено);
		КонецЕсли;

		КолвоЭлементовКоллекции = ТаблицаПрихода.Количество();
		Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл
			ЭлементКоллекции = ТаблицаПрихода[КолвоЭлементовКоллекции - ОбратныйИндекс];
			Если (Статусы.НайтиПоЗначению(ЭлементКоллекции.СтатусыОплатыРасходовУСН)=Неопределено)
				ИЛИ (ЭлементКоллекции.ВидДвижения = ВидДвиженияНакопления.Расход) Тогда
				ТаблицаПрихода.Удалить(ЭлементКоллекции);
			КонецЕсли;
		КонецЦикла;

		УчетАгентскогоНДС = Ложь;

		Если ТипЗнч(Договор) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			Если (Сделка = Неопределено) Тогда
				Сделка = СтруктураШапкиДокумента.Ссылка;
			КонецЕсли;
			УчетАгентскогоНДС = Договор.УчетАгентскогоНДС;
		КонецЕсли;

		Если ВидОперации = "УслугаКомиссионера" Тогда
			СуммаВзаиморасчетов   = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(ДокументСсылка.СуммаВознаграждения, ВалютаДокумента,
														   СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
														   СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
														   СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
		ИначеЕсли ВидОперации = "УслугаПоПереработке" Тогда

			СуммаВзаиморасчетов   = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ДокументСсылка, "Услуги"), ВалютаДокумента,
														   СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
														   СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
														   СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
		Иначе
			СуммаВзаиморасчетов   = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ДокументСсылка), ВалютаДокумента,
														   СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
														   СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
														   СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
			//Учтем агентский НДС
			Если УчетАгентскогоНДС Тогда
				СуммаВзаиморасчетовНДС   = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(УчетНДСПереопределяемый.ПолучитьНДСДокумента(ДокументСсылка), ВалютаДокумента,
														   СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
														   СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
														   СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

				СуммаВзаиморасчетов = СуммаВзаиморасчетов - СуммаВзаиморасчетовНДС;
				ТаблицаПриходаНДС = ТаблицаПрихода.СкопироватьКолонки();

				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("ВидРасхода",  Перечисления.ВидыРасходовУСН.Налоги);

				ТаблицаПрихода.Индексы.Добавить("ВидРасхода");
				НайденныеСтроки = ТаблицаПрихода.НайтиСтроки(СтруктураОтбора);
				КоличествоСтрок = НайденныеСтроки.Количество();
				Для Индекс = 1 По КоличествоСтрок Цикл
					Строка = НайденныеСтроки[КоличествоСтрок - Индекс];
					СтрокаНДС = ТаблицаПриходаНДС.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаНДС, Строка);
					ТаблицаПрихода.Удалить(Строка);
				КонецЦикла;
				СуммаВзаиморасчетовНДСРегл = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаВзаиморасчетовНДС,
															СтруктураШапкиДокумента.ВалютаВзаиморасчетов, ВалютаРегламентированногоУчета,
														   	КурсВзаиморасчетов, 1, КратностьВзаиморасчетов, 1);

				РасчетыПрочие_ЗачетАвансаПоставщикуУСН(СтруктураШапкиДокумента, ТаблицаПриходаНДС, ДвиженияРегистров, ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента, СуммаВзаиморасчетовНДСРегл, (ЭтапПроведения > 0));
			КонецЕсли;

		КонецЕсли;
		Если ТипЗнч(Договор) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			РасчетыПрочие_ЗачетАвансаПоставщикуУСН(СтруктураШапкиДокумента, ТаблицаПрихода, ДвиженияРегистров, Договор, СуммаВзаиморасчетов, (ЭтапПроведения > 0));
		Иначе
			ТаблицаОплат = СтруктураДопПараметров.ТаблицаРасчетов;
			РасчетыСКонтрагентами_ЗачетАвансаПоставщикуУСН(СтруктураШапкиДокумента, ТаблицаОплат, ТаблицаПрихода, ДвиженияРегистров, Договор, СуммаВзаиморасчетов, (ЭтапПроведения > 0));
		КонецЕсли;

	ИначеЕсли ВидОперации = "КорректировкаПоступления" Тогда
		
		Параметры = УчетУСН.ПодготовитьПараметрыКорректировкаПоступленияУСН(СтруктураДопПараметров.УСНРеквизиты);
		Если Параметры.Реквизиты.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		РеквизитыКорректировки = Параметры.Реквизиты[0];
		ТаблицаКорректировка   = СтруктураДопПараметров.ТаблицаКорректировка;
		ТаблицаРасчетов 	   = СтруктураДопПараметров.ТаблицаРасчетов;
		
		// 1. Получим движения прихода (по увеличению количества)
		НаборЗаписей = РегистрыНакопления.РасходыПриУСН.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
		НаборЗаписей.Прочитать();
		ТаблицаПрихода = НаборЗаписей.Выгрузить();

		Статусы = Новый СписокЗначений;
		Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено);
		Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеОплачено);
		Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеОплаченоНеОплаченоПокупателем);

		Если ЭтапПроведения > 0 Тогда
			Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеОплачено);
		КонецЕсли;

		КолвоЭлементовКоллекции = ТаблицаПрихода.Количество();
		Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл
			ЭлементКоллекции = ТаблицаПрихода[КолвоЭлементовКоллекции - ОбратныйИндекс];
			Если (Статусы.НайтиПоЗначению(ЭлементКоллекции.СтатусыОплатыРасходовУСН)=Неопределено)
				ИЛИ (ЭлементКоллекции.ВидДвижения = ВидДвиженияНакопления.Расход) Тогда
				ТаблицаПрихода.Удалить(ЭлементКоллекции);
			КонецЕсли;
		КонецЦикла;
		
		// 2. Зачет аванса поставщику
		ДвиженияРегистровВх = Неопределено;
														   
		Если ТаблицаРасчетов <> Неопределено И ТаблицаРасчетов.Количество() > 0 Тогда
			Если ТаблицаРасчетов.Итог("ОстатокВзаиморасчетов") > 0 Тогда
				СуммаВзаиморасчетов   = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(ТаблицаРасчетов.Итог("СуммаВзаиморасчетов"),
														   ВалютаДокумента, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
														   СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
														   СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
				РасчетыСКонтрагентами_ЗачетАвансаПоставщикуУСН(СтруктураШапкиДокумента, ТаблицаРасчетов, ТаблицаПрихода, ДвиженияРегистровВх, Договор, СуммаВзаиморасчетов, (ЭтапПроведения > 0));
			КонецЕсли; 		
		КонецЕсли; 
		
		// 3. Корректировка остатков и КУДиР по уменьшению количества и изменениям сумм
		КорректировкаПоступленияУСН(СтруктураШапкиДокумента, РеквизитыКорректировки, ТаблицаКорректировка, ДвиженияРегистровВх);		
		
		ДвиженияРегистров = ДвиженияРегистровВх;
		
	ИначеЕсли ВидОперации = "ГТД" Тогда
		
		НаборЗаписей = РегистрыНакопления.РасходыПриУСН.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
		НаборЗаписей.Прочитать();
		ТаблицаПрихода = НаборЗаписей.Выгрузить();

		Статусы = Новый СписокЗначений;
		Статусы.Добавить();
		Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеОплачено);

		КолвоЭлементовКоллекции = ТаблицаПрихода.Количество();
		Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл
			ЭлементКоллекции = ТаблицаПрихода[КолвоЭлементовКоллекции - ОбратныйИндекс];
			Если ЭлементКоллекции.ВидДвижения = ВидДвиженияНакопления.Расход
				ИЛИ НЕ (ЭлементКоллекции.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено
					ИЛИ ЭлементКоллекции.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеОплачено) Тогда
				ТаблицаПрихода.Удалить(ЭлементКоллекции);
			КонецЕсли;
		КонецЦикла;
		
		ОтражениеТаможенныхРасходовУСН(СтруктураШапкиДокумента, Неопределено, ТаблицаПрихода, ДвиженияРегистров);

	ИначеЕсли (ВидОперации = "ВозвратОтПокупателя") Тогда

		ДопРеквизиты = СтруктураДопПараметров.ТаблицаРеквизиты[0];
		СтруктураШапкиДокумента.Вставить("ИтогоВзаиморасчеты",      ДопРеквизиты.ИтогоВзаиморасчеты);
		СтруктураШапкиДокумента.Вставить("ИтогоЕНВД",               ДопРеквизиты.ИтогоЕНВД);
		СтруктураШапкиДокумента.Вставить("ИтогоКомиссия",           ДопРеквизиты.ИтогоКомиссия);
		СтруктураШапкиДокумента.Вставить("КурсВзаиморасчетов",      ДопРеквизиты.КурсВзаиморасчетов);
		СтруктураШапкиДокумента.Вставить("КратностьВзаиморасчетов", ДопРеквизиты.КратностьВзаиморасчетов);
		СуммаСторноРасходов = ?(
			СтруктураДопПараметров.Свойство("СуммаСторноРасходов") И ТипЗнч(СтруктураДопПараметров.СуммаСторноРасходов) = Тип("Число"),
				СтруктураДопПараметров.СуммаСторноРасходов,
				0);
		СуммаСторноНДС      = ?(
			СтруктураДопПараметров.Свойство("СуммаСторноНДС") И ТипЗнч(СтруктураДопПараметров.СуммаСторноНДС) = Тип("Число"),
				СтруктураДопПараметров.СуммаСторноНДС,
				0);
		СуммаПризнанияНДС   = ?(
			СтруктураДопПараметров.Свойство("СуммаПризнанияНДС") И ТипЗнч(СтруктураДопПараметров.СуммаПризнанияНДС) = Тип("Число"),
				СтруктураДопПараметров.СуммаПризнанияНДС,
				0);

		НаборЗаписей = РегистрыНакопления.КнигаУчетаДоходовИРасходов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
		НаборЗаписей.Прочитать();
		ТаблицаКУДиР = НаборЗаписей.ВыгрузитьКолонки();
		ДвиженияРегистров = Новый Структура("КУДиР, ВзаиморасчетыРасход, РасходыУСН",
			ТаблицаКУДиР,
			Новый ТаблицаЗначений,
			Новый ТаблицаЗначений);

		СформироватьДвиженияКУДиР(
			СтруктураШапкиДокумента,
			СтруктураДопПараметров.ТаблицаРасчетов,
			СуммаСторноРасходов,
			СуммаПризнанияНДС,
			СуммаСторноНДС,
			ДвиженияРегистров);

	ИначеЕсли (ВидОперации = "Перемещение")
			ИЛИ (ВидОперации = "Комплектация")
			ИЛИ (ВидОперации = "НаРеализацию")
			ИЛИ (ВидОперации = "ВПереработку")
			ИЛИ (ВидОперации = "ВозвратСРеализации")
			ИЛИ (ВидОперации = "ВозвратИзПереработки") Тогда

		ТаблицаПартий = ПодготовитьТаблицуПартий(ТаблицаТМЦ, ВидОперации);
		
		Договор = ?(ОбщегоНазначения.ЕстьРеквизитОбъекта("ДоговорКонтрагента", МетаданныеДокумента), ДокументСсылка.ДоговорКонтрагента, Неопределено);

		ВидРасхода = Перечисления.ВидыРасходовУСН.Номенклатура;
		Если ВидОперации = "ВозвратСРеализации" Тогда
			СтатусПартии = Перечисления.СтатусыПартийУСН.НаРеализации;
		ИначеЕсли ВидОперации = "ВозвратИзПереработки" Тогда
			СтатусПартии = Перечисления.СтатусыПартийУСН.ВПереработке;
		Иначе
			СтатусПартии = Перечисления.СтатусыПартийУСН.Купленные;
		КонецЕсли;

		ДвиженияРегистровВх = Неопределено;

		Если НЕ ТаблицаПартий.Количество() = 0 Тогда
			ПеремещениеРасходовУСН(СтруктураШапкиДокумента, ТаблицаПартий, ДвиженияРегистровВх, ВидРасхода, Договор, СтатусПартии, ВидОперации);
		Иначе
			//Партии не оприходовались (перемещение в НТТ по продажным ценам)
			//Спишем расходы
			//Дополним таблицу партий колонкой со статусами расходов по списанию

			ЗаполнитьОтражениеВНУпоСписанию(СтруктураШапкиДокумента, ТаблицаПартий, ВидОперации);
			ТаблицаПартий.ЗаполнитьЗначения(Перечисления.ОтражениеВУСН.НеПринимаются, "СтатусСписания");
			СписаниеРасходовУСН(СтруктураШапкиДокумента, ТаблицаПартий, ДвиженияРегистровВх, ВидРасхода, Договор, СтатусПартии, ВидОперации);
		КонецЕсли;

		ДвиженияРегистров = ДвиженияРегистровВх;

	ИначеЕсли (ВидОперации = "Списание")
		ИЛИ (ВидОперации = "Реализация")
		ИЛИ (ВидОперации = "ВозвратПоставщику") Тогда

		ТаблицаПартий = ПодготовитьТаблицуПартий(ТаблицаТМЦ, ВидОперации);

		Договор = ?(ОбщегоНазначения.ЕстьРеквизитОбъекта("ДоговорКонтрагента", МетаданныеДокумента), ДокументСсылка.ДоговорКонтрагента, Неопределено);

		ВидРасхода = Перечисления.ВидыРасходовУСН.Номенклатура;
		СтатусПартии = Перечисления.СтатусыПартийУСН.Купленные;

		ДвиженияРегистровВх = Неопределено;

		//Дополним таблицу партий колонкой со статусами расходов по списанию
		ЗаполнитьОтражениеВНУпоСписанию(СтруктураШапкиДокумента, ТаблицаПартий, ВидОперации);

		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
			//Расходы обрабатываем только при объекте "Доходы, уменьшенные на величину расходов"
			СписаниеРасходовУСН(СтруктураШапкиДокумента, ТаблицаПартий, ДвиженияРегистровВх, ВидРасхода, Договор, СтатусПартии, ВидОперации);
		Иначе
			ДвиженияРегистровВх = Новый Структура("ВзаиморасчетыРасход, РасходыУСН, КУДиР, ТаблицаПриход", Новый ТаблицаЗначений, Новый ТаблицаЗначений, Новый ТаблицаЗначений, Новый ТаблицаЗначений);
		КонецЕсли;

		Если ВидОперации = "Реализация" Тогда
			Выручка 			 = ДоляЕНВДиКомиссии(СтруктураШапкиДокумента, ТаблицаПартий, ДвиженияРегистровВх);
			Выручка.ЕНВД		 = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Выручка.ЕНВД, ВалютаДокумента,
																СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
																СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
																СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
			Выручка.Комиссия	 = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Выручка.Комиссия, ВалютаДокумента,
																СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
																СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
																СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
			Выручка.Патент		 = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Выручка.Патент, ВалютаДокумента,
																СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
																СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
																СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
			Выручка.Всего		 = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ДокументСсылка), ВалютаДокумента,
																СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
																СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
																СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

			Если (Сделка = Неопределено) Тогда
				Сделка = СтруктураШапкиДокумента.Ссылка;
			КонецЕсли;

			ТаблицаОплат = СтруктураДопПараметров.ТаблицаРасчетов;
			РасчетыСКонтрагентами_ЗачетАвансаОтПокупателяУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистровВх.ТаблицаПриход, ДвиженияРегистровВх, ДвиженияРегистров, ДвиженияКУДиРПатент, КУДиР, Выручка)

		ИначеЕсли ВидОперации = "Списание" Тогда

			ДвиженияРегистров = ДвиженияРегистровВх;

		ИначеЕсли ВидОперации = "ВозвратПоставщику" Тогда

			Если НЕ БухгалтерскийУчетПереопределяемый.ЭтоВидДоговораСКомитентом(Договор.ВидДоговора)
				И НЕ БухгалтерскийУчетПереопределяемый.ЭтоВидДоговораСКомитентомНаЗакупку(Договор.ВидДоговора) Тогда
				ТаблицаОплат = СтруктураДопПараметров.ТаблицаРасчетов;
				Если ТаблицаОплат.Количество() > 0 Тогда
					РасчетыСКонтрагентамиУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, ДвиженияКУДиРПатент, КУДиР, "Оплата");
				Иначе
					ДвиженияРегистров = Новый Структура("ВзаиморасчетыРасход, РасходыУСН, КУДиР, ТаблицаПриход", Новый ТаблицаЗначений, Новый ТаблицаЗначений, Новый ТаблицаЗначений, Новый ТаблицаЗначений);
				Конецесли;
				ДвиженияРегистров.РасходыУСН = ДвиженияРегистровВх.РасходыУСН.Скопировать();
				ДвиженияРегистров.КУДиР = ДвиженияРегистровВх.КУДиР.Скопировать();
				КУДиР.Графа6 = 0;
			Иначе
				ДвиженияРегистров = ДвиженияРегистровВх;
			КонецЕсли;

		Иначе
			ДвиженияРегистров = ДвиженияРегистровВх;
		КонецЕсли;
		
	ИначеЕсли ВидОперации = "Розница" Тогда
		
		ТаблицаПартий = ПодготовитьТаблицуПартий(ТаблицаТМЦ, ВидОперации);

		ВидРасхода = Перечисления.ВидыРасходовУСН.Номенклатура;
		СтатусПартии = Перечисления.СтатусыПартийУСН.Купленные;

		ДвиженияРегистровВх = Неопределено;

		//Дополним таблицу партий колонкой со статусами расходов по списанию
		ЗаполнитьОтражениеВНУпоСписанию(СтруктураШапкиДокумента, ТаблицаПартий, ВидОперации);

		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
			//Расходы обрабатываем только при объекте "Доходы, уменьшенные на величину расходов"
			СписаниеРасходовУСН(СтруктураШапкиДокумента, ТаблицаПартий, ДвиженияРегистровВх, ВидРасхода, Неопределено, СтатусПартии, ВидОперации);
		Иначе
			ДвиженияРегистровВх = Новый Структура("ВзаиморасчетыРасход, РасходыУСН, КУДиР, ТаблицаПриход", Новый ТаблицаЗначений, Новый ТаблицаЗначений, Новый ТаблицаЗначений, Новый ТаблицаЗначений);
		КонецЕсли;
		
		ДвиженияРегистров = ДвиженияРегистровВх;
		
		// отражение выручки в доходах
		
		Выручка 			 = ДоляЕНВДиКомиссии(СтруктураШапкиДокумента, ТаблицаПартий, ДвиженияРегистровВх);
		Выручка.ЕНВД		 = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Выручка.ЕНВД, ВалютаДокумента,
															СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
															СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
															СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
		Выручка.Комиссия	 = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Выручка.Комиссия, ВалютаДокумента,
															СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
															СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
															СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
		Выручка.Патент		 = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Выручка.Патент, ВалютаДокумента,
															СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
															СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
															СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
		Выручка.Всего		 = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ДокументСсылка), ВалютаДокумента,
															СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
															СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
															СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
		
		РаспределениеРозничнойВыручкиУСН(СтруктураШапкиДокумента, ТаблицаПартий, ДвиженияРегистров, ДвиженияКУДиРПатент, Выручка, КУДиР, СтруктураДопПараметров);

	ИначеЕсли (ВидОперации = "РеализацияКомиссионером")
			ИЛИ (ВидОперации = "ИзПереработки") Тогда

		ТаблицаПартий = ПодготовитьТаблицуПартий(ТаблицаТМЦ, ВидОперации);

		Договор = ?(ОбщегоНазначения.ЕстьРеквизитОбъекта("ДоговорКонтрагента", МетаданныеДокумента), ДокументСсылка.ДоговорКонтрагента, Неопределено);

		ВидРасхода = Перечисления.ВидыРасходовУСН.Номенклатура;
		Если ВидОперации = "РеализацияКомиссионером" Тогда
			СтатусПартии = Перечисления.СтатусыПартийУСН.НаРеализации;
			ВидОперации = "Реализация";
		ИначеЕсли ВидОперации = "ИзПереработки" Тогда
			СтатусПартии = Перечисления.СтатусыПартийУСН.ВПереработке;
			ВидОперации = "Списание";
		КонецЕсли;
		ДвиженияРегистровВх = Неопределено;

		//Дополним таблицу партий колонкой со статусами расходов по списанию
		ЗаполнитьОтражениеВНУпоСписанию(СтруктураШапкиДокумента, ТаблицаПартий, ВидОперации);

		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
			//Расходы обрабатываем только при объекте "Доходы, уменьшенные на величину расходов"
			СписаниеРасходовУСН(СтруктураШапкиДокумента, ТаблицаПартий, ДвиженияРегистровВх, ВидРасхода, Договор, СтатусПартии, ВидОперации);
		Иначе
			ДвиженияРегистровВх = Новый Структура("ВзаиморасчетыРасход, РасходыУСН, КУДиР, ТаблицаПриход", Новый ТаблицаЗначений, Новый ТаблицаЗначений, Новый ТаблицаЗначений, Новый ТаблицаЗначений);
		КонецЕсли;

		Если ВидОперации = "Реализация" Тогда
			Выручка 			 = ДоляЕНВДиКомиссии(СтруктураШапкиДокумента, ТаблицаПартий, ДвиженияРегистровВх);
			Выручка.ЕНВД		 = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Выручка.ЕНВД, ВалютаДокумента,
																СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
																СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
																СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
			Выручка.Комиссия	 = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Выручка.Комиссия, ВалютаДокумента,
																СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
																СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
																СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

			//Подменим ссылку если документ - реализация отгруженной продукции
			СсылкаДляОпределенияВыручки = ДокументСсылка;
			Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") И (НЕ МетаданныеДокумента.Реквизиты.Найти("ДокументОтгрузки") = Неопределено) Тогда
				Если ЗначениеЗаполнено(ДокументСсылка.ДокументОтгрузки) Тогда
					СсылкаДляОпределенияВыручки = ДокументСсылка.ДокументОтгрузки;
				КонецЕсли;
			КонецЕсли;
			СуммаВзаиморасчетов  = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(СсылкаДляОпределенияВыручки), ВалютаДокумента,
																СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
																СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
																СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
																
			ТаблицаОплат = СтруктураДопПараметров.ТаблицаРасчетов.Скопировать();
			Если ОбщегоНазначения.ЕстьРеквизитОбъекта("УдержатьВознаграждение", МетаданныеДокумента) И ДокументСсылка.УдержатьВознаграждение Тогда
					
				СуммаВознаграждения = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(ДокументСсылка.Товары.Итог("СуммаВознаграждения"), ВалютаДокумента,
															СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
															СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
															СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
				КоэффВознагр = ?(СуммаВзаиморасчетов = 0, 0, СуммаВознаграждения/СуммаВзаиморасчетов);
				Выручка.ЕНВД = Окр(Выручка.ЕНВД - Выручка.ЕНВД*КоэффВознагр, 2, 1);
				Выручка.Комиссия = Окр(Выручка.Комиссия - Выручка.Комиссия*КоэффВознагр, 2, 1);
				СуммаВзаиморасчетов = СуммаВзаиморасчетов - СуммаВознаграждения;
				Выручка.Всего = СуммаВзаиморасчетов;
					
				// Добавим в таблицу оплат суммы оплаты взаимозачетом по вознаграждению
				// для включения товаров, которые им оплачены, в КУдИР и списания их из регистра РасходыПриУСН
				Для Каждого СтрокаОплаты ИЗ СтруктураДопПараметров.ТаблицаРасчетовПоПриобретению Цикл
					НоваяСтрокаТаблицыОплат = ТаблицаОплат.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицыОплат, СтрокаОплаты, , "ДокументРасчетов");
					НоваяСтрокаТаблицыОплат = ТаблицаОплат.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицыОплат, СтрокаОплаты);
					НоваяСтрокаТаблицыОплат.СуммаВзаиморасчетов = -НоваяСтрокаТаблицыОплат.СуммаВзаиморасчетов;
				КонецЦикла;
			КонецЕсли;
			ТаблицаОплат.Свернуть("ДокументРасчетов, ДоговорКонтрагента","СуммаВзаиморасчетов, СуммаВзаиморасчетовЕНВД, СуммаВзаиморасчетовКомитента, СуммаВзаиморасчетовПатент");
			РасчетыСКонтрагентами_ЗачетАвансаОтПокупателяУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистровВх.ТаблицаПриход, ДвиженияРегистровВх, ДвиженияРегистров, ДвиженияКУДиРПатент, КУДиР, Выручка);

		ИначеЕсли ВидОперации = "Списание" Тогда

			ДвиженияРегистров = ДвиженияРегистровВх;

		КонецЕсли;

	ИначеЕсли ВидОперации = "ЗачетВознагражденияКомиссионера" Тогда

		//Проверим наличие доходов

		ТаблицаПартий = ПодготовитьТаблицуПартий(ТаблицаТМЦ, ВидОперации);

		Выручка = ДоляЕНВДиКомиссии(СтруктураШапкиДокумента, ТаблицаПартий);
		СуммаПринимаемойВыручки = Выручка.Всего - Выручка.ЕНВД - Выручка.Комиссия;

		ВыделятьНДСУСН = (СтруктураШапкиДокумента.ПорядокПризнанияРасходовПоНДС = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику);
		Если ВыделятьНДСУСН И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
			СуммаНДСВознаграждения = ДокументСсылка.Товары.Итог("СуммаНДСВознаграждения") + ДокументСсылка.Услуги.Итог("СуммаНДСВознаграждения");
			СуммаВознаграждения = ДокументСсылка.СуммаВознаграждения - СуммаНДСВознаграждения;
			Если ДокументСсылка.СуммаВознаграждения > 0 Тогда
				СуммаПринимаемойВыручки = СуммаПринимаемойВыручки - СуммаПринимаемойВыручки * СуммаНДСВознаграждения / ДокументСсылка.СуммаВознаграждения;
			КонецЕсли;
		Иначе
			СуммаВознаграждения = ДокументСсылка.СуммаВознаграждения;
		КонецЕсли;

		СуммаДоходов = Мин(СуммаПринимаемойВыручки, СуммаВознаграждения);
		СуммаДоходов = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаДоходов, ВалютаДокумента,
														   ВалютаРегламентированногоУчета,
														   СтруктураШапкиДокумента.КурсДокумента, 1,
														   СтруктураШапкиДокумента.КратностьДокумента, 1);
		СуммаВзаиморасчетов = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаВознаграждения, ВалютаДокумента,
														   ВалютаРегламентированногоУчета,
														   СтруктураШапкиДокумента.КурсДокумента, 1,
														   СтруктураШапкиДокумента.КратностьДокумента, 1);

		КУДиР.Графа4 = СуммаДоходов;
		КУДиР.Графа5 = СуммаДоходов;

		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
			КУДиР.Графа7 = СуммаВзаиморасчетов;
			Если НЕ ВыделятьНДСУСН Тогда
				КУДиР.НДС = ДокументСсылка.Товары.Итог("СуммаНДСВознаграждения") + ДокументСсылка.Услуги.Итог("СуммаНДСВознаграждения");
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли ВидОперации = "ЗачетВознагражденияКомиссионераНДС" Тогда

		//Проверим наличие доходов
		ТаблицаПартий = ПодготовитьТаблицуПартий(ТаблицаТМЦ, ВидОперации);

		Выручка = ДоляЕНВДиКомиссии(СтруктураШапкиДокумента, ТаблицаПартий);
		СуммаПринимаемойВыручки = Выручка.Всего - Выручка.ЕНВД - Выручка.Комиссия;
		СуммаНДСВознаграждения = ДокументСсылка.Товары.Итог("СуммаНДСВознаграждения") + ДокументСсылка.Услуги.Итог("СуммаНДСВознаграждения");
		Если ДокументСсылка.СуммаВознаграждения > 0 Тогда
			СуммаПринимаемойВыручки = СуммаПринимаемойВыручки * СуммаНДСВознаграждения / ДокументСсылка.СуммаВознаграждения;
		КонецЕсли;
		СуммаДоходов = Мин(СуммаПринимаемойВыручки, СуммаНДСВознаграждения);
		СуммаДоходов   = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаДоходов, ВалютаДокумента,
														   ВалютаРегламентированногоУчета,
														   СтруктураШапкиДокумента.КурсДокумента, 1,
														   СтруктураШапкиДокумента.КратностьДокумента, 1);
		СуммаВзаиморасчетов   = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаНДСВознаграждения, ВалютаДокумента,
														   ВалютаРегламентированногоУчета,
														   СтруктураШапкиДокумента.КурсДокумента, 1,
														   СтруктураШапкиДокумента.КратностьДокумента, 1);

		КУДиР.Графа4 = СуммаДоходов;
		КУДиР.Графа5 = СуммаДоходов;
		КУДиР.Графа7 = СуммаВзаиморасчетов;

	ИначеЕсли (ВидОперации = "РеализацияУслуг") Тогда

		Выручка 			 = ДоляЕНВДиКомиссии(СтруктураШапкиДокумента, , ,ВидОперации);
		Выручка.ЕНВД		 = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Выручка.ЕНВД, ВалютаДокумента,
																СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
																СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
																СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
		Выручка.Комиссия	 = 0;
		СуммаУслугПоДокументу = 0;

		ЗачитыватьАванс = Истина;
		УдержатьВознаграждение = Ложь;

		Если ОбщегоНазначенияБП.ЕстьТабЧастьДокумента("Услуги", МетаданныеДокумента) Тогда
			СуммаУслугПоДокументу = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ДокументСсылка);
		ИначеЕсли ОбщегоНазначенияБП.ЕстьТабЧастьДокумента("Продукция", МетаданныеДокумента) И ОбщегоНазначенияБП.ЕстьТабЧастьДокумента("Услуги", МетаданныеДокумента) Тогда
			СуммаУслугПоДокументу = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ДокументСсылка, "Продукция") + УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ДокументСсылка, "Услуги");
		ИначеЕсли ОбщегоНазначенияБП.ЕстьТабЧастьДокумента("Контрагенты", МетаданныеДокумента) Тогда
			СуммаУслугПоДокументу = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ДокументСсылка, "Контрагенты");
		ИначеЕсли ОбщегоНазначенияБП.ЕстьТабЧастьДокумента("Товары", МетаданныеДокумента) Тогда
			Если ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("СуммаВознаграждения", МетаданныеДокумента, "Товары") Тогда
				СуммаУслугПоДокументу = ДокументСсылка.Товары.Итог("СуммаВознаграждения");
				Если ДокументСсылка.УдержатьВознаграждение Тогда
					СуммаПолучено = ДокументСсылка.ДенежныеСредства.Итог("Сумма");
					ДоходПоУдержанномуВознаграждению = Мин(СуммаПолучено, СуммаУслугПоДокументу);
					КУДиР.Содержание = КУДиР.Содержание + "Комиссионное вознаграждение удержано из выручки комитента. ";
					КУДиР.Графа5 = КУДиР.Графа5 + РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(ДоходПоУдержанномуВознаграждению, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
																СтруктураШапкиДокумента.ВалютаРегламентированногоУчета,
																СтруктураШапкиДокумента.КурсДокумента, 1,
																СтруктураШапкиДокумента.КратностьДокумента, 1);

					СуммаУслугПоДокументу = 0;
				ИначеЕсли СтруктураДопПараметров.Свойство("ТаблицаРасчетов") 
					И ЗначениеЗаполнено(СтруктураДопПараметров.ТаблицаРасчетов)
					И СтруктураДопПараметров.ТаблицаРасчетов.Колонки.Найти("ДоговорКонтрагента") <> Неопределено Тогда
					
					СуммаДоходов = 0;
					
					Для Каждого СтрокаПлатеж Из СтруктураДопПараметров.ТаблицаРасчетов Цикл
						Если ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента)
							И БухгалтерскийУчетПереопределяемый.ЭтоВидДоговораСКомитентомНаЗакупку(СтрокаПлатеж.ДоговорКонтрагента.ВидДоговора)
							И ЗначениеЗаполнено(СтрокаПлатеж.ДокументРасчетов) И (ТипЗнч(СтрокаПлатеж.ДокументРасчетов) <> Тип("ДокументСсылка.ОтчетКомитентуОПродажах")) Тогда
							
							СуммаДоходов = СуммаДоходов + СтрокаПлатеж.СуммаВзаиморасчетов;
							
						КонецЕсли;
					КонецЦикла;					
					КУДиР.Содержание = КУДиР.Содержание + "Вознаграждение удержано из средств, полученных на исполнение комиссионного поручения. ";
					КУДиР.Графа5 = КУДиР.Графа5 + СуммаДоходов;					
				КонецЕсли;
			Конецесли;
		ИначеЕсли ОбщегоНазначенияБП.ЕстьТабЧастьДокумента("ОС", МетаданныеДокумента) Тогда
			СуммаУслугПоДокументу = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ДокументСсылка, "ОС");
		ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("НематериальныйАктив", МетаданныеДокумента) Тогда
			СуммаУслугПоДокументу = ?(ДокументСсылка.СуммаВключаетНДС, ДокументСсылка.Сумма, ДокументСсылка.Сумма + ДокументСсылка.СуммаНДС);
		КонецЕсли;

		Если НЕ СуммаУслугПоДокументу = 0 Тогда
			Выручка.Всего  = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаУслугПоДокументу, ВалютаДокумента,
																СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
																СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
																СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

			ТаблицаОплат = СтруктураДопПараметров.ТаблицаРасчетов;
			РасчетыСКонтрагентами_ЗачетАвансаОтПокупателяУСН(СтруктураШапкиДокумента, ТаблицаОплат, Новый ТаблицаЗначений, ДвиженияРегистров, ДвиженияРегистров, ДвиженияКУДиРПатент, КУДиР, Выручка);
		Конецесли;
		
	ИначеЕсли ВидОперации = "КорректировкаРеализации" Тогда
		
		ТаблицаРеализация   = СтруктураДопПараметров.ТаблицаРеализация;
		ТаблицаВозврат   	= СтруктураДопПараметров.ТаблицаВозврат;
		РасходыУСНПоСделке  = СтруктураДопПараметров.ТаблицаРасходыУСНПоСделке;
		ТаблицаРасчетов 	= СтруктураДопПараметров.ТаблицаРасчетов;
		Выручка				= СтруктураДопПараметров.Выручка;
		
		Параметры = УчетУСН.ПодготовитьПараметрыКорректировкаРеализацииУСН(СтруктураДопПараметров.УСНРеквизиты);
		Если Параметры.Реквизиты.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		РеквизитыКорректировки = Параметры.Реквизиты[0];
		
		// 1. Увеличение количества по реализации - отражение реализации
		ТаблицаРеализованныхПартий = ПодготовитьТаблицуПартий(ТаблицаРеализация, ВидОперации);

		Договор = РеквизитыКорректировки.ДоговорКонтрагента;

		ВидРасхода = Перечисления.ВидыРасходовУСН.Номенклатура;
		СтатусПартии = Перечисления.СтатусыПартийУСН.Купленные;

		ДвиженияРегистровВх = Неопределено;

		//Дополним таблицу партий колонкой со статусами расходов по списанию
		ЗаполнитьОтражениеВНУпоСписанию(СтруктураШапкиДокумента, ТаблицаРеализованныхПартий, ВидОперации);

		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
			//Расходы обрабатываем только при объекте "Доходы, уменьшенные на величину расходов"
			СтруктураШапкиДокумента.Вставить("ДокументРеализацииСсылка", РеквизитыКорректировки.ДокументРеализацииСсылка);
			СтруктураШапкиДокумента.Вставить("ДокументРеализацииДата",   РеквизитыКорректировки.ДокументРеализацииДата);
			СтруктураШапкиДокумента.Вставить("ЭтоКорректировкаПрошлогоПериода", РеквизитыКорректировки.ЭтоКорректировкаПрошлогоПериода);
			СписаниеРасходовУСН(СтруктураШапкиДокумента, ТаблицаРеализованныхПартий, ДвиженияРегистровВх, ВидРасхода, Договор, СтатусПартии, ВидОперации);
		Иначе
			ДвиженияРегистровВх = Новый Структура("ВзаиморасчетыРасход, РасходыУСН, КУДиР, ТаблицаПриход", Новый ТаблицаЗначений, Новый ТаблицаЗначений, Новый ТаблицаЗначений, Новый ТаблицаЗначений);
		КонецЕсли;
		
		// 2. Увеличение количества по реализации - зачет аванса покупателя
		Выручка.ЕНВД		 = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Выручка.ЕНВД, ВалютаДокумента,
																СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
																СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
																СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
		Выручка.Комиссия	 = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Выручка.Комиссия, ВалютаДокумента,
																СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
																СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
																СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
		Выручка.Патент		 = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Выручка.Патент, ВалютаДокумента,
																СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
																СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
																СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
		Выручка.Всего		 = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Выручка.Всего, ВалютаДокумента,
																СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
																СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
																СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

		Если ТаблицаРасчетов <> Неопределено И ТаблицаРасчетов.Количество() > 0 Тогда
			Если ТаблицаРасчетов.Итог("ОстатокВзаиморасчетов") > 0 Тогда
				РасчетыСКонтрагентами_ЗачетАвансаОтПокупателяУСН(СтруктураШапкиДокумента, ТаблицаРасчетов, ДвиженияРегистровВх.ТаблицаПриход, ДвиженияРегистровВх, ДвиженияРегистров, ДвиженияКУДиРПатент, КУДиР, Выручка);
			КонецЕсли; 		
		КонецЕсли;
		
		// 3. Уменьшение количества по реализации - отражение возврата и корректировка КУДиР
		КорректировкаРеализацииУСН(СтруктураШапкиДокумента, РеквизитыКорректировки, ТаблицаВозврат, РасходыУСНПоСделке, ДвиженияРегистровВх);
		
		ДвиженияРегистров = ДвиженияРегистровВх;
		
	ИначеЕсли (ВидОперации = "Оплата") Тогда
		ТаблицаОплат = СтруктураДопПараметров.ТаблицаРасчетов;
		Если ТаблицаОплат.Количество() > 0 Тогда
			РасчетыСКонтрагентамиУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, ДвиженияКУДиРПатент, КУДиР, ?(ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.АвансовыйОтчет"), "ОплатаАО", "Оплата"));
		Конецесли;

	ИначеЕсли ВидОперации = "ВыплатаЗП" Тогда

		ТаблицаОплат = СтруктураДопПараметров.ТаблицаВыплатаЗарплаты;
		Если ТаблицаОплат.Количество() > 0 Тогда
			ОплатаПрочееУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, КУДиР, "Работник");
		КонецЕсли;

	ИначеЕсли ВидОперации = "ВыплатаДепонентов" Тогда

		ТаблицаОплат = СтруктураДопПараметров.ТаблицаВыплатаДепонентов;
		Если ТаблицаОплат.Количество() > 0 Тогда
			ОплатаПрочееУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, КУДиР, "Работник");
		КонецЕсли;

	ИначеЕсли (ВидОперации = "ВыплатаЗПРаботнику") Тогда
		
		ТаблицаОплат = СтруктураДопПараметров.ТаблицаВыплатаЗарплаты;
		Если ТаблицаОплат.Количество() > 0 Тогда
			ОплатаПрочееУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, КУДиР, "Работник");
		КонецЕсли;

	ИначеЕсли (ВидОперации = "ОплатаОтПокупателя") Тогда
		ТаблицаОплат = СтруктураДопПараметров.ТаблицаРасчетов;
		Если ТаблицаОплат.Количество() > 0 Тогда
			РасчетыСКонтрагентамиУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, ДвиженияКУДиРПатент, КУДиР, "Доход");
		Конецесли;

	ИначеЕсли (ВидОперации = "НачислениеЗП") Тогда
		НачислениеЗП(СтруктураШапкиДокумента, ДвиженияРегистров, КУДиР, СтруктураДопПараметров);

	ИначеЕсли ВидОперации = "НачислениеСтраховыхВзносовИП" Тогда
		НачислениеСтраховыхВзносовИП(СтруктураШапкиДокумента, ДвиженияРегистров, КУДиР, СтруктураДопПараметров);
		
	ИначеЕсли ВидОперации = "НачислениеИмущественныхНалогов" Тогда
		НачислениеИмущественныхНалогов(СтруктураШапкиДокумента, ДвиженияРегистров, КУДиР, СтруктураДопПараметров);
		
	ИначеЕсли (ВидОперации = "СписаниеРБП") Тогда
		СписаниеРБПУСН(СтруктураШапкиДокумента, ДвиженияРегистров, КУДиР);

	ИначеЕсли (ВидОперации = "РаспределениеЕНВД") Тогда
		РаспределениеЕНВД(СтруктураШапкиДокумента, ДвиженияРегистров, КУДиР);

	ИначеЕсли (ВидОперации = "СписаниеТЗР") Тогда
		СписаниеТЗР(СтруктураШапкиДокумента, ДвиженияРегистров);

	ИначеЕсли ВидОперации = "СписаниеТаможенныхПлатежей" Тогда
		СписаниеТаможенныхПлатежей(СтруктураШапкиДокумента, ДвиженияРегистров);

	ИначеЕсли ВидОперации = "ПеречислениеНалога" ИЛИ ВидОперации = "УплатаНалогаПоКвитанции" Тогда
		ТаблицаОплат = Новый ТаблицаЗначений;
		ТаблицаОплат.Колонки.Добавить("ДоговорКонтрагента");
		ТаблицаОплат.Колонки.Добавить("Сделка");
		ТаблицаОплат.Колонки.Добавить("Сумма");

		НоваяСтрока = ТаблицаОплат.Добавить();
		НоваяСтрока.ДоговорКонтрагента = ДокументСсылка.СчетУчетаРасчетовСКонтрагентом;
		НоваяСтрока.Сделка = Неопределено;
		НоваяСтрока.Сумма = ДокументСсылка.СуммаДокумента;

		ОплатаПрочееУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, КУДиР, "Налог");

		ДвиженияРегистров.КУДиР.Колонки.Добавить("КлючУникальности");
		ДвиженияРегистров.КУДиР.ЗаполнитьЗначения(ДокументСсылка.СчетУчетаРасчетовСКонтрагентом, "КлючУникальности");

	ИначеЕсли (ВидОперации = "ВыдачаПодотчетномуЛицу") Тогда
		ТаблицаОплат = Новый ТаблицаЗначений;
		ТаблицаОплат.Колонки.Добавить("ДоговорКонтрагента");
		ТаблицаОплат.Колонки.Добавить("Сделка");
		ТаблицаОплат.Колонки.Добавить("Сумма");
		ТаблицаОплат.Колонки.Добавить("КурсВзаиморасчетов");
		ТаблицаОплат.Колонки.Добавить("КратностьВзаиморасчетов");

		НоваяСтрока = ТаблицаОплат.Добавить();

		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ФизЛицо", МетаданныеДокумента) Тогда
			НоваяСтрока.ДоговорКонтрагента = ДокументСсылка.ФизЛицо;
		Иначе
			НоваяСтрока.ДоговорКонтрагента = ДокументСсылка.Контрагент;
		КонецЕсли;

		НоваяСтрока.Сделка = Неопределено;
		НоваяСтрока.Сумма = ДокументСсылка.СуммаДокумента;
		НоваяСтрока.КурсВзаиморасчетов =  ЗаполнениеДокументов.КурсДокумента(ДокументСсылка, Константы.ВалютаРегламентированногоУчета.Получить());
		НоваяСтрока.КратностьВзаиморасчетов =  ЗаполнениеДокументов.КратностьДокумента(ДокументСсылка, Константы.ВалютаРегламентированногоУчета.Получить());

		ОплатаПрочееУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, КУДиР, "ПодотчетноеЛицо");

	ИначеЕсли (ВидОперации = "ВозвратОтПодотчетногоЛица") Тогда
		ТаблицаОплат = Новый ТаблицаЗначений;
		ТаблицаОплат.Колонки.Добавить("ДоговорКонтрагента");
		ТаблицаОплат.Колонки.Добавить("Сделка");
		ТаблицаОплат.Колонки.Добавить("Сумма");
		ТаблицаОплат.Колонки.Добавить("КурсВзаиморасчетов");
		ТаблицаОплат.Колонки.Добавить("КратностьВзаиморасчетов");

		НоваяСтрока = ТаблицаОплат.Добавить();
		НоваяСтрока.ДоговорКонтрагента = ДокументСсылка.Контрагент;
		НоваяСтрока.Сделка = Неопределено;
		НоваяСтрока.Сумма = ДокументСсылка.СуммаДокумента;
		НоваяСтрока.КурсВзаиморасчетов =  ЗаполнениеДокументов.КурсДокумента(ДокументСсылка, Константы.ВалютаРегламентированногоУчета.Получить());
		НоваяСтрока.КратностьВзаиморасчетов =  ЗаполнениеДокументов.КратностьДокумента(ДокументСсылка, Константы.ВалютаРегламентированногоУчета.Получить());

		ОплатаПрочееУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, КУДиР, "ПодотчетноеЛицо", ВидДвиженияНакопления.Расход);
		КУДиР.Графа6 = - КУДиР.Графа4;
		КУДиР.Графа4 = 0;
		КУДиР.Графа5 = 0;

	ИначеЕсли (ВидОперации = "ВозвратОтПоставщика") Тогда

		ТаблицаОплат = СтруктураДопПараметров.ТаблицаРасчетов;
		Если ТаблицаОплат.Количество() > 0 Тогда
			РасчетыСКонтрагентамиУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, ДвиженияКУДиРПатент, КУДиР, "Доход");
			КУДиР.Графа6 = - КУДиР.Графа4;
			КУДиР.Графа4 = 0;
			КУДиР.Графа5 = 0;
		Конецесли;

	ИначеЕсли (ВидОперации = "ВозвратПокупателю") Тогда

		ТаблицаОплат = СтруктураДопПараметров.ТаблицаРасчетов;
		Если ТаблицаОплат.Количество() > 0 Тогда
			РасчетыСКонтрагентамиУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, ДвиженияКУДиРПатент, КУДиР, "ВозвратПокупателю");
			Если НЕ СторнироватьДоходыПриВозврате Тогда
				КУДиР.Графа4 = 0;
				КУДиР.Графа5 = 0;
				КУДиР.Графа6 = 0;
			КонецЕсли;
		Конецесли;

	ИначеЕсли (ВидОперации = "ВыручкаСНТТ") Тогда
		//КУДиР.Содержание = "Прием розничной выручки. ";
		Если УчетнаяПолитика.СпособОценкиТоваровВРознице(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата) =
				Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости Тогда
				
			ПрочееДДС(ДокументСсылка, ДвиженияРегистров, КУДиР);
			
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСНПатент Тогда
				
				СуммаДокумента = ДокументСсылка.РасшифровкаПлатежа.Итог("СуммаПлатежа");
				
				Если СуммаДокумента > 0
					И ОбщегоНазначения.ЕстьРеквизитОбъекта("Патент", МетаданныеДокумента)
					И ЗначениеЗаполнено(ДокументСсылка.Патент) Тогда
					
					ЗаписьКУДиРПатент = ДвиженияКУДиРПатент.Добавить();
					ЗаписьКУДиРПатент.Патент = ДокументСсылка.Патент;
					ЗаписьКУДиРПатент.Содержание = СодержаниеКУДиР(СтруктураШапкиДокумента, СтруктураШапкиДокумента.ВидОперацииУСН, МетаданныеДокумента);
					ЗаписьКУДиРПатент.Графа4 = СуммаДокумента;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе

			СчетаДоходовРасходов = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаВНТТ(СтруктураШапкиДокумента.Организация, ДокументСсылка.Контрагент, СтруктураШапкиДокумента.Дата,
				Новый Структура("РозничнаяТорговляОблагаетсяЕНВД", УчетнаяПолитика.РозничнаяТорговляОблагаетсяЕНВД(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата)));
			ЕНВД = БухгалтерскийУчетВызовСервераПовтИсп.СчетОтноситсяКДеятельностиЕНВД(СчетаДоходовРасходов.СчетДоходовОтРеализации);

			СуммаДокумента = ДокументСсылка.РасшифровкаПлатежа.Итог("СуммаПлатежа");
			КУДиР.Графа4 = КУДиР.Графа4 + СуммаДокумента;

			Если ЕНВД Тогда
				КУДиР.ДоходЕНВД	 = КУДиР.ДоходЕНВД + СуммаДокумента;
				КУДиР.Содержание = КУДиР.Содержание +
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Выручка в сумме %1 руб. отнесена к деятельности ЕНВД. '"),
						ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаДокумента, , , " "));
			Иначе
				КУДиР.Графа5 = КУДиР.Графа5 + СуммаДокумента;
			КонецЕсли;

		КонецЕсли;

	ИначеЕсли (ВидОперации = "ПереносЗадолженности") Тогда

		Если СтруктураДопПараметров.Свойство("ДолгПокупателя") Тогда
			ТаблицаОплат = СтруктураДопПараметров.ДолгПокупателя;
			Если ТаблицаОплат.Количество() > 0 Тогда
				КорректировкаЗадолженностиУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, КУДиР, ВидДвиженияНакопления.Расход, ВидОперации);
			Конецесли;
		Конецесли;
		//таблицу АвансПоставщику не обрабатываем - по этим взаиморасчетам нет расходов

		Если СтруктураДопПараметров.Свойство("ДолгПоставщику") Тогда
			ТаблицаОплат = СтруктураДопПараметров.ДолгПоставщику;
			Если ТаблицаОплат.Количество() > 0 Тогда
				КорректировкаЗадолженностиУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, КУДиР, ВидДвиженияНакопления.Приход, ВидОперации);
			Конецесли;
		КонецЕсли;
		//таблицу АвансПокупателя не обрабатываем - по этим взаиморасчетам нет расходов

	ИначеЕсли (ВидОперации = "ПроведениеВзаимозачетаДебитор") Тогда

		Если СтруктураДопПараметров.Свойство("ДолгПокупателя") Тогда
			ТаблицаОплат = СтруктураДопПараметров.ДолгПокупателя;
			Если ТаблицаОплат.Количество() > 0 Тогда
				РасчетыСКонтрагентамиУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, ДвиженияКУДиРПатент, КУДиР, "Доход");
			Конецесли;
		Конецесли;

		Если СтруктураДопПараметров.Свойство("АвансПокупателя") Тогда
			ТаблицаОплат = СтруктураДопПараметров.АвансПокупателя;
			Если ТаблицаОплат.Количество() > 0 Тогда
				КУДиР.Графа5 = КУДиР.Графа5 - КУДиР.Графа4;
				КУДиР.Графа4 = 0;
			Конецесли;
		Конецесли;

		Если СтруктураДопПараметров.Свойство("ДолгПоставщику") Тогда
			ТаблицаОплат = СтруктураДопПараметров.ДолгПоставщику;
			Если ТаблицаОплат.Количество() > 0 И
				ЗначениеЗаполнено(ТаблицаОплат[0].ДоговорКонтрагента) И
				(ТаблицаОплат[0].ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее) Тогда
				КУДиР.Графа5 = КУДиР.Графа5 - КУДиР.Графа4;
				КУДиР.Графа4 = 0;
			Конецесли;
		Конецесли;

	ИначеЕсли (ВидОперации = "ПроведениеВзаимозачетаКредитор") Тогда

		Если СтруктураДопПараметров.Свойство("ДолгПоставщику") Тогда
			ТаблицаОплат = СтруктураДопПараметров.ДолгПоставщику;
			Если ТаблицаОплат.Количество() > 0 Тогда
				РасчетыСКонтрагентамиУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, ДвиженияКУДиРПатент, КУДиР, "Оплата");
				КУДиР.Графа6 = 0;
			Конецесли;
		Конецесли;

	ИначеЕсли (ВидОперации = "СписаниеДебиторскойЗадолженности") Тогда

		Если СтруктураДопПараметров.Свойство("ДолгПокупателя") Тогда
			ТаблицаОплат = СтруктураДопПараметров.ДолгПокупателя;
			Если ТаблицаОплат.Количество() > 0 Тогда
				КорректировкаЗадолженностиУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, КУДиР, ВидДвиженияНакопления.Расход, ВидОперации);
			Конецесли;
		Конецесли;
		//таблицу АвансПоставщику не обрабатываем - по этим взаиморасчетам нет расходов

	ИначеЕсли (ВидОперации = "СписаниеКредиторскойЗадолженности") Тогда

		Если СтруктураДопПараметров.Свойство("ДолгПоставщику") Тогда
			ТаблицаОплат = СтруктураДопПараметров.ДолгПоставщику;
			Если ТаблицаОплат.Количество() > 0 Тогда
				КорректировкаЗадолженностиУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, КУДиР, ВидДвиженияНакопления.Приход, ВидОперации);
			Конецесли;
		Конецесли;

		Если СтруктураДопПараметров.Свойство("АвансПокупателя") Тогда
			//Обработаем для включение в доходы
			ТаблицаОплат = СтруктураДопПараметров.АвансПокупателя;
			Если ТаблицаОплат.Количество() > 0 Тогда
				КорректировкаЗадолженностиУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, КУДиР, ВидДвиженияНакопления.Приход, ВидОперации);
			Конецесли;
		Конецесли;

	ИначеЕсли (ВидОперации = "ПрочееДДС") Тогда

		ПрочееДДС(ДокументСсылка, ДвиженияРегистров, КУДиР);

	КонецЕсли;

	// 2. По структуре ДвиженияРегистров, полученной ранее, сформировать движения документа
	Если ВидОперации = "НачислениеЗП" Тогда
		МоментДокумента = СтруктураШапкиДокумента.Ссылка.МоментВремени().Дата;
	ИначеЕсли НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.ДатаОплаты) Тогда
		МоментДокумента = ?(ОбщегоНазначения.ЕстьРеквизитОбъекта("ПериодРегистрации", МетаданныеДокумента), КонецМесяца(СтруктураШапкиДокумента.Ссылка.ПериодРегистрации), СтруктураШапкиДокумента.Ссылка.МоментВремени().Дата);
	Иначе
		МоментДокумента = КонецДня(СтруктураШапкиДокумента.ДатаОплаты);
	КонецЕсли;

	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСНДоходы Тогда
	Если ДвиженияРегистров <> Неопределено Тогда

		Если ДвиженияРегистров.ВзаиморасчетыРасход.Количество() > 0 Тогда

			ДокументОбъект = СтруктураШапкиДокумента.Объект;
			НаборДвижений = ДокументОбъект.Движения.ПрочиеРасчеты;
			ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
			// Заполним таблицу движений.
			ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ДвиженияРегистров.ВзаиморасчетыРасход, ТаблицаДвижений);
			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(ДокументСсылка.Организация, "Организация");
			ТаблицаДвижений.ЗаполнитьЗначения(МоментДокумента, "Период");
			ТаблицаДвижений.ЗаполнитьЗначения(ДокументСсылка, "Регистратор");
			ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
			ТаблицаДвижений.ЗаполнитьЗначения(ЭтапПроведения, "ЭтапПроведения");

			НаборДвижений.мПериод            = МоментДокумента;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			ДокументОбъект.Движения.ПрочиеРасчеты.ВыполнитьДвижения();

		КонецЕсли;

		Если ДвиженияРегистров.РасходыУСН.Количество() > 0 Тогда
			НаборЗаписей = РегистрыНакопления.РасходыПриУСН.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);

			ТаблицаДвижений = НаборЗаписей.ВыгрузитьКолонки();
			// Заполним таблицу движений.
			ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ДвиженияРегистров.РасходыУСН, ТаблицаДвижений);
			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(ДокументСсылка.Организация, "Организация");
			ТаблицаДвижений.ЗаполнитьЗначения(МоментДокумента, "Период");
			ТаблицаДвижений.ЗаполнитьЗначения(ДокументСсылка, "Регистратор");
			ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");

			Если ЭтапПроведения = 0 Тогда
				Для каждого ТекущееДвижение Из ТаблицаДвижений Цикл
					НоваяЗапись = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяЗапись, ТекущееДвижение);
				КонецЦикла;
				НаборЗаписей.Записать(Истина);
			Иначе
				НаборЗаписей.Прочитать();

				Инд=0;
				Пока Инд < НаборЗаписей.Количество() Цикл
					Если НЕ НаборЗаписей[Инд].ЭтапПроведения < ЭтапПроведения Тогда
						НаборЗаписей.Удалить(Инд);
					Иначе
						Инд=Инд+1;
					КонецЕсли;
				КонецЦикла;

				ТаблицаДвижений.ЗаполнитьЗначения(ЭтапПроведения, "ЭтапПроведения");
				Для каждого ТекущееДвижение Из ТаблицаДвижений Цикл
					НоваяЗапись = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяЗапись, ТекущееДвижение);
				КонецЦикла;
				НаборЗаписей.Записать(Истина);

			КонецЕсли;
		КонецЕсли;

		Если (ДвиженияРегистров.КУДиР.Количество() > 0)
				ИЛИ (КУДиР.Графа4 <> 0)
				ИЛИ (КУДиР.Графа5 <> 0)
				ИЛИ (КУДиР.Графа6 <> 0)
				ИЛИ (КУДиР.Графа7 <> 0)
				ИЛИ (КУДиР.ДоходЕНВД <> 0) Тогда

			ИмяДокумента = МетаданныеДокумента.Имя;
			ТаблицаРасходов = ДвиженияРегистров.КУДиР.Скопировать();
			Если ТаблицаРасходов.Колонки.Найти("ВидРасхода") = Неопределено Тогда
				ТаблицаРасходов.Колонки.Добавить("ВидРасхода");
			КонецЕсли;
			Если ТаблицаРасходов.Колонки.Найти("ОтражениеВУСН") = Неопределено Тогда
				ТаблицаРасходов.Колонки.Добавить("ОтражениеВУСН");
			КонецЕсли;
			Если ТаблицаРасходов.Колонки.Найти("Валюта") = Неопределено Тогда
				ТаблицаРасходов.Колонки.Добавить("Валюта");
				ТаблицаРасходов.ЗаполнитьЗначения(ВалютаРегламентированногоУчета, "Валюта");
			КонецЕсли;
			Если ТаблицаРасходов.Колонки.Найти("Сумма") = Неопределено Тогда
				ТаблицаРасходов.Колонки.Добавить("Сумма");
				ТаблицаРасходов.ЗаполнитьЗначения(0, "Сумма");
			КонецЕсли;
			Если ТаблицаРасходов.Колонки.Найти("НДС") = Неопределено Тогда
				ТаблицаРасходов.Колонки.Добавить("НДС");
				ТаблицаРасходов.ЗаполнитьЗначения(0, "НДС");
			КонецЕсли;

			КолвоЭлементовКоллекции = ТаблицаРасходов.Количество();
			Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл
				ЭлементКоллекции = ТаблицаРасходов[КолвоЭлементовКоллекции - ОбратныйИндекс];
				Если (ЭлементКоллекции.ОтражениеВУСН <> Перечисления.ОтражениеВУСН.Принимаются) И (ЭлементКоллекции.Сумма > 0) Тогда
					ТаблицаРасходов.Удалить(ЭлементКоллекции);
				ИначеЕсли ЭлементКоллекции.Валюта <> ВалютаРегламентированногоУчета Тогда
					СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ЭлементКоллекции.Валюта, СтруктураШапкиДокумента.Дата);
					ЭлементКоллекции.Сумма = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(ЭлементКоллекции.Сумма, ЭлементКоллекции.Валюта,
																ВалютаРегламентированногоУчета,
																СтруктураКурса.Курс, 1,
																СтруктураКурса.Кратность, 1);
					ЭлементКоллекции.НДС   = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(ЭлементКоллекции.НДС, ЭлементКоллекции.Валюта,
																ВалютаРегламентированногоУчета,
																СтруктураКурса.Курс, 1,
																СтруктураКурса.Кратность, 1);
				КонецЕсли;
			КонецЦикла;

			Если ВидОперации = "РаспределениеЕНВД" Тогда
				ДеревоРасходов = ТаблицуЗначенийВТаблицуСГруппировкой(ТаблицаРасходов, "", "Сумма, НДС", ВидОперации);
			ИначеЕсли ВидОперации = "ГТД" ИЛИ ВидОперации = "СписаниеТаможенныхПлатежей" Тогда
				ИменаГруппировок = "ВидРасхода,ЭтоТаможенныйНДС";
				ДеревоРасходов = ТаблицуЗначенийВТаблицуСГруппировкой(ТаблицаРасходов, ИменаГруппировок, "Сумма, НДС", ВидОперации);
			ИначеЕсли ТаблицаРасходов.Колонки.Найти("ДатаКорректировки") <> Неопределено Тогда // для корректировочных документов даты движений могут быть разные
				ИменаГруппировок = "ВидРасхода, ДатаКорректировки";
				Если ТаблицаРасходов.Колонки.Найти("ДополнительноеОписание") <> Неопределено Тогда
					ИменаГруппировок = ИменаГруппировок + ", ДополнительноеОписание";
				КонецЕсли; 
				ДеревоРасходов = ТаблицуЗначенийВТаблицуСГруппировкой(ТаблицаРасходов, ИменаГруппировок, "Сумма, НДС", ВидОперации);	
			ИначеЕсли НЕ ТаблицаРасходов.Колонки.Найти("КлючУникальности") = НЕОПРЕДЕЛЕНО Тогда
				ИменаГруппировок = "ВидРасхода, КлючУникальности";
				Если ТаблицаРасходов.Колонки.Найти("ДополнительноеОписание") <> Неопределено Тогда
					ИменаГруппировок = ИменаГруппировок + ", ДополнительноеОписание";
				КонецЕсли;
				ДеревоРасходов = ТаблицуЗначенийВТаблицуСГруппировкой(ТаблицаРасходов, ИменаГруппировок, "Сумма, НДС", ВидОперации);
			Иначе
				ДеревоРасходов = ТаблицуЗначенийВТаблицуСГруппировкой(ТаблицаРасходов, "ВидРасхода", "Сумма, НДС", ВидОперации);
			КонецЕсли;

			ДеревоРасходов.Колонки.Добавить("Графа4", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
			ДеревоРасходов.Колонки.Добавить("Графа5", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
			ДеревоРасходов.Колонки.Добавить("Графа6", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
			ДеревоРасходов.Колонки.Добавить("ДоходЕНВД", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
			ДеревоРасходов.Колонки.Добавить("Описание");

			Если ДеревоРасходов.Итог("Сумма") <> 0 Тогда

				К4 = КУДиР.Графа4 / ДеревоРасходов.Итог("Сумма");
				К5 = КУДиР.Графа5 / ДеревоРасходов.Итог("Сумма");
				К6 = КУДиР.Графа6 / ДеревоРасходов.Итог("Сумма");
				КЕ = КУДиР.ДоходЕНВД / ДеревоРасходов.Итог("Сумма");
				Для каждого Расход Из ДеревоРасходов Цикл

					Если Расход.Сумма > 0 Тогда
						Описание = "Признаны";
					Иначе
						Описание = "Сторнированы";
					КонецЕсли;

					Расход.Строки.Колонки.Добавить("Графа4", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
					Расход.Строки.Колонки.Добавить("Графа5", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
					Расход.Строки.Колонки.Добавить("Графа6", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
					Расход.Строки.Колонки.Добавить("ДоходЕНВД", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
					Расход.Строки.Колонки.Добавить("Описание");

					Если ВидОперации = "РаспределениеЕНВД" Тогда
						Описание = Описание + " расходы по результатам распределения (УСН/ЕНВД), ";
					ИначеЕсли Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.Номенклатура Тогда
						Если ВидОперации = "Реализация" Тогда
							Описание = Описание + " расходы на приобретение товаров, ";
						Иначе
							Описание = Описание + " расходы на приобретение ТМЦ, ";
						Конецесли;
					ИначеЕсли Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.ДопРасходы Тогда
						Описание = Описание + " транспортно-заготовительные расходы, ";
					ИначеЕсли Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.ТаможенныеПлатежи Тогда
						Если Расход.ЭтоТаможенныйНДС Тогда
							Описание = Описание + " расходы на уплату НДС при ввозе на территорию РФ, ";
						Иначе
							Описание = Описание + " расходы на уплату таможенных платежей, ";
						КонецЕсли;
					ИначеЕсли Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.Услуги Тогда
						Описание = Описание + " расходы на услуги сторонних организаций, ";
					ИначеЕсли Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.РБП Тогда
						Описание = Описание + " РБП, ";
					ИначеЕсли Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.Зарплата Тогда
						Описание = Описание + " расходы на оплату труда, ";
					ИначеЕсли Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.Налоги Тогда
                       	Описание = Описание + " расходы на уплату налогов (взносов), ";
						
						Если ДеревоРасходов.Колонки.Найти("КлючУникальности") <> НЕОПРЕДЕЛЕНО 
							И ЗначениеЗаполнено(Расход.КлючУникальности) Тогда
							Описание = Описание + " счет " + Расход.КлючУникальности.Код + " """ + Расход.КлючУникальности.Наименование + """ , ";
						КонецЕсли;

					ИначеЕсли Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.НМА Тогда
						Описание = Описание + " расходы на приобретение НМА, ";
					ИначеЕсли Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.НДС Тогда
						Описание = Описание + " расходы на уплату НДС, предъявленного поставщиком, ";
					Иначе
						Описание = Описание + " расходы, ";
					КонецЕсли;
					
					Если ВидОперации = "КорректировкаПоступления" Или ВидОперации = "КорректировкаРеализации" Тогда							
						Если ДеревоРасходов.Колонки.Найти("ДатаКорректировки") <> Неопределено Тогда								
							Если ЗначениеЗаполнено(Расход.ДатаКорректировки) И Год(Расход.ДатаКорректировки) < Год(МоментДокумента) Тогда								
								Описание = Описание + "признанные в прошлом периоде, "								
							КонецЕсли; 
						КонецЕсли; 
					КонецЕсли;
					
					Расход.Описание =  Лев(КУДиР.Содержание + Описание,(СтрДлина(КУДиР.Содержание + Описание)-2)) + ".";
					
					// если есть - добавим дополнительное описание
					Если ДеревоРасходов.Колонки.Найти("ДополнительноеОписание") <> Неопределено Тогда								
						Если ЗначениеЗаполнено(Расход.ДополнительноеОписание) Тогда								
							Расход.Описание = Расход.Описание + " " + Расход.ДополнительноеОписание;							
						КонецЕсли; 
					КонецЕсли;
					
					Если Расход.Сумма > 0 Тогда
						Расход.Графа4 = Мин(К4* Расход.Сумма, Расход.Сумма);
						Расход.Графа5 = Мин(К5* Расход.Сумма, Расход.Сумма);
						Расход.Графа6 = Мин(К6* Расход.Сумма, Расход.Сумма);
						Расход.ДоходЕНВД = Мин(КЕ* Расход.Сумма, Расход.Сумма);
					Иначе
						Расход.Графа4 = Макс(К4* Расход.Сумма, Расход.Сумма);
						Расход.Графа5 = Макс(К5* Расход.Сумма, Расход.Сумма);
						Расход.Графа6 = Макс(К6* Расход.Сумма, Расход.Сумма);
						Расход.ДоходЕНВД = Макс(КЕ* Расход.Сумма, Расход.Сумма);
					КонецЕсли;

				КонецЦикла;
				Если ДеревоРасходов.Количество() > 0 Тогда
					ДеревоРасходов[0].Графа4 = ДеревоРасходов[0].Графа4 + (КУДиР.Графа4 - ДеревоРасходов.Итог("Графа4"));
					ДеревоРасходов[0].Графа5 = ДеревоРасходов[0].Графа5 + (КУДиР.Графа5 - ДеревоРасходов.Итог("Графа5"));
					ДеревоРасходов[0].Графа6 = ДеревоРасходов[0].Графа6 + (КУДиР.Графа6 - ДеревоРасходов.Итог("Графа6"));
					ДеревоРасходов[0].ДоходЕНВД = ДеревоРасходов[0].ДоходЕНВД + (КУДиР.ДоходЕНВД - ДеревоРасходов.Итог("ДоходЕНВД"));
				КонецЕсли;
			КонецЕсли;

			Если (ДеревоРасходов.Количество() = 0)
				И ((КУДир.Графа4 <> 0) ИЛИ (КУДир.Графа5 <> 0) ИЛИ (КУДир.Графа6 <> 0) ИЛИ (КУДир.Графа7 <> 0) ИЛИ (КУДир.ДоходЕНВД <> 0)) Тогда
				Запись = ДеревоРасходов.Добавить();
				Запись.Описание = КУДиР.Содержание;
				Запись.Графа4	= КУДиР.Графа4;
				Запись.Графа5	= КУДиР.Графа5;
				Запись.Графа6	= КУДиР.Графа6;
				Запись.Сумма	= КУДиР.Графа7;
				Запись.НДС		= КУДиР.НДС;
				Запись.ДоходЕНВД= КУДиР.ДоходЕНВД;
			КонецЕсли;

			ДокументОбъект = СтруктураШапкиДокумента.Объект;
			НаборЗаписей = ДокументОбъект.Движения.КнигаУчетаДоходовИРасходов;

			Инд=0;
			Пока Инд < НаборЗаписей.Количество() Цикл
				Если НЕ НаборЗаписей[Инд].ЭтапПроведения < ЭтапПроведения Тогда
					НаборЗаписей.Удалить(Инд);
				Иначе
					Инд=Инд+1;
				КонецЕсли;
			КонецЦикла;

			Если ДокументОбъект.Движения.Найти("РасшифровкаКУДиР") <> Неопределено Тогда
				НаборЗаписейРасшифровки = ДокументОбъект.Движения.РасшифровкаКУДиР;
				Инд=0;
				Пока Инд < НаборЗаписейРасшифровки.Количество() Цикл
					Если НЕ НаборЗаписейРасшифровки[Инд].ЭтапПроведения < ЭтапПроведения Тогда
						НаборЗаписейРасшифровки.Удалить(Инд);
					Иначе
						Инд=Инд+1;
					КонецЕсли;
				КонецЦикла;
			Иначе
				НаборЗаписейРасшифровки = Неопределено;
			КонецЕсли;

			ОтражатьРазнымиПериодами = (ДеревоРасходов.Колонки.Найти("ДатаКорректировки") <> Неопределено);
			
			Для каждого Расход Из ДеревоРасходов Цикл
				ЗаписьКУДиР = НаборЗаписей.Добавить();
				ЗаписьКУДиР.Период = МоментДокумента;
				Если ОтражатьРазнымиПериодами Тогда						
					Если ЗначениеЗаполнено(Расход.ДатаКорректировки) Тогда
						ЗаписьКУДиР.Период = Расход.ДатаКорректировки;
					КонецЕсли; 
				КонецЕсли;
				ЗаписьКУДиР.Регистратор = ДокументСсылка;
				ЗаписьКУДиР.Активность = Истина;
				ЗаписьКУДиР.Организация = ДокументСсылка.Организация;
				ЗаписьКУДиР.Содержание = Расход.Описание;
				ЗаписьКУДиР.ВидРасхода = Расход.ВидРасхода;
				ЗаписьКУДиР.СтрокаДокумента = НаборЗаписей.Количество();
				ЗаписьКУДиР.РеквизитыПервичногоДокумента = РеквизитыПервичногоДокумента(ДокументСсылка);
				ЗаписьКУДиР.Графа4 	= Расход.Графа4;
				ЗаписьКУДиР.Графа5 	= Расход.Графа5;
				ЗаписьКУДиР.ДоходЕНВД = Расход.ДоходЕНВД;
				ЗаписьКУДиР.Графа6 	= Расход.Графа6;
				ЗаписьКУДиР.Графа7 	= Расход.Сумма;
				ЗаписьКУДиР.НДС		= Расход.НДС;
				ЗаписьКУДиР.ЭтапПроведения = ЭтапПроведения;
				Если (ЗначениеЗаполнено(Расход.ВидРасхода)) или (ВидОперации = "РаспределениеЕНВД") Тогда
					ПараметрыЗаписиРасшифровки = СтруктураШапкиДокумента;
					Если ОтражатьРазнымиПериодами Тогда						
						Если ЗначениеЗаполнено(Расход.ДатаКорректировки) И Год(Расход.ДатаКорректировки) < Год(МоментДокумента) Тогда
							ПараметрыЗаписиРасшифровки = ?(РеквизитыКорректировки = Неопределено, СтруктураШапкиДокумента, РеквизитыКорректировки);
						КонецЕсли; 
					КонецЕсли; 
					СформироватьЗаписьРасшифровки(ПараметрыЗаписиРасшифровки, НаборЗаписейРасшифровки, Расход, ЗаписьКУДиР, ВидОперации);
				КонецЕсли;
			КонецЦикла;

			НаборЗаписей.Записать(Истина);
			
			Если ДокументОбъект.Движения.Найти("РасшифровкаКУДиР") <> Неопределено Тогда
				НаборЗаписейРасшифровки.Записать(Истина);
			КонецЕсли;

		КонецЕсли;

	ИначеЕсли (КУДиР.Графа4 <> 0)
			ИЛИ (КУДиР.Графа5 <> 0)
			ИЛИ (КУДиР.Графа6 <> 0)
			ИЛИ (КУДиР.Графа7 <> 0) Тогда

		ДокументОбъект = СтруктураШапкиДокумента.Объект;

		Если ЭтапПроведения = 0 Тогда
			НаборЗаписей = ДокументОбъект.Движения.КнигаУчетаДоходовИРасходов;
			ЗаписьКУДиР = НаборЗаписей.Добавить();
			ЗаписьКУДиР.Период = МоментДокумента;
			ЗаписьКУДиР.Регистратор = ДокументСсылка;
			ЗаписьКУДиР.Активность = Истина;
			ЗаписьКУДиР.Организация = ДокументСсылка.Организация;
			ЗаписьКУДиР.Содержание = КУДиР.Содержание;
			ЗаписьКУДиР.РеквизитыПервичногоДокумента = РеквизитыПервичногоДокумента(ДокументСсылка);
			ЗаписьКУДиР.Графа4 = КУДиР.Графа4;
			ЗаписьКУДиР.Графа5 = КУДиР.Графа5;
			ЗаписьКУДиР.Графа6 = КУДиР.Графа6;
			ЗаписьКУДиР.Графа7 = КУДиР.Графа7;
			ЗаписьКУДиР.НДС	   = КУДиР.НДС;
			ЗаписьКУДиР.ДоходЕНВД = КУДиР.ДоходЕНВД;
		Иначе
			НаборЗаписей = ДокументОбъект.Движения.КнигаУчетаДоходовИРасходов;
			Инд=0;
			Пока Инд < НаборЗаписей.Количество() Цикл
				Если НЕ НаборЗаписей[Инд].ЭтапПроведения < ЭтапПроведения Тогда
					НаборЗаписей.Удалить(Инд);
				Иначе
					Инд=Инд+1;
				КонецЕсли;
			КонецЦикла;
			ЗаписьКУДиР = НаборЗаписей.Добавить();
			ЗаписьКУДиР.Период = МоментДокумента;
			ЗаписьКУДиР.Регистратор = ДокументСсылка;
			ЗаписьКУДиР.Активность = Истина;
			ЗаписьКУДиР.Организация = ДокументСсылка.Организация;
			ЗаписьКУДиР.Содержание = КУДиР.Содержание;
			ЗаписьКУДиР.РеквизитыПервичногоДокумента = РеквизитыПервичногоДокумента(ДокументСсылка);
			ЗаписьКУДиР.Графа4 = КУДиР.Графа4;
			ЗаписьКУДиР.Графа5 = КУДиР.Графа5;
			ЗаписьКУДиР.Графа6 = КУДиР.Графа6;
			ЗаписьКУДиР.Графа7 = КУДиР.Графа7;
			ЗаписьКУДиР.НДС	   = КУДиР.НДС;
			ЗаписьКУДиР.ДоходЕНВД = КУДиР.ДоходЕНВД;
			ЗаписьКУДиР.ЭтапПроведения = ЭтапПроведения;
		КонецЕсли;

		НаборЗаписей.Записать(Истина);
		
	КонецЕсли;
КонецЕсли;
Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСНПатент И ДвиженияКУДиРПатент.Количество() > 0 Тогда
	
	НаборЗаписей = СтруктураШапкиДокумента.Объект.Движения.КнигаУчетаДоходовПатент;
	
	Инд=0;
	Пока Инд < НаборЗаписей.Количество() Цикл
		Если НЕ НаборЗаписей[Инд].ЭтапПроведения < ЭтапПроведения Тогда
			НаборЗаписей.Удалить(Инд);
		Иначе
			Инд=Инд+1;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаПатент Из ДвиженияКУДиРПатент Цикл
		
		Если ЗначениеЗаполнено(СтрокаПатент.Патент) И (СтрокаПатент.Патент.ДатаНачала > МоментДокумента ИЛИ КонецДня(СтрокаПатент.Патент.ДатаОкончания) < МоментДокумента) Тогда
			
			Ошибка = ?(СтрокаПатент.Патент.ДатаНачала > МоментДокумента, " период действия патента еще не наступил.", " истек период действия патента.");
			ТекстОшибки = НСтр("ru='Доходы, отнесенные к деятельности на патенте ""%Патент%"" , не могут быть отражены - ""%Ошибка%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Патент%", СтрокаПатент.Патент);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Ошибка%", Ошибка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДокументСсылка, , , );
			Продолжить;
			
		КонецЕсли;
		
		ЗаписьКУДиР = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьКУДиР, СтрокаПатент);
		
		ЗаписьКУДиР.Период = МоментДокумента;
		ЗаписьКУДиР.Регистратор = ДокументСсылка;
		ЗаписьКУДиР.Активность = Истина;
		ЗаписьКУДиР.Организация = ДокументСсылка.Организация;
		ЗаписьКУДиР.РеквизитыПервичногоДокумента = РеквизитыПервичногоДокумента(ДокументСсылка);
		ЗаписьКУДиР.ЭтапПроведения = ЭтапПроведения;
		
	КонецЦикла;
	
	НаборЗаписей.Записать(Истина);
	
КонецЕсли;

КонецПроцедуры

Процедура СформироватьДвиженияКУДиР(
				СтруктураШапкиДокумента,
				ТаблицаОплат,
				СуммаСторноРасходов,
				СуммаПризнанияНДС = 0,
				СуммаСторноНДС = 0,
				Движения)

	ДвиженияКУДиР = Движения.КУДиР;

	ДвиженияКУДиР.Очистить();
	
	ТаблицаВзаиморасчеты = ТаблицаОплат.Скопировать();

	Если СуммаПризнанияНДС <> 0 Тогда
		СтрокаКниги = ДвиженияКУДиР.Добавить();
		СтрокаКниги.Организация     = СтруктураШапкиДокумента.Организация;
		СтрокаКниги.СтрокаДокумента = 0;
		СтрокаКниги.Период          = СтруктураШапкиДокумента.Дата;
		СтрокаКниги.Содержание      = "При возврате от покупателя признаны расходы, сторнированные не основании реализации (признаны расходы на уплату НДС).";
		СтрокаКниги.Графа7          = СуммаПризнанияНДС;
		СтрокаКниги.НДС             = 0;
		СтрокаКниги.РеквизитыПервичногоДокумента = НалоговыйУчетУСН.РеквизитыПервичногоДокумента(СтруктураШапкиДокумента.Регистратор);
	КонецЕсли;

	Если СуммаСторноРасходов <> 0 Тогда
		СтрокаКниги = ДвиженияКУДиР.Добавить();
		СтрокаКниги.Организация     = СтруктураШапкиДокумента.Организация;
		СтрокаКниги.СтрокаДокумента = 0;
		СтрокаКниги.Период          = СтруктураШапкиДокумента.Дата;
		СтрокаКниги.Содержание      = "Расходы уменьшены на стоимость товаров, возвращенных покупателем.";
		СтрокаКниги.Графа7          = - СуммаСторноРасходов;
		СтрокаКниги.НДС             = - СуммаСторноНДС;
		СтрокаКниги.РеквизитыПервичногоДокумента = НалоговыйУчетУСН.РеквизитыПервичногоДокумента(СтруктураШапкиДокумента.Регистратор);
	КонецЕсли;

	СуммаВзаиморасчетов = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
		СтруктураШапкиДокумента.ИтогоВзаиморасчеты,
		СтруктураШапкиДокумента.ВалютаДокумента,
		СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВзаиморасчетов,
		СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВзаиморасчетов);

	СуммаЕНВД = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
		СтруктураШапкиДокумента.ИтогоЕНВД,
		СтруктураШапкиДокумента.ВалютаДокумента,
		СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВзаиморасчетов,
		СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВзаиморасчетов);

	СуммаКомиссии = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
		СтруктураШапкиДокумента.ИтогоКомиссия,
		СтруктураШапкиДокумента.ВалютаДокумента,
		СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВзаиморасчетов,
		СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВзаиморасчетов);

	Для Каждого СтрокаРД Из ТаблицаВзаиморасчеты Цикл
		Если НЕ СтрокаРД.ДокументРасчетов = СтруктураШапкиДокумента.Ссылка Тогда
			СуммаЕНВД     = СуммаЕНВД - Мин(СуммаЕНВД, СтрокаРД.СуммаВзаиморасчетовЕНВД);
			СуммаКомиссии = СуммаКомиссии - Мин(СуммаКомиссии, СтрокаРД.СуммаВзаиморасчетовКомитента);
		КонецЕсли;
	КонецЦикла;

	Кратность                  = ?(СтруктураШапкиДокумента.КратностьВзаиморасчетов = 0, 1, СтруктураШапкиДокумента.КратностьВзаиморасчетов);
	СуммаКорректировкиЕНВД     = Окр(СуммаЕНВД * СтруктураШапкиДокумента.КурсВзаиморасчетов/Кратность, 2, 1);
	СуммаКорректировкиКомиссии = Окр(СуммаКомиссии * СтруктураШапкиДокумента.КурсВзаиморасчетов/Кратность, 2, 1);

	Если СуммаКорректировкиЕНВД > 0 Тогда
		Если СуммаСторноРасходов <> 0 Тогда
			СтрокаКниги.Графа5     = СуммаКорректировкиЕНВД;
			СтрокаКниги.Содержание = СтрокаКниги.Содержание + " Задолженность по возврату товаров ЕНВД " + СуммаКорректировкиЕНВД + " руб. определена как аванс, ранее не включенный в доходы. ";
			СтрокаКниги.ДоходЕНВД  = - СуммаКорректировкиЕНВД;
		Иначе
			СтрокаКниги = ДвиженияКУДиР.Добавить();
			СтрокаКниги.Организация     = СтруктураШапкиДокумента.Организация;
			СтрокаКниги.СтрокаДокумента = 0;
			СтрокаКниги.Период          = СтруктураШапкиДокумента.Период;
			СтрокаКниги.Содержание      = "Задолженность по возврату товаров ЕНВД " + СуммаКорректировкиЕНВД + " руб. определена как аванс, ранее не включенный в доходы. ";
			СтрокаКниги.Графа5          = СуммаКорректировкиЕНВД;
			СтрокаКниги.ДоходЕНВД       = - СуммаКорректировкиЕНВД;
			СтрокаКниги.РеквизитыПервичногоДокумента = НалоговыйУчетУСН.РеквизитыПервичногоДокумента(СтруктураШапкиДокумента.Регистратор);
		КонецЕсли;
	КонецЕсли;
	Если СуммаКорректировкиКомиссии > 0 Тогда
		Если СуммаСторноРасходов <> 0 Тогда
			СтрокаКниги.Графа5     = СуммаКорректировкиКомиссии;
			СтрокаКниги.Содержание = СтрокаКниги.Содержание + " Задолженность по возврату комиссионных товаров " + СуммаКорректировкиКомиссии + " руб. определена как аванс, ранее не включенный в доходы. ";
		Иначе
			СтрокаКниги  = ДвиженияКУДиР.Добавить();
			СтрокаКниги.Организация     = СтруктураШапкиДокумента.Организация;
			СтрокаКниги.СтрокаДокумента = 0;
			СтрокаКниги.Период          = СтруктураШапкиДокумента.Период;
			СтрокаКниги.Содержание      = "Задолженность по возврату комиссионных товаров " + СуммаКорректировкиКомиссии + " руб. определена как аванс, ранее не включенный в доходы. ";
			СтрокаКниги.Графа5          = СуммаКорректировкиКомиссии;
			СтрокаКниги.РеквизитыПервичногоДокумента = НалоговыйУчетУСН.РеквизитыПервичногоДокумента(СтруктураШапкиДокумента.Регистратор);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

//Определяет по виду документов вид движения и вызывает основную процедуру
//
Процедура СформироватьДвиженияУСН(ДокументОбъект, СтруктураДопПараметров = Неопределено, ЭтоОбъект = Истина) Экспорт

	Если НЕ УчетнаяПолитика.ПрименяетсяУСН(ДокументОбъект.Организация, ДокументОбъект.Дата)
		И НЕ УчетнаяПолитика.ПрименяетсяУСНПатент(ДокументОбъект.Организация, ДокументОбъект.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоОбъект Тогда
		
		Если ДокументОбъект.Движения.Найти("ПрочиеРасчеты") <> Неопределено Тогда
			ДокументОбъект.Движения.ПрочиеРасчеты.Записывать = Истина;
		КонецЕсли;
		
		ДокументСсылка = ДокументОбъект.Ссылка;
		
		//Получение реквизитов шапки
		СтруктураШапкиДокумента = Новый Структура("Ссылка, Регистратор, Объект, ВидДокумента, Дата, Организация, ДатаОплаты, Оплачено, ОтражатьВНалоговомУчете, ОтражатьВУправленческомУчете",
		ДокументСсылка,
		ДокументСсылка,
		ДокументОбъект,
		ДокументСсылка.Метаданные().Имя,
		ДокументСсылка.Дата);
		
		МетаданныеДокумента = ДокументСсылка.Метаданные().Реквизиты;
		Для Каждого Реквизит из СтруктураШапкиДокумента Цикл
			Если МетаданныеДокумента.Найти(Реквизит.Ключ)=Неопределено тогда
				Продолжить;
			КонецЕсли;
			СтруктураШапкиДокумента.Вставить(Реквизит.Ключ,ДокументСсылка[Реквизит.Ключ]);
		КонецЦикла;
		
	Иначе
		СтруктураШапкиДокумента = Новый Структура("Ссылка, Регистратор, Объект, ВидДокумента, Дата, Организация, ДатаОплаты, Оплачено, ОтражатьВНалоговомУчете, ОтражатьВУправленческомУчете",
		ДокументОбъект.Ссылка,
		ДокументОбъект.Ссылка,
		ДокументОбъект,
		ДокументОбъект.Имя,
		ДокументОбъект.Дата,
		ДокументОбъект.Организация);
		
		ДокументСсылка = ДокументОбъект.Ссылка;
		
		ДокументОбъект.Движения.РасходыПриУСН.Записывать = Ложь;
		ДокументОбъект.Движения.ПрочиеРасчеты.Записывать = Истина;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента["ДатаОплаты"]) тогда
		СтруктураШапкиДокумента.Вставить("ДатаОплаты",СтруктураШапкиДокумента.Дата);
	Иначе
		//Особый контроль для документов оплаты
		СтруктураШапкиДокумента.Вставить("ДатаОплаты",КонецДня(СтруктураШапкиДокумента["ДатаОплаты"]));
		Если СтруктураШапкиДокумента.ВидДокумента = "ПриходныйКассовыйОрдер" или
			СтруктураШапкиДокумента.ВидДокумента = "РасходныйКассовыйОрдер" Тогда
		//Оплачено или не отражается в упр. учете
			Если СтруктураШапкиДокумента.Оплачено=Истина или СтруктураШапкиДокумента.ОтраженоВОперУчете=Ложь Тогда
				//Формируются движения по регламентированному учету
			Иначе
				//Документ по регламентированному учету не проводится
				Возврат;
			КонецЕсли;
		ИначеЕсли СтруктураШапкиДокумента.ВидДокумента = "ПоступлениеНаРасчетныйСчет" или
			СтруктураШапкиДокумента.ВидДокумента = "СписаниеСРасчетногоСчета" Тогда

			СтруктураШапкиДокумента.Вставить("Оплачено", Истина);
			//Формируются движения по регламентированному учету
		Иначе
			Если СтруктураШапкиДокумента.Оплачено=Ложь тогда
				//Документ по регламентированному учету не проводится
				Возврат;
			КонецЕсли;
		КонецЕсли;
	Конецесли;

	ПроводитьПоПартиям = Истина;
	СтруктураШапкиДокумента.Вставить("ПроводитьПоПартиям",ПроводитьПоПартиям);
	Отказ = Ложь;
	ВыделятьНДСУСН = УчетнаяПолитика.ПорядокПризнанияРасходовПоНДС(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата) = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику;

	Если УчетнаяПолитика.ПрименяетсяУСНДоходы(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата) Тогда
		СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСН",			Ложь);
		СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСНДоходы",	Истина);
	ИначеЕсли УчетнаяПолитика.ПрименяетсяУСН(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата) Тогда
		СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСН",			Истина);
		СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСНДоходы",	Ложь);
	Иначе
		СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСН",			Ложь);
		СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСНДоходы",	Ложь);
	КонецЕсли;
	СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСНПатент",	Истина);

	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АвансовыйОтчет") И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда

		ОтразитьВУСН(ДокументСсылка, "Оплата", СтруктураШапкиДокумента,1 , СтруктураДопПараметров);
		ОтразитьВУСН(ДокументСсылка, "Поступление", СтруктураШапкиДокумента,2);

	ИначеЕсли
		ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет") ИЛИ
		ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") ИЛИ
		ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") ИЛИ
		ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") ИЛИ
		ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеДенежныхДокументов") ИЛИ
		ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ВыдачаДенежныхДокументов") Тогда

		ОтразитьВУСН(ДокументСсылка, ,СтруктураШапкиДокумента, , СтруктураДопПараметров);

	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") ИЛИ
		ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПередачаНМА") ИЛИ
		ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОказаниеУслуг") ИЛИ
		ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПередачаОС") ИЛИ
		ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РеализацияУслугПоПереработке") ИЛИ
		ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")  Тогда

		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")
			И ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийОтчетКомитентуОПродажах.ОтчетОПродажах
			И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСНДоходы Тогда
			
			ОтразитьВУСН(ДокументСсылка, "ПрочееДДС", СтруктураШапкиДокумента, , );
			
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПередачаОС") И ДокументСсылка.ПравоСобственностиПереходитПослеГосРегистрации Тогда
			// При передаче ОС без перехода права собственности документ в УСН не отражается.
		Иначе
			ОтразитьВУСН(ДокументСсылка, "РеализацияУслуг", СтруктураШапкиДокумента, , СтруктураДопПараметров);
		КонецЕсли;

	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда

		Если ДокументСсылка.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			ОтразитьВУСН(ДокументСсылка, "ВозвратСРеализации", СтруктураШапкиДокумента, 0, СтруктураДопПараметров);
		Иначе
			ОтразитьВУСН(ДокументСсылка, "ВозвратОтПокупателя", СтруктураШапкиДокумента, 1, СтруктураДопПараметров);
		КонецЕсли;

	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда

		ОтразитьВУСН(ДокументСсылка, "ВозвратПоставщику", СтруктураШапкиДокумента, , СтруктураДопПараметров);

	ИначеЕсли (ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.НачислениеЗарплаты")
				ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтражениеЗарплатыВУчете")
				ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтражениеЗарплатыВБухучете")
				ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.Отпуск")
				ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.БольничныйЛист"))
				И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда

		ОтразитьВУСН(ДокументСсылка, "НачислениеЗП", СтруктураШапкиДокумента, , СтруктураДопПараметров);

	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда

		Если НЕ ДокументСсылка.УдержатьВознаграждение Тогда
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
				СтруктураДопПараметров.Вставить("ТаблицаРасчетов", СтруктураДопПараметров.ТаблицаРасчетовПоПриобретению);
				ОтразитьВУСН(ДокументСсылка, "УслугаКомиссионера", СтруктураШапкиДокумента,1, СтруктураДопПараметров);
			КонецЕсли;
			СтруктураДопПараметров.Вставить("ТаблицаРасчетов", СтруктураДопПараметров.ТаблицаРасчетовПоРеализации);
			ОтразитьВУСН(ДокументСсылка, "РеализацияКомиссионером", СтруктураШапкиДокумента, 2, СтруктураДопПараметров);
		Иначе
			ОтразитьВУСН(ДокументСсылка, "ЗачетВознагражденияКомиссионера", СтруктураШапкиДокумента,0,СтруктураДопПараметров);
			СтруктураДопПараметров.Вставить("ТаблицаРасчетов", СтруктураДопПараметров.ТаблицаРасчетовПоРеализации);
			Если ВыделятьНДСУСН И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
				ОтразитьВУСН(ДокументСсылка, "ЗачетВознагражденияКомиссионераНДС", СтруктураШапкиДокумента,1,СтруктураДопПараметров);
				ОтразитьВУСН(ДокументСсылка, "РеализацияКомиссионером", СтруктураШапкиДокумента,2,СтруктураДопПараметров);
			Иначе
				ОтразитьВУСН(ДокументСсылка, "РеализацияКомиссионером", СтруктураШапкиДокумента,1,СтруктураДопПараметров);
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") Тогда

		ОтразитьВУСН(ДокументСсылка, "РеализацияКомиссионером", СтруктураШапкиДокумента, 1, СтруктураДопПараметров);

	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда

		ОтразитьВУСН(ДокументСсылка, "Розница", СтруктураШапкиДокумента,,СтруктураДопПараметров);

	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПередачаТоваров") И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда

		Если ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку Тогда
			ОтразитьВУСН(ДокументСсылка, "ВПереработку", СтруктураШапкиДокумента,,СтруктураДопПараметров);
		КонецЕсли;

	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеИзПереработки") И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда

		ОтразитьВУСН(ДокументСсылка, "УслугаПоПереработке", СтруктураШапкиДокумента, 1, СтруктураДопПараметров);

		СтруктураДопПараметров.Вставить("ТаблицаТМЦ", СтруктураДопПараметров.ТаблицаМатериалов);
		ОтразитьВУСН(ДокументСсылка, "ИзПереработки", СтруктураШапкиДокумента , 2, СтруктураДопПараметров);

		СтруктураДопПараметров.Вставить("ТаблицаТМЦ", СтруктураДопПараметров.ТаблицаВозвращенныхМатериалов);
		ОтразитьВУСН(ДокументСсылка, "ВозвратИзПереработки", СтруктураШапкиДокумента , 3, СтруктураДопПараметров);

	ИначеЕсли (ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеДопРасходов")
			ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеНМА")) И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда

		ОтразитьВУСН(ДокументСсылка, "Поступление", СтруктураШапкиДокумента, 1, СтруктураДопПараметров);

	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ГТДИмпорт") Тогда

		ОтразитьВУСН(ДокументСсылка, "ГТД", СтруктураШапкиДокумента, 1, );

	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда

		Если НЕ ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
			ОтразитьВУСН(ДокументСсылка, "Поступление", СтруктураШапкиДокумента, 1, СтруктураДопПараметров);
		КонецЕсли;

	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.КорректировкаПоступления") И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		
		ОтразитьВУСН(ДокументСсылка, "КорректировкаПоступления", СтруктураШапкиДокумента, 1, СтруктураДопПараметров);
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда

		Если (ДокументСсылка.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем)
				И (НЕ ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности) Тогда
			ОтразитьВУСН(ДокументСсылка, "Реализация", СтруктураШапкиДокумента,,СтруктураДопПараметров);
		ИначеЕсли СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
			ОтразитьВУСН(ДокументСсылка, "НаРеализацию", СтруктураШапкиДокумента,,СтруктураДопПараметров);
		КонецЕсли;

	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.КорректировкаРеализации") И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		
		ОтразитьВУСН(ДокументСсылка, "КорректировкаРеализации", СтруктураШапкиДокумента, , СтруктураДопПараметров);
		
	ИначеЕсли (ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.СписаниеТоваров")
			ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПередачаМатериаловВЭксплуатацию")
			ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ТребованиеНакладная"))
			И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда

		ОтразитьВУСН(ДокументСсылка, "Списание", СтруктураШапкиДокумента,,СтруктураДопПараметров);

	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену") И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда

		ОтразитьВУСН(ДокументСсылка, "Списание", СтруктураШапкиДокумента, 1,СтруктураДопПараметров);

	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПеремещениеТоваров") И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда

		ОтразитьВУСН(ДокументСсылка, "Перемещение", СтруктураШапкиДокумента,,СтруктураДопПараметров);

	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.КомплектацияНоменклатуры") И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда

		ОтразитьВУСН(ДокументСсылка, "Комплектация", СтруктураШапкиДокумента,,СтруктураДопПараметров);

	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.КорректировкаДолга") Тогда
		
		СчетаДтКт = ДокументСсылка.СчетДт = ДокументСсылка.СчетКт;
		
		ЕстьСубконтоКонтрагентыПоДт = Ложь;
		Если ТипЗнч(ДокументСсылка.СубконтоДт1) = Тип("СправочникСсылка.Контрагенты")
			или ТипЗнч(ДокументСсылка.СубконтоДт2) = Тип("СправочникСсылка.Контрагенты")
			или ТипЗнч(ДокументСсылка.СубконтоДт3) = Тип("СправочникСсылка.Контрагенты") Тогда
			ЕстьСубконтоКонтрагентыПоДт = Истина;
		КонецЕсли;
		
		ЕстьСубконтоДоговорыКонтрагентовПоДт = Ложь;
		Если ТипЗнч(ДокументСсылка.СубконтоДт1) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
			или ТипЗнч(ДокументСсылка.СубконтоДт2) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
			или ТипЗнч(ДокументСсылка.СубконтоДт3) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			ЕстьСубконтоДоговорыКонтрагентовПоДт = Истина;
		КонецЕсли;
		
		ЕстьСубконтоКонтрагентыПоКт = Ложь;
		Если ТипЗнч(ДокументСсылка.СубконтоКт1) = Тип("СправочникСсылка.Контрагенты")
			или ТипЗнч(ДокументСсылка.СубконтоКт2) = Тип("СправочникСсылка.Контрагенты")
			или ТипЗнч(ДокументСсылка.СубконтоКт3) = Тип("СправочникСсылка.Контрагенты") Тогда
			ЕстьСубконтоКонтрагентыПоКт = Истина;
		КонецЕсли;
		
		ЕстьСубконтоДоговорыКонтрагентовПоКт = Ложь;
		Если ТипЗнч(ДокументСсылка.СубконтоКт1) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
			или ТипЗнч(ДокументСсылка.СубконтоКт2) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
			или ТипЗнч(ДокументСсылка.СубконтоКт3) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			ЕстьСубконтоДоговорыКонтрагентовПоКт = Истина;
		КонецЕсли;
		
		СчетДтПустой = ДокументСсылка.СчетДт = Планысчетов.Хозрасчетный.ПустаяСсылка();
		СчетКтПустой = ДокументСсылка.СчетКт = Планысчетов.Хозрасчетный.ПустаяСсылка();
		
		Субконто1ДтКт = ДокументСсылка.СубконтоДт1 = ДокументСсылка.СубконтоКт1;
		Субконто2ДтКт = ДокументСсылка.СубконтоДт2 = ДокументСсылка.СубконтоКт2;
		Субконто3ДтКт = ДокументСсылка.СубконтоДт3 = ДокументСсылка.СубконтоКт3;
		
		СуммаДтКт = ДокументСсылка.СуммаДтЗадолженности = ДокументСсылка.СуммаКтЗадолженности;

		Если ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности 
			или ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.Прочее Тогда
			
			Если ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
				ОтразитьВУСН(ДокументСсылка, "ПереносЗадолженности", СтруктураШапкиДокумента,,СтруктураДопПараметров);
			Иначе
				
				Если (НЕ СчетаДтКт 
					и ((НЕ СчетДтПустой и ЕстьСубконтоКонтрагентыПоДт и ЕстьСубконтоДоговорыКонтрагентовПоДт)
					или (НЕ СчетКтПустой и ЕстьСубконтоКонтрагентыПоКт и ЕстьСубконтоДоговорыКонтрагентовПоКт)))
					Или (СчетаДтКт и Субконто1ДтКт и Субконто2ДтКт и Субконто3ДтКт 
					и ЕстьСубконтоКонтрагентыПоДт и ЕстьСубконтоДоговорыКонтрагентовПоДт и НЕ СуммаДтКт) Тогда
					ОтразитьВУСН(ДокументСсылка, "ПереносЗадолженности", СтруктураШапкиДокумента,,СтруктураДопПараметров);
				КонецЕсли;	
				
			КонецЕсли;	
			
		ИначеЕсли ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ЗачетАвансов
			или ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ЗачетЗадолженности 
			или ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.Прочее Тогда
			
			Если ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ЗачетАвансов
				или ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ЗачетЗадолженности Тогда
			
				ОтразитьВУСН(ДокументСсылка, "ПроведениеВзаимозачетаДебитор", СтруктураШапкиДокумента,0,СтруктураДопПараметров);
				ОтразитьВУСН(ДокументСсылка, "ПроведениеВзаимозачетаКредитор", СтруктураШапкиДокумента,1,СтруктураДопПараметров);
				
			Иначе
				
				Если СчетаДтКт и Субконто1ДтКт и Субконто2ДтКт и Субконто3ДтКт и СуммаДтКт Тогда
					
					ОтразитьВУСН(ДокументСсылка, "ПроведениеВзаимозачетаДебитор", СтруктураШапкиДокумента,0,СтруктураДопПараметров);
					ОтразитьВУСН(ДокументСсылка, "ПроведениеВзаимозачетаКредитор", СтруктураШапкиДокумента,1,СтруктураДопПараметров);
					
				КонецЕсли;	
				
			КонецЕсли;	
				
		ИначеЕсли ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности 
			или ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.Прочее Тогда
			
			Если ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
			
				ОтразитьВУСН(ДокументСсылка, "СписаниеДебиторскойЗадолженности", СтруктураШапкиДокумента,0,СтруктураДопПараметров);
				ОтразитьВУСН(ДокументСсылка, "СписаниеКредиторскойЗадолженности", СтруктураШапкиДокумента,1,СтруктураДопПараметров);
				
			Иначе
				
				Если НЕ СчетаДтКт и НЕ СчетДтПустой 
					и (НЕ ЕстьСубконтоКонтрагентыПоДт или НЕ ЕстьСубконтоДоговорыКонтрагентовПоДт) Тогда
					ОтразитьВУСН(ДокументСсылка, "СписаниеДебиторскойЗадолженности", СтруктураШапкиДокумента,0,СтруктураДопПараметров);
				КонецЕсли;
				
				Если НЕ СчетаДтКт и НЕ СчетКтПустой 
					и (НЕ ЕстьСубконтоКонтрагентыПоКт или НЕ ЕстьСубконтоДоговорыКонтрагентовПоКт) Тогда
					ОтразитьВУСН(ДокументСсылка, "СписаниеКредиторскойЗадолженности", СтруктураШапкиДокумента,0,СтруктураДопПараметров);
				КонецЕсли;
				
				Если СчетаДтКт и Субконто1ДтКт и Субконто2ДтКт и Субконто3ДтКт 
					и (НЕ ЕстьСубконтоКонтрагентыПоДт или НЕ ЕстьСубконтоДоговорыКонтрагентовПоДт) и Не СуммаДтКт Тогда
					
					ОтразитьВУСН(ДокументСсылка, "СписаниеДебиторскойЗадолженности", СтруктураШапкиДокумента,0,СтруктураДопПараметров);
					ОтразитьВУСН(ДокументСсылка, "СписаниеКредиторскойЗадолженности", СтруктураШапкиДокумента,1,СтруктураДопПараметров);
					
				КонецЕсли;	
				
			КонецЕсли;	
				
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура УстановитьБлокировкиПоТаблицеФильтров(ИмяБлокируемойТаблицы, ТаблицаФильтров, ТаблицаБлокировок = Неопределено, Организация)

	//Установим управляемые блокировки
	Если НЕ ОбщегоНазначенияБПВызовСервераПовтИсп.ИспользоватьУправляемыеБлокировки()
		ИЛИ НЕ ТранзакцияАктивна()
		ИЛИ ТаблицаФильтров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", ИмяБлокируемойТаблицы);

	ЗначенияБлокировки = Новый Соответствие;
	ОписаниеИсточника = Новый Соответствие;
	ВремТаблицаФильтров = ТаблицаФильтров.Скопировать();

	ЗначенияБлокировки.Вставить("Организация", Организация);

	Если ТаблицаБлокировок = Неопределено Тогда
		//Если не передана таблица определим ведущее измерение
		ВедущееИзмерение = Неопределено;
		Для Каждого Фильтр Из ТаблицаФильтров Цикл
			Если Тип("Массив") = ТипЗнч(Фильтр.ЗначениеПоля) Тогда
				Если ВедущееИзмерение = Неопределено ИЛИ Фильтр.ЗначениеПоля.Количество() > ВедущееИзмерение.ЗначениеПоля.Количество() Тогда
					ВедущееИзмерение = Фильтр;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ТаблицаБлокировок = Новый ТаблицаЗначений;
		Если (НЕ ВедущееИзмерение = Неопределено) Тогда
			ТаблицаБлокировок.Колонки.Добавить(ВедущееИзмерение.ИмяПоля);
			Для стр = 1 По ВедущееИзмерение.ЗначениеПоля.Количество() Цикл
				Если ЗначениеЗаполнено(ВедущееИзмерение.ЗначениеПоля[стр-1]) Тогда
					СтрокаТаблицы = ТаблицаБлокировок.Добавить();
					СтрокаТаблицы[ВедущееИзмерение.ИмяПоля] = ВедущееИзмерение.ЗначениеПоля[стр-1];
				КонецЕсли;
			КонецЦикла;
			Если ТаблицаБлокировок.Количество() > 0 Тогда
				ОписаниеИсточника.Вставить(ВедущееИзмерение.ИмяПоля, ВедущееИзмерение.ИмяПоля);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Для Каждого Колонка Из ТаблицаБлокировок.Колонки Цикл
			ОписаниеИсточника.Вставить(Колонка.Имя, Колонка.Имя);
		КонецЦикла;
	КонецЕсли;

	//Определим значения блокировок и оставим только те записи, которые надо рекурсивно перебирать
	КоличествоПоИндексу = ВремТаблицаФильтров.Количество()-1;
	Для стр = 0 По КоличествоПоИндексу Цикл
		Фильтр = ВремТаблицаФильтров[КоличествоПоИндексу - стр];
		Если НЕ Тип("Массив") = ТипЗнч(Фильтр.ЗначениеПоля) Тогда
			Если ЗначениеЗаполнено(Фильтр.ЗначениеПоля) Тогда
				ЗначенияБлокировки.Вставить(Фильтр.ИмяПоля, Фильтр.ЗначениеПоля);
			КонецЕсли;
			ВремТаблицаФильтров.Удалить(Фильтр);
		ИначеЕсли НЕ ТаблицаБлокировок.Колонки.Найти(Фильтр.ИмяПоля) = Неопределено Тогда
			ВремТаблицаФильтров.Удалить(Фильтр);
		ИначеЕсли Фильтр.ЗначениеПоля.Количество() = 1 Тогда
			Если ЗначениеЗаполнено(Фильтр.ЗначениеПоля[0]) Тогда
				ЗначенияБлокировки.Вставить(Фильтр.ИмяПоля, Фильтр.ЗначениеПоля[0]);
			КонецЕсли;
			ВремТаблицаФильтров.Удалить(Фильтр);
		ИначеЕсли Фильтр.ЗначениеПоля.Количество() = 0 Тогда
			ВремТаблицаФильтров.Удалить(Фильтр);
		КонецЕсли;
	КонецЦикла;

	СтруктураПараметров.Вставить("ИсточникДанных", ТаблицаБлокировок);

	Если ВремТаблицаФильтров.Количество() = 0 Тогда
		ОбщегоНазначенияБПВызовСервера.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки, ОписаниеИсточника);
	Иначе
		УстановитьБлокировкуРекурсивно(0, 0, ВремТаблицаФильтров, СтруктураПараметров, ЗначенияБлокировки, ОписаниеИсточника);
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьБлокировкуРекурсивно(н_стр, н_эл, ТаблицаФильтров, СтруктураПараметров, ЗначенияБлокировки, ОписаниеИсточника)

	Для эл = н_эл По ТаблицаФильтров[н_стр].ЗначениеПоля.Количество()-1 Цикл
		Если НЕ ЗначениеЗаполнено(ТаблицаФильтров[н_стр].ЗначениеПоля[эл]) Тогда
			Продолжить;
		КонецЕсли;
		ЗначенияБлокировки.Вставить(ТаблицаФильтров[н_стр].ИмяПоля, ТаблицаФильтров[н_стр].ЗначениеПоля[эл]);
		Если н_стр = ТаблицаФильтров.Количество()-1 Тогда
			ОбщегоНазначенияБПВызовСервера.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки, ОписаниеИсточника);
		Иначе
			УстановитьБлокировкуРекурсивно(н_стр+1, 0, ТаблицаФильтров, СтруктураПараметров, ЗначенияБлокировки, ОписаниеИсточника);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ РАБОТЫ С УСН НА ОСНОВЕ ПАТЕНТА
//

Процедура ЗаполнитьСписокВыбораПорядкаОтраженияАвансовДляТЧ(ПолеОтражениеАванса, СоответствиеОтражениеАванса = Неопределено, Объект) Экспорт

	// Для организации списка выбора в ТЧ требуется хранение в реквизите формы соответствия строковых значений,
	// выводимых в пользовательское поле, и значений реквизита, заполняемых в строке таб. части
	// Для связи пользовательского списка выбора и списка значений для реквизита ТЧ
	// используется числовой ключ (индекс элемента в списке выбора)
	//
	// Таким образом, каждое доступное значение списка выбора требуется представить тремя полями:
	// 1. Значение (Тип: ПеречислениеСсылка.ПорядокОтраженияАвансов, или СправочникСсылка.Патенты)
	// 2. Ключ (индекс элемента (начиная с 0) в списке выбора, отображаемом пользователю)
	// 3. Представление (значение элемента списка: строка, показываемая пользователю при выборе)
	
	Организация = Объект.Организация;
	Дата        = Объект.Дата;
	ВидОперации = Объект.ВидОперации;
	
	СписокВыбора = ПолеОтражениеАванса.СписокВыбора;
	СписокВыбора.Очистить();
	
	СоответствиеПоиска = Новый Соответствие;
	
	ПрименяетсяУСН = УчетнаяПолитика.ПрименяетсяУСН(Организация, Дата);
	ПлательщикЕНВД = УчетнаяПолитика.ПлательщикЕНВД(Организация, Дата);
	
	ПрименяетсяУСНДоходы = УчетнаяПолитика.ПрименяетсяУСНДоходы(Организация, Дата);
	ОсуществляетсяРеализацияТоваровУслугКомитентов = ПолучитьФункциональнуюОпцию("ОсуществляетсяРеализацияТоваровУслугКомитентов");
	
	// оплата от покупателя с автоматическим выделением аванса
	Если УчетУСН.ЕстьАвансыПокупателей(ВидОперации) Тогда
		
		Если ПрименяетсяУСН Тогда
			
			Представление = НСтр("ru = 'Доход УСН'");
			СоответствиеПоиска.Вставить(СписокВыбора.Количество(), Перечисления.ПорядокОтраженияАвансов.ДоходУСН);
			СписокВыбора.Добавить(Представление);
			
			Если ПлательщикЕНВД Тогда
				Представление = НСтр("ru = 'Доход ЕНВД'");
				СоответствиеПоиска.Вставить(СписокВыбора.Количество(), Перечисления.ПорядокОтраженияАвансов.ДоходЕНВД);
				СписокВыбора.Добавить(Представление);
			КонецЕсли;
			
			Если ОсуществляетсяРеализацияТоваровУслугКомитентов Тогда
				Представление = НСтр("ru = 'Доход комитента'");
				СоответствиеПоиска.Вставить(СписокВыбора.Количество(), Перечисления.ПорядокОтраженияАвансов.ДоходКомитента);
				СписокВыбора.Добавить(Представление);
			КонецЕсли;
			
		ИначеЕсли УчетнаяПолитика.ПлательщикНДФЛ(Организация, Дата) Тогда
			
			Если УчетнаяПолитика.ВестиУчетПоВидамДеятельностиИП(Организация, Дата)
				ИЛИ НЕ УчетнаяПолитика.ОсновнойХарактерДеятельности(Организация, Дата) = Перечисления.ХарактерДеятельности.ВсяДеятельностьНаПатенте Тогда
				
				Представление = НСтр("ru = 'Доход ИП'");
				СоответствиеПоиска.Вставить(СписокВыбора.Количество(), Перечисления.ПорядокОтраженияАвансов.ДоходИП);
				СписокВыбора.Добавить(Представление);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если УчетнаяПолитика.ПрименяетсяОсобыйПорядокНалогообложения(Организация, Дата) И ПлательщикЕНВД Тогда
			
			Представление = НСтр("ru = 'Доход ЕНВД'");
			СоответствиеПоиска.Вставить(СписокВыбора.Количество(), Перечисления.ПорядокОтраженияАвансов.ДоходЕНВД);
			СписокВыбора.Добавить(Представление);
			
		КонецЕсли;
		
		Если УчетнаяПолитика.ПрименяетсяУСНПатент(Организация, Дата) Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Владелец",           Организация);
			Запрос.УстановитьПараметр("НачалоДняДокумента", НачалоДня(Дата));
			Запрос.УстановитьПараметр("КонецДняДокумента",  КонецДня(Дата));
			
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Патенты.Ссылка КАК Ссылка,
			|	Патенты.Наименование КАК Наименование
			|ИЗ
			|	Справочник.Патенты КАК Патенты
			|ГДЕ
			|	Патенты.ДатаНачала <= &КонецДняДокумента
			|	И Патенты.ДатаОкончания >= &НачалоДняДокумента
			|	И Патенты.Владелец = &Владелец
			|	И НЕ Патенты.ПометкаУдаления";
			
			Результат = Запрос.Выполнить();
			
			Если НЕ Результат.Пустой() Тогда
				
				Выборка	= Результат.Выбрать();
				Пока Выборка.Следующий() Цикл
					
					Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Доходы по патенту ""%1""'"), Выборка.Наименование);
						
					СоответствиеПоиска.Вставить(СписокВыбора.Количество(), Выборка.Ссылка);
					СписокВыбора.Добавить(Представление);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// устанавливаем реквизит формы
	СоответствиеОтражениеАванса = Новый ФиксированноеСоответствие(СоответствиеПоиска);
	
КонецПроцедуры

Функция ПорядокОтраженияАвансовПоУмолчанию(Организация, Знач Дата) Экспорт
	Перем ПорядокОтраженияАванса;
	
	ПорядокОтраженияАванса	= Новый Структура("ПорядокОтраженияАванса, Патент");
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат ПорядокОтраженияАванса;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДата();
	КонецЕсли;

	Если УчетнаяПолитика.ПрименяетсяУСН(Организация, Дата) Тогда
		
		ПорядокОтраженияАванса.ПорядокОтраженияАванса	= УчетнаяПолитика.ПорядокОтраженияАвансаУСН(Организация, Дата);
		ПорядокОтраженияАванса.Патент					= УчетнаяПолитика.ПатентУСН(Организация, Дата);
		
	ИначеЕсли УчетнаяПолитика.ПрименяетсяОсобыйПорядокНалогообложения(Организация, Дата) Тогда
		
		Если УчетнаяПолитика.ПрименяетсяУСНПатент(Организация, Дата) И НЕ УчетнаяПолитика.ПлательщикЕНВД(Организация, Дата) Тогда
			
			МассивПатентов = Справочники.Патенты.ПолучитьПатентыОрганизации(Организация, Дата);
			Если МассивПатентов.Количество() = 1 Тогда
				ПорядокОтраженияАванса.ПорядокОтраженияАванса	= Перечисления.ПорядокОтраженияАвансов.ДоходПатент;
				ПорядокОтраженияАванса.Патент	= МассивПатентов[0];
			КонецЕсли;
			
		ИначеЕсли УчетнаяПолитика.ПлательщикЕНВД(Организация, Дата) Тогда
			
			ПорядокОтраженияАванса.ПорядокОтраженияАванса	= Перечисления.ПорядокОтраженияАвансов.ДоходЕНВД;
			
		КонецЕсли;
		
	ИначеЕсли УчетнаяПолитика.ПлательщикНДФЛ(Организация, Дата) Тогда
		
		Если УчетнаяПолитика.ПрименяетсяУСНПатент(Организация, Дата)
			И УчетнаяПолитика.ОсновнойХарактерДеятельности(Организация, Дата)
				= Перечисления.ХарактерДеятельности.ВсяДеятельностьНаПатенте Тогда
				
			МассивПатентов = Справочники.Патенты.ПолучитьПатентыОрганизации(Организация, Дата);
			Если МассивПатентов.Количество() = 1 Тогда
				ПорядокОтраженияАванса.ПорядокОтраженияАванса	= Перечисления.ПорядокОтраженияАвансов.ДоходПатент;
				ПорядокОтраженияАванса.Патент	= МассивПатентов[0];
			КонецЕсли;
			
		Иначе
			
			ПорядокОтраженияАванса.ПорядокОтраженияАванса	= Перечисления.ПорядокОтраженияАвансов.ДоходИП;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПорядокОтраженияАванса;

КонецФункции

Функция ДеятельностьНаПатентеПоУмолчанию(Организация, Знач Дата) Экспорт
	Перем ДеятельностьНаПатенте;
	
	ДеятельностьНаПатенте	= Новый Структура("ДеятельностьНаПатенте, Патент");
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат ДеятельностьНаПатенте;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДата();
	КонецЕсли;

	Если УчетнаяПолитика.ПрименяетсяУСНПатент(Организация, Дата) Тогда
		
		Если УчетнаяПолитика.ПрименяетсяУСН(Организация, Дата)
			ИЛИ УчетнаяПолитика.ПлательщикЕНВД(Организация, Дата) Тогда
			
			ДеятельностьНаПатенте.ДеятельностьНаПатенте	= Ложь;
			
		ИначеЕсли УчетнаяПолитика.ПрименяетсяОсобыйПорядокНалогообложения(Организация, Дата) Тогда
			
			ДеятельностьНаПатенте.ДеятельностьНаПатенте	= Истина;
			СписокПатентов = Справочники.Патенты.ПолучитьПатентыОрганизации(Организация, Дата);
			Если СписокПатентов.Количество() = 1 Тогда
				ДеятельностьНаПатенте.Патент	= СписокПатентов[0];
			КонецЕсли;
			
		ИначеЕсли УчетнаяПолитика.ПлательщикНДФЛ(Организация, Дата) Тогда
			
			Если УчетнаяПолитика.ОсновнойХарактерДеятельности(Организация, Дата)
					= Перечисления.ХарактерДеятельности.ВсяДеятельностьНаПатенте Тогда
				
				ДеятельностьНаПатенте.ДеятельностьНаПатенте	= Истина;
				
				СписокПатентов = Справочники.Патенты.ПолучитьПатентыОрганизации(Организация, Дата);
				Если СписокПатентов.Количество() = 1 Тогда
					ДеятельностьНаПатенте.Патент	= СписокПатентов[0];
				КонецЕсли;
				
			Иначе
				ДеятельностьНаПатенте.ДеятельностьНаПатенте	= Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДеятельностьНаПатенте;

КонецФункции

