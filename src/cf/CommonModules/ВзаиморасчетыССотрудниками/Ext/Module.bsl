
#Область ПрограммныйИнтерфейс

#Область УчетНачисленнойИВыплаченнойЗарплаты

// Процедура регистрирует факт начисления зарплаты с целью учета взаиморасчетов.
//
// Параметры:
//		Движения 			- КоллекцияДвижений, коллекция наборов записей движений расчетного документа.
//  	Отказ				- булево, признак отказа выполнения операции.
//		Организация			- СправочникСсылка.Организации
//		ПериодРегистрации 	- дата
//		ХарактерВыплаты		- ПеречисленияСсылка.ХарактерВыплатыЗарплаты
//		Начисления  - таблица значений с данными о начислениях:
//						см. НоваяТаблицаНачисленнойЗарплаты().
//
//		Удержания  - таблица значений с данными о начислениях вида:
//						см. НоваяТаблицаНачисленнойЗарплаты().
//
// Исключения
//	В случае каких-либо проблем при проведении признак «Отказ» выставляется в Истина.
//
Процедура ЗарегистрироватьНачисленнуюЗарплату(Движения, Отказ, Организация, ПериодРегистрации, ХарактерВыплаты, Начисления = Неопределено, Удержания = Неопределено) Экспорт
	ВзаиморасчетыССотрудникамиВнутренний.ЗарегистрироватьНачисленнуюЗарплату(Движения, Отказ, Организация, ПериодРегистрации, ХарактерВыплаты, Начисления, Удержания);
КонецПроцедуры

// Процедура регистрирует факт выплаты зарплаты с целью учета взаиморасчетов.
//
// Параметры:
//		Движения 			- КоллекцияДвижений, коллекция наборов записей движений ведомости.
//		Отказ    			- булево, признак отказа в проведении.
//		ПериодРегистрации	- дата.
//		Зарплата  - таблица значений с данными о выплачиваемой зарплате вида:
//								•	Сотрудник (СправочникСсылка.Сотрудники)
//								•	ФизическоеЛицо (СправочникСсылка.ФизическиеЛица)
//								•	Подразделение (СправочникСсылка.ПодразделенияОрганизаций)
//								•	КВыплате 	
//
Процедура ЗарегистрироватьВыплаченнуюЗарплату(Движения, Отказ, Организация, ПериодРегистрации, Зарплата) Экспорт
	ВзаиморасчетыССотрудникамиВнутренний.ЗарегистрироватьВыплаченнуюЗарплату(Движения, Отказ, Организация, ПериодРегистрации, Зарплата)
КонецПроцедуры

// Процедура регистрирует ввод начальных остатков по взаиморасчетам с сотрудниками.
//
// Параметры:
//		Движения 			- КоллекцияДвижений, коллекция наборов записей движений документа ввода начальных остатков.
//		Отказ    			- булево, признак отказа в проведении.
//		ПериодРегистрации	- дата.
//		Остатки  - таблица значений с данными о начальных остатках:
//								•	Сотрудник (СправочникСсылка.Сотрудники)
//								•	ФизическоеЛицо (СправочникСсылка.ФизическиеЛица)
//								•	Подразделение (СправочникСсылка.ПодразделенияОрганизаций)
//								•	ПериодВзаиморасчетов (Дата) 	
//								•	Сумма 	
//
Процедура ЗарегистрироватьНачальныеОстатки(Движения, Отказ, Организация, ПериодРегистрации, Остатки) Экспорт
	ВзаиморасчетыССотрудникамиВнутренний.ЗарегистрироватьНачальныеОстатки(Движения, Отказ, Организация, ПериодРегистрации, Остатки)
КонецПроцедуры

// Функция возвращает новую таблицу значений для данных о начисленной зарплате.
//
// Возвращаемое значение:
//		Таблица значений с колонками.
//			Сотрудник (СправочникСсылка.Сотрудники)
//			ФизическоеЛицо (СправочникСсылка.ФизическиеЛица)
//			Подразделение (СправочникСсылка.ПодразделенияОрганизаций)
//			СтатьяФинансирования (СправочникСсылка.СтатьиФинансированияЗарплата)
//			СтатьяРасходов (СправочникСсылка.СтатьиРасходовЗарплата)
//			Сумма 	
//			СуммаКорректировкиВыплаты - НДФЛ к возврату (отрицательный и ранее уже удержанный НДФЛ).
// Исключения
//
Функция НоваяТаблицаНачисленнойЗарплаты() Экспорт
	
	НаборЗаписей = РегистрыНакопления.НачисленияУдержанияПоСотрудникам.СоздатьНаборЗаписей();
	
	Колонки = Новый Массив;
	Колонки.Добавить("ФизическоеЛицо");
	Колонки.Добавить("Сотрудник");
	Колонки.Добавить("Подразделение");
	Колонки.Добавить("СтатьяФинансирования");
	Колонки.Добавить("СтатьяРасходов");
	Колонки.Добавить("Сумма");
	Колонки = СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(Колонки);
	
	Таблица = НаборЗаписей.ВыгрузитьКолонки(Колонки);
	Таблица.Колонки.Добавить("СуммаКорректировкиВыплаты", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
	
	Возврат Таблица
	
КонецФункции

#КонецОбласти

#Область ОплатаВедомостей

// Функция возвращает информацию для оплаты платежным документом указанных ведомостей.
//	Удобна для использования в процедурах заполнения платежных документов.
//	Возвращаются суммы в разрезе ведомостей и физических лиц с учетом состояния оплаты
//  (все, оплаченные, только неоплаченные).
//	Оплаты, проведенные самим документом, не учитываются.
//
// Параметры:
//	Документ	 	- ссылка на документ-заказчик (его оплаты не учитываются).
//  Ведомости		- массив ссылок на ведомости (типа ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу,
//               ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк).
//  ФизическиеЛица	- массив ссылок на физические лица.
//	Оплаченные		- булево; учет статуса оплаты:
//						истина		- только оплаченные
//						ложь		- неоплаченные
//						неопределено- состояние оплаты не учитывается.
//
// Возвращаемое значение:
//		ДанныеВедомостейДляОплаты -	Таблица значений со строками ведомости:
//			Ведомость (ДокументСсылка)
//			ФизическоеЛицо
//			СуммаКВыплате
//			КомпенсацияЗаЗадержкуЗарплаты (заполняется только для ВедомостьНаВыплатуЗарплаты).
//
Функция ДанныеВедомостейДляОплатыДокументом(Документ, Ведомости, ФизическиеЛица = Неопределено, Оплаченные = Ложь) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТДанныеВедомостейДляОплатыДокументом(МенеджерВременныхТаблиц, Ложь, Документ, Ведомости, ФизическиеЛица, Оплаченные);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = Запрос.Текст +
	"ВЫБРАТЬ
	|	ДанныеВедомостей.Ведомость КАК Ведомость,
	|	ДанныеВедомостей.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеВедомостей.СуммаКВыплате КАК СуммаКВыплате,
	|	ДанныеВедомостей.КомпенсацияЗаЗадержкуЗарплаты КАК КомпенсацияЗаЗадержкуЗарплаты
	|ИЗ
	|	ВТДанныеВедомостейДляОплатыДокументом КАК ДанныеВедомостей";
	
	ДанныеВедомостейДляОплаты = Запрос.Выполнить().Выгрузить();
	
	Возврат ДанныеВедомостейДляОплаты;
	
КонецФункции

// Функция-конструктор структуры, описывающей правила контроля данных об оплате.
//	Предназначения для создания параметра Проверки процедуры ПроверитьОплатуВедомостейДокументом.
//							
// Возвращаемое значение:
//		Структура проверок с полями:
//			ВедомостьПроведена	- контролировать, что ведомость проведена.
//			РаботникВВедомости	- контролировать наличие указанного работника в ведомости.
//			ПовторнаяВыплата	- контроль повторной выплаты по строке ведомости.
//
Функция ПроверкиОплатыВедомостейДокументом() Экспорт
	
	Проверки = Новый Структура;
	
	Проверки.Вставить("ВедомостьПроведена",	Истина);
	Проверки.Вставить("РаботникВВедомости",	Истина);
	Проверки.Вставить("ПовторнаяВыплата",	Истина);
	
	Возврат Проверки
	
КонецФункции

// Процедура проверяет данные по оплате зарплаты.
//	Удобна для использования при проведении.
//	Контролируется:
//		проведенность ведомости
//		соответствие ведомости и работника (наличие такого в ведомости)
//		попытка повторной выплаты
//	Объем проверок может настраиваться параметром Проверки 
//
// Параметры:
//	Документ		 - объект или ссылка - платежный документ (его оплаты не учитываются).
//	Отказ			 - булево - признак наличия ошибок в проверяемых данных ведомостей.
//	ОплатаВедомостей - таблица значений с данными об оплате вида:
//							Ведомость (ДокументСсылка)
//							ФизическоеЛицо (СправочникСсылка.ФизическиеЛица)
//	Проверки		 - Структура правил проверки, см. ПроверкиОплатыВедомостейДокументом().
//
Процедура ПроверитьОплатуВедомостейДокументом(Документ, Отказ, ОплатаВедомостей, Проверки = Неопределено) Экспорт
	
	Если Проверки = Неопределено Тогда
		Проверки = ПроверкиОплатыВедомостейДокументом()
	КонецЕсли;
	
	РазделительВТ =
	"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|";

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Регистратор", Документ.Ссылка);
	Запрос.УстановитьПараметр("ОплатаВедомостей", ОплатаВедомостей);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОплатаВедомостей.Ведомость КАК Ведомость,
	|	ОплатаВедомостей.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТОплатаВедомостей
	|ИЗ
	|	&ОплатаВедомостей КАК ОплатаВедомостей
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ведомость,
	|	ФизическоеЛицо"
	+
	РазделительВТ;
	
	ШаблонЗапросаДанныеВедомости = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВедомостьЗарплата.Ссылка КАК Ведомость,
	|	#ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТДанныеВедомостей
	|ИЗ
	|	#ВедомостьЗарплата КАК ВедомостьЗарплата
	|ГДЕ
	|	ВедомостьЗарплата.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТОплатаВедомостей.Ведомость
	|			ИЗ
	|				ВТОплатаВедомостей)";
	
	Запрос.Текст = Запрос.Текст + 
		ТекстЗапросаВТДанныеВедомостей(ШаблонЗапросаДанныеВедомости, "#ВедомостьЗарплата", "Зарплата") 
		+ 
		РазделительВТ;
	
	Запрос.Текст = Запрос.Текст + 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОплатаВедомостей.Ведомость КАК Ведомость,
	|	ОплатаВедомостей.Ведомость.Проведен КАК Проведен,
	|	ТИПЗНАЧЕНИЯ(ОплатаВедомостей.Ведомость) КАК ТипВедомости,
	|	ИСТИНА КАК Проводится
	|ИЗ
	|	ВТОплатаВедомостей КАК ОплатаВедомостей"
	+ 
	РазделительВТ
	+
	"ВЫБРАТЬ
	|	ОплатаВедомостей.Ведомость,
	|	ОплатаВедомостей.ФизическоеЛицо,
	|	ВЫБОР
	|		КОГДА ДанныеВедомостей.ФизическоеЛицо ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФизлицаНетВВедомости,
	|	ВЫБОР
	|		КОГДА РегистрОплатыВедомостей.Регистратор ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПовторнаяВыплата,
	|	РегистрОплатыВедомостей.Регистратор
	|ИЗ
	|	ВТОплатаВедомостей КАК ОплатаВедомостей
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеВедомостей КАК ДанныеВедомостей
	|		ПО (ДанныеВедомостей.Ведомость = ОплатаВедомостей.Ведомость)
	|			И (ДанныеВедомостей.ФизическоеЛицо = ОплатаВедомостей.ФизическоеЛицо)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОплатаВедомостейНаВыплатуЗарплаты КАК РегистрОплатыВедомостей
	|		ПО (РегистрОплатыВедомостей.Ведомость = ОплатаВедомостей.Ведомость)
	|			И (РегистрОплатыВедомостей.ФизическоеЛицо = ОплатаВедомостей.ФизическоеЛицо)
	|			И (РегистрОплатыВедомостей.Регистратор <> &Регистратор)";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаВедомостей = РезультатыЗапроса[РезультатыЗапроса.Количество()-2].Выгрузить();
	ТаблицаРаботников = РезультатыЗапроса[РезультатыЗапроса.Количество()-1].Выгрузить();
	
	Для Каждого Ведомость Из ТаблицаВедомостей Цикл
		Ведомость.Проводится = Метаданные.НайтиПоТипу(Ведомость.ТипВедомости).Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить;
	КонецЦикла;
	
	Если Проверки.ВедомостьПроведена Тогда
		ОшибкиВедомостьНеПроведена = ТаблицаВедомостей.НайтиСтроки(Новый Структура("Проведен,Проводится", Ложь,Истина));
		Отказ = Отказ ИЛИ ОшибкиВедомостьНеПроведена.Количество()>0;
		
		Для Каждого Ошибка Из ОшибкиВедомостьНеПроведена Цикл
			СообщениеОбОшибке = 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Документ %1 не проведен'"), 
					Ошибка.Ведомость);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
		КонецЦикла;
	КонецЕсли;
	
	Если Проверки.РаботникВВедомости Тогда
		ОшибкиНетВВедомости	= ТаблицаРаботников.НайтиСтроки(Новый Структура("ФизлицаНетВВедомости", Истина));
		Отказ = Отказ ИЛИ ОшибкиНетВВедомости.Количество()>0;
		
		Для Каждого Ошибка Из ОшибкиНетВВедомости Цикл
				СообщениеОбОшибке = 
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Документ %1 не содержит сотрудника %2'"), 
						Ошибка.Ведомость, 
						Ошибка.ФизическоеЛицо);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
		КонецЦикла;	
	КонецЕсли;
	
	Если Проверки.ПовторнаяВыплата Тогда
		ПовторныеВыплаты = ТаблицаРаботников.НайтиСтроки(Новый Структура("ПовторнаяВыплата", Истина));
		Отказ = Отказ ИЛИ ПовторныеВыплаты.Количество() > 0;
	
		Для Каждого ПовторнаяВыплата Из ПовторныеВыплаты Цикл
				СообщениеОбОшибке = 
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Выплата сотруднику %2 по документу %1 уже произведена документом %3'"), 
						ПовторнаяВыплата.Ведомость, 
						ПовторнаяВыплата.ФизическоеЛицо,
						ПовторнаяВыплата.Регистратор);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

// Процедура регистрирует факт оплаты ведомостей.
//
// Параметры:
//	Документ	- платежный документ (документ-объект).
//  Отказ		- признак отказа выполнения операции
//	ОплатаВедомостей
//				- таблица значений с данными об оплате вида:
//					Ведомость (ДокументСсылка)
//					ФизическоеЛицо (СправочникСсылка.ФизическиеЛица)
//
// Обработка ошибочных ситуаций
//	выдается сообщение, признак «Отказ» выставляется в Истина.
//
Процедура ЗарегистрироватьОплатуВедомостейДокументом(Документ, Отказ, ОплатаВедомостей) Экспорт
	
	Если Отказ ИЛИ ОплатаВедомостей = Неопределено Тогда
		Возврат
	КонецЕсли;		
	
	ПроверитьОплатуВедомостейДокументом(Документ, Отказ, ОплатаВедомостей);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Ведомости = ОплатаВедомостей.ВыгрузитьКолонку("Ведомость");
	ОрганизацияВедомости = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Ведомости, "Организация");
	
	Для Каждого СтрокаОплаты Из ОплатаВедомостей Цикл
				
		НоваяСтрока = Документ.Движения.ОплатаВедомостейНаВыплатуЗарплаты.Добавить();
		
		НоваяСтрока.Организация		= ОрганизацияВедомости[СтрокаОплаты.Ведомость];
		НоваяСтрока.Ведомость 		= СтрокаОплаты.Ведомость; 
		НоваяСтрока.ФизическоеЛицо	= СтрокаОплаты.ФизическоеЛицо;
		
	КонецЦикла;
		
	Документ.Движения.ОплатаВедомостейНаВыплатуЗарплаты.Записывать = Истина;		
	
КонецПроцедуры

// Функция проверяет, есть ли выплаты по ведомости.
//
// Параметры:
//	Ведомость - документ-ссылка.
//
// Возвращаемое значение:
//	Булево
//
Функция ЕстьОплатаПоВедомости(Ведомость) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ведомость", Ведомость);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Поле1
	|ИЗ
	|	РегистрСведений.ОплатаВедомостейНаВыплатуЗарплаты КАК ОплатаВедомостей
	|ГДЕ
	|	ОплатаВедомостей.Ведомость = &Ведомость";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции	

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ПервоначальноеЗаполнениеИОбновлениеИнформационнойБазы

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.0";
	Обработчик.Процедура = "Справочники.СпособыВыплатыЗарплаты.НачальноеЗаполнение";
	Обработчик.Опциональный = Ложь;
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.0";
	Обработчик.Процедура = "Справочники.СпособыОкругленияПриРасчетеЗарплаты.НачальноеЗаполнение";
	Обработчик.Опциональный = Ложь;
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.2.40";
	Обработчик.Процедура = "Справочники.СпособыВыплатыЗарплаты.ОбновитьУдаленныеПредопределенные";
	Обработчик.Опциональный = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.3.14";
	Обработчик.Процедура = "Документы.ВедомостьНаВыплатуЗарплатыВБанк.ЗаполнитьЗарплатныйПроект";
	Обработчик.Опциональный = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.3.15";
	Обработчик.Процедура = "РегистрыНакопления.НачисленияУдержанияПоСотрудникам.ЗаполнитьОрганизацию";
	Обработчик.Опциональный = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.3.15";
	Обработчик.Процедура = "РегистрыНакопления.ВзаиморасчетыССотрудниками.ЗаполнитьОрганизацию";
	Обработчик.Опциональный = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.3.15";
	Обработчик.Процедура = "РегистрыНакопления.ЗарплатаКВыплате.ЗаполнитьОрганизацию";
	Обработчик.Опциональный = Ложь;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.2";
	Обработчик.Процедура = "Документы.ВедомостьНаВыплатуЗарплатыВБанк.ЗаполнитьНомерЛицевогоСчета";
	Обработчик.Опциональный = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.15";
	Обработчик.Процедура = "РегистрыСведений.ОплатаВедомостейНаВыплатуЗарплаты.ЗаполнитьОрганизацию";
	Обработчик.Опциональный = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.7.19";
	Обработчик.Процедура = "РегистрыНакопления.ЗарплатаКВыплате.ЗаполнитьПериодДвиженийВедомостейПериодомРегистрации";
	Обработчик.Опциональный = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.11.7";
	Обработчик.Процедура = "Справочники.СпособыВыплатыЗарплаты.ЗаполнитьПризнакПоставляемый";
	Обработчик.Опциональный = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.116";
	Обработчик.Процедура = "Справочники.СпособыВыплатыЗарплаты.ЗаполнитьОкругление";
	Обработчик.Опциональный = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.119";
	Обработчик.Процедура = "ВзаиморасчетыССотрудниками.ЗаполнитьПериодыВзаиморасчетовЗарплатыВедомостей";
	Обработчик.Опциональный = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.120";
	Обработчик.Процедура = "Справочники.СпособыВыплатыЗарплаты.ЗаполнитьХарактерВыплаты";
	Обработчик.Опциональный = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.121";
	Обработчик.Процедура = "ВзаиморасчетыССотрудниками.ЗаполнитьФизическиеЛицаЗарплатыВедомостей";
	Обработчик.Опциональный = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.124";
	Обработчик.Процедура = "Документы.ВедомостьНаВыплатуЗарплатыВКассу.ЗаполнитьСостав";
	Обработчик.Опциональный = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.124";
	Обработчик.Процедура = "Документы.ВедомостьНаВыплатуЗарплатыВБанк.ЗаполнитьСостав";
	Обработчик.Опциональный = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.164";
	Обработчик.Процедура = "Документы.ВедомостьНаВыплатуЗарплатыВКассу.СогласоватьТабличныеЧасти";
	Обработчик.Опциональный = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.164";
	Обработчик.Процедура = "Документы.ВедомостьНаВыплатуЗарплатыВБанк.СогласоватьТабличныеЧасти";
	Обработчик.Опциональный = Ложь;
	
КонецПроцедуры	

Процедура ЗаполнитьПериодыВзаиморасчетовЗарплатыВедомостей() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Отбираем ведомости с пустыми периодами взаиморасчетов в зарплате
	ШаблонЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВедомостьЗарплата.Ссылка КАК Ссылка,
	|	ВедомостьЗарплата.Ссылка.Проведен КАК Проведен
	|ПОМЕСТИТЬ ВТДанныеВедомостей
	|ИЗ
	|	#ВедомостьЗарплата КАК ВедомостьЗарплата
	|ГДЕ
	|	ВедомостьЗарплата.ПериодВзаиморасчетов = ДАТАВРЕМЯ(1, 1, 1)";
	Запрос.Текст = ТекстЗапросаВТДанныеВедомостей(ШаблонЗапроса, "#ВедомостьЗарплата", "Зарплата", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Документ.ВедомостьНаВыплатуЗарплаты"));
	Запрос.Выполнить();
	
	// В проведенных документах переносим движения в табличную часть
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗарплатаКВыплате.Регистратор КАК Ссылка,
	|	ЗарплатаКВыплате.Сотрудник КАК Сотрудник,
	|	ЗарплатаКВыплате.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
	|	ЗарплатаКВыплате.Подразделение КАК Подразделение,
	|	ЗарплатаКВыплате.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов КАК СтатьяРасходов,
	|	СУММА(ВЫБОР
	|			КОГДА ЗарплатаКВыплате.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ * ЗарплатаКВыплате.СуммаКВыплате) КАК КВыплате
	|ИЗ
	|	РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
	|ГДЕ
	|	ЗарплатаКВыплате.Регистратор В
	|			(ВЫБРАТЬ
	|				ОбновляемыеВедомости.Ссылка
	|			ИЗ
	|				ВТДанныеВедомостей КАК ОбновляемыеВедомости
	|			ГДЕ
	|				ОбновляемыеВедомости.Проведен)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплате.Регистратор,
	|	ЗарплатаКВыплате.Сотрудник,
	|	ЗарплатаКВыплате.ПериодВзаиморасчетов,
	|	ЗарплатаКВыплате.Подразделение,
	|	ЗарплатаКВыплате.СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗарплатаКВыплате.Регистратор,
	|	ЗарплатаКВыплате.Сотрудник,
	|	ЗарплатаКВыплате.ПериодВзаиморасчетов,
	|	ЗарплатаКВыплате.Подразделение,
	|	ЗарплатаКВыплате.СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		Ведомость = Выборка.Ссылка.ПолучитьОбъект();
		
		ЗарплатаДоОбновления = Ведомость.Зарплата.Выгрузить();
		
		Ведомость.Зарплата.Очистить();
		Пока Выборка.Следующий() Цикл
			
			СтрокаЗарплаты = Ведомость.Зарплата.Добавить();
			
			// Перенос специфических для типа данных сотрудника
			СтрокаСотрудника = ЗарплатаДоОбновления.Найти(Выборка.Сотрудник, "Сотрудник");
			Если СтрокаСотрудника <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаЗарплаты, СтрокаСотрудника);
			КонецЕсли;	
			
			// Заполняем общие для всех ведомостей данные
			ЗаполнитьЗначенияСвойств(СтрокаЗарплаты, Выборка);
			
		КонецЦикла;
		
		Ведомость.ОбменДанными.Загрузка = Истина;
		Ведомость.Записать(РежимЗаписиДокумента.Запись);
		
	КонецЦикла;
	
	// В непроведенных документах заполняем период взаиморасчетов из шапки документа
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбновляемыеВедомости.Ссылка КАК Ссылка
	|ИЗ
	|	ВТДанныеВедомостей КАК ОбновляемыеВедомости
	|ГДЕ
	|	НЕ ОбновляемыеВедомости.Проведен";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Ведомость = Выборка.Ссылка.ПолучитьОбъект();
		
		Для Каждого СтрокаЗарплаты Из Ведомость.Зарплата Цикл
			СтрокаЗарплаты.ПериодВзаиморасчетов = Ведомость.ПериодРегистрации;
		КонецЦикла;
		
		Ведомость.ОбменДанными.Загрузка = Истина;
		Ведомость.Записать();
		
	КонецЦикла;
	
	
КонецПроцедуры	

Процедура ЗаполнитьФизическиеЛицаЗарплатыВедомостей() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Отбираем ведомости с пустыми физическими лицами в зарплате
	ШаблонЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВедомостьЗарплата.Ссылка КАК Ссылка,
	|	ВедомостьЗарплата.Сотрудник КАК Сотрудник,
	|	ВедомостьЗарплата.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТДанныеВедомостей
	|ИЗ
	|	#ВедомостьЗарплата КАК ВедомостьЗарплата
	|ГДЕ
	|	ВедомостьЗарплата.ФизическоеЛицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)";
	Запрос.Текст = ТекстЗапросаВТДанныеВедомостей(ШаблонЗапроса, "#ВедомостьЗарплата", "Зарплата", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Документ.ВедомостьНаВыплатуЗарплаты"));
	
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВедомостьЗарплата.Ссылка КАК Ссылка,
	|	ВедомостьЗарплата.Сотрудник КАК Сотрудник,
	|	ВедомостьЗарплата.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	ВТДанныеВедомостей КАК ВедомостьЗарплата
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Сотрудник";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		Ведомость = Выборка.Ссылка.ПолучитьОбъект();
		
		Пока Выборка.Следующий() Цикл
			
			СтрокиСотрудника = Ведомость.Зарплата.НайтиСтроки(Новый Структура("Сотрудник", Выборка.Сотрудник));
			
			Для Каждого СтрокаСотрудника Из СтрокиСотрудника Цикл
				СтрокаСотрудника.ФизическоеЛицо = Выборка.ФизическоеЛицо
			КонецЦикла;
			
		КонецЦикла;
		
		Ведомость.ОбменДанными.Загрузка = Истина;
		Ведомость.Записать(РежимЗаписиДокумента.Запись);
		
	КонецЦикла;
	
КонецПроцедуры	

// Используется в модулях менеджеров ведомостей в процедурах обновления ЗаполнитьСостав() 
Процедура ЗаполнитьСоставВедомости(ПолноеИмя, КлючевыеПоля) Экспорт
	
	ПараметрыОтбораПоКлючу = Новый Структура(КлючевыеПоля);
	
	// Выбираем ведомости, имеющие заполненную ТЧ Зарплата и пустую ТЧ Строки
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Ведомость.Ссылка КАК Ссылка
	|ИЗ
	|	#ВедомостьДокумент КАК Ведомость
	|ГДЕ
	|	1 В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				1 КАК Поле1
	|			ИЗ
	|				#ВедомостьЗарплата КАК ВедомостьЗарплата
	|			ГДЕ
	|				ВедомостьЗарплата.Ссылка = Ведомость.Ссылка)
	|	И НЕ 1 В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					1 КАК Поле1
	|				ИЗ
	|					#ВедомостьСостав КАК ВедомостьСостав
	|				ГДЕ
	|					ВедомостьСостав.Ссылка = Ведомость.Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ведомость.Ссылка";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВедомостьДокумент",	ПолноеИмя); 
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВедомостьЗарплата",	ПолноеИмя + ".Зарплата"); 
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВедомостьСостав",	ПолноеИмя + ".Состав"); 
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Ведомость = Выборка.Ссылка.ПолучитьОбъект();
		
		Ключи = Ведомость.Зарплата.Выгрузить(, КлючевыеПоля);
		Ключи.Свернуть(КлючевыеПоля);
		
		Для Каждого Ключ Из Ключи Цикл
			
			ИдентификаторСтроки = Новый УникальныйИдентификатор;
			
			СтрокаСостава = Ведомость.Состав.Добавить();
			СтрокаСостава.ИдентификаторСтроки = ИдентификаторСтроки;
			ЗаполнитьЗначенияСвойств(СтрокаСостава, Ключ);
			
			ЗаполнитьЗначенияСвойств(ПараметрыОтбораПоКлючу, Ключ); 
			СтрокиЗарплата = Ведомость.Зарплата.НайтиСтроки(ПараметрыОтбораПоКлючу);
			
			Для Каждого СтрокаЗарплаты Из СтрокиЗарплата Цикл
				СтрокаЗарплаты.ИдентификаторСтроки = ИдентификаторСтроки;
			КонецЦикла
			
		КонецЦикла;
		
		Ведомость.СуммаПоДокументу = Ведомость.Зарплата.Итог("КВыплате");
		
		Ведомость.ОбменДанными.Загрузка = Истина;
		Ведомость.Записать();
		
	КонецЦикла	
	
КонецПроцедуры	

// Используется в модулях менеджеров ведомостей в процедурах обновления СинхронизироватьСостав() 
Процедура СогласоватьТабличныеЧастиВедомостей(ПолноеИмя) Экспорт
	ВзаиморасчетыССотрудникамиВнутренний.СогласоватьТабличныеЧастиВедомостей(ПолноеИмя)	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеВедомостей

// Возвращает структуру, используемую для заполнения ведомостей на выплату зарплаты.
//
Функция ДанныеЗаполненияВедомости() Экспорт
	Возврат ВзаиморасчетыССотрудникамиВнутренний.ДанныеЗаполненияВедомости()
КонецФункции	

// Проверяет, являются ли переданные данные структурой, используемой для заполнения документа
// (см. функцию ДанныеЗаполнения).
//
Функция ЭтоДанныеЗаполненияВедомости(ДанныеЗаполнения) Экспорт
	Возврат ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ЭтоДанныеЗаполненияВедомостиНаВыплатуЗарплаты") 
КонецФункции	

#КонецОбласти

#Область ОплатаВедомостей

// Формирует временную таблицу ВТДанныеВедомостейДляОплатыДокументом с информацией для оплаты платежным документом
// указанных ведомостей.
// Временная таблица содержит невыплаченные суммы в разрезе ведомостей и физических лиц:
//	Ведомость
//	ФизическоеЛицо
//	СуммаКВыплате
//	
// Параметры:
//	МенеджерВременныхТаблиц
//	ТолькоРазрешенные - Булево
//  Ведомости		- массив ссылок на ведомости (типа ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу,
//               ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк).
//  ФизическиеЛица	- массив ссылок на физические лица.
//	Оплаченные		- булево; описывает учет статуса оплаты:
//						истина		- только оплаченные
//						ложь		- неоплаченные
//						неопределено- состояние оплаты не учитывается.
//
 Процедура СоздатьВТДанныеВедомостейДляОплатыДокументом(МенеджерВременныхТаблиц, ТолькоРазрешенные, Документ, Ведомости, ФизическиеЛица = Неопределено, Оплаченные = Ложь) Экспорт
	 
	 СоздатьВТДанныеВедомостейДляОплатыДокументами(МенеджерВременныхТаблиц, ТолькоРазрешенные, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Документ), Ведомости, ФизическиеЛица, Оплаченные);	 
	 
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = Запрос.Текст +
	"ВЫБРАТЬ
	|	ДанныеВедомостей.Ведомость КАК Ведомость,
	|	ДанныеВедомостей.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеВедомостей.СуммаКВыплате КАК СуммаКВыплате,
	|	ДанныеВедомостей.КомпенсацияЗаЗадержкуЗарплаты КАК КомпенсацияЗаЗадержкуЗарплаты
	|ПОМЕСТИТЬ ВТДанныеВедомостейДляОплатыДокументом
	|ИЗ
	|	ВТДанныеВедомостейДляОплатыДокументами КАК ДанныеВедомостей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДанныеВедомостейДляОплатыДокументами";
	
	Запрос.Выполнить();
	
 КонецПроцедуры

// Формирует временную таблицу ВТДанныеВедомостейДляОплатыДокументами с информацией для оплаты платежным документом
// указанных ведомостей.
// Временная таблица содержит невыплаченные суммы в разрезе ведомостей и физических лиц:
//	Ведомость
//	ФизическоеЛицо
//	СуммаКВыплате
//	
// Параметры:
//	МенеджерВременныхТаблиц
//	ТолькоРазрешенные - Булево
//	Документы - массив ссылок на документы оплаты.
//  Ведомости		- массив ссылок на ведомости (типа ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу,
//               ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк).
//  ФизическиеЛица	- массив ссылок на физические лица.
//	Оплаченные		- булево; описывает учет статуса оплаты:
//						истина		- только оплаченные
//						ложь		- неоплаченные
//						неопределено- состояние оплаты не учитывается.
//
 Процедура СоздатьВТДанныеВедомостейДляОплатыДокументами(МенеджерВременныхТаблиц, ТолькоРазрешенные, Документы, Ведомости, ФизическиеЛица = Неопределено, Оплаченные = Ложь) Экспорт
	
	ШаблонЗапросаДанныеВедомости = 
	"ВЫБРАТЬ
	|	ВедомостьЗарплата.Ссылка КАК Ссылка,
	|	#ФизическоеЛицо КАК ФизическоеЛицо,
	|	#КВыплате КАК КВыплате,
	|	ВедомостьЗарплата.КомпенсацияЗаЗадержкуЗарплаты КАК КомпенсацияЗаЗадержкуЗарплаты
	|ПОМЕСТИТЬ ВТДанныеВедомостей
	|ИЗ
	|	#ВедомостьЗарплата КАК ВедомостьЗарплата
	|ГДЕ
	|	ВедомостьЗарплата.Ссылка В(&Ведомости)
	|	И (&ПоВсемФизлицам
	|			ИЛИ #ФизическоеЛицо В (&ФизическиеЛица))";
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Регистраторы", Документы);
	Запрос.УстановитьПараметр("Ведомости", Ведомости);
	Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
	Запрос.УстановитьПараметр("ПоВсемФизлицам", ФизическиеЛица = Неопределено);
	Запрос.УстановитьПараметр("Оплаченные", Оплаченные);
	
	Запрос.Текст = ТекстЗапросаВТДанныеВедомостей(ШаблонЗапросаДанныеВедомости, "#ВедомостьЗарплата", "Зарплата");
	
	Запрос.Текст = Запрос.Текст +
	"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|";
	
	Если Оплаченные = Неопределено Тогда
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	ВедомостьЗарплата.Ссылка КАК Ведомость,
		|	ВедомостьЗарплата.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СУММА(ВедомостьЗарплата.КВыплате) КАК СуммаКВыплате,
		|	СУММА(ВедомостьЗарплата.КомпенсацияЗаЗадержкуЗарплаты) КАК КомпенсацияЗаЗадержкуЗарплаты
		|ПОМЕСТИТЬ ВТДанныеВедомостейДляОплатыДокументами
		|ИЗ
		|	ВТДанныеВедомостей КАК ВедомостьЗарплата
		|
		|СГРУППИРОВАТЬ ПО
		|	ВедомостьЗарплата.Ссылка,
		|	ВедомостьЗарплата.ФизическоеЛицо";
	Иначе	
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	ВедомостьЗарплата.Ссылка КАК Ведомость,
		|	ВедомостьЗарплата.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СУММА(ВедомостьЗарплата.КВыплате) КАК СуммаКВыплате,
		|	СУММА(ВедомостьЗарплата.КомпенсацияЗаЗадержкуЗарплаты) КАК КомпенсацияЗаЗадержкуЗарплаты
		|ПОМЕСТИТЬ ВТДанныеВедомостейДляОплатыДокументами
		|ИЗ
		|	ВТДанныеВедомостей КАК ВедомостьЗарплата
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОплатаВедомостейНаВыплатуЗарплаты КАК Оплата
		|		ПО (НЕ Оплата.Регистратор В (&Регистраторы))
		|			И (Оплата.Ведомость = ВедомостьЗарплата.Ссылка)
		|			И (Оплата.ФизическоеЛицо = ВедомостьЗарплата.ФизическоеЛицо)
		|ГДЕ
		|	(&Оплаченные
		|				И НЕ Оплата.Регистратор ЕСТЬ NULL 
		|			ИЛИ НЕ &Оплаченные
		|				И Оплата.Регистратор ЕСТЬ NULL )
		|
		|СГРУППИРОВАТЬ ПО
		|	ВедомостьЗарплата.Ссылка,
		|	ВедомостьЗарплата.ФизическоеЛицо";
	КонецЕсли;
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Процедура регистрирует факт неудачи при попытке выплаты по ведомостям.
// При этом невыплаченыне суммы "возвращаются" во взаиморасчеты.
//
// Параметры:
//		Движения 			- КоллекцияДвижений, коллекция наборов записей движений ведомости.
//		Отказ		- признак отказа выполнения операции.
//		Ведомость	- ссылка на ведомость на выплату зарплаты.
//		ФизическиеЛица	- массив ссылок на физические лица.
//
// Обработка ошибочных ситуаций
//	выдается сообщение, признак «Отказ» выставляется в Истина.
//
Процедура ЗарегистрироватьНевыплатуПоВедомости(Движения, Отказ, Ведомость, ФизическиеЛица) Экспорт
	ВзаиморасчетыССотрудникамиВнутренний.ЗарегистрироватьНеВыплатуПоВедомости(Движения, Отказ, Ведомость, ФизическиеЛица)
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВзаимосвязиМеждуОбъектами

Функция СпособВыплатыПоРасчетномуДокументу(РасчетныйДокумент) Экспорт
	Возврат ВзаиморасчетыССотрудникамиВнутренний.СпособВыплатыПоРасчетномуДокументу(РасчетныйДокумент)
КонецФункции

Функция МенеджерДокументаВедомостьПоВидуМестаВыплаты(ВидМестаВыплаты) Экспорт
	Возврат ВзаиморасчетыССотрудникамиВнутренний.МенеджерДокументаВедомостьПоВидуМестаВыплаты(ВидМестаВыплаты)
КонецФункции

Функция ВидВзаиморасчетовССотрудникамиПоХарактеруВыплатыЗарплаты(ХарактерВыплаты) Экспорт
	Возврат ВзаиморасчетыССотрудникамиВнутренний.ВидВзаиморасчетовССотрудникамиПоХарактеруВыплатыЗарплаты(ХарактерВыплаты)
КонецФункции

#КонецОбласти

#Область ПолучениеДанных

Функция ТекстЗапросаВТДанныеВедомостей(ШаблонЗапроса, ИсточникДанныхВШаблоне = "ИсточникДанных", ИмяТЧ = "", ИсключаемыеТипы = Неопределено)
	
	ИмяВТ = "ВТДанныеВедомостей";
	
	ТекстЗапросаВТДанныеВедомостей = "";
	
	Для Каждого ТипВедомости Из Метаданные.РегистрыСведений.ОплатаВедомостейНаВыплатуЗарплаты.Измерения.Ведомость.Тип.Типы()  Цикл
		
		Если ИсключаемыеТипы <> Неопределено И ИсключаемыеТипы.Найти(Метаданные.НайтиПоТипу(ТипВедомости).ПолноеИмя()) <> Неопределено Тогда
			Продолжить
		КонецЕсли;	
		
		ИсточникДанных = Метаданные.НайтиПоТипу(ТипВедомости).ПолноеИмя() + ?(ЗначениеЗаполнено(ИмяТЧ), "." + ИмяТЧ, "");
		ТекстЗапросаПоТипуВедомости = СтрЗаменить(ШаблонЗапроса, ИсточникДанныхВШаблоне, ИсточникДанных);
		Если ИсточникДанных = "Документ.ВедомостьНаВыплатуЗарплаты.Зарплата" Тогда
			ТекстЗапросаПоТипуВедомости = СтрЗаменить(ТекстЗапросаПоТипуВедомости, "#ФизическоеЛицо", "ВедомостьЗарплата.ФизическоеЛицо");
			ТекстЗапросаПоТипуВедомости = СтрЗаменить(ТекстЗапросаПоТипуВедомости, "#КВыплате", "ВедомостьЗарплата.Сумма");
		Иначе
			ТекстЗапросаПоТипуВедомости = СтрЗаменить(ТекстЗапросаПоТипуВедомости, "#ФизическоеЛицо", "ВедомостьЗарплата.Сотрудник.ФизическоеЛицо");
			ТекстЗапросаПоТипуВедомости = СтрЗаменить(ТекстЗапросаПоТипуВедомости, "#КВыплате", "ВедомостьЗарплата.КВыплате");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстЗапросаВТДанныеВедомостей) Тогда
			ТекстЗапросаВТДанныеВедомостей = ТекстЗапросаВТДанныеВедомостей + 
				"
				|
			 	|ОБЪЕДИНИТЬ ВСЕ
				|
				|";
			ТекстЗапросаПоТипуВедомости = СтрЗаменить(ТекстЗапросаПоТипуВедомости, "ПОМЕСТИТЬ " + ИмяВТ + Символы.ПС, "");
		КонецЕсли;	
		
		ТекстЗапросаВТДанныеВедомостей = ТекстЗапросаВТДанныеВедомостей + ТекстЗапросаПоТипуВедомости
		
	КонецЦикла;	
	
	Возврат ТекстЗапросаВТДанныеВедомостей;
	
КонецФункции	

Функция ПараметрыПолученияЗарплатыКВыплате() Экспорт
	Возврат ВзаиморасчетыССотрудникамиВнутренний.ПараметрыПолученияЗарплатыКВыплате()
КонецФункции

Функция ПараметрыПолученияЗарплатыКВыплатеВедомости(Ведомость) Экспорт
	Возврат ВзаиморасчетыССотрудникамиВнутренний.ПараметрыПолученияЗарплатыКВыплатеВедомости(Ведомость)
КонецФункции

Процедура СоздатьВТЗарплатаКВыплате(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники = "ВТСотрудникиОрганизации") Экспорт
	ВзаиморасчетыССотрудникамиВнутренний.СоздатьВТЗарплатаКВыплате(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники)
КонецПроцедуры	

Процедура СоздатьВТСотрудникиДляВедомостиПоШапке(МенеджерВременныхТаблиц, Ведомость)
	ВзаиморасчетыССотрудникамиВнутренний.СоздатьВТСотрудникиДляВедомостиПоШапке(МенеджерВременныхТаблиц, Ведомость)
КонецПроцедуры	

Процедура СоздатьВТСотрудникиДляВедомостиПоФизическимЛицам(МенеджерВременныхТаблиц, Ведомость, ФизическиеЛица) 
	ВзаиморасчетыССотрудникамиВнутренний.СоздатьВТСотрудникиДляВедомостиПоФизическимЛицам(МенеджерВременныхТаблиц, Ведомость, ФизическиеЛица)
КонецПроцедуры	

#КонецОбласти

#Область ПроцедурыИФункцииВедомостейНаВыплатуЗарплаты

// Заполнение и расчет документа.

Функция ВедомостьРеквизитыОтветственныхЛиц() Экспорт
	
	РеквизитыОтветственныхЛиц = Новый Массив;
	
	РеквизитыОтветственныхЛиц.Добавить("Руководитель");
	РеквизитыОтветственныхЛиц.Добавить("ДолжностьРуководителя");
	РеквизитыОтветственныхЛиц.Добавить("ГлавныйБухгалтер");
	
	Возврат РеквизитыОтветственныхЛиц
	
КонецФункции	

Функция ВедомостьМестоВыплаты() Экспорт
	
	ВедомостьМестоВыплаты = Новый Структура;
	ВедомостьМестоВыплаты.Вставить("Вид", Перечисления.ВидыМестВыплатыЗарплаты.ПустаяСсылка());
	ВедомостьМестоВыплаты.Вставить("Значение", Неопределено);
	
	Возврат ВедомостьМестоВыплаты
	
КонецФункции	

Функция ВедомостьВКассуМестоВыплаты(Ведомость) Экспорт
	Возврат ВзаиморасчетыССотрудникамиВнутренний.ВедомостьВКассуМестоВыплаты(Ведомость);
КонецФункции	

Процедура ВедомостьВКассуУстановитьМестоВыплаты(Ведомость, Значение) Экспорт
	ВзаиморасчетыССотрудникамиВнутренний.ВедомостьВКассуУстановитьМестоВыплаты(Ведомость, Значение);
КонецПроцедуры

// Устанавливает в ведомости указанную зарплату физических лиц
//
// Параметры:
//	Ведомость - ДокументОбъект - ведомость
//	ЗарплатаРаботников - ТаблицаЗначений
//
Процедура ВедомостьУстановитьЗарплатуРаботников(Ведомость, ЗарплатаРаботников) Экспорт
	
	// Добавляем в ведомость отсутствующих в ней работников
	НовыеРаботники = Новый Массив;
	Для Каждого ЗарплатаРаботника Из ЗарплатаРаботников Цикл
		Если Ведомость.Состав.Найти(ЗарплатаРаботника.ФизическоеЛицо, "ФизическоеЛицо") = Неопределено Тогда
			НовыеРаботники.Добавить(ЗарплатаРаботника.ФизическоеЛицо);
		КонецЕсли;	
	КонецЦикла;	
	
	Если НовыеРаботники.Количество() > 0 Тогда 
		Ведомость.ДополнитьЗарплату(НовыеРаботники);
	КонецЕсли;	
	
	// Переданные суммы зарплаты распределяем по разрезам учёта
	Для Каждого ЗарплатаРаботника Из ЗарплатаРаботников Цикл
		
		СтрокиЗарплатыФизлица = Ведомость.Зарплата.НайтиСтроки(Новый Структура("ФизическоеЛицо", ЗарплатаРаботника.ФизическоеЛицо));
		
		КоэффициентыРаспределения = Новый Массив;
		СуммаКВыплатеПоФизлицу = 0;
		Для Индекс = 0 По СтрокиЗарплатыФизлица.ВГраница() Цикл
			КоэффициентыРаспределения.Добавить(СтрокиЗарплатыФизлица[Индекс].КВыплате);
			СуммаКВыплатеПоФизлицу = СуммаКВыплатеПоФизлицу + СтрокиЗарплатыФизлица[Индекс].КВыплате;
		КонецЦикла;
		
		Если ЗарплатаРаботника.Сумма <> СуммаКВыплатеПоФизлицу Тогда
			РаспределеннаяСумма = ЗарплатаКадры.РаспределитьСуммуПропорциональноБазе(ЗарплатаРаботника.Сумма, КоэффициентыРаспределения);
			Если РаспределеннаяСумма <> Неопределено Тогда
				Для Индекс = 0 По СтрокиЗарплатыФизлица.ВГраница() Цикл
					СтрокиЗарплатыФизлица[Индекс].КВыплате = РаспределеннаяСумма[Индекс];
				КонецЦикла;
			КонецЕсли;
		КонецЕсли	
		
	КонецЦикла;	
	
КонецПроцедуры

Функция ВедомостьМожноЗаполнитьЗарплату(Ведомость) Экспорт
	Возврат ВзаиморасчетыССотрудникамиВнутренний.ВедомостьМожноЗаполнитьЗарплату(Ведомость);
КонецФункции

Процедура ВедомостьЗаполнитьЗарплату(Ведомость) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Отбираем сотрудников в соответствии с реквизитами шапки ведомости
	СоздатьВТСотрудникиДляВедомостиПоШапке(МенеджерВременныхТаблиц, Ведомость);
	
	// Получаем зарплату к выплате для отобранных сотрудников в соответствии с характером выплаты
	ПараметрыПолученияЗарплатыКВыплате = ВзаиморасчетыССотрудниками.ПараметрыПолученияЗарплатыКВыплатеВедомости(Ведомость);
	ВзаиморасчетыССотрудниками.СоздатьВТЗарплатаКВыплате(
		МенеджерВременныхТаблиц, Истина, 
		ПараметрыПолученияЗарплатыКВыплате, 
		"ВТСотрудникиДляВедомости");

	// Получаем кадровые данные сотрудников с полями для сортировки 	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(МенеджерВременныхТаблиц, "ВТСотрудникиДляВедомости");
	КадровыеДанные = "";
	ЗарплатаКадры.ДополнитьКадровымиДаннымиНастрокиПорядкаСписка(КадровыеДанные);
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, КадровыеДанные);
	
	// Формируем отсортированную зарплату сотрудников к выплате
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЗарплатаКВыплате.Подразделение КАК Подразделение,
	|	ЗарплатаКВыплате.ПериодВзаиморасчетов,
	|	ЗарплатаКВыплате.СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов,
	|	ЗарплатаКВыплате.ДокументОснование,
	|	ЗарплатаКВыплате.КВыплате
	|ИЗ
	|	ВТКадровыеДанныеСотрудников КАК Сотрудники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗарплатаКВыплате КАК ЗарплатаКВыплате
	|		ПО (ЗарплатаКВыплате.Сотрудник = Сотрудники.Сотрудник)";
	ЗарплатаКадры.ДополнитьТекстЗапросаУпорядочиваниемСпискаСотрудников(Запрос, "Сотрудники");
	ЗарплатаКВыплате = Запрос.Выполнить().Выгрузить();
	
	ВедомостьЗарплатаКВыплатеРассчитатьСуммы(Ведомость, ЗарплатаКВыплате);
	
	Ведомость.ЗаполнитьПоТаблицеЗарплат(ЗарплатаКВыплате);
		
КонецПроцедуры

Процедура ВедомостьДополнитьЗарплату(Ведомость, ФизическиеЛица) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Отбираем сотрудников по переданным физическим лицам
	СоздатьВТСотрудникиДляВедомостиПоФизическимЛицам(МенеджерВременныхТаблиц, Ведомость, ФизическиеЛица);
	
	// Получаем зарплату к выплате для отобранных сотрудников в соответствии с характером выплаты
	ПараметрыПолученияЗарплатыКВыплате = ВзаиморасчетыССотрудниками.ПараметрыПолученияЗарплатыКВыплатеВедомости(Ведомость);
	ВзаиморасчетыССотрудниками.СоздатьВТЗарплатаКВыплате(
		МенеджерВременныхТаблиц, Истина, 
		ПараметрыПолученияЗарплатыКВыплате, 
		"ВТСотрудникиДляВедомости");
		
	// Формируем зарплату сотрудников к выплате
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПериодРегистрации", Ведомость.ПериодРегистрации);
	ЗаполнитьЗначенияСвойств(Запрос.Параметры, Ведомость);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЕСТЬNULL(ЗарплатаКВыплате.Подразделение, Сотрудники.Подразделение) КАК Подразделение,
	|	ЕСТЬNULL(ЗарплатаКВыплате.ПериодВзаиморасчетов, &ПериодРегистрации) КАК ПериодВзаиморасчетов,
	|	ЗарплатаКВыплате.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов КАК СтатьяРасходов,
	|	ЗарплатаКВыплате.ДокументОснование КАК ДокументОснование,
	|	ЕСТЬNULL(ЗарплатаКВыплате.КВыплате, 0) КАК КВыплате
	|ИЗ
	|	ВТСотрудникиДляВедомости КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗарплатаКВыплате КАК ЗарплатаКВыплате
	|		ПО (ЗарплатаКВыплате.Сотрудник = Сотрудники.Сотрудник)";
	ЗарплатаКВыплате = Запрос.Выполнить().Выгрузить();
		
	ВедомостьЗарплатаКВыплатеРассчитатьСуммы(Ведомость, ЗарплатаКВыплате);
	
	Ведомость.ДополнитьПоТаблицеЗарплат(ЗарплатаКВыплате);
		
КонецПроцедуры

Процедура ВедомостьЗарплатаКВыплатеРассчитатьСуммы(Ведомость, ЗарплатаКВыплате)
	ВзаиморасчетыССотрудникамиВнутренний.ВедомостьЗарплатаКВыплатеРассчитатьСуммы(Ведомость, ЗарплатаКВыплате);
КонецПроцедуры

Процедура ВедомостьЗаполнитьПоТаблицеЗарплат(Ведомость, ТаблицаЗарплат) Экспорт
	
	// Группируем зарплату по строкам состава ведомости
	Состав = ВедомостьСоставПоТаблицеЗарплат(Ведомость, ТаблицаЗарплат);
	
	// Убираем неположительные строки
	УдаляемыеСтрокиСостава = Новый Массив;
	Для Каждого СтрокаСостава Из Состав Цикл
		Если СтрокаСостава.КВыплате <= 0 Тогда
			УдаляемыеСтрокиСостава.Добавить(СтрокаСостава);
		КонецЕсли;	
	КонецЦикла;
	Для Каждого УдаляемаяСтрокаСостава Из УдаляемыеСтрокиСостава Цикл
		Состав.Удалить(УдаляемаяСтрокаСостава);
	КонецЦикла;
	
	// Заполняем табличные части ведомости сгруппированной зарплатой 
	ВедомостьОчиститьСостав(Ведомость);
	ВедомостьДополнитьСостав(Ведомость, Состав);
	
КонецПроцедуры

Процедура ВедомостьДополнитьПоТаблицеЗарплат(Ведомость, ТаблицаЗарплат) Экспорт
	
	// Группируем зарплату по строкам состава ведомости
	Состав = ВедомостьСоставПоТаблицеЗарплат(Ведомость, ТаблицаЗарплат);
	
	// Дополняем табличные части ведомости сгруппированной зарплатой 
	ВедомостьДополнитьСостав(Ведомость, Состав);
	
КонецПроцедуры

Функция ВедомостьСоставПоТаблицеЗарплат(Ведомость, ТаблицаЗарплат)
	Возврат ВзаиморасчетыССотрудникамиВнутренний.ВедомостьСоставПоТаблицеЗарплат(Ведомость, ТаблицаЗарплат)
КонецФункции

Процедура ВедомостьОчиститьСостав(Ведомость)
	ВзаиморасчетыССотрудникамиВнутренний.ВедомостьОчиститьСостав(Ведомость)
КонецПроцедуры	

Процедура ВедомостьДополнитьСостав(Ведомость, Состав)
	ВзаиморасчетыССотрудникамиВнутренний.ВедомостьДополнитьСостав(Ведомость, Состав)
КонецПроцедуры	
	
/// Обработчики событий модуля объекта документов Ведомости.

Процедура ВедомостьОбработкаЗаполнения(ДокументОбъект, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	ВзаиморасчетыССотрудникамиВнутренний.ВедомостьОбработкаЗаполнения(ДокументОбъект, ДанныеЗаполнения, СтандартнаяОбработка);
КонецПроцедуры

Процедура ВедомостьОбработкаПроверкиЗаполнения(ДокументОбъект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	Если ДокументОбъект.ВводНачальныхДанных Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "СпособВыплаты");
	КонецЕсли;
	
	Для Каждого СтрокаСостава Из ДокументОбъект.Состав Цикл
		ЗарплатаСтроки = ДокументОбъект.Зарплата.Выгрузить(Новый Структура("ИдентификаторСтроки", СтрокаСостава.ИдентификаторСтроки), "КВыплате");
		Если ЗарплатаСтроки.Итог("КВыплате") < 0 Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'У сотрудника %1 указана отрицательная сумма к выплате'"),
						СтрокаСостава.ФизическоеЛицо);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Объект.Состав[%1].%2", СтрокаСостава.НомерСтроки-1, "КВыплате"),, Отказ);
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

Процедура ВедомостьПередЗаписью(ДокументОбъект, Отказ, РежимЗаписи) Экспорт
	ВзаиморасчетыССотрудникамиВнутренний.ВедомостьПередЗаписью(ДокументОбъект, Отказ, РежимЗаписи)
КонецПроцедуры

Процедура ВедомостьОбработкаПроведения(Ведомость, Отказ) Экспорт
	
	Если Ведомость.ВводНачальныхДанных Тогда
		Возврат
	КонецЕсли;
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(Ведомость);
	
	ВзаиморасчетыССотрудникамиВнутренний.ВедомостьЗарегистрироватьВыплату(Ведомость, Отказ);
	
	Для Каждого НаборЗаписей Из Ведомость.Движения Цикл
		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей.Записывать = Истина;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииДоступаКВедомостям

Функция ВедомостьДанныеДляПечати(Ведомость) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", Ведомость.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СотрудникиВедомостиНаВыплатуЗарплаты.Сотрудник КАК Сотрудник,
	|	СУММА(СотрудникиВедомостиНаВыплатуЗарплаты.КВыплате + СотрудникиВедомостиНаВыплатуЗарплаты.КомпенсацияЗаЗадержкуЗарплаты) КАК КВыплате
	|ИЗ
	|	#ВедомостьЗарплата КАК СотрудникиВедомостиНаВыплатуЗарплаты
	|ГДЕ
	|	СотрудникиВедомостиНаВыплатуЗарплаты.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СотрудникиВедомостиНаВыплатуЗарплаты.Сотрудник";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВедомостьЗарплата", Метаданные.НайтиПоТипу(ТипЗнч(Ведомость)).ПолноеИмя() +".Зарплата");
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#КонецОбласти
