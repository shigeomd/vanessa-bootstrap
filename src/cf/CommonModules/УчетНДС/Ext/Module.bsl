////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ, ОТРАЖАЮЩИЕ ХОЗЯЙСТВЕННЫЕ ОПЕРАЦИИ В ПОДСИСТЕМЕ НДС

// РЕАЛИЗАЦИЯ ТОВАРОВ И УСЛУГ

// Формирование движений при реализации товаров и услуг
//
Процедура СформироватьДвиженияРеализацияТоваровУслуг(ТаблицаРеализованныеТоварыУслуги, ТаблицаТовары, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если ТаблицаРеализованныеТоварыУслуги <> Неопределено
		И ТаблицаРеализованныеТоварыУслуги.Колонки.Найти("ВыставленСФ") = Неопределено Тогда
		Параметры = ПодготовитьПараметрыРеализацияТоваровУслуг(
			ТаблицаРеализованныеТоварыУслуги, ТаблицаТовары, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты);
	Иначе
		Параметры = ПодготовитьПараметрыКомиссияТоваровУслуг(
			ТаблицаРеализованныеТоварыУслуги, ТаблицаТовары, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты);
	КонецЕсли;
	
	Если Параметры.Реквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];

	УчетНДСПереопределяемый.СформироватьПроводкиСписаниеГТД(Параметры.Товары, Реквизиты, Движения, Отказ);
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	ВедетсяУчетНДСПоФЗ134 = ВедетсяУчетНДСПоФЗ134(Реквизиты.Период);
	
	Если НЕ ПлательщикНДС Тогда
		
		Если ВедетсяУчетНДСПоФЗ134
			И Параметры.РеализованныеТоварыУслуги.Итог("СуммаНДСРуб") <> 0 Тогда
			
			ПодготовитьТаблицуДляНачисленияНДСНеплательщиком(Параметры.РеализованныеТоварыУслуги);

			Если НЕ (ПолучитьФункциональнуюОпцию("ИспользуетсяОСНО") 
				ИЛИ ПолучитьФункциональнуюОпцию("ИспользуетсяНДФЛИП")
				ИЛИ ПолучитьФункциональнуюОпцию("УплачиватьНДСспецРежимы")) Тогда
				
				УстановитьПривилегированныйРежим(Истина);
				Константы.УплачиватьНДСспецРежимы.Установить(Истина);
				УстановитьПривилегированныйРежим(Ложь);
				
			КонецЕсли;
			
		Иначе	
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьВидыЦенностей(Параметры.РеализованныеТоварыУслуги, Неопределено, "СчетУчета", Реквизиты.Регистратор);

	РаздельныйУчетНДС = УчетнаяПолитика.РаздельныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	ВерсияУчетаНДС    = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	УпрощенныйУчетНДС = ВерсияУчетаНДС = 1 И УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);

	Если НЕ Реквизиты.ДеятельностьНаПатенте Тогда
		
		Если ВерсияУчетаНДС = 1 Тогда
			
			Если УпрощенныйУчетНДС Тогда
				// Организация ведет упрощенный учет НДС 
				СформироватьДвиженияНДСЗаписиКнигиПродажРеализацияТоваровУслуг(
					Параметры.РеализованныеТоварыУслуги, Реквизиты, Движения, Отказ);
			Иначе
				УчетНДСПереопределяемый.СформироватьДвиженияНДСНачисленныйРеализацияТоваровУслуг(
					Параметры.РеализованныеТоварыУслуги, Реквизиты, Движения, Отказ);

				Если РаздельныйУчетНДС Тогда
					// Организация осуществляет реализацию без НДС или с НДС 0% 
					СформироватьДвиженияНДСРеализация0РеализацияТоваровУслуг(
						Параметры.РеализованныеТоварыУслуги, Реквизиты, Движения, Отказ);
				КонецЕсли;		
			КонецЕсли;
				
		Иначе	
			
			СформироватьДвиженияНДСЗаписиКнигиПродажРеализацияТоваровУслуг(
				Параметры.РеализованныеТоварыУслуги, Реквизиты, Движения, Отказ);
				
			Если РаздельныйУчетНДС Тогда
				// Организация осуществляет реализацию без НДС или с НДС 0% 
				СформироватьДвиженияНДСРеализация0РеализацияТоваровУслуг(
					Параметры.РеализованныеТоварыУслуги, Реквизиты, Движения, Отказ);
			КонецЕсли;
		
		КонецЕсли;
		
		СформироватьПроводкиРеализацияТоваровУслуг(Параметры.РеализованныеТоварыУслуги, Реквизиты, Движения, Отказ);
		
	КонецЕсли;

	// Списание товаров

	Если НЕ УпрощенныйУчетНДС И ПлательщикНДС Тогда

		Если РаздельныйУчетНДС Тогда
			СписанныеПартииНДС = УчетНДСПереопределяемый.ПолучитьТаблицуСписанныеПартииНДС(
				Параметры.Товары, Параметры.СписанныеТоварыБухУчет, Реквизиты, Отказ);
			УчетНДСПереопределяемый.СформироватьДвиженияВыбытиеТоваров(
				СписанныеПартииНДС, Параметры.СписанныеТоварыБухУчет, Реквизиты, Движения, Отказ);
		Иначе
			ЗаполнитьВидыЦенностей(Параметры.Товары, Неопределено, "СчетУчета");
			Параметры.Товары.Индексы.Добавить("ВидЦенности");
			ОсновныеСредства = Параметры.Товары.Скопировать(Новый Структура("ВидЦенности", Перечисления.ВидыЦенностей.ОС));
			СписанныеПартииНДС = УчетНДСПереопределяемый.ПолучитьТаблицуСписанныеПартииНДС(
				ОсновныеСредства, Параметры.СписанныеТоварыБухУчет, Реквизиты, Отказ);
			УчетНДСПереопределяемый.СформироватьДвиженияВыбытиеТоваров(
				СписанныеПартииНДС, Параметры.СписанныеТоварыБухУчет, Реквизиты, Движения, Отказ);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыРеализацияТоваровУслуг(ТаблицаРеализованныеТоварыУслуги, ТаблицаТовары, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"					// <Дата>
	+ "Регистратор,"			// <ДокументСсылка>
	+ "Организация,"			// <СправочникСсылка.Организации>
	+ "Контрагент,"
	+ "ДеятельностьНаПатенте"	// <Булево> - признак деятельности на патенте
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	// Необходимость включения/исключения НДС Из стоимости при реализации определяется ставкой НДС партии товара
	// и ставкой НДС, указанной в документе реализации
	Параметры.Реквизиты.Колонки.Добавить("НДСВСтоимостиТоваров");
	Параметры.Реквизиты.ЗаполнитьЗначения(Неопределено, "НДСВСтоимостиТоваров");
	// Для списания на расходы ранее принятого к вычету НДС при реализации используются счет и аналитика списания товара
	Параметры.Реквизиты.Колонки.Добавить("СписыватьНДСнаКорСчетИАналитикуТовара", Новый ОписаниеТипов("Булево"));
	Параметры.Реквизиты.ЗаполнитьЗначения(Истина, "СписыватьНДСнаКорСчетИАналитикуТовара");

	// Подготовка таблицы реализованных товаров и услуг:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "НомерСтроки,"
	+ "Номенклатура,"
	+ "Содержание,"
	+ "Количество,"
	+ "СуммаВзаиморасчетов,"
	+ "СуммаРуб,"
	+ "СуммаБУ,"
	+ "СуммаНДСРуб,"
	+ "СуммаБезНДСРуб,"
	+ "СчетУчета,"
	+ "СчетДоходов,"
	+ "Субконто,"
	+ "СтавкаНДС,"
	+ "СчетУчетаНДСПоРеализации,"
	+ "Контрагент,"
	+ "ВалютаВзаиморасчетов,"
	+ "Подразделение"
	;
	Параметры.Вставить("РеализованныеТоварыУслуги", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеализованныеТоварыУслуги, СписокОбязательныхКолонок));

	// Подготовка таблицы Товары

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"            // <Строка> - имя табличной части документа
	+ "СинонимСписка,"        // <Строка> - синоним табличной части документа
	+ "НомерСтрокиДокумента," // <Число,10,0> - номер строки документа
	+ "Номенклатура,"         // <СправочникСсылка.Номенклатура>
	+ "СчетУчета,"            // <ПланСчетовСсылка.Хозрасчетный> - счет учета товара
	+ "СтавкаНДС,"            // <ПеречислениеСсылка.СтавкиНДС> - ставка НДС, указанная в документе
	+ "НомерГТД,"             // <СправочникСсылка.НомераГТД>
	+ "СтранаПроисхождения,"  // <СправочникСсылка.СтраныМира>
	+ "Количество"	          // <Число,15,3>
	;
	Параметры.Вставить("Товары", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТовары, СписокОбязательныхКолонок));
	// В таблице списанных партий СтавкаНДС используется для ставки, указанной в документе поступления товара.
	// Она может отличаться от ставки НДС документа реализации, поэтому ставку реализации переименовываем
	Если Параметры.Товары.Количество() > 0 Тогда
		Параметры.Товары.Колонки.СтавкаНДС.Имя = "СтавкаНДСДокумента";
	КонецЕсли;
	
	// Подготовка таблицы списанных товаров по данным бух.учета:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "СинонимСписка,"
	+ "НомерСтроки,"
	+ "СчетУчета,"
	+ "Номенклатура,"
	+ "Склад,"
	+ "Партия,"
	+ "Количество,"
	+ "КорСчетСписания,"
	+ "ВидКорСубконто1,"
	+ "ВидКорСубконто2,"
	+ "ВидКорСубконто3,"
	+ "КорСубконто1,"
	+ "КорСубконто2,"
	+ "КорСубконто3,"
	+ "КорПодразделение,"
	+ "Подразделение"
	;
	Параметры.Вставить("СписанныеТоварыБухУчет", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСписанныеТоварыБухУчет, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьПараметрыКомиссияТоваровУслуг(ТаблицаРеализованныеТоварыУслуги, ТаблицаТовары, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"					// <Дата>
	+ "Регистратор,"			// <ДокументСсылка>
	+ "Организация,"			// <СправочникСсылка.Организации>
	+ "Контрагент,"
	+ "ДеятельностьНаПатенте"	// <Булево> - признак деятельности на патенте
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	// Необходимость включения/исключения НДС Из стоимости при реализации определяется ставкой НДС партии товара
	// и ставкой НДС, указанной в документе реализации
	Параметры.Реквизиты.Колонки.Добавить("НДСВСтоимостиТоваров");
	Параметры.Реквизиты.ЗаполнитьЗначения(Неопределено, "НДСВСтоимостиТоваров");
	// Для списания на расходы ранее принятого к вычету НДС при реализации используются счет и аналитика списания товара
	Параметры.Реквизиты.Колонки.Добавить("СписыватьНДСнаКорСчетИАналитикуТовара", Новый ОписаниеТипов("Булево"));
	Параметры.Реквизиты.ЗаполнитьЗначения(Истина, "СписыватьНДСнаКорСчетИАналитикуТовара");

	// Подготовка таблицы реализованных товаров и услуг:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "НомерСтроки,"
	+ "Номенклатура,"
	+ "Содержание,"
	+ "Количество,"
	+ "СуммаВзаиморасчетов,"
	+ "СуммаРуб,"
	+ "СуммаБУ,"
	+ "СуммаНДСРуб,"
	+ "СуммаБезНДСРуб,"
	+ "СчетУчета,"
	+ "СчетДоходов,"
	+ "Субконто,"
	+ "СтавкаНДС,"
	+ "СчетУчетаНДСПоРеализации,"
	+ "Контрагент,"
	+ "ВалютаВзаиморасчетов,"
	+ "Подразделение,"
	+ "Покупатель,"                 //  <СправочникСсылка.Контрагенты>
	+ "ВыставленСФ,"                //  <Булево>
	+ "ДатаСФ,"                     //  <Дата>
	+ "СчетФактура"                //  <ДокументСсылка.СчетФактураВыданный>
	;
	Параметры.Вставить("РеализованныеТоварыУслуги", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеализованныеТоварыУслуги, СписокОбязательныхКолонок));

	// Подготовка таблицы Товары

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"            // <Строка> - имя табличной части документа
	+ "СинонимСписка,"        // <Строка> - синоним табличной части документа
	+ "НомерСтрокиДокумента," // <Число,10,0> - номер строки документа
	+ "Номенклатура,"         // <СправочникСсылка.Номенклатура>
	+ "СчетУчета,"            // <ПланСчетовСсылка.Хозрасчетный> - счет учета товара
	+ "СтавкаНДС,"            // <ПеречислениеСсылка.СтавкиНДС> - ставка НДС, указанная в документе
	+ "НомерГТД,"             // <СправочникСсылка.НомераГТД>
	+ "СтранаПроисхождения,"  // <СправочникСсылка.СтраныМира>
	+ "Количество"	          // <Число,15,3>
	;
	Параметры.Вставить("Товары", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТовары, СписокОбязательныхКолонок));
	// В таблице списанных партий СтавкаНДС используется для ставки, указанной в документе поступления товара.
	// Она может отличаться от ставки НДС документа реализации, поэтому ставку реализации переименовываем
	Если Параметры.Товары.Количество() > 0 Тогда
		Параметры.Товары.Колонки.СтавкаНДС.Имя = "СтавкаНДСДокумента";
	КонецЕсли;

	// Подготовка таблицы списанных товаров по данным бух.учета:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "СинонимСписка,"
	+ "НомерСтроки,"
	+ "СчетУчета,"
	+ "Номенклатура,"
	+ "Склад,"
	+ "Партия,"
	+ "Количество,"
	+ "КорСчетСписания,"
	+ "ВидКорСубконто1,"
	+ "ВидКорСубконто2,"
	+ "ВидКорСубконто3,"
	+ "КорСубконто1,"
	+ "КорСубконто2,"
	+ "КорСубконто3,"
	+ "КорПодразделение,"
	+ "Подразделение"
	;
	Параметры.Вставить("СписанныеТоварыБухУчет", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСписанныеТоварыБухУчет, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияРеализацияКомиссионныхТоваров(ТаблицаРеализованныеКомиссионныеТовары, ТаблицаТоварыУслугиКомитентов, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыРеализацияКомиссионныхТоваров(ТаблицаРеализованныеКомиссионныеТовары, ТаблицаТоварыУслугиКомитентов, ТаблицаРеквизиты);
	Если Параметры.Реквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];

	УчетНДСПереопределяемый.СформироватьПроводкиСписаниеГТД(Параметры.Товары, Реквизиты, Движения, Отказ);
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	ВедетсяУчетНДСПоФЗ134 = ВедетсяУчетНДСПоФЗ134(Реквизиты.Период);
	
	Если НЕ ПлательщикНДС И НЕ ВедетсяУчетНДСПоФЗ134 Тогда
		Возврат;
	КонецЕсли;
	
	СформироватьДвиженияРеализацияТоваровУслугКомитентаНерезидента(Параметры.ТаблицаТоварыУслугиКомитентов, Параметры.Реквизиты, Движения, Отказ);
	
КонецПроцедуры

Функция ПодготовитьПараметрыРеализацияКомиссионныхТоваров(ТаблицаРеализованныеКомиссионныеТовары, ТаблицаТоварыУслугиКомитентов, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"			// <Дата>
	+ "Регистратор,"	// <ДокументСсылка>
	+ "Организация"		// <СправочникСсылка.Организации>
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	// Необходимость включения/исключения НДС Из стоимости при реализации определяется ставкой НДС партии товара
	// и ставкой НДС, указанной в документе реализации
	Параметры.Реквизиты.Колонки.Добавить("НДСВСтоимостиТоваров");
	Параметры.Реквизиты.ЗаполнитьЗначения(Неопределено, "НДСВСтоимостиТоваров");
	// Для списания на расходы ранее принятого к вычету НДС при реализации используются счет и аналитика списания товара
	Параметры.Реквизиты.Колонки.Добавить("СписыватьНДСнаКорСчетИАналитикуТовара", Новый ОписаниеТипов("Булево"));
	Параметры.Реквизиты.ЗаполнитьЗначения(Истина, "СписыватьНДСнаКорСчетИАналитикуТовара");

	// Подготовка таблицы Товары

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"            // <Строка> - имя табличной части документа
	+ "СинонимСписка,"        // <Строка> - синоним табличной части документа
	+ "НомерСтрокиДокумента," // <Число,10,0> - номер строки документа
	+ "Номенклатура,"         // <СправочникСсылка.Номенклатура>
	+ "СчетУчета,"            // <ПланСчетовСсылка.Хозрасчетный> - счет учета товара
	+ "СтавкаНДС,"            // <ПеречислениеСсылка.СтавкиНДС> - ставка НДС, указанная в документе
	+ "НомерГТД,"             // <СправочникСсылка.НомераГТД>
	+ "СтранаПроисхождения,"  // <СправочникСсылка.СтраныМира>
	+ "Количество"	          // <Число,15,3>
	;
	Параметры.Вставить("Товары", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеализованныеКомиссионныеТовары, СписокОбязательныхКолонок));
	// В таблице списанных партий СтавкаНДС используется для ставки, указанной в документе поступления товара.
	// Она может отличаться от ставки НДС документа реализации, поэтому ставку реализации переименовываем
	Если Параметры.Товары.Количество() > 0 Тогда
		Параметры.Товары.Колонки.СтавкаНДС.Имя = "СтавкаНДСДокумента";
	КонецЕсли;

	СписокОбязательныхКолонок = ""
	+ "Контрагент,"
	+ "Комитент,"
	+ "ДоговорКомиссии,"
	+ "ВалютаРасчетовСКомитентом,"
	+ "Номенклатура,"
	+ "СуммаБезНДСРуб,"
	+ "СуммаНДСРуб,"
	+ "СтавкаНДС,"
	+ "СчетРасчетовСКомитентом";
	
	Параметры.Вставить("ТаблицаТоварыУслугиКомитентов", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТоварыУслугиКомитентов, СписокОбязательныхКолонок));	
	
	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияРеализацияТоваровУслугКомитентаНерезидента(ТаблицаТоварыУслугиКомитентов, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыРеализацияТоваровУслугКомитентаНерезидента(ТаблицаТоварыУслугиКомитентов, ТаблицаРеквизиты);
	Если Параметры.Реквизиты.Количество() = 0
		ИЛИ Параметры.ТаблицаТоварыУслугиКомитентов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];

	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	ВедетсяУчетНДСПоФЗ134 = ВедетсяУчетНДСПоФЗ134(Реквизиты.Период);
	
	Если НЕ ПлательщикНДС Тогда
		
		Если ВедетсяУчетНДСПоФЗ134
			И ТаблицаТоварыУслугиКомитентов.Итог("СуммаНДСРуб") <> 0 Тогда
			
			ПодготовитьТаблицуДляНачисленияНДСНеплательщиком(ТаблицаТоварыУслугиКомитентов);

		Иначе	
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаТоварыУслугиКомитентов", Параметры.ТаблицаТоварыУслугиКомитентов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаТоварыУслугиКомитентов.Контрагент КАК Покупатель,
	|	ТаблицаТоварыУслугиКомитентов.Комитент КАК Комитент,
	|	ТаблицаТоварыУслугиКомитентов.ДоговорКомиссии КАК ДоговорКонтрагента,
	|	ТаблицаТоварыУслугиКомитентов.ВалютаРасчетовСКомитентом КАК Валюта,
	|	ТаблицаТоварыУслугиКомитентов.Номенклатура,
	|	ТаблицаТоварыУслугиКомитентов.СуммаБезНДСРуб КАК Сумма,
	|	ТаблицаТоварыУслугиКомитентов.СуммаНДСРуб КАК НДС,
	|	ТаблицаТоварыУслугиКомитентов.СтавкаНДС,
	|	ТаблицаТоварыУслугиКомитентов.СчетРасчетовСКомитентом КАК СчетРасчетов
	|ПОМЕСТИТЬ ТоварыУслугиКомитентов
	|ИЗ
	|	&ТаблицаТоварыУслугиКомитентов КАК ТаблицаТоварыУслугиКомитентов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыУслугиКомитентов.Покупатель,
	|	ТоварыУслугиКомитентов.Комитент,
	|	ТоварыУслугиКомитентов.ДоговорКонтрагента,
	|	ТоварыУслугиКомитентов.Валюта,
	|	ТоварыУслугиКомитентов.Номенклатура,
	|	ТоварыУслугиКомитентов.Сумма,
	|	ТоварыУслугиКомитентов.НДС,
	|	ТоварыУслугиКомитентов.СтавкаНДС,
	|	ТоварыУслугиКомитентов.СчетРасчетов
	|ИЗ
	|	ТоварыУслугиКомитентов КАК ТоварыУслугиКомитентов
	|ГДЕ
	|	ТоварыУслугиКомитентов.ДоговорКонтрагента.УчетАгентскогоНДС";
	
	// Заменим обращение к реквизитам договора через переопределяемые функции
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
								"ТоварыУслугиКомитентов.ДоговорКонтрагента.УчетАгентскогоНДС",
								БухгалтерскийУчетПереопределяемый.ТекстЗапросаУчетАгентскогоНДС("ТоварыУслугиКомитентов.ДоговорКонтрагента"));
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТоварыУслугиКомитентовНерезидентов = Результат.Выгрузить();
	
	ВерсияУчетаНДС = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
		
	Если ВерсияУчетаНДС = 1 Тогда  
		УчетНДСПереопределяемый.СформироватьДвиженияНДСНачисленныйРеализацияТоваровУслугКомитентаНерезидента(Реквизиты, ТоварыУслугиКомитентовНерезидентов, Движения, Отказ);
	Иначе
		ТоварыУслугиКомитентовНерезидентов.Свернуть("Комитент,Покупатель,ДоговорКонтрагента,Валюта,СтавкаНДС,СчетРасчетов","Сумма,НДС");
		СформироватьДвиженияНДСЗаписиКнигиПродажРеализацияТоваровУслугКомитентаНерезидента(Реквизиты, ТоварыУслугиКомитентовНерезидентов, Движения, Отказ);
	КонецЕсли;	
	
	ТоварыУслугиКомитентовНерезидентов.Свернуть("Комитент,ДоговорКонтрагента,Валюта,СчетРасчетов","НДС");
	СформироватьПроводкиРеализацияТоваровУслугКомитентаНерезидента(Реквизиты, ТоварыУслугиКомитентовНерезидентов, Движения, Отказ);
		
КонецПроцедуры	

Функция ПодготовитьПараметрыРеализацияТоваровУслугКомитентаНерезидента(ТаблицаТоварыУслугиКомитентов, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;

	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"
	+ "Регистратор,"
	+ "Организация";
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	СписокОбязательныхКолонок = ""
	+ "Контрагент,"
	+ "Комитент,"
	+ "ДоговорКомиссии,"
	+ "ВалютаРасчетовСКомитентом,"
	+ "Номенклатура,"
	+ "СуммаБезНДСРуб,"
	+ "СуммаНДСРуб,"
	+ "СтавкаНДС,"
	+ "СчетРасчетовСКомитентом";
	
	Параметры.Вставить("ТаблицаТоварыУслугиКомитентов", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТоварыУслугиКомитентов, СписокОбязательныхКолонок));	
	
	Возврат Параметры;
	
КонецФункции	

// Формирование движений при оказании услуг
//
Процедура СформироватьДвиженияОказаниеУслуг(ТаблицаРеализованныеТоварыУслуги, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыОказаниеУслуг(ТаблицаРеализованныеТоварыУслуги, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	
	ВедетсяУчетНДСПоФЗ134 = ВедетсяУчетНДСПоФЗ134(Реквизиты.Период);
	
	ЗаполнитьВидыЦенностей(Параметры.РеализованныеТоварыУслуги, Неопределено, "СчетУчета");

	// ТаблицаНачисленийДляНДС = Параметры.РеализованныеТоварыУслуги.Скопировать(Новый Структура("ВыданСФ", Истина));
	ТаблицаНачисленийДляНДС = Параметры.РеализованныеТоварыУслуги.Скопировать();
		
	Если НЕ ПлательщикНДС Тогда
		
		Если ВедетсяУчетНДСПоФЗ134
			И ТаблицаНачисленийДляНДС.Итог("СуммаНДСРуб") <> 0 Тогда
			
			ПодготовитьТаблицуДляНачисленияНДСНеплательщиком(ТаблицаНачисленийДляНДС);

		Иначе	
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	РаздельныйУчетНДС	= УчетнаяПолитика.РаздельныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	ВерсияУчетаНДС		= УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	УпрощенныйУчетНДС	= ВерсияУчетаНДС = 1 И УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	
	Если НЕ Реквизиты.ДеятельностьНаПатенте Тогда
	
		Если ВерсияУчетаНДС = 1 Тогда
			
			Если УпрощенныйУчетНДС Тогда
				// Организация ведет упрощенный учет НДС 
				СформироватьДвиженияНДСЗаписиКнигиПродажОказаниеУслуг(
					ТаблицаНачисленийДляНДС, Реквизиты, Движения, Отказ);
			Иначе

				УчетНДСПереопределяемый.СформироватьДвиженияНДСНачисленныйОказаниеУслуг(
					ТаблицаНачисленийДляНДС, Реквизиты, Движения, Отказ);
				
				Если РаздельныйУчетНДС Тогда
				     // Организация осуществляет реализацию без НДС или с НДС 0% 
					СформироватьДвиженияНДСРеализация0ОказаниеУслуг(
						ТаблицаНачисленийДляНДС, Реквизиты, Движения, Отказ);
				КонецЕсли;		
					
			КонецЕсли;
				
		Иначе	
			
			СформироватьДвиженияНДСЗаписиКнигиПродажОказаниеУслуг(
				ТаблицаНачисленийДляНДС, Реквизиты, Движения, Отказ);
				
			Если РаздельныйУчетНДС Тогда
			    // Организация осуществляет реализацию без НДС или с НДС 0% 
				СформироватьДвиженияНДСРеализация0ОказаниеУслуг(
					ТаблицаНачисленийДляНДС, Реквизиты, Движения, Отказ);
			КонецЕсли;
		
		КонецЕсли;
	
		СформироватьПроводкиРеализацияТоваровУслуг(Параметры.РеализованныеТоварыУслуги, Реквизиты, Движения, Отказ);
	
	КонецЕсли; 

КонецПроцедуры

Функция ПодготовитьПараметрыОказаниеУслуг(ТаблицаРеализованныеТоварыУслуги, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"					// <Дата>
	+ "Регистратор,"			// <ДокументСсылка>
	+ "Организация,"				// <СправочникСсылка.Организации>
	+ "ДеятельностьНаПатенте"	// <Булево> - признак деятельности на патенте
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	// Необходимость включения/исключения НДС Из стоимости при реализации определяется ставкой НДС партии товара
	// и ставкой НДС, указанной в документе реализации
	Параметры.Реквизиты.Колонки.Добавить("НДСВСтоимостиТоваров");
	Параметры.Реквизиты.ЗаполнитьЗначения(Неопределено, "НДСВСтоимостиТоваров");
	// Для списания на расходы ранее принятого к вычету НДС при реализации используются счет и аналитика списания товара
	Параметры.Реквизиты.Колонки.Добавить("СписыватьНДСнаКорСчетИАналитикуТовара", Новый ОписаниеТипов("Булево"));
	Параметры.Реквизиты.ЗаполнитьЗначения(Истина, "СписыватьНДСнаКорСчетИАналитикуТовара");

	// Подготовка таблицы реализованных товаров и услуг:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "НомерСтроки,"
	+ "Номенклатура,"
	+ "Содержание,"
	+ "Количество,"
	+ "СуммаВзаиморасчетов,"
	+ "СуммаБезНДСРуб,"
	+ "СуммаБУ,"
	+ "СуммаНДСРуб,"
	+ "СчетУчета,"
	+ "СчетДоходов,"
	+ "Субконто,"
	+ "СтавкаНДС,"
	+ "СчетУчетаНДСПоРеализации,"
	+ "Контрагент,"
	+ "СчетФактура,"
	+ "ВыданСФ,"
	+ "ВалютаВзаиморасчетов,"
	+ "Подразделение"
	;
	Параметры.Вставить("РеализованныеТоварыУслуги", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеализованныеТоварыУслуги, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции

// Формирование движений при отгрузке без перехода права собственности
//
Процедура СформироватьДвиженияОтгрузкаБезПереходаПраваСобственности(ТаблицаОтгрузка, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если ТаблицаОтгрузка = Неопределено
		ИЛИ ТаблицаОтгрузка.Количество() = 0 
		ИЛИ ТаблицаРеквизиты = Неопределено
		ИЛИ ТаблицаРеквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	ВедетсяУчетНДСПоФЗ134 = ВедетсяУчетНДСПоФЗ134(Реквизиты.Период);
	
	Если НЕ ПлательщикНДС И НЕ ВедетсяУчетНДСПоФЗ134 Тогда
		Возврат;
	КонецЕсли;
	
	НачислятьНДСПоОтгрузке = УчетнаяПолитика.НачислятьНДСПоОтгрузке(Реквизиты.Организация, Реквизиты.Период);

	// В процедуры реализации и отгрузки передаются все таблицы в исходном виде
	Если НачислятьНДСПоОтгрузке Тогда
		СформироватьДвиженияРеализацияТоваровУслуг(
			ТаблицаОтгрузка, ТаблицаОтгрузка, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты, Движения, Отказ);
	Иначе
		УчетНДСПереопределяемый.СформироватьДвиженияОтгрузкаТоваров(
			ТаблицаОтгрузка, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты, Движения, Отказ);
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьДвиженияРеализацияОтгруженныхТоваров(ТаблицаРеализованныеТовары, ТаблицаТовары, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыРеализацияОтгруженныхТоваров(ТаблицаРеализованныеТовары, ТаблицаТовары, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	ВедетсяУчетНДСПоФЗ134 = ВедетсяУчетНДСПоФЗ134(Реквизиты.Период);
	
	Если НЕ ПлательщикНДС И НЕ ВедетсяУчетНДСПоФЗ134 Тогда
		Возврат;
	КонецЕсли;
	
	ДатаОснования = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Реквизиты.ДокументОтгрузки, "Дата");
	
	НачислятьНДСПоОтгрузке = ?(ТипЗнч(Реквизиты.ДокументОтгрузки) = Тип("ДокументСсылка.ПередачаОС"),
		УчетнаяПолитика.НачислятьНДСПриПередачеНедвижимости(Реквизиты.Организация, ДатаОснования),
		УчетнаяПолитика.НачислятьНДСПоОтгрузке(Реквизиты.Организация, ДатаОснования));

	Если НачислятьНДСПоОтгрузке Тогда
		СформироватьПроводкиРеализацияОтгруженныхТоваров(Параметры.РеализованныеТовары, Реквизиты, Движения, Отказ);
	Иначе
		// Таблицы реализации и списанных партий передаются в исходном виде,
		// а таблица товаров - с добавленными пустыми колонккми ГТД
		СформироватьДвиженияРеализацияТоваровУслуг(
			ТаблицаРеализованныеТовары, Параметры.Товары, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты, Движения, Отказ);
	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыРеализацияОтгруженныхТоваров(ТаблицаРеализованныеТовары, ТаблицаТовары, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"				// <Дата>
	+ "Регистратор,"		// <ДокументСсылка>
	+ "Организация,"		// <СправочникСсылка.Организации>
	+ "Контрагент,"			// <СправочникСсылка.Контрагенты>
	+ "ДокументОтгрузки"	// <ДокументСсылка.РеализацияТоваровУслуг>
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Подготовка таблицы сумм НДС по реализованным товарам:
	СписокОбязательныхКолонок = ""
	+ "Номенклатура,"
	+ "СчетУчетаНДСПоРеализации,"
	+ "СтавкаНДС,"
	+ "Субконто,"
	+ "Подразделение,"
	+ "СуммаНДСРуб"
	;
	Параметры.Вставить("РеализованныеТовары", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеализованныеТовары, СписокОбязательныхКолонок));

	// Подготовка таблицы Товары

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"            // <Строка> - имя табличной части документа
	+ "СинонимСписка,"        // <Строка> - синоним табличной части документа
	+ "НомерСтрокиДокумента," // <Число,10,0> - номер строки документа
	+ "Номенклатура,"         // <СправочникСсылка.Номенклатура>
	+ "СтавкаНДС,"            // <ПеречислениеСсылка.СтавкиНДС>
	+ "СчетУчета,"            // <ПланСчетовСсылка.Хозрасчетный> - счет учета товара
	+ "Количество"	          // <Число,15,3>
	;
	Параметры.Вставить("Товары", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТовары, СписокОбязательныхКолонок));
	// ГТД были списаны при отгрузке, поэтому добавляем пустые колонки
	Параметры.Товары.Колонки.Добавить("НомерГТД",            Новый ОписаниеТипов("СправочникСсылка.НомераГТД"));
	Параметры.Товары.Колонки.Добавить("СтранаПроисхождения", Новый ОписаниеТипов("СправочникСсылка.СтраныМира"));

	Возврат Параметры;

КонецФункции

// Формирование движений по начислению НДС для розничной реализации в НТТ при учете по продажной стоимости
//
Процедура СформироватьДвиженияРозничнаяВыручка(ТаблицаНачислениеНДС, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыДвиженияРозничнаяВыручка(ТаблицаНачислениеНДС, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	Если Параметры.ТаблицаНачислениеНДС.Количество() =0 Тогда
		Возврат
	КонецЕсли;
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	ВедетсяУчетНДСПоФЗ134 = ВедетсяУчетНДСПоФЗ134(Реквизиты.Период);
	
	Если НЕ ПлательщикНДС Тогда
		
		Если ВедетсяУчетНДСПоФЗ134
			И Параметры.ТаблицаНачислениеНДС.Итог("НДС") <> 0 Тогда
			
			ПодготовитьТаблицуДляНачисленияНДСНеплательщиком(Параметры.ТаблицаНачислениеНДС);

		Иначе	
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	СформироватьПроводкиРозничнаяВыручка(Параметры.ТаблицаНачислениеНДС, Движения, Отказ);

	СпособОценкиТоваровВРознице	= УчетнаяПолитика.СпособОценкиТоваровВРознице(Реквизиты.Организация, Реквизиты.Период);
	
	РаздельныйУчетНДС = УчетнаяПолитика.РаздельныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
    ВерсияУчетаНДС    = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	УпрощенныйУчетНДС = ВерсияУчетаНДС = 1 И УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	
	Если СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости Тогда

		Если  ВерсияУчетаНДС = 1 Тогда
			
			Если УпрощенныйУчетНДС Тогда
				СформироватьДвиженияНДСЗаписиКнигиПродажРозничнаяПродажа(Параметры.ТаблицаНачислениеНДС, Движения, Отказ);
			Иначе
				УчетНДСПереопределяемый.СформироватьДвиженияНДСНачисленныйРозничнаяПродажа(Параметры.ТаблицаНачислениеНДС, Движения, Отказ);	
			КонецЕсли;
			
		Иначе	
			
			СформироватьДвиженияНДСЗаписиКнигиПродажРозничнаяПродажа(Параметры.ТаблицаНачислениеНДС, Движения, Отказ);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыДвиженияРозничнаяВыручка(ТаблицаНачислениеНДС, ТаблицаРеквизиты)

	Параметры = Новый Структура;
	
	// Подготовка таблицы ТаблицаНачислениеНДС
	СписокОбязательныхКолонок = ""
	+ "Период,"				// <Дата>
	+ "Организация,"		// <СправочникСсылка.Организации>
	+ "Подразделение,"		// <Ссылка на справочник подразделений>
	+ "ДокументОснование,"	// <ДокументСсылка.*>
	+ "СуммаБезНДС,"		// <Число, 15, 2> - сумма выручки без НДС в рублях
	+ "НДС,"				// <Число, 15, 2> - сумма НДС в рублях
	+ "СтавкаНДС,"			// <ПеречислениеСсылка.СтавкиНДС> - ставка НДС
	+ "СчетУчетаНДС," 		// <ПланСчетовСсылка.Хозрасчетный> - счет учета НДС
	+ "СчетДоходов," 		// <ПланСчетовСсылка.Хозрасчетный> - счет доходов
	+ "Субконто,"			// <СправочникСсылка.НоменклатурныеГруппы> - номенклатурная группа розничной выручки
	+ "Содержание"			// <Строка> - содержание операции
	;
	Параметры.Вставить("ТаблицаНачислениеНДС", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаНачислениеНДС, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Реквизиты
	СписокОбязательныхКолонок = ""
	+ "Период,"				// <Дата>
	+ "Регистратор,"		// <ДокументСсылка>
	+ "Организация"			// <СправочникСсылка.Организации>
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции

// Формирование движений по розничной реализации товаров и услуг (АТТ всегда, НТТ при учете по стоимости поступления)
//
Процедура СформироватьДвиженияРозничнаяРеализацияТоваровУслуг(ТаблицаРеализованныеТоварыУслуги, ТаблицаТовары, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	СформироватьДвиженияРеализацияТоваровУслуг(ТаблицаРеализованныеТоварыУслуги, ТаблицаТовары, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты, Движения, Отказ);

КонецПроцедуры

// Формирование движений по реализации при возврате товаров поставщику
//
Процедура СформироватьДвиженияВозвратТоваровПоставщику(ТаблицаРеализованныеТоварыУслуги, ТаблицаТовары, ТаблицаСписаниеГТД, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыВозвратТоваровПоставщику(
		ТаблицаРеализованныеТоварыУслуги, ТаблицаТовары, ТаблицаСписаниеГТД, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	УчетНДСПереопределяемый.СформироватьПроводкиСписаниеГТД(Параметры.СписаниеГТД, Реквизиты, Движения, Отказ);
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	ВедетсяУчетНДСПоФЗ134 = ВедетсяУчетНДСПоФЗ134(Реквизиты.Период);
	
	Если НЕ ПлательщикНДС Тогда
		
		Если ВедетсяУчетНДСПоФЗ134
			И Параметры.РеализованныеТовары.Итог("СуммаНДСРуб") <> 0 Тогда
			
			ПодготовитьТаблицуДляНачисленияНДСНеплательщиком(Параметры.РеализованныеТовары);

		Иначе	
			Возврат;
		КонецЕсли;
		
	КонецЕсли;

	ЗаполнитьВидыЦенностей(Параметры.РеализованныеТовары, Неопределено, "СчетУчета");

	РаздельныйУчетНДС = УчетнаяПолитика.РаздельныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	ВерсияУчетаНДС    = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	УпрощенныйУчетНДС = ВерсияУчетаНДС = 1 И УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	
	Если ВерсияУчетаНДС = 1 Тогда
		
		Если УпрощенныйУчетНДС Тогда
			// Организация ведет упрощенный учет НДС
			СформироватьДвиженияНДСЗаписиКнигиПродажВозвратТоваровПоставщику(
				Параметры.РеализованныеТовары, Реквизиты, Движения, Отказ);
		Иначе	
			УчетНДСПереопределяемый.СформироватьДвиженияНДСНачисленныйРеализацияТоваровУслуг(
				Параметры.РеализованныеТовары, Реквизиты, Движения, Отказ);
		КонецЕсли;
		
	Иначе	
		
		СформироватьДвиженияНДСЗаписиКнигиПродажРеализацияТоваровУслуг(
			Параметры.РеализованныеТовары, Реквизиты, Движения, Отказ);
				
		Если РаздельныйУчетНДС Тогда
			// Организация осуществляет реализацию без НДС или с НДС 0% 
			СформироватьДвиженияНДСРеализация0РеализацияТоваровУслуг(
				Параметры.РеализованныеТовары, Реквизиты, Движения, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	СформироватьПроводкиВозвратТоваровПоставщику(Параметры.РеализованныеТовары, Реквизиты, Движения, Отказ);
	
	// Списание товаров

	Если НЕ УпрощенныйУчетНДС Тогда

		Если РаздельныйУчетНДС Тогда
			СписанныеПартииНДС = УчетНДСПереопределяемый.ПолучитьТаблицуСписанныеПартииНДС(
				Параметры.Товары, Параметры.СписанныеТоварыБухУчет, Реквизиты, Отказ);
			УчетНДСПереопределяемый.СформироватьДвиженияВыбытиеТоваров(
				СписанныеПартииНДС, Параметры.СписанныеТоварыБухУчет, Реквизиты, Движения, Отказ);
		Иначе
			ЗаполнитьВидыЦенностей(Параметры.Товары, Неопределено, "СчетУчета");
			Параметры.Товары.Индексы.Добавить("ВидЦенности");
			ОсновныеСредства   = Параметры.Товары.Скопировать(Новый Структура("ВидЦенности", Перечисления.ВидыЦенностей.ОС));
			СписанныеПартииНДС = УчетНДСПереопределяемый.ПолучитьТаблицуСписанныеПартииНДС(
				ОсновныеСредства, Параметры.СписанныеТоварыБухУчет, Реквизиты, Отказ);
			УчетНДСПереопределяемый.СформироватьДвиженияВыбытиеТоваров(
				СписанныеПартииНДС, Параметры.СписанныеТоварыБухУчет, Реквизиты, Движения, Отказ);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыВозвратТоваровПоставщику(ТаблицаРеализованныеТовары, ТаблицаТовары, ТаблицаСписаниеГТД, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"					// <Дата>
	+ "Регистратор,"			// <ДокументСсылка>
	+ "Организация,"			// <СправочникСсылка.Организации>
	+ "НДСВключенВСтоимость"	// 
	;
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	Параметры.Реквизиты.Колонки.Добавить("НДСВСтоимостиТоваров");
	Параметры.Реквизиты.ЗаполнитьЗначения(Неопределено, "НДСВСтоимостиТоваров");
	// Для списания на расходы ранее принятого к вычету НДС при реализации используются счет и аналитика списания товара
	Параметры.Реквизиты.Колонки.Добавить("СписыватьНДСнаКорСчетИАналитикуТовара", Новый ОписаниеТипов("Булево"));
	Параметры.Реквизиты.ЗаполнитьЗначения(Истина, "СписыватьНДСнаКорСчетИАналитикуТовара");

	// Подготовка таблицы реализованных товаров:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "НомерСтроки,"
	+ "Номенклатура,"
	+ "Содержание,"
	+ "Количество,"
	+ "СуммаВзаиморасчетов,"
	+ "СуммаРуб,"
	+ "СуммаБУ,"
	+ "СуммаБезНДСРуб,"
	+ "СуммаНДСРуб,"
	+ "СуммаНДСВзаиморасчетов,"
	+ "СчетУчета,"
	+ "СтавкаНДС,"
	+ "СчетУчетаНДСПоРеализации,"
	+ "Контрагент,"
	+ "ДоговорКонтрагента,"
	+ "ВалютаВзаиморасчетов,"
	+ "Подразделение"
	;
	Параметры.Вставить("РеализованныеТовары", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеализованныеТовары, СписокОбязательныхКолонок));
	// Счет доходов при возврате не заполняется
	Параметры.РеализованныеТовары.Колонки.Добавить("СчетДоходов", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));

	// Подготовка таблицы Товары

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"            // <Строка> - имя табличной части документа
	+ "СинонимСписка,"        // <Строка> - синоним табличной части документа
	+ "НомерСтрокиДокумента," // <Число,10,0> - номер строки документа
	+ "Номенклатура,"         // <СправочникСсылка.Номенклатура>
	+ "СчетУчета,"            // <ПланСчетовСсылка.Хозрасчетный> - счет учета товара
	+ "СтавкаНДС,"            // <ПеречислениеСсылка.СтавкиНДС> - ставка НДС, указанная в документе
	+ "НомерГТД,"             // <СправочникСсылка.НомераГТД>
	+ "СтранаПроисхождения,"  // <СправочникСсылка.СтраныМира>
	+ "Количество"	          // <Число,15,3>
	;
	Параметры.Вставить("Товары", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТовары, СписокОбязательныхКолонок));
		
	Параметры.Вставить("СписаниеГТД", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСписаниеГТД, СписокОбязательныхКолонок));
		
	// В таблице списанных партий СтавкаНДС используется для ставки, указанной в документе поступления товара.
	// Она может отличаться от ставки НДС документа реализации, поэтому ставку реализации переименовываем
	Если Параметры.Товары.Количество() > 0 Тогда
		Параметры.Товары.Колонки.СтавкаНДС.Имя = "СтавкаНДСДокумента";
	КонецЕсли;

	// Подготовка таблицы списанных товаров по данным бух.учета:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "СинонимСписка,"
	+ "НомерСтроки,"
	+ "СчетУчета,"
	+ "Номенклатура,"
	+ "Склад,"
	+ "Партия,"
	+ "Количество,"
	+ "КорСчетСписания,"
	+ "ВидКорСубконто1,"
	+ "ВидКорСубконто2,"
	+ "ВидКорСубконто3,"
	+ "КорСубконто1,"
	+ "КорСубконто2,"
	+ "КорСубконто3,"
	+ "КорПодразделение,"
	+ "Подразделение"
	;
	Параметры.Вставить("СписанныеТоварыБухУчет", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСписанныеТоварыБухУчет, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// Формирование записей книги продаж

Процедура СформироватьДвиженияНачислениеНДСНачислениеНДСПоРеализации(ТаблицаРеквизиты, ТаблицаПоРеализации, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыНачислениеНДСПоРеализации(ТаблицаРеквизиты, ТаблицаПоРеализации);
	Реквизиты = Параметры.Реквизиты[0];

	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	Если НЕ ПлательщикНДС Тогда
		Возврат;
	КонецЕсли;
	
	ВерсияУчетаНДС    = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	УпрощенныйУчетНДС = ВерсияУчетаНДС = 1 И УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	
	Если ВерсияУчетаНДС = 1 Тогда
		
		Если НЕ УпрощенныйУчетНДС Тогда

			Если Реквизиты.Реализация0 Тогда

				// НДС реализация 0%
				СформироватьДвиженияНДСРеализация0НачислениеНДСПоРеализации0(Реквизиты, Параметры.ТаблицаПоРеализации, Движения, Отказ);

			КонецЕсли;

			// НДС начисленный
			УчетНДСПереопределяемый.СформироватьДвиженияНДСНачисленныйНачислениеНДСПоРеализации(Реквизиты, Параметры.ТаблицаПоРеализации, Движения, Отказ);

			Если НЕ Реквизиты.ФормироватьСторнирующиеЗаписиДопЛистовВручную Тогда
				ДополнитьСторнирующимиЗаписямиДопЛистов(Параметры.ТаблицаПоРеализации)
			КонецЕсли;

			// НДС записи книги продаж
			СформироватьДвиженияНДСЗаписиКнигиПродажНачислениеНДСПоРеализации(Параметры.ТаблицаПоРеализации, Движения, Отказ);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыНачислениеНДСПоРеализации(ТаблицаРеквизиты, ТаблицаПоРеализации)

	Параметры = Новый Структура;

	// Реквизиты шапки документа:
	ОбязательныеКолонки = ""
	+ "Организация,"
	+ "Период,"
	+ "Реализация0,"
	+ "ФормироватьСторнирующиеЗаписиДопЛистовВручную";

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, ОбязательныеКолонки));

	ОбязательныеКолонки = ""
	+ "СчетФактура,"				// <ДокументСсылка...>  - документ, являющийся основанием для счета-фактуры
	+ "Покупатель,"					// <СправочникСсылка.Контрагенты> контрагент для взаиморасчетов
	+ "ДоговорКонтрагента,"
	+ "НДС,"						// <Число> - сумма НДС;
	+ "СуммаБезНДС,"				// <Число> - сумма без НДС по определенной ставке НДС;
	+ "СтавкаНДС,"					// <перечислениеСсылка.СтавкаНДС> - ставка НДС;
	+ "Состояние,"
	+ "ВидНачисления,"
	+ "Событие,"
	+ "ДатаСобытия,"
	+ "ДатаОплаты,"
    + "ВидЦенности,"
	+ "ЗаписьДополнительногоЛиста,"
	+ "СторнирующаяЗаписьДопЛиста,"
	+ "КорректируемыйПериод,"
	+ "Период,"						// <Дата> формирования движений (период)
	+ "Регистратор,"				// <ДокументСсылка.СчетФактураПолученный> - проводимый документ
	+ "Организация";				// <СправочникСсылка.Организации>

	Параметры.Вставить("ТаблицаПоРеализации", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаПоРеализации, ОбязательныеКолонки));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияНачислениеНДСПоНДСНачисленномуКУплате(ТаблицаРеквизиты, ТаблицаПоРеализации, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыНачислениеНДСПоНДСНачисленномуКУплате(ТаблицаРеквизиты, ТаблицаПоРеализации);
	Реквизиты = Параметры.Реквизиты[0];

	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	Если НЕ ПлательщикНДС Тогда
		Возврат;
	КонецЕсли;
	
	ВерсияУчетаНДС    = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	УпрощенныйУчетНДС = ВерсияУчетаНДС = 1 И УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	
	Если ВерсияУчетаНДС = 1 Тогда
			
		Если НЕ УпрощенныйУчетНДС Тогда

			// НДС начисленный
			УчетНДСПереопределяемый.СформироватьДвиженияНДСНачисленныйНачислениеНДСПоРеализации(Реквизиты, Параметры.ТаблицаПоРеализации, Движения, Отказ);

			Если НЕ Реквизиты.ФормироватьСторнирующиеЗаписиДопЛистовВручную Тогда
				ДополнитьСторнирующимиЗаписямиДопЛистов(Параметры.ТаблицаПоРеализации)
			КонецЕсли;

			// НДС записи книги продаж
			СформироватьДвиженияНДСЗаписиКнигиПродажНачислениеНДСПоРеализации(Параметры.ТаблицаПоРеализации, Движения, Отказ);

		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыНачислениеНДСПоНДСНачисленномуКУплате(ТаблицаРеквизиты, ТаблицаПоРеализации)

	Параметры = Новый Структура;

	// Реквизиты шапки документа:
	ОбязательныеКолонки = ""
	+ "Организация,"
	+ "Период,"
	+ "ФормироватьСторнирующиеЗаписиДопЛистовВручную";

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, ОбязательныеКолонки));

	ОбязательныеКолонки = ""
	+ "СчетФактура,"				// <ДокументСсылка...>  - документ, являющийся основанием для счета-фактуры
	+ "Покупатель,"					// <СправочникСсылка.Контрагенты> контрагент для взаиморасчетов
	+ "ДоговорКонтрагента,"
	+ "НДС,"						// <Число> - сумма НДС;
	+ "СуммаБезНДС,"				// <Число> - сумма без НДС по определенной ставке НДС;
	+ "СтавкаНДС,"					// <перечислениеСсылка.СтавкаНДС> - ставка НДС;
	+ "ВидНачисления,"
	+ "ДокументОплаты,"
	+ "ДатаОплаты,"
	+ "Событие,"
	+ "ДатаСобытия,"
	+ "ВидЦенности,"
	+ "ЗаписьДополнительногоЛиста,"
	+ "СторнирующаяЗаписьДопЛиста,"
	+ "КорректируемыйПериод,"
	+ "Период,"						// <Дата> формирования движений (период)
	+ "Регистратор,"				// <ДокументСсылка.СчетФактураПолученный> - проводимый документ
	+ "Организация";				// <СправочникСсылка.Организации>

	Параметры.Вставить("ТаблицаПоРеализации", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаПоРеализации, ОбязательныеКолонки));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияНачислениеНДСНеОтражаютсяВКниге(ТаблицаРеквизиты, ТаблицаПоРеализации, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыНачислениеНДСНеОтражаютсяВКниге(ТаблицаРеквизиты, ТаблицаПоРеализации);
	Реквизиты = Параметры.Реквизиты[0];

	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	Если НЕ ПлательщикНДС Тогда
		Возврат;
	КонецЕсли;
	
	ВерсияУчетаНДС    = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	УпрощенныйУчетНДС = ВерсияУчетаНДС = 1 И УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	
	Если ВерсияУчетаНДС = 1 Тогда
			
		Если НЕ УпрощенныйУчетНДС Тогда
    	
			// НДС начисленный
			УчетНДСПереопределяемый.СформироватьДвиженияНДСНачисленныйНачислениеНДСПоРеализации(Реквизиты, Параметры.ТаблицаПоРеализации, Движения, Отказ);
		
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыНачислениеНДСНеОтражаютсяВКниге(ТаблицаРеквизиты, ТаблицаПоРеализации)

	Параметры = Новый Структура;

	// Реквизиты шапки документа:
	ОбязательныеКолонки = ""
	+ "Организация,"
	+ "Период,"
	+ "ФормироватьСторнирующиеЗаписиДопЛистовВручную";

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, ОбязательныеКолонки));

	ОбязательныеКолонки = ""
	+ "СчетФактура,"				// <ДокументСсылка...>  - документ, являющийся основанием для счета-фактуры
	+ "Покупатель,"					// <СправочникСсылка.Контрагенты> контрагент для взаиморасчетов
	+ "НДС,"						// <Число> - сумма НДС;
	+ "СуммаБезНДС,"				// <Число> - сумма без НДС по определенной ставке НДС;
	+ "СтавкаНДС,"					// <перечислениеСсылка.СтавкаНДС> - ставка НДС;
	+ "ВидНачисления,"
	+ "Событие,"
	+ "ДатаСобытия,"
	+ "ВидЦенности,"
	+ "Период,"						// <Дата> формирования движений (период)
	+ "Регистратор,"				// <ДокументСсылка.СчетФактураПолученный> - проводимый документ
	+ "Организация";				// <СправочникСсылка.Организации>

	Параметры.Вставить("ТаблицаПоРеализации", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаПоРеализации, ОбязательныеКолонки));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияНачислениеНДСВосстановлениеНДС(ТаблицаРеквизиты, ТаблицаПоРеализации, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыНачислениеНДСВосстановлениеНДС(ТаблицаРеквизиты, ТаблицаПоРеализации);
	Реквизиты = Параметры.Реквизиты[0];

	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	Если НЕ ПлательщикНДС Тогда
		Возврат;
	КонецЕсли;
	
	ВерсияУчетаНДС    = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	УпрощенныйУчетНДС = ВерсияУчетаНДС = 1 И УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	
	Если ВерсияУчетаНДС = 1 Тогда
				
		Если НЕ УпрощенныйУчетНДС Тогда

			// НДС начисленный
			УчетНДСПереопределяемый.СформироватьДвиженияНДСНачисленныйНачислениеНДСПоРеализации(Реквизиты, Параметры.ТаблицаПоРеализации, Движения, Отказ);

			// Проводка Дт 19.х Кт 68.02
			СформироватьПроводкиВосстановлениеНДСПоПрочимОперациям(Параметры.ТаблицаПоРеализации, Движения, Отказ);

			Если НЕ Реквизиты.ФормироватьСторнирующиеЗаписиДопЛистовВручную Тогда
				ДополнитьСторнирующимиЗаписямиДопЛистов(Параметры.ТаблицаПоРеализации)
			КонецЕсли;

			// НДС записи книги продаж
			СформироватьДвиженияНДСЗаписиКнигиПродажНачислениеНДСПоРеализации(Параметры.ТаблицаПоРеализации, Движения, Отказ);

		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыНачислениеНДСВосстановлениеНДС(ТаблицаРеквизиты, ТаблицаПоРеализации)

	Параметры = Новый Структура;

	// Реквизиты шапки документа:
	ОбязательныеКолонки = ""
	+ "Организация,"
	+ "Период,"
	+ "ФормироватьСторнирующиеЗаписиДопЛистовВручную";

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, ОбязательныеКолонки));

	ОбязательныеКолонки = ""
	+ "СчетФактура,"				// <ДокументСсылка...>  - документ, являющийся основанием для счета-фактуры
	+ "Покупатель,"					// <СправочникСсылка.Контрагенты> контрагент для взаиморасчетов
	+ "ДоговорКонтрагента,"
	+ "НДС,"						// <Число> - сумма НДС;
	+ "СуммаБезНДС,"				// <Число> - сумма без НДС по определенной ставке НДС;
	+ "СтавкаНДС,"					// <перечислениеСсылка.СтавкаНДС> - ставка НДС;
	+ "СчетУчетаНДС,"
	+ "ВидНачисления,"
	+ "ВидЦенности,"
	+ "Событие,"
	+ "ДатаСобытия,"
	+ "ЗаписьДополнительногоЛиста,"
	+ "СторнирующаяЗаписьДопЛиста,"
	+ "КорректируемыйПериод,"
	+ "Период,"						// <Дата> формирования движений (период)
	+ "Регистратор,"				// <ДокументСсылка.СчетФактураПолученный> - проводимый документ
	+ "Организация";				// <СправочникСсылка.Организации>

	Параметры.Вставить("ТаблицаПоРеализации", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаПоРеализации, ОбязательныеКолонки));

	Возврат Параметры;

КонецФункции

Процедура ДополнитьСторнирующимиЗаписямиДопЛистов(ТаблицаДвижений, РучнаяОперация = Ложь) Экспорт

	Если ТаблицаДвижений.Найти(Истина, "ЗаписьДополнительногоЛиста") = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СвернутаяТаблицаЗаписейДопЛиста = ТаблицаДвижений.Скопировать();

	Для каждого ТекущаяСтрока Из СвернутаяТаблицаЗаписейДопЛиста Цикл
		// Авансы отрабатываются с учетом ставки НДС (на каждую ставку отдельный счет-фактура)
		Если НЕ (ТекущаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные
			ИЛИ ТекущаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные0
			ИЛИ ТекущаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.ВозвратАвансовПолученных
			ИЛИ ТекущаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.АвансыВыданные) Тогда

			ТекущаяСтрока.СтавкаНДС = Неопределено;

		КонецЕсли;
		// Авансы и налоговый агент (комитент) отрабатываются с учетом договора (на каждуй
		// договор отдельный счет-фактура или отдельное лист декларации)
		Если НЕ (ТекущаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные
			ИЛИ ТекущаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные0
			ИЛИ ТекущаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.ВозвратАвансовПолученных
			ИЛИ ТекущаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент
			ИЛИ ТекущаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.АвансыВыданные) Тогда

			// Авансы отрабатываются с учетом ставки НДС (на каждую ставку отдельный счет-фактура)
			ТекущаяСтрока.ДоговорКонтрагента = Неопределено;

		КонецЕсли;
	КонецЦикла;

	СвернутаяТаблицаЗаписейДопЛиста.Свернуть("Период, Организация, Регистратор, СчетФактура, СтавкаНДС, ДоговорКонтрагента, ЗаписьДополнительногоЛиста, КорректируемыйПериод",
		"СуммаБезНДС, НДС");

	СтрокиДопЛистов = СвернутаяТаблицаЗаписейДопЛиста.НайтиСтроки(Новый Структура("ЗаписьДополнительногоЛиста", Истина));

	ОтработанныеСФпоПериодам = Новый ТаблицаЗначений();
	ОтработанныеСФпоПериодам.Колонки.Добавить("СчетФактура");
	ОтработанныеСФпоПериодам.Колонки.Добавить("НалоговыйПериод");
	ОтработанныеСФпоПериодам.Колонки.Добавить("СтавкаНДС");
	ОтработанныеСФпоПериодам.Колонки.Добавить("ДоговорКонтрагента");

	Для каждого СтрокаДопЛиста Из СтрокиДопЛистов Цикл

		НачалоНалоговогоПериодаКорректировки = НачалоКвартала(СтрокаДопЛиста.КорректируемыйПериод);
		ОтборОтработанныхЗаписей = Новый Структура("СчетФактура, НалоговыйПериод", СтрокаДопЛиста.СчетФактура, НачалоНалоговогоПериодаКорректировки);

		Если ЗначениеЗаполнено(СтрокаДопЛиста.СтавкаНДС) Тогда
			ОтборОтработанныхЗаписей.Вставить("СтавкаНДС", СтрокаДопЛиста.СтавкаНДС);
		КонецЕсли;

		Если ЗначениеЗаполнено(СтрокаДопЛиста.ДоговорКонтрагента) Тогда
			ОтборОтработанныхЗаписей.Вставить("ДоговорКонтрагента", СтрокаДопЛиста.ДоговорКонтрагента);
		КонецЕсли;

		Если НЕ (ОтработанныеСФпоПериодам.НайтиСтроки(ОтборОтработанныхЗаписей).Количество() = 0) Тогда
			// СФ по данному налоговому периоду уже отработан
			Продолжить;
		Иначе
			НоваяЗапись = ОтработанныеСФпоПериодам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ОтборОтработанныхЗаписей);
		КонецЕсли;

		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	НДСЗаписиКнигиПродажОбороты.Организация,
		|	НДСЗаписиКнигиПродажОбороты.Покупатель,
		|	НДСЗаписиКнигиПродажОбороты.СчетФактура,
		|	НДСЗаписиКнигиПродажОбороты.ВидЦенности,
		|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС,
		|	НДСЗаписиКнигиПродажОбороты.ДатаОплаты,
		|	НДСЗаписиКнигиПродажОбороты.ДокументОплаты,
		|	НДСЗаписиКнигиПродажОбороты.Событие,
		|	НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот * -1 КАК СуммаБезНДССторно,
		|	НДСЗаписиКнигиПродажОбороты.НДСОборот * -1 КАК НДССторно,
		|	НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КАК СуммаБезНДС,
		|	НДСЗаписиКнигиПродажОбороты.НДСОборот КАК НДС,
		|	НДСЗаписиКнигиПродажОбороты.ДоговорКонтрагента
		|ИЗ
		|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
		|			&НачалоПериода,
		|			&КонецПериодаГраница,
		|			Квартал,
		|			СчетФактура = &СчетФактура
		|				И ВЫБОР
		|					КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ДоговорКонтрагента = &ДоговорКонтрагента
		|				КОНЕЦ
		|				И ВЫБОР
		|					КОГДА &СтавкаНДС = НЕОПРЕДЕЛЕНО
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ СтавкаНДС = &СтавкаНДС
		|				КОНЕЦ) КАК НДСЗаписиКнигиПродажОбороты
		|ГДЕ
		|	((НЕ НДСЗаписиКнигиПродажОбороты.ЗаписьДополнительногоЛиста)
		|				И НДСЗаписиКнигиПродажОбороты.Период = &НачалоПериода
		|			ИЛИ НДСЗаписиКнигиПродажОбороты.ЗаписьДополнительногоЛиста
		|				И (НДСЗаписиКнигиПродажОбороты.КорректируемыйПериод МЕЖДУ &НачалоПериода И КОНЕЦПЕРИОДА(&НачалоПериода, МЕСЯЦ)))";

		Запрос.УстановитьПараметр("НачалоПериода", 		 НачалоНалоговогоПериодаКорректировки);
		Запрос.УстановитьПараметр("КонецПериода", 		 КонецДня(СтрокаДопЛиста.Период));
		Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(СтрокаДопЛиста.Период), ВидГраницы.Включая));
		Запрос.УстановитьПараметр("СчетФактура", 		 СтрокаДопЛиста.СчетФактура);
		Запрос.УстановитьПараметр("СтавкаНДС", ?		 (ЗначениеЗаполнено(СтрокаДопЛиста.СтавкаНДС), СтрокаДопЛиста.СтавкаНДС, Неопределено));
		Запрос.УстановитьПараметр("ДоговорКонтрагента",  ?(ЗначениеЗаполнено(СтрокаДопЛиста.ДоговорКонтрагента), СтрокаДопЛиста.ДоговорКонтрагента, Неопределено));

		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда

			ТаблицаЗаписей = Результат.Выгрузить();

			ТаблицаЗаписей.Колонки.Добавить("ЗаписьДополнительногоЛиста");
			ТаблицаЗаписей.Колонки.Добавить("КорректируемыйПериод");
			ТаблицаЗаписей.Колонки.Добавить("ДатаСобытия");
			ТаблицаЗаписей.Колонки.Добавить("СторнирующаяЗаписьДопЛиста");

			ТаблицаЗаписей.ЗаполнитьЗначения(Истина, "ЗаписьДополнительногоЛиста,СторнирующаяЗаписьДопЛиста");
			ТаблицаЗаписей.ЗаполнитьЗначения(СтрокаДопЛиста.КорректируемыйПериод, "КорректируемыйПериод");
			ТаблицаЗаписей.ЗаполнитьЗначения(СтрокаДопЛиста.Период, "ДатаСобытия");

			ТаблицаДвижений.Колонки.СуммаБезНДС.Имя = "СуммаБезНДССторно";
			ТаблицаДвижений.Колонки.НДС.Имя = "НДССторно";

			ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаЗаписей, ТаблицаДвижений);

			ТаблицаДвижений.Колонки.СуммаБезНДССторно.Имя = "СуммаБезНДС";
			ТаблицаДвижений.Колонки.НДССторно.Имя = "НДС";
						
			Если НЕ РучнаяОперация Тогда
				
				ТаблицаЗаписей.ЗаполнитьЗначения(Ложь, "СторнирующаяЗаписьДопЛиста");
				ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаЗаписей, ТаблицаДвижений);
				
			КонецЕсли;	

			ТаблицаДвижений.ЗаполнитьЗначения(СтрокаДопЛиста.Период, 	  "Период");
			ТаблицаДвижений.ЗаполнитьЗначения(СтрокаДопЛиста.Организация, "Организация");
			ТаблицаДвижений.ЗаполнитьЗначения(СтрокаДопЛиста.Регистратор, "Регистратор");

		КонецЕсли;

	КонецЦикла;

	ТаблицаДвижений.Свернуть("Период, Организация, Регистратор, ВидЦенности, Событие, ДатаСобытия, СчетФактура, СтавкаНДС,
							|Покупатель, ДоговорКонтрагента, ЗаписьДополнительногоЛиста, КорректируемыйПериод, СторнирующаяЗаписьДопЛиста",
							"СуммаБезНДС, НДС");

КонецПроцедуры

// Формирование движений по книге продаж при доплате по корректировке
Процедура СформироватьДвиженияКорректировкаКнигиПродажУвеличение(ТаблицаКорректировкаКнигиПродаж, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	Параметры = ПодготовитьПараметрыКорректировкаКнигиПродажУвеличение(ТаблицаКорректировкаКнигиПродаж, ТаблицаРеквизиты);
		
	Если Параметры.ТаблицаКорректировкаКнигиПродаж.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// НДС записи книги продаж
	СформироватьДвиженияНДСЗаписиКнигиПродажНачислениеНДСПоРеализации(Параметры.ТаблицаКорректировкаКнигиПродаж, Движения, Отказ);
	
КонецПроцедуры

Функция ПодготовитьПараметрыКорректировкаКнигиПродажУвеличение(ТаблицаКорректировкаКнигиПродаж, ТаблицаРеквизиты)
	Параметры = Новый Структура;
	
	// Реквизиты шапки документа:
	СписокОбязательныхКолонок = ""
	+ "Организация,"
	+ "Период";
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	СписокОбязательныхКолонок = ""
	+ "СчетФактура,"				// <ДокументСсылка...>  - документ, являющийся основанием для счета-фактуры
	+ "Покупатель,"					// <СправочникСсылка.Контрагенты> контрагент для взаиморасчетов
	+ "ДоговорКонтрагента,"
	+ "НДС,"						// <Число> - сумма НДС;
	+ "СуммаБезНДС,"				// <Число> - сумма без НДС по определенной ставке НДС;
	+ "СтавкаНДС,"					// <перечислениеСсылка.СтавкаНДС> - ставка НДС;
	+ "Событие,"
	+ "ДатаСобытия,"
	+ "ДатаОплаты,"
	+ "ВидЦенности,"
	+ "ЗаписьДополнительногоЛиста,"
	+ "СторнирующаяЗаписьДопЛиста,"
	+ "КорректируемыйПериод,"
	+ "Период,"						// <Дата> формирования движений (период)
	+ "Регистратор,"				// <ДокументСсылка.СчетФактураПолученный> - проводимый документ
	+ "Организация";				// <СправочникСсылка.Организации>
	
	Параметры.Вставить("ТаблицаКорректировкаКнигиПродаж", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаКорректировкаКнигиПродаж, СписокОбязательныхКолонок));
	
	Возврат Параметры;
КонецФункции

// ПОСТУПЛЕНИЕ ТОВАРОВ И УСЛУГ

// Формирование движений при поступлении товаров, услуг, оборудования, объектов строительства от поставщика
//
Процедура СформироватьДвиженияПоступлениеТоваровУслугОтПоставщика(ТаблицаТовары, ТаблицаУслуги, ТаблицаНомераГТД, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыПоступлениеТоваровУслугОтПоставщика(
		ТаблицаТовары, ТаблицаУслуги, ТаблицаНомераГТД, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
    	
	УчетНДСПереопределяемый.СформироватьПроводкиПоступлениеГТД(Параметры.НомераГТД, Реквизиты, Движения, Отказ);
	
	ЗаполнитьВидыЦенностейПоступлениеОтПоставщика(Параметры.Товары, Реквизиты, Неопределено, "СчетУчета");
	ЗаполнитьВидыЦенностейПоступлениеОтПоставщика(Параметры.Услуги, Реквизиты, Неопределено, "СчетЗатрат");

	ДанныеДвижений = ПодготовитьДанныеДвиженийПоступлениеТоваровУслугОтПоставщика(
		Параметры.Товары, Параметры.Услуги, Реквизиты);

	ПлательщикНДС     		   = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	РаздельныйУчетНДС		   = УчетнаяПолитика.РаздельныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	ВерсияУчетаНДС			   = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	УпрощенныйУчетНДС		   = ВерсияУчетаНДС = 1 И УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	
	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Реквизиты.Организация, Реквизиты.Период);
	ДвиженияРаздельныйУчетНДС  = РаздельныйУчетНДС И НЕ РаздельныйУчетНДСНаСчете19;
	НДСВключенВСтоимость	   = Реквизиты.НДСВключенВСтоимость И НЕ РаздельныйУчетНДСНаСчете19;
	ПоставщикПредъявляетНДС	   = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.ДоговорКонтрагента, "ПредъявляетНДС");
		
	// Бухгалтерские проводки

	Если ДанныеДвижений.Итог("НДС") <> 0 Тогда

		РеквизитыПроводок = ПодготовитьРеквизитыПроводокПоступлениеТоваровУслугОтПоставщика(Реквизиты);

		Если Реквизиты.УчетАгентскогоНДС Тогда
			Если Реквизиты.ВидАгентскогоДоговора = Перечисления.ВидыАгентскихДоговоров.Нерезидент Тогда
				СформироватьПроводкиПоступлениеТоваровУслугНалоговыйАгентНерезидент(ДанныеДвижений, Движения, Отказ);
			Иначе
				СформироватьПроводкиПоступлениеТоваровУслугНалоговыйАгент(ДанныеДвижений, РеквизитыПроводок, Движения, Отказ);
			КонецЕсли;
	    ИначеЕсли НЕ НДСВключенВСтоимость Тогда
			СформироватьПроводкиПоступлениеТоваровУслуг(ДанныеДвижений, РеквизитыПроводок, Движения, Отказ);
		КонецЕсли;

	КонецЕсли;
		
	Если НЕ ПлательщикНДС Тогда
		Если  Реквизиты.УчетАгентскогоНДС И НДСВключенВСтоимость Тогда
			ДанныеДвижений = ПодготовитьДанныеДвиженийПоступлениеТоваровУслугНеплательщикНалоговыйАгент(Параметры.Товары, Параметры.Услуги, Реквизиты);
			СформироватьПроводкиВключениеНДСВСтоимость(ДанныеДвижений, Движения, Отказ);
		КонецЕсли;
		Возврат;
	КонецЕсли;
    
	// Движения регистров подсистемы НДС
	
	Если ВерсияУчетаНДС = 1 Тогда
		
		Если НЕ УпрощенныйУчетНДС Тогда
			
			Если ДанныеДвижений.Итог("НДС") <> 0 ИЛИ ПоставщикПредъявляетНДС Тогда
				СформироватьДвиженияНДСПредъявленныйПоступлениеТоваровУслуг(ДанныеДвижений, Движения, Отказ);
				Если Реквизиты.НДСВключенВСтоимость Тогда
					СформироватьДвиженияНДСПредъявленныйВключениеВСтоимость(ДанныеДвижений, Движения,, Отказ);
				КонецЕсли;
			КонецЕсли;
			
			Если РаздельныйУчетНДС Тогда
				
				НТТПоПродажнойСтоимости = (Реквизиты.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка)
					И (УчетнаяПолитика.СпособОценкиТоваровВРознице(Реквизиты.Организация, Реквизиты.Период) 
						= Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости);
				Если НЕ НТТПоПродажнойСтоимости Тогда
					УчетНДСПереопределяемый.СформироватьДвиженияНДСПоПриобретеннымЦенностямПоступлениеТоваров(Параметры.Товары, Реквизиты, Движения, Отказ);
				КонецЕсли;

				РаспределеляемыеРасходы = УчетНДСПереопределяемый.ОпределитьРаспределеляемыеРасходы(Параметры.Услуги);
				УчетНДСПереопределяемый.СформироватьДвиженияНДСКосвенныеРасходыПоступлениеУслуг(РаспределеляемыеРасходы, Реквизиты, Движения, Отказ);
				
			Иначе
				
				Параметры.Товары.Индексы.Добавить("ВидЦенности");
				ОсновныеСредства = Параметры.Товары.Скопировать(Новый Структура("ВидЦенности", Перечисления.ВидыЦенностей.ОС));
				УчетНДСПереопределяемый.СформироватьДвиженияНДСПоПриобретеннымЦенностямПоступлениеТоваров(ОсновныеСредства, Реквизиты, Движения, Отказ);
			
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе	
		
		Если ДанныеДвижений.Итог("НДС") <> 0 ИЛИ ПоставщикПредъявляетНДС Тогда
			СформироватьДвиженияНДСПредъявленныйПоступлениеТоваровУслуг(ДанныеДвижений, Движения, Отказ);
			Если Реквизиты.НДСВключенВСтоимость Тогда
				СформироватьДвиженияНДСПредъявленныйВключениеВСтоимость(ДанныеДвижений, Движения,, Отказ);
			КонецЕсли;
		КонецЕсли;

		Если ДвиженияРаздельныйУчетНДС Тогда
			
			НТТПоПродажнойСтоимости = (Реквизиты.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка)
				И (УчетнаяПолитика.СпособОценкиТоваровВРознице(Реквизиты.Организация, Реквизиты.Период) 
					= Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости);
			Если НЕ НТТПоПродажнойСтоимости Тогда
				УчетНДСПереопределяемый.СформироватьДвиженияНДСПоПриобретеннымЦенностямПоступлениеТоваров(Параметры.Товары, Реквизиты, Движения, Отказ);
			КонецЕсли;

			РаспределеляемыеРасходы = УчетНДСПереопределяемый.ОпределитьРаспределеляемыеРасходы(Параметры.Услуги);
			УчетНДСПереопределяемый.СформироватьДвиженияНДСКосвенныеРасходыПоступлениеУслуг(РаспределеляемыеРасходы, Реквизиты, Движения, Отказ);
			
		Иначе
			
			Если НЕ РаздельныйУчетНДС Тогда
				Параметры.Товары.Индексы.Добавить("ВидЦенности");
				ОсновныеСредства = Параметры.Товары.Скопировать(Новый Структура("ВидЦенности", Перечисления.ВидыЦенностей.ОС));
				УчетНДСПереопределяемый.СформироватьДвиженияНДСПоПриобретеннымЦенностямПоступлениеТоваров(ОсновныеСредства, Реквизиты, Движения, Отказ);
			КонецЕсли;
		
		КонецЕсли;		
		
	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьДанныеДвиженийПоступлениеТоваровУслугНеплательщикНалоговыйАгент(Товары, Услуги, Реквизиты)  

	Если Товары <> Неопределено Тогда
		
		ПартионныйУчет = УчетнаяПолитика.СпособОценкиМПЗ(Реквизиты.Организация, Реквизиты.Период) = Перечисления.СпособыОценки.ФИФО;
		
		Если Товары.Колонки.Найти("СчетУчетаЗабалансовый") = Неопределено Тогда
			ДанныеДвижений = Товары.Скопировать(,
				"СчетУчета,Подразделение,Номенклатура,Склад,Партия,СтатьяЗатрат,СпособСтроительства,
				|СчетФактура,ВидЦенности,СчетУчетаНДС,СтавкаНДС,
				|Количество,СуммаБезНДСРуб,СуммаНДСРуб");
		Иначе 
			ДанныеДвижений = Товары.Скопировать(Новый Структура("СчетУчетаЗабалансовый", Ложь),
				"СчетУчета,Подразделение,Номенклатура,Склад,Партия,СтатьяЗатрат,СпособСтроительства,
				|СчетФактура,ВидЦенности,СчетУчетаНДС,СтавкаНДС,
				|Количество,СуммаБезНДСРуб,СуммаНДСРуб");
		КонецЕсли;
		ДанныеДвижений.Колонки.СчетУчета.Имя = "СчетЗатрат";
	
		ДанныеДвижений.Колонки.Добавить("Субконто1");
		ДанныеДвижений.Колонки.Добавить("Субконто2");
		ДанныеДвижений.Колонки.Добавить("Субконто3");
		
		Для каждого СтрокаТаблицы Из ДанныеДвижений Цикл

			СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетЗатрат);
			Для Ном = 1 По СвойстваСчета.КоличествоСубконто Цикл
				Если СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура
				 ИЛИ СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства Тогда
					СтрокаТаблицы["Субконто" + Ном] = СтрокаТаблицы.Номенклатура;
				ИначеЕсли СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады Тогда
					Если БухгалтерскийУчетВызовСервераПовтИсп.ВедетсяСуммовойУчетПоСкладам(СтрокаТаблицы.СчетЗатрат) Тогда
						СтрокаТаблицы["Субконто" + Ном] = СтрокаТаблицы.Склад;
					КонецЕсли;
		        ИначеЕсли СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии Тогда
					Если ПартионныйУчет Тогда
						СтрокаТаблицы["Субконто" + Ном] = СтрокаТаблицы.Партия;
					КонецЕсли;
		        ИначеЕсли СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат Тогда
					СтрокаТаблицы["Субконто" + Ном] = СтрокаТаблицы.СтатьяЗатрат;
		        ИначеЕсли СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СпособыСтроительства Тогда
					СтрокаТаблицы["Субконто" + Ном] = СтрокаТаблицы.СпособСтроительства;
				КонецЕсли;
			КонецЦикла;
			Если НЕ СвойстваСчета.УчетПоПодразделениям Тогда
				СтрокаТаблицы.Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
			КонецЕсли;
			
		КонецЦикла;

		ДанныеДвижений.Колонки.Удалить("Номенклатура");
		ДанныеДвижений.Колонки.Удалить("Склад");
		ДанныеДвижений.Колонки.Удалить("СтатьяЗатрат");
		ДанныеДвижений.Колонки.Удалить("СпособСтроительства");
		
		Если Услуги <> Неопределено Тогда
			Для каждого СтрокаУслуг Из Услуги Цикл
				СтрокаТаблицыДвижений = ДанныеДвижений.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыДвижений, СтрокаУслуг);
				СтрокаТаблицыДвижений.Подразделение = СтрокаУслуг.ПодразделениеЗатрат;
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		ДанныеДвижений = Услуги.Скопировать(,
			"СчетЗатрат,ПодразделениеЗатрат,Субконто1,Субконто2,Субконто3,Партия,
			|СчетФактура,ВидЦенности,СчетУчетаНДС,СтавкаНДС,
			|СуммаБезНДСРуб,СуммаНДСРуб");
		ДанныеДвижений.Колонки.ПодразделениеЗатрат.Имя = "Подразделение";
		ДанныеДвижений.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	КонецЕсли;
	
	ДанныеДвижений.Колонки.Добавить("Регистратор", Документы.ТипВсеСсылки());
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Регистратор, "Регистратор");
	
	ДанныеДвижений.Колонки.Добавить("Период",      Новый ОписаниеТипов("Дата"));
	ДанныеДвижений.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Период, "Период,ДатаСобытия");

	ДанныеДвижений.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");

	ДанныеДвижений.Колонки.Добавить("Поставщик", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Контрагент, "Поставщик");

	ДанныеДвижений.Колонки.Добавить("ДоговорКонтрагента", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	Если Реквизиты.УчетАгентскогоНДС Тогда 	// Договор должен указываться только для налогового агента
		ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.ДоговорКонтрагента, "ДоговорКонтрагента");
	КонецЕсли;
	
	Возврат ДанныеДвижений;

КонецФункции

Процедура СформироватьПроводкиВключениеНДСВСтоимость(ДанныеПроводок, Движения, Отказ)
	
	Если ДанныеПроводок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Проводки по включению НДС в стоимость
	// Дт <Счет учета затрат> Кт <Счет учета НДС>

	Для каждого СтрокаТаблицы Из ДанныеПроводок Цикл

		Если СтрокаТаблицы.СуммаНДСРуб = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = СтрокаТаблицы.Период;
		Проводка.Организация = СтрокаТаблицы.Организация;
		Проводка.Сумма       = СтрокаТаблицы.СуммаНДСРуб;
		Проводка.Содержание  = НСтр("ru = 'НДС включен в стоимость ценностей'");

		Проводка.СчетДт = СтрокаТаблицы.СчетЗатрат;
		
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетЗатрат);
		Для Ном = 1 По СвойстваСчета.КоличествоСубконто Цикл
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
				СвойстваСчета["ВидСубконто" + Ном], СтрокаТаблицы["Субконто" + Ном]);	
			
		КонецЦикла;
			
		Если СвойстваСчета.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = СтрокаТаблицы.Подразделение;
		КонецЕсли;
	
		Проводка.СчетКт = СтрокаТаблицы.СчетУчетаНДС;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"Контрагенты", СтрокаТаблицы.Поставщик);	
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"СФПолученные", СтрокаТаблицы.СчетФактура);	
			
	КонецЦикла;
		
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыПоступлениеТоваровУслугОтПоставщика(ТаблицаТовары, ТаблицаУслуги, ТаблицаНомераГТД, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                    // <ДокументСсылка>
	+ "Период,"                         // <Дата>
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "Подразделение,"                  // <Ссылка на справочник подразделений>
	+ "Склад,"                          // <СправочникСсылка.Склады>
	+ "ТипСклада,"                      // <ПеречислениеСсылка.ТипыСкладов>
	+ "НДСВключенВСтоимость,"           // <Булево>
	+ "УчетАгентскогоНДС,"              // <Булево>
	+ "ВидАгентскогоДоговора,"          // <ПеречислениеСсылка.ВидыАгентскихДоговоров> - заполняется, если УчетАгентскогоНДС = Истина
	+ "Контрагент,"                     // <СправочникСсылка.Контрагенты>
	+ "ДоговорКонтрагента,"             // <СправочникСсылка.ДоговорыКонтрагентов>
	+ "СчетУчетаРасчетовСКонтрагентом," // <ПланСчетовСсылка.Хозрасчетный>
	+ "ВалютаВзаиморасчетов"            // <СправочникСсылка.Валюты>
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Подготовка таблицы Товары

	СписокОбязательныхКолонок = ""
	+ "Номенклатура,"            // <СправочникСсылка.Номенклатура>
	+ "Содержание,"              // <Строка,150> - содержание для проводок
	+ "СуммаРуб,"                // <Число,15,2> - сумма в рублях
	+ "СуммаБезНДСРуб,"          // <Число,15,2> - сумма без НДС в рублях
	+ "СуммаНДСРуб,"             // <Число,15,2> - сумма НДС в рублях
	+ "СчетУчета,"               // <ПланСчетовСсылка.Хозрасчетный>
	+ "СчетУчетаНДС,"            // <ПланСчетовСсылка.Хозрасчетный>
	+ "СпособУчетаНДС,"          // <ПеречислениеСсылка.СпособыУчетаНДС>
	+ "СуммаВзаиморасчетов,"     // <Число,15,2> - сумма в валюте расчетов с поставщиком
	+ "СуммаНДСВзаиморасчетов,"  // <Число,15,2> - сумма НДС в валюте расчетов с поставщиком
	+ "СтавкаНДС,"               // <ПеречислениеСсылка.СтавкиНДС>
	+ "Количество"               // <Число,15,3>
	;
	
	ЕстьСтатьяЗатрат = Ложь;
	ЕстьСтатьяЗатрат = ТаблицаТовары <> Неопределено И ТаблицаТовары.Колонки.Найти("СтатьяЗатрат") <> Неопределено;
	Если ЕстьСтатьяЗатрат Тогда
		СписокОбязательныхКолонок = СписокОбязательныхКолонок + ",СтатьяЗатрат";
	КонецЕсли;
	
	Параметры.Вставить("Товары", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТовары, СписокОбязательныхКолонок));
	Реквизиты = Параметры.Реквизиты[0];
	// Документом партии и документом-основанием счета-фактуры при поступлении от поставщика выступает документ поступления
	Параметры.Товары.Колонки.Добавить("Партия",      Документы.ТипВсеСсылки());
	Параметры.Товары.Колонки.Добавить("СчетФактура", Документы.ТипВсеСсылки());
	Параметры.Товары.ЗаполнитьЗначения(Реквизиты.Регистратор, "Партия,СчетФактура");
	// Склад берем Из шапки документа поступления
	Параметры.Товары.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	Параметры.Товары.ЗаполнитьЗначения(Реквизиты.Склад, "Склад");
	// Подразделение берем из шапки документа поступления
	Параметры.Товары.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Параметры.Товары.ЗаполнитьЗначения(Реквизиты.Подразделение, "Подразделение");

	Если НЕ ЕстьСтатьяЗатрат Тогда
		Параметры.Товары.Колонки.Добавить("СтатьяЗатрат", Новый ОписаниеТипов("СправочникСсылка.СтатьиЗатрат"));
	КонецЕсли;
	
	Параметры.Товары.Колонки.Добавить("СпособСтроительства", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыСтроительства"));
	Параметры.Товары.ЗаполнитьЗначения(Перечисления.СпособыСтроительства.Подрядный, "СпособСтроительства");
	
	// Подготовка таблицы Услуги

	СписокОбязательныхКолонок = ""
	+ "Содержание,"              // <Строка,150> - содержание для проводок
	+ "СуммаРуб,"                // <Число,15,2> - сумма в рублях
	+ "СуммаБезНДСРуб,"          // <Число,15,2> - сумма без НДС в рублях
	+ "СуммаНДСРуб,"             // <Число,15,2> - сумма НДС в рублях
	+ "СчетЗатрат,"              // <ПланСчетовСсылка.Хозрасчетный>
	+ "Субконто1,"               // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "Субконто2,"               // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "Субконто3,"               // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "СтатьяЗатрат,"            // <СправочникСсылка.СтатьиЗатрат>
	+ "ПодразделениеЗатрат,"     // <Ссылка на справочник подразделений>
	+ "СчетУчетаНДС,"            // <ПланСчетовСсылка.Хозрасчетный>
	+ "СпособУчетаНДС,"          // <ПеречислениеСсылка.СпособыУчетаНДС>
	+ "СуммаВзаиморасчетов,"     // <Число,15,2> - сумма в валюте расчетов с поставщиком
	+ "СуммаНДСВзаиморасчетов,"  // <Число,15,2> - сумма НДС в валюте расчетов с поставщиком
	+ "СтавкаНДС"               // <ПеречислениеСсылка.СтавкиНДС>
	;
	Параметры.Вставить("Услуги", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаУслуги, СписокОбязательныхКолонок));
	// Документом-основанием счета-фактуры при поступлении от поставщика выступает документ поступления
	Параметры.Услуги.Колонки.Добавить("СчетФактура", Документы.ТипВсеСсылки());
	Параметры.Услуги.ЗаполнитьЗначения(Реквизиты.Регистратор, "СчетФактура");

	// Подготовка таблицы НомераГТД

	СписокОбязательныхКолонок = ""
	+ "Номенклатура,"         // <СправочникСсылка.Номенклатура>
	+ "НомерГТД,"             // <СправочникСсылка.НомераГТД>
	+ "СтранаПроисхождения,"  // <СправочникСсылка.СтраныМира>
	+ "Количество,"	          // <Число,15,3>
	+ "Содержание"	          // <Строка,150>
	;
	Параметры.Вставить("НомераГТД", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаНомераГТД, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьДанныеДвиженийПоступлениеТоваровУслугОтПоставщика(Товары, Услуги, Реквизиты)

	Если Товары <> Неопределено Тогда
		Если Товары.Колонки.Найти("СчетУчетаЗабалансовый") = Неопределено Тогда
			ДанныеДвижений = Товары.Скопировать(,
				"СчетФактура,СтавкаНДС,СчетУчетаНДС,СпособУчетаНДС,ВидЦенности,Содержание,
				|СуммаРуб,СуммаБезНДСРуб,СуммаНДСРуб,СуммаВзаиморасчетов,СуммаНДСВзаиморасчетов");
		Иначе
			ДанныеДвижений = Товары.Скопировать(Новый Структура("СчетУчетаЗабалансовый", Ложь),
				"СчетФактура,СтавкаНДС,СчетУчетаНДС,СпособУчетаНДС,ВидЦенности,Содержание,
				|СуммаРуб,СуммаБезНДСРуб,СуммаНДСРуб,СуммаВзаиморасчетов,СуммаНДСВзаиморасчетов");
		КонецЕсли;	
		Если Услуги <> Неопределено Тогда
			ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(Услуги, ДанныеДвижений);
		КонецЕсли;
	Иначе
		ДанныеДвижений = Услуги.Скопировать(,
			"СчетФактура,СтавкаНДС,СчетУчетаНДС,СпособУчетаНДС,ВидЦенности,Содержание,
			|СуммаРуб,СуммаБезНДСРуб,СуммаНДСРуб,СуммаВзаиморасчетов,СуммаНДСВзаиморасчетов");
	КонецЕсли;
	ДанныеДвижений.Свернуть(
		"СчетФактура,СтавкаНДС,СчетУчетаНДС,СпособУчетаНДС,ВидЦенности,Содержание",
		"СуммаРуб,СуммаБезНДСРуб,СуммаНДСРуб,СуммаВзаиморасчетов,СуммаНДСВзаиморасчетов");

	ДанныеДвижений.Колонки.Добавить("Период",      Новый ОписаниеТипов("Дата"));
	ДанныеДвижений.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Период, "Период,ДатаСобытия");

	ДанныеДвижений.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");

	ДанныеДвижений.Колонки.Добавить("Поставщик", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Контрагент, "Поставщик");

	ДанныеДвижений.Колонки.Добавить("ДоговорКонтрагента", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	Если Реквизиты.УчетАгентскогоНДС Тогда 	// Договор должен указываться только для налогового агента
		ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.ДоговорКонтрагента, "ДоговорКонтрагента");
	КонецЕсли;

	ДанныеДвижений.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Для каждого СтрокаТаблицы Из ДанныеДвижений Цикл
		Если Реквизиты.НДСВключенВСтоимость Тогда
		    СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСРуб;
		Иначе
		    СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСРуб;
		    СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.СуммаВзаиморасчетов + СтрокаТаблицы.СуммаНДСВзаиморасчетов;
		КонецЕсли;
	КонецЦикла;
	ДанныеДвижений.Колонки.СуммаНДСРуб.Имя = "НДС";
	ДанныеДвижений.Колонки.Удалить("СуммаРуб");
	ДанныеДвижений.Колонки.Удалить("СуммаБезНДСРуб");

	Возврат ДанныеДвижений;

КонецФункции

Функция ПодготовитьРеквизитыПроводокПоступлениеТоваровУслугОтПоставщика(Реквизиты)

	РеквизитыПроводок = Новый Структура;

	РеквизитыПроводок.Вставить("СчетКт",          Реквизиты.СчетУчетаРасчетовСКонтрагентом);
	РеквизитыПроводок.Вставить("СубконтоКт1",     Реквизиты.Контрагент);
	РеквизитыПроводок.Вставить("СубконтоКт2",     Реквизиты.ДоговорКонтрагента);
	РеквизитыПроводок.Вставить("СубконтоКт3",     Реквизиты.Регистратор);
	РеквизитыПроводок.Вставить("ВалютаКт",        Реквизиты.ВалютаВзаиморасчетов);
	РеквизитыПроводок.Вставить("ПодразделениеКт", Реквизиты.Подразделение);

	Возврат РеквизитыПроводок;

КонецФункции

Функция ПодготовитьРеквизитыПроводокПоступлениеДопРасходовОтПоставщика(Реквизиты)

	РеквизитыПроводок = Новый Структура;

	РеквизитыПроводок.Вставить("СчетКт",          Реквизиты.СчетУчетаРасчетовСКонтрагентом);
	РеквизитыПроводок.Вставить("СубконтоКт1",     Реквизиты.Контрагент);
	РеквизитыПроводок.Вставить("СубконтоКт2",     Реквизиты.ДоговорКонтрагента);
	РеквизитыПроводок.Вставить("СубконтоКт3",     Реквизиты.Регистратор);
	РеквизитыПроводок.Вставить("ВалютаКт",        Реквизиты.ВалютаВзаиморасчетов);

	Возврат РеквизитыПроводок;

КонецФункции

// Формирование движений при поступлении товаров, услуг, оборудования, объектов строительства от подотчетного лица
//
Процедура СформироватьДвиженияПоступлениеТоваровУслугОтПодотчетногоЛица(ТаблицаТовары, ТаблицаУслуги, ТаблицаНомераГТД, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыПоступлениеТоваровУслугОтПодотчетногоЛица(
		ТаблицаТовары, ТаблицаУслуги, ТаблицаНомераГТД, ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];
	
	УчетНДСПереопределяемый.СформироватьПроводкиПоступлениеГТД(Параметры.НомераГТД, Реквизиты, Движения, Отказ);
	
	ЗаполнитьВидыЦенностейПоступлениеОтПоставщика(Параметры.Товары, Реквизиты, Неопределено, "СчетУчета");
	ЗаполнитьВидыЦенностейПоступлениеОтПоставщика(Параметры.Услуги, Реквизиты, Неопределено, "СчетЗатрат");

	ДанныеПроводок = ПодготовитьДанныеДвиженийПоступлениеТоваровУслугОтПодотчетногоЛица(
		Параметры.Товары, Параметры.Услуги, Реквизиты);
	
	РаздельныйУчетНДС = УчетнаяПолитика.РаздельныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	ВерсияУчетаНДС    = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	УпрощенныйУчетНДС = ВерсияУчетаНДС = 1 И УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	
	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Реквизиты.Организация, Реквизиты.Период);
	ДвиженияРаздельныйУчетНДС  = РаздельныйУчетНДС И НЕ РаздельныйУчетНДСНаСчете19;
		
	// Бухгалтерские проводки

	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	
	Если ДанныеПроводок.Итог("НДС") <> 0 Тогда

		РеквизитыПроводок = ПодготовитьРеквизитыПроводокПоступлениеТоваровУслугОтПодотчетногоЛица(Реквизиты);
		СформироватьПроводкиПоступлениеТоваровУслуг(ДанныеПроводок, РеквизитыПроводок, Движения, Отказ);
		
		Если ПлательщикНДС Тогда
			РеквизитыСписания = ПодготовитьРеквизитыСписанияНДСПоДокументу(Реквизиты);
			СформироватьПроводкиСписаниеНДС(РеквизитыСписания, ДанныеПроводок, Движения, Отказ);
		КонецЕсли;
		
	КонецЕсли;

	Если НЕ ПлательщикНДС Тогда
		Возврат;
	КонецЕсли;

	// Движения регистров подсистемы НДС

	Если НЕ УпрощенныйУчетНДС Тогда

		СформироватьДвиженияНДСПредъявленныйПоступлениеТоваровУслуг(ДанныеПроводок, Движения, Отказ);
		СформироватьДвиженияНДСПредъявленныйВключениеВСтоимость(ДанныеПроводок, Движения, Истина, Отказ);
		
		Если ДвиженияРаздельныйУчетНДС Тогда

			УчетНДСПереопределяемый.СформироватьДвиженияНДСПоПриобретеннымЦенностямПоступлениеТоваров(Параметры.Товары, Реквизиты, Движения, Отказ);

			Параметры.Услуги.Индексы.Добавить("ПредъявленСчетФактура");
			УслугиСоСчетомФактурой  = Параметры.Услуги.Скопировать(Новый Структура("ПредъявленСчетФактура", Истина));
			РаспределеляемыеРасходы = УчетНДСПереопределяемый.ОпределитьРаспределеляемыеРасходы(УслугиСоСчетомФактурой);
			УчетНДСПереопределяемый.СформироватьДвиженияНДСКосвенныеРасходыПоступлениеУслуг(РаспределеляемыеРасходы, Реквизиты, Движения, Отказ);

		Иначе

			Параметры.Товары.Индексы.Добавить("ВидЦенности");
			ОсновныеСредства = Параметры.Товары.Скопировать(Новый Структура("ВидЦенности", Перечисления.ВидыЦенностей.ОС));
			УчетНДСПереопределяемый.СформироватьДвиженияНДСПоПриобретеннымЦенностямПоступлениеТоваров(ОсновныеСредства, Реквизиты, Движения, Отказ);

		КонецЕсли;

	КонецЕсли;
    	
КонецПроцедуры

Функция ПодготовитьРеквизитыСписанияНДСПоДокументу(Реквизиты)

	РеквизитыСписания = Новый Структура;

	РеквизитыСписания.Вставить("СчетСписанияНДС", 			ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("ПланСчетов.Хозрасчетный.ПрочиеРасходы"));
	РеквизитыСписания.Вставить("СубконтоСписанияНДС1",  	ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.СписаниеВыделенногоНДСНаПрочиеРасходы"));
	РеквизитыСписания.Вставить("СубконтоСписанияНДС2",  	Неопределено);
	РеквизитыСписания.Вставить("СубконтоСписанияНДС3",  	Неопределено);
	РеквизитыСписания.Вставить("Организация",     			Реквизиты.Организация);
	РеквизитыСписания.Вставить("ПодразделениеОрганизации",	Реквизиты.Подразделение);
	РеквизитыСписания.Вставить("Период",     				Реквизиты.Период);
	
	Возврат РеквизитыСписания;

КонецФункции

Функция ПодготовитьПараметрыПоступлениеТоваровУслугОтПодотчетногоЛица(ТаблицаТовары, ТаблицаУслуги, ТаблицаНомераГТД, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                    // <ДокументСсылка.АвансовыйОтчет>
	+ "Период,"                         // <Дата>
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "Подразделение,"                  // <Ссылка на справочник подразделений>
	+ "Склад,"                          // <СправочникСсылка.Склады>
	+ "УчетАгентскогоНДС,"              // <Булево>
	+ "ФизЛицо,"                        // <СправочникСсылка.ФизическиеЛица>
	+ "ВалютаДокумента"                 // <СправочникСсылка.Валюты>
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Подготовка таблицы Товары

	СписокОбязательныхКолонок = ""
	+ "ПредъявленСчетФактура,"   // <Булево> - признак, что на момент поступления товаров счет-фактура предъявлен поставщиком
	+ "СчетФактура,"             // <ДокументСсылка.СчетФактураПолученный>
	+ "Контрагент,"              // <СправочникСсылка.Контрагенты>
	+ "Номенклатура,"            // <СправочникСсылка.Номенклатура>
	+ "Содержание,"              // <Строка,150> - содержание для проводок
	+ "СуммаРуб,"                // <Число,15,2> - сумма в рублях
	+ "СуммаБезНДСРуб,"          // <Число,15,2> - сумма без НДС в рублях
	+ "СуммаНДСРуб,"             // <Число,15,2> - сумма НДС в рублях
	+ "СчетУчета,"               // <ПланСчетовСсылка.Хозрасчетный>
	+ "СчетУчетаНДС,"            // <ПланСчетовСсылка.Хозрасчетный>
	+ "СпособУчетаНДС,"          // <ПеречислениеСсылка.СпособыУчетаНДС>
	+ "НДСВключенВСтоимость,"    // <Булево>
	+ "СуммаВзаиморасчетов,"     // <Число,15,2> - сумма в валюте расчетов с поставщиком
	+ "СуммаНДСВзаиморасчетов,"  // <Число,15,2> - сумма НДС в валюте расчетов с поставщиком
	+ "СтавкаНДС,"               // <ПеречислениеСсылка.СтавкиНДС>
	+ "Количество"               // <Число,15,3>
	;
	Параметры.Реквизиты.Колонки.Добавить("Контрагент");
	Параметры.Вставить("Товары", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТовары, СписокОбязательныхКолонок));
	Реквизиты = Параметры.Реквизиты[0];
	// Документом партии при поступлении от подотчетного лица выступает авансовый отчет
	Параметры.Товары.Колонки.Добавить("Партия", Документы.ТипВсеСсылки());
	Параметры.Товары.ЗаполнитьЗначения(Реквизиты.Регистратор, "Партия");
	// Склад берем Из шапки авансового отчета
	Параметры.Товары.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	Параметры.Товары.ЗаполнитьЗначения(Реквизиты.Склад, "Склад");

	// Подготовка таблицы Услуги

	СписокОбязательныхКолонок = ""
	+ "ПредъявленСчетФактура,"   // <Булево> - признак, что на момент поступления товаров счет-фактура предъявлен поставщиком
	+ "СчетФактура,"             // <ДокументСсылка.СчетФактураПолученный>
	+ "Контрагент,"              // <СправочникСсылка.Контрагенты>
	+ "Содержание,"              // <Строка,150> - содержание для проводок
	+ "СуммаРуб,"                // <Число,15,2> - сумма в рублях
	+ "СуммаБезНДСРуб,"          // <Число,15,2> - сумма без НДС в рублях
	+ "СуммаНДСРуб,"             // <Число,15,2> - сумма НДС в рублях
	+ "СчетЗатрат,"              // <ПланСчетовСсылка.Хозрасчетный>
	+ "Субконто1,"               // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "Субконто2,"               // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "Субконто3,"               // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "СтатьяЗатрат,"            // <СправочникСсылка.СтатьиЗатрат>
	+ "ПодразделениеЗатрат,"     // <Ссылка на справочник подразделений>
	+ "СчетУчетаНДС,"            // <ПланСчетовСсылка.Хозрасчетный>
	+ "СпособУчетаНДС,"          // <ПеречислениеСсылка.СпособыУчетаНДС>	
	+ "НДСВключенВСтоимость,"    // <Булево>
	+ "СуммаВзаиморасчетов,"     // <Число,15,2> - сумма в валюте расчетов с поставщиком
	+ "СуммаНДСВзаиморасчетов,"  // <Число,15,2> - сумма НДС в валюте расчетов с поставщиком
	+ "СтавкаНДС"                // <ПеречислениеСсылка.СтавкиНДС>
	;
	Параметры.Вставить("Услуги", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаУслуги, СписокОбязательныхКолонок));

	// Подготовка таблицы НомераГТД

	СписокОбязательныхКолонок = ""
	+ "Номенклатура,"         // <СправочникСсылка.Номенклатура>
	+ "НомерГТД,"             // <СправочникСсылка.НомераГТД>
	+ "СтранаПроисхождения,"  // <СправочникСсылка.СтраныМира>
	+ "Количество,"	          // <Число,15,3>
	+ "Содержание"	          // <Строка,150>
	;
	Параметры.Вставить("НомераГТД", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаНомераГТД, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьДанныеДвиженийПоступлениеТоваровУслугОтПодотчетногоЛица(Товары, Услуги, Реквизиты)

	ДанныеДвижений = Товары.Скопировать(,
		"Контрагент,ПредъявленСчетФактура,СчетФактура,СтавкаНДС,СчетУчетаНДС,СпособУчетаНДС,ВидЦенности,Содержание,
		|СуммаРуб,СуммаБезНДСРуб,СуммаНДСРуб,СуммаВзаиморасчетов,СуммаНДСВзаиморасчетов,НДСВключенВСтоимость");
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(Услуги, ДанныеДвижений);
	ДанныеДвижений.Свернуть(
		"Контрагент,ПредъявленСчетФактура,СчетФактура,СтавкаНДС,СчетУчетаНДС,СпособУчетаНДС, НДСВключенВСтоимость, ВидЦенности, Содержание",
		"СуммаРуб,СуммаБезНДСРуб,СуммаНДСРуб,СуммаВзаиморасчетов,СуммаНДСВзаиморасчетов");

	ДанныеДвижений.Колонки.Добавить("Период",      Новый ОписаниеТипов("Дата"));
	ДанныеДвижений.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Период, "Период,ДатаСобытия");

	ДанныеДвижений.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");

	ДанныеДвижений.Колонки.Контрагент.Имя = "Поставщик";
	ДанныеДвижений.Колонки.Добавить("ДоговорКонтрагента", // колонка договор всегда пустая
		Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));

	ДанныеДвижений.Колонки.СчетФактура.Имя = "СчетФактураДокумент";	
	ДанныеДвижений.Колонки.Добавить("СчетФактура", Документы.ТипВсеСсылки());
		
	ДанныеДвижений.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
		
	Для каждого СтрокаТаблицы Из ДанныеДвижений Цикл
		Если СтрокаТаблицы.НДСВключенВСтоимость Тогда
		    СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСРуб;
		Иначе
		    СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСРуб;
		    СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.СуммаВзаиморасчетов + СтрокаТаблицы.СуммаНДСВзаиморасчетов;
		КонецЕсли;
		Если СтрокаТаблицы.ПредъявленСчетФактура Тогда
			СтрокаТаблицы.СчетФактура = СтрокаТаблицы.СчетФактураДокумент;
		Иначе	
			СтрокаТаблицы.СчетФактура = Реквизиты.Регистратор;
		КонецЕсли;
	КонецЦикла;
	ДанныеДвижений.Колонки.СуммаНДСРуб.Имя = "НДС";
	ДанныеДвижений.Колонки.Удалить("СуммаРуб");
	ДанныеДвижений.Колонки.Удалить("СуммаБезНДСРуб");

	Возврат ДанныеДвижений;

КонецФункции

Функция ПодготовитьРеквизитыПроводокПоступлениеТоваровУслугОтПодотчетногоЛица(Реквизиты)

	РеквизитыПроводок = Новый Структура;

	Если Реквизиты.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
		РеквизитыПроводок.Вставить("СчетКт", ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами); // 71.01
	Иначе
		РеквизитыПроводок.Вставить("СчетКт", ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал); //71.21
	КонецЕсли;
	РеквизитыПроводок.Вставить("СубконтоКт1",     Реквизиты.ФизЛицо);
	РеквизитыПроводок.Вставить("СубконтоКт2",     Неопределено);
	РеквизитыПроводок.Вставить("СубконтоКт3",     Неопределено);
	РеквизитыПроводок.Вставить("ВалютаКт",        Реквизиты.ВалютаДокумента);
	РеквизитыПроводок.Вставить("ПодразделениеКт", Реквизиты.Подразделение);

	Возврат РеквизитыПроводок;

КонецФункции

// Формирование движений при поступлении доп.расходов по товарам, оборудованию от поставщика
//
Процедура СформироватьДвиженияПоступлениеДопРасходовОтПоставщика(ТаблицаТовары, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыПоступлениеДопРасходовОтПоставщика(ТаблицаТовары, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	Если Параметры.Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
    	
	// Вид ценности по умолчанию для доп.расходов - прочие работы и услуги
	ЗаполнитьВидыЦенностейПоступлениеОтПоставщика(Параметры.Товары, Реквизиты, Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги, "СчетУчета");

	ДанныеДвижений = ПодготовитьДанныеДвиженийПоступлениеДопРасходовОтПоставщика(Параметры.Товары, Реквизиты);

	РаздельныйУчетНДС = УчетнаяПолитика.РаздельныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	ВерсияУчетаНДС		= УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	УпрощенныйУчетНДС = ВерсияУчетаНДС = 1 И УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);

	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Реквизиты.Организация, Реквизиты.Период);
	ДвиженияРаздельныйУчетНДС  = РаздельныйУчетНДС И НЕ РаздельныйУчетНДСНаСчете19;
	НДСВключенВСтоимость	   = Реквизиты.НДСВключенВСтоимость И НЕ РаздельныйУчетНДСНаСчете19;
	ПоставщикПредъявляетНДС	   = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.ДоговорКонтрагента, "ПредъявляетНДС");
	// Бухгалтерские проводки

	Если НЕ НДСВключенВСтоимость
		И ДанныеДвижений.Итог("НДС") <> 0 Тогда

		РеквизитыПроводок = ПодготовитьРеквизитыПроводокПоступлениеДопРасходовОтПоставщика(Реквизиты);

		Если Реквизиты.УчетАгентскогоНДС Тогда
			Если Реквизиты.ВидАгентскогоДоговора = Перечисления.ВидыАгентскихДоговоров.Нерезидент Тогда
				СформироватьПроводкиПоступлениеТоваровУслугНалоговыйАгентНерезидент(ДанныеДвижений,  Движения, Отказ);
			Иначе
				СформироватьПроводкиПоступлениеТоваровУслугНалоговыйАгент(ДанныеДвижений, РеквизитыПроводок, Движения, Отказ);
			КонецЕсли;
	    Иначе
			СформироватьПроводкиПоступлениеТоваровУслуг(ДанныеДвижений, РеквизитыПроводок, Движения, Отказ);
		КонецЕсли;

	КонецЕсли;
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	Если НЕ ПлательщикНДС Тогда
		Возврат;
	КонецЕсли;
	
	// Движения регистров подсистемы НДС
	Если ВерсияУчетаНДС = 1 Тогда
		
		Если НЕ УпрощенныйУчетНДС Тогда
			
			Если ДанныеДвижений.Итог("НДС") <> 0 ИЛИ ПоставщикПредъявляетНДС Тогда
				СформироватьДвиженияНДСПредъявленныйПоступлениеТоваровУслуг(ДанныеДвижений, Движения, Отказ);
				Если Реквизиты.НДСВключенВСтоимость Тогда
					СформироватьДвиженияНДСПредъявленныйВключениеВСтоимость(ДанныеДвижений, Движения,, Отказ);
				КонецЕсли;
			КонецЕсли;
			
			Если РаздельныйУчетНДС Тогда
				// Организация осуществляет реализацию без НДС или с НДС 0%
		        УчетНДСПереопределяемый.СформироватьДвиженияНДСПоПриобретеннымЦенностямПоступлениеТоваров(Параметры.Товары, Реквизиты, Движения, Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе		
		
		Если ДанныеДвижений.Итог("НДС") <> 0 ИЛИ ПоставщикПредъявляетНДС Тогда
			СформироватьДвиженияНДСПредъявленныйПоступлениеТоваровУслуг(ДанныеДвижений, Движения, Отказ);
			Если НДСВключенВСтоимость Тогда
				СформироватьДвиженияНДСПредъявленныйВключениеВСтоимость(ДанныеДвижений, Движения,, Отказ);
			КонецЕсли;
		КонецЕсли;
	
		Если ДвиженияРаздельныйУчетНДС Тогда
			// Организация осуществляет реализацию без НДС или с НДС 0%	
			УчетНДСПереопределяемый.СформироватьДвиженияНДСПоПриобретеннымЦенностямПоступлениеТоваров(Параметры.Товары, Реквизиты, Движения, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьПараметрыПоступлениеДопРасходовОтПоставщика(ТаблицаТовары, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                    // <ДокументСсылка>
	+ "Период,"                         // <Дата>
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "НДСВключенВСтоимость,"           // <Булево>
	+ "УчетАгентскогоНДС,"              // <Булево>
	+ "ВидАгентскогоДоговора,"          // <ПеречислениеСсылка.ВидыАгентскихДоговоров> - заполняется, если УчетАгентскогоНДС = Истина
	+ "Контрагент,"                     // <СправочникСсылка.Контрагенты>
	+ "ДоговорКонтрагента,"             // <СправочникСсылка.ДоговорыКонтрагентов>
	+ "СчетУчетаРасчетовСКонтрагентом," // <ПланСчетовСсылка.Хозрасчетный>
	+ "ВалютаВзаиморасчетов"            // <СправочникСсылка.Валюты>
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Подготовка таблицы Товары

	СписокОбязательныхКолонок = ""
	+ "ДокументПартии,"          // <ДокументСсылка> - документ поступления товаров
	+ "Номенклатура,"            // <СправочникСсылка.Номенклатура> - поступивший ранее товар
	+ "Склад,"                   // <СправочникСсылка.Склады> - склад, на который поступил ранее товар
	+ "Содержание,"              // <Строка,150> - содержание для проводок
	+ "Подразделение,"           // Подразделение для проводок
	+ "СчетУчета,"               // <ПланСчетовСсылка.Хозрасчетный>
	+ "СчетУчетаНДС,"            // <ПланСчетовСсылка.Хозрасчетный>
	+ "СпособУчетаНДС,"          // <ПеречислениеСсылка.СпособыУчетаНДС>
	+ "КодВидаОперации,"         // <Строка, 10>
	+ "СуммаРуб,"                // <Число,15,2> - сумма в рублях
	+ "СуммаБезНДСРуб,"          // <Число,15,2> - сумма без НДС в рублях
	+ "СуммаНДСРуб,"             // <Число,15,2> - сумма НДС в рублях
	+ "СуммаВзаиморасчетов,"     // <Число,15,2> - сумма в валюте расчетов с поставщиком
	+ "СуммаНДСВзаиморасчетов,"  // <Число,15,2> - сумма НДС в валюте расчетов с поставщиком
	+ "СтавкаНДС"                // <ПеречислениеСсылка.СтавкиНДС>
	;
	Параметры.Вставить("Товары", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТовары, СписокОбязательныхКолонок));
	Реквизиты = Параметры.Реквизиты[0];
	// Документом партии при поступлении доп.расходов служит документ поступления товаров
	Параметры.Товары.Колонки.ДокументПартии.Имя = "Партия";
	// Документом-основанием счета-фактуры при поступлении доп.расходов выступает документ поступления
	Параметры.Товары.Колонки.Добавить("СчетФактура", Документы.ТипВсеСсылки());
	Параметры.Товары.ЗаполнитьЗначения(Реквизиты.Регистратор, "СчетФактура");
	// Для доп.расходов количество в регистре НДСпоПриобретеннымЦенностям всегда равно нулю
	Параметры.Товары.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьДанныеДвиженийПоступлениеДопРасходовОтПоставщика(Товары, Реквизиты)

	ДанныеДвижений = Товары.Скопировать(,
		"СчетФактура,СтавкаНДС,СчетУчетаНДС,ВидЦенности,КодВидаОперации,Содержание,Подразделение,СпособУчетаНДС,
		|СуммаРуб,СуммаБезНДСРуб,СуммаНДСРуб,СуммаВзаиморасчетов,СуммаНДСВзаиморасчетов");

	ДанныеДвижений.Свернуть(
		"СчетФактура,СтавкаНДС,СчетУчетаНДС,ВидЦенности,КодВидаОперации,Содержание,Подразделение,СпособУчетаНДС",
		"СуммаРуб,СуммаБезНДСРуб,СуммаНДСРуб,СуммаВзаиморасчетов,СуммаНДСВзаиморасчетов");

	ДанныеДвижений.Колонки.Добавить("Период",      Новый ОписаниеТипов("Дата"));
	ДанныеДвижений.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Период, "Период,ДатаСобытия");

	ДанныеДвижений.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");

	ДанныеДвижений.Колонки.Добавить("Поставщик", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Контрагент, "Поставщик");

	ДанныеДвижений.Колонки.Добавить("ДоговорКонтрагента", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	Если Реквизиты.УчетАгентскогоНДС Тогда 	// Договор должен указываться только для налогового агента
		ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.ДоговорКонтрагента, "ДоговорКонтрагента");
	КонецЕсли;

	ДанныеДвижений.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Для каждого СтрокаТаблицы Из ДанныеДвижений Цикл
		Если Реквизиты.НДСВключенВСтоимость Тогда
		    СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСРуб;
		Иначе
		    СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСРуб;
		    СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.СуммаВзаиморасчетов + СтрокаТаблицы.СуммаНДСВзаиморасчетов;
		КонецЕсли;
	КонецЦикла;
	ДанныеДвижений.Колонки.СуммаНДСРуб.Имя = "НДС";
	ДанныеДвижений.Колонки.Удалить("СуммаРуб");
	ДанныеДвижений.Колонки.Удалить("СуммаБезНДСРуб");

	Возврат ДанныеДвижений;

КонецФункции

// Формирование движений при поступлении посреднических услуг по отчету комиссионера
//
Процедура СформироватьДвиженияПоступлениеПосредническихУслуг(ТаблицаУслуги, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыПоступлениеПосредническихУслуг(ТаблицаУслуги, ТаблицаРеквизиты);
	Если Параметры.Реквизиты.Количество() = 0
		ИЛИ Параметры.Услуги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
    	
	Реквизиты = Параметры.Реквизиты[0];

	ЗаполнитьВидыЦенностей(Параметры.Услуги, Перечисления.ВидыЦенностей.ПосредническиеУслуги, "СчетЗатрат");

	ДанныеДвижений = ПодготовитьДанныеДвиженийПоступлениеТоваровУслугОтПоставщика(
		Неопределено, Параметры.Услуги, Реквизиты);

	ПлательщикНДС     = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	РаздельныйУчетНДС = УчетнаяПолитика.РаздельныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	ВерсияУчетаНДС    = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	УпрощенныйУчетНДС = ВерсияУчетаНДС = 1 И УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	
	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Реквизиты.Организация, Реквизиты.Период);
	ДвиженияРаздельныйУчетНДС  = РаздельныйУчетНДС И НЕ РаздельныйУчетНДСНаСчете19;
	НДСВключенВСтоимость	   = Реквизиты.НДСВключенВСтоимость И НЕ РаздельныйУчетНДСНаСчете19;
	ПоставщикПредъявляетНДС	   = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.ДоговорКонтрагента, "ПредъявляетНДС");
	
	// Бухгалтерские проводки

	Если НЕ НДСВключенВСтоимость
		И ДанныеДвижений.Итог("НДС") <> 0 Тогда

		РеквизитыПроводок = ПодготовитьРеквизитыПроводокПоступлениеТоваровУслугОтПоставщика(Реквизиты);

		СформироватьПроводкиПоступлениеТоваровУслуг(ДанныеДвижений, РеквизитыПроводок, Движения, Отказ);

	КонецЕсли;
		
	Если НЕ ПлательщикНДС Тогда
		Возврат;
	КонецЕсли;
    
	// Движения регистров подсистемы НДС
	
	Если ВерсияУчетаНДС = 1 Тогда
		
		Если НЕ УпрощенныйУчетНДС Тогда
			
			Если ДанныеДвижений.Итог("НДС") <> 0 ИЛИ ПоставщикПредъявляетНДС Тогда
				СформироватьДвиженияНДСПредъявленныйПоступлениеТоваровУслуг(ДанныеДвижений, Движения, Отказ);
				Если Реквизиты.НДСВключенВСтоимость Тогда
					СформироватьДвиженияНДСПредъявленныйВключениеВСтоимость(ДанныеДвижений, Движения,, Отказ);
				КонецЕсли;
			КонецЕсли;
			
			Если РаздельныйУчетНДС Тогда
				
				РаспределеляемыеРасходы = УчетНДСПереопределяемый.ОпределитьРаспределеляемыеРасходы(Параметры.Услуги);
				УчетНДСПереопределяемый.СформироватьДвиженияНДСКосвенныеРасходыПоступлениеУслуг(РаспределеляемыеРасходы, Реквизиты, Движения, Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе	
		
		Если ДанныеДвижений.Итог("НДС") <> 0 ИЛИ ПоставщикПредъявляетНДС Тогда
			СформироватьДвиженияНДСПредъявленныйПоступлениеТоваровУслуг(ДанныеДвижений, Движения, Отказ);
			Если НДСВключенВСтоимость Тогда
				СформироватьДвиженияНДСПредъявленныйВключениеВСтоимость(ДанныеДвижений, Движения,, Отказ);
			КонецЕсли;
		КонецЕсли;

		Если ДвиженияРаздельныйУчетНДС Тогда
			
			РаспределеляемыеРасходы = УчетНДСПереопределяемый.ОпределитьРаспределеляемыеРасходы(Параметры.Услуги);
			УчетНДСПереопределяемый.СформироватьДвиженияНДСКосвенныеРасходыПоступлениеУслуг(РаспределеляемыеРасходы, Реквизиты, Движения, Отказ);
			
		КонецЕсли;		
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьПараметрыПоступлениеПосредническихУслуг(ТаблицаУслуги, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                    // <ДокументСсылка>
	+ "Период,"                         // <Дата>
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "Подразделение,"                  // Подразделение для проводок
	+ "НДСВключенВСтоимость,"           // <Булево>
	+ "Контрагент,"                     // <СправочникСсылка.Контрагенты>
	+ "ДоговорКонтрагента,"             // <СправочникСсылка.ДоговорыКонтрагентов>
	+ "СчетУчетаРасчетовСКонтрагентом," // <ПланСчетовСсылка.Хозрасчетный>
	+ "ВалютаВзаиморасчетов"            // <СправочникСсылка.Валюты>
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	Параметры.Реквизиты.Колонки.Добавить("УчетАгентскогоНДС", Новый ОписаниеТипов("Булево"));

	// Подготовка таблицы Услуги

	СписокОбязательныхКолонок = ""
	+ "Содержание,"              // <Строка,150> - содержание для проводок
	+ "СуммаРуб,"                // <Число,15,2> - сумма в рублях
	+ "СуммаБезНДСРуб,"          // <Число,15,2> - сумма без НДС в рублях
	+ "СуммаНДСРуб,"             // <Число,15,2> - сумма НДС в рублях
	+ "СчетЗатрат,"              // <ПланСчетовСсылка.Хозрасчетный>
	+ "Субконто1,"               // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "Субконто2,"               // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "Субконто3,"               // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "СтатьяЗатрат,"            // <СправочникСсылка.СтатьиЗатрат>
	+ "ПодразделениеЗатрат,"     // <Ссылка на справочник подразделений>
	+ "СчетУчетаНДС,"            // <ПланСчетовСсылка.Хозрасчетный>
	+ "СуммаВзаиморасчетов,"     // <Число,15,2> - сумма в валюте расчетов с поставщиком
	+ "СуммаНДСВзаиморасчетов,"  // <Число,15,2> - сумма НДС в валюте расчетов с поставщиком
	+ "СтавкаНДС,"               // <ПеречислениеСсылка.СтавкиНДС>
	+ "СпособУчетаНДС"           // <ПеречислениеСсылка.СпособыУчетаНДС>
	;
	Параметры.Вставить("Услуги", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаУслуги, СписокОбязательныхКолонок));
	// Документом-основанием счета-фактуры при поступлении от поставщика выступает документ поступления
	Параметры.Услуги.Колонки.Добавить("СчетФактура", Документы.ТипВсеСсылки());
	Если Параметры.Реквизиты.Количество() > 0 Тогда
		Реквизиты = Параметры.Реквизиты[0];
		Параметры.Услуги.ЗаполнитьЗначения(Реквизиты.Регистратор, "СчетФактура");
	КонецЕсли;

	Возврат Параметры;

КонецФункции

// Формирование движений по НДС, уплаченному на таможне при ввозе товаров
//
Процедура СформироватьДвиженияУплатаНДСнаТаможне(ТаблицаТовары, ТаблицаВзаиморасчетов, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыУплатаНДСнаТаможне(ТаблицаТовары, ТаблицаВзаиморасчетов, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	Если Параметры.Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Выделяем таможенные платежи по ОС
	ЗаполнитьВидыЦенностей(Параметры.Товары, Неопределено, "СчетУчета");
	Для каждого СтрокаТаблицы Из Параметры.Товары Цикл
		Если СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.ОС Тогда
			СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС;
		Иначе
			СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.ТаможенныеПлатежи;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеДвижений = ПодготовитьДанныеДвиженийПоступлениеДопРасходовОтПоставщика(Параметры.Товары, Реквизиты);
	
	РаздельныйУчетНДС = УчетнаяПолитика.РаздельныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	ВерсияУчетаНДС    = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	УпрощенныйУчетНДС = ВерсияУчетаНДС = 1 И УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	
	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Реквизиты.Организация, Реквизиты.Период);
	ДвиженияРаздельныйУчетНДС  = РаздельныйУчетНДС И НЕ РаздельныйУчетНДСНаСчете19;
	НДСВключенВСтоимость	   = Реквизиты.НДСВключенВСтоимость И НЕ РаздельныйУчетНДСНаСчете19;
	НДСПредъявленКВычету       = Реквизиты.НДСПредъявленКВычету И НЕ РаздельныйУчетНДСНаСчете19;
	
	// Бухгалтерские проводки
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	
	Если НЕ НДСВключенВСтоимость
		И ДанныеДвижений.Итог("НДС") <> 0 Тогда
		
		РеквизитыПроводок = ПодготовитьРеквизитыПроводокПоступлениеДопРасходовОтПоставщика(Реквизиты);
		ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Содержание, "Содержание");
		СформироватьПроводкиПоступлениеТоваровУслуг(ДанныеДвижений, РеквизитыПроводок, Движения, Отказ);
				
		Если (УпрощенныйУчетНДС ИЛИ ВерсияУчетаНДС = 2)
			И НДСПредъявленКВычету 
			И ПлательщикНДС Тогда
			СформироватьПроводкиПоступлениеТоваровУслугВычетНДС(ДанныеДвижений, Движения, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ПлательщикНДС Тогда
		Возврат;
	КонецЕсли;
	
	// Движения регистров подсистемы НДС
	Если ВерсияУчетаНДС = 1 Тогда
		
		Если УпрощенныйУчетНДС Тогда
			
			Если НЕ Реквизиты.НДСВключенВСтоимость
				И Реквизиты.НДСПредъявленКВычету Тогда
				СформироватьДвиженияНДСЗаписиКнигиПокупокПоступлениеТоваровУслуг(ДанныеДвижений, Движения, Отказ);
			КонецЕсли;
			
		Иначе
			
			СформироватьДвиженияНДСПредъявленныйПоступлениеТоваровУслуг(ДанныеДвижений, Движения, Отказ);
			Если Реквизиты.НДСВключенВСтоимость Тогда
				СформироватьДвиженияНДСПредъявленныйВключениеВСтоимость(ДанныеДвижений, Движения,, Отказ);
			КонецЕсли;
			
			Если РаздельныйУчетНДС Тогда
				УчетНДСПереопределяемый.СформироватьДвиженияНДСПоПриобретеннымЦенностямПоступлениеТоваров(Параметры.Товары, Реквизиты, Движения, Отказ);
			Иначе
				Параметры.Товары.Индексы.Добавить("ВидЦенности");
				ОсновныеСредства = Параметры.Товары.Скопировать(
					Новый Структура("ВидЦенности", Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС));
				УчетНДСПереопределяемый.СформироватьДвиженияНДСПоПриобретеннымЦенностямПоступлениеТоваров(ОсновныеСредства, Реквизиты, Движения, Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СформироватьДвиженияНДСПредъявленныйПоступлениеТоваровУслуг(ДанныеДвижений, Движения, Отказ);
		Если НДСВключенВСтоимость Тогда
			СформироватьДвиженияНДСПредъявленныйВключениеВСтоимость(ДанныеДвижений, Движения,, Отказ);
		КонецЕсли;
		
		Если ДвиженияРаздельныйУчетНДС Тогда
			УчетНДСПереопределяемый.СформироватьДвиженияНДСПоПриобретеннымЦенностямПоступлениеТоваров(Параметры.Товары, Реквизиты, Движения, Отказ);
		Иначе
			Параметры.Товары.Индексы.Добавить("ВидЦенности");
			ОсновныеСредства = Параметры.Товары.Скопировать(
				Новый Структура("ВидЦенности", Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС));
			УчетНДСПереопределяемый.СформироватьДвиженияНДСПоПриобретеннымЦенностямПоступлениеТоваров(ОсновныеСредства, Реквизиты, Движения, Отказ);
		КонецЕсли;
		
		Если НЕ НДСВключенВСтоимость
			И НДСПредъявленКВычету Тогда
			
			СформироватьДвиженияНДСПредъявленныйВычетНДС(ДанныеДвижений, Движения,, Отказ);
			ОпределитьРеквизитыОплатыТаможенногоНДС(Параметры.ТаблицаВзаиморасчетов, ДанныеДвижений, Реквизиты);
			СформироватьДвиженияНДСЗаписиКнигиПокупокПоступлениеТоваровУслуг(ДанныеДвижений, Движения, Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьПараметрыУплатаНДСнаТаможне(ТаблицаТовары, ТаблицаВзаиморасчетов, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                    // <ДокументСсылка>
	+ "Период,"                         // <Дата>
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "Подразделение,"                  // <Ссылка на справочник подразделений>
	+ "Контрагент,"                     // <СправочникСсылка.Контрагенты>
	+ "ДоговорКонтрагента,"             // <СправочникСсылка.ДоговорыКонтрагентов>
	+ "СчетУчетаРасчетовСКонтрагентом," // <ПланСчетовСсылка.Хозрасчетный>
	+ "НДСПредъявленКВычету,"           // <Булево> - признак, что НДС по ГТД сразу предъявляется к вычету
	+ "НДСВключенВСтоимость,"           // <Булево> - признак, что НДС по ГТД включается в стоимость номенклатуры
	+ "ВалютаВзаиморасчетов,"           // <СправочникСсылка.Валюты>
	+ "Содержание"                      // <Строка, 150> - содержание для проводок
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	// При уплате НДС на таможне всегда УчетАгентскогоНДС=Ложь
	Параметры.Реквизиты.Колонки.Добавить("УчетАгентскогоНДС", Новый ОписаниеТипов("Булево"));

	// Подготовка таблицы Товары

	СписокОбязательныхКолонок = ""
	+ "ДокументПартии,"          // <ДокументСсылка> - документ поступления товаров
	+ "Номенклатура,"            // <СправочникСсылка.Номенклатура> - поступивший ранее товар
	+ "Склад,"                   // <СправочникСсылка.Склады> - склад, на который поступил ранее товар
	+ "Содержание,"              // <Строка,150> - содержание для проводок
	+ "Подразделение,"           // Подразделение для проводок
	+ "СчетУчета,"               // <ПланСчетовСсылка.Хозрасчетный>
	+ "СчетУчетаНДС,"            // <ПланСчетовСсылка.Хозрасчетный>
	+ "СуммаНДСРуб,"             // <Число,15,2> - сумма НДС в рублях
	+ "СуммаНДСВзаиморасчетов,"  // <Число,15,2> - сумма НДС в валюте расчетов с таможней
	+ "СтавкаНДС,"               // <ПеречислениеСсылка.СтавкиНДС>
	+ "КодВидаОперации,"         // <Строка, 10>
	+ "СпособУчетаНДС,"          // <ПеречислениеСсылка.СпособыУчетаНДС>
	+ "СуммаБезНДСРуб"           // <Число,15,2> - Фактурная стоимость в рублях
	;
	
	Параметры.Вставить("Товары", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТовары, СписокОбязательныхКолонок));
	Реквизиты = Параметры.Реквизиты[0];
	// Документом партии служит документ поступления товаров
	Параметры.Товары.Колонки.ДокументПартии.Имя = "Партия";
	// Документом-основанием счета-фактуры выступает сам документ ГТД по импорту
	Параметры.Товары.Колонки.Добавить("СчетФактура", Документы.ТипВсеСсылки());
	Параметры.Товары.ЗаполнитьЗначения(Реквизиты.Регистратор, "СчетФактура");
	// Для расходов по уплате НДС на таможне, как и для всех остальных доп.расходов,
	// количество в регистре НДСпоПриобретеннымЦенностям всегда равно нулю
	Параметры.Товары.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	// При уплате НДС на таможне в регистре НДСпоПриобретеннымЦенностям отражается только сам уплаченный НДС,
	// поэтому СуммаРуб, СуммаБезНДСРуб и СуммаВзаиморасчетов равны 0
	Параметры.Товары.Колонки.Добавить("СуммаРуб", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Параметры.Товары.Колонки.Добавить("СуммаВзаиморасчетов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));

	// Подготовка таблицы для опредления даты оплаты // ДокументРасчетов
	
	СписокОбязательныхКолонок = ""
	+ "ДокументРасчетов"; 			// <ДокументСсылка> - документ расчетов
	
	Параметры.Вставить("ТаблицаВзаиморасчетов", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВзаиморасчетов, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции

Процедура ОпределитьРеквизитыОплатыТаможенногоНДС(ТаблицаВзаиморасчеты, ТаблицаДвижений, Реквизиты)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаВзаиморасчеты", 	ТаблицаВзаиморасчеты);
	Запрос.УстановитьПараметр("Организация", 			Реквизиты.Организация);
	Запрос.УстановитьПараметр("Регистратор", 			Реквизиты.Регистратор);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаВзаиморасчеты.ДокументРасчетов
	|ПОМЕСТИТЬ ДокументыРасчетов
	|ИЗ
	|	&ТаблицаВзаиморасчеты КАК ТаблицаВзаиморасчеты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТаблицаВзаиморасчеты.ДокументРасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЕСТЬNULL(РеквизитыДокументовРасчетов.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОплаты,
	|	ЕСТЬNULL(РеквизитыДокументовРасчетов.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаДокументаОплаты,
	|	ЕСТЬNULL(РеквизитыДокументовРасчетов.Номер, ДАТАВРЕМЯ(1, 1, 1)) КАК НомерДокументаОплаты
	|ИЗ
	|	ДокументыРасчетов КАК ДокументыРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументовРасчетов
	|		ПО (РеквизитыДокументовРасчетов.Организация = &Организация)
	|			И ДокументыРасчетов.ДокументРасчетов = РеквизитыДокументовРасчетов.Документ
	|ГДЕ
	|	ДокументыРасчетов.ДокументРасчетов <> &Регистратор";
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
	
		ТаблицаДокументовОплаты = Результат.Выгрузить();
		РеквизитыДокументаОплаты = ТаблицаДокументовОплаты[0];
		
		Если УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(Реквизиты.Период) = 3 Тогда
			ТаблицаДвижений.Колонки.Добавить("НомерДокументаОплаты", 	ОбщегоНазначения.ОписаниеТипаСтрока(30));
			ТаблицаДвижений.Колонки.Добавить("ДатаДокументаОплаты",  	ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
		Иначе
			ТаблицаДвижений.Колонки.Добавить("ДатаОплаты",  			ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
		КонецЕсли;
		
		Для каждого СтрокаДвижений Из ТаблицаДвижений Цикл
			ЗаполнитьЗначенияСвойств(СтрокаДвижений, РеквизитыДокументаОплаты);
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

// Формирование движений при возврате товаров от покупателя
//
Процедура СформироватьДвиженияВозвратТоваровОтПокупателя(
	ТаблицаТовары, ТаблицаСписанныеТовары, ТаблицаНомераГТД, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыВозвратТоваровОтПокупателя(
		ТаблицаТовары, ТаблицаСписанныеТовары, ТаблицаНомераГТД, ТаблицаРеквизиты);
		
	Реквизиты = Параметры.Реквизиты[0];
	
	УчетНДСПереопределяемый.СформироватьПроводкиПоступлениеГТД(Параметры.НомераГТД, Реквизиты, Движения, Отказ);
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	Если НЕ ПлательщикНДС Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСПартиями = ПодготовитьТаблицуСписанныхПартийДляВозврата(Реквизиты, Параметры);
	
	Если ТаблицаСПартиями.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Если Реквизиты.ПокупателемВыставляетсяСчетФактураНаВозврат
		ИЛИ Реквизиты.ОтразитьВКнигеПокупок Тогда
		ВидЦенности = Перечисления.ВидыЦенностей.Возврат;
	Иначе
		ВидЦенности = Неопределено;
	КонецЕсли;
	ЗаполнитьВидыЦенностей(ТаблицаСПартиями, ВидЦенности, "СчетУчета");

	ШаблонСодержания = НСтр("ru = 'Возврат %1 от покупателя'");
	
	Для каждого СтрокаТаблицы Из ТаблицаСПартиями Цикл
		СтрокаТаблицы.Содержание  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСодержания,
			БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьНазваниеОбъекта(СтрокаТаблицы.СчетУчета));
		
		// СуммаРуб не должна включать НДС - как в других документах поступления
		СтрокаТаблицы.СуммаРуб = СтрокаТаблицы.СуммаРуб - СтрокаТаблицы.СуммаНДСРуб;
	КонецЦикла;

	ДанныеДвижений = ПодготовитьДанныеДвиженийВозвратТоваровОтПокупателя(ТаблицаСПартиями, Реквизиты);

	РаздельныйУчетНДС = УчетнаяПолитика.РаздельныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	ВерсияУчетаНДС    = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	УпрощенныйУчетНДС = ВерсияУчетаНДС = 1 И УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Реквизиты.Организация, Реквизиты.Период);
	
	// Бухгалтерские проводки

	Если ДанныеДвижений.Итог("НДС") <> 0 Тогда
		СформироватьПроводкиВозвратТоваровОтПокупателя(ТаблицаСПартиями, Реквизиты, Движения, Отказ);
	КонецЕсли;

	Если ВерсияУчетаНДС = 1 Тогда
		
		Если УпрощенныйУчетНДС Тогда

			Если НЕ Реквизиты.ПокупателемВыставляетсяСчетФактураНаВозврат И Реквизиты.ОтразитьВКнигеПокупок Тогда

               СформироватьДвиженияНДСЗаписиКнигиПокупокПоступлениеТоваровУслуг(ДанныеДвижений, Движения, Отказ);

			Иначе

				// Сторно в книге продаж
				СформироватьДвиженияНДСЗаписиКнигиПродажВозвратТоваровОтПокупателя(ДанныеДвижений, Реквизиты, Движения, Отказ);

			КонецЕсли;

		Иначе // не-упрощенный учет

			// Движения по начислению НДС

			Если Реквизиты.ПокупателемВыставляетсяСчетФактураНаВозврат
				ИЛИ Реквизиты.ОтразитьВКнигеПокупок Тогда
				// Обычное поступление
				СформироватьДвиженияНДСПредъявленныйПоступлениеТоваровУслуг(ДанныеДвижений, Движения, Отказ);
			Иначе
				// Сторно движений регистров НДС начисленный, НДС реализация 0%
				УчетНДСПереопределяемый.СформироватьДвиженияНДСНачисленныйВозвратТоваровОтПокупателя(ДанныеДвижений, Движения, Отказ);
			КонецЕсли;

			// Движения по партионному учету НДС

			Если Реквизиты.ПокупателемВыставляетсяСчетФактураНаВозврат
				ИЛИ НЕ ЗначениеЗаполнено(Реквизиты.ДокументОтгрузки) Тогда

				// Обычное поступление
				Если РаздельныйУчетНДС Тогда
					УчетНДСПереопределяемый.СформироватьДвиженияНДСПоПриобретеннымЦенностямПоступлениеТоваров(ТаблицаСПартиями, Реквизиты, Движения, Отказ);
				Иначе
					ТаблицаСПартиями.Индексы.Добавить("ВидЦенности");
					ОсновныеСредства = ТаблицаСПартиями.Скопировать(Новый Структура("ВидЦенности", Перечисления.ВидыЦенностей.ОС));
					УчетНДСПереопределяемый.СформироватьДвиженияНДСПоПриобретеннымЦенностямПоступлениеТоваров(ОсновныеСредства, Реквизиты, Движения, Отказ);
				КонецЕсли;

			Иначе
				// Сторно движений документа отгрузки по регистру НДС по приобретенным ценностям
				УчетНДСПереопределяемый.СформироватьДвиженияНДСПоПриобретеннымЦенностямВозвратТоваровПокупателем(ТаблицаСПартиями, Реквизиты, Движения, Отказ);
			КонецЕсли;

		КонецЕсли;
		
	Иначе
		
		Если НЕ Реквизиты.ПокупателемВыставляетсяСчетФактураНаВозврат И НЕ Реквизиты.ОтразитьВКнигеПокупок Тогда
			
			// Сторно в книге продаж (для совместимости с 2.0)
			СформироватьДвиженияНДСЗаписиКнигиПродажВозвратТоваровОтПокупателя(ДанныеДвижений, Реквизиты, Движения, Отказ);

		КонецЕсли;	
		
		// Движения по начислению НДС

		Если Реквизиты.ПокупателемВыставляетсяСчетФактураНаВозврат
			ИЛИ Реквизиты.ОтразитьВКнигеПокупок Тогда
			// Обычное поступление
			СформироватьДвиженияНДСПредъявленныйПоступлениеТоваровУслуг(ДанныеДвижений, Движения, Отказ);
		КонецЕсли;

		// Движения по партионному учету НДС

		// Обычное поступление
		Если РаздельныйУчетНДСНаСчете19 Тогда
			УчетНДСПереопределяемый.СформироватьДвиженияВозвратТоваровОтПокупателя(ТаблицаСПартиями, Реквизиты, Движения, Отказ);
		ИначеЕсли РаздельныйУчетНДС Тогда
			Если ЗначениеЗаполнено(Реквизиты.ДокументОтгрузки) Тогда
				// Сторно движений документа отгрузки по регистру НДС по приобретенным ценностям
				УчетНДСПереопределяемый.СформироватьДвиженияНДСПоПриобретеннымЦенностямВозвратТоваровПокупателем(ТаблицаСПартиями, Реквизиты, Движения, Отказ);
			Иначе
				// Фиксируем приход по регистру НДС по приобретенным ценностям
				УчетНДСПереопределяемый.СформироватьДвиженияНДСПоПриобретеннымЦенностямПоступлениеТоваров(ТаблицаСПартиями, Реквизиты, Движения, Отказ);
			КонецЕсли;
		Иначе
			ТаблицаСПартиями.Индексы.Добавить("ВидЦенности");
			ОсновныеСредства = ТаблицаСПартиями.Скопировать(Новый Структура("ВидЦенности", Перечисления.ВидыЦенностей.ОС));
			УчетНДСПереопределяемый.СформироватьДвиженияНДСПоПриобретеннымЦенностямПоступлениеТоваров(ОсновныеСредства, Реквизиты, Движения, Отказ);
		КонецЕсли;

	КонецЕсли;	
	
КонецПроцедуры

Функция ПодготовитьПараметрыВозвратТоваровОтПокупателя(ТаблицаТовары, ТаблицаСписанныеТовары, ТаблицаНомераГТД, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                    // <ДокументСсылка>
	+ "Период,"                         // <Дата>
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "Подразделение,"                  // <Ссылка на справочник подразделений>
	+ "Склад,"                          // <СправочникСсылка.Склады>
	+ "Контрагент,"                     // <СправочникСсылка.Контрагенты>
	+ "СчетУчетаНДС,"                   // <ПланСчетовСсылка.Хозрасчетный>
	+ "ВалютаВзаиморасчетов,"           // <СправочникСсылка.Валюты>
	+ "ДокументОтгрузки,"               // <ДокументСсылка> - документ, которым были отгружены возвращаемые товары
	+ "ОтразитьВКнигеПокупок,"          // <Булево> - отражать возврат в книге покупок или в книге продаж
	                                    // (выбор возможен если покупатель не выставляет счет-фактуру на возврат)
	+ "ПокупателемВыставляетсяСчетФактураНаВозврат," // <Булево> - признак, что покупатель выставляет нам счет-фактуру на возвращаемый товар
	+ "ТипСкладаПолучателя"
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	// При возврате не может быть агентского НДС (всегда УчетАгентскогоНДС = Ложь)
	Параметры.Реквизиты.Колонки.Добавить("УчетАгентскогоНДС", Новый ОписаниеТипов("Булево"));
	// При возврате нет возможности включить НДС в стоимость (всегда НДСВключенВСтоимость = Ложь)
	Параметры.Реквизиты.Колонки.Добавить("НДСВключенВСтоимость", Новый ОписаниеТипов("Булево"));

	// Подготовка таблицы Товары

	СписокОбязательныхКолонок = ""
	+ "Номенклатура,"             // <СправочникСсылка.Номенклатура>
	+ "СуммаРуб,"                 // <Число,15,2> - сумма в рублях
	+ "СуммаБезНДСРуб,"           // <Число,15,2> - сумма без НДС в рублях
	+ "СуммаНДСРуб,"              // <Число,15,2> - сумма НДС в рублях
	+ "СчетУчета,"                // <ПланСчетовСсылка.Хозрасчетный>
	+ "СчетДоходов,"              // <ПланСчетовСсылка.Хозрасчетный>
	+ "СчетУчетаНДСпоРеализации," // <ПланСчетовСсылка.Хозрасчетный>
	+ "Субконто,"                 // <Характеристика.ВидыСубконтоХозрасчетные> - субконто по счету учета НДС по реализации
	+ "Подразделение,"            // <Ссылка на справочник подразделений>
	+ "СтавкаНДС,"                // <ПеречислениеСсылка.СтавкиНДС>
	+ "СпособУчетаНДС,"           // <ПеречислениеСсылка.СпособыУчетаНДС>
	+ "Количество"                // <Число,15,3>
	;
	Параметры.Вставить("Товары", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТовары, СписокОбязательныхКолонок));
		
	СписокОбязательныхКолонок = ""
	+ "Номенклатура,"             	// <СправочникСсылка.Номенклатура>
	+ "СчетУчета,"                	// <ПланСчетовСсылка.Хозрасчетный>
	+ "Партия," 					// 
	+ "Количество"                  // <Число,15,3>
	;	
	
	Параметры.Вставить("СписанныеТовары", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСписанныеТовары, СписокОбязательныхКолонок));
		
	Реквизиты = Параметры.Реквизиты[0];
	
	Параметры.Товары.Свернуть(
		"Номенклатура,СчетУчета,СчетДоходов,СчетУчетаНДСпоРеализации,Субконто,Подразделение,СтавкаНДС,СпособУчетаНДС", 
		"СуммаРуб,СуммаБезНДСРуб,СуммаНДСРуб,Количество");

	Параметры.Товары.Колонки.Добавить("Содержание", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150)));
	// Документом-основанием счета-фактуры может быть или сам документ возврата,
	// или документ отгрузки (если он указан и покупателем не выставляется счет-фактура на возврат)
	Параметры.Товары.Колонки.Добавить("СчетФактура", Документы.ТипВсеСсылки());
	Параметры.Товары.Колонки.Добавить("Партия", Документы.ТипВсеСсылки());
	Если Реквизиты.ПокупателемВыставляетсяСчетФактураНаВозврат Тогда
		Параметры.Товары.ЗаполнитьЗначения(Реквизиты.Регистратор, "СчетФактура");
	ИначеЕсли ЗначениеЗаполнено(Реквизиты.ДокументОтгрузки) Тогда
		Параметры.Товары.ЗаполнитьЗначения(Реквизиты.ДокументОтгрузки, "СчетФактура");
	Иначе
		Параметры.Товары.ЗаполнитьЗначения(Реквизиты.Регистратор, "СчетФактура");
	КонецЕсли;
	// Склад берем из шапки документа возврата
	Параметры.Товары.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	Параметры.Товары.ЗаполнитьЗначения(Реквизиты.Склад, "Склад");
	// Счет учета НДС по приобретенным ценностям берем из шапки документа возврата
	Параметры.Товары.Колонки.Добавить("СчетУчетаНДС", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	Параметры.Товары.ЗаполнитьЗначения(Реквизиты.СчетУчетаНДС, "СчетУчетаНДС");
	
	// Подготовка таблицы НомераГТД

	СписокОбязательныхКолонок = ""
	+ "Номенклатура,"         // <СправочникСсылка.Номенклатура>
	+ "НомерГТД,"             // <СправочникСсылка.НомераГТД>
	+ "СтранаПроисхождения,"  // <СправочникСсылка.СтраныМира>
	+ "Количество,"	          // <Число,15,3>
	+ "Содержание"	          // <Строка,150>
	;
	Параметры.Вставить("НомераГТД", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаНомераГТД, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьДанныеДвиженийВозвратТоваровОтПокупателя(Товары, Реквизиты)

	Если Товары.Количество() = 0 Тогда
		ПустаяТаблица = Товары.СкопироватьКолонки();
		НайденнаяКолонка = ПустаяТаблица.Колонки.Найти("СуммаБезНДСРуб");
		Если НайденнаяКолонка <> Неопределено Тогда
			НайденнаяКолонка.Имя = "СуммаБезНДС";
		КонецЕсли;
		НайденнаяКолонка = ПустаяТаблица.Колонки.Найти("СуммаНДСРуб");
		Если НайденнаяКолонка <> Неопределено Тогда
			НайденнаяКолонка.Имя = "НДС";
		КонецЕсли;
		Возврат ПустаяТаблица;
	КонецЕсли;

	ДанныеДвижений = Товары.Скопировать(,
		"СчетФактура,СтавкаНДС,СчетДоходов,СчетУчетаНДС,ВидЦенности,Содержание,
		|СуммаРуб,СуммаБезНДСРуб,СуммаНДСРуб,СчетУчета");
		
	ДанныеДвижений.Свернуть(
		"СчетФактура,СтавкаНДС,СчетДоходов,СчетУчетаНДС,ВидЦенности,Содержание", 
		"СуммаРуб,СуммаБезНДСРуб,СуммаНДСРуб");

	ДанныеДвижений.Колонки.Добавить("Период",      Новый ОписаниеТипов("Дата"));
	ДанныеДвижений.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Период, "Период,ДатаСобытия");

	ДанныеДвижений.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");

	// Для отражения в книге покупок
	ДанныеДвижений.Колонки.Добавить("Поставщик",  Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	// Для отражения в книге продаж
	ДанныеДвижений.Колонки.Добавить("Покупатель", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Контрагент, "Поставщик,Покупатель");

	// Договор указывается только для налогового агента, при возврате от покупателя всегда пустой
	ДанныеДвижений.Колонки.Добавить("ДоговорКонтрагента", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));

	ДанныеДвижений.Колонки.СуммаБезНДСРуб.Имя    = "СуммаБезНДС";
	ДанныеДвижений.Колонки.СуммаНДСРуб.Имя = "НДС";

	Возврат ДанныеДвижений;

КонецФункции

Функция ПодготовитьТаблицуСписанныхПартийДляВозврата(Реквизиты, Параметры)

	Параметры.СписанныеТовары.Свернуть("СчетУчета,Номенклатура,Партия", "Количество");
	УчетТоваров.ПроставитьСторноТаблицы(Параметры.СписанныеТовары, Новый Структура("Количество"), -1);

	ТаблицаСПартиями = Параметры.Товары.СкопироватьКолонки();
	
	Для каждого СтрокаРеализации Из Параметры.Товары Цикл
	
		СтруктураОтбора = Новый Структура("Номенклатура, СчетУчета");
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаРеализации);
		НайденныеСтроки = Параметры.СписанныеТовары.НайтиСтроки(СтруктураОтбора);
		
		ТаблицаСТекущейПартией = Параметры.Товары.СкопироватьКолонки();
		
		Для каждого СтрокаСписания Из НайденныеСтроки Цикл
			
			Если СтрокаСписания.Количество <> 0 Тогда
				
				КоличествоПоПартии = Мин(СтрокаСписания.Количество, СтрокаРеализации.Количество);
			
				НоваяСтрока = ТаблицаСТекущейПартией.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРеализации, ,"Количество,СуммаРуб,СуммаБезНДСРуб,СуммаНДСРуб");
				НоваяСтрока.Партия = ?(ЗначениеЗаполнено(СтрокаСписания.Партия), СтрокаСписания.Партия, Реквизиты.Регистратор);
				НоваяСтрока.Количество = КоличествоПоПартии;
				СтрокаСписания.Количество = СтрокаСписания.Количество - НоваяСтрока.Количество;
				
			КонецЕсли; 
			
		КонецЦикла; 
		
		Если ТаблицаСТекущейПартией.Количество() <> 0 Тогда
			
			МассивРаспределенияСуммаРуб = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
				СтрокаРеализации.СуммаРуб, ТаблицаСТекущейПартией.ВыгрузитьКолонку("Количество"));
			
			Если МассивРаспределенияСуммаРуб <> Неопределено Тогда
				ТаблицаСТекущейПартией.ЗагрузитьКолонку(МассивРаспределенияСуммаРуб ,"СуммаРуб");
			Иначе	
				ТаблицаСТекущейПартией.ЗаполнитьЗначения(0, "СуммаРуб");
			КонецЕсли;
			
			МассивРаспределенияСуммаБезНДСРуб = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
				СтрокаРеализации.СуммаБезНДСРуб, ТаблицаСТекущейПартией.ВыгрузитьКолонку("Количество"));
				
			Если МассивРаспределенияСуммаБезНДСРуб <> Неопределено Тогда
				ТаблицаСТекущейПартией.ЗагрузитьКолонку(МассивРаспределенияСуммаБезНДСРуб ,"СуммаБезНДСРуб");
			Иначе	
				ТаблицаСТекущейПартией.ЗаполнитьЗначения(0, "СуммаБезНДСРуб");
			КонецЕсли;
				
			МассивРаспределенияСуммаНДСРуб = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
				СтрокаРеализации.СуммаНДСРуб, ТаблицаСТекущейПартией.ВыгрузитьКолонку("Количество"));
			
			Если МассивРаспределенияСуммаНДСРуб <> Неопределено Тогда
				ТаблицаСТекущейПартией.ЗагрузитьКолонку(МассивРаспределенияСуммаНДСРуб, "СуммаНДСРуб");
			Иначе
				ТаблицаСТекущейПартией.ЗаполнитьЗначения(0, "СуммаНДСРуб");
			КонецЕсли; 
			
			ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаСТекущейПартией, ТаблицаСПартиями);
	
		КонецЕсли; 
	
	КонецЦикла; 
	
	ТаблицаСПартиями.Свернуть(
		"Номенклатура,СчетУчета,СчетДоходов,СчетУчетаНДСпоРеализации,Субконто,Подразделение,СтавкаНДС,Партия,
		|Содержание,СчетФактура,Склад,СчетУчетаНДС,СпособУчетаНДС", 
		"СуммаРуб,СуммаБезНДСРуб,СуммаНДСРуб,Количество");
	
	Возврат ТаблицаСПартиями;

КонецФункции

Процедура СформироватьДвиженияВозвратТоваровКомиссионеру(ТаблицаТовары, ТаблицаСписанныеТовары, ТаблицаНомераГТД, ТаблицаРеквизиты, Движения, Отказ) Экспорт 
	
	Параметры = ПодготовитьПараметрыВозвратТоваровКомиссионеру(ТаблицаТовары, 
		ТаблицаСписанныеТовары, 
		ТаблицаНомераГТД, 
		ТаблицаРеквизиты); 
		
	
	Если Параметры.Реквизиты.Количество() = 0
		ИЛИ Параметры.Товары.Количество() = 0
		ИЛИ Параметры.СписанныеТовары.Количество() = 0 Тогда
			Движения.НДСРаздельныйУчет.Записать();
			Движения.НДСПоПриобретеннымЦенностям.Записать();
			Возврат;
	КонецЕсли;
	
	// При возврате не может быть агентского НДС (всегда УчетАгентскогоНДС = Ложь)
	Параметры.Реквизиты.Колонки.Добавить("УчетАгентскогоНДС", Новый ОписаниеТипов("Булево"));
	// При возврате нет возможности включить НДС в стоимость (всегда НДСВключенВСтоимость = Ложь)
	Параметры.Реквизиты.Колонки.Добавить("НДСВключенВСтоимость", Новый ОписаниеТипов("Булево"));
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Параметры.Товары.Свернуть(
		"Номенклатура,СчетУчета,СчетДоходов,СчетУчетаНДСпоРеализации,Субконто,Подразделение,СтавкаНДС,СпособУчетаНДС,СчетФактура,Сделка", 
		"СуммаРуб,СуммаБезНДСРуб,СуммаНДСРуб,Количество");

	Параметры.Товары.Колонки.Добавить("Содержание", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150)));
	// Документом-основанием счета-фактуры может быть или сам документ возврата,
	// или документ отгрузки (если он указан и покупателем не выставляется счет-фактура на возврат)
	Параметры.Товары.Колонки.Добавить("Партия", Документы.ТипВсеСсылки());
	// Склад берем из шапки документа возврата
	Параметры.Товары.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	//Параметры.Товары.ЗаполнитьЗначения(Реквизиты.Склад, "Склад");
	// Счет учета НДС по приобретенным ценностям берем из шапки документа возврата
	Параметры.Товары.Колонки.Добавить("СчетУчетаНДС", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	Параметры.Товары.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ, "СчетУчетаНДС");
	
	УчетНДСПереопределяемый.СформироватьПроводкиПоступлениеГТД(Параметры.НомераГТД, Реквизиты, Движения, Отказ);
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	Если НЕ ПлательщикНДС Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСПартиями = ПодготовитьТаблицуСписанныхПартийДляВозвратаКомиссионеру(Реквизиты, Параметры);
	
	Если ТаблицаСПартиями.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьВидыЦенностей(ТаблицаСПартиями, Перечисления.ВидыЦенностей.Возврат, "СчетУчета");
	
	ШаблонСодержания = НСтр("ru = 'Возврат %1 от покупателя'");
	
	Для каждого СтрокаТаблицы Из ТаблицаСПартиями Цикл
		СтрокаТаблицы.Содержание  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСодержания,
			БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьНазваниеОбъекта(СтрокаТаблицы.СчетУчета)); 
		
		// СуммаРуб не должна включать НДС - как в других документах поступления
		СтрокаТаблицы.СуммаРуб = СтрокаТаблицы.СуммаРуб - СтрокаТаблицы.СуммаНДСРуб;
	КонецЦикла;
	
	ДанныеДвижений = ПодготовитьДанныеДвиженийВозвратТоваровКомиссионеру(ТаблицаСПартиями, Реквизиты);
	
	РаздельныйУчетНДС = УчетнаяПолитика.РаздельныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Реквизиты.Организация, Реквизиты.Период);
	
	// Бухгалтерские проводки
	
	Если ДанныеДвижений.Итог("НДС") <> 0 Тогда
		СформироватьПроводкиВозвратТоваровКомиссионеру(ТаблицаСПартиями, Реквизиты, Движения, Отказ);
	КонецЕсли;
	
	// Движения по начислению НДС
	СформироватьДвиженияНДСПредъявленныйПоступлениеТоваровУслуг(ДанныеДвижений, Движения, Отказ);
	
	// Движения по партионному учету НДС
	Если РаздельныйУчетНДСНаСчете19 Тогда
		УчетНДСПереопределяемый.СформироватьДвиженияВозвратТоваровКомиссионеру(ТаблицаСПартиями, Реквизиты, Движения, Отказ);
	ИначеЕсли РаздельныйУчетНДС Тогда
		УчетНДСПереопределяемый.СформироватьДвиженияНДСПоПриобретеннымЦенностямПоступлениеТоваров(ТаблицаСПартиями, Реквизиты, Движения, Отказ);
	Иначе
		ТаблицаСПартиями.Индексы.Добавить("ВидЦенности");
		ОсновныеСредства = ТаблицаСПартиями.Скопировать(Новый Структура("ВидЦенности", Перечисления.ВидыЦенностей.ОС));
		УчетНДСПереопределяемый.СформироватьДвиженияНДСПоПриобретеннымЦенностямПоступлениеТоваров(ОсновныеСредства, Реквизиты, Движения, Отказ);
	КонецЕсли;
	// Запишем движения, чтобы при реализации возвращенных товаров правильно определились партии
	Движения.НДСРаздельныйУчет.Записать();
	Движения.НДСПоПриобретеннымЦенностям.Записать();
	
КонецПроцедуры

Функция ПодготовитьПараметрыВозвратТоваровКомиссионеру(ТаблицаТовары, ТаблицаСписанныеТовары, ТаблицаНомераГТД, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                    // <ДокументСсылка>
	+ "Период,"                         // <Дата>
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "Подразделение,"                  // <Ссылка на справочник подразделений>
	+ "Контрагент,"                     // <СправочникСсылка.Контрагенты>
	+ "СчетУчетаНДС,"                   // <ПланСчетовСсылка.Хозрасчетный>
	+ "ВалютаВзаиморасчетов"            // <СправочникСсылка.Валюты>
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Товары

	СписокОбязательныхКолонок = ""
	+ "Номенклатура,"				// <СправочникСсылка.Номенклатура>
	+ "СуммаРуб,"					// <Число,15,2> - сумма в рублях
	+ "СуммаБезНДСРуб,"				// <Число,15,2> - сумма без НДС в рублях
	+ "СуммаНДСРуб,"				// <Число,15,2> - сумма НДС в рублях
	+ "СчетУчета,"					// <ПланСчетовСсылка.Хозрасчетный>
	+ "СчетДоходов,"				// <ПланСчетовСсылка.Хозрасчетный>
	+ "СчетУчетаНДСпоРеализации,"	// <ПланСчетовСсылка.Хозрасчетный>
	+ "Субконто,"					// <Характеристика.ВидыСубконтоХозрасчетные> - субконто по счету учета НДС по реализации
	+ "Подразделение,"				// <Ссылка на справочник подразделений>
	+ "СтавкаНДС,"					// <ПеречислениеСсылка.СтавкиНДС>
	+ "СпособУчетаНДС,"				// <ПеречислениеСсылка.СпособыУчетаНДС>
	+ "Количество,"					// <Число,15,3>
	+ "Сделка,"						// <ДокументСсылка.ОтчетКомиссионераОПродажах> - документ реализации возвращенного товара
	+ "СчетФактура"					// <ДокументСсылка.*>
	;
	Параметры.Вставить("Товары", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТовары, СписокОбязательныхКолонок));
		
	СписокОбязательныхКолонок = ""
	+ "Номенклатура,"				// <СправочникСсылка.Номенклатура>
	+ "СчетУчета,"					// <ПланСчетовСсылка.Хозрасчетный>
	+ "Партия," 					// <ДокументСсылка.*> - партия на которую возвращаем товар
	+ "Сделка," 					// <ДокументСсылка.ОтчетКомиссионераОПродажах> - документ, которым были реализованы возвращаемые товары
	+ "ВыставленСФ,"				// <<Булево> - признак выставленного покупателем комиссионеру счета-фактуры по возвращаемым товарам
	+ "СчетФактура,"				// <<ДокументСсылка.СчетФактураПолученный> - счет-фактура полученный от комиссионера по возвращаемым товарам
	+ "Количество"					// <Число,15,3>
	;	
	
	Параметры.Вставить("СписанныеТовары", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСписанныеТовары, СписокОбязательныхКолонок));
		
	// Подготовка таблицы НомераГТД

	СписокОбязательныхКолонок = ""
	+ "Номенклатура,"         // <СправочникСсылка.Номенклатура>
	+ "НомерГТД,"             // <СправочникСсылка.НомераГТД>
	+ "СтранаПроисхождения,"  // <СправочникСсылка.СтраныМира>
	+ "Количество,"	          // <Число,15,3>
	+ "Содержание"	          // <Строка,150>
	;
	Параметры.Вставить("НомераГТД", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаНомераГТД, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьДанныеДвиженийВозвратТоваровКомиссионеру(Товары, Реквизиты)

	Если Товары.Количество() = 0 Тогда
		ПустаяТаблица = Товары.СкопироватьКолонки();
		НайденнаяКолонка = ПустаяТаблица.Колонки.Найти("СуммаБезНДСРуб");
		Если НайденнаяКолонка <> Неопределено Тогда
			НайденнаяКолонка.Имя = "СуммаБезНДС";
		КонецЕсли;
		НайденнаяКолонка = ПустаяТаблица.Колонки.Найти("СуммаНДСРуб");
		Если НайденнаяКолонка <> Неопределено Тогда
			НайденнаяКолонка.Имя = "НДС";
		КонецЕсли;
		Возврат ПустаяТаблица;
	КонецЕсли;

	ДанныеДвижений = Товары.Скопировать(,
		"СчетФактура,СтавкаНДС,СчетДоходов,СчетУчетаНДС,ВидЦенности,Содержание,
		|СуммаРуб,СуммаБезНДСРуб,СуммаНДСРуб,СчетУчета, ПокупателемВыставляетсяСчетФактураНаВозврат");
		
	ДанныеДвижений.Колонки.ПокупателемВыставляетсяСчетФактураНаВозврат.Имя = "ПредъявленСчетФактура";
		
	ДанныеДвижений.Свернуть(
		"СчетФактура,СтавкаНДС,СчетДоходов,СчетУчетаНДС,ВидЦенности,Содержание, ПредъявленСчетФактура",
		"СуммаРуб,СуммаБезНДСРуб,СуммаНДСРуб");

	ДанныеДвижений.Колонки.Добавить("Период",      Новый ОписаниеТипов("Дата"));
	ДанныеДвижений.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Период, "Период,ДатаСобытия");

	ДанныеДвижений.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");
	
	ДанныеДвижений.Колонки.Добавить("НДСВключенВСтоимость", Новый ОписаниеТипов("Булево"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.НДСВключенВСтоимость, "НДСВключенВСтоимость");

	// Для отражения в книге покупок
	ДанныеДвижений.Колонки.Добавить("Поставщик",  Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	// Для отражения в книге продаж
	ДанныеДвижений.Колонки.Добавить("Покупатель", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Контрагент, "Поставщик,Покупатель");

	// Договор указывается только для налогового агента, при возврате от покупателя всегда пустой
	ДанныеДвижений.Колонки.Добавить("ДоговорКонтрагента", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));

	ДанныеДвижений.Колонки.СуммаБезНДСРуб.Имя    = "СуммаБезНДС";
	ДанныеДвижений.Колонки.СуммаНДСРуб.Имя = "НДС";

	Возврат ДанныеДвижений;

КонецФункции

Функция ПодготовитьТаблицуСписанныхПартийДляВозвратаКомиссионеру(Реквизиты, Параметры)

	ТаблицаСписанныеТовары = Параметры.СписанныеТовары.Скопировать(,"СчетУчета,Номенклатура,Партия, Сделка, Количество");
	ТаблицаСписанныеТовары.Свернуть("СчетУчета,Номенклатура,Партия, Сделка", "Количество");
	ТаблицаСписанныеТовары.Индексы.Добавить("Сделка");
	
	УчетТоваров.ПроставитьСторноТаблицы(ТаблицаСписанныеТовары, Новый Структура("Количество"), -1);

	ТаблицаСПартиями = Параметры.Товары.СкопироватьКолонки();
	ТаблицаСПартиями.Колонки.Добавить("ПокупателемВыставляетсяСчетФактураНаВозврат", Новый ОписаниеТипов("Булево")); 
	
	СтруктураОтбора = Новый Структура("Номенклатура, СчетУчета, Сделка");
	
	Для каждого СтрокаРеализации Из Параметры.Товары Цикл
	
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаРеализации);
		НайденныеСтроки = ТаблицаСписанныеТовары.НайтиСтроки(СтруктураОтбора);
		
		ТаблицаСТекущейПартией = ТаблицаСПартиями.СкопироватьКолонки();
		
		Для каждого СтрокаСписания Из НайденныеСтроки Цикл
			
			Если СтрокаСписания.Количество <> 0 Тогда
				
				КоличествоПоПартии = Мин(СтрокаСписания.Количество, СтрокаРеализации.Количество);
			
				НоваяСтрока = ТаблицаСТекущейПартией.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРеализации, ,"Количество, СуммаРуб,СуммаБезНДСРуб,СуммаНДСРуб");
				НоваяСтрока.Партия = ?(ЗначениеЗаполнено(СтрокаСписания.Партия), СтрокаСписания.Партия, Реквизиты.Регистратор);
				НоваяСтрока.ПокупателемВыставляетсяСчетФактураНаВозврат =  ЗначениеЗаполнено(НоваяСтрока.СчетФактура);
				НоваяСтрока.Количество									=  КоличествоПоПартии;
				СтрокаСписания.Количество = СтрокаСписания.Количество - НоваяСтрока.Количество;
				
			КонецЕсли; 
			
		КонецЦикла; 
		
		// Суммы восстанавливаемого НДС заполняем только по возвратам по которым получен счет-фактура от покупателя
		Если ТаблицаСТекущейПартией.Количество() <> 0 и ЗначениеЗаполнено(СтрокаРеализации.СчетФактура) Тогда
			
			МассивРаспределенияСуммаРуб = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
				СтрокаРеализации.СуммаРуб, ТаблицаСТекущейПартией.ВыгрузитьКолонку("Количество"));
			
			Если МассивРаспределенияСуммаРуб <> Неопределено Тогда
				ТаблицаСТекущейПартией.ЗагрузитьКолонку(МассивРаспределенияСуммаРуб ,"СуммаРуб");
			Иначе	
				ТаблицаСТекущейПартией.ЗаполнитьЗначения(0, "СуммаРуб");
			КонецЕсли;
			
			МассивРаспределенияСуммаБезНДСРуб = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
				СтрокаРеализации.СуммаБезНДСРуб, ТаблицаСТекущейПартией.ВыгрузитьКолонку("Количество"));
				
			Если МассивРаспределенияСуммаБезНДСРуб <> Неопределено Тогда
				ТаблицаСТекущейПартией.ЗагрузитьКолонку(МассивРаспределенияСуммаБезНДСРуб ,"СуммаБезНДСРуб");
			Иначе	
				ТаблицаСТекущейПартией.ЗаполнитьЗначения(0, "СуммаБезНДСРуб");
			КонецЕсли;
				
			МассивРаспределенияСуммаНДСРуб = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
				СтрокаРеализации.СуммаНДСРуб, ТаблицаСТекущейПартией.ВыгрузитьКолонку("Количество"));
			
			Если МассивРаспределенияСуммаНДСРуб <> Неопределено Тогда
				ТаблицаСТекущейПартией.ЗагрузитьКолонку(МассивРаспределенияСуммаНДСРуб, "СуммаНДСРуб");
			Иначе
				ТаблицаСТекущейПартией.ЗаполнитьЗначения(0, "СуммаНДСРуб");
			КонецЕсли; 
			
		КонецЕсли; 
		
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаСТекущейПартией, ТаблицаСПартиями);
	
	КонецЦикла; 
	
	ТаблицаСПартиями.Свернуть(
		"Номенклатура,СчетУчета,СчетДоходов,СчетУчетаНДСпоРеализации,Субконто,Подразделение,СтавкаНДС,Партия,
		|Содержание,СчетФактура,Склад,СчетУчетаНДС,СпособУчетаНДС, Сделка, ПокупателемВыставляетсяСчетФактураНаВозврат", 
		"СуммаРуб,СуммаБезНДСРуб,СуммаНДСРуб,Количество");
	
	Возврат ТаблицаСПартиями;

КонецФункции

Процедура СформироватьДвиженияВычетНДСПоПриобретеннымЦенностям(ТаблицаРеквизиты, ТаблицаВычетПоПриобретеннымЦенностям, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыВычетНДСПоПриобретеннымЦенностям(ТаблицаРеквизиты, ТаблицаВычетПоПриобретеннымЦенностям);
	Реквизиты = Параметры.Реквизиты[0];

	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Реквизиты.Организация, Реквизиты.Период);
	Если НЕ ПлательщикНДС Тогда
		Возврат;
	КонецЕсли;
	
	НачалоНалоговогоПериода	= НачалоКвартала(Реквизиты.Период);
	КонецНалоговогоПериода	= КонецКвартала(Реквизиты.Период);
	
	ВерсияУчетаНДС    = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	УпрощенныйУчетНДС = ВерсияУчетаНДС = 1 И УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	
	Если НЕ УпрощенныйУчетНДС Тогда

		// НДС предъявленный
		Если НЕ РаздельныйУчетНДСНаСчете19 ИЛИ НЕ Реквизиты.ПредъявленНДСКВычету0 Тогда
			
			СформироватьДвиженияНДСПредъявленныйВычетНДС(Параметры.ТаблицаДвижений, Движения,, Отказ);
			
		КонецЕсли;
			
		// НДС записи книги покупок
		СформироватьДвиженияНДСЗаписиКнигиПокупок(Параметры.ТаблицаДвижений, Движения, Отказ);

		Если Реквизиты.ПредъявленНДСКВычету0 Тогда

			// НДС предъявленный реализация 0%
			УчетНДСПереопределяемый.СформироватьДвиженияНДСПредъявленныйРеализация0ВычетПоРеализации(Параметры.ТаблицаДвижений, Движения, Отказ);
			// Проводки 68.02 19.07
			Если РаздельныйУчетНДСНаСчете19 Тогда
				УчетНДСПереопределяемый.СформироватьПроводкиВычетНДСПоТоварамРеализованнымПоСтавке0(Параметры.ТаблицаДвижений, Движения, Отказ);
			Иначе
				СформироватьПроводкиВычетНДСПоТоварамРеализованнымПоСтавке0(Параметры.ТаблицаДвижений, Движения, Отказ);
			КонецЕсли;

		Иначе

			// Проводки 68.02 19.х
			СформироватьПроводкиПоступлениеТоваровУслугВычетНДС(Параметры.ТаблицаДвижений, Движения, Отказ);

 		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыВычетНДСПоПриобретеннымЦенностям(ТаблицаРеквизиты, ТаблицаВычетПоПриобретеннымЦенностям)

	Параметры = Новый Структура;

	// Реквизиты шапки документа
	ОбязательныеКолонки = ""
	+ "Организация,"
	+ "Период,"
	+ "ПредъявленНДСКВычету0";

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, ОбязательныеКолонки));

	// Реквизиты табличной части
	ОбязательныеКолонки = ""
	+ "СчетФактура,"				// <ДокументСсылка...>  - документ, являющийся основанием для счета-фактуры
	+ "Поставщик,"					// <СправочникСсылка.Контрагенты> контрагент для взаиморасчетов
	+ "ДоговорКонтрагента,"
	+ "НДС,"						// <Число> - сумма НДС;
	+ "СуммаБезНДС,"				// <Число> - сумма без НДС по определенной ставке НДС;
	+ "СтавкаНДС,"					// <перечислениеСсылка.СтавкаНДС> - ставка НДС;
	+ "СчетУчетаНДС,"				// <ПланСчетовСсылка.Хозрасчетный> - счет, на котором учитывается НДС
	+ "ДокументОтгрузки,"
	+ "ДокументОплаты,"
	+ "Состояние,"
	+ "Событие,"
	+ "ДатаСобытия,"
	+ "ДатаОплаты,"
	+ "НомерДокументаОплаты,"
	+ "ДатаДокументаОплаты,"
	+ "КодВидаОперации,"
	+ "ВидЦенности,"
	+ "ЗаписьДополнительногоЛиста,"
	+ "КорректируемыйПериод,"
	+ "ИсправленныйСчетФактура,"
	+ "Содержание,"
	+ "Период,"					// <Дата> формирования движений (период)
	+ "Регистратор,"			// <ДокументСсылка.СчетФактураПолученный> - проводимый документ
	+ "Организация";			// <СправочникСсылка.Организации>

	Параметры.Вставить("ТаблицаДвижений", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВычетПоПриобретеннымЦенностям, ОбязательныеКолонки));

	Возврат Параметры;

КонецФункции

// ПОЛУЧЕНИЕ СЧЕТА-ФАКТУРЫ

// Процедура формирует движения по вычету НДС по поступлению, вызывается из документа СчетФактураПолученный
//
Процедура СформироватьДвиженияПолученСчетФактураНаПоступление(ТаблицаРеквизиты, ТаблицаПредъявленногоНДС, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыПолученСчетФактураНаПоступление(ТаблицаРеквизиты, ТаблицаПредъявленногоНДС);
	Если Параметры.Реквизиты.Количество() = 0
		ИЛИ Параметры.НДСПредъявленный.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];

	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	Если НЕ ПлательщикНДС Тогда
		Возврат;
	КонецЕсли;
	
	ВерсияУчетаНДС = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	
	Если ВерсияУчетаНДС = 2 Тогда

		Если Реквизиты.НДСПредъявленКВычету Тогда
			
			СформироватьДвиженияНДСПредъявленныйВычетНДС(Параметры.НДСПредъявленный, Движения,, Отказ);
			СформироватьДвиженияНДСЗаписиКнигиПокупокПоступлениеТоваровУслуг(Параметры.НДСПредъявленный, Движения, Отказ);
			СформироватьПроводкиПоступлениеТоваровУслугВычетНДС(Параметры.НДСПредъявленный, Движения, Отказ);
			
		КонецЕсли;

	 КонецЕсли;

КонецПроцедуры

// Подготовка таблицы для процедуры СформироватьДвиженияПолученСчетФактураНаПоступление()
//
Функция ПодготовитьПараметрыПолученСчетФактураНаПоступление(ТаблицаРеквизиты, ТаблицаПредъявленногоНДС)

	Параметры = Новый Структура;

	// Реквизиты шапки документа:
	ОбязательныеКолонки = ""
	+ "Период,"					// <Дата> формирования движений (период)
	+ "Организация,"			// <СправочникСсылка.Организации>
	+ "НДСПредъявленКВычету";

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, ОбязательныеКолонки));

	ОбязательныеКолонки = ""
	+ "Период,"
	+ "ДатаСобытия,"
	+ "Организация,"
	+ "СчетФактура,"
	+ "ВидЦенности,"
	+ "СтавкаНДС,"
	+ "СчетУчетаНДС,"
	+ "Поставщик,"
	+ "ДатаОплаты,"
	+ "КодВидаОперации,"
	+ "ДоговорКонтрагента,"
	+ "ИсправленныйСчетФактура,"
	+ "СуммаБезНДС,"
	+ "НДС,"
	+ "Содержание";
	Параметры.Вставить("НДСПредъявленный", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаПредъявленногоНДС, ОбязательныеКолонки));
	
	Возврат Параметры;

КонецФункции

Функция ПолучитьСвязанныеСчетаФактурыПолученные(СчетФактура, ПоОдномуОснованию = Истина)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ИсправляемыйСчетФактура", СчетФактура);
	
	Если ПоОдномуОснованию Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СчетФактураПолученный.Ссылка КАК СчетФактура
		|ИЗ
		|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
		|ГДЕ
		|	СчетФактураПолученный.ИсправляемыйСчетФактура = &ИсправляемыйСчетФактура";
	Иначе
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	КорректировкаПоступления.Ссылка КАК ДокументСсылка
		|ПОМЕСТИТЬ ВТДокументы
		|ИЗ
		|	Документ.КорректировкаПоступления КАК КорректировкаПоступления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
		|		ПО КорректировкаПоступления.ИсправляемыйДокументПоступления = СчетФактураПолученныйДокументыОснования.ДокументОснование
		|ГДЕ
		|	СчетФактураПолученныйДокументыОснования.Ссылка = &ИсправляемыйСчетФактура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СчетФактураПолученныйДокументыОснования.Ссылка КАК СчетФактура,
		|	ВЫБОР
		|		КОГДА СчетФактураПолученныйДокументыОснования.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Корректировочный
		|ИЗ
		|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументы КАК ВТДокументы
		|		ПО СчетФактураПолученныйДокументыОснования.ДокументОснование = ВТДокументы.ДокументСсылка";
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат Результат;
	КонецЕсли;

КонецФункции

// ВЫСТАВЛЕНИЕ СЧЕТА-ФАКТУРЫ

Функция ПолучитьСвязанныеСчетаФактурыВыданные(СчетФактура, ПоОдномуОснованию = Истина)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ИсправляемыйСчетФактура", СчетФактура);
	
	Если ПоОдномуОснованию Тогда 
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СчетФактураВыданный.Ссылка КАК СчетФактура
		|ИЗ
		|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|ГДЕ
		|	СчетФактураВыданный.ИсправляемыйСчетФактура = &ИсправляемыйСчетФактура";
		
	Иначе
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	КорректировкаРеализации.Ссылка КАК ДокументСсылка
		|ПОМЕСТИТЬ ВТДокументы
		|ИЗ
		|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
		|		ПО КорректировкаРеализации.ИсправляемыйДокументРеализации = СчетФактураВыданныйДокументыОснования.ДокументОснование
		|ГДЕ
		|	СчетФактураВыданныйДокументыОснования.Ссылка = &ИсправляемыйСчетФактура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СчетФактураВыданныйДокументыОснования.Ссылка КАК СчетФактура,
		|	ВЫБОР
		|		КОГДА СчетФактураВыданныйДокументыОснования.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Корректировочный
		|ИЗ
		|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументы КАК ВТДокументы
		|		ПО СчетФактураВыданныйДокументыОснования.ДокументОснование = ВТДокументы.ДокументСсылка";
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат Результат;
	КонецЕсли;

КонецФункции

// ПЕРЕМЕЩЕНИЕ ТОВАРОВ

Процедура СформироватьДвиженияСписаниеТоваровПрочее(ТаблицаТовары, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	УчетНДСПереопределяемый.СформироватьДвиженияСписаниеТоваровПрочее(ТаблицаТовары, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты, Движения, Отказ);

КонецПроцедуры

Процедура СформироватьДвиженияПринятиеНаУчетОС(ТаблицаТовары, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыПринятиеНаУчетОС(ТаблицаТовары, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	Если Параметры.Товары.Количество() = 0
		ИЛИ Параметры.СписанныеТоварыБухУчет.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	Если НЕ ПлательщикНДС Тогда
		Возврат;
	КонецЕсли;
	
	ВерсияУчетаНДС    = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	УпрощенныйУчетНДС = ВерсияУчетаНДС = 1 И УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);

	Если НЕ УпрощенныйУчетНДС Тогда

		СписанныеПартииНДС = УчетНДСПереопределяемый.ПолучитьТаблицуСписанныеПартииНДС(
			Параметры.Товары, Параметры.СписанныеТоварыБухУчет, Реквизиты, Отказ);
		УчетНДСПереопределяемый.СформироватьДвиженияВыбытиеТоваров(
			СписанныеПартииНДС, Параметры.СписанныеТоварыБухУчет, Реквизиты, Движения, Отказ);

	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыПринятиеНаУчетОС(ТаблицаТовары, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                   // <Дата>
	+ "Регистратор,"              // <ДокументСсылка>
	+ "Организация,"              // <СправочникСсылка.Организации>
	+ "Подразделение,"             // <Ссылка на справочник подразделений>
	+ "ПроцентАмортизационнойПремии"
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	Параметры.Реквизиты.Колонки.Добавить("НДСвСтоимостиТоваров", Новый ОписаниеТипов("ПеречислениеСсылка.ДействиеНДСВСтоимостиТоваров"));
	Параметры.Реквизиты.ЗаполнитьЗначения(Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять, "НДСвСтоимостиТоваров");

	// Подготовка таблицы товаров документа:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "НомерСтрокиДокумента,"
	+ "Номенклатура,"
	+ "Количество,"
	+ "СчетУчета,"
	+ "НовыйСпособУчетаНДС"
	;
	Параметры.Вставить("Товары", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТовары, СписокОбязательныхКолонок));
		
	Реквизиты = Параметры.Реквизиты[0];	
	Параметры.Товары.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Параметры.Товары.ЗаполнитьЗначения(Реквизиты.Подразделение, "Подразделение");
		
	// Подготовка таблицы списанных товаров по данным бух.учета:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "СинонимСписка,"
	+ "НомерСтроки,"
	+ "СчетУчета,"
	+ "Номенклатура,"
	+ "Склад,"
	+ "Партия,"
	+ "Количество,"
	+ "КорСчетСписания,"
	+ "ВидКорСубконто1,"
	+ "ВидКорСубконто2,"
	+ "ВидКорСубконто3,"
	+ "КорСубконто1,"
	+ "КорСубконто2,"
	+ "КорСубконто3,"
	+ "КорПодразделение,"
	+ "Подразделение"
	;
	Параметры.Вставить("СписанныеТоварыБухУчет", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСписанныеТоварыБухУчет, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ПОСТУПЛЕНИЕ НМА

Процедура СформироватьДвиженияПоступлениеНематериальныхАктивовОтПоставщика(ТаблицаНМА, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	Параметры = ПодготовитьПараметрыПоступлениеНематериальныхАктивовОтПоставщика(ТаблицаНМА, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	Если Параметры.НематериальныеАктивы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьВидыЦенностейПоступлениеОтПоставщика(Параметры.НематериальныеАктивы, Реквизиты, Неопределено, "СчетУчета");
	
	РаздельныйУчетНДС = УчетнаяПолитика.РаздельныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	ВерсияУчетаНДС    = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	УпрощенныйУчетНДС = ВерсияУчетаНДС = 1 И УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	
	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Реквизиты.Организация, Реквизиты.Период);
	НДСВключенВСтоимость	   = Реквизиты.НДСВключенВСтоимость И НЕ РаздельныйУчетНДСНаСчете19;
	ПоставщикПредъявляетНДС	   = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.ДоговорКонтрагента, "ПредъявляетНДС");
	
	ДанныеДвижений = ПодготовитьДанныеДвиженийПоступлениеНематериальныхАктивов(
		Параметры.НематериальныеАктивы, Реквизиты);
		
	// Бухгалтерские проводки
	Если НЕ НДСВключенВСтоимость
		И ДанныеДвижений.Итог("НДС") <> 0 Тогда
		
		РеквизитыПроводок = ПодготовитьРеквизитыПроводокПоступлениеТоваровУслугОтПоставщика(Реквизиты);
		
		Если Реквизиты.УчетАгентскогоНДС Тогда
			Если Реквизиты.ВидАгентскогоДоговора = Перечисления.ВидыАгентскихДоговоров.Нерезидент Тогда
				СформироватьПроводкиПоступлениеТоваровУслугНалоговыйАгентНерезидент(ДанныеДвижений, Движения, Отказ);
			Иначе
				СформироватьПроводкиПоступлениеТоваровУслугНалоговыйАгент(ДанныеДвижений, РеквизитыПроводок, Движения, Отказ);
			КонецЕсли;
		Иначе
			СформироватьПроводкиПоступлениеТоваровУслуг(ДанныеДвижений, РеквизитыПроводок, Движения, Отказ);
		КонецЕсли;

	КонецЕсли;
		
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	Если НЕ ПлательщикНДС Тогда
		Возврат;
	КонецЕсли;
	
	// Движения регистров подсистемы НДС
	Если ВерсияУчетаНДС = 1 Тогда
		
		Если НЕ УпрощенныйУчетНДС Тогда
			
			Если ДанныеДвижений.Итог("НДС") <> 0 ИЛИ ПоставщикПредъявляетНДС Тогда
				СформироватьДвиженияНДСПредъявленныйПоступлениеТоваровУслуг(ДанныеДвижений, Движения, Отказ);
				Если Реквизиты.НДСВключенВСтоимость Тогда
					СформироватьДвиженияНДСПредъявленныйВключениеВСтоимость(ДанныеДвижений, Движения,, Отказ);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе		
		
		Если ДанныеДвижений.Итог("НДС") <> 0 ИЛИ ПоставщикПредъявляетНДС Тогда
			СформироватьДвиженияНДСПредъявленныйПоступлениеТоваровУслуг(ДанныеДвижений, Движения, Отказ);
			Если НДСВключенВСтоимость Тогда
				СформироватьДвиженияНДСПредъявленныйВключениеВСтоимость(ДанныеДвижений, Движения,, Отказ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьПараметрыПоступлениеНематериальныхАктивовОтПоставщика(ТаблицаНМА, ТаблицаРеквизиты) 
	Параметры = Новый Структура;
	
	// Подготовка таблицы Реквизиты
	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                    // <ДокументСсылка>
	+ "Период,"                         // <Дата>
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "Подразделение,"                  // <Ссылка на справочник подразделений>
	+ "НДСВключенВСтоимость,"           // <Булево>
	+ "УчетАгентскогоНДС,"              // <Булево>
	+ "ВидАгентскогоДоговора,"          // <ПеречислениеСсылка.ВидыАгентскихДоговоров> - заполняется, если УчетАгентскогоНДС = Истина
	+ "Контрагент,"                     // <СправочникСсылка.Контрагенты>
	+ "ДоговорКонтрагента,"             // <СправочникСсылка.ДоговорыКонтрагентов>
	+ "СчетУчетаРасчетовСКонтрагентом," // <ПланСчетовСсылка.Хозрасчетный>
	+ "ВалютаВзаиморасчетов"            // <СправочникСсылка.Валюты>
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Подготовка таблицы Нематериальные активы

	СписокОбязательныхКолонок = ""
	+ "НематериальныйАктив,"     // <СправочникСсылка.НематериальныеАктивы>
	+ "Содержание,"              // <Строка,150> - содержание для проводок
	+ "СуммаРуб,"                // <Число,15,2> - сумма в рублях
	+ "СуммаБезНДСРуб,"          // <Число,15,2> - сумма без НДС в рублях
	+ "СуммаНДСРуб,"             // <Число,15,2> - сумма НДС в рублях
	+ "СчетУчета,"               // <ПланСчетовСсылка.Хозрасчетный>
	+ "СчетУчетаНДС,"            // <ПланСчетовСсылка.Хозрасчетный>
	+ "СпособУчетаНДС,"          // <ПеречислениеСсылка.СпособыУчетаНДС>
	+ "СуммаВзаиморасчетов,"     // <Число,15,2> - сумма в валюте расчетов с поставщиком
	+ "СуммаНДСВзаиморасчетов,"  // <Число,15,2> - сумма НДС в валюте расчетов с поставщиком
	+ "СтавкаНДС"               // <ПеречислениеСсылка.СтавкиНДС>
	;
	Параметры.Вставить("НематериальныеАктивы", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаНМА, СписокОбязательныхКолонок));
	Реквизиты = Параметры.Реквизиты[0];
	// Документом-основанием счета-фактуры при поступлении от поставщика выступает документ поступления
	Параметры.НематериальныеАктивы.Колонки.Добавить("СчетФактура", Документы.ТипВсеСсылки());
	Параметры.НематериальныеАктивы.ЗаполнитьЗначения(Реквизиты.Регистратор, "СчетФактура");
	
	Возврат Параметры;
	
КонецФункции

Функция ПодготовитьДанныеДвиженийПоступлениеНематериальныхАктивов(НематериальныеАктивы, Реквизиты)

	ДанныеДвижений = НематериальныеАктивы.Скопировать(,
		"СчетФактура,СтавкаНДС,СчетУчетаНДС,СпособУчетаНДС,ВидЦенности,Содержание,
		|СуммаРуб,СуммаБезНДСРуб,СуммаНДСРуб,СуммаВзаиморасчетов,СуммаНДСВзаиморасчетов");
	ДанныеДвижений.Свернуть(
		"СчетФактура,СтавкаНДС,СчетУчетаНДС,СпособУчетаНДС,ВидЦенности,Содержание",
		"СуммаРуб,СуммаБезНДСРуб,СуммаНДСРуб,СуммаВзаиморасчетов,СуммаНДСВзаиморасчетов");

	ДанныеДвижений.Колонки.Добавить("Период",      Новый ОписаниеТипов("Дата"));
	ДанныеДвижений.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Период, "Период,ДатаСобытия");

	ДанныеДвижений.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");

	ДанныеДвижений.Колонки.Добавить("Поставщик", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Контрагент, "Поставщик");

	ДанныеДвижений.Колонки.Добавить("ДоговорКонтрагента", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	Если Реквизиты.УчетАгентскогоНДС Тогда 	// Договор должен указываться только для налогового агента
		ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.ДоговорКонтрагента, "ДоговорКонтрагента");
	КонецЕсли;

	ДанныеДвижений.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Для каждого СтрокаТаблицы Из ДанныеДвижений Цикл
		Если Реквизиты.НДСВключенВСтоимость Тогда
			СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСРуб;
		Иначе
			СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСРуб;
			СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.СуммаВзаиморасчетов + СтрокаТаблицы.СуммаНДСВзаиморасчетов;
		КонецЕсли;
	КонецЦикла;
	ДанныеДвижений.Колонки.СуммаНДСРуб.Имя = "НДС";
	ДанныеДвижений.Колонки.Удалить("СуммаРуб");
	ДанныеДвижений.Колонки.Удалить("СуммаБезНДСРуб");
	
	Возврат ДанныеДвижений;
КонецФункции

// ПРИНЯТИЕ К УЧЕТУ НМА

Процедура СформироватьДвиженияПринятиеНаУчетНМА(ТаблицаРеквизиты, Движения, Отказ) Экспорт

	УчетНДСПереопределяемый.СформироватьДвиженияПринятиеНаУчетНМА(ТаблицаРеквизиты, Движения, Отказ);

КонецПроцедуры

// ВЫДАННЫЕ АВАНСЫ

// Процедура формирует движения по вычету НДС по выданным авансам, вызывается Из документа СчетФактураПолученный
//
Процедура СформироватьДвиженияПолученСчетФактураНаВыданныйАванс(ТаблицаРеквизиты, ТаблицаАвансов, ТаблицаСторноНаВыданныйАванс, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыПолученСчетФактураНаВыданныйАванс(ТаблицаРеквизиты, ТаблицаАвансов, ТаблицаСторноНаВыданныйАванс);
	Если Параметры.Реквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];

	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	Если НЕ ПлательщикНДС Тогда
		Возврат;
	КонецЕсли;
	
	СформироватьПроводкиВычетНДСВыданныйАванс(Параметры.Реквизиты, Параметры.СторноАвансов, Движения, Отказ);
	СформироватьДвиженияНДСЗаписиКнигиПокупокВыданныйАванс(Параметры.Реквизиты, Параметры.СторноАвансов, Движения, Отказ);
	
	ВерсияУчетаНДС    = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	УпрощенныйУчетНДС = ВерсияУчетаНДС = 1 И УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	
	Если УпрощенныйУчетНДС ИЛИ ВерсияУчетаНДС = 2 Тогда

		Если Реквизиты.НДСПредъявленКВычету Тогда
			
			СформироватьПроводкиВычетНДСВыданныйАванс(Параметры.Реквизиты, Параметры.Авансы, Движения, Отказ);
			СформироватьДвиженияНДСЗаписиКнигиПокупокВыданныйАванс(Параметры.Реквизиты, Параметры.Авансы, Движения, Отказ);
			
		КонецЕсли;

	Иначе

		 СформироватьДвиженияНДСПредъявленныйВыданныйАванс(Параметры.Реквизиты, Параметры.Авансы, Движения, Отказ);
		 УчетНДСПереопределяемый.СформироватьДвиженияНДССАвансовВыданныйАванс(Параметры.Реквизиты, Параметры.Авансы, Движения, Отказ);

	 КонецЕсли;

КонецПроцедуры

// Подготовка таблицы для процедуры СформироватьДвиженияПолученСчетФактураНаВыданныйАванс()
//
Функция ПодготовитьПараметрыПолученСчетФактураНаВыданныйАванс(ТаблицаРеквизиты, ТаблицаАвансов, ТаблицаСторно)

	Параметры = Новый Структура;

	// Реквизиты шапки документа:
	ОбязательныеКолонки = ""
	+ "Период,"					// <Дата> формирования движений (период)
	+ "Регистратор,"			// <ДокументСсылка.СчетФактураПолученный> - проводимый документ
	+ "Организация,"			// <СправочникСсылка.Организации>
	+ "НДСПредъявленКВычету";

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, ОбязательныеКолонки));

	// Список сумм авансов в разбивке по ставкам НДС:
	ОбязательныеКолонки = ""
	+ "СчетФактура,"				// <ДокументСсылка...>  - документ, являющийся основанием для счета-фактуры
	+ "Контрагент,"					// <СправочникСсылка.Контрагенты> контрагент для взаиморасчетов
	+ "ДоговорКонтрагента,"			// <СправочникСсылка.ДоговорыКонтрагентов> - договор взаиморасчетов;
	+ "СуммаНДС,"					// <Число> - сумма НДС;
	+ "СуммаБезНДС,"				// <Число> - сумма без НДС по определенной ставке НДС;
	+ "СтавкаНДС,"					// <перечислениеСсылка.СтавкаНДС> - ставка НДС;
	+ "СчетУчетаНДС,"				// <ПланСчетовСсылка.Хозрасчетный> - счет, на котором учитывается НДС
	+ "КодВидаОперации,"
	+ "ЗаписьДополнительногоЛиста,"
	+ "КорректируемыйПериод,"
	+ "ДатаСобытия,"
	+ "ИсправленныйСчетФактура,"
	+ "ДатаДокументаОплаты,"
	+ "НомерДокументаОплаты";
	
	Параметры.Вставить("Авансы", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаАвансов, ОбязательныеКолонки));

	ОбязательныеКолонки = ""
	+ "СчетФактура,"
	+ "Контрагент,"
	+ "ДоговорКонтрагента,"
	+ "СуммаНДС,"
	+ "СуммаБезНДС,"
	+ "СтавкаНДС,"
	+ "СчетУчетаНДС,"
	+ "Содержание,"
	+ "ВидЦенности,"
	+ "ДокументОплаты,"
	+ "ДатаОплаты,"
	+ "Событие,"
	+ "ДатаСобытия,"
	+ "ЗаписьДополнительногоЛиста,"
	+ "КорректируемыйПериод,"
	+ "ИсправленныйСчетФактура";
	
	Параметры.Вставить("СторноАвансов", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСторно, ОбязательныеКолонки));
	
	Возврат Параметры;

КонецФункции

// Процедура формирует вычет НДС с выданного аванса, вызывается Из документа ФормированиеЗаписейКнигиПокупок
//
Процедура СформироватьДвиженияВычетНДССВыданногоАванса(ТаблицаРеквизиты, ТаблицаАвансов, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыВычетНДССВыданногоАванса(ТаблицаРеквизиты, ТаблицаАвансов);
	Реквизиты = Параметры.Реквизиты[0];

	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	Если НЕ ПлательщикНДС Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаАвансов.Свернуть("Контрагент, ДоговорКонтрагента, СчетФактура, СтавкаНДС, СчетУчетаНДС, ЗаписьДополнительногоЛиста, КорректируемыйПериод, ДатаСобытия, ИсправленныйСчетФактура",
		"СуммаНДС, СуммаБезНДС");

	ВерсияУчетаНДС    = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	УпрощенныйУчетНДС = ВерсияУчетаНДС = 1 И УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	
	Если НЕ УпрощенныйУчетНДС Тогда

		СформироватьПроводкиВычетНДСВыданныйАванс(ТаблицаРеквизиты, ТаблицаАвансов, Движения, Отказ);
		СформироватьДвиженияНДСЗаписиКнигиПокупокВыданныйАванс(ТаблицаРеквизиты, ТаблицаАвансов, Движения, Отказ);
		СформироватьДвиженияНДСПредъявленныйВыданныйАвансРасход(ТаблицаРеквизиты, ТаблицаАвансов, Движения, Отказ);

	КонецЕсли;

КонецПроцедуры

// Подготовка таблицы для процедуры СформироватьДвиженияВычетНДССВыданногоАванса()
//
Функция ПодготовитьПараметрыВычетНДССВыданногоАванса(ТаблицаРеквизиты, ТаблицаАвансов)

	Параметры = Новый Структура;

	// Реквизиты шапки документа:
	ОбязательныеКолонки = ""
	+ "Период,"					// <Дата> формирования движений (период)
	+ "Регистратор,"			// <ДокументСсылка.СчетФактураПолученный> - проводимый документ
	+ "Организация";			// <СправочникСсылка.Организации>

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, ОбязательныеКолонки));

	// Список сумм авансов в разбивке по ставкам НДС:
	ОбязательныеКолонки = ""
	+ "СчетФактура,"				// <ДокументСсылка...>  - документ, являющийся основанием для счета-фактуры
	+ "Контрагент,"					// <СправочникСсылка.Контрагенты> контрагент для взаиморасчетов
	+ "ДоговорКонтрагента,"			// <СправочникСсылка.ДоговорыКонтрагентов> - договор взаиморасчетов;
	+ "СуммаНДС,"					// <Число> - сумма НДС;
	+ "СуммаБезНДС,"				// <Число> - сумма без НДС по определенной ставке НДС;
	+ "СтавкаНДС,"					// <перечислениеСсылка.СтавкаНДС> - ставка НДС;
	+ "СчетУчетаНДС,"
	+ "ЗаписьДополнительногоЛиста,"
	+ "КорректируемыйПериод,"
	+ "ДатаСобытия,"
	+ "ИсправленныйСчетФактура";
	
	Параметры.Вставить("Авансы", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаАвансов, ОбязательныеКолонки));

	Возврат Параметры;

КонецФункции

// Процедура выполняет восстановление НДС по выданным авансам, вызывается Из документа ФормированиеЗаписейКнигиПродаж
//
Процедура СформироватьДвиженияВосстановлениеНДСПоВыданнымАвансам(ТаблицаРеквизиты, ТаблицаАвансов, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыВосстановлениеНДСПоВыданнымАвансам(ТаблицаРеквизиты, ТаблицаАвансов);
	Реквизиты = ТаблицаРеквизиты[0];

	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	Если НЕ ПлательщикНДС Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаАвансов.Свернуть("Контрагент, ДоговорКонтрагента, СчетФактура, ИсправленныйСчетФактура, СтавкаНДС, ЗаписьДополнительногоЛиста, КорректируемыйПериод, СторнирующаяЗаписьДопЛиста, ДатаОплаты, КодВидаОперации",
		"СуммаНДС, СуммаБезНДС");
		
	ВерсияУчетаНДС    = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	УпрощенныйУчетНДС = ВерсияУчетаНДС = 1 И УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	
	Если УпрощенныйУчетНДС Тогда

		СформироватьПроводкиВосстановлениеНДСВыданныйАванс(ТаблицаРеквизиты, ТаблицаАвансов, Движения, Отказ);
		СформироватьДвиженияНДСЗаписиКнигиПродажВосстановлениеНДСВыданныйАванс(ТаблицаРеквизиты, ТаблицаАвансов, Движения, Отказ);

	Иначе

		СформироватьПроводкиВосстановлениеНДСВыданныйАванс(ТаблицаРеквизиты, ТаблицаАвансов, Движения, Отказ);
		СформироватьДвиженияНДСЗаписиКнигиПродажВосстановлениеНДСВыданныйАванс(ТаблицаРеквизиты, ТаблицаАвансов, Движения, Отказ);
		
		Если ВерсияУчетаНДС = 1 Тогда
		
			УчетНДСПереопределяемый.СформироватьДвиженияНДССАвансовВосстановлениеНДСВыданныйАванс(ТаблицаРеквизиты, ТаблицаАвансов, Движения, Отказ);
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Подготовка таблицы для процедуры СформироватьДвиженияВычетНДСВыданныйАванс()
//
Функция ПодготовитьПараметрыВосстановлениеНДСПоВыданнымАвансам(ТаблицаРеквизиты, ТаблицаАвансов)

	Параметры = Новый Структура;

	// Реквизиты шапки документа:
	ОбязательныеКолонки = ""
	+ "Период,"					// <Дата> формирования движений (период)
	+ "Регистратор,"			// <ДокументСсылка.СчетФактураПолученный> - проводимый документ
	+ "Организация";			// <СправочникСсылка.Организации>

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, ОбязательныеКолонки));

	// Список сумм авансов в разбивке по ставкам НДС:
	ОбязательныеКолонки = ""
	+ "СчетФактура,"				// <ДокументСсылка...>  - документ, являющийся основанием для счета-фактуры
	+ "Контрагент,"					// <СправочникСсылка.Контрагенты> контрагент для взаиморасчетов
	+ "ДоговорКонтрагента,"			// <СправочникСсылка.ДоговорыКонтрагентов> - договор взаиморасчетов;
	+ "КодВидаОперации,"			// <Строка>
	+ "СуммаНДС,"					// <Число> - сумма НДС;
	+ "СуммаБезНДС,"				// <Число> - сумма без НДС по определенной ставке НДС;
	+ "СтавкаНДС";					// <перечислениеСсылка.СтавкаНДС> - ставка НДС;

	Параметры.Вставить("Авансы", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаАвансов, ОбязательныеКолонки));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьТаблицуСторноНаВыданныйАванс(ТаблицаРеквизиты, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыТаблицыСторноНаВыданныйАванс(ТаблицаРеквизиты);
	
	ПустаяТаблица = Новый ТаблицаЗначений;
	ПустаяТаблица.Колонки.Добавить("Период");
	ПустаяТаблица.Колонки.Добавить("Регистратор");
	ПустаяТаблица.Колонки.Добавить("СчетФактура");
	ПустаяТаблица.Колонки.Добавить("Контрагент");
	ПустаяТаблица.Колонки.Добавить("ДоговорКонтрагента");
	ПустаяТаблица.Колонки.Добавить("СуммаНДС");
	ПустаяТаблица.Колонки.Добавить("СуммаБезНДС");
	ПустаяТаблица.Колонки.Добавить("СтавкаНДС");
	ПустаяТаблица.Колонки.Добавить("СчетУчетаНДС");
	ПустаяТаблица.Колонки.Добавить("Содержание");
	ПустаяТаблица.Колонки.Добавить("ВидЦенности");
	ПустаяТаблица.Колонки.Добавить("ДокументОплаты");
	ПустаяТаблица.Колонки.Добавить("ДатаОплаты");
	ПустаяТаблица.Колонки.Добавить("Событие");
	ПустаяТаблица.Колонки.Добавить("ДатаСобытия");
	ПустаяТаблица.Колонки.Добавить("ЗаписьДополнительногоЛиста");
	ПустаяТаблица.Колонки.Добавить("КорректируемыйПериод");
	ПустаяТаблица.Колонки.Добавить("ИсправленныйСчетФактура");
	
	Если Параметры.Реквизиты.Количество() = 0 Тогда
		Возврат ПустаяТаблица;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	Если НЕ ПлательщикНДС Тогда
		Возврат ПустаяТаблица;
	КонецЕсли;
	
	СторнироватьАванс = УчетНДСПереопределяемый.ИспользуетсяПостановлениеНДС1137(Реквизиты.Период)
		ИЛИ УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	Если НЕ СторнироватьАванс Тогда
		Возврат ПустаяТаблица;
	КонецЕсли;
	
	ЭтоИсправление = Реквизиты.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс И Реквизиты.Исправление;
	Если НЕ ЭтоИсправление Тогда
		Возврат ПустаяТаблица;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсправляемыйСчетФактура", Реквизиты.ДокументОснование);
	Запрос.УстановитьПараметр("Период", Реквизиты.Период);
	Запрос.УстановитьПараметр("МоментДокумента", Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Ссылка", Реквизиты.Регистратор);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", Реквизиты.ДоговорКонтрагента);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	""Сторнирование вычета НДС с выданного аванса"" КАК Содержание,
	|	ЗаписиКнигиПокупок.Организация,
	|	ЗаписиКнигиПокупок.Поставщик КАК Контрагент,
	|	ЗаписиКнигиПокупок.СчетФактура,
	|	ЗаписиКнигиПокупок.ВидЦенности,
	|	ЗаписиКнигиПокупок.СтавкаНДС,
	|	ЗаписиКнигиПокупок.ДатаОплаты,
	|	ЗаписиКнигиПокупок.ДокументОплаты,
	|	ЗаписиКнигиПокупок.Событие,
	|	&Период КАК ДатаСобытия,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(ЗаписиКнигиПокупок.СчетФактура.Дата, КВАРТАЛ)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗаписьДополнительногоЛиста,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(ЗаписиКнигиПокупок.СчетФактура.Дата, КВАРТАЛ)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СторнирующаяЗаписьДопЛиста,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(&Период, КВАРТАЛ) = КОНЕЦПЕРИОДА(ЗаписиКнигиПокупок.СчетФактура.Дата, КВАРТАЛ)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ЗаписиКнигиПокупок.СчетФактура.Дата, КВАРТАЛ)
	|	КОНЕЦ КАК КорректируемыйПериод,
	|	ЗаписиКнигиПокупок.ДоговорКонтрагента,
	|	ЗаписиКнигиПокупок.ИсправленныйСчетФактура,
	|	ЗаписиКнигиПокупок.СуммаБезНДСОборот * -1 КАК СуммаБезНДС,
	|	ЗаписиКнигиПокупок.НДСОборот * -1 КАК СуммаНДС,
	|	ЗаписиКнигиПокупок.СчетУчетаНДС
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	|			,
	|			&МоментДокумента,
	|			,
	|			Организация = &Организация
	|				И СчетФактура = &ИсправляемыйСчетФактура
	|				И ДоговорКонтрагента = &ДоговорКонтрагента) КАК ЗаписиКнигиПокупок";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат ПустаяТаблица;
	КонецЕсли;	
		      	
	Возврат Результат.Выгрузить();
	
КонецФункции

Функция ПодготовитьПараметрыТаблицыСторноНаВыданныйАванс(ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Реквизиты шапки документа:
	ОбязательныеКолонки = ""
	+ "Период,"					// <Дата> формирования движений (период)
	+ "Регистратор,"			// <ДокументСсылка.СчетФактураПолученный> - проводимый документ
	+ "Организация,"			// <СправочникСсылка.Организации>
	+ "Исправление,"		
	+ "ВидСчетаФактуры,"		
	+ "ДокументОснование,"		
	+ "ДоговорКонтрагента";	

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, ОбязательныеКолонки));
	
	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияСторноНаВыданныйАванс(ТаблицаРеквизиты, ТаблицаСторноНаВыданныйАванс, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыСторноНаВыданныйАванс(ТаблицаРеквизиты, ТаблицаСторноНаВыданныйАванс);
	Реквизиты = Параметры.Реквизиты[0];

	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	Если НЕ ПлательщикНДС Тогда
		Возврат;
	КонецЕсли;
	
	СформироватьПроводкиВычетНДСВыданныйАванс(ТаблицаРеквизиты, Параметры.Авансы, Движения, Отказ);
    СформироватьДвиженияНДСЗаписиКнигиПокупокВыданныйАванс(ТаблицаРеквизиты, Параметры.Авансы, Движения, Отказ);
	
КонецПроцедуры

Функция ПодготовитьПараметрыСторноНаВыданныйАванс(ТаблицаРеквизиты, ТаблицаАвансов)

	Параметры = Новый Структура;

	// Реквизиты шапки документа:
	ОбязательныеКолонки = ""
	+ "Период,"					// <Дата> формирования движений (период)
	+ "Регистратор,"			// <ДокументСсылка.СчетФактураПолученный> - проводимый документ
	+ "Организация";			// <СправочникСсылка.Организации>

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, ОбязательныеКолонки));

	// Список сумм авансов в разбивке по ставкам НДС:
	ОбязательныеКолонки = ""
	+ "СчетФактура,"				// <ДокументСсылка...>  - документ, являющийся основанием для счета-фактуры
	+ "Контрагент,"					// <СправочникСсылка.Контрагенты> контрагент для взаиморасчетов
	+ "ДоговорКонтрагента,"			// <СправочникСсылка.ДоговорыКонтрагентов> - договор взаиморасчетов;
	+ "СуммаНДС,"					// <Число> - сумма НДС;
	+ "СуммаБезНДС,"				// <Число> - сумма без НДС по определенной ставке НДС;
	+ "СтавкаНДС,"					// <перечислениеСсылка.СтавкаНДС> - ставка НДС;
	+ "СчетУчетаНДС,"				// <ПланСчетовСсылка.Хозрасчетный> - счет, на котором учитывается НДС
	+ "Содержание,"
	+ "ДатаСобытия,"
	+ "ВидЦенности,"
	+ "ДокументОплаты,"
	+ "ДатаОплаты,"
	+ "Событие,"
	+ "ЗаписьДополнительногоЛиста,"
	+ "КорректируемыйПериод,"
	+ "ИсправленныйСчетФактура";
	Параметры.Вставить("Авансы", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаАвансов, ОбязательныеКолонки));
	
	Возврат Параметры;

КонецФункции

// ПОЛУЧЕННЫЕ АВАНСЫ

// Процедура формирует движения по начислению НДС при получении аванса, вызывается Из документа Счет-фактура выданный
//
Процедура СформироватьДвиженияВыписанСчетФактураНаПолученныйАванс(ТаблицаРеквизиты, ТаблицаАвансов, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметыВыписанСчетФактураНаПолученныйАванс(ТаблицаРеквизиты, ТаблицаАвансов);
	Если Параметры.Реквизиты.Количество() = 0
		ИЛИ Параметры.Авансы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];

	ПлательщикНДС	  = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	ВерсияУчетаНДС    = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	УпрощенныйУчетНДС = ВерсияУчетаНДС = 1 И УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	ВедетсяУчетНДСПоФЗ134  = ВедетсяУчетНДСПоФЗ134(Реквизиты.Период);

	Если НЕ ПлательщикНДС И НЕ ВедетсяУчетНДСПоФЗ134 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Реквизиты.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс Тогда
		Возврат;
	КонецЕсли;

	Параметры.Авансы.Свернуть(
		"СчетФактура, ДокументОплаты, Контрагент, ДоговорКонтрагента, ВидЦенности, ВалютаДокумента, СтавкаНДС, СчетУчетаНДС,
		| ДатаОплаты, ДатаСобытия, ИсправленныйСчетФактура, ЗаписьДополнительногоЛиста, КорректируемыйПериод, СторнирующаяЗаписьДопЛиста",
		"СуммаНДС, СуммаБезНДС, СуммаВВалютеРасчетов");

	СформироватьПроводкиНачислениеНДСПолученныйАванс(Параметры.Реквизиты, Параметры.Авансы, Движения, Отказ);

	Если ВерсияУчетаНДС = 1 Тогда
		Если УпрощенныйУчетНДС Тогда
			СформироватьДвиженияНДСЗаписиКнигиПродажПолученныйАванс(Параметры.Реквизиты, Параметры.Авансы, Движения, Отказ);
		Иначе
			УчетНДСПереопределяемый.СформироватьДвиженияНДСНачисленныйПолученныйАванс(Параметры.Реквизиты, Параметры.Авансы, Движения, Отказ);
			УчетНДСПереопределяемый.СформироватьДвиженияНДСсАвансовПолученныйАванс(Параметры.Реквизиты, Параметры.Авансы, Движения, Отказ);
		КонецЕсли;
	Иначе
		СформироватьДвиженияНДСЗаписиКнигиПродажПолученныйАванс(Параметры.Реквизиты, Параметры.Авансы, Движения, Отказ);
		Если УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(Реквизиты.Период) = 3
			И Движения.НДСЗаписиКнигиПродаж.Количество() > 0 Тогда
			СформироватьДвиженияНДСНомераДокументовОплатыПоТекущимДвижениям(ТаблицаРеквизиты[0], Движения, Отказ);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Подготовка таблицы для процедуры СформироватьДвиженияВыписанСчетФактураНаПолученныйАванс()
//
Функция ПодготовитьПараметыВыписанСчетФактураНаПолученныйАванс(ТаблицаРеквизиты, ТаблицаАвансов)

	Параметры = Новый Структура;

	// Реквизиты шапки документа:
	ОбязательныеКолонки = ""
	+ "Период,"					// <Дата> формирования движений (период)
	+ "Регистратор,"			// <ДокументСсылка.СчетФактураПолученный> - проводимый документ
	+ "Организация,"			// <СправочникСсылка.Организации>
	+ "ВидСчетаФактуры";

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, ОбязательныеКолонки));

	// Список сумм авансов в разбивке по ставкам НДС:
	ОбязательныеКолонки = ""
	+ "СчетФактура,"				// <ДокументСсылка...>  - документ, являющийся основанием для счета-фактуры
	+ "ДокументОплаты,"				// <ДокументСсылка...>  
	+ "Контрагент,"					// <СправочникСсылка.Контрагенты> контрагент для взаиморасчетов
	+ "ДоговорКонтрагента,"			// <СправочникСсылка.ДоговорыКонтрагентов> - договор взаиморасчетов;
	+ "ВидЦенности,"			
	+ "ВалютаДокумента,"
	+ "СтавкаНДС,"					// <перечислениеСсылка.СтавкаНДС> - ставка НДС;
	+ "СчетУчетаНДС,"				// <ПланСчетовСсылка.Хозрасчетный> - счет, на котором учитывается НДС
	+ "ДатаОплаты,"
	+ "ДатаСобытия,"
	+ "ИсправленныйСчетФактура,"
	+ "ЗаписьДополнительногоЛиста,"
	+ "КорректируемыйПериод,"
	+ "СторнирующаяЗаписьДопЛиста,"
	+ "СуммаНДС,"					// <Число> - сумма НДС;
	+ "СуммаБезНДС,"				// <Число> - сумма без НДС по определенной ставке НДС;
	+ "СуммаВВалютеРасчетов";

	Параметры.Вставить("Авансы", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаАвансов, ОбязательныеКолонки));

	Возврат Параметры;

КонецФункции

// Процедура формирует вычет НДС при зачете полученного аванса
//
Процедура СформироватьДвиженияВычетНДСПриЗачетеПолученногоАванса(ТаблицаРеквизиты, ТаблицаАвансов, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыВычетНДСПриЗачетеПолученногоАванса(ТаблицаРеквизиты, ТаблицаАвансов);
	Реквизиты = Параметры.Реквизиты[0];

	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	Если НЕ ПлательщикНДС Тогда
		Возврат;
	КонецЕсли;
	
	ВерсияУчетаНДС    = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	УпрощенныйУчетНДС = ВерсияУчетаНДС = 1 И УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	
	Если ВерсияУчетаНДС = 1 Тогда
		Если НЕ УпрощенныйУчетНДС Тогда
			УчетНДСПереопределяемый.СформироватьДвиженияНДСсАвансовЗачетПолученногоАванса(ТаблицаРеквизиты, ТаблицаАвансов, Движения, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	СформироватьПроводкиВычетНДСПолученныйАванс(ТаблицаРеквизиты, ТаблицаАвансов, Движения, Отказ);
	СформироватьДвиженияНДСЗаписиКнигиПокупокПолученныйАванс(ТаблицаРеквизиты, ТаблицаАвансов, Движения, Отказ);

КонецПроцедуры

// Подготовка таблицы для процедуры СформироватьДвиженияВычетНДСПриЗачетеПолученногоАванса()
//
Функция ПодготовитьПараметрыВычетНДСПриЗачетеПолученногоАванса(ТаблицаРеквизиты, ТаблицаАвансов)

	Параметры = Новый Структура;

	// Реквизиты шапки документа:
	ОбязательныеКолонки = ""
	+ "Период,"					// <Дата> формирования движений (период)
	+ "Регистратор,"			// <ДокументСсылка.СчетФактураПолученный> - проводимый документ
	+ "Организация,"			// <СправочникСсылка.Организации>
	+ "ПредъявленНДСКВычету0";

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, ОбязательныеКолонки));

	// Список сумм авансов в разбивке по ставкам НДС:
	ОбязательныеКолонки = ""
	+ "СчетФактура,"				// <ДокументСсылка...>  - документ, являющийся основанием для счета-фактуры
	+ "Контрагент,"					// <СправочникСсылка.Контрагенты> контрагент для взаиморасчетов
	+ "ДоговорКонтрагента,"			// <СправочникСсылка.ДоговорыКонтрагентов> - договор взаиморасчетов;
	+ "СуммаНДС,"					// <Число> - сумма НДС;
	+ "СуммаБезНДС,"				// <Число> - сумма без НДС по определенной ставке НДС;
	+ "СтавкаНДС,"					// <перечислениеСсылка.СтавкаНДС> - ставка НДС;
	+ "ДатаСобытия,"
	+ "ВидЦенности,"
	+ "КодВидаОперации,"
	+ "ДатаОплаты,"
	+ "ВалютаДокумента,"
	+ "ВалютнаяСумма,"
	+ "ЗаписьДополнительногоЛиста,"
	+ "КорректируемыйПериод,"
	+ "ИсправленныйСчетФактура,";

	Параметры.Вставить("Авансы", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаАвансов, ОбязательныеКолонки));

	Возврат Параметры;

КонецФункции

// Процедура формирует движения по начислению НДС при получении аванса, вызывается Из
// документа ФормированиеЗаписейКнигиПродаж
Процедура СформироватьДвиженияНачислитьНДССПолученногоАванса(ТаблицаРеквизиты, ТаблицаАвансов, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыНачислитьНДССПолученногоАванса(ТаблицаРеквизиты, ТаблицаАвансов);
	Реквизиты = Параметры.Реквизиты[0];

	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	Если НЕ ПлательщикНДС Тогда
		Возврат;
	КонецЕсли;
	
	ВерсияУчетаНДС    = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	УпрощенныйУчетНДС = ВерсияУчетаНДС = 1 И УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	
	Если ВерсияУчетаНДС = 1 Тогда
		Если НЕ УпрощенныйУчетНДС Тогда
			СформироватьДвиженияНДСЗаписиКнигиПродажПолученныйАванс(ТаблицаРеквизиты, ТаблицаАвансов, Движения, Отказ);
			УчетНДСПереопределяемый.СформироватьДвиженияНДСНачисленныйПолученныйАвансРасход(ТаблицаРеквизиты, ТаблицаАвансов, Движения, Отказ);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Подготовка таблицы для процедуры СформироватьДвиженияНачислитьНДССПолученногоАванса()
//
Функция ПодготовитьПараметрыНачислитьНДССПолученногоАванса(ТаблицаРеквизиты, ТаблицаАвансов)

	Параметры = Новый Структура;

	// Реквизиты шапки документа:
	ОбязательныеКолонки = ""
	+ "Период,"					// <Дата> формирования движений (период)
	+ "Регистратор,"			// <ДокументСсылка.СчетФактураПолученный> - проводимый документ
	+ "Организация";			// <СправочникСсылка.Организации>

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, ОбязательныеКолонки));

	// Список сумм авансов в разбивке по ставкам НДС:
	ОбязательныеКолонки = ""
	+ "СчетФактура,"				// <ДокументСсылка...>  - документ, являющийся основанием для счета-фактуры
	+ "Контрагент,"					// <СправочникСсылка.Контрагенты> контрагент для взаиморасчетов
	+ "ДоговорКонтрагента,"			// <СправочникСсылка.ДоговорыКонтрагентов> - договор взаиморасчетов;
	+ "СуммаНДС,"					// <Число> - сумма НДС;
	+ "СуммаБезНДС,"				// <Число> - сумма без НДС по определенной ставке НДС;
	+ "СтавкаНДС,"					// <перечислениеСсылка.СтавкаНДС> - ставка НДС;
	+ "ДатаСобытия,"
	+ "ДатаОплаты,"
	+ "ЗаписьДополнительногоЛиста,"
	+ "КорректируемыйПериод,"
	+ "СторнирующаяЗаписьДопЛиста";

	Параметры.Вставить("Авансы", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаАвансов, ОбязательныеКолонки));

	Возврат Параметры;

КонецФункции


// РАСЧЕТЫ ПО ОПЛАТЕ

// Процедуры формирования движений по курсовым разницам
//
Процедура СформироватьДвиженияКурсовыеРазницы(ТаблицаРеквизиты, ТаблицаВзаиморасчетов, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьДанныеКурсовыеРазницы(ТаблицаРеквизиты, ТаблицаВзаиморасчетов);
	Реквизиты = Параметры.Реквизиты[0];

	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	Если НЕ ПлательщикНДС Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДоОктября2011 = Параметры.ТаблицаВзаиморасчетов.СкопироватьКолонки();
	Для каждого СтрокаТаблицы Из Параметры.ТаблицаВзаиморасчетов Цикл
		Если СтрокаТаблицы.ДатаДокументаРасчетов >= '20111001' Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ТаблицаДоОктября2011.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	КонецЦикла;
	
	Если ТаблицаДоОктября2011.Количество() = 0 Тогда
		// По документам отгрузки с датой, начиная с октября 2011, налоговая база по НДС 
		// при подтверждении реализации со ставкой 0% определяется по курсу на дату реализации,
		// корректировки налоговой базы при последующей оплате не производятся
		Возврат;
	КонецЕсли;
	
	ТаблицаОстатковПоРеализации0 = ПолучитьДанныеРеализация0(Реквизиты, ТаблицаДоОктября2011);

	Если ТаблицаОстатковПоРеализации0.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	СформироватьДвиженияНДСРеализация0КурсовыеРазницы(Реквизиты, ТаблицаДоОктября2011, ТаблицаОстатковПоРеализации0, Движения);

КонецПроцедуры

Функция ПодготовитьДанныеКурсовыеРазницы(ТаблицаРеквизиты, ТаблицаВзаиморасчетов)

	Параметры = Новый Структура;

	// Подготовка таблицы Реквизиты
	СписокОбязательныхКолонок = ""
	+ "Период,"                   // <Дата>
	+ "Регистратор,"              // <ДокументСсылка>
	+ "Организация";              // <СправочникСсылка.Организации>

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Подготовка таблицы взаиморасчетов:
	СписокОбязательныхКолонок = ""
	+ "Контрагент,"
	+ "ДокументРасчетов,"
	+ "ДатаДокументаРасчетов,"
	+ "СтавкаНДС,"
	+ "ОстатокВзаиморасчетов,"
	+ "СуммаВзаиморасчетов,"
	+ "СуммаБУ,";

	Параметры.Вставить("ТаблицаВзаиморасчетов", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВзаиморасчетов, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПолучитьДанныеРеализация0(ТаблицаРеквизиты, ТаблицаВзаиморасчетов)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", 		 ТаблицаРеквизиты.Период);
	Запрос.УстановитьПараметр("Покупатели",  ТаблицаВзаиморасчетов.ВыгрузитьКолонку("Контрагент"));
	Запрос.УстановитьПараметр("СчетФактуры", ТаблицаВзаиморасчетов.ВыгрузитьКолонку("ДокументРасчетов"));

	Запрос.Текст =
	"ВЫБРАТЬ
	|	НДСРеализация0Остатки.Организация,
	|	НДСРеализация0Остатки.СчетФактура,
	|	НДСРеализация0Остатки.ВидЦенности,
	|	НДСРеализация0Остатки.СтавкаНДС,
	|	НДСРеализация0Остатки.Состояние,
	|	НДСРеализация0Остатки.Покупатель КАК Покупатель,
	|	НДСРеализация0Остатки.СуммаБезНДСОстаток + НДСРеализация0Остатки.НДСОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.НДСРеализация0.Остатки(
	|			&Дата,
	|			Состояние = ЗНАЧЕНИЕ(Перечисление.НДССостоянияРеализация0.ОжидаетсяПодтверждение)
	|				И Покупатель В (&Покупатели)
	|				И СчетФактура В (&СчетФактуры)) КАК НДСРеализация0Остатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Покупатель";

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

// Процедуры формирования движений по суммовым разницам
//
Процедура СформироватьДвиженияСуммовыеРазницы(ТаблицаСуммовыеРазницы, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если ТаблицаСуммовыеРазницы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = ТаблицаРеквизиты[0];

	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	Если НЕ ПлательщикНДС Тогда
		Возврат;
	КонецЕсли;
	
	ВерсияУчетаНДС    = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	УпрощенныйУчетНДС = ВерсияУчетаНДС = 1 И УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);

	СформироватьПроводкиСуммовыеРазницы(ТаблицаСуммовыеРазницы, ТаблицаРеквизиты, Движения, Отказ);
	
	Если ВерсияУчетаНДС = 1 Тогда
		Если УпрощенныйУчетНДС Тогда
			СформироватьДвиженияНДСЗаписиКнигиПродажСуммовыеРазницы(ТаблицаСуммовыеРазницы, ТаблицаРеквизиты, Движения, Отказ);
		Иначе
			УчетНДСПереопределяемый.СформироватьДвиженияНДСНачисленныйСуммовыеРазницы(ТаблицаСуммовыеРазницы, ТаблицаРеквизиты, Движения, Отказ);
		КонецЕсли;
	Иначе
		СформироватьДвиженияНДСЗаписиКнигиПродажСуммовыеРазницы(ТаблицаСуммовыеРазницы, ТаблицаРеквизиты, Движения, Отказ);
	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьТаблицуСуммовыхРазниц(ТаблицаВзаиморасчеты, ТаблицаРеквизиты, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыТаблицыСуммовыхРазниц(ТаблицаВзаиморасчеты, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	ОпределятьСостояниеРасчетов = БухгалтерскийУчетПереопределяемый.ПроводитьПоРасчетамСКонтрагентами(Реквизиты.Организация, Реквизиты.Период);

	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);

	ТаблицаСуммовыхРазниц = Параметры.Взаиморасчеты.СкопироватьКолонки(
		"СчетРасчетов, ВалютаВзаиморасчетов, Подразделение, Контрагент, ДоговорКонтрагента, ДокументРасчетов, СтавкаНДС, Разница");
	ТаблицаСуммовыхРазниц.Колонки.Добавить("НДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаСуммовыхРазниц.Колонки.Добавить("ДатаДокументаРасчетов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	Если НЕ ОпределятьСостояниеРасчетов
		ИЛИ НЕ ОтражатьВНалоговомУчете
		ИЛИ Параметры.Взаиморасчеты.Количество() = 0 Тогда

		Возврат ТаблицаСуммовыхРазниц;

	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаВзаиморасчеты", Параметры.Взаиморасчеты);
	Запрос.Текст = ТекстЗапросаТаблицаСуммовыхРазниц();

	Результат = Запрос.ВыполнитьПакет();
	
	Если Результат[2].Пустой() Тогда
		Возврат ТаблицаСуммовыхРазниц;
	КонецЕсли;
	
	ТаблицаСуммовыхРазниц = Результат[2].Выгрузить();
	
	ТаблицаСуммовыхРазниц.Колонки.Добавить("НДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	КорректировкаРегистровНДСПоСуммовымРазницам(ТаблицаРеквизиты, ТаблицаСуммовыхРазниц);

	Возврат ТаблицаСуммовыхРазниц;

КонецФункции

Функция ПодготовитьПараметрыТаблицыСуммовыхРазниц(ТаблицаВзаиморасчеты, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"		          // <Дата>
	+ "Регистратор,"	      // <ДокументСсылка>
	+ "Организация,"          // <СправочникСсылка.Организации>
	+ "НаправлениеДвижения,"
	+ "РасчетыПоРеализации";  // <Булево>

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Подготовка таблицы Взаиморасчеты

	СписокОбязательныхКолонок = ""
	+ "СчетРасчетов,"             // <ПланСчетовСсылка.Хозрасчетный>
	+ "ВалютаВзаиморасчетов,"     // <СправочникСсылка.Валюты>
	+ "РасчетыВУсловныхЕдиницах," // <Булево>
	+ "Подразделение,"            // <Ссылка на справочник подразделений>
	+ "Контрагент,"               // <СправочникСсылка.Контрагенты>
	+ "ДоговорКонтрагента,"       // <СправочникСсылка.ДоговорыКонтрагентов>
	+ "ДатаДокументаРасчетов,"    // <Дата>
	+ "ДокументРасчетов,"         // <ДокументСсылка>
	+ "СтавкаНДС,"                // <ПеречислениеСсылка.СтавкиНДС>
	+ "Разница";                  // <Число,15,2>

	Параметры.Вставить("Взаиморасчеты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВзаиморасчеты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ТекстЗапросаТаблицаСуммовыхРазниц()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таб.ВалютаВзаиморасчетов,
	|	Таб.СчетРасчетов,
	|	Таб.Подразделение,
	|	Таб.Контрагент,
	|	Таб.ДоговорКонтрагента,
	|	Таб.ДокументРасчетов,
	|	Таб.ДатаДокументаРасчетов,
	|	Таб.СтавкаНДС,
	|	Таб.Разница
	|ПОМЕСТИТЬ ТаблицаСуммовыхРазниц
	|ИЗ
	|	&ТаблицаВзаиморасчеты КАК Таб
	|ГДЕ
	|	Таб.РасчетыВУсловныхЕдиницах
	|	И Таб.Разница <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСуммовыхРазниц.ВалютаВзаиморасчетов,
	|	ТаблицаСуммовыхРазниц.СчетРасчетов,
	|	ТаблицаСуммовыхРазниц.Подразделение,
	|	ТаблицаСуммовыхРазниц.Контрагент,
	|	ТаблицаСуммовыхРазниц.ДоговорКонтрагента,
	|	ТаблицаСуммовыхРазниц.ДокументРасчетов,
	|	ТаблицаСуммовыхРазниц.ДатаДокументаРасчетов,
	|	ВЫБОР
	|		КОГДА ТаблицаСуммовыхРазниц.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	|		ИНАЧЕ ТаблицаСуммовыхРазниц.СтавкаНДС
	|	КОНЕЦ КАК СтавкаНДС,
	|	ТаблицаСуммовыхРазниц.Разница
	|ПОМЕСТИТЬ ПриведеннаяТаблицаРазниц
	|ИЗ
	|	ТаблицаСуммовыхРазниц КАК ТаблицаСуммовыхРазниц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриведеннаяТаблицаРазниц.ВалютаВзаиморасчетов,
	|	ПриведеннаяТаблицаРазниц.Подразделение,
	|	ПриведеннаяТаблицаРазниц.Контрагент,
	|	ПриведеннаяТаблицаРазниц.ДоговорКонтрагента,
	|	ПриведеннаяТаблицаРазниц.ДокументРасчетов,
	|	ПриведеннаяТаблицаРазниц.ДатаДокументаРасчетов,
	|	ПриведеннаяТаблицаРазниц.СчетРасчетов,
	|	СУММА(ПриведеннаяТаблицаРазниц.Разница) КАК Разница,
	|	ПриведеннаяТаблицаРазниц.СтавкаНДС
	|ИЗ
	|	ПриведеннаяТаблицаРазниц КАК ПриведеннаяТаблицаРазниц
	|
	|СГРУППИРОВАТЬ ПО
	|	ПриведеннаяТаблицаРазниц.ВалютаВзаиморасчетов,
	|	ПриведеннаяТаблицаРазниц.Подразделение,
	|	ПриведеннаяТаблицаРазниц.Контрагент,
	|	ПриведеннаяТаблицаРазниц.ДоговорКонтрагента,
	|	ПриведеннаяТаблицаРазниц.ДокументРасчетов,
	|	ПриведеннаяТаблицаРазниц.ДатаДокументаРасчетов,
	|	ПриведеннаяТаблицаРазниц.СчетРасчетов,
	|	ПриведеннаяТаблицаРазниц.СтавкаНДС";

	Возврат ТекстЗапроса;

КонецФункции

Процедура КорректировкаРегистровНДСПоСуммовымРазницам(ТаблицаРеквизиты, ИсходнаяТаблицаСуммовыхРазниц)

	Реквизиты = ТаблицаРеквизиты[0];

	Если НЕ УчетнаяПолитика.Существует(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);

	Если НЕ ПлательщикНДС Тогда
		Возврат;
	КонецЕсли;
	
	// Для периодов позднее 01.10.2011 г. значение учетной политики получаем на дату 30.09.2011 г. 
	Если Реквизиты.Период >= '20111001' Тогда
		УчитыватьПоложительныеРазницыДляНДС = 
			УчетнаяПолитика.УчитыватьПоложительныеСуммовыеРазницыПриНачисленииНДС(Реквизиты.Организация, '20110930');
	Иначе	
		УчитыватьПоложительныеРазницыДляНДС = 
			УчетнаяПолитика.УчитыватьПоложительныеСуммовыеРазницыПриНачисленииНДС(Реквизиты.Организация, Реквизиты.Период);
	КонецЕсли;	
	
	Если НЕ УчитыватьПоложительныеРазницыДляНДС Тогда
		// Суммовые разницы не нужно учитывать для НДС по реализации
		Возврат;
	КонецЕсли;
	
	ВерсияУчетаНДС    = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	УпрощенныйУчетНДС = ВерсияУчетаНДС = 1 И УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);

	Если ВерсияУчетаНДС = 1 
		И УпрощенныйУчетНДС Тогда
		// Движения по этому документу делать не нужно
		// Нужно добавить информацию о НДС в таблицу суммовых разниц
        Для каждого СтрокаТаблицы Из ИсходнаяТаблицаСуммовыхРазниц Цикл

			Если ЗначениеЗаполнено(СтрокаТаблицы.СтавкаНДС) Тогда
				ПроцентНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС);
			Иначе
				СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118;
				ПроцентНДС = 18;
			КонецЕсли;
			СтрокаТаблицы.НДС = Окр(СтрокаТаблицы.Разница * ПроцентНДС / (100 + ПроцентНДС), 2);

		КонецЦикла;

		Возврат;

	КонецЕсли;

	НачислятьНДСПоОтгрузке = УчетнаяПолитика.НачислятьНДСПоОтгрузке(Реквизиты.Организация, Реквизиты.Период);
	ТаблицаСуммовыхРазниц  = ИсходнаяТаблицаСуммовыхРазниц.Скопировать();

	Для каждого СтрокаТаблицы Из ТаблицаСуммовыхРазниц Цикл

		Если НачислятьНДСПоОтгрузке
			И ТипЗнч(СтрокаТаблицы.ДокументРасчетов) = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") Тогда
			СтрокаТаблицы.ДокументРасчетов = СтрокаТаблицы.ДокументРасчетов.ДокументОтгрузки;
		КонецЕсли;
		
	КонецЦикла;

	// Формируем дерево счетов-фактур по которым нужно отразить суммовые разницы
    РеестрСчетовФактур = УчетНДСПереопределяемый.ПолучитьДанныеПоКорректируемымСчетамФактурам(ТаблицаРеквизиты, ТаблицаСуммовыхРазниц);

	Если РеестрСчетовФактур.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	// Отразить распределение в таблице суммовых разниц
	РеестрСчетовФактур.Колонки.Добавить("Разница", 	 ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	РеестрСчетовФактур.Колонки.Добавить("СР_БезНДС", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	РеестрСчетовФактур.Колонки.Добавить("СР_НДС", 	 ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));

	РеестрСчетовФактур.ЗагрузитьКолонку(РеестрСчетовФактур.ВыгрузитьКолонку("Базис_СНДС"), "Разница");

	Распределение = Новый Структура("Разница", "Разница");
	Отбор         = Новый Структура("СчетФактура", "ДокументРасчетов");

	РеестрСчетовФактур = СформироватьКорректирующиеЗаписи(ТаблицаСуммовыхРазниц, РеестрСчетовФактур, Распределение, Отбор);

	СтрокиКУдалению = Новый Массив();

	// Разделим суммовую разницу на сумму без НДС и сумму с НДС
	Для каждого СтрокаРеестра Из РеестрСчетовФактур Цикл
		Если СтрокаРеестра.Разница = 0 ИЛИ СтрокаРеестра.Базис_СНДС = 0 Тогда
			СтрокиКУдалению.Добавить(СтрокаРеестра);
			Продолжить;
		Иначе
			Если СтрокаРеестра.СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда
				СтрокаРеестра.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118;
			ИначеЕсли СтрокаРеестра.СтавкаНДС = Перечисления.СтавкиНДС.НДС10 Тогда
				СтрокаРеестра.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110;
			ИначеЕсли СтрокаРеестра.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
				// Отражение суммовой разницы в данном режиме по ставке НДС 0% не предусмотрено
				СтрокиКУдалению.Добавить(СтрокаРеестра);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		СтрокаРеестра.СР_НДС 	= Окр(СтрокаРеестра.Разница * УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаРеестра.СтавкаНДС) / (100 + УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаРеестра.СтавкаНДС)), 2);
		СтрокаРеестра.СР_БезНДС = СтрокаРеестра.Разница - СтрокаРеестра.СР_НДС;
	КонецЦикла;

	// Если суммовая разница невелика, велика вероятность что в реестре СФ присутствуют записи,
	// на которые суммовая разница не относится
	Если СтрокиКУдалению.Количество() > 0 Тогда
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			РеестрСчетовФактур.Удалить(СтрокаКУдалению);
		КонецЦикла;
	КонецЕсли;

	Если РеестрСчетовФактур.Количество() = 0 Тогда
	    Возврат;
	КонецЕсли;
	
	РеестрСчетовФактур.Колонки.СР_БезНДС.Имя = "СуммаБезНДС";
	РеестрСчетовФактур.Колонки.СР_НДС.Имя = "НДС";
	
	// Скопировать сумму НДС в исходную таблицу суммовых разниц
	РеестрСчетовФактур.Свернуть("СчетФактура, Покупатель", "НДС");
	СтруктураОтбора = Новый Структура("ДокументРасчетов, Контрагент");
	Для Каждого СтрокаТаблицы Из РеестрСчетовФактур Цикл
		
		СтруктураОтбора.ДокументРасчетов = СтрокаТаблицы.СчетФактура;
		СтруктураОтбора.Контрагент 		 = СтрокаТаблицы.Покупатель;
		
		НайденныеСтроки = ИсходнаяТаблицаСуммовыхРазниц.НайтиСтроки(СтруктураОтбора);
		Если НайденныеСтроки.Количество() <> 0 Тогда
			НайденныеСтроки[0].НДС = СтрокаТаблицы.НДС;
		КонецЕсли;
		
	КонецЦикла;
           
КонецПроцедуры

//Процедура для распределения записей Из одной таблицы значений по базису (таблица значений или  набору записей)
//Источник 		: ТаблицаЗначений
//Базис 		: ТаблицаЗначений или НаборЗаписей
//Распределение : ключ - поля базиса, значение - поля источника
//Фильтр 		: ключ - поля базиса, значение - поля источника (если не указан - по совпадающим колонкам)
//Игнорировать  : ключ - поля базиса, значение - поля источника
//Дополнить		: ключ - имя нового поля базиса, значение - значение для заполнения
Функция СформироватьКорректирующиеЗаписи(Источник, Базис, Распределение, Фильтр=Неопределено, Игнорировать=Неопределено, Дополнить=Неопределено, НераспределенныеЗаписи_AsIs = Ложь) Экспорт

	Если ТипЗнч(Базис) = Тип("ТаблицаЗначений") Тогда
		Временный_Базис	= Базис.Скопировать();
	Иначе
		Временный_Базис	= Базис.Выгрузить();
	Конецесли;

	КолонкиИсточника = Новый Структура();
	Для каждого Колонка Из источник.Колонки Цикл
		КолонкиИсточника.Вставить(Колонка.Имя);
	КонецЦикла;
	КолонкиБазиса = Новый Структура();
	Для каждого Колонка Из Временный_Базис.Колонки Цикл
		Если НЕ(НЕ ЗначениеЗаполнено(Колонка.Имя)) Тогда
			КолонкиБазиса.Вставить(Колонка.Имя);
		КонецЕсли;
	КонецЦикла;

	Если НЕ ЗначениеЗаполнено(Игнорировать) Тогда
		 Игнорировать = новый Структура();
	Иначе
		//Зачистим колонки источника и базиса на игнорируемые колонки
		Для Каждого Колонка Из Игнорировать Цикл
			Если КолонкиИсточника.Свойство(?(НЕ ЗначениеЗаполнено(Колонка.Значение),Колонка.Ключ,Колонка.Значение)) Тогда
				 КолонкиИсточника.Удалить(?(НЕ ЗначениеЗаполнено(Колонка.Значение),Колонка.Ключ,Колонка.Значение));
			Конецесли;
			Если КолонкиБазиса.Свойство(Колонка.Ключ) Тогда
				 КолонкиБазиса.Удалить(Колонка.Ключ);
			Конецесли;
		КонецЦикла;
 	КонецЕсли;

	//Зачистим колонки источника на распределяемые колонки. Они учитываются отдельно.
	Для Каждого Колонка Из Распределение Цикл
		Если КолонкиИсточника.Свойство(?(НЕ ЗначениеЗаполнено(Колонка.Значение),Колонка.Ключ,Колонка.Значение)) Тогда
			 КолонкиИсточника.Удалить(?(НЕ ЗначениеЗаполнено(Колонка.Значение),Колонка.Ключ,Колонка.Значение));
		Иначе
			 Если Источник.Колонки.Найти(?(НЕ ЗначениеЗаполнено(Колонка.Значение),Колонка.Ключ,Колонка.Значение))=Неопределено Тогда
				 //Не хватает колонок к распределению
				 //Но одну и ту же колонку можно распределить дважды
				 Возврат ложь;
			 КонецЕсли;
		Конецесли;
		Если КолонкиБазиса.Свойство(Колонка.Ключ) Тогда
			 КолонкиБазиса.Удалить(Колонка.Ключ);
		Иначе
			  //Не хватает колонок базиса распределения
			 Возврат ложь;
		Конецесли;
	КонецЦикла;

	Если ЗначениеЗаполнено(Дополнить) Тогда
		//Проверим на отсутствие дополняемых колонок!
		Для Каждого Колонка Из Дополнить Цикл
			Если КолонкиБазиса.Свойство(Колонка.Ключ) Тогда
				//Такая колонка уже есть, нельзя добавить новую
				Возврат Ложь;
			Конецесли;
		КонецЦикла;
 	КонецЕсли;

	//Если фильтр не задан - по всем совпадающим колонкам
	Если Фильтр=Неопределено Тогда
		Фильтр = Новый Структура();
		Для каждого Колонка Из КолонкиБазиса Цикл
			Если КолонкиИсточника.Свойство(Колонка.Ключ)  и не(Игнорировать.Свойство(Колонка.Ключ)) Тогда
				Фильтр.Вставить(Колонка.Ключ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Фильтр) Тогда
		//Должно быть хоть одно объединяющее поле!
		Возврат Ложь;
	КонецЕсли;

	Для Каждого Колонка Из Фильтр Цикл
		Если не КолонкиБазиса.Свойство(Колонка.Ключ) Тогда
			  //Не хватает колонок базиса распределения
			 Возврат ложь;
		Конецесли;
	КонецЦикла;


	//Подготовить сворачивание для источника
	СтрокаСверткиИсточник = ВыгрузитьСтруктуруВСтроку(Фильтр,Истина,КолонкиИсточника);
	Если СтрокаСверткиИсточник = ложь Тогда
		//попытка фильтровать по полю, отсутствующему в источнике!
		Возврат ложь;
	КонецЕсли;
	КолонкиКРаспределениюИсточник = ВыгрузитьСтруктуруВСтроку(Распределение,Истина);
	Если КолонкиКРаспределениюИсточник = ложь Тогда
		//попытка распределить поле, отсутствующее в источнике!
		Возврат ложь;
	КонецЕсли;

	//Подготовить сворачивание для базиса
	СтрокаСверткиБазис = ВыгрузитьСтруктуруВСтроку(КолонкиБазиса,Ложь);
	Если СтрокаСверткиБазис = ложь Тогда
		//попытка фильтровать по полю, отсутствующему в базисе!
		Возврат ложь;
	КонецЕсли;
	КолонкиКРаспределениюБазис = ВыгрузитьСтруктуруВСтроку(Распределение,Ложь);
	Если КолонкиКРаспределениюБазис = ложь Тогда
		//попытка распределить поле, отсутствующее в базисе!
		Возврат ложь;
	КонецЕсли;

	Временный_Источник = Источник.Скопировать();

	Временный_Базис.Свернуть(СтрокаСверткиБазис,КолонкиКРаспределениюБазис);
	Временный_Источник.Свернуть(СтрокаСверткиИсточник,КолонкиКРаспределениюИсточник);

	НоваяТаблица = новый ТаблицаЗначений();
	Для каждого Колонка Из Временный_Базис.Колонки Цикл
		Если Колонка.ТипЗначения.СодержитТип(Тип("Число")) Тогда
			Разрядность = Колонка.ТипЗначения.КвалификаторыЧисла.Разрядность;
			РазрядностьДробнойЧасти = Колонка.ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти;
			КвалификаторЧисла = Новый КвалификаторыЧисла(Разрядность, РазрядностьДробнойЧасти);

			ТипЗначения = Новый ОписаниеТипов(Колонка.ТипЗначения,,,КвалификаторЧисла);
		Иначе
			ТипЗначения = Колонка.ТипЗначения;
		КонецЕсли;

		НоваяТаблица.Колонки.Добавить(Колонка.Имя, ТипЗначения,,10);
	КонецЦикла;

	ТаблицаБазисовРаспределения = Новый ТаблицаЗначений();
	Для каждого Колонка Из Распределение Цикл
		ТаблицаБазисовРаспределения.Колонки.Добавить(Колонка.Ключ);
	КонецЦикла;

	Для каждого СтрокаИсточника Из Временный_Источник Цикл
		Отбор = новый структура();
		Для каждого Колонка Из Фильтр Цикл
			Отбор.Вставить(Колонка.Ключ,СтрокаИсточника[?(НЕ ЗначениеЗаполнено(Колонка.Значение),Колонка.Ключ,Колонка.Значение)]);
		КонецЦикла;
		СтрокиБазиса = Временный_Базис.НайтиСтроки(Отбор);
		Временный_Базис_СтрокаНераспределеннойЗаписи = Неопределено;
		Если СтрокиБазиса.Количество() = 0 и НераспределенныеЗаписи_AsIs Тогда
			Временный_Базис_СтрокаНераспределеннойЗаписи = Временный_Базис.Добавить();
			ЗаполнитьЗначенияСвойств(Временный_Базис_СтрокаНераспределеннойЗаписи, СтрокаИсточника);
			СтрокиБазиса.Добавить(Временный_Базис_СтрокаНераспределеннойЗаписи);
		КонецЕсли;

		ТаблицаБазисовРаспределения.Очистить();
		Для каждого Строка Из СтрокиБазиса Цикл
			СтрокаТБР = ТаблицаБазисовРаспределения.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТБР, Строка);
		КонецЦикла;
		Для каждого Колонка Из Распределение Цикл
			РаспределяемаяСумма =  СтрокаИсточника[?(НЕ ЗначениеЗаполнено(Колонка.Значение),Колонка.Ключ,Колонка.Значение)];
			МассивДляРаспределения = ТаблицаБазисовРаспределения.ВыгрузитьКолонку(Колонка.Ключ);
			РазрядностьДробнойЧасти = Временный_Источник.Колонки[?(НЕ ЗначениеЗаполнено(Колонка.Значение),Колонка.Ключ,Колонка.Значение)].ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти;
			МассивРезультата = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(РаспределяемаяСумма, МассивДляРаспределения,?(РазрядностьДробнойЧасти = 0, 3, РазрядностьДробнойЧасти));
			Если МассивРезультата = Неопределено Тогда
				ТаблицаБазисовРаспределения.ЗаполнитьЗначения(0,Колонка.Ключ);
			Иначе
				ТаблицаБазисовРаспределения.ЗагрузитьКолонку(МассивРезультата,Колонка.Ключ);
			КонецЕсли;
		КонецЦикла;

		СтрокаРезультата = 0;
		Для каждого Строка Из СтрокиБазиса Цикл
			СтрокаНовая = НоваяТаблица.Добавить();
			СрокаРезультатаРаспределения = ТаблицаБазисовРаспределения[СтрокаРезультата];
			СтрокаРезультата = СтрокаРезультата +1;
			Для каждого Колонка Из Временный_Базис.Колонки Цикл
				Если Распределение.Свойство(Колонка.Имя) Тогда
					СтрокаНовая[Колонка.Имя] = СрокаРезультатаРаспределения[Колонка.Имя];
				Иначе
					СтрокаНовая[Колонка.Имя] = Строка[Колонка.Имя];
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;

		Если не Временный_Базис_СтрокаНераспределеннойЗаписи = Неопределено Тогда
		    Временный_Базис.удалить(Временный_Базис_СтрокаНераспределеннойЗаписи);
		КонецЕсли;
	КонецЦикла;

	Если ЗначениеЗаполнено(Дополнить) Тогда
		Для каждого Колонка Из Дополнить Цикл
			НоваяТаблица.Колонки.Добавить(Колонка.Ключ,,,10);
			НоваяТаблица.ЗаполнитьЗначения(Колонка.Значение,Колонка.Ключ);
		КонецЦикла;
	КонецЕсли;

	СтрокиС0Распределением = Новый Массив();

	Для каждого Строка Из НоваяТаблица Цикл
		СуммаРаспределений0=Истина;
		Для каждого Колонка Из распределение Цикл
			Если ЗначениеЗаполнено(Строка[Колонка.Ключ]) Тогда
				СуммаРаспределений0=Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если СуммаРаспределений0 Тогда
			СтрокиС0Распределением.Добавить(Строка);
		Конецесли;
	КонецЦикла;

	Для каждого ПустаяСтрока Из СтрокиС0Распределением Цикл
		НоваяТаблица.Удалить(ПустаяСтрока);
	КонецЦикла;

	Возврат НоваяТаблица;

КонецФункции

Функция ВыгрузитьСтруктуруВСтроку(Структура,ПоЗначениям = Ложь,СтруктураПроверки = Неопределено)

	НеПроверять = (СтруктураПроверки = Неопределено);
	НоваяСтрока = "";

	Для каждого Колонка Из Структура Цикл

		Если НеПроверять Тогда
			НоваяСтрока = НоваяСтрока + ?(НЕ ЗначениеЗаполнено(Колонка.Значение)или не ПоЗначениям,Колонка.Ключ,Колонка.Значение)+",";

		ИначеЕсли СтруктураПроверки.Свойство(?(НЕ ЗначениеЗаполнено(Колонка.Значение) или не ПоЗначениям,Колонка.Ключ,Колонка.Значение)) Тогда
			НоваяСтрока = НоваяСтрока + ?(НЕ ЗначениеЗаполнено(Колонка.Значение),Колонка.Ключ,Колонка.Значение)+",";

		Иначе
			//Нет в проверке!
			Возврат Ложь;

		КонецЕсли;

	КонецЦикла;

	Если ЗначениеЗаполнено(НоваяСтрока) Тогда
		НоваяСтрока = Лев(НоваяСтрока,СтрДлина(НоваяСтрока)-1);
	КонецЕсли;

	Возврат НоваяСтрока;

КонецФункции // ВыгрузитьСтруктуруВСтроку


// НАЛОГОВЫЙ АГЕНТ

Процедура СформироватьДвиженияВыписанСчетФактураНалоговогоАгента(ТаблицаРеквизиты, ТаблицаАвансов, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыВыписанСчетФактураНалоговогоАгента(ТаблицаРеквизиты, ТаблицаАвансов);
	Если Параметры.Реквизиты.Количество() = 0
		ИЛИ Параметры.Авансы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];

	Если НЕ Реквизиты.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент Тогда
		Возврат;
	КонецЕсли;

	ВерсияУчетаНДС    = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	УпрощенныйУчетНДС = ВерсияУчетаНДС = 1 И УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);

	СформироватьПроводкиНачисленНДСНалоговымАгентом(Реквизиты, Параметры.Авансы, Движения, Отказ);
	
	Если ВерсияУчетаНДС = 1 Тогда
		Если УпрощенныйУчетНДС Тогда
			СформироватьДвиженияНДСЗаписиКнигиПродажНачисленНДСНалоговымАгентом(Реквизиты, Параметры.Авансы, Движения, Отказ);
		Иначе
	    	УчетНДСПереопределяемый.СформироватьДвиженияНДСНачисленныйНачисленНДСНалоговымАгентом(Реквизиты, Параметры.Авансы, Движения, Отказ);
		КонецЕсли;
	Иначе
		СформироватьДвиженияНДСЗаписиКнигиПродажНачисленНДСНалоговымАгентом(Реквизиты, Параметры.Авансы, Движения, Отказ);
		Если УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(Реквизиты.Период) = 3
			И Движения.НДСЗаписиКнигиПродаж.Количество() > 0 Тогда
			СформироватьДвиженияНДСНомераДокументовОплатыПоТекущимДвижениям(ТаблицаРеквизиты[0], Движения, Отказ);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыВыписанСчетФактураНалоговогоАгента(ТаблицаРеквизиты, ТаблицаАвансов)

	Параметры = Новый Структура();

	СписокОбязательныхКолонок = ""
	+ "Организация,"
	+ "Период,"
	+ "Контрагент,"
	+ "ДоговорКонтрагента,"
	+ "ВидСчетаФактуры,"
	+ "ДокументОснование";

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	СписокОбязательныхКолонок = ""
	+ "ИсправленныйСчетФактура,"
	+ "ЗаписьДополнительногоЛиста,"		// <Булево> - Запись дополнительного листа
	+ "КорректируемыйПериод,"			// <Дата> - Корректируемый период
	+ "СторнирующаяЗаписьДопЛиста,"		// <Булево> - Сторнирующая запись доп. листа
	+ "ДатаОплаты,"
	+ "ВидЦенности,"
	+ "СтавкаНДС,"
	+ "СуммаНДС,"
	+ "СуммаБезНДС";

	Параметры.Вставить("Авансы", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаАвансов, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// НАЛОГОВЫЙ АГЕНТ КУРСОВЫЕ РАЗНИЦЫ

Процедура СформироватьДвиженияКурсовыеРазницыНалоговыйАгент(ТаблицаРеквизитов, ТаблицаВзаиморасчетов, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыКурсовыеРазницыНалоговыйАгент(ТаблицаРеквизитов, ТаблицаВзаиморасчетов);
	Реквизиты = Параметры.Реквизиты[0];

	ВерсияУчетаНДС    = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	УпрощенныйУчетНДС = ВерсияУчетаНДС = 1 И УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Реквизиты.Организация, Реквизиты.Период);
	Если УпрощенныйУчетНДС ИЛИ РаздельныйУчетНДСНаСчете19 Тогда
		Возврат;
	КонецЕсли;

	РеестрСчетовФактур = ПодготовитьТаблицуКурсовыеРазницыНалоговыйАгент(Реквизиты, Параметры.ТаблицаВзаиморасчетов);

	Если РеестрСчетовФактур.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	РеестрСчетовФактур.Колонки.СР_НДС.Имя 	 = "НДС";
	РеестрСчетовФактур.Колонки.СР_БезНДС.Имя = "СуммаБезНДС";

	РеестрСчетовФактур.Колонки.Добавить("ДатаСобытия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	РеестрСчетовФактур.ЗаполнитьЗначения(Реквизиты.Период, "ДатаСобытия");

	СтруктураТаблицДляДвижений = УчетНДСПереопределяемый.ПодготовитьТаблицыПоВидамРегистровНДС(РеестрСчетовФактур, Реквизиты);

	// Проводки
	СформироватьПроводкиПоступлениеТоваровУслугНалоговыйАгентНерезидент(РеестрСчетовФактур, Движения, Отказ);

	// НДС предъявленный
	СформироватьДвиженияНДСПредъявленныйПоступлениеТоваровУслуг(РеестрСчетовФактур, Движения, Отказ);

	// НДС по косвенным расходам
	УчетНДСПереопределяемый.СформироватьДвиженияНДСКосвенныеРасходы(СтруктураТаблицДляДвижений.КосвенныеРасходы, Движения, Отказ);

	// НДС по приобретенным ценностям
	УчетНДСПереопределяемый.СформироватьДвиженияНДСПоПриобретеннымЦенностям(СтруктураТаблицДляДвижений.Партии, Движения, Отказ);

	// НДС реализация 0%
	СформироватьДвиженияНДСПредъявленныйРеализация0(СтруктураТаблицДляДвижений.НДСПредъявленныйРеализация0, Реквизиты, Движения, Отказ);

КонецПроцедуры

Функция ПодготовитьПараметрыКурсовыеРазницыНалоговыйАгент(ТаблицаРеквизиты, ТаблицаВзаиморасчетов)

	Параметры = Новый Структура;

	// Подготовка таблицы Реквизиты
	СписокОбязательныхКолонок = ""
	+ "Период,"                   // <Дата>
	+ "Регистратор,"              // <ДокументСсылка>
	+ "Организация";              // <СправочникСсылка.Организации>

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Подготовка таблицы взаиморасчетов:
	СписокОбязательныхКолонок = ""

	+ "ВалютаВзаиморасчетов,"
	+ "ДокументРасчетов,"
	+ "Контрагент,"
	+ "ДоговорКонтрагента,"
	+ "СуммаБУ,"
	+ "СуммаВзаиморасчетов";


	Параметры.Вставить("ТаблицаВзаиморасчетов", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВзаиморасчетов, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьТаблицуКурсовыеРазницыНалоговыйАгент(Реквизиты, ТаблицаВзаиморасчетов)

	// Отбираем взаиморасчеты по договору с исполнением обязанностей налогового агента
	ТаблицаВзаиморасчетовНалоговыйАгент = ПолучитьТаблицуВзаиморасчетовНалоговыйАгент(Реквизиты, ТаблицаВзаиморасчетов);

	Если ТаблицаВзаиморасчетовНалоговыйАгент.Количество() = 0 Тогда
		Возврат ТаблицаВзаиморасчетовНалоговыйАгент;
	КонецЕсли;

	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

	РеестрСчетовФактур = УчетНДСПереопределяемый.ПолучитьДанныеПоКорректируемымСчетамФактурамНалоговыйАгент(Реквизиты, ТаблицаВзаиморасчетовНалоговыйАгент);

	Если РеестрСчетовФактур.Количество() = 0 Тогда
		Возврат РеестрСчетовФактур;
	КонецЕсли;

	РеестрСчетовФактур.Колонки.Добавить("Период", 	  ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	РеестрСчетовФактур.Колонки.Добавить("Содержание", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	РеестрСчетовФактур.ЗаполнитьЗначения(Реквизиты.Период, "Период");

	// Вычисляем суммовую разницу
	Для каждого СтрокаВзаиморасчетов Из ТаблицаВзаиморасчетовНалоговыйАгент Цикл

		КурсНаДатуПоступления = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
			СтрокаВзаиморасчетов.ВалютаВзаиморасчетов, СтрокаВзаиморасчетов.СчетФактура.Дата);

		СуммаБУПоКурсуПоступления = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
			СтрокаВзаиморасчетов.СуммаВзаиморасчетов, СтрокаВзаиморасчетов.ВалютаВзаиморасчетов,
			Константы.ВалютаРегламентированногоУчета.Получить(), КурсНаДатуПоступления.Курс, 1, КурсНаДатуПоступления.Кратность, 1);

		СтрокаВзаиморасчетов.СуммоваяРазница = СтрокаВзаиморасчетов.СуммаБУ - СуммаБУПоКурсуПоступления;

		НайденныеСтроки = РеестрСчетовФактур.НайтиСтроки(Новый Структура("СчетФактура", СтрокаВзаиморасчетов.СчетФактура));
		Для каждого СтрокаРеестра Из НайденныеСтроки Цикл
			СтрокаРеестра.ДоговорКонтрагента = СтрокаВзаиморасчетов.ДоговорКонтрагента;
			СтрокаРеестра.Содержание = "Корректировка НДС по договору " + СтрокаВзаиморасчетов.ДоговорКонтрагента;
		КонецЦикла;

	КонецЦикла;

	ТаблицаВзаиморасчетовНалоговыйАгент.Свернуть("СчетФактура", "СуммоваяРазница");

	РеестрСчетовФактур.Колонки.Добавить("СуммоваяРазница", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	РеестрСчетовФактур.Колонки.Добавить("СР_БезНДС", 	   ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	РеестрСчетовФактур.Колонки.Добавить("СР_НДС", 		   ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));

	РеестрСчетовФактур.ЗагрузитьКолонку(РеестрСчетовФактур.ВыгрузитьКолонку("Базис_БезНДС"), "СуммоваяРазница");

	Распределение = Новый Структура("СуммоваяРазница", "СуммоваяРазница");
	Отбор         = Новый Структура("СчетФактура", "СчетФактура");

	РеестрСчетовФактур = СформироватьКорректирующиеЗаписи(ТаблицаВзаиморасчетовНалоговыйАгент, РеестрСчетовФактур, Распределение, Отбор);

	СтрокиКУдалению = Новый Массив();

	// Разделим суммовую разницу на сумму без НДС и сумму с НДС
	Для каждого СтрокаРеестра Из РеестрСчетовФактур Цикл

		Если СтрокаРеестра.СуммоваяРазница = 0 ИЛИ СтрокаРеестра.Базис_СНДС = 0 Тогда
			СтрокиКУдалению.Добавить(СтрокаРеестра);
			Продолжить;
		КонецЕсли;

		СтрокаРеестра.СР_БезНДС = СтрокаРеестра.СуммоваяРазница;
		СтрокаРеестра.СР_НДС 	= УчетНДСКлиентСервер.РассчитатьСуммуНДС(СтрокаРеестра.СР_БезНДС, Ложь, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаРеестра.СтавкаНДС));

	КонецЦикла;

	Если СтрокиКУдалению.Количество() > 0 Тогда
	    Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			РеестрСчетовФактур.Удалить(СтрокаКУдалению);
		КонецЦикла;
	КонецЕсли;

	Возврат РеестрСчетовФактур;

КонецФункции

Функция ПолучитьТаблицуВзаиморасчетовНалоговыйАгент(Реквизиты, ТаблицаВзаиморасчетов) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =

	"ВЫБРАТЬ
	|	Взаиморасчеты.ВалютаВзаиморасчетов,
	|	Взаиморасчеты.ДокументРасчетов КАК ДокументРасчетов,
	|	Взаиморасчеты.Контрагент,
	|	Взаиморасчеты.ДоговорКонтрагента,
	|	Взаиморасчеты.СуммаБУ КАК СуммаБУ,
	|	Взаиморасчеты.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов
	|ПОМЕСТИТЬ ВТВзаиморасчеты
	|ИЗ
	|	&Взаиморасчеты КАК Взаиморасчеты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументРасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Взаиморасчеты.ВалютаВзаиморасчетов,
	|	Взаиморасчеты.ДокументРасчетов КАК СчетФактура,
	|	Взаиморасчеты.Контрагент,
	|	Взаиморасчеты.ДоговорКонтрагента,
	|	СУММА(Взаиморасчеты.СуммаБУ) КАК СуммаБУ,
	|	СУММА(Взаиморасчеты.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	0 КАК СуммоваяРазница,
	|	Взаиморасчеты.ДоговорКонтрагента.УчетАгентскогоНДС КАК УчетАгентскогоНДС
	|ИЗ
	|	ВТВзаиморасчеты КАК Взаиморасчеты
	|ГДЕ
	|	Взаиморасчеты.ДоговорКонтрагента.УчетАгентскогоНДС
	|	И Взаиморасчеты.ВалютаВзаиморасчетов <> &ВалютаРеглУчета
	|	И Взаиморасчеты.ДокументРасчетов <> &Регистратор
	|	И Взаиморасчеты.ДоговорКонтрагента.ВидАгентскогоДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыАгентскихДоговоров.Нерезидент)
	|
	|СГРУППИРОВАТЬ ПО
	|	Взаиморасчеты.ВалютаВзаиморасчетов,
	|	Взаиморасчеты.ДокументРасчетов,
	|	Взаиморасчеты.Контрагент,
	|	Взаиморасчеты.ДоговорКонтрагента,
	|	Взаиморасчеты.ДоговорКонтрагента.УчетАгентскогоНДС
	|";

	// Заменим обращение к реквизитам договора через переопределяемые функции.
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
								"Взаиморасчеты.ДоговорКонтрагента.УчетАгентскогоНДС",
								БухгалтерскийУчетПереопределяемый.ТекстЗапросаУчетАгентскогоНДС("Взаиморасчеты.ДоговорКонтрагента"));
								
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
								"Взаиморасчеты.ДоговорКонтрагента.ВидАгентскогоДоговора",
								БухгалтерскийУчетПереопределяемый.ТекстЗапросаВидАгентскогоДоговора("Взаиморасчеты.ДоговорКонтрагента"));								

	Запрос.УстановитьПараметр("Регистратор", Реквизиты.Регистратор);
	Запрос.УстановитьПараметр("Взаиморасчеты", ТаблицаВзаиморасчетов);
	Запрос.УстановитьПараметр("ВалютаРеглУчета", Константы.ВалютаРегламентированногоУчета.Получить());

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

// ВОССТАНОВЛЕНИЕ НДС

Процедура СформироватьДвиженияВосстановлениеНДС(ТаблицаРеквизиты, ТаблицаСоставДокумента, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыВосстановлениеНДС(ТаблицаРеквизиты, ТаблицаСоставДокумента);
	Реквизиты = Параметры.Реквизиты[0];

	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	Если НЕ ПлательщикНДС Тогда
		Возврат;
	КонецЕсли;
	
	Если Реквизиты.ОтразитьВКнигеПродаж Тогда 
		СформироватьДвиженияКнигиПродажВосстановлениеНДС(Реквизиты,  Параметры.ТаблицаСоставДокумента, Движения, Отказ);
	Иначе
		СформироватьДвиженияКнигиПокупокВосстановлениеНДС(Реквизиты,  Параметры.ТаблицаСоставДокумента, Движения, Отказ);
	КонецЕсли;
	
	Если НЕ Реквизиты.УпрощенныйУчетНДС И НЕ Реквизиты.СписаниеНДС Тогда
		// НДС Предъявленный
		СформироватьДвиженияНДСПредъявленныйВосстановлениеНДС(Реквизиты,  Параметры.ТаблицаСоставДокумента, Движения, Отказ);
	КонецЕсли;
	
	СформироватьДвиженияХозрасчетныйВосстановлениеНДС(Реквизиты,  Параметры.ТаблицаСоставДокумента, Движения, Отказ);
	
КонецПроцедуры

Функция ПодготовитьПараметрыВосстановлениеНДС(ТаблицаРеквизиты, ТаблицаСоставДокумента)

	Параметры = Новый Структура;

	// Реквизиты шапки документа:
	ОбязательныеКолонки = ""
	+ "Период,"
	+ "Организация,"
	+ "Регистратор,"
	+ "УпрощенныйУчетНДС,"
	+ "ОтразитьВКнигеПродаж,"
	+ "СписаниеНДС";

	Параметры.Вставить("Реквизиты", ТаблицаРеквизиты.Скопировать(, ОбязательныеКолонки));

	ОбязательныеКолонки = ""
	+ "Период,"
	+ "Организация,"
	+ "Регистратор,"
	+ "Покупатель,"
	+ "НетДанныхОСчетеФактуре,"
	+ "ЗаписьДополнительногоЛиста,"
	+ "КорректируемыйПериод,"
	+ "ИсправленныйСчетФактура,"
    + "СчетФактура,"			// <ДокументСсылка...>  - документ, являющийся основанием для счета-фактуры
	+ "Поставщик,"				// <СправочникСсылка.Контрагенты> контрагент для взаиморасчетов
	+ "ДоговорКонтрагента,"		// <СправочникСсылка.ДоговорыКонтрагентов> договор контрагента (для списания НДС по налоговому агенту)
	+ "НДС,"					// <Число> - сумма НДС;
	+ "СуммаБезНДС,"			// <Число> - сумма без НДС по определенной ставке НДС;
	+ "ВидЦенности,"
	+ "КодВидаОперации,"
	+ "СтавкаНДС,"
	+ "СчетУчетаНДС,"
    + "ДокументОплаты,"
	+ "ДатаОплаты,"
	+ "ДатаСобытия";

	Параметры.Вставить("ТаблицаСоставДокумента", ТаблицаСоставДокумента.Скопировать(, ОбязательныеКолонки));

	Параметры.ТаблицаСоставДокумента.Колонки.Добавить("СпособУчетаНДС", 
		Новый ОписаниеТипов("ПеречислениеСсылка.СпособыУчетаНДС"));
	Параметры.ТаблицаСоставДокумента.ЗаполнитьЗначения(
		Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету, "СпособУчетаНДС");
	
	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияКнигиПродажВосстановлениеНДС(Реквизиты, ТаблицаДвижений, Движения, Отказ)
	
	Для каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		
		Движение = Движения.НДСЗаписиКнигиПродаж.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
		Движение.Событие = Перечисления.СобытияПоНДСПродажи.ВосстановлениеНДС;
		Если СтрокаТаблицы.НетДанныхОСчетеФактуре Тогда
			Движение.СчетФактура = Реквизиты.Регистратор;
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.НДСЗаписиКнигиПродаж.Записывать = Истина;
	
КонецПроцедуры

Процедура СформироватьДвиженияКнигиПокупокВосстановлениеНДС(Реквизиты, ТаблицаДвижений, Движения, Отказ)
	
	Для каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		
		Движение = Движения.НДСЗаписиКнигиПокупок.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
		Движение.Событие     = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету; 
		Движение.НДС         = Движение.НДС * (-1);
		Движение.СуммаБезНДС = Движение.СуммаБезНДС * (-1);
		
	КонецЦикла;
	
	Движения.НДСЗаписиКнигиПокупок.Записывать = Истина;
	
КонецПроцедуры

Процедура СформироватьДвиженияНДСПредъявленныйВосстановлениеНДС(Реквизиты, ТаблицаДвижений, Движения, Отказ)
	
	Для каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		
		Если СтрокаТаблицы.НетДанныхОСчетеФактуре Тогда
			Продолжить;
		КонецЕсли;
		
		Движение = Движения.НДСПредъявленный.ДобавитьРасход();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
		Движение.Событие     = Перечисления.СобытияПоНДСПокупки.ВосстановленНДС; 
		Движение.НДС         = Движение.НДС * (-1);
		Движение.СуммаБезНДС = Движение.СуммаБезНДС * (-1);
		
	КонецЦикла;
	
	Движения.НДСПредъявленный.Записывать = Истина;
	
КонецПроцедуры

Процедура СформироватьДвиженияХозрасчетныйВосстановлениеНДС(Реквизиты, ТаблицаДвижений, Движения, Отказ)
	
	Для каждого СтрокаПроведения Из ТаблицаДвижений Цикл
		
		Если СтрокаПроведения.НДС <> 0 Тогда
			
			Движение = Движения.Хозрасчетный.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, СтрокаПроведения);
			Движение.Содержание = "Восстановлен НДС";
			
			Движение.СчетДт = СтрокаПроведения.СчетУчетаНДС; // 19.XX
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, 
				"Контрагенты", СтрокаПроведения.Поставщик);
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, 
				"СФПолученные", ?(СтрокаПроведения.НетДанныхОСчетеФактуре, Реквизиты.Регистратор, СтрокаПроведения.СчетФактура));
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, 
				"СпособыУчетаНДС", СтрокаПроведения.СпособУчетаНДС);
				
			Движение.СчетКт = ПланыСчетов.Хозрасчетный.НДС;  // 68.02
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, 
				"ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
			
			Движение.Сумма = СтрокаПроведения.НДС;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры


// СПИСАНИЕ НДС

Процедура СформироватьДвиженияСписаниеНДС(ТаблицаРеквизиты, ТаблицаСоставДокумента, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыСписаниеНДС(ТаблицаРеквизиты, ТаблицаСоставДокумента);
	Реквизиты = Параметры.Реквизиты[0];

	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	Если НЕ ПлательщикНДС Тогда
		Возврат;
	КонецЕсли;
		
	Если Реквизиты.СписаниеНДС Тогда

		Если НЕ Реквизиты.УпрощенныйУчетНДС И НЕ Реквизиты.ВосстановлениеНДС Тогда
			// НДС Предъявленный
		 	СформироватьДвиженияНДСПредъявленныйВычетНДС(Параметры.ТаблицаСоставДокумента, Движения, Истина, Отказ);
		КонецЕсли;

		// Проводка Дт СчетСписания Кт 19.х
		СформироватьПроводкиСписаниеНДС(Реквизиты, Параметры.ТаблицаСоставДокумента, Движения, Отказ);

	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыСписаниеНДС(ТаблицаРеквизиты, ТаблицаСоставДокумента)

	Параметры = Новый Структура;

	// Реквизиты шапки документа:
	ОбязательныеКолонки = ""
	+ "Период,"
	+ "Организация,"
	+ "Регистратор,"
	+ "СчетСписанияНДС,"
	+ "СубконтоСписанияНДС1,"
	+ "СубконтоСписанияНДС2,"
	+ "СубконтоСписанияНДС3,"
	+ "СписаниеНДС,"
	+ "ВосстановлениеНДС,"
	+ "УпрощенныйУчетНДС,"
	+ "ПодразделениеОрганизации";

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, ОбязательныеКолонки));

	ОбязательныеКолонки = ""
	+ "Период,"
	+ "Организация,"
	+ "Регистратор,"
    + "СчетФактура,"			// <ДокументСсылка...>  - документ, являющийся основанием для счета-фактуры
	+ "Поставщик,"				// <СправочникСсылка.Контрагенты> контрагент для взаиморасчетов
	+ "ДоговорКонтрагента,"		// <СправочникСсылка.ДоговорыКонтрагентов> договор контрагента (для списания НДС по налоговому агенту)
	+ "НДС,"					// <Число> - сумма НДС;
	+ "СуммаБезНДС,"			// <Число> - сумма без НДС по определенной ставке НДС;
	+ "ВидЦенности,"
	+ "СтавкаНДС,"
	+ "СчетУчетаНДС,"
    + "ДокументОплаты,"
	+ "ДатаОплаты,"
	+ "Событие,"
	+ "ДатаСобытия";

	Параметры.Вставить("ТаблицаСоставДокумента", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСоставДокумента, ОбязательныеКолонки));

	Параметры.ТаблицаСоставДокумента.Колонки.Добавить("СпособУчетаНДС", 
		Новый ОписаниеТипов("ПеречислениеСсылка.СпособыУчетаНДС"));
	Параметры.ТаблицаСоставДокумента.ЗаполнитьЗначения(
		Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету, "СпособУчетаНДС");
		
	Возврат Параметры;

КонецФункции


// ПОДТВЕРЖДЕНИЕ СТАВКИ 0%

Функция ПодготовитьТаблицуНДСПредъявленныйРеализация0СнятиеБлокировкиВычета(ТаблицаРеквизиты, ТаблицаСостав, Движения) Экспорт

	Параметры = ПодготовитьПараметрыТаблицыНДСПредъявленныйРеализация0СнятиеБлокировкиВычета(ТаблицаРеквизиты, ТаблицаСостав);
	
	Реквизиты = Параметры.Реквизиты[0];

	ТаблицаДокумента	= Параметры.Состав;
	
	СтруктураТаблиц = Новый Структура("ТаблицаРеализация0,НДСПредъявленныйРеализация0СнятиеБлокировкиВычета");
	
	Если ТаблицаДокумента.Количество() = 0 Тогда
		Возврат СтруктураТаблиц;
	КонецЕсли;
	
	ПлательщикНДС		= УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	РаздельныйУчетНДС	= УчетнаяПолитика.РаздельныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	
	Если (НЕ ПлательщикНДС) ИЛИ (НЕ РаздельныйУчетНДС) Тогда
		Возврат СтруктураТаблиц;
	КонецЕсли;
	
	ТаблицаДокумента.Свернуть("СчетФактура, ВидЦенности, Событие", "СуммаБезНДС, НДС");
	
	НДСПредъявленныйРеализация0СнятиеБлокировкиВычета	= Движения.НДСПредъявленныйРеализация0.ВыгрузитьКолонки();
	
	СписокСчетовФактур	= ТаблицаДокумента.ВыгрузитьКолонку("СчетФактура");
	СписокВидовЦенности	= ТаблицаДокумента.ВыгрузитьКолонку("ВидЦенности");
	
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(СписокСчетовФактур);
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(СписокВидовЦенности);
	
	// Управляемая блокировка
	СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "НДСПредъявленныйРеализация0");
	
	ЗначенияБлокировки = Новый Структура;
	ЗначенияБлокировки.Вставить("Период", 		Новый Диапазон(, Реквизиты.Период));
	ЗначенияБлокировки.Вставить("Организация",	Реквизиты.Организация);

	СтруктураПараметров.Вставить("ИсточникДанных",	ТаблицаДокумента);
	
	ОписаниеИсточника = Новый Структура;
	ОписаниеИсточника.Вставить("ДокументОтгрузки",	"СчетФактура");

	ОбщегоНазначенияБПВызовСервера.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки, ОписаниеИсточника);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("КонецПериода",						Новый Граница(КонецДня(Реквизиты.Период), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация",						Реквизиты.Организация);
	Запрос.УстановитьПараметр("СостояниеОжидаетсяПодтверждение",	Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение);
	Запрос.УстановитьПараметр("СписокСчетовФактур",					СписокСчетовФактур);

	Запрос.Текст =
 	"ВЫБРАТЬ
	|	НДСПредъявленныйРеализация0.СчетФактура,
	|	НДСПредъявленныйРеализация0.Состояние,
	|	НДСПредъявленныйРеализация0.ДокументОтгрузки,
	|	НДСПредъявленныйРеализация0.ВидЦенности,
	|	НДСПредъявленныйРеализация0.СтавкаНДС,
	|	НДСПредъявленныйРеализация0.СчетУчетаНДС,
	|	ЕСТЬNULL(НДСПредъявленныйРеализация0.СуммаБезНДСКонечныйОстаток, 0) КАК ОсталосьСуммаБезНДС,
	|	ЕСТЬNULL(НДСПредъявленныйРеализация0.НДСКонечныйОстаток, 0) КАК ОсталосьНДС,
	|	ЕСТЬNULL(НДСПредъявленныйРеализация0.СуммаБезНДСПриход, 0) КАК СуммаБезНДС,
	|	ЕСТЬNULL(НДСПредъявленныйРеализация0.НДСПриход, 0) КАК НДС
	|ИЗ
	|	РегистрНакопления.НДСПредъявленныйРеализация0.ОстаткиИОбороты(
	|			,
	|			&КонецПериода,
	|			Период,
	|			,
	|			Организация = &Организация
	|				И Состояние = &СостояниеОжидаетсяПодтверждение
	|				И ДокументОтгрузки В (&СписокСчетовФактур)) КАК НДСПредъявленныйРеализация0
	|";
	
	Результат	= Запрос.Выполнить();
	ТаблицаОжиданияПодтверждения	= Результат.Выгрузить();
	ТаблицаОжиданияПодтверждения.Индексы.Добавить("ДокументОтгрузки");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("КонецПериода",						Новый Граница(КонецДня(Реквизиты.Период), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация",						Реквизиты.Организация);
	Запрос.УстановитьПараметр("СостояниеОжидаетсяПодтверждение",	Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение);
	Запрос.УстановитьПараметр("СписокСчетовФактур",					СписокСчетовФактур);
	Запрос.УстановитьПараметр("СписокВидовЦенности",				СписокВидовЦенности);
	Запрос.УстановитьПараметр("ТаблицаДокумента",					ТаблицаДокумента);
	
	ТекстПостановление1137 =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.СчетФактура,
	|	ТаблицаДокумента.ВидЦенности,
	|	ТаблицаДокумента.Событие,
	|	ТаблицаДокумента.СуммаБезНДС + ТаблицаДокумента.НДС КАК СуммаСНДС
	|ПОМЕСТИТЬ ВТТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСРеализация0Обороты.СчетФактура,
	|	НДСРеализация0Обороты.ВидЦенности,
	|	ЕСТЬNULL(НДСРеализация0Обороты.СуммаБезНДСПриход, 0) + ЕСТЬNULL(НДСРеализация0Обороты.НДСПриход, 0) КАК СуммаРеализации
	|ПОМЕСТИТЬ ВТНДСРеализация0
	|ИЗ
	|	РегистрНакопления.НДСРеализация0.Обороты(
	|			,
	|			&КонецПериода,
	|			Период,
	|			Организация = &Организация
	|				И Состояние = &СостояниеОжидаетсяПодтверждение
	|				И СчетФактура В (&СписокСчетовФактур)
	|				И ВидЦенности В (&СписокВидовЦенности)) КАК НДСРеализация0Обороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.СчетФактура КАК СчетФактура,
	|	ТаблицаДокумента.Событие КАК СобытиеПродажи,
	|	ТаблицаДокумента.СуммаСНДС КАК СуммаСНДС,
	|	НДСРеализация0.СуммаРеализации КАК СуммаРеализации
	|ИЗ
	|	ВТТаблицаДокумента КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНДСРеализация0 КАК НДСРеализация0
	|		ПО ТаблицаДокумента.СчетФактура = НДСРеализация0.СчетФактура
	|			И ТаблицаДокумента.ВидЦенности = НДСРеализация0.ВидЦенности
	|ИТОГИ
	|	СУММА(СуммаСНДС),
	|	СУММА(СуммаРеализации)
	|ПО
	|	СобытиеПродажи,
	|	СчетФактура";
	
	ТекстПостановление735 = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.СчетФактура КАК СчетФактура,
	|	ТаблицаДокумента.Событие,
	|	ТаблицаДокумента.СуммаБезНДС,
	|	ТаблицаДокумента.СуммаБезНДС + ТаблицаДокумента.НДС КАК СуммаСНДС
	|ПОМЕСТИТЬ ВТТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСРеализация0Остатки.СчетФактура КАК СчетФактура,
	|	НДСРеализация0Остатки.ВидЦенности,
	|	ЕСТЬNULL(НДСРеализация0Остатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСРеализация0Остатки.НДСОстаток, 0) КАК СуммаРеализации,
	|	НДСРеализация0Остатки.Состояние,
	|	НДСРеализация0Остатки.Покупатель,
	|	НДСРеализация0Остатки.СуммаБезНДСОстаток КАК СуммаБезНДС
	|ПОМЕСТИТЬ ВТНДСРеализация0
	|ИЗ
	|	РегистрНакопления.НДСРеализация0.Остатки(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И Состояние = &СостояниеОжидаетсяПодтверждение
	|				И СчетФактура В (&СписокСчетовФактур)) КАК НДСРеализация0Остатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.СчетФактура КАК СчетФактура,
	|	ТаблицаДокумента.Событие КАК СобытиеПродажи,
	|	ТаблицаДокумента.СуммаСНДС КАК СуммаСНДС,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0) КАК СтавкаНДС,
	|	НДСРеализация0.СуммаРеализации КАК СуммаРеализации,
	|	НДСРеализация0.ВидЦенности,
	|	ТаблицаДокумента.СуммаБезНДС,
	|	НДСРеализация0.Состояние,
	|	НДСРеализация0.Покупатель
	|ИЗ
	|	ВТТаблицаДокумента КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНДСРеализация0 КАК НДСРеализация0
	|		ПО ТаблицаДокумента.СчетФактура = НДСРеализация0.СчетФактура
	|ИТОГИ
	|	СУММА(СуммаСНДС),
	|	СУММА(СуммаРеализации)
	|ПО
	|	СобытиеПродажи,
	|	СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТНДСРеализация0.СчетФактура,
	|	ВТНДСРеализация0.ВидЦенности,
	|	ВТНДСРеализация0.Состояние,
	|	ВТНДСРеализация0.Покупатель,
	|	ВТНДСРеализация0.СуммаБезНДС,
	| ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0) КАК СтавкаНДС
	|ИЗ
	|	ВТНДСРеализация0 КАК ВТНДСРеализация0";
	
	Если УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(Реквизиты.Период) = 3 Тогда
		Запрос.Текст = ТекстПостановление735;
		Результат = Запрос.ВыполнитьПакет();
		ВыборкаСобытие = Результат[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СобытиеПродажи");
		СтруктураТаблиц.ТаблицаРеализация0 = Результат[3].Выгрузить();
	Иначе
		Запрос.Текст = ТекстПостановление1137;
		Результат	= Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат СтруктураТаблиц;
		КонецЕсли;
		ВыборкаСобытие	= Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СобытиеПродажи");
	КонецЕсли;
	
	Если ТаблицаОжиданияПодтверждения.Количество() = 0 Тогда
		Возврат СтруктураТаблиц;
	КонецЕсли;
	
	Пока ВыборкаСобытие.Следующий() Цикл
		
		Если ВыборкаСобытие.СобытиеПродажи = Перечисления.СобытияПоНДСПродажи.ПодтвержденаСтавка0 Тогда
			Событие		= Перечисления.СобытияПоНДСПокупки.ПодтвержденаСтавка0;
			Состояние	= Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0;
		Иначе	
			Событие		= Перечисления.СобытияПоНДСПокупки.НеПодтвержденаСтавка0;
			Состояние	= Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0;
		КонецЕсли;
		
		ВыборкаСчетФактура	= ВыборкаСобытие.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СчетФактура");
		Пока ВыборкаСчетФактура.Следующий() Цикл
			
			Если ВыборкаСчетФактура.СуммаСНДС = 0 ИЛИ ВыборкаСчетФактура.СуммаРеализации = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если ВыборкаСчетФактура.СуммаСНДС < ВыборкаСчетФактура.СуммаРеализации Тогда
				Коэффициент	= ВыборкаСчетФактура.СуммаСНДС / ВыборкаСчетФактура.СуммаРеализации;
			Иначе
				Коэффициент = 1;
			КонецЕсли; 
			
			НайденныеСтроки = ТаблицаОжиданияПодтверждения.НайтиСтроки(Новый Структура("ДокументОтгрузки",ВыборкаСчетФактура.СчетФактура));
			Для каждого СтрокаПредположения Из НайденныеСтроки Цикл
				
				КПогашениюБезНДС	= Макс(СтрокаПредположения.СуммаБезНДС * Коэффициент, СтрокаПредположения.ОсталосьСуммаБезНДС);
				КПогашениюНДС		= Макс(СтрокаПредположения.НДС * Коэффициент, СтрокаПредположения.ОсталосьНДС);
				
				Если КПогашениюБезНДС = 0 И КПогашениюНДС = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока	= НДСПредъявленныйРеализация0СнятиеБлокировкиВычета.Добавить(); 
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПредположения);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты);

				НоваяСтрока.СуммаБезНДС	= КПогашениюБезНДС;
				НоваяСтрока.НДС			= КПогашениюНДС;
				НоваяСтрока.ДатаСобытия	= Реквизиты.Период;
				
				НоваяСтрока.Событие		= Событие;
				НоваяСтрока.Состояние	= Состояние;
				
				СтрокаПредположения.ОсталосьСуммаБезНДС	= СтрокаПредположения.ОсталосьСуммаБезНДС - КПогашениюБезНДС;
				СтрокаПредположения.ОсталосьСуммаБезНДС	= СтрокаПредположения.ОсталосьСуммаБезНДС - КПогашениюНДС;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	СтруктураТаблиц.НДСПредъявленныйРеализация0СнятиеБлокировкиВычета = НДСПредъявленныйРеализация0СнятиеБлокировкиВычета;

	Возврат СтруктураТаблиц;
	
КонецФункции

Функция ПодготовитьПараметрыТаблицыНДСПредъявленныйРеализация0СнятиеБлокировкиВычета(ТаблицаРеквизиты, ТаблицаСостав)

	Параметры = Новый Структура;

	// Подготовка таблицы "Состав"
	
	СписокОбязательныхКолонок = ""
		+ "СчетФактура,"		// <ДокументСсылка.*> - Счет-фактура (документ реализации)
		+ "Состояние,"			// <ПеречислениеСсылка.НДССостоянияРеализация0> - Состояние
		+ "ВидЦенности,"		// <ПеречислениеСсылка.ВидыЦенностей> - Вид ценности
		+ "СтавкаНДС,"			// <ПеречислениеСсылка.СтавкиНДС> - Ставка НДС
		+ "СуммаБезНДС,"		// <Число,15,2> - Сумма без НДС
		+ "НДС,"				// <Число,15,2> - НДС
		+ "ДатаСобытия,"		// <Дата> - Дата события
		+ "Событие";			// <ПеречислениеСсылка.СобытияПоНДСПродажи> - Событие

	Параметры.Вставить("Состав", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСостав, СписокОбязательныхКолонок));

	// Подготовка таблицы "Реквизиты"
	
	СписокОбязательныхКолонок = ""
		+ "Регистратор,"	// <ДокументСсылка.*> - документ-регистратор движений
		+ "Период,"			// <Дата> - период движений - дата документа
		+ "Организация";	// <СправочникСсылка.ПрочиеДоходыИРасходы> - Статья прочих расходов (при неподтверждении экспорта)

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции

Функция ПодготовитьТаблицуНДСНачисленныйСторно(ТаблицаРеквизиты, ТаблицаСтавкаНеПодтверждена, Движения) Экспорт

	Параметры = ПодготовитьПараметрыТаблицыНДСНачисленныйСторно(ТаблицаРеквизиты, ТаблицаСтавкаНеПодтверждена);
		
	Реквизиты = Параметры.Реквизиты[0];

	СтавкаНеПодтверждена	= Параметры.СтавкаНеПодтверждена;
	
	Если СтавкаНеПодтверждена.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НДСНачисленныйСторно	= Движения.НДСНачисленный.ВыгрузитьКолонки();
	
	ПлательщикНДС		= УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	РаздельныйУчетНДС	= УчетнаяПолитика.РаздельныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	
	Если (НЕ ПлательщикНДС) ИЛИ (НЕ РаздельныйУчетНДС) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СписокСчетовФактур	= СтавкаНеПодтверждена.ВыгрузитьКолонку("СчетФактура");
	СписокВидовЦенности	= СтавкаНеПодтверждена.ВыгрузитьКолонку("ВидЦенности");
	СписокПокупателей	= СтавкаНеПодтверждена.ВыгрузитьКолонку("Покупатель");
	
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(СписокСчетовФактур);
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(СписокВидовЦенности);
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(СписокПокупателей);
	
	// Управляемая блокировка
	СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "НДСНачисленный");
	
	ЗначенияБлокировки = Новый Структура;      	
	ЗначенияБлокировки.Вставить("Период", 				Новый Диапазон(, Реквизиты.Период));
	ЗначенияБлокировки.Вставить("Организация",			Реквизиты.Организация);
	ЗначенияБлокировки.Вставить("СтавкаНДС",			Перечисления.СтавкиНДС.НДС0);
	ЗначенияБлокировки.Вставить("ВидНачисления",		Перечисления.НДСВидНачисления.Реализация0);
	ЗначенияБлокировки.Вставить("ДоговорКонтрагента",	Справочники.ДоговорыКонтрагентов.ПустаяСсылка());

	СтруктураПараметров.Вставить("ИсточникДанных", СтавкаНеПодтверждена);
	
	ОписаниеИсточника = Новый Структура;
	ОписаниеИсточника.Вставить("СчетФактура",	"СчетФактура");
	ОписаниеИсточника.Вставить("ВидЦенности",	"ВидЦенности");
	ОписаниеИсточника.Вставить("Покупатель",	"Покупатель");

	ОбщегоНазначенияБПВызовСервера.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки, ОписаниеИсточника);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонецПериода",		Новый Граница(КонецДня(Реквизиты.Период), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация",		Реквизиты.Организация);
	Запрос.УстановитьПараметр("СтавкаНДС",			Перечисления.СтавкиНДС.НДС0);
	Запрос.УстановитьПараметр("ВидНачисления",		Перечисления.НДСВидНачисления.Реализация0);
	Запрос.УстановитьПараметр("ДоговорКонтрагента",	Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	Запрос.УстановитьПараметр("СписокСчетовФактур",	СписокСчетовФактур);
	Запрос.УстановитьПараметр("СписокВидовЦенности",СписокВидовЦенности);
	Запрос.УстановитьПараметр("СписокПокупателей",	СписокПокупателей);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСНачисленныйОстатки.СчетФактура,
		|	НДСНачисленныйОстатки.ВидЦенности,
		|	НДСНачисленныйОстатки.СтавкаНДС,
		|	НДСНачисленныйОстатки.Покупатель,
		|	НДСНачисленныйОстатки.ВидНачисления,
		|	НДСНачисленныйОстатки.ДоговорКонтрагента,
		|	НДСНачисленныйОстатки.ДатаОплаты,
		|	НДСНачисленныйОстатки.СуммаБезНДСОстаток,
		|	НДСНачисленныйОстатки.НДСОстаток
		|ИЗ
		|	РегистрНакопления.НДСНачисленный.Остатки(
		|			&КонецПериода,
		|			Организация = &Организация
		|				И СтавкаНДС = &СтавкаНДС
		|				И ВидНачисления = &ВидНачисления
		|				И ДоговорКонтрагента = &ДоговорКонтрагента
		|				И СчетФактура В (&СписокСчетовФактур)
		|				И ВидЦенности В (&СписокВидовЦенности)
		|				И Покупатель В (&СписокПокупателей)) КАК НДСНачисленныйОстатки";

	Результат = Запрос.Выполнить();

	ТаблицаОстатков = Результат.Выгрузить();
    ТаблицаОстатков.Индексы.Добавить("СчетФактура,ВидЦенности,Покупатель");
	
	Отбор	= Новый Структура("СчетФактура,ВидЦенности,Покупатель");
	
	Для каждого СтрокаДокумента Из СтавкаНеПодтверждена Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаДокумента);
		
		РаспределяемаяСумма	= СтрокаДокумента.СуммаБезНДС + СтрокаДокумента.НДС;
		
		НайденныеСтроки	= ТаблицаОстатков.НайтиСтроки(Отбор);
		Для каждого СтрокаОстатков Из НайденныеСтроки Цикл
		
			СторнируемаяСумма	= Мин(РаспределяемаяСумма, СтрокаОстатков.СуммаБезНДСОстаток);
			
			СтрокаОстатков.СуммаБезНДСОстаток	= СтрокаОстатков.СуммаБезНДСОстаток - СторнируемаяСумма;
			РаспределяемаяСумма	= РаспределяемаяСумма - СторнируемаяСумма;
			
			НоваяСтрока	= НДСНачисленныйСторно.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОстатков);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты);
			
			НоваяСтрока.СуммаБезНДС		= -СторнируемаяСумма;
			НоваяСтрока.НДС				= 0;
			НоваяСтрока.ДатаСобытия		= СтрокаДокумента.ДатаСобытия;
			НоваяСтрока.Событие			= СтрокаДокумента.Событие;
			
		КонецЦикла;
		
	КонецЦикла;	
	
	Возврат НДСНачисленныйСторно;
	
КонецФункции

Функция ПодготовитьПараметрыТаблицыНДСНачисленныйСторно(ТаблицаРеквизиты, ТаблицаСтавкаНеПодтверждена)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.СтавкаНеПодтверждена
	
	СписокОбязательныхКолонок = ""
	+ "СчетФактура,"			// <ДокументСсылка.*> - Счет-фактура (документ реализации)
	+ "ВидЦенности,"			// <ПеречислениеСсылка.ВидыЦенностей> - Вид ценности
    + "СтавкаНДС,"				// <ПеречислениеСсылка.СтавкиНДС> - Ставка НДС
	+ "Покупатель,"				// <СправочникСсылка.Контрагенты> - Покупатель
	+ "ВидНачисления,"			// <ПеречислениеСсылка.НДСВидНачисления> - Вид начисления НДС (реализация, налоговый агент, НДС с авансов)
	+ "СуммаБезНДС,"			// <Число,15,2> - Сумма без НДС
	+ "НДС,"					// <Число,15,2> - НДС
	+ "ДатаСобытия,"			// <Дата> - Дата события
	+ "Событие";				// <ПеречислениеСсылка.СобытияПоНДСПродажи> - Событие

	Параметры.Вставить("СтавкаНеПодтверждена", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСтавкаНеПодтверждена, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Регистратор,"			// <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"					// <Дата> - период движений - дата документа
	+ "Организация";	// <СправочникСсылка.ПрочиеДоходыИРасходы> - Статья прочих расходов (при неподтверждении экспорта)

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияСтавка0Подтверждена(ТаблицаРеквизиты, ТаблицаСтавкаПодтверждена, ТаблицаРеализация0,
	ТаблицаСнятиеБлокировкиВычета, ТаблицаСтавкаПодтвержденаРеализация0, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыСтавка0Подтверждена(
		ТаблицаРеквизиты,
		ТаблицаСтавкаПодтверждена,
		ТаблицаРеализация0,
		ТаблицаСнятиеБлокировкиВычета,
		ТаблицаСтавкаПодтвержденаРеализация0);
	
	Реквизиты			= Параметры.Реквизиты[0];
	
	СтавкаПодтверждена		= Параметры.СтавкаПодтверждена;
	Реализация0				= Параметры.Реализация0;
	СнятиеБлокировкиВычета	= Параметры.СнятиеБлокировкиВычета;
	
	Если СтавкаПодтверждена.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ПлательщикНДС 		= УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	РаздельныйУчетНДС	= УчетнаяПолитика.РаздельныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	ВерсияУчетаНДС		= УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	
	Если (НЕ ПлательщикНДС) ИЛИ (НЕ РаздельныйУчетНДС) Тогда
		Возврат;
	КонецЕсли;
	
	УчетНДСПереопределяемый.СформироватьДвиженияНДСПредъявленныйРеализация0СнятиеБлокировкиВычета(Реквизиты, СнятиеБлокировкиВычета, Движения, Отказ);

	// НДС реализация 0 - расход по состоянию "Ожидается подтверждение"
	СформироватьДвиженияНДСРеализация0НачислениеНДСПоРеализации0(Реквизиты, Реализация0, Движения, Отказ);
	
	// По документам отгрузки с датой до 1 октября 2011 налоговая база по НДС 
	// при подтверждении реализации со ставкой 0% корректируется с учетом курса на дату оплаты
	ТаблицаНДСНачисленный = СтавкаПодтверждена.СкопироватьКолонки();
	
	Для каждого СтрокаТаблицы Из СтавкаПодтверждена Цикл
		Если СтрокаТаблицы.ДатаРеализации < '20111001' Тогда
			СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.КурсоваяРазница;
			Если ВерсияУчетаНДС = 1 Тогда
				НоваяСтрока = ТаблицаНДСНачисленный.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				НоваяСтрока.СуммаБезНДС = СтрокаТаблицы.КурсоваяРазница;
			КонецЕсли;
			СтрокаТаблицы.КурсоваяРазница	= 0;
		КонецЕсли;
	КонецЦикла;
	
	Если ВерсияУчетаНДС = 1 Тогда
		
		// НДС начисленный для отражения курсовой разницы
		УчетНДСПереопределяемый.СформироватьДвиженияНДСНачисленныйСтавка0КурсоваяРазница(Реквизиты, ТаблицаНДСНачисленный, Движения, Отказ);
		
		// НДС реализация 0 - приход по состоянию "Подтверждена реализация 0%"
		СформироватьДвиженияНДСРеализация0(СтавкаПодтверждена, Реквизиты, Движения, Отказ);
		
	Иначе
		
		//Запись в книге продаж по ставке 0%
		СформироватьДвиженияНДСЗаписиКнигиПродаж(Реквизиты, СтавкаПодтверждена, Движения, Отказ);
		
	КонецЕсли;
		
КонецПроцедуры

Функция ПодготовитьПараметрыСтавка0Подтверждена(ТаблицаРеквизиты, ТаблицаСтавкаПодтверждена, ТаблицаРеализация0,
	ТаблицаСнятиеБлокировкиВычета, ТаблицаСтавкаПодтвержденаРеализация0)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.СнятиеБлокировкиВычета
	
	СписокОбязательныхКолонок = ""
	+ "СчетФактура,"			// <ДокументСсылка.*> - Счет-фактура
	+ "Состояние,"				// <ПеречислениеСсылка.НДССостоянияРеализация0> - Состояние
	+ "ДокументОтгрузки,"		// <ДокументСсылка.*> - Документ отгрузки
	+ "ВидЦенности,"			// <ПеречислениеСсылка.ВидыЦенностей> - Вид ценности
    + "СтавкаНДС,"				// <ПеречислениеСсылка.СтавкиНДС> - Ставка НДС
	+ "СчетУчетаНДС,"			// <ПланСчетовСсылка.Хозрасчетный> - Счет учета НДС
	+ "СуммаБезНДС,"			// <Число,15,2> - Сумма без НДС
	+ "НДС,"					// <Число,15,2> - НДС
	+ "ДатаСобытия,"			// <Дата> - Дата события
	+ "Событие";				// <ПеречислениеСсылка.СобытияПоНДСПокупки> - Событие

	Параметры.Вставить("СнятиеБлокировкиВычета", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСнятиеБлокировкиВычета, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Регистратор,"			// <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"					// <Дата> - период движений - дата документа
	+ "Организация,"			// <СправочникСсылка.Организации> - организация документа
	+ "СтатьяПрочихРасходов";	// <СправочникСсылка.ПрочиеДоходыИРасходы> - Статья прочих расходов (при неподтверждении экспорта)

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.СтавкаПодтверждена
	
	СписокОбязательныхКолонок = ""
	+ "Состояние,"				// <ПеречислениеСсылка.НДССостоянияРеализация0> - Состояние
	+ "СчетФактура,"			// <ДокументСсылка.*> - Счет-фактура (документ реализации)
	+ "ДатаРеализации," 		// <Дата> - Дата документа реализации
	+ "ВидЦенности,"			// <ПеречислениеСсылка.ВидыЦенностей> - Вид ценности
    + "СтавкаНДС,"				// <ПеречислениеСсылка.СтавкиНДС> - Ставка НДС
	+ "Покупатель,"				// <СправочникСсылка.Контрагенты> - Покупатель
	+ "ВидНачисления,"			// <ПеречислениеСсылка.НДСВидНачисления> - Вид начисления НДС (реализация, налоговый агент, НДС с авансов)
	+ "СуммаБезНДС,"			// <Число,15,2> - Сумма без НДС
	+ "КурсоваяРазница,"        // <Число,15,2> - Курсовая разница
	+ "НДС,"					// <Число,15,2> - НДС
	+ "ДатаСобытия,"			// <Дата> - Дата события
	+ "Событие,"				// <ПеречислениеСсылка.СобытияПоНДСПродажи> - Событие
	+ "Содержание";				// <Строка> - Содержание операции

	Параметры.Вставить("СтавкаПодтверждена", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСтавкаПодтверждена, СписокОбязательныхКолонок));
		
	СтрокаРеквизиты = ТаблицаРеквизиты[0];
		
	Если УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(СтрокаРеквизиты.Период) = 3 Тогда
		
		// Используется таблица остатков "ТаблицаСтавкаПодтвержденаРеализация0"
		
		СписокОбязательныхКолонок = ""
		+ "Состояние,"				// <ПеречислениеСсылка.НДССостоянияРеализация0> - Состояние
		+ "СчетФактура,"			// <ДокументСсылка.*> - Счет-фактура (документ реализации)
		+ "ВидЦенности,"			// <ПеречислениеСсылка.ВидыЦенностей> - Вид ценности
		+ "СтавкаНДС,"				// <ПеречислениеСсылка.СтавкиНДС> - Ставка НДС
		+ "Покупатель,"				// <СправочникСсылка.Контрагенты> - Покупатель
		+ "СуммаБезНДС";			// <Число,15,2> - Сумма без НДС
		
		Параметры.Вставить("Реализация0", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
			ТаблицаСтавкаПодтвержденаРеализация0, СписокОбязательныхКолонок));
			
		Параметры.Реализация0.Колонки.Добавить("ДатаСобытия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
		Параметры.Реализация0.Колонки.Добавить("Событие", Новый ОписаниеТипов("ПеречислениеСсылка.СобытияПоНДСПродажи"));
			
		Параметры.Реализация0.ЗаполнитьЗначения(СтрокаРеквизиты.Период, "ДатаСобытия");
		Параметры.Реализация0.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.ПодтвержденаСтавка0, "Событие");
		
	Иначе	
	
		// ТаблицаСтавкаПодтвержденаРеализация0
	
		СписокОбязательныхКолонок = ""
		+ "Состояние,"				// <ПеречислениеСсылка.НДССостоянияРеализация0> - Состояние
		+ "СчетФактура,"			// <ДокументСсылка.*> - Счет-фактура (документ реализации)
		+ "ВидЦенности,"			// <ПеречислениеСсылка.ВидыЦенностей> - Вид ценности
		+ "СтавкаНДС,"				// <ПеречислениеСсылка.СтавкиНДС> - Ставка НДС
		+ "Покупатель,"				// <СправочникСсылка.Контрагенты> - Покупатель
		+ "СуммаБезНДС,"			// <Число,15,2> - Сумма без НДС
		+ "НДС,"					// <Число,15,2> - НДС
		+ "КурсоваяРазница,"		// <Число,15,2> - Курсовая разница
		+ "ДатаСобытия,"			// <Дата> - Дата события
		+ "Событие";				// <ПеречислениеСсылка.СобытияПоНДСПродажи> - Событие

		Параметры.Вставить("Реализация0", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
			ТаблицаРеализация0, СписокОбязательныхКолонок));

	КонецЕсли;
	
	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияСтавка0НеПодтверждена(ТаблицаРеквизиты, ТаблицаСтавкаНеПодтверждена, ТаблицаРеализация0,
	ТаблицаСнятиеБлокировкиВычета, ТаблицаНДСНачисленныйСторно, ТаблицаСтавкаПодтвержденаРеализация0, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыСтавка0НеПодтверждена(
		ТаблицаРеквизиты,
		ТаблицаСтавкаНеПодтверждена,
		ТаблицаРеализация0,
		ТаблицаСнятиеБлокировкиВычета,
		ТаблицаНДСНачисленныйСторно,
		ТаблицаСтавкаПодтвержденаРеализация0);
		
	Реквизиты = Параметры.Реквизиты[0];

	СтавкаНеПодтверждена	= Параметры.СтавкаНеПодтверждена;
	Реализация0				= Параметры.Реализация0;
	НДСНачисленныйСторно	= Параметры.НДСНачисленныйСторно;
	СнятиеБлокировкиВычета	= Параметры.СнятиеБлокировкиВычета;
	
	Если СтавкаНеПодтверждена.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	РаздельныйУчетНДС	= УчетнаяПолитика.РаздельныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	ВерсияУчетаНДС		= УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	
	Если (НЕ ПлательщикНДС) ИЛИ (НЕ РаздельныйУчетНДС) Тогда
		Возврат;
	КонецЕсли;
	
	Если УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(Реквизиты.Период) = 3 Тогда
		ОпределитьСуммуИСтавкуНДСПоДокументамОтгрузки(Реквизиты, СтавкаНеПодтверждена);
	КонецЕсли;
	
	УчетНДСПереопределяемый.СформироватьДвиженияНДСПредъявленныйРеализация0СнятиеБлокировкиВычета(Реквизиты, СнятиеБлокировкиВычета, Движения, Отказ);

	// НДС реализация 0 - расход по состоянию "Ожидается подтверждение"
	СформироватьДвиженияНДСРеализация0НачислениеНДСПоРеализации0(Реквизиты, Реализация0, Движения, Отказ);

	// НДС начисленный - сторно по состоянию "Ожидается подтверждение"
	// Сторно-движения нужно делать в том числе и если ВерсияУчетаНДС = 2
	УчетНДСПереопределяемый.СформироватьДвиженияНДСНачисленныйСтавка0НеПодтверждена(Реквизиты, НДСНачисленныйСторно, Движения, Отказ);

	Если ВерсияУчетаНДС = 1 Тогда	
		// НДС реализация 0 - приход по состоянию "Не подтверждена реализация 0%"
		СформироватьДвиженияНДСРеализация0(СтавкаНеПодтверждена, Реквизиты, Движения, Отказ);

		// НДС начисленный - приход по состоянию "Не подтверждена реализация 0%"
		УчетНДСПереопределяемый.СформироватьДвиженияНДСНачисленныйСтавка0НеПодтверждена(Реквизиты, СтавкаНеПодтверждена, Движения, Отказ);
		
	Иначе
		
		// Запись в книге продаж по заданной ставке
		СформироватьДвиженияНДСЗаписиКнигиПродаж(
			Реквизиты, СтавкаНеПодтверждена, Движения, Отказ);
		
	КонецЕсли;

	// Проводки при неподтверждении ставки
	// Дт 68.22 Кт 68.02
	// Дт 91.02 Кт 68.22
	СформироватьПроводкиСтавка0НеПодтверждена(Реквизиты, СтавкаНеПодтверждена, Движения, Отказ);

КонецПроцедуры

Функция ПодготовитьПараметрыСтавка0НеПодтверждена(ТаблицаРеквизиты, ТаблицаСтавкаНеПодтверждена, ТаблицаРеализация0,
	ТаблицаСнятиеБлокировкиВычета, ТаблицаНДСНачисленныйСторно, ТаблицаСтавкаПодтвержденаРеализация0)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.СнятиеБлокировкиВычета
	
	СписокОбязательныхКолонок = ""
	+ "СчетФактура,"			// <ДокументСсылка.*> - Счет-фактура
	+ "Состояние,"				// <ПеречислениеСсылка.НДССостоянияРеализация0> - Состояние
	+ "ДокументОтгрузки,"		// <ДокументСсылка.*> - Документ отгрузки
	+ "ВидЦенности,"			// <ПеречислениеСсылка.ВидыЦенностей> - Вид ценности
    + "СтавкаНДС,"				// <ПеречислениеСсылка.СтавкиНДС> - Ставка НДС
	+ "СчетУчетаНДС,"			// <ПланСчетовСсылка.Хозрасчетный> - Счет учета НДС
	+ "СуммаБезНДС,"			// <Число,15,2> - Сумма без НДС
	+ "НДС,"					// <Число,15,2> - НДС
	+ "ДатаСобытия,"			// <Дата> - Дата события
	+ "Событие";				// <ПеречислениеСсылка.СобытияПоНДСПокупки> - Событие

	Параметры.Вставить("СнятиеБлокировкиВычета", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСнятиеБлокировкиВычета, СписокОбязательныхКолонок));
		
	СтрокаРеквизиты = ТаблицаРеквизиты[0];	
		
	Если УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(СтрокаРеквизиты.Период) = 3 Тогда
		
		// Используется таблица остатков "ТаблицаСтавкаПодтвержденаРеализация0"
		
		СписокОбязательныхКолонок = ""
		+ "Состояние,"				// <ПеречислениеСсылка.НДССостоянияРеализация0> - Состояние
		+ "СчетФактура,"			// <ДокументСсылка.*> - Счет-фактура (документ реализации)
		+ "ВидЦенности,"			// <ПеречислениеСсылка.ВидыЦенностей> - Вид ценности
		+ "СтавкаНДС,"				// <ПеречислениеСсылка.СтавкиНДС> - Ставка НДС
		+ "Покупатель,"				// <СправочникСсылка.Контрагенты> - Покупатель
		+ "СуммаБезНДС";			// <Число,15,2> - Сумма без НДС
		
		Параметры.Вставить("Реализация0", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
			ТаблицаСтавкаПодтвержденаРеализация0, СписокОбязательныхКолонок));
			
		Параметры.Реализация0.Колонки.Добавить("ДатаСобытия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
		Параметры.Реализация0.Колонки.Добавить("Событие", Новый ОписаниеТипов("ПеречислениеСсылка.СобытияПоНДСПродажи"));
			
		Параметры.Реализация0.ЗаполнитьЗначения(СтрокаРеквизиты.Период, "ДатаСобытия");
		Параметры.Реализация0.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0, "Событие");
		
	Иначе	
		
		// Подготовка таблицы Параметры.Реализация0
		
		СписокОбязательныхКолонок = ""
		+ "Состояние,"				// <ПеречислениеСсылка.НДССостоянияРеализация0> - Состояние
		+ "СчетФактура,"			// <ДокументСсылка.*> - Счет-фактура (документ реализации)
		+ "ВидЦенности,"			// <ПеречислениеСсылка.ВидыЦенностей> - Вид ценности
	    + "СтавкаНДС,"				// <ПеречислениеСсылка.СтавкиНДС> - Ставка НДС
		+ "Покупатель,"				// <СправочникСсылка.Контрагенты> - Покупатель
		+ "СуммаБезНДС,"			// <Число,15,2> - Сумма без НДС
		+ "НДС,"					// <Число,15,2> - НДС
		+ "КурсоваяРазница,"		// <Число,15,2> - Курсовая разница
		+ "ДатаСобытия,"			// <Дата> - Дата события
		+ "Событие";				// <ПеречислениеСсылка.СобытияПоНДСПродажи> - Событие

		Параметры.Вставить("Реализация0", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
			ТаблицаРеализация0, СписокОбязательныхКолонок));
			
	КонецЕсли;
		
	// Подготовка таблицы Параметры.НДСНачисленныйСторно
	
	СписокОбязательныхКолонок = ""
	+ "СчетФактура,"			// <ДокументСсылка.*> - Счет-фактура (документ реализации)
	+ "ВидЦенности,"			// <ПеречислениеСсылка.ВидыЦенностей> - Вид ценности
    + "СтавкаНДС,"				// <ПеречислениеСсылка.СтавкиНДС> - Ставка НДС
	+ "Покупатель,"				// <СправочникСсылка.Контрагенты> - Покупатель
	+ "ВидНачисления,"			// <ПеречислениеСсылка.НДСВидНачисления> - Вид начисления НДС (реализация, налоговый агент, НДС с авансов)
	+ "ДоговорКонтрагента,"		// <СправочникСсылка.ДоговорыКонтрагентов> - Договор контрагента (для СФ на аванс, нал.агента по 161.5)
	+ "ДатаОплаты,"				// <Дата> - Дата оплаты
	+ "СуммаБезНДС,"			// <Число,15,2> - Сумма без НДС
	+ "НДС,"					// <Число,15,2> - НДС
	+ "ДатаСобытия,"			// <Дата> - Дата события
	+ "Событие";				// <ПеречислениеСсылка.СобытияПоНДСПродажи> - Событие
	
	Параметры.Вставить("НДСНачисленныйСторно", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаНДСНачисленныйСторно, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.СтавкаНеПодтверждена
	
	СписокОбязательныхКолонок = ""
	+ "Состояние,"				// <ПеречислениеСсылка.НДССостоянияРеализация0> - Состояние
	+ "СчетФактура,"			// <ДокументСсылка.*> - Счет-фактура (документ реализации)
	+ "СчетФактураВыданный,"	// <ДокументСсылка.СчетФактураВыданный> - Счет-фактура выписаный при неподтверждении нулевой ставки
	+ "ВидЦенности,"			// <ПеречислениеСсылка.ВидыЦенностей> - Вид ценности
	+ "СтавкаНДС,"				// <ПеречислениеСсылка.СтавкиНДС> - Ставка НДС
	+ "Покупатель,"				// <СправочникСсылка.Контрагенты> - Покупатель
	+ "ВидНачисления,"			// <ПеречислениеСсылка.НДСВидНачисления> - Вид начисления НДС (реализация, налоговый агент, НДС с авансов)
	+ "СуммаБезНДС,"			// <Число,15,2> - Сумма без НДС
	+ "НДС,"					// <Число,15,2> - НДС
	+ "ДатаСобытия,"			// <Дата> - Дата события
	+ "Событие,"				// <ПеречислениеСсылка.СобытияПоНДСПродажи> - Событие
	+ "Содержание,"				// <Строка> - Содержание операции
	+ "КорректируемыйПериод," 	// <Дата> - Корректируемый период
	+ "ЗаписьДополнительногоЛиста"; // <Булево> - Признак записи дополнительного листа
    
	Параметры.Вставить("СтавкаНеПодтверждена", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСтавкаНеПодтверждена, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Регистратор,"			// <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"					// <Дата> - период движений - дата документа
	+ "Организация,"			// <СправочникСсылка.Организации> - организация документа
	+ "СтатьяПрочихРасходов";	// <СправочникСсылка.ПрочиеДоходыИРасходы> - Статья прочих расходов (при неподтверждении экспорта)

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции

Процедура ОпределитьСуммуИСтавкуНДСПоДокументамОтгрузки(Реквизиты, ТаблицаСтавкаНеПодтверждена)

	ТаблицаСтавкаНДСНеПодтвержденаПоСчетуФактуре = ТаблицаСтавкаНеПодтверждена.СкопироватьКолонки();
	
	Для каждого СтрокаНеПодтверждения Из ТаблицаСтавкаНеПодтверждена Цикл
	
		ДанныеСчетаФактуры = Новый Структура(
		"СчетФактура,ВидСчетаФактуры,Контрагент,ДоговорКонтрагента,ИспользуетсяПостановлениеНДС1137,НеподтверждениеНулевойСтавки,СводныйКомиссионный");
		
		ДанныеСчетаФактуры.СчетФактура = СтрокаНеПодтверждения.СчетФактураВыданный;
		ДанныеСчетаФактуры.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		ДанныеСчетаФактуры.Контрагент = СтрокаНеПодтверждения.Покупатель;
		ДанныеСчетаФактуры.ИспользуетсяПостановлениеНДС1137 = Истина;
		ДанныеСчетаФактуры.НеподтверждениеНулевойСтавки = Истина;
		ДанныеСчетаФактуры.СводныйКомиссионный = Ложь;
		
		ПараметрыДокумента = ПодготовитьДанныеДляПечатиСчетовФактур(СтрокаНеПодтверждения.СчетФактура, ДанныеСчетаФактуры);
		
		Если ПараметрыДокумента.Реквизиты = Неопределено 
			ИЛИ ПараметрыДокумента.ТаблицаДокумента = Неопределено Тогда
			Продолжить;
		Иначе
			
			// Формируем строки таблицы по конкретному документу реализации
			
			ТаблицаДокумента = ПараметрыДокумента.ТаблицаДокумента;
			ТаблицаДокумента.Свернуть("СтавкаНДС", "СуммаБезНДС,СуммаНДС");
			
			Для каждого СтрокаДокумента Из ТаблицаДокумента Цикл
			
				НоваяСтрока = ТаблицаСтавкаНДСНеПодтвержденаПоСчетуФактуре.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНеПодтверждения, , "СтавкаНДС,СуммаБезНДС,НДС,СчетФактура");
				
				НоваяСтрока.СчетФактура = СтрокаНеПодтверждения.СчетФактураВыданный;
				
				НоваяСтрока.СтавкаНДС = СтрокаДокумента.СтавкаНДС;
				НоваяСтрока.СуммаБезНДС = СтрокаДокумента.СуммаБезНДС;
				НоваяСтрока.НДС = СтрокаДокумента.СуммаНДС;
				
			КонецЦикла;
			
		КонецЕсли;

	КонецЦикла;
	
	ТаблицаСтавкаНеПодтверждена = ТаблицаСтавкаНДСНеПодтвержденаПоСчетуФактуре;
	
КонецПроцедуры

// НДС ПО СМР

Процедура СформироватьДвиженияНачислениеНДСпоСМРХозспособом(ТаблицаРеквизиты, СМРХозспособом, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыНачислениеНДСпоСМРХозспособом(ТаблицаРеквизиты, СМРХозспособом);
	Реквизиты = Параметры.Реквизиты[0];

	ПлательщикНДС	= УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	
	Если НЕ ПлательщикНДС Тогда
		Возврат;
	КонецЕсли;
	
	ВерсияУчетаНДС    = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	УпрощенныйУчетНДС = ВерсияУчетаНДС = 1 И УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	
	СформироватьПроводкиНачислениеНДСпоСМРХозспособом(Реквизиты, Параметры.СМРХозспособом, Движения, Отказ);

	Если ВерсияУчетаНДС = 1 Тогда
		
		Если УпрощенныйУчетНДС Тогда
			СформироватьДвиженияНДСЗаписиКнигиПродажНачислениеНДСпоСМРХозспособом(Реквизиты, Параметры.СМРХозспособом, Движения, Отказ);
		Иначе
			УчетНДСПереопределяемый.СформироватьДвиженияНДСНачисленныйНачислениеНДСпоСМРХозспособом(Реквизиты, Параметры.СМРХозспособом, Движения, Отказ);
			Параметры.СМРХозспособом.Колонки.Событие.Имя = "СобытиеПродажи";
			Параметры.СМРХозспособом.Колонки.СобытиеПокупки.Имя = "Событие";
			СформироватьДвиженияНДСПредъявленныйНачислениеНДСпоСМРХозспособом(Реквизиты, Параметры.СМРХозспособом, Движения, Отказ);
		КонецЕсли;
	
	Иначе
		
		СформироватьДвиженияНДСЗаписиКнигиПродажНачислениеНДСпоСМРХозспособом(Реквизиты, Параметры.СМРХозспособом, Движения, Отказ);
		
		Параметры.СМРХозспособом.Колонки.Событие.Имя = "СобытиеПродажи";
		Параметры.СМРХозспособом.Колонки.СобытиеПокупки.Имя = "Событие";
		СформироватьДвиженияНДСПредъявленныйНачислениеНДСпоСМРХозспособом(Реквизиты, Параметры.СМРХозспособом, Движения, Отказ);
		
	КонецЕсли;


КонецПроцедуры

Функция ПодготовитьПараметрыНачислениеНДСпоСМРХозспособом(ТаблицаРеквизиты, СМРХозспособом)

	Параметры = Новый Структура;

	// Реквизиты шапки документа:
	ОбязательныеКолонки = ""
    + "Период,"
	+ "Организация,"
	+ "ПодразделениеОрганизации,"
	+ "СчетУчетаНДС,"
	+ "РаздельныйУчетНДСНаСчете19";

    Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, ОбязательныеКолонки));

	ОбязательныеКолонки = ""
	+ "Регистратор,"
	+ "Объект,"
	+ "СуммаБезНДС,"
	+ "СтавкаНДС,"
	+ "НДС,"
	+ "СчетФактура,"
	+ "ВидЦенности,"
	+ "Событие,"
	+ "СобытиеПокупки,"
	+ "ВидНачисления,"
	+ "ДатаСобытия,"
	+ "СчетУчетаНДС";

	Параметры.Вставить("СМРХозспособом", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		СМРХозспособом, ОбязательныеКолонки));

	Возврат Параметры;

КонецФункции

// КОРРЕКТИРОВКА НДС

	// Формирование движений при корректировке реализации
//
Процедура СформироватьДвиженияКорректировкиРеализацияТоваровУслуг(ТаблицаНДСТоварыУслуги, ТаблицаНДСТоварыГТД, ТаблицаНДСНачислениеНДС, ТаблицаНДСВычет, ТаблицаНДСВосстановление,
		ТаблицаНДССторноКнигиПродаж, ТаблицаНДССторноНДСКнигаПокупок, ТаблицаНДСОстаткиНДСПредъявленный, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыКорректировкиРеализацияТоваровУслуг(ТаблицаНДСНачислениеНДС, ТаблицаНДСТоварыГТД, ТаблицаНДСВычет, ТаблицаНДСВосстановление,
		ТаблицаНДССторноКнигиПродаж, ТаблицаНДССторноНДСКнигаПокупок, ТаблицаНДСОстаткиНДСПредъявленный, ТаблицаРеквизиты);
	
	Если Параметры.Реквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];

	// Списываем ГТД
	Для Каждого СтрокаГТД Из Параметры.ТоварыГТД Цикл
		
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = "Корректировка списания ГТД";
		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ГТД;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаГТД.Номенклатура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НомераГТД", СтрокаГТД.НомерГТД);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтраныПроисхождения", СтрокаГТД.СтранаПроисхождения);
		Проводка.КоличествоКт = СтрокаГТД.Количество;

	КонецЦикла;
	
	Если НЕ Реквизиты.ПлательщикНДС И НЕ Реквизиты.ВедетсяУчетНДСПоФЗ134 Тогда
		Возврат;
	КонецЕсли; 

	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки Тогда
		
		// Сторно движений исправляемого документа
		СформироватьДвиженияНДСЗаписиКнигиПродажНачислениеНДСПоРеализации(Параметры.ТаблицаНДССторноКнигиПродаж, Движения, Отказ);
				
		// Формирование исправленных движений
		СформироватьИсправительныеДвиженияКорректировкаРеализации(Реквизиты, Параметры.ТаблицаНДСНачислениеНДС, Параметры.ТаблицаНДСВычет, Параметры.ТаблицаНДСВосстановление,
			Параметры.ТаблицаНДССторноКнигиПокупок, Параметры.ТаблицаНДСОстаткиНДСПредъявленный, Движения, Отказ);
		
	Иначе
		// Формирование корректировочных движений
		СформироватьКорректировочныеДвиженияКорректировкаРеализации(Реквизиты, Параметры.ТаблицаНДСВычет, Параметры.ТаблицаНДСВосстановление, Движения, Отказ);
		
	КонецЕсли;
	
	СформироватьПроводкиКорректировкиРеализацияТоваровУслуг(ТаблицаНДСТоварыУслуги, ТаблицаРеквизиты, Движения, Отказ);
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыКорректировкиРеализацияТоваровУслуг(ТаблицаНДСНачислениеНДС, ТаблицаНДСТоварыГТД, ТаблицаНДСВычет, ТаблицаНДСВосстановление,
	ТаблицаНДССторноКнигиПродаж, ТаблицаНДССторноНДСКнигаПокупок, ТаблицаНДСОстаткиНДСПредъявленный, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"							// <Дата>
	+ "Регистратор,"					// <ДокументСсылка>
	+ "ВидОперации,"					// <Булево>
	+ "ОтчетностьПодписана,"			// <Булево>
	+ "ПрошлыйПериод,"					// <Булево>
	+ "КорректироватьБУиНУ,"			// <Булево>
	+ "ДокументРеализации,"             // <ДокументСсылка>
	+ "СтатьяПрочихДоходовИРасходов,"	// <СправочникСсылка.ПрочиеДоходыИРасходы>
	+ "Организация"						// <СправочникСсылка.Организации>
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
		
	Если Параметры.Реквизиты.Количество() = 0 Тогда
		Возврат Параметры;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты;
	СтрокаРеквизиты = Параметры.Реквизиты[0];
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(СтрокаРеквизиты.Организация, СтрокаРеквизиты.Период);
	ВедетсяУчетНДСПоФЗ134 = ВедетсяУчетНДСПоФЗ134(СтрокаРеквизиты.Период);
	
	Реквизиты.Колонки.Добавить("ПлательщикНДС");
	Реквизиты.Колонки.Добавить("ВедетсяУчетНДСПоФЗ134");
	
	Реквизиты.ЗаполнитьЗначения(ПлательщикНДС, "ПлательщикНДС");
	Реквизиты.ЗаполнитьЗначения(ВедетсяУчетНДСПоФЗ134, "ВедетсяУчетНДСПоФЗ134");
	
	Если НЕ ПлательщикНДС
		И ВедетсяУчетНДСПоФЗ134 Тогда
		
		ПодготовитьТаблицуДляНачисленияНДСНеплательщиком(ТаблицаНДСНачислениеНДС);
		ПодготовитьТаблицуДляНачисленияНДСНеплательщиком(ТаблицаНДССторноКнигиПродаж);
		ПодготовитьТаблицуДляНачисленияНДСНеплательщиком(ТаблицаНДСВосстановление);
		
	КонецЕсли; 
	
	// Подготовка таблицы движений по данным документа
	СписокОбязательныхКолонок = ""
	+ "ВидЦенности,"				
	+ "Содержание,"				
	+ "СтавкаНДС,"				
	+ "СуммаБезНДС,"		
	+ "НДС,"
	+ "Регистратор,"
	+ "Период,"
	+ "Организация,"				
	+ "Покупатель,"				
	+ "ИсправленныйСчетФактура,"				
	+ "Событие,"		
	+ "ДатаСобытия,"
	+ "СчетФактура,"
	+ "ЗаписьДополнительногоЛиста,"
	+ "СторнирующаяЗаписьДопЛиста,"
	+ "КорректируемыйПериод,"
	+ "ЭтоУслуга,"
	+ "СчетУчета,"
	+ "СчетУчетаНДСПоРеализации,"
	+ "Субконто"
	;
	Параметры.Вставить("ТаблицаНДСНачислениеНДС", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаНДСНачислениеНДС, СписокОбязательныхКолонок));
		
	// Подготовка таблицы сторно движений по книге продаж
	СписокОбязательныхКолонок = ""
	+ "Период,"
	+ "Регистратор,"
	+ "Содержание,"
	+ "Организация,"
	+ "Покупатель,"
	+ "СчетФактура,"
	+ "ВидЦенности,"
	+ "СтавкаНДС,"
	+ "ДатаОплаты,"
	+ "ДокументОплаты,"
	+ "Событие,"
	+ "ДатаСобытия,"
	+ "ЗаписьДополнительногоЛиста,"
	+ "СторнирующаяЗаписьДопЛиста,"
	+ "КорректируемыйПериод,"
	+ "ДоговорКонтрагента,"
	+ "ИсправленныйСчетФактура,"
	+ "СуммаБезНДС,"
	+ "НДС"
	;
	Параметры.Вставить("ТаблицаНДССторноКнигиПродаж", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаНДССторноКнигиПродаж, СписокОбязательныхКолонок));

	// Подготовка таблицы восстановление НДС
	СписокОбязательныхКолонок = ""
	+ "СчетФактура,"
	+ "ИсправленныйСчетФактура,"
	+ "Содержание,"
	+ "ЭтоУслуга,"
	+ "ВидЦенности,"
	+ "Событие,"
	+ "ДатаСобытия,"
	+ "Номенклатура,"
	+ "СтавкаНДС,"
	+ "НДС,"
	+ "СуммаБезНДС,"
	+ "СчетУчета,"
	+ "Период,"
	+ "Организация,"
	+ "Покупатель,"
	+ "ЗаписьДополнительногоЛиста,"
	+ "КорректируемыйПериод,"
	+ "СторнирующаяЗаписьДопЛиста,"
	+ "НомерСтроки,"
	+ "СчетУчетаНДСПоРеализации,"
	+ "Субконто,"
	+ "Регистратор"
	;
	Параметры.Вставить("ТаблицаНДСВосстановление", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаНДСВосстановление, СписокОбязательныхКолонок));

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"            // <Строка> - имя табличной части документа
	+ "СинонимСписка,"        // <Строка> - синоним табличной части документа
	+ "НомерСтрокиДокумента," // <Число,10,0> - номер строки документа
	+ "Номенклатура,"         // <СправочникСсылка.Номенклатура>
	+ "СчетУчета,"            // <ПланСчетовСсылка.Хозрасчетный> - счет учета товара
	+ "СтавкаНДС,"            // <ПеречислениеСсылка.СтавкиНДС> - ставка НДС, указанная в документе
	+ "НомерГТД,"             // <СправочникСсылка.НомераГТД>
	+ "СтранаПроисхождения,"  // <СправочникСсылка.СтраныМира>
	+ "Количество"	          // <Число,15,3>
	;
	Параметры.Вставить("ТоварыГТД", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаНДСТоварыГТД, СписокОбязательныхКолонок));

	// Подготовка таблицы сторно движений по книге покупок
	СписокОбязательныхКолонокНДСПредъявленный = ""
		+ "Период,"
		+ "Регистратор,"
		+ "Организация,"
		+ "СчетФактура,"
		+ "ВидЦенности,"
		+ "СтавкаНДС,"
		+ "СчетУчетаНДС,"
		+ "Поставщик,"
		+ "ДатаОплаты,"
		+ "ДоговорКонтрагента,"
		+ "ИсправленныйСчетФактура,"
		+ "СуммаБезНДС,"
		+ "НДС,"
		+ "Событие,"
		+ "ДатаСобытия"
		;
		
	// Подготовка таблицы сторно движений по книге покупок
	СписокОбязательныхКолонокСторноКнигиПокупок = ""
		+ "Период,"
		+ "Регистратор,"
		+ "Содержание,"
		+ "Организация,"
		+ "Поставщик,"
		+ "СчетФактура,"
		+ "ВидЦенности,"
		+ "СтавкаНДС,"
		+ "ДатаОплаты,"
		+ "ДокументОплаты,"
		+ "Событие,"
		+ "ДатаСобытия,"
		+ "ЗаписьДополнительногоЛиста,"
		+ "КорректируемыйПериод,"
		+ "ДоговорКонтрагента,"
		+ "ИсправленныйСчетФактура,"
		+ "СуммаБезНДС,"
		+ "НДС"
		;
		
	// Подготовка таблицы сторно движений по книге покупок
	СписокОбязательныхКолонокВычет = ""
		+ "СчетФактура,"
		+ "ИсправленныйСчетФактура,"
		+ "Содержание,"
		+ "ЭтоУслуга,"
		+ "ВидЦенности,"
		+ "Событие,"
		+ "Номенклатура,"
		+ "СтавкаНДС,"
		+ "НДС,"
		+ "СуммаБезНДС,"
		+ "СчетУчета,"
		+ "Период,"
		+ "ДатаСобытия,"
		+ "Организация,"
		+ "Поставщик,"
		+ "ЗаписьДополнительногоЛиста,"
		+ "КорректируемыйПериод,"
		+ "СторнирующаяЗаписьДопЛиста,"
		+ "НомерСтроки,"
		+ "СчетУчетаНДСПоРеализации,"
		+ "СчетУчетаНДС,"
		+ "Субконто,"
		+ "Регистратор"
		;
		
	Если ПлательщикНДС Тогда
	
		Параметры.Вставить("ТаблицаНДСОстаткиНДСПредъявленный", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
			ТаблицаНДСОстаткиНДСПредъявленный, СписокОбязательныхКолонокНДСПредъявленный));
		
		Параметры.Вставить("ТаблицаНДССторноКнигиПокупок", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
			ТаблицаНДССторноНДСКнигаПокупок, СписокОбязательныхКолонокСторноКнигиПокупок));

		Параметры.Вставить("ТаблицаНДСВычет", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
			ТаблицаНДСВычет, СписокОбязательныхКолонокВычет));
			
	Иначе
			
		Параметры.Вставить("ТаблицаНДСОстаткиНДСПредъявленный", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(, 
			СписокОбязательныхКолонокНДСПредъявленный));
		
		Параметры.Вставить("ТаблицаНДССторноКнигиПокупок", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(, 
			СписокОбязательныхКолонокСторноКнигиПокупок));

		Параметры.Вставить("ТаблицаНДСВычет", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(, 
			СписокОбязательныхКолонокВычет));	
			
	КонецЕсли; 
			
	Возврат Параметры;

КонецФункции

Процедура СформироватьКорректировочныеДвиженияКорректировкаРеализации(Реквизиты, ТаблицаНДСВычет, ТаблицаНДСВосстановление, Движения, Отказ)
	
	// Отражение предъявленного НДС по строкам на уменьшение стоимости	
	ЗаполнитьВидыЦенностей(ТаблицаНДСВычет,, "СчетУчета");
	СформироватьДвиженияПредъявленНДС(ТаблицаНДСВычет,, Движения, Отказ);
	
	ЗаполнитьВидыЦенностей(ТаблицаНДСВосстановление,, "СчетУчета");
	ТаблицаНДСВосстановление.Свернуть(
		"Организация, Покупатель, СчетФактура, ВидЦенности, СтавкаНДС, Событие, ДатаСобытия, ЗаписьДополнительногоЛиста, СторнирующаяЗаписьДопЛиста, 
		| КорректируемыйПериод, ИсправленныйСчетФактура, Период, Регистратор", 
		"СуммаБезНДС, НДС");
	СформироватьДвиженияЗаписьКнигиПродаж(ТаблицаНДСВосстановление, Движения, Отказ);
		
КонецПроцедуры

Процедура СформироватьДвиженияПредъявленНДС(ТаблицаПредъявленногоНДС, Сторно = Ложь, Движения, Отказ)
	
	Если ТаблицаПредъявленногоНДС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	ТаблицаПредъявленногоНДС.Свернуть(
		"ВидЦенности, СтавкаНДС, Поставщик, Организация, СчетФактура, ИсправленныйСчетФактура, Событие, ДатаСобытия, 
		| СчетУчетаНДС, Регистратор, Период", "СуммаБезНДС, НДС");
		
	Для каждого СтрокаДвижения Из ТаблицаПредъявленногоНДС Цикл
		
		Если Сторно Тогда
			Движение = Движения.НДСПредъявленный.ДобавитьРасход();
		Иначе			
			Движение = Движения.НДСПредъявленный.ДобавитьПриход();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Движение, СтрокаДвижения);
          
  	КонецЦикла;
				
	Движения.НДСПредъявленный.Записывать = Истина;
	
КонецПроцедуры

Процедура СформироватьДвиженияСторноВычетаНДС(Реквизиты, ТаблицаСторноНДС, Движения, Отказ)
	
	СформироватьДвиженияНДСЗаписиКнигиПокупок(ТаблицаСторноНДС, Движения, Отказ);
	
	Если Реквизиты.КорректироватьБУиНУ Тогда
		СформироватьПроводкиСторноВычетаНДС(Реквизиты, ТаблицаСторноНДС, Движения, Отказ);	
	КонецЕсли;	
	
КонецПроцедуры	

Процедура СформироватьПроводкиСторноВычетаНДС(Реквизиты, ТаблицаСторноНДС, Движения, Отказ)
                            	
	Для Каждого СтрокаСторно Из ТаблицаСторноНДС Цикл
				
		Движение = Движения.Хозрасчетный.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаСторно, , "Период, Регистратор");
		
		Движение.Период = СтрокаСторно.Период;
		
		Движение.Организация = СтрокаСторно.Организация;
		Движение.Содержание  = "Сторнирование НДС";
		
		Движение.СчетДт = ПланыСчетов.Хозрасчетный.НДС; // 68.02
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		
		Движение.СчетКт = ПланыСчетов.Хозрасчетный.НДСПоУменьшениюСтоимостиРеализации; // 19.09
		
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "СФПолученные", СтрокаСторно.СчетФактура);
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "Контрагенты", СтрокаСторно.Поставщик);
		
		Движение.Сумма = СтрокаСторно.НДС;
			
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
			
КонецПроцедуры	

Процедура СформироватьДвиженияЗаписьКнигиПродаж(ТаблицаДвижений, Движения, Отказ)
	
	Если ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаДвижения Из ТаблицаДвижений Цикл
		
		Если СтрокаДвижения.СуммаБезНДС = 0 И СтрокаДвижения.НДС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// НДС Продажи
		Движение = Движения.НДСЗаписиКнигиПродаж.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаДвижения);

	КонецЦикла;
	
	Движения.НДСЗаписиКнигиПродаж.Записывать = Истина;
			
КонецПроцедуры

Процедура СформироватьИсправительныеДвиженияКорректировкаРеализации(Реквизиты, ТаблицаНДСНачислениеНДС, ТаблицаНДСВычет, ТаблицаНДСВосстановление, ТаблицаНДССторноКнигиПокупок, ТаблицаНДСОстаткиНДСПредъявленный, Движения, Отказ)
	
	ИсправляемыйДокумент = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументРеализации(Реквизиты.ДокументРеализации);
	
	Если ТипЗнч(ИсправляемыйДокумент) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		
		// Сторно движений исправляемого документа
		СформироватьДвиженияПредъявленНДС(ТаблицаНДСОстаткиНДСПредъявленный, Истина, Движения, Отказ);
    	СформироватьДвиженияСторноВычетаНДС(Реквизиты, ТаблицаНДССторноКнигиПокупок, Движения, Отказ);
		
		// Новые движения по исправленному корректировочному счету-фактуре
		СформироватьКорректировочныеДвиженияКорректировкаРеализации(Реквизиты, ТаблицаНДСВычет, ТаблицаНДСВосстановление,Движения, Отказ);
		
	Иначе
		
		ЗаполнитьВидыЦенностей(ТаблицаНДСНачислениеНДС,, "СчетУчета");
		ТаблицаНДСНачислениеНДС.Свернуть(
			"ВидЦенности, СтавкаНДС, Покупатель, Организация, СчетФактура, ИсправленныйСчетФактура, Событие, ДатаСобытия, 
			| ЗаписьДополнительногоЛиста, КорректируемыйПериод, СторнирующаяЗаписьДопЛиста, Регистратор, Период",
			"СуммаБезНДС, НДС");

		СформироватьДвиженияЗаписьКнигиПродаж(ТаблицаНДСНачислениеНДС, Движения, Отказ);
				
	КонецЕсли;	
		
КонецПроцедуры	

Процедура СформироватьПроводкиКорректировкиРеализацияТоваровУслуг(ТаблицаНДСТоварыУслуги, ТаблицаРеквизиты, Движения, Отказ)
	
	Параметры = ПодготовитьПараметрыПроводкиКорректировкиРеализацияТоваровУслуг(ТаблицаНДСТоварыУслуги, ТаблицаРеквизиты);
	
	Реквизиты = Параметры.Реквизиты[0];

	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	ВедетсяУчетНДСПоФЗ134 = ВедетсяУчетНДСПоФЗ134(Реквизиты.Период);
	
	Если НЕ ПлательщикНДС И НЕ ВедетсяУчетНДСПоФЗ134 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаНДС Из Параметры.ТаблицаНДСТоварыУслуги Цикл
		Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
			СуммаНДС = СтрокаНДС.СуммаНДС - СтрокаНДС.СуммаНДСДоИзменения;
			СчетНДС  = ?(СуммаНДС < 0, ПланыСчетов.Хозрасчетный.НДСПоУменьшениюСтоимостиРеализации, ПланыСчетов.Хозрасчетный.НДС);
			ВтораяПроводка = Ложь;
		Иначе
			Если ТипЗнч(СтрокаНДС.СчетФактура)=Тип("ДокументСсылка.КорректировкаРеализации") Тогда
				СписатьНа19Счет = (СтрокаНДС.СуммаНДСДоИзменения - СтрокаНДС.СуммаНДСДоКорректировки) < 0;
				СписатьНа19СчетИсправление = (СтрокаНДС.СуммаНДС - СтрокаНДС.СуммаНДСДоКорректировки) < 0;
				ВтораяПроводка = СписатьНа19Счет <> СписатьНа19СчетИсправление;
				СуммаНДС = ?(ВтораяПроводка, СтрокаНДС.СуммаНДСДоКорректировки - СтрокаНДС.СуммаНДСДоИзменения,
					СтрокаНДС.СуммаНДС - СтрокаНДС.СуммаНДСДоИзменения);
				СчетНДС = ?(СписатьНа19Счет И СуммаНДС < 0, 
					ПланыСчетов.Хозрасчетный.НДСПоУменьшениюСтоимостиРеализации, ПланыСчетов.Хозрасчетный.НДС);
			Иначе
				СуммаНДС = СтрокаНДС.СуммаНДС - СтрокаНДС.СуммаНДСДоИзменения;
				СчетНДС  = ПланыСчетов.Хозрасчетный.НДС;
				ВтораяПроводка = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		СформироватьПроводкуКорректировкиРеализацииТоваровУслуг(Реквизиты, СтрокаНДС, СуммаНДС, СчетНДС, Движения, Отказ);
		
		Если ВтораяПроводка Тогда
			СуммаНДС = СтрокаНДС.СуммаНДС - СтрокаНДС.СуммаНДСДоКорректировки;
			СчетНДС  = ?(СуммаНДС < 0, ПланыСчетов.Хозрасчетный.НДСПоУменьшениюСтоимостиРеализации, ПланыСчетов.Хозрасчетный.НДС);
			СформироватьПроводкуКорректировкиРеализацииТоваровУслуг(Реквизиты, СтрокаНДС, СуммаНДС, СчетНДС, Движения, Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыПроводкиКорректировкиРеализацияТоваровУслуг(ТаблицаНДСТоварыУслуги, ТаблицаРеквизиты)
	Параметры = Новый Структура;

	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "ПериодПроводки,"					// <Дата>
	+ "Период,"						// <Дата>
	+ "Регистратор,"					// <ДокументСсылка>
	+ "ВидОперации,"					// <Булево>
	+ "Контрагент,"						// <СправочникСсылка.Контрагенты>
	+ "Подразделение,"					// <Ссылка на справочник подразделений>
	+ "КорректироватьБУиНУ,"			// <Булево>
	+ "ОтчетностьПодписана,"			// <Булево>
	+ "ПрошлыйПериод,"					// <Булево>
	+ "ДокументРеализации,"             // <ДокументСсылка>
	+ "СтатьяПрочихДоходовИРасходов,"	// <СправочникСсылка.ПрочиеДоходыИРасходы>
	+ "Организация"						// <СправочникСсылка.Организации>
	;
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы таблицы движений по проводкам
	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"
	+ "Регистратор,"
	+ "СчетУчетаНДСПоРеализации,"
	+ "Субконто,"
	+ "Содержание,"
	+ "СчетФактура,"
	+ "Номенклатура,"
	+ "СтавкаНДС,"
	+ "СуммаНДС,"
	+ "СуммаНДСДоИзменения,"
	+ "СуммаНДСДоКорректировки"
	;
	
	Параметры.Вставить("ТаблицаНДСТоварыУслуги", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаНДСТоварыУслуги, СписокОбязательныхКолонок));

	
	Возврат Параметры;
	
КонецФункции

Процедура СформироватьПроводкуКорректировкиРеализацииТоваровУслуг(Реквизиты, СтрокаНДС, СуммаНДС, СчетНДС, Движения, Отказ)
	
	Если СуммаНДС = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Проводка = Движения.Хозрасчетный.Добавить();
	Проводка.Период       = Реквизиты.ПериодПроводки;
	Проводка.Организация  = Реквизиты.Организация;
	Проводка.Содержание   = "Корректировка реализации";
	
	КорреспонденцияСчетНДС = ?(СуммаНДС < 0 И Реквизиты.ПрошлыйПериод И Реквизиты.ОтчетностьПодписана, "Дт", "Кт");
	КорреспонденцияКорСчет = ?(КорреспонденцияСчетНДС = "Дт", "Кт", "Дт");
	
	Если Реквизиты.ПрошлыйПериод И Реквизиты.ОтчетностьПодписана Тогда
		КорСчетНДС = ?(КорреспонденцияКорСчет = "Кт", ПланыСчетов.Хозрасчетный.ПрочиеДоходы, ПланыСчетов.Хозрасчетный.ПрочиеРасходы);
	Иначе
		КорСчетНДС = СтрокаНДС.СчетУчетаНДСПоРеализации;
	КонецЕсли;
	
	Проводка["Счет"+КорреспонденцияКорСчет] = КорСчетНДС;
	БухгалтерскийУчет.УстановитьСубконто(КорСчетНДС, Проводка["Субконто"+КорреспонденцияКорСчет], 1, СтрокаНДС.Субконто);
	БухгалтерскийУчет.УстановитьСубконто(КорСчетНДС, Проводка["Субконто"+КорреспонденцияКорСчет], "СтавкиНДС", СтрокаНДС.СтавкаНДС);
	БухгалтерскийУчет.УстановитьСубконто(КорСчетНДС, Проводка["Субконто"+КорреспонденцияКорСчет], "РеализуемыеАктивы", СтрокаНДС.Номенклатура);
	БухгалтерскийУчет.УстановитьСубконто(КорСчетНДС, Проводка["Субконто"+КорреспонденцияКорСчет], "ПрочиеДоходыИРасходы", Реквизиты.СтатьяПрочихДоходовИРасходов);
	
	Проводка["Счет"+КорреспонденцияСчетНДС] = СчетНДС;
	БухгалтерскийУчет.УстановитьСубконто(СчетНДС, Проводка["Субконто"+КорреспонденцияСчетНДС], "Контрагенты", Реквизиты.Контрагент);
	БухгалтерскийУчет.УстановитьСубконто(СчетНДС, Проводка["Субконто"+КорреспонденцияСчетНДС], "СФПолученные", СтрокаНДС.СчетФактура);
	БухгалтерскийУчет.УстановитьСубконто(СчетНДС, Проводка["Субконто"+КорреспонденцияСчетНДС], "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
	БухгалтерскийУчет.УстановитьСубконто(СчетНДС, Проводка["Субконто"+КорреспонденцияСчетНДС], "СпособыУчетаНДС", Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету);
	
	СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
	Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
		Проводка.ПодразделениеДт = Реквизиты.Подразделение;
	КонецЕсли;
	
	СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
	Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
		Проводка.ПодразделениеКт = Реквизиты.Подразделение;
	КонецЕсли;

	Проводка.Сумма = ?(КорреспонденцияСчетНДС = "Кт", 1, -1) * СуммаНДС;

КонецПроцедуры

Процедура СформироватьДвиженияСторноНачисленияНДС(ТаблицаРеквизиты, ТаблицаНДСНачисленный, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыСторноНачисленияНДС(ТаблицаРеквизиты, ТаблицаНДСНачисленный);
		
	Если Параметры.Реквизиты.Количество() = 0
		ИЛИ Параметры.НДСНачисленный.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты		= Параметры.Реквизиты[0];
	
	ПлательщикНДС	= УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	ИспользуетсяПостановлениеНДС1137	= УчетНДСПереопределяемый.ИспользуетсяПостановлениеНДС1137(Реквизиты.Период);
	
	Если НЕ ПлательщикНДС ИЛИ НЕ ИспользуетсяПостановлениеНДС1137 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаНДСНачисленный Из Параметры.НДСНачисленный Цикл 
		
		// НДС Продажи
		Движение = Движения.НДСЗаписиКнигиПродаж.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		ЗаполнитьЗначенияСвойств(Движение, СтрокаНДСНачисленный);
		
		Движение.СуммаБезНДС = -СтрокаНДСНачисленный.СуммаБезНДС;
		Движение.НДС 		 = -СтрокаНДСНачисленный.НДС;

		// Хозрасчетный
		Движение = Движения.Хозрасчетный.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		
		Движение.Сумма	= -СтрокаНДСНачисленный.НДС;
		
		Если Реквизиты.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс Тогда
			
			Движение.СчетДт = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам; // 76.АВ
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "Контрагенты", СтрокаНДСНачисленный.Покупатель);
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "СФВыданные", СтрокаНДСНачисленный.СчетФактура);
            			
			Движение.СчетКт = ПланыСчетов.Хозрасчетный.НДС; // 68.02
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
			Движение.Содержание = "Сторнирование НДС по предоплате";
			
		Иначе
			
			Движение.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента; // 76.НА
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "Контрагенты", СтрокаНДСНачисленный.Покупатель);
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "Договоры", СтрокаНДСНачисленный.ДоговорКонтрагента);
			
			Движение.СчетКт = ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента; // 68.32
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "Контрагенты", СтрокаНДСНачисленный.Покупатель);
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "Договоры", СтрокаНДСНачисленный.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "ДокументыРасчетовСКонтрагентами", Реквизиты.ДокументОснование);
            Движение.Содержание = "Сторнирование НДС";
			
		КонецЕсли;			
			                                     		
	КонецЦикла;	
	
	Движения.НДСЗаписиКнигиПродаж.Записывать = Истина;
    Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры	

Функция ПодготовитьПараметрыСторноНачисленияНДС(ТаблицаРеквизиты, ТаблицаНДСНачисленный)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.НДСНачисленный
	
	СписокОбязательныхКолонок = ""
	+ "Организация,"					// <СправочникСсылка.Организации> - Организация
	+ "Покупатель,"						// <СправочникСсылка.Контрагенты> - Покупатель
	+ "СчетФактура,"					// <ДокументСсылка.*> - Счет-фактура
	+ "ВидЦенности,"					// <ПеречислениеСсылка.ВидыЦенностей> - Вид ценности
	+ "СтавкаНДС,"						// <ПеречислениеСсылка.СтавкиНДС> - Ставка НДС
	+ "ДатаОплаты,"						// <Дата> - Дата оплаты
	+ "ДокументОплаты,"					// <ДокументСсылка.*> - Документ оплаты
	+ "Событие,"						// <ПеречислениеСсылка.СобытияПоНДСПродажи> - Событие
	+ "ДатаСобытия,"					// <Дата> - Дата события
	+ "ЗаписьДополнительногоЛиста,"		// <Булево> - Запись дополнительного листа
	+ "КорректируемыйПериод,"			// <Дата> - Корректируемый период
	+ "СторнирующаяЗаписьДопЛиста,"		// <Булево> - Сторнирующая запись доп. листа
	+ "ДоговорКонтрагента,"				// <СправочникСсылка.ДоговорыКонтрагентов> - Договор контрагента
	+ "ИсправленныйСчетФактура,"		// <ДокументСсылка.*> - Исправленный счет-фактура
	+ "СуммаБезНДС,"					// <Число,15,2> - Сумма без НДС
	+ "НДС";							// <Число,15,2> - НДС

	Параметры.Вставить("НДСНачисленный", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаНДСНачисленный, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Регистратор,"			// <ДокументСсылка.*> - документ-регистратор движений
	+ "Организация,"			// <СправочникСсылка.Организации> - Организация
	+ "Период,"					// <Дата> - период движений - дата документа
	+ "ВидСчетаФактуры,"		// <ПеречислениеСсылка.ВидСчетаФактурыВыставленного> - вид счета-фактуры
	+ "ДокументОснование";		// <ДокументСсылка.*> - сторнируемый документ
                                 
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции

// Формирование движений при реализации основных средств
//
Процедура СформироватьДвиженияПередачаОС(ТаблицаОтгрузка, ТаблицаРеализация, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если ТаблицаРеализация.Количество() = 0
		И ТаблицаОтгрузка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	ВедетсяУчетНДСПоФЗ134 = ВедетсяУчетНДСПоФЗ134(Реквизиты.Период);
		
	Если НЕ ПлательщикНДС
		И ВедетсяУчетНДСПоФЗ134 Тогда
		
		ПодготовитьТаблицуДляНачисленияНДСНеплательщиком(ТаблицаОтгрузка);
		ПодготовитьТаблицуДляНачисленияНДСНеплательщиком(ТаблицаРеализация);

	КонецЕсли;
	
	НачислятьНДСПоОтгрузке = УчетнаяПолитика.НачислятьНДСПриПередачеНедвижимости(Реквизиты.Организация, Реквизиты.Период);
	
	Если Реквизиты.ПравоСобственностиПереходитПослеГосРегистрации И НачислятьНДСПоОтгрузке Тогда
		
		СформироватьДвиженияРеализацияТоваровУслуг(
			ТаблицаОтгрузка, Неопределено, Неопределено, ТаблицаРеквизиты, Движения, Отказ);
			
	ИначеЕсли НЕ Реквизиты.ПравоСобственностиПереходитПослеГосРегистрации Тогда
		
		СформироватьДвиженияРеализацияТоваровУслуг(
			ТаблицаРеализация, Неопределено, Неопределено, ТаблицаРеквизиты, Движения, Отказ);
			
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ, ВЫПОЛНЯЮЩИЕ ДВИЖЕНИЯ ПО РЕГИСТРАМ

//	ДВИЖЕНИЯ РЕГИСТРА "НДС ПО РЕАЛИЗАЦИИ 0%"

Процедура СформироватьДвиженияНДСРеализация0РеализацияТоваровУслуг(ТоварыУслуги, Реквизиты, Движения, Отказ)

	ТоварыУслуги.Индексы.Добавить("СтавкаНДС");
	ТоварыУслуги0 = ТоварыУслуги.Скопировать(
		Новый Структура("СтавкаНДС", Перечисления.СтавкиНДС.НДС0), "Контрагент,ВидЦенности,СтавкаНДС,СуммаБезНДСРуб,СуммаБУ");

	Если ТоварыУслуги0.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ТоварыУслуги0.Свернуть("Контрагент,ВидЦенности,СтавкаНДС", "СуммаБезНДСРуб,СуммаБУ");

	ТаблицаНДСРеализация0 = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("НДСРеализация0");

	Для каждого СтрокаТаблицы Из ТоварыУслуги0 Цикл

		СтрокаНДСРеализация0 = ТаблицаНДСРеализация0.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНДСРеализация0, СтрокаТаблицы);

		СтрокаНДСРеализация0.Покупатель  = СтрокаТаблицы.Контрагент;
		СтрокаНДСРеализация0.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСРуб;
		Если Реквизиты.Период < '20111001' Тогда
			// Начиная с 01.10.2011 налоговая база по НДС при подтверждении реализации со ставкой 0% 
			// должна определяться по курсу на дату реализации
			СтрокаНДСРеализация0.КурсоваяРазница = СтрокаТаблицы.СуммаБУ - СтрокаТаблицы.СуммаБезНДСРуб;
		КонецЕсли;
	КонецЦикла;

	ТаблицаНДСРеализация0.ЗаполнитьЗначения(Реквизиты.Период,      "Период");
	ТаблицаНДСРеализация0.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");
	ТаблицаНДСРеализация0.ЗаполнитьЗначения(Реквизиты.Регистратор, "СчетФактура");
	ТаблицаНДСРеализация0.ЗаполнитьЗначения(Реквизиты.Период,      "ДатаСобытия");
	ТаблицаНДСРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение, "Состояние");
	ТаблицаНДСРеализация0.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.Реализация, "Событие");

	Для каждого СтрокаТаблицы Из ТаблицаНДСРеализация0 Цикл
		Запись = Движения.НДСРеализация0.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
	КонецЦикла;

	Движения.НДСРеализация0.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСРеализация0ОказаниеУслуг(ТоварыУслуги, Реквизиты, Движения, Отказ)

	ТоварыУслуги.Индексы.Добавить("СтавкаНДС");
	ТоварыУслуги0 = ТоварыУслуги.Скопировать(
		Новый Структура("СтавкаНДС,ВыданСФ", Перечисления.СтавкиНДС.НДС0,Истина), "Контрагент,ВидЦенности,СтавкаНДС,СчетФактура,СуммаБезНДСРуб,СуммаБУ");

	Если ТоварыУслуги0.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ТоварыУслуги0.Свернуть("Контрагент,ВидЦенности,СтавкаНДС,СчетФактура", "СуммаБезНДСРуб,СуммаБУ");

	ТаблицаНДСРеализация0 = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("НДСРеализация0");
		
	Для каждого СтрокаТаблицы Из ТоварыУслуги0 Цикл

		СтрокаНДСРеализация0 = ТаблицаНДСРеализация0.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНДСРеализация0, СтрокаТаблицы);
		
		СтрокаНДСРеализация0.Покупатель  = СтрокаТаблицы.Контрагент;
		СтрокаНДСРеализация0.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСРуб;
		Если Реквизиты.Период < '20111001' Тогда
			// Начиная с 01.10.2011 налоговая база по НДС при подтверждении реализации со ставкой 0% 
			// должна определяться по курсу на дату реализации
			СтрокаНДСРеализация0.КурсоваяРазница = СтрокаТаблицы.СуммаБУ - СтрокаТаблицы.СуммаБезНДСРуб;
		КонецЕсли;
	КонецЦикла;

	ТаблицаНДСРеализация0.ЗаполнитьЗначения(Реквизиты.Период,      "Период");
	ТаблицаНДСРеализация0.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");
	ТаблицаНДСРеализация0.ЗаполнитьЗначения(Реквизиты.Период,      "ДатаСобытия");
	ТаблицаНДСРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение, "Состояние");
	ТаблицаНДСРеализация0.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.Реализация, "Событие");

	Для каждого СтрокаТаблицы Из ТаблицаНДСРеализация0 Цикл
		Запись = Движения.НДСРеализация0.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
	КонецЦикла;

	Движения.НДСРеализация0.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСРеализация0КурсовыеРазницы(Реквизиты, ТаблицаВзаиморасчетов, ТаблицаОстатков, Движения)

	ТаблицаОстатков.Колонки.Добавить("КурсоваяРазница", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));

	СтруктураОтбора = Новый Структура("Покупатель, СчетФактура");
	МассивСумм = Новый Массив;

	ЕстьСтавкаНДС = ТаблицаВзаиморасчетов.Колонки.Найти("СтавкаНДС") <> Неопределено;

	Для каждого СтрокаВзаиморасчетов Из ТаблицаВзаиморасчетов Цикл

		Если ЕстьСтавкаНДС
			И ЗначениеЗаполнено(СтрокаВзаиморасчетов.СтавкаНДС)
			И НЕ СтрокаВзаиморасчетов.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
			Продолжить;
		КонецЕсли;

		СтруктураОтбора.Покупатель = СтрокаВзаиморасчетов.Контрагент;
		СтруктураОтбора.СчетФактура = СтрокаВзаиморасчетов.ДокументРасчетов;
		СтрокиОстатков = ТаблицаОстатков.НайтиСтроки(СтруктураОтбора);

		СуммаОплатыКоэф = СтрокаВзаиморасчетов.ОстатокВзаиморасчетов/СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
		СуммаРеализации0 = 0;

		МассивСумм.Очистить();

		Для каждого СтрокаОстатков Из СтрокиОстатков Цикл
			СуммаРеализации0 = СуммаРеализации0 + СтрокаОстатков.Сумма;
			МассивСумм.Добавить(СтрокаОстатков.Сумма);
		КонецЦикла;

		Если СуммаРеализации0 = 0 Тогда
			Продолжить;
		КонецЕсли;

		КурсоваяРазница = СтрокаВзаиморасчетов.СуммаБУ - СуммаРеализации0 / СуммаОплатыКоэф;

		Если КурсоваяРазница = 0 Тогда
			Продолжить;
		КонецЕсли;

		МассивРаспределения = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(КурсоваяРазница, МассивСумм);

		Для К = 0 По МассивРаспределения.Количество() - 1 Цикл

			СтрокаОстатков = СтрокиОстатков[К];

			Движение = Движения.НДСРеализация0.ДобавитьПриход();

			ЗаполнитьЗначенияСвойств(Движение, СтрокаОстатков);

			Движение.Период 		 = Реквизиты.Период;
			Движение.ДатаСобытия 	 = Реквизиты.Период;
			Движение.КурсоваяРазница = МассивРаспределения[К];

		КонецЦикла;

	КонецЦикла;

	Движения.НДСРеализация0.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСРеализация0(ТаблицаДвижений, Реквизиты, Движения, Отказ)

	Если ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для каждого СтрокаТаблицы Из ТаблицаДвижений Цикл

		Запись = Движения.НДСРеализация0.ДобавитьПриход();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
        ЗаполнитьЗначенияСвойств(Запись, Реквизиты);
		
	КонецЦикла;

	Движения.НДСРеализация0.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСРеализация0НачислениеНДСПоРеализации0(Реквизиты, ТаблицаПоРеализации, Движения, Отказ)

	Для каждого СтрокаРеализации Из ТаблицаПоРеализации Цикл

		Движение = Движения.НДСРеализация0.ДобавитьРасход();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаРеализации);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);

	КонецЦикла;

	Движения.НДСРеализация0.Записывать = Истина;

КонецПроцедуры

// ДВИЖЕНИЯ РЕГИСТРА "НДС ПРЕДЪЯВЛЕННЫЙ РЕАЛИЗАЦИЯ 0%"

Процедура СформироватьДвиженияНДСПредъявленныйРеализация0(ТаблицаДвижений, Реквизиты, Движения, Отказ) Экспорт

	Если ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для каждого СтрокаТаблицы Из ТаблицаДвижений Цикл

		Запись = Движения.НДСПредъявленныйРеализация0.ДобавитьПриход();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
        ЗаполнитьЗначенияСвойств(Запись, Реквизиты);
		
	КонецЦикла;

	Движения.НДСПредъявленныйРеализация0.Записывать = Истина;

КонецПроцедуры


//	ДВИЖЕНИЯ РЕГИСТРА "НДС ЗАПИСИ КНИГИ ПРОДАЖ"

Процедура СформироватьДвиженияНДСНомераДокументовОплатыПоТекущимДвижениям(Реквизиты, Движения, Отказ)
	
	НомераПРД = Реквизиты.Регистратор.ПлатежноРасчетныеДокументы;
	
	Если НомераПРД.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движение = Движения.НДСЗаписиКнигиПродаж.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, Движения.НДСЗаписиКнигиПродаж[0], , "СуммаБезНДС, НДС");
	Движение.ДатаДокументаОплаты  = НомераПРД[0].ДатаДокумента;
	Движение.НомерДокументаОплаты = НомераПРД[0].НомерДокумента;
	
	Движения.НДСЗаписиКнигиПродаж.Записывать = Истина;
		
КонецПроцедуры

Процедура СформироватьДвиженияНДСЗаписиКнигиПродажРеализацияТоваровУслуг(ТоварыУслуги, Реквизиты, Движения, Отказ)

	Если ТоварыУслуги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ВерсияУчетаНДС	= УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	
	ЕстьВыставленСФ = ТоварыУслуги.Колонки.Найти("ВыставленСФ") <> Неопределено; 
	Если ЕстьВыставленСФ Тогда
		КомиссияПоПокупателям = НЕ (ТоварыУслуги.Количество() = 1 
			И ТоварыУслуги[0].Контрагент = ТоварыУслуги[0].Покупатель);
	Иначе
		КомиссияПоПокупателям = Ложь;
	КонецЕсли;
	
	ТаблицаЗаписиКнигиПродаж = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("НДСЗаписиКнигиПродаж");
	Для каждого СтрокаТаблицы Из ТоварыУслуги Цикл
		
		Если ВерсияУчетаНДС > 1 И СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если БухгалтерскийУчетВызовСервераПовтИсп.СчетОтноситсяКДеятельностиЕНВД(СтрокаТаблицы.СчетДоходов) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаЗаписиКнигиПродаж.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		Если КомиссияПоПокупателям Тогда
 			Если СтрокаТаблицы.ВыставленСФ Тогда
				НоваяСтрока.СчетФактура = СтрокаТаблицы.СчетФактура;
			Иначе
				НоваяСтрока.СчетФактура = Реквизиты.Регистратор;
			КонецЕсли;	
		Иначе
			НоваяСтрока.Покупатель = СтрокаТаблицы.Контрагент;
		КонецЕсли;

		НоваяСтрока.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСРуб;
		НоваяСтрока.НДС         = СтрокаТаблицы.СуммаНДСРуб;

	КонецЦикла;
	
	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");
	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Реквизиты.Период,      "Период");
	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Реквизиты.Период,      "ДатаСобытия");
	Если НЕ КомиссияПоПокупателям Тогда
		ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Реквизиты.Регистратор, "СчетФактура");
	КонецЕсли;
	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.Реализация, "Событие");
	// Для операций поступления/реализации договор не заполняется
	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Справочники.ДоговорыКонтрагентов.ПустаяСсылка(), "ДоговорКонтрагента");

	ТаблицаЗаписиКнигиПродаж.Свернуть("Период,Организация,Покупатель,СчетФактура,ВидЦенности,СтавкаНДС,
		|ДатаОплаты,ДокументОплаты,Событие,ДатаСобытия,ДоговорКонтрагента",
		"СуммаБезНДС,НДС");

	Для каждого СтрокаТаблицы Из ТаблицаЗаписиКнигиПродаж Цикл
		Запись = Движения.НДСЗаписиКнигиПродаж.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
	КонецЦикла;

	Движения.НДСЗаписиКнигиПродаж.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСЗаписиКнигиПродажОказаниеУслуг(ТоварыУслуги, Реквизиты, Движения, Отказ)

	Если ТоварыУслуги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВерсияУчетаНДС	= УчетНДСКлиентСервер.Версия(Реквизиты.Период);

	ТаблицаЗаписиКнигиПродаж = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("НДСЗаписиКнигиПродаж");

	Для каждого СтрокаТаблицы Из ТоварыУслуги Цикл
		
		Если ВерсияУчетаНДС > 1 И СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
			Продолжить;
		КонецЕсли;	

		НоваяСтрока = ТаблицаЗаписиКнигиПродаж.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		НоваяСтрока.Покупатель = СтрокаТаблицы.Контрагент;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетФактура) Тогда
			НоваяСтрока.СчетФактура = Реквизиты.Регистратор;
		КонецЕсли; 

		НоваяСтрока.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСРуб;
		НоваяСтрока.НДС         = СтрокаТаблицы.СуммаНДСРуб;

	КонецЦикла;

	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Реквизиты.Период,      "Период");
	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");
	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Реквизиты.Период,      "ДатаСобытия");
	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.Реализация, "Событие");
	// Для операций поступления/реализации договор не заполняется
	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Справочники.ДоговорыКонтрагентов.ПустаяСсылка(), "ДоговорКонтрагента");

	ТаблицаЗаписиКнигиПродаж.Свернуть("Период,Организация,Покупатель,СчетФактура,ВидЦенности,СтавкаНДС,
		|ДатаОплаты,ДокументОплаты,Событие,ДатаСобытия,ДоговорКонтрагента",
		"СуммаБезНДС,НДС");

	Для каждого СтрокаТаблицы Из ТаблицаЗаписиКнигиПродаж Цикл
		Запись = Движения.НДСЗаписиКнигиПродаж.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
	КонецЦикла;

	Движения.НДСЗаписиКнигиПродаж.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСЗаписиКнигиПродажВосстановлениеНДСВыданныйАванс(ТаблицаРеквизиты, ТаблицаАвансов, Движения, Отказ)

	Реквизиты = ТаблицаРеквизиты[0];

	Для каждого СтрокаТаблицы Из ТаблицаАвансов Цикл

		НоваяЗапись = Движения.НДСЗаписиКнигиПродаж.Добавить();

		ЗаполнитьЗначенияСвойств(НоваяЗапись, Реквизиты);

		НоваяЗапись.Организация = Реквизиты.Организация;
		НоваяЗапись.Покупатель 	= СтрокаТаблицы.Контрагент;
		НоваяЗапись.ДоговорКонтрагента = СтрокаТаблицы.ДоговорКонтрагента;

		НоваяЗапись.ВидЦенности    	= Перечисления.ВидыЦенностей.АвансыВыданные;
		НоваяЗапись.КодВидаОперации	= СтрокаТаблицы.КодВидаОперации;
		НоваяЗапись.Событие		   	= Перечисления.СобытияПоНДСПродажи.ВосстановлениеНДС;
		НоваяЗапись.СчетФактура    	= СтрокаТаблицы.СчетФактура;
		НоваяЗапись.ДокументОплаты 	= СтрокаТаблицы.СчетФактура;
		НоваяЗапись.ДатаОплаты	   	= СтрокаТаблицы.ДатаОплаты;
		НоваяЗапись.СтавкаНДС 	   	= СтрокаТаблицы.СтавкаНДС;
		НоваяЗапись.ДатаСобытия	   	= Реквизиты.Период;
		НоваяЗапись.СуммаБезНДС    	= СтрокаТаблицы.СуммаБезНДС;
		НоваяЗапись.НДС            	= СтрокаТаблицы.СуммаНДС;

		НоваяЗапись.ЗаписьДополнительногоЛиста = СтрокаТаблицы.ЗаписьДополнительногоЛиста;
		НоваяЗапись.КорректируемыйПериод       = СтрокаТаблицы.КорректируемыйПериод;
		НоваяЗапись.СторнирующаяЗаписьДопЛиста = СтрокаТаблицы.СторнирующаяЗаписьДопЛиста;

		НоваяЗапись.ИсправленныйСчетФактура = СтрокаТаблицы.ИсправленныйСчетФактура;
		
	КонецЦикла;

	Движения.НДСЗаписиКнигиПродаж.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСЗаписиКнигиПродажПолученныйАванс(ТаблицаРеквизиты, ТаблицаАвансов, Движения, Отказ)

	Реквизиты = ТаблицаРеквизиты[0];

	Для каждого СтрокаТаблицы Из ТаблицаАвансов Цикл

		Движение = Движения.НДСЗаписиКнигиПродаж.Добавить();

		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);

		Движение.Организация			 = Реквизиты.Организация;
		Движение.ВидЦенности			 = Перечисления.ВидыЦенностей.АвансыПолученные;
		Движение.Событие				 = Перечисления.СобытияПоНДСПродажи.ПолученАванс;
		Движение.СуммаБезНДС			 = СтрокаТаблицы.СуммаБезНДС;
		Движение.НДС					 = СтрокаТаблицы.СуммаНДС;
		Движение.Покупатель				 = СтрокаТаблицы.Контрагент;
		Движение.ДоговорКонтрагента		 = СтрокаТаблицы.ДоговорКонтрагента;
		Движение.СчетФактура			 = СтрокаТаблицы.СчетФактура;
		Движение.СтавкаНДС				 = СтрокаТаблицы.СтавкаНДС;
		Движение.ДокументОплаты			 = СтрокаТаблицы.ДокументОплаты;
		Движение.ДатаОплаты				 = СтрокаТаблицы.ДатаОплаты;
		Движение.ДатаСобытия        	 = СтрокаТаблицы.ДатаСобытия;
		Движение.ИсправленныйСчетФактура = СтрокаТаблицы.ИсправленныйСчетФактура;
				
		Движение.ЗаписьДополнительногоЛиста = СтрокаТаблицы.ЗаписьДополнительногоЛиста;
		Движение.КорректируемыйПериод       = СтрокаТаблицы.КорректируемыйПериод;
		Движение.СторнирующаяЗаписьДопЛиста = СтрокаТаблицы.СторнирующаяЗаписьДопЛиста;
             
	КонецЦикла;

	Движения.НДСЗаписиКнигиПродаж.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСЗаписиКнигиПродажРозничнаяПродажа(ТаблицаЦенности, Движения, Отказ)

	Для каждого СтрокаЦенности Из ТаблицаЦенности Цикл

		Движение = Движения.НДСЗаписиКнигиПродаж.Добавить();

		ЗаполнитьЗначенияСвойств(Движение, СтрокаЦенности);

		Движение.СчетФактура    = СтрокаЦенности.ДокументОснование;
		Движение.ДокументОплаты = СтрокаЦенности.ДокументОснование;

		Движение.ДатаОплаты     = СтрокаЦенности.Период;
		Движение.ДатаСобытия    = СтрокаЦенности.Период;

		Движение.ВидЦенности    = Перечисления.ВидыЦенностей.Товары;
		Движение.Событие        = Перечисления.СобытияПоНДСПродажи.Реализация;

	КонецЦикла;

	Движения.НДСЗаписиКнигиПродаж.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСЗаписиКнигиПродажСуммовыеРазницы(ТаблицаСуммовыеРазницы, ТаблицаРеквизиты, Движения, Отказ)

	Реквизиты = ТаблицаРеквизиты[0];

	Если Реквизиты.НаправлениеДвижения = "Поступление" Тогда
		ЗнакОстатков = 1;
	Иначе
		ЗнакОстатков = -1;
	КонецЕсли;

	Для каждого СтрокаРазниц Из ТаблицаСуммовыеРазницы Цикл

		СуммоваяРазница = СтрокаРазниц.Разница * ЗнакОстатков;

		Если СуммоваяРазница > 0 И СтрокаРазниц.НДС <> 0 
			И СтрокаРазниц.ДатаДокументаРасчетов < '20111001' Тогда

			Движение = Движения.НДСЗаписиКнигиПродаж.Добавить();

			ЗаполнитьЗначенияСвойств(Движение, Реквизиты);

			Движение.ДоговорКонтрагента = СтрокаРазниц.ДоговорКонтрагента;

			Движение.СчетФактура = Реквизиты.Регистратор;
			Движение.ДатаОплаты  = Реквизиты.Период;
			Движение.ДатаСобытия = Реквизиты.Период;
			Движение.Покупатель	 = СтрокаРазниц.Контрагент;
			Движение.ВидЦенности = Перечисления.ВидыЦенностей.СуммыСвязанныеСРасчетамиПоОплате;
			Движение.Событие     = Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате;
			Движение.СтавкаНДС	 = СтрокаРазниц.СтавкаНДС;
			Движение.СуммаБезНДС = СтрокаРазниц.Разница - СтрокаРазниц.НДС;
			Движение.НДС 		 = СтрокаРазниц.НДС;

		КонецЕсли;

	КонецЦикла;

	Движения.НДСЗаписиКнигиПродаж.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСЗаписиКнигиПродажНачисленНДСНалоговымАгентом(Реквизиты, ТаблицаАвансы, Движения, Отказ)

	Для каждого СтрокаТаблицы Из ТаблицаАвансы Цикл

		Движение = Движения.НДСЗаписиКнигиПродаж.Добавить();

		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);

		Движение.Организация 	    = Реквизиты.Организация;
		Движение.ДоговорКонтрагента = Реквизиты.ДоговорКонтрагента;
		Движение.Покупатель 		= Реквизиты.Контрагент;
		Движение.ДоговорКонтрагента = Реквизиты.ДоговорКонтрагента;
		Движение.СчетФактура 	    = Реквизиты.ДокументОснование;
		Движение.ДокументОплаты 	= Реквизиты.ДокументОснование;
		Движение.ИсправленныйСчетФактура  = СтрокаТаблицы.ИсправленныйСчетФактура;
		
		Движение.ЗаписьДополнительногоЛиста = СтрокаТаблицы.ЗаписьДополнительногоЛиста;
		Движение.КорректируемыйПериод       = СтрокаТаблицы.КорректируемыйПериод;
		Движение.СторнирующаяЗаписьДопЛиста = СтрокаТаблицы.СторнирующаяЗаписьДопЛиста;
        
		Движение.ДатаОплаты  = СтрокаТаблицы.ДатаОплаты;
		Движение.ВидЦенности = СтрокаТаблицы.ВидЦенности;
		Движение.СтавкаНДС   = СтрокаТаблицы.СтавкаНДС;
		Движение.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДС;
		Движение.НДС 		 = СтрокаТаблицы.СуммаНДС;
		Движение.Событие 	 = Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате;
		Движение.ДатаСобытия = Реквизиты.Период;

	КонецЦикла;

	Движения.НДСЗаписиКнигиПродаж.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСЗаписиКнигиПродажРеализацияТоваровУслугКомитентаНерезидента(Реквизиты, ТаблицаДвижений, Движения, Отказ)
	
	Для каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		
		Движение = Движения.НДСЗаписиКнигиПродаж.Добавить();
		
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		
		Движение.Покупатель			= СтрокаТаблицы.Покупатель;
		Движение.СчетФактура		= Реквизиты.Регистратор;
		
		Движение.ВидЦенности		= Перечисления.ВидыЦенностей.НалоговыйАгентКомитент;
		Движение.СтавкаНДС			= СтрокаТаблицы.СтавкаНДС;
		Движение.СуммаБезНДС		= СтрокаТаблицы.Сумма;
		Движение.НДС 				= СтрокаТаблицы.НДС;
		Движение.Событие			= Перечисления.СобытияПоНДСПродажи.Реализация;
		Движение.ДатаСобытия		= Реквизиты.Период;
		Движение.ДоговорКонтрагента	= Неопределено;
		
	КонецЦикла;
	
	Движения.НДСЗаписиКнигиПродаж.Записывать = Истина;
	
КонецПроцедуры

Процедура СформироватьДвиженияНДСЗаписиКнигиПродажНачислениеНДСПоРеализации(ТаблицаПоРеализации, Движения, Отказ)

	Для каждого СтрокаРеализации Из ТаблицаПоРеализации Цикл

		Движение = Движения.НДСЗаписиКнигиПродаж.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаРеализации);

	КонецЦикла;

	Движения.НДСЗаписиКнигиПродаж.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСЗаписиКнигиПродажНачислениеНДСпоСМРХозспособом(Реквизиты, СМРХозспособом, Движения, Отказ)

	Для каждого СтрокаСМР Из СМРХозспособом Цикл

		Движение = Движения.НДСЗаписиКнигиПродаж.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		ЗаполнитьЗначенияСвойств(Движение, СтрокаСМР);

	КонецЦикла;

	Движения.НДСЗаписиКнигиПродаж.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСЗаписиКнигиПродажВозвратТоваровПоставщику(ТоварыУслуги, Реквизиты, Движения, Отказ)

	Если ТоварыУслуги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ТаблицаЗаписиКнигиПродаж = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("НДСЗаписиКнигиПродаж");

	Для каждого СтрокаТаблицы Из ТоварыУслуги Цикл
		
		НоваяСтрока = ТаблицаЗаписиКнигиПродаж.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		НоваяСтрока.Покупатель = СтрокаТаблицы.Контрагент;

		НоваяСтрока.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСРуб;
		НоваяСтрока.НДС         = СтрокаТаблицы.СуммаНДСРуб;

	КонецЦикла;

	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Реквизиты.Период,      "Период");
	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");
	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Реквизиты.Регистратор, "СчетФактура");
	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Реквизиты.Период,      "ДатаСобытия");
	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.Реализация, "Событие");
	// Для операций поступления/реализации договор не заполняется
	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Справочники.ДоговорыКонтрагентов.ПустаяСсылка(), "ДоговорКонтрагента");

	ТаблицаЗаписиКнигиПродаж.Свернуть("Период,Организация,Покупатель,СчетФактура,ВидЦенности,СтавкаНДС,
		|ДатаОплаты,ДокументОплаты,Событие,ДатаСобытия,ДоговорКонтрагента",
		"СуммаБезНДС,НДС");

	Для каждого СтрокаТаблицы Из ТаблицаЗаписиКнигиПродаж Цикл
		Запись = Движения.НДСЗаписиКнигиПродаж.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
	КонецЦикла;

	Движения.НДСЗаписиКнигиПродаж.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСЗаписиКнигиПродажВозвратТоваровОтПокупателя(ТоварыУслуги, Реквизиты, Движения, Отказ)

	Если ТоварыУслуги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ВерсияУчетаНДС	= УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	
	ТаблицаЗаписиКнигиПродаж = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("НДСЗаписиКнигиПродаж");

	Для каждого СтрокаТаблицы Из ТоварыУслуги Цикл
		
		Если ВерсияУчетаНДС > 1 И СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
			Продолжить;
		КонецЕсли;			

		НоваяСтрока = ТаблицаЗаписиКнигиПродаж.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
		НоваяСтрока.СуммаБезНДС	= -НоваяСтрока.СуммаБезНДС;
		НоваяСтрока.НДС			= -НоваяСтрока.НДС;

	КонецЦикла;
	
	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Реквизиты.Период,      "Период");
	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");
	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Реквизиты.Период,      "ДатаСобытия");
	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.Реализация, "Событие");
	// Для операций поступления/реализации договор не заполняется
	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Справочники.ДоговорыКонтрагентов.ПустаяСсылка(), "ДоговорКонтрагента");

	ТаблицаЗаписиКнигиПродаж.Свернуть("Период,Организация,Покупатель,СчетФактура,ВидЦенности,СтавкаНДС,
		|ДатаОплаты,ДокументОплаты,Событие,ДатаСобытия,ДоговорКонтрагента",
		"СуммаБезНДС,НДС");

	Для каждого СтрокаТаблицы Из ТаблицаЗаписиКнигиПродаж Цикл
		Запись = Движения.НДСЗаписиКнигиПродаж.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
	КонецЦикла;

	Движения.НДСЗаписиКнигиПродаж.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСЗаписиКнигиПродаж(Реквизиты, ТаблицаДвижений, Движения, Отказ)

	Если ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		
		Запись = Движения.НДСЗаписиКнигиПродаж.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
		ЗаполнитьЗначенияСвойств(Запись, Реквизиты);
		
	КонецЦикла;

	Движения.НДСЗаписиКнигиПродаж.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСНомераДокументовОплаты(ТаблицаДвижений, Движения, Отказ) Экспорт

	Если ТаблицаДвижений = Неопределено
		ИЛИ ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		
		Запись = Движения.НДСЗаписиКнигиПродаж.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
					
	КонецЦикла;

	Движения.НДСЗаписиКнигиПродаж.Записывать = Истина;

КонецПроцедуры

//	ДВИЖЕНИЯ РЕГИСТРА "НДС ЗАПИСИ КНИГИ ПОКУПОК"

Процедура СформироватьДвиженияНДСЗаписиКнигиПокупокПоступлениеТоваровУслуг(ДанныеДвижений, Движения, Отказ)

	Если ДанныеДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ДанныеДвижений Цикл

		Запись = Движения.НДСЗаписиКнигиПокупок.Добавить();

		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
		Запись.Событие = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету;

	КонецЦикла;

	Движения.НДСЗаписиКнигиПокупок.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСЗаписиКнигиПокупокВыданныйАванс(ТаблицаРеквизиты, ТаблицаАвансов, Движения, Отказ)

	Если ТаблицаАвансов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];

	Для каждого СтрокаТаблицы Из ТаблицаАвансов Цикл

		НоваяЗапись = Движения.НДСЗаписиКнигиПокупок.Добавить();

		ЗаполнитьЗначенияСвойств(НоваяЗапись, Реквизиты);
		ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТаблицы);
		
		НоваяЗапись.Поставщик   = СтрокаТаблицы.Контрагент;
		НоваяЗапись.ВидЦенности = Перечисления.ВидыЦенностей.АвансыВыданные;
		НоваяЗапись.Событие     = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету;
		НоваяЗапись.НДС         = СтрокаТаблицы.СуммаНДС;

	КонецЦикла;

	Движения.НДСЗаписиКнигиПокупок.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСЗаписиКнигиПокупокПолученныйАванс(ТаблицаРеквизиты, ТаблицаАвансов, Движения, Отказ)

	Реквизиты = ТаблицаРеквизиты[0];

	Для каждого СтрокаТаблицы Из ТаблицаАвансов Цикл

		НоваяЗапись = Движения.НДСЗаписиКнигиПокупок.Добавить();

		ЗаполнитьЗначенияСвойств(НоваяЗапись, Реквизиты);

		НоваяЗапись.Организация = Реквизиты.Организация;
		НоваяЗапись.Поставщик 	= СтрокаТаблицы.Контрагент;
		НоваяЗапись.ДоговорКонтрагента = СтрокаТаблицы.ДоговорКонтрагента;

		НоваяЗапись.ВидЦенности  	= СтрокаТаблицы.ВидЦенности;
		НоваяЗапись.КодВидаОперации	= СтрокаТаблицы.КодВидаОперации;
		НоваяЗапись.Событие		 	= СтрокаТаблицы.Событие;
		НоваяЗапись.СчетФактура		= СтрокаТаблицы.СчетФактура;
		НоваяЗапись.СтавкаНДС 	 	= СтрокаТаблицы.СтавкаНДС;
		НоваяЗапись.ДатаСобытия		= СтрокаТаблицы.ДатаСобытия;
		НоваяЗапись.ДатаОплаты	 	= СтрокаТаблицы.ДатаОплаты;
		НоваяЗапись.СуммаБезНДС  	= СтрокаТаблицы.СуммаБезНДС;
		НоваяЗапись.НДС          	= СтрокаТаблицы.СуммаНДС;

		НоваяЗапись.ЗаписьДополнительногоЛиста = СтрокаТаблицы.ЗаписьДополнительногоЛиста;
		НоваяЗапись.КорректируемыйПериод       = СтрокаТаблицы.КорректируемыйПериод;

		НоваяЗапись.ИсправленныйСчетФактура = СтрокаТаблицы.ИсправленныйСчетФактура;
		
	КонецЦикла;

	Движения.НДСЗаписиКнигиПокупок.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСЗаписиКнигиПокупок(ДанныеДвижений, Движения, Отказ)

	Для каждого СтрокаТаблицы Из ДанныеДвижений Цикл

		Запись = Движения.НДСЗаписиКнигиПокупок.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);

	КонецЦикла;

	Движения.НДСЗаписиКнигиПокупок.Записывать = Истина;

КонецПроцедуры

//	ДВИЖЕНИЯ РЕГИСТРА "НДС ПРЕДЪЯВЛЕННЫЙ"

Процедура СформироватьДвиженияНДСПредъявленныйПоступлениеТоваровУслуг(ДанныеДвижений, Движения, Отказ) Экспорт

	СписаниеНДСБезСчетаФактуры = ДанныеДвижений.Колонки.Найти("ПредъявленСчетФактура") <> Неопределено;
	
	Если ДанныеДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для каждого СтрокаТаблицы Из ДанныеДвижений Цикл

		Если СписаниеНДСБезСчетаФактуры 
			И Не СтрокаТаблицы.ПредъявленСчетФактура
			И Не СтрокаТаблицы.НДСВключенВСтоимость Тогда
			Продолжить;
		КонецЕсли;
		
		Запись = Движения.НДСПредъявленный.ДобавитьПриход();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
		Запись.Событие = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком;

	КонецЦикла;

	Движения.НДСПредъявленный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСПредъявленныйВключениеВСтоимость(ДанныеДвижений, Движения, НДСОтПодотчетногоЛица = Ложь, Отказ) Экспорт

	Если ДанныеДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для каждого СтрокаТаблицы Из ДанныеДвижений Цикл

		Если НДСОтПодотчетногоЛица И Не СтрокаТаблицы.НДСВключенВСтоимость Тогда 
			Продолжить;	
		КонецЕсли;
		
		Запись = Движения.НДСПредъявленный.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
		
		Запись.ВидДвижения = ВидДвиженияНакопления.Расход;
		Запись.Событие = Перечисления.СобытияПоНДСПокупки.НДСВключенВСтоимость;

	КонецЦикла;

	Движения.НДСПредъявленный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСПредъявленныйВыданныйАванс(ТаблицаРеквизиты, ТаблицаАвансов, Движения, Отказ)

	Если ТаблицаАвансов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];

	Для каждого СтрокаТаблицы Из ТаблицаАвансов Цикл

		НоваяЗапись = Движения.НДСПредъявленный.ДобавитьПриход();

		ЗаполнитьЗначенияСвойств(НоваяЗапись, Реквизиты);

		НоваяЗапись.Организация = Реквизиты.Организация;
		НоваяЗапись.Поставщик 	= СтрокаТаблицы.Контрагент;
		НоваяЗапись.ДоговорКонтрагента = СтрокаТаблицы.ДоговорКонтрагента;

		НоваяЗапись.СчетФактура  = СтрокаТаблицы.СчетФактура;
		НоваяЗапись.ВидЦенности  = Перечисления.ВидыЦенностей.АвансыВыданные;
		НоваяЗапись.Событие		 = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком;
		НоваяЗапись.ДатаСобытия	 = Реквизиты.Период;
		НоваяЗапись.СтавкаНДС 	 = СтрокаТаблицы.СтавкаНДС;
		НоваяЗапись.СуммаБезНДС  = СтрокаТаблицы.СуммаБезНДС;
		НоваяЗапись.НДС          = СтрокаТаблицы.СуммаНДС;

	КонецЦикла;

	Движения.НДСПредъявленный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСПредъявленныйВыданныйАвансРасход(ТаблицаРеквизиты, ТаблицаАвансов, Движения, Отказ)

	Реквизиты = ТаблицаРеквизиты[0];

	Для каждого СтрокаТаблицы Из ТаблицаАвансов Цикл

		НоваяЗапись = Движения.НДСПредъявленный.ДобавитьРасход();

		ЗаполнитьЗначенияСвойств(НоваяЗапись, Реквизиты);

		НоваяЗапись.Организация = Реквизиты.Организация;
		НоваяЗапись.Поставщик 	= СтрокаТаблицы.Контрагент;
		НоваяЗапись.ДоговорКонтрагента = СтрокаТаблицы.ДоговорКонтрагента;

		НоваяЗапись.СчетФактура  = СтрокаТаблицы.СчетФактура;
		НоваяЗапись.ВидЦенности  = Перечисления.ВидыЦенностей.АвансыВыданные;
		НоваяЗапись.Событие		 = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком;
		НоваяЗапись.ДатаСобытия	 = СтрокаТаблицы.ДатаСобытия;
		НоваяЗапись.СтавкаНДС 	 = СтрокаТаблицы.СтавкаНДС;
		НоваяЗапись.СуммаБезНДС  = СтрокаТаблицы.СуммаБезНДС;
		НоваяЗапись.НДС          = СтрокаТаблицы.СуммаНДС;
		
		НоваяЗапись.ИсправленныйСчетФактура = СтрокаТаблицы.ИсправленныйСчетФактура;

	КонецЦикла;

	Движения.НДСПредъявленный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСПредъявленныйВычетНДС(ТаблицаДвижений, Движения, Списание = Ложь, Отказ)

	Если ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для каждого СтрокаТаблицы Из ТаблицаДвижений Цикл

		Если Списание Тогда 
			Запись = Движения.НДСПредъявленный.ДобавитьПриход();	
		Иначе
			Запись = Движения.НДСПредъявленный.ДобавитьРасход();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
		
		Запись.СуммаБезНДС 	= ?(Списание, - СтрокаТаблицы.СуммаБезНДС, СтрокаТаблицы.СуммаБезНДС);
		Запись.НДС			= ?(Списание, - СтрокаТаблицы.НДС, СтрокаТаблицы.НДС);
		
		Если НЕ ЗначениеЗаполнено(Запись.Событие) Тогда
			Запись.Событие = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком;
		КонецЕсли;
		
		Если СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентАренда
			ИЛИ СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы
			ИЛИ СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент
			ИЛИ СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества Тогда
		
			Запись.ДатаОплаты = '00010101';
		
		КонецЕсли; 

	КонецЦикла;

	Движения.НДСПредъявленный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСПредъявленныйНачислениеНДСпоСМРХозспособом(Реквизиты, СМРХозспособом, Движения, Отказ)

	Для каждого СтрокаТаблицы Из СМРХозспособом Цикл

		Движение = Движения.НДСПредъявленный.ДобавитьПриход();
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);

	КонецЦикла;

	Движения.НДСПредъявленный.Записывать = Истина;

КонецПроцедуры

//  РЕГИСТРАЦИЯ ДОКУМЕНТОВ

Функция ПодготовитьЗаписьЖурналаУчетаСчетовФактур(ТаблицаРеквизиты) Экспорт

	Если ТаблицаРеквизиты = Неопределено
		ИЛИ ТаблицаРеквизиты.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗаписиЖурналаУчетаСчетовФактур	= ТаблицаРеквизиты.Скопировать();
	                                                          
	КолонкиГруппировки = ""
	+ "Период,"											// <Дата> - период движений - дата документа
	+ "Регистратор,"									// <ДокументСсылка.*> - документ-регистратор движений
	+ "Организация,"									// <СправочникСсылка.Организации> - организация
	+ "Контрагент,"										// <СправочникСсылка.Контрагенты, СправочникСсылка.Организации> - контрагент
	+ "КППКонтрагента,"									// <Строка> - КПП контрагента, может отличаться от Контрагент.КПП
	+ "Продавец,"										// <СправочникСсылка.Контрагенты> - от чьего имени составлен счет-фактура
	+ "Посредник,"										// <СправочникСсылка.Контрагенты> - посредник(комиссионер,агент)
	+ "СчетФактура,"									// <ДокументСсылка.*> - Счет-фактура
	+ "ЧастьЖурнала,"									// <ПеречислениеСсылка.ЧастиЖурналаУчетаСчетовФактур> - Часть журнала
	+ "ДатаВыставленияПолучения,"						// <Дата> - Дата выставления/получения
	+ "КодСпособаВыставленияПолучения,"					// <Число,1,0> - Код способа выставления/получения
	+ "КодВидаОперации,"								// <Строка,10> - код вида операции
	+ "КодВидаОперацииКомиссия,"						// <Строка,10> - код вида операции для журнала с 2015 года
	+ "НомерСчетаФактуры,"								// <Строка,15> - Номер счета-фактуры
	+ "ДатаСчетаФактуры,"								// <Дата> - Дата счета-фактуры
	+ "НомерКорректировочногоСчетаФактуры,"				// <Строка,15> - Номер корректировочного счета-фактуры
	+ "ДатаКорректировочногоСчетаФактуры,"				// <Дата> - Дата корректировочного счета-фактуры
	+ "НомерИсправления,"								// <Строка,11> - Номер исправления
	+ "ДатаИсправления,"								// <Дата> - Дата исправления
	+ "Валюта,"											// <СправочникСсылка.Валюты> - валюта документа
	+ "ПоСтавкеБезНДС,"									// <Булево> - По ставке "Без НДС"
	+ "СчетФактураНеВыставляется,"						// <Булево> - Счет-фактура не выставляется
	+ "НомерИсправленияКорректировочногоСчетаФактуры,"	// <Строка,10> - Номер исправления корректировочного счета-фактуры
	+ "ДатаИсправленияКорректировочногоСчетаФактуры,"	// <Дата> - Дата исправления корректировочного счета-фактуры
	+ "Субкомиссионер,"									// <СправочникСсылка.Контрагенты> - Субкомиссионер
	+ "СчетФактураВыданныйПокупателю,"					// <ДокументСсылка.СчетФактураВыданный> - Счет-фактура выданный покупателю при реализации товаров комитента
	+ "КодВидаСделки,"									// <Строка, 2> - Код вида сделки
	+ "НомерСчетаФактурыПродавца,"						// <Строка, 50> - Номер счета-фактуры продавца
	+ "ИндексСтроки";									// <Число,10,0> - Служебное измерение для сводного корректировочного счета-фактуры
	
	КолонкиСуммирования = ""
	+ "СуммаПоСчетуФактуре,"							// <Число,15,2> - Сумма по счету-фактуре с НДС
	+ "СуммаПоСчетуФактуреКомиссия,"					// <Число,15,2> - Сумма по счету-фактуре с НДС по комиссионным операциям
	+ "СуммаНДС,"										// <Число,15,2> - Сумма НДС
	+ "СуммаНДСКомиссия,"								// <Число,15,2> - Сумма НДС по комиссии
	+ "СуммаПоСчетуФактуреРазницаУменьшение,"			// <Число,15,2> - Сумма по счету-фактуре (разница к уменьшению)
	+ "СуммаПоСчетуФактуреРазницаУменьшениеКомиссия,"	// <Число,15,2> - Сумма по счету-фактуре (разница к уменьшению) по комиссионным товарам
	+ "СуммаПоСчетуФактуреРазницаУвеличение,"			// <Число,15,2> - Сумма по счету фактуре (разница к доплате)
	+ "СуммаПоСчетуФактуреРазницаУвеличениеКомиссия,"	// <Число,15,2> - Сумма по счету фактуре (разница к доплате) по комиссионным товарам
	+ "СуммаНДСРазницаУменьшение,"						// <Число,15,2> - Сумма НДС (разница к уменьшению)
	+ "СуммаНДСРазницаУменьшениеКомиссия,"				// <Число,15,2> - Сумма НДС (разница к уменьшению) по комиссионным товарам
	+ "СуммаНДСРазницаУвеличение,"						// <Число,15,2> - Сумма НДС (разница к доплате)
	+ "СуммаНДСРазницаУвеличениеКомиссия";				// <Число,15,2> - Сумма НДС (разница к доплате) по комиссионным товарам
	
	ЗаписиЖурналаУчетаСчетовФактур.Свернуть(КолонкиГруппировки, КолонкиСуммирования);
	
	Возврат ЗаписиЖурналаУчетаСчетовФактур;	

КонецФункции

Процедура СформироватьДвиженияЖурналУчетаСчетовФактурРегистрация(ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыЖурналУчетаСчетовФактурРегистрация(ТаблицаРеквизиты);
	
	Если Параметры.ЗаписьЖурнала.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписиЖурнала = Параметры.ЗаписьЖурнала;
	
	Для каждого ЗаписьЖурнала Из ЗаписиЖурнала Цикл 
		
		ИспользуетсяПостановлениеНДС1137 = УчетНДСПереопределяемый.ИспользуетсяПостановлениеНДС1137(ЗаписьЖурнала.Период);
		
		Если НЕ ИспользуетсяПостановлениеНДС1137 Тогда
			Возврат;
		КонецЕсли;
		
		Если ЗаписьЖурнала.ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры Тогда
			ЗаписьЖурнала.НомерСчетаФактуры = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ЗаписьЖурнала.НомерСчетаФактуры, Истина, Ложь);	
		КонецЕсли;
		
		Если ЗаписьЖурнала.Период >= '20150101'
			И (ЗаписьЖурнала.СуммаПоСчетуФактуреКомиссия <> 0
			ИЛИ ЗаписьЖурнала.СуммаПоСчетуФактуреРазницаУменьшениеКомиссия <> 0
			ИЛИ ЗаписьЖурнала.СуммаПоСчетуФактуреРазницаУвеличениеКомиссия <> 0) Тогда 
			КодВидаОперацииКомиссия = "";
			Если СтрДлина(ЗаписьЖурнала.КодВидаОперации) >= 4 Тогда 
				Если Найти(ЗаписьЖурнала.КодВидаОперации, "04") > 0 Тогда
					КодВидаОперацииКомиссия = "04";
				ИначеЕсли Найти(ЗаписьЖурнала.КодВидаОперации, "05") > 0 Тогда	
					КодВидаОперацииКомиссия  = "05"
				ИначеЕсли Найти(ЗаписьЖурнала.КодВидаОперации, "13") > 0 Тогда	
					КодВидаОперацииКомиссия  = "13"
				КонецЕсли;
			Иначе
				КодВидаОперацииКомиссия  = ЗаписьЖурнала.КодВидаОперации;
			КонецЕсли;
			Если ЗаписьЖурнала.СуммаПоСчетуФактуреРазницаУменьшениеКомиссия Тогда
				КодВидаОперацииКомиссия  = КодВидаОперацииКомиссия + ";18";
			КонецЕсли;
			ЗаписьЖурнала.КодВидаОперацииКомиссия  = КодВидаОперацииКомиссия;
		КонецЕсли;	
		
		Движение = Движения.ЖурналУчетаСчетовФактур.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, ЗаписьЖурнала);	
		
	КонецЦикла;
	
	Движения.ЖурналУчетаСчетовФактур.Записывать	= Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыЖурналУчетаСчетовФактурРегистрация(ТаблицаРеквизиты)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ЗаписьЖурнала
	
	СписокОбязательныхКолонок = ""
		+ "Период,"											// <Дата> - период движений - дата документа
		+ "Регистратор,"									// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация,"									// <СправочникСсылка.Организации> - организация
		+ "Контрагент,"										// <СправочникСсылка.Контрагенты, СправочникСсылка.Организации> - контрагент
		+ "КППКонтрагента,"									// <Строка> - КПП контрагента, может отличаться от Контрагент.КПП
															// 	если сделка осуществляется через обособленное подразделение контрагента
		+ "Продавец,"										// <СправочникСсылка.Контрагенты> - от чьего имени составлен счет-фактура
		+ "Посредник,"										// <СправочникСсылка.Контрагенты> - посредник
		+ "СчетФактура,"									// <ДокументСсылка.*> - Счет-фактура
		+ "ЧастьЖурнала,"									// <ПеречислениеСсылка.ЧастиЖурналаУчетаСчетовФактур> - Часть журнала
		+ "ДатаВыставленияПолучения,"						// <Дата> - Дата выставления/получения
		+ "КодСпособаВыставленияПолучения,"					// <Число,1,0> - Код способа выставления/получения
		+ "КодВидаОперации,"								// <Строка,10> - код вида операции
		+ "КодВидаОперацииКомиссия,"						// <Строка,10> - код вида операции для журнала с 2015 года
		+ "НомерСчетаФактуры,"								// <Строка,15> - Номер счета-фактуры
		+ "ДатаСчетаФактуры,"								// <Дата> - Дата счета-фактуры
		+ "НомерКорректировочногоСчетаФактуры,"				// <Строка,15> - Номер корректировочного счета-фактуры
		+ "ДатаКорректировочногоСчетаФактуры,"				// <Дата> - Дата корректировочного счета-фактуры
		+ "НомерИсправления,"								// <Строка,11> - Номер исправления
		+ "ДатаИсправления,"								// <Дата> - Дата исправления
		+ "Валюта,"											// <СправочникСсылка.Валюты> - валюта документа
		+ "СуммаПоСчетуФактуре,"							// <Число,15,2> - Сумма по счету-фактуре с НДС
		+ "СуммаПоСчетуФактуреКомиссия,"					// <Число,15,2> - Сумма по счету-фактуре с НДС по комиссионным операциям
		+ "СуммаНДС,"										// <Число,15,2> - Сумма НДС
		+ "СуммаНДСКомиссия,"								// <Число,15,2> - Сумма НДС по комиссионным товарам
		+ "СуммаПоСчетуФактуреРазницаУменьшение,"			// <Число,15,2> - Сумма по счету-фактуре (разница к уменьшению)
		+ "СуммаПоСчетуФактуреРазницаУменьшениеКомиссия,"	// <Число,15,2> - Сумма по счету-фактуре (разница к уменьшению) по комиссионным товарам
		+ "СуммаПоСчетуФактуреРазницаУвеличение,"			// <Число,15,2> - Сумма по счету фактуре (разница к доплате)
		+ "СуммаПоСчетуФактуреРазницаУвеличениеКомиссия,"	// <Число,15,2> - Сумма по счету фактуре (разница к доплате) по комиссионным товарам
		+ "СуммаНДСРазницаУменьшение,"						// <Число,15,2> - Сумма НДС (разница к уменьшению)
		+ "СуммаНДСРазницаУменьшениеКомиссия,"				// <Число,15,2> - Сумма НДС (разница к уменьшению) по комиссионным товарам
		+ "СуммаНДСРазницаУвеличение,"						// <Число,15,2> - Сумма НДС (разница к доплате)
		+ "СуммаНДСРазницаУвеличениеКомиссия,"				// <Число,15,2> - Сумма НДС (разница к доплате) по комиссионным товарам
		+ "ПоСтавкеБезНДС,"									// <Булево> - По ставке "Без НДС"
		+ "СчетФактураНеВыставляется,"						// <Булево> - Счет-фактура не выставляется
	    + "НомерИсправленияКорректировочногоСчетаФактуры,"	// <Строка,10> - Номер исправления корректировочного счета-фактуры
		+ "ДатаИсправленияКорректировочногоСчетаФактуры,"	// <Дата> - Дата исправления корректировочного счета-фактуры
		+ "Субкомиссионер,"									// <СправочникСсылка.Контрагенты> - Субкомиссионер
		+ "СчетФактураВыданныйПокупателю,"					// <ДокументСсылка.СчетФактураВыданный> - Счет-фактура выданный покупателю при реализации товаров комитента
		+ "КодВидаСделки,"									// <Строка, 2> - Код вида сделки
		+ "НомерСчетаФактурыПродавца,"						// <Строка, 50> - Номер счета-фактуры продавца
		+ "ИндексСтроки";									// <Число,10,0> - Служебное измерение для сводного корректировочного счета-фактуры
	Параметры.Вставить("ЗаписьЖурнала", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции

//	ДВИЖЕНИЯ РЕГИСТРА БУХГАЛТЕРИИ

Процедура СформироватьПроводкиПоступлениеТоваровУслуг(ДанныеДвижений, РеквизитыПроводок, Движения, Отказ)

	ЕстьПодразделениеВТаблице 		= ДанныеДвижений.Колонки.Найти("Подразделение") <> Неопределено;
	ЕстьПодразделениеВШапке 		= РеквизитыПроводок.Свойство("ПодразделениеКт");
	ВключениеВСтоимостьВТаблице		= ДанныеДвижений.Колонки.Найти("НДСВключенВСтоимость") <> Неопределено;
		
	Для каждого СтрокаТаблицы Из ДанныеДвижений Цикл

		Если СтрокаТаблицы.НДС = 0 
			ИЛИ (ВключениеВСтоимостьВТаблице И СтрокаТаблицы.НДСВключенВСтоимость) Тогда
			Продолжить;
		КонецЕсли;

		ПодразделениеКт 	= Неопределено;
		Если ЕстьПодразделениеВТаблице Тогда
			ПодразделениеКт = СтрокаТаблицы.Подразделение;
		ИначеЕсли ЕстьПодразделениеВШапке Тогда
			ПодразделениеКт = РеквизитыПроводок.ПодразделениеКт;
		КонецЕсли;

		// Проводка Дт 19.х Кт 60.х

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = СтрокаТаблицы.Период;
		Проводка.Организация = СтрокаТаблицы.Организация;
		Проводка.Содержание  = СокрЛП(СтрокаТаблицы.Содержание);

		Проводка.СчетДт = СтрокаТаблицы.СчетУчетаНДС;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"СФПолученные", СтрокаТаблицы.СчетФактура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"Контрагенты",  СтрокаТаблицы.Поставщик);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"СпособыУчетаНДС",  СтрокаТаблицы.СпособУчетаНДС);

		Проводка.СчетКт = РеквизитыПроводок.СчетКт;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			1, РеквизитыПроводок.СубконтоКт1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			2, РеквизитыПроводок.СубконтоКт2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			3, РеквизитыПроводок.СубконтоКт3);

		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = ПодразделениеКт;
		КонецЕсли;
		Если СвойстваСчетаКт.Валютный Тогда
			Проводка.ВалютаКт        = РеквизитыПроводок.ВалютаКт;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаНДСВзаиморасчетов;
		КонецЕсли;

		Проводка.Сумма = СтрокаТаблицы.НДС;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьПроводкиПоступлениеТоваровУслугНалоговыйАгент(ДанныеДвижений, РеквизитыПроводок, Движения, Отказ)

	ЕстьПодразделениеВТаблице 		= ДанныеДвижений.Колонки.Найти("Подразделение") <> Неопределено;
	ЕстьПодразделениеВШапке 		= РеквизитыПроводок.Свойство("ПодразделениеКт");

	Для каждого СтрокаТаблицы Из ДанныеДвижений Цикл

		Если СтрокаТаблицы.НДС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПодразделениеКт 	= Неопределено;
		Если ЕстьПодразделениеВТаблице Тогда
			ПодразделениеКт = СтрокаТаблицы.Подразделение;
		ИначеЕсли ЕстьПодразделениеВШапке Тогда
			ПодразделениеКт = РеквизитыПроводок.ПодразделениеКт;
		КонецЕсли;

		// Дт 19.х Кт 60.х
		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = СтрокаТаблицы.Период;
		Проводка.Организация = СтрокаТаблицы.Организация;
		Проводка.Содержание  = СокрЛП(СтрокаТаблицы.Содержание);

		Проводка.СчетДт = СтрокаТаблицы.СчетУчетаНДС;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"СФПолученные", СтрокаТаблицы.СчетФактура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"Контрагенты", СтрокаТаблицы.Поставщик);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"СпособыУчетаНДС", СтрокаТаблицы.СпособУчетаНДС);

		Проводка.СчетКт = РеквизитыПроводок.СчетКт;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			1, РеквизитыПроводок.СубконтоКт1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			2, РеквизитыПроводок.СубконтоКт2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			3, РеквизитыПроводок.СубконтоКт3);

		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = ПодразделениеКт;
		КонецЕсли;

		Если СвойстваСчетаКт.Валютный Тогда
			Проводка.ВалютаКт        = РеквизитыПроводок.ВалютаКт;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаНДСВзаиморасчетов;
		КонецЕсли;

		Проводка.Сумма = СтрокаТаблицы.НДС;

		// Дт 60.х Кт 76.НА
		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = СтрокаТаблицы.Период;
		Проводка.Организация = СтрокаТаблицы.Организация;
		Проводка.Содержание  = "Начислен НДС в качестве налогового агента";

		Проводка.СчетДт = РеквизитыПроводок.СчетКт;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			1, РеквизитыПроводок.СубконтоКт1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			2, РеквизитыПроводок.СубконтоКт2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			3, РеквизитыПроводок.СубконтоКт3);

		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = ПодразделениеКт;
		КонецЕсли;

		Если СвойстваСчетаДт.Валютный Тогда
			Проводка.ВалютаДт        = РеквизитыПроводок.ВалютаКт;
			Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.СуммаНДСВзаиморасчетов;
		КонецЕсли;

		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента; // 76.НА
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"Контрагенты", СтрокаТаблицы.Поставщик);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"Договоры", СтрокаТаблицы.ДоговорКонтрагента);

		Проводка.Сумма = СтрокаТаблицы.НДС;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьПроводкиПоступлениеТоваровУслугНалоговыйАгентНерезидент(ДанныеДвижений, Движения, Отказ) Экспорт

	РаздельныйУчетНДСНаСчете19 = ДанныеДвижений.Колонки.Найти("СпособУчетаНДС") <> Неопределено;
	
	Для каждого СтрокаТаблицы Из ДанныеДвижений Цикл

		Если СтрокаТаблицы.НДС = 0 Тогда
			Продолжить;
		КонецЕсли;

		// Дт 19.х Кт 76.НА

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период		 = СтрокаТаблицы.Период;
		Проводка.Организация = СтрокаТаблицы.Организация;
		Проводка.Содержание  = СокрЛП(СтрокаТаблицы.Содержание);

		Проводка.СчетДт = СтрокаТаблицы.СчетУчетаНДС;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"СФПолученные", СтрокаТаблицы.СчетФактура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"Контрагенты", СтрокаТаблицы.Поставщик);

		Если РаздельныйУчетНДСНаСчете19 Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
				"СпособыУчетаНДС", СтрокаТаблицы.СпособУчетаНДС);
		КонецЕсли;

		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента; // 76.НА
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"Контрагенты", СтрокаТаблицы.Поставщик);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"Договоры", СтрокаТаблицы.ДоговорКонтрагента);

		Проводка.Сумма = СтрокаТаблицы.НДС;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьПроводкиПоступлениеТоваровУслугВычетНДС(ДанныеДвижений, Движения, Отказ)
	
	Если ДанныеДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Проводки Дт 68.02 Кт 19.х
	Для каждого СтрокаТаблицы Из ДанныеДвижений Цикл

		Если СтрокаТаблицы.НДС = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = СтрокаТаблицы.Период;
		Проводка.Организация = СтрокаТаблицы.Организация;

		Проводка.Содержание = СокрЛП(СтрокаТаблицы.Содержание);

		Проводка.СчетДт = ПланыСчетов.Хозрасчетный.НДС; // 68.02
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);

		Проводка.СчетКт = СтрокаТаблицы.СчетУчетаНДС;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"СФПолученные", СтрокаТаблицы.СчетФактура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"Контрагенты", СтрокаТаблицы.Поставщик);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"СпособыУчетаНДС", Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету);

		Проводка.Сумма = СтрокаТаблицы.НДС;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьПроводкиРеализацияТоваровУслуг(ТоварыУслуги, Реквизиты, Движения, Отказ)

	Если ТоварыУслуги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	//Проводки по начислению НДС от реализации:
	// Дт <СчетУчетаНДСПоРеализации> Кт 68.02

	ТаблицаВыручки = ТоварыУслуги.Скопировать(,
		"Контрагент,Номенклатура,Содержание,СчетУчетаНДСПоРеализации,СтавкаНДС,Субконто,Подразделение,СуммаНДСРуб");

	// Оставляем номенклатуру только для проводок по 91 счету
	ВидСубконтоРеализуемыеАктивы = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РеализуемыеАктивы;
	Для каждого СтрокаТаблицы Из ТаблицаВыручки Цикл
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетУчетаНДСПоРеализации);
		Если СвойстваСчета.ВидСубконто1 <> ВидСубконтоРеализуемыеАктивы
			И СвойстваСчета.ВидСубконто2 <> ВидСубконтоРеализуемыеАктивы
			И СвойстваСчета.ВидСубконто3 <> ВидСубконтоРеализуемыеАктивы Тогда
			СтрокаТаблицы.Номенклатура = Неопределено;
		КонецЕсли;
	КонецЦикла;

	ТаблицаВыручки.Свернуть(
		"Контрагент,Номенклатура,Содержание,СчетУчетаНДСПоРеализации,СтавкаНДС,Субконто,Подразделение", "СуммаНДСРуб");

	Для каждого СтрокаВыручки Из ТаблицаВыручки Цикл

		Если СтрокаВыручки.СуммаНДСРуб = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Сумма       = СтрокаВыручки.СуммаНДСРуб;
		Проводка.Содержание  = СтрокаВыручки.Содержание;

		Проводка.СчетДт = СтрокаВыручки.СчетУчетаНДСПоРеализации;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			1, СтрокаВыручки.Субконто); // Для счетов 90.03 и 91.02
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"СтавкиНДС", СтрокаВыручки.СтавкаНДС); // Для счета 90.03
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"РеализуемыеАктивы", СтрокаВыручки.Номенклатура); // Для счета 91.02
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"Контрагенты", СтрокаВыручки.Контрагент); // Для счета 76.ОТ
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"СФВыданные", Реквизиты.Регистратор); // Для счета 76.ОТ

		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = СтрокаВыручки.Подразделение;
		КонецЕсли;

		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДС;
		Проводка.СубконтоКт.ВидыПлатежейВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог;

		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = СтрокаВыручки.Подразделение;
		КонецЕсли;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьПроводкиРеализацияОтгруженныхТоваров(Товары, Реквизиты, Движения, Отказ)

	Если Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	// Проводки
	// Дт <Счет учета НДС от реализации> Кт 76.ОТ

	ТаблицаВыручки = Товары.Скопировать(,
		"Номенклатура,СчетУчетаНДСПоРеализации,СтавкаНДС,Субконто,Подразделение,СуммаНДСРуб");

	// Оставляем номенклатуру только для проводок по 91 счету
	ВидСубконтоРеализуемыеАктивы = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РеализуемыеАктивы;
	Для каждого СтрокаТаблицы Из ТаблицаВыручки Цикл
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетУчетаНДСПоРеализации);
		Если СвойстваСчета.ВидСубконто1 <> ВидСубконтоРеализуемыеАктивы
			И СвойстваСчета.ВидСубконто2 <> ВидСубконтоРеализуемыеАктивы
			И СвойстваСчета.ВидСубконто3 <> ВидСубконтоРеализуемыеАктивы Тогда
			СтрокаТаблицы.Номенклатура = Неопределено;
		КонецЕсли;
	КонецЦикла;

	ТаблицаВыручки.Свернуть(
		"Номенклатура,СчетУчетаНДСПоРеализации,СтавкаНДС,Субконто,Подразделение", "СуммаНДСРуб");

	Для каждого СтрокаТаблицы Из ТаблицаВыручки Цикл

		Если СтрокаТаблицы.СуммаНДСРуб = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Сумма       = СтрокаТаблицы.СуммаНДСРуб;
		Проводка.Содержание  = "Реализация отгруженных товаров";

		Проводка.СчетДт = СтрокаТаблицы.СчетУчетаНДСПоРеализации;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			1, СтрокаТаблицы.Субконто);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"СтавкиНДС", СтрокаТаблицы.СтавкаНДС);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"РеализуемыеАктивы", СтрокаТаблицы.Номенклатура);

		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = СтрокаТаблицы.Подразделение;
		КонецЕсли;

		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДСНачисленныйПоОтгрузке;  // 76.ОТ
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"Контрагенты", Реквизиты.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"СФВыданные", Реквизиты.ДокументОтгрузки);

		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = СтрокаТаблицы.Подразделение;
		КонецЕсли;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьПроводкиВозвратТоваровПоставщику(РеализованныеТовары, Реквизиты, Движения, Отказ)

	Если РеализованныеТовары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	// Начисление НДС при возврате товаров:
	// Проводки Дт 76.х (счет расчетов по претензиям) Кт 68.02

	ТаблицаВыручки = РеализованныеТовары.Скопировать(,
		"Содержание,Контрагент,ДоговорКонтрагента,ВалютаВзаиморасчетов,Подразделение,СчетУчетаНДСПоРеализации,
		|СтавкаНДС,СуммаНДСРуб,СуммаНДСВзаиморасчетов");
	ТаблицаВыручки.Свернуть(
		"Содержание,Контрагент,ДоговорКонтрагента,ВалютаВзаиморасчетов,Подразделение,СчетУчетаНДСПоРеализации,СтавкаНДС",
		"СуммаНДСРуб,СуммаНДСВзаиморасчетов");

	Для каждого СтрокаТаблицы Из ТаблицаВыручки Цикл

		Если СтрокаТаблицы.СуммаНДСРуб = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Сумма       = СтрокаТаблицы.СуммаНДСРуб;
		Проводка.Содержание  = СокрЛП(СтрокаТаблицы.Содержание);

		Проводка.СчетДт = СтрокаТаблицы.СчетУчетаНДСПоРеализации;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"Контрагенты", СтрокаТаблицы.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"Договоры", СтрокаТаблицы.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"ДокументыРасчетовСКонтрагентами", Реквизиты.Регистратор);

		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		Если СвойстваСчетаДт.Валютный Тогда
			Проводка.ВалютаДт        = СтрокаТаблицы.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.СуммаНДСВзаиморасчетов;
		КонецЕсли;
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = СтрокаТаблицы.Подразделение;
		КонецЕсли;

		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДС;
		Проводка.СубконтоКт.ВидыПлатежейВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьПроводкиВозвратТоваровОтПокупателя(Товары, Реквизиты, Движения, Отказ)

	Если Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	// Проводки по выделению НДС предъявленного поставщиком при возврате:
	// Дт <СчетУчетаНДСПоРеализации> Кт <СчетУчетаНДС>
	// например:
	// Дт 90.03 Кт 19.х
	// или Дт 90.03 Кт 68.02

	ТаблицаВыручки = Товары.Скопировать(,
		"Номенклатура,Содержание,СчетУчетаНДСПоРеализации,СтавкаНДС,Субконто,Подразделение,СуммаНДСРуб,СпособУчетаНДС");

	// Оставляем номенклатуру только для проводок по 91 счету
	ВидСубконтоРеализуемыеАктивы = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РеализуемыеАктивы;
	Для каждого СтрокаТаблицы Из ТаблицаВыручки Цикл
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетУчетаНДСПоРеализации);
		Если СвойстваСчета.ВидСубконто1 <> ВидСубконтоРеализуемыеАктивы
			И СвойстваСчета.ВидСубконто2 <> ВидСубконтоРеализуемыеАктивы
			И СвойстваСчета.ВидСубконто3 <> ВидСубконтоРеализуемыеАктивы Тогда
			СтрокаТаблицы.Номенклатура = Неопределено;
		КонецЕсли;
	КонецЦикла;

	ТаблицаВыручки.Свернуть(
		"Номенклатура,Содержание,СчетУчетаНДСПоРеализации,СтавкаНДС,Субконто,Подразделение,СтавкаНДС,СпособУчетаНДС", "СуммаНДСРуб");
		
	Если Реквизиты.ПокупателемВыставляетсяСчетФактураНаВозврат Тогда
		СчетФактура	= Реквизиты.Регистратор;
	Иначе
		СчетФактура = Реквизиты.ДокументОтгрузки;
	КонецЕсли;	
		
	Для каждого СтрокаВыручки Из ТаблицаВыручки Цикл

		Если СтрокаВыручки.СуммаНДСРуб = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Сумма       = -СтрокаВыручки.СуммаНДСРуб;
		Проводка.Содержание  = СтрокаВыручки.Содержание;

		Проводка.СчетДт = СтрокаВыручки.СчетУчетаНДСПоРеализации;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			1, СтрокаВыручки.Субконто);                       // Для счетов 90.03 и 91.02
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"СтавкиНДС", СтрокаВыручки.СтавкаНДС);            // Для счета 90.03
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"РеализуемыеАктивы", СтрокаВыручки.Номенклатура); // Для счета 91.02

		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = СтрокаВыручки.Подразделение;
		КонецЕсли;

		Проводка.СчетКт = Реквизиты.СчетУчетаНДС;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"Контрагенты",  Реквизиты.Контрагент);                                // Для счета 19.х
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"СФПолученные", СчетФактура);                          				  // Для счета 19.х
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"СпособыУчетаНДС", СтрокаВыручки.СпособУчетаНДС);         			  // Для счета 19.х
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог); // Для счета 68.02

		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = СтрокаВыручки.Подразделение;
		КонецЕсли;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

// Проводки по выделению НДС предъявленного покупателем комиссионеру при возврате:
// Дт <СчетУчетаНДСПоРеализации> Кт <СчетУчетаНДС>
Процедура СформироватьПроводкиВозвратТоваровКомиссионеру(Товары, Реквизиты, Движения, Отказ)

	Если Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ВидСубконтоРеализуемыеАктивы = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РеализуемыеАктивы;
		
	Для каждого СтрокаВыручки Из Товары Цикл

		Если СтрокаВыручки.СуммаНДСРуб = 0 ИЛИ НЕ СтрокаВыручки.ПокупателемВыставляетсяСчетФактураНаВозврат Тогда
			Продолжить;
		КонецЕсли;
		
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаВыручки.СчетУчетаНДСПоРеализации);
		Если СвойстваСчета.ВидСубконто1 <> ВидСубконтоРеализуемыеАктивы
			И СвойстваСчета.ВидСубконто2 <> ВидСубконтоРеализуемыеАктивы
			И СвойстваСчета.ВидСубконто3 <> ВидСубконтоРеализуемыеАктивы Тогда
			НоменклатураПоСтроке = Неопределено;
		Иначе
			НоменклатураПоСтроке = СтрокаВыручки.Номенклатура;
		КонецЕсли;

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Сумма       = -СтрокаВыручки.СуммаНДСРуб;
		Проводка.Содержание  = СтрокаВыручки.Содержание;

		Проводка.СчетДт = СтрокаВыручки.СчетУчетаНДСПоРеализации;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			1, СтрокаВыручки.Субконто);                       // Для счетов 90.03 и 91.02
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"СтавкиНДС", СтрокаВыручки.СтавкаНДС);            // Для счета 90.03
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"РеализуемыеАктивы", НоменклатураПоСтроке); // Для счета 91.02

		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = СтрокаВыручки.Подразделение;
		КонецЕсли;

		Проводка.СчетКт = Реквизиты.СчетУчетаНДС;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"Контрагенты",  Реквизиты.Контрагент);                                // Для счета 19.х
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"СФПолученные", СтрокаВыручки.СчетФактура);           				  // Для счета 19.х
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"СпособыУчетаНДС", СтрокаВыручки.СпособУчетаНДС);         			  // Для счета 19.х
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог); // Для счета 68.02

		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = СтрокаВыручки.Подразделение;
		КонецЕсли;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры


Процедура СформироватьПроводкиВычетНДСВыданныйАванс(ТаблицаРеквизиты, ТаблицаАвансов, Движения, Отказ)

	Если ТаблицаАвансов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];

	Для каждого СтрокаТаблицы Из ТаблицаАвансов Цикл

		// Проводки по вычету НДС с выданного аванса
		Если СтрокаТаблицы.СуммаНДС = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = Движения.Хозрасчетный.Добавить();

		ЗаполнитьЗначенияСвойств(Проводка, Реквизиты);

		Проводка.Содержание  = ?(СтрокаТаблицы.СуммаНДС > 0, 
			"Вычет НДС с выданного аванса",
			"Сторнирование вычета НДС с выданного аванса");

		Проводка.СчетДт = ПланыСчетов.Хозрасчетный.НДС; // 68.02
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);

		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатамВыданным; // 76.ВА
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СФПолученные", СтрокаТаблицы.СчетФактура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты",  СтрокаТаблицы.Контрагент);

		Проводка.Сумма = СтрокаТаблицы.СуммаНДС;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьПроводкиВосстановлениеНДСВыданныйАванс(ТаблицаРеквизиты, ТаблицаАвансов, Движения, Отказ)

	Реквизиты = ТаблицаРеквизиты[0];

	Для каждого СтрокаТаблицы Из ТаблицаАвансов Цикл

		// Проводки по вычету НДС с выданного аванса
		Если СтрокаТаблицы.СуммаНДС = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = Движения.Хозрасчетный.Добавить();

		ЗаполнитьЗначенияСвойств(Проводка, Реквизиты);

		Проводка.Содержание  = "Восстановление НДС с выданного аванса";

		Проводка.СчетДт = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатамВыданным; // 76.ВА
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СФПолученные", СтрокаТаблицы.СчетФактура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты",  СтрокаТаблицы.Контрагент);

		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДС; // 68.02
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);

		Проводка.Сумма = СтрокаТаблицы.СуммаНДС;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьПроводкиНачислениеНДСПолученныйАванс(ТаблицаРеквизиты, ТаблицаАвансов, Движения, Отказ)

	Реквизиты = ТаблицаРеквизиты[0];

	Для каждого СтрокаТаблицы Из ТаблицаАвансов Цикл

		// Проводки по вычету НДС с выданного аванса
		Если СтрокаТаблицы.СуммаНДС = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = Движения.Хозрасчетный.Добавить();

		ЗаполнитьЗначенияСвойств(Проводка, Реквизиты);

		Проводка.Содержание  = "НДС по предоплате";

		Проводка.СчетДт = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам; // 76.АВ
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СФВыданные", СтрокаТаблицы.СчетФактура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаТаблицы.Контрагент);

		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДС; // 68.02
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);


		Проводка.Сумма = СтрокаТаблицы.СуммаНДС;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьПроводкиВычетНДСПолученныйАванс(ТаблицаРеквизиты, ТаблицаАвансов, Движения, Отказ)

	Реквизиты = ТаблицаРеквизиты[0];

	Для каждого СтрокаТаблицы Из ТаблицаАвансов Цикл

		// Проводки по вычету НДС с выданного аванса
		Если СтрокаТаблицы.СуммаНДС = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = Движения.Хозрасчетный.Добавить();

		ЗаполнитьЗначенияСвойств(Проводка, Реквизиты);

		Проводка.Содержание  = "Вычет НДС по предоплате";

		Проводка.СчетДт = ПланыСчетов.Хозрасчетный.НДС; // 68.02
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);

		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам; // 76.АВ
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СФВыданные", СтрокаТаблицы.СчетФактура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты",  СтрокаТаблицы.Контрагент);

		Проводка.Сумма = СтрокаТаблицы.СуммаНДС;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

// Проводка по начислению НДС с суммовых разниц при расчетах в у.е.
Процедура СформироватьПроводкиСуммовыеРазницы(ТаблицаСуммовыеРазницы, ТаблицаРеквизиты, Движения, Отказ)

	Параметры = ПодготовитьПараметрыПроводкиСуммовыеРазницы(ТаблицаСуммовыеРазницы, ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];
	ТаблицаСуммовыхРазниц = Параметры.СуммовыеРазницы;

	ТаблицаСуммовыхРазниц.Свернуть("Подразделение,ДатаДокументаРасчетов", "Разница,НДС");

	Если Реквизиты.НаправлениеДвижения = "Поступление" Тогда
		ЗнакОстатков = 1;
	Иначе
		ЗнакОстатков = -1;
	КонецЕсли;

	Для каждого СтрокаРазницы Из ТаблицаСуммовыхРазниц Цикл

		СуммоваяРазница = СтрокаРазницы.Разница * ЗнакОстатков;

		Если СуммоваяРазница > 0 И СтрокаРазницы.НДС <> 0 
			И СтрокаРазницы.ДатаДокументаРасчетов < '20111001' Тогда

			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание  = "НДС по курсовым разницам по расчетам в у.е.";

			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
			Проводка.СубконтоДт.ПрочиеДоходыИРасходы = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.КурсовыеРазницыПоРасчетамВУЕ");

			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДС;
			Проводка.СубконтоКт.ВидыПлатежейВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог;

			Проводка.Сумма 	   = СтрокаРазницы.НДС;
			Проводка.СуммаПРДт = СтрокаРазницы.НДС;

			БухгалтерскийУчет.УстановитьПодразделенияПроводки(Проводка, СтрокаРазницы.Подразделение, СтрокаРазницы.Подразделение);

		КонецЕсли;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

// Подготовка таблицы для процедуры СформироватьПроводкиСуммовыеРазницы
//
Функция ПодготовитьПараметрыПроводкиСуммовыеРазницы(ТаблицаСуммовыеРазницы, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы реквизитов
	СписокОбязательныхКолонок = ""

	+ "Период,"                 //
	+ "Организация,"             //
	+ "Регистратор,"             //
	+ "НаправлениеДвижения";    //

    Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Подготовка таблицы суммовых разниц
	СписокОбязательныхКолонок = ""

	+ "ДатаДокументаРасчетов,"
	+ "Подразделение,"          //
	+ "Разница,"
	+ "НДС"; 	//

	Параметры.Вставить("СуммовыеРазницы", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСуммовыеРазницы, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьПроводкиРозничнаяВыручка(ТаблицаНачислениеНДС, Движения, Отказ)

	Параметры = ПодготовитьПараметрыПроводкиРозничнаяВыручка(ТаблицаНачислениеНДС);
	НачислениеНДС = Параметры.НачислениеНДС;

	НачислениеНДС.Колонки.Добавить("КорСубконто1");
	НачислениеНДС.Колонки.Добавить("КорСубконто2");
	НачислениеНДС.Колонки.Добавить("КорСубконто3");
	НачислениеНДС.Колонки.Добавить("ВидКорСубконто1");
	НачислениеНДС.Колонки.Добавить("ВидКорСубконто2");
	НачислениеНДС.Колонки.Добавить("ВидКорСубконто3");

	Для каждого СтрокаТаблицы Из НачислениеНДС Цикл

		СтрокаТаблицы.КорСубконто1 = СтрокаТаблицы.Субконто;
		СтрокаТаблицы.КорСубконто2 = СтрокаТаблицы.СтавкаНДС;

	КонецЦикла;

	НачислениеНДС.ЗаполнитьЗначения(1, "ВидКорСубконто1");
	НачислениеНДС.ЗаполнитьЗначения("СтавкиНДС", "ВидКорСубконто2");

	СформироватьПроводкиНачислениеНДСРозничнаяВыручка(НачислениеНДС, Движения, Отказ);

КонецПроцедуры

// Подготовка таблицы для процедуры СформироватьПроводкиРозничнаяВыручка
//
Функция ПодготовитьПараметрыПроводкиРозничнаяВыручка(ТаблицаНачислениеНДС)

	Параметры = Новый Структура;

	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""

	+ "Период,"				//
	+ "Организация,"		//
	+ "ДокументОснование,"	//
	+ "СтавкаНДС,"			//
	+ "СчетУчетаНДС,"		//
	+ "НДС,"			//
	+ "Подразделение,"		//
	+ "Субконто,"			//
	+ "Содержание";			//

    Параметры.Вставить("НачислениеНДС", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаНачислениеНДС, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// Проводка по начислению НДС по Кт 68.02
//
Процедура СформироватьПроводкиНачислениеНДСРозничнаяВыручка(ТаблицаНачислениеНДС, Движения, Отказ)

	Параметры = ПодготовитьПараметрыПроводкиНачислениеНДСРозничнаяВыручка(ТаблицаНачислениеНДС);
	НачислениеНДС = Параметры.НачислениеНДС;

	Для каждого СтрокаТаблицы Из НачислениеНДС Цикл

		Если СтрокаТаблицы.НДС = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = СтрокаТаблицы.Период;
		Проводка.Организация = СтрокаТаблицы.Организация;
		Проводка.Сумма       = СтрокаТаблицы.НДС;
		Проводка.Содержание  = СокрЛП(СтрокаТаблицы.Содержание);

		Проводка.СчетДт = ПланыСчетов.Хозрасчетный.Продажи_НДС;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, СтрокаТаблицы.ВидКорСубконто1, СтрокаТаблицы.КорСубконто1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, СтрокаТаблицы.ВидКорСубконто2, СтрокаТаблицы.КорСубконто2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, СтрокаТаблицы.ВидКорСубконто3, СтрокаТаблицы.КорСубконто3);

		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = СтрокаТаблицы.Подразделение;
		КонецЕсли;

		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДС;  // 68.02
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);

		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = СтрокаТаблицы.Подразделение;
		КонецЕсли;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

// Подготовка таблицы для процедуры СформироватьПроводкиНачислениеНДС
//
Функция ПодготовитьПараметрыПроводкиНачислениеНДСРозничнаяВыручка(ТаблицаНачислениеНДС)

	Параметры = Новый Структура;

	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""

	+ "Период,"				//
	+ "Организация,"		//
	+ "ДокументОснование,"	//
	+ "СчетУчетаНДС,"		//
	+ "НДС,"			//
	+ "Подразделение,"		//
	+ "Содержание,"			//
	+ "ВидКорСубконто1,"	//
    + "ВидКорСубконто2,"	//
	+ "ВидКорСубконто3,"	//
	+ "КорСубконто1,"		//
	+ "КорСубконто2,"		//
	+ "КорСубконто3";		//

    Параметры.Вставить("НачислениеНДС", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаНачислениеНДС, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьПроводкиНачисленНДСНалоговымАгентом(Реквизиты, ТаблицаАвансы, Движения, Отказ)

	Движение = Движения.Хозрасчетный.Добавить();

	Движение.Период = Реквизиты.Период;
	Движение.Организация = Реквизиты.Организация;
	Движение.Содержание  = "НДС";

	Движение.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента;
	Движение.СчетКт = ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента;

	Движение.Сумма  = ТаблицаАвансы.Итог("СуммаНДС");

	БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "Контрагенты", Реквизиты.Контрагент);
	БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "Договоры", Реквизиты.ДоговорКонтрагента);

	БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "Контрагенты", Реквизиты.Контрагент);
	БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "Договоры", Реквизиты.ДоговорКонтрагента);
	БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "ДокументыРасчетовСКонтрагентами", Реквизиты.ДокументОснование);

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьПроводкиВычетНДСПоТоварамРеализованнымПоСтавке0(ДанныеДвижений, Движения, Отказ)

	// Проводки Дт 68.02 Кт 19.07

	Для каждого СтрокаТаблицы Из ДанныеДвижений Цикл

		Если СтрокаТаблицы.НДС = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = СтрокаТаблицы.Период;
		Проводка.Организация = СтрокаТаблицы.Организация;

		Проводка.Содержание = СокрЛП(СтрокаТаблицы.Содержание);

		Проводка.СчетДт = ПланыСчетов.Хозрасчетный.НДС; // 68.02
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);

		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДСПоТоварамРеализованнымПоСтавке0;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"СФПолученные", СтрокаТаблицы.СчетФактура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"Контрагенты", СтрокаТаблицы.Поставщик);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"ДокументыРеализации", СтрокаТаблицы.ДокументОтгрузки);

		Проводка.Сумма = СтрокаТаблицы.НДС;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьПроводкиВосстановлениеНДСПоПрочимОперациям(ТаблицаПоВосстановлению, Движения, Отказ)

	Для каждого СтрокаВосстановления Из ТаблицаПоВосстановлению Цикл

		Движение = Движения.Хозрасчетный.Добавить();

		Движение.Период 	 = СтрокаВосстановления.Период;
		Движение.Организация = СтрокаВосстановления.Организация;
		Движение.Сумма 		 = СтрокаВосстановления.НДС;
		Движение.Содержание  = "Восстановление НДС";

		Движение.СчетДт = СтрокаВосстановления.СчетУчетаНДС; // 19.х
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "Контрагенты", СтрокаВосстановления.Покупатель);
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "СФполученные", СтрокаВосстановления.СчетФактура);

		Движение.СчетКт = ПланыСчетов.Хозрасчетный.НДС; // 68.02
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьПроводкиСписаниеНДС(Реквизиты, ТаблицаДвижений, Движения, Отказ)

	СписаниеНДСБезСчетаФактуры = ТаблицаДвижений.Колонки.Найти("ПредъявленСчетФактура") <> Неопределено;
	
	Для каждого СтрокаТаблицы Из ТаблицаДвижений Цикл

		Если СписаниеНДСБезСчетаФактуры 
			И (СтрокаТаблицы.ПредъявленСчетФактура
			ИЛИ СтрокаТаблицы.НДС = 0) Тогда
			Продолжить;
		КонецЕсли;
		
		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = "Списан НДС";

		Проводка.СчетДт = Реквизиты.СчетСписанияНДС;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Реквизиты.СубконтоСписанияНДС1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, Реквизиты.СубконтоСписанияНДС2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, Реквизиты.СубконтоСписанияНДС3);

		Проводка.СчетКт = СтрокаТаблицы.СчетУчетаНДС; // 19.х
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаТаблицы.Поставщик);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СФПолученные", 
												?(ЗначениеЗаполнено(СтрокаТаблицы.СчетФактура), СтрокаТаблицы.СчетФактура, Реквизиты.Регистратор));
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СпособыУчетаНДС", СтрокаТаблицы.СпособУчетаНДС);										
												
		Проводка.Сумма  = СтрокаТаблицы.НДС;

		БухгалтерскийУчет.УстановитьПодразделенияПроводки(
			Проводка, Реквизиты.ПодразделениеОрганизации, Реквизиты.ПодразделениеОрганизации);
		НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(Проводка.Сумма, , , , , , Проводка);

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьПроводкиСтавка0НеПодтверждена(Реквизиты, ТаблицаСтавкаНеПодтверждена, Движения, Отказ)

	Для каждого СтрокаТаблицы Из ТаблицаСтавкаНеПодтверждена Цикл

		// Дт 68.22 Кт 68.02
		Движение = Движения.Хозрасчетный.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);

		Движение.СчетДт = ПланыСчетов.Хозрасчетный.НДСпоЭкспортуКВозмещению; // 68.22
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "Контрагенты", СтрокаТаблицы.Покупатель);
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "СФВыданные", СтрокаТаблицы.СчетФактура);

		Движение.СчетКт = ПланыСчетов.Хозрасчетный.НДС; // 68.02
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);

		Движение.Сумма = СтрокаТаблицы.НДС;

		// Дт 91.02 Кт 68.22
		Движение = Движения.Хозрасчетный.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);

		Движение.СчетДт = ПланыСчетов.Хозрасчетный.ПрочиеРасходы; // 91.02
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "ПрочиеДоходыИРасходы", Реквизиты.СтатьяПрочихРасходов);

		Движение.СчетКт = ПланыСчетов.Хозрасчетный.НДСпоЭкспортуКВозмещению; //68.22
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "Контрагенты", СтрокаТаблицы.Покупатель);
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "СФВыданные", СтрокаТаблицы.СчетФактура);

		Движение.Сумма = СтрокаТаблицы.НДС;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьПроводкиНачислениеНДСпоСМРХозспособом(Реквизиты, СМРХозспособом, Движения, Отказ)

	Для каждого СтрокаДвижения Из СМРХозспособом Цикл

		Если СтрокаДвижения.НДС <> 0 Тогда

			Движение = Движения.Хозрасчетный.Добавить();

			ЗаполнитьЗначенияСвойств(Движение, Реквизиты);

			Движение.Содержание = "Начислен НДС по строительству хоз. способом";

			Движение.СчетДт = СтрокаДвижения.СчетУчетаНДС;
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "СФПолученные", СтрокаДвижения.СчетФактура);
			Если Реквизиты.РаздельныйУчетНДСНаСчете19 Тогда
				БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт,
					"СпособыУчетаНДС", Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету);
			КонецЕсли;
			
			Движение.СчетКт = ПланыСчетов.Хозрасчетный.НДС;
			БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);

			Движение.Сумма = СтрокаДвижения.НДС;

		КонецЕсли;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьПроводкиРеализацияТоваровУслугКомитентаНерезидента(Реквизиты, ТаблицаДвижений, Движения, Отказ)
	
	Для каждого СтрокаДвижения Из ТаблицаДвижений Цикл

		Если СтрокаДвижения.НДС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
			СтрокаДвижения.Валюта, Реквизиты.Период);

		Движение = Движения.Хозрасчетный.Добавить();

		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		ЗаполнитьЗначенияСвойств(Движение, СтрокаДвижения);

		Движение.Сумма = СтрокаДвижения.НДС;
		
		СвойстваСчетаРасчетов = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаДвижения.СчетРасчетов);
		Если СвойстваСчетаРасчетов.Валютный Тогда
			Движение.ВалютнаяСуммаДт = СтрокаДвижения.НДС/СтруктураКурсаВзаиморасчетов.Курс*СтруктураКурсаВзаиморасчетов.Кратность;
			Движение.ВалютаДт = СтрокаДвижения.Валюта;
		КонецЕсли;	
				
		Движение.Содержание = "Начислен НДС в качестве налогового агента";

		Движение.СчетДт = СтрокаДвижения.СчетРасчетов;
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "Контрагенты", СтрокаДвижения.Комитент);
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "Договоры", СтрокаДвижения.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "ДокументыРасчетовСКонтрагентами", Реквизиты.Регистратор);

		Движение.СчетКт = ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента;
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "Контрагенты", СтрокаДвижения.Комитент);
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "Договоры", СтрокаДвижения.ДоговорКонтрагента);

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;
		
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	ДВИЖЕНИЯ НДС ДОКУМЕНТА КОРРЕКТИРОВКА ПОСТУПЛЕНИЯ

Процедура СформироватьДвиженияНДСКорректировкиПоступлениеТоваровУслуг(РеквизитыДокумента, СтруктураТаблицДокумента, Движения, Отказ) Экспорт
	
	Параметры = ПолучитьРеквизитыКорректировкиПоступленияПоНДС(РеквизитыДокумента);
	Если Параметры.Реквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Если Реквизиты.РаздельныйУчетНДСНаСчете19 Тогда
		Возврат;
	КонецЕсли;
	
	ПоставщикПредъявляетНДС = Истина;
	РеквизитПредъявляетНДС	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.ДоговорКонтрагента, "ПредъявляетНДС");
	Если РеквизитПредъявляетНДС <> Неопределено Тогда 
		ПоставщикПредъявляетНДС = РеквизитПредъявляетНДС;
	КонецЕсли;
	
	// Исправительный счет-фактура
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки Тогда
		
		// Сторно движений исправляемого документа
		Если СтруктураТаблицДокумента.НДСПредъявленный.Итог("НДС") <> 0 ИЛИ ПоставщикПредъявляетНДС Тогда	
			СформироватьДвиженияЗаписьКнигиПокупок(Реквизиты, СтруктураТаблицДокумента.КнигаПокупок, Движения, Отказ);
			СформироватьДвиженияНДСПредъявленный(СтруктураТаблицДокумента.НДСПредъявленный, Истина, Движения, Отказ);
		КонецЕсли;
		
		СформироватьИсправительныеДвиженияКорректировкаПоступления(Реквизиты, СтруктураТаблицДокумента, Движения, Отказ);
		
	Иначе // Корректировочный счет-фактура
		
		СформироватьКорректировочныеДвиженияКорректировкаПоступления(Реквизиты, СтруктураТаблицДокумента, Движения, Отказ);
		
	КонецЕсли;
		
	УчетНДСПереопределяемый.СформироватьДвиженияКорректировкаНДСКосвенныхРасходов(Реквизиты, СтруктураТаблицДокумента.КорректировкаНДСКосвенныхРасходов, Движения, Отказ);
	УчетНДСПереопределяемый.СформироватьДвиженияКорректировкаНДСПоПартиямЗапасов(Реквизиты, Движения, Отказ);
		
КонецПроцедуры

Функция ПолучитьРеквизитыКорректировкиПоступленияПоНДС(РеквизитыДокумента)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "ВидОперации,"
	+ "Регистратор,"
	+ "Период,"
	+ "Организация,"
	+ "ИсправляемыйСчетФактура,"
	+ "КорректироватьБУиНУ,"
	+ "ДокументПоступленияСсылка,"
	+ "ВосстановитьНДС,"
	+ "Склад,"
	+ "РаздельныйУчетНДС,"
	+ "РаздельныйУчетНДСНаСчете19,"
	+ "КурсДокумента,"
	+ "КратностьДокумента,"
	+ "ДокументОснование,"
	+ "ДоговорКонтрагента,"
	+ "НДСВключенВСтоимость";
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(РеквизитыДокумента, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

Процедура СформироватьДвиженияЗаписьКнигиПокупок(Реквизиты, ТаблицаДвиженийПоКнигеПокупок, Движения, Отказ)
	
	Если ТаблицаДвиженийПоКнигеПокупок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаДвиженийПоКнигеПокупок Цикл
		
		Если СтрокаТаблицы.НДС = 0 И СтрокаТаблицы.СуммаБезНДС = 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		// НДС Покупки
		Запись = Движения.НДСЗаписиКнигиПокупок.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
		
		Если Реквизиты.КорректироватьБУиНУ 
			И СтрокаТаблицы.НДС <> 0 Тогда
						
			// Хозрасчетный
			Проводка = Движения.Хозрасчетный.Добавить();
			
			Проводка.Период      = СтрокаТаблицы.Период;
			Проводка.Организация = СтрокаТаблицы.Организация;
			Проводка.Содержание  = СокрЛП(СтрокаТаблицы.Содержание);
			
			Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.НДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
			
			Проводка.СчетКт      = СтрокаТаблицы.СчетУчетаНДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СФПолученные", СтрокаТаблицы.СчетФактура);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаТаблицы.Поставщик);
			
			Проводка.Сумма       = СтрокаТаблицы.НДС;
			
		КонецЕсли;
	
	КонецЦикла;
	
	Движения.НДСЗаписиКнигиПокупок.Записывать = Истина;
	Движения.Хозрасчетный.Записывать          = Истина;
	
КонецПроцедуры

Процедура СформироватьДвиженияНДСПредъявленный(ТаблицаПредъявленногоНДС, Сторно = Ложь, Движения, Отказ)
	
	Если ТаблицаПредъявленногоНДС = Неопределено
		ИЛИ ТаблицаПредъявленногоНДС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаПредъявленногоНДС Цикл
		
		Если СтрокаТаблицы.НДС = 0 И СтрокаТаблицы.СуммаБезНДС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Сторно Тогда
			Запись = Движения.НДСПредъявленный.ДобавитьРасход();
		Иначе
			Запись = Движения.НДСПредъявленный.ДобавитьПриход();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
	
	КонецЦикла;
	
	Движения.НДСПредъявленный.Записывать = Истина;
	
КонецПроцедуры

Процедура СформироватьИсправительныеДвиженияКорректировкаПоступления(Реквизиты, СтруктураТаблицДокумента, Движения, Отказ)
					
	Если ТипЗнч(Реквизиты.ИсправляемыйСчетФактура) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		
		// Сторно движений исправляемого документа
		СформироватьДвиженияЗаписьКнигиПродажДокументаКорректировкаПоступления(Реквизиты, СтруктураТаблицДокумента.КнигаПродаж, Истина, Движения, Отказ);
		// Новые движения по исправленному корректировочному счету-фактуре
		СформироватьКорректировочныеДвиженияКорректировкаПоступления(Реквизиты, СтруктураТаблицДокумента, Движения, Отказ);
		
	Иначе
		
		ПоставщикПредъявляетНДС = Истина;
		РеквизитПредъявляетНДС	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.ДоговорКонтрагента, "ПредъявляетНДС");
		Если РеквизитПредъявляетНДС <> Неопределено Тогда 
			ПоставщикПредъявляетНДС = РеквизитПредъявляетНДС;
		КонецЕсли;
		
		// Движения по регистру "НДС предъявленный" приход предъявленного НДС, списание включенного в стоимость НДС
		Если СтруктураТаблицДокумента.ВычетНДСНаОснованииДокумента <> Неопределено 
			И (СтруктураТаблицДокумента.ВычетНДСНаОснованииДокумента.Итог("НДС") <> 0 ИЛИ ПоставщикПредъявляетНДС) Тогда
			СформироватьДвиженияНДСПредъявленный(СтруктураТаблицДокумента.ВычетНДСНаОснованииДокумента, Ложь, Движения, Отказ);
			ТаблицаНДСВключенныйВСтоимость = ПодготовитьТаблицуВычетНДССУчетомПропорции(Реквизиты, СтруктураТаблицДокумента.ВычетНДСНаОснованииДокумента);
			СформироватьДвиженияНДСПредъявленный(ТаблицаНДСВключенныйВСтоимость, Истина, Движения, Отказ);
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

Процедура СформироватьКорректировочныеДвиженияКорректировкаПоступления(Реквизиты, СтруктураТаблицДокумента, Движения, Отказ)

	Если Реквизиты.ВосстановитьНДС И СтруктураТаблицДокумента.ТаблицаВосстановление <> Неопределено Тогда
		ТаблицаВосстановление = ПодготовитьТаблицуВосстановленияНДССУчетомПропорции(Реквизиты, СтруктураТаблицДокумента.ТаблицаВосстановление);
		СформироватьДвиженияЗаписьКнигиПродажДокументаКорректировкаПоступления(Реквизиты, ТаблицаВосстановление, Ложь, Движения, Отказ);
	КонецЕсли;
	
	ПоставщикПредъявляетНДС = Истина;
	РеквизитПредъявляетНДС	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.ДоговорКонтрагента, "ПредъявляетНДС");
	Если РеквизитПредъявляетНДС <> Неопределено Тогда 
		ПоставщикПредъявляетНДС = РеквизитПредъявляетНДС;
	КонецЕсли;
	
	// Движения по регистру "НДС предъявленный" приход предъявленного НДС, списание включенного в стоимость НДС
	Если СтруктураТаблицДокумента.ТаблицаВычет <> Неопределено 
		И (СтруктураТаблицДокумента.ТаблицаВычет.Итог("НДС") <> 0 ИЛИ ПоставщикПредъявляетНДС) Тогда
		СформироватьДвиженияНДСПредъявленный(СтруктураТаблицДокумента.ТаблицаВычет, Ложь, Движения, Отказ);
		
		ТаблицаНДСВключенныйВСтоимость = 
			ПодготовитьТаблицуВычетНДССУчетомПропорции(Реквизиты, СтруктураТаблицДокумента.ТаблицаВычет);
			
		СформироватьДвиженияНДСПредъявленный(ТаблицаНДСВключенныйВСтоимость, Истина, Движения, Отказ);
	КонецЕсли;
	
КонецПроцедуры	

Процедура СформироватьДвиженияЗаписьКнигиПродажДокументаКорректировкаПоступления(Реквизиты, ТаблицаДвижений, Сторно = Ложь, Движения, Отказ)
	
	Если ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаДвижения Из ТаблицаДвижений Цикл
		
		// НДС Продажи
		Движение = Движения.НДСЗаписиКнигиПродаж.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаДвижения);
		
		Если НЕ Сторно И Реквизиты.КорректироватьБУиНУ
			И СтрокаДвижения.НДС <> 0 Тогда
					
			// Хозрасчетный
			Проводка = Движения.Хозрасчетный.Добавить();
			
			Проводка.Период = СтрокаДвижения.Период;
			Проводка.Организация = СтрокаДвижения.Организация;
			Проводка.Содержание  = СтрокаДвижения.Содержание;
			
			Проводка.СчетДт = СтрокаДвижения.СчетУчетаНДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СФПолученные", СтрокаДвижения.СчетФактура);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты" , СтрокаДвижения.Покупатель);
			
			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
			
			Проводка.Сумма = СтрокаДвижения.НДС;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Сторно И Реквизиты.КорректироватьБУиНУ Тогда
		СформироватьПроводкиСторноВосстановленияНДС(Реквизиты, Движения, Отказ);
	КонецЕсли;
				
	Движения.НДСЗаписиКнигиПродаж.Записывать = Истина;
	Движения.Хозрасчетный.Записывать         = Истина;
	
КонецПроцедуры

Процедура СформироватьПроводкиСторноВосстановленияНДС(Реквизиты, Движения, Отказ)
	
	НаборЗаписейХозрасчетный = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	НаборЗаписейХозрасчетный.Отбор.Регистратор.Значение = Реквизиты.ДокументОснование;
	НаборЗаписейХозрасчетный.Прочитать();
	
	Для Каждого ДвижениеСторнируемое Из НаборЗаписейХозрасчетный Цикл

		Если ДвижениеСторнируемое.СчетКт = ПланыСчетов.Хозрасчетный.НДС
			И ДвижениеСторнируемое.Сумма > 0 Тогда
			
			Движение = Движения.Хозрасчетный.Добавить();
			
			Движение.Период = Реквизиты.Период;
			
			ЗаполнитьЗначенияСвойств(Движение, ДвижениеСторнируемое, , "Период, Регистратор");
			
			Для каждого Субконто Из ДвижениеСторнируемое.СубконтоДт Цикл
				Движение.СубконтоДт[Субконто.Ключ] = Субконто.Значение;
			КонецЦикла;
			
			Для каждого Субконто Из ДвижениеСторнируемое.СубконтоКт Цикл
				Движение.СубконтоКт[Субконто.Ключ] = Субконто.Значение;
			КонецЦикла;
			
			Движение.Сумма = -ДвижениеСторнируемое.Сумма;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПустаяТаблицаВычетНДС() Экспорт
	
	НаборНДСПредъявленный = РегистрыНакопления.НДСПредъявленный.СоздатьНаборЗаписей();
	ТаблицаВычетНДС = НаборНДСПредъявленный.ВыгрузитьКолонки();
	ТаблицаВычетНДС.Колонки.Удалить("Активность");
	ТаблицаВычетНДС.Колонки.Удалить("ВидДвижения");
	
	Возврат ТаблицаВычетНДС;
	
КонецФункции

Функция ПустаяТаблицаКоэффициентовКорректировкиПоступления() Экспорт

	ТаблицаКоэффициентов = Новый ТаблицаЗначений;
	ТаблицаКоэффициентов.Колонки.Добавить("ВидЦенности", 	Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЦенностей"));
	ТаблицаКоэффициентов.Колонки.Добавить("СтавкаНДС", 		Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	ТаблицаКоэффициентов.Колонки.Добавить("СчетУчетаНДС", 	Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаКоэффициентов.Колонки.Добавить("НДСКоэффициент", ОбщегоНазначения.ОписаниеТипаЧисло(6, 4));
	ТаблицаКоэффициентов.Колонки.Добавить("СуммаБезНДСКоэффициент", ОбщегоНазначения.ОписаниеТипаЧисло(6, 4));

	Возврат ТаблицаКоэффициентов;

КонецФункции

Функция ПодготовитьТаблицуВычетНДССУчетомПропорции(Реквизиты, ТаблицаДокумента)
	
	ТаблицаКоэффициентов = УчетНДСПереопределяемый.ПодготовитьТаблицуКоэффициентовКорректировкиПоступления(Реквизиты);
	ТаблицаКоэффициентов.Индексы.Добавить("ВидЦенности,СтавкаНДС,СчетУчетаНДС");
	
	ТаблицаРезультат = ТаблицаДокумента.Скопировать();
	СтрокаГруппировки = "ВидЦенности,СтавкаНДС,Регистратор,Период,Организация,Поставщик,Событие,ДатаСобытия,СчетФактура,
		|ИсправленныйСчетФактура,СчетУчетаНДС,СчетУчета,СтатьяЗатрат,ПодразделениеЗатрат,Субконто1,Субконто2,Субконто3";
	СтрокаРесурсов = "СуммаБезНДС,НДС,НДСВал";
	ТаблицаРезультат.Свернуть(СтрокаГруппировки, СтрокаРесурсов);
	
	СтруктураПоиска = Новый Структура("ВидЦенности,СтавкаНДС,СчетУчетаНДС");
	Для каждого СтрокаТаблицы Из ТаблицаРезультат Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТаблицы);
		СтрокиКоэффициентов = ТаблицаКоэффициентов.НайтиСтроки(СтруктураПоиска);
		Если СтрокиКоэффициентов.Количество() > 0 Тогда
			Коэффициенты = СтрокиКоэффициентов[0];
		Иначе
			Коэффициенты = Новый Структура("СуммаБезНДСКоэффициент,НДСКоэффициент", 0, 0);
		КонецЕсли;
		СтрокаТаблицы.СуммаБезНДС = Окр(СтрокаТаблицы.СуммаБезНДС * Коэффициенты.СуммаБезНДСКоэффициент, 2);
		СтрокаТаблицы.НДС         = Окр(СтрокаТаблицы.НДС * Коэффициенты.НДСКоэффициент, 2);
		СтрокаТаблицы.НДСВал      = Окр(СтрокаТаблицы.НДСВал * Коэффициенты.НДСКоэффициент, 2);
		СтрокаТаблицы.Событие  	  = Перечисления.СобытияПоНДСПокупки.НДСВключенВСтоимость;
	КонецЦикла;
		
	Возврат ТаблицаРезультат;
	
КонецФункции	

Функция ПодготовитьТаблицуВосстановленияНДССУчетомПропорции(Реквизиты, ТаблицаДокумента)
	
	ТаблицаКоэффициентов = УчетНДСПереопределяемый.ПодготовитьТаблицуКоэффициентовКорректировкиПоступления(Реквизиты);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТаблицаДокумента", ТаблицаДокумента);
	Запрос.УстановитьПараметр("ТаблицаКоэффициентов", ТаблицаКоэффициентов);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.ВидЦенности КАК ВидЦенности,
	|	ТаблицаДокумента.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаБезНДС КАК СуммаБезНДС,
	|	ТаблицаДокумента.НДС КАК НДС,
	|	ТаблицаДокумента.НДСВал КАК НДСВал,
	|	ТаблицаДокумента.Регистратор КАК Регистратор,
	|	ТаблицаДокумента.Период КАК Период,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ТаблицаДокумента.Покупатель КАК Покупатель,
	|	ТаблицаДокумента.Событие КАК Событие,
	|	ТаблицаДокумента.ДатаСобытия КАК ДатаСобытия,
	|	ТаблицаДокумента.СчетФактура КАК СчетФактура,
	|	ТаблицаДокумента.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	ТаблицаДокумента.СчетУчетаНДС КАК СчетУчетаНДС,
	|	ТаблицаДокумента.СчетУчета КАК СчетУчета,
	|	ТаблицаДокумента.СторнирующаяЗаписьДопЛиста КАК СторнирующаяЗаписьДопЛиста,
	|	ТаблицаДокумента.КорректируемыйПериод КАК КорректируемыйПериод,
	|	ТаблицаДокумента.ЗаписьДополнительногоЛиста КАК ЗаписьДополнительногоЛиста,
	|	ТаблицаДокумента.Содержание КАК Содержание,
	|	ТаблицаДокумента.КодВидаОперации
	|ПОМЕСТИТЬ ВТТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.ВидЦенности,
	|	ТаблицаДокумента.СтавкаНДС,
	|	ТаблицаДокумента.Регистратор,
	|	ТаблицаДокумента.Период,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.Покупатель,
	|	ТаблицаДокумента.Событие,
	|	ТаблицаДокумента.ДатаСобытия,
	|	ТаблицаДокумента.СчетФактура,
	|	ТаблицаДокумента.ИсправленныйСчетФактура,
	|	ТаблицаДокумента.СчетУчетаНДС,
	|	ТаблицаДокумента.СчетУчета,
	|	ТаблицаДокумента.СторнирующаяЗаписьДопЛиста,
	|	ТаблицаДокумента.КорректируемыйПериод,
	|	ТаблицаДокумента.ЗаписьДополнительногоЛиста,
	|	ТаблицаДокумента.Содержание,
	|	СУММА(ТаблицаДокумента.СуммаБезНДС) КАК СуммаБезНДС,
	|	СУММА(ТаблицаДокумента.НДС) КАК НДС,
	|	СУММА(ТаблицаДокумента.НДСВал) КАК НДСВал,
	|	ТаблицаДокумента.КодВидаОперации
	|ПОМЕСТИТЬ ВТСгруппированнаяТаблицаДокумента
	|ИЗ
	|	ВТТаблицаДокумента КАК ТаблицаДокумента
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.ВидЦенности,
	|	ТаблицаДокумента.СтавкаНДС,
	|	ТаблицаДокумента.Регистратор,
	|	ТаблицаДокумента.Период,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.Покупатель,
	|	ТаблицаДокумента.Событие,
	|	ТаблицаДокумента.ДатаСобытия,
	|	ТаблицаДокумента.СчетФактура,
	|	ТаблицаДокумента.ИсправленныйСчетФактура,
	|	ТаблицаДокумента.СчетУчетаНДС,
	|	ТаблицаДокумента.СчетУчета,
	|	ТаблицаДокумента.СторнирующаяЗаписьДопЛиста,
	|	ТаблицаДокумента.КорректируемыйПериод,
	|	ТаблицаДокумента.ЗаписьДополнительногоЛиста,
	|	ТаблицаДокумента.Содержание,
	|	ТаблицаДокумента.КодВидаОперации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТаблицаДокумента.СтавкаНДС,
	|	ТаблицаДокумента.СчетУчетаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаКоэффициентов.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаКоэффициентов.ВидЦенности КАК ВидЦенности,
	|	ТаблицаКоэффициентов.СчетУчетаНДС КАК СчетУчетаНДС,
	|	ТаблицаКоэффициентов.НДСКоэффициент КАК НДСКоэффициент,
	|	ТаблицаКоэффициентов.СуммаБезНДСКоэффициент КАК СуммаБезНДСКоэффициент
	|ПОМЕСТИТЬ ВТТаблицаКоэффициентов
	|ИЗ
	|	&ТаблицаКоэффициентов КАК ТаблицаКоэффициентов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтавкаНДС,
	|	СчетУчетаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСгруппированнаяТаблицаДокумента.ВидЦенности,
	|	ВТСгруппированнаяТаблицаДокумента.СтавкаНДС,
	|	ВТСгруппированнаяТаблицаДокумента.СуммаБезНДС * (1 - ЕСТЬNULL(ВТТаблицаКоэффициентов.СуммаБезНДСКоэффициент, 0)) КАК СуммаБезНДС,
	|	ВТСгруппированнаяТаблицаДокумента.НДС * (1 - ЕСТЬNULL(ВТТаблицаКоэффициентов.НДСКоэффициент, 0)) КАК НДС,
	|	ВТСгруппированнаяТаблицаДокумента.НДСВал * (1 - ЕСТЬNULL(ВТТаблицаКоэффициентов.НДСКоэффициент, 0)) КАК НДСВал,
	|	ВТСгруппированнаяТаблицаДокумента.Регистратор,
	|	ВТСгруппированнаяТаблицаДокумента.Период,
	|	ВТСгруппированнаяТаблицаДокумента.Организация,
	|	ВТСгруппированнаяТаблицаДокумента.Покупатель,
	|	ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПродажи.ВосстановлениеНДС) КАК Событие,
	|	ВТСгруппированнаяТаблицаДокумента.ДатаСобытия,
	|	ВТСгруппированнаяТаблицаДокумента.СчетФактура,
	|	ВТСгруппированнаяТаблицаДокумента.ИсправленныйСчетФактура,
	|	ВТСгруппированнаяТаблицаДокумента.СчетУчетаНДС,
	|	ВТСгруппированнаяТаблицаДокумента.СчетУчета,
	|	ВТСгруппированнаяТаблицаДокумента.СторнирующаяЗаписьДопЛиста,
	|	ВТСгруппированнаяТаблицаДокумента.КорректируемыйПериод,
	|	ВТСгруппированнаяТаблицаДокумента.ЗаписьДополнительногоЛиста,
	|	ВТСгруппированнаяТаблицаДокумента.Содержание,
	|	ВТСгруппированнаяТаблицаДокумента.КодВидаОперации
	|ПОМЕСТИТЬ ТаблицаВосстановления
	|ИЗ
	|	ВТСгруппированнаяТаблицаДокумента КАК ВТСгруппированнаяТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТаблицаКоэффициентов КАК ВТТаблицаКоэффициентов
	|		ПО ВТСгруппированнаяТаблицаДокумента.СтавкаНДС = ВТТаблицаКоэффициентов.СтавкаНДС
	|			И ВТСгруппированнаяТаблицаДокумента.ВидЦенности = ВТТаблицаКоэффициентов.ВидЦенности
	|			И ВТСгруппированнаяТаблицаДокумента.СчетУчетаНДС = ВТТаблицаКоэффициентов.СчетУчетаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВосстановления.ВидЦенности,
	|	ТаблицаВосстановления.СтавкаНДС,
	|	ТаблицаВосстановления.СуммаБезНДС,
	|	ТаблицаВосстановления.НДС,
	|	ТаблицаВосстановления.НДСВал,
	|	ТаблицаВосстановления.Регистратор,
	|	ТаблицаВосстановления.Период,
	|	ТаблицаВосстановления.Организация,
	|	ТаблицаВосстановления.Покупатель,
	|	ТаблицаВосстановления.Событие,
	|	ТаблицаВосстановления.ДатаСобытия,
	|	ТаблицаВосстановления.СчетФактура,
	|	ТаблицаВосстановления.ИсправленныйСчетФактура,
	|	ТаблицаВосстановления.СчетУчетаНДС,
	|	ТаблицаВосстановления.СчетУчета,
	|	ТаблицаВосстановления.СторнирующаяЗаписьДопЛиста,
	|	ТаблицаВосстановления.КорректируемыйПериод,
	|	ТаблицаВосстановления.ЗаписьДополнительногоЛиста,
	|	ТаблицаВосстановления.Содержание,
	|	ТаблицаВосстановления.КодВидаОперации
	|ИЗ
	|	ТаблицаВосстановления КАК ТаблицаВосстановления
	|ГДЕ
	|	ТаблицаВосстановления.НДС <> 0
	|	И ТаблицаВосстановления.СуммаБезНДС <> 0";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции	

// Формирует список счетов учета ценностей
// ОС - основных средств
// НМА - нематериальных активов
// ВНА - внеоборотных активов
// ОбъектыСтроительства - объектов строительства
// Материалы - материалов
//
Функция ОпределитьСчетаУчетаЦенностей(ОбъектыУчета = "", ДатаОбъекта = '00010101') Экспорт

	ПланСчетовБУ = ПланыСчетов.Хозрасчетный;

	СчетаУчетаЗатрат = Новый СписокЗначений();
	Если ОбъектыУчета = "Оборудование" Или ОбъектыУчета = "ВНА" Тогда
		Если ДатаОбъекта >= '20060101' Тогда
			СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке);
		Иначе
			Возврат СчетаУчетаЗатрат;
		КонецЕсли;
	КонецЕсли;
	Если ОбъектыУчета = "ОС" Или ОбъектыУчета = "ВНА" Тогда
		Если ДатаОбъекта < '20060101' Тогда
			СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке);
		КонецЕсли;
		СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств);
	КонецЕсли;
	Если ОбъектыУчета = "НМА" Или ОбъектыУчета = "ВНА" Тогда
		СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеНематериальныхАктивов);
	КонецЕсли;
	Если ОбъектыУчета = "ОбъектыСтроительства" Или ОбъектыУчета = "ВНА" Тогда
		СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств);
	КонецЕсли;
	Если ОбъектыУчета = "Материалы" Тогда
		СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.Материалы);
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Родитель =&Счет
		|	И Хозрасчетный.ЗапретитьИспользоватьВПроводках = ЛОЖЬ";

	ВременныеСчетаУчетаЗатрат = СчетаУчетаЗатрат.Скопировать();

	Для каждого Счет из ВременныеСчетаУчетаЗатрат Цикл

		Запрос.УстановитьПараметр("Счет",Счет.Значение);
		Результат = Запрос.Выполнить().Выгрузить();

		Пока Результат.Количество()>0 Цикл

			Для каждого строка из Результат цикл
				СчетаУчетаЗатрат.Добавить(строка.Ссылка);
			КонецЦикла;
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Родитель","Родитель.Родитель");
			Результат = Запрос.Выполнить().Выгрузить();

		КонецЦикла;

    КонецЦикла;

	Возврат СчетаУчетаЗатрат;


КонецФункции

Функция ВидЦенностиНалоговыйАгент(ВидАгентскогоДоговора)

	Если ВидАгентскогоДоговора = Перечисления.ВидыАгентскихДоговоров.Аренда Тогда
		Возврат Перечисления.ВидыЦенностей.НалоговыйАгентАренда;
	ИначеЕсли ВидАгентскогоДоговора = Перечисления.ВидыАгентскихДоговоров.РеализацияИмущества Тогда
		Возврат Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества;
	Иначе
		Возврат Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы;
	КонецЕсли;

КонецФункции

Функция ОпределитьВидЦенности(СчетУчета, Субконто1 = Неопределено, Субконто2 = Неопределено, Субконто3 = Неопределено) Экспорт

	ВидЦенности = Перечисления.ВидыЦенностей.ПустаяСсылка();

	Если НЕ ЗначениеЗаполнено(СчетУчета) Тогда
		ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;

	ИначеЕсли БухгалтерскийУчетВызовСервераПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств) Тогда

		Если Субконто1 = Перечисления.СпособыСтроительства.Хозспособ
			ИЛИ Субконто2 = Перечисления.СпособыСтроительства.Хозспособ
			ИЛИ Субконто3 = Перечисления.СпособыСтроительства.Хозспособ Тогда

			ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
			
		ИначеЕсли Субконто1 = Перечисления.СпособыСтроительства.Подрядный
			ИЛИ Субконто2 = Перечисления.СпособыСтроительства.Подрядный
			ИЛИ Субконто3 = Перечисления.СпособыСтроительства.Подрядный Тогда

			ВидЦенности = Перечисления.ВидыЦенностей.СМРПодрядные;
			
		ИначеЕсли ТипЗнч(Субконто1) = Тип("СправочникСсылка.ОбъектыСтроительства") Тогда
			
			ВидЦенности = Перечисления.ВидыЦенностей.ОбъектыНезавершенногоСтроительства;

		Иначе

			ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;

		КонецЕсли;

	ИначеЕсли БухгалтерскийУчетВызовСервераПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ОсновноеПроизводство)
		ИЛИ БухгалтерскийУчетВызовСервераПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводства)
		ИЛИ БухгалтерскийУчетВызовСервераПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства)
		ИЛИ БухгалтерскийУчетВызовСервераПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы)
		ИЛИ БухгалтерскийУчетВызовСервераПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы)
		ИЛИ БухгалтерскийУчетВызовСервераПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ИздержкиОбращения)
		ИЛИ БухгалтерскийУчетВызовСервераПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.КоммерческиеРасходы) Тогда

		Если ТипЗнч(Субконто1) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			СтатьяЗатрат = Субконто1;
		ИначеЕсли ТипЗнч(Субконто2) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			СтатьяЗатрат = Субконто2;
		ИначеЕсли ТипЗнч(Субконто3) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			СтатьяЗатрат = Субконто3;
		Иначе
			СтатьяЗатрат = Неопределено;
		КонецЕсли;

		Если СтатьяЗатрат = Неопределено Тогда

			ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;

		Иначе

			Если СтатьяЗатрат.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.КомандировочныеРасходы Тогда
				ВидЦенности = Перечисления.ВидыЦенностей.КомандировочныеРасходы;
			ИначеЕсли СтатьяЗатрат.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.ПредставительскиеРасходы Тогда
				ВидЦенности = Перечисления.ВидыЦенностей.ПредставительскиеРасходы;
			Иначе
				ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
			КонецЕсли;

		КонецЕсли;

	ИначеЕсли БухгалтерскийУчетВызовСервераПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.Материалы) Тогда

		ВидЦенности = Перечисления.ВидыЦенностей.Материалы;

	ИначеЕсли БухгалтерскийУчетВызовСервераПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.Товары)
		ИЛИ БухгалтерскийУчетВызовСервераПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ГотоваяПродукция)
		ИЛИ БухгалтерскийУчетВызовСервераПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ТоварыОтгруженные)
		ИЛИ БухгалтерскийУчетВызовСервераПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.Полуфабрикаты) Тогда

		ВидЦенности = Перечисления.ВидыЦенностей.Товары;

	ИначеЕсли БухгалтерскийУчетВызовСервераПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке)
		ИЛИ БухгалтерскийУчетВызовСервераПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств)
		ИЛИ БухгалтерскийУчетВызовСервераПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ОсновныеСредства) Тогда

		ВидЦенности = Перечисления.ВидыЦенностей.ОС;

	ИначеЕсли БухгалтерскийУчетВызовСервераПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ПриобретениеНематериальныхАктивов)
		ИЛИ БухгалтерскийУчетВызовСервераПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.ВыполнениеНИОКР)
		ИЛИ БухгалтерскийУчетВызовСервераПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.НематериальныеАктивы) Тогда

		ВидЦенности = Перечисления.ВидыЦенностей.НМА;

	Иначе

		ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;

	КонецЕсли;

	Возврат ВидЦенности;

КонецФункции

//Функция определения вида ценности по группе критериев
//
Функция ОпределитьВидЦенностиПоОперации(Объект, СчетУчета, ЭтоДопРасходы = Ложь, ЭтоАгентскийНДС = Ложь, ВидАгентскогоДоговора = "", СпособСтроительства = Неопределено, ЭтоУслуга = Неопределено, ВидыЦенностейПоСчетамУчета = Неопределено, СтруктураШапкиДокумента = Неопределено) Экспорт

	ВидЦенности = Перечисления.ВидыЦенностей.ПустаяСсылка();
	Если ВидыЦенностейПоСчетамУчета = Неопределено Тогда
		ВидыЦенностейПоСчетамУчета = Новый Соответствие;
	КонецЕсли;

	Если ЭтоАгентскийНДС Тогда
		// Это агентский НДС - для него применяется специальный вид ценности
		Если ВидАгентскогоДоговора = Перечисления.ВидыАгентскихДоговоров.Аренда Тогда
			ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентАренда;
		ИначеЕсли ВидАгентскогоДоговора = Перечисления.ВидыАгентскихДоговоров.РеализацияИмущества Тогда
			ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества;
		Иначе
			ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы;
		КонецЕсли;

	ИначеЕсли ЭтоДопРасходы Тогда
		// Это всегда услуги
		Если ЗначениеЗаполнено(СчетУчета)
			И БухгалтерскийУчетВызовСервераПовтИсп.СчетВИерархии(СчетУчета, ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств) тогда
			ВидЦенности = Перечисления.ВидыЦенностей.СМРПодрядные;
		Иначе
			ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
		КонецЕслИ;

	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Номенклатура") тогда
		ВидЦенности = ?(ВидыЦенностейПоСчетамУчета = Неопределено, Неопределено, ВидыЦенностейПоСчетамУчета[СчетУчета]);
		ДатаДокумента = ?(СтруктураШапкиДокумента = Неопределено, '00010101', СтруктураШапкиДокумента.Дата);


		Если ВидЦенности = Неопределено Тогда
			ПланСчетовБУ = ПланыСчетов.Хозрасчетный;
			Если  СчетУчета = "нет" Или Не ЗначениеЗаполнено(СчетУчета) Тогда
				ВидЦенности = Перечисления.ВидыЦенностей.Товары;
			ИначеЕсли БухгалтерскийУчетВызовСервераПовтИсп.СчетВИерархии(СчетУчета, ПланСчетовБУ.Материалы) Тогда
				ВидЦенности = Перечисления.ВидыЦенностей.Материалы;
			ИначеЕсли БухгалтерскийУчетВызовСервераПовтИсп.СчетВИерархии(СчетУчета, ПланСчетовБУ.ПриобретениеОбъектовОсновныхСредств)
				ИЛИ БухгалтерскийУчетВызовСервераПовтИсп.СчетВИерархии(СчетУчета, ПланСчетовБУ.ОборудованиеКУстановке) Тогда
				ВидЦенности = Перечисления.ВидыЦенностей.ОС;
			ИначеЕсли БухгалтерскийУчетВызовСервераПовтИсп.СчетВИерархии(СчетУчета, ПланСчетовБУ.ПриобретениеНематериальныхАктивов)   Тогда
				ВидЦенности = Перечисления.ВидыЦенностей.НМА;
			Иначе
				ВидЦенности = Перечисления.ВидыЦенностей.Товары;
			КонецЕсли;
		КонецЕсли;

		Если ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги ИЛИ ВидЦенности = Перечисления.ВидыЦенностей.Товары Тогда
			Если ЭтоУслуга = Неопределено Или ЭтоУслуга = Null Тогда
				ЭтоУслуга = ?(ЗначениеЗаполнено(Объект), БухгалтерскийУчетПереопределяемый.НоменклатураЯвляетсяУслугой(Объект), Ложь);
			КонецЕсли;
			Если ЭтоУслуга Тогда
				ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
			Иначе
				ВидЦенности = Перечисления.ВидыЦенностей.Товары;
			КонецЕсли;
		КонецЕсли;
		ВидыЦенностейПоСчетамУчета.Вставить(СчетУчета, ВидЦенности);

	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.НематериальныеАктивы") тогда
		ВидЦенности = Перечисления.ВидыЦенностей.НМА;

	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ОсновныеСредства") тогда
		ВидЦенности = Перечисления.ВидыЦенностей.ОС;

	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ОбъектыСтроительства") тогда
		ВидЦенности = Перечисления.ВидыЦенностей.ОбъектыНезавершенногоСтроительства;

	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.СтатьиЗатрат") тогда
		СчетаУчетаЦенностей = ВидыЦенностейПоСчетамУчета["ОбъектыСтроительства"];
		Если СчетаУчетаЦенностей = Неопределено Тогда
			СчетаУчетаЦенностей = ОпределитьСчетаУчетаЦенностей("ОбъектыСтроительства");
			ВидыЦенностейПоСчетамУчета.Вставить("ОбъектыСтроительства", СчетаУчетаЦенностей);
		КонецЕсли;
		Если СчетаУчетаЦенностей.НайтиПоЗначению(СчетУчета) <> Неопределено тогда
			Если СпособСтроительства = Перечисления.СпособыСтроительства.Хозспособ Тогда
				//Такая ситуация возникает при приобретении услуг, включаемых в затраты по строительству
				// не от строительной организации (не от подрядчика) (например, это услуги по охране объекта строительства).
				// Необходимо учитывать данные услуги как "Прочие работы и услуги".
				ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
			Иначе
				ВидЦенности = Перечисления.ВидыЦенностей.СМРПодрядные;
			КонецЕсли;

		ИначеЕсли ЗначениеЗаполнено(Объект) Тогда
			Если Объект.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.КомандировочныеРасходы Тогда
				ВидЦенности = Перечисления.ВидыЦенностей.КомандировочныеРасходы;
			ИначеЕсли Объект.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.ПредставительскиеРасходы Тогда
				ВидЦенности = Перечисления.ВидыЦенностей.ПредставительскиеРасходы;
			Иначе
				ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
			КонецЕсли;
		Иначе
			ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;
		КонецЕсли;
		Для Каждого СчетУчетаЦенности Из СчетаУчетаЦенностей Цикл
			  ВидыЦенностейПоСчетамУчета.Вставить(СчетУчетаЦенности, ВидЦенности);
		КонецЦикла;

	Иначе
		ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги;

	КонецЕсли;

	Возврат ВидЦенности;

КонецФункции // ОпределитьВидЦенностиПоОперации()

Процедура ЗаполнитьВидыЦенностейПоступлениеОтПоставщика(ТаблицаТоварыУслуги, Реквизиты, ВидЦенности = Неопределено, ИмяКолонкиСчетУчета) Экспорт
	
	Если ТаблицаТоварыУслуги = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаТоварыУслуги.Колонки.Найти("ВидЦенности") = Неопределено Тогда
		ТаблицаТоварыУслуги.Колонки.Добавить("ВидЦенности", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЦенностей"));
	КонецЕсли;
	
	Если ТаблицаТоварыУслуги.Колонки.Найти("СчетУчетаЗабалансовый") = Неопределено Тогда
		ТаблицаТоварыУслуги.Колонки.Добавить("СчетУчетаЗабалансовый", Новый ОписаниеТипов("Булево"));
	КонецЕсли; 
	
	Если ТаблицаТоварыУслуги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаТоварыУслуги.Колонки.Найти("Услуга") = Неопределено Тогда
		ТаблицаТоварыУслуги.Колонки.Добавить("Услуга", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Если ТаблицаТоварыУслуги.Колонки.Найти("Номенклатура") = Неопределено Тогда
		НетКолонкиНоменклатура = Истина;
	Иначе	
		НетКолонкиНоменклатура = Ложь;
	КонецЕсли;	
		
	Если Реквизиты.УчетАгентскогоНДС Тогда
		ТаблицаТоварыУслуги.ЗаполнитьЗначения(ВидЦенностиНалоговыйАгент(Реквизиты.ВидАгентскогоДоговора), "ВидЦенности");
	ИначеЕсли ВидЦенности <> Неопределено Тогда
		ТаблицаТоварыУслуги.ЗаполнитьЗначения(ВидЦенности, "ВидЦенности");
	Иначе
		
		СтруктураАналитики	= Новый Структура("Субконто1, Субконто2, Субконто3");
		
		Для каждого СтрокаТовара Из ТаблицаТоварыУслуги Цикл
			
			Если НетКолонкиНоменклатура
				ИЛИ СтрокаТовара.Услуга Тогда
				
				Для НомерСубконто = 1 По 3 Цикл
					ИмяАналитики = "Субконто" + НомерСубконто;
					Если НЕ ТаблицаТоварыУслуги.Колонки.Найти(ИмяАналитики) = Неопределено Тогда
						СтруктураАналитики.Вставить(ИмяАналитики, СтрокаТовара[ИмяАналитики]);
					КонецЕсли;
				КонецЦикла;
				
				СтрокаТовара.ВидЦенности = ОпределитьВидЦенности(СтрокаТовара[ИмяКолонкиСчетУчета],
					СтруктураАналитики.Субконто1, СтруктураАналитики.Субконто2, СтруктураАналитики.Субконто3);
			Иначе
				СтрокаТовара.ВидЦенности = ОпределитьВидЦенности(СтрокаТовара[ИмяКолонкиСчетУчета], СтрокаТовара.Номенклатура);
				
				Если ЗначениеЗаполнено(СтрокаТовара[ИмяКолонкиСчетУчета]) Тогда
					СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТовара[ИмяКолонкиСчетУчета]);
					СтрокаТовара.СчетУчетаЗабалансовый = СвойстваСчета.Забалансовый;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьВидыЦенностей(ТаблицаТоварыУслуги, ВидЦенности = Неопределено, ИмяКолонкиСчетУчета, Регистратор = Неопределено) Экспорт

	Если ТаблицаТоварыУслуги = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаТоварыУслуги.Колонки.Найти("ВидЦенности") = Неопределено Тогда
		ТаблицаТоварыУслуги.Колонки.Добавить("ВидЦенности", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЦенностей"));
	КонецЕсли;
	
	Если ТаблицаТоварыУслуги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВидЦенностиДляЗаполнения = ВидЦенности;
	Если ВидЦенностиДляЗаполнения = Неопределено И Регистратор <> Неопределено Тогда
		Если БухгалтерскийУчетКлиентСерверПереопределяемый.ДокументЯвляетсяОтчетомКомитенту(Регистратор) Тогда
			ВидЦенностиДляЗаполнения = Перечисления.ВидыЦенностей.ПосредническиеУслуги;
		КонецЕсли;
	КонецЕсли;
	
	Если ВидЦенностиДляЗаполнения <> Неопределено Тогда
		ТаблицаТоварыУслуги.ЗаполнитьЗначения(ВидЦенностиДляЗаполнения, "ВидЦенности");
	Иначе
		
		СтруктураАналитики	= Новый Структура("Субконто1, Субконто2, Субконто3");
		
		Для каждого СтрокаТовара Из ТаблицаТоварыУслуги Цикл
			
			Для НомерСубконто = 1 По 3 Цикл
				ИмяАналитики	= "Субконто" + НомерСубконто;
				Если НЕ ТаблицаТоварыУслуги.Колонки.Найти(ИмяАналитики) = Неопределено Тогда
					СтруктураАналитики.Вставить(ИмяАналитики, СтрокаТовара[ИмяАналитики]);
				КонецЕсли;
			КонецЦикла;
			
			СтрокаТовара.ВидЦенности = ОпределитьВидЦенности(СтрокаТовара[ИмяКолонкиСчетУчета],
				СтруктураАналитики.Субконто1, СтруктураАналитики.Субконто2, СтруктураАналитики.Субконто3);
			
		КонецЦикла;
			
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	ЗАПОЛНЕНИЕ СЧЕТОВ-ФАКТУР

// Процедура формирует список выбора кодов видов операций
//
// Параметры
//  ЧастьЖурнала  - Перечисления.ЧастиЖурналаУчетаСчетовФактур - в зависимости от значения параметра 
//                 формируется список выбора
//  СписокВыбора  - СписокЗначений - формируемый список кодов видов операций
//
Процедура ЗаполнитьСписокКодовВидовОпераций(ЧастьЖурнала, СписокВыбора, ИспользоватьКоды2015 = Ложь, ИспользоватьДополнительныеКоды = Ложь) Экспорт
	
	СписокВыбора.Очистить();
	Если ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры Тогда
		
		СписокВыбора.Добавить("01", "01 - Полученные товары, работы, услуги");
		СписокВыбора.Добавить("02", "02 - Авансы выданные");
		СписокВыбора.Добавить("03", "03 - Возврат от покупателя");
		СписокВыбора.Добавить("04", "04 - Товары, работы, услуги комитента");
		СписокВыбора.Добавить("05", "05 - Авансы за товары, работы, услуги комитента");
		СписокВыбора.Добавить("10", "10 - Полученные безвозмездно товары, работы, услуги");
		СписокВыбора.Добавить("11", "11 - Полученные товары, права, п.3,4,5.1 статьи 154, пп.1-4 статьи 155 НК");
		СписокВыбора.Добавить("12", "12 - Авансы выданные за товары, права, п.3,4,5.1 статьи 154, пп.1-4 статьи 155 НК");
		СписокВыбора.Добавить("13", "13 - Капитальное строительство, модернизация (реконструкция) объектов недвижимости");
		
		Если ИспользоватьКоды2015 Тогда
			Если ИспользоватьДополнительныеКоды Тогда
				СписокВыбора.Добавить("16", "16 - Возврат от покупателя-неплательщика НДС");	
				СписокВыбора.Добавить("17", "17 - Возврат от покупателя-физического лица");	
				СписокВыбора.Добавить("18", "18 - Изменение стоимости отгруженных товаров (работ, услуг) в сторону уменьшения");	
				СписокВыбора.Добавить("19", "19 - Ввоз товаров из Евразийского экономического союза");
				СписокВыбора.Добавить("20", "20 - Ввоз импортных товаров на территорию РФ");
				СписокВыбора.Добавить("22", "22 - Возврат, зачет авансовых платежей, п.5 статьи 171, п.6 статьи 172 НК");
				СписокВыбора.Добавить("23", "23 - Командировочные расходы по бланку строгой отчетности, п.7 статьи 171 НК");
				СписокВыбора.Добавить("24", "24 - Подтверждение ставки 0% после истечения 180 дней");
				СписокВыбора.Добавить("25", "25 - Подтверждение ставки 0%");
			КонецЕсли;
			СписокВыбора.Добавить("27", "27 - Сводный комиссионный счет-фактура, п.3.1 статьи 169 НК");
			СписокВыбора.Добавить("28", "28 - Сводный комиссионный счет-фактура на аванс, п.3.1 статьи 169 НК");
		КонецЕсли;
		
	ИначеЕсли ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры Тогда
		
		СписокВыбора.Добавить("01", "01 - Реализованные товары, работы, услуги");
		СписокВыбора.Добавить("02", "02 - Авансы полученные");
		СписокВыбора.Добавить("03", "03 - Возврат поставщику");
		СписокВыбора.Добавить("04", "04 - Товары, работы, услуги комитента");
		СписокВыбора.Добавить("05", "05 - Авансы за товары, работы, услуги комитента");
		СписокВыбора.Добавить("06", "06 - Налоговый агент, статья 161 НК");
		СписокВыбора.Добавить("07", "07 - Списание за счет прибыли, пп.2 п.1 статьи 146 НК");
		СписокВыбора.Добавить("08", "08 - Строительно-монтажные работы, пп.3 п.1 статьи 146 НК");
		СписокВыбора.Добавить("09", "09 - Суммы, связанные с расчетами по оплате, статья 162 НК");
		СписокВыбора.Добавить("10", "10 - Переданные безвозмездно товары, работы, услуги");
		СписокВыбора.Добавить("11", "11 - Реализованные товары, права, п.3,4,5.1 статьи 154, пп.1-4 статьи 155 НК");
		СписокВыбора.Добавить("12", "12 - Авансы полученные за товары, права, п.3,4,5.1 статьи 154, пп.1-4 статьи 155 НК");
		СписокВыбора.Добавить("13", "13 - Капитальное строительство, модернизация (реконструкция) объектов недвижимости");
		
		Если ИспользоватьКоды2015 Тогда
			Если ИспользоватьДополнительныеКоды Тогда
				СписокВыбора.Добавить("18", "18 - Изменение стоимости полученных товаров (работ, услуг) в сторону уменьшения");	
				СписокВыбора.Добавить("21", "21 - Восстановление НДС, п.8 статьи 145, п.3 статьи 170, статья 171.1 НК, а также при операциях, облагаемых по ставке 0%");
				СписокВыбора.Добавить("26", "26 - Счета-фактуры не составляются по письменному согласию сторон");
			КонецЕсли;
			СписокВыбора.Добавить("27", "27 - Сводный комиссионный счет-фактура, п.3.1 статьи 169 НК");
			СписокВыбора.Добавить("28", "28 - Сводный комиссионный счет-фактура на аванс, п.3.1 статьи 169 НК");
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	ПЕЧАТЬ СЧЕТОВ-ФАКТУР

Процедура УстановкаМинимальныхПолейДляПечати(ТабличныйДокумент)

	// Принудительная установка минимальных полей
	Если ТабличныйДокумент.ПолеСлева < 10 Тогда
		ТабличныйДокумент.ПолеСлева = 10;
	КонецЕсли; 
	
	// Проверка на веб-клиент
	СисИнфо = Новый СистемнаяИнформация;
	ЗначениеПоляСправа = ?(ПустаяСтрока(СисИнфо.ИнформацияПрограммыПросмотра), 5, 10); 
		
	Если ТабличныйДокумент.ПолеСправа < ЗначениеПоляСправа Тогда
		ТабличныйДокумент.ПолеСправа = ЗначениеПоляСправа;
	КонецЕсли; 

	Если ТабличныйДокумент.ПолеСверху < 5 Тогда
		ТабличныйДокумент.ПолеСверху = 5;
	КонецЕсли; 

	Если ТабличныйДокумент.ПолеСнизу < 5 Тогда
		ТабличныйДокумент.ПолеСнизу = 5;
	КонецЕсли; 	

КонецПроцедуры

Функция ПечатьСчетовФактур1137(МассивОбъектов, ОбъектыПечати, ТекстЗапросаПоСчетамФактурам) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб	= Истина;
	ТабДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ЭкземпляровНаСтранице = 1;
	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураВыданный_СчетФактура1137";
	
	УстановкаМинимальныхПолейДляПечати(ТабДокумент);
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_СчетФактура1137");
	
	ДанныеСчетовФактур = ПолучитьДанныеДляПечатиСчетаФактуры1137(МассивОбъектов, ТекстЗапросаПоСчетамФактурам);
	
	ПервыйДокумент = Истина;
	
	Для Каждого ВыборкаСФ ИЗ ДанныеСчетовФактур Цикл
		
		ТаблицаДокумента = ВыборкаСФ.ТаблицаДокумента;
		Если ТаблицаДокумента = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		ВывестиСчетФактуруВТабличныйДокумент(ТабДокумент, Макет, ВыборкаСФ);
		
		// В табличном документе зададим имя области, в которую был выведен объект.
		// Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент,
			НомерСтрокиНачало, ОбъектыПечати, ВыборкаСФ.СчетФактура);

	КонецЦикла;

	Возврат ТабДокумент;

КонецФункции

Процедура ВывестиСчетФактуруВТабличныйДокумент(ТабДокумент, Макет, ВыборкаСФ, ЭтоУниверсальныйПередаточныйДокумент = Ложь)
	
	ТаблицаДокумента = ВыборкаСФ.ТаблицаДокумента;
	
	// Вывод шапки

	ДанныеШапки   = ВыборкаСФ.ДанныеШапки;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(ДанныеШапки);
	
	Если ЭтоУниверсальныйПередаточныйДокумент Тогда
		
		НомерСчетаФактуры = "Универсальный передаточный документ № " + ДанныеШапки.Номер + " от " + Формат(ДанныеШапки.Дата, "ДЛФ='ДД'");
		
		ОбластьМакета.Параметры.Номер = ДанныеШапки.Номер;
		ОбластьМакета.Параметры.Дата  = Формат(ДанныеШапки.Дата, "ДЛФ='ДД'");
		
		ОбластьМакета.Параметры.НомерИсправления = ДанныеШапки.НомерИсправления;
		ОбластьМакета.Параметры.ДатаИсправления  = Формат(ДанныеШапки.ДатаИсправления, "ДЛФ='ДД'");
		
		ОбластьМакета.Параметры.ПоДокументу = ДанныеШапки.ПоДокументу;
		ОбластьМакета.Параметры.Валюта = ДанныеШапки.ВалютаНаименование;
		
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ДанныеШапки.ПредставлениеПоставщика;
		ОбластьМакета.Параметры.ИННПоставщика = ?(ДанныеШапки.Свойство("ИННКПППоставщика"), 
			ДанныеШапки.ИННКПППоставщика, 
			"" + ДанныеШапки.ИННПоставщика + ?(ЗначениеЗаполнено(ДанныеШапки.КПППоставщика), "/" + ДанныеШапки.КПППоставщика, ""));
		ОбластьМакета.Параметры.АдресПоставщика = ДанныеШапки.АдресПоставщика;
		ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = ДанныеШапки.ПредставлениеГрузоотправителя;
		
		ОбластьМакета.Параметры.ПредставлениеПокупателя = ДанныеШапки.ПредставлениеПокупателя;
		ОбластьМакета.Параметры.ИННПокупателя = ?(ДанныеШапки.Свойство("ИННКПППокупателя"), 
			ДанныеШапки.ИННКПППокупателя, 
			"" + ДанныеШапки.ИННПокупателя + ?(ЗначениеЗаполнено(ДанныеШапки.КПППокупателя), "/" + ДанныеШапки.КПППокупателя, ""));
		ОбластьМакета.Параметры.АдресПокупателя = ДанныеШапки.АдресПокупателя;
		ОбластьМакета.Параметры.ПредставлениеГрузополучателя = ДанныеШапки.ПредставлениеГрузополучателя;
		
	Иначе
		
		НомерСчетаФактуры = "Счет-фактура № " + ДанныеШапки.Номер + " от " + Формат(ДанныеШапки.Дата, "ДЛФ='ДД'");
		
		ОбластьМакета.Параметры.Номер = НомерСчетаФактуры;
		ОбластьМакета.Параметры.НомерИсправления = "Исправление № " + ДанныеШапки.НомерИсправления + " от " + Формат(ДанныеШапки.ДатаИсправления, "ДЛФ='ДД'");
		ОбластьМакета.Параметры.ПредставлениеПоставщика = "Продавец: " + ДанныеШапки.ПредставлениеПоставщика;
		ОбластьМакета.Параметры.АдресПоставщика = "Адрес: " + ДанныеШапки.АдресПоставщика;
		ОбластьМакета.Параметры.ИННПоставщика = "ИНН/КПП продавца: " + ?(ДанныеШапки.Свойство("ИННКПППоставщика"), 
			ДанныеШапки.ИННКПППоставщика, 
			"" + ДанныеШапки.ИННПоставщика + ?(ЗначениеЗаполнено(ДанныеШапки.КПППоставщика), "/" + ДанныеШапки.КПППоставщика, ""));
		ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = "Грузоотправитель и его адрес: " + ДанныеШапки.ПредставлениеГрузоотправителя;
		ОбластьМакета.Параметры.ПредставлениеГрузополучателя = "Грузополучатель и его адрес: " + ДанныеШапки.ПредставлениеГрузополучателя;
		ОбластьМакета.Параметры.ПоДокументу = "К платежно-расчетному документу № " + ДанныеШапки.ПоДокументу;
		ОбластьМакета.Параметры.ПредставлениеПокупателя = "Покупатель: " + ДанныеШапки.ПредставлениеПокупателя;
		ОбластьМакета.Параметры.АдресПокупателя = "Адрес: " + ДанныеШапки.АдресПокупателя;
		ОбластьМакета.Параметры.ИННПокупателя = "ИНН/КПП покупателя: " + ?(ДанныеШапки.Свойство("ИННКПППокупателя"), 
			ДанныеШапки.ИННКПППокупателя, 
			"" + ДанныеШапки.ИННПокупателя + ?(ЗначениеЗаполнено(ДанныеШапки.КПППокупателя), "/" + ДанныеШапки.КПППокупателя, ""));
		ОбластьМакета.Параметры.Валюта = "Валюта: наименование, код " + ДанныеШапки.ВалютаНаименование;
		
	КонецЕсли;
	
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывод информации о комиссионере по договорам комиссии на закупку
	
	Если НЕ ЭтоУниверсальныйПередаточныйДокумент И ЗначениеЗаполнено(ДанныеШапки.ПредставлениеКомиссионера) Тогда
	
		ОбластьМакета = Макет.ПолучитьОбласть("РеквизитыКомиссионера");
		ОбластьМакета.Параметры.ПредставлениеКомиссионера = ДанныеШапки.ПредставлениеКомиссионера;
		ТабДокумент.Вывести(ОбластьМакета);
	
	КонецЕсли;

	// Вывод заголовка таблицы

	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывод табличной части
	
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	
	КоличествоСтраниц = 1;
	
	СчетФактураБезНДС = Истина;
	НДСНеВыставляетя  = Истина;
	
	НомерСтроки = 0;
	НомерЛиста = 1;
	КоличествоСтрок = ТаблицаДокумента.Количество();
	Для каждого СтрокаДокумента Из ТаблицаДокумента Цикл
		
		НомерСтроки = НомерСтроки + 1;
		СтрокаДокумента.НомерСтроки = НомерСтроки;
		
		ОбластьМакета.Параметры.Заполнить(СтрокаДокумента);
		
		Если НЕ ЗначениеЗаполнено(СтрокаДокумента.СтавкаНДС) Тогда
			ОбластьМакета.Параметры.СтавкаНДС = "--";
			Если СтрокаДокумента.СуммаНДС = 0 Тогда
				ОбластьМакета.Параметры.СуммаНДС = "--";
			КонецЕсли;
		КонецЕсли;
		
		ДозаполнитьСтрокуСчетаФактуры1137(ОбластьМакета, ВыборкаСФ.ВидСчетаФактуры);
		
		Если НЕ ПроверитьВыводСчетаФактурыНаСтраницу(ТабДокумент, ОбластьМакета, (НомерСтроки = КоличествоСтрок), Макет, НомерЛиста, НомерСчетаФактуры, ЭтоУниверсальныйПередаточныйДокумент) Тогда
			КоличествоСтраниц = КоличествоСтраниц + 1;
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		СчетФактураБезНДС = СчетФактураБезНДС И СтрокаДокумента.СуммаНДС = 0
			И СтрокаДокумента.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		
		НДСНеВыставляетя = НДСНеВыставляетя И СтрокаДокумента.СуммаНДС = 0
			И НЕ ЗначениеЗаполнено(СтрокаДокумента.СтавкаНДС);
		
	КонецЦикла;

	ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,,ТабДокумент.ВысотаТаблицы,).ВместеСоСледующим = Истина;
	
	// Вывод итоговых сумм

	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	Если ВыборкаСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
		ИЛИ ВыборкаСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
		ОбластьМакета.Параметры.ИтогоСтоимость = "--";
	Иначе
		ОбластьМакета.Параметры.ИтогоСтоимость = ТаблицаДокумента.Итог("Стоимость");
	КонецЕсли;
	
	Если НДСНеВыставляетя Тогда
		ОбластьМакета.Параметры.ИтогоСуммаНДС = "--";
	ИначеЕсли СчетФактураБезНДС Тогда
		ОбластьМакета.Параметры.ИтогоСуммаНДС = "без НДС";
	Иначе
		ОбластьМакета.Параметры.ИтогоСуммаНДС = ТаблицаДокумента.Итог("СуммаНДС");
	КонецЕсли;
	
	ОбластьМакета.Параметры.ИтогоВсего = ТаблицаДокумента.Итог("Всего");
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывод подвала
	КоличествоЛистов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Документ составлен на%1%2 %3'"), Символы.ПС, КоличествоСтраниц,
		ОбщегоНазначенияБПКлиентСервер.ФормаМножественногоЧисла(
			НСтр("ru = 'листе'"), НСтр("ru = 'листах'"), НСтр("ru = 'листах'"), КоличествоСтраниц));
	
	ДанныеШапки.Вставить("КоличествоЛистов", КоличествоЛистов);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.Заполнить(ДанныеШапки);
	ТабДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры

Процедура ДозаполнитьСтрокуСчетаФактуры1137(ОбластьМакета, ВидСчетаФактуры)

	Если ОбластьМакета.Параметры.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
		ОбластьМакета.Параметры.СтавкаНДС = "без НДС";
		ОбластьМакета.Параметры.СуммаНДС  = "без НДС";
	КонецЕсли;
		
	// Проставляем прочерки в незаполненные графы в соответствии с Постановлением 1137
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
		
		ОбластьМакета.Параметры.ЕдиницаИзмерения    = "--";
		ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "--";
		
		ОбластьМакета.Параметры.Количество = "--";
		ОбластьМакета.Параметры.Цена       = "--";
		ОбластьМакета.Параметры.Стоимость  = "--";
		ОбластьМакета.Параметры.Акциз      = "--";
		
		ОбластьМакета.Параметры.СтранаПроисхожденияКод = "--";
		ОбластьМакета.Параметры.ПредставлениеСтраны    = "--";
		ОбластьМакета.Параметры.ПредставлениеГТД       = "--";
		
	Иначе
		
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ЕдиницаИзмерения) Тогда
			ОбластьМакета.Параметры.ЕдиницаИзмерения    = "--";
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "--";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ЕдиницаИзмеренияКод) Тогда
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "--";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.Количество) Тогда
			ОбластьМакета.Параметры.Количество = "--";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.Цена) Тогда
			ОбластьМакета.Параметры.Цена = "--";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ПредставлениеСтраны) Тогда
			ОбластьМакета.Параметры.СтранаПроисхожденияКод = "--";
			ОбластьМакета.Параметры.ПредставлениеСтраны    = "--";
			ОбластьМакета.Параметры.ПредставлениеГТД       = "--";
		КонецЕсли; 
		
	КонецЕсли;

КонецПроцедуры

Функция ПроверитьВыводСчетаФактурыНаСтраницу(ТабДокумент, ОбластьТекСтроки, ЭтоПоследняяСтрока, Макет, НомерЛиста, НомерСчетаФактуры, ЭтоУниверсальныйПередаточныйДокумент = Ложь)
	
	// Проверим возможность вывода табличного документа
	СтрокаСПодвалом = Новый Массив;
	СтрокаСПодвалом.Добавить(ОбластьТекСтроки);
	Если ЭтоПоследняяСтрока Тогда
		// Если последняя строка, то должен поместиться еще итог и подвал
		СтрокаСПодвалом.Добавить(Макет.ПолучитьОбласть("Итого"));
		СтрокаСПодвалом.Добавить(Макет.ПолучитьОбласть("Подвал"));
		Если ЭтоУниверсальныйПередаточныйДокумент Тогда
			СтрокаСПодвалом.Добавить(Макет.ПолучитьОбласть("ПодвалНакладной"));
		КонецЕсли;
	КонецЕсли;
	
	РезультатПроверки = ОбщегоНазначенияБПВызовСервера.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом);
	
	Если НЕ РезультатПроверки Тогда
		// Вывод разделителя и заголовка таблицы на новой странице
		
		НомерЛиста = НомерЛиста + 1;
		
		ОбластьНумерацияЛистов = Макет.ПолучитьОбласть("НумерацияЛистов");
		ОбластьНумерацияЛистов.Параметры.Номер = НомерСчетаФактуры;
		ОбластьНумерацияЛистов.Параметры.НомерЛиста = НомерЛиста;
		
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		ТабДокумент.Вывести(ОбластьНумерацияЛистов);
		ТабДокумент.Вывести(Макет.ПолучитьОбласть("ЗаголовокТаблицы"));
		
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ПечатьКорректировочныхСчетовФактур1137(МассивОбъектов, ОбъектыПечати, ТекстЗапросаПоСчетамФактурам) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ИмяПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураВыданный_КорректировочныйСчетФактура1137";

	УстановкаМинимальныхПолейДляПечати(ТабДокумент);
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_КорректировочныйСчетФактура1137");

	ДанныеСчетовФактур = ПолучитьДанныеДляПечатиКорректировочныхСчетовФактур1137(МассивОбъектов, ТекстЗапросаПоСчетамФактурам);
	
	ПервыйДокумент = Истина;
	
	Для Каждого ВыборкаСФ ИЗ ДанныеСчетовФактур Цикл

		ТаблицаДокумента = ВыборкаСФ.ТаблицаДокумента;
		Если ТаблицаДокумента = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;

		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		ВывестиКорректировочныйСчетФактуруВТабличныйДокумент(ТабДокумент, Макет, ВыборкаСФ);

		// В табличном документе зададим имя области, в которую был выведен объект.
		// Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент,
			НомерСтрокиНачало, ОбъектыПечати, ВыборкаСФ.СчетФактура);

	КонецЦикла;

	Возврат ТабДокумент;

КонецФункции

Функция ПечатьКорректировочныхСчетовФактур952(МассивОбъектов, ОбъектыПечати, ТекстЗапросаПоСчетамФактурам) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ИмяПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураВыданный_КорректировочныйСчетФактура952";

	УстановкаМинимальныхПолейДляПечати(ТабДокумент);
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_КорректировочныйСчетФактура952");

	ДанныеСчетовФактур = ПолучитьДанныеДляПечатиКорректировочныхСчетовФактур1137(МассивОбъектов, ТекстЗапросаПоСчетамФактурам);
	
	ПервыйДокумент = Истина;
	
	Для Каждого ВыборкаСФ ИЗ ДанныеСчетовФактур Цикл

		ТаблицаДокумента = ВыборкаСФ.ТаблицаДокумента;
		Если ТаблицаДокумента = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;

		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		ВывестиКорректировочныйСчетФактуруВТабличныйДокумент(ТабДокумент, Макет, ВыборкаСФ);

		// В табличном документе зададим имя области, в которую был выведен объект.
		// Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент,
			НомерСтрокиНачало, ОбъектыПечати, ВыборкаСФ.СчетФактура);

	КонецЦикла;

	Возврат ТабДокумент;

КонецФункции

Процедура ВывестиКорректировочныйСчетФактуруВТабличныйДокумент(ТабДокумент, Макет, ВыборкаСФ, ЭтоУниверсальныйКорректировочныйДокумент = Ложь)
	
	ТаблицаДокумента = ВыборкаСФ.ТаблицаДокумента;
	
	// Вывод шапки
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ДанныеШапки   = ВыборкаСФ.ДанныеШапки;
	
	Если ЭтоУниверсальныйКорректировочныйДокумент Тогда
		
		НомерСчетаФактуры = "Универсальный корректировочноый документ № " + ДанныеШапки.Номер + " от " + Формат(ДанныеШапки.Дата, "ДЛФ='ДД'");
		
		НомерСчетаФактуры = ДанныеШапки.Номер;
		ДатаСчетаФактуры = Формат(ДанныеШапки.Дата, "ДЛФ=ДД; ДП=--");
		ОбластьМакета.Параметры.Номер = НомерСчетаФактуры;
		ОбластьМакета.Параметры.Дата  = ДатаСчетаФактуры;
		
		ОбластьМакета.Параметры.НомерИсправленияКорректировочного = ДанныеШапки.НомерИсправленияКорректировочного;
		ОбластьМакета.Параметры.ДатаИсправленияКорректировочного  = Формат(ДанныеШапки.ДатаИсправленияКорректировочного, "ДЛФ=ДД; ДП=--");
		
		Если ДанныеШапки.ТаблицаРеквизитовОснований.Количество() > 0 Тогда
			Основание = ДанныеШапки.ТаблицаРеквизитовОснований[0];
			ОбластьМакета.Параметры.НомерОснования 				= Основание.НомерСчетаФактуры;
			ОбластьМакета.Параметры.ДатаОсновнания  			= Формат(Основание.ДатаСчетаФактуры, "ДЛФ=ДД; ДП=--");
			ОбластьМакета.Параметры.НомерИсправленияОснования 	= Основание.НомерИсправления;
			ОбластьМакета.Параметры.ДатаИсправленияОснования  	= Формат(Основание.ДатаИсправления, "ДЛФ=ДД; ДП=--");
		Иначе
			ОбластьМакета.Параметры.НомерОснования 				= "--";
			ОбластьМакета.Параметры.ДатаОсновнания  			= "--";
			ОбластьМакета.Параметры.НомерИсправленияОснования 	= "--";
			ОбластьМакета.Параметры.ДатаИсправленияОснования  	= "--";
		КонецЕсли;
		
		ОбластьМакета.Параметры.Валюта = ДанныеШапки.ВалютаНаименованиеУКД;
		
		ОбластьМакета.Параметры.СтатусУКД  = ДанныеШапки.СтатусУКД;
		
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ДанныеШапки.НаименованиеПродавца;
		ОбластьМакета.Параметры.ИННПоставщика = ДанныеШапки.ИННПродавца + ?(ЗначениеЗаполнено(ДанныеШапки.КПППродавца), "/" + ДанныеШапки.КПППродавца, "");
		ОбластьМакета.Параметры.АдресПоставщика = ДанныеШапки.АдресПродавца;
		
		ОбластьМакета.Параметры.ПредставлениеПокупателя = ДанныеШапки.НаименованиеПокупателя;
		ОбластьМакета.Параметры.ИННПокупателя = ДанныеШапки.ИННПокупателя + ?(ЗначениеЗаполнено(ДанныеШапки.КПППокупателя), "/" + ДанныеШапки.КПППокупателя, "");
		ОбластьМакета.Параметры.АдресПокупателя = ДанныеШапки.АдресПокупателя;
		
	Иначе
		НомерСчетаФактуры = ДанныеШапки.Номер;
		ДатаСчетаФактуры = Формат(ДанныеШапки.Дата, "ДЛФ=ДД; ДП=--");
		ОбластьМакета.Параметры.Номер = НомерСчетаФактуры;
		ОбластьМакета.Параметры.Дата  = ДатаСчетаФактуры;
		ОбластьМакета.Параметры.НомерИсправленияКорректировочного = ДанныеШапки.НомерИсправленияКорректировочного;
		ОбластьМакета.Параметры.ДатаИсправленияКорректировочного = Формат(ДанныеШапки.ДатаИсправленияКорректировочного, "ДЛФ=ДД; ДП=--");
		
		РеквизитыОснований = "";
		
		Для каждого Основание Из ДанныеШапки.ТаблицаРеквизитовОснований Цикл
			РеквизитыОснований = ?(РеквизитыОснований = "", РеквизитыОснований,РеквизитыОснований + ", ") + "№ " + Основание.НомерСчетаФактуры + " от " 
			+ Формат(Основание.ДатаСчетаФактуры, "ДЛФ=ДД; ДП=--") + ", с учетом исправления № "
			+ Основание.НомерИсправления + " от " + Формат(Основание.ДатаИсправления, "ДЛФ=ДД; ДП=--");	
		КонецЦикла;
		
		ОбластьМакета.Параметры.РеквизитыОснований = РеквизитыОснований;
		ОбластьМакета.Параметры.НаименованиеПродавца = ДанныеШапки.НаименованиеПродавца;
		ОбластьМакета.Параметры.АдресПродавца = ДанныеШапки.АдресПродавца;
		ОбластьМакета.Параметры.ИННКПППродавца = ДанныеШапки.ИННКПППродавца;
		ОбластьМакета.Параметры.НаименованиеПокупателя = ДанныеШапки.НаименованиеПокупателя;
		ОбластьМакета.Параметры.АдресПокупателя = ДанныеШапки.АдресПокупателя;
		ОбластьМакета.Параметры.ИННКПППокупателя = ДанныеШапки.ИННКПППокупателя;
		ОбластьМакета.Параметры.Валюта = ДанныеШапки.ВалютаНаименование;
		
	КонецЕсли;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Вывод информации о комиссионере по договорам комиссии на закупку
	
	Если (НЕ ЭтоУниверсальныйКорректировочныйДокумент) и ЗначениеЗаполнено(ДанныеШапки.ПредставлениеКомиссионера) Тогда
		
		ОбластьМакета = Макет.ПолучитьОбласть("РеквизитыКомиссионера");
		ОбластьМакета.Параметры.ПредставлениеКомиссионера = ДанныеШапки.ПредставлениеКомиссионера;
		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЕсли;
	
	// Вывод заголовка таблицы
	
	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ДанныеШапки   = ВыборкаСФ.ДанныеШапки;
	ОбластьМакета.Параметры.Заполнить(ДанныеШапки);
	ТабДокумент.Вывести(ОбластьМакета);
	
	НомерСтроки = 0;
	НомерЛиста = 1;
	КоличествоСтрок = ТаблицаДокумента.Количество();
	
	// Вывод табличной части
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	Для каждого СтрокаДокумента Из ТаблицаДокумента Цикл
		
		НомерСтроки = НомерСтроки + 1;
		СтрокаДокумента.НомерСтроки = НомерСтроки;

		ОбластьМакета.Параметры.Заполнить(СтрокаДокумента);
		ДозаполнитьСтрокуКорректировочногоСчетаФактуры1137(ОбластьМакета);
		
		Если ЭтоУниверсальныйКорректировочныйДокумент Тогда
			
			Если ДанныеШапки.СтатусУКД = 2 Тогда
				ОбластьМакета.Параметры.СтавкаНДС 	= "--";
				ОбластьМакета.Параметры.Акциз 		= "--";
				ОбластьМакета.Параметры.СуммаНДСДоИзменения = "--";
				ОбластьМакета.Параметры.СуммаНДСПослеИзменения = "--";
				ОбластьМакета.Параметры.РазницаНДСУвеличение = "--";
				ОбластьМакета.Параметры.РазницаНДСУменьшение = "--";
			Иначе
				ОбластьМакета.Параметры.Акциз = "без акциза";
			КонецЕсли;
			
		КонецЕсли;
		
		ПроверитьВыводКорректировочногоСчетаФактурыНаСтраницу(
			ТабДокумент, ОбластьМакета, (НомерСтроки = КоличествоСтрок), Макет, НомерЛиста, НомерСчетаФактуры, ДатаСчетаФактуры, ЭтоУниверсальныйКорректировочныйДокумент);
		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;
	
	// Вывод итоговых сумм
	
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.РазницаБезНДСУменьшение	= ТаблицаДокумента.Итог("РазницаБезНДСУменьшение");
	ОбластьМакета.Параметры.РазницаБезНДСУвеличение	= ТаблицаДокумента.Итог("РазницаБезНДСУвеличение");
	ОбластьМакета.Параметры.РазницаСНДСУменьшение   = ТаблицаДокумента.Итог("РазницаСНДСУменьшение");
	ОбластьМакета.Параметры.РазницаСНДСУвеличение   = ТаблицаДокумента.Итог("РазницаСНДСУвеличение");
	Если ЭтоУниверсальныйКорректировочныйДокумент И ДанныеШапки.СтатусУКД = 2 Тогда
		ОбластьМакета.Параметры.РазницаНДСУменьшение = "--";
		ОбластьМакета.Параметры.РазницаНДСУвеличение = "--";		
	ИначеЕсли ВыборкаСФ.СчетФактураБезНДС Тогда
		ОбластьМакета.Параметры.РазницаНДСУменьшение = "без НДС";
		ОбластьМакета.Параметры.РазницаНДСУвеличение = "без НДС";
	Иначе
		ОбластьМакета.Параметры.РазницаНДСУменьшение    = ТаблицаДокумента.Итог("РазницаНДСУменьшение");
		ОбластьМакета.Параметры.РазницаНДСУвеличение    = ТаблицаДокумента.Итог("РазницаНДСУвеличение");
	КонецЕсли;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Вывод подвала
	
	КоличествоЛистов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Документ составлен на%1%2 %3'"), Символы.ПС, НомерЛиста,
		ОбщегоНазначенияБПКлиентСервер.ФормаМножественногоЧисла(
			НСтр("ru = 'листе'"), НСтр("ru = 'листах'"), НСтр("ru = 'листах'"), НомерЛиста));
			
	ДанныеШапки.Вставить("КоличествоЛистов", КоличествоЛистов);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.Заполнить(ДанныеШапки);
	ТабДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры

Процедура ДозаполнитьСтрокуКорректировочногоСчетаФактуры1137(ОбластьМакета)

	Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.НаименованиеЕдиницыИзмерения) Тогда
		ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "--";
		ОбластьМакета.Параметры.НаименованиеЕдиницыИзмерения = "--";
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.КоличествоДоИзменения) Тогда
		ОбластьМакета.Параметры.КоличествоДоИзменения = "--";
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.КоличествоПослеИзменения) Тогда
		ОбластьМакета.Параметры.КоличествоПослеИзменения = "--";
	КонецЕсли;	
	       		
	Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ЦенаДоИзменения) Тогда
		ОбластьМакета.Параметры.ЦенаДоИзменения = "--";
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ЦенаПослеИзменения) Тогда
		ОбластьМакета.Параметры.ЦенаПослеИзменения = "--";
	КонецЕсли;	
	          		
	Если ОбластьМакета.Параметры.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
		ОбластьМакета.Параметры.СтавкаНДС = "без НДС";
		ОбластьМакета.Параметры.СуммаНДСДоИзменения = "без НДС";
		ОбластьМакета.Параметры.СуммаНДСПослеИзменения = "без НДС";
		ОбластьМакета.Параметры.РазницаНДСУвеличение = "--";
		ОбластьМакета.Параметры.РазницаНДСУменьшение = "--";
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьВыводКорректировочногоСчетаФактурыНаСтраницу(ТабДокумент, ОбластьТекСтроки, ЭтоПоследняяСтрока, Макет, НомерЛиста, НомерСчетаФактуры, ДатаСчетаФактуры, ЭтоУниверсальныйКорректировочныйДокумент = Ложь)
	
	// Проверим возможность вывода табличного документа
	СтрокаСПодвалом = Новый Массив;
	СтрокаСПодвалом.Добавить(ОбластьТекСтроки);
	
	Если ЭтоПоследняяСтрока Тогда
		// Если последняя строка, то должен поместиться еще итог
		СтрокаСПодвалом.Добавить(Макет.ПолучитьОбласть("Подвал"));
		СтрокаСПодвалом.Добавить(Макет.ПолучитьОбласть("Итого"));
		Если ЭтоУниверсальныйКорректировочныйДокумент Тогда
			СтрокаСПодвалом.Добавить(Макет.ПолучитьОбласть("ПодвалНакладной"));
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ОбщегоНазначенияБПВызовСервера.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда
		// Вывод разделителя и заголовка таблицы на новой странице
		
		НомерЛиста = НомерЛиста + 1;
		
		ОбластьНумерацияЛистов = Макет.ПолучитьОбласть("НумерацияЛистов");
		ОбластьНумерацияЛистов.Параметры.Номер = НомерСчетаФактуры;
		ОбластьНумерацияЛистов.Параметры.Дата = ДатаСчетаФактуры;
		ОбластьНумерацияЛистов.Параметры.НомерЛиста = НомерЛиста;
		
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		ТабДокумент.Вывести(ОбластьНумерацияЛистов);
		ТабДокумент.Вывести(Макет.ПолучитьОбласть("ЗаголовокТаблицы"));
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьДанныеШапкиСчетаФактуры1137(ВыборкаСФ, Реквизиты, ПлатежноРасчетныеДокументы, ДополнитьДаннымиУПД)

	ДанныеШапки = Новый Структура;
	
	// Номер и дата
	Если ВыборкаСФ.УдалитьПрефиксыИзНомера Тогда
		Номер = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаСФ.Номер, Истина, Ложь);
	Иначе
		Номер = ВыборкаСФ.Номер;
	КонецЕсли;
	
	// Дополняем номер индексом обособленного подразделения (при необходимости)
	Если ЗначениеЗаполнено(Реквизиты.ЦифровойИндексОбособленногоПодразделения)
		И ВыборкаСФ.ЭтоСчетФактураВыданный
		И ЗначениеЗаполнено(ВыборкаСФ.ВидСчетаФактуры) Тогда
		Номер = Номер + "/" + Реквизиты.ЦифровойИндексОбособленногоПодразделения;
	КонецЕсли;
		
	ДанныеШапки.Вставить("Номер", СокрЛП(Номер));
	ДанныеШапки.Вставить("Дата", ВыборкаСФ.Дата);
	
	// Номер и дата исправления
	ДанныеШапки.Вставить("Исправление", ВыборкаСФ.Исправление);
	Если ВыборкаСФ.Исправление Тогда
		ДанныеШапки.Вставить("НомерИсправления", ВыборкаСФ.НомерИсправления);
		ДанныеШапки.Вставить("ДатаИсправления", ВыборкаСФ.ДатаИсправления);
	Иначе 	
		ДанныеШапки.Вставить("НомерИсправления", "--");
		ДанныеШапки.Вставить("ДатаИсправления", "--");
	КонецЕсли;

	ДанныеШапки.Вставить("Поставщик", Реквизиты.Поставщик);

	Если Реквизиты.СводныйСФКомиссияПоЗакупке Тогда
		
		СведенияОПоставщике = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Реквизиты.Организация, ВыборкаСФ.ДатаСведений);
		
		ДанныеШапки.Вставить("ПредставлениеПоставщика", Реквизиты.Поставщик);
		
		ДанныеШапки.Вставить("АдресПоставщика", Реквизиты.АдресПоставщика);
		
		ДанныеШапки.Вставить("ИННКППпоставщика", Реквизиты.ИННКППпоставщика);
		
	Иначе	
		
		СведенияОПоставщике = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Реквизиты.Поставщик, ВыборкаСФ.ДатаСведений);
		
		ДанныеШапки.Вставить("ПредставлениеПоставщика", ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "НаименованиеДляПечатныхФорм,"));
		
		// Адрес продавца
		ДанныеШапки.Вставить("АдресПоставщика", ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес,"));
		
	КонецЕсли;
	
	ДанныеШапки.Вставить("ИННпоставщика", Реквизиты.ИННпоставщика);
	
	Если НЕ ВыборкаСФ.ЭтоСчетФактураВыданный И ЗначениеЗаполнено(ВыборкаСФ.КППСчетаФактуры) Тогда
		КППпоставщика = ВыборкаСФ.КППСчетаФактуры;
	Иначе
		КПППоставщика = УчетНДСБП.КППНаДату(Реквизиты.ОбособленноеПодразделениеПоставщика, ВыборкаСФ.ДатаСведений);
	КонецЕсли;
	
	ДанныеШапки.Вставить("КППпоставщика", КППпоставщика);
	
	// Наименование покупателя
	ДанныеШапки.Вставить("Покупатель", Реквизиты.Покупатель);
	
	Если Реквизиты.СводныйСФКомиссияПоПродаже Тогда
		
		ДанныеШапки.Вставить("ПредставлениеПокупателя", Реквизиты.Покупатель);
		
		ДанныеШапки.Вставить("АдресПокупателя", Реквизиты.АдресПокупателя);
		
		ДанныеШапки.Вставить("ИННКПППокупателя", Реквизиты.ИННКППпокупателя);

	Иначе
		
		СведенияОПокупателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Реквизиты.Покупатель, ВыборкаСФ.ДатаСведений);
		
		ДанныеШапки.Вставить("ПредставлениеПокупателя", ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "НаименованиеДляПечатныхФорм,"));
		
		// Адрес покупателя
		ДанныеШапки.Вставить("АдресПокупателя", ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес,"));
			
	КонецЕсли;
	
	ДанныеШапки.Вставить("ИННпокупателя", Реквизиты.ИННпокупателя);
	
	Если ВыборкаСФ.ЭтоСчетФактураВыданный И ЗначениеЗаполнено(ВыборкаСФ.КППСчетаФактуры) Тогда
		КППпокупателя = ВыборкаСФ.КППСчетаФактуры;
	Иначе
		КППпокупателя = УчетНДСБП.КППНаДату(Реквизиты.ОбособленноеПодразделениеПокупателя, ВыборкаСФ.ДатаСведений);
	КонецЕсли;
	
	ДанныеШапки.Вставить("КППпокупателя", КППпокупателя);
	
	// Грузоотправитель
	Если ВыборкаСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
		ИЛИ ВыборкаСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента
		ИЛИ ВыборкаСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку Тогда
		Грузоотправитель = Неопределено;
		ПредставлениеГрузоотправителя = "--";
	ИначеЕсли Реквизиты.ЕстьТовары 
		И ЗначениеЗаполнено(Реквизиты.Грузоотправитель) Тогда
		Если ТипЗнч(Реквизиты.Грузоотправитель) = Тип("Строка") Тогда
			ПредставлениеГрузоотправителя = Реквизиты.Грузоотправитель;
		Иначе
			СведенияОГрузоотправителе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Реквизиты.Грузоотправитель, ВыборкаСФ.Дата);
			ПредставлениеГрузоотправителя = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(
				СведенияОГрузоотправителе, "НаименованиеДляПечатныхФорм,ФактическийАдрес,");
		КонецЕсли;
		Грузоотправитель = Реквизиты.Грузоотправитель;	
	Иначе
		Грузоотправитель = Неопределено;
		ПредставлениеГрузоотправителя = "--";
	КонецЕсли;
	ДанныеШапки.Вставить("Грузоотправитель", Грузоотправитель);
	ДанныеШапки.Вставить("ПредставлениеГрузоотправителя", ПредставлениеГрузоотправителя);

	// Грузополучатель
	Если ВыборкаСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
		ИЛИ ВыборкаСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
		Грузополучатель = Неопределено;
		ПредставлениеГрузополучателя = "--";
	ИначеЕсли Реквизиты.ЕстьТовары 
		И ЗначениеЗаполнено(Реквизиты.Грузополучатель) Тогда
		Если ТипЗнч(Реквизиты.Грузополучатель) = Тип("Строка") Тогда
			ПредставлениеГрузополучателя = Реквизиты.Грузополучатель;
		Иначе
			СведенияОГрузополучателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Реквизиты.Грузополучатель, ВыборкаСФ.ДатаСведений);
			Если Реквизиты.АдресДоставки <> "" Тогда 
				СведенияОГрузополучателе.ФактическийАдрес = Реквизиты.АдресДоставки;
			КонецЕсли;
			ПредставлениеГрузополучателя = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(
				СведенияОГрузополучателе, "НаименованиеДляПечатныхФорм,ФактическийАдрес,");
		КонецЕсли;
		Грузополучатель = Реквизиты.Грузополучатель;
	Иначе
		Грузополучатель = Неопределено;
		ПредставлениеГрузополучателя = "--";
	КонецЕсли;
	ДанныеШапки.Вставить("Грузополучатель", Грузополучатель);
	ДанныеШапки.Вставить("ПредставлениеГрузополучателя", ПредставлениеГрузополучателя);
	
	// Платежно-расчетный документ
	ПоДокументу = "";
	Если ПлатежноРасчетныеДокументы <> Неопределено Тогда
		ТаблицаПлатежныхДокументов = ПлатежноРасчетныеДокументы.СкопироватьКолонки();
		Если ТипЗнч(ПлатежноРасчетныеДокументы) = Тип("ТаблицаЗначений") Тогда
			Отбор = Новый Структура("СчетФактура", ВыборкаСФ.СчетФактура);
			НайденныеСтроки = ПлатежноРасчетныеДокументы.НайтиСтроки(Отбор);
			РазделятьПоКонтрагентам = ТаблицаПлатежныхДокументов.Колонки.Найти("Контрагент") <> Неопределено;
			ПредыдущийКонтрагент = Справочники.Контрагенты.ПустаяСсылка();
			Для каждого ДокументОплаты Из НайденныеСтроки Цикл
				Контрагент = ?(РазделятьПоКонтрагентам, ДокументОплаты.Контрагент, Справочники.Контрагенты.ПустаяСсылка());
				Если ЗначениеЗаполнено(ДокументОплаты.НомерДокумента)
					И ЗначениеЗаполнено(ДокументОплаты.ДатаДокумента) Тогда
					ЗаполнитьЗначенияСвойств(ТаблицаПлатежныхДокументов.Добавить(), ДокументОплаты);
					ПоДокументу = ПоДокументу + ?(Не ДокументОплаты.НомерСтроки = 1 И Контрагент <> ПредыдущийКонтрагент, ";", ?(ПустаяСтрока(ПоДокументу), "",", ")) +
						ДокументОплаты.НомерДокумента + " от " + Формат(ДокументОплаты.ДатаДокумента, "ДЛФ='Д'") + " г.";
				КонецЕсли;
				ПредыдущийКонтрагент = Контрагент;	
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(ПоДокументу) Тогда
		Если ВыборкаСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
			ИЛИ ВыборкаСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
			ПоДокументу = "-- от --";
		Иначе
			ПоДокументу = "   от   ";
		КонецЕсли;
	КонецЕсли;
	ДанныеШапки.Вставить("ТаблицаПлатежныхДокументов", ТаблицаПлатежныхДокументов);
	ДанныеШапки.Вставить("ПоДокументу", ПоДокументу);
	
	// Валюта
	Если ЗначениеЗаполнено(Реквизиты.Валюта) Тогда
		Валюта = Реквизиты.Валюта.НаименованиеПолное + ", " + Реквизиты.Валюта.Код;
	Иначе
		Валюта = "";
	КонецЕсли;
	
	ДанныеШапки.Вставить("Валюта", Реквизиты.Валюта);
	ДанныеШапки.Вставить("ВалютаНаименование", Валюта);
	
	// Сведения о комиссионере
	Если ВыборкаСФ.ЭтоСчетФактураВыданный 
		И (ТипЗнч(Реквизиты.Поставщик) = Тип("СправочникСсылка.Контрагенты")
		ИЛИ ТипЗнч(Реквизиты.Поставщик) = Тип("Строка"))
		И ТипЗнч(Реквизиты.Покупатель) = Тип("СправочникСсылка.Контрагенты") Тогда
		Комиссионер = Реквизиты.Организация;
	ИначеЕсли НЕ ВыборкаСФ.ЭтоСчетФактураВыданный 
		И ВыборкаСФ.Контрагент <> Реквизиты.Поставщик
		И ВыборкаСФ.ДоговорКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку Тогда
		Комиссионер = ВыборкаСФ.Контрагент;
	Иначе
		Комиссионер = Неопределено;
	КонецЕсли;
	
	СведенияОКомиссионере = Неопределено;
	Если ЗначениеЗаполнено(Комиссионер) Тогда
	
		СведенияОКомиссионере = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Комиссионер, ВыборкаСФ.ДатаСведений);
		КППКомиссионера = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКомиссионере, "КПП,", Ложь);
		ДанныеШапки.Вставить("ПредставлениеКомиссионера", "Составлен комиссионером (агентом): " 
			+ ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКомиссионере, "НаименованиеДляПечатныхФорм,")
			+ ", " + ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКомиссионере, "ЮридическийАдрес,")
			+ ", ИНН/КПП: " + ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКомиссионере, "ИНН,", Ложь)
			+ ?(ЗначениеЗаполнено(КППКомиссионера), "/" + КППКомиссионера, ""));
	
	Иначе
	
		ДанныеШапки.Вставить("ПредставлениеКомиссионера", "");
	
	КонецЕсли;
	
	// Данные для подвала
	Если ВыборкаСФ.ЭтоСчетФактураВыданный Тогда
		
		Если  ТипЗнч(Реквизиты.Поставщик) = Тип("Строка") Тогда
			ОрганизацияДляРеквизитовПодвала = Реквизиты.Организация;
		Иначе
			ОрганизацияДляРеквизитовПодвала = Реквизиты.Поставщик;
		КонецЕсли;
				
		Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(ОрганизацияДляРеквизитовПодвала)Тогда
			
			Руководители = ОтветственныеЛицаБП.ОтветственныеЛица(ОрганизацияДляРеквизитовПодвала, ВыборкаСФ.Дата, Реквизиты.Подразделение);
						
			Если ЗначениеЗаполнено(ВыборкаСФ.Руководитель) Тогда
				ДанныеФизЛица = УчетЗарплаты.ДанныеФизическихЛиц(Реквизиты.Организация, ВыборкаСФ.Руководитель, ВыборкаСФ.Дата, Истина);
				ДанныеШапки.Вставить("ДолжностьРуководителя", Руководители.РуководительДолжностьПредставление);
				ДанныеШапки.Вставить("ФИОРуководителя",       ДанныеФизЛица.Представление);
				ДанныеШапки.Вставить("Руководитель",          ДанныеФизЛица.Представление);
			Иначе 
				ДанныеШапки.Вставить("ДолжностьРуководителя", Руководители.РуководительДолжностьПредставление);
				ДанныеШапки.Вставить("ФИОРуководителя",       Руководители.РуководительПредставление);
				ДанныеШапки.Вставить("Руководитель",          Руководители.Руководитель);
			КонецЕсли;
			Если ЗначениеЗаполнено(ВыборкаСФ.ГлавныйБухгалтер) Тогда
				ДанныеФизЛица = УчетЗарплаты.ДанныеФизическихЛиц(Реквизиты.Организация, ВыборкаСФ.ГлавныйБухгалтер, ВыборкаСФ.Дата, Истина);
				ДанныеШапки.Вставить("ФИОГлавногоБухгалтера", ДанныеФизЛица.Представление);
				ДанныеШапки.Вставить("ГлавныйБухгалтер",      ДанныеФизЛица.Представление);
			Иначе 
				ДанныеШапки.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтерПредставление);
				ДанныеШапки.Вставить("ГлавныйБухгалтер",      Руководители.ГлавныйБухгалтер);
			КонецЕсли;
		
		Иначе
			ДанныеШапки.Вставить("ДолжностьРуководителя", НСтр("ru = 'Индивидуальный предприниматель'"));
			ДанныеШапки.Вставить("Свидетельство",         ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "Свидетельство,"));
			
			Если ВедетсяУчетНДСПоФЗ81(ВыборкаСФ.Дата) 
				И ЗначениеЗаполнено(ВыборкаСФ.Руководитель) Тогда
				ДанныеФизЛица = УчетЗарплаты.ДанныеФизическихЛиц(Реквизиты.Организация, ВыборкаСФ.Руководитель, ВыборкаСФ.Дата, Истина);
				ДанныеШапки.Вставить("ФИОПБОЮЛ", ДанныеФизЛица.Представление);
			Иначе
				ДанныеШапки.Вставить("ФИОПБОЮЛ", ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "ФамилияИнициалыФизлица,"));
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		Если НЕ ТипЗнч(Реквизиты.Поставщик) = Тип("Строка")
			И НЕ ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Реквизиты.Поставщик) Тогда
			ДанныеШапки.Вставить("Свидетельство",         ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "Свидетельство,"));
		КонецЕсли;
	КонецЕсли;
	
	// Данные для универсального передаточного документа
	Если ДополнитьДаннымиУПД Тогда
		
		// Наименование экономического субъекта - составителя документа
		Если ЗначениеЗаполнено(Комиссионер) И СведенияОКомиссионере <> Неопределено Тогда
			ПредставлениеПоставщика = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКомиссионере, "НаименованиеДляПечатныхФорм,");
			ИННПоставщика           = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКомиссионере, "ИНН,", Ложь);
			КПППоставщика           = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКомиссионере, "КПП,", Ложь);
		Иначе
			ПредставлениеПоставщика = ДанныеШапки.ПредставлениеПоставщика;
			ИННПоставщика           = ДанныеШапки.ИННПоставщика;
			КПППоставщика           = ДанныеШапки.КПППоставщика;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КПППоставщика) Тогда
			ПредставлениеОрганизации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН/КПП %2/%3'"),
				ПредставлениеПоставщика, ИННПоставщика, КПППоставщика);
		ИначеЕсли ЗначениеЗаполнено(ИННПоставщика) Тогда
			ПредставлениеОрганизации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН %2'"),
				ПредставлениеПоставщика, ИННПоставщика);
		Иначе
			ПредставлениеОрганизации = ПредставлениеПоставщика;
		КонецЕсли;
		ДанныеШапки.Вставить("ПредставлениеОрганизации", ПредставлениеОрганизации);
		
		Если ЗначениеЗаполнено(ДанныеШапки.КППпокупателя) Тогда
			ПредставлениеКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН/КПП %2/%3'"),
				ДанныеШапки.ПредставлениеПокупателя, ДанныеШапки.ИННпокупателя, ДанныеШапки.КППпокупателя);
		ИначеЕсли ЗначениеЗаполнено(ДанныеШапки.ИННпокупателя) Тогда
			ПредставлениеКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН %2'"),
				ДанныеШапки.ПредставлениеПокупателя, ДанныеШапки.ИННпокупателя);
		Иначе
			ПредставлениеКонтрагента = ДанныеШапки.ПредставлениеПокупателя;
		КонецЕсли;
		
		ДанныеШапки.Вставить("ПредставлениеКонтрагента", ПредставлениеКонтрагента);
		
		// Статус
		Если НЕ ЗначениеЗаполнено(ВыборкаСФ.ВидСчетаФактуры) Тогда
			СтатусУПД = 2;
			ДанныеШапки.Вставить("ПоДокументу",  "-- от --");
		Иначе
			СтатусУПД = 1;
		КонецЕсли;
		
		ДанныеШапки.Вставить("СтатусУПД", СтатусУПД);
		
		// Номер
		Если СтатусУПД = 2 Тогда
			Если ТипЗнч(ВыборкаСФ.ДокументОснование) = Тип("ДокументСсылка.ОказаниеУслуг") Тогда
				ДанныеШапки.Номер = ДанныеШапки.Номер + "/" + ВыборкаСФ.НомерСтроки;
			КонецЕсли;
		КонецЕсли;
		
		БезПереходаПраваСобственности = (Реквизиты.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером)
			ИЛИ ТипЗнч(Реквизиты.ДокументОснование) = Тип("ДокументСсылка.ПередачаТоваров");
		
		// Поставщик и Грузоотправитель
		Если БезПереходаПраваСобственности И СтатусУПД = 2 Тогда
			ДанныеШапки.Грузоотправитель              = ДанныеШапки.Поставщик;
			ДанныеШапки.ПредставлениеГрузоотправителя = ДанныеШапки.ПредставлениеПоставщика 
				+ ?(ПустаяСтрока(ДанныеШапки.АдресПоставщика), "", ", ") + ДанныеШапки.АдресПоставщика;
			
			ДанныеШапки.Поставщик               = Неопределено;
			ДанныеШапки.ПредставлениеПоставщика = "--";
			ДанныеШапки.АдресПоставщика         = "--";
			ДанныеШапки.ИННПоставщика           = "--";
			ДанныеШапки.КПППоставщика           = "";
		КонецЕсли;
		
		// Покупатель и Грузополучатель
		Если БезПереходаПраваСобственности И СтатусУПД = 2 Тогда
			ДанныеШапки.Грузополучатель              = ДанныеШапки.Покупатель;
			ДанныеШапки.ПредставлениеГрузополучателя = ДанныеШапки.ПредставлениеПокупателя
				+ ?(ПустаяСтрока(ДанныеШапки.АдресПокупателя), "", ", ") + ДанныеШапки.АдресПокупателя;
			
			ДанныеШапки.Покупатель              = Неопределено;
			ДанныеШапки.ПредставлениеПокупателя = "--";
			ДанныеШапки.АдресПокупателя         = "--";
			ДанныеШапки.ИННПокупателя           = "--";
			ДанныеШапки.КПППокупателя           = "";
		КонецЕсли;
		
		// Основание передачи (сдачи)
		Основание = СокрП(Реквизиты.Основание);
		
		ФИОТоварПолучил = "";
		
		Если ЗначениеЗаполнено(Реквизиты.ДоверенностьНомер)
			ИЛИ ЗначениеЗаполнено(Реквизиты.ДоверенностьДата)
			ИЛИ ЗначениеЗаполнено(Реквизиты.ДоверенностьВыдана)
			 Тогда
			
			Доверенность = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'по доверенности №%1 от %2 выданной %3'"),
				Реквизиты.ДоверенностьНомер, Формат(Реквизиты.ДоверенностьДата, "ДЛФ=ДД"),
				Реквизиты.ДоверенностьВыдана);
			
			Основание = Основание + ?(ПустаяСтрока(Основание), "", "; ") + Доверенность;
			
			ФИОТоварПолучил =  Реквизиты.ДоверенностьЧерезКого;
			
		ИначеЕсли ЗначениеЗаполнено(Реквизиты.ДоверенностьЧерезКого) Тогда
			
			ФИОТоварПолучил = Реквизиты.ДоверенностьЧерезКого+?(ЗначениеЗаполнено(Реквизиты.ЗаЗаказчикаНаОсновании),", "+Реквизиты.ЗаЗаказчикаНаОсновании,"");
			
		КонецЕсли;
		
		ДанныеШапки.Вставить ("Основание",       Основание);
		ДанныеШапки.Вставить ("ФИОТоварПолучил", ФИОТоварПолучил);
			
		Если ВыборкаСФ.ЭтоСчетФактураВыданный Тогда
			
			// Товар (груз) передал / услуги, результаты работ, права сдал
			
			Если Реквизиты.ЕстьТовары Тогда
				
				Кладовщик = ?(ЗначениеЗаполнено(Реквизиты.ОтпускПроизвел), Реквизиты.ОтпускПроизвел,
					ОтветственныеЛицаБП.ОтветственноеЛицоНаСкладе(Реквизиты.Склад, Реквизиты.ДатаОснования));
					
				ДанныеКладовщика = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(
					Реквизиты.Организация, Кладовщик, Реквизиты.ДатаОснования);
				
				ДанныеШапки.Вставить ("ДолжностьКладовщика", ДанныеКладовщика.Должность);
				ДанныеШапки.Вставить ("ФИОКладовщика",       ДанныеКладовщика.Представление);
				
			Иначе
				
				Если ЗначениеЗаполнено(Реквизиты.Исполнитель) Тогда
					
					ДанныеИсполнителя = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(
						Реквизиты.Организация, Реквизиты.Исполнитель, Реквизиты.ДатаОснования);
					
					ДанныеШапки.Вставить ("ДолжностьКладовщика", ДанныеИсполнителя.Должность);
					ДанныеШапки.Вставить ("ФИОКладовщика",       ?(ЗначениеЗаполнено(ДанныеИсполнителя.Представление), ДанныеИсполнителя.Представление, "")
						+ ?(ЗначениеЗаполнено(Реквизиты.ИсполнительПоПриказу), " ", "") + Реквизиты.ИсполнительПоПриказу);
					
				ИначеЕсли ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Реквизиты.Поставщик) Тогда
					
					ДанныеШапки.Вставить ("ДолжностьКладовщика", ДанныеШапки.ДолжностьРуководителя);
					ДанныеШапки.Вставить ("ФИОКладовщика",       ДанныеШапки.ФИОРуководителя);
					
				Иначе
					
					ДанныеШапки.Вставить ("ДолжностьКладовщика", ДанныеШапки.ДолжностьРуководителя);
					ДанныеШапки.Вставить ("ФИОКладовщика",       ДанныеШапки.ФИОПБОЮЛ);
					
				КонецЕсли;
				
			КонецЕсли;
			
			// Дата отгрузки, передачи (сдачи)
			ШаблонДатыОтгрузкиПередачи = Формат(ВыборкаСФ.Дата, "ДФ='« дд » %1 ММММ %2 гггг  %3'");
			
			ДлинаДаты = 30;
			ДобавитьСимволовСлева  = Окр((ДлинаДаты - СтрДлина(ШаблонДатыОтгрузкиПередачи))/2, 0);
			ДобавитьСимволовСправа = ДлинаДаты - СтрДлина(ШаблонДатыОтгрузкиПередачи) - ДобавитьСимволовСлева;
			
			ДатаОтгрузкиПередачи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонДатыОтгрузкиПередачи, 
				СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов(" ", ДобавитьСимволовСлева),
				СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов(" ", ДобавитьСимволовСправа),
				НСтр("ru = 'года'"));
			
			ДанныеШапки.Вставить ("ДатаОтгрузкиПередачи", ДатаОтгрузкиПередачи);
			
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат ДанныеШапки;

КонецФункции

Функция ПодготовитьДанныеШапкиКорректировочногоСчетаФактуры1137(ВыборкаСФ, Реквизиты, ДополнитьДаннымиУПД) Экспорт

	ДанныеШапки = Новый Структура;
	ТекстПустойПоказатель = "--";
	
	// Номер и дата
	Если ВыборкаСФ.Исправление И ВыборкаСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
		Номер = ВыборкаСФ.НомерИсправляемогоКорректировочногоДокумента;
		ДанныеШапки.Вставить("Дата", ВыборкаСФ.ДатаИсправляемогоКорректировочногоДокумента);
	Иначе
		Если ВыборкаСФ.УдалитьПрефиксыИзНомера Тогда
			Номер = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаСФ.Номер, Истина, Ложь);
		Иначе
			Номер = ВыборкаСФ.Номер;
		КонецЕсли;
		ДанныеШапки.Вставить("Дата", ВыборкаСФ.Дата);
	КонецЕсли;
	
	// Дополняем номер индексом обособленного подразделения (при необходимости)
	Если ЗначениеЗаполнено(Реквизиты.ЦифровойИндексОбособленногоПодразделения)
		И ВыборкаСФ.ЭтоСчетФактураВыданный Тогда
		Номер = Номер + "/" + Реквизиты.ЦифровойИндексОбособленногоПодразделения;
	КонецЕсли;

	ДанныеШапки.Вставить("Номер", СокрЛП(Номер));
	
	// Номер и дата исправления
	ДанныеШапки.Вставить("Исправление", ВыборкаСФ.Исправление);
	Если ВыборкаСФ.Исправление Тогда
		Если ВыборкаСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
			НомерИсправленияКорректировочного = ВыборкаСФ.НомерИсправления;
			ДатаИсправленияКорректировочного  = ВыборкаСФ.ДатаИсправления;
		Иначе
			НомерИсправленияКорректировочного = ВыборкаСФ.НомерИсправленияКорректировочного;
			ДатаИсправленияКорректировочного  = ВыборкаСФ.ДатаИсправленияКорректировочного;
		КонецЕсли;
	Иначе
		НомерИсправленияКорректировочного = "--";
		ДатаИсправленияКорректировочного  = '00010101';
	КонецЕсли;
	
	ДанныеШапки.Вставить("НомерИсправленияКорректировочного", НомерИсправленияКорректировочного);
	ДанныеШапки.Вставить("ДатаИсправленияКорректировочного",  ДатаИсправленияКорректировочного);
	
	ТаблицаРеквизитовОснований = Новый ТаблицаЗначений;
	ТаблицаРеквизитовОснований.Колонки.Добавить("НомерСчетаФактуры");
	ТаблицаРеквизитовОснований.Колонки.Добавить("ДатаСчетаФактуры");
	ТаблицаРеквизитовОснований.Колонки.Добавить("УчитыватьИсправлениеИсходногоДокумента");
	ТаблицаРеквизитовОснований.Колонки.Добавить("НомерИсправления");
	ТаблицаРеквизитовОснований.Колонки.Добавить("ДатаИсправления");
	
	ВыборкаОснования = ВыборкаСФ.Выбрать();
	Пока ВыборкаОснования.Следующий() Цикл
		
		НовоеОснование = ТаблицаРеквизитовОснований.Добавить();
		
		// Номер и дата исходного счета-фактуры
		Если ЗначениеЗаполнено(Реквизиты.ЦифровойИндексОбособленногоПодразделения)
			И ВыборкаСФ.ЭтоСчетФактураВыданный Тогда
			НовоеОснование.НомерСчетаФактуры = СокрЛП(ВыборкаОснования.НомерИсходногоДокумента) + "/" + Реквизиты.ЦифровойИндексОбособленногоПодразделения;
		Иначе
			НовоеОснование.НомерСчетаФактуры = СокрЛП(ВыборкаОснования.НомерИсходногоДокумента);
		КонецЕсли;
		
		НовоеОснование.ДатаСчетаФактуры  = ВыборкаОснования.ДатаИсходногоДокумента;
		
		НовоеОснование.УчитыватьИсправлениеИсходногоДокумента = ВыборкаОснования.УчитыватьИсправлениеИсходногоДокумента;
		// Номер и дата исправления исходного счета-фактуры
		Если ВыборкаОснования.УчитыватьИсправлениеИсходногоДокумента = Истина Тогда
			НовоеОснование.НомерИсправления = ВыборкаОснования.НомерИсправленияИсходногоДокумента;
			НовоеОснование.ДатаИсправления	 = ВыборкаОснования.ДатаИсправленияИсходногоДокумента;
		Иначе
			НовоеОснование.НомерИсправления = "--";
			НовоеОснование.ДатаИсправления	= '00010101';
		КонецЕсли;

	КонецЦикла;
	
	ТаблицаРеквизитовОснований.Свернуть("НомерСчетаФактуры,ДатаСчетаФактуры, УчитыватьИсправлениеИсходногоДокумента, НомерИсправления,ДатаИсправления");
	ДанныеШапки.Вставить("ТаблицаРеквизитовОснований", ТаблицаРеквизитовОснований);

	ДанныеШапки.Вставить("Поставщик", Реквизиты.Поставщик);
	
	СведенияОПоставщике = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Реквизиты.Поставщик, ВыборкаСФ.ДатаСведений);
	
	ДанныеШапки.Вставить("НаименованиеПродавца",
		ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "НаименованиеДляПечатныхФорм,"));
	
	// Адрес продавца
	ДанныеШапки.Вставить("АдресПродавца",
		ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес,"));
	
	// ИНН и КПП продавца
	ДанныеШапки.Вставить("ИННпродавца", Реквизиты.ИННпоставщика);
	
	Если НЕ ВыборкаСФ.ЭтоСчетФактураВыданный 
		И ЗначениеЗаполнено(ВыборкаСФ.КППСчетаФактуры)
		И Реквизиты.Поставщик = ВыборкаСФ.Контрагент Тогда
		КППпоставщика = ВыборкаСФ.КППСчетаФактуры;
	Иначе
		КПППоставщика = УчетНДСБП.КППНаДату(Реквизиты.ОбособленноеПодразделениеПоставщика, ВыборкаСФ.ДатаСведений);
	КонецЕсли;
	
	ДанныеШапки.Вставить("КППпродавца", УчетНДСБП.КППНаДату(Реквизиты.ОбособленноеПодразделениеПоставщика, ВыборкаСФ.ДатаСведений));
	ДанныеШапки.Вставить("ИННКППпродавца",
		ДанныеШапки.ИННпродавца
		+ ?(ЗначениеЗаполнено(ДанныеШапки.КППпродавца), "/", "")
		+ ДанныеШапки.КППпродавца);

	
	СведенияОПокупателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Реквизиты.Покупатель, ВыборкаСФ.ДатаСведений);
	
	// Наименование покупателя
	ДанныеШапки.Вставить("Покупатель", Реквизиты.Покупатель);
	ДанныеШапки.Вставить("НаименованиеПокупателя",
		ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "НаименованиеДляПечатныхФорм,"));
	
	// Адрес покупателя
	ДанныеШапки.Вставить("АдресПокупателя",
		ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес,"));
	
	// ИНН и КПП покупателя
	ДанныеШапки.Вставить("ИННпокупателя", Реквизиты.ИННпокупателя);
	
	Если ВыборкаСФ.ЭтоСчетФактураВыданный
		И ЗначениеЗаполнено(ВыборкаСФ.ВидСчетаФактуры) 
		И Реквизиты.Покупатель = ВыборкаСФ.Контрагент
		И ЗначениеЗаполнено(ВыборкаСФ.КППСчетаФактуры) Тогда
		КППпокупателя = ВыборкаСФ.КППСчетаФактуры;
	Иначе
		КППпокупателя = УчетНДСБП.КППНаДату(Реквизиты.ОбособленноеПодразделениеПокупателя, ВыборкаСФ.ДатаСведений);
	КонецЕсли;
	
	ДанныеШапки.Вставить("КППпокупателя", КППпокупателя);
	
	ДанныеШапки.Вставить("ИННКППпокупателя",
		ДанныеШапки.ИННпокупателя
		+ ?(ЗначениеЗаполнено(ДанныеШапки.КППпокупателя), "/", "")
		+ ДанныеШапки.КППпокупателя);
	
	// Валюта
	Если ЗначениеЗаполнено(Реквизиты.Валюта) Тогда
		Валюта = Реквизиты.Валюта.НаименованиеПолное + ", " + Реквизиты.Валюта.Код;
	Иначе
		Валюта = "";		
	КонецЕсли;
	
	ДанныеШапки.Вставить("Валюта", Реквизиты.Валюта);
	ДанныеШапки.Вставить("ВалютаНаименование", "Валюта: наименование, код " + Валюта);
	ДанныеШапки.Вставить("ВалютаНаименованиеУКД", Валюта);

	// Сведения о комиссионере
	Если ВыборкаСФ.ЭтоСчетФактураВыданный 
		И ТипЗнч(Реквизиты.Поставщик) = Тип("СправочникСсылка.Контрагенты")
		И ТипЗнч(Реквизиты.Покупатель) = Тип("СправочникСсылка.Контрагенты") Тогда
		Комиссионер = Реквизиты.Организация;
	ИначеЕсли НЕ ВыборкаСФ.ЭтоСчетФактураВыданный 
		И ВыборкаСФ.Контрагент <> Реквизиты.Поставщик Тогда
		Комиссионер = ВыборкаСФ.Контрагент;
	Иначе
		Комиссионер = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Комиссионер) Тогда
	
		СведенияОКомиссионере = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Комиссионер, ВыборкаСФ.ДатаСведений);
		КППКомиссионера = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКомиссионере, "КПП,", Ложь);
		ДанныеШапки.Вставить("ПредставлениеКомиссионера", "Составлен комиссионером (агентом): " 
			+ ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКомиссионере, "НаименованиеДляПечатныхФорм,")
			+ ", " + ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКомиссионере, "ЮридическийАдрес,")
			+ ", ИНН/КПП: " + ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКомиссионере, "ИНН,", Ложь)
			+ ?(ЗначениеЗаполнено(КППКомиссионера), "/" + КППКомиссионера, ""));
	
	Иначе
	
		ДанныеШапки.Вставить("ПредставлениеКомиссионера", "");
	
	КонецЕсли;
	
	// Данные для подвала
	Если ВыборкаСФ.ЭтоСчетФактураВыданный ИЛИ ДополнитьДаннымиУПД Тогда
		Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Реквизиты.Поставщик) Тогда
			Руководители = ОтветственныеЛицаБП.ОтветственныеЛица(Реквизиты.Поставщик, ВыборкаСФ.Дата, Реквизиты.Подразделение);
			Если ЗначениеЗаполнено(ВыборкаСФ.Руководитель) Тогда
				ДанныеФизЛица = УчетЗарплаты.ДанныеФизическихЛиц(, ВыборкаСФ.Руководитель, ВыборкаСФ.Дата, Истина);
				ДанныеШапки.Вставить("ФИОРуководителя", ДанныеФизЛица.Представление);
				ДанныеШапки.Вставить("Руководитель", ДанныеФизЛица.Представление);
			Иначе 
				ДанныеШапки.Вставить("ФИОРуководителя", Руководители.РуководительПредставление);
				ДанныеШапки.Вставить("Руководитель", Руководители.Руководитель);
			КонецЕсли;
			Если ЗначениеЗаполнено(ВыборкаСФ.ГлавныйБухгалтер) Тогда
				ДанныеФизЛица = УчетЗарплаты.ДанныеФизическихЛиц(, ВыборкаСФ.ГлавныйБухгалтер, ВыборкаСФ.Дата, Истина);
				ДанныеШапки.Вставить("ФИОГлавногоБухгалтера", ДанныеФизЛица.Представление);
				ДанныеШапки.Вставить("ГлавныйБухгалтер", ДанныеФизЛица.Представление);
			Иначе 
				ДанныеШапки.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтерПредставление);
				ДанныеШапки.Вставить("ГлавныйБухгалтер", Руководители.ГлавныйБухгалтер);
			КонецЕсли;
		Иначе
			
			ДанныеШапки.Вставить("Свидетельство",	ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "Свидетельство,"));
			
			Если ВедетсяУчетНДСПоФЗ81(ВыборкаСФ.Дата) 
				И ЗначениеЗаполнено(ВыборкаСФ.Руководитель) Тогда
				ДанныеФизЛица = УчетЗарплаты.ДанныеФизическихЛиц(, ВыборкаСФ.Руководитель, ВыборкаСФ.Дата, Истина);
				ДанныеШапки.Вставить("ФИОПБОЮЛ", ДанныеФизЛица.Представление);
			Иначе
				ДанныеШапки.Вставить("ФИОПБОЮЛ", ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "ФамилияИнициалыФизлица,"));
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	// Данные для универсального передаточного документа
	Если ДополнитьДаннымиУПД Тогда
		
		// Наименование экономического субъекта - составителя документа
		Если ЗначениеЗаполнено(Комиссионер) И СведенияОКомиссионере <> Неопределено Тогда
			ПредставлениеПоставщика = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКомиссионере, "НаименованиеДляПечатныхФорм,");
			ИННПоставщика           = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКомиссионере, "ИНН,", Ложь);
			КПППоставщика           = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКомиссионере, "КПП,", Ложь);
		Иначе
			ПредставлениеПоставщика = ДанныеШапки.НаименованиеПродавца;
			ИННПоставщика           = ДанныеШапки.ИННПродавца;
			КПППоставщика           = ДанныеШапки.КПППродавца;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КПППоставщика) Тогда
			ПредставлениеОрганизации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН/КПП %2/%3'"),
				ПредставлениеПоставщика, ИННПоставщика, КПППоставщика);
		ИначеЕсли ЗначениеЗаполнено(ИННПоставщика) Тогда
			ПредставлениеОрганизации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН %2'"),
				ПредставлениеПоставщика, ИННПоставщика);
		Иначе
			ПредставлениеОрганизации = ПредставлениеПоставщика;
		КонецЕсли;
		ДанныеШапки.Вставить("ПредставлениеОрганизации", ПредставлениеОрганизации);
		
		Если ЗначениеЗаполнено(ДанныеШапки.КППпокупателя) Тогда
			ПредставлениеКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН/КПП %2/%3'"),
				ДанныеШапки.НаименованиеПокупателя, ДанныеШапки.ИННпокупателя, ДанныеШапки.КППпокупателя);
		ИначеЕсли ЗначениеЗаполнено(ДанныеШапки.ИННпокупателя) Тогда
			ПредставлениеКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН %2'"),
				ДанныеШапки.НаименованиеПокупателя, ДанныеШапки.ИННпокупателя);
		Иначе
			ПредставлениеКонтрагента = ДанныеШапки.НаименованиеПокупателя;
		КонецЕсли;
		
		ДанныеШапки.Вставить("ПредставлениеКонтрагента", ПредставлениеКонтрагента);
		
		ДанныеШапки.Вставить("Основание", Реквизиты.Основание);
		
		Руководители = ОтветственныеЛицаБП.ОтветственныеЛица(Реквизиты.Поставщик, ВыборкаСФ.Дата, Реквизиты.Подразделение);
		Если ЗначениеЗаполнено(ВыборкаСФ.Руководитель) Тогда
			ДанныеФизЛица = УчетЗарплаты.ДанныеФизическихЛиц(, ВыборкаСФ.Руководитель, ВыборкаСФ.Дата, Истина);
			ДанныеШапки.Вставить("ДолжностьРуководителя", Руководители.РуководительДолжностьПредставление);
			ДанныеШапки.Вставить("ФИОРуководителяНакладная", ДанныеФизЛица.Представление);			
		Иначе 
			ДанныеШапки.Вставить("ДолжностьРуководителя", Руководители.РуководительДолжностьПредставление);
			ДанныеШапки.Вставить("ФИОРуководителяНакладная", Руководители.РуководительПредставление);
		КонецЕсли;
		
		// Статус
		Если НЕ ЗначениеЗаполнено(ВыборкаСФ.ВидСчетаФактуры) Тогда
			СтатусУКД = 2;
		Иначе
			СтатусУКД = 1;
		КонецЕсли;
		
		ДанныеШапки.Вставить("СтатусУКД", СтатусУКД);
			
	КонецЕсли;

    Возврат ДанныеШапки;

КонецФункции

// Возвращает структуру из 2 таблиц для печати счета-фактуры:
// - Реквизиты - реквизиты шапки
// - ТаблицаДокумента - строки табличных частей.
//   Если СФ по договору в у.е. печатается в рублях, таблица содержит суммы, соответствующие
//   суммам бухгалтерских проводок, то есть скорректированные с учетом курсов зачтенных авансов
//
// Параметры:
// ДокументОснование - ДокументСсылка
//   В модуле менеджера документа должна быть экспортная функция
//   ТекстЗапросаДанныеДляПечатиСчетовФактур(НомераТаблиц)
// СчетФактура - ДокументСсылка.СчетФактураВыданный - распечатываемый счет-фактура
//   Используется при печати счета-фактуры по документу ОказаниеУслуг
// ВидСчетаФактура - ПеречислениеСсылка.ВидСчетаФактурыВыставленного или .ВидСчетаФактурыПолученного - реквизит счета-фактуры
// ИспользуетсяПостановлениеНДС1137 - Булево - применяется ли на дату счета-фактуры Постановление 1137 от 26.12.2011 (Истина)
//   или применяется Постановление 914 (Ложь)
//
Функция ПодготовитьДанныеДляПечатиСчетовФактур(ДокументОснование, ДанныеСчетаФактуры) Экспорт

	ДанныеДляПечати = Новый Структура;
	
	СчетФактураПолученныйИзСтранТаможенногоСоюза = 
		КонтрагентРезидентТаможенногоСоюза(ДанныеСчетаФактуры.Контрагент)
		И ТипЗнч(ДанныеСчетаФактуры.СчетФактура) = Тип("ДокументСсылка.СчетФактураПолученный");
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПринятиеКУчетуОС")
		ИЛИ СчетФактураПолученныйИзСтранТаможенногоСоюза Тогда
		ДанныеДляПечати.Вставить("Реквизиты",			Неопределено);
		ДанныеДляПечати.Вставить("ТаблицаДокумента",	Неопределено);
		Возврат ДанныеДляПечати;
	КонецЕсли;
	
	ВалютаРеглУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ДополнительнаяКолонкаПечатныхФормДокументов = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если НЕ ЗначениеЗаполнено(ДополнительнаяКолонкаПечатныхФормДокументов) Тогда
		ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;
	КонецЕсли;
	
	Если НЕ ДанныеСчетаФактуры.Свойство("НеподтверждениеНулевойСтавки") Тогда
		ДанныеСчетаФактуры.Вставить("НеподтверждениеНулевойСтавки", Ложь);
	КонецЕсли;
	
	Если НЕ ДанныеСчетаФактуры.Свойство("СводныйКомиссионный") Тогда
		ДанныеСчетаФактуры.Вставить("СводныйКомиссионный", Ложь);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВалютаРеглУчета",					ВалютаРеглУчета);
	Запрос.УстановитьПараметр("ДокументОснование",					ДокументОснование);
	
	СводныйСФКомиссияПоЗакупке 	= Ложь;
	СводныйСФКомиссияПоПродаже	= Ложь;
	
	ПредставлениеПоставщика 	= "";
	АдресПоставщика 			= "";
	Грузоотправитель 			= "";
	ИННКПППоставщика 			= "";
	
	ПредставлениеПокупателя = "";
	АдресПокупателя 		= "";
	Грузополучатель			= "";
	ИННКПППокупателя 		= "";
	
	Если ДанныеСчетаФактуры.СводныйКомиссионный Тогда
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			//значит авансовый, нужно определить по закупке или по продаже
			Если ДанныеСчетаФактуры.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку Тогда
				//Значит авансовый выданный комиссионером (комиссия по закупке)
				СводныйСФКомиссияПоЗакупке = Истина;
				
				ПараметрыСводногоСФПоКомиссии = ПолучитьПараметрыСводногоСчетаФактурыКомиссияПоЗакупке(ДанныеСчетаФактуры.СчетФактура, ДанныеСчетаФактуры.ВидСчетаФактуры);
				
				ПредставлениеПоставщика = ПараметрыСводногоСФПоКомиссии.ПредставлениеПоставщика;
				АдресПоставщика 		= ПараметрыСводногоСФПоКомиссии.АдресПоставщика;
				Грузоотправитель 		= ПараметрыСводногоСФПоКомиссии.Грузоотправитель;
				ИННКПППоставщика 		= ПараметрыСводногоСФПоКомиссии.ИННКПППоставщика;	
			Иначе			
				//Значит авансовый выданный комитентом (комиссия по продаже)
				СводныйСФКомиссияПоПродаже	= Истина;
				
				ПараметрыСводногоСФПоКомиссии = ПолучитьПараметрыСводногоСчетаФактурыКомиссияПоПродаже(ДанныеСчетаФактуры.СчетФактура, ДанныеСчетаФактуры.ВидСчетаФактуры);
				
				ПредставлениеПокупателя = ПараметрыСводногоСФПоКомиссии.ПредставлениеПокупателя;
				АдресПокупателя 		= ПараметрыСводногоСФПоКомиссии.АдресПокупателя;
				Грузополучатель 		= ПараметрыСводногоСФПоКомиссии.Грузополучатель;
				ИННКПППокупателя 		= ПараметрыСводногоСФПоКомиссии.ИННКПППокупателя;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") 
			И ЗначениеЗаполнено(ДанныеСчетаФактуры.СчетФактура.Продавец) Тогда 
			//Значит комиссия по закупке СФ выданный комиссионером
			СводныйСФКомиссияПоЗакупке = Истина;
			
			ПараметрыСводногоСФПоКомиссии = ПолучитьПараметрыСводногоСчетаФактурыКомиссияПоЗакупке(ДанныеСчетаФактуры.СчетФактура, ДанныеСчетаФактуры.ВидСчетаФактуры);
			
			ПредставлениеПоставщика = ПараметрыСводногоСФПоКомиссии.ПредставлениеПоставщика;
			АдресПоставщика 		= ПараметрыСводногоСФПоКомиссии.АдресПоставщика;
			Грузоотправитель 		= ПараметрыСводногоСФПоКомиссии.Грузоотправитель;
			ИННКПППоставщика 		= ПараметрыСводногоСФПоКомиссии.ИННКПППоставщика;
			
		ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
			//Значит комиссия по продаже СФ выданный комитентом
			СводныйСФКомиссияПоПродаже	= Истина;
			
			ПараметрыСводногоСФПоКомиссии = ПолучитьПараметрыСводногоСчетаФактурыКомиссияПоПродаже(ДанныеСчетаФактуры.СчетФактура, ДанныеСчетаФактуры.ВидСчетаФактуры);
			
			ПредставлениеПокупателя = ПараметрыСводногоСФПоКомиссии.ПредставлениеПокупателя;
			АдресПокупателя 		= ПараметрыСводногоСФПоКомиссии.АдресПокупателя;
			Грузополучатель 		= ПараметрыСводногоСФПоКомиссии.Грузополучатель;
			ИННКПППокупателя 		= ПараметрыСводногоСФПоКомиссии.ИННКПППокупателя;
		ИначеЕсли  ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			//Значит комиссия по закупке СФ полученный от комиссионера
			СводныйСФКомиссияПоЗакупке = Истина;
			
			ПараметрыСводногоСФПоКомиссии = ПолучитьПараметрыСводногоСчетаФактурыКомиссияПоЗакупке(ДанныеСчетаФактуры.СчетФактура, ДанныеСчетаФактуры.ВидСчетаФактуры);
			
			ПредставлениеПоставщика = ПараметрыСводногоСФПоКомиссии.ПредставлениеПоставщика;
			АдресПоставщика 		= ПараметрыСводногоСФПоКомиссии.АдресПоставщика;
			Грузоотправитель 		= ПараметрыСводногоСФПоКомиссии.Грузоотправитель;
			ИННКПППоставщика 		= ПараметрыСводногоСФПоКомиссии.ИННКПППоставщика;
			
		КонецЕсли;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СводныйСФКомиссияПоЗакупке",			СводныйСФКомиссияПоЗакупке);
	Запрос.УстановитьПараметр("СводныйСФКомиссияПоПродаже",			СводныйСФКомиссияПоПродаже);
	Запрос.УстановитьПараметр("ПредставлениеПоставщика",			ПредставлениеПоставщика);
	Запрос.УстановитьПараметр("АдресПоставщика",					АдресПоставщика);
	Запрос.УстановитьПараметр("Грузоотправитель",					Грузоотправитель);
	Запрос.УстановитьПараметр("ИННКПППоставщика",					ИННКПППоставщика);
	Запрос.УстановитьПараметр("ПредставлениеПокупателя",			ПредставлениеПокупателя);
	Запрос.УстановитьПараметр("АдресПокупателя",					АдресПокупателя);
	Запрос.УстановитьПараметр("Грузополучатель",					Грузополучатель);
	Запрос.УстановитьПараметр("ИННКПППокупателя",					ИННКПППокупателя);
	Запрос.УстановитьПараметр("СчетФактура",						ДанныеСчетаФактуры.СчетФактура);
	Запрос.УстановитьПараметр("ВидСчетаФактуры",					ДанныеСчетаФактуры.ВидСчетаФактуры);
	Запрос.УстановитьПараметр("Контрагент",							ДанныеСчетаФактуры.Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента",					ДанныеСчетаФактуры.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ИспользуетсяПостановлениеНДС1137",	ДанныеСчетаФактуры.ИспользуетсяПостановлениеНДС1137);
	Запрос.УстановитьПараметр("НеподтверждениеНулевойСтавки",		ДанныеСчетаФактуры.НеподтверждениеНулевойСтавки);
	Запрос.УстановитьПараметр("ПустоеПодразделение",				БухгалтерскийУчетПереопределяемый.ПустоеПодразделение());
	Запрос.УстановитьПараметр("ТекстБезАкциза",						?(ДанныеСчетаФактуры.ИспользуетсяПостановлениеНДС1137, НСтр("ru = 'без акциза'"), ""));
	Запрос.УстановитьПараметр("ТекстКомиссионноеВознаграждение",	НСтр("ru = 'Комиссионное вознаграждение'"));
	Запрос.УстановитьПараметр("ДополнительнаяКолонкаПечатныхФормДокументов",
		ДополнительнаяКолонкаПечатныхФормДокументов);

	НомераТаблиц = Новый Структура;

	Запрос.Текст = Документы[ДокументОснование.Метаданные().Имя].ТекстЗапросаДанныеДляПечатиСчетовФактур(НомераТаблиц)
		+ ТекстЗапросаДанныеДляПечатиСчетовФактур(НомераТаблиц);
	
	Результат = Запрос.ВыполнитьПакет();

	Если Результат[НомераТаблиц.Реквизиты].Пустой()
		ИЛИ Результат[НомераТаблиц.ТаблицаДокумента].Пустой() Тогда
		
		ДанныеДляПечати.Вставить("Реквизиты",			Неопределено);
		ДанныеДляПечати.Вставить("ТаблицаДокумента",	Неопределено);

		Возврат ДанныеДляПечати;
		
	КонецЕсли;	
			
	ТаблицаРеквизиты = Результат[НомераТаблиц.Реквизиты].Выгрузить();
	ТаблицаДокумента = Результат[НомераТаблиц.ТаблицаДокумента].Выгрузить();
	Реквизиты = ТаблицаРеквизиты[0];

	РасчетыВУсловныхЕдиницах = ?(ТипЗнч(Реквизиты.РасчетыВУсловныхЕдиницах) = Тип("Булево"), Реквизиты.РасчетыВУсловныхЕдиницах, Ложь);
	
	НуженПересчетВРубли = (РасчетыВУсловныхЕдиницах ИЛИ ДанныеСчетаФактуры.НеподтверждениеНулевойСтавки)
		И Реквизиты.Валюта <> ВалютаРеглУчета
		И (ДанныеСчетаФактуры.ИспользуетсяПостановлениеНДС1137 
		ИЛИ УчетнаяПолитика.ФормироватьСчетФактуруПоУЕвРублях(Реквизиты.Организация, Реквизиты.ДатаОснования));

	Если НуженПересчетВРубли Тогда
		ТаблицаРеквизиты.ЗаполнитьЗначения(ВалютаРеглУчета, "Валюта");	
	КонецЕсли;

	СчетФактураНаРеализацию = ДанныеСчетаФактуры.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;
	
	Для каждого СтрокаДокумента Из ТаблицаДокумента Цикл
		
		Если НуженПересчетВРубли Тогда
			
			СтрокаДокумента.Всего	 = СтрокаДокумента.ВсегоРуб;
			СтрокаДокумента.СуммаНДС = СтрокаДокумента.НДСРуб;
			СтрокаДокумента.Цена	 = 0;
			
		КонецЕсли;	
		
		// Определяем окончательную сумму без НДС с учетом всех корректировок и цену
		СтрокаДокумента.СуммаБезНДС = СтрокаДокумента.Всего - СтрокаДокумента.СуммаНДС;
	
		Если СчетФактураНаРеализацию
			И (СтрокаДокумента.СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120
			ИЛИ СтрокаДокумента.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118
			ИЛИ СтрокаДокумента.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110) Тогда
			
			// В счетах-фактурах, составляемых по товарам (работам, услугам),
			// реализуемым по государственным регулируемым ценам,
			// в графе 7 следует указывать ставку налога в размере 18 (10) процентов,
			// а в графе 5 – стоимость поставляемых по счету-фактуре товаров
			// (выполненных работ, оказанных услуг) без налога на добавленную стоимость
			
			Если СтрокаДокумента.Количество <> 0 Тогда
				СтрокаДокумента.Цена = Окр(СтрокаДокумента.Всего / СтрокаДокумента.Количество, 2);
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаДокумента.ЕдиницаИзмерения) Тогда
			СтрокаДокумента.Количество = 0;
			СтрокаДокумента.Цена = 0;
		ИначеЕсли СтрокаДокумента.Количество = 0 Тогда
			СтрокаДокумента.ЕдиницаИзмерения = "";
			СтрокаДокумента.Цена = 0;
		ИначеЕсли СтрокаДокумента.Цена = 0 Тогда
			СтрокаДокумента.Цена = Окр(СтрокаДокумента.СуммаБезНДС / СтрокаДокумента.Количество, 2);
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаРеквизиты.Колонки.Добавить("ДокументОснование", Документы.ТипВсеСсылки());
	ТаблицаРеквизиты.ЗаполнитьЗначения(ДокументОснование, "ДокументОснование");
	
	Если ТаблицаРеквизиты.Колонки.Найти("СводныйСФКомиссияПоЗакупке") = Неопределено Тогда
		ТаблицаРеквизиты.Колонки.Добавить("СводныйСФКомиссияПоЗакупке", Новый ОписаниеТипов("Булево"));
		ТаблицаРеквизиты.ЗаполнитьЗначения(Ложь, "СводныйСФКомиссияПоЗакупке");
	КонецЕсли;
	
	Если ТаблицаРеквизиты.Колонки.Найти("СводныйСФКомиссияПоПродаже") = Неопределено Тогда
		ТаблицаРеквизиты.Колонки.Добавить("СводныйСФКомиссияПоПродаже", Новый ОписаниеТипов("Булево"));
		ТаблицаРеквизиты.ЗаполнитьЗначения(Ложь, "СводныйСФКомиссияПоПродаже");
	КонецЕсли;
	
	ДанныеДляПечати.Вставить("Реквизиты",			ТаблицаРеквизиты);
	ДанныеДляПечати.Вставить("ТаблицаДокумента",	ТаблицаДокумента);

	Возврат ДанныеДляПечати;

КонецФункции

Функция ПолучитьПараметрыСводногоСчетаФактурыКомиссияПоЗакупке(СчетФактура, ВидСчетаФактуры)

	ПараметрыДляСводногоСФПоКомиссии = Новый Структура;
	
	ПредставлениеПоставщика = "";
	АдресПоставщика 		= "";
	Грузоотправитель 		= "";
	ИННКПППоставщика 		= "";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетФактура", СчетФактура);
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда 
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ОтчетКомитентуОПродажахПоставщики.Поставщик КАК Поставщик,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ОтчетКомитентуОПродажахПоставщики.Партия.Грузоотправитель, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|				ИЛИ ЕСТЬNULL(ОтчетКомитентуОПродажахПоставщики.Партия.Грузоотправитель, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ОтчетКомитентуОПродажахПоставщики.Поставщик
		|			ТОГДА ""он же""
		|		ИНАЧЕ ОтчетКомитентуОПродажахПоставщики.Партия.Грузоотправитель
		|	КОНЕЦ КАК Грузоотправитель,
		|	ОтчетКомитентуОПродажахПоставщики.Ссылка.Дата
		|ИЗ
		|	Документ.ОтчетКомитентуОПродажах.Поставщики КАК ОтчетКомитентуОПродажахПоставщики
		|ГДЕ
		|	ОтчетКомитентуОПродажахПоставщики.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И ОтчетКомитентуОПродажахПоставщики.СчетФактура = &СчетФактура
		|	И ОтчетКомитентуОПродажахПоставщики.Ссылка.ВыписыватьСчетаФактурыСводно
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОтчетКомитентуОПродажахПоставщики.НомерСтроки";
		
	ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаПоступление Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СчетФактураПолученныйПродавцы.Продавец КАК Поставщик,
		|	""он же"" КАК Грузоотправитель,
		|	СчетФактураПолученныйПродавцы.Ссылка.Дата
		|ИЗ
		|	Документ.СчетФактураПолученный.Продавцы КАК СчетФактураПолученныйПродавцы
		|ГДЕ
		|	СчетФактураПолученныйПродавцы.Ссылка = &СчетФактура
		|
		|УПОРЯДОЧИТЬ ПО
		|	СчетФактураПолученныйПродавцы.НомерСтроки";
		
	ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку Тогда	
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СчетФактураВыданныйАвансы.Контрагент КАК Поставщик,
		|	СчетФактураВыданныйАвансы.Ссылка.Дата
		|ИЗ
		|	Документ.СчетФактураВыданный.Авансы КАК СчетФактураВыданныйАвансы
		|ГДЕ
		|	СчетФактураВыданныйАвансы.Ссылка = &СчетФактура
		|
		|УПОРЯДОЧИТЬ ПО
		|	СчетФактураВыданныйАвансы.НомерСтроки";
		
	Иначе
		
		ПараметрыДляСводногоСФПоКомиссии.Вставить("ПредставлениеПоставщика",	ПредставлениеПоставщика);	
		ПараметрыДляСводногоСФПоКомиссии.Вставить("АдресПоставщика", 			АдресПоставщика);	
		ПараметрыДляСводногоСФПоКомиссии.Вставить("Грузоотправитель", 			Грузоотправитель);	
		ПараметрыДляСводногоСФПоКомиссии.Вставить("ИННКПППоставщика", 			ИННКПППоставщика);
		
		Возврат ПараметрыДляСводногоСФПоКомиссии;
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СведенияОПоставщике = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Выборка.Поставщик, Выборка.Дата);
		
		ПредставлениеПоставщика = ?(ПустаяСтрока(ПредставлениеПоставщика), "", ПредставлениеПоставщика + ";") + 
			ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "НаименованиеДляПечатныхФорм,");
		
		АдресПоставщика = ?(ПустаяСтрока(АдресПоставщика), "", АдресПоставщика + ";") + 
			ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес,");
			
		Если ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку Тогда 
			Если ТипЗнч(Выборка.Грузоотправитель) = Тип("Строка") Тогда
				ПредставлениеГрузоотправителя = Выборка.Грузоотправитель;
			Иначе
				СведенияОГрузоотправителе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Выборка.Грузоотправитель, Выборка.Дата);
				ПредставлениеГрузоотправителя = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(
					СведенияОГрузоотправителе, "НаименованиеДляПечатныхФорм,ФактическийАдрес,");
			КонецЕсли;
			
			Грузоотправитель = ?(ПустаяСтрока(Грузоотправитель), "", Грузоотправитель + ";") + ПредставлениеГрузоотправителя;
		КонецЕсли;
		
		ИННКПППоставщика = 	?(ПустаяСтрока(ИННКПППоставщика), "", ИННКПППоставщика + ";") + 
			СведенияОПоставщике.ИНН + ?(ПустаяСтрока(СведенияОПоставщике.КПП), "", "/" + СведенияОПоставщике.КПП);
		
	КонецЦикла;
		
	ПараметрыДляСводногоСФПоКомиссии.Вставить("ПредставлениеПоставщика",	ПредставлениеПоставщика);	
	ПараметрыДляСводногоСФПоКомиссии.Вставить("АдресПоставщика", 			АдресПоставщика);	
	ПараметрыДляСводногоСФПоКомиссии.Вставить("Грузоотправитель", 			Грузоотправитель);	
	ПараметрыДляСводногоСФПоКомиссии.Вставить("ИННКПППоставщика", 			ИННКПППоставщика);
	
	Возврат ПараметрыДляСводногоСФПоКомиссии;
	
КонецФункции

Функция ПолучитьПараметрыСводногоСчетаФактурыКомиссияПоПродаже(СчетФактура, ВидСчетаФактуры)

	ПараметрыДляСводногоСФПоКомиссии = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетФактура", СчетФактура);
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда 
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтчетКомиссионераОПродажахПокупатели.Покупатель КАК Покупатель,
		|	ОтчетКомиссионераОПродажахПокупатели.Ссылка.Дата КАК Дата,
		|	ВЫБОР
		|		КОГДА ОтчетКомиссионераОПродажахПокупатели.Ссылка.Грузополучатель <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА ОтчетКомиссионераОПродажахПокупатели.Ссылка.Грузополучатель
		|		ИНАЧЕ ОтчетКомиссионераОПродажахПокупатели.Покупатель
		|	КОНЕЦ КАК Грузополучатель
		|ИЗ
		|	Документ.ОтчетКомиссионераОПродажах.Покупатели КАК ОтчетКомиссионераОПродажахПокупатели
		|ГДЕ
		|	ОтчетКомиссионераОПродажахПокупатели.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И ОтчетКомиссионераОПродажахПокупатели.СчетФактура = &СчетФактура
		|	И ОтчетКомиссионераОПродажахПокупатели.Ссылка.ВыписыватьСчетаФактурыСводно
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОтчетКомиссионераОПродажахПокупатели.НомерСтроки";
	Иначе
		//авансовый
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетФактураВыданныйАвансы.Контрагент КАК Покупатель,
		|	СчетФактураВыданныйАвансы.Ссылка.Дата
		|ИЗ
		|	Документ.СчетФактураВыданный.Авансы КАК СчетФактураВыданныйАвансы
		|ГДЕ
		|	СчетФактураВыданныйАвансы.Ссылка = &СчетФактура
		|
		|УПОРЯДОЧИТЬ ПО
		|	СчетФактураВыданныйАвансы.НомерСтроки";
	КонецЕсли;	
			
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПредставлениеПокупателя = "";
	АдресПокупателя 		= "";
	Грузополучатель 		= "";
	ИННКПППокупателя 		= "";

	Пока Выборка.Следующий() Цикл
		
		СведенияОПокупателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Выборка.Покупатель, Выборка.Дата);
		
		ПредставлениеПокупателя = ?(ПустаяСтрока(ПредставлениеПокупателя), "", ПредставлениеПокупателя + ";") + 
			ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "НаименованиеДляПечатныхФорм,");
		
		АдресПокупателя = ?(ПустаяСтрока(АдресПокупателя), "", АдресПокупателя + ";") + 
			ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес,");
			
		Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда 			
			СведенияОГрузополучателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Выборка.Грузополучатель, Выборка.Дата);
			ПредставлениеГрузополучателя = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(
				СведенияОГрузополучателе, "НаименованиеДляПечатныхФорм,ФактическийАдрес,");
			
			Грузополучатель = 	?(ПустаяСтрока(Грузополучатель), "", Грузополучатель + ";") + ПредставлениеГрузополучателя;
		КонецЕсли;
		
		ИННКПППокупателя = 	?(ПустаяСтрока(ИННКПППокупателя), "", ИННКПППокупателя + ";") + 
			СведенияОПокупателе.ИНН + ?(ПустаяСтрока(СведенияОПокупателе.КПП), "", "/" + СведенияОПокупателе.КПП);
		
	КонецЦикла;
		
	ПараметрыДляСводногоСФПоКомиссии.Вставить("ПредставлениеПокупателя",	ПредставлениеПокупателя);	
	ПараметрыДляСводногоСФПоКомиссии.Вставить("АдресПокупателя", 			АдресПокупателя);	
	ПараметрыДляСводногоСФПоКомиссии.Вставить("Грузополучатель", 			Грузополучатель);	
	ПараметрыДляСводногоСФПоКомиссии.Вставить("ИННКПППокупателя", 			ИННКПППокупателя);
	
	Возврат ПараметрыДляСводногоСФПоКомиссии;
	
КонецФункции

Функция ПодготовитьДанныеДляПечатиКорректировочныхСчетовФактур(ДокументОснование,  СчетФактура, ВидСчетаФактуры, ИспользуетсяПостановлениеНДС1137) Экспорт

	ДанныеДляПечати = Новый Структура;

	ДополнительнаяКолонкаПечатныхФормДокументов = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если НЕ ЗначениеЗаполнено(ДополнительнаяКолонкаПечатныхФормДокументов) Тогда
		ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ВалютаРеглУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	Запрос.УстановитьПараметр("ВалютаРеглУчета",   ВалютаРеглУчета);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("СчетФактура",	   СчетФактура);
	Запрос.УстановитьПараметр("ВидСчетаФактуры",   ВидСчетаФактуры);
	Запрос.УстановитьПараметр("ТекстБезАкциза",    ?(ИспользуетсяПостановлениеНДС1137, "без акциза", ""));
	Запрос.УстановитьПараметр("ИспользуетсяПостановлениеНДС1137", ИспользуетсяПостановлениеНДС1137);
	Запрос.УстановитьПараметр("ПустоеПодразделение", БухгалтерскийУчетПереопределяемый.ПустоеПодразделение());
	Запрос.УстановитьПараметр("ДополнительнаяКолонкаПечатныхФормДокументов", ДополнительнаяКолонкаПечатныхФормДокументов);
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = Документы[ДокументОснование.Метаданные().Имя].ТекстЗапросаДанныеДляПечатиКорректировочныхСчетовФактур(НомераТаблиц)
		+ ТекстЗапросаДанныеДляПечатиКорректировочныхСчетовФактур(НомераТаблиц);

	Результат = Запрос.ВыполнитьПакет();
	
	Если Результат[НомераТаблиц.Реквизиты].Пустой()
		ИЛИ Результат[НомераТаблиц.ТаблицаДокумента].Пустой() Тогда
		
		ДанныеДляПечати.Вставить("Реквизиты",        Неопределено);
		ДанныеДляПечати.Вставить("ТаблицаДокумента", Неопределено);

		Возврат ДанныеДляПечати;
		
	КонецЕсли;	

	ТаблицаРеквизиты = Результат[НомераТаблиц.Реквизиты].Выгрузить();
	ТаблицаДокумента = Результат[НомераТаблиц.ТаблицаДокумента].Выгрузить();
	Реквизиты        = ТаблицаРеквизиты[0];

	Для каждого СтрокаДокумента Из ТаблицаДокумента Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаДокумента.НаименованиеЕдиницыИзмерения) Тогда
			СтрокаДокумента.КоличествоДоИзменения    = 0;
			СтрокаДокумента.КоличествоПослеИзменения = 0;
			СтрокаДокумента.ЦенаДоИзменения          = 0;
			СтрокаДокумента.ЦенаПослеИзменения       = 0;
		Иначе
			Если СтрокаДокумента.КоличествоДоИзменения = 0 Тогда
				СтрокаДокумента.ЦенаДоИзменения = 0;
			ИначеЕсли СтрокаДокумента.ЦенаДоИзменения = 0 Тогда
				СтрокаДокумента.ЦенаДоИзменения = Окр(СтрокаДокумента.СтоимостьБезНДСДоИзменения / СтрокаДокумента.КоличествоДоИзменения, 2);
			КонецЕсли;
			Если СтрокаДокумента.КоличествоПослеИзменения = 0 Тогда
				СтрокаДокумента.ЦенаПослеИзменения = 0;
			ИначеЕсли СтрокаДокумента.ЦенаПослеИзменения = 0 Тогда
				СтрокаДокумента.ЦенаПослеИзменения = Окр(СтрокаДокумента.СтоимостьБезНДСПослеИзменения / СтрокаДокумента.КоличествоПослеИзменения, 2);
			КонецЕсли;
			Если СтрокаДокумента.КоличествоДоИзменения = 0 
				И СтрокаДокумента.КоличествоПослеИзменения = 0 Тогда
				СтрокаДокумента.НаименованиеЕдиницыИзмерения = "";
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеДляПечати.Вставить("Реквизиты",        ТаблицаРеквизиты);
	ДанныеДляПечати.Вставить("ТаблицаДокумента", ТаблицаДокумента);
	
	Возврат ДанныеДляПечати;
	
КонецФункции

Функция ТекстЗапросаДанныеДляПечатиСчетовФактур(НомераТаблиц)

	НомераТаблиц.Вставить("ТаблицаДокумента", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.НомерТабЧасти КАК НомерТабЧасти,
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Товар = ""СуммоваяРазница""
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ТаблицаДокумента.Товар
	|	КОНЕЦ КАК Товар,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Код)
	|			ТОГДА ТаблицаДокумента.ТоварКод
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА ТаблицаДокумента.ТоварАртикул
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ТоварКод,
	|	ТаблицаДокумента.ТоварНаименование КАК ТоварНаименование,
	|	ТаблицаДокумента.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СтранаПроисхождения = ЗНАЧЕНИЕ(Справочник.СтраныМира.РОССИЯ)
	|			ТОГДА """"
	|		ИНАЧЕ ЕСТЬNULL(СтраныМира.Наименование, """")
	|	КОНЕЦ КАК ПредставлениеСтраны,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СтранаПроисхождения = ЗНАЧЕНИЕ(Справочник.СтраныМира.РОССИЯ)
	|			ТОГДА """"
	|		ИНАЧЕ ЕСТЬNULL(СтраныМира.Код, """")
	|	КОНЕЦ КАК СтранаПроисхожденияКод,
	|	ТаблицаДокумента.НомерГТД КАК НомерГТД,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СтранаПроисхождения = ЗНАЧЕНИЕ(Справочник.СтраныМира.РОССИЯ)
	|			ТОГДА """"
	|		ИНАЧЕ ТаблицаДокумента.ПредставлениеГТД
	|	КОНЕЦ КАК ПредставлениеГТД,
	|	ТаблицаДокумента.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(КлассификаторЕдиницИзмерения.Код, """") КАК ЕдиницаИзмеренияКод,
	|	ЕСТЬNULL(КлассификаторЕдиницИзмерения.Наименование, """") КАК ЕдиницаИзмеренияНаименование,
	|	ТаблицаДокумента.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаВключаетНДС
	|				И НЕ &НеподтверждениеНулевойСтавки
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаДокумента.Количество = 0
	|						ТОГДА 0
	|					КОГДА ТаблицаДокумента.СуммаНДС = 0
	|						ТОГДА ТаблицаДокумента.Цена
	|					ИНАЧЕ ВЫРАЗИТЬ((ТаблицаДокумента.Сумма - ТаблицаДокумента.СуммаНДС) / ТаблицаДокумента.Количество КАК ЧИСЛО(15, 2))
	|				КОНЕЦ
	|		ИНАЧЕ ТаблицаДокумента.Цена
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаВключаетНДС
	|				И НЕ &НеподтверждениеНулевойСтавки
	|			ТОГДА ТаблицаДокумента.Сумма
	|		ИНАЧЕ ТаблицаДокумента.Сумма + ВЫБОР
	|				КОГДА &НеподтверждениеНулевойСтавки
	|					ТОГДА ТаблицаДокумента.Сумма * ВЫБОР
	|							КОГДА СтавкиНДСНоменклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	|									ИЛИ СтавкиНДСНоменклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
	|								ТОГДА 0.1
	|							ИНАЧЕ 0.18
	|						КОНЕЦ
	|				ИНАЧЕ ТаблицаДокумента.СуммаНДС
	|			КОНЕЦ
	|	КОНЕЦ КАК Всего,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Товар = ""СуммоваяРазница""
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаДокумента.СуммаВключаетНДС
	|					ТОГДА ТаблицаДокумента.Сумма - ТаблицаДокумента.СуммаНДС
	|				ИНАЧЕ ТаблицаДокумента.Сумма
	|			КОНЕЦ
	|	КОНЕЦ КАК СуммаБезНДС,
	|	ВЫБОР
	|		КОГДА &НеподтверждениеНулевойСтавки
	|			ТОГДА ТаблицаДокумента.Сумма * ВЫБОР
	|					КОГДА СтавкиНДСНоменклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	|							ИЛИ СтавкиНДСНоменклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
	|						ТОГДА 0.1
	|					ИНАЧЕ 0.18
	|				КОНЕЦ
	|		ИНАЧЕ ТаблицаДокумента.СуммаНДС
	|	КОНЕЦ КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА &НеподтверждениеНулевойСтавки
	|			ТОГДА ВЫБОР
	|					КОГДА СтавкиНДСНоменклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	|							ИЛИ СтавкиНДСНоменклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	|				КОНЕЦ
	|		ИНАЧЕ ТаблицаДокумента.СтавкаНДС
	|	КОНЕЦ КАК СтавкаНДС,
	|	&ТекстБезАкциза КАК Акциз,
	|	ТаблицаДокумента.Ссылка КАК Ссылка,
	|	ТаблицаДокумента.ЭтоКомиссия,
	|	ВЫБОР
	|		КОГДА &НеподтверждениеНулевойСтавки
	|			ТОГДА ТаблицаДокумента.СуммаБезНДСРуб + ТаблицаДокумента.СуммаБезНДСРуб * ВЫБОР
	|					КОГДА СтавкиНДСНоменклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	|							ИЛИ СтавкиНДСНоменклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
	|						ТОГДА 0.1
	|					ИНАЧЕ 0.18
	|				КОНЕЦ
	|		ИНАЧЕ ТаблицаДокумента.ВсегоРуб
	|	КОНЕЦ КАК ВсегоРуб,
	|	ВЫБОР
	|		КОГДА &НеподтверждениеНулевойСтавки
	|			ТОГДА ТаблицаДокумента.СуммаБезНДСРуб * ВЫБОР
	|					КОГДА СтавкиНДСНоменклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	|							ИЛИ СтавкиНДСНоменклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
	|						ТОГДА 0.1
	|					ИНАЧЕ 0.18
	|				КОНЕЦ
	|		ИНАЧЕ ТаблицаДокумента.НДСРуб
	|	КОНЕЦ КАК НДСРуб,
	|	ТаблицаДокумента.СуммаБезНДСРуб,
	|	ТаблицаДокумента.КонтрагентСводныйСФ
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтраныМира КАК СтраныМира
	|		ПО (СтраныМира.Ссылка = ТаблицаДокумента.СтранаПроисхождения)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
	|		ПО (КлассификаторЕдиницИзмерения.Ссылка = ТаблицаДокумента.ЕдиницаИзмерения)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СтавкиНДСНоменклатура
	|		ПО (СтавкиНДСНоменклатура.Ссылка = ТаблицаДокумента.Товар)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерТабЧасти,
	|	НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаДанныеДляПечатиКорректировочныхСчетовФактур(НомераТаблиц)

	НомераТаблиц.Вставить("ТаблицаДокумента", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка КАК Ссылка,
	|	ТаблицаДокумента.НомерТабЧасти КАК НомерТабЧасти,
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Товар КАК Товар,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Код)
	|			ТОГДА ТаблицаДокумента.ТоварКод
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА ТаблицаДокумента.ТоварАртикул
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ТоварКод,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(ТаблицаДокумента.ТоварНаименование КАК СТРОКА(10))) = """"
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(ТаблицаДокумента.Товар)
	|		ИНАЧЕ ВЫРАЗИТЬ(ТаблицаДокумента.ТоварНаименование КАК СТРОКА(1000))
	|	КОНЕЦ КАК НаименованиеНоменклатуры,
	|	ТаблицаДокумента.ЕдиницаИзмерения КАК НаименованиеЕдиницыИзмерения,
	|	ЕСТЬNULL(КлассификаторЕдиницИзмерения.Код, """") КАК ЕдиницаИзмеренияКод,
	|	ТаблицаДокумента.КоличествоДоИзменения,
	|	ТаблицаДокумента.КоличествоПослеИзменения,
	|	ТаблицаДокумента.ЦенаДоИзменения,
	|	ТаблицаДокумента.ЦенаПослеИзменения,
	|	ТаблицаДокумента.СтоимостьБезНДСДоИзменения,
	|	ТаблицаДокумента.СтоимостьБезНДСПослеИзменения,
	|	ТаблицаДокумента.СтавкаНДС,
	|	&ТекстБезАкциза КАК Акциз,
	|	ТаблицаДокумента.СуммаНДСДоИзменения,
	|	ТаблицаДокумента.СуммаНДСПослеИзменения,
	|	ТаблицаДокумента.СтоимостьСНДСДоИзменения,
	|	ТаблицаДокумента.СтоимостьСНДСПослеИзменения,
	|	ТаблицаДокумента.РазницаБезНДСУвеличение,
	|	ТаблицаДокумента.РазницаБезНДСУменьшение,
	|	ТаблицаДокумента.РазницаНДСУвеличение,
	|	ТаблицаДокумента.РазницаНДСУменьшение,
	|	ТаблицаДокумента.РазницаСНДСУвеличение,
	|	ТаблицаДокумента.РазницаСНДСУменьшение
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
	|		ПО ТаблицаДокумента.ЕдиницаИзмерения = КлассификаторЕдиницИзмерения.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерТабЧасти,
	|	НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ПолучитьДанныеДляПечатиСчетаФактуры1137(МассивОбъектов, ТекстЗапросаПоСчетамФактурам, ДополнитьДаннымиУПД = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("НачалоПримененияПостановления1137", УчетНДСБП.ПолучитьДатуНачалаДействияПостановления1137());	
	Запрос.Текст = ТекстЗапросаПоСчетамФактурам;
	Результаты   = Запрос.ВыполнитьПакет();
	
	ВыборкаСФ = Результаты[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СчетФактура");
	
	ПлатежноРасчетныеДокументы	= Неопределено;
	Если Результаты.Количество() > 1 И НЕ Результаты[1].Пустой() Тогда
		ПлатежноРасчетныеДокументы	= Результаты[1].Выгрузить();
		ПлатежноРасчетныеДокументы.Индексы.Добавить("СчетФактура");
	КонецЕсли;
	
	ТаблицаСчетовФактур = Новый ТаблицаЗначений();
	ТаблицаСчетовФактур.Колонки.Добавить("ДанныеШапки");
	ТаблицаСчетовФактур.Колонки.Добавить("ТаблицаДокумента");
	ТаблицаСчетовФактур.Колонки.Добавить("ДокументыОснования");
	ТаблицаСчетовФактур.Колонки.Добавить("ВидСчетаФактуры");
	ТаблицаСчетовФактур.Колонки.Добавить("СчетФактура");
	ТаблицаСчетовФактур.Колонки.Добавить("СчетФактураБезНДС");
	ТаблицаСчетовФактур.Колонки.Добавить("Дата");
	ТаблицаСчетовФактур.Колонки.Добавить("Ссылка");
	
	ДанныеСчетаФактуры = Новый Структура(
		"СчетФактура,ВидСчетаФактуры,Контрагент,ДоговорКонтрагента,ИспользуетсяПостановлениеНДС1137,НеподтверждениеНулевойСтавки,СводныйКомиссионный");
	ДанныеСчетаФактуры.ИспользуетсяПостановлениеНДС1137 = Истина;
	ДанныеСчетаФактуры.НеподтверждениеНулевойСтавки = Ложь;
	
	Пока ВыборкаСФ.Следующий() Цикл
		
		ТаблицаДокумента = Неопределено;
		ДокументыОснования = Новый Массив;
		ВыборкаПоОснованиям = ВыборкаСФ.Выбрать();
		Пока ВыборкаПоОснованиям.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаПоОснованиям.ДокументОснование) Тогда
				Продолжить;
			КонецЕсли;
			
			ДокументыОснования.Добавить(ВыборкаПоОснованиям.ДокументОснование);
			ЗаполнитьЗначенияСвойств(ДанныеСчетаФактуры, ВыборкаСФ);
			ПараметрыОснования = ПодготовитьДанныеДляПечатиСчетовФактур(ВыборкаПоОснованиям.ДокументОснование, ДанныеСчетаФактуры);
				
			Если ПараметрыОснования.Реквизиты = Неопределено ИЛИ ПараметрыОснования.ТаблицаДокумента = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Реквизиты = ПараметрыОснования.Реквизиты[0];
			
			Если ТаблицаДокумента = Неопределено Тогда
				ТаблицаДокумента = ПараметрыОснования.ТаблицаДокумента;
			Иначе
				ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ПараметрыОснования.ТаблицаДокумента, ТаблицаДокумента);
			КонецЕсли;
		КонецЦикла;
		Если ТаблицаДокумента = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаДокумента.Колонки.СуммаБезНДС.Имя = "Стоимость";
		
		КолонкиГруппировок = ""
		+"Товар,"
		+"ТоварКод,"
		+"ТоварНаименование,"
		+"СтранаПроисхождения,"
		+"ПредставлениеСтраны,"
		+"СтранаПроисхожденияКод,"
		+"НомерГТД,"
		+"ПредставлениеГТД,"
		+"ЕдиницаИзмерения,"
		+"ЕдиницаИзмеренияКод,"
		+"ЕдиницаИзмеренияНаименование,"
		+"Цена,"	
		+"СтавкаНДС,"
		+"КонтрагентСводныйСФ,"
		+"Акциз";
				
		КолонкиСуммирования = ""
		+"Количество,"
		+"Всего,"
		+"Стоимость,"
		+"СуммаНДС,"
		+"ВсегоРуб,"
		+"НДСРуб,"
		+"СуммаБезНДСРуб";
		
		ТаблицаДокумента.Свернуть(КолонкиГруппировок, КолонкиСуммирования);
		ТаблицаДокумента.Колонки.Добавить("НомерСтроки");
		 
		ДанныеШапки = ПодготовитьДанныеШапкиСчетаФактуры1137(ВыборкаСФ, Реквизиты, ПлатежноРасчетныеДокументы, ДополнитьДаннымиУПД);
		
		СчетФактура = ТаблицаСчетовФактур.Добавить();
		СчетФактура.Дата               = ВыборкаСФ.Дата;
		СчетФактура.СчетФактура        = ВыборкаСФ.СчетФактура;
		СчетФактура.ВидСчетаФактуры    = ВыборкаСФ.ВидСчетаФактуры;
		СчетФактура.СчетФактураБезНДС  = ВыборкаСФ.СчетФактураБезНДС;
		СчетФактура.ДанныеШапки        = ДанныеШапки;
		СчетФактура.ТаблицаДокумента   = ТаблицаДокумента;
		СчетФактура.ДокументыОснования = ДокументыОснования;
		СчетФактура.Ссылка             = ВыборкаСФ.СчетФактура;
		
	КонецЦикла;
	
	Возврат ТаблицаСчетовФактур;
	
КонецФункции

Функция ПолучитьДанныеДляПечатиКорректировочныхСчетовФактур1137(МассивОбъектов, ТекстЗапросаПоСчетамФактурам, ДополнитьДаннымиУПД = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("НачалоПримененияПостановления1137", УчетНДСБП.ПолучитьДатуНачалаДействияПостановления1137());
	Запрос.Текст = ТекстЗапросаПоСчетамФактурам;
	Результаты   = Запрос.ВыполнитьПакет();
	
	ВыборкаСФ = Результаты[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СчетФактура");
	
	ТаблицаСчетовФактур = Новый ТаблицаЗначений();
	ТаблицаСчетовФактур.Колонки.Добавить("ДанныеШапки");
	ТаблицаСчетовФактур.Колонки.Добавить("ТаблицаДокумента");
	ТаблицаСчетовФактур.Колонки.Добавить("ДокументыОснования");
	ТаблицаСчетовФактур.Колонки.Добавить("ВидСчетаФактуры");
	ТаблицаСчетовФактур.Колонки.Добавить("СчетФактура");
	ТаблицаСчетовФактур.Колонки.Добавить("СчетФактураБезНДС");
	ТаблицаСчетовФактур.Колонки.Добавить("Ссылка");
	
	Пока ВыборкаСФ.Следующий() Цикл
		
		ТаблицаДокумента = Неопределено;
		ДокументыОснования = Новый Массив;
		ВыборкаПоОснованиям = ВыборкаСФ.Выбрать();
		Пока ВыборкаПоОснованиям.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаПоОснованиям.ДокументОснование) Тогда
				Продолжить;
			КонецЕсли;
			ДокументыОснования.Добавить(ВыборкаПоОснованиям.ДокументОснование);
			ПараметрыОснования = ПодготовитьДанныеДляПечатиКорректировочныхСчетовФактур(
				ВыборкаПоОснованиям.ДокументОснование, ВыборкаСФ.СчетФактура, ВыборкаСФ.ВидСчетаФактуры, Истина);
			
			Если ПараметрыОснования.Реквизиты = Неопределено ИЛИ ПараметрыОснования.ТаблицаДокумента = Неопределено Тогда
				Продолжить;
			Иначе
				Реквизиты = ПараметрыОснования.Реквизиты[0];
			КонецЕсли; 

			Если ТаблицаДокумента = Неопределено Тогда
				ТаблицаДокумента = ПараметрыОснования.ТаблицаДокумента;
			Иначе
				ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ПараметрыОснования.ТаблицаДокумента, ТаблицаДокумента);
			КонецЕсли;
		КонецЦикла;
		
		Если ТаблицаДокумента = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		КолонкиГруппировок = ""
		+"Товар,"
		+"ТоварКод,"
		+"НаименованиеНоменклатуры,"
		+"НаименованиеЕдиницыИзмерения,"
		+"ЕдиницаИзмеренияКод,"
		+"ЦенаДоИзменения,"	
		+"ЦенаПослеИзменения,"
		+"СтавкаНДС,"
		+"Акциз";
		
		КолонкиСуммирования = ""
		+"СуммаНДСДоИзменения,"
		+"СуммаНДСПослеИзменения,"
		+"СтоимостьСНДСДоИзменения,"
		+"СтоимостьСНДСПослеИзменения,"
		+"РазницаБезНДСУвеличение,"
		+"РазницаБезНДСУменьшение,"
		+"РазницаНДСУвеличение,"
		+"РазницаНДСУменьшение,"
		+"РазницаСНДСУвеличение,"
		+"РазницаСНДСУменьшение,"
		+"СтоимостьБезНДСДоИзменения,"
		+"СтоимостьБезНДСПослеИзменения,"
		+"КоличествоДоИзменения,"
		+"КоличествоПослеИзменения";
		
		ТаблицаДокумента.Свернуть(КолонкиГруппировок, КолонкиСуммирования);
		ТаблицаДокумента.Колонки.Добавить("НомерСтроки");
			
		СчетФактура = ТаблицаСчетовФактур.Добавить();
		СчетФактура.СчетФактура = ВыборкаСФ.СчетФактура;
		СчетФактура.ВидСчетаФактуры = ВыборкаСФ.ВидСчетаФактуры;
		СчетФактура.СчетФактураБезНДС = ВыборкаСФ.СчетФактураБезНДС;
		СчетФактура.ДанныеШапки = ПодготовитьДанныеШапкиКорректировочногоСчетаФактуры1137(ВыборкаСФ, Реквизиты, ДополнитьДаннымиУПД);
		СчетФактура.ТаблицаДокумента = ТаблицаДокумента;
		СчетФактура.ДокументыОснования = ДокументыОснования;
		СчетФактура.Ссылка             = ВыборкаСФ.СчетФактура;
		
		Если ДополнитьДаннымиУПД Тогда
			РеквизитыПередаточныхДокументов = "";
			Для каждого Основание Из ДокументыОснования Цикл
				СсылкаНаСчетФактуру = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(Основание.ИсправляемыйДокументРеализации);
				СсылкаНаСчетФактуру = ?(ЗначениеЗаполнено(СсылкаНаСчетФактуру), СсылкаНаСчетФактуру, Основание.ИсправляемыйДокументРеализации);
				РеквизитыПередаточныхДокументов = ?(РеквизитыПередаточныхДокументов = "", РеквизитыПередаточныхДокументов,РеквизитыПередаточныхДокументов + ", ") 
				+ "Универсальный передаточный документ " + НалоговыйУчетУСН.РеквизитыПервичногоДокумента(СсылкаНаСчетФактуру);
			КонецЦикла;
			СчетФактура.ДанныеШапки.Вставить("РеквизитыПередаточныхДокументов", РеквизитыПередаточныхДокументов);			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаСчетовФактур;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПЕЧАТЬ УНИВЕРСАЛЬНЫХ ПЕРЕДАТОЧНЫХ ДОКУМЕНТОВ

Функция ПечатьУниверсальныхПередаточныхДокументов(МассивОбъектов, ОбъектыПечати, ТекстЗапросаДокументам, ТолькоПередаточныйДокумент = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб        = Истина;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ЭкземпляровНаСтранице = 1;
	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УниверсальныйПередаточныйДокумент";
	
	УстановкаМинимальныхПолейДляПечати(ТабДокумент);
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьУПД.ПФ_MXL_УниверсальныйПередаточныйДокумент");
	
	Если ТолькоПередаточныйДокумент Тогда
		ДанныеУниверсальныхПередаточныхДокументов = ПолучитьДанныеДляПечатиУниверсальногоПередаточногоДокумента(
			МассивОбъектов, ТекстЗапросаДокументам);
	Иначе
		ДанныеУниверсальныхПередаточныхДокументов = ПолучитьДанныеДляПечатиСчетаФактуры1137(
			МассивОбъектов, ТекстЗапросаДокументам, Истина);
	КонецЕсли;
	
	ПервыйДокумент = Истина;
	
	Для Каждого ВыборкаУПД ИЗ ДанныеУниверсальныхПередаточныхДокументов Цикл
		
		Если ВыборкаУПД.Дата < '20130101' Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаДокумента = ВыборкаУПД.ТаблицаДокумента;
		Если ТаблицаДокумента = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		ВывестиСчетФактуруВТабличныйДокумент(ТабДокумент, Макет, ВыборкаУПД, Истина);
		
		// Вывод подвала накладной
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалНакладной");
		ОбластьМакета.Параметры.Заполнить(ВыборкаУПД.ДанныеШапки);
		ТабДокумент.Вывести(ОбластьМакета);
		
		// В табличном документе зададим имя области, в которую был выведен объект.
		// Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент,
			НомерСтрокиНачало, ОбъектыПечати, ВыборкаУПД.Ссылка);
		
	КонецЦикла;
	
	Если МассивОбъектов.Количество() = 1 И ПервыйДокумент Тогда
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Для %1 универсальный передаточный документ не применяется'"), Строка(МассивОбъектов[0]));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
	КонецЕсли;
	
	Возврат ТабДокумент;

КонецФункции

Функция ПолучитьДанныеДляПечатиУниверсальногоПередаточногоДокумента(МассивОбъектов, ТекстЗапросаДокументам)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = ТекстЗапросаДокументам;
	
	ТаблицаСчетовФактур = Новый ТаблицаЗначений();
	ТаблицаСчетовФактур.Колонки.Добавить("ДанныеШапки");
	ТаблицаСчетовФактур.Колонки.Добавить("ТаблицаДокумента");
	ТаблицаСчетовФактур.Колонки.Добавить("ДокументыОснования");
	ТаблицаСчетовФактур.Колонки.Добавить("ВидСчетаФактуры");
	ТаблицаСчетовФактур.Колонки.Добавить("СчетФактура");
	ТаблицаСчетовФактур.Колонки.Добавить("СчетФактураБезНДС");
	ТаблицаСчетовФактур.Колонки.Добавить("Дата");
	ТаблицаСчетовФактур.Колонки.Добавить("Ссылка");
	
	ДанныеСчетаФактуры = Новый Структура("СчетФактура, ВидСчетаФактуры, Контрагент, ДоговорКонтрагента, ИспользуетсяПостановлениеНДС1137");
	ДанныеСчетаФактуры.ИспользуетсяПостановлениеНДС1137 = Истина;
	
	ВыборкаПоОснованиям = Запрос.Выполнить().Выбрать();
	Пока ВыборкаПоОснованиям.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоОснованиям.ДокументОснование) Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументыОснования = Новый Массив;
		ДокументыОснования.Добавить(ВыборкаПоОснованиям.ДокументОснование);
		
		ЗаполнитьЗначенияСвойств(ДанныеСчетаФактуры, ВыборкаПоОснованиям);
		ПараметрыОснования = ПодготовитьДанныеДляПечатиУниверсальныхПередаточныхДокументов(ВыборкаПоОснованиям.ДокументОснование, ДанныеСчетаФактуры);
		
		Если ПараметрыОснования.Реквизиты = Неопределено ИЛИ ПараметрыОснования.ТаблицаДокумента = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		ТаблицаДокумента = ПараметрыОснования.ТаблицаДокумента;
		
		ТаблицаДокумента.Колонки.СуммаБезНДС.Имя = "Стоимость";
		
		ДанныеШапки = ПодготовитьДанныеШапкиУниверсальногоПередаточногоДокумента(ВыборкаПоОснованиям, ПараметрыОснования.Реквизиты[0]);
		
		СчетФактура = ТаблицаСчетовФактур.Добавить();
		СчетФактура.Дата               = ВыборкаПоОснованиям.Дата;
		СчетФактура.СчетФактура        = ВыборкаПоОснованиям.СчетФактура;
		СчетФактура.ВидСчетаФактуры    = ВыборкаПоОснованиям.ВидСчетаФактуры;
		СчетФактура.СчетФактураБезНДС  = ВыборкаПоОснованиям.СчетФактураБезНДС;
		СчетФактура.ДанныеШапки        = ДанныеШапки;
		СчетФактура.ТаблицаДокумента   = ТаблицаДокумента;
		СчетФактура.ДокументыОснования = ДокументыОснования;
		СчетФактура.Ссылка             = ВыборкаПоОснованиям.ДокументОснование;
		
	КонецЦикла;
	
	Возврат ТаблицаСчетовФактур;
	
КонецФункции

Функция ПодготовитьДанныеДляПечатиУниверсальныхПередаточныхДокументов(ДокументОснование, ДанныеСчетаФактуры)
	
	ТекстПустойПоказатель = "--";
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПередачаТоваров") Тогда
		ДанныеДляПечати = Документы.ПередачаТоваров.ПодготовитьДанныеДляПечатиУниверсальныхПередаточныхДокументов(ДокументОснование);
	Иначе
		ДанныеДляПечати = ПодготовитьДанныеДляПечатиСчетовФактур(ДокументОснование, ДанныеСчетаФактуры);
	КонецЕсли;
	
	// Поля, которые в УПД со статусом 2 должны быть пустыми
	ПустыеПоляУПД = Новый Структура;
	ПустыеПоляУПД.Вставить("Акциз",                  ТекстПустойПоказатель);
	ПустыеПоляУПД.Вставить("СтавкаНДС",              Перечисления.СтавкиНДС.ПустаяСсылка());
	ПустыеПоляУПД.Вставить("НомерГТД",               Справочники.НомераГТД.ПустаяСсылка());
	ПустыеПоляУПД.Вставить("ПредставлениеГТД",       ТекстПустойПоказатель);
	ПустыеПоляУПД.Вставить("СтранаПроисхождения",    Справочники.СтраныМира.ПустаяСсылка());
	ПустыеПоляУПД.Вставить("СтранаПроисхожденияКод", ТекстПустойПоказатель);
	ПустыеПоляУПД.Вставить("ПредставлениеСтраны",    ТекстПустойПоказатель);
	
	Если ДанныеДляПечати.ТаблицаДокумента <> Неопределено Тогда
		Для Каждого СтрокаДокумента Из ДанныеДляПечати.ТаблицаДокумента Цикл
			ЗаполнитьЗначенияСвойств(СтрокаДокумента, ПустыеПоляУПД);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеДляПечати;
	
КонецФункции

Функция ПодготовитьДанныеШапкиУниверсальногоПередаточногоДокумента(ВыборкаСФ, Реквизиты) 

	Возврат ПодготовитьДанныеШапкиСчетаФактуры1137(ВыборкаСФ, Реквизиты, Неопределено, Истина);

КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПЕЧАТЬ УНИВЕРСАЛЬНЫХ КОРРЕКТИРОВОЧНЫХ ДОКУМЕНТОВ

Функция ПечатьУниверсальныхКорректировочныхДокументов(МассивОбъектов, ОбъектыПечати, ТекстЗапросаДокументам, ТолькоПередаточныйДокумент = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб        = Истина;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ЭкземпляровНаСтранице = 1;
	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УниверсальныйКорректировочныйДокумент";
		
	УстановкаМинимальныхПолейДляПечати(ТабДокумент);
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьУКД.ПФ_MXL_УниверсальныйКорректировочныйДокумент");
	
	Если ТолькоПередаточныйДокумент Тогда
		ДанныеУниверсальныхКорректировочныхДокументов = ПолучитьДанныеДляПечатиУниверсальногоКорректировочногоДокумента(
			МассивОбъектов, ТекстЗапросаДокументам);
	Иначе
		ДанныеУниверсальныхКорректировочныхДокументов = ПолучитьДанныеДляПечатиКорректировочныхСчетовФактур1137(
			МассивОбъектов, ТекстЗапросаДокументам, Истина);
	КонецЕсли;
	
	ПервыйДокумент = Истина;
	
	Для Каждого ВыборкаУКД ИЗ ДанныеУниверсальныхКорректировочныхДокументов Цикл
		
		//Если ВыборкаУКД.Дата < '20130101' Тогда
		//	Продолжить;
		//КонецЕсли;
		
		ТаблицаДокумента = ВыборкаУКД.ТаблицаДокумента;
		Если ТаблицаДокумента = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		ВывестиКорректировочныйСчетФактуруВТабличныйДокумент(ТабДокумент, Макет, ВыборкаУКД, Истина);
		
		// Вывод подвала накладной
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалНакладной");
		ОбластьМакета.Параметры.Заполнить(ВыборкаУКД.ДанныеШапки);
		ТабДокумент.Вывести(ОбластьМакета);
		
		// В табличном документе зададим имя области, в которую был выведен объект.
		// Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент,
			НомерСтрокиНачало, ОбъектыПечати, ВыборкаУКД.Ссылка);
		
	КонецЦикла;
	
	Если МассивОбъектов.Количество() = 1 И ПервыйДокумент Тогда
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Для %1 универсальный корректировочный документ не применяется'"), Строка(МассивОбъектов[0]));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
	КонецЕсли;
	
	Возврат ТабДокумент;

КонецФункции

Функция ПолучитьДанныеДляПечатиУниверсальногоКорректировочногоДокумента(МассивОбъектов, ТекстЗапросаДокументам)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = ТекстЗапросаДокументам;
	
	ТаблицаСчетовФактур = Новый ТаблицаЗначений();
	ТаблицаСчетовФактур.Колонки.Добавить("ДанныеШапки");
	ТаблицаСчетовФактур.Колонки.Добавить("ТаблицаДокумента");
	ТаблицаСчетовФактур.Колонки.Добавить("ДокументыОснования");
	ТаблицаСчетовФактур.Колонки.Добавить("ВидСчетаФактуры");
	ТаблицаСчетовФактур.Колонки.Добавить("СчетФактура");
	ТаблицаСчетовФактур.Колонки.Добавить("СчетФактураБезНДС");
	ТаблицаСчетовФактур.Колонки.Добавить("Дата");
	ТаблицаСчетовФактур.Колонки.Добавить("Ссылка");
	
	ДанныеСчетаФактуры = Новый Структура("СчетФактура, ВидСчетаФактуры, Контрагент, ДоговорКонтрагента, ИспользуетсяПостановлениеНДС1137");
	ДанныеСчетаФактуры.ИспользуетсяПостановлениеНДС1137 = Истина;
	
	ВыборкаПоОснованиям = Запрос.Выполнить().Выбрать();
	Пока ВыборкаПоОснованиям.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоОснованиям.ДокументОснование) Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументыОснования = Новый Массив;
		ДокументыОснования.Добавить(ВыборкаПоОснованиям.ДокументОснование);
		
		ЗаполнитьЗначенияСвойств(ДанныеСчетаФактуры, ВыборкаПоОснованиям);
		ПараметрыОснования = ПодготовитьДанныеДляПечатиУниверсальныхКорректировочныхДокументов(ВыборкаПоОснованиям.ДокументОснование, ДанныеСчетаФактуры);
		
		Если ПараметрыОснования.Реквизиты = Неопределено ИЛИ ПараметрыОснования.ТаблицаДокумента = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		ТаблицаДокумента = ПараметрыОснования.ТаблицаДокумента;
		
		ДанныеШапки = ПодготовитьДанныеШапкиУниверсальногоКорректировочногоДокумента(ВыборкаПоОснованиям, ПараметрыОснования.Реквизиты[0]);
		
		СчетФактура = ТаблицаСчетовФактур.Добавить();
		СчетФактура.Дата               = ВыборкаПоОснованиям.Дата;
		СчетФактура.СчетФактура        = ВыборкаПоОснованиям.СчетФактура;
		СчетФактура.ВидСчетаФактуры    = ВыборкаПоОснованиям.ВидСчетаФактуры;
		СчетФактура.СчетФактураБезНДС  = ВыборкаПоОснованиям.СчетФактураБезНДС;
		СчетФактура.ДанныеШапки        = ДанныеШапки;
		СчетФактура.ТаблицаДокумента   = ТаблицаДокумента;
		СчетФактура.ДокументыОснования = ДокументыОснования;
		СчетФактура.Ссылка             = ВыборкаПоОснованиям.ДокументОснование;
		
		СчетФактура.ДанныеШапки.Вставить("РеквизитыПередаточныхДокументов", "Универсальный передаточный документ " + НалоговыйУчетУСН.РеквизитыПервичногоДокумента(ВыборкаПоОснованиям.ДокументОснование.ИсправляемыйДокументРеализации));			
				
	КонецЦикла;
	
	Возврат ТаблицаСчетовФактур;
	
КонецФункции

Функция ПодготовитьДанныеДляПечатиУниверсальныхКорректировочныхДокументов(ДокументОснование, ДанныеСчетаФактуры)
	
	ТекстПустойПоказатель = "--";
	
	ДанныеДляПечати = ПодготовитьДанныеДляПечатиКорректировочныхСчетовФактур(ДокументОснование, ДанныеСчетаФактуры.СчетФактура, ДанныеСчетаФактуры.ВидСчетаФактуры, Истина);
		
	// Поля, которые в УПД со статусом 2 должны быть пустыми
	ПустыеПоляУКД = Новый Структура;
	ПустыеПоляУКД.Вставить("Акциз",                  ТекстПустойПоказатель);
	ПустыеПоляУКД.Вставить("СтавкаНДС",              Перечисления.СтавкиНДС.ПустаяСсылка());
	
	Если ДанныеДляПечати.ТаблицаДокумента <> Неопределено Тогда
		Для Каждого СтрокаДокумента Из ДанныеДляПечати.ТаблицаДокумента Цикл
			ЗаполнитьЗначенияСвойств(СтрокаДокумента, ПустыеПоляУКД);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеДляПечати;
	
КонецФункции

Функция ПодготовитьДанныеШапкиУниверсальногоКорректировочногоДокумента(ВыборкаСФ, Реквизиты) 

	Возврат ПодготовитьДанныеШапкиКорректировочногоСчетаФактуры1137(ВыборкаСФ, Реквизиты, Истина);

КонецФункции


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ РЕГЛАМЕНТИРОВАННОЙ ОТЧЕТНОСТИ ПО НДС

//Возвращает идентификатор макета для расшифровки показателей декларации по НДС
// Для версии отчета ФормаОтчета2009Кв4
Функция ПолучитьИдентификаторМакетаРасшифровки(Показатель, РаздельныйУчетНДС, УпрощенныйУчетНДС, УчетНДС2012)
	
	ИдентификаторМакета = "";
	Если УпрощенныйУчетНДС Тогда
		Если УчетНДС2012 Тогда
			// ВидКарты = "УчетСРегламентнымиДокументами";
			Если Показатель = "П000300001003" ИЛИ Показатель = "П000300001005" 
				ИЛИ Показатель = "П000300002003" ИЛИ Показатель = "П000300002005"
				ИЛИ Показатель = "П000300003003" ИЛИ Показатель = "П000300003005"
				ИЛИ Показатель = "П000300004003" ИЛИ Показатель = "П000300004005" Тогда
				//	1.1 - Начисления по реализации
				ИдентификаторМакета = "РасшифровкаНачислениеРеализация";
			ИначеЕсли Показатель = "П000300007003" ИЛИ Показатель = "П000300007005" Тогда
				//	1.2 - Начисления по авансам полученным
				ИдентификаторМакета = "РасшифровкаНачислениеАвансыПолученныеУпрощенныйУчетНДС"; 
			ИначеЕсли Показатель = "П000200006003" ИЛИ Показатель = "П000200008003" ИЛИ Показатель = "П000200009003" Тогда
				//	1.3 - Начисления при исполнении обязанностей налогового агента
				ИдентификаторМакета = "РасшифровкаНачислениеИсполнениеОНА";
			ИначеЕсли Показатель = "П000200006003" ИЛИ Показатель = "П000200008003" ИЛИ Показатель = "П000200009003" 
				ИЛИ Показатель = "П000300009005" ИЛИ Показатель = "П000300011005" Тогда
				//	1.4 - Восстановление (начисление) по ранее выданным авансам
				ИдентификаторМакета = "РасшифровкаНачислениеВосстановлениеСАвансовВыданныхУпрощенныйУчетНДС"; 
			ИначеЕсли Показатель = "П000300006003" ИЛИ Показатель = "П000300006005" Тогда
				//	1.5 - Начисления при выполнении СМР хоз. способом
				ИдентификаторМакета = "РасшифровкаНачислениеСМРХозСпособом";
			ИначеЕсли Показатель = "П000300013003" Тогда
				// Специальный набор для расшифровки строки 130 раздела 3 декларации НДС
				ИдентификаторМакета = "РасшифровкаСтроки130Декларации";
			ИначеЕсли Показатель = "П000300014003" 
				ИЛИ Показатель = "П000300016003" ИЛИ Показатель = "П000300018003" ИЛИ Показатель = "П000300019003" Тогда
				//	2.1 - Вычет по приобретенным ценностям
				ИдентификаторМакета = "РасшифровкаВычетПриобретенныеЦенности";
			ИначеЕсли Показатель = "П000300021003" Тогда
				//	2.2 - Вычет при исполнении обязанностей налогового агента
				ИдентификаторМакета = "РасшифровкаВычетИсполнениеОНА";
			ИначеЕсли Показатель = "П000300020003" Тогда
				//	2.3 - Вычет с авансов полученных (восстановление)
				ИдентификаторМакета = "РасшифровкаВычетСАвансовПолученныхУпрощенныйУчетНДС";
			ИначеЕсли Показатель = "П000300015003" Тогда
				//	2.4 - Вычет с авансов выданных
				ИдентификаторМакета = "РасшифровкаВычетАвансыВыданныеУпрощенныйУчетНДС";
			ИначеЕсли Показатель = "П000310008001" ИЛИ Показатель = "П000310008002" ИЛИ Показатель = "П000310008003" ИЛИ Показатель = "П000310008004" Тогда
				//	X.X - Восстановление НДС по объектам недвижимости
				ИдентификаторМакета = "ВосстановлениеНДСпоОбъектамНедвижимости";
			КонецЕсли;
		Иначе
			// ВидКарты = "УпрощенныйУчетНДС";
			Если Показатель = "П000300001003" ИЛИ Показатель = "П000300001005" 
				ИЛИ Показатель = "П000300002003" ИЛИ Показатель = "П000300002005"
				ИЛИ Показатель = "П000300003003" ИЛИ Показатель = "П000300003005"
				ИЛИ Показатель = "П000300004003" ИЛИ Показатель = "П000300004005"
				Тогда
				//	1.1 - Начисления по реализации
				ИдентификаторМакета = "РасшифровкаНачислениеРеализацияУпрощенныйУчетНДС";
			ИначеЕсли Показатель = "П000300007003" ИЛИ Показатель = "П000300007005" Тогда
				//	1.2 - Начисления по авансам полученным
				ИдентификаторМакета = "РасшифровкаНачислениеАвансыПолученныеУпрощенныйУчетНДС";
			ИначеЕсли Показатель = "П000200006003" ИЛИ Показатель = "П000200008003" ИЛИ Показатель = "П000200009003" 
				ИЛИ Показатель = "П000300009005" ИЛИ Показатель = "П000300011005" 
				Тогда
				//	1.3 - Восстановление (начисление) по ранее выданным авансам
				ИдентификаторМакета = "РасшифровкаНачислениеВосстановлениеСАвансовВыданныхУпрощенныйУчетНДС";
			ИначеЕсли Показатель = "П000300013003" Тогда
				// Специальный набор для расшифровки строки 130 раздела 3 декларации НДС
				ИдентификаторМакета = "РасшифровкаСтроки130Декларации";
			ИначеЕсли Показатель = "П000300014003" 
				ИЛИ Показатель = "П000300016003" ИЛИ Показатель = "П000300018003" ИЛИ Показатель = "П000300019003" Тогда
				//	2.1 - Вычет по приобретенным ценностям
				ИдентификаторМакета = "РасшифровкаВычетПриобретенныеЦенностиУпрощенныйУчетНДС";
			ИначеЕсли Показатель = "П000300015003" Тогда
				//	2.2 - Вычет с авансов выданных
				ИдентификаторМакета = "РасшифровкаВычетАвансыВыданныеУпрощенныйУчетНДС";
			ИначеЕсли Показатель = "П000300020003" Тогда
				//	2.3 - Вычет с авансов полученных (восстановление)
				ИдентификаторМакета = "РасшифровкаВычетСАвансовПолученныхУпрощенныйУчетНДС";
			ИначеЕсли Показатель = "П000310008001" ИЛИ Показатель = "П000310008002" ИЛИ Показатель = "П000310008003" ИЛИ Показатель = "П000310008004" Тогда
				//	X.X - Восстановление НДС по объектам недвижимости
				ИдентификаторМакета = "ВосстановлениеНДСпоОбъектамНедвижимости";
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		Если НЕ РаздельныйУчетНДС Тогда
			// ВидКарты = "УчетСРегламентнымиДокументами";
			Если Показатель = "П000300001003" ИЛИ Показатель = "П000300001005" 
				ИЛИ Показатель = "П000300002003" ИЛИ Показатель = "П000300002005"
				ИЛИ Показатель = "П000300003003" ИЛИ Показатель = "П000300003005"
				ИЛИ Показатель = "П000300004003" ИЛИ Показатель = "П000300004005" Тогда
				//	1.1 - Начисления по реализации
				ИдентификаторМакета = "РасшифровкаНачислениеРеализация";
			ИначеЕсли Показатель = "П000300007003" ИЛИ Показатель = "П000300007005" Тогда
				//	1.2 - Начисления по авансам полученным
				ИдентификаторМакета = "РасшифровкаНачислениеАвансыПолученныеУпрощенныйУчетНДС";
			ИначеЕсли Показатель = "П000200006003" ИЛИ Показатель = "П000200008003" ИЛИ Показатель = "П000200009003" Тогда
				//	1.3 - Начисления при исполнении обязанностей налогового агента
				ИдентификаторМакета = "РасшифровкаНачислениеИсполнениеОНА";
			ИначеЕсли Показатель = "П000300009005" ИЛИ Показатель = "П000300011005" Тогда
				//	1.4 - Восстановление (начисление) по ранее выданным авансам
				ИдентификаторМакета = "РасшифровкаНачислениеВосстановлениеСАвансовВыданныхУпрощенныйУчетНДС";
			ИначеЕсли Показатель = "П000300006003" ИЛИ Показатель = "П000300006005" Тогда
				//	1.5 - Начисления при выполнении СМР хоз. способом
				ИдентификаторМакета = "РасшифровкаНачислениеСМРХозСпособом";
			ИначеЕсли Показатель = "П000300013003" Тогда
				// Специальный набор для расшифровки строки 130 раздела 3 декларации НДС
				ИдентификаторМакета = "РасшифровкаСтроки130Декларации";
			ИначеЕсли Показатель = "П000300014003" 
				ИЛИ Показатель = "П000300016003" ИЛИ Показатель = "П000300018003" ИЛИ Показатель = "П000300019003" Тогда
				//	2.1 - Вычет по приобретенным ценностям
				ИдентификаторМакета = "РасшифровкаВычетПриобретенныеЦенности";
			ИначеЕсли Показатель = "П000300021003" Тогда
				//	2.2 - Вычет при исполнении обязанностей налогового агента
				ИдентификаторМакета = "РасшифровкаВычетИсполнениеОНА";
			ИначеЕсли Показатель = "П000300020003" Тогда
				//	2.3 - Вычет с авансов полученных (восстановление)
				ИдентификаторМакета = "РасшифровкаВычетСАвансовПолученныхУпрощенныйУчетНДС";
			ИначеЕсли Показатель = "П000300015003" Тогда
				//	2.4 - Вычет с авансов выданных
				ИдентификаторМакета = "РасшифровкаВычетАвансыВыданныеУпрощенныйУчетНДС";
			ИначеЕсли Показатель = "П000310008001" ИЛИ Показатель = "П000310008002" ИЛИ Показатель = "П000310008003" ИЛИ Показатель = "П000310008004" Тогда
				//	X.X - Восстановление НДС по объектам недвижимости
				ИдентификаторМакета = "ВосстановлениеНДСпоОбъектамНедвижимости";
			КонецЕсли;
		Иначе
			// ВидКарты = "СложныйУчетНДС";
			Если Показатель = "П000300001003" ИЛИ Показатель = "П000300001005" 
				ИЛИ Показатель = "П000300002003" ИЛИ Показатель = "П000300002005"
				ИЛИ Показатель = "П000300003003" ИЛИ Показатель = "П000300003005"
				ИЛИ Показатель = "П000300004003" ИЛИ Показатель = "П000300004005"
				ИЛИ Показатель = "П000300008003" ИЛИ Показатель = "П000300008005" Тогда
				//	1.1 - Начисления по реализации
				ИдентификаторМакета = "РасшифровкаНачислениеРеализацияСложныйУчетНДС";
			ИначеЕсли Показатель = "П000300007003" ИЛИ Показатель = "П000300007005" Тогда
				//	1.2 - Начисления по авансам полученным
				ИдентификаторМакета = "РасшифровкаНачислениеАвансыПолученныеУпрощенныйУчетНДС";
				
			ИначеЕсли Показатель = "П000200006003" ИЛИ Показатель = "П000200008003" ИЛИ Показатель = "П000200009003" Тогда
				//	1.3 - Начисления при исполнении обязанностей налогового агента
				ИдентификаторМакета = "РасшифровкаНачислениеИсполнениеОНА";
			ИначеЕсли Показатель = "П000300009005" ИЛИ Показатель = "П000300011005" Тогда
				//	1.4 - Восстановление (начисление) по ранее выданным авансам
				ИдентификаторМакета = "РасшифровкаНачислениеВосстановлениеСАвансовВыданныхУпрощенныйУчетНДС";
			ИначеЕсли Показатель = "П000300006003" ИЛИ Показатель = "П000300006005" Тогда
				//	1.5 - Начисления при выполнении СМР хоз. способом
				ИдентификаторМакета = "РасшифровкаНачислениеСМРХозСпособом";
			ИначеЕсли Показатель = "П000400000102_1" 
				ИЛИ Показатель = "П000600000102_1" ИЛИ Показатель = "П000600000103_1" Тогда
				//	1.6 - Начисления по реализации по ставке 0%
				ИдентификаторМакета = "РасшифровкаНачислениеРеализация0";
			ИначеЕсли Показатель = "П000300013003" Тогда
				// Специальный набор для расшифровки строки 130 раздела 3 декларации НДС
				ИдентификаторМакета = "РасшифровкаСтроки130Декларации";
			ИначеЕсли Показатель = "П000300014003" 
				ИЛИ Показатель = "П000300016003" ИЛИ Показатель = "П000300018003" ИЛИ Показатель = "П000300019003" Тогда
				//	2.1 - Вычет по приобретенным ценностям
				ИдентификаторМакета = "РасшифровкаВычетПриобретенныеЦенности";
			ИначеЕсли Показатель = "П000300021003" Тогда
				//	2.2 - Вычет при исполнении обязанностей налогового агента
				ИдентификаторМакета = "РасшифровкаВычетИсполнениеОНА";
			ИначеЕсли Показатель = "П000300020003" Тогда
				//	2.3 - Вычет с авансов полученных (восстановление)
				ИдентификаторМакета = "РасшифровкаВычетСАвансовПолученныхУпрощенныйУчетНДС";
			ИначеЕсли Показатель = "П000300015003" Тогда
				//	2.4 - Вычет с авансов выданных
				ИдентификаторМакета = "РасшифровкаВычетАвансыВыданныеУпрощенныйУчетНДС";
			ИначеЕсли Показатель = "П000400000103_1" ИЛИ Показатель = "П000600000104_1" Тогда
				//	2.5 - Вычет по приобретенным ценностям по ставке 0%
				ИдентификаторМакета = "РасшифровкаВычетПоПриобретеннымЦенностям0";
			ИначеЕсли Показатель = "П000310008001" ИЛИ Показатель = "П000310008002" ИЛИ Показатель = "П000310008003" ИЛИ Показатель = "П000310008004" Тогда
				//	X.X - Восстановление НДС по объектам недвижимости
				ИдентификаторМакета = "ВосстановлениеНДСпоОбъектамНедвижимости";
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИдентификаторМакета;
	  
КонецФункции	

// Создает список показателей декларации по НДС, которые будут автоматически заполняться
// Для версии отчета ФормаОтчета2009Кв4
Процедура ПолучитьСведенияОПоказателяхОтчетаНДСФормаОтчета2009Кв4(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200001003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200002003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200003003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200006003", Истина, Истина);			
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200007003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200008003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000200009003", Истина, Истина);

	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300001003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300002003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300003003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300004003", Истина, Истина);			
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300006003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300007003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300007005", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300008003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300008005", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300009005", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300011005", Истина, Истина);			
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300013003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300014003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300015003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300016003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300018003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300019003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300020003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000300021003", Истина, Истина);			
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310001000", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310002000_01", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310002000_02", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310002000_03", Истина, Истина);			
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310002000_04", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310002000_05", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310002000_06", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310002000_07", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310002000_08", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310002000_09", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310003000", Истина, Истина);			
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310004000", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310005000", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310006000", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310007000", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310008001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310008002", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310008003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310008004", Истина, Истина);
	
КонецПроцедуры


Процедура ДобавитьСтрокуРасшифровки(ТаблицаРасшифровок, ИмяПоказателя, НаименованиеПоказателя, ЗнакОперации, НаименованиеСлагаемого, Сумма, ИмяРаздела, ДополнительныеПараметры = Неопределено)
	ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(ТаблицаРасшифровок, ИмяПоказателя, НаименованиеПоказателя, ЗнакОперации, НаименованиеСлагаемого, Сумма, ИмяРаздела, ДополнительныеПараметры);
КонецПроцедуры

Процедура ДобавитьЗначениеВОтбор(Отбор, ЛевоеЗначение, ВидСравнения, ПравоеЗначение)
		  
	ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ЭлементОтбора.ЛевоеЗначение 	= ЛевоеЗначение;
	ЭлементОтбора.ВидСравнения 		= ВидСравнения;
	ЭлементОтбора.ПравоеЗначение 	= ПравоеЗначение;
	ЭлементОтбора.Использование 	= Истина;
	ЭлементОтбора.РежимОтображения 	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	
КонецПроцедуры  

// Заполняет контейнер с показателями декларации по НДС
// Для версии отчета ФормаОтчета2009Кв4
Процедура ЗаполнитьОтчетНДСФормаОтчета2009Кв4(ПараметрыОтчета, Контейнер,СохранятьТаблицуРасшифровок = Истина) Экспорт
	
	Перем ТаблицаРасшифровки;
	
	///////////////////////////////////////////////////////////////////////
	// ПОДГОТОВКА ОБЩИХ ДАННЫХ
	
	РаздельныйУчетНДС = УчетнаяПолитика.РаздельныйУчетНДС(ПараметрыОтчета.Организация, ПараметрыОтчета.мДатаНачалаПериодаОтчета);
	УпрощенныйУчетНДС = УчетнаяПолитика.УпрощенныйУчетНДС(ПараметрыОтчета.Организация, ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	УчетНДС2012 = ПараметрыОтчета.мДатаКонцаПериодаОтчета >= '20120101';
	
	Если ПараметрыОтчета.Свойство("ГруппаОрганизаций") Тогда
		СписокОрганизаций = ПараметрыОтчета.ГруппаОрганизаций; 
	Иначе
		СписокОрганизаций = Новый СписокЗначений();
	КонецЕсли;
		
	СписокОрганизаций.Добавить(ПараметрыОтчета.Организация);

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", СписокОрганизаций);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(ПараметрыОтчета.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("КонецПериода",  КонецДня(ПараметрыОтчета.мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("СУчетомКорректировок", НЕ ПараметрыОтчета.ВидДокумента = 0);
	Запрос.УстановитьПараметр("ВесьОборотЗаПериод", 
		?(ПараметрыОтчета.Свойство("ВесьОборотЗаПериод"),ПараметрыОтчета.ВесьОборотЗаПериод, Ложь));
	Запрос.УстановитьПараметр("КонецПериодаУчитываемыхКорректировок", 
		?(НЕ ЗначениеЗаполнено(ПараметрыОтчета.ДатаПодписи), ПараметрыОтчета.ДатаПодписи, КонецДня(ПараметрыОтчета.ДатаПодписи)));
	
	// События	
	СобытиеРеализация = Новый СписокЗначений;
	СобытиеРеализация.Добавить(Перечисления.СобытияПоНДСПродажи.Реализация);
	СобытиеРеализация.Добавить(Перечисления.СобытияПоНДСПродажи.Оплата);
	СобытиеРеализация.Добавить(Перечисления.СобытияПоНДСПродажи.НДССкорректирован);
	Запрос.УстановитьПараметр("СобытиеРеализация", СобытиеРеализация);
	
	СобытиеПолученАванс = Новый СписокЗначений;
	СобытиеПолученАванс.Добавить(Перечисления.СобытияПоНДСПродажи.ПолученАванс);
	Запрос.УстановитьПараметр("СобытиеПолученАванс", СобытиеПолученАванс);
	
	СобытиеНачисленНДС = Новый СписокЗначений;
	СобытиеНачисленНДС.Добавить(Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате);
	СобытиеНачисленНДС.Добавить(Перечисления.СобытияПоНДСПродажи.НДССкорректирован);
	Запрос.УстановитьПараметр("СобытиеНачисленНДС", СобытиеНачисленНДС);
	
	СобытиеВосстановлениеНДС = Новый СписокЗначений;
	СобытиеВосстановлениеНДС.Добавить(Перечисления.СобытияПоНДСПродажи.ВосстановлениеНДС);
	Запрос.УстановитьПараметр("СобытиеВосстановлениеНДС", СобытиеВосстановлениеНДС);
	
	СобытиеПредъявленКВычетуНДС = Новый СписокЗначений;
	СобытиеПредъявленКВычетуНДС.Добавить(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету);
	СобытиеПредъявленКВычетуНДС.Добавить(Перечисления.СобытияПоНДСПокупки.ВосстановленНДС);
	Запрос.УстановитьПараметр("СобытиеПредъявленКВычетуНДС", СобытиеПредъявленКВычетуНДС);
	
	СобытиеПодтвержденаСтавка0 = Новый СписокЗначений;
	СобытиеПодтвержденаСтавка0.Добавить(Перечисления.СобытияПоНДСПродажи.ПодтвержденаСтавка0);
	Запрос.УстановитьПараметр("СобытиеПодтвержденаСтавка0", СобытиеПодтвержденаСтавка0);
	
	СобытиеПредъявленКВычетуНДС0 = Новый СписокЗначений;
	СобытиеПредъявленКВычетуНДС0.Добавить(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0);
	Запрос.УстановитьПараметр("СобытиеПредъявленКВычетуНДС0", СобытиеПредъявленКВычетуНДС0);
	
	СобытиеНеПодтвержденаСтавка0 = Новый СписокЗначений;
	СобытиеНеПодтвержденаСтавка0.Добавить(Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0);
	Запрос.УстановитьПараметр("СобытиеНеПодтвержденаСтавка0", СобытиеНеПодтвержденаСтавка0);

	СобытиеПредъявленКВычетуНеПодтвержденНДС0 = Новый СписокЗначений;
	СобытиеПредъявленКВычетуНеПодтвержденНДС0.Добавить(Перечисления.СобытияПоНДСПокупки.НеПодтвержденаСтавка0);
	Запрос.УстановитьПараметр("СобытиеПредъявленКВычетуНеПодтвержденНДС0", СобытиеПредъявленКВычетуНеПодтвержденНДС0);
	
	// Виды ценностей
	ВидыЦенностейНеРеализация = Новый СписокЗначений;
	ВидыЦенностейНеРеализация.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	ВидыЦенностейНеРеализация.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностейНеРеализация.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидыЦенностейНеРеализация.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	ВидыЦенностейНеРеализация.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	ВидыЦенностейНеРеализация.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентКомитент);
	
	ВидыЦенностейСтр010_040 = Новый СписокЗначений;
	Для Каждого ВидЦенности Из Перечисления.ВидыЦенностей Цикл
		Если ВидыЦенностейНеРеализация.НайтиПоЗначению(ВидЦенности) = Неопределено Тогда
			ВидыЦенностейСтр010_040.Добавить(ВидЦенности);
		КонецЕсли;
	КонецЦикла;
	Запрос.УстановитьПараметр("ВидыЦенностейСтр010_040", ВидыЦенностейСтр010_040);
	
	ВидыЦенностейСтр060 = Новый СписокЗначений;
	ВидыЦенностейСтр060.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр060", ВидыЦенностейСтр060);
	
	ВидыЦенностейСтр070 = Новый СписокЗначений;
	ВидыЦенностейСтр070.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр070", ВидыЦенностейСтр070);
	
	ВидыЦенностейСтр080 =  Новый СписокЗначений;
	ВидыЦенностейСтр080.Добавить(Перечисления.ВидыЦенностей.СуммыСвязанныеСРасчетамиПоОплате);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр080", ВидыЦенностейСтр080);
	
	ВидыЦенностейСтр110 =  Новый СписокЗначений;
	ВидыЦенностейСтр110.Добавить(Перечисления.ВидыЦенностей.АвансыВыданные);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр110", ВидыЦенностейСтр110);
	
	ВидыЦенностейСтр140 =  Новый СписокЗначений;
	ВидыЦенностейСтр140.Добавить(Перечисления.ВидыЦенностей.СМРПодрядные);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр140", ВидыЦенностейСтр140);
	
	ВидыЦенностейСтр150 =  Новый СписокЗначений;
	ВидыЦенностейСтр150.Добавить(Перечисления.ВидыЦенностей.АвансыВыданные);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр150", ВидыЦенностейСтр150);
	
	ВидыЦенностейСтр160 =  Новый СписокЗначений;
	ВидыЦенностейСтр160.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр160", ВидыЦенностейСтр160);
	
	ВидыЦенностейСтр180 =  Новый СписокЗначений;
	ВидыЦенностейСтр180.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежи);
	ВидыЦенностейСтр180.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр180", ВидыЦенностейСтр180);
	
	ВидыЦенностейСтр190 =  Новый СписокЗначений;
	ВидыЦенностейСтр190.Добавить(Перечисления.ВидыЦенностей.ТаможенныйСоюз);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр190", ВидыЦенностейСтр190);
	
	ВидыЦенностейСтр200 =  Новый СписокЗначений;
	ВидыЦенностейСтр200.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр200", ВидыЦенностейСтр200);
	
	ВидыЦенностейСтр210 =  Новый СписокЗначений;
	ВидыЦенностейСтр210.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидыЦенностейСтр210.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	ВидыЦенностейСтр210.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр210", ВидыЦенностейСтр210);
	
	ВидыЦенностейСтр130 = Новый СписокЗначений;
	Для Каждого ВидЦенности Из Перечисления.ВидыЦенностей Цикл
		Если ВидыЦенностейСтр150.НайтиПоЗначению(ВидЦенности) = Неопределено 
			И ВидыЦенностейСтр160.НайтиПоЗначению(ВидЦенности) = Неопределено 
			И ВидыЦенностейСтр180.НайтиПоЗначению(ВидЦенности) = Неопределено 
			И ВидыЦенностейСтр190.НайтиПоЗначению(ВидЦенности) = Неопределено
			И ВидыЦенностейСтр200.НайтиПоЗначению(ВидЦенности) = Неопределено 
			И ВидыЦенностейСтр210.НайтиПоЗначению(ВидЦенности) = Неопределено Тогда
			ВидыЦенностейСтр130.Добавить(ВидЦенности);
		КонецЕсли;
	КонецЦикла;
	Запрос.УстановитьПараметр("ВидыЦенностейСтр130", ВидыЦенностейСтр130);
	
	ВидыЦенностей_1011703 =  Новый СписокЗначений;
	ВидыЦенностей_1011703.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидыЦенностей_1011703.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_1011711", Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	Запрос.УстановитьПараметр("ВидыЦенностей_1011703", 	ВидыЦенностей_1011703);
	Запрос.УстановитьПараметр("ВидыЦенностей_1011707", 	Перечисления.ВидыЦенностей.НалоговыйАгентКомитент);
	
	ВидыЦенностиНА =  Новый СписокЗначений;
	ВидыЦенностиНА.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидыЦенностиНА.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	ВидыЦенностиНА.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	ВидыЦенностиНА.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентКомитент);
	Запрос.УстановитьПараметр("ВидыЦенностейНА", ВидыЦенностиНА);
	
	// Ставки НДС
	Запрос.УстановитьПараметр("СтавкаНДС10", 	 Перечисления.СтавкиНДС.НДС10);
	Запрос.УстановитьПараметр("СтавкаНДС10_110", Перечисления.СтавкиНДС.НДС10_110);
	Запрос.УстановитьПараметр("СтавкаНДС18",	 Перечисления.СтавкиНДС.НДС18);
	Запрос.УстановитьПараметр("СтавкаНДС18_118", Перечисления.СтавкиНДС.НДС18_118);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСЗаписиКнигиПродажОбороты.Событие,
	|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС,
	|	НДСЗаписиКнигиПродажОбороты.ВидЦенности,
	|	НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот,
	|	НДСЗаписиКнигиПродажОбороты.НДСОборот,
	|	НДСЗаписиКнигиПродажОбороты.Покупатель,
	|	НДСЗаписиКнигиПродажОбороты.ДоговорКонтрагента
	|ПОМЕСТИТЬ НДСЗаписиКнигиПродажОбороты
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Организация В (&Организация)
	|				И НЕ ЗаписьДополнительногоЛиста) КАК НДСЗаписиКнигиПродажОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НДСЗаписиКнигиПродажОбороты.Событие,
	|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС,
	|	НДСЗаписиКнигиПродажОбороты.ВидЦенности,
	|	НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот,
	|	НДСЗаписиКнигиПродажОбороты.НДСОборот,
	|	НДСЗаписиКнигиПродажОбороты.Покупатель,
	|	НДСЗаписиКнигиПродажОбороты.ДоговорКонтрагента
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|			&НачалоПериода,
	|			&КонецПериодаУчитываемыхКорректировок,
	|			,
	|			Организация В (&Организация)
	|				И ВЫБОР
	|					КОГДА &ВесьОборотЗаПериод = ИСТИНА
	|						ТОГДА ЗаписьДополнительногоЛиста
	|					КОГДА &СУчетомКорректировок = ИСТИНА
	|						ТОГДА ЗаписьДополнительногоЛиста
	|								И (КорректируемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода)
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ) КАК НДСЗаписиКнигиПродажОбороты";

	Запрос.Выполнить();
	
	///////////////////////////////////////////////////////////////////////
	// РАЗДЕЛ 2
	
	Если Контейнер.Свойство("Раздел2") Тогда   
		Раздел2 = Контейнер.Раздел2;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_1011707)
		|				И НДСЗаписиКнигиПродажОбороты.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентКомитент)
		|				И НЕ НДСЗаписиКнигиПродажОбороты.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|			ТОГДА НДСЗаписиКнигиПродажОбороты.ДоговорКонтрагента.Владелец
		|		ИНАЧЕ НДСЗаписиКнигиПродажОбороты.Покупатель
		|	КОНЕЦ КАК Покупатель,
		|	НДСЗаписиКнигиПродажОбороты.ВидЦенности КАК ВидЦенности,
		|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС КАК СтавкаНДС,
		|	НДСЗаписиКнигиПродажОбороты.Событие КАК Событие,
		|	НДСЗаписиКнигиПродажОбороты.НДСОборот КАК НДСОборот
		|ПОМЕСТИТЬ НДСЗаписиКнигиПродажРаздел2
		|ИЗ
		|	НДСЗаписиКнигиПродажОбороты КАК НДСЗаписиКнигиПродажОбороты
		|ГДЕ
		|	(НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНачисленНДС)
		|			ИЛИ НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеПолученАванс)
		|			ИЛИ НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация))
		|	И НДСЗаписиКнигиПродажОбороты.ВидЦенности В(&ВидыЦенностейНА)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Покупатель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Контрагент.КПП КАК П000200001003,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(Контрагент.НаименованиеПолное, 1, 250) = """"
		|			ТОГДА Контрагент.Наименование
		|		ИНАЧЕ ПОДСТРОКА(Контрагент.НаименованиеПолное, 1, 250)
		|	КОНЕЦ КАК П000200002003,
		|	Контрагент.ИНН КАК П000200003003,
		|	Контрагент.ЮридическоеФизическоеЛицо КАК ПокупательЮридическоеФизическоеЛицо,
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПродажРаздел2.ВидЦенности В (&ВидыЦенностей_1011711)
		|			ТОГДА ""1011711""
		|		КОГДА НДСЗаписиКнигиПродажРаздел2.ВидЦенности В (&ВидыЦенностей_1011703)
		|			ТОГДА ""1011703""
		|		КОГДА НДСЗаписиКнигиПродажРаздел2.ВидЦенности В (&ВидыЦенностей_1011707)
		|			ТОГДА ""1011707""
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК П000200007003,
		|	ЕСТЬNULL(СУММА(НДСЗаписиКнигиПродажРаздел2.НДСОборот), 0) КАК П000200006003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА НДСЗаписиКнигиПродажРаздел2.ВидЦенности В (&ВидыЦенностей_1011707)
		|							И НДСЗаписиКнигиПродажРаздел2.Событие В (&СобытиеНачисленНДС)
		|						ИЛИ НДСЗаписиКнигиПродажРаздел2.Событие В (&СобытиеРеализация)
		|					ТОГДА НДСЗаписиКнигиПродажРаздел2.НДСОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000200008003,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА НДСЗаписиКнигиПродажРаздел2.Событие В (&СобытиеПолученАванс)
		|					ТОГДА НДСЗаписиКнигиПродажРаздел2.НДСОборот
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК П000200009003,
		|	Контрагент.Ссылка КАК П000200002003_Расшифровка
		|ИЗ
		|	НДСЗаписиКнигиПродажРаздел2 КАК НДСЗаписиКнигиПродажРаздел2
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагент
		|		ПО НДСЗаписиКнигиПродажРаздел2.Покупатель = Контрагент.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСЗаписиКнигиПродажРаздел2.Покупатель,
		|	Контрагент.ИНН,
		|	Контрагент.КПП,
		|	Контрагент.ЮридическоеФизическоеЛицо,
		|	ВЫБОР
		|		КОГДА НДСЗаписиКнигиПродажРаздел2.ВидЦенности В (&ВидыЦенностей_1011711)
		|			ТОГДА ""1011711""
		|		КОГДА НДСЗаписиКнигиПродажРаздел2.ВидЦенности В (&ВидыЦенностей_1011703)
		|			ТОГДА ""1011703""
		|		КОГДА НДСЗаписиКнигиПродажРаздел2.ВидЦенности В (&ВидыЦенностей_1011707)
		|			ТОГДА ""1011707""
		|		ИНАЧЕ """"
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(Контрагент.НаименованиеПолное, 1, 250) = """"
		|			ТОГДА Контрагент.Наименование
		|		ИНАЧЕ ПОДСТРОКА(Контрагент.НаименованиеПолное, 1, 250)
		|	КОНЕЦ,
		|	Контрагент.Ссылка
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		// Заменим обращение к реквизиту контрагент договора
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДоговорКонтрагента.Владелец", "ДоговорКонтрагента." + БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьИмяРеквизитаКонтрагентДоговора());
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		
		ПолеКомпоновкиДанныхСобытие 	= Новый ПолеКомпоновкиДанных("Событие");
		ПолеКомпоновкиДанныхВидЦенности = Новый ПолеКомпоновкиДанных("ВидЦенности");
		
		СтраницаРаздел2 = Раздел2[0].Данные[0].Значение;
		
		Если СтраницаРаздел2.П000200005003 = Неопределено Тогда
			СтраницаРаздел2.П000200005003 = "";
			ОКАТО = "";
		Иначе
			ОКАТО = СтраницаРаздел2.П000200005003;
		КонецЕсли;
		
		Для Каждого Показатель Из СтраницаРаздел2 Цикл
			СтраницаРаздел2[Показатель.Ключ] = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение));
		КонецЦикла;
		
		Пока Раздел2.Количество() > 1 Цикл
			Раздел2.Удалить(1);
		КонецЦикла;
		
		ПерваяСтраница = Истина;
		
		Пока Выборка.Следующий() Цикл
			
			Если Не ПерваяСтраница Тогда
				// Создаем дополнительную страницу в декларации
				СтруктураНовойТаблицы = Новый Структура();
				Для Каждого Показатель Из СтраницаРаздел2 Цикл
					СтруктураНовойТаблицы.Вставить(Показатель.Ключ, ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение)));
				КонецЦикла;
				
				Раздел2.Добавить().Данные = Новый СписокЗначений();
				Раздел2[Раздел2.Количество()-1].Данные.Добавить(СтруктураНовойТаблицы); 
				
			Иначе
				// На последующих выполнениях цикла нужно будет создавать дополнительные страницы
				ПерваяСтраница = Ложь;
			КонецЕсли;
			
			СтраницаРаздел2 = Раздел2[Раздел2.Количество()-1].Данные[0].Значение;	
			
			ДанныеЛистаРаздел2ФИО = (Выборка.ПокупательЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
			
			СтраницаРаздел2.П000200001003 = Выборка.П000200001003;
			СтраницаРаздел2.П000200002003 = Выборка.П000200002003;
			СтраницаРаздел2.П000200003003 = Выборка.П000200003003;
			СтраницаРаздел2.П000200005003 = ОКАТО;
			СтраницаРаздел2.П000200006003 = Выборка.П000200006003;
			
			//Расшифровка П000200006003
			ДополнительныеПараметры = Новый Структура;
			
			ИдентификаторМакетаРаздел2 = ПолучитьИдентификаторМакетаРасшифровки("П000200006003", РаздельныйУчетНДС, УпрощенныйУчетНДС, УчетНДС2012);
			
			ДополнительныеПараметры.Вставить("ИдентификаторМакета", ИдентификаторМакетаРаздел2);
			
			ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
			
			Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
			Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
			
			ПолеКомпоновкиДанныхКонтрагент = Новый ПолеКомпоновкиДанных("Контрагент");
			
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхКонтрагент, ВидСравненияКомпоновкиДанных.Равно, Выборка.П000200002003_Расшифровка);		
			
			СписокСобытий = Новый СписокЗначений;
			
			Для Каждого Событие Из СобытиеНачисленНДС Цикл
				СписокСобытий.Добавить(Событие.Значение);	
			КонецЦикла;
			
			Для Каждого Событие Из СобытиеПолученАванс Цикл
				СписокСобытий.Добавить(Событие.Значение);	
			КонецЦикла;
			
			Для Каждого Событие Из СобытиеРеализация Цикл
				СписокСобытий.Добавить(Событие.Значение);	
			КонецЦикла;
			
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхСобытие, ВидСравненияКомпоновкиДанных.ВСписке, СписокСобытий);		
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхВидЦенности, ВидСравненияКомпоновкиДанных.ВСписке, ВидыЦенностиНА);		
			
			ДополнительныеПараметры.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
			
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000200006003_" + Раздел2.Количество(), "Сумма налога, исчисленная к уплате в бюджет (руб.)", "", "", СтраницаРаздел2.П000200006003, "Раздел2", ДополнительныеПараметры);
			
			// конец Расшифровка П000200006003
			
			СтраницаРаздел2.П000200007003 = Выборка.П000200007003;
			СтраницаРаздел2.П000200008003 = Выборка.П000200008003;
			
			//Расшифровка П000200008003
			
			ДополнительныеПараметры = Новый Структура;
			
			ДополнительныеПараметры.Вставить("ИдентификаторМакета", ИдентификаторМакетаРаздел2);
			
			ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
			
			Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
			Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
			
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхКонтрагент, ВидСравненияКомпоновкиДанных.Равно, Выборка.П000200002003_Расшифровка);		
			
			ГруппаИЛИ = Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			
			ДобавитьЗначениеВОтбор(ГруппаИЛИ, ПолеКомпоновкиДанныхСобытие, ВидСравненияКомпоновкиДанных.ВСписке, СобытиеРеализация);		
			
			//ИЛИ
			ГруппаИ = ГруппаИЛИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));	
			ГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
			
			ДобавитьЗначениеВОтбор(ГруппаИ, ПолеКомпоновкиДанныхСобытие, ВидСравненияКомпоновкиДанных.ВСписке, СобытиеНачисленНДС);		
			//И
			ДобавитьЗначениеВОтбор(ГруппаИ, ПолеКомпоновкиДанныхВидЦенности, ВидСравненияКомпоновкиДанных.Равно, ПредопределенноеЗначение("Перечисление.ВидыЦенностей.НалоговыйАгентКомитент"));		
			
			ДополнительныеПараметры.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
			
			НаимПоказателя = "Сумма налога, исчисленная при отгрузке товаров (выполнении работ, оказании услуг, передаче имущественных прав) (руб.)";
			
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000200008003_" + Раздел2.Количество(), НаимПоказателя, "", "", СтраницаРаздел2.П000200008003, "Раздел2", ДополнительныеПараметры);
			
			// конец Расшифровка П000200008003
			
			
			СтраницаРаздел2.П000200009003 = Выборка.П000200009003;
			
			//Расшифровка П000200009003
			ДополнительныеПараметры = Новый Структура;
			
			ДополнительныеПараметры.Вставить("ИдентификаторМакета", ИдентификаторМакетаРаздел2);
			
			ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
			
			Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
			Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
			
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхКонтрагент, ВидСравненияКомпоновкиДанных.Равно, Выборка.П000200002003_Расшифровка);		
			
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхСобытие, ВидСравненияКомпоновкиДанных.ВСписке, СобытиеПолученАванс);		
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхВидЦенности, ВидСравненияКомпоновкиДанных.ВСписке, ВидыЦенностиНА);		
			
			ДополнительныеПараметры.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
			
			НаимПоказателя = "Сумма налога, исчисленная при получении оплаты, частичной оплаты в счет предстоящей отгрузки товаров (выполнения работ, оказания услуг, передачи имущественных прав) (руб.)";
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000200009003_" + Раздел2.Количество(), НаимПоказателя, "", "", СтраницаРаздел2.П000200009003, "Раздел2", ДополнительныеПараметры);
			
			// конец Расшифровка П000200009003
			
			Если ДанныеЛистаРаздел2ФИО Тогда
				СтраницаРаздел2.П000200001003 = "";
				ФамилияРаздел2 = "";
				ИмяРаздел2 = "";
				ОтчествоРаздел2 = "";
				// Если в строке есть запятые, то удалим их, т.к. они являются разделителями.
				П000200002003 = СтрЗаменить(Выборка.П000200002003, ",", "");
				ОбщегоНазначенияБПВызовСервера.ФамилияИнициалыФизЛица(П000200002003, ФамилияРаздел2, ИмяРаздел2, ОтчествоРаздел2);
				
				ФамилияРаздел2 = СокрЛП(ФамилияРаздел2);
				ИмяРаздел2 = СокрЛП(ИмяРаздел2);
				ОтчествоРаздел2 = СокрЛП(ОтчествоРаздел2);
				
				// Покажем в разделе, разбитое значение по частям, в случае, если что-то ошибочное, необходимо поправить в отчете.
				П000200002003 = СокрЛП(ФамилияРаздел2 + " " + ИмяРаздел2 + " " + ОтчествоРаздел2);
			Иначе
				ФамилияРаздел2 = "";
				ИмяРаздел2 = "";
				ОтчествоРаздел2 = "";
			КонецЕсли;
			
		КонецЦикла; 
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////
	// РАЗДЕЛ 3
	
	Если Контейнер.Свойство("Раздел3") Тогда
		Раздел3 = Контейнер.Раздел3;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация)
		|							И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18)
		|							И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр010_040)
		|						ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300001003,
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация)
		|							И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС10)
		|							И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр010_040)
		|						ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300002003,
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация)
		|							И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18_118)
		|							И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр010_040)
		|						ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300003003,
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация)
		|							И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС10_110)
		|							И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр010_040)
		|						ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300004003,
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНачисленНДС)
		|							И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр060)
		|						ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300006003,
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеПолученАванс)
		|							И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр070)
		|						ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300007003,
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеПолученАванс)
		|							И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр070)
		|						ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300007005,
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНачисленНДС)
		|							И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр080)
		|						ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300008003,
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНачисленНДС)
		|							И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр080)
		|						ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300008005,
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеВосстановлениеНДС)
		|						ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300009005,
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеВосстановлениеНДС)
		|							И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр110)
		|						ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300011005
		|ИЗ
		|	НДСЗаписиКнигиПродажОбороты КАК НДСЗаписиКнигиПродажОбороты";
		
		ЗначенияДляЗаполнения = Запрос.Выполнить().Выбрать();
		
		ПолеКомпоновкиДанныхСтавкаНДС = Новый ПолеКомпоновкиДанных("СтавкаНДС");
		
		Если ЗначенияДляЗаполнения.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(Раздел3,ЗначенияДляЗаполнения);
			
			//Расшифровка П000300001003 и П000300001005
			
			ДополнительныеПараметры = Новый Структура;
			ИдентификаторМакетаРаздел3 = ПолучитьИдентификаторМакетаРасшифровки("П000300001003", РаздельныйУчетНДС, УпрощенныйУчетНДС, УчетНДС2012);
			
			ДополнительныеПараметры.Вставить("ИдентификаторМакета", ИдентификаторМакетаРаздел3);
			
			ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
			
			Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
			Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
			
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхСобытие, ВидСравненияКомпоновкиДанных.ВСписке, СобытиеРеализация);		
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхВидЦенности, ВидСравненияКомпоновкиДанных.ВСписке, ВидыЦенностейСтр010_040);		
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхСтавкаНДС, ВидСравненияКомпоновкиДанных.Равно, ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18"));		
			
			ДополнительныеПараметры.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
			
			НаимПоказателя = "1. Реализация (передача для собственных нужд) товаров (работ, услуг), передача имущественных прав по соответствующим ставкам налога, всего";
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000300001003", НаимПоказателя, "", "", Раздел3.П000300001003, "Раздел3", ДополнительныеПараметры);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000300001005", НаимПоказателя, "", "", Раздел3.П000300001005, "Раздел3", ДополнительныеПараметры);
			
			//Расшифровка П000300002003 и П000300002005
			
			ДополнительныеПараметры = Новый Структура;
			
			ДополнительныеПараметры.Вставить("ИдентификаторМакета",ИдентификаторМакетаРаздел3);
			
			ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
			
			Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
			Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
			
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхСобытие, ВидСравненияКомпоновкиДанных.ВСписке, СобытиеРеализация);		
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхВидЦенности, ВидСравненияКомпоновкиДанных.ВСписке, ВидыЦенностейСтр010_040);		
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхСтавкаНДС, ВидСравненияКомпоновкиДанных.Равно, ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10"));		
			
			ДополнительныеПараметры.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
			
			НаимПоказателя = "1. Реализация (передача для собственных нужд) товаров (работ, услуг), передача имущественных прав по соответствующим ставкам налога, всего";
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000300002003", НаимПоказателя, "", "", Раздел3.П000300002003, "Раздел3", ДополнительныеПараметры);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000300002005", НаимПоказателя, "", "", Раздел3.П000300002005, "Раздел3", ДополнительныеПараметры);
			
			//Расшифровка П000300003003 и П000300003005
			
			ДополнительныеПараметры = Новый Структура;
			
			ДополнительныеПараметры.Вставить("ИдентификаторМакета", ИдентификаторМакетаРаздел3);
			
			ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
			
			Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
			Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
			
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхСобытие, ВидСравненияКомпоновкиДанных.ВСписке, СобытиеРеализация);		
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхВидЦенности, ВидСравненияКомпоновкиДанных.ВСписке, ВидыЦенностейСтр010_040);		
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхСтавкаНДС, ВидСравненияКомпоновкиДанных.Равно, ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18_118"));		
			
			ДополнительныеПараметры.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
			
			НаимПоказателя = "1. Реализация (передача для собственных нужд) товаров (работ, услуг), передача имущественных прав по соответствующим ставкам налога, всего";
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000300003003", НаимПоказателя, "", "", Раздел3.П000300003003, "Раздел3", ДополнительныеПараметры);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000300003005", НаимПоказателя, "", "", Раздел3.П000300003005, "Раздел3", ДополнительныеПараметры);
			
			//Расшифровка П000300004003 и П000300004005
			
			ДополнительныеПараметры = Новый Структура;
			
			ДополнительныеПараметры.Вставить("ИдентификаторМакета", ИдентификаторМакетаРаздел3);
			
			ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
			
			Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
			Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
			
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхСобытие, ВидСравненияКомпоновкиДанных.ВСписке, СобытиеРеализация);		
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхВидЦенности, ВидСравненияКомпоновкиДанных.ВСписке, ВидыЦенностейСтр010_040);		
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхСтавкаНДС, ВидСравненияКомпоновкиДанных.Равно, ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10_110"));		
			
			ДополнительныеПараметры.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
			
			НаимПоказателя = "1. Реализация (передача для собственных нужд) товаров (работ, услуг), передача имущественных прав по соответствующим ставкам налога, всего";
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000300004003", НаимПоказателя, "", "", Раздел3.П000300004003, "Раздел3", ДополнительныеПараметры);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000300004005", НаимПоказателя, "", "", Раздел3.П000300004005, "Раздел3", ДополнительныеПараметры);
			
			
			//Расшифровка П000300006003 и П000300006005
			
			ДополнительныеПараметры = Новый Структура;
			
			ДополнительныеПараметры.Вставить("ИдентификаторМакета", ПолучитьИдентификаторМакетаРасшифровки("П000300006003", РаздельныйУчетНДС, УпрощенныйУчетНДС, УчетНДС2012));
			
			ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
			
			Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
			Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
			
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхСобытие, ВидСравненияКомпоновкиДанных.ВСписке, СобытиеНачисленНДС);		
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхВидЦенности, ВидСравненияКомпоновкиДанных.ВСписке, ВидыЦенностейСтр060);		
			
			ДополнительныеПараметры.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
			
			НаимПоказателя = "3. Выполнение строительно-монтажных работ для собственного потребления";
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000300006003", НаимПоказателя, "", "", Раздел3.П000300006003, "Раздел3", ДополнительныеПараметры);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000300006005", НаимПоказателя, "", "", Раздел3.П000300006005, "Раздел3", ДополнительныеПараметры);
			
			//Расшифровка П000300007003 и П000300007005
			
			ДополнительныеПараметры = Новый Структура;
			
			ДополнительныеПараметры.Вставить("ИдентификаторМакета", ПолучитьИдентификаторМакетаРасшифровки("П000300007003", РаздельныйУчетНДС, УпрощенныйУчетНДС, УчетНДС2012));
			
			ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
			
			Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
			Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
			
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхСобытие, ВидСравненияКомпоновкиДанных.Равно, СобытиеПолученАванс);		
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхВидЦенности, ВидСравненияКомпоновкиДанных.ВСписке, ВидыЦенностейСтр070);		
			
			ДополнительныеПараметры.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
			
			НаимПоказателя = "4. Суммы полученной оплаты, частичной оплаты в счет предстоящих поставок товаров (выполнения работ, оказания услуг), передачи имущественных прав";
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000300007003", НаимПоказателя, "", "", Раздел3.П000300007003, "Раздел3", ДополнительныеПараметры);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000300007005", НаимПоказателя, "", "", Раздел3.П000300007005, "Раздел3", ДополнительныеПараметры);
			
			
			//Расшифровка П000300008003 и П000300008005
			
			ИдентификаторМакетаРаздел3 = ПолучитьИдентификаторМакетаРасшифровки("П000300008003", РаздельныйУчетНДС, УпрощенныйУчетНДС, УчетНДС2012);
			
			Если ИдентификаторМакетаРаздел3 <> "" Тогда
				
				ДополнительныеПараметры = Новый Структура;
				
				ДополнительныеПараметры.Вставить("ИдентификаторМакета", ИдентификаторМакетаРаздел3);
				
				
				ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
				
				Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
				Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
				
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхСобытие, ВидСравненияКомпоновкиДанных.ВСписке, СобытиеНачисленНДС);		
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхВидЦенности, ВидСравненияКомпоновкиДанных.ВСписке, ВидыЦенностейСтр080);		
				
				ДополнительныеПараметры.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
				
				НаимПоказателя = "5. Суммы, связанные с расчетами по оплате налогооблагаемых товаров (работ, услуг)";
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000300008003", НаимПоказателя, "", "", Раздел3.П000300008003, "Раздел3", ДополнительныеПараметры);
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000300008005", НаимПоказателя, "", "", Раздел3.П000300008005, "Раздел3", ДополнительныеПараметры);
				
			КонецЕсли;
			
			
			//Расшифровка П000300009005
			
			ИдентификаторМакетаРаздел3 = ПолучитьИдентификаторМакетаРасшифровки("П000300009005", РаздельныйУчетНДС, УпрощенныйУчетНДС, УчетНДС2012);
			
			Если ИдентификаторМакетаРаздел3 <> "" Тогда
				ДополнительныеПараметры = Новый Структура;
				
				ДополнительныеПараметры.Вставить("ИдентификаторМакета", ИдентификаторМакетаРаздел3);
				
				ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
				
				Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
				Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
				
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхСобытие, ВидСравненияКомпоновкиДанных.ВСписке, СобытиеВосстановлениеНДС);		
				
				ДополнительныеПараметры.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
				
				НаимПоказателя = "6. Суммы налога, подлежащие восстановлению, всего";
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000300009005", НаимПоказателя, "", "", Раздел3.П000300009005, "Раздел3", ДополнительныеПараметры);
				
			КонецЕсли;
			
			//Расшифровка П000300011005
			
			ИдентификаторМакетаРаздел3 = ПолучитьИдентификаторМакетаРасшифровки("П000300011005", РаздельныйУчетНДС, УпрощенныйУчетНДС, УчетНДС2012);
			
			Если ИдентификаторМакетаРаздел3 <> "" Тогда
				ДополнительныеПараметры = Новый Структура;
				
				ДополнительныеПараметры.Вставить("ИдентификаторМакета", ИдентификаторМакетаРаздел3);
				
				ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
				
				Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
				Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
				
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхСобытие, ВидСравненияКомпоновкиДанных.ВСписке, СобытиеВосстановлениеНДС);		
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхВидЦенности, ВидСравненияКомпоновкиДанных.ВСписке, ВидыЦенностейСтр110);		
				
				ДополнительныеПараметры.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
				
				НаимПоказателя = "6.2. суммы налога, подлежащие восстановлению в соответствии с подпунктом 3 пункта 3 статьи 170 Налогового кодекса Российской Федерации";
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000300011005", НаимПоказателя, "", "", Раздел3.П000300011005, "Раздел3", ДополнительныеПараметры);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСЗаписиКнигиПокупокОбороты.Событие,
		|	НДСЗаписиКнигиПокупокОбороты.СтавкаНДС,
		|	НДСЗаписиКнигиПокупокОбороты.ВидЦенности,
		|	НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот,
		|	НДСЗаписиКнигиПокупокОбороты.НДСОборот
		|ПОМЕСТИТЬ НДСЗаписиКнигиПокупокОбороты
		|ИЗ
		|	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			Организация В (&Организация)
		|				И (НЕ ЗаписьДополнительногоЛиста)) КАК НДСЗаписиКнигиПокупокОбороты
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НДСЗаписиКнигиПокупокОбороты.Событие,
		|	НДСЗаписиКнигиПокупокОбороты.СтавкаНДС,
		|	НДСЗаписиКнигиПокупокОбороты.ВидЦенности,
		|	НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот,
		|	НДСЗаписиКнигиПокупокОбороты.НДСОборот
		|ИЗ
		|	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
		|			&НачалоПериода,
		|			&КонецПериодаУчитываемыхКорректировок,
		|			,
		|			Организация В (&Организация)
		|				И ВЫБОР
		|					КОГДА &ВесьОборотЗаПериод = ИСТИНА
		|						ТОГДА ЗаписьДополнительногоЛиста
		|					КОГДА &СУчетомКорректировок = ИСТИНА
		|						ТОГДА ЗаписьДополнительногоЛиста
		|								И (КорректируемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода)
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ) КАК НДСЗаписиКнигиПокупокОбороты";
		
		Запрос.Выполнить();
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС)
		|							И НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностейСтр130)
		|						ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300013003,
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС)
		|							И НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностейСтр140)
		|						ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300014003,
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС)
		|							И НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностейСтр150)
		|						ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300015003,
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС)
		|							И НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностейСтр160)
		|						ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300016003,
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС)
		|							И НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностейСтр180)
		|						ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300018003,
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС)
		|							И НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностейСтр190)
		|						ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300019003,
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС)
		|							И НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностейСтр200)
		|						ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300020003,
		|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
		|					КОГДА НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС)
		|							И НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностейСтр210)
		|						ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300021003
		|ИЗ
		|	НДСЗаписиКнигиПокупокОбороты КАК НДСЗаписиКнигиПокупокОбороты";
		
		ЗначенияДляЗаполнения = Запрос.Выполнить().Выбрать();
		Если ЗначенияДляЗаполнения.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(Раздел3,ЗначенияДляЗаполнения);
			
			//Расшифровка П000300013003
			
			ИдентификаторМакетаРаздел3 = ПолучитьИдентификаторМакетаРасшифровки("П000300013003", РаздельныйУчетНДС, УпрощенныйУчетНДС, УчетНДС2012);
			
			Если ИдентификаторМакетаРаздел3 <> "" Тогда
				
				ДополнительныеПараметры = Новый Структура;
				
				ДополнительныеПараметры.Вставить("ИдентификаторМакета", ИдентификаторМакетаРаздел3);
				
				ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
				
				Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
				Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
				
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхСобытие, ВидСравненияКомпоновкиДанных.ВСписке, СобытиеПредъявленКВычетуНДС);		
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхВидЦенности, ВидСравненияКомпоновкиДанных.ВСписке, ВидыЦенностейСтр130);		
				
				ДополнительныеПараметры.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
				
				НаимПоказателя = "8. Сумма налога, предъявленная налогоплательщику при приобретении на территории Российской Федерации товаров (работ, услуг), имущественных прав,
				|подлежащая вычету в соответствии с пунктом 2 статьи 171 Налогового кодекса Российской Федерации, а также сумма налога, подлежащая вычету в соответствии с
				|пунктом 5 статьи 171 Налогового кодекса Российской Федерации";
				
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000300013003", НаимПоказателя, "", "", Раздел3.П000300013003, "Раздел3", ДополнительныеПараметры);
				
			КонецЕсли;
			
			
			//Расшифровка П000300014003
			
			ИдентификаторМакетаРаздел3 = ПолучитьИдентификаторМакетаРасшифровки("П000300014003", РаздельныйУчетНДС, УпрощенныйУчетНДС, УчетНДС2012);
			
			Если ИдентификаторМакетаРаздел3 <> "" Тогда
				
				ДополнительныеПараметры = Новый Структура;
				
				ДополнительныеПараметры.Вставить("ИдентификаторМакета", ИдентификаторМакетаРаздел3);
				
				ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
				
				Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
				Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
				
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхСобытие, ВидСравненияКомпоновкиДанных.ВСписке, СобытиеПредъявленКВычетуНДС);		
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхВидЦенности, ВидСравненияКомпоновкиДанных.ВСписке, ВидыЦенностейСтр140);		
				
				ДополнительныеПараметры.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
				
				НаимПоказателя = "8.1. в том числе предъявленная подрядными организациями (заказчиками-застройщиками) по выполненным работам при проведении капитального строительства";
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000300014003", НаимПоказателя, "", "", Раздел3.П000300014003, "Раздел3", ДополнительныеПараметры);
				
			КонецЕсли;
			
			//Расшифровка П000300015003
			
			ИдентификаторМакетаРаздел3 = ПолучитьИдентификаторМакетаРасшифровки("П000300015003", РаздельныйУчетНДС, УпрощенныйУчетНДС, УчетНДС2012);
			
			Если ИдентификаторМакетаРаздел3 <> "" Тогда
				
				ДополнительныеПараметры = Новый Структура;
				
				ДополнительныеПараметры.Вставить("ИдентификаторМакета", ИдентификаторМакетаРаздел3);
				
				ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
				
				Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
				Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
				
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхСобытие, ВидСравненияКомпоновкиДанных.ВСписке, СобытиеПредъявленКВычетуНДС);		
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхВидЦенности, ВидСравненияКомпоновкиДанных.ВСписке, ВидыЦенностейСтр150);		
				
				ДополнительныеПараметры.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
				
				НаимПоказателя = "8.1. в том числе предъявленная подрядными организациями (заказчиками-застройщиками) по выполненным работам при проведении капитального строительства";
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000300015003", НаимПоказателя, "", "", Раздел3.П000300015003, "Раздел3", ДополнительныеПараметры);
				
			КонецЕсли;
			
			
			//Расшифровка П000300016003
			
			ИдентификаторМакетаРаздел3 = ПолучитьИдентификаторМакетаРасшифровки("П000300016003", РаздельныйУчетНДС, УпрощенныйУчетНДС, УчетНДС2012);
			
			Если ИдентификаторМакетаРаздел3 <> "" Тогда
				
				ДополнительныеПараметры = Новый Структура;
				
				ДополнительныеПараметры.Вставить("ИдентификаторМакета", ИдентификаторМакетаРаздел3);
				
				ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
				
				Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
				Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
				
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхСобытие, ВидСравненияКомпоновкиДанных.ВСписке, СобытиеПредъявленКВычетуНДС);		
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхВидЦенности, ВидСравненияКомпоновкиДанных.ВСписке, ВидыЦенностейСтр160);		
				
				ДополнительныеПараметры.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
				
				НаимПоказателя = "10. Сумма налога, исчисленная при выполнении строительно-монтажных работ для собственного потребления, подлежащая вычету";
				
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000300016003", НаимПоказателя, "", "", Раздел3.П000300016003, "Раздел3", ДополнительныеПараметры);
				
			КонецЕсли;
			
			
			//Расшифровка П000300018003
			
			ИдентификаторМакетаРаздел3 = ПолучитьИдентификаторМакетаРасшифровки("П000300018003", РаздельныйУчетНДС, УпрощенныйУчетНДС, УчетНДС2012);
			
			Если ИдентификаторМакетаРаздел3 <> "" Тогда
				
				ДополнительныеПараметры = Новый Структура;
				
				ДополнительныеПараметры.Вставить("ИдентификаторМакета", ИдентификаторМакетаРаздел3);
				
				ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
				
				Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
				Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
				
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхСобытие, ВидСравненияКомпоновкиДанных.ВСписке, СобытиеПредъявленКВычетуНДС);		
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхВидЦенности, ВидСравненияКомпоновкиДанных.ВСписке, ВидыЦенностейСтр180);		
				
				ДополнительныеПараметры.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
				
				НаимПоказателя = "11.1. таможенным органам по товарам, ввезенным в таможенных режимах выпуска для внутреннего потребления, временного ввоза и переработки вне таможенной территории";
				
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000300018003", НаимПоказателя, "", "", Раздел3.П000300018003, "Раздел3", ДополнительныеПараметры);
				
			КонецЕсли;
			
			// Расшифровка П000300019003
			
			ИдентификаторМакетаРаздел3 = ПолучитьИдентификаторМакетаРасшифровки("П000300019003", РаздельныйУчетНДС, УпрощенныйУчетНДС, УчетНДС2012);
			
			Если ИдентификаторМакетаРаздел3 <> "" Тогда
				
				ДополнительныеПараметры = Новый Структура;
			
				ДополнительныеПараметры.Вставить("ИдентификаторМакета", ИдентификаторМакетаРаздел3);
				
				ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
				
				Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
				Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
				
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхСобытие, ВидСравненияКомпоновкиДанных.ВСписке, СобытиеПредъявленКВычетуНДС);		
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхВидЦенности, ВидСравненияКомпоновкиДанных.ВСписке, ВидыЦенностейСтр190);		
				
				ДополнительныеПараметры.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
				
				НаимПоказателя = "11.2. налоговым органам при ввозе товаров с территории Республики Беларусь";
				
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000300019003", НаимПоказателя, "", "", Раздел3.П000300019003, "Раздел3", ДополнительныеПараметры);
				
			КонецЕсли;
			
			// Расшифровка П000300020003
			
			ИдентификаторМакетаРаздел3 = ПолучитьИдентификаторМакетаРасшифровки("П000300020003", РаздельныйУчетНДС, УпрощенныйУчетНДС, УчетНДС2012);
			
			Если ИдентификаторМакетаРаздел3 <> "" Тогда
				
				ДополнительныеПараметры = Новый Структура;
				
				ДополнительныеПараметры.Вставить("ИдентификаторМакета", ИдентификаторМакетаРаздел3);
				
				ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
				
				Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
				Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
				
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхСобытие, ВидСравненияКомпоновкиДанных.ВСписке, СобытиеПредъявленКВычетуНДС);		
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхВидЦенности, ВидСравненияКомпоновкиДанных.ВСписке, ВидыЦенностейСтр200);		
				
				ДополнительныеПараметры.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
				
				НаимПоказателя = "12. Сумма налога, исчисленная продавцом с сумм оплаты, частичной оплаты, подлежащая вычету у продавца с даты отгрузки соответствующих товаров (выполнения работ, оказания услуг)";
				
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000300020003", НаимПоказателя, "", "", Раздел3.П000300020003, "Раздел3", ДополнительныеПараметры);
				
			КонецЕсли;
			
			//Расшифровка П000300021003
			
			ИдентификаторМакетаРаздел3 = ПолучитьИдентификаторМакетаРасшифровки("П000300021003", РаздельныйУчетНДС, УпрощенныйУчетНДС, УчетНДС2012);
			
			Если ИдентификаторМакетаРаздел3 <> "" Тогда
				
				ДополнительныеПараметры = Новый Структура;
				
				ДополнительныеПараметры.Вставить("ИдентификаторМакета", ИдентификаторМакетаРаздел3);
				
				ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
				
				Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
				Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
				
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхСобытие, ВидСравненияКомпоновкиДанных.ВСписке, СобытиеПредъявленКВычетуНДС);		
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхВидЦенности, ВидСравненияКомпоновкиДанных.ВСписке, ВидыЦенностейСтр210);		
				
				ДополнительныеПараметры.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
				
				НаимПоказателя = "13. Сумма налога, уплаченная в бюджет налогоплательщиком в качестве покупателя – налогового агента, подлежащая вычету";
				
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000300021003", НаимПоказателя, "", "", Раздел3.П000300021003, "Раздел3", ДополнительныеПараметры);
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////
	// РАЗДЕЛ 3 ПРИЛ. 1
	Если Контейнер.Свойство("Раздел3_Прил1") Тогда
		Если КонецДня(ПараметрыОтчета.мДатаКонцаПериодаОтчета) = КонецГода(ПараметрыОтчета.мДатаКонцаПериодаОтчета) Тогда
			
			Раздел3_Прил1 = Контейнер.Раздел3_Прил1;
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВосстановлениеНДСпоОбъектамНедвижимости.ОбъектНедвижимости КАК ОбъектНедвижимости,
			|	ВЫБОР
			|		КОГДА ПОДСТРОКА(ВосстановлениеНДСпоОбъектамНедвижимости.ОбъектНедвижимости.НаименованиеПолное, 1, 250) = """"
			|			ТОГДА ВосстановлениеНДСпоОбъектамНедвижимости.ОбъектНедвижимости.Наименование
			|		ИНАЧЕ ПОДСТРОКА(ВосстановлениеНДСпоОбъектамНедвижимости.ОбъектНедвижимости.НаименованиеПолное, 1, 250)
			|	КОНЕЦ КАК П000310001000,
			|	ПОДСТРОКА(ОсновныеСредстваКонтактнаяИнформация.ЗначенияПолей, 1, 500) КАК АдресМестонахождения,
			|	ВосстановлениеНДСпоОбъектамНедвижимости.ОбъектНедвижимости.КодРегиона КАК П000310002000_02,
			|	ВЫБОР
			|		КОГДА ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.КодОперацииДляДекларации = ЗНАЧЕНИЕ(Перечисление.НДСКодыОперацийПоОбъектамНедвижимости.Приобретение)
			|			ТОГДА ""1011803""
			|		КОГДА ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.КодОперацииДляДекларации = ЗНАЧЕНИЕ(Перечисление.НДСКодыОперацийПоОбъектамНедвижимости.СМРПодрядные)
			|			ТОГДА ""1011801""
			|		КОГДА ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.КодОперацииДляДекларации = ЗНАЧЕНИЕ(Перечисление.НДСКодыОперацийПоОбъектамНедвижимости.СМРСобственные)
			|			ТОГДА ""1011802""
			|		ИНАЧЕ """"
			|	КОНЕЦ КАК П000310003000,
			|	ВосстановлениеНДСпоОбъектамНедвижимости.ИспользуетсяДляОперацийНеОблагаемыхНДС,
			|	ВосстановлениеНДСпоОбъектамНедвижимости.ДатаВводаВЭксплуатациюБУ КАК П000310004000,
			|	ВосстановлениеНДСпоОбъектамНедвижимости.ДатаНачисленияАмортизацииНУ КАК П000310005000,
			|	ВосстановлениеНДСпоОбъектамНедвижимости.СтоимостьОбъектаНедвижимости КАК П000310006000,
			|	ЕСТЬNULL(СУММА(ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.НДС), 0) КАК П000310007000,
			|	ГОД(ВосстановлениеНДСпоОбъектамНедвижимости.Ссылка.Дата) КАК П000310008001_,
			|	ВосстановлениеНДСпоОбъектамНедвижимости.ДатаНачалаИспользованияДляОпераций КАК П000310008002_,
			|	ВосстановлениеНДСпоОбъектамНедвижимости.ДоляВыручкиНеОблагаемаяНДС КАК П000310008003_,
			|	ЕСТЬNULL(СУММА(ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.НДСВосстановлен), 0) КАК П000310008004_,
			|	ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.КодОперацииДляДекларации
			|ИЗ
			|	Документ.ВосстановлениеНДСПоОбъектамНедвижимости.ОбъектыНедвижимости КАК ВосстановлениеНДСпоОбъектамНедвижимости
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВосстановлениеНДСПоОбъектамНедвижимости.СчетаФактуры КАК ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры
			|		ПО ВосстановлениеНДСпоОбъектамНедвижимости.Ссылка = ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.Ссылка
			|			И ВосстановлениеНДСпоОбъектамНедвижимости.КлючСтроки = ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.КлючСтроки
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОсновныеСредства.КонтактнаяИнформация КАК ОсновныеСредстваКонтактнаяИнформация
			|		ПО ВосстановлениеНДСпоОбъектамНедвижимости.ОбъектНедвижимости = ОсновныеСредстваКонтактнаяИнформация.Ссылка
			|			И (ОсновныеСредстваКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресМестонахожденияОсновныеСредства))
			|ГДЕ
			|	ВосстановлениеНДСпоОбъектамНедвижимости.Ссылка.Организация В(&Организация)
			|	И ВосстановлениеНДСпоОбъектамНедвижимости.Ссылка.Дата <= &КонецПериода
			|	И ВосстановлениеНДСпоОбъектамНедвижимости.Ссылка.Проведен
			|
			|СГРУППИРОВАТЬ ПО
			|	ВосстановлениеНДСпоОбъектамНедвижимости.ОбъектНедвижимости,
			|	ВЫБОР
			|		КОГДА ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.КодОперацииДляДекларации = ЗНАЧЕНИЕ(Перечисление.НДСКодыОперацийПоОбъектамНедвижимости.Приобретение)
			|			ТОГДА ""1011803""
			|		КОГДА ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.КодОперацииДляДекларации = ЗНАЧЕНИЕ(Перечисление.НДСКодыОперацийПоОбъектамНедвижимости.СМРПодрядные)
			|			ТОГДА ""1011801""
			|		КОГДА ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.КодОперацииДляДекларации = ЗНАЧЕНИЕ(Перечисление.НДСКодыОперацийПоОбъектамНедвижимости.СМРСобственные)
			|			ТОГДА ""1011802""
			|		ИНАЧЕ """"
			|	КОНЕЦ,
			|	ВосстановлениеНДСпоОбъектамНедвижимости.ИспользуетсяДляОперацийНеОблагаемыхНДС,
			|	ВосстановлениеНДСпоОбъектамНедвижимости.ДатаВводаВЭксплуатациюБУ,
			|	ВосстановлениеНДСпоОбъектамНедвижимости.ДатаНачисленияАмортизацииНУ,
			|	ВосстановлениеНДСпоОбъектамНедвижимости.ДатаНачалаИспользованияДляОпераций,
			|	ГОД(ВосстановлениеНДСпоОбъектамНедвижимости.Ссылка.Дата),
			|	ВосстановлениеНДСпоОбъектамНедвижимости.СтоимостьОбъектаНедвижимости,
			|	ВосстановлениеНДСпоОбъектамНедвижимости.ДоляВыручкиНеОблагаемаяНДС,
			|	ПОДСТРОКА(ОсновныеСредстваКонтактнаяИнформация.ЗначенияПолей, 1, 500),
			|	ВосстановлениеНДСпоОбъектамНедвижимости.ОбъектНедвижимости.КодРегиона,
			|	ВЫБОР
			|		КОГДА ПОДСТРОКА(ВосстановлениеНДСпоОбъектамНедвижимости.ОбъектНедвижимости.НаименованиеПолное, 1, 250) = """"
			|			ТОГДА ВосстановлениеНДСпоОбъектамНедвижимости.ОбъектНедвижимости.Наименование
			|		ИНАЧЕ ПОДСТРОКА(ВосстановлениеНДСпоОбъектамНедвижимости.ОбъектНедвижимости.НаименованиеПолное, 1, 250)
			|	КОНЕЦ,
			|	ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.КодОперацииДляДекларации
			|
			|УПОРЯДОЧИТЬ ПО
			|	П000310008001_
			|ИТОГИ
			|	СУММА(П000310006000),
			|	СУММА(П000310007000),
			|	СУММА(П000310008001_),
			|	СУММА(П000310008003_),
			|	СУММА(П000310008004_)
			|ПО
			|	ОбъектНедвижимости,
			|	П000310003000
			|АВТОУПОРЯДОЧИВАНИЕ";
			
			ПерваяСтраница = Истина;
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ОбъектыНедвижимости = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
			
			СтраницаРаздел3_Прил1 =  Раздел3_Прил1[0].Данные[0].Значение;
			
			Для Каждого Показатель Из СтраницаРаздел3_Прил1 Цикл
				СтраницаРаздел3_Прил1[Показатель.Ключ] = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение));
			КонецЦикла;
			
			Пока Раздел3_Прил1.Количество()>1 Цикл
				Раздел3_Прил1.Удалить(1);
			КонецЦикла;
			
			
			Пока ОбъектыНедвижимости.Следующий() Цикл
				
				КодыОпераций = ОбъектыНедвижимости.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
				
				Пока КодыОпераций.Следующий() Цикл
					
					Если Не ПерваяСтраница Тогда
						
						
						СтруктураНовойТаблицы = Новый Структура();
						Для Каждого Показатель Из СтраницаРаздел3_Прил1 Цикл
							СтруктураНовойТаблицы.Вставить(Показатель.Ключ, ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение)));
						КонецЦикла;
						
						Раздел3_Прил1.Добавить().Данные = Новый СписокЗначений();
						Раздел3_Прил1[Раздел3_Прил1.Количество()-1].Данные.Добавить(СтруктураНовойТаблицы); 
						
					Иначе
						// На последующих выполнениях цикла нужно будет создавать дополнительные страницы
						ПерваяСтраница = Ложь;
					КонецЕсли;
					
					СтраницаРаздел3_Прил1 = Раздел3_Прил1[Раздел3_Прил1.Количество()-1].Данные[0].Значение;		
					
					СтраницаРаздел3_Прил1.П000310001000 = ОбъектыНедвижимости.П000310001000;
					
					//Расшифровка
					
					ИдентификаторМакетаРаздел3П1 = "ОткрытьОбъект";
					
					ДополнительныеПараметры = Новый Структура;
					
					ДополнительныеПараметры.Вставить("ИдентификаторМакета", ИдентификаторМакетаРаздел3П1);
					ДополнительныеПараметры.Вставить("Объект", ОбъектыНедвижимости.ОбъектНедвижимости);
					
					НаимПоказателя = "Наименование объекта недвижимости (код строки 010)";
					ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000310001000_" + Раздел3_Прил1.Количество(), НаимПоказателя, "", "", СтраницаРаздел3_Прил1.П000310001000, "Раздел3_Прил1", ДополнительныеПараметры);
					
					НаимПоказателя = "Дата ввода объекта недвижимости в эксплуатацию для исчисления амортизации (код строки 040)";
					ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000310004000_" + Раздел3_Прил1.Количество(), НаимПоказателя, "", "", СтраницаРаздел3_Прил1.П000310004000, "Раздел3_Прил1", ДополнительныеПараметры);
					
					НаимПоказателя = "Дата начала начисления амортизационных отчислений по объекту недвижимости (код строки 050)";
					ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000310005000_" + Раздел3_Прил1.Количество(), НаимПоказателя, "", "", СтраницаРаздел3_Прил1.П000310005000, "Раздел3_Прил1", ДополнительныеПараметры);
					
					НаимПоказателя = "Стоимость объекта недвижимости на дату ввода объекта в эксплуатацию без учета НДС (руб.) (код строки 060)";
					ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000310006000_" + Раздел3_Прил1.Количество(), НаимПоказателя, "", "", СтраницаРаздел3_Прил1.П000310006000, "Раздел3_Прил1", ДополнительныеПараметры);
					
					Год = КодыОпераций.Выбрать();
					
					НомерСтроки = 0;
					
					Пока Год.Следующий() Цикл
						
						Если НомерСтроки = 0 Тогда
							СтруктураАдреса = РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(Год.АдресМестонахождения);
							//ЗарплатаКадрыКлиентСервер.ПолучитьСтруктуруАдресаИзСтроки(Год.АдресМестонахождения);
							//СтруктураАдреса = УправлениеКонтактнойИнформацией.  РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(Год.АдресМестонахождения);
							Если Не СтруктураАдреса = Неопределено Тогда
								СтраницаРаздел3_Прил1.П000310002000_01 = СтруктураАдреса.Индекс;
								СтраницаРаздел3_Прил1.П000310002000_02 = Год.П000310002000_02;
								СтраницаРаздел3_Прил1.П000310002000_03 = СтруктураАдреса.Район;
								СтраницаРаздел3_Прил1.П000310002000_04 = СтруктураАдреса.Город;
								СтраницаРаздел3_Прил1.П000310002000_05 = СтруктураАдреса.НаселенныйПункт;
								СтраницаРаздел3_Прил1.П000310002000_06 = СтруктураАдреса.Улица;
								СтраницаРаздел3_Прил1.П000310002000_07 = СтруктураАдреса.Дом;
								СтраницаРаздел3_Прил1.П000310002000_08 = СтруктураАдреса.Корпус;
								СтраницаРаздел3_Прил1.П000310002000_09 = СтруктураАдреса.Квартира;
							КонецЕсли;
							
							СтраницаРаздел3_Прил1.П000310003000 = Год.П000310003000;
							СтраницаРаздел3_Прил1.П000310004000 = Год.П000310004000;
							СтраницаРаздел3_Прил1.П000310005000 = Год.П000310005000;
							СтраницаРаздел3_Прил1.П000310006000 = Год.П000310006000;
							СтраницаРаздел3_Прил1.П000310007000 = Год.П000310007000;
						КонецЕсли;
						
						НомерСтроки = НомерСтроки + 1;
						
						СтраницаРаздел3_Прил1["П000310008001_" + НомерСтроки] = Формат(Год.П000310008001_, "ЧГ=0");
						СтраницаРаздел3_Прил1["П000310008002_" + НомерСтроки] = Год.П000310008002_;
						СтраницаРаздел3_Прил1["П000310008003_" + НомерСтроки] = Год.П000310008003_;
						СтраницаРаздел3_Прил1["П000310008004_" + НомерСтроки] = Год.П000310008004_;
						
						
						
						//Расшифровка П000310008001
						
						ИдентификаторМакетаРаздел3П1 = ПолучитьИдентификаторМакетаРасшифровки("П000310008001", РаздельныйУчетНДС, УпрощенныйУчетНДС, УчетНДС2012);
						
						Если ИдентификаторМакетаРаздел3П1 <> "" Тогда
							
							ПолеКомпоновкиДанныхОбъектНедвижимости 			= Новый ПолеКомпоновкиДанных("ОбъектНедвижимости");
							ПолеКомпоновкиДанныхКодОперацииДляДекларации 	= Новый ПолеКомпоновкиДанных("КодОперацииДляДекларации");
							ПолеКомпоновкиДанныхГодВосстановленияНДС   		= Новый ПолеКомпоновкиДанных("ГодВосстановленияНДС");
							ДополнительныеПараметры = Новый Структура;
							
							ДополнительныеПараметры.Вставить("ИдентификаторМакета", ИдентификаторМакетаРаздел3П1);
							
							ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
							
							Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
							Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
							
							ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхОбъектНедвижимости, ВидСравненияКомпоновкиДанных.Равно, Год.ОбъектНедвижимости);		
							ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхКодОперацииДляДекларации, ВидСравненияКомпоновкиДанных.Равно, Год.КодОперацииДляДекларации);		
							ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхГодВосстановленияНДС, ВидСравненияКомпоновкиДанных.Равно, Год.П000310008001_);		
							
							ДополнительныеПараметры.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
							
							НаимПоказателя = "(код строки 080) За отчетный год (предыдущие отчетные годы)";
							ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000310008001_" + НомерСтроки + "_" + Раздел3_Прил1.Количество(), НаимПоказателя, "", "", СтраницаРаздел3_Прил1["П000310008001_" + НомерСтроки], "Раздел3_Прил1", ДополнительныеПараметры);
							
							НаимПоказателя = "Дата начала использования объекта недвижимости для операций, указанных в п.2 ст.170 Налогового кодекса Российской Федерации";
							ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000310008002_" + НомерСтроки + "_" + Раздел3_Прил1.Количество(), НаимПоказателя, "", "", СтраницаРаздел3_Прил1["П000310008002_" + НомерСтроки], "Раздел3_Прил1", ДополнительныеПараметры);
							
							НаимПоказателя = "Доля отгруженных товаров (работ, услуг), имущественных прав, не облагаемых НДС, в общей стоимости отгрузки (%)";
							ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000310008003_" + НомерСтроки + "_" + Раздел3_Прил1.Количество(), НаимПоказателя, "", "", СтраницаРаздел3_Прил1["П000310008003_" + НомерСтроки], "Раздел3_Прил1", ДополнительныеПараметры);
							
							НаимПоказателя = "Сумма НДС, подлежащая восстановлению и уплате в бюджет за календарный год (истекшие календарные годы) (руб.)";
							ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000310008004_" + НомерСтроки + "_" + Раздел3_Прил1.Количество(), НаимПоказателя, "", "", СтраницаРаздел3_Прил1["П000310008004_" + НомерСтроки], "Раздел3_Прил1", ДополнительныеПараметры);
						КонецЕсли;
						
						// Восстановление должно быть отражено в течении 10 лет.
						Если НомерСтроки = 10 Тогда
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////////////////////////
	// РАЗДЕЛ 4
	
	Если Контейнер.Свойство("Раздел4") Тогда
		Раздел4 = Контейнер.Раздел4;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот), 0) КАК ЧИСЛО(15, 2)) КАК П000400000102_1
		|ИЗ
		|	НДСЗаписиКнигиПродажОбороты КАК НДСЗаписиКнигиПродажОбороты
		|ГДЕ
		|	НДСЗаписиКнигиПродажОбороты.Событие В(&СобытиеПодтвержденаСтавка0)";
		
		ЗначенияДляЗаполнения = Запрос.Выполнить().Выбрать();
		Если ЗначенияДляЗаполнения.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(Раздел4,ЗначенияДляЗаполнения);
			
			//Расшифровка П000400000102_1
			
			ИдентификаторМакетаРаздел4 = ПолучитьИдентификаторМакетаРасшифровки("П000400000102_1", РаздельныйУчетНДС, УпрощенныйУчетНДС, УчетНДС2012);
			
			Если ИдентификаторМакетаРаздел4 <> "" Тогда
				
				ДополнительныеПараметры = Новый Структура;
				
				ДополнительныеПараметры.Вставить("ИдентификаторМакета", ИдентификаторМакетаРаздел4);
				
				ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
				
				Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
				Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
				
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхСобытие, ВидСравненияКомпоновкиДанных.ВСписке, СобытиеПодтвержденаСтавка0);		
				
				ДополнительныеПараметры.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
				
				НаимПоказателя = "Налоговая база";
				
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000400000102_1", НаимПоказателя, "", "", Раздел4.П000400000102_1, "Раздел4", ДополнительныеПараметры);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(НДСЗаписиКнигиПокупокОбороты.НДСОборот), 0) КАК ЧИСЛО(15, 2)) КАК П000400000103_1
		|ИЗ
		|	НДСЗаписиКнигиПокупокОбороты КАК НДСЗаписиКнигиПокупокОбороты
		|ГДЕ
		|	НДСЗаписиКнигиПокупокОбороты.Событие В(&СобытиеПредъявленКВычетуНДС0)";
		
		ЗначенияДляЗаполнения = Запрос.Выполнить().Выбрать();
		Если ЗначенияДляЗаполнения.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(Раздел4,ЗначенияДляЗаполнения);
			
			//Расшифровка П000400000103_1
			
			ИдентификаторМакетаРаздел4 = ПолучитьИдентификаторМакетаРасшифровки("П000400000103_1", РаздельныйУчетНДС, УпрощенныйУчетНДС, УчетНДС2012);
			
			Если ИдентификаторМакетаРаздел4 <> "" Тогда
				
				ДополнительныеПараметры = Новый Структура;
				
				ДополнительныеПараметры.Вставить("ИдентификаторМакета", ИдентификаторМакетаРаздел4);
				
				ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
				
				Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
				Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
				
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхСобытие, ВидСравненияКомпоновкиДанных.ВСписке, СобытиеПредъявленКВычетуНДС0);		
				
				ДополнительныеПараметры.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
				
				НаимПоказателя = "Налоговые вычеты по операциям , обоснованность применения налоговой ставки 0 процентов по которым документально подтверждена";
				
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000400000103_1", НаимПоказателя, "", "", Раздел4.П000400000103_1, "Раздел4", ДополнительныеПараметры);
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	///////////////////////////////////////////////////////////////////////////////////////////
	// РАЗДЕЛ 6
	
	Если Контейнер.Свойство("Раздел6") Тогда 
		Раздел6 = Контейнер.Раздел6;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот), 0) КАК ЧИСЛО(15, 2)) КАК П000600000102_1,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(НДСЗаписиКнигиПродажОбороты.НДСОборот), 0) КАК ЧИСЛО(15, 2)) КАК П000600000103_1
		|ИЗ
		|	НДСЗаписиКнигиПродажОбороты КАК НДСЗаписиКнигиПродажОбороты
		|ГДЕ
		|	НДСЗаписиКнигиПродажОбороты.Событие В(&СобытиеНеПодтвержденаСтавка0)";
		
		ЗначенияДляЗаполнения = Запрос.Выполнить().Выбрать();
		Если ЗначенияДляЗаполнения.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(Раздел6,ЗначенияДляЗаполнения);
			
			//Расшифровка П000600000102_1
			
			ИдентификаторМакетаРаздел6 = ПолучитьИдентификаторМакетаРасшифровки("П000600000102_1", РаздельныйУчетНДС, УпрощенныйУчетНДС, УчетНДС2012);
			
			Если ИдентификаторМакетаРаздел6 <> "" Тогда
				
				ДополнительныеПараметры = Новый Структура;
				
				ДополнительныеПараметры.Вставить("ИдентификаторМакета", ИдентификаторМакетаРаздел6);
				
				ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
				
				Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
				Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
				
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхСобытие, ВидСравненияКомпоновкиДанных.ВСписке, СобытиеНеПодтвержденаСтавка0);		
				
				ДополнительныеПараметры.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
				
				НаимПоказателя = "Налоговая база";
				
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000600000102_1", НаимПоказателя, "", "", Раздел6.П000600000102_1, "Раздел6", ДополнительныеПараметры);
				
				НаимПоказателя = "Суммы НДС, исчисленные по налоговым ставкам, предусмотренным пунктами 2-3 статьи 164 Налогового кодекса Российской Федерации";
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000600000103_1", НаимПоказателя, "", "", Раздел6.П000600000103_1, "Раздел6", ДополнительныеПараметры);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СУММА(НДСЗаписиКнигиПокупокОбороты.НДСОборот), 0) КАК ЧИСЛО(15, 2)) КАК П000600000104_1
		|ИЗ
		|	НДСЗаписиКнигиПокупокОбороты КАК НДСЗаписиКнигиПокупокОбороты
		|ГДЕ
		|	НДСЗаписиКнигиПокупокОбороты.Событие В(&СобытиеПредъявленКВычетуНеПодтвержденНДС0)";
		
		ЗначенияДляЗаполнения = Запрос.Выполнить().Выбрать();
		Если ЗначенияДляЗаполнения.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(Раздел6,ЗначенияДляЗаполнения);
			
			//Расшифровка П000600000104_1
			
			ИдентификаторМакетаРаздел6 = ПолучитьИдентификаторМакетаРасшифровки("П000600000104_1", РаздельныйУчетНДС, УпрощенныйУчетНДС, УчетНДС2012);
			
			Если ИдентификаторМакетаРаздел6 <> "" Тогда
				
				ДополнительныеПараметры = Новый Структура;
				
				ДополнительныеПараметры.Вставить("ИдентификаторМакета", ИдентификаторМакетаРаздел6);
				
				ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
				
				Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
				Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
				
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанныхСобытие, ВидСравненияКомпоновкиДанных.ВСписке, СобытиеПредъявленКВычетуНеПодтвержденНДС0);		
				
				ДополнительныеПараметры.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
				
				НаимПоказателя = "Сумма налоговых вычетов по операциям по реализации товаров (работ, услуг), обоснованность применения налоговой ставки 0 процентов по которым документально не подтверждена";
				
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000600000104_1", НаимПоказателя, "", "", Раздел6.П000600000104_1, "Раздел6", ДополнительныеПараметры);
				
			КонецЕсли;
			
			
		КонецЕсли;
	КонецЕсли;
	
	// Сохраняем таблицу расшифровок во временном хранилище в привязке к уникальному идентификатору формы
	
	Если СохранятьТаблицуРасшифровок Тогда
		ПараметрыОтчета.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(
			ТаблицаРасшифровки, ПараметрыОтчета.УникальныйИдентификаторФормы);
	КонецЕсли;

КонецПроцедуры

Процедура РасчитатьПоказателиРаздела3Декларации(СтруктураПоказателей) Экспорт
	
	СтруктураПоказателей.П000300001003 = Окр(СтруктураПоказателей.П000300001003);
	СтруктураПоказателей.П000300001005 = СтруктураПоказателей.П000300001003 * 18 / 100;
	СтруктураПоказателей.П000300002003 = Окр(СтруктураПоказателей.П000300002003);
	СтруктураПоказателей.П000300002005 = СтруктураПоказателей.П000300002003 * 10 / 100;
	СтруктураПоказателей.П000300003003 = Окр(СтруктураПоказателей.П000300003003);
	СтруктураПоказателей.П000300003005 = СтруктураПоказателей.П000300003003 * 18 / 118;
	СтруктураПоказателей.П000300004003 = Окр(СтруктураПоказателей.П000300004003);
	СтруктураПоказателей.П000300004005 = СтруктураПоказателей.П000300004003 * 10 / 110;
	СтруктураПоказателей.П000300006003 = Окр(СтруктураПоказателей.П000300006003);
	СтруктураПоказателей.П000300006005 = СтруктураПоказателей.П000300006003 * 18 / 100;
	СтруктураПоказателей.П000300001005 = Окр(СтруктураПоказателей.П000300001005);
	СтруктураПоказателей.П000300002005 = Окр(СтруктураПоказателей.П000300002005);
	СтруктураПоказателей.П000300003005 = Окр(СтруктураПоказателей.П000300003005);
	СтруктураПоказателей.П000300004005 = Окр(СтруктураПоказателей.П000300004005);
	СтруктураПоказателей.П000300005005 = Окр(СтруктураПоказателей.П000300005005);
	СтруктураПоказателей.П000300006005 = Окр(СтруктураПоказателей.П000300006005);
	СтруктураПоказателей.П000300007005 = Окр(СтруктураПоказателей.П000300007005);
	СтруктураПоказателей.П000300008005 = Окр(СтруктураПоказателей.П000300008005);
	СтруктураПоказателей.П000300009005 = Окр(СтруктураПоказателей.П000300009005);
	
	СтруктураПоказателей.П000300012005 = СтруктураПоказателей.П000300001005 + СтруктураПоказателей.П000300002005 + СтруктураПоказателей.П000300003005
		+ СтруктураПоказателей.П000300004005 + СтруктураПоказателей.П000300005005 + СтруктураПоказателей.П000300006005
		+ СтруктураПоказателей.П000300007005 + СтруктураПоказателей.П000300008005 + СтруктураПоказателей.П000300009005;
			
	СтруктураПоказателей.П000300018003 = Окр(СтруктураПоказателей.П000300018003);
	СтруктураПоказателей.П000300019003 = Окр(СтруктураПоказателей.П000300019003);
	
	СтруктураПоказателей.П000300017003 = СтруктураПоказателей.П000300018003 + СтруктураПоказателей.П000300019003;
		
	СтруктураПоказателей.П000300013003 = Окр(СтруктураПоказателей.П000300013003);
	СтруктураПоказателей.П000300015003 = Окр(СтруктураПоказателей.П000300015003);
	СтруктураПоказателей.П000300016003 = Окр(СтруктураПоказателей.П000300016003);
	СтруктураПоказателей.П000300017003 = Окр(СтруктураПоказателей.П000300017003);
	СтруктураПоказателей.П000300020003 = Окр(СтруктураПоказателей.П000300020003);
	СтруктураПоказателей.П000300021003 = Окр(СтруктураПоказателей.П000300021003);
			
	СтруктураПоказателей.П000300022003 = СтруктураПоказателей.П000300013003 + СтруктураПоказателей.П000300015003 + СтруктураПоказателей.П000300016003
		+ СтруктураПоказателей.П000300017003 + СтруктураПоказателей.П000300020003 + СтруктураПоказателей.П000300021003;
		
	СтруктураПоказателей.П000300023003 = Макс(СтруктураПоказателей.П000300012005 - СтруктураПоказателей.П000300022003, 0);
	
	СтруктураПоказателей.П000300024003 = Макс(СтруктураПоказателей.П000300022003 - СтруктураПоказателей.П000300012005, 0);												
			
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// СТАРЫЕ ПРОЦЕДУРЫ

// ОТРАЖЕНИЕ НАЧИСЛЕНИЯ НДС

// Формирование движений при отражении начисления НДС
//
Процедура СформироватьДвиженияОтражениеНачисленияНДС(ТаблицаНачисленияНДС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыОтражениеНачисленияНДС(ТаблицаНачисленияНДС, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	СформироватьДвиженияОтражениеНачисленияНДСЗаписиКнигиПродаж(Параметры.ТаблицаНачисленияНДС, Реквизиты, Движения, Отказ);

	СформироватьПроводкиОтражениеНачисленияНДСЗаписиКнигиПродаж(Параметры.ТаблицаНачисленияНДС, Реквизиты, Движения, Отказ);

КонецПроцедуры

Функция ПодготовитьПараметрыОтражениеНачисленияНДС(ТаблицаНачисленияНДС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"			                            // <Дата>
	+ "Регистратор,"	                            // <ДокументСсылка>
	+ "Организация,"	                            // <СправочникСсылка.Организации>
	+ "ИспользоватьДокументРасчетовКакСчетФактуру," // <Булево>
	+ "РасчетныйДокумент,"		                    // <ДокументСсылка.>
	+ "Подразделение,"                              // <Ссылка на справочник подразделений>
	+ "ФормироватьПроводки"		                    // <Булево>
	;

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Подготовка таблицы отгрузки без перехода права собственности:

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"                 // <Строка> - имя табличной части документа
	+ "НомерСтроки,"               // <Число,10,0> - номер строки документа
	+ "Номенклатура,"              // <СправочникСсылка.Номенклатура>
	+ "СуммаБезНДС,"               // <Число,15,2> - сумма отгрузки в рублях без НДС
	+ "НДС,"                       // <Число,15,2> - сумма НДС отгрузки в рублях
	+ "СтавкаНДС,"                 // <ПеречислениеСсылка.СтавкиНДС>
	+ "Покупатель,"                // <СправочникСсылка.Контрагенты>
	+ "ВидЦенности,"               // <ПеречислениеСсылка.ВидыЦенностей>
	+ "ВидНачисления,"             // <ПеречислениеСсылка.НДСВидНачисления>
	+ "Событие,"                   // <ПеречислениеСсылка.СобытияПоНДСПродажи>
	+ "ЗаписьДополнительногоЛиста,"// <Булево>
	+ "КорректируемыйПериод,"      // <Дата>
	+ "ДатаОплаты,"                // <Дата>
	+ "ДокументОплаты";            // <ДокументСсылка.>

	Если ТаблицаРеквизиты[0].ФормироватьПроводки Тогда
		СписокОбязательныхКолонок = СписокОбязательныхКолонок + ","
		+ "СчетУчетаБУ,"               // <ПланСчетовСсылка.Хозрасчетный> - счет учета ценностей
		+ "СчетДоходовБУ,"             // <ПланСчетовСсылка.Хозрасчетный> - счет доходов для бух.учета
		+ "СчетУчетаНДСПоРеализации,"  // <ПланСчетовСсылка.Хозрасчетный>
		+ "СубконтоБУ";                // <ПланВидовХарактеристик.ВидыСубконтоХозрасчетные>
	КонецЕсли;

	Если ТаблицаРеквизиты[0].ФормироватьСторнирующиеЗаписиДопЛистовВручную Тогда
		СписокОбязательныхКолонок = СписокОбязательныхКолонок + ","
		+ "СторнирующаяЗаписьДопЛиста";// <Булево>
	КонецЕсли;

	Параметры.Вставить("ТаблицаНачисленияНДС", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаНачисленияНДС, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияОтражениеНачисленияНДСЗаписиКнигиПродаж(ТаблицаНачисленияНДС, Реквизиты, Движения, Отказ)

	Если ТаблицаНачисленияНДС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ТаблицаЗаписиКнигиПродаж = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("НДСЗаписиКнигиПродаж");

	Для каждого СтрокаВыручки Из ТаблицаНачисленияНДС Цикл

		СтрокаКнигиПродаж = ТаблицаЗаписиКнигиПродаж.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаКнигиПродаж, СтрокаВыручки);

	КонецЦикла;

	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");
	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Реквизиты.Период, "Период");
	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Реквизиты.Период, "ДатаСобытия");

	Если Реквизиты.ИспользоватьДокументРасчетовКакСчетФактуру Тогда
		ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Реквизиты.РасчетныйДокумент, "СчетФактура");
	Иначе
		ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Реквизиты.Регистратор, "СчетФактура");
	КонецЕсли;

	Для каждого СтрокаТаблицы Из ТаблицаЗаписиКнигиПродаж Цикл
		НовоеДвижение = Движения.НДСЗаписиКнигиПродаж.Добавить();
		ЗаполнитьЗначенияСвойств(НовоеДвижение, СтрокаТаблицы);
	КонецЦикла;

	Движения.НДСЗаписиКнигиПродаж.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьПроводкиОтражениеНачисленияНДСЗаписиКнигиПродаж(ТаблицаНачисленияНДС, Реквизиты, Движения, Отказ)

	Если НЕ Реквизиты.ФормироватьПроводки Тогда
		Возврат;
	КонецЕсли;

	СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДС;
	ВидПлатежаВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог;

	Для каждого СтрокаТаблицы Из ТаблицаНачисленияНДС Цикл

		Если ПустаяСтрока(СтрокаТаблицы.ИмяСписка) Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаТаблицы.НДС = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = "Начисление НДС";

		Проводка.СчетДт = СтрокаТаблицы.СчетУчетаНДСПоРеализации;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			1, СтрокаТаблицы.СубконтоБУ);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"СтавкиНДС",  СтрокаТаблицы.СтавкаНДС);

		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = Реквизиты.Подразделение;
		КонецЕсли;

		Проводка.СчетКт = СчетУчетаНДС;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"ВидыПлатежейВГосБюджет", ВидПлатежаВГосБюджет);

		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = Реквизиты.Подразделение;
		КонецЕсли;

		Проводка.Сумма = СтрокаТаблицы.НДС;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ КНИГ И ЖУРНАЛОВ

// Книга покупок, дополнительные листы книги покупок

Процедура УстановитьПараметрыЗапросаКнигиПокупок(Запрос, СтруктураПараметров)
	
	Запрос.УстановитьПараметр("НачалоПериода", СтруктураПараметров.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(СтруктураПараметров.КонецПериода));
	
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.СписокОрганизаций);
	Запрос.УстановитьПараметр("ОтбиратьПоКонтрагенту", НЕ СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме И СтруктураПараметров.ОтбиратьПоКонтрагенту);
	Запрос.УстановитьПараметр("КонтрагентДляОтбора", СтруктураПараметров.КонтрагентДляОтбора);
	Запрос.УстановитьПараметр("ВыводитьПокупателейПоАвансам", СтруктураПараметров.ВыводитьПокупателейПоАвансам);
	Запрос.УстановитьПараметр("ВалютаРегУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	
	ДатаПроверкиПараметровУчета ='00010101';
	ЗаполнениеДокументовОтчетности = СтруктураПараметров.ЗаполнениеДокумента ИЛИ СтруктураПараметров.ЗаполнениеДекларации;
	
	Если ЗаполнениеДокументовОтчетности И СтруктураПараметров.ЗаписьДополнительногоЛиста Тогда
		Запрос.УстановитьПараметр("НачалоНалоговогоПериода", СтруктураПараметров.НачалоНалоговогоПериода); 
		Запрос.УстановитьПараметр("КонецНалоговогоПериода", КонецДня(СтруктураПараметров.КонецНалоговогоПериода));
		ДатаПроверкиПараметровУчета = СтруктураПараметров.КонецНалоговогоПериода;	
	Иначе
		ДатаПроверкиПараметровУчета = СтруктураПараметров.КонецПериода;	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПравилаПостановления735", 
		УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(ДатаПроверкиПараметровУчета) = 3);
		
	СтавкиНДС18 = Новый Массив();
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18);
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18_118);

	СтавкиНДС10 = Новый Массив();
	СтавкиНДС10.Добавить(Перечисления.СтавкиНДС.НДС10);
	СтавкиНДС10.Добавить(Перечисления.СтавкиНДС.НДС10_110);

	СтавкаНДС0 = Перечисления.СтавкиНДС.НДС0;
	СтавкаБезНДС = Перечисления.СтавкиНДС.БезНДС;

	Запрос.УстановитьПараметр("СтавкиНДС18", СтавкиНДС18);
	Запрос.УстановитьПараметр("СтавкиНДС10", СтавкиНДС10);
	Запрос.УстановитьПараметр("СтавкаНДС0", СтавкаНДС0);
	Запрос.УстановитьПараметр("СтавкаБезНДС", СтавкаБезНДС);
	 
	ВидыЦенностей_СобственныеСФ = Новый Массив;
	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.ВнутреннееПотребление);
	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.ВозвратАвансовПолученных);

	Запрос.УстановитьПараметр("ВидыЦенностей_СобственныеСФ", ВидыЦенностей_СобственныеСФ);

	ВидыЦенностей_АвансыПолученные = Новый Массив;
	ВидыЦенностей_АвансыПолученные.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностей_АвансыПолученные.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	ВидыЦенностей_АвансыПолученные.Добавить(Перечисления.ВидыЦенностей.ВозвратАвансовПолученных);
	ВидыЦенностей_АвансыПолученные.Добавить(Перечисления.ВидыЦенностей.АвансыВыданные);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_АвансыПолученные", ВидыЦенностей_АвансыПолученные);
	Запрос.УстановитьПараметр("ВидыЦенностей_АвансыВыданные", Перечисления.ВидыЦенностей.АвансыВыданные);
	
	ВидыЦенностей_СуммовыеРазницы = Новый Массив;
	ВидыЦенностей_СуммовыеРазницы.Добавить(Перечисления.ВидыЦенностей.СуммыСвязанныеСРасчетамиПоОплате);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_СуммоваяРазница", ВидыЦенностей_СуммовыеРазницы);
	
	ВидыЦенностей_АвансСобственные = Новый Массив;
	ВидыЦенностей_АвансСобственные.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностей_АвансСобственные.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	ВидыЦенностей_АвансСобственные.Добавить(Перечисления.ВидыЦенностей.ВозвратАвансовПолученных);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_АвансСобственные", ВидыЦенностей_АвансСобственные);
	
	ВидыЦенностей_НалоговыйАгент = Новый Массив;
	ВидыЦенностей_НалоговыйАгент.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидыЦенностей_НалоговыйАгент.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	ВидыЦенностей_НалоговыйАгент.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_НалоговыйАгент", ВидыЦенностей_НалоговыйАгент);
	
	МассивДокументовИсправлений = Новый Массив;
	МассивДокументовИсправлений.Добавить(Неопределено);
	
	ТипыДокументовИсправлений	= Метаданные.РегистрыНакопления.НДСЗаписиКнигиПокупок.Измерения.ИсправленныйСчетФактура.Тип;
	Для Каждого МетаданныеДокумента Из Метаданные.Документы Цикл
		
		Если ТипыДокументовИсправлений.СодержитТип(Тип("ДокументСсылка." + МетаданныеДокумента.Имя)) Тогда
			МассивДокументовИсправлений.Добавить(Документы[МетаданныеДокумента.Имя].ПустаяСсылка());
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ПустыеДокументыИсправления", МассивДокументовИсправлений);
	
КонецПроцедуры

// Получает записи книги покупок за период
//
Функция ПолучитьЗаписиКнигиПокупок(СписокСчетовФактур, СтруктураПараметров) Экспорт
		
	УстановитьПривилегированныйРежим(Истина);
	
	// Создаем запрос по счетам-фактурам
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	УстановитьПараметрыЗапросаКнигиПокупок(Запрос, СтруктураПараметров);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСЗаписиКнигиПокупок.Период КАК Период,
	|	НДСЗаписиКнигиПокупок.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.КорректировкаРеализации
	|			ТОГДА ВЫБОР
	|					КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|							И &ВыводитьПокупателейПоАвансам
	|						ТОГДА НДСЗаписиКнигиПокупок.Поставщик
	|					ИНАЧЕ НДСЗаписиКнигиПокупок.Организация
	|				КОНЕЦ
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	|				И (НЕ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|					ИЛИ НЕ &ВыводитьПокупателейПоАвансам)
	|			ТОГДА НДСЗаписиКнигиПокупок.Организация
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|			ТОГДА НДСЗаписиКнигиПокупок.Поставщик
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	|				И НЕ(НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|						И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупок.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат)
	|			ТОГДА НДСЗаписиКнигиПокупок.Организация
	|		ИНАЧЕ НДСЗаписиКнигиПокупок.Поставщик
	|	КОНЕЦ КАК Контрагент,
	|	НДСЗаписиКнигиПокупок.Поставщик КАК КонтрагентПоСчетуФактуре,
	|	ВЫБОР
	|		КОГДА НЕ НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
	|			ТОГДА НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура
	|		ИНАЧЕ НДСЗаписиКнигиПокупок.СчетФактура
	|	КОНЕЦ КАК СчетФактура,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|			ТОГДА ВЫБОР
	|					КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|						ТОГДА ДанныеПервичныхДокументовСчетФактураВыданныйДокументОснование.ДатаРегистратора
	|					ИНАЧЕ ДанныеПервичныхДокументовСчетФактура.ДатаРегистратора
	|				КОНЕЦ
	|		ИНАЧЕ НДСЗаписиКнигиПокупок.ДатаОплаты
	|	КОНЕЦ КАК ДатаОплаты,
	|	НДСЗаписиКнигиПокупок.ДокументОплаты,
	|	СУММА(ЕСТЬNULL(НДСЗаписиКнигиПокупок.СуммаБезНДС, 0) + ЕСТЬNULL(НДСЗаписиКнигиПокупок.НДС, 0)) КАК ВсегоПокупок,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупок.СтавкаНДС В (&СтавкиНДС18)
	|					И НЕ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|				ТОГДА НДСЗаписиКнигиПокупок.СуммаБезНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБезНДС18,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупок.СтавкаНДС В (&СтавкиНДС18)
	|				ТОГДА НДСЗаписиКнигиПокупок.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДС18,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупок.СтавкаНДС В (&СтавкиНДС10)
	|					И НЕ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|				ТОГДА НДСЗаписиКнигиПокупок.СуммаБезНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБезНДС10,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупок.СтавкаНДС В (&СтавкиНДС10)
	|				ТОГДА НДСЗаписиКнигиПокупок.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДС10,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупок.СтавкаНДС = &СтавкаНДС0
	|				ТОГДА НДСЗаписиКнигиПокупок.СуммаБезНДС + НДСЗаписиКнигиПокупок.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДС0,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупок.СтавкаНДС = &СтавкаБезНДС
	|				ТОГДА НДСЗаписиКнигиПокупок.СуммаБезНДС + НДСЗаписиКнигиПокупок.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаСовсемБезНДС,
	|	ЕСТЬNULL(ДанныеПервичныхДокументовСчетФактура.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК СчетФактураДата,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности = &ВидыЦенностей_АвансыВыданные
	|			ТОГДА """"
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|			ТОГДА НДСЗаписиКнигиПокупок.ДатаОплаты
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
	|					ТОГДА ВЫБОР
	|							КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|								ТОГДА ДанныеПервичныхДокументовСчетФактураВыданныйДокументОснование.ДатаРегистратора
	|							КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|								ТОГДА ДанныеПервичныхДокументовСчетФактураПолученныйДокументОснование.ДатаРегистратора
	|							ИНАЧЕ ДанныеПервичныхДокументовСчетФактура.ДатаРегистратора
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА НДСЗаписиКнигиПокупок.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
	|							ТОГДА ДанныеПервичныхДокументовСчетФактура.ДатаРегистратора
	|						ИНАЧЕ НДСЗаписиКнигиПокупок.ДатаСобытия
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК ДатаОприходования,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|				И НДСЗаписиКнигиПокупок.ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА НДСЗаписиКнигиПокупок.ДатаОплаты
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НДСЗаписиКнигиПокупок.ВидЦенности = &ВидыЦенностей_АвансыВыданные
	|					ТОГДА ВЫБОР
	|							КОГДА НДСЗаписиКнигиПокупок.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
	|								ТОГДА ДанныеПервичныхДокументовСчетФактура.ДатаРегистратора
	|							ИНАЧЕ НДСЗаписиКнигиПокупок.ДатаСобытия
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
	|							ТОГДА ВЫБОР
	|									КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|										ТОГДА ДанныеПервичныхДокументовСчетФактураВыданныйДокументОснование.ДатаРегистратора
	|									КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|										ТОГДА ДанныеПервичныхДокументовСчетФактураПолученныйДокументОснование.ДатаРегистратора
	|									ИНАЧЕ ДанныеПервичныхДокументовСчетФактура.ДатаРегистратора
	|								КОНЕЦ
	|						ИНАЧЕ ВЫБОР
	|								КОГДА НДСЗаписиКнигиПокупок.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
	|									ТОГДА ДанныеПервичныхДокументовСчетФактура.ДатаРегистратора
	|								ИНАЧЕ НДСЗаписиКнигиПокупок.ДатаСобытия
	|							КОНЕЦ
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК ДатаПринятияНаУчет,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НаАванс,
	|	ВЫБОР
	|		КОГДА (НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|				ИЛИ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_СуммоваяРазница))
	|				И НЕ НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ОтражениеНачисленияНДС
	|				И НЕ НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ОтражениеНДСКВычету
	|			ТОГДА НДСЗаписиКнигиПокупок.СтавкаНДС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СтавкаНДС_Аванс,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ОтражениеНачисленияНДС
	|						И НЕ НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ОтражениеНДСКВычету
	|					ТОГДА НДСЗаписиКнигиПокупок.ДоговорКонтрагента
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ
	|	КОНЕЦ КАК ДоговорАванса,
	|	ВЫБОР
	|		КОГДА НЕ НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
	|			ТОГДА НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_НалоговыйАгент)
	|					ТОГДА НДСЗаписиКнигиПокупок.ДокументОплаты
	|				ИНАЧЕ НДСЗаписиКнигиПокупок.СчетФактура
	|			КОНЕЦ
	|	КОНЕЦ КАК ДокументОснованиеСчетаФактуры,
	|	ВЫБОР
	|		КОГДА (НДСЗаписиКнигиПокупок.Регистратор ССЫЛКА Документ.КорректировкаПоступления
	|				ИЛИ НДСЗаписиКнигиПокупок.Регистратор ССЫЛКА Документ.КорректировкаРеализации)
	|				И ЕСТЬNULL(НДСЗаписиКнигиПокупок.СуммаБезНДС, 0) + ЕСТЬNULL(НДСЗаписиКнигиПокупок.НДС, 0) < 0
	|			ТОГДА ИСТИНА
	|		КОГДА НДСЗаписиКнигиПокупок.Регистратор ССЫЛКА Документ.СчетФактураПолученный
	|				И ЕСТЬNULL(НДСЗаписиКнигиПокупок.СуммаБезНДС, 0) + ЕСТЬNULL(НДСЗаписиКнигиПокупок.НДС, 0) < 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Исправление,
	|	НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДанныеПервичныхДокументовСчетФактура.ДатаРегистратора
	|		ИНАЧЕ НДСЗаписиКнигиПокупок.ДатаСобытия
	|	КОНЕЦ КАК ДатаСобытия,
	|	СУММА(НДСЗаписиКнигиПокупок.НДС) КАК НДС,
	|	СчетФактураПолученный.НомерВходящегоДокумента КАК СчетФактураПолученныйНомерВходящегоДокумента,
	|	СчетФактураПолученный.ДатаВходящегоДокумента КАК СчетФактураПолученныйДатаВходящегоДокумента,
	|	СчетФактураПолученный.СуммаДокумента КАК СчетФактураПолученныйСуммаДокумента,
	|	НДСЗаписиКнигиПокупок.НомерДокументаОплаты,
	|	НДСЗаписиКнигиПокупок.ДатаДокументаОплаты,
	|	НДСЗаписиКнигиПокупок.КодВидаОперации
	|ПОМЕСТИТЬ ЗаписиКнигиПокупок
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок КАК НДСЗаписиКнигиПокупок
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументовСчетФактура
	|		ПО НДСЗаписиКнигиПокупок.Организация = ДанныеПервичныхДокументовСчетФактура.Организация
	|			И НДСЗаписиКнигиПокупок.СчетФактура = ДанныеПервичныхДокументовСчетФактура.Документ
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|		ПО НДСЗаписиКнигиПокупок.СчетФактура = СчетФактураВыданный.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументовСчетФактураВыданныйДокументОснование
	|		ПО СчетФактураВыданный.Организация = ДанныеПервичныхДокументовСчетФактураВыданныйДокументОснование.Организация
	|			И СчетФактураВыданный.ДокументОснование = ДанныеПервичныхДокументовСчетФактураВыданныйДокументОснование.Документ
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|		ПО НДСЗаписиКнигиПокупок.СчетФактура = СчетФактураПолученный.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументовСчетФактураПолученныйДокументОснование
	|		ПО СчетФактураПолученный.Организация = ДанныеПервичныхДокументовСчетФактураПолученныйДокументОснование.Организация
	|			И СчетФактураПолученный.ДокументОснование = ДанныеПервичныхДокументовСчетФактураПолученныйДокументОснование.Документ
	|ГДЕ
	|	НДСЗаписиКнигиПокупок.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НДСЗаписиКнигиПокупок.Организация В(&Организация)
	|	И НЕ НДСЗаписиКнигиПокупок.ЗаписьДополнительногоЛиста
	|	И (НДСЗаписиКнигиПокупок.НДС <> 0
	|			ИЛИ НДСЗаписиКнигиПокупок.СуммаБезНДС <> 0)
	|	И НДСЗаписиКнигиПокупок.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСЗаписиКнигиПокупок.Период,
	|	НДСЗаписиКнигиПокупок.Организация,
	|	НДСЗаписиКнигиПокупок.ДокументОплаты,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|			ТОГДА ВЫБОР
	|					КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|						ТОГДА ДанныеПервичныхДокументовСчетФактураВыданныйДокументОснование.ДатаРегистратора
	|					ИНАЧЕ ДанныеПервичныхДокументовСчетФактура.ДатаРегистратора
	|				КОНЕЦ
	|		ИНАЧЕ НДСЗаписиКнигиПокупок.ДатаОплаты
	|	КОНЕЦ,
	|	ЕСТЬNULL(ДанныеПервичныхДокументовСчетФактура.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)),
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|				ИЛИ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_СуммоваяРазница))
	|				И НЕ НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ОтражениеНачисленияНДС
	|				И НЕ НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ОтражениеНДСКВычету
	|			ТОГДА НДСЗаписиКнигиПокупок.СтавкаНДС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ОтражениеНачисленияНДС
	|						И НЕ НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ОтражениеНДСКВычету
	|					ТОГДА НДСЗаписиКнигиПокупок.ДоговорКонтрагента
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ
	|	КОНЕЦ,
	|	НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура,
	|	ВЫБОР
	|		КОГДА НЕ НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
	|			ТОГДА НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура
	|		ИНАЧЕ НДСЗаписиКнигиПокупок.СчетФактура
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
	|			ТОГДА НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_НалоговыйАгент)
	|					ТОГДА НДСЗаписиКнигиПокупок.ДокументОплаты
	|				ИНАЧЕ НДСЗаписиКнигиПокупок.СчетФактура
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НДСЗаписиКнигиПокупок.Регистратор ССЫЛКА Документ.КорректировкаПоступления
	|				ИЛИ НДСЗаписиКнигиПокупок.Регистратор ССЫЛКА Документ.КорректировкаРеализации)
	|				И ЕСТЬNULL(НДСЗаписиКнигиПокупок.СуммаБезНДС, 0) + ЕСТЬNULL(НДСЗаписиКнигиПокупок.НДС, 0) < 0
	|			ТОГДА ИСТИНА
	|		КОГДА НДСЗаписиКнигиПокупок.Регистратор ССЫЛКА Документ.СчетФактураПолученный
	|				И ЕСТЬNULL(НДСЗаписиКнигиПокупок.СуммаБезНДС, 0) + ЕСТЬNULL(НДСЗаписиКнигиПокупок.НДС, 0) < 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.КорректировкаРеализации
	|			ТОГДА ВЫБОР
	|					КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|							И &ВыводитьПокупателейПоАвансам
	|						ТОГДА НДСЗаписиКнигиПокупок.Поставщик
	|					ИНАЧЕ НДСЗаписиКнигиПокупок.Организация
	|				КОНЕЦ
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	|				И (НЕ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|					ИЛИ НЕ &ВыводитьПокупателейПоАвансам)
	|			ТОГДА НДСЗаписиКнигиПокупок.Организация
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|			ТОГДА НДСЗаписиКнигиПокупок.Поставщик
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	|				И НЕ(НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|						И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупок.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат)
	|			ТОГДА НДСЗаписиКнигиПокупок.Организация
	|		ИНАЧЕ НДСЗаписиКнигиПокупок.Поставщик
	|	КОНЕЦ,
	|	НАЧАЛОПЕРИОДА(ДанныеПервичныхДокументовСчетФактура.ДатаРегистратора, КВАРТАЛ),
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДанныеПервичныхДокументовСчетФактура.ДатаРегистратора
	|		ИНАЧЕ НДСЗаписиКнигиПокупок.ДатаСобытия
	|	КОНЕЦ,
	|	НДСЗаписиКнигиПокупок.Поставщик,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности = &ВидыЦенностей_АвансыВыданные
	|			ТОГДА """"
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|			ТОГДА НДСЗаписиКнигиПокупок.ДатаОплаты
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
	|					ТОГДА ВЫБОР
	|							КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|								ТОГДА ДанныеПервичныхДокументовСчетФактураВыданныйДокументОснование.ДатаРегистратора
	|							КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|								ТОГДА ДанныеПервичныхДокументовСчетФактураПолученныйДокументОснование.ДатаРегистратора
	|							ИНАЧЕ ДанныеПервичныхДокументовСчетФактура.ДатаРегистратора
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА НДСЗаписиКнигиПокупок.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
	|							ТОГДА ДанныеПервичныхДокументовСчетФактура.ДатаРегистратора
	|						ИНАЧЕ НДСЗаписиКнигиПокупок.ДатаСобытия
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|				И НДСЗаписиКнигиПокупок.ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА НДСЗаписиКнигиПокупок.ДатаОплаты
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НДСЗаписиКнигиПокупок.ВидЦенности = &ВидыЦенностей_АвансыВыданные
	|					ТОГДА ВЫБОР
	|							КОГДА НДСЗаписиКнигиПокупок.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
	|								ТОГДА ДанныеПервичныхДокументовСчетФактура.ДатаРегистратора
	|							ИНАЧЕ НДСЗаписиКнигиПокупок.ДатаСобытия
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
	|							ТОГДА ВЫБОР
	|									КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|										ТОГДА ДанныеПервичныхДокументовСчетФактураВыданныйДокументОснование.ДатаРегистратора
	|									КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|										ТОГДА ДанныеПервичныхДокументовСчетФактураПолученныйДокументОснование.ДатаРегистратора
	|									ИНАЧЕ ДанныеПервичныхДокументовСчетФактура.ДатаРегистратора
	|								КОНЕЦ
	|						ИНАЧЕ ВЫБОР
	|								КОГДА НДСЗаписиКнигиПокупок.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
	|									ТОГДА ДанныеПервичныхДокументовСчетФактура.ДатаРегистратора
	|								ИНАЧЕ НДСЗаписиКнигиПокупок.ДатаСобытия
	|							КОНЕЦ
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ,
	|	СчетФактураПолученный.НомерВходящегоДокумента,
	|	СчетФактураПолученный.ДатаВходящегоДокумента,
	|	СчетФактураПолученный.СуммаДокумента,
	|	НДСЗаписиКнигиПокупок.НомерДокументаОплаты,
	|	НДСЗаписиКнигиПокупок.ДатаДокументаОплаты,
	|	НДСЗаписиКнигиПокупок.КодВидаОперации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура";
	
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаписиКнигиПокупок.СчетФактура КАК СчетФактура
	|ИЗ
	|	ЗаписиКнигиПокупок КАК ЗаписиКнигиПокупок";
	СписокСчетовФактур = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СчетФактура");
	
	ПолучитьСчетаФактурыДокументыКнигаПокупок(Запрос);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ЗаписиКнигиПокупок.Период, КВАРТАЛ) КАК НалоговыйПериод,
	|	ЗаписиКнигиПокупок.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПокупок.Контрагент ССЫЛКА Справочник.Организации
	|			ТОГДА ЗаписиКнигиПокупок.Контрагент
	|		КОГДА НЕ ТаблицаСчетаФактурыДокументы.ПродавецДляПечати ЕСТЬ NULL 
	|			ТОГДА ТаблицаСчетаФактурыДокументы.ПродавецДляПечати
	|		ИНАЧЕ ЗаписиКнигиПокупок.Контрагент
	|	КОНЕЦ КАК Контрагент,
	|	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.КПППродавцаДляПечати, """") КАК КПППродавцаДляПечати,
	|	ЗаписиКнигиПокупок.СчетФактура КАК СчетФактура,
	|	ЗаписиКнигиПокупок.ДатаОплаты КАК ДатаОплаты,
	|	ЗаписиКнигиПокупок.СчетФактураДата КАК СчетФактураДата,
	|	ЗаписиКнигиПокупок.ДатаОприходования КАК ДатаОприходования,
	|	ЗаписиКнигиПокупок.ДатаПринятияНаУчет КАК ДатаПринятияНаУчет,
	|	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.СчетФактураДокумент, ЗаписиКнигиПокупок.СчетФактура) КАК СчетФактураДокумент,
	|	ВЫБОР
	|		КОГДА ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ЕСТЬ NULL 
	|				И ЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|			ТОГДА ЗаписиКнигиПокупок.СчетФактураПолученныйНомерВходящегоДокумента
	|		ИНАЧЕ ТаблицаСчетаФактурыДокументы.НомерСчетаФактуры
	|	КОНЕЦ КАК НомерСчетаФактуры,
	|	ВЫБОР
	|		КОГДА ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ЕСТЬ NULL 
	|				И ЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|			ТОГДА ЗаписиКнигиПокупок.СчетФактураПолученныйДатаВходящегоДокумента
	|		ИНАЧЕ ТаблицаСчетаФактурыДокументы.ДатаСчетаФактуры
	|	КОНЕЦ КАК ДатаСчетаФактуры,
	|	ЗаписиКнигиПокупок.НаАванс КАК НаАванс,
	|	ЗаписиКнигиПокупок.СтавкаНДС_Аванс КАК СтавкаНДС_Аванс,
	|	ЗаписиКнигиПокупок.ДоговорАванса КАК ДоговорАванса,
	|	ВЫБОР
	|		КОГДА &ПравилаПостановления735
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаСчетаФактурыДокументы.ВсегоПокупокВВалюте ЕСТЬ NULL 
	|							И ЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|						ТОГДА ВЫБОР
	|								КОГДА ЗаписиКнигиПокупок.ВсегоПокупок < 0
	|									ТОГДА -ЗаписиКнигиПокупок.СчетФактураПолученныйСуммаДокумента
	|								ИНАЧЕ ЗаписиКнигиПокупок.СчетФактураПолученныйСуммаДокумента
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ЗаписиКнигиПокупок.ВсегоПокупок < 0
	|								ТОГДА -ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.ВсегоПокупокВВалюте, -ЗаписиКнигиПокупок.ВсегоПокупок)
	|							ИНАЧЕ ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.ВсегоПокупокВВалюте, ЗаписиКнигиПокупок.ВсегоПокупок)
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ ЗаписиКнигиПокупок.ВсегоПокупок
	|	КОНЕЦ КАК ВсегоПокупок,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПокупок.НаАванс
	|			ТОГДА 0
	|		ИНАЧЕ ЗаписиКнигиПокупок.СуммаБезНДС18
	|	КОНЕЦ КАК СуммаБезНДС18,
	|	ЗаписиКнигиПокупок.НДС18 КАК НДС18,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПокупок.НаАванс
	|			ТОГДА 0
	|		ИНАЧЕ ЗаписиКнигиПокупок.СуммаБезНДС10
	|	КОНЕЦ КАК СуммаБезНДС10,
	|	ЗаписиКнигиПокупок.НДС10 КАК НДС10,
	|	ЗаписиКнигиПокупок.НДС0 КАК НДС0,
	|	ЗаписиКнигиПокупок.СуммаСовсемБезНДС КАК СуммаСовсемБезНДС,
	|	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.СчетФактураДокументРасшифровка, ЗаписиКнигиПокупок.СчетФактура) КАК СчетФактураДокументРасшифровка,
	|	ЗаписиКнигиПокупок.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	ТаблицаСчетаФактурыДокументы.ДатаИсправления КАК ДатаИсправления,
	|	ТаблицаСчетаФактурыДокументы.НомерИсправления КАК НомерИсправления,
	|	ТаблицаСчетаФактурыДокументы.ДатаКорректировки КАК ДатаКорректировки,
	|	ТаблицаСчетаФактурыДокументы.НомерКорректировки КАК НомерКорректировки,
	|	ТаблицаСчетаФактурыДокументы.ДатаИсправленияКорректировки КАК ДатаИсправленияКорректировки,
	|	ТаблицаСчетаФактурыДокументы.НомерИсправленияКорректировки КАК НомерИсправленияКорректировки,
	|	ЗаписиКнигиПокупок.Исправление КАК Исправление,
	|	ЗаписиКнигиПокупок.ДокументОснованиеСчетаФактуры КАК ДокументОснованиеСчетаФактуры,
	|	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.ОбрабатыватьНомерДокумента, ЛОЖЬ) КАК ОбрабатыватьНомерДокумента,
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|			КОГДА НЕ ТаблицаСчетаФактурыДокументы.ДатаСчетаФактурыСортировка ЕСТЬ NULL 
	|				ТОГДА ТаблицаСчетаФактурыДокументы.ДатаСчетаФактурыСортировка
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ЕСТЬ NULL 
	|							И ЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|						ТОГДА ЗаписиКнигиПокупок.СчетФактураПолученныйДатаВходящегоДокумента
	|					ИНАЧЕ ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.ДатаСчетаФактуры, ЗаписиКнигиПокупок.СчетФактураДата)
	|				КОНЕЦ
	|		КОНЕЦ, ДЕНЬ) КАК ДатаСчетаФактурыСортировка,
	|	ЗаписиКнигиПокупок.ДатаСобытия КАК ДатаСобытия,
	|	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.СводныйКорректировочный, ЛОЖЬ) КАК СводныйКорректировочный,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПокупок.КодВидаОперации <> """"
	|			ТОГДА ЗаписиКнигиПокупок.КодВидаОперации
	|		ИНАЧЕ ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.КодВидаОперации, ""01"")
	|	КОНЕЦ КАК КодВидаОперации,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.Валюта, &ВалютаРегУчета) <> &ВалютаРегУчета
	|			ТОГДА ТаблицаСчетаФактурыДокументы.ВалютаНаименованиеПолное
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Валюта,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.Валюта, &ВалютаРегУчета) <> &ВалютаРегУчета
	|			ТОГДА ТаблицаСчетаФактурыДокументы.ВалютаКод
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ВалютаКод,
	|	ЗаписиКнигиПокупок.НДС КАК НДС,
	|	ЗаписиКнигиПокупок.НомерДокументаОплаты КАК НомерДокументаОплаты,
	|	ЗаписиКнигиПокупок.ДатаДокументаОплаты КАК ДатаДокументаОплаты,
	|	ТаблицаСчетаФактурыДокументы.ПосредникСсылка
	|ПОМЕСТИТЬ ПодготовленныеЗаписиКнигиПокупок
	|ИЗ
	|	ЗаписиКнигиПокупок КАК ЗаписиКнигиПокупок
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСчетаФактурыДокументы КАК ТаблицаСчетаФактурыДокументы
	|		ПО ЗаписиКнигиПокупок.ДокументОснованиеСчетаФактуры = ТаблицаСчетаФактурыДокументы.СчетФактура
	|			И ЗаписиКнигиПокупок.ДоговорАванса = ТаблицаСчетаФактурыДокументы.ДоговорАванса
	|			И ЗаписиКнигиПокупок.СтавкаНДС_Аванс = ТаблицаСчетаФактурыДокументы.СтавкаНДСАванса
	|			И ЗаписиКнигиПокупок.КонтрагентПоСчетуФактуре = ТаблицаСчетаФактурыДокументы.КонтрагентПоСчетуФактуре
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ОтбиратьПоКонтрагенту = ИСТИНА
	|				ТОГДА ВЫБОР
	|						КОГДА НЕ ТаблицаСчетаФактурыДокументы.ПродавецДляПечати ЕСТЬ NULL 
	|								И ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ОбособленноеПодразделение
	|							ТОГДА ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ГоловнойКонтрагент = &КонтрагентДляОтбора
	|						КОГДА НЕ ТаблицаСчетаФактурыДокументы.ПродавецДляПечати ЕСТЬ NULL 
	|							ТОГДА ТаблицаСчетаФактурыДокументы.ПродавецДляПечати = &КонтрагентДляОтбора
	|						КОГДА ВЫРАЗИТЬ(ЗаписиКнигиПокупок.Контрагент КАК Справочник.Контрагенты).ОбособленноеПодразделение
	|							ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПокупок.Контрагент КАК Справочник.Контрагенты).ГоловнойКонтрагент = &КонтрагентДляОтбора
	|						ИНАЧЕ ЗаписиКнигиПокупок.Контрагент = &КонтрагентДляОтбора
	|					КОНЕЦ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПодготовленныеЗаписиКнигиПокупок.Контрагент КАК Ссылка,
	|	ПодготовленныеЗаписиКнигиПокупок.ДатаСчетаФактурыСортировка КАК ДатаСведений
	|ПОМЕСТИТЬ СсылкиНаДаты
	|ИЗ
	|	ПодготовленныеЗаписиКнигиПокупок КАК ПодготовленныеЗаписиКнигиПокупок
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПодготовленныеЗаписиКнигиПокупок.ПосредникСсылка,
	|	ПодготовленныеЗаписиКнигиПокупок.ДатаСчетаФактурыСортировка
	|ИЗ
	|	ПодготовленныеЗаписиКнигиПокупок КАК ПодготовленныеЗаписиКнигиПокупок
	|ГДЕ
	|	ПодготовленныеЗаписиКнигиПокупок.ПосредникСсылка <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)";

	Если НЕ СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме 
		И СтруктураПараметров.ОтбиратьПоКонтрагенту 
		И ОбщегоНазначения.ОбъектЯвляетсяГруппой(СтруктураПараметров.КонтрагентДляОтбора) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " = &КонтрагентДляОтбора", " В ИЕРАРХИИ(&КонтрагентДляОтбора)");
	КонецЕсли;
		
	Запрос.Выполнить();
	
	РегистрационныеСведенияНаДаты(МенеджерВременныхТаблиц);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодготовленныеЗаписиКнигиПокупок.НалоговыйПериод КАК НалоговыйПериод,
	|	ПодготовленныеЗаписиКнигиПокупок.Организация КАК Организация,
	|	ПодготовленныеЗаписиКнигиПокупок.Контрагент КАК Контрагент,
	|	ЕСТЬNULL(СведенияОКонтрагентеНаДату.ИНН, """") КАК ПродавецИНН,
	|	ВЫБОР
	|		КОГДА ПодготовленныеЗаписиКнигиПокупок.Контрагент ССЫЛКА Справочник.Организации
	|			ТОГДА ЕСТЬNULL(СведенияОКонтрагентеНаДату.КПП, """")
	|		КОГДА ПодготовленныеЗаписиКнигиПокупок.КПППродавцаДляПечати <> """"
	|			ТОГДА ПодготовленныеЗаписиКнигиПокупок.КПППродавцаДляПечати
	|		ИНАЧЕ ЕСТЬNULL(СведенияОКонтрагентеНаДату.КПП, """")
	|	КОНЕЦ КАК ПродавецКПП,
	|	ЕСТЬNULL(СведенияОКонтрагентеНаДату.Наименование, """") КАК Продавец,
	|	ПодготовленныеЗаписиКнигиПокупок.СчетФактура КАК СчетФактура,
	|	ПодготовленныеЗаписиКнигиПокупок.ДатаОплаты КАК ДатаОплаты,
	|	ПодготовленныеЗаписиКнигиПокупок.СчетФактураДата КАК СчетФактураДата,
	|	ПодготовленныеЗаписиКнигиПокупок.ДатаОприходования КАК ДатаОприходования,
	|	ПодготовленныеЗаписиКнигиПокупок.ДатаПринятияНаУчет КАК ДатаПринятияНаУчет,
	|	ПодготовленныеЗаписиКнигиПокупок.СчетФактураДокумент КАК СчетФактураДокумент,
	|	ПодготовленныеЗаписиКнигиПокупок.НомерСчетаФактуры КАК НомерСчетаФактуры,
	|	ПодготовленныеЗаписиКнигиПокупок.ДатаСчетаФактуры КАК ДатаСчетаФактуры,
	|	ПодготовленныеЗаписиКнигиПокупок.НаАванс КАК НаАванс,
	|	ПодготовленныеЗаписиКнигиПокупок.СтавкаНДС_Аванс КАК СтавкаНДС_Аванс,
	|	ПодготовленныеЗаписиКнигиПокупок.ДоговорАванса КАК ДоговорАванса,
	|	ПодготовленныеЗаписиКнигиПокупок.ВсегоПокупок КАК ВсегоПокупок,
	|	ПодготовленныеЗаписиКнигиПокупок.СуммаБезНДС18 КАК СуммаБезНДС18,
	|	ПодготовленныеЗаписиКнигиПокупок.НДС18 КАК НДС18,
	|	ПодготовленныеЗаписиКнигиПокупок.СуммаБезНДС10 КАК СуммаБезНДС10,
	|	ПодготовленныеЗаписиКнигиПокупок.НДС10 КАК НДС10,
	|	ПодготовленныеЗаписиКнигиПокупок.НДС0 КАК НДС0,
	|	ПодготовленныеЗаписиКнигиПокупок.СуммаСовсемБезНДС КАК СуммаСовсемБезНДС,
	|	ПодготовленныеЗаписиКнигиПокупок.СчетФактураДокументРасшифровка КАК СчетФактураДокументРасшифровка,
	|	ПодготовленныеЗаписиКнигиПокупок.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	ПодготовленныеЗаписиКнигиПокупок.ДатаИсправления КАК ДатаИсправления,
	|	ПодготовленныеЗаписиКнигиПокупок.НомерИсправления КАК НомерИсправления,
	|	ПодготовленныеЗаписиКнигиПокупок.ДатаКорректировки КАК ДатаКорректировки,
	|	ПодготовленныеЗаписиКнигиПокупок.НомерКорректировки КАК НомерКорректировки,
	|	ПодготовленныеЗаписиКнигиПокупок.ДатаИсправленияКорректировки КАК ДатаИсправленияКорректировки,
	|	ПодготовленныеЗаписиКнигиПокупок.НомерИсправленияКорректировки КАК НомерИсправленияКорректировки,
	|	ПодготовленныеЗаписиКнигиПокупок.Исправление КАК Исправление,
	|	ПодготовленныеЗаписиКнигиПокупок.ДокументОснованиеСчетаФактуры КАК ДокументОснованиеСчетаФактуры,
	|	ПодготовленныеЗаписиКнигиПокупок.ОбрабатыватьНомерДокумента КАК ОбрабатыватьНомерДокумента,
	|	ПодготовленныеЗаписиКнигиПокупок.ДатаСчетаФактурыСортировка КАК ДатаСчетаФактурыСортировка,
	|	ПодготовленныеЗаписиКнигиПокупок.ДатаСобытия КАК ДатаСобытия,
	|	ПодготовленныеЗаписиКнигиПокупок.СводныйКорректировочный КАК СводныйКорректировочный,
	|	ПодготовленныеЗаписиКнигиПокупок.КодВидаОперации КАК КодВидаОперации,
	|	ПодготовленныеЗаписиКнигиПокупок.Валюта КАК Валюта,
	|	ПодготовленныеЗаписиКнигиПокупок.ВалютаКод КАК ВалютаКод,
	|	ПодготовленныеЗаписиКнигиПокупок.НДС КАК НДС,
	|	ПодготовленныеЗаписиКнигиПокупок.НомерДокументаОплаты КАК НомерДокументаОплаты,
	|	ПодготовленныеЗаписиКнигиПокупок.ДатаДокументаОплаты КАК ДатаДокументаОплаты,
	|	ЕСТЬNULL(СведенияОПосредникеНаДату.Наименование, """") КАК Посредник,
	|	ЕСТЬNULL(СведенияОПосредникеНаДату.ИНН, """") КАК ПосредникИНН,
	|	ЕСТЬNULL(СведенияОПосредникеНаДату.КПП, """") КАК ПосредникКПП
	|ИЗ
	|	ПодготовленныеЗаписиКнигиПокупок КАК ПодготовленныеЗаписиКнигиПокупок
	|		ЛЕВОЕ СОЕДИНЕНИЕ СведенияОСсылкахНаДаты КАК СведенияОКонтрагентеНаДату
	|		ПО ПодготовленныеЗаписиКнигиПокупок.Контрагент = СведенияОКонтрагентеНаДату.Ссылка
	|			И ПодготовленныеЗаписиКнигиПокупок.ДатаСчетаФактурыСортировка = СведенияОКонтрагентеНаДату.ДатаСведений
	|		ЛЕВОЕ СОЕДИНЕНИЕ СведенияОСсылкахНаДаты КАК СведенияОПосредникеНаДату
	|		ПО ПодготовленныеЗаписиКнигиПокупок.ПосредникСсылка = СведенияОПосредникеНаДату.Ссылка
	|			И ПодготовленныеЗаписиКнигиПокупок.ДатаСчетаФактурыСортировка = СведенияОПосредникеНаДату.ДатаСведений
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПринятияНаУчет,
	|	ДатаОплаты,
	|	ДатаСчетаФактуры,
	|	НомерСчетаФактуры,
	|	Продавец
	|ИТОГИ
	|	МАКСИМУМ(Контрагент),
	|	МАКСИМУМ(Продавец),
	|	МИНИМУМ(ДатаОплаты),
	|	МАКСИМУМ(ДатаОприходования),
	|	МАКСИМУМ(ДатаПринятияНаУчет),
	|	МАКСИМУМ(НаАванс),
	|	ВЫБОР
	|		КОГДА &ПравилаПостановления735
	|			ТОГДА МАКСИМУМ(ВсегоПокупок)
	|		ИНАЧЕ СУММА(ВсегоПокупок)
	|	КОНЕЦ КАК ВсегоПокупок,
	|	СУММА(СуммаБезНДС18),
	|	СУММА(НДС18),
	|	СУММА(СуммаБезНДС10),
	|	СУММА(НДС10),
	|	СУММА(НДС0),
	|	СУММА(СуммаСовсемБезНДС),
	|	МИНИМУМ(ДатаСчетаФактурыСортировка),
	|	МАКСИМУМ(СводныйКорректировочный),
	|	СУММА(НДС),
	|	МАКСИМУМ(НомерДокументаОплаты),
	|	МАКСИМУМ(ДатаДокументаОплаты)
	|ПО
	|	ОБЩИЕ,
	|	СчетФактураДокумент,
	|	КодВидаОперации,
	|	Исправление";
	
	Если СтруктураПараметров.ГруппироватьПоКонтрагентам И НЕ СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО
	               |	ОБЩИЕ,", "ПО
	               |	ОБЩИЕ, Контрагент, ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "УПОРЯДОЧИТЬ ПО", "УПОРЯДОЧИТЬ ПО Продавец, ");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить();

	Если СтруктураПараметров.Свойство("ДанныеДляПроверкиКонтрагентов") 
		И СтруктураПараметров.ДанныеДляПроверкиКонтрагентов.ИспользованиеПроверкиВозможно
		И НЕ СтруктураПараметров.ДанныеДляПроверкиКонтрагентов.ВыводитьТолькоНекорректныхКонтрагентов 
		И СтруктураПараметров.ДанныеДляПроверкиКонтрагентов.Свойство("АдресДанныхКниги") Тогда
		
		СтруктураПараметров.ДанныеДляПроверкиКонтрагентов.АдресДанныхКниги = ПоместитьВоВременноеХранилище(Выборка, 
			СтруктураПараметров.ДанныеДляПроверкиКонтрагентов.АдресДанныхКниги);
	КонецЕсли;

	Возврат Выборка;

КонецФункции // ПолучитьЗаписиКнигиПокупок()

// Получает записи дополнительных листов за период
//
Функция ПолучитьЗаписиДополнительныхЛистовКнигиПокупок(СписокСчетовФактур, СтруктураПараметров) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	УстановитьПараметрыЗапросаКнигиПокупок(Запрос, СтруктураПараметров);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.КорректировкаРеализации
	|			ТОГДА НДСЗаписиКнигиПокупок.Организация
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	|				И (НЕ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|					ИЛИ НЕ &ВыводитьПокупателейПоАвансам)
	|			ТОГДА НДСЗаписиКнигиПокупок.Организация
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|			ТОГДА НДСЗаписиКнигиПокупок.Поставщик
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	|				И НЕ(НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|						И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупок.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат)
	|			ТОГДА НДСЗаписиКнигиПокупок.Организация
	|		ИНАЧЕ НДСЗаписиКнигиПокупок.Поставщик
	|	КОНЕЦ КАК Контрагент,
	|	НДСЗаписиКнигиПокупок.Поставщик КАК КонтрагентПоСчетуФактуре,
	|	ВЫБОР
	|		КОГДА НЕ НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
	|			ТОГДА НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура
	|		ИНАЧЕ НДСЗаписиКнигиПокупок.СчетФактура
	|	КОНЕЦ КАК СчетФактура,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|			ТОГДА ВЫБОР
	|					КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|						ТОГДА ДанныеПервичныхДокументовСчетФактураВыданныйДокументОснование.ДатаРегистратора
	|					ИНАЧЕ ДанныеПервичныхДокументовСчетФактура.ДатаРегистратора
	|				КОНЕЦ
	|		ИНАЧЕ НДСЗаписиКнигиПокупок.ДатаОплаты
	|	КОНЕЦ КАК ДатаОплаты,
	|	НДСЗаписиКнигиПокупок.ДокументОплаты,
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|			КОГДА ДанныеПервичныхДокументовСчетФактура.ДатаРегистратора >= ДАТАВРЕМЯ(2006, 1, 1)
	|				ТОГДА ДанныеПервичныхДокументовСчетФактура.ДатаРегистратора
	|			КОГДА НЕ НДСЗаписиКнигиПокупок.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА НДСЗаписиКнигиПокупок.ДатаСобытия
	|			КОГДА НЕ НДСЗаписиКнигиПокупок.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА НДСЗаписиКнигиПокупок.ДатаОплаты
	|			ИНАЧЕ ДанныеПервичныхДокументовСчетФактура.ДатаРегистратора
	|		КОНЕЦ, ДЕНЬ) КАК ПорядокОтраженияПоДатам,
	|	СУММА(ЕСТЬNULL(НДСЗаписиКнигиПокупок.СуммаБезНДС, 0) + ЕСТЬNULL(НДСЗаписиКнигиПокупок.НДС, 0)) КАК ВсегоПокупок,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупок.СтавкаНДС В (&СтавкиНДС18)
	|					И НЕ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|				ТОГДА НДСЗаписиКнигиПокупок.СуммаБезНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБезНДС18,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупок.СтавкаНДС В (&СтавкиНДС18)
	|				ТОГДА НДСЗаписиКнигиПокупок.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДС18,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупок.СтавкаНДС В (&СтавкиНДС10)
	|					И НЕ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|				ТОГДА НДСЗаписиКнигиПокупок.СуммаБезНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБезНДС10,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупок.СтавкаНДС В (&СтавкиНДС10)
	|				ТОГДА НДСЗаписиКнигиПокупок.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДС10,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупок.СтавкаНДС = &СтавкаНДС0
	|				ТОГДА НДСЗаписиКнигиПокупок.СуммаБезНДС + НДСЗаписиКнигиПокупок.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДС0,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупок.СтавкаНДС = &СтавкаБезНДС
	|				ТОГДА НДСЗаписиКнигиПокупок.СуммаБезНДС + НДСЗаписиКнигиПокупок.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаСовсемБезНДС,
	|	НДСЗаписиКнигиПокупок.Организация КАК Организация,
	|	ДанныеПервичныхДокументовСчетФактура.ДатаРегистратора КАК СчетФактураДата,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности = &ВидыЦенностей_АвансыВыданные
	|			ТОГДА """"
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|			ТОГДА НДСЗаписиКнигиПокупок.ДатаОплаты
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
	|					ТОГДА ВЫБОР
	|							КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|								ТОГДА ДанныеПервичныхДокументовСчетФактураВыданныйДокументОснование.ДатаРегистратора
	|							КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|								ТОГДА ДанныеПервичныхДокументовСчетФактураПолученныйДокументОснование.ДатаРегистратора
	|							ИНАЧЕ ДанныеПервичныхДокументовСчетФактура.ДатаРегистратора
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА НДСЗаписиКнигиПокупок.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
	|							ТОГДА ДанныеПервичныхДокументовСчетФактура.ДатаРегистратора
	|						ИНАЧЕ НДСЗаписиКнигиПокупок.ДатаСобытия
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК ДатаОприходования,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НаАванс,
	|	ВЫБОР
	|		КОГДА (НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|				ИЛИ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_СуммоваяРазница))
	|				И НЕ НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ОтражениеНачисленияНДС
	|				И НЕ НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ОтражениеНДСКВычету
	|			ТОГДА НДСЗаписиКнигиПокупок.СтавкаНДС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СтавкаНДС_Аванс,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ОтражениеНачисленияНДС
	|						И НЕ НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ОтражениеНДСКВычету
	|					ТОГДА НДСЗаписиКнигиПокупок.ДоговорКонтрагента
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ
	|	КОНЕЦ КАК ДоговорАванса,
	|	НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПокупок.КорректируемыйПериод, КВАРТАЛ) КАК НалоговыйПериод,
	|	КОНЕЦПЕРИОДА(НДСЗаписиКнигиПокупок.КорректируемыйПериод, КВАРТАЛ) КАК КонецНалоговогоПериода,
	|	НДСЗаписиКнигиПокупок.Период КАК ДатаОформления,
	|	ВЫБОР
	|		КОГДА НЕ НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
	|			ТОГДА НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_НалоговыйАгент)
	|					ТОГДА НДСЗаписиКнигиПокупок.ДокументОплаты
	|				ИНАЧЕ НДСЗаписиКнигиПокупок.СчетФактура
	|			КОНЕЦ
	|	КОНЕЦ КАК ДокументОснованиеСчетаФактуры,
	|	ВЫБОР
	|		КОГДА (НДСЗаписиКнигиПокупок.Регистратор ССЫЛКА Документ.КорректировкаПоступления
	|				ИЛИ НДСЗаписиКнигиПокупок.Регистратор ССЫЛКА Документ.КорректировкаРеализации)
	|				И ЕСТЬNULL(НДСЗаписиКнигиПокупок.СуммаБезНДС, 0) + ЕСТЬNULL(НДСЗаписиКнигиПокупок.НДС, 0) < 0
	|			ТОГДА ИСТИНА
	|		КОГДА НДСЗаписиКнигиПокупок.Регистратор ССЫЛКА Документ.СчетФактураПолученный
	|				И ЕСТЬNULL(НДСЗаписиКнигиПокупок.СуммаБезНДС, 0) + ЕСТЬNULL(НДСЗаписиКнигиПокупок.НДС, 0) < 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Исправление,
	|	НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДанныеПервичныхДокументовСчетФактура.ДатаРегистратора
	|		ИНАЧЕ НДСЗаписиКнигиПокупок.ДатаСобытия
	|	КОНЕЦ КАК ДатаСобытия,
	|	СУММА(НДСЗаписиКнигиПокупок.НДС) КАК НДС,
	|	СчетФактураПолученный.НомерВходящегоДокумента КАК СчетФактураПолученныйНомерВходящегоДокумента,
	|	СчетФактураПолученный.ДатаВходящегоДокумента КАК СчетФактураПолученныйДатаВходящегоДокумента,
	|	СчетФактураПолученный.СуммаДокумента КАК СчетФактураПолученныйСуммаДокумента,
	|	НДСЗаписиКнигиПокупок.НомерДокументаОплаты,
	|	НДСЗаписиКнигиПокупок.ДатаДокументаОплаты,
	|	НДСЗаписиКнигиПокупок.КодВидаОперации
	|ПОМЕСТИТЬ ЗаписиКнигиПокупок
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок КАК НДСЗаписиКнигиПокупок
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументовСчетФактура
	|		ПО НДСЗаписиКнигиПокупок.Организация = ДанныеПервичныхДокументовСчетФактура.Организация
	|			И НДСЗаписиКнигиПокупок.СчетФактура = ДанныеПервичныхДокументовСчетФактура.Документ
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|		ПО НДСЗаписиКнигиПокупок.СчетФактура = СчетФактураВыданный.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументовСчетФактураВыданныйДокументОснование
	|		ПО СчетФактураВыданный.Организация = ДанныеПервичныхДокументовСчетФактураВыданныйДокументОснование.Организация
	|			И СчетФактураВыданный.ДокументОснование = ДанныеПервичныхДокументовСчетФактураВыданныйДокументОснование.Документ
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|		ПО НДСЗаписиКнигиПокупок.СчетФактура = СчетФактураПолученный.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументовСчетФактураПолученныйДокументОснование
	|		ПО СчетФактураПолученный.Организация = ДанныеПервичныхДокументовСчетФактураПолученныйДокументОснование.Организация
	|			И СчетФактураПолученный.ДокументОснование = ДанныеПервичныхДокументовСчетФактураПолученныйДокументОснование.Документ
	|ГДЕ
	|	НДСЗаписиКнигиПокупок.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НДСЗаписиКнигиПокупок.Организация В(&Организация)
	|	И НДСЗаписиКнигиПокупок.ЗаписьДополнительногоЛиста = ИСТИНА
	|	И (НДСЗаписиКнигиПокупок.НДС <> 0
	|			ИЛИ НДСЗаписиКнигиПокупок.СуммаБезНДС <> 0)
	|	И НДСЗаписиКнигиПокупок.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСЗаписиКнигиПокупок.ДокументОплаты,
	|	НДСЗаписиКнигиПокупок.Событие,
	|	НДСЗаписиКнигиПокупок.Организация,
	|	ДанныеПервичныхДокументовСчетФактура.ДатаРегистратора,
	|	НДСЗаписиКнигиПокупок.Период,
	|	НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|			ТОГДА ВЫБОР
	|					КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|						ТОГДА ДанныеПервичныхДокументовСчетФактураВыданныйДокументОснование.ДатаРегистратора
	|					ИНАЧЕ ДанныеПервичныхДокументовСчетФактура.ДатаРегистратора
	|				КОНЕЦ
	|		ИНАЧЕ НДСЗаписиКнигиПокупок.ДатаОплаты
	|	КОНЕЦ,
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|			КОГДА ДанныеПервичныхДокументовСчетФактура.ДатаРегистратора >= ДАТАВРЕМЯ(2006, 1, 1)
	|				ТОГДА ДанныеПервичныхДокументовСчетФактура.ДатаРегистратора
	|			КОГДА НЕ НДСЗаписиКнигиПокупок.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА НДСЗаписиКнигиПокупок.ДатаСобытия
	|			КОГДА НЕ НДСЗаписиКнигиПокупок.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА НДСЗаписиКнигиПокупок.ДатаОплаты
	|			ИНАЧЕ ДанныеПервичныхДокументовСчетФактура.ДатаРегистратора
	|		КОНЕЦ, ДЕНЬ),
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|				ИЛИ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_СуммоваяРазница))
	|				И НЕ НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ОтражениеНачисленияНДС
	|				И НЕ НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ОтражениеНДСКВычету
	|			ТОГДА НДСЗаписиКнигиПокупок.СтавкаНДС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ОтражениеНачисленияНДС
	|						И НЕ НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ОтражениеНДСКВычету
	|					ТОГДА НДСЗаписиКнигиПокупок.ДоговорКонтрагента
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ
	|	КОНЕЦ,
	|	НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПокупок.КорректируемыйПериод, КВАРТАЛ),
	|	КОНЕЦПЕРИОДА(НДСЗаписиКнигиПокупок.КорректируемыйПериод, КВАРТАЛ),
	|	ВЫБОР
	|		КОГДА НЕ НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
	|			ТОГДА НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура
	|		ИНАЧЕ НДСЗаписиКнигиПокупок.СчетФактура
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
	|			ТОГДА НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_НалоговыйАгент)
	|					ТОГДА НДСЗаписиКнигиПокупок.ДокументОплаты
	|				ИНАЧЕ НДСЗаписиКнигиПокупок.СчетФактура
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НДСЗаписиКнигиПокупок.Регистратор ССЫЛКА Документ.КорректировкаПоступления
	|				ИЛИ НДСЗаписиКнигиПокупок.Регистратор ССЫЛКА Документ.КорректировкаРеализации)
	|				И ЕСТЬNULL(НДСЗаписиКнигиПокупок.СуммаБезНДС, 0) + ЕСТЬNULL(НДСЗаписиКнигиПокупок.НДС, 0) < 0
	|			ТОГДА ИСТИНА
	|		КОГДА НДСЗаписиКнигиПокупок.Регистратор ССЫЛКА Документ.СчетФактураПолученный
	|				И ЕСТЬNULL(НДСЗаписиКнигиПокупок.СуммаБезНДС, 0) + ЕСТЬNULL(НДСЗаписиКнигиПокупок.НДС, 0) < 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.КорректировкаРеализации
	|			ТОГДА НДСЗаписиКнигиПокупок.Организация
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	|				И (НЕ НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|					ИЛИ НЕ &ВыводитьПокупателейПоАвансам)
	|			ТОГДА НДСЗаписиКнигиПокупок.Организация
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|			ТОГДА НДСЗаписиКнигиПокупок.Поставщик
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)
	|				И НЕ(НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|						И ВЫРАЗИТЬ(НДСЗаписиКнигиПокупок.СчетФактура КАК Документ.ВозвратТоваровОтПокупателя).ПокупателемВыставляетсяСчетФактураНаВозврат)
	|			ТОГДА НДСЗаписиКнигиПокупок.Организация
	|		ИНАЧЕ НДСЗаписиКнигиПокупок.Поставщик
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДанныеПервичныхДокументовСчетФактура.ДатаРегистратора
	|		ИНАЧЕ НДСЗаписиКнигиПокупок.ДатаСобытия
	|	КОНЕЦ,
	|	НДСЗаписиКнигиПокупок.Поставщик,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности = &ВидыЦенностей_АвансыВыданные
	|			ТОГДА """"
	|		КОГДА НДСЗаписиКнигиПокупок.ВидЦенности В (&ВидыЦенностей_АвансыПолученные)
	|			ТОГДА НДСЗаписиКнигиПокупок.ДатаОплаты
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
	|					ТОГДА ВЫБОР
	|							КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|								ТОГДА ДанныеПервичныхДокументовСчетФактураВыданныйДокументОснование.ДатаРегистратора
	|							КОГДА НДСЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|								ТОГДА ДанныеПервичныхДокументовСчетФактураПолученныйДокументОснование.ДатаРегистратора
	|							ИНАЧЕ ДанныеПервичныхДокументовСчетФактура.ДатаРегистратора
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА НДСЗаписиКнигиПокупок.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
	|							ТОГДА ДанныеПервичныхДокументовСчетФактура.ДатаРегистратора
	|						ИНАЧЕ НДСЗаписиКнигиПокупок.ДатаСобытия
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ,
	|	СчетФактураПолученный.НомерВходящегоДокумента,
	|	СчетФактураПолученный.ДатаВходящегоДокумента,
	|	СчетФактураПолученный.СуммаДокумента,
	|	НДСЗаписиКнигиПокупок.НомерДокументаОплаты,
	|	НДСЗаписиКнигиПокупок.ДатаДокументаОплаты,
	|	НДСЗаписиКнигиПокупок.КодВидаОперации";
	
	Если СтруктураПараметров.ЗаполнениеДокумента
		ИЛИ СтруктураПараметров.ЗаполнениеДекларации Тогда
								
		// Учитывается как корректируемый период, так и дата оформления дополнительного листа
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаписьДополнительногоЛиста = ИСТИНА", 
								"ЗаписьДополнительногоЛиста = ИСТИНА 
								|И НДСЗаписиКнигиПокупок.КорректируемыйПериод >= &НачалоНалоговогоПериода 
								|И НДСЗаписиКнигиПокупок.КорректируемыйПериод <= &КонецНалоговогоПериода");
								
	ИначеЕсли СтруктураПараметров.ДополнительныеЛистыЗаТекущийПериод Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Период МЕЖДУ &НачалоПериода И &КонецПериода", "Период >= &НачалоПериода");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаписьДополнительногоЛиста = ИСТИНА", 
								"ЗаписьДополнительногоЛиста = ИСТИНА 
								|И НДСЗаписиКнигиПокупок.КорректируемыйПериод >= &НачалоПериода 
								|И НДСЗаписиКнигиПокупок.КорректируемыйПериод <= &КонецПериода");
								
	КонецЕсли;
		
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаписиКнигиПокупок.СчетФактура КАК СчетФактура
	|ИЗ
	|	ЗаписиКнигиПокупок КАК ЗаписиКнигиПокупок";
	СписокСчетовФактур = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СчетФактура");
	
	ПолучитьСчетаФактурыДокументыКнигаПокупок(Запрос);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ЗаписиКнигиПокупок.НалоговыйПериод, КВАРТАЛ) КАК НалоговыйПериод,
	|	ЗаписиКнигиПокупок.ПорядокОтраженияПоДатам КАК ПорядокОтраженияПоДатам,
	|	ЗаписиКнигиПокупок.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПокупок.Контрагент ССЫЛКА Справочник.Организации
	|			ТОГДА ЗаписиКнигиПокупок.Контрагент
	|		КОГДА НЕ ТаблицаСчетаФактурыДокументы.ПродавецДляПечати ЕСТЬ NULL 
	|			ТОГДА ТаблицаСчетаФактурыДокументы.ПродавецДляПечати
	|		ИНАЧЕ ЗаписиКнигиПокупок.Контрагент
	|	КОНЕЦ КАК Контрагент,
	|	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.КПППродавцаДляПечати, """") КАК КПППродавцаДляПечати,
	|	ЗаписиКнигиПокупок.СчетФактура КАК СчетФактура,
	|	ЗаписиКнигиПокупок.ДатаОплаты КАК ДатаОплаты,
	|	ЗаписиКнигиПокупок.СчетФактураДата КАК СчетФактураДата,
	|	НАЧАЛОПЕРИОДА(ЗаписиКнигиПокупок.СчетФактураДата, ДЕНЬ) КАК СчетФактураДатаНачалоДня,
	|	ЗаписиКнигиПокупок.ДатаОприходования КАК ДатаОприходования,
	|	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.СчетФактураДокумент, ЗаписиКнигиПокупок.СчетФактура) КАК СчетФактураДокумент,
	|	ВЫБОР
	|		КОГДА ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ЕСТЬ NULL 
	|				И ЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|			ТОГДА ЗаписиКнигиПокупок.СчетФактураПолученныйНомерВходящегоДокумента
	|		ИНАЧЕ ТаблицаСчетаФактурыДокументы.НомерСчетаФактуры
	|	КОНЕЦ КАК НомерСчетаФактуры,
	|	ВЫБОР
	|		КОГДА ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ЕСТЬ NULL 
	|				И ЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|			ТОГДА ЗаписиКнигиПокупок.СчетФактураПолученныйДатаВходящегоДокумента
	|		ИНАЧЕ ТаблицаСчетаФактурыДокументы.ДатаСчетаФактуры
	|	КОНЕЦ КАК ДатаСчетаФактуры,
	|	ЗаписиКнигиПокупок.НаАванс КАК НаАванс,
	|	ЗаписиКнигиПокупок.СтавкаНДС_Аванс КАК СтавкаНДС_Аванс,
	|	ЗаписиКнигиПокупок.ДоговорАванса КАК ДоговорАванса,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПокупок.НалоговыйПериод >= ДАТАВРЕМЯ(2014, 10, 1)
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаСчетаФактурыДокументы.ВсегоПокупокВВалюте ЕСТЬ NULL 
	|							И ЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|						ТОГДА ВЫБОР
	|								КОГДА ЗаписиКнигиПокупок.ВсегоПокупок < 0
	|									ТОГДА -ЗаписиКнигиПокупок.СчетФактураПолученныйСуммаДокумента
	|								ИНАЧЕ ЗаписиКнигиПокупок.СчетФактураПолученныйСуммаДокумента
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ЗаписиКнигиПокупок.ВсегоПокупок < 0
	|								ТОГДА -ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.ВсегоПокупокВВалюте, -ЗаписиКнигиПокупок.ВсегоПокупок)
	|							ИНАЧЕ ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.ВсегоПокупокВВалюте, ЗаписиКнигиПокупок.ВсегоПокупок)
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ ЗаписиКнигиПокупок.ВсегоПокупок
	|	КОНЕЦ КАК ВсегоПокупок,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПокупок.НаАванс
	|			ТОГДА 0
	|		ИНАЧЕ ЗаписиКнигиПокупок.СуммаБезНДС18
	|	КОНЕЦ КАК СуммаБезНДС18,
	|	ЗаписиКнигиПокупок.НДС18 КАК НДС18,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПокупок.НаАванс
	|			ТОГДА 0
	|		ИНАЧЕ ЗаписиКнигиПокупок.СуммаБезНДС10
	|	КОНЕЦ КАК СуммаБезНДС10,
	|	ЗаписиКнигиПокупок.НДС10 КАК НДС10,
	|	ЗаписиКнигиПокупок.НДС0 КАК НДС0,
	|	ЗаписиКнигиПокупок.СуммаСовсемБезНДС КАК СуммаСовсемБезНДС,
	|	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.СчетФактураДокументРасшифровка, ЗаписиКнигиПокупок.СчетФактура) КАК СчетФактураДокументРасшифровка,
	|	НАЧАЛОПЕРИОДА(ЗаписиКнигиПокупок.ДатаОформления, ДЕНЬ) КАК ДатаОформления,
	|	ЗаписиКнигиПокупок.КонецНалоговогоПериода КАК КонецНалоговогоПериода,
	|	ЗаписиКнигиПокупок.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	ТаблицаСчетаФактурыДокументы.НомерИсправления КАК НомерИсправления,
	|	ТаблицаСчетаФактурыДокументы.ДатаИсправления КАК ДатаИсправления,
	|	ТаблицаСчетаФактурыДокументы.НомерКорректировки КАК НомерКорректировки,
	|	ТаблицаСчетаФактурыДокументы.ДатаКорректировки КАК ДатаКорректировки,
	|	ТаблицаСчетаФактурыДокументы.НомерИсправленияКорректировки КАК НомерИсправленияКорректировки,
	|	ТаблицаСчетаФактурыДокументы.ДатаИсправленияКорректировки КАК ДатаИсправленияКорректировки,
	|	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.ОбрабатыватьНомерДокумента, ЛОЖЬ) КАК ОбрабатыватьНомерДокумента,
	|	ЗаписиКнигиПокупок.ДатаСобытия КАК ДатаСобытия,
	|	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.СводныйКорректировочный, ЛОЖЬ) КАК СводныйКорректировочный,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПокупок.КодВидаОперации <> """"
	|			ТОГДА ЗаписиКнигиПокупок.КодВидаОперации
	|		ИНАЧЕ ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.КодВидаОперации, ""01"")
	|	КОНЕЦ КАК КодВидаОперации,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.Валюта, &ВалютаРегУчета) <> &ВалютаРегУчета
	|			ТОГДА ТаблицаСчетаФактурыДокументы.ВалютаНаименованиеПолное
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Валюта,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.Валюта, &ВалютаРегУчета) <> &ВалютаРегУчета
	|			ТОГДА ТаблицаСчетаФактурыДокументы.ВалютаКод
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ВалютаКод,
	|	ЗаписиКнигиПокупок.НДС КАК НДС,
	|	ЗаписиКнигиПокупок.НомерДокументаОплаты КАК НомерДокументаОплаты,
	|	ЗаписиКнигиПокупок.ДатаДокументаОплаты КАК ДатаДокументаОплаты,
	|	ТаблицаСчетаФактурыДокументы.ПосредникСсылка
	|ПОМЕСТИТЬ ПодготовленныеЗаписиКнигиПокупок
	|ИЗ
	|	ЗаписиКнигиПокупок КАК ЗаписиКнигиПокупок
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСчетаФактурыДокументы КАК ТаблицаСчетаФактурыДокументы
	|		ПО ЗаписиКнигиПокупок.ДокументОснованиеСчетаФактуры = ТаблицаСчетаФактурыДокументы.СчетФактура
	|			И ЗаписиКнигиПокупок.ДоговорАванса = ТаблицаСчетаФактурыДокументы.ДоговорАванса
	|			И ЗаписиКнигиПокупок.СтавкаНДС_Аванс = ТаблицаСчетаФактурыДокументы.СтавкаНДСАванса
	|			И ЗаписиКнигиПокупок.КонтрагентПоСчетуФактуре = ТаблицаСчетаФактурыДокументы.КонтрагентПоСчетуФактуре
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ОтбиратьПоКонтрагенту = ИСТИНА
	|				ТОГДА ВЫБОР
	|						КОГДА НЕ ТаблицаСчетаФактурыДокументы.ПродавецДляПечати ЕСТЬ NULL 
	|								И ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ОбособленноеПодразделение
	|							ТОГДА ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ГоловнойКонтрагент = &КонтрагентДляОтбора
	|						КОГДА НЕ ТаблицаСчетаФактурыДокументы.ПродавецДляПечати ЕСТЬ NULL 
	|							ТОГДА ТаблицаСчетаФактурыДокументы.ПродавецДляПечати = &КонтрагентДляОтбора
	|						КОГДА ВЫРАЗИТЬ(ЗаписиКнигиПокупок.Контрагент КАК Справочник.Контрагенты).ОбособленноеПодразделение
	|							ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПокупок.Контрагент КАК Справочник.Контрагенты).ГоловнойКонтрагент = &КонтрагентДляОтбора
	|						ИНАЧЕ ЗаписиКнигиПокупок.Контрагент = &КонтрагентДляОтбора
	|					КОНЕЦ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПодготовленныеЗаписиКнигиПокупок.Контрагент КАК Ссылка,
	|	ПодготовленныеЗаписиКнигиПокупок.СчетФактураДатаНачалоДня КАК ДатаСведений
	|ПОМЕСТИТЬ СсылкиНаДаты
	|ИЗ
	|	ПодготовленныеЗаписиКнигиПокупок КАК ПодготовленныеЗаписиКнигиПокупок
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПодготовленныеЗаписиКнигиПокупок.ПосредникСсылка,
	|	ПодготовленныеЗаписиКнигиПокупок.СчетФактураДатаНачалоДня
	|ИЗ
	|	ПодготовленныеЗаписиКнигиПокупок КАК ПодготовленныеЗаписиКнигиПокупок
	|ГДЕ
	|	ПодготовленныеЗаписиКнигиПокупок.ПосредникСсылка <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)";

	Если НЕ СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме 
		И СтруктураПараметров.ОтбиратьПоКонтрагенту 
		И ОбщегоНазначения.ОбъектЯвляетсяГруппой(СтруктураПараметров.КонтрагентДляОтбора) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " = &КонтрагентДляОтбора", " В ИЕРАРХИИ(&КонтрагентДляОтбора)");
	КонецЕсли;

	Запрос.Выполнить();

	РегистрационныеСведенияНаДаты(МенеджерВременныхТаблиц);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодготовленныеЗаписиКнигиПокупок.НалоговыйПериод КАК НалоговыйПериод,
	|	ПодготовленныеЗаписиКнигиПокупок.ПорядокОтраженияПоДатам КАК ПорядокОтраженияПоДатам,
	|	ПодготовленныеЗаписиКнигиПокупок.Организация КАК Организация,
	|	ПодготовленныеЗаписиКнигиПокупок.Контрагент КАК Контрагент,
	|	ЕСТЬNULL(СведенияОКонтрагентеНаДату.ИНН, """") КАК ПродавецИНН,
	|	ВЫБОР
	|		КОГДА ПодготовленныеЗаписиКнигиПокупок.Контрагент ССЫЛКА Справочник.Организации
	|			ТОГДА ЕСТЬNULL(СведенияОКонтрагентеНаДату.КПП, """")
	|		КОГДА ПодготовленныеЗаписиКнигиПокупок.КПППродавцаДляПечати <> """"
	|			ТОГДА ПодготовленныеЗаписиКнигиПокупок.КПППродавцаДляПечати
	|		ИНАЧЕ ЕСТЬNULL(СведенияОКонтрагентеНаДату.КПП, """")
	|	КОНЕЦ КАК ПродавецКПП,
	|	СведенияОКонтрагентеНаДату.Наименование КАК Продавец,
	|	ПодготовленныеЗаписиКнигиПокупок.СчетФактура КАК СчетФактура,
	|	ПодготовленныеЗаписиКнигиПокупок.ДатаОплаты КАК ДатаОплаты,
	|	ПодготовленныеЗаписиКнигиПокупок.СчетФактураДата КАК СчетФактураДата,
	|	ПодготовленныеЗаписиКнигиПокупок.ДатаОприходования КАК ДатаОприходования,
	|	ПодготовленныеЗаписиКнигиПокупок.СчетФактураДокумент КАК СчетФактураДокумент,
	|	ПодготовленныеЗаписиКнигиПокупок.НомерСчетаФактуры КАК НомерСчетаФактуры,
	|	ПодготовленныеЗаписиКнигиПокупок.ДатаСчетаФактуры КАК ДатаСчетаФактуры,
	|	ПодготовленныеЗаписиКнигиПокупок.НаАванс КАК НаАванс,
	|	ПодготовленныеЗаписиКнигиПокупок.СтавкаНДС_Аванс КАК СтавкаНДС_Аванс,
	|	ПодготовленныеЗаписиКнигиПокупок.ДоговорАванса КАК ДоговорАванса,
	|	ПодготовленныеЗаписиКнигиПокупок.ВсегоПокупок КАК ВсегоПокупок,
	|	ПодготовленныеЗаписиКнигиПокупок.СуммаБезНДС18 КАК СуммаБезНДС18,
	|	ПодготовленныеЗаписиКнигиПокупок.НДС18 КАК НДС18,
	|	ПодготовленныеЗаписиКнигиПокупок.СуммаБезНДС10 КАК СуммаБезНДС10,
	|	ПодготовленныеЗаписиКнигиПокупок.НДС10 КАК НДС10,
	|	ПодготовленныеЗаписиКнигиПокупок.НДС0 КАК НДС0,
	|	ПодготовленныеЗаписиКнигиПокупок.СуммаСовсемБезНДС КАК СуммаСовсемБезНДС,
	|	ПодготовленныеЗаписиКнигиПокупок.СчетФактураДокументРасшифровка КАК СчетФактураДокументРасшифровка,
	|	ПодготовленныеЗаписиКнигиПокупок.ДатаОформления КАК ДатаОформления,
	|	ПодготовленныеЗаписиКнигиПокупок.КонецНалоговогоПериода КАК КонецНалоговогоПериода,
	|	ПодготовленныеЗаписиКнигиПокупок.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	ПодготовленныеЗаписиКнигиПокупок.НомерИсправления КАК НомерИсправления,
	|	ПодготовленныеЗаписиКнигиПокупок.ДатаИсправления КАК ДатаИсправления,
	|	ПодготовленныеЗаписиКнигиПокупок.НомерКорректировки КАК НомерКорректировки,
	|	ПодготовленныеЗаписиКнигиПокупок.ДатаКорректировки КАК ДатаКорректировки,
	|	ПодготовленныеЗаписиКнигиПокупок.НомерИсправленияКорректировки КАК НомерИсправленияКорректировки,
	|	ПодготовленныеЗаписиКнигиПокупок.ДатаИсправленияКорректировки КАК ДатаИсправленияКорректировки,
	|	ПодготовленныеЗаписиКнигиПокупок.ОбрабатыватьНомерДокумента КАК ОбрабатыватьНомерДокумента,
	|	ПодготовленныеЗаписиКнигиПокупок.ДатаСобытия КАК ДатаСобытия,
	|	ПодготовленныеЗаписиКнигиПокупок.СводныйКорректировочный КАК СводныйКорректировочный,
	|	ПодготовленныеЗаписиКнигиПокупок.КодВидаОперации КАК КодВидаОперации,
	|	ПодготовленныеЗаписиКнигиПокупок.Валюта КАК Валюта,
	|	ПодготовленныеЗаписиКнигиПокупок.ВалютаКод КАК ВалютаКод,
	|	ПодготовленныеЗаписиКнигиПокупок.НДС КАК НДС,
	|	ПодготовленныеЗаписиКнигиПокупок.НомерДокументаОплаты КАК НомерДокументаОплаты,
	|	ПодготовленныеЗаписиКнигиПокупок.ДатаДокументаОплаты КАК ДатаДокументаОплаты,
	|	СведенияОПосредникеНаДату.Наименование КАК Посредник,
	|	СведенияОПосредникеНаДату.ИНН КАК ПосредникИНН,
	|	СведенияОПосредникеНаДату.КПП КАК ПосредникКПП
	|ИЗ
	|	ПодготовленныеЗаписиКнигиПокупок КАК ПодготовленныеЗаписиКнигиПокупок
	|		ЛЕВОЕ СОЕДИНЕНИЕ СведенияОСсылкахНаДаты КАК СведенияОКонтрагентеНаДату
	|		ПО ПодготовленныеЗаписиКнигиПокупок.Контрагент = СведенияОКонтрагентеНаДату.Ссылка
	|			И ПодготовленныеЗаписиКнигиПокупок.СчетФактураДатаНачалоДня = СведенияОКонтрагентеНаДату.ДатаСведений
	|		ЛЕВОЕ СОЕДИНЕНИЕ СведенияОСсылкахНаДаты КАК СведенияОПосредникеНаДату
	|		ПО ПодготовленныеЗаписиКнигиПокупок.ПосредникСсылка = СведенияОПосредникеНаДату.Ссылка
	|			И ПодготовленныеЗаписиКнигиПокупок.СчетФактураДатаНачалоДня = СведенияОПосредникеНаДату.ДатаСведений
	|
	|УПОРЯДОЧИТЬ ПО
	|	НалоговыйПериод,
	|	ДатаСобытия,
	|	ДатаОформления,
	|	СчетФактураДата,
	|	ДатаОплаты
	|ИТОГИ
	|	МАКСИМУМ(Контрагент),
	|	МАКСИМУМ(Продавец),
	|	МИНИМУМ(СчетФактураДата),
	|	МАКСИМУМ(ДатаОприходования),
	|	МАКСИМУМ(НаАванс),
	|	ВЫБОР
	|		КОГДА НалоговыйПериод >= ДАТАВРЕМЯ(2014, 10, 1)
	|			ТОГДА МАКСИМУМ(ВсегоПокупок)
	|		ИНАЧЕ СУММА(ВсегоПокупок)
	|	КОНЕЦ КАК ВсегоПокупок,
	|	СУММА(СуммаБезНДС18),
	|	СУММА(НДС18),
	|	СУММА(СуммаБезНДС10),
	|	СУММА(НДС10),
	|	СУММА(НДС0),
	|	СУММА(СуммаСовсемБезНДС),
	|	МАКСИМУМ(КонецНалоговогоПериода),
	|	МАКСИМУМ(СводныйКорректировочный),
	|	СУММА(НДС),
	|	МАКСИМУМ(НомерДокументаОплаты),
	|	МАКСИМУМ(ДатаДокументаОплаты)
	|ПО
	|	НалоговыйПериод,
	|	ДатаОформления,
	|	СчетФактураДокумент,
	|	ДоговорАванса,
	|	КодВидаОперации,
	|	ИсправленныйСчетФактура";
	
	Если СтруктураПараметров.ГруппироватьПоКонтрагентам И НЕ СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО
	               |	НалоговыйПериод,
	               |	ДатаОформления,", "ПО
	               |	НалоговыйПериод,
	               |	ДатаОформления, Контрагент, ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "УПОРЯДОЧИТЬ ПО", "УПОРЯДОЧИТЬ ПО Продавец, ");
	КонецЕсли;	
	
	Возврат Запрос.Выполнить();

КонецФункции

// Получает страну происхождения и номер ГТД по списку счетов-фактур в виде, отражаемом в книге покупок
//
Функция ПолучитьДополнительнуюИнформациюПоСФДляКнигиПокупок(СписокСчетовФактур, СтруктураПараметров) Экспорт
	
	СоответствиеСтрокиДопИнформацииПоСчетуФактуре = Новый Соответствие;

	// Дополнение по ГТД и стране происхождения
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаТоваров.Ссылка КАК СчетФактура,
	|	ТаблицаТоваров.СтранаПроисхождения.Код КАК СтранаПроисхождения,
	|	ТаблицаТоваров.НомерГТД,
	|	СУММА(1) КАК КоличествоЭлементов
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Ссылка В(&СписокСФ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.Ссылка,
	|	ТаблицаТоваров.СтранаПроисхождения,
	|	ТаблицаТоваров.НомерГТД,
	|	ТаблицаТоваров.СтранаПроисхождения.Код
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Ссылка,
	|	ТаблицаТоваров.СтранаПроисхождения.Код,
	|	ТаблицаТоваров.НомерГТД,
	|	СУММА(1)
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Оборудование КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Ссылка В(&СписокСФ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.Ссылка,
	|	ТаблицаТоваров.СтранаПроисхождения,
	|	ТаблицаТоваров.НомерГТД,
	|	ТаблицаТоваров.СтранаПроисхождения.Код
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Ссылка,
	|	ТаблицаТоваров.СтранаПроисхождения.Код,
	|	ТаблицаТоваров.НомерГТД,
	|	СУММА(1)
	|ИЗ
	|	Документ.ОтражениеНДСКВычету.ТоварыИУслуги КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Ссылка В(&СписокСФ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.Ссылка,
	|	ТаблицаТоваров.СтранаПроисхождения,
	|	ТаблицаТоваров.НомерГТД,
	|	ТаблицаТоваров.СтранаПроисхождения.Код
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Ссылка,
	|	ТаблицаТоваров.СтранаПроисхождения.Код,
	|	ТаблицаТоваров.НомерГТД,
	|	СУММА(1)
	|ИЗ
	|	Документ.КорректировкаПоступления.Товары КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Ссылка В(&СписокСФ)
	|	И НЕ ТаблицаТоваров.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение)
	|	И НЕ(ТаблицаТоваров.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки)
	|				И ТаблицаТоваров.Ссылка.ИсправляемыйДокументПоступления ССЫЛКА Документ.КорректировкаПоступления)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.Ссылка,
	|	ТаблицаТоваров.СтранаПроисхождения,
	|	ТаблицаТоваров.НомерГТД,
	|	ТаблицаТоваров.СтранаПроисхождения.Код
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Ссылка,
	|	ТаблицаТоваров.СтранаПроисхождения.Код,
	|	ТаблицаТоваров.НомерГТД,
	|	СУММА(1)
	|ИЗ
	|	Документ.КорректировкаРеализации.Товары КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Ссылка В(&СписокСФ)
	|	И НЕ ТаблицаТоваров.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение)
	|	И НЕ(ТаблицаТоваров.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки)
	|				И ТаблицаТоваров.Ссылка.ИсправляемыйДокументРеализации ССЫЛКА Документ.КорректировкаРеализации)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.Ссылка,
	|	ТаблицаТоваров.СтранаПроисхождения,
	|	ТаблицаТоваров.НомерГТД,
	|	ТаблицаТоваров.СтранаПроисхождения.Код
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТоваров.СчетФактура,
	|	ТаблицаТоваров.СтранаПроисхождения.Код,
	|	ТаблицаТоваров.НомерГТД,
	|	СУММА(1)
	|ИЗ
	|	Документ.АвансовыйОтчет.Товары КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.СчетФактура В(&СписокСФ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.СчетФактура,
	|	ТаблицаТоваров.СтранаПроисхождения,
	|	ТаблицаТоваров.НомерГТД,
	|	ТаблицаТоваров.СтранаПроисхождения.Код
	|ИТОГИ
	|	СУММА(КоличествоЭлементов)
	|ПО
	|	СчетФактура,
	|	СтранаПроисхождения";
	
	Запрос.УстановитьПараметр("СписокСФ", СписокСчетовФактур);
	
	ДополнительнаяИнформацияПоСФ = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	ДополнительнаяИнформацияПоСФ.Колонки.Добавить("ГТДиСтрана");
	ДополнительнаяИнформацияПоСФ.Колонки.Добавить("ГТД");
	ДополнительнаяИнформацияПоСФ.Колонки.Добавить("Графа7");
	ДополнительнаяИнформацияПоСФ.Колонки.Добавить("Графа9");
	ДополнительнаяИнформацияПоСФ.Колонки.Добавить("Графа10");
	
	Для каждого СтрокаСФ Из ДополнительнаяИнформацияПоСФ.Строки Цикл
		СоответствиеСтрокиДопИнформацииПоСчетуФактуре.Вставить(Строка(СтрокаСФ.СчетФактура.УникальныйИдентификатор()), СтрокаСФ);
	КонецЦикла;

	Для каждого СтрокаСФ Из ДополнительнаяИнформацияПоСФ.Строки Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаСФ.СчетФактура) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаИнформации = "";
		СтрокаИнформацииГТД = "";
		
		Для каждого СтрокаСтраныПроисхождения Из СтрокаСФ.Строки Цикл
			СтрокаИнформации = СтрокаИнформации + ?(ПустаяСтрока(СтрокаИнформации), "", Символы.ПС) + СокрЛП(СтрокаСтраныПроисхождения.СтранаПроисхождения);
			ГТДРез = "";
			Для каждого СтрокаНомерГТД Из СтрокаСтраныПроисхождения.Строки Цикл 
				ГТДРез = ГТДРез + ?(ГТДРез = "","",", ") + СокрЛП(СтрокаНомерГТД.НомерГТД)
			КонецЦикла;
			СтрокаИнформации = СтрокаИнформации + ?(ПустаяСтрока(СтрокаИнформации), "", ?(ПустаяСтрока(ГТДРез), "", ";")) + ГТДРез;
			СтрокаИнформацииГТД = СтрокаИнформацииГТД + ?(ПустаяСтрока(СтрокаИнформацииГТД), "", ?(ПустаяСтрока(ГТДРез), "", ";")) + ГТДРез;
		КонецЦикла;
		СтрокаСФ.ГТДиСтрана = СтрокаИнформации;
		СтрокаСФ.ГТД        = СтрокаИнформацииГТД;
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ 
	|	СчетФактураПолученный.Ссылка КАК СчетФактураДокумент,
	|	НАЧАЛОПЕРИОДА(СчетФактураПолученный.Дата, ДЕНЬ) КАК ДатаСведений,
	|	ТаблицаПродавцы.Продавец КАК Ссылка
	|ПОМЕСТИТЬ СсылкиНаДаты
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|		ПО СчетФактураПолученныйДокументыОснования.Ссылка = СчетФактураПолученный.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.Продавцы КАК ТаблицаПродавцы
	|		ПО (ТаблицаПродавцы.Ссылка = СчетФактураПолученный.Ссылка)
	|ГДЕ
	|	СчетФактураПолученныйДокументыОснования.ДокументОснование В(&СписокСФ)
	|	И СчетФактураПолученный.СводныйКомиссионный
	|";
	
	Запрос.Выполнить();
	
	РегистрационныеСведенияНаДаты(МенеджерВременныхТаблиц);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СсылкиНаДаты.СчетФактураДокумент КАК СчетФактураДокумент,
	|	ЕСТЬNULL(СведенияОСсылкахНаДаты.Наименование, """") КАК Продавец,
	|	ЕСТЬNULL(СведенияОСсылкахНаДаты.ИНН, """") КАК ИНН,
	|	ЕСТЬNULL(СведенияОСсылкахНаДаты.КПП, """") КАК КПП,
	|	НЕОПРЕДЕЛЕНО КАК ДатаПлатежногоДокумента,
	|	НЕОПРЕДЕЛЕНО КАК НомерПлатежногоДокумента,
	|	СУММА(1) КАК КоличествоЭлементов,
	|	СсылкиНаДаты.Ссылка.ЮридическоеФизическоеЛицо КАК ЮридическоеФизическоеЛицо
	|ИЗ
	|	СсылкиНаДаты
	|	ЛЕВОЕ СОЕДИНЕНИЕ СведенияОСсылкахНаДаты
	|		ПО СсылкиНаДаты.Ссылка = СведенияОСсылкахНаДаты.Ссылка
	|			И СсылкиНаДаты.ДатаСведений = СведенияОСсылкахНаДаты.ДатаСведений
	|СГРУППИРОВАТЬ ПО
	|	СсылкиНаДаты.Ссылка,
	|	СсылкиНаДаты.СчетФактураДокумент,
	|	ЕСТЬNULL(СведенияОСсылкахНаДаты.Наименование, """"),
	|	ЕСТЬNULL(СведенияОСсылкахНаДаты.ИНН, """"),
	|	ЕСТЬNULL(СведенияОСсылкахНаДаты.КПП, """"),
	|	СсылкиНаДаты.Ссылка.ЮридическоеФизическоеЛицо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетФактураПолученный.Ссылка,
	|	НЕОПРЕДЕЛЕНО,
	|	NULL,
	|	NULL,
	|	ТаблицаПлатежноРасчетныеДокументы.ДатаДокумента,
	|	ТаблицаПлатежноРасчетныеДокументы.НомерДокумента,
	|	СУММА(1),
	|	NULL
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|		ПО СчетФактураПолученныйДокументыОснования.Ссылка = СчетФактураПолученный.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.ПлатежноРасчетныеДокументы КАК ТаблицаПлатежноРасчетныеДокументы
	|		ПО (ТаблицаПлатежноРасчетныеДокументы.Ссылка = СчетФактураПолученный.Ссылка)
	|ГДЕ
	|	СчетФактураПолученныйДокументыОснования.ДокументОснование В(&СписокСФ)
	|	И СчетФактураПолученный.СводныйКомиссионный
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПлатежноРасчетныеДокументы.ДатаДокумента,
	|	ТаблицаПлатежноРасчетныеДокументы.НомерДокумента,
	|	СчетФактураПолученный.Ссылка
	|ИТОГИ
	|	СУММА(КоличествоЭлементов)
	|ПО
	|	СчетФактураДокумент";
	
	ИнформацияПоСводномуСчетуФактуре = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ИнформацияПоСводномуСчетуФактуре.Колонки.Добавить("Графа7");
	ИнформацияПоСводномуСчетуФактуре.Колонки.Добавить("Графа9");
	ИнформацияПоСводномуСчетуФактуре.Колонки.Добавить("Графа10");
	ИнформацияПоСводномуСчетуФактуре.Колонки.Добавить("МассивСвПрод"); // Массив сведений о продавцах для декларации с 1 кв 2015 г.
	ИнформацияПоСводномуСчетуФактуре.Колонки.Добавить("ГТДиСтрана");
	ИнформацияПоСводномуСчетуФактуре.Колонки.Добавить("ГТД");
	
	Для каждого СтрокаСФ Из ИнформацияПоСводномуСчетуФактуре.Строки Цикл
		СоответствиеСтрокиДопИнформацииПоСчетуФактуре.Вставить(Строка(СтрокаСФ.СчетФактураДокумент.УникальныйИдентификатор()), СтрокаСФ);
	КонецЦикла;
	
	Для каждого СтрокаСФ Из ИнформацияПоСводномуСчетуФактуре.Строки Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаСФ.СчетФактураДокумент) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаГрафа7 = "";
		СтрокаГрафа9 = "";
		СтрокаГрафа10 = "";
		МассивСвПрод = Новый Массив();
		
		Для каждого СтрокаДетальнойИнформации Из СтрокаСФ.Строки Цикл 
			
			Если ЗначениеЗаполнено(СтрокаДетальнойИнформации.ДатаПлатежногоДокумента) Тогда
				СтрокаГрафа7 = ?(ПустаяСтрока(СтрокаГрафа7), "", СтрокаГрафа7 + "," + Символы.ПС) 
					+ СтрокаДетальнойИнформации.НомерПлатежногоДокумента 
					+ ";" + Формат(СтрокаДетальнойИнформации.ДатаПлатежногоДокумента, "ДФ=dd.MM.yyyy");
			КонецЕсли; 
			
			Если ЗначениеЗаполнено(СтрокаДетальнойИнформации.Продавец) Тогда
				СтрокаГрафа9 = ?(ПустаяСтрока(СтрокаГрафа9), "", СтрокаГрафа9 + ";" + Символы.ПС) 
				+ СокрЛП(СтрокаДетальнойИнформации.Продавец);
				
				СтрокаГрафа10 = ?(ПустаяСтрока(СтрокаГрафа10), "", СтрокаГрафа10 + ";" + Символы.ПС) 
					+ СокрЛП(СтрокаДетальнойИнформации.ИНН) 
					+ ?(ПустаяСтрока(СтрокаДетальнойИнформации.КПП), "", "/" + СокрЛП(СтрокаДетальнойИнформации.КПП));
					
				СтруктураРеквизитовКонтрагента = Новый Структура();
					
				Если СтрокаДетальнойИнформации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
					СтруктураРеквизитовКонтрагента.Вставить("ИННФЛ", СтрокаДетальнойИнформации.ИНН);
					МассивСвПрод.Добавить(СтруктураРеквизитовКонтрагента);
				Иначе
					СтруктураРеквизитовКонтрагента.Вставить("ИННЮЛ", СтрокаДетальнойИнформации.ИНН);
					СтруктураРеквизитовКонтрагента.Вставить("КПП", СтрокаДетальнойИнформации.КПП);
					МассивСвПрод.Добавить(СтруктураРеквизитовКонтрагента);
				КонецЕсли;
						
			КонецЕсли;
			
		КонецЦикла;
		
		СтрокаСФ.Графа7  = СтрокаГрафа7;
		СтрокаСФ.Графа9  = СтрокаГрафа9;
		СтрокаСФ.Графа10 = СтрокаГрафа10;
		СтрокаСФ.МассивСвПрод = МассивСвПрод;
		
	КонецЦикла;

	Возврат СоответствиеСтрокиДопИнформацииПоСчетуФактуре;
	
КонецФункции

// Получает итоги книги покупок за период
//
// Параметры
//  Организация    – <СправочникСсылка.Организации> - организация по которой строится книга 
//  НачалоПериода  – <Дата> – дата начала периода
//  НачалоПериода  – <Дата> – дата окончания периода
//
// Возвращаемое значение:
//   <ТаблицаЗначений>   – Таблица значений
//
Функция ПолучитьИтогиЗаПериодКнигаПокупок(СтруктураПараметров) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(СУММА(ИтогиКнигиПокупок.ВсегоПокупок), 0) КАК ВсегоПокупок,
	|	ЕСТЬNULL(СУММА(ИтогиКнигиПокупок.СуммаБезНДС18), 0) КАК СуммаБезНДС18,
	|	ЕСТЬNULL(СУММА(ИтогиКнигиПокупок.НДС18), 0) КАК НДС18,
	|	ЕСТЬNULL(СУММА(ИтогиКнигиПокупок.СуммаБезНДС10), 0) КАК СуммаБезНДС10,
	|	ЕСТЬNULL(СУММА(ИтогиКнигиПокупок.НДС10), 0) КАК НДС10,
	|	ЕСТЬNULL(СУММА(ИтогиКнигиПокупок.НДС0), 0) КАК НДС0,
	|	ЕСТЬNULL(СУММА(ИтогиКнигиПокупок.СуммаСовсемБезНДС), 0) КАК СуммаСовсемБезНДС,
	|	ЕСТЬNULL(СУММА(ИтогиКнигиПокупок.НДС), 0) КАК НДС
	|ИЗ
	|	(ВЫБРАТЬ
	|		НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПокупокОбороты.НДСОборот КАК ВсегоПокупок,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС18)
	|					И НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_Авансы)
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаБезНДС18,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС18)
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК НДС18,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС10)
	|					И НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_Авансы)
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаБезНДС10,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС10)
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК НДС10,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС = &СтавкаНДС0
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК НДС0,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС = &СтавкаБезНДС
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаСовсемБезНДС,
	|		НДСЗаписиКнигиПокупокОбороты.НДСОборот КАК НДС
	|	ИЗ
	|		РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				Период,
	|				Организация В (&Организация)
	|					И НЕ ЗаписьДополнительногоЛиста = ИСТИНА) КАК НДСЗаписиКнигиПокупокОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПокупокОбороты.НДСОборот,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС18)
	|					И НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_Авансы)
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС18)
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС10)
	|					И НЕ НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностей_Авансы)
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС В (&СтавкиНДС10)
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС = &СтавкаНДС0
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПокупокОбороты.СтавкаНДС = &СтавкаБезНДС
	|				ТОГДА НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		НДСЗаписиКнигиПокупокОбороты.НДСОборот
	|	ИЗ
	|		РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	|				&НачалоПериода,
	|				&МоментФормированияДопЛиста,
	|				Период,
	|				Организация В (&Организация)
	|					И ЗаписьДополнительногоЛиста = ИСТИНА
	|					И КорректируемыйПериод >= &НачалоПериода
	|					И КорректируемыйПериод <= &КонецПериода) КАК НДСЗаписиКнигиПокупокОбороты) КАК ИтогиКнигиПокупок";
	 
	Запрос.УстановитьПараметр("НачалоПериода", СтруктураПараметров.НалоговыйПериод);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(СтруктураПараметров.КонецНалоговогоПериода));
	Запрос.УстановитьПараметр("МоментФормированияДопЛиста", Новый Граница(НачалоДня(СтруктураПараметров.ДатаФормированияДопЛиста), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.СписокОрганизаций);

	СтавкиНДС18 = Новый Массив();
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18);
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18_118);

	СтавкиНДС10 = Новый Массив();
	СтавкиНДС10.Добавить(Перечисления.СтавкиНДС.НДС10);
	СтавкиНДС10.Добавить(Перечисления.СтавкиНДС.НДС10_110);

	СтавкаНДС0 = Перечисления.СтавкиНДС.НДС0;
	СтавкаБезНДС = Перечисления.СтавкиНДС.БезНДС;

	Запрос.УстановитьПараметр("СтавкиНДС18",  СтавкиНДС18);
	Запрос.УстановитьПараметр("СтавкиНДС10",  СтавкиНДС10);
	Запрос.УстановитьПараметр("СтавкаНДС0",   СтавкаНДС0);
	Запрос.УстановитьПараметр("СтавкаБезНДС", СтавкаБезНДС);
	 
	ВидыЦенностей_Авансы = Новый Массив;
	ВидыЦенностей_Авансы.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностей_Авансы.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	ВидыЦенностей_Авансы.Добавить(Перечисления.ВидыЦенностей.ВозвратАвансовПолученных);
	ВидыЦенностей_Авансы.Добавить(Перечисления.ВидыЦенностей.АвансыВыданные);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_Авансы", ВидыЦенностей_Авансы);
	
	ИтогЗаПериод = Запрос.Выполнить();
	
	Если НЕ ИтогЗаПериод.Пустой() Тогда
		
		Возврат ИтогЗаПериод.Выгрузить()[0];
		
	Иначе
		
		ИтогЗаПериод = Новый Структура;
		ИтогЗаПериод.Вставить("ВсегоПокупок", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		ИтогЗаПериод.Вставить("СуммаБезНДС10", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		ИтогЗаПериод.Вставить("НДС10", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		ИтогЗаПериод.Вставить("СуммаБезНДС18", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		ИтогЗаПериод.Вставить("НДС18", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		ИтогЗаПериод.Вставить("НДС0", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		ИтогЗаПериод.Вставить("НДС",  ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		ИтогЗаПериод.Вставить("СуммаСовсемБезНДС", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		
		Возврат ИтогЗаПериод;
		
	КонецЕсли;
	
КонецФункции

Процедура ПолучитьСчетаФактурыДокументыКнигаПокупок(Запрос)
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЧПокупатели.СчетФактура
	|ПОМЕСТИТЬ ВТ_СчетаФактурыИзПокупателейПоОтчетуКомиссионера
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах.Покупатели КАК ТЧПокупатели
	|ГДЕ
	|	ТЧПокупатели.Ссылка.Проведен
	|	И НЕ ТЧПокупатели.Ссылка.ПометкаУдаления
	|	И ТЧПокупатели.Ссылка.Организация В(&Организация)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТЧПокупатели.СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСПредъявленный.СчетФактура КАК СчетФактура,
	|	СУММА(НДСПредъявленный.СуммаБезНДС + НДСПредъявленный.НДС) КАК ВсегоПокупокВВалюте
	|ПОМЕСТИТЬ ВТ_ПокупкиПриВвозеИмпорте
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный КАК НДСПредъявленный
	|ГДЕ
	|	НДСПредъявленный.СчетФактура В
	|			(ВЫБРАТЬ
	|				ЗаписиКнигиПокупок.СчетФактура
	|			ИЗ
	|				ЗаписиКнигиПокупок)
	|	И НДСПредъявленный.ВидЦенности В (ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТаможенныйСоюз), ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТаможенныеПлатежи), ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТаможенныеПлатежиОС))
	|	И НДСПредъявленный.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСПредъявленный.СчетФактура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СчетФактураПолученный.Ссылка.Исправление
	|				И СчетФактураПолученный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.НаАванс)
	|			ТОГДА СчетФактураПолученный.Ссылка
	|		ИНАЧЕ СчетФактураПолученный.ДокументОснование
	|	КОНЕЦ КАК СчетФактура,
	|	ВЫБОР
	|		КОГДА СчетФактураПолученный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный)
	|			ТОГДА СчетФактураПолученный.НомерИсходногоДокумента
	|		ИНАЧЕ СчетФактураПолученный.Ссылка.НомерВходящегоДокумента
	|	КОНЕЦ КАК НомерСчетаФактуры,
	|	ВЫБОР
	|		КОГДА СчетФактураПолученный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный)
	|			ТОГДА СчетФактураПолученный.ДатаИсходногоДокумента
	|		ИНАЧЕ СчетФактураПолученный.Ссылка.ДатаВходящегоДокумента
	|	КОНЕЦ КАК ДатаСчетаФактуры,
	|	СчетФактураПолученный.Ссылка КАК СчетФактураДокумент,
	|	ВЫБОР
	|		КОГДА СчетФактураПолученный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.НаАванс)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НаАванс,
	|	ВЫБОР
	|		КОГДА СчетФактураПолученный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.НаАванс)
	|			ТОГДА ЕСТЬNULL(Авансы.СтавкаНДС, НЕОПРЕДЕЛЕНО)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СтавкаНДСАванса,
	|	ВЫБОР
	|		КОГДА СчетФактураПолученный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.НаАванс)
	|			ТОГДА СчетФактураПолученный.Ссылка.ДоговорКонтрагента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДоговорАванса,
	|	СчетФактураПолученный.Ссылка КАК Ссылка,
	|	СчетФактураПолученный.Ссылка.ВидСчетаФактуры КАК ВидСчетаФактуры,
	|	СчетФактураПолученный.Ссылка.Исправление КАК Исправление,
	|	СчетФактураПолученный.Ссылка.Контрагент КАК Контрагент,
	|	ЛОЖЬ КАК ЭтоСчетФактураВыданныйПокупателюПоОтчетуКомиссионера,
	|	ВЫБОР
	|		КОГДА СчетФактураПолученный.Ссылка.СводныйКомиссионный
	|			ТОГДА 0
	|		ИНАЧЕ СчетФактураПолученный.НомерСтроки
	|	КОНЕЦ КАК НомерСтроки,
	|	СчетФактураПолученный.Ссылка.СводныйКорректировочный КАК СводныйКорректировочный,
	|	СчетФактураПолученный.Ссылка.СводныйКомиссионный КАК СводныйКомиссионный
	|ПОМЕСТИТЬ ВТ_СчетаФактурыДокументыПромежуточная
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученный
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.Авансы КАК Авансы
	|		ПО СчетФактураПолученный.Ссылка = Авансы.Ссылка
	|ГДЕ
	|	СчетФактураПолученный.Ссылка.Проведен
	|	И НЕ СчетФактураПолученный.Ссылка.ПометкаУдаления
	|	И СчетФактураПолученный.Ссылка.Организация В(&Организация)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА (СчетФактураВыданный.Ссылка.Исправление
	|				ИЛИ СчетФактураВыданный.ДокументОснование ССЫЛКА Документ.ОтчетКомиссионераОПродажах)
	|				И (СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаАванс)
	|					ИЛИ СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НалоговыйАгент))
	|			ТОГДА СчетФактураВыданный.Ссылка
	|		ИНАЧЕ СчетФактураВыданный.ДокументОснование
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|				ИЛИ СчетФактураВыданный.Ссылка.Исправление
	|			ТОГДА СчетФактураВыданный.Ссылка.НомерИсходногоДокумента
	|		ИНАЧЕ СчетФактураВыданный.Ссылка.Номер
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|				ИЛИ СчетФактураВыданный.Ссылка.Исправление
	|			ТОГДА СчетФактураВыданный.Ссылка.ДатаИсходногоДокумента
	|		ИНАЧЕ СчетФактураВыданный.Ссылка.Дата
	|	КОНЕЦ,
	|	СчетФактураВыданный.Ссылка,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаАванс)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаАванс)
	|			ТОГДА ЕСТЬNULL(Авансы.СтавкаНДС, НЕОПРЕДЕЛЕНО)
	|		КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу)
	|			ТОГДА СчетФактураВыданный.Ссылка.СтавкаНДС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаАванс)
	|				И СчетФактураВыданный.ДокументОснование ССЫЛКА Документ.ОтчетКомиссионераОПродажах
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		КОГДА НЕ(СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаРеализацию)
	|					ИЛИ СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу)
	|					ИЛИ СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный))
	|			ТОГДА СчетФактураВыданный.Ссылка.ДоговорКонтрагента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	СчетФактураВыданный.Ссылка,
	|	СчетФактураВыданный.Ссылка.ВидСчетаФактуры,
	|	СчетФактураВыданный.Ссылка.Исправление,
	|	СчетФактураВыданный.Ссылка.Контрагент,
	|	ВЫБОР
	|		КОГДА НЕ ВТ_СчетаФактурыИзПокупателейПоОтчетуКомиссионера.СчетФактура ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	СчетФактураВыданный.НомерСтроки,
	|	СчетФактураВыданный.Ссылка.СводныйКорректировочный,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданный
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.Авансы КАК Авансы
	|		ПО СчетФактураВыданный.Ссылка = Авансы.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетаФактурыИзПокупателейПоОтчетуКомиссионера КАК ВТ_СчетаФактурыИзПокупателейПоОтчетуКомиссионера
	|		ПО СчетФактураВыданный.Ссылка = ВТ_СчетаФактурыИзПокупателейПоОтчетуКомиссионера.СчетФактура
	|ГДЕ
	|	СчетФактураВыданный.Ссылка.Проведен
	|	И НЕ СчетФактураВыданный.Ссылка.ПометкаУдаления
	|	И СчетФактураВыданный.Ссылка.Организация В(&Организация)
	|	И (СчетФактураВыданный.Ссылка.Продавец = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ИЛИ СчетФактураВыданный.Ссылка.Продавец = СчетФактураВыданный.Ссылка.Контрагент)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ГТДИмпорт.Ссылка,
	|	ГТДИмпорт.НомерГТД,
	|	ГТДИмпорт.Дата,
	|	ГТДИмпорт.Ссылка,
	|	ЛОЖЬ,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	ГТДИмпорт.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.НаПоступление),
	|	ЛОЖЬ,
	|	ГТДИмпорт.Контрагент,
	|	ЛОЖЬ,
	|	0,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ГТДИмпорт КАК ГТДИмпорт
	|ГДЕ
	|	ГТДИмпорт.Проведен
	|	И НЕ ГТДИмпорт.ПометкаУдаления
	|	И ГТДИмпорт.Организация В(&Организация)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозвратТоваровОтПокупателя.Ссылка,
	|	ВозвратТоваровОтПокупателя.НомерРасходногоКассовогоОрдера,
	|	ВозвратТоваровОтПокупателя.ДатаРасходногоКассовогоОрдера,
	|	ВозвратТоваровОтПокупателя.Ссылка,
	|	ЛОЖЬ,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	ВозвратТоваровОтПокупателя.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.НаПоступление),
	|	ЛОЖЬ,
	|	ВозвратТоваровОтПокупателя.Контрагент,
	|	ЛОЖЬ,
	|	0,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|ГДЕ
	|	ВозвратТоваровОтПокупателя.Сделка ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|	И ВозвратТоваровОтПокупателя.Проведен
	|	И НЕ ВозвратТоваровОтПокупателя.ПометкаУдаления
	|	И ВозвратТоваровОтПокупателя.Организация В(&Организация)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаявлениеОВвозеТоваров.Ссылка,
	|	ЗаявлениеОВвозеТоваров.Номер,
	|	ЗаявлениеОВвозеТоваров.Дата,
	|	ЗаявлениеОВвозеТоваров.Ссылка,
	|	ЛОЖЬ,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗаявлениеОВвозеТоваров.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.НаПоступление),
	|	ЛОЖЬ,
	|	ЗаявлениеОВвозеТоваров.Контрагент,
	|	ЛОЖЬ,
	|	0,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК ЗаявлениеОВвозеТоваров
	|ГДЕ
	|	ЗаявлениеОВвозеТоваров.Организация В(&Организация)
	|	И ЗаявлениеОВвозеТоваров.Проведен
	|	И НЕ ЗаявлениеОВвозеТоваров.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура,
	|	Контрагент,
	|	ДоговорАванса,
	|	НаАванс,
	|	СтавкаНДСАванса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(СчетаФактурыДокументы.СчетФактура, ЗаписиКнигиПокупок.СчетФактура) КАК СчетФактура,
	|	ЕСТЬNULL(СчетаФактурыДокументы.ДатаСчетаФактуры, ДанныеПервичныхДокументов.Дата) КАК ДатаСчетаФактуры,
	|	ЕСТЬNULL(СчетаФактурыДокументы.НомерСчетаФактуры, ДанныеПервичныхДокументов.Номер) КАК НомерСчетаФактуры,
	|	ЕСТЬNULL(СчетаФактурыДокументы.СчетФактураДокумент, ЗаписиКнигиПокупок.СчетФактура) КАК СчетФактураДокумент,
	|	ЕСТЬNULL(СчетаФактурыДокументы.ДоговорАванса, НЕОПРЕДЕЛЕНО) КАК ДоговорАванса,
	|	ЕСТЬNULL(СчетаФактурыДокументы.СтавкаНДСАванса, НЕОПРЕДЕЛЕНО) КАК СтавкаНДСАванса,
	|	СчетаФактурыДокументы.СчетФактураДокумент КАК СчетФактураДокументРасшифровка,
	|	СчетаФактурыДокументы.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(СчетаФактурыДокументы.ВидСчетаФактуры, ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.НаПоступление)) КАК ВидСчетаФактуры,
	|	ЕСТЬNULL(СчетаФактурыДокументы.Исправление, ЛОЖЬ) КАК Исправление,
	|	СчетаФактурыДокументы.НомерСтроки,
	|	СчетаФактурыДокументы.СводныйКорректировочный,
	|	СчетаФактурыДокументы.СводныйКомиссионный,
	|	ЕСТЬNULL(СчетаФактурыДокументы.Контрагент, ЗаписиКнигиПокупок.КонтрагентПоСчетуФактуре) КАК Контрагент,
	|	ВЫБОР
	|		КОГДА СчетаФактурыДокументы.СчетФактура ЕСТЬ NULL 
	|			ТОГДА ВЫБОР
	|					КОГДА &КонецПериода >= ДАТАВРЕМЯ(2015, 1, 1)
	|						ТОГДА ""26""
	|					ИНАЧЕ ""01""
	|				КОНЕЦ
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК КодВидаОперации
	|ПОМЕСТИТЬ ТаблицаСчетаФактурыДокументыПредварительная
	|ИЗ
	|	ЗаписиКнигиПокупок КАК ЗаписиКнигиПокупок
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетаФактурыДокументыПромежуточная КАК СчетаФактурыДокументы
	|		ПО (ЗаписиКнигиПокупок.СчетФактура = СчетаФактурыДокументы.СчетФактура
	|				ИЛИ ЗаписиКнигиПокупок.ДокументОплаты = СчетаФактурыДокументы.СчетФактура)
	|			И ЗаписиКнигиПокупок.КонтрагентПоСчетуФактуре = СчетаФактурыДокументы.Контрагент
	|			И ЗаписиКнигиПокупок.ДоговорАванса = СчетаФактурыДокументы.ДоговорАванса
	|			И (НЕ ЗаписиКнигиПокупок.НаАванс
	|				ИЛИ СчетаФактурыДокументы.НаАванс
	|					И ЗаписиКнигиПокупок.СтавкаНДС_Аванс = СчетаФактурыДокументы.СтавкаНДСАванса)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО ЗаписиКнигиПокупок.СчетФактура = ДанныеПервичныхДокументов.Документ
	|			И ЗаписиКнигиПокупок.Организация = ДанныеПервичныхДокументов.Организация
	|ГДЕ
	|	НЕ(ЗаписиКнигиПокупок.СчетФактура ССЫЛКА Документ.ОтчетКомиссионераОПродажах
	|				И СчетаФактурыДокументы.ЭтоСчетФактураВыданныйПокупателюПоОтчетуКомиссионера)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура,
	|	ДоговорАванса,
	|	ВидСчетаФактуры,
	|	Исправление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСчетаФактурыДокументы.Контрагент КАК СчетФактураДокументКонтрагент,
	|	ТаблицаСчетаФактурыДокументы.ДоговорАванса КАК ДоговорАванса,
	|	ТаблицаСчетаФактурыДокументы.ВидСчетаФактуры КАК ВидСчетаФактуры,
	|	ТаблицаСчетаФактурыДокументы.Исправление КАК Исправление,
	|	ТаблицаСчетаФактурыДокументы.СчетФактура КАК СчетФактура,
	|	МАКСИМУМ(ТаблицаСчетаФактурыДокументы.СчетФактураДокумент) КАК СчетФактураДокумент,
	|	ТаблицаСчетаФактурыДокументы.СводныйКорректировочный,
	|	ТаблицаСчетаФактурыДокументы.СводныйКомиссионный,
	|	ТаблицаСчетаФактурыДокументы.КодВидаОперации
	|ПОМЕСТИТЬ ВТ_ОбъединениеСФ
	|ИЗ
	|	ТаблицаСчетаФактурыДокументыПредварительная КАК ТаблицаСчетаФактурыДокументы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСчетаФактурыДокументы.СчетФактура,
	|	ТаблицаСчетаФактурыДокументы.Контрагент,
	|	ТаблицаСчетаФактурыДокументы.ДоговорАванса,
	|	ТаблицаСчетаФактурыДокументы.ВидСчетаФактуры,
	|	ТаблицаСчетаФактурыДокументы.Исправление,
	|	ТаблицаСчетаФактурыДокументы.СводныйКорректировочный,
	|	ТаблицаСчетаФактурыДокументы.СводныйКомиссионный,
	|	ТаблицаСчетаФактурыДокументы.КодВидаОперации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактураДокументКонтрагент,
	|	ДоговорАванса,
	|	ВидСчетаФактуры,
	|	Исправление,
	|	СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСчетаФактурыДокументыПредварительная.СчетФактура,
	|	ТаблицаСчетаФактурыДокументыПредварительная.ДатаСчетаФактуры,
	|	ТаблицаСчетаФактурыДокументыПредварительная.НомерСчетаФактуры,
	|	ВТ_ОбъединениеСФ.СчетФактураДокумент,
	|	ВТ_ОбъединениеСФ.СчетФактураДокументКонтрагент,
	|	ТаблицаСчетаФактурыДокументыПредварительная.ДоговорАванса,
	|	ТаблицаСчетаФактурыДокументыПредварительная.СтавкаНДСАванса,
	|	ТаблицаСчетаФактурыДокументыПредварительная.СчетФактураДокументРасшифровка,
	|	ТаблицаСчетаФактурыДокументыПредварительная.Ссылка КАК Ссылка,
	|	ТаблицаСчетаФактурыДокументыПредварительная.НомерСтроки,
	|	ТаблицаСчетаФактурыДокументыПредварительная.СводныйКорректировочный,
	|	ТаблицаСчетаФактурыДокументыПредварительная.СводныйКомиссионный,
	|	ТаблицаСчетаФактурыДокументыПредварительная.КодВидаОперации
	|ПОМЕСТИТЬ ВТ_ТаблицаСчетаФактурыДокументы
	|ИЗ
	|	ТаблицаСчетаФактурыДокументыПредварительная КАК ТаблицаСчетаФактурыДокументыПредварительная
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОбъединениеСФ КАК ВТ_ОбъединениеСФ
	|		ПО ТаблицаСчетаФактурыДокументыПредварительная.ДоговорАванса = ВТ_ОбъединениеСФ.ДоговорАванса
	|			И ТаблицаСчетаФактурыДокументыПредварительная.ВидСчетаФактуры = ВТ_ОбъединениеСФ.ВидСчетаФактуры
	|			И ТаблицаСчетаФактурыДокументыПредварительная.Исправление = ВТ_ОбъединениеСФ.Исправление
	|			И ТаблицаСчетаФактурыДокументыПредварительная.СчетФактура = ВТ_ОбъединениеСФ.СчетФактура
	|			И ТаблицаСчетаФактурыДокументыПредварительная.Контрагент = ВТ_ОбъединениеСФ.СчетФактураДокументКонтрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЖурналУчетаСчетовФактур.Регистратор,
	|	ЖурналУчетаСчетовФактур.СчетФактура,
	|	ЖурналУчетаСчетовФактур.НомерСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.ДатаСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.НомерКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.ДатаКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.НомерИсправления КАК НомерИсправления,
	|	ЖурналУчетаСчетовФактур.ДатаИсправления КАК ДатаИсправления,
	|	ЖурналУчетаСчетовФактур.НомерИсправленияКорректировочногоСчетаФактуры КАК НомерИсправленияКорректировки,
	|	ЖурналУчетаСчетовФактур.ДатаИсправленияКорректировочногоСчетаФактуры КАК ДатаИсправленияКорректировки,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактур.Продавец <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ЖурналУчетаСчетовФактур.Продавец
	|		КОГДА ЖурналУчетаСчетовФактур.Контрагент <> ЖурналУчетаСчетовФактур.Организация
	|			ТОГДА ЖурналУчетаСчетовФактур.Контрагент
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ПродавецДляПечати,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактур.Продавец <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА """"
	|		КОГДА ЖурналУчетаСчетовФактур.Контрагент <> ЖурналУчетаСчетовФактур.Организация
	|			ТОГДА ЖурналУчетаСчетовФактур.КППКонтрагента
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК КПППродавцаДляПечати,
	|	ВЫБОР
	|		КОГДА &ПравилаПостановления735
	|				И ЖурналУчетаСчетовФактур.Продавец <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				И ЖурналУчетаСчетовФактур.Контрагент <> ЖурналУчетаСчетовФактур.Организация
	|			ТОГДА ЖурналУчетаСчетовФактур.Контрагент
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	КОНЕЦ КАК ПосредникСсылка,
	|	ЖурналУчетаСчетовФактур.НомерСтроки,
	|	ЖурналУчетаСчетовФактур.Валюта,
	|	ЖурналУчетаСчетовФактур.Валюта.НаименованиеПолное,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактур.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|			ТОГДА ВЫБОР
	|					КОГДА ЖурналУчетаСчетовФактур.СчетФактура.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный)
	|						ТОГДА ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУвеличение
	|					ИНАЧЕ ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуре
	|				КОНЕЦ
	|		КОГДА ЖурналУчетаСчетовФактур.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|			ТОГДА ВЫБОР
	|					КОГДА ЖурналУчетаСчетовФактур.СчетФактура.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|						ТОГДА ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУменьшение
	|					ИНАЧЕ ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуре
	|				КОНЕЦ
	|		ИНАЧЕ ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуре
	|	КОНЕЦ КАК ВсегоПокупокВВалюте,
	|	ЖурналУчетаСчетовФактур.Валюта.Код,
	|	ЖурналУчетаСчетовФактур.КодВидаОперации
	|ПОМЕСТИТЬ ВТ_РегистрацияСчетовФактур
	|ИЗ
	|	РегистрСведений.ЖурналУчетаСчетовФактур КАК ЖурналУчетаСчетовФактур
	|ГДЕ
	|	ЖурналУчетаСчетовФактур.СчетФактура В
	|			(ВЫБРАТЬ
	|				ВТ_ТаблицаСчетаФактурыДокументы.СчетФактураДокумент
	|			ИЗ
	|				ВТ_ТаблицаСчетаФактурыДокументы)
	|	И ЖурналУчетаСчетовФактур.Организация В(&Организация)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаСчетаФактурыДокументы.СчетФактура КАК СчетФактура,
	|	ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.НомерСчетаФактуры, ВТ_ТаблицаСчетаФактурыДокументы.НомерСчетаФактуры) КАК НомерСчетаФактуры,
	|	ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.ДатаСчетаФактуры, ВТ_ТаблицаСчетаФактурыДокументы.ДатаСчетаФактуры) КАК ДатаСчетаФактуры,
	|	ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.СчетФактура, ВТ_ТаблицаСчетаФактурыДокументы.СчетФактураДокумент) КАК СчетФактураДокумент,
	|	ВТ_ТаблицаСчетаФактурыДокументы.НомерСчетаФактуры КАК НомерСчетаФактурыСортировка,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.ДатаИсправленияКорректировки, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ВТ_РегистрацияСчетовФактур.ДатаИсправленияКорректировки
	|		КОГДА ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.ДатаКорректировочногоСчетаФактуры, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ВТ_РегистрацияСчетовФактур.ДатаКорректировочногоСчетаФактуры
	|		КОГДА ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.ДатаИсправления, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ВТ_РегистрацияСчетовФактур.ДатаИсправления
	|		ИНАЧЕ ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.ДатаСчетаФактуры, ВТ_ТаблицаСчетаФактурыДокументы.ДатаСчетаФактуры)
	|	КОНЕЦ КАК ДатаСчетаФактурыСортировка,
	|	ВТ_ТаблицаСчетаФактурыДокументы.ДоговорАванса КАК ДоговорАванса,
	|	ВТ_ТаблицаСчетаФактурыДокументы.СтавкаНДСАванса КАК СтавкаНДСАванса,
	|	ВТ_ТаблицаСчетаФактурыДокументы.СчетФактураДокументРасшифровка КАК СчетФактураДокументРасшифровка,
	|	ВТ_РегистрацияСчетовФактур.НомерКорректировочногоСчетаФактуры КАК НомерКорректировки,
	|	ВТ_РегистрацияСчетовФактур.ДатаКорректировочногоСчетаФактуры КАК ДатаКорректировки,
	|	ВТ_РегистрацияСчетовФактур.НомерИсправления КАК НомерИсправления,
	|	ВТ_РегистрацияСчетовФактур.ДатаИсправления КАК ДатаИсправления,
	|	ВТ_РегистрацияСчетовФактур.НомерИсправленияКорректировки КАК НомерИсправленияКорректировки,
	|	ВТ_РегистрацияСчетовФактур.ДатаИсправленияКорректировки КАК ДатаИсправленияКорректировки,
	|	ВЫБОР
	|		КОГДА ВТ_ТаблицаСчетаФактурыДокументы.Ссылка ССЫЛКА Документ.СчетФактураВыданный
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_РегистрацияСчетовФактур.СчетФактура ЕСТЬ NULL 
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		КОГДА ВТ_ТаблицаСчетаФактурыДокументы.Ссылка ССЫЛКА Документ.ЗаявлениеОВвозеТоваров
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОбрабатыватьНомерДокумента,
	|	ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.ПродавецДляПечати, ВТ_ТаблицаСчетаФактурыДокументы.СчетФактураДокументКонтрагент) КАК ПродавецДляПечати,
	|	ВТ_РегистрацияСчетовФактур.КПППродавцаДляПечати КАК КПППродавцаДляПечати,
	|	ВТ_ТаблицаСчетаФактурыДокументы.СводныйКорректировочный,
	|	ВТ_ТаблицаСчетаФактурыДокументы.СчетФактураДокументКонтрагент КАК КонтрагентПоСчетуФактуре,
	|	ВТ_РегистрацияСчетовФактур.Валюта,
	|	ВТ_РегистрацияСчетовФактур.ВалютаНаименованиеПолное,
	|	ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.ВсегоПокупокВВалюте, ПокупкиПриВвозеИмпорте.ВсегоПокупокВВалюте) КАК ВсегоПокупокВВалюте,
	|	ВТ_РегистрацияСчетовФактур.ВалютаКод,
	|	ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.КодВидаОперации, ВТ_ТаблицаСчетаФактурыДокументы.КодВидаОперации) КАК КодВидаОперации,
	|	ВТ_РегистрацияСчетовФактур.ПосредникСсылка
	|ПОМЕСТИТЬ ТаблицаСчетаФактурыДокументы
	|ИЗ
	|	ВТ_ТаблицаСчетаФактурыДокументы КАК ВТ_ТаблицаСчетаФактурыДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РегистрацияСчетовФактур КАК ВТ_РегистрацияСчетовФактур
	|		ПО ВТ_ТаблицаСчетаФактурыДокументы.Ссылка = ВТ_РегистрацияСчетовФактур.СчетФактура
	|			И (ВЫБОР
	|				КОГДА ВТ_ТаблицаСчетаФактурыДокументы.СводныйКорректировочный
	|						ИЛИ ВТ_ТаблицаСчетаФактурыДокументы.СводныйКомиссионный
	|					ТОГДА ВТ_ТаблицаСчетаФактурыДокументы.НомерСтроки = ВТ_РегистрацияСчетовФактур.НомерСтроки
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПокупкиПриВвозеИмпорте КАК ПокупкиПриВвозеИмпорте
	|		ПО ВТ_ТаблицаСчетаФактурыДокументы.Ссылка = ПокупкиПриВвозеИмпорте.СчетФактура";
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Возвращает структуру с полями "ТекущийПериод" и "КорректируемыйПериод",
// принимающие значение булевого типа - требуется ли формировать доп. листы
Функция ПроверитьНаличиеДопЛистовКнигиПокупок(СтруктураПараметров) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураПараметров.Вставить("ТекущийПериод", Ложь);
	СтруктураПараметров.Вставить("КорректируемыйПериод", Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	1 КАК Порядок,
	|	НДСЗаписиКнигиПокупокОбороты.СчетФактура,
	|	НДСЗаписиКнигиПокупокОбороты.Поставщик,
	|	НДСЗаписиКнигиПокупокОбороты.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СУММА(НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПокупокОбороты.НДСОборот), 0) <> 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьДопЛисты,
	|	НДСЗаписиКнигиПокупокОбороты.КорректируемыйПериод
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			День,
	|			Организация В (&Организация)
	|				И ЗаписьДополнительногоЛиста = ИСТИНА) КАК НДСЗаписиКнигиПокупокОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСЗаписиКнигиПокупокОбороты.СчетФактура,
	|	НДСЗаписиКнигиПокупокОбороты.Поставщик,
	|	НДСЗаписиКнигиПокупокОбороты.СтавкаНДС,
	|	НДСЗаписиКнигиПокупокОбороты.КорректируемыйПериод,
	|	НДСЗаписиКнигиПокупокОбороты.Период
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	НДСЗаписиКнигиПокупокОбороты.СчетФактура,
	|	НДСЗаписиКнигиПокупокОбороты.Поставщик,
	|	НДСЗаписиКнигиПокупокОбороты.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СУММА(НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПокупокОбороты.НДСОборот), 0) <> 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	&НачалоПериода
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	|			&НачалоПериода,
	|			,
	|			День,
	|			Организация В (&Организация)
	|				И ЗаписьДополнительногоЛиста = ИСТИНА
	|				И КорректируемыйПериод >= &НачалоПериода
	|				И КорректируемыйПериод <= &КонецПериода) КАК НДСЗаписиКнигиПокупокОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСЗаписиКнигиПокупокОбороты.СчетФактура,
	|	НДСЗаписиКнигиПокупокОбороты.Поставщик,
	|	НДСЗаписиКнигиПокупокОбороты.СтавкаНДС,
	|	НДСЗаписиКнигиПокупокОбороты.Период";
				   
	Запрос.УстановитьПараметр("НачалоПериода", СтруктураПараметров.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(СтруктураПараметров.КонецПериода));
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.СписокОрганизаций);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат СтруктураПараметров;
	КонецЕсли;
	
	Результат = Результат.Выгрузить();
	
	Для Каждого СтрокаРезультата Из Результат Цикл
		Если СтрокаРезультата.Порядок = 1 И СтрокаРезультата.ЕстьДопЛисты Тогда 
			СтруктураПараметров.КорректируемыйПериод = Истина;
		ИначеЕсли СтрокаРезультата.ЕстьДопЛисты Тогда
			СтруктураПараметров.ТекущийПериод = Истина;
		КонецЕсли;
		Если СтруктураПараметров.КорректируемыйПериод И СтруктураПараметров.ТекущийПериод Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Книга продаж, дополнительные листы книги продаж

Функция ПроверитьНаличиеДопЛистовКнигиПродаж(СтруктураПараметров) Экспорт
	
	СтруктураПараметров.Вставить("ТекущийПериод", Ложь);
	СтруктураПараметров.Вставить("КорректируемыйПериод", Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	1 КАК Порядок,
	|	НДСЗаписиКнигиПродажОбороты.СчетФактура,
	|	НДСЗаписиКнигиПродажОбороты.Покупатель,
	|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СУММА(НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот), 0) <> 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьДопЛисты,
	|	НДСЗаписиКнигиПродажОбороты.КорректируемыйПериод,
	|	НДСЗаписиКнигиПродажОбороты.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			День,
	|			Организация В (&Организация)
	|				И (СтавкаНДС <> ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|					ИЛИ &ОтражатьРеализацииБезНДС)
	|				И ЗаписьДополнительногоЛиста = ИСТИНА) КАК НДСЗаписиКнигиПродажОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСЗаписиКнигиПродажОбороты.СчетФактура,
	|	НДСЗаписиКнигиПродажОбороты.Покупатель,
	|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС,
	|	НДСЗаписиКнигиПродажОбороты.КорректируемыйПериод,
	|	НДСЗаписиКнигиПродажОбороты.ИсправленныйСчетФактура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	НДСЗаписиКнигиПродажОбороты.СчетФактура,
	|	НДСЗаписиКнигиПродажОбороты.Покупатель,
	|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СУММА(НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот), 0) <> 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	&НачалоПериода,
	|	НДСЗаписиКнигиПродажОбороты.ИсправленныйСчетФактура
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|			&НачалоПериода,
	|			,
	|			День,
	|			Организация В (&Организация)
	|				И (СтавкаНДС <> ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|					ИЛИ &ОтражатьРеализацииБезНДС)
	|				И ЗаписьДополнительногоЛиста = ИСТИНА
	|				И КорректируемыйПериод >= &НачалоПериода
	|				И КорректируемыйПериод <= &КонецПериода) КАК НДСЗаписиКнигиПродажОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСЗаписиКнигиПродажОбороты.СчетФактура,
	|	НДСЗаписиКнигиПродажОбороты.Покупатель,
	|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС,
	|	НДСЗаписиКнигиПродажОбороты.ИсправленныйСчетФактура";
	
	Запрос.УстановитьПараметр("НачалоПериода", СтруктураПараметров.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(СтруктураПараметров.КонецПериода));
	Запрос.УстановитьПараметр("Организация"	, СтруктураПараметров.СписокОрганизаций);
	
	ДатаПроверкиПараметровУчета = КонецДня(СтруктураПараметров.КонецПериода);
		
	ПрименяетсяОсвобождениеОтУплатыНДС = 
		УчетнаяПолитика.ПрименяетсяОсвобождениеОтУплатыНДС(СтруктураПараметров.Организация, ДатаПроверкиПараметровУчета);
		
	ОтражатьРеализацииБезНДС = ДатаПроверкиПараметровУчета < '20141001' ИЛИ ПрименяетсяОсвобождениеОтУплатыНДС;
	Запрос.УстановитьПараметр("ОтражатьРеализацииБезНДС", ОтражатьРеализацииБезНДС);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат СтруктураПараметров;
	КонецЕсли;
	
	Результат = Результат.Выгрузить();
	
	Для Каждого СтрокаРезультата Из Результат Цикл
		Если СтрокаРезультата.Порядок = 1 И СтрокаРезультата.ЕстьДопЛисты Тогда 
			СтруктураПараметров.КорректируемыйПериод = Истина;
		ИначеЕсли СтрокаРезультата.ЕстьДопЛисты Тогда
			СтруктураПараметров.ТекущийПериод = Истина;
		КонецЕсли;
		Если СтруктураПараметров.КорректируемыйПериод И СтруктураПараметров.ТекущийПериод Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураПараметров;

КонецФункции

Функция ПолучитьЗаписиДополнительныхЛистовКнигиПродаж(СписокСчетовФактур, СтруктураПараметров) Экспорт
	
	// Создаем общий запрос
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	УстановитьПараметрыЗапросаКнигиПродаж(Запрос, СтруктураПараметров);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.Регистратор ССЫЛКА Документ.КорректировкаПоступления
	|			ТОГДА НДСЗаписиКнигиПродаж.Организация
	|		КОГДА НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	|				ИЛИ НДСЗаписиКнигиПродаж.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыВыданные)
	|					И НЕ &ВыводитьПродавцовПоАвансам
	|			ТОГДА НДСЗаписиКнигиПродаж.Организация
	|		ИНАЧЕ НДСЗаписиКнигиПродаж.Покупатель
	|	КОНЕЦ КАК Контрагент,
	|	НДСЗаписиКнигиПродаж.Покупатель КАК КонтрагентПоСчетуФактуре,
	|	ВЫБОР
	|		КОГДА НЕ НДСЗаписиКнигиПродаж.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
	|			ТОГДА НДСЗаписиКнигиПродаж.ИсправленныйСчетФактура
	|		ИНАЧЕ НДСЗаписиКнигиПродаж.СчетФактура
	|	КОНЕЦ КАК СчетФактура,
	|	НДСЗаписиКнигиПродаж.ДатаОплаты КАК ДатаОплаты,
	|	НДСЗаписиКнигиПродаж.ДокументОплаты КАК ДокументОплаты,
	|	НДСЗаписиКнигиПродаж.Событие КАК Событие,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДанныеПервичныхДокументовСчетФактура.ДатаРегистратора
	|		ИНАЧЕ НДСЗаписиКнигиПродаж.ДатаСобытия
	|	КОНЕЦ КАК ДатаСобытия,
	|	СУММА(НДСЗаписиКнигиПродаж.СуммаБезНДС + НДСЗаписиКнигиПродаж.НДС) КАК ВсегоПродаж,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС В (&СтавкиНДС18)
	|				ТОГДА НДСЗаписиКнигиПродаж.СуммаБезНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБезНДС18,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС В (&СтавкиНДС18)
	|				ТОГДА НДСЗаписиКнигиПродаж.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДС18,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС В (&СтавкиНДС10)
	|				ТОГДА НДСЗаписиКнигиПродаж.СуммаБезНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБезНДС10,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС В (&СтавкиНДС10)
	|				ТОГДА НДСЗаписиКнигиПродаж.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДС10,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС = &СтавкаНДС0
	|				ТОГДА НДСЗаписиКнигиПродаж.СуммаБезНДС + НДСЗаписиКнигиПродаж.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДС0,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС = &СтавкаБезНДС
	|				ТОГДА НДСЗаписиКнигиПродаж.СуммаБезНДС + НДСЗаписиКнигиПродаж.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаСовсемБезНДС,
	|	НДСЗаписиКнигиПродаж.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|			ТОГДА ДанныеПервичныхДокументовСчетФактураВыданныйДокументОснование.ДатаРегистратора
	|		ИНАЧЕ ДанныеПервичныхДокументовСчетФактура.ДатаРегистратора
	|	КОНЕЦ КАК ДатаОприходования,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_Аванс)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НаАванс,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_СуммоваяРазница)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НаСуммовуюРазницу,
	|	ВЫБОР
	|		КОГДА (НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_Аванс)
	|				ИЛИ НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_СуммоваяРазница))
	|				И НЕ НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ОтражениеНачисленияНДС
	|				И НЕ НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ОтражениеНДСКВычету
	|			ТОГДА НДСЗаписиКнигиПродаж.СтавкаНДС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СтавкаНДС_Аванс,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ОтражениеНачисленияНДС
	|						И НЕ НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ОтражениеНДСКВычету
	|					ТОГДА НДСЗаписиКнигиПродаж.ДоговорКонтрагента
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ
	|	КОНЕЦ КАК ДоговорАванса,
	|	НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПродаж.Период, ДЕНЬ) КАК Период,
	|	НДСЗаписиКнигиПродаж.КорректируемыйПериод КАК КорректируемыйПериод,
	|	НДСЗаписиКнигиПродаж.СторнирующаяЗаписьДопЛиста КАК СторнирующаяЗаписьДопЛиста,
	|	НДСЗаписиКнигиПродаж.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	ВЫБОР
	|		КОГДА (НДСЗаписиКнигиПродаж.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	|				ИЛИ НДСЗаписиКнигиПродаж.Регистратор ССЫЛКА Документ.КорректировкаПоступления)
	|				И НДСЗаписиКнигиПродаж.СуммаБезНДС + НДСЗаписиКнигиПродаж.НДС < 0
	|			ТОГДА ИСТИНА
	|		КОГДА НДСЗаписиКнигиПродаж.Регистратор ССЫЛКА Документ.СчетФактураВыданный
	|				И НДСЗаписиКнигиПродаж.СуммаБезНДС + НДСЗаписиКнигиПродаж.НДС < 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Исправление,
	|	НДСЗаписиКнигиПродаж.НомерДокументаОплаты,
	|	НДСЗаписиКнигиПродаж.ДатаДокументаОплаты,
	|	НДСЗаписиКнигиПродаж.КодВидаОперации
	|ПОМЕСТИТЬ ЗаписиКнигиПродаж
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументовСчетФактура
	|		ПО НДСЗаписиКнигиПродаж.СчетФактура = ДанныеПервичныхДокументовСчетФактура.Документ
	|			И НДСЗаписиКнигиПродаж.Организация = ДанныеПервичныхДокументовСчетФактура.Организация
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|		ПО НДСЗаписиКнигиПродаж.СчетФактура = СчетФактураВыданный.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументовСчетФактураВыданныйДокументОснование
	|		ПО СчетФактураВыданный.ДокументОснование = ДанныеПервичныхДокументовСчетФактураВыданныйДокументОснование.Документ
	|			И СчетФактураВыданный.Организация = ДанныеПервичныхДокументовСчетФактураВыданныйДокументОснование.Организация
	|
	|ГДЕ
	|	НДСЗаписиКнигиПродаж.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НДСЗаписиКнигиПродаж.Организация В(&Организация)
	|	И НДСЗаписиКнигиПродаж.ЗаписьДополнительногоЛиста = ИСТИНА
	|	И НДСЗаписиКнигиПродаж.Активность
	|	И (НДСЗаписиКнигиПродаж.СтавкаНДС <> &СтавкаБезНДС
	|			ИЛИ &ОтражатьРеализацииБезНДС
	|			ИЛИ НДСЗаписиКнигиПродаж.КорректируемыйПериод <= ДАТАВРЕМЯ(2014, 10, 1))
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСЗаписиКнигиПродаж.ДатаОплаты,
	|	НДСЗаписиКнигиПродаж.ДокументОплаты,
	|	НДСЗаписиКнигиПродаж.Событие,
	|	НДСЗаписиКнигиПродаж.Организация,
	|	НДСЗаписиКнигиПродаж.КорректируемыйПериод,
	|	НДСЗаписиКнигиПродаж.СторнирующаяЗаписьДопЛиста,
	|	НДСЗаписиКнигиПродаж.ИсправленныйСчетФактура,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДанныеПервичныхДокументовСчетФактура.ДатаРегистратора
	|		ИНАЧЕ НДСЗаписиКнигиПродаж.ДатаСобытия
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|			ТОГДА ДанныеПервичныхДокументовСчетФактураВыданныйДокументОснование.ДатаРегистратора
	|		ИНАЧЕ ДанныеПервичныхДокументовСчетФактура.ДатаРегистратора
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_Аванс)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_СуммоваяРазница)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_Аванс)
	|				ИЛИ НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_СуммоваяРазница))
	|				И НЕ НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ОтражениеНачисленияНДС
	|				И НЕ НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ОтражениеНДСКВычету
	|			ТОГДА НДСЗаписиКнигиПродаж.СтавкаНДС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ОтражениеНачисленияНДС
	|						И НЕ НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ОтражениеНДСКВычету
	|					ТОГДА НДСЗаписиКнигиПродаж.ДоговорКонтрагента
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ НДСЗаписиКнигиПродаж.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
	|			ТОГДА НДСЗаписиКнигиПродаж.ИсправленныйСчетФактура
	|		ИНАЧЕ НДСЗаписиКнигиПродаж.СчетФактура
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НДСЗаписиКнигиПродаж.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	|				ИЛИ НДСЗаписиКнигиПродаж.Регистратор ССЫЛКА Документ.КорректировкаПоступления)
	|				И НДСЗаписиКнигиПродаж.СуммаБезНДС + НДСЗаписиКнигиПродаж.НДС < 0
	|			ТОГДА ИСТИНА
	|		КОГДА НДСЗаписиКнигиПродаж.Регистратор ССЫЛКА Документ.СчетФактураВыданный
	|				И НДСЗаписиКнигиПродаж.СуммаБезНДС + НДСЗаписиКнигиПродаж.НДС < 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПродаж.Период, ДЕНЬ),
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.Регистратор ССЫЛКА Документ.КорректировкаПоступления
	|			ТОГДА НДСЗаписиКнигиПродаж.Организация
	|		КОГДА НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	|				ИЛИ НДСЗаписиКнигиПродаж.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыВыданные)
	|					И НЕ &ВыводитьПродавцовПоАвансам
	|			ТОГДА НДСЗаписиКнигиПродаж.Организация
	|		ИНАЧЕ НДСЗаписиКнигиПродаж.Покупатель
	|	КОНЕЦ,
	|	НДСЗаписиКнигиПродаж.Покупатель,
	|	НДСЗаписиКнигиПродаж.НомерДокументаОплаты,
	|	НДСЗаписиКнигиПродаж.ДатаДокументаОплаты,
	|	НДСЗаписиКнигиПродаж.КодВидаОперации";
	
	Если СтруктураПараметров.ЗаполнениеДокумента
		ИЛИ СтруктураПараметров.ЗаполнениеДекларации Тогда
								
		// Учитывается как корректируемый период, так и дата оформления дополнительного листа
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаписьДополнительногоЛиста = ИСТИНА", 
								"ЗаписьДополнительногоЛиста = ИСТИНА 
								|И НДСЗаписиКнигиПродаж.КорректируемыйПериод >= &НачалоНалоговогоПериода 
								|И НДСЗаписиКнигиПродаж.КорректируемыйПериод <= &КонецНалоговогоПериода");
								
	ИначеЕсли СтруктураПараметров.ДополнительныеЛистыЗаТекущийПериод Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Период МЕЖДУ &НачалоПериода И &КонецПериода", "Период >= &НачалоПериода");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаписьДополнительногоЛиста = ИСТИНА", 
								"ЗаписьДополнительногоЛиста = ИСТИНА 
								|И НДСЗаписиКнигиПродаж.КорректируемыйПериод >= &НачалоПериода 
								|И НДСЗаписиКнигиПродаж.КорректируемыйПериод <= &КонецПериода");

	КонецЕсли;
		
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаписиКнигиПродаж.СчетФактура КАК СчетФактура
	|ИЗ
	|	ЗаписиКнигиПродаж КАК ЗаписиКнигиПродаж";
	СписокСчетовФактур = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СчетФактура");
	
	ПолучитьСчетаФактурыДокументыКнигаПродаж(Запрос);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаписиКнигиПродаж.Организация КАК Организация,
	|	НАЧАЛОПЕРИОДА(ЗаписиКнигиПродаж.КорректируемыйПериод, КВАРТАЛ) КАК НалоговыйПериод,
	|	КОНЕЦПЕРИОДА(ЗаписиКнигиПродаж.КорректируемыйПериод, КВАРТАЛ) КАК КонецНалоговогоПериода,
	|	ЗаписиКнигиПродаж.НаАванс КАК НаАванс,
	|	ЗаписиКнигиПродаж.НаСуммовуюРазницу КАК НаСуммовуюРазницу,
	|	ЗаписиКнигиПродаж.СчетФактура КАК СчетФактура,
	|	ЗаписиКнигиПродаж.СчетФактура.Дата КАК СчетФактураДата,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|				ТОГДА ЗаписиКнигиПродаж.СчетФактура
	|			КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|				ТОГДА ЗаписиКнигиПродаж.СчетФактура
	|			ИНАЧЕ ТаблицаСчетаФактурыДокументы.СчетФактураДокумент
	|		КОНЕЦ, ЗаписиКнигиПродаж.СчетФактура) КАК СчетФактураДокумент,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НЕ ТаблицаСчетаФактурыДокументы.НомерСчетаФактуры ЕСТЬ NULL 
	|				ТОГДА ТаблицаСчетаФактурыДокументы.НомерСчетаФактуры
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|						ТОГДА ВЫБОР
	|								КОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).Исправление
	|										ИЛИ ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|									ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).НомерИсходногоДокумента
	|								ИНАЧЕ ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).Номер
	|							КОНЕЦ
	|					КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|						ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураПолученный).НомерВходящегоДокумента
	|					ИНАЧЕ ТаблицаСчетаФактурыДокументы.НомерСчетаФактуры
	|				КОНЕЦ
	|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК НомерСчетаФактуры,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НЕ ТаблицаСчетаФактурыДокументы.ДатаСчетаФактуры ЕСТЬ NULL 
	|				ТОГДА ТаблицаСчетаФактурыДокументы.ДатаСчетаФактуры
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|						ТОГДА ВЫБОР
	|								КОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).Исправление
	|										ИЛИ ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|									ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).ДатаИсходногоДокумента
	|								ИНАЧЕ ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).Дата
	|							КОНЕЦ
	|					КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|						ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураПолученный).ДатаВходящегоДокумента
	|					ИНАЧЕ ТаблицаСчетаФактурыДокументы.ДатаСчетаФактуры
	|				КОНЕЦ
	|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК ДатаСчетаФактуры,
	|	ЕСТЬNULL(НАЧАЛОПЕРИОДА(ВЫБОР
	|				КОГДА НЕ ТаблицаСчетаФактурыДокументы.ДатаСчетаФактурыСортировка ЕСТЬ NULL 
	|					ТОГДА ТаблицаСчетаФактурыДокументы.ДатаСчетаФактурыСортировка
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|							ТОГДА ВЫБОР
	|									КОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).Исправление
	|											ИЛИ ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|										ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).ДатаИсходногоДокумента
	|									ИНАЧЕ ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).Дата
	|								КОНЕЦ
	|						КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|							ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураПолученный).ДатаВходящегоДокумента
	|						КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ВосстановлениеНДС
	|							ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.ВосстановлениеНДС).Дата
	|						ИНАЧЕ ТаблицаСчетаФактурыДокументы.ДатаСчетаФактуры
	|					КОНЕЦ
	|			КОНЕЦ, ДЕНЬ), НЕОПРЕДЕЛЕНО) КАК ДатаСчетаФактурыСортировка,
	|	ЗаписиКнигиПродаж.СтавкаНДС_Аванс КАК СтавкаНДС_Аванс,
	|	ЗаписиКнигиПродаж.ДоговорАванса КАК ДоговорАванса,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПродаж.Контрагент ССЫЛКА Справочник.Организации
	|			ТОГДА ЗаписиКнигиПродаж.Контрагент
	|		КОГДА НЕ ТаблицаСчетаФактурыДокументы.ПродавецДляПечати ЕСТЬ NULL 
	|			ТОГДА ТаблицаСчетаФактурыДокументы.ПродавецДляПечати
	|		ИНАЧЕ ЗаписиКнигиПродаж.Контрагент
	|	КОНЕЦ КАК КонтрагентСсылка,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|					И ЗаписиКнигиПродаж.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				ИЛИ ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ПриходныйКассовыйОрдер
	|					И ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.ПриходныйКассовыйОрдер).ВидОперации = &ПКО_РозничнаяВыручка
	|				ИЛИ ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ОплатаПлатежнойКартой
	|					И ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.ОплатаПлатежнойКартой).ВидОперации = &ОПК_РозничнаяВыручка
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РозничнаяПродажа,
	|	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.КППКонтрагента, """") КАК КППКонтрагента,
	|	ЗаписиКнигиПродаж.ДатаОплаты КАК ДатаОплаты,
	|	ЗаписиКнигиПродаж.ДокументОплаты КАК ДокументОплаты,
	|	ЗаписиКнигиПродаж.Событие КАК Событие,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПродаж.КорректируемыйПериод >= ДАТАВРЕМЯ(2014, 10, 1)
	|				И ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.Валюта, &ВалютаРегУчета) = &ВалютаРегУчета
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаСчетаФактурыДокументы.ВсегоПродажВВалюте ЕСТЬ NULL 
	|							И ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|						ТОГДА ВЫБОР
	|								КОГДА ЗаписиКнигиПродаж.ВсегоПродаж < 0
	|									ТОГДА -ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураПолученный).СуммаДокумента
	|								ИНАЧЕ ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураПолученный).СуммаДокумента
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ЗаписиКнигиПродаж.ВсегоПродаж < 0
	|								ТОГДА -ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.ВсегоПродажВВалюте, -ЗаписиКнигиПродаж.ВсегоПродаж)
	|							ИНАЧЕ ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.ВсегоПродажВВалюте, ЗаписиКнигиПродаж.ВсегоПродаж)
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ ЗаписиКнигиПродаж.ВсегоПродаж
	|	КОНЕЦ КАК ВсегоПродаж,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПродаж.НаАванс
	|				ИЛИ ЗаписиКнигиПродаж.НаСуммовуюРазницу
	|			ТОГДА 0
	|		ИНАЧЕ ЗаписиКнигиПродаж.СуммаБезНДС18
	|	КОНЕЦ КАК СуммаБезНДС18,
	|	ЗаписиКнигиПродаж.НДС18 КАК НДС18,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПродаж.НаАванс
	|				ИЛИ ЗаписиКнигиПродаж.НаСуммовуюРазницу
	|			ТОГДА 0
	|		ИНАЧЕ ЗаписиКнигиПродаж.СуммаБезНДС10
	|	КОНЕЦ КАК СуммаБезНДС10,
	|	ЗаписиКнигиПродаж.НДС10 КАК НДС10,
	|	ЗаписиКнигиПродаж.НДС0 КАК НДС0,
	|	ЗаписиКнигиПродаж.СуммаСовсемБезНДС КАК СуммаСовсемБезНДС,
	|	ЗаписиКнигиПродаж.Период КАК ДатаОформления,
	|	ЗаписиКнигиПродаж.СторнирующаяЗаписьДопЛиста КАК СторнирующаяЗаписьДопЛиста,
	|	ЗаписиКнигиПродаж.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	ТаблицаСчетаФактурыДокументы.НомерИсправления КАК НомерИсправления,
	|	ТаблицаСчетаФактурыДокументы.ДатаИсправления КАК ДатаИсправления,
	|	ТаблицаСчетаФактурыДокументы.НомерКорректировки КАК НомерКорректировки,
	|	ТаблицаСчетаФактурыДокументы.ДатаКорректировки КАК ДатаКорректировки,
	|	ТаблицаСчетаФактурыДокументы.НомерИсправленияКорректировки КАК НомерИсправленияКорректировки,
	|	ТаблицаСчетаФактурыДокументы.ДатаИсправленияКорректировки КАК ДатаИсправленияКорректировки,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|					И ЗаписиКнигиПродаж.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				ИЛИ ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ПриходныйКассовыйОрдер
	|					И ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.ПриходныйКассовыйОрдер).ВидОперации = &ПКО_РозничнаяВыручка
	|				ИЛИ ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ОплатаПлатежнойКартой
	|					И ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.ОплатаПлатежнойКартой).ВидОперации = &ОПК_РозничнаяВыручка
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.ОбрабатыватьНомерДокумента, ЛОЖЬ)
	|	КОНЕЦ КАК ОбрабатыватьНомерДокумента,
	|	ЗаписиКнигиПродаж.ДатаСобытия КАК ДатаСобытия,
	|	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.СводныйКорректировочный, ЛОЖЬ) КАК СводныйКорректировочный,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПродаж.КодВидаОперации <> """"
	|			ТОГДА ЗаписиКнигиПродаж.КодВидаОперации
	|		ИНАЧЕ ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.КодВидаОперации, ""01"")
	|	КОНЕЦ КАК КодВидаОперации,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.Валюта, &ВалютаРегУчета) <> &ВалютаРегУчета
	|			ТОГДА ТаблицаСчетаФактурыДокументы.ВалютаНаименование
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Валюта,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.Валюта, &ВалютаРегУчета) <> &ВалютаРегУчета
	|			ТОГДА ТаблицаСчетаФактурыДокументы.ВалютаКод
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ВалютаКод,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.Валюта, &ВалютаРегУчета) <> &ВалютаРегУчета
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаСчетаФактурыДокументы.ВсегоПродажВВалюте ЕСТЬ NULL 
	|							И ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|						ТОГДА ВЫБОР
	|								КОГДА ЗаписиКнигиПродаж.ВсегоПродаж < 0
	|									ТОГДА -ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураПолученный).СуммаДокумента
	|								ИНАЧЕ ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураПолученный).СуммаДокумента
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ЗаписиКнигиПродаж.ВсегоПродаж < 0
	|								ТОГДА -ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.ВсегоПродажВВалюте, -ЗаписиКнигиПродаж.ВсегоПродаж)
	|							ИНАЧЕ ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.ВсегоПродажВВалюте, ЗаписиКнигиПродаж.ВсегоПродаж)
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВсегоПродажВВалюте,
	|	ЗаписиКнигиПродаж.НомерДокументаОплаты КАК НомерДокументаОплаты,
	|	ЗаписиКнигиПродаж.ДатаДокументаОплаты КАК ДатаДокументаОплаты,
	|	ТаблицаСчетаФактурыДокументы.ПосредникСсылка КАК ПосредникСсылка,
	|	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.СводныйКомиссионный, ЛОЖЬ) КАК СводныйКомиссионный
	|ПОМЕСТИТЬ ПодготовленныеЗаписиКнигиПродаж
	|ИЗ
	|	ЗаписиКнигиПродаж КАК ЗаписиКнигиПродаж
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТаблицаСчетаФактурыДокументы.СчетФактура КАК СчетФактура,
	|			ТаблицаСчетаФактурыДокументы.СчетФактураДокумент КАК СчетФактураДокумент,
	|			ТаблицаСчетаФактурыДокументы.ДоговорАванса КАК ДоговорАванса,
	|			ТаблицаСчетаФактурыДокументы.СтавкаНДСАванса КАК СтавкаНДСАванса,
	|			МИНИМУМ(ТаблицаСчетаФактурыДокументы.Приоритет) КАК МинимумПриоритет,
	|			ТаблицаСчетаФактурыДокументы.КонтрагентПоСчетуФактуре КАК КонтрагентПоСчетуФактуре
	|		ИЗ
	|			ТаблицаСчетаФактурыДокументы КАК ТаблицаСчетаФактурыДокументы
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТаблицаСчетаФактурыДокументы.СчетФактура,
	|			ТаблицаСчетаФактурыДокументы.СчетФактураДокумент,
	|			ТаблицаСчетаФактурыДокументы.ДоговорАванса,
	|			ТаблицаСчетаФактурыДокументы.СтавкаНДСАванса,
	|			ТаблицаСчетаФактурыДокументы.КонтрагентПоСчетуФактуре) КАК Приоритеты
	|		ПО (ВЫБОР
	|				КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|					ТОГДА ЗаписиКнигиПродаж.СчетФактура = Приоритеты.СчетФактураДокумент
	|				ИНАЧЕ ЗаписиКнигиПродаж.СчетФактура = Приоритеты.СчетФактура
	|			КОНЕЦ)
	|			И ЗаписиКнигиПродаж.ДоговорАванса = Приоритеты.ДоговорАванса
	|			И ЗаписиКнигиПродаж.СтавкаНДС_Аванс = Приоритеты.СтавкаНДСАванса
	|			И ЗаписиКнигиПродаж.КонтрагентПоСчетуФактуре = Приоритеты.КонтрагентПоСчетуФактуре
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСчетаФактурыДокументы КАК ТаблицаСчетаФактурыДокументы
	|		ПО (ВЫБОР
	|				КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|					ТОГДА Приоритеты.СчетФактураДокумент = ТаблицаСчетаФактурыДокументы.СчетФактураДокумент
	|				ИНАЧЕ Приоритеты.СчетФактура = ТаблицаСчетаФактурыДокументы.СчетФактура
	|			КОНЕЦ)
	|			И (Приоритеты.МинимумПриоритет = ТаблицаСчетаФактурыДокументы.Приоритет)
	|			И (Приоритеты.ДоговорАванса = ТаблицаСчетаФактурыДокументы.ДоговорАванса)
	|			И (Приоритеты.СтавкаНДСАванса = ТаблицаСчетаФактурыДокументы.СтавкаНДСАванса)
	|			И (Приоритеты.КонтрагентПоСчетуФактуре = ТаблицаСчетаФактурыДокументы.КонтрагентПоСчетуФактуре)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ОтбиратьПоКонтрагенту = ИСТИНА
	|				ТОГДА ВЫБОР
	|						КОГДА НЕ ТаблицаСчетаФактурыДокументы.ПродавецДляПечати ЕСТЬ NULL 
	|								И ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ОбособленноеПодразделение
	|							ТОГДА ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ГоловнойКонтрагент = &КонтрагентДляОтбора
	|						КОГДА НЕ ТаблицаСчетаФактурыДокументы.ПродавецДляПечати ЕСТЬ NULL 
	|							ТОГДА ТаблицаСчетаФактурыДокументы.ПродавецДляПечати = &КонтрагентДляОтбора
	|						КОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.Контрагент КАК Справочник.Контрагенты).ОбособленноеПодразделение
	|							ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.Контрагент КАК Справочник.Контрагенты).ГоловнойКонтрагент = &КонтрагентДляОтбора
	|						ИНАЧЕ ЗаписиКнигиПродаж.Контрагент = &КонтрагентДляОтбора
	|					КОНЕЦ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	
	Если НЕ СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме 
		И СтруктураПараметров.ОтбиратьПоКонтрагенту 
		И ОбщегоНазначения.ОбъектЯвляетсяГруппой(СтруктураПараметров.КонтрагентДляОтбора) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " = &КонтрагентДляОтбора", " В ИЕРАРХИИ(&КонтрагентДляОтбора)");
		
	КонецЕсли;
	
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПодготовленныеЗаписиКнигиПродаж.КонтрагентСсылка КАК Ссылка,
	|	ПодготовленныеЗаписиКнигиПродаж.ДатаСчетаФактурыСортировка КАК ДатаСведений
	|ПОМЕСТИТЬ СсылкиНаДаты
	|ИЗ
	|	ПодготовленныеЗаписиКнигиПродаж КАК ПодготовленныеЗаписиКнигиПродаж
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПодготовленныеЗаписиКнигиПродаж.ПосредникСсылка,
	|	ПодготовленныеЗаписиКнигиПродаж.ДатаСчетаФактурыСортировка
	|ИЗ
	|	ПодготовленныеЗаписиКнигиПродаж КАК ПодготовленныеЗаписиКнигиПродаж";
	
	Запрос.Выполнить();
	
	РегистрационныеСведенияНаДаты(Запрос.МенеджерВременныхТаблиц);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПодготовленныеЗаписиКнигиПродаж.Организация,
	|	ПодготовленныеЗаписиКнигиПродаж.НалоговыйПериод КАК НалоговыйПериод,
	|	ПодготовленныеЗаписиКнигиПродаж.КонецНалоговогоПериода КАК КонецНалоговогоПериода,
	|	ПодготовленныеЗаписиКнигиПродаж.НаАванс,
	|	ПодготовленныеЗаписиКнигиПродаж.НаСуммовуюРазницу,
	|	ПодготовленныеЗаписиКнигиПродаж.СчетФактура КАК СчетФактура,
	|	ПодготовленныеЗаписиКнигиПродаж.СчетФактураДата КАК СчетФактураДата,
	|	ПодготовленныеЗаписиКнигиПродаж.СчетФактураДокумент,
	|	ПодготовленныеЗаписиКнигиПродаж.НомерСчетаФактуры,
	|	ПодготовленныеЗаписиКнигиПродаж.ДатаСчетаФактуры,
	|	ПодготовленныеЗаписиКнигиПродаж.СтавкаНДС_Аванс,
	|	ПодготовленныеЗаписиКнигиПродаж.ДоговорАванса КАК ДоговорАванса,
	|	ПодготовленныеЗаписиКнигиПродаж.КонтрагентСсылка КАК Контрагент,
	|	ЕСТЬNULL(СведенияОПокупателях.ИНН, """") КАК ПокупательИНН,
	|	ВЫБОР
	|		КОГДА ПодготовленныеЗаписиКнигиПродаж.КППКонтрагента = """"
	|			ТОГДА ЕСТЬNULL(СведенияОПокупателях.КПП, """")
	|		ИНАЧЕ ПодготовленныеЗаписиКнигиПродаж.КППКонтрагента
	|	КОНЕЦ КАК ПокупательКПП,
	|	ВЫБОР
	|		КОГДА ПодготовленныеЗаписиКнигиПродаж.РозничнаяПродажа
	|			ТОГДА &ТекстРозничнаяПродажа
	|		ИНАЧЕ ЕСТЬNULL(СведенияОПокупателях.Наименование, """")
	|	КОНЕЦ КАК Покупатель,
	|	ПодготовленныеЗаписиКнигиПродаж.РозничнаяПродажа,
	|	ПодготовленныеЗаписиКнигиПродаж.ДатаОплаты КАК ДатаОплаты,
	|	ПодготовленныеЗаписиКнигиПродаж.ДокументОплаты,
	|	ПодготовленныеЗаписиКнигиПродаж.Событие,
	|	ПодготовленныеЗаписиКнигиПродаж.ВсегоПродаж КАК ВсегоПродаж,
	|	ПодготовленныеЗаписиКнигиПродаж.СуммаБезНДС18 КАК СуммаБезНДС18,
	|	ПодготовленныеЗаписиКнигиПродаж.НДС18 КАК НДС18,
	|	ПодготовленныеЗаписиКнигиПродаж.СуммаБезНДС10 КАК СуммаБезНДС10,
	|	ПодготовленныеЗаписиКнигиПродаж.НДС10 КАК НДС10,
	|	ПодготовленныеЗаписиКнигиПродаж.НДС0 КАК НДС0,
	|	ПодготовленныеЗаписиКнигиПродаж.СуммаСовсемБезНДС КАК СуммаСовсемБезНДС,
	|	ПодготовленныеЗаписиКнигиПродаж.ДатаОформления КАК ДатаОформления,
	|	ПодготовленныеЗаписиКнигиПродаж.СторнирующаяЗаписьДопЛиста КАК СторнирующаяЗаписьДопЛиста,
	|	ПодготовленныеЗаписиКнигиПродаж.ИсправленныйСчетФактура,
	|	ПодготовленныеЗаписиКнигиПродаж.НомерИсправления,
	|	ПодготовленныеЗаписиКнигиПродаж.ДатаИсправления,
	|	ПодготовленныеЗаписиКнигиПродаж.НомерКорректировки,
	|	ПодготовленныеЗаписиКнигиПродаж.ДатаКорректировки,
	|	ПодготовленныеЗаписиКнигиПродаж.НомерИсправленияКорректировки,
	|	ПодготовленныеЗаписиКнигиПродаж.ДатаИсправленияКорректировки,
	|	ПодготовленныеЗаписиКнигиПродаж.ОбрабатыватьНомерДокумента,
	|	ПодготовленныеЗаписиКнигиПродаж.ДатаСобытия,
	|	ПодготовленныеЗаписиКнигиПродаж.СводныйКорректировочный КАК СводныйКорректировочный,
	|	ПодготовленныеЗаписиКнигиПродаж.КодВидаОперации,
	|	ПодготовленныеЗаписиКнигиПродаж.Валюта,
	|	ПодготовленныеЗаписиКнигиПродаж.ВалютаКод,
	|	ПодготовленныеЗаписиКнигиПродаж.ВсегоПродажВВалюте,
	|	ПодготовленныеЗаписиКнигиПродаж.НомерДокументаОплаты КАК НомерДокументаОплаты,
	|	ПодготовленныеЗаписиКнигиПродаж.ДатаДокументаОплаты КАК ДатаДокументаОплаты,
	|	ЕСТЬNULL(СведенияОПосредниках.Наименование, """") КАК Посредник,
	|	ЕСТЬNULL(СведенияОПосредниках.ИНН, """") КАК ПосредникИНН,
	|	ЕСТЬNULL(СведенияОПосредниках.КПП, """") КАК ПосредникКПП,
	|	ПодготовленныеЗаписиКнигиПродаж.СводныйКомиссионный КАК СводныйКомиссионный
	|ИЗ
	|	ПодготовленныеЗаписиКнигиПродаж КАК ПодготовленныеЗаписиКнигиПродаж
	|		ЛЕВОЕ СОЕДИНЕНИЕ СведенияОСсылкахНаДаты КАК СведенияОПокупателях
	|		ПО (СведенияОПокупателях.Ссылка = ПодготовленныеЗаписиКнигиПродаж.КонтрагентСсылка)
	|			И (СведенияОПокупателях.ДатаСведений = ПодготовленныеЗаписиКнигиПродаж.ДатаСчетаФактурыСортировка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ СведенияОСсылкахНаДаты КАК СведенияОПосредниках
	|		ПО (СведенияОПосредниках.Ссылка = ПодготовленныеЗаписиКнигиПродаж.ПосредникСсылка)
	|			И (СведенияОПосредниках.ДатаСведений = ПодготовленныеЗаписиКнигиПродаж.ДатаСчетаФактурыСортировка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПодготовленныеЗаписиКнигиПродаж.НалоговыйПериод,
	|	ПодготовленныеЗаписиКнигиПродаж.ДатаОформления,
	|	ПодготовленныеЗаписиКнигиПродаж.СчетФактураДата,
	|	ПодготовленныеЗаписиКнигиПродаж.СторнирующаяЗаписьДопЛиста УБЫВ,
	|	ПодготовленныеЗаписиКнигиПродаж.ДатаОплаты
	|ИТОГИ
	|	МАКСИМУМ(КонецНалоговогоПериода),
	|	МИНИМУМ(СчетФактураДата),
	|	МАКСИМУМ(Покупатель),
	|	МАКСИМУМ(ДатаОплаты),
	|	ВЫБОР
	|		КОГДА ПодготовленныеЗаписиКнигиПродаж.НалоговыйПериод >= ДАТАВРЕМЯ(2014, 10, 1)
	|			ТОГДА МАКСИМУМ(ПодготовленныеЗаписиКнигиПродаж.ВсегоПродаж)
	|		ИНАЧЕ СУММА(ПодготовленныеЗаписиКнигиПродаж.ВсегоПродаж)
	|	КОНЕЦ КАК ВсегоПродаж,
	|	СУММА(СуммаБезНДС18),
	|	СУММА(НДС18),
	|	СУММА(СуммаБезНДС10),
	|	СУММА(НДС10),
	|	СУММА(НДС0),
	|	СУММА(СуммаСовсемБезНДС),
	|	МАКСИМУМ(СводныйКорректировочный),
	|	МАКСИМУМ(НомерДокументаОплаты),
	|	МАКСИМУМ(ДатаДокументаОплаты),
	|	МАКСИМУМ(СводныйКомиссионный)
	|ПО
	|	НалоговыйПериод,
	|	ДатаОформления,
	|	СчетФактура,
	|	ДоговорАванса,
	|	СторнирующаяЗаписьДопЛиста";
	
	Если СтруктураПараметров.ГруппироватьПоКонтрагентам И Не СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО
	              	|	НалоговыйПериод,
	              	|	ДатаОформления,", "ПО
	              	|	НалоговыйПериод,
	              	|	ДатаОформления, Контрагент, ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "УПОРЯДОЧИТЬ ПО", "УПОРЯДОЧИТЬ ПО Покупатель, ");
	КонецЕсли;
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Процедура ПолучитьСчетаФактурыДокументыКнигаПродаж(Запрос)
	
	// Счета-фактуры выданные, составленные от имени продавца, возникают у комиссионера, в книге не отражаются.
	// Т.к. у счетов-фактур, составленных от имени продавца, и выданных комитенту на вознаграждение один и тот же 
	// документ - основание (отчет комитенту), то необходимо отбирать только счета-фактуры на вознаграждение, 
	// чтобы не задвоились записи при соединении регистра НДС и списка документов.
	//
	// Счета-фактуры полученные, составленные от имени продавца, отражаются в базе комитента и
	// на основании их комитент принимает НДС к вычету, поэтому для счетов-фактур полученных отбор по
	// флагу "Составлен от имени продавца" не должен выполняться.
	// 
	// Счета-фактуры (полученные и выданные) на аванс в базе комиссионера, составленные от имени продавца, 
	// не формируют движения по регистрам НДС, поэтому задвоение данных при соединении регистров с ними не возникает.
	
	УстановитьПривилегированныйРежим(Истина);
	
	
	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА (СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаАванс)
	|					ИЛИ СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НалоговыйАгент))
	|					И (СчетФактураВыданный.Ссылка.Исправление
	|						ИЛИ СчетФактураВыданный.ДокументОснование ССЫЛКА Документ.ОтчетКомиссионераОПродажах)
	|				ИЛИ СчетФактураВыданный.ДокументОснование ССЫЛКА Документ.ПодтверждениеНулевойСтавкиНДС
	|			ТОГДА СчетФактураВыданный.Ссылка
	|		КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаРеализацию)
	|			ТОГДА ВЫБОР
	|					КОГДА СчетФактураВыданный.ДокументОснование ССЫЛКА Документ.ОтчетКомиссионераОПродажах
	|						ТОГДА ВЫБОР
	|								КОГДА СчетФактураВыданный.Ссылка.Контрагент = СчетФактураВыданный.ДокументОснование.Контрагент
	|									ТОГДА СчетФактураВыданный.ДокументОснование
	|								ИНАЧЕ СчетФактураВыданный.Ссылка
	|							КОНЕЦ
	|					КОГДА СчетФактураВыданный.ДокументОснование ССЫЛКА Документ.ОказаниеУслуг
	|						ТОГДА СчетФактураВыданный.Ссылка
	|					ИНАЧЕ СчетФактураВыданный.ДокументОснование
	|				КОНЕЦ
	|		ИНАЧЕ СчетФактураВыданный.ДокументОснование
	|	КОНЕЦ КАК СчетФактура,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|				ИЛИ СчетФактураВыданный.Ссылка.Исправление
	|			ТОГДА СчетФактураВыданный.НомерИсходногоДокумента
	|		ИНАЧЕ СчетФактураВыданный.Ссылка.Номер
	|	КОНЕЦ КАК НомерСчетаФактуры,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|				ИЛИ СчетФактураВыданный.Ссылка.Исправление
	|			ТОГДА СчетФактураВыданный.ДатаИсходногоДокумента
	|		ИНАЧЕ СчетФактураВыданный.Ссылка.Дата
	|	КОНЕЦ КАК ДатаСчетаФактуры,
	|	СчетФактураВыданный.Ссылка КАК СчетФактураДокумент,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаАванс)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НаАванс,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НаСуммовуюРазницу,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаАванс)
	|			ТОГДА ЕСТЬNULL(Авансы.СтавкаНДС, НЕОПРЕДЕЛЕНО)
	|		КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу)
	|			ТОГДА СчетФактураВыданный.Ссылка.СтавкаНДС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СтавкаНДСАванса,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаАванс)
	|				И СчетФактураВыданный.ДокументОснование ССЫЛКА Документ.ОтчетКомиссионераОПродажах
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		КОГДА НЕ(СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаРеализацию)
	|					ИЛИ СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу)
	|					ИЛИ СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный))
	|			ТОГДА СчетФактураВыданный.Ссылка.ДоговорКонтрагента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДоговорАванса,
	|	3 КАК Приоритет,
	|	СчетФактураВыданный.Ссылка КАК Ссылка,
	|	СчетФактураВыданный.Ссылка.Контрагент КАК Контрагент,
	|	СчетФактураВыданный.НомерСтроки КАК НомерСтроки,
	|	СчетФактураВыданный.Ссылка.СводныйКорректировочный КАК СводныйКорректировочный,
	|	ЛОЖЬ КАК СводныйКомиссионный
	|ПОМЕСТИТЬ ВТ_СчетаФактурыПромежуточная
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданный
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.Авансы КАК Авансы
	|		ПО СчетФактураВыданный.Ссылка = Авансы.Ссылка
	|ГДЕ
	|	СчетФактураВыданный.Ссылка.Проведен
	|	И НЕ СчетФактураВыданный.Ссылка.ПометкаУдаления
	|	И СчетФактураВыданный.Ссылка.Организация В(&Организация)
	|	И (СчетФактураВыданный.Ссылка.Продавец = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ИЛИ СчетФактураВыданный.Ссылка.Продавец = СчетФактураВыданный.Ссылка.Контрагент)
	|	И НЕ СчетФактураВыданный.Ссылка.СводныйКомиссионный
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетФактураВыданный.Ссылка,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|				ИЛИ СчетФактураВыданный.Ссылка.Исправление
	|			ТОГДА СчетФактураВыданный.НомерИсходногоДокумента
	|		ИНАЧЕ СчетФактураВыданный.Ссылка.Номер
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|				ИЛИ СчетФактураВыданный.Ссылка.Исправление
	|			ТОГДА СчетФактураВыданный.ДатаИсходногоДокумента
	|		ИНАЧЕ СчетФактураВыданный.Ссылка.Дата
	|	КОНЕЦ,
	|	СчетФактураВыданный.Ссылка,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	НЕОПРЕДЕЛЕНО,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаАванс)
	|				И СчетФактураВыданный.ДокументОснование ССЫЛКА Документ.ОтчетКомиссионераОПродажах
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		КОГДА НЕ(СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаРеализацию)
	|					ИЛИ СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу)
	|					ИЛИ СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный))
	|			ТОГДА СчетФактураВыданный.Ссылка.ДоговорКонтрагента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	3,
	|	СчетФактураВыданный.Ссылка,
	|	ЕСТЬNULL(ОтчетКомиссионераОПродажахПокупатели.Покупатель, СчетФактураВыданный.Ссылка.Контрагент),
	|	ЕСТЬNULL(ОтчетКомиссионераОПродажахПокупатели.НомерСтроки, СчетФактураВыданный.НомерСтроки),
	|	СчетФактураВыданный.Ссылка.СводныйКорректировочный,
	|	ИСТИНА
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданный
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионераОПродажах.Покупатели КАК ОтчетКомиссионераОПродажахПокупатели
	|		ПО СчетФактураВыданный.ДокументОснование = ОтчетКомиссионераОПродажахПокупатели.Ссылка
	|			И СчетФактураВыданный.Ссылка = ОтчетКомиссионераОПродажахПокупатели.СчетФактура
	|ГДЕ
	|	СчетФактураВыданный.Ссылка.Проведен
	|	И НЕ СчетФактураВыданный.Ссылка.ПометкаУдаления
	|	И СчетФактураВыданный.Ссылка.Организация В(&Организация)
	|	И (СчетФактураВыданный.Ссылка.Продавец = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ИЛИ СчетФактураВыданный.Ссылка.Продавец = СчетФактураВыданный.Ссылка.Контрагент)
	|	И СчетФактураВыданный.Ссылка.СводныйКомиссионный
	|	И НЕ СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаАванс)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Авансы.Ссылка,
	|	Авансы.Ссылка.Номер,
	|	Авансы.Ссылка.Дата,
	|	Авансы.Ссылка,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	Авансы.СтавкаНДС,
	|	НЕОПРЕДЕЛЕНО,
	|	3,
	|	Авансы.Ссылка,
	|	Авансы.Контрагент,
	|	Авансы.НомерСтроки,
	|	Авансы.Ссылка.СводныйКорректировочный,
	|	ИСТИНА
	|ИЗ
	|	Документ.СчетФактураВыданный.Авансы КАК Авансы
	|ГДЕ
	|	Авансы.Ссылка.Проведен
	|	И НЕ Авансы.Ссылка.ПометкаУдаления
	|	И Авансы.Ссылка.Организация В(&Организация)
	|	И Авансы.Ссылка.СводныйКомиссионный
	|	И Авансы.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаАванс)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СчетФактураПолученный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.НаАванс)
	|				И СчетФактураПолученный.Ссылка.Исправление
	|			ТОГДА СчетФактураПолученный.Ссылка
	|		ИНАЧЕ СчетФактураПолученный.ДокументОснование
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СчетФактураПолученный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный)
	|			ТОГДА СчетФактураПолученный.НомерИсходногоДокумента
	|		ИНАЧЕ СчетФактураПолученный.Ссылка.НомерВходящегоДокумента
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СчетФактураПолученный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный)
	|			ТОГДА СчетФактураПолученный.ДатаИсходногоДокумента
	|		ИНАЧЕ СчетФактураПолученный.Ссылка.ДатаВходящегоДокумента
	|	КОНЕЦ,
	|	СчетФактураПолученный.Ссылка,
	|	ВЫБОР
	|		КОГДА СчетФактураПолученный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.НаАванс)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ЛОЖЬ,
	|	ВЫБОР
	|		КОГДА СчетФактураПолученный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.НаАванс)
	|			ТОГДА ЕСТЬNULL(Авансы.СтавкаНДС, НЕОПРЕДЕЛЕНО)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СчетФактураПолученный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.НаАванс)
	|			ТОГДА СчетФактураПолученный.Ссылка.ДоговорКонтрагента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	5,
	|	СчетФактураПолученный.Ссылка,
	|	СчетФактураПолученный.Ссылка.Контрагент,
	|	СчетФактураПолученный.НомерСтроки,
	|	СчетФактураПолученный.Ссылка.СводныйКорректировочный,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученный
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.Авансы КАК Авансы
	|		ПО СчетФактураПолученный.Ссылка = Авансы.Ссылка
	|ГДЕ
	|	СчетФактураПолученный.Ссылка.Проведен
	|	И НЕ СчетФактураПолученный.Ссылка.ПометкаУдаления
	|	И СчетФактураПолученный.Ссылка.Организация В(&Организация)
	|	И НЕ СчетФактураПолученный.ДокументОснование ССЫЛКА Документ.ОтчетКомитентуОПродажах
	|	И НЕ СчетФактураПолученный.ДокументОснование ССЫЛКА Документ.ОтчетКомиссионераОПродажах
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ГТДИмпорт.Ссылка,
	|	ГТДИмпорт.НомерГТД,
	|	ГТДИмпорт.Дата,
	|	ГТДИмпорт.Ссылка,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	6,
	|	NULL,
	|	ГТДИмпорт.Контрагент,
	|	0,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ГТДИмпорт КАК ГТДИмпорт
	|ГДЕ
	|	ГТДИмпорт.Проведен
	|	И НЕ ГТДИмпорт.ПометкаУдаления
	|	И ГТДИмпорт.Организация В(&Организация)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозвратТоваровОтПокупателя.Ссылка,
	|	ВозвратТоваровОтПокупателя.НомерРасходногоКассовогоОрдера,
	|	ВозвратТоваровОтПокупателя.ДатаРасходногоКассовогоОрдера,
	|	ВозвратТоваровОтПокупателя.Ссылка,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	6,
	|	NULL,
	|	ВозвратТоваровОтПокупателя.Контрагент,
	|	0,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|ГДЕ
	|	ВозвратТоваровОтПокупателя.Сделка ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|	И ВозвратТоваровОтПокупателя.Проведен
	|	И НЕ ВозвратТоваровОтПокупателя.ПометкаУдаления
	|	И ВозвратТоваровОтПокупателя.Организация В(&Организация)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаявлениеОВвозеТоваров.Ссылка,
	|	ЗаявлениеОВвозеТоваров.Номер,
	|	ЗаявлениеОВвозеТоваров.Дата,
	|	ЗаявлениеОВвозеТоваров.Ссылка,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	7,
	|	ЗаявлениеОВвозеТоваров.Ссылка,
	|	ЗаявлениеОВвозеТоваров.Контрагент,
	|	0,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК ЗаявлениеОВвозеТоваров
	|ГДЕ
	|	ЗаявлениеОВвозеТоваров.Организация В(&Организация)
	|	И ЗаявлениеОВвозеТоваров.Проведен
	|	И НЕ ЗаявлениеОВвозеТоваров.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура,
	|	СтавкаНДСАванса,
	|	ДоговорАванса,
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаписиКнигиПродаж.СчетФактура,
	|	ЕСТЬNULL(СчетаФактурыДокументы.ДатаСчетаФактуры, ДанныеПервичныхДокументов.Дата) КАК ДатаСчетаФактуры,
	|	ЕСТЬNULL(СчетаФактурыДокументы.НомерСчетаФактуры, ДанныеПервичныхДокументов.Номер) КАК НомерСчетаФактуры,
	|	СчетаФактурыДокументы.СчетФактураДокумент,
	|	ЕСТЬNULL(СчетаФактурыДокументы.ДоговорАванса, НЕОПРЕДЕЛЕНО) КАК ДоговорАванса,
	|	ЕСТЬNULL(СчетаФактурыДокументы.СтавкаНДСАванса, НЕОПРЕДЕЛЕНО) КАК СтавкаНДСАванса,
	|	ЕСТЬNULL(СчетаФактурыДокументы.Приоритет, 8) КАК Приоритет,
	|	СчетаФактурыДокументы.Ссылка КАК Ссылка,
	|	СчетаФактурыДокументы.НомерСтроки,
	|	СчетаФактурыДокументы.СводныйКорректировочный,
	|	ЗаписиКнигиПродаж.КонтрагентПоСчетуФактуре,
	|	СчетаФактурыДокументы.СводныйКомиссионный,
	|	ВЫБОР
	|		КОГДА СчетаФактурыДокументы.СчетФактура ЕСТЬ NULL 
	|			ТОГДА ВЫБОР
	|					КОГДА &КонецПериода >= ДАТАВРЕМЯ(2015, 1, 1)
	|						ТОГДА ""26""
	|					ИНАЧЕ ""01""
	|				КОНЕЦ
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК КодВидаОперации
	|ПОМЕСТИТЬ ВТ_ТаблицаСчетаФактурыДокументы
	|ИЗ
	|	ЗаписиКнигиПродаж КАК ЗаписиКнигиПродаж
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетаФактурыПромежуточная КАК СчетаФактурыДокументы
	|		ПО ЗаписиКнигиПродаж.СчетФактура = СчетаФактурыДокументы.СчетФактура
	|			И ЗаписиКнигиПродаж.СтавкаНДС_Аванс = СчетаФактурыДокументы.СтавкаНДСАванса
	|			И ЗаписиКнигиПродаж.ДоговорАванса = СчетаФактурыДокументы.ДоговорАванса
	|			И (ЗаписиКнигиПродаж.КонтрагентПоСчетуФактуре = ЕСТЬNULL(СчетаФактурыДокументы.Контрагент, ЗаписиКнигиПродаж.КонтрагентПоСчетуФактуре))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО ЗаписиКнигиПродаж.СчетФактура = ДанныеПервичныхДокументов.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЖурналУчетаСчетовФактур.Регистратор,
	|	ЖурналУчетаСчетовФактур.СчетФактура,
	|	ЖурналУчетаСчетовФактур.НомерСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.ДатаСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.НомерКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.ДатаКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.НомерИсправления КАК НомерИсправления,
	|	ЖурналУчетаСчетовФактур.ДатаИсправления КАК ДатаИсправления,
	|	ЖурналУчетаСчетовФактур.НомерИсправленияКорректировочногоСчетаФактуры КАК НомерИсправленияКорректировки,
	|	ЖурналУчетаСчетовФактур.ДатаИсправленияКорректировочногоСчетаФактуры КАК ДатаИсправленияКорректировки,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактур.Продавец <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ЖурналУчетаСчетовФактур.Продавец
	|		КОГДА ЖурналУчетаСчетовФактур.Контрагент <> ЖурналУчетаСчетовФактур.Организация
	|			ТОГДА ЖурналУчетаСчетовФактур.Контрагент
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ПродавецДляПечати,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактур.Продавец <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА """"
	|		КОГДА ЖурналУчетаСчетовФактур.Контрагент <> ЖурналУчетаСчетовФактур.Организация
	|			ТОГДА ЖурналУчетаСчетовФактур.КППКонтрагента
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК КППКонтрагента,
	|	ЖурналУчетаСчетовФактур.ИндексСтроки,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактур.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|				И ВЫРАЗИТЬ(ЖурналУчетаСчетовФактур.СчетФактура КАК Документ.СчетФактураВыданный).СводныйКомиссионный
	|				И НЕ ВЫРАЗИТЬ(ЖурналУчетаСчетовФактур.СчетФактура КАК Документ.СчетФактураВыданный).ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаАванс)
	|			ТОГДА ЖурналУчетаСчетовФактур.ИндексСтроки
	|		ИНАЧЕ ЖурналУчетаСчетовФактур.НомерСтроки
	|	КОНЕЦ КАК НомерСтроки,
	|	ЖурналУчетаСчетовФактур.КодВидаОперации,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактур.Валюта <> &ВалютаРегУчета
	|			ТОГДА ЖурналУчетаСчетовФактур.Валюта.НаименованиеПолное
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ВалютаНаименование,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактур.Валюта <> &ВалютаРегУчета
	|			ТОГДА ЖурналУчетаСчетовФактур.Валюта.Код
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ВалютаКод,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактур.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|			ТОГДА ВЫБОР
	|					КОГДА ЖурналУчетаСчетовФактур.СчетФактура.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный)
	|						ТОГДА ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУменьшение
	|					ИНАЧЕ ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуре
	|				КОНЕЦ
	|		КОГДА ЖурналУчетаСчетовФактур.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|			ТОГДА ВЫБОР
	|					КОГДА ЖурналУчетаСчетовФактур.СчетФактура.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|						ТОГДА ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУвеличение
	|					ИНАЧЕ ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуре
	|				КОНЕЦ
	|		ИНАЧЕ ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуре
	|	КОНЕЦ КАК ВсегоПродажВВалюте,
	|	ЖурналУчетаСчетовФактур.Посредник КАК ПосредникСсылка,
	|	ЖурналУчетаСчетовФактур.Валюта КАК Валюта
	|ПОМЕСТИТЬ ВТ_РегистрацияСчетовФактур
	|ИЗ
	|	РегистрСведений.ЖурналУчетаСчетовФактур КАК ЖурналУчетаСчетовФактур
	|ГДЕ
	|	ЖурналУчетаСчетовФактур.СчетФактура В
	|			(ВЫБРАТЬ
	|				ВТ_ТаблицаСчетаФактурыДокументы.Ссылка
	|			ИЗ
	|				ВТ_ТаблицаСчетаФактурыДокументы)
	|	И ЖурналУчетаСчетовФактур.Организация В(&Организация)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаСчетаФактурыДокументы.СчетФактура КАК СчетФактура,
	|	ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.ДатаСчетаФактуры, ВТ_ТаблицаСчетаФактурыДокументы.ДатаСчетаФактуры) КАК ДатаСчетаФактуры,
	|	ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.НомерСчетаФактуры, ВТ_ТаблицаСчетаФактурыДокументы.НомерСчетаФактуры) КАК НомерСчетаФактуры,
	|	ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.СчетФактура, ВТ_ТаблицаСчетаФактурыДокументы.СчетФактураДокумент) КАК СчетФактураДокумент,
	|	ВТ_ТаблицаСчетаФактурыДокументы.НомерСчетаФактуры КАК НомерСчетаФактурыСортировка,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.ДатаИсправленияКорректировки, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ВТ_РегистрацияСчетовФактур.ДатаИсправленияКорректировки
	|		КОГДА ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.ДатаКорректировочногоСчетаФактуры, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ВТ_РегистрацияСчетовФактур.ДатаКорректировочногоСчетаФактуры
	|		КОГДА ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.ДатаИсправления, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ВТ_РегистрацияСчетовФактур.ДатаИсправления
	|		ИНАЧЕ ЕСТЬNULL(ВТ_РегистрацияСчетовФактур.ДатаСчетаФактуры, ВТ_ТаблицаСчетаФактурыДокументы.ДатаСчетаФактуры)
	|	КОНЕЦ КАК ДатаСчетаФактурыСортировка,
	|	ВТ_ТаблицаСчетаФактурыДокументы.ДоговорАванса КАК ДоговорАванса,
	|	ВТ_ТаблицаСчетаФактурыДокументы.СтавкаНДСАванса КАК СтавкаНДСАванса,
	|	ВТ_ТаблицаСчетаФактурыДокументы.Приоритет КАК Приоритет,
	|	ВТ_РегистрацияСчетовФактур.НомерКорректировочногоСчетаФактуры КАК НомерКорректировки,
	|	ВТ_РегистрацияСчетовФактур.ДатаКорректировочногоСчетаФактуры КАК ДатаКорректировки,
	|	ВТ_РегистрацияСчетовФактур.НомерИсправления КАК НомерИсправления,
	|	ВТ_РегистрацияСчетовФактур.ДатаИсправления КАК ДатаИсправления,
	|	ВТ_РегистрацияСчетовФактур.НомерИсправленияКорректировки КАК НомерИсправленияКорректировки,
	|	ВТ_РегистрацияСчетовФактур.ДатаИсправленияКорректировки КАК ДатаИсправленияКорректировки,
	|	ВЫБОР
	|		КОГДА ВТ_ТаблицаСчетаФактурыДокументы.Ссылка ССЫЛКА Документ.СчетФактураВыданный
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_РегистрацияСчетовФактур.СчетФактура ЕСТЬ NULL 
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		КОГДА ВТ_ТаблицаСчетаФактурыДокументы.Ссылка ССЫЛКА Документ.ЗаявлениеОВвозеТоваров
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОбрабатыватьНомерДокумента,
	|	ВТ_РегистрацияСчетовФактур.ПродавецДляПечати КАК ПродавецДляПечати,
	|	ВТ_РегистрацияСчетовФактур.КППКонтрагента КАК КППКонтрагента,
	|	ВТ_ТаблицаСчетаФактурыДокументы.СводныйКорректировочный,
	|	ВТ_ТаблицаСчетаФактурыДокументы.КонтрагентПоСчетуФактуре,
	|	ВЫБОР
	|		КОГДА ВТ_ТаблицаСчетаФактурыДокументы.КодВидаОперации = """"
	|			ТОГДА ВТ_РегистрацияСчетовФактур.КодВидаОперации
	|		ИНАЧЕ ВТ_ТаблицаСчетаФактурыДокументы.КодВидаОперации
	|	КОНЕЦ КАК КодВидаОперации,
	|	ВТ_РегистрацияСчетовФактур.ВалютаКод,
	|	ВТ_РегистрацияСчетовФактур.ВсегоПродажВВалюте,
	|	ВТ_РегистрацияСчетовФактур.ПосредникСсылка,
	|	ВТ_РегистрацияСчетовФактур.Валюта,
	|	ВТ_РегистрацияСчетовФактур.ВалютаНаименование,
	|	ВТ_ТаблицаСчетаФактурыДокументы.СводныйКомиссионный
	|ПОМЕСТИТЬ ТаблицаСчетаФактурыДокументы
	|ИЗ
	|	ВТ_ТаблицаСчетаФактурыДокументы КАК ВТ_ТаблицаСчетаФактурыДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РегистрацияСчетовФактур КАК ВТ_РегистрацияСчетовФактур
	|		ПО ВТ_ТаблицаСчетаФактурыДокументы.Ссылка = ВТ_РегистрацияСчетовФактур.СчетФактура
	|			И (ВЫБОР
	|				КОГДА ВТ_ТаблицаСчетаФактурыДокументы.СводныйКорректировочный
	|						ИЛИ ВТ_ТаблицаСчетаФактурыДокументы.СводныйКомиссионный
	|					ТОГДА ВТ_ТаблицаСчетаФактурыДокументы.НомерСтроки = ВТ_РегистрацияСчетовФактур.НомерСтроки
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ПолучитьЗаписиКнигиПродаж(СписокСчетовФактур, СтруктураПараметров) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	УстановитьПараметрыЗапросаКнигиПродаж(Запрос, СтруктураПараметров);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	|				ИЛИ НДСЗаписиКнигиПродаж.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыВыданные)
	|					И НЕ &ВыводитьПродавцовПоАвансам
	|			ТОГДА НДСЗаписиКнигиПродаж.Организация
	|		КОГДА НДСЗаписиКнигиПродаж.Регистратор ССЫЛКА Документ.КорректировкаПоступления
	|			ТОГДА НДСЗаписиКнигиПродаж.Организация
	|		ИНАЧЕ НДСЗаписиКнигиПродаж.Покупатель
	|	КОНЕЦ КАК Контрагент,
	|	НДСЗаписиКнигиПродаж.Покупатель КАК КонтрагентПоСчетуФактуре,
	|	НДСЗаписиКнигиПродаж.Период КАК Период,
	|	ВЫБОР
	|		КОГДА НЕ НДСЗаписиКнигиПродаж.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
	|			ТОГДА НДСЗаписиКнигиПродаж.ИсправленныйСчетФактура
	|		ИНАЧЕ НДСЗаписиКнигиПродаж.СчетФактура
	|	КОНЕЦ КАК СчетФактура,
	|	НДСЗаписиКнигиПродаж.ДатаОплаты КАК ДатаОплаты,
	|	НДСЗаписиКнигиПродаж.ДокументОплаты КАК ДокументОплаты,
	|	НДСЗаписиКнигиПродаж.Событие КАК Событие,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДанныеПервичныхДокументовСчетФактура.ДатаРегистратора
	|		ИНАЧЕ НДСЗаписиКнигиПродаж.ДатаСобытия
	|	КОНЕЦ КАК ДатаСобытия,
	|	СУММА(НДСЗаписиКнигиПродаж.СуммаБезНДС + НДСЗаписиКнигиПродаж.НДС) КАК ВсегоПродаж,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС В (&СтавкиНДС18)
	|				ТОГДА НДСЗаписиКнигиПродаж.СуммаБезНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБезНДС18,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС В (&СтавкиНДС18)
	|				ТОГДА НДСЗаписиКнигиПродаж.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДС18,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС В (&СтавкиНДС10)
	|				ТОГДА НДСЗаписиКнигиПродаж.СуммаБезНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБезНДС10,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС В (&СтавкиНДС10)
	|				ТОГДА НДСЗаписиКнигиПродаж.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДС10,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС = &СтавкаНДС0
	|				ТОГДА НДСЗаписиКнигиПродаж.СуммаБезНДС + НДСЗаписиКнигиПродаж.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДС0,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС = &СтавкаБезНДС
	|				ТОГДА НДСЗаписиКнигиПродаж.СуммаБезНДС + НДСЗаписиКнигиПродаж.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаСовсемБезНДС,
	|	НДСЗаписиКнигиПродаж.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|			ТОГДА ДанныеПервичныхДокументовСчетФактураВыданныйДокументОснование.ДатаРегистратора
	|		ИНАЧЕ ДанныеПервичныхДокументовСчетФактура.ДатаРегистратора
	|	КОНЕЦ КАК ДатаОприходования,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_Аванс)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НаАванс,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_СуммоваяРазница)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НаСуммовуюРазницу,
	|	ВЫБОР
	|		КОГДА (НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_Аванс)
	|				ИЛИ НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_СуммоваяРазница))
	|				И НЕ НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ОтражениеНачисленияНДС
	|				И НЕ НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ОтражениеНДСКВычету
	|			ТОГДА НДСЗаписиКнигиПродаж.СтавкаНДС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СтавкаНДС_Аванс,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ОтражениеНачисленияНДС
	|						И НЕ НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ОтражениеНДСКВычету
	|					ТОГДА НДСЗаписиКнигиПродаж.ДоговорКонтрагента
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ
	|	КОНЕЦ КАК ДоговорАванса,
	|	ДанныеПервичныхДокументовСчетФактура.ДатаРегистратора КАК СчетФактураДата,
	|	НДСЗаписиКнигиПродаж.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	ВЫБОР
	|		КОГДА (НДСЗаписиКнигиПродаж.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	|				ИЛИ НДСЗаписиКнигиПродаж.Регистратор ССЫЛКА Документ.КорректировкаПоступления)
	|				И НДСЗаписиКнигиПродаж.СуммаБезНДС + НДСЗаписиКнигиПродаж.НДС < 0
	|			ТОГДА ИСТИНА
	|		КОГДА НДСЗаписиКнигиПродаж.Регистратор ССЫЛКА Документ.СчетФактураВыданный
	|				И НДСЗаписиКнигиПродаж.СуммаБезНДС + НДСЗаписиКнигиПродаж.НДС < 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Исправление,
	|	НДСЗаписиКнигиПродаж.НомерДокументаОплаты,
	|	НДСЗаписиКнигиПродаж.ДатаДокументаОплаты,
	|	НДСЗаписиКнигиПродаж.КодВидаОперации
	|ПОМЕСТИТЬ ЗаписиКнигиПродаж
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументовСчетФактура
	|		ПО НДСЗаписиКнигиПродаж.СчетФактура = ДанныеПервичныхДокументовСчетФактура.Документ
	|			И НДСЗаписиКнигиПродаж.Организация = ДанныеПервичныхДокументовСчетФактура.Организация
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|		ПО НДСЗаписиКнигиПродаж.СчетФактура = СчетФактураВыданный.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументовСчетФактураВыданныйДокументОснование
	|		ПО СчетФактураВыданный.ДокументОснование = ДанныеПервичныхДокументовСчетФактураВыданныйДокументОснование.Документ
	|			И СчетФактураВыданный.Организация = ДанныеПервичныхДокументовСчетФактураВыданныйДокументОснование.Организация
	|
	|ГДЕ
	|	НДСЗаписиКнигиПродаж.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НДСЗаписиКнигиПродаж.Организация В(&Организация)
	|	И НЕ НДСЗаписиКнигиПродаж.ЗаписьДополнительногоЛиста
	|	И НДСЗаписиКнигиПродаж.Активность
	|	И (НДСЗаписиКнигиПродаж.СтавкаНДС <> &СтавкаБезНДС
	|			ИЛИ &ОтражатьРеализацииБезНДС)
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСЗаписиКнигиПродаж.Организация,
	|	НДСЗаписиКнигиПродаж.Период,
	|	НДСЗаписиКнигиПродаж.ДатаОплаты,
	|	НДСЗаписиКнигиПродаж.ДокументОплаты,
	|	НДСЗаписиКнигиПродаж.Событие,
	|	ДанныеПервичныхДокументовСчетФактура.ДатаРегистратора,
	|	НДСЗаписиКнигиПродаж.ИсправленныйСчетФактура,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДанныеПервичныхДокументовСчетФактура.ДатаРегистратора
	|		ИНАЧЕ НДСЗаписиКнигиПродаж.ДатаСобытия
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|			ТОГДА ДанныеПервичныхДокументовСчетФактураВыданныйДокументОснование.ДатаРегистратора
	|		ИНАЧЕ ДанныеПервичныхДокументовСчетФактура.ДатаРегистратора
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_Аванс)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_СуммоваяРазница)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_Аванс)
	|				ИЛИ НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_СуммоваяРазница))
	|				И НЕ НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ОтражениеНачисленияНДС
	|				И НЕ НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ОтражениеНДСКВычету
	|			ТОГДА НДСЗаписиКнигиПродаж.СтавкаНДС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ОтражениеНачисленияНДС
	|						И НЕ НДСЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ОтражениеНДСКВычету
	|					ТОГДА НДСЗаписиКнигиПродаж.ДоговорКонтрагента
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ НДСЗаписиКнигиПродаж.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
	|			ТОГДА НДСЗаписиКнигиПродаж.ИсправленныйСчетФактура
	|		ИНАЧЕ НДСЗаписиКнигиПродаж.СчетФактура
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НДСЗаписиКнигиПродаж.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	|				ИЛИ НДСЗаписиКнигиПродаж.Регистратор ССЫЛКА Документ.КорректировкаПоступления)
	|				И НДСЗаписиКнигиПродаж.СуммаБезНДС + НДСЗаписиКнигиПродаж.НДС < 0
	|			ТОГДА ИСТИНА
	|		КОГДА НДСЗаписиКнигиПродаж.Регистратор ССЫЛКА Документ.СчетФактураВыданный
	|				И НДСЗаписиКнигиПродаж.СуммаБезНДС + НДСЗаписиКнигиПродаж.НДС < 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	|				ИЛИ НДСЗаписиКнигиПродаж.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыВыданные)
	|					И НЕ &ВыводитьПродавцовПоАвансам
	|			ТОГДА НДСЗаписиКнигиПродаж.Организация
	|		КОГДА НДСЗаписиКнигиПродаж.Регистратор ССЫЛКА Документ.КорректировкаПоступления
	|			ТОГДА НДСЗаписиКнигиПродаж.Организация
	|		ИНАЧЕ НДСЗаписиКнигиПродаж.Покупатель
	|	КОНЕЦ,
	|	НДСЗаписиКнигиПродаж.Покупатель,
	|	НДСЗаписиКнигиПродаж.НомерДокументаОплаты,
	|	НДСЗаписиКнигиПродаж.ДатаДокументаОплаты,
	|	НДСЗаписиКнигиПродаж.КодВидаОперации";
		
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаписиКнигиПродаж.СчетФактура КАК СчетФактура
	|ИЗ
	|	ЗаписиКнигиПродаж КАК ЗаписиКнигиПродаж";
	СписокСчетовФактур = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СчетФактура");
	
	ПолучитьСчетаФактурыДокументыКнигаПродаж(Запрос);
	
	// Создаем общий запрос
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаписиКнигиПродаж.Организация КАК Организация,
	|	НАЧАЛОПЕРИОДА(ЗаписиКнигиПродаж.Период, КВАРТАЛ) КАК НалоговыйПериод,
	|	ЗаписиКнигиПродаж.НаАванс КАК НаАванс,
	|	ЗаписиКнигиПродаж.НаСуммовуюРазницу КАК НаСуммовуюРазницу,
	|	ЗаписиКнигиПродаж.СчетФактура КАК СчетФактура,
	|	НАЧАЛОПЕРИОДА(ЗаписиКнигиПродаж.СчетФактураДата, ДЕНЬ) КАК СчетФактураДата,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|				ТОГДА ЗаписиКнигиПродаж.СчетФактура
	|			КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|				ТОГДА ЗаписиКнигиПродаж.СчетФактура
	|			ИНАЧЕ ТаблицаСчетаФактурыДокументы.СчетФактураДокумент
	|		КОНЕЦ, ЗаписиКнигиПродаж.СчетФактура) КАК СчетФактураДокумент,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НЕ ТаблицаСчетаФактурыДокументы.НомерСчетаФактуры ЕСТЬ NULL 
	|				ТОГДА ТаблицаСчетаФактурыДокументы.НомерСчетаФактуры
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|						ТОГДА ВЫБОР
	|								КОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).Исправление
	|										ИЛИ ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|									ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).НомерИсходногоДокумента
	|								ИНАЧЕ ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).Номер
	|							КОНЕЦ
	|					КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|						ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураПолученный).НомерВходящегоДокумента
	|					КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ВосстановлениеНДС
	|						ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.ВосстановлениеНДС).Номер
	|					ИНАЧЕ ТаблицаСчетаФактурыДокументы.НомерСчетаФактуры
	|				КОНЕЦ
	|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК НомерСчетаФактуры,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НЕ ТаблицаСчетаФактурыДокументы.НомерСчетаФактурыСортировка ЕСТЬ NULL 
	|				ТОГДА ТаблицаСчетаФактурыДокументы.НомерСчетаФактурыСортировка
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|						ТОГДА ВЫБОР
	|								КОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).Исправление
	|										ИЛИ ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|									ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).НомерИсходногоДокумента
	|								ИНАЧЕ ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).Номер
	|							КОНЕЦ
	|					КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|						ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураПолученный).НомерВходящегоДокумента
	|					КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ВосстановлениеНДС
	|						ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.ВосстановлениеНДС).Номер
	|					ИНАЧЕ ТаблицаСчетаФактурыДокументы.НомерСчетаФактуры
	|				КОНЕЦ
	|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК НомерСчетаФактурыСортировка,
	|	ЕСТЬNULL(НАЧАЛОПЕРИОДА(ВЫБОР
	|				КОГДА НЕ ТаблицаСчетаФактурыДокументы.ДатаСчетаФактурыСортировка ЕСТЬ NULL 
	|					ТОГДА ТаблицаСчетаФактурыДокументы.ДатаСчетаФактурыСортировка
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|							ТОГДА ВЫБОР
	|									КОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).Исправление
	|											ИЛИ ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|										ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).ДатаИсходногоДокумента
	|									ИНАЧЕ ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).Дата
	|								КОНЕЦ
	|						КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|							ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураПолученный).ДатаВходящегоДокумента
	|						КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ВосстановлениеНДС
	|							ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.ВосстановлениеНДС).Дата
	|						ИНАЧЕ ТаблицаСчетаФактурыДокументы.ДатаСчетаФактуры
	|					КОНЕЦ
	|			КОНЕЦ, ДЕНЬ), НЕОПРЕДЕЛЕНО) КАК ДатаСчетаФактурыСортировка,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НЕ ТаблицаСчетаФактурыДокументы.ДатаСчетаФактуры ЕСТЬ NULL 
	|				ТОГДА ТаблицаСчетаФактурыДокументы.ДатаСчетаФактуры
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|						ТОГДА ВЫБОР
	|								КОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).Исправление
	|										ИЛИ ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|									ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).ДатаИсходногоДокумента
	|								ИНАЧЕ ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураВыданный).Дата
	|							КОНЕЦ
	|					КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|						ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураПолученный).ДатаВходящегоДокумента
	|					КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ВосстановлениеНДС
	|						ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.ВосстановлениеНДС).Дата
	|					ИНАЧЕ ТаблицаСчетаФактурыДокументы.ДатаСчетаФактуры
	|				КОНЕЦ
	|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК ДатаСчетаФактуры,
	|	ЗаписиКнигиПродаж.СтавкаНДС_Аванс КАК СтавкаНДС_Аванс,
	|	ЗаписиКнигиПродаж.ДоговорАванса КАК ДоговорАванса,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПродаж.Контрагент ССЫЛКА Справочник.Организации
	|			ТОГДА ЗаписиКнигиПродаж.Контрагент
	|		КОГДА НЕ ТаблицаСчетаФактурыДокументы.ПродавецДляПечати ЕСТЬ NULL 
	|			ТОГДА ТаблицаСчетаФактурыДокументы.ПродавецДляПечати
	|		ИНАЧЕ ЗаписиКнигиПродаж.Контрагент
	|	КОНЕЦ КАК КонтрагентСсылка,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|					И ЗаписиКнигиПродаж.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				ИЛИ ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ПриходныйКассовыйОрдер
	|					И ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.ПриходныйКассовыйОрдер).ВидОперации = &ПКО_РозничнаяВыручка
	|				ИЛИ ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ОплатаПлатежнойКартой
	|					И ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.ОплатаПлатежнойКартой).ВидОперации = &ОПК_РозничнаяВыручка
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РозничнаяПродажа,
	|	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.КППКонтрагента, """") КАК КППКонтрагента,
	|	ЗаписиКнигиПродаж.ДатаОплаты КАК ДатаОплаты,
	|	ЗаписиКнигиПродаж.ДокументОплаты КАК ДокументОплаты,
	|	ЗаписиКнигиПродаж.Событие КАК Событие,
	|	ВЫБОР
	|		КОГДА &ПравилаПостановления735
	|				И ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.Валюта, &ВалютаРегУчета) = &ВалютаРегУчета
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаСчетаФактурыДокументы.ВсегоПродажВВалюте ЕСТЬ NULL 
	|							И ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|						ТОГДА ВЫБОР
	|								КОГДА ЗаписиКнигиПродаж.ВсегоПродаж < 0
	|									ТОГДА -ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураПолученный).СуммаДокумента
	|								ИНАЧЕ ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураПолученный).СуммаДокумента
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ЗаписиКнигиПродаж.ВсегоПродаж < 0
	|								ТОГДА -ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.ВсегоПродажВВалюте, -ЗаписиКнигиПродаж.ВсегоПродаж)
	|							ИНАЧЕ ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.ВсегоПродажВВалюте, ЗаписиКнигиПродаж.ВсегоПродаж)
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ ЗаписиКнигиПродаж.ВсегоПродаж
	|	КОНЕЦ КАК ВсегоПродаж,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПродаж.НаАванс
	|				ИЛИ ЗаписиКнигиПродаж.НаСуммовуюРазницу
	|			ТОГДА 0
	|		ИНАЧЕ ЗаписиКнигиПродаж.СуммаБезНДС18
	|	КОНЕЦ КАК СуммаБезНДС18,
	|	ЗаписиКнигиПродаж.НДС18 КАК НДС18,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПродаж.НаАванс
	|				ИЛИ ЗаписиКнигиПродаж.НаСуммовуюРазницу
	|			ТОГДА 0
	|		ИНАЧЕ ЗаписиКнигиПродаж.СуммаБезНДС10
	|	КОНЕЦ КАК СуммаБезНДС10,
	|	ЗаписиКнигиПродаж.НДС10 КАК НДС10,
	|	ЗаписиКнигиПродаж.НДС0 КАК НДС0,
	|	ЗаписиКнигиПродаж.СуммаСовсемБезНДС КАК СуммаСовсемБезНДС,
	|	ЗаписиКнигиПродаж.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	ЗаписиКнигиПродаж.Исправление КАК Исправление,
	|	ТаблицаСчетаФактурыДокументы.ДатаИсправления КАК ДатаИсправления,
	|	ТаблицаСчетаФактурыДокументы.НомерИсправления КАК НомерИсправления,
	|	ТаблицаСчетаФактурыДокументы.ДатаКорректировки КАК ДатаКорректировки,
	|	ТаблицаСчетаФактурыДокументы.НомерКорректировки КАК НомерКорректировки,
	|	ТаблицаСчетаФактурыДокументы.ДатаИсправленияКорректировки КАК ДатаИсправленияКорректировки,
	|	ТаблицаСчетаФактурыДокументы.НомерИсправленияКорректировки КАК НомерИсправленияКорректировки,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|					И ЗаписиКнигиПродаж.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				ИЛИ ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ПриходныйКассовыйОрдер
	|					И ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.ПриходныйКассовыйОрдер).ВидОперации = &ПКО_РозничнаяВыручка
	|				ИЛИ ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.ОплатаПлатежнойКартой
	|					И ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.ОплатаПлатежнойКартой).ВидОперации = &ОПК_РозничнаяВыручка
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.ОбрабатыватьНомерДокумента, ЛОЖЬ)
	|	КОНЕЦ КАК ОбрабатыватьНомерДокумента,
	|	ЗаписиКнигиПродаж.ДатаСобытия КАК ДатаСобытия,
	|	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.СводныйКорректировочный, ЛОЖЬ) КАК СводныйКорректировочный,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПродаж.КодВидаОперации <> """"
	|			ТОГДА ЗаписиКнигиПродаж.КодВидаОперации
	|		ИНАЧЕ ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.КодВидаОперации, ""01"")
	|	КОНЕЦ КАК КодВидаОперации,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.Валюта, &ВалютаРегУчета) <> &ВалютаРегУчета
	|			ТОГДА ТаблицаСчетаФактурыДокументы.ВалютаНаименование
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Валюта,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.Валюта, &ВалютаРегУчета) <> &ВалютаРегУчета
	|			ТОГДА ТаблицаСчетаФактурыДокументы.ВалютаКод
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ВалютаКод,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.Валюта, &ВалютаРегУчета) <> &ВалютаРегУчета
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаСчетаФактурыДокументы.ВсегоПродажВВалюте ЕСТЬ NULL 
	|							И ЗаписиКнигиПродаж.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|						ТОГДА ВЫБОР
	|								КОГДА ЗаписиКнигиПродаж.ВсегоПродаж < 0
	|									ТОГДА -ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураПолученный).СуммаДокумента
	|								ИНАЧЕ ВЫРАЗИТЬ(ЗаписиКнигиПродаж.СчетФактура КАК Документ.СчетФактураПолученный).СуммаДокумента
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ЗаписиКнигиПродаж.ВсегоПродаж < 0
	|								ТОГДА -ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.ВсегоПродажВВалюте, -ЗаписиКнигиПродаж.ВсегоПродаж)
	|							ИНАЧЕ ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.ВсегоПродажВВалюте, ЗаписиКнигиПродаж.ВсегоПродаж)
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВсегоПродажВВалюте,
	|	ЗаписиКнигиПродаж.НомерДокументаОплаты КАК НомерДокументаОплаты,
	|	ЗаписиКнигиПродаж.ДатаДокументаОплаты КАК ДатаДокументаОплаты,
	|	ТаблицаСчетаФактурыДокументы.ПосредникСсылка,
	|	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.СводныйКомиссионный, ЛОЖЬ) КАК СводныйКомиссионный
	|ПОМЕСТИТЬ ПодготовленныеЗаписиКнигиПродаж
	|ИЗ
	|	ЗаписиКнигиПродаж КАК ЗаписиКнигиПродаж
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТаблицаСчетаФактурыДокументы.СчетФактура КАК СчетФактура,
	|			ТаблицаСчетаФактурыДокументы.ДоговорАванса КАК ДоговорАванса,
	|			ТаблицаСчетаФактурыДокументы.СтавкаНДСАванса КАК СтавкаНДСАванса,
	|			МИНИМУМ(ТаблицаСчетаФактурыДокументы.Приоритет) КАК МинимумПриоритет,
	|			ТаблицаСчетаФактурыДокументы.КонтрагентПоСчетуФактуре КАК КонтрагентПоСчетуФактуре
	|		ИЗ
	|			ТаблицаСчетаФактурыДокументы КАК ТаблицаСчетаФактурыДокументы
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТаблицаСчетаФактурыДокументы.СчетФактура,
	|			ТаблицаСчетаФактурыДокументы.ДоговорАванса,
	|			ТаблицаСчетаФактурыДокументы.СтавкаНДСАванса,
	|			ТаблицаСчетаФактурыДокументы.НомерСчетаФактуры,
	|			ТаблицаСчетаФактурыДокументы.КонтрагентПоСчетуФактуре) КАК Приоритеты
	|		ПО ЗаписиКнигиПродаж.СчетФактура = Приоритеты.СчетФактура
	|			И ЗаписиКнигиПродаж.ДоговорАванса = Приоритеты.ДоговорАванса
	|			И ЗаписиКнигиПродаж.СтавкаНДС_Аванс = Приоритеты.СтавкаНДСАванса
	|			И ЗаписиКнигиПродаж.КонтрагентПоСчетуФактуре = Приоритеты.КонтрагентПоСчетуФактуре
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСчетаФактурыДокументы КАК ТаблицаСчетаФактурыДокументы
	|		ПО (Приоритеты.СчетФактура = ТаблицаСчетаФактурыДокументы.СчетФактура)
	|			И (Приоритеты.МинимумПриоритет = ТаблицаСчетаФактурыДокументы.Приоритет)
	|			И (Приоритеты.ДоговорАванса = ТаблицаСчетаФактурыДокументы.ДоговорАванса)
	|			И (Приоритеты.СтавкаНДСАванса = ТаблицаСчетаФактурыДокументы.СтавкаНДСАванса)
	|			И (Приоритеты.КонтрагентПоСчетуФактуре = ТаблицаСчетаФактурыДокументы.КонтрагентПоСчетуФактуре)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ОтбиратьПоКонтрагенту = ИСТИНА
	|				ТОГДА ВЫБОР
	|						КОГДА НЕ ТаблицаСчетаФактурыДокументы.ПродавецДляПечати ЕСТЬ NULL 
	|								И ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ОбособленноеПодразделение
	|							ТОГДА ТаблицаСчетаФактурыДокументы.ПродавецДляПечати.ГоловнойКонтрагент = &КонтрагентДляОтбора
	|						КОГДА НЕ ТаблицаСчетаФактурыДокументы.ПродавецДляПечати ЕСТЬ NULL 
	|							ТОГДА ТаблицаСчетаФактурыДокументы.ПродавецДляПечати = &КонтрагентДляОтбора
	|						КОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.Контрагент КАК Справочник.Контрагенты).ОбособленноеПодразделение
	|							ТОГДА ВЫРАЗИТЬ(ЗаписиКнигиПродаж.Контрагент КАК Справочник.Контрагенты).ГоловнойКонтрагент = &КонтрагентДляОтбора
	|						ИНАЧЕ ЗаписиКнигиПродаж.Контрагент = &КонтрагентДляОтбора
	|					КОНЕЦ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	
	Если НЕ СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме 
		И СтруктураПараметров.ОтбиратьПоКонтрагенту 
		И ОбщегоНазначения.ОбъектЯвляетсяГруппой(СтруктураПараметров.КонтрагентДляОтбора) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " = &КонтрагентДляОтбора", " В ИЕРАРХИИ(&КонтрагентДляОтбора)");
		
	КонецЕсли;
	
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПодготовленныеЗаписиКнигиПродаж.КонтрагентСсылка КАК Ссылка,
	|	ПодготовленныеЗаписиКнигиПродаж.ДатаСчетаФактурыСортировка КАК ДатаСведений
	|ПОМЕСТИТЬ СсылкиНаДаты
	|ИЗ
	|	ПодготовленныеЗаписиКнигиПродаж КАК ПодготовленныеЗаписиКнигиПродаж
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПодготовленныеЗаписиКнигиПродаж.ПосредникСсылка,
	|	ПодготовленныеЗаписиКнигиПродаж.ДатаСчетаФактурыСортировка
	|ИЗ
	|	ПодготовленныеЗаписиКнигиПродаж КАК ПодготовленныеЗаписиКнигиПродаж";
	
	Запрос.Выполнить();
	
	РегистрационныеСведенияНаДаты(Запрос.МенеджерВременныхТаблиц);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПодготовленныеЗаписиКнигиПродаж.Организация,
	|	ПодготовленныеЗаписиКнигиПродаж.НалоговыйПериод КАК НалоговыйПериод,
	|	ПодготовленныеЗаписиКнигиПродаж.НаАванс,
	|	ПодготовленныеЗаписиКнигиПродаж.НаСуммовуюРазницу,
	|	ПодготовленныеЗаписиКнигиПродаж.СчетФактура,
	|	ПодготовленныеЗаписиКнигиПродаж.СчетФактураДата,
	|	ПодготовленныеЗаписиКнигиПродаж.СчетФактураДокумент КАК СчетФактураДокумент,
	|	ПодготовленныеЗаписиКнигиПродаж.НомерСчетаФактуры,
	|	ПодготовленныеЗаписиКнигиПродаж.НомерСчетаФактурыСортировка КАК НомерСчетаФактурыСортировка,
	|	ПодготовленныеЗаписиКнигиПродаж.ДатаСчетаФактурыСортировка КАК ДатаСчетаФактурыСортировка,
	|	ПодготовленныеЗаписиКнигиПродаж.ДатаСчетаФактуры,
	|	ПодготовленныеЗаписиКнигиПродаж.СтавкаНДС_Аванс,
	|	ПодготовленныеЗаписиКнигиПродаж.ДоговорАванса КАК ДоговорАванса,
	|	ПодготовленныеЗаписиКнигиПродаж.КонтрагентСсылка КАК Контрагент,
	|	ЕСТЬNULL(СведенияОПокупателях.ИНН, """") КАК ПокупательИНН,
	|	ВЫБОР
	|		КОГДА ПодготовленныеЗаписиКнигиПродаж.КППКонтрагента = """"
	|			ТОГДА ЕСТЬNULL(СведенияОПокупателях.КПП, """")
	|		ИНАЧЕ ПодготовленныеЗаписиКнигиПродаж.КППКонтрагента
	|	КОНЕЦ КАК ПокупательКПП,
	|	ВЫБОР
	|		КОГДА ПодготовленныеЗаписиКнигиПродаж.РозничнаяПродажа
	|			ТОГДА &ТекстРозничнаяПродажа
	|		ИНАЧЕ ЕСТЬNULL(СведенияОПокупателях.Наименование, """")
	|	КОНЕЦ КАК Покупатель,
	|	ПодготовленныеЗаписиКнигиПродаж.ДатаОплаты КАК ДатаОплаты,
	|	ПодготовленныеЗаписиКнигиПродаж.ДокументОплаты,
	|	ПодготовленныеЗаписиКнигиПродаж.Событие,
	|	ПодготовленныеЗаписиКнигиПродаж.ВсегоПродаж КАК ВсегоПродаж,
	|	ПодготовленныеЗаписиКнигиПродаж.СуммаБезНДС18 КАК СуммаБезНДС18,
	|	ПодготовленныеЗаписиКнигиПродаж.НДС18 КАК НДС18,
	|	ПодготовленныеЗаписиКнигиПродаж.СуммаБезНДС10 КАК СуммаБезНДС10,
	|	ПодготовленныеЗаписиКнигиПродаж.НДС10 КАК НДС10,
	|	ПодготовленныеЗаписиКнигиПродаж.НДС0 КАК НДС0,
	|	ПодготовленныеЗаписиКнигиПродаж.СуммаСовсемБезНДС КАК СуммаСовсемБезНДС,
	|	ПодготовленныеЗаписиКнигиПродаж.ИсправленныйСчетФактура,
	|	ПодготовленныеЗаписиКнигиПродаж.Исправление КАК Исправление,
	|	ПодготовленныеЗаписиКнигиПродаж.ДатаИсправления,
	|	ПодготовленныеЗаписиКнигиПродаж.НомерИсправления,
	|	ПодготовленныеЗаписиКнигиПродаж.ДатаКорректировки,
	|	ПодготовленныеЗаписиКнигиПродаж.НомерКорректировки,
	|	ПодготовленныеЗаписиКнигиПродаж.ДатаИсправленияКорректировки,
	|	ПодготовленныеЗаписиКнигиПродаж.НомерИсправленияКорректировки,
	|	ПодготовленныеЗаписиКнигиПродаж.ОбрабатыватьНомерДокумента,
	|	ПодготовленныеЗаписиКнигиПродаж.ДатаСобытия,
	|	ПодготовленныеЗаписиКнигиПродаж.СводныйКорректировочный КАК СводныйКорректировочный,
	|	ПодготовленныеЗаписиКнигиПродаж.КодВидаОперации,
	|	ПодготовленныеЗаписиКнигиПродаж.Валюта,
	|	ПодготовленныеЗаписиКнигиПродаж.ВалютаКод,
	|	ПодготовленныеЗаписиКнигиПродаж.ВсегоПродажВВалюте,
	|	ПодготовленныеЗаписиКнигиПродаж.НомерДокументаОплаты КАК НомерДокументаОплаты,
	|	ПодготовленныеЗаписиКнигиПродаж.ДатаДокументаОплаты КАК ДатаДокументаОплаты,
	|	ПодготовленныеЗаписиКнигиПродаж.ПосредникСсылка,
	|	ЕСТЬNULL(СведенияОПосредниках.Наименование, """") КАК Посредник,
	|	ЕСТЬNULL(СведенияОПосредниках.ИНН, """") КАК ПосредникИНН,
	|	ЕСТЬNULL(СведенияОПосредниках.КПП, """") КАК ПосредникКПП,
	|	ПодготовленныеЗаписиКнигиПродаж.СводныйКомиссионный КАК СводныйКомиссионный
	|ИЗ
	|	ПодготовленныеЗаписиКнигиПродаж КАК ПодготовленныеЗаписиКнигиПродаж
	|		ЛЕВОЕ СОЕДИНЕНИЕ СведенияОСсылкахНаДаты КАК СведенияОПокупателях
	|		ПО (СведенияОПокупателях.Ссылка = ПодготовленныеЗаписиКнигиПродаж.КонтрагентСсылка)
	|			И (СведенияОПокупателях.ДатаСведений = ПодготовленныеЗаписиКнигиПродаж.ДатаСчетаФактурыСортировка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ СведенияОСсылкахНаДаты КАК СведенияОПосредниках
	|		ПО (СведенияОПосредниках.Ссылка = ПодготовленныеЗаписиКнигиПродаж.ПосредникСсылка)
	|			И (СведенияОПосредниках.ДатаСведений = ПодготовленныеЗаписиКнигиПродаж.ДатаСчетаФактурыСортировка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПодготовленныеЗаписиКнигиПродаж.НалоговыйПериод,
	|	ПодготовленныеЗаписиКнигиПродаж.ДатаСчетаФактурыСортировка,
	|	ПодготовленныеЗаписиКнигиПродаж.НомерСчетаФактурыСортировка,
	|	ПодготовленныеЗаписиКнигиПродаж.Исправление
	|ИТОГИ
	|	МИНИМУМ(НомерСчетаФактурыСортировка),
	|	МИНИМУМ(ДатаСчетаФактурыСортировка),
	|	МАКСИМУМ(Контрагент),
	|	МАКСИМУМ(Покупатель),
	|	МАКСИМУМ(ДатаОплаты),
	|	ВЫБОР
	|		КОГДА &ПравилаПостановления735
	|			ТОГДА МАКСИМУМ(ПодготовленныеЗаписиКнигиПродаж.ВсегоПродаж)
	|		ИНАЧЕ СУММА(ПодготовленныеЗаписиКнигиПродаж.ВсегоПродаж)
	|	КОНЕЦ КАК ВсегоПродаж,
	|	СУММА(СуммаБезНДС18),
	|	СУММА(НДС18),
	|	СУММА(СуммаБезНДС10),
	|	СУММА(НДС10),
	|	СУММА(НДС0),
	|	СУММА(СуммаСовсемБезНДС),
	|	МАКСИМУМ(СводныйКорректировочный),
	|	МАКСИМУМ(НомерДокументаОплаты),
	|	МАКСИМУМ(ДатаДокументаОплаты),
	|	МАКСИМУМ(СводныйКомиссионный)
	|ПО
	|	ОБЩИЕ,
	|	НалоговыйПериод,
	|	СчетФактураДокумент,
	|	ДоговорАванса,
	|	Исправление";
	
	Если СтруктураПараметров.ГруппироватьПоКонтрагентам И Не СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО
	               |	ОБЩИЕ,", "ПО
	               |	ОБЩИЕ, Контрагент, ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "УПОРЯДОЧИТЬ ПО", "УПОРЯДОЧИТЬ ПО Покупатель, ");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить();
	
	Если СтруктураПараметров.Свойство("ДанныеДляПроверкиКонтрагентов") 
		И СтруктураПараметров.ДанныеДляПроверкиКонтрагентов.ИспользованиеПроверкиВозможно
		И НЕ СтруктураПараметров.ДанныеДляПроверкиКонтрагентов.ВыводитьТолькоНекорректныхКонтрагентов 
		И СтруктураПараметров.ДанныеДляПроверкиКонтрагентов.Свойство("АдресДанныхКниги") Тогда
		
		СтруктураПараметров.ДанныеДляПроверкиКонтрагентов.АдресДанныхКниги = ПоместитьВоВременноеХранилище(Выборка, 
			СтруктураПараметров.ДанныеДляПроверкиКонтрагентов.АдресДанныхКниги);
	КонецЕсли;

	Возврат Выборка;
	
КонецФункции

Процедура УстановитьПараметрыЗапросаКнигиПродаж(Запрос, СтруктураПараметров)
	
	Запрос.УстановитьПараметр("НачалоПериода", СтруктураПараметров.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(СтруктураПараметров.КонецПериода));
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.СписокОрганизаций);
	Запрос.УстановитьПараметр("ОтбиратьПоКонтрагенту", 
		НЕ СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме И СтруктураПараметров.ОтбиратьПоКонтрагенту);
	Запрос.УстановитьПараметр("КонтрагентДляОтбора", СтруктураПараметров.КонтрагентДляОтбора);
	Запрос.УстановитьПараметр("ВыводитьПродавцовПоАвансам", СтруктураПараметров.ВыводитьПродавцовПоАвансам);
	Запрос.УстановитьПараметр("ВалютаРегУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	
	ДатаПроверкиПараметровУчета ='00010101';
	ЗаполнениеДокументовОтчетности = СтруктураПараметров.ЗаполнениеДокумента ИЛИ СтруктураПараметров.ЗаполнениеДекларации;
	
	Если ЗаполнениеДокументовОтчетности И СтруктураПараметров.ЗаписьДополнительногоЛиста Тогда
		Запрос.УстановитьПараметр("НачалоНалоговогоПериода", СтруктураПараметров.НачалоНалоговогоПериода); 
		Запрос.УстановитьПараметр("КонецНалоговогоПериода", КонецДня(СтруктураПараметров.КонецНалоговогоПериода));
		ДатаПроверкиПараметровУчета = СтруктураПараметров.КонецНалоговогоПериода;
	Иначе
		ДатаПроверкиПараметровУчета = СтруктураПараметров.КонецПериода;
	КонецЕсли;
	
	ПрименяетсяОсвобождениеОтУплатыНДС = 
		УчетнаяПолитика.ПрименяетсяОсвобождениеОтУплатыНДС(СтруктураПараметров.Организация, ДатаПроверкиПараметровУчета);
	Запрос.УстановитьПараметр("ПравилаПостановления735", 
		УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(ДатаПроверкиПараметровУчета) = 3);
	ОтражатьРеализацииБезНДС = ДатаПроверкиПараметровУчета < '20141001' ИЛИ ПрименяетсяОсвобождениеОтУплатыНДС;
	Запрос.УстановитьПараметр("ОтражатьРеализацииБезНДС", ОтражатьРеализацииБезНДС);
		
	СтавкиНДС18 = Новый Массив();
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18);
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18_118);
	
	СтавкиНДС10 = Новый Массив();
	СтавкиНДС10.Добавить(Перечисления.СтавкиНДС.НДС10);
	СтавкиНДС10.Добавить(Перечисления.СтавкиНДС.НДС10_110);
	
	СтавкаНДС0 = Перечисления.СтавкиНДС.НДС0;
	СтавкаБезНДС = Перечисления.СтавкиНДС.БезНДС;
		
	Запрос.УстановитьПараметр("СтавкиНДС18"	, СтавкиНДС18);
	Запрос.УстановитьПараметр("СтавкиНДС10"	, СтавкиНДС10);
	Запрос.УстановитьПараметр("СтавкаНДС0"	, СтавкаНДС0);
	Запрос.УстановитьПараметр("СтавкаБезНДС", СтавкаБезНДС);
	
	ВидыЦенностей_СобственныеСФ = Новый Массив;
	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.ВнутреннееПотребление);
	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);

	Запрос.УстановитьПараметр("ВидыЦенностей_СобственныеСФ"	, ВидыЦенностей_СобственныеСФ);
	
	ВидыЦенностей_Аванс = Новый Массив;
	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.ВозвратАвансовПолученных);
	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.АвансыВыданные);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_Аванс"	, ВидыЦенностей_Аванс);
	
	ВидыЦенностей_АвансСобственные = Новый Массив;
	ВидыЦенностей_АвансСобственные.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностей_АвансСобственные.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	ВидыЦенностей_АвансСобственные.Добавить(Перечисления.ВидыЦенностей.ВозвратАвансовПолученных);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_АвансСобственные"	, ВидыЦенностей_АвансСобственные);
	
	ВидыЦенностей_СуммоваяРазница = Новый Массив;
	ВидыЦенностей_СуммоваяРазница.Добавить(Перечисления.ВидыЦенностей.СуммыСвязанныеСРасчетамиПоОплате);
	Запрос.УстановитьПараметр("ВидыЦенностей_СуммоваяРазница"	, ВидыЦенностей_СуммоваяРазница);
	
	МассивДокументовИсправлений = Новый Массив;
	МассивДокументовИсправлений.Добавить(Неопределено);
	
	ТипыДокументовИсправлений	= Метаданные.РегистрыНакопления.НДСЗаписиКнигиПродаж.Измерения.ИсправленныйСчетФактура.Тип;
	Для Каждого МетаданныеДокумента Из Метаданные.Документы Цикл
		
		Если ТипыДокументовИсправлений.СодержитТип(Тип("ДокументСсылка." + МетаданныеДокумента.Имя)) Тогда
			МассивДокументовИсправлений.Добавить(Документы[МетаданныеДокумента.Имя].ПустаяСсылка());
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ПустыеДокументыИсправления", МассивДокументовИсправлений);
	
	Запрос.УстановитьПараметр("ПКО_РозничнаяВыручка", Перечисления.ВидыОперацийПКО.РозничнаяВыручка);
	Запрос.УстановитьПараметр("ОПК_РозничнаяВыручка", Перечисления.ВидыОперацийОплатаПлатежнойКартой.РозничнаяВыручка);
	
	Запрос.УстановитьПараметр("ТекстРозничнаяПродажа",
		НСтр("ru = 'Розничная продажа'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));

КонецПроцедуры

Функция ПолучитьИтогиЗаПериодКнигаПродаж(СтруктураПараметров) Экспорт
	
	// Создаем общий запрос
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(СУММА(ЗаписиКнигиПродаж.ВсегоПродаж), 0) КАК ВсегоПродаж,
	|	ЕСТЬNULL(СУММА(ЗаписиКнигиПродаж.СуммаБезНДС18), 0) КАК СуммаБезНДС18,
	|	ЕСТЬNULL(СУММА(ЗаписиКнигиПродаж.НДС18), 0) КАК НДС18,
	|	ЕСТЬNULL(СУММА(ЗаписиКнигиПродаж.СуммаБезНДС10), 0) КАК СуммаБезНДС10,
	|	ЕСТЬNULL(СУММА(ЗаписиКнигиПродаж.НДС10), 0) КАК НДС10,
	|	ЕСТЬNULL(СУММА(ЗаписиКнигиПродаж.НДС0), 0) КАК НДС0,
	|	ЕСТЬNULL(СУММА(ЗаписиКнигиПродаж.СуммаСовсемБезНДС), 0) КАК СуммаСовсемБезНДС
	|ИЗ
	|	(ВЫБРАТЬ
	|		НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот КАК ВсегоПродаж,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС18)
	|					И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_Аванс)
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаБезНДС18,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС18)
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК НДС18,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС10)
	|					И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_Аванс)
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаБезНДС10,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС10)
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК НДС10,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС = &СтавкаНДС0
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК НДС0,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС = &СтавкаБезНДС
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаСовсемБезНДС
	|	ИЗ
	|		РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				Период,
	|				Организация В (&Организация)
	|					И (СтавкаНДС <> &СтавкаБезНДС
	|						ИЛИ &ОтражатьРеализацииБезНДС)
	|					И НЕ ЗаписьДополнительногоЛиста = ИСТИНА) КАК НДСЗаписиКнигиПродажОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС18)
	|					И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_Аванс)
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС18)
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС10)
	|					И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_Аванс)
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС10)
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС = &СтавкаНДС0
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС = &СтавкаБезНДС
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|				&НачалоПериода,
	|				&МоментФормированияДопЛиста,
	|				Период,
	|				Организация В (&Организация)
	|					И (СтавкаНДС <> &СтавкаБезНДС
	|						ИЛИ &ОтражатьРеализацииБезНДС)
	|					И (ЗаписьДополнительногоЛиста = ИСТИНА
	|						И КорректируемыйПериод >= &НачалоПериода
	|						И КорректируемыйПериод <= &КонецПериода)) КАК НДСЗаписиКнигиПродажОбороты) КАК ЗаписиКнигиПродаж";
	
	Запрос.УстановитьПараметр("НачалоПериода", СтруктураПараметров.НалоговыйПериод);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(СтруктураПараметров.КонецНалоговогоПериода));
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.СписокОрганизаций);
	Запрос.УстановитьПараметр("МоментФормированияДопЛиста", 
		Новый Граница(НачалоДня(СтруктураПараметров.ДатаФормированияДопЛиста),ВидГраницы.Исключая));
		
	ДатаПроверкиПараметровУчета = КонецДня(СтруктураПараметров.КонецНалоговогоПериода);
		
	ПрименяетсяОсвобождениеОтУплатыНДС = 
		УчетнаяПолитика.ПрименяетсяОсвобождениеОтУплатыНДС(СтруктураПараметров.Организация, ДатаПроверкиПараметровУчета);
		
	ОтражатьРеализацииБезНДС = ДатаПроверкиПараметровУчета < '20141001' ИЛИ ПрименяетсяОсвобождениеОтУплатыНДС;
	Запрос.УстановитьПараметр("ОтражатьРеализацииБезНДС", ОтражатьРеализацииБезНДС);
	
	СтавкиНДС18 = Новый Массив();
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18);
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18_118);
	
	СтавкиНДС10 = Новый Массив();
	СтавкиНДС10.Добавить(Перечисления.СтавкиНДС.НДС10);
	СтавкиНДС10.Добавить(Перечисления.СтавкиНДС.НДС10_110);
	
	СтавкаНДС0 = Перечисления.СтавкиНДС.НДС0;
	СтавкаБезНДС = Перечисления.СтавкиНДС.БезНДС;
	
	Запрос.УстановитьПараметр("СтавкиНДС18",  СтавкиНДС18);
	Запрос.УстановитьПараметр("СтавкиНДС10",  СтавкиНДС10);
	Запрос.УстановитьПараметр("СтавкаНДС0",   СтавкаНДС0);
	Запрос.УстановитьПараметр("СтавкаБезНДС", СтавкаБезНДС);
	
	ВидыЦенностей_Аванс = Новый Массив;
	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.ВозвратАвансовПолученных);
	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.АвансыВыданные);
	// Для итогов авансы можно учитывать вместе с выделенными суммовыми разницами - методика отражения в книге одинаковая
	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.СуммыСвязанныеСРасчетамиПоОплате);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_Аванс"	, ВидыЦенностей_Аванс);
	
	ИтогЗаПериод = Запрос.Выполнить();
	
	Если НЕ ИтогЗаПериод.Пустой() Тогда
		
		Возврат ИтогЗаПериод.Выгрузить()[0];
		
	Иначе
		
		ИтогЗаПериод = Новый Структура;
		ИтогЗаПериод.Вставить("ВсегоПродаж", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		ИтогЗаПериод.Вставить("СуммаБезНДС10", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		ИтогЗаПериод.Вставить("НДС10", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		ИтогЗаПериод.Вставить("СуммаБезНДС18", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		ИтогЗаПериод.Вставить("НДС18", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		ИтогЗаПериод.Вставить("НДС0", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		ИтогЗаПериод.Вставить("СуммаСовсемБезНДС", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		
		Возврат ИтогЗаПериод;
		
	КонецЕсли;
	
КонецФункции

// Журнал учета счетов-фактур

Функция ПолучитьЗаписиЖурналаСчетовФактур(СтруктураПараметров) Экспорт
	Перем СформироватьОтчетПоСтандартнойФорме;
	Перем ГруппироватьПоКонтрагентам;
	Перем ОтбиратьПоКонтрагенту;
	Перем КонтрагентДляОтбора, МассивКонтрагентовДляОтбора;
	Перем КонецПериодаОтчета;
	
	Если НЕ СтруктураПараметров.Свойство("СформироватьОтчетПоСтандартнойФорме", СформироватьОтчетПоСтандартнойФорме) Тогда
		СформироватьОтчетПоСтандартнойФорме = Истина;
	КонецЕсли;
	
	Если НЕ СтруктураПараметров.Свойство("ЗаполнениеДекларации") Тогда
		СтруктураПараметров.Вставить("ЗаполнениеДекларации", Ложь);
	ИначеЕсли СтруктураПараметров.ЗаполнениеДекларации И СтруктураПараметров.НалоговыйПериод < '20150101' Тогда
		СтруктураПараметров.ЗаполнениеДекларации = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураПараметров.Свойство("ГруппироватьПоКонтрагентам", ГруппироватьПоКонтрагентам) Тогда
		ГруппироватьПоКонтрагентам = Ложь;
	КонецЕсли;
	ГруппироватьПоКонтрагентам = НЕ СформироватьОтчетПоСтандартнойФорме И ГруппироватьПоКонтрагентам;
		
	Если НЕ СтруктураПараметров.Свойство("ОтбиратьПоКонтрагенту", ОтбиратьПоКонтрагенту) Тогда
		ОтбиратьПоКонтрагенту = Ложь;
	КонецЕсли;
	
	ОтбиратьПоКонтрагенту = НЕ СформироватьОтчетПоСтандартнойФорме И ОтбиратьПоКонтрагенту;
	
	Если ОтбиратьПоКонтрагенту И СтруктураПараметров.Свойство("КонтрагентДляОтбора", КонтрагентДляОтбора) Тогда
		
		// Массив контрагентов и их обособленных подразделений
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Контрагент", КонтрагентДляОтбора);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Контрагенты.Ссылка КАК Контрагент
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	НЕ Контрагенты.ОбособленноеПодразделение
		|	И Контрагенты.Ссылка В ИЕРАРХИИ(&Контрагент)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Контрагенты.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ОбособленноеПодразделение
		|	И Контрагенты.ГоловнойКонтрагент В ИЕРАРХИИ(&Контрагент)";
		
		Результат	= Запрос.Выполнить();
		МассивКонтрагентовДляОтбора	= Результат.Выгрузить().ВыгрузитьКолонку("Контрагент");
		
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СписокОрганизаций",  СтруктураПараметров.СписокОрганизаций);
	Запрос.УстановитьПараметр("Квартал",            НачалоКвартала(СтруктураПараметров.НалоговыйПериод));
	Запрос.УстановитьПараметр("МассивКонтрагентов", МассивКонтрагентовДляОтбора);
		
	// Поддержка возможности формирования отчета за произвольный период
	Если СтруктураПараметров.Свойство("КонецПериодаОтчета", КонецПериодаОтчета) Тогда
		Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(СтруктураПараметров.НалоговыйПериод));
		Запрос.УстановитьПараметр("КонецПериода",  КонецДня(СтруктураПараметров.КонецПериодаОтчета));
		Запрос.УстановитьПараметр("ПравилаПостановления735", 
			УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(СтруктураПараметров.КонецПериодаОтчета) = 3);
	Иначе
		Запрос.УстановитьПараметр("ПравилаПостановления735", 
			УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(СтруктураПараметров.НалоговыйПериод) = 3);		
	КонецЕсли;
	
	// Для совместимости с УП
	МассивПустыеСсылкиСчетовФактур = Новый Массив;
	ТипыРесурса = Метаданные.РегистрыСведений.ЖурналУчетаСчетовФактур.Ресурсы.СчетФактураВыданныйПокупателю.Тип.Типы();
	Для Каждого ТекущийТип Из ТипыРесурса Цикл
		МассивПустыеСсылкиСчетовФактур.Добавить(Документы[Метаданные.НайтиПоТипу(ТекущийТип).Имя].ПустаяСсылка());
	КонецЦикла;
	Если МассивПустыеСсылкиСчетовФактур.Количество() > 1 Тогда
		// Для составных типов может быть не выбрано ничего.
		МассивПустыеСсылкиСчетовФактур.Добавить(Неопределено);
	КонецЕсли;
	Запрос.УстановитьПараметр("МассивПустыеСсылкиСчетовФактур", МассивПустыеСсылкиСчетовФактур);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЖурналУчетаСчетовФактурСрезПоследних.Организация,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СчетФактура КАК СчетФактура,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СчетФактураВыданныйПокупателю,
	|	ЖурналУчетаСчетовФактурСрезПоследних.Контрагент КАК КомитентСсылка,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуре,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДС,
	|	ЖурналУчетаСчетовФактурСрезПоследних.НомерСчетаФактуры КАК НомерСчетаФактурыКомитента,
	|	ЖурналУчетаСчетовФактурСрезПоследних.ДатаСчетаФактуры КАК ДатаСчетаФактурыКомитента,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреРазницаУменьшение,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреРазницаУвеличение,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСРазницаУменьшение,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСРазницаУвеличение,
	|	ЖурналУчетаСчетовФактурСрезПоследних.ПоСтавкеБезНДС,
	|	ЖурналУчетаСчетовФактурСрезПоследних.НомерСчетаФактурыПродавца
	|ПОМЕСТИТЬ ВТ_СчетаФактурыОтКомитента
	|ИЗ
	|	РегистрСведений.ЖурналУчетаСчетовФактур.СрезПоследних(
	|			,
	|			ЧастьЖурнала = ЗНАЧЕНИЕ(Перечисление.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры)
	|				И НЕ СчетФактураВыданныйПокупателю В (&МассивПустыеСсылкиСчетовФактур)
	|				И ДатаВыставленияПолучения < ДАТАВРЕМЯ(2015, 1, 1)) КАК ЖурналУчетаСчетовФактурСрезПоследних
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЖурналУчетаСчетовФактурСрезПоследних.Организация,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СчетФактура,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СчетФактураВыданныйПокупателю,
	|	ЖурналУчетаСчетовФактурСрезПоследних.Контрагент,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреКомиссия,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСКомиссия,
	|	ЖурналУчетаСчетовФактурСрезПоследних.НомерСчетаФактуры,
	|	ЖурналУчетаСчетовФактурСрезПоследних.ДатаСчетаФактуры,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреРазницаУменьшениеКомиссия,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреРазницаУвеличениеКомиссия,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСРазницаУменьшениеКомиссия,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСРазницаУвеличениеКомиссия,
	|	ЖурналУчетаСчетовФактурСрезПоследних.ПоСтавкеБезНДС,
	|	ЖурналУчетаСчетовФактурСрезПоследних.НомерСчетаФактурыПродавца
	|ИЗ
	|	РегистрСведений.ЖурналУчетаСчетовФактур.СрезПоследних(
	|			,
	|			ЧастьЖурнала = ЗНАЧЕНИЕ(Перечисление.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры)
	|				И НЕ СчетФактураВыданныйПокупателю В (&МассивПустыеСсылкиСчетовФактур)
	|				И ДатаВыставленияПолучения >= ДАТАВРЕМЯ(2015, 1, 1)) КАК ЖурналУчетаСчетовФактурСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЖурналУчетаСчетовФактурСрезПоследних.НомерСтроки,
	|	ЖурналУчетаСчетовФактурСрезПоследних.Организация,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактурСрезПоследних.Продавец <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				И ЖурналУчетаСчетовФактурСрезПоследних.ЧастьЖурнала = ЗНАЧЕНИЕ(Перечисление.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры)
	|			ТОГДА ЖурналУчетаСчетовФактурСрезПоследних.Продавец
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.Контрагент
	|	КОНЕЦ КАК Контрагент,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СчетФактура,
	|	ЖурналУчетаСчетовФактурСрезПоследних.ЧастьЖурнала,
	|	ЖурналУчетаСчетовФактурСрезПоследних.ДатаВыставленияПолучения,
	|	ЖурналУчетаСчетовФактурСрезПоследних.КодСпособаВыставленияПолучения,
	|	ЖурналУчетаСчетовФактурСрезПоследних.КодВидаОперации,
	|	ЖурналУчетаСчетовФактурСрезПоследних.НомерСчетаФактуры,
	|	ЖурналУчетаСчетовФактурСрезПоследних.ДатаСчетаФактуры,
	|	ЖурналУчетаСчетовФактурСрезПоследних.НомерКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактурСрезПоследних.ДатаКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактурСрезПоследних.НомерИсправления,
	|	ЖурналУчетаСчетовФактурСрезПоследних.ДатаИсправления,
	|	ЖурналУчетаСчетовФактурСрезПоследних.НомерИсправленияКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактурСрезПоследних.ДатаИсправленияКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактурСрезПоследних.Валюта,
	|	ВЫБОР
	|		КОГДА &ПравилаПостановления735
	|			ТОГДА ЕСТЬNULL(ВТ_СчетаФактурыОтКомитента.СуммаПоСчетуФактуре, ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуре)
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуре
	|	КОНЕЦ КАК СуммаПоСчетуФактуре,
	|	ВЫБОР
	|		КОГДА &ПравилаПостановления735
	|			ТОГДА ЕСТЬNULL(ВТ_СчетаФактурыОтКомитента.СуммаНДС, ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДС)
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДС
	|	КОНЕЦ КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА &ПравилаПостановления735
	|			ТОГДА ЕСТЬNULL(ВТ_СчетаФактурыОтКомитента.СуммаПоСчетуФактуреРазницаУменьшение, ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреРазницаУменьшение)
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреРазницаУменьшение
	|	КОНЕЦ КАК СуммаПоСчетуФактуреРазницаУменьшение,
	|	ВЫБОР
	|		КОГДА &ПравилаПостановления735
	|			ТОГДА ЕСТЬNULL(ВТ_СчетаФактурыОтКомитента.СуммаПоСчетуФактуреРазницаУвеличение, ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреРазницаУвеличение)
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреРазницаУвеличение
	|	КОНЕЦ КАК СуммаПоСчетуФактуреРазницаУвеличение,
	|	ВЫБОР
	|		КОГДА &ПравилаПостановления735
	|			ТОГДА ЕСТЬNULL(ВТ_СчетаФактурыОтКомитента.СуммаНДСРазницаУменьшение, ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСРазницаУменьшение)
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСРазницаУменьшение
	|	КОНЕЦ КАК СуммаНДСРазницаУменьшение,
	|	ВЫБОР
	|		КОГДА &ПравилаПостановления735
	|			ТОГДА ЕСТЬNULL(ВТ_СчетаФактурыОтКомитента.СуммаНДСРазницаУвеличение, ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСРазницаУвеличение)
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСРазницаУвеличение
	|	КОНЕЦ КАК СуммаНДСРазницаУвеличение,
	|	ВЫБОР
	|		КОГДА &ПравилаПостановления735
	|			ТОГДА ЕСТЬNULL(ВТ_СчетаФактурыОтКомитента.ПоСтавкеБезНДС, ЖурналУчетаСчетовФактурСрезПоследних.ПоСтавкеБезНДС)
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.ПоСтавкеБезНДС
	|	КОНЕЦ КАК ПоСтавкеБезНДС,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СчетФактураНеВыставляется,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактурСрезПоследних.Продавец <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				И ЖурналУчетаСчетовФактурСрезПоследних.ЧастьЖурнала = ЗНАЧЕНИЕ(Перечисление.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры)
	|			ТОГДА """"
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.КППКонтрагента
	|	КОНЕЦ КАК КППКонтрагента,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СчетФактураВыданныйПокупателю,
	|	ЖурналУчетаСчетовФактурСрезПоследних.Субкомиссионер КАК СубкомиссионерСсылка,
	|	ЖурналУчетаСчетовФактурСрезПоследних.КодВидаСделки,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактурСрезПоследних.НомерСчетаФактурыПродавца = """"
	|			ТОГДА ЕСТЬNULL(ВТ_СчетаФактурыОтКомитента.КомитентСсылка, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.Продавец
	|	КОНЕЦ КАК КомитентСсылка,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактурСрезПоследних.НомерСчетаФактурыПродавца = """"
	|			ТОГДА ЕСТЬNULL(ВТ_СчетаФактурыОтКомитента.НомерСчетаФактурыКомитента, """")
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.НомерСчетаФактурыПродавца
	|	КОНЕЦ КАК НомерСчетаФактурыКомитента,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактурСрезПоследних.НомерСчетаФактурыПродавца = """"
	|			ТОГДА ЕСТЬNULL(ВТ_СчетаФактурыОтКомитента.ДатаСчетаФактурыКомитента, """")
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.ДатаСчетаФактуры
	|	КОНЕЦ КАК ДатаСчетаФактурыКомитента,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуре КАК СуммаПоСчетуФактуреИтоговая,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДС КАК СуммаНДСИтоговая,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреРазницаУменьшение КАК СуммаПоСчетуФактуреРазницаУменьшениеИтоговая,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреРазницаУвеличение КАК СуммаПоСчетуФактуреРазницаУвеличениеИтоговая,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСРазницаУменьшение КАК СуммаНДСРазницаУменьшениеИтоговая,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСРазницаУвеличение КАК СуммаНДСРазницаУвеличениеИтоговая,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактурСрезПоследних.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|			ТОГДА ЖурналУчетаСчетовФактурСрезПоследних.СчетФактура.СводныйКорректировочный
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СводныйКорректировочный,
	|	ЛОЖЬ КАК СводныйКомиссионный,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактурСрезПоследних.ДатаИсправленияКорректировочногоСчетаФактуры <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ЖурналУчетаСчетовФактурСрезПоследних.ДатаИсправленияКорректировочногоСчетаФактуры
	|		КОГДА ЖурналУчетаСчетовФактурСрезПоследних.ДатаКорректировочногоСчетаФактуры <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ЖурналУчетаСчетовФактурСрезПоследних.ДатаКорректировочногоСчетаФактуры
	|		КОГДА ЖурналУчетаСчетовФактурСрезПоследних.ДатаИсправления <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ЖурналУчетаСчетовФактурСрезПоследних.ДатаИсправления
	|		КОГДА ЖурналУчетаСчетовФактурСрезПоследних.ДатаСчетаФактуры <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ЖурналУчетаСчетовФактурСрезПоследних.ДатаСчетаФактуры
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.Период
	|	КОНЕЦ КАК ДатаСведений
	|ПОМЕСТИТЬ ВТ_ЖурналУчетаСчетовФактурСрезПоследних
	|ИЗ
	|	РегистрСведений.ЖурналУчетаСчетовФактур.СрезПоследних(
	|			&Квартал,
	|			Период = &Квартал
	|				И Организация В (&СписокОрганизаций)
	|				И ДатаВыставленияПолучения < ДАТАВРЕМЯ(2015, 1, 1)) КАК ЖурналУчетаСчетовФактурСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетаФактурыОтКомитента КАК ВТ_СчетаФактурыОтКомитента
	|		ПО ЖурналУчетаСчетовФактурСрезПоследних.СчетФактура = ВТ_СчетаФактурыОтКомитента.СчетФактураВыданныйПокупателю
	|ГДЕ
	|	ЖурналУчетаСчетовФактурСрезПоследних.ДатаВыставленияПолучения <> ДАТАВРЕМЯ(1, 1, 1)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЖурналУчетаСчетовФактурСрезПоследних.НомерСтроки,
	|	ЖурналУчетаСчетовФактурСрезПоследних.Организация,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактурСрезПоследних.Продавец <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				И ЖурналУчетаСчетовФактурСрезПоследних.ЧастьЖурнала = ЗНАЧЕНИЕ(Перечисление.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры)
	|			ТОГДА ЖурналУчетаСчетовФактурСрезПоследних.Продавец
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.Контрагент
	|	КОНЕЦ,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СчетФактура,
	|	ЖурналУчетаСчетовФактурСрезПоследних.ЧастьЖурнала,
	|	ЖурналУчетаСчетовФактурСрезПоследних.ДатаВыставленияПолучения,
	|	ЖурналУчетаСчетовФактурСрезПоследних.КодСпособаВыставленияПолучения,
	|	ЖурналУчетаСчетовФактурСрезПоследних.КодВидаОперацииКомиссия,
	|	ЖурналУчетаСчетовФактурСрезПоследних.НомерСчетаФактуры,
	|	ЖурналУчетаСчетовФактурСрезПоследних.ДатаСчетаФактуры,
	|	ЖурналУчетаСчетовФактурСрезПоследних.НомерКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактурСрезПоследних.ДатаКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактурСрезПоследних.НомерИсправления,
	|	ЖурналУчетаСчетовФактурСрезПоследних.ДатаИсправления,
	|	ЖурналУчетаСчетовФактурСрезПоследних.НомерИсправленияКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактурСрезПоследних.ДатаИсправленияКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактурСрезПоследних.Валюта,
	|	ВЫБОР
	|		КОГДА &ПравилаПостановления735
	|			ТОГДА ЕСТЬNULL(ВТ_СчетаФактурыОтКомитента.СуммаПоСчетуФактуре, ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреКомиссия)
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреКомиссия
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ПравилаПостановления735
	|			ТОГДА ЕСТЬNULL(ВТ_СчетаФактурыОтКомитента.СуммаНДС, ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСКомиссия)
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСКомиссия
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ПравилаПостановления735
	|			ТОГДА ЕСТЬNULL(ВТ_СчетаФактурыОтКомитента.СуммаПоСчетуФактуреРазницаУменьшение, ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреРазницаУменьшениеКомиссия)
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреРазницаУменьшениеКомиссия
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ПравилаПостановления735
	|			ТОГДА ЕСТЬNULL(ВТ_СчетаФактурыОтКомитента.СуммаПоСчетуФактуреРазницаУвеличение, ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреРазницаУвеличениеКомиссия)
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреРазницаУвеличениеКомиссия
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ПравилаПостановления735
	|			ТОГДА ЕСТЬNULL(ВТ_СчетаФактурыОтКомитента.СуммаНДСРазницаУменьшение, ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСРазницаУменьшениеКомиссия)
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСРазницаУменьшениеКомиссия
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ПравилаПостановления735
	|			ТОГДА ЕСТЬNULL(ВТ_СчетаФактурыОтКомитента.СуммаНДСРазницаУвеличение, ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСРазницаУвеличениеКомиссия)
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСРазницаУвеличениеКомиссия
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ПравилаПостановления735
	|			ТОГДА ЕСТЬNULL(ВТ_СчетаФактурыОтКомитента.ПоСтавкеБезНДС, ЖурналУчетаСчетовФактурСрезПоследних.ПоСтавкеБезНДС)
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.ПоСтавкеБезНДС
	|	КОНЕЦ,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СчетФактураНеВыставляется,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактурСрезПоследних.Продавец <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				И ЖурналУчетаСчетовФактурСрезПоследних.ЧастьЖурнала = ЗНАЧЕНИЕ(Перечисление.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры)
	|			ТОГДА """"
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.КППКонтрагента
	|	КОНЕЦ,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СчетФактураВыданныйПокупателю,
	|	ЖурналУчетаСчетовФактурСрезПоследних.Субкомиссионер,
	|	ЖурналУчетаСчетовФактурСрезПоследних.КодВидаСделки,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактурСрезПоследних.НомерСчетаФактурыПродавца = """"
	|			ТОГДА ЕСТЬNULL(ВТ_СчетаФактурыОтКомитента.КомитентСсылка, Значение(Справочник.Контрагенты.ПустаяСсылка))
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.Продавец
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактурСрезПоследних.НомерСчетаФактурыПродавца = """"
	|			ТОГДА ЕСТЬNULL(ВТ_СчетаФактурыОтКомитента.НомерСчетаФактурыКомитента, """")
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.НомерСчетаФактурыПродавца
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактурСрезПоследних.НомерСчетаФактурыПродавца = """"
	|			ТОГДА ЕСТЬNULL(ВТ_СчетаФактурыОтКомитента.ДатаСчетаФактурыКомитента, """")
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.ДатаСчетаФактуры
	|	КОНЕЦ,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреКомиссия,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСКомиссия,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреРазницаУменьшениеКомиссия,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреРазницаУвеличениеКомиссия,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСРазницаУменьшениеКомиссия,
	|	ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСРазницаУвеличениеКомиссия,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактурСрезПоследних.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|			ТОГДА ЖурналУчетаСчетовФактурСрезПоследних.СчетФактура.СводныйКорректировочный
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактурСрезПоследних.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|			ТОГДА ВЫРАЗИТЬ(ЖурналУчетаСчетовФактурСрезПоследних.СчетФактура КАК Документ.СчетФактураВыданный).СводныйКомиссионный
	|		КОГДА ЖурналУчетаСчетовФактурСрезПоследних.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|			ТОГДА ВЫРАЗИТЬ(ЖурналУчетаСчетовФактурСрезПоследних.СчетФактура КАК Документ.СчетФактураПолученный).СводныйКомиссионный
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактурСрезПоследних.ДатаИсправленияКорректировочногоСчетаФактуры <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ЖурналУчетаСчетовФактурСрезПоследних.ДатаИсправленияКорректировочногоСчетаФактуры
	|		КОГДА ЖурналУчетаСчетовФактурСрезПоследних.ДатаКорректировочногоСчетаФактуры <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ЖурналУчетаСчетовФактурСрезПоследних.ДатаКорректировочногоСчетаФактуры
	|		КОГДА ЖурналУчетаСчетовФактурСрезПоследних.ДатаИсправления <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ЖурналУчетаСчетовФактурСрезПоследних.ДатаИсправления
	|		КОГДА ЖурналУчетаСчетовФактурСрезПоследних.ДатаСчетаФактуры <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ЖурналУчетаСчетовФактурСрезПоследних.ДатаСчетаФактуры
	|		ИНАЧЕ ЖурналУчетаСчетовФактурСрезПоследних.Период
	|	КОНЕЦ
	|ИЗ
	|	РегистрСведений.ЖурналУчетаСчетовФактур.СрезПоследних(
	|			&Квартал,
	|			Период = &Квартал
	|				И Организация В (&СписокОрганизаций)
	|				И ДатаВыставленияПолучения >= ДАТАВРЕМЯ(2015, 1, 1)) КАК ЖурналУчетаСчетовФактурСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетаФактурыОтКомитента КАК ВТ_СчетаФактурыОтКомитента
	|		ПО ЖурналУчетаСчетовФактурСрезПоследних.СчетФактура = ВТ_СчетаФактурыОтКомитента.СчетФактураВыданныйПокупателю
	|ГДЕ
	|	ЖурналУчетаСчетовФактурСрезПоследних.ДатаВыставленияПолучения <> ДАТАВРЕМЯ(1, 1, 1)
	|	И (ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреКомиссия <> 0
	|			ИЛИ ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСКомиссия <> 0
	|			ИЛИ ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреРазницаУменьшениеКомиссия <> 0
	|			ИЛИ ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреРазницаУвеличениеКомиссия <> 0
	|			ИЛИ ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСРазницаУменьшениеКомиссия <> 0
	|			ИЛИ ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСРазницаУвеличениеКомиссия <> 0)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЖурналУчетаСчетовФактур.Организация,
	|	ЖурналУчетаСчетовФактур.Контрагент КАК КонтрагентСсылка,
	|	ЖурналУчетаСчетовФактур.КППКонтрагента КАК КППКонтрагента,
	|	ЖурналУчетаСчетовФактур.СчетФактура,
	|	ЖурналУчетаСчетовФактур.ЧастьЖурнала,
	|	ЖурналУчетаСчетовФактур.ДатаВыставленияПолучения,
	|	ЖурналУчетаСчетовФактур.КодСпособаВыставленияПолучения,
	|	ЖурналУчетаСчетовФактур.КодВидаОперации,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактур.ДатаИсправленияКорректировочногоСчетаФактуры <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ЖурналУчетаСчетовФактур.ДатаИсправленияКорректировочногоСчетаФактуры
	|		КОГДА ЖурналУчетаСчетовФактур.ДатаКорректировочногоСчетаФактуры <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ЖурналУчетаСчетовФактур.ДатаКорректировочногоСчетаФактуры
	|		КОГДА ЖурналУчетаСчетовФактур.ДатаИсправления <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ЖурналУчетаСчетовФактур.ДатаИсправления
	|		КОГДА ЖурналУчетаСчетовФактур.ДатаСчетаФактуры <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ЖурналУчетаСчетовФактур.ДатаСчетаФактуры
	|		ИНАЧЕ ЖурналУчетаСчетовФактур.ДатаСведений
	|	КОНЕЦ КАК ДатаСведений,
	|	ЖурналУчетаСчетовФактур.НомерСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.ДатаСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.НомерКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.ДатаКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.НомерИсправления,
	|	ЖурналУчетаСчетовФактур.ДатаИсправления,
	|	ЖурналУчетаСчетовФактур.НомерИсправленияКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.ДатаИсправленияКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.Валюта,
	|	ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУменьшение,
	|	ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУвеличение,
	|	ЖурналУчетаСчетовФактур.СуммаНДСРазницаУменьшение,
	|	ЖурналУчетаСчетовФактур.СуммаНДСРазницаУвеличение,
	|	ЖурналУчетаСчетовФактур.ПоСтавкеБезНДС,
	|	ЖурналУчетаСчетовФактур.СчетФактураНеВыставляется,
	|	ЖурналУчетаСчетовФактур.КодВидаСделки,
	|	ЖурналУчетаСчетовФактур.КомитентСсылка,
	|	ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуре,
	|	ЖурналУчетаСчетовФактур.СуммаНДС,
	|	ЖурналУчетаСчетовФактур.НомерСчетаФактурыКомитента,
	|	ЖурналУчетаСчетовФактур.ДатаСчетаФактурыКомитента,
	|	ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреИтоговая,
	|	ЖурналУчетаСчетовФактур.СуммаНДСИтоговая,
	|	ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУменьшениеИтоговая,
	|	ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУвеличениеИтоговая,
	|	ЖурналУчетаСчетовФактур.СуммаНДСРазницаУменьшениеИтоговая,
	|	ЖурналУчетаСчетовФактур.СуммаНДСРазницаУвеличениеИтоговая,
	|	ЖурналУчетаСчетовФактур.СводныйКорректировочный,
	|	ЖурналУчетаСчетовФактур.СводныйКомиссионный,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ЖурналУчетаСчетовФактур.СчетФактура КАК Документ.СчетФактураВыданный).ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|			ТОГДА ИСТИНА
	|		КОГДА ВЫРАЗИТЬ(ЖурналУчетаСчетовФактур.СчетФактура КАК Документ.СчетФактураПолученный).ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК КорректировочныйСчетФактура,
	|	ВЫРАЗИТЬ(ЖурналУчетаСчетовФактур.СчетФактура КАК Документ.СчетФактураВыданный).Номер КАК СчетФактураВыданныйНомер,
	|	ЖурналУчетаСчетовФактур.СубкомиссионерСсылка
	|ПОМЕСТИТЬ ВТ_ЖурналУчетаСчетовФактурПоКонтрагентам
	|ИЗ
	|	ВТ_ЖурналУчетаСчетовФактурСрезПоследних КАК ЖурналУчетаСчетовФактур
	|ГДЕ
	|	ЖурналУчетаСчетовФактур.Контрагент В(&МассивКонтрагентов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЖурналУчетаСчетовФактур.СчетФактура";

	
	Если НЕ ОтбиратьПоКонтрагенту Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЖурналУчетаСчетовФактур.Контрагент В(&МассивКонтрагентов)", "ИСТИНА");
	КонецЕсли;
	
	// Поддержка возможности формирования отчета за произвольный период
	Если СтруктураПараметров.Свойство("КонецПериодаОтчета", КонецПериодаОтчета) Тогда
		
		ЗаменяемыйСтандартныйТекст1 = "ИЗ
		|	РегистрСведений.ЖурналУчетаСчетовФактур.СрезПоследних(
		|			&Квартал,
		|			Период = &Квартал
		|				И Организация В (&СписокОрганизаций)
		|				И ДатаВыставленияПолучения < ДАТАВРЕМЯ(2015, 1, 1)) КАК ЖурналУчетаСчетовФактурСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетаФактурыОтКомитента КАК ВТ_СчетаФактурыОтКомитента
		|		ПО ЖурналУчетаСчетовФактурСрезПоследних.СчетФактура = ВТ_СчетаФактурыОтКомитента.СчетФактураВыданныйПокупателю
		|ГДЕ
		|	ЖурналУчетаСчетовФактурСрезПоследних.ДатаВыставленияПолучения <> ДАТАВРЕМЯ(1, 1, 1)";
		
				
		ЗаменяемыйСтандартныйТекст2 = "ИЗ
		|	РегистрСведений.ЖурналУчетаСчетовФактур.СрезПоследних(
		|			&Квартал,
		|			Период = &Квартал
		|				И Организация В (&СписокОрганизаций)
		|				И ДатаВыставленияПолучения >= ДАТАВРЕМЯ(2015, 1, 1)) КАК ЖурналУчетаСчетовФактурСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетаФактурыОтКомитента КАК ВТ_СчетаФактурыОтКомитента
		|		ПО ЖурналУчетаСчетовФактурСрезПоследних.СчетФактура = ВТ_СчетаФактурыОтКомитента.СчетФактураВыданныйПокупателю
		|ГДЕ
		|	ЖурналУчетаСчетовФактурСрезПоследних.ДатаВыставленияПолучения <> ДАТАВРЕМЯ(1, 1, 1)
		|	И (ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреКомиссия <> 0
		|			ИЛИ ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСКомиссия <> 0
		|			ИЛИ ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреРазницаУменьшениеКомиссия <> 0
		|			ИЛИ ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреРазницаУвеличениеКомиссия <> 0
		|			ИЛИ ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСРазницаУменьшениеКомиссия <> 0
		|			ИЛИ ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСРазницаУвеличениеКомиссия <> 0)";
		
		Если КонецКвартала(СтруктураПараметров.КонецПериодаОтчета) = КонецКвартала(СтруктураПараметров.НалоговыйПериод) Тогда
			
			// Мы делаем отчет за период внутри квартала
			НовыйТекст1 = "ИЗ
			|	РегистрСведений.ЖурналУчетаСчетовФактур.СрезПоследних(
			|			&Квартал,
			|			Период = &Квартал
			|				И Организация В (&СписокОрганизаций)
			|				И ДатаВыставленияПолучения < ДАТАВРЕМЯ(2015, 1, 1)) КАК ЖурналУчетаСчетовФактурСрезПоследних
			| 	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетаФактурыОтКомитента КАК ВТ_СчетаФактурыОтКомитента
			|	ПО ЖурналУчетаСчетовФактурСрезПоследних.СчетФактура = ВТ_СчетаФактурыОтКомитента.СчетФактураВыданныйПокупателю
			|ГДЕ
			|	ЖурналУчетаСчетовФактурСрезПоследних.ДатаВыставленияПолучения МЕЖДУ &НачалоПериода И &КонецПериода";
			
			НовыйТекст2 = "ИЗ
			|	РегистрСведений.ЖурналУчетаСчетовФактур.СрезПоследних(
			|			&Квартал,
			|			Период = &Квартал
			|				И Организация В (&СписокОрганизаций)
			|				И ДатаВыставленияПолучения >= ДАТАВРЕМЯ(2015, 1, 1)) КАК ЖурналУчетаСчетовФактурСрезПоследних
			| 	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетаФактурыОтКомитента КАК ВТ_СчетаФактурыОтКомитента
			|	ПО ЖурналУчетаСчетовФактурСрезПоследних.СчетФактура = ВТ_СчетаФактурыОтКомитента.СчетФактураВыданныйПокупателю
			|ГДЕ
			|	ЖурналУчетаСчетовФактурСрезПоследних.ДатаВыставленияПолучения МЕЖДУ &НачалоПериода И &КонецПериода
			|	И (ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреКомиссия <> 0
			|			ИЛИ ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСКомиссия <> 0
			|			ИЛИ ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреРазницаУменьшениеКомиссия <> 0
			|			ИЛИ ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреРазницаУвеличениеКомиссия <> 0
			|			ИЛИ ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСРазницаУменьшениеКомиссия <> 0
			|			ИЛИ ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСРазницаУвеличениеКомиссия <> 0)";
			
		Иначе
			
			// Мы делаем отчет за период, который не попадает целиком в один квартал
			Если НачалоКвартала(СтруктураПараметров.НалоговыйПериод) >= '20150101' Тогда
				//Правила заполнения с 2015 года
				НовыйТекст1 = "ИЗ
				|	РегистрСведений.ЖурналУчетаСчетовФактур КАК ЖурналУчетаСчетовФактурСрезПоследних
				| 	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетаФактурыОтКомитента КАК ВТ_СчетаФактурыОтКомитента
				|	ПО ЖурналУчетаСчетовФактурСрезПоследних.СчетФактура = ВТ_СчетаФактурыОтКомитента.СчетФактураВыданныйПокупателю
				|ГДЕ 
				|	ЛОЖЬ";
				
				НовыйТекст2 = "ИЗ
				|	РегистрСведений.ЖурналУчетаСчетовФактур КАК ЖурналУчетаСчетовФактурСрезПоследних
				| 	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетаФактурыОтКомитента КАК ВТ_СчетаФактурыОтКомитента
				|	ПО ЖурналУчетаСчетовФактурСрезПоследних.СчетФактура = ВТ_СчетаФактурыОтКомитента.СчетФактураВыданныйПокупателю
				|ГДЕ
				|	ЖурналУчетаСчетовФактурСрезПоследних.Организация В (&СписокОрганизаций) 
				|	И ЖурналУчетаСчетовФактурСрезПоследних.ДатаВыставленияПолучения МЕЖДУ &НачалоПериода И &КонецПериода
				|	И (ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреКомиссия <> 0
				|			ИЛИ ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСКомиссия <> 0
				|			ИЛИ ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреРазницаУменьшениеКомиссия <> 0
				|			ИЛИ ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреРазницаУвеличениеКомиссия <> 0
				|			ИЛИ ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСРазницаУменьшениеКомиссия <> 0
				|			ИЛИ ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСРазницаУвеличениеКомиссия <> 0)";
				
			ИначеЕсли КонецКвартала(СтруктураПараметров.КонецПериодаОтчета) <'20150101' Тогда
				//Правила заполнения до 2015 года				
				НовыйТекст1 = "ИЗ
				|	РегистрСведений.ЖурналУчетаСчетовФактур КАК ЖурналУчетаСчетовФактурСрезПоследних
				| 	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетаФактурыОтКомитента КАК ВТ_СчетаФактурыОтКомитента
				|	ПО ЖурналУчетаСчетовФактурСрезПоследних.СчетФактура = ВТ_СчетаФактурыОтКомитента.СчетФактураВыданныйПокупателю
				|ГДЕ
				|	ЖурналУчетаСчетовФактурСрезПоследних.Организация В (&СписокОрганизаций) 
				|И ЖурналУчетаСчетовФактурСрезПоследних.ДатаВыставленияПолучения МЕЖДУ &НачалоПериода И &КонецПериода";
				
				НовыйТекст2 = "ИЗ
				|	РегистрСведений.ЖурналУчетаСчетовФактур КАК ЖурналУчетаСчетовФактурСрезПоследних
				| 	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетаФактурыОтКомитента КАК ВТ_СчетаФактурыОтКомитента
				|	ПО ЖурналУчетаСчетовФактурСрезПоследних.СчетФактура = ВТ_СчетаФактурыОтКомитента.СчетФактураВыданныйПокупателю
				|ГДЕ
				|	ЛОЖЬ";
			Иначе
				//Ранее 2015 года и 2015 год
				НовыйТекст1 = "ИЗ
				|	РегистрСведений.ЖурналУчетаСчетовФактур КАК ЖурналУчетаСчетовФактурСрезПоследних
				| 	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетаФактурыОтКомитента КАК ВТ_СчетаФактурыОтКомитента
				|	ПО ЖурналУчетаСчетовФактурСрезПоследних.СчетФактура = ВТ_СчетаФактурыОтКомитента.СчетФактураВыданныйПокупателю
				|ГДЕ 
				|	ЖурналУчетаСчетовФактурСрезПоследних.Организация В (&СписокОрганизаций) 
				|И ЖурналУчетаСчетовФактурСрезПоследних.ДатаВыставленияПолучения >= &НачалоПериода
				|И ЖурналУчетаСчетовФактурСрезПоследних.ДатаВыставленияПолучения < ДАТАВРЕМЯ(2015,1,1)";
				
				НовыйТекст2 = "ИЗ
				|	РегистрСведений.ЖурналУчетаСчетовФактур КАК ЖурналУчетаСчетовФактурСрезПоследних
				| 	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетаФактурыОтКомитента КАК ВТ_СчетаФактурыОтКомитента
				|	ПО ЖурналУчетаСчетовФактурСрезПоследних.СчетФактура = ВТ_СчетаФактурыОтКомитента.СчетФактураВыданныйПокупателю
				|ГДЕ 
				|	ЖурналУчетаСчетовФактурСрезПоследних.Организация В (&СписокОрганизаций) 
				|	И ЖурналУчетаСчетовФактурСрезПоследних.ДатаВыставленияПолучения МЕЖДУ ДАТАВРЕМЯ(2015,1,1) И &КонецПериода
				|	И (ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреКомиссия <> 0
				|			ИЛИ ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСКомиссия <> 0
				|			ИЛИ ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреРазницаУменьшениеКомиссия <> 0
				|			ИЛИ ЖурналУчетаСчетовФактурСрезПоследних.СуммаПоСчетуФактуреРазницаУвеличениеКомиссия <> 0
				|			ИЛИ ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСРазницаУменьшениеКомиссия <> 0
				|			ИЛИ ЖурналУчетаСчетовФактурСрезПоследних.СуммаНДСРазницаУвеличениеКомиссия <> 0)";
			КонецЕсли;
			
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ЗаменяемыйСтандартныйТекст1, НовыйТекст1);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ЗаменяемыйСтандартныйТекст2, НовыйТекст2);
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	
	// Выданные счета-фактуры сортируем по дате передачи и далее по номеру с учетом префиксов,
	// чтобы обеспечить правильную сортировку для номеров разной значности.
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КонтрагентСсылка КАК Ссылка,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.ДатаСведений
	|ПОМЕСТИТЬ СсылкиНаДаты
	|ИЗ
	|	ВТ_ЖурналУчетаСчетовФактурПоКонтрагентам КАК ЗаписиРегистраЖурналУчетаСчетовФактур
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КомитентСсылка,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.ДатаСведений
	|ИЗ
	|	ВТ_ЖурналУчетаСчетовФактурПоКонтрагентам КАК ЗаписиРегистраЖурналУчетаСчетовФактур
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СубкомиссионерСсылка,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.ДатаСведений
	|ИЗ
	|	ВТ_ЖурналУчетаСчетовФактурПоКонтрагентам КАК ЗаписиРегистраЖурналУчетаСчетовФактур";
	
	Запрос.Выполнить();
	
	РегистрационныеСведенияНаДаты(Запрос.МенеджерВременныхТаблиц);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЖурналУчетаСчетовФактур.Организация КАК Организация,
	|	ЖурналУчетаСчетовФактур.СчетФактура КАК СчетФактураДокумент,
	|	ЖурналУчетаСчетовФактур.ДатаВыставленияПолучения КАК ДатаПередачиПолучения,
	|	ЖурналУчетаСчетовФактур.ДатаСчетаФактуры КАК ДатаСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.НомерСчетаФактуры КАК НомерСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.КонтрагентСсылка КАК Контрагент,
	|	ЕСТЬNULL(СведенияОКонтрагентах.ИНН, """") КАК КонтрагентИНН,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактур.КППКонтрагента ПОДОБНО """"
	|			ТОГДА ЕСТЬNULL(СведенияОКонтрагентах.КПП, """")
	|		ИНАЧЕ ЖурналУчетаСчетовФактур.КППКонтрагента
	|	КОНЕЦ КАК КонтрагентКПП,
	|	ЕСТЬNULL(СведенияОКонтрагентах.Наименование, """") КАК КонтрагентНаименование,
	|	ЖурналУчетаСчетовФактур.Валюта.НаименованиеПолное КАК НаименованиеВалюты,
	|	ЖурналУчетаСчетовФактур.Валюта.Код КАК КодВалюты,
	|	ЖурналУчетаСчетовФактур.ЧастьЖурнала КАК ЧастьЖурнала,
	|	ЖурналУчетаСчетовФактур.КодВидаОперации КАК КодВидаОперации,
	|	ЖурналУчетаСчетовФактур.ПоСтавкеБезНДС КАК СчетФактураБезНДС,
	|	ЖурналУчетаСчетовФактур.КодСпособаВыставленияПолучения КАК КодСпособаВыставления,
	|	ЖурналУчетаСчетовФактур.НомерКорректировочногоСчетаФактуры КАК НомерКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.ДатаКорректировочногоСчетаФактуры КАК ДатаКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.НомерИсправления КАК НомерИсправления,
	|	ЖурналУчетаСчетовФактур.ДатаИсправления КАК ДатаИсправления,
	|	ЖурналУчетаСчетовФактур.НомерИсправленияКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.ДатаИсправленияКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.СчетФактураНеВыставляется КАК СчетФактураНеВыставляется,
	|	ЖурналУчетаСчетовФактур.КорректировочныйСчетФактура КАК КорректировочныйСчетФактура,
	|	ЖурналУчетаСчетовФактур.СчетФактураВыданныйНомер КАК СчетФактураВыданныйНомер,
	|	ЖурналУчетаСчетовФактур.КодВидаСделки,
	|	ЕСТЬNULL(СведенияОКомитентах.Наименование, """") КАК Комитент,
	|	ЕСТЬNULL(СведенияОКомитентах.ИНН, """") КАК КомитентИНН,
	|	ЕСТЬNULL(СведенияОКомитентах.КПП, """") КАК КомитентКПП,
	|	ЖурналУчетаСчетовФактур.НомерСчетаФактурыКомитента,
	|	ЖурналУчетаСчетовФактур.СводныйКорректировочный,
	|	ЖурналУчетаСчетовФактур.СводныйКомиссионный,
	|	ЖурналУчетаСчетовФактур.ДатаСчетаФактурыКомитента,
	|	СУММА(ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУменьшение) КАК СуммаДокументаРазницаУменьшение,
	|	СУММА(ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУвеличение) КАК СуммаДокументаРазницаУвеличение,
	|	СУММА(ЖурналУчетаСчетовФактур.СуммаНДСРазницаУменьшение) КАК СуммаНДСРазницаУменьшение,
	|	СУММА(ЖурналУчетаСчетовФактур.СуммаНДСРазницаУвеличение) КАК СуммаНДСРазницаУвеличение,
	|	СУММА(ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуре) КАК СуммаДокумента,
	|	СУММА(ЖурналУчетаСчетовФактур.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреИтоговая) КАК СуммаПоСчетуФактуреИтоговая,
	|	СУММА(ЖурналУчетаСчетовФактур.СуммаНДСИтоговая) КАК СуммаНДСИтоговая,
	|	СУММА(ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУменьшениеИтоговая) КАК СуммаПоСчетуФактуреРазницаУменьшениеИтоговая,
	|	СУММА(ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУвеличениеИтоговая) КАК СуммаПоСчетуФактуреРазницаУвеличениеИтоговая,
	|	СУММА(ЖурналУчетаСчетовФактур.СуммаНДСРазницаУменьшениеИтоговая) КАК СуммаНДСРазницаУменьшениеИтоговая,
	|	СУММА(ЖурналУчетаСчетовФактур.СуммаНДСРазницаУвеличениеИтоговая) КАК СуммаНДСРазницаУвеличениеИтоговая
	|ПОМЕСТИТЬ ЗаписиРегистраЖурналУчетаСчетовФактур
	|ИЗ
	|	ВТ_ЖурналУчетаСчетовФактурПоКонтрагентам КАК ЖурналУчетаСчетовФактур
	|		ЛЕВОЕ СОЕДИНЕНИЕ СведенияОСсылкахНаДаты КАК СведенияОКонтрагентах
	|		ПО (СведенияОКонтрагентах.Ссылка = ЖурналУчетаСчетовФактур.КонтрагентСсылка)
	|			И (СведенияОКонтрагентах.ДатаСведений = ЖурналУчетаСчетовФактур.ДатаСведений)
	|		ЛЕВОЕ СОЕДИНЕНИЕ СведенияОСсылкахНаДаты КАК СведенияОКомитентах
	|		ПО (СведенияОКомитентах.Ссылка = ЖурналУчетаСчетовФактур.КомитентСсылка)
	|			И (СведенияОКомитентах.ДатаСведений = ЖурналУчетаСчетовФактур.ДатаСведений)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЖурналУчетаСчетовФактур.Организация,
	|	ЖурналУчетаСчетовФактур.СчетФактура,
	|	ЖурналУчетаСчетовФактур.ДатаВыставленияПолучения,
	|	ЖурналУчетаСчетовФактур.ДатаСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.НомерСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.КонтрагентСсылка,
	|	ЕСТЬNULL(СведенияОКонтрагентах.ИНН, """"),
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактур.КППКонтрагента ПОДОБНО """"
	|			ТОГДА ЕСТЬNULL(СведенияОКонтрагентах.КПП, """")
	|		ИНАЧЕ ЖурналУчетаСчетовФактур.КППКонтрагента
	|	КОНЕЦ,
	|	ЕСТЬNULL(СведенияОКонтрагентах.Наименование, """"),
	|	ЖурналУчетаСчетовФактур.Валюта.НаименованиеПолное,
	|	ЖурналУчетаСчетовФактур.Валюта.Код,
	|	ЖурналУчетаСчетовФактур.ЧастьЖурнала,
	|	ЖурналУчетаСчетовФактур.КодВидаОперации,
	|	ЖурналУчетаСчетовФактур.ПоСтавкеБезНДС,
	|	ЖурналУчетаСчетовФактур.КодСпособаВыставленияПолучения,
	|	ЖурналУчетаСчетовФактур.НомерКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.ДатаКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.НомерИсправления,
	|	ЖурналУчетаСчетовФактур.ДатаИсправления,
	|	ЖурналУчетаСчетовФактур.НомерИсправленияКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.ДатаИсправленияКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.СчетФактураНеВыставляется,
	|	ЖурналУчетаСчетовФактур.КорректировочныйСчетФактура,
	|	ЖурналУчетаСчетовФактур.СчетФактураВыданныйНомер,
	|	ЖурналУчетаСчетовФактур.КодВидаСделки,
	|	ЕСТЬNULL(СведенияОКомитентах.Наименование, """"),
	|	ЕСТЬNULL(СведенияОКомитентах.ИНН, """"),
	|	ЕСТЬNULL(СведенияОКомитентах.КПП, """"),
	|	ЖурналУчетаСчетовФактур.НомерСчетаФактурыКомитента,
	|	ЖурналУчетаСчетовФактур.СводныйКорректировочный,
	|	ЖурналУчетаСчетовФактур.СводныйКомиссионный,
	|	ЖурналУчетаСчетовФактур.ДатаСчетаФактурыКомитента
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЧастьЖурнала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЖурналУчетаСчетовФактурСрезПоследних.СчетФактура КАК СчетФактура,
	|	ЕСТЬNULL(СведенияОСубкомиссионерах.Наименование, """") КАК Субкомиссионер,
	|	ЕСТЬNULL(СведенияОСубкомиссионерах.ИНН, """") КАК СубкомиссионерИНН,
	|	ЕСТЬNULL(СведенияОСубкомиссионерах.КПП, """") КАК СубкомиссионерКПП,
	|	МИНИМУМ(ВТ_ЖурналУчетаСчетовФактурСрезПоследних.НомерСтроки) КАК НомерСтроки
	|ИЗ
	|	ВТ_ЖурналУчетаСчетовФактурСрезПоследних КАК ВТ_ЖурналУчетаСчетовФактурСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ СведенияОСсылкахНаДаты КАК СведенияОСубкомиссионерах
	|		ПО (СведенияОСубкомиссионерах.Ссылка = ВТ_ЖурналУчетаСчетовФактурСрезПоследних.СубкомиссионерСсылка)
	|			И (СведенияОСубкомиссионерах.ДатаСведений = ВТ_ЖурналУчетаСчетовФактурСрезПоследних.ДатаСведений)
	|ГДЕ
	|	ВТ_ЖурналУчетаСчетовФактурСрезПоследних.СубкомиссионерСсылка <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ЖурналУчетаСчетовФактурСрезПоследних.СчетФактура,
	|	ЕСТЬNULL(СведенияОСубкомиссионерах.Наименование, """"),
	|	ЕСТЬNULL(СведенияОСубкомиссионерах.ИНН, """"),
	|	ЕСТЬNULL(СведенияОСубкомиссионерах.КПП, """")";
	
	ДополнительныеСвойства = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.Организация,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СчетФактураДокумент КАК СчетФактураДокумент,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КодВидаОперации,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.ДатаПередачиПолучения,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.ДатаСчетаФактуры,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.НомерСчетаФактуры,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.Контрагент,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КонтрагентНаименование КАК КонтрагентНаименование,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.НаименованиеВалюты,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КодВалюты,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаДокумента КАК СуммаДокумента,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаНДС КАК СуммаНДС,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СчетФактураБезНДС,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СводныйКорректировочный КАК СводныйКорректировочный,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.ЧастьЖурнала,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КонтрагентИНН,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КонтрагентКПП,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаДокументаРазницаУменьшение КАК СуммаДокументаРазницаУменьшение,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаДокументаРазницаУвеличение КАК СуммаДокументаРазницаУвеличение,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаНДСРазницаУменьшение КАК СуммаНДСРазницаУменьшение,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаНДСРазницаУвеличение КАК СуммаНДСРазницаУвеличение,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КодСпособаВыставления,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.НомерКорректировочногоСчетаФактуры,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.ДатаКорректировочногоСчетаФактуры,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.НомерИсправленияКорректировочногоСчетаФактуры,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.ДатаИсправленияКорректировочногоСчетаФактуры,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КодВидаСделки,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.Комитент,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КомитентИНН,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КомитентКПП,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.НомерСчетаФактурыКомитента,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.ДатаСчетаФактурыКомитента,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреИтоговая КАК СуммаПоСчетуФактуреИтоговая,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаНДСИтоговая КАК СуммаНДСИтоговая,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУменьшениеИтоговая КАК СуммаПоСчетуФактуреРазницаУменьшениеИтоговая,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУвеличениеИтоговая КАК СуммаПоСчетуФактуреРазницаУвеличениеИтоговая,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаНДСРазницаУменьшениеИтоговая КАК СуммаНДСРазницаУменьшениеИтоговая,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаНДСРазницаУвеличениеИтоговая КАК СуммаНДСРазницаУвеличениеИтоговая,
	|	ВЫБОР
	|		КОГДА НЕ &ПравилаПостановления735
	|				И ЗаписиРегистраЖурналУчетаСчетовФактур.КорректировочныйСчетФактура
	|			ТОГДА ЗаписиРегистраЖурналУчетаСчетовФактур.НомерИсправленияКорректировочногоСчетаФактуры
	|		ИНАЧЕ ЗаписиРегистраЖурналУчетаСчетовФактур.НомерИсправления
	|	КОНЕЦ КАК НомерИсправления,
	|	ВЫБОР
	|		КОГДА НЕ &ПравилаПостановления735
	|				И ЗаписиРегистраЖурналУчетаСчетовФактур.КорректировочныйСчетФактура
	|			ТОГДА ЗаписиРегистраЖурналУчетаСчетовФактур.ДатаИсправленияКорректировочногоСчетаФактуры
	|		ИНАЧЕ ЗаписиРегистраЖурналУчетаСчетовФактур.ДатаИсправления
	|	КОНЕЦ КАК ДатаИсправления,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СчетФактураНеВыставляется,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КорректировочныйСчетФактура,
	|	ЕСТЬNULL(ЗаписиРегистраЖурналУчетаСчетовФактур.СчетФактураВыданныйНомер, ЗаписиРегистраЖурналУчетаСчетовФактур.НомерСчетаФактуры) КАК НомерСчетаФактурыДляСортировки,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СводныйКомиссионный
	|ИЗ
	|	ЗаписиРегистраЖурналУчетаСчетовФактур КАК ЗаписиРегистраЖурналУчетаСчетовФактур
	|ГДЕ
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.ЧастьЖурнала = ЗНАЧЕНИЕ(Перечисление.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.ДатаПередачиПолучения,
	|	НомерСчетаФактурыДляСортировки
	|ИТОГИ
	|	МАКСИМУМ(КонтрагентНаименование),
	|	СУММА(СуммаДокумента),
	|	СУММА(СуммаНДС),
	|	МАКСИМУМ(СводныйКорректировочный),
	|	СУММА(СуммаДокументаРазницаУменьшение),
	|	СУММА(СуммаДокументаРазницаУвеличение),
	|	СУММА(СуммаНДСРазницаУменьшение),
	|	СУММА(СуммаНДСРазницаУвеличение),
	|	МАКСИМУМ(СуммаПоСчетуФактуреИтоговая),
	|	МАКСИМУМ(СуммаНДСИтоговая),
	|	МАКСИМУМ(СуммаПоСчетуФактуреРазницаУменьшениеИтоговая),
	|	МАКСИМУМ(СуммаПоСчетуФактуреРазницаУвеличениеИтоговая),
	|	МАКСИМУМ(СуммаНДСРазницаУменьшениеИтоговая),
	|	МАКСИМУМ(СуммаНДСРазницаУвеличениеИтоговая)
	|ПО
	|	СчетФактураДокумент";
	
	Если ГруппироватьПоКонтрагентам Тогда
		
		ЗаменяемыйСтандартныйТекст = "ПО
		|	СчетФактураДокумент";
		
		НовыйТекст = "ПО
		|	Контрагент,
		|	СчетФактураДокумент";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ЗаменяемыйСтандартныйТекст, НовыйТекст);
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "УПОРЯДОЧИТЬ ПО", "УПОРЯДОЧИТЬ ПО
			|КонтрагентНаименование, ");
	КонецЕсли;
	
	ВыставленныеСчетаФактуры = Запрос.Выполнить();
	
	// Полученные счета-фактуры сортируем по дате получения, наименованию контрагента,
	// номер счета-фактуры контрагента
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.Организация,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СчетФактураДокумент,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КодВидаОперации,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.ДатаПередачиПолучения,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.ДатаСчетаФактуры,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.НомерСчетаФактуры,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.Контрагент КАК Контрагент,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КонтрагентНаименование,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.НаименованиеВалюты,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КодВалюты,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаДокумента,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаНДС,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СчетФактураБезНДС,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.ЧастьЖурнала,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КонтрагентИНН,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КонтрагентКПП,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаДокументаРазницаУменьшение,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаДокументаРазницаУвеличение,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаНДСРазницаУменьшение,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаНДСРазницаУвеличение,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КодСпособаВыставления,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.НомерКорректировочногоСчетаФактуры,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.ДатаКорректировочногоСчетаФактуры,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.НомерИсправленияКорректировочногоСчетаФактуры,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.ДатаИсправленияКорректировочногоСчетаФактуры,
	|	ВЫБОР
	|		КОГДА НЕ &ПравилаПостановления735
	|				И ЗаписиРегистраЖурналУчетаСчетовФактур.КорректировочныйСчетФактура
	|			ТОГДА ЗаписиРегистраЖурналУчетаСчетовФактур.НомерИсправленияКорректировочногоСчетаФактуры
	|		ИНАЧЕ ЗаписиРегистраЖурналУчетаСчетовФактур.НомерИсправления
	|	КОНЕЦ КАК НомерИсправления,
	|	ВЫБОР
	|		КОГДА НЕ &ПравилаПостановления735
	|				И ЗаписиРегистраЖурналУчетаСчетовФактур.КорректировочныйСчетФактура
	|			ТОГДА ЗаписиРегистраЖурналУчетаСчетовФактур.ДатаИсправленияКорректировочногоСчетаФактуры
	|		ИНАЧЕ ЗаписиРегистраЖурналУчетаСчетовФактур.ДатаИсправления
	|	КОНЕЦ КАК ДатаИсправления,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СчетФактураНеВыставляется,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КорректировочныйСчетФактура,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КодВидаСделки,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.Комитент,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КомитентИНН,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КомитентКПП,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.НомерСчетаФактурыКомитента,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.ДатаСчетаФактурыКомитента,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреИтоговая,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаНДСИтоговая,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУменьшениеИтоговая,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУвеличениеИтоговая,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаНДСРазницаУменьшениеИтоговая,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.СуммаНДСРазницаУвеличениеИтоговая
	|ИЗ
	|	ЗаписиРегистраЖурналУчетаСчетовФактур КАК ЗаписиРегистраЖурналУчетаСчетовФактур
	|ГДЕ
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.ЧастьЖурнала = ЗНАЧЕНИЕ(Перечисление.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.ДатаПередачиПолучения,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.КонтрагентНаименование,
	|	ЗаписиРегистраЖурналУчетаСчетовФактур.НомерСчетаФактуры";
	
	Если ГруппироватьПоКонтрагентам Тогда
		Запрос.Текст = Запрос.Текст + "
			|ИТОГИ
			|	СУММА(СуммаДокумента),
			|	СУММА(СуммаНДС),
			|	МАКСИМУМ(СуммаПоСчетуФактуреИтоговая),
			|	МАКСИМУМ(СуммаНДСИтоговая),
			|	МАКСИМУМ(СуммаПоСчетуФактуреРазницаУменьшениеИтоговая),
			|	МАКСИМУМ(СуммаПоСчетуФактуреРазницаУвеличениеИтоговая),
			|	МАКСИМУМ(СуммаНДСРазницаУменьшениеИтоговая),
			|	МАКСИМУМ(СуммаНДСРазницаУвеличениеИтоговая),
			|	МАКСИМУМ(КонтрагентНаименование)
			|ПО
			|	Контрагент";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "УПОРЯДОЧИТЬ ПО", "УПОРЯДОЧИТЬ ПО
			|КонтрагентНаименование, ");
	КонецЕсли;
	
	ПолученныеСчетаФактуры = Запрос.Выполнить();

	Если СтруктураПараметров.Свойство("ДанныеДляПроверкиКонтрагентов") 
		И СтруктураПараметров.ДанныеДляПроверкиКонтрагентов.ИспользованиеПроверкиВозможно
		И НЕ СтруктураПараметров.ДанныеДляПроверкиКонтрагентов.ВыводитьТолькоНекорректныхКонтрагентов 
		И СтруктураПараметров.ДанныеДляПроверкиКонтрагентов.Свойство("АдресДанныхВыставленныеСчетаФактуры")
		И СтруктураПараметров.ДанныеДляПроверкиКонтрагентов.Свойство("АдресДанныхПолученныеСчетаФактуры")
		И СтруктураПараметров.ДанныеДляПроверкиКонтрагентов.Свойство("АдресДанныхДополнительныеСвойства") Тогда
		
		СтруктураПараметров.ДанныеДляПроверкиКонтрагентов.АдресДанныхВыставленныеСчетаФактуры = 
			ПоместитьВоВременноеХранилище(ВыставленныеСчетаФактуры, СтруктураПараметров.ДанныеДляПроверкиКонтрагентов.АдресДанныхВыставленныеСчетаФактуры);
		
		СтруктураПараметров.ДанныеДляПроверкиКонтрагентов.АдресДанныхПолученныеСчетаФактуры = 
			ПоместитьВоВременноеХранилище(ПолученныеСчетаФактуры, СтруктураПараметров.ДанныеДляПроверкиКонтрагентов.АдресДанныхПолученныеСчетаФактуры);
		СтруктураПараметров.ДанныеДляПроверкиКонтрагентов.АдресДанныхДополнительныеСвойства = 
			ПоместитьВоВременноеХранилище(ДополнительныеСвойства, СтруктураПараметров.ДанныеДляПроверкиКонтрагентов.АдресДанныхДополнительныеСвойства);
			
	КонецЕсли;
	
	Возврат Новый Структура("ВыставленныеСчетаФактуры, ПолученныеСчетаФактуры, ДополнительныеСвойства", 
		ВыставленныеСчетаФактуры, ПолученныеСчетаФактуры, ДополнительныеСвойства);
	
КонецФункции

// Формирование книг и журнала

Функция СформироватьДокументыОтчетности(СтруктураПараметров) Экспорт
	
	Результат	= Новый Структура("СозданныеДокументы, ПерезаполненныеДокументы, УдаленныеДокументы, Ошибки",
		Новый Массив, Новый Массив, Новый Массив, Новый Массив);
	
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров.Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров.НалоговыйПериод) Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураПараметров.Вставить("Дата", КонецКвартала(СтруктураПараметров.НалоговыйПериод));
	
	СписокДокументов = ПолучитьСписокДокументовОтчетности(СтруктураПараметров);
	
	Для каждого СтрокаСписка Из СписокДокументов Цикл
		СоздатьЗаполнитьДокумент(СтрокаСписка, СтруктураПараметров, Результат);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура СоздатьЗаполнитьДокумент(СтрокаСписка, СтруктураПараметров, Результат)
	
	Если НЕ ЗначениеЗаполнено(СтрокаСписка.Документ) Тогда
		ДокументОбъект	= Документы[СтрокаСписка.Имя].СоздатьДокумент();
		ДокументОбъект.Организация		= СтруктураПараметров.Организация;
		ДокументОбъект.Дата				= СтрокаСписка.Дата;
		ДокументОбъект.НалоговыйПериод	= СтрокаСписка.НалоговыйПериод;
		ДокументОбъект.ПериодПоСКНП 	= УчетНДСКлиентСервер.ПолучитьКодПоСКНП(СтрокаСписка.НалоговыйПериод);
		ДокументОбъект.УстановитьВремя(РежимАвтоВремя.Последним);
		
		СтруктураПараметров.Дата			= СтрокаСписка.Дата;
		СтруктураПараметров.НалоговыйПериод	= СтрокаСписка.НалоговыйПериод;
	Иначе
		ДокументОбъект	= СтрокаСписка.Документ.ПолучитьОбъект();
		
		СтруктураПараметров.Дата			= ДокументОбъект.Дата;
		СтруктураПараметров.НалоговыйПериод	= ДокументОбъект.НалоговыйПериод;
		ДокументОбъект.ПериодПоСКНП 		= УчетНДСКлиентСервер.ПолучитьКодПоСКНП(СтрокаСписка.НалоговыйПериод);
	КонецЕсли;
	
	Документы[СтрокаСписка.Имя].ЗаполнитьОбъект(ДокументОбъект, СтруктураПараметров);
	
	ЭтоНовый = ДокументОбъект.ЭтоНовый();
	
	Попытка
	
		Если НЕ ЭтоНовый
			И (СтрокаСписка.Имя = "ДопЛистКнигиПокупокДляПередачиВЭлектронномВиде"
				ИЛИ СтрокаСписка.Имя = "ДопЛистКнигиПродажДляПередачиВЭлектронномВиде")
			И ДокументОбъект.ТабличнаяЧасть.Количество() = 0 Тогда
			
			ДокументОбъект.ПометкаУдаления = Истина;
			ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			
			Результат.УдаленныеДокументы.Добавить(ДокументОбъект.Ссылка);
			
		Иначе
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			
			Если ЭтоНовый Тогда
				Результат.СозданныеДокументы.Добавить(ДокументОбъект.Ссылка);
			Иначе
				Результат.ПерезаполненныеДокументы.Добавить(ДокументОбъект.Ссылка);
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		
		ТекстСообщения	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			?(ЭтоНовый, НСтр("ru = 'Не создан документ %1: %2'"), НСтр("ru = 'Не перезаполнен документ %1: %2'")),
			ДокументОбъект.Метаданные().Синоним,
			ОписаниеОшибки());
			
		Результат.Ошибки.Добавить(ТекстСообщения);
		
	КонецПопытки;
	
КонецПроцедуры

Функция ПолучитьСписокДокументовОтчетности(СтруктураПараметров)
	
	Перем ФормироватьКнигуПокупок, ФормироватьКнигуПродаж;
	Перем ФормироватьЖурналУчетаСчетовФактур;
	Перем ФормироватьДопЛистыКнигиПокупок, ФормироватьДопЛистыКнигиПродаж;
	Перем СписокДокументов;
	
	Если НЕ СтруктураПараметров.Свойство("ФормироватьКнигуПокупок", ФормироватьКнигуПокупок) Тогда
		ФормироватьКнигуПокупок = Ложь;
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("ФормироватьКнигуПродаж", ФормироватьКнигуПродаж) Тогда
		ФормироватьКнигуПродаж = Ложь;
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("ФормироватьЖурналУчетаСчетовФактур", ФормироватьЖурналУчетаСчетовФактур) Тогда
		ФормироватьЖурналУчетаСчетовФактур = Ложь;
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("ФормироватьДопЛистыКнигиПокупок", ФормироватьДопЛистыКнигиПокупок) Тогда
		ФормироватьДопЛистыКнигиПокупок = Ложь;
	КонецЕсли;
	Если НЕ СтруктураПараметров.Свойство("ФормироватьДопЛистыКнигиПродаж", ФормироватьДопЛистыКнигиПродаж) Тогда
		ФормироватьДопЛистыКнигиПродаж = Ложь;
	КонецЕсли;
	
	СписокДокументов	= Новый ТаблицаЗначений;
	СписокДокументов.Колонки.Добавить("Имя",				ОбщегоНазначения.ОписаниеТипаСтрока(100));
	СписокДокументов.Колонки.Добавить("Документ",			Документы.ТипВсеСсылки());
	СписокДокументов.Колонки.Добавить("Дата",				ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	СписокДокументов.Колонки.Добавить("Номер",				ОбщегоНазначения.ОписаниеТипаСтрока(30));
	СписокДокументов.Колонки.Добавить("НалоговыйПериод",	ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров.Организация) Тогда
		Возврат СписокДокументов;
	КонецЕсли;
	
	НачалоПериода	= НачалоКвартала(СтруктураПараметров.НалоговыйПериод);
	КонецПериода	= КонецКвартала(СтруктураПараметров.НалоговыйПериод);
	
	НачалоПримененияПостановления1137 = '20120401';
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",	СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("НачалоПериода",	НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",	КонецПериода);
	Запрос.УстановитьПараметр("НачалоПримененияПостановления1137",  НачалоПримененияПостановления1137);
	Запрос.УстановитьПараметр("ФормироватьКнигуПокупок",			ФормироватьКнигуПокупок);
	Запрос.УстановитьПараметр("ФормироватьКнигуПродаж",				ФормироватьКнигуПродаж);
	Запрос.УстановитьПараметр("ФормироватьЖурналУчетаСчетовФактур",	ФормироватьЖурналУчетаСчетовФактур);
	Запрос.УстановитьПараметр("ФормироватьДопЛистыКнигиПокупок",	ФормироватьДопЛистыКнигиПокупок);
	Запрос.УстановитьПараметр("ФормироватьДопЛистыКнигиПродаж",		ФормироватьДопЛистыКнигиПродаж);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПокупок.Период, ДЕНЬ) КАК День,
	|	НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПокупок.КорректируемыйПериод, КВАРТАЛ) КАК НалоговыйПериод
	|ПОМЕСТИТЬ ВТ_НДСЗаписиКнигиПокупок
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок КАК НДСЗаписиКнигиПокупок
	|ГДЕ
	|	&ФормироватьДопЛистыКнигиПокупок
	|	И НДСЗаписиКнигиПокупок.Организация = &Организация
	|	И НДСЗаписиКнигиПокупок.ЗаписьДополнительногоЛиста
	|	И НДСЗаписиКнигиПокупок.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НДСЗаписиКнигиПокупок.КорректируемыйПериод >= &НачалоПримененияПостановления1137
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	День,
	|	НалоговыйПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПродаж.Период, ДЕНЬ) КАК День,
	|	НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПродаж.КорректируемыйПериод, КВАРТАЛ) КАК НалоговыйПериод
	|ПОМЕСТИТЬ ВТ_НДСЗаписиКнигиПродаж
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|ГДЕ
	|	&ФормироватьДопЛистыКнигиПродаж
	|	И НДСЗаписиКнигиПродаж.Организация = &Организация
	|	И НДСЗаписиКнигиПродаж.ЗаписьДополнительногоЛиста
	|	И НДСЗаписиКнигиПродаж.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НДСЗаписиКнигиПродаж.КорректируемыйПериод >= &НачалоПримененияПостановления1137
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	День,
	|	НалоговыйПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДополнительныйЛистКнигиПокупок.Ссылка,
	|	ДополнительныйЛистКнигиПокупок.Дата,
	|	НАЧАЛОПЕРИОДА(ДополнительныйЛистКнигиПокупок.Дата, ДЕНЬ) КАК День,
	|	ДополнительныйЛистКнигиПокупок.Номер,
	|	ДополнительныйЛистКнигиПокупок.НалоговыйПериод
	|ПОМЕСТИТЬ ВТ_ДополнительныеЛистыКнигиПокупок
	|ИЗ
	|	Документ.ДопЛистКнигиПокупокДляПередачиВЭлектронномВиде КАК ДополнительныйЛистКнигиПокупок
	|ГДЕ
	|	&ФормироватьДопЛистыКнигиПокупок
	|	И ДополнительныйЛистКнигиПокупок.Организация = &Организация
	|	И НЕ ДополнительныйЛистКнигиПокупок.ПометкаУдаления
	|	И ДополнительныйЛистКнигиПокупок.ПериодСоставления = &НачалоПериода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	День,
	|	ДополнительныйЛистКнигиПокупок.НалоговыйПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДополнительныйЛистКнигиПродаж.Ссылка,
	|	ДополнительныйЛистКнигиПродаж.Дата,
	|	НАЧАЛОПЕРИОДА(ДополнительныйЛистКнигиПродаж.Дата, ДЕНЬ) КАК День,
	|	ДополнительныйЛистКнигиПродаж.Номер,
	|	ДополнительныйЛистКнигиПродаж.НалоговыйПериод
	|ПОМЕСТИТЬ ВТ_ДополнительныеЛистыКнигиПродаж
	|ИЗ
	|	Документ.ДопЛистКнигиПродажДляПередачиВЭлектронномВиде КАК ДополнительныйЛистКнигиПродаж
	|ГДЕ
	|	&ФормироватьДопЛистыКнигиПродаж
	|	И ДополнительныйЛистКнигиПродаж.Организация = &Организация
	|	И НЕ ДополнительныйЛистКнигиПродаж.ПометкаУдаления
	|	И ДополнительныйЛистКнигиПродаж.ПериодСоставления = &НачалоПериода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	День,
	|	ДополнительныйЛистКнигиПродаж.НалоговыйПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""КнигаПокупокДляПередачиВЭлектронномВиде"" КАК Имя,
	|	КнигаПокупок.Ссылка КАК Документ,
	|	КнигаПокупок.Дата КАК Дата,
	|	КнигаПокупок.Номер КАК Номер,
	|	КнигаПокупок.НалоговыйПериод КАК НалоговыйПериод
	|ИЗ
	|	Документ.КнигаПокупокДляПередачиВЭлектронномВиде КАК КнигаПокупок
	|ГДЕ
	|	&ФормироватьКнигуПокупок
	|	И КнигаПокупок.Организация = &Организация
	|	И КнигаПокупок.НалоговыйПериод = &НачалоПериода
	|	И НЕ КнигаПокупок.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""КнигаПродажДляПередачиВЭлектронномВиде"",
	|	КнигаПродаж.Ссылка,
	|	КнигаПродаж.Дата,
	|	КнигаПродаж.Номер,
	|	КнигаПродаж.НалоговыйПериод
	|ИЗ
	|	Документ.КнигаПродажДляПередачиВЭлектронномВиде КАК КнигаПродаж
	|ГДЕ
	|	&ФормироватьКнигуПродаж
	|	И КнигаПродаж.Организация = &Организация
	|	И КнигаПродаж.НалоговыйПериод = &НачалоПериода
	|	И НЕ КнигаПродаж.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде"",
	|	ЖурналУчетаСчетовФактур.Ссылка,
	|	ЖурналУчетаСчетовФактур.Дата,
	|	ЖурналУчетаСчетовФактур.Номер,
	|	ЖурналУчетаСчетовФактур.НалоговыйПериод
	|ИЗ
	|	Документ.ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде КАК ЖурналУчетаСчетовФактур
	|ГДЕ
	|	&ФормироватьЖурналУчетаСчетовФактур
	|	И ЖурналУчетаСчетовФактур.Организация = &Организация
	|	И ЖурналУчетаСчетовФактур.НалоговыйПериод = &НачалоПериода
	|	И НЕ ЖурналУчетаСчетовФактур.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ДопЛистКнигиПокупокДляПередачиВЭлектронномВиде"",
	|	ВТ_ДополнительныеЛистыКнигиПокупок.Ссылка,
	|	ВЫБОР
	|		КОГДА ВТ_ДополнительныеЛистыКнигиПокупок.Ссылка ЕСТЬ NULL 
	|			ТОГДА ВТ_НДСЗаписиКнигиПокупок.День
	|		ИНАЧЕ ВТ_ДополнительныеЛистыКнигиПокупок.Дата
	|	КОНЕЦ,
	|	ВТ_ДополнительныеЛистыКнигиПокупок.Номер,
	|	ВЫБОР
	|		КОГДА ВТ_ДополнительныеЛистыКнигиПокупок.Ссылка ЕСТЬ NULL 
	|			ТОГДА ВТ_НДСЗаписиКнигиПокупок.НалоговыйПериод
	|		ИНАЧЕ ВТ_ДополнительныеЛистыКнигиПокупок.НалоговыйПериод
	|	КОНЕЦ
	|ИЗ
	|	ВТ_НДСЗаписиКнигиПокупок КАК ВТ_НДСЗаписиКнигиПокупок
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ДополнительныеЛистыКнигиПокупок КАК ВТ_ДополнительныеЛистыКнигиПокупок
	|		ПО ВТ_НДСЗаписиКнигиПокупок.День = ВТ_ДополнительныеЛистыКнигиПокупок.День
	|			И ВТ_НДСЗаписиКнигиПокупок.НалоговыйПериод = ВТ_ДополнительныеЛистыКнигиПокупок.НалоговыйПериод
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ДопЛистКнигиПродажДляПередачиВЭлектронномВиде"",
	|	ВТ_ДополнительныеЛистыКнигиПродаж.Ссылка,
	|	ВЫБОР
	|		КОГДА ВТ_ДополнительныеЛистыКнигиПродаж.Ссылка ЕСТЬ NULL 
	|			ТОГДА ВТ_НДСЗаписиКнигиПродаж.День
	|		ИНАЧЕ ВТ_ДополнительныеЛистыКнигиПродаж.Дата
	|	КОНЕЦ,
	|	ВТ_ДополнительныеЛистыКнигиПродаж.Номер,
	|	ВЫБОР
	|		КОГДА ВТ_ДополнительныеЛистыКнигиПродаж.Ссылка ЕСТЬ NULL 
	|			ТОГДА ВТ_НДСЗаписиКнигиПродаж.НалоговыйПериод
	|		ИНАЧЕ ВТ_ДополнительныеЛистыКнигиПродаж.НалоговыйПериод
	|	КОНЕЦ
	|ИЗ
	|	ВТ_НДСЗаписиКнигиПродаж КАК ВТ_НДСЗаписиКнигиПродаж
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ДополнительныеЛистыКнигиПродаж КАК ВТ_ДополнительныеЛистыКнигиПродаж
	|		ПО ВТ_НДСЗаписиКнигиПродаж.День = ВТ_ДополнительныеЛистыКнигиПродаж.День
	|			И ВТ_НДСЗаписиКнигиПродаж.НалоговыйПериод = ВТ_ДополнительныеЛистыКнигиПродаж.НалоговыйПериод";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		СписокДокументов = Результат.Выгрузить();
	КонецЕсли;
	
	СписокДокументов.Индексы.Добавить("Имя");
	
	Если ФормироватьКнигуПокупок
		И СписокДокументов.Найти("КнигаПокупокДляПередачиВЭлектронномВиде", "Имя") = Неопределено Тогда
		НоваяСтрока	= СписокДокументов.Вставить(0);
		НоваяСтрока.Имя				= "КнигаПокупокДляПередачиВЭлектронномВиде";
		НоваяСтрока.Дата			= КонецПериода;
		НоваяСтрока.НалоговыйПериод	= НачалоПериода;
	КонецЕсли;
	
	Если ФормироватьКнигуПродаж
		И СписокДокументов.Найти("КнигаПродажДляПередачиВЭлектронномВиде", "Имя") = Неопределено Тогда
		НоваяСтрока	= СписокДокументов.Вставить(1);
		НоваяСтрока.Имя				= "КнигаПродажДляПередачиВЭлектронномВиде";
		НоваяСтрока.Дата			= КонецПериода;
		НоваяСтрока.НалоговыйПериод	= НачалоПериода;
	КонецЕсли;
	
	Если ФормироватьЖурналУчетаСчетовФактур
		И СписокДокументов.Найти("ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде", "Имя") = Неопределено Тогда
		НоваяСтрока	= СписокДокументов.Вставить(2);
		НоваяСтрока.Имя				= "ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде";
		НоваяСтрока.Дата			= КонецПериода;
		НоваяСтрока.НалоговыйПериод	= НачалоПериода;
	КонецЕсли;
	
	Возврат	СписокДокументов;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ВЫВОД КНИГ И ЖУРНАЛОВ

// Книга покупок, дополнительные листы книги покупок

Процедура ПреобразоватьЗаписиКнигиПокупок(
	СтруктураПараметров, НаборЗаписей, ТабличныйДокумент = Неопределено,
	СписокСчетовФактур, ИтогПоОрганизации = 0, ПараметрыСтроки = Неопределено,
	ТаблицаДокумента = Неопределено, СтруктураСекций = Неопределено) Экспорт
	
	ДеревоЗаписей = НаборЗаписей.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	ИтогПоОрганизации = ДеревоЗаписей.Строки[0];
	
	СтруктураПараметров.ЗаписьДополнительногоЛиста = Ложь;
	СоответствиеСтрокиДопИнформацииПоСчетуФактуре = ПолучитьДополнительнуюИнформациюПоСФДляКнигиПокупок(
		СписокСчетовФактур, СтруктураПараметров);

	Если НЕ СтруктураПараметров.Свойство("ЗаполнениеДекларации") Тогда
		СтруктураПараметров.Вставить("ЗаполнениеДекларации", Ложь);
	ИначеЕсли СтруктураПараметров.ЗаполнениеДекларации И СтруктураПараметров.КонецПериода < '20150101' Тогда
		СтруктураПараметров.ЗаполнениеДекларации = Ложь;
	КонецЕсли; 
	
	Счетчик = 0; // Счетчик строк книги покупок

	Если НЕ СтруктураПараметров.ЗаполнениеДокумента
		И НЕ СтруктураПараметров.ЗаполнениеДекларации
		И СтруктураПараметров.ГруппироватьПоКонтрагентам 
		И НЕ СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме Тогда // Только отчет по произвольной форме
		
		Для Каждого ИтогПоКонтрагенту Из ИтогПоОрганизации.Строки Цикл
			Если ВыводитьСтроку(СтруктураПараметров, ИтогПоКонтрагенту, Истина) Тогда
				СтруктураСекций.СекцияКонтрагент.Параметры.Контрагент = ИтогПоКонтрагенту.Продавец;
				ТабличныйДокумент.Вывести(СтруктураСекций.СекцияКонтрагент);
				ТабличныйДокумент.НачатьГруппуСтрок();
			КонецЕсли;
			
			Для Каждого ИтогПоДокументу Из ИтогПоКонтрагенту.Строки Цикл
				Для Каждого ИтогПоКоду Из ИтогПоДокументу.Строки Цикл
					Для каждого ЗаписьКниги Из ИтогПоКоду.Строки Цикл
						
						Если ЗаписьКниги.СводныйКорректировочный Тогда
							Для Каждого ДетальнаяЗапись Из ЗаписьКниги.Строки Цикл
								Если ВыводитьСтроку(СтруктураПараметров, ДетальнаяЗапись) Тогда
									Счетчик = Счетчик + 1;
									ПараметрыСтроки.Ном = Счетчик;
									
									ЗаполнитьСтрокуКнигиПокупок(
									ПараметрыСтроки, ДетальнаяЗапись, СоответствиеСтрокиДопИнформацииПоСчетуФактуре, СтруктураПараметров);
									
									ОбластьТабличногоДокумента = ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрока);
									ДобавитьКонтрагентаНаПроверку(СтруктураПараметров, ДетальнаяЗапись, ОбластьТабличногоДокумента);
								Иначе
									УменьшитьСуммуИтога(ИтогПоКонтрагенту, ДетальнаяЗапись, СтруктураПараметров);
									УменьшитьСуммуИтога(ИтогПоОрганизации, ДетальнаяЗапись, СтруктураПараметров);
								КонецЕсли;
							КонецЦикла;
						Иначе	
							Если ВыводитьСтроку(СтруктураПараметров, ЗаписьКниги) Тогда
								Счетчик = Счетчик + 1;
								ПараметрыСтроки.Ном = Счетчик;
								
								ЗаполнитьСтрокуКнигиПокупок(
								ПараметрыСтроки, ЗаписьКниги, СоответствиеСтрокиДопИнформацииПоСчетуФактуре, СтруктураПараметров);
								
								ОбластьТабличногоДокумента = ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрока);
								ДобавитьКонтрагентаНаПроверку(СтруктураПараметров, ЗаписьКниги, ОбластьТабличногоДокумента);
							Иначе
								УменьшитьСуммуИтога(ИтогПоКонтрагенту, ЗаписьКниги, СтруктураПараметров);
								УменьшитьСуммуИтога(ИтогПоОрганизации, ЗаписьКниги, СтруктураПараметров);
							КонецЕсли;
						КонецЕсли;
						
					КонецЦикла; 
				КонецЦикла; 
			КонецЦикла; 
			
			Если ВыводитьСтроку(СтруктураПараметров, ИтогПоКонтрагенту, Истина) Тогда
				ТабличныйДокумент.ЗакончитьГруппуСтрок();
				СтруктураСекций.СекцияВсегоКонтрагент.Параметры.Заполнить(ИтогПоКонтрагенту);
				ТабличныйДокумент.Вывести(СтруктураСекций.СекцияВсегоКонтрагент);
			КонецЕсли;
		КонецЦикла;
	Иначе
		
		Для каждого ИтогПоДокументу Из ИтогПоОрганизации.Строки Цикл
			Для каждого ИтогПоКоду Из ИтогПоДокументу.Строки Цикл
				Для каждого ЗаписьКниги Из ИтогПоКоду.Строки Цикл
					
					Если ЗаписьКниги.СводныйКорректировочный Тогда
						Для Каждого ДетальнаяЗапись Из ЗаписьКниги.Строки Цикл
							Если ВыводитьСтроку(СтруктураПараметров, ДетальнаяЗапись) Тогда
								
								Если СтруктураПараметров.ЗаполнениеДокумента Тогда
									ПараметрыСтроки = ТаблицаДокумента.Добавить();
								КонецЕсли;
								
								Счетчик = Счетчик + 1;
								ПараметрыСтроки.Ном = Счетчик;
								
								ЗаполнитьСтрокуКнигиПокупок(
								ПараметрыСтроки, ДетальнаяЗапись, СоответствиеСтрокиДопИнформацииПоСчетуФактуре, СтруктураПараметров);
								
								Если НЕ СтруктураПараметров.ЗаполнениеДокумента Тогда
									ОбластьТабличногоДокумента = ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрока);
									ДобавитьКонтрагентаНаПроверку(СтруктураПараметров, ДетальнаяЗапись, ОбластьТабличногоДокумента);
								КонецЕсли;
							Иначе
								УменьшитьСуммуИтога(ИтогПоОрганизации, ДетальнаяЗапись, СтруктураПараметров);
							КонецЕсли;
						КонецЦикла;
					Иначе
						Если ВыводитьСтроку(СтруктураПараметров, ЗаписьКниги) Тогда
							
							Если СтруктураПараметров.ЗаполнениеДокумента Тогда
								ПараметрыСтроки = ТаблицаДокумента.Добавить();
							КонецЕсли;	
							
							Счетчик = Счетчик + 1;
							ПараметрыСтроки.Ном = Счетчик;
							
							ЗаполнитьСтрокуКнигиПокупок(
							ПараметрыСтроки, ЗаписьКниги, СоответствиеСтрокиДопИнформацииПоСчетуФактуре, СтруктураПараметров);
							
							Если НЕ СтруктураПараметров.ЗаполнениеДокумента Тогда
								ОбластьТабличногоДокумента = ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрока);
								ДобавитьКонтрагентаНаПроверку(СтруктураПараметров, ЗаписьКниги, ОбластьТабличногоДокумента);
							КонецЕсли;
						Иначе
							УменьшитьСуммуИтога(ИтогПоОрганизации, ЗаписьКниги, СтруктураПараметров);
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуКнигиПокупок(
	ПараметрыСтроки, ЗаписьКниги, СоответствиеСтрокиДопИнформацииПоСчетуФактуре, СтруктураПараметров)

	ЭтоДетальнаяЗапись = Ложь;
	Если ЗаписьКниги.Строки.Количество() > 0 Тогда 
		ПараметрыЗаполнения = ЗаписьКниги.Строки[0];
	Иначе
		ПараметрыЗаполнения = ЗаписьКниги;
		ЭтоДетальнаяЗапись = Истина;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, ПараметрыЗаполнения);
	
	ВариантыПредставленияСФ = ОпределитьДатуИНомерСФ(ПараметрыЗаполнения);
	
	// Универсальная структура для заполнения книги по разным версиям постановления
	СоставСтроки = Новый Структура;
	
	СоставСтроки.Вставить("КодОперации", ПараметрыЗаполнения.КодВидаОперации);

	СоставСтроки.Вставить("ПродавецИНН", ПараметрыЗаполнения.ПродавецИНН);
	СоставСтроки.Вставить("ПродавецКПП", ПараметрыЗаполнения.ПродавецКПП);
	
	Графа10 = Строка(ПараметрыЗаполнения.ПродавецИНН) 
		+ ?(ЗначениеЗаполнено(ПараметрыЗаполнения.ПродавецКПП), "/" , "")
		+ Строка(ПараметрыЗаполнения.ПродавецКПП);

	СоставСтроки.Вставить("Валюта", ?(ЗначениеЗаполнено(ПараметрыЗаполнения.Валюта),
		"" + ПараметрыЗаполнения.Валюта + ", " + ПараметрыЗаполнения.ВалютаКод, ""));
	СоставСтроки.Вставить("ВсегоПокупок",      ЗаписьКниги.ВсегоПокупок);
	СоставСтроки.Вставить("СуммаБезНДС18",     ЗаписьКниги.СуммаБезНДС18);
	СоставСтроки.Вставить("НДС18",             ЗаписьКниги.НДС18);
	СоставСтроки.Вставить("СуммаБезНДС10",     ЗаписьКниги.СуммаБезНДС10);
	СоставСтроки.Вставить("НДС10",             ЗаписьКниги.НДС10);
	СоставСтроки.Вставить("НДС0",              ЗаписьКниги.НДС0);
	СоставСтроки.Вставить("НДС",               ЗаписьКниги.НДС);
	СоставСтроки.Вставить("СуммаСовсемБезНДС", ЗаписьКниги.СуммаСовсемБезНДС);
	СоставСтроки.Вставить("ДатаНомер",         ВариантыПредставленияСФ.ДатаНомер);
	СоставСтроки.Вставить("НомерДата",         ВариантыПредставленияСФ.НомерДата);
	СоставСтроки.Вставить("ДатаОприходования", Формат(ЗаписьКниги.ДатаОприходования, "ДФ=dd.MM.yyyy"));
	
	Если ЗначениеЗаполнено(ЗаписьКниги.СчетФактураДокумент) Тогда
		СоставСтроки.Вставить("СчетФактура", ЗаписьКниги.СчетФактураДокумент);
	КонецЕсли;
	
	ВариантыПредставленияИспрСФ = ОпределитьНомерИДатуИсправленногоСФ(ПараметрыЗаполнения);
	СоставСтроки.Вставить("НомерДатаИсправления", ВариантыПредставленияИспрСФ.НомерДата);
	
	ВариантыПредставленияКоррСФ = ОпределитьНомерИДатуКорректировочногоСФ(ПараметрыЗаполнения);
	СоставСтроки.Вставить("НомерДатаКорректировки", ВариантыПредставленияКоррСФ.НомерДата);
	
	ВариантыПредставленияИспрКоррСФ = ОпределитьНомерИДатуИсправленияКорректировочногоСФ(ПараметрыЗаполнения);
	СоставСтроки.Вставить("НомерДатаИсправленияКорректировки", ВариантыПредставленияИспрКоррСФ.НомерДата);
	
	ТекстОплаты = "";
	СписокДатОплат = Новый СписокЗначений();
	
	ТекстОплатыСНомером = "";
	СписокНомеровИДатОплат = Новый СписокЗначений();
	
	МассивДокПдтвУпл = Новый Массив(); // Массив документов оплаты НДС для декларации с 1 кв 2015 года
	
	ТекстНомерГТД = "";
	ТекстСтранаНомерГТД = "";
	
	ТекстГрафа7 = "";
	ТекстГрафа9 = "";
	ТекстГрафа10 = "";
	МассивСвПрод = Новый Массив();
	
	СуммаСНДС = 0;
	
	Если ЭтоДетальнаяЗапись Тогда
		
		Если ЗначениеЗаполнено(ЗаписьКниги.ДатаОплаты) Тогда
			Если СписокДатОплат.НайтиПоЗначению(Формат(ЗаписьКниги.ДатаОплаты, "ДФ=dd.MM.yyyy")) = Неопределено тогда
				ТекстОплаты = ТекстОплаты + ?(НЕ ЗначениеЗаполнено(ТекстОплаты), "", ","+Символы.ПС) + Формат(ЗаписьКниги.ДатаОплаты, "ДФ=dd.MM.yyyy");
				СписокДатОплат.Добавить(Формат(ЗаписьКниги.ДатаОплаты, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗаписьКниги.НомерДокументаОплаты) Тогда
			НомерДатаОплаты = "" + ЗаписьКниги.НомерДокументаОплаты + ";" + Формат(ЗаписьКниги.ДатаДокументаОплаты, "ДФ=dd.MM.yyyy");
			Если СписокНомеровИДатОплат.НайтиПоЗначению(НомерДатаОплаты) = Неопределено тогда
				
				ТекстОплатыСНомером = ТекстОплатыСНомером + ?(НЕ ЗначениеЗаполнено(ТекстОплатыСНомером), "", "," + Символы.ПС) + НомерДатаОплаты;
				СписокНомеровИДатОплат.Добавить(НомерДатаОплаты);
				
				СтруктураДокПдтвУпл = Новый Структура("НомДокПдтвУпл,ДатаДокПдтвУпл");
				СтруктураДокПдтвУпл.НомДокПдтвУпл = ЗаписьКниги.НомерДокументаОплаты;
				СтруктураДокПдтвУпл.ДатаДокПдтвУпл = Формат(ЗаписьКниги.ДатаДокументаОплаты, "ДФ=dd.MM.yyyy");
				МассивДокПдтвУпл.Добавить(СтруктураДокПдтвУпл);
				
			КонецЕсли;
		КонецЕсли;
		
		СоставСтроки.СчетФактура = ЗаписьКниги.СчетФактураДокументРасшифровка;
		
	Иначе
		
		Для Каждого СтрокаЗаписи Из ЗаписьКниги.Строки Цикл
			
			Если ЗначениеЗаполнено(СтрокаЗаписи.ДатаОплаты) Тогда
				Если СписокДатОплат.НайтиПоЗначению(Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy")) = Неопределено Тогда
					ТекстОплаты = ТекстОплаты + ?(НЕ ЗначениеЗаполнено(ТекстОплаты), "", "," 
						+ Символы.ПС) + Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy");
					СписокДатОплат.Добавить(Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy"));
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаЗаписи.НомерДокументаОплаты) Тогда
				НомерДатаОплаты = "" + СтрокаЗаписи.НомерДокументаОплаты + ";" + Формат(СтрокаЗаписи.ДатаДокументаОплаты, "ДФ=dd.MM.yyyy");
				Если СписокНомеровИДатОплат.НайтиПоЗначению(НомерДатаОплаты) = Неопределено тогда
					ТекстОплатыСНомером = ТекстОплатыСНомером 
						+ ?(НЕ ЗначениеЗаполнено(ТекстОплатыСНомером), "", ","+ Символы.ПС) + НомерДатаОплаты;
					СписокНомеровИДатОплат.Добавить(НомерДатаОплаты);
					
					СтруктураДокПдтвУпл = Новый Структура("НомДокПдтвУпл,ДатаДокПдтвУпл");
					СтруктураДокПдтвУпл.НомДокПдтвУпл = СтрокаЗаписи.НомерДокументаОплаты;
					СтруктураДокПдтвУпл.ДатаДокПдтвУпл = Формат(СтрокаЗаписи.ДатаДокументаОплаты, "ДФ=dd.MM.yyyy");
					МассивДокПдтвУпл.Добавить(СтруктураДокПдтвУпл);
				КонецЕсли;
			КонецЕсли;
			
			СоставСтроки.СчетФактура = СтрокаЗаписи.СчетФактураДокументРасшифровка;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// ГТД и страна происхождения
	СчетаФактуры = ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(
		ЗаписьКниги.Строки.ВыгрузитьКолонку("СчетФактура"));
	
	Для Каждого СчетФактура Из СчетаФактуры Цикл
		
		Если ЗначениеЗаполнено(СчетФактура) Тогда
			СтрокаДополнительнойИнформации = СоответствиеСтрокиДопИнформацииПоСчетуФактуре[Строка(СчетФактура.УникальныйИдентификатор())];
		Иначе
			СтрокаДополнительнойИнформации = Неопределено;
		КонецЕсли;
		
		Если НЕ СтрокаДополнительнойИнформации = Неопределено Тогда
			
			Если СокрЛП(СтрокаДополнительнойИнформации.ГТДиСтрана) <> "" Тогда
				ТекстСтранаНомерГТД = ТекстСтранаНомерГТД + ?(ТекстСтранаНомерГТД = "", "", ", ") 
					+ СокрЛП(СтрокаДополнительнойИнформации.ГТДиСтрана);
				ТекстНомерГТД = ТекстНомерГТД + ?(ТекстНомерГТД = "", "", ", ") 
					+ СокрЛП(СтрокаДополнительнойИнформации.ГТД);
			КонецЕсли;

		КонецЕсли;
	
	КонецЦикла;

	СоставСтроки.Вставить("НомерГТД",  ТекстСтранаНомерГТД);
	СоставСтроки.Вставить("НомерГТД_", ТекстНомерГТД);
		
	// Дополнительная информация по сводному комиссионному счету-фактуре (продавцы, платежно-расчетные документы)
	// в учете комитента-покупателя
	СчетаФактурыДокументы = ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(
		ЗаписьКниги.Строки.ВыгрузитьКолонку("СчетФактураДокумент"));
	
	Для Каждого СчетФактураДокумент Из СчетаФактурыДокументы Цикл
		
		Если ЗначениеЗаполнено(СчетФактураДокумент) Тогда
			СтрокаДополнительнойИнформации = СоответствиеСтрокиДопИнформацииПоСчетуФактуре[Строка(СчетФактураДокумент.УникальныйИдентификатор())];
		Иначе
			СтрокаДополнительнойИнформации = Неопределено;
		КонецЕсли;
		
		Если НЕ СтрокаДополнительнойИнформации = Неопределено Тогда
			
			Если НЕ ПустаяСтрока(СокрЛП(СтрокаДополнительнойИнформации.Графа7)) Тогда
				ТекстГрафа7 = ТекстГрафа7 + ?(ПустаяСтрока(ТекстГрафа7), "", ", ")
					+ СтрокаДополнительнойИнформации.Графа7;
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(СокрЛП(СтрокаДополнительнойИнформации.Графа9)) Тогда
				ТекстГрафа9 = ТекстГрафа9 + ?(ПустаяСтрока(ТекстГрафа9), "", ", ")
					+ СтрокаДополнительнойИнформации.Графа9;
				ТекстГрафа10 = ТекстГрафа10 + ?(ПустаяСтрока(ТекстГрафа10), "", ", ")
					+ СтрокаДополнительнойИнформации.Графа10;
				МассивСвПрод = СтрокаДополнительнойИнформации.МассивСвПрод;
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
	СоставСтроки.Вставить("ДатаОплаты",  ТекстОплаты); // Постановление 1137 до редакции 735
	СоставСтроки.Вставить("НомерДатаОплаты", ?(ПустаяСтрока(ТекстГрафа7), ТекстОплатыСНомером, ТекстГрафа7)); // Постановление в редакции 735/1279
	СоставСтроки.Вставить("Продавец",        ?(ПустаяСтрока(ТекстГрафа9), ПараметрыЗаполнения.Продавец, ТекстГрафа9));
	СоставСтроки.Вставить("Графа10",         ?(ПустаяСтрока(ТекстГрафа9), Графа10, ТекстГрафа10));
	
	Если НЕ ПустаяСтрока(ТекстГрафа9) Тогда
		
		Посредник        = ПараметрыЗаполнения.Продавец;
		ПосредникИНН     = ПараметрыЗаполнения.ПродавецИНН;
		ПосредникКПП     = ПараметрыЗаполнения.ПродавецКПП;
		ПосредникИНН_КПП = Строка(ПараметрыЗаполнения.ПродавецИНН) 
			+ ?(ЗначениеЗаполнено(ПараметрыЗаполнения.ПродавецКПП), "/" + Строка(ПараметрыЗаполнения.ПродавецКПП), "");
		СоставСтроки.Вставить("Контрагент", ТекстГрафа9);

	ИначеЕсли ЗначениеЗаполнено(ПараметрыЗаполнения.Посредник) Тогда
		
		Посредник        = ПараметрыЗаполнения.Посредник;
		ПосредникИНН     = ПараметрыЗаполнения.ПосредникИНН;
		ПосредникКПП     = ПараметрыЗаполнения.ПосредникКПП;
		ПосредникИНН_КПП = Строка(ПараметрыЗаполнения.ПосредникИНН)
			+ ?(ЗначениеЗаполнено(ПараметрыЗаполнения.ПосредникКПП), "/" + Строка(ПараметрыЗаполнения.ПосредникКПП), "");
		
	Иначе
		
		Посредник = "";
		ПосредникИНН_КПП = "";
		ПосредникИНН = "";
		ПосредникКПП = "";
		
	КонецЕсли;
	
	СоставСтроки.Вставить("Посредник", Посредник);
	СоставСтроки.Вставить("ПосредникИНН_КПП", ПосредникИНН_КПП);
	
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, СоставСтроки);
	
	Если СтруктураПараметров.ЗаполнениеДекларации Тогда
		
		СоставСтроки.Вставить("НомерПор", ПараметрыСтроки.Ном);
		
		СоставСтроки.Вставить("НомСчФПрод",  ВариантыПредставленияСФ.Номер);
		СоставСтроки.Вставить("ДатаСчФПрод", ВариантыПредставленияСФ.Дата);
		
		СоставСтроки.Вставить("НомИспрСчФ",  ВариантыПредставленияИспрСФ.Номер);
		СоставСтроки.Вставить("ДатаИспрСчФ", ВариантыПредставленияИспрСФ.Дата);
		
		СоставСтроки.Вставить("НомКСчФПрод",  ВариантыПредставленияКоррСФ.Номер);
		СоставСтроки.Вставить("ДатаКСчФПрод", ВариантыПредставленияКоррСФ.Дата);
		
		СоставСтроки.Вставить("НомИспрКСчФ",  ВариантыПредставленияИспрКоррСФ.Номер);
		СоставСтроки.Вставить("ДатаИспрКСчФ", ВариантыПредставленияИспрКоррСФ.Дата);
		
		СоставСтроки.Вставить("НомТД", ТекстНомерГТД);
		СоставСтроки.Вставить("ОКВ", Строка(ПараметрыЗаполнения.ВалютаКод));
		
		СоставСтроки.Вставить("СтоимПокупВ", СоставСтроки.ВсегоПокупок);
		СоставСтроки.Вставить("СумНДСВыч", СоставСтроки.НДС);
		СоставСтроки.Вставить("СумНДС", СоставСтроки.НДС); // Для раздела 8.1
		
		МассивКодВидОпер = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПараметрыЗаполнения.КодВидаОперации, ";");
		СоставСтроки.Вставить("КодВидОпер", МассивКодВидОпер);
		
		МассивДатаУчТов = Новый Массив();
		Если ЗначениеЗаполнено(ЗаписьКниги.ДатаОприходования) Тогда
			МассивДатаУчТов.Добавить(Формат(ЗаписьКниги.ДатаОприходования, "ДФ=dd.MM.yyyy"));
		КонецЕсли; 
		
		СоставСтроки.Вставить("ДатаУчТов", МассивДатаУчТов);
		
		СоставСтроки.Вставить("ДокПдтвУпл", МассивДокПдтвУпл);
		
		Если МассивСвПрод.Количество() = 0
			И НЕ ПустаяСтрока(ПараметрыЗаполнения.ПродавецИНН) Тогда
			МассивСвПрод.Добавить(
				ПолучитьСтруктуруРеквизитовКонтрагента(ПараметрыЗаполнения.ПродавецИНН, ПараметрыЗаполнения.ПродавецКПП));
		КонецЕсли;
		
		СоставСтроки.Вставить("СвПрод", МассивСвПрод);
		
		Если НЕ ПустаяСтрока(ПосредникИНН) Тогда
			СоставСтроки.Вставить("СвПос", 
				ПолучитьСтруктуруРеквизитовКонтрагента(ПосредникИНН, ПосредникКПП));
		КонецЕсли;
		
		Если СтруктураПараметров.ЗаписьДополнительногоЛиста Тогда
			СтрокаРаздела = СтруктураПараметров.ТаблицаРаздел81.Добавить();
		Иначе
			СтрокаРаздела = СтруктураПараметров.ТаблицаРаздел8.Добавить();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаРаздела, СоставСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПреобразоватьЗаписиДополнительногоЛистаКнигиПокупок(
	СтруктураПараметров, ИтогПоПериодамКорректировки, ИтогЗаПериод,
	ТабличныйДокумент = Неопределено, СписокСчетовФактур, ПараметрыСтроки = Неопределено,
	ТаблицаДокумента = Неопределено, СтруктураСекций = Неопределено) Экспорт
	
	СоответствиеСтрокиДопИнформацииПоСчетуФактуре = ПолучитьДополнительнуюИнформациюПоСФДляКнигиПокупок(
		СписокСчетовФактур, СтруктураПараметров);
		
	Если НЕ СтруктураПараметров.Свойство("ЗаполнениеДекларации") Тогда
		СтруктураПараметров.Вставить("ЗаполнениеДекларации", Ложь);
	ИначеЕсли СтруктураПараметров.ЗаполнениеДекларации И СтруктураПараметров.КонецПериода < '20150101' Тогда
		СтруктураПараметров.ЗаполнениеДекларации = Ложь;
	КонецЕсли;
	
	Если СтруктураПараметров.ЗаполнениеДекларации Тогда
		Счетчик = СтруктураПараметров.СчетчикСтрокДопЛиста;
	Иначе
		Счетчик = 0;
	КонецЕсли; 

	Если НЕ СтруктураПараметров.ЗаполнениеДокумента
		И НЕ СтруктураПараметров.ЗаполнениеДекларации
		И СтруктураПараметров.ГруппироватьПоКонтрагентам 
		И НЕ СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме Тогда // Только отчет по произвольной форме
		
		Для каждого ИтогПоКонтрагенту Из ИтогПоПериодамКорректировки.Строки Цикл
			СтруктураСекций.СекцияКонтрагент.Параметры.Контрагент = ИтогПоКонтрагенту.Продавец;
			ТабличныйДокумент.Вывести(СтруктураСекций.СекцияКонтрагент);
			ТабличныйДокумент.НачатьГруппуСтрок();
			Для каждого ИтогПоДокументу Из ИтогПоКонтрагенту.Строки Цикл
				Для каждого ИтогПоДоговору Из ИтогПоДокументу.Строки Цикл
					Для каждого ИтогПоКоду Из ИтогПоДоговору.Строки Цикл
						Для каждого ЗаписьКниги Из ИтогПоКоду.Строки Цикл
							
							Счетчик = Счетчик + 1;
							ПараметрыСтроки.Ном = Счетчик;
							
							ЗаполнитьСтрокуКнигиПокупок(
							ПараметрыСтроки, ЗаписьКниги, СоответствиеСтрокиДопИнформацииПоСчетуФактуре, СтруктураПараметров);
							
							ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрока);
							
							ИтогЗаПериод.ВсегоПокупок = ИтогЗаПериод.ВсегоПокупок + ЗаписьКниги.ВсегоПокупок;
							ИтогЗаПериод.СуммаБезНДС10 = ИтогЗаПериод.СуммаБезНДС10 + ЗаписьКниги.СуммаБезНДС10;
							ИтогЗаПериод.НДС10 = ИтогЗаПериод.НДС10 + ЗаписьКниги.НДС10;
							ИтогЗаПериод.СуммаБезНДС18 = ИтогЗаПериод.СуммаБезНДС18 + ЗаписьКниги.СуммаБезНДС18;
							ИтогЗаПериод.НДС18 = ИтогЗаПериод.НДС18 + ЗаписьКниги.НДС18;
							ИтогЗаПериод.НДС0 = ИтогЗаПериод.НДС0 + ЗаписьКниги.НДС0;
							ИтогЗаПериод.НДС  = ИтогЗаПериод.НДС + ЗаписьКниги.НДС;
							ИтогЗаПериод.СуммаСовсемБезНДС = ИтогЗаПериод.СуммаСовсемБезНДС + ЗаписьКниги.СуммаСовсемБезНДС;
						КонецЦикла; 
					КонецЦикла; 
				КонецЦикла; 
			КонецЦикла; 
			ТабличныйДокумент.ЗакончитьГруппуСтрок();
			СтруктураСекций.СекцияВсегоКонтрагент.Параметры.Заполнить(ИтогПоКонтрагенту);
			ТабличныйДокумент.Вывести(СтруктураСекций.СекцияВсегоКонтрагент);
		КонецЦикла;
	Иначе
		Для Каждого ИтогПоДокументу Из ИтогПоПериодамКорректировки.Строки Цикл
			Для каждого ИтогПоДоговору Из ИтогПоДокументу.Строки Цикл
				Для каждого ИтогПоКоду Из ИтогПоДоговору.Строки Цикл
					Для каждого ЗаписьКниги Из ИтогПоКоду.Строки Цикл
						
						Если СтруктураПараметров.ЗаполнениеДокумента Тогда 
							ПараметрыСтроки = ТаблицаДокумента.Добавить();
						КонецЕсли;
						
						Счетчик = Счетчик + 1;
						ПараметрыСтроки.Ном = Счетчик;
						
						ЗаполнитьСтрокуКнигиПокупок(
						ПараметрыСтроки, ЗаписьКниги, СоответствиеСтрокиДопИнформацииПоСчетуФактуре, СтруктураПараметров);
						
						Если НЕ СтруктураПараметров.ЗаполнениеДокумента Тогда 
							ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрока);
						КонецЕсли;
						
						ИтогЗаПериод.ВсегоПокупок = ИтогЗаПериод.ВсегоПокупок + ЗаписьКниги.ВсегоПокупок;
						ИтогЗаПериод.СуммаБезНДС10 = ИтогЗаПериод.СуммаБезНДС10 + ЗаписьКниги.СуммаБезНДС10;
						ИтогЗаПериод.НДС10 = ИтогЗаПериод.НДС10 + ЗаписьКниги.НДС10;
						ИтогЗаПериод.СуммаБезНДС18 = ИтогЗаПериод.СуммаБезНДС18 + ЗаписьКниги.СуммаБезНДС18;
						ИтогЗаПериод.НДС18 = ИтогЗаПериод.НДС18 + ЗаписьКниги.НДС18;
						ИтогЗаПериод.НДС0 = ИтогЗаПериод.НДС0 + ЗаписьКниги.НДС0;
						ИтогЗаПериод.НДС  = ИтогЗаПериод.НДС + ЗаписьКниги.НДС;
						ИтогЗаПериод.СуммаСовсемБезНДС = ИтогЗаПериод.СуммаСовсемБезНДС + ЗаписьКниги.СуммаСовсемБезНДС;
						
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураПараметров.ЗаполнениеДекларации Тогда
		СтруктураПараметров.СчетчикСтрокДопЛиста = Счетчик;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиШапкуДопЛиста(ТабличныйДокумент, Макет, СтруктураПараметров, НомерДополнительногоЛиста) Экспорт
	
	ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	Организация = СтруктураПараметров.Организация;
	
	Если СтруктураПараметров.ЗаполнениеДокумента
		ИЛИ СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме Тогда
		Секция = Макет.ПолучитьОбласть("ШапкаИнформация");	
		ТабличныйДокумент.Вывести(Секция);	
	КонецЕсли;	
	
	Секция = Макет.ПолучитьОбласть("Шапка");
	Секция.Параметры.УстановленныйОтбор = "";
	Секция.Параметры.Период = ПредставлениеПериода(СтруктураПараметров.НалоговыйПериод, КонецДня(СтруктураПараметров.КонецНалоговогоПериода), "ФП = Истина");
	
	Если СтруктураПараметров.ДополнительныеЛистыЗаТекущийПериод Тогда
		Секция.Параметры.НомерЛиста = НомерДополнительногоЛиста;	
	КонецЕсли;
		
	СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Организация);
	
	НазваниеОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм");;
	
	Секция.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	Секция.Параметры.ИННКППОрганизации = "" + Организация.ИНН + ?(НЕ ЗначениеЗаполнено(Организация.КПП), "", ("/" + Организация.КПП));
	Секция.Параметры.ДатаСоставления = Формат(СтруктураПараметров.ДатаОформления, "ДФ=dd.MM.yyyy");
	
	Если НЕ СтруктураПараметров.ЗаполнениеДокумента 
		И НЕ СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме
		И СтруктураПараметров.ОтбиратьПоКонтрагенту Тогда
		Секция.Параметры.УстановленныйОтбор = НСтр("ru='Отбор: Контрагент '") + ?(ОбщегоНазначения.ОбъектЯвляетсяГруппой(СтруктураПараметров.КонтрагентДляОтбора), НСтр("ru='в группе '"), "= ") + СтруктураПараметров.КонтрагентДляОтбора;
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(Секция);
	
КонецПроцедуры

// Книга продаж, дополнительные листы книги продаж

Процедура ПреобразоватьЗаписиКнигиПродаж(
		СтруктураПараметров, НаборЗаписей, ТабличныйДокумент = Неопределено,
		СписокСчетовФактур, ИтогПоОрганизации = 0, ПараметрыСтроки = Неопределено,
		ТаблицаДокумента = Неопределено, СтруктураСекций = Неопределено) Экспорт
		
	Если НЕ СтруктураПараметров.Свойство("ЗаполнениеДекларации") Тогда
		СтруктураПараметров.Вставить("ЗаполнениеДекларации", Ложь);
	ИначеЕсли СтруктураПараметров.ЗаполнениеДекларации И СтруктураПараметров.КонецПериода < '20150101' Тогда
		СтруктураПараметров.ЗаполнениеДекларации = Ложь;
	КонецЕсли;

	ДеревоЗаписей = НаборЗаписей.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	ИтогПоОрганизации = ДеревоЗаписей.Строки[0];
		
	ТаблицаДополнительнойИнформацииПоСФ = ПолучитьДополнительнуюИнформациюПоСФ(СтруктураПараметров, СписокСчетовФактур);
		
	Если СтруктураПараметров.ГруппироватьПоКонтрагентам Тогда
		СекцияКонтрагент = СтруктураСекций.СекцияКонтрагент;
		СекцияВсегоКонтрагент = СтруктураСекций.СекцияВсегоКонтрагент;
	КонецЕсли;

	Счетчик = 0; // Счетчик строк книги продаж

	Если НЕ СтруктураПараметров.ЗаполнениеДокумента
		И НЕ СтруктураПараметров.ЗаполнениеДекларации
		И СтруктураПараметров.ГруппироватьПоКонтрагентам 
		И Не СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме Тогда
		
		Для Каждого ИтогПоКонтрагенту Из ИтогПоОрганизации.Строки Цикл 
			Если ВыводитьСтроку(СтруктураПараметров, ИтогПоКонтрагенту, Истина) Тогда
				СекцияКонтрагент.Параметры.Контрагент = ИтогПоКонтрагенту.Покупатель;
				ТабличныйДокумент.Вывести(СекцияКонтрагент);
				ТабличныйДокумент.НачатьГруппуСтрок();
			КонецЕсли;
		
			Для Каждого НалоговыеПериоды Из ИтогПоКонтрагенту.Строки Цикл
				Для Каждого СтрокаПоПорядокОтражения Из НалоговыеПериоды.Строки Цикл
					Для Каждого ИтогПоДокументу Из СтрокаПоПорядокОтражения.Строки Цикл
						Для Каждого ЗаписьКниги  Из ИтогПоДокументу.Строки Цикл
							
							Если ЗаписьКниги.СводныйКорректировочный Тогда
								
								Для Каждого ЗаписьКнигиДетальная Из ЗаписьКниги.Строки Цикл
									Если ВыводитьСтроку(СтруктураПараметров, ЗаписьКнигиДетальная) Тогда
										Счетчик = Счетчик + 1;
										ЗаполнитьСтрокуКнигиПродаж(СтруктураПараметров, ПараметрыСтроки, ЗаписьКнигиДетальная, Счетчик);
										ОбластьТабличногоДокумента = ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрока);
										ДобавитьКонтрагентаНаПроверку(СтруктураПараметров, ЗаписьКнигиДетальная, ОбластьТабличногоДокумента);
									Иначе
										УменьшитьСуммуИтога(ИтогПоКонтрагенту, ЗаписьКнигиДетальная, СтруктураПараметров);
										УменьшитьСуммуИтога(ИтогПоОрганизации, ЗаписьКнигиДетальная, СтруктураПараметров);
									КонецЕсли;
								КонецЦикла;
								
							ИначеЕсли ЗаписьКниги.СводныйКомиссионный Тогда
								
								Если СтруктураПараметров.ЗаполнениеДокумента Тогда 
									ПараметрыСтроки = ТаблицаДокумента.Добавить();
								КонецЕсли;
								
								Счетчик = Счетчик + 1;
								ЗаполнитьСтрокуКнигиПродажСводныйКомиссионный(ЗаписьКниги.Строки, СтруктураПараметров, ПараметрыСтроки, Счетчик);
								Если НЕ СтруктураПараметров.ЗаполнениеДокумента Тогда
									ОбластьТабличногоДокумента = ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрока);
								КонецЕсли;

							Иначе
								Если ВыводитьСтроку(СтруктураПараметров, ЗаписьКниги) Тогда
									Счетчик = Счетчик + 1;
									ЗаполнитьСтрокуКнигиПродаж(СтруктураПараметров, ПараметрыСтроки, ЗаписьКниги, Счетчик);
									ОбластьТабличногоДокумента = ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрока);
									ДобавитьКонтрагентаНаПроверку(СтруктураПараметров, ЗаписьКниги, ОбластьТабличногоДокумента);
								Иначе									
									УменьшитьСуммуИтога(ИтогПоКонтрагенту, ЗаписьКниги, СтруктураПараметров);
									УменьшитьСуммуИтога(ИтогПоОрганизации, ЗаписьКниги, СтруктураПараметров);								
								КонецЕсли;
							КонецЕсли;
							
						КонецЦикла; 
					КонецЦикла; 
				КонецЦикла; 
			КонецЦикла;
					
			Если ВыводитьСтроку(СтруктураПараметров, ИтогПоКонтрагенту, Истина) Тогда
				ТабличныйДокумент.ЗакончитьГруппуСтрок();
				СекцияВсегоКонтрагент.Параметры.Заполнить(ИтогПоКонтрагенту);
				ТабличныйДокумент.Вывести(СекцияВсегоКонтрагент);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Для Каждого НалоговыеПериоды Из ИтогПоОрганизации.Строки Цикл
			Для Каждого СтрокаПоПорядокОтражения Из НалоговыеПериоды.Строки Цикл
				Для Каждого ИтогПоДокументу Из СтрокаПоПорядокОтражения.Строки Цикл
					Для Каждого ЗаписьКниги Из ИтогПоДокументу.Строки Цикл
						
						Если ЗаписьКниги.Строки.Количество() > 1 И ЗаписьКниги.Покупатель = "Розничная продажа"  
							ИЛИ ЗаписьКниги.СводныйКорректировочный Тогда
														
							Для Каждого ЗаписьКнигиДетальная Из ЗаписьКниги.Строки Цикл
								Если ВыводитьСтроку(СтруктураПараметров, ЗаписьКнигиДетальная) Тогда
									Если СтруктураПараметров.ЗаполнениеДокумента Тогда 
										ПараметрыСтроки = ТаблицаДокумента.Добавить();
									КонецЕсли;
									
									Счетчик = Счетчик + 1;
									ЗаполнитьСтрокуКнигиПродаж(СтруктураПараметров, ПараметрыСтроки, ЗаписьКнигиДетальная, Счетчик);
									
									Если НЕ СтруктураПараметров.ЗаполнениеДокумента Тогда
										ОбластьТабличногоДокумента = ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрока);
										ДобавитьКонтрагентаНаПроверку(СтруктураПараметров, ЗаписьКнигиДетальная, ОбластьТабличногоДокумента);
									КонецЕсли;								
								Иначе
									УменьшитьСуммуИтога(ИтогПоОрганизации, ЗаписьКнигиДетальная, СтруктураПараметров);
								КонецЕсли;
								
							КонецЦикла;
							
						ИначеЕсли ЗаписьКниги.СводныйКомиссионный Тогда
							
							Если СтруктураПараметров.ЗаполнениеДокумента Тогда 
								ПараметрыСтроки = ТаблицаДокумента.Добавить();
							КонецЕсли;
							
							Счетчик = Счетчик + 1;
							ЗаполнитьСтрокуКнигиПродажСводныйКомиссионный(ЗаписьКниги.Строки, СтруктураПараметров, ПараметрыСтроки, Счетчик);
							Если НЕ СтруктураПараметров.ЗаполнениеДокумента Тогда
								ОбластьТабличногоДокумента = ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрока);
							КонецЕсли;
							
						Иначе
							Если ВыводитьСтроку(СтруктураПараметров, ЗаписьКниги) Тогда
								
								Если СтруктураПараметров.ЗаполнениеДокумента Тогда 
									ПараметрыСтроки = ТаблицаДокумента.Добавить();
								КонецЕсли;
								
								Счетчик = Счетчик + 1;
								ЗаполнитьСтрокуКнигиПродаж(СтруктураПараметров, ПараметрыСтроки, ЗаписьКниги, Счетчик);
								
								Если НЕ СтруктураПараметров.ЗаполнениеДокумента Тогда
									ОбластьТабличногоДокумента = ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрока);
									ДобавитьКонтрагентаНаПроверку(СтруктураПараметров, ЗаписьКниги, ОбластьТабличногоДокумента);
								КонецЕсли;
							Иначе
								УменьшитьСуммуИтога(ИтогПоОрганизации, ЗаписьКниги, СтруктураПараметров);
							КонецЕсли;
						КонецЕсли;
						
					КонецЦикла; 
				КонецЦикла; 
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуКнигиПродаж(СтруктураПараметров, Секция, ЗаписьКниги, НомерСтроки)
	
	ЭтоДетальнаяЗапись = Ложь;
	Если ЗаписьКниги.Строки.Количество() > 0 Тогда 
		ПараметрыЗаполнения = ЗаписьКниги.Строки[0];
	Иначе
		ПараметрыЗаполнения = ЗаписьКниги;
		ЭтоДетальнаяЗапись = Истина;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Секция, ПараметрыЗаполнения);
	
	// Универсальная структура для заполнения книги по разным версиям постановления
	СоставСтроки = Новый Структура;

	СоставСтроки.Вставить("ВсегоПродаж",       ЗаписьКниги.ВсегоПродаж);
	СоставСтроки.Вставить("СуммаБезНДС18",     ЗаписьКниги.СуммаБезНДС18);
	СоставСтроки.Вставить("НДС18",             ЗаписьКниги.НДС18);
	СоставСтроки.Вставить("СуммаБезНДС10",     ЗаписьКниги.СуммаБезНДС10);
	СоставСтроки.Вставить("НДС10",             ЗаписьКниги.НДС10);
	СоставСтроки.Вставить("НДС0",              ЗаписьКниги.НДС0);
	СоставСтроки.Вставить("СуммаСовсемБезНДС", ЗаписьКниги.СуммаСовсемБезНДС);

	Если ЗначениеЗаполнено(ЗаписьКниги.СчетФактураДокумент) Тогда
		СоставСтроки.Вставить("СчетФактура", ЗаписьКниги.СчетФактураДокумент);
	ИначеЕсли ЗаписьКниги.Строки.Количество() <> 0 Тогда
		СоставСтроки.Вставить("СчетФактура", ЗаписьКниги.Строки[0].СчетФактура);
	КонецЕсли;
		
	Если ЭтоДетальнаяЗапись И ЗаписьКниги.Строки.Количество() = 0 Тогда
		РасшифровкаДанныхПокупателя = ЗаписьКниги;
	Иначе
		РасшифровкаДанныхПокупателя = ПараметрыЗаполнения;
	КонецЕсли;
	
	ВариантыПредставленияСФ = ОпределитьДатуИНомерСФ(РасшифровкаДанныхПокупателя);
	
	СоставСтроки.Вставить("Ном",         НомерСтроки);
	СоставСтроки.Вставить("КодОперации", РасшифровкаДанныхПокупателя.КодВидаОперации);
	
	Если ЗначениеЗаполнено(РасшифровкаДанныхПокупателя.Покупатель) Тогда
		СоставСтроки.Вставить("Покупатель",    РасшифровкаДанныхПокупателя.Покупатель);
		СоставСтроки.Вставить("ПокупательИНН", РасшифровкаДанныхПокупателя.ПокупательИНН);
		СоставСтроки.Вставить("ПокупательКПП", РасшифровкаДанныхПокупателя.ПокупательКПП);
		СоставСтроки.Вставить("Графа8", Строка(РасшифровкаДанныхПокупателя.ПокупательИНН) 
			+ ?(ЗначениеЗаполнено(РасшифровкаДанныхПокупателя.ПокупательКПП), "/" + Строка(РасшифровкаДанныхПокупателя.ПокупательКПП), ""));
		СоставСтроки.Вставить("Посредник", РасшифровкаДанныхПокупателя.Посредник);
		СоставСтроки.Вставить("ПосредникИНН_КПП", "" + Строка(РасшифровкаДанныхПокупателя.ПосредникИНН) 
			+ ?(ЗначениеЗаполнено(РасшифровкаДанныхПокупателя.ПосредникКПП), "/" + Строка(РасшифровкаДанныхПокупателя.ПосредникКПП), ""));
	КонецЕсли;
	
	СоставСтроки.Вставить("Валюта", 
		?(ЗначениеЗаполнено(РасшифровкаДанныхПокупателя.Валюта),
		"" + РасшифровкаДанныхПокупателя.Валюта + ", " + РасшифровкаДанныхПокупателя.ВалютаКод,  ""));
	СоставСтроки.Вставить("ВсегоПродажВВалюте", 
		?(ЗначениеЗаполнено(РасшифровкаДанныхПокупателя.Валюта), РасшифровкаДанныхПокупателя.ВсегоПродажВВалюте, ""));
	СоставСтроки.Вставить("ДатаНомер", ВариантыПредставленияСФ.ДатаНомер);
	СоставСтроки.Вставить("НомерДата", ВариантыПредставленияСФ.НомерДата);
	
	Если ЗначениеЗаполнено(РасшифровкаДанныхПокупателя.СчетФактура) Тогда
		ИдентификаторСтроки = Строка(РасшифровкаДанныхПокупателя.СчетФактура.УникальныйИдентификатор());
		СтрокаДополнительнойИнформации = СтруктураПараметров.СоответствиеСтрокиДопИнформацииПоСчетуФактуре[ИдентификаторСтроки];
		Если СтрокаДополнительнойИнформации <> Неопределено 
			И СтрокаДополнительнойИнформации.Строки.Количество() <> 0 Тогда
			СтрокаДополнительнойИнформации = СтрокаДополнительнойИнформации.Строки[0];
		Иначе
			СтрокаДополнительнойИнформации = Неопределено;
		КонецЕсли; 
	Иначе
		СтрокаДополнительнойИнформации = Неопределено;
	КонецЕсли;
	
	ВариантыПредставленияИспрСФ = ОпределитьНомерИДатуИсправленногоСФ(РасшифровкаДанныхПокупателя);
	СоставСтроки.Вставить("НомерДатаИсправления", ВариантыПредставленияИспрСФ.НомерДата);
	
	ВариантыПредставленияКоррСФ = ОпределитьНомерИДатуКорректировочногоСФ(РасшифровкаДанныхПокупателя);
	СоставСтроки.Вставить("НомерДатаКорректировки", ВариантыПредставленияКоррСФ.НомерДата);
	
	ВариантыПредставленияИспрКоррСФ = ОпределитьНомерИДатуИсправленияКорректировочногоСФ(РасшифровкаДанныхПокупателя);
	СоставСтроки.Вставить("НомерДатаИсправленияКорректировки", ВариантыПредставленияИспрКоррСФ.НомерДата);
	
	МассивДокПдтвОпл = Новый Массив(); // Массив документов оплаты НДС для декларации с 1 кв 2015 года
	
	ТекстОплаты = "";
	СписокДатОплат = Новый СписокЗначений();
	ТекстОплатыСНомером = "";
	СписокНомеровИДатОплат = Новый СписокЗначений();
	
	Если ЭтоДетальнаяЗапись Тогда 
		
		Если ЗначениеЗаполнено(ЗаписьКниги.ДатаОплаты) Тогда
			Если СписокДатОплат.НайтиПоЗначению(Формат(ЗаписьКниги.ДатаОплаты, "ДФ=dd.MM.yyyy")) = Неопределено Тогда
				ТекстОплаты = ТекстОплаты + ?(НЕ ЗначениеЗаполнено(ТекстОплаты), "", "," + Символы.ПС) 
					+ Формат(ЗаписьКниги.ДатаОплаты, "ДФ=dd.MM.yyyy");
				СписокДатОплат.Добавить(Формат(ЗаписьКниги.ДатаОплаты, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗаписьКниги.НомерДокументаОплаты) Тогда
			НомерДатаОплаты = "" + ЗаписьКниги.НомерДокументаОплаты + ";" + Формат(ЗаписьКниги.ДатаДокументаОплаты, "ДФ=dd.MM.yyyy");
			Если СписокНомеровИДатОплат.НайтиПоЗначению(НомерДатаОплаты) = Неопределено Тогда
				
				ТекстОплатыСНомером = ТекстОплатыСНомером + ?(НЕ ЗначениеЗаполнено(ТекстОплатыСНомером), "", "," + Символы.ПС) 
					+ НомерДатаОплаты;
				СписокНомеровИДатОплат.Добавить(НомерДатаОплаты);
				
				СтруктураДокПдтвОпл = Новый Структура("НомДокПдтвОпл,ДатаДокПдтвОпл");
				СтруктураДокПдтвОпл.НомДокПдтвОпл = ЗаписьКниги.НомерДокументаОплаты;
				СтруктураДокПдтвОпл.ДатаДокПдтвОпл = Формат(ЗаписьКниги.ДатаДокументаОплаты, "ДФ=dd.MM.yyyy");
				МассивДокПдтвОпл.Добавить(СтруктураДокПдтвОпл);
				
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		Для Каждого СтрокаЗаписи Из ЗаписьКниги.Строки Цикл
			
			Если ЗначениеЗаполнено(СтрокаЗаписи.ДатаОплаты) Тогда
				Если СписокДатОплат.НайтиПоЗначению(Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy")) = Неопределено Тогда
					ТекстОплаты = ТекстОплаты + ?(НЕ ЗначениеЗаполнено(ТекстОплаты), "", "," + Символы.ПС) 
						+ Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy");
					СписокДатОплат.Добавить(Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy"));
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаЗаписи.НомерДокументаОплаты) Тогда
				НомерДатаОплаты = "" + СтрокаЗаписи.НомерДокументаОплаты + ";" + Формат(СтрокаЗаписи.ДатаДокументаОплаты, "ДФ=dd.MM.yyyy");
				Если СписокНомеровИДатОплат.НайтиПоЗначению(НомерДатаОплаты) = Неопределено Тогда
					
					ТекстОплатыСНомером = ТекстОплатыСНомером + ?(НЕ ЗначениеЗаполнено(ТекстОплатыСНомером), "", "," + Символы.ПС) 
						+ НомерДатаОплаты;
					СписокНомеровИДатОплат.Добавить(НомерДатаОплаты);
					
					СтруктураДокПдтвОпл = Новый Структура("НомДокПдтвОпл,ДатаДокПдтвОпл");
					СтруктураДокПдтвОпл.НомДокПдтвОпл = СтрокаЗаписи.НомерДокументаОплаты;
					СтруктураДокПдтвОпл.ДатаДокПдтвОпл = Формат(СтрокаЗаписи.ДатаДокументаОплаты, "ДФ=dd.MM.yyyy");
					МассивДокПдтвОпл.Добавить(СтруктураДокПдтвОпл);

				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СоставСтроки.Вставить("НомерДатаОплаты", ТекстОплатыСНомером);
	СоставСтроки.Вставить("ДатаОплаты",      ТекстОплаты);
	
	ЗаполнитьЗначенияСвойств(Секция, СоставСтроки);
	
	Если СтруктураПараметров.ЗаполнениеДекларации Тогда
		
		СоставСтроки.Вставить("НомерПор", НомерСтроки);
		
		СоставСтроки.Вставить("НомСчФПрод",  ВариантыПредставленияСФ.Номер);
		СоставСтроки.Вставить("ДатаСчФПрод", ВариантыПредставленияСФ.Дата);
		
		СоставСтроки.Вставить("НомИспрСчФ",  ВариантыПредставленияИспрСФ.Номер);
		СоставСтроки.Вставить("ДатаИспрСчФ", ВариантыПредставленияИспрСФ.Дата);
		
		СоставСтроки.Вставить("НомКСчФПрод",  ВариантыПредставленияКоррСФ.Номер);
		СоставСтроки.Вставить("ДатаКСчФПрод", ВариантыПредставленияКоррСФ.Дата);
		
		СоставСтроки.Вставить("НомИспрКСчФ",  ВариантыПредставленияИспрКоррСФ.Номер);
		СоставСтроки.Вставить("ДатаИспрКСчФ", ВариантыПредставленияИспрКоррСФ.Дата);
		
		СоставСтроки.Вставить("ОКВ", Строка(РасшифровкаДанныхПокупателя.ВалютаКод));
		
		МассивКодВидОпер = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(РасшифровкаДанныхПокупателя.КодВидаОперации, ";");
		СоставСтроки.Вставить("КодВидОпер", МассивКодВидОпер);
		
		СоставСтроки.Вставить("ДокПдтвОпл", МассивДокПдтвОпл);
		
		// Сведения о покупателе
		
		МассивСвПок = Новый Массив();
		
		Если СоставСтроки.Свойство("ПокупательИНН")
			И НЕ ПустаяСтрока(СоставСтроки.ПокупательИНН) Тогда
			МассивСвПок.Добавить(
				ПолучитьСтруктуруРеквизитовКонтрагента(ПараметрыЗаполнения.ПокупательИНН, ПараметрыЗаполнения.ПокупательКПП));
		КонецЕсли;
		
		СоставСтроки.Вставить("СвПокуп", МассивСвПок);
		
		// Сведения о посреднике
		
		Если СоставСтроки.Свойство("Посредник")
			И НЕ ПустаяСтрока(РасшифровкаДанныхПокупателя.ПосредникИНН) Тогда
			СоставСтроки.Вставить("СвПос", 
				ПолучитьСтруктуруРеквизитовКонтрагента(РасшифровкаДанныхПокупателя.ПосредникИНН, РасшифровкаДанныхПокупателя.ПосредникКПП));
		КонецЕсли;
		
		СоставСтроки.Вставить("СтоимПродСФВ",  РасшифровкаДанныхПокупателя.ВсегоПродажВВалюте);
		СоставСтроки.Вставить("СтоимПродСФ",   ЗаписьКниги.ВсегоПродаж);
		СоставСтроки.Вставить("СтоимПродСФ18", ЗаписьКниги.СуммаБезНДС18);
		СоставСтроки.Вставить("СтоимПродСФ10", ЗаписьКниги.СуммаБезНДС10);
		СоставСтроки.Вставить("СтоимПродСФ0",  ЗаписьКниги.НДС0);
		СоставСтроки.Вставить("СумНДССФ18",    ЗаписьКниги.НДС18);
		СоставСтроки.Вставить("СумНДССФ10",    ЗаписьКниги.НДС10);
		СоставСтроки.Вставить("СтоимПродОсв",  ЗаписьКниги.СуммаСовсемБезНДС);
		
		Если СтруктураПараметров.ЗаписьДополнительногоЛиста Тогда
			СтрокаРаздела = СтруктураПараметров.ТаблицаРаздел91.Добавить();
		Иначе
			СтрокаРаздела = СтруктураПараметров.ТаблицаРаздел9.Добавить();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаРаздела, СоставСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДополнительнуюИнформациюПоСФ(СтруктураПараметров, СписокСчетовФактур, ЗаписьДополнительногоЛиста = Ложь)
	
	// Определить частичные оплаты
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НДСЗаписиКнигиПродаж.СчетФактура КАК СчетФактура,
	|	СУММА(НДСЗаписиКнигиПродаж.СуммаБезНДСОборот + НДСЗаписиКнигиПродаж.НДСОборот) КАК СуммаСНДС
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|			,
	|			&КонецПериода,
	|			Период,
	|			Организация В (&Организация)
	|				И СчетФактура В (&СписокСчетовФактур)
	|				И НЕ(ВидЦенности В (&ВидыЦенностей_ОплатаПоНДС)
	|						ИЛИ ВидЦенности В (&ВидыЦенностей_БезОплаты))) КАК НДСЗаписиКнигиПродаж
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСЗаписиКнигиПродаж.СчетФактура
	|ИТОГИ ПО
	|	СчетФактура";
	
	Запрос.УстановитьПараметр("Организация",  СтруктураПараметров.СписокОрганизаций);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(СтруктураПараметров.КонецПериода));
	Запрос.УстановитьПараметр("СписокСчетовФактур",  СписокСчетовФактур);
	
	// Виды ценностей с особым порядком распределения оплат - по НДС выплаченному в бюджет
	ВидыЦенностей_ОплатаПоНДС = Новый СписокЗначений;
	
	// Виды ценностей с особым порядком распределения оплат - оплата не определяется
	ВидыЦенностей_БезОплаты = Новый СписокЗначений;
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.ВнутреннееПотребление);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежи);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.ВозвратАвансовПолученных);
	ВидыЦенностей_БезОплаты.Добавить(Перечисления.ВидыЦенностей.СуммыСвязанныеСРасчетамиПоОплате);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_ОплатаПоНДС", ВидыЦенностей_ОплатаПоНДС);
	Запрос.УстановитьПараметр("ВидыЦенностей_БезОплаты", ВидыЦенностей_БезОплаты);
	
	ДополнительнаяИнформацияПоСФ = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	СтруктураПараметров.СоответствиеСтрокиДопИнформацииПоСчетуФактуре = Новый Соответствие;
	
	ДополнительнаяИнформацияПоСФ.Колонки.Добавить("IDСчетФактура", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Для Каждого СтрокаИнформации Из ДополнительнаяИнформацияПоСФ.Строки Цикл
		Если ЗначениеЗаполнено(СтрокаИнформации.СчетФактура) Тогда
			СтруктураПараметров.СоответствиеСтрокиДопИнформацииПоСчетуФактуре.Вставить(Строка(СтрокаИнформации.СчетФактура.УникальныйИдентификатор()), СтрокаИнформации);
		КонецЕсли; 
	КонецЦикла; 
	
	// дополняем информацию датами оплаты,
	// отраженными в регистре записей книг отдельно от сумм

	ДополнительнаяИнформацияПоСФ.Колонки.Добавить("ДатыОплаты");

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НДСЗаписиКнигиПродаж.СчетФактура КАК СчетФактура,
	|	НДСЗаписиКнигиПродаж.ДатаОплаты
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|ГДЕ
	|	НДСЗаписиКнигиПродаж.Организация В(&Организация)
	|	И ВЫБОР
	|			КОГДА &ЗаписьДополнительногоЛиста
	|					И &ДополнительныеЛистыЗаТекущийПериод
	|				ТОГДА НДСЗаписиКнигиПродаж.Период >= &НачалоПериода
	|						И (НДСЗаписиКнигиПродаж.КорректируемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода)
	|			ИНАЧЕ НДСЗаписиКнигиПродаж.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		КОНЕЦ
	|	И НДСЗаписиКнигиПродаж.СчетФактура В(&СписокСчетовФактур)
	|	И НДСЗаписиКнигиПродаж.СуммаБезНДС = 0
	|	И НДСЗаписиКнигиПродаж.НДС = 0
	|	И НЕ ЕСТЬNULL(НДСЗаписиКнигиПродаж.ДатаОплаты, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
	|	И НДСЗаписиКнигиПродаж.ЗаписьДополнительногоЛиста = &ЗаписьДополнительногоЛиста
	|ИТОГИ ПО
	|	СчетФактура";
	
	Запрос.УстановитьПараметр("НачалоПериода", СтруктураПараметров.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(СтруктураПараметров.КонецПериода));
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.СписокОрганизаций);
	Запрос.УстановитьПараметр("ЗаписьДополнительногоЛиста", ЗаписьДополнительногоЛиста);
	Запрос.УстановитьПараметр("ДополнительныеЛистыЗаТекущийПериод", СтруктураПараметров.ДополнительныеЛистыЗаТекущийПериод);
	Запрос.УстановитьПараметр("СписокСчетовФактур", СписокСчетовФактур);
	
	ДатыОплатСФ = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Для Каждого СтрокаСФ Из ДатыОплатСФ.Строки Цикл
		Если Не ЗначениеЗаполнено(СтрокаСФ.СчетФактура) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиИнформацииСФ = СтруктураПараметров.СоответствиеСтрокиДопИнформацииПоСчетуФактуре[Строка(СтрокаСФ.СчетФактура.УникальныйИдентификатор())];
		Если СтрокиИнформацииСФ = Неопределено Тогда
			НоваяСтрокаИнформацииСФ  = ДополнительнаяИнформацияПоСФ.Строки.Добавить();
			НоваяРазвернутаяСтрокаИнформацииСФ = НоваяСтрокаИнформацииСФ.Строки.Добавить();
			НоваяСтрокаИнформацииСФ.СчетФактура = СтрокаСФ.СчетФактура;
			НоваяРазвернутаяСтрокаИнформацииСФ.СчетФактура = СтрокаСФ.СчетФактура;
			СтруктураПараметров.СоответствиеСтрокиДопИнформацииПоСчетуФактуре.Вставить(Строка(СтрокаСФ.СчетФактура.УникальныйИдентификатор()), НоваяСтрокаИнформацииСФ);
			СтрокиИнформацииСФ = НоваяСтрокаИнформацииСФ.Строки;
		Иначе
			СтрокиИнформацииСФ = СтрокиИнформацииСФ.Строки;
		КонецЕсли; 
		
		Для Каждого СтрокаИнформацииСФ Из СтрокиИнформацииСФ Цикл
			СтрокаИнформацииСФ.ДатыОплаты = СтрокаСФ.Строки.ВыгрузитьКолонку("ДатаОплаты");;
		КонецЦикла; 
	КонецЦикла; 

	Возврат ДополнительнаяИнформацияПоСФ;
	
КонецФункции // ПолучитьДополнительнуюИнформациюПоСФ()

Процедура ПреобразоватьЗаписиДополнительногоЛистаКнигиПродаж(
	СтруктураПараметров, ИтогПоПериодамКорректировки, ИтогЗаПериод, 
	ТабличныйДокумент = Неопределено, СписокСчетовФактур, ПараметрыСтроки = Неопределено, 
	ТаблицаДокумента = Неопределено, СтруктураСекций = Неопределено) Экспорт
	
	ТаблицаДополнительнойИнформацииПоСФ = ПолучитьДополнительнуюИнформациюПоСФ(
		СтруктураПараметров, СписокСчетовФактур, Истина);
	
	Если НЕ СтруктураПараметров.Свойство("ЗаполнениеДекларации") Тогда
		СтруктураПараметров.Вставить("ЗаполнениеДекларации", Ложь);
	ИначеЕсли СтруктураПараметров.ЗаполнениеДекларации И СтруктураПараметров.КонецПериода < '20150101' Тогда
		СтруктураПараметров.ЗаполнениеДекларации = Ложь;
	КонецЕсли;
	
	Если СтруктураПараметров.ЗаполнениеДекларации Тогда
		Счетчик = СтруктураПараметров.СчетчикСтрокДопЛиста;
	Иначе
		Счетчик = 0;
	КонецЕсли;
	
	Если НЕ СтруктураПараметров.ЗаполнениеДокумента
		И НЕ СтруктураПараметров.ЗаполнениеДекларации
		И СтруктураПараметров.ГруппироватьПоКонтрагентам 
		И Не СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме Тогда
		Для Каждого ИтогПоКонтрагенту Из ИтогПоПериодамКорректировки.Строки Цикл
			СтруктураСекций.СекцияКонтрагент.Параметры.Контрагент = ИтогПоКонтрагенту.Покупатель;
			ТабличныйДокумент.Вывести(СтруктураСекций.СекцияКонтрагент);
			ТабличныйДокумент.НачатьГруппуСтрок();
			Для каждого ЗаписьПоСФ Из ИтогПоКонтрагенту.Строки Цикл
				Для Каждого РазделениеПоДоговоруДляАвансов Из ЗаписьПоСФ.Строки Цикл
					Для Каждого ЗаписьКниги Из РазделениеПоДоговоруДляАвансов.Строки Цикл
						
						Счетчик = Счетчик + 1;

						ЗаполнитьСтрокуКнигиПродаж(СтруктураПараметров, ПараметрыСтроки, ЗаписьКниги, Счетчик);
						
						ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрока);
						
						ИтогЗаПериод.ВсегоПродаж = ИтогЗаПериод.ВсегоПродаж + ЗаписьКниги.ВсегоПродаж;
						ИтогЗаПериод.СуммаБезНДС10 = ИтогЗаПериод.СуммаБезНДС10 + ЗаписьКниги.СуммаБезНДС10;
						ИтогЗаПериод.НДС10 = ИтогЗаПериод.НДС10 + ЗаписьКниги.НДС10;
						ИтогЗаПериод.СуммаБезНДС18 = ИтогЗаПериод.СуммаБезНДС18 + ЗаписьКниги.СуммаБезНДС18;
						ИтогЗаПериод.НДС18 = ИтогЗаПериод.НДС18 + ЗаписьКниги.НДС18;
						ИтогЗаПериод.НДС0 = ИтогЗаПериод.НДС0 + ЗаписьКниги.НДС0;
						ИтогЗаПериод.СуммаСовсемБезНДС = ИтогЗаПериод.СуммаСовсемБезНДС + ЗаписьКниги.СуммаСовсемБезНДС;
						
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
			ТабличныйДокумент.ЗакончитьГруппуСтрок();
			СтруктураСекций.СекцияВсегоКонтрагент.Параметры.Заполнить(ИтогПоКонтрагенту);
			ТабличныйДокумент.Вывести(СтруктураСекций.СекцияВсегоКонтрагент);
		КонецЦикла;
	Иначе	
		Для Каждого ЗаписьПоСФ Из ИтогПоПериодамКорректировки.Строки Цикл
			Для Каждого РазделениеПоДоговоруДляАвансов Из ЗаписьПоСФ.Строки Цикл
				Для Каждого ЗаписьКниги Из РазделениеПоДоговоруДляАвансов.Строки Цикл
					
					Если СтруктураПараметров.ЗаполнениеДокумента Тогда 
						ПараметрыСтроки = ТаблицаДокумента.Добавить();
					КонецЕсли;
					
					Счетчик = Счетчик + 1;
					
					ЗаполнитьСтрокуКнигиПродаж(СтруктураПараметров, ПараметрыСтроки, ЗаписьКниги, Счетчик);
					
					Если НЕ СтруктураПараметров.ЗаполнениеДокумента Тогда 
						ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрока);
					КонецЕсли;
					
					ИтогЗаПериод.ВсегоПродаж = ИтогЗаПериод.ВсегоПродаж + ЗаписьКниги.ВсегоПродаж;
					ИтогЗаПериод.СуммаБезНДС10 = ИтогЗаПериод.СуммаБезНДС10 + ЗаписьКниги.СуммаБезНДС10;
					ИтогЗаПериод.НДС10 = ИтогЗаПериод.НДС10 + ЗаписьКниги.НДС10;
					ИтогЗаПериод.СуммаБезНДС18 = ИтогЗаПериод.СуммаБезНДС18 + ЗаписьКниги.СуммаБезНДС18;
					ИтогЗаПериод.НДС18 = ИтогЗаПериод.НДС18 + ЗаписьКниги.НДС18;
					ИтогЗаПериод.НДС0 = ИтогЗаПериод.НДС0 + ЗаписьКниги.НДС0;
					ИтогЗаПериод.СуммаСовсемБезНДС = ИтогЗаПериод.СуммаСовсемБезНДС + ЗаписьКниги.СуммаСовсемБезНДС;
					
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураПараметров.ЗаполнениеДекларации Тогда
		СтруктураПараметров.СчетчикСтрокДопЛиста = Счетчик;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуКнигиПродажСводныйКомиссионный(ЗаписиКниги, СтруктураПараметров, Секция, НомерСтроки)
	
	КоличествоЗаписей  = ЗаписиКниги.Количество();
	ТекущаяЗапись      = 0;
	ВсегоПродаж        = 0;
	ВсегоПродажВВалюте = 0;
	СуммаБезНДС18      = 0;
	НДС18              = 0;
	СуммаБезНДС10      = 0;
	НДС10              = 0;
	НДС0               = 0;
	СуммаСовсемБезНДС  = 0;
	Покупатель         = "";
	Графа8             = "";
	
	ДатыНомераОплатыПоКонтрагентам = "";
	
	МассивДокПдтвОпл = Новый Массив(); // Массив документов оплаты НДС для декларации с 1 кв 2015 года
		
	Для Каждого ЗаписьКниги Из ЗаписиКниги Цикл
		
		ЭтоДетальнаяЗапись = Ложь;
		Если ЗаписьКниги.Строки.Количество() > 0 Тогда 
			ЗаписьКнигиДетальная = ЗаписьКниги.Строки[0];
		Иначе
			ЗаписьКнигиДетальная = ЗаписьКниги;
			ЭтоДетальнаяЗапись = Истина;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Секция, ЗаписьКнигиДетальная);
		
		ТекущаяЗапись = ТекущаяЗапись + 1;
		
		Если ЗначениеЗаполнено(ЗаписьКнигиДетальная.НомерДокументаОплаты) Тогда
			
			НомерДатаОплаты = "" + ЗаписьКнигиДетальная.НомерДокументаОплаты 
				+ ";" + Формат(ЗаписьКнигиДетальная.ДатаДокументаОплаты, "ДФ=dd.MM.yyyy");
				
			ДатыНомераОплатыПоКонтрагентам = ДатыНомераОплатыПоКонтрагентам 
				+ ?(НЕ ЗначениеЗаполнено(ДатыНомераОплатыПоКонтрагентам), "", 
				?(НЕ ЗначениеЗаполнено(НомерДатаОплаты), "", "," + Символы.ПС)) + НомерДатаОплаты;
				
			СтруктураДокПдтвОпл = Новый Структура("НомДокПдтвОпл,ДатаДокПдтвОпл");
			СтруктураДокПдтвОпл.НомДокПдтвОпл = ЗаписьКнигиДетальная.НомерДокументаОплаты;
			СтруктураДокПдтвОпл.ДатаДокПдтвОпл = Формат(ЗаписьКнигиДетальная.ДатаДокументаОплаты, "ДФ=dd.MM.yyyy");
			МассивДокПдтвОпл.Добавить(СтруктураДокПдтвОпл);
				
		Иначе
			
			ВсегоПродаж         = ВсегоПродаж + ЗаписьКнигиДетальная.ВсегоПродаж;
			ВсегоПродажВВалюте  = ВсегоПродажВВалюте 
				+ ?(ЗначениеЗаполнено(ЗаписьКнигиДетальная.Валюта), ЗаписьКнигиДетальная.ВсегоПродажВВалюте, 0);
				
			СуммаБезНДС18       = СуммаБезНДС18 + ЗаписьКнигиДетальная.СуммаБезНДС18;
			НДС18               = НДС18 + ЗаписьКнигиДетальная.НДС18;
			СуммаБезНДС10       = СуммаБезНДС10 + ЗаписьКнигиДетальная.СуммаБезНДС10;
			НДС10               = НДС10 + ЗаписьКнигиДетальная.НДС10;
			НДС0                = НДС0 + ЗаписьКнигиДетальная.НДС0;
			СуммаСовсемБезНДС   = СуммаСовсемБезНДС + ЗаписьКнигиДетальная.СуммаСовсемБезНДС;
			
			Покупатель = Покупатель + ?(Покупатель = "", "", ";" + Символы.ПС) + ЗаписьКнигиДетальная.Покупатель;
				
			Графа8 = Графа8 + ?(Графа8 = "", "", ";" + Символы.ПС) 
				+ ЗаписьКнигиДетальная.ПокупательИНН 
				+ ?(ЗначениеЗаполнено(ЗаписьКнигиДетальная.ПокупательКПП), "/" + ЗаписьКнигиДетальная.ПокупательКПП, "");
				
			// Сведения о покупателе
			
			МассивСвПок = Новый Массив();
			
			Если НЕ ПустаяСтрока(ЗаписьКнигиДетальная.ПокупательИНН) Тогда
				МассивСвПок.Добавить(
					ПолучитьСтруктуруРеквизитовКонтрагента(ЗаписьКнигиДетальная.ПокупательИНН, ЗаписьКнигиДетальная.ПокупательКПП));
			КонецЕсли;

		КонецЕсли;
		
		Если ТекущаяЗапись = КоличествоЗаписей Тогда
			
			ВариантыПредставленияСФ = ОпределитьДатуИНомерСФ(ЗаписьКнигиДетальная);
			
			СоставСтроки = Новый Структура;
			
			СоставСтроки.Вставить("ДатаНомер", ВариантыПредставленияСФ.ДатаНомер);
			СоставСтроки.Вставить("НомерДата", ВариантыПредставленияСФ.НомерДата);
			
			СоставСтроки.Вставить("Ном",           НомерСтроки);
			СоставСтроки.Вставить("КодОперации",   ЗаписьКнигиДетальная.КодВидаОперации);
			СоставСтроки.Вставить("Покупатель",    Покупатель);
			СоставСтроки.Вставить("ПокупательИНН", ЗаписьКнигиДетальная.ПокупательИНН);
			СоставСтроки.Вставить("ПокупательКПП", ЗаписьКнигиДетальная.ПокупательКПП);
			СоставСтроки.Вставить("Графа8",        Графа8);
			
			// Сведения о посреднике
			
			СоставСтроки.Вставить("Посредник",     ЗаписьКнигиДетальная.Посредник);
			СоставСтроки.Вставить("ПосредникИНН_КПП","" + ЗаписьКнигиДетальная.ПосредникИНН + 
				?(ЗначениеЗаполнено(ЗаписьКнигиДетальная.ПосредникКПП), "/" + ЗаписьКнигиДетальная.ПосредникКПП, ""));
				
			Если НЕ ПустаяСтрока(ЗаписьКнигиДетальная.ПосредникИНН) Тогда
				СоставСтроки.Вставить("СвПос", 
					ПолучитьСтруктуруРеквизитовКонтрагента(ЗаписьКнигиДетальная.ПосредникИНН, ЗаписьКнигиДетальная.ПосредникКПП));
			КонецЕсли;
	
			СоставСтроки.Вставить("Валюта",
				?(ЗначениеЗаполнено(ЗаписьКнигиДетальная.Валюта),
				"" + ЗаписьКнигиДетальная.Валюта + ", " + ЗаписьКнигиДетальная.ВалютаКод,  ""));
				
			СоставСтроки.Вставить("ВсегоПродажВВалюте",  ВсегоПродажВВалюте);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СоставСтроки.Вставить("ВсегоПродаж",        ВсегоПродаж);
	СоставСтроки.Вставить("ВсегоПродажВВалюте", ВсегоПродажВВалюте);
	СоставСтроки.Вставить("СуммаБезНДС18",      СуммаБезНДС18);
	СоставСтроки.Вставить("НДС18",              НДС18);
	СоставСтроки.Вставить("СуммаБезНДС10",      СуммаБезНДС10);
	СоставСтроки.Вставить("НДС10",              НДС10);
	СоставСтроки.Вставить("НДС0",               НДС0);
	СоставСтроки.Вставить("СуммаСовсемБезНДС",  СуммаСовсемБезНДС);
	СоставСтроки.Вставить("Контрагент",         Покупатель);
	СоставСтроки.Вставить("НомерДатаОплаты",    ДатыНомераОплатыПоКонтрагентам);
	
	ЗаполнитьЗначенияСвойств(Секция, СоставСтроки);

	Если СтруктураПараметров.ЗаполнениеДекларации Тогда
		
		СоставСтроки.Вставить("НомерПор", НомерСтроки);
		
		СоставСтроки.Вставить("НомСчФПрод",  ВариантыПредставленияСФ.Номер);
		СоставСтроки.Вставить("ДатаСчФПрод", ВариантыПредставленияСФ.Дата);
		
		СоставСтроки.Вставить("ОКВ", Строка(ЗаписьКнигиДетальная.ВалютаКод));
		
		МассивКодВидОпер = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ЗаписьКнигиДетальная.КодВидаОперации, ";");
		СоставСтроки.Вставить("КодВидОпер", МассивКодВидОпер);
		
		СоставСтроки.Вставить("ДокПдтвОпл", МассивДокПдтвОпл);
		СоставСтроки.Вставить("СвПокуп", МассивСвПок);
		
		СоставСтроки.Вставить("СтоимПродСФВ",  ВсегоПродажВВалюте);
		СоставСтроки.Вставить("СтоимПродСФ",   ВсегоПродаж);
		СоставСтроки.Вставить("СтоимПродСФ18", СуммаБезНДС18);
		СоставСтроки.Вставить("СтоимПродСФ10", СуммаБезНДС10);
		СоставСтроки.Вставить("СтоимПродСФ0",  НДС0);
		СоставСтроки.Вставить("СумНДССФ18",    НДС18);
		СоставСтроки.Вставить("СумНДССФ10",    НДС10);
		СоставСтроки.Вставить("СтоимПродОсв",  СуммаСовсемБезНДС);
		
		Если СтруктураПараметров.ЗаписьДополнительногоЛиста Тогда
			СтрокаРаздела = СтруктураПараметров.ТаблицаРаздел91.Добавить();
		Иначе
			СтрокаРаздела = СтруктураПараметров.ТаблицаРаздел9.Добавить();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаРаздела, СоставСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

// Журнал учета счетов-фактур

Процедура ЗаполнитьСтрокуЖурналаУчетаСчетовФактур(
	ПараметрыСтроки, ЗаписьЖурналаУчетаСчетовФактур, СтруктураПараметров, ДополнительныеСвойства = Неопределено, НомерПП = 1) Экспорт
	
	ТекстБезНДС = "без НДС";
	ТекстПустаяСтрока = "";
	
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, ЗаписьЖурналаУчетаСчетовФактур);
	
	// Универсальная структура для заполнения журнала по разным версиям постановления
	СоставСтроки = Новый Структура;
	СоставСтроки.Вставить("КодОперации", 	 		ЗаписьЖурналаУчетаСчетовФактур.КодВидаОперации);
	СоставСтроки.Вставить("НомерСчетаФактуры", 	 	ЗаписьЖурналаУчетаСчетовФактур.НомерСчетаФактуры);
	СоставСтроки.Вставить("ДатаСчетаФактуры", 	 	Формат(ЗаписьЖурналаУчетаСчетовФактур.ДатаСчетаФактуры, "ДФ=dd.MM.yyyy"));
	СоставСтроки.Вставить("НомерДата", 	 			"" + ЗаписьЖурналаУчетаСчетовФактур.НомерСчетаФактуры 
		+ ?(ЗначениеЗаполнено(ЗаписьЖурналаУчетаСчетовФактур.НомерСчетаФактуры), ";", "") + Формат(ЗаписьЖурналаУчетаСчетовФактур.ДатаСчетаФактуры, "ДФ=dd.MM.yyyy"));
	СоставСтроки.Вставить("НомерИсправления", 	 	ЗаписьЖурналаУчетаСчетовФактур.НомерИсправления);
	СоставСтроки.Вставить("ДатаИсправления", 	 	Формат(ЗаписьЖурналаУчетаСчетовФактур.ДатаИсправления, "ДФ=dd.MM.yyyy"));
	СоставСтроки.Вставить("НомерДатаИсправления", 	"" + ЗаписьЖурналаУчетаСчетовФактур.НомерИсправления
		+ ?(ЗначениеЗаполнено(ЗаписьЖурналаУчетаСчетовФактур.НомерИсправления), ";", "") + Формат(ЗаписьЖурналаУчетаСчетовФактур.ДатаИсправления, "ДФ=dd.MM.yyyy"));
	СоставСтроки.Вставить("НомерКорректировочногоСчетаФактуры", 	ЗаписьЖурналаУчетаСчетовФактур.НомерКорректировочногоСчетаФактуры);
	СоставСтроки.Вставить("ДатаКорректировочногоСчетаФактуры", 	 	Формат(ЗаписьЖурналаУчетаСчетовФактур.ДатаКорректировочногоСчетаФактуры, "ДФ=dd.MM.yyyy"));
	СоставСтроки.Вставить("НомерДатаКорректировки",	"" + ЗаписьЖурналаУчетаСчетовФактур.НомерКорректировочногоСчетаФактуры
		+ ?(ЗначениеЗаполнено(ЗаписьЖурналаУчетаСчетовФактур.НомерКорректировочногоСчетаФактуры), ";", "") + Формат(ЗаписьЖурналаУчетаСчетовФактур.ДатаКорректировочногоСчетаФактуры, "ДФ=dd.MM.yyyy"));
	СоставСтроки.Вставить("НомерДатаИсправленияКорректировки", 	"" + ЗаписьЖурналаУчетаСчетовФактур.НомерИсправленияКорректировочногоСчетаФактуры
		+ ?(ЗначениеЗаполнено(ЗаписьЖурналаУчетаСчетовФактур.НомерИсправленияКорректировочногоСчетаФактуры), ";", "") + Формат(ЗаписьЖурналаУчетаСчетовФактур.ДатаИсправленияКорректировочногоСчетаФактуры, "ДФ=dd.MM.yyyy"));	
	СоставСтроки.Вставить("ДатаПередачиПолучения",	Формат(ЗаписьЖурналаУчетаСчетовФактур.ДатаПередачиПолучения, "ДФ=dd.MM.yyyy"));
	СоставСтроки.Вставить("КонтрагентИННКПП",		СокрЛП(ЗаписьЖурналаУчетаСчетовФактур.КонтрагентИНН)
		+ ?(НЕ ПустаяСтрока(ЗаписьЖурналаУчетаСчетовФактур.КонтрагентКПП),"/", "") + СокрЛП(ЗаписьЖурналаУчетаСчетовФактур.КонтрагентКПП));
	СоставСтроки.Вставить("Валюта",					СокрП(ЗаписьЖурналаУчетаСчетовФактур.НаименованиеВалюты) 
		+ ", " + ЗаписьЖурналаУчетаСчетовФактур.КодВалюты);
	
	Если ДополнительныеСвойства <> Неопределено Тогда
		ДопСвойстваСчетаФактуры = ДополнительныеСвойства.НайтиСтроки(Новый Структура("СчетФактура", ЗаписьЖурналаУчетаСчетовФактур.СчетФактураДокумент));
		Субкомиссионер          = "";
		СубкомиссионерИНН_КПП   = "";
		Если ДопСвойстваСчетаФактуры.Количество() > 0 Тогда
			ТаблицаДопСвойств = ДополнительныеСвойства.СкопироватьКолонки();
			Для каждого СтрокаДопСвойства Из ДопСвойстваСчетаФактуры Цикл
				НоваяСтрока = ТаблицаДопСвойств.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДопСвойства);
			КонецЦикла;
			ТаблицаДопСвойств.Сортировать("НомерСтроки");
			Для каждого СтрокаТаблицы Из ТаблицаДопСвойств Цикл
				Субкомиссионер = Субкомиссионер + ?(ПустаяСтрока(Субкомиссионер), "", ";") 
					+ СтрокаТаблицы.Субкомиссионер;
				СубкомиссионерИНН_КПП = СубкомиссионерИНН_КПП + ?(ПустаяСтрока(СубкомиссионерИНН_КПП), "", ";")
					+ СокрЛП(СтрокаТаблицы.СубкомиссионерИНН)
					+ ?(НЕ ПустаяСтрока(СтрокаТаблицы.СубкомиссионерКПП),"/", "") 
					+ СокрЛП(СтрокаТаблицы.СубкомиссионерКПП);
			КонецЦикла;
			
			// Формат выгрузки раздела 11 декларации по НДС (с 1 квартала 2015 года)
			// не учитывает возможность реализации товаров комитента через нескольких субкомиссионеров
			// в один день (и получение на все реализации сводного счета-фактуры от комитента)
			// Для выгрузки используется один из субкомиссионеров (по последней или единственной строке ТаблицаДопСвойств)
			
			Если НЕ ПустаяСтрока(СтрокаТаблицы.СубкомиссионерИНН) Тогда
				
				СоставСтроки.Вставить("СвКомис", 
					ПолучитьСтруктуруРеквизитовКонтрагента(СтрокаТаблицы.СубкомиссионерИНН, СтрокаТаблицы.СубкомиссионерКПП));
				
			КонецЕсли;
			
		КонецЕсли;
		
		СоставСтроки.Вставить("Субкомиссионер",        Субкомиссионер);
		СоставСтроки.Вставить("СубкомиссионерИНН_КПП", СубкомиссионерИНН_КПП);
	КонецЕсли;
	
	СоставСтроки.Вставить("КомитентИНН_КПП", СокрЛП(ЗаписьЖурналаУчетаСчетовФактур.КомитентИНН)
		+ ?(НЕ ПустаяСтрока(ЗаписьЖурналаУчетаСчетовФактур.КомитентКПП),"/", "") + СокрЛП(ЗаписьЖурналаУчетаСчетовФактур.КомитентКПП));	
	СоставСтроки.Вставить("НомерДатаСчетаФактурыКомитента",	СокрЛП(ЗаписьЖурналаУчетаСчетовФактур.НомерСчетаФактурыКомитента)
		+ ?(НЕ ПустаяСтрока(ЗаписьЖурналаУчетаСчетовФактур.НомерСчетаФактурыКомитента),";", "") 
		+ Формат(ЗаписьЖурналаУчетаСчетовФактур.ДатаСчетаФактурыКомитента, "ДФ=dd.MM.yyyy"));	
		
	Если ЗаписьЖурналаУчетаСчетовФактур.КорректировочныйСчетФактура Тогда
		
		СоставСтроки.Вставить("СуммаДокумента", ТекстПустаяСтрока);
		СоставСтроки.Вставить("СуммаНДС", ТекстПустаяСтрока);
		
		СоставСтроки.Вставить("СуммаДокументаРазницаУменьшение", ЗаписьЖурналаУчетаСчетовФактур.СуммаДокументаРазницаУменьшение);
		СоставСтроки.Вставить("СуммаДокументаРазницаУвеличение", ЗаписьЖурналаУчетаСчетовФактур.СуммаДокументаРазницаУвеличение);
		СоставСтроки.Вставить("СуммаНДСРазницаУменьшение", ЗаписьЖурналаУчетаСчетовФактур.СуммаНДСРазницаУменьшение);
		СоставСтроки.Вставить("СуммаНДСРазницаУвеличение", ЗаписьЖурналаУчетаСчетовФактур.СуммаНДСРазницаУвеличение);
		
	Иначе
		
		СоставСтроки.Вставить("СуммаДокумента", ЗаписьЖурналаУчетаСчетовФактур.СуммаДокумента);
		СоставСтроки.Вставить("СуммаНДС", ЗаписьЖурналаУчетаСчетовФактур.СуммаНДС);
		
		СоставСтроки.Вставить("НомерКорректировочногоСчетаФактуры", ТекстПустаяСтрока);
		СоставСтроки.Вставить("ДатаКорректировочногоСчетаФактуры", ТекстПустаяСтрока);
		
		СоставСтроки.Вставить("СуммаДокументаРазницаУменьшение", ТекстПустаяСтрока);
		СоставСтроки.Вставить("СуммаДокументаРазницаУвеличение", ТекстПустаяСтрока);
		СоставСтроки.Вставить("СуммаНДСРазницаУменьшение", ТекстПустаяСтрока);
		СоставСтроки.Вставить("СуммаНДСРазницаУвеличение", ТекстПустаяСтрока);
		
	КонецЕсли;
	
	Если ЗаписьЖурналаУчетаСчетовФактур.Контрагент = ЗаписьЖурналаУчетаСчетовФактур.Организация Тогда
		СоставСтроки.Вставить("КонтрагентНаименование", СтруктураПараметров.НаименованиеОрганизацииДляПечатныхФорм);
	КонецЕсли;
	
	Если ЗаписьЖурналаУчетаСчетовФактур.СчетФактураБезНДС Тогда
		
		Если ЗаписьЖурналаУчетаСчетовФактур.КорректировочныйСчетФактура Тогда
			СоставСтроки.Вставить("СуммаНДСРазницаУменьшение", ТекстБезНДС);
			СоставСтроки.Вставить("СуммаНДСРазницаУвеличение", ТекстБезНДС);
		Иначе
			СоставСтроки.Вставить("СуммаНДС", ТекстБезНДС);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, СоставСтроки);
	
	Если СтруктураПараметров.ЗаполнениеДекларации Тогда
		
		Если ЗаписьЖурналаУчетаСчетовФактур.ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры Тогда
			
			// Раздел 10
			
			// Массив структур со сведениями о посреднической деятельности
			СтруктураСвПосрДеят = Новый Структура(
				"НомСчФОтПрод,ДатаСчФОтПрод,ОКВ,СтоимТовСчФВс,СумНДССчФ,РазСтКСчФУм,РазСтКСчФУв,РазНДСКСчФУм,РазНДСКСчФУв,СвПрод");
				
			СтруктураСвПосрДеят.НомСчФОтПрод  = СокрЛП(ЗаписьЖурналаУчетаСчетовФактур.НомерСчетаФактурыКомитента);
			СтруктураСвПосрДеят.ДатаСчФОтПрод = Формат(ЗаписьЖурналаУчетаСчетовФактур.ДатаСчетаФактурыКомитента, "ДФ=dd.MM.yyyy");
			СтруктураСвПосрДеят.ОКВ           = ЗаписьЖурналаУчетаСчетовФактур.КодВалюты;
			
			СтруктураСвПосрДеят.СтоимТовСчФВс =
				ПреобразоватьСтрокуВФорматДекларации(СоставСтроки.СуммаДокумента, ТекстБезНДС, ТекстПустаяСтрока);
			СтруктураСвПосрДеят.СумНДССчФ =
				ПреобразоватьСтрокуВФорматДекларации(СоставСтроки.СуммаНДС, ТекстБезНДС, ТекстПустаяСтрока);
			СтруктураСвПосрДеят.РазСтКСчФУм =
				ПреобразоватьСтрокуВФорматДекларации(СоставСтроки.СуммаДокументаРазницаУменьшение, ТекстБезНДС, ТекстПустаяСтрока);
			СтруктураСвПосрДеят.РазСтКСчФУв =
				ПреобразоватьСтрокуВФорматДекларации(СоставСтроки.СуммаДокументаРазницаУвеличение, ТекстБезНДС, ТекстПустаяСтрока);
			СтруктураСвПосрДеят.РазНДСКСчФУм =
				ПреобразоватьСтрокуВФорматДекларации(СоставСтроки.СуммаНДСРазницаУменьшение, ТекстБезНДС, ТекстПустаяСтрока);
			СтруктураСвПосрДеят.РазНДСКСчФУв =
				ПреобразоватьСтрокуВФорматДекларации(СоставСтроки.СуммаНДСРазницаУвеличение, ТекстБезНДС, ТекстПустаяСтрока);
			
			Если НЕ ПустаяСтрока(ЗаписьЖурналаУчетаСчетовФактур.КомитентИНН) Тогда
				СтруктураСвПосрДеят.СвПрод = ПолучитьСтруктуруРеквизитовКонтрагента(
					ЗаписьЖурналаУчетаСчетовФактур.КомитентИНН, ЗаписьЖурналаУчетаСчетовФактур.КомитентКПП);
			КонецЕсли;
			
			СтруктураОтбора = Новый Структура("НомерПор", НомерПП);
			// Осуществляем поиск по таблице, в случе если записи нет - добавляем новую строку,
			// иначе добавляем сведения о комитенте в колонку "СвПосрДеят"
			СтрокиРаздела10 = СтруктураПараметров.ТаблицаРаздел10.НайтиСтроки(СтруктураОтбора);
			
			Если СтрокиРаздела10.Количество() = 0 Тогда
				
				СтрокаРаздела = СтруктураПараметров.ТаблицаРаздел10.Добавить();
				
				СоставСтроки.Вставить("НомерПор", НомерПП);
				СоставСтроки.Вставить("ДатаВыст", Формат(ЗаписьЖурналаУчетаСчетовФактур.ДатаПередачиПолучения, "ДФ=dd.MM.yyyy"));
				
				СоставСтроки.Вставить("НомСчФПрод", ЗаписьЖурналаУчетаСчетовФактур.НомерСчетаФактуры);
				СоставСтроки.Вставить("ДатаСчФПрод", Формат(ЗаписьЖурналаУчетаСчетовФактур.ДатаСчетаФактуры, "ДФ=dd.MM.yyyy"));
				
				СоставСтроки.Вставить("НомИспрСчФ", ЗаписьЖурналаУчетаСчетовФактур.НомерИсправления);
				СоставСтроки.Вставить("ДатаИспрСчФ", Формат(ЗаписьЖурналаУчетаСчетовФактур.ДатаИсправления, "ДФ=dd.MM.yyyy"));
				
				СоставСтроки.Вставить("НомКСчФПрод", ЗаписьЖурналаУчетаСчетовФактур.НомерКорректировочногоСчетаФактуры);
				СоставСтроки.Вставить("ДатаКСчФПрод", Формат(ЗаписьЖурналаУчетаСчетовФактур.ДатаКорректировочногоСчетаФактуры, "ДФ=dd.MM.yyyy"));
				
				СоставСтроки.Вставить("НомИспрКСчФ", ЗаписьЖурналаУчетаСчетовФактур.НомерИсправленияКорректировочногоСчетаФактуры);
				СоставСтроки.Вставить("ДатаИспрКСчФ", Формат(ЗаписьЖурналаУчетаСчетовФактур.ДатаИсправленияКорректировочногоСчетаФактуры, "ДФ=dd.MM.yyyy"));
				
				МассивКодовОпераций = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ЗаписьЖурналаУчетаСчетовФактур.КодВидаОперации, ";");
				СоставСтроки.Вставить("КодВидОпер", МассивКодовОпераций);
				
				Если НЕ ПустаяСтрока(ЗаписьЖурналаУчетаСчетовФактур.КонтрагентИНН) Тогда
					СоставСтроки.Вставить("СвПокуп", 
						ПолучитьСтруктуруРеквизитовКонтрагента(ЗаписьЖурналаУчетаСчетовФактур.КонтрагентИНН, ЗаписьЖурналаУчетаСчетовФактур.КонтрагентКПП));
				КонецЕсли;
				
				МассивСвПосрДеят = Новый Массив();
				МассивСвПосрДеят.Добавить(СтруктураСвПосрДеят);
				СоставСтроки.Вставить("СвПосрДеят", МассивСвПосрДеят);
				
				ЗаполнитьЗначенияСвойств(СтрокаРаздела, СоставСтроки);
				
			Иначе
				
				СтрокаРаздела = СтрокиРаздела10[0];
				МассивСвПосрДеят = СтрокаРаздела.СвПосрДеят;
				МассивСвПосрДеят.Добавить(СтруктураСвПосрДеят);
				
			КонецЕсли;
			
		Иначе
			
			// Раздел 11
			
			СоставСтроки.Вставить("НомерПор", НомерПП);
			СоставСтроки.Вставить("ДатаПолуч", Формат(ЗаписьЖурналаУчетаСчетовФактур.ДатаПередачиПолучения, "ДФ=dd.MM.yyyy"));
			
			СоставСтроки.Вставить("НомСчФПрод", ЗаписьЖурналаУчетаСчетовФактур.НомерСчетаФактуры);
			СоставСтроки.Вставить("ДатаСчФПрод", Формат(ЗаписьЖурналаУчетаСчетовФактур.ДатаСчетаФактуры, "ДФ=dd.MM.yyyy"));
			
			СоставСтроки.Вставить("НомИспрСчФ", ЗаписьЖурналаУчетаСчетовФактур.НомерИсправления);
			СоставСтроки.Вставить("ДатаИспрСчФ", Формат(ЗаписьЖурналаУчетаСчетовФактур.ДатаИсправления, "ДФ=dd.MM.yyyy"));
			
			СоставСтроки.Вставить("НомКСчФПрод", ЗаписьЖурналаУчетаСчетовФактур.НомерКорректировочногоСчетаФактуры);
			СоставСтроки.Вставить("ДатаКСчФПрод", Формат(ЗаписьЖурналаУчетаСчетовФактур.ДатаКорректировочногоСчетаФактуры, "ДФ=dd.MM.yyyy"));
			
			СоставСтроки.Вставить("НомИспрКСчФ", ЗаписьЖурналаУчетаСчетовФактур.НомерИсправленияКорректировочногоСчетаФактуры);
			СоставСтроки.Вставить("ДатаИспрКСчФ", Формат(ЗаписьЖурналаУчетаСчетовФактур.ДатаИсправленияКорректировочногоСчетаФактуры, "ДФ=dd.MM.yyyy"));
			
			МассивКодовОпераций = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ЗаписьЖурналаУчетаСчетовФактур.КодВидаОперации, ";");
			СоставСтроки.Вставить("КодВидОпер", МассивКодовОпераций);
			СоставСтроки.Вставить("КодВидСд", ЗаписьЖурналаУчетаСчетовФактур.КодВидаСделки);
			СоставСтроки.Вставить("ОКВ", ЗаписьЖурналаУчетаСчетовФактур.КодВалюты);
			
			СоставСтроки.Вставить("СтоимТовСчФВс",
				ПреобразоватьСтрокуВФорматДекларации(СоставСтроки.СуммаДокумента, ТекстБезНДС, ТекстПустаяСтрока));
			СоставСтроки.Вставить("СумНДССчФ",
				ПреобразоватьСтрокуВФорматДекларации(СоставСтроки.СуммаНДС, ТекстБезНДС, ТекстПустаяСтрока));
			СоставСтроки.Вставить("РазСтКСчФУм",
				ПреобразоватьСтрокуВФорматДекларации(СоставСтроки.СуммаДокументаРазницаУменьшение, ТекстБезНДС, ТекстПустаяСтрока));
			СоставСтроки.Вставить("РазСтКСчФУв",
				ПреобразоватьСтрокуВФорматДекларации(СоставСтроки.СуммаДокументаРазницаУвеличение, ТекстБезНДС, ТекстПустаяСтрока));
			СоставСтроки.Вставить("РазНДСКСчФУм",
				ПреобразоватьСтрокуВФорматДекларации(СоставСтроки.СуммаНДСРазницаУменьшение, ТекстБезНДС, ТекстПустаяСтрока));
			СоставСтроки.Вставить("РазНДСКСчФУв",
				ПреобразоватьСтрокуВФорматДекларации(СоставСтроки.СуммаНДСРазницаУвеличение, ТекстБезНДС, ТекстПустаяСтрока));
			
			Если НЕ ПустаяСтрока(ЗаписьЖурналаУчетаСчетовФактур.КонтрагентИНН) Тогда
				СоставСтроки.Вставить("СвПрод", 
					ПолучитьСтруктуруРеквизитовКонтрагента(ЗаписьЖурналаУчетаСчетовФактур.КонтрагентИНН, ЗаписьЖурналаУчетаСчетовФактур.КонтрагентКПП));
			КонецЕсли;
				
			СтрокаРаздела = СтруктураПараметров.ТаблицаРаздел11.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРаздела, СоставСтроки);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Вспомогательные процедуры

Функция ОпределитьДатуИНомерСФ(ЗаписьКниги)
	
	ВариантыПредставленияСФ = УчетНДСПереопределяемый.ОпределитьДатуИНомерСчетаФактурыДляПечати(
		ЗаписьКниги.СчетФактура,
		ЗаписьКниги.НомерСчетаФактуры,
		ЗаписьКниги.ДатаСчетаФактуры,
		ЗаписьКниги.ОбрабатыватьНомерДокумента,
		ЗаписьКниги.СчетФактураДокумент);
	
	Возврат ВариантыПредставленияСФ;
		
КонецФункции

Функция ОпределитьНомерИДатуКорректировочногоСФ(ЗаписьКниги)
	
	ВариантыПредставленияКоррСчетаФактуры = Новый Структура("НомерДата,Дата,Номер", "", "", "");
	
	Если ЗначениеЗаполнено(ЗаписьКниги.НомерКорректировки) И ЗначениеЗаполнено(ЗаписьКниги.ДатаКорректировки) Тогда
		ВариантыПредставленияКоррСчетаФактуры.Номер = ЗаписьКниги.НомерКорректировки;
		ВариантыПредставленияКоррСчетаФактуры.Дата = Формат(ЗаписьКниги.ДатаКорректировки, "ДФ=dd.MM.yyyy");
		ВариантыПредставленияКоррСчетаФактуры.НомерДата = "" + ЗаписьКниги.НомерКорректировки 
			+ ";" + Формат(ЗаписьКниги.ДатаКорректировки, "ДФ=dd.MM.yyyy");
	КонецЕсли;
	
	Возврат ВариантыПредставленияКоррСчетаФактуры;
	
КонецФункции

Функция ОпределитьНомерИДатуИсправленногоСФ(ЗаписьКниги)

	ВариантыПредставленияИсправленногоСчетаФактуры = Новый Структура("НомерДата,Дата,Номер", "", "", "");
	
	Если ЗначениеЗаполнено(ЗаписьКниги.НомерИсправления) И ЗначениеЗаполнено(ЗаписьКниги.ДатаИсправления) Тогда
		ВариантыПредставленияИсправленногоСчетаФактуры.Номер = СокрЛП(ЗаписьКниги.НомерИсправления);
		ВариантыПредставленияИсправленногоСчетаФактуры.Дата = Формат(ЗаписьКниги.ДатаИсправления, "ДФ=dd.MM.yyyy");
		ВариантыПредставленияИсправленногоСчетаФактуры.НомерДата = "" + СокрЛП(ЗаписьКниги.НомерИсправления) 
			+ ";" + Формат(ЗаписьКниги.ДатаИсправления, "ДФ=dd.MM.yyyy");
	КонецЕсли;
	
	Возврат ВариантыПредставленияИсправленногоСчетаФактуры;
	
КонецФункции

Функция ОпределитьНомерИДатуИсправленияКорректировочногоСФ(ЗаписьКниги)
	
	ВариантыПредставленияИсправленногоКоррСчетаФактуры = Новый Структура("НомерДата,Дата,Номер", "", "", "");
	
	Если ЗначениеЗаполнено(ЗаписьКниги.НомерИсправленияКорректировки) И ЗначениеЗаполнено(ЗаписьКниги.ДатаИсправленияКорректировки) Тогда
		ВариантыПредставленияИсправленногоКоррСчетаФактуры.Номер = ЗаписьКниги.НомерИсправленияКорректировки;
		ВариантыПредставленияИсправленногоКоррСчетаФактуры.Дата = Формат(ЗаписьКниги.ДатаИсправленияКорректировки, "ДФ=dd.MM.yyyy");
		ВариантыПредставленияИсправленногоКоррСчетаФактуры.НомерДата = "" + ЗаписьКниги.НомерИсправленияКорректировки
			+ ";" + Формат(ЗаписьКниги.ДатаИсправленияКорректировки, "ДФ=dd.MM.yyyy");
	КонецЕсли;
	
	Возврат ВариантыПредставленияИсправленногоКоррСчетаФактуры;
	
КонецФункции

Функция ПолучитьСтруктуруРеквизитовКонтрагента(ИНН, КПП)
	
	СтруктураРеквизитовКонтрагента = Новый Структура();
	
	Если СтрДлина(ИНН) > 10 Тогда
		СтруктураРеквизитовКонтрагента.Вставить("ИННФЛ", ИНН);
	Иначе
		СтруктураРеквизитовКонтрагента.Вставить("ИННЮЛ", ИНН);
		СтруктураРеквизитовКонтрагента.Вставить("КПП", КПП);
	КонецЕсли;
	
	Возврат СтруктураРеквизитовКонтрагента;

КонецФункции

Функция ПреобразоватьСтрокуВФорматДекларации(ИсходныйПоказатель, ТекстБезНДС, ТекстПустаяСтрока)
	
	Если Строка(ИсходныйПоказатель) = ТекстБезНДС
		ИЛИ Строка(ИсходныйПоказатель) = ТекстПустаяСтрока Тогда
		Возврат 0;
	Иначе
		Возврат ИсходныйПоказатель;
	КонецЕсли;
	
КонецФункции

// Получает пакет электронных представлений документов.
//
// Параметры
//  ВыгружаемыеДокументы - Массив - перечень документов для которых
//                 необходимо получить электронные представления в виде двоичных данных.
//  УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор по которому
//                 осуществляется привязка двоичных данных во временном хранилище.
//
// Возвращаемое значение:
//   Соответствие - сответствие переданных ссылок на документы и массива структур с полями:
//                 ТипФайла - Строка - описание типа файла;
//                 ИмяФайла - Строка - имя файла с расширением;
//                 АдресВременногоХранилища - Строка - адрес временного хранилища, в котором размещены двоичные данные файла.
//
Функция ПолучитьЭлектронныеДокументы(ВыгружаемыеДокументы, УникальныйИдентификатор = Неопределено) Экспорт
	
	Возврат УчетНДСПереопределяемый.СформироватьЭлектронныеДокументы(ВыгружаемыеДокументы, УникальныйИдентификатор);
	
КонецФункции

// Возвращает порядок корректировки НДС (Федеральный Закон N 39)
//
// Параметры
// 	Дата  	- 	тип дата, в данном параметре передается
//            	дата на которую необходимо определить порядок корректировки НДС
// Возвращаемое значение:
//  Число   - 	порядок корректировки, 
//				1 - корректировка НДС выполняется по периоду отгрузки 
//              2 - корректировка НДС выполняется по периоду соглашения об изменении условий договора
//
Функция ПолучитьПорядокКорректировкиНДС(Дата) Экспорт 

	НачалоПримененияПравила = '20130701';
	
	Если Дата < НачалоПримененияПравила Тогда
		Возврат 1;
	Иначе
		Возврат 2;
	КонецЕсли;

КонецФункции // ПолучитьПорядокКорректировкиНДС()

Процедура ОбновитьРеквизитыСвязанныхСчетовФактур(ДокументОбъект, ТипСчетаФактуры, Отказ) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипСчетаФактуры = "СчетФактураВыданный" Тогда
		
		РеквизитыСсылки = Новый Структура;
		РеквизитыСсылки.Вставить("Номер", 	ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Ссылка, "Номер"));
		РеквизитыСсылки.Вставить("Дата", 	НачалоДня(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Ссылка, "Дата")));
		РеквизитыСсылки.Вставить("ДокументСсылка", 	ДокументОбъект.Ссылка);
		
		РеквизитыОбъекта = Новый Структура;
		РеквизитыОбъекта.Вставить("Номер", 	ДокументОбъект.Номер);
		РеквизитыОбъекта.Вставить("Дата", 	НачалоДня(ДокументОбъект.Дата));
		РеквизитыОбъекта.Вставить("ВидСчетаФактуры", 	ДокументОбъект.ВидСчетаФактуры);
		
		Если РеквизитыСсылки.Номер <> РеквизитыОбъекта.Номер 
			ИЛИ	РеквизитыСсылки.Дата <> РеквизитыОбъекта.Дата Тогда 
						
			ОбновитьРеквизитыВыданныхСчетовФактур(РеквизитыСсылки, РеквизитыОбъекта, Отказ);
					
		КонецЕсли;
		
	ИначеЕсли ТипСчетаФактуры = "СчетФактураПолученный" Тогда 
			
		РеквизитыСсылки = Новый Структура;
		РеквизитыСсылки.Вставить("НомерВходящегоДокумента", 	ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Ссылка, "НомерВходящегоДокумента"));
		РеквизитыСсылки.Вставить("ДатаВходящегоДокумента", 	НачалоДня(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Ссылка, "ДатаВходящегоДокумента")));
		РеквизитыСсылки.Вставить("ДокументСсылка", 	ДокументОбъект.Ссылка);
		
		РеквизитыОбъекта = Новый Структура;
		РеквизитыОбъекта.Вставить("НомерВходящегоДокумента", 	ДокументОбъект.НомерВходящегоДокумента);
		РеквизитыОбъекта.Вставить("ДатаВходящегоДокумента", 	НачалоДня(ДокументОбъект.ДатаВходящегоДокумента));
		РеквизитыОбъекта.Вставить("ВидСчетаФактуры", 	ДокументОбъект.ВидСчетаФактуры);
		
		Если РеквизитыСсылки.НомерВходящегоДокумента <> РеквизитыОбъекта.НомерВходящегоДокумента 
			ИЛИ	РеквизитыСсылки.ДатаВходящегоДокумента <> РеквизитыОбъекта.ДатаВходящегоДокумента Тогда
			
			ОбновитьРеквизитыПолученныхСчетовФактур(РеквизитыСсылки, РеквизитыОбъекта, Отказ);
			
		КонецЕсли;
		
	КонецЕсли;


КонецПроцедуры

Процедура ОбновитьРеквизитыВыданныхСчетовФактур (РеквизитыСсылки, РеквизитыОбъекта, Отказ)
	
	Если РеквизитыОбъекта.ВидСчетаФактуры 		= Перечисления.ВидСчетаФактурыВыставленного.НаАванс 
		ИЛИ РеквизитыОбъекта.ВидСчетаФактуры 	= Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента
		ИЛИ РеквизитыОбъекта.ВидСчетаФактуры	= Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент
		ИЛИ РеквизитыОбъекта.ВидСчетаФактуры	= Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу Тогда
		
		ТаблицаСчетовФактур = ПолучитьСвязанныеСчетаФактурыВыданные(РеквизитыСсылки.ДокументСсылка);
		
		Если ТаблицаСчетовФактур <> Неопределено Тогда 
			
			ВыборкаСчетовФактур = ТаблицаСчетовФактур.Выбрать();
			
			Пока ВыборкаСчетовФактур.Следующий() Цикл
				
				СчетФактураОбъект = ВыборкаСчетовФактур.Счетфактура.ПолучитьОбъект();	
				
				СчетФактураОбъект.НомерИсходногоДокумента 		= ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(
				РеквизитыОбъекта.Номер, Истина, Ложь);
				СчетФактураОбъект.ДатаИсходногоДокумента 		= РеквизитыОбъекта.Дата;
				СчетФактураОбъект.ДополнительныеСвойства.Вставить("ОбновлятьРеквизитыПриЗаписи", Ложь);
				
				Попытка
					СчетФактураОбъект.Записать(?(СчетФактураОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
				Исключение
					ОписаниеОшибки = ИнформацияОбОшибке();
					ЗаписьЖурналаРегистрации(НСТр("ru = 'Операция не выполнена'"), УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки.Описание);
					Отказ = Истина;
				КонецПопытки;
				
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли РеквизитыОбъекта.ВидСчетаФактуры 	= Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию 
		ИЛИ РеквизитыОбъекта.ВидСчетаФактуры 	= Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
		
		ТаблицаСчетовФактур = ПолучитьСвязанныеСчетаФактурыВыданные(РеквизитыСсылки.ДокументСсылка, Ложь);
		
		Если ТаблицаСчетовФактур <> Неопределено Тогда 
			
			СчетаФактуры = ТаблицаСчетовФактур.Выгрузить();
			
			Для Каждого ВыборкаСчетовФактур Из СчетаФактуры Цикл
				
				СчетФактураОбъект = ВыборкаСчетовФактур.Счетфактура.ПолучитьОбъект();	
				
				СчетФактураОбъект.ДополнительныеСвойства.Вставить("ОбновлятьРеквизитыПриЗаписи", Ложь);
				
				Если ВыборкаСчетовФактур.Корректировочный Тогда
					
					Если ВыборкаСчетовФактур.Счетфактура.Исправление тогда
						Если СчетФактураОбъект.ИсправляемыйСчетФактура = РеквизитыСсылки.ДокументСсылка Тогда
							СчетФактураОбъект.НомерИсправляемогоКорректировочногоДокумента 	= ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(РеквизитыОбъекта.Номер, Истина, Ложь);
							СчетФактураОбъект.ДатаИсправляемогоКорректировочногоДокумента	= РеквизитыОбъекта.Дата
						Иначе
							СчетФактураОбъект.НомерИсправляемогоКорректировочногоДокумента 	= ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(СчетФактураОбъект.ИсправляемыйСчетФактура.Номер, Истина, Ложь);
							СчетФактураОбъект.ДатаИсправляемогоКорректировочногоДокумента	= СчетФактураОбъект.ИсправляемыйСчетФактура.Дата;	
						КонецЕсли;
					КонецЕсли;	
					
				Иначе
					
					СчетФактураОбъект.НомерИсходногоДокумента 		= ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(
					РеквизитыОбъекта.Номер, Истина, Ложь);
					СчетФактураОбъект.ДатаИсходногоДокумента 		= РеквизитыОбъекта.Дата;
					
				КонецЕсли;
				
				Попытка
					СчетФактураОбъект.Записать(?(СчетФактураОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
				Исключение
					ОписаниеОшибки = ИнформацияОбОшибке();
					ЗаписьЖурналаРегистрации(НСТр("ru = 'Операция не выполнена'"), УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки.Описание);
					Отказ = Истина;
				КонецПопытки;
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьРеквизитыПолученныхСчетовФактур (РеквизитыСсылки, РеквизитыОбъекта, Отказ)
	
	Если РеквизитыОбъекта.ВидСчетаФактуры 		= Перечисления.ВидСчетаФактурыПолученного.НаАванс 
		ИЛИ РеквизитыОбъекта.ВидСчетаФактуры 	= Перечисления.ВидСчетаФактурыПолученного.НаАвансКомитента Тогда
		
		ТаблицаСчетовФактур = ПолучитьСвязанныеСчетаФактурыПолученные(РеквизитыСсылки.ДокументСсылка);
		
		Если ТаблицаСчетовФактур <> Неопределено Тогда 
			
			ВыборкаСчетовФактур = ТаблицаСчетовФактур.Выбрать();
			
			Пока ВыборкаСчетовФактур.Следующий() Цикл
				
				СчетФактураОбъект = ВыборкаСчетовФактур.Счетфактура.ПолучитьОбъект();	
				
				СчетФактураОбъект.НомерВходящегоДокумента 		= РеквизитыОбъекта.НомерВходящегоДокумента;
				СчетФактураОбъект.ДатаВходящегоДокумента		= РеквизитыОбъекта.ДатаВходящегоДокумента;
				СчетФактураОбъект.ДополнительныеСвойства.Вставить("ОбновлятьРеквизитыПриЗаписи", Ложь);
				
				Попытка
					СчетФактураОбъект.Записать(?(СчетФактураОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
				Исключение
					ОписаниеОшибки = ИнформацияОбОшибке();
					ЗаписьЖурналаРегистрации(НСТр("ru = 'Операция не выполнена'"), УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки.Описание);
					Отказ = Истина;
				КонецПопытки;
				
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли РеквизитыОбъекта.ВидСчетаФактуры 	= Перечисления.ВидСчетаФактурыПолученного.НаПоступление 
		ИЛИ РеквизитыОбъекта.ВидСчетаФактуры 	= Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
		
		ТаблицаСчетовФактур = ПолучитьСвязанныеСчетаФактурыПолученные(РеквизитыСсылки.ДокументСсылка, Ложь);
		
		Если ТаблицаСчетовФактур <> Неопределено Тогда 
			
			СчетаФактуры = ТаблицаСчетовФактур.Выгрузить();
			
			Для Каждого ВыборкаСчетовФактур Из СчетаФактуры Цикл
				
				СчетФактураОбъект = ВыборкаСчетовФактур.Счетфактура.ПолучитьОбъект();	
				
				СчетФактураОбъект.ДополнительныеСвойства.Вставить("ОбновлятьРеквизитыПриЗаписи", Ложь);
				
				Если ВыборкаСчетовФактур.Корректировочный Тогда
					
					Если ВыборкаСчетовФактур.Счетфактура.Исправление тогда
						Если СчетФактураОбъект.ИсправляемыйСчетФактура = РеквизитыСсылки.ДокументСсылка Тогда
							СчетФактураОбъект.НомерВходящегоДокумента 	= РеквизитыОбъекта.НомерВходящегоДокумента;
							СчетФактураОбъект.ДатаВходящегоДокумента	= РеквизитыОбъекта.ДатаВходящегоДокумента;
						Иначе
							СчетФактураОбъект.НомерВходящегоДокумента 	= СчетФактураОбъект.ИсправляемыйСчетФактура.НомерВходящегоДокумента;
							СчетФактураОбъект.ДатаВходящегоДокумента	= СчетФактураОбъект.ИсправляемыйСчетФактура.ДатаВходящегоДокумента;	
						КонецЕсли;
					КонецЕсли;	
					
				Иначе
					
					СчетФактураОбъект.НомерВходящегоДокумента 		= РеквизитыОбъекта.НомерВходящегоДокумента;
					СчетФактураОбъект.ДатаВходящегоДокумента		= РеквизитыОбъекта.ДатаВходящегоДокумента;
					
				КонецЕсли;
				
				Попытка
					СчетФактураОбъект.Записать(?(СчетФактураОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
				Исключение
					ОписаниеОшибки = ИнформацияОбОшибке();
					ЗаписьЖурналаРегистрации(НСТр("ru = 'Операция не выполнена'"), УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки.Описание);
					Отказ = Истина;
				КонецПопытки;
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает признак применения Федерального Закона 134-ФЗ
//
// Параметры
// 	Дата  	- 	тип дата, в данном параметре передается
//            	дата на которую необходимо определить признак применения 134-ФЗ
// Возвращаемое значение:
//  Булево - 	признак применения
//				Истина 	- ФЗ-134 применяется
//				Ложь 	- ФЗ-134 не применяется
//
Функция ВедетсяУчетНДСПоФЗ134(Дата) Экспорт

	НачалоПримененияФЗ134 = '20140101';
	
	Если Дата < НачалоПримененияФЗ134 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции // ВедетсяУчетНДСПоФЗ134()

Функция ВедетсяУчетНДСПоФЗ81(Дата) Экспорт

	НачалоПримененияФЗ81 = '20140701';
	
	Если Дата < НачалоПримененияФЗ81 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции // ВедетсяУчетНДСПоФЗ81()

// Возвращает порядок округления НДС (Федеральный Закон N 248-ФЗ)
//
// Параметры
// 	Дата  	- 	тип дата, в данном параметре передается
//            	дата на которую необходимо определить порядок округления НДС
// Возвращаемое значение:
//  Булево - 	признак применения
//				1 	- сумма НДС исчисляется с копейками
//				2 	- сумма НДС исчисляется в полных рублях
//
Функция ПолучитьПорядокОкругленияНДС(Дата) Экспорт

	НачалоПримененияОкругления = '20140101';
	
	Если Дата < НачалоПримененияОкругления Тогда
		Возврат 1;
	Иначе
		Возврат 2;
	КонецЕсли;

КонецФункции // ПолучитьПорядокОкругленияНДС()

Процедура ПодготовитьТаблицуДляНачисленияНДСНеплательщиком(ТаблицаНачисленияНДС)

	СтрокиКУдалению = Новый Массив;
	
	Для каждого СтрокаТаблицы Из ТаблицаНачисленияНДС Цикл
		
		Если СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС
			ИЛИ СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
			
			СтрокиКУдалению.Добавить(СтрокаТаблицы);
			
		КонецЕсли; 
		
	КонецЦикла;
	
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаНачисленияНДС.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОпределитьНедействующихКонтрагентовВКнигахФоновоеЗадание(Параметры, АдресХранилища) Экспорт
	
	ДанныеДляПроверкиКонтрагентов = Параметры.ДанныеДляПроверкиКонтрагентов;
	
	ИндексОсновногоРаздела 		= ДанныеДляПроверкиКонтрагентов.ИндексОсновногоРаздела;
	СписокСформированныхЛистов 	= ДанныеДляПроверкиКонтрагентов.СписокСформированныхЛистов;
	ОсновнойРаздел 				= СписокСформированныхЛистов.Получить(ИндексОсновногоРаздела).Значение;
	
	Если ПроверкаКонтрагентов.ЕстьДоступКВебСервисуФНС() Тогда
		
		// Проверяем контрагентов на корректность 
		ПроверяемыеКонтрагенты = ДанныеДляПроверкиКонтрагентов.НедействующиеКонтрагенты;
		ПроверкаКонтрагентов.ОпределитьНедействующихКонтрагентов(ПроверяемыеКонтрагенты);
		
		Если ПроверяемыеКонтрагенты.Количество() > 0 Тогда
			
			ВыделитьКонтрагентовСОшибками(ПроверяемыеКонтрагенты, ОсновнойРаздел);
			
			ДанныеДляПроверкиКонтрагентов.НедействующиеКонтрагенты = ПроверяемыеКонтрагенты;
				
			// Формируем книгу покупок, в которой оставляем только некорректных контрагентов
			ВременныйАдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
			Если ДанныеДляПроверкиКонтрагентов.Свойство("ЭтоКнигаПокупок") Тогда
				Отчеты.КнигаПокупок.СформироватьОтчет(Параметры, ВременныйАдресХранилища);
			Иначе
				Отчеты.КнигаПродаж.СформироватьОтчет(Параметры, ВременныйАдресХранилища);
			КонецЕсли;
			РезультатФормированияОтчета = ПолучитьИзВременногоХранилища(ВременныйАдресХранилища);
			
			КонтрагентыСОшибками = РезультатФормированияОтчета.СписокСформированныхЛистов.Получить(ИндексОсновногоРаздела).Значение;
			
			// Книгу с некоректными контрагентами не формируем, если нет некорректных контрагентов
			Результат = Новый Структура;
			Результат.Вставить("НедействующиеКонтрагенты", 	ПроверяемыеКонтрагенты);
			Результат.Вставить("КонтрагентыСОшибками", 		КонтрагентыСОшибками);
			Результат.Вставить("ОсновнойРаздел", 			ОсновнойРаздел);

		Иначе
			
			Результат = Новый Структура;
			Результат.Вставить("НедействующиеКонтрагенты", 	ПроверяемыеКонтрагенты);
			Результат.Вставить("КонтрагентыСОшибками", 		Новый ТабличныйДокумент);
			Результат.Вставить("ОсновнойРаздел", 			ОсновнойРаздел);
			
		Конецесли;
	Иначе
		Результат = Новый Структура;
		Результат.Вставить("НетДоступаКВебСервисуФНС", Истина);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Процедура ОпределитьНедействующихКонтрагентовВЖурналеУчетаСчетовФактурФоновоеЗадание(Параметры, АдресХранилища) Экспорт
	
	ДанныеДляПроверкиКонтрагентов 	= Параметры.ДанныеДляПроверкиКонтрагентов;
	ЖурналУчетаСчетовФактур 		= ДанныеДляПроверкиКонтрагентов.ЖурналУчетаСчетовФактур;
	
	Если ПроверкаКонтрагентов.ЕстьДоступКВебСервисуФНС() Тогда
		
		// Проверяем контрагентов на корректность 
		ПроверяемыеКонтрагенты = ДанныеДляПроверкиКонтрагентов.НедействующиеКонтрагенты;
		ПроверкаКонтрагентов.ОпределитьНедействующихКонтрагентов(ПроверяемыеКонтрагенты);
		
		Если ПроверяемыеКонтрагенты.Количество() > 0 Тогда
			
			ВыделитьКонтрагентовСОшибками(ПроверяемыеКонтрагенты, ЖурналУчетаСчетовФактур, 2);
			ДанныеДляПроверкиКонтрагентов.НедействующиеКонтрагенты = ПроверяемыеКонтрагенты;

			ВременныйАдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
			Отчеты.ЖурналУчетаСчетовФактур.СформироватьОтчет(Параметры, ВременныйАдресХранилища);
			
			РезультатФормированияОтчета = ПолучитьИзВременногоХранилища(ВременныйАдресХранилища);
			КонтрагентыСОшибками = РезультатФормированияОтчета.СформированныйЖурнал;
			
			// Книгу с некоректными контрагентами не формируем, если нет некорректных контрагентов
			Результат = Новый Структура;
			Результат.Вставить("НедействующиеКонтрагенты", 	ПроверяемыеКонтрагенты);
			Результат.Вставить("КонтрагентыСОшибками", 		КонтрагентыСОшибками);
			Результат.Вставить("ЖурналУчетаСчетовФактур", 	ЖурналУчетаСчетовФактур);

		Иначе
			
			Результат = Новый Структура;
			Результат.Вставить("НедействующиеКонтрагенты", 	ПроверяемыеКонтрагенты);
			Результат.Вставить("КонтрагентыСОшибками", 		Новый ТабличныйДокумент);
			Результат.Вставить("ЖурналУчетаСчетовФактур", 	ЖурналУчетаСчетовФактур);
			
		Конецесли;
	Иначе
		Результат = Новый Структура;
		Результат.Вставить("НетДоступаКВебСервисуФНС", Истина);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Процедура ВыделитьКонтрагентовСОшибками(НедействующиеКонтрагенты, ТабличныйДокумент, НомерПервойКолонки = 1)
	
	// Подкрашиваем контрагентов с ошибками
	Для каждого СтрокаСНедействующимКонтрагентом Из НедействующиеКонтрагенты Цикл
		
		Область = ТабличныйДокумент.Область(СтрокаСНедействующимКонтрагентом.СтрокаТабличногоДокумента, НомерПервойКолонки, 
			СтрокаСНедействующимКонтрагентом.СтрокаТабличногоДокумента, ТабличныйДокумент.ШиринаТаблицы);
			
		Область.ЦветФона = ЦветаСтиля.ЦветФонаНекорректногоКонтрагента;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьКонтрагентаНаПроверку(СтруктураПараметров, Строка, ОбластьТабличногоДокумента) Экспорт
	
	ДанныеДляПроверкиКонтрагентов = СтруктураПараметров.ДанныеДляПроверкиКонтрагентов;
	
	// Если проверка не включена, то не добавляем контрагентов на проверку
	Если НЕ ДанныеДляПроверкиКонтрагентов.ИспользованиеПроверкиВозможно Тогда
		Возврат;
	КонецЕсли;
	
	НедействующиеКонтрагенты = ДанныеДляПроверкиКонтрагентов.НедействующиеКонтрагенты;
	
	Контрагент 	= Строка.Контрагент;
	
	// Проверяем условия, при которых добавлять контрагентов на проверку не нужно
	Если СтруктураПараметров.Свойство("ЗаполнениеДокумента") И СтруктураПараметров.ЗаполнениеДокумента
		ИЛИ НедействующиеКонтрагенты = Неопределено
		ИЛИ НЕ ЗначениеЗаполнено(Контрагент) 
		ИЛИ ТипЗнч(Контрагент) <> Тип("СправочникСсылка.Контрагенты")
		ИЛИ ДанныеДляПроверкиКонтрагентов.ВыводитьТолькоНекорректныхКонтрагентов Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка заполненности даты события
	Если ДанныеДляПроверкиКонтрагентов.Свойство("ЭтоКнигаПокупок") 
		ИЛИ ДанныеДляПроверкиКонтрагентов.Свойство("ЭтоКнигаПродаж") Тогда
		ДатаСобытия	= Строка.ДатаСчетаФактурыСортировка;
	ИначеЕсли ДанныеДляПроверкиКонтрагентов.Свойство("ЭтоЖурналУчетаСчетовФактур") Тогда
		ДатаСобытия	= Строка.ДатаСчетаФактуры;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаСобытия) Тогда
		Возврат;
	КонецЕсли;
	
	// Если это детальные записи, то ИНН, КПП и контрагента берем из них
	// Если это итоговая запись, то ИНН, КПП и контрагента берем из их строк
	Если ТипЗнч(Строка) = Тип("СтрокаДереваЗначений") И Строка.Строки.Количество()>0  Тогда 
		ДанныеВСтроке = Строка.Строки[0];
	Иначе
		ДанныеВСтроке = Строка;
	КонецЕсли;
	
	НоваяСтрока = НедействующиеКонтрагенты.Добавить();
	НоваяСтрока.СтрокаТабличногоДокумента 	= ОбластьТабличногоДокумента.Верх;
	НоваяСтрока.Контрагент 					= Контрагент;
	НоваяСтрока.Дата 						= НачалоДня(ДатаСобытия);
	Если ДанныеДляПроверкиКонтрагентов.Свойство("ЭтоКнигаПокупок") Тогда
		НоваяСтрока.ИНН 						= ДанныеВСтроке.ПродавецИНН;
		НоваяСтрока.КПП 						= ДанныеВСтроке.ПродавецКПП;
	ИначеЕсли ДанныеДляПроверкиКонтрагентов.Свойство("ЭтоКнигаПродаж") Тогда
		НоваяСтрока.ИНН 						= ДанныеВСтроке.ПокупательИНН;
		НоваяСтрока.КПП 						= ДанныеВСтроке.ПокупательКПП;
	ИначеЕсли ДанныеДляПроверкиКонтрагентов.Свойство("ЭтоЖурналУчетаСчетовФактур") Тогда
		НоваяСтрока.ИНН 						= ДанныеВСтроке.КонтрагентИНН;
		НоваяСтрока.КПП 						= ДанныеВСтроке.КонтрагентКПП;
	КонецЕсли;
	
КонецПроцедуры

Функция ВыводитьСтроку(СтруктураПараметров, Строка, ЭтоИтог = Ложь) Экспорт
	
	Если НЕ ЭтоОтчетПоНекорректнымКонтрагентам(СтруктураПараметров) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ДанныеДляПроверкиКонтрагентов = СтруктураПараметров.ДанныеДляПроверкиКонтрагентов;
	НедействующиеКонтрагенты = ДанныеДляПроверкиКонтрагентов.НедействующиеКонтрагенты;

	// Если это детальные записи, то ИНН, КПП и контрагента берем из них
	// Если это итоговая запись, то ИНН, КПП и контрагента берем из их строк
	Если ТипЗнч(Строка) = Тип("СтрокаДереваЗначений") И Строка.Строки.Количество()>0  Тогда 
		ДанныеВСтроке = Строка.Строки[0];
	Иначе
		ДанныеВСтроке = Строка;
	КонецЕсли;
	
	ВыводитьСтроку = Ложь;
	Если ЭтоИтог Тогда
		// В строке итога нет ИНН, КПП и даты, есть только контрагент 
		ВыводитьСтроку = НедействующиеКонтрагенты.НайтиСтроки(Новый Структура("Контрагент", ДанныеВСтроке.Контрагент)).Количество() > 0;
	Иначе
		// Разные алгоритмы для разных книг, так как отличаются имена полей
		Если ДанныеДляПроверкиКонтрагентов.Свойство("ЭтоКнигаПокупок") Тогда
			ВыводитьСтроку = НедействующиеКонтрагенты.НайтиСтроки(
				Новый Структура("Контрагент, ИНН, КПП, Дата",
				ДанныеВСтроке.Контрагент, 
				ДанныеВСтроке.ПродавецИНН, 
				ДанныеВСтроке.ПродавецКПП, 
				ДанныеВСтроке.ДатаСчетаФактурыСортировка)).Количество() > 0;
		ИначеЕсли ДанныеДляПроверкиКонтрагентов.Свойство("ЭтоКнигаПродаж") Тогда
			ВыводитьСтроку = НедействующиеКонтрагенты.НайтиСтроки(
				Новый Структура("Контрагент, ИНН, КПП, Дата",
				ДанныеВСтроке.Контрагент, 
				ДанныеВСтроке.ПокупательИНН, 
				ДанныеВСтроке.ПокупательКПП, 
				ДанныеВСтроке.ДатаСчетаФактурыСортировка)).Количество() > 0;
		ИначеЕсли ДанныеДляПроверкиКонтрагентов.Свойство("ЭтоЖурналУчетаСчетовФактур") Тогда
			ВыводитьСтроку = НедействующиеКонтрагенты.НайтиСтроки(
				Новый Структура("Контрагент, ИНН, КПП, Дата",
				ДанныеВСтроке.Контрагент, 
				ДанныеВСтроке.КонтрагентИНН, 
				ДанныеВСтроке.КонтрагентКПП, 
				ДанныеВСтроке.ДатаСчетаФактуры)).Количество() > 0;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВыводитьСтроку;
	
КонецФункции

Функция ЭтоОтчетПоНекорректнымКонтрагентам(СтруктураПараметров) Экспорт
	
	Если НЕ СтруктураПараметров.Свойство("ДанныеДляПроверкиКонтрагентов") Тогда
		// Формируется книга для передачи в электронном виде или проверка контрагентов отключена
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеДляПроверкиКонтрагентов = СтруктураПараметров.ДанныеДляПроверкиКонтрагентов;
	ИспользованиеПроверкиВозможно = ДанныеДляПроверкиКонтрагентов.ИспользованиеПроверкиВозможно;
	
	Если НЕ ИспользованиеПроверкиВозможно Тогда
		// Проверка контрагентов отключена
		Возврат Ложь;
	КонецЕсли;
	
	// Есть два режима формирования книг:
	// Выводить все строки или только с некорреткными контрагентами 
	ВыводитьТолькоНекорректныхКонтрагентов	= ДанныеДляПроверкиКонтрагентов.ВыводитьТолькоНекорректныхКонтрагентов;
	
	Если НЕ ВыводитьТолькоНекорректныхКонтрагентов Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции
	
Процедура УменьшитьСуммуИтога(СтрокаИтога, СтрокаВычитаемая, СтруктураПараметров) Экспорт
	
	Если СтруктураПараметров.ДанныеДляПроверкиКонтрагентов.Свойство("ЭтоКнигаПокупок") Тогда
		Колонки = Новый Структура("ВсегоПокупок, СуммаБезНДС18, НДС18, СуммаБезНДС10, НДС10, НДС0, СуммаСовсемБезНДС");
	ИначеЕсли СтруктураПараметров.ДанныеДляПроверкиКонтрагентов.Свойство("ЭтоКнигаПродаж") Тогда
		Колонки = Новый Структура("ВсегоПродаж, СуммаБезНДС18, НДС18, СуммаБезНДС10, НДС10, НДС0, СуммаСовсемБезНДС");
	ИначеЕсли СтруктураПараметров.ДанныеДляПроверкиКонтрагентов.Свойство("ЭтоЖурналУчетаСчетовФактур") Тогда
		Колонки = Новый Структура("СуммаДокумента, СуммаНДС, СуммаДокументаРазницаУменьшение, СуммаДокументаРазницаУвеличение, СуммаНДСРазницаУменьшение, СуммаНДСРазницаУвеличение");
	КонецЕсли;
	
	Для каждого Колонка Из Колонки Цикл
		Параметр = Колонка.Ключ;
		СтрокаИтога[Параметр] = СтрокаИтога[Параметр] - СтрокаВычитаемая[Параметр];
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПривестиПустоеИзмерениеИсправленныйСчетФактура(Движения) Экспорт
	
	Для каждого Движение Из Движения Цикл
	
		Если НЕ ЗначениеЗаполнено(Движение.ИсправленныйСчетФактура)
			И Движение.ИсправленныйСчетФактура <> Неопределено Тогда
			
			Движение.ИсправленныйСчетФактура = Неопределено;
		
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

#Область СчетаУчета
Функция СчетПредъявленногоНалогаПоВидуЦенности(ВидЦенности) Экспорт
	
	Если ВидЦенности = Перечисления.ВидыЦенностей.ОС Тогда
		
		Возврат ПланыСчетов.Хозрасчетный.НДСприПриобретенииОсновныхСредств; // 19.01
		
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.НМА Тогда
		
		Возврат ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымНематериальнымАктивам; // 19.02
		
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.Материалы
		Или ВидЦенности = Перечисления.ВидыЦенностей.Товары Тогда
		
		Возврат ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ; // 19.03
		
	ИначеЕсли  ВидЦенности = Перечисления.ВидыЦенностей.СМРПодрядные
		Или ВидЦенности = Перечисления.ВидыЦенностей.ОбъектыНезавершенногоСтроительства Тогда
		
		Возврат ПланыСчетов.Хозрасчетный.НДСприСтроительствеОсновныхСредств; // 19.08
		
	Иначе
		
		Возврат ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымУслугам; // 19.04
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти


#Область ТаможенныйСоюз

Процедура СформироватьДвиженияВвозТоваровИзТаможенногоСоюза(ТаблицаТовары, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыВвозТоваровИзТаможенногоСоюза(ТаблицаТовары, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	Если Параметры.Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ДанныеДвижений = ПодготовитьДанныеДвиженийВвозТоваровИзТаможенногоСоюза(Параметры.Товары, Реквизиты);

	РаздельныйУчетНДС = УчетнаяПолитика.РаздельныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);
	ВерсияУчетаНДС	  = УчетНДСКлиентСервер.Версия(Реквизиты.Период);
	УпрощенныйУчетНДС = ВерсияУчетаНДС = 1 И УчетнаяПолитика.УпрощенныйУчетНДС(Реквизиты.Организация, Реквизиты.Период);

	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Реквизиты.Организация, Реквизиты.Период);
	ДвиженияРаздельныйУчетНДС  = РаздельныйУчетНДС И НЕ РаздельныйУчетНДСНаСчете19;

	Если ДанныеДвижений.Итог("НДС") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Бухгалтерские проводки
	
	СформироватьПроводкиНачислениеНДСПриВвозеТоваровИзТаможенногоСоюза(Реквизиты, ДанныеДвижений, Движения, Отказ);
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	Если НЕ ПлательщикНДС Тогда
		Возврат;
	КонецЕсли;
	
	// Движения по регистрам
	
	СформироватьДвиженияНДСПредъявленныйВвозТоваровИзТаможенногоСоюза(Реквизиты, ДанныеДвижений, Движения, Отказ);
	
	Если ДвиженияРаздельныйУчетНДС Тогда
		УчетНДСПереопределяемый.СформироватьДвиженияНДСПоПриобретеннымЦенностямВвозТоваровИзТаможенногоСоюза(Параметры.Товары, Реквизиты, Движения, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьПараметрыВвозТоваровИзТаможенногоСоюза(ТаблицаТовары, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                    // <ДокументСсылка>
	+ "Период,"                         // <Дата>
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "НДСВключенВСтоимость,"           // <Булево>
	+ "Контрагент,"                     // <СправочникСсылка.Контрагенты>
	+ "ДоговорКонтрагента,"             // <СправочникСсылка.ДоговорыКонтрагентов>
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Подготовка таблицы Товары

	СписокОбязательныхКолонок = ""
	+ "Партия,"                  // <ДокументСсылка> - документ поступления товаров
	+ "Номенклатура,"            // <СправочникСсылка.Номенклатура> - поступивший ранее товар
	+ "Склад,"                   // <СправочникСсылка.Склады> - склад, на который поступил ранее товар
	+ "Подразделение,"           // Подразделение для проводок
	+ "СчетУчета,"               // <ПланСчетовСсылка.Хозрасчетный>
	+ "СчетУчетаНДС,"            // <ПланСчетовСсылка.Хозрасчетный>
	+ "СпособУчетаНДС,"          // <ПеречислениеСсылка.СпособыУчетаНДС>
	+ "ВидЦенности,"             // <ПеречислениеСсылка.ВидыЦенностей>
	+ "СуммаБезНДС,"             // <Число,15,2> - сумма без НДС в рублях
	+ "НДС,"                     // <Число,15,2> - сумма НДС в рублях
	+ "Стоимость,"               // <Число,15,2> - сумма в валюте расчетов с поставщиком
	+ "СтавкаНДС"                // <ПеречислениеСсылка.СтавкиНДС>
	;
	Параметры.Вставить("Товары", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТовары, СписокОбязательныхКолонок));
		
	Реквизиты = Параметры.Реквизиты[0];
	// Документом партии при поступлении доп.расходов служит документ поступления товаров
	
	// Документом-основанием счета-фактуры при поступлении доп.расходов выступает документ поступления
	Параметры.Товары.Колонки.Добавить("СчетФактура", Документы.ТипВсеСсылки());
	Параметры.Товары.ЗаполнитьЗначения(Реквизиты.Регистратор, "СчетФактура");
	// Для доп.расходов количество в регистре НДСпоПриобретеннымЦенностям всегда равно нулю
	Параметры.Товары.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьДанныеДвиженийВвозТоваровИзТаможенногоСоюза(Товары, Реквизиты)

	ДанныеДвижений = Товары.Скопировать(,
		"СчетФактура,СтавкаНДС,СчетУчетаНДС,ВидЦенности,СпособУчетаНДС,СуммаБезНДС,НДС");

	ДанныеДвижений.Свернуть(
		"СчетФактура,СтавкаНДС,СчетУчетаНДС,ВидЦенности,СпособУчетаНДС",
		"СуммаБезНДС,НДС");

	ДанныеДвижений.Колонки.Добавить("Период",      Новый ОписаниеТипов("Дата"));
	ДанныеДвижений.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Период, "Период,ДатаСобытия");

	ДанныеДвижений.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");

	ДанныеДвижений.Колонки.Добавить("Поставщик", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Контрагент, "Поставщик");
	
	Возврат ДанныеДвижений;

КонецФункции

Функция ПодготовитьТаблицуСнятиеБлокировкиВычетаПриВвозеТоваров(ТаблицаОплатаПодтверждена, ТаблицаРеквизиты) Экспорт
	
	Параметры = ПодготовитьПараметрыСнятиеБлокировкиВычетаПриВвозеТоваров(ТаблицаОплатаПодтверждена, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(Реквизиты.Период), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ДанныеОЗаявлениях", Параметры.ТаблицаОплатаПодтверждена);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеОЗаявлениях.ЗаявлениеОВвозе,
	|	ДанныеОЗаявлениях.ДатаДокументаОплаты,
	|	ДанныеОЗаявлениях.НомерДокументаОплаты
	|ПОМЕСТИТЬ ДанныеОЗаявлениях
	|ИЗ
	|	&ДанныеОЗаявлениях КАК ДанныеОЗаявлениях
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДанныеОЗаявлениях.ЗаявлениеОВвозе
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСПредъявленныйОбороты.СчетФактура,
	|	НДСПредъявленныйОбороты.Организация,
	|	НДСПредъявленныйОбороты.ВидЦенности,
	|	НДСПредъявленныйОбороты.СтавкаНДС,
	|	НДСПредъявленныйОбороты.СчетУчетаНДС,
	|	НДСПредъявленныйОбороты.Поставщик,
	|	НДСПредъявленныйОбороты.ДатаОплаты,
	|	НДСПредъявленныйОбороты.ДоговорКонтрагента,
	|	НДСПредъявленныйОбороты.ИсправленныйСчетФактура
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный.Обороты(
	|			,
	|			&КонецПериодаГраница,
	|			,
	|			СчетФактура В
	|					(ВЫБРАТЬ
	|						ДанныеОЗаявлениях.ЗаявлениеОВвозе
	|					ИЗ
	|						ДанныеОЗаявлениях)
	|				И Организация = &Организация
	|				И ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТаможенныйСоюз)) КАК НДСПредъявленныйОбороты";
	
	НДСПредъявленныйПриВвозе = Запрос.Выполнить().Выгрузить();
	НДСПредъявленныйПриВвозе.Индексы.Добавить("СчетФактура");
	
	ТаблицаДвижений = НДСПредъявленныйПриВвозе.СкопироватьКолонки();
	ТаблицаДвижений.Колонки.Добавить("ДатаДокументаОплаты", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаДвижений.Колонки.Добавить("НомерДокументаОплаты", ОбщегоНазначения.ОписаниеТипаСтрока(30));
	
	Для каждого СтрокаЗаявления Из Параметры.ТаблицаОплатаПодтверждена Цикл
		
		СтруктураПоиска = Новый Структура("СчетФактура", СтрокаЗаявления.ЗаявлениеОВвозе);
		ПредъявленныйНДСПоЗаявлению = НДСПредъявленныйПриВвозе.НайтиСтроки(СтруктураПоиска);
		
		Если ПредъявленныйНДСПоЗаявлению.Количество() > 0 Тогда
			НоваяСтрокаДвижения = ТаблицаДвижений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДвижения, СтрокаЗаявления);
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДвижения, ПредъявленныйНДСПоЗаявлению[0]);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаДвижений;
	
КонецФункции

Функция ПодготовитьПараметрыСнятиеБлокировкиВычетаПриВвозеТоваров(ТаблицаОплатаПодтверждена, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                    // <ДокументСсылка>
	+ "Период,"                         // <Дата>
	+ "Организация"                    // <СправочникСсылка.Организации>
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Подготовка таблицы Товары

	СписокОбязательныхКолонок = ""
	+ "ЗаявлениеОВвозе,"         // <ДокументСсылка.ЗаявлениеОВвозеТоваров> - заявление, оплата которого подтверждена
	+ "ДатаДокументаОплаты,"     // <Дата>  - дата документа подтверждающего оплату заявления по данным документа
	+ "НомерДокументаОплаты"     // <Номер> - номер документа подтверждающего оплату заявления по данным документа
	;
	
	Параметры.Вставить("ТаблицаОплатаПодтверждена", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаОплатаПодтверждена, СписокОбязательныхКолонок));

	Возврат Параметры;	

КонецФункции

Процедура СформироватьДвиженияПодтвержденаОплатаНДСПоВвезеннымТоварам(ТаблицаРеквизиты, ТаблицаСнятиеБлокировкиВычета, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыПодтвержденаОплатаНДСПоВвезеннымТоварам(ТаблицаРеквизиты, ТаблицаСнятиеБлокировкиВычета);
	Реквизиты = Параметры.Реквизиты[0];

	СформироватьДвиженияНДСЗаписиКнигиПокупок(Параметры.ТаблицаСнятиеБлокировкиВычета, Движения, Отказ)
	
КонецПроцедуры

Функция ПодготовитьПараметрыПодтвержденаОплатаНДСПоВвезеннымТоварам(ТаблицаРеквизиты, ТаблицаСнятиеБлокировкиВычета)

	Параметры = Новый Структура;

	// Подготовка таблицы Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                    // <ДокументСсылка>
	+ "Период,"                         // <Дата>
	+ "Организация"                     // <СправочникСсылка.Организации>
	;
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Подготовка таблицы подтверждения оплаты

	СписокОбязательныхКолонок = ""
	
	+ "СчетФактура,"
	+ "Организация,"
	+ "ВидЦенности,"
	+ "СтавкаНДС,"
	+ "СчетУчетаНДС,"
	+ "Поставщик,"
	+ "ДатаОплаты,"
	+ "ДоговорКонтрагента,"
	+ "ИсправленныйСчетФактура,"
	+ "ДатаДокументаОплаты,"
	+ "НомерДокументаОплаты"
	;
	
	Параметры.Вставить("ТаблицаСнятиеБлокировкиВычета", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСнятиеБлокировкиВычета, СписокОбязательныхКолонок));
		
	Реквизиты = Параметры.Реквизиты[0];	
		
	Параметры.ТаблицаСнятиеБлокировкиВычета.Колонки.Добавить("Регистратор", Документы.ТипВсеСсылки());
	Параметры.ТаблицаСнятиеБлокировкиВычета.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	Параметры.ТаблицаСнятиеБлокировкиВычета.ЗаполнитьЗначения(Реквизиты.Регистратор, "Регистратор");
	Параметры.ТаблицаСнятиеБлокировкиВычета.ЗаполнитьЗначения(Реквизиты.Период, "Период");

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияНДСПредъявленныйВвозТоваровИзТаможенногоСоюза(Реквизиты, ДанныеДвижений, Движения, Отказ)

	Если ДанныеДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ДанныеДвижений Цикл

		Запись = Движения.НДСПредъявленный.ДобавитьПриход();
		
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
		Запись.Регистратор = Реквизиты.Регистратор;
		Запись.Событие = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком;

	КонецЦикла;

	Движения.НДСПредъявленный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьПроводкиНачислениеНДСПриВвозеТоваровИзТаможенногоСоюза(Реквизиты, ТаблицаДвижений, Движения, Отказ)

	// Проводка по начислению налога к уплате не зависит от системы налогообложения
	// Проводка Дт 19.10 Кт 68.42
	
	ДанныеДвижений = ТаблицаДвижений.Скопировать();
	
	ДанныеДвижений.Свернуть("СпособУчетаНДС, СчетУчетаНДС", "НДС, СуммаБезНДС");
	
	Для каждого СтрокаТаблицы Из ДанныеДвижений Цикл

		Если СтрокаТаблицы.НДС = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;

		Проводка.Содержание = НСтр("ru = 'Начислен НДС при ввозе товаров из Таможенного союза'");

		Проводка.СчетДт = СтрокаТаблицы.СчетУчетаНДС; // 19.х
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"СФПолученные", Реквизиты.Регистратор);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"Контрагенты", Реквизиты.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"СпособыУчетаНДС", СтрокаТаблицы.СпособУчетаНДС);
	
		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДСТаможенныйСоюзКУплате;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"Контрагенты", Реквизиты.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"Договоры", Реквизиты.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"СФПолученные", Реквизиты.Регистратор);
		
		Проводка.Сумма = СтрокаТаблицы.НДС;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

// Создает список показателей декларации по косвенным налогам, которые будут автоматически заполняться
// Для версии отчета ФормаОтчета2010Кв3
Процедура ПолучитьСведенияОПоказателяхОтчетаКосвенныеНалогиТамСоюзФормаОтчета2010Кв3(ПоказателиОтчета) Экспорт

	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100003101", Истина, Истина);

КонецПроцедуры

// Заполняет контейнер с показателями декларации по косвенным налогам (таможенный союз)
// Для версии отчета ФормаОтчета2010Кв3
Процедура ЗаполнитьОтчетКосвенныеНалогиТамСоюзФормаОтчета2010Кв3(ПараметрыОтчета, Контейнер,СохранятьТаблицуРасшифровок = Истина) Экспорт
	
	Перем ТаблицаРасшифровки;
	
	Если ПараметрыОтчета.Свойство("ГруппаОрганизаций") Тогда
		СписокОрганизаций = ПараметрыОтчета.ГруппаОрганизаций; 
	Иначе
		СписокОрганизаций = Новый СписокЗначений();
	КонецЕсли;
		
	СписокОрганизаций.Добавить(ПараметрыОтчета.Организация);

	Если Контейнер.Свойство("Раздел1") Тогда   
		
		Раздел1 = Контейнер.Раздел1;
		
		Если ПараметрыОтчета.ДатаПодписи > ПараметрыОтчета.мДатаКонцаПериодаОтчета Тогда
			ДатаПодписиДекларации = ПараметрыОтчета.ДатаПодписи;
		Иначе
			ДатаПодписиДекларации = ПараметрыОтчета.мДатаКонцаПериодаОтчета;
		КонецЕсли;
		
		ВидыСубконто6842 = Новый СписокЗначений;
		ВидыСубконто6842.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
		ВидыСубконто6842.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
		ВидыСубконто6842.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СФПолученные);
		
		// Запрос
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
		Запрос.УстановитьПараметр("НачалоПериода", ПараметрыОтчета.мДатаНачалаПериодаОтчета);
		Запрос.УстановитьПараметр("КонецПериода", ПараметрыОтчета.мДатаКонцаПериодаОтчета);
		Запрос.УстановитьПараметр("ДатаПодписиДекларации", ДатаПодписиДекларации);
		Запрос.УстановитьПараметр("Счет6842", ПланыСчетов.Хозрасчетный.НДСТаможенныйСоюзКУплате);
		Запрос.УстановитьПараметр("ВидыСубконто6842", ВидыСубконто6842);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаявленияОВвозе.Ссылка КАК ЗаявлениеОВвозе,
		|	МИНИМУМ(ЗаявленияОВвозе.ДатаПринятияНаУчет) КАК НалоговыйПериод
		|ПОМЕСТИТЬ ЗаявленияПоНалоговымПериодам
		|ИЗ
		|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ЗаявленияОВвозе
		|ГДЕ
		|	ЗаявленияОВвозе.Ссылка.Организация = &Организация
		|	И ЗаявленияОВвозе.Ссылка.Проведен
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаявленияОВвозе.Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НалоговыйПериод
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаявленияПоНалоговымПериодам.ЗаявлениеОВвозе
		|ПОМЕСТИТЬ ДекларируемыеЗаявления
		|ИЗ
		|	ЗаявленияПоНалоговымПериодам КАК ЗаявленияПоНалоговымПериодам
		|ГДЕ
		|	ЗаявленияПоНалоговымПериодам.НалоговыйПериод МЕЖДУ &НачалоПериода И &КонецПериода
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЗаявленияПоНалоговымПериодам.ЗаявлениеОВвозе
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.СуммаОборотКт КАК ЧИСЛО(15, 0)), 0) КАК П000100003101
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			,
		|			&ДатаПодписиДекларации,
		|			,
		|			Счет = &Счет6842,
		|			&ВидыСубконто6842,
		|			Организация = &Организация
		|				И Субконто3 В
		|					(ВЫБРАТЬ
		|						ДекларируемыеЗаявления.ЗаявлениеОВвозе
		|					ИЗ
		|						ДекларируемыеЗаявления),
		|			,
		|			) КАК ХозрасчетныйОбороты";
		
		Выборка = Запрос.Выполнить();
		
		Если НЕ Выборка.Пустой() Тогда
			
			ТаблицаНачислений = Выборка.Выгрузить();
			
			ЗначенияДляЗаполнения = ТаблицаНачислений[0];
			
			ЗаполнитьЗначенияСвойств(Раздел1, ЗначенияДляЗаполнения, "П000100003101");
		
		КонецЕсли; 
			
		
	КонецЕсли;
	
	// Сохраняем таблицу расшифровок во временном хранилище в привязке к уникальному идентификатору формы
	Если СохранятьТаблицуРасшифровок Тогда
		ПараметрыОтчета.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, ПараметрыОтчета.УникальныйИдентификаторФормы);
	КонецЕсли;


КонецПроцедуры

Функция ГосударствоЧленТаможенногоСоюза(СтранаМира) Экспорт

	Если ЗначениеЗаполнено(СтранаМира)
		И ТипЗнч(СтранаМира) = Тип("СправочникСсылка.СтраныМира") Тогда
		
		Беларусь = Справочники.СтраныМира.НайтиПоКоду("112");
		Казахстан = Справочники.СтраныМира.НайтиПоКоду("398");
		
		Возврат (СтранаМира = Беларусь) ИЛИ (СтранаМира = Казахстан);
		
	Иначе
		
		Возврат Ложь;
	
	КонецЕсли; 

КонецФункции

Функция КонтрагентРезидентТаможенногоСоюза(Контрагент) Экспорт
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		
		СтранаРегистрацииКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "СтранаРегистрации");
		Возврат ГосударствоЧленТаможенногоСоюза(СтранаРегистрацииКонтрагента);
			
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

Процедура ОпределитьТаблицуОписанияОбъектовРегламентированнойОтчетности(ТаблицаОписания) Экспорт
	
	ОписаниеОбъекта = ТаблицаОписания.Добавить();
	ОписаниеОбъекта.Наименование = "Заявление о ввозе товаров (на основании поступления)";
	ОписаниеОбъекта.ТипОбъекта = Тип("ДокументСсылка.ЗаявлениеОВвозеТоваров");
	ОписаниеОбъекта.ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ФНС;
	ОписаниеОбъекта.ГруппаВДереве = "Налоговая отчетность";
	ОписаниеОбъекта.ВидДокумента = Перечисления.СтраницыЖурналаОтчетность.Отчеты;
	ОписаниеОбъекта.НеОтправляетсяВКонтролирующийОрган = Ложь;
	ОписаниеОбъекта.ЯвляетсяАктуальным = Истина;
	ОписаниеОбъекта.ИмяОсновногоМакетаДляПечати = "";
	
КонецПроцедуры

// Процедура переопределяет свойства объекта, с которыми он будет отображен в форме Отчетность
// Параметры:
//  СвойстваОбъектов  - ТаблицаЗначений - Таблица, содержащая в себе описания ссылок, переданных в закладке Ссылка таблицы
//		Каждая колонка таблицы соотвествует свойству объекта.
//		Таблица содержит следующие колонки:
//			- ДатаСоздания - Дата - Дата создания объекта
//			- Наименование - Строка - Наименование объекта, с которым он будет отображаться в форме Отчетность
//			- КодКонтролирующегоОргана - Строка - Код контролирующего органа, в который отправляется отчетности по ТКС
//			- ДатаНачала - Дата - Дата начала периода. Пустая, если дата начала периода отсуствует
//			- ДатаОкончания - Дата - Дата окончания периода. Пустая, если дата окончания периода отсуствует 
//			- ВариантОтчета - Строка(3) - Корректировочный номер (0 - Первичный)
//			- ПометкаУдаления - Булево - Истина, если объект помечен на удаление 
//			- Организация - СправочникСсылка.Организации - Организация, которой принадлежит объект
//			- Комментарий - Строка - Комментарий из объекта
Процедура ОпределитьСвойстваОбъектовДляОтображенииВФормеОтчетность(СвойстваОбъектов) Экспорт
	
	МассивЗаявленийОВвозеТоваров = Новый Массив();
	Для Каждого СвойстваОбъекта ИЗ СвойстваОбъектов Цикл
		Если ТипЗнч(СвойстваОбъекта.Ссылка) = Тип("ДокументСсылка.ЗаявлениеОВвозеТоваров") Тогда
			МассивЗаявленийОВвозеТоваров.Добавить(СвойстваОбъекта.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивЗаявленийОВвозеТоваров.Количество() > 0 Тогда
		Запрос = Новый Запрос();
		Запрос.Параметры.Вставить("МассивЗаявленийОВвозеТоваров", МассивЗаявленийОВвозеТоваров);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаявлениеОВвозеТоваров.Ссылка,
		|	ЗаявлениеОВвозеТоваров.Дата КАК ДатаСоздания,
		|	ЗаявлениеОВвозеТоваров.Организация КАК Организация,
		|	ЗаявлениеОВвозеТоваров.Дата КАК ДатаНачала,
		|	ЗаявлениеОВвозеТоваров.Дата КАК ДатаОкончания,
		|	ЗаявлениеОВвозеТоваров.ПометкаУдаления,
		|	ЗаявлениеОВвозеТоваров.СтруктураРеквизитовВыгрузки,
		|	""-"" КАК ВариантОтчета,
		|	ЗаявлениеОВвозеТоваров.Комментарий КАК Комментарий
		|ИЗ
		|	Документ.ЗаявлениеОВвозеТоваров КАК ЗаявлениеОВвозеТоваров
		|ГДЕ
		|	ЗаявлениеОВвозеТоваров.Ссылка В(&МассивЗаявленийОВвозеТоваров)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СтрокиОбъектов = СвойстваОбъектов.НайтиСтроки(Новый Структура("Ссылка", Выборка.Ссылка));
			Для Каждого СтрокаОбъекта ИЗ СтрокиОбъектов Цикл
				
				ЗаполнитьЗначенияСвойств(СтрокаОбъекта, Выборка);
				СтрокаОбъекта.Наименование = НСтр("ru = 'Заявление о ввозе товаров (на основании поступления)'");
				
				СтруктураРеквизитовВыгрузки = Выборка.СтруктураРеквизитовВыгрузки.Получить();
		
				Если ТипЗнч(СтруктураРеквизитовВыгрузки) = Тип("Структура") И СтруктураРеквизитовВыгрузки.Свойство("КодИФНС") Тогда
					СтрокаОбъекта.КодКонтролирующегоОргана = СтруктураРеквизитовВыгрузки.КодИФНС;
				Иначе
					СтрокаОбъекта.КодКонтролирующегоОргана = "";
				КонецЕсли;
			
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#Область СведенияОЮридическихИФизическихЛицах

Процедура РегистрационныеСведенияНаДаты(МенеджерВременныхТаблиц) Экспорт
	
	// Запрос требует обязательного наличия в МенеджерВременныхТаблиц таблицы с именем
	// СсылкиНаДаты с колонками Ссылка, ДатаСведений
	// Результатом является временная таблица СведенияОСсылкахНаДаты
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СсылкиНаДаты.Ссылка КАК Ссылка,
	|	СсылкиНаДаты.ДатаСведений,
	|	МАКСИМУМ(ИсторияКППКонтрагентов.Период) КАК Период
	|ПОМЕСТИТЬ ДатыСведенийОКонтрагентах
	|ИЗ
	|	СсылкиНаДаты КАК СсылкиНаДаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.ИсторияКПП КАК ИсторияКППКонтрагентов
	|		ПО СсылкиНаДаты.Ссылка = ИсторияКППКонтрагентов.Ссылка
	|			И СсылкиНаДаты.ДатаСведений >= ИсторияКППКонтрагентов.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	СсылкиНаДаты.Ссылка,
	|	СсылкиНаДаты.ДатаСведений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыСведенийОКонтрагентах.Ссылка КАК Ссылка,
	|	ДатыСведенийОКонтрагентах.ДатаСведений КАК ДатаСведений,
	|	ВЫБОР
	|		КОГДА Контрагенты.ОбособленноеПодразделение
	|				И Контрагенты.ГоловнойКонтрагент.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА ВЫБОР
	|					КОГДА ПОДСТРОКА(ГоловныеКонтрагенты.НаименованиеПолное, 1, 250) = """"
	|						ТОГДА ГоловныеКонтрагенты.Наименование
	|					ИНАЧЕ ГоловныеКонтрагенты.НаименованиеПолное
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПОДСТРОКА(Контрагенты.НаименованиеПолное, 1, 250) = """"
	|					ТОГДА Контрагенты.Наименование
	|				ИНАЧЕ Контрагенты.НаименованиеПолное
	|			КОНЕЦ
	|	КОНЕЦ КАК Наименование,
	|	Контрагенты.ИНН КАК ИНН,
	|	ЕСТЬNULL(ИсторияКППКонтрагентов.КПП, Контрагенты.КПП) КАК КПП
	|ПОМЕСТИТЬ СведенияОКонтрагентахНаДаты
	|ИЗ
	|	ДатыСведенийОКонтрагентах КАК ДатыСведенийОКонтрагентах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО ДатыСведенийОКонтрагентах.Ссылка = Контрагенты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК ГоловныеКонтрагенты
	|		ПО (Контрагенты.ГоловнойКонтрагент = ГоловныеКонтрагенты.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.ИсторияКПП КАК ИсторияКППКонтрагентов
	|		ПО ДатыСведенийОКонтрагентах.Ссылка = ИсторияКППКонтрагентов.Ссылка
	|			И ДатыСведенийОКонтрагентах.Период = ИсторияКППКонтрагентов.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	ДатаСведений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДатыСведенийОКонтрагентах
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СсылкиНаДаты.Ссылка КАК Ссылка,
	|	СсылкиНаДаты.ДатаСведений,
	|	МАКСИМУМ(ИсторияРегистрацийВНалоговомОргане.Период) КАК Период
	|ПОМЕСТИТЬ ДатыСведенийОбОрганизациях
	|ИЗ
	|	СсылкиНаДаты КАК СсылкиНаДаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияРегистрацийВНалоговомОргане КАК ИсторияРегистрацийВНалоговомОргане
	|		ПО СсылкиНаДаты.Ссылка = ИсторияРегистрацийВНалоговомОргане.СтруктурнаяЕдиница
	|			И СсылкиНаДаты.ДатаСведений >= ИсторияРегистрацийВНалоговомОргане.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	СсылкиНаДаты.Ссылка,
	|	СсылкиНаДаты.ДатаСведений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыСведенийОбОрганизациях.Ссылка КАК Ссылка,
	|	ДатыСведенийОбОрганизациях.ДатаСведений КАК ДатаСведений,
	|	ВЫБОР
	|		КОГДА Организации.ВариантНаименованияДляПечатныхФорм = ЗНАЧЕНИЕ(Перечисление.ВариантыНаименованияДляПечатныхФорм.СокращенноеНаименование)
	|			ТОГДА Организации.НаименованиеСокращенное
	|		ИНАЧЕ Организации.НаименованиеПолное
	|	КОНЕЦ КАК Наименование,
	|	Организации.ИНН КАК ИНН,
	|	ЕСТЬNULL(ИсторияРегистрацийВНалоговомОргане.РегистрацияВНалоговомОргане.КПП, Организации.КПП) КАК КПП
	|ПОМЕСТИТЬ СведенияОбОрганизацияхНаДаты
	|ИЗ
	|	ДатыСведенийОбОрганизациях КАК ДатыСведенийОбОрганизациях
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО ДатыСведенийОбОрганизациях.Ссылка = Организации.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияРегистрацийВНалоговомОргане КАК ИсторияРегистрацийВНалоговомОргане
	|		ПО ДатыСведенийОбОрганизациях.Ссылка = ИсторияРегистрацийВНалоговомОргане.СтруктурнаяЕдиница
	|			И ДатыСведенийОбОрганизациях.Период = ИсторияРегистрацийВНалоговомОргане.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	ДатаСведений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДатыСведенийОбОрганизациях
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СсылкиНаДаты.Ссылка КАК Ссылка,
	|	СсылкиНаДаты.ДатаСведений КАК ДатаСведений,
	|	ЕСТЬNULL(СведенияОКонтрагентахНаДаты.Наименование, СведенияОбОрганизацияхНаДаты.Наименование) КАК Наименование,
	|	ЕСТЬNULL(СведенияОКонтрагентахНаДаты.ИНН, СведенияОбОрганизацияхНаДаты.ИНН) КАК ИНН,
	|	ЕСТЬNULL(СведенияОКонтрагентахНаДаты.КПП, СведенияОбОрганизацияхНаДаты.КПП) КАК КПП
	|ПОМЕСТИТЬ СведенияОСсылкахНаДаты
	|ИЗ
	|	СсылкиНаДаты КАК СсылкиНаДаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ СведенияОКонтрагентахНаДаты КАК СведенияОКонтрагентахНаДаты
	|		ПО СсылкиНаДаты.Ссылка = СведенияОКонтрагентахНаДаты.Ссылка
	|			И СсылкиНаДаты.ДатаСведений = СведенияОКонтрагентахНаДаты.ДатаСведений
	|		ЛЕВОЕ СОЕДИНЕНИЕ СведенияОбОрганизацияхНаДаты КАК СведенияОбОрганизацияхНаДаты
	|		ПО СсылкиНаДаты.Ссылка = СведенияОбОрганизацияхНаДаты.Ссылка
	|			И СсылкиНаДаты.ДатаСведений = СведенияОбОрганизацияхНаДаты.ДатаСведений
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	ДатаСведений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СведенияОКонтрагентахНаДаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СведенияОбОрганизацияхНаДаты";
	
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти 
