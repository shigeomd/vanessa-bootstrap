////////////////////////////////////////////////////////////////////////////////
// ЭлектронныеДокументыСлужебныйВызовСервера: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Работа с версиями электронных документов

// Изменяет реквизиты элемента справочника ЭДПрисоединенныеФайлы,
//
// Параметры:
//  ДобавленныйФайл - Ссылка на элемент справочника с электронным документом,
//  СтруктураЭД - Структура параметров, которые необходимо заполнить в справочнике.
//
Процедура ИзменитьПоСсылкеПрисоединенныйФайл(
				ДобавленныйФайл,
				СтруктураЭД,
				ПоверятьОбязательныеРеквизиты = Истина) Экспорт
	
	ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл,
		СтруктураЭД, ПоверятьОбязательныеРеквизиты);
	
КонецПроцедуры

// Получает сопоставление владельцев и актуальных ЭД
//
// Параметры:
//  МассивСсылокНаВладельцев - массив ссылок на владельцев электронных документов, данные которых необходимо получить.
//
Функция ПолучитьСоответствиеВладельцевИЭД(МассивСсылокНаВладельцев = Неопределено, МассивСсылокНаЭД = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СоответствиеВладельцевИЭД = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Если Не МассивСсылокНаВладельцев = Неопределено Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СостоянияЭД.СсылкаНаОбъект КАК ВладелецЭД,
		|	СостоянияЭД.ЭлектронныйДокумент КАК СсылкаНаЭД
		|ИЗ
		|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|ГДЕ
		|	СостоянияЭД.СсылкаНаОбъект В(&МассивСсылокНаВладельцев)";
		Запрос.УстановитьПараметр("МассивСсылокНаВладельцев", МассивСсылокНаВладельцев);
	ИначеЕсли Не МассивСсылокНаЭД = Неопределено Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.Ссылка КАК СсылкаНаЭД,
		|	ЭДПрисоединенныеФайлы.ВладелецФайла КАК ВладелецЭД
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.Ссылка В(&МассивЭД)";
		Запрос.УстановитьПараметр("МассивЭД", МассивСсылокНаЭД);
	Иначе
		Возврат СоответствиеВладельцевИЭД;
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выбрать();
	
	СоответствиеВладельцевИЭД = Новый Соответствие;
	Пока Результат.Следующий() Цикл
		СоответствиеВладельцевИЭД.Вставить(Результат.ВладелецЭД, Результат.СсылкаНаЭД);
	КонецЦикла;
	
	Возврат СоответствиеВладельцевИЭД;
	
КонецФункции

// Изменяет состояние версии электронного документа.
//
// Параметры:
//  ЭлектронныйДокумент - СправочникСсылка.ЭДПрисоединенныеФайлы, Массив - электронные документы, версии которых надо обновить.
//  ПринудительнаяСменаСостоянияВерсии - Булево, признак смены версии, несмотря на условия.
//
Процедура ОбновитьВерсиюЭД(ЭлектронныйДокумент, ПринудительнаяСменаСостоянияВерсии = Ложь, ВерсияФорматаПакета = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(ЭлектронныйДокумент) = Тип("Массив") Тогда
		Для Каждого ЭлементМассива Из ЭлектронныйДокумент Цикл
			ОбновитьВерсиюЭД(ЭлементМассива);
		КонецЦикла;
	ИначеЕсли НЕ ЭтоСлужебныйДокумент(ЭлектронныйДокумент) Тогда
		НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(ЭлектронныйДокумент.ВладелецФайла);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() <> 0 Тогда
			НоваяЗаписьНабора = НаборЗаписей.Получить(0);
			
			Если НоваяЗаписьНабора.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно Тогда
				Возврат;
			КонецЕсли;
			
			Если ЭлектронныйДокумент = НоваяЗаписьНабора.ЭлектронныйДокумент
				
				ИЛИ (ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
				И НоваяЗаписьНабора.ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец)
				
				ИЛИ (ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
				И НоваяЗаписьНабора.ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель)
				
				ИЛИ (ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель
				И НоваяЗаписьНабора.ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель)
				
				ИЛИ ((ЭлектронныйДокумент.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
				ИЛИ ЭлектронныйДокумент.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани)
				И НоваяЗаписьНабора.ЭлектронныйДокумент.Пустая())
				
				ИЛИ (ЭлектронныйДокумент.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий //новый каталог делает неактуальным старый
						И ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров)
				
				ИЛИ ПринудительнаяСменаСостоянияВерсии Тогда

				НоваяЗаписьНабора.СостояниеВерсииЭД = ЭлектронныеДокументыСлужебный.ОпределитьСостояниеВерсииПоСтатусуЭД(ЭлектронныйДокумент, ВерсияФорматаПакета);
				СтруктураСводнойИнфПоСтатусу = ОпределитьСводнуюИнформациюПоСтатусуЭД(ЭлектронныйДокумент);
				Если (ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.СчетФактура
						ИЛИ ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура)
					И (НоваяЗаписьНабора.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершен
						Или НоваяЗаписьНабора.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением)
					И НЕ(СтруктураСводнойИнфПоСтатусу.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ВсеВыполнено
						И СтруктураСводнойИнфПоСтатусу.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ВсеВыполнено) Тогда
					НоваяЗаписьНабора.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОжидаетсяПодтверждение;
				КонецЕсли;
				
				Если НоваяЗаписьНабора.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершен
					ИЛИ НоваяЗаписьНабора.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением
					ИЛИ НоваяЗаписьНабора.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ПлатежИсполнен Тогда
					СтруктураСводнойИнфПоСтатусу = Новый Структура;
					СтруктураСводнойИнфПоСтатусу.Вставить("СНашейСтороны", Перечисления.СводныеСостоянияЭД.ВсеВыполнено);
					СтруктураСводнойИнфПоСтатусу.Вставить("СоСтороныДругогоУчастника", Перечисления.СводныеСостоянияЭД.ВсеВыполнено);
				КонецЕсли;
				НоваяЗаписьНабора.ДействияСНашейСтороны = СтруктураСводнойИнфПоСтатусу.СНашейСтороны;
				НоваяЗаписьНабора.ДействияСоСтороныДругогоУчастника = СтруктураСводнойИнфПоСтатусу.СоСтороныДругогоУчастника;
				НоваяЗаписьНабора.ЭлектронныйДокумент = ЭлектронныйДокумент;
				НаборЗаписей.Записать();
			ИначеЕсли ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ
				И ЭлектронныйДокумент.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
				И НЕ НоваяЗаписьНабора.ЭлектронныйДокумент = ЭлектронныйДокумент
				И НоваяЗаписьНабора.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НеСформирован Тогда
				
				НоваяЗаписьНабора.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент;
				НаборЗаписей.Записать();
			ИначеЕсли (ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
				И НоваяЗаписьНабора.ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
				ИЛИ ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
				И НоваяЗаписьНабора.ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
				ИЛИ ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
				И НоваяЗаписьНабора.ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель) Тогда
				
				НоваяЗаписьНабора.СостояниеВерсииЭД = ЭлектронныеДокументыСлужебный.ОпределитьСостояниеВерсииПоСтатусуЭД(ЭлектронныйДокумент);
				НаборЗаписей.Записать();
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент, "ВидЭД") = Перечисления.ВидыЭД.ИзвещениеОПолучении Тогда
		НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
		ВладелецЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент, "ВладелецФайла");
		НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(ВладелецЭД);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() <> 0 Тогда
			НоваяЗаписьНабора = НаборЗаписей.Получить(0);
			
			Если НоваяЗаписьНабора.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно Тогда
				Возврат;
			КонецЕсли;
			
			НоваяЗаписьНабора.СостояниеВерсииЭД = ЭлектронныеДокументыСлужебный.ОпределитьСостояниеВерсииПоСтатусуЭД(
																						НоваяЗаписьНабора.ЭлектронныйДокумент);
			СтруктураСводнойИнфПоСтатусу = ОпределитьСводнуюИнформациюПоСтатусуЭД(НоваяЗаписьНабора.ЭлектронныйДокумент);
			НоваяЗаписьНабора.ДействияСНашейСтороны = СтруктураСводнойИнфПоСтатусу.СНашейСтороны;
			НоваяЗаписьНабора.ДействияСоСтороныДругогоУчастника = СтруктураСводнойИнфПоСтатусу.СоСтороныДругогоУчастника;
			НаборЗаписей.Записать();
		КонецЕсли
	
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает новую версию электронного документа для владельца.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка на документ базы данных, номер версии электронного документа которого надо изменить,
//  ПрисоединенныйФайл - ссылка на электронный документ, который в данный момент является актуальным
//
Процедура УстановитьНовуюВерсиюЭД(СсылкаНаОбъект, ПрисоединенныйФайл = Неопределено, УдалятьСтаруюВерсию = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(СсылкаНаОбъект);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		НоваяЗаписьНабора = НаборЗаписей.Добавить();
		НоваяЗаписьНабора.СсылкаНаОбъект      = СсылкаНаОбъект;
		НоваяЗаписьНабора.ЭлектронныйДокумент = ?(ПрисоединенныйФайл = Неопределено,
		Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка(), ПрисоединенныйФайл);
		НоваяЗаписьНабора.СостояниеВерсииЭД = ЭлектронныеДокументыСлужебный.ПолучитьПервоеСостояниеВерсииЭДДляВладельца(
																					СсылкаНаОбъект,
																					ЗначениеЗаполнено(ПрисоединенныйФайл));
		Если НоваяЗаписьНабора.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НаУтверждении Тогда
			НоваяЗаписьНабора.ДействияСНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
		КонецЕсли;
	Иначе
		
		НоваяЗаписьНабора = НаборЗаписей.Получить(0);
		Если УдалятьСтаруюВерсию Тогда
			УдалитьСтаруюВерсиюЭД(НоваяЗаписьНабора);
		КонецЕсли;
		Если СсылкаНаОбъект.ПометкаУдаления Тогда
			НоваяЗаписьНабора.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ПустаяСсылка();
		Иначе
			НоваяЗаписьНабора.СостояниеВерсииЭД = ЭлектронныеДокументыСлужебный.ПолучитьПервоеСостояниеВерсииЭДДляВладельца(
																					СсылкаНаОбъект,
																					ЗначениеЗаполнено(ПрисоединенныйФайл));
		КонецЕсли;
		Если ПрисоединенныйФайл = Неопределено ИЛИ ПрисоединенныйФайл.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
			ИЛИ ПрисоединенныйФайл.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
			НоваяЗаписьНабора.ЭлектронныйДокумент = ?(ПрисоединенныйФайл = Неопределено,
			Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка(), ПрисоединенныйФайл);
		КонецЕсли;
	КонецЕсли;
	
	Если НоваяЗаписьНабора.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НеСформирован Тогда
		НоваяЗаписьНабора.ДействияСНашейСтороны             = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
		НоваяЗаписьНабора.ДействияСоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
	ИначеЕсли НоваяЗаписьНабора.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НеПолучен Тогда
		НоваяЗаписьНабора.ДействияСНашейСтороны             = Перечисления.СводныеСостоянияЭД.ПустаяСсылка();
		НоваяЗаписьНабора.ДействияСоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ПустаяСсылка();
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Только для внутреннего использования
Процедура ОбновитьСтатусыПодключенияНастроекЭДО(СоотвСоглашенийИСтруктурСертификатов) Экспорт
	
	ТаблицаПриглашений = ЭлектронныеДокументыВнутренний.ТаблицаДанныхУчастниковОбмена(СоотвСоглашенийИСтруктурСертификатов);
	ЭлектронныеДокументыСлужебный.СохранитьПриглашения(ТаблицаПриглашений);
	
КонецПроцедуры

// Только для внутреннего использования
Функция ОпределитьДействующуюНастройкуЭДО(СсылкаНаВладельца, ПараметрыЭД = Неопределено, ВидЭД = Неопределено) Экспорт
	
	Результат = Истина;
	
	ПараметрыЭД = ЭлектронныеДокументыСлужебный.ЗаполнитьПараметрыЭДПоИсточнику(СсылкаНаВладельца);
	Если Не ЗначениеЗаполнено(ПараметрыЭД.ВидЭД) Тогда
		
		Если ЗначениеЗаполнено(ВидЭД) Тогда
			
			ПараметрыЭД.ВидЭД = ВидЭД;
		Иначе
			МассивСсылок = Новый Массив;
			МассивСсылок.Добавить(СсылкаНаВладельца);
			
			СоответствиеВладельцевИЭД = ПолучитьСоответствиеВладельцевИЭД(МассивСсылок);
			Для Каждого ТекЭл Из МассивСсылок Цикл
				
				СсылкаНаЭД = СоответствиеВладельцевИЭД.Получить(ТекЭл);
				Если ЗначениеЗаполнено(СсылкаНаЭД) Тогда
					ПараметрыЭД.ВидЭД = ОбщегоНазначения.ПолучитьЗначениеРеквизита(СсылкаНаЭД, "ВидЭД");
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыОбмена = ЭлектронныеДокументыСлужебный.ОпределитьНастройкиОбменаЭД(ПараметрыЭД, Неопределено);
	
	Если Не ЗначениеЗаполнено(ПараметрыОбмена) Тогда
		Результат = Ложь;
		
		Если ЗначениеЗаполнено(ПараметрыЭД.Контрагент) И ЗначениеЗаполнено(ПараметрыЭД.Организация) Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	СоглашенияОбИспользованииЭД.Ссылка
			|ИЗ
			|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
			|ГДЕ
			|	СоглашенияОбИспользованииЭД.Контрагент = &Контрагент
			|	И СоглашенияОбИспользованииЭД.ДоговорКонтрагента = &ДоговорКонтрагента
			|	И СоглашенияОбИспользованииЭД.Организация = &Организация
			|	И НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления";
			Запрос.УстановитьПараметр("Контрагент",         ПараметрыЭД.Контрагент);
			Запрос.УстановитьПараметр("ДоговорКонтрагента", ПараметрыЭД.ДоговорКонтрагента);
			Запрос.УстановитьПараметр("Организация",        ПараметрыЭД.Организация);
			
			// Получаем настройки ЭДО безусловно
			УстановитьПривилегированныйРежим(Истина);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Не Выборка.Следующий() Тогда
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ
				|	СоглашенияОбИспользованииЭД.Ссылка
				|ИЗ
				|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
				|ГДЕ
				|	СоглашенияОбИспользованииЭД.Контрагент = &Контрагент
				|	И СоглашенияОбИспользованииЭД.Организация = &Организация
				|	И НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления";
				Запрос.УстановитьПараметр("Контрагент",         ПараметрыЭД.Контрагент);
				Запрос.УстановитьПараметр("Организация",        ПараметрыЭД.Организация);
				Выборка = Запрос.Выполнить().Выбрать();
				Выборка.Следующий();
			КонецЕсли;
			
			ПараметрыЭД.Вставить("НастройкаЭДО", Выборка.Ссылка);
		КонецЕсли;
	Иначе
		ПараметрыЭД.Вставить("НастройкаЭДО", ПараметрыОбмена.СоглашениеЭД);
	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Только для внутреннего использования
Функция МожноОткрытьВФормеДереваЭД(Знач СсылкаНаОбъект, ПроверятьДляСоглашения, ОткрытьФормуСоглашения, ПараметрыЭД) Экспорт
	
	ОткрытьВДереве = Ложь;
	Если ПроверятьДляСоглашения И Не ОпределитьДействующуюНастройкуЭДО(СсылкаНаОбъект, ПараметрыЭД) Тогда
		ОткрытьФормуСоглашения = Истина;
	Иначе
		ТипОбъекта = ТипЗнч(СсылкаНаОбъект);
		ОткрытьВДереве = Метаданные.Обработки.ЭлектронныеДокументы.Команды.ДеревоЭД.ТипПараметраКоманды.СодержитТип(ТипОбъекта);
	КонецЕсли;
	
	Возврат ОткрытьВДереве;
	
КонецФункции

 // Устанавливает статус электронного документа
 //
 // Параметры
 //  <ЭД>  - <СправочникСсылка.ЭдПрисоединенныеФайлы> - ссылка на электронный документ
 //  <СтатусЭД>  - <ПеречислениеСсылка.СтатусыЭД> - новый статус электронного документа
 //
Процедура УстановитьСтатусЭД(ЭД, СтатусЭД) Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтатусЭД", СтатусЭД);
	ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ЭД, СтруктураПараметров, Ложь);
	
КонецПроцедуры

 // Устанавливает статус электронного документа
 //
 // Параметры
 //  МассивЭД  - Массив - ссылки на электронные документы
 //  СтатусЭД  - ПеречислениеСсылка.СтатусыЭД - новый статус электронного документа
 //
Процедура УстановитьСтатусыЭД(МассивЭД, СтатусЭД) Экспорт
	
	Для Каждого ЭД Из МассивЭД Цикл
		УстановитьСтатусЭД(ЭД, СтатусЭД);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает пароль к сертификату, если доступен текущему пользователю.
// При вызове в привилегированном режиме текущий пользователь не учитывается.
//
// Параметры:
//  Сертификат - Неопределено - вернуть пароли ко всем сертификатам, доступным текущему пользователю.
//             - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - вернуть пароль
//                 к указанному сертификату.
//              
// Возвращаемое значение:
//  Неопределено - пароль для указанного сертификата не указан.
//  Строка       - пароль для указанного сертификата.
//  Соответствие - все заданные пароли, доступные текущему пользователю
//                 в виде ключ - сертификат и значение - пароль.
//
Функция ПарольКСертификату(Сертификат = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Данные = Константы.КонтекстРаботыЭД.Получить().Получить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не Пользователи.РолиДоступны("ИспользованиеЭП") Тогда
		Если Сертификат <> Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		Возврат Новый СписокЗначений;
	КонецЕсли;
	
	Если Сертификат <> Неопределено Тогда
		Если ТипЗнч(Данные) <> Тип("Соответствие") Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Свойства = Данные.Получить(Сертификат);
		
		Если ТипЗнч(Свойства) = Тип("Структура")
		   И Свойства.Свойство("Пароль")
		   И ТипЗнч(Свойства.Пароль) = Тип("Строка")
		   И Свойства.Свойство("Пользователь")
		   И ТипЗнч(Свойства.Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
			
		   Если Свойства.Пользователь = Пользователи.ТекущийПользователь()
			   ИЛИ Свойства.Пользователь = Справочники.Пользователи.ПустаяСсылка() Тогда
				
				Возврат Свойства.Пароль;
			КонецЕсли;
		КонецЕсли;
		
		Возврат Неопределено;
	КонецЕсли;
	
	ПаролиСертификатов = Новый Соответствие;
	
	Если ТипЗнч(Данные) <> Тип("Соответствие") Тогда
		Возврат ПаролиСертификатов;
	КонецЕсли;
	
	
	Для Каждого КлючИЗначение Из Данные Цикл
		Свойства = КлючИЗначение.Значение;
		
		Если ТипЗнч(Свойства) = Тип("Структура")
		   И Свойства.Свойство("Пароль")
		   И ТипЗнч(Свойства.Пароль) = Тип("Строка")
		   И Свойства.Свойство("Пользователь")
		   И ТипЗнч(Свойства.Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
			
		   Если Свойства.Пользователь = Пользователи.ТекущийПользователь()
			   ИЛИ Свойства.Пользователь = Справочники.Пользователи.ПустаяСсылка()
			 Или ПривилегированныйРежим() Тогда
				ПаролиСертификатов.Вставить(КлючИЗначение.Ключ, Свойства.Пароль);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПаролиСертификатов;
	
КонецФункции

// Из доп данных пакета ЭД находит ИДЭД основания, по нему находит ссылку на ЭД
// и помещает ее в массив, затем по найденной ссылке на ЭД снова ищет пакет и ЭД основание
// Параметры:
//  МассивЭДОснований - Массив - заполняется найденными основаниями
//  ДобавленныйФайл - Ссылка - ЭД для которого ищутся основания
//  НаправлениеЭД - Перечисление - Параметр необходимый для поиска основания
//
Процедура ЗаполнитьЭДОснования(МассивЭДОснований, ДобавленныйФайл, НаправлениеЭД) Экспорт
	
	Если Не ТипЗнч(ДобавленныйФайл) = Тип("Массив") Тогда
		ЭДДобавленные = Новый Массив;
		ЭДДобавленные.Добавить(ДобавленныйФайл);
	Иначе
		ЭДДобавленные = ДобавленныйФайл;
	КонецЕсли;
	
	Для Каждого ЭлементМассива Из ЭДДобавленные Цикл
		ТекущийЭД = ЭлементМассива;
		Пока ЗначениеЗаполнено(ТекущийЭД) Цикл
			ЭДОснования = ЭДОснования(ТекущийЭД, НаправлениеЭД);
			Если ЗначениеЗаполнено(ЭДОснования) Тогда
				МассивЭДОснований.Добавить(ЭДОснования);
			КонецЕсли;
			ТекущийЭД = ЭДОснования;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Распаковка пакетов электронных документов

// Возвращает массив двоичных данных содержимого пакета электронных документов.
//
// Параметры:
//  ПакетЭД - ДокументСсылка.ПакетЭД - исследуемый пакет электронных документов.
//  ПараметрыШифрования - Структура, настройки шифрования, применимые к данному пакету электронных документов.
//
Функция ВернутьМассивДвоичныхДанныхПакета(ПакетЭД) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
		
	Если НЕ ОпределитьВозможностьЧтенияДвоичныхДанныхПакетаЭД(ПакетЭД) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыПакетаЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПакетЭД, "НастройкаЭДО, СпособОбменаЭД, ВерсияФорматаПакета");
	Если Не ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоПрямойОбмен(ПараметрыПакетаЭД.СпособОбменаЭД)
		ИЛИ ПараметрыПакетаЭД.ВерсияФорматаПакета <> Перечисления.ВерсииФорматаПакетаЭД.Версия10 Тогда
		
		Возврат ЭлектронныеДокументыВнутренний.ВернутьМассивДвоичныхДанныхПакетаОператораЭДО(ПакетЭД);
	КонецЕсли;
	
	// Так как данный процесс потенциально порождает много ошибок и выполняется в цикле, возьмем его целиком в попытку-исключение,
	// чтобы при ошибке в одном контейнере, остальные могли корректно распаковаться
	
	ФайлАрхива = "";
	ФайлРасшифрованногоАрхива = "";
	
	Попытка
		// Проверим, что соглашение, указанное в пакете, до сих пор действует.
		Если Не ЗначениеЗаполнено(ПараметрыПакетаЭД.НастройкаЭДО)
			ИЛИ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыПакетаЭД.НастройкаЭДО, "СтатусПодключения")
			<> Перечисления.СтатусыУчастниковОбменаЭД.Присоединен Тогда
			
			СообщениеИсключения = НСтр("ru = 'По данному пакету электронных документов нет действующей настройки ЭДО.
											|Распаковка невозможна.'");
			ВызватьИсключение(СообщениеИсключения);
			Возврат Неопределено;
		КонецЕсли;
		
		// Необходимо получить архив пакета из присоединенных файлов к документу
		СтруктураОтбора = Новый Структура("ВладелецФайла", ПакетЭД);
		ВыборкаПрисоединенныхФайлов = ЭлектронныеДокументыСлужебный.ПолучитьВыборкуЭДПоОтбору(СтруктураОтбора);
		Если НЕ ЗначениеЗаполнено(ВыборкаПрисоединенныхФайлов) ИЛИ НЕ ВыборкаПрисоединенныхФайлов.Следующий() Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		// Для каждого из пакетов необходимо определить файл с данными
		ПараметрыДанных = ЭлектронныеДокументыСлужебный.ПолучитьДанныеФайла(ВыборкаПрисоединенныхФайлов.Ссылка);
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ПараметрыДанных.СсылкаНаДвоичныеДанныеФайла);
		ФайлАрхива = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("zip");
		ДвоичныеДанныеФайла.Записать(ФайлАрхива);
		
		ЗИПЧтение = Новый ЧтениеZipФайла(ФайлАрхива);
		ПапкаДляРаспаковки = ЭлектронныеДокументыСлужебный.РабочийКаталог("ext", ПакетЭД.Ссылка.УникальныйИдентификатор());

		Попытка
			ЗИПЧтение.ИзвлечьВсе(ПапкаДляРаспаковки);
		Исключение
			ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Если НЕ ЭлектронныеДокументыСлужебный.ВозможноИзвлечьФайлы(ЗИПЧтение, ПапкаДляРаспаковки) Тогда
				ТекстСообщения = ЭлектронныеДокументыПовтИсп.ПолучитьСообщениеОбОшибке("006");
			КонецЕсли;
			ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Распаковка пакета ЭД'"), ТекстОшибки, ТекстСообщения);
			ЗИПЧтение.Закрыть();
			УдалитьФайлы(ФайлАрхива);
			УдалитьФайлы(ПапкаДляРаспаковки);
			Возврат Неопределено;
		КонецПопытки;
		ЗИПЧтение.Закрыть();
		УдалитьФайлы(ФайлАрхива);
		
		ФайлыАрхива = НайтиФайлы(ПапкаДляРаспаковки, "*");
		
		// Файл с данными также лежит в виде .zip-архива.
		// В одном пакете может лежать несколько файлов данных, соберем их в массив.
		
		МассивФайловДанных = НайтиФайлы(ПапкаДляРаспаковки, "*.zip");
		МассивФайловИзвещений = НайтиФайлы(ПапкаДляРаспаковки, "*ИзвещениеОПолученииДокумента*.xml");
		
		// Расшифровать файл с данными
		// Найдем файл с информацией о шифровании документа
		ФайлИнформации = Неопределено;
		Для Каждого Файл Из ФайлыАрхива Цикл
			Если Найти(Файл.Имя, "packageDescription") > 0 Тогда
				ФайлИнформации = Файл;
			ИначеЕсли Файл.Расширение <> ".p7s" И Файл.Расширение <> ".zip" Тогда
				МассивФайловДанных.Добавить(Файл);
			КонецЕсли;
		КонецЦикла;
		
		// Для последующих действий определим соглашение 
		
		ТекстИнформации = Новый ТекстовыйДокумент;
		ТекстИнформации.Прочитать(ФайлИнформации.ПолноеИмя);
					
		СоответствиеФайлПараметры = ПолучитьСоответствиеФайлПараметры(ФайлИнформации);
		
		ПакетЭДОбъект = ПакетЭД.ПолучитьОбъект();
		
		МассивДобавленныхФайлов = Новый Массив;
		
		Если Не СоответствиеФайлПараметры.Получить("Текст") = Неопределено Тогда
			СоответствиеФайлПараметры.Вставить("ЭтоПроизвольныйЭД", Истина);
		КонецЕсли;
		
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("СоответствиеФайлПараметры",        СоответствиеФайлПараметры);
		СтруктураВозврата.Вставить("СтруктураДвоичныхДанных",          ПреобразоватьМассивФайловВДвоичныеДанные(
			МассивФайловДанных));
		СтруктураВозврата.Вставить("СтруктураДвоичныхДанныхИзвещений", ПреобразоватьМассивФайловВДвоичныеДанные(
			МассивФайловИзвещений));
			
		МассивВсехФайлов = НайтиФайлы(ПапкаДляРаспаковки, "*.*", Истина);
		ДанныеФайлов = Новый Соответствие;
		Для Каждого Файл Из МассивВсехФайлов Цикл
			ДвоичныеДанныеФайла = Новый ДвоичныеДанные(Файл.ПолноеИмя);
			СсылкаНаДанныеФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, Новый УникальныйИдентификатор);
			ДанныеФайлов.Вставить(Файл.Имя, СсылкаНаДанныеФайла);
		КонецЦикла;
		УдалитьФайлы(ПапкаДляРаспаковки);
		СтруктураВозврата.Вставить("ФайлыПакета", ДанныеФайлов);

		Возврат СтруктураВозврата;
		
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
			+ НСтр("ru = ' (подробности см. в Журнале регистрации).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'распаковка пакета ЭД'"), ТекстОшибки, ТекстСообщения);
		
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

// Функция, добавляющая данные по распакованному пакету электронных документов.
//
// Параметры:
//  ПакетЭД - ДокументСсылка.ПакетЭД, пакет электронных документов, по которому необходимо добавить данные. 
//  СтруктураДанныхПодписей - Структура, связывающая двоичные данные файла данных и двоичные данные файла электронной цифровой подписи.
//  СтруктураДанных - Структура, связывающая имена файлов и их двоичные данные.
//  СоответствиеФайлПараметры - Соответствие, связывающее имена файлов данных и имена файлов электронных цифровых подписей.
//  ФайлыПакета - Соответствие - Содержит данные файлов пакета
//    * Ключ - Строка - Имя файла
//    * Значение - Строка - Ссылка на временное хранилище двоичных данных файла
//
Функция ДобавитьДанныеПоПакетуЭД(ПакетЭД,
								СтруктураДанныхПодписей,
								СтруктураДанных,
								СоответствиеФайлПараметры,
								ФайлыПакета,
								ФлагОшибки = Ложь,
								ЕстьКриптосредствоНаКлиенте = Неопределено,
								СоответствиеЭДИПодписей = Неопределено) Экспорт
								
	УстановитьПривилегированныйРежим(Истина);
	
	ЭтоПроизвольныйЭД = СоответствиеФайлПараметры.Получить("ЭтоПроизвольныйЭД");
	
	ПараметрыПакетаЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПакетЭД, "ПрофильНастроекЭДО, СпособОбменаЭД, НастройкаЭДО,
		|Отправитель, Получатель, Организация, Контрагент, ВерсияФорматаПакета");
	
	МассивДобавленныхФайлов = Новый Массив;
	// Попытаемся получить настройки криптографии.
	// Если неудачно, значит средства криптографии не установлены на АРМ
	Если ВыполнятьКриптооперацииНаСервере() Тогда
		МенеджерКриптографии = ПолучитьМенеджерКриптографии();
	Иначе
		МенеджерКриптографии = Неопределено;
	КонецЕсли;
	
	Если НЕ ЕстьКриптосредствоНаКлиенте = Истина И СтруктураДанныхПодписей.Количество() > 0
		И МенеджерКриптографии = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru = 'Ошибка распаковки пакета:
		|%1
		|Пакет содержит электронные цифровые подписи. Для распаковки требуется наличие криптосредства на компьютере.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ПакетЭД);

		Если НЕ ЕстьКриптосредствоНаКлиенте = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		ЭлектронныеДокументыСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(ТекстСообщения, 2, УровеньЖурналаРегистрации.Информация);
		ФлагОшибки = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураПодписей = СоответствиеФайлПараметры.Получить(СтруктураДанных.ИмяФайла);
	Попытка
		НачатьТранзакцию();
		
		ПакетЭДОбъект = ПакетЭД.ПолучитьОбъект();
		ПапкаДляРасшифровки = ЭлектронныеДокументыСлужебный.РабочийКаталог("dec", ПакетЭД.Ссылка.УникальныйИдентификатор());
		
		Если ПолучитьФайлДанныхДляОбработки(СтруктураДанных, ПапкаДляРасшифровки, ЭтоПроизвольныйЭД) Тогда
		
			Если ЭтоПроизвольныйЭД <> Истина Тогда
				ФайлыРасшифровки = НайтиФайлы(ПапкаДляРасшифровки, "*.xml");
				Если ФайлыРасшифровки.Количество() > 0 Тогда
					ЭтоПроизвольныйЭД = Ложь;
					ФайлСДанными = ФайлыРасшифровки[0];
					Попытка
						СтруктураФайлаЭД = ЭлектронныеДокументыВнутренний.ПрочитатьШапкуФайлаCMLПоXDTO(ФайлСДанными.ПолноеИмя);
						// Xsd-схема Счета-фактуры не позволяет передавать НомерЭД,
						// в этом случае возьмем НомерЭД из карточки транспортной информации.
						КодРегламента = "";
						Если СтруктураПодписей.Свойство("КодРегламента", КодРегламента) И ЗначениеЗаполнено(КодРегламента) Тогда
							СтруктураФайлаЭД.НомерЭД = СтруктураПодписей.НомерЭД;
						КонецЕсли;
						
						СтруктураФайлаЭД.Вставить("НаправлениеЭД", ОпределитьНаправление(СтруктураФайлаЭД));
						
						// Организацию и контрагента берем из пакета, т.к. для входящих и исходящих файлов они меняются местами
						СтруктураФайлаЭД.Вставить("Организация", ПараметрыПакетаЭД.Организация);
						СтруктураФайлаЭД.Вставить("Контрагент",  ПараметрыПакетаЭД.Контрагент);
						
					Исключение
						ЭтоПроизвольныйЭД = Истина;
					КонецПопытки;
				Иначе
					ЭтоПроизвольныйЭД = Истина;
				КонецЕсли;
			КонецЕсли;
			
			СтруктураПараметров = Новый Структура;
			
			ДопДанные = "";
			ДопПараметры = "";
			ДопИнформация = Неопределено;
			Если СтруктураПодписей.Свойство("ДопДанные", ДопДанные) И ТипЗнч(ДопДанные) = Тип("Структура") И ДопДанные.Количество() > 0 Тогда
				ИмяФайлаДопДанных = "";
				Если ДопДанные.Свойство("ФайлДопДанных", ИмяФайлаДопДанных) Тогда
					СтруктураПараметров.Вставить("ФайлДопДанных", ФайлыПакета.Получить(ИмяФайлаДопДанных));
				КонецЕсли;
				Если ДопДанные.Свойство("ДопПараметры", ДопПараметры) И ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
					ДопПараметры.Свойство("Комментарий", ДопИнформация);
				КонецЕсли;
			КонецЕсли;
			
			// В присоединенные файлы к документу БД поместить файл с данными, подпись к нему,
			// указать его в табличной части транспортного пакета.
			СтруктураПараметровПоиска = Новый Структура;
			СтруктураПараметровПоиска.Вставить("УникальныйИД",  СтруктураПодписей.УникальныйИД);
			СтруктураПараметровПоиска.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Входящий);
			СтруктураПараметровПоиска.Вставить("ВидЭД",
				?(ЭтоПроизвольныйЭД, Перечисления.ВидыЭД.ПроизвольныйЭД, СтруктураФайлаЭД.ВидЭД));
			
			ДобавленныйФайл = ЭлектронныеДокументыСлужебный.ОпределитьЭлектронныйДокумент(СтруктураПараметровПоиска);
			
			Если НЕ ЭтоПроизвольныйЭД Тогда
				ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ФайлСДанными.ПолноеИмя);
				ФайлСДаннымиСсылка = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, Новый УникальныйИдентификатор);
				СтруктураПараметров.Вставить("ФайлДанныхСсылка", ФайлСДаннымиСсылка);
				ОбъектВладелец = ?(СтруктураФайлаЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров, ПараметрыПакетаЭД.НастройкаЭДО,
					ОпределитьОбъектПривязки(СтруктураФайлаЭД));
				
				Если ЭлектронныеДокументыПовтИсп.ИспользуетсяДополнительнаяАналитикаКонтрагентовСправочникПартнеры() Тогда
					Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыПакетаЭД.Контрагент, "Партнер");
					СтруктураФайлаЭД.Вставить("Партнер", Партнер);
				КонецЕсли;
			
				Если ОбъектВладелец <> Неопределено Тогда
					СтруктураПараметров.Вставить("ВладелецЭД", ОбъектВладелец);
				КонецЕсли;
				СтруктураЭД = ЭлектронныеДокументыВнутренний.РазобратьФайлДанных(СтруктураПараметров);
				
				// Xsd-схема счета-фактуры не позволяет передавать НомерЭД,
				// в этом случае возьмем НомерЭД из карточки транспортной информации.
				КодРегламента = "";
				Если СтруктураПодписей.Свойство("КодРегламента", КодРегламента) И ЗначениеЗаполнено(КодРегламента) Тогда
					СтруктураЭД.Вставить("НомерЭД", СтруктураПодписей.НомерЭД);
				КонецЕсли;
				
				НовыйДокумент = Неопределено;
				Если НЕ (СтруктураЭД.Свойство("ВладелецЭД", НовыйДокумент) И ЗначениеЗаполнено(НовыйДокумент)) Тогда
					ФлагОшибки = Истина;
				КонецЕсли;
			Иначе
				МаскаФайлаДанных = СтрЗаменить(СтруктураДанных.ИмяФайла, СтруктураДанных.ИмяФайлаБезРасширения, "*");
				ФайлыРасшифровки = НайтиФайлы(ПапкаДляРасшифровки, МаскаФайлаДанных);
				Если ФайлыРасшифровки.Количество() > 0 Тогда
					ФайлСДанными = ФайлыРасшифровки[0];
					СтруктураФайлаЭД = Новый Структура;
					СтруктураФайлаЭД.Вставить("ВидЭД",                          Перечисления.ВидыЭД.ПроизвольныйЭД);
					СтруктураФайлаЭД.Вставить("НомерЭД",                        СтруктураПодписей.НомерЭД);
					СтруктураФайлаЭД.Вставить("Организация",                    ПараметрыПакетаЭД.Организация);
					СтруктураФайлаЭД.Вставить("Контрагент",                     ПараметрыПакетаЭД.Контрагент);
					СтруктураФайлаЭД.Вставить("НомерВерсииЭД",                  0);
					СтруктураФайлаЭД.Вставить("НомерДокументаОтправителя",      "");
					СтруктураФайлаЭД.Вставить("ДатаДокументаОтправителя",       "");
					СтруктураФайлаЭД.Вставить("ДатаФормированияЭДОтправителем", "");
					
					СтрокаСообщения = СоответствиеФайлПараметры.Получить("Текст");
					Попытка
						Если ТипЗнч(ДобавленныйФайл) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы")
							И ЗначениеЗаполнено(ДобавленныйФайл) И ЗначениеЗаполнено(ДобавленныйФайл.ВладелецФайла) Тогда
							ДокументСообщение = ДобавленныйФайл.ВладелецФайла.ПолучитьОбъект();
						Иначе
							ДокументСообщение = Документы.ПроизвольныйЭД.СоздатьДокумент();
							ДокументСообщение.Направление     = Перечисления.НаправленияЭД.Входящий;
							ДокументСообщение.СтатусДокумента = Перечисления.СтатусыЭД.Получен;
							ДокументСообщение.Дата            = ТекущаяДатаСеанса();
							ДокументСообщение.Прочитан        = Ложь;
						КонецЕсли;
						ДокументСообщение.Контрагент      = ПараметрыПакетаЭД.Контрагент;
						ДокументСообщение.Организация     = ПараметрыПакетаЭД.Организация;
						ДокументСообщение.Текст           = СтрокаСообщения;
						УникальныйИДОснования = Неопределено;
						Если ЗначениеЗаполнено(ДопПараметры) И ДопПараметры.Свойство("УникальныйИДОснования", УникальныйИДОснования)
							И ЗначениеЗаполнено(УникальныйИДОснования) Тогда
							Запрос = Новый Запрос;
							Запрос.Текст =
								"ВЫБРАТЬ РАЗЛИЧНЫЕ
								|	ПроизвольныйЭД.Ссылка
								|ИЗ
								|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
								|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПроизвольныйЭД КАК ПроизвольныйЭД
								|		ПО ЭДПрисоединенныеФайлы.ВладелецФайла = ПроизвольныйЭД.Ссылка
								|ГДЕ
								|	ЭДПрисоединенныеФайлы.УникальныйИД = &УникальныйИДОснования
								|	И ЭДПрисоединенныеФайлы.Контрагент = &Контрагент
								|	И ЭДПрисоединенныеФайлы.Организация = &Организация";
							Запрос.УстановитьПараметр("УникальныйИДОснования", УникальныйИДОснования);
							Запрос.УстановитьПараметр("Контрагент", ПараметрыПакетаЭД.Контрагент);
							Запрос.УстановитьПараметр("Организация", ПараметрыПакетаЭД.Организация);
							Выборка = Запрос.Выполнить().Выбрать();
							Если Выборка.Следующий() Тогда
								ДокументСообщение.ДокументОснование = Выборка.Ссылка;
							КонецЕсли;
						КонецЕсли;
						Если СтруктураПодписей.Свойство("ТипДокумента") Тогда
							ДокументСообщение.ТипДокумента = СтруктураПодписей.ТипДокумента;
						Иначе
							ДокументСообщение.ТипДокумента = Перечисления.ТипыЭД.Прочее;
						КонецЕсли;
						ТребуетсяПодтверждение = Истина;
						Если СтруктураПодписей.Свойство("ТребуетсяПодтверждение") Тогда
							ТребуетсяПодтверждение = СтруктураПодписей.ТребуетсяПодтверждение;
						КонецЕсли;
						ДокументСообщение.ТребуетсяПодтверждение = ТребуетсяПодтверждение;
						ДокументСообщение.Записать();
						
						ОбъектВладелец = ДокументСообщение.Ссылка;
						СтруктураЭД = Новый Структура;
						СтруктураЭД.Вставить("ВладелецЭД", ОбъектВладелец);
						СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.ПроизвольныйЭД);
						СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Входящий);
						Если НЕ ЗначениеЗаполнено(ДобавленныйФайл) Тогда
							НовыйДокумент = ОбъектВладелец;
						КонецЕсли;
					Исключение
						ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации)'");
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
						КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'создание произвольного ЭД'"),
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
						ФлагОшибки = Истина;
					КонецПопытки;
				Иначе
					ФлагОшибки = истина;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ФлагОшибки Тогда
				Если НЕ ЗначениеЗаполнено(ДобавленныйФайл) Тогда
					
					АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(СтруктураДанных.ДвоичныеДанные);
					СтруктураФайлаЭД.Вставить("УникальныйИД", СтруктураПодписей.УникальныйИД);
					
					ПодписиФайлаДанных = СтруктураПодписей.Подписи;
					СтруктураФайла = ЭлектронныеДокументыСлужебный.ПолучитьСтруктуруФайла(СтруктураДанных.ИмяФайла);
					
					ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(
																НовыйДокумент,
																СтруктураФайла.ИмяБезРасширения,
																СтруктураФайла.Расширение,
																ТекущаяДатаСеанса(),
																ТекущаяДатаСеанса(),
																АдресВоВременномХранилище,
																Неопределено,
																,
																Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());
					
					Ответственный = ЭлектронныеДокументыПереопределяемый.ПолучитьОтветственногоПоЭД(ПараметрыПакетаЭД.Контрагент,
						ПараметрыПакетаЭД.НастройкаЭДО);
					
					ЭДВладелец = "";
					Если ЗначениеЗаполнено(ДобавленныйФайл) Тогда
						Если СтруктураФайлаЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
						ИЛИ СтруктураФайлаЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
							ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ;
						Иначе
							ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД;
						КонецЕсли;
						
						// Определяем версию регламента 1С по коду регламента.
						ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия10;
						Если КодРегламента = "Formalized" ИЛИ КодРегламента = "Invoice" Тогда
							ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20;
						КонецЕсли;
						
						СтруктураЭД.Вставить("Отправитель",                     ПараметрыПакетаЭД.Отправитель);
						СтруктураЭД.Вставить("Получатель",                      ПараметрыПакетаЭД.Получатель);
						СтруктураЭД.Вставить("Ответственный",                   Ответственный);
						СтруктураЭД.Вставить("ПрофильНастроекЭДО",              ПараметрыПакетаЭД.ПрофильНастроекЭДО);
						СтруктураЭД.Вставить("СоглашениеЭД",                    ПараметрыПакетаЭД.НастройкаЭДО);
						СтруктураЭД.Вставить("УникальныйИД",                    СтруктураФайлаЭД.УникальныйИД);
						СтруктураЭД.Вставить("ТипЭлементаВерсииЭД",             ТипЭлементаВерсииЭД);
						СтруктураЭД.Вставить("ВерсияРегламентаЭДО",             ВерсияРегламентаЭДО);
						СтруктураЭД.Вставить("ДатаФормированияЭДОтправителем",  СтруктураФайлаЭД.ДатаФормированияЭДОтправителем);
						СтруктураЭД.Вставить("НаименованиеФайла",               СтруктураФайла.ИмяБезРасширения);
						СтруктураЭД.Вставить("ВерсияФорматаПакета",             ПараметрыПакетаЭД.ВерсияФорматаПакета);
						СтруктураЭД.Вставить("ДополнительнаяИнформация",        ДопИнформация);
						Если СтруктураФайлаЭД.Свойство("ЭлектронныйДокументВладелец", ЭДВладелец) Тогда
							СтруктураЭД.Вставить("ЭлектронныйДокументВладелец", ЭДВладелец);
							СтруктураЭД.Вставить("НомерДокументаОтправителя", ЭДВладелец.НомерДокументаОтправителя);
							СтруктураЭД.Вставить("ДатаДокументаОтправителя", ЭДВладелец.ДатаДокументаОтправителя);
						КонецЕсли;
						Организация = Неопределено;
						Если НЕ (СтруктураЭД.Свойство("Организация", Организация) И ЗначениеЗаполнено(Организация)) Тогда
							СтруктураЭД.Вставить("Организация", ПараметрыПакетаЭД.Организация);
						КонецЕсли;
						Контрагент = Неопределено;
						Если НЕ (СтруктураЭД.Свойство("Контрагент", Контрагент) И ЗначениеЗаполнено(Контрагент)) Тогда
							СтруктураЭД.Вставить("Контрагент", ПараметрыПакетаЭД.Контрагент);
						КонецЕсли;
						СтатусЭД = Неопределено;
						Если НЕ (СтруктураЭД.Свойство("СтатусЭД", СтатусЭД) И ЗначениеЗаполнено(СтатусЭД)) Тогда
							СтруктураЭД.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Получен);
						КонецЕсли;
						УстановитьНовуюВерсиюЭД(НовыйДокумент, ДобавленныйФайл);
						ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураЭД);
						
						ФайлДопДанныхСсылка = "";
						Если СтруктураПараметров.Свойство("ФайлДопДанных", ФайлДопДанныхСсылка)
							И ЗначениеЗаполнено(ФайлДопДанныхСсылка) Тогда
							
							СтруктураФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ИмяФайлаДопДанных);
													
							ДобавленныйДопФайл = ПрисоединенныеФайлы.ДобавитьФайл(
																			НовыйДокумент,
																			СтруктураФайла.ИмяБезРасширения,
																			СтрЗаменить(СтруктураФайла.Расширение, ".", ""),
																			ТекущаяДатаСеанса(),
																			ТекущаяДатаСеанса(),
																			ФайлДопДанныхСсылка,
																			Неопределено,
																			,
																			Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());
							
							Если ЗначениеЗаполнено(ДобавленныйДопФайл) Тогда
								ВспомогательнаяСтруктура = Новый Структура;
								ВспомогательнаяСтруктура.Вставить("ВидЭД", Перечисления.ВидыЭД.ДопДанные);
								ВспомогательнаяСтруктура.Вставить("Контрагент", ПараметрыПакетаЭД.Контрагент);
								ВспомогательнаяСтруктура.Вставить("Организация", ПараметрыПакетаЭД.Организация);
								ВспомогательнаяСтруктура.Вставить("ВладелецЭД", НовыйДокумент);
								ВспомогательнаяСтруктура.Вставить("ПрофильНастроекЭДО", ПараметрыПакетаЭД.ПрофильНастроекЭДО);
								ВспомогательнаяСтруктура.Вставить("СоглашениеЭД", ПараметрыПакетаЭД.НастройкаЭДО);
								ВспомогательнаяСтруктура.Вставить("НомерЭД",      СтруктураЭД.НомерЭД);
								ВспомогательнаяСтруктура.Вставить("УникальныйИД", СтруктураФайлаЭД.УникальныйИД);
								ВспомогательнаяСтруктура.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Входящий);
								ВспомогательнаяСтруктура.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ДополнительныйЭД);
								ВспомогательнаяСтруктура.Вставить("ЭлектронныйДокументВладелец", ДобавленныйФайл);
								ВспомогательнаяСтруктура.Вставить("ДатаФормированияЭДОтправителем", СтруктураЭД.ДатаДокументаОтправителя);
								ВспомогательнаяСтруктура.Вставить("НаименованиеФайла", СтруктураФайла.ИмяБезРасширения);
								ВспомогательнаяСтруктура.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Получен);
								
								ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйДопФайл, ВспомогательнаяСтруктура);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ЭДВладелец)
						И (ДобавленныйФайл.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
							ИЛИ ДобавленныйФайл.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
							ИЛИ ДобавленныйФайл.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель)
						И ЭДВладелец.СтатусЭД <> Перечисления.СтатусыЭД.ПолученоПодтверждение Тогда
						
						СтруктураПараметровЭДВладельца = Новый Структура;

						ДопустимыйСтатусЭД = ЭлектронныеДокументыСлужебный.ПолучитьДопустимыйСтатусЭД(
							Перечисления.СтатусыЭД.ПолученоПодтверждение, ЭДВладелец);
						СтруктураПараметровЭДВладельца.Вставить("СтатусЭД", ДопустимыйСтатусЭД);
						ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ЭДВладелец, СтруктураПараметровЭДВладельца, Ложь);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ПодписиФайлаДанных) Тогда
						МассивПодписей = Новый Массив;
						ПодписиДобавлены = Ложь;
						Для Каждого ИмяФайлаПодписи Из ПодписиФайлаДанных Цикл
							ДвоичныеДанныеПодписи = ПолучитьИзВременногоХранилища(ФайлыПакета.Получить(ИмяФайлаПодписи));
							МассивПодписей.Добавить(ДвоичныеДанныеПодписи);
							Если ВыполнятьКриптооперацииНаСервере() И МенеджерКриптографии <> Неопределено Тогда
								СертификатыПодписи = МенеджерКриптографии.ПолучитьСертификатыИзПодписи(ДвоичныеДанныеПодписи);
								Если СертификатыПодписи.Количество() <> 0 Тогда
									Сертификат = СертификатыПодписи[0];
									ДатаУстановкиПодписи = ЭлектронныеДокументыСлужебный.ДатаУстановкиПодписи(ДвоичныеДанныеПодписи);
									ДатаУстановкиПодписи = ?(ЗначениеЗаполнено(ДатаУстановкиПодписи), ДатаУстановкиПодписи, ТекущаяДатаСеанса());
									ОтпечатокBase64 = Base64Строка(Сертификат.Отпечаток);
									ПредставлениеПользователя = ЭлектроннаяПодписьКлиентСервер.ПредставлениеСубъекта(Сертификат);
									ЗанестиИнформациюОПодписи(
																	ДобавленныйФайл,
																	ДвоичныеДанныеПодписи,
																	ОтпечатокBase64,
																	ДатаУстановкиПодписи,
																	"",
																	ИмяФайлаПодписи,
																	ПредставлениеПользователя,
																	Сертификат.Выгрузить());
									ПодписиДобавлены = Истина;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						Если ПодписиДобавлены Тогда
							ОпределитьСтатусыПодписей(ДобавленныйФайл);
						ИначеЕсли НЕ СоответствиеЭДИПодписей = Неопределено Тогда
							СоответствиеЭДИПодписей.Вставить(ДобавленныйФайл, МассивПодписей);
						КонецЕсли;
					КонецЕсли;
					
					//Если вид документа Торг-12 (титул продавца), направление входящий,
					// у него заполнен реквизит ЭДВладелец и статус документа - обмен завершен
					// то необходимо у документов на основании которых он был введен - установить статус "Обмен завершен с исправлением"
					
					Если (ДопустимыйСтатусЭД = Перечисления.СтатусыЭД.ПолученоПодтверждение) Тогда
						
						УстановитьСостояниеЗавершен(ДобавленныйФайл, Перечисления.НаправленияЭД.Исходящий);
						
					КонецЕсли;
					
					МассивДобавленныхФайлов.Добавить(ДобавленныйФайл);
				КонецЕсли;
				
				// Добавим информацию о присоединенном файле в документ пакета электронных документов
				Для Каждого ДобавленныйФайл Из МассивДобавленныхФайлов Цикл
					
					НовыйЭлектронныйДокумент = ПакетЭДОбъект.ЭлектронныеДокументы.Добавить();
					НовыйЭлектронныйДокумент.ЭлектронныйДокумент = ДобавленныйФайл;
					НовыйЭлектронныйДокумент.ОбъектВладелец      = ДобавленныйФайл.ВладелецФайла;
					
				КонецЦикла;
				
				Если МенеджерКриптографии <> Неопределено И НЕ ЭтоПроизвольныйЭД Тогда
					ПодтвержденныеДокументы = ЭлектронныеДокументыСлужебный.ОбработатьПодтвержденияДокументов(ФайлыПакета,
																											  СоответствиеФайлПараметры,
																											  ПакетЭДОбъект);
				КонецЕсли;
				
				ПакетЭДОбъект.Записать();
			КонецЕсли;
		Иначе
			ФлагОшибки = Истина;
		КонецЕсли;
		Если ФлагОшибки Тогда
			ОтменитьТранзакцию();
			
			МассивДобавленныхФайлов = Неопределено;
		Иначе
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	Исключение
		ОтменитьТранзакцию();
		
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
			+ НСтр("ru = ' (подробности см. в Журнале регистрации).'");
		ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'распаковка пакета ЭД'"),
										  ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
										  ТекстСообщения);
		ФлагОшибки = Истина;
		МассивДобавленныхФайлов = Неопределено;
	КонецПопытки;
	
	УдалитьФайлы(ПапкаДляРасшифровки);
	
	Возврат МассивДобавленныхФайлов;
	
КонецФункции

// Устанавливает статус документа ПакетЭД.
//
// Параметры:
//  Пакет - Ссылка на документ ПакетЭД
//  СтатусПакета - ссылка на перечисление СтатусыПакетовЭД
//
Процедура УстановитьСтатусПакета(Пакет, СтатусПакета) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПакетЭДОбъект = Пакет.ПолучитьОбъект();
	ПакетЭДОбъект.СтатусПакета = СтатусПакета;
	ПакетЭДОбъект.Записать();
	
КонецПроцедуры

// Только для внутреннего использования
Процедура ПолучитьДанныеВыписки(Знач ЭД, СсылкаНаХранилище, МассивСчетов = Неопределено, Организация = Неопределено, СоглашениеЭД = Неопределено) Экспорт
	
	Перем ТекстВыписки;
	
	Если Не ЭлектронныеДокументыСлужебный.УстановленныеПодписиВалидны(ЭД) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭД, "Организация, СоглашениеЭД, ВидЭД");
	
	Если НЕ РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.ВыпискаБанка Тогда
		Возврат
	КонецЕсли;
	
	Организация  = РеквизитыЭД.Организация;
	СоглашениеЭД = РеквизитыЭД.СоглашениеЭД;
	
	ЭлектронныеДокументы.ПолучитьДанныеВыпискиБанкаТекстовыйФормат(ЭД, СсылкаНаХранилище, МассивСчетов);
	
КонецПроцедуры

// Выполняет добавление ЭП в электронный документ.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка на элемент справочника, содержащего в себе электронный документ,
//  ДанныеПодписи - Структура параметров ЭП.
//
Процедура ДобавитьПодпись(ПрисоединенныйФайл, ДанныеПодписи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СпособОбменаЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрисоединенныйФайл.ПрофильНастроекЭДО, "СпособОбменаЭД");
	
	Попытка
		НачатьТранзакцию();
		ПрисоединенныеФайлы.ЗанестиИнформациюОднойПодписи(ПрисоединенныйФайл, ДанныеПодписи);
		Если ВыполнятьКриптооперацииНаСервере() Тогда
			ОпределитьСтатусыПодписей(ПрисоединенныйФайл);
		КонецЕсли;
		Если ЭлектронныйДокументПолностьюПодписан(ПрисоединенныйФайл) Тогда
			
			НаправлениеЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрисоединенныйФайл, "НаправлениеЭД");
			Если НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
				НовыйСтатусЭД = ЭлектронныеДокументыСлужебный.ПолучитьДопустимыйСтатусЭД(
																		Перечисления.СтатусыЭД.ПолностьюПодписан,
																		ПрисоединенныйФайл);
			Иначе
				НовыйСтатусЭД = ЭлектронныеДокументыСлужебный.ПолучитьДопустимыйСтатусЭД(
																		Перечисления.СтатусыЭД.Подписан,
																		ПрисоединенныйФайл);
			КонецЕсли;
			
			СтруктураПараметров = Новый Структура("СтатусЭД", НовыйСтатусЭД);
			ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ПрисоединенныйФайл, СтруктураПараметров, Ложь);
			ЭлектронныеДокументыПереопределяемый.НазначенСтатусПодписан(ПрисоединенныйФайл);
			
		Иначе
			
			// В рамках интеркампани, документ должен иметь 2 подписи,
			// т.к. электронный документ подписан не полностью, то достаточно проверить,
			// что количество ЭП отлично от 0.
			ДокументИнтеркампаниЧастичноПодписан = (ПрисоединенныйФайл.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани
													И ПрисоединенныйФайл.ЭлектронныеПодписи.Количество() > 0);
			ЭтоПлатежныйДокумент = ПрисоединенныйФайл.ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение
				ИЛИ ПрисоединенныйФайл.ВидЭД = Перечисления.ВидыЭД.ПлатежноеТребование;
			
			Если ДокументИнтеркампаниЧастичноПодписан ИЛИ ЭтоПлатежныйДокумент Тогда
				
				НовыйСтатусЭД = ЭлектронныеДокументыСлужебный.ПолучитьДопустимыйСтатусЭД(
					Перечисления.СтатусыЭД.ЧастичноПодписан, ПрисоединенныйФайл);
				
				СтруктураПараметров = Новый Структура();
				СтруктураПараметров.Вставить("СтатусЭД", НовыйСтатусЭД);
				СтруктураПараметров.Вставить("Изменил", Пользователи.АвторизованныйПользователь());
				ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ПрисоединенныйФайл, СтруктураПараметров, Ложь);
				
			КонецЕсли;
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ШаблонСообщения = НСтр("ru = 'Ошибка подписи электронного документа %1'");
		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%1", ПрисоединенныйФайл);
		ВидОперации = НСтр("ru = 'установка подписи ЭП'");
		ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ИнформацияОбОшибке, ТекстСообщения);
		ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	КонецПопытки;
	
КонецПроцедуры

// Выполняет действия с ЭД после установки электронной подписи.
//
// Параметры:
//   МассивЭДкОбновлениюСтатуса - Массив - элементы - СправочникСсылка.ЭДПрисоединенныеФайлы.
//
Процедура ДействияПослеПодписанияЭДНаСервере(МассивЭДкОбновлениюСтатуса) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого ПрисоединенныйФайл Из МассивЭДкОбновлениюСтатуса Цикл
		СпособОбменаЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрисоединенныйФайл.ПрофильНастроекЭДО, "СпособОбменаЭД");
		Попытка
			НачатьТранзакцию();
			
			// Подпись установленная сейчас является валидной по-умолчанию
			УстановитьСтатусПоследнейПодписи(ПрисоединенныйФайл); 

			Если ЭлектронныйДокументПолностьюПодписан(ПрисоединенныйФайл) Тогда
				
				НаправлениеЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрисоединенныйФайл, "НаправлениеЭД");
				Если НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
					НовыйСтатусЭД = ЭлектронныеДокументыСлужебный.ПолучитьДопустимыйСтатусЭД(
																			Перечисления.СтатусыЭД.ПолностьюПодписан,
																			ПрисоединенныйФайл);
				Иначе
					НовыйСтатусЭД = ЭлектронныеДокументыСлужебный.ПолучитьДопустимыйСтатусЭД(
																			Перечисления.СтатусыЭД.Подписан,
																			ПрисоединенныйФайл);
				КонецЕсли;
				
				СтруктураПараметров = Новый Структура("СтатусЭД", НовыйСтатусЭД);
				ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ПрисоединенныйФайл, СтруктураПараметров, Ложь);
				ЭлектронныеДокументыПереопределяемый.НазначенСтатусПодписан(ПрисоединенныйФайл);
				
			Иначе
				
				// В рамках интеркампани, документ должен иметь 2 подписи,
				// т.к. электронный документ подписан не полностью, то достаточно проверить,
				// что количество ЭП отлично от 0.
				ДокументИнтеркампаниЧастичноПодписан = (ПрисоединенныйФайл.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани
														И ПрисоединенныйФайл.ЭлектронныеПодписи.Количество() > 0);
				ЭтоПлатежныйДокумент = ПрисоединенныйФайл.ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение
					ИЛИ ПрисоединенныйФайл.ВидЭД = Перечисления.ВидыЭД.ПлатежноеТребование;
				
				Если ДокументИнтеркампаниЧастичноПодписан ИЛИ ЭтоПлатежныйДокумент Тогда
					
					НовыйСтатусЭД = ЭлектронныеДокументыСлужебный.ПолучитьДопустимыйСтатусЭД(
						Перечисления.СтатусыЭД.ЧастичноПодписан, ПрисоединенныйФайл);
					
					СтруктураПараметров = Новый Структура();
					СтруктураПараметров.Вставить("СтатусЭД", НовыйСтатусЭД);
					СтруктураПараметров.Вставить("Изменил", Пользователи.АвторизованныйПользователь());
					ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ПрисоединенныйФайл, СтруктураПараметров, Ложь);
					
				КонецЕсли;
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ШаблонСообщения = НСтр("ru = 'Ошибка подписи электронного документа %1'");
			ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%1", ПрисоединенныйФайл);
			Операция = НСтр("ru = 'установка подписи ЭП'");
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			ОбработатьИсключениеПоЭДНаСервере(Операция, ПодробноеПредставлениеОшибки, ТекстСообщения);
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Только для внутреннего использования
Функция СоздатьИОтправитьДокументыПЭД(Знач ДобавленныеФайлы,
									  Знач ПризнакПодписи,
									  Знач СоотвСоглашенийИПараметровСертификатов = Неопределено) Экспорт
	
	МассивСтруктурПакетовЭД = ЭлектронныеДокументыСлужебный.СоздатьДокументыПакетовЭД(ДобавленныеФайлы, ПризнакПодписи);
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КолПодготовленных", МассивСтруктурПакетовЭД.Количество());
	КолОтправленных = 0;
	МассивПакетовДляОбработкиНаКлиенте = Новый Массив;
	МассивПакетовДляОтправкиСКлиента   = Новый Массив;
	Если МассивСтруктурПакетовЭД.Количество() > 0 Тогда
		Для Каждого СтруктураПЭД Из МассивСтруктурПакетовЭД Цикл
			Если СтруктураПЭД.Свойство("ОтправкаСКлиента") Тогда
				МассивПакетовДляОтправкиСКлиента.Добавить(СтруктураПЭД.ПЭД);
				Продолжить;
			КонецЕсли;
			Если СтруктураПЭД.ТребуетсяШифрованиеНаКлиенте Тогда
				МассивПакетовДляОбработкиНаКлиенте.Добавить(СтруктураПЭД.ПЭД);
				Продолжить;
			КонецЕсли;
			Если ЭлектронныеДокументыСлужебный.НемедленнаяОтправкаЭД() Тогда
				МассивПЭД = Новый Массив;
				МассивПЭД.Добавить(СтруктураПЭД.ПЭД);
				КолОтправленных = КолОтправленных + ОтправкаПакетовЭД(МассивПЭД, СоотвСоглашенийИПараметровСертификатов);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	СтруктураРезультата.Вставить("КолОтправленных",                    КолОтправленных);
	СтруктураРезультата.Вставить("МассивПакетовДляОбработкиНаКлиенте", МассивПакетовДляОбработкиНаКлиенте);
	Если ЭлектронныеДокументыСлужебный.НемедленнаяОтправкаЭД() И МассивПакетовДляОтправкиСКлиента.Количество() > 0 Тогда
		ДанныеДляОтправкиЧерезДопОбработку = ДанныеДляОтправкиВБанк(
			МассивПакетовДляОтправкиСКлиента, Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку);
		СтруктураРезультата.Вставить("ДанныеДляОтправкиЧерезДопОбработку", ДанныеДляОтправкиЧерезДопОбработку);
		ДанныеДляОтправкиiBank2 = ДанныеДляОтправкиВБанк(
			МассивПакетовДляОтправкиСКлиента, Перечисления.ПрограммыБанка.iBank2);
		СтруктураРезультата.Вставить("ДанныеДляОтправкиiBank2", ДанныеДляОтправкиiBank2);
	КонецЕсли;
	Возврат СтруктураРезультата;
	
КонецФункции

// Только для внутреннего использования
Функция ОтправкаПакетовЭД(Знач МассивПакетовЭД, Знач СоотвСоглашенийИПараметровСертификатов, ТекстСообщения = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатОтправки = 0;
	Для Каждого ПакетЭД Из МассивПакетовЭД Цикл
		// Если электронный документ по каким-то причинам отправлен быть не может,
		// то не надо приостанавливать всю цепочку.
		
		НачатьТранзакцию();
		
		ЭлектронныеДокументыСлужебный.ОбновитьСтатусыДокументовПакетаЭД(ПакетЭД,
																		Перечисления.СтатусыПакетовЭД.Отправлен,
																		ТекущаяДатаСеанса());
		Если Не ПакетЭД.СтатусПакета = Перечисления.СтатусыПакетовЭД.Отправлен Тогда
			ОтменитьТранзакцию();
			Продолжить;
			
		КонецЕсли;
		
		Попытка
			
			РеквизитыПакетаЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПакетЭД,
				"ПрофильНастроекЭДО, НастройкаЭДО, СпособОбменаЭД, АдресРесурсаКонтрагента, ЭлектронныеДокументы");
			
			МассивПрофилейНастроекЭДО = Новый Массив;
			МассивПрофилейНастроекЭДО.Добавить(РеквизитыПакетаЭД.ПрофильНастроекЭДО);
			
			ТипОтправки = РеквизитыПакетаЭД.СпособОбменаЭД;
			АдресКаталогаОтправки = СформироватьФайлыДляОтправки(ПакетЭД);
			Если ПустаяСтрока(АдресКаталогаОтправки) Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
			Если ТипОтправки = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту Тогда
				ОтправленТекущийПакет = ОтправитьЭлектронноеПисьмо(ПакетЭД, АдресКаталогаОтправки);
				РезультатОтправки = РезультатОтправки + ОтправленТекущийПакет;
				Если ОтправленТекущийПакет = 0 Тогда
					ОтменитьТранзакцию();
					УдалитьФайлы(АдресКаталогаОтправки);
					Продолжить;
				КонецЕсли;
				
				ИзменитьСостояниеЭДДокументовОснования(РеквизитыПакетаЭД);
				
			ИначеЕсли ТипОтправки =  Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
				ИЛИ ТипОтправки =  Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО Тогда
				
				СоотвСоглашений = Неопределено;
				Если ТипЗнч(СоотвСоглашенийИПараметровСертификатов) = Тип("Соответствие")
					И СоотвСоглашенийИПараметровСертификатов.Количество() > 0 Тогда
					ПараметрыСертификата = СоотвСоглашенийИПараметровСертификатов.Получить(РеквизитыПакетаЭД.ПрофильНастроекЭДО);
				ИначеЕсли ДоступныПараметрыДляАвторизацииНаСервереОператора(МассивПрофилейНастроекЭДО, СоотвСоглашений) Тогда
					ПараметрыСертификата = СоотвСоглашений.Получить(РеквизитыПакетаЭД.ПрофильНастроекЭДО);
				Иначе
					ОтменитьТранзакцию();
					УдалитьФайлы(АдресКаталогаОтправки);
					Продолжить;
				КонецЕсли;
				Маркер = Неопределено;
				Если Не (РасшифроватьМаркерИзСтруктурыСертификатаНаСервере(ПараметрыСертификата)
					И ПараметрыСертификата.Свойство("МаркерРасшифрованный", Маркер) И ЗначениеЗаполнено(Маркер)) Тогда
					ОтменитьТранзакцию();
					УдалитьФайлы(АдресКаталогаОтправки);
					Продолжить;
				КонецЕсли;
				ФайлыОтправки = НайтиФайлы(АдресКаталогаОтправки, "*");
				КоличествоКОтправке = ФайлыОтправки.Количество();
				
				КоличествоОтправленных = ЭлектронныеДокументыВнутренний.ОтправитьЧерезОператораЭДО(
																	Маркер,
																	АдресКаталогаОтправки,
																	"SendMessage",
																	РеквизитыПакетаЭД.ПрофильНастроекЭДО);
																	
				Если КоличествоОтправленных <> КоличествоКОтправке Тогда
					ШаблонСообщения = Нстр("ru = 'Не удалось отправить оператору ЭДО ""%1"".'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПакетЭД);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					ОтменитьТранзакцию();
					Продолжить;
				Иначе
					РезультатОтправки = РезультатОтправки + КоличествоОтправленных;
				КонецЕсли;
				
				Выборка = РеквизитыПакетаЭД.ЭлектронныеДокументы.Выбрать();
				Если Выборка.Количество() > 0 И Выборка.Следующий() Тогда
					ЭлектронныйДокумент = Выборка.ЭлектронныйДокумент;
					
					Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
						Если Не ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении Тогда
							УстановитьСостояниеЗавершен(ЭлектронныйДокумент, Перечисления.НаправленияЭД.Входящий);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ТипОтправки = Перечисления.СпособыОбменаЭД.ЧерезКаталог Тогда
				
				АдресКаталога = РеквизитыПакетаЭД.АдресРесурсаКонтрагента
					+ ?(Прав(РеквизитыПакетаЭД.АдресРесурсаКонтрагента, 1) <> "\", "\", "");
				КаталогНаДиске = Новый Файл(АдресКаталога);
				Если НЕ КаталогНаДиске.Существует() Тогда
					СоздатьКаталог(АдресКаталога);
				КонецЕсли;
				
				ФайлыОтправки = НайтиФайлы(АдресКаталогаОтправки, "*");
				Для Каждого Файл Из ФайлыОтправки Цикл
					КопироватьФайл(Файл.ПолноеИмя, АдресКаталога + Файл.Имя);
					РезультатОтправки = РезультатОтправки + 1;
				КонецЦикла;
				
				ИзменитьСостояниеЭДДокументовОснования(РеквизитыПакетаЭД);
				
			ИначеЕсли ТипОтправки = Перечисления.СпособыОбменаЭД.ЧерезFTP Тогда
				FTPСоединение = ЭлектронныеДокументыСлужебный.ПолучитьFTPСоединение(РеквизитыПакетаЭД.ПрофильНастроекЭДО);
				Если FTPСоединение = Неопределено Тогда
					ОтменитьТранзакцию();
					УдалитьФайлы(АдресКаталогаОтправки);
					Продолжить;
				КонецЕсли;
				КаталогОтправки = РеквизитыПакетаЭД.АдресРесурсаКонтрагента;
				ЭлектронныеДокументыСлужебный.ПодготовитьПутьFTP(КаталогОтправки);
				ТекстОшибки = "";
				Попытка
					FTPСоединение.УстановитьТекущийКаталог(КаталогОтправки);
				Исключение
					ЭлектронныеДокументыСлужебный.СоздатьКаталогиFTP(FTPСоединение, КаталогОтправки, , ТекстОшибки);
				КонецПопытки;
				Если ЗначениеЗаполнено(ТекстОшибки) Тогда
					ОтменитьТранзакцию();
					УдалитьФайлы(АдресКаталогаОтправки);
					Продолжить;
				КонецЕсли;
				ФайлыОтправки = НайтиФайлы(АдресКаталогаОтправки, "*");
				Для Каждого Файл Из ФайлыОтправки Цикл
					ЭлектронныеДокументыСлужебный.ЗаписатьФайлНаFTP(FTPСоединение, Файл.ПолноеИмя, Файл.Имя, , ТекстОшибки);
					Если ЗначениеЗаполнено(ТекстОшибки) Тогда 
						Прервать;
					КонецЕсли;
					РезультатОтправки = РезультатОтправки + 1;
				КонецЦикла;
				Если ЗначениеЗаполнено(ТекстОшибки) Тогда
					ОтменитьТранзакцию();
					УдалитьФайлы(АдресКаталогаОтправки);
					Продолжить;
				КонецЕсли;
				
				ИзменитьСостояниеЭДДокументовОснования(РеквизитыПакетаЭД);
				
			ИначеЕсли ТипОтправки = Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка Тогда
				
				РеквизитыНастройкиЭДО = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыПакетаЭД.НастройкаЭДО,
					"АдресСервера, РесурсИсходящихДокументов, РесурсВходящихДокументов, ИспользуетсяКриптография, ПрограммаБанка,
					|ИдентификаторОрганизации");
					
				Если Не РеквизитыНастройкиЭДО.ИспользуетсяКриптография
					И (СоотвСоглашенийИПараметровСертификатов = Неопределено
						ИЛИ СоотвСоглашенийИПараметровСертификатов.Получить(РеквизитыПакетаЭД.НастройкаЭДО) = Неопределено) Тогда
					ОтменитьТранзакцию();
					УдалитьФайлы(АдресКаталогаОтправки);
					Продолжить;
				КонецЕсли;
				
				Если РеквизитыНастройкиЭДО.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн
						ИЛИ РеквизитыНастройкиЭДО.ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку
						ИЛИ РеквизитыНастройкиЭДО.ПрограммаБанка = Перечисления.ПрограммыБанка.iBank2 Тогда
					ОтменитьТранзакцию();
					УдалитьФайлы(АдресКаталогаОтправки);
					Продолжить;
				КонецЕсли;
				
				Настройки = Новый Структура("Адрес", РеквизитыНастройкиЭДО.АдресСервера);
				
				Если НЕ РеквизитыНастройкиЭДО.ИспользуетсяКриптография
					И РеквизитыНастройкиЭДО.ПрограммаБанка = Перечисления.ПрограммыБанка.АльфаБанкОнлайн Тогда
					ПараметрыАвторизации = СоотвСоглашенийИПараметровСертификатов.Получить(РеквизитыПакетаЭД.НастройкаЭДО);
					ХэшАвторизации = СтрокаBase64БезBOM(
						ПараметрыАвторизации.Пользователь + ":" + ПараметрыАвторизации.ПарольПользователя);
					Настройки.Вставить("Хэш", ХэшАвторизации);
				КонецЕсли;
				
				Выборка = РеквизитыПакетаЭД.ЭлектронныеДокументы.Выбрать();
				Если Выборка.Количество() > 0 И Выборка.Следующий() Тогда
					ЭД = Выборка.ЭлектронныйДокумент;
					Данные = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(ЭД);
					Если РеквизитыНастройкиЭДО.ПрограммаБанка = Перечисления.ПрограммыБанка.АсинхронныйОбмен Тогда
						Настройки.Вставить("Ресурс", "SendPack");
						ПараметрыАвторизации = СоотвСоглашенийИПараметровСертификатов.Получить(РеквизитыПакетаЭД.НастройкаЭДО);
						Если ПараметрыАвторизации = Неопределено ИЛИ НЕ ПараметрыАвторизации.Свойство("МаркерРасшифрованный")
							ИЛИ НЕ ЗначениеЗаполнено(ПараметрыАвторизации.МаркерРасшифрованный) Тогда
								ОтменитьТранзакцию();
								УдалитьФайлы(АдресКаталогаОтправки);
								Продолжить;
						КонецЕсли;
						ИдентификаторСессии = СтрокаИзДвоичныхДанных(ПараметрыАвторизации.МаркерРасшифрованный);
						Настройки.Вставить("ИдентификаторСессии", ИдентификаторСессии);
						Настройки.Вставить("ИдентификаторОрганизации", РеквизитыНастройкиЭДО.ИдентификаторОрганизации);
					Иначе
						Настройки.Вставить("Ресурс", РеквизитыНастройкиЭДО.РесурсИсходящихДокументов);
					КонецЕсли;
					ФайлыОтправки = НайтиФайлы(АдресКаталогаОтправки, "*");
					ПутьКФайлуОтправки = ФайлыОтправки[0].ПолноеИмя;
					
					ОтветБанка = "";
					ТекстОшибки = "";
					ЭлектронныеДокументыСлужебный.ОтправитьПакетЧерезРесурсБанка(Настройки, ПутьКФайлуОтправки, ОтветБанка, ТекстОшибки);
					
					Если ЗначениеЗаполнено(ТекстОшибки) Тогда
						ШаблонВидаОперации = НСтр("ru = 'Отправка пакета ЭД по соглашению: %1, способ обмена %2'");
						ВидОперации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ШаблонВидаОперации, РеквизитыПакетаЭД.НастройкаЭДО, РеквизитыПакетаЭД.СпособОбменаЭД);
						ТекстСообщения = ТекстОшибки;
						ЭлектронныеДокументыСлужебный.ОбработатьОшибкуПередачиПакетаБанка(ЭД, ВидОперации, ТекстОшибки, ТекстСообщения);
						ОтменитьТранзакцию();
						УдалитьФайлы(АдресКаталогаОтправки);
						Продолжить;
					КонецЕсли;
					
					УдалитьФайлы(ПутьКФайлуОтправки);
					
					Если РеквизитыНастройкиЭДО.ПрограммаБанка = Перечисления.ПрограммыБанка.АльфаБанкОнлайн Тогда
						ЭлектронныеДокументыСлужебный.ОбработатьОтветБанка(ОтветБанка, ЭД);
					Иначе
						ОбработатьОтветБанкаНаОтправкуДокументаAsync(ОтветБанка, ЭД, ПакетЭД);
					КонецЕсли;
					РезультатОтправки = РезультатОтправки + 1;
					
					ОбновитьВерсиюЭД(ЭД);
				КонецЕсли;
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			
			ШаблонСообщения = НСтр("ru = 'Ошибка отправки пакета по настройке: %1, способ обмена: %2
									|%3%4'");
			ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь( , , Ложь);
			ТекстОЖурнале = ?(ЭтоПолноправныйПользователь, Нстр("ru =' (подробности см. в Журнале регистрации).'"), ".");
			КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				РеквизитыПакетаЭД.НастройкаЭДО, РеквизитыПакетаЭД.СпособОбменаЭД, КраткоеПредставлениеОшибки, ТекстОЖурнале);
			ШаблонВидаОперации = НСтр("ru = 'отправка пакета ЭД по соглашению: %1, способ обмена %2'");
			ВидОперации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонВидаОперации, РеквизитыПакетаЭД.НастройкаЭДО, РеквизитыПакетаЭД.СпособОбменаЭД);
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			Если ТипОтправки = Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка Тогда
				ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
			Иначе
				ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения);
			КонецЕсли;
			
			Если ТипОтправки = Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка Тогда
				
				ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				СтруктураЭД = Новый Структура;
				СтруктураЭД.Вставить("СтатусЭД", Перечисления.СтатусыЭД.ОшибкаПередачи);
				СтруктураЭД.Вставить("ТекстУточнения", ТекстОшибки);
				ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ЭД, СтруктураЭД, Ложь);

				ЭлектронныеДокументыСлужебный.ОбновитьСтатусыДокументовПакетаЭД(ПакетЭД,
																				Перечисления.СтатусыПакетовЭД.Отменен,
																				ТекущаяДатаСеанса());
				ЗафиксироватьТранзакцию();
			Иначе
				ОтменитьТранзакцию();
			КонецЕсли;
		КонецПопытки;
		Если ЗначениеЗаполнено(АдресКаталогаОтправки) Тогда
			УдалитьФайлы(АдресКаталогаОтправки);
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатОтправки;
	
КонецФункции

// Возвращает соответствие с двоичными данными файлов
// и электронными цифровыми подписями к ним.
//
// Параметры:
//  ИмяФайла - Строка, путь к файлу данных.
//  ФайлыПакета - Соответствие - Содержит данные файлов пакета
//    * Ключ - Строка - имя файла
//    * Значение - Строка - ссылка на временное хранилище двочных данных файла
//  РасшифрованныеДвоичныеДанные - ДвоичныеДанные, двоичные данные файла данных.
//  СоответствиеФайлПараметры - Соответствие, связывает имена файлов данных и электронных цифровых подписей.
//  ЭтоXMLФайл - Булево, признак того, что переданный файл является xml-файлом.
//
Функция ПолучитьСоответствиеДанныхПодписей(ИмяФайла,
										   ФайлыПакета,
										   РасшифрованныеДвоичныеДанные,
										   СоответствиеФайлПараметры,
										   ЭтоXMLФайл = Ложь) Экспорт
	
	МассивВозврата = Новый Массив;
	ФайлРасшифрованногоАрхива = ?(ЭтоXMLФайл,
								  ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("xml"),
								  ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("zip"));
	РасшифрованныеДвоичныеДанные.Записать(ФайлРасшифрованногоАрхива);
	РасшифрованныйФайлДанных = Новый Файл(ФайлРасшифрованногоАрхива);
	
	// Определить подпись к данному файлу, проверить подпись
	
	ПодписиФайлаДанных  = СоответствиеФайлПараметры.Получить(ИмяФайла).Подписи;
	ДвоичныеДанныеФайлаДанных = Новый ДвоичныеДанные(РасшифрованныйФайлДанных.ПолноеИмя);
	УдалитьФайлы(РасшифрованныйФайлДанных.ПолноеИмя);
	
	Если ПодписиФайлаДанных = Неопределено ИЛИ ПодписиФайлаДанных.Количество() = 0 Тогда
		// Если подписей нет, тогда пока продолжаем, но, возможно, что это ошибка
	Иначе
		Для Каждого ИмяФайлаПодписи Из ПодписиФайлаДанных Цикл
			ДвоичныеДанныеПодписи = ПолучитьИзВременногоХранилища(ФайлыПакета.Получить(ИмяФайлаПодписи));
			СтруктураВозврата = Новый Структура("ДвоичныеДанныеФайла, ДвоичныеДанныеПодписи",
				ДвоичныеДанныеФайлаДанных, ДвоичныеДанныеПодписи);
			
			МассивВозврата.Добавить(СтруктураВозврата);
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивВозврата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработка ошибок

// Обрабатывает исключительные ситуации по электронным документам.
//
// Параметры:
// ВидОперации - строка - вид операции при которой возникло исключение.
// ПодробныйТекстОшибки - строка - описание ошибки.
// ТекстСообщения - строка - текст ошибки.
//
Процедура ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения = "", КодСобытия = 2) Экспорт
	
	Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	ТекстОшибки = НСтр("ru = 'Выполнение операции:'")+ " " + ВидОперации + Символы.ПС + ПодробныйТекстОшибки;
	ЭлектронныеДокументыСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(ТекстОшибки, КодСобытия);
	
КонецПроцедуры

// Возвращает текст сообщения пользователю по коду ошибки.
//
// Параметры:
//  КодОшибки - строка, код ошибки;
//  СтороннееОписаниеОшибки - строка, описание ошибки переданное другой системой.
//
// Возвращаемое значение:
//  ТекстСообщения - строка - переопределенное описание ошибки.
//
Функция ПолучитьСообщениеОбОшибке(КодОшибки, СтороннееОписаниеОшибки = "") Экспорт
	
	Возврат ЭлектронныеДокументыПовтИсп.ПолучитьСообщениеОбОшибке(КодОшибки, СтороннееОписаниеОшибки);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с файлами

// Только для внутреннего использования
Функция ТекущийКаталогВременныхФайлов() Экспорт
	
	ТекущийКаталог = "";
	ЭлектронныеДокументыПереопределяемый.ТекущийКаталогВременныхФайлов(ТекущийКаталог);
	Если НЕ ЗначениеЗаполнено(ТекущийКаталог) Тогда
		ТекущийКаталог = КаталогВременныхФайлов();
	КонецЕсли;
	
	Возврат ТекущийКаталог;
	
КонецФункции

// Функция используется для проверки доступности каталога, указанного в настройках соглашения об обмене (через каталог):
// на клиенте в каталог записывается файл, на сервере выполняется попытка прочитать его по тому же пути. Связано это с тем,
// что данный каталог должен быть доступен как с клиента, так и с сервера.
//
// Параметры:
//  ПолноеИмяТестовогоФайла - строка - полный путь к тестовому файлу записанному из клиентского сеанса;
//
// Возвращаемый параметр:
//  Булево - Истина - файл по указанному пути существует, иначе - Ложь.
//
Функция ПрочитатьТестовыйФайлНаСервере(ПолноеИмяТестовогоФайла) Экспорт
	
	ТестовыйФайл = Новый Файл(ПолноеИмяТестовогоФайла);
	
	Возврат ТестовыйФайл.Существует();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Права

// Только для внутреннего использования
Функция ЕстьПравоОбработкиЭД(ВыводитьСообщение = Истина) Экспорт
	
	ЕстьПраво = ЭлектронныеДокументыПереопределяемый.ЕстьПравоОбработкиЭД();
	Если ТипЗнч(ЕстьПраво) <> Тип("Булево") Тогда
		ЕстьПраво = Пользователи.РолиДоступны("ВыполнениеОбменаЭД");
	КонецЕсли;
	Если НЕ ЕстьПраво И ВыводитьСообщение Тогда
		ЭлектронныеДокументыСлужебный.СообщитьПользователюОНарушенииПравДоступа();
	КонецЕсли;
	
	Возврат ЕстьПраво;
	
КонецФункции

// Только для внутреннего использования
Функция ЕстьПравоЧтенияЭД(ВыводитьСообщение = Истина) Экспорт
	
	ЕстьПраво = ЭлектронныеДокументыПереопределяемый.ЕстьПравоЧтенияЭД();
	Если ТипЗнч(ЕстьПраво) <> Тип("Булево") Тогда
		ЕстьПраво = Пользователи.РолиДоступны("ВыполнениеОбменаЭД, ЧтениеЭД");
	КонецЕсли;	
	Если НЕ ЕстьПраво И ВыводитьСообщение Тогда
		ЭлектронныеДокументыСлужебный.СообщитьПользователюОНарушенииПравДоступа();
	КонецЕсли;
		
	Возврат ЕстьПраво;
		
КонецФункции

// Помечает на удаление элементы справочника ЭДПрисоединенныеФайлы с отбором по владельцу
//
// Параметры: 
//  Ссылка -  ссылка на объект.
//
Процедура ПометитьНаУдалениеЭлектронныеДокументыПоВладельцу(Ссылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ПометкаУдаления");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Файлы.Ссылка КАК Ссылка,
	|	Файлы.ПометкаУдаления
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &ВладелецФайла
	|	И (Файлы.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Сформирован)
	|			ИЛИ Файлы.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.ПустаяСсылка))";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ВладелецФайла", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если НЕ Выборка.ПометкаУдаления = ПометкаУдаления Тогда
			ФайлОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Попытка
				ФайлОбъект.Заблокировать();
			Исключение
				Шаблон = НСтр("ru = 'Не удалось заблокировать объект %1'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ФайлОбъект);
				ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВидОперации = Нстр("ru = 'Пометка на удаление электронных документов'");
				ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения, 5);
				Продолжить;
			КонецПопытки;
			ФайлОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
			ФайлОбъект.Разблокировать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Определяет по параметрам, существует ли действующее соглашение
// 
// Параметры:
//  ПараметрыЭД - структура, содержащая параметры поиска соглашения
//
// Возвращаемое значение:
//  Булево Истина или Ложь
//
Функция ЕстьДействующееСоглашение(ПараметрыЭД) Экспорт
	
	НастройкиОбмена = ЭлектронныеДокументыСлужебный.ОпределитьНастройкиОбменаЭД(ПараметрыЭД);
	
	Возврат ЗначениеЗаполнено(НастройкиОбмена);
	
КонецФункции

// Возвращает структуру для открытия формы сопоставления номенклатуры
//
// Параметры:
//  СсылкаНаЭД - СправочникСсылка.ЭДПрисоединенныеФайлы
//
// Возвращаемое значение:
//  Структура, содержащая ИмяФормы и ПараметрыОткрытияФормы
//
Функция ПолучитьПараметрыФормыСопоставленияНоменклатуры(СсылкаНаЭД) Экспорт
	
	СтруктураПараметров = ЭлектронныеДокументыПереопределяемый.ПолучитьПараметрыФормыСопоставленияНоменклатуры(
																								СсылкаНаЭД);
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") И СтруктураПараметров.Свойство("ПараметрыОткрытияФормы") Тогда
		СтруктураПараметров.ПараметрыОткрытияФормы.Вставить("РежимОткрытияОкна",
															РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	Возврат СтруктураПараметров;
	
КонецФункции

// По ссылке на документ определяет есть ли у него э.д.
//
// Параметры:
//  СсылкаНаВладельца - ДокументСсылка
//
// Возвращаемое значение:
//  Булево, факт существования документа
//
Функция ЕстьРабочийЭСФ(СсылкаНаВладельца) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.ЭлектронныйДокумент
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект = &СсылкаНаВладельца
	|	И СостоянияЭД.ЭлектронныйДокумент <> ЗНАЧЕНИЕ(Справочник.ЭДПрисоединенныеФайлы.ПустаяСсылка)
	|	И (СостоянияЭД.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СчетФактура)
	|			ИЛИ СостоянияЭД.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.КорректировочныйСчетФактура))
	|	И СостоянияЭД.ЭлектронныйДокумент.СтатусЭД <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Отклонен)";
	
	Запрос.УстановитьПараметр("СсылкаНаВладельца", СсылкаНаВладельца);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
	
КонецФункции

// Возвращает имя прикладного справочника по имени библиотечного справочника.
//
// Параметры:
//  ИмяСправочника - строка - название справочника из библиотеки.
//
// Возвращаемое значение:
//  ИмяПрикладногоСправочника - строковое имя прикладного справочника.
//
Функция ПолучитьИмяПрикладногоСправочника(ИмяСправочника) Экспорт
	
	Возврат ЭлектронныеДокументыПовтИсп.ПолучитьИмяПрикладногоСправочника(ИмяСправочника);
	
КонецФункции

// Получает значение функциональной опции.
//
// Параметры:
//  НаименованиеФО - Строка, имя функциональной опции
//
// Возвращаемое значение:
//  ЗначениеВозврата - булево, результат включенности ФО.
//
Функция ПолучитьЗначениеФункциональнойОпции(НаименованиеФО) Экспорт
	
	СоответствиеФО = Новый Соответствие;
	
	// Электронные документы
	СоответствиеФО.Вставить("ИспользоватьОбменЭД",                    "ИспользоватьОбменЭД");
	СоответствиеФО.Вставить("ИспользоватьОбменЭДМеждуОрганизациями",  "ИспользоватьОбменЭДМеждуОрганизациями");
	СоответствиеФО.Вставить("ИспользоватьОбменЭДСБанками",            "ИспользоватьОбменЭДСБанками");
	СоответствиеФО.Вставить("ИспользоватьЭлектронныеПодписиЭД",       "ИспользоватьЭлектронныеПодписиЭД");
	
	// Библиотека стандартных подсистем
	
	СоответствиеФО.Вставить("ИспользоватьДополнительныеОтчетыИОбработки", "ИспользоватьДополнительныеОтчетыИОбработки");
	
	ЭлектронныеДокументыПереопределяемый.ПолучитьСоответствиеФункциональныхОпций(СоответствиеФО);
	
	ИмяФОПрикладногоРешения = СоответствиеФО.Получить(НаименованиеФО);
	Если ИмяФОПрикладногоРешения = Неопределено Тогда // не задано соответствие
		Результат = Ложь;
	Иначе
		Результат = ПолучитьФункциональнуюОпцию(ИмяФОПрикладногоРешения)
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает текстовое представление версии электронного документа.
//
// Параметры:
//  СсылкаНаВладельца - Ссылка на объект ИБ, состояние версии электронного документа которого необходимо получить.
//  Гиперссылка - булево, Истина - необходимо реквизит формы "СостояниеЭД" сделать гиперссылкой.
//
Функция ТекстСостоянияЭД(СсылкаНаВладельца, Гиперссылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ТекстСостоянияЭД = "";
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда
		Если ПолучитьЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
			
			ИмяСчетаФактурыВыданного = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
			"СчетФактураВыданныйВМетаданных");
			ИмяСчетаФактурыПолученного = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
			"СчетФактураПолученныйВМетаданных");
			Если ИмяСчетаФактурыВыданного <> Неопределено
				И ТипЗнч(СсылкаНаВладельца) = Тип("ДокументСсылка." + ИмяСчетаФактурыВыданного)
				ИЛИ ИмяСчетаФактурыПолученного <> Неопределено
				И ТипЗнч(СсылкаНаВладельца) = Тип("ДокументСсылка." + ИмяСчетаФактурыПолученного) Тогда
				
				ТекстСостоянияЭД = ПолучитьТекстСводногоСостоянияЭД(СсылкаНаВладельца);
			ИначеЕсли ТипЗнч(СсылкаНаВладельца) = Тип("СправочникСсылка.СоглашенияОбИспользованииЭД") Тогда
				Гиперссылка = Истина;
				Возврат ТекстСостоянияЭД;
			Иначе
				ТекущееСостояниеЭД = СостояниеВерсииЭД(СсылкаНаВладельца);
				ТекстСостоянияЭД = Строка(ТекущееСостояниеЭД);
			КонецЕсли;
			
			ПараметрыЭД = Неопределено;
			Если ОпределитьДействующуюНастройкуЭДО(СсылкаНаВладельца, ПараметрыЭД) Тогда
				
				Гиперссылка = Истина;
				Если Не ЗначениеЗаполнено(ТекстСостоянияЭД) Тогда
					Гиперссылка = Ложь;
					Если ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
						ТекстСостоянияЭД = Нстр("ru = 'Не сформирован'");
					Иначе
						ТекстСостоянияЭД = Нстр("ru = 'Не получен'");
					КонецЕсли;
				КонецЕсли;
				// Покажем пользователю о режиме обмена "проверка технической совместимости".
				СостояниеСоглашения = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПараметрыЭД.НастройкаЭДО, "СостояниеСоглашения");
				Если СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.ПроверкаТехническойСовместимости Тогда
					ШаблонСостояниЭД = Нстр("ru = '%1 (проверка технической совместимости)'");
					ТекстСостоянияЭД = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСостояниЭД, ТекстСостоянияЭД);
				КонецЕсли;
			Иначе
				
				Если ЗначениеЗаполнено(ТекстСостоянияЭД) Тогда
					ШаблонСостояниЭД = Нстр("ru = '%1 (настройка ЭДО не подключена)'");
					ТекстСостоянияЭД = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСостояниЭД, ТекстСостоянияЭД);
					Гиперссылка = Истина;
				Иначе
					
					Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение
						ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПлатежноеТребование Тогда
						ТекстСостоянияЭД = Нстр("ru = 'Нет действующей настройки ЭДО с банком'");
					ИначеЕсли ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями
						Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями Тогда
						ТекстСостоянияЭД = Нстр("ru = 'Нет действующей настройки ЭДО с организацией-получателем'");
					Иначе
						ТекстСостоянияЭД = Нстр("ru = 'Настроить ЭДО с контрагентом'");
						Гиперссылка = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ТекстСостоянияЭД = НСтр("ru = 'Обмен электронными документами отключен'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстСостоянияЭД;
	
КонецФункции

// Проверяет, является ли переданный в параметре ЭД служебным или нет.
//
Функция ЭтоСлужебныйДокумент(ЭлектронныйДокумент) Экспорт
	
	Если ЗначениеЗаполнено(ЭлектронныйДокумент.ТипЭлементаВерсииЭД) Тогда
		ВозвращаемоеЗначение = НЕ (ЭлектронныйДокумент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД
			ИЛИ ЭлектронныйДокумент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
	Иначе
		ВозвращаемоеЗначение = НЕ (ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
			ИЛИ ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении
			ИЛИ ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ПредложениеОбАннулировании
			ИЛИ ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.Подтверждение
			ИЛИ ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.Ошибка
			ИЛИ ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ДопДанные);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ЭтоСчетФактураПолученный(ЭлектронныйДокумент) Экспорт
	
	Результат = Ложь;
	ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент, "ВидЭД");
	Если ВидЭД = Перечисления.ВидыЭД.СчетФактура
		Или ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет валидность подписей электронного документа
// и заполняет реквизиты Статус и ДатаПроверкиПодписи в табличной части ЭлектронныеПодписи.
//
// Параметры:
//  ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы
//  ВыводитьСообщения - Булево, требуется ли выводить сообщения .
//
Процедура ОпределитьСтатусыПодписей(ЭД, ВыводитьСообщения = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РеквизитыСоглашения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭД.СоглашениеЭД, "ПрограммаБанка, СпособОбменаЭД");
	
	Если РеквизитыСоглашения.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка
			И (РеквизитыСоглашения.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн
				ИЛИ РеквизитыСоглашения.ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку
				ИЛИ РеквизитыСоглашения.ПрограммаБанка = Перечисления.ПрограммыБанка.iBank2) Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	Попытка
		МенеджерКриптографии = ПолучитьМенеджерКриптографии(Отказ);
	Исключение
		Отказ = Истина;
	КонецПопытки;
	Если Отказ Тогда
		Если ВыводитьСообщения Тогда
			ТекстСообщения = ПолучитьСообщениеОбОшибке("110");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ДопИнформацияПоЭД = ЭлектронныеДокументыСлужебный.ПолучитьДанныеФайла(ЭД);
	ДвоичныеДанныеДокумента = ПолучитьИзВременногоХранилища (ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);
		
	ОбъектЭД = ЭД.ПолучитьОбъект();
	
	Для каждого СтрокаЭП из ОбъектЭД.ЭлектронныеПодписи Цикл
		Попытка
			ДвоичныеДанныеЭП = СтрокаЭП.Подпись.Получить();
			ЭлектронныеДокументыСлужебный.ПроверитьПодпись(МенеджерКриптографии, ДвоичныеДанныеДокумента, ДвоичныеДанныеЭП);
			СтрокаЭП.ДатаПроверкиПодписи = ТекущаяДатаСеанса();
			СтрокаЭП.ПодписьВерна = Истина;
		Исключение
			СтрокаЭП.ДатаПроверкиПодписи = ТекущаяДатаСеанса();
			СтрокаЭП.ПодписьВерна = Ложь;
			
			ТекстСообщения = ПолучитьСообщениеОбОшибке("114");
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ВидОперации = НСтр("ru = 'проверка электронной подписи'");
			ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	ОбъектЭД.Записать();
	
КонецПроцедуры

// Только для внутреннего использования
Процедура ПерезаполнитьДокументыИБПоЭД(ДокументИБ, Знач ЭД, ОбъектМетаданных = Неопределено, ДокументЗагружен = Ложь) Экспорт
	
	// Внимание! Для однократной сделки в ЭД будет Структура.
	
	Если ЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
		ИЛИ ЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
		ИЛИ ЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
		
		ЭД = ЭД.ЭлектронныйДокументВладелец;
	КонецЕсли;
	
	ЗаполнитьДокументИБПоЭД(ДокументИБ, ЭД, ДокументЗагружен);
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(ДокументИБ)).ПолноеИмя();
	
КонецПроцедуры

// Возвращает двоичные данные электронного документа
//
// Параметры: 
// ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы, ссылка на электронный документ.
// СертификатПодписи  - ссылка - ссылка на элемент справочника Сертификаты ЭП.
//
Функция ПолучитьДвоичныеДанныеФайла(ЭД, СертификатПодписи) Экспорт
	
	ДвоичныеДанныеЭД = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(ЭД);
	
	Если ЗначениеЗаполнено(СертификатПодписи) Тогда
		
		ПараметрыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭД, "ВидЭД, Организация, НаправлениеЭД");
		ЭтоВидЭДБанка = ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ВыпискаБанка
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ЗапросВыписки ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ЗапросЗонд
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ЗапросНаОтзывЭД
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ЗапросНочнойВыписки
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ЗапросОСостоянииЭД
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОСостоянииЭД
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.Квитанция ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.Ошибка
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение;
		
		// Делаем проверку на заполненность полей ФИО в сертификате
		Если НЕ ЭтоВидЭДБанка
			И (Не ЗначениеЗаполнено(СертификатПодписи.Фамилия) ИЛИ Не ЗначениеЗаполнено(СертификатПодписи.Имя)) Тогда
			ТекстСообщения = НСтр("ru = 'Операция отменена. Необходимо заполнить поля: ""Фамилия"", ""Имя""
										|в сертификате %1.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СертификатПодписи);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		
		ФайлДанныхИзменен = Ложь;
		Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
			
			ИмяФайла = ПолучитьИмяВременногоФайла("xml");
			ДвоичныеДанныеЭД.Записать(ИмяФайла);
			ЗаполнитьДанныеПодписантаЭД(ИмяФайла, ПараметрыЭД.Организация, СертификатПодписи, ПараметрыЭД.ВидЭД);
			ФайлДанныхИзменен = Истина;
			
		ИначеЕсли ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении Тогда
			
			ИмяФайла = ПолучитьИмяВременногоФайла("xml");
			ДвоичныеДанныеЭД.Записать(ИмяФайла);
			ЗаполнитьДанныеПодписантаСлужебныхЭД(ИмяФайла, ПараметрыЭД.Организация, СертификатПодписи);
			
			ФайлДанныхИзменен = Истина;
			
		ИначеЕсли ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
			И (ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав) Тогда
			
			ИмяФайла = ПолучитьИмяВременногоФайла("zip");
			ДвоичныеДанныеЭД.Записать(ИмяФайла);
			
			ЗИПЧтение = Новый ЧтениеZipФайла(ИмяФайла);
			ПапкаДляРаспаковки = ЭлектронныеДокументыСлужебный.РабочийКаталог("signature", ЭД.УникальныйИдентификатор());
			
			Попытка
				ЗипЧтение.ИзвлечьВсе(ПапкаДляРаспаковки);
			Исключение
				ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				Если Не ЭлектронныеДокументыСлужебный.ВозможноИзвлечьФайлы(ЗипЧтение, ПапкаДляРаспаковки) Тогда
					ТекстСообщения = ЭлектронныеДокументыПовтИсп.ПолучитьСообщениеОбОшибке("006");
				КонецЕсли;
				ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Извлечение ЭД CML из архива при подписи'"),
				ТекстОшибки, ТекстСообщения);
			КонецПопытки;
			ЗИПЧтение.Закрыть();
			
			ФайлыЭД = НайтиФайлы(ПапкаДляРаспаковки, "*.xml");
			Если ФайлыЭД.Количество() > 0 Тогда
				ФайлСДанными = ФайлыЭД[0];
				ЗаполнитьДанныеПодписантаЭДCML_206(ФайлСДанными.ПолноеИмя, ПараметрыЭД.Организация, СертификатПодписи);
				ФайлДанныхИзменен = Истина;
			КонецЕсли;
			
			УдалитьФайлы(ИмяФайла);
			ИмяФайла = ПолучитьИмяВременногоФайла("zip");
			ЗипКонтейнер = Новый ЗаписьZipФайла(ИмяФайла);
			
			ФайлыАрхива = НайтиФайлы(ПапкаДляРаспаковки, "*");
			Для Каждого Файл Из ФайлыАрхива Цикл
				ЗипКонтейнер.Добавить(Файл.ПолноеИмя);
			КонецЦикла;
			
			Попытка
				ЗипКонтейнер.Записать();
			Исключение
				ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование архива ЭД CML при подписи'"),
				ТекстОшибки, ТекстСообщения);
			КонецПопытки;
			УдалитьФайлы(ПапкаДляРаспаковки);
		КонецЕсли;
		
		Если ФайлДанныхИзменен Тогда
			
			ДвоичныеДанныеЭД = Новый ДвоичныеДанные(ИмяФайла);
			
			ИнформацияОФайле = Новый Структура;
			ИнформацияОФайле.Вставить("АдресФайлаВоВременномХранилище", ПоместитьВоВременноеХранилище(ДвоичныеДанныеЭД));
			ИнформацияОФайле.Вставить("АдресВременногоХранилищаТекста", "");
			ПрисоединенныеФайлы.ОбновитьПрисоединенныйФайл(ЭД, ИнформацияОФайле);
			УдалитьФайлы(ИмяФайла);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДвоичныеДанныеЭД;
	
КонецФункции

// Выполняет последовательность действий для электронных документов.
//
// Параметры:
//  МассивСсылокНаОбъект - Массив ссылок на электронные документы, для которых надо определить последовательность действий,
//  КлиентскиеНастройкиКриптографии - Массив доступных сертификатов
//  Действия - Строковое представление необходимых действий,
//  ДопПараметры - Структура, дополнительные параметры, определяющие последовательность действий с электронными документами.
//  ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы, ссылка на элемент справочника ЭДПрисоединенныеФайлы
//  СоотвСертификатовИПаролей - соответствие - ключ - СертификатЭП, значение - пароль к сертификату;
//
// Возвращаемое значение:
//  Структура.
//
Функция ВыполнитьДействияПоЭД(Знач МассивСсылокНаОбъект,
							  Знач МассивОтпечатковСертификатов,
							  Знач Действия,
							  ДопПараметры = "",
							  Знач ЭД = Неопределено,
							  Знач СоотвСертификатовИПаролей) Экспорт
	
	Если НЕ ЕстьПравоОбработкиЭД(Истина) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ПолучитьЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
		ТекстСообщения = ТекстСообщенияОНеобходимостиНастройкиСистемы("РаботаСЭД");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	ВыполнятьКриптооперацииНаСервере = ВыполнятьКриптооперацииНаСервере();
	НемедленнаяОтправкаЭД = ЭлектронныеДокументыСлужебный.НемедленнаяОтправкаЭД();
	
	МассивОтпечатковКлиент = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОтпечатковКлиент, МассивОтпечатковСертификатов);
	
	Если ЭлектронныеДокументыКлиентСервер.ЕстьДействие(Действия, "Подписать")
		ИЛИ ЭлектронныеДокументыКлиентСервер.ЕстьДействие(Действия, "Отправить") Тогда
		
		Если ВыполнятьКриптооперацииНаСервере Тогда
			Попытка
				МассивОтпечатковСертификатовНаСервере = МассивОтпечатковСертификатов();
			Исключение
				МассивОтпечатковСертификатовНаСервере = Новый Массив;
			КонецПопытки;
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				МассивОтпечатковСертификатов, МассивОтпечатковСертификатовНаСервере, Истина);
		КонецЕсли;
		
		ТаблицаДоступныхСертификатов = ЭлектронныеДокументыСлужебный.ТаблицаДоступныхДляПодписиСертификатов(
																				МассивОтпечатковСертификатов);
																				
		МассивОтпечатков = ТаблицаДоступныхСертификатов.ВыгрузитьКолонку("Отпечаток");

	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(ЭД) <> Тип("Массив")
		И НЕ (ЗначениеЗаполнено(ЭД) И (ЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
										ИЛИ ЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
										ИЛИ ЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
										ИЛИ ЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель
										ИЛИ ЭтоСлужебныйДокумент(ЭД))) Тогда
		ЭлектронныеДокументыПереопределяемый.ПроверитьГотовностьИсточников(МассивСсылокНаОбъект);
	КонецЕсли;
	
	Если ТипЗнч(ЭД) <> Тип("Массив")
		И МассивСсылокНаОбъект.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	// Ключи структуры возврата:
	// ВыполнятьКриптооперацииНаСервере, НемедленнаяОтправкаЭД - тип Булево;
	// КоличествоНовыхЭД, КоличествоУтвержденныхЭД, КолПодписанных, КолПодготовленных, КолОтправленных - тип Число;
	// МассивНовыхЭД - тип Массив;
	// СоотвСертификатовИМассивовЭДКПодписи - тип Соответствие (ключ - СертификатЭП, значение - МассивЭД к подписи на клиенте)
	// СтруктураКОтправке - тип Структура с ключами:
	//                   БезПодписи, СПодписью - тип Массив, МассивЭД (к подготовке) к отправке, соответственно не подписываемые и подписываемые;
	//                   САвторизацией - тип Соответствие (ключ - СоглашениеЭД, значение - МассивЭД к отправке).
	СтруктураВозврата.Вставить("ВыполнятьКриптооперацииНаСервере", ВыполнятьКриптооперацииНаСервере);
	СтруктураВозврата.Вставить("НемедленнаяОтправкаЭД", НемедленнаяОтправкаЭД);
	
	МассивНеобрабатываемыхОбъектов = Новый Массив;
	
	// Формирование ЭД:
	
	КолНовыхЭД = 0;
	Если ЭД = Неопределено И ЭлектронныеДокументыКлиентСервер.ЕстьДействие(Действия, "Сформировать") Тогда
		Если Действия = "Сформировать" ИЛИ Действия = "СформироватьПоказать" Тогда
			УдалитьНедоступныеДляФормированияЭДОбъекты(МассивСсылокНаОбъект);
		КонецЕсли;
		
		НастройкиОбъектов = Новый Соответствие;
		Для Сч = -МассивСсылокНаОбъект.Количество() + 1 По 0 Цикл
			СсылкаНаОбъект = МассивСсылокНаОбъект[-Сч];
			
			// Для случая определения вида ЭД пользователем
			ВидЭД = "";
			Если ЗначениеЗаполнено(ДопПараметры) Тогда
				ДопПараметры.Свойство("ВидЭД", ВидЭД);
			КонецЕсли;
			
			НастройкиОбмена = ЭлектронныеДокументыСлужебный.ОпределитьНастройкиОбменаЭДПоИсточнику(СсылкаНаОбъект,
																								   ,
																								   ,
																								   ,
																								   ВидЭД);
			Если НЕ ЗначениеЗаполнено(НастройкиОбмена) Тогда
				МассивСсылокНаОбъект.Удалить(-Сч);
			Иначе
				НастройкиОбъектов.Вставить(СсылкаНаОбъект, НастройкиОбмена);
			КонецЕсли;
		КонецЦикла;
		Если МассивСсылокНаОбъект.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		ТекстЗапросаСоздатьЭД =
		"ВЫБРАТЬ
		|	МассивСсылок.ОбъектСсылка
		|ПОМЕСТИТЬ МассивСсылок
		|ИЗ
		|	&МассивСсылок КАК МассивСсылок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МассивСсылок.ОбъектСсылка КАК ВладелецЭД
		|ИЗ
		|	МассивСсылок КАК МассивСсылок
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|		ПО МассивСсылок.ОбъектСсылка = СостоянияЭД.СсылкаНаОбъект";
		
		Если Действия = "СформироватьУтвердитьПодписатьОтправить" Тогда
			ОпределитьНеобрабатываемыеОбъекты(НастройкиОбъектов, МассивНеобрабатываемыхОбъектов);
			ТекстЗапросаСоздатьЭД = ТекстЗапросаСоздатьЭД + " ГДЕ
			|(СостоянияЭД.СсылкаНаОбъект ЕСТЬ NULL 
			|ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.НеСформирован))
			|ИЛИ ((СостоянияЭД.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПлатежноеПоручение)
			|		ИЛИ СостоянияЭД.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПлатежноеТребование))
			|	И (СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.Отклонен)
			|		ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОшибкаПередачи)))";
		Иначе
			ИмяСчетаФактурыВыданного = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
				"СчетФактураВыданныйВМетаданных");
			Если ИмяСчетаФактурыВыданного <> Неопределено Тогда
				
				ТекстЗапросаСоздатьЭД = ТекстЗапросаСоздатьЭД + " ГДЕ (ВЫБОР
				|КОГДА МассивСсылок.ОбъектСсылка ССЫЛКА Документ." + ИмяСчетаФактурыВыданного + "
				|	ТОГДА СостоянияЭД.СсылкаНаОбъект ЕСТЬ NULL 
				|		ИЛИ СостоянияЭД.ЭлектронныйДокумент.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Отклонен)
				|		ИЛИ СостоянияЭД.ЭлектронныйДокумент.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.ОтклоненПолучателем)
				|		ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.НеСформирован)
				|	ИНАЧЕ ИСТИНА
				|КОНЕЦ)";
			КонецЕсли;
		КонецЕсли;
		Запрос.Текст = ТекстЗапросаСоздатьЭД;
		Измерение = Метаданные.РегистрыСведений.СостоянияЭД.Измерения.Найти("СсылкаНаОбъект");
		ТЗ_Ссылки = Новый ТаблицаЗначений;
		КолонкаТЗ = ТЗ_Ссылки.Колонки.Добавить("ОбъектСсылка", Измерение.Тип);
		Для Каждого Элемент Из МассивСсылокНаОбъект Цикл
			Строка = ТЗ_Ссылки.Добавить();
			Строка.ОбъектСсылка = Элемент;
		КонецЦикла;
		Запрос.УстановитьПараметр("МассивСсылок", ТЗ_Ссылки);
		ТЗ_ЭД = Запрос.Выполнить().Выгрузить();
		
		Если ТЗ_ЭД.Количество() > 0 Тогда
			МассивНовыхЭД = ЭлектронныеДокументыСлужебный.СформироватьПрисоединенныеФайлы(ТЗ_ЭД.ВыгрузитьКолонку("ВладелецЭД"),
																						  НастройкиОбъектов,
																						  ДопПараметры);
			КолНовыхЭД = МассивНовыхЭД.Количество();
		КонецЕсли;
		СтруктураВозврата.Вставить("КоличествоНовыхЭД", КолНовыхЭД);
		Если Действия = "Сформировать" ИЛИ Действия = "СформироватьПоказать" Тогда
			СтруктураВозврата.Вставить("МассивНовыхЭД", МассивНовыхЭД);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ЭД) <> Тип("Массив")
		И МассивСсылокНаОбъект.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	// Формирование временных таблиц - обрабатываемых ЭД, сформированные ВТ используются далее на всех этапах:
	Если ЗначениеЗаполнено(ЭД) Тогда
		ТекстОсновногоЗапроса =
			"ВЫБРАТЬ
			|	ЭДПрисоединенныеФайлы.Ссылка,
			|	ЭДПрисоединенныеФайлы.ВидЭД,
			|	ЭДПрисоединенныеФайлы.ВладелецФайла,
			|	ЭДПрисоединенныеФайлы.Контрагент,
			|	ЭДПрисоединенныеФайлы.НаправлениеЭД,
			|	ЭДПрисоединенныеФайлы.Организация,
			|	ЭДПрисоединенныеФайлы.ПрофильНастроекЭДО,
			|	ЭДПрисоединенныеФайлы.СоглашениеЭД,
			|	ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец,
			|	ЭДПрисоединенныеФайлы.ПодписанЭП,
			|	ЭДПрисоединенныеФайлы.СтатусЭД
			|ПОМЕСТИТЬ ВТ_ЭД
			|ИЗ
			|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
			|ГДЕ
			|	ЭДПрисоединенныеФайлы.Ссылка В(&МассивСсылокЭД)
			|";
		Если ТипЗнч(ЭД) <> Тип("Массив") Тогда
			МассивСсылокЭД = Новый Массив;
			МассивСсылокЭД.Добавить(ЭД);
		Иначе
			МассивСсылокЭД = ЭД;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("МассивСсылокЭД", МассивСсылокЭД);
	Иначе
		ТекстОсновногоЗапроса =
			"ВЫБРАТЬ
			|	ЭДПрисоединенныеФайлы.Ссылка,
			|	ЭДПрисоединенныеФайлы.ВидЭД,
			|	ЭДПрисоединенныеФайлы.ВладелецФайла,
			|	ЭДПрисоединенныеФайлы.Контрагент,
			|	ЭДПрисоединенныеФайлы.НаправлениеЭД,
			|	ЭДПрисоединенныеФайлы.Организация,
			|	ЭДПрисоединенныеФайлы.ПрофильНастроекЭДО,
			|	ЭДПрисоединенныеФайлы.СоглашениеЭД,
			|	ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец,
			|	ЭДПрисоединенныеФайлы.ПодписанЭП,
			|	ЭДПрисоединенныеФайлы.СтатусЭД
			|ПОМЕСТИТЬ ВТ_ЭД
			|ИЗ
			|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
			|		ПО СостоянияЭД.ЭлектронныйДокумент = ЭДПрисоединенныеФайлы.Ссылка
			|ГДЕ
			|	СостоянияЭД.СсылкаНаОбъект В(&МассивСсылок)
			|	И СостоянияЭД.СостояниеВерсииЭД <> ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ЗакрытПринудительно)
			|";
		Если МассивНеобрабатываемыхОбъектов.Количество() > 0 Тогда
			ДопУсловие = " И НЕ(ЭДПрисоединенныеФайлы.Ссылка В (&МассивНеобрабатываемыхОбъектов))";
			Запрос.УстановитьПараметр("МассивНеобрабатываемыхОбъектов", МассивНеобрабатываемыхОбъектов);
			ТекстОсновногоЗапроса = ТекстОсновногоЗапроса + ДопУсловие;
		КонецЕсли;
		Запрос.УстановитьПараметр("МассивСсылок", МассивСсылокНаОбъект);
	КонецЕсли;
	
	// Утверждение ЭД:
	
	КолУтвержденныхЭД = 0;
	Если ЭлектронныеДокументыКлиентСервер.ЕстьДействие(Действия, "Утвердить") Тогда
		ТекстЗапроса =
			"
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_ЭД.ВладелецФайла КАК ВладелецЭД,
			|	ВТ_ЭД.Ссылка КАК СсылкаНаЭД,
			|	ВТ_ЭД.СтатусЭД,
			|	ВТ_ЭД.ВидЭД,
			|	ВТ_ЭД.СоглашениеЭД КАК СоглашениеЭД
			|ИЗ
			|	ВТ_ЭД КАК ВТ_ЭД
			|ГДЕ
			|	ВТ_ЭД.СтатусЭД В(&МассивСтатусов)";
		МассивСтатусов = Новый Массив;
		МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Сформирован);
		МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
		МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Получен);
		МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ЧастичноПодписан);
		Запрос.УстановитьПараметр("МассивСтатусов", МассивСтатусов);
		Запрос.Текст = ТекстОсновногоЗапроса + ";" + ТекстЗапроса;
		ТЗ_ЭД = Запрос.Выполнить().Выгрузить();
		КолУтвержденныхРанее = 0;
		НовыйЭД = Неопределено;
		УтвержденныеСФ = Новый Массив;
		Для Каждого ТекСтрока Из ТЗ_ЭД Цикл
			Если ТекСтрока.СтатусЭД = Перечисления.СтатусыЭД.Сформирован ИЛИ ТекСтрока.СтатусЭД = Перечисления.СтатусыЭД.Получен Тогда
				СсылкаНаЭД = ТекСтрока.СсылкаНаЭД;
				НачатьТранзакцию();
				УстановитьПризнакУтвержден(СсылкаНаЭД, НовыйЭД);
				Если ТранзакцияАктивна() Тогда
					ТекСтрока.СтатусЭД = СсылкаНаЭД.СтатусЭД;
					КолУтвержденныхЭД = КолУтвержденныхЭД + 1;
					ЗафиксироватьТранзакцию();
				КонецЕсли;
				
				Если СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
					И СсылкаНаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
					УтвержденныеСФ.Добавить(СсылкаНаЭД);
				КонецЕсли;
				
			Иначе
				КолУтвержденныхРанее = КолУтвержденныхРанее + 1;
			КонецЕсли;
			
		КонецЦикла;
		Если ЗначениеЗаполнено(НовыйЭД) Тогда
			ДопПараметры.Вставить("НовыйЭД", НовыйЭД);
		КонецЕсли;
		
		// Меняем состояние предыдущих входящих с.ф.
		Если УтвержденныеСФ.Количество() > 0 Тогда
			ЭлектронныеДокументыВнутренний.ИзменитьСостояниеСФОснований(УтвержденныеСФ, Перечисления.НаправленияЭД.Входящий);
		КонецЕсли;
		
		СтруктураВозврата.Вставить("КоличествоУтвержденныхЭД", КолУтвержденныхЭД);
	КонецЕсли;
	
	// Входящие ЭД вида ТОРГ12Продавец и АктИсполнитель - никогда не подписываются и не отправляются,
	// исключим их из последующих выборок:
	ТекстОсновногоЗапроса = ТекстОсновногоЗапроса + "
		|И (Выбор Когда ЭДПрисоединенныеФайлы.НаправлениеЭД = &НаправлениеВходящийЭД
		|		И ЭДПрисоединенныеФайлы.ВидЭД В (&МассивИсключаемыхВидовЭД)
		|	Тогда Ложь
		|	Иначе Истина
		|	Конец)";
	МассивИсключаемыхВидовЭД = Новый Массив;
	МассивИсключаемыхВидовЭД.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
	МассивИсключаемыхВидовЭД.Добавить(Перечисления.ВидыЭД.АктИсполнитель);
	МассивИсключаемыхВидовЭД.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель);
	Запрос.УстановитьПараметр("НаправлениеВходящийЭД", Перечисления.НаправленияЭД.Входящий);
	Запрос.УстановитьПараметр("МассивИсключаемыхВидовЭД", МассивИсключаемыхВидовЭД);
	
	// Получим из входящих параметров СоотвСертификатовИИхСтруктур.
	СоотвСертификатовИИхСтруктур = Новый Соответствие;
	СтруктураВозврата.Вставить("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур);
	СертификатыСПаролями = ПарольКСертификату();
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	Для Каждого Элемент Из СертификатыСПаролями Цикл
		Структура = Новый Структура("ПарольПользователя, Парольполучен, ЗапомнитьПарольКСертификату",
			Элемент.Значение, Истина, Ложь);
		СоотвСертификатовИИхСтруктур.Вставить(Элемент.Ключ, Структура);
	КонецЦикла;
	
	// Это соответствие вернется на сторону клиента и на клиенте будет выполнена попытка получить пароли к сертификатам
	// и подписать массивы ЭД.
	СоотвСертификатовИМассивовЭД = Новый Соответствие;
	СтруктураВозврата.Вставить("СоотвСертификатовИМассивовЭД", СоотвСертификатовИМассивовЭД);
	
	СоотвСоглашенийИМассивовЭДКОтправке = Новый Соответствие;
	СоотвСоглашенийИМассивовЭДКОтправкеСАвторизацией = Новый Соответствие;
	СтруктураВозврата.Вставить("СоотвСоглашенийИМассивовЭДКОтправке", СоотвСоглашенийИМассивовЭДКОтправке);
	СтруктураВозврата.Вставить("СоотвСоглашенийИМассивовЭДКОтправкеСАвторизацией",
		СоотвСоглашенийИМассивовЭДКОтправкеСАвторизацией);
	СоотвСоглашенийИМассивовЭДКОтправкеСАутентификацейПоСертификату = Новый Соответствие;
	СтруктураВозврата.Вставить("СоотвСоглашенийИМассивовЭДКОтправкеСАутентификацейПоСертификату",
		СоотвСоглашенийИМассивовЭДКОтправкеСАутентификацейПоСертификату);
	// Подписание ЭД:
	
	// Каждый подписанный ЭД должен пройти процесс отправки, который состоит из подготовки к отправке (формирование ПЭД)
	// и непосредственно отправки ПЭД (если настроена НемедленнаяОтправка). Подготовка (отправка) подразделяется на
	// отправку не подписываемых ЭД, отправку подписываемых ЭД, отправку с авторизацией (на сервере ОЭДО).
	// В связи с вышеописанным, сформируем для передачи на клиента структуру с массивами ЭД к отправке:
	// Структура в первых 2-х элементах (БезПодписи, СПодписью) содержит массивы ЭД к отправке.
	// В 3-м элементе - соответствие: ключ - соглашение ЭД, значение - массив ЭД, отправляемый в рамках соглашения.
	// 3-й элемент заполняется только если в системе настроена немедленная отправка ЭД.
	СтруктураКОтправке = Новый Структура("БезПодписи, СПодписью, САвторизацией, САвторизациейЛогинПароль, ЧерезТокенСбербанка",
										Новый Массив, Новый Массив, Новый Соответствие, Новый Соответствие, Новый Массив);
	
	КолПодписанных = 0;
	Если ЭлектронныеДокументыКлиентСервер.ЕстьДействие(Действия, "Подписать") Тогда
		// Для подписания формируем выборку:
		// В виртуальную таблицу выбираем ЭД, которые НАДО и ЕСТЬ ВОЗМОЖНОСТЬ подписать, т.е. отвечающие следующим условиям:
		// - ЭД входит в список к обработке (либо передан как параметр "ЭД", либо получен из Регистра "СостоянияЭД" отобранного
		//     по массиву владельцев, параметр "МассивСсылокНаОбъект");
		// - статус ЭД либо "Утвержден", либо "Частично подписан";
		// - ЭД НАДО подписывать (определяется по соглашению, указанному в ЭД): либо способ обмена "Через ОЭДО", либо "Это
		//     интеркампани", либо если ЭД - входящий, то в соглашении, на вкладке "Входящие" отмечен для обмена вид ЭД,
		//     совпадающий с видом подписываемого ЭД и отмечена опция "Использовать ЭП", либо если ЭД - исходящий, то в
		//     соглашении, на вкладке "Исходящие" отмечен для обмена вид ЭД, совпадающий с видом подписываемого ЭД и отмечена
		//     опция "Использовать ЭП";
		// - существует сертификат для подписи ЭД:
		//     - Организация в сертификате совпадает с организацией в ЭД;
		//     - в сертификате отмечен вид ЭД, соответствующий виду подписываемого ЭД;
		//     - сертификат действует (не помечен на удаление, не отозван);
		//     - доступен для использования (не ограничен по пользователям, либо текущий пользователь совпадает с указанным в
		//         сертификате, а так же, отпечаток сертификата входит в массив отпечатков полученных из личного хранилища
		//         клиента либо сервера, в зависимости от настроек использования криптографии);
		//     - если способ обмена "Через ОЭДО", то сертификат должен быть зарегистрирован у ОЭДО (добавлен в таб.часть
		//         "СертификатыПодписейОрганизации" соглашения об обмене ЭД).
		//
		// Если все описанные условия выполняются, то ЭД попадает в виртуальную таблицу, туда же помещаются все необходимые для
		// подписания ЭД, данные: сертификат подписи, параметры сертификата, уже установленные в ЭД подписи, соглашение.
		// Затем из временной таблицы делается 3 выборки: ЭД на подпись, сертификаты для подписания ЭД, установленные подписи.
		// Из первой выборки берем подписываемый ЭД, из второй и третьей - выбираем сертификаты по условиям:
		// его отпечатка не должно быть среди уже установленных в ЭД подписей.
		
		
		// Основной запрос - выборка из временных таблиц:
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	Сертификаты.Ссылка КАК СертификатПодписи,
			|	Сертификаты.Отпечаток,
			|	Сертификаты.Отозван,
			|	Сертификаты.ДанныеСертификата,
			|	Сертификаты.Организация КАК ОрганизацияВСертификате,
			|	ВидыЭДЭП.ВидЭД КАК ВидДокумента,
			|	ПрограммыБанков.ПрограммаБанка КАК ПрограммаБанка,
			|	Сертификаты.Наименование,
			|	ВТ_ЭД.Ссылка КАК СсылкаНаЭД
			|ПОМЕСТИТЬ ВТ_Сертификаты
			|ИЗ
			|	РегистрСведений.ПодписываемыеВидыЭД КАК ВидыЭДЭП
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЭД КАК ВТ_ЭД
			|		ПО (ВидыЭДЭП.Использовать)
			|			И (ВТ_ЭД.ВидЭД = ВидыЭДЭП.ВидЭД)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрограммыБанков КАК ПрограммыБанков
			|			ПО (ПрограммыБанков.СертификатЭП = Сертификаты.Ссылка)
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
			|				ПрофилиЭДОСертификаты.Сертификат КАК Сертификат
			|			ИЗ
			|				ВТ_ЭД КАК ВТ_ЭД
			|					ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК ПрофилиЭДОСертификаты
			|					ПО ВТ_ЭД.ПрофильНастроекЭДО = ПрофилиЭДОСертификаты.Ссылка
			|			
			|			ОБЪЕДИНИТЬ ВСЕ
			|			
			|			ВЫБРАТЬ
			|				СоглашенияЭДСертификаты.Сертификат
			|			ИЗ
			|				ВТ_ЭД КАК ВТ_ЭД
			|					ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СоглашенияЭДСертификаты
			|					ПО ВТ_ЭД.СоглашениеЭД = СоглашенияЭДСертификаты.Ссылка) КАК СертификатыИзНастроекИПрофилей
			|			ПО Сертификаты.Ссылка = СертификатыИзНастроекИПрофилей.Сертификат
			|		ПО ВидыЭДЭП.СертификатЭП = Сертификаты.Ссылка
			|ГДЕ
			|	НЕ Сертификаты.Отозван
			|	И НЕ Сертификаты.ПометкаУдаления
			|	И (Сертификаты.Пользователь = &ПустойПользователь
			|			ИЛИ Сертификаты.Пользователь = &ТекущийПользователь
			|			ИЛИ Сертификаты.Пользователь = &ПользовательНеУказан)
			|	И (Сертификаты.Отпечаток В (&МассивОтпечатков)
			|			ИЛИ ПрограммыБанков.ПрограммаБанка В (&СписокПрограммБанков))
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	СертификатПодписи,
			|	ОрганизацияВСертификате
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЭД_ЭП.Отпечаток КАК УстановленныеПодписи,
			|	ВТ_ЭД.Ссылка КАК СсылкаНаЭД,
			|	СоглашенияЭД.Ссылка КАК СоглашениеЭД,
			|	ЕСТЬNULL(ВТ_ЭД.ПрофильНастроекЭДО.СпособОбменаЭД, СоглашенияЭД.Ссылка.СпособОбменаЭД) КАК СпособОбменаЭД,
			|	ВТ_ЭД.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
			|	ВТ_Сертификаты.СертификатПодписи КАК СертификатПодписи,
			|	ВТ_Сертификаты.Отпечаток,
			|	ВТ_Сертификаты.Отозван,
			|	ВТ_ЭД.Организация,
			|	ВТ_ЭД.Контрагент,
			|	ВТ_Сертификаты.ОрганизацияВСертификате КАК ОрганизацияВСертификате,
			|	СоглашенияЭД.ЭтоИнтеркампани,
			|	ВЫБОР
			|		КОГДА ВТ_ЭД.ПрофильНастроекЭДО.СпособОбменаЭД В (&СпособыОбменаСАвторизацией)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ТребуетсяАвторизация,
			|	ВЫБОР
			|		КОГДА ВТ_ЭД.СоглашениеЭД.ПрограммаБанка = ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.АсинхронныйОбмен)
			|				И ВТ_ЭД.СоглашениеЭД.АутентификацияПоСертификату = ЛОЖЬ
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ТребуетсяАутентификацияЛогинПароль,
			|	ВЫБОР
			|		КОГДА СоглашенияЭД.АутентификацияПоСертификату = ИСТИНА
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ТребуетсяАутентификацияПоСертификату,
			|	ВЫБОР
			|		КОГДА ВТ_ЭД.ВидЭД В (&ВидыСлужебныхЭД)
			|			ТОГДА ЕСТЬNULL(ВТ_ЭД.ЭлектронныйДокументВладелец.ПодписанЭП, ЛОЖЬ)
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК ЭДВладелецПодписан,
			|	ЕСТЬNULL(ВТ_Сертификаты.ПрограммаБанка, СоглашенияЭД.ПрограммаБанка) КАК ПрограммаБанка,
			|	ВТ_Сертификаты.Наименование КАК НаименованиеСертификата,
			|	ВТ_ЭД.ВидЭД,
			|	ВТ_Сертификаты.ДанныеСертификата
			|ПОМЕСТИТЬ ВТ
			|ИЗ
			|	ВТ_Сертификаты КАК ВТ_Сертификаты
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЭД КАК ВТ_ЭД
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияЭД
			|			ПО ВТ_ЭД.СоглашениеЭД = СоглашенияЭД.Ссылка
			|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияЭДИсходящие
			|			ПО ВТ_ЭД.СоглашениеЭД = СоглашенияЭДИсходящие.Ссылка
			|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы.ЭлектронныеПодписи КАК ЭД_ЭП
			|			ПО ВТ_ЭД.Ссылка = ЭД_ЭП.Ссылка
			|		ПО (ВТ_ЭД.ВидЭД = ВТ_Сертификаты.ВидДокумента)
			|			И ВТ_Сертификаты.СсылкаНаЭД = ВТ_ЭД.Ссылка
			|ГДЕ
			|	ВЫБОР
			|			КОГДА СоглашенияЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка)
			|				ТОГДА СоглашенияЭД.ИспользуетсяКриптография
			|			КОГДА СоглашенияЭД.ЭтоИнтеркампани
			|				ТОГДА ИСТИНА
			|			КОГДА ВТ_ЭД.Ссылка.НаправлениеЭД = &НаправлениеВходящий
			|				ТОГДА ВТ_ЭД.ПодписанЭП
			|			КОГДА ВТ_ЭД.Ссылка.НаправлениеЭД = &НаправлениеИсходящий
			|					И НЕ ВТ_ЭД.ВидЭД В (&ВидыСлужебныхЭД)
			|				ТОГДА ВТ_ЭД.Ссылка.ВидЭД = СоглашенияЭДИсходящие.ИсходящийДокумент
			|						И СоглашенияЭДИсходящие.Формировать
			|						И СоглашенияЭДИсходящие.ИспользоватьЭП
			|						И &ИспользоватьЭП
			|			КОГДА ВТ_ЭД.ВидЭД В (&ВидыСлужебныхЭД)
			|				ТОГДА ВТ_ЭД.ВидЭД = ВТ_Сертификаты.ВидДокумента
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ
			|	И НЕ СоглашенияЭД.ПометкаУдаления
			|	И ВЫБОР
			|			КОГДА СоглашенияЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка)
			|				ТОГДА СоглашенияЭД.СтатусСоглашения = &СтатусСоглашения
			|			ИНАЧЕ СоглашенияЭД.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
			|		КОНЕЦ
			|	И ВТ_ЭД.СтатусЭД В(&МассивСтатусов)
			|	И ВЫБОР
			|			КОГДА ВТ_ЭД.Ссылка.НаправлениеЭД = &НаправлениеВходящий
			|					И ВТ_ЭД.Ссылка.ВидЭД В (&ВидыЭДСчетаФактуры)
			|				ТОГДА ЛОЖЬ
			|			ИНАЧЕ ИСТИНА
			|		КОНЕЦ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВТ.СсылкаНаЭД,
			|	ВТ.СпособОбменаЭД,
			|	ВТ.Организация,
			|	ВТ.Контрагент,
			|	ВТ.ЭтоИнтеркампани,
			|	ВТ.ТребуетсяАвторизация,
			|	ВТ.СоглашениеЭД,
			|	ВТ.ПрофильНастроекЭДО,
			|	ВТ.ЭДВладелецПодписан,
			|	ВТ.ВидЭД,
			|	ВТ.ПрограммаБанка,
			|	ВТ.ТребуетсяАутентификацияЛогинПароль,
			|	ВТ.ТребуетсяАутентификацияПоСертификату
			|ИЗ
			|	ВТ КАК ВТ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ.СсылкаНаЭД,
			|	ВТ.СертификатПодписи,
			|	ВТ.Отпечаток,
			|	ВТ.Отозван,
			|	ВТ.ОрганизацияВСертификате КАК Организация,
			|	ВТ.ДанныеСертификата КАК ДанныеСертификата,
			|	ВТ.ПрограммаБанка,
			|	ВТ.НаименованиеСертификата КАК НаименованиеСертификата,
			|	ЛОЖЬ КАК ПарольПолучен,
			|	НЕОПРЕДЕЛЕНО КАК ПарольПользователя,
			|	ВТ.ТребуетсяАутентификацияЛогинПароль
			|ИЗ
			|	ВТ КАК ВТ
			|
			|УПОРЯДОЧИТЬ ПО
			|	НаименованиеСертификата
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ.СсылкаНаЭД,
			|	ВТ.УстановленныеПодписи,
			|	Сертификаты.Организация
			|ИЗ
			|	ВТ КАК ВТ
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
			|		ПО ВТ.УстановленныеПодписи = Сертификаты.Отпечаток
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТ";
		
		МассивСтатусов = Новый Массив;
		МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
		МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ЧастичноПодписан);
		ИспользоватьЭП = ПолучитьЗначениеФункциональнойОпции("ИспользоватьЭлектронныеПодписиЭД");
		ДобавитьОтпечаткиСертификатовСбербанка(МассивОтпечатков);
		Запрос.УстановитьПараметр("МассивСтатусов",       МассивСтатусов);
		Запрос.УстановитьПараметр("СтатусСоглашения",     Перечисления.СтатусыСоглашенийЭД.Действует);
		Запрос.УстановитьПараметр("НаправлениеВходящий",  Перечисления.НаправленияЭД.Входящий);
		Запрос.УстановитьПараметр("НаправлениеИсходящий", Перечисления.НаправленияЭД.Исходящий);
		Запрос.УстановитьПараметр("МассивОтпечатков",     МассивОтпечатков);
		Запрос.УстановитьПараметр("ТекущийПользователь",  Пользователи.АвторизованныйПользователь());
		Запрос.УстановитьПараметр("ПустойПользователь",   Справочники.Пользователи.ПустаяСсылка());
		СвойстваНеуказанногоПользователя = ПользователиСлужебный.СвойстваНеуказанногоПользователя();
		Запрос.УстановитьПараметр("ПользовательНеУказан", СвойстваНеуказанногоПользователя.Ссылка);
		Запрос.УстановитьПараметр("ИспользоватьЭП",      ИспользоватьЭП);
		МассивВидовЭД = Новый Массив;
		МассивВидовЭД.Добавить(Перечисления.ВидыЭД.СчетФактура);
		МассивВидовЭД.Добавить(Перечисления.ВидыЭД.КорректировочныйСчетФактура);
		Запрос.УстановитьПараметр("ВидыЭДСчетаФактуры", МассивВидовЭД);
		ОбменСАвторизацией = Новый Массив;
		ОбменСАвторизацией.Добавить(Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском);
		ОбменСАвторизацией.Добавить(Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО);
		ОбменСАвторизацией.Добавить(Перечисления.ПрограммыБанка.АсинхронныйОбмен);
		Запрос.УстановитьПараметр("СпособыОбменаСАвторизацией", ОбменСАвторизацией);
		ВидыСлужебныхЭД = Новый Массив;
		ВидыСлужебныхЭД.Добавить(Перечисления.ВидыЭД.ИзвещениеОПолучении);
		ВидыСлужебныхЭД.Добавить(Перечисления.ВидыЭД.УведомлениеОбУточнении);
		ВидыСлужебныхЭД.Добавить(Перечисления.ВидыЭД.ПредложениеОбАннулировании);
		Запрос.УстановитьПараметр("ВидыСлужебныхЭД", ВидыСлужебныхЭД);
		СписокПрограммБанков = Новый Массив;
		СписокПрограммБанков.Добавить(Перечисления.ПрограммыБанка.iBank2);
		СписокПрограммБанков.Добавить(Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку);
		СписокПрограммБанков.Добавить(Перечисления.ПрограммыБанка.СбербанкОнлайн);
		Запрос.УстановитьПараметр("СписокПрограммБанков", СписокПрограммБанков);
		
		Запрос.Текст = ТекстОсновногоЗапроса +
			";
			 |////////////////
			 |" + ТекстЗапроса;

		// После утверждения некоторых ЭД формируется в ответ новый ЭД,
		// поэтому на подпись отправляем новый ЭД
		Если ТипЗнч(ЭД) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда
			ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭД, "ВидЭД");
			Если (ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
					ИЛИ ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
					ИЛИ ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец)
				И ЗначениеЗаполнено(НовыйЭД) Тогда
				
				МассивСсылокЭД = Новый Массив;
				МассивСсылокЭД.Добавить(НовыйЭД);
				Запрос.УстановитьПараметр("МассивСсылокЭД", МассивСсылокЭД);
			КонецЕсли;
		КонецЕсли;
		
		Результат = Запрос.ВыполнитьПакет();
		ДоступныеСертификаты = Результат[2].Выгрузить();
		ТЗ_Сертификатов = Результат[4].Выгрузить();
		ТЗ_УстановленныхПодписей = Результат[5].Выгрузить();
		Выборка = Результат[3].Выбрать();
		ТЗ_ЭД = Новый ТаблицаЗначений;
		ТЗ_ЭД.Колонки.Добавить("СсылкаНаЭД");
		ТЗ_ЭД.Колонки.Добавить("ПрофильНастроекЭДО");
		ТЗ_ЭД.Колонки.Добавить("СертификатыПодписи");
		ТЗ_ЭД.Колонки.Добавить("ТребуетсяАвторизация");
		
		Если ТЗ_Сертификатов.Количество() = 0 И ЗначениеЗаполнено(ЭД) Тогда
			ОшибкаНастройкиКриптографии = Ложь;
			ОшибкаНастройкиСертификата = Ложь;
			Если ДоступныеСертификаты[0].Количество > 0 Тогда
				ПрофильНастроекЭДО   = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭД,           "ПрофильНастроекЭДО");
				СпособОбменаЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрофильНастроекЭДО, "СпособОбменаЭД");
				Если Не ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоПрямойОбмен(СпособОбменаЭД) Тогда
					ШаблонСообщения = Нстр("ru = 'В профиле настроек ЭДО: %1
						|не найден ни один из доступных сертификатов ЭП.'");
					ТекстСообщеня = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПрофильНастроекЭДО);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
			ИначеЕсли ДопПараметры.Свойство("ОшибкаНастройкиКриптографии", ОшибкаНастройкиКриптографии)
				И ОшибкаНастройкиКриптографии Тогда
				ТекстСообщения = Нстр("ru = 'Ошибка подписания электронного документа.
											|Проверьте настройки криптографии.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);                 
				
			ИначеЕсли ДопПараметры.Свойство("ОшибкаНастройкиСертификата", ОшибкаНастройкиСертификата)
				И ОшибкаНастройкиСертификата Тогда
				ТекстСообщения = Нстр("ru = 'Ошибка подписания электронного документа.
											|Проверьте настройки сертификатов.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
			КонецЕсли;
		КонецЕсли;
		
		// Для связки ЭД, Соглашения и Сертификата, в числе прочих нужно соответствие,
		// ключом которого является ссылка на ЭД, значение - Соглашение об обмене.
		// Например, 2 ЭД могут быть подписаны 2-я сертификатами (т.е пользователь должен выбрать,
		// каким сертификатом он будет подписывать эти ЭД), при этом ЭД относятся к разным соглашениям
		// (например один - прямой обмен, другой - через оператора), если пользователь отказался подписывать
		// эти ЭД, то тот ЭД, который относится к соглашению через оператора, надо удалить из массива на отправку,
		// для этого найдем его соглашение в соответствии (ЭД - Соглашения), по соглашению найдем этот ЭД в
		// соответствии Соглашения - Массивы ЭД к отправке и удалим из массива нужный ЭД.
		СоотвЭДиСоглашений = Новый Соответствие;
		
		// Ключ - Строка (сумма УИД сертификатов: Строка(Сертификат1.УникальныйИдентификатор())
		// + Строка(Сертификат2.УникальныйИдентификатор()) + ...), Значение - Структура массивов (МассивСертификатов
		// и МассивЭД).
		// Смысл данной структуры в том, что для подписания разных ЭД возможно будет доступен одинаковый
		// набор сертификатов. Например: РТиУ может быть подписана сертификатами Сертификат1 и Сертификат2,
		// СФ так же может быть подписана сертификатами Сертификат1 и Сертификат2, при этом РТиУ сформировано
		// по соглашению1 (прямой обмен), а СФ - по соглашению2 (через ОЭДО). НЕ ПРАВИЛЬНО 2 раза спрашивать
		// пользователя, каким из 2-х сертификатов он хочет подписывать документы, поэтому, надо для этой пары
		// сертификатов сформировать массив ЭД, для подписания которых доступна именно эта пара сертификатов.
		// Чтобы сделать запись в структуре уникальной и иметь возможность искать нужную запись по ключу,
		// ключ сделан составным (в результатах запроса сертификаты упорядочены по наименованию).
		СтруктСтруктурМассивовЭДиСертификатов = Новый Структура;
		
		// Если в системе настроена немедленная отправка и есть действие "Отправить", то из подписываемых ЭД
		// надо выделить те, которые для отправки требуют авторизации (обмен через ОЭДО) и будут подписываться на клиенте.
		// Для этого ТЗ_ЭД обработаем в 2 прохода (1- ЭД требующие авторизации, 2- не требующие).
		ВыделятьЭДКОтправкеСАвторизацией = (ЭлектронныеДокументыКлиентСервер.ЕстьДействие(Действия, "Отправить")
											И НемедленнаяОтправкаЭД);
		
		МассивЭД = Новый Массив;
		Если Выборка.Количество() > 0 Тогда
			Пока Выборка.Следующий() Цикл
				СсылкаНаЭД = Выборка.СсылкаНаЭД;
				Отбор = Новый Структура("СсылкаНаЭД", СсылкаНаЭД);
				КопияТЗ = ТЗ_Сертификатов.Скопировать(Отбор);
				МассивОтпечатковИсключения = Новый Массив;
				МассивСертификатов = Новый Массив;
				Если Выборка.ЭтоИнтеркампани Тогда
					ТЗ_Отпечатков = ТЗ_УстановленныхПодписей.Скопировать(Отбор);
					Если ТЗ_Отпечатков.Количество() = 0 Тогда
						Если КопияТЗ.Количество() > 0 Тогда
							Для Каждого СтрокаСертификата Из КопияТЗ Цикл
								СтруктураСертификата = Новый Структура("СертификатПодписи, ПрограммаБанка,
									|ПарольПолучен, ПарольПользователя, Отпечаток, Отозван, ДанныеСертификата, ЗапомнитьПарольКСертификату");
								ЗаполнитьЗначенияСвойств(СтруктураСертификата, СтрокаСертификата);
								МассивСертификатов.Добавить(СтрокаСертификата.СертификатПодписи);
								ПараметрыВСоотв = СоотвСертификатовИИхСтруктур.Получить(СтрокаСертификата.СертификатПодписи);
								Если ПараметрыВСоотв <> Неопределено И ПараметрыВСоотв.ПарольПолучен Тогда
									ЗаполнитьЗначенияСвойств(СтруктураСертификата, ПараметрыВСоотв, "ПарольПолучен, ПарольПользователя");
								КонецЕсли;
								СоотвСертификатовИИхСтруктур.Вставить(СтрокаСертификата.СертификатПодписи, СтруктураСертификата);
							КонецЦикла;
							НоваяСтрока = ТЗ_ЭД.Добавить();
							НоваяСтрока.СсылкаНаЭД = СсылкаНаЭД;
							НоваяСтрока.ПрофильНастроекЭДО = Выборка.ПрофильНастроекЭДО;
							НоваяСтрока.СертификатыПодписи = МассивСертификатов;
							НоваяСтрока.ТребуетсяАвторизация = Выборка.ТребуетсяАвторизация;
							Организация2Стороны = ?(СтрокаСертификата.Организация = Выборка.Организация, Выборка.Контрагент, Выборка.Организация);
							Отбор.Вставить("Организация", Организация2Стороны);
							КопияТЗ = КопияТЗ.Скопировать(Отбор);
						КонецЕсли;
					Иначе
						МассивОтпечатковИсключения = ТЗ_Отпечатков.ВыгрузитьКолонку("УстановленныеПодписи");
						ТЗ_Отпечатков.Свернуть("Организация");
						СтрокаОтпечатка = ТЗ_Отпечатков[0];
						Если ЗначениеЗаполнено(СтрокаОтпечатка.Организация) Тогда
							Организация2Стороны = ?(СтрокаОтпечатка.Организация = Выборка.Организация, Выборка.Контрагент, Выборка.Организация);
							Отбор.Вставить("Организация", Организация2Стороны);
							КопияТЗ = КопияТЗ.Скопировать(Отбор);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли Выборка.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка Тогда
					ТЗ_Отпечатков = ТЗ_УстановленныхПодписей.Скопировать(Отбор);
					Если ТЗ_Отпечатков.Количество() > 0 Тогда
						МассивОтпечатковИсключения = ТЗ_Отпечатков.ВыгрузитьКолонку("УстановленныеПодписи");
					КонецЕсли;
				КонецЕсли;
				ЭтоСлужебный = ЭтоСлужебныйДокумент(СсылкаНаЭД);
				ИДМассиваЭД = "й";
				СтандартноеПодписание = Истина;
				Если Выборка.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка 
					И (Выборка.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн
						ИЛИ Выборка.ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку
						ИЛИ Выборка.ПрограммаБанка = Перечисления.ПрограммыБанка.iBank2) Тогда
					// В зависимости от соглашения, для подписания банковских ЭД, могут использоваться алгоритмы,
					// отличные от стандартных, поэтому добавим в идентификатор структуры УИД соглашения:
					СтандартноеПодписание = Ложь;
					ИДМассиваЭД = ИДМассиваЭД + Строка(Выборка.СоглашениеЭД.УникальныйИдентификатор());
				КонецЕсли;
				ПарольПолучен = Ложь;
				Для Каждого СтрокаСертификата Из КопияТЗ Цикл
					Если МассивОтпечатковИсключения.Найти(СтрокаСертификата.Отпечаток) <> Неопределено
						ИЛИ МассивСертификатов.Найти(СтрокаСертификата.СертификатПодписи) <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
					МассивСертификатов.Добавить(СтрокаСертификата.СертификатПодписи);
					ИДМассиваЭД = ИДМассиваЭД + Строка(СтрокаСертификата.СертификатПодписи.УникальныйИдентификатор());
					
					СтруктураСертификата = Новый Структура("СертификатПодписи, ПрограммаБанка,
						|ПарольПолучен, ПарольПользователя, Отпечаток, Отозван, ДанныеСертификата, ЗапомнитьПарольКСертификату");
					ЗаполнитьЗначенияСвойств(СтруктураСертификата, СтрокаСертификата);
					ПараметрыВСоотв = СоотвСертификатовИИхСтруктур.Получить(СтрокаСертификата.СертификатПодписи);
					Если ПараметрыВСоотв <> Неопределено И ПараметрыВСоотв.ПарольПолучен Тогда
						ПарольПолучен = Истина;
						ЗаполнитьЗначенияСвойств(СтруктураСертификата, ПараметрыВСоотв, "ПарольПолучен, ПарольПользователя");
					КонецЕсли;
					СоотвСертификатовИИхСтруктур.Вставить(СтрокаСертификата.СертификатПодписи, СтруктураСертификата);
					// Если обрабатывается служебный документ, то его можно подписать любым сертификатом,
					// в котором сохранен пароль.
					Если ЭтоСлужебный И ПарольПолучен Тогда
						МассивСертификатов = Новый Массив;
						МассивСертификатов.Добавить(СтрокаСертификата.СертификатПодписи);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если МассивСертификатов.Количество() > 0 Тогда
					Подписан = 0;
					
					Если НЕ Выборка.ЭДВладелецПодписан Тогда
						Продолжить;
					КонецЕсли;
					
					Если ПарольПолучен И ВыполнятьКриптооперацииНаСервере Тогда
						Подписан = ПодписатьЭДОпределеннымСертификатом(СсылкаНаЭД, МассивСертификатов[0], СтруктураСертификата);
						Если Подписан > 0 Тогда
							КолПодписанных = КолПодписанных + Подписан;
							// Если ЭД подписаны, то для определения сертификата авторизации и последующей отправки,
							// они будут получены запросом, на следующем этапе (Отправка ЭД).
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					НоваяСтрока = ТЗ_ЭД.Добавить();
					НоваяСтрока.СсылкаНаЭД = СсылкаНаЭД;
					НоваяСтрока.ПрофильНастроекЭДО = Выборка.ПрофильНастроекЭДО;
					НоваяСтрока.СертификатыПодписи = МассивСертификатов;
					НоваяСтрока.ТребуетсяАвторизация = Выборка.ТребуетсяАвторизация;
					
					СоотвЭДиСоглашений.Вставить(СсылкаНаЭД, Выборка.ПрофильНастроекЭДО);
					СтруктураМассивов = "";
					ИДМассиваЭД = СтрЗаменить(ИДМассиваЭД, "-", "_");
					Если НЕ СтруктСтруктурМассивовЭДиСертификатов.Свойство(ИДМассиваЭД, СтруктураМассивов)
						ИЛИ ТипЗнч(СтруктураМассивов) <> Тип("Структура") Тогда
						СтруктСтруктурМассивовЭДиСертификатов.Вставить(ИДМассиваЭД,
							Новый Структура("МассивСертификатов", МассивСертификатов));
						СтруктураМассивов = СтруктСтруктурМассивовЭДиСертификатов[ИДМассиваЭД];
					КонецЕсли;
					Если СтандартноеПодписание Тогда
						СоответствиеЭДиДД = Неопределено;
						Если НЕ СтруктураМассивов.Свойство("СоответствиеЭДиДД", СоответствиеЭДиДД)
							ИЛИ ТипЗнч(СоответствиеЭДиДД) <> Тип("Соответствие") Тогда
							СтруктураМассивов.Вставить("СоответствиеЭДиДД", Новый Соответствие);
							СоответствиеЭДиДД = СтруктураМассивов.СоответствиеЭДиДД;
						КонецЕсли;
						Если МассивСертификатов.Количество() = 1 И СтандартноеПодписание Тогда
							Значение = ПоместитьВоВременноеХранилище(ПолучитьДвоичныеДанныеФайла(СсылкаНаЭД, МассивСертификатов[0]),
								СсылкаНаЭД.УникальныйИдентификатор());
						Иначе
							Значение = Неопределено;
						КонецЕсли;
						СоответствиеЭДиДД.Вставить(СсылкаНаЭД, Значение);
					Иначе
						ДанныеДляСпецОбработки = Неопределено;
						Если НЕ СтруктСтруктурМассивовЭДиСертификатов[ИДМассиваЭД].Свойство("ДанныеДляСпецОбработки",ДанныеДляСпецОбработки)
							ИЛИ ТипЗнч(ДанныеДляСпецОбработки) <> Тип("Соответствие") Тогда
							
							СтруктСтруктурМассивовЭДиСертификатов[ИДМассиваЭД].Вставить("ДанныеДляСпецОбработки", Новый Соответствие);
							ДанныеДляСпецОбработки = СтруктСтруктурМассивовЭДиСертификатов[ИДМассиваЭД].ДанныеДляСпецОбработки;
						КонецЕсли;
						СоглашенияИЭД = ДанныеДляСпецОбработки.Получить(Выборка.ПрограммаБанка);
						Если ТипЗнч(СоглашенияИЭД) <> Тип("Соответствие") Тогда
							ДанныеДляСпецОбработки.Вставить(Выборка.ПрограммаБанка, Новый Соответствие);
							СоглашенияИЭД = ДанныеДляСпецОбработки[Выборка.ПрограммаБанка];
						КонецЕсли;
						МассивБанковскихЭД = СоглашенияИЭД.Получить(Выборка.СоглашениеЭД);
						Если ТипЗнч(МассивБанковскихЭД) <> Тип("Массив") Тогда
							СоглашенияИЭД.Вставить(Выборка.СоглашениеЭД, Новый Массив);
							МассивБанковскихЭД = СоглашенияИЭД[Выборка.СоглашениеЭД];
						КонецЕсли;
						МассивБанковскихЭД.Добавить(СсылкаНаЭД);
					КонецЕсли;
					Если ВыделятьЭДКОтправкеСАвторизацией И Выборка.ТребуетсяАвторизация Тогда
						// Подписание массива ЭД по текущему сертификату будет выполняться на клиенте, поэтому, после подписания
						// надо будет попытаться их отправить, предварительно получив сертификат аутентификации по настройке ЭДО.
						МассивЭД = СоотвСоглашенийИМассивовЭДКОтправке.Получить(Выборка.ПрофильНастроекЭДО);
						Если МассивЭД = Неопределено Тогда
							МассивЭД = Новый Массив;
						КонецЕсли;
						Если МассивЭД.Найти(СсылкаНаЭД) = Неопределено Тогда
							МассивЭД.Добавить(СсылкаНаЭД);
						КонецЕсли;
						СоотвСоглашенийИМассивовЭДКОтправке.Вставить(Выборка.ПрофильНастроекЭДО, МассивЭД);
					ИначеЕсли ВыделятьЭДКОтправкеСАвторизацией И Выборка.ТребуетсяАутентификацияПоСертификату Тогда
						// Подписание массива ЭД по текущему сертификату будет выполняться на клиенте, поэтому, после подписания
						// надо будет попытаться их отправить, предварительно получив сертификат аутентификации по настройке ЭДО.
						МассивЭД = СоотвСоглашенийИМассивовЭДКОтправкеСАутентификацейПоСертификату.Получить(Выборка.СоглашениеЭД);
						Если МассивЭД = Неопределено Тогда
							МассивЭД = Новый Массив;
						КонецЕсли;
						Если МассивЭД.Найти(СсылкаНаЭД) = Неопределено Тогда
							МассивЭД.Добавить(СсылкаНаЭД);
						КонецЕсли;
						СоотвСоглашенийИМассивовЭДКОтправкеСАутентификацейПоСертификату.Вставить(Выборка.СоглашениеЭД, МассивЭД);
					ИначеЕсли Выборка.ТребуетсяАутентификацияЛогинПароль Тогда
						МассивЭД = СоотвСоглашенийИМассивовЭДКОтправкеСАвторизацией.Получить(Выборка.СоглашениеЭД);
					
						Если МассивЭД = Неопределено Тогда
							МассивЭД = Новый Массив;
						КонецЕсли;
						Если МассивЭД.Найти(СсылкаНаЭД) = Неопределено Тогда
							МассивЭД.Добавить(СсылкаНаЭД);
						КонецЕсли;
						СоотвСоглашенийИМассивовЭДКОтправкеСАвторизацией.Вставить(Выборка.СоглашениеЭД, МассивЭД);
					ИначеЕсли Выборка.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн Тогда
						Если СтруктураКОтправке.ЧерезТокенСбербанка.Найти(СсылкаНаЭД) = Неопределено Тогда
							СтруктураКОтправке.ЧерезТокенСбербанка.Добавить(СсылкаНаЭД);
						КонецЕсли;
					Иначе
						// Подписание массива ЭД по текущему сертификату будет выполняться на клиенте, поэтому, после подписания
						// надо будет подготовить их к отправке и при необходимости отправить.
						Если СтандартноеПодписание Тогда
							Для Каждого Элемент Из СоответствиеЭДиДД Цикл
								Если СтруктураКОтправке.СПодписью.Найти(Элемент.Ключ) = Неопределено Тогда
									СтруктураКОтправке.СПодписью.Добавить(Элемент.Ключ);
								КонецЕсли;
							КонецЦикла;
						Иначе
							Для Каждого Элемент Из МассивБанковскихЭД Цикл
								Если СтруктураКОтправке.СПодписью.Найти(Элемент) = Неопределено Тогда
									СтруктураКОтправке.СПодписью.Добавить(Элемент);
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если КолПодписанных > 0 Тогда
			СтруктураВозврата.Вставить("КолПодписанных", КолПодписанных);
		КонецЕсли;
		Если СоотвЭДиСоглашений.Количество() > 0 Тогда
			СтруктураВозврата.Вставить("СоотвЭДиСоглашений", СоотвЭДиСоглашений);
		КонецЕсли;
		Если СтруктСтруктурМассивовЭДиСертификатов.Количество() > 0 Тогда
			СтруктураВозврата.Вставить("СтруктСтруктурМассивовЭДиСертификатов", СтруктСтруктурМассивовЭДиСертификатов);
		КонецЕсли;
	КонецЕсли;
	
	// Отправка ЭД:
	СоотвСоглашенийИСертификатовАвторизации = Новый Соответствие;
	СтруктураВозврата.Вставить("СоотвСоглашенийИСертификатовАвторизации", СоотвСоглашенийИСертификатовАвторизации);
	
	КолОтправленных = 0;
	КолПодготовленных = 0;
	Если ЭлектронныеДокументыКлиентСервер.ЕстьДействие(Действия, "Отправить") Тогда
		
		СтМассивовСтруктурСертификатов = Новый Структура("МассивОтпечатковКлиент", МассивОтпечатковКлиент);
		// Обработаем массивы ЭД (сформированные на этапе подписания ЭД), которые будут подписаны позже
		// и для отправки которых нужны сертификаты авторизации:
		Если СоотвСоглашенийИМассивовЭДКОтправке.Количество() > 0 Тогда
			МассивПрофилейНастроекЭДО = Новый Массив;
			Для Каждого Элемент Из СоотвСоглашенийИМассивовЭДКОтправке Цикл
				МассивПрофилейНастроекЭДО.Добавить(Элемент.Ключ);
			КонецЦикла;
			СоотвСоглашенийИСоответствийСертификатовИПараметров = СоотвСоглашенийИСоответствийСертификатовИПараметровДляАвторизацииСервер(
				МассивПрофилейНастроекЭДО,
				СтМассивовСтруктурСертификатов,
				СоотвСертификатовИПаролей);
			// Если есть сертификат авторизации, то попытаемся, после подписания массива ЭД на клиенте,
			// сразу же отправить ЭД, иначе, после подписания, ЭД упакуем в ПЭД и поместим в очередь на отправку.
			Для Каждого Элемент Из СоотвСоглашенийИМассивовЭДКОтправке Цикл
				ПрофильНастроекЭДО = Элемент.Ключ;
				РеквизитыПрофиляНастроекЭДО = ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыПрофиляНастроекЭДО(ПрофильНастроекЭДО);
				
				СоотвСертификатовИПараметров = СоотвСоглашенийИСоответствийСертификатовИПараметров.Получить(ПрофильНастроекЭДО);
				Для Каждого КлючИЗначение Из СоотвСертификатовИПараметров Цикл
					Сертификат           = КлючИЗначение.Ключ;
					СтруктураСертификата = КлючИЗначение.Значение;
					
					МаркерРасшифрованный = Неопределено;
					МаркерЗашифрованный = Неопределено;
					Если ТипЗнч(СтруктураСертификата) = Тип("Структура")
						И (СтруктураСертификата.Свойство("МаркерРасшифрованный", МаркерРасшифрованный)
							ИЛИ СтруктураСертификата.Свойство("МаркерЗашифрованный", МаркерЗашифрованный))
						И (ЗначениеЗаполнено(МаркерРасшифрованный) ИЛИ ЗначениеЗаполнено(МаркерЗашифрованный)) Тогда
						
						СоотвСертификатовИИхСтруктур.Вставить(Строка(Сертификат.УникальныйИдентификатор()) + "_" + РеквизитыПрофиляНастроекЭДО.ИдентификаторОрганизации,
							СтруктураСертификата);
							
						МассивСертификатов = СоотвСоглашенийИСертификатовАвторизации.Получить(ПрофильНастроекЭДО);
						Если МассивСертификатов = Неопределено Тогда
							МассивСертификатов = Новый Массив;
							СоотвСоглашенийИСертификатовАвторизации.Вставить(ПрофильНастроекЭДО, МассивСертификатов);
						КонецЕсли;
						МассивСертификатов.Добавить(Сертификат);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		Если СоотвСоглашенийИМассивовЭДКОтправкеСАутентификацейПоСертификату.Количество() > 0 Тогда
			МассивНастроекЭДО = Новый Массив;
			Для Каждого Элемент Из СоотвСоглашенийИМассивовЭДКОтправкеСАутентификацейПоСертификату Цикл
				МассивНастроекЭДО.Добавить(Элемент.Ключ);
			КонецЦикла;
			СоотвСоглашенийИСоответствийСертификатовИПараметров = СоотвСоглашенийИСоответствийСертификатовИПараметровДляАвторизацииСервер(
				МассивНастроекЭДО, СтМассивовСтруктурСертификатов, СоотвСертификатовИПаролей, Истина);
			// Если есть сертификат авторизации, то попытаемся, после подписания массива ЭД на клиенте,
			// сразу же отправить ЭД, иначе, после подписания, ЭД упакуем в ПЭД и поместим в очередь на отправку.
			Для Каждого Элемент Из СоотвСоглашенийИМассивовЭДКОтправкеСАутентификацейПоСертификату Цикл
				ПрофильНастроекЭДО = Элемент.Ключ;
				РеквизитыПрофиляНастроекЭДО = ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыПрофиляНастроекЭДО(ПрофильНастроекЭДО);
				
				СоотвСертификатовИПараметров = СоотвСоглашенийИСоответствийСертификатовИПараметров.Получить(ПрофильНастроекЭДО);
				Для Каждого КлючИЗначение Из СоотвСертификатовИПараметров Цикл
					Сертификат           = КлючИЗначение.Ключ;
					СтруктураСертификата = КлючИЗначение.Значение;
					
					МаркерРасшифрованный = Неопределено;
					МаркерЗашифрованный = Неопределено;
					Если ТипЗнч(СтруктураСертификата) = Тип("Структура")
						И (СтруктураСертификата.Свойство("МаркерРасшифрованный", МаркерРасшифрованный)
							ИЛИ СтруктураСертификата.Свойство("МаркерЗашифрованный", МаркерЗашифрованный))
						И (ЗначениеЗаполнено(МаркерРасшифрованный) ИЛИ ЗначениеЗаполнено(МаркерЗашифрованный)) Тогда
						
						Если РеквизитыПрофиляНастроекЭДО.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка Тогда
							Ключ = Сертификат;
						Иначе
							Ключ = Строка(Сертификат.УникальныйИдентификатор()) + "_"
								+ РеквизитыПрофиляНастроекЭДО.ИдентификаторОрганизации;
						КонецЕсли;
						
						СоотвСертификатовИИхСтруктур.Вставить(Ключ, СтруктураСертификата);
							
						МассивСертификатов = СоотвСоглашенийИСертификатовАвторизации.Получить(ПрофильНастроекЭДО);
						Если МассивСертификатов = Неопределено Тогда
							МассивСертификатов = Новый Массив;
							СоотвСоглашенийИСертификатовАвторизации.Вставить(ПрофильНастроекЭДО, МассивСертификатов);
						КонецЕсли;
						МассивСертификатов.Добавить(Сертификат);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		СтруктураВозврата.Вставить("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур);
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВТ_ЭД.Ссылка КАК СсылкаНаЭД,
		|	ВТ_ЭД.СтатусЭД,
		|	ВТ_ЭД.ПрофильНастроекЭДО,
		|	СоглашенияЭД.Ссылка КАК СоглашениеЭД,
		|	СоглашенияЭДИсходящие.СпособОбменаЭД,
		|	ВЫБОР
		|		КОГДА СоглашенияЭДИсходящие.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)
		|				ИЛИ СоглашенияЭДИсходящие.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ТребуетсяАвторизация,
		|	ВЫБОР
		|		КОГДА СоглашенияЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка)
		|				И СоглашенияЭД.ПрограммаБанка = ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.АсинхронныйОбмен)
		|				И НЕ СоглашенияЭД.АутентификацияПоСертификату
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ТребуетсяАвторизацияЛогинПароль,
		|	ВЫБОР
		|		КОГДА СоглашенияЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка)
		|				И СоглашенияЭД.ПрограммаБанка = ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.СбербанкОнлайн)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ТребуетсяТокенСбербанка,
		|	ВЫБОР
		|		КОГДА СоглашенияЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка)
		|				И СоглашенияЭД.ПрограммаБанка = ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.АсинхронныйОбмен)
		|				И СоглашенияЭД.ИспользуетсяКриптография
		|				И СоглашенияЭД.АутентификацияПоСертификату
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ТребуетсяАутентификацияПоСертификату,
		|	ВЫБОР
		|		КОГДА СоглашенияЭДИсходящие.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)
		|				ИЛИ СоглашенияЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО)
		|				ИЛИ СоглашенияЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка)
		|					И СоглашенияЭД.ИспользуетсяКриптография
		|				ИЛИ СоглашенияЭД.ЭтоИнтеркампани
		|				ИЛИ ВТ_ЭД.НаправлениеЭД = &НаправлениеВходящий
		|					И ВТ_ЭД.ПодписанЭП
		|				ИЛИ ВТ_ЭД.НаправлениеЭД = &НаправлениеИсходящий
		|					И СоглашенияЭДИсходящие.ИспользоватьЭП
		|					И &ИспользоватьЭП
		|			ТОГДА ИСТИНА
		|		КОГДА ВТ_ЭД.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ИзвещениеОПолучении)
		|				ИЛИ ВТ_ЭД.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.УведомлениеОбУточнении)
		|			ТОГДА ВЫБОР
		|					КОГДА ЕСТЬNULL(ЭДВладелецЭД.ПодписанЭП, ЛОЖЬ)
		|						ТОГДА НЕ ВТ_ЭД.ПодписанЭП
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ТребуетсяПодпись,
		|	ВЫБОР
		|		КОГДА СоглашенияЭДИсходящие.СпособОбменаЭД <> ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)
		|				И СоглашенияЭДИсходящие.СпособОбменаЭД <> ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО)
		|				И НЕ СоглашенияЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка)
		|				И НЕ СоглашенияЭД.ЭтоИнтеркампани
		|				И НЕ СоглашенияЭД.СертификатОрганизацииДляРасшифровки = &ПустаяСсылкаНаСертификат
		|				И &ИспользоватьЭП
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ТребуетсяШифрование
		|ИЗ
		|	ВТ_ЭД КАК ВТ_ЭД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияЭД
		|		ПО ВТ_ЭД.СоглашениеЭД = СоглашенияЭД.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияЭДИсходящие
		|		ПО ВТ_ЭД.СоглашениеЭД = СоглашенияЭДИсходящие.Ссылка
		|			И ВТ_ЭД.ВидЭД = СоглашенияЭДИсходящие.ИсходящийДокумент
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДВладелецЭД
		|		ПО ВТ_ЭД.ЭлектронныйДокументВладелец = ЭДВладелецЭД.Ссылка
		|ГДЕ
		|	ВЫБОР
		|			КОГДА СоглашенияЭДИсходящие.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)
		|					ИЛИ СоглашенияЭДИсходящие.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО)
		|					ИЛИ СоглашенияЭД.ЭтоИнтеркампани
		|					ИЛИ ВТ_ЭД.НаправлениеЭД = &НаправлениеВходящий
		|						И ВТ_ЭД.ПодписанЭП
		|					ИЛИ ВТ_ЭД.НаправлениеЭД = &НаправлениеИсходящий
		|						И НЕ ВТ_ЭД.ВидЭД В (&ВидыСлужебныхЭД)
		|						И СоглашенияЭДИсходящие.ИспользоватьЭП
		|						И &ИспользоватьЭП
		|						И НЕ ВТ_ЭД.ВидЭД В (&ВидыСлужебныхЭД)
		|				ТОГДА ВТ_ЭД.СтатусЭД В (&СтатусыКОтправкеСПодписью)
		|			КОГДА ВТ_ЭД.НаправлениеЭД = &НаправлениеИсходящий
		|					И (НЕ СоглашенияЭДИсходящие.ИспользоватьЭП
		|						ИЛИ НЕ &ИспользоватьЭП)
		|					И (СоглашенияЭДИсходящие.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка)
		|							И НЕ СоглашенияЭД.ИспользуетсяКриптография
		|						ИЛИ НЕ СоглашенияЭДИсходящие.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка))
		|				ТОГДА ВТ_ЭД.СтатусЭД В (&СтатусыКОтправкеБезПодписи)
		|			КОГДА ВТ_ЭД.НаправлениеЭД = &НаправлениеИсходящий
		|					И ВТ_ЭД.ВидЭД В (&ВидыСлужебныхЭД)
		|				ТОГДА ВЫБОР
		|						КОГДА ЭДВладелецЭД.ПодписанЭП
		|							ТОГДА ВТ_ЭД.СтатусЭД В (&СтатусыКОтправкеСПодписью)
		|						ИНАЧЕ ВТ_ЭД.СтатусЭД В (&СтатусыКОтправкеБезПодписи)
		|					КОНЕЦ
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ";
		МассивСтатусовСПодписью = Новый Массив;
		МассивСтатусовСПодписью.Добавить(Перечисления.СтатусыЭД.Подписан);
		
		МассивСтатусовБезПодписи = Новый Массив;
		МассивСтатусовБезПодписи.Добавить(Перечисления.СтатусыЭД.Утвержден);
			
		Если Действия = "ОтправитьПовторно" Тогда
			МассивСтатусовСПодписью.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
			МассивСтатусовБезПодписи.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
			МассивСтатусовСПодписью.Добавить(Перечисления.СтатусыЭД.Отправлен);
			МассивСтатусовБезПодписи.Добавить(Перечисления.СтатусыЭД.Отправлен);
			МассивСтатусовСПодписью.Добавить(Перечисления.СтатусыЭД.Доставлен);
			МассивСтатусовБезПодписи.Добавить(Перечисления.СтатусыЭД.Доставлен);
			МассивСтатусовСПодписью.Добавить(Перечисления.СтатусыЭД.ПереданОператору);
			МассивСтатусовБезПодписи.Добавить(Перечисления.СтатусыЭД.ПереданОператору);
			МассивСтатусовСПодписью.Добавить(Перечисления.СтатусыЭД.ПолученоПодтверждениеОператора);
			МассивСтатусовБезПодписи.Добавить(Перечисления.СтатусыЭД.ПолученоПодтверждениеОператора);
		КонецЕсли;
		
		ИспользоватьЭП = ПолучитьЗначениеФункциональнойОпции("ИспользоватьЭлектронныеПодписиЭД");
		
		Запрос.УстановитьПараметр("НаправлениеВходящий",        Перечисления.НаправленияЭД.Входящий);
		Запрос.УстановитьПараметр("НаправлениеИсходящий",       Перечисления.НаправленияЭД.Исходящий);
		Запрос.УстановитьПараметр("СтатусыКОтправкеБезПодписи", МассивСтатусовБезПодписи);
		Запрос.УстановитьПараметр("СтатусыКОтправкеСПодписью",  МассивСтатусовСПодписью);
		Запрос.УстановитьПараметр("ИспользоватьЭП",             ИспользоватьЭП);
		Запрос.УстановитьПараметр("ПустаяСсылкаНаСертификат",
			Справочники.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка());
		ВидыСлужебныхЭД = Новый Массив;
		ВидыСлужебныхЭД.Добавить(Перечисления.ВидыЭД.ИзвещениеОПолучении);
		ВидыСлужебныхЭД.Добавить(Перечисления.ВидыЭД.УведомлениеОбУточнении);
		ВидыСлужебныхЭД.Добавить(Перечисления.ВидыЭД.ПредложениеОбАннулировании);
		Запрос.УстановитьПараметр("ВидыСлужебныхЭД", ВидыСлужебныхЭД);
		
		// После утверждения входящего ЭД, вида "Торг12Продавец", формируется новый ЭД,
		// который и должен отправиться на другую сторону.
		
		Если ТипЗнч(ЭД) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда
			ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭД, "ВидЭД");
			Если (ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
					ИЛИ ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
					ИЛИ ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец)
				И ЗначениеЗаполнено(НовыйЭД) Тогда
				
				МассивСсылокЭД = Новый Массив;
				МассивСсылокЭД.Добавить(НовыйЭД);
				Запрос.УстановитьПараметр("МассивСсылокЭД", МассивСсылокЭД);
			КонецЕсли;
		КонецЕсли;
		
		Запрос.Текст = ТекстОсновногоЗапроса 
						+ "
						|;
						|//////////
						|" + ТекстЗапроса;

		Тз_Эд_КОтправке = Запрос.Выполнить().Выгрузить();
		
		КолОтправленных = 0;
		КолПодготовленных = 0;
		Если Тз_Эд_КОтправке.Количество() > 0 Тогда
			Тз_Эд_СШифрованием = Тз_Эд_КОтправке.СкопироватьКолонки();
			Если НЕ ВыполнятьКриптооперацииНаСервере Тогда
				// Скопируем в отдельную таблицу ЭД, которые надо шифровать на клиенте
				// и удалим эти строки из таблицы ЭД к отправке:
				Отбор = Новый Структура("ТребуетсяШифрование", Истина);
				Тз_Эд_СШифрованием = ТЗ_ЭД_КОтправке.Скопировать(Отбор);
				Отбор = Новый Структура("ТребуетсяШифрование", Ложь);
				Тз_Эд_КОтправке = ТЗ_ЭД_КОтправке.Скопировать(Отбор);
			КонецЕсли;
			Отбор = Новый Структура("ТребуетсяПодпись, ТребуетсяАвторизацияЛогинПароль", Ложь, Ложь);
			ВремТЗ = Тз_Эд_КОтправке.Скопировать(Отбор);
			СтруктураКОтправке.Вставить("БезПодписи", ВремТЗ.ВыгрузитьКолонку("СсылкаНаЭД"));
			
			Если Не НемедленнаяОтправкаЭД Тогда
				// Если используется отложенная отправка, то авторизация на сервере ОЭДО, на текущем этапе, не нужна.
				// Следовательно, ЭД передаваемые через ОЭДО, передаются на формирование ПЭД без сертификатов авторизации.
				Отбор = Новый Структура("ТребуетсяПодпись", Истина);
				ВремТЗ = Тз_Эд_КОтправке.Скопировать(Отбор);
				МассивПодписанныхЭДКОтправке = ВремТЗ.ВыгрузитьКолонку("СсылкаНаЭД");
				Для Каждого Элемент Из МассивПодписанныхЭДКОтправке Цикл
					СтруктураКОтправке.СПодписью.Добавить(Элемент);
				КонецЦикла;
				
				// Для обмена с банком по схеме логин-пароль требуется подготовить пакет к отправке
				Отбор = Новый Структура("ТребуетсяАвторизацияЛогинПароль", Истина);
				ВремТЗ = Тз_Эд_КОтправке.Скопировать(Отбор);
				МассивЭДДляПодготовкиКОтправке = ВремТЗ.ВыгрузитьКолонку("СсылкаНаЭД");
				Для Каждого Элемент Из МассивЭДДляПодготовкиКОтправке Цикл
					СтруктураКОтправке.БезПодписи.Добавить(Элемент);
				КонецЦикла;
			Иначе
				Отбор = Новый Структура("ТребуетсяАвторизация, ТребуетсяПодпись", Ложь, Истина);
				ВремТз = Тз_Эд_КОтправке.Скопировать(Отбор);
				МассивПодписанныхЭДКОтправке = ВремТз.ВыгрузитьКолонку("СсылкаНаЭД");
				Для Каждого Элемент Из МассивПодписанныхЭДКОтправке Цикл
					Если СтруктураКОтправке.СПодписью.Найти(Элемент) = Неопределено Тогда
						СтруктураКОтправке.СПодписью.Добавить(Элемент);
					КонецЕсли;
				КонецЦикла;
				
				Отбор = Новый Структура("ТребуетсяАвторизация", Истина);
				ВремТз = Тз_Эд_КОтправке.Скопировать(Отбор);
				ТзПрофилейНастроекЭДО = ВремТз.Скопировать();
				ТзПрофилейНастроекЭДО.Свернуть("ПрофильНастроекЭДО");
				МассивПрофилейНастроекЭДО = ТзПрофилейНастроекЭДО.ВыгрузитьКолонку("ПрофильНастроекЭДО");
				Если МассивПрофилейНастроекЭДО.Количество() > 0 Тогда
					СоотвСоглашенийИСоответствийСертификатов = СоотвСоглашенийИСоответствийСертификатовИПараметровДляАвторизацииСервер(
					                                                                 МассивПрофилейНастроекЭДО,
					                                                                 СтМассивовСтруктурСертификатов,
					                                                                 СоотвСертификатовИПаролей);
				КонецЕсли;
				// Если есть расшифрованные маркеры по сертификатам авторизации,
				// то здесь же отправим ЭД по данным сертификатам.
				МассивЭДКОтправкеССервера = Новый Массив;
				ЛокальноеСоотвСоглашенийИСтруктур = Новый Соответствие;
				
				Для Каждого ПрофильНастроекЭДО Из МассивПрофилейНастроекЭДО Цикл
					РеквизитыПрофиляНастроекЭДО = ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыПрофиляНастроекЭДО(ПрофильНастроекЭДО);
					
					СоответствиеСертификатов = СоотвСоглашенийИСоответствийСертификатов.Получить(ПрофильНастроекЭДО);
					Отбор = Новый Структура("ПрофильНастроекЭДО", ПрофильНастроекЭДО);
					ВремТЗПоПрофилюНастроекЭДО = ВремТз.Скопировать(Отбор);
					Если ВремТЗПоПрофилюНастроекЭДО.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
					МассивЭД = ВремТЗПоПрофилюНастроекЭДО.ВыгрузитьКолонку("СсылкаНаЭД");
					Если Не ЗначениеЗаполнено(СоответствиеСертификатов)
						Или СоответствиеСертификатов.Количество() = 0 Тогда
						// Если нет сертификата авторизации, то передадим массив ЭД на формирование ПЭД,
						// далее, ПЭД встанет в очередь на отправку (отложенная отправка).
						Для Каждого СсылкаНаЭД Из МассивЭД Цикл
							СтруктураКОтправке.СПодписью.Добавить(СсылкаНаЭД);
						КонецЦикла;
						Продолжить;
					КонецЕсли;
					
					ОтправкаССервера = Ложь;
					Для Каждого КлючИЗначение Из СоответствиеСертификатов Цикл
						Сертификат           = КлючИЗначение.Ключ;
						СтруктураСертификата = КлючИЗначение.Значение;
						
						МаркерРасшифрованный = Неопределено;
						МаркерЗашифрованный = Неопределено;
						Если ТипЗнч(СтруктураСертификата) = Тип("Структура")
							И (СтруктураСертификата.Свойство("МаркерРасшифрованный", МаркерРасшифрованный)
								ИЛИ СтруктураСертификата.Свойство("МаркерЗашифрованный", МаркерЗашифрованный))
							И (ЗначениеЗаполнено(МаркерРасшифрованный) ИЛИ ЗначениеЗаполнено(МаркерЗашифрованный)) Тогда
							
							Если ЗначениеЗаполнено(МаркерРасшифрованный) Тогда
								Для Каждого СсылкаНаЭД Из МассивЭД Цикл
									МассивЭДКОтправкеССервера.Добавить(СсылкаНаЭД);
								КонецЦикла;
								ЛокальноеСоотвСоглашенийИСтруктур.Вставить(ПрофильНастроекЭДО, СтруктураСертификата);
								ОтправкаССервера = Истина;
								Прервать;
							Иначе
								СоотвСертификатовИИхСтруктур.Вставить(Строка(Сертификат.УникальныйИдентификатор()) + "_" + РеквизитыПрофиляНастроекЭДО.ИдентификаторОрганизации,
									СтруктураСертификата);
									
								МассивСертификатов = СоотвСоглашенийИСертификатовАвторизации.Получить(ПрофильНастроекЭДО);
								Если МассивСертификатов = Неопределено Тогда
									МассивСертификатов = Новый Массив;
									СоотвСоглашенийИСертификатовАвторизации.Вставить(ПрофильНастроекЭДО, МассивСертификатов);
								КонецЕсли;
								МассивСертификатов.Добавить(Сертификат);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
					Если ОтправкаССервера Тогда
						Продолжить;
					Иначе
						// По данному соглашению может быть массив, ожидающих подписи на клиенте, ЭД.
						// Данная ситуация может получиться, когда в журнале документов выбрана группа документов ИБ
						// с разными статусами ЭД (утвержден и подписан), тогда с предыдущего этапа (Подписание ЭД)
						// в соответствии соглашений и массивов придет массив ЭД на подпись, а на текущем этапе
						// будет сформирован массив ЭД к отправке.
						// Чтобы не затереть массив ЭД на подпись, добавим ЭД к отправке в существующий массив:
						МассивЭДОжидающихПодписи = СоотвСоглашенийИМассивовЭДКОтправке.Получить(ПрофильНастроекЭДО);
						Если МассивЭДОжидающихПодписи = Неопределено Тогда
							МассивЭДОжидающихПодписи = Новый Массив;
						КонецЕсли;
						Для Каждого ЭлементКОтправке Из МассивЭД Цикл
							МассивЭДОжидающихПодписи.Добавить(ЭлементКОтправке);
						КонецЦикла;
						СоотвСоглашенийИМассивовЭДКОтправке.Вставить(ПрофильНастроекЭДО, МассивЭДОжидающихПодписи);
					КонецЕсли;
				КонецЦикла;
				
				// Используется для отправки документов в банк по схеме логин-пароль
				МассивЭДКОтправкеССервераБезПодписи = Новый Массив;
				Отбор = Новый Структура("ТребуетсяАвторизацияЛогинПароль", Истина);
				ВремТз = Тз_Эд_КОтправке.Скопировать(Отбор);
				ТзСоглашений = ВремТз.Скопировать();
				ТзСоглашений.Свернуть("СоглашениеЭД");
				МассивСоглашений = ТЗСоглашений.ВыгрузитьКолонку("СоглашениеЭД");
				Для Каждого СоглашениеЭД Из МассивСоглашений Цикл
					Отбор = Новый Структура("СоглашениеЭД", СоглашениеЭД);
					ВремТЗПоСоглашению = ВремТз.Скопировать(Отбор);
					Если ВремТЗПоСоглашению.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
					МассивЭД = ВремТзПоСоглашению.ВыгрузитьКолонку("СсылкаНаЭД");
					Если ЗначениеЗаполнено(СоотвСертификатовИПаролей)
						И НЕ СоотвСертификатовИПаролей.Получить(СоглашениеЭД) = Неопределено
						И НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СоглашениеЭД, "ПрограммаБанка") = Перечисления.ПрограммыБанка.АсинхронныйОбмен Тогда
						ЛокальноеСоотвСоглашенийИСтруктур.Вставить(СоглашениеЭД, СоотвСертификатовИПаролей.Получить(СоглашениеЭД));
						ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивЭДКОтправкеССервераБезПодписи, МассивЭД);
					Иначе
						СоотвСоглашенийИМассивовЭДКОтправкеСАвторизацией.Вставить(СоглашениеЭД, МассивЭД);
					КонецЕсли;
				КонецЦикла;
				
				Если МассивЭДКОтправкеССервераБезПодписи.Количество() > 0 Тогда
					СтРезультата = СоздатьИОтправитьДокументыПЭД(
						МассивЭДКОтправкеССервераБезПодписи, Ложь, ЛокальноеСоотвСоглашенийИСтруктур);
					КолОтправленных = КолОтправленных + СтРезультата.КолОтправленных;
					КолПодготовленных = КолПодготовленных + СтРезультата.КолПодготовленных;
				КонецЕсли;
				
				Если МассивЭДКОтправкеССервера.Количество() > 0 Тогда
					СтРезультата = СоздатьИОтправитьДокументыПЭД(МассивЭДКОтправкеССервера, Истина, ЛокальноеСоотвСоглашенийИСтруктур);
					КолОтправленных = КолОтправленных + СтРезультата.КолОтправленных;
					КолПодготовленных = КолПодготовленных + СтРезультата.КолПодготовленных;
				КонецЕсли;
			КонецЕсли;
			Для Каждого Элемент Из СтруктураКОтправке Цикл
				МассивКОтправке = Новый Массив;
				СтруктураКОтправке.Свойство(Элемент.Ключ, МассивКОтправке);
				ПризнакПодписи = (Элемент.Ключ = "СПодписью");
				МассивЭД = Элемент.Значение;
				Если ТипЗнч(МассивЭД) = Тип("Массив") И МассивЭД.Количество() > 0 Тогда
					СтРезультата = СоздатьИОтправитьДокументыПЭД(МассивЭД, ПризнакПодписи);
					КолОтправленных = КолОтправленных + СтРезультата.КолОтправленных;
					КолПодготовленных = КолПодготовленных + СтРезультата.КолПодготовленных;
					МассивКОтправке = СтРезультата.МассивПакетовДляОбработкиНаКлиенте;
				КонецЕсли;
				МассивЭД = Новый Массив;
				// Добавим в структуру ЭД, которые надо шифровать на клиенте:
				Если ТЗ_ЭД_СШифрованием.Количество() > 0 Тогда
					Отбор = Новый Структура("ТребуетсяПодпись", ПризнакПодписи);
					ВремТЗ = ТЗ_ЭД_СШифрованием.Скопировать(Отбор);
					МассивЭД = ВремТЗ.ВыгрузитьКолонку("СсылкаНаЭД");
				КонецЕсли;
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивКОтправке, МассивЭД, Истина);
				СтруктураКОтправке.Вставить(Элемент.Ключ, МассивКОтправке);
			КонецЦикла;
		КонецЕсли;
		СтруктураКОтправке.Вставить("САвторизацией", СоотвСоглашенийИМассивовЭДКОтправке);
		СтруктураКОтправке.Вставить("САвторизациейЛогинПароль", СоотвСоглашенийИМассивовЭДКОтправкеСАвторизацией);
		СтруктураКОтправке.Вставить("САутентификациейПоСертификату",
			СоотвСоглашенийИМассивовЭДКОтправкеСАутентификацейПоСертификату);

		СтруктураВозврата.Вставить("КолОтправленных", КолОтправленных);
		СтруктураВозврата.Вставить("КолПодготовленных", КолПодготовленных);
		СтруктураВозврата.Вставить("СтруктураКОтправке", СтруктураКОтправке);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(МассивСсылокНаОбъект) Тогда
		Если ТипЗнч(ДопПараметры)= Тип("Структура") Тогда
			ДопПараметры.Вставить("ЕстьОбработанныеЭД",
				(КолНовыхЭД + КолУтвержденныхЭД + КолПодписанных + КолПодготовленных + КолОтправленных) > 0);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Только для внутреннего использования
Функция ОтправитьИПолучитьДокументы(СоотвСоглашенийИСтруктурСертификатов, ПовторноеПолучение = Ложь) Экспорт
	
	СтруктураВозврата = Новый Структура;
	Если НЕ ПовторноеПолучение Тогда
		КолОтправленныхПакетов = ЭлектронныеДокументыСлужебный.ОтправкаСформированныхЭД(
													СоотвСоглашенийИСтруктурСертификатов);
		СтруктураВозврата.Вставить("КолОтправленныхПакетов", КолОтправленныхПакетов);
	КонецЕсли;
	
	НовыеДокументы = ЭлектронныеДокументыСлужебный.ПолучитьНовыеЭД(
												СоотвСоглашенийИСтруктурСертификатов,
												ПовторноеПолучение);
	
	ДополнитьПакетамиКРаспаковке(НовыеДокументы.ПараметрыРаспаковки);
	
	СтруктураВозврата.Вставить("НовыеДокументы", НовыеДокументы);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Обрабатывает подтверждения документов, состоящие из электронно-цифровой подписи.
//
// Параметры:
//  СоответствиеФайлПараметры - Соответствие, связывающее имена файлов данных и файлов электронных цифровых подписей к
//                              ним.
//  ПакетЭДСсылка - ДокументСсылка.ПакетЭД, ссылка на пакет электронных документов, содержащий подтверждение.
//  ФайлыПакета - Соответствие - данные файлов пакета
//     * Ключ - Строка - имя файла пакета
//     * Значение - Строка - ссылка на хранилище двоичных данных файла
//  МассивЭДИДанныхПодписей - Массив, элементами массива является структура, содержащая ссылку на ЭД и двоичные данные
//                            подписи для последующей обработки на клиенте
//
Функция ОбработатьПодтвержденияДокументовНаСервере(
				СоответствиеФайлПараметры,
				ПакетЭДСсылка,
				ФайлыПакета,
				МассивЭДИДанныхПодписей = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	МассивЭДИДанныхПодписей = Новый Массив;
	
	МассивВозврата = Новый Массив;
	ПакетЭДОбъект = ПакетЭДСсылка.ПолучитьОбъект();
	// Попытаемся получить настройки криптографии.
	ВыполнятьКриптооперацииНаСервере = ВыполнятьКриптооперацииНаСервере();
	
	Если ВыполнятьКриптооперацииНаСервере Тогда
		МенеджерКриптографии = ПолучитьМенеджерКриптографии();
	КонецЕсли;
	
	// Подтверждением считаем подпись без файла (в соответствии - ключ с файлом подписи)
	Для Каждого ЭлементСоответствие Из СоответствиеФайлПараметры Цикл
		Если Найти(ЭлементСоответствие.Ключ, ".p7s") > 0 Тогда
			НаправлениеИскомогоДокумента = Перечисления.НаправленияЭД.Исходящий;
			
			СсылкаНаФайл = ФайлыПакета.Получить(ЭлементСоответствие.Ключ);
			
			Если СсылкаНаФайл = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ДвоичныеДанныеПодписи = ПолучитьИзВременногоХранилища(СсылкаНаФайл);
			
			УникальныйИД = Неопределено;
			Если НЕ ЭлементСоответствие.Значение.Свойство("НомерЭДТИ", УникальныйИД) Тогда
				ЭлементСоответствие.Значение.Свойство("УникальныйИД", УникальныйИД);
			КонецЕсли;
			СтруктураПараметровПоиска = Новый Структура;
			СтруктураПараметровПоиска.Вставить("УникальныйИД",        УникальныйИД);
			СтруктураПараметровПоиска.Вставить("НаправлениеЭД",       НаправлениеИскомогоДокумента);
			КодТранзакции = "";
			Если ЭлементСоответствие.Значение.Свойство("КодТранзакции", КодТранзакции)
				И КодТранзакции = "CancellationOfferResign" Тогда
				СтруктураПараметровПоиска.Вставить("ВидЭД", Перечисления.ВидыЭД.ПредложениеОбАннулировании);
			Иначе
				СтруктураПараметровПоиска.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
			КонецЕсли;
			ЭлектронныйДокумент = ЭлектронныеДокументыСлужебный.ОпределитьЭлектронныйДокумент(СтруктураПараметровПоиска);
			Если НЕ ЗначениеЗаполнено(ЭлектронныйДокумент) И ТипЗнч(ЭлементСоответствие.Значение) = Тип("Структура")
				И ЭлементСоответствие.Значение.Свойство("КодРегламента") И СтрДлина(УникальныйИД) = 36 Тогда
				ЭлектронныйДокумент = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку(Новый УникальныйИдентификатор(УникальныйИД));
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ЭлектронныйДокумент) ИЛИ ЭлектронныйДокумент.ПолучитьОбъект() = Неопределено
				ИЛИ ЭлектронныеДокументыСлужебный.ЕстьТакаяПодпись(ДвоичныеДанныеПодписи, ЭлектронныйДокумент) Тогда
				Продолжить;
			КонецЕсли;
			
			АдресДанныхДокументов = ЭлектронныеДокументыСлужебный.ПолучитьДанныеФайла(ЭлектронныйДокумент).СсылкаНаДвоичныеДанныеФайла;
			ДвоичныеДанныеДокумента = ПолучитьИзВременногоХранилища(АдресДанныхДокументов);
			
			Если ВыполнятьКриптооперацииНаСервере И МенеджерКриптографии <> Неопределено Тогда
				// Определим сертификаты криптографии из подписи.
				СертификатыПодписи = МенеджерКриптографии.ПолучитьСертификатыИзПодписи(ДвоичныеДанныеПодписи);
				Если СертификатыПодписи.Количество() <> 0 Тогда
					Сертификат = СертификатыПодписи[0];
					ДатаУстановкиПодписи = ЭлектронныеДокументыСлужебный.ДатаУстановкиПодписи(ДвоичныеДанныеПодписи);
					ДатаУстановкиПодписи = ?(ЗначениеЗаполнено(ДатаУстановкиПодписи), ДатаУстановкиПодписи, ТекущаяДатаСеанса());
					ОтпечатокBase64 = Base64Строка(Сертификат.Отпечаток);
					ПредставлениеПользователя = ЭлектроннаяПодписьКлиентСервер.ПредставлениеСубъекта(Сертификат);
					ЗанестиИнформациюОПодписи(
													ЭлектронныйДокумент,
													ДвоичныеДанныеПодписи,
													ОтпечатокBase64,
													ДатаУстановкиПодписи,
													"",
													ЭлементСоответствие.Ключ,
													ПредставлениеПользователя,
													Сертификат.Выгрузить());
				КонецЕсли;
				ОпределитьСтатусыПодписей(ЭлектронныйДокумент);
			Иначе
				СтруктураЭДИДанныхПодписи = Новый Структура;
				СтруктураЭДИДанныхПодписи.Вставить("ЭлектронныйДокумент", ЭлектронныйДокумент);
				СтруктураЭДИДанныхПодписи.Вставить("ДанныеПодписи",       ДвоичныеДанныеПодписи);
				МассивЭДИДанныхПодписей.Добавить(СтруктураЭДИДанныхПодписи);
			КонецЕсли;
			
			Попытка
				НачатьТранзакцию();
				
				
				НовыйСтатусЭД = ЭлектронныеДокументыСлужебный.ПолучитьДопустимыйСтатусЭД(
																		Перечисления.СтатусыЭД.ПолученоПодтверждение,
																		ЭлектронныйДокумент);
				СтруктураПараметров = Новый Структура("СтатусЭД", НовыйСтатусЭД);
				ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ЭлектронныйДокумент, СтруктураПараметров, Ложь);
																						 
																						 
				ВладелецЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент, "ВладелецФайла");
				Если ТипЗнч(ВладелецЭД) = Тип("ДокументСсылка.ПроизвольныйЭД") Тогда
					ПроизвольныйЭДОбъект = ВладелецЭД.ПолучитьОбъект();
					ПроизвольныйЭДОбъект.СтатусДокумента = НовыйСтатусЭД;
					ПроизвольныйЭДОбъект.Записать();
				КонецЕсли;
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
					+ НСтр("ru = ' (подробности см. в Журнале регистрации).'");
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'получение подтверждения ЭД'"), ТекстОшибки, ТекстСообщения);
			КонецПопытки;
			
			СтрокаПакетаЭД = ПакетЭДОбъект.ЭлектронныеДокументы.Добавить();
			СтрокаПакетаЭД.ЭлектронныйДокумент = "Подтверждение";
			СтрокаПакетаЭД.ОбъектВладелец = ВладелецЭД;
			МассивВозврата.Добавить(ВладелецЭД);
		КонецЕсли;
	КонецЦикла;
	ПакетЭДОбъект.СтатусПакета = Перечисления.СтатусыПакетовЭД.Распакован;
	ПакетЭДОбъект.Записать();
	
	Возврат МассивВозврата;
	
КонецФункции

// Возвращает структуру, содержащую информацию о юридическом адресе контрагента.
//
// Параметры:
//  СтруктураПараметров - структура - содержит ссылки на элементы справочника;
//  ВидКонтрагента      - строка - имя метаданных справочника;
//  ВидАдреса           - строка - "Факт" или "Юр";
//  ТекстОшибки         - строка - описание ошибки;
//
// Возвращаемое значение:
//  СтруктураАдреса - структура - информация о юридическом адресе.
//
Функция ПолучитьАдресСтруктурой(СтруктураПараметров = Неопределено,
								ВидКонтрагента = Неопределено,
								ВидАдреса = Неопределено,
								ТекстОшибки = "") Экспорт
	
	СтруктураАдреса = Новый Структура;
	// Поля структуры для адреса РФ.
	СтруктураАдреса.Вставить("АдресРФ");
	СтруктураАдреса.Вставить("Индекс");
	СтруктураАдреса.Вставить("КодРегион");
	СтруктураАдреса.Вставить("Район");
	СтруктураАдреса.Вставить("Город");
	СтруктураАдреса.Вставить("НаселПункт");
	СтруктураАдреса.Вставить("Улица");
	СтруктураАдреса.Вставить("Дом");
	СтруктураАдреса.Вставить("Корпус");
	СтруктураАдреса.Вставить("Кварт");
	// Поля структуры для иностранного адреса или адреса РФ строкой.
	СтруктураАдреса.Вставить("КодСтр");
	СтруктураАдреса.Вставить("АдрТекст");
	ЭлектронныеДокументыПереопределяемый.ПолучитьАдресСтруктурой(СтруктураАдреса, СтруктураПараметров, ВидКонтрагента,
		ВидАдреса, ТекстОшибки);
	
	Возврат СтруктураАдреса;
	
КонецФункции

// Проверяет наличие элементов справочника организации
// и возвращает элемент, если он единственный.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - ссылка на единственный элемент справочника Организации
//                Неопределено - есть организаций нет или несколько
//
Процедура ОпределитьОрганизацию(Организация) Экспорт
	
	НазваниеСправочникаОрганизации = ЭлектронныеДокументыПовтИсп.ПолучитьИмяПрикладногоСправочника("Организации");
	
	Если Не ЗначениеЗаполнено(НазваниеСправочникаОрганизации) Тогда
		НазваниеСправочникаОрганизации = "Организации";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка
	|ИЗ
	|	Справочник."+НазваниеСправочникаОрганизации+" КАК Организации";
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			Организация = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Находит ссылку на объект ИБ по типу, ИД и дополнительным реквизитам
// 
// Параметры:
//  ТипОбъекта - Строка, идентификатор типа объекта, который необходимо найти,
//  ИДОбъекта - Строка, идентификатор объекта заданного типа,
//  ДополнительныеРеквизиты - Структура, набор дополнительных полей объекта для поиска.
//
Функция НайтиСсылкуНаОбъект(ТипОбъекта,
							ИдОбъекта = "",
							ДополнительныеРеквизиты = Неопределено,
							ИДЭД = Неопределено) Экспорт
	
	Результат = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект(ТипОбъекта,
																		 ИдОбъекта,
																		 ДополнительныеРеквизиты,
																		 ИДЭД);

КонецФункции

// Заполняет адрес хранилища с таблицей значений - каталога товаров
//
// Параметры:
//  АдресВоВременномХранилище - адрес хранения каталога товаров;
//  ИдентификаторФормы - уникальный  идентификатор формы, вызвавшей функцию.
//
Процедура ПоместитьКаталогТоваровВоВременноеХранилище(АдресВоВременномХранилище, ИдентификаторФормы) Экспорт
	
	ЭлектронныеДокументыПереопределяемый.ПоместитьКаталогТоваровВоВременноеХранилище(
												АдресВоВременномХранилище,
												ИдентификаторФормы);
	
КонецПроцедуры

// Изменяет поведение элементов управляемой или обычной формы.
//
// Параметры:
//  Форма - <Управляемая или обычная форма> - управляемая или обычная форма для изменения.
//  СтруктураПараметров - <Структура> - параметры процедуры
//
Процедура ИзменитьСвойстваЭлементовФормы(Форма, СтруктураПараметров) Экспорт
	
	ЭлектронныеДокументыПереопределяемый.ИзменитьСвойстваЭлементовФормы(Форма, СтруктураПараметров)
	
КонецПроцедуры

// Возвращает текст сообщения пользователю о необходимости  настройки системы.
//
// Параметры:
//  <ВидОперации> - Строка - признак выполняемой операции
//
// Возвращаемое значение:
//  ТекстСообщения - <Строка> - Строка сообщения
//
Функция ТекстСообщенияОНеобходимостиНастройкиСистемы(ВидОперации) Экспорт
	
	ТекстСообщения = "";
	ЭлектронныеДокументыПереопределяемый.ТекстСообщенияОНеобходимостиНастройкиСистемы(ВидОперации, ТекстСообщения);
	Если НЕ ЗначениеЗаполнено(ТекстСообщения) Тогда
		Если ВРег(ВидОперации) = "РАБОТАСЭД" Тогда
			ТекстСообщения = НСтр("ru = 'Для работы с электронными документами необходимо
			|в настройках системы включить использование обмена электронными документами.'");
		ИначеЕсли ВРег(ВидОперации) = "ПОДПИСАНИЕЭД" Тогда
			ТекстСообщения = НСтр("ru = 'Для возможности подписания ЭД необходимо
			|в настройках системы включить опцию использования электронных цифровых подписей.'");
		ИначеЕсли ВРег(ВидОперации) = "НАСТРОЙКАКРИПТОГРАФИИ" Тогда
			ТекстСообщения = НСтр("ru = 'Для возможности настройки криптографии необходимо 
			|в настройках системы включить опцию использования электронных цифровых подписей.'");
		ИначеЕсли ВРег(ВидОперации) = "РАБОТАСБАНКАМИ" Тогда
			ТекстСообщения = НСтр("ru = 'Для возможности обмена ЭД с банками необходимо 
			|в настройках системы включить опцию использования прямого взаимодействия с банками.'");
		ИначеЕсли ВРег(ВидОперации) = "ДОПОЛНИТЕЛЬНЫЕОТЧЕТЫИОБРАБОТКИ" Тогда
			ТекстСообщения = НСтр("ru = 'Для возможности прямого обмена с банком через дополнительную обработку
			|необходимо в настройках системы включить опцию использования дополнительных отчетов и обработок.'");
		Иначе
			ТекстСообщения = НСтр("ru='Операция не может быть выполнена. Не выполнены необходимые настройки системы.'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстСообщения;
	
КонецФункции

// Возвращаемое значение - Число (количество обработанных документов)
Функция ОбработатьДвоичныеДанныеПакетаОператораЭДО(ПакетЭД, ДанныеРаспаковки, ЕстьКриптосредствоНаКлиенте, СоответствиеЭДИПодписей, СтруктураВозврата) Экспорт
	
	Возврат ЭлектронныеДокументыВнутренний.ОбработатьДвоичныеДанныеПакетаОператораЭДО(
		ПакетЭД, ДанныеРаспаковки, ЕстьКриптосредствоНаКлиенте, СоответствиеЭДИПодписей, СтруктураВозврата);
	
КонецФункции

// Получает таблицу значений с данными по электронным документам.
//
// Параметры:
// МассивСсылокНаВладельцев - массив ссылок на владельцев электронных документов, данные которых необходимо получить.
//
Функция ПолучитьДанныеЭДПоВладельцам(МассивСсылокНаВладельцев) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.СсылкаНаОбъект КАК ВладелецЭД,
	|	СостоянияЭД.СостояниеВерсииЭД КАК СостояниеВерсииЭД,
	|	СостоянияЭД.ДействияСНашейСтороны КАК ДействияСНашейСтороны,
	|	СостоянияЭД.ДействияСоСтороныДругогоУчастника КАК ДействияСоСтороныДругогоУчастника
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект В(&МассивСсылокНаВладельцев)";
	
	Запрос.УстановитьПараметр("МассивСсылокНаВладельцев", МассивСсылокНаВладельцев);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

// Производит заполнение реквизитов формы переданными значениями 
//
// Параметры:
//  ДанныеФормы - Данные управляемой формы;
//  ЗначениеЗаполнения - ссылка данные во временном хранилище.
//
Процедура ЗаполнитьИсточник(ДанныеФормы, ЗначениеВозврата) Экспорт
	
	ЭлектронныеДокументыПереопределяемый.ЗаполнитьИсточник(ДанныеФормы, ЗначениеВозврата);
	
конецПроцедуры

// Возвращает проверку соответствия организаций в профиле, настройках ЭДО и сертификатах
//
// Параметры:
//  Ссылка - СправочникСсылка.ПрофилиНастроекЭДО, СправочникСсылка.СоглашенияОбИспользованииЭД, СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - проверяемый объект
//  Организация - СправочникСсылка.Организации - организация для проверки (используется для типа ссылки СертификатыКлючейЭлектроннойПодписиИШифрования)
//
// Возвращаемое значение:
//  Истина - Организации соответствуют
//  Ложь - Не соответствуют
//
Функция ПроверитьСоответствиеОрганизаций(Ссылка, Организация = Неопределено) Экспорт
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ПрофилиНастроекЭДО") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Профили.Ссылка КАК Профиль,
		|	Профили.Организация КАК ПрофильОрганизация,
		|	Сертификаты.Сертификат КАК Сертификат,
		|	Сертификаты.Сертификат.Организация КАК СертификатОрганизация,
		|	Соглашения.Ссылка КАК Соглашение,
		|	Соглашения.Организация КАК СоглашениеОрганизация,
		|	Соглашения.СостояниеСоглашения КАК СостояниеСоглашения
		|ИЗ
		|	Справочник.ПрофилиНастроекЭДО КАК Профили
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК Сертификаты
		|		ПО (Сертификаты.Ссылка = Профили.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД КАК Соглашения
		|		ПО (Соглашения.ПрофильНастроекЭДО = Профили.Ссылка)
		|			И (НЕ Соглашения.ПометкаУдаления)
		|			И (Соглашения.СостояниеСоглашения <> ЗНАЧЕНИЕ(Перечисление.СостоянияСоглашенийЭД.Закрыто))
		|ГДЕ
		|	Профили.Ссылка = &Ссылка
		|	И (НЕ Соглашения.Организация ЕСТЬ NULL 
		|				И Профили.Организация <> Соглашения.Организация
		|			ИЛИ НЕ Сертификаты.Сертификат.Организация ЕСТЬ NULL 
		|				И Профили.Организация <> Сертификаты.Сертификат.Организация)";
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		Результат = (Запрос.Выполнить().Выбрать().Количество() = 0);
		
		Возврат Результат;
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.СоглашенияОбИспользованииЭД") Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Профили.Ссылка КАК Профиль,
		|	Профили.Организация КАК ПрофильОрганизация,
		|	Сертификаты.Сертификат КАК Сертификат,
		|	Сертификаты.Сертификат.Организация КАК СертификатОрганизация,
		|	Соглашения.Ссылка КАК Соглашение,
		|	Соглашения.Организация КАК СоглашениеОрганизация
		|ИЗ
		|	Справочник.ПрофилиНастроекЭДО КАК Профили
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК Сертификаты
		|		ПО (Сертификаты.Ссылка = Профили.Ссылка)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД КАК Соглашения
		|		ПО (Соглашения.ПрофильНастроекЭДО = Профили.Ссылка)
		|ГДЕ
		|	Соглашения.Ссылка = &Ссылка
		|	И (НЕ Соглашения.Организация ЕСТЬ NULL 
		|				И Профили.Организация <> Соглашения.Организация
		|			ИЛИ НЕ Сертификаты.Сертификат.Организация ЕСТЬ NULL 
		|				И Профили.Организация <> Сертификаты.Сертификат.Организация)";
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		Результат = (Запрос.Выполнить().Выбрать().Количество() = 0);
		
		Возврат Результат;
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования") Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка
		|ИЗ
		|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК СертификатыКлючейЭлектроннойПодписиИШифрования
		|ГДЕ
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка = &Ссылка
		|	И СертификатыКлючейЭлектроннойПодписиИШифрования.Организация <> &Организация";
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Результат = (Запрос.Выполнить().Выбрать().Количество() = 0);
		
		Возврат Результат;
		
	КонецЕсли;
	
КонецФункции
	
// Создает новую настройку прямого обмена с банком
//
// Параметры:
//    НастройкиЗаполнения - Строка - адрес во временном хранилище
//    Объект - СправочникОбъект.СоглашенияОбИспользованииЭД или Неопределено - если параметр указан,
//             то заполняется переданный объект
//
Функция СоздатьНастройкуЭДОСБанком(НастройкиЗаполнения, Объект = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(НастройкиЗаполнения);
	
	ВремФайл = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("xml");
	
	ДвоичныеДанныеФайла.Записать(ВремФайл);
	
	ОбъектXML = Новый ЧтениеXML;
	ЭтоНастройкиСбербанка = Ложь;
	
	Попытка
		ОбъектXML.ОткрытьФайл(ВремФайл);
		ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
		ЕстьСвойствоData = ЭД.Свойства().Получить("Data") <> Неопределено;
		Если ЕстьСвойствоData Тогда
			ОбъектXML.ОткрытьФайл(ВремФайл);
			ПространствоИменАсинхрОбмена = ЭлектронныеДокументыСлужебный.ПространствоИменАсинхронногоОбменаСБанками();
			Settings = ЭлектронныеДокументыВнутренний.ПолучитьТипЗначенияCML("Settings", ПространствоИменАсинхрОбмена);
			ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, Settings);
		Иначе
			ОбъектXML.ОткрытьФайл(ВремФайл);
			SettingsSBRF = ЭлектронныеДокументыВнутренний.ПолучитьТипЗначенияCML("Settings", "http://1c-sbrf.ru/XMLSchema");
			ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, SettingsSBRF);
			ЭтоНастройкиСбербанка = Истина;
		КонецЕсли;
		
		ЭД.Проверить();
	Исключение
		ТекстСообщения = НСтр("ru = 'Возникла ошибка при чтении данных из файла.'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВидОперации = НСтр("ru = 'Чтение настроек ЭДО из файла.'");
		ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
		ОбъектXML.Закрыть();
		УдалитьФайлы(ВремФайл);
		Возврат Неопределено;
	КонецПопытки;
	
	ОбъектXML.Закрыть();
	УдалитьФайлы(ВремФайл);
			
	НаименованиеОрганизации = "";
	
	СтруктураПоискаОрганизации = Новый Структура;
	ИННОрганизации = ?(ЭтоНастройкиСбербанка, ЭД.Customer.INN, ЭД.Recipient.inn);
	Если ЗначениеЗаполнено(ИННОрганизации) Тогда
		СтруктураПоискаОрганизации.Вставить("ИНН", ИННОрганизации);
	КонецЕсли;
	
	КППОрганизации = ?(ЭтоНастройкиСбербанка, ЭД.Customer.KPP, ЭД.Recipient.kpp);
	Если ЗначениеЗаполнено(КППОрганизации) Тогда
		СтруктураПоискаОрганизации.Вставить("КПП", КППОрганизации);
	КонецЕсли;
	НаименованиеОрганизации = ?(ЭтоНастройкиСбербанка, ЭД.Customer.Name, ЭД.Recipient.name);
	Если ЗначениеЗаполнено(НаименованиеОрганизации) Тогда
		СтруктураПоискаОрганизации.Вставить("Наименование", НаименованиеОрганизации);
	КонецЕсли;
	
	Если СтруктураПоискаОрганизации.Количество() > 0 Тогда
		СсылкаНаОрганизацию = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект(
			"Организации", , СтруктураПоискаОрганизации);
	ИначеЕсли Объект = Неопределено Тогда
		ТекстСообщения = Нстр("ru = 'В полученном файле настроек нет информации об организации.
									|Обратитесь в свой банк'");
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СсылкаНаОрганизацию) Тогда
		ТекстСообщения = Нстр("ru = 'Не найдена организация по реквизитам: %1%2%3'");
		Если СтруктураПоискаОрганизации.Свойство("ИНН") Тогда
			ТекстИНН = Нстр("ru = '
							|ИНН: %1'");
			ТекстИНН = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстИНН, СтруктураПоискаОрганизации.ИНН);
		Иначе
			ТекстИНН = "";
		КонецЕсли;
		Если СтруктураПоискаОрганизации.Свойство("КПП") Тогда
			ТекстКПП = Нстр("ru = '
							|КПП: %1'");
			ТекстКПП = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстКПП, СтруктураПоискаОрганизации.КПП);
		Иначе
			ТекстКПП = "";
		КонецЕсли;
		Если СтруктураПоискаОрганизации.Свойство("Наименование") Тогда
			ТекстНаименование = Нстр("ru = '
									|Наименование: %1'");
			ТекстНаименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстНаименование, СтруктураПоискаОрганизации.Наименование);
		Иначе
			ТекстНаименование = "";
		КонецЕсли;
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения, ТекстИНН, ТекстКПП, ТекстНаименование);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Если Объект = Неопределено Тогда //автоматическое получение настроек
			Возврат Неопределено;
		КонецЕсли;
		СсылкаНаОрганизацию = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;

	НаименованиеБанка = "";
	СтруктураПоискаБанка = Новый Структура;
	БИК = ?(ЭтоНастройкиСбербанка, ЭД.Bank.BIC, ЭД.Sender.bic);
	СтруктураПоискаБанка.Вставить("Код", БИК);
	Если ЗначениеЗаполнено(БИК) Тогда
		НаименованиеБанка = ?(ЭтоНастройкиСбербанка, ЭД.Bank.Name, ЭД.Sender.name);
		СтруктураПоискаБанка.Вставить("Наименование", НаименованиеБанка);
	КонецЕсли;
	
	СсылкаНаБанк = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект(
		"Банки", , СтруктураПоискаБанка);
		
	Если НЕ ЗначениеЗаполнено(СсылкаНаБанк) Тогда
		ТекстСообщения = Нстр("ru = 'Не найден банк по реквизитам: %1%2'");
		Если СтруктураПоискаБанка.Свойство("Код") Тогда
			ТекстБИК = Нстр("ru = '
							|БИК: %1'");
			ТекстБИК = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстБИК, СтруктураПоискаБанка.Код);
		Иначе
			ТекстБИК = "";
		КонецЕсли;
		Если СтруктураПоискаБанка.Свойство("Наименование") Тогда
			ТекстНаименование = Нстр("ru = '
									|Наименование: %1'");
			ТекстНаименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстНаименование, СтруктураПоискаБанка.Наименование);
		Иначе
			ТекстНаименование = "";
		КонецЕсли;
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения, ТекстБИК, ТекстНаименование);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Если Объект = Неопределено Тогда //автоматическое получение настроек
			Возврат Неопределено;
		КонецЕсли;
		ИмяСправочникаБанки = ЭлектронныеДокументыПовтИсп.ПолучитьИмяПрикладногоСправочника("Банки");
		СсылкаНаБанк = Справочники[ИмяСправочникаБанки].ПустаяСсылка();
	КонецЕсли;
	
	ЗаписыватьОбъект = Ложь;
	Если Объект = Неопределено Тогда
		ЗаписыватьОбъект = Истина;
		СуществующаяНастройкаЭДО = НастройкаЭДОСБанком(СсылкаНаОрганизацию, СсылкаНаБанк);
		Если ЗначениеЗаполнено(СуществующаяНастройкаЭДО) Тогда
			Объект = СуществующаяНастройкаЭДО.ПолучитьОбъект();
		Иначе
			Объект = Справочники.СоглашенияОбИспользованииЭД.СоздатьЭлемент();
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НаименованиеОрганизации) Тогда
		НаименованиеОрганизации = СсылкаНаОрганизацию;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НаименованиеБанка) Тогда
		НаименованиеБанка = СсылкаНаБанк;
	КонецЕсли;
	
	ЗаполненыНаименования = ЗначениеЗаполнено(НаименованиеОрганизации) И ЗначениеЗаполнено(НаименованиеБанка);
	
	Объект.Наименование = Строка(НаименованиеОрганизации) + ?(ЗаполненыНаименования, " - ", "")
		+ Строка(НаименованиеБанка);

	Объект.Организация = СсылкаНаОрганизацию;
	Объект.Контрагент = СсылкаНаБанк;
	Объект.СтатусСоглашения = Перечисления.СтатусыСоглашенийЭД.Действует;
	Объект.ПрограммаБанка = ?(ЭтоНастройкиСбербанка, Перечисления.ПрограммыБанка.СбербанкОнлайн,
		Перечисления.ПрограммыБанка.АсинхронныйОбмен);
			
	Объект.ИдентификаторОрганизации = ?(ЭтоНастройкиСбербанка, ЭД.Customer.CustomerID, ЭД.Data.CustomerID);
	
	Объект.АутентификацияПоСертификату = Ложь;
	Объект.Пользователь = "";
	
	Если Не ЭтоНастройкиСбербанка Тогда
		Объект.АдресСервера = ЭД.Data.BankServerAddress;
		Объект.СжиматьДанныеПакетаЭД = ЭД.Data.Compress;
		Если ЭД.Data.Logon.Login <> Неопределено Тогда
			Объект.Пользователь = ЭД.Data.Logon.Login.User;
		ИначеЕсли ЭД.Data.Logon.Certificate <> Неопределено Тогда
			Объект.АутентификацияПоСертификату = Истина;
		КонецЕсли;
		Объект.ИспользуетсяКриптография = Ложь;
	КонецЕсли;
			
	Если ЭтоНастройкиСбербанка Тогда
		Объект.ИспользуетсяКриптография = Истина;
	КонецЕсли;
	
	Объект.СертификатыПодписейОрганизации.Очистить();
	
	Если ЭтоНастройкиСбербанка Тогда
		
		ДанныеСертификатов = Новый Соответствие;
		Для Каждого Сертификат Из ЭД.SignatureParameters.Certificate Цикл
			ТекСертификат = Новый СертификатКриптографии(Сертификат);
			ДанныеСертификатов.Вставить(ТекСертификат.Отпечаток, Сертификат);
		КонецЦикла;
			
		Для Каждого КлючЗначение Из ДанныеСертификатов Цикл
			Сертификат = СоздатьНайтиСертификатЭП(КлючЗначение.Значение, Объект.Организация);
			Если НЕ ЗначениеЗаполнено(Сертификат) Тогда
				Возврат Неопределено;
			КонецЕсли;
			НовСтрока = Объект.СертификатыПодписейОрганизации.Добавить();
			НовСтрока.Сертификат = Сертификат;
			
			МенеджерЗаписи = РегистрыСведений.ПрограммыБанков.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн;
			МенеджерЗаписи.СертификатЭП = Сертификат;
			МенеджерЗаписи.Записать();
		КонецЦикла;
		
	Иначе
	
		Если ЭД.Data.CryptoParameters <> Неопределено Тогда
			Объект.ИспользуетсяКриптография = Истина;
			Константы.ИспользоватьЭлектронныеПодписи.Установить(Истина);
			
			ПрограммаКриптографии = СоздатьНайтиПрограммуКриптографии(ЭД.Data.CryptoParameters.CSPName,
				ЭД.Data.CryptoParameters.CSPType, ЭД.Data.CryptoParameters.SignAlgorithm, ЭД.Data.CryptoParameters.HashAlgorithm);
				
			ДанныеСертификатов = Новый Соответствие;
			Для Каждого ГруппаПодписи Из ЭД.Data.CryptoParameters.CustomerSignature.GroupSignatures Цикл
				Для Каждого Сертификат ИЗ ГруппаПодписи.Certificate Цикл
					ТекСертификат = Новый СертификатКриптографии(Сертификат);
					ДанныеСертификатов.Вставить(ТекСертификат.Отпечаток, Сертификат);
				КонецЦикла;
			КонецЦикла;
			
			Для Каждого КлючЗначение Из ДанныеСертификатов Цикл
				Сертификат = СоздатьНайтиСертификатЭП(КлючЗначение.Значение, Объект.Организация, ЭД.Data.CryptoParameters.CSPName);
				Если НЕ ЗначениеЗаполнено(Сертификат) Тогда
					Возврат Неопределено;
				КонецЕсли;
				НовСтрока = Объект.СертификатыПодписейОрганизации.Добавить();
				НовСтрока.Сертификат = Сертификат;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
		
	Объект.ИсходящиеДокументы.Очистить();
	
	Если ЭтоНастройкиСбербанка Тогда
		МассивВидовЭД = Новый Массив;
		МассивВидовЭД.Добавить(Перечисления.ВидыЭД.ЗапросВыписки);
		МассивВидовЭД.Добавить(Перечисления.ВидыЭД.ЗапросНочнойВыписки);
		МассивВидовЭД.Добавить(Перечисления.ВидыЭД.ПлатежноеПоручение);
		Для Каждого ВидЭД Из МассивВидовЭД Цикл
			НовЗапись = Объект.ИсходящиеДокументы.Добавить();
			НовЗапись.ИсходящийДокумент = ВидЭД;
			НовЗапись.ИспользоватьЭП = Истина;
			НовЗапись.Формировать = Истина;
		КонецЦикла;
		
		СертификатБанка = ЭД.SignatureParameters.BankCertificate;
		
		Если ЗначениеЗаполнено(СертификатБанка) Тогда
			Объект.СертификатКонтрагентаДляШифрования = Новый ХранилищеЗначения(СертификатБанка);
		КонецЕсли;
		
		ВнешняяКомпонента = ЭД.SignatureParameters.AddIn.__content;
		Если ЗначениеЗаполнено(ВнешняяКомпонента) Тогда
			Объект.ВнешняяКомпонента = Новый ХранилищеЗначения(ВнешняяКомпонента);
		КонецЕсли;
	Иначе
		Для Каждого Документ Из ЭД.Data.Document Цикл
			ТекущийВидЭД = ВидЭД(Документ.docKind);
			Если ЗначениеЗаполнено(ТекущийВидЭД) Тогда
				НовЗапись = Объект.ИсходящиеДокументы.Добавить();
				НовЗапись.ИсходящийДокумент = ТекущийВидЭД;
				НовЗапись.ИспользоватьЭП = Документ.Signed <> Неопределено;
				НовЗапись.Формировать = Истина;
			КонецЕсли;
			Объект.ИсходящиеДокументы.Сортировать("ИсходящийДокумент");
		КонецЦикла;
	КонецЕсли;
	
	Объект.ПометкаУдаления = Ложь;
	Объект.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка;
	
	Если ЗаписыватьОбъект Тогда
		Объект.Записать();
	КонецЕсли;
	
	Возврат Объект.Ссылка;

КонецФункции

Функция СоздатьНайтиПрограммуКриптографии(НазваниеПрограммы, ТипПрограммы, АлгоритмПодписи, АлгоритмХеширования) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ПрограммыЭлектроннойПодписиИШифрования.Ссылка,
	               |	ПрограммыЭлектроннойПодписиИШифрования.АлгоритмПодписи,
	               |	ПрограммыЭлектроннойПодписиИШифрования.АлгоритмХеширования
	               |ИЗ
	               |	Справочник.ПрограммыЭлектроннойПодписиИШифрования КАК ПрограммыЭлектроннойПодписиИШифрования
	               |ГДЕ
	               |	ПрограммыЭлектроннойПодписиИШифрования.ИмяПрограммы = &ИмяПрограммы
	               |	И ПрограммыЭлектроннойПодписиИШифрования.ТипПрограммы = &ТипПрограммы";
	Запрос.УстановитьПараметр("ИмяПрограммы", НазваниеПрограммы);
	Запрос.УстановитьПараметр("ТипПрограммы", ТипПрограммы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если Выборка.АлгоритмПодписи = АлгоритмПодписи И Выборка.АлгоритмХеширования = АлгоритмХеширования Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
		Программа = Выборка.Ссылка.ПолучитьОбъект();
	Иначе
		Программа = Справочники.ПрограммыЭлектроннойПодписиИШифрования.СоздатьЭлемент();
	КонецЕсли;
	
	Программа.АлгоритмПодписи = АлгоритмПодписи;
	Программа.АлгоритмХеширования = АлгоритмХеширования;
	Программа.ИмяПрограммы = НазваниеПрограммы;
	Программа.Наименование = НазваниеПрограммы;
	Программа.ТипПрограммы = ТипПрограммы;
	
	Программа.Записать();
	
	Возврат Программа.Ссылка;
	
КонецФункции

// Возвращает зашифрованный маркер банка
//
// Параметры:
//  АдресСервера - Строка - URL адрес сервера
//  ИдентификаторОрганизации - Строка - идентификатор организации на сервере банка
//  ДанныеСертификата - ДвоичныеДанные - содержимое сертификата электронной подписи
//
// Возвращаемое значение:
//  ДвоичныеДанные - зашифрованные двоичные данные маркера
//
Функция ПолучитьМаркерБанка(АдресСервера, ИдентификаторОрганизации, ДвоичныеДанныеСертификата) Экспорт
	
	Перем ЗащищенноеСоединение;
	Адрес = "";
	Протокол = "";
	
	ЭлектронныеДокументыВнутренний.ОпределитьПараметрыСайта(АдресСервера, ЗащищенноеСоединение, Адрес, Протокол);
	Прокси = ЭлектронныеДокументыСлужебный.СформироватьПрокси(Протокол);

	Соединение = Новый HTTPСоединение(Адрес, , , , Прокси, 60, ЗащищенноеСоединение);
	
	Маркер = Неопределено;
	
	Bank_AuthSign = ДанныеДляАутентификацииПоСертификату(ДвоичныеДанныеСертификата);
	
	Если Bank_AuthSign = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	АдресРесурса = "LogonCert";
	
	ИмяФайлаРезультата = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("xml");
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/xml; charset=utf-8");
	Заголовки.Вставить("CustomerID", ИдентификаторОрганизации);
		
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
	HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(Bank_AuthSign);
		
	Попытка
		Ответ = Соединение.ОтправитьДляОбработки(HTTPЗапрос, ИмяФайлаРезультата);
	Исключение
		ТекстСообщения = НСтр("ru = 'Ошибка аутентификации на сервере банка!
									|(подробности см. в Журнале регистрации).'");
		ВидОперации = НСтр("ru = 'аутентификация на сервере банка'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
		УдалитьФайлы(ИмяФайлаРезультата);
		Возврат Неопределено;
	КонецПопытки;
	
	Если Ответ.КодСостояния <> 200 Тогда
		Шаблон = Нстр("ru = 'Ошибка работы с Интернет (%1)'");
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Ответ.КодСостояния);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстИсключения);
		УдалитьФайлы(ИмяФайлаРезультата);
		Возврат Неопределено;
	КонецЕсли;
	
	Чтение = Новый ЧтениеXML;
	URI = ЭлектронныеДокументыСлужебный.ПространствоИменАсинхронногоОбменаСБанками();
	Попытка
		Чтение.ОткрытьФайл(ИмяФайлаРезультата);
		ResultBank = ФабрикаXDTO.ПрочитатьXML(Чтение, ФабрикаXDTO.Тип(URI, "ResultBank"));
		ResultBank.Проверить();
						
		Если НЕ ResultBank.Error = Неопределено Тогда
			ШаблонОшибки = Нстр("ru = 'Произошла ошибка при аутентификации на сервере банка.
										|Код ошибки: %1. %2: %3'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонОшибки, ResultBank.Error.Code, ResultBank.Error.Description, ResultBank.Error.MoreInfo);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Чтение.Закрыть();
			УдалитьФайлы(ИмяФайлаРезультата);
			Возврат Неопределено;
		КонецЕсли;
	Исключение
		ТекстСообщения = Нстр("ru = 'Произошла ошибка при получении маркера банка'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВидОперации = НСтр("ru = 'Получение маркера банка'");
		ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
		Чтение.Закрыть();
		УдалитьФайлы(ИмяФайлаРезультата);
		Возврат Неопределено;
	КонецПопытки;
	
	Маркер = ResultBank.Success.LogonCertResponse.EncryptedSID.__content;
	Чтение.Закрыть();
	УдалитьФайлы(ИмяФайлаРезультата);

	Возврат Маркер;
	
КонецФункции

// Возвращает имя бизнес-системы для организации канала, используется для подключения к разным стендам.
Функция ИмяБизнесСистемыДляТестов(НастройкаЭДО) Экспорт
	
	ИмяБизнесСистемы = "";
	Отбор = Новый Структура("НастройкаЭДО", НастройкаЭДО);
	ВыборкаДанных = РегистрыСведений.СостоянияОбменовЭДСБанками.Выбрать(Отбор);
	Если ВыборкаДанных.Следующий() Тогда
		ИмяБизнесСистемы = ВыборкаДанных.Метка;
	КонецЕсли;
	Возврат ИмяБизнесСистемы;
	
КонецФункции

// Производит поиск настройки ЭДО с банком
//
// Параметры:
// Организация - СправочникСсылка.Организации - организация, указанная в настройке
// Банк - СправочникСсылка.КлассификаторБанковРФ - банк, указанный в настройке
//
// Возвращаемое значение:
// СправочникСсылка.СоглашенияОбИспользованииЭД или Неопределено - найденая настройка ЭДО с банком
//
Функция НастройкаЭДОСБанком(Знач Организация, Знач Банк) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СоглашенияОбИспользованииЭД.Ссылка,
	               |	СоглашенияОбИспользованииЭД.СтатусСоглашения,
	               |	СоглашенияОбИспользованииЭД.ПометкаУдаления
	               |ИЗ
	               |	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
	               |ГДЕ
	               |	СоглашенияОбИспользованииЭД.Организация = &Организация
	               |	И СоглашенияОбИспользованииЭД.Контрагент = &Банк";
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Банк", Банк);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.СтатусСоглашения = Перечисления.СтатусыСоглашенийЭД.Действует И Не Выборка.ПометкаУдаления Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Выборка.Ссылка;
	
КонецФункции

Функция НастройкиОбменаСБанком(Банк) Экспорт
	
	БИКБанка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Банк, "Код");
	Макет = Справочники.СоглашенияОбИспользованииЭД.ПолучитьМакет("СписокБанков");
	
	КоличествоЗаписей = Макет.ВысотаТаблицы;
	
	Для Индекс = 1 По КоличествоЗаписей Цикл
		БИК = Макет.Область(Индекс, 2).Текст;
		Если БИК <> БИКБанка Тогда
			Продолжить;
		КонецЕсли;
		ВариантПодключения = Макет.Область(Индекс, 3).Текст;
		СпособАутентификации = Макет.Область(Индекс, 4).Текст;
		Если ВариантПодключения = "СинхронныйОбмен" Тогда
			ПрограммаБанка = Перечисления.ПрограммыБанка.АльфаБанкОнлайн;
		ИначеЕсли ВариантПодключения = "АсинхронныйОбмен" Тогда
			ПрограммаБанка = Перечисления.ПрограммыБанка.АсинхронныйОбмен;
		ИначеЕсли ВариантПодключения = "ДополнительнаяОбработка" Тогда
			ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку;
		ИначеЕсли ВариантПодключения = "Сбербанк" Тогда
			ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн;
		КонецЕсли;
		
		Настройки = Новый Структура();
		Настройки.Вставить("ПрограммаБанка", ПрограммаБанка);
		Настройки.Вставить("СпособАутентификации", СпособАутентификации);
		Настройки.Вставить("АдресСервера", Макет.Область(Индекс, 5).Текст);
		
		Если БИК = "044525985" Тогда // ПАО БАНК "ФК ОТКРЫТИЕ"
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Программы.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ПрограммыЭлектроннойПодписиИШифрования КАК Программы
			|ГДЕ
			|	Программы.ИмяПрограммы = &ИмяПрограммы
			|	И Программы.ТипПрограммы = &ТипПрограммы";
			
			ПоставляемаяНастройка = Новый Структура;
			ПоставляемаяНастройка.Вставить("Представление", НСтр("ru = 'Сигнал-КОМ CSP (ITU-T X.509 v.3)'"));
			ПоставляемаяНастройка.Вставить("ИмяПрограммы", "Signal-COM ECGOST Cryptographic Provider");
			ПоставляемаяНастройка.Вставить("ТипПрограммы", 129);
			ПоставляемаяНастройка.Вставить("АлгоритмПодписи", "ECR3410");
			ПоставляемаяНастройка.Вставить("АлгоритмХеширования", "RUS-HASH");
			ПоставляемаяНастройка.Вставить("АлгоритмШифрования", "GOST28147");
			ПоставляемаяНастройка.Вставить("Идентификатор", "SignalComECGOST");
			Запрос.УстановитьПараметр("ИмяПрограммы", ПоставляемаяНастройка.ИмяПрограммы);
			Запрос.УстановитьПараметр("ТипПрограммы", ПоставляемаяНастройка.ТипПрограммы);
			Если Запрос.Выполнить().Пустой() Тогда
				ПрограммаОбъект = Справочники.ПрограммыЭлектроннойПодписиИШифрования.СоздатьЭлемент();
				ЗаполнитьЗначенияСвойств(ПрограммаОбъект, ПоставляемаяНастройка);
				ПрограммаОбъект.Наименование = ПоставляемаяНастройка.Представление;
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПрограммаОбъект);
			КонецЕсли;
		КонецЕсли;
		Прервать
	КонецЦикла;

	Возврат Настройки;
	
КонецФункции

Функция ЗапросыВыписок(Знач НастройкаЭДО, Знач ДатаНачала, Знач ДатаОкончания, Знач НомерСчета, МассивОтпечатковСертификатов, НастройкиОбмена) Экспорт
	
	РеквизитыНастройкиЭДО = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		НастройкаЭДО, "Организация, Контрагент, ПрограммаБанка, ИдентификаторОрганизации");
	
	МассивБанковскихСчетов = Новый Массив;
	Если ЗначениеЗаполнено(НомерСчета) Тогда
		МассивБанковскихСчетов.Добавить(НомерСчета);
	Иначе
		ЭлектронныеДокументыПереопределяемый.ПолучитьНомераБанковскихСчетов(
			РеквизитыНастройкиЭДО.Организация, РеквизитыНастройкиЭДО.Контрагент, МассивБанковскихСчетов);
	КонецЕсли;
		
	Если РеквизитыНастройкиЭДО.ПрограммаБанка = Перечисления.ПрограммыБанка.АльфаБанкОнлайн Тогда
		МассивЭД = МассивЗапросовВыписки(НастройкаЭДО, РеквизитыНастройкиЭДО.Организация, РеквизитыНастройкиЭДО.Контрагент,
										ДатаНачала, ДатаОкончания, МассивБанковскихСчетов);
	Иначе
		МассивЭД = МассивЗапросовВыпискиAsync(НастройкаЭДО, РеквизитыНастройкиЭДО.Организация,
			РеквизитыНастройкиЭДО.Контрагент, РеквизитыНастройкиЭДО.ИдентификаторОрганизации, ДатаНачала, ДатаОкончания,
			МассивБанковскихСчетов);
	КонецЕсли;
		
	Если НЕ МассивЭД.Количество() Тогда
		Возврат МассивЭД;
	КонецЕсли;
	
	ВыполнятьКриптооперацииНаСервере = ВыполнятьКриптооперацииНаСервере();
	
	Если ВыполнятьКриптооперацииНаСервере Тогда
		Попытка
			МассивОтпечатковСервера = МассивОтпечатковСертификатов();
		Исключение
			МассивОтпечатковСервера = Новый Массив;
		КонецПопытки;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОтпечатковСертификатов, МассивОтпечатковСервера, Истина);
	КонецЕсли;
	
	НастройкиОбмена = ЭлектронныеДокументыСлужебный.ОпределитьНастройкиОбменаЭДПоИсточнику(
					НастройкаЭДО, Истина, МассивОтпечатковСертификатов, МассивЭД[0]);
	
	Возврат МассивЭД;
	
КонецФункции

Функция ДанныеСертификатовБанка(НастройкаЭДО) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СертификатыЭП.Ссылка КАК Сертификат,
	|	СертификатыЭП.ДанныеСертификата,
	|	ЛОЖЬ КАК ЗапомнитьПарольКСертификату,
	|	НЕОПРЕДЕЛЕНО КАК ПарольПользователя,
	|	СоглашенияОбИспользованииЭД.ПрограммаБанка КАК ПрограммаБанка,
	|	СертификатыЭП.Отпечаток
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СоглашенияЭДСертификатыЭП
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК СертификатыЭП
	|			ПО СоглашенияЭДСертификатыЭП.Сертификат = СертификатыЭП.Ссылка
	|		ПО (СоглашенияОбИспользованииЭД.Ссылка = &НастройкаЭДО)
	|			И (СоглашенияЭДСертификатыЭП.Ссылка = СоглашенияОбИспользованииЭД.Ссылка)
	|ГДЕ
	|	(СертификатыЭП.Пользователь = &ТекущийПользователь
	|			ИЛИ СертификатыЭП.Пользователь = &ПустойПользователь
	|			ИЛИ СертификатыЭП.Пользователь = &ПользовательНеУказан)";
	Запрос.УстановитьПараметр("НастройкаЭДО", НастройкаЭДО);
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.АвторизованныйПользователь());
	Запрос.УстановитьПараметр("ПустойПользователь", Справочники.Пользователи.ПустаяСсылка());
	СвойстваНеуказанногоПользователя = ПользователиСлужебный.СвойстваНеуказанногоПользователя();
	Запрос.УстановитьПараметр("ПользовательНеУказан", СвойстваНеуказанногоПользователя.Ссылка);

	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаСертификаты = РезультатЗапроса.Выбрать();
	ДанныеСертификатов = Новый Массив;
	Пока ВыборкаСертификаты.Следующий() Цикл
		ДанныеСертификата = Новый Структура("Сертификат, ДвоичныеДанныеСертификата, ЗапомнитьПарольКСертификату,
			|ПарольПользователя, ПрограммаБанка, ПарольПолучен, Отпечаток");
		ЗаполнитьЗначенияСвойств(ДанныеСертификата, ВыборкаСертификаты);
		ДанныеСертификата.ДвоичныеДанныеСертификата = ВыборкаСертификаты.ДанныеСертификата.Получить();
		ДанныеСертификата.ПарольПолучен = ДанныеСертификата.ЗапомнитьПарольКСертификату;
		ДанныеСертификатов.Добавить(ДанныеСертификата);
	КонецЦикла;
	
	Возврат ДанныеСертификатов;
	
КонецФункции

//Производит сериализацию данных
//
// Параметры:
// Значение - Произвольный - данные для сериализации
//
// Возвращаемое значение:
//  Строка - сериализованные данные
//
Функция СериализованныеДанные(Знач Значение) Экспорт

	Если Значение = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Сериализатор = Новый СериализаторXDTO(ФабрикаXDTO);
	ОбъектXDTO = Сериализатор.ЗаписатьXDTO(Значение);
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);

	Возврат ЗаписьXML.Закрыть();

КонецФункции

//Производит десериализацию данных
//
// Параметры:
// ПредставлениеXML - Строка - сериализованные данные
//
// Возвращаемое значение:
//  Произвольный - десериализованные данные
//
Функция ДеСериализованныеДанные(Знач ПредставлениеXML) Экспорт

	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ПредставлениеXML);
	ЧтениеXML.Прочитать();

	Сериализатор = Новый СериализаторXDTO(ФабрикаXDTO);
	Возврат Сериализатор.ПрочитатьXML(ЧтениеXML);
	
КонецФункции

// Обработывает ответ банка на отправку платежных документов
//
// Параметры
//  ПакетыЭД - Соответствие - в ключе ссылка на документ ПакетЭД
//  ДанныеОтвета  - Соответствие - данные ответа банка
//
Процедура ОбработатьОтветБанка(Знач ПакетыЭД, Знач ДанныеОтвета) Экспорт
	
	Для Каждого Ответ ИЗ ДанныеОтвета Цикл
		
		Попытка
			НачатьТранзакцию();
			СтруктураПараметров = Новый Структура;
			Если ЗначениеЗаполнено(Ответ.Значение.Идентификатор) Тогда
				Если Ответ.Значение.Статус = "30" Тогда
					СтруктураПараметров.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Отправлен);
				Иначе
					СтруктураПараметров.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Доставлен);
				КонецЕсли;
				СтруктураПараметров.Вставить("УникальныйИДВнешний", Ответ.Значение.Идентификатор);
			Иначе
				СтруктураПараметров.Вставить("СтатусЭД", Перечисления.СтатусыЭД.ОтклоненБанком);
				СтруктураПараметров.Вставить("ПричинаОтклонения", Ответ.Значение.ТекстОшибки);
			КонецЕсли;
			ЭД = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку(Ответ.Ключ);
			ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ЭД, СтруктураПараметров, Ложь);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
		КонецПопытки;
	
	КонецЦикла;
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	Для Каждого Элемент Из ПакетыЭД Цикл
		ЭлектронныеДокументыСлужебный.ОбновитьСтатусыДокументовПакетаЭД(
			Элемент.Ключ, Перечисления.СтатусыПакетовЭД.Отправлен, ТекущаяДатаСеанса);
	КонецЦикла;

КонецПроцедуры

// Перемещает элементы из МассивЭД, которые относятся к обмену с банком и требуют специфической обработки
//в МассивЭДБанка
//
// Параметры:
// МассивЭД - Массив - содержит ссылки на электронные документы
// ДанныеДляСпецОбработки - Соответствие - содержит массивы ЭД банков для специальной обработки
//
Процедура ОтделитьЭДДляСпециальнойОбработки(МассивЭД, ДанныеДляСпецОбработки) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.Ссылка КАК ЭД
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.Ссылка В(&МассивЭД)
	|	И НЕ(ЭДПрисоединенныеФайлы.СоглашениеЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка)
	|				И ЭДПрисоединенныеФайлы.СоглашениеЭД.ПрограммаБанка В (ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.СбербанкОнлайн), ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.iBank2), ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку)))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.Ссылка КАК ЭД,
	|	ЭДПрисоединенныеФайлы.СоглашениеЭД.ПрограммаБанка КАК ПрограммаБанка,
	|	ЭДПрисоединенныеФайлы.СоглашениеЭД КАК СоглашениеЭД
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.Ссылка В(&МассивЭД)
	|	И ЭДПрисоединенныеФайлы.СоглашениеЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка)
	|	И ЭДПрисоединенныеФайлы.СоглашениеЭД.ПрограммаБанка В (ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.СбербанкОнлайн), ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.iBank2), ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку))
	|ИТОГИ ПО
	|	ПрограммаБанка,
	|	СоглашениеЭД";
	
	Запрос.УстановитьПараметр("МассивЭД", МассивЭД);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	МассивЭД = РезультатЗапроса[0].Выгрузить().ВыгрузитьКолонку("ЭД");
	ВыборкаПрограммБанка = РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ДанныеДляСпецОбработки = Новый Соответствие;
	СоглашенияИЭД = Новый Соответствие;
	Пока ВыборкаПрограммБанка.Следующий() Цикл
		ВыборкаСоглашений = ВыборкаПрограммБанка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСоглашений.Следующий() Цикл
			МассивСпецЭД = Новый Массив;
			ВыборкаСпецЭД = ВыборкаСоглашений.Выбрать();
			Пока ВыборкаСпецЭД.Следующий() Цикл
				МассивСпецЭД.Добавить(ВыборкаСпецЭД.ЭД);
			КонецЦикла;
			СоглашенияИЭД.Вставить(ВыборкаСоглашений.СоглашениеЭД, МассивСпецЭД);
		КонецЦикла;
		ДанныеДляСпецОбработки.Вставить(ВыборкаПрограммБанка.ПрограммаБанка, СоглашенияИЭД);
	КонецЦикла;
	
КонецПроцедуры

// Меняет статус и состояние исполненных платежных поручений по выписке банка
//
// Параметры:
//  ЭДВыписка - СправчоникСсылка.ЭДПрисоединенныефайлы - электронный документ выписки банка,
//
Процедура ОпределитьИсполненныеПлатежныеПоручения(Знач ЭДВыписка) Экспорт
	
	МассивВнешнихИдентификаторов = МассивИдентификаторовВыпискиБанка(ЭДВыписка);
	
	ПрограммаБанка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭДВыписка.СоглашениеЭД, "ПрограммаБанка");
	
	Если ПрограммаБанка = Перечисления.ПрограммыБанка.АльфаБанкОнлайн
		ИЛИ ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку
		ИЛИ ПрограммаБанка = Перечисления.ПрограммыБанка.iBank2 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.Ссылка
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.УникальныйИДВнешний В(&МассивИдентификаторов)
		|	И ЭДПрисоединенныеФайлы.ВидЭД В (ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПлатежноеПоручение), ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПлатежноеТребование))
		|	И ЭДПрисоединенныеФайлы.СоглашениеЭД = &СоглашениеЭД";
		Запрос.УстановитьПараметр("МассивИдентификаторов", МассивВнешнихИдентификаторов);
		Запрос.УстановитьПараметр("СоглашениеЭД", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭДВыписка, "СоглашениеЭД"));
		ТабЭД = Запрос.Выполнить().Выгрузить();
		Для Каждого СтрокаЭД ИЗ ТабЭД Цикл
			СтруктураПараметров = Новый Структура("СтатусЭД", Перечисления.СтатусыЭД.Исполнен);
			ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(СтрокаЭД.Ссылка, СтруктураПараметров, Ложь);
		КонецЦикла;
	Иначе
		Для Каждого Идентификатор ИЗ МассивВнешнихИдентификаторов Цикл
			Если НЕ ЗначениеЗаполнено(Идентификатор) Тогда
				Продолжить;
			КонецЕсли;
			Попытка
				ИдентификаторДокумента = Новый УникальныйИдентификатор(Идентификатор);
			Исключение
				Продолжить;
			КонецПопытки;
			ЭД = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку(ИдентификаторДокумента);
			Если ЭД.ПолучитьОбъект() <> Неопределено Тогда
				УстановитьСтатусЭД(ЭД, Перечисления.СтатусыЭД.Подтвержден);
			КонецЕсли;
		КонецЦикла
	КонецЕсли
		
КонецПроцедуры

Функция АдресВнешнейКомпонентыБанка(НастройкаЭДО, ПрограммаБанка) Экспорт
	
	Если ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн Тогда
		Возврат ПолучитьНавигационнуюСсылку(НастройкаЭДО, "ВнешняяКомпонента");
	ИначеЕсли ПрограммаБанка = Перечисления.ПрограммыБанка.iBank2 Тогда
		НазваниеМакета = "iBank2Library";
	Иначе
		НазваниеМакета = "SBRFServiceProxy";
	КонецЕсли;
	МакетВК = Обработки.ОбменЭлектроннымиДокументамиСБанком.ПолучитьМакет(НазваниеМакета);
	Возврат ПоместитьВоВременноеХранилище(МакетВК, Новый УникальныйИдентификатор);

КонецФункции

// Возвращает строку Base64, содержащей данные строки в виде двоичных данных файла в формате UTF8 без BOM.
//
// Параметры:
//  СтрокаДанных  - Строка - строка для преобразования в BASE64
//
// Возвращаемое значение:
//   Строка   - строка в BASE64
//
Функция СтрокаBase64БезBOM(СтрокаДанных) Экспорт

	ВремФайл = ПолучитьИмяВременногоФайла();
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(СтрокаДанных);
	ТекстовыйДокумент.Записать(ВремФайл, КодировкаТекста.UTF8, Символы.ПС);
	ДвоичныеДанные = Новый ДвоичныеДанные(ВремФайл);
	СтрокаФорматBase64 = Base64Строка(ДвоичныеДанные);
	СтрокаФорматBase64 = Сред(СтрокаФорматBase64, 5); // убираем BOM
	СтрокаФорматBase64 = СтрЗаменить(СтрокаФорматBase64, Символы.ВК, ""); // убираем ВК
	СтрокаФорматBase64 = СтрЗаменить(СтрокаФорматBase64, Символы.ПС, ""); // убираем ПС
	УдалитьФайлы(ВремФайл);
	Возврат СтрокаФорматBase64;

КонецФункции

// Получает список действующих настроек ЭДО с банками. Если параметры не переданны возвращает все настройки
//
// Параметры:
//  Организация  - СправочникСсылка.Организации - организация в настройке
//  Банк  - СправочникСсылка.КлассификаторБанковРФ - банк в настройке
//
// Возвращаемое значение:
//   Массив - содержит ссылки на справочник СоглашенияОбИспользованииЭД
//
Функция НастройкиЭДОСБанками(Организация, Банк) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоглашенияОбИспользованииЭД.Ссылка
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
	|ГДЕ
	|	ИСТИНА
	|	И СоглашенияОбИспользованииЭД.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
	|	И СоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка)
	|	И НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления";
	
	Если ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(Банк) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИСТИНА", "СоглашенияОбИспользованииЭД.Организация = &Организация
														|	И СоглашенияОбИспользованииЭД.Контрагент = &Банк");
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Банк", Банк);
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Возвращает сертификаты в формате BASE64
//
// Параметры:
// МассивЭД - Массив - ссылки на электронные документы
//
// Возвращаемое значение:
//  Массив - в элементах находится структура
//    * Отпечаток - строка - отпечаток сертификата
//    * СертификатВФорматеBase64 - строка - данные сертификата в формате Base64
//
Функция ДанныеСертификатовПодписи(МассивЭД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЭДПрисоединенныеФайлыЭлектронныеПодписи.Отпечаток,
	               |	ЭДПрисоединенныеФайлыЭлектронныеПодписи.Сертификат
	               |ИЗ
	               |	Справочник.ЭДПрисоединенныеФайлы.ЭлектронныеПодписи КАК ЭДПрисоединенныеФайлыЭлектронныеПодписи
	               |ГДЕ
	               |	ЭДПрисоединенныеФайлыЭлектронныеПодписи.Ссылка В(&МассивЭД)";
	Запрос.УстановитьПараметр("МассивЭД", МассивЭД);
	Выборка = Запрос.Выполнить().Выбрать();
	// Удаление дублей
	СоответствиеВозврата = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		СоответствиеВозврата.Вставить(Выборка.Отпечаток, Выборка.Сертификат);
	КонецЦикла;
	
	МассивВозврата = Новый Массив;
	Для Каждого КлючЗначение Из СоответствиеВозврата Цикл
		СтруктураЭлемента = Новый Структура;
		СтруктураЭлемента.Вставить("Отпечаток", КлючЗначение.Ключ);
		СтруктураЭлемента.Вставить("СертификатВФорматеBase64", СертификатВФорматеBase64(КлючЗначение.Значение));
		МассивВозврата.Добавить(СтруктураЭлемента);
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

#КонецОбласти

#Область АсинхронныйОбменСБанками

Процедура ОтключитьНастройкуЭДО(НастройкаЭДО) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Объект = НастройкаЭДО.ПолучитьОбъект();
	Объект.СтатусСоглашения = Перечисления.СтатусыСоглашенийЭД.Закрыто;
	Объект.Записать();
	
КонецПроцедуры

// Осуществляет получение настроек ЭДО с сервера банка
// 
// Параметры:
//    АдресСервера - Строка - адрес сервера банка, с которого будут получены настройки обмена
//    Банк - СправочникСсылка.КлассификаторБанковРФ - банк, для которого будут получены настройки
//    НомерСчета - Строка - номер банковского счета
//    ДанныеМаркера - ДвоичныеДанные - временный маркер банка
// Возвращаемое значение:
//    ДвоичныеДанные - данные файла настроек ЭДО
//
Функция ПолучитьНастройкиОбменаССервераБанка(Знач АдресСервера, Знач Банк, Знач НомерСчета, Знач ДанныеМаркера) Экспорт
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/xml; charset=utf-8");
	Заголовки.Вставить("Account", НомерСчета);
	Заголовки.Вставить("Bic", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Банк, "Код"));
	Маркер = СтрокаИзДвоичныхДанных(ДанныеМаркера);
	Заголовки.Вставить("SID", Маркер);
	
	АдресРесурса = "GetSettings";
	
	ИмяФайлаРезультата = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("xml");

	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
	
	Адрес = "";
	ЗащищенноеСоединение = Неопределено;
	Протокол = "";
	
	ЭлектронныеДокументыВнутренний.ОпределитьПараметрыСайта(АдресСервера, ЗащищенноеСоединение, Адрес, Протокол);
	Прокси = ЭлектронныеДокументыСлужебный.СформироватьПрокси(Протокол);
	
	Соединение = Новый HTTPСоединение(Адрес, , , , Прокси, 60, ЗащищенноеСоединение);
	
	Попытка
		Ответ = Соединение.ОтправитьДляОбработки(HTTPЗапрос, ИмяФайлаРезультата);
	Исключение
		ТекстСообщения = НСтр("ru = 'Ошибка аутентификации на сервере банка!
									|(подробности см. в Журнале регистрации).'");
		ВидОперации = НСтр("ru = 'аутентификация на сервере банка'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
		УдалитьФайлы(ИмяФайлаРезультата);
		Возврат Неопределено;
	КонецПопытки;
			
	Если Ответ.КодСостояния <> 200 Тогда
		Шаблон = Нстр("ru = 'Ошибка работы с Интернет (%1)'");
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Ответ.КодСостояния);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстИсключения);
		УдалитьФайлы(ИмяФайлаРезультата);
		Возврат Неопределено
	КонецЕсли;
	
	Чтение = Новый ЧтениеXML;
	URI = ЭлектронныеДокументыСлужебный.ПространствоИменАсинхронногоОбменаСБанками();
	Попытка
		Чтение.ОткрытьФайл(ИмяФайлаРезультата);
		ResultBank = ФабрикаXDTO.ПрочитатьXML(Чтение, ФабрикаXDTO.Тип(URI, "ResultBank"));
		ResultBank.Проверить();
		
		Если НЕ ResultBank.Error = Неопределено Тогда
			ШаблонОшибки = Нстр("ru = 'Произошла ошибка при аутентификации на сервере банка.
								|Код ошибки: %1. %2: %3'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонОшибки, ResultBank.Error.Code, ResultBank.Error.Description, ResultBank.Error.MoreInfo);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Чтение.Закрыть();
			УдалитьФайлы(ИмяФайлаРезультата);
			Возврат Неопределено;
		КонецЕсли;
	Исключение
		ТекстСообщения = Нстр("ru = 'Произошла ошибка при получении настроек из банка'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВидОперации = НСтр("ru = 'Получение настроек обмена с банком'");
		ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
		Чтение.Закрыть();
		УдалитьФайлы(ИмяФайлаРезультата);
		Возврат Неопределено
	КонецПопытки;
	
	Чтение.Закрыть();
	ДанныеНастроек = ResultBank.Success.GetSettingsResponse.Data.__content;
	УдалитьФайлы(ИмяФайлаРезультата);
	
	Возврат ДанныеНастроек;
	
КонецФункции

// Получает маркеры банка для каждого сертификата
//
// Параметры:
//  НастройкаЭДО  - СправочникСсылка.НастройкиЭДО - текущая настройка ЭДО с банком
//  МассивСертификатов  - Массив - в элементах ссылки элементы справочника СертификатыКлючейЭлектроннойПодписиИШифрования
//
// Возвращаемое значение:
//   Структура - содержит один элемент с ключом СоотвСертификатовИИхСтруктур и значением, содержащим соответствие с данными
//
Функция СертификатыБанкаСМаркерами(Знач НастройкаЭДО, Знач МассивСертификатов) Экспорт
	
	ДанныеПоСертификатам = Новый Соответствие;
		
	Для Каждого Сертификат Из МассивСертификатов Цикл
		
		СтруктураПараметровЗапросаМаркера = Новый Структура;
		СтруктураПараметровЗапросаМаркера.Вставить("СертификатПодписи", Сертификат);
		
		Маркер = ЗашифрованныйМаркерБанка(НастройкаЭДО, СтруктураПараметровЗапросаМаркера);
		Если Не Маркер = Неопределено Тогда
			ДанныеСертификата = Новый Структура("МаркерЗашифрованный", Маркер);
			ДанныеПоСертификатам.Вставить(Сертификат, ДанныеСертификата);
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеПоСертификатам.Количество() Тогда
		ДанныеВозврата = Новый Структура;
		ДанныеВозврата.Вставить("СоотвСертификатовИИхСтруктур", ДанныеПоСертификатам);
		Возврат ДанныеВозврата;
	КонецЕсли;
	
КонецФункции

Процедура РаспаковатьПакетЭДБанка(ПакетЭД, ДанныеВозврата) Экспорт
	
	ВыборкаПолученныхЭД = ЭлектронныеДокументыСлужебный.ПолучитьВыборкуЭДПоОтбору(Новый Структура("ВладелецФайла", ПакетЭД));
	ПространствоИмен = ЭлектронныеДокументыСлужебный.ПространствоИменАсинхронногоОбменаСБанками();
	ВыполнятьКриптооперацииНаСервере = ВыполнятьКриптооперацииНаСервере();
	РеквизитыПакета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПакетЭД, "НастройкаЭДО, Контрагент, Организация");
	СоглашениеЭД = РеквизитыПакета.НастройкаЭДО;
	Банк = РеквизитыПакета.Контрагент;
	ИспользуетсяКриптография = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СоглашениеЭД, "ИспользуетсяКриптография");
	
	Если ИспользуетсяКриптография И ВыполнятьКриптооперацииНаСервере Тогда
		Попытка
			МенеджерКриптографии = ПолучитьМенеджерКриптографии();
		Исключение
			МенеджерКриптографии = Неопределено;
		КонецПопытки;
	КонецЕсли;
		
	Пока ВыборкаПолученныхЭД.Следующий() Цикл
		ПолученныйЭД = ВыборкаПолученныхЭД.Ссылка;
		ДвоичныеДанныеФайла = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(ПолученныйЭД);
		ФайлПакета = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("xml");
		ДвоичныеДанныеФайла.Записать(ФайлПакета);
				
		ПакетXML = Новый ЧтениеXML;
		ПакетXML.ОткрытьФайл(ФайлПакета);
		ПакетТип = ЭлектронныеДокументыВнутренний.ПолучитьТипЗначенияCML("ResultBank", ПространствоИмен);
		Попытка
			ResultBank = ФабрикаXDTO.ПрочитатьXML(ПакетXML, ПакетТип);
		Исключение
			Если Пользователи.ЭтоПолноправныйПользователь( , , Ложь) Тогда
				ШаблонСообщения = НСтр("ru = 'Возникла ошибка при разборе пакета %1
											|(подробности см. в Журнале регистрации).'");
				КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									ШаблонСообщения, ПакетЭД, КраткоеПредставлениеОшибки);
			Иначе
				ТекстСообщения = Нстр("ru = 'Файл, полученный из банка невозможно прочитать так как он содержит ошибку'");
			КонецЕсли;
			ПодробнаяИнформация = НСтр("ru = 'Ошибка при распаковке пакета %1
											|Подробное представление ошибки:
											|%2
											|Файл пакета: %3'");
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ПодробнаяИнформация = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ПодробнаяИнформация, ПакетЭД, ПодробноеПредставлениеОшибки, ФайлПакета);
			ВидОперации = НСтр("ru = 'Чтение ЭД.'");
			ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробнаяИнформация, ТекстСообщения, 1);
			ДанныеВозврата.Вставить("ЕстьОшибка", Истина);
			ДанныеВозврата.Вставить("ТекстСообщения", ТекстСообщения);
			Возврат;
		КонецПопытки;
	
		ПакетXML.Закрыть();
		УдалитьФайлы(ФайлПакета);

		ОбъектXML = Новый ЧтениеXML;
			
		Если НЕ ResultBank.Success = Неопределено 
			И НЕ ResultBank.Success.GetPacketResponse = Неопределено 
			И НЕ ResultBank.Success.GetPacketResponse.Document = Неопределено Тогда
				
			Для Каждого Document Из ResultBank.Success.GetPacketResponse.Document Цикл
				Если Document.compressed = Истина Тогда
					ФайлАрхива = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("zip");
					Document.data.__content.Записать(ФайлАрхива);
					ЧтениеЗИП = Новый ЧтениеZIPФайла(ФайлАрхива);
					ПапкаДляРаспаковки = ЭлектронныеДокументыСлужебный.РабочийКаталог("ext", Новый УникальныйИдентификатор);
					Попытка
						ЧтениеЗИП.ИзвлечьВсе(ПапкаДляРаспаковки);
					Исключение
						Если НЕ ЭлектронныеДокументыСлужебный.ВозможноИзвлечьФайлы(ЧтениеЗИП, ПапкаДляРаспаковки) Тогда
							ТекстСообщения = ЭлектронныеДокументыПовтИсп.ПолучитьСообщениеОбОшибке("006");
						Иначе
							ТекстСообщения = Нстр("ru = 'Файл, полученный из банка невозможно прочитать так как он содержит ошибку'");
						КонецЕсли;
						ПодробнаяИнформация = НСтр("ru = 'Ошибка при распаковке пакета %1
														|Подробное представление ошибки:
														|%2
														|Файл с ошибкой: %3'");
						ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
						ПодробнаяИнформация = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ПодробнаяИнформация, ПакетЭД, ПодробноеПредставлениеОшибки, ФайлАрхива);
						ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Распаковка пакета ЭД'"), ПодробнаяИнформация, ТекстСообщения, 1);
						ДанныеВозврата.Вставить("ЕстьОшибка", Истина);
						ДанныеВозврата.Вставить("ТекстСообщения", ТекстСообщения);
						Возврат;
					КонецПопытки;
					ЧтениеЗИП.Закрыть();
					УдалитьФайлы(ФайлАрхива);

					ФайлыЭД = НайтиФайлы(ПапкаДляРаспаковки, "*");
					Если ФайлыЭД.Количество() > 0 Тогда
						ФайлВложение = ФайлыЭД[0].ПолноеИмя;
					Иначе
						УдалитьФайлы(ПапкаДляРаспаковки);
						Продолжить;
					КонецЕсли;
				Иначе
					ФайлВложение = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("xml");
					Document.data.__content.Записать(ФайлВложение);
				КонецЕсли;
					
				Если Document.dockind = "02" Тогда // Извещение о состоянии электронного документа
					ОбъектXML.ОткрытьФайл(ФайлВложение);
					ИзвещениеОСостоянииТип = ЭлектронныеДокументыВнутренний.ПолучитьТипЗначенияCML(
						"StatusDocNotice", ПространствоИмен);
					Попытка
						StatusDocNotice = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ИзвещениеОСостоянииТип);
					Исключение
						Если Пользователи.ЭтоПолноправныйПользователь( , , Ложь) Тогда
							ШаблонСообщения = НСтр("ru = 'Возникла ошибка при разборе пакета %1
														|(подробности см. в Журнале регистрации).'");
							КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонСообщения, ПакетЭД, КраткоеПредставлениеОшибки);
						Иначе
							ТекстСообщения = Нстр("ru = 'Файл, полученный из банка невозможно прочитать так как он содержит ошибку'");
						КонецЕсли;
						ПодробнаяИнформация = НСтр("ru = 'Ошибка при распаковке пакета %1
														|Подробное представление ошибки:
														|%2
														|Файл пакета: %3'");
						ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
						ПодробнаяИнформация = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ПодробнаяИнформация, ПакетЭД, ПодробноеПредставлениеОшибки, ФайлВложение);
						ВидОперации = НСтр("ru = 'Чтение ЭД.'");
						ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробнаяИнформация, ТекстСообщения, 1);
						ДанныеВозврата.Вставить("ЕстьОшибка", Истина);
						ДанныеВозврата.Вставить("ТекстСообщения", ТекстСообщения);
						Возврат;
					КонецПопытки;
					ОбъектXML.Закрыть();
					
					Если ЗначениеЗаполнено(ПапкаДляРаспаковки) Тогда
						УдалитьФайлы(ПапкаДляРаспаковки);
					Иначе
						УдалитьФайлы(ФайлВложение);
					КонецЕсли;
					
					ИДЗапрос = StatusDocNotice.ExtIDStatusRequest;
					ЭтоОтветНаЗапросСостояния = ЗначениеЗаполнено(ИДЗапрос);
					ЭтоОтветНаОтзыв = Ложь;
						
					Если ЭтоОтветНаЗапросСостояния Тогда
						ИдентификаторЗапроса = Новый УникальныйИдентификатор(ИДЗапрос);
						ЭдЗапрос = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку(ИдентификаторЗапроса);
					КонецЕсли;
						
					ИдентификаторВладельца = Новый УникальныйИдентификатор(StatusDocNotice.ExtID);
					ЭДВладелец = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку(ИдентификаторВладельца);
					ВладелецСуществует = НЕ ЭДВладелец.ПолучитьОбъект() = Неопределено;
					ЭлектронныйДокументВладелец = ЭДВладелец;
					Если ЭтоОтветНаЗапросСостояния И ЭДЗапрос.ПолучитьОбъект() <> Неопределено Тогда
						ЭлектронныйДокументВладелец = ЭДЗапрос;
						ВидЗапроса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭдЗапрос, "ВидЭД");
						ЭтоОтветНаОтзыв = ВидЗапроса = Перечисления.ВидыЭД.ЗапросНаОтзывЭД;
					ИначеЕсли ВладелецСуществует
						И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭДВладелец, "ВидЭД") = Перечисления.ВидыЭД.ЗапросЗонд Тогда
							ЭтоОтветНаЗонд = Истина;
					КонецЕсли;
						
					Если ВладелецСуществует Тогда
							
						РеквизитыВладельца = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭДВладелец, "ВладелецФайла, СтатусЭД");
						ВладелецФайла = РеквизитыВладельца.ВладелецФайла;
						АдресВХранилище = ПоместитьВоВременноеХранилище(Document.data.__content);
						НазваниеДокумента = Нстр("ru = 'Извещение о состоянии электронного документа'");
						ПрисоединенныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(ВладелецФайла, НазваниеДокумента, "xml", ТекущаяДатаСеанса(),
												ТекущаяДатаСеанса(), АдресВХранилище, , , Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());
						СтруктураРеквизитов = Новый Структура;
						СтруктураРеквизитов.Вставить("ЭлектронныйДокументВладелец", ЭлектронныйДокументВладелец);
						СтруктураРеквизитов.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Получен);
						СтруктураРеквизитов.Вставить("ВидЭД", Перечисления.ВидыЭД.ИзвещениеОСостоянииЭД);
						СтруктураРеквизитов.Вставить("Контрагент", Банк);
						СтруктураРеквизитов.Вставить("Организация", РеквизитыПакета.Организация);
						СтруктураРеквизитов.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Входящий);
						СтруктураРеквизитов.Вставить("СоглашениеЭД", СоглашениеЭД);
						СтруктураРеквизитов.Вставить(
							"НаименованиеФайла", СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(НазваниеДокумента));
						ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ПрисоединенныйФайл, СтруктураРеквизитов, Ложь);
						
						Если ВыполнятьКриптооперацииНаСервере И МенеджерКриптографии <> Неопределено
								И Document.signature.Количество() Тогда
							Для Каждого signature ИЗ Document.signature Цикл
								Попытка
									СертификатыПодписи = МенеджерКриптографии.ПолучитьСертификатыИзПодписи(signature.signedData);
								Исключение
									Если Пользователи.ЭтоПолноправныйПользователь( , , Ложь) Тогда
										ШаблонСообщения = НСтр("ru = 'Возникла ошибка при разборе пакета %1
																	|(подробности см. в Журнале регистрации).'");
										КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
										ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											ШаблонСообщения, ПакетЭД, КраткоеПредставлениеОшибки);
									Иначе
										ТекстСообщения = Нстр("ru = 'Электронный документ, полученный из банка содержит некорретную подпись
																	|и не будет обработан'");
									КонецЕсли;
									ПодробнаяИнформация = НСтр("ru = 'Ошибка при распаковке пакета %1
																	|Подробное представление ошибки:
																	|%2
																	|Файл пакета: %3'");
									ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
									ПодробнаяИнформация = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										ПодробнаяИнформация, ПакетЭД, ПодробноеПредставлениеОшибки, ФайлВложение);
									ВидОперации = НСтр("ru = 'Чтение ЭД.'");
									ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробнаяИнформация, ТекстСообщения, 1);
									ДанныеВозврата.Вставить("ЕстьОшибка", Истина);
									ДанныеВозврата.Вставить("ТекстСообщения", ТекстСообщения);
									Возврат;
								КонецПопытки;
								Если СертификатыПодписи.Количество() > 0 Тогда
									Сертификат = СертификатыПодписи[0];
								Иначе
									Продолжить;
								КонецЕсли;
								ПредставлениеПользователя = ЭлектроннаяПодписьКлиентСервер.ПредставлениеСубъекта(Сертификат);
								Отпечаток = Base64Строка(Сертификат.Отпечаток);
								ДвоичныеДанныеСертификата = Сертификат.Выгрузить();
								ЗанестиИнформациюОПодписи(ПрисоединенныйФайл, signature.signedData, Отпечаток, ТекущаяДатаСеанса(), "", ,
									ПредставлениеПользователя, ДвоичныеДанныеСертификата);
							КонецЦикла;
							ОпределитьСтатусыПодписей(ПрисоединенныйФайл);
						ИначеЕсли Document.signature.Количество() Тогда
							МассивПодписей = Новый Массив;
							Для Каждого ЭП ИЗ Document.signature Цикл
								МассивПодписей.Добавить(ЭП.signedData);
							КонецЦикла;
							ДанныеВозврата.ДанныеЭП.Вставить(ПрисоединенныйФайл, МассивПодписей);
						КонецЕсли;
							
						Если НЕ StatusDocNotice.Result.Status = Неопределено Тогда
							КодСтатуса = StatusDocNotice.Result.Status.Code;
							РеквизитыДляИзменения = Новый Структура;
							Если КодСтатуса = "01" Тогда
								РеквизитыДляИзменения.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Принят);
							ИначеЕсли КодСтатуса = "02" Тогда
								Если НЕ РеквизитыВладельца.СтатусЭД = Перечисления.СтатусыЭД.Обработан Тогда
									РеквизитыДляИзменения.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Исполнен);
								КонецЕсли;
							ИначеЕсли КодСтатуса = "03" Тогда
								РеквизитыДляИзменения.Вставить("СтатусЭД", Перечисления.СтатусыЭД.ОтклоненБанком);
								РеквизитыДляИзменения.Вставить("ПричинаОтклонения", StatusDocNotice.Result.Status.MoreInfo);
							ИначеЕсли КодСтатуса = "04" Тогда
								РеквизитыДляИзменения.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Приостановлен);
							ИначеЕсли КодСтатуса = "05" Тогда
								РеквизитыДляИзменения.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Аннулирован);
								Если ЭтоОтветНаОтзыв Тогда
									УстановитьСтатусЭД(ЭдЗапрос, Перечисления.СтатусыЭД.Обработан);
								КонецЕсли;
							КонецЕсли;
							РеквизитыДляИзменения.Вставить("УникальныйИДВнешний", StatusDocNotice.id);
							ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ЭДВладелец, РеквизитыДляИзменения, Ложь);
							Если ЭтоОтветНаЗапросСостояния И ЭДЗапрос.ПолучитьОбъект() <> Неопределено Тогда
								РеквизитыЭДЗапроса = Новый Структура("СтатусЭД", Перечисления.СтатусыЭД.ПолученоИзвещение);
								ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ЭДЗапрос, РеквизитыЭДЗапроса, Ложь);
							КонецЕсли;
						ИначеЕсли НЕ StatusDocNotice.Result.Error = Неопределено Тогда
							Если ЭтоОтветНаЗонд = Истина И StatusDocNotice.Result.Error.Code = "9999" Тогда
								РеквизитыДляИзменения = Новый Структура;
								РеквизитыДляИзменения.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Исполнен);
								ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ЭДВладелец, РеквизитыДляИзменения, Ложь);
							Иначе
								ТекстОшибки = ТекстСообщенияОбОшибкеОтветаБанка(StatusDocNotice.Result.Error);
								РеквизитыДляИзменения = Новый Структура;
								РеквизитыДляИзменения.Вставить("СтатусЭД", Перечисления.СтатусыЭД.ОтклоненБанком);
								РеквизитыДляИзменения.Вставить("ПричинаОтклонения", ТекстОшибки);
								ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ЭДВладелец, РеквизитыДляИзменения, Ложь);
							КонецЕсли;
						КонецЕсли;
					Иначе
						ВидОперации = Нстр("ru = 'Чтение извещения о состоянии электронного документа'");
						ПодробнаяИнформация = НСтр("ru = 'Ошибка при распаковке пакета %1
														|Не найден электронный документ по идентификатору: %2'");
						ПодробнаяИнформация = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ПодробнаяИнформация, ПакетЭД, ИдентификаторВладельца);
						ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробнаяИнформация, , 1);
						УдалитьФайлы(ФайлВложение);
						Продолжить;
					КонецЕсли;
					УдалитьФайлы(ФайлВложение);
				ИначеЕсли Document.dockind = "01" Тогда // Извещение о состоянии пакета
					ОбъектXML.ОткрытьФайл(ФайлВложение);
					ИзвещениеОСостоянииПакетаТип = ЭлектронныеДокументыВнутренний.ПолучитьТипЗначенияCML(
						"StatusPacketNotice", ПространствоИмен);
					Попытка
						StatusPacketNotice = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ИзвещениеОСостоянииПакетаТип);
					Исключение
						Если Пользователи.ЭтоПолноправныйПользователь( , , Ложь) Тогда
							ШаблонСообщения = НСтр("ru = 'Возникла ошибка при разборе пакета %1
														|(подробности см. в Журнале регистрации).'");
							КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонСообщения, ПакетЭД, КраткоеПредставлениеОшибки);
						Иначе
							ТекстСообщения = Нстр("ru = 'Файл, полученный из банка невозможно прочитать так как он содержит ошибку'");
						КонецЕсли;
						ПодробнаяИнформация = НСтр("ru = 'Ошибка при распаковке пакета %1
														|Подробное представление ошибки:
														|%2
														|Файл с ошибкой: %3'");
						ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
						ПодробнаяИнформация = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ПодробнаяИнформация, ПакетЭД, ПодробноеПредставлениеОшибки, ФайлВложение);
						ВидОперации = НСтр("ru = 'Чтение ЭД.'");
						ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробнаяИнформация, ТекстСообщения, 1);
						ДанныеВозврата.Вставить("ЕстьОшибка", Истина);
						ДанныеВозврата.Вставить("ТекстСообщения", ТекстСообщения);
						Возврат;
					КонецПопытки;
					
					ОбъектXML.Закрыть();
					Если ЗначениеЗаполнено(ПапкаДляРаспаковки) Тогда
						УдалитьФайлы(ПапкаДляРаспаковки);
					Иначе
						УдалитьФайлы(ФайлВложение);
					КонецЕсли;
					Если НЕ StatusPacketNotice.Result.Error = Неопределено Тогда
						ПакетЭД = НайтиПакетЭД(СоглашениеЭД, StatusPacketNotice.IDResultSuccessResponse);
						Если ЗначениеЗаполнено(ПакетЭД) Тогда
							ТекстОшибки = ТекстСообщенияОбОшибкеОтветаБанка(StatusPacketNotice.Result.Error);
							СтруктураЭД = Новый Структура;
							СтруктураЭД.Вставить("СтатусЭД", Перечисления.СтатусыЭД.ОшибкаПередачи);
							СтруктураЭД.Вставить("ТекстУточнения", ТекстОшибки);
							ЭлектронныеДокументыСлужебный.ОбновитьСтатусыДокументовПакетаЭД(
								ПакетЭД, Перечисления.СтатусыПакетовЭД.Отменен, ТекущаяДатаСеанса());
							Для Каждого Строка Из ПакетЭД.ЭлектронныеДокументы Цикл
								ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(
									Строка.ЭлектронныйДокумент, СтруктураЭД, Ложь);
							КонецЦикла;
						КонецЕсли;
					ИначеЕсли НЕ StatusPacketNotice.Result.Status = Неопределено Тогда
						ИсходныйПакетЭД = НайтиПакетЭД(СоглашениеЭД, StatusPacketNotice.IDResultSuccessResponse);
						Если ЗначениеЗаполнено(ИсходныйПакетЭД) Тогда
							Если StatusPacketNotice.Result.Status.Code = "01" Тогда
								ЭлектронныеДокументыСлужебный.ОбновитьСтатусыДокументовПакетаЭД(
									ИсходныйПакетЭД, Перечисления.СтатусыПакетовЭД.Доставлен, ТекущаяДатаСеанса());
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли Document.dockind = "15" Тогда // Выписка банка
					ОбъектXML.ОткрытьФайл(ФайлВложение);
					ВыпискаТип = ЭлектронныеДокументыВнутренний.ПолучитьТипЗначенияCML(
						"Statement", ПространствоИмен);
					Попытка
						Statement = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ВыпискаТип);
					Исключение
						Если Пользователи.ЭтоПолноправныйПользователь( , , Ложь) Тогда
							ШаблонСообщения = НСтр("ru = 'Возникла ошибка при разборе пакета %1
														|(подробности см. в Журнале регистрации).'");
							КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонСообщения, ПакетЭД, КраткоеПредставлениеОшибки);
						Иначе
							ТекстСообщения = Нстр("ru = 'Файл, полученный из банка невозможно прочитать так как он содержит ошибку'");
						КонецЕсли;
						ПодробнаяИнформация = НСтр("ru = 'Ошибка при распаковке пакета %1
														|Подробное представление ошибки:
														|%2
														|Файл с ошибкой: %3'");
						ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
						ПодробнаяИнформация = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ПодробнаяИнформация, ПакетЭД, ПодробноеПредставлениеОшибки, ФайлВложение);
						ВидОперации = НСтр("ru = 'Чтение ЭД.'");
						ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробнаяИнформация, ТекстСообщения, 1);
						ДанныеВозврата.Вставить("ЕстьОшибка", Истина);
						ДанныеВозврата.Вставить("ТекстСообщения", ТекстСообщения);
						Возврат;
					КонецПопытки;
					ОбъектXML.Закрыть();
					Если ЗначениеЗаполнено(ПапкаДляРаспаковки) Тогда
						УдалитьФайлы(ПапкаДляРаспаковки);
					Иначе
						УдалитьФайлы(ФайлВложение);
					КонецЕсли;
					
					ИДЗапроса = Statement.ExtIDStatementRequest;
					ИдентификаторВладельца = Новый УникальныйИдентификатор(ИДЗапроса);
					ЭДВладелец = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку(ИдентификаторВладельца);
					
					Если НЕ ЭДВладелец.ПолучитьОбъект() = Неопределено Тогда
						
						УстановитьСтатусЭД(ЭДВладелец, Перечисления.СтатусыЭД.Обработан);
						
						ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭДВладелец, "ВладелецФайла");
						
						АдресВХранилище = ПоместитьВоВременноеХранилище(Document.data.__content);
						Если ЗначениеЗаполнено(ЭДВладелец) Тогда
							НазваниеЗапроса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭДВладелец, "Наименование");
							НазваниеДокумента = СтрЗаменить(НазваниеЗапроса, Нстр("ru = 'Запрос выписки'"), Нстр("ru = 'Выписка банка за период'"));
						Иначе
							НазваниеДокумента = Нстр("ru = 'Выписка банка от %1'");
							НазваниеДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
												НазваниеДокумента, Формат(ТекущаяДатаСеанса(), "ДЛФ=D"));
						КонецЕсли;
						ПрисоединенныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(ВладелецФайла, НазваниеДокумента, "xml",
							ТекущаяДатаСеанса(), ТекущаяДатаСеанса(), АдресВХранилище, , ,
							Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());
						СтруктураРеквизитов = Новый Структура;
						СтруктураРеквизитов.Вставить("ЭлектронныйДокументВладелец", ЭДВладелец);
						СтруктураРеквизитов.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Получен);
						СтруктураРеквизитов.Вставить("ВидЭД", Перечисления.ВидыЭД.ВыпискаБанка);
						СтруктураРеквизитов.Вставить("Контрагент", Банк);
						СтруктураРеквизитов.Вставить("Организация", РеквизитыПакета.Организация);
						СтруктураРеквизитов.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Входящий);
						СтруктураРеквизитов.Вставить("СоглашениеЭД", СоглашениеЭД);
						СтруктураРеквизитов.Вставить(
							"НаименованиеФайла", СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(НазваниеДокумента));
						ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ПрисоединенныйФайл, СтруктураРеквизитов, Ложь);
						
						Если ВыполнятьКриптооперацииНаСервере И МенеджерКриптографии <> Неопределено
							И Document.signature.Количество() Тогда
							Для Каждого signature ИЗ Document.signature Цикл
								Попытка
									СертификатыПодписи = МенеджерКриптографии.ПолучитьСертификатыИзПодписи(signature.signedData);
								Исключение
									Если Пользователи.ЭтоПолноправныйПользователь( , , Ложь) Тогда
										ШаблонСообщения = НСтр("ru = 'Возникла ошибка при разборе пакета %1
																	|(подробности см. в Журнале регистрации).'");
										КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
										ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											ШаблонСообщения, ПакетЭД, КраткоеПредставлениеОшибки);
									Иначе
										ТекстСообщения = Нстр("ru = 'Электронный документ, полученный из банка содержит некорретную подпись
																	|и не будет обработан'");
									КонецЕсли;
									ПодробнаяИнформация = НСтр("ru = 'Ошибка при распаковке пакета %1
																	|Подробное представление ошибки:
																	|%2
																	|Файл пакета: %3'");
									ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
									ПодробнаяИнформация = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										ПодробнаяИнформация, ПакетЭД, ПодробноеПредставлениеОшибки, ФайлВложение);
									ВидОперации = НСтр("ru = 'Чтение ЭД.'");
									ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробнаяИнформация, ТекстСообщения, 1);
									ДанныеВозврата.Вставить("ЕстьОшибка", Истина);
									ДанныеВозврата.Вставить("ТекстСообщения", ТекстСообщения);
									Возврат;
								КонецПопытки;
								Если СертификатыПодписи.Количество() > 0 Тогда
									Сертификат = СертификатыПодписи[0];
									ПредставлениеПользователя = ЭлектроннаяПодписьКлиентСервер.ПредставлениеСубъекта(Сертификат);
									Отпечаток = Base64Строка(Сертификат.Отпечаток);
									ДвоичныеДанныеСертификата = Сертификат.Выгрузить();
								КонецЕсли;
								ЗанестиИнформациюОПодписи(ПрисоединенныйФайл, signature.signedData, Отпечаток, ТекущаяДатаСеанса(), "", ,
									ПредставлениеПользователя, ДвоичныеДанныеСертификата);
							КонецЦикла;
							ОпределитьСтатусыПодписей(ПрисоединенныйФайл);
						ИначеЕсли Document.signature.Количество() Тогда
							МассивПодписей = Новый Массив;
							Для Каждого signature ИЗ Document.signature Цикл
								МассивПодписей.Добавить(signature.signedData);
							КонецЦикла;
							ДанныеВозврата.ДанныеЭП.Вставить(ПрисоединенныйФайл, МассивПодписей);
						КонецЕсли;
						СохранитьШтампыБанка(ПрисоединенныйФайл);
						ОпределитьИсполненныеПлатежныеПоручения(ПрисоединенныйФайл);
					Иначе
						ПодробнаяИнформация = НСтр("ru = 'Ошибка при распаковке пакета %1
														|Не найден  запрос выписки по идентификатору: %2'");
						ПодробнаяИнформация = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ПодробнаяИнформация, ПакетЭД, ИдентификаторВладельца);
						ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробнаяИнформация, , 1);
						УдалитьФайлы(ФайлВложение);
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли НЕ ResultBank.Error = Неопределено Тогда
			ТекстОшибки = ТекстСообщенияОбОшибкеОтветаБанка(ResultBank.Error);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ДанныеВозврата.Вставить("ЕстьОшибка", Истина);
			ДанныеВозврата.Вставить("ТекстСообщения", ТекстОшибки);
			Возврат;
		КонецЕсли;
	КонецЦикла;
	УстановитьСтатусПакета(ПакетЭД, Перечисления.СтатусыПакетовЭД.Распакован);
	
КонецПроцедуры

// Только для внутреннего использования
Функция ТестСвязиСБанкомAsync(СоглашениеЭД, СтруктураПараметровЗапросаМаркера) Экспорт
	
	ИдентификаторНазначения = СтруктураПараметровЗапросаМаркера.ИдентификаторНазначения;
	ЗашифрованныйМаркер = ЗашифрованныйМаркерБанка(СоглашениеЭД, СтруктураПараметровЗапросаМаркера);
	Если ЗашифрованныйМаркер <> Неопределено Тогда
		МенеджерКриптографииСоздан = Истина;
		Попытка
			МенеджерКриптографии = ПолучитьМенеджерКриптографии();
			МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = СтруктураПараметровЗапросаМаркера.ПарольПользователя;
		Исключение
			ТекстСообщения = ПолучитьСообщениеОбОшибке("100");
			ЭлектронныеДокументыКлиентСервер.СообщитьПользователю(ТекстСообщения, ИдентификаторНазначения);
			МенеджерКриптографииСоздан = Ложь;
		КонецПопытки;
		Если МенеджерКриптографииСоздан Тогда
			ДанныеРасшифрованы = Истина;
			Попытка
				РасшифрованныеДвоичныеДанные = МенеджерКриптографии.Расшифровать(ЗашифрованныйМаркер);
			Исключение
				ТекстСообщения = ПолучитьСообщениеОбОшибке("103");
				ЭлектронныеДокументыКлиентСервер.СообщитьПользователю(ТекстСообщения, ИдентификаторНазначения);
				ДанныеРасшифрованы = Ложь;
			КонецПопытки;
			Если ДанныеРасшифрованы Тогда
				Маркер = СтрокаИзДвоичныхДанных(РасшифрованныеДвоичныеДанные);
			Иначе
				Возврат Ложь;
			КонецЕсли;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	РезультатТеста = НСтр("ru = 'Не пройден.'");
	ПройденУспешно = Ложь;
	Если ЗначениеЗаполнено(Маркер) Тогда
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
		ПройденУспешно = Истина;
	КонецЕсли;
	ЭлектронныеДокументыКлиентСервер.СообщитьПользователю(РезультатТеста, ИдентификаторНазначения);

	Если НЕ ПройденУспешно Тогда
		Возврат Ложь;
	КонецЕсли;
	Тест = НСтр("ru = 'Отправка тестового пакета в банк.'");
	ЭлектронныеДокументыКлиентСервер.СообщитьПользователю(Тест, ИдентификаторНазначения);
	
	ЗапросОтправлен = Ложь;
	
	ОтправитьЗапросЗондВБанк(СоглашениеЭД, Маркер, ЗапросОтправлен);
	
	Если НЕ ЗапросОтправлен Тогда
		РезультатТеста = НСтр("ru = 'Не пройден.'");
		ПройденУспешно = Ложь;
	КонецЕсли;
	ЭлектронныеДокументыКлиентСервер.СообщитьПользователю(РезультатТеста, ИдентификаторНазначения);
	
	Возврат ПройденУспешно;
	
КонецФункции

// Только для внутреннего использования
Функция ЗашифрованныйМаркерБанка(Знач НастройкаЭДО, Знач ПараметрыЗапросаМаркера) Экспорт
	
	РеквизитыНастройкиЭДО = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НастройкаЭДО, "ИдентификаторОрганизации, АдресСервера");
	Если ПараметрыЗапросаМаркера.Свойство("ВыбранныйСертификат") Тогда
		СертификатПодписи = ПараметрыЗапросаМаркера.ВыбранныйСертификат;
		ДвоичныеДанныеСертификата = ПараметрыЗапросаМаркера.ДвоичныеДанныеСертификата
	Иначе
		СертификатПодписи = ПараметрыЗапросаМаркера.СертификатПодписи;
		ДанныеСертификата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СертификатПодписи, "ДанныеСертификата");
		ДвоичныеДанныеСертификата = ДанныеСертификата.Получить();
	КонецЕсли;
	
	Возврат ПолучитьМаркерБанка(
		РеквизитыНастройкиЭДО.АдресСервера, РеквизитыНастройкиЭДО.ИдентификаторОрганизации, ДвоичныеДанныеСертификата)
	
КонецФункции

// Производит аутентификацию на сервере банка и получает идентификатор сессии
//
// Параметры
//  АдресСервера - Строка - URL адрес сервера банка
//  ИдентификаторОрганизации  - Строка - идентификатор организации на сервере банка
//  Пользователь - Строка - имя пользователя
//  Пароль - Строка - пароль пользователя
//  ДанныеSMSАвторизации - Структура - возвращаемый параметр - содержит данные для дополнительной авторизации по SMS
// Возвращаемое значение:
//  Строка - идентификатор сессии банка, Неопределено - если произошла ошибка получения идентификатора
//
Функция МаркерБанка(Знач АдресСервера, Знач ИдентификаторОрганизации, Знач Пользователь, Знач Пароль, ДанныеSMSАутентификации) Экспорт
	
	Соединение = ЭлектронныеДокументыСлужебный.ПолучитьСоединение(АдресСервера);
	
	ИмяФайлаРезультата = ПолучитьИмяВременногоФайла("xml");
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/xml; charset=utf-8");
	Заголовки.Вставить("CustomerID", ИдентификаторОрганизации);
	ХЭШ = СтрокаBase64БезBOM(Пользователь + ":" + Пароль);
	Заголовки.Вставить("Authorization", "Basic " + Хэш);
	
	HTTPЗапрос = Новый HTTPЗапрос("Logon", Заголовки);
	
	Попытка
		Ответ = Соединение.ОтправитьДляОбработки(HTTPЗапрос, ИмяФайлаРезультата);
	Исключение
		ТекстСообщения = НСтр("ru = 'Ошибка отправки данных аутентификации на сервер банка
									|(подробности см. в Журнале регистрации).'");
		ОписаниеОперации = НСтр("ru = 'Аутентификация на сервере банка'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбработатьИсключениеПоЭДНаСервере(ОписаниеОперации, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
		УдалитьФайлы(ИмяФайлаРезультата);
		Возврат Неопределено;
	КонецПопытки;
	
	HTTPЗапрос = Неопределено;
	
	Если Ответ.КодСостояния <> 200 Тогда
		Шаблон = Нстр("ru = 'Ошибка работы с Интернет (%1)'");
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Ответ.КодСостояния);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстИсключения);
		УдалитьФайлы(ИмяФайлаРезультата);
		Возврат Неопределено;
	КонецЕсли;
	
	Чтение = Новый ЧтениеXML;
	URI = ЭлектронныеДокументыСлужебный.ПространствоИменАсинхронногоОбменаСБанками();
	
	Попытка
		Чтение.ОткрытьФайл(ИмяФайлаРезультата);
		ResultBank = ФабрикаXDTO.ПрочитатьXML(Чтение, ФабрикаXDTO.Тип(URI, "ResultBank"));
		ResultBank.Проверить();
		Если НЕ ResultBank.Success = Неопределено Тогда
			Если НЕ ResultBank.Success.LogonResponse = Неопределено Тогда
				Если НЕ ResultBank.Success.LogonResponse.ExtraAuth = Неопределено Тогда
					ДанныеSMSАутентификации = Новый Структура;
					ДанныеSMSАутентификации.Вставить("ТребуетсяSMSАвторизация");
					ДанныеSMSАутентификации.Вставить("МаскаТелефона", ResultBank.Success.LogonResponse.ExtraAuth.OTP.phoneMask);
				КонецЕсли;
				Чтение.Закрыть();
				УдалитьФайлы(ИмяФайлаРезультата);
				Возврат ResultBank.Success.LogonResponse.SID;
			Иначе
				ТекстСообщения = Нстр("ru = 'Получен некорректный ответ банковского сервиса'");
				ТекстОшибки = НСтр("ru = 'Ответ банка содержит некорректные данные.
									|Файл ответа банка: %1'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ИмяФайлаРезультата);
				ОписаниеОперации = НСтр("ru = 'Аутентификация на сервере банка'");
				ОбработатьИсключениеПоЭДНаСервере(ОписаниеОперации, ТекстОшибки, ТекстСообщения, 1);
				Возврат Неопределено;
			КонецЕсли
		ИначеЕсли НЕ ResultBank.Error = Неопределено Тогда
			ТекстОшибки = ТекстСообщенияОбОшибкеОтветаБанка(ResultBank.Error);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
	Исключение
		ТекстСообщения = НСтр("ru = 'Ошибка чтения ответа банка
									|(подробности см. в Журнале регистрации).'");
		ОписаниеОперации = НСтр("ru = 'Аутентификация на сервере банка'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбработатьИсключениеПоЭДНаСервере(ОписаниеОперации, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
	КонецПопытки;
	
	Чтение.Закрыть();
	УдалитьФайлы(ИмяФайлаРезультата);
	
КонецФункции

// только для внутреннего использования
Процедура ПолучитьЭДИзБанкаАсинхронныйОбмен(Знач ПараметрыАвторизации, ДанныеВозврата) Экспорт
	
	ДанныеВозврата.Вставить("ДанныеЭП", Новый Соответствие);
	ДанныеВозврата.Вставить("КолПолученныхПакетов", 0);
	
	Для Каждого КлючЗначение Из ПараметрыАвторизации Цикл
		СоглашениеЭД = КлючЗначение.Ключ;
		Параметры = КлючЗначение.Значение;
		Прервать;
	КонецЦикла;
	
	Если Параметры = Неопределено Тогда
		ДанныеВозврата.Вставить("ЕстьОшибка", Истина);
		ДанныеВозврата.Вставить("ТекстСообщения", НСтр("ru = 'Неизвестная ошибка'"));
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура("НастройкаЭДО", СоглашениеЭД);
	ДанныеОСостоянии = РегистрыСведений.СостоянияОбменовЭДСБанками.Получить(Отбор);
	
	РеквизитыСоглашения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		СоглашениеЭД, "АдресСервера, Контрагент, ИдентификаторОрганизации");
		
	Соединение = ЭлектронныеДокументыСлужебный.ПолучитьСоединение(РеквизитыСоглашения.АдресСервера);
	
	Заголовки = Новый Соответствие;
	Если Параметры.Свойство("МаркерРасшифрованный") Тогда
		Заголовки.Вставить("SID", Параметры.МаркерРасшифрованный);
	Иначе
		Шаблон = Нстр("ru = 'Ошибка аутентификации на сервисе по адресу (%1)'");
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, РеквизитыСоглашения.АдресСервера);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстИсключения);
		ДанныеВозврата.Вставить("ЕстьОшибка", Истина);
		ДанныеВозврата.Вставить("ТекстСообщения", ТекстИсключения);
		Возврат;
	КонецЕсли;
	
	Заголовки.Вставить("CustomerId", РеквизитыСоглашения.ИдентификаторОрганизации);

	ИмяФайлаРезультата = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("xml");

	НачальнаяДатаПолученияЭД = ДанныеОСостоянии.ПоследняяДатаПолученияЭД;
	ПоследняяДатаПолученияЭД = НачальнаяДатаПолученияЭД;
	
	ПараметрЗапроса = ?(ЗначениеЗаполнено(НачальнаяДатаПолученияЭД), "?date=" + НачальнаяДатаПолученияЭД, "");
	
	АдресРесурса = "GetPackList" + ПараметрЗапроса;
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
	
	Попытка
		Ответ = Соединение.Получить(HTTPЗапрос, ИмяФайлаРезультата);
	Исключение
		КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = Нстр("ru = 'При получении списка новых документов из банка произошла ошибка.
									|%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, КраткоеПредставлениеОшибки);
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВидОперации = НСтр("ru = 'Получение списка новых документов из банка'");
		ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
		ДанныеВозврата.Вставить("ЕстьОшибка", Истина);
		ДанныеВозврата.Вставить("ТекстСообщения", ТекстСообщения);
		Возврат;
	КонецПопытки;
	
	HTTPЗапрос = Неопределено;
	
	Если Ответ.КодСостояния <> 200 Тогда
		Если Ответ.КодСостояния = 401 Тогда
			ДанныеВозврата.Вставить("ТребуетсяПовторнаяАутентификация");
			ДанныеВозврата.Вставить("ЕстьОшибка", Истина);
		Иначе
			Шаблон = Нстр("ru = 'Ошибка работы с Интернет (%1)'");
			ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Ответ.КодСостояния);
			УдалитьФайлы(ИмяФайлаРезультата);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстИсключения);
			ДанныеВозврата.Вставить("ЕстьОшибка", Истина);
			ДанныеВозврата.Вставить("ТекстСообщения", ТекстИсключения);
		КонецЕсли;
		УдалитьФайлы(ИмяФайлаРезультата);
		Возврат;
	КонецЕсли;
		
	ПространствоИмен = ЭлектронныеДокументыСлужебный.ПространствоИменАсинхронногоОбменаСБанками();
		
	ОбъектXML = Новый ЧтениеXML;
		
	Попытка
		ОбъектXML.ОткрытьФайл(ИмяФайлаРезультата);
		СписокПакетовТип = ЭлектронныеДокументыВнутренний.ПолучитьТипЗначенияCML("ResultBank", ПространствоИмен);
		ResultBank = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, СписокПакетовТип);
		ResultBank.Проверить();
	Исключение
		КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = Нстр("ru = 'При чтении документа из банка произошла ошибка.
									|%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, КраткоеПредставлениеОшибки);
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВидОперации = НСтр("ru = 'Чтение списка новых документов'");
		ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
		ДанныеВозврата.Вставить("ЕстьОшибка", Истина);
		ДанныеВозврата.Вставить("ТекстСообщения", ТекстСообщения);
		ОбъектXML.Закрыть();
		УдалитьФайлы(ИмяФайлаРезультата);
		Возврат;
	КонецПопытки;
	
	ОбъектXML.Закрыть();
	УдалитьФайлы(ИмяФайлаРезультата);
		
	Если НЕ ResultBank.Success = Неопределено Тогда
		Если НЕ ResultBank.Success.GetPacketListResponse = Неопределено Тогда
			МассивИдентификаторов = Новый Массив;
			Для Каждого Идентификатор Из ResultBank.Success.GetPacketListResponse.PacketID Цикл
				МассивИдентификаторов.Добавить(Идентификатор);
			КонецЦикла;
			ПоследняяДатаПолученияЭД = ResultBank.Success.GetPacketListResponse.TimeStampLastPacket;
		Иначе
			Возврат;
		КонецЕсли;
	ИначеЕсли НЕ ResultBank.Error = Неопределено Тогда
		ТекстОшибки = ТекстСообщенияОбОшибкеОтветаБанка(ResultBank.Error);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ДанныеВозврата.Вставить("ЕстьОшибка", Истина);
		ДанныеВозврата.Вставить("ТекстСообщения", ТекстОшибки);
		Возврат;
	КонецЕсли;
 		
	КС = Новый КвалификаторыСтроки(80);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС);
	
	ТаблицаИдентификаторов = Новый ТаблицаЗначений;
	ТаблицаИдентификаторов.Колонки.Добавить("Идентификатор", ОписаниеТиповС);
	
	Для Каждого Идентификатор Из МассивИдентификаторов Цикл
		НовСтрока = ТаблицаИдентификаторов.Добавить();
		НовСтрока.Идентификатор = Идентификатор;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаИдентификаторов.Идентификатор
	|ПОМЕСТИТЬ ТаблицаИдентификаторов
	|ИЗ
	|	&ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПакетЭД.ВнешнийУИД
	|ПОМЕСТИТЬ ЗагруженныеПакеты
	|ИЗ
	|	Документ.ПакетЭД КАК ПакетЭД
	|ГДЕ
	|	ПакетЭД.ВнешнийУИД В
	|			(ВЫБРАТЬ
	|				ТаблицаИдентификаторов.Идентификатор
	|			ИЗ
	|				ТаблицаИдентификаторов)
	|	И ПакетЭД.НастройкаЭДО = &НастройкаЭДО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаИдентификаторов.Идентификатор
	|ИЗ
	|	ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
	|ГДЕ
	|	НЕ ТаблицаИдентификаторов.Идентификатор В
	|				(ВЫБРАТЬ
	|					ЗагруженныеПакеты.ВнешнийУИД
	|				ИЗ
	|					ЗагруженныеПакеты)";
	Запрос.УстановитьПараметр("ТаблицаИдентификаторов", ТаблицаИдентификаторов);
	Запрос.УстановитьПараметр("НастройкаЭДО", СоглашениеЭД);
	МассивИдентификаторов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Идентификатор");
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	МассивПолученныхПакетов = Новый Массив;
	Для Каждого Идентификатор Из МассивИдентификаторов Цикл
		АдресРесурса = "GetPack?id=" + Идентификатор;
		HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
		ИмяФайлаРезультата = ПолучитьИмяВременногоФайла("xml");;
		Попытка
			Ответ = Соединение.Получить(HTTPЗапрос, ИмяФайлаРезультата);
		Исключение
			КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстСообщения = Нстр("ru = 'При получении документа из банка произошла ошибка.
										|%1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, КраткоеПредставлениеОшибки);
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ВидОперации = НСтр("ru = 'Получение нового пакета из банка по идентификатору'");
			ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
			ДанныеВозврата.Вставить("ЕстьОшибка", Истина);
			ДанныеВозврата.Вставить("ТекстСообщения", ТекстСообщения);
			УдалитьФайлы(ИмяФайлаРезультата);
			Возврат;
		КонецПопытки;
		
		Если Ответ.КодСостояния <> 200 Тогда
			Шаблон = Нстр("ru = 'Ошибка работы с Интернет (%1)'");
			ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Ответ.КодСостояния);
			УдалитьФайлы(ИмяФайлаРезультата);
			ДанныеВозврата.Вставить("ЕстьОшибка", Истина);
			ДанныеВозврата.Вставить("ТекстСообщения", ТекстИсключения);
			УдалитьФайлы(ИмяФайлаРезультата);
			Возврат;
		КонецЕсли;
			
		СтруктураПараметров = ДанныеВходящегоЭДБанка(СоглашениеЭД, ИмяФайлаРезультата);
		
		Если ЗначениеЗаполнено(СтруктураПараметров) Тогда
			Если СтруктураПараметров.Свойство("ДанныеОшибки") Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ДанныеВозврата, СтруктураПараметров.ДанныеОшибки, Истина);
				Возврат;
			КонецЕсли;
			ПакетЭД = ЭлектронныеДокументыСлужебный.СформироватьНовыйПакетЭД(СтруктураПараметров);
			Если ЗначениеЗаполнено(ПакетЭД) Тогда
				ИмяФайла = "EDI_" + СтруктураПараметров.ВнешнийУИД;
				ДвоичныеДанныеЭлемента = Новый ДвоичныеДанные(СтруктураПараметров.ИмяФайлаПакета);
				УдалитьФайлы(СтруктураПараметров.ИмяФайлаПакета);
				АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеЭлемента);
				ПрисоединенныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(ПакетЭД, ИмяФайла, "xml", ТекущаяДатаСеанса,
								ТекущаяДатаСеанса, АдресВХранилище, , , Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());
				СтруктураРеквизитов = Новый Структура;
				СтруктураРеквизитов.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Получен);
				СтруктураРеквизитов.Вставить("Контрагент", РеквизитыСоглашения.Контрагент);
				СтруктураРеквизитов.Вставить("СоглашениеЭД", СоглашениеЭД);
				ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ПрисоединенныйФайл, СтруктураРеквизитов, Ложь);
				МассивПолученныхПакетов.Добавить(ПакетЭД);
			КонецЕсли;
			РаспаковатьПакетЭДБанка(ПакетЭД, ДанныеВозврата);
		КонецЕсли;
	КонецЦикла;
		
	Если ЗначениеЗаполнено(ПоследняяДатаПолученияЭД) И ПоследняяДатаПолученияЭД > НачальнаяДатаПолученияЭД Тогда // сдвигаем дату в РС
		НачатьТранзакцию();
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СостоянияОбменовЭДСБанками");
		ЭлементБлокировки.УстановитьЗначение("НастройкаЭДО", СоглашениеЭД);
		Попытка
			Блокировка.Заблокировать();
		Исключение
			КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстСообщения = Нстр("ru = 'При записи даты получения документов произошла ошибка:.
										|%1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, КраткоеПредставлениеОшибки);
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ВидОперации = НСтр("ru = 'Сохранение последней даты получения документов'");
			ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
			ДанныеВозврата.Вставить("ЕстьОшибка", Истина);
			ДанныеВозврата.Вставить("ТекстСообщения", ТекстСообщения);
			Возврат;
		КонецПопытки;
		МенеджерЗаписи = РегистрыСведений.СостоянияОбменовЭДСБанками.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ПоследняяДатаПолученияЭД = ПоследняяДатаПолученияЭД;
		МенеджерЗаписи.НастройкаЭДО = СоглашениеЭД;
		МенеджерЗаписи.Записать();
		ЗафиксироватьТранзакцию();
	КонецЕсли;
		
	ДанныеВозврата.КолПолученныхПакетов = МассивПолученныхПакетов.Количество();
	
КонецПроцедуры

// Авторизуется на сервере банка и получает идентификатор сессии по одноразовому паролю из SMS
//
// Параметры
//  АдресСервера - Строка - URL адрес сервера банка
//  ИдентификаторОрганизации - Строка - идентификатор организации на сервере банка
//  ИдентификаторСессии  - Строка - неавторизованный идентификатор сессии
//  ОдноразовыйПароль - Строка - пароль, полученный пользователем в виде СМС
// Возвращаемое значение:
//   Строка   - идентификатор сессии банка, Неопределено - если произошла ошибка получения идентификатора
//
Функция МаркерБанкаПоSMS(Знач АдресСервера, Знач ИдентификаторОрганизации, Знач ИдентификаторСессии, Знач ОдноразовыйПароль) Экспорт
	
	Соединение = ЭлектронныеДокументыСлужебный.ПолучитьСоединение(АдресСервера);
	
	ИмяФайлаРезультата = ПолучитьИмяВременногоФайла();
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/xml; charset=utf-8");
	Заголовки.Вставить("CustomerID", ИдентификаторОрганизации);
	Заголовки.Вставить("SID", ИдентификаторСессии);
	Заголовки.Вставить("OTP", ОдноразовыйПароль);
	
	HTTPЗапрос = Новый HTTPЗапрос("LogonOTP", Заголовки);
	
	Попытка
		Ответ = Соединение.ОтправитьДляОбработки(HTTPЗапрос, ИмяФайлаРезультата);
	Исключение
		ТекстСообщения = НСтр("ru = 'Ошибка аутентификации на сервере банка
									|(подробности см. в Журнале регистрации).'");
		ОписаниеОперации = НСтр("ru = 'Аутентификация на сервере банка'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбработатьИсключениеПоЭДНаСервере(ОписаниеОперации, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
		УдалитьФайлы(ИмяФайлаРезультата);
		Возврат Неопределено;
	КонецПопытки;
	
	HTTPЗапрос = Неопределено;
	
	Если Ответ.КодСостояния <> 200 Тогда
		Шаблон = Нстр("ru = 'Ошибка работы с Интернет (%1)'");
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Ответ.КодСостояния);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстИсключения);
		УдалитьФайлы(ИмяФайлаРезультата);
		Возврат Неопределено;
	КонецЕсли;
	
	Чтение = Новый ЧтениеXML;
	URI = ЭлектронныеДокументыСлужебный.ПространствоИменАсинхронногоОбменаСБанками();
	
	Попытка
		Чтение.ОткрытьФайл(ИмяФайлаРезультата);
		ResultBank = ФабрикаXDTO.ПрочитатьXML(Чтение, ФабрикаXDTO.Тип(URI, "ResultBank"));
		ResultBank.Проверить();
		Если НЕ ResultBank.Success = Неопределено Тогда
			Если НЕ ResultBank.Success.LogonResponse = Неопределено Тогда
				Чтение.Закрыть();
				УдалитьФайлы(ИмяФайлаРезультата);
				Возврат ResultBank.Success.LogonResponse.SID;
			КонецЕсли
		ИначеЕсли НЕ ResultBank.Error = Неопределено Тогда
			ТекстОшибки = ТекстСообщенияОбОшибкеОтветаБанка(ResultBank.Error);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
	Исключение
		ТекстСообщения = НСтр("ru = 'Ошибка чтения ответа банка
									|(подробности см. в Журнале регистрации).'");
		ОписаниеОперации = НСтр("ru = 'Аутентификация на сервере банка'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбработатьИсключениеПоЭДНаСервере(ОписаниеОперации, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
	КонецПопытки;
	
	Чтение.Закрыть();
	УдалитьФайлы(ИмяФайлаРезультата);
	
КонецФункции

Функция ОтправитьЗапросСтатусаЭД(Знач ПараметрыАвторизации, ЭД) Экспорт
	
	РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭД, "СоглашениеЭД, ВладелецФайла");
	
	РеквизитыСоглашения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		РеквизитыЭД.СоглашениеЭД, "Организация, Контрагент, ИдентификаторОрганизации");
	Ответственный = ЭлектронныеДокументыПереопределяемый.ПолучитьОтветственногоПоЭД(
										РеквизитыСоглашения.Контрагент, РеквизитыЭД.СоглашениеЭД);
	ОтправительНаименование = ЭлектронныеДокументыСлужебный.СокращенноеНаименованиеОрганизации(
																РеквизитыСоглашения.Организация);
	ВерсияПрограммыКлиента = ЭлектронныеДокументыПовтИсп.ВерсияПрограммыКлиентаДляБанка();
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыСоглашения.Организация, "ИНН, КПП");
	РеквизитыБанка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыСоглашения.Контрагент, "Код, Наименование");
	ПространствоИмен = ЭлектронныеДокументыСлужебный.ПространствоИменАсинхронногоОбменаСБанками();
	ВерсияСхемыАсинхронногоОбменаСБанками = ЭлектронныеДокументыСлужебный.ВерсияСхемыАсинхронногоОбменаСБанками();
	
	ТекстОшибки = "";
	Попытка
			
		ВремФайл = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("xml");
			
		УнИдЭД = Новый УникальныйИдентификатор;
		ИдЭДИсходный = ЭД.УникальныйИдентификатор();
			
		ЗапросОСостоянииЭД = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("StatusRequest", ПространствоИмен);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ЗапросОСостоянииЭД, "id", Строка(УнИдЭД), Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
			ЗапросОСостоянииЭД, "ExtID", Строка(ИдЭДИсходный), Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
			ЗапросОСостоянииЭД, "formatVersion", ВерсияСхемыАсинхронногоОбменаСБанками, Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
			ЗапросОСостоянииЭД, "creationDate", ТекущаяДатаСеанса(), Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
			ЗапросОСостоянииЭД, "userAgent", ВерсияПрограммыКлиента, , ТекстОшибки);
		Отправитель = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("CustomerPartyType", ПространствоИмен);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
			Отправитель, "id", РеквизитыСоглашения.ИдентификаторОрганизации, Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
			Отправитель, "name", ОтправительНаименование, Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
			Отправитель, "inn", РеквизитыОрганизации.ИНН, Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Отправитель, "kpp", РеквизитыОрганизации.КПП, , ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ЗапросОСостоянииЭД, "Sender", Отправитель, Истина, ТекстОшибки);
		
		Получатель = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("BankPartyType", ПространствоИмен);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Получатель, "bic", РеквизитыБанка.Код, Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
			Получатель, "name", РеквизитыБанка.Наименование, Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
			ЗапросОСостоянииЭД, "Recipient", Получатель, Истина, ТекстОшибки);
		ЗапросОСостоянииЭД.Проверить();
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ФайлСформирован = Ложь;
		Иначе
			ЭлектронныеДокументыВнутренний.ВыгрузитьЭДвФайл(ЗапросОСостоянииЭД, ВремФайл, Ложь, "UTF-8");
			ФайлСформирован = Истина;
		КонецЕсли;

	Исключение
		КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										ШаблонСообщения, КраткоеПредставлениеОшибки);
		Операция = НСтр("ru = 'Формирование ЭД'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбработатьИсключениеПоЭДНаСервере(Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
		ФайлСформирован = Ложь;
	КонецПопытки;
		
	Если Не ФайлСформирован Тогда
		УдалитьФайлы(ВремФайл);
		Возврат 0;
	КонецЕсли;
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ВремФайл);
	АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);

	УдалитьФайлы(ВремФайл);
	
	НазваниеЭД = НСтр("ru = 'Запрос состояния ЭД'");

	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	ЭДЗапрос = ПрисоединенныеФайлы.ДобавитьФайл(РеквизитыЭД.ВладелецФайла, НазваниеЭД, "xml", ТекущаяДатаСеанса,
		ТекущаяДатаСеанса, АдресФайла, , , Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку(УнИдЭД));

	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Автор", Пользователи.АвторизованныйПользователь());
	СтруктураПараметров.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
	СтруктураПараметров.Вставить("ВидЭД", Перечисления.ВидыЭД.ЗапросОСостоянииЭД);
	СтруктураПараметров.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Сформирован);
	СтруктураПараметров.Вставить("Ответственный", Ответственный);
	СтруктураПараметров.Вставить("Организация", РеквизитыСоглашения.Организация);
	СтруктураПараметров.Вставить("Контрагент", РеквизитыСоглашения.Контрагент);
	СтруктураПараметров.Вставить("ЭлектронныйДокументВладелец", ЭД);
	СтруктураПараметров.Вставить("СоглашениеЭД", РеквизитыЭД.СоглашениеЭД);
	СтруктураПараметров.Вставить("ДатаДокументаОтправителя", ТекущаяДатаСеанса);
	СтруктураПараметров.Вставить("НаименованиеФайла", НазваниеЭД);
	
	ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ЭДЗапрос, СтруктураПараметров, Ложь);
	
	СтруктураПЭД = Новый Структура;
	
	СтруктураПЭД.Вставить("Организация", РеквизитыСоглашения.Организация);
	СтруктураПЭД.Вставить("Контрагент", РеквизитыСоглашения.Контрагент);
	СтруктураПЭД.Вставить("Отправитель", РеквизитыСоглашения.Организация);
	СтруктураПЭД.Вставить("Получатель", РеквизитыСоглашения.Контрагент);
	СтруктураПЭД.Вставить("НастройкаЭДО", РеквизитыЭД.СоглашениеЭД);
	СтруктураПЭД.Вставить("СпособОбменаЭД", Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка);
	ДанныеТабличнойЧасти = Новый Массив;
	ДанныеТабличнойЧасти.Добавить(ЭДЗапрос);
	
	ПЭД = ЭлектронныеДокументыСлужебный.СоздатьПакетЭД(СтруктураПЭД, ДанныеТабличнойЧасти);
	
	Если НЕ ЗначениеЗаполнено(ПЭД) Тогда
		Возврат 0;
	КонецЕсли;
	
	ЭлектронныеДокументыСлужебный.СоздатьЭДПакетAsync(ПЭД);
	
	МассивПакетов = Новый Массив;
	МассивПакетов.Добавить(ПЭД);
	Возврат ОтправкаПакетовЭД(МассивПакетов, ПараметрыАвторизации);
	
КонецФункции

// Формирует и отправляет запрос-зонд в банк
//
// Параметры
//  СоглашениеЭД  - СправочникСсылка.СоглашенияОбИспользованииЭД - Соглашение об обмене с банком
//  РасшифрованныйМаркер  - Строка - расшифрованный маркер банка
//  ЗапросОтправлен  - Булево - Признак успешной отправки запроса
//
Процедура ОтправитьЗапросЗондВБанк(Знач СоглашениеЭД, Знач ИдентификаторСессии, ЗапросОтправлен) Экспорт
	
	ЗапросОтправлен = Ложь;
	РеквизитыСоглашения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		СоглашениеЭД, "Организация, Контрагент, ИдентификаторОрганизации");
	Ответственный = ЭлектронныеДокументыПереопределяемый.ПолучитьОтветственногоПоЭД(
										РеквизитыСоглашения.Контрагент, СоглашениеЭД);
	
	ОтправительНаименование = ЭлектронныеДокументыСлужебный.СокращенноеНаименованиеОрганизации(
																РеквизитыСоглашения.Организация);
	ВерсияПрограммыКлиента = ЭлектронныеДокументыПовтИсп.ВерсияПрограммыКлиентаДляБанка();
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыСоглашения.Организация, "ИНН, КПП");
	РеквизитыБанка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыСоглашения.Контрагент, "Код, Наименование");
	ПространствоИмен = ЭлектронныеДокументыСлужебный.ПространствоИменАсинхронногоОбменаСБанками();
	
	ТекстОшибки = "";
	Попытка
			
		ВремФайл = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("xml");
			
		УнИдЭД = Новый УникальныйИдентификатор;
		
		ЗапросЗонд = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Probe", ПространствоИмен);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ЗапросЗонд, "id", Строка(УнИдЭД), Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ЗапросЗонд, "formatVersion",
			ЭлектронныеДокументыСлужебный.ВерсияСхемыАсинхронногоОбменаСБанками(), Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
			ЗапросЗонд, "creationDate", ТекущаяДатаСеанса(), Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ЗапросЗонд, "userAgent", ВерсияПрограммыКлиента, , ТекстОшибки);
		Отправитель = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("CustomerPartyType", ПространствоИмен);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
			Отправитель, "id", РеквизитыСоглашения.ИдентификаторОрганизации, Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
			Отправитель, "name", ОтправительНаименование, Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
			Отправитель, "inn", РеквизитыОрганизации.ИНН, Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Отправитель, "kpp", РеквизитыОрганизации.КПП, , ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ЗапросЗонд, "Sender", Отправитель, Истина, ТекстОшибки);
		
		Получатель = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("BankPartyType", ПространствоИмен);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Получатель, "bic", РеквизитыБанка.Код, Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
			Получатель, "name", РеквизитыБанка.Наименование, Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ЗапросЗонд, "Recipient", Получатель, Истина, ТекстОшибки);
		ЗапросЗонд.Проверить();
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ФайлСформирован = Ложь;
		Иначе
			ЭлектронныеДокументыВнутренний.ВыгрузитьЭДвФайл(ЗапросЗонд, ВремФайл, Ложь, "UTF-8");
			ФайлСформирован = Истина;
		КонецЕсли;

	Исключение
		КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										ШаблонСообщения, КраткоеПредставлениеОшибки);
		Операция = НСтр("ru = 'Формирование ЭД'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбработатьИсключениеПоЭДНаСервере(Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
		ФайлСформирован = Ложь;
	КонецПопытки;
		
	Если Не ФайлСформирован Тогда
		УдалитьФайлы(ВремФайл);
		Возврат;
	КонецЕсли;
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ВремФайл);
	АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);

	УдалитьФайлы(ВремФайл);
	
	НазваниеЭД = НСтр("ru = 'Запрос-зонд'");

	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	ЭД = ПрисоединенныеФайлы.ДобавитьФайл(СоглашениеЭД, НазваниеЭД, "xml", ТекущаяДатаСеанса, ТекущаяДатаСеанса,
										АдресФайла, , , Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку(УнИдЭД));

	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Автор", Пользователи.АвторизованныйПользователь());
	СтруктураПараметров.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
	СтруктураПараметров.Вставить("ВидЭД", Перечисления.ВидыЭД.ЗапросЗонд);
	СтруктураПараметров.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Сформирован);
	СтруктураПараметров.Вставить("Ответственный", Ответственный);
	СтруктураПараметров.Вставить("Организация", РеквизитыСоглашения.Организация);
	СтруктураПараметров.Вставить("Контрагент", РеквизитыСоглашения.Контрагент);
	СтруктураПараметров.Вставить("СоглашениеЭД", СоглашениеЭД);
	СтруктураПараметров.Вставить("ДатаДокументаОтправителя", ТекущаяДатаСеанса);
	СтруктураПараметров.Вставить("НаименованиеФайла", НазваниеЭД);
	СтруктураПараметров.Вставить("ВладелецЭД", СоглашениеЭД);

	ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ЭД, СтруктураПараметров);
	
	СтруктураПЭД = Новый Структура;
	
	СтруктураПЭД.Вставить("Организация", РеквизитыСоглашения.Организация);
	СтруктураПЭД.Вставить("Контрагент", РеквизитыСоглашения.Контрагент);
	СтруктураПЭД.Вставить("Отправитель", РеквизитыСоглашения.Организация);
	СтруктураПЭД.Вставить("Получатель", РеквизитыСоглашения.Контрагент);
	СтруктураПЭД.Вставить("НастройкаЭДО", СоглашениеЭД);
	СтруктураПЭД.Вставить("СпособОбменаЭД", Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка);
	ДанныеТабличнойЧасти = Новый Массив;
	ДанныеТабличнойЧасти.Добавить(ЭД);
	
	ПЭД = ЭлектронныеДокументыСлужебный.СоздатьПакетЭД(СтруктураПЭД, ДанныеТабличнойЧасти);
	
	Если НЕ ЗначениеЗаполнено(ПЭД) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлектронныеДокументыСлужебный.СоздатьЭДПакетAsync(ПЭД);
	
	ПараметрыАвторизации = Новый Соответствие;
	ПараметрыАвторизации.Вставить(СоглашениеЭД, Новый Структура("МаркерРасшифрованный", ИдентификаторСессии));
	МассивПакетов = Новый Массив;
	МассивПакетов.Добавить(ПЭД);
	ЗапросОтправлен = ОтправкаПакетовЭД(МассивПакетов, ПараметрыАвторизации) = 1;
	
КонецПроцедуры

// Формирует ЭД запрос-зонд
//
// Параметры
//  НастройкаЭДО  - СправочникСсылка.СоглашенияОбИспользованииЭД - Соглашение об обмене с банком
//  МассивСтруктурСертификатов - Массив - в элементах содержатся структуры с данными сертификатов
//  НастройкиОбмена - Структура - содержит настройки обмена
//
// Возвращаемое значение:
//  СправочникСсылка.ЭДПрисоединенныеФайлы - ссылка на запрос-зонд
//
Функция СформироватьЗапросЗонд(Знач НастройкаЭДО, Знач МассивОтпечатковСертификатов, НастройкиОбмена) Экспорт
	
	ЗапросОтправлен = Ложь;
	РеквизитыНастройкиЭДО = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		НастройкаЭДО, "Организация, Контрагент, ИдентификаторОрганизации");
	Ответственный = ЭлектронныеДокументыПереопределяемый.ПолучитьОтветственногоПоЭД(
							РеквизитыНастройкиЭДО.Контрагент, РеквизитыНастройкиЭДО);
	
	ОтправительНаименование = ЭлектронныеДокументыСлужебный.СокращенноеНаименованиеОрганизации(
															РеквизитыНастройкиЭДО.Организация);
	ВерсияПрограммыКлиента = ЭлектронныеДокументыПовтИсп.ВерсияПрограммыКлиентаДляБанка();
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыНастройкиЭДО.Организация, "ИНН, КПП");
	РеквизитыБанка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыНастройкиЭДО.Контрагент, "Код, Наименование");
	ПространствоИмен = ЭлектронныеДокументыСлужебный.ПространствоИменАсинхронногоОбменаСБанками();
	
	ТекстОшибки = "";
	Попытка
			
		ВремФайл = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("xml");
			
		УнИдЭД = Новый УникальныйИдентификатор;
		
		ЗапросЗонд = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Probe", ПространствоИмен);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ЗапросЗонд, "id", Строка(УнИдЭД), Истина, ТекстОшибки);
		ВерсияСхемыАсинхронногоОбменаСБанками = ЭлектронныеДокументыСлужебный.ВерсияСхемыАсинхронногоОбменаСБанками();
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
			ЗапросЗонд, "formatVersion", ВерсияСхемыАсинхронногоОбменаСБанками, Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
			ЗапросЗонд, "creationDate", ТекущаяДатаСеанса(), Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ЗапросЗонд, "userAgent", ВерсияПрограммыКлиента, , ТекстОшибки);
		Отправитель = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("CustomerPartyType", ПространствоИмен);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
			Отправитель, "id", РеквизитыНастройкиЭДО.ИдентификаторОрганизации, Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
			Отправитель, "name", ОтправительНаименование, Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
			Отправитель, "inn", РеквизитыОрганизации.ИНН, Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Отправитель, "kpp", РеквизитыОрганизации.КПП, , ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ЗапросЗонд, "Sender", Отправитель, Истина, ТекстОшибки);
		
		Получатель = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("BankPartyType", ПространствоИмен);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Получатель, "bic", РеквизитыБанка.Код, Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
			Получатель, "name", РеквизитыБанка.Наименование, Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ЗапросЗонд, "Recipient", Получатель, Истина, ТекстОшибки);
		ЗапросЗонд.Проверить();
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ФайлСформирован = Ложь;
		Иначе
			ЭлектронныеДокументыВнутренний.ВыгрузитьЭДвФайл(ЗапросЗонд, ВремФайл, Ложь, "UTF-8");
			ФайлСформирован = Истина;
		КонецЕсли;

	Исключение
		КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										ШаблонСообщения, КраткоеПредставлениеОшибки);
		Операция = НСтр("ru = 'Формирование ЭД'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбработатьИсключениеПоЭДНаСервере(Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
		ФайлСформирован = Ложь;
	КонецПопытки;
		
	Если Не ФайлСформирован Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ВремФайл);
	АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);

	УдалитьФайлы(ВремФайл);
	
	НазваниеЭД = НСтр("ru = 'Запрос-зонд'");

	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	ЭД = ПрисоединенныеФайлы.ДобавитьФайл(НастройкаЭДО, НазваниеЭД, "xml", ТекущаяДатаСеанса, ТекущаяДатаСеанса,
										АдресФайла, , , Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку(УнИдЭД));

	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Автор", Пользователи.АвторизованныйПользователь());
	СтруктураПараметров.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
	СтруктураПараметров.Вставить("ВидЭД", Перечисления.ВидыЭД.ЗапросЗонд);
	СтруктураПараметров.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Сформирован);
	СтруктураПараметров.Вставить("Ответственный", Ответственный);
	СтруктураПараметров.Вставить("Организация", РеквизитыНастройкиЭДО.Организация);
	СтруктураПараметров.Вставить("Контрагент", РеквизитыНастройкиЭДО.Контрагент);
	СтруктураПараметров.Вставить("СоглашениеЭД", НастройкаЭДО);
	СтруктураПараметров.Вставить("ДатаДокументаОтправителя", ТекущаяДатаСеанса);
	СтруктураПараметров.Вставить("НаименованиеФайла", НазваниеЭД);
	СтруктураПараметров.Вставить("ВладелецЭД", НастройкаЭДО);

	ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ЭД, СтруктураПараметров);
	
	ВыполнятьКриптооперацииНаСервере = ВыполнятьКриптооперацииНаСервере();
	
	Если ВыполнятьКриптооперацииНаСервере Тогда
		Попытка
			МассивОтпечатковСертификатовНаСервере = МассивОтпечатковСертификатов();
		Исключение
			МассивОтпечатковСертификатовНаСервере = Новый Массив;
		КонецПопытки;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОтпечатковСертификатов, МассивОтпечатковСертификатовНаСервере, Истина);
	КонецЕсли;
		
	НастройкиОбмена = ЭлектронныеДокументыСлужебный.ОпределитьНастройкиОбменаЭДПоИсточнику(
		НастройкаЭДО, Истина, МассивОтпечатковСертификатов, ЭД, Перечисления.ВидыЭД.ЗапросЗонд, Ложь);

	Возврат ЭД;
	
КонецФункции

#КонецОбласти

#Область ОбменСБанкомЧерезДополнительнуюОбработку

// Получает структуру данных электронных документов для последующего формирования ЭП
//
// Параметры
//  <МассивЭД>  - <массив> - массив ссылок на электронные документы
//
// Возвращаемое значение:
// Структура, содержит данные для обработки на клиенте
//
Функция ДанныеДляФормированияЭПЧерезДопОбработку(Знач МассивЭД) Экспорт
	
	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("МассивЭДБезСхем",         Новый Массив);
	СтруктураВозврата.Вставить("МассивЭДСоСхемами",       Новый Массив);
	СтруктураВозврата.Вставить("МассивТекстовыхДанныхЭД", Новый Массив);
	СтруктураВозврата.Вставить("МассивДанныхСхем",        Новый Массив);
	
	ВремФайл = ПолучитьИмяВременногоФайла();
	
	Для Каждого ЭД Из МассивЭД Цикл
		ЭДСхема = ЭлектронныеДокументыСлужебный.СлужебныйЭДБанка(ЭД);
		Если ЗначениеЗаполнено(ЭДСхема) Тогда
			СтруктураВозврата.МассивЭДСоСхемами.Добавить(ЭД);
			ДвоичныеДанные = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(ЭДСхема);
			СтруктураВозврата.МассивДанныхСхем.Добавить(ДвоичныеДанные);
		Иначе
			СтруктураВозврата.МассивЭДБезСхем.Добавить(ЭД);
			ДвоичныеДанные = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(ЭД);
			ДвоичныеДанные.Записать(ВремФайл);
			ТекстовыйДокумент = Новый ТекстовыйДокумент;
			ТекстовыйДокумент.Прочитать(ВремФайл);
			СтрокаXML = ТекстовыйДокумент.ПолучитьТекст();
			СтруктураВозврата.МассивТекстовыхДанныхЭД.Добавить(СтрокаXML);
		КонецЕсли;
	КонецЦикла;
		
	УдалитьФайлы(ВремФайл);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Сохраняет схемы данных электронных документов
//
// Параметры
//  СоглашениеЭД - СправочникСсылка.СоглашенияОбИспользованииЭД - ссылка на соглашение с банком
//  МассивЭД  - Массив - содержит ссылки на ЭД
//  МассивСхемДанных  - Массив - содержит текстовые данные ЭД
//
Процедура СохранитьСхемыДанных(Знач СоглашениеЭД, Знач МассивЭД, Знач МассивСхемДанных) Экспорт
	
	ВремФайл = ПолучитьИмяВременногоФайла();
	
	Индекс = 0;
	КоличествоЭД = МассивЭД.Количество();
	
	Для Индекс = 0 По КоличествоЭД - 1 Цикл
		
		ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МассивЭД[Индекс], "ВладелецФайла");
		АдресХранилища = ПоместитьВоВременноеХранилище(МассивСхемДанных[Индекс]);
		ДопФайл = ПрисоединенныеФайлы.ДобавитьФайл(
						ВладелецФайла,
						"СхемаДанных",
						,
						,
						,
						АдресХранилища,
						,
						,
						Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());
		ПараметрыФайла = Новый Структура;
		ПараметрыФайла.Вставить("СоглашениеЭД",                СоглашениеЭД);
		ПараметрыФайла.Вставить("ВидЭД",                       Перечисления.ВидыЭД.ДопДанные);
		ПараметрыФайла.Вставить("ЭлектронныйДокументВладелец", МассивЭД[Индекс]);
		ПараметрыФайла.Вставить("НаименованиеФайла",           "СхемаДанных");
		ПараметрыФайла.Вставить("СтатусЭД",                    Перечисления.СтатусыЭД.Получен);
		ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ДопФайл, ПараметрыФайла, Ложь);
		
	КонецЦикла;
	
	УдалитьФайлы(ВремФайл);

КонецПроцедуры

// Сохраняет подписи электронного документа
//
// Параметры
//  <МассивЭД>  - <Массив> - содержит массив ЭД
//  <МассивПодписей>  - <Массив> - содержит массив данных подписей
//  <Сертификат> - <СправочникСсылка.СертификатыЭП> - ссылка на сертификат подписи
//
Процедура СохранитьДанныеПодписей(Знач МассивЭД, Знач МассивПодписей, Знач Сертификат) Экспорт
	
	РеквизитыСертификата = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
								Сертификат,
								"Отпечаток, ДанныеСертификата, КомуВыдан");
	СтрокаВладелец = "Владелец: " + РеквизитыСертификата.КомуВыдан;
	
	КоличествоЭД = МассивЭД.Количество();
	
	Для Индекс = 0 По КоличествоЭД - 1 Цикл
		ДанныеПодписи = Новый Структура;
		ДанныеПодписи.Вставить("Подпись", МассивПодписей[Индекс]);
		ДанныеПодписи.Вставить("Отпечаток",                  РеквизитыСертификата.Отпечаток);
		ДанныеПодписи.Вставить("ДатаПодписи",                ТекущаяДатаСеанса());
		ДанныеПодписи.Вставить("Комментарий",                "");
		ДанныеПодписи.Вставить("ИмяФайлаПодписи",            "");
		ДанныеПодписи.Вставить("КомуВыданСертификат",        СтрокаВладелец);
		ДанныеПодписи.Вставить("Сертификат",  РеквизитыСертификата.ДанныеСертификата.Получить());
		ДанныеПодписи.Вставить("ДвоичныеДанныеСертификата",  РеквизитыСертификата.ДанныеСертификата.Получить());
		ДанныеПодписи.Вставить("НоваяПодписьДвоичныеДанные",  МассивПодписей[Индекс]);
		
		ДобавитьПодпись(МассивЭД[Индекс], ДанныеПодписи);
	КонецЦикла

КонецПроцедуры

// Производит подключение внешней обработки 
//
// Параметры:
//  СоглашениеЭД - СправочникСсылка.ЭДПрисоединенныеФайлы - ссылка на соглашение
//  ТекущаяВерсия  - Строка - текущая версия уже подключенной обработки - для исключения повторного подключения
//  НоваяВерсия  - Строка - новая версия обработки, возвращается версия подключенно обработки
//  ИмяОбъекта  - Строка - идентификатор внешней обработки
//  АдресФайла - Адрес временного хранилища, куда помещается двоичные данные обработки
//
// Возвращаемое значение:
//  Булево - Истина, если обработка подключена
//
Функция ПодключитьВнешнююОбработку(Знач СоглашениеЭД, Знач ТекущаяВерсия = Неопределено, НоваяВерсия = Неопределено, ИмяОбъекта = "", АдресФайла = "") Экспорт

	ОбработкаПодключена = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СоглашенияОбИспользованииЭД.ДополнительнаяОбработка.Версия КАК Версия,
	               |	СоглашенияОбИспользованииЭД.ДополнительнаяОбработка,
	               |	СоглашенияОбИспользованииЭД.ДополнительнаяОбработка.ИмяОбъекта КАК ИмяОбъекта,
	               |	СоглашенияОбИспользованииЭД.ДополнительнаяОбработка.ХранилищеОбработки КАК ХранилищеОбработки
	               |ИЗ
	               |	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
	               |ГДЕ
	               |	СоглашенияОбИспользованииЭД.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", СоглашениеЭД);
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Если ТекущаяВерсия = Результат.Версия Тогда
			НоваяВерсия = ТекущаяВерсия;
		Иначе
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				ДвоичныеДанные = Результат.ХранилищеОбработки.Получить();
				АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные, Новый УникальныйИдентификатор);
			#Иначе
				НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Результат.ДополнительнаяОбработка, "ХранилищеОбработки");
				ВнешниеОбработки.Подключить(НавигационнаяСсылка, , Ложь);
			#КонецЕсли
			НоваяВерсия = Результат.Версия;
		КонецЕсли;
		ИмяОбъекта = Результат.ИмяОбъекта;
		ОбработкаПодключена = Истина;
	КонецЕсли;
	
	Если Не ОбработкаПодключена Тогда
		ТекстСообщения = Нстр("ru = 'Не выбрана дополнительная обработка в соглашении об использовании прямого обмена с банком: %1.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СоглашениеЭД);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат ОбработкаПодключена;
	
КонецФункции

// только для внутреннего использования
Процедура ОтправитьЭДВБанк(Знач СоглашениеЭД, Знач ПараметрыАвторизации, ДанныеВозврата) Экспорт
	
	ДанныеВозврата = Новый Структура;
	
	КолОтправленныхПакетов = ОтправкаСформированныхЭДВБанк(СоглашениеЭД, ПараметрыАвторизации);
	ДанныеВозврата.Вставить("КолОтправленныхПакетов", КолОтправленныхПакетов);
	
	ДанныеДляОтправкиЧерезДопОбработку = ДанныеДляОтправкиВБанк(СоглашениеЭД, Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку);
	Если ДанныеДляОтправкиЧерезДопОбработку.Количество() > 0 Тогда
		ДанныеВозврата.Вставить("ДанныеДляОтправкиЧерезДопОбработку", ДанныеДляОтправкиЧерезДопОбработку);
	КонецЕсли;
	ДанныеДляОтправкиiBank2 = ДанныеДляОтправкиВБанк(СоглашениеЭД, Перечисления.ПрограммыБанка.iBank2);
	Если ДанныеДляОтправкиiBank2.Количество() > 0 Тогда
		ДанныеВозврата.Вставить("ДанныеДляОтправкиiBank2", ДанныеДляОтправкиiBank2);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Сбербанк

// Возвращает выписки банка за период из информационной базы.
// Если не найдена выписка хоть за один из дней в периоде, то возвращается пустой массив.
// НастройкаЭДО - СправочникСсылка.СоглашенияОбИспользованииЭД - настройка ЭДО с банком
// МассивСчетов - Массив - в элементах - строки, содержашие номера счетов
// ДатаНачала - Дата - дата начала периода
// ДатаОкончания - Дата - дата окончания периода
//
// Возвращаемое значение:
// Массив - в элементах СправочникСсылка.ЭДПрисоединенныеФайлы - ссылки на банковские выписки
//
Функция ГотовыеВыпискиСбербанка(Знач НастройкаЭДО, Знач МассивСчетов, Знач ДатаНачала, Знач ДатаОкончания) Экспорт
	
	МассивВозврата = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ЭДПрисоединенныеФайлы.Ссылка,
	               |	ЭДПрисоединенныеФайлы.ДатаВыпискиБанка КАК ДатаВыпискиБанка
	               |ИЗ
	               |	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	               |ГДЕ
	               |	ЭДПрисоединенныеФайлы.СоглашениеЭД = &НастройкаЭДО
	               |	И ЭДПрисоединенныеФайлы.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ВыпискаБанка)
	               |	И ЭДПрисоединенныеФайлы.ДополнительнаяИнформация В (&НомераБанковскихСчетов)
	               |	И ЭДПрисоединенныеФайлы.ДатаВыпискиБанка <= &ДатаОкончания
	               |	И ЭДПрисоединенныеФайлы.ДатаВыпискиБанка >= &ДатаНачала
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДатаВыпискиБанка";
	Запрос.УстановитьПараметр("НастройкаЭДО", НастройкаЭДО);
	Запрос.УстановитьПараметр("НомераБанковскихСчетов", МассивСчетов);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПредыдущаяДата = Неопределено;
	Пока Выборка.Следующий() Цикл
		Если ПредыдущаяДата = Выборка.ДатаВыпискиБанка Тогда
			Продолжить;
		КонецЕсли;
		ПредыдущаяДата = Выборка.ДатаВыпискиБанка;
		МассивВозврата.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	ТребуемоеКоличествоДней = (НачалоДня(ДатаОкончания) - ДатаНачала)/60/60/24*МассивСчетов.Количество() + 1;
	
	Если ТребуемоеКоличествоДней <> МассивВозврата.Количество() Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Возврат МассивВозврата;
	
КонецФункции

// Заполняет в схеме подписи и Формирует файл пакета для отправки в банк
//
// Параметры
//  ЭДСсылка - СправочникСсылка.ЭДПрисоединенныеФайлы - ссылка на электронный документ
//  СоглашениеЭД - СправочникСсылка.СоглашениеОбИспользованииЭД - соглашение с банком
//  ИдентификаторЗапроса - Строка - возваращаемый идентификатор запроса
//  ИдентификаторОрганизации - Строка - идентификатор клиента банка
//
// Возвращаемое значение:
// Структура с данными файла или Неопределено
//
Функция ПолучитьФайлПакетаСбербанка(Знач ЭДСсылка, Знач СоглашениеЭД, ИдентификаторЗапроса, ИдентификаторОрганизации) Экспорт

	ДанныеФайла = ЭлектронныеДокументыСлужебный.ПолучитьДанныеФайла(ЭДСсылка);
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	ВремФайл = ПолучитьИмяВременногоФайла();
	ФайлПакета = ПолучитьИмяВременногоФайла();
	ДвоичныеДанныеФайла.Записать(ВремФайл);
		
	ОбъектXML = Новый ЧтениеXML;
	ПространствоИмен = "http://bssys.com/upg/request";
	
	Попытка
		ОбъектXML.ОткрытьФайл(ВремФайл);
		
		ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
		
		Если ЭД.Тип() = ЭлектронныеДокументыВнутренний.ПолучитьТипЗначенияCML("PayDocRu", ПространствоИмен) Тогда
			ТекстОшибки = "";
			ИдентификаторОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СоглашениеЭД, "ИдентификаторОрганизации");
			Request = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Request",ПространствоИмен);
			ИдентификаторЗапроса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭДСсылка, "УникальныйИД");
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
				Request, "requestId", ИдентификаторЗапроса, Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
				Request, "orgId", ИдентификаторОрганизации, Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "version",  "1.0",               Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "sender",   "1С: Предприятие 8", Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "receiver", "SBBOL_DBO",         Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "PayDocRu", ЭД,                  Истина, ТекстОшибки);
			Для Каждого ЭП из ЭДСсылка.ЭлектронныеПодписи Цикл  
				Подпись = ЭП.Подпись.Получить();
				ДанныеСертификата = ИнформацияОСертификатеПодписиСбербанк(ЭП.Отпечаток);
				Если ДанныеСертификата = Неопределено Тогда
					ОбъектXML.Закрыть();
					ВызватьИсключение Нстр("ru='Не найден сертификат установленной подписи'");
				КонецЕсли;
				DigitalSign = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("DigitalSign", "http://bssys.com/upg/request");
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(DigitalSign, "Issuer", ДанныеСертификата.Issuer, Истина);
				СтрокаСерийныйНомер = Строка(ДанныеСертификата.SN);
				СтрокаСерийныйНомер = СтрЗаменить(СтрокаСерийныйНомер, " ", "");
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(DigitalSign, "SN", СтрокаСерийныйНомер, Истина);
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(DigitalSign, "Value", Подпись, Истина);
				Request.Sign.Добавить(DigitalSign);
			КонецЦикла;
			Request.Проверить();
		ИначеЕсли ЭД.Тип() = ЭлектронныеДокументыВнутренний.ПолучитьТипЗначенияCML("StmtReqType", ПространствоИмен) Тогда
			ТекстОшибки = "";
			ИдентификаторОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СоглашениеЭД, "ИдентификаторОрганизации");
			Request = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Request", ПространствоИмен);
			ИдентификаторЗапроса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭДСсылка, "УникальныйИД");
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
				Request, "requestId", ИдентификаторЗапроса, Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
				Request, "orgId", ИдентификаторОрганизации, Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "version",  "1.0",               Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "sender",   "1С: Предприятие 8", Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "receiver", "SBBOL_DBO",         Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "StmtReq",  ЭД,                  Истина, ТекстОшибки);
			Для Каждого ЭП из ЭДСсылка.ЭлектронныеПодписи Цикл
				Подпись = ЭП.Подпись.Получить();
				ДанныеСертификата = ИнформацияОСертификатеПодписиСбербанк(ЭП.Отпечаток);
				Если ДанныеСертификата = Неопределено Тогда
					ОбъектXML.Закрыть();
					ВызватьИсключение Нстр("ru = 'Не найден сертификат установленной подписи'");
				КонецЕсли;
				DigitalSign = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("DigitalSign", "http://bssys.com/upg/request");
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(DigitalSign, "Issuer", ДанныеСертификата.Issuer, Истина);
				СтрокаСерийныйНомер = Строка(ДанныеСертификата.SN);
				СтрокаСерийныйНомер = СтрЗаменить(СтрокаСерийныйНомер, " ", "");
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(DigitalSign, "SN",    СтрокаСерийныйНомер, Истина);
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(DigitalSign, "Value", Подпись,             Истина);
				Request.Sign.Добавить(DigitalSign);
			КонецЦикла;
			Request.Проверить();
		Иначе
			ОбъектXML.Закрыть();
			ВызватьИсключение Нстр("ru='Неизвестный формат файла'");
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;

		ОбъектXML.Закрыть();
		УдалитьФайлы(ВремФайл);
		ЭлектронныеДокументыВнутренний.ВыгрузитьЭДвФайл(Request, ФайлПакета, , "UTF-8");
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ФайлПакета);
		СтрокаXML = ТекстовыйДокумент.ПолучитьТекст();
		УдалитьФайлы(ФайлПакета);
		ДанныеФайла.Вставить("СтрокаXML", СтрокаXML);

	Исключение
		ОбъектXML.Закрыть();
		ТекстОшибки = НСтр("ru = 'Возникла ошибка при формировании пакета данных банка'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки + Символы.ПС + ОписаниеОшибки());
		УдалитьФайлы(ВремФайл);
		УдалитьФайлы(ФайлПакета);
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ДанныеФайла;

КонецФункции

//Удаляет идентификатор из регистра, чтобы в дальнейшем не происходил запрос состояния по нему
//
// Параметры:
//   СоглашениеЭД - СправочникСсылка.СоглашениеОбИспользованииЭД - соглашение со сбербанком
//   Идентификатор - Строка - идентификатор запроса
//   ВидЭД - ПеречислениеСсылка.ВидыЭД - вид электронного документа
//
Процедура УдалитьИдентификаторЗапроса(СоглашениеЭД, Идентификатор, ВидЭД) Экспорт

	МенеджерЗаписи = РегистрыСведений.ИдентификаторыЗапросовБанка.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.СоглашениеЭД = СоглашениеЭД;
	МенеджерЗаписи.Идентификатор = Идентификатор;
	МенеджерЗаписи.ВидЭД = ВидЭД;
	Попытка
		МенеджерЗаписи.Удалить();
	Исключение
		ШаблонСообщения = НСтр("ru = '%1. (подробности см. в Журнале регистрации).'");
		КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										ШаблонСообщения, КраткоеПредставлениеОшибки);
		Операция = НСтр("ru = 'Удаление идентификатора запроса банка'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбработатьИсключениеПоЭДНаСервере(Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
	КонецПопытки;
	
КонецПроцедуры

// только для внутреннего использования
Функция ПредставлениеИздателя(СтруктураДанных) Экспорт
	
	СтрокаВозврата = "";
	
	Для каждого Элемент ИЗ СтруктураДанных Цикл
		СтрокаВозврата = СтрокаВозврата + Элемент.ключ + "=" + Элемент.Значение + ", ";
	КонецЦикла;
	
	СтрокаВозврата = Сред(СтрокаВозврата, 1, СтрДлина(СтрокаВозврата) - 2);
	
	Возврат СтрокаВозврата;
	
КонецФункции

// Возвращает структуру данных сертификата
//
// Параметры:
// ДвоичныеДанныеСертификата - ДвоичныеДанные - сертификат
//
// Возвращаемое значение:
// Структура, содержит данные сертификата
//
Функция ИнформацияОСертификатеПодписиСбербанк(ДвоичныеДанныеСертификата)
	
	СтруктураВозврата = Новый Структура;
	Сертификат = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
		
	Issuer = "EMAILADDRESS=%1, CN=%2, OU=%3, O=%4, C=%5"; 
	Issuer = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Issuer, Сертификат.Издатель.E,
			Сертификат.Издатель.CN, Сертификат.Издатель.OU, Сертификат.Издатель.O, Сертификат.Издатель.C);
			
	СтруктураВозврата.Вставить("SN", Сертификат.СерийныйНомер);
	СтруктураВозврата.Вставить("Issuer", Issuer);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Записывает событие в журнал аудита
//
// Параметры
//  <СоглашениеЭД>  - <СправочникСсылка.СоглашениеОбИспользованииЭД> - соглашение об обмене электронными документами
//  <ОписаниеСобытия>  - <строка> - текстовое описание события для отражения в журнале
//  <ТекстСообщения>  - <строка> - текст с данными
//
Процедура ЗаписатьСобытиеВЖурналАудита(СоглашениеЭД, ОписаниеСобытия, ТекстСообщения) Экспорт
		
	Идентификатор = Строка(Новый УникальныйИдентификатор);

	НовЗапись = РегистрыСведений.ЖурналАудитаСбербанк.СоздатьМенеджерЗаписи();
	НовЗапись.ИдентификаторСобытия = Идентификатор;
	НовЗапись.Описание = ОписаниеСобытия;
	НовЗапись.Период = ТекущаяДатаСеанса();
	НовЗапись.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	НовЗапись.СоглашениеЭД = СоглашениеЭД;
	НовЗапись.ТекстСообщения = ТекстСообщения;
	НовЗапись.Записать();
	
КонецПроцедуры // ЗаписатьСобытиеВЖурналАудита()

// Сохраняет идентификаторы запросов для дальнейшего запроса статусов
//
// Параметры
//  <МассивИдентификаторов>  - <Массив> - массив полученных идентификаторов запросов
//  <СоглашениеЭД>  - <СправочникСсылка.СоглашениеОбИспользованииЭД> - соглашение об обмене электронными документами
//  <ВидЭД>  - <Перечисления.ВидыЭД> - вид электронного документа
//
Процедура СохранитьИдентификаторы(МассивИдентификаторов, СоглашениеЭД, ВидЭД) Экспорт
	
	Для Каждого Идентификатор Из МассивИдентификаторов Цикл
		НовЗапись = РегистрыСведений.ИдентификаторыЗапросовБанка.СоздатьМенеджерЗаписи();
		НовЗапись.Идентификатор = Идентификатор;
		НовЗапись.СоглашениеЭД = СоглашениеЭД;
		НовЗапись.ВидЭД = ВидЭД;
		НовЗапись.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Подготавливает текст запроса для получения ночной выписки
//
// Параметры:
//  НастройкаЭДО - СправочникСсылка.СоглашенияОбИспользованииЭД - текущая настройка обмена с банком
//  ИдентификаторЗапроса  - Строка - уникальный идентификатор запроса
//  ИдентификаторОрганизации>  - Строка - уникальный идентификатор организации в банковской системе
//  ЭП  - Строка - электронная подпись дайджеста
//  СертификатПодписи  - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - ссылка на сертификат подписи
//
// Возвращаемое значение:
// Строка - текст запроса ночной выписки
//
Функция ТекстЗапросаНочнойВыписки(НастройкаЭДО, ИдентификаторЗапроса, ИдентификаторОрганизации, ЭП, СертификатПодписи) Экспорт

	ПространствоИмен = "http://bssys.com/upg/request";
	
	ТекстОшибки = "";
	
	Попытка

		Request = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Request", ПространствоИмен);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
			Request, "requestId", ИдентификаторЗапроса, Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
			Request, "orgId", ИдентификаторОрганизации, Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "version",  "1.0",               Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "sender",   "1С: Предприятие 8", Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "receiver", "SBBOL_DBO",         Истина, ТекстОшибки);
		Incoming = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Request.Incoming", ПространствоИмен);
		
		Отбор = Новый Структура("НастройкаЭДО", НастройкаЭДО);
		ДанныеОСостоянии = РегистрыСведений.СостоянияОбменовЭДСБанками.Получить(Отбор);

		Если ЗначениеЗаполнено(ДанныеОСостоянии.ПоследняяДатаПолученияЭД) Тогда
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
				Incoming, "lastIncomingTime", ДанныеОСостоянии.ПоследняяДатаПолученияЭД, , ТекстОшибки);
		КонецЕсли;
		
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "Incoming", Incoming, Истина, ТекстОшибки);
		
		ХранилищеСертификата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СертификатПодписи, "ДанныеСертификата");
		ДвочныеДанныеСертификата = ХранилищеСертификата.Получить();
		
		ДанныеСертификата = ИнформацияОСертификатеПодписиСбербанк(ДвочныеДанныеСертификата);
		Если ДанныеСертификата = Неопределено Тогда
			ВызватьИсключение Нстр("ru='Не найден сертификат установленной подписи'");
		КонецЕсли;
		DigitalSign = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("DigitalSign","http://bssys.com/upg/request");
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(DigitalSign, "Issuer", ДанныеСертификата.Issuer, Истина);
		СтрокаСерийныйНомер = Строка(ДанныеСертификата.SN);
		СтрокаСерийныйНомер = СтрЗаменить(СтрокаСерийныйНомер," ","");
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(DigitalSign, "SN", СтрокаСерийныйНомер, Истина);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(DigitalSign, "Value", ЭП, Истина);
		Request.Sign.Добавить(DigitalSign);
	
		Request.Проверить();
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка формирования запроса ночной выписки'");
		КонецЕсли;
		
		Запись = Новый ЗаписьXML;
		Запись.УстановитьСтроку();
		ФабрикаXDTO.ЗаписатьXML(Запись, Request);
		ТекстЗапроса = Запись.Закрыть();
		
	Исключение
		
		КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ШаблонСообщения = НСтр("ru = '%1. (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, КраткоеПредставлениеОшибки);
		Операция = НСтр("ru = 'Формирование ЭД'");
		ОбработатьИсключениеПоЭДНаСервере(Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
		Возврат "";
		
	КонецПопытки;
	Возврат ТекстЗапроса;
	
КонецФункции

// Получает массив идентификаторов для дальнейшего формирования запроса в банк 
//         
// Параметры
//  <СоглашениеЭД>  - <СправочникСсылка.СоглашениеОбИспользованииЭД> - соглашение об обмене электронными документами
//  <ВидЭД>  - <Перечисления.ВидыЭД> - Вид электронного документа
//
Функция МассивИдентификаторовЗапроса(СоглашениеЭД, ВидЭД) Экспорт
	
	МассивИдентификаторов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИдентификаторыЗапросовБанка.Идентификатор
	|ИЗ
	|	РегистрСведений.ИдентификаторыЗапросовБанка КАК ИдентификаторыЗапросовБанка
	|ГДЕ
	|	ИдентификаторыЗапросовБанка.СоглашениеЭД = &СоглашениеЭД
	|	И ИдентификаторыЗапросовБанка.ВидЭД = &ВидЭД";
	Запрос.УстановитьПараметр("СоглашениеЭД", СоглашениеЭД);
	Запрос.УстановитьПараметр("ВидЭД", ВидЭД);
	ВыборкаИдентификаторов = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаИдентификаторов.Следующий() Цикл
		МассивИдентификаторов.Добавить(ВыборкаИдентификаторов.Идентификатор);
	КонецЦикла;
	
	Возврат МассивИдентификаторов;

КонецФункции

// Выполняет необходимые действия для разбора ответа банка
//
// Параметры
//  Ответ - Строка - текст с ответом
//  НастройкаЭДО - СправочникСсылка.СоглашениеОбИспользованииЭД - настройка ЭДО с банком
//  ВидЭД - ПеречислениеСсылка.ВидыЭД - вид электронного документа
//  МассивНовыхЭД - Массив - массив новых полученных ЭД
//  Идентификатор - Строка - идентификатор запроса, на который пришел ответ
//
Процедура ОбработатьОтветСбербанка(Ответ, НастройкаЭДО, ВидЭД, МассивНовыхЭД, Идентификатор = Неопределено) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(Ответ);
	Попытка
		ТипResponse = ЭлектронныеДокументыВнутренний.ПолучитьТипЗначенияCML("Response", "http://bssys.com/upg/response");
		ЭД = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипResponse);
		ЭД.Проверить();
		
		ДатаСоздания = Дата(СтрЗаменить(СтрЗаменить(СтрЗаменить(Сред(ЭД.createTime, 1, 19), "-", ""), ":", ""), "T", ""));
		
		Отбор = Новый Структура("НастройкаЭДО", НастройкаЭДО);
		ДанныеОСостоянии = РегистрыСведений.СостоянияОбменовЭДСБанками.Выбрать(Отбор);
		Если ДанныеОСостоянии.Следующий() Тогда
			ТекДата = ДанныеОСостоянии.ПоследняяДатаПолученияЭД;
			ТекМетка = ДанныеОСостоянии.Метка;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТекДата) ИЛИ ДатаСоздания > ТекДата Тогда // сдвигаем дату в РС
			МенеджерЗаписи = РегистрыСведений.СостоянияОбменовЭДСБанками.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ПоследняяДатаПолученияЭД = ДатаСоздания;
			МенеджерЗаписи.НастройкаЭДО = НастройкаЭДО;
			Если ЗначениеЗаполнено(ТекМетка) Тогда
				МенеджерЗаписи.Метка = ТекМетка;
			КонецЕсли;
			МенеджерЗаписи.Записать();
		КонецЕсли;
		СохранитьОтветСбербанка(ЭД, НастройкаЭДО, Идентификатор, ВидЭД, МассивНовыхЭД);
	Исключение
		УдалитьИдентификаторЗапроса(НастройкаЭДО, Идентификатор, ВидЭД);
		ЧтениеXML.Закрыть();
		ТекстСообщения = НСтр("ru = 'Возникла ошибка при чтении полученных данных из банка" + Символы.ПС
						+ "Подробности см. в журнале регистрации'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Получение данных из банка'"), ТекстОшибки, ТекстСообщения, 1);
	КонецПопытки;
	
КонецПроцедуры

// Заполняет в схеме подписи и Формирует файл пакета для отправки в банк
//
// Параметры
//  ЭДСсылка - СправочникСсылка.ЭДПрисоединенныеФайлы - ссылка на электронный документ
//  НастройкаЭДО - СправочникСсылка.СоглашениеОбИспользованииЭД - настройка ЭДО с банком
//  ИдентификаторЗапроса - Строка - возваращаемый идентификатор запроса
//  ИдентификаторОрганизации - Строка - идентификатор клиента банка
//
// Возвращаемое значение:
// Структура с данными файла или Неопределено
//
Функция ПакетXMLСбербанка(Знач ЭДСсылка, Знач НастройкаЭДО, ИдентификаторЗапроса, ИдентификаторОрганизации) Экспорт

	ДанныеФайла = ЭлектронныеДокументыСлужебный.ПолучитьДанныеФайла(ЭДСсылка);
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	ВремФайл = ПолучитьИмяВременногоФайла();
	ФайлПакета = ПолучитьИмяВременногоФайла();
	ДвоичныеДанныеФайла.Записать(ВремФайл);
		
	ОбъектXML = Новый ЧтениеXML;
	ПространствоИмен = "http://bssys.com/upg/request";
	
	Попытка
		ОбъектXML.ОткрытьФайл(ВремФайл);
		
		ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
		
		Если ЭД.Тип() = ЭлектронныеДокументыВнутренний.ПолучитьТипЗначенияCML("PayDocRu", ПространствоИмен) Тогда
			ТекстОшибки = "";
			ИдентификаторОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаЭДО, "ИдентификаторОрганизации");
			Request = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Request",ПространствоИмен);
			ИдентификаторЗапроса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭДСсылка, "УникальныйИД");
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
				Request, "requestId", ИдентификаторЗапроса, Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
				Request, "orgId", ИдентификаторОрганизации, Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "version",  "1.0",               Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "sender",   "1С: Предприятие 8", Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "receiver", "SBBOL_DBO",         Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "PayDocRu", ЭД,                  Истина, ТекстОшибки);
			Для Каждого ЭП из ЭДСсылка.ЭлектронныеПодписи Цикл  
				Подпись = ЭП.Подпись.Получить();
				ДвоичныеДанныеСертификата = ЭП.Сертификат.Получить();
				ДанныеСертификата = ИнформацияОСертификатеПодписиСбербанк(ДвоичныеДанныеСертификата);
				Если ДанныеСертификата = Неопределено Тогда
					ВызватьИсключение Нстр("ru='Не найден сертификат установленной подписи'");
				КонецЕсли;
				DigitalSign = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("DigitalSign", "http://bssys.com/upg/request");
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(DigitalSign, "Issuer", ДанныеСертификата.Issuer, Истина);
				СтрокаСерийныйНомер = Строка(ДанныеСертификата.SN);
				СтрокаСерийныйНомер = СтрЗаменить(СтрокаСерийныйНомер, " ", "");
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(DigitalSign, "SN", СтрокаСерийныйНомер, Истина);
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(DigitalSign, "Value", Подпись, Истина);
				Request.Sign.Добавить(DigitalSign);
			КонецЦикла;
			Request.Проверить();
		ИначеЕсли ЭД.Тип() = ЭлектронныеДокументыВнутренний.ПолучитьТипЗначенияCML("StmtReqType", ПространствоИмен) Тогда
			ТекстОшибки = "";
			ИдентификаторОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаЭДО, "ИдентификаторОрганизации");
			Request = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Request", ПространствоИмен);
			ИдентификаторЗапроса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭДСсылка, "УникальныйИД");
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
				Request, "requestId", ИдентификаторЗапроса, Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
				Request, "orgId", ИдентификаторОрганизации, Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "version",  "1.0",               Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "sender",   "1С: Предприятие 8", Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "receiver", "SBBOL_DBO",         Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "StmtReq",  ЭД,                  Истина, ТекстОшибки);
			Для Каждого ЭП из ЭДСсылка.ЭлектронныеПодписи Цикл
				Подпись = ЭП.Подпись.Получить();
				Сертификат = ЭП.Сертификат.Получить();
				ДанныеСертификата = ИнформацияОСертификатеПодписиСбербанк(Сертификат);
				Если ДанныеСертификата = Неопределено Тогда
					ВызватьИсключение Нстр("ru = 'Не найден сертификат установленной подписи'");
				КонецЕсли;
				DigitalSign = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("DigitalSign", "http://bssys.com/upg/request");
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(DigitalSign, "Issuer", ДанныеСертификата.Issuer, Истина);
				СтрокаСерийныйНомер = Строка(ДанныеСертификата.SN);
				СтрокаСерийныйНомер = СтрЗаменить(СтрокаСерийныйНомер, " ", "");
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(DigitalSign, "SN",    СтрокаСерийныйНомер, Истина);
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(DigitalSign, "Value", Подпись,             Истина);
				Request.Sign.Добавить(DigitalSign);
			КонецЦикла;
			Request.Проверить();
		Иначе
			ВызватьИсключение Нстр("ru='Неизвестный формат файла'");
		КонецЕсли;
		ОбъектXML.Закрыть();
		УдалитьФайлы(ВремФайл);
		ЭлектронныеДокументыВнутренний.ВыгрузитьЭДвФайл(Request, ФайлПакета, , "UTF-8");
		ДвоичныеДанныеПакета = Новый ДвоичныеДанные(ФайлПакета);
		УдалитьФайлы(ФайлПакета);
		СсылкаНаХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеПакета);
		ДанныеФайла.СсылкаНаДвоичныеДанныеФайла = СсылкаНаХранилище;
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
	Исключение
		ОбъектXML.Закрыть();
		ТекстОшибки = НСтр("ru = 'Возникла ошибка при формировании пакета данных банка'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки + Символы.ПС + ОписаниеОшибки());
		УдалитьФайлы(ФайлПакета);
		Возврат Неопределено;
	КонецПопытки;
	
	ВремФайл = ПолучитьИмяВременногоФайла();
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	ДвоичныеДанные.Записать(ВремФайл);
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ВремФайл);
	СтрокаXML = ТекстовыйДокумент.ПолучитьТекст();
	УдалитьФайлы(ВремФайл);
	
	Возврат СтрокаXML;

КонецФункции

// Формирует соответствие установленных на ЭД подписей и данных сертификатов
//
// Параметры:
// ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы
//
// Возвращаемое значение:
// Соответствие - содержит строки данных установленных подписей и строки данных сертификатов в формате BASE64
//
Функция ДанныеУстановленныхПодписейИСертификатов(ЭД) Экспорт
	
	СоответствиеВозврата = Новый Соответствие;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.Подпись,
	|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.Сертификат
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы.ЭлектронныеПодписи КАК ЭДПрисоединенныеФайлыЭлектронныеПодписи
	|ГДЕ
	|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ЭД);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДвоичныеДанныеПодписи = Выборка.Подпись.Получить();
		СтрокаЭП = Base64Строка(ДвоичныеДанныеПодписи);
		СтрокаЭП = СтрЗаменить(СтрокаЭП, Символы.ПС, "");
		СтрокаЭП = СтрЗаменить(СтрокаЭП, Символы.ВК, "");
		СтрокаСертификата = СертификатВФорматеBase64(Выборка.Сертификат);
		СоответствиеВозврата.Вставить(СтрокаЭП, СтрокаСертификата);
	КонецЦикла;
	
	Возврат СоответствиеВозврата;
	
КонецФункции

// Подготавливает строку (дайджест) для дальнейшей подписи в формате Base64
//
// Параметры:
// ИмяФайла - Строка - путь к файлу данных электронного документа
// НастройкаЭДО - СправочникСсылка.СоглашенияОбИспользованииЭД - настройка ЭДО с банком
//
// Возвращаемое значение:
// Строка - дайджест документа
//
Функция Дайджест(ИмяФайла, СоглашениеЭД) Экспорт
	
	ИдентификаторОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СоглашениеЭД, "ИдентификаторОрганизации");
	Результат = ЭлектронныеДокументыВнутренний.СформироватьДеревоРазбора(ИмяФайла);
	
	Если Результат = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	ДеревоРазбора = Результат.ДеревоРазбора;
	СтрокаОбъекта = Результат.СтрокаОбъекта;
	
	ДанныеЗаполнения = Новый СписокЗначений;

	ВидЭД = СтрокаОбъекта.ВидЭД;
	
	Если ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение Тогда
		
		ИдентификаторДокумента = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ИдентификаторДокумента");
		СтрокаВозврата = "ATTRIBUTES" + Символ(10) + "OrgId=" + ИдентификаторОрганизации + Символ(10)
			+ "Sender=1С: Предприятие 8" + Символ(10) + "ExtId=" + ИдентификаторДокумента + Символ(10) + "FIELDS" + Символ(10);
		
		НомерДокумента = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "Номер");
		ДанныеЗаполнения.Добавить(НомерДокумента, "AccDoc.AccDocNo");
		КодВидаВалютнойОперации = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "КодВидаВалютнойОперации");
		ДанныеЗаполнения.Добавить(КодВидаВалютнойОперации, "AccDoc.CodeVO");
		ДатаДокумента = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "Дата");
		ДанныеЗаполнения.Добавить(Формат(ДатаДокумента, "ДФ=yyyy-MM-dd"), "AccDoc.DocDate");
		Сумма = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "Сумма");
		ДанныеЗаполнения.Добавить(Формат(Сумма, "ЧДЦ=2; ЧРД=.; ЧГ="), "AccDoc.DocSum");
		ВидПлатежа = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ВидПлатежа");
		ДанныеЗаполнения.Добавить(ВидПлатежа, "AccDoc.PaytKind");
		Очередность = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "Очередность");
		ДанныеЗаполнения.Добавить(Очередность, "AccDoc.Priority");
		НазначениеПлатежа = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "НазначениеПлатежа");
		ДанныеЗаполнения.Добавить(НазначениеПлатежа, "AccDoc.Purpose");
		ВидОперации = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ВидОперации");
		ДанныеЗаполнения.Добавить(ВидОперации, "AccDoc.TransKind");
		ДополнительнаяУслуга = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ДополнительнаяУслуга");
		ДанныеЗаполнения.Добавить(ДополнительнаяУслуга, "AccDoc.UrgentSBRF");
		НомерКредитногоДоговора = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "НомерКредитногоДоговора");
		ДанныеЗаполнения.Добавить(НомерКредитногоДоговора, "Credit.CredConNum");
		ЦелевоеПоручение = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ЦелевоеПоручение");
		ДанныеЗаполнения.Добавить(ЦелевоеПоручение, "Credit.FlagTargetAssignment");
		ИспользоватьСобственныеСредства = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ИспользоватьСобственныеСредства");
		ДанныеЗаполнения.Добавить(ИспользоватьСобственныеСредства, "Credit.FlagUseOwnMeans");
		ПоказательКБК = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ПоказательКБК");
		ДанныеЗаполнения.Добавить(ПоказательКБК, "DepartmentalInfo.CBC");
		ПоказательДаты = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ПоказательДаты");
		ДанныеЗаполнения.Добавить(ПоказательДаты, "DepartmentalInfo.DocDate");
		ПоказательНомера = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ПоказательНомера");
		ДанныеЗаполнения.Добавить(ПоказательНомера, "DepartmentalInfo.DocNo");
		СтатусСоставителя = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "СтатусСоставителя");
		ДанныеЗаполнения.Добавить(СтатусСоставителя, "DepartmentalInfo.DrawerStatus");
		ОКТМО = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ОКТМО");
		ДанныеЗаполнения.Добавить(ОКТМО, "DepartmentalInfo.OKATO");
		ПоказательОснования = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ПоказательОснования");
		ДанныеЗаполнения.Добавить(ПоказательОснования, "DepartmentalInfo.PaytReason");
		ПоказательТипа = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ПоказательТипа");
		ДанныеЗаполнения.Добавить(ПоказательТипа, "DepartmentalInfo.TaxPaytKind");
		ПоказательПериода = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ПоказательПериода");
		ДанныеЗаполнения.Добавить(ПоказательПериода, "DepartmentalInfo.TaxPeriod");
		НаименованиеБанкаПолучателя = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ПолучательНаименованиеБанка");
		ДанныеЗаполнения.Добавить(НаименованиеБанкаПолучателя, "Payee.Bank.Name");
		НаселенныйПунктБанкаПолучателя = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "НаселенныйПунктБанкаПолучателя");
		ДанныеЗаполнения.Добавить(НаселенныйПунктБанкаПолучателя, "Payee.Bank.BankCity");
		ТипНаселенногоПунктаБанкаПолучателя = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ТипНаселенногоПунктаБанкаПолучателя");
		ДанныеЗаполнения.Добавить(ТипНаселенногоПунктаБанкаПолучателя, "Payee.Bank.SettlementType");
		БИКБанкаПолучателя = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ПолучательБИКБанка");
		ДанныеЗаполнения.Добавить(БИКБанкаПолучателя, "Payee.Bank.Bic");
		СчетБанкаПолучателя = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ПолучательКоррСчетБанка");
		ДанныеЗаполнения.Добавить(СчетБанкаПолучателя, "Payee.Bank.CorrespAcc");
		ФилиалБанкаПолучателя = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ФилиалБанкаПолучателя");
		ДанныеЗаполнения.Добавить(ФилиалБанкаПолучателя, "Payee.Filial");
		ИННПолучателя = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ПолучательИНН");
		ДанныеЗаполнения.Добавить(ИННПолучателя, "Payee.INN");
		КПППолучателя = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ПолучательКПП");
		ДанныеЗаполнения.Добавить(КПППолучателя, "Payee.KPP");
		ТекстПолучателя = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ПолучательНаименование");
		ДанныеЗаполнения.Добавить(ТекстПолучателя, "Payee.Name");
		НомерСчетаПолучателя = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ПолучательРасчСчет");
		ДанныеЗаполнения.Добавить(НомерСчетаПолучателя, "Payee.PersonalAcc");
		НаименованиеБанкаПлательщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ПлательщикНаименованиеБанка");
		ДанныеЗаполнения.Добавить(НаименованиеБанкаПлательщика, "Payer.Bank.Name");
		НаселенныйПунктБанкаПлательщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "НаселенныйПунктБанкаПлательщика");
		ДанныеЗаполнения.Добавить(НаселенныйПунктБанкаПлательщика, "Payer.Bank.BankCity");
		ТипНаселенногоПунктаБанкаПлательщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ТипНаселенногоПунктаБанкаПлательщика");
		ДанныеЗаполнения.Добавить(ТипНаселенногоПунктаБанкаПлательщика, "Payer.Bank.SettlementType");
		БИКБанкаПлательщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ПлательщикБИКБанка");
		ДанныеЗаполнения.Добавить(БИКБанкаПлательщика, "Payer.Bank.Bic");
		СчетБанкаПлательщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ПлательщикКоррСчетБанка");
		ДанныеЗаполнения.Добавить(СчетБанкаПлательщика, "Payer.Bank.CorrespAcc");
		ФилиалБанкаПлательщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ФилиалБанкаПлательщика");
		ДанныеЗаполнения.Добавить(ФилиалБанкаПлательщика, "Payer.Filial");
		ИННПлательщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ПлательщикИНН");
		ДанныеЗаполнения.Добавить(ИННПлательщика, "Payer.INN");
		КПППлательщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ПлательщикКПП");
		ДанныеЗаполнения.Добавить(КПППлательщика, "Payer.KPP");
		ТекстПлательщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ПлательщикНаименование");
		ДанныеЗаполнения.Добавить(ТекстПлательщика, "Payer.Name");
		НомерСчетаПлательщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ПлательщикРасчСчет");
		ДанныеЗаполнения.Добавить(НомерСчетаПлательщика, "Payer.PersonalAcc");
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ЗапросВыписки Тогда
		
		ИдентификаторДокумента = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ИдентификаторДокумента");
		
		СтрокаВозврата = "ATTRIBUTES" + Символ(10) + "OrgId=" + ИдентификаторОрганизации + Символ(10)
			+ "Sender=1С: Предприятие 8" + Символ(10) + "ExtId=" + ИдентификаторДокумента + Символ(10) + "FIELDS" + Символ(10);
		
		ДатаНачалаПериода = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ДатаНачала");

		ДанныеЗаполнения.Добавить(Формат(ДатаНачалаПериода, "ДФ=yyyy-MM-dd"), "BeginDate");
		ДатаОкончанияПериода = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ДатаКонца");

		ДанныеЗаполнения.Добавить(Формат(ДатаОкончанияПериода, "ДФ=yyyy-MM-dd"), "EndDate");
		ТипЗапроса = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ТипЗапроса");

		ДанныеЗаполнения.Добавить(ТипЗапроса, "StmtType");
	ИначеЕсли ВидЭд = Перечисления.ВидыЭД.ВыпискаБанка Тогда
		СтрокаВозврата = "ATTRIBUTES" + Символ(10)
			+ "OrgId=" + ИдентификаторОрганизации + Символ(10) + "FIELDS" + Символ(10);
		
		УчетнаяЗапись = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "УчетнаяЗапись");

		ДанныеЗаполнения.Добавить(УчетнаяЗапись, "AccountName");
		Исполнитель = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "Исполнитель");

		ДанныеЗаполнения.Добавить(Исполнитель, "Author");
		НомерСчета = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "РасчСчет");

		ДанныеЗаполнения.Добавить(НомерСчета, "ComRests.Acc");
		ДатаНачала = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ДатаНачалаСтрокой");
		ДатаНачала = Сред(ДатаНачала, 1, 10);

		ДанныеЗаполнения.Добавить(ДатаНачала, "ComRests.BeginDate");
		БИК = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "БИК");
		ДанныеЗаполнения.Добавить(БИК, "ComRests.Bic");
		ДатаПредыдущейОперации = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ДатаПредыдущейОперации");

		ДатаПредыдущейОперации = Формат(ДатаПредыдущейОперации, "ДФ=yyyy-MM-dd");
		ДанныеЗаполнения.Добавить(ДатаПредыдущейОперации, "ComRests.DatePLast");
		ДатаОкончания = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ДатаКонцаСтрокой");
		ДатаОкончания = Сред(ДатаОкончания, 1, 10);

		ДанныеЗаполнения.Добавить(ДатаОкончания, "ComRests.EndDate");
		ВходящийОстаток = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "НачальныйОстаток");

		ВходящийОстаток = Формат(ВходящийОстаток, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=");
		ДанныеЗаполнения.Добавить(ВходящийОстаток, "ComRests.EnterBal");
		ВходящийОстатокВНациональнойВалюте = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ВходящийОстатокВНациональнойВалюте");

		ВходящийОстатокВНациональнойВалюте = Формат(ВходящийОстатокВНациональнойВалюте, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=");
		ДанныеЗаполнения.Добавить(ВходящийОстатокВНациональнойВалюте, "ComRests.EnterBalNat");
		ДатаПоследнейОперации = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ДатаПоследнейОперации");

		ДатаПоследнейОперации = Формат(ДатаПоследнейОперации, "ДФ=yyyy-MM-dd");
		ДанныеЗаполнения.Добавить(ДатаПоследнейОперации, "ComRests.LastMovetDate");
		ПлановыйИсходящийОстаток = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ПлановыйИсходящийОстаток");
		ПлановыйИсходящийОстаток = Формат(ПлановыйИсходящийОстаток, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=");
		ДанныеЗаполнения.Добавить(ПлановыйИсходящийОстаток, "ComRests.PlanOutBal");
		ПлановыйИсходящийОстатокВНациональнойВалюте = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ПлановыйИсходящийОстатокВНациональнойВалюте");

		ПлановыйИсходящийОстатокВНациональнойВалюте = Формат(
			ПлановыйИсходящийОстатокВНациональнойВалюте, "ЧДЦ=3; ЧРД=.; ЧН=0.00; ЧГ=");

		ДанныеЗаполнения.Добавить(ПлановыйИсходящийОстатокВНациональнойВалюте, "ComRests.PlanOutBalNat");
		КурсНаНачалоПериода = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "КурсНаНачалоПериода");

		КурсНаНачалоПериода = Формат(КурсНаНачалоПериода, "ЧДЦ=4; ЧРД=.; ЧГ=");
		ДанныеЗаполнения.Добавить(КурсНаНачалоПериода, "ComRests.RateIn");
		КурсНаКонецПериода = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "КурсНаКонецПериода");

		КурсНаКонецПериода = Формат(КурсНаКонецПериода, "ЧДЦ=4; ЧРД=.; ЧГ=");
		ДанныеЗаполнения.Добавить(КурсНаКонецПериода, "ComRests.RateOut");
		ИсходящийОстаток = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "КонечныйОстаток");

		ИсходящийОстаток = Формат(ИсходящийОстаток, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=");
		ДанныеЗаполнения.Добавить(ИсходящийОстаток, "ComRests.OutBal");
		ИсходящийОстатокВНациональнойВалюте = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ИсходящийОстатокВНациональнойВалюте");

		ИсходящийОстатокВНациональнойВалюте = Формат(ИсходящийОстатокВНациональнойВалюте, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=");
		ДанныеЗаполнения.Добавить(ИсходящийОстатокВНациональнойВалюте, "ComRests.OutBalNat");
		ДатаСоставленияВыписки = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ДатаСоставленияВыписки");
		ДатаСоставленияВыписки = Сред(ДатаСоставленияВыписки, 1, 19);

		ДанныеЗаполнения.Добавить(ДатаСоставленияВыписки, "ComRests.StmtDateTime");
		ТипЗапросаВыписки = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ТипЗапросаВыписки");

		ДанныеЗаполнения.Добавить(ТипЗапросаВыписки, "ComRests.StmtType");
		Кредит = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ВсегоПоступило");

		Кредит = Формат(Кредит, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=");
		ДанныеЗаполнения.Добавить(Кредит, "CreditSum");
		КредитВНациональнойВалюте = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "КредитВНациональнойВалюте");

		КредитВНациональнойВалюте = Формат(КредитВНациональнойВалюте, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=");
		ДанныеЗаполнения.Добавить(КредитВНациональнойВалюте, "CreditSumNat");
		ВсегоСписано = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ВсегоСписано");

		Дебет = Формат(ВсегоСписано, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=");
		ДанныеЗаполнения.Добавить(Дебет, "DebetSum");
		ДебетВНациональнойВалюте = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ДебетВНациональнойВалюте");
		ДебетВНациональнойВалюте = Формат(ДебетВНациональнойВалюте, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=");
		ДанныеЗаполнения.Добавить(ДебетВНациональнойВалюте, "DebetSumNat");
		ДопИнформация = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ДопИнформация");
		ДанныеЗаполнения.Добавить(ДопИнформация, "DocComment");
		ИдентификаторВыписки = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ИдентификаторВыписки");
		ДанныеЗаполнения.Добавить(ИдентификаторВыписки, "DocId");
		НомерДокумента = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "Номер");
		ДанныеЗаполнения.Добавить(НомерДокумента, "DocNum");
		НаименованиеОрганизации = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "НаименованиеОрганизации");
		ДанныеЗаполнения.Добавить(НаименованиеОрганизации, "OrgName");
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.Квитанция Тогда
		ИдентификаторДокумента = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ТикетСББОЛ");
		ДатаСозданияКвитка = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ДатаСозданияКвитка");
		ДатаВФормате = Сред(ДатаСозданияКвитка, 1, 10);
		СтрокаВозврата = "ATTRIBUTES" + Символ(10) + "CreateTime=" + ДатаВФормате + Символ(10)
			+ "DocId=" + ИдентификаторДокумента + Символ(10) + "FIELDS" + Символ(10);
		КодСостоянияДокумента = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "КодСостоянияДокумента");
		ДанныеЗаполнения.Добавить(КодСостоянияДокумента, "Info.StatusStateCode");
		ДатаСписанияСоСчетаПлательщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ДатаСписанияСоСчетаПлательщика");
		ДатаСписанияСоСчетаПлательщика = Формат(ДатаСписанияСоСчетаПлательщика, "ДФ=yyyy-MM-dd");
		ДанныеЗаполнения.Добавить(ДатаСписанияСоСчетаПлательщика, "Info.BankDate.ChargeOffDate");
		ДатаПеречисленияПлатежа = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ДатаПеречисленияПлатежа");
		ДатаПеречисленияПлатежа = Формат(ДатаПеречисленияПлатежа, "ДФ=yyyy-MM-dd");
		ДанныеЗаполнения.Добавить(ДатаПеречисленияПлатежа, "Info.BankDate.DPP");
		ДатаПостановкиВКартотеку = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ДатаПостановкиВКартотеку");
		ДатаПостановкиВКартотеку = Формат(ДатаПостановкиВКартотеку, "ДФ=yyyy-MM-dd");
		ДанныеЗаполнения.Добавить(ДатаПостановкиВКартотеку, "Info.BankDate.FileDate");
		ДатаОтметкиБанкомПолучателя = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ДатаОтметкиБанкомПолучателя");
		ДатаОтметкиБанкомПолучателя = Формат(ДатаОтметкиБанкомПолучателя, "ДФ=yyyy-MM-dd");
		ДанныеЗаполнения.Добавить(ДатаОтметкиБанкомПолучателя, "Info.BankDate.RecDate");
		ДатаПоступленияВБанкПлательщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ДатаПоступленияВБанкПлательщика");
		ДатаПоступленияВБанкПлательщика = Формат(ДатаПоступленияВБанкПлательщика, "ДФ=yyyy-MM-dd");
		ДанныеЗаполнения.Добавить(ДатаПоступленияВБанкПлательщика, "Info.BankDate.ReceiptDate");
		ДатаОтметкиБанкомПлательщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ДатаОтметкиБанкомПлательщика");
		ДатаОтметкиБанкомПлательщика = Формат(ДатаОтметкиБанкомПлательщика, "ДФ=yyyy-MM-dd");
		ДанныеЗаполнения.Добавить(ДатаОтметкиБанкомПлательщика, "Info.BankDate.SignDate");

		АвторСообщения = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
														ДеревоРазбора, СтрокаОбъекта, "АвторСообщения");
		ДанныеЗаполнения.Добавить(АвторСообщения, "Info.MsgFromBank.Author");
		СообщениеИзБанка = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
														ДеревоРазбора, СтрокаОбъекта, "СообщениеИзБанка");
		ДанныеЗаполнения.Добавить(СообщениеИзБанка, "Info.MsgFromBank.Message");
	КонецЕсли;
	
	Для каждого Элемент из ДанныеЗаполнения Цикл
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			СтрокаВозврата = СтрокаВозврата + Элемент.Представление + "=" + Элемент.Значение + Символ(10);
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеЗаполнения.Количество() Тогда
		СтрокаВозврата = Сред(СтрокаВозврата, 1, СтрДлина(СтрокаВозврата) - 1);
	КонецЕсли;
	
	Если ВидЭД = Перечисления.ВидыЭД.ЗапросВыписки Тогда
		СтрокаВозврата = СтрокаВозврата + Символ(10) + "TABLES" + Символ(10) + "Table=Accounts" + Символ(10);
		СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
		Индекс = 0;
		ВсегоЗаписей = СтрокиТЧ.Количество();
		Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
			Индекс=Индекс + 1;
			БИК = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "БИК");
			НомерСчета = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "НомерСчета");
			СтрокаВозврата = СтрокаВозврата + "Bic=" + БИК + Символ(10) + "Account=" + НомерСчета + Символ(10)+ "#"
				+ ?(Индекс <> ВсегоЗаписей, Символ(10), "");
		КонецЦикла;
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ВыпискаБанка Тогда
		СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
		Индекс = 0;
		ВсегоЗаписей = СтрокиТЧ.Количество();
		Если ВсегоЗаписей > 0 Тогда
			СтрокаВозврата = СтрокаВозврата + Символ(10) + "TABLES";
			СтрокаВозврата = СтрокаВозврата + Символ(10) + "Table=TransInfo" + Символ(10);
		КонецЕсли;
		Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
			Индекс=Индекс + 1;
			ДанныеЗаполненияСтроки = Новый СписокЗначений;
			ДатаСписания = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ДатаСписания");
			ДатаСписания = Сред(ДатаСписания, 1, 10);
			ДанныеЗаполненияСтроки.Добавить(ДатаСписания, "BankDate.ChargeOffDate=");
			ДатаПостановкиВКартотеку = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ДатаПостановкиВКартотеку");
			ДатаПостановкиВКартотеку = Сред(ДатаПостановкиВКартотеку, 1, 10);
			ДанныеЗаполненияСтроки.Добавить(ДатаПостановкиВКартотеку, "BankDate.FileDate=");
			
			ДатаПоступленияВБанкПлательщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ДатаПоступленияВБанкПлательщика");
			ДатаПоступленияВБанкПлательщика = Сред(ДатаПоступленияВБанкПлательщика, 1, 10);
			ДанныеЗаполненияСтроки.Добавить(ДатаПоступленияВБанкПлательщика, "BankDate.ReceiptDate=");
			НомерДокументаБанка = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "НомерДокументаБанка");
			ДанныеЗаполненияСтроки.Добавить(НомерДокументаБанка, "ComTransInfo.BankNumDoc=");
			КодПодразделения = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "КодПодразделения");
			ДанныеЗаполненияСтроки.Добавить(КодПодразделения, "ComTransInfo.BranchCode=");
			ДатаПроводки = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ДатаПроводки");
			ДатаПроводки = Сред(ДатаПроводки, 1, 19);
			ДанныеЗаполненияСтроки.Добавить(ДатаПроводки, "ComTransInfo.CarryDate=");
			ПризнакПриложения = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ПризнакПриложения");
			ПризнакПриложения = Формат(ПризнакПриложения, "БЛ=0; БИ=1");
			ДанныеЗаполненияСтроки.Добавить(ПризнакПриложения, "ComTransInfo.Dc=");
			ВалютаПлатежа = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ВалютаПлатежа");
			ДанныеЗаполненияСтроки.Добавить(ВалютаПлатежа, "ComTransInfo.DocCurr=");
			ДатаРасчетногоДокумента = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "Дата");
			ДатаРасчетногоДокумента = Формат(ДатаРасчетногоДокумента, "ДФ=yyyy-MM-dd");
			ДанныеЗаполненияСтроки.Добавить(ДатаРасчетногоДокумента, "ComTransInfo.DocDate=");
			НомерРасчетногоДокумента = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "Номер");
			ДанныеЗаполненияСтроки.Добавить(НомерРасчетногоДокумента, "ComTransInfo.DocNum=");
			СуммаДокумента = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "Сумма");
			СуммаДокумента = Формат(СуммаДокумента, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=");
			ДанныеЗаполненияСтроки.Добавить(СуммаДокумента, "ComTransInfo.DocSum=");
			СуммаДокументаВНациональнойВалюте = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "СуммаДокументаВНациональнойВалюте");
			СуммаДокументаВНациональнойВалюте = Формат(СуммаДокументаВНациональнойВалюте, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=");
			ДанныеЗаполненияСтроки.Добавить(СуммаДокументаВНациональнойВалюте, "ComTransInfo.DocSumNat=");
			ОчередностьПлатежа = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "Очередность");
			ОчередностьПлатежа = Формат(ОчередностьПлатежа, "ЧДЦ=0; ЧГ=");
			ДанныеЗаполненияСтроки.Добавить(ОчередностьПлатежа, "ComTransInfo.PaymentOrder=");
			ВидПлатежа = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ВидПлатежа");
			ДанныеЗаполненияСтроки.Добавить(ВидПлатежа, "ComTransInfo.PaytKind=");
			НазначениеПлатежа = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "НазначениеПлатежа");
			ДанныеЗаполненияСтроки.Добавить(НазначениеПлатежа, "ComTransInfo.Purpose=");
			ВидОперации = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ВидОплаты");
			ДанныеЗаполненияСтроки.Добавить(ВидОперации, "ComTransInfo.TransKind=");
			ДопУслуга = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ДопУслуга");
			ДанныеЗаполненияСтроки.Добавить(ДопУслуга, "ComTransInfo.UrgentSBRF=");
			ИдентификаторДокумента = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ИдентификаторДокумента");
			ДанныеЗаполненияСтроки.Добавить(ИдентификаторДокумента, "DocId=");
			НаименованиеПолучателя = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ПолучательНаименование");
			ДанныеЗаполненияСтроки.Добавить(НаименованиеПолучателя, "Payee.Name=");
			СчетПолучателя = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ПолучательСчет");
			ДанныеЗаполненияСтроки.Добавить(СчетПолучателя, "Payee.PayeeAcc=");
			ИННПолучателя = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ПолучательИНН");
			ДанныеЗаполненияСтроки.Добавить(ИННПолучателя, "Payee.PayeeINN=");
			БИКБанкаПолучателя = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ПолучательБИКБанка");
			ДанныеЗаполненияСтроки.Добавить(БИКБанкаПолучателя, "PayeeBank.PayeeBankBic=");
			СчетБанкаПолучателя = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "СчетБанкаПолучателя");
			ДанныеЗаполненияСтроки.Добавить(СчетБанкаПолучателя, "PayeeBank.PayeeBankCorrAcc=");
			НаименованиеБанкаПолучателя = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ПолучательНаименованиеБанка");
			ДанныеЗаполненияСтроки.Добавить(НаименованиеБанкаПолучателя, "PayeeBank.PayeeBankName=");
			НаименованиеПлательщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ПлательщикНаименование");
			ДанныеЗаполненияСтроки.Добавить(НаименованиеПлательщика, "Payer.Name=");
			СчетПлательщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ПлательщикСчет");
			ДанныеЗаполненияСтроки.Добавить(СчетПлательщика, "Payer.PayerAcc=");
			ИННПлательщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ПлательщикИНН");
			ДанныеЗаполненияСтроки.Добавить(ИННПлательщика, "Payer.PayerINN=");
			БИКБанкаПлательщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ПлательщикБИКБанка");
			ДанныеЗаполненияСтроки.Добавить(БИКБанкаПлательщика, "PayerBank.PayerBankBic=");
			СчетБанкаПлательщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "СчетБанкаПлательщика");
			ДанныеЗаполненияСтроки.Добавить(СчетБанкаПлательщика, "PayerBank.PayerBankCorrAcc=");
			НаименованиеБанкаПлательщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ПлательщикНаименованиеБанка");
			ДанныеЗаполненияСтроки.Добавить(НаименованиеБанкаПлательщика, "PayerBank.PayerBankName=");
			Переоценка = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "Переоценка");
			ДанныеЗаполненияСтроки.Добавить(Переоценка, "s_TI=");
			КодБюджетнойКлассификации = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ПоказательКБК");
			ДанныеЗаполненияСтроки.Добавить(КодБюджетнойКлассификации, "DepartmentalInfo.Cbc=");
			ДатаНалоговогоДокумента = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ПоказательДаты");
			ДанныеЗаполненияСтроки.Добавить(ДатаНалоговогоДокумента, "DepartmentalInfo.DocDate=");
			НомерНалоговогоДокумента = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ПоказательНомера");
			ДанныеЗаполненияСтроки.Добавить(НомерНалоговогоДокумента, "DepartmentalInfo.DocNo=");
			ПоказательСтатусаНалогоплательщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "СтатусСоставителя");
			ДанныеЗаполненияСтроки.Добавить(ПоказательСтатусаНалогоплательщика, "DepartmentalInfo.DrawerStatus=");
			КПП102 = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ПлательщикКПП");
			ДанныеЗаполненияСтроки.Добавить(КПП102, "DepartmentalInfo.Kpp102=");
			КПП103 = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ПолучательКПП");
			ДанныеЗаполненияСтроки.Добавить(КПП103, "DepartmentalInfo.Kpp103=");
			ДанныеЗаполненияСтроки.Добавить(
				ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "КодОКАТО"),
				"DepartmentalInfo.Okato=");
			ПоказательОснованияПлатежа = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ПоказательОснования");
			ДанныеЗаполненияСтроки.Добавить(ПоказательОснованияПлатежа, "DepartmentalInfo.PaytReason=");
			ТипНалоговогоПлатежа = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ПоказательТип");
			ДанныеЗаполненияСтроки.Добавить(ТипНалоговогоПлатежа, "DepartmentalInfo.TaxPaytKind=");
			НалоговыйПериод = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ПоказательПериода");
			ДанныеЗаполненияСтроки.Добавить(НалоговыйПериод, "DepartmentalInfo.TaxPeriod=");
			ДатаДокументаКартотека = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ДатаОтсылкиДок");
			ДатаДокументаКартотека = Сред(ДатаДокументаКартотека, 1, 10);
			ДанныеЗаполненияСтроки.Добавить(ДатаДокументаКартотека, "DiffDoc.DocDateCard=");
			НомерДокументаКартотека = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "НомерДокументаКартотека");
			ДанныеЗаполненияСтроки.Добавить(НомерДокументаКартотека, "DiffDoc.DocNumberCard=");
			ШифрДокументаКартотека = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ШифрДокументаКартотека");
			ДанныеЗаполненияСтроки.Добавить(ШифрДокументаКартотека, "DiffDoc.DocShifr=");
			СрокАкцепта = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "СрокАкцепта");
			СрокАкцепта = Формат(СрокАкцепта, "ЧДЦ=0; ЧГ=");
			ДанныеЗаполненияСтроки.Добавить(СрокАкцепта, "DiffDoc.LetterOfCreditAcceptDate=");
			ДополнительныеУсловияАккредитива = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ДополнУсловия");
			ДанныеЗаполненияСтроки.Добавить(ДополнительныеУсловияАккредитива, "DiffDoc.LetterOfCreditAddCond=");
			ТребуемыеДокументы = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ПлатежПоПредст");
			ДанныеЗаполненияСтроки.Добавить(ТребуемыеДокументы, "DiffDoc.LetterOfCreditDemandDocs=");
			НомерСчетаПоставщика = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "НомерСчетаПоставщика");
			ДанныеЗаполненияСтроки.Добавить(НомерСчетаПоставщика, "DiffDoc.LetterOfCreditPayAcc=");
			УсловияОплатыАккредитива = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "Условие1");
			ДанныеЗаполненияСтроки.Добавить(УсловияОплатыАккредитива, "DiffDoc.LetterOfCreditPaymCond=");
			СрокДействияАккредитива = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "СрокПлатежа");
			СрокДействияАккредитива = Формат(СрокДействияАккредитива, "ДФ=yyyy-MM-dd");
			ДанныеЗаполненияСтроки.Добавить(СрокДействияАккредитива, "DiffDoc.LetterOfCreditPeriodVal=");
			ВидАккредитива = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ВидАккредитива");
			ДанныеЗаполненияСтроки.Добавить(ВидАккредитива, "DiffDoc.LetterOfCreditType=");
			НомерПлатежа = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "НомерПлатежа");
			ДанныеЗаполненияСтроки.Добавить(НомерПлатежа, "DiffDoc.NumPaymentCard=");
			СодержаниеОперации = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "СодержаниеОперации");
			ДанныеЗаполненияСтроки.Добавить(СодержаниеОперации, "DiffDoc.OperContent=");
			УсловиеОплаты = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "УсловиеОплаты");
			ДанныеЗаполненияСтроки.Добавить(УсловиеОплаты, "DiffDoc.PayingCondition=");
			СуммаОстаткаПлатежа = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "СуммаОстаткаПлатежа");
			Если НЕ СуммаОстаткаПлатежа = Неопределено Тогда
				СуммаОстаткаПлатежаСтрокой = Формат(СуммаОстаткаПлатежа, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=");
				ДанныеЗаполненияСтроки.Добавить(СуммаОстаткаПлатежаСтрокой, "DiffDoc.SumRestCard=");
			КонецЕсли;
			ДополнительнаяИнформация = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ДополнительнаяИнформация");
			ДанныеЗаполненияСтроки.Добавить(ДополнительнаяИнформация, "Info=");
			Для каждого Элемент из ДанныеЗаполненияСтроки Цикл
				Если ЗначениеЗаполнено(Элемент.Значение) Тогда
					СтрокаВозврата= СтрокаВозврата + Элемент.Представление + Элемент.Значение + Символ(10);
				КонецЕсли;
			КонецЦикла;
			СтрокаВозврата = СтрокаВозврата + "#" + ?(Индекс <> ВсегоЗаписей, Символ(10), "");
		КонецЦикла;
		
	КонецЕсли;
		
	Возврат СтрокаBase64БезBOM(СтрокаВозврата);
	
КонецФункции

// Возвращает строку подписанных данных в формате Base64
//
// Параметры
//  <ЭД> - <СправочникСсылка.ЭДПрисоединенныеФайлы> - ссылка на электронный документ
//
// Возвращаемое значение:
//   <Строка>   - данные в формате base64
//
Функция ПодписанныеДанныеBase64(ЭД) Экспорт
	
	СлужебныйЭД = ЭлектронныеДокументыСлужебный.СлужебныйЭДБанка(ЭД);
	ДанныеЭД = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(СлужебныйЭД);
	Возврат Base64Строка(ДанныеЭД);
	
КонецФункции

// Сохраняет результат проверки валидности подписей
//
// Параметры
//  <ЭД>  - <СправочникСсылка.ЭДПрисоединенныеФайлы> - электронный документ
//  <РезультатПроверки>  - <Массив> - содержит результаты проверки подписей по индексам
//
Процедура ЗафиксироватьРезультатПроверкиЭП(ЭД, РезультатПроверки) Экспорт

	ЭДОбъект = ЭД.ПолучитьОбъект();
	Для Каждого СтрокаПодписи Из ЭДОбъект.ЭлектронныеПодписи Цикл
		Если Не (РезультатПроверки[СтрокаПодписи.НомерСтроки - 1] = Неопределено) Тогда
			СтрокаПодписи.ДатаПроверкиПодписи = ТекущаяДатаСеанса();
			СтрокаПодписи.ПодписьВерна = РезультатПроверки[СтрокаПодписи.НомерСтроки - 1];
		КонецЕсли;
	КонецЦикла;
	ЭДОбъект.Записать();
	
КонецПроцедуры

// Возвращает массив, содержащий тесты запросов состояний электронных документов на обработке
//
// Параметры
//  <СоглашениеЭД> - <СправочникСсылка.СоглашенияОбиспользованииЭД> - соглашение со Сбербанком
//  <ВидЭД> - <ПеречислениеСсылка.ВидыЭД> - вид электронного документа
//
// Возвращаемое значение:
//   <Массив> - содержит тексты запросов
//
Функция МассивЗапросовСостоянийОбработкиДокументов(СоглашениеЭД, ВидЭД) Экспорт
	
	МассивВозврата = Новый Массив;
	
	Запрос = Новый Запрос;
	Если ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение Тогда
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ЭДПрисоединенныеФайлы.УникальныйИДВнешний,
			|	ЭДПрисоединенныеФайлы.СоглашениеЭД.ИдентификаторОрганизации КАК ИдентификаторОрганизации
			|ИЗ
			|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭД КАК СостоянияЭД
			|		ПО (СостоянияЭД.ЭлектронныйДокумент = ЭДПрисоединенныеФайлы.Ссылка)
			|ГДЕ
			|	ЭДПрисоединенныеФайлы.СоглашениеЭД = &СоглашениеЭД
			|	И ЭДПрисоединенныеФайлы.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПлатежноеПоручение)
			|	И (СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяИсполнение)
			|			ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяИзвещениеОПолучении))
			|	И НЕ ЭДПрисоединенныеФайлы.УникальныйИДВнешний = """"
			|	И НЕ ЭДПрисоединенныеФайлы.ПометкаУдаления
			|	И НЕ ЭДПрисоединенныеФайлы.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Отклонен)";
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ЗапросВыписки Тогда
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ЭДПрисоединенныеФайлы.УникальныйИДВнешний,
			|	ЭДПрисоединенныеФайлы.СоглашениеЭД.ИдентификаторОрганизации КАК ИдентификаторОрганизации
			|ИЗ
			|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭД КАК СостоянияЭД
			|		ПО (СостоянияЭД.ЭлектронныйДокумент = ЭДПрисоединенныеФайлы.Ссылка)
			|ГДЕ
			|	ЭДПрисоединенныеФайлы.СоглашениеЭД = &СоглашениеЭД
			|	И ЭДПрисоединенныеФайлы.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ЗапросВыписки)
			|	И НЕ ЭДПрисоединенныеФайлы.УникальныйИДВнешний = """"
			|	И НЕ ЭДПрисоединенныеФайлы.ПометкаУдаления
			|	И (ЭДПрисоединенныеФайлы.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Отправлен)
			|			ИЛИ ЭДПрисоединенныеФайлы.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Принят)
			|			ИЛИ ЭДПрисоединенныеФайлы.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Доставлен))";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СоглашениеЭД", СоглашениеЭД);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат МассивВозврата;
	КонецЕсли;

	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		Попытка
			Request = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Request", "http://bssys.com/upg/request");
			ИдентификаторЗапроса = Новый УникальныйИдентификатор;
			ТекстОшибки = "";
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
													Request,
													"requestId",
													Строка(ИдентификаторЗапроса),
													Истина,
													ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
													Request,
													"orgId",
													Выборка.ИдентификаторОрганизации,
													Истина,
													ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "version", "1.0", Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "sender", "1С: Предприятие 8", Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "receiver", "SBBOL_DBO", Истина, ТекстОшибки);
			
			DocIds = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Request.DocIds", "http://bssys.com/upg/request");
			DocId = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Request.DocIds.DocId", "http://bssys.com/upg/request");
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
													DocId,
													"docid",
													Выборка.УникальныйИДВнешний,
													Истина,
													ТекстОшибки);
			DocIds.DocId.Добавить(DocId);
			
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "DocIds", DocIds, Истина, ТекстОшибки);
			
			Request.Проверить();
			
			Запись = Новый ЗаписьXML;
			Запись.УстановитьСтроку();
			ФабрикаXDTO.ЗаписатьXML(Запись, Request);
			ТекстЗапроса = Запись.Закрыть();
			
			Если Не ПустаяСтрока(ТекстЗапроса) Тогда
				МассивВозврата.Добавить(ТекстЗапроса);
			КонецЕсли;
			
		Исключение
			
			ШаблонСообщения = НСтр("ru = '%1. (подробности см. в Журнале регистрации).'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
															ШаблонСообщения,
															КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбработатьИсключениеПоЭДНаСервере(
							НСтр("ru = 'Формирование запроса статуса электроного документа'"),
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
							ТекстСообщения,
							1);

		КонецПопытки
		
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

// Возвращает массив ссылок на сертификаты, которыми может подписан ЭД
//
// Параметры
//  <СоглашениеЭД>  - <СправочникСсылка.СоглашенияОбИспользованииЭД> - соглашение
//  <ВидЭД>  - <Перечисления.ВидыЭД> - вид электронного документа
//
// Возвращаемое значение:
//   <Массив>   - <Массив подходящих доступных сертификатов>
//
Функция ПолучитьДоступныеБанковскиеСертификаты(СоглашениеЭД, ВидЭД) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |	СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка,
	                |	СоглашенияОбИспользованииЭДИсходящиеДокументы.ПрофильНастроекЭДО,
	                |	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент
	                |ПОМЕСТИТЬ ВТ_ПрофильИСоглашение
	                |ИЗ
	                |	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
	                |ГДЕ
	                |	СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка = &Ссылка
	                |	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Формировать
	                |	И СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ВидЭД
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	                |	ПодписываемыеВидыЭД.СертификатЭП КАК Ссылка
	                |ИЗ
	                |	ВТ_ПрофильИСоглашение КАК ВТ_ПрофильИСоглашение
	                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодписываемыеВидыЭД КАК ПодписываемыеВидыЭД
	                |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
	                |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |					ПрофилиЭДОСертификаты.Сертификат КАК Сертификат
	                |				ИЗ
	                |					ВТ_ПрофильИСоглашение КАК ВТ_ПрофильИСоглашение
	                |						ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК ПрофилиЭДОСертификаты
	                |						ПО ВТ_ПрофильИСоглашение.ПрофильНастроекЭДО = ПрофилиЭДОСертификаты.Ссылка
	                |				
	                |				ОБЪЕДИНИТЬ ВСЕ
	                |				
	                |				ВЫБРАТЬ
	                |					СоглашенияЭДСертификаты.Сертификат
	                |				ИЗ
	                |					ВТ_ПрофильИСоглашение КАК ВТ_ПрофильИСоглашение
	                |						ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СоглашенияЭДСертификаты
	                |						ПО ВТ_ПрофильИСоглашение.Ссылка = СоглашенияЭДСертификаты.Ссылка) КАК СертификатыИзНастроекИПрофилей
	                |				ПО Сертификаты.Ссылка = СертификатыИзНастроекИПрофилей.Сертификат
	                |			ПО ПодписываемыеВидыЭД.СертификатЭП = Сертификаты.Ссылка
	                |		ПО ВТ_ПрофильИСоглашение.ИсходящийДокумент = ПодписываемыеВидыЭД.ВидЭД
	                |ГДЕ
	                |	(Сертификаты.Пользователь = &Пользователь
	                |			ИЛИ Сертификаты.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	                |			ИЛИ Сертификаты.Пользователь = &ПользовательНеУказан)
	                |	И НЕ Сертификаты.Отозван
	                |	И НЕ Сертификаты.ПометкаУдаления
	                |	И ПодписываемыеВидыЭД.Использовать";
	Запрос.УстановитьПараметр("Ссылка",       СоглашениеЭД);
	Запрос.УстановитьПараметр("ВидЭД",        ВидЭД);
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	СвойстваНеуказанногоПользователя = ПользователиСлужебный.СвойстваНеуказанногоПользователя();
	Запрос.УстановитьПараметр("ПользовательНеУказан", СвойстваНеуказанногоПользователя.Ссылка);
	ТЗРезультат = Запрос.Выполнить().Выгрузить();
	Возврат ТЗРезультат.ВыгрузитьКолонку("Ссылка");

КонецФункции

// Подготавливает структуру данных для отправки в сбербанк
//
// Параметры:
// МассивЭД - ссылки на электронные документы
//
// Возвращаемое значение:
// Соответствие - Ключ - СправочникСсылка.СоглашенияОбИспользованииЭД - ссылка на настройку ЭДО с банком
//             Значение - Массив - в элементах СправочникСсылка.ЭДПрисоединенныеФайлы - ссылки на электронные документы
//
Функция ДанныеДляОтправкиВСбербанк(Знач МассивЭД) Экспорт
	
	СоответствиеВозврата = Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЭДПрисоединенныеФайлы.Ссылка,
	               |	ЭДПрисоединенныеФайлы.СоглашениеЭД КАК СоглашениеЭД
	               |ИЗ
	               |	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	               |ГДЕ
	               |	ЭДПрисоединенныеФайлы.Ссылка В(&МассивЭД)
	               |	И ЭДПрисоединенныеФайлы.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Подписан)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	СоглашениеЭД";
	Запрос.УстановитьПараметр("МассивЭД", МассивЭД);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("СоглашениеЭД") Цикл
		МассивЭД = Новый Массив;
		Пока Выборка.Следующий() Цикл
			МассивЭД.Добавить(Выборка.Ссылка);
		КонецЦикла;
		СоответствиеВозврата.Вставить(Выборка.СоглашениеЭД, МассивЭД);
	КонецЦикла;
	
	Возврат СоответствиеВозврата;
	
КонецФункции

// Возвращает строку с содержимым сертификата в формате Base64
//
// Параметры
//  <СсылкаНаХранилище>  - <Строка> - ссылка на хранилище с двоичными данными сертификата
//
// Возвращаемое значение:
//   <Строка>   - Строка содержит данные сертификата в формате Base64
//
Функция СертификатВФорматеBase64(СсылкаНаХранилище) Экспорт

	ДвоичныеДанныеСертификата = СсылкаНаХранилище.Получить();
	
	СтрокаBase64 = Base64Строка(ДвоичныеДанныеСертификата);
	СтрокаBase64 = "-----BEGIN CERTIFICATE-----" + Символы.ПС + СтрокаBase64 + Символы.ПС + "-----END CERTIFICATE-----";

	Возврат СтрокаBase64;

КонецФункции // СертификатВФорматеBase64()

// Формирует тексты запросов для получения состояния обработки отправленных ранее запросов выписки банка
//
// Параметры:
//  НастройкаЭДО - СправочникСсылка.СоглашенияОбИспользованииЭД, ссылка на соглашение с банком
//
// Возвращаемое значение:
//  Массив - в элементах строка - тексты для отправки в банк
//
Функция ТекстыЗапросаСостоянийЗапросовВыпискиБанка(НастройкаЭДО) Экспорт
	
	МассивВозврата = Новый Массив;
	МассивИдентификаторов = МассивИдентификаторовДокументовБанка(НастройкаЭДО);
	
	Если МассивИдентификаторов.Количество() = 0 Тогда
		Возврат МассивВозврата;
	КонецЕсли;
	
	ИдентификаторОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаЭДО, "ИдентификаторОрганизации");
	
	Для Каждого Идентификатор Из МассивИдентификаторов Цикл
		Request = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Request", "http://bssys.com/upg/request");
		ИдентификаторЗапроса = Строка(Новый УникальныйИдентификатор);
		ТекстОшибки = "";
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
			Request, "requestId", ИдентификаторЗапроса, Истина, ТекстОшибки);
		
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
			Request, "orgId", ИдентификаторОрганизации, Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "version", "1.0", Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "sender", "1С: Предприятие 8", Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "receiver", "SBBOL_DBO", Истина, ТекстОшибки);
		
		DocIds = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Request.DocIds", "http://bssys.com/upg/request");
		DocId = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Request.DocIds.DocId", "http://bssys.com/upg/request");
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(DocId, "docid", Идентификатор, Истина, ТекстОшибки);
		DocIds.DocId.Добавить(DocId);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Request, "DocIds", DocIds, Истина, ТекстОшибки);
		Попытка
			Request.Проверить();
		Исключение
			Операция = Нстр("ru = 'Формирование запроса состояния электронного документа'");
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстСообщения = Нстр("ru = 'При формировании запроса состояния произошла ошибка'");
			ОбработатьИсключениеПоЭДНаСервере(Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
			Продолжить;
		КонецПопытки;
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку();
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, Request);
	
		МассивВозврата.Добавить(ЗаписьXML.Закрыть());
	
	КонецЦикла;
		
	Возврат МассивВозврата;
		
КонецФункции

// Подготавливает структуру данных для отправки в сбербанк
//
// Параметры:
// НастройкаЭДО - СправочникСсылка.СоглашенияОбИспользованииЭД - текущая настройка прямого обмена с банком
// ДатаНачала - Дата - дата начала периода запроса выписки
// ДатаОкончания - Дата - дата окончания периода запроса выписки
// НомерСчета - Строка - номер банковского счета или Неопределено.
//
// Возвращаемое значение:
// СправочникСсылка.ЭДПрисоединенныеФайлы - сформированный электронный документ запроса выписки банка
//
Функция ЭДЗапросВыпискиСбербанк(НастройкаЭДО, ДатаНачала, ДатаОкончания, НомерСчета, ГотовыеВыписки) Экспорт
	
	ФайлЗапроса = ПолучитьИмяВременногоФайла();
	
	ЕстьОшибка = Ложь;
	ИдентификаторЗапроса = "";
	
	РеквизитыНастройкиЭДО = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		НастройкаЭДО, "Организация, Контрагент, ПрограммаБанка, ИдентификаторОрганизации");
	
	МассивБанковскихСчетов = Новый Массив;
	Если ЗначениеЗаполнено(НомерСчета) Тогда
		МассивБанковскихСчетов.Добавить(НомерСчета);
	Иначе
		ЭлектронныеДокументыПереопределяемый.ПолучитьНомераБанковскихСчетов(
			РеквизитыНастройкиЭДО.Организация, РеквизитыНастройкиЭДО.Контрагент, МассивБанковскихСчетов);
	КонецЕсли;
		
	ГотовыеВыписки = ГотовыеВыпискиСбербанка(НастройкаЭДО, МассивБанковскихСчетов, ДатаНачала, ДатаОкончания);

	Если ГотовыеВыписки.Количество() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЭлектронныеДокументыВнутренний.СформироватьЗапросВыпискиСбербанк(
		НастройкаЭДО, ДатаНачала, ДатаОкончания, МассивБанковскихСчетов, ИдентификаторЗапроса, ФайлЗапроса, ЕстьОшибка);
	
	Если ЕстьОшибка Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ФайлЗапроса);
	АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла);
	
	ИмяФайла = "Запрос выписки за период с %1 по %2";
	ИмяФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ИмяФайла, Формат(ДатаНачала, "ДЛФ=D"), Формат(ДатаОкончания, "ДЛФ=D"));
	ВремяСозданияЭД = ТекущаяДатаСеанса();
	
	ЭД = ПрисоединенныеФайлы.ДобавитьФайл(НастройкаЭДО, ИмяФайла, "xml", ВремяСозданияЭД, ВремяСозданияЭД, АдресФайла,
		Неопределено, , Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());
	ДайджестBase64 = Дайджест(ФайлЗапроса, НастройкаЭДО);
	УдалитьФайлы(ФайлЗапроса);
	ПодписанныеДанные = Base64Значение(ДайджестBase64);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(ПодписанныеДанные);
	ДопФайл = ПрисоединенныеФайлы.ДобавитьФайл(
		НастройкаЭДО, "СхемаДанных", , , , АдресХранилища, , , Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());
	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("ВидЭД", Перечисления.ВидыЭД.ДопДанные);
	ПараметрыФайла.Вставить("ЭлектронныйДокументВладелец", ЭД);
	ПараметрыФайла.Вставить("НаименованиеФайла", "СхемаДанных");
	ПараметрыФайла.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Сформирован);
	ИзменитьПоСсылкеПрисоединенныйФайл(ДопФайл, ПараметрыФайла, Ложь);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Сформирован);
	СтруктураПараметров.Вставить("ВидЭД", Перечисления.ВидыЭд.ЗапросВыписки);
	СтруктураПараметров.Вставить("УникальныйИД", ИдентификаторЗапроса);
	СтруктураПараметров.Вставить("СоглашениеЭД", НастройкаЭДО);
	СтруктураПараметров.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
	СтруктураПараметров.Вставить("НаименованиеФайла", ИмяФайла);
	
	ИзменитьПоСсылкеПрисоединенныйФайл(ЭД, СтруктураПараметров, Ложь);
	
	Возврат ЭД;
	
КонецФункции

#КонецОбласти

#Область Сертификаты

// Используется для обратной совместимости с объектом Справочники.УдалитьСертификатыЭП.
// После физического удаления этого справочника из метаданных - функцию удалить.
//
Функция ЗагрузитьСертификат(СтруктураСертификата, ОписаниеОшибки) Экспорт
	
	НовыйЭлемент = Справочники.УдалитьСертификатыЭП.СоздатьЭлемент();
	НовыйЭлемент.Отпечаток     = СтруктураСертификата.Отпечаток;
	НовыйЭлемент.Наименование  = СтруктураСертификата.Организация;
	НовыйЭлемент.Организация   = СтруктураСертификата.Организация;
	НовыйЭлемент.ДатаОкончания = СтруктураСертификата.ДействителенДо;
	
	// Проверка сертификата на соответствие 63 ФЗ.
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, "8.2.18.108") >= 0 Тогда
		НовыйСертификат = Новый СертификатКриптографии(СтруктураСертификата.ФайлСертификата);
		
		// Корректно работаем только с сертификатами для подписи стандартной структуры.
		Если (НовыйСертификат.Субъект.Свойство("SN") ИЛИ НовыйСертификат.Субъект.Свойство("CN"))
			И НовыйСертификат.Субъект.Свойство("T") И НовыйСертификат.Субъект.Свойство("ST") Тогда
			
			Если НовыйСертификат.Субъект.Свойство("SN") Тогда
				
				ШаблонФИОВладельца = НСтр("ru = '%1 %2'");
				ФИОВладельца = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонФИОВладельца,
					НовыйСертификат.Субъект.SN, НовыйСертификат.Субъект.GN);
			ИначеЕсли НовыйСертификат.Субъект.Свойство("CN") Тогда
				
				ФИОВладельца = НовыйСертификат.Субъект.CN;
			КонецЕсли;
			НовыйЭлемент.ДолжностьПоСертификату = НовыйСертификат.Субъект.T;
			
			ЭлектронныеДокументы.ФамилияИнициалыФизЛица(ФИОВладельца, НовыйЭлемент.Фамилия, НовыйЭлемент.Имя,
				НовыйЭлемент.Отчество);
			НовыйЭлемент.Наименование  = СтруктураСертификата.КомуВыдан;
		КонецЕсли;
	КонецЕсли;
	
	ШаблонНазначения = НСтр("ru = 'Кем выдан: %1
							|Действителен до: %2
							|
							|%3'");
	НовоеНазначение = "";
	ЭлектронныеДокументыСлужебный.ЗаполнитьНазначениеСертификата(СтруктураСертификата.Назначение, НовоеНазначение, Истина);
	НовыйЭлемент.Назначение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонНазначения, СтруктураСертификата.КемВыдан,
		СтруктураСертификата.ДействителенДо, НовоеНазначение);
	
	Если СтруктураСертификата.Свойство("ФайлСертификата")
		И ЗначениеЗаполнено(СтруктураСертификата.ФайлСертификата) Тогда
		
		ДанныеХранилища = Новый ХранилищеЗначения(СтруктураСертификата.ФайлСертификата, Новый СжатиеДанных(9));
		НовыйЭлемент.ФайлСертификата = ДанныеХранилища;
		НовыйЭлемент.Записать();
		
		Возврат НовыйЭлемент.Ссылка;
	Иначе
		ОписаниеОшибки = НСтр("ru = 'Ошибка получения данных сертификата подписи!'");
		
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает структуру с полями сертификата.
//
// Параметры:
//   ДвоичныеДанныеСертификата - ДвоичныеДанные - данные сертификата криптографии.
//
// Возвращаемое значение:
//   Структура - Структура с полями сертификата.
//
Функция СтруктураСертификата(Знач ДвоичныеДанныеСертификата) Экспорт
	
	Попытка
		НовыйСертификат = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
	Исключение
		ВидОперации = Нстр("ru = 'Загрузка сертификата с банковского ключа'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТестСообщения = НСтр("ru = 'Не удалось прочитать файл сертификата, операция прервана.'");
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
			ВидОперации, ПодробныйТекстОшибки, ТестСообщения, 1);
		Возврат Неопределено;
	КонецПопытки;
	
	СтруктураСертификата = ЭлектроннаяПодписьКлиентСервер.ЗаполнитьСтруктуруСертификата(НовыйСертификат);
	
	Возврат СтруктураСертификата;
	
КонецФункции

// Находит существующий или создает новый элемент справочника СертификатыКлючейЭлектроннойПодписиИШифрования
//
// Параметры:
//  ДвоичныеДанныеСертификата - ДвоичныеДанные - содержимое сертификата
//  Организация - СправочникСссылка.Организации - организация
//  НазваниеПрограммыКриптографии - Строка - название криптосредства
//
// Возвращаемое значение:
//  СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - ссылка на новый сертификат
//
Функция СоздатьНайтиСертификатЭП(ДвоичныеДанныеСертификата, Организация, НазваниеПрограммыКриптографии = Неопределено) Экспорт
	
	Попытка
		СертификатКриптографии = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
	Исключение
		ТекстСообщения = НСтр("ru = 'Ошибка чтения данных сертификата.
									|Подробности в журнале регистрации'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Операция = НСтр("ru = 'Чтение данных сертификата.'");
		ОбработатьИсключениеПоЭДНаСервере(Операция, ТекстОшибки, ТекстСообщения, 1);
		Возврат Неопределено;
	КонецПопытки;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка
	|ИЗ
	|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК СертификатыКлючейЭлектроннойПодписиИШифрования
	|ГДЕ
	|	СертификатыКлючейЭлектроннойПодписиИШифрования.Отпечаток = &Отпечаток";

	Отпечаток = Base64Строка(СертификатКриптографии.Отпечаток);
	Запрос.УстановитьПараметр("Отпечаток", Отпечаток);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	СертификатОписаниеДанных = Новый ТаблицаЗначений;
	СертификатОписаниеДанных.Колонки.Добавить("Свойство");
	СертификатОписаниеДанных.Колонки.Добавить("Значение");
	
	СертификатОбъект = Справочники.СертификатыКлючейЭлектроннойПодписиИШифрования.СоздатьЭлемент();
	СертификатОбъект.ДанныеСертификата = Новый ХранилищеЗначения(ДвоичныеДанныеСертификата);
	СертификатОбъект.Отпечаток = Отпечаток;
	СертификатОбъект.Добавил = ПользователиКлиентСервер.ТекущийПользователь();
	СертификатОбъект.Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	Если ЗначениеЗаполнено(НазваниеПрограммыКриптографии) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	ПрограммыЭлектроннойПодписиИШифрования.Ссылка
		               |ИЗ
		               |	Справочник.ПрограммыЭлектроннойПодписиИШифрования КАК ПрограммыЭлектроннойПодписиИШифрования
		               |ГДЕ
		               |	ПрограммыЭлектроннойПодписиИШифрования.ИмяПрограммы = &НазваниеПрограммыКриптографии";
		Запрос.УстановитьПараметр("НазваниеПрограммыКриптографии", НазваниеПрограммыКриптографии);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СертификатОбъект.Программа = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	СертификатОбъект.Организация = Организация;
	СертификатОбъект.Наименование = ЭлектроннаяПодписьКлиентСервер.ПредставлениеСертификата(СертификатКриптографии);
	
	СертификатОбъект.Подписание = СертификатКриптографии.ИспользоватьДляПодписи;
	СертификатОбъект.Шифрование = СертификатКриптографии.ИспользоватьДляШифрования;

	СтруктураСертификата = ЭлектроннаяПодписьКлиентСервер.ЗаполнитьСтруктуруСертификата(СертификатКриптографии);
	ОбновитьЗначение(СертификатОбъект.КомуВыдан,      СтруктураСертификата.КомуВыдан);
	ОбновитьЗначение(СертификатОбъект.КемВыдан,       СтруктураСертификата.КемВыдан);
	ОбновитьЗначение(СертификатОбъект.ДействителенДо, СтруктураСертификата.ДействителенДо);
	
	СвойстваСубъекта = ЭлектроннаяПодписьКлиентСервер.СвойстваСубъектаСертификата(СертификатКриптографии);
	ОбновитьЗначение(СертификатОбъект.Фамилия,   СвойстваСубъекта.Фамилия,     Истина);
	ОбновитьЗначение(СертификатОбъект.Имя,       СвойстваСубъекта.Имя,         Истина);
	ОбновитьЗначение(СертификатОбъект.Отчество,  СвойстваСубъекта.Отчество,    Истина);
	ОбновитьЗначение(СертификатОбъект.Должность, СвойстваСубъекта.Должность,   Истина);
	ОбновитьЗначение(СертификатОбъект.Фирма,     СвойстваСубъекта.Организация, Истина);
	
	СертификатОбъект.Записать();
	
	Возврат СертификатОбъект.Ссылка;
	
КонецФункции

// Функция получает данные по сертификатам, разрешенным для использования при подписании ЭД и авторизации
// на сервере оператора ЭДО. Поиск сертификатов выполняется как пересечение массивов сертификатов установленных в
// личном хранилище (клиента либо сервера, в зависимости от настроек в 1с), с сертификатами импортированными в 1с и
// зарегистрированными у оператора ЭДО (регистрация у оператора отражается в таб.части соглашения об обмене ЭД
// "СертификатыПодписейОрганизации"). При необходимости, выборка может быть ограничена массивом соглашений, по которым
// требуется определить параметры сертификатов.
//
// Параметры:
//  МассивПрофилейНастроекЭДО - массив ссылок - ссылки на профили настроек ЭДО, по которым требуется определить сертификаты;
//  СтМассивовСтруктурСертификатов - структура массивов - может содержать 2 элемента: МассивСтруктурСертификатовСервер
//    и МассивСтруктурСертификатовКлиент, соответственно массив структур сертификатов личного хранилища с сервера и
//    то же самое с клиента;
//  ВидЭД - перечисление ссылка - вид ЭД, для подписания которого требуется найти сертификат(ы). Имеет смысл только
//    при параметре ДляПодписи = Истина;
//  ДляПодписи - булево - Истина - требуется найти сертификаты для подписи. Имеет смысл только при заполненном
//    параметре ВидЭД;
//  ДляАвторизации - булево - Истина - требуется найти сертификаты для авторизации на сервере оператора ЭДО.
//
// Возвращаемое значение:
//  Структура соответствий - пустая, либо содержит 3 элемента:
//    СоотвСоглашенийИСертификатовПодписи
//    СоотвСоглашенийИСертификатовАвторизации
//    СоотвСертификатовИИхСтруктур
//
Функция СтруктураСоответствийСоглашенийИСертификатовАвторизации(
	Знач МассивПрофилейНастроекЭДО = Неопределено, Знач МассивЭД = Неопределено,
	Знач СтМассивовСтруктурСертификатов = Неопределено, Знач СоотвСертификатовИПаролей = Неопределено,
	Знач ТолькоБанки = Ложь, ПараметрыАутентификации = Неопределено) Экспорт
	
	СтруктураСоответствий = Новый Структура;
	
	ВыполнятьКриптооперацииНаСервере = ВыполнятьКриптооперацииНаСервере();
	// Если используется отложенная отправка, то искать сертификаты авторизации не надо.
	МассивОтпечатковКлиент = Новый Массив;
	МассивОтпечатковСервер = Новый Массив;
	
	ИспользоватьЭП = ПолучитьЗначениеФункциональнойОпции("ИспользоватьЭлектронныеПодписиЭД");
	Если ТипЗнч(СтМассивовСтруктурСертификатов) = Тип("Структура") Тогда
		СтМассивовСтруктурСертификатов.Свойство("МассивОтпечатковСервер", МассивОтпечатковСервер);
		СтМассивовСтруктурСертификатов.Свойство("МассивОтпечатковКлиент", МассивОтпечатковКлиент);
		Если ВыполнятьКриптооперацииНаСервере И НЕ ЗначениеЗаполнено(МассивОтпечатковСервер) И ИспользоватьЭП Тогда
			Попытка
				МассивОтпечатковСервер = МассивОтпечатковСертификатов();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	МассивОтпечатковСервер = ?(ЗначениеЗаполнено(МассивОтпечатковСервер), МассивОтпечатковСервер, Новый Массив);
	МассивОтпечатковКлиент = ?(ЗначениеЗаполнено(МассивОтпечатковКлиент), МассивОтпечатковКлиент, Новый Массив);
	
	МассивОтпечатковДляАвторизации = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОтпечатковДляАвторизации, МассивОтпечатковКлиент);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОтпечатковДляАвторизации, МассивОтпечатковСервер);
	
	Если (МассивОтпечатковСервер <> Неопределено И МассивОтпечатковСервер.Количество())
		ИЛИ (МассивОтпечатковКлиент <> Неопределено И МассивОтпечатковКлиент.Количество()) Тогда
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаСертификатов.Сертификат,
		|	ТаблицаСертификатов.ПарольПользователя
		|ПОМЕСТИТЬ ТаблицаСертификатов
		|ИЗ
		|	&ТаблицаСертификатов КАК ТаблицаСертификатов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПрофилиНастроекЭДО.Ссылка КАК ПрофильНастроекЭДО,
		|	ПрофилиНастроекЭДО.Ссылка.СпособОбменаЭД КАК СпособОбменаЭД,
		|	ПрофилиНастроекЭДО.Ссылка.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|	Сертификаты.Ссылка КАК СертификатПодписи,
		|	ТаблицаСертификатов.ПарольПользователя КАК ПарольПользователя,
		|	ВЫБОР
		|		КОГДА ТаблицаСертификатов.Сертификат ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЗапомнитьПарольКСертификату,
		|	ВЫБОР
		|		КОГДА ТаблицаСертификатов.Сертификат ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ПарольПолучен,
		|	Сертификаты.Отпечаток,
		|	Сертификаты.Отозван,
		|	Сертификаты.ДанныеСертификата КАК ДанныеСертификата,
		|	Сертификаты.ПользовательОповещенОСрокеДействия КАК ОповещенОСрокеДействия,
		|	Сертификаты.ДействителенДо КАК ДатаОкончания,
		|	НЕОПРЕДЕЛЕНО КАК ПрограммаБанка
		|ИЗ
		|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК ПрофилиНастроекЭДОСертификаты
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
		|				ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСертификатов КАК ТаблицаСертификатов
		|				ПО (ТаблицаСертификатов.Сертификат = Сертификаты.Ссылка)
		|			ПО ПрофилиНастроекЭДОСертификаты.Сертификат = Сертификаты.Ссылка
		|		ПО (ПрофилиНастроекЭДОСертификаты.Ссылка = ПрофилиНастроекЭДО.Ссылка)
		|ГДЕ
		|	НЕ Сертификаты.ПометкаУдаления
		|	И НЕ Сертификаты.Отозван
		|	И (Сертификаты.Пользователь = &ПустойПользователь
		|			ИЛИ Сертификаты.Пользователь = &ТекущийПользователь
		|			ИЛИ Сертификаты.Пользователь = &ПользовательНеУказан)
		|	И Сертификаты.Отпечаток В(&МассивОтпечатковДляАвторизации)
		|	И &СпособОбмена
		|	И &ИспользоватьЭП
		|	И НЕ ПрофилиНастроекЭДО.ПометкаУдаления
		|	И ПрофилиНастроекЭДО.Ссылка В(&МассивПрофилейНастроекЭДО)
		|	И ВЫБОР
		|			КОГДА Сертификаты.ДействителенДо = ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА ИСТИНА
		|			КОГДА РАЗНОСТЬДАТ(&ТекущаяДата, Сертификаты.ДействителенДо, ДЕНЬ) > 0
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПарольПолучен УБЫВ";
		
		Запрос.УстановитьПараметр("МассивОтпечатковДляАвторизации", МассивОтпечатковДляАвторизации);
		Запрос.УстановитьПараметр("ПустойПользователь",  Справочники.Пользователи.ПустаяСсылка());
		СвойстваНеуказанногоПользователя = ПользователиСлужебный.СвойстваНеуказанногоПользователя();
		Запрос.УстановитьПараметр("ПользовательНеУказан", СвойстваНеуказанногоПользователя.Ссылка);

		Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.АвторизованныйПользователь());
			Запрос.УстановитьПараметр("ИспользоватьЭП",     ИспользоватьЭП);
		Запрос.УстановитьПараметр("ТекущаяДата",         ТекущаяДатаСеанса());
		Если ТолькоБанки Тогда
			Запрос.УстановитьПараметр("СпособОбменаЭД", Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СпособОбмена",
				"ПрофилиНастроекЭДО.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка)");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПрофилиНастроекЭДО", "СоглашенияОбИспользованииЭД");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НЕОПРЕДЕЛЕНО", "СоглашенияОбИспользованииЭД.ПрограммаБанка");
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СпособОбмена",
			"(ПрофилиНастроекЭДО.Ссылка.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)
			|ИЛИ ПрофилиНастроекЭДО.Ссылка.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО))");
		КонецЕсли;
		
		СертификатыСПаролями = ПарольКСертификату();
		ТЗ_Сертификатов = Новый ТаблицаЗначений;
		ТЗ_Сертификатов.Колонки.Добавить("Сертификат",
			Новый ОписаниеТипов("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования"));
		ТЗ_Сертификатов.Колонки.Добавить("ПарольПользователя", Новый ОписаниеТипов("Строка"));
		Для Каждого Элемент Из СертификатыСПаролями Цикл
			НоваяСтрока = ТЗ_Сертификатов.Добавить();
			НоваяСтрока.Сертификат = Элемент.Ключ;
			НоваяСтрока.ПарольПользователя = Элемент.Значение;
		КонецЦикла;
		Запрос.УстановитьПараметр("ТаблицаСертификатов", ТЗ_Сертификатов);
		Если НЕ ЗначениеЗаполнено(МассивПрофилейНастроекЭДО) Тогда
			МассивПрофилейНастроекЭДО = Новый Массив;
		КонецЕсли;
		Если ЗначениеЗаполнено(МассивЭД) Тогда
			МассивПрофилейНастроекЭДО = Новый Массив;
			Если ТипЗнч(МассивЭД) = Тип("Массив") И МассивЭД.Количество() > 0 Тогда
				СоотвЭДИСтруктурыСоглашений = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивЭД, "ПрофильНастроекЭДО");
				Для Каждого ЭДВладелец Из СоотвЭДИСтруктурыСоглашений Цикл
					ПрофильНастроекЭДО = ЭДВладелец.Значение.ПрофильНастроекЭДО;
					Если МассивПрофилейНастроекЭДО.Найти(ПрофильНастроекЭДО) = Неопределено Тогда
						МассивПрофилейНастроекЭДО.Добавить(ПрофильНастроекЭДО);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Если МассивПрофилейНастроекЭДО.Количество() > 0 Тогда
			Запрос.УстановитьПараметр("МассивПрофилейНастроекЭДО", МассивПрофилейНастроекЭДО);
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И ПрофилиНастроекЭДО.Ссылка В(&МассивПрофилейНастроекЭДО)", "");
		КонецЕсли;
		Запрос.Текст = ТекстЗапроса;
		Выборка = Запрос.Выполнить().Выбрать();
		
		СоотвСоглашенийИМассиваСертификатовАвторизации = Новый Соответствие;
		СоотвСертификатовИИхСтруктур = Новый Соответствие;
		
		// Для авторизации, помимо сертификатов, попытаемся получить маркеры, по возможности расшифрованные.
		
		МенеджерКриптографииДоступенНаСервере = Ложь;
		Если ВыполнятьКриптооперацииНаСервере Тогда
			Попытка
				МенеджерКриптографии = ПолучитьМенеджерКриптографии();
				МенеджерКриптографииДоступенНаСервере = Истина;
			Исключение
				МенеджерКриптографииДоступенНаСервере = Ложь;
			КонецПопытки;
		КонецЕсли;
	
		ТекущийПрофильНастроекЭДО = Неопределено;
		Пока Выборка.Следующий() Цикл
			Если ТекущийПрофильНастроекЭДО <> Выборка.ПрофильНастроекЭДО Тогда
				МассивСертификатов = Новый Массив;
				ТекущийПрофильНастроекЭДО = Выборка.ПрофильНастроекЭДО;
			КонецЕсли;
			МассивСертификатов.Добавить(Выборка.СертификатПодписи);
			
			Если СоотвСоглашенийИМассиваСертификатовАвторизации.Получить(ТекущийПрофильНастроекЭДО) = Неопределено Тогда
				СоотвСоглашенийИМассиваСертификатовАвторизации.Вставить(ТекущийПрофильНастроекЭДО, МассивСертификатов);
			КонецЕсли;
			СтруктураСертификата = Новый Структура("СертификатПодписи, ПарольПолучен, ПарольПользователя, Отпечаток, Отозван,
													|ДанныеСертификата, ОповещенОСрокеДействия, ДатаОкончания, ЗапомнитьПарольКСертификату, ПрограммаБанка");
			ЗаполнитьЗначенияСвойств(СтруктураСертификата, Выборка);
		
			// Заполняем данные для авторизации.
			Если ТипЗнч(СтруктураСертификата.ДанныеСертификата) = Тип("ХранилищеЗначения") Тогда
				ПарольПолучен = Выборка.ПарольПолучен;
				СтруктураСертификата.Вставить("ПарольПользователя", Выборка.ПарольПользователя);
				СтруктураСертификата.Вставить("ПарольПолучен", ПарольПолучен);
				Расшифровывать = (ПарольПолучен И МенеджерКриптографииДоступенНаСервере);
				Если СтруктураСертификата.ПрограммаБанка = Перечисления.ПрограммыБанка.АсинхронныйОбмен Тогда
					Расшифровывать = Ложь;
					РеквизитыНастройкиЭДО = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
						ТекущийПрофильНастроекЭДО, "ИдентификаторОрганизации, АдресСервера");
					Маркер = ПолучитьМаркерБанка(РеквизитыНастройкиЭДО.АдресСервера,
						РеквизитыНастройкиЭДО.ИдентификаторОрганизации, СтруктураСертификата.ДанныеСертификата.Получить());
					Если Маркер = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
				Иначе
					
					Соединение = ЭлектронныеДокументыВнутренний.ПолучитьСоединение(Выборка.СпособОбменаЭД);
					СтруктураПараметровЗапросаМаркера = СтруктураСертификата;
					СтруктураПараметровЗапросаМаркера.Вставить("СпособОбменаЭД", Выборка.СпособОбменаЭД);
					СтруктураПараметровЗапросаМаркера.Вставить("ИдентификаторОрганизации", Выборка.ИдентификаторОрганизации);
					
					Маркер = ЭлектронныеДокументыВнутренний.ПолучитьМаркерОЭДО(СтруктураПараметровЗапросаМаркера, Соединение, Расшифровывать, ПараметрыАутентификации);
				КонецЕсли;
				Если ТипЗнч(Маркер) = Тип("ДвоичныеДанные") Тогда
					Если Расшифровывать Тогда
						СтруктураСертификата.Вставить("МаркерРасшифрованный", Маркер);
					Иначе
						СтруктураСертификата.Вставить("МаркерЗашифрованный", Маркер);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			СоотвСертификатовИИхСтруктур.Вставить(Строка(Выборка.СертификатПодписи.УникальныйИдентификатор()) + "_" + Выборка.ИдентификаторОрганизации,
				СтруктураСертификата);
			
		КонецЦикла;
		
		СтруктураСоответствий.Вставить("СоотвСоглашенийИМассиваСертификатовАвторизации", СоотвСоглашенийИМассиваСертификатовАвторизации);
		СтруктураСоответствий.Вставить("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур);
	КонецЕсли;
	
	Возврат СтруктураСоответствий;
	
КонецФункции

// Функция проверяет наличие в структуре расшифрованного маркера, если его нет, то пытается расшифровать
// зашифрованный маркер, если расшифровка прошла успешно, то расшифрованный маркер помещается в структуру.
//
// Параметры:
//  СтруктураСертификата - структура - содержит сертификат ЭП и его параметры, включая расшифрованный
//    или зашифрованный маркер.
//
// Возвращаемое значение:
//  Булево - Истина - в структуре есть расшифрованный маркер, иначе - Ложь.
//
Функция РасшифроватьМаркерИзСтруктурыСертификатаНаСервере(СтруктураСертификата) Экспорт
	
	Расшифрован = Ложь;
	
	Если ТипЗнч(СтруктураСертификата) = Тип("Структура") Тогда
		МаркерРасшифрованный = Неопределено;
		МаркерЗашифрованный = Неопределено;
		МенеджерКриптографии = Неопределено;
		Если ВыполнятьКриптооперацииНаСервере() Тогда
			Попытка
				МенеджерКриптографии = ПолучитьМенеджерКриптографии();
			Исключение
				МенеджерКриптографии = Неопределено;
			КонецПопытки;
		КонецЕсли;
		
		Если СтруктураСертификата.Свойство("МаркерРасшифрованный", МаркерРасшифрованный)
			И ЗначениеЗаполнено(МаркерРасшифрованный) Тогда
			Расшифрован = Истина;
		ИначеЕсли СтруктураСертификата.Свойство("МаркерЗашифрованный", МаркерЗашифрованный)
			И ЗначениеЗаполнено(МаркерЗашифрованный) И МенеджерКриптографии <> Неопределено Тогда
			Попытка
				СтруктураСертификата.Свойство("ПарольПользователя", МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу);
				Маркер = МенеджерКриптографии.Расшифровать(МаркерЗашифрованный);
				Если ЗначениеЗаполнено(Маркер) Тогда
					Расшифрован = Истина;
					СтруктураСертификата.Вставить("МаркерРасшифрованный", Маркер);
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Расшифрован;
	
КонецФункции

// Функция используется для минимизации серверных вызовов, в случае, когда есть несколько массивов ЭД,
// требующих подписания различными сертификатами и в настройках указано выполнение крипто операций на сервере.
//
// Параметры:
//  СоотвСертификатовИМассивовЭДКПодписи - Соответствие - ключ - справочник-ссылка СертификатЭП,
//    значение - массив ссылок на подписываемые ЭД. После подписания ЭД, возможно потребуется их отправка, поэтому
//    в случае, если подписать массив ЭД не удалось - то он удаляется из соответствия.
//  СоотвСертификатовИИхСтруктур - Соответствие - ключ - справочник-ссылка СертификатЭП,
//    значение - структура параметров сертификата ЭП.
//  МассивНеПодписанныхЭД - Массив либо Неопределено, в этой переменной в вызывающую процедуру возвращается массив ЭД,
//    которые не были подписаны.
//
// Возвращаемое значение:
//  Число - количество подписанных ЭД.
//
Функция ПодписатьЭДНаСервере(СоотвСертификатовИМассивовЭДКПодписи,
								Знач СоотвСертификатовИИхСтруктур,
								МассивНеПодписанныхЭД = Неопределено) Экспорт
	
	КолПодписанных = 0;
	Если ТипЗнч(МассивНеПодписанныхЭД) <> Тип("Массив") Тогда
		МассивНеПодписанныхЭД = Новый Массив;
	КонецЕсли;
	Если ТипЗнч(СоотвСертификатовИМассивовЭДКПодписи) = Тип("Соответствие")
		И СоотвСертификатовИМассивовЭДКПодписи.Количество() > 0
		И ТипЗнч(СоотвСертификатовИИхСтруктур) = Тип("Соответствие")
		И СоотвСертификатовИИхСтруктур.Количество() > 0 Тогда
		МассивКУдалению = Новый Массив;
		Для Каждого Элемент Из СоотвСертификатовИМассивовЭДКПодписи Цикл
			Сертификат = Элемент.Ключ;
			МассивЭД = Элемент.Значение;
			Если НЕ (ЗначениеЗаполнено(Сертификат) И ЗначениеЗаполнено(МассивЭД)) Тогда
				МассивКУдалению.Добавить(Сертификат.Ключ);
				Для Каждого НеПодписанныйЭД Из МассивЭД Цикл
					МассивНеПодписанныхЭД.Добавить(НеПодписанныйЭД);
				КонецЦикла;
				Продолжить;
			КонецЕсли;
			СтруктураСертификата = СоотвСертификатовИИхСтруктур.Получить(Сертификат);
			Если НЕ ЗначениеЗаполнено(СтруктураСертификата) Тогда
				МассивКУдалению.Добавить(Сертификат.Ключ);
				Для Каждого НеПодписанныйЭД Из МассивЭД Цикл
					МассивНеПодписанныхЭД.Добавить(НеПодписанныйЭД);
				КонецЦикла;
				Продолжить;
			КонецЕсли;
			Подписан = ПодписатьЭДОпределеннымСертификатом(МассивЭД, Сертификат, СтруктураСертификата, МассивНеПодписанныхЭД);
			Если Подписан > 0 Тогда
				КолПодписанных = КолПодписанных + Подписан;
			КонецЕсли;
		КонецЦикла;
		Для Каждого Элемент Из МассивКУдалению Цикл
			СоотвСертификатовИМассивовЭДКПодписи.Удалить(Элемент);
		КонецЦикла;
	КонецЕсли;
	
	Возврат КолПодписанных;
	
КонецФункции

// Перед формированием служебных ЭД (извещений о получении ЭД), из массива ЭД удаляются
// те ЭД, для которых извещения формироваться не должны (например, при получении ТОРГ-12
// титул покупателя при обмене по регламенту 2.0).
//
// Параметры:
//  МассивЭД - Массив электронных документов, на основании которых должны быть сформированы извещения.
//
Процедура УдалитьИзМассиваНеОбрабатываемыеЭД(МассивЭД) Экспорт
	
	РеквизитыОбъектов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивЭД, "ВерсияРегламентаЭДО, ВидЭД, СоглашениеЭД");
	Для Каждого Элемент Из РеквизитыОбъектов Цикл
		Значение = Элемент.Значение;
		ВерсияФорматаПакета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Значение.СоглашениеЭД, "ВерсияФорматаПакета");
		
		Если (Значение.ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20
			Или ВерсияФорматаПакета = Перечисления.ВерсииФорматаПакетаЭД.Версия30)
			
			И (Значение.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
				ИЛИ Значение.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
				ИЛИ Значение.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель) Тогда
				
			МассивЭД.Удалить(МассивЭД.Найти(Элемент.Ключ));
			
		КонецЕсли;
		
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает соответствие с данными о доступных сертификатах.
//
// Параметры:
//   МассивСтруктурСертификатовКлиента - Массив - массив структур сертификатов,
//      установленных в личном хранилище на компьютере пользователя.
//   НастройкаЭДО - СправочникСсылка.СоглашенияОбОбменеЭД - будут выбраны сертификаты,
//                  зарегистрированные в указанном соглашении и доступные текущему пользователю.
//   -----//----- - СправочникСсылка.ПрофилиНастроекЭДО - будут выбраны сертификаты,
//                  зарегистрированные в указанном профиле и доступные текущему пользователю.
//   -----//----- - Неопределено - будут выбраны сертификаты доступные текущему пользователю.
//   ДляАвторизации - Булево - если Истина - значит выполняется выбор сертификатов для выполнения
//                  аутентификации на сервере оператора ЭДО.
//
// Возвращаемое значение:
//  Соответствие:
//     Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования.
//     Значение - Структура - данные сертификата.
//
Функция СоответствиеДоступныхСертификатовИПараметров(Знач МассивОтпечатковСертификатов, Знач НастройкаЭДО = Неопределено) Экспорт
	
	Если ВыполнятьКриптооперацииНаСервере() Тогда
		МассивОтпечатковСервера = МассивОтпечатковСертификатов();
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОтпечатковСертификатов, МассивОтпечатковСервера);
	КонецЕсли;
	МассивСтруктур = ЭлектронныеДокументыСлужебный.МассивСтруктурДоступныхДляПодписиСертификатов(
														МассивОтпечатковСертификатов, НастройкаЭДО);
	
	СоответствиеСертификатовИПаролей = ПарольКСертификату();
	ДанныеВозврата = Новый Соответствие;
	Если ТипЗнч(МассивСтруктур) = Тип("Массив") Тогда
		Для Каждого Элемент Из МассивСтруктур Цикл
			ПарольКСертификату = СоответствиеСертификатовИПаролей.Получить(Элемент.Сертификат);
			Если ПарольКСертификату <> Неопределено Тогда
				Элемент.ПарольПользователя = ПарольКСертификату;
				Элемент.ПарольПолучен = Истина;
			КонецЕсли;
			ДанныеВозврата.Вставить(Элемент.Сертификат, Элемент);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеВозврата;
	
КонецФункции

// Получает массив структур личных сертификатов для показа в диалоге выбора сертификатов для подписи или шифрования
//
// Параметры
//  ТолькоЛичные  - Булево - если Ложь, то берутся также и сертификаты получателей 
//
// Возвращаемое значение:
//   Массив  - массив структур с полями сертификата
Функция МассивОтпечатковСертификатов() Экспорт
	
	МассивОтпечатков = Новый Массив;
	
	Если НЕ ВыполнятьКриптооперацииНаСервере() Тогда
		Возврат МассивОтпечатков;
	КонецЕсли;
	
	Отказ = Ложь;
	МенеджерКриптографии = ПолучитьМенеджерКриптографии(Отказ);
	Если Отказ Тогда
		Возврат МассивОтпечатков;
	КонецЕсли;
	
	ТекущаяДата = ТекущаяДатаСеанса(); // Используется для выявления истекших сертификатов, которые хранятся на клиентском компьютере.
	
	Хранилище = МенеджерКриптографии.ПолучитьХранилищеСертификатов(
		ТипХранилищаСертификатовКриптографии.ПерсональныеСертификаты);
	СертификатыХранилища = Хранилище.ПолучитьВсе();
	
	Для Каждого Сертификат Из СертификатыХранилища Цикл
		Если Сертификат.ДатаОкончания < ТекущаяДата Тогда
			Продолжить; // Пропуск истекших сертификатов.
		КонецЕсли;
		
		СтруктураСертификата = ЭлектроннаяПодписьКлиентСервер.ЗаполнитьСтруктуруСертификата(Сертификат);
		Если СтруктураСертификата <> Неопределено Тогда
			СтрокаОтпечатка = Base64Строка(Сертификат.Отпечаток);
			Если МассивОтпечатков.Найти(СтрокаОтпечатка) = Неопределено Тогда
				МассивОтпечатков.Добавить(СтрокаОтпечатка);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивОтпечатков;
	
КонецФункции


#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Работа с версиями

Процедура УдалитьСтаруюВерсиюЭД(ЗаписьНабора)
	
	СтруктураВерсии =  ЭлектронныеДокументыСлужебный.ПолучитьСтруктуруВерсииЭД(ЗаписьНабора.СсылкаНаОбъект);
	
	Если ЗначениеЗаполнено(СтруктураВерсии.СсылкаНаДокумент)
		И (СтруктураВерсии.СтатусЭД = Перечисления.СтатусыЭД.Сформирован
		ИЛИ СтруктураВерсии.СтатусЭД = Перечисления.СтатусыЭД.Утвержден) Тогда
		
		ДокументОбъект = СтруктураВерсии.СсылкаНаДокумент.ПолучитьОбъект();
		ДокументОбъект.ПометкаУдаления = Истина;
		ДокументОбъект.Записать();
		
		// Удалим подчиненные электронные доп. файлы.
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.Ссылка
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец = &ЭлектронныйДокументВладелец
		|	И НЕ ЭДПрисоединенныеФайлы.ПометкаУдаления";
		Запрос.УстановитьПараметр("ЭлектронныйДокументВладелец", СтруктураВерсии.СсылкаНаДокумент);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.ПометкаУдаления = Истина;
			ДокументОбъект.Записать();
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СостояниеВерсииЭД(СсылкаНаВладельца)
	
	ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ПустаяСсылка();
	СтруктураВерсииЭД =  ЭлектронныеДокументыСлужебный.ПолучитьСтруктуруВерсииЭД(СсылкаНаВладельца);
	
	Если СтруктураВерсииЭД.Свойство("СостояниеВерсииЭД") Тогда
		Комментарий = Неопределено;
		ДобавитьПричинуЗакрытия = (СтруктураВерсииЭД.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно);
		Если ДобавитьПричинуЗакрытия Тогда
			СтруктураВерсииЭД.Свойство("КомментарийРС", Комментарий);
			Причина = СтрЗаменить(НСтр("ru = '(причина: %1)'"), "%1", ?(ЗначениеЗаполнено(Комментарий), Комментарий, "не указана"));
			ВозвращаемоеЗначение = Строка(СтруктураВерсииЭД.СостояниеВерсииЭД) + Символы.НПП + Причина;
		Иначе
			ВозвращаемоеЗначение = Строка(СтруктураВерсииЭД.СостояниеВерсииЭД);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПолучитьТекстСводногоСостоянияЭД(СсылкаНаВладельца)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстСводногоСостояния = "";
	
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(СсылкаНаВладельца);
	ТаблицаДанных = ПолучитьДанныеЭДПоВладельцам(МассивСсылок);

	Если ТаблицаДанных.Количество() > 0 Тогда
		Строка = ТаблицаДанных[0];
		
		ТекстСНашейСтороны = "";
		ТекстСоСтороныДругогоУчастника = "";
		
		Если Строка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно Тогда
			ТекстСводногоСостояния = НСтр("ru = 'Закрыт принудительно.'");
		Иначе
			Если ЗначениеЗаполнено(Строка.ДействияСНашейСтороны)
				И Строка.ДействияСНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия Тогда
				
				ТекстСНашейСтороны = НСтр("ru = 'с нашей стороны'");
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.ДействияСоСтороныДругогоУчастника)
				И Строка.ДействияСоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия Тогда
				
				ТекстСоСтороныДругогоУчастника = НСтр("ru = 'со стороны других участников'");
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекстСНашейСтороны) ИЛИ ЗначениеЗаполнено(ТекстСоСтороныДругогоУчастника) Тогда
				
				ТекстСводногоСостояния = НСтр("ru = 'Требуются действия'")+ " " + ТекстСНашейСтороны
					+ ?(ЗначениеЗаполнено(ТекстСНашейСтороны) И ЗначениеЗаполнено(ТекстСоСтороныДругогоУчастника), " и ", "")
					+ ТекстСоСтороныДругогоУчастника;
			ИначеЕсли ЗначениеЗаполнено(Строка.ДействияСНашейСтороны)
				И Строка.ДействияСНашейСтороны = Перечисления.СводныеСостоянияЭД.ВсеВыполнено
				И ЗначениеЗаполнено(Строка.ДействияСоСтороныДругогоУчастника)
				И Строка.ДействияСоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ВсеВыполнено Тогда
				
				Если Строка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершен Тогда
					ТекстСводногоСостояния = НСтр("ru = 'Обмен завершен'");
				ИначеЕсли Строка.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением Тогда
					ТекстСводногоСостояния = НСтр("ru = 'Обмен завершен (с исправлением)'");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстСводногоСостояния;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Подпись электронных документов 

// Проверяет все ли необходимые подписи установлены перед отправкой контрагенту.
// 
// Параметры:
//  ЭлектронныйДокумент - ссылка на присоединенный файл.
//
Функция ЭлектронныйДокументПолностьюПодписан(ЭлектронныйДокумент)
	
	ФлагПодписанПолностью = Истина;
	
	Если ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
		Возврат ФлагПодписанПолностью;
	КонецЕсли;
	
	Если ЭлектронныйДокумент.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
		ТЗ = ЭлектронныйДокумент.ЭлектронныеПодписи.Выгрузить(, "Отпечаток");
		ТЗ.Свернуть("Отпечаток");
		ФлагПодписанПолностью = ТЗ.Количество() > 1;
	ИначеЕсли ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение
		ИЛИ ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ПлатежноеТребование Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Сертификаты.Ссылка КАК Сертификат,
		|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.Отпечаток КАК Отпечаток
		|ПОМЕСТИТЬ УстановленныеПодписи
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы.ЭлектронныеПодписи КАК ЭДПрисоединенныеФайлыЭлектронныеПодписи
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
		|		ПО ЭДПрисоединенныеФайлыЭлектронныеПодписи.Отпечаток = Сертификаты.Отпечаток
		|ГДЕ
		|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.Ссылка = &ЭД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Сертификат КАК Сертификат
		|ИЗ
		|	Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации
		|ГДЕ
		|	СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Ссылка = &Соглашение
		|	И НЕ СоглашенияОбИспользованииЭДСертификатыПодписейОрганизации.Сертификат В
		|				(ВЫБРАТЬ
		|					УстПодп.Сертификат
		|				ИЗ
		|					УстановленныеПодписи КАК УстПодп)";
		
		Запрос.УстановитьПараметр("Соглашение", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент,"СоглашениеЭД"));
		Запрос.УстановитьПараметр("ЭД", ЭлектронныйДокумент);
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			ФлагПодписанПолностью = Ложь;
		КонецЕсли;
	Иначе
		// Массив отпечатков всех установленных ЭП на ЭД
		МассивОтпечатковСертификатов = ЭлектронныйДокумент.ЭлектронныеПодписи.ВыгрузитьКолонку("Отпечаток");
		
		// Выберем все действующие сертификаты по тек.организации и тек.виду ЭД,
		// совпадающие с сертификатами установленных ЭП.
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Сертификаты.Ссылка КАК СертификатЭП
		|ИЗ
		|	РегистрСведений.ПодписываемыеВидыЭД КАК ВидыЭДЭП
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				ПрофилиЭДОСертификаты.Сертификат КАК Сертификат
		|			ИЗ
		|				Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|					ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК ПрофилиЭДОСертификаты
		|					ПО ЭДПрисоединенныеФайлы.ПрофильНастроекЭДО = ПрофилиЭДОСертификаты.Ссылка
		|			ГДЕ
		|				ЭДПрисоединенныеФайлы.Ссылка = &Ссылка
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				СоглашенияЭДСертификаты.Сертификат
		|			ИЗ
		|				Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|					ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СоглашенияЭДСертификаты
		|					ПО ЭДПрисоединенныеФайлы.СоглашениеЭД = СоглашенияЭДСертификаты.Ссылка
		|			ГДЕ
		|				ЭДПрисоединенныеФайлы.Ссылка = &Ссылка) КАК СертификатыИзНастроекИПрофилей
		|			ПО СертификатыИзНастроекИПрофилей.Сертификат = Сертификаты.Ссылка
		|		ПО ВидыЭДЭП.СертификатЭП = Сертификаты.Ссылка
		|ГДЕ
		|	ВидыЭДЭП.ВидЭД = &ВидДокумента
		|	И Сертификаты.Отпечаток В(&МассивОтпечатковСертификатов)
		|	И НЕ Сертификаты.Отозван
		|	И НЕ Сертификаты.ПометкаУдаления";
		Запрос.УстановитьПараметр("МассивОтпечатковСертификатов", МассивОтпечатковСертификатов);
		Запрос.УстановитьПараметр("Ссылка",                       ЭлектронныйДокумент);
		Запрос.УстановитьПараметр("ВидДокумента",                 ЭлектронныйДокумент.ВидЭД);
		
		ФлагПодписанПолностью = НЕ Запрос.Выполнить().Пустой();
		
	КонецЕсли;
	
	ЭлектронныеДокументыПереопределяемый.ЭлектронныйДокументПолностьюПодписан(ЭлектронныйДокумент, ФлагПодписанПолностью);
	
	Возврат ФлагПодписанПолностью;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обмен через электронную почту

Функция ОтправитьЭлектронноеПисьмо(ПодготовленныеДокументы, АдресКаталогаСВложениями)
	
	СоответствиеВложений = СформироватьСоответствиеВложений(АдресКаталогаСВложениями);
	Результат = ПередатьПисьмоСВложениями(ПодготовленныеДокументы, СоответствиеВложений);
	УдалитьФайлы(АдресКаталогаСВложениями);
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьСоответствиеВложений(КаталогВложений, ТолькоПодписи = Ложь)
	
	СписокДоступныхРасширений = СформироватьСписокРасширенийСертификатов();
	СоответствиеВозврата = Новый Соответствие;
	СписокВложений = НайтиФайлы(КаталогВложений, "*");
	Для Каждого ФайлВложений Из СписокВложений Цикл
		Если ТолькоПодписи И Найти(ФайлВложений.Расширение, СписокДоступныхРасширений) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ФайлВложений.ЭтоФайл() Тогда
			СоответствиеВозврата.Вставить(ФайлВложений.Имя, Новый ДвоичныеДанные(ФайлВложений.ПолноеИмя));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СоответствиеВозврата;
	
КонецФункции

// Отправляет письмо с вложениями по пакету ЭД.
//
// Параметры:
//  Конверт - Ссылка на документ "ПакетЭД" - подготовленный к отправке пакет электронных документов,
//  СоответствиеВложений - Соответствие, список вложенных файлов в пакет электронных документов.
//
Функция ПередатьПисьмоСВложениями(ПакетЭД, СоответствиеВложений)
	
	РеквизитыПакетаЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
							ПакетЭД,
							"Отправитель, Получатель, АдресРесурсаКонтрагента, АдресРесурсаОрганизации, ПрофильНастроекЭДО");
	Пароль = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыПакетаЭД.АдресРесурсаОрганизации, "Пароль");
	
	Получатель  = РеквизитыПакетаЭД.Получатель;
	Отправитель = РеквизитыПакетаЭД.Отправитель;
	
	ПараметрыОтправки = Новый Структура();
	ПараметрыОтправки.Вставить("Кому",     РеквизитыПакетаЭД.АдресРесурсаКонтрагента);
	ПараметрыОтправки.Вставить("Тема",     СформироватьТемуПисьма(Отправитель, Получатель));
	ПараметрыОтправки.Вставить("Тело",     );
	ПараметрыОтправки.Вставить("Вложения", СоответствиеВложений);
	ПараметрыОтправки.Вставить("Пароль",   Пароль);
	
	Попытка
		РаботаСПочтовымиСообщениями.ОтправитьСообщение(РеквизитыПакетаЭД.АдресРесурсаОрганизации, ПараметрыОтправки);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Текст = НСтр("ru = 'Ошибка при отправке сообщения на сервер электронной почты по профилю настроек ЭДО %1.
						|%2'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																	Текст,
																	РеквизитыПакетаЭД.ПрофильНастроекЭДО,
																	ТекстОшибки);
		
		ШаблонСообщения = НСтр("ru = 'Ошибка при отправке эл.документов по профилю настроек ЭДО: %1, способ обмена: %2.
								|(подробности см. в Журнале регистрации).'"); 
								

		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонСообщения,
								РеквизитыПакетаЭД.ПрофильНастроекЭДО,
								Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту);
		ВидОперации = НСтр("ru = 'Отправка эл.документов'");
		ОбработатьИсключениеПоЭДНаСервере(
							ВидОперации,
							ТекстОшибки,
							ТекстСообщения);
 		Возврат 0;
	КонецПопытки;
	
	Возврат 1;
	
КонецФункции

Функция СформироватьТемуПисьма(Отправитель, Получатель)
	
	Возврат Нстр("ru = 'Обмен эл.документами:'")+ " " + Отправитель + ?(ЗначениеЗаполнено(Получатель), " -> " + Получатель, "");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработка электронных документов

// Устанавливает признак того, что электронный документ был утвержден.
//
// Параметры:
//  ПрисоединенныйФайл - ссылка на электронный документ, который необходимо обработать.
//  НовыйЭД - ссылка на электронный документ, если при утверждении был создан новый электронный документ.
//
Процедура УстановитьПризнакУтвержден(ПрисоединенныйФайл, НовыйЭД)
	
	// Проверим, все ли необходимые условия выполнены
	Если ЭлектронныеДокументыПереопределяемый.ЭлектронныйДокументГотовКУтверждению(ПрисоединенныйФайл) Тогда
		Попытка
			
			НовыйСтатусЭД = ЭлектронныеДокументыСлужебный.ПолучитьДопустимыйСтатусЭД(
																	Перечисления.СтатусыЭД.Утвержден,
																	ПрисоединенныйФайл);
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("СтатусЭД", НовыйСтатусЭД);
			СтруктураПараметров.Вставить("Изменил",  Пользователи.АвторизованныйПользователь());
			
			ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ПрисоединенныйФайл, СтруктураПараметров, Ложь);
			
			ЭлектронныеДокументыПереопределяемый.НазначенСтатусУтвержден(ПрисоединенныйФайл);
		Исключение
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
				+ НСтр("ru = ' (подробности см. в Журнале регистрации).'");
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'утверждение ЭД'"), ТекстОшибки, ТекстСообщения);
		КонецПопытки;
	КонецЕсли;
	
	Если ТранзакцияАктивна() И ПрисоединенныйФайл.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
		И (ПрисоединенныйФайл.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
		ИЛИ ПрисоединенныйФайл.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
		ИЛИ ПрисоединенныйФайл.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель) Тогда
		
		Если ПрисоединенныйФайл.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
			ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель;
		ИначеЕсли ПрисоединенныйФайл.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
			ВидЭД = Перечисления.ВидыЭД.АктЗаказчик;
		ИначеЕсли ПрисоединенныйФайл.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
			ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель;
		КонецЕсли;
		
		ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрисоединенныйФайл, "ВладелецФайла");
		Если ОпределитьДействующуюНастройкуЭДО(ВладелецФайла,, ВидЭД) Тогда
			
			Если ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель Тогда
				НовыйЭД = ЭлектронныеДокументыВнутренний.СформироватьЭДТорг12Покупатель(ПрисоединенныйФайл);
			ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктЗаказчик Тогда
				НовыйЭД = ЭлектронныеДокументыВнутренний.СформироватьЭДАкт501Заказчик(ПрисоединенныйФайл);
			ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
				НовыйЭД = ЭлектронныеДокументыВнутренний.СформироватьЭДКорДокументаПолучатель(ПрисоединенныйФайл);
			КонецЕсли;
			
			Если НовыйЭД = Неопределено Тогда
				ОтменитьТранзакцию();
			Иначе
				МассивЭД = Новый Массив;
				МассивЭД.Добавить(НовыйЭД);
				
				НастройкиОбмена = ЭлектронныеДокументыСлужебный.НастройкиОбменаЭД(НовыйЭД);
				ЭлектронныеДокументыСлужебный.СоздатьДокументыПакетовЭД(МассивЭД, НастройкиОбмена.ИспользоватьПодпись);
			КонецЕсли;
			
		Иначе
			
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Производит удаление из массива объектов для которых запрещено формирование новых ЭД.
//
// Параметры
//  МассивСсылок  - Массив - массив ссылок
//
Процедура УдалитьНедоступныеДляФормированияЭДОбъекты(МассивСсылок)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.СсылкаНаОбъект
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект В(&МассивСсылок)
	|	И ВЫБОР
	|			КОГДА СостоянияЭД.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СчетФактура)
	|					ИЛИ СостоянияЭД.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.КорректировочныйСчетФактура)
	|					ИЛИ СостоянияЭД.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПлатежноеПоручение)
	|					ИЛИ СостоянияЭД.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПлатежноеТребование)
	|				ТОГДА СостоянияЭД.ЭлектронныйДокумент.СтатусЭД <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Отклонен)
	|						И СостоянияЭД.ЭлектронныйДокумент.СтатусЭД <> ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.НеСформирован)
	|			ИНАЧЕ НЕ(СостоянияЭД.ЭлектронныйДокумент.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Сформирован)
	|						ИЛИ СостоянияЭД.ЭлектронныйДокумент.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Утвержден)
	|						ИЛИ СостоянияЭД.ЭлектронныйДокумент.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Подписан)
	|						ИЛИ СостоянияЭД.ЭлектронныйДокумент.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.ЧастичноПодписан)
	|						ИЛИ СостоянияЭД.ЭлектронныйДокумент.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.ОшибкаПередачи))
	|		КОНЕЦ";
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		Индекс = МассивСсылок.Найти(Результат.СсылкаНаОбъект);
		МассивСсылок.Удалить(Индекс);
		ШаблонСообщения = НСтр("ru='Для документа %1 уже есть актуальный электронный документ.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Результат.СсылкаНаОбъект);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЦикла;

КонецПроцедуры

// Определяет необходимость выполнения какого-либо действия
// с электронным документом с нашей стороны, либо ожидание действия получателя,
// на основании статуса текущего электронного документа.
//
// Параметры:
//  СсылкаНаЭД - СправочникСсылка.ЭДПрисоединенныеФайлы, ссылка на электронный документ.
//
Функция ОпределитьСводнуюИнформациюПоСтатусуЭД(СсылкаНаЭД) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаЭД, "ВидЭД, СтатусЭД, НаправлениеЭД,
	|ВерсияРегламентаЭДО, СоглашениеЭД, ПрофильНастроекЭДО, ЭлектронныйДокументВладелец, ВладелецФайла");
	
	СтруктураДействий = Новый Структура("СНашейСтороны, СоСтороныДругогоУчастника",
		Перечисления.СводныеСостоянияЭД.ДействийНеТребуется, Перечисления.СводныеСостоянияЭД.ДействийНеТребуется);
	Если СсылкаНаЭД <> Неопределено Тогда
		
		Если ПараметрыЭД.ВидЭД <> Перечисления.ВидыЭД.СчетФактура
		   И ПараметрыЭД.ВидЭД <> Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
			
			Если ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Сформирован
				ИЛИ ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден
				ИЛИ ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Подписан
				ИЛИ ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Получен
				ИЛИ ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ПодготовленКОтправке
				ИЛИ ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ПодготовленоПодтверждение Тогда
				
				СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				
				// Если обмен прямой, и получен ответный ЭД на отправленный ЭД, то больше не требуется действий с нашей стороны.
				Если ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Получен
					И ЗначениеЗаполнено(ПараметрыЭД.ЭлектронныйДокументВладелец) Тогда
					
					СпособОбменаЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЭД.ПрофильНастроекЭДО, "СпособОбменаЭД");
					Если СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезКаталог
						ИЛИ СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезFTP Тогда
						
						СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору
				ИЛИ ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
				
				СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
			КонецЕсли;
			
			Если (ПараметрыЭД.ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20
				И (ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель))
				ИЛИ (НЕ ПараметрыЭД.ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20
					И ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении) Тогда
				
				СостояниеЭД = Неопределено;
				Если ЭлектронныеДокументыСлужебный.ЕстьНеотправленноеПодтверждение(ПараметрыЭД.ВладелецФайла, СостояниеЭД) Тогда
					СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				Иначе
					СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору
				 И (ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель) Тогда
				СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
			КонецЕсли;
			
			Если ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Доставлен
				И ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
				И (ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ) Тогда
				СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
			КонецЕсли;
			
			Если ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании Тогда
				СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
			ИначеЕсли ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.СформированоПредложениеОбАннулировании
				ИЛИ ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ОтправленоПредложениеОбАннулировании Тогда
				СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
			КонецЕсли;
			
		Иначе
			МассивЭД = Новый Массив;
			МассивПодчиненныхЭД = Новый Массив;
			МассивЭД.Добавить(СсылкаНаЭД);
			ВыбратьПодчиненныеЭД(МассивЭД, МассивПодчиненныхЭД);
			
			СтруктураФлагов = Новый Структура;
			СтруктураФлагов.Вставить("НаправлениеЭСФ",   ПараметрыЭД.НаправлениеЭД);
			СтруктураФлагов.Вставить("СтатусЭСФ",        ПараметрыЭД.СтатусЭД);
			СтруктураФлагов.Вставить("ОтправленИПУУ",    Ложь);
			СтруктураФлагов.Вставить("ЭСФОтправлен",     (ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору
				ИЛИ ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Отправлен
				ИЛИ ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Доставлен));
			СтруктураФлагов.Вставить("ПДППолучен",       Ложь);
			СтруктураФлагов.Вставить("ПДОПолучен",       Ложь);
			СтруктураФлагов.Вставить("ПДОИППолучен",     Ложь);
			СтруктураФлагов.Вставить("ИПЭСФОтправлен",   Ложь);
			СтруктураФлагов.Вставить("ИПЭСФПолучен",     Ложь);
			СтруктураФлагов.Вставить("ИПУУПолучен",      Ложь);
			СтруктураФлагов.Вставить("ИПУУОтправлен",    Ложь);
			СтруктураФлагов.Вставить("ИППДПОтправлен",   Ложь);
			СтруктураФлагов.Вставить("ИППДООтправлен",   Ложь);
			СтруктураФлагов.Вставить("ИППДОИПОтправлен", Ложь);
			СтруктураФлагов.Вставить("УУОтправлен",      Ложь);
			
			Для Каждого Элемент Из МассивПодчиненныхЭД Цикл
				Если Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ Тогда
					
					СтруктураФлагов.ПДППолучен = Истина;
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ Тогда
					
					СтруктураФлагов.ПДОПолучен = Истина;
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ Тогда
					
					СтруктураФлагов.ПДОИППолучен = Истина;
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИПЭСФОтправлен = Истина;
					ИначеЕсли Элемент.СтатусЭД = Перечисления.СтатусыЭД.Получен Тогда
						СтруктураФлагов.ИПЭСФПолучен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИПУУОтправлен = Истина;
					Иначе
						СтруктураФлагов.ИПУУПолучен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДПЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИППДПОтправлен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИППДООтправлен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИППДОИПОтправлен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.УУОтправлен = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
				
				Если ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем
					ИЛИ НЕ СтруктураФлагов.ЭСФОтправлен ИЛИ СтруктураФлагов.ПДППолучен И НЕ СтруктураФлагов.ИППДПОтправлен Тогда
					
					СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				КонецЕсли;
				
				Если ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем Тогда
					
					СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.Отклонен;
				ИначеЕсли (ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору
					ИЛИ ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Отправлен)
					И (НЕ СтруктураФлагов.ПДППолучен ИЛИ НЕ СтруктураФлагов.ИПЭСФПолучен) Тогда
					
					СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				КонецЕсли;
			Иначе
				Если ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен И СтруктураФлагов.УУОтправлен Тогда
					
					СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.Отклонен;
				ИначеЕсли СтруктураФлагов.ПДОПолучен И НЕ СтруктураФлагов.ИППДООтправлен
					ИЛИ ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Получен
					ИЛИ ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден И НЕ СтруктураФлагов.ИПЭСФОтправлен Тогда
					
					СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				КонецЕсли;
				
				Если ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен ИЛИ НЕ СтруктураФлагов.ПДОПолучен
					ИЛИ СтруктураФлагов.ИПЭСФОтправлен И НЕ СтруктураФлагов.ПДОИППолучен
					ИЛИ ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен И НЕ СтруктураФлагов.ИПУУПолучен Тогда
					
					СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется
		И СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется Тогда
		
		СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ВсеВыполнено;
		СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ВсеВыполнено;
	КонецЕсли;
	
	Возврат СтруктураДействий;
	
КонецФункции

// Рекурсивная процедура, получает все подчиненные электронные документы с любой глубиной вложенности.
//
// Параметры:
//  МассивЭДВладельцев - массив ссылок на электронные документы владельцы (для текущей итерации - владелец выбираемых ЭД).
//  МассивЭД - массив подчиненных электронных документов (с каждой итерацией увеличивается на количество найденных ЭД).
//             Электронный документ - владелец добавляется в этот массив отдельно (до или после вызова данной процедуры).
//
Процедура ВыбратьПодчиненныеЭД(Знач МассивЭДВладельцев, МассивЭД)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец В(&МассивЭДВладельцев)";
	Запрос.УстановитьПараметр("МассивЭДВладельцев", МассивЭДВладельцев);
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		МассивЭДВладельцев = Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
		Для Каждого Эл Из МассивЭДВладельцев Цикл
			
			МассивЭД.Добавить(Эл);
			
		КонецЦикла;
		ВыбратьПодчиненныеЭД(МассивЭДВладельцев, МассивЭД);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОпределитьНаправление(СтруктураФайлаЭД)
	
	Если (СтруктураФайлаЭД.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара)
		И СтруктураФайлаЭД.ПризнакПродавца Тогда
			Возврат Перечисления.НаправленияЭД.Исходящий;
	КонецЕсли;
	
	Возврат Перечисления.НаправленияЭД.Входящий;
	
КонецФункции

Функция МожноОтклонитьЭтотЭД(СсылкаНаЭД, ФормироватьУОУ = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаЭД, "СтатусЭД, ВидЭД, НаправлениеЭД, СоглашениеЭД");
	
	Если ЭДОтклонен(ПараметрыЭД.СтатусЭД) Тогда
		ВозвращаемоеЗначение = Ложь;
	ИначеЕсли ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПредложениеОбАннулировании Тогда
		ВозвращаемоеЗначение = Истина;
		Если ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
			ФормироватьУОУ = Истина;
		КонецЕсли;
	ИначеЕсли ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ЗапросВыписки Тогда
		ВозвращаемоеЗначение = Ложь;
	ИначеЕсли ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение
		ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПлатежноеТребование Тогда
		ПрограммаБанка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЭД.СоглашениеЭД, "ПрограммаБанка");
		Если ПрограммаБанка = Перечисления.ПрограммыБанка.АсинхронныйОбмен Тогда
			ВозвращаемоеЗначение = Ложь;
		Иначе
			ВозвращаемоеЗначение = Истина;
		КонецЕсли;
	ИначеЕсли ЭтоСлужебныйДокумент(СсылкаНаЭД) Тогда
		ВозвращаемоеЗначение = Ложь;
	Иначе
		ВозвращаемоеЗначение = Истина;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЭДПрисоединенныеФайлы.Ссылка КАК ЭД
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭД_ПОА
		|		ПО ЭДПрисоединенныеФайлы.Ссылка = ЭД_ПОА.ЭлектронныйДокументВладелец
		|			И (ЭД_ПОА.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПредложениеОбАннулировании))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ПодчиненныеЭД
		|		ПО ЭДПрисоединенныеФайлы.Ссылка = ПодчиненныеЭД.ЭлектронныйДокументВладелец
		|			И (ПодчиненныеЭД.ВидЭД В (&ВидыЭДОтветныхТитулов))
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.Ссылка = &Ссылка
		|	И ВЫБОР
		|			КОГДА ЭД_ПОА.Ссылка ЕСТЬ NULL
		|					ИЛИ ЭД_ПОА.Ссылка = &ЭДПрисоединенныеФайлыПустаяСсылка
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА ЭДПрисоединенныеФайлы.НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)
		|				ТОГДА ВЫБОР
		|						КОГДА ЭДПрисоединенныеФайлы.ВидЭД В (&ВидыЭДПервичныхТитулов)
		|							ТОГДА ВЫБОР
		|									КОГДА ПодчиненныеЭД.Ссылка ЕСТЬ NULL
		|											ИЛИ ПодчиненныеЭД.Ссылка = &ЭДПрисоединенныеФайлыПустаяСсылка
		|											ИЛИ ПодчиненныеЭД.СтатусЭД В (&СтатусыИсходящихЭДДопускающиеОтклонение)
		|										ТОГДА ИСТИНА
		|									ИНАЧЕ ЛОЖЬ
		|								КОНЕЦ
		|						ИНАЧЕ ЭДПрисоединенныеФайлы.СтатусЭД В (&СтатусыВходящихЭДДопускающиеОтклонение)
		|					КОНЕЦ
		|			ИНАЧЕ ЭДПрисоединенныеФайлы.СтатусЭД В (&СтатусыИсходящихЭДДопускающиеОтклонение)
		|		КОНЕЦ";
		
		Запрос.УстановитьПараметр("Ссылка", СсылкаНаЭД);
		Запрос.УстановитьПараметр("ЭДПрисоединенныеФайлыПустаяСсылка", Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка());
		СтатусыИсходящихЭДДопускающиеОтклонение = Новый Массив;
		СтатусыИсходящихЭДДопускающиеОтклонение.Добавить(Перечисления.СтатусыЭД.Сформирован);
		СтатусыИсходящихЭДДопускающиеОтклонение.Добавить(Перечисления.СтатусыЭД.Утвержден);
		СтатусыИсходящихЭДДопускающиеОтклонение.Добавить(Перечисления.СтатусыЭД.Подписан);
		СтатусыИсходящихЭДДопускающиеОтклонение.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
		Запрос.УстановитьПараметр("СтатусыИсходящихЭДДопускающиеОтклонение", СтатусыИсходящихЭДДопускающиеОтклонение);
		СтатусыВходящихЭДДопускающиеОтклонение = Новый Массив;
		СтатусыВходящихЭДДопускающиеОтклонение.Добавить(Перечисления.СтатусыЭД.Получен);
		СтатусыВходящихЭДДопускающиеОтклонение.Добавить(Перечисления.СтатусыЭД.Утвержден);
		СтатусыВходящихЭДДопускающиеОтклонение.Добавить(Перечисления.СтатусыЭД.Подписан);
		СтатусыВходящихЭДДопускающиеОтклонение.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
		Запрос.УстановитьПараметр("СтатусыВходящихЭДДопускающиеОтклонение", СтатусыВходящихЭДДопускающиеОтклонение);
		ВидыЭДОтветныхТитулов = Новый Массив;
		ВидыЭДОтветныхТитулов.Добавить(Перечисления.ВидыЭД.ТОРГ12Покупатель);
		ВидыЭДОтветныхТитулов.Добавить(Перечисления.ВидыЭД.АктЗаказчик);
		ВидыЭДОтветныхТитулов.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель);
		Запрос.УстановитьПараметр("ВидыЭДОтветныхТитулов", ВидыЭДОтветныхТитулов);
		ВидыЭДПервичныхТитулов = Новый Массив;
		ВидыЭДПервичныхТитулов.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
		ВидыЭДПервичныхТитулов.Добавить(Перечисления.ВидыЭД.АктИсполнитель);
		ВидыЭДПервичныхТитулов.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель);
		Запрос.УстановитьПараметр("ВидыЭДПервичныхТитулов", ВидыЭДПервичныхТитулов);
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			ВозвращаемоеЗначение = Ложь;
		Иначе
			ФормироватьУОУ = (НЕ ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ЭДОтклонен(СтатусЭД) Экспорт
	
	ЭДОтклонен = (СтатусЭД = Перечисления.СтатусыЭД.Отклонен
					ИЛИ СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем
					ИЛИ СтатусЭД = Перечисления.СтатусыЭД.ОтклоненБанком
					ИЛИ СтатусЭД = Перечисления.СтатусыЭД.ОшибкаПередачи
					ИЛИ СтатусЭД = Перечисления.СтатусыЭД.ОтказанАБС
					ИЛИ СтатусЭД = Перечисления.СтатусыЭД.ЭПНеВерна
					ИЛИ СтатусЭД = Перечисления.СтатусыЭД.ОшибкаРеквизитов);
	Возврат ЭДОтклонен
	
КонецФункции

Функция ПолучитьСсылкиНаЭДДляПОА(Знач ПервичныйЭД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.Ссылка КАК ПОА,
		|	ЭДПрисоединенныеФайлы.Организация,
		|	ЭДВладелецЭД.ВладелецФайла
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДВладелецЭД
		|		ПО ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец = ЭДВладелецЭД.Ссылка
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПредложениеОбАннулировании)
		|	И ЭДВладелецЭД.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ПервичныйЭД);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("ПОА", Выборка.ПОА);
		СтруктураВозврата.Вставить("Организация", Выборка.Организация);
		СтруктураВозврата.Вставить("ВладелецФайла", Выборка.ВладелецФайла);
	Иначе
		СтруктураВозврата = Неопределено;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция МожноАннулироватьЭтотЭД(Знач СсылкаНаЭД) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если НЕ ЗначениеЗаполнено(СсылкаНаЭД)
		ИЛИ ЭтоСлужебныйДокумент(СсылкаНаЭД) Тогда
		ВозвращаемоеЗначение = Ложь;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ЭДПрисоединенныеФайлы.Ссылка КАК ЭД,
			|	ПодчиненныеЭД.Ссылка КАК ПодчиненныйЭД,
			|	ЭДПрисоединенныеФайлы.НаправлениеЭД,
			|	ЭДПрисоединенныеФайлы.СтатусЭД,
			|	ПодчиненныеЭД.СтатусЭД КАК СтатусПодчиненногоЭД
			|ИЗ
			|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭД_ПОА
			|		ПО (ЭД_ПОА.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПредложениеОбАннулировании))
			|			И ЭДПрисоединенныеФайлы.Ссылка = ЭД_ПОА.ЭлектронныйДокументВладелец
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ПодчиненныеЭД
			|		ПО ЭДПрисоединенныеФайлы.Ссылка = ПодчиненныеЭД.ЭлектронныйДокументВладелец
			|			И (ПодчиненныеЭД.ВидЭД В (&ВидыЭДОтветныхТитулов))
			|ГДЕ
			|	НЕ ЭДПрисоединенныеФайлы.СтатусЭД В (&СписокСтатусовИсключений)
			|	И НЕ ЭДПрисоединенныеФайлы.ВидЭД В (&СписокВидовИсключений)
			|	И НЕ ЭДПрисоединенныеФайлы.ПометкаУдаления
			|	И ЭДПрисоединенныеФайлы.Ссылка = &Ссылка
			|	И ВЫБОР
			|			КОГДА ЭД_ПОА.Ссылка ЕСТЬ NULL 
			|					ИЛИ ЭД_ПОА.Ссылка = &ЭДПрисоединенныеФайлыПустаяСсылка
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ";
		
		МассивВидовИсключений = Новый Массив;
		МассивВидовИсключений.Добавить(Перечисления.ВидыЭД.СчетФактура);
		МассивВидовИсключений.Добавить(Перечисления.ВидыЭД.КорректировочныйСчетФактура);
		МассивСтатусовИсключений = Новый Массив;
		МассивСтатусовИсключений.Добавить(Перечисления.СтатусыЭД.СформированоПредложениеОбАннулировании);
		МассивСтатусовИсключений.Добавить(Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании);
		МассивСтатусовИсключений.Добавить(Перечисления.СтатусыЭД.Аннулирован);
		МассивСтатусовИсключений.Добавить(Перечисления.СтатусыЭД.Отклонен);
		МассивСтатусовИсключений.Добавить(Перечисления.СтатусыЭД.ОтклоненПолучателем);
		Запрос.УстановитьПараметр("Ссылка", СсылкаНаЭД);
		Запрос.УстановитьПараметр("СписокВидовИсключений", МассивВидовИсключений);
		Запрос.УстановитьПараметр("СписокСтатусовИсключений", МассивСтатусовИсключений);
		Запрос.УстановитьПараметр("ЭДПрисоединенныеФайлыПустаяСсылка", Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка());
		ВидыЭДОтветныхТитулов = Новый Массив;
		ВидыЭДОтветныхТитулов.Добавить(Перечисления.ВидыЭД.ТОРГ12Покупатель);
		ВидыЭДОтветныхТитулов.Добавить(Перечисления.ВидыЭД.АктЗаказчик);
		ВидыЭДОтветныхТитулов.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель);
		Запрос.УстановитьПараметр("ВидыЭДОтветныхТитулов", ВидыЭДОтветныхТитулов);
		Выборка = Запрос.Выполнить().Выбрать();
		ВозвращаемоеЗначение = Ложь;
		Если Выборка.Следующий() Тогда
			Если Выборка.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
				Если ЗначениеЗаполнено(Выборка.ПодчиненныйЭД) Тогда
					ОбрабатываемыйЭД = Выборка.ПодчиненныйЭД;
					СтатусЭД = Выборка.СтатусПодчиненногоЭД;
				Иначе
					ОбрабатываемыйЭД = Выборка.ЭД;
					СтатусЭД = Выборка.СтатусЭД;
				КонецЕсли;
			Иначе
				ОбрабатываемыйЭД = Выборка.ЭД;
				СтатусЭД = Выборка.СтатусЭД;
			КонецЕсли;
			НастройкиОбмена = ЭлектронныеДокументыСлужебный.НастройкиОбменаЭД(ОбрабатываемыйЭД);
			МассивСтатусов = ЭлектронныеДокументыСлужебный.ВернутьМассивСтатусовЭД(НастройкиОбмена);
			Если МассивСтатусов.ВГраница() >= 0 И СтатусЭД = МассивСтатусов[МассивСтатусов.ВГраница()] Тогда
				ВозвращаемоеЗначение = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция СсылкаЭДПоИД(Наименование, НаправлениеЭД)
	
	Если Не ЗначениеЗаполнено(Наименование) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЭДПрисоединенныеФайлы.Ссылка КАК ЭД
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.НаименованиеФайла ПОДОБНО &Наименование
	|	И ЭДПрисоединенныеФайлы.НаправлениеЭД = &НаправлениеЭД";
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.УстановитьПараметр("НаправлениеЭД", НаправлениеЭД);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.ЭД;
	
КонецФункции

// ЭД владелец - первичный ЭД к которому пришла вторая подпись
// для этого ЭД необходимо найти пакет ЭД, из него извлечь доп данные - наименование эл документа на основании которог он был введен
// по наименованию найти ЭДОснвания, установить у его владельца статус "Обмен завершен с исправлением"
Процедура УстановитьСостояниеЗавершен(ДобавленныйФайл, НаправлениеЭД) Экспорт
	
	Если Не ЭтоДокументКорректировки(ДобавленныйФайл) Тогда
		Возврат;
	КонецЕсли;
	
	МассивЭДОснований = Новый Массив;
	
	ЭДВладелец = ДобавленныйФайл.ЭлектронныйДокументВладелец;
	ЗаполнитьЭДОснования(МассивЭДОснований, ЭДВладелец, НаправлениеЭД);
	
	ДокументыОснования = ЭлектронныеДокументыВнутренний.ВладельцыЭД(МассивЭДОснований);
	
	ЭлектронныеДокументыВнутренний.УстановитьСостояниеОбменЗавершенСИсправлением(ДокументыОснования);
	
КонецПроцедуры

Функция ЭтоОтветныйДокумент(ЭлектронныйДокумент) 
	
	Результат = Ложь;
	Если ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
		Или ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.СчетФактура Тогда
		
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

Процедура ИзменитьСостояниеЭДДокументовОснования(РеквизитыПакетаЭД)
	
	Выборка = РеквизитыПакетаЭД.ЭлектронныеДокументы.Выбрать();
	Если Выборка.Количество() > 0 И Выборка.Следующий() Тогда
		ЭлектронныйДокумент = Выборка.ЭлектронныйДокумент;
		Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
			Если ЭтоОтветныйДокумент(ЭлектронныйДокумент) Тогда
				УстановитьСостояниеЗавершен(ЭлектронныйДокумент, Перечисления.НаправленияЭД.Входящий);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочие

// Выполняется проверка возможности корректного чтения Пакета ЭД.
// Необходимость данной проверки возникает при работе с данными внешней информационной базы (через com-соединение).
//
// Параметры:
//  ПакетЭД - ДокументСсылка.ПакетЭД - исследуемый пакет электронных документов.
//
// Возвращаемое значение:
//  Булево - Истина - чтение данных пакета возможно, иначе - Ложь.
//
Функция ОпределитьВозможностьЧтенияДвоичныхДанныхПакетаЭД(ПакетЭД)
	
	ЧтениеПакетаВозможно = Истина;
	ЭлектронныеДокументыПереопределяемый.ОпределитьВозможностьЧтенияДвоичныхДанныхПакетаЭД(ПакетЭД, ЧтениеПакетаВозможно);
	
	Возврат ЧтениеПакетаВозможно;
	
КонецФункции

Функция ПолучитьСоответствиеФайлПараметры(ФайлИнформации)
	
	ЧтениеХМЛ = Новый ЧтениеXML;
	ЧтениеХМЛ.ОткрытьФайл(ФайлИнформации.ПолноеИмя);
	
	ПредставлениеДокумента = "";
	ПредставленияПодписей = Новый Массив;
	НашлиДокумент = Ложь;
	СоответствиеВозврата = Новый Соответствие;
	
	Пока ЧтениеХМЛ.Прочитать() Цикл
		
		Параметры = Новый Структура;
		
		Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Текст" Тогда
			ЧтениеХМЛ.Прочитать();
			СоответствиеВозврата.Вставить("Текст", ЧтениеХМЛ.Значение);
		КонецЕсли;

		Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Документ" Тогда
			ПредставлениеДокумента = "";
			ПредставленияПодписей.Очистить();
			ЧтениеХМЛ.Прочитать();
			ПредставлениеДокумента = СокрЛП(ЧтениеХМЛ.Значение);
			НашлиДокумент = Истина;
			УникальныйИД = "";
			НомерЭД = "";
		КонецЕсли;
		
		Если НЕ НашлиДокумент Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Подпись" Тогда
			ЧтениеХМЛ.Прочитать();
			ПредставленияПодписей.Добавить(СокрЛП(ЧтениеХМЛ.Значение));
		КонецЕсли;
		
		Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "НомерЭД" Тогда
			ЧтениеХМЛ.Прочитать();
			НомерЭД = ЧтениеХМЛ.Значение
		КонецЕсли;
		
		Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "УникальныйИД" Тогда
			ЧтениеХМЛ.Прочитать();
			УникальныйИД = ЧтениеХМЛ.Значение;
		КонецЕсли;
		Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Документ" Тогда
			НашлиДокумент = Ложь;
			НовыйМассив = ПредставленияПодписей;
			СтруктураПредставления = Новый Структура("Подписи, НомерЭД, УникальныйИД, КодРегламента",
				ВернутьМассивПредставленийПодписей(ПредставленияПодписей), НомерЭД, УникальныйИД, "Nonformalized");
			СоответствиеВозврата.Вставить(ПредставлениеДокумента, СтруктураПредставления);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СоответствиеВозврата;
	
КонецФункции

Функция ПреобразоватьМассивФайловВДвоичныеДанные(МассивФайлов)
	
	МассивВозврата = Новый Массив;
	Для Каждого ФайлДанных Из МассивФайлов Цикл
		СтруктураМассива = Новый Структура;
		СтруктураМассива.Вставить("ДвоичныеДанные", Новый ДвоичныеДанные(ФайлДанных.ПолноеИмя));
		СтруктураМассива.Вставить("ИмяФайлаБезРасширения", ФайлДанных.ИмяБезРасширения);
		СтруктураМассива.Вставить("ИмяФайла", ФайлДанных.Имя);	
		МассивВозврата.Добавить(СтруктураМассива);
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

Функция ВернутьМассивПредставленийПодписей(МассивПредставления)
	
	МассивВозврата = Новый Массив;
	Для Каждого Элемент Из МассивПредставления Цикл
		МассивВозврата.Добавить(Элемент);
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

Функция ПолучитьФайлДанныхДляОбработки(СтруктураДанных, ПапкаДляРасшифровки, ЭтоПроизвольныйЭД)
	
	ФайлДанныхОбработан = Ложь;
	Если ЗначениеЗаполнено(ПапкаДляРасшифровки) Тогда
		
		Если НайтиФайлы(ПапкаДляРасшифровки).Количество() = 0 Тогда
			СоздатьКаталог(ПапкаДляРасшифровки);
		КонецЕсли;
			
		Если НайтиФайлы(ПапкаДляРасшифровки).Количество() > 0 Тогда
			
			УдалитьФайлы(ПапкаДляРасшифровки, "*");
			
			ФайлДанных = СтруктураДанных.ДвоичныеДанные;
			Расширение = СтрЗаменить(СтруктураДанных.ИмяФайла, СтруктураДанных.ИмяФайлаБезРасширения, "");
			
			ФайлРасшифрованногоАрхива = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла(Расширение);
			ФайлДанных.Записать(ФайлРасшифрованногоАрхива);
			
			Если Найти(Расширение, "zip") > 0 И ЭтоПроизвольныйЭД <> Истина Тогда
				ЧтениеЗИП = Новый ЧтениеZIPФайла(ФайлРасшифрованногоАрхива);
				Попытка
					ЧтениеЗИП.ИзвлечьВсе(ПапкаДляРасшифровки);
					ФайлДанныхОбработан = Истина;
				Исключение
					ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
					Если НЕ ЭлектронныеДокументыСлужебный.ВозможноИзвлечьФайлы(ЧтениеЗИП, ПапкаДляРасшифровки) Тогда
						ТекстСообщения = ЭлектронныеДокументыПовтИсп.ПолучитьСообщениеОбОшибке("006");
					КонецЕсли;
					ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Распаковка пакета ЭД'"), ТекстОшибки, ТекстСообщения);
				КонецПопытки;
			Иначе
				ФайлДвоичныхДанных = Новый Файл(ФайлРасшифрованногоАрхива);
				КопироватьФайл(ФайлРасшифрованногоАрхива, ПапкаДляРасшифровки + ФайлДвоичныхДанных.Имя);
				ФайлДанныхОбработан = Истина;
			КонецЕсли;
			
			УдалитьФайлы(ФайлРасшифрованногоАрхива);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ФайлДанныхОбработан;
	
КонецФункции

// Процедура определяет, по каким объектам ИБ не надо выполнять действия (утверждение,
// подписание, подготовка к отправке).
//
// Параметры:
//  НастройкиОбъектов - соответствие, содержит ссылки на документы ИБ, 
//                     по которым предполагается выполнение каких-либо действий с ЭД.
//  МассивНеобрабатываемыхОбъектов - массив, возвращает в вызывающую процедуру ссылки на объекты ИБ,
//                                  по которым не надо выполнять никаких действий.
//
Процедура ОпределитьНеобрабатываемыеОбъекты(НастройкиОбъектов, МассивНеобрабатываемыхОбъектов)
	
	МассивОтбора = Новый Массив;
	Для Каждого Элемент ИЗ НастройкиОбъектов Цикл
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			МассивОтбора.Добавить(Элемент.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.СсылкаНаОбъект,
	|	СостоянияЭД.ЭлектронныйДокумент,
	|	СостоянияЭД.ЭлектронныйДокумент.СоглашениеЭД.ПрограммаБанка КАК ПрограммаБанка,
	|	СостоянияЭД.СостояниеВерсииЭД,
	|	СостоянияЭД.ЭлектронныйДокумент.ПрофильНастроекЭДО.СпособОбменаЭД КАК СпособОбменаЭД
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект В(&МассивСсылок)
	|	И (СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяОтправка)
	|				И СостоянияЭД.ЭлектронныйДокумент.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.ПодготовленКОтправке)
	|			ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяПодтверждение)
	|			ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОбменЗавершен)
	|			ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОбменЗавершенСИсправлением)
	|			ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ПлатежИсполнен)
	|			ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяИзвещениеОПолучении)
	|			ИЛИ &СчетФактура
	|			ИЛИ &ПлатежноеПоручение
	|			ИЛИ &ПлатежноеТребование)";
	
	ИмяСчетаФактурыВыданного = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
																	"СчетФактураВыданныйВМетаданных");
	Если ИмяСчетаФактурыВыданного <> Неопределено Тогда
		
		Запрос.Текст = СтрЗаменить(
							Запрос.Текст,
							"&СчетФактура",
							"СостоянияЭД.СсылкаНаОбъект ССЫЛКА Документ." + ИмяСчетаФактурыВыданного + "
		|					И (СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяИзвещениеОПолучении)
		|						ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОбменЗавершен)
		|						ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОбменЗавершенСИсправлением)
		|						ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.Отклонен))");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СчетФактура", "ЛОЖЬ");
	КонецЕсли;
	
	ИмяПлатежногоПоручения = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
																	"ПлатежноеПоручениеВМетаданных");
	Если ИмяПлатежногоПоручения <> Неопределено Тогда
		
		Запрос.Текст = СтрЗаменить(
							Запрос.Текст,
							"&ПлатежноеПоручение",
							"СостоянияЭД.СсылкаНаОбъект ССЫЛКА Документ." + ИмяПлатежногоПоручения + "
		|					И (СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.Отклонен))");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПлатежноеПоручение", "ЛОЖЬ");
	КонецЕсли;
	
	ИмяПлатежногоТребования = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
																	"ПлатежноеТребованиеВМетаданных");
	Если ИмяПлатежногоТребования <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(
							Запрос.Текст,
							"&ПлатежноеТребование",
							"СостоянияЭД.СсылкаНаОбъект ССЫЛКА Документ." + ИмяПлатежногоТребования + "
		|					И (СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.Отклонен))");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПлатежноеТребование", "ЛОЖЬ");
	КонецЕсли;

	
	Запрос.УстановитьПараметр("МассивСсылок", МассивОтбора);
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		МассивНеобрабатываемыхОбъектов.Добавить(Результат.ЭлектронныйДокумент);
		
		Если Результат.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка
				И Результат.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн
				И Результат.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправка Тогда
			ТекстСообщения = НСтр("ru = 'Обработка %1.
					|Для отправки электронного документа необходимо воспользоваться обработкой ""Обмен электронными документами с банком"".'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Обработка %1.
				|Не требуется выполнения действий с электронным документом.'");
		КонецЕсли;
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Результат.СсылкаНаОбъект);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Результат.СсылкаНаОбъект);
	КонецЦикла;
	
КонецПроцедуры

// Используется для получения представления ЭД с клиента.
//
// Параметры:
//   СсылкаНаЭД - СправочникСсылка.ЭДПрисоединенныеФайлы - ЭД для которого надо получить представление.
//
// Возвращаемое значение:
//   Строка - представление электронного документа.
//
Функция ПредставлениеЭД(СсылкаНаЭД) Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("Представление", ЭлектронныеДокументыСлужебный.ПолучитьПредставлениеЭД(СсылкаНаЭД));
	Структура.Вставить("Значение", СсылкаНаЭД);
	
	Возврат Структура.Представление;
	
КонецФункции

// Используется для получения списка представлений ЭД с клиента.
//
// Параметры:
//   МассивЭД - Массив - СправочникСсылка.ЭДПрисоединенныеФайлы, для которых надо сформировать список представлений.
//
// Возвращаемое значение:
//   СписокЗначений:
//      Значение - СправочникСсылка.ЭДПрисоединенныеФайлы.
//      Представление - Строка - представление электронного документа.
//
Функция СписокПредставленийЭД(МассивЭД) Экспорт
	
	СписокПредставлений = Новый СписокЗначений;
	Для Каждого ЭД Из МассивЭД Цикл
		Представление = ЭлектронныеДокументыСлужебный.ПолучитьПредставлениеЭД(ЭД);
		СписокПредставлений.Добавить(ЭД, Представление);
	КонецЦикла;
	
	Возврат СписокПредставлений;
	
КонецФункции

Функция ЭДОснования(СсылкаНаЭД, НаправлениеЭД) Экспорт
	
	ФайлДанныхСсылка = ПолучитьДанныеЭД(СсылкаНаЭД);
	Если НЕ ЗначениеЗаполнено(ФайлДанныхСсылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВыборкаДопДанные = ЭлектронныеДокументыСлужебный.ВыборкаДопДанныеЭД(СсылкаНаЭД);
	Если ВыборкаДопДанные.Следующий() Тогда
		СсылкаНаЭДДопДанных = ВыборкаДопДанные.Ссылка;
		ФайлДопДанныхСсылка = ПолучитьДанныеЭД(СсылкаНаЭДДопДанных);
		Если НЕ ЗначениеЗаполнено(ФайлДопДанныхСсылка) Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ФайлДанныхСсылка", ФайлДанныхСсылка);
	СтруктураПараметров.Вставить("НаправлениеЭД",	СсылкаНаЭД.НаправлениеЭД);
	Если ФайлДопДанныхСсылка <> Неопределено Тогда
		СтруктураПараметров.Вставить("ФайлДопДанных", ФайлДопДанныхСсылка);
	КонецЕсли;
	СтруктураПараметров.Вставить("ВладелецЭД", "ВладелецЭД");
	
	СтруктураЭД = ЭлектронныеДокументыВнутренний.РазобратьФайлДанных(СтруктураПараметров);
	
	Если СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура Тогда
		
		ИДОснования = СтруктураЭД.ИДЭДДокументаОснования;
		ЭДОснования = СсылкаЭДПоИД(ИДОснования, НаправлениеЭД);

	Иначе
		
		ДеревоДопДанных = Неопределено;
		Если Не СтруктураЭД.Свойство("ДеревоДопДанных", ДеревоДопДанных) Тогда 
			Возврат Неопределено;
		КонецЕсли;
		
		СтрокаДокументаОснования = СтруктураЭД.ДеревоДопДанных.Строки.Найти("ИДЭДДокументаОснования", , Истина);
		Если СтрокаДокументаОснования = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ЭДОснования = СсылкаЭДПоИД(СтрокаДокументаОснования.ЗначениеРеквизита, НаправлениеЭД);
		
	КонецЕсли;
	
	Возврат ЭДОснования;
		
КонецФункции

Функция ЭтоДокументКорректировки(ДобавленныйФайл) Экспорт
	
	// Документ, основания которых должны поменять свой статус должен быть вида:
	// ТОРГ12Продавец, ТОРГ12Покупатель или ИзвещениеОПолучении привязанный к с.ф.
	
	Результат = Ложь;
	
	Если (ДобавленныйФайл.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец 
			Или ДобавленныйФайл.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель)
			
			Или (ДобавленныйФайл.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
				И ЗначениеЗаполнено(ДобавленныйФайл.ЭлектронныйДокументВладелец)
				И ДобавленныйФайл.ЭлектронныйДокументВладелец.ВидЭД = Перечисления.ВидыЭД.СчетФактура) Тогда
				
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Сертификаты

Процедура ОбновитьЗначение(СтароеЗначение, НовоеЗначение, ПропускатьНеопределенныеЗначения = Ложь)
	
	Если НовоеЗначение = Неопределено И ПропускатьНеопределенныеЗначения Тогда
		Возврат;
	КонецЕсли;
	
	Если СтароеЗначение <> НовоеЗначение Тогда
		СтароеЗначение = НовоеЗначение;
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьСписокРасширенийСертификатов()
	
	СписокРасширений = Новый СписокЗначений;
	СписокРасширений.Добавить(".p7s");
	
	Возврат СписокРасширений;
	
КонецФункции

Функция СформироватьФайлыДляОтправки(Конверт)
	
	ФайлыЭД = ЭлектронныеДокументыСлужебный.ПолучитьВыборкуЭДПоОтбору(Новый Структура("ВладелецФайла", Конверт));
	АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог("send", Конверт.Ссылка.УникальныйИдентификатор());
	Если НЕ ФайлыЭД = Неопределено Тогда
		Пока ФайлыЭД.Следующий() Цикл
			ДанныеФайла = ЭлектронныеДокументыСлужебный.ПолучитьДанныеФайла(ФайлыЭД.Ссылка);
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
			ДвоичныеДанные.Записать(АдресКаталога + ДанныеФайла.ИмяФайла);
		КонецЦикла;
	КонецЕсли;
	
	Возврат АдресКаталога;
	
КонецФункции

// Только для внутреннего использования
Процедура ЗаполнитьДокументИБПоЭД(СсылкаНаВладельца, СсылкаНаЭД, ДокЗаполнен =Ложь)
	
	ФайлДанныхСсылка = ПолучитьДанныеЭД(СсылкаНаЭД);
	Если НЕ ЗначениеЗаполнено(ФайлДанныхСсылка) Тогда
		Возврат;
	КонецЕсли;
	ВыборкаДопДанные = ЭлектронныеДокументыСлужебный.ВыборкаДопДанныеЭД(СсылкаНаЭД);
	Если ВыборкаДопДанные.Следующий() Тогда
		СсылкаНаЭДДопДанных = ВыборкаДопДанные.Ссылка;
		ФайлДопДанныхСсылка = ПолучитьДанныеЭД(СсылкаНаЭДДопДанных);
		Если НЕ ЗначениеЗаполнено(ФайлДопДанныхСсылка) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВладелецЭД",		СсылкаНаВладельца);
	СтруктураПараметров.Вставить("ФайлДанныхСсылка",	ФайлДанныхСсылка);
	СтруктураПараметров.Вставить("НаправлениеЭД",	СсылкаНаЭД.НаправлениеЭД);
	СтруктураПараметров.Вставить("ЗаполнитьДокумент", Истина);
	
	Если ФайлДопДанныхСсылка <> Неопределено Тогда
		СтруктураПараметров.Вставить("ФайлДопДанных", ФайлДопДанныхСсылка);
	КонецЕсли;
	
	СтруктураЭД = ЭлектронныеДокументыВнутренний.РазобратьФайлДанных(СтруктураПараметров);
		
	Если СтруктураЭД.Загружен Тогда
		НачатьТранзакцию();
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СостоянияЭД");
		ЭлементБлокировки.УстановитьЗначение("СсылкаНаОбъект", СсылкаНаВладельца);
		Блокировка.Заблокировать();
	
		МенеджерЗаписи = РегистрыСведений.СостоянияЭД.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.СсылкаНаОбъект = СсылкаНаВладельца;
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() И МенеджерЗаписи.ЭлектронныйДокумент <> СсылкаНаЭД Тогда
			МенеджерЗаписи.ЭлектронныйДокумент = СсылкаНаЭД;
			МенеджерЗаписи.Записать();
		КонецЕсли;
	
		ОбновитьВерсиюЭД(СсылкаНаЭД);
	
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	ДокЗаполнен = СтруктураЭД.Загружен;
	
КонецПроцедуры

// Только для внутреннего использования
Функция СоответствиеДанныхПакетов(МассивПакетовЭД) Экспорт
	
	СоответствиеВозврата = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПакетЭДЭлектронныеДокументы.Ссылка КАК ПакетЭД,
	|	ПакетЭДЭлектронныеДокументы.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
	|	ПакетЭДЭлектронныеДокументы.ЭлектронныйДокумент.НаправлениеЭД КАК НаправлениеЭД,
	|	ПакетЭДЭлектронныеДокументы.ЭлектронныйДокумент.ВидЭД КАК ВидЭД
	|ИЗ
	|	Документ.ПакетЭД.ЭлектронныеДокументы КАК ПакетЭДЭлектронныеДокументы
	|ГДЕ
	|	ПакетЭДЭлектронныеДокументы.Ссылка В(&МассивПакетовЭД)
	|ИТОГИ ПО
	|	ПакетЭД";
	
	Запрос.УстановитьПараметр("МассивПакетовЭД", МассивПакетовЭД);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаПакеты = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПакеты.Следующий() Цикл
		ВыборкаЭД = ВыборкаПакеты.Выбрать();
		МассивЭД = Новый Массив;
		Пока ВыборкаЭД.Следующий() Цикл
			СтруктураДанныхФайла = Новый Структура;
			ДанныеФайла = ЭлектронныеДокументыСлужебный.ПолучитьДанныеФайла(ВыборкаЭД.ЭлектронныйДокумент);
			СтруктураДанныхФайла.Вставить("ЭлектронныйДокумент", ВыборкаЭД.ЭлектронныйДокумент);
			СтруктураДанныхФайла.Вставить("ДанныеФайла",         ДанныеФайла);
			СтруктураДанныхФайла.Вставить(
					"ЭтоОтправкаПодтверждения",
					ВыборкаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий);
			ПараметрыШифрования = ЭлектронныеДокументыСлужебный.ПолучитьМассивАдресовСертификатовШифрования(
																			ВыборкаЭД.ЭлектронныйДокумент);
			СтруктураДанныхФайла.Вставить("ПараметрыШифрования", ПараметрыШифрования);
			МассивЭД.Добавить(СтруктураДанныхФайла);
		КонецЦикла;
		СоответствиеВозврата.Вставить(ВыборкаПакеты.ПакетЭД, МассивЭД);
	КонецЦикла;
	
	Возврат СоответствиеВозврата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Подпись электронных документов

// Выполняет проверку подписей ЭД, используется для минимизации серверных вызовов.
//
// Параметры:
//   СоответствиеРезультатов - Соответствие:
//                             Ключ     - СправочникСсылка.ЭДПрисоединенныеФайлы - ссылка на электронный документ.
//                             Значение - Массив - содержит данные установленных подписей.
//
Процедура ОбработатьМассивРезультатовПроверкиПодписей(СоответствиеРезультатов) Экспорт
	
	Для Каждого Элемент Из СоответствиеРезультатов Цикл
		СохранитьРезультатыПроверкиПодписей(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
КонецПроцедуры

// Сохраняет результаты проверки ЭП, выполненные на клиенте
//
// Параметры:
// ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы - ссылка на электронный документ.
// МассивРезультатов - Массив - содержит данные установленных подписей.
//
Процедура СохранитьРезультатыПроверкиПодписей(ЭД, МассивРезультатов) Экспорт
	
	Если МассивРезультатов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбъектСправочник = ЭД.ПолучитьОбъект();
	
	Для Каждого Элемент Из МассивРезультатов Цикл
		СтрокаТЧ = ОбъектСправочник.ЭлектронныеПодписи.Получить(Элемент.НомерСтроки-1);
		СтрокаТЧ.ДатаПроверкиПодписи = ТекущаяДатаСеанса();
		СтрокаТЧ.ПодписьВерна = Элемент.Результат;
	КонецЦикла;
	
	Попытка
		ОбъектСправочник.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки
	
КонецПроцедуры

// Подписывает электронные документы определенным сертификатом криптографии.
// 
// Параметры:
//  ДобавленныеФайлы - Массив ссылок на электронные документы, которые необходимо подписать,
//  СертификатПодписи - СертификатКриптографии, сертификат, которым необходимо подписать переданные электронные документы,
//  ПараметрыСертификата - Структура, содержит реквизиты сертификата
//  МассивНеПодписанныхЭД - Массив либо Неопределено, в этой переменной в вызывающую процедуру возвращается массив ЭД,
//    которые не были подписаны.
//
Функция ПодписатьЭДОпределеннымСертификатом(ДобавленныеФайлы,
											СертификатПодписи,
											ПараметрыСертификата,
											МассивНеПодписанныхЭД = Неопределено) Экспорт
											
	Если Не ТипЗнч(ДобавленныеФайлы) = Тип("Массив") Тогда
		ФайлыНаПодпись = Новый Массив;
		ФайлыНаПодпись.Добавить(ДобавленныеФайлы);
	Иначе
		ФайлыНаПодпись = ДобавленныеФайлы;
	КонецЕсли;
	
	Если ТипЗнч(МассивНеПодписанныхЭД) <> Тип("Массив") Тогда
		МассивНеПодписанныхЭД = Новый Массив;
	КонецЕсли;
	Отказ = Ложь;
	МенеджерКриптографии = ПолучитьМенеджерКриптографии(Отказ);
	Если Отказ Тогда
		ТекстСообщения = ПолучитьСообщениеОбОшибке("110");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Для Каждого НеПодписанныйЭД Из ФайлыНаПодпись Цикл
			МассивНеПодписанныхЭД.Добавить(НеПодписанныйЭД);
		КонецЦикла;
		Возврат 0;
	КонецЕсли;
	
	МенеджерКриптографии.ВключениеСертификатовВПодпись = РежимВключенияСертификатовКриптографии.ВключатьСертификатСубъекта;
	
	КриптоСертификат = ПолучитьСертификатПоОтпечатку(ПараметрыСертификата.Отпечаток);
	
	КоличествоПодписанныхЭД = 0;
	
	Если КриптоСертификат <> Неопределено Тогда
		
		Попытка
			МенеджерКриптографии.ПроверитьСертификат(КриптоСертификат,
													 РежимПроверкиСертификатаКриптографии.РазрешитьТестовыеСертификаты);
		Исключение
			ТекстСообщения = ПолучитьСообщениеОбОшибке("112");
			ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'проверка сертификата на корректность'"),
											  ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
											  ТекстСообщения);
			Для Каждого НеПодписанныйЭД Из ФайлыНаПодпись Цикл
				МассивНеПодписанныхЭД.Добавить(НеПодписанныйЭД);
			КонецЦикла;
			Возврат 0;
		КонецПопыткИ;
		
		Для Каждого ТекДокумент Из ФайлыНаПодпись Цикл
			
			СтруктураДанныхПодписи = Новый Структура("Сертификат, ПарольПользователя, Комментарий", КриптоСертификат, ПараметрыСертификата.ПарольПользователя,
				НСтр("ru = 'Подписание электронного документа'"));
			Попытка
				ДвоичныеДанныеФайла = ПолучитьДвоичныеДанныеФайла(ТекДокумент, СертификатПодписи);
				ДанныеПодписи = СформироватьДанныеПодписи(МенеджерКриптографии, ТекДокумент, ДвоичныеДанныеФайла,
					СтруктураДанныхПодписи);
				
				ДобавитьПодпись(ТекДокумент, ДанныеПодписи);
				КоличествоПодписанныхЭД = КоличествоПодписанныхЭД + 1;
				ОпределитьСтатусыПодписей(ТекДокумент);
			Исключение
				ШаблонСообщения = НСтр("ru = 'Ошибка подписи на сервере. Необходимо провести тест сертификата криптографии для: %1.
				|%2'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СертификатПодписи,
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				ОбработатьИсключениеПоЭДНаСервере(
						НСтр("ru = 'установка подписи ЭП'"),
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
						ТекстСообщения);
				МассивНеПодписанныхЭД.Добавить(ТекДокумент);
			КонецПопытки;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат КоличествоПодписанныхЭД;
	
КонецФункции

// Заносит информацию о подписи объекта
//
// Параметры
//  ПодписываемыйОбъектСсылка  - любая ссылка / объект - в табличную часть которого будет занесена информация о ЭП
//  							в случае если ссылка - будет получен объект, блокировка, запись в ИБ
//  							в случае объекта за блокировку и запись отвечает вызывающий код
//  НоваяПодписьДвоичныеДанные  - ДвоичныеДанные - двоичные данные подписи
//  Отпечаток  - Строка - Base64 закодированная строка с отпечатком сертификата подписавшего
//  ДатаПодписи  - Дата - дата подписи
//  Комментарий  - Строка - комментарий подписи
//  ИмяФайлаПодписи  - Строка - имя файла подписи (не пусто только в случае если подпись добавлена из файла)
//  КомуВыданСертификат  - Строка - представление поля КомуВыдан сертификата
//  УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор формы
//
Процедура ЗанестиИнформациюОПодписи(
				ПодписываемыйОбъектСсылка,
				НоваяПодписьДвоичныеДанные,
				Отпечаток,
				ДатаПодписи,
				Комментарий,
				ИмяФайлаПодписи,
				КомуВыданСертификат,
				ДвоичныеДанныеСертификата,
				УникальныйИдентификатор = Неопределено) Экспорт
				
	УстановитьПривилегированныйРежим(Истина);
	
	ДатаУстановкиПодписи = ЭлектронныеДокументыСлужебный.ДатаУстановкиПодписи(НоваяПодписьДвоичныеДанные);
	ДатаУстановкиПодписи = ?(ЗначениеЗаполнено(ДатаУстановкиПодписи), ДатаУстановкиПодписи, ТекущаяДатаСеанса());
	
	ЭлектронныеДокументыСлужебный.ЗанестиИнформациюОПодписи(
										ПодписываемыйОбъектСсылка,
										НоваяПодписьДвоичныеДанные,
										Отпечаток,
										ДатаУстановкиПодписи,
										Комментарий,
										ИмяФайлаПодписи,
										КомуВыданСертификат,
										ДвоичныеДанныеСертификата,
										УникальныйИдентификатор)

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Операции с криптографией

// Создает на сервере менеджер криптографии.  Пароль не устанавливается
//
// Возвращаемое значение:
//   МенеджерКриптографии  - менеджер криптографии
Функция ПолучитьМенеджерКриптографии(Отказ = Ложь,
	Операция = "", ПоказатьОшибку = Ложь, ОписаниеОшибки = "", Программа = Неопределено) Экспорт
	
	МенеджерКриптографии = ЭлектроннаяПодпись.МенеджерКриптографии(Операция, ПоказатьОшибку, ОписаниеОшибки, Программа);
	
	Отказ = (МенеджерКриптографии = Неопределено);
	
	Возврат МенеджерКриптографии;
	
КонецФункции

// Возвращает расшифрованные двоичные данные.
//
// Параметры:
//  ДвоичныеДанные - ДвоичныеДанные, данные, которое необходимо зашифровать
//  Пароль - Строка, пароль для расшифровки
//
// Возвращаемое значение:
//  ДвоичныеДанные или неопределено - зашифрованные двоичные данные или Неопределено в случае ошибки.
//
Функция РасшифрованныеДанные(ДвоичныеДанные, Пароль) Экспорт
	
	Попытка
		МенеджерКриптографии = ПолучитьМенеджерКриптографии();
	Исключение
		ТекстСообщения = ПолучитьСообщениеОбОшибке("110");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
	
	МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = Пароль;
	// Метод расшифровки генерирует исключение в случае ошибки.
	Попытка
		РасшифрованныеДвоичныеДанные = МенеджерКриптографии.Расшифровать(ДвоичныеДанные);
	Исключение
		ТекстСообщения = ПолучитьСообщениеОбОшибке("113");
		ОбработатьИсключениеПоЭДНаСервере(
				НСтр("ru = 'расшифровка пакета ЭД'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
				ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;

	Возврат РасшифрованныеДвоичныеДанные;
	
КонецФункции

// Формирует данные подписи объекта
//
// Параметры
//  МенеджерКриптографии  - МенеджерКриптографии - менеджер криптографии
//  ОбъектДляПодписиСсылка  - любая ссылка - ссылка на подписываемый объект
//  ДвоичныеДанные  - ДвоичныеДанные - двоичные данные подписи
//  СтруктураПараметровПодписи  - Структура - информация о подписи - выбранный сертификат, пароль, комментарий
//
// Возвращаемое значение:
//   Структура   - данные для занесения в табличную часть ЭП
Функция СформироватьДанныеПодписи(
				МенеджерКриптографии,
				ОбъектДляПодписиСсылка,
				ДвоичныеДанные,
				СтруктураПараметровПодписи) Экспорт
	
	МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = СтруктураПараметровПодписи.ПарольПользователя;
	ДатаПодписи = Дата('00010101');
	
	НоваяПодписьДвоичныеДанные = МенеджерКриптографии.Подписать(ДвоичныеДанные, СтруктураПараметровПодписи.Сертификат);
	
	Отпечаток = Base64Строка(СтруктураПараметровПодписи.Сертификат.Отпечаток);
	КомуВыданСертификат = ЭлектроннаяПодписьКлиентСервер.ПредставлениеСубъекта(СтруктураПараметровПодписи.Сертификат);
	ДвоичныеДанныеСертификата = СтруктураПараметровПодписи.Сертификат.Выгрузить();
	
	ДанныеПодписи = Новый Структура("ОбъектСсылка, НоваяПодписьДвоичныеДанные, Отпечаток, ДатаПодписи, Комментарий, ИмяФайлаПодписи, КомуВыданСертификат, АдресФайла, ДвоичныеДанныеСертификата",
							ОбъектДляПодписиСсылка,
							НоваяПодписьДвоичныеДанные,
							Отпечаток,
							ДатаПодписи,
							СтруктураПараметровПодписи.Комментарий,
							"", // ИмяФайлаПодписи
							КомуВыданСертификат,
							"", // АдресФайла
							ДвоичныеДанныеСертификата);
		
	Возврат ДанныеПодписи;
	
КонецФункции

// Заполняет структуру полями сертификата
//
// Параметры
//  Отпечаток  - Строка - base64 кодированный отпечаток сертификата 
//
// Возвращаемое значение:
//   Структура  - структура с полями сертификата
Функция ЗаполнитьСтруктуруСертификатаПоОтпечатку(Отпечаток) Экспорт
	
	ДвоичныеДанныеОтпечатка = Base64Значение(Отпечаток);
	
	Отказ = Ложь;
	МенеджерКриптографии = ПолучитьМенеджерКриптографии(Отказ);
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ХранилищеСертификатов = МенеджерКриптографии.ПолучитьХранилищеСертификатов();
	Сертификат = ХранилищеСертификатов.НайтиПоОтпечатку(ДвоичныеДанныеОтпечатка);
	
	Если Сертификат = Неопределено Тогда
		Предупреждение = НСтр("ru = 'Сертификат не найден'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Предупреждение);
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ЭлектроннаяПодписьКлиентСервер.ЗаполнитьСтруктуруСертификата(Сертификат);
	
КонецФункции

// Находит сертификат по строке отпечатка
//
// Параметры
//  Отпечаток  - Строка - base64 кодированный отпечаток сертификата 
//  ТолькоВЛичномХранилище  - Булево - вести поиск только в личном хранилище
//
// Возвращаемое значение:
//   СертификатКриптографии  - сертификат криптографии 
Функция ПолучитьСертификатПоОтпечатку(Отпечаток, ТолькоВЛичномХранилище = Ложь) Экспорт
	
	ДвоичныеДанныеОтпечатка = Base64Значение(Отпечаток);
	
	Отказ = Ложь;
	МенеджерКриптографии = ПолучитьМенеджерКриптографии(Отказ);
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ХранилищеСертификатов = Неопределено;
	Если ТолькоВЛичномХранилище Тогда
		ХранилищеСертификатов = МенеджерКриптографии.ПолучитьХранилищеСертификатов(
															ТипХранилищаСертификатовКриптографии.ПерсональныеСертификаты);
	Иначе	
		ХранилищеСертификатов = МенеджерКриптографии.ПолучитьХранилищеСертификатов();
	КонецЕсли;
	
	Сертификат = ХранилищеСертификатов.НайтиПоОтпечатку(ДвоичныеДанныеОтпечатка);
	
	Возврат Сертификат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочие

// Преобразует двоичные данные в строку на сервере.
//
// Параметры:
//  ДвоичныеДанные - ДвоичныеДанные
//
// Возвращаемое значение:
//  <Строка> - Строка в кодировке UTF8
//
Функция СтрокаИзДвоичныхДанных(ДвоичныеДанные) Экспорт
	
	Если ТипЗнч(ДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда
		ВремФайл = ПолучитьИмяВременногоФайла();
		ДвоичныеДанные.Записать(ВремФайл);
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ВремФайл, КодировкаТекста.UTF8);
		УдалитьФайлы(ВремФайл);
		Результат = ТекстовыйДокумент.ПолучитьТекст();
		Возврат Результат;
	Иначе
		Возврат ДвоичныеДанные;
	КонецЕсли;
	
КонецФункции

// Создает присоединенные файлы пакетов, зашифрованных на клиенте
//
// Параметры:
// СоответствиеДанных - соответствие - содержит данные по пакетам и зашифрованным файлам
// СоответствиеПаролейДляЭДО - Соответствие - данные о паролях
//
Процедура СохранитьИОтправитьЗашифрованныеДанные(СоответствиеДанных, СоотвСоглашенийИСтруктурСертификатов, КолОтправленных) Экспорт
	
	МассивПЭД = Новый Массив;
	Для Каждого ЭлементПЭД из СоответствиеДанных Цикл
		ПакетЭД = ЭлементПЭД.Ключ;
		Если ПакетЭД.ВерсияФорматаПакета <> Перечисления.ВерсииФорматаПакетаЭД.Версия10 Тогда
			
			ЭлектронныеДокументыВнутренний.СформироватьЭДПрисоединенныйФайлПакетаОператораЭДО(
								ПакетЭД,
								ЭлементПЭД.Значение[0].ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
		Иначе
			ЭлектронныеДокументыСлужебный.СформироватьЭДПрисоединенныйФайлПакета(ПакетЭД, ЭлементПЭД.Значение);
		КонецЕсли;
		МассивПЭД.Добавить(ПакетЭД);
	КонецЦикла;
		
	Если СоответствиеДанных.Количество() > 0 И ЭлектронныеДокументыСлужебный.НемедленнаяОтправкаЭД() Тогда
		КолОтправленных = ОтправкаПакетовЭД(МассивПЭД, СоотвСоглашенийИСтруктурСертификатов);
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования
Функция ЗашифрованныйМаркер(СтруктураПараметровЗапросаМаркера, ПараметрыАутентификации = Неопределено) Экспорт
	
	Соединение = ЭлектронныеДокументыВнутренний.ПолучитьСоединение(СтруктураПараметровЗапросаМаркера.СпособОбменаЭД);
	Возврат ЭлектронныеДокументыВнутренний.ПолучитьМаркерОЭДО(СтруктураПараметровЗапросаМаркера, Соединение, Ложь, ПараметрыАутентификации)
	
КонецФункции

// Определяет, где нужно проводить крипто операции.
//
// Возвращаемое значение:
//  Булево - Истина, если криптография настроена на сервере или Ложь - если на клиенте
//
Функция ВыполнятьКриптооперацииНаСервере() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.СоздаватьЭлектронныеПодписиНаСервере.Получить() = Истина;
	
КонецФункции

// Предназначен для возврата на клиента двоичных данных ЭД, установленных подписей и сертификатов для дальнейшей
// проверки валидности подписей на клиенте
//
// Параметры:
//   МассивЭД - Массив - элементы массива - СправочникСсылка.ЭДПрисоединенныеФайлы
//
// Возвращаемое значение:
//   Массив - элементы - Структуры:
//                       ЭД           - СправочникСсылка.ЭДПрисоединенныеФайлы.
//                       Подписи      - Массив - Структуры с данными подписей.
//                       СоглашениеЭД - СправочникСсылка.СоглашенияОбИспользованииЭД.
//                       ДанныеЭД     - ДвоичныеДанные - данные ЭД.
//
Функция МассивСтруктурСодержимогоЭД(МассивЭД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.НомерСтроки,
	|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.Сертификат,
	|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.Подпись,
	|	СоглашенияОбИспользованииЭД.ПрограммаБанка КАК ПрограммаБанка,
	|	ЭДПрисоединенныеФайлы.ВидЭД КАК ВидЭД,
	|	СоглашенияОбИспользованииЭД.Ссылка КАК СоглашениеЭД,
	|	ЭДПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы.ЭлектронныеПодписи КАК ЭДПрисоединенныеФайлыЭлектронныеПодписи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
	|			ПО ЭДПрисоединенныеФайлы.СоглашениеЭД = СоглашенияОбИспользованииЭД.Ссылка
	|		ПО ЭДПрисоединенныеФайлыЭлектронныеПодписи.Ссылка = ЭДПрисоединенныеФайлы.Ссылка
	|ГДЕ
	|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.Ссылка В(&ЭД)";
	
	Запрос.УстановитьПараметр("ЭД", МассивЭД);
	Выборка = Запрос.Выполнить().Выбрать();
	МассивСтруктур = Новый Массив;
	ТекЭД = Неопределено;
	Пока Выборка.Следующий() Цикл
		Если ТекЭД <> Выборка.Ссылка Тогда
			ТекЭД = Выборка.Ссылка;
			МассивСтруктур.Добавить(Новый Структура);
			СтруктураВозврата = МассивСтруктур[МассивСтруктур.Количество() - 1];
			СтруктураВозврата.Вставить("ЭД", ТекЭД);
			СтруктураВозврата.Вставить("Подписи", Новый Массив);
			МассивПодписей = СтруктураВозврата.Подписи;
			СтруктураВозврата.Вставить("СоглашениеЭД", Выборка.СоглашениеЭД);
			ДанныеЭД = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(ТекЭД);
			Если (Выборка.ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку
					ИЛИ Выборка.ПрограммаБанка = Перечисления.ПрограммыБанка.iBank2)
				И Выборка.ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение Тогда
				
				СлужебныйЭД = ЭлектронныеДокументыСлужебный.СлужебныйЭДБанка(ТекЭД);
				СтруктураВозврата.Вставить("ДанныеЭД", ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(СлужебныйЭД));
			Иначе
				СтруктураВозврата.Вставить("ДанныеЭД", ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(ТекЭД));
			КонецЕсли;
		КонецЕсли;
		СтруктураПодписей = Новый Структура;
		СтруктураПодписей.Вставить("НомерСтроки", Выборка.НомерСтроки);
		СтруктураПодписей.Вставить("Сертификат",  Выборка.Сертификат.Получить());
		СтруктураПодписей.Вставить("Подпись",     Выборка.Подпись.Получить());
		МассивПодписей.Добавить(СтруктураПодписей);
	КонецЦикла;
	
	Возврат МассивСтруктур;
	
КонецФункции

// Предназначен для возврата на клиента двоичных данных ЭД, установленных подписей и сертификатов для дальнейшей
// проверки валидности подписей на клиенте
//
// Параметры:
//  ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы, ссылка на электронный документ
//
// Возвращаемое значение:
//  Структура или неопределено - данные электронного документа, Неопределено - если нет подписей
//
Функция СтруктураСодержимогоЭД(ЭД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.НомерСтроки,
	|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.Сертификат,
	|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.Подпись,
	|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.Ссылка.СоглашениеЭД.ПрограммаБанка КАК ПрограммаБанка,
	|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.Ссылка.ВидЭД КАК ВидЭД,
	|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.Ссылка.СоглашениеЭД
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы.ЭлектронныеПодписи КАК ЭДПрисоединенныеФайлыЭлектронныеПодписи
	|ГДЕ
	|	ЭДПрисоединенныеФайлыЭлектронныеПодписи.Ссылка = &ЭД";
	
	Запрос.УстановитьПараметр("ЭД", ЭД);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	СтруктураВозврата = Новый Структура;
	МассивПодписей = Новый Массив;
	Пока Выборка.Следующий() Цикл
		СтруктураПодписей = Новый Структура;
		СтруктураПодписей.Вставить("НомерСтроки", Выборка.НомерСтроки);
		СтруктураПодписей.Вставить("Сертификат",  Выборка.Сертификат.Получить());
		СтруктураПодписей.Вставить("Подпись",     Выборка.Подпись.Получить());
		МассивПодписей.Добавить(СтруктураПодписей);
	КонецЦикла;
	ДанныеЭД = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(ЭД);
	Если Выборка.Количество() > 0 И (Выборка.ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку
										ИЛИ Выборка.ПрограммаБанка = Перечисления.ПрограммыБанка.iBank2)
		И Выборка.ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение Тогда
		
		СлужебныйЭД = ЭлектронныеДокументыСлужебный.СлужебныйЭДБанка(ЭД);
		СтруктураВозврата.Вставить("ДанныеЭД", ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(СлужебныйЭД));
	Иначе
		СтруктураВозврата.Вставить("ДанныеЭД", ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(ЭД));
	КонецЕсли;
	СтруктураВозврата.Вставить("Подписи",  МассивПодписей);
	СтруктураВозврата.Вставить("СоглашениеЭД", Выборка.СоглашениеЭД);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Функция проверяет доступность каталога, указанного в настройках соглашения об обмене (через каталог),
// на доступность как с клиента (т.к. выбор каталога происходит с клиента), так и с сервера (т.к. работа с файлами
// выполняется на сервере).
//
// Параметры:
//  ПутьККаталогу - строка - полный путь к каталогу, доступность которого надо проверить (с клиента и с сервера);
//
Функция ПроверитьДоступностьКаталогаДляПрямогоОбмена(ПутьККаталогу) Экспорт
	
	КаталогиДоступны = Ложь;
	Если ЗначениеЗаполнено(ПутьККаталогу) Тогда
		ПутьККаталогу = СокрЛП(ПутьККаталогу);
		УдалитьКаталогПослеТеста = Ложь;
		Каталог = Новый Файл(ПутьККаталогу);
		Если НЕ Каталог.Существует() Тогда
			УдалитьКаталогПослеТеста = Истина;
			СоздатьКаталог(ПутьККаталогу);
		КонецЕсли;
		Разделитель = ?(Прав(ПутьККаталогу, 1) = "\", "", "\");
		ТестовыйФайл = Новый ТекстовыйДокумент;
		ПолноеИмяТестовогоФайла = ПутьККаталогу + Разделитель + "EDI_" + Строка(Новый УникальныйИдентификатор) + ".tst";
		ТестовыйФайл.Записать(ПолноеИмяТестовогоФайла);
		КаталогиДоступны = ПрочитатьТестовыйФайлНаСервере(ПолноеИмяТестовогоФайла);
		Если НЕ КаталогиДоступны Тогда
			ТекстСообщения = НСтр("ru = 'Указанный каталог %1 не может использоваться для обмена, так как он не доступен с сервера.
				|Необходимо указать сетевой каталог для обмена.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", """" + ПутьККаталогу + """");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Если УдалитьКаталогПослеТеста Тогда
			УдалитьФайлы(Каталог.ПолноеИмя);
		Иначе
			УдалитьФайлы(ПолноеИмяТестовогоФайла);
		КонецЕсли;
	КонецЕсли;
	
	Возврат КаталогиДоступны;
	
КонецФункции

// Возвращает массив документов, которые могут быть проведены
//
// Параметры:
//  МассивДокументов - Массив - массив ссылок на документы 
//
// Возвращаемое значение:
//  Массив - массив документов, которые можно проводить
//
Функция МассивПроводимыхДокументов(МассивДокументов) Экспорт
	
	МассивПроводныхДокументов = Новый Массив;
	МассивТиповНеПроводныхДокументов = Новый Массив;
	Для каждого Элемент из МассивДокументов Цикл
		ИмяДокумента = Элемент.Метаданные().ПолноеИмя();
		Если Метаданные.Документы.Содержит(Метаданные.НайтиПоПолномуИмени(ИмяДокумента)) Тогда
			
			Если Элемент.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Запретить Тогда
				Если МассивТиповНеПроводныхДокументов.Найти(ТипЗнч(Элемент)) = Неопределено Тогда
					МассивТиповНеПроводныхДокументов.Добавить(ТипЗнч(Элемент));
				КонецЕсли;
			КонецЕсли;
			
			МассивПроводныхДокументов.Добавить(Элемент)
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ТипНеПроводногоДокумента Из МассивТиповНеПроводныхДокументов Цикл
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияТипаИзМассива(МассивПроводныхДокументов, ТипНеПроводногоДокумента);
	КонецЦикла;
	
	Возврат МассивПроводныхДокументов;
	
КонецФункции

// Возвращает способ обмена электронными документами по пакету.
//
// Параметры:
//  Пакет - Ссылка на документ ПакетЭД
// Возвращаемое значение
//  СпособОбменаЭД - ссылка на перечисление СпособыОбменаЭД
//
Функция ПолучитьСпособОбменаЭДИзПакетаЭД(Пакет) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пакет, "СпособОбменаЭД");
	
КонецФункции

// Только для внутреннего использования
Функция ОпределитьОбъектПривязки(СтруктураПараметровДокумента)
	
	УстановитьПривилегированныйРежим(Истина);
	ВозвращаемоеЗначение = Неопределено;
	
	Если СтруктураПараметровДокумента.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
		ИЛИ СтруктураПараметровДокумента.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
		ИЛИ СтруктураПараметровДокумента.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
		ЭДВладелецСсылка = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку(
			Новый УникальныйИдентификатор(СтруктураПараметровДокумента.ИдЭДВладельца));
		Если ЭДВладелецСсылка.ПолучитьОбъект() <> Неопределено Тогда
			СтруктураПараметровДокумента.Вставить("ЭлектронныйДокументВладелец", ЭДВладелецСсылка);
			ВозвращаемоеЗначение = ЭДВладелецСсылка.ВладелецФайла;
		Иначе
			ТекстОшибки = Нстр("ru = 'Не найден объект привязки входящего ЭД(%1) по идентификатору: %2'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										ТекстОшибки,
										СтруктураПараметровДокумента.ВидЭД,
										СтруктураПараметровДокумента.ИдЭДВладельца);
			ВидОперации = НСтр("ru = 'Распаковка пакета'");
			ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ТекстОшибки);
		КонецЕсли;
	Иначе
		ПозПодстроки = Найти(СтруктураПараметровДокумента.НомерЭД, "##") - 1;
		Если ПозПодстроки > 0 Тогда
			ЭлектронныйНомерДокумента = Лев(СтруктураПараметровДокумента.НомерЭД, ПозПодстроки);
		Иначе
			ЭлектронныйНомерДокумента = СтруктураПараметровДокумента.НомерЭД;
		КонецЕсли;
		Если ЗначениеЗаполнено(ЭлектронныйНомерДокумента) Тогда
			ЗапросДокументовОснований = Новый Запрос;
			ЗапросДокументовОснований.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ЭДПрисоединенныеФайлы.ВладелецФайла.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
			|ГДЕ
			|	(НЕ ЭДПрисоединенныеФайлы.ВладелецФайла ССЫЛКА Документ.ПакетЭД)
			|	И ЭДПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ
			|	И ЭДПрисоединенныеФайлы.НомерЭД ПОДОБНО &Параметр
			|	И ЭДПрисоединенныеФайлы.ВидЭД = &ВидЭД
			|	И ЭДПрисоединенныеФайлы.НаправлениеЭД = &НаправлениеЭД";
			ЗапросДокументовОснований.УстановитьПараметр("НаправлениеЭД", СтруктураПараметровДокумента.НаправлениеЭД);
			ЗапросДокументовОснований.УстановитьПараметр("Параметр",      ЭлектронныйНомерДокумента + "%");
			ЗапросДокументовОснований.УстановитьПараметр("ВидЭД",         СтруктураПараметровДокумента.ВидЭД);
			
			НайденныеДокументы = ЗапросДокументовОснований.Выполнить().Выбрать();
			Если НайденныеДокументы.Следующий() Тогда
				ВозвращаемоеЗначение = НайденныеДокументы.Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Процедура закрывает электронный документооборот для переданного массива ссылок на документы ИБ.
//
// Параметры:
//  МассивСсылокНаВладельцев - Массив - массив ссылок на документы ИБ, для которых требуется закрыть ЭДО
//  ПричинаЗакрытия - Строка - описание причины закрытия ЭДО
//  КоличествоОбработанныхЭД - Число - число документов ИБ, для которых ЭДО был закрыт
//
Процедура ЗакрытьДокументыПринудительно(Знач МассивСсылокНаВладельцев, Знач ПричинаЗакрытия, КоличествоОбработанныхЭД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.СсылкаНаОбъект,
	|	СостоянияЭД.ЭлектронныйДокумент
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект В(&МассивСсылок)";
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылокНаВладельцев);
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	ТЗОбъектов = Новый ТаблицаЗначений;
	ТЗОбъектов.Колонки.Добавить("СсылкаНаОбъект");
	ТЗОбъектов.Колонки.Добавить("ЭлектронныйДокумент");
	
	Для Каждого Элемент Из МассивСсылокНаВладельцев Цикл
		НовСтрока = ТЗОбъектов.Добавить();
		СтрокаТЗ = ТЗ.Найти(Элемент, "СсылкаНаОбъект");
		ЭлектронныйДокумент = Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка();
		Если СтрокаТЗ <> Неопределено Тогда
			ЭлектронныйДокумент = СтрокаТЗ.ЭлектронныйДокумент;
		КонецЕсли;
		НовСтрока.СсылкаНаОбъект = Элемент;
		НовСтрока.ЭлектронныйДокумент = ЭлектронныйДокумент;
	КонецЦикла;
	
	Для Каждого Строка ИЗ ТЗОбъектов Цикл
		ЗаписьРегистра = РегистрыСведений.СостоянияЭД.СоздатьМенеджерЗаписи();
		ЗаписьРегистра.СсылкаНаОбъект = Строка.СсылкаНаОбъект;
		ЗаписьРегистра.ДействияСНашейСтороны = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
		ЗаписьРегистра.ДействияСоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
		ЗаписьРегистра.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно;
		ЗаписьРегистра.ЭлектронныйДокумент = Строка.ЭлектронныйДокумент;
		ЗаписьРегистра.Комментарий = ПричинаЗакрытия;
		ЗаписьРегистра.Записать();
	КонецЦикла;
	
	КоличествоОбработанныхЭД = ТЗОбъектов.Количество();
	
КонецПроцедуры

Функция ЕстьДоступныеСертификаты(МассивОтпечатковСертификатов, ЭД) Экспорт
	
	Если Не ТипЗнч(ЭД) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.Ссылка,
	|	ЭДПрисоединенныеФайлы.ВидЭД,
	|	ЭДПрисоединенныеФайлы.СоглашениеЭД,
	|	ЭДПрисоединенныеФайлы.ПрофильНастроекЭДО
	|ПОМЕСТИТЬ ВТ_ЭД
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Сертификаты.Ссылка
	|ИЗ
	|	ВТ_ЭД КАК ВТ_ЭД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодписываемыеВидыЭД КАК ВидыЭДЭП
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ПрофилиЭДОСертификаты.Сертификат КАК Сертификат
	|				ИЗ
	|					ВТ_ЭД КАК ВТ_ЭД
	|						ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК ПрофилиЭДОСертификаты
	|						ПО ВТ_ЭД.ПрофильНастроекЭДО = ПрофилиЭДОСертификаты.Ссылка
	|				
	|				ОБЪЕДИНИТЬ ВСЕ
	|				
	|				ВЫБРАТЬ
	|					СоглашенияЭДСертификаты.Сертификат
	|				ИЗ
	|					ВТ_ЭД КАК ВТ_ЭД
	|						ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СоглашенияЭДСертификаты
	|						ПО ВТ_ЭД.СоглашениеЭД = СоглашенияЭДСертификаты.Ссылка) КАК СертификатыИзНастроекИПрофилей
	|				ПО (СертификатыИзНастроекИПрофилей.Сертификат = Сертификаты.Ссылка)
	|			ПО ВидыЭДЭП.СертификатЭП = Сертификаты.Ссылка
	|				И ВидыЭДЭП.СертификатЭП = Сертификаты.Ссылка
	|		ПО ВТ_ЭД.ВидЭД = ВидыЭДЭП.ВидЭД
	|ГДЕ
	|	НЕ Сертификаты.Отозван
	|	И (Сертификаты.Пользователь = &ТекущийПользователь
	|			ИЛИ Сертификаты.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|			ИЛИ Сертификаты.Пользователь = &ПользовательНеУказан)
	|	И НЕ Сертификаты.ПометкаУдаления
	|	И ВидыЭДЭП.Использовать
	|	И Сертификаты.Отпечаток В(&МассивОтпечатков)";
	
	Запрос.УстановитьПараметр("МассивОтпечатков", МассивОтпечатковСертификатов);
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.АвторизованныйПользователь());
	СвойстваНеуказанногоПользователя = ПользователиСлужебный.СвойстваНеуказанногоПользователя();
	Запрос.УстановитьПараметр("ПользовательНеУказан", СвойстваНеуказанногоПользователя.Ссылка);
	Запрос.УстановитьПараметр("Ссылка", ЭД);

	ЕстьСертификаты = НЕ Запрос.Выполнить().Пустой();
	
	Возврат ЕстьСертификаты;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Соглашения

// Используется в случае отсутствия возможности предложить пользователю выбрать сертификат из списка доступных и/или
// ввести пароль для сертификата (например при выполнении регламентного задания).
// Возвращает Истина, если для входящих переменных найден хотя бы один сертификат с сохраненным в ИБ паролем.
// 
// Параметры:
//  МассивПрофилейНастроекЭДО     - Массив - содержит ссылки на профили настроек ЭДО, по которым требуется определить сертификаты;
//  ПараметрыАвторизации - Соответствие - в этой переменной в вызывающий метод возвращается соответствие:
//    * Ключ     - СправочникСсылка.СоглашенияОбИспользованииЭД - соглашение, для которого определен сертификат авторизации.
//    * Значение - Соответствие - соответствие сертификата и его параметров:
//       ** Ключ     - СправочникСсылка.СертификатыЭП - сертификат авторизации.
//       ** Значение - Структура - структура параметров сертификата:
//           *** СертификатПодписи           - СправочникСсылка.СертификатыЭП.
//           *** ПарольПолучен               - Булево.
//           *** ПарольПользователя          - Строка.
//           *** Отпечаток                   - Строка.
//           *** Отозван                     - Булево.
//           *** ДвоичныеДанныеСертификата             - ХранилищеЗначений.
//           *** ОповещенОСрокеДействия      - Булево.
//           *** ДатаОкончания               - Дата.
//           *** ЗапомнитьПарольКСертификату - Булево.
//
// Возвращаемое значение:
//  Булево - Истина, если найдены сертификат(ы) с сохраненными в ИБ паролями, иначе Ложь.
//
Функция ДоступныПараметрыДляАвторизацииНаСервереОператора(Знач МассивПрофилейНастроекЭДО = Неопределено,
														ПараметрыАвторизации = Неопределено) Экспорт
	
	Попытка
		МассивОтпечатковСертификатов = МассивОтпечатковСертификатов();
	Исключение
		МассивОтпечатковСертификатов = Новый Массив;
	КонецПопытки;
	
	ДоступныПараметры = Ложь;
	Если МассивОтпечатковСертификатов.Количество() > 0 Тогда
		СтМассивовСтруктурСертификатов = Новый Структура("МассивОтпечатковСервер", МассивОтпечатковСертификатов);
		
		Результат = СтруктураСоответствийСоглашенийИСертификатовАвторизации(МассивПрофилейНастроекЭДО, , СтМассивовСтруктурСертификатов);
		
		ПараметрыАвторизации = Новый Соответствие;
		СоотвСоглашенийИМассиваСертификатовАвторизации = Неопределено;
		СоотвСертификатовИИхСтруктур = Неопределено;
		Если Результат.Свойство("СоотвСоглашенийИМассиваСертификатовАвторизации", СоотвСоглашенийИМассиваСертификатовАвторизации)
			И Результат.Свойство("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур)
			И ТипЗнч(СоотвСоглашенийИМассиваСертификатовАвторизации) = Тип("Соответствие")
			И ТипЗнч(СоотвСертификатовИИхСтруктур) = Тип("Соответствие") Тогда
			// В СоотвСоглашенийИМассиваСертификатовАвторизации - Ключ - Соглашение, Значение - Массив сертификатов
			// по данному соглашению. Функция должна вернуть (в ПараметрыАвторизации) Соответствие, в котором Ключ - Соглашение,
			// Значение - Соответствие сертификата и его параметров.
			Для Каждого Элемент Из СоотвСоглашенийИМассиваСертификатовАвторизации Цикл
				
				ПрофильНастроекЭДО = Элемент.Ключ;
				РеквизитыПрофиляНастроекЭДО = ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыПрофиляНастроекЭДО(ПрофильНастроекЭДО);
				
				МассивСертификатов = Элемент.Значение;
				Для Каждого Сертификат Из МассивСертификатов Цикл
					КлючПоискаСертификата = Строка(Сертификат.УникальныйИдентификатор()) + "_" + РеквизитыПрофиляНастроекЭДО.ИдентификаторОрганизации;
					ПараметрыСертификата = СоотвСертификатовИИхСтруктур.Получить(КлючПоискаСертификата);
					
					Если ПараметрыСертификата.ПарольПолучен Тогда
						ПараметрыАвторизации.Вставить(Элемент.Ключ, ПараметрыСертификата);
						ДоступныПараметры = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДоступныПараметры;
	
КонецФункции

// Функция возвращает соответствие соглашению - структуры данных сертификата,
// содержащую ссылку на сертификат и его доп.реквизиты (запомнить пароль, пароль пользователя, маркер расшифрованный/зашифрованный).
// 
// Параметры:
//  МассивСоглашений               - Массив    - содержит ссылки на соглашения, по которым требуется определить сертификаты;
//  СтМассивовСтруктурСертификатов - Структура - содержит структуру со свойствами:
//    * МассивСтруктурСертификатовСервер - Массив - массив структур сертификатов личного хранилища с сервера.
//    * МассивСтруктурСертификатовКлиент - Массив - массив структур сертификатов личного хранилища с клиента.
//  СоотвСертификатовИПаролей      - Фиксированное соответствие:
//    * Ключ     - СправочникСсылка.СертификатыЭП - сертификат авторизации.
//    * Значение - Строка - пароль к сертификату.
//
// Возвращаемое значение:
//  Соответствие: ключ - соглашение об обмене ЭД, значение - структура параметров сертификата ЭП
//    ("СертификатДляАвторизации, ЗапомнитьПарольКСертификату, ПарольПользователя, МаркерРасшифрованный, МаркерЗашифрованный").
//
Функция СоотвСоглашенийИСоответствийСертификатовИПараметровДляАвторизацииСервер(
		Знач МассивПрофилейНастроекЭДО = Неопределено, Знач СтМассивовСтруктурСертификатов = Неопределено,
		Знач СоотвСертификатовИПаролей = Неопределено, ТолькоБанки = Ложь) Экспорт
	
	Результат = СтруктураСоответствийСоглашенийИСертификатовАвторизации(МассивПрофилейНастроекЭДО, ,
											СтМассивовСтруктурСертификатов, СоотвСертификатовИПаролей, ТолькоБанки);
	
	СоотвСоглашений = Новый Соответствие;
	СоотвСоглашенийИМассиваСертификатовАвторизации = Неопределено;
	СоотвСертификатовИИхСтруктур = Неопределено;
	Если Результат.Свойство("СоотвСоглашенийИМассиваСертификатовАвторизации", СоотвСоглашенийИМассиваСертификатовАвторизации)
		И Результат.Свойство("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур)
		И ТипЗнч(СоотвСоглашенийИМассиваСертификатовАвторизации) = Тип("Соответствие")
		И ТипЗнч(СоотвСертификатовИИхСтруктур) = Тип("Соответствие") Тогда
		// В СоотвСоглашенийИМассиваСертификатовАвторизации - Ключ - Соглашение, Значение - Массив сертификатов
		// по данному соглашению. Функция должна вернуть Соответствие, в котором Ключ - Соглашение,
		// Значение - Соответствие сертификатов и их параметров.
		Для Каждого Элемент Из СоотвСоглашенийИМассиваСертификатовАвторизации Цикл
			
			ПрофильНастроекЭДО = Элемент.Ключ;
			РеквизитыПрофиляНастроекЭДО = ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыПрофиляНастроекЭДО(ПрофильНастроекЭДО);
			
			Соответствие = Новый Соответствие;
			МассивСертификатов = Элемент.Значение;
			Для Каждого Сертификат Из МассивСертификатов Цикл
				КлючПоискаСертификата = Строка(Сертификат.УникальныйИдентификатор()) + "_" + РеквизитыПрофиляНастроекЭДО.ИдентификаторОрганизации;
				
				Структура = СоотвСертификатовИИхСтруктур.Получить(КлючПоискаСертификата);
				Если ЗначениеЗаполнено(Структура) И Структура.ПарольПолучен Тогда
					// Авторизоваться на сервере оператора можно любым зарегистрированным в соглашении сертификатом,
					// поэтому, если есть несколько доступных для авторизации сертификатов и среди них есть хотя бы
					// один с сохраненным (в сертификате или сеансе) паролем, то вернем именно его, чтобы не открывать
					// диалог выбора сертификата.
					Соответствие = Новый Соответствие;
					Соответствие.Вставить(Сертификат, Структура);
					Прервать;
				КонецЕсли;
				Соответствие.Вставить(Сертификат, Структура);
			КонецЦикла;
			СоотвСоглашений.Вставить(Элемент.Ключ, Соответствие);
		КонецЦикла;
	КонецЕсли;
	
	Возврат СоотвСоглашений;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Получение реквизитов объектов

// только для внутреннего использования
Функция РеквизитыНастройкиЭДО(Знач НастройкаЭДО) Экспорт
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НастройкаЭДО,
		"ИдентификаторОрганизации, ЭтоИнтеркампани, СпособОбменаЭД, ИспользуетсяКриптография, ПрограммаБанка,
		|СтатусСоглашения, СертификатКонтрагентаДляШифрования, АутентификацияПоСертификату, ПометкаУдаления, АдресСервера");
	
КонецФункции

// Возвращает ссылку на соглашение ЭД для переданного ЭД
//
// Параметры
//  <ЭД>  - <СправочникСсылка.ЭДПрисоединенныеФайлы> - электронный документ
//
// Возвращаемое значение:
//   <СправочникСсылка.СоглашенияОбИспользованииЭД> - соглашение ЭД
//
Функция СоглашениеЭД(Знач ЭД) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭД, "СоглашениеЭД");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Сбербанк

Процедура ДобавитьОтпечаткиСертификатовСбербанка(МассивОтпечатков)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ПрограммыБанков.СертификатЭП.Отпечаток КАК Отпечаток
	               |ИЗ
	               |	РегистрСведений.ПрограммыБанков КАК ПрограммыБанков
	               |ГДЕ
	               |	ПрограммыБанков.ПрограммаБанка = ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.СбербанкОнлайн)";
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивОтпечатков.Добавить(Выборка.Отпечаток);
	КонецЦикла
	
КонецПроцедуры

Процедура СохранитьВыпискуСбербанка(ЭД, НастройкаЭДО, Идентификатор, МассивНовыхЭД, ВладелецЭД = Неопределено)
	
	Для Каждого ВыпискаXDTO из ЭД.Statements.Statement Цикл
		ВнешнИдентификатор = ВыпискаXDTO.docId;
		Если ВыпискаУжеБылаПолучена(НастройкаЭДО, ВнешнИдентификатор) Тогда
			Продолжить;
		КонецЕсли;
		ВремФайл = ПолучитьИмяВременногоФайла();
		ЭлектронныеДокументыВнутренний.ВыгрузитьЭДвФайл(ВыпискаXDTO, ВремФайл);
		ДвоичныеДанныеФайлаОтвета = Новый ДвоичныеДанные(ВремФайл);
		СсылкаНаХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайлаОтвета);
		ТекДата = ТекущаяДатаСеанса();
		ДатаНачала = ВыпискаXDTO.beginDate;
		ДатаНачала = Дата(СтрЗаменить(Сред(ДатаНачала, 1, 10), "-", ""));
		ДатаОкончания = ВыпискаXDTO.endDate;
		ДатаОкончания = Дата(СтрЗаменить(Сред(ДатаОкончания, 1, 10), "-", ""));
		ПредставлениеДокумента = Нстр("ru = 'Выписка банка за период с'") + " " + Формат(ДатаНачала, "ДЛФ=D")
			+ " " + Нстр("ru = 'по'") + " " + Формат(ДатаОкончания, "ДЛФ=D");
		ЭДВыпискаБанка = ПрисоединенныеФайлы.ДобавитьФайл(НастройкаЭДО, ПредставлениеДокумента, "xml", ТекДата, ТекДата,
			СсылкаНаХранилище, , , Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());
		ДайджестBase64 = Дайджест(ВремФайл, НастройкаЭДО);
		УдалитьФайлы(ВремФайл);
		
		АдресХранилища = ПоместитьВоВременноеХранилище(Base64Значение(ДайджестBase64));
		ДопФайл = ПрисоединенныеФайлы.ДобавитьФайл(НастройкаЭДО, "СхемаДанных", , , , АдресХранилища, , ,
			Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());
		ПараметрыФайла = Новый Структура;
		ПараметрыФайла.Вставить("ВидЭД",                       Перечисления.ВидыЭД.ДопДанные);
		ПараметрыФайла.Вставить("ЭлектронныйДокументВладелец", ЭДВыпискаБанка);
		ПараметрыФайла.Вставить("НаименованиеФайла",           "СхемаДанных");
		ПараметрыФайла.Вставить("СтатусЭД",                    Перечисления.СтатусыЭД.Получен);
		ИзменитьПоСсылкеПрисоединенныйФайл(ДопФайл, ПараметрыФайла, Ложь);
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("СоглашениеЭД", НастройкаЭДО);
		СтруктураПараметров.Вставить("ВидЭД", Перечисления.ВидыЭД.ВыпискаБанка);
		СтруктураПараметров.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Получен);
		СтруктураПараметров.Вставить("ДатаИзмененияСтатусаЭД", ТекДата);
		СтруктураПараметров.Вставить("УникальныйИДВнешний", ВнешнИдентификатор);
		СтруктураПараметров.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Входящий);
		СтруктураПараметров.Вставить("НаименованиеФайла", ПредставлениеДокумента);
		СтруктураПараметров.Вставить("ДополнительнаяИнформация", ВыпискаXDTO.acc);
		СтруктураПараметров.Вставить("ДатаВыпискиБанка", Дата(СтрЗаменить(Сред(ВыпискаXDTO.beginDate, 1, 10), "-", "")));
		Если НЕ ВладелецЭД = Неопределено Тогда
			СтруктураПараметров.Вставить("ЭлектронныйДокументВладелец", ВладелецЭД);
			СтруктураВладельца = Новый Структура("СтатусЭД", Перечисления.СтатусыЭД.ПолученоПодтверждение);
			ИзменитьПоСсылкеПрисоединенныйФайл(ВладелецЭД, СтруктураВладельца, Ложь);
		КонецЕсли;
		ИзменитьПоСсылкеПрисоединенныйФайл(ЭДВыпискаБанка, СтруктураПараметров, Ложь);
		
		Если Не ВыпискаXDTO.Sign = Неопределено Тогда
			ХранилищеСертификата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				НастройкаЭДО, "СертификатКонтрагентаДляШифрования");
			ДанныеСертификата = ХранилищеСертификата.Получить();
			Если Не ДанныеСертификата = Неопределено Тогда
				Сертификат = Новый СертификатКриптографии(ДанныеСертификата);
				ВладелецПодписи = ВыпискаXDTO.Sign.issuer;
				ДвоичныеДанныеПодписи = ВыпискаXDTO.Sign.value;
				ДатаУстановкиПодписи = ЭлектронныеДокументыСлужебный.ДатаУстановкиПодписи(ДвоичныеДанныеПодписи);
				ДатаУстановкиПодписи = ?(ЗначениеЗаполнено(ДатаУстановкиПодписи), ДатаУстановкиПодписи, ТекущаяДатаСеанса());
				СвойстваПодписи = Новый Структура;
				СвойстваПодписи.Вставить("Подпись", ДвоичныеДанныеПодписи);
				СвойстваПодписи.Вставить("УстановившийПодпись", Пользователи.АвторизованныйПользователь());
				СвойстваПодписи.Вставить("ДатаПодписи", ДатаУстановкиПодписи);
				СвойстваПодписи.Вставить("Сертификат", ДанныеСертификата);
				СвойстваПодписи.Вставить("Отпечаток", Сертификат.Отпечаток);
				СвойстваПодписи.Вставить("КомуВыданСертификат", ВладелецПодписи);
				ЭлектроннаяПодпись.ДобавитьПодпись(ЭДВыпискаБанка, СвойстваПодписи);
			КонецЕсли;
		КонецЕсли;
		МассивНовыхЭД.Добавить(ЭДВыпискаБанка);
		СохранитьШтампыСбербанка(ВыпискаXDTO);
	КонецЦикла;
	УдалитьИдентификаторЗапроса(НастройкаЭДО, Идентификатор, Перечисления.ВидыЭД.ЗапросНочнойВыписки);
	
КонецПроцедуры

Процедура СохранитьШтампыСбербанка(ВыпискаXDTO)
	
	Если ВыпискаXDTO.Docs = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеШтампов = Новый Соответствие;
	
	МассивВнешнихИдентификаторов = Новый Массив;
	Для Каждого ПлатежноеПоручениеXDTO Из ВыпискаXDTO.Docs.TransInfo Цикл
		Если НЕ ПлатежноеПоручениеXDTO.Params = Неопределено Тогда
			ВнешнийИдентификатор = ПлатежноеПоручениеXDTO.docid;
			ДанныеШтампа = Новый Структура;
			Для Каждого Param Из ПлатежноеПоручениеXDTO.Params.Param Цикл
				Если Param.Name = "StampBankName" Тогда
					ДанныеШтампа.Вставить("НаименованиеБанка", Param.Value);
				ИначеЕсли Param.Name = "StampBranch" Тогда
					ДанныеШтампа.Вставить("Отделение", Param.Value);
				ИначеЕсли Param.Name = "StampSubBranch" Тогда
					ДанныеШтампа.Вставить("Офис", Param.Value);
				ИначеЕсли Param.Name = "StampDate" Тогда
					ДанныеШтампа.Вставить("ДатаОперации", Param.Value);
				ИначеЕсли Param.Name = "StampBIC" Тогда
					ДанныеШтампа.Вставить("БИК", Param.Value);
				ИначеЕсли Param.Name = "StampStatus" Тогда
					ДанныеШтампа.Вставить("Статус", Param.Value);
				КонецЕсли;
			КонецЦикла;
			МассивВнешнихИдентификаторов.Добавить(ВнешнийИдентификатор);
			ДанныеШтампов.Вставить(ВнешнийИдентификатор, ДанныеШтампа);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивВнешнихИдентификаторов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.Ссылка КАК ЭДПлатежноеПоручение,
	|	ЭДПрисоединенныеФайлы.УникальныйИДВнешний
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.УникальныйИДВнешний В(&МассивВнешнихИдентификаторов)
	|	И ЭДПрисоединенныеФайлы.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПлатежноеПоручение)";
	Запрос.УстановитьПараметр("МассивВнешнихИдентификаторов", МассивВнешнихИдентификаторов);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДополнительныеРеквизиты = Новый Структура("ДанныеШтампа", ДанныеШтампов.Получить(Выборка.УникальныйИДВнешний));
		ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(
			Выборка.ЭДПлатежноеПоручение, ДополнительныеРеквизиты, Ложь);
	КонецЦикла;
	
КонецПроцедуры

Процедура СохранитьОтветСбербанка(ЭД, СоглашениеЭД, Идентификатор, ВидЭД, МассивНовыхЭД)
	
	УдалитьИдентификаторЗапроса(СоглашениеЭД, Идентификатор, ВидЭД);
	
	Если ВидЭД = Перечисления.ВидыЭД.ЗапросНочнойВыписки И НЕ ЭД.Statements = Неопределено Тогда
		СохранитьВыпискуСбербанка(ЭД, СоглашениеЭД, Идентификатор, МассивНовыхЭД);
		Возврат;
	КонецЕсли;
		
	Если ЭД.Tickets = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросЭД = Новый Запрос;
	ЗапросЭД.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭДПрисоединенныеФайлы.Ссылка
	|ПОМЕСТИТЬ ЭДВладелец
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.УникальныйИД = &УникальныйИД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭДПрисоединенныеФайлы.Ссылка
	|ПОМЕСТИТЬ ОтветБанкаЭД
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец В
	|			(ВЫБРАТЬ
	|				ЭДВладелец.Ссылка
	|			ИЗ
	|				ЭДВладелец КАК ЭДВладелец)
	|	И ЭДПрисоединенныеФайлы.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.Квитанция)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭДПрисоединенныеФайлы.Ссылка
	|ПОМЕСТИТЬ ДайджестКвитанции
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ДопДанные)
	|	И ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец В
	|			(ВЫБРАТЬ
	|				ЭДВладелец.Ссылка
	|			ИЗ
	|				ОтветБанкаЭД КАК ЭДВладелец)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтветБанкаЭД.Ссылка КАК ЭДОтветБанка,
	|	ЭДВладелец.Ссылка КАК ЭДВладелец,
	|	ДайджестКвитанции.Ссылка КАК ЭДДайджестКвитанции
	|ИЗ
	|	ЭДВладелец КАК ЭДВладелец
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОтветБанкаЭД КАК ОтветБанкаЭД
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДайджестКвитанции КАК ДайджестКвитанции
	|		ПО (ИСТИНА)";

	Для Каждого Тикет ИЗ ЭД.Tickets.Ticket Цикл
		Если Тикет.Info = Неопределено ИЛИ Тикет.Info.docExtId = Неопределено И ЗначениеЗаполнено(Тикет.docId) Тогда
			УникальныйИДВнешний = Тикет.docId;
			ЗапросЭД.Текст = СтрЗаменить(ЗапросЭД.Текст, "УникальныйИД", "УникальныйИДВнешний");
			ЗапросЭД.УстановитьПараметр("УникальныйИДВнешний", УникальныйИДВнешний);
		ИначеЕсли ЗначениеЗаполнено(Тикет.Info.docExtId) Тогда
			УникальныйИД = Тикет.Info.docExtId;
			ЗапросЭД.УстановитьПараметр("УникальныйИД", УникальныйИД);
		ИначеЕсли ЗначениеЗаполнено(ЭД.RequestId) Тогда
			УникальныйИД = ЭД.RequestId;
			ЗапросЭД.УстановитьПараметр("УникальныйИД", УникальныйИД);
		КонецЕсли;
		ВыборкаЭД = ЗапросЭД.Выполнить().Выбрать();
		Если ВыборкаЭД.Следующий() Тогда
			Если Не ЗначениеЗаполнено(ВыборкаЭД.ЭДВладелец) Тогда
				Возврат;
			КонецЕсли;
			Если  НЕ ЭД.Statements = Неопределено Тогда
				СохранитьВыпискуСбербанка(ЭД, СоглашениеЭД, Идентификатор, МассивНовыхЭД, ВыборкаЭД.ЭДВладелец);
				Возврат;
			КонецЕсли;
			ВремФайл = ПолучитьИмяВременногоФайла();
			ЭлектронныеДокументыВнутренний.ВыгрузитьЭДвФайл(Тикет, ВремФайл);
			ДвоичныеДанныеФайлаОтвета = Новый ДвоичныеДанные(ВремФайл);
			СсылкаНаХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайлаОтвета);
			
			ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаЭД.ЭДВладелец, "ВладелецФайла");
			СтруктураВладельца = Новый Структура;
			
			ТекДата = ТекущаяДатаСеанса();
			Если НЕ ЗначениеЗаполнено(ВыборкаЭД.ЭДОтветБанка) Тогда
				НазваниеЭД = Нстр("ru = 'Квитанция от'")+ " " + Формат(ТекДата, "ДЛФ=DDT");
				ЭДОтветБанка = ПрисоединенныеФайлы.ДобавитьФайл(ВладелецФайла, НазваниеЭД, "xml", ТекДата, ТекДата,
										СсылкаНаХранилище, , , Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());
				СтруктураОтветаБанка = Новый Структура;
				СтруктураОтветаБанка.Вставить("ЭлектронныйДокументВладелец", ВыборкаЭД.ЭДВладелец);
				СтруктураОтветаБанка.Вставить("СоглашениеЭД",                СоглашениеЭД);
				СтруктураОтветаБанка.Вставить("УникальныйИД",                ЭД.responseId);
				СтруктураОтветаБанка.Вставить("ВидЭД",                       Перечисления.ВидыЭД.Квитанция);
				СтруктураОтветаБанка.Вставить("СтатусЭД",                    Перечисления.СтатусыЭД.Получен);
				СтруктураОтветаБанка.Вставить("НаправлениеЭД",               Перечисления.НаправленияЭД.Входящий);
				СтруктураОтветаБанка.Вставить("НаименованиеФайла",           Нстр("ru = 'Квитанция от'")+ " " + Формат(ТекДата, "ДЛФ=DDT"));
				ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ЭДОтветБанка, СтруктураОтветаБанка, Ложь);
				СтруктураВладельца.Вставить("УникальныйИДВнешний", Тикет.docId);
			Иначе
				ПрисоединенныеФайлыСлужебный.ЗаписатьФайлВИнформационнуюБазу(ВыборкаЭД.ЭДОтветБанка, ДвоичныеДанныеФайлаОтвета);
				
				СтруктураОтветаБанка = Новый Структура;
				СтруктураОтветаБанка.Вставить("Наименование", Нстр("ru = 'Квитанция от'") + " " + Формат(ТекДата, "ДЛФ=DDT"));
				СтруктураОтветаБанка.Вставить("Расширение",                   "xml");
				СтруктураОтветаБанка.Вставить("ДатаМодификацииУниверсальная", ТекДата);
				СтруктураОтветаБанка.Вставить("ДатаСоздания",                 ТекДата);
				СтруктураОтветаБанка.Вставить("ДатаИзмененияСтатусаЭД",       ТекущаяДатаСеанса());
				СтруктураОтветаБанка.Вставить("УникальныйИД",                 ЭД.responseId);
				СтруктураОтветаБанка.Вставить("УдалитьЭП");
				ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(
								ВыборкаЭД.ЭДОтветБанка, СтруктураОтветаБанка, Ложь);
				ЭДОтветБанка = ВыборкаЭД.ЭДОтветБанка;
			КонецЕсли;
			ДайджестBase64 = Дайджест(ВремФайл, СоглашениеЭД);
			УдалитьФайлы(ВремФайл);
			
			ДвоичныеДанныеДайджеста = Base64Значение(ДайджестBase64);
			
			Если Не ЗначениеЗаполнено(ВыборкаЭД.ЭДДайджестКвитанции) Тогда
				АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанныеДайджеста);
				ДопФайл = ПрисоединенныеФайлы.ДобавитьФайл(
					СоглашениеЭД, "СхемаДанных", , , , АдресХранилища, , , Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());
				ПараметрыФайла = Новый Структура;
				ПараметрыФайла.Вставить("ВидЭД",                       Перечисления.ВидыЭД.ДопДанные);
				ПараметрыФайла.Вставить("ЭлектронныйДокументВладелец", ЭДОтветБанка);
				ПараметрыФайла.Вставить("НаименованиеФайла",           "СхемаДанных");
				ПараметрыФайла.Вставить("СтатусЭД",                    Перечисления.СтатусыЭД.Получен);
				ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ДопФайл, ПараметрыФайла, Ложь);
			Иначе
				ПрисоединенныеФайлыСлужебный.ЗаписатьФайлВИнформационнуюБазу(ВыборкаЭД.ЭДДайджестКвитанции, ДвоичныеДанныеДайджеста);
			КонецЕсли;
			
			Если НЕ Тикет.Sign = Неопределено Тогда
				ХранилищеСертификата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СоглашениеЭД, "СертификатКонтрагентаДляШифрования");
				ДанныеСертификата = ХранилищеСертификата.Получить();
				Если Не ДанныеСертификата = Неопределено Тогда
					Сертификат = Новый СертификатКриптографии(ДанныеСертификата);
					ВладелецПодписи = Тикет.Sign.issuer;
					ДвоичныеДанныеПодписи = Тикет.Sign.value;
					ДатаУстановкиПодписи = ЭлектронныеДокументыСлужебный.ДатаУстановкиПодписи(ДвоичныеДанныеПодписи);
					ДатаУстановкиПодписи = ?(ЗначениеЗаполнено(ДатаУстановкиПодписи), ДатаУстановкиПодписи, ТекущаяДатаСеанса());
					ЗанестиИнформациюОПодписи(ЭДОтветБанка, ДвоичныеДанныеПодписи, Сертификат.Отпечаток,
															ДатаУстановкиПодписи, "", "", ВладелецПодписи, ДанныеСертификата);
					МассивНовыхЭД.Добавить(ЭДОтветБанка);
				КонецЕсли;
			КонецЕсли;
		
			Информация = Тикет.Info;
			Если Не Информация=Неопределено Тогда
				СтатусСББОЛ = ВРег(Информация.statusStateCode);
				Если СтатусСББОЛ = "ACCEPTED" Тогда
					НовыйСтатусЭД = Перечисления.СтатусыЭД.Принят
				ИначеЕсли СтатусСББОЛ = "IMPLEMENTED" Тогда
					НовыйСтатусЭД = Перечисления.СтатусыЭД.Исполнен
				ИначеЕсли СтатусСББОЛ = "DELIVERED" Тогда
					НовыйСтатусЭД = Перечисления.СтатусыЭД.Доставлен
				ИначеЕсли СтатусСББОЛ = "CARD2" Тогда
					НовыйСтатусЭД = Перечисления.СтатусыЭД.Картотека2
				ИначеЕсли СтатусСББОЛ = "FORMAT_ERROR"
						ИЛИ СтатусСББОЛ = "RQUID_DUPLIC"
						ИЛИ СтатусСББОЛ = "ORG_NOT_FOUND"
						ИЛИ СтатусСББОЛ = "SERT_NOT_FOUND"
						ИЛИ СтатусСББОЛ = "DECLINED_BY_BANK"
						ИЛИ СтатусСББОЛ = "DECLINED"
						ИЛИ СтатусСББОЛ = "FAIL"
						ИЛИ СтатусСББОЛ = "DOCUMENT_NOT_FOUND" Тогда
					НовыйСтатусЭД = Перечисления.СтатусыЭД.ОтклоненБанком
				ИначеЕсли СтатусСББОЛ = "INVALIDEDS" Тогда
					НовыйСтатусЭД = Перечисления.СтатусыЭД.ЭПНеВерна
				ИначеЕсли СтатусСББОЛ = "REQUISITE_ERROR" Тогда
					НовыйСтатусЭД = Перечисления.СтатусыЭД.ОшибкаРеквизитов
				ИначеЕсли СтатусСББОЛ = "DECLINED_BY_ABS" Тогда
					НовыйСтатусЭД = Перечисления.СтатусыЭД.ОтказанАБС
				ИначеЕсли СтатусСББОЛ = "DELAYED" Тогда
					НовыйСтатусЭД = Перечисления.СтатусыЭД.Приостановлен
				ИначеЕсли СтатусСББОЛ = "RECALL" Тогда
					НовыйСтатусЭД = Перечисления.СтатусыЭД.Отклонен
				ИначеЕсли СтатусСББОЛ = "PROCESSED" Тогда
					НовыйСтатусЭД = Перечисления.СтатусыЭД.Обработан
				КонецЕсли;
				Если ЗначениеЗаполнено(НовыйСтатусЭД) Тогда
					СтруктураВладельца.Вставить("СтатусЭД", НовыйСтатусЭД);
				КонецЕсли
			КонецЕсли;
			
			Если СтруктураВладельца.Количество() > 0 Тогда
				ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ВыборкаЭД.ЭДВладелец, СтруктураВладельца, Ложь);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ВыпискаУжеБылаПолучена(СоглашениеЭД, ВнешнийИдентификатор)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭДПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.СоглашениеЭД = &СоглашениеЭД
	|	И ЭДПрисоединенныеФайлы.УникальныйИДВнешний = &УникальныйИДВнешний";
	Запрос.УстановитьПараметр("СоглашениеЭД", СоглашениеЭД);
	Запрос.УстановитьПараметр("УникальныйИДВнешний", ВнешнийИдентификатор);
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Процедура СохранитьШтампыБанка(ЭДВыписки)

	ДвоичныеДанныеЭД = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(ЭДВыписки);
	ИмяФайла = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("xml");
	ДвоичныеДанныеЭД.Записать(ИмяФайла);
	СтруктураРазбораФайла = ЭлектронныеДокументыВнутренний.СформироватьДеревоРазбора(ИмяФайла);
	УдалитьФайлы(ИмяФайла);
	ДеревоРазбора = СтруктураРазбораФайла.ДеревоРазбора;
	СтрокаОбъекта = СтруктураРазбораФайла.СтрокаОбъекта;
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		ДатаСписано = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
															ДеревоРазбора, СтрокаТЧ, "ДатаСписано");
		ШтампБанкаСтатус = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
															ДеревоРазбора, СтрокаТЧ, "ШтампБанкаСтатус");
		ИдПлатежа = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
															ДеревоРазбора, СтрокаТЧ, "ИдПлатежа");
		Если ЗначениеЗаполнено(ДатаСписано) И ЗначениеЗаполнено(ШтампБанкаСтатус) И ЗначениеЗаполнено(ИдПлатежа) Тогда
			ЭД = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдПлатежа));
			Если ЭД.ПолучитьОбъект() <> Неопределено Тогда
				ШтампБанкаНаименование = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора, СтрокаТЧ, "ШтампБанкаНаименование");
				ШтампБанкаОтделение = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора, СтрокаТЧ, "ШтампБанкаОтделение");
				ШтампБанкаБИК = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																	ДеревоРазбора, СтрокаТЧ, "ШтампБанкаБИК");
				ДанныеШтампа = Новый Структура();
				ДанныеШтампа.Вставить("НаименованиеБанка", ШтампБанкаНаименование);
				ДанныеШтампа.Вставить("Отделение", ШтампБанкаОтделение);
				ДанныеШтампа.Вставить("БИК", ШтампБанкаБИК);
				ДанныеШтампа.Вставить("Статус", ШтампБанкаСтатус);
				ДанныеШтампа.Вставить("ДатаОперации", ДатаСписано);
				Штамп = Новый Структура("ДанныеШтампа", ДанныеШтампа);
				СтруктураИзменения = Новый Структура("ДополнительныеРеквизиты", Штамп);
				ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ЭД, СтруктураИзменения, Ложь);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла
	
КонецПроцедуры

// Возвращает массив идентификаторов отправленных запросов выписки на которые не была получена выписка
//
// Параметры:
// СоглашениеЭД - СправочникСсылка.СоглашенияЭД
//
// Возвращаемое значение:
// Массив или Неопределено
//
Функция МассивИдентификаторовДокументовБанка(СоглашениеЭД)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.УникальныйИДВнешний КАК Идентификатор,
	|	ЭДПрисоединенныеФайлы.Ссылка КАК ЭД
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.СоглашениеЭД = &СоглашениеЭД
	|	И ЭДПрисоединенныеФайлы.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ЗапросВыписки)
	|	И НЕ ЭДПрисоединенныеФайлы.УникальныйИДВнешний = """"
	|	И (ЭДПрисоединенныеФайлы.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Доставлен)
	|			ИЛИ ЭДПрисоединенныеФайлы.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Принят))
	|	И НЕ ЭДПрисоединенныеФайлы.ПометкаУдаления";
	Запрос.УстановитьПараметр("СоглашениеЭД", СоглашениеЭД);
	РезультатЗапроса = Запрос.Выполнить();
	
	ТабРезультата = РезультатЗапроса.Выгрузить();
	
	Возврат ТабРезультата.ВыгрузитьКолонку("Идентификатор");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Формирование электронных документов

Функция ВерсияФорматаПакета(Пакет) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пакет, "ВерсияФорматаПакета");
	
КонецФункции

// Определяет наличие доступного соглашения, для получения документов по которому требуется криптография
// 
// Возвращаемое значение:
//  Булево - есть или нет хотя бы одно соглашение
//
Функция ЕстьСоглашенияТребующиеЭП() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СоглашенияЭДИсходящие.Ссылка
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияЭДИсходящие
	|ГДЕ
	|	СоглашенияЭДИсходящие.Ссылка.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
	|	И (СоглашенияЭДИсходящие.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)
	|			ИЛИ СоглашенияЭДИсходящие.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО)
	|			ИЛИ (СоглашенияЭДИсходящие.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезКаталог)
	|				ИЛИ СоглашенияЭДИсходящие.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезЭлектроннуюПочту)
	|				ИЛИ СоглашенияЭДИсходящие.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезFTP))
	|				И НЕ СоглашенияЭДИсходящие.Ссылка.СертификатОрганизацииДляРасшифровки = ЗНАЧЕНИЕ(Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка))";
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

// Возвращает соответствие с данными о доступных сертификатах.
//
// Параметры:
//  <СоглашениеЭД> - СправочникСсылка.СоглашениеОбИспользованииЭД - ссылка на соглашение
//
// Возвращаемое значение:
//  Соответствие - Ключ - ссылка на элемент справочника СертификатыЭП, значение - двоичные данные сертификата
//
Функция ДоступныеСертификаты(СоглашениеЭД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Сертификаты.Ссылка,
	|	Сертификаты.ДанныеСертификата КАК ДанныеСертификата,
	|	НЕОПРЕДЕЛЕНО КАК ПарольПользователя,
	|	ЛОЖЬ КАК ЗапомнитьПарольКСертификату,
	|	ЛОЖЬ КАК ПарольПолучен,
	|	Сертификаты.Отпечаток,
	|	ПрограммыБанков.ПрограммаБанка
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СертификатыПодписейОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрограммыБанков КАК ПрограммыБанков
	|			ПО Сертификаты.Ссылка = ПрограммыБанков.СертификатЭП
	|		ПО СертификатыПодписейОрганизации.Сертификат = Сертификаты.Ссылка
	|ГДЕ
	|	СертификатыПодписейОрганизации.Ссылка = &СоглашениеЭД
	|	И (Сертификаты.Пользователь = &ТекущийПользователь
	|			ИЛИ Сертификаты.Пользователь = &ПустойПользователь
	|			ИЛИ Сертификаты.Пользователь = &ПользовательНеУказан)";
	Запрос.УстановитьПараметр("СоглашениеЭД", СоглашениеЭД);
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.АвторизованныйПользователь());
	Запрос.УстановитьПараметр("ПустойПользователь", Справочники.Пользователи.ПустаяСсылка());
	СвойстваНеуказанногоПользователя = ПользователиСлужебный.СвойстваНеуказанногоПользователя();
	Запрос.УстановитьПараметр("ПользовательНеУказан", СвойстваНеуказанногоПользователя.Ссылка);

	Результат = Запрос.Выполнить().Выбрать();
	ДанныеВозврата = Новый Соответствие;
	Пока Результат.Следующий() Цикл
		Структура = Новый Структура("ПарольПользователя, Отпечаток, ДанныеСертификата, ПарольПолучен, ЗапомнитьПарольКСертификату, ПрограммаБанка");
		ЗаполнитьЗначенияСвойств(Структура, Результат);
		Структура.Вставить("ДанныеСертификата", Результат.ДанныеСертификата.Получить());
		ДанныеВозврата.Вставить(Результат.Ссылка, Структура);
	КонецЦикла;
	Возврат ДанныеВозврата;
	
КонецФункции

// См. эту функцию в модуле ЭлектронныеДокументыСлужебный.
Функция ПолучитьДанныеФайла(Знач ПрисоединенныйФайл,
                            Знач ИдентификаторФормы = Неопределено,
                            Знач ПолучатьСсылкуНаДвоичныеДанные = Истина) Экспорт
	
	Возврат ЭлектронныеДокументыСлужебный.ПолучитьДанныеФайла(
		ПрисоединенныйФайл, ИдентификаторФормы, ПолучатьСсылкуНаДвоичныеДанные);
	
КонецФункции

Функция ВидИВладелецЭД(СсылкаНаЭД) Экспорт
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаЭД, "ВидЭД, ВладелецФайла");
	
КонецФункции

// Процедура используется для минимизации серверных вызовов, при необходимости
// получения на клиенте всех или нескольких значений, перечисленных в параметрах констант.
//
Процедура ИнициализироватьПеременные(ВыполнятьКриптооперацииНаСервере, НемедленнаяОтправкаЭД = Неопределено) Экспорт
	
	НемедленнаяОтправкаЭД = ЭлектронныеДокументыСлужебный.НемедленнаяОтправкаЭД();
	ВыполнятьКриптооперацииНаСервере = ВыполнятьКриптооперацииНаСервере();

КонецПроцедуры

// Возвращает массив проведенных документов
//
// Параметры:
//  МассивДокументов - Массив - массив ссылок на документы 
//
// Возвращаемое значение:
//  Массив - массив ссылок на документы, которые проведены
//
Функция МассивПроведенныхДокументов(Знач МассивДокументов) Экспорт
	
	МассивПроведенныхДокументов = Новый Массив;
	МассивПроводимыхДокументов = МассивПроводимыхДокументов(МассивДокументов);
	
	Для Каждого Документ ИЗ МассивПроводимыхДокументов Цикл
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Проведен") Тогда
			МассивПроведенныхДокументов.Добавить(Документ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивПроведенныхДокументов;
	
КонецФункции

Процедура ЗаполнитьДанныеПодписантаЭД(ИмяФайла, Организация, СертификатПодписи, ВидЭД)
	
	ОбъектXML = Новый ЧтениеXML;
	ОбъектXML.ОткрытьФайл(ИмяФайла);
	
	// Считаем содержимое XML файла
	ПостроительDOM = Новый ПостроительDOM();
	ДокументDOM = ПостроительDOM.Прочитать(ОбъектXML);
	
	// Освободим временный файл для записи
	ОбъектXML.Закрыть();
	
	// Получим тег Подписант для обработки.
	ПодписантDOM = ДокументDOM.ПолучитьЭлементыПоИмени("Подписант");
	
	ПодписантИП = ПодписантDOM[0].ПолучитьЭлементыПоИмени("ИП");
	Если ПодписантИП.Количество() > 0 Тогда
		ПодписантDOM[0].УдалитьДочерний(ПодписантИП[0]);
	КонецЕсли;

	ПодписантЮЛ = ПодписантDOM[0].ПолучитьЭлементыПоИмени("ЮЛ");
	Если ПодписантЮЛ.Количество() > 0 Тогда
		ПодписантDOM[0].УдалитьДочерний(ПодписантЮЛ[0]);
	КонецЕсли;
	
	// Разложим ФИО из сертификата.
	ПараметрыСертификата = РеквизитыСертификата(СертификатПодписи);
	ФамилияСертификата   = ПараметрыСертификата.Фамилия;
	ИмяСертификата       = ПараметрыСертификата.Имя;
	ОтчествоСертификата  = ПараметрыСертификата.Отчество;
	
	ДолжностьПоСертификату = "---";
	Если ЗначениеЗаполнено(ПараметрыСертификата.Должность) Тогда
		ДолжностьПоСертификату = ПараметрыСертификата.Должность;
	КонецЕсли;
	
	ЭтоФизЛицо = ЭлектронныеДокументыПереопределяемый.ЭтоФизЛицо(Организация);
	ДанныеЮрФизЛица = ЭлектронныеДокументыПереопределяемый.ПолучитьДанныеЮрФизЛица(Организация);

	ФИОПодписанта = ДокументDOM.СоздатьЭлемент("ФИО");
	
	ФИОПодписанта.УстановитьАтрибут("Фамилия",  ФамилияСертификата);
	ФИОПодписанта.УстановитьАтрибут("Имя",      ИмяСертификата);
	Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
		ФИОПодписанта.УстановитьАтрибут("Отчество", ОтчествоСертификата);
	КонецЕсли;
	
	Если ЭтоФизЛицо Тогда
		ПодписантИПЮЛ = ДокументDOM.СоздатьЭлемент("ИП");
		
		// Делаем проверку на заполненность обязатеьного поля ИНН для ИП
		Если Не ДанныеЮрФизЛица.Свойство("ИНН") ИЛИ СтрДлина(ДанныеЮрФизЛица.ИНН) <> 12 Тогда
			ШаблонСообщения = НСтр("ru = 'Операция отменена. Не корректно заполнено поле ""ИИН"" в организации %1.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Организация);
			
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		
		ПодписантИПЮЛ.УстановитьАтрибут("ИННФЛ", ДанныеЮрФизЛица.ИНН);
		
		ДанныеСвидетельства = "";
		ЭлектронныеДокументыПереопределяемый.ДанныеСвидетельстваОРегистрацииИП(Организация, ДанныеСвидетельства);
		ПодписантИПЮЛ.УстановитьАтрибут("СвГосРегИП", ДанныеСвидетельства);
	Иначе
		ПодписантИПЮЛ = ДокументDOM.СоздатьЭлемент("ЮЛ");
		
		// Делаем проверку на заполненность обязатеьного поля ИНН для ЮЛ
		Если Не ДанныеЮрФизЛица.Свойство("ИНН") ИЛИ СтрДлина(ДанныеЮрФизЛица.ИНН) <> 10 Тогда
			ШаблонСообщения = НСтр("ru = 'Операция отменена. Не корректно заполнено поле ""ИИН"" в организации %1.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Организация);
			
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		
		ПодписантИПЮЛ.УстановитьАтрибут("ИННЮЛ", ДанныеЮрФизЛица.ИНН);
		ПодписантИПЮЛ.УстановитьАтрибут("Должн", ДолжностьПоСертификату);
	КонецЕсли;
	
	ПодписантИПЮЛ.ДобавитьДочерний(ФИОПодписанта);
	ПодписантDOM[0].ДобавитьДочерний(ПодписантИПЮЛ);
	
	Если ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
		ИЛИ ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
		
		ОтпускГрузDOM = ДокументDOM.ПолучитьЭлементыПоИмени("ОтпускГруз");
		Если ОтпускГрузDOM.Количество() > 0 Тогда
			
			// Удаляем лишние Теги
			Бухгалтер = ОтпускГрузDOM[0].ПолучитьЭлементыПоИмени("Бухгалтер");
			Если Бухгалтер.Количество() > 0 Тогда
				ОтпускГрузDOM[0].УдалитьДочерний(Бухгалтер[0]);
			КонецЕсли;
			ОтпускПроизвел = ОтпускГрузDOM[0].ПолучитьЭлементыПоИмени("ОтпускПроизв");
			Если ОтпускПроизвел.Количество() > 0 Тогда
				ОтпускГрузDOM[0].УдалитьДочерний(ОтпускПроизвел[0]);
			КонецЕсли;
			
			ОтпускРазрешил = ОтпускГрузDOM[0].ПолучитьЭлементыПоИмени("ОтпускРазреш");
			Если ОтпускРазрешил.Количество() > 0 Тогда
				ОтпускГрузDOM[0].УдалитьДочерний(ОтпускРазрешил[0]);
			КонецЕсли;
			ОтпускРазрешил = ДокументDOM.СоздатьЭлемент("ОтпускРазреш");
			
			ФИОДолжЛицоТип = ДокументDOM.СоздатьЭлемент("ФИО");
			
			ФИОДолжЛицоТип.УстановитьАтрибут("Фамилия",  ФамилияСертификата);
			ФИОДолжЛицоТип.УстановитьАтрибут("Имя",      ИмяСертификата);
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				ФИОДолжЛицоТип.УстановитьАтрибут("Отчество", ОтчествоСертификата);
			КонецЕсли;
			Если ЗначениеЗаполнено(ДолжностьПоСертификату) Тогда
				ОтпускРазрешил.УстановитьАтрибут("Должность", ДолжностьПоСертификату);
			КонецЕсли;
			ОтпускРазрешил.ДобавитьДочерний(ФИОДолжЛицоТип);
			
			ОтпускГрузDOM[0].ДобавитьДочерний(ОтпускРазрешил);
		КонецЕсли;
	
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
		ИЛИ ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
		
		ПолучилГрузDOM = ДокументDOM.ПолучитьЭлементыПоИмени("ПолучилГруз");
		Если ПолучилГрузDOM.Количество() > 0 Тогда
			
			ГрузПолучил = ПолучилГрузDOM[0].ПолучитьЭлементыПоИмени("ГрузПолучил");
			Если ГрузПолучил.Количество() > 0 Тогда
				ПолучилГрузDOM[0].УдалитьДочерний(ГрузПолучил[0]);
			КонецЕсли;
			ГрузПолучил = ДокументDOM.СоздатьЭлемент("ГрузПолучил");
			
			ФИОДолжЛицоТип = ДокументDOM.СоздатьЭлемент("ФИО");
			
			ФИОДолжЛицоТип.УстановитьАтрибут("Фамилия",  ФамилияСертификата);
			ФИОДолжЛицоТип.УстановитьАтрибут("Имя",      ИмяСертификата);
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				ФИОДолжЛицоТип.УстановитьАтрибут("Отчество", ОтчествоСертификата);
			КонецЕсли;
			Если ЗначениеЗаполнено(ДолжностьПоСертификату) Тогда
				ГрузПолучил.УстановитьАтрибут("Должность", ДолжностьПоСертификату);
			КонецЕсли;
			ГрузПолучил.ДобавитьДочерний(ФИОДолжЛицоТип);
			
			ПолучилГрузDOM[0].ДобавитьДочерний(ГрузПолучил);
		КонецЕсли;
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
		
		СдалDOM = ДокументDOM.ПолучитьЭлементыПоИмени("Сдал");
		Если СдалDOM.Количество() > 0 Тогда
			
			// Удаляем лишние Теги
			ДоверенностьИсполнителя = СдалDOM[0].ПолучитьЭлементыПоИмени("ДоверенИсполн");
			Если ДоверенностьИсполнителя.Количество() > 0 Тогда
				СдалDOM[0].УдалитьДочерний(ДоверенностьИсполнителя[0]);
			КонецЕсли;
			
			ПодписьИсполнителя = СдалDOM[0].ПолучитьЭлементыПоИмени("ПодписьИсполн");
			Если ПодписьИсполнителя.Количество() > 0 Тогда
				СдалDOM[0].УдалитьДочерний(ПодписьИсполнителя[0]);
			КонецЕсли;
			ПодписьИсполнителя = ДокументDOM.СоздатьЭлемент("ПодписьИсполн");
			
			ФИОДолжЛицоТип = ДокументDOM.СоздатьЭлемент("ФИО");
			
			ФИОДолжЛицоТип.УстановитьАтрибут("Фамилия",  ФамилияСертификата);
			ФИОДолжЛицоТип.УстановитьАтрибут("Имя",      ИмяСертификата);
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				ФИОДолжЛицоТип.УстановитьАтрибут("Отчество", ОтчествоСертификата);
			КонецЕсли;
			Если ЗначениеЗаполнено(ДолжностьПоСертификату) Тогда
				ПодписьИсполнителя.УстановитьАтрибут("Должность", ДолжностьПоСертификату);
			КонецЕсли;
			ПодписьИсполнителя.ДобавитьДочерний(ФИОДолжЛицоТип);
			
			СдалDOM[0].ДобавитьДочерний(ПодписьИсполнителя);
		КонецЕсли;
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктЗаказчик Тогда
		
		ПринялDOM = ДокументDOM.ПолучитьЭлементыПоИмени("Принял");
		Если ПринялDOM.Количество() > 0 Тогда
			
			// Удаляем лишние Теги
			ДоверенностьЗаказчика = ПринялDOM[0].ПолучитьЭлементыПоИмени("ДоверенЗаказ");
			Если ДоверенностьЗаказчика.Количество() > 0 Тогда
				ПринялDOM[0].УдалитьДочерний(ДоверенностьЗаказчика[0]);
			КонецЕсли;
			
			ПодписьЗаказчика = ПринялDOM[0].ПолучитьЭлементыПоИмени("ПодписьЗаказ");
			Если ПодписьЗаказчика.Количество() > 0 Тогда
				ПринялDOM[0].УдалитьДочерний(ПодписьЗаказчика[0]);
			КонецЕсли;
			ПодписьЗаказчика = ДокументDOM.СоздатьЭлемент("ПодписьЗаказ");
			
			ФИОДолжЛицоТип = ДокументDOM.СоздатьЭлемент("ФИО");
			
			ФИОДолжЛицоТип.УстановитьАтрибут("Фамилия",  ФамилияСертификата);
			ФИОДолжЛицоТип.УстановитьАтрибут("Имя",      ИмяСертификата);
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				ФИОДолжЛицоТип.УстановитьАтрибут("Отчество", ОтчествоСертификата);
			КонецЕсли;
			Если ЗначениеЗаполнено(ДолжностьПоСертификату) Тогда
				ПодписьЗаказчика.УстановитьАтрибут("Должность", ДолжностьПоСертификату);
			КонецЕсли;
			ПодписьЗаказчика.ДобавитьДочерний(ФИОДолжЛицоТип);
			
			ПринялDOM[0].ДобавитьДочерний(ПодписьЗаказчика);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайла, "windows-1251");
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьDOM.Записать(ДокументDOM, ЗаписьXML);
	ЗаписьXML.Закрыть();
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПодписантаЭДCML_206(ИмяФайла, Организация, СертификатПодписи)
	
	ОбъектXML = Новый ЧтениеXML;
	ОбъектXML.ОткрытьФайл(ИмяФайла);
	
	// Считаем содержимое XML файла
	ПостроительDOM = Новый ПостроительDOM();
	ДокументDOM = ПостроительDOM.Прочитать(ОбъектXML);
	
	// Освободим временный файл для записи
	ОбъектXML.Закрыть();
	
	КоммерческаяИнформацияDOM = ДокументDOM.ПолучитьЭлементыПоИмени("КоммерческаяИнформация");
	Если КоммерческаяИнформацияDOM.Количество() > 0 И КоммерческаяИнформацияDOM[0].ЕстьАтрибут("ВерсияСхемы") Тогда
		ВерсияСхемы = КоммерческаяИнформацияDOM[0].ПолучитьУзелАтрибута("ВерсияСхемы").ЗначениеУзла;
		
		// Получим тег Подписанты для обработки.
		ПодписантыDOM = ДокументDOM.ПолучитьЭлементыПоИмени("Подписанты");
		Если ПодписантыDOM.Количество() > 0
			И ВерсияСхемы = СокрЛП(СтрЗаменить(ЭлектронныеДокументыПовтИсп.ВерсияСхемыCML2(), "CML", "")) Тогда
			
			//ПодписантыDOM = ДокументDOM.СоздатьЭлемент("Подписанты");
			Подписант = ПодписантыDOM[0].ПолучитьЭлементыПоИмени("Подписант");
			Если Подписант.Количество() > 0 Тогда
				ПодписантыDOM[0].УдалитьДочерний(Подписант[0]);
			КонецЕсли;
			Подписант = ДокументDOM.СоздатьЭлемент("Подписант");
			
			// Разложим ФИО из сертификата.
			ПараметрыСертификата = РеквизитыСертификата(СертификатПодписи);
			ФамилияСертификата   = ПараметрыСертификата.Фамилия;
			ИмяСертификата       = ПараметрыСертификата.Имя;
			ОтчествоСертификата  = ПараметрыСертификата.Отчество;
			
			ДолжностьПоСертификату = "---";
			Если ЗначениеЗаполнено(ПараметрыСертификата.Должность) Тогда
				ДолжностьПоСертификату = ПараметрыСертификата.Должность;
			КонецЕсли;
			
			Фамилия = ДокументDOM.СоздатьЭлемент("Фамилия");
			ФамилияТекст = ДокументDOM.СоздатьТекстовыйУзел(ФамилияСертификата);
			Фамилия.ДобавитьДочерний(ФамилияТекст);
			Подписант.ДобавитьДочерний(Фамилия);
			
			Имя = ДокументDOM.СоздатьЭлемент("Имя");
			ИмяТекст = ДокументDOM.СоздатьТекстовыйУзел(ИмяСертификата);
			Имя.ДобавитьДочерний(ИмяТекст);
			Подписант.ДобавитьДочерний(Имя);
			
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				Отчество = ДокументDOM.СоздатьЭлемент("Отчество");
				ОтчествоТекст = ДокументDOM.СоздатьТекстовыйУзел(ОтчествоСертификата);
				Отчество.ДобавитьДочерний(ОтчествоТекст);
				Подписант.ДобавитьДочерний(Отчество);
			КонецЕсли;
			
			Если Не ЭлектронныеДокументыПереопределяемый.ЭтоФизЛицо(Организация) Тогда
				Должность = ДокументDOM.СоздатьЭлемент("Должность");
				ДолжностьТекст = ДокументDOM.СоздатьТекстовыйУзел(ДолжностьПоСертификату);
				Должность.ДобавитьДочерний(ДолжностьТекст);
				Подписант.ДобавитьДочерний(Должность);
			КонецЕсли;
			ПодписантыDOM[0].ДобавитьДочерний(Подписант);
			
			ЗаписьXML = Новый ЗаписьXML;
			ЗаписьXML.ОткрытьФайл(ИмяФайла, "windows-1251");
			ЗаписьDOM = Новый ЗаписьDOM;
			ЗаписьDOM.Записать(ДокументDOM, ЗаписьXML);
			ЗаписьXML.Закрыть();
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьДанныеПодписантаСлужебныхЭД(ИмяФайла, Организация, СертификатПодписи)
	
	ОбъектXML = Новый ЧтениеXML;
	ОбъектXML.ОткрытьФайл(ИмяФайла);
	
	// Считаем содержимое XML файла
	ПостроительDOM = Новый ПостроительDOM();
	ДокументDOM = ПостроительDOM.Прочитать(ОбъектXML);
	
	// Освободим временный файл для записи.
	ОбъектXML.Закрыть();
	
	// Определим наше пространство имен.
	ПодписантDOM = ДокументDOM.ПолучитьЭлементыПоИмени("Подписант");
	
	// Разложим ФИО из сертификата.
	ПараметрыСертификата= РеквизитыСертификата(СертификатПодписи);
	ФамилияСертификата  = ПараметрыСертификата.Фамилия;
	ИмяСертификата      = ПараметрыСертификата.Имя;
	ОтчествоСертификата = ПараметрыСертификата.Отчество;
	
	ДолжностьПоСертификату = "---";
	Если ЗначениеЗаполнено(ПараметрыСертификата.Должность) Тогда
		ДолжностьПоСертификату = ПараметрыСертификата.Должность;
	КонецЕсли;
	
	ПодписантDOM[0].УстановитьАтрибут("Должность", ДолжностьПоСертификату);
	
	ФИОПодписанта = ПодписантDOM[0].ПолучитьЭлементыПоИмени("ФИО");
	
	ФИОПодписанта[0].УстановитьАтрибут("Фамилия", ФамилияСертификата);
	ФИОПодписанта[0].УстановитьАтрибут("Имя",     ИмяСертификата);
	Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
		ФИОПодписанта[0].УстановитьАтрибут("Отчество", ОтчествоСертификата);
	КонецЕсли;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайла, "windows-1251");
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьDOM.Записать(ДокументDOM, ЗаписьXML);
	ЗаписьXML.Закрыть();
	
КонецПроцедуры

// Только для внутреннего использования
Процедура УстановитьОтветственногоЭД(Знач СписокОбъектов, Знач НовыйОтветственный, КоличествоОбработанныхЭД, ПричинаПеренаправления = "") Экспорт
	
	МассивЭД = Новый Массив;
	КоличествоОбработанныхЭД = 0;
	
	Для Каждого ЭлСписка Из СписокОбъектов Цикл
		Если ТипЗнч(ЭлСписка) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			Продолжить;
		КонецЕсли;
		МассивЭД.Добавить(ЭлСписка.Ссылка);
	КонецЦикла;
	
	Если МассивЭД.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭДПрисоединенныеФайлы.Ссылка,
	|	ЭДПрисоединенныеФайлы.Ответственный,
	|	ЭДПрисоединенныеФайлы.СтатусЭД
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.Ссылка В(&МассивЭД)
	|	И (ЭДПрисоединенныеФайлы.Ответственный <> &Ответственный
	|			ИЛИ &ЗаписьОписания)");
	
	Запрос.УстановитьПараметр("МассивЭД",      МассивЭД);
	Запрос.УстановитьПараметр("Ответственный", НовыйОтветственный);
	Запрос.УстановитьПараметр("ЗаписьОписания", ?(ЗначениеЗаполнено(ПричинаПеренаправления), Истина, Ложь));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	ОбщийТекстОшибки = "";
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		Исключение
			ТекстОшибки = НСтр("ru='Не удалось заблокировать электронный документ (%Объект%). %ОписаниеОшибки%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Объект%",         Выборка.Ссылка);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщийТекстОшибки = ОбщийТекстОшибки + Символы.ПС + ТекстОшибки;
			ОтменитьТранзакцию();
			ВызватьИсключение ТекстОшибки;
		КонецПопытки;
	
		Попытка
			СтруктураПараметров = Новый Структура("Ответственный", НовыйОтветственный);
			СтруктураПараметров.Вставить("Описание", ПричинаПеренаправления);
			ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(Выборка.Ссылка, СтруктураПараметров, Ложь);
			КоличествоОбработанныхЭД = КоличествоОбработанныхЭД + 1;
		Исключение
			ТекстОшибки = НСтр("ru='Не удалось выполнить запись электронного документа'") + " (%Объект%). %ОписаниеОшибки%'";
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Объект%",         Выборка.Ссылка);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщийТекстОшибки = ОбщийТекстОшибки + Символы.ПС + ТекстОшибки;
			ОтменитьТранзакцию();
			ВызватьИсключение ТекстОшибки;
		КонецПопытки
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Позволяет получить значения реквизитов сертификата ЭП.
//
// Параметры:
//  Сертификат ЭП - справочник-ссылка - ссылка на элемент справочника "Сертификаты ЭП".
//
// Возвращаемое значение:
//  Структура значений реквизитов.
//
Функция РеквизитыСертификата(СертификатЭП) Экспорт
	
	ПараметрыСертификата = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СертификатЭП,
		"Отозван, Отпечаток, ДействителенДо, ПользовательОповещенОСрокеДействия,
		|Фамилия, Имя, Отчество, Должность, Организация, ДанныеСертификата,
		|Наименование, Пользователь");
	ПараметрыСертификата.Вставить("ДвоичныеДанныеСертификата", ПараметрыСертификата.ДанныеСертификата.Получить());
	ПараметрыСертификата.Вставить("ВыбранныйСертификат", СертификатЭП);
	ПараметрыСертификата.Вставить("ПарольПолучен", Ложь);
	ПараметрыСертификата.Вставить("ПарольПользователя", Неопределено);
	
	// В БСП методах необходим параметр
	ПараметрыСертификата.Вставить("Комментарий", "");
	
	Возврат ПараметрыСертификата;
	
КонецФункции

// Только для внутреннего использования
Функция СформироватьСлужебныеЭД(МассивЭД, ВидЭД, ТекстУточнения = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивВозврата = Новый Массив;
	
	ДанныеЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивЭД, "НаправлениеЭД, Контрагент, ВидЭД, СтатусЭД,
	                      |УникальныйИД, ПрофильНастроекЭДО, СоглашениеЭД, ВерсияРегламентаЭДО, ТипЭлементаВерсииЭД, ВладелецФайла, НомерЭД");
	
	Для Каждого СсылкаНаЭД ИЗ МассивЭД Цикл
	
		ПараметрыЭД = ДанныеЭД.Получить(СсылкаНаЭД);
		
		ЭтоИзвещение = НЕ ЗначениеЗаполнено(ТекстУточнения);
		
		Если ЭтоИзвещение Тогда
			// Не формируем извещение о получении для версии регламента 20 в формализованных документах.
			Если ПараметрыЭД.ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20
				И (ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
				ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
				ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель) Тогда
				
				Возврат "";
			КонецЕсли;

			Если НЕ (ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ
				ИЛИ ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ
				ИЛИ ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ
				ИЛИ ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ
				ИЛИ ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ
				ИЛИ ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД) Тогда
				
				ШаблонСообщения = НСтр("ru = 'Для типа ЭД %1 не предусмотрено формирование Извещения о получении.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
					ПараметрыЭД.ТипЭлементаВерсииЭД);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Возврат "";
			КонецЕсли;
		КонецЕсли;
		
		АдресВоВременномХранилище = "";
		
		СтруктураЭД = ЭлектронныеДокументыВнутренний.СформироватьФайлСлужебногоДокументаПоЭД(СсылкаНаЭД, ВидЭД, ТекстУточнения);
		Если НЕ ЗначениеЗаполнено(СтруктураЭД)
			ИЛИ НЕ СтруктураЭД.Свойство("АдресВоВременномХранилище", АдресВоВременномХранилище) Тогда
			
			Возврат "";
		КонецЕсли;
		ДатаСозданияФайла = ТекущаяДатаСеанса();
		Попытка
			НачатьТранзакцию();
			ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(
														ПараметрыЭД.ВладелецФайла,
														СтруктураЭД.ИдФайла,
														"xml",
														ДатаСозданияФайла,
														УниверсальноеВремя(ТекущаяДатаСеанса()),
														АдресВоВременномХранилище,
														Неопределено,
														,
														Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("НаправлениеЭД",               Перечисления.НаправленияЭД.Исходящий);
			СтруктураПараметров.Вставить("СтатусЭД",                    Перечисления.СтатусыЭД.Утвержден);
			СтруктураПараметров.Вставить("ВидЭД",                       СтруктураЭД.ВидЭД);
			СтруктураПараметров.Вставить("Получатель",                  СтруктураЭД.ИдПолучателя);
			СтруктураПараметров.Вставить("Отправитель",                 СтруктураЭД.ИдОтправителя);
			СтруктураПараметров.Вставить("НомерЭД",                     ПараметрыЭД.НомерЭД);
			СтруктураПараметров.Вставить("Организация",                 СтруктураЭД.Отправитель);
			СтруктураПараметров.Вставить("Контрагент",                  СтруктураЭД.Получатель);
			СтруктураПараметров.Вставить("ПрофильНастроекЭДО",          ПараметрыЭД.ПрофильНастроекЭДО);
			СтруктураПараметров.Вставить("СоглашениеЭД",                ПараметрыЭД.СоглашениеЭД);
			СтруктураПараметров.Вставить("ВладелецЭД",                  ПараметрыЭД.ВладелецФайла);
			СтруктураПараметров.Вставить("УникальныйИД",                ПараметрыЭД.УникальныйИД);
			СтруктураПараметров.Вставить("НаименованиеФайла",           СтруктураЭД.ИдФайла);
			Если ЭтоИзвещение Тогда
				ТипЭлементаВерсииЭД = ЭлектронныеДокументыВнутренний.ОпределитьТипЭДПоТипуЭДВладельца(СсылкаНаЭД);
			ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ПредложениеОбАннулировании Тогда
				ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА;
			Иначе
				Если СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
				ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
				
					ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ;
				Иначе
					
					ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УОУ;
				КонецЕсли;
			КонецЕсли;
			СтруктураПараметров.Вставить("ТипЭлементаВерсииЭД",         ТипЭлементаВерсииЭД);
			СтруктураПараметров.Вставить("ДатаДокументаОтправителя",    ДатаСозданияФайла);
			СтруктураПараметров.Вставить("ЭлектронныйДокументВладелец", СсылкаНаЭД);
			СтруктураПараметров.Вставить("ВерсияРегламентаЭДО",         СсылкаНаЭД.ВерсияРегламентаЭДО);
			
			ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураПараметров);
			
			Если НЕ ЭтоИзвещение Тогда
				Если ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении Тогда
					НовыйСтатусЭД = Перечисления.СтатусыЭД.Отклонен;
					Запрос = Новый Запрос;
					Запрос.Текст =
						"ВЫБРАТЬ
						|	ПодчиненныеЭД.Ссылка
						|ИЗ
						|	Справочник.ЭДПрисоединенныеФайлы КАК ПодчиненныеЭД
						|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
						|		ПО ЭДПрисоединенныеФайлы.Ссылка = ПодчиненныеЭД.ЭлектронныйДокументВладелец
						|ГДЕ
						|	ПодчиненныеЭД.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД)
						|	И ПодчиненныеЭД.СтатусЭД <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Отклонен)
						|	И ЭДПрисоединенныеФайлы.Ссылка = &Ссылка";
					Запрос.УстановитьПараметр("Ссылка", СсылкаНаЭД);
					Результат = Запрос.Выполнить();
					Выборка = Результат.Выбрать();
					Пока Выборка.Следующий() Цикл
						ЭДОбъект = Выборка.Ссылка.ПолучитьОбъект();
						ЭДОбъект.СтатусЭД = НовыйСтатусЭД;
						ЭДОбъект.Записать();
					КонецЦикла;
				Иначе
					НовыйСтатусЭД = Перечисления.СтатусыЭД.СформированоПредложениеОбАннулировании;
				КонецЕсли;
				
				СтруктураПараметров = Новый Структура("СтатусЭД, ПричинаОтклонения", НовыйСтатусЭД, ТекстУточнения);
				ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(СсылкаНаЭД, СтруктураПараметров, Ложь);
			КонецЕсли;
			ЗафиксироватьТранзакцию();
			МассивВозврата.Добавить(ДобавленныйФайл);
		Исключение
			ОтменитьТранзакцию();
		КонецПопытки;
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

// Определяет признак шифрования и статус пакета электронных документов.
//
// Параметры:
// МассивСсылокНаДокументы - массив ссылок на пакеты электронных документов, параметры которых надо определить.
//
Функция ОпределитьПараметрыРаспаковки(Знач МассивСсылокНаДокументы) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивВозврата = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПакетЭД.Ссылка КАК СсылкаНаДокумент,
	|	ПакетЭД.НастройкаЭДО.СертификатОрганизацииДляРасшифровки КАК СертификатОрганизацииДляРасшифровки,
	|	ЭДПрисоединенныеФайлы.Ссылка,
	|	ПакетЭД.СтатусПакета,
	|	ПакетЭД.СпособОбменаЭД
	|ИЗ
	|	Документ.ПакетЭД КАК ПакетЭД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|		ПО (ЭДПрисоединенныеФайлы.ВладелецФайла = ПакетЭД.Ссылка)
	|ГДЕ
	|	ПакетЭД.Ссылка В(&МассивСсылок)";
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылокНаДокументы);
	
	ВыборкаПакеты = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаПакеты.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(ВыборкаПакеты.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВыборкаПакеты.СтатусПакета <> Перечисления.СтатусыПакетовЭД.КРаспаковке Тогда
			
			ШаблонСообщения = Нстр("ru = 'Статус пакета %1 отличен от значения ""К распаковке"".");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ВыборкаПакеты.Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецЕсли;
		
		Если ВыборкаПакеты.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка Тогда
			СтруктураРаспаковки = Новый Структура;
			СтруктураРаспаковки.Вставить("ПакетЭД", ВыборкаПакеты.СсылкаНаДокумент);
			СтруктураРаспаковки.Вставить("СпособОбменаЭД", ВыборкаПакеты.СпособОбменаЭД);
			МассивВозврата.Добавить(СтруктураРаспаковки);
			Продолжить;
		КонецЕсли;
		
		
		ПараметрыДанных = ЭлектронныеДокументыСлужебный.ПолучитьДанныеФайла(ВыборкаПакеты.Ссылка);
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ПараметрыДанных.СсылкаНаДвоичныеДанныеФайла);
		ФайлАрхива = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("zip");
		
		ДвоичныеДанныеФайла.Записать(ФайлАрхива);
		
		ЗИПЧтение = Новый ЧтениеZipФайла(ФайлАрхива);
		ПапкаДляРаспаковки = ЭлектронныеДокументыСлужебный.РабочийКаталог("ext", ВыборкаПакеты.Ссылка.УникальныйИдентификатор());
		
		Попытка
			ЗипЧтение.ИзвлечьВсе(ПапкаДляРаспаковки, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
			УдалитьФайлы(ФайлАрхива);
		Исключение
			ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Если НЕ ЭлектронныеДокументыСлужебный.ВозможноИзвлечьФайлы(ЗипЧтение, ПапкаДляРаспаковки) Тогда
				ТекстСообщения = ЭлектронныеДокументыПовтИсп.ПолучитьСообщениеОбОшибке("006");
			КонецЕсли;
			ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Распаковка пакета ЭД'"), ТекстОшибки, ТекстСообщения);
			УдалитьФайлы(ПапкаДляРаспаковки);
			УдалитьФайлы(ФайлАрхива);
			Прервать;
		КонецПопытки;

		ФайлыАрхива = НайтиФайлы(ПапкаДляРаспаковки, "*");
		ФайлИнформации = Неопределено;
		ФайлКарточки   = Неопределено;
		Зашифрован     = Ложь;
		
		Для Каждого ТекФайл Из ФайлыАрхива Цикл
			Если Найти(ТекФайл.Имя, "packageDescription") > 0 Тогда
				ФайлИнформации = ТекФайл;
				Прервать;
			ИначеЕсли Найти(ТекФайл.Имя, "card") > 0 Тогда
				ФайлКарточки = ТекФайл;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		СтруктураРаспаковки = Новый Структура;
		СтруктураРаспаковки.Вставить("ПакетЭД", ВыборкаПакеты.СсылкаНаДокумент);
		
		Если ФайлИнформации <> Неопределено Тогда
			
			ЧтениеХМЛ = Новый ЧтениеXML;
			ЧтениеХМЛ.ОткрытьФайл(ФайлИнформации.ПолноеИмя);
			НашлиШифрование = Ложь;
			Документ = Неопределено;
			Сертификат = "";
			Пока ЧтениеХМЛ.Прочитать() Цикл
				Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "НастройкиШифрования" Тогда
					НашлиШифрование = Истина;
				КонецЕсли;
				
				Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "ДокументШифрования" Тогда
					ЧтениеХМЛ.Прочитать();
					Документ = ЧтениеХМЛ.Значение;
				КонецЕсли;
				
				Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Зашифрован" Тогда
					ЧтениеХМЛ.Прочитать();
					Зашифрован = Булево(ЧтениеХМЛ.Значение);
					Сертификат = ВыборкаПакеты.СертификатОрганизацииДляРасшифровки;
				КонецЕсли;
				
				Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "СертификатШифрования" Тогда
					ЧтениеХМЛ.Прочитать();
					Сертификат = ЧтениеХМЛ.Значение;
				КонецЕсли;
				
				Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "ДокументШифрования" Тогда
					
					Если Зашифрован Тогда
						СтруктураШифрования = Новый Структура;
						СтруктураШифрования.Вставить("ВерсияФорматаПакета", Перечисления.ВерсииФорматаПакетаЭД.Версия10);
						
						Если ЗначениеЗаполнено(ВыборкаПакеты.СертификатОрганизацииДляРасшифровки) Тогда
							СтруктураШифрования.Вставить("Сертификат", ВыборкаПакеты.СертификатОрганизацииДляРасшифровки);
							СтруктураШифрования.Вставить(
								"ПараметрыСертификата", РеквизитыСертификата(ВыборкаПакеты.СертификатОрганизацииДляРасшифровки));
						Иначе
							ШаблонСообщения = НСтр("ru = 'Не указан сертификат расшифровки для: %1.'");
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ВыборкаПакеты.Ссылка);
							Продолжить;
						КонецЕсли;
						
						СтруктураРаспаковки.Вставить("СтруктураШифрования", СтруктураШифрования);
					КонецЕсли;
					
					Документ = Неопределено;
					Зашифрован = Ложь;
					Сертификат = "";
				КонецЕсли;
				
				Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "НастройкиШифрования" Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЦикла;
			ЧтениеХМЛ.Закрыть();
		КонецЕсли;
		
		Если ФайлКарточки <> Неопределено Тогда
			
			ОбъектXML = Новый ЧтениеXML;
			
			Попытка
				ОбъектXML.ОткрытьФайл(ФайлКарточки.ПолноеИмя);
				ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
				ОбъектXML.Закрыть();
				
				Если ЭД.Свойства().Получить("Description") <> Неопределено
					И ЭД.Description <> Неопределено
					И ЭД.Description.Свойства().Получить("AdditionalData") <> Неопределено
					И ЭД.Description.AdditionalData <> Неопределено
					И ЭД.Description.AdditionalData.Свойства().Получить("AdditionalParameter") <> Неопределено
					И ЭД.Description.AdditionalData.AdditionalParameter <> Неопределено Тогда
					
					Если ТипЗнч(ЭД.Description.AdditionalData.AdditionalParameter) = Тип("СписокXDTO") Тогда
						Для Каждого Свойство Из ЭД.Description.AdditionalData.AdditionalParameter Цикл
							Если Свойство.Name = "Зашифрован" Тогда
								Зашифрован = Булево(Свойство.Value);
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
					ИначеЕсли ТипЗнч(ЭД.Description.AdditionalData.AdditionalParameter) = Тип("ОбъектXDTO") Тогда
						Если ЭД.Description.AdditionalData.AdditionalParameter.Name = "Зашифрован" Тогда
							Зашифрован = Булево(ЭД.Description.AdditionalData.AdditionalParameter.Value);
						КонецЕсли;
					КонецЕсли;
					
					Если Зашифрован Тогда
						
						СтруктураШифрования = Новый Структура;
						СтруктураШифрования.Вставить("ВерсияФорматаПакета", Перечисления.ВерсииФорматаПакетаЭД.Версия20);
						
						Если ЗначениеЗаполнено(ВыборкаПакеты.СертификатОрганизацииДляРасшифровки) Тогда
							СтруктураШифрования.Вставить("Сертификат", ВыборкаПакеты.СертификатОрганизацииДляРасшифровки);
							СтруктураШифрования.Вставить("ПараметрыСертификата", РеквизитыСертификата(
							ВыборкаПакеты.СертификатОрганизацииДляРасшифровки));
						Иначе
							ШаблонСообщения = НСтр("ru = 'Не указан сертификат расшифровки для: %1.'");
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ВыборкаПакеты.Ссылка);
							УдалитьФайлы(ПапкаДляРаспаковки);
							Продолжить;
						КонецЕсли;
						
						СтруктураРаспаковки.Вставить("СтруктураШифрования", СтруктураШифрования);
					КонецЕсли;
					
				КонецЕсли;
			Исключение
				ОбъектXML.Закрыть();
				
				ШаблонСообщения = НСтр("ru = 'Возникла ошибка при чтении данных из файла %1: %2 (подробности см. в Журнале регистрации).'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
					ФайлКарточки.ПолноеИмя, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Чтение ЭД.'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
						ТекстСообщения);
			КонецПопытки;
		КонецЕсли;
		
		УдалитьФайлы(ПапкаДляРаспаковки);
		
		МассивВозврата.Добавить(СтруктураРаспаковки);
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прямой обмен с банком

Функция ВидЭД(КодЭД)
	
	Если КодЭД = "10" Тогда
		Возврат Перечисления.ВидыЭД.ПлатежноеПоручение;
	ИначеЕсли КодЭД = "11" Тогда
		Возврат Перечисления.ВидыЭД.ПлатежноеТребование;
	ИначеЕсли КодЭД = "14" Тогда
		Возврат Перечисления.ВидыЭД.ЗапросВыписки;
	ИначеЕсли КодЭД = "05" Тогда
		Возврат Перечисления.ВидыЭД.ЗапросЗонд;
	ИначеЕсли КодЭД = "04" Тогда
		Возврат Перечисления.ВидыЭД.ЗапросНаОтзывЭД;
	ИначеЕсли КодЭД = "03" Тогда
		Возврат Перечисления.ВидыЭД.ЗапросОСостоянииЭД;
	КонецЕсли;
	
КонецФункции

// Возвращает двоичные данные файла, содержащего данные для аутентификации на сервере банка по сертификату
//
// Параметры:
//  - ДанныеСертификата - ДвоичныеДанные - данные сертификата для аутентификации на ресурсе банка
//
// Возвращаемое значение:
//  ДвоичныеДанные - данные файла аутентификации
//
Функция ДанныеДляАутентификацииПоСертификату(ДанныеСертификата)
	
	ПространствоИмен = ЭлектронныеДокументыСлужебный.ПространствоИменАсинхронногоОбменаСБанками();
	ВерсияСхемыАсинхронногоОбменаСБанками = ЭлектронныеДокументыСлужебный.ВерсияСхемыАсинхронногоОбменаСБанками();
	ТекстОшибки = "";
	ВремФайл = ПолучитьИмяВременногоФайла("xml");
	Попытка
		ЭД = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("X509Data", ПространствоИмен);
		УникальныйИдентификатор = Строка(Новый УникальныйИдентификатор);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ЭД, "id", УникальныйИдентификатор, Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
			ЭД, "formatVersion", ВерсияСхемыАсинхронногоОбменаСБанками, Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ЭД, "creationDate", ТекущаяДатаСеанса(), Истина, ТекстОшибки);
		ВерсияПрограммыКлиентаДляБанка = ЭлектронныеДокументыПовтИсп.ВерсияПрограммыКлиентаДляБанка();
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ЭД, "userAgent", ВерсияПрограммыКлиентаДляБанка, , ТекстОшибки);
		Сертификат = Новый СертификатКриптографии(ДанныеСертификата);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
			ЭД, "X509IssuerName", Сертификат.Издатель.CN, Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(
			ЭД, "X509SerialNumber", Сертификат.СерийныйНомер, Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ЭД, "X509Certificate", ДанныеСертификата, Истина, ТекстОшибки);
		ЭД.Проверить();
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ФайлСформирован = Ложь;
			УдалитьФайлы(ВремФайл);
		Иначе
			ЭлектронныеДокументыВнутренний.ВыгрузитьЭДвФайл(ЭД, ВремФайл, Ложь, "UTF-8");
			ФайлСформирован = Истина;
		КонецЕсли;

	Исключение
		Сообщение = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Сообщение);
		Операция = НСтр("ru = 'Формирование ЭД'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбработатьИсключениеПоЭДНаСервере(Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
		ФайлСформирован = Ложь;
		УдалитьФайлы(ВремФайл);
	КонецПопытки;
	
	Если ФайлСформирован Тогда
		ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ВремФайл);
		УдалитьФайлы(ВремФайл);
		Возврат ДвоичныеДанныеФайла;
	КонецЕсли;
	
КонецФункции

Функция ЗапросВыпискиCMLXDTO(ДатаНачала, ДатаКонца, МассивБанковскихСчетов, Банк)
	
	Попытка
		URI = "urn:1C.ru:ClientBankExchange";
		
		Пакет = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URI,"ClientBankExchange"));
		Пакет.ВерсияФормата = "1.06";
		Пакет.Получатель = Банк.Наименование;
		Пакет.Отправитель = "1С: Предприятие";
		Пакет.ДатаСоздания = ТекущаяДатаСеанса();
		Пакет.ВремяСоздания = ТекущаяДатаСеанса();
		
		УсловияОтбора = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URI,"УсловияОтбора"));
		УсловияОтбора.ДатаНачала = ДатаНачала;
		УсловияОтбора.ДатаКонца = ДатаКонца;
		Для Каждого НомерСчета Из МассивБанковскихСчетов Цикл
			УсловияОтбора.РасчСчет.Добавить(НомерСчета);
		КонецЦикла;
		
		Пакет.УсловияОтбора = УсловияОтбора;
		
		Пакет.Проверить();
		
	Исключение
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									ШаблонСообщения, КраткоеПредставлениеОшибки);
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВидОперациии = НСтр("ru = 'Формирование ЭД'");
		ОбработатьИсключениеПоЭДНаСервере(ВидОперациии, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Пакет;
	
КонецФункции

Функция МассивЗапросовВыписки(СоглашениеЭД, Организация, Банк, ДатаНачала, ДатаОкончания, МассивБанковскихСчетов)
	
	Ответственный = ЭлектронныеДокументыПереопределяемый.ПолучитьОтветственногоПоЭД(Банк, СоглашениеЭД);
	
	ПакетXDTO = ЗапросВыпискиCMLXDTO(ДатаНачала, ДатаОкончания, МассивБанковскихСчетов, Банк);
		
	Если ПакетXDTO=Неопределено Тогда
		Возврат Неопределено
	КонецЕсли;
	
	ПолноеИмяФайла = ПолучитьИмяВременногоФайла("xml");
	Запись = Новый ЗаписьXML;
	Запись.ОткрытьФайл(ПолноеИмяФайла);
	Запись.ЗаписатьОбъявлениеXML();

	ФабрикаXDTO.ЗаписатьXML(
		Запись, ПакетXDTO, "ClientBankExchange", "urn:1C.ru:ClientBankExchange", , НазначениеТипаXML.Явное);
	
	Запись.Закрыть();
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
	УдалитьФайлы(ПолноеИмяФайла);
	АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	
	ШаблонСообщения = НСтр("ru='Запрос выписки с %1 по %2'");
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонСообщения, Формат(ДатаНачала, "ДЛФ=D"), Формат(ДатаОкончания, "ДЛФ=D"));
		
	ИмяФайла = СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(ТекстСообщения);
	
	ЭД = ПрисоединенныеФайлы.ДобавитьФайл(СоглашениеЭД, ТекстСообщения, "xml", ТекущаяДатаСеанса(), ТекущаяДатаСеанса(),
											АдресФайла, , , Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());

	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Автор", Пользователи.АвторизованныйПользователь());
	СтруктураПараметров.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
	СтруктураПараметров.Вставить("ВидЭД", Перечисления.ВидыЭД.ЗапросВыписки);
	СтруктураПараметров.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Сформирован);
	СтруктураПараметров.Вставить("Ответственный", Ответственный);
	СтруктураПараметров.Вставить("Организация", Организация);
	СтруктураПараметров.Вставить("Контрагент", Банк);
	СтруктураПараметров.Вставить("ВладелецЭД", СоглашениеЭД);
	СтруктураПараметров.Вставить("СоглашениеЭД", СоглашениеЭД);
	СтруктураПараметров.Вставить("ДатаДокументаОтправителя", ТекущаяДатаСеанса());
	СтруктураПараметров.Вставить("НаименованиеФайла", ИмяФайла);
	СтруктураПараметров.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
	
	ИзменитьПоСсылкеПрисоединенныйФайл(ЭД, СтруктураПараметров);
	
	МассивВозврата = Новый Массив;
	МассивВозврата.Добавить(ЭД);
	
	Возврат МассивВозврата;
	
КонецФункции

Функция МассивЗапросовВыпискиAsync(СоглашениеЭД, Организация, Банк, ИдентификаторОрганизации, ДатаНачала, ДатаОкончания, МассивБанковскихСчетов)
	
	Ответственный = ЭлектронныеДокументыПереопределяемый.ПолучитьОтветственногоПоЭД(Банк, СоглашениеЭД);
	МассивЭД = Новый Массив;
		
	ОтправительНаименование = ЭлектронныеДокументыСлужебный.СокращенноеНаименованиеОрганизации(Организация);
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ИНН, КПП");
	РеквизитыБанка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Банк, "Код, Наименование");
	ПространствоИмен = ЭлектронныеДокументыСлужебный.ПространствоИменАсинхронногоОбменаСБанками();
	
	Для Каждого НомерСчета Из МассивБанковскихСчетов Цикл
	
		ТекстОшибки = "";
		Попытка
			
			ВремФайл = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("xml");
			
			УнИдЭД = Новый УникальныйИдентификатор;
			
			ЭД = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("StatementRequest", ПространствоИмен);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ЭД, "id", Строка(УнИдЭД), Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ЭД, "formatVersion", 
				ЭлектронныеДокументыСлужебный.ВерсияСхемыАсинхронногоОбменаСБанками(), Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ЭД, "creationDate", ТекущаяДатаСеанса(), Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ЭД, "userAgent", 
				ЭлектронныеДокументыПовтИсп.ВерсияПрограммыКлиентаДляБанка(), , ТекстОшибки);
			
			Отправитель = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("CustomerPartyType", ПространствоИмен);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Отправитель, "id", ИдентификаторОрганизации, Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Отправитель, "name", ОтправительНаименование, , ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Отправитель, "inn", РеквизитыОрганизации.ИНН, , ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Отправитель, "kpp", РеквизитыОрганизации.КПП, , ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ЭД, "Sender", Отправитель, Истина, ТекстОшибки);
			
			Получатель = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("BankPartyType", ПространствоИмен);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Получатель, "bic", РеквизитыБанка.Код, Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Получатель, "name", РеквизитыБанка.Наименование, , ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ЭД, "Recipient", Получатель, Истина, ТекстОшибки);
			
			ДанныеЗапроса = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("StatementRequest.Data", ПространствоИмен);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ДанныеЗапроса, "StatementType", "0", Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ДанныеЗапроса, "DateFrom", ДатаНачала, Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ДанныеЗапроса, "DateTo", ДатаОкончания, Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ДанныеЗапроса, "Account", НомерСчета, Истина, ТекстОшибки);
			
			БанкСчета = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("BankType", ПространствоИмен);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(БанкСчета, "BIC", РеквизитыБанка.Код, Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(БанкСчета, "Name", РеквизитыБанка.Наименование, , ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ДанныеЗапроса, "Bank", БанкСчета, Истина, ТекстОшибки);
			
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ЭД, "Data", ДанныеЗапроса, Истина, ТекстОшибки);
			
			ЭД.Проверить();
		
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				ФайлСформирован = Ложь;
			Иначе
				ЭлектронныеДокументыВнутренний.ВыгрузитьЭДвФайл(ЭД, ВремФайл, Ложь, "UTF-8");
				ФайлСформирован = Истина;
			КонецЕсли;

		Исключение
			КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										ШаблонСообщения, КраткоеПредставлениеОшибки);
			Операция = НСтр("ru = 'Формирование ЭД'");
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбработатьИсключениеПоЭДНаСервере(Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
			ФайлСформирован = Ложь;
		КонецПопытки;
		
		Если Не ФайлСформирован Тогда
			УдалитьФайлы(ВремФайл);
			Продолжить;
		КонецЕсли;
		
		ДвоичныеДанные = Новый ДвоичныеДанные(ВремФайл);
		АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	
		ШаблонСообщения = НСтр("ru='Запрос выписки с %1 по %2'");
	
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, Формат(ДатаНачала, "ДЛФ=D"), Формат(ДатаОкончания, "ДЛФ=D"));
	
		ЭД = ПрисоединенныеФайлы.ДобавитьФайл(СоглашениеЭД, ТекстСообщения, "xml", ТекущаяДатаСеанса(), ТекущаяДатаСеанса(),
												АдресФайла, , , Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку(УнИдЭД));

		ИмяФайла = СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(ТекстСообщения);
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("Автор", Пользователи.АвторизованныйПользователь());
		СтруктураПараметров.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
		СтруктураПараметров.Вставить("ВидЭД", Перечисления.ВидыЭД.ЗапросВыписки);
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СоглашениеЭД, "ИспользуетсяКриптография") Тогда
			СтруктураПараметров.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Сформирован);
		Иначе
			СтруктураПараметров.Вставить("СтатусЭД", Перечисления.СтатусыЭД.ПодготовленКОтправке);
		КонецЕсли;
		СтруктураПараметров.Вставить("Ответственный", Ответственный);
		СтруктураПараметров.Вставить("Организация", Организация);
		СтруктураПараметров.Вставить("Контрагент", Банк);
		СтруктураПараметров.Вставить("ВладелецЭД", СоглашениеЭД);
		СтруктураПараметров.Вставить("СоглашениеЭД", СоглашениеЭД);
		СтруктураПараметров.Вставить("ДатаДокументаОтправителя", ТекущаяДатаСеанса());
		СтруктураПараметров.Вставить("НаименованиеФайла", ИмяФайла);
		СтруктураПараметров.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
	
		ИзменитьПоСсылкеПрисоединенныйФайл(ЭД, СтруктураПараметров);
		МассивЭД.Добавить(ЭД);
		УдалитьФайлы(ВремФайл);
	КонецЦикла;
	
	Возврат МассивЭД;
	
КонецФункции

Функция ДанныеПодписей(СсылкаНаОбъект)
	
	МассивВозврата = Новый Массив;
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЭлектронныеПодписи.Подпись КАК Подпись,
	               |	ЭлектронныеПодписи.Сертификат
	               |ИЗ
	               |	Справочник.ЭДПрисоединенныеФайлы.ЭлектронныеПодписи КАК ЭлектронныеПодписи
	               |ГДЕ
	               |	ЭлектронныеПодписи.Ссылка = &СсылкаНаОбъект";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.Параметры.Вставить("СсылкаНаОбъект", СсылкаНаОбъект);
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗапроса.Следующий() Цикл
		ДвоичныеДанные = ВыборкаЗапроса.Подпись.Получить();
		АдресПодписи = ПоместитьВоВременноеХранилище(ДвоичныеДанные, Новый УникальныйИдентификатор);
		ДанныеСертификата = ВыборкаЗапроса.Сертификат.Получить();
		СтруктураВозврата = Новый Структура("АдресПодписи, Сертификат", АдресПодписи, ДанныеСертификата);
		МассивВозврата.Добавить(СтруктураВозврата);
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

Функция ОтправкаСформированныхЭДВБанк(СоглашениеЭД, ПараметрыАвторизации = Неопределено)

	Результат = 0;
	ГотовыеКОтправкеПакеты = ПодготовленныеКОтправкеЭДВБанк(СоглашениеЭД);
	Если ЗначениеЗаполнено(ГотовыеКОтправкеПакеты) Тогда
		Результат = ОтправкаПакетовЭД(ГотовыеКОтправкеПакеты, ПараметрыАвторизации);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовленныеКОтправкеЭДВБанк(НастройкаЭДО)
	
	ЗапросПодготовленныхЭД = Новый Запрос;
	ЗапросПодготовленныхЭД.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПакетЭД.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПакетЭД КАК ПакетЭД
	|ГДЕ
	|	НЕ ПакетЭД.ПометкаУдаления
	|	И ПакетЭД.СтатусПакета = ЗНАЧЕНИЕ(Перечисление.СтатусыПакетовЭД.ПодготовленКОтправке)
	|	И ПакетЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка)
	|	И ПакетЭД.НастройкаЭДО = &НастройкаЭДО";
	ЗапросПодготовленныхЭД.УстановитьПараметр("СтатусПакета", Перечисления.СтатусыПакетовЭД.ПодготовленКОтправке);
	ЗапросПодготовленныхЭД.УстановитьПараметр("НастройкаЭДО", НастройкаЭДО);
	
	ПодсистемаСбербанкОнлайн = "ЭлектронноеВзаимодействие.ЭлектронныеДокументы.ОбменСБанками.СбербанкОнлайн";
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует(ПодсистемаСбербанкОнлайн) Тогда
		ЗапросПодготовленныхЭД.Текст = ЗапросПодготовленныхЭД.Текст + "
				|	И НЕ(ПакетЭД.НастройкаЭДО.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка)
				|				И ПакетЭД.НастройкаЭДО.ПрограммаБанка = ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.СбербанкОнлайн))";
	КонецЕсли;
	
	Результат = ЗапросПодготовленныхЭД.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат Результат;
	
КонецФункции

Процедура ОбработатьОтветБанкаНаОтправкуДокументаAsync(ОтветБанка, ЭД, ПакетЭД)
	
	УстановитьСтатусЭД(ЭД, Перечисления.СтатусыЭД.Отправлен);
	СодержимоеФайла = Новый Соответствие;
	Чтение = Новый ЧтениеXML;
	URI = ЭлектронныеДокументыСлужебный.ПространствоИменАсинхронногоОбменаСБанками();
	
	Чтение.УстановитьСтроку(ОтветБанка);
	ResultBank = ФабрикаXDTO.ПрочитатьXML(Чтение, ФабрикаXDTO.Тип(URI, "ResultBank"));
	ResultBank.Проверить();
	Если НЕ ResultBank.Success = Неопределено Тогда
		Если НЕ ResultBank.Success.SendPacketResponse = Неопределено Тогда
			ПакетОбъект = ПакетЭД.ПолучитьОбъект();
			ПакетОбъект.ВнешнийУИД = ResultBank.Success.SendPacketResponse.ID;
			ПакетОбъект.Записать();
			Возврат;
		КонецЕсли
	ИначеЕсли НЕ ResultBank.Error = Неопределено Тогда
		ТекстОшибки = ТекстСообщенияОбОшибкеОтветаБанка(ResultBank.Error);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеВходящегоЭДБанка(НастройкаЭДО, ИмяФайла)
	
	УстановитьПривилегированныйРежим(Истина);
	РеквизитыНастройкиЭДО = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НастройкаЭДО, "Организация, Контрагент");
	
	ПространствоИмен = ЭлектронныеДокументыСлужебный.ПространствоИменАсинхронногоОбменаСБанками();
	
	ОбъектXML = Новый ЧтениеXML;
	
	Попытка
		ОбъектXML.ОткрытьФайл(ИмяФайла);
		ResultBank = ЭлектронныеДокументыВнутренний.ПолучитьТипЗначенияCML("ResultBank", ПространствоИмен);
		
		ResultBank = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ResultBank);
		ResultBank.Проверить();
	Исключение
		ШаблонСообщения = Нстр("ru = 'Получены некорректные данные из банка. Для решения проблемы обратитесь в свой банк.%1'");
		
		Если Пользователи.ЭтоПолноправныйПользователь( , , Ложь) Тогда
			ИнформацияОЖурнале = НСтр("ru = '
											|(подробности см. в Журнале регистрации).'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИнформацияОЖурнале);
		Иначе
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, "");
		КонецЕсли;
			
		ШаблонОшибкиДляЖурнала = НСтр("ru = 'Из банка получен файл с некорректным содержимым.
											|Путь к файлу: %1
											|Текст ошибки: %2.'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонОшибкиДляЖурнала, ИмяФайла, ПодробноеПредставлениеОшибки);
		
		ВидОперации = НСтр("ru = 'Чтение полученного из банка электронного документа.'");
		ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ТекстОшибки, ТекстСообщения, 1);
		
		ДанныеОшибки = Новый Структура;
		ДанныеОшибки.Вставить("ЕстьОшибка", Истина);
		ДанныеОшибки.Вставить("ТекстСообщения", ТекстСообщения);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ДанныеОшибки", ДанныеОшибки);
		Возврат СтруктураПараметров;
	КонецПопытки;
	
	ОбъектXML.Закрыть();
	УдалитьФайлы(ИмяФайла);
	
	Если НЕ ResultBank.Error = Неопределено Тогда
		ТекстОшибки = ТекстСообщенияОбОшибкеОтветаБанка(ResultBank.Error);
		ДанныеОшибки = Новый Структура;
		ДанныеОшибки.Вставить("ЕстьОшибка", Истина);
		ДанныеОшибки.Вставить("ТекстСообщения", ТекстОшибки);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ДанныеОшибки", ДанныеОшибки);
		Возврат СтруктураПараметров;
	КонецЕсли;
	
	Если НЕ ResultBank.Success.GetPacketResponse = Неопределено Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Получатель",          ResultBank.Success.GetPacketResponse.Recipient.Customer.name);
		СтруктураПараметров.Вставить("Отправитель",         ResultBank.Success.GetPacketResponse.Sender.Bank.name);
		СтруктураПараметров.Вставить("Организация",         РеквизитыНастройкиЭДО.Организация);
		СтруктураПараметров.Вставить("Контрагент",          РеквизитыНастройкиЭДО.Контрагент);
		СтруктураПараметров.Вставить("НастройкаЭДО",        НастройкаЭДО);
		СтруктураПараметров.Вставить("АдресОтправителя",    Неопределено);
		СтруктураПараметров.Вставить("АдресПолучателя",     Неопределено);
		СтруктураПараметров.Вставить("Зашифрован",          Ложь);
		СтруктураПараметров.Вставить("СертификатОрганизацииДляРасшифровки", Неопределено);
		СтруктураПараметров.Вставить("ВерсияФорматаПакета", Перечисления.ВерсииФорматаПакетаЭД.ПустаяСсылка());
		СтруктураПараметров.Вставить("ВнешнийУИД",          ResultBank.Success.GetPacketResponse.id);
		СтруктураПараметров.Вставить("СтатусПакета",        Перечисления.СтатусыПакетовЭД.КРаспаковке);
		СтруктураПараметров.Вставить("НаправленияЭД",       Перечисления.НаправленияЭД.Входящий);
		СтруктураПараметров.Вставить("СпособОбменаЭД",      Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка);
		ВремФайл = ПолучитьИмяВременногоФайла("xml");
		ЭлектронныеДокументыВнутренний.ВыгрузитьЭДвФайл(ResultBank, ВремФайл, Ложь, "utf-8");
		СтруктураПараметров.Вставить("ИмяФайлаПакета",      ВремФайл);
	КонецЕсли;

	Возврат СтруктураПараметров;
	
КонецФункции

Функция ТекстСообщенияОбОшибкеОтветаБанка(Ошибка)
	
	ШаблонОшибки = НСтр("ru = 'Получена ошибка из банка (%1). Код ошибки %2.
						|%3%4'");
	Дата = Формат(ТекущаяДатаСеанса(), "ДЛФ=DT");
	ДопИнформация = ?(ЗначениеЗаполнено(Ошибка.MoreInfo), " : " + Ошибка.MoreInfo, "");
	ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонОшибки, Дата, Ошибка.Code, Ошибка.Description, ДопИнформация);
	
	Возврат ТекстОшибки;
	
КонецФункции

Функция НайтиПакетЭД(НастройкаЭДО, ВнешнийУИД)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ПакетЭД.Ссылка
	               |ИЗ
	               |	Документ.ПакетЭД КАК ПакетЭД
	               |ГДЕ
	               |	ПакетЭД.НастройкаЭДО = &НастройкаЭДО
	               |	И ПакетЭД.ВнешнийУИД = &ВнешнийУИД
	               |	И ПакетЭД.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Исходящий)";
	Запрос.УстановитьПараметр("НастройкаЭДО", НастройкаЭДО);
	Запрос.УстановитьПараметр("ВнешнийУИД", ВнешнийУИД);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли
	
КонецФункции

Функция ДанныеДляОтправкиВБанк(Ссылки, ПрограммаБанка)
	
	ДанныеВозврата = Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПакетЭД.Ссылка,
	|	ПакетЭД.НастройкаЭДО КАК СоглашениеЭД
	|ПОМЕСТИТЬ Пакеты
	|ИЗ
	|	Документ.ПакетЭД КАК ПакетЭД
	|ГДЕ
	|	НЕ ПакетЭД.НастройкаЭДО.ПометкаУдаления
	|	И ПакетЭД.НастройкаЭДО.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
	|	И ПакетЭД.НастройкаЭДО.ПрограммаБанка = &ПрограммаБанка
	|	И НЕ ПакетЭД.ПометкаУдаления
	|	И ПакетЭД.СтатусПакета = ЗНАЧЕНИЕ(Перечисление.СтатусыПакетовЭД.ПодготовленКОтправке)
	|	И ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПакетЭД.Ссылка,
	|	ПакетЭД.ЭлектронныеДокументы.(
	|		ЭлектронныйДокумент,
	|		ЭлектронныйДокумент.ВидЭД
	|	),
	|	ПакетЭД.НастройкаЭДО КАК СоглашениеЭД
	|ИЗ
	|	Документ.ПакетЭД КАК ПакетЭД
	|ГДЕ
	|	ПакетЭД.Ссылка В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				Пакеты.Ссылка
	|			ИЗ
	|				Пакеты)
	|ИТОГИ ПО
	|	СоглашениеЭД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СертификатыПодписейОрганизации.Сертификат,
	|	СертификатыПодписейОрганизации.Ссылка КАК СоглашениеЭД
	|ПОМЕСТИТЬ Сертификаты
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СертификатыПодписейОрганизации
	|ГДЕ
	|	СертификатыПодписейОрганизации.Ссылка В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				Пакеты.СоглашениеЭД
	|			ИЗ
	|				Пакеты)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СертификатыЭП.Ссылка,
	|	СертификатыЭП.ДанныеСертификата КАК ДанныеСертификата,
	|	ЛОЖЬ КАК ЗапомнитьПарольКСертификату,
	|	ЛОЖЬ КАК ПарольПолучен,
	|	НЕОПРЕДЕЛЕНО КАК ПарольПользователя,
	|	Сертификаты.СоглашениеЭД КАК СоглашениеЭД
	|ИЗ
	|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК СертификатыЭП
	|		ЛЕВОЕ СОЕДИНЕНИЕ Сертификаты КАК Сертификаты
	|		ПО Сертификаты.Сертификат = СертификатыЭП.Ссылка
	|ГДЕ
	|	(СертификатыЭП.Пользователь = &ПустойПользователь
	|			ИЛИ СертификатыЭП.Пользователь = &ТекущийПользователь
	|			ИЛИ СертификатыЭП.Пользователь = &ПользовательНеУказан)
	|	И СертификатыЭП.Ссылка В
	|			(ВЫБРАТЬ
	|				Сертификаты.Сертификат
	|			ИЗ
	|				Сертификаты)
	|ИТОГИ ПО
	|	СоглашениеЭД";
	Если ТипЗнч(Ссылки) = Тип("СправочникСсылка.СоглашенияОбИспользованииЭД") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ИСТИНА", "И ПакетЭД.НастройкаЭДО = &НастройкаЭДО");
		Запрос.УстановитьПараметр("НастройкаЭДО", Ссылки);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ИСТИНА", "И ПакетЭД.Ссылка В (&ПакетыЭД)");
		Запрос.УстановитьПараметр("ПакетыЭД", Ссылки);
	КонецЕсли;
	Запрос.УстановитьПараметр("ПрограммаБанка", ПрограммаБанка);
	Запрос.УстановитьПараметр("ПустойПользователь", Справочники.Пользователи.ПустаяСсылка());
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());
	СвойстваНеуказанногоПользователя = ПользователиСлужебный.СвойстваНеуказанногоПользователя();
	Запрос.УстановитьПараметр("ПользовательНеУказан", СвойстваНеуказанногоПользователя.Ссылка);
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	ВыборкаСоглашения = ПакетЗапросов[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаСертификатов = ПакетЗапросов[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВремФайл = ПолучитьИмяВременногоФайла();
	Пока ВыборкаСоглашения.Следующий() Цикл
		ВыборкаПакеты = ВыборкаСоглашения.Выбрать();
		ДанныеПакетов = Новый Соответствие;
		Пока ВыборкаПакеты.Следующий() Цикл
			ВыборкаЭД = ВыборкаПакеты.ЭлектронныеДокументы.Выбрать();
			СтруктураДанных = Новый Структура;
			Пока ВыборкаЭД.Следующий() Цикл
				ДанныеЭД = ЭлектронныеДокументыСлужебный.ПолучитьДанныеФайла(ВыборкаЭД.ЭлектронныйДокумент, Новый УникальныйИдентификатор);
				Если ВыборкаЭД.ЭлектронныйДокументВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение
					ИЛИ ВыборкаЭД.ЭлектронныйДокументВидЭД = Перечисления.ВидыЭД.ПлатежноеТребование Тогда
					ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеЭД.СсылкаНаДвоичныеДанныеФайла);
					ДвоичныеДанные.Записать(ВремФайл);
					ТекстовыйДокумент = Новый ТекстовыйДокумент;
					ТекстовыйДокумент.Прочитать(ВремФайл);
					СтрокаXML = ТекстовыйДокумент.ПолучитьТекст();
					СтруктураДанных.Вставить("ПлатежноеПоручение", СтрокаXML);
					СтруктураДанных.Вставить("Ключ",               ВыборкаЭД.ЭлектронныйДокумент.УникальныйИдентификатор());
					Подписи = ДанныеПодписей(ВыборкаЭД.ЭлектронныйДокумент);
					МассивПодписей = Новый Массив;
					Для Каждого ДанныеПодписи ИЗ Подписи Цикл
						СтруктураДанныхПодписи = Новый Структура;
						СтруктураДанныхПодписи.Вставить("АдресПодписи", ДанныеПодписи.АдресПодписи);
						СтруктураДанныхПодписи.Вставить("Сертификат",   ДанныеПодписи.Сертификат);
						МассивПодписей.Добавить(СтруктураДанныхПодписи);
					КонецЦикла;
					СтруктураДанных.Вставить("Подписи", МассивПодписей);
				ИначеЕсли ВыборкаЭД.ЭлектронныйДокументВидЭД = Перечисления.ВидыЭД.ДопДанные Тогда
					СтруктураДанных.Вставить("СлужебныеДанные", ДанныеЭД.СсылкаНаДвоичныеДанныеФайла);
				КонецЕсли;
			КонецЦикла;
			ДанныеПакетов.Вставить(ВыборкаПакеты.Ссылка, СтруктураДанных);
		КонецЦикла;
		ВыборкаСертификатов.Сбросить();
		СтруктураПоиска = Новый Структура("СоглашениеЭД", ВыборкаСоглашения.СоглашениеЭД);
		Если ВыборкаСертификатов.НайтиСледующий(СтруктураПоиска) Тогда
			ВыборкаСертификатовДанные = ВыборкаСертификатов.Выбрать();
			Сертификаты = Новый Массив;
			Пока ВыборкаСертификатовДанные.Следующий() Цикл
				ДанныеСертификата = Новый Структура();
				ДанныеСертификата.Вставить("СертификатСсылка",            ВыборкаСертификатовДанные.Ссылка);
				ДанныеСертификата.Вставить("ПарольПользователя",          ВыборкаСертификатовДанные.ПарольПользователя);
				ДанныеСертификата.Вставить("ДвоичныеДанныеСертификата",   ВыборкаСертификатовДанные.ДанныеСертификата.Получить());
				ДанныеСертификата.Вставить("ЗапомнитьПарольКСертификату", ВыборкаСертификатовДанные.ЗапомнитьПарольКСертификату);
				Сертификаты.Добавить(ДанныеСертификата);
			КонецЦикла;
			СтруктураДанных = Новый Структура("ДанныеПакетов, Сертификаты", ДанныеПакетов, Сертификаты);
			ДанныеВозврата.Вставить(ВыборкаСоглашения.СоглашениеЭД, СтруктураДанных);
		Иначе
			ШаблонСообщения = Нстр("ru = 'Не указаны сертификаты в соглашении об использовании прямого обмена с банком %1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										ШаблонСообщения, ВыборкаСоглашения.СоглашениеЭД);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеВозврата;
	
КонецФункции

// Только для внутреннего использования
Функция МассивИдентификаторовВыпискиБанка(ЭДВыписка)
	
	МассивВнешнихИдентификаторов = Новый Массив;
		
	ДопИнформацияПоЭД = ЭлектронныеДокументыСлужебный.ПолучитьДанныеФайла(ЭДВыписка);
	Если ДопИнформацияПоЭД.Свойство("СсылкаНаДвоичныеДанныеФайла")
			И ЗначениеЗаполнено(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла) Тогда
		
		ДанныеЭД = ПолучитьИзВременногоХранилища(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);

		ИмяФайла = ПолучитьИмяВременногоФайла("xml");
				
		Если ИмяФайла = Неопределено Тогда
			ТекстОшибки = НСтр("ru = 'Не удалось прочитать электронный документ. Проверьте настройку рабочего каталога'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Возврат МассивВнешнихИдентификаторов;
		КонецЕсли;
		
		ДанныеЭД.Записать(ИмяФайла);
		
		СтруктураДанных = ЭлектронныеДокументыВнутренний.СформироватьДеревоРазбора(ИмяФайла, Неопределено);
		
		УдалитьФайлы(ИмяФайла);
		Если СтруктураДанных = Неопределено Тогда
			Возврат МассивВнешнихИдентификаторов;
		КонецЕсли;
		
		ДеревоРазбора = СтруктураДанных.ДеревоРазбора;
		СтрокаОбъекта = СтруктураДанных.СтрокаОбъекта;
		
		СтруктураОтбора = Новый Структура("Реквизит", "БанковскиеСчетаОрганизаций");
		БанковскиеСчетаОрганизаций = СтрокаОбъекта.Строки.НайтиСтроки(СтруктураОтбора);
		МассивСчетов = Новый Массив;
		
		Для Каждого СтрокаБанковскийСчет Из БанковскиеСчетаОрганизаций Цикл
			НомерСчета = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																			ДеревоРазбора,
																			СтрокаБанковскийСчет,
																			"БанковскийСчет.РасчСчет");
			МассивСчетов.Добавить(НомерСчета);
		КонецЦикла;
		
		СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
				
		Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
			ТекНомерСчета = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																						ДеревоРазбора,
																						СтрокаТЧ,
																						"ПлательщикСчет");
			
			ЭтоИсходящийПлатеж = МассивСчетов.Найти(ТекНомерСчета) <> Неопределено;
			Если ЭтоИсходящийПлатеж Тогда
				ИДВнешний = ЭлектронныеДокументыВнутренний.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
																							ДеревоРазбора,
																							СтрокаТЧ,
																							"ИдПлатежа");
				МассивВнешнихИдентификаторов.Добавить(ИДВнешний);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивВнешнихИдентификаторов;

КонецФункции


#Область _БСП_ПрисоединенныеФайлыСлужебныйВызовСервера

// Получает все подписи файла.
//
// Подробнее - см. описание ЭлектроннаяПодпись.ПолучитьВсеПодписи().
//
Функция ПолучитьВсеПодписи(СсылкаНаОбъект, УникальныйИдентификатор) Экспорт
	
	Возврат ЭлектронныеДокументыСлужебный.ПолучитьВсеПодписи(СсылкаНаОбъект, УникальныйИдентификатор);
	
КонецФункции

#КонецОбласти

Процедура УстановитьСтатусПоследнейПодписи(ЭД)
	
	ОбъектЭД = ЭД.ПолучитьОбъект();
	
	СтрокаЭП = ОбъектЭД.ЭлектронныеПодписи[ОбъектЭД.ЭлектронныеПодписи.Количество()-1];
	СтрокаЭП.ДатаПроверкиПодписи = ТекущаяДатаСеанса();
	СтрокаЭП.ПодписьВерна = Истина;
		
	ОбъектЭД.Записать();

КонецПроцедуры

// Только для внутреннего использования
Функция ДОЗакрытПринудительно(ВладелецФайла) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	1 КАК Поле1
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект = &СсылкаНаОбъект
	|	И СостоянияЭД.СостояниеВерсииЭД = &СостояниеВерсииЭД";
	Запрос.УстановитьПараметр("СсылкаНаОбъект", ВладелецФайла);
	Запрос.УстановитьПараметр("СостояниеВерсииЭД", Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ЗакрытПринудительно = Ложь;
	Иначе
		ЗакрытПринудительно = Истина;
	КонецЕсли;
	
	Возврат ЗакрытПринудительно;

	
КонецФункции

Функция ПолучитьДанныеЭД(СсылкаНаЭД)
	
	СсылкаНаДанные = "";
	
	ДопИнформацияПоЭД = ЭлектронныеДокументыСлужебный.ПолучитьДанныеФайла(СсылкаНаЭД);
	Если ДопИнформацияПоЭД.Свойство("СсылкаНаДвоичныеДанныеФайла")
		И ЗначениеЗаполнено(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла) Тогда
		
		ДанныеЭД = ПолучитьИзВременногоХранилища(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);
		
		Если ЗначениеЗаполнено(ДопИнформацияПоЭД.Расширение) Тогда
			ИмяФайла = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла(ДопИнформацияПоЭД.Расширение);
		Иначе
			ИмяФайла = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("xml");
		КонецЕсли;
		
		ДанныеЭД.Записать(ИмяФайла);
		
		Если Найти(ДопИнформацияПоЭД.Расширение, "zip") > 0
				И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаЭД, "ВидЭД") = Перечисления.ВидыЭД.КаталогТоваров Тогда
			СсылкаНаДанные = ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла
		ИначеЕсли Найти(ДопИнформацияПоЭД.Расширение, "zip") > 0 Тогда
		
			ЗИПЧтение = Новый ЧтениеZipФайла(ИмяФайла);
			ПапкаДляРаспаковки = ЭлектронныеДокументыСлужебный.РабочийКаталог(, СсылкаНаЭД.УникальныйИдентификатор());
			
			УдалитьФайлы(ПапкаДляРаспаковки, "*.*");
			
			Попытка
				ЗипЧтение.ИзвлечьВсе(ПапкаДляРаспаковки);
			Исключение
				ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				Если НЕ ЭлектронныеДокументыСлужебный.ВозможноИзвлечьФайлы(ЗипЧтение, ПапкаДляРаспаковки) Тогда
					ТекстСообщения = ЭлектронныеДокументыПовтИсп.ПолучитьСообщениеОбОшибке("006");
				КонецЕсли;
				ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Распаковка пакета ЭД'"), ТекстОшибки, ТекстСообщения);
				УдалитьФайлы(ПапкаДляРаспаковки);
				Возврат "";
			КонецПопытки;
			
			ФайлыАрхиваXML = НайтиФайлы(ПапкаДляРаспаковки, "*.xml");
			Для Каждого РаспакованныйФайл Из ФайлыАрхиваXML Цикл
				ДвоичныеДанныеФайла = Новый ДвоичныеДанные(РаспакованныйФайл.ПолноеИмя);
				СсылкаНаДанные = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, Новый УникальныйИдентификатор);
				Прервать;
			КонецЦикла;
			
			УдалитьФайлы(ПапкаДляРаспаковки);
			
		ИначеЕсли Найти(ДопИнформацияПоЭД.Расширение, "xml") > 0 Тогда
			СсылкаНаДанные = ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СсылкаНаДанные;
	
КонецФункции

// Дополняет массив пакетов, которые будут распаковываться, не распакованными пакетами.
// 
// Параметры:
// ПакетыСоСвойствами - массив, элементами которого являются структура, которая содержит
// ссылка на документ ПакетЭД и параметры, необходимые для его распаковки
//
Процедура ДополнитьПакетамиКРаспаковке(ПакетыСоСвойствами) Экспорт
	
	НовыеПакеты = Новый Массив;
	Для Каждого ЭлементМассива Из ПакетыСоСвойствами Цикл
		
		НовыеПакеты.Добавить(ЭлементМассива.ПакетЭД);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	НастройкиЭДОИсходящиеДокументы.ПрофильНастроекЭДО КАК ПрофильЭДО,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка КАК НастройкаЭДО
	|ПОМЕСТИТЬ втПрофилиОбмена
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК НастройкиЭДОИсходящиеДокументы
	|ГДЕ
	|	НЕ НастройкиЭДОИсходящиеДокументы.Ссылка.ПометкаУдаления
	|	И НастройкиЭДОИсходящиеДокументы.Ссылка.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПакетЭД.Ссылка КАК Пакет
	|ИЗ
	|	Документ.ПакетЭД КАК ПакетЭД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПрофилиОбмена КАК втПрофилиОбмена
	|		ПО ПакетЭД.НастройкаЭДО = втПрофилиОбмена.НастройкаЭДО
	|			И ПакетЭД.ПрофильНастроекЭДО = втПрофилиОбмена.ПрофильЭДО
	|ГДЕ
	|	ПакетЭД.СтатусПакета = &СтатусПакета
	|	И ПакетЭД.ПометкаУдаления = ЛОЖЬ
	|	И ПакетЭД.ПрофильНастроекЭДО В
	|			(ВЫБРАТЬ
	|				втПрофилиОбмена.ПрофильЭДО
	|			ИЗ
	|				втПрофилиОбмена)
	|	И НЕ ПакетЭД.Ссылка В (&НовыеПакеты)";
	
	Запрос.УстановитьПараметр("СтатусПакета", Перечисления.СтатусыПакетовЭД.КРаспаковке);
	Запрос.УстановитьПараметр("НовыеПакеты", НовыеПакеты);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	МассивПЭД = Результат.Выгрузить().ВыгрузитьКолонку("Пакет");
	ПараметрыРаспаковки = ОпределитьПараметрыРаспаковки(МассивПЭД);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПакетыСоСвойствами, ПараметрыРаспаковки);
	
КонецПроцедуры

// Только для внутреннего использования
Функция ЭтоПрямойОбмен(СпособОбменаЭД) Экспорт
	
	Результат = Ложь;
	Если СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезКаталог
		ИЛИ СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту
		ИЛИ СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезFTP Тогда
		
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РеквизитыПрофиляНастроекЭДО(ПрофильНастроекЭДО) Экспорт
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрофильНастроекЭДО, "СпособОбменаЭД, ИдентификаторОрганизации");
	
КонецФункции

