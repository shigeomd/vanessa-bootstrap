////////////////////////////////////////////////////////////////////////////////
// Подсистема "Раздельный учет НДС".
// 
////////////////////////////////////////////////////////////////////////////////

#Область ФормированиеДвиженийДокументов

#Область АвансовыйОтчет

Процедура СформироватьДвиженияПоступлениеТоваровУслугОтПодотчетногоЛица(ТаблицаТовары, ТаблицаУслуги, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьРеквизитыПоступлениеТоваровУслугОтПодотчетногоЛица(ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Реквизиты.Организация, Реквизиты.Период);
	
	Если НЕ РаздельныйУчетНДСНаСчете19 Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьПараметрыПоступлениеТоваровУслугОтПодотчетногоЛица(Параметры, ТаблицаТовары, ТаблицаУслуги);
	
	УчетНДС.ЗаполнитьВидыЦенностейПоступлениеОтПоставщика(Параметры.Товары, Реквизиты, Неопределено, "СчетУчета");
	УчетНДС.ЗаполнитьВидыЦенностейПоступлениеОтПоставщика(Параметры.Услуги, Реквизиты, Неопределено, "СчетЗатрат");

	ДанныеДвижений = ПодготовитьДанныеДвиженийПоступлениеТоваровУслугОтПодотчетногоЛица(
		Параметры.Товары, Параметры.Услуги, Реквизиты);
	
    СформироватьДвиженияПоступлениеЦенностей(ДанныеДвижений, Реквизиты, Движения, Отказ);
		
КонецПроцедуры

Функция ПодготовитьРеквизитыПоступлениеТоваровУслугОтПодотчетногоЛица(ТаблицаРеквизиты)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                    // <ДокументСсылка.АвансовыйОтчет>
	+ "Период,"                         // <Дата>
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "Подразделение,"                  // <Ссылка на справочник подразделений>
	+ "Склад,"                          // <СправочникСсылка.Склады>
	+ "УчетАгентскогоНДС,"              // <Булево>
	+ "ФизЛицо,"                        // <СправочникСсылка.ФизическиеЛица>
	+ "ВалютаДокумента"                 // <СправочникСсылка.Валюты>
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;	
		
КонецФункции

Процедура ПодготовитьПараметрыПоступлениеТоваровУслугОтПодотчетногоЛица(Параметры, ТаблицаТовары, ТаблицаУслуги)

	// Подготовка таблицы Товары

	СписокОбязательныхКолонок = ""
	+ "ПредъявленСчетФактура,"   // <Булево> - признак, что на момент поступления товаров счет-фактура предъявлен поставщиком
	+ "СчетФактура,"             // <ДокументСсылка.СчетФактураПолученный>
	+ "Контрагент,"              // <СправочникСсылка.Контрагенты>
	+ "Номенклатура,"            // <СправочникСсылка.Номенклатура>
	+ "Содержание,"              // <Строка,150> - содержание для проводок
	+ "СуммаРуб,"                // <Число,15,2> - сумма в рублях
	+ "СуммаБезНДСРуб,"          // <Число,15,2> - сумма без НДС в рублях
	+ "СуммаНДСРуб,"             // <Число,15,2> - сумма НДС в рублях
	+ "СчетУчета,"               // <ПланСчетовСсылка.Хозрасчетный>
	+ "СчетУчетаНДС,"            // <ПланСчетовСсылка.Хозрасчетный>
	+ "СпособУчетаНДС,"          // <ПеречислениеСсылка.СпособыУчетаНДС>
	+ "СуммаВзаиморасчетов,"     // <Число,15,2> - сумма в валюте расчетов с поставщиком
	+ "СуммаНДСВзаиморасчетов,"  // <Число,15,2> - сумма НДС в валюте расчетов с поставщиком
	+ "СтавкаНДС,"               // <ПеречислениеСсылка.СтавкиНДС>
	+ "Количество"               // <Число,15,3>
	;
	Параметры.Вставить("Товары", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТовары, СписокОбязательныхКолонок));
	Реквизиты = Параметры.Реквизиты[0];
	// Документом партии при поступлении от подотчетного лица выступает авансовый отчет
	Параметры.Товары.Колонки.Добавить("Партия", Документы.ТипВсеСсылки());
	Параметры.Товары.ЗаполнитьЗначения(Реквизиты.Регистратор, "Партия");
	// Склад берем Из шапки авансового отчета
	Параметры.Товары.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	Параметры.Товары.ЗаполнитьЗначения(Реквизиты.Склад, "Склад");
	Параметры.Товары.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Параметры.Товары.ЗаполнитьЗначения(Реквизиты.Подразделение, "Подразделение");
	
	// Подготовка таблицы Услуги

	СписокОбязательныхКолонок = ""
	+ "ПредъявленСчетФактура,"   // <Булево> - признак, что на момент поступления товаров счет-фактура предъявлен поставщиком
	+ "СчетФактура,"             // <ДокументСсылка.СчетФактураПолученный>
	+ "Контрагент,"              // <СправочникСсылка.Контрагенты>
	+ "Содержание,"              // <Строка,150> - содержание для проводок
	+ "СуммаРуб,"                // <Число,15,2> - сумма в рублях
	+ "СуммаБезНДСРуб,"          // <Число,15,2> - сумма без НДС в рублях
	+ "СуммаНДСРуб,"             // <Число,15,2> - сумма НДС в рублях
	+ "СчетЗатрат,"              // <ПланСчетовСсылка.Хозрасчетный>
	+ "Субконто1,"               // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "Субконто2,"               // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "Субконто3,"               // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "СтатьяЗатрат,"            // <СправочникСсылка.СтатьиЗатрат>
	+ "ПодразделениеЗатрат,"     // <Ссылка на справочник подразделений>
	+ "СчетУчетаНДС,"            // <ПланСчетовСсылка.Хозрасчетный>
	+ "СпособУчетаНДС,"          // <ПеречислениеСсылка.СпособыУчетаНДС>	
	+ "СуммаВзаиморасчетов,"     // <Число,15,2> - сумма в валюте расчетов с поставщиком
	+ "СуммаНДСВзаиморасчетов,"  // <Число,15,2> - сумма НДС в валюте расчетов с поставщиком
	+ "СтавкаНДС"                // <ПеречислениеСсылка.СтавкиНДС>
	;
	Параметры.Вставить("Услуги", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаУслуги, СписокОбязательныхКолонок));
		
	Параметры.Услуги.Колонки.Добавить("Партия", Документы.ТипВсеСсылки());
	Параметры.Услуги.ЗаполнитьЗначения(Реквизиты.Регистратор, "Партия");
    Параметры.Услуги.Колонки.ПодразделениеЗатрат.Имя = "Подразделение";
	
КонецПроцедуры

Функция ПодготовитьДанныеДвиженийПоступлениеТоваровУслугОтПодотчетногоЛица(Товары, Услуги, Реквизиты)

	ПартионныйУчет = УчетнаяПолитика.СпособОценкиМПЗ(Реквизиты.Организация, Реквизиты.Период) = Перечисления.СпособыОценки.ФИФО;
	
	ДанныеДвижений = Товары.Скопировать(,
		"СчетУчета,Подразделение,Номенклатура,Склад,Партия,Контрагент,ПредъявленСчетФактура,
		|СчетФактура,ВидЦенности,СчетУчетаНДС,СтавкаНДС,СпособУчетаНДС,
		|Количество,СуммаБезНДСРуб,СуммаНДСРуб");
	ДанныеДвижений.Колонки.СчетУчета.Имя = "СчетЗатрат";

	ДанныеДвижений.Колонки.Добавить("Субконто1");
	ДанныеДвижений.Колонки.Добавить("Субконто2");
	ДанныеДвижений.Колонки.Добавить("Субконто3");
	
	Для каждого СтрокаТаблицы Из ДанныеДвижений Цикл

		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетЗатрат);
		Для Ном = 1 По СвойстваСчета.КоличествоСубконто Цикл
			Если СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура
			 ИЛИ СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства Тогда
				СтрокаТаблицы["Субконто" + Ном] = СтрокаТаблицы.Номенклатура;
			ИначеЕсли СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады Тогда
				Если БухгалтерскийУчетВызовСервераПовтИсп.ВедетсяСуммовойУчетПоСкладам(СтрокаТаблицы.СчетЗатрат) Тогда
					СтрокаТаблицы["Субконто" + Ном] = СтрокаТаблицы.Склад;
				КонецЕсли;
	        ИначеЕсли СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии Тогда
				Если ПартионныйУчет Тогда
					СтрокаТаблицы["Субконто" + Ном] = СтрокаТаблицы.Партия;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если НЕ СвойстваСчета.УчетПоПодразделениям Тогда
			СтрокаТаблицы.Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		КонецЕсли;
		
	КонецЦикла;

	ДанныеДвижений.Колонки.Удалить("Номенклатура");
	ДанныеДвижений.Колонки.Удалить("Склад");
	
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(Услуги, ДанныеДвижений);
	
	ДанныеДвижений.Колонки.Добавить("Регистратор", Документы.ТипВсеСсылки());
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Регистратор, "Регистратор");
	
	ДанныеДвижений.Колонки.Добавить("Период",      Новый ОписаниеТипов("Дата"));
	ДанныеДвижений.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Период, "Период,ДатаСобытия");

	ДанныеДвижений.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");

	ДанныеДвижений.Колонки.Контрагент.Имя = "Поставщик";
	ДанныеДвижений.Колонки.Добавить("ДоговорКонтрагента", // колонка договор всегда пустая
		Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ДанныеДвижений.Колонки.Добавить("ПоставщикПредъявляетНДС", Новый ОписаниеТипов("Булево"));		

	ДанныеДвижений.Колонки.СпособУчетаНДС.Имя = "НовыйСпособУчетаНДС";
	ДанныеДвижений.Колонки.Добавить("СпособУчетаНДС", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыУчетаНДС"));
	
	ДанныеДвижений.Колонки.Добавить("СпособУчетаНДСИзменился",
		Новый ОписаниеТипов("Булево"));
	ДанныеДвижений.ЗаполнитьЗначения(Истина, "СпособУчетаНДСИзменился");
		
	ДанныеДвижений.Колонки.СчетФактура.Имя = "СчетФактураДокумент";	
	ДанныеДвижений.Колонки.Добавить("СчетФактура", Документы.ТипВсеСсылки());
		
	Для каждого СтрокаТаблицы Из ДанныеДвижений Цикл
		Если СтрокаТаблицы.ПредъявленСчетФактура Тогда
			СтрокаТаблицы.СчетФактура = СтрокаТаблицы.СчетФактураДокумент;
			СтрокаТаблицы.ПоставщикПредъявляетНДС = Истина;
		Иначе	
			СтрокаТаблицы.СчетФактура = Реквизиты.Регистратор;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеДвижений.Колонки.СуммаНДСРуб.Имя = "НДС";
	ДанныеДвижений.Колонки.СуммаБезНДСРуб.Имя = "СуммаБезНДС";

	Возврат ДанныеДвижений;

КонецФункции

#КонецОбласти

#Область ВозвратТоваровОтПокупателя

Функция ПодготовитьТаблицуСобственныеТоварыУслугиНДС(СобственныеТоварыУслугиНДС, ТоварыНДС) Экспорт
	
	Параметры = ПодготовитьПараметрыТаблицыСобственныеТоварыУслугиНДС(СобственныеТоварыУслугиНДС, ТоварыНДС);
	Параметры.ТоварыНДС.Индексы.Добавить("ИмяСписка,НомерСтроки");
	
	Для Каждого СтрокаТаблицы Из Параметры.СобственныеТоварыУслугиНДС Цикл
		
		СтруктураОтбора = Новый Структура("ИмяСписка, НомерСтроки");
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТаблицы);
		НайденныеСтроки = Параметры.ТоварыНДС.НайтиСтроки(СтруктураОтбора);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаТаблицы.СпособУчетаНДС = НайденныеСтроки[0].СпособУчетаНДС;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Параметры.СобственныеТоварыУслугиНДС;
	
КонецФункции

Функция ПодготовитьТаблицуСобственныеТоварыУслугиНДСВозвратКомиссионеру(СобственныеТоварыУслугиНДС, ТоварыНДС) Экспорт
	
	Параметры = ПодготовитьПараметрыТаблицыСобственныеТоварыУслугиНДСВозвратКомиссионеру(СобственныеТоварыУслугиНДС, ТоварыНДС);
	
	Параметры.СобственныеТоварыУслугиНДС.Колонки.Добавить("СпособУчетаНДС",
		Новый ОписаниеТипов("ПеречислениеСсылка.СпособыУчетаНДС"));
		
	Параметры.СобственныеТоварыУслугиНДС.Колонки.Добавить("СчетФактура",
		Документы.ТипВсеСсылки());
		
	Параметры.ТоварыНДС.Индексы.Добавить("ИмяСписка,НомерСтроки");
	
	Для Каждого СтрокаТаблицы Из Параметры.СобственныеТоварыУслугиНДС Цикл
		
		СтруктураОтбора = Новый Структура("ИмяСписка, НомерСтроки");
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТаблицы);
		НайденныеСтроки = Параметры.ТоварыНДС.НайтиСтроки(СтруктураОтбора);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, НайденныеСтроки[0],"СпособУчетаНДС, СчетФактура");
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Параметры.СобственныеТоварыУслугиНДС;
	
КонецФункции

Функция ПодготовитьПараметрыТаблицыСобственныеТоварыУслугиНДСВозвратКомиссионеру(ТаблицаСобственныеТоварыУслугиНДС, ТаблицаТоварыНДС)

	Параметры = Новый Структура;

	// Подготовка таблицы СобственныеТоварыУслугиНДС

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "НомерСтроки,"
	+ "Номенклатура,"
	+ "Сделка,"
	+ "Количество,"
	+ "СуммаВзаиморасчетов,"
	+ "СуммаРуб,"
	+ "СуммаНДСРуб,"
	+ "СуммаБУ,"
	+ "СуммаНУ,"
	+ "СчетУчета,"
	+ "СчетДоходов,"
	+ "Субконто,"
	+ "СтавкаНДС,"
	+ "СчетУчетаНДСПоРеализации,"
	+ "КорСчет,"
	+ "КорСубконто1,"
	+ "КорСубконто2,"
	+ "КорСубконто3,"
	+ "Контрагент,"
	+ "Покупатель,"
	+ "ВалютаВзаиморасчетов,"
	+ "Подразделение,"
	+ "ЭтоКомиссия,"
	+ "ЭтоУслуга,"
	+ "Комитент,"
	+ "ДоговорКомиссии,"
	+ "ДокументРасчетовСКомитентом,"
	+ "ДатаРеализации,"
	+ "СчетРасчетовСКомитентом,"
	+ "СчетАвансовСКомитентом,"
	+ "ВалютаРасчетовСКомитентом,"
	+ "СуммаРасчетовСКомитентом,"
	+ "СуммаПоступленияОтКомитента,"
	+ "СуммаБезНДСРуб"
	;
	Параметры.Вставить("СобственныеТоварыУслугиНДС", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСобственныеТоварыУслугиНДС, СписокОбязательныхКолонок));

	// Подготовка таблицы ТоварыНДС 
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка," 
	+ "НомерСтроки," 
	+ "СпособУчетаНДС," 
	+ "СчетФактура" 
	;
	Параметры.Вставить("ТоварыНДС", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТоварыНДС, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции

Функция ПодготовитьПараметрыТаблицыСобственныеТоварыУслугиНДС(ТаблицаСобственныеТоварыУслугиНДС, ТаблицаТоварыНДС)

	Параметры = Новый Структура;

	// Подготовка таблицы СобственныеТоварыУслугиНДС

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "НомерСтроки,"
	+ "Номенклатура,"
	+ "Количество,"
	+ "СуммаВзаиморасчетов,"
	+ "СуммаРуб,"
	+ "СуммаНДСРуб,"
	+ "СуммаБУ,"
	+ "СуммаНУ,"
	+ "СчетУчета,"
	+ "СчетДоходов,"
	+ "Субконто,"
	+ "СтавкаНДС,"
	+ "СчетУчетаНДСПоРеализации,"
	+ "КорСчет,"
	+ "КорСубконто1,"
	+ "КорСубконто2,"
	+ "КорСубконто3,"
	+ "Контрагент,"
	+ "Покупатель,"
	+ "ВалютаВзаиморасчетов,"
	+ "Подразделение,"
	+ "ЭтоКомиссия,"
	+ "ЭтоУслуга,"
	+ "Комитент,"
	+ "ДоговорКомиссии,"
	+ "ДокументРасчетовСКомитентом,"
	+ "ДатаРеализации,"
	+ "СчетРасчетовСКомитентом,"
	+ "СчетАвансовСКомитентом,"
	+ "ВалютаРасчетовСКомитентом,"
	+ "СуммаРасчетовСКомитентом,"
	+ "СуммаПоступленияОтКомитента,"
	+ "СуммаБезНДСРуб"
	;
	Параметры.Вставить("СобственныеТоварыУслугиНДС", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСобственныеТоварыУслугиНДС, СписокОбязательныхКолонок));

	Параметры.СобственныеТоварыУслугиНДС.Колонки.Добавить("СпособУчетаНДС",
		Новый ОписаниеТипов("ПеречислениеСсылка.СпособыУчетаНДС"));
		
	// Подготовка таблицы Товары

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка," 
	+ "НомерСтроки," 
	+ "СпособУчетаНДС" 
	;
	Параметры.Вставить("ТоварыНДС", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТоварыНДС, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияВозвратТоваровОтПокупателя(ТаблицаВозвращаемыеТовары, Реквизиты, Движения, Отказ) Экспорт

	Если ЗначениеЗаполнено(Реквизиты.ДокументОтгрузки) Тогда
		СформироватьДвиженияВозвратТоваровПоДокументуОтгрузки(Реквизиты, Движения, Отказ);
	Иначе
		ДанныеДвижений = ПодготовитьДанныеДвиженийВозвратТоваровОтПокупателя(ТаблицаВозвращаемыеТовары, Реквизиты);
		СформироватьДвиженияПоступлениеЦенностей(ДанныеДвижений, Реквизиты, Движения, Отказ);
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьТаблицуПартийПоРегиструНДСРаздельныйУчет(Реквизиты)

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Регистратор",		Реквизиты.Регистратор);
	Запрос.УстановитьПараметр("ДокументОтгрузки",	Реквизиты.ДокументОтгрузки);
	Запрос.УстановитьПараметр("Организация",		Реквизиты.Организация);
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.СчетУчета КАК СчетУчета,
	|	СУММА(ТаблицаТовары.Количество) КАК Количество,
	|	ТаблицаТовары.Ссылка.Организация КАК Организация
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.СчетУчета,
	|	ТаблицаТовары.Ссылка.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	СчетУчета,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСРаздельныйУчет.Организация КАК Организация,
	|	НДСРаздельныйУчет.Партия,
	|	СУММА(НДСРаздельныйУчет.Количество) КАК Количество,
	|	СУММА(НДСРаздельныйУчет.НДС) КАК НДС,
	|	СУММА(НДСРаздельныйУчет.СуммаБезНДС) КАК СуммаБезНДС,
	|	НДСРаздельныйУчет.АналитикаУчетаЗатрат,
	|	НДСРаздельныйУчет.АналитикаУчетаНДС,
	|	НДСРаздельныйУчет.СпособУчетаНДС,
	|	Аналитика.СчетЗатрат КАК СчетУчета,
	|	Аналитика.Субконто1 КАК Номенклатура,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПартии
	|ПОМЕСТИТЬ ДвиженияПоНДСРаздельныйУчет
	|ИЗ
	|	РегистрНакопления.НДСРаздельныйУчет КАК НДСРаздельныйУчет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаЗатрат КАК Аналитика
	|		ПО НДСРаздельныйУчет.АналитикаУчетаЗатрат = Аналитика.КлючАналитики
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО (ДанныеПервичныхДокументов.Документ = НДСРаздельныйУчет.Партия)
	|ГДЕ
	|	НДСРаздельныйУчет.Регистратор = &ДокументОтгрузки
	|	И НДСРаздельныйУчет.Организация = &Организация
	|	И НДСРаздельныйУчет.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И НДСРаздельныйУчет.Количество <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСРаздельныйУчет.Организация,
	|	НДСРаздельныйУчет.Партия,
	|	НДСРаздельныйУчет.АналитикаУчетаЗатрат,
	|	НДСРаздельныйУчет.АналитикаУчетаНДС,
	|	НДСРаздельныйУчет.СпособУчетаНДС,
	|	Аналитика.СчетЗатрат,
	|	Аналитика.Субконто1,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, ДАТАВРЕМЯ(1, 1, 1))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	СчетУчета,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСРаздельныйУчет.Организация,
	|	НДСРаздельныйУчет.Партия КАК Партия,
	|	НДСРаздельныйУчет.АналитикаУчетаЗатрат,
	|	НДСРаздельныйУчет.АналитикаУчетаНДС,
	|	НДСРаздельныйУчет.СпособУчетаНДС,
	|	ЕСТЬNULL(НДСРаздельныйУчет.Количество, 0) КАК Количество,
	|	ЕСТЬNULL(НДСРаздельныйУчет.НДС, 0) КАК НДС,
	|	ЕСТЬNULL(НДСРаздельныйУчет.СуммаБезНДС, 0) КАК СуммаБезНДС,
	|	ТаблицаДокумента.Количество КАК КоличествоСписать,
	|	НДСРаздельныйУчет.ДатаПартии
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДвиженияПоНДСРаздельныйУчет КАК НДСРаздельныйУчет
	|		ПО ТаблицаДокумента.Номенклатура = НДСРаздельныйУчет.Номенклатура
	|			И ТаблицаДокумента.СчетУчета = НДСРаздельныйУчет.СчетУчета
	|			И ТаблицаДокумента.Организация = НДСРаздельныйУчет.Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	НДСРаздельныйУчет.ДатаПартии
	|ИТОГИ
	|	МАКСИМУМ(КоличествоСписать)
	|ПО
	|	НДСРаздельныйУчет.Номенклатура";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция СформироватьДвиженияВозвратТоваровПоДокументуОтгрузки(Реквизиты, Движения, Отказ)

	ТаблицаПартий = ПолучитьТаблицуПартийПоРегиструНДСРаздельныйУчет(Реквизиты);
	
	ВыборкаНоменклатура = ТаблицаПартий.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		НеобходимоСписать = ВыборкаНоменклатура.КоличествоСписать;
		
		ДетальныеЗаписи = ВыборкаНоменклатура.Выбрать();
		Пока ДетальныеЗаписи.Следующий() Цикл
			
			СписатьИзТекущейПартии  = Мин(ДетальныеЗаписи.Количество, НеобходимоСписать);
			Если СписатьИзТекущейПартии = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НеобходимоСписать = НеобходимоСписать - СписатьИзТекущейПартии;
			
			Движение = Движения.НДСРаздельныйУчет.ДобавитьРасход();
			
			ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
			ЗаполнитьЗначенияСвойств(Движение, ДетальныеЗаписи);
			
			Если ДетальныеЗаписи.Количество = СписатьИзТекущейПартии Тогда
				Движение.Количество  = - СписатьИзТекущейПартии;
				Движение.СуммаБезНДС = - ДетальныеЗаписи.СуммаБезНДС;
				Движение.НДС         = - ДетальныеЗаписи.НДС;
			Иначе
				Движение.Количество	 = - СписатьИзТекущейПартии;
				Движение.СуммаБезНДС = - (ДетальныеЗаписи.СуммаБезНДС / ДетальныеЗаписи.Количество) * СписатьИзТекущейПартии;
				Движение.НДС         = - (ДетальныеЗаписи.НДС / ДетальныеЗаписи.Количество) * СписатьИзТекущейПартии;
			КонецЕсли;
			
			Если НеобходимоСписать = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Движения.НДСРаздельныйУчет.Записывать = Истина;
	
КонецФункции

Функция ПодготовитьДанныеДвиженийВозвратТоваровОтПокупателя(ТаблицаВозвращаемыеТовары, Реквизиты)
	
	ПартионныйУчет = УчетнаяПолитика.СпособОценкиМПЗ(Реквизиты.Организация, Реквизиты.Период) = Перечисления.СпособыОценки.ФИФО;
	
	ДанныеДвижений = ТаблицаВозвращаемыеТовары.Скопировать(,
		"СчетУчета,Подразделение,Номенклатура,Склад,Партия,
		|СчетФактура,ВидЦенности,СчетУчетаНДС,СтавкаНДС,СпособУчетаНДС,
		|Количество,СуммаБезНДСРуб,СуммаНДСРуб");
		
	ДанныеДвижений.Колонки.СчетУчета.Имя = "СчетЗатрат";

	ДанныеДвижений.Колонки.Добавить("Субконто1");
	ДанныеДвижений.Колонки.Добавить("Субконто2");
	ДанныеДвижений.Колонки.Добавить("Субконто3");
	
	Для каждого СтрокаТаблицы Из ДанныеДвижений Цикл

		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетЗатрат);
		Для Ном = 1 По СвойстваСчета.КоличествоСубконто Цикл
			Если СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура
			 ИЛИ СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства Тогда
				СтрокаТаблицы["Субконто" + Ном] = СтрокаТаблицы.Номенклатура;
			ИначеЕсли СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады Тогда
				Если БухгалтерскийУчетВызовСервераПовтИсп.ВедетсяСуммовойУчетПоСкладам(СтрокаТаблицы.СчетЗатрат) Тогда
					СтрокаТаблицы["Субконто" + Ном] = СтрокаТаблицы.Склад;
				КонецЕсли;
			ИначеЕсли СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии Тогда
				Если ПартионныйУчет Тогда
					СтрокаТаблицы["Субконто" + Ном] = СтрокаТаблицы.Партия;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если НЕ СвойстваСчета.УчетПоПодразделениям Тогда
			СтрокаТаблицы.Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		КонецЕсли;
		
	КонецЦикла;

	ДанныеДвижений.Колонки.Удалить("Номенклатура");
	ДанныеДвижений.Колонки.Удалить("Склад");
	
	ДанныеДвижений.Колонки.Добавить("Регистратор", Документы.ТипВсеСсылки());
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Регистратор, "Регистратор,Партия");
	
	ДанныеДвижений.Колонки.Добавить("Период",      Новый ОписаниеТипов("Дата"));
	ДанныеДвижений.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Период, "Период,ДатаСобытия");

	ДанныеДвижений.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");

	ДанныеДвижений.Колонки.Добавить("Поставщик", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Контрагент, "Поставщик");
	ДанныеДвижений.Колонки.Добавить("ДоговорКонтрагента", // колонка договор всегда пустая
		Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));

	ДанныеДвижений.Колонки.СпособУчетаНДС.Имя = "НовыйСпособУчетаНДС";
	ДанныеДвижений.Колонки.Добавить("СпособУчетаНДС", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыУчетаНДС"));
	
	ДанныеДвижений.Колонки.Добавить("СпособУчетаНДСИзменился",
		Новый ОписаниеТипов("Булево"));
	ДанныеДвижений.ЗаполнитьЗначения(Истина, "СпособУчетаНДСИзменился");
		
	ДанныеДвижений.Колонки.СчетФактура.Имя = "СчетФактураДокумент";	
	ДанныеДвижений.Колонки.Добавить("СчетФактура", Документы.ТипВсеСсылки());
	
	ДанныеДвижений.Колонки.Добавить("ПоставщикПредъявляетНДС", Новый ОписаниеТипов("Булево"));
	ДанныеДвижений.ЗаполнитьЗначения(Истина, "ПоставщикПредъявляетНДС");
	
	Для каждого СтрокаТаблицы Из ДанныеДвижений Цикл
		Если Реквизиты.ПокупателемВыставляетсяСчетФактураНаВозврат Тогда
			СтрокаТаблицы.СчетФактура	= Реквизиты.Регистратор;
		Иначе
			СтрокаТаблицы.СчетФактура = Реквизиты.ДокументОтгрузки;
		КонецЕсли;	
	КонецЦикла;
	
	ДанныеДвижений.Колонки.СуммаНДСРуб.Имя = "НДС";
	ДанныеДвижений.Колонки.СуммаБезНДСРуб.Имя = "СуммаБезНДС";

	Возврат ДанныеДвижений;
	
КонецФункции

Процедура СформироватьДвиженияВозвратТоваровКомиссионеру(ТаблицаВозвращаемыеТовары, Реквизиты, Движения, Отказ) Экспорт
	
	ДанныеДвижений = ПодготовитьДанныеДвиженийВозвратТоваровКомиссионеру(ТаблицаВозвращаемыеТовары, Реквизиты);
	СформироватьДвиженияПоступлениеЦенностей(ДанныеДвижений, Реквизиты, Движения, Отказ);
	
КонецПроцедуры

Функция ПодготовитьДанныеДвиженийВозвратТоваровКомиссионеру(ТаблицаВозвращаемыеТовары, Реквизиты)
	
	ПартионныйУчет = (УчетнаяПолитика.СпособОценкиМПЗ(Реквизиты.Организация, Реквизиты.Период) = Перечисления.СпособыОценки.ФИФО);
	
	ДанныеДвижений = ТаблицаВозвращаемыеТовары.СкопироватьКолонки(
		"Подразделение,Номенклатура,Склад,Партия,
		|СчетФактура,ВидЦенности,СчетУчетаНДС,СтавкаНДС,СпособУчетаНДС, Количество");

	
	ДанныеДвижений.Колонки.Добавить("Регистратор", 	Документы.ТипВсеСсылки());
	ДанныеДвижений.Колонки.Добавить("Период",      	Новый ОписаниеТипов("Дата"));
	ДанныеДвижений.Колонки.Добавить("ДатаСобытия", 	Новый ОписаниеТипов("Дата"));
	ДанныеДвижений.Колонки.Добавить("Организация", 	Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ДанныеДвижений.Колонки.Добавить("Поставщик", 	Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ДанныеДвижений.Колонки.Добавить("ДоговорКонтрагента", // колонка договор всегда пустая
		Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ДанныеДвижений.Колонки.Добавить("ПоставщикПредъявляетНДС", Новый ОписаниеТипов("Булево"));	
	ДанныеДвижений.Колонки.Добавить("НовыйСпособУчетаНДС", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыУчетаНДС"));
	ДанныеДвижений.Колонки.Добавить("СпособУчетаНДСИзменился",
		Новый ОписаниеТипов("Булево"));
	ДанныеДвижений.Колонки.Добавить("СчетФактураДокумент", Документы.ТипВсеСсылки());
	ДанныеДвижений.Колонки.Добавить("СчетЗатрат", 	Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ДанныеДвижений.Колонки.Добавить("Субконто1");
	ДанныеДвижений.Колонки.Добавить("Субконто2");
	ДанныеДвижений.Колонки.Добавить("Субконто3");
	ДанныеДвижений.Колонки.Добавить("НДС", 			ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ДанныеДвижений.Колонки.Добавить("СуммаБезНДС", 	ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	
	Для каждого СтрокаТаблицы Из ТаблицаВозвращаемыеТовары Цикл
		НоваяСтрока = ДанныеДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы,,"СпособУчетаНДС, СчетФактура");
		
		НоваяСтрока.СчетЗатрат 				= СтрокаТаблицы.СчетУчета;
		НоваяСтрока.Регистратор 			= Реквизиты.Регистратор;
		НоваяСтрока.Партия 					= Реквизиты.Регистратор;
		НоваяСтрока.Период 					= Реквизиты.Период;
		НоваяСтрока.ДатаСобытия 			= Реквизиты.Период;
		НоваяСтрока.Организация 			= Реквизиты.Организация;
		НоваяСтрока.Поставщик 				= Реквизиты.Контрагент;
		НоваяСтрока.ПоставщикПредъявляетНДС = Истина;
		НоваяСтрока.СпособУчетаНДСИзменился = Истина;
		НоваяСтрока.НовыйСпособУчетаНДС 	= СтрокаТаблицы.СпособУчетаНДС;
		НоваяСтрока.СчетФактураДокумент 	= СтрокаТаблицы.СчетФактура;
		НоваяСтрока.НДС 					= СтрокаТаблицы.СуммаНДСРуб;
		НоваяСтрока.СуммаБезНДС 			= СтрокаТаблицы.СуммаБезНДСРуб;
		НоваяСтрока.СчетФактура				= ?(СтрокаТаблицы.ПокупателемВыставляетсяСчетФактураНаВозврат, 
													Реквизиты.Регистратор, 
													СтрокаТаблицы.Сделка);
													
		
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетУчета);
		Для Ном = 1 По СвойстваСчета.КоличествоСубконто Цикл
			Если СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура
				ИЛИ СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства Тогда 
				НоваяСтрока["Субконто" + Ном] = СтрокаТаблицы.Номенклатура;
			ИначеЕсли СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады Тогда
				Если БухгалтерскийУчетВызовСервераПовтИсп.ВедетсяСуммовойУчетПоСкладам(СтрокаТаблицы.СчетЗатрат) Тогда
					НоваяСтрока["Субконто" + Ном] = СтрокаТаблицы.Склад;
				КонецЕсли;
			ИначеЕсли СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты Тогда
				НоваяСтрока["Субконто" + Ном] = Реквизиты.Контрагент;
			ИначеЕсли СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии Тогда 
				Если ПартионныйУчет Тогда
					НоваяСтрока["Субконто" + Ном] = СтрокаТаблицы.Партия;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если НЕ СвойстваСчета.УчетПоПодразделениям Тогда
			СтрокаТаблицы.Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеДвижений;
	
КонецФункции

#КонецОбласти

#Область ГТДИмпорт

Процедура СформироватьДвиженияУплатаНДСнаТаможне(ТаблицаТовары, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьРеквизитыУплатаНДСнаТаможне(ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Реквизиты.Организация, Реквизиты.Период);

	Если Не РаздельныйУчетНДСНаСчете19 Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьПараметрыУплатаНДСнаТаможне(Параметры, ТаблицаТовары);
	
	Если Параметры.Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Выделяем таможенные платежи по ОС
	УчетНДС.ЗаполнитьВидыЦенностей(Параметры.Товары, Неопределено, "СчетУчета");
	Для каждого СтрокаТаблицы Из Параметры.Товары Цикл
		Если СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.ОС Тогда
			СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС;
		Иначе
			СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.ТаможенныеПлатежи;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеДвижений = ПодготовитьДанныеДвиженийПоступлениеТоваровУслугОтПоставщика(Параметры.Товары, Неопределено, Реквизиты);
    СформироватьДвиженияПоступлениеЦенностей(ДанныеДвижений, Реквизиты, Движения, Отказ);
	
КонецПроцедуры

Функция ПодготовитьРеквизитыУплатаНДСнаТаможне(ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                    // <ДокументСсылка>
	+ "Период,"                         // <Дата>
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "Подразделение,"                  // <Ссылка на справочник подразделений>
	+ "Контрагент,"                     // <СправочникСсылка.Контрагенты>
	+ "ДоговорКонтрагента,"             // <СправочникСсылка.ДоговорыКонтрагентов>
	+ "СчетУчетаРасчетовСКонтрагентом," // <ПланСчетовСсылка.Хозрасчетный>
	+ "НДСПредъявленКВычету,"           // <Булево> - признак, что НДС по ГТД сразу предъявляется к вычету
	+ "ВалютаВзаиморасчетов,"           // <СправочникСсылка.Валюты>
	+ "Содержание"                      // <Строка, 150> - содержание для проводок
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	// Ограничение: НДС, уплаченный на таможне, в стоимость сейчас включить нельзя (всегда НДСВключенВСтоимость=Ложь)
	Параметры.Реквизиты.Колонки.Добавить("НДСВключенВСтоимость", Новый ОписаниеТипов("Булево"));
	// При уплате НДС на таможне всегда УчетАгентскогоНДС=Ложь
	Параметры.Реквизиты.Колонки.Добавить("УчетАгентскогоНДС", Новый ОписаниеТипов("Булево"));

	Возврат Параметры;

КонецФункции

Процедура ПодготовитьПараметрыУплатаНДСнаТаможне(Параметры, ТаблицаТовары)

	// Подготовка таблицы Товары

	СписокОбязательныхКолонок = ""
	+ "ДокументПартии,"          // <ДокументСсылка> - документ поступления товаров
	+ "Номенклатура,"            // <СправочникСсылка.Номенклатура> - поступивший ранее товар
	+ "Склад,"                   // <СправочникСсылка.Склады> - склад, на который поступил ранее товар
	+ "Содержание,"              // <Строка,150> - содержание для проводок
	+ "Подразделение,"           // Подразделение для проводок
	+ "СчетУчета,"               // <ПланСчетовСсылка.Хозрасчетный>
	+ "СчетУчетаНДС,"            // <ПланСчетовСсылка.Хозрасчетный>
	+ "СуммаБезНДСРуб,"             // <Число,15,2> - Таможенная стоимость в рублях
	+ "СуммаНДСРуб,"             // <Число,15,2> - сумма НДС в рублях
	+ "СуммаНДСВзаиморасчетов,"  // <Число,15,2> - сумма НДС в валюте расчетов с таможней
	+ "СтавкаНДС,"               // <ПеречислениеСсылка.СтавкиНДС>
	+ "СпособУчетаНДС"           // <ПеречислениеСсылка.СпособыУчетаНДС>
	;
	Параметры.Вставить("Товары", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТовары, СписокОбязательныхКолонок));
	Реквизиты = Параметры.Реквизиты[0];
	// Документом партии служит документ поступления товаров
	Параметры.Товары.Колонки.ДокументПартии.Имя = "Партия";
	// Документом-основанием счета-фактуры выступает сам документ ГТД по импорту
	Параметры.Товары.Колонки.Добавить("СчетФактура", Документы.ТипВсеСсылки());
	Параметры.Товары.ЗаполнитьЗначения(Реквизиты.Регистратор, "СчетФактура");
	// Для расходов по уплате НДС на таможне, как и для всех остальных доп.расходов,
	// количество в регистре НДСпоПриобретеннымЦенностям всегда равно нулю
	Параметры.Товары.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	// При уплате НДС на таможне в регистре НДСпоПриобретеннымЦенностям отражается только сам уплаченный НДС,
	// поэтому СуммаРуб, СуммаБезНДСРуб и СуммаВзаиморасчетов равны 0
	Параметры.Товары.Колонки.Добавить("СуммаРуб", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Параметры.Товары.Колонки.Добавить("СуммаВзаиморасчетов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	Параметры.Товары.Колонки.Добавить("СтатьяЗатрат", Новый ОписаниеТипов("СправочникСсылка.СтатьиЗатрат"));
	Параметры.Товары.Колонки.Добавить("СпособСтроительства", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыСтроительства"));
	
	Параметры.Товары.Колонки.СуммаНДСРуб.Имя = "НДС";
	Параметры.Товары.Колонки.СуммаБезНДСРуб.Имя = "СуммаБезНДС";
	
КонецПроцедуры

#КонецОбласти

#Область КомплектацияНоменклатуры

Процедура СформироватьДвиженияКомплектацияТоваров(ТаблицаТовары, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыКомплектацияТоваров(ТаблицаТовары, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты);
	Если Параметры.Реквизиты.Количество() = 0
		ИЛИ Параметры.Товары.Количество() = 0
		ИЛИ Параметры.СписанныеТоварыБухУчет.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];

	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	Если НЕ ПлательщикНДС Тогда
		Возврат;
	КонецЕсли;
	
    РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Реквизиты.Организация, Реквизиты.Период);
	
	Если НЕ РаздельныйУчетНДСНаСчете19 Тогда
		Возврат;
	КонецЕсли;
	
	СписанныеПартииНДС = ПолучитьТаблицуСписанныеПартииНДС(
		Параметры.Товары, Параметры.СписанныеТоварыБухУчет, Реквизиты, Отказ);
	СформироватьДвиженияВыбытиеТоваров(
		СписанныеПартииНДС, Параметры.СписанныеТоварыБухУчет, Реквизиты, Движения, Отказ);
		
	ТаблицаДляИзмененияСпособаУчетаНДС = ПодготовитьТаблицуДляИзмененияСпособаУчетаНДСКомплектацияТоваров(
		СписанныеПартииНДС, Реквизиты);
	СформироватьДвиженияПоступлениеЦенностей(ТаблицаДляИзмененияСпособаУчетаНДС, Реквизиты, Движения, Отказ);

КонецПроцедуры

Функция ПодготовитьПараметрыКомплектацияТоваров(ТаблицаТовары, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                   // <Дата>
	+ "Регистратор,"              // <ДокументСсылка>
	+ "Организация,"              // <СправочникСсылка.Организации>
	+ "Склад,"                    // <СправочникСсылка.Склады>
	+ "Подразделение,"            // <Ссылка на справочник подразделений>
	+ "НДСвСтоимостиТоваров,"	  // <ПеречислениеСсылка.ДействиеНДСВСтоимостиТоваров> - действие по включению/исключению НДС Из стоимости
	+ "СчетСписанияНДС,"          // <ПланСчетовСсылка.Хозрасчетный> - счет затрат, куда относится ранее принятый к вычету НДС при включении НДС в стоимость
	+ "СубконтоСписанияНДС1,"     // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "СубконтоСписанияНДС2,"     // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "СубконтоСписанияНДС3,"     // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "Комплект,"                 // <СправочникСсылка.Номенклатура>
	+ "КоличествоКомплектов,"     // <Число,15,3>
	+ "СчетУчетаКомплектов"       // <ПланСчетовСсылка.Хозрасчетный>
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	// Для списания на расходы ранее принятого к вычету НДС счет и аналитика списания товара не используются
	Параметры.Реквизиты.Колонки.Добавить("СписыватьНДСнаКорСчетИАналитикуТовара", Новый ОписаниеТипов("Булево")); // Ложь

	// Подготовка таблицы товаров документа:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "СинонимСписка,"
	+ "НомерСтрокиДокумента,"
	+ "Номенклатура,"
	+ "Количество,"
	+ "СчетУчета,"
	+ "НовыйСпособУчетаНДС"
	;
	Параметры.Вставить("Товары", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТовары, СписокОбязательныхКолонок));

	// Подготовка таблицы списанных товаров по данным бух.учета:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "СинонимСписка,"
	+ "НомерСтроки,"
	+ "СчетУчета,"
	+ "Номенклатура,"
	+ "Склад,"
	+ "Партия,"
	+ "Количество,"
	+ "КорСчетСписания,"
	+ "ВидКорСубконто1,"
	+ "ВидКорСубконто2,"
	+ "ВидКорСубконто3,"
	+ "КорСубконто1,"
	+ "КорСубконто2,"
	+ "КорСубконто3,"
	+ "КорПодразделение,"
	+ "Подразделение"
	;
	Параметры.Вставить("СписанныеТоварыБухУчет", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСписанныеТоварыБухУчет, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьТаблицуДляИзмененияСпособаУчетаНДСКомплектацияТоваров(СписанныеПартииНДС, Реквизиты)
	
	ТаблицаЦенностей = СписанныеПартииНДС.СкопироватьКолонки("
		|ВидЦенности,ДатаСобытия,ИсправленныйСчетФактура,Количество,
		|НДС,Организация,Партия,Период,Поставщик,Регистратор,СпособУчетаНДС,СтавкаНДС,ПоставщикПредъявляетНДС,
		|СуммаБезНДС,СчетУчетаНДС,СчетФактура,НовыйСпособУчетаНДС,СпособУчетаНДСИзменился,
		|СтавкаНДСДокумента,СчетЗатрат,Подразделение,Субконто1,Субконто2,Субконто3");
	
	ТаблицаЦенностей.Колонки.Добавить("ДоговорКонтрагента",
		Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
		
	Если СписанныеПартииНДС.Количество() = 0 Тогда
		Возврат ТаблицаЦенностей;
	КонецЕсли;
	
	НоваяСтрока = ТаблицаЦенностей.Добавить();
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты, "Период,Регистратор,Организация");
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СписанныеПартииНДС[0], "СчетЗатрат,Подразделение,Субконто1,Субконто2,Субконто3");
	НоваяСтрока.Партия = Реквизиты.Регистратор;
	НоваяСтрока.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ; // 19.03
	НоваяСтрока.ВидЦенности = УчетНДС.ОпределитьВидЦенности(Реквизиты.СчетУчетаКомплектов);
    НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	НоваяСтрока.СпособУчетаНДС = СписанныеПартииНДС[0].НовыйСпособУчетаНДС;
	НоваяСтрока.Количество = Реквизиты.КоличествоКомплектов;
	
	Для Каждого СтрокаТаблицы Из СписанныеПартииНДС Цикл
		
		СуммаБезНДС = СтрокаТаблицы.СуммаБезНДС - СтрокаТаблицы.СуммаБезНДСПринятоКВычету; 
		НДС = СтрокаТаблицы.НДС - СтрокаТаблицы.НДСПринятоКВычету;
		
		Если СуммаБезНДС > 0 ИЛИ НДС > 0 Тогда
		
			НоваяСтрока = ТаблицаЦенностей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, ,"Количество");
		
			НоваяСтрока.СуммаБезНДС = СуммаБезНДС;
			НоваяСтрока.НДС = НДС;
			
		КонецЕсли;
		
		Если СтрокаТаблицы.СуммаБезНДСПринятоКВычету > 0
		 ИЛИ СтрокаТаблицы.НДСПринятоКВычету > 0 Тогда
		 
			НоваяСтрока = ТаблицаЦенностей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, ,"Количество");
			
			Если СтрокаТаблицы.НовыйСпособУчетаНДС = Перечисления.СпособыУчетаНДС.УчитываетсяВCтоимости Тогда
				НоваяСтрока.НовыйСпособУчетаНДС = Перечисления.СпособыУчетаНДС.ВосстановленУчитываетсяВCтоимости;
			ИначеЕсли СтрокаТаблицы.НовыйСпособУчетаНДС = Перечисления.СпособыУчетаНДС.ДляОперацийПо0 Тогда
				НоваяСтрока.НовыйСпособУчетаНДС = Перечисления.СпособыУчетаНДС.ВосстановленДляОперацийПо0;
			КонецЕсли;
			
			НоваяСтрока.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСПринятоКВычету;
			НоваяСтрока.НДС = СтрокаТаблицы.НДСПринятоКВычету;
			
		КонецЕсли;
		
	КонецЦикла;
	
    Возврат ТаблицаЦенностей;
	
КонецФункции

Процедура СформироватьДвиженияРазукомплектацияТоваров(ТаблицаКомплектующие, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыРазукомплектацияТоваров(ТаблицаКомплектующие, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты);
	Если Параметры.Реквизиты.Количество() = 0
		ИЛИ Параметры.СписанныеТоварыБухУчет.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];

	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	Если НЕ ПлательщикНДС Тогда
		Возврат;
	КонецЕсли;
	
	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Реквизиты.Организация, Реквизиты.Период);
	Если НЕ РаздельныйУчетНДСНаСчете19 Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Комплектующие.Индексы.Добавить("СчетУчета,Номенклатура");
	Отбор = Новый Структура("Номенклатура,СчетУчета");
	ТаблицаКомплекта = Параметры.Комплектующие.СкопироватьКолонки();
	Для Каждого СтрокаТаблицы Из Параметры.СписанныеТоварыБухУчет Цикл
		НоваяСтрока = ТаблицаКомплекта.Добавить(); 
		НоваяСтрока.СчетУчета = СтрокаТаблицы.КорСчетСписания;
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(НоваяСтрока.СчетУчета);
		Для Ном = 1 По СвойстваСчета.КоличествоСубконто Цикл
			Если СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура Тогда
			 	НоваяСтрока.Номенклатура = СтрокаТаблицы["КорСубконто" + Ном];
			КонецЕсли;
		КонецЦикла;
		ЗаполнитьЗначенияСвойств(Отбор, НоваяСтрока);
		Комплектующие = Параметры.Комплектующие.НайтиСтроки(Отбор);
		НоваяСтрока.НовыйСпособУчетаНДС = Комплектующие[0].НовыйСпособУчетаНДС;
		НоваяСтрока.Количество = СтрокаТаблицы.Количество;
	КонецЦикла;
	
	ТаблицаКомплекта.ЗаполнитьЗначения(Реквизиты.Комплект, "Номенклатура");
	ТаблицаКомплекта.ЗаполнитьЗначения(Реквизиты.СчетУчетаКомплектов, "СчетУчета");
	ТаблицаКомплекта.ЗаполнитьЗначения(1, "НомерСтрокиДокумента");
	ТаблицаКомплекта.ЗаполнитьЗначения("Комплектующие", "ИмяСписка");
	
	ТаблицаКомплекта.Свернуть("
		|ИмяСписка,НомерСтрокиДокумента,Номенклатура,СчетУчета,НовыйСпособУчетаНДС",
		"Количество");

	СписанныеПартииНДС = ПолучитьТаблицуСписанныеПартииНДС(
		ТаблицаКомплекта, Параметры.КомплектующиеБухУчет, Реквизиты, Отказ);
		
	СформироватьДвиженияВыбытиеТоваров(
		СписанныеПартииНДС, Параметры.СписанныеТоварыБухУчет, Реквизиты, Движения, Отказ);
		
	ТаблицаДляИзмененияСпособаУчетаНДС = ПодготовитьТаблицуДляИзмененияСпособаУчетаНДСРазукомплектацияТоваров(
		Параметры.Комплектующие, СписанныеПартииНДС, Реквизиты);
	СформироватьДвиженияПоступлениеЦенностей(ТаблицаДляИзмененияСпособаУчетаНДС, Реквизиты, Движения, Отказ);

КонецПроцедуры

Функция ПодготовитьПараметрыРазукомплектацияТоваров(ТаблицаКомплектующие, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                   // <Дата>
	+ "Регистратор,"              // <ДокументСсылка>
	+ "Организация,"              // <СправочникСсылка.Организации>
	+ "Подразделение,"            // <Ссылка на справочник подразделений>
	+ "Склад,"                    // <СправочникСсылка.Склады>
	+ "НДСвСтоимостиТоваров,"	  // <ПеречислениеСсылка.ДействиеНДСВСтоимостиТоваров> - действие по включению/исключению НДС Из стоимости
	+ "СчетСписанияНДС,"          // <ПланСчетовСсылка.Хозрасчетный> - счет затрат, куда относится ранее принятый к вычету НДС при включении НДС в стоимость
	+ "СубконтоСписанияНДС1,"     // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "СубконтоСписанияНДС2,"     // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "СубконтоСписанияНДС3,"     // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "Комплект,"                 // <СправочникСсылка.Номенклатура>
	+ "КоличествоКомплектов,"     // <Число,15,3>
	+ "СчетУчетаКомплектов"       // <ПланСчетовСсылка.Хозрасчетный>
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	// Для списания на расходы ранее принятого к вычету НДС счет и аналитика списания товара не используются
	Параметры.Реквизиты.Колонки.Добавить("СписыватьНДСнаКорСчетИАналитикуТовара", Новый ОписаниеТипов("Булево")); // Ложь

	// Подготовка таблицы комплектующих:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "СинонимСписка,"
	+ "НомерСтрокиДокумента,"
	+ "Номенклатура,"
	+ "Количество,"
	+ "ДоляСтоимости,"
	+ "СчетУчета,"
	+ "НовыйСпособУчетаНДС"
	;
	Параметры.Вставить("Комплектующие", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаКомплектующие, СписокОбязательныхКолонок));

	// Подготовка таблицы списанных товаров по данным бух.учета:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "СинонимСписка,"
	+ "НомерСтроки,"
	+ "СчетУчета,"
	+ "Номенклатура,"
	+ "Склад,"
	+ "Партия,"
	+ "Количество,"
	+ "КорСчетСписания,"
	+ "ВидКорСубконто1,"
	+ "ВидКорСубконто2,"
	+ "ВидКорСубконто3,"
	+ "КорСубконто1,"
	+ "КорСубконто2,"
	+ "КорСубконто3,"
	+ "КорПодразделение,"
	+ "Подразделение"
	;
	Параметры.Вставить("СписанныеТоварыБухУчет", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСписанныеТоварыБухУчет, СписокОбязательныхКолонок));
			
	КомплектующиеБухУчет = Параметры.СписанныеТоварыБухУчет;
	КомплектующиеБухУчет.ЗаполнитьЗначения(1, "НомерСтроки");
	
	Параметры.Вставить("КомплектующиеБухУчет", КомплектующиеБухУчет);

	Возврат Параметры;

КонецФункции

Функция ПодготовитьТаблицуДляИзмененияСпособаУчетаНДСРазукомплектацияТоваров(Комплектующие, СписанныеПартииНДС, Реквизиты)
	
	ТаблицаЦенностей = СписанныеПартииНДС.СкопироватьКолонки("
		|ВидЦенности,ДатаСобытия,ИсправленныйСчетФактура,Количество,
		|НДС,Организация,Партия,Период,Поставщик,Регистратор,СпособУчетаНДС,СтавкаНДС,ПоставщикПредъявляетНДС,
		|СуммаБезНДС,СчетУчетаНДС,СчетФактура,НовыйСпособУчетаНДС,СпособУчетаНДСИзменился,
		|СтавкаНДСДокумента,СчетЗатрат,Подразделение,Субконто1,Субконто2,Субконто3");
	
	ТаблицаЦенностей.Колонки.Добавить("ДоговорКонтрагента",
		Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
		
	Если СписанныеПартииНДС.Количество() = 0 Тогда
		Возврат ТаблицаЦенностей;
	КонецЕсли;
	
	// Добавим в таблицу комплектующие (только количество) со ставкой "Без НДС" и без счета-фактуры
	
	ТаблицаЦенностей.Колонки.Добавить("ДоляСтоимости",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,0)));
	
	СпособОценкиМПЗПоСредней = (УчетнаяПолитика.СпособОценкиМПЗ(Реквизиты.Организация, Реквизиты.Период)
		= Перечисления.СпособыОценки.ПоСредней);
	
	Для каждого СтрокаТаблицы Из Комплектующие Цикл
		
		НоваяСтрока = ТаблицаЦенностей.Добавить();
		
		НоваяСтрока.СчетЗатрат = СтрокаТаблицы.СчетУчета; 
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(НоваяСтрока.СчетЗатрат);
		
		Если СвойстваСчета.УчетПоПодразделениям Тогда
			НоваяСтрока.Подразделение = Реквизиты.Подразделение;
		КонецЕсли;
		
		Для Ном = 1 По СвойстваСчета.КоличествоСубконто Цикл
			Если СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура Тогда
			 	НоваяСтрока["Субконто" + Ном] = СтрокаТаблицы.Номенклатура;
			ИначеЕсли СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады Тогда
				Если БухгалтерскийУчетВызовСервераПовтИсп.ВедетсяСуммовойУчетПоСкладам(НоваяСтрока.СчетЗатрат) Тогда
					НоваяСтрока["Субконто" + Ном] = Реквизиты.Склад;
				КонецЕсли;
	        ИначеЕсли СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии Тогда
				Если НЕ СпособОценкиМПЗПоСредней Тогда
					НоваяСтрока["Субконто" + Ном] = Реквизиты.Регистратор;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, "Количество,ДоляСтоимости,НовыйСпособУчетаНДС");
		НоваяСтрока.СпособУчетаНДС = СтрокаТаблицы.НовыйСпособУчетаНДС;
		
	КонецЦикла;
	
	ТаблицаЦенностей.ЗаполнитьЗначения(Реквизиты.Период,      "Период,ДатаСобытия");
	ТаблицаЦенностей.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");
	ТаблицаЦенностей.ЗаполнитьЗначения(Реквизиты.Регистратор, "Партия,Регистратор");
	ТаблицаЦенностей.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ, "СчетУчетаНДС"); // 19.03
	ТаблицаЦенностей.ЗаполнитьЗначения(Перечисления.СтавкиНДС.БезНДС, "СтавкаНДС");
	УчетНДС.ЗаполнитьВидыЦенностей(ТаблицаЦенностей, Неопределено, "СчетЗатрат");

	СписанныеПартииНДС.Свернуть("
	|Партия,Поставщик,ИсправленныйСчетФактура,
	|ВидЦенности,СчетФактура,СчетУчетаНДС,СтавкаНДС,
	|СпособУчетаНДС,НовыйСпособУчетаНДС,ПоставщикПредъявляетНДС",
	"СуммаБезНДС,НДС,СуммаБезНДСПринятоКВычету,НДСПринятоКВычету");
	
	// Распределяем стоимость и НДС каждой списанной партии комплекта между всеми комплектующими
	// пропорционально указанной в документе разукомплектации доле стоимости комплектующей

	// Количество не заполняется, движения отражаются аналогично доп.расходам
	ТаблицаЦенностейСуммы = ТаблицаЦенностей.Скопировать();
	ТаблицаЦенностейСуммы.ЗаполнитьЗначения(0, "Количество");

	Для каждого СтрокаТаблицы Из СписанныеПартииНДС Цикл

		СуммаБезНДС = СтрокаТаблицы.СуммаБезНДС - СтрокаТаблицы.СуммаБезНДСПринятоКВычету; 
		НДС = СтрокаТаблицы.НДС - СтрокаТаблицы.НДСПринятоКВычету;
		
		Если СуммаБезНДС > 0 ИЛИ НДС > 0 Тогда
		
			ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
				СуммаБезНДС, ТаблицаЦенностейСуммы, "СуммаБезНДС", "ДоляСтоимости");
			ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
				НДС, ТаблицаЦенностейСуммы, "НДС", "ДоляСтоимости");
				
			ТаблицаЦенностейСуммы.ЗаполнитьЗначения(СтрокаТаблицы.ВидЦенности, "ВидЦенности");
			ТаблицаЦенностейСуммы.ЗаполнитьЗначения(СтрокаТаблицы.СчетФактура, "СчетФактура");
			ТаблицаЦенностейСуммы.ЗаполнитьЗначения(СтрокаТаблицы.СчетУчетаНДС, "СчетУчетаНДС");
			ТаблицаЦенностейСуммы.ЗаполнитьЗначения(СтрокаТаблицы.СтавкаНДС, "СтавкаНДС");
			ТаблицаЦенностейСуммы.ЗаполнитьЗначения(СтрокаТаблицы.Поставщик, "Поставщик");
			ТаблицаЦенностейСуммы.ЗаполнитьЗначения(СтрокаТаблицы.Партия, "Партия");
			ТаблицаЦенностейСуммы.ЗаполнитьЗначения(СтрокаТаблицы.ИсправленныйСчетФактура, "ИсправленныйСчетФактура");
			ТаблицаЦенностейСуммы.ЗаполнитьЗначения(СтрокаТаблицы.СпособУчетаНДС, "СпособУчетаНДС");			
			ТаблицаЦенностейСуммы.ЗаполнитьЗначения(СтрокаТаблицы.НовыйСпособУчетаНДС, "НовыйСпособУчетаНДС");
			ТаблицаЦенностейСуммы.ЗаполнитьЗначения(СтрокаТаблицы.ПоставщикПредъявляетНДС, "ПоставщикПредъявляетНДС");
			
			Для каждого СтрокаТаблицыСумм Из ТаблицаЦенностейСуммы Цикл
				НоваяСтрока = ТаблицаЦенностей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыСумм);
			КонецЦикла;
			
		КонецЕсли;
		
		Если СтрокаТаблицы.СуммаБезНДСПринятоКВычету > 0
		 ИЛИ СтрокаТаблицы.НДСПринятоКВычету > 0 Тогда
		 
			ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
				СтрокаТаблицы.СуммаБезНДСПринятоКВычету, ТаблицаЦенностейСуммы, "СуммаБезНДС", "ДоляСтоимости");
			ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
				СтрокаТаблицы.НДСПринятоКВычету, ТаблицаЦенностейСуммы, "НДС", "ДоляСтоимости");
		 
			ТаблицаЦенностейСуммы.ЗаполнитьЗначения(СтрокаТаблицы.ВидЦенности, "ВидЦенности");
			ТаблицаЦенностейСуммы.ЗаполнитьЗначения(СтрокаТаблицы.СчетФактура, "СчетФактура");
			ТаблицаЦенностейСуммы.ЗаполнитьЗначения(СтрокаТаблицы.СчетУчетаНДС, "СчетУчетаНДС");
			ТаблицаЦенностейСуммы.ЗаполнитьЗначения(СтрокаТаблицы.СтавкаНДС, "СтавкаНДС");
			ТаблицаЦенностейСуммы.ЗаполнитьЗначения(СтрокаТаблицы.Поставщик, "Поставщик");
			ТаблицаЦенностейСуммы.ЗаполнитьЗначения(СтрокаТаблицы.Партия, "Партия");
			ТаблицаЦенностейСуммы.ЗаполнитьЗначения(СтрокаТаблицы.ИсправленныйСчетФактура, "ИсправленныйСчетФактура");
			ТаблицаЦенностейСуммы.ЗаполнитьЗначения(СтрокаТаблицы.СпособУчетаНДС, "СпособУчетаНДС");
			ТаблицаЦенностейСуммы.ЗаполнитьЗначения(СтрокаТаблицы.ПоставщикПредъявляетНДС, "ПоставщикПредъявляетНДС");
			
			Если СтрокаТаблицы.НовыйСпособУчетаНДС = Перечисления.СпособыУчетаНДС.УчитываетсяВCтоимости Тогда
				ТаблицаЦенностейСуммы.ЗаполнитьЗначения(
					Перечисления.СпособыУчетаНДС.ВосстановленУчитываетсяВCтоимости, "НовыйСпособУчетаНДС");
			ИначеЕсли СтрокаТаблицы.НовыйСпособУчетаНДС = Перечисления.СпособыУчетаНДС.ДляОперацийПо0 Тогда
				ТаблицаЦенностейСуммы.ЗаполнитьЗначения(
					Перечисления.СпособыУчетаНДС.ВосстановленДляОперацийПо0, "НовыйСпособУчетаНДС");
			КонецЕсли;
			
			Для каждого СтрокаТаблицыСумм Из ТаблицаЦенностейСуммы Цикл
				НоваяСтрока = ТаблицаЦенностей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыСумм);
			КонецЦикла;
			
		КонецЕсли;

	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из ТаблицаЦенностей Цикл
		ЗаполнитьСпособУчетаНДСИзменился(СтрокаТаблицы);	
	КонецЦикла;

	Возврат ТаблицаЦенностей;
	
КонецФункции

#КонецОбласти

#Область КорректировкаПоступления

Процедура ОпределитьСуммыДляРаспределенияНДСКорректировкаПоступления(ТаблицаПоЦенностям, Реквизиты, Отказ) Экспорт
	
	ТаблицаПоЦенностям.Колонки.Добавить("НДСПринимаетсяКВычету",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаПоЦенностям.Колонки.Добавить("НДСУчитываетсяВCтоимости",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаПоЦенностям.Колонки.Добавить("НДСДляОперацийПо0",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаПоЦенностям.Колонки.Добавить("НДСВалПринимаетсяКВычету",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаПоЦенностям.Колонки.Добавить("НДСВалУчитываетсяВCтоимости",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаПоЦенностям.Колонки.Добавить("НДСВалДляОперацийПо0",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаПоЦенностям.Колонки.Добавить("СубконтоСФПолученные",
		Документы.ТипВсеСсылки());
	ТаблицаПоЦенностям.Колонки.Добавить("НовыйСпособУчетаНДС",
		Новый ОписаниеТипов("ПеречислениеСсылка.СпособыУчетаНДС"));
		
	ТаблицаПоЦенностям.ЗагрузитьКолонку(ТаблицаПоЦенностям.ВыгрузитьКолонку("СпособУчетаНДС"), "НовыйСпособУчетаНДС");
		
	ПериодПоступления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.ДокументПоступленияСсылка, "Дата");
		
	Если НачалоКвартала(ПериодПоступления) = НачалоКвартала(Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
		
	ТаблицаПоЦенностям.Индексы.Добавить("СпособУчетаНДС");
	
	Отбор = Новый Структура("СпособУчетаНДС", Перечисления.СпособыУчетаНДС.Распределяется);
	СтрокиКРаспределению = ТаблицаПоЦенностям.НайтиСтроки(Отбор);
	
	Если СтрокиКРаспределению.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.БазаРаспределенияНДС.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период = НачалоКвартала(ПериодПоступления);
	МенеджерЗаписи.Организация = Реквизиты.Организация;
	МенеджерЗаписи.Прочитать();
		
	Если МенеджерЗаписи.Выбран() Тогда
		
		Пропорция = МенеджерЗаписи;
		БазаРаспределения = Пропорция.ВыручкаНДС + Пропорция.ВыручкаБезНДС + Пропорция.ВыручкаЕНВД + Пропорция.ВыручкаНДС0;
		
		Для Каждого СтрокаТаблицы Из СтрокиКРаспределению Цикл
			
			СтрокаТаблицы.НовыйСпособУчетаНДС = Перечисления.СпособыУчетаНДС.Распределен;
			
			УчтеноНДСВал  = 0;
			УчтеноНДС     = 0;
			УчтеноВыручки = 0;
			
			НДС    = СтрокаТаблицы.СуммаНДСРуб - СтрокаТаблицы.СуммаНДСРубДоИзменения;
			НДСВал = СтрокаТаблицы.СуммаНДСВзаиморасчетов - СтрокаТаблицы.СуммаНДСВзаиморасчетовДоИзменения;
			
			Если Пропорция.ВыручкаНДС <> 0 Тогда

				СтрокаТаблицы.НДСВалПринимаетсяКВычету = Окр(НДСВал
					* (Пропорция.ВыручкаНДС + УчтеноВыручки)/БазаРаспределения, 2) - УчтеноНДСВал;
				СтрокаТаблицы.НДСПринимаетсяКВычету = Окр(НДС
					* (Пропорция.ВыручкаНДС + УчтеноВыручки)/БазаРаспределения, 2) - УчтеноНДС;

				УчтеноНДСВал    = УчтеноНДСВал + СтрокаТаблицы.НДСВалПринимаетсяКВычету;
				УчтеноНДС       = УчтеноНДС + СтрокаТаблицы.НДСПринимаетсяКВычету;
				УчтеноВыручки   = УчтеноВыручки + Пропорция.ВыручкаНДС;

			КонецЕсли;

			Если Пропорция.ВыручкаБезНДС + Пропорция.ВыручкаЕНВД <> 0 Тогда

				СтрокаТаблицы.НДСВалУчитываетсяВCтоимости = Окр(НДСВал
					* (Пропорция.ВыручкаБезНДС + Пропорция.ВыручкаЕНВД  + УчтеноВыручки)/БазаРаспределения, 2) - УчтеноНДСВал;
				СтрокаТаблицы.НДСУчитываетсяВCтоимости = Окр(НДС
					* (Пропорция.ВыручкаБезНДС + Пропорция.ВыручкаЕНВД + УчтеноВыручки)/БазаРаспределения, 2) - УчтеноНДС;

				УчтеноСуммы   = УчтеноНДСВал + СтрокаТаблицы.НДСВалУчитываетсяВCтоимости;
				УчтеноНДС     = УчтеноНДС + СтрокаТаблицы.НДСУчитываетсяВCтоимости;
				УчтеноВыручки = УчтеноВыручки + Пропорция.ВыручкаБезНДС + Пропорция.ВыручкаЕНВД;

			КонецЕсли;

			Если Пропорция.ВыручкаНДС0 <> 0 Тогда

				СтрокаТаблицы.НДСВалДляОперацийПо0 = Окр(НДСВал
					* (Пропорция.ВыручкаНДС0 + УчтеноВыручки)/БазаРаспределения, 2) - УчтеноНДСВал;
				СтрокаТаблицы.НДСДляОперацийПо0 = Окр(НДС
					* (Пропорция.ВыручкаНДС0 + УчтеноВыручки)/БазаРаспределения, 2) - УчтеноНДС;

				УчтеноНДСВал  = УчтеноНДСВал + СтрокаТаблицы.НДСВалДляОперацийПо0;
				УчтеноНДС     = УчтеноНДС + СтрокаТаблицы.НДСДляОперацийПо0;
				УчтеноВыручки = УчтеноВыручки + Пропорция.ВыручкаНДС0;

			КонецЕсли;
		
		 КонецЦикла;
		
	Иначе
		
		Если НЕ Отказ Тогда
		
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не обнаружена база распределения НДС за %1'"),
				Формат(ПериодПоступления, "ДФ='к ''Квартал'' гггг  ''г.'''"));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,, Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияНДСПредъявленныйРеализация0КорректировкаПоступления(ДанныеДвижений, Реквизиты, Движения, Отказ) Экспорт
	
	Если ДанныеДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ДанныеДвижений.Индексы.Добавить("Сторно");
	ДанныеДвиженийПриход = ДанныеДвижений.Скопировать(Новый Структура("Сторно", Ложь));
	
	ДанныеДвиженийСторно = ДанныеДвижений.НайтиСтроки(Новый Структура("Сторно", Истина));
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("МоментВремени", Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор));
	Запрос.УстановитьПараметр("СчетФактура", Реквизиты.ДокументОснование);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НДСПредъявленныйРеализация0Остатки.Организация,
	|	НДСПредъявленныйРеализация0Остатки.СчетФактура,
	|	НДСПредъявленныйРеализация0Остатки.Состояние,
	|	НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки,
	|	НДСПредъявленныйРеализация0Остатки.ВидЦенности,
	|	НДСПредъявленныйРеализация0Остатки.СтавкаНДС,
	|	НДСПредъявленныйРеализация0Остатки.СчетУчетаНДС,
	|	НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	НДСПредъявленныйРеализация0Остатки.НДСОстаток КАК НДС
	|ИЗ
	|	РегистрНакопления.НДСПредъявленныйРеализация0.Остатки(&МоментВремени, СчетФактура = &СчетФактура) КАК НДСПредъявленныйРеализация0Остатки
	|ГДЕ
	|	НДСПредъявленныйРеализация0Остатки.НДСОстаток + НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток > 0";
	ОстаткиПоСФ = Запрос.Выполнить().Выгрузить();
	
	Отбор = Новый Структура("ВидЦенности,СтавкаНДС,СчетУчетаНДС");
	
	Для каждого СтрокаТаблицы Из ДанныеДвиженийСторно Цикл
		
		СуммаБезНДС = -СтрокаТаблицы.СуммаБезНДС;
		НДС = -СтрокаТаблицы.НДС;
		
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТаблицы);
		НайденныеСтроки = ОстаткиПоСФ.НайтиСтроки(Отбор);
		
		Для каждого СтрокаОстатков Из НайденныеСтроки Цикл
			
			СуммаБезНДСКУменьшению = Мин(СуммаБезНДС, СтрокаОстатков.СуммаБезНДС);
			НДСКУменьшению = Мин(НДС, СтрокаОстатков.НДС);
			
			Если СуммаБезНДСКУменьшению > 0 И НДСКУменьшению > 0 Тогда
				
				НоваяСтрока = ДанныеДвиженийПриход.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы,,"Состояние,ДокументОтгрузки,СуммаБезНДС,НДС");
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОстатков, "Состояние,ДокументОтгрузки");
				
				НоваяСтрока.СуммаБезНДС = -СуммаБезНДСКУменьшению;
				НоваяСтрока.НДС = -НДСКУменьшению;
				
				СуммаБезНДС = СуммаБезНДС - СуммаБезНДСКУменьшению;
				НДС = НДС - НДСКУменьшению;
				
			Иначе
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
						
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из ДанныеДвиженийПриход Цикл

		Запись = Движения.НДСПредъявленныйРеализация0.ДобавитьПриход();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
	
	КонецЦикла;

	Движения.НДСПредъявленныйРеализация0.Записывать = Истина;
	
КонецПроцедуры


Процедура СформироватьДвиженияНДСКорректировкиПоступлениеТоваровУслуг(РеквизитыДокумента, СтруктураТаблицДокумента, Движения, Отказ) Экспорт
	
	Параметры = ПолучитьРеквизитыКорректировкиПоступленияПоНДС(РеквизитыДокумента);
	Если Параметры.Реквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Если НЕ Реквизиты.РаздельныйУчетНДСНаСчете19 Тогда
		Возврат;
	КонецЕсли;
	
	// Исправительный счет-фактура	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки Тогда
		
		// Сторно движений исправляемого документа
		СформироватьДвиженияЗаписьКнигиПокупок(Реквизиты, СтруктураТаблицДокумента.КнигаПокупок, Движения, Отказ);
		СформироватьДвиженияНДСПредъявленный(СтруктураТаблицДокумента.НДСПредъявленный, Движения, Отказ, Истина);
		
		СформироватьИсправительныеДвиженияКорректировкаПоступления(Реквизиты, СтруктураТаблицДокумента, Движения, Отказ);
		
	Иначе // Корректировочный счет-фактура
		
		СформироватьКорректировочныеДвиженияКорректировкаПоступления(Реквизиты, СтруктураТаблицДокумента, Движения, Отказ);
		
	КонецЕсли;
		
КонецПроцедуры

Функция ПолучитьРеквизитыКорректировкиПоступленияПоНДС(РеквизитыДокумента)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "ВидОперации,"
	+ "Регистратор,"
	+ "Период,"
	+ "Организация,"
	+ "ИсправляемыйСчетФактура,"
	+ "КорректироватьБУиНУ,"
	+ "ДокументПоступленияСсылка,"
	+ "ВосстановитьНДС,"
	+ "Склад,"
	+ "РаздельныйУчетНДС,"
	+ "РаздельныйУчетНДСНаСчете19,"
	+ "КурсДокумента,"
	+ "КратностьДокумента,"
	+ "ДокументОснование,"
	+ "НДСВключенВСтоимость,"
	+ "ДоговорКонтрагента,"
	+ "Контрагент"
	;
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(РеквизитыДокумента, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

Процедура СформироватьИсправительныеДвиженияКорректировкаПоступления(Реквизиты, СтруктураТаблицДокумента, Движения, Отказ)
					
	Если ТипЗнч(Реквизиты.ИсправляемыйСчетФактура) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		
		// Сторно движений исправляемого документа
		СформироватьДвиженияНДСЗаписиКнигиПродажКорректировкаПоступления(Реквизиты, СтруктураТаблицДокумента.КнигаПродаж, Истина, Движения, Отказ);
		// Новые движения по исправленному корректировочному счету-фактуре
		СформироватьКорректировочныеДвиженияКорректировкаПоступления(Реквизиты, СтруктураТаблицДокумента, Движения, Отказ);
		
	Иначе
		
		ПоставщикПредъявляетНДС = Истина;
		РеквизитПредъявляетНДС	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.ДоговорКонтрагента, "ПредъявляетНДС");
		Если РеквизитПредъявляетНДС <> Неопределено Тогда 
			ПоставщикПредъявляетНДС = РеквизитПредъявляетНДС;
		КонецЕсли;
		
		// Движения по регистру "НДС предъявленный" приход предъявленного НДС
		Если СтруктураТаблицДокумента.ВычетНДСНаОснованииДокумента <> Неопределено 
			И (СтруктураТаблицДокумента.ВычетНДСНаОснованииДокумента.Итог("НДС") <> 0 ИЛИ ПоставщикПредъявляетНДС) Тогда
			СформироватьДвиженияНДСПредъявленныйКорректировкаПоступления(
				СтруктураТаблицДокумента.ВычетНДСНаОснованииДокумента, Реквизиты, Движения, Отказ);
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

Процедура СформироватьКорректировочныеДвиженияКорректировкаПоступления(Реквизиты, СтруктураТаблицДокумента, Движения, Отказ)

	Если СтруктураТаблицДокумента.ТаблицаВосстановление <> Неопределено Тогда
		
		ТаблицаУменьшениеВычета = СтруктураТаблицДокумента.ТаблицаВосстановление;
		
		ПодготовитьТаблицуПоЦенностям(ТаблицаУменьшениеВычета, Реквизиты, Отказ);
		
		ТаблицаУменьшениеВычета.Колонки.Добавить("СуммаБезНДСПринятоКВычету",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
		ТаблицаУменьшениеВычета.Колонки.Добавить("НДСПринятоКВычету",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("МоментВремени", Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор));
		Запрос.УстановитьПараметр("СчетФактура", Реквизиты.ДокументОснование);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСПредъявленныйОстатки.Организация,
		|	НДСПредъявленныйОстатки.СчетФактура КАК СчетФактура,
		|	НДСПредъявленныйОстатки.ВидЦенности,
		|	НДСПредъявленныйОстатки.СтавкаНДС,
		|	НДСПредъявленныйОстатки.СчетУчетаНДС,
		|	НДСПредъявленныйОстатки.Поставщик,
		|	НДСПредъявленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
		|	НДСПредъявленныйОстатки.НДСОстаток КАК НДС,
		|	НДСПредъявленныйОстатки.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура
		|ИЗ
		|	РегистрНакопления.НДСПредъявленный.Остатки(&МоментВремени, СчетФактура = &СчетФактура) КАК НДСПредъявленныйОстатки
		|ГДЕ
		|	НДСПредъявленныйОстатки.НДСОстаток + НДСПредъявленныйОстатки.СуммаБезНДСОстаток > 0";
		
		ОстаткиПоСФ = Запрос.Выполнить().Выгрузить();
		
		Отбор = Новый Структура("ВидЦенности,СтавкаНДС,СчетУчетаНДС");

		Для каждого СтрокаТаблицы Из ТаблицаУменьшениеВычета Цикл
			
			Если СтрокаТаблицы.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету Тогда
				СуммаБезНДСПринятоКВычету	= СтрокаТаблицы.СуммаБезНДС;
				НДСПринятоКВычету			= СтрокаТаблицы.НДС;
			ИначеЕсли СтрокаТаблицы.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.Распределяется Тогда
				Если СтрокаТаблицы.СуммаБезНДСПринимаетсяКВычету <> 0
				 ИЛИ СтрокаТаблицы.НДСПринимаетсяКВычету <> 0 Тогда
					СуммаБезНДСПринятоКВычету	= СтрокаТаблицы.СуммаБезНДСПринимаетсяКВычету;
					НДСПринятоКВычету			= СтрокаТаблицы.НДСПринимаетсяКВычету;
				Иначе
					Продолжить;
				КонецЕсли;
			Иначе
				Продолжить;
			КонецЕсли;	
			
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаТаблицы);
			НайденныеСтроки = ОстаткиПоСФ.НайтиСтроки(Отбор);
			
			Для каждого СтрокаОстатков Из НайденныеСтроки Цикл
				
				СуммаБезНДСПринятоКВычету = СуммаБезНДСПринятоКВычету - СтрокаОстатков.СуммаБезНДС;
				НДСПринятоКВычету = НДСПринятоКВычету - СтрокаОстатков.НДС;
				
				СтрокаОстатков.СуммаБезНДС = ?(СуммаБезНДСПринятоКВычету < 0, -СуммаБезНДСПринятоКВычету, 0);
				СтрокаОстатков.НДС = ?(НДСПринятоКВычету < 0, -НДСПринятоКВычету, 0);
				
			КонецЦикла;
				
			СтрокаТаблицы.СуммаБезНДСПринятоКВычету = Макс(СуммаБезНДСПринятоКВычету, 0);
			СтрокаТаблицы.НДСПринятоКВычету = Макс(НДСПринятоКВычету, 0);

		КонецЦикла;
		
		ТаблицаНДСПредъявленный = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("НДСПредъявленный");
		ТаблицаНДСЗаписиКнигиПродаж = СтруктураТаблицДокумента.ТаблицаВосстановление.СкопироватьКолонки();
		
		ПоставщикПредъявляетНДС = Истина;
		РеквизитПредъявляетНДС	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.ДоговорКонтрагента, "ПредъявляетНДС");
		Если РеквизитПредъявляетНДС <> Неопределено Тогда 
			ПоставщикПредъявляетНДС = РеквизитПредъявляетНДС;
		КонецЕсли;
		
		Для каждого СтрокаТаблицы Из ТаблицаУменьшениеВычета Цикл
			
			Если СтрокаТаблицы.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.УчитываетсяВCтоимости
			 ИЛИ СтрокаТаблицы.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ДляОперацийПо0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаТаблицы.НДСПринятоКВычету > 0
			 ИЛИ СтрокаТаблицы.СуммаБезНДСПринятоКВычету > 0 Тогда 
			 
			 	НоваяСтрока = ТаблицаНДСЗаписиКнигиПродаж.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				НоваяСтрока.СчетФактура = ?(Реквизиты.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки,
					Реквизиты.ДокументПоступленияСсылка, Реквизиты.Регистратор);
				НоваяСтрока.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСПринятоКВычету;
				НоваяСтрока.НДС = СтрокаТаблицы.НДСПринятоКВычету;
				
			КонецЕсли;
			
			Если СтрокаТаблицы.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету Тогда
				НДС = СтрокаТаблицы.НДС - СтрокаТаблицы.НДСПринятоКВычету;
				СуммаБезНДС = СтрокаТаблицы.СуммаБезНДС - СтрокаТаблицы.СуммаБезНДСПринятоКВычету;
			Иначе
				НДС = СтрокаТаблицы.НДСПринимаетсяКВычету - СтрокаТаблицы.НДСПринятоКВычету;
				СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСПринимаетсяКВычету - СтрокаТаблицы.СуммаБезНДСПринятоКВычету;
			КонецЕсли;	
			
			Если НДС > 0 
			 ИЛИ (СуммаБезНДС > 0 И ПоставщикПредъявляетНДС) Тогда
			 
			 	НоваяСтрока = ТаблицаНДСПредъявленный.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, ,"Событие,СуммаБезНДС,НДС");
				НоваяСтрока.Событие = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком;
				НоваяСтрока.Поставщик = СтрокаТаблицы.Покупатель;
				НоваяСтрока.СуммаБезНДС = -СуммаБезНДС;
				НоваяСтрока.НДС = -НДС;
				
			КонецЕсли;
			
		КонецЦикла;
		
		СформироватьДвиженияНДСПредъявленный(ТаблицаНДСПредъявленный, Движения, Отказ);	
		СформироватьДвиженияНДСЗаписиКнигиПродажКорректировкаПоступления(Реквизиты, ТаблицаНДСЗаписиКнигиПродаж, Ложь, Движения, Отказ);
		
	КонецЕсли;

	// Движения по регистру "НДС предъявленный" приход предъявленного НДС
	Если СтруктураТаблицДокумента.ТаблицаВычет <> Неопределено
		И (СтруктураТаблицДокумента.ТаблицаВычет.Итог("НДС") <> 0 ИЛИ ПоставщикПредъявляетНДС) Тогда
		СформироватьДвиженияНДСПредъявленныйКорректировкаПоступления(СтруктураТаблицДокумента.ТаблицаВычет, Реквизиты, Движения, Отказ);
	КонецЕсли;
	
КонецПроцедуры	

Процедура ПодготовитьТаблицуПоЦенностям(ТаблицаПоЦенностям, Реквизиты, Отказ)
	
	ТаблицаПоЦенностям.Колонки.Добавить("НДСПринимаетсяКВычету",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаПоЦенностям.Колонки.Добавить("НДСУчитываетсяВCтоимости",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаПоЦенностям.Колонки.Добавить("НДСДляОперацийПо0",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаПоЦенностям.Колонки.Добавить("СуммаБезНДСПринимаетсяКВычету",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаПоЦенностям.Колонки.Добавить("СуммаБезНДСУчитываетсяВCтоимости",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаПоЦенностям.Колонки.Добавить("СуммаБезНДСДляОперацийПо0",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	ПериодПоступления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.ДокументПоступленияСсылка, "Дата");
	
	Если НачалоКвартала(ПериодПоступления) < НачалоКвартала(Реквизиты.Период) Тогда
		
		ТаблицаПоЦенностям.Индексы.Добавить("СпособУчетаНДС");
		ОтборРаспределяется = Новый Структура("СпособУчетаНДС", Перечисления.СпособыУчетаНДС.Распределяется);
		СтрокиКРаспределению = ТаблицаПоЦенностям.НайтиСтроки(ОтборРаспределяется);
		
		Если СтрокиКРаспределению.Количество() > 0 Тогда

			МенеджерЗаписи = РегистрыСведений.БазаРаспределенияНДС.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Период = НачалоКвартала(ПериодПоступления);
			МенеджерЗаписи.Организация = Реквизиты.Организация;
			МенеджерЗаписи.Прочитать();
				
			Если МенеджерЗаписи.Выбран() Тогда
				
				БазаРаспределения = МенеджерЗаписи.ВыручкаНДС + МенеджерЗаписи.ВыручкаБезНДС 
									+ МенеджерЗаписи.ВыручкаЕНВД + МенеджерЗаписи.ВыручкаНДС0;
				
				Для Каждого СтрокаТаблицы Из СтрокиКРаспределению Цикл
					
					УчтеноСуммаБезНДС = 0;
					УчтеноНДС     	  = 0;
					УчтеноВыручки	  = 0;
					
					Если МенеджерЗаписи.ВыручкаНДС <> 0 Тогда

						СтрокаТаблицы.СуммаБезНДСПринимаетсяКВычету = Окр(СтрокаТаблицы.СуммаБезНДС
							* (МенеджерЗаписи.ВыручкаНДС + УчтеноВыручки)/БазаРаспределения, 2) - УчтеноСуммаБезНДС;
						СтрокаТаблицы.НДСПринимаетсяКВычету = Окр(СтрокаТаблицы.НДС
							* (МенеджерЗаписи.ВыручкаНДС + УчтеноВыручки)/БазаРаспределения, 2) - УчтеноНДС;

						УчтеноСуммаБезНДС = УчтеноСуммаБезНДС + СтрокаТаблицы.СуммаБезНДСПринимаетсяКВычету;
						УчтеноНДС         = УчтеноНДС + СтрокаТаблицы.НДСПринимаетсяКВычету;
						УчтеноВыручки     = УчтеноВыручки + МенеджерЗаписи.ВыручкаНДС;
						
					КонецЕсли;

					Если МенеджерЗаписи.ВыручкаБезНДС + МенеджерЗаписи.ВыручкаЕНВД <> 0 Тогда

						СтрокаТаблицы.СуммаБезНДСУчитываетсяВCтоимости = Окр(СтрокаТаблицы.СуммаБезНДС
							* (МенеджерЗаписи.ВыручкаБезНДС + МенеджерЗаписи.ВыручкаЕНВД  + УчтеноВыручки)/БазаРаспределения, 2) - УчтеноСуммаБезНДС;
						СтрокаТаблицы.НДСУчитываетсяВCтоимости = Окр(СтрокаТаблицы.НДС
							* (МенеджерЗаписи.ВыручкаБезНДС + МенеджерЗаписи.ВыручкаЕНВД + УчтеноВыручки)/БазаРаспределения, 2) - УчтеноНДС;

						УчтеноСуммаБезНДС = УчтеноСуммаБезНДС + СтрокаТаблицы.СуммаБезНДСУчитываетсяВCтоимости;
						УчтеноНДС         = УчтеноНДС + СтрокаТаблицы.НДСУчитываетсяВCтоимости;
						УчтеноВыручки     = УчтеноВыручки + МенеджерЗаписи.ВыручкаБезНДС + МенеджерЗаписи.ВыручкаЕНВД;

					КонецЕсли;

					Если МенеджерЗаписи.ВыручкаНДС0 <> 0 Тогда

						СтрокаТаблицы.СуммаБезНДСДляОперацийПо0 = Окр(СтрокаТаблицы.СуммаБезНДС
							* (МенеджерЗаписи.ВыручкаНДС0 + УчтеноВыручки)/БазаРаспределения, 2) - УчтеноСуммаБезНДС;
						СтрокаТаблицы.НДСДляОперацийПо0 = Окр(СтрокаТаблицы.НДС
							* (МенеджерЗаписи.ВыручкаНДС0 + УчтеноВыручки)/БазаРаспределения, 2) - УчтеноНДС;

						УчтеноСуммаБезНДС = УчтеноСуммаБезНДС + СтрокаТаблицы.СуммаБезНДСДляОперацийПо0;
						УчтеноНДС         = УчтеноНДС + СтрокаТаблицы.НДСДляОперацийПо0;
						УчтеноВыручки     = УчтеноВыручки + МенеджерЗаписи.ВыручкаНДС0;

					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				
				Если НЕ Отказ Тогда
				
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Не обнаружена база распределения НДС за %1'"),
						Формат(ПериодПоступления, "ДФ='к ''Квартал'' гггг  ''г.'''"));
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,, Отказ);
					
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияНДСПредъявленныйКорректировкаПоступления(ДанныеДвижений, Реквизиты, Движения, Отказ)
	
	СформироватьДвиженияНДСПредъявленный(ДанныеДвижений, Движения, Отказ);
	
	ПодготовитьТаблицуПоЦенностям(ДанныеДвижений, Реквизиты, Отказ);
	
	ТаблицаРасход = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("НДСПредъявленный");
	ТаблицаПриход = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("НДСПредъявленный");
	
	Для Каждого СтрокаТаблицы Из ДанныеДвижений Цикл
		
		Если СтрокаТаблицы.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.УчитываетсяВCтоимости Тогда
			Событие = Перечисления.СобытияПоНДСПокупки.НДСВключенВСтоимость;
		ИначеЕсли СтрокаТаблицы.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ДляОперацийПо0 Тогда
			Событие = Перечисления.СобытияПоНДСПокупки.ПредполагаетсяСтавка0;
		ИначеЕсли СтрокаТаблицы.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.Распределяется Тогда
			Событие = Перечисления.СобытияПоНДСПокупки.НДСПодлежитРаспределению;
		Иначе
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаРасход.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, ,"Событие");
		НоваяСтрока.Событие = Событие;
		
		Если СтрокаТаблицы.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.Распределяется Тогда
			
			Если СтрокаТаблицы.НДСПринимаетсяКВычету > 0
			 ИЛИ СтрокаТаблицы.СуммаБезНДСПринимаетсяКВычету > 0 Тогда
				НоваяСтрока = ТаблицаПриход.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, ,"СуммаБезНДС,НДС,Событие");
				НоваяСтрока.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСПринимаетсяКВычету;
				НоваяСтрока.НДС = СтрокаТаблицы.НДСПринимаетсяКВычету;
				НоваяСтрока.Событие = Перечисления.СобытияПоНДСПокупки.НДСРаспределен;
		 	КонецЕсли;
		 
		КонецЕсли;
		
	КонецЦикла;
	
	СформироватьДвиженияНДСПредъявленный(ТаблицаРасход, Движения, Отказ, Истина);
	СформироватьДвиженияНДСПредъявленный(ТаблицаПриход, Движения, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область КорректировкаРеализации

Процедура СформироватьДвиженияКорректировкиРеализацияТоваровУслуг(ТаблицаТовары, ТаблицаСписанныеТоварыБухУчет, ТаблицаВозвращенныеТовары, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если ТаблицаТовары = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыКорректировкиРеализацияТоваровУслуг(
			ТаблицаТовары, ТаблицаСписанныеТоварыБухУчет, ТаблицаВозвращенныеТовары, ТаблицаРеквизиты);

	Если Параметры.Реквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];

	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Реквизиты.Организация, Реквизиты.Период);
	
	Если НЕ РаздельныйУчетНДСНаСчете19 Тогда
		Возврат;
	КонецЕсли;
	
	СписанныеПартииНДС = ПолучитьТаблицуСписанныеПартииНДС(Параметры.Товары, Параметры.СписанныеТоварыБухУчет, Реквизиты, Отказ);
	СформироватьДвиженияВыбытиеТоваров(СписанныеПартииНДС, Параметры.СписанныеТоварыБухУчет, Реквизиты, Движения, Отказ);
	
	Для Каждого СтрокаТаблицы Из Параметры.ВозвращенныеТовары Цикл
		СтрокаТаблицы.Количество = -СтрокаТаблицы.Количество;
	КонецЦикла;
	
	СформироватьДвиженияНДСРаздельныйУчетОприходованиеТоваров(Параметры.ВозвращенныеТовары, Реквизиты, Движения, Отказ);
	
КонецПроцедуры

Функция ПодготовитьПараметрыКорректировкиРеализацияТоваровУслуг(ТаблицаТовары, ТаблицаСписанныеТоварыБухУчет, ТаблицаВозвращенныеТовары, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;

	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"					// <Дата>
	+ "Регистратор,"			// <ДокументСсылка>
	+ "Организация,"			// <СправочникСсылка.Организации>
	+ "Склад,"
	+ "Подразделение"
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Подготовка таблицы Товары
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"            // <Строка> - имя табличной части документа
	+ "СинонимСписка,"        // <Строка> - синоним табличной части документа
	+ "НомерСтрокиДокумента," // <Число,10,0> - номер строки документа
	+ "Номенклатура,"         // <СправочникСсылка.Номенклатура>
	+ "СчетУчета,"            // <ПланСчетовСсылка.Хозрасчетный> - счет учета товара
	+ "СтавкаНДС,"            // <ПеречислениеСсылка.СтавкиНДС> - ставка НДС, указанная в документе
	+ "НомерГТД,"             // <СправочникСсылка.НомераГТД>
	+ "СтранаПроисхождения,"  // <СправочникСсылка.СтраныМира>
	+ "Количество"	          // <Число,15,3>
	;
	Параметры.Вставить("Товары", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТовары, СписокОбязательныхКолонок));
	// В таблице списанных партий СтавкаНДС используется для ставки, указанной в документе поступления товара.
	// Она может отличаться от ставки НДС документа реализации, поэтому ставку реализации переименовываем
	Если Параметры.Товары.Количество() > 0 Тогда
		Параметры.Товары.Колонки.СтавкаНДС.Имя = "СтавкаНДСДокумента";
	КонецЕсли;
	
	// Подготовка таблицы списанных товаров по данным бух.учета:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "СинонимСписка,"
	+ "НомерСтроки,"
	+ "СчетУчета,"
	+ "Номенклатура,"
	+ "Склад,"
	+ "Партия,"
	+ "Количество,"
	+ "КорСчетСписания,"
	+ "ВидКорСубконто1,"
	+ "ВидКорСубконто2,"
	+ "ВидКорСубконто3,"
	+ "КорСубконто1,"
	+ "КорСубконто2,"
	+ "КорСубконто3,"
	+ "КорПодразделение,"
	+ "Подразделение"
	;
	Параметры.Вставить("СписанныеТоварыБухУчет", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСписанныеТоварыБухУчет, СписокОбязательныхКолонок));

	Параметры.СписанныеТоварыБухУчет.Индексы.Добавить("СчетУчета");
	Отбор = Новый Структура("СчетУчета", ПланыСчетов.Хозрасчетный.КорректировкаТоваровПрошлогоПериода);
	СтрокиКУдалению = Параметры.СписанныеТоварыБухУчет.НайтиСтроки(Отбор);
	
	Если СтрокиКУдалению.Количество() > 0 Тогда
	    Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			Параметры.СписанныеТоварыБухУчет.Удалить(СтрокаКУдалению);
		КонецЦикла;
	КонецЕсли;
		
		
	// Подготовка таблицы возвращенных товаров по данным бух.учета:
	СписокОбязательныхКолонок = ""
	+ "СчетУчета,"
	+ "Номенклатура,"
	+ "Партия,"
	+ "Количество"
	;
	Параметры.Вставить("ВозвращенныеТовары", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВозвращенныеТовары, СписокОбязательныхКолонок));
			
	Возврат Параметры;
	
КонецФункции

#КонецОбласти

#Область МодернизацияОС

Процедура СформироватьДвиженияМодернизацияОС(ТаблицаТовары, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыМодернизацияОС(ТаблицаТовары, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	Если Параметры.Товары.Количество() = 0
		ИЛИ Параметры.СписанныеТоварыБухУчет.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Реквизиты.Организация, Реквизиты.Период);
	Если НЕ ПлательщикНДС ИЛИ НЕ РаздельныйУчетНДСНаСчете19 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьКорСчетСписанияМодернизацияОС(Параметры.СписанныеТоварыБухУчет, Реквизиты);	
	
	СписанныеПартииНДС = ПолучитьТаблицуСписанныеПартииНДС(
		Параметры.Товары, Параметры.СписанныеТоварыБухУчет, Реквизиты, Отказ);
	СформироватьДвиженияВыбытиеТоваров(
		СписанныеПартииНДС, Параметры.СписанныеТоварыБухУчет, Реквизиты, Движения, Отказ);

КонецПроцедуры

Функция ПодготовитьПараметрыМодернизацияОС(ТаблицаТовары, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                   				// <Дата>
	+ "Регистратор,"              				// <ДокументСсылка>
	+ "Организация,"              				// <СправочникСсылка.Организации>
	+ "Подразделение,"            				// <Ссылка на справочник подразделений>
	+ "СчетУчетаЗатратПоАмортизационнойПремии,"	// <ПланСчетовСсылка.Хозрасчетный>
	+ "ПодразделениеПоАмортизационнойПремии,"	// <Ссылка на справочник подразделений>
	+ "СубконтоПоАмортизационнойПремии1,"		// <Характеристика.ВидыСубконтоХозрасчетные>
	+ "СубконтоПоАмортизационнойПремии2,"		// <Характеристика.ВидыСубконтоХозрасчетные>
	+ "СубконтоПоАмортизационнойПремии3"		// <Характеристика.ВидыСубконтоХозрасчетные>
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	Параметры.Реквизиты.Колонки.Добавить("НДСвСтоимостиТоваров", Новый ОписаниеТипов("ПеречислениеСсылка.ДействиеНДСВСтоимостиТоваров"));
	Параметры.Реквизиты.ЗаполнитьЗначения(Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять, "НДСвСтоимостиТоваров");

	// Подготовка таблицы товаров документа:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "НомерСтрокиДокумента,"
	+ "Номенклатура,"
	+ "Количество,"
	+ "СчетУчета,"
	+ "НовыйСпособУчетаНДС,"
	+ "ПроцентАмортизационнойПремии"
	;
	Параметры.Вставить("Товары", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТовары, СписокОбязательныхКолонок));
		
	Реквизиты = Параметры.Реквизиты[0];	
	Параметры.Товары.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Параметры.Товары.ЗаполнитьЗначения(Реквизиты.Подразделение, "Подразделение");
		
	// Подготовка таблицы списанных товаров по данным бух.учета:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "СинонимСписка,"
	+ "НомерСтроки,"
	+ "СчетУчета,"
	+ "Номенклатура,"
	+ "Склад,"
	+ "Партия,"
	+ "Количество,"
	+ "ВидКорСубконто1,"
	+ "ВидКорСубконто2,"
	+ "ВидКорСубконто3,"
	+ "КорСубконто1,"
	+ "КорСубконто2,"
	+ "КорСубконто3,"
	+ "КорПодразделение,"
	+ "Подразделение"
	;
	Параметры.Вставить("СписанныеТоварыБухУчет", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСписанныеТоварыБухУчет, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура ЗаполнитьКорСчетСписанияМодернизацияОС(СписанныеТоварыБухУчет, Реквизиты)
	
	ОбъектыОС = СписанныеТоварыБухУчет.ВыгрузитьКолонку("КорСубконто1");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", Реквизиты.Период);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ОбъектыОС", ОбъектыОС);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетаУчетаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	СчетаУчетаОС.СчетУчета КАК КорСчетСписания
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В (&ОбъектыОС)) КАК СчетаУчетаОС";
	
	СчетаУчетаОбъектовОС = Запрос.Выполнить().Выгрузить();
	СчетаУчетаОбъектовОС.Индексы.Добавить("ОсновноеСредство");
	
	СписанныеТоварыБухУчет.Колонки.Добавить("КорСчетСписания", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	
	Для Каждого СтрокаТаблицы Из СписанныеТоварыБухУчет Цикл
		
		НайденнаяСтрока = СчетаУчетаОбъектовОС.Найти(СтрокаТаблицы.КорСубконто1, "ОсновноеСредство");
		Если НайденнаяСтрока <> Неопределено Тогда
			СтрокаТаблицы.КорСчетСписания = НайденнаяСтрока.КорСчетСписания;		
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОтчетКомиссионераОПродажах

Процедура СформироватьДвиженияПоступлениеПосредническихУслуг(ТаблицаУслуги, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьРеквизитыПоступлениеПосредническихУслуг(ТаблицаУслуги, ТаблицаРеквизиты);
	
	Если Параметры.Реквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];

	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Реквизиты.Организация, Реквизиты.Период);
	
	Если НЕ РаздельныйУчетНДСНаСчете19 Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьПараметрыПоступлениеПосредническихУслуг(Параметры, ТаблицаУслуги);
	
	Если Параметры.Услуги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УчетНДС.ЗаполнитьВидыЦенностей(Параметры.Услуги, Перечисления.ВидыЦенностей.ПосредническиеУслуги, "СчетЗатрат");

	ДанныеДвижений = ПодготовитьДанныеДвиженийПоступлениеТоваровУслугОтПоставщика(
		Неопределено, Параметры.Услуги, Реквизиты);
		
	СформироватьДвиженияПоступлениеЦенностей(ДанныеДвижений, Реквизиты, Движения, Отказ);	
		
КонецПроцедуры

Функция ПодготовитьРеквизитыПоступлениеПосредническихУслуг(ТаблицаУслуги, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                    // <ДокументСсылка>
	+ "Период,"                         // <Дата>
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "Подразделение,"                  // Подразделение для проводок
	+ "НДСВключенВСтоимость,"           // <Булево>
	+ "Контрагент,"                     // <СправочникСсылка.Контрагенты>
	+ "ДоговорКонтрагента,"             // <СправочникСсылка.ДоговорыКонтрагентов>
	+ "СчетУчетаРасчетовСКонтрагентом," // <ПланСчетовСсылка.Хозрасчетный>
	+ "ВалютаВзаиморасчетов"            // <СправочникСсылка.Валюты>
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	Параметры.Реквизиты.Колонки.Добавить("УчетАгентскогоНДС", Новый ОписаниеТипов("Булево"));

	Возврат Параметры;

КонецФункции

Процедура ПодготовитьПараметрыПоступлениеПосредническихУслуг(Параметры, ТаблицаУслуги)

	// Подготовка таблицы Услуги

	СписокОбязательныхКолонок = ""
	+ "Содержание,"              // <Строка,150> - содержание для проводок
	+ "СуммаРуб,"                // <Число,15,2> - сумма в рублях
	+ "СуммаБезНДСРуб,"          // <Число,15,2> - сумма без НДС в рублях
	+ "СуммаНДСРуб,"             // <Число,15,2> - сумма НДС в рублях
	+ "СчетЗатрат,"              // <ПланСчетовСсылка.Хозрасчетный>
	+ "Субконто1,"               // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "Субконто2,"               // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "Субконто3,"               // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "СтатьяЗатрат,"            // <СправочникСсылка.СтатьиЗатрат>
	+ "ПодразделениеЗатрат,"     // <Ссылка на справочник подразделений>
	+ "СчетУчетаНДС,"            // <ПланСчетовСсылка.Хозрасчетный>
	+ "СуммаВзаиморасчетов,"     // <Число,15,2> - сумма в валюте расчетов с поставщиком
	+ "СуммаНДСВзаиморасчетов,"  // <Число,15,2> - сумма НДС в валюте расчетов с поставщиком
	+ "СтавкаНДС,"               // <ПеречислениеСсылка.СтавкиНДС>
	+ "СпособУчетаНДС"           // <ПеречислениеСсылка.СпособыУчетаНДС>
	;
	Параметры.Вставить("Услуги", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаУслуги, СписокОбязательныхКолонок));
		
	// Документом-основанием счета-фактуры при поступлении от поставщика выступает документ поступления
	Реквизиты = Параметры.Реквизиты[0];
	Параметры.Услуги.Колонки.Добавить("СчетФактура", Документы.ТипВсеСсылки());
	Параметры.Услуги.Колонки.Добавить("Партия",      Документы.ТипВсеСсылки());
	Параметры.Услуги.ЗаполнитьЗначения(Реквизиты.Регистратор, "Партия,СчетФактура");
	
	Параметры.Услуги.Колонки.ПодразделениеЗатрат.Имя = "Подразделение";
	Параметры.Услуги.Колонки.СуммаБезНДСРуб.Имя = "СуммаБезНДС";
	Параметры.Услуги.Колонки.СуммаНДСРуб.Имя = "НДС";

КонецПроцедуры

#КонецОбласти

#Область ПоступлениеДопРасходов

Процедура СформироватьДвиженияПоступлениеДопРасходовОтПоставщика(ТаблицаТовары, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьРеквизитыПоступлениеДопРасходовОтПоставщика(ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Реквизиты.Организация, Реквизиты.Период);
	
	Если НЕ РаздельныйУчетНДСНаСчете19 Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьПараметрыПоступлениеДопРасходовОтПоставщика(Параметры, ТаблицаТовары);
	
	Если Параметры.Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Вид ценности по умолчанию для доп.расходов - прочие работы и услуги
	УчетНДС.ЗаполнитьВидыЦенностейПоступлениеОтПоставщика(Параметры.Товары, Реквизиты, Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги, "СчетУчета");
	
	ДанныеДвижений = ПодготовитьДанныеДвиженийПоступлениеТоваровУслугОтПоставщика(Параметры.Товары, Неопределено, Реквизиты);
	СформироватьДвиженияПоступлениеЦенностей(ДанныеДвижений, Реквизиты, Движения, Отказ);
	
КонецПроцедуры

Функция ПодготовитьРеквизитыПоступлениеДопРасходовОтПоставщика(ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                    // <ДокументСсылка>
	+ "Период,"                         // <Дата>
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "НДСВключенВСтоимость,"           // <Булево>
	+ "УчетАгентскогоНДС,"              // <Булево>
	+ "ВидАгентскогоДоговора,"          // <ПеречислениеСсылка.ВидыАгентскихДоговоров> - заполняется, если УчетАгентскогоНДС = Истина
	+ "Контрагент,"                     // <СправочникСсылка.Контрагенты>
	+ "ДоговорКонтрагента,"             // <СправочникСсылка.ДоговорыКонтрагентов>
	+ "СчетУчетаРасчетовСКонтрагентом," // <ПланСчетовСсылка.Хозрасчетный>
	+ "ВалютаВзаиморасчетов"            // <СправочникСсылка.Валюты>
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура ПодготовитьПараметрыПоступлениеДопРасходовОтПоставщика(Параметры, ТаблицаТовары)

	// Подготовка таблицы Товары

	СписокОбязательныхКолонок = ""
	+ "ДокументПартии,"          // <ДокументСсылка> - документ поступления товаров
	+ "Номенклатура,"            // <СправочникСсылка.Номенклатура> - поступивший ранее товар
	+ "Склад,"                   // <СправочникСсылка.Склады> - склад, на который поступил ранее товар
	+ "Содержание,"              // <Строка,150> - содержание для проводок
	+ "Подразделение,"           // Подразделение для проводок
	+ "СчетУчета,"               // <ПланСчетовСсылка.Хозрасчетный>
	+ "СчетУчетаНДС,"            // <ПланСчетовСсылка.Хозрасчетный>
	+ "СпособУчетаНДС,"          // <ПеречислениеСсылка.СпособыУчетаНДС>
	+ "СуммаРуб,"                // <Число,15,2> - сумма в рублях
	+ "СуммаБезНДСРуб,"          // <Число,15,2> - сумма без НДС в рублях
	+ "СуммаНДСРуб,"             // <Число,15,2> - сумма НДС в рублях
	+ "СуммаВзаиморасчетов,"     // <Число,15,2> - сумма в валюте расчетов с поставщиком
	+ "СуммаНДСВзаиморасчетов,"  // <Число,15,2> - сумма НДС в валюте расчетов с поставщиком
	+ "СтавкаНДС"                // <ПеречислениеСсылка.СтавкиНДС>
	;
	Параметры.Вставить("Товары", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТовары, СписокОбязательныхКолонок));
	Реквизиты = Параметры.Реквизиты[0];
	// Документом партии при поступлении доп.расходов служит документ поступления товаров
	Параметры.Товары.Колонки.ДокументПартии.Имя = "Партия";
	// Документом-основанием счета-фактуры при поступлении доп.расходов выступает документ поступления
	Параметры.Товары.Колонки.Добавить("СчетФактура", Документы.ТипВсеСсылки());
	Параметры.Товары.Колонки.Добавить("Регистратор", Документы.ТипВсеСсылки());
	Параметры.Товары.ЗаполнитьЗначения(Реквизиты.Регистратор, "СчетФактура,Регистратор");
	// Для доп.расходов количество в регистре НДСпоПриобретеннымЦенностям всегда равно нулю
	Параметры.Товары.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));

	Параметры.Товары.Колонки.Добавить("СтатьяЗатрат", Новый ОписаниеТипов("СправочникСсылка.СтатьиЗатрат"));
	Параметры.Товары.Колонки.Добавить("СпособСтроительства", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыСтроительства"));
	
	Параметры.Товары.Колонки.СуммаБезНДСРуб.Имя = "СуммаБезНДС";
	Параметры.Товары.Колонки.СуммаНДСРуб.Имя = "НДС";
	
КонецПроцедуры

#КонецОбласти

#Область ПоступлениеИзПереработки

Процедура СформироватьДвиженияПоступлениеИзПереработки(ТаблицаТовары, ТаблицаУслуги, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьРеквизитыПоступлениеИзПереработки(ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Реквизиты.Организация, Реквизиты.Период);
	
	Если НЕ РаздельныйУчетНДСНаСчете19 Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьПараметрыПоступлениеТоваровУслугОтПоставщика(Параметры, ТаблицаТовары, ТаблицаУслуги);
    	
	УчетНДС.ЗаполнитьВидыЦенностейПоступлениеОтПоставщика(Параметры.Товары, Реквизиты, Неопределено, "СчетУчета");
	УчетНДС.ЗаполнитьВидыЦенностейПоступлениеОтПоставщика(Параметры.Услуги, Реквизиты, Неопределено, "СчетЗатрат");

	ДанныеДвижений = ПодготовитьДанныеДвиженийПоступлениеТоваровУслугОтПоставщика(
		Параметры.Товары, Параметры.Услуги, Реквизиты);
		
	СформироватьДвиженияПоступлениеЦенностей(ДанныеДвижений, Реквизиты, Движения, Отказ);
	
КонецПроцедуры

Функция ПодготовитьРеквизитыПоступлениеИзПереработки(ТаблицаРеквизиты)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                    // <ДокументСсылка>
	+ "Период,"                         // <Дата>
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "Подразделение,"                  // <Ссылка на справочник подразделений>
	+ "Склад,"                          // <СправочникСсылка.Склады>
	+ "ТипСклада,"                      // <ПеречислениеСсылка.ТипыСкладов>
	+ "УчетАгентскогоНДС,"              // <Булево>
	+ "ВидАгентскогоДоговора,"          // <ПеречислениеСсылка.ВидыАгентскихДоговоров> - заполняется, если УчетАгентскогоНДС = Истина
	+ "Контрагент,"                     // <СправочникСсылка.Контрагенты>
	+ "ДоговорКонтрагента,"             // <СправочникСсылка.ДоговорыКонтрагентов>
	+ "СчетУчетаРасчетовСКонтрагентом," // <ПланСчетовСсылка.Хозрасчетный>
	+ "ВалютаВзаиморасчетов,"           // <СправочникСсылка.Валюты>
	+ "ТипСкладаПолучателя"            	// <ПеречислениеСсылка.ТипыСкладов>
	;
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;	
		
КонецФункции

#КонецОбласти

#Область ПоступлениеНМА

Процедура СформироватьДвиженияПоступлениеНематериальныхАктивовОтПоставщика(ТаблицаНМА, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьРеквизитыПоступлениеНематериальныхАктивовОтПоставщика(ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Реквизиты.Организация, Реквизиты.Период);
	
	Если НЕ РаздельныйУчетНДСНаСчете19 Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьПараметрыПоступлениеНематериальныхАктивовОтПоставщика(Параметры, ТаблицаНМА);
	
	Если Параметры.НематериальныеАктивы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УчетНДС.ЗаполнитьВидыЦенностейПоступлениеОтПоставщика(Параметры.НематериальныеАктивы, Реквизиты, Неопределено, "СчетУчета");
	
	ДанныеДвижений = ПодготовитьДанныеДвиженийПоступлениеНематериальныхАктивов(
		Параметры.НематериальныеАктивы, Реквизиты);
		
	СформироватьДвиженияПоступлениеЦенностей(ДанныеДвижений, Реквизиты, Движения, Отказ);
	
КонецПроцедуры

Функция ПодготовитьРеквизитыПоступлениеНематериальныхАктивовОтПоставщика(ТаблицаРеквизиты) 
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Реквизиты
	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                    // <ДокументСсылка>
	+ "Период,"                         // <Дата>
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "Подразделение,"                  // <Ссылка на справочник подразделений>
	+ "НДСВключенВСтоимость,"           // <Булево>
	+ "УчетАгентскогоНДС,"              // <Булево>
	+ "ВидАгентскогоДоговора,"          // <ПеречислениеСсылка.ВидыАгентскихДоговоров> - заполняется, если УчетАгентскогоНДС = Истина
	+ "Контрагент,"                     // <СправочникСсылка.Контрагенты>
	+ "ДоговорКонтрагента,"             // <СправочникСсылка.ДоговорыКонтрагентов>
	+ "СчетУчетаРасчетовСКонтрагентом," // <ПланСчетовСсылка.Хозрасчетный>
	+ "ВалютаВзаиморасчетов"            // <СправочникСсылка.Валюты>
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;
	
КонецФункции

Процедура ПодготовитьПараметрыПоступлениеНематериальныхАктивовОтПоставщика(Параметры, ТаблицаНМА) 
	
	// Подготовка таблицы Нематериальные активы

	СписокОбязательныхКолонок = ""
	+ "НематериальныйАктив,"     // <СправочникСсылка.НематериальныеАктивы>
	+ "Содержание,"              // <Строка,150> - содержание для проводок
	+ "СуммаРуб,"                // <Число,15,2> - сумма в рублях
	+ "СуммаБезНДСРуб,"          // <Число,15,2> - сумма без НДС в рублях
	+ "СуммаНДСРуб,"             // <Число,15,2> - сумма НДС в рублях
	+ "СчетУчета,"               // <ПланСчетовСсылка.Хозрасчетный>
	+ "СчетУчетаНДС,"            // <ПланСчетовСсылка.Хозрасчетный>
	+ "СпособУчетаНДС,"          // <ПеречислениеСсылка.СпособыУчетаНДС>
	+ "СуммаВзаиморасчетов,"     // <Число,15,2> - сумма в валюте расчетов с поставщиком
	+ "СуммаНДСВзаиморасчетов,"  // <Число,15,2> - сумма НДС в валюте расчетов с поставщиком
	+ "СтавкаНДС"               // <ПеречислениеСсылка.СтавкиНДС>
	;
	Параметры.Вставить("НематериальныеАктивы", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаНМА, СписокОбязательныхКолонок));
		
	Реквизиты = Параметры.Реквизиты[0];
	// Документом-основанием счета-фактуры при поступлении от поставщика выступает документ поступления
	Параметры.НематериальныеАктивы.Колонки.Добавить("СчетФактура", Документы.ТипВсеСсылки());
	Параметры.НематериальныеАктивы.Колонки.Добавить("Партия", Документы.ТипВсеСсылки());
	Параметры.НематериальныеАктивы.Колонки.Добавить("Регистратор", Документы.ТипВсеСсылки());
	Параметры.НематериальныеАктивы.ЗаполнитьЗначения(Реквизиты.Регистратор, "СчетФактура,Партия,Регистратор");
	
КонецПроцедуры

Функция ПодготовитьДанныеДвиженийПоступлениеНематериальныхАктивов(НематериальныеАктивы, Реквизиты)

	ДанныеДвижений = НематериальныеАктивы.Скопировать(,
		"СчетУчета,НематериальныйАктив,СчетФактура,ВидЦенности,СтавкаНДС,СчетУчетаНДС,СпособУчетаНДС,
		|Регистратор,Партия,СуммаБезНДСРуб,СуммаНДСРуб");
	ДанныеДвижений.Свернуть(
		"СчетУчета,НематериальныйАктив,СчетФактура,ВидЦенности,СтавкаНДС,СчетУчетаНДС,СпособУчетаНДС,
		|Регистратор,Партия",
		"СуммаБезНДСРуб,СуммаНДСРуб");

	ДанныеДвижений.Колонки.Добавить("Период",      Новый ОписаниеТипов("Дата"));
	ДанныеДвижений.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Период, "Период,ДатаСобытия");

	ДанныеДвижений.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");

	ДанныеДвижений.Колонки.Добавить("Поставщик", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Контрагент, "Поставщик");

	ДанныеДвижений.Колонки.Добавить("ДоговорКонтрагента", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	Если Реквизиты.УчетАгентскогоНДС Тогда 	// Договор должен указываться только для налогового агента
		ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.ДоговорКонтрагента, "ДоговорКонтрагента");
	КонецЕсли;
	
	ДанныеДвижений.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Подразделение, "Подразделение");
	
	ДанныеДвижений.Колонки.СпособУчетаНДС.Имя = "НовыйСпособУчетаНДС";
	ДанныеДвижений.Колонки.Добавить("СпособУчетаНДС", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыУчетаНДС"));
	
	ДанныеДвижений.Колонки.Добавить("СпособУчетаНДСИзменился", Новый ОписаниеТипов("Булево"));
	ДанныеДвижений.ЗаполнитьЗначения(Истина, "СпособУчетаНДСИзменился");
	
	ДанныеДвижений.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	
	ДанныеДвижений.Колонки.СуммаБезНДСРуб.Имя = "СуммаБезНДС";
	ДанныеДвижений.Колонки.СуммаНДСРуб.Имя = "НДС";
	
	ДанныеДвижений.Колонки.СчетУчета.Имя = "СчетЗатрат";
	
	ДанныеДвижений.Колонки.НематериальныйАктив.Имя = "Субконто1";
	ДанныеДвижений.Колонки.Добавить("Субконто2");
	ДанныеДвижений.Колонки.Добавить("Субконто3");
	
	ДанныеДвижений.Колонки.Добавить("ПоставщикПредъявляетНДС", Новый ОписаниеТипов("Булево"));
	Если ДанныеДвижений.Итог("НДС") = 0 Тогда
		ПоставщикПредъявляетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.ДоговорКонтрагента, "ПредъявляетНДС");
		ДанныеДвижений.ЗаполнитьЗначения(ПоставщикПредъявляетНДС, "ПоставщикПредъявляетНДС");
	Иначе
		ДанныеДвижений.ЗаполнитьЗначения(Истина, "ПоставщикПредъявляетНДС");
	КонецЕсли;
	
	Возврат ДанныеДвижений;
	
КонецФункции

#КонецОбласти

#Область ПоступлениеТоваровУслуг

Процедура СформироватьДвиженияПоступлениеТоваровУслугОтПоставщика(ТаблицаТовары, ТаблицаУслуги, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьРеквизитыПоступлениеТоваровУслугОтПоставщика(ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Реквизиты.Организация, Реквизиты.Период);
	
	Если НЕ РаздельныйУчетНДСНаСчете19 Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьПараметрыПоступлениеТоваровУслугОтПоставщика(Параметры, ТаблицаТовары, ТаблицаУслуги);
    	
	УчетНДС.ЗаполнитьВидыЦенностейПоступлениеОтПоставщика(Параметры.Товары, Реквизиты, Неопределено, "СчетУчета");
	УчетНДС.ЗаполнитьВидыЦенностейПоступлениеОтПоставщика(Параметры.Услуги, Реквизиты, Неопределено, "СчетЗатрат");

	ДанныеДвижений = ПодготовитьДанныеДвиженийПоступлениеТоваровУслугОтПоставщика(
		Параметры.Товары, Параметры.Услуги, Реквизиты);
		
	СформироватьДвиженияПоступлениеЦенностей(ДанныеДвижений, Реквизиты, Движения, Отказ);
	
КонецПроцедуры

Функция ПодготовитьРеквизитыПоступлениеТоваровУслугОтПоставщика(ТаблицаРеквизиты)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                    // <ДокументСсылка>
	+ "Период,"                         // <Дата>
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "Подразделение,"                  // <Ссылка на справочник подразделений>
	+ "Склад,"                          // <СправочникСсылка.Склады>
	+ "ТипСклада,"                      // <ПеречислениеСсылка.ТипыСкладов>
	+ "УчетАгентскогоНДС,"              // <Булево>
	+ "ВидАгентскогоДоговора,"          // <ПеречислениеСсылка.ВидыАгентскихДоговоров> - заполняется, если УчетАгентскогоНДС = Истина
	+ "Контрагент,"                     // <СправочникСсылка.Контрагенты>
	+ "ДоговорКонтрагента,"             // <СправочникСсылка.ДоговорыКонтрагентов>
	+ "СчетУчетаРасчетовСКонтрагентом," // <ПланСчетовСсылка.Хозрасчетный>
	+ "ВалютаВзаиморасчетов"            // <СправочникСсылка.Валюты>
	;
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;	
		
КонецФункции		

Процедура ПодготовитьПараметрыПоступлениеТоваровУслугОтПоставщика(Параметры, ТаблицаТовары, ТаблицаУслуги)

	// Подготовка таблицы Товары

	СписокОбязательныхКолонок = ""
	+ "Номенклатура,"            // <СправочникСсылка.Номенклатура>
	+ "СуммаБезНДСРуб,"          // <Число,15,2> - сумма без НДС в рублях
	+ "СуммаНДСРуб,"             // <Число,15,2> - сумма НДС в рублях
	+ "СчетУчета,"               // <ПланСчетовСсылка.Хозрасчетный>
	+ "СчетУчетаНДС,"            // <ПланСчетовСсылка.Хозрасчетный>
	+ "СпособУчетаНДС,"          // <ПеречислениеСсылка.СпособыУчетаНДС>
	+ "СтавкаНДС,"               // <ПеречислениеСсылка.СтавкиНДС>
	+ "Количество"               // <Число,15,3>
	;
	
	ЕстьСтатьяЗатрат = Ложь;
	ЕстьСтатьяЗатрат = ТаблицаТовары <> Неопределено И ТаблицаТовары.Колонки.Найти("СтатьяЗатрат") <> Неопределено;
	Если ЕстьСтатьяЗатрат Тогда
		СписокОбязательныхКолонок = СписокОбязательныхКолонок + ",СтатьяЗатрат";
	КонецЕсли;
	
	Параметры.Вставить("Товары", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТовары, СписокОбязательныхКолонок));
	Реквизиты = Параметры.Реквизиты[0];
	// Документом партии и документом-основанием счета-фактуры при поступлении от поставщика выступает документ поступления
	Параметры.Товары.Колонки.Добавить("Партия",      Документы.ТипВсеСсылки());
	Параметры.Товары.Колонки.Добавить("СчетФактура", Документы.ТипВсеСсылки());
	Параметры.Товары.ЗаполнитьЗначения(Реквизиты.Регистратор, "Партия,СчетФактура");
	// Склад берем Из шапки документа поступления
	Параметры.Товары.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	Параметры.Товары.ЗаполнитьЗначения(Реквизиты.Склад, "Склад");
	// Подразделение берем из шапки документа поступления
	Параметры.Товары.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Параметры.Товары.ЗаполнитьЗначения(Реквизиты.Подразделение, "Подразделение");
	
	Параметры.Товары.Колонки.СуммаБезНДСРуб.Имя = "СуммаБезНДС";
	Параметры.Товары.Колонки.СуммаНДСРуб.Имя = "НДС";
	
	Если НЕ ЕстьСтатьяЗатрат Тогда
		Параметры.Товары.Колонки.Добавить("СтатьяЗатрат", Новый ОписаниеТипов("СправочникСсылка.СтатьиЗатрат"));
	КонецЕсли;
	
	Параметры.Товары.Колонки.Добавить("СпособСтроительства", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыСтроительства"));
	Параметры.Товары.ЗаполнитьЗначения(Перечисления.СпособыСтроительства.Подрядный, "СпособСтроительства");
	
	// Подготовка таблицы Услуги

	СписокОбязательныхКолонок = ""
	+ "СуммаБезНДСРуб,"          // <Число,15,2> - сумма без НДС в рублях
	+ "СуммаНДСРуб,"             // <Число,15,2> - сумма НДС в рублях
	+ "СчетЗатрат,"              // <ПланСчетовСсылка.Хозрасчетный>
	+ "Субконто1,"               // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "Субконто2,"               // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "Субконто3,"               // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "ПодразделениеЗатрат,"     // <Ссылка на справочник подразделений>
	+ "СчетУчетаНДС,"            // <ПланСчетовСсылка.Хозрасчетный>
	+ "СпособУчетаНДС,"          // <ПеречислениеСсылка.СпособыУчетаНДС>
	+ "СтавкаНДС"               // <ПеречислениеСсылка.СтавкиНДС>
	;
	Параметры.Вставить("Услуги", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаУслуги, СписокОбязательныхКолонок));
	// Документом-основанием счета-фактуры при поступлении от поставщика выступает документ поступления
	Параметры.Услуги.Колонки.Добавить("Партия",      Документы.ТипВсеСсылки());
	Параметры.Услуги.Колонки.Добавить("СчетФактура", Документы.ТипВсеСсылки());
	Параметры.Услуги.ЗаполнитьЗначения(Реквизиты.Регистратор, "Партия,СчетФактура");
	
	Параметры.Услуги.Колонки.ПодразделениеЗатрат.Имя = "Подразделение";
	Параметры.Услуги.Колонки.СуммаБезНДСРуб.Имя = "СуммаБезНДС";
	Параметры.Услуги.Колонки.СуммаНДСРуб.Имя = "НДС";

КонецПроцедуры

Функция ПодготовитьДанныеДвиженийПоступлениеТоваровУслугОтПоставщика(Товары, Услуги, Реквизиты)

	Если Товары <> Неопределено Тогда
		
		ПартионныйУчет = УчетнаяПолитика.СпособОценкиМПЗ(Реквизиты.Организация, Реквизиты.Период) = Перечисления.СпособыОценки.ФИФО;
		
		Если Товары.Колонки.Найти("СчетУчетаЗабалансовый") = Неопределено Тогда
			ДанныеДвижений = Товары.Скопировать(,
				"СчетУчета,Подразделение,Номенклатура,Склад,Партия,СтатьяЗатрат,СпособСтроительства,
				|СчетФактура,ВидЦенности,СчетУчетаНДС,СтавкаНДС,СпособУчетаНДС,
				|Количество,СуммаБезНДС,НДС");
		Иначе 
			ДанныеДвижений = Товары.Скопировать(Новый Структура("СчетУчетаЗабалансовый", Ложь),
				"СчетУчета,Подразделение,Номенклатура,Склад,Партия,СтатьяЗатрат,СпособСтроительства,
				|СчетФактура,ВидЦенности,СчетУчетаНДС,СтавкаНДС,СпособУчетаНДС,
				|Количество,СуммаБезНДС,НДС");
		КонецЕсли;
		ДанныеДвижений.Колонки.СчетУчета.Имя = "СчетЗатрат";
	
		ДанныеДвижений.Колонки.Добавить("Субконто1");
		ДанныеДвижений.Колонки.Добавить("Субконто2");
		ДанныеДвижений.Колонки.Добавить("Субконто3");
		
		Для каждого СтрокаТаблицы Из ДанныеДвижений Цикл

			СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетЗатрат);
			Для Ном = 1 По СвойстваСчета.КоличествоСубконто Цикл
				Если СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура
				 ИЛИ СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства Тогда
					СтрокаТаблицы["Субконто" + Ном] = СтрокаТаблицы.Номенклатура;
				ИначеЕсли СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады Тогда
					Если БухгалтерскийУчетВызовСервераПовтИсп.ВедетсяСуммовойУчетПоСкладам(СтрокаТаблицы.СчетЗатрат) Тогда
						СтрокаТаблицы["Субконто" + Ном] = СтрокаТаблицы.Склад;
					КонецЕсли;
		        ИначеЕсли СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии Тогда
					Если ПартионныйУчет Тогда
						СтрокаТаблицы["Субконто" + Ном] = СтрокаТаблицы.Партия;
					КонецЕсли;
		        ИначеЕсли СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат Тогда
					СтрокаТаблицы["Субконто" + Ном] = СтрокаТаблицы.СтатьяЗатрат;
		        ИначеЕсли СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СпособыСтроительства Тогда
					СтрокаТаблицы["Субконто" + Ном] = СтрокаТаблицы.СпособСтроительства;
				КонецЕсли;
			КонецЦикла;
			Если НЕ СвойстваСчета.УчетПоПодразделениям Тогда
				СтрокаТаблицы.Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
			КонецЕсли;
			
		КонецЦикла;

		ДанныеДвижений.Колонки.Удалить("Номенклатура");
		ДанныеДвижений.Колонки.Удалить("Склад");
		ДанныеДвижений.Колонки.Удалить("СтатьяЗатрат");
		ДанныеДвижений.Колонки.Удалить("СпособСтроительства");
		
		Если Услуги <> Неопределено Тогда
			ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(Услуги, ДанныеДвижений);
		КонецЕсли;
	Иначе
		ДанныеДвижений = Услуги.Скопировать(,
			"СчетЗатрат,Подразделение,Субконто1,Субконто2,Субконто3,Партия,
			|СчетФактура,ВидЦенности,СчетУчетаНДС,СтавкаНДС,СпособУчетаНДС,
			|СуммаБезНДС,НДС");
		ДанныеДвижений.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	КонецЕсли;
	
	ДанныеДвижений.Колонки.Добавить("Регистратор", Документы.ТипВсеСсылки());
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Регистратор, "Регистратор");
	
	ДанныеДвижений.Колонки.Добавить("Период",      Новый ОписаниеТипов("Дата"));
	ДанныеДвижений.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Период, "Период,ДатаСобытия");

	ДанныеДвижений.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");

	ДанныеДвижений.Колонки.Добавить("Поставщик", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.Контрагент, "Поставщик");

	ДанныеДвижений.Колонки.СпособУчетаНДС.Имя = "НовыйСпособУчетаНДС";
	ДанныеДвижений.Колонки.Добавить("СпособУчетаНДС", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыУчетаНДС"));
	
	ДанныеДвижений.Колонки.Добавить("СпособУчетаНДСИзменился",
		Новый ОписаниеТипов("Булево"));
	ДанныеДвижений.ЗаполнитьЗначения(Истина, "СпособУчетаНДСИзменился");
	
	ДанныеДвижений.Колонки.Добавить("ДоговорКонтрагента", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	Если Реквизиты.УчетАгентскогоНДС Тогда 	// Договор должен указываться только для налогового агента
		ДанныеДвижений.ЗаполнитьЗначения(Реквизиты.ДоговорКонтрагента, "ДоговорКонтрагента");
	КонецЕсли;
	
	ДанныеДвижений.Колонки.Добавить("ПоставщикПредъявляетНДС", Новый ОписаниеТипов("Булево"));
	Если ДанныеДвижений.Итог("НДС") = 0 Тогда
		ПоставщикПредъявляетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.ДоговорКонтрагента, "ПредъявляетНДС");
		ДанныеДвижений.ЗаполнитьЗначения(ПоставщикПредъявляетНДС, "ПоставщикПредъявляетНДС");
	Иначе
		ДанныеДвижений.ЗаполнитьЗначения(Истина, "ПоставщикПредъявляетНДС");
	КонецЕсли;
	
	Возврат ДанныеДвижений;

КонецФункции

#КонецОбласти

#Область ПринятиеКУчетуНМА

Процедура СформироватьДвиженияПринятиеНаУчетНМА(ТаблицаНМА, ТаблицаСписанныеНМАБухУчет, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыПринятиеНаУчетНМА(ТаблицаНМА, ТаблицаСписанныеНМАБухУчет, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Реквизиты.Организация, Реквизиты.Период);
	
	Если НЕ ПлательщикНДС ИЛИ НЕ РаздельныйУчетНДСНаСчете19 Тогда
		Возврат;
	КонецЕсли;
	
	СписанныеПартииНДС = ПолучитьТаблицуСписанныеПартииНДС(
		Параметры.НМА, Параметры.СписанныеНМАБухУчет, Реквизиты, Отказ);
	СформироватьДвиженияВыбытиеТоваров(
		СписанныеПартииНДС, Параметры.СписанныеНМАБухУчет, Реквизиты, Движения, Отказ);

КонецПроцедуры

Функция ПодготовитьПараметрыПринятиеНаУчетНМА(ТаблицаНМА, ТаблицаСписанныеНМАБухУчет, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                   // <Дата>
	+ "Регистратор,"              // <ДокументСсылка>
	+ "Организация"              // <СправочникСсылка.Организации>
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Подготовка таблицы НМА документа:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "НомерСтрокиДокумента,"
	+ "Номенклатура,"
	+ "Количество,"
	+ "СчетУчета,"
	+ "НовыйСпособУчетаНДС,"
	+ "Подразделение"
	;
	Параметры.Вставить("НМА", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаНМА, СписокОбязательныхКолонок));
		
	// Подготовка таблицы списанных товаров по данным бух.учета:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "СинонимСписка,"
	+ "НомерСтроки,"
	+ "СчетУчета,"
	+ "Номенклатура,"
	+ "Склад,"
	+ "Партия,"
	+ "Количество,"
	+ "КорСчетСписания,"
	+ "ВидКорСубконто1,"
	+ "ВидКорСубконто2,"
	+ "ВидКорСубконто3,"
	+ "КорСубконто1,"
	+ "КорСубконто2,"
	+ "КорСубконто3,"
	+ "КорПодразделение,"
	+ "Подразделение"
	;
	Параметры.Вставить("СписанныеНМАБухУчет", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСписанныеНМАБухУчет, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

#КонецОбласти

#Область ПринятиеКУчетуОС

Процедура СформироватьДвиженияПринятиеНаУчетОС(ТаблицаТовары, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыПринятиеНаУчетОС(ТаблицаТовары, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	Если Параметры.Товары.Количество() = 0
		ИЛИ Параметры.СписанныеТоварыБухУчет.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Реквизиты.Организация, Реквизиты.Период);
	Если НЕ ПлательщикНДС ИЛИ НЕ РаздельныйУчетНДСНаСчете19 Тогда
		Возврат;
	КонецЕсли;
	
	СписанныеПартииНДС = ПолучитьТаблицуСписанныеПартииНДС(
		Параметры.Товары, Параметры.СписанныеТоварыБухУчет, Реквизиты, Отказ);
	СформироватьДвиженияВыбытиеТоваров(
		СписанныеПартииНДС, Параметры.СписанныеТоварыБухУчет, Реквизиты, Движения, Отказ);

КонецПроцедуры

Функция ПодготовитьПараметрыПринятиеНаУчетОС(ТаблицаТовары, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                   // <Дата>
	+ "Регистратор,"              // <ДокументСсылка>
	+ "Организация,"              // <СправочникСсылка.Организации>
	+ "Подразделение,"             // <Ссылка на справочник подразделений>
	+ "ПроцентАмортизационнойПремии"
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	Параметры.Реквизиты.Колонки.Добавить("НДСвСтоимостиТоваров", Новый ОписаниеТипов("ПеречислениеСсылка.ДействиеНДСВСтоимостиТоваров"));
	Параметры.Реквизиты.ЗаполнитьЗначения(Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять, "НДСвСтоимостиТоваров");

	// Подготовка таблицы товаров документа:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "НомерСтрокиДокумента,"
	+ "Номенклатура,"
	+ "Количество,"
	+ "СчетУчета,"
	+ "НовыйСпособУчетаНДС"
	;
	Параметры.Вставить("Товары", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТовары, СписокОбязательныхКолонок));
		
	Реквизиты = Параметры.Реквизиты[0];	
	Параметры.Товары.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Параметры.Товары.ЗаполнитьЗначения(Реквизиты.Подразделение, "Подразделение");
		
	// Подготовка таблицы списанных товаров по данным бух.учета:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "СинонимСписка,"
	+ "НомерСтроки,"
	+ "СчетУчета,"
	+ "Номенклатура,"
	+ "Склад,"
	+ "Партия,"
	+ "Количество,"
	+ "КорСчетСписания,"
	+ "ВидКорСубконто1,"
	+ "ВидКорСубконто2,"
	+ "ВидКорСубконто3,"
	+ "КорСубконто1,"
	+ "КорСубконто2,"
	+ "КорСубконто3,"
	+ "КорПодразделение,"
	+ "Подразделение"
	;
	Параметры.Вставить("СписанныеТоварыБухУчет", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСписанныеТоварыБухУчет, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

#КонецОбласти

#Область РаспределениеНДС

Процедура СформироватьДвиженияРаспределениеНДС(ТаблицаРеквизиты, ТаблицаРаспределяемыйНДС, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыРаспределениеНДС(ТаблицаРеквизиты, ТаблицаРаспределяемыйНДС);
	Если Параметры.Реквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];

	Если НЕ Реквизиты.РаздельныйУчетНДСНаСчете19 Тогда
		Возврат;
	КонецЕсли;
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	Если НЕ ПлательщикНДС Тогда
		Возврат;
	КонецЕсли;
	
	ПартииНДС = Параметры.РаспределяемыйНДС;
	
	//Бух. проводки распределение НДС на 19 счете
	ДанныеПроводок = ПодготовитьДанныеПроводокРаспределениеНДСНаСчете19(ПартииНДС);
	СформироватьПроводкиПоКорректировкеСпособаУчетаНДС(ДанныеПроводок, Реквизиты, Движения, Отказ);
	
	//Бух. проводки включение НДС в стоимость
	ДанныеПроводок = ПодготовитьДанныеПроводокВключениеВСтоимостьРаспределениеНДС(ПартииНДС, Реквизиты);
	СформироватьПроводкиВключениеНДСВСтоимость(ДанныеПроводок.ПрочиеЦенности, Движения, Отказ);
	СформироватьПроводкиВключениеНДСВСтоимостьОСиНМАРаспределениеНДС(ДанныеПроводок.ОСиНМА, Движения, Отказ);
	
	//Корректировка записей регистров по ОС
	ТаблицыДвижений = ПодготовитьТаблицыДвиженийПоИзменениюСтоимостиОС(ДанныеПроводок.ОСиНМА, Реквизиты);
	СформироватьДвиженияПоИзменениюСтоимостиОС(ТаблицыДвижений, Реквизиты, Движения, Отказ);
	
	//Корректировка записей регистров по НМА
	ТаблицыДвижений = ПодготовитьТаблицыДвиженийПоИзменениюСтоимостиНМА(ДанныеПроводок.ОСиНМА, Реквизиты);
	СформироватьДвиженияПоИзменениюСтоимостиНМА(ТаблицыДвижений, Реквизиты, Движения, Отказ);
		
	//Движения по НДСПредъявленный
	ДанныеДвижений = ПодготовитьДанныеДвиженийНДСПредъявленныйРаспределениеНДС(ПартииНДС, Реквизиты);
	СформироватьДвиженияНДСПредъявленный(ДанныеДвижений, Движения, Отказ);
	
	//Движения НДСРаздельныйУчет
	ДанныеДвижений = ПодготовитьДанныеДвиженийНДСРаздельныйУчетВыбытиеЦенностей(Параметры.РаспределяемыйНДС);
	СформироватьДвиженияНДСРаздельныйУчетВыбытиеЦенностей(ДанныеДвижений, Движения, Отказ);
	
	ДанныеДвижений = ПодготовитьДанныеДвиженийНДСРаздельныйУчетПоступлениеЦенностей(Параметры.РаспределяемыйНДС, Реквизиты);
	СформироватьДвиженияНДСРаздельныйУчетПоступлениеЦенностей(ДанныеДвижений, Движения, Отказ);
	
	//Распределение по документам реализации со ставкой 0%
	Если Реквизиты.ВыручкаНДС0 > 0 Тогда
		
		СчетаФактурыПоДаннымРаспределенияНДС = ПодготовитьДанныеДвиженийНДСПредъявленныйРеализация0ВыбытиеТоваров(
			Параметры.РаспределяемыйНДС);
		
		Если НЕ Реквизиты.ОСиНМА Тогда
			ОчиститьДвиженияНДСПредъявленныйРеализация0(Движения, Отказ);
			
			СчетаФактурыПоДаннымНДСПредъявленныйРеализация0 = ПодготовитьСчетаФактурыПоДаннымНДСПредъявленныйРеализация0(Реквизиты);
			СформироватьДвиженияНДСПредъявленныйРеализация0ПоступлениеЦенностей(
				СчетаФактурыПоДаннымНДСПредъявленныйРеализация0, Движения, Отказ, Истина);	
			
			ДанныеДвижений = ПодготовитьДанныеДвиженийНДСПредъявленныйРеализация0РаспределениеНДС(
				Реквизиты, СчетаФактурыПоДаннымРаспределенияНДС, СчетаФактурыПоДаннымНДСПредъявленныйРеализация0);
			СформироватьДвиженияНДСПредъявленныйРеализация0ПоступлениеЦенностей(
				ДанныеДвижений, Движения, Отказ);
		Иначе
			СформироватьДвиженияНДСПредъявленныйРеализация0ПоступлениеЦенностей(
				СчетаФактурыПоДаннымРаспределенияНДС, Движения, Отказ);	
		КонецЕсли;

	КонецЕсли;
	
	Если НЕ Реквизиты.ОСиНМА Тогда
		СформирватьДвиженияБазаРаспределенияНДС(Реквизиты);
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьПараметрыРаспределениеНДС(ТаблицаРеквизиты, ТаблицаРаспределяемыйНДС)

	Параметры = Новый Структура;

	// Реквизиты шапки документа:
	ОбязательныеКолонки = ""

	+ "Регистратор,"
	+ "Номер,"
	+ "Период,"
	+ "НачалоПериода,"
	+ "КонецПериода,"
	+ "Организация,"
	+ "РаздельныйУчетНДСНаСчете19,"
	+ "ВыручкаЕНВД,"
	+ "ВыручкаБезНДС,"
	+ "ВыручкаНДС0,"
	+ "ВыручкаНДС,"
	+ "СобытиеОС"
	;

    Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, ОбязательныеКолонки));

	Реквизиты = Параметры.Реквизиты[0];
	
	Параметры.Реквизиты.Колонки.Добавить("ОСиНМА", Новый ОписаниеТипов("Булево"));
	Параметры.Реквизиты.ЗаполнитьЗначения(
		КонецМесяца(Реквизиты.Период) <> КонецКвартала(Реквизиты.Период), "ОСиНМА");
		
	ОбязательныеКолонки = ""

	+ "СчетФактура,"
	+ "Поставщик,"
	+ "СуммаБезНДС,"
	+ "НДС,"
	+ "СуммаБезНДСПринимаетсяКВычету,"
	+ "НДСПринимаетсяКВычету,"
	+ "СуммаБезНДСУчитываетсяВCтоимости,"
	+ "НДСУчитываетсяВCтоимости,"
	+ "СуммаБезНДСДляОперацийПо0,"
	+ "НДСДляОперацийПо0,"
	+ "ВидЦенности,"
	+ "СчетУчетаНДС,"
	+ "СтавкаНДС,"
	+ "Партия,"
	+ "СчетЗатрат,"
	+ "Подразделение,"
	+ "Субконто1,"
	+ "Субконто2,"
	+ "Субконто3,"
	+ "ИсходноеСубконто1,"
	+ "ИсходноеСубконто2,"
	+ "ИсходноеСубконто3,"
	+ "Количество,"
	+ "СпособУчетаНДС,"
	+ "НовыйСпособУчетаНДС,"
	+ "Модернизация"
	;
	
	Параметры.Вставить("РаспределяемыйНДС", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРаспределяемыйНДС, ОбязательныеКолонки));

	Параметры.РаспределяемыйНДС.Свернуть(
		"СчетФактура,Поставщик,ВидЦенности,СчетУчетаНДС,СтавкаНДС,Партия,
		|СчетЗатрат,Подразделение,Субконто1,Субконто2,Субконто3,
		|ИсходноеСубконто1,ИсходноеСубконто2,ИсходноеСубконто3,СпособУчетаНДС,НовыйСпособУчетаНДС,Модернизация",
		"СуммаБезНДС,НДС,СуммаБезНДСПринимаетсяКВычету,НДСПринимаетсяКВычету,
		|СуммаБезНДСУчитываетсяВCтоимости,НДСУчитываетсяВCтоимости,
		|СуммаБезНДСДляОперацийПо0,НДСДляОперацийПо0,Количество");	
		
	Параметры.РаспределяемыйНДС.Колонки.Добавить("ДатаСобытия",
		Новый ОписаниеТипов("Дата"));
	Параметры.РаспределяемыйНДС.Колонки.Добавить("Период",
		Новый ОписаниеТипов("Дата"));
	Параметры.РаспределяемыйНДС.Колонки.Добавить("Организация",
		Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Параметры.РаспределяемыйНДС.Колонки.Добавить("СпособУчетаНДСИзменился",
		Новый ОписаниеТипов("Булево"));
	Параметры.РаспределяемыйНДС.Колонки.Добавить("Регистратор",
		Документы.ТипВсеСсылки());
	
	Параметры.РаспределяемыйНДС.ЗаполнитьЗначения(Реквизиты.Период, "Период,ДатаСобытия");
	Параметры.РаспределяемыйНДС.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");
	Параметры.РаспределяемыйНДС.ЗаполнитьЗначения(Истина, "СпособУчетаНДСИзменился");
	Параметры.РаспределяемыйНДС.ЗаполнитьЗначения(Реквизиты.Регистратор, "Регистратор");
	
	Возврат Параметры;

КонецФункции

Функция ПодготовитьДанныеДвиженийНДСРаздельныйУчетВыбытиеЦенностей(ТаблицаРаспределяемыйНДС)
	
	ДанныеДвиженийНДСРаздельныйУчет = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("НДСРаздельныйУчет");		
		
	Для Каждого СтрокаТаблицы Из ТаблицаРаспределяемыйНДС Цикл
		
		НоваяСтрока = ДанныеДвиженийНДСРаздельныйУчет.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
		АналитикаУчетаЗатрат = Новый Структура("Организация,СчетЗатрат,Подразделение,Субконто1,Субконто2,Субконто3");
		ЗаполнитьЗначенияСвойств(АналитикаУчетаЗатрат, СтрокаТаблицы, "Организация,СчетЗатрат,Подразделение");
		АналитикаУчетаЗатрат.Субконто1 = СтрокаТаблицы.ИсходноеСубконто1;
		АналитикаУчетаЗатрат.Субконто2 = СтрокаТаблицы.ИсходноеСубконто2;
		АналитикаУчетаЗатрат.Субконто3 = СтрокаТаблицы.ИсходноеСубконто3;
		
		НоваяСтрока.АналитикаУчетаЗатрат = Справочники.КлючиАналитикиУчетаЗатрат.КлючиАналитикиУчетаЗатратДокумента(АналитикаУчетаЗатрат);
		НоваяСтрока.АналитикаУчетаНДС = Справочники.КлючиАналитикиУчетаНДС.КлючиАналитикиУчетаНДСДокумента(СтрокаТаблицы);
		
	КонецЦикла;
	
	ДанныеДвиженийНДСРаздельныйУчет.Свернуть(
		"Период,Организация,АналитикаУчетаЗатрат,АналитикаУчетаНДС,Партия,СпособУчетаНДС",
		"Количество,СуммаБезНДС,НДС");
	
	Возврат ДанныеДвиженийНДСРаздельныйУчет;
	
КонецФункции

Функция ПодготовитьДанныеПроводокРаспределениеНДСНаСчете19(ПартииНДС)
	
	ДанныеПроводок = ПартииНДС.СкопироватьКолонки("СчетУчетаНДС,Поставщик,СчетФактура,НовыйСпособУчетаНДС,НДС");
		
	Для Каждого СтрокаТаблицы Из ПартииНДС Цикл
		
		Если НЕ СтрокаТаблицы.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету
			  И СтрокаТаблицы.НДСПринимаетсяКВычету <> 0 Тогда
			
			НоваяСтрока = ДанныеПроводок.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.НДС = СтрокаТаблицы.НДСПринимаетсяКВычету;
			НоваяСтрока.НовыйСпособУчетаНДС = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету;
			
		КонецЕсли;
			
		Если НЕ СтрокаТаблицы.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.УчитываетсяВCтоимости
			  И СтрокаТаблицы.НДСУчитываетсяВCтоимости <> 0 Тогда
			
			НоваяСтрока = ДанныеПроводок.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.НДС = СтрокаТаблицы.НДСУчитываетсяВCтоимости;
			НоваяСтрока.НовыйСпособУчетаНДС = Перечисления.СпособыУчетаНДС.УчитываетсяВCтоимости;
			
		КонецЕсли;
		
		Если НЕ СтрокаТаблицы.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ДляОперацийПо0
			  И СтрокаТаблицы.НДСДляОперацийПо0 <> 0 Тогда
			
			НоваяСтрока = ДанныеПроводок.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.НДС = СтрокаТаблицы.НДСДляОперацийПо0;
			НоваяСтрока.НовыйСпособУчетаНДС = Перечисления.СпособыУчетаНДС.ДляОперацийПо0;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеПроводок.Колонки.Добавить("Содержание",
		Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150)));
	ДанныеПроводок.ЗаполнитьЗначения(НСтр("ru = 'Распределение НДС'"), "Содержание");	
	
	ДанныеПроводок.Колонки.Добавить("СпособУчетаНДС",
		Новый ОписаниеТипов("ПеречислениеСсылка.СпособыУчетаНДС"));
	ДанныеПроводок.ЗаполнитьЗначения(Перечисления.СпособыУчетаНДС.Распределяется, "СпособУчетаНДС");	
	
	ДанныеПроводок.Свернуть("
		|СчетУчетаНДС,Поставщик,СчетФактура,СпособУчетаНДС,
		|Содержание,НовыйСпособУчетаНДС",
		"НДС");
	
	Возврат ДанныеПроводок;
	
КонецФункции

Функция ПодготовитьДанныеПроводокВключениеВСтоимостьРаспределениеНДС(ПартииНДС, Реквизиты)
	
	ДанныеПроводокОСиНМА = ПартииНДС.СкопироватьКолонки("
		|Организация,Период,
		|СчетЗатрат,Подразделение,Субконто1,Субконто2,Субконто3,
		|СчетУчетаНДС,СчетФактура,Поставщик,
		|НДС,Модернизация");
		
	ДанныеПроводокОСиНМА.Колонки.Добавить("Содержание",
		Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150)));
	ДанныеПроводокОСиНМА.Колонки.Добавить("НовыйСпособУчетаНДС",
		Новый ОписаниеТипов("ПеречислениеСсылка.СпособыУчетаНДС"));
		
	ДанныеПроводокПрочиеЦенности = ДанныеПроводокОСиНМА.СкопироватьКолонки();
	
	ДанныеПроводокОСиНМА.Колонки.Добавить("ЭтоОС",	Новый ОписаниеТипов("Булево"));
	ДанныеПроводокОСиНМА.Колонки.Добавить("ЭтоНМА", Новый ОписаниеТипов("Булево"));
	
	СчетаУчетаОС = СчетаУчетаОС();
	СчетаУчетаНМА = СчетаУчетаНМА();
		
	Для Каждого СтрокаТаблицы Из ПартииНДС Цикл
		
		Если СтрокаТаблицы.НДСУчитываетсяВCтоимости = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СчетаУчетаОС.Найти(СтрокаТаблицы.СчетЗатрат) <> Неопределено Тогда
			НоваяСтрока = ДанныеПроводокОСиНМА.Добавить();
	        НоваяСтрока.ЭтоОС = Истина;
		ИначеЕсли СчетаУчетаНМА.Найти(СтрокаТаблицы.СчетЗатрат) <> Неопределено Тогда
			НоваяСтрока = ДанныеПроводокОСиНМА.Добавить();
	        НоваяСтрока.ЭтоНМА = Истина;
		Иначе
			НоваяСтрока = ДанныеПроводокПрочиеЦенности.Добавить();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		НоваяСтрока.НДС = СтрокаТаблицы.НДСУчитываетсяВCтоимости;
		НоваяСтрока.Содержание = НСтр("ru = 'НДС включен в стоимость ценностей'");
		НоваяСтрока.НовыйСпособУчетаНДС = Перечисления.СпособыУчетаНДС.УчитываетсяВCтоимости;
		
	КонецЦикла;
	
	Если ДанныеПроводокОСиНМА.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДанныеПроводокОСиНМА", ДанныеПроводокОСиНМА);
		Запрос.УстановитьПараметр("НачалоПериода", Реквизиты.НачалоПериода);
		Запрос.УстановитьПараметр("КонецПериода", Реквизиты.КонецПериода);
		Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеПроводокОСиНМА.СчетЗатрат КАК СчетДт,
		|	ДанныеПроводокОСиНМА.Субконто1 КАК СубконтоДт1
		|ПОМЕСТИТЬ ДанныеПроводокОСиНМА
		|ИЗ
		|	&ДанныеПроводокОСиНМА КАК ДанныеПроводокОСиНМА
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СчетДт,
		|	СубконтоДт1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОборотыДтКт.СчетДт,
		|	ХозрасчетныйОборотыДтКт.СубконтоДт1,
		|	ХозрасчетныйОборотыДтКт.СчетКт,
		|	ХозрасчетныйОборотыДтКт.СубконтоКт1,
		|	ХозрасчетныйОборотыДтКт.СубконтоКт2,
		|	ХозрасчетныйОборотыДтКт.СубконтоКт3
		|ПОМЕСТИТЬ ОборотыДтКт
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			СчетДт В
		|				(ВЫБРАТЬ
		|					ДанныеПроводокОСиНМА.СчетДт
		|				ИЗ
		|					ДанныеПроводокОСиНМА),
		|			,
		|			,
		|			,
		|			Организация = &Организация
		|				И СубконтоДт1 В
		|					(ВЫБРАТЬ
		|						ДанныеПроводокОСиНМА.СубконтоДт1
		|					ИЗ
		|						ДанныеПроводокОСиНМА)) КАК ХозрасчетныйОборотыДтКт
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ХозрасчетныйОборотыДтКт.СчетДт,
		|	ХозрасчетныйОборотыДтКт.СубконтоДт1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеПроводокОСиНМА.СчетДт КАК СчетЗатрат,
		|	ДанныеПроводокОСиНМА.СубконтоДт1 КАК Субконто1,
		|	ОборотыДтКт.СчетКт КАК КорСчетЗатрат,
		|	ОборотыДтКт.СубконтоКт1 КАК КорСубконто1,
		|	ОборотыДтКт.СубконтоКт2 КАК КорСубконто2,
		|	ОборотыДтКт.СубконтоКт3 КАК КорСубконто3
		|ИЗ
		|	ДанныеПроводокОСиНМА КАК ДанныеПроводокОСиНМА
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОборотыДтКт КАК ОборотыДтКт
		|		ПО ДанныеПроводокОСиНМА.СчетДт = ОборотыДтКт.СчетДт
		|			И ДанныеПроводокОСиНМА.СубконтоДт1 = ОборотыДтКт.СубконтоДт1";

		
		ТаблицаКорАналитикиУчета = Запрос.Выполнить().Выгрузить();
		ТаблицаКорАналитикиУчета.Индексы.Добавить("СчетЗатрат,Субконто1");
		
		ДанныеПроводокОСиНМА.Колонки.Добавить("КорСчетЗатрат");
		ДанныеПроводокОСиНМА.Колонки.Добавить("КорСубконто1");
		ДанныеПроводокОСиНМА.Колонки.Добавить("КорСубконто2");
		ДанныеПроводокОСиНМА.Колонки.Добавить("КорСубконто3");
		ДанныеПроводокОСиНМА.Колонки.Добавить("ЕстьКорАналитикаУчета", Новый ОписаниеТипов("Булево"));
		
		Отбор = Новый Структура("СчетЗатрат,Субконто1");
		
		Для Каждого СтрокаТаблицы Из ДанныеПроводокОСиНМА Цикл
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаТаблицы);
			КорАналитикаУчета = ТаблицаКорАналитикиУчета.НайтиСтроки(Отбор);
			Если КорАналитикаУчета.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, КорАналитикаУчета[0], ,"СчетЗатрат,Субконто1");
				СтрокаТаблицы.ЕстьКорАналитикаУчета = Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ДанныеПроводок = Новый Структура("ОСиНМА,ПрочиеЦенности", ДанныеПроводокОСиНМА, ДанныеПроводокПрочиеЦенности);
	
	Возврат ДанныеПроводок;
	
КонецФункции

Функция ПодготовитьДанныеДвиженийНДСПредъявленныйРаспределениеНДС(ПартииНДС, Реквизиты)
	
	ДанныеДвижений = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("НДСПредъявленный");
	
	Для Каждого СтрокаТаблицы Из ПартииНДС Цикл
		
		Если СтрокаТаблицы.НДСПринимаетсяКВычету = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ДанныеДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
		НоваяСтрока.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСПринимаетсяКВычету;
		НоваяСтрока.НДС = СтрокаТаблицы.НДСПринимаетсяКВычету;
		
	КонецЦикла;
	
	// Получение договоров по счету-фактуре
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("СчетаФактуры", 
		ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(
		ДанныеДвижений.ВыгрузитьКолонку("СчетФактура")));
	Запрос.УстановитьПараметр("ПустойДоговор", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСПредъявленный.СчетФактура,
	|	НДСПредъявленный.ДоговорКонтрагента
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный КАК НДСПредъявленный
	|ГДЕ
	|	НДСПредъявленный.Организация = &Организация
	|	И НДСПредъявленный.СчетФактура В(&СчетаФактуры)
	|	И НДСПредъявленный.ДоговорКонтрагента <> &ПустойДоговор";
	
	ДоговорыПоСчетуФактуре = Запрос.Выполнить().Выгрузить();
	ДоговорыПоСчетуФактуре.Индексы.Добавить("СчетФактура");
	
	Для Каждого Движение Из ДанныеДвижений Цикл
		
		НайденнаяСтрока = ДоговорыПоСчетуФактуре.Найти(Движение.СчетФактура,"СчетФактура");
		Если НайденнаяСтрока <> Неопределено Тогда
			Движение.ДоговорКонтрагента = НайденнаяСтрока.ДоговорКонтрагента;
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеДвижений.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.НДСРаспределен, "Событие");
	
	ДанныеДвижений.Свернуть("Период,Организация,СчетФактура,ВидЦенности,
							|СтавкаНДС,СчетУчетаНДС,Поставщик,ДатаОплаты,Событие,
							|ДоговорКонтрагента,ИсправленныйСчетФактура,ДатаСобытия",
							"СуммаБезНДС,НДС");
							
	Возврат ДанныеДвижений;
	
КонецФункции

Функция ПодготовитьСчетаФактурыПоДаннымНДСПредъявленныйРеализация0(Реквизиты)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Реквизиты.Организация);
	Запрос.УстановитьПараметр("ГраницаОстатков",  Новый Граница(Реквизиты.КонецПериода, ВидГраницы.Включая));
	          
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НДСПредъявленныйРеализация0Остатки.Организация КАК Организация,
	|	НДСПредъявленныйРеализация0Остатки.СчетФактура КАК СчетФактура,
	|	НДСПредъявленныйРеализация0Остатки.Состояние КАК Состояние,
	|	НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки КАК ДокументОтгрузки,
	|	НДСПредъявленныйРеализация0Остатки.ВидЦенности КАК ВидЦенности,
	|	НДСПредъявленныйРеализация0Остатки.СтавкаНДС КАК СтавкаНДС,
	|	НДСПредъявленныйРеализация0Остатки.СчетУчетаНДС КАК СчетУчетаНДС,
	|	НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	НДСПредъявленныйРеализация0Остатки.НДСОстаток КАК НДС
	|ИЗ
	|	РегистрНакопления.НДСПредъявленныйРеализация0.Остатки(
	|			&ГраницаОстатков,
	|			Организация = &Организация
	|				И ДокументОтгрузки = НЕОПРЕДЕЛЕНО) КАК НДСПредъявленныйРеализация0Остатки
	|ГДЕ
	|	НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток + НДСПредъявленныйРеализация0Остатки.НДСОстаток > 0";
	
	Результат = Запрос.Выполнить();
	
	СчетаФактурыПоДаннымНДСПредъявленныйРеализация0 = Результат.Выгрузить();
	СчетаФактурыПоДаннымНДСПредъявленныйРеализация0.Колонки.Добавить("Период",
		Новый ОписаниеТипов("Дата"));
	СчетаФактурыПоДаннымНДСПредъявленныйРеализация0.Колонки.Добавить("ДатаСобытия",
		Новый ОписаниеТипов("Дата"));
	СчетаФактурыПоДаннымНДСПредъявленныйРеализация0.Колонки.Добавить("Событие",
		Новый ОписаниеТипов("ПеречислениеСсылка.СобытияПоНДСПокупки"));
	
	СчетаФактурыПоДаннымНДСПредъявленныйРеализация0.ЗаполнитьЗначения(
		Реквизиты.Период, "Период,ДатаСобытия");
	СчетаФактурыПоДаннымНДСПредъявленныйРеализация0.ЗаполнитьЗначения(
		Перечисления.СобытияПоНДСПокупки.ПредполагаетсяСтавка0, "Событие");
	
	Возврат СчетаФактурыПоДаннымНДСПредъявленныйРеализация0;
	
КонецФункции

Функция ПодготовитьДанныеДвиженийНДСПредъявленныйРеализация0РаспределениеНДС(
	Реквизиты, СчетаФактурыПоДаннымРаспределенияНДС, СчетаФактурыПоДаннымНДСПредъявленныйРеализация0)
	
	СчетаФактурыДляРаспределения = СчетаФактурыПоДаннымРаспределенияНДС.Скопировать();
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(
		СчетаФактурыПоДаннымНДСПредъявленныйРеализация0, СчетаФактурыДляРаспределения);
	
	ДанныеДвижений = СчетаФактурыДляРаспределения.СкопироватьКолонки();
	
	Если СчетаФактурыДляРаспределения.Количество() = 0 Тогда
		Возврат ДанныеДвижений;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация",   Реквизиты.Организация);
	Запрос.УстановитьПараметр("НачалоПериода", Реквизиты.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  Реквизиты.КонецПериода);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	НДСРеализация0Обороты.СчетФактура КАК ДокументОтгрузки,
	|	СУММА(НДСРеализация0Обороты.СуммаБезНДСПриход + НДСРеализация0Обороты.НДСПриход) КАК СуммаПриход
	|ПОМЕСТИТЬ ТаблицаДокументыОтгрузки
	|ИЗ
	|	РегистрНакопления.НДСРеализация0.Обороты(НАЧАЛОПЕРИОДА(&НачалоПериода, ДЕНЬ), КОНЕЦПЕРИОДА(&КонецПериода, ДЕНЬ), Период, Организация = &Организация) КАК НДСРеализация0Обороты
	|ГДЕ
	|	НДСРеализация0Обороты.СуммаБезНДСПриход + НДСРеализация0Обороты.НДСПриход > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСРеализация0Обороты.СчетФактура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОтгрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументыОтгрузки.ДокументОтгрузки,
	|	ТаблицаДокументыОтгрузки.СуммаПриход
	|ИЗ
	|	ТаблицаДокументыОтгрузки КАК ТаблицаДокументыОтгрузки";

	// Определим реализацию по ставке 0% за налоговый период
	БазоваяТаблицаРаспределения = Запрос.Выполнить().Выгрузить();

	Если БазоваяТаблицаРаспределения.Количество() > 0 Тогда

		Запрос.УстановитьПараметр("МоментДокумента",
			Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Включая));
		Запрос.УстановитьПараметр("МоментВремени", 
			Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокументыОтгрузки.ДокументОтгрузки КАК ДокументОтгрузки,
		|	ТаблицаДокументыОтгрузки.СуммаПриход КАК СуммаПриход
		|ПОМЕСТИТЬ СписокДокументовОтгрузки
		|ИЗ
		|	ТаблицаДокументыОтгрузки КАК ТаблицаДокументыОтгрузки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДокументОтгрузки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НДСРеализация0Остатки.СчетФактура КАК ДокументОтгрузки,
		|	НДСРеализация0Остатки.Состояние,
		|	СУММА(НДСРеализация0Остатки.СуммаБезНДСОстаток + НДСРеализация0Остатки.НДСОстаток) КАК СуммаПриход
		|ПОМЕСТИТЬ НеподтвержденныеРеализации
		|ИЗ
		|	РегистрНакопления.НДСРеализация0.Остатки(
		|			&МоментДокумента,
		|			Организация = &Организация
		|				И СчетФактура В
		|					(ВЫБРАТЬ
		|						СписокДокументовОтгрузки.ДокументОтгрузки
		|					ИЗ
		|						СписокДокументовОтгрузки)) КАК НДСРеализация0Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСРеализация0Остатки.СчетФактура,
		|	НДСРеализация0Остатки.Состояние
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДокументОтгрузки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НДСПредъявленныйРеализация0.Состояние КАК Состояние,
		|	НДСПредъявленныйРеализация0.ДокументОтгрузки КАК ДокументОтгрузки,
		|	СписокДокументовОтгрузки.СуммаПриход КАК СуммаПриход
		|ИЗ
		|	РегистрНакопления.НДСПредъявленныйРеализация0.Остатки(
		|			&МоментВремени,
		|			Организация = &Организация
		|				И НЕ СчетФактура В
		|						(ВЫБРАТЬ
		|							НеподтвержденныеРеализации.ДокументОтгрузки
		|						ИЗ
		|							НеподтвержденныеРеализации)) КАК НДСПредъявленныйРеализация0
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокДокументовОтгрузки КАК СписокДокументовОтгрузки
		|		ПО (СписокДокументовОтгрузки.ДокументОтгрузки = НДСПредъявленныйРеализация0.ДокументОтгрузки)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НеподтвержденныеРеализации.Состояние,
		|	НеподтвержденныеРеализации.ДокументОтгрузки,
		|	НеподтвержденныеРеализации.СуммаПриход
		|ИЗ
		|	НеподтвержденныеРеализации КАК НеподтвержденныеРеализации";

		ТаблицаТекущихСостояний = Запрос.Выполнить().Выгрузить();
		ТаблицаРаспределения = УчетНДС.СформироватьКорректирующиеЗаписи(БазоваяТаблицаРаспределения, ТаблицаТекущихСостояний,
			Новый Структура("СуммаПриход"), , , , Истина);
		ТаблицаРаспределения.Индексы.Добавить("Состояние");
		СтрокиБезСостояния =  ТаблицаРаспределения.НайтиСтроки(Новый Структура("Состояние", Неопределено));
		
		Для каждого Строка Из СтрокиБезСостояния Цикл
			Строка.Состояние = Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0;
		КонецЦикла;

	Иначе
		ТаблицаРаспределения = БазоваяТаблицаРаспределения.Скопировать();
		ТаблицаРаспределения.Колонки.Добавить("Состояние", Новый описаниеТипов("ПеречислениеСсылка.НДССостоянияРеализация0"));
		ТаблицаРаспределения.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение, "Состояние");
	КонецЕсли;
	
	УпорядочитьТаблицуПоДатеДокумента(ТаблицаРаспределения, "ДокументОтгрузки");
	УпорядочитьТаблицуПоДатеДокумента(СчетаФактурыДляРаспределения, "СчетФактура");
	
	МассивКоэффициентов = ТаблицаРаспределения.ВыгрузитьКолонку("СуммаПриход");

	ТаблицаРаспределения.Колонки.Добавить("НДС", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	МассивСумм = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
		СчетаФактурыДляРаспределения.Итог("НДС"), МассивКоэффициентов);
	Если МассивСумм <> Неопределено Тогда
		ТаблицаРаспределения.ЗагрузитьКолонку(МассивСумм, "НДС");
	КонецЕсли;
	
	Для Каждого ДокументОтгрузки Из ТаблицаРаспределения Цикл

		НДСОсталосьПогасить = ДокументОтгрузки.НДС;
		
		Для Каждого СчетФактура Из СчетаФактурыДляРаспределения Цикл

			Если НДСОсталосьПогасить <= 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если СчетФактура.НДС <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НДС = Мин(НДСОсталосьПогасить, СчетФактура.НДС);
			СуммаБезНДС = Окр(СчетФактура.СуммаБезНДС * НДС / СчетФактура.НДС, 2);
			
			НоваяСтрока = ДанныеДвижений.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СчетФактура,, "СуммаБезНДС,НДС");
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДокументОтгрузки, "ДокументОтгрузки,Состояние");
			
			НоваяСтрока.НДС = НДС;
			НоваяСтрока.СуммаБезНДС = СуммаБезНДС;
			
			СчетФактура.НДС = СчетФактура.НДС - НДС;
			СчетФактура.СуммаБезНДС = СчетФактура.СуммаБезНДС - СуммаБезНДС;
			
			НДСОсталосьПогасить = НДСОсталосьПогасить - НДС;
			
		КонецЦикла;

	КонецЦикла;

	Для каждого СтрокаТаблицы Из ДанныеДвижений Цикл

		Если СтрокаТаблицы.Состояние = Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение Тогда
			СтрокаТаблицы.Событие = Перечисления.СобытияПоНДСПокупки.ПредполагаетсяСтавка0;
		ИначеЕсли СтрокаТаблицы.Состояние = Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0 Тогда
			СтрокаТаблицы.Событие = Перечисления.СобытияПоНДСПокупки.ПодтвержденаСтавка0;
		ИначеЕсли СтрокаТаблицы.Состояние = Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0 Тогда
			СтрокаТаблицы.Событие = Перечисления.СобытияПоНДСПокупки.НеПодтвержденаСтавка0;
		КонецЕсли;

	КонецЦикла;
	
	Возврат ДанныеДвижений;
	
КонецФункции

Процедура УпорядочитьТаблицуПоДатеДокумента(Таблица, КолонкаДокумента)
	
	Если Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокДокументов = ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(
		Таблица.ВыгрузитьКолонку(КолонкаДокумента), Истина);
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеПервичныхДокументов.Документ,
	|	ДанныеПервичныхДокументов.ДатаРегистратора
	|ИЗ
	|	РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|ГДЕ
	|	ДанныеПервичныхДокументов.Документ В(&СписокДокументов)";
	
	ТаблицаДат = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаДат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Таблица.Колонки.Добавить("ДатаДокумента", Новый ОписаниеТипов("Дата"));
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		
		НайденнаяСтрока = ТаблицаДат.Найти(СтрокаТаблицы[КолонкаДокумента], "Документ");
		Если НайденнаяСтрока <> Неопределено Тогда
			СтрокаТаблицы.ДатаДокумента = НайденнаяСтрока.ДатаРегистратора;
		КонецЕсли;
		
	КонецЦикла;
	
	Таблица.Сортировать("ДатаДокумента");
	Таблица.Колонки.Удалить("ДатаДокумента");
	
КонецПроцедуры

Функция ПодготовитьТаблицыДвиженийПоИзменениюСтоимостиОС(ДанныеПроводокОСиНМА, Реквизиты)
	
	ПустаяТаблица = Новый ТаблицаЗначений;
	ТаблицыДвижений = Новый Структура;
	
	ТаблицыДвижений.Вставить("ПервоначальныеСведенияОСБухгалтерскийУчет", ПустаяТаблица);
	ТаблицыДвижений.Вставить("ПервоначальныеСведенияОСНалоговыйУчет", ПустаяТаблица);
	ТаблицыДвижений.Вставить("ПараметрыАмортизацииОСБухгалтерскийУчет", ПустаяТаблица);
	ТаблицыДвижений.Вставить("ТаблицаАмортизационнойПремии", ПустаяТаблица);
	ТаблицыДвижений.Вставить("СобытияОСОрганизаций", ПустаяТаблица);

	ДанныеПроводок = ДанныеПроводокОСиНМА.Скопировать(Новый Структура("ЭтоОС",Истина));
	
	ТаблицаОС = ДанныеПроводок.СкопироватьКолонки("Субконто1,НДС,Модернизация");
	
	Для Каждого СтрокаПроводок Из ДанныеПроводок Цикл
		НоваяСтрока = ТаблицаОС.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПроводок);
	КонецЦикла;
	
	ТаблицаОС.Колонки.Субконто1.Имя = "ОсновноеСредство";
	ТаблицаОС.Свернуть("ОсновноеСредство,Модернизация", "НДС");
	
 	Если ТаблицаОС.Количество() = 0 Тогда
		Возврат ТаблицыДвижений;
	КонецЕсли;
	
	СубконтоКВ = Новый Массив();
	СубконтоКВ.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	СубконтоКВ.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыАмортизационнойПремии);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Реквизиты.Организация);
	Запрос.УстановитьПараметр("МоментДокумента",
									  Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("НачалоПериода", Реквизиты.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", Реквизиты.КонецПериода);
	Запрос.УстановитьПараметр("СубконтоКВ", СубконтоКВ);
	Запрос.УстановитьПараметр("ТаблицаОС",  ТаблицаОС);
									  
	Запрос.Текст = 								  
	"ВЫБРАТЬ
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОС.Модернизация КАК Модернизация,
	|	ТаблицаОС.НДС КАК Сумма
	|ПОМЕСТИТЬ ВТТаблицаОС
	|ИЗ
	|	&ТаблицаОС КАК ТаблицаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство,
	|	СчетаБухгалтерскогоУчетаОССрезПоследних.СчетУчета
	|ПОМЕСТИТЬ СчетаУчетаОС
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|			&МоментДокумента,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						ВТТаблицаОС.ОсновноеСредство
	|					ИЗ
	|						ВТТаблицаОС)) КАК СчетаБухгалтерскогоУчетаОССрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.Организация,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ИнвентарныйНомер,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.СпособПоступления,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПервоначальнаяСтоимость,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.СпособНачисленияАмортизации,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПараметрВыработки,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПорядокПогашенияСтоимости
	|ПОМЕСТИТЬ ПервоначальныеСведенияОСБухгалтерскийУчет
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|			&МоментДокумента,
	|			ОсновноеСредство В
	|				(ВЫБРАТЬ
	|					ВТТаблицаОС.ОсновноеСредство
	|				ИЗ
	|					ВТТаблицаОС
	|				ГДЕ
	|					НЕ ВТТаблицаОС.Модернизация)) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ОсновноеСредство,
	|	ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.АмортизацияДо2002,
	|	ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.АмортизацияДо2009,
	|	ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.МетодНачисленияАмортизации,
	|	ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.Организация,
	|	ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ПервоначальнаяСтоимостьНУ КАК ПервоначальнаяСтоимостьНУ,
	|	ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ПорядокВключенияСтоимостиВСоставРасходов,
	|	ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.СтоимостьДо2002,
	|	ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ФактическийСрокИспользованияДо2009
	|ПОМЕСТИТЬ ПервоначальныеСведенияОСНалоговыйУчет
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчет.СрезПоследних(
	|			&МоментДокумента,
	|			ОсновноеСредство В
	|				(ВЫБРАТЬ
	|					ВТТаблицаОС.ОсновноеСредство
	|				ИЗ
	|					ВТТаблицаОС
	|				ГДЕ
	|					НЕ ВТТаблицаОС.Модернизация)) КАК ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.Организация,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРабот,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокИспользованияДляВычисленияАмортизации,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СтоимостьДляВычисленияАмортизации КАК СтоимостьДляВычисленияАмортизации,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КоэффициентАмортизации,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КоэффициентУскорения
	|ПОМЕСТИТЬ ПараметрыАмортизацииОСБухгалтерскийУчет
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|			&МоментДокумента,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						ВТТаблицаОС.ОсновноеСредство
	|					ИЗ
	|						ВТТаблицаОС)) КАК ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Счет,
	|	ХозрасчетныйОбороты.Субконто1,
	|	ХозрасчетныйОбороты.Субконто2,
	|	ХозрасчетныйОбороты.Организация,
	|	ХозрасчетныйОбороты.Подразделение,
	|	ВЫБОР
	|		КОГДА МодернизацияОСОС.СуммаМодернизацииНУ <> 0
	|			ТОГДА ВЫРАЗИТЬ(МодернизацияОСОС.СуммаКапитальныхВложенийВключаемыхВРасходыНУ / МодернизацияОСОС.СуммаМодернизацииНУ * 100 КАК ЧИСЛО(4, 2))
	|		ИНАЧЕ 0
	|	КОНЕЦ / 100 КАК Коэффициент,
	|	ИСТИНА КАК МодернизацияОС,
	|	МодернизацияОСОС.Ссылка.СчетУчетаЗатратПоАмортизационнойПремии КАК СчетУчетаЗатратПоАмортизационнойПремии,
	|	МодернизацияОСОС.Ссылка.ПодразделениеОрганизацииПоАмортизационнойПремии КАК ПодразделениеОрганизацииПоАмортизационнойПремии,
	|	МодернизацияОСОС.Ссылка.СубконтоПоАмортизационнойПремии1 КАК СубконтоПоАмортизационнойПремии1,
	|	МодернизацияОСОС.Ссылка.СубконтоПоАмортизационнойПремии2 КАК СубконтоПоАмортизационнойПремии2,
	|	МодернизацияОСОС.Ссылка.СубконтоПоАмортизационнойПремии3 КАК СубконтоПоАмортизационнойПремии3,
	|	СчетаУчетаОС.СчетУчета,
	|	МодернизацияОСОС.Ссылка.МестонахождениеОС КАК ПодразделениеУчета
	|ПОМЕСТИТЬ АмортизационнаяПремия
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасходыНаКапитальныеВложения),
	|			&СубконтоКВ,
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						ВТТаблицаОС.ОсновноеСредство
	|					ИЗ
	|						ВТТаблицаОС
	|					ГДЕ
	|						ВТТаблицаОС.Модернизация)
	|				И Субконто2 ССЫЛКА Документ.МодернизацияОС,
	|			,
	|			) КАК ХозрасчетныйОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МодернизацияОС.ОС КАК МодернизацияОСОС
	|		ПО ХозрасчетныйОбороты.Субконто1 = МодернизацияОСОС.ОсновноеСредство
	|			И ХозрасчетныйОбороты.Субконто2 = МодернизацияОСОС.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаУчетаОС КАК СчетаУчетаОС
	|		ПО ХозрасчетныйОбороты.Субконто1 = СчетаУчетаОС.ОсновноеСредство
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Счет,
	|	ХозрасчетныйОбороты.Субконто1,
	|	ХозрасчетныйОбороты.Субконто2,
	|	ХозрасчетныйОбороты.Организация,
	|	ХозрасчетныйОбороты.Подразделение,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Документ.ПринятиеКУчетуОС).ПорядокВключенияСтоимостиВСоставРасходовНУ = ЗНАЧЕНИЕ(Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации)
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Документ.ПринятиеКУчетуОС).ПроцентКапитальныхВложенийВключаемыхВРасходыНУ
	|		ИНАЧЕ 0
	|	КОНЕЦ / 100,
	|	ЛОЖЬ,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасходыНаКапитальныеВложения),
	|			&СубконтоКВ,
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						ВТТаблицаОС.ОсновноеСредство
	|					ИЗ
	|						ВТТаблицаОС
	|					ГДЕ
	|						НЕ ВТТаблицаОС.Модернизация)
	|				И Субконто2 ССЫЛКА Документ.ПринятиеКУчетуОС,
	|			,
	|			) КАК ХозрасчетныйОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПервоначальныеСведенияОСБухгалтерскийУчет.ОсновноеСредство,
	|	ПервоначальныеСведенияОСБухгалтерскийУчет.Организация,
	|	ПервоначальныеСведенияОСБухгалтерскийУчет.ИнвентарныйНомер,
	|	ПервоначальныеСведенияОСБухгалтерскийУчет.СпособПоступления,
	|	ПервоначальныеСведенияОСБухгалтерскийУчет.ПервоначальнаяСтоимость + ВТТаблицаОС.Сумма КАК ПервоначальнаяСтоимость,
	|	ПервоначальныеСведенияОСБухгалтерскийУчет.СпособНачисленияАмортизации,
	|	ПервоначальныеСведенияОСБухгалтерскийУчет.ПараметрВыработки,
	|	ПервоначальныеСведенияОСБухгалтерскийУчет.ПорядокПогашенияСтоимости
	|ИЗ
	|	ПервоначальныеСведенияОСБухгалтерскийУчет КАК ПервоначальныеСведенияОСБухгалтерскийУчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТаблицаОС КАК ВТТаблицаОС
	|		ПО ПервоначальныеСведенияОСБухгалтерскийУчет.ОсновноеСредство = ВТТаблицаОС.ОсновноеСредство
	|			И (НЕ ВТТаблицаОС.Модернизация)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПервоначальныеСведенияОСНалоговыйУчет.ОсновноеСредство,
	|	ПервоначальныеСведенияОСНалоговыйУчет.АмортизацияДо2002,
	|	ПервоначальныеСведенияОСНалоговыйУчет.АмортизацияДо2009,
	|	ПервоначальныеСведенияОСНалоговыйУчет.МетодНачисленияАмортизации,
	|	ПервоначальныеСведенияОСНалоговыйУчет.Организация,
	|	ПервоначальныеСведенияОСНалоговыйУчет.ПервоначальнаяСтоимостьНУ + ВТТаблицаОС.Сумма КАК ПервоначальнаяСтоимостьНУ,
	|	ПервоначальныеСведенияОСНалоговыйУчет.ПорядокВключенияСтоимостиВСоставРасходов,
	|	ПервоначальныеСведенияОСНалоговыйУчет.СтоимостьДо2002,
	|	ПервоначальныеСведенияОСНалоговыйУчет.ФактическийСрокИспользованияДо2009
	|ИЗ
	|	ПервоначальныеСведенияОСНалоговыйУчет КАК ПервоначальныеСведенияОСНалоговыйУчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТаблицаОС КАК ВТТаблицаОС
	|		ПО ПервоначальныеСведенияОСНалоговыйУчет.ОсновноеСредство = ВТТаблицаОС.ОсновноеСредство
	|			И (НЕ ВТТаблицаОС.Модернизация)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыАмортизацииОСБухгалтерскийУчет.ОсновноеСредство,
	|	ПараметрыАмортизацииОСБухгалтерскийУчет.Организация,
	|	ПараметрыАмортизацииОСБухгалтерскийУчет.СрокПолезногоИспользования,
	|	ПараметрыАмортизацииОСБухгалтерскийУчет.ОбъемПродукцииРабот,
	|	ПараметрыАмортизацииОСБухгалтерскийУчет.СрокИспользованияДляВычисленияАмортизации,
	|	ПараметрыАмортизацииОСБухгалтерскийУчет.СтоимостьДляВычисленияАмортизации + ЕСТЬNULL(ВТТаблицаОС.Сумма, 0) + ЕСТЬNULL(ВТТаблицаОСМодернизация.Сумма, 0) КАК СтоимостьДляВычисленияАмортизации,
	|	ПараметрыАмортизацииОСБухгалтерскийУчет.ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ПараметрыАмортизацииОСБухгалтерскийУчет.КоэффициентАмортизации,
	|	ПараметрыАмортизацииОСБухгалтерскийУчет.КоэффициентУскорения
	|ИЗ
	|	ПараметрыАмортизацииОСБухгалтерскийУчет КАК ПараметрыАмортизацииОСБухгалтерскийУчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТаблицаОС КАК ВТТаблицаОС
	|		ПО ПараметрыАмортизацииОСБухгалтерскийУчет.ОсновноеСредство = ВТТаблицаОС.ОсновноеСредство
	|			И (НЕ ВТТаблицаОС.Модернизация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТаблицаОС КАК ВТТаблицаОСМодернизация
	|		ПО ПараметрыАмортизацииОСБухгалтерскийУчет.ОсновноеСредство = ВТТаблицаОСМодернизация.ОсновноеСредство
	|			И (ВТТаблицаОСМодернизация.Модернизация)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АмортизационнаяПремия.Счет,
	|	АмортизационнаяПремия.Субконто1,
	|	АмортизационнаяПремия.Субконто2,
	|	АмортизационнаяПремия.Организация,
	|	АмортизационнаяПремия.Подразделение,
	|	АмортизационнаяПремия.Коэффициент * ВТТаблицаОС.Сумма КАК СуммаНУ,
	|	АмортизационнаяПремия.МодернизацияОС,
	|	АмортизационнаяПремия.СчетУчета,
	|	АмортизационнаяПремия.ПодразделениеУчета,
	|	АмортизационнаяПремия.СчетУчетаЗатратПоАмортизационнойПремии,
	|	АмортизационнаяПремия.ПодразделениеОрганизацииПоАмортизационнойПремии,
	|	АмортизационнаяПремия.СубконтоПоАмортизационнойПремии1,
	|	АмортизационнаяПремия.СубконтоПоАмортизационнойПремии2,
	|	АмортизационнаяПремия.СубконтоПоАмортизационнойПремии3
	|ИЗ
	|	АмортизационнаяПремия КАК АмортизационнаяПремия
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТаблицаОС КАК ВТТаблицаОС
	|		ПО АмортизационнаяПремия.Субконто1 = ВТТаблицаОС.ОсновноеСредство
	|			И АмортизационнаяПремия.МодернизацияОС = ВТТаблицаОС.Модернизация";
								  
	Результат = Запрос.ВыполнитьПакет();
	
	Если Результат.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицыДвижений.ПервоначальныеСведенияОСБухгалтерскийУчет = Результат[6].Выгрузить();
	ТаблицыДвижений.ПервоначальныеСведенияОСНалоговыйУчет = Результат[7].Выгрузить();
	ТаблицыДвижений.ПараметрыАмортизацииОСБухгалтерскийУчет = Результат[8].Выгрузить();
	ТаблицыДвижений.ТаблицаАмортизационнойПремии = Результат[9].Выгрузить();
	
	ТаблицаОС.Свернуть("ОсновноеСредство", "НДС");
	
	СобытияОСОрганизаций = РегистрыСведений.СобытияОСОрганизаций.СоздатьНаборЗаписей().ВыгрузитьКолонки();
	СобытияОСОрганизаций.Колонки.Удалить("Регистратор");
	СобытияОСОрганизаций.Колонки.Удалить("Активность");
	СобытияОСОрганизаций.Колонки.Удалить("НомерСтроки");
	
	НазваниеДокумента = Реквизиты.Регистратор.Метаданные().Представление();

	Для Каждого СтрокаТаблицы Из ТаблицаОС Цикл
		
		НоваяСтрока = СобытияОСОрганизаций.Добавить();
		НоваяСтрока.Период            = Реквизиты.Период;
		НоваяСтрока.ОсновноеСредство  = СтрокаТаблицы.ОсновноеСредство;
		НоваяСтрока.Организация       = Реквизиты.Организация;
		НоваяСтрока.Событие           = Реквизиты.СобытиеОС;
		НоваяСтрока.НазваниеДокумента = НазваниеДокумента;
		НоваяСтрока.НомерДокумента    = Реквизиты.Номер;
		НоваяСтрока.СуммаЗатратБУ     = СтрокаТаблицы.НДС;
		НоваяСтрока.СуммаЗатратНУ     = СтрокаТаблицы.НДС;
		
	КонецЦикла;
	
	ТаблицыДвижений.СобытияОСОрганизаций = СобытияОСОрганизаций;
	
	Возврат ТаблицыДвижений;
	
КонецФункции

Процедура СформироватьДвиженияПоИзменениюСтоимостиОС(ТаблицыДвижений, Реквизиты, Движения, Отказ)
	
	Если ТаблицыДвижений.ПервоначальныеСведенияОСБухгалтерскийУчет.Количество() > 0 Тогда
		Для Каждого СтрокаТаблицы Из ТаблицыДвижений.ПервоначальныеСведенияОСБухгалтерскийУчет Цикл
			Движение = Движения.ПервоначальныеСведенияОСБухгалтерскийУчет.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
			ЗаполнитьЗначенияСвойств(Движение, Реквизиты, "Период");
		КонецЦикла;
		Движения.ПервоначальныеСведенияОСБухгалтерскийУчет.Записывать = Истина;	
	КонецЕсли;
	
	Если ТаблицыДвижений.ПервоначальныеСведенияОСНалоговыйУчет.Количество() > 0 Тогда
		Для Каждого СтрокаТаблицы Из ТаблицыДвижений.ПервоначальныеСведенияОСНалоговыйУчет Цикл
			Движение = Движения.ПервоначальныеСведенияОСНалоговыйУчет.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
			ЗаполнитьЗначенияСвойств(Движение, Реквизиты, "Период");
		КонецЦикла;
		Движения.ПервоначальныеСведенияОСНалоговыйУчет.Записывать = Истина;	
	КонецЕсли;
	
	Если ТаблицыДвижений.ПараметрыАмортизацииОСБухгалтерскийУчет.Количество() > 0 Тогда
		Для Каждого СтрокаТаблицы Из ТаблицыДвижений.ПараметрыАмортизацииОСБухгалтерскийУчет Цикл
			Движение = Движения.ПараметрыАмортизацииОСБухгалтерскийУчет.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
			ЗаполнитьЗначенияСвойств(Движение, Реквизиты, "Период");
		КонецЦикла;
		Движения.ПараметрыАмортизацииОСБухгалтерскийУчет.Записывать = Истина;	
	КонецЕсли;
	
	Если ТаблицыДвижений.ТаблицаАмортизационнойПремии.Количество() > 0 Тогда
		Для Каждого СтрокаТаблицы Из ТаблицыДвижений.ТаблицаАмортизационнойПремии Цикл
			
			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;

			Проводка.Содержание = НСтр("ru = 'Амортизационная премия'");

			Проводка.СчетДт = СтрокаТаблицы.Счет;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства",
				СтрокаТаблицы.Субконто1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыАмортизационнойПремии",
				СтрокаТаблицы.Субконто2);

			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = СтрокаТаблицы.Подразделение;
			КонецЕсли;

			Проводка.СуммаНУДт = СтрокаТаблицы.СуммаНУ;
			
			Если СтрокаТаблицы.МодернизацияОС Тогда
				
				//Спишем амортизационную премию
				Проводка = Движения.Хозрасчетный.Добавить();

				Проводка.Период      = Реквизиты.Период;
				Проводка.Организация = Реквизиты.Организация;

				Проводка.Содержание = НСтр("ru = 'Амортизационная премия'");

				Проводка.СчетКт = СтрокаТаблицы.Счет;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства",
					СтрокаТаблицы.Субконто1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыАмортизационнойПремии",
					СтрокаТаблицы.Субконто2);

				СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

				Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеКт = СтрокаТаблицы.Подразделение;
				КонецЕсли;

				Проводка.СуммаНУКт = СтрокаТаблицы.СуммаНУ;
				
				//Включим амортизационную премию в состав расходов
				Проводка = Движения.Хозрасчетный.Добавить();

				Проводка.Период      = Реквизиты.Период;
				Проводка.Организация = Реквизиты.Организация;

				Проводка.Содержание = НСтр("ru = 'Амортизационная премия'");

				Проводка.СчетДт = СтрокаТаблицы.СчетУчетаЗатратПоАмортизационнойПремии;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1,
					СтрокаТаблицы.СубконтоПоАмортизационнойПремии1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2,
					СтрокаТаблицы.СубконтоПоАмортизационнойПремии2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3,
					СтрокаТаблицы.СубконтоПоАмортизационнойПремии3);

				СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

				Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеДт = СтрокаТаблицы.ПодразделениеОрганизацииПоАмортизационнойПремии;
				КонецЕсли;

				Проводка.СуммаНУДт = СтрокаТаблицы.СуммаНУ;
				Проводка.СуммаВРДт = -СтрокаТаблицы.СуммаНУ;
				
				Проводка.СчетКт = СтрокаТаблицы.СчетУчета;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства",
					СтрокаТаблицы.Субконто1);
					
				СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
				Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеКт = СтрокаТаблицы.ПодразделениеУчета;
				КонецЕсли;
				
				Проводка.СуммаНУКт = СтрокаТаблицы.СуммаНУ;
				Проводка.СуммаВРКт = -СтрокаТаблицы.СуммаНУ;
				
			КонецЕсли;
			
		КонецЦикла;
		Движения.Хозрасчетный.Записывать = Истина;	
	КонецЕсли;

	Если ТаблицыДвижений.СобытияОСОрганизаций.Количество() > 0 Тогда
		Для Каждого СтрокаТаблицы Из ТаблицыДвижений.СобытияОСОрганизаций Цикл
			Движение = Движения.СобытияОСОрганизаций.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
		КонецЦикла;
		Движения.СобытияОСОрганизаций.Записывать = Истина;	
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьТаблицыДвиженийПоИзменениюСтоимостиНМА(ДанныеПроводокОСиНМА, Реквизиты)
	
	ПустаяТаблица = Новый ТаблицаЗначений;
	ТаблицыДвижений = Новый Структура;
	
	ТаблицыДвижений.Вставить("ПервоначальныеСведенияНМАБухгалтерскийУчет", ПустаяТаблица);
	ТаблицыДвижений.Вставить("ПервоначальныеСведенияНМАНалоговыйУчет", ПустаяТаблица);

	ДанныеПроводок = ДанныеПроводокОСиНМА.Скопировать(Новый Структура("ЭтоНМА",Истина));
	
	ТаблицаНМА = ДанныеПроводок.СкопироватьКолонки("Субконто1,НДС");
	
	Для Каждого СтрокаПроводок Из ДанныеПроводок Цикл
		НоваяСтрока = ТаблицаНМА.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПроводок);
	КонецЦикла;
	
	ТаблицаНМА.Колонки.Субконто1.Имя = "НематериальныйАктив";
	ТаблицаНМА.Свернуть("НематериальныйАктив", "НДС");
	
	Если ТаблицаНМА.Количество() = 0 Тогда
		Возврат ТаблицыДвижений;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Реквизиты.Организация);
	Запрос.УстановитьПараметр("МоментДокумента",
									  Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("ТаблицаНМА",  ТаблицаНМА);
									  
	Запрос.Текст = 								  
	"ВЫБРАТЬ
	|	ТаблицаНМА.НематериальныйАктив КАК НематериальныйАктив,
	|	ТаблицаНМА.НДС КАК Сумма
	|ПОМЕСТИТЬ ВТТаблицаНМА
	|ИЗ
	|	&ТаблицаНМА КАК ТаблицаНМА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.Организация,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.ПервоначальнаяСтоимость,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.СпособПоступления,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НачислятьАмортизацию,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.СпособНачисленияАмортизации,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.Коэффициент
	|ПОМЕСТИТЬ ПервоначальныеСведенияНМАБухгалтерскийУчет
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(
	|			&МоментДокумента,
	|			НематериальныйАктив В
	|				(ВЫБРАТЬ
	|					ВТТаблицаНМА.НематериальныйАктив
	|				ИЗ
	|					ВТТаблицаНМА)) КАК ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НематериальныйАктив,
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.АмортизацияДо2002,
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.АмортизацияДо2009,
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.ДатаПриобретения,
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.МетодНачисленияАмортизации,
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НачислятьАмортизацию,
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.Организация,
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.ПервоначальнаяСтоимостьНУ,
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.СрокПолезногоИспользования,
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.СтоимостьДо2002,
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.ФактическийСрокИспользованияДо2009
	|ПОМЕСТИТЬ ПервоначальныеСведенияНМАНалоговыйУчет
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияНМАНалоговыйУчет.СрезПоследних(
	|			&МоментДокумента,
	|			НематериальныйАктив В
	|				(ВЫБРАТЬ
	|					ВТТаблицаНМА.НематериальныйАктив
	|				ИЗ
	|					ВТТаблицаНМА)) КАК ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПервоначальныеСведенияНМАБухгалтерскийУчет.НематериальныйАктив,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчет.Организация,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчет.ПервоначальнаяСтоимость + ВТТаблицаНМА.Сумма КАК ПервоначальнаяСтоимость,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчет.СпособПоступления,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчет.НачислятьАмортизацию,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчет.СпособНачисленияАмортизации,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчет.СрокПолезногоИспользования,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчет.ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчет.Коэффициент
	|ИЗ
	|	ПервоначальныеСведенияНМАБухгалтерскийУчет КАК ПервоначальныеСведенияНМАБухгалтерскийУчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТаблицаНМА КАК ВТТаблицаНМА
	|		ПО ПервоначальныеСведенияНМАБухгалтерскийУчет.НематериальныйАктив = ВТТаблицаНМА.НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПервоначальныеСведенияНМАНалоговыйУчет.НематериальныйАктив,
	|	ПервоначальныеСведенияНМАНалоговыйУчет.АмортизацияДо2002,
	|	ПервоначальныеСведенияНМАНалоговыйУчет.АмортизацияДо2009,
	|	ПервоначальныеСведенияНМАНалоговыйУчет.ДатаПриобретения,
	|	ПервоначальныеСведенияНМАНалоговыйУчет.МетодНачисленияАмортизации,
	|	ПервоначальныеСведенияНМАНалоговыйУчет.НачислятьАмортизацию,
	|	ПервоначальныеСведенияНМАНалоговыйУчет.Организация,
	|	ПервоначальныеСведенияНМАНалоговыйУчет.ПервоначальнаяСтоимостьНУ + ВТТаблицаНМА.Сумма КАК ПервоначальнаяСтоимостьНУ,
	|	ПервоначальныеСведенияНМАНалоговыйУчет.СрокПолезногоИспользования,
	|	ПервоначальныеСведенияНМАНалоговыйУчет.СтоимостьДо2002,
	|	ПервоначальныеСведенияНМАНалоговыйУчет.ФактическийСрокИспользованияДо2009
	|ИЗ
	|	ПервоначальныеСведенияНМАНалоговыйУчет КАК ПервоначальныеСведенияНМАНалоговыйУчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТаблицаНМА КАК ВТТаблицаНМА
	|		ПО ПервоначальныеСведенияНМАНалоговыйУчет.НематериальныйАктив = ВТТаблицаНМА.НематериальныйАктив";
								  
	Результат = Запрос.ВыполнитьПакет();
	
	Если Результат.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицыДвижений.ПервоначальныеСведенияНМАБухгалтерскийУчет = Результат[3].Выгрузить();
	ТаблицыДвижений.ПервоначальныеСведенияНМАНалоговыйУчет = Результат[4].Выгрузить();
	
	Возврат ТаблицыДвижений;
	
КонецФункции

Процедура СформироватьДвиженияПоИзменениюСтоимостиНМА(ТаблицыДвижений, Реквизиты, Движения, Отказ)
	
	Если ТаблицыДвижений.ПервоначальныеСведенияНМАБухгалтерскийУчет.Количество() > 0 Тогда
		Для Каждого СтрокаТаблицы Из ТаблицыДвижений.ПервоначальныеСведенияНМАБухгалтерскийУчет Цикл
			Движение = Движения.ПервоначальныеСведенияНМАБухгалтерскийУчет.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
			ЗаполнитьЗначенияСвойств(Движение, Реквизиты, "Период");
		КонецЦикла;
		Движения.ПервоначальныеСведенияНМАБухгалтерскийУчет.Записывать = Истина;	
	КонецЕсли;
	
	Если ТаблицыДвижений.ПервоначальныеСведенияНМАНалоговыйУчет.Количество() > 0 Тогда
		Для Каждого СтрокаТаблицы Из ТаблицыДвижений.ПервоначальныеСведенияНМАНалоговыйУчет Цикл
			Движение = Движения.ПервоначальныеСведенияНМАНалоговыйУчет.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
			ЗаполнитьЗначенияСвойств(Движение, Реквизиты, "Период");
		КонецЦикла;
		Движения.ПервоначальныеСведенияНМАНалоговыйУчет.Записывать = Истина;	
	КонецЕсли;
	
КонецПроцедуры

Процедура СформирватьДвиженияБазаРаспределенияНДС(Реквизиты)
	
	МенеджерЗаписи = РегистрыСведений.БазаРаспределенияНДС.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Реквизиты);
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область ТаможенныйСоюз

Процедура СформироватьДвиженияВвозТоваровИзТаможенногоСоюза(ТаблицаТовары, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьРеквизитыВвозТоваровИзТаможенногоСоюза(ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Реквизиты.Организация, Реквизиты.Период);
	
	Если НЕ РаздельныйУчетНДСНаСчете19 Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьПараметрыВвозТоваровИзТаможенногоСоюза(Параметры, ТаблицаТовары);
	
	Если Параметры.Товары.Количество() = 0 
		ИЛИ Параметры.Товары.Итог("НДС") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДвижений = ПодготовитьДанныеДвиженийПоступлениеТоваровУслугОтПоставщика(Параметры.Товары, Неопределено, Реквизиты);
	СформироватьДвиженияПоступлениеЦенностей(ДанныеДвижений, Реквизиты, Движения, Отказ);
	
КонецПроцедуры

Функция ПодготовитьРеквизитыВвозТоваровИзТаможенногоСоюза(ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                    // <ДокументСсылка>
	+ "Период,"                         // <Дата>
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "НДСВключенВСтоимость,"           // <Булево>
	+ "УчетАгентскогоНДС,"              // <Булево>
	+ "Контрагент,"                     // <СправочникСсылка.Контрагенты>
	+ "ДоговорКонтрагента"              // <СправочникСсылка.ДоговорыКонтрагентов>
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура ПодготовитьПараметрыВвозТоваровИзТаможенногоСоюза(Параметры, ТаблицаТовары)

	// Подготовка таблицы Товары

	СписокОбязательныхКолонок = ""
	+ "Партия,"              // <ДокументСсылка> - документ поступления товаров
	+ "ВидЦенности,"         // <ПеречислениеСсылка.ВидыЦеннотсей> 
	+ "Номенклатура,"        // <СправочникСсылка.Номенклатура> - поступивший ранее товар
	+ "Склад,"               // <СправочникСсылка.Склады> - склад, на который поступил ранее товар
	+ "Подразделение,"       // Подразделение для проводок
	+ "СчетУчета,"           // <ПланСчетовСсылка.Хозрасчетный>
	+ "СчетУчетаНДС,"        // <ПланСчетовСсылка.Хозрасчетный>
	+ "СпособУчетаНДС,"      // <ПеречислениеСсылка.СпособыУчетаНДС>
	+ "СуммаБезНДС,"         // <Число,15,2> - сумма без НДС в рублях
	+ "НДС,"                 // <Число,15,2> - сумма НДС в рублях
	+ "СтавкаНДС"            // <ПеречислениеСсылка.СтавкиНДС>
	;
	Параметры.Вставить("Товары", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТовары, СписокОбязательныхКолонок));
	Реквизиты = Параметры.Реквизиты[0];
	Параметры.Товары.Колонки.Добавить("СчетФактура", Документы.ТипВсеСсылки());
	Параметры.Товары.Колонки.Добавить("Регистратор", Документы.ТипВсеСсылки());
	Параметры.Товары.ЗаполнитьЗначения(Реквизиты.Регистратор, "СчетФактура,Регистратор");
	// Для доп. расходов в регистре "НДСРаздельныйУчет" количество всегда равно нулю
	Параметры.Товары.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	Параметры.Товары.Колонки.Добавить("СтатьяЗатрат", Новый ОписаниеТипов("СправочникСсылка.СтатьиЗатрат"));
	Параметры.Товары.Колонки.Добавить("СпособСтроительства", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыСтроительства"));
	
КонецПроцедуры

#КонецОбласти

#Область КурсовыеРазницыНалоговыйАгент

Процедура СформироватьДвиженияКурсовыеРазницыНалоговыйАгент(ТаблицаРеквизитов, ТаблицаВзаиморасчетов, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыКурсовыеРазницыНалоговыйАгент(ТаблицаРеквизитов, ТаблицаВзаиморасчетов);
	Реквизиты = Параметры.Реквизиты[0];

	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Реквизиты.Организация, Реквизиты.Период);
	Если НЕ РаздельныйУчетНДСНаСчете19 Тогда
		Возврат;
	КонецЕсли;

	РеестрСчетовФактур = ПодготовитьТаблицуКурсовыеРазницыНалоговыйАгент(Реквизиты, Параметры.ТаблицаВзаиморасчетов);

	Если РеестрСчетовФактур.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	СтруктураТаблицДляДвижений = ПодготовитьТаблицыПоВидамРегистровНДС(РеестрСчетовФактур, Реквизиты);

	ДанныеПроводок = ПодготовитьДанныеПроводокКурсовыеРазницыНалоговыйАгент(РеестрСчетовФактур);
	
	// Проводки
	УчетНДС.СформироватьПроводкиПоступлениеТоваровУслугНалоговыйАгентНерезидент(ДанныеПроводок, Движения, Отказ);
	
	ДанныеПроводокВключениеВСтоимость = ПодготовитьДанныеПроводокВключениеВСтоимостьКурсовыеРазницыНалоговыйАгент(
		СтруктураТаблицДляДвижений.НДСРаздельныйУчет);
	СформироватьПроводкиВключениеНДСВСтоимость(ДанныеПроводокВключениеВСтоимость, Движения, Отказ);	
	
	// НДС предъявленный
	УчетНДС.СформироватьДвиженияНДСПредъявленныйПоступлениеТоваровУслуг(РеестрСчетовФактур, Движения, Отказ);

	ДвиженияНДСПредъявленный = ПодготовитьДанныеДвиженийНДСПредъявленныйКурсовыеРазницыНалоговыйАгент(РеестрСчетовФактур);
	СформироватьДвиженияНДСПредъявленный(ДвиженияНДСПредъявленный, Движения, Отказ, Истина);
	
	// НДС реализация 0%
	УчетНДС.СформироватьДвиженияНДСПредъявленныйРеализация0(СтруктураТаблицДляДвижений.НДСПредъявленныйРеализация0, Реквизиты, Движения, Отказ);

	// НДС раздельный учет
	СформироватьДвиженияНДСРаздельныйУчетПоступлениеЦенностей(СтруктураТаблицДляДвижений.НДСРаздельныйУчет, Движения, Отказ);
	
КонецПроцедуры

Функция ПодготовитьПараметрыКурсовыеРазницыНалоговыйАгент(ТаблицаРеквизиты, ТаблицаВзаиморасчетов)

	Параметры = Новый Структура;

	// Подготовка таблицы Реквизиты
	СписокОбязательныхКолонок = ""
	+ "Период,"                   // <Дата>
	+ "Регистратор,"              // <ДокументСсылка>
	+ "Организация";              // <СправочникСсылка.Организации>

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Подготовка таблицы взаиморасчетов:
	СписокОбязательныхКолонок = ""

	+ "ВалютаВзаиморасчетов,"
	+ "ДокументРасчетов,"
	+ "Контрагент,"
	+ "ДоговорКонтрагента,"
	+ "СуммаБУ,"
	+ "СуммаВзаиморасчетов";


	Параметры.Вставить("ТаблицаВзаиморасчетов", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВзаиморасчетов, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьТаблицуКурсовыеРазницыНалоговыйАгент(Реквизиты, ТаблицаВзаиморасчетов)

	// Отбираем взаиморасчеты по договору с исполнением обязанностей налогового агента
	ТаблицаВзаиморасчетовНалоговыйАгент = УчетНДС.ПолучитьТаблицуВзаиморасчетовНалоговыйАгент(Реквизиты, ТаблицаВзаиморасчетов);

	Если ТаблицаВзаиморасчетовНалоговыйАгент.Количество() = 0 Тогда
		Возврат ТаблицаВзаиморасчетовНалоговыйАгент;
	КонецЕсли;

	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

	РеестрСчетовФактур = ПолучитьДанныеПоКорректируемымСчетамФактурамНалоговыйАгент(Реквизиты, ТаблицаВзаиморасчетовНалоговыйАгент);

	Если РеестрСчетовФактур.Количество() = 0 Тогда
		Возврат РеестрСчетовФактур;
	КонецЕсли;

	РеестрСчетовФактур.Колонки.Добавить("Период", 	  ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	РеестрСчетовФактур.Колонки.Добавить("Содержание", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	РеестрСчетовФактур.ЗаполнитьЗначения(Реквизиты.Период, "Период");

	// Вычисляем суммовую разницу
	Для каждого СтрокаВзаиморасчетов Из ТаблицаВзаиморасчетовНалоговыйАгент Цикл

		КурсНаДатуПоступления = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
			СтрокаВзаиморасчетов.ВалютаВзаиморасчетов, СтрокаВзаиморасчетов.СчетФактура.Дата);

		СуммаБУПоКурсуПоступления = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
			СтрокаВзаиморасчетов.СуммаВзаиморасчетов, СтрокаВзаиморасчетов.ВалютаВзаиморасчетов,
			Константы.ВалютаРегламентированногоУчета.Получить(), КурсНаДатуПоступления.Курс, 1, КурсНаДатуПоступления.Кратность, 1);

		СтрокаВзаиморасчетов.СуммоваяРазница = СтрокаВзаиморасчетов.СуммаБУ - СуммаБУПоКурсуПоступления;

		НайденныеСтроки = РеестрСчетовФактур.НайтиСтроки(Новый Структура("СчетФактура", СтрокаВзаиморасчетов.СчетФактура));
		Для каждого СтрокаРеестра Из НайденныеСтроки Цикл
			СтрокаРеестра.ДоговорКонтрагента = СтрокаВзаиморасчетов.ДоговорКонтрагента;
			СтрокаРеестра.Содержание = "Корректировка НДС по договору " + СтрокаВзаиморасчетов.ДоговорКонтрагента;
		КонецЦикла;

	КонецЦикла;

	ТаблицаВзаиморасчетовНалоговыйАгент.Свернуть("СчетФактура", "СуммоваяРазница");

	РеестрСчетовФактур.Колонки.Добавить("СуммоваяРазница", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	РеестрСчетовФактур.Колонки.Добавить("СР_БезНДС", 	   ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	РеестрСчетовФактур.Колонки.Добавить("СР_НДС", 		   ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		
	РеестрСчетовФактур.ЗагрузитьКолонку(РеестрСчетовФактур.ВыгрузитьКолонку("Базис_БезНДС"), "СуммоваяРазница");

	Распределение = Новый Структура("СуммоваяРазница", "СуммоваяРазница");
	Отбор         = Новый Структура("СчетФактура", "СчетФактура");

	РеестрСчетовФактур = УчетНДС.СформироватьКорректирующиеЗаписи(ТаблицаВзаиморасчетовНалоговыйАгент, РеестрСчетовФактур, Распределение, Отбор);

	РеестрСчетовФактур.Колонки.Добавить("СР_СуммаБезНДСУчитываетсяВCтоимости",
		ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	РеестрСчетовФактур.Колонки.Добавить("СР_НДСУчитываетсяВCтоимости",
		ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	РеестрСчетовФактур.Колонки.Добавить("СР_СуммаБезНДСДляОперацийПо0",
		ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	РеестрСчетовФактур.Колонки.Добавить("СР_НДСДляОперацийПо0",
		ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	РеестрСчетовФактур.Колонки.Добавить("СР_СуммаБезНДСРаспределяется",
		ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	РеестрСчетовФактур.Колонки.Добавить("СР_НДСРаспределяется",
		ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		
	СтрокиКУдалению = Новый Массив();

	// Разделим суммовую разницу на сумму без НДС и сумму с НДС
	Для каждого СтрокаРеестра Из РеестрСчетовФактур Цикл

		Если СтрокаРеестра.СуммоваяРазница = 0 ИЛИ СтрокаРеестра.Базис_СНДС = 0 ИЛИ СтрокаРеестра.Базис_НДС = 0 Тогда
			СтрокиКУдалению.Добавить(СтрокаРеестра);
			Продолжить;
		КонецЕсли;

		СтрокаРеестра.СР_БезНДС = СтрокаРеестра.СуммоваяРазница;
		СтрокаРеестра.СР_НДС 	= УчетНДСКлиентСервер.РассчитатьСуммуНДС(СтрокаРеестра.СР_БезНДС, Ложь, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаРеестра.СтавкаНДС));

		Если СтрокаРеестра.Базис_БезНДС <> 0 Тогда 
			СтрокаРеестра.СР_СуммаБезНДСУчитываетсяВCтоимости = СтрокаРеестра.СуммаБезНДСУчитываетсяВCтоимости * СтрокаРеестра.СР_БезНДС / СтрокаРеестра.Базис_БезНДС;
			СтрокаРеестра.СР_СуммаБезНДСДляОперацийПо0 = СтрокаРеестра.СуммаБезНДСДляОперацийПо0 * СтрокаРеестра.СР_БезНДС / СтрокаРеестра.Базис_БезНДС;
			СтрокаРеестра.СР_СуммаБезНДСРаспределяется = СтрокаРеестра.СуммаБезНДСРаспределяется * СтрокаРеестра.СР_БезНДС / СтрокаРеестра.Базис_БезНДС;
		КонецЕсли;
			
		Если СтрокаРеестра.Базис_НДС <> 0 Тогда
			СтрокаРеестра.СР_НДСУчитываетсяВCтоимости = СтрокаРеестра.НДСУчитываетсяВCтоимости * СтрокаРеестра.СР_НДС / СтрокаРеестра.Базис_НДС;
			СтрокаРеестра.СР_НДСДляОперацийПо0 = СтрокаРеестра.НДСДляОперацийПо0 * СтрокаРеестра.СР_НДС / СтрокаРеестра.Базис_НДС;
			СтрокаРеестра.СР_НДСРаспределяется = СтрокаРеестра.НДСРаспределяется * СтрокаРеестра.СР_НДС / СтрокаРеестра.Базис_НДС;
		КонецЕсли;
		
	КонецЦикла;

	Если СтрокиКУдалению.Количество() > 0 Тогда
	    Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			РеестрСчетовФактур.Удалить(СтрокаКУдалению);
		КонецЦикла;
	КонецЕсли;

	РеестрСчетовФактур.Колонки.СР_НДС.Имя 	 = "НДС";
	РеестрСчетовФактур.Колонки.СР_БезНДС.Имя = "СуммаБезНДС";

	РеестрСчетовФактур.Колонки.Добавить("ДатаСобытия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	РеестрСчетовФактур.ЗаполнитьЗначения(Реквизиты.Период, "ДатаСобытия");
	
	Возврат РеестрСчетовФактур;

КонецФункции

Функция ПолучитьДанныеПоКорректируемымСчетамФактурамНалоговыйАгент(Реквизиты, ТаблицаВзаиморасчетовНалоговыйАгент)

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Организация", 		   Реквизиты.Организация);
	Запрос.УстановитьПараметр("Период",				   Реквизиты.Период);
	Запрос.УстановитьПараметр("КонецПериода",          Новый Граница(Реквизиты.Период, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Предположение0",        Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение);
	Запрос.УстановитьПараметр("ТаблицаСуммовыхРазниц", ТаблицаВзаиморасчетовНалоговыйАгент);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаСуммовыхРазниц.СчетФактура КАК СчетФактура
	|ПОМЕСТИТЬ СписокСчетовФактур
	|ИЗ
	|	&ТаблицаСуммовыхРазниц КАК ТаблицаСуммовыхРазниц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСПредъявленный.Организация,
	|	НДСПредъявленный.Поставщик,
	|	НДСПредъявленный.СчетФактура КАК СчетФактура,
	|	НДСПредъявленный.ВидЦенности КАК ВидЦенности,
	|	НДСПредъявленный.СтавкаНДС КАК СтавкаНДС,
	|	НДСПредъявленный.СчетУчетаНДС КАК СчетУчетаНДС,
	|	СУММА(НДСПредъявленный.СуммаБезНДС) КАК СуммаБезНДСПриход,
	|	СУММА(НДСПредъявленный.НДС) КАК НДСПриход
	|ПОМЕСТИТЬ НДСПредъявленныйПриход
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный КАК НДСПредъявленный
	|ГДЕ
	|	НДСПредъявленный.Период < &Период
	|	И НДСПредъявленный.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И НДСПредъявленный.Событие <> ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПокупки.НДСРаспределен)
	|	И НДСПредъявленный.Организация = &Организация
	|	И НДСПредъявленный.СчетФактура В
	|			(ВЫБРАТЬ
	|				СписокСчетовФактур.СчетФактура
	|			ИЗ
	|				СписокСчетовФактур)
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСПредъявленный.Организация,
	|	НДСПредъявленный.Поставщик,
	|	НДСПредъявленный.СчетФактура,
	|	НДСПредъявленный.ВидЦенности,
	|	НДСПредъявленный.СтавкаНДС,
	|	НДСПредъявленный.СчетУчетаНДС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура,
	|	ВидЦенности,
	|	СтавкаНДС,
	|	СчетУчетаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСПредъявленный.СчетФактура КАК СчетФактура,
	|	НДСПредъявленный.ВидЦенности КАК ВидЦенности,
	|	НДСПредъявленный.СтавкаНДС КАК СтавкаНДС,
	|	НДСПредъявленный.СчетУчетаНДС КАК СчетУчетаНДС,
	|	СУММА(НДСПредъявленный.СуммаБезНДС) КАК СуммаБезНДС,
	|	СУММА(НДСПредъявленный.НДС) КАК НДС
	|ПОМЕСТИТЬ НДСПредъявленныйНДСВключенВСтоимость
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный КАК НДСПредъявленный
	|ГДЕ
	|	НДСПредъявленный.Период < &Период
	|	И НДСПредъявленный.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И НДСПредъявленный.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПокупки.НДСВключенВСтоимость)
	|	И НДСПредъявленный.Организация = &Организация
	|	И НДСПредъявленный.СчетФактура В
	|			(ВЫБРАТЬ
	|				СписокСчетовФактур.СчетФактура
	|			ИЗ
	|				СписокСчетовФактур)
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСПредъявленный.СчетФактура,
	|	НДСПредъявленный.ВидЦенности,
	|	НДСПредъявленный.СтавкаНДС,
	|	НДСПредъявленный.СчетУчетаНДС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура,
	|	ВидЦенности,
	|	СтавкаНДС,
	|	СчетУчетаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСПредъявленный.СчетФактура КАК СчетФактура,
	|	НДСПредъявленный.ВидЦенности КАК ВидЦенности,
	|	НДСПредъявленный.СтавкаНДС КАК СтавкаНДС,
	|	НДСПредъявленный.СчетУчетаНДС КАК СчетУчетаНДС,
	|	СУММА(НДСПредъявленный.СуммаБезНДС) КАК СуммаБезНДС,
	|	СУММА(НДСПредъявленный.НДС) КАК НДС
	|ПОМЕСТИТЬ НДСПредъявленныйПредполагаетсяСтавка0
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный КАК НДСПредъявленный
	|ГДЕ
	|	НДСПредъявленный.Период < &Период
	|	И НДСПредъявленный.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И НДСПредъявленный.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПокупки.ПредполагаетсяСтавка0)
	|	И НДСПредъявленный.Организация = &Организация
	|	И НДСПредъявленный.СчетФактура В
	|			(ВЫБРАТЬ
	|				СписокСчетовФактур.СчетФактура
	|			ИЗ
	|				СписокСчетовФактур)
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСПредъявленный.СчетФактура,
	|	НДСПредъявленный.ВидЦенности,
	|	НДСПредъявленный.СтавкаНДС,
	|	НДСПредъявленный.СчетУчетаНДС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура,
	|	ВидЦенности,
	|	СтавкаНДС,
	|	СчетУчетаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСПредъявленный.СчетФактура КАК СчетФактура,
	|	НДСПредъявленный.ВидЦенности КАК ВидЦенности,
	|	НДСПредъявленный.СтавкаНДС КАК СтавкаНДС,
	|	НДСПредъявленный.СчетУчетаНДС КАК СчетУчетаНДС,
	|	СУММА(НДСПредъявленный.СуммаБезНДС) КАК СуммаБезНДС,
	|	СУММА(НДСПредъявленный.НДС) КАК НДС
	|ПОМЕСТИТЬ НДСПредъявленныйНДСПодлежитРаспределению
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный КАК НДСПредъявленный
	|ГДЕ
	|	НДСПредъявленный.Период < &Период
	|	И НДСПредъявленный.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И НДСПредъявленный.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПокупки.НДСПодлежитРаспределению)
	|	И НДСПредъявленный.Организация = &Организация
	|	И НДСПредъявленный.СчетФактура В
	|			(ВЫБРАТЬ
	|				СписокСчетовФактур.СчетФактура
	|			ИЗ
	|				СписокСчетовФактур)
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСПредъявленный.СчетФактура,
	|	НДСПредъявленный.ВидЦенности,
	|	НДСПредъявленный.СтавкаНДС,
	|	НДСПредъявленный.СчетУчетаНДС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура,
	|	ВидЦенности,
	|	СтавкаНДС,
	|	СчетУчетаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСПредъявленныйПриход.Организация,
	|	НДСПредъявленныйПриход.Поставщик,
	|	НДСПредъявленныйПриход.СчетФактура КАК СчетФактура,
	|	НДСПредъявленныйПриход.ВидЦенности КАК ВидЦенности,
	|	НДСПредъявленныйПриход.СтавкаНДС КАК СтавкаНДС,
	|	НДСПредъявленныйПриход.СчетУчетаНДС КАК СчетУчетаНДС,
	|	НДСПредъявленныйПриход.СуммаБезНДСПриход,
	|	НДСПредъявленныйПриход.НДСПриход,
	|	ЕСТЬNULL(НДСПредъявленныйНДСВключенВСтоимость.СуммаБезНДС, 0) КАК СуммаБезНДСУчитываетсяВCтоимости,
	|	ЕСТЬNULL(НДСПредъявленныйНДСВключенВСтоимость.НДС, 0) КАК НДСУчитываетсяВCтоимости,
	|	ЕСТЬNULL(НДСПредъявленныйНДСПодлежитРаспределению.СуммаБезНДС, 0) КАК СуммаБезНДСРаспределяется,
	|	ЕСТЬNULL(НДСПредъявленныйНДСПодлежитРаспределению.НДС, 0) КАК НДСРаспределяется,
	|	ЕСТЬNULL(НДСПредъявленныйПредполагаетсяСтавка0.СуммаБезНДС, 0) КАК СуммаБезНДСДляОперацийПо0,
	|	ЕСТЬNULL(НДСПредъявленныйПредполагаетсяСтавка0.НДС, 0) КАК НДСДляОперацийПо0
	|ПОМЕСТИТЬ ВТНДСПредъявленныйОбороты
	|ИЗ
	|	НДСПредъявленныйПриход КАК НДСПредъявленныйПриход
	|		ЛЕВОЕ СОЕДИНЕНИЕ НДСПредъявленныйНДСВключенВСтоимость КАК НДСПредъявленныйНДСВключенВСтоимость
	|		ПО НДСПредъявленныйПриход.СчетФактура = НДСПредъявленныйНДСВключенВСтоимость.СчетФактура
	|			И НДСПредъявленныйПриход.ВидЦенности = НДСПредъявленныйНДСВключенВСтоимость.ВидЦенности
	|			И НДСПредъявленныйПриход.СтавкаНДС = НДСПредъявленныйНДСВключенВСтоимость.СтавкаНДС
	|			И НДСПредъявленныйПриход.СчетУчетаНДС = НДСПредъявленныйНДСВключенВСтоимость.СчетУчетаНДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ НДСПредъявленныйПредполагаетсяСтавка0 КАК НДСПредъявленныйПредполагаетсяСтавка0
	|		ПО НДСПредъявленныйПриход.СчетФактура = НДСПредъявленныйПредполагаетсяСтавка0.СчетФактура
	|			И НДСПредъявленныйПриход.ВидЦенности = НДСПредъявленныйПредполагаетсяСтавка0.ВидЦенности
	|			И НДСПредъявленныйПриход.СтавкаНДС = НДСПредъявленныйПредполагаетсяСтавка0.СтавкаНДС
	|			И НДСПредъявленныйПриход.СчетУчетаНДС = НДСПредъявленныйПредполагаетсяСтавка0.СчетУчетаНДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ НДСПредъявленныйНДСПодлежитРаспределению КАК НДСПредъявленныйНДСПодлежитРаспределению
	|		ПО НДСПредъявленныйПриход.СчетФактура = НДСПредъявленныйНДСПодлежитРаспределению.СчетФактура
	|			И НДСПредъявленныйПриход.ВидЦенности = НДСПредъявленныйНДСПодлежитРаспределению.ВидЦенности
	|			И НДСПредъявленныйПриход.СтавкаНДС = НДСПредъявленныйНДСПодлежитРаспределению.СтавкаНДС
	|			И НДСПредъявленныйПриход.СчетУчетаНДС = НДСПредъявленныйНДСПодлежитРаспределению.СчетУчетаНДС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура,
	|	ВидЦенности,
	|	СтавкаНДС,
	|	СчетУчетаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСПредъявленныйРеализация0Обороты.СчетФактура,
	|	НДСПредъявленныйРеализация0Обороты.ВидЦенности,
	|	НДСПредъявленныйРеализация0Обороты.СтавкаНДС,
	|	НДСПредъявленныйРеализация0Обороты.СчетУчетаНДС,
	|	НДСПредъявленныйРеализация0Обороты.СуммаБезНДСПриход,
	|	НДСПредъявленныйРеализация0Обороты.НДСПриход
	|ПОМЕСТИТЬ ВТНДСПредъявленныйРеализация0Обороты
	|ИЗ
	|	РегистрНакопления.НДСПредъявленныйРеализация0.Обороты(
	|			,
	|			&КонецПериода,
	|			Период,
	|			Организация = &Организация
	|				И СчетФактура В
	|					(ВЫБРАТЬ
	|						СписокСчетовФактур.СчетФактура
	|					ИЗ
	|						СписокСчетовФактур)
	|				И Состояние = &Предположение0) КАК НДСПредъявленныйРеализация0Обороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НДСПредъявленныйРеализация0Обороты.СчетФактура,
	|	НДСПредъявленныйРеализация0Обороты.ВидЦенности,
	|	НДСПредъявленныйРеализация0Обороты.СтавкаНДС,
	|	НДСПредъявленныйРеализация0Обороты.СчетУчетаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АналитикаУчетаНДС.Организация,
	|	АналитикаУчетаНДС.СчетФактура,
	|	АналитикаУчетаНДС.ВидЦенности,
	|	АналитикаУчетаНДС.СчетУчетаНДС,
	|	АналитикаУчетаНДС.СтавкаНДС,
	|	АналитикаУчетаНДС.КлючАналитики КАК КлючАналитики
	|ПОМЕСТИТЬ ВТАналитикиУчетаНДС
	|ИЗ
	|	РегистрСведений.АналитикаУчетаНДС КАК АналитикаУчетаНДС
	|ГДЕ
	|	АналитикаУчетаНДС.СчетФактура В
	|			(ВЫБРАТЬ
	|				СписокСчетовФактур.СчетФактура
	|			ИЗ
	|				СписокСчетовФактур)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючАналитики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТАналитикиУчетаНДС.СчетФактура,
	|	ВТАналитикиУчетаНДС.ВидЦенности,
	|	ВТАналитикиУчетаНДС.СтавкаНДС,
	|	ВТАналитикиУчетаНДС.СчетУчетаНДС,
	|	НДСРаздельныйУчетОстатки.СуммаБезНДСОстаток,
	|	НДСРаздельныйУчетОстатки.НДСОстаток,
	|	НДСРаздельныйУчетОстатки.СпособУчетаНДС
	|ПОМЕСТИТЬ ВТНДСРаздельныйУчетОстатки
	|ИЗ
	|	РегистрНакопления.НДСРаздельныйУчет.Остатки(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И АналитикаУчетаНДС В
	|					(ВЫБРАТЬ
	|						ВТАналитикиУчетаНДС.КлючАналитики
	|					ИЗ
	|						ВТАналитикиУчетаНДС)) КАК НДСРаздельныйУчетОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТАналитикиУчетаНДС КАК ВТАналитикиУчетаНДС
	|		ПО НДСРаздельныйУчетОстатки.АналитикаУчетаНДС = ВТАналитикиУчетаНДС.КлючАналитики
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВТАналитикиУчетаНДС.СчетФактура,
	|	ВТАналитикиУчетаНДС.ВидЦенности,
	|	ВТАналитикиУчетаНДС.СтавкаНДС,
	|	ВТАналитикиУчетаНДС.СчетУчетаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСПредъявленныйОбороты.Организация,
	|	НДСПредъявленныйОбороты.СчетФактура КАК СчетФактура,
	|	НДСПредъявленныйОбороты.ВидЦенности,
	|	НДСПредъявленныйОбороты.СтавкаНДС,
	|	НДСПредъявленныйОбороты.СчетУчетаНДС,
	|	НДСПредъявленныйОбороты.Поставщик,
	|	ЕСТЬNULL(НДСПредъявленныйОбороты.СуммаБезНДСПриход, 0) + ЕСТЬNULL(НДСПредъявленныйОбороты.НДСПриход, 0) КАК Базис_СНДС,
	|	ЕСТЬNULL(НДСПредъявленныйОбороты.СуммаБезНДСПриход, 0) КАК Базис_БезНДС,
	|	ЕСТЬNULL(НДСПредъявленныйОбороты.НДСПриход, 0) КАК Базис_НДС,
	|	ЕСТЬNULL(НДСПредъявленныйРеализация0Обороты.СуммаБезНДСПриход, 0) КАК Реализация0_БезНДС,
	|	ЕСТЬNULL(НДСПредъявленныйРеализация0Обороты.НДСПриход, 0) КАК Реализация0_НДС,
	|	ВЫБОР
	|		КОГДА НДСПредъявленныйРеализация0Обороты.СчетФактура ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НДСПредъявленныйРеализация0Обороты.СуммаБезНДСПриход = 0
	|						И НДСПредъявленныйРеализация0Обороты.НДСПриход = 0
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК ЕстьРеализация0,
	|	0 КАК РаздельныйУчет_БезНДС,
	|	0 КАК РаздельныйУчет_НДС,
	|	0 КАК ЕстьОстаткиПоРаздельномуУчету,
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК ДоговорКонтрагента,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыУчетаНДС.ПринимаетсяКВычету) КАК СпособУчетаНДС,
	|	НДСПредъявленныйОбороты.СуммаБезНДСУчитываетсяВCтоимости,
	|	НДСПредъявленныйОбороты.НДСУчитываетсяВCтоимости,
	|	НДСПредъявленныйОбороты.СуммаБезНДСРаспределяется,
	|	НДСПредъявленныйОбороты.НДСРаспределяется,
	|	НДСПредъявленныйОбороты.СуммаБезНДСДляОперацийПо0,
	|	НДСПредъявленныйОбороты.НДСДляОперацийПо0
	|ПОМЕСТИТЬ ВТДанныеПоКорректируемымСчетамФактурам
	|ИЗ
	|	ВТНДСПредъявленныйОбороты КАК НДСПредъявленныйОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНДСПредъявленныйРеализация0Обороты КАК НДСПредъявленныйРеализация0Обороты
	|		ПО НДСПредъявленныйОбороты.СчетФактура = НДСПредъявленныйРеализация0Обороты.СчетФактура
	|			И НДСПредъявленныйОбороты.ВидЦенности = НДСПредъявленныйРеализация0Обороты.ВидЦенности
	|			И НДСПредъявленныйОбороты.СтавкаНДС = НДСПредъявленныйРеализация0Обороты.СтавкаНДС
	|			И НДСПредъявленныйОбороты.СчетУчетаНДС = НДСПредъявленныйРеализация0Обороты.СчетУчетаНДС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НДСПредъявленныйОбороты.Организация,
	|	НДСПредъявленныйОбороты.СчетФактура,
	|	НДСПредъявленныйОбороты.ВидЦенности,
	|	НДСПредъявленныйОбороты.СтавкаНДС,
	|	НДСПредъявленныйОбороты.СчетУчетаНДС,
	|	НДСПредъявленныйОбороты.Поставщик,
	|	ЕСТЬNULL(НДСПредъявленныйОбороты.СуммаБезНДСПриход, 0) + ЕСТЬNULL(НДСПредъявленныйОбороты.НДСПриход, 0),
	|	ЕСТЬNULL(НДСПредъявленныйОбороты.СуммаБезНДСПриход, 0),
	|	ЕСТЬNULL(НДСПредъявленныйОбороты.НДСПриход, 0),
	|	0,
	|	0,
	|	0,
	|	ЕСТЬNULL(НДСРаздельныйУчетОстатки.СуммаБезНДСОстаток, 0),
	|	ЕСТЬNULL(НДСРаздельныйУчетОстатки.НДСОстаток, 0),
	|	ВЫБОР
	|		КОГДА НДСРаздельныйУчетОстатки.СчетФактура ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НДСРаздельныйУчетОстатки.СуммаБезНДСОстаток = 0
	|						И НДСРаздельныйУчетОстатки.НДСОстаток = 0
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Перечисление.СпособыУчетаНДС.ПринимаетсяКВычету),
	|	НДСПредъявленныйОбороты.СуммаБезНДСУчитываетсяВCтоимости,
	|	НДСПредъявленныйОбороты.НДСУчитываетсяВCтоимости,
	|	НДСПредъявленныйОбороты.СуммаБезНДСРаспределяется,
	|	НДСПредъявленныйОбороты.НДСРаспределяется,
	|	НДСПредъявленныйОбороты.СуммаБезНДСДляОперацийПо0,
	|	НДСПредъявленныйОбороты.НДСДляОперацийПо0
	|ИЗ
	|	ВТНДСПредъявленныйОбороты КАК НДСПредъявленныйОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНДСРаздельныйУчетОстатки КАК НДСРаздельныйУчетОстатки
	|		ПО НДСПредъявленныйОбороты.СчетФактура = НДСРаздельныйУчетОстатки.СчетФактура
	|			И НДСПредъявленныйОбороты.ВидЦенности = НДСРаздельныйУчетОстатки.ВидЦенности
	|			И НДСПредъявленныйОбороты.СтавкаНДС = НДСРаздельныйУчетОстатки.СтавкаНДС
	|			И НДСПредъявленныйОбороты.СчетУчетаНДС = НДСРаздельныйУчетОстатки.СчетУчетаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеПоКорректируемымСчетамФактурам.Организация,
	|	ВТДанныеПоКорректируемымСчетамФактурам.СчетФактура,
	|	ВТДанныеПоКорректируемымСчетамФактурам.ВидЦенности,
	|	ВТДанныеПоКорректируемымСчетамФактурам.СтавкаНДС,
	|	ВТДанныеПоКорректируемымСчетамФактурам.СчетУчетаНДС,
	|	ВТДанныеПоКорректируемымСчетамФактурам.Поставщик,
	|	МАКСИМУМ(ВТДанныеПоКорректируемымСчетамФактурам.Базис_СНДС) КАК Базис_СНДС,
	|	МАКСИМУМ(ВТДанныеПоКорректируемымСчетамФактурам.Базис_БезНДС) КАК Базис_БезНДС,
	|	МАКСИМУМ(ВТДанныеПоКорректируемымСчетамФактурам.Базис_НДС) КАК Базис_НДС,
	|	СУММА(ВТДанныеПоКорректируемымСчетамФактурам.Реализация0_БезНДС) КАК Реализация0_БезНДС,
	|	СУММА(ВТДанныеПоКорректируемымСчетамФактурам.Реализация0_НДС) КАК Реализация0_НДС,
	|	МАКСИМУМ(ВТДанныеПоКорректируемымСчетамФактурам.ЕстьРеализация0) КАК ЕстьРеализация0,
	|	СУММА(ВТДанныеПоКорректируемымСчетамФактурам.РаздельныйУчет_БезНДС) КАК РаздельныйУчет_БезНДС,
	|	СУММА(ВТДанныеПоКорректируемымСчетамФактурам.РаздельныйУчет_НДС) КАК РаздельныйУчет_НДС,
	|	МАКСИМУМ(ВТДанныеПоКорректируемымСчетамФактурам.ЕстьОстаткиПоРаздельномуУчету) КАК ЕстьОстаткиПоРаздельномуУчету,
	|	ВТДанныеПоКорректируемымСчетамФактурам.ДоговорКонтрагента,
	|	ВТДанныеПоКорректируемымСчетамФактурам.СпособУчетаНДС,
	|	МАКСИМУМ(ВТДанныеПоКорректируемымСчетамФактурам.СуммаБезНДСУчитываетсяВCтоимости) КАК СуммаБезНДСУчитываетсяВCтоимости,
	|	МАКСИМУМ(ВТДанныеПоКорректируемымСчетамФактурам.НДСУчитываетсяВCтоимости) КАК НДСУчитываетсяВCтоимости,
	|	МАКСИМУМ(ВТДанныеПоКорректируемымСчетамФактурам.СуммаБезНДСРаспределяется) КАК СуммаБезНДСРаспределяется,
	|	МАКСИМУМ(ВТДанныеПоКорректируемымСчетамФактурам.НДСРаспределяется) КАК НДСРаспределяется,
	|	МАКСИМУМ(ВТДанныеПоКорректируемымСчетамФактурам.СуммаБезНДСДляОперацийПо0) КАК СуммаБезНДСДляОперацийПо0,
	|	МАКСИМУМ(ВТДанныеПоКорректируемымСчетамФактурам.НДСДляОперацийПо0) КАК НДСДляОперацийПо0
	|ИЗ
	|	ВТДанныеПоКорректируемымСчетамФактурам КАК ВТДанныеПоКорректируемымСчетамФактурам
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанныеПоКорректируемымСчетамФактурам.Организация,
	|	ВТДанныеПоКорректируемымСчетамФактурам.СчетФактура,
	|	ВТДанныеПоКорректируемымСчетамФактурам.ВидЦенности,
	|	ВТДанныеПоКорректируемымСчетамФактурам.СтавкаНДС,
	|	ВТДанныеПоКорректируемымСчетамФактурам.СчетУчетаНДС,
	|	ВТДанныеПоКорректируемымСчетамФактурам.ДоговорКонтрагента,
	|	ВТДанныеПоКорректируемымСчетамФактурам.СпособУчетаНДС,
	|	ВТДанныеПоКорректируемымСчетамФактурам.Поставщик";

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ПодготовитьТаблицыПоВидамРегистровНДС(РеестрСчетовФактур, Реквизиты)

	Запрос = Новый Запрос;

	СостоянияПредъявленный = Новый СписокЗначений;
	СостоянияПредъявленный.Добавить(Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0);
	СостоянияПредъявленный.Добавить(Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0);

	Запрос.УстановитьПараметр("РеестрСчетовФактур", 	РеестрСчетовФактур);
    Запрос.УстановитьПараметр("Организация",        	Реквизиты.Организация);
	Запрос.УстановитьПараметр("СписокСчетовФактур",		ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(РеестрСчетовФактур.ВыгрузитьКолонку("СчетФактура"), Истина));
	Запрос.УстановитьПараметр("СписокВидыЦенностей",	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(РеестрСчетовФактур.ВыгрузитьКолонку("ВидЦенности"), Истина));
	Запрос.УстановитьПараметр("СписокСтавкиНДС",		ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(РеестрСчетовФактур.ВыгрузитьКолонку("СтавкаНДС"), Истина));
	Запрос.УстановитьПараметр("СписокСчетаУчетаНДС",	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(РеестрСчетовФактур.ВыгрузитьКолонку("СчетУчетаНДС"), Истина));
	Запрос.УстановитьПараметр("СостоянияПредъявленный", СостоянияПредъявленный);
	Запрос.УстановитьПараметр("СостоянияОжидание", 		Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение);
	Запрос.УстановитьПараметр("НачалоПериода",      	НачалоКвартала(Реквизиты.Период));
	Запрос.УстановитьПараметр("КонецПериода",       	Новый Граница(Реквизиты.Период, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("КонецПериодаДата",   	Реквизиты.Период);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеестрСчетовФактур.СчетФактура,
	|	РеестрСчетовФактур.СчетУчетаНДС,
	|	РеестрСчетовФактур.СтавкаНДС,
	|	РеестрСчетовФактур.СуммоваяРазница,
	|	РеестрСчетовФактур.ВидЦенности,
	|	РеестрСчетовФактур.ДоговорКонтрагента,
	|	РеестрСчетовФактур.Базис_БезНДС КАК БазисБезНДС,
	|	РеестрСчетовФактур.Базис_СНДС КАК БазисСНДС,
	|	РеестрСчетовФактур.Базис_НДС КАК БазисНДС,
	|	РеестрСчетовФактур.ЕстьРеализация0,
	|	РеестрСчетовФактур.ЕстьОстаткиПоРаздельномуУчету,
	|	РеестрСчетовФактур.Реализация0_БезНДС,
	|	РеестрСчетовФактур.Реализация0_НДС,
	|	РеестрСчетовФактур.РаздельныйУчет_БезНДС,
	|	РеестрСчетовФактур.РаздельныйУчет_НДС,
	|	РеестрСчетовФактур.СуммаБезНДС,
	|	РеестрСчетовФактур.НДС
	|ПОМЕСТИТЬ ВТРеестрСчетовФактур
	|ИЗ
	|	&РеестрСчетовФактур КАК РеестрСчетовФактур
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВТРеестрСчетовФактур.Реализация0_БезНДС * ВТРеестрСчетовФактур.СуммаБезНДС / ВТРеестрСчетовФактур.БазисБезНДС) КАК СуммаБезНДС,
	|	СУММА(ВТРеестрСчетовФактур.Реализация0_НДС * ВТРеестрСчетовФактур.НДС / ВТРеестрСчетовФактур.БазисНДС) КАК НДС,
	|	ВТРеестрСчетовФактур.СчетФактура,
	|	ВТРеестрСчетовФактур.ВидЦенности,
	|	ВТРеестрСчетовФактур.СтавкаНДС,
	|	ВТРеестрСчетовФактур.СчетУчетаНДС
	|ИЗ
	|	ВТРеестрСчетовФактур КАК ВТРеестрСчетовФактур
	|ГДЕ
	|	ВТРеестрСчетовФактур.ЕстьРеализация0 = 1
	|	И ВТРеестрСчетовФактур.Реализация0_БезНДС * ВТРеестрСчетовФактур.СуммаБезНДС / ВТРеестрСчетовФактур.БазисБезНДС <> 0
	|	И ВТРеестрСчетовФактур.Реализация0_НДС * ВТРеестрСчетовФактур.НДС / ВТРеестрСчетовФактур.БазисНДС <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТРеестрСчетовФактур.СчетФактура,
	|	ВТРеестрСчетовФактур.ВидЦенности,
	|	ВТРеестрСчетовФактур.СтавкаНДС,
	|	ВТРеестрСчетовФактур.СчетУчетаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВТРеестрСчетовФактур.РаздельныйУчет_БезНДС * ВТРеестрСчетовФактур.СуммаБезНДС / ВТРеестрСчетовФактур.БазисБезНДС) КАК СуммаБезНДС,
	|	СУММА(ВТРеестрСчетовФактур.РаздельныйУчет_НДС * ВТРеестрСчетовФактур.НДС / ВТРеестрСчетовФактур.БазисНДС) КАК НДС,
	|	ВТРеестрСчетовФактур.СчетФактура,
	|	ВТРеестрСчетовФактур.ВидЦенности,
	|	ВТРеестрСчетовФактур.СтавкаНДС,
	|	ВТРеестрСчетовФактур.СчетУчетаНДС
	|ИЗ
	|	ВТРеестрСчетовФактур КАК ВТРеестрСчетовФактур
	|ГДЕ
	|	ВТРеестрСчетовФактур.ЕстьОстаткиПоРаздельномуУчету = 1
	|	И ВТРеестрСчетовФактур.РаздельныйУчет_БезНДС * ВТРеестрСчетовФактур.СуммаБезНДС / ВТРеестрСчетовФактур.БазисБезНДС <> 0
	|	И ВТРеестрСчетовФактур.РаздельныйУчет_НДС * ВТРеестрСчетовФактур.НДС / ВТРеестрСчетовФактур.БазисНДС <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТРеестрСчетовФактур.СчетФактура,
	|	ВТРеестрСчетовФактур.ВидЦенности,
	|	ВТРеестрСчетовФактур.СтавкаНДС,
	|	ВТРеестрСчетовФактур.СчетУчетаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&КонецПериодаДата КАК Период,
	|	&КонецПериодаДата КАК ДатаСобытия,
	|	НДСПредъявленныйРеализация0Обороты.Организация,
	|	НДСПредъявленныйРеализация0Обороты.СчетФактура,
	|	НДСПредъявленныйРеализация0Обороты.Состояние,
	|	НДСПредъявленныйРеализация0Обороты.ДокументОтгрузки,
	|	НДСПредъявленныйРеализация0Обороты.ВидЦенности,
	|	НДСПредъявленныйРеализация0Обороты.СтавкаНДС,
	|	НДСПредъявленныйРеализация0Обороты.СчетУчетаНДС,
	|	ВЫБОР
	|		КОГДА НДСПредъявленныйРеализация0Обороты.Состояние В (&СостоянияПредъявленный)
	|			ТОГДА СУММА(НДСПредъявленныйРеализация0Обороты.СуммаБезНДСПриход)
	|		КОГДА НДСПредъявленныйРеализация0Обороты.Состояние = &СостоянияОжидание
	|			ТОГДА СУММА(НДСПредъявленныйРеализация0Обороты.СуммаБезНДСПриход - НДСПредъявленныйРеализация0Обороты.СуммаБезНДСРасход)
	|	КОНЕЦ КАК СуммаБезНДС,
	|	ВЫБОР
	|		КОГДА НДСПредъявленныйРеализация0Обороты.Состояние В (&СостоянияПредъявленный)
	|			ТОГДА СУММА(НДСПредъявленныйРеализация0Обороты.НДСПриход)
	|		КОГДА НДСПредъявленныйРеализация0Обороты.Состояние = &СостоянияОжидание
	|			ТОГДА СУММА(НДСПредъявленныйРеализация0Обороты.НДСПриход - НДСПредъявленныйРеализация0Обороты.НДСРасход)
	|	КОНЕЦ КАК НДС
	|ИЗ
	|	РегистрНакопления.НДСПредъявленныйРеализация0.Обороты(
	|			,
	|			&КонецПериода,
	|			,
	|			Организация = &Организация
	|				И СчетФактура В (&СписокСчетовФактур)
	|				И СтавкаНДС В (&СписокСтавкиНДС)
	|				И СчетУчетаНДС В (&СписокСчетаУчетаНДС)) КАК НДСПредъявленныйРеализация0Обороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСПредъявленныйРеализация0Обороты.Организация,
	|	НДСПредъявленныйРеализация0Обороты.СчетФактура,
	|	НДСПредъявленныйРеализация0Обороты.Состояние,
	|	НДСПредъявленныйРеализация0Обороты.ДокументОтгрузки,
	|	НДСПредъявленныйРеализация0Обороты.ВидЦенности,
	|	НДСПредъявленныйРеализация0Обороты.СтавкаНДС,
	|	НДСПредъявленныйРеализация0Обороты.СчетУчетаНДС
	|
	|ИМЕЮЩИЕ
	|	ВЫБОР
	|		КОГДА НДСПредъявленныйРеализация0Обороты.Состояние В (&СостоянияПредъявленный)
	|			ТОГДА СУММА(НДСПредъявленныйРеализация0Обороты.СуммаБезНДСПриход)
	|		КОГДА НДСПредъявленныйРеализация0Обороты.Состояние = &СостоянияОжидание
	|			ТОГДА СУММА(НДСПредъявленныйРеализация0Обороты.СуммаБезНДСПриход - НДСПредъявленныйРеализация0Обороты.СуммаБезНДСРасход)
	|	КОНЕЦ <> 0 И
	|	ВЫБОР
	|		КОГДА НДСПредъявленныйРеализация0Обороты.Состояние В (&СостоянияПредъявленный)
	|			ТОГДА СУММА(НДСПредъявленныйРеализация0Обороты.НДСПриход)
	|		КОГДА НДСПредъявленныйРеализация0Обороты.Состояние = &СостоянияОжидание
	|			ТОГДА СУММА(НДСПредъявленныйРеализация0Обороты.НДСПриход - НДСПредъявленныйРеализация0Обороты.НДСРасход)
	|	КОНЕЦ <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АналитикаУчетаНДС.СчетФактура,
	|	АналитикаУчетаНДС.ВидЦенности,
	|	АналитикаУчетаНДС.СчетУчетаНДС,
	|	АналитикаУчетаНДС.СтавкаНДС,
	|	АналитикаУчетаНДС.КлючАналитики КАК КлючАналитики
	|ПОМЕСТИТЬ ВТАналитикиУчетаНДС
	|ИЗ
	|	РегистрСведений.АналитикаУчетаНДС КАК АналитикаУчетаНДС
	|ГДЕ
	|	АналитикаУчетаНДС.Организация = &Организация
	|	И АналитикаУчетаНДС.СчетФактура В(&СписокСчетовФактур)
	|	И АналитикаУчетаНДС.СтавкаНДС В(&СписокСтавкиНДС)
	|	И АналитикаУчетаНДС.СчетУчетаНДС В(&СписокСчетаУчетаНДС)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючАналитики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТАналитикиУчетаНДС.СчетФактура,
	|	ВТАналитикиУчетаНДС.ВидЦенности,
	|	ВТАналитикиУчетаНДС.СтавкаНДС,
	|	ВТАналитикиУчетаНДС.СчетУчетаНДС,
	|	&КонецПериодаДата КАК Период,
	|	&КонецПериодаДата КАК ДатаСобытия,
	|	НДСРаздельныйУчетОстатки.Организация,
	|	НДСРаздельныйУчетОстатки.АналитикаУчетаЗатрат,
	|	НДСРаздельныйУчетОстатки.АналитикаУчетаНДС,
	|	НДСРаздельныйУчетОстатки.Партия,
	|	НДСРаздельныйУчетОстатки.СпособУчетаНДС,
	|	НДСРаздельныйУчетОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	НДСРаздельныйУчетОстатки.НДСОстаток КАК НДС,
	|	ВТАналитикаУчетаЗатрат.СчетЗатрат,
	|	ВТАналитикаУчетаЗатрат.Подразделение,
	|	ВТАналитикаУчетаЗатрат.Субконто1,
	|	ВТАналитикаУчетаЗатрат.Субконто2,
	|	ВТАналитикаУчетаЗатрат.Субконто3
	|ИЗ
	|	РегистрНакопления.НДСРаздельныйУчет.Остатки(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И АналитикаУчетаНДС В
	|					(ВЫБРАТЬ
	|						ВТАналитикиУчетаНДС.КлючАналитики
	|					ИЗ
	|						ВТАналитикиУчетаНДС КАК ВТАналитикиУчетаНДС)) КАК НДСРаздельныйУчетОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТАналитикиУчетаНДС КАК ВТАналитикиУчетаНДС
	|		ПО НДСРаздельныйУчетОстатки.АналитикаУчетаНДС = ВТАналитикиУчетаНДС.КлючАналитики
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаЗатрат КАК ВТАналитикаУчетаЗатрат
	|		ПО НДСРаздельныйУчетОстатки.АналитикаУчетаЗатрат = ВТАналитикаУчетаЗатрат.КлючАналитики
	|ГДЕ
	|	НЕ(ЕСТЬNULL(НДСРаздельныйУчетОстатки.СуммаБезНДСОстаток, 0) = 0
	|				И ЕСТЬNULL(НДСРаздельныйУчетОстатки.НДСОстаток, 0) = 0)";


	Результат = Запрос.ВыполнитьПакет();

	СтруктураТаблиц = Новый Структура;

	СтруктураТаблиц.Вставить("Реализация0",         		Результат[1].Выгрузить());
	СтруктураТаблиц.Вставить("РаздельныйУчет",         		Результат[2].Выгрузить());
	СтруктураТаблиц.Вставить("НДСПредъявленныйРеализация0", Результат[3].Выгрузить());
    СтруктураТаблиц.Вставить("НДСРаздельныйУчет",			Результат[5].Выгрузить());

	СтруктураСкорректированныхТаблиц = Новый Структура();

	СтруктураСкорректированныхТаблиц.Вставить("НДСПредъявленныйРеализация0",
		УчетНДСПереопределяемый.РаспределитьПоБазису(СтруктураТаблиц.Реализация0, СтруктураТаблиц.НДСПредъявленныйРеализация0));
	СтруктураСкорректированныхТаблиц.Вставить("НДСРаздельныйУчет",
		УчетНДСПереопределяемый.РаспределитьПоБазису(СтруктураТаблиц.РаздельныйУчет, СтруктураТаблиц.НДСРаздельныйУчет));

	Возврат СтруктураСкорректированныхТаблиц;

КонецФункции

Функция ПодготовитьДанныеПроводокКурсовыеРазницыНалоговыйАгент(РеестрСчетовФактур)
	
	ДанныеПроводок = РеестрСчетовФактур.СкопироватьКолонки(
		"Период,Организация,Содержание,СчетУчетаНДС,СчетФактура,Поставщик,ДоговорКонтрагента,НДС");
	ДанныеПроводок.Колонки.Добавить("СпособУчетаНДС", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыУчетаНДС"));	
		
	Для Каждого СтрокаТаблицы Из РеестрСчетовФактур Цикл
		
		НДС = СтрокаТаблицы.НДС - СтрокаТаблицы.СР_НДСУчитываетсяВCтоимости 
			- СтрокаТаблицы.СР_НДСДляОперацийПо0 - СтрокаТаблицы.СР_НДСРаспределяется;
		Если НДС <> 0 Тогда
			НоваяСтрока = ДанныеПроводок.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.НДС = НДС;
			НоваяСтрока.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету;
		КонецЕсли;
		
		НДС = СтрокаТаблицы.СР_НДСУчитываетсяВCтоимости;
		Если НДС <> 0 Тогда
			НоваяСтрока = ДанныеПроводок.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.НДС = НДС;
			НоваяСтрока.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.УчитываетсяВCтоимости;
		КонецЕсли;
		
		НДС = СтрокаТаблицы.СР_НДСДляОперацийПо0;
		Если НДС <> 0 Тогда
			НоваяСтрока = ДанныеПроводок.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.НДС = НДС;
			НоваяСтрока.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ДляОперацийПо0;
		КонецЕсли;
		
		НДС = СтрокаТаблицы.СР_НДСРаспределяется;
		Если НДС <> 0 Тогда
			НоваяСтрока = ДанныеПроводок.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.НДС = НДС;
			НоваяСтрока.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.Распределяется;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеПроводок;
	
КонецФункции

Функция ПодготовитьДанныеДвиженийНДСПредъявленныйКурсовыеРазницыНалоговыйАгент(РеестрСчетовФактур)
	
	ДанныеДвижений = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("НДСПредъявленный");
	
	Для Каждого СтрокаТаблицы Из РеестрСчетовФактур Цикл
		
		СуммаБезНДС = СтрокаТаблицы.СР_СуммаБезНДСУчитываетсяВCтоимости;
		НДС = СтрокаТаблицы.СР_НДСУчитываетсяВCтоимости;
		Если СуммаБезНДС <> 0 ИЛИ НДС <> 0 Тогда
			НоваяСтрока = ДанныеДвижений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.СуммаБезНДС = СуммаБезНДС;
			НоваяСтрока.НДС = НДС;
			НоваяСтрока.Событие = Перечисления.СобытияПоНДСПокупки.НДСВключенВСтоимость;
		КонецЕсли;
		
		СуммаБезНДС = СтрокаТаблицы.СР_СуммаБезНДСДляОперацийПо0;
		НДС = СтрокаТаблицы.СР_НДСДляОперацийПо0;
		Если СуммаБезНДС <> 0 ИЛИ НДС <> 0 Тогда
			НоваяСтрока = ДанныеДвижений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.СуммаБезНДС = СуммаБезНДС;
			НоваяСтрока.НДС = НДС;
			НоваяСтрока.Событие = Перечисления.СобытияПоНДСПокупки.ПредполагаетсяСтавка0;
		КонецЕсли;
		
		СуммаБезНДС = СтрокаТаблицы.СР_СуммаБезНДСРаспределяется;
		НДС = СтрокаТаблицы.СР_НДСРаспределяется;
		Если СуммаБезНДС <> 0 ИЛИ НДС <> 0 Тогда
			НоваяСтрока = ДанныеДвижений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.СуммаБезНДС = СуммаБезНДС;
			НоваяСтрока.НДС = НДС;
			НоваяСтрока.Событие = Перечисления.СобытияПоНДСПокупки.НДСПодлежитРаспределению;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеДвижений;
	
КонецФункции

Функция ПодготовитьДанныеПроводокВключениеВСтоимостьКурсовыеРазницыНалоговыйАгент(ДвиженияНДСРаздельныйУчет)
	
	ДвиженияНДСРаздельныйУчет.Индексы.Добавить("СпособУчетаНДС");
	ДанныеПроводок = ДвиженияНДСРаздельныйУчет.Скопировать(
		Новый Структура("СпособУчетаНДС", Перечисления.СпособыУчетаНДС.УчитываетсяВCтоимости));
	ДанныеПроводок.Колонки.СпособУчетаНДС.Имя = "НовыйСпособУчетаНДС";
	
	ДанныеПроводок.Колонки.Добавить("СпособУчетаНДСИзменился", Новый ОписаниеТипов("Булево"));
	ДанныеПроводок.Колонки.Добавить("ПоставщикПредъявляетНДС", Новый ОписаниеТипов("Булево"));
	ДанныеПроводок.Колонки.Добавить("Поставщик", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ДанныеПроводок.Колонки.Добавить("Покупатель", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	
	ДанныеПроводок.ЗаполнитьЗначения(Истина, "СпособУчетаНДСИзменился,ПоставщикПредъявляетНДС");
	
	ОпределитьПоставщиковПоСписаннымПартиямНДС(ДанныеПроводок);
		
	ДанныеПроводок.Свернуть("
		|Организация,Период,
		|СчетЗатрат,Подразделение,Субконто1,Субконто2,Субконто3,
		|СчетУчетаНДС,СчетФактура,Поставщик,НовыйСпособУчетаНДС",
		"НДС");
		
	ДанныеПроводок.Колонки.Добавить("Содержание",
		Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150)));
	ДанныеПроводок.ЗаполнитьЗначения(НСтр("ru = 'НДС включен в стоимость ценностей'"), "Содержание");
	
	Возврат ДанныеПроводок;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПоступлениеЦенностей

Процедура СформироватьДвиженияПоступлениеЦенностей(ДанныеДвижений, Реквизиты, Движения, Отказ)
	
	ДанныеДвижений.Индексы.Добавить("СпособУчетаНДСИзменился,НовыйСпособУчетаНДС,ПоставщикПредъявляетНДС");
	
	// Включим НДС в стоимость ценностей
	ТаблицаВключениеВСтоимость = ДанныеДвижений.Скопировать(
		Новый Структура("СпособУчетаНДСИзменился,НовыйСпособУчетаНДС,ПоставщикПредъявляетНДС",
		Истина, Перечисления.СпособыУчетаНДС.УчитываетсяВCтоимости, Истина));
		
	ЕстьВключениеВСтоимость = ТаблицаВключениеВСтоимость.Количество() >	0;
	
	Если ЕстьВключениеВСтоимость Тогда
		Если ТипЗнч(Реквизиты.Регистратор) = Тип("ДокументСсылка.ПринятиеКУчетуОС") 
		 ИЛИ ТипЗнч(Реквизиты.Регистратор) = Тип("ДокументСсылка.ПринятиеКУчетуНМА")
		 ИЛИ ТипЗнч(Реквизиты.Регистратор) = Тип("ДокументСсылка.МодернизацияОС") Тогда
			СформироватьПроводкиВключениеНДСВСтоимостьОСиНМА(ТаблицаВключениеВСтоимость, Реквизиты, Движения, Отказ, Ложь);
		Иначе
			ДанныеПроводок = ПодготовитьДанныеПроводокПоступлениеЦенностей(ТаблицаВключениеВСтоимость);
			СформироватьПроводкиВключениеНДСВСтоимость(ДанныеПроводок, Движения, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	// Включим НДС в состав прочих затрат
	ТаблицаВключениеВЗатраты = ДанныеДвижений.Скопировать(
		Новый Структура("СпособУчетаНДСИзменился,НовыйСпособУчетаНДС,ПоставщикПредъявляетНДС",
		Истина, Перечисления.СпособыУчетаНДС.ВосстановленУчитываетсяВCтоимости, Истина));
		
	ЕстьВключениеВЗатраты = ТаблицаВключениеВЗатраты.Количество() > 0;
	
	Если ЕстьВключениеВЗатраты Тогда
		ДанныеПроводок = ПодготовитьДанныеПроводокПоступлениеЦенностей(ТаблицаВключениеВЗатраты);
		СформироватьПроводкиВключениеНДСВРасходы(ДанныеПроводок, Движения, Отказ);
	КонецЕсли;

	// Спишем НДС из регистра НДС предъявленный
	ТаблицаРасходНДСПредъявленный = ДанныеДвижений.Скопировать(
	Новый Структура("СпособУчетаНДСИзменился,ПоставщикПредъявляетНДС", Истина, Истина));
	
	ЕстьРасходНДСПредъявленный = ТаблицаРасходНДСПредъявленный.Количество() > 0;
	
	Если ЕстьРасходНДСПредъявленный Тогда
		ДанныеДвиженийНДСПредъявленный = ПодготовитьДанныеДвиженийНДСПредъявленныйПоступлениеЦенностей(
		ТаблицаРасходНДСПредъявленный);
		СформироватьДвиженияНДСПредъявленный(ДанныеДвиженийНДСПредъявленный, Движения, Отказ, Истина);
	КонецЕсли;	
	
	// Отнесем НДС к операциям по 0%
	
	ТаблицаПриходНДСПредъявленныйРеализация0 = ДанныеДвижений.Скопировать(
	Новый Структура("НовыйСпособУчетаНДС,ПоставщикПредъявляетНДС", Перечисления.СпособыУчетаНДС.ДляОперацийПо0, Истина));
	ТаблицаПриходНДСПредъявленныйРеализация0_2 = ДанныеДвижений.Скопировать(
	Новый Структура("НовыйСпособУчетаНДС,ПоставщикПредъявляетНДС", Перечисления.СпособыУчетаНДС.ВосстановленДляОперацийПо0, Истина));	
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(
	ТаблицаПриходНДСПредъявленныйРеализация0_2, ТаблицаПриходНДСПредъявленныйРеализация0);	
	
	ЕстьРеализация0 = ТаблицаПриходНДСПредъявленныйРеализация0.Количество() > 0;
	
	Если ЕстьРеализация0 Тогда
		ДанныеДвиженийНДСПредъявленныйРеализация0 = ПодготовитьДанныеДвиженийНДСПредъявленныйРеализация0ПоступлениеЦенностей(
		ТаблицаПриходНДСПредъявленныйРеализация0);
		СформироватьДвиженияНДСПредъявленныйРеализация0ПоступлениеЦенностей(ДанныеДвиженийНДСПредъявленныйРеализация0, Движения, Отказ);
	КонецЕсли;	
		
	// Сформируем движения по НДСРаздельныйУчет
	ДанныеДвиженийНДСРаздельныйУчет = ПодготовитьДанныеДвиженийНДСРаздельныйУчетПоступлениеЦенностей(ДанныеДвижений, Реквизиты);
	СформироватьДвиженияНДСРаздельныйУчетПоступлениеЦенностей(ДанныеДвиженийНДСРаздельныйУчет, Движения, Отказ);
	
КонецПроцедуры

Функция ПодготовитьДанныеПроводокПоступлениеЦенностей(ДанныеПроводок)
	
	ДанныеПроводок.Свернуть("
		|Организация,Период,
		|СчетЗатрат,Подразделение,Субконто1,Субконто2,Субконто3,
		|СчетУчетаНДС,СчетФактура,Поставщик,НовыйСпособУчетаНДС",
		"НДС");
		
	ДанныеПроводок.Колонки.Добавить("Содержание",
		Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150)));
	ДанныеПроводок.ЗаполнитьЗначения(НСтр("ru = 'НДС включен в стоимость ценностей'"), "Содержание");
	
	Возврат ДанныеПроводок;
	
КонецФункции

Функция ПодготовитьДанныеДвиженийНДСПредъявленныйПоступлениеЦенностей(ДанныеДвижений)
	
	ДанныеДвиженийНДСПредъявленный = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("НДСПредъявленный");
	
	Для Каждого СтрокаДвижений Из ДанныеДвижений Цикл
		
		Если СтрокаДвижений.НовыйСпособУчетаНДС = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету
			ИЛИ СтрокаДвижений.НовыйСпособУчетаНДС = Перечисления.СпособыУчетаНДС.Списывается Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ДанныеДвиженийНДСПредъявленный.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДвижений);
		
		Если СтрокаДвижений.НовыйСпособУчетаНДС = Перечисления.СпособыУчетаНДС.УчитываетсяВCтоимости
		 ИЛИ СтрокаДвижений.НовыйСпособУчетаНДС = Перечисления.СпособыУчетаНДС.ВосстановленУчитываетсяВCтоимости Тогда
			НоваяСтрока.Событие = Перечисления.СобытияПоНДСПокупки.НДСВключенВСтоимость;
		ИначеЕсли СтрокаДвижений.НовыйСпособУчетаНДС = Перечисления.СпособыУчетаНДС.ДляОперацийПо0
		 ИЛИ СтрокаДвижений.НовыйСпособУчетаНДС = Перечисления.СпособыУчетаНДС.ВосстановленДляОперацийПо0 Тогда
			НоваяСтрока.Событие = Перечисления.СобытияПоНДСПокупки.ПредполагаетсяСтавка0;
		ИначеЕсли СтрокаДвижений.НовыйСпособУчетаНДС = Перечисления.СпособыУчетаНДС.Распределяется
			ИЛИ СтрокаДвижений.НовыйСпособУчетаНДС = Перечисления.СпособыУчетаНДС.Распределен Тогда
			НоваяСтрока.Событие = Перечисления.СобытияПоНДСПокупки.НДСПодлежитРаспределению;
		КонецЕсли;
		
	КонецЦикла;

	ДанныеДвиженийНДСПредъявленный.Свернуть("
		|Период,Организация,ДатаСобытия,Событие,
		|СчетФактура,ВидЦенности,СтавкаНДС,СчетУчетаНДС,
		|Поставщик,ДоговорКонтрагента,ИсправленныйСчетФактура",
		"СуммаБезНДС,НДС");
	
	Возврат ДанныеДвиженийНДСПредъявленный;
	
КонецФункции

Функция ПодготовитьДанныеДвиженийНДСПредъявленныйРеализация0ПоступлениеЦенностей(ДанныеДвижений)
	
	ДанныеДвижений.Колонки.Добавить("ДокументОтгрузки", Документы.ТипВсеСсылки());
	
	СчетаПартионногоУчетаЦенностей = СчетаПартионногоУчетаЦенностейДляЦелейНДС();
	
	ЕстьКолонкаСтавкаНДСДокумента = ДанныеДвижений.Колонки.Найти("СтавкаНДСДокумента") <> Неопределено;
	
	ДанныеДвиженийНДСПредъявленныйРеализация0 = ДанныеДвижений.СкопироватьКолонки();
	
	Для Каждого СтрокаТаблицы Из ДанныеДвижений Цикл
		
		Если СтрокаТаблицы.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.Распределен
		 ИЛИ СтрокаТаблицы.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ВосстановленУчитываетсяВCтоимости
		 ИЛИ СтрокаТаблицы.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.Списывается Тогда
			Продолжить;
		КонецЕсли;
		
		Если СчетаПартионногоУчетаЦенностей.Найти(СтрокаТаблицы.СчетЗатрат) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ДанныеДвиженийНДСПредъявленныйРеализация0.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
		Если ЕстьКолонкаСтавкаНДСДокумента И СтрокаТаблицы.СтавкаНДСДокумента = Перечисления.СтавкиНДС.НДС0 Тогда
			НоваяСтрока.ДокументОтгрузки = СтрокаТаблицы.Регистратор;	
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеДвиженийНДСПредъявленныйРеализация0.Свернуть("
		|Регистратор,Период,Организация,СчетФактура,ДокументОтгрузки,
		|ВидЦенности,СтавкаНДС,СчетУчетаНДС,ДатаСобытия",
		"СуммаБезНДС,НДС");
	
	ДанныеДвиженийНДСПредъявленныйРеализация0.Колонки.Добавить("Состояние",
		Новый ОписаниеТипов("ПеречислениеСсылка.НДССостоянияРеализация0"));
	ДанныеДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(
		Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение, "Состояние");	
		
	ДанныеДвиженийНДСПредъявленныйРеализация0.Колонки.Добавить("Событие",
		Новый ОписаниеТипов("ПеречислениеСсылка.СобытияПоНДСПокупки"));
	ДанныеДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(
		Перечисления.СобытияПоНДСПокупки.ПредполагаетсяСтавка0, "Событие");	
		
	Возврат ДанныеДвиженийНДСПредъявленныйРеализация0;
	
КонецФункции

Функция ПодготовитьДанныеДвиженийНДСРаздельныйУчетПоступлениеЦенностей(ДанныеДвижений, Реквизиты)
	
	Если ДанныеДвижений.Колонки.Найти("АналитикаУчетаЗатрат") = Неопределено Тогда
		ДанныеДвижений.Колонки.Добавить("АналитикаУчетаЗатрат",
			Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиУчетаЗатрат"));
	КонецЕсли;	
		
	Если ДанныеДвижений.Колонки.Найти("АналитикаУчетаНДС") = Неопределено Тогда	
		ДанныеДвижений.Колонки.Добавить("АналитикаУчетаНДС",
			Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиУчетаНДС"));
	КонецЕсли;
	
	УчетПоПродажнойСтоимости = УчетнаяПолитика.СпособОценкиТоваровВРознице(Реквизиты.Организация, Реквизиты.Период)
		= Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости;
	ПолучательНТТПоПродажнойСтоимости = Ложь;
	
	Если ТипЗнч(Реквизиты.Регистратор) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")
	 ИЛИ ТипЗнч(Реквизиты.Регистратор) = Тип("ДокументСсылка.ПередачаТоваров")
	 ИЛИ ТипЗнч(Реквизиты.Регистратор) = Тип("ДокументСсылка.ПеремещениеТоваров") 
	 ИЛИ ТипЗнч(Реквизиты.Регистратор) = Тип("ДокументСсылка.ПоступлениеИзПереработки") Тогда 
		ПолучательНТТПоПродажнойСтоимости = УчетПоПродажнойСтоимости
			И Реквизиты.Владелец().Колонки.Найти("ТипСкладаПолучателя") <> Неопределено
			И Реквизиты.ТипСкладаПолучателя = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка;	 
 	Иначе
		ПолучательНТТПоПродажнойСтоимости = Реквизиты.Владелец().Колонки.Найти("ТипСклада") <> Неопределено
			И Реквизиты.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка;
	КонецЕсли;
	
	СчетаПартионногоУчетаЦенностей = СчетаПартионногоУчетаЦенностейДляЦелейНДС();	
		
	ДанныеДвиженийНДСРаздельныйУчет = ДанныеДвижений.СкопироватьКолонки();		
	Для Каждого СтрокаТаблицы Из ДанныеДвижений Цикл
		
		ДляЦелейПартионногоУчета = СчетаПартионногоУчетаЦенностей.Найти(СтрокаТаблицы.СчетЗатрат) <> Неопределено;
		ДляРаспределенияНДС = (СтрокаТаблицы.НовыйСпособУчетаНДС = Перечисления.СпособыУчетаНДС.Распределяется)
			ИЛИ (НЕ СтрокаТаблицы.СпособУчетаНДСИзменился И СтрокаТаблицы.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.Распределяется);
		
		Если ДляЦелейПартионногоУчета Тогда
			Если ПолучательНТТПоПродажнойСтоимости Тогда
				Продолжить;
			КонецЕсли;
		ИначеЕсли ДляРаспределенияНДС Тогда
			Если СтрокаТаблицы.НДС = 0 Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			Продолжить;
		КонецЕсли;
			
		НоваяСтрока = ДанныеДвиженийНДСРаздельныйУчет.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетЗатрат);
		Если Не СвойстваСчета.Количественный Тогда
			НоваяСтрока.Количество = 0;
		КонецЕсли;
		
		Если ДляЦелейПартионногоУчета Тогда
			Для Ном = 1 По СвойстваСчета.КоличествоСубконто Цикл
				Если СвойстваСчета["ВидСубконто" + Ном + "ТолькоОбороты"] Тогда
					НоваяСтрока["Субконто" + Ном] = Неопределено;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если СтрокаТаблицы.СпособУчетаНДСИзменился Тогда
			НоваяСтрока.СпособУчетаНДС = СтрокаТаблицы.НовыйСпособУчетаНДС;
		Иначе
			НоваяСтрока.СпособУчетаНДС = СтрокаТаблицы.СпособУчетаНДС;
		КонецЕсли;
		
		Если НоваяСтрока.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.Списывается Тогда 
			НоваяСтрока.СуммаБезНДС = 0;
			НоваяСтрока.НДС = 0;
		КонецЕсли;
		
		НоваяСтрока.АналитикаУчетаЗатрат = Справочники.КлючиАналитикиУчетаЗатрат.КлючиАналитикиУчетаЗатратДокумента(НоваяСтрока);
		
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.АналитикаУчетаНДС) Тогда
			НоваяСтрока.АналитикаУчетаНДС = Справочники.КлючиАналитикиУчетаНДС.КлючиАналитикиУчетаНДСДокумента(НоваяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеДвиженийНДСРаздельныйУчет.Свернуть("
		|Регистратор,Период,Организация,СпособУчетаНДС,
		|Партия,АналитикаУчетаЗатрат,АналитикаУчетаНДС",
		"Количество,СуммаБезНДС,НДС");
		
	Возврат ДанныеДвиженийНДСРаздельныйУчет;
	
КонецФункции

Процедура СформироватьДвиженияПоСтоимостиОСПриПринятииКУчету(ДанныеПроводок, Реквизиты, Движения, Отказ, ИсключениеИзСтоимости = Ложь)
	
	Если ДанныеПроводок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаОС = ДанныеПроводок.Скопировать(,"Субконто1,НДС");
	ТаблицаОС.Свернуть("Субконто1","НДС");
	ТаблицаОС.Колонки.Субконто1.Имя = "ОсновноеСредство";
	
	Для Каждого СтрокаТаблицы Из ТаблицаОС Цикл
		СтрокаТаблицы.НДС = ?(ИсключениеИзСтоимости, -1, 1) * СтрокаТаблицы.НДС;
	КонецЦикла;	
		
	ТаблицаОС.Индексы.Добавить("ОсновноеСредство");
	
	// Таблица первоначальных сведений ОС
	СтрокиДвижений = Движения.ПервоначальныеСведенияОСБухгалтерскийУчет.Выгрузить();
	Движения.ПервоначальныеСведенияОСБухгалтерскийУчет.Очистить();
	Для Каждого СтрокаДвижений Из СтрокиДвижений Цикл
		СтрокиТаблицыОС = ТаблицаОС.НайтиСтроки(Новый Структура("ОсновноеСредство", СтрокаДвижений.ОсновноеСредство));
		Для Каждого СтрокаСведений Из СтрокиТаблицыОС Цикл
			СтрокаДвижений.ПервоначальнаяСтоимость = СтрокаДвижений.ПервоначальнаяСтоимость + СтрокаСведений.НДС;
			Движение = Движения.ПервоначальныеСведенияОСБухгалтерскийУчет.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, СтрокаДвижений);
		КонецЦикла;
	КонецЦикла;
	Движения.ПервоначальныеСведенияОСБухгалтерскийУчет.Записывать = Истина;
	
	// Таблица первоначальных сведений ОС (НУ)
	СтрокиДвижений = Движения.ПервоначальныеСведенияОСНалоговыйУчет.Выгрузить();
	Движения.ПервоначальныеСведенияОСНалоговыйУчет.Очистить();
	Для Каждого СтрокаДвижений Из СтрокиДвижений Цикл
		СтрокиТаблицыОС = ТаблицаОС.НайтиСтроки(Новый Структура("ОсновноеСредство", СтрокаДвижений.ОсновноеСредство));
		Для Каждого СтрокаСведений Из СтрокиТаблицыОС Цикл
			СтрокаДвижений.ПервоначальнаяСтоимостьНУ = СтрокаДвижений.ПервоначальнаяСтоимостьНУ + СтрокаСведений.НДС;
			Движение = Движения.ПервоначальныеСведенияОСНалоговыйУчет.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, СтрокаДвижений);
		КонецЦикла;
	КонецЦикла;
	Движения.ПервоначальныеСведенияОСНалоговыйУчет.Записывать = Истина;
	
	// Таблица параметров амортизации (БУ)
 	СтрокиДвижений = Движения.ПараметрыАмортизацииОСБухгалтерскийУчет.Выгрузить();
	Движения.ПараметрыАмортизацииОСБухгалтерскийУчет.Очистить();
	Для Каждого СтрокаДвижений Из СтрокиДвижений Цикл
		СтрокиТаблицыОС = ТаблицаОС.НайтиСтроки(Новый Структура("ОсновноеСредство", СтрокаДвижений.ОсновноеСредство));
		Для Каждого СтрокаСведений Из СтрокиТаблицыОС Цикл
			СтрокаДвижений.СтоимостьДляВычисленияАмортизации = СтрокаДвижений.СтоимостьДляВычисленияАмортизации + СтрокаСведений.НДС;
			Движение = Движения.ПараметрыАмортизацииОСБухгалтерскийУчет.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, СтрокаДвижений);
		КонецЦикла;
	КонецЦикла;
    Движения.ПараметрыАмортизацииОСБухгалтерскийУчет.Записывать = Истина;
	
	// Таблица амортизационной премии
	Если Реквизиты.ПроцентАмортизационнойПремии > 0 Тогда
		ТаблицаОС.Колонки.НДС.Имя = "СуммаНУ";
 		ТаблицаАмортизационнойПремии = УчетОС.ПодготовитьТаблицуАмортизационнаяПремия(ТаблицаОС, Реквизиты.Владелец(), Отказ);
		УчетОС.СформироватьДвиженияОтражениеАмортизационнойПремии(ТаблицаАмортизационнойПремии, Реквизиты.Владелец(), Движения, Отказ);
	КонецЕсли;
		
КонецПроцедуры

Процедура СформироватьДвиженияПоСтоимостиНМАПриПринятииКУчету(ДанныеПроводок, Реквизиты, Движения, Отказ, ИсключениеИзСтоимости = Ложь)
	
	Если ДанныеПроводок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаНМА = ДанныеПроводок.Скопировать(,"Субконто1,НДС");
	ТаблицаНМА.Свернуть("Субконто1","НДС");
	ТаблицаНМА.Колонки.Субконто1.Имя = "НематериальныйАктив";
	
	Для Каждого СтрокаТаблицы Из ТаблицаНМА Цикл
		СтрокаТаблицы.НДС = ?(ИсключениеИзСтоимости, -1, 1) * СтрокаТаблицы.НДС;
	КонецЦикла;	
		
	ТаблицаНМА.Индексы.Добавить("НематериальныйАктив");
	
	// Таблица первоначальных сведений НМА
	СтрокиДвижений = Движения.ПервоначальныеСведенияНМАБухгалтерскийУчет.Выгрузить();
	Движения.ПервоначальныеСведенияНМАБухгалтерскийУчет.Очистить();
	Для Каждого СтрокаДвижений Из СтрокиДвижений Цикл
		СтрокиТаблицыНМА = ТаблицаНМА.НайтиСтроки(Новый Структура("НематериальныйАктив", СтрокаДвижений.НематериальныйАктив));
		Для Каждого СтрокаСведений Из СтрокиТаблицыНМА Цикл
			СтрокаДвижений.ПервоначальнаяСтоимость = СтрокаДвижений.ПервоначальнаяСтоимость + СтрокаСведений.НДС;
			Движение = Движения.ПервоначальныеСведенияНМАБухгалтерскийУчет.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, СтрокаДвижений);
		КонецЦикла;
	КонецЦикла;
	Движения.ПервоначальныеСведенияНМАБухгалтерскийУчет.Записывать = Истина;
	
	// Таблица первоначальных сведений НМА (НУ)
	СтрокиДвижений = Движения.ПервоначальныеСведенияНМАНалоговыйУчет.Выгрузить();
	Движения.ПервоначальныеСведенияНМАНалоговыйУчет.Очистить();
	Для Каждого СтрокаДвижений Из СтрокиДвижений Цикл
		СтрокиТаблицыНМА = ТаблицаНМА.НайтиСтроки(Новый Структура("НематериальныйАктив", СтрокаДвижений.НематериальныйАктив));
		Для Каждого СтрокаСведений Из СтрокиТаблицыНМА Цикл
			СтрокаДвижений.ПервоначальнаяСтоимостьНУ = СтрокаДвижений.ПервоначальнаяСтоимостьНУ + СтрокаСведений.НДС;
			Движение = Движения.ПервоначальныеСведенияНМАНалоговыйУчет.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, СтрокаДвижений);
		КонецЦикла;
	КонецЦикла;
	Движения.ПервоначальныеСведенияНМАНалоговыйУчет.Записывать = Истина;
			
КонецПроцедуры

Процедура СформироватьДвиженияПоСтоимостиОСПриМодернизации(ДанныеПроводок, Реквизиты, Движения, Отказ)
	
	Если ДанныеПроводок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаОС = ДанныеПроводок.Скопировать(,"Субконто1,НДС");
	ТаблицаОС.Свернуть("Субконто1","НДС");
	ТаблицаОС.Колонки.Субконто1.Имя = "ОсновноеСредство";
	
	ТаблицаОС.Индексы.Добавить("ОсновноеСредство");
	
	// Таблица параметров амортизации (БУ)
 	СтрокиДвижений = Движения.ПараметрыАмортизацииОСБухгалтерскийУчет.Выгрузить();
	Движения.ПараметрыАмортизацииОСБухгалтерскийУчет.Очистить();
	Для Каждого СтрокаДвижений Из СтрокиДвижений Цикл
		СтрокиТаблицыОС = ТаблицаОС.НайтиСтроки(Новый Структура("ОсновноеСредство", СтрокаДвижений.ОсновноеСредство));
		Для Каждого СтрокаСведений Из СтрокиТаблицыОС Цикл
			СтрокаДвижений.СтоимостьДляВычисленияАмортизации = СтрокаДвижений.СтоимостьДляВычисленияАмортизации + СтрокаСведений.НДС;
			Движение = Движения.ПараметрыАмортизацииОСБухгалтерскийУчет.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, СтрокаДвижений);
		КонецЦикла;
	КонецЦикла;
    Движения.ПараметрыАмортизацииОСБухгалтерскийУчет.Записывать = Истина;
	
	// Таблица События ОС
 	СтрокиДвижений = Движения.СобытияОСОрганизаций.Выгрузить();
	Движения.СобытияОСОрганизаций.Очистить();
	Для Каждого СтрокаДвижений Из СтрокиДвижений Цикл
		СтрокиТаблицыОС = ТаблицаОС.НайтиСтроки(Новый Структура("ОсновноеСредство", СтрокаДвижений.ОсновноеСредство));
		Для Каждого СтрокаСведений Из СтрокиТаблицыОС Цикл
			СтрокаДвижений.СуммаЗатратБУ = СтрокаДвижений.СуммаЗатратБУ + СтрокаСведений.НДС;
			СтрокаДвижений.СуммаЗатратНУ = СтрокаДвижений.СуммаЗатратНУ + СтрокаСведений.НДС;
			Движение = Движения.СобытияОСОрганизаций.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, СтрокаДвижений);
		КонецЦикла;
	КонецЦикла;
    Движения.СобытияОСОрганизаций.Записывать = Истина;
	
	// Амортизационная премия
	ТаблицаАмортизационнойПремии = Новый ТаблицаЗначений;
	ТаблицаАмортизационнойПремии.Колонки.Добавить("ОсновноеСредство",
		Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	ТаблицаАмортизационнойПремии.Колонки.Добавить("СчетУчета",
		Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаАмортизационнойПремии.Колонки.Добавить("Сумма",
		ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		
	Для Каждого СтрокаДвижений Из ДанныеПроводок Цикл
		Если СтрокаДвижений.ПроцентАмортизационнойПремии > 0 Тогда
			НоваяСтрока = ТаблицаАмортизационнойПремии.Добавить();
			НоваяСтрока.СчетУчета = СтрокаДвижений.СчетЗатрат;
			НоваяСтрока.ОсновноеСредство = СтрокаДвижений.Субконто1;
			НоваяСтрока.Сумма = Окр(СтрокаДвижений.НДС * СтрокаДвижений.ПроцентАмортизационнойПремии / 100, 2);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаАмортизационнойПремии.Свернуть("ОсновноеСредство,СчетУчета","Сумма");
	
	УчетОС.СформироватьДвиженияОтражениеАмортизационнойПремии(ТаблицаАмортизационнойПремии, Реквизиты.Владелец(), Движения, Отказ);

	
	ТаблицаАмортизационнойПремии.Колонки.Сумма.Имя = "СуммаНУ";
	ТаблицаАмортизационнойПремии.Колонки.Добавить("СуммаПР",
		ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаАмортизационнойПремии.Колонки.Добавить("СуммаВР",
		ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		
	Для Каждого СтрокаТаблицы Из ТаблицаАмортизационнойПремии Цикл
		СтрокаТаблицы.СуммаВР =  -СтрокаТаблицы.СуммаНУ; 		
	КонецЦикла;	
		
	ТаблицаАмортизационнойПремии.Колонки.Добавить("ДокументАмортизационнойПремии",
		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыАмортизационнойПремии.ТипЗначения);
	ТаблицаАмортизационнойПремии.ЗаполнитьЗначения(Реквизиты.Регистратор, "ДокументАмортизационнойПремии");
	
	ТаблицаАмортизационнойПремии.Колонки.Добавить("СчетУчетаЗатратПоАмортизационнойПремии",
		Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаАмортизационнойПремии.ЗаполнитьЗначения(Реквизиты.СчетУчетаЗатратПоАмортизационнойПремии,
		"СчетУчетаЗатратПоАмортизационнойПремии");

	ТаблицаАмортизационнойПремии.Колонки.Добавить("ПодразделениеПоАмортизационнойПремии",
		БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	ТаблицаАмортизационнойПремии.ЗаполнитьЗначения(Реквизиты.ПодразделениеПоАмортизационнойПремии,
		"ПодразделениеПоАмортизационнойПремии");

	ОписаниеТиповСубконто = Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип;

	ТаблицаАмортизационнойПремии.Колонки.Добавить("СубконтоПоАмортизационнойПремии1", ОписаниеТиповСубконто);
	ТаблицаАмортизационнойПремии.ЗаполнитьЗначения(Реквизиты.СубконтоПоАмортизационнойПремии1,
		"СубконтоПоАмортизационнойПремии1");

	ТаблицаАмортизационнойПремии.Колонки.Добавить("СубконтоПоАмортизационнойПремии2", ОписаниеТиповСубконто);
	ТаблицаАмортизационнойПремии.ЗаполнитьЗначения(Реквизиты.СубконтоПоАмортизационнойПремии2,
		"СубконтоПоАмортизационнойПремии2");

	ТаблицаАмортизационнойПремии.Колонки.Добавить("СубконтоПоАмортизационнойПремии3", ОписаниеТиповСубконто);
	ТаблицаАмортизационнойПремии.ЗаполнитьЗначения(Реквизиты.СубконтоПоАмортизационнойПремии3,
		"СубконтоПоАмортизационнойПремии3");

	ТаблицаАмортизационнойПремии.Колонки.Добавить("Подразделение",
		БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	ТаблицаАмортизационнойПремии.ЗаполнитьЗначения(Реквизиты.Подразделение,
		"Подразделение");

	УчетОС.СформироватьДвиженияНачислениеАмортизационнойПремии(ТаблицаАмортизационнойПремии, Реквизиты.Владелец(), Движения, Отказ);
		
КонецПроцедуры

#КонецОбласти

#Область ВыбытиеЦенностей

Процедура СформироватьДвиженияВыбытиеТоваров(СписанныеПартииНДС, СписанныеТоварыБухУчет, Реквизиты, Движения, Отказ) Экспорт

	Если СписанныеПартииНДС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Реквизиты.Организация, Реквизиты.Период);
	
	Если НЕ РаздельныйУчетНДСНаСчете19 Тогда
		Возврат;
	КонецЕсли;
		
	//ДВИЖЕНИЯ НДС ДЛЯ КОРРЕКТИРОВКИ ПРЕДЫДУЩЕГО СПОСОБА УЧЕТА НДС
	
	//Восстановим НДС
	СписанныеПартииНДСУменьшениеВычета = СписанныеПартииНДС.НайтиСтроки(Новый Структура(
		"СпособУчетаНДСИзменился, СпособУчетаНДС, ПоставщикПредъявляетНДС",
		Истина, Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету, Истина));
		
	ПустаяТаблицаСписанныеПартии = СписанныеПартииНДС.СкопироватьКолонки();
	ТаблицаВосстановление = ПодготовитьТаблицуВосстановление(СписанныеПартииНДСУменьшениеВычета, ПустаяТаблицаСписанныеПартии);
	
	ЕстьВосстановление = ТаблицаВосстановление.Количество() > 0;
	
	Если ЕстьВосстановление Тогда
		СформироватьДвиженияНДСЗаписиКнигиПродажВосстановлениеНДС(
			ТаблицаВосстановление, Реквизиты, Движения, Отказ);
		ТаблицаНДСПредъявленный = ПодготовитьТаблицуНДСПредъявленныйВосстановление(
			ТаблицаВосстановление, Реквизиты);
		СформироватьДвиженияНДСПредъявленный(ТаблицаНДСПредъявленный, Движения, Отказ, Истина);	
	КонецЕсли;		
	
	//Исключим НДС из стоимости
	СписанныеПартииНДСИсключениеИзСтоимости = СписанныеПартииНДС.Скопировать(Новый Структура(
		"СпособУчетаНДСИзменился, СпособУчетаНДС, ПоставщикПредъявляетНДС",
		Истина, Перечисления.СпособыУчетаНДС.УчитываетсяВCтоимости, Истина));
		
	ЕстьИсключениеИзСтоимости = СписанныеПартииНДСИсключениеИзСтоимости.Количество() > 0;
		
	Если ЕстьИсключениеИзСтоимости Тогда
		Если ТипЗнч(Реквизиты.Регистратор) = Тип("ДокументСсылка.ПринятиеКУчетуОС")
		 ИЛИ ТипЗнч(Реквизиты.Регистратор) = Тип("ДокументСсылка.ПринятиеКУчетуНМА")
		 ИЛИ ТипЗнч(Реквизиты.Регистратор) = Тип("ДокументСсылка.МодернизацияОС") Тогда
			СформироватьПроводкиИсключениеНДСИзСтоимостиОСиНМА(
				СписанныеПартииНДСИсключениеИзСтоимости, СписанныеТоварыБухУчет, Реквизиты, Движения, Отказ);
		Иначе
			СформироватьПроводкиИсключениеНДСИзСтоимости(
				СписанныеПартииНДСИсключениеИзСтоимости, СписанныеТоварыБухУчет, Реквизиты, Движения, Отказ);
		КонецЕсли;
		ТаблицаНДСПредъявленный = ПодготовитьСторноТаблицуНДСПредъявленный(
			СписанныеПартииНДСИсключениеИзСтоимости, Реквизиты, Перечисления.СобытияПоНДСПокупки.НДСВключенВСтоимость);
		УчетНДСБП.СформироватьДвиженияНДСПредъявленныйИсключениеНДСИзСтоимости(
			ТаблицаНДСПредъявленный, Движения, Отказ);
	КонецЕсли;
		
	//Отменим отнесение к операциям, облагаемым по ставке 0%
	СписанныеПартииНДСОтменаСтавки0 = СписанныеПартииНДС.НайтиСтроки(Новый Структура(
		"СпособУчетаНДСИзменился, СпособУчетаНДС, ПоставщикПредъявляетНДС",
		Истина, Перечисления.СпособыУчетаНДС.ДляОперацийПо0, Истина));
		
	ЕстьОтменаОперацийПо0 = СписанныеПартииНДСОтменаСтавки0.Количество() > 0;
		
	Если ЕстьОтменаОперацийПо0 Тогда
		ТаблицаНДСПредъявленный = ПодготовитьСторноТаблицуНДСПредъявленный(
			СписанныеПартииНДСОтменаСтавки0, Реквизиты, Перечисления.СобытияПоНДСПокупки.ПредполагаетсяСтавка0);
		УчетНДСБП.СформироватьДвиженияНДСПредъявленныйИсключениеНДСИзСтоимости(
			ТаблицаНДСПредъявленный, Движения, Отказ);
	КонецЕсли;
	
	//Отменим включение НДС в распределение
	СписанныеПартииНДСОтменаРаспределения = СписанныеПартииНДС.НайтиСтроки(Новый Структура(
		"СпособУчетаНДСИзменился, СпособУчетаНДС, ПоставщикПредъявляетНДС",
		Истина, Перечисления.СпособыУчетаНДС.Распределяется, Истина));
		
	ЕстьОтменаВключенияВРаспределение = СписанныеПартииНДСОтменаРаспределения.Количество() > 0;
		
	Если ЕстьОтменаВключенияВРаспределение Тогда
		ТаблицаНДСПредъявленный = ПодготовитьСторноТаблицуНДСПредъявленный(
			СписанныеПартииНДСОтменаРаспределения, Реквизиты, Перечисления.СобытияПоНДСПокупки.НДСПодлежитРаспределению);
		УчетНДСБП.СформироватьДвиженияНДСПредъявленныйИсключениеНДСИзСтоимости(
			ТаблицаНДСПредъявленный, Движения, Отказ);
	КонецЕсли;
	
	//Отмена распределения НДС, выполненного в прошлых периодах не выполняется (в соответствии с методикой)
	
	//Перенесем НДС на 19 счете на новые способы учета
	ТаблицаКорректировкиСпособаУчетаНаСчете19  = ПодготовитьПроводкиПоКорректировкеСпособаУчетаНДС(СписанныеПартииНДС);
	СформироватьПроводкиПоКорректировкеСпособаУчетаНДС(ТаблицаКорректировкиСпособаУчетаНаСчете19, Реквизиты, Движения, Отказ);
	
	//Спишем партии НДС из регистра НДС раздельный учет
	СформироватьДвиженияНДСРаздельныйУчетВыбытиеЦенностей(СписанныеПартииНДС, Движения, Отказ);
	
	
	//ДВИЖЕНИЯ НДС ПО ОТНЕСЕНИЮ К НОВОМУ СПОСОБУ УЧЕТА НДС
	
	//Распределим НДС
	РаспределяемыеПартииНДС = СписанныеПартииНДС.Скопировать(Новый Структура(
		"СпособУчетаНДСИзменился, НовыйСпособУчетаНДС, ПоставщикПредъявляетНДС",
		Истина, Перечисления.СпособыУчетаНДС.Распределен, Истина));
		
	ЕстьРаспределяемыеПартииНДС = РаспределяемыеПартииНДС.Количество() > 0;
	
	Если ЕстьРаспределяемыеПартииНДС Тогда
		
		//Бух. проводки распределение НДС на 19 счете
		ДанныеПроводок = ПодготовитьДанныеПроводокРаспределениеНДСНаСчете19(РаспределяемыеПартииНДС);
		СформироватьПроводкиПоКорректировкеСпособаУчетаНДС(ДанныеПроводок, Реквизиты, Движения, Отказ);
		
		//Бух. проводки включение НДС в стоимость
		
		Если ТипЗнч(Реквизиты.Регистратор) = Тип("ДокументСсылка.ПринятиеКУчетуОС")
		 ИЛИ ТипЗнч(Реквизиты.Регистратор) = Тип("ДокументСсылка.ПринятиеКУчетуНМА")
		 ИЛИ ТипЗнч(Реквизиты.Регистратор) = Тип("ДокументСсылка.МодернизацияОС") Тогда
		    СформироватьПроводкиВключениеНДСВСтоимостьОСиНМА(РаспределяемыеПартииНДС, Реквизиты, Движения, Отказ);
	 	Иначе
			ДанныеПроводок = ПодготовитьДанныеПроводокВключениеВСтоимостьРаспределениеНДСВыбытиеТоваров(РаспределяемыеПартииНДС);
			СформироватьПроводкиВключениеНДСВСтоимость(ДанныеПроводок, Движения, Отказ);
		КонецЕсли;
		
		//Движения по НДСПредъявленный
		ДанныеДвижений = ПодготовитьДанныеДвиженийНДСПредъявленныйРаспределениеНДСВыбытиеТоваров(РаспределяемыеПартииНДС);
		СформироватьДвиженияНДСПредъявленный(ДанныеДвижений, Движения, Отказ);
		
		//Движения НДСПредъявленныйРеализация0
		ДанныеДвижений = ПодготовитьДанныеДвиженийНДСПредъявленныйРеализация0ВыбытиеТоваров(РаспределяемыеПартииНДС);
		СформироватьДвиженияНДСПредъявленныйРеализация0ПоступлениеЦенностей(ДанныеДвижений, Движения, Отказ);
		
	КонецЕсли;
	
	//Отнесем НДС к новому способу учета
	Если ТипЗнч(Реквизиты.Регистратор) <> Тип("ДокументСсылка.КомплектацияНоменклатуры") Тогда
		ТаблицаДляИзмененияСпособаУчетаНДС = ПодготовитьТаблицуДляИзмененияСпособаУчетаНДС(
			СписанныеПартииНДС, Реквизиты);
			
		СформироватьДвиженияПоступлениеЦенностей(ТаблицаДляИзмененияСпособаУчетаНДС, Реквизиты, Движения, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьПроводкиПоКорректировкеСпособаУчетаНДС(СписанныеПартииНДС)
	
	ТаблицаКорректировкиСпособаУчетаНДС = СписанныеПартииНДС.СкопироватьКолонки("
		|СчетУчетаНДС,Поставщик,СчетФактура,
		|СпособУчетаНДС,НовыйСпособУчетаНДС,НДС");
		
	Для Каждого СтрокаТаблицы Из СписанныеПартииНДС Цикл
		
		Если НЕ СтрокаТаблицы.СпособУчетаНДСИзменился
		    ИЛИ СтрокаТаблицы.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.Распределен Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если СтрокаТаблицы.НовыйСпособУчетаНДС = Перечисления.СпособыУчетаНДС.Распределен Тогда
		   
			Если СтрокаТаблицы.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету Тогда
				
				НДС = СтрокаТаблицы.НДС - СтрокаТаблицы.НДСПринимаетсяКВычету;
				Если НДС <> 0 Тогда
					
					НоваяСтрока = ТаблицаКорректировкиСпособаУчетаНДС.Добавить();
					
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
					НоваяСтрока.НДС = НДС;
					НоваяСтрока.НовыйСпособУчетаНДС = Перечисления.СпособыУчетаНДС.Распределяется;
					
				КонецЕсли;
				
			ИначеЕсли СтрокаТаблицы.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.УчитываетсяВCтоимости Тогда
				
				НДС = СтрокаТаблицы.НДС - СтрокаТаблицы.НДСУчитываетсяВCтоимости;
				Если НДС <> 0 Тогда
					
					НоваяСтрока = ТаблицаКорректировкиСпособаУчетаНДС.Добавить();
					
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
					НоваяСтрока.НДС = НДС;
					НоваяСтрока.НовыйСпособУчетаНДС = Перечисления.СпособыУчетаНДС.Распределяется;
					
				КонецЕсли;
				
			ИначеЕсли СтрокаТаблицы.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ДляОперацийПо0 Тогда
				
				НДС = СтрокаТаблицы.НДС - СтрокаТаблицы.НДСДляОперацийПо0;
				Если НДС <> 0 Тогда
					
					НоваяСтрока = ТаблицаКорректировкиСпособаУчетаНДС.Добавить();
					
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
					НоваяСтрока.НДС = НДС;
					НоваяСтрока.НовыйСпособУчетаНДС = Перечисления.СпособыУчетаНДС.Распределяется;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Если СтрокаТаблицы.НДС <> 0 Тогда
				
				НоваяСтрока = ТаблицаКорректировкиСпособаУчетаНДС.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаКорректировкиСпособаУчетаНДС.Свернуть("
		|СчетУчетаНДС,Поставщик,СчетФактура,СпособУчетаНДС,НовыйСпособУчетаНДС",
		"НДС");
	
	ТаблицаКорректировкиСпособаУчетаНДС.Колонки.Добавить("Содержание",
		Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150)));
	ТаблицаКорректировкиСпособаУчетаНДС.ЗаполнитьЗначения(
		НСтр("ru = 'Корректировка способа учета НДС'"), "Содержание");	
	
	Возврат ТаблицаКорректировкиСпособаУчетаНДС;
	
КонецФункции

Функция ПодготовитьСторноТаблицуНДСПредъявленный(ТаблицаИсключениеИзСтоимости, Реквизиты, Событие)

	ТаблицаНДСПредъявленный = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("НДСПредъявленный");

	Если ТаблицаИсключениеИзСтоимости.Количество() = 0 Тогда
		Возврат ТаблицаНДСПредъявленный;
	КонецЕсли;

	Для каждого СтрокаТаблицы Из ТаблицаИсключениеИзСтоимости Цикл
		
		Если СтрокаТаблицы.СуммаБезНДС = 0 И СтрокаТаблицы.НДС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаНДСПредъявленный.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		НоваяСтрока.СуммаБезНДС = -НоваяСтрока.СуммаБезНДС;
		НоваяСтрока.НДС         = -НоваяСтрока.НДС;
		
	КонецЦикла;

	ТаблицаНДСПредъявленный.ЗаполнитьЗначения(Реквизиты.Период,      "Период");
	ТаблицаНДСПредъявленный.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");
	ТаблицаНДСПредъявленный.ЗаполнитьЗначения(Реквизиты.Период,      "ДатаСобытия");
	ТаблицаНДСПредъявленный.ЗаполнитьЗначения(Событие, "Событие");

	Возврат ТаблицаНДСПредъявленный;

КонецФункции

Функция ПодготовитьТаблицуНДСПредъявленныйВосстановление(ДанныеДвижений, Реквизиты)
	
	ДанныеДвиженийНДСПредъявленный = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("НДСПредъявленный");
		
	Для Каждого СтрокаДвижений Из ДанныеДвижений Цикл
		
		НоваяСтрока = ДанныеДвиженийНДСПредъявленный.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДвижений);
		
		НоваяСтрока.СуммаБезНДС = -СтрокаДвижений.СуммаБезНДС;
		НоваяСтрока.НДС = -СтрокаДвижений.НДС;
		
	КонецЦикла;

	ДанныеДвиженийНДСПредъявленный.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ВосстановленНДС, "Событие");
		
	ДанныеДвиженийНДСПредъявленный.Свернуть("
		|Период,Организация,ДатаСобытия,Событие,
		|СчетФактура,ВидЦенности,СтавкаНДС,СчетУчетаНДС,
		|Поставщик,ДоговорКонтрагента",
		"СуммаБезНДС,НДС");
	
	Возврат ДанныеДвиженийНДСПредъявленный;
	
КонецФункции

Функция ПодготовитьТаблицуВосстановление(СтрокиВключениеВСтоимость, ПустаяТаблицаСписанныеПартии)

	ТаблицаВосстановление = ПустаяТаблицаСписанныеПартии.СкопироватьКолонки();

	Для каждого СтрокаТаблицы Из СтрокиВключениеВСтоимость Цикл

		Если СтрокаТаблицы.НДСПринятоКВычету > 0 Тогда

			НоваяСтрока = ТаблицаВосстановление.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСПринятоКВычету;
			НоваяСтрока.НДС         = СтрокаТаблицы.НДСПринятоКВычету;

		КонецЕсли;

	КонецЦикла;

	Возврат ТаблицаВосстановление;

КонецФункции

Функция ПодготовитьТаблицуДляИзмененияСпособаУчетаНДС(СписанныеПартииНДС, Реквизиты)
	
	ТаблицаЦенностей = СписанныеПартииНДС.СкопироватьКолонки("
		|АналитикаУчетаНДС,ВидЦенности,ДатаСобытия,ИсправленныйСчетФактура,Количество,АналитикаУчетаЗатрат,
		|НДС,Организация,Партия,Период,Поставщик,Регистратор,СпособУчетаНДС,СтавкаНДС,
		|СуммаБезНДС,СчетУчетаНДС,СчетФактура,НовыйСпособУчетаНДС,СпособУчетаНДСИзменился,ПоставщикПредъявляетНДС,
		|СтавкаНДСДокумента,СчетЗатрат,Подразделение,Субконто1,Субконто2,Субконто3,ПроцентАмортизационнойПремии");
	
	ТаблицаЦенностей.Колонки.Добавить("ДоговорКонтрагента",
		Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
		
	Для Каждого СтрокаТаблицы Из СписанныеПартииНДС Цикл
		
		СуммаБезНДС = СтрокаТаблицы.СуммаБезНДС - СтрокаТаблицы.СуммаБезНДСПринятоКВычету; 
		НДС = СтрокаТаблицы.НДС - СтрокаТаблицы.НДСПринятоКВычету;
		
		//Отсутствуют данные о сумме без НДС и сумме НДС. Например, ценность была оприходована.
		ОтсутствуютДанныеОСуммахБезНДСиНДС = СтрокаТаблицы.СуммаБезНДС = 0 И СтрокаТаблицы.НДС = 0;
		
		Если СуммаБезНДС > 0
		 ИЛИ НДС > 0
		 ИЛИ (ОтсутствуютДанныеОСуммахБезНДСиНДС И СтрокаТаблицы.Количество <> 0) Тогда
		
			НоваяСтрока = ТаблицаЦенностей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
			НоваяСтрока.СуммаБезНДС = СуммаБезНДС;
			НоваяСтрока.НДС = НДС;
			
		КонецЕсли;
		
		Если СтрокаТаблицы.СуммаБезНДСПринятоКВычету > 0
		 ИЛИ СтрокаТаблицы.НДСПринятоКВычету > 0 Тогда
		 
			НоваяСтрока = ТаблицаЦенностей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			Если СтрокаТаблицы.НовыйСпособУчетаНДС = Перечисления.СпособыУчетаНДС.УчитываетсяВCтоимости Тогда
				НоваяСтрока.НовыйСпособУчетаНДС = Перечисления.СпособыУчетаНДС.ВосстановленУчитываетсяВCтоимости;
			ИначеЕсли СтрокаТаблицы.НовыйСпособУчетаНДС = Перечисления.СпособыУчетаНДС.ДляОперацийПо0 Тогда
				НоваяСтрока.НовыйСпособУчетаНДС = Перечисления.СпособыУчетаНДС.ВосстановленДляОперацийПо0;
			КонецЕсли;
			
			Если СуммаБезНДС > 0 ИЛИ НДС > 0 Тогда
				НоваяСтрока.Количество = 0;
			КонецЕсли;
			
			НоваяСтрока.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСПринятоКВычету;
			НоваяСтрока.НДС = СтрокаТаблицы.НДСПринятоКВычету;
			
		КонецЕсли;
		
	КонецЦикла;
	
    Возврат ТаблицаЦенностей;
	
КонецФункции

Функция ПодготовитьДанныеДвиженийНДСПредъявленныйРеализация0ВыбытиеТоваров(ПартииНДС)
	
	ДанныеДвижений = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("НДСПредъявленныйРеализация0");
	
	Для Каждого СтрокаТаблицы Из ПартииНДС Цикл
		
		Если СтрокаТаблицы.НДСДляОперацийПо0 = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ДанныеДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
		НоваяСтрока.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСДляОперацийПо0;
		НоваяСтрока.НДС = СтрокаТаблицы.НДСДляОперацийПо0;
		
	КонецЦикла;
	
	ДанныеДвижений.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение, "Состояние");
	ДанныеДвижений.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредполагаетсяСтавка0, "Событие");
	
	ДанныеДвижений.Свернуть("Период,Организация,СчетФактура,Состояние,ДатаСобытия,Событие,
							|ДокументОтгрузки,ВидЦенности,СтавкаНДС,СчетУчетаНДС",
							"СуммаБезНДС,НДС");
							
	Возврат ДанныеДвижений;
	
КонецФункции

Функция ПодготовитьДанныеПроводокВключениеВСтоимостьРаспределениеНДСВыбытиеТоваров(ПартииНДС)
	
	ДанныеПроводок = ПартииНДС.СкопироватьКолонки("
		|Организация,Период,
		|СчетЗатрат,Подразделение,Субконто1,Субконто2,Субконто3,
		|СчетУчетаНДС,СчетФактура,Поставщик,
		|НДС");
		
	ДанныеПроводок.Колонки.Добавить("Содержание",
		Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150)));
		
	Для Каждого СтрокаТаблицы Из ПартииНДС Цикл
		
		Если СтрокаТаблицы.НДСУчитываетсяВCтоимости = 0
		 ИЛИ СтрокаТаблицы.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.УчитываетсяВCтоимости Тогда
			Продолжить;
		КонецЕсли;
		
		//Считаем, что восстанавливаемый НДС в первую очередь относится к экспорту
		ОстатокВосстановленногоНДС = Макс(СтрокаТаблицы.НДСПринятоКВычету - СтрокаТаблицы.НДСДляОперацийПо0, 0);
		
		НоваяСтрока = ДанныеПроводок.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		НоваяСтрока.НДС = СтрокаТаблицы.НДСУчитываетсяВCтоимости - ОстатокВосстановленногоНДС;
		НоваяСтрока.Содержание = НСтр("ru = 'НДС включен в стоимость ценностей'");
		
		Если ОстатокВосстановленногоНДС > 0 Тогда
			
			НоваяСтрока = ДанныеПроводок.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.НДС = ОстатокВосстановленногоНДС;
			
			НоваяСтрока.СчетЗатрат = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
			
			СвойстваСчетаЗатрат = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(НоваяСтрока.СчетЗатрат);
			Если НЕ СвойстваСчетаЗатрат.УчетПоПодразделениям Тогда
				НоваяСтрока.Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
			КонецЕсли;
			
			НоваяСтрока.Субконто1 = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.СписаниеНДСНаПрочиеРасходы");
			НоваяСтрока.Субконто2 = Неопределено;
			НоваяСтрока.Субконто3 = Неопределено;
			
			НоваяСтрока.Содержание = НСтр("ru = 'Списан на расходы НДС, ранее принятый к вычету'");
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеПроводок.Колонки.Добавить("НовыйСпособУчетаНДС",
		Новый ОписаниеТипов("ПеречислениеСсылка.СпособыУчетаНДС"));
	ДанныеПроводок.ЗаполнитьЗначения(Перечисления.СпособыУчетаНДС.УчитываетсяВCтоимости, "НовыйСпособУчетаНДС");	
	
	ДанныеПроводок.Свернуть("
		|Организация,Период,Содержание,
		|СчетЗатрат,Подразделение,Субконто1,Субконто2,Субконто3,
		|СчетУчетаНДС,СчетФактура,Поставщик,НовыйСпособУчетаНДС",
		"НДС");
	
	Возврат ДанныеПроводок;
	
КонецФункции

Функция ПодготовитьДанныеДвиженийНДСПредъявленныйРаспределениеНДСВыбытиеТоваров(ПартииНДС)
	
	ДанныеДвижений = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("НДСПредъявленный");
	
	Для Каждого СтрокаТаблицы Из ПартииНДС Цикл
		
		СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСПринимаетсяКВычету - СтрокаТаблицы.СуммаБезНДСПринятоКВычету;
		НДС = СтрокаТаблицы.НДСПринимаетсяКВычету - СтрокаТаблицы.НДСПринятоКВычету; 
		
		Если СуммаБезНДС <> 0 ИЛИ НДС <> 0 Тогда
			
			НоваяСтрока = ДанныеДвижений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			
			НоваяСтрока.СуммаБезНДС = СуммаБезНДС;
			НоваяСтрока.НДС = НДС;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеДвижений.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.НДСРаспределен, "Событие");
	
	ДанныеДвижений.Свернуть("Период,Организация,СчетФактура,ВидЦенности,
							|СтавкаНДС,СчетУчетаНДС,Поставщик,ДатаОплаты,Событие,
							|ДоговорКонтрагента,ИсправленныйСчетФактура,ДатаСобытия",
							"СуммаБезНДС,НДС");
							
	Возврат ДанныеДвижений;
	
КонецФункции

#КонецОбласти

#Область ПодготовкаТаблицыНДСПоСписаннымЦенностям

Функция ПолучитьТаблицуСписанныеПартииНДС(Товары, СписанныеТоварыБухУчет, Реквизиты, Отказ) Экспорт

    СписанныеПартииНДС = ПустаяТаблицаСписанныеПартииНДС();
	
	Если Товары.Количество() = 0 Тогда
		Возврат СписанныеПартииНДС;
	КонецЕсли;
	
	ЕстьДополнительнаяКолонкаСуммаСписания = 
		СписанныеТоварыБухУчет.Колонки.Найти("СуммаСписания") <> Неопределено;
		
	ЕстьДополнительнаяКолонкаСуммаСписанияНУ = 
		СписанныеТоварыБухУчет.Колонки.Найти("СуммаСписанияНУ") <> Неопределено;
		
	ЕстьДополнительнаяКолонкаСуммаКорСписанияНУ = 
		СписанныеТоварыБухУчет.Колонки.Найти("СуммаКорСписанияНУ") <> Неопределено;
		
	ЕстьДополнительныеКолонки = 
		ЕстьДополнительнаяКолонкаСуммаСписания
		И ЕстьДополнительнаяКолонкаСуммаСписанияНУ
		И ЕстьДополнительнаяКолонкаСуммаКорСписанияНУ;
	
	ПодготовитьТаблицуТовары(Товары);
	ПодготовитьТаблицуСписанныеТоварыБухУчет(СписанныеТоварыБухУчет, Реквизиты);
	ОтсутствуетКоличественныйУчет = СписанныеТоварыБухУчет.Итог("КоличественныйУчет") = 0;
	
	ТаблицыОстатковПартийНДС = ПолучитьОстаткиПартийНДС(СписанныеТоварыБухУчет, Реквизиты);
	
	КонтролироватьОстаток = НЕ БухгалтерскийУчетПереопределяемый.ОтключитьКонтрольОтрицательныхОстатков();
	
	СоответствиеСтрокТаблицыНДССтрокамТаблицыТоварыБухУчет = Новый Соответствие;
	
	// Определяем списанные партии товаров
	Для каждого СтрокаДокумента Из Товары Цикл

		ОтборПартийБухУчет = Новый Структура("ИмяСписка,НомерСтроки",
			СтрокаДокумента.ИмяСписка, СтрокаДокумента.НомерСтрокиДокумента);
		СписанныеТоварыПоСтрокеБухУчет = СписанныеТоварыБухУчет.НайтиСтроки(ОтборПартийБухУчет);

		Для каждого СписаннаяПартияБухУчет Из СписанныеТоварыПоСтрокеБухУчет Цикл
			
			Если ОтсутствуетКоличественныйУчет Тогда
				
				КоэффициентСписанияДопРасходов = 1 / Товары.Количество(); 
				
				ОтборДопРасходов = Новый Структура("АналитикаУчетаЗатрат", СписаннаяПартияБухУчет.АналитикаУчетаЗатрат);
				ОстаткиДопРасходов = ТаблицыОстатковПартийНДС.ДопРасходы.Скопировать(ОтборДопРасходов);
				ЗаполнитьПорядокСписанияПартийПоСпособуУчетаНДС(ОстаткиДопРасходов, СтрокаДокумента.НовыйСпособУчетаНДС);
				ОстаткиДопРасходов.Сортировать(
					"ПорядокСписанияПартийПоСпособуУчетаНДС,ДатаПартии,Партия,ДатаСФ,СчетФактура", Новый СравнениеЗначений);

				Для каждого СтрокаОстаткаДопРасхода Из ОстаткиДопРасходов Цикл

					СписаннаяСуммаБезНДС	= Окр(СтрокаОстаткаДопРасхода.СуммаБезНДС * КоэффициентСписанияДопРасходов, 2);
					СписанныйНДС			= Окр(СтрокаОстаткаДопРасхода.НДС * КоэффициентСписанияДопРасходов, 2);

					НоваяСтрока = СписанныеПартииНДС.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокумента);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОстаткаДопРасхода);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СписаннаяПартияБухУчет.КорАналитикаУчетаЗатрат);
					ЗаполнитьСпособУчетаНДСИзменился(НоваяСтрока);
					
					НоваяСтрока.Количество	= 0;
					НоваяСтрока.СуммаБезНДС	= СписаннаяСуммаБезНДС;
					НоваяСтрока.НДС			= СписанныйНДС;
					
				КонецЦикла;
				
				Продолжить;
				
			КонецЕсли;
			
			ОтборПартийНДС = Новый Структура("АналитикаУчетаЗатрат", СписаннаяПартияБухУчет.АналитикаУчетаЗатрат);

			ОстаткиПартийНДСПоСтроке = ТаблицыОстатковПартийНДС.Товары.Скопировать(ОтборПартийНДС);
			ЗаполнитьПорядокСписанияПартийПоСпособуУчетаНДС(ОстаткиПартийНДСПоСтроке, СтрокаДокумента.НовыйСпособУчетаНДС);
			ОстаткиПартийНДСПоСтроке.Сортировать(
				"ПорядокСписанияПартийПоСпособуУчетаНДС,ДатаПартии,Партия,ДатаСФ,СчетФактура", Новый СравнениеЗначений);

			ОстатокПоАналитикеУчетаЗатрат =  ОстаткиПартийНДСПоСтроке.Итог("Количество");
			
			КоличествоОсталосьПогасить = СписаннаяПартияБухУчет.Количество;
			
			Для каждого ОстатокПартии Из ОстаткиПартийНДСПоСтроке Цикл

				Если КоличествоОсталосьПогасить <= 0 Тогда
					Прервать;
				ИначеЕсли ОстатокПартии.Количество <= 0 Тогда
					Продолжить;
				КонецЕсли;

				Количество = Мин(ОстатокПартии.Количество, КоличествоОсталосьПогасить);

				СуммаБезНДС	= Окр(ОстатокПартии.СуммаБезНДС * Количество / ОстатокПартии.Количество, 2);
				НДС	= Окр(ОстатокПартии.НДС * Количество / ОстатокПартии.Количество, 2);

				КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - Количество;

				СтрокаТаблицыОстатков = ТаблицыОстатковПартийНДС.Товары.Найти(ОстатокПартии.НомерСтроки, "НомерСтроки");
				СтрокаТаблицыОстатков.Количество = СтрокаТаблицыОстатков.Количество - Количество;
				СтрокаТаблицыОстатков.СуммаБезНДС  = СтрокаТаблицыОстатков.СуммаБезНДС - СуммаБезНДС;
				СтрокаТаблицыОстатков.НДС        = СтрокаТаблицыОстатков.НДС - НДС;

				НоваяСтрока = СписанныеПартииНДС.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокумента);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ОстатокПартии);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СписаннаяПартияБухУчет.КорАналитикаУчетаЗатрат);
                ЗаполнитьСпособУчетаНДСИзменился(НоваяСтрока);
				
				НоваяСтрока.Количество = Количество;
				НоваяСтрока.СуммаБезНДС  = СуммаБезНДС;
				НоваяСтрока.НДС = НДС;
				
				Если НоваяСтрока.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.УчитываетсяВCтоимости
					И НоваяСтрока.СпособУчетаНДСИзменился 
					И ЕстьДополнительныеКолонки Тогда
					СоответствиеСтрокТаблицыНДССтрокамТаблицыТоварыБухУчет.Вставить(НоваяСтрока, СписаннаяПартияБухУчет);
				КонецЕсли;
				
				// Определяем списанные доп.расходы (пропорционально списанному количеству партий товаров)
				КоэффициентСписанияДопРасходов = Количество / ОстатокПоАналитикеУчетаЗатрат;

				ЗаполнитьПорядокСписанияПартийПоСпособуУчетаНДС(
					ТаблицыОстатковПартийНДС.ДопРасходы, СтрокаДокумента.НовыйСпособУчетаНДС);
				ТаблицыОстатковПартийНДС.ДопРасходы.Сортировать(
					"ПорядокСписанияПартийПоСпособуУчетаНДС,ДатаПартии,Партия", Новый СравнениеЗначений);
				
				ОтборДопРасходов = Новый Структура("АналитикаУчетаЗатрат", ОстатокПартии.АналитикаУчетаЗатрат);
				ОстаткиДопРасходов = ТаблицыОстатковПартийНДС.ДопРасходы.НайтиСтроки(ОтборДопРасходов);

				Для каждого СтрокаОстаткаДопРасхода Из ОстаткиДопРасходов Цикл

					СписаннаяСуммаБезНДС	= Окр(СтрокаОстаткаДопРасхода.СуммаБезНДС * КоэффициентСписанияДопРасходов, 2);
					СписанныйНДС			= Окр(СтрокаОстаткаДопРасхода.НДС * КоэффициентСписанияДопРасходов, 2);

					НоваяСтрока = СписанныеПартииНДС.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокумента);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОстаткаДопРасхода);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СписаннаяПартияБухУчет.КорАналитикаУчетаЗатрат);
					ЗаполнитьСпособУчетаНДСИзменился(НоваяСтрока);
					
					НоваяСтрока.Количество	= 0;
					НоваяСтрока.СуммаБезНДС	= СписаннаяСуммаБезНДС;
					НоваяСтрока.НДС			= СписанныйНДС;

					СтрокаОстаткаДопРасхода.СуммаБезНДС	= СтрокаОстаткаДопРасхода.СуммаБезНДС - СписаннаяСуммаБезНДС;
					СтрокаОстаткаДопРасхода.НДС			= СтрокаОстаткаДопРасхода.НДС - СписанныйНДС;
					
					Если НоваяСтрока.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.УчитываетсяВCтоимости
						И НоваяСтрока.СпособУчетаНДСИзменился 
						И ЕстьДополнительныеКолонки Тогда
						СоответствиеСтрокТаблицыНДССтрокамТаблицыТоварыБухУчет.Вставить(НоваяСтрока, СписаннаяПартияБухУчет);
					КонецЕсли;
					
				КонецЦикла;

			КонецЦикла;
			
			Если КоличествоОсталосьПогасить > 0 И КонтролироватьОстаток Тогда

				СпособОценкиМПЗПоСредней = (УчетнаяПолитика.СпособОценкиМПЗ(Реквизиты.Организация, Реквизиты.Период)
					= Перечисления.СпособыОценки.ПоСредней);
				
				СкладИзБухУчета  = БухгалтерскийУчетВызовСервераПовтИсп.ВедетсяСуммовойУчетПоСкладам(СтрокаДокумента.СчетУчета);
				ПартияИзБухУчета = НЕ СпособОценкиМПЗПоСредней
					И БухгалтерскийУчетВызовСервераПовтИсп.НаСчетеВедетсяПартионныйУчет(СтрокаДокумента.СчетУчета);
				
				ТекстОшибки1 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Для целей учета НДС не списано %1 товара %2, счет учета: %3'"),
					Формат(КоличествоОсталосьПогасить, "ЧЦ=15; ЧДЦ=3"),
					СтрокаДокумента.Номенклатура,
					СтрокаДокумента.СчетУчета);
				Если СкладИзБухУчета Тогда
					ТекстОшибки2 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru=', склад: %1'"),
						СписаннаяПартияБухУчет.Склад);
				Иначе
					ТекстОшибки2 = "";
				КонецЕсли;
				Если ПартияИзБухУчета Тогда
					ТекстОшибки3 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru=', партия: %1'"),
						СписаннаяПартияБухУчет.Партия);
				Иначе
					ТекстОшибки3 = "";
				КонецЕсли;
				
				Если ТипЗнч(Реквизиты.Регистратор) = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") Тогда
					ПолеКоличество	= "ДокументОтгрузки";
				Иначе
					ПолеКоличество	= СтрокаДокумента.ИмяСписка + "[" + Формат(СтрокаДокумента.НомерСтрокиДокумента - 1, "ЧН=0; ЧГ=") + "].Количество";
				КонецЕсли;
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки1 + ТекстОшибки2 + ТекстОшибки3,
					Реквизиты.Регистратор, ПолеКоличество, "Объект", Отказ);
				
			КонецЕсли;

		КонецЦикла;

	КонецЦикла;
	
	СписанныеПартииНДС.ЗаполнитьЗначения(Реквизиты.Период,      "Период,ДатаСобытия");
	СписанныеПартииНДС.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");
	СписанныеПартииНДС.ЗаполнитьЗначения(Реквизиты.Регистратор, "Регистратор");
	
	//Проверка предъявляет ли поставщик НДС
	ЗаполнитьЗначениеПоставщикПредъявляетНДС(СписанныеПартииНДС);
	СписанныеПартииНДС.Индексы.Добавить("ПоставщикПредъявляетНДС");
	
	//Теперь очистим стоимость от НДС, там, где это нужно
	Для Каждого ЭлементСоответствия Из СоответствиеСтрокТаблицыНДССтрокамТаблицыТоварыБухУчет Цикл
		
		Если ЭлементСоответствия.Ключ.ПоставщикПредъявляетНДС Тогда
			
			ЭлементСоответствия.Значение.СуммаСписания = ЭлементСоответствия.Значение.СуммаСписания - ЭлементСоответствия.Ключ.НДС;
			ЭлементСоответствия.Значение.СуммаСписанияНУ = ЭлементСоответствия.Значение.СуммаСписанияНУ - ЭлементСоответствия.Ключ.НДС;
			ЭлементСоответствия.Значение.СуммаКорСписанияНУ = ЭлементСоответствия.Значение.СуммаКорСписанияНУ - ЭлементСоответствия.Ключ.НДС;
			
		КонецЕсли;
		
	КонецЦикла;
			
	//Проверка необходимости распределения НДС
	СписанныеПартииНДС.Индексы.Добавить("НовыйСпособУчетаНДС");
	
	СтрокиДляРаспределения = СписанныеПартииНДС.НайтиСтроки(Новый Структура(
		"НовыйСпособУчетаНДС,ПоставщикПредъявляетНДС", Перечисления.СпособыУчетаНДС.Распределяется, Истина));
		
	ОпределитьСуммыДляРаспределенияНДС(СтрокиДляРаспределения, Реквизиты, Отказ);	
		
	СписанныеПартииНДС.Индексы.Добавить("СпособУчетаНДСИзменился");
	ОпределитьПоставщиковПоСписаннымПартиямНДС(СписанныеПартииНДС);
	УчетНДСБП.ОпределитьИсправленныеСчетаФактуры(СписанныеПартииНДС, Реквизиты);		
	
	//Проверка необходимости восстановления НДС
	
	СписанныеПартииНДС.Индексы.Добавить("СпособУчетаНДС");
	СтрокиДляРасчетаСуммыРанееПринятогоКВычетуНДС = СписанныеПартииНДС.НайтиСтроки(Новый Структура(
		"СпособУчетаНДСИзменился,СпособУчетаНДС,ПоставщикПредъявляетНДС",
		Истина, Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету, Истина));
		
	ОпределитьСуммуРанееПринятогоКВычетуНДС(СтрокиДляРасчетаСуммыРанееПринятогоКВычетуНДС, Реквизиты);
		
	Возврат СписанныеПартииНДС;

КонецФункции

Функция ПустаяТаблицаСписанныеПартииНДС()
	
	СписанныеПартииНДС = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("НДСРаздельныйУчет");

	//Добавим колонки для развернутой аналитики учета НДС
	СписанныеПартииНДС.Колонки.Добавить("СчетФактура",
		Новый ОписаниеТипов(Документы.ТипВсеСсылки()));
	СписанныеПартииНДС.Колонки.Добавить("ВидЦенности",
		Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЦенностей"));
	СписанныеПартииНДС.Колонки.Добавить("СчетУчетаНДС",
		Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	СписанныеПартииНДС.Колонки.Добавить("СтавкаНДС",
		Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
		
	//Добавим колонки для развернутой аналитики учета затрат
	СписанныеПартииНДС.Колонки.Добавить("СчетЗатрат",
		Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	СписанныеПартииНДС.Колонки.Добавить("Подразделение",
		Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	СписанныеПартииНДС.Колонки.Добавить("Субконто1");
	СписанныеПартииНДС.Колонки.Добавить("Субконто2");
	СписанныеПартииНДС.Колонки.Добавить("Субконто3");
		
	СписанныеПартииНДС.Колонки.Добавить("ИмяСписка",
		Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
	СписанныеПартииНДС.Колонки.Добавить("НомерСтрокиДокумента",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0)));
		
	СписанныеПартииНДС.Колонки.Добавить("Регистратор",
		Новый ОписаниеТипов(Документы.ТипВсеСсылки()));
	СписанныеПартииНДС.Колонки.Добавить("ДатаСобытия",
		Новый ОписаниеТипов("Дата"));
	СписанныеПартииНДС.Колонки.Добавить("ДатаПартии",
		Новый ОписаниеТипов("Дата"));
	СписанныеПартииНДС.Колонки.Добавить("НовыйСпособУчетаНДС",
		Новый ОписаниеТипов("ПеречислениеСсылка.СпособыУчетаНДС"));
	СписанныеПартииНДС.Колонки.Добавить("СтавкаНДСДокумента",
		Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	СписанныеПартииНДС.Колонки.Добавить("СпособУчетаНДСИзменился",
		Новый ОписаниеТипов("Булево"));
		
	СписанныеПартииНДС.Колонки.Добавить("Поставщик",
		Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));		
		
	//Колонки для распределения по периоду поступления	
	СписанныеПартииНДС.Колонки.Добавить("НДСПринимаетсяКВычету",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	СписанныеПартииНДС.Колонки.Добавить("СуммаБезНДСПринимаетсяКВычету",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	СписанныеПартииНДС.Колонки.Добавить("НДСУчитываетсяВCтоимости",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	СписанныеПартииНДС.Колонки.Добавить("СуммаБезНДСУчитываетсяВCтоимости",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	СписанныеПартииНДС.Колонки.Добавить("НДСДляОперацийПо0",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	СписанныеПартииНДС.Колонки.Добавить("СуммаБезНДСДляОперацийПо0",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
		
	//Колонки для учета возможности восстановления
	СписанныеПартииНДС.Колонки.Добавить("СуммаБезНДСПринятоКВычету",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	СписанныеПартииНДС.Колонки.Добавить("НДСПринятоКВычету",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
    СписанныеПартииНДС.Колонки.Добавить("Покупатель",
		Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		
	//Амортизационная премия
	СписанныеПартииНДС.Колонки.Добавить("ПроцентАмортизационнойПремии",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4,2)));
		
	СписанныеПартииНДС.Колонки.Добавить("ПоставщикПредъявляетНДС",
		Новый ОписаниеТипов("Булево"));
		
	Возврат СписанныеПартииНДС;	
		
КонецФункции

Процедура ПодготовитьТаблицуТовары(Товары)
	
	Если Товары.Колонки.Найти("НовыйСпособУчетаНДС") <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Товары.Колонки.Добавить("НовыйСпособУчетаНДС",
		Новый ОписаниеТипов("ПеречислениеСсылка.СпособыУчетаНДС"));
	
	Если Товары.Колонки.Найти("СтавкаНДСДокумента") <> Неопределено Тогда
			
		Для Каждого СтрокаТаблицы Из Товары Цикл
			Если СтрокаТаблицы.СтавкаНДСДокумента = Перечисления.СтавкиНДС.БезНДС Тогда
				СтрокаТаблицы.НовыйСпособУчетаНДС = Перечисления.СпособыУчетаНДС.УчитываетсяВCтоимости;
			ИначеЕсли СтрокаТаблицы.СтавкаНДСДокумента = Перечисления.СтавкиНДС.НДС0 Тогда
				СтрокаТаблицы.НовыйСпособУчетаНДС = Перечисления.СпособыУчетаНДС.ДляОперацийПо0;
			Иначе
				СтрокаТаблицы.НовыйСпособУчетаНДС = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету;
			КонецЕсли;
		КонецЦикла;	
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьТаблицуСписанныеТоварыБухУчет(СписанныеТоварыБухУчет, Реквизиты)
	
	СпособОценкиМПЗПоСредней = (УчетнаяПолитика.СпособОценкиМПЗ(Реквизиты.Организация, Реквизиты.Период)
		= Перечисления.СпособыОценки.ПоСредней);

	СписанныеТоварыБухУчет.Колонки.Добавить("АналитикаУчетаЗатрат",
		Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиУчетаЗатрат"));	
		
	СписанныеТоварыБухУчет.Колонки.Добавить("КоличественныйУчет",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1,0)));
		
	СписанныеТоварыБухУчет.Колонки.Добавить("КорАналитикаУчетаЗатрат",
		Новый ОписаниеТипов("Структура"));	
		
	Для Каждого СтрокаТаблицы Из СписанныеТоварыБухУчет Цикл
		
		АналитикаУчетаЗатрат = Новый Структура("Организация,СчетЗатрат,Подразделение,Субконто1,Субконто2,Субконто3");
		
		АналитикаУчетаЗатрат.Организация = Реквизиты.Организация;
		АналитикаУчетаЗатрат.СчетЗатрат = СтрокаТаблицы.СчетУчета;
		
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(АналитикаУчетаЗатрат.СчетЗатрат);
		
		Если СвойстваСчета.УчетПоПодразделениям Тогда
			АналитикаУчетаЗатрат.Подразделение = СтрокаТаблицы.Подразделение;
		КонецЕсли;
		
		Для Ном = 1 По СвойстваСчета.КоличествоСубконто Цикл
			Если СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура
			 ИЛИ СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства
			 ИЛИ СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы
			 ИЛИ СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыНаНИОКР Тогда
			 	АналитикаУчетаЗатрат["Субконто" + Ном] = СтрокаТаблицы.Номенклатура;
			ИначеЕсли СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады Тогда
				Если БухгалтерскийУчетВызовСервераПовтИсп.ВедетсяСуммовойУчетПоСкладам(АналитикаУчетаЗатрат.СчетЗатрат) Тогда
					АналитикаУчетаЗатрат["Субконто" + Ном] = СтрокаТаблицы.Склад;
				КонецЕсли;
	        ИначеЕсли СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии Тогда
				Если НЕ СпособОценкиМПЗПоСредней Тогда
					АналитикаУчетаЗатрат["Субконто" + Ном] = СтрокаТаблицы.Партия;
				КонецЕсли;
	        ИначеЕсли СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты Тогда
				АналитикаУчетаЗатрат["Субконто" + Ном] = Реквизиты.Контрагент;
			КонецЕсли;
		КонецЦикла;
		
		СтрокаТаблицы.АналитикаУчетаЗатрат = Справочники.КлючиАналитикиУчетаЗатрат.КлючиАналитикиУчетаЗатратДокумента(АналитикаУчетаЗатрат);
		СтрокаТаблицы.КоличественныйУчет = Число(СвойстваСчета.Количественный);
		
		
		КорАналитикаУчетаЗатрат = Новый Структура("Организация,СчетЗатрат,Подразделение,Субконто1,Субконто2,Субконто3");
		
		КорАналитикаУчетаЗатрат.Организация = Реквизиты.Организация;
		КорАналитикаУчетаЗатрат.СчетЗатрат = СтрокаТаблицы.КорСчетСписания;
		
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(КорАналитикаУчетаЗатрат.СчетЗатрат);
		Если СвойстваСчета.УчетПоПодразделениям Тогда
			КорАналитикаУчетаЗатрат.Подразделение = СтрокаТаблицы.КорПодразделение;
		КонецЕсли;
		Для Ном = 1 По СвойстваСчета.КоличествоСубконто Цикл
			Если СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады Тогда
				Если НЕ БухгалтерскийУчетВызовСервераПовтИсп.ВедетсяСуммовойУчетПоСкладам(КорАналитикаУчетаЗатрат.СчетЗатрат) Тогда
					Продолжить;
				КонецЕсли;
	        ИначеЕсли СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии Тогда
				Если СпособОценкиМПЗПоСредней Тогда
					Продолжить;
				Иначе
					КорАналитикаУчетаЗатрат["Субконто" + Ном] = СтрокаТаблицы.Партия;	
				КонецЕсли;
			КонецЕсли;
			Для КорНом = 1 По 3 Цикл
				Если СвойстваСчета["ВидСубконто" + Ном] = СтрокаТаблицы["ВидКорСубконто" + КорНом]
				 ИЛИ СтрокаТаблицы["ВидКорСубконто" + КорНом] = Ном Тогда
				 	КорАналитикаУчетаЗатрат["Субконто" + Ном] = СтрокаТаблицы["КорСубконто" + КорНом];
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		СтрокаТаблицы.КорАналитикаУчетаЗатрат = КорАналитикаУчетаЗатрат;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьОстаткиПартийНДС(СписанныеТовары, Реквизиты)

	// Блокируем регистр НДСРаздельныйУчет для получения остатков
	Если ТранзакцияАктивна() Тогда
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.НДСРаздельныйУчет");
		ЭлементБлокировки.УстановитьЗначение("Период",      Новый Диапазон(, Реквизиты.Период));
		ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
		ЭлементБлокировки.ИсточникДанных = СписанныеТовары;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("АналитикаУчетаЗатрат", "АналитикаУчетаЗатрат");
		Блокировка.Заблокировать();
		
	КонецЕсли;

	// Получаем остатки регистра НДСРаздельныйУчет
	Запрос = Новый Запрос;
	
	МоментВремениРегистратор = Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор);
	
	Если ТипЗнч(Реквизиты.Регистратор) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		МоментСписания = Новый Граница(МоментВремениРегистратор, ВидГраницы.Включая);
	Иначе
		МоментСписания = МоментВремениРегистратор;
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("МоментСписания", МоментСписания);
	Запрос.УстановитьПараметр("Организация",    Реквизиты.Организация);
	Запрос.УстановитьПараметр("ТаблицаСписанныеТоварыБух",  СписанныеТовары);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаСписанныеТоварыБух.СчетУчета КАК СчетУчета,
	|	ТаблицаСписанныеТоварыБух.АналитикаУчетаЗатрат КАК АналитикаУчетаЗатрат
	|ПОМЕСТИТЬ ТаблицаСписанныеТоварыБух
	|ИЗ
	|	&ТаблицаСписанныеТоварыБух КАК ТаблицаСписанныеТоварыБух
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Организация КАК Организация,
	|	ТаблицаСписанныеТоварыБух.СчетУчета КАК СчетУчета,
	|	ТаблицаСписанныеТоварыБух.АналитикаУчетаЗатрат КАК АналитикаУчетаЗатрат
	|ПОМЕСТИТЬ ТаблицаСписанныхТоваров
	|ИЗ
	|	ТаблицаСписанныеТоварыБух КАК ТаблицаСписанныеТоварыБух
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|		ПО ТаблицаСписанныеТоварыБух.СчетУчета = Хозрасчетный.Ссылка
	|ГДЕ
	|	НЕ ЕСТЬNULL(Хозрасчетный.Забалансовый, ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСРаздельныйУчетОстатки.АналитикаУчетаЗатрат КАК АналитикаУчетаЗатрат,
	|	НДСРаздельныйУчетОстатки.АналитикаУчетаНДС КАК АналитикаУчетаНДС,
	|	РегистрАналитикаУчетаНДС.СчетФактура КАК СчетФактура,
	|	РегистрАналитикаУчетаНДС.ВидЦенности,
	|	РегистрАналитикаУчетаНДС.СчетУчетаНДС,
	|	РегистрАналитикаУчетаНДС.СтавкаНДС,
	|	НДСРаздельныйУчетОстатки.Партия КАК Партия,
	|	НДСРаздельныйУчетОстатки.СпособУчетаНДС КАК СпособУчетаНДС,
	|	ВЫБОР
	|		КОГДА НДСРаздельныйУчетОстатки.КоличествоОстаток > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьКоличество,
	|	НДСРаздельныйУчетОстатки.КоличествоОстаток КАК Количество,
	|	НДСРаздельныйУчетОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	НДСРаздельныйУчетОстатки.НДСОстаток КАК НДС
	|ПОМЕСТИТЬ ВТНДСРаздельныйУчетОстатки
	|ИЗ
	|	РегистрНакопления.НДСРаздельныйУчет.Остатки(
	|			&МоментСписания,
	|			(Организация, АналитикаУчетаЗатрат) В
	|				(ВЫБРАТЬ
	|					ТаблицаСписанныхТоваров.Организация,
	|					ТаблицаСписанныхТоваров.АналитикаУчетаЗатрат
	|				ИЗ
	|					ТаблицаСписанныхТоваров)) КАК НДСРаздельныйУчетОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНДС КАК РегистрАналитикаУчетаНДС
	|		ПО НДСРаздельныйУчетОстатки.АналитикаУчетаНДС = РегистрАналитикаУчетаНДС.КлючАналитики
	|ГДЕ
	|	НДСРаздельныйУчетОстатки.СуммаБезНДСОстаток >= 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура,
	|	Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТНДСРаздельныйУчетОстатки.АналитикаУчетаЗатрат,
	|	ВТНДСРаздельныйУчетОстатки.АналитикаУчетаНДС,
	|	ВТНДСРаздельныйУчетОстатки.СпособУчетаНДС,
	|	ВТНДСРаздельныйУчетОстатки.Партия,
	|	ВТНДСРаздельныйУчетОстатки.СчетФактура,
	|	ВТНДСРаздельныйУчетОстатки.ВидЦенности,
	|	ВТНДСРаздельныйУчетОстатки.СчетУчетаНДС,
	|	ВТНДСРаздельныйУчетОстатки.СтавкаНДС,
	|	ВТНДСРаздельныйУчетОстатки.ЕстьКоличество,
	|	ВТНДСРаздельныйУчетОстатки.Количество,
	|	ВТНДСРаздельныйУчетОстатки.СуммаБезНДС,
	|	ВТНДСРаздельныйУчетОстатки.НДС,
	|	ЕСТЬNULL(РеквизитыДокументаСчетФактура.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаСФ,
	|	ЕСТЬNULL(РеквизитыДокументаПартии.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПартии
	|ИЗ
	|	ВТНДСРаздельныйУчетОстатки КАК ВТНДСРаздельныйУчетОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументаПартии
	|		ПО (РеквизитыДокументаПартии.Организация = &Организация)
	|			И ВТНДСРаздельныйУчетОстатки.Партия = РеквизитыДокументаПартии.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументаСчетФактура
	|		ПО (РеквизитыДокументаСчетФактура.Организация = &Организация)
	|			И ВТНДСРаздельныйУчетОстатки.СчетФактура = РеквизитыДокументаСчетФактура.Документ";
				   
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
	ТаблицаРезультат.Индексы.Добавить("ЕстьКоличество");
	
	ТаблицыПартийНДС = Новый Структура("Товары, ДопРасходы");
	
	ТаблицыПартийНДС.Товары = ТаблицаРезультат.Скопировать(Новый Структура("ЕстьКоличество", Истина));
	ОбщегоНазначенияБПВызовСервера.ПронумероватьТаблицу(ТаблицыПартийНДС.Товары, "НомерСтроки");
	ТаблицыПартийНДС.Товары.Индексы.Добавить("АналитикаУчетаЗатрат");
	ТаблицыПартийНДС.Товары.Индексы.Добавить("НомерСтроки");
	
	ТаблицыПартийНДС.ДопРасходы = ТаблицаРезультат.Скопировать(Новый Структура("ЕстьКоличество", Ложь));
	ТаблицыПартийНДС.ДопРасходы.Индексы.Добавить("АналитикаУчетаЗатрат");

	Возврат ТаблицыПартийНДС;

КонецФункции

Процедура ЗаполнитьПорядокСписанияПартийПоСпособуУчетаНДС(ТаблицаОстатковПартийНДС, НовыйСпособУчетаНДС)
	
	Если ТаблицаОстатковПартийНДС.Колонки.Найти("ПорядокСписанияПартийПоСпособуУчетаНДС") = Неопределено Тогда
		ТаблицаОстатковПартийНДС.Колонки.Добавить("ПорядокСписанияПартийПоСпособуУчетаНДС",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1,0)));
	КонецЕсли;	
	
	ПринимаетсяКВычету = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету;
	УчитываетсяВCтоимости = Перечисления.СпособыУчетаНДС.УчитываетсяВCтоимости;
	ДляОперацийПо0 = Перечисления.СпособыУчетаНДС.ДляОперацийПо0;
	Распределяется = Перечисления.СпособыУчетаНДС.Распределяется;
	Распределен = Перечисления.СпособыУчетаНДС.Распределен;
	ВосстановленУчитываетсяВCтоимости = Перечисления.СпособыУчетаНДС.ВосстановленУчитываетсяВCтоимости;
	ВосстановленДляОперацийПо0 = Перечисления.СпособыУчетаНДС.ВосстановленДляОперацийПо0;
		
	Для Каждого СтрокаТаблицы Из ТаблицаОстатковПартийНДС Цикл
		
		Если НовыйСпособУчетаНДС = ПринимаетсяКВычету Тогда
			
			Если СтрокаТаблицы.СпособУчетаНДС = ПринимаетсяКВычету Тогда
				СтрокаТаблицы.ПорядокСписанияПартийПоСпособуУчетаНДС = 1;
			ИначеЕсли СтрокаТаблицы.СпособУчетаНДС = Распределен Тогда
				СтрокаТаблицы.ПорядокСписанияПартийПоСпособуУчетаНДС = 2;
			ИначеЕсли СтрокаТаблицы.СпособУчетаНДС = Распределяется Тогда
				СтрокаТаблицы.ПорядокСписанияПартийПоСпособуУчетаНДС = 3;
			ИначеЕсли СтрокаТаблицы.СпособУчетаНДС = ДляОперацийПо0 Тогда
				СтрокаТаблицы.ПорядокСписанияПартийПоСпособуУчетаНДС = 4;
			ИначеЕсли СтрокаТаблицы.СпособУчетаНДС = УчитываетсяВCтоимости Тогда
				СтрокаТаблицы.ПорядокСписанияПартийПоСпособуУчетаНДС = 5;
			ИначеЕсли СтрокаТаблицы.СпособУчетаНДС = ВосстановленДляОперацийПо0 Тогда
				СтрокаТаблицы.ПорядокСписанияПартийПоСпособуУчетаНДС = 6;
			ИначеЕсли СтрокаТаблицы.СпособУчетаНДС = ВосстановленУчитываетсяВCтоимости Тогда
				СтрокаТаблицы.ПорядокСписанияПартийПоСпособуУчетаНДС = 7;
			КонецЕсли;	
				
		ИначеЕсли НовыйСпособУчетаНДС = Перечисления.СпособыУчетаНДС.УчитываетсяВCтоимости Тогда
			
			Если СтрокаТаблицы.СпособУчетаНДС = ВосстановленУчитываетсяВCтоимости Тогда
				СтрокаТаблицы.ПорядокСписанияПартийПоСпособуУчетаНДС = 1;
			ИначеЕсли СтрокаТаблицы.СпособУчетаНДС = УчитываетсяВCтоимости Тогда
				СтрокаТаблицы.ПорядокСписанияПартийПоСпособуУчетаНДС = 2;
			ИначеЕсли СтрокаТаблицы.СпособУчетаНДС = Распределен Тогда
				СтрокаТаблицы.ПорядокСписанияПартийПоСпособуУчетаНДС = 3;
			ИначеЕсли СтрокаТаблицы.СпособУчетаНДС = Распределяется Тогда
				СтрокаТаблицы.ПорядокСписанияПартийПоСпособуУчетаНДС = 4;
			ИначеЕсли СтрокаТаблицы.СпособУчетаНДС = ДляОперацийПо0 Тогда
				СтрокаТаблицы.ПорядокСписанияПартийПоСпособуУчетаНДС = 5;
			ИначеЕсли СтрокаТаблицы.СпособУчетаНДС = ПринимаетсяКВычету Тогда
				СтрокаТаблицы.ПорядокСписанияПартийПоСпособуУчетаНДС = 6;
			ИначеЕсли СтрокаТаблицы.СпособУчетаНДС = ВосстановленДляОперацийПо0 Тогда
				СтрокаТаблицы.ПорядокСписанияПартийПоСпособуУчетаНДС = 7;
			КонецЕсли;	
			
		ИначеЕсли НовыйСпособУчетаНДС = Перечисления.СпособыУчетаНДС.ДляОперацийПо0 Тогда
			
			Если СтрокаТаблицы.СпособУчетаНДС = ВосстановленДляОперацийПо0 Тогда
				СтрокаТаблицы.ПорядокСписанияПартийПоСпособуУчетаНДС = 1;
			ИначеЕсли СтрокаТаблицы.СпособУчетаНДС = ДляОперацийПо0 Тогда
				СтрокаТаблицы.ПорядокСписанияПартийПоСпособуУчетаНДС = 2;
			ИначеЕсли СтрокаТаблицы.СпособУчетаНДС = Распределен Тогда
				СтрокаТаблицы.ПорядокСписанияПартийПоСпособуУчетаНДС = 3;
			ИначеЕсли СтрокаТаблицы.СпособУчетаНДС = Распределяется Тогда
				СтрокаТаблицы.ПорядокСписанияПартийПоСпособуУчетаНДС = 4;
			ИначеЕсли СтрокаТаблицы.СпособУчетаНДС = УчитываетсяВCтоимости Тогда
				СтрокаТаблицы.ПорядокСписанияПартийПоСпособуУчетаНДС = 5;
			ИначеЕсли СтрокаТаблицы.СпособУчетаНДС = ПринимаетсяКВычету Тогда
				СтрокаТаблицы.ПорядокСписанияПартийПоСпособуУчетаНДС = 6;
			ИначеЕсли СтрокаТаблицы.СпособУчетаНДС = ВосстановленУчитываетсяВCтоимости Тогда
				СтрокаТаблицы.ПорядокСписанияПартийПоСпособуУчетаНДС = 7;
			КонецЕсли;	
			
		ИначеЕсли НовыйСпособУчетаНДС = Перечисления.СпособыУчетаНДС.Распределяется Тогда
			
			Если СтрокаТаблицы.СпособУчетаНДС = Распределен Тогда
				СтрокаТаблицы.ПорядокСписанияПартийПоСпособуУчетаНДС = 1;
			ИначеЕсли СтрокаТаблицы.СпособУчетаНДС = Распределяется Тогда
				СтрокаТаблицы.ПорядокСписанияПартийПоСпособуУчетаНДС = 2;
			ИначеЕсли СтрокаТаблицы.СпособУчетаНДС = УчитываетсяВCтоимости Тогда
				СтрокаТаблицы.ПорядокСписанияПартийПоСпособуУчетаНДС = 3;
			ИначеЕсли СтрокаТаблицы.СпособУчетаНДС = ДляОперацийПо0 Тогда
				СтрокаТаблицы.ПорядокСписанияПартийПоСпособуУчетаНДС = 4;
			ИначеЕсли СтрокаТаблицы.СпособУчетаНДС = ПринимаетсяКВычету Тогда
				СтрокаТаблицы.ПорядокСписанияПартийПоСпособуУчетаНДС = 5;
			ИначеЕсли СтрокаТаблицы.СпособУчетаНДС = ВосстановленДляОперацийПо0 Тогда
				СтрокаТаблицы.ПорядокСписанияПартийПоСпособуУчетаНДС = 6;
			ИначеЕсли СтрокаТаблицы.СпособУчетаНДС = ВосстановленУчитываетсяВCтоимости Тогда
				СтрокаТаблицы.ПорядокСписанияПартийПоСпособуУчетаНДС = 7;
			КонецЕсли;	
			
		Иначе
			
			Если СтрокаТаблицы.СпособУчетаНДС = УчитываетсяВCтоимости Тогда
				СтрокаТаблицы.ПорядокСписанияПартийПоСпособуУчетаНДС = 1;
			ИначеЕсли СтрокаТаблицы.СпособУчетаНДС = Распределен Тогда
				СтрокаТаблицы.ПорядокСписанияПартийПоСпособуУчетаНДС = 2;
			ИначеЕсли СтрокаТаблицы.СпособУчетаНДС = Распределяется Тогда
				СтрокаТаблицы.ПорядокСписанияПартийПоСпособуУчетаНДС = 3;
			ИначеЕсли СтрокаТаблицы.СпособУчетаНДС = ДляОперацийПо0 Тогда
				СтрокаТаблицы.ПорядокСписанияПартийПоСпособуУчетаНДС = 4;
			ИначеЕсли СтрокаТаблицы.СпособУчетаНДС = ПринимаетсяКВычету Тогда
				СтрокаТаблицы.ПорядокСписанияПартийПоСпособуУчетаНДС = 5;
			ИначеЕсли СтрокаТаблицы.СпособУчетаНДС = ВосстановленДляОперацийПо0 Тогда
				СтрокаТаблицы.ПорядокСписанияПартийПоСпособуУчетаНДС = 6;
			ИначеЕсли СтрокаТаблицы.СпособУчетаНДС = ВосстановленУчитываетсяВCтоимости Тогда
				СтрокаТаблицы.ПорядокСписанияПартийПоСпособуУчетаНДС = 7;
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСпособУчетаНДСИзменился(СтрокаСписаннойПартииНДС)
	
	Если НЕ ЗначениеЗаполнено(СтрокаСписаннойПартииНДС.НовыйСпособУчетаНДС)
		ИЛИ СтрокаСписаннойПартииНДС.НовыйСпособУчетаНДС = СтрокаСписаннойПартииНДС.СпособУчетаНДС
		ИЛИ СтрокаСписаннойПартииНДС.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.Распределен 
		ИЛИ (СтрокаСписаннойПартииНДС.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ВосстановленУчитываетсяВCтоимости
		   И СтрокаСписаннойПартииНДС.НовыйСпособУчетаНДС = Перечисления.СпособыУчетаНДС.УчитываетсяВCтоимости)
		ИЛИ (СтрокаСписаннойПартииНДС.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ВосстановленДляОперацийПо0
		   И СтрокаСписаннойПартииНДС.НовыйСпособУчетаНДС = Перечисления.СпособыУчетаНДС.ДляОперацийПо0) Тогда
		
		СтрокаСписаннойПартииНДС.СпособУчетаНДСИзменился = Ложь;
		
	Иначе
		
		СтрокаСписаннойПартииНДС.СпособУчетаНДСИзменился = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОпределитьПоставщиковПоСписаннымПартиямНДС(СписанныеПартии)

	// Готовим таблицу счетов-фактур, по которым нужно найти поставщиков.
	ТаблицаСчетовФактур = СписанныеПартии.СкопироватьКолонки("СчетФактура");
	
	// Поставщики нужны только в случаях изменения способа учета НДС:
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(
		СписанныеПартии.Скопировать(
		Новый Структура("СпособУчетаНДСИзменился,ПоставщикПредъявляетНДС", Истина, Истина), "СчетФактура"),
		ТаблицаСчетовФактур);

	Если ТаблицаСчетовФактур.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ПараметрыСчетовФактур = УчетНДСБП.ПолучитьПараметрыСчетовФактурПоНДСПредъявленный(ТаблицаСчетовФактур);

	ПараметрыСчетовФактур.Индексы.Добавить("СчетФактура");
	Для каждого СтрокаТаблицы Из СписанныеПартии Цикл
		СтрокаПараметровСФ = ПараметрыСчетовФактур.Найти(СтрокаТаблицы.СчетФактура, "СчетФактура");
		Если СтрокаПараметровСФ <> Неопределено Тогда
			СтрокаТаблицы.Поставщик = СтрокаПараметровСФ.Поставщик;
			СтрокаТаблицы.Покупатель = СтрокаПараметровСФ.Поставщик;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ОпределитьСуммуРанееПринятогоКВычетуНДС(СтрокиПартийНДС, Реквизиты)

	Если СтрокиПартийНДС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ОстаткиНепринятогоКВычетуНДС = ПолучитьОстаткиНепринятогоКВычетуНДС(СтрокиПартийНДС, Реквизиты);
	
	Отбор = Новый Структура("АналитикаУчетаНДС");

	Для каждого СтрокаТаблицы Из СтрокиПартийНДС Цикл
		
		СуммаБезНДСПринятоКВычету	= СтрокаТаблицы.СуммаБезНДС - СтрокаТаблицы.СуммаБезНДСПринимаетсяКВычету;
		НДСПринятоКВычету			= СтрокаТаблицы.НДС - СтрокаТаблицы.НДСПринимаетсяКВычету;
		
		ОстаткиПоСФ = ОстаткиНепринятогоКВычетуНДС.Строки.Найти(СтрокаТаблицы.СчетФактура, "СчетФактура");
		
		Если НЕ ОстаткиПоСФ = Неопределено Тогда
			
			СтрокаТаблицы.ИсправленныйСчетФактура	= ОстаткиПоСФ.ИсправленныйСчетФактура;
			
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаТаблицы);
			НайденныеСтроки = ОстаткиПоСФ.Строки.НайтиСтроки(Отбор);
			
			Для каждого СтрокаОстатков Из НайденныеСтроки Цикл
				СуммаБезНДСНеПринятоКВычету	= СтрокаОстатков.СуммаБезНДС;
				НДСНеПринятоКВычету			= СтрокаОстатков.НДС;
				
				СуммаБезНДСПринятоКВычету	= СуммаБезНДСПринятоКВычету - СуммаБезНДСНеПринятоКВычету;
				НДСПринятоКВычету			= НДСПринятоКВычету - НДСНеПринятоКВычету;
			КонецЦикла;
			
		КонецЕсли;
		
		СтрокаТаблицы.СуммаБезНДСПринятоКВычету = Макс(СуммаБезНДСПринятоКВычету, 0);
		СтрокаТаблицы.НДСПринятоКВычету = Макс(НДСПринятоКВычету, 0);

	КонецЦикла;

КонецПроцедуры

Функция ПолучитьОстаткиНепринятогоКВычетуНДС(СтрокиПартийНДС, Реквизиты)

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Организация",   Реквизиты.Организация);
	Запрос.УстановитьПараметр("МоментВремени", Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор));
	
	АналитикиУчетаНДС = Новый Массив;
	Для каждого СтрокаТаблицы Из СтрокиПартийНДС Цикл
		АналитикиУчетаНДС.Добавить(СтрокаТаблицы.АналитикаУчетаНДС);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("АналитикиУчетаНДС", АналитикиУчетаНДС);

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Организация КАК Организация,
	|	РегистрАналитикаУчетаНДС.СчетФактура КАК СчетФактура,
	|	РегистрАналитикаУчетаНДС.ВидЦенности КАК ВидЦенности,
	|	РегистрАналитикаУчетаНДС.СчетУчетаНДС КАК СчетУчетаНДС,
	|	РегистрАналитикаУчетаНДС.СтавкаНДС КАК СтавкаНДС,
	|	РегистрАналитикаУчетаНДС.КлючАналитики КАК АналитикаУчетаНДС
	|ПОМЕСТИТЬ ВТРазвернутыеАналитики
	|ИЗ
	|	РегистрСведений.АналитикаУчетаНДС КАК РегистрАналитикаУчетаНДС
	|ГДЕ
	|	РегистрАналитикаУчетаНДС.КлючАналитики В(&АналитикиУчетаНДС)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	СчетФактура,
	|	ВидЦенности,
	|	СчетУчетаНДС,
	|	СтавкаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСПредъявленныйОстатки.Организация,
	|	НДСПредъявленныйОстатки.СчетФактура КАК СчетФактура,
	|	НДСПредъявленныйОстатки.ВидЦенности,
	|	НДСПредъявленныйОстатки.СтавкаНДС,
	|	НДСПредъявленныйОстатки.СчетУчетаНДС,
	|	НДСПредъявленныйОстатки.Поставщик,
	|	НДСПредъявленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	НДСПредъявленныйОстатки.НДСОстаток КАК НДС,
	|	НДСПредъявленныйОстатки.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	ВТРазвернутыеАналитики.АналитикаУчетаНДС КАК АналитикаУчетаНДС 
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный.Остатки(
	|			&МоментВремени,
	|			(Организация, СчетФактура, ВидЦенности, СчетУчетаНДС, СтавкаНДС) В
	|				(ВЫБРАТЬ
	|					ВТРазвернутыеАналитики.Организация,
	|					ВТРазвернутыеАналитики.СчетФактура,
	|					ВТРазвернутыеАналитики.ВидЦенности,
	|					ВТРазвернутыеАналитики.СчетУчетаНДС,
	|					ВТРазвернутыеАналитики.СтавкаНДС
	|				ИЗ
	|					ВТРазвернутыеАналитики)) КАК НДСПредъявленныйОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРазвернутыеАналитики КАК ВТРазвернутыеАналитики
	|		ПО НДСПредъявленныйОстатки.СчетФактура = ВТРазвернутыеАналитики.СчетФактура
	|			И НДСПредъявленныйОстатки.ВидЦенности = ВТРазвернутыеАналитики.ВидЦенности
	|			И НДСПредъявленныйОстатки.СчетУчетаНДС = ВТРазвернутыеАналитики.СчетУчетаНДС
	|			И НДСПредъявленныйОстатки.СтавкаНДС = ВТРазвернутыеАналитики.СтавкаНДС
	|ГДЕ
	|	НДСПредъявленныйОстатки.НДСОстаток + НДСПредъявленныйОстатки.СуммаБезНДСОстаток > 0
	|ИТОГИ
	|	МАКСИМУМ(ИсправленныйСчетФактура)
	|ПО
	|	СчетФактура";
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);

	Возврат ТаблицаРезультата;

КонецФункции

Процедура ОпределитьСуммыДляРаспределенияНДС(СтрокиПартийНДС, Реквизиты, Отказ)
	
	ТаблицаПериодовПоступления = Новый ТаблицаЗначений;
	ТаблицаПериодовПоступления.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	Для Каждого СтрокаТаблицы Из СтрокиПартийНДС Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаПартии) Тогда
			СтрокаТаблицы.ДатаПартии = ОбщегоНазначенияБПВызовСервера.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.Партия, "Дата");
		КонецЕсли;
		
		ПериодПоступления = НачалоКвартала(СтрокаТаблицы.ДатаПартии);
		ТекущийПериод = НачалоКвартала(Реквизиты.Период);
		
		Если ПериодПоступления < ТекущийПериод Тогда
			НоваяСтрока = ТаблицаПериодовПоступления.Добавить();
			НоваяСтрока.Период = ПериодПоступления;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаПериодовПоступления.Свернуть("Период");
	ПериодыПоступления = ТаблицаПериодовПоступления.ВыгрузитьКолонку("Период");
	
	Если ПериодыПоступления.Количество() > 0 Тогда 
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ПериодыПоступления", ПериодыПоступления);
		Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	БазаРаспределенияНДС.Период,
		|	БазаРаспределенияНДС.ВыручкаНДС,
		|	БазаРаспределенияНДС.ВыручкаБезНДС + БазаРаспределенияНДС.ВыручкаЕНВД КАК ВыручкаБезНДС,
		|	БазаРаспределенияНДС.ВыручкаНДС0
		|ИЗ
		|	РегистрСведений.БазаРаспределенияНДС КАК БазаРаспределенияНДС
		|ГДЕ
		|	БазаРаспределенияНДС.Организация = &Организация
		|	И БазаРаспределенияНДС.Период В(&ПериодыПоступления)";
	
		ПропорцииРаспределения = Запрос.Выполнить().Выгрузить();
		ПропорцииРаспределения.Индексы.Добавить("Период");
		
		Для Каждого СтрокаТаблицы Из СтрокиПартийНДС Цикл
			
			Если НачалоКвартала(СтрокаТаблицы.ДатаПартии) >= ТекущийПериод Тогда
				Продолжить;
			КонецЕсли;
			
			Пропорции = ПропорцииРаспределения.НайтиСтроки(Новый Структура("Период", НачалоКвартала(СтрокаТаблицы.ДатаПартии)));
			
			Если Пропорции.Количество() = 0 Тогда
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Не обнаружена база распределения НДС за %1'"),
					Формат(СтрокаТаблицы.ДатаПартии, "ДФ='к ''Квартал'' гггг  ''г.'''"));
				
				Если ТипЗнч(Реквизиты.Регистратор) = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") Тогда
					ПолеСпособУчетаНДС	= "ДокументОтгрузки";
				Иначе
					ПолеСпособУчетаНДС	= СтрокаТаблицы.ИмяСписка + "[" + Формат(СтрокаТаблицы.НомерСтрокиДокумента - 1, "ЧН=0; ЧГ=") + "].СпособУчетаНДС";
				КонецЕсли;
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Реквизиты.Регистратор, ПолеСпособУчетаНДС, "Объект", Отказ);
				
				Прервать;
				
			Иначе
				
				СтрокаТаблицы.НовыйСпособУчетаНДС = Перечисления.СпособыУчетаНДС.Распределен;
				ЗаполнитьСпособУчетаНДСИзменился(СтрокаТаблицы);
				
				Пропорция = Пропорции[0];
				
				БазаРаспределения = Пропорция.ВыручкаНДС + Пропорция.ВыручкаБезНДС + Пропорция.ВыручкаНДС0;
				
				УчтеноСуммы   = 0;
				УчтеноНДС     = 0;
				УчтеноВыручки = 0;

				Если Пропорция.ВыручкаНДС <> 0 Тогда

					СтрокаТаблицы.СуммаБезНДСПринимаетсяКВычету = Окр(СтрокаТаблицы.СуммаБезНДС
						* (Пропорция.ВыручкаНДС + УчтеноВыручки)/БазаРаспределения, 2) - УчтеноСуммы;
					СтрокаТаблицы.НДСПринимаетсяКВычету = Окр(СтрокаТаблицы.НДС
						* (Пропорция.ВыручкаНДС + УчтеноВыручки)/БазаРаспределения, 2) - УчтеноНДС;

					УчтеноСуммы     = УчтеноСуммы + СтрокаТаблицы.СуммаБезНДСПринимаетсяКВычету;
					УчтеноНДС       = УчтеноНДС + СтрокаТаблицы.НДСПринимаетсяКВычету;
					УчтеноВыручки   = УчтеноВыручки + Пропорция.ВыручкаНДС;

				КонецЕсли;

				Если Пропорция.ВыручкаБезНДС <> 0 Тогда

					СтрокаТаблицы.СуммаБезНДСУчитываетсяВCтоимости = Окр(СтрокаТаблицы.СуммаБезНДС
						* (Пропорция.ВыручкаБезНДС + УчтеноВыручки)/БазаРаспределения, 2) - УчтеноСуммы;
					СтрокаТаблицы.НДСУчитываетсяВCтоимости = Окр(СтрокаТаблицы.НДС
						* (Пропорция.ВыручкаБезНДС + УчтеноВыручки)/БазаРаспределения, 2) - УчтеноНДС;

					УчтеноСуммы   = УчтеноСуммы + СтрокаТаблицы.СуммаБезНДСУчитываетсяВCтоимости;
					УчтеноНДС     = УчтеноНДС + СтрокаТаблицы.НДСУчитываетсяВCтоимости;
					УчтеноВыручки = УчтеноВыручки + Пропорция.ВыручкаБезНДС;

				КонецЕсли;

				Если Пропорция.ВыручкаНДС0 <> 0 Тогда

					СтрокаТаблицы.СуммаБезНДСДляОперацийПо0 = Окр(СтрокаТаблицы.СуммаБезНДС
						* (Пропорция.ВыручкаНДС0 + УчтеноВыручки)/БазаРаспределения, 2) - УчтеноСуммы;
					СтрокаТаблицы.НДСДляОперацийПо0 = Окр(СтрокаТаблицы.НДС
						* (Пропорция.ВыручкаНДС0 + УчтеноВыручки)/БазаРаспределения, 2) - УчтеноНДС;

					УчтеноСуммы   = УчтеноСуммы + СтрокаТаблицы.СуммаБезНДСДляОперацийПо0;
					УчтеноНДС     = УчтеноНДС + СтрокаТаблицы.НДСДляОперацийПо0;
					УчтеноВыручки = УчтеноВыручки + Пропорция.ВыручкаНДС0;

				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЗначениеПоставщикПредъявляетНДС(СписанныеПартии)
	
	ТаблицаСчетовФактур = СписанныеПартии.Скопировать(,"СчетФактура");
	
	Если ТаблицаСчетовФактур.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаСчетовФактур", ТаблицаСчетовФактур);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаСчетовФактур.СчетФактура КАК СчетФактура
	|ПОМЕСТИТЬ ТаблицаСчетовФактур
	|ИЗ
	|	&ТаблицаСчетовФактур КАК ТаблицаСчетовФактур
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаСчетовФактур.СчетФактура,
	|	ВЫБОР
	|		КОГДА НДСПредъявленный.Поставщик ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПоставщикПредъявляетНДС
	|ИЗ
	|	ТаблицаСчетовФактур КАК ТаблицаСчетовФактур
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСПредъявленный КАК НДСПредъявленный
	|		ПО ТаблицаСчетовФактур.СчетФактура = НДСПредъявленный.СчетФактура";

	ПараметрыСчетовФактур = Запрос.Выполнить().Выгрузить();
	
	ПараметрыСчетовФактур.Индексы.Добавить("СчетФактура");
	Для каждого СтрокаТаблицы Из СписанныеПартии Цикл
		Если СтрокаТаблицы.НДС = 0 Тогда
			СтрокаПараметровСФ = ПараметрыСчетовФактур.Найти(СтрокаТаблицы.СчетФактура, "СчетФактура");
			Если СтрокаПараметровСФ <> Неопределено Тогда
				СтрокаТаблицы.ПоставщикПредъявляетНДС = СтрокаПараметровСФ.ПоставщикПредъявляетНДС;
			КонецЕсли;
		Иначе
			СтрокаТаблицы.ПоставщикПредъявляетНДС = Истина;
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

#Область ФормированиеДвиженийРегистров

#Область ФормированиеДвиженийРегистраНДСЗаписиКнигиПокупок

Процедура СформироватьДвиженияЗаписьКнигиПокупок(Реквизиты, ТаблицаДвиженийПоКнигеПокупок, Движения, Отказ)
	
	Если ТаблицаДвиженийПоКнигеПокупок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаДвиженийПоКнигеПокупок Цикл
		
		Если СтрокаТаблицы.НДС = 0 И СтрокаТаблицы.СуммаБезНДС = 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		// НДС Покупки
		Запись = Движения.НДСЗаписиКнигиПокупок.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
		
		Если Реквизиты.КорректироватьБУиНУ 
			И СтрокаТаблицы.НДС <> 0 Тогда
						
			// Хозрасчетный
			Проводка = Движения.Хозрасчетный.Добавить();
			
			Проводка.Период      = СтрокаТаблицы.Период;
			Проводка.Организация = СтрокаТаблицы.Организация;
			Проводка.Содержание  = СокрЛП(СтрокаТаблицы.Содержание);
			
			Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.НДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
			
			Проводка.СчетКт      = СтрокаТаблицы.СчетУчетаНДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СФПолученные", СтрокаТаблицы.СчетФактура);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаТаблицы.Поставщик);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СпособыУчетаНДС", Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету);
			
			Проводка.Сумма       = СтрокаТаблицы.НДС;
			
		КонецЕсли;
	
	КонецЦикла;
	
	Движения.НДСЗаписиКнигиПокупок.Записывать = Истина;
	Движения.Хозрасчетный.Записывать          = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеДвиженийРегистраНДСЗаписиКнигиПродаж

Процедура СформироватьДвиженияНДСЗаписиКнигиПродажВосстановлениеНДС(ТоварыУслуги, Реквизиты, Движения, Отказ)

	Если ТоварыУслуги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ТаблицаЗаписиКнигиПродаж = ОбщегоНазначенияБПВызовСервера.ПустаяТаблицаРегистраНакопления("НДСЗаписиКнигиПродаж");

	Для каждого СтрокаТаблицы Из ТоварыУслуги Цикл
		
		НоваяСтрока = ТаблицаЗаписиКнигиПродаж.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);

	КонецЦикла;

	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Реквизиты.Период,      "Период");
	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");
	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Реквизиты.Период,      "ДатаСобытия");
	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(?(Реквизиты.Период >= '20150101', "21", ""), "КодВидаОперации");
	ТаблицаЗаписиКнигиПродаж.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.ВосстановлениеНДС, "Событие");

	ТаблицаЗаписиКнигиПродаж.Свернуть("Период,Организация,Покупатель,СчетФактура,ВидЦенности,КодВидаОперации,СтавкаНДС,
		|ДатаОплаты,ДокументОплаты,Событие,ДатаСобытия,ДоговорКонтрагента",
		"СуммаБезНДС,НДС");

	Для каждого СтрокаТаблицы Из ТаблицаЗаписиКнигиПродаж Цикл
		Запись = Движения.НДСЗаписиКнигиПродаж.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
	КонецЦикла;

	Движения.НДСЗаписиКнигиПродаж.Записывать = Истина;
	
	ДанныеДвижений = ТоварыУслуги.Скопировать(,"Покупатель,СчетФактура,СчетУчетаНДС,НДС");
	ДанныеДвижений.Свернуть("Покупатель,СчетФактура,СчетУчетаНДС","НДС");
	
	Для каждого ТекСтрокаВычета Из ДанныеДвижений Цикл
		
		Если ТекСтрокаВычета.НДС = 0 Тогда                
			Продолжить;
		КонецЕсли;
		
		// Проводка по восстановлению НДС на 19 счет 
		Движение	= Движения.Хозрасчетный.Добавить();
		Движение.Период			= Реквизиты.Период;
		Движение.Организация	= Реквизиты.Организация;
		Движение.Сумма			= ТекСтрокаВычета.НДС;
		Движение.Содержание		= НСтр("ru = 'Восстановление НДС'");
		
		Движение.СчетДт	= ТекСтрокаВычета.СчетУчетаНДС; //19.ХХ
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "Контрагенты", ТекСтрокаВычета.Покупатель);
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "СФполученные", ТекСтрокаВычета.СчетФактура);
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "СпособыУчетаНДС", Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету);
		
		Движение.СчетКт	= ПланыСчетов.Хозрасчетный.НДС; //68.02
		БухгалтерскийУчет.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		
	КонецЦикла; 

КонецПроцедуры

Процедура СформироватьДвиженияНДСЗаписиКнигиПродажКорректировкаПоступления(Реквизиты, ТаблицаДвижений, Сторно = Ложь, Движения, Отказ)
	
	Если ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаДвижения Из ТаблицаДвижений Цикл
		
		// НДС Продажи
		Движение = Движения.НДСЗаписиКнигиПродаж.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаДвижения);
		
		Если НЕ Сторно И Реквизиты.КорректироватьБУиНУ
			И СтрокаДвижения.НДС <> 0 Тогда
					
			// Хозрасчетный
			Проводка = Движения.Хозрасчетный.Добавить();
			
			Проводка.Период = СтрокаДвижения.Период;
			Проводка.Организация = СтрокаДвижения.Организация;
			Проводка.Содержание  = СтрокаДвижения.Содержание;
			
			Проводка.СчетДт = СтрокаДвижения.СчетУчетаНДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СФПолученные", СтрокаДвижения.СчетФактура);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты" , СтрокаДвижения.Покупатель);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СпособыУчетаНДС" , Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету);
			
			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
			
			Проводка.Сумма = СтрокаДвижения.НДС;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Сторно И Реквизиты.КорректироватьБУиНУ Тогда
		СформироватьПроводкиСторноВосстановленияНДС(Реквизиты, Движения, Отказ);
	КонецЕсли;
				
	Движения.НДСЗаписиКнигиПродаж.Записывать = Истина;
	Движения.Хозрасчетный.Записывать         = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеДвиженийРегистраНДСПредъявленный

Процедура СформироватьДвиженияНДСПредъявленный(ДанныеДвижений, Движения, Отказ, Сторно = Ложь)
	
	Если ДанныеДвижений = Неопределено
	 ИЛИ ДанныеДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ДанныеДвижений Цикл
		
		Если СтрокаТаблицы.НДС = 0 И СтрокаТаблицы.СуммаБезНДС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Сторно Тогда
			Запись = Движения.НДСПредъявленный.ДобавитьРасход();
		Иначе
			Запись = Движения.НДСПредъявленный.ДобавитьПриход();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
		
	КонецЦикла;
	
	Движения.НДСПредъявленный.Записывать = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеДвиженийРегистраНДСПредъявленныйРеализация0

Процедура СформироватьДвиженияНДСПредъявленныйРеализация0ПоступлениеЦенностей(ДанныеДвижений, Движения, Отказ, Сторно = Ложь)

	Если ДанныеДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для каждого СтрокаТаблицы Из ДанныеДвижений Цикл

		Запись = Движения.НДСПредъявленныйРеализация0.ДобавитьПриход();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);

		Если Сторно Тогда
			Запись.СуммаБезНДС = -Запись.СуммаБезНДС;
		    Запись.НДС = -Запись.НДС;
		КонецЕсли;
		
	КонецЦикла;

	Движения.НДСПредъявленныйРеализация0.Записывать = Истина;

КонецПроцедуры

Процедура ОчиститьДвиженияНДСПредъявленныйРеализация0(Движения, Отказ)
	
	Движения.НДСПредъявленныйРеализация0.Записать();		
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеДвиженийРегистраНДСРаздельныйУчет

Процедура СформироватьДвиженияНДСРаздельныйУчетПоступлениеЦенностей(ДанныеДвижений, Движения, Отказ) Экспорт

	Если ДанныеДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для каждого СтрокаТаблицы Из ДанныеДвижений Цикл

		Запись = Движения.НДСРаздельныйУчет.ДобавитьПриход();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
	
	КонецЦикла;

	Движения.НДСРаздельныйУчет.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСРаздельныйУчетВыбытиеЦенностей(СписанныеПартииНДС, Движения, Отказ)

	Если СписанныеПартииНДС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из СписанныеПартииНДС Цикл

		ЗаписьРасход = Движения.НДСРаздельныйУчет.ДобавитьРасход();
		ЗаполнитьЗначенияСвойств(ЗаписьРасход, СтрокаТаблицы);

	КонецЦикла;

	Движения.НДСРаздельныйУчет.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСРаздельныйУчетПоступлениеИзНТТ(Товары, Реквизиты, Движения, Отказ) Экспорт

	Если Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	СпособОценкиМПЗПоСредней = (УчетнаяПолитика.СпособОценкиМПЗ(Реквизиты.Организация, Реквизиты.Период)
		= Перечисления.СпособыОценки.ПоСредней);
	
	Для каждого СтрокаТаблицы Из Товары Цикл

		АналитикаУчетаЗатрат = Новый Структура("Организация,СчетЗатрат,Подразделение,Субконто1,Субконто2,Субконто3");
		АналитикаУчетаЗатрат.Организация = Реквизиты.Организация;
		АналитикаУчетаЗатрат.СчетЗатрат = СтрокаТаблицы.СчетУчетаПолучатель;
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(АналитикаУчетаЗатрат.СчетЗатрат);
		Если СвойстваСчета.УчетПоПодразделениям Тогда
			АналитикаУчетаЗатрат.Подразделение = Реквизиты.ПодразделениеПолучатель;
		КонецЕсли;
		Для Ном = 1 По СвойстваСчета.КоличествоСубконто Цикл
			Если СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура Тогда
			 	АналитикаУчетаЗатрат["Субконто" + Ном] = СтрокаТаблицы.Номенклатура;
			ИначеЕсли СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады Тогда
				Если БухгалтерскийУчетВызовСервераПовтИсп.ВедетсяСуммовойУчетПоСкладам(АналитикаУчетаЗатрат.СчетЗатрат) Тогда
					АналитикаУчетаЗатрат["Субконто" + Ном] = СтрокаТаблицы.СкладПолучатель;
				КонецЕсли;
	        ИначеЕсли СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии Тогда
				Если НЕ СпособОценкиМПЗПоСредней Тогда
					АналитикаУчетаЗатрат["Субконто" + Ном] = Реквизиты.Регистратор;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		АналитикаУчетаНДС = Новый Структура("Организация,СчетФактура,ВидЦенности,СчетУчетаНДС,СтавкаНДС");
		АналитикаУчетаНДС.Организация = Реквизиты.Организация;
		АналитикаУчетаНДС.ВидЦенности = СтрокаТаблицы.ВидЦенности;
		
		Запись = Движения.НДСРаздельныйУчет.ДобавитьПриход();

		ЗаполнитьЗначенияСвойств(Запись, Реквизиты, "Период,Организация");
		
		Запись.АналитикаУчетаЗатрат = Справочники.КлючиАналитикиУчетаЗатрат.КлючиАналитикиУчетаЗатратДокумента(АналитикаУчетаЗатрат);
		Запись.АналитикаУчетаНДС = Справочники.КлючиАналитикиУчетаНДС.КлючиАналитикиУчетаНДСДокумента(АналитикаУчетаНДС);
		Запись.Партия = Реквизиты.Регистратор;
		Запись.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.Распределен;
        Запись.Количество = СтрокаТаблицы.Количество;
		
	КонецЦикла;

	Движения.НДСРаздельныйУчет.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьДвиженияНДСРаздельныйУчетОприходованиеТоваров(Товары, Реквизиты, Движения, Отказ) Экспорт

	Если Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	СпособОценкиМПЗПоСредней = (УчетнаяПолитика.СпособОценкиМПЗ(Реквизиты.Организация, Реквизиты.Период)
		= Перечисления.СпособыОценки.ПоСредней);
	
	Для каждого СтрокаТаблицы Из Товары Цикл

		АналитикаУчетаЗатрат = Новый Структура("Организация,СчетЗатрат,Подразделение,Субконто1,Субконто2,Субконто3");
		АналитикаУчетаЗатрат.Организация = Реквизиты.Организация; 
		АналитикаУчетаЗатрат.СчетЗатрат = СтрокаТаблицы.СчетУчета;
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(АналитикаУчетаЗатрат.СчетЗатрат);
		Если СвойстваСчета.УчетПоПодразделениям Тогда
			АналитикаУчетаЗатрат.Подразделение = Реквизиты.Подразделение;
		КонецЕсли;
		Для Ном = 1 По СвойстваСчета.КоличествоСубконто Цикл
			Если СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура Тогда
			 	АналитикаУчетаЗатрат["Субконто" + Ном] = СтрокаТаблицы.Номенклатура;
			ИначеЕсли СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады Тогда
				Если БухгалтерскийУчетВызовСервераПовтИсп.ВедетсяСуммовойУчетПоСкладам(АналитикаУчетаЗатрат.СчетЗатрат) Тогда
					АналитикаУчетаЗатрат["Субконто" + Ном] = Реквизиты.Склад;
				КонецЕсли;
	        ИначеЕсли СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии Тогда
				Если НЕ СпособОценкиМПЗПоСредней Тогда
					АналитикаУчетаЗатрат["Субконто" + Ном] = СтрокаТаблицы.Партия;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		АналитикаУчетаНДС = Новый Структура("Организация,СчетФактура,ВидЦенности,СчетУчетаНДС,СтавкаНДС");
		АналитикаУчетаНДС.Организация = Реквизиты.Организация;
		АналитикаУчетаНДС.ВидЦенности = УчетНДС.ОпределитьВидЦенностиПоОперации(СтрокаТаблицы.Номенклатура, СтрокаТаблицы.СчетУчета, , , , , Ложь);
		АналитикаУчетаНДС.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ; // 19.03
	    АналитикаУчетаНДС.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		
		Запись = Движения.НДСРаздельныйУчет.ДобавитьПриход();

		ЗаполнитьЗначенияСвойств(Запись, Реквизиты, "Период,Организация");
		
		Запись.АналитикаУчетаЗатрат = Справочники.КлючиАналитикиУчетаЗатрат.КлючиАналитикиУчетаЗатратДокумента(АналитикаУчетаЗатрат);
		Запись.АналитикаУчетаНДС = Справочники.КлючиАналитикиУчетаНДС.КлючиАналитикиУчетаНДСДокумента(АналитикаУчетаНДС);
		Запись.Партия = Реквизиты.Регистратор;
		Запись.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.Распределен;
		Запись.Количество = СтрокаТаблицы.Количество;

	КонецЦикла;

	Движения.НДСРаздельныйУчет.Записывать = Истина;

КонецПроцедуры

#КонецОбласти

#Область ФормированиеДвиженийРегистраБухгалтерии

Процедура СформироватьПроводкиВключениеНДСВСтоимость(ДанныеПроводок, Движения, Отказ) Экспорт
	
	Если ДанныеПроводок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Проводки по включению НДС в стоимость
	// Дт <Счет учета затрат> Кт <Счет учета НДС>

	Для каждого СтрокаТаблицы Из ДанныеПроводок Цикл

		Если СтрокаТаблицы.НДС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = СтрокаТаблицы.Период;
		Проводка.Организация = СтрокаТаблицы.Организация;
		Проводка.Сумма       = СтрокаТаблицы.НДС;
		Проводка.Содержание  = СтрокаТаблицы.Содержание;

		Проводка.СчетДт = СтрокаТаблицы.СчетЗатрат;
		
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетЗатрат);
		Для Ном = 1 По СвойстваСчета.КоличествоСубконто Цикл
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
				СвойстваСчета["ВидСубконто" + Ном], СтрокаТаблицы["Субконто" + Ном]);	
			
		КонецЦикла;
			
		Если СвойстваСчета.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = СтрокаТаблицы.Подразделение;
		КонецЕсли;
	
		Проводка.СчетКт = СтрокаТаблицы.СчетУчетаНДС;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"Контрагенты", СтрокаТаблицы.Поставщик);	
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"СФПолученные", СтрокаТаблицы.СчетФактура);	
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"СпособыУчетаНДС", СтрокаТаблицы.НовыйСпособУчетаНДС);	
		
	КонецЦикла;
		
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Процедура СформироватьПроводкиВключениеНДСВСтоимостьОСиНМА(ПартииНДС, Реквизиты, Движения, Отказ, Выбытие = Истина)
	
	ТаблицаОСиНМА = ПартииНДС.СкопироватьКолонки("СчетЗатрат,Субконто1,НДС,ПроцентАмортизационнойПремии");	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПартииНДС", ПартииНДС);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПартииНДС.АналитикаУчетаЗатрат КАК АналитикаУчетаЗатрат
	|ПОМЕСТИТЬ ПартииНДС
	|ИЗ
	|	&ПартииНДС КАК ПартииНДС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаЗатрат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПартииНДС.АналитикаУчетаЗатрат,
	|	РегистрАналитикаУчетаЗатрат.СчетЗатрат,
	|	РегистрАналитикаУчетаЗатрат.Подразделение,
	|	РегистрАналитикаУчетаЗатрат.Субконто1,
	|	РегистрАналитикаУчетаЗатрат.Субконто2,
	|	РегистрАналитикаУчетаЗатрат.Субконто3
	|ИЗ
	|	ПартииНДС КАК ПартииНДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаЗатрат КАК РегистрАналитикаУчетаЗатрат
	|		ПО ПартииНДС.АналитикаУчетаЗатрат = РегистрАналитикаУчетаЗатрат.КлючАналитики";
	
	РазвернутыеАналитики = Запрос.Выполнить().Выгрузить();
	РазвернутыеАналитики.Индексы.Добавить("АналитикаУчетаЗатрат");
		
	ОтражатьВНалоговомУчете = ТипЗнч(Реквизиты.Регистратор) = Тип("ДокументСсылка.МодернизацияОС")
		И УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	
	Для Каждого СтрокаТаблицы Из ПартииНДС Цикл
		
		Если Выбытие Тогда
			
			Если СтрокаТаблицы.НДСУчитываетсяВCтоимости = 0
			 ИЛИ СтрокаТаблицы.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.УчитываетсяВCтоимости Тогда
				Продолжить;
			КонецЕсли;
			
			//Считаем, что восстанавливаемый НДС в первую очередь относится к экспорту
			ОстатокВосстановленногоНДС = Макс(СтрокаТаблицы.НДСПринятоКВычету - СтрокаТаблицы.НДСДляОперацийПо0, 0);
			
			НДС = СтрокаТаблицы.НДСУчитываетсяВCтоимости - ОстатокВосстановленногоНДС;
			
		Иначе
			ОстатокВосстановленногоНДС = 0;
			НДС = СтрокаТаблицы.НДС;
		КонецЕсли;
		
		Если НДС <> 0 Тогда
			
			РазвернутаяАналитика = РазвернутыеАналитики.НайтиСтроки(
				Новый Структура("АналитикаУчетаЗатрат",СтрокаТаблицы.АналитикаУчетаЗатрат));
			АналитикаЗатрат = РазвернутаяАналитика[0];
			
			Проводка = Движения.Хозрасчетный.Добавить();
			
			Проводка.Период      = СтрокаТаблицы.Период;
			Проводка.Организация = СтрокаТаблицы.Организация;
			Проводка.Сумма       = НДС;
			Проводка.Содержание  = НСтр("ru = 'НДС включен в стоимость ценностей'");

			Проводка.СчетДт = АналитикаЗатрат.СчетЗатрат;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, АналитикаЗатрат.Субконто1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, АналитикаЗатрат.Субконто2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, АналитикаЗатрат.Субконто3);
			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = АналитикаЗатрат.Подразделение;
			КонецЕсли;
			
			Проводка.СчетКт = СтрокаТаблицы.СчетУчетаНДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
				"Контрагенты", СтрокаТаблицы.Поставщик);	
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
				"СФПолученные", СтрокаТаблицы.СчетФактура);	
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
				"СпособыУчетаНДС", Перечисления.СпособыУчетаНДС.УчитываетсяВCтоимости);	
				
			Если ОтражатьВНалоговомУчете Тогда
				Проводка.СуммаНУДт = Проводка.Сумма;		
			КонецЕсли;	
				
			Проводка = Движения.Хозрасчетный.Добавить();
			
			Проводка.Период      = СтрокаТаблицы.Период;
			Проводка.Организация = СтрокаТаблицы.Организация;
			Проводка.Сумма       = НДС;
			Проводка.Содержание  = НСтр("ru = 'НДС включен в стоимость ценностей'");
			
			Проводка.СчетДт = СтрокаТаблицы.СчетЗатрат;
			СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетЗатрат);
			Для Ном = 1 По СвойстваСчета.КоличествоСубконто Цикл
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
					СвойстваСчета["ВидСубконто" + Ном], СтрокаТаблицы["Субконто" + Ном]);	
			КонецЦикла;
			Если СвойстваСчета.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = СтрокаТаблицы.Подразделение;
			КонецЕсли;
		
			Проводка.СчетКт = АналитикаЗатрат.СчетЗатрат;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, АналитикаЗатрат.Субконто1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, АналитикаЗатрат.Субконто2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, АналитикаЗатрат.Субконто3);
			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = АналитикаЗатрат.Подразделение;
			КонецЕсли;
			
			Если ОтражатьВНалоговомУчете Тогда
				Проводка.СуммаНУДт = Проводка.Сумма;
				Проводка.СуммаНУКт = Проводка.Сумма;
			КонецЕсли;	
		
			
			НоваяСтрока = ТаблицаОСиНМА.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, ,"НДС");
			НоваяСтрока.НДС = НДС;
			
		КонецЕсли;
		
		Если ОстатокВосстановленногоНДС > 0 Тогда
			
			Проводка = Движения.Хозрасчетный.Добавить();
			
			Проводка.Период      = СтрокаТаблицы.Период;
			Проводка.Организация = СтрокаТаблицы.Организация;
			Проводка.Сумма       = ОстатокВосстановленногоНДС;
			Проводка.Содержание  = НСтр("ru = 'Списан на расходы НДС, ранее принятый к вычету'");
			
			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1,
				ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.СписаниеНДСНаПрочиеРасходы"));
			СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			Если СвойстваСчета.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = СтрокаТаблицы.Подразделение;
			КонецЕсли;
			
			Проводка.СчетКт = СтрокаТаблицы.СчетУчетаНДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
				"Контрагенты", СтрокаТаблицы.Поставщик);	
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
				"СФПолученные", СтрокаТаблицы.СчетФактура);	
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
				"СпособыУчетаНДС", Перечисления.СпособыУчетаНДС.УчитываетсяВCтоимости);
				
			Если ОтражатьВНалоговомУчете Тогда
				Проводка.СуммаНУДт = Проводка.Сумма;
				Проводка.СуммаНУКт = Проводка.Сумма;
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
	Если ТипЗнч(Реквизиты.Регистратор) = Тип("ДокументСсылка.ПринятиеКУчетуОС") Тогда
		СформироватьДвиженияПоСтоимостиОСПриПринятииКУчету(ТаблицаОСиНМА, Реквизиты, Движения, Отказ);
	ИначеЕсли ТипЗнч(Реквизиты.Регистратор) = Тип("ДокументСсылка.ПринятиеКУчетуНМА") Тогда
		СформироватьДвиженияПоСтоимостиНМАПриПринятииКУчету(ТаблицаОСиНМА, Реквизиты, Движения, Отказ);
	ИначеЕсли ТипЗнч(Реквизиты.Регистратор) = Тип("ДокументСсылка.МодернизацияОС") Тогда
		СформироватьДвиженияПоСтоимостиОСПриМодернизации(ТаблицаОСиНМА, Реквизиты, Движения, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьПроводкиВключениеНДСВСтоимостьОСиНМАРаспределениеНДС(ДанныеПроводок, Движения, Отказ)
	
	Если ДанныеПроводок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ДанныеПроводок Цикл
		
		Если СтрокаТаблицы.НДС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		ЗаполнитьЗначенияСвойств(Проводка, СтрокаТаблицы, "Период,Организация,Содержание");
		Проводка.Сумма = СтрокаТаблицы.НДС;
		
		Если СтрокаТаблицы.ЕстьКорАналитикаУчета Тогда
			
			Проводка.СчетДт = СтрокаТаблицы.КорСчетЗатрат;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.КорСубконто1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.КорСубконто2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.КорСубконто3);
			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = СтрокаТаблицы.Подразделение;
			КонецЕсли;
			
			Проводка.СчетКт = СтрокаТаблицы.СчетУчетаНДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
				"Контрагенты", СтрокаТаблицы.Поставщик);	
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
				"СФПолученные", СтрокаТаблицы.СчетФактура);	
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
				"СпособыУчетаНДС", СтрокаТаблицы.НовыйСпособУчетаНДС);
				
			Проводка = Движения.Хозрасчетный.Добавить();
			ЗаполнитьЗначенияСвойств(Проводка, СтрокаТаблицы, "Период,Организация,Содержание");
			Проводка.Сумма = СтрокаТаблицы.НДС;
			Проводка.НеКорректироватьСтоимостьАвтоматически = Истина;
			
			Проводка.СчетДт = СтрокаТаблицы.СчетЗатрат;
			СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетЗатрат);
			Для Ном = 1 По СвойстваСчета.КоличествоСубконто Цикл
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
					СвойстваСчета["ВидСубконто" + Ном], СтрокаТаблицы["Субконто" + Ном]);	
			КонецЦикла;
			Если СвойстваСчета.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = СтрокаТаблицы.Подразделение;
			КонецЕсли;
			
			Проводка.СчетКт = СтрокаТаблицы.КорСчетЗатрат;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.КорСубконто1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.КорСубконто2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.КорСубконто3);
			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = СтрокаТаблицы.Подразделение;
			КонецЕсли;
			
		Иначе
			
			Проводка.СчетДт = СтрокаТаблицы.СчетЗатрат;
			СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетЗатрат);
			Для Ном = 1 По СвойстваСчета.КоличествоСубконто Цикл
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
					СвойстваСчета["ВидСубконто" + Ном], СтрокаТаблицы["Субконто" + Ном]);	
			КонецЦикла;
			Если СвойстваСчета.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = СтрокаТаблицы.Подразделение;
			КонецЕсли;
			
			Проводка.СчетКт = СтрокаТаблицы.СчетУчетаНДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
				"Контрагенты", СтрокаТаблицы.Поставщик);	
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
				"СФПолученные", СтрокаТаблицы.СчетФактура);	
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
				"СпособыУчетаНДС", СтрокаТаблицы.НовыйСпособУчетаНДС);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
		
КонецПроцедуры

Процедура СформироватьПроводкиПоКорректировкеСпособаУчетаНДС(ДанныеПроводок, Реквизиты, Движения, Отказ)
	
	Если ДанныеПроводок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ДанныеПроводок Цикл
		
		Если СтрокаТаблицы.НДС = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Сумма       = СтрокаТаблицы.НДС;
		Проводка.Содержание  = СтрокаТаблицы.Содержание;

		Проводка.СчетДт = СтрокаТаблицы.СчетУчетаНДС;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"Контрагенты", СтрокаТаблицы.Поставщик);	
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"СФПолученные", СтрокаТаблицы.СчетФактура);	
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"СпособыУчетаНДС", СтрокаТаблицы.НовыйСпособУчетаНДС);	
		
		Проводка.СчетКт = СтрокаТаблицы.СчетУчетаНДС;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"Контрагенты", СтрокаТаблицы.Поставщик);	
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"СФПолученные", СтрокаТаблицы.СчетФактура);	
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"СпособыУчетаНДС", СтрокаТаблицы.СпособУчетаНДС);	
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Процедура СформироватьПроводкиВключениеНДСВРасходы(ДанныеПроводок, Движения, Отказ)

	// Проводки по отнесению НДС, ранее принятого к вычету, на расходы
	// Дт <Счет списания НДС> Кт <Счет учета НДС>

	Для каждого СтрокаТаблицы Из ДанныеПроводок Цикл

		Если СтрокаТаблицы.НДС = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = СтрокаТаблицы.Период;
		Проводка.Организация = СтрокаТаблицы.Организация;
		Проводка.Сумма       = СтрокаТаблицы.НДС;
		Проводка.Содержание  = НСтр("ru = 'Списан на расходы НДС, ранее принятый к вычету'");

		Проводка.СчетДт = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
		
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = СтрокаТаблицы.Подразделение;
		КонецЕсли;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"ПрочиеДоходыИРасходы", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.СписаниеНДСНаПрочиеРасходы"));	

		Проводка.СчетКт = СтрокаТаблицы.СчетУчетаНДС;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"Контрагенты", СтрокаТаблицы.Поставщик);	
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"СФПолученные", СтрокаТаблицы.СчетФактура);	
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"СпособыУчетаНДС", Перечисления.СпособыУчетаНДС.УчитываетсяВCтоимости);	

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьПроводкиИсключениеНДСИзСтоимости(ТаблицаИсключениеНДСИзСтоимости, СписанныеТоварыБухУчет, Реквизиты, Движения, Отказ)

	// Проводки по исключению НДС Из стоимости
	// дебет <Корсчет списания> Кт <Счет учета НДС> сторно

	Если ТаблицаИсключениеНДСИзСтоимости.Количество() = 0
		ИЛИ ТаблицаИсключениеНДСИзСтоимости.Итог("НДС") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СпособОценкиМПЗПоСредней = (УчетнаяПолитика.СпособОценкиМПЗ(Реквизиты.Организация, Реквизиты.Период)
		= Перечисления.СпособыОценки.ПоСредней);

	Для каждого СтрокаТаблицы Из ТаблицаИсключениеНДСИзСтоимости Цикл

		Если СтрокаТаблицы.НДС = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Сумма       = СтрокаТаблицы.НДСУчитываетсяВCтоимости - СтрокаТаблицы.НДС;
		Проводка.Содержание  = "НДС исключен из стоимости МПЗ";

		Отбор = Новый Структура("ИмяСписка,НомерСтроки", СтрокаТаблицы.ИмяСписка, СтрокаТаблицы.НомерСтрокиДокумента);
		Если НЕ СпособОценкиМПЗПоСредней Тогда
			Отбор.Вставить("Партия", СтрокаТаблицы.Партия);
		КонецЕсли;
		
		СтрокиСписанияБухУчет = СписанныеТоварыБухУчет.НайтиСтроки(Отбор);
		СтрокаСписанияБухУчет = СтрокиСписанияБухУчет[0];
		
		Проводка.СчетДт = СтрокаСписанияБухУчет.СчетУчета;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"Партии", СтрокаСписанияБухУчет.Партия);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"Склады", СтрокаСписанияБухУчет.Склад);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"Номенклатура", СтрокаСписанияБухУчет.Номенклатура);
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = СтрокаСписанияБухУчет.КорПодразделение;
		КонецЕсли;

		Проводка.СчетКт = СтрокаТаблицы.СчетУчетаНДС;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"Контрагенты", СтрокаТаблицы.Поставщик);	
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"СФПолученные", СтрокаТаблицы.СчетФактура);	
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"СпособыУчетаНДС", СтрокаТаблицы.СпособУчетаНДС);	
	
	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьПроводкиИсключениеНДСИзСтоимостиОСиНМА(ТаблицаИсключениеНДСИзСтоимости, СписанныеТоварыБухУчет, Реквизиты, Движения, Отказ)

	Если ТаблицаИсключениеНДСИзСтоимости.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ТаблицаОСиНМА = ТаблицаИсключениеНДСИзСтоимости.СкопироватьКолонки("СчетЗатрат,Субконто1,НДС,ПроцентАмортизационнойПремии");	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаИсключениеНДСИзСтоимости", ТаблицаИсключениеНДСИзСтоимости);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаИсключениеНДСИзСтоимости.АналитикаУчетаЗатрат КАК АналитикаУчетаЗатрат
	|ПОМЕСТИТЬ ТаблицаИсключениеНДСИзСтоимости
	|ИЗ
	|	&ТаблицаИсключениеНДСИзСтоимости КАК ТаблицаИсключениеНДСИзСтоимости
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаЗатрат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаИсключениеНДСИзСтоимости.АналитикаУчетаЗатрат,
	|	РегистрАналитикаУчетаЗатрат.СчетЗатрат,
	|	РегистрАналитикаУчетаЗатрат.Подразделение,
	|	РегистрАналитикаУчетаЗатрат.Субконто1,
	|	РегистрАналитикаУчетаЗатрат.Субконто2,
	|	РегистрАналитикаУчетаЗатрат.Субконто3
	|ИЗ
	|	ТаблицаИсключениеНДСИзСтоимости КАК ТаблицаИсключениеНДСИзСтоимости
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаЗатрат КАК РегистрАналитикаУчетаЗатрат
	|		ПО ТаблицаИсключениеНДСИзСтоимости.АналитикаУчетаЗатрат = РегистрАналитикаУчетаЗатрат.КлючАналитики";
	
	РазвернутыеАналитики = Запрос.Выполнить().Выгрузить();
	РазвернутыеАналитики.Индексы.Добавить("АналитикаУчетаЗатрат");
	
	ОтражатьВНалоговомУчете = ТипЗнч(Реквизиты.Регистратор) = Тип("ДокументСсылка.МодернизацияОС")
		И УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	
	Для каждого СтрокаТаблицы Из ТаблицаИсключениеНДСИзСтоимости Цикл

		НДС = СтрокаТаблицы.НДСУчитываетсяВCтоимости - СтрокаТаблицы.НДС;
		
		Если НДС = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Сумма       = НДС;
		Проводка.Содержание  = "НДС исключен из стоимости";

		РазвернутаяАналитика = РазвернутыеАналитики.НайтиСтроки(
			Новый Структура("АналитикаУчетаЗатрат",СтрокаТаблицы.АналитикаУчетаЗатрат));
		АналитикаЗатрат = РазвернутаяАналитика[0];
		
		Проводка.СчетДт = АналитикаЗатрат.СчетЗатрат;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, АналитикаЗатрат.Субконто1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, АналитикаЗатрат.Субконто2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, АналитикаЗатрат.Субконто3);
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = АналитикаЗатрат.Подразделение;
		КонецЕсли;

		Проводка.СчетКт = СтрокаТаблицы.СчетУчетаНДС;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"Контрагенты", СтрокаТаблицы.Поставщик);	
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"СФПолученные", СтрокаТаблицы.СчетФактура);	
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"СпособыУчетаНДС", СтрокаТаблицы.СпособУчетаНДС);
			
		Если ОтражатьВНалоговомУчете Тогда
			Проводка.СуммаНУДт = НДС;		
		КонецЕсли;	
		
			
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Сумма       = НДС;
		Проводка.Содержание  = "НДС исключен из стоимости";

		Отбор = Новый Структура("ИмяСписка,НомерСтроки", СтрокаТаблицы.ИмяСписка, СтрокаТаблицы.НомерСтрокиДокумента);
		СтрокиСписанияБухУчет = СписанныеТоварыБухУчет.НайтиСтроки(Отбор);
		СтрокаСписанияБухУчет = СтрокиСписанияБухУчет[0];

		Проводка.СчетДт = СтрокаСписанияБухУчет.КорСчетСписания;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"Партии", СтрокаСписанияБухУчет.Партия);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			СтрокаСписанияБухУчет.ВидКорСубконто1, СтрокаСписанияБухУчет.КорСубконто1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			СтрокаСписанияБухУчет.ВидКорСубконто2, СтрокаСписанияБухУчет.КорСубконто2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			СтрокаСписанияБухУчет.ВидКорСубконто3, СтрокаСписанияБухУчет.КорСубконто3);
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = СтрокаСписанияБухУчет.КорПодразделение;
		КонецЕсли;

		Проводка.СчетКт = АналитикаЗатрат.СчетЗатрат;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, АналитикаЗатрат.Субконто1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, АналитикаЗатрат.Субконто2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, АналитикаЗатрат.Субконто3);
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = АналитикаЗатрат.Подразделение;
		КонецЕсли;
		
		Если ОтражатьВНалоговомУчете Тогда
			Проводка.СуммаНУДт = НДС;
			Проводка.СуммаНУКт = НДС;
		КонецЕсли;	
		
		
		НоваяСтрока = ТаблицаОСиНМА.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, ,"НДС");
		НоваяСтрока.НДС = НДС;
		
	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

	Если ТипЗнч(Реквизиты.Регистратор) = Тип("ДокументСсылка.ПринятиеКУчетуОС") Тогда
		СформироватьДвиженияПоСтоимостиОСПриПринятииКУчету(ТаблицаОСиНМА, Реквизиты, Движения, Отказ);
	ИначеЕсли ТипЗнч(Реквизиты.Регистратор) = Тип("ДокументСсылка.ПринятиеКУчетуНМА") Тогда
		СформироватьДвиженияПоСтоимостиНМАПриПринятииКУчету(ТаблицаОСиНМА, Реквизиты, Движения, Отказ);
	ИначеЕсли ТипЗнч(Реквизиты.Регистратор) = Тип("ДокументСсылка.МодернизацияОС") Тогда
		СформироватьДвиженияПоСтоимостиОСПриМодернизации(ТаблицаОСиНМА, Реквизиты, Движения, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьПроводкиВычетНДСПоТоварамРеализованнымПоСтавке0(ДанныеДвижений, Движения, Отказ) Экспорт

	// Проводки Дт 68.02 Кт 19.хх

	Для каждого СтрокаТаблицы Из ДанныеДвижений Цикл

		Если СтрокаТаблицы.НДС = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = СтрокаТаблицы.Период;
		Проводка.Организация = СтрокаТаблицы.Организация;

		Проводка.Содержание = СокрЛП(СтрокаТаблицы.Содержание);

		Проводка.СчетДт = ПланыСчетов.Хозрасчетный.НДС; // 68.02
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);

		Проводка.СчетКт = СтрокаТаблицы.СчетУчетаНДС;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"СФПолученные", СтрокаТаблицы.СчетФактура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"Контрагенты", СтрокаТаблицы.Поставщик);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"СпособыУчетаНДС", Перечисления.СпособыУчетаНДС.ДляОперацийПо0);

		Проводка.Сумма = СтрокаТаблицы.НДС;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Процедура СформироватьПроводкиСторноВосстановленияНДС(Реквизиты, Движения, Отказ)
	
	НаборЗаписейХозрасчетный = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	НаборЗаписейХозрасчетный.Отбор.Регистратор.Значение = Реквизиты.ДокументОснование;
	НаборЗаписейХозрасчетный.Прочитать();
	
	Для Каждого ДвижениеСторнируемое Из НаборЗаписейХозрасчетный Цикл

		Если ДвижениеСторнируемое.СчетКт = ПланыСчетов.Хозрасчетный.НДС
			И ДвижениеСторнируемое.Сумма > 0 Тогда
			
			Движение = Движения.Хозрасчетный.Добавить();
			
			Движение.Период = Реквизиты.Период;
			
			ЗаполнитьЗначенияСвойств(Движение, ДвижениеСторнируемое, , "Период, Регистратор");
			
			Для каждого Субконто Из ДвижениеСторнируемое.СубконтоДт Цикл
				Движение.СубконтоДт[Субконто.Ключ] = Субконто.Значение;
			КонецЦикла;
			
			Для каждого Субконто Из ДвижениеСторнируемое.СубконтоКт Цикл
				Движение.СубконтоКт[Субконто.Ключ] = Субконто.Значение;
			КонецЦикла;
			
			Движение.Сумма = -ДвижениеСторнируемое.Сумма;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПрочиеФункции

Функция ЕстьУчетнаяПолитикаСРаздельнымУчетомНДСНаСчете19() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	УчетнаяПолитикаОрганизаций.РаздельныйУчетНДСНаСчете19
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
	|ГДЕ
	|	УчетнаяПолитикаОрганизаций.РаздельныйУчетНДСНаСчете19 = ИСТИНА";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ПолучитьСоответствиеСтавокИСпособовУчетаНДС() Экспорт
	
	СоответствиеСтавокИСпособовУчетаНДС	= Новый Соответствие;
	
	Ставки = Перечисления.СтавкиНДС;
	СпособыУчета = Перечисления.СпособыУчетаНДС;
	
	СоответствиеСтавокИСпособовУчетаНДС.Вставить(Ставки.БезНДС, СпособыУчета.УчитываетсяВCтоимости);
	СоответствиеСтавокИСпособовУчетаНДС.Вставить(Ставки.НДС0, СпособыУчета.ДляОперацийПо0);
	СоответствиеСтавокИСпособовУчетаНДС.Вставить(Ставки.НДС10, СпособыУчета.ПринимаетсяКВычету);
	СоответствиеСтавокИСпособовУчетаНДС.Вставить(Ставки.НДС10_110, СпособыУчета.ПринимаетсяКВычету);
	СоответствиеСтавокИСпособовУчетаНДС.Вставить(Ставки.НДС18, СпособыУчета.ПринимаетсяКВычету);
	СоответствиеСтавокИСпособовУчетаНДС.Вставить(Ставки.НДС18_118, СпособыУчета.ПринимаетсяКВычету);
	СоответствиеСтавокИСпособовУчетаНДС.Вставить(Ставки.НДС20, СпособыУчета.ПринимаетсяКВычету);
	СоответствиеСтавокИСпособовУчетаНДС.Вставить(Ставки.НДС20_120, СпособыУчета.ПринимаетсяКВычету);
	СоответствиеСтавокИСпособовУчетаНДС.Вставить(Ставки.ПустаяСсылка(), СпособыУчета.ПустаяСсылка());
	
	Возврат СоответствиеСтавокИСпособовУчетаНДС;
	
КонецФункции

Функция СчетаПартионногоУчетаЦенностейДляЦелейНДС()
	
	ПланСчетов = ПланыСчетов.Хозрасчетный;
	
	МассивСчетов = Новый Массив;
	
	Для каждого Счет Из БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланСчетов.ОборудованиеКУстановке) Цикл //07
		МассивСчетов.Добавить(Счет);
	КонецЦикла;
	Для каждого Счет Из БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланСчетов.ПриобретениеЗемельныхУчастков) Цикл //08.01
		МассивСчетов.Добавить(Счет);
	КонецЦикла;
	Для каждого Счет Из БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланСчетов.ПриобретениеОбъектовПриродопользования) Цикл //08.02
		МассивСчетов.Добавить(Счет);
	КонецЦикла;
	Для каждого Счет Из БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланСчетов.СтроительствоОбъектовОсновныхСредств) Цикл //08.03
		МассивСчетов.Добавить(Счет);
	КонецЦикла;
	Для каждого Счет Из БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланСчетов.ПриобретениеОбъектовОсновныхСредств) Цикл //08.04
		МассивСчетов.Добавить(Счет);
	КонецЦикла;
	Для каждого Счет Из БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланСчетов.ПриобретениеНематериальныхАктивов) Цикл //08.05
		МассивСчетов.Добавить(Счет);
	КонецЦикла;
	Для каждого Счет Из БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланСчетов.ВыполнениеНИОКР) Цикл //08.08
		МассивСчетов.Добавить(Счет);
	КонецЦикла;
	Для каждого Счет Из БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланСчетов.СырьеИМатериалы) Цикл //10.01
		МассивСчетов.Добавить(Счет);
	КонецЦикла;
	Для каждого Счет Из БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланСчетов.ПокупныеПолуфабрикатыИКомплектующие) Цикл //10.02
		МассивСчетов.Добавить(Счет);
	КонецЦикла;
	Для каждого Счет Из БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланСчетов.Топливо) Цикл //10.03
		МассивСчетов.Добавить(Счет);
	КонецЦикла;
	Для каждого Счет Из БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланСчетов.Тара) Цикл //10.04
		МассивСчетов.Добавить(Счет);
	КонецЦикла;
	Для каждого Счет Из БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланСчетов.ЗапасныеЧасти) Цикл //10.05
		МассивСчетов.Добавить(Счет);
	КонецЦикла;
	Для каждого Счет Из БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланСчетов.ПрочиеМатериалы) Цикл //10.06
		МассивСчетов.Добавить(Счет);
	КонецЦикла;
	Для каждого Счет Из БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланСчетов.МатериалыПереданныеВПереработку) Цикл //10.07
		МассивСчетов.Добавить(Счет);
	КонецЦикла;
	Для каждого Счет Из БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланСчетов.СтроительныеМатериалы) Цикл //10.08
		МассивСчетов.Добавить(Счет);
	КонецЦикла;
	Для каждого Счет Из БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланСчетов.ИнвентарьИХозяйственныеПринадлежности) Цикл //10.09
		МассивСчетов.Добавить(Счет);
	КонецЦикла;
	Для каждого Счет Из БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланСчетов.СпецоснасткаИСпецодеждаНаСкладе) Цикл //10.10
		МассивСчетов.Добавить(Счет);
	КонецЦикла;
	Для каждого Счет Из БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланСчетов.Полуфабрикаты) Цикл //21
		МассивСчетов.Добавить(Счет);
	КонецЦикла;
	Для каждого Счет Из БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланСчетов.ТоварыНаСкладах) Цикл //41.01
		МассивСчетов.Добавить(Счет);
	КонецЦикла;
	Для каждого Счет Из БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланСчетов.ТоварыВРозничнойТорговле) Цикл //41.02
		МассивСчетов.Добавить(Счет);
	КонецЦикла;
	Для каждого Счет Из БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланСчетов.ТараПодТоваромИПорожняя) Цикл //41.03
		МассивСчетов.Добавить(Счет);
	КонецЦикла;
	Для каждого Счет Из БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланСчетов.ПокупныеИзделия) Цикл //41.04
		МассивСчетов.Добавить(Счет);
	КонецЦикла;
	Для каждого Счет Из БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланСчетов.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ) Цикл //41.11
		МассивСчетов.Добавить(Счет);
	КонецЦикла;
	Для каждого Счет Из БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланСчетов.ГотоваяПродукция) Цикл //43
		МассивСчетов.Добавить(Счет);
	КонецЦикла;
	Для каждого Счет Из БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланСчетов.ТоварыОтгруженные) Цикл //45
		МассивСчетов.Добавить(Счет);
	КонецЦикла;
	
	Возврат МассивСчетов;
	
КонецФункции

Функция СчетаУчетаОС()
	
	ПланСчетов = ПланыСчетов.Хозрасчетный;
	
	МассивСчетов = Новый Массив;
	
	МассивСчетов.Добавить(ПланСчетов.ОСвОрганизации); //01.01
	МассивСчетов.Добавить(ПланСчетов.ОСБезГосРегистрации); //01.08
	МассивСчетов.Добавить(ПланСчетов.МЦвОрганизации); //03.01
	
	Возврат МассивСчетов;
	
КонецФункции

Функция СчетаУчетаНМА()
	
	ПланСчетов = ПланыСчетов.Хозрасчетный;
	
	МассивСчетов = Новый Массив;
	
	Для каждого Счет Из БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланСчетов.НематериальныеАктивы) Цикл //04
		МассивСчетов.Добавить(Счет);
	КонецЦикла;
	
	Возврат МассивСчетов;
	
КонецФункции

#КонецОбласти

#КонецОбласти