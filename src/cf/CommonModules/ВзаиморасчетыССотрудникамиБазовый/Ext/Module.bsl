
#Область СлужебныеПроцедурыИФункции

#Область УчетНачисленнойИВыплаченнойЗарплаты

Процедура ЗарегистрироватьНачисленнуюЗарплату(Движения, Отказ, Организация, ПериодРегистрации, ХарактерВыплаты, Начисления = Неопределено, Удержания = Неопределено) Экспорт
	
	Если Начисления <> НеОпределено Тогда
		
		Для Каждого Начисление Из Начисления Цикл
			
			ЗарплатаКВыплате = Движения.ЗарплатаКВыплате.ДобавитьПриход();
			
			ЗаполнитьЗначенияСвойств(ЗарплатаКВыплате, Начисление);
			ЗарплатаКВыплате.Период					= ПериодРегистрации;
			ЗарплатаКВыплате.Организация			= Организация;
			ЗарплатаКВыплате.ПериодВзаиморасчетов	= ПериодРегистрации;
			ЗарплатаКВыплате.СуммаКВыплате			= Начисление.Сумма + Начисление.СуммаКорректировкиВыплаты;
			
			Взаиморасчеты = Движения.ВзаиморасчетыССотрудниками.ДобавитьПриход();
			
			ЗаполнитьЗначенияСвойств(Взаиморасчеты, Начисление);
			Взаиморасчеты.Период					= ПериодРегистрации;
			Взаиморасчеты.Организация				= Организация;
			Взаиморасчеты.СуммаВзаиморасчетов		= Начисление.Сумма;
			Взаиморасчеты.ВидВзаиморасчетов					= Перечисления.ВидыВзаиморасчетовССотрудниками.ПустаяСсылка();
			Взаиморасчеты.ГруппаНачисленияУдержанияВыплаты	= Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено;
			
		КонецЦикла;
		
		Движения.ЗарплатаКВыплате.Записывать			= Истина;
		Движения.ВзаиморасчетыССотрудниками.Записывать	= Истина;
		
	КонецЕсли;
	
	Если Удержания <> НеОпределено Тогда
		
		Для Каждого Удержание Из Удержания Цикл
			
			ЗарплатаКВыплате = Движения.ЗарплатаКВыплате.ДобавитьПриход();
			
			ЗаполнитьЗначенияСвойств(ЗарплатаКВыплате, Удержание);
			ЗарплатаКВыплате.Период					= ПериодРегистрации;
			ЗарплатаКВыплате.Организация			= Организация;
			ЗарплатаКВыплате.ПериодВзаиморасчетов	= ПериодРегистрации;
			ЗарплатаКВыплате.СуммаКВыплате			= -(Удержание.Сумма - Удержание.СуммаКорректировкиВыплаты);
			
			Взаиморасчеты = Движения.ВзаиморасчетыССотрудниками.ДобавитьПриход();
			
			ЗаполнитьЗначенияСвойств(Взаиморасчеты, Удержание);
			Взаиморасчеты.Период					= ПериодРегистрации;
			Взаиморасчеты.Организация				= Организация;
			Взаиморасчеты.СуммаВзаиморасчетов		= -Удержание.Сумма;
			Взаиморасчеты.ВидВзаиморасчетов					= Перечисления.ВидыВзаиморасчетовССотрудниками.ПустаяСсылка();
			Взаиморасчеты.ГруппаНачисленияУдержанияВыплаты	= Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано;
			
		КонецЦикла;
		
		Движения.ЗарплатаКВыплате.Записывать			= Истина;
		Движения.ВзаиморасчетыССотрудниками.Записывать	= Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьВыплаченнуюЗарплату(Движения, Отказ, Организация, ПериодРегистрации, Зарплата) Экспорт
	
	Для Каждого СтрокаЗарплаты Из Зарплата Цикл
		
		Если СтрокаЗарплаты.КВыплате <> 0 Тогда
			
			ДобавитьЗаписьВыплатыВЗарплатаКВыплате(
				Движения, 
				ПериодРегистрации, 
				ПериодРегистрации, 
				Организация, 
				СтрокаЗарплаты, 
				СтрокаЗарплаты.КВыплате);					
			
			ДобавитьЗаписьВыплатыВВзаиморасчетыССотрудниками(
				Движения, 
				Перечисления.ВидыВзаиморасчетовССотрудниками.ВыплатаЗарплаты,
				ПериодРегистрации, 
				Организация, 
				СтрокаЗарплаты, 
				СтрокаЗарплаты.КВыплате);			
			
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьНачальныеОстатки(Движения, Отказ, Организация, ПериодРегистрации, Остатки) Экспорт
	
	Для Каждого СтрокаОстатка Из Остатки Цикл
		
		Если СтрокаОстатка.Сумма <> 0 Тогда
				
			ЗарплатаКВыплате = Движения.ЗарплатаКВыплате.ДобавитьПриход();
			ЗаполнитьЗначенияСвойств(ЗарплатаКВыплате, СтрокаОстатка);
			
			ЗарплатаКВыплате.Период			= ПериодРегистрации;
			ЗарплатаКВыплате.Организация	= Организация;
			ЗарплатаКВыплате.СуммаКВыплате	= СтрокаОстатка.Сумма;
			
			Взаиморасчеты = Движения.ВзаиморасчетыССотрудниками.ДобавитьПриход();
			ЗаполнитьЗначенияСвойств(Взаиморасчеты, СтрокаОстатка);
			
			Взаиморасчеты.Период				= ПериодРегистрации;
			Взаиморасчеты.Организация			= Организация;
			Взаиморасчеты.СуммаВзаиморасчетов	= СтрокаОстатка.Сумма;
			Взаиморасчеты.ВидВзаиморасчетов	= Перечисления.ВидыВзаиморасчетовССотрудниками.НачальнаяЗадолженность;
			Взаиморасчеты.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.ПустаяСсылка();
				
		КонецЕсли;	
		
	КонецЦикла;
			
	Движения.ЗарплатаКВыплате.Записывать			= Истина;
	Движения.ВзаиморасчетыССотрудниками.Записывать	= Истина;

КонецПроцедуры

#КонецОбласти

#Область ПервоначальноеЗаполнениеИОбновлениеИнформационнойБазы

Процедура СпособыВыплатыЗарплатыНачальноеЗаполнение() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ИСТИНА КАК ЗначениеИстина
	               |ИЗ
	               |	Справочник.СпособыВыплатыЗарплаты КАК СпособыВыплатыЗарплаты
	               |ГДЕ
	               |	СпособыВыплатыЗарплаты.Предопределенный = ЛОЖЬ";
				   
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда 
		Возврат;
	КонецЕсли;	
	
	СпособВыплатыСсылка = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СпособыВыплатыЗарплаты.Зарплата");
	
	Если СпособВыплатыСсылка <> Неопределено Тогда
		
		СпособВыплатыОбъект = СпособВыплатыСсылка.ПолучитьОбъект();
		СпособВыплатыОбъект.Наименование	= НСтр("ru = 'Зарплата за месяц'");
		СпособВыплатыОбъект.Поставляемый	= Истина;
		СпособВыплатыОбъект.ХарактерВыплаты	= Перечисления.ХарактерВыплатыЗарплаты.Зарплата;
		СпособВыплатыОбъект.Записать();
		
	КонецЕсли;
	
	СпособВыплатыОбъект = Справочники.СпособыВыплатыЗарплаты.СоздатьЭлемент();
	
	СпособВыплатыОбъект.Наименование	= НСтр("ru = 'Аванс'");
	СпособВыплатыОбъект.Поставляемый	= Истина;
	СпособВыплатыОбъект.ХарактерВыплаты	= Перечисления.ХарактерВыплатыЗарплаты.Аванс;
	СпособВыплатыОбъект.Записать();
	
КонецПроцедуры

Процедура СпособыВыплатыЗарплатыЗаполнитьПризнакПоставляемый() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СпособыВыплатыЗарплаты.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.СпособыВыплатыЗарплаты КАК СпособыВыплатыЗарплаты
	               |ГДЕ
	               |	СпособыВыплатыЗарплаты.Поставляемый = ЛОЖЬ";
				   
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат;
	КонецЕсли;	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СпособВыплатыОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если СпособВыплатыОбъект.Предопределенный ИЛИ СпособВыплатыОбъект.Наименование = "Аванс" Тогда
			СпособВыплатыОбъект.Поставляемый = Истина;
			СпособВыплатыОбъект.Записать();
		КонецЕсли	
	КонецЦикла	
	
КонецПроцедуры

Процедура СогласоватьТабличныеЧастиВедомостей(ПолноеИмя) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Зарплата.Ссылка КАК Ссылка,
	|	Зарплата.Ссылка.Организация,
	|	Зарплата.Ссылка.ПериодРегистрации,
	|	Зарплата.Ссылка.Дата
	|ИЗ
	|	#ВедомостьЗарплата КАК Зарплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ #ВедомостьСостав КАК Состав
	|		ПО (Состав.ИдентификаторСтроки = Зарплата.ИдентификаторСтроки)
	|ГДЕ
	|	Состав.Ссылка ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Зарплата.Ссылка.Организация,
	|	Зарплата.Ссылка.ПериодРегистрации,
	|	Зарплата.Ссылка.Дата";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВедомостьЗарплата", ПолноеИмя +".Зарплата");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВедомостьСостав", ПолноеИмя +".Состав");
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Ведомость = Выборка.Ссылка.ПолучитьОбъект();
		Ведомость.ОбменДанными.Загрузка = Истина;
		Отказ = Ложь;
		Если Ведомость.Проведен Тогда
			ВзаиморасчетыССотрудниками.ВедомостьОбработкаПроведения(Ведомость, Отказ);
		КонецЕсли;	
		Если НЕ Отказ Тогда
			Ведомость.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеВедомостей

// Возвращает структуру, используемую для заполнения ведомостей на выплату зарплаты.
//
Функция ДанныеЗаполненияВедомости() Экспорт
	
	Шапка = Новый Структура;
	Шапка.Вставить("Дата");
	Шапка.Вставить("Организация");
	Шапка.Вставить("Подразделение");
	Шапка.Вставить("ПериодРегистрации");
	Шапка.Вставить("СпособВыплаты");
	Шапка.Вставить("МестоВыплаты");
	Шапка.Вставить("Округление");
	
	Зарплата = Новый ТаблицаЗначений;
	Зарплата.Колонки.Добавить("Сотрудник");
	Зарплата.Колонки.Добавить("Подразделение");
	Зарплата.Колонки.Добавить("КВыплате");
	
	ДанныеЗаполненияВедомости = Новый Структура;
	
	ДанныеЗаполненияВедомости.Вставить("ЭтоДанныеЗаполненияВедомостиНаВыплатуЗарплаты");
	ДанныеЗаполненияВедомости.Вставить("Шапка",		Шапка);
	ДанныеЗаполненияВедомости.Вставить("Зарплата",	Зарплата);

	Возврат ДанныеЗаполненияВедомости
	
КонецФункции	

#КонецОбласти

#Область ОплатаВедомостей

Процедура ЗарегистрироватьНевыплатуПоВедомости(Движения, Отказ, Ведомость, ФизическиеЛица) Экспорт
	
	Если Отказ Тогда
		Возврат
	КонецЕсли;		
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ведомость", Ведомость);
	Запрос.УстановитьПараметр("Физлица", ФизическиеЛица);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВзаиморасчетыССотрудниками.Период,
	|	ВзаиморасчетыССотрудниками.ВидДвижения,
	|	ВзаиморасчетыССотрудниками.Организация,
	|	ВзаиморасчетыССотрудниками.ФизическоеЛицо,
	|	ВзаиморасчетыССотрудниками.Сотрудник,
	|	ВзаиморасчетыССотрудниками.Подразделение,
	|	ВзаиморасчетыССотрудниками.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ВзаиморасчетыССотрудниками.СтатьяРасходов КАК СтатьяРасходов,
	|	ВзаиморасчетыССотрудниками.СуммаВзаиморасчетов,
	|	ВзаиморасчетыССотрудниками.ВидВзаиморасчетов,
	|	ВзаиморасчетыССотрудниками.ГруппаНачисленияУдержанияВыплаты
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыССотрудниками КАК ВзаиморасчетыССотрудниками
	|ГДЕ
	|	ВзаиморасчетыССотрудниками.Регистратор = &Ведомость
	|	И ВзаиморасчетыССотрудниками.ФизическоеЛицо В(&Физлица)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗарплатаКВыплате.Период,
	|	ЗарплатаКВыплате.ВидДвижения,
	|	ЗарплатаКВыплате.Организация,
	|	ЗарплатаКВыплате.ФизическоеЛицо,
	|	ЗарплатаКВыплате.Сотрудник,
	|	ЗарплатаКВыплате.Подразделение,
	|	ЗарплатаКВыплате.ПериодВзаиморасчетов,
	|	ЗарплатаКВыплате.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов КАК СтатьяРасходов,
	|	ЗарплатаКВыплате.ДокументОснование,
	|	ЗарплатаКВыплате.СуммаКВыплате
	|ИЗ
	|	РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
	|ГДЕ
	|	ЗарплатаКВыплате.Регистратор = &Ведомость
	|	И ЗарплатаКВыплате.ФизическоеЛицо В(&Физлица)";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаВзаиморасчетов	= РезультатыЗапроса[0].Выбрать();
	ВыборкаЗарплатаКВыплате	= РезультатыЗапроса[1].Выбрать();
	
	Пока ВыборкаВзаиморасчетов.Следующий() Цикл
		НоваяЗапись = Движения.ВзаиморасчетыССотрудниками.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаВзаиморасчетов);
		НоваяЗапись.СуммаВзаиморасчетов = - ВыборкаВзаиморасчетов.СуммаВзаиморасчетов;
	КонецЦикла;
	
	Пока ВыборкаЗарплатаКВыплате.Следующий() Цикл
		НоваяЗапись = Движения.ЗарплатаКВыплате.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаЗарплатаКВыплате);
		НоваяЗапись.СуммаКВыплате = - ВыборкаЗарплатаКВыплате.СуммаКВыплате;
	КонецЦикла;
	
	Движения.ВзаиморасчетыССотрудниками.Записывать	= Истина;
	Движения.ЗарплатаКВыплате.Записывать			= Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ВзаимосвязиМеждуОбъектами

Функция СпособВыплатыПоРасчетномуДокументу(РасчетныйДокумент) Экспорт
	Если ТипЗнч(РасчетныйДокумент) = Тип("ДокументСсылка.НачислениеЗарплаты") Тогда
		Возврат Справочники.СпособыВыплатыЗарплаты.Зарплата
	Иначе
		Возврат Справочники.СпособыВыплатыЗарплаты.ПустаяСсылка()
	КонецЕсли	
КонецФункции

Функция МенеджерДокументаВедомостьПоВидуМестаВыплаты(ВидМестаВыплаты) Экспорт
	
	МенеджерДокументаПоМестуВыплаты = Неопределено;
	
	Если ВидМестаВыплаты = Перечисления.ВидыМестВыплатыЗарплаты.Касса Тогда
		МенеджерДокументаПоМестуВыплаты = Документы.ВедомостьНаВыплатуЗарплатыВКассу
	ИначеЕсли ВидМестаВыплаты = Перечисления.ВидыМестВыплатыЗарплаты.ЗарплатныйПроект Тогда
		МенеджерДокументаПоМестуВыплаты = Документы.ВедомостьНаВыплатуЗарплатыВБанк
	КонецЕсли;	
		
	Возврат МенеджерДокументаПоМестуВыплаты
	
КонецФункции

Функция ВидВзаиморасчетовССотрудникамиПоХарактеруВыплатыЗарплаты(ХарактерВыплаты) Экспорт
	
	Если ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Аванс Тогда
		ВидВзаиморасчетов = Перечисления.ВидыВзаиморасчетовССотрудниками.ВыплатаАванса
	ИначеЕсли ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Зарплата Тогда 	
		ВидВзаиморасчетов = Перечисления.ВидыВзаиморасчетовССотрудниками.ВыплатаЗарплаты
	КонецЕсли;	
	
	Возврат ВидВзаиморасчетов
	
КонецФункции

#КонецОбласти

#Область ВыплатаЗарплатыВспомогательныеПроцедурыИФункции

// Помещает строку выплаты в движения по регистру ЗарплатаКВыплате.
// Параметры:
//	Движения - коллекция движений
//	ПериодРегистрации
//	ПериодВзаиморасчетов.
//	Организация
//	СтрокаВыплаты - структура с полями.
//		Сотрудник
//		ФизическоеЛицо
//		Подразделение
//	СуммаКВыплате
//
//	Возвращаемое значение
//		РегистрНакопленияЗапись
//
Функция ДобавитьЗаписьВыплатыВЗарплатаКВыплате(Движения, ПериодРегистрации, ПериодВзаиморасчетов, Организация, СтрокаВыплаты, СуммаКВыплате)
	
	Если СуммаКВыплате = 0 Тогда
		Возврат НеОпределено
	КонецЕсли;
	
	ЗаписьВыплаты = Движения.ЗарплатаКВыплате.ДобавитьРасход();

	ЗаполнитьЗначенияСвойств(ЗаписьВыплаты, СтрокаВыплаты);
	
	ЗаписьВыплаты.Период				= ПериодРегистрации;
	ЗаписьВыплаты.ПериодВзаиморасчетов	= ПериодВзаиморасчетов;
	ЗаписьВыплаты.Организация			= Организация;
	
	ЗаписьВыплаты.СуммаКВыплате			= СуммаКВыплате;
	
	Возврат ЗаписьВыплаты
	
КонецФункции	

// Помещает строку выплаты в движения по регистру ЗарплатаКВыплате.
// Параметры:
//	Движения - коллекция движений
//	ВидВзаиморасчетов
//	ПериодВзаиморасчетов.
//	Организация
//	СтрокаВыплаты - структура с полями.
//		Сотрудник
//		ФизическоеЛицо
//		Подразделение
//	СуммаКВыплате
//
//	Возвращаемое значение
//		РегистрНакопленияЗапись
//
Функция ДобавитьЗаписьВыплатыВВзаиморасчетыССотрудниками(Движения, ВидВзаиморасчетов, ПериодВзаиморасчетов, Организация, СтрокаВыплаты, СуммаКВыплате)
	
	Если СуммаКВыплате = 0 Тогда
		Возврат НеОпределено
	КонецЕсли;
	
	ЗаписьВыплаты = Движения.ВзаиморасчетыССотрудниками.ДобавитьРасход();

	ЗаполнитьЗначенияСвойств(ЗаписьВыплаты, СтрокаВыплаты);
	
	ЗаписьВыплаты.ВидВзаиморасчетов					= ВидВзаиморасчетов;
	ЗаписьВыплаты.ГруппаНачисленияУдержанияВыплаты	= Перечисления.ГруппыНачисленияУдержанияВыплаты.Выплачено;
	
	ЗаписьВыплаты.Период					= ПериодВзаиморасчетов;
	ЗаписьВыплаты.Организация				= Организация;
	
	ЗаписьВыплаты.СуммаВзаиморасчетов		= СуммаКВыплате;
	
	Возврат ЗаписьВыплаты
	
КонецФункции

#КонецОбласти

Функция ПараметрыПолученияЗарплатыКВыплате() Экспорт
	
	ПараметрыПолученияЗарплатыКВыплате = Новый Структура;
	ПараметрыПолученияЗарплатыКВыплате.Вставить("ХарактерВыплаты",			Перечисления.ХарактерВыплатыЗарплаты.ПустаяСсылка());
	ПараметрыПолученияЗарплатыКВыплате.Вставить("Организация",				Справочники.Организации.ПустаяСсылка());
	ПараметрыПолученияЗарплатыКВыплате.Вставить("ПериодРегистрации",		Дата(1,1,1));
	ПараметрыПолученияЗарплатыКВыплате.Вставить("Дата",						Дата(1,1,1));
	ПараметрыПолученияЗарплатыКВыплате.Вставить("ИгнорируемыеРегистраторы",	Новый Массив);
	
	Возврат ПараметрыПолученияЗарплатыКВыплате
	
КонецФункции

Функция ПараметрыПолученияЗарплатыКВыплатеВедомости(Ведомость) Экспорт
	
	ПараметрыПолученияЗарплатыКВыплате = ВзаиморасчетыССотрудниками.ПараметрыПолученияЗарплатыКВыплате();
	
	ПараметрыПолученияЗарплатыКВыплате.ХарактерВыплаты			= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ведомость.СпособВыплаты, "ХарактерВыплаты");
	ПараметрыПолученияЗарплатыКВыплате.Организация				= Ведомость.Организация;
	ПараметрыПолученияЗарплатыКВыплате.ПериодРегистрации		= Ведомость.ПериодРегистрации;
	ПараметрыПолученияЗарплатыКВыплате.Дата						= Ведомость.Дата;
	ПараметрыПолученияЗарплатыКВыплате.ИгнорируемыеРегистраторы	= Ведомость.Ссылка;
	
	Возврат ПараметрыПолученияЗарплатыКВыплате
	
КонецФункции

Процедура СоздатьВТЗарплатаКВыплате(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники) Экспорт
	
	Если Параметры.ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Аванс Тогда 
		СоздатьВТЗарплатаКВыплатеАванс(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники);
	ИначеЕсли Параметры.ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Зарплата Тогда 	
		СоздатьВТЗарплатаКВыплатеЗарплата(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники);
	КонецЕсли;	
	
КонецПроцедуры	

Процедура СоздатьВТЗарплатаКВыплатеАванс(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ПериодРегистрации",			Параметры.ПериодРегистрации);
	Запрос.УстановитьПараметр("ИгнорируемыеРегистраторы",	Параметры.ИгнорируемыеРегистраторы);	
	
	// Получаем размеры плановых авансов сотрудников
	СоздатьВТПлановыйАванс(
		МенеджерВременныхТаблиц, Истина,
		Параметры.Дата,
		ИмяВТСотрудники);

	// Определяем суммы авансов к выплате
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗарплатаКВыплатеОстатки.Сотрудник КАК Сотрудник,
	|	ЗарплатаКВыплатеОстатки.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЗарплатаКВыплатеОстатки.Подразделение КАК Подразделение,
	|	&ПериодРегистрации КАК ПериодВзаиморасчетов,
	|	ЗарплатаКВыплатеОстатки.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ЗарплатаКВыплатеОстатки.СтатьяРасходов КАК СтатьяРасходов,
	|	НЕОПРЕДЕЛЕНО КАК ДокументОснование,
	|	СУММА(ЗарплатаКВыплатеОстатки.СуммаКВыплате) КАК КВыплате
	|ПОМЕСТИТЬ ВТЗарплатаКВыплатеАванс
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПлановыйАванс.Сотрудник КАК Сотрудник,
	|		ПлановыйАванс.ФизическоеЛицо КАК ФизическоеЛицо,
	|		ПлановыйАванс.Подразделение КАК Подразделение,
	|		ПлановыйАванс.СтатьяФинансирования КАК СтатьяФинансирования,
	|		ПлановыйАванс.СтатьяРасходов КАК СтатьяРасходов,
	|		ПлановыйАванс.СуммаКВыплате КАК СуммаКВыплате
	|	ИЗ
	|		ВТПлановыйАванс КАК ПлановыйАванс
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗарплатаКВыплатеОстатки.Сотрудник,
	|		ЗарплатаКВыплатеОстатки.ФизическоеЛицо,
	|		ЗарплатаКВыплатеОстатки.Подразделение,
	|		ЗарплатаКВыплатеОстатки.СтатьяФинансирования,
	|		ЗарплатаКВыплатеОстатки.СтатьяРасходов,
	|		ЗарплатаКВыплатеОстатки.СуммаКВыплатеОстаток
	|	ИЗ
	|		РегистрНакопления.ЗарплатаКВыплатеАвансом.Остатки(
	|				КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ),
	|				ПериодВзаиморасчетов = &ПериодРегистрации
	|					И Сотрудник В
	|						(ВЫБРАТЬ
	|							Сотрудники.Сотрудник
	|						ИЗ
	|							#ВТСотрудники КАК Сотрудники)) КАК ЗарплатаКВыплатеОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗарплатаКВыплате.Сотрудник,
	|		ЗарплатаКВыплате.ФизическоеЛицо,
	|		ЗарплатаКВыплате.Подразделение,
	|		ЗарплатаКВыплате.СтатьяФинансирования,
	|		ЗарплатаКВыплате.СтатьяРасходов,
	|		ВЫБОР
	|			КОГДА ЗарплатаКВыплате.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЗарплатаКВыплате.СуммаКВыплате
	|			ИНАЧЕ ЗарплатаКВыплате.СуммаКВыплате
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ЗарплатаКВыплатеАвансом КАК ЗарплатаКВыплате
	|	ГДЕ
	|		ЗарплатаКВыплате.Регистратор В(&ИгнорируемыеРегистраторы)
	|		И ЗарплатаКВыплате.Период < КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
	|		И ЗарплатаКВыплате.ПериодВзаиморасчетов = &ПериодРегистрации
	|		И ЗарплатаКВыплате.Сотрудник В
	|				(ВЫБРАТЬ
	|					Сотрудники.Сотрудник
	|				ИЗ
	|					#ВТСотрудники КАК Сотрудники)) КАК ЗарплатаКВыплатеОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплатеОстатки.Сотрудник,
	|	ЗарплатаКВыплатеОстатки.ФизическоеЛицо,
	|	ЗарплатаКВыплатеОстатки.Подразделение,
	|	ЗарплатаКВыплатеОстатки.СтатьяФинансирования,
	|	ЗарплатаКВыплатеОстатки.СтатьяРасходов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПлановыйАванс";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСотрудники", ИмяВТСотрудники);
	
	Запрос.Выполнить();
	
	СоздатьВТЗарплатаКВыплатеОграниченнуюСальдоФизлиц(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, "ВТЗарплатаКВыплатеАванс");
	
	Запрос.Текст = 
	"УНИЧТОЖИТЬ ВТЗарплатаКВыплатеАванс";
	Запрос.Выполнить();
	
КонецПроцедуры	

Процедура СоздатьВТЗарплатаКВыплатеЗарплата(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация",				Параметры.Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации",			Параметры.ПериодРегистрации);
	Запрос.УстановитьПараметр("ИгнорируемыеРегистраторы",	Параметры.ИгнорируемыеРегистраторы);	
	
	// Остатки сумм к выплате по указанным сотрудникам
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗарплатаКВыплатеОстатки.Сотрудник КАК Сотрудник,
	|	ЗарплатаКВыплатеОстатки.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЗарплатаКВыплатеОстатки.Подразделение КАК Подразделение,
	|	ЗарплатаКВыплатеОстатки.ПериодВзаиморасчетов,
	|	ЗарплатаКВыплатеОстатки.СтатьяФинансирования,
	|	ЗарплатаКВыплатеОстатки.СтатьяРасходов,
	|	ЗарплатаКВыплатеОстатки.ДокументОснование,
	|	СУММА(ЗарплатаКВыплатеОстатки.СуммаКВыплате) КАК КВыплате
	|ПОМЕСТИТЬ ВТЗарплатаКВыплатеЗарплата
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗарплатаКВыплатеОстатки.Сотрудник КАК Сотрудник,
	|		ЗарплатаКВыплатеОстатки.ФизическоеЛицо КАК ФизическоеЛицо,
	|		ЗарплатаКВыплатеОстатки.Подразделение КАК Подразделение,
	|		ЗарплатаКВыплатеОстатки.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
	|		ЗарплатаКВыплатеОстатки.СтатьяФинансирования КАК СтатьяФинансирования,
	|		ЗарплатаКВыплатеОстатки.СтатьяРасходов КАК СтатьяРасходов,
	|		ЗарплатаКВыплатеОстатки.ДокументОснование КАК ДокументОснование,
	|		ЗарплатаКВыплатеОстатки.СуммаКВыплатеОстаток КАК СуммаКВыплате
	|	ИЗ
	|		РегистрНакопления.ЗарплатаКВыплате.Остатки(
	|				КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ),
	|				Сотрудник В
	|					(ВЫБРАТЬ
	|						Сотрудники.Сотрудник
	|					ИЗ
	|						#ВТСотрудники КАК Сотрудники)) КАК ЗарплатаКВыплатеОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗарплатаКВыплате.Сотрудник,
	|		ЗарплатаКВыплате.ФизическоеЛицо,
	|		ЗарплатаКВыплате.Подразделение,
	|		ЗарплатаКВыплате.ПериодВзаиморасчетов,
	|		ЗарплатаКВыплате.СтатьяФинансирования,
	|		ЗарплатаКВыплате.СтатьяРасходов,
	|		ЗарплатаКВыплате.ДокументОснование,
	|		ВЫБОР
	|			КОГДА ЗарплатаКВыплате.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЗарплатаКВыплате.СуммаКВыплате
	|			ИНАЧЕ ЗарплатаКВыплате.СуммаКВыплате
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
	|	ГДЕ
	|		ЗарплатаКВыплате.Регистратор В(&ИгнорируемыеРегистраторы)
	|		И ЗарплатаКВыплате.Период < КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
	|		И ЗарплатаКВыплате.Сотрудник В
	|				(ВЫБРАТЬ
	|					Сотрудники.Сотрудник
	|				ИЗ
	|					#ВТСотрудники КАК Сотрудники)) КАК ЗарплатаКВыплатеОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплатеОстатки.Сотрудник,
	|	ЗарплатаКВыплатеОстатки.ФизическоеЛицо,
	|	ЗарплатаКВыплатеОстатки.Подразделение,
	|	ЗарплатаКВыплатеОстатки.ПериодВзаиморасчетов,
	|	ЗарплатаКВыплатеОстатки.СтатьяФинансирования,
	|	ЗарплатаКВыплатеОстатки.СтатьяРасходов,
	|	ЗарплатаКВыплатеОстатки.ДокументОснование";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСотрудники", ИмяВТСотрудники);
	
	Запрос.Выполнить();
	
	СоздатьВТЗарплатаКВыплатеОграниченнуюСальдоФизлиц(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, "ВТЗарплатаКВыплатеЗарплата");
	
	Запрос.Текст = 
	"УНИЧТОЖИТЬ ВТЗарплатаКВыплатеЗарплата";
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТЗарплатаКВыплатеОграниченнуюСальдоФизлиц(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТЗарплатаКВыплате) Экспорт
	
	Если Параметры.ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Аванс Тогда 
		ПериодВзаиморасчетов = ДобавитьМесяц(Параметры.ПериодРегистрации, -1);
	Иначе 	
		ПериодВзаиморасчетов = Параметры.ПериодРегистрации;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация",				Параметры.Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации",			Параметры.ПериодРегистрации);
	Запрос.УстановитьПараметр("ПериодВзаиморасчетов",		ПериодВзаиморасчетов);
	Запрос.УстановитьПараметр("ИгнорируемыеРегистраторы",	Параметры.ИгнорируемыеРегистраторы);	
	
	// Зарплата по физлицам
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗарплатаСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СУММА(ЗарплатаСотрудников.КВыплате) КАК КВыплате
		|ПОМЕСТИТЬ ВТЗарплатаФизлиц
		|ИЗ
		|	#ВТЗарплатаКВыплате КАК ЗарплатаСотрудников
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗарплатаСотрудников.ФизическоеЛицо";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТЗарплатаКВыплате", ИмяВТЗарплатаКВыплате);
	Запрос.Выполнить();	
	
	ПараметрыПолученияСотрудников =
		КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоВременнойТаблице();
	ПараметрыПолученияСотрудников.Организация			= Параметры.Организация;
	ПараметрыПолученияСотрудников.ИмяВТФизическиеЛица	= "ВТЗарплатаФизлиц";
	ПараметрыПолученияСотрудников.ОкончаниеПериода		= МИН(КонецМесяца(Параметры.ПериодРегистрации), Параметры.Дата);
	
	// Получаем всех сотрудников переданных физлиц
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(
		МенеджерВременныхТаблиц, Истина, 
		ПараметрыПолученияСотрудников,
		"ВТСотрудникиФизическихЛиц");
		
	// Запрашиваем плановые авансы всех сотрудников рассматриваемых физлиц
	СоздатьВТПлановыйАванс(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры.Дата, "ВТСотрудникиФизическихЛиц");		
	
	// Определяем плановые авансы физических лиц
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПлановыйАванс.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СУММА(ПлановыйАванс.СуммаКВыплате) КАК КВыплате
		|ПОМЕСТИТЬ ВТПлановыйАвансФизическихЛиц
		|ИЗ
		|	ВТПлановыйАванс КАК ПлановыйАванс
		|
		|СГРУППИРОВАТЬ ПО
		|	ПлановыйАванс.ФизическоеЛицо";

	// Получаем начисленное в первой половине месяца
	Запрос.Текст = 
		Запрос.Текст +
		ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов() + 
		"ВЫБРАТЬ
		|	ЗарплатаКВыплатеАвансом.ФизическоеЛицо,
		|	СУММА(ЗарплатаКВыплатеАвансом.СуммаКВыплате) КАК КВыплате
		|ПОМЕСТИТЬ ВТНачисленныйАвансФизическихЛиц
		|ИЗ
		|	РегистрНакопления.ЗарплатаКВыплатеАвансом КАК ЗарплатаКВыплатеАвансом
		|ГДЕ
		|	ЗарплатаКВыплатеАвансом.Период = &ПериодРегистрации
		|	И ЗарплатаКВыплатеАвансом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗарплатаКВыплатеАвансом.ФизическоеЛицо";
	
	// Остатки зарплаты к выплате по физлицам
	Запрос.Текст = 
		Запрос.Текст +
		ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов() + 
		"ВЫБРАТЬ
		|	ЗарплатаКВыплатеОстатки.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СУММА(ЗарплатаКВыплатеОстатки.СуммаКВыплате) КАК КВыплате
		|ПОМЕСТИТЬ ВТЗарплатаКВыплатеФизическихЛиц
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЗарплатаКВыплатеОстатки.ФизическоеЛицо КАК ФизическоеЛицо,
		|		ЗарплатаКВыплатеОстатки.СуммаКВыплатеОстаток КАК СуммаКВыплате
		|	ИЗ
		|		РегистрНакопления.ЗарплатаКВыплате.Остатки(
		|				КОНЕЦПЕРИОДА(&ПериодВзаиморасчетов, МЕСЯЦ),
		|				Организация = &Организация
		|					И ФизическоеЛицо В
		|						(ВЫБРАТЬ
		|							ЗарплатаФизлиц.ФизическоеЛицо
		|						ИЗ
		|							ВТЗарплатаФизлиц КАК ЗарплатаФизлиц)) КАК ЗарплатаКВыплатеОстатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗарплатаКВыплате.ФизическоеЛицо,
		|		ВЫБОР
		|			КОГДА ЗарплатаКВыплате.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				ТОГДА -ЗарплатаКВыплате.СуммаКВыплате
		|			ИНАЧЕ ЗарплатаКВыплате.СуммаКВыплате
		|		КОНЕЦ
		|	ИЗ
		|		РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
		|	ГДЕ
		|		ЗарплатаКВыплате.Регистратор В(&ИгнорируемыеРегистраторы)
		|		И ЗарплатаКВыплате.Период < КОНЕЦПЕРИОДА(&ПериодВзаиморасчетов, МЕСЯЦ)
		|		И ЗарплатаКВыплате.Организация = &Организация
		|		И ЗарплатаКВыплате.ФизическоеЛицо В
		|				(ВЫБРАТЬ
		|					ЗарплатаФизлиц.ФизическоеЛицо
		|				ИЗ
		|					ВТЗарплатаФизлиц КАК ЗарплатаФизлиц)) КАК ЗарплатаКВыплатеОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗарплатаКВыплатеОстатки.ФизическоеЛицо";
		
		
	// Предел выплаты по физлицам
	Запрос.Текст = 
		Запрос.Текст +
		ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов() + 
		"ВЫБРАТЬ
		|	ПределВыплат.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СУММА(ПределВыплат.КВыплате) КАК КВыплате
		|ПОМЕСТИТЬ ВТСальдоФизлиц
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПлановыйАванс.ФизическоеЛицо КАК ФизическоеЛицо,
		|		ПлановыйАванс.КВыплате КАК КВыплате
		|	ИЗ
		|		ВТПлановыйАвансФизическихЛиц КАК ПлановыйАванс
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		НачисленныйАванс.ФизическоеЛицо,
		|		НачисленныйАванс.КВыплате
		|	ИЗ
		|		ВТНачисленныйАвансФизическихЛиц КАК НачисленныйАванс
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗарплатаКВыплате.ФизическоеЛицо,
		|		ЗарплатаКВыплате.КВыплате
		|	ИЗ
		|		ВТЗарплатаКВыплатеФизическихЛиц КАК ЗарплатаКВыплате) КАК ПределВыплат
		|
		|СГРУППИРОВАТЬ ПО
		|	ПределВыплат.ФизическоеЛицо";
		
	// Коэффициент выплаты (отношение сальдо к зарплате, но не больше зарплаты)
	Запрос.Текст = 
		Запрос.Текст +
		ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов() + 
		"ВЫБРАТЬ
		|	Зарплата.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВЫБОР
		|		КОГДА Зарплата.КВыплате <= 0
		|			ТОГДА 1
		|		КОГДА ЕСТЬNULL(Сальдо.КВыплате, 0) / Зарплата.КВыплате > 1
		|			ТОГДА 1
		|		КОГДА ЕСТЬNULL(Сальдо.КВыплате, 0) < 0
		|			ТОГДА 0
		|		ИНАЧЕ ВЫРАЗИТЬ(ЕСТЬNULL(Сальдо.КВыплате, 0) / Зарплата.КВыплате КАК ЧИСЛО(25, 10))
		|	КОНЕЦ КАК Размер
		|ПОМЕСТИТЬ ВТКоэффициентыВыплаты
		|ИЗ
		|	ВТЗарплатаФизлиц КАК Зарплата
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСальдоФизлиц КАК Сальдо
		|		ПО Зарплата.ФизическоеЛицо = Сальдо.ФизическоеЛицо";
		
	// Ограничиваем суммы зарплаты коэффициентами выплаты		
	Запрос.Текст = 
		Запрос.Текст +
		ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов() + 
		"ВЫБРАТЬ
		|	ЗарплатаКВыплате.Сотрудник КАК Сотрудник,
		|	ЗарплатаКВыплате.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЗарплатаКВыплате.Подразделение КАК Подразделение,
		|	ЗарплатаКВыплате.ПериодВзаиморасчетов,
		|	ЗарплатаКВыплате.СтатьяФинансирования,
		|	ЗарплатаКВыплате.СтатьяРасходов,
		|	ЗарплатаКВыплате.ДокументОснование,
		|	ВЫРАЗИТЬ(ЗарплатаКВыплате.КВыплате * КоэффициентыВыплаты.Размер КАК ЧИСЛО(15, 2)) КАК КВыплате
		|ПОМЕСТИТЬ ВТЗарплатаКВыплате
		|ИЗ
		|	#ВТЗарплатаКВыплате КАК ЗарплатаКВыплате
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКоэффициентыВыплаты КАК КоэффициентыВыплаты
		|		ПО (КоэффициентыВыплаты.ФизическоеЛицо = ЗарплатаКВыплате.ФизическоеЛицо)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТЗарплатаКВыплате", ИмяВТЗарплатаКВыплате);
	
	// Удаляем временные таблицы
	Запрос.Текст = 
		Запрос.Текст +
		ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов() +
		"УНИЧТОЖИТЬ ВТЗарплатаФизлиц
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСотрудникиФизическихЛиц
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПлановыйАванс
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПлановыйАвансФизическихЛиц
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТНачисленныйАвансФизическихЛиц
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТЗарплатаКВыплатеФизическихЛиц
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСальдоФизлиц
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТКоэффициентыВыплаты";
		
	Запрос.Выполнить();
		
КонецПроцедуры

Процедура СоздатьВТПлановыйАванс(МенеджерВременныхТаблиц, ТолькоРазрешенные, Дата, ИмяВТСотрудники) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Дата", 				Дата);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Сотрудники.Сотрудник,
	|	&Дата КАК Период
	|ПОМЕСТИТЬ ВТСотрудникиИПериод
	|ИЗ
	|	#ВТСотрудники КАК Сотрудники";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСотрудники", ИмяВТСотрудники);
		
	Запрос.Выполнить();
	
	// Получаем кадровые данные сотрудников.
	ОписательВТ = 
		КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
			МенеджерВременныхТаблиц,
			"ВТСотрудникиИПериод");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВТ, ТолькоРазрешенные, "Подразделение, ФОТ, СпособРасчетаАванса, Аванс");
		
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	Сотрудники.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	КадровыеДанныеСотрудников.Подразделение КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансирования,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка) КАК СтатьяРасходов,
	|	ВЫБОР
	|		КОГДА КадровыеДанныеСотрудников.СпособРасчетаАванса = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаАванса.ФиксированнойСуммой)
	|			ТОГДА ЕСТЬNULL(КадровыеДанныеСотрудников.Аванс, 0)
	|		КОГДА КадровыеДанныеСотрудников.СпособРасчетаАванса = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаАванса.ПроцентомОтТарифа)
	|				И ЕСТЬNULL(КадровыеДанныеСотрудников.Аванс, 0) <> 0
	|			ТОГДА ЕСТЬNULL(КадровыеДанныеСотрудников.ФОТ, 0) * КадровыеДанныеСотрудников.Аванс / 100
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаКВыплате
	|ПОМЕСТИТЬ ВТПлановыйАванс
	|ИЗ
	|	#ВТСотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ПО Сотрудники.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСотрудникиИПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТКадровыеДанныеСотрудников";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСотрудники", ИмяВТСотрудники);
	
	Запрос.Выполнить();
	
КонецПроцедуры	

Процедура СоздатьВТСотрудникиДляВедомостиПоШапке(МенеджерВременныхТаблиц, Ведомость, ИмяВТСотрудники = "") Экспорт
	
	// Отбор сотрудников по организации и подразделению.
	СоздатьВТСотрудникиДляВедомостиПоМестуРаботы(МенеджерВременныхТаблиц, Ведомость, ИмяВТСотрудники);
	
	// Отбор по месту выплаты зарплаты.
	СоздатьВТСотрудникиДляВедомостиПоМестуВыплаты(МенеджерВременныхТаблиц, Ведомость, ИмяВТСотрудники);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДатаДляКадровыхДанных", Ведомость.Дата);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	&ДатаДляКадровыхДанных КАК Период
	|ПОМЕСТИТЬ ВТСотрудникиДляВедомости
	|ИЗ
	|	#ВТСотрудники КАК Сотрудники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ #ВТСотрудники";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСотрудники", ИмяВТСотрудники);
	
	Запрос.Выполнить();

КонецПроцедуры

Процедура СоздатьВТСотрудникиДляВедомостиПоМестуРаботы(МенеджерВременныхТаблиц, Ведомость, ИмяВТСотрудники) 

	ДлинаСуток = 86400;
	
	ПараметрыПолученияСотрудниковОрганизаций = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудниковОрганизаций.Организация 					= Ведомость.Организация;
	ПараметрыПолученияСотрудниковОрганизаций.Подразделение 					= Ведомость.Подразделение;
	ПараметрыПолученияСотрудниковОрганизаций.ОтбиратьПоГоловнойОрганизации 	= Ложь;
	ПараметрыПолученияСотрудниковОрганизаций.НачалоПериода 		= НачалоМесяца(Ведомость.ПериодРегистрации);
	ПараметрыПолученияСотрудниковОрганизаций.ОкончаниеПериода	= МИН(КонецМесяца(Ведомость.ПериодРегистрации), Ведомость.Дата);

	Если ЗначениеЗаполнено(Ведомость.Подразделение) Тогда
		
		КадровыйУчет.СоздатьВТСотрудникиОрганизации(
			МенеджерВременныхТаблиц, Истина, 
			ПараметрыПолученияСотрудниковОрганизаций, 
			"ВТСотрудникиПоМестуРаботыСлужебная");
		
	Иначе
		
		КадровыйУчет.СоздатьВТСотрудникиОрганизации(МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудниковОрганизаций);
		КадровыйУчет.СоздатьВТСотрудникиНеОформленныеПоТрудовомуДоговору(МенеджерВременныхТаблиц, Истина, Ведомость.Организация);
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТСотрудникиПоМестуРаботыСлужебная
		|ИЗ
		|	ВТСотрудникиОрганизации КАК Сотрудники
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Сотрудники.Сотрудник,
		|	Сотрудники.Сотрудник.ФизическоеЛицо
		|ИЗ
		|	ВТСотрудникиНеОформленныеПоТрудовомуДоговору КАК Сотрудники
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСотрудникиОрганизации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСотрудникиНеОформленныеПоТрудовомуДоговору";
		
		Запрос.Выполнить();
		
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	Если ЗначениеЗаполнено(ИмяВТСотрудники) Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТСотрудникиПоМестуРаботы
		|ИЗ
		|	ВТСотрудникиПоМестуРаботыСлужебная КАК Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ВТСотрудники КАК ВходящиеСотрудники
		|		ПО Сотрудники.Сотрудник = ВходящиеСотрудники.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСотрудникиПоМестуРаботыСлужебная
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ #ВТСотрудники";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСотрудники", ИмяВТСотрудники);

	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТСотрудникиПоМестуРаботы
		|ИЗ
		|	ВТСотрудникиПоМестуРаботыСлужебная КАК Сотрудники
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСотрудникиПоМестуРаботыСлужебная";
		
	КонецЕсли;
	
	Запрос.Выполнить();
	
	ИмяВТСотрудники = "ВТСотрудникиПоМестуРаботы"
	
КонецПроцедуры

Процедура СоздатьВТСотрудникиДляВедомостиПоМестуВыплаты(МенеджерВременныхТаблиц, Ведомость, ИмяВТСотрудники) 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	МестоВыплаты = Ведомость.МестоВыплаты();
	
	Если МестоВыплаты.Вид = Перечисления.ВидыМестВыплатыЗарплаты.ЗарплатныйПроект Тогда
		
		ОписательВременныхТаблиц = 
			ОбменСБанкамиПоЗарплатнымПроектам.ОписательВременныхТаблицДляСоздатьПоВременнойТаблицеВТЛицевыеСчетаСотрудников(
				МенеджерВременныхТаблиц, 
				ИмяВТСотрудники);
			
		ОбменСБанкамиПоЗарплатнымПроектам.СоздатьПоВременнойТаблицеВТЛицевыеСчетаСотрудников(
			ОписательВременныхТаблиц, Истина, 
			Ведомость.Организация, 
			КонецМесяца(Ведомость.ПериодРегистрации), 
			МестоВыплаты.Значение);
				
		Если ЗначениеЗаполнено(МестоВыплаты.Значение) Тогда	
			// При указанном зарплатном проекте отбираем сотрудников с л/с в этом проекте.
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Сотрудники.Сотрудник КАК Сотрудник,
			|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
			|ПОМЕСТИТЬ ВТСотрудникиПоМестуВыплаты
			|ИЗ
			|	#ВТСотрудники КАК Сотрудники
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЛицевыеСчетаСотрудников КАК ЛицевыеСчетаСотрудников
			|		ПО Сотрудники.Сотрудник = ЛицевыеСчетаСотрудников.Сотрудник
			|			И (ЛицевыеСчетаСотрудников.НомерЛицевогоСчета ЕСТЬ НЕ NULL )";
		Иначе
			// При не указанном зарплатном проекте отбираем тех сотрудников, у которых нет л/с ни в одном проекте.
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Сотрудники.Сотрудник КАК Сотрудник,
			|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
			|ПОМЕСТИТЬ ВТСотрудникиПоМестуВыплаты
			|ИЗ
			|	#ВТСотрудники КАК Сотрудники
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЛицевыеСчетаСотрудников КАК ЛицевыеСчетаСотрудников
			|		ПО Сотрудники.Сотрудник = ЛицевыеСчетаСотрудников.Сотрудник
			|ГДЕ
			|	ЛицевыеСчетаСотрудников.НомерЛицевогоСчета ЕСТЬ NULL ";
		КонецЕсли	
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТСотрудникиПоМестуВыплаты
		|ИЗ
		|	#ВТСотрудники КАК Сотрудники";
		
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСотрудники", ИмяВТСотрудники);
	
	Запрос.Выполнить();
	
	ИмяВТСотрудники = "ВТСотрудникиПоМестуВыплаты"
	
КонецПроцедуры

Процедура СоздатьВТСотрудникиДляВедомостиПоФизическимЛицам(МенеджерВременныхТаблиц, Ведомость, ФизическиеЛица) Экспорт
	
	ПараметрыПолученияСотрудников =
		КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудников.Организация = Ведомость.Организация;
	ПараметрыПолученияСотрудников.Подразделение = Ведомость.Подразделение;
	ПараметрыПолученияСотрудников.СписокФизическихЛиц = ФизическиеЛица;
	ПараметрыПолученияСотрудников.НачалоПериода 		= НачалоМесяца(Ведомость.ПериодРегистрации);
	ПараметрыПолученияСотрудников.ОкончаниеПериода	= МИН(КонецМесяца(Ведомость.ПериодРегистрации), Ведомость.Дата);
	ПараметрыПолученияСотрудников.КадровыеДанные = "Подразделение";
	
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(
		МенеджерВременныхТаблиц, Истина, 
		ПараметрыПолученияСотрудников, 
		"ВТСотрудникиДляВедомости");
		
КонецПроцедуры	

#Область ПроцедурыИФункцииВедомостейНаВыплатуЗарплаты

// Заполнение и расчет документа.

Функция ВедомостьВКассуМестоВыплаты(Ведомость) Экспорт
	
	МестоВыплаты = ВзаиморасчетыССотрудниками.ВедомостьМестоВыплаты();
	МестоВыплаты.Вид = Перечисления.ВидыМестВыплатыЗарплаты.Касса;
	МестоВыплаты.Значение = Неопределено;
	
	Возврат МестоВыплаты
	
КонецФункции

Процедура ВедомостьВКассуУстановитьМестоВыплаты(Ведомость, Значение) Экспорт
	
КонецПроцедуры	

Функция ВедомостьМожноЗаполнитьЗарплату(Ведомость) Экспорт
	
	ПравилаПроверки = Новый Структура;
	
	ПравилаПроверки.Вставить("Организация",			НСтр("ru='Не выбрана организация'"));
	ПравилаПроверки.Вставить("ПериодРегистрации",	НСтр("ru='Не задан период регистрации'"));
	ПравилаПроверки.Вставить("Дата",				НСтр("ru='Не задана дата документа'"));
	ПравилаПроверки.Вставить("СпособВыплаты",		НСтр("ru='Не указан способ выплаты'"));
	
	ПравилаПроверки.Вставить("Округление",			НСтр("ru='Не указан способ округления'"));
	
	Возврат	ЗарплатаКадрыКлиентСервер.СвойстваЗаполнены(Ведомость, ПравилаПроверки, Истина)

КонецФункции

/// Заполнение ведомостей

Процедура ВедомостьЗарплатаКВыплатеРассчитатьСуммы(Ведомость, ЗарплатаКВыплате) Экспорт
	
	// Округление результатов
	Если ЗначениеЗаполнено(Ведомость.Округление) Тогда
		СпособОкругленияСсылка = Ведомость.Округление;
	Иначе
		СпособОкругленияСсылка = Справочники.СпособыОкругленияПриРасчетеЗарплаты.ПоУмолчанию();
	КонецЕсли;
	
	СпособОкругления = СпособОкругленияСсылка.ПолучитьОбъект();
	
	Для Каждого СтрокаЗарплаты Из ЗарплатаКВыплате Цикл
		СтрокаЗарплаты.КВыплате = СпособОкругления.Округлить(СтрокаЗарплаты.КВыплате);
	КонецЦикла;
	
КонецПроцедуры

Функция ВедомостьСоставПоТаблицеЗарплат(Ведомость, ТаблицаЗарплат) Экспорт
	
	// Определяем поля состава по метаданным ТЧ ведомости
	ПоляСостава	= Новый Массив;
	Для Каждого РеквизитСостава Из Ведомость.Метаданные().ТабличныеЧасти.Состав.Реквизиты  Цикл
		ПоляСостава.Добавить(РеквизитСостава.Имя);
	КонецЦикла;	
	
	// Создаем таблицу состава - ключевые поля и поле с массивом строк таблицы зарплат
	Состав = 
		Ведомость.Состав.ВыгрузитьКолонки(
			СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(ПоляСостава));
	Состав.Колонки.Добавить("КВыплате"); 		
	Состав.Колонки.Добавить("Зарплата"); 		
	
	// ключ строки состава - это его поля, кроме идентификатора строки
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПоляСостава, "ИдентификаторСтроки");
	КлючевыеПоля = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(ПоляСостава);
	
	// структура для отбора строк зарплаты, попадающих в строку состава
	ПараметрыОтбораЗарплаты = Новый Структура(КлючевыеПоля);
	
	// выделяем уникальные сочетания ключевых полей
	Ключи = ТаблицаЗарплат.Скопировать(, КлючевыеПоля);
	Ключи.Свернуть(КлючевыеПоля);
	
	// создаем строки состава, помещая в них и строки таблицы зарплат
	Для Каждого Ключ Из Ключи Цикл
		
		ИдентификаторСтроки = Новый УникальныйИдентификатор;
		
		СтрокаСостава = Состав.Добавить();
		СтрокаСостава.ИдентификаторСтроки = ИдентификаторСтроки;
		ЗаполнитьЗначенияСвойств(СтрокаСостава, Ключ);
		
		ЗаполнитьЗначенияСвойств(ПараметрыОтбораЗарплаты, Ключ); 
		СтрокаСостава.Зарплата = ТаблицаЗарплат.Скопировать(ПараметрыОтбораЗарплаты);
		СтрокаСостава.КВыплате = СтрокаСостава.Зарплата.Итог("КВыплате");
		
	КонецЦикла;
	
	Возврат Состав;
	
КонецФункции	

Процедура ВедомостьОчиститьСостав(Ведомость) Экспорт
	Ведомость.Состав.Очистить();
	Ведомость.Зарплата.Очистить();
КонецПроцедуры	

Процедура ВедомостьДополнитьСостав(Ведомость, Состав) Экспорт
	
	Для Каждого СтрокаСостава Из Состав Цикл
		
		СтрокаТЧСостав = Ведомость.Состав.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧСостав, СтрокаСостава);

		Для Каждого СтрокаЗарплаты Из СтрокаСостава.Зарплата Цикл
			СтрокаТЧЗарплата = Ведомость.Зарплата.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧЗарплата, СтрокаЗарплаты);
			СтрокаТЧЗарплата.ИдентификаторСтроки = СтрокаСостава.ИдентификаторСтроки;
		КонецЦикла
		
	КонецЦикла
	
КонецПроцедуры	

/// Обработчики событий модуля объекта документов Ведомости.

Процедура ВедомостьОбработкаЗаполнения(Ведомость, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если ВзаиморасчетыССотрудниками.ЭтоДанныеЗаполненияВедомости(ДанныеЗаполнения) Тогда
		
		ЗаполнитьЗначенияСвойств(Ведомость, ДанныеЗаполнения.Шапка);
		Ведомость.УстановитьМестоВыплаты(ДанныеЗаполнения.Шапка.МестоВыплаты);
		Ведомость.Зарплата.Загрузить(ДанныеЗаполнения.Зарплата);
		
		ВедомостьЗаполнитьОтветственныеЛица(Ведомость);
		
		СтандартнаяОбработка = Ложь
		
	КонецЕсли
	
КонецПроцедуры

Процедура ВедомостьПередЗаписью(ДокументОбъект, Отказ, РежимЗаписи) Экспорт
	
	// Очистка табличной части Зарплата от строк, не имеющих "родителя" в ТЧ Состав
	// Синхронизация общих реквизитов табличных частей Состав и Зарплата
	ПоляСостава	= Новый Массив;
	Для Каждого РеквизитСостава Из ДокументОбъект.Метаданные().ТабличныеЧасти.Состав.Реквизиты  Цикл
		ПоляСостава.Добавить(РеквизитСостава.Имя);
	КонецЦикла;	
	СписокСвойств = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(ПоляСостава);
	
	ЛишниеСтроки = Новый Массив;
	Для Каждого СтрокаЗарплаты Из ДокументОбъект.Зарплата Цикл
		СтрокаСостава = ДокументОбъект.Состав.Найти(СтрокаЗарплаты.ИдентификаторСтроки, "ИдентификаторСтроки");
		Если СтрокаСостава = Неопределено Тогда
			ЛишниеСтроки.Добавить(СтрокаЗарплаты);
		Иначе	
			ЗаполнитьЗначенияСвойств(СтрокаЗарплаты, СтрокаСостава, СписокСвойств)
		КонецЕсли	
	КонецЦикла;
	Для Каждого ЛишняяСтрока Из ЛишниеСтроки Цикл
		ДокументОбъект.Зарплата.Удалить(ЛишняяСтрока);
	КонецЦикла;	
	
	// Посчитать сумму документа и записать ее в соответствующий реквизит шапки.
	ДокументОбъект.СуммаПоДокументу = ДокументОбъект.Зарплата.Итог("КВыплате");
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ДокументОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если ВзаиморасчетыССотрудниками.ЕстьОплатаПоВедомости(ДокументОбъект.Ссылка) Тогда
		
		СообщениеОбОшибке = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='По ведомости %1 номер %2 от %3 произведены оплаты, изменения запрещены'"), 
				?(ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ВедомостьНаВыплатуЗарплатыВКассу"), НСтр("ru='в кассу'"), НСтр("ru='в банк'")), 
				ДокументОбъект.Номер, 
				Формат(ДокументОбъект.Дата, "ДЛФ=D"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке, ДокументОбъект);
		
		Отказ = Истина;
		
		Возврат
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВедомостьЗаполнитьОтветственныеЛица(Ведомость) Экспорт
	
	ЗаполняемыеЗначения = Новый Структура;
	ЗаполняемыеЗначения.Вставить("Организация");
	МенеджерВедомости = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Ведомость.Ссылка);
	Для Каждого Реквизит Из МенеджерВедомости.РеквизитыОтветственныхЛиц() Цикл
		ЗаполняемыеЗначения.Вставить(Реквизит);
	КонецЦикла;	
	ЗаполнитьЗначенияСвойств(ЗаполняемыеЗначения, Ведомость);
	ЗарплатаКадры.ПолучитьЗначенияПоУмолчанию(ЗаполняемыеЗначения);
	ЗаполнитьЗначенияСвойств(Ведомость, ЗаполняемыеЗначения,, "Организация");
	
КонецПроцедуры

Процедура ВедомостьЗарегистрироватьВыплату(Ведомость, Отказ) Экспорт
	
	ХарактерВыплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ведомость.СпособВыплаты, "ХарактерВыплаты");
	
	// Формируем взаимозачеты
	
	Колонки = "Сотрудник, ФизическоеЛицо, ПериодВзаиморасчетов, Подразделение, СтатьяФинансирования, СтатьяРасходов, ДокументОснование, КВыплате";
	
	ОтрицательнаяЗарплата = Ведомость.Зарплата.ВыгрузитьКолонки(Колонки);
	ОтрицательнаяЗарплата.Колонки.Добавить("КЗачету", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ПоложительнаяЗарплата = ОтрицательнаяЗарплата.СкопироватьКолонки();
	
	ПараметрыОтбораЗачета = Новый Структура("ФизическоеЛицо, СтатьяФинансирования, СтатьяРасходов");
	
	Для Каждого СтрокаСостава Из Ведомость.Состав Цикл
		
		ОтрицательнаяЗарплата.Очистить();
		ПоложительнаяЗарплата.Очистить();
		
		ЗарплатаСтрокиСостава = Ведомость.Зарплата.Выгрузить(Новый Структура("ИдентификаторСтроки", СтрокаСостава.ИдентификаторСтроки), Колонки);
		
		Для Каждого СтрокаЗарплаты Из ЗарплатаСтрокиСостава Цикл
			Если СтрокаЗарплаты.КВыплате > 0 Тогда
				НоваяСтрока = ПоложительнаяЗарплата.Добавить();
			ИначеЕсли СтрокаЗарплаты.КВыплате < 0 Тогда
				НоваяСтрока = ОтрицательнаяЗарплата.Добавить();
			Иначе
				Продолжить;
			КонецЕсли;	
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗарплаты);
			НоваяСтрока.КЗачету = 0;
		КонецЦикла;
		
		ПоложительнаяЗарплата.Сортировать("КВыплате, ПериодВзаиморасчетов, Подразделение, ДокументОснование");
		ОтрицательнаяЗарплата.Сортировать("КВыплате Убыв, ПериодВзаиморасчетов, Подразделение, ДокументОснование");
		
		Для Каждого ОтрицательнаяСтрока Из ОтрицательнаяЗарплата Цикл
			
			ЗаполнитьЗначенияСвойств(ПараметрыОтбораЗачета, ОтрицательнаяСтрока);
			ПоложительныеСтроки = ПоложительнаяЗарплата.НайтиСтроки(ПараметрыОтбораЗачета);
			Для Каждого ПоложительнаяСтрока Из ПоложительныеСтроки Цикл
				
				СуммаЗачета = МИН(-ОтрицательнаяСтрока.КВыплате, ПоложительнаяСтрока.КВыплате);
				ОтрицательнаяСтрока.КВыплате= ОтрицательнаяСтрока.КВыплате + СуммаЗачета;
				ОтрицательнаяСтрока.КЗачету	= ОтрицательнаяСтрока.КЗачету - СуммаЗачета;
				ПоложительнаяСтрока.КВыплате= ПоложительнаяСтрока.КВыплате - СуммаЗачета;
				ПоложительнаяСтрока.КЗачету	= ПоложительнаяСтрока.КЗачету + СуммаЗачета;
				
				Если ОтрицательнаяСтрока.КВыплате = 0 Тогда 
					Прервать
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;	
		
		// Переносим зарплату в учет
		Для Каждого СтрокаЗарплаты Из ПоложительнаяЗарплата Цикл
			 ВедомостьЗарегистрироватьВыплатуСтроки(Ведомость, СтрокаЗарплаты, ХарактерВыплаты)
		КонецЦикла;	
		Для Каждого СтрокаЗарплаты Из ОтрицательнаяЗарплата Цикл
			 ВедомостьЗарегистрироватьВыплатуСтроки(Ведомость, СтрокаЗарплаты, ХарактерВыплаты)
		КонецЦикла;	
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ВедомостьЗарегистрироватьВыплатуСтроки(Ведомость, СтрокаЗарплаты, ХарактерВыплаты)
	
	ВидВзаиморасчетов = ВзаиморасчетыССотрудниками.ВидВзаиморасчетовССотрудникамиПоХарактеруВыплатыЗарплаты(ХарактерВыплаты);
	
	// Зарплата к выплате
	Запись = Ведомость.Движения.ЗарплатаКВыплате.ДобавитьРасход();
	ЗаполнитьЗначенияСвойств(Запись, СтрокаЗарплаты);
	Запись.Организация	= Ведомость.Организация;
	Запись.Период		= Ведомость.ПериодРегистрации;
	Запись.СуммаКВыплате= СтрокаЗарплаты.КВыплате + СтрокаЗарплаты.КЗачету;
	
	// Зарплата к выплате авансом
	Если ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Аванс Тогда
		Запись = Ведомость.Движения.ЗарплатаКВыплатеАвансом.ДобавитьРасход();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаЗарплаты);
		Запись.Организация	= Ведомость.Организация;
		Запись.Период		= Ведомость.ПериодРегистрации;
		Запись.СуммаКВыплате= СтрокаЗарплаты.КВыплате + СтрокаЗарплаты.КЗачету
	КонецЕсли;	
	
	// Взаиморасчеты с сотрудниками - выплата
	Запись = Ведомость.Движения.ВзаиморасчетыССотрудниками.ДобавитьРасход();
	ЗаполнитьЗначенияСвойств(Запись, СтрокаЗарплаты);
	Запись.Организация = Ведомость.Организация;
	Запись.Период = Ведомость.ПериодРегистрации;
	Запись.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Выплачено;
	Запись.СуммаВзаиморасчетов	= СтрокаЗарплаты.КВыплате;
	Запись.ВидВзаиморасчетов	= ВидВзаиморасчетов;
	
	// Взаиморасчеты с сотрудниками - перенос задолженности
	Запись = Ведомость.Движения.ВзаиморасчетыССотрудниками.ДобавитьРасход();
	ЗаполнитьЗначенияСвойств(Запись, СтрокаЗарплаты);
	Запись.Организация = Ведомость.Организация;
	Запись.Период = Ведомость.ПериодРегистрации;
	Запись.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Выплачено;
	Запись.СуммаВзаиморасчетов	= СтрокаЗарплаты.КЗачету;
	Запись.ВидВзаиморасчетов	= Перечисления.ВидыВзаиморасчетовССотрудниками.ПереносЗадолженности;
	
КонецПроцедуры

/// Методы доступа к ведомостям.

/// Печать

Процедура ВедомостьВБанкДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Список перечислений
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СписокПеречислений";
	КомандаПечати.Представление = НСтр("ru = 'Список перечислений'");
	
	// Список перечислений в Microsoft Word.
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СписокПеречислений";
	КомандаПечати.Представление = НСтр("ru = 'Список перечислений в Microsoft Word'");
	КомандаПечати.ФорматСохранения = ТипФайлаТабличногоДокумента.DOCX;
	
КонецПроцедуры

Процедура ВедомостьВБанкПечать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СписокПеречислений") Тогда
		ТабличныйДокумент = Документы.ВедомостьНаВыплатуЗарплатыВБанк.ПечатьСпискаПеречисленийПоДокументам(МассивОбъектов, ОбъектыПечати);
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СписокПеречислений", НСтр("ru = 'Список получателей'"), ТабличныйДокумент);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВедомостьВКассуДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Платежная ведомость (Т-53)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Т53";
	КомандаПечати.Представление = НСтр("ru = 'Платежная ведомость (Т-53)'");
	КомандаПечати.Порядок = 10;
	
	// Платежная ведомость (Т-53) в Microsoft Word.
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Т53";
	КомандаПечати.Представление = НСтр("ru = 'Платежная ведомость (Т-53) в Microsoft Word'");
	КомандаПечати.Порядок = 10;
	КомандаПечати.ФорматСохранения = ТипФайлаТабличногоДокумента.DOCX;
	
	// Расчетно-платежная ведомость (Т-49).
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Т49";
	КомандаПечати.Представление = НСтр("ru = 'Расчетно-платежная ведомость (Т-49)'");
	КомандаПечати.Порядок = 20;
	
	// Расчетно-платежная ведомость (Т-49) в Microsoft Word.
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Т49";
	КомандаПечати.Представление = НСтр("ru = 'Расчетно-платежная ведомость (Т-49) в Microsoft Word'");
	КомандаПечати.Порядок = 20;
	КомандаПечати.ФорматСохранения = ТипФайлаТабличногоДокумента.DOCX;
	
КонецПроцедуры

Процедура ВедомостьВКассуПечать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Т53") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Т53", НСтр("ru = 'Платежная ведомость (Т-53)'"), ПечатьТ53(МассивОбъектов, ОбъектыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Т49") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Т49", НСтр("ru = 'Расчетно-платежная ведомость (Т-49)'"), ПечатьТ49(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры

Функция ПечатьТ49(МассивОбъектов, ОбъектыПечати)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ПервыйДокумент = Истина;
	Для Каждого ДокументСсылка Из МассивОбъектов Цикл
		
		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			// Все документы нужно выводить на разных страницах.
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
		
		ДокументРезультат.Вывести(Отчеты.АнализНачисленийИУдержаний.ПечатьТ49(ДокументСсылка));
	
		// В табличном документе необходимо задать имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НомерСтрокиНачало, ОбъектыПечати, ДокументСсылка);
		
	КонецЦикла;
	
	Возврат ДокументРезультат;
	
КонецФункции

Функция ПечатьТ53(МассивОбъектов, ОбъектыПечати)
	
	Менеджер = Документы[МассивОбъектов[0].Метаданные().Имя];
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВедомостьНаВыплатуЗарплатыВКассу_Т53";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_Т53");
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	ВалютаУчета = ЗарплатаКадры.ВалютаУчетаЗаработнойПлаты();
	
	// получаем данные для печати
	ВыборкаШапок = Менеджер.ВыборкаДляПечатиШапки(МассивОбъектов);
	ВыборкаСтрок = Менеджер.ВыборкаДляПечатиТаблицы(МассивОбъектов);
	
	ПервыйДокумент = Истина;
	Пока ВыборкаШапок.Следующий() Цикл
		
		// Документы нужно выводить на разных страницах.
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Подсчитываем количество страниц документа - для корректного разбиения на страницы.
		ВсегоСтрокДокумента = ВыборкаСтрок.Количество();
		
		ОбластьМакетаШапкаДокумента = Макет.ПолучитьОбласть("ШапкаДокумента");
		ОбластьМакетаШапка			= Макет.ПолучитьОбласть("Шапка");
		ОбластьМакетаСтрока 		= Макет.ПолучитьОбласть("Строка");
		ОбластьМакетаИтогПоСтранице = Макет.ПолучитьОбласть("ИтогПоЛисту");
		ОбластьМакетаПодвал 		= Макет.ПолучитьОбласть("Подвал");
		
		// Массив с двумя строками - для разбиения на страницы.
		ВыводимыеОбласти = Новый Массив();
		ВыводимыеОбласти.Добавить(ОбластьМакетаСтрока);
		ВыводимыеОбласти.Добавить(ОбластьМакетаИтогПоСтранице);
		
		// выводим данные о документе
		ОбластьМакетаШапкаДокумента.Параметры.Заполнить(ВыборкаШапок);
		ОбластьМакетаШапкаДокумента.Параметры.НазваниеОрганизации	= СокрЛП(ОбластьМакетаШапкаДокумента.Параметры.НазваниеОрганизации);
		ОбластьМакетаШапкаДокумента.Параметры.НомерДок				= ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаШапок.НомерДок, Истина, Истина);
		ОбластьМакетаШапкаДокумента.Параметры.ОтчетныйПериодС		= НачалоМесяца(ВыборкаШапок.ПериодРегистрации);
		ОбластьМакетаШапкаДокумента.Параметры.ОтчетныйПериодПо		= ?(НЕ ЗначениеЗаполнено(ВыборкаШапок.ПериодРегистрации), ВыборкаШапок.ПериодРегистрации, КонецМесяца(ВыборкаШапок.ПериодРегистрации));
		
		Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений И ЗначениеЗаполнено(ОбластьМакетаШапкаДокумента.Параметры.Подразделение) Тогда
			ОбластьМакетаШапкаДокумента.Параметры.Подразделение = ОбластьМакетаШапкаДокумента.Параметры.Подразделение.ПолноеНаименование();
		КонецЕсли;
		
		Если ВыборкаШапок.СуммаПоДокументу <> 0 Тогда
			ОбластьМакетаШапкаДокумента.Параметры.СуммаДок = РаботаСКурсамиВалют.СформироватьСуммуПрописью(ВыборкаШапок.СуммаПоДокументу, ВалютаУчета);
			ОбластьМакетаШапкаДокумента.Параметры.СуммаДокРублей = Цел(ВыборкаШапок.СуммаПоДокументу);
			ОбластьМакетаШапкаДокумента.Параметры.СуммаДокКопеек = (ВыборкаШапок.СуммаПоДокументу - Цел(ВыборкаШапок.СуммаПоДокументу)) * 100
		КонецЕсли;
		
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаШапок); // Подвал документа.
		// Строка не локализуется т.к. является частью регламентированной формы, применяемой в РФ.
		ОбластьМакетаПодвал.Параметры.РКО = "Расходный кассовый ордер № _______ от  ""___"" ___________ 20 ___ г.";
		
		ТабличныйДокумент.Вывести(ОбластьМакетаШапкаДокумента);
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		ТабличныйДокумент.Вывести(ОбластьМакетаШапка);
		
		ВыведеноСтраниц = 1; ВыведеноСтрок = 0; ИтогоНаСтранице = 0; Итого = 0;
		
		// Выводим данные по строкам документа.
		НомерСтроки = 0;
		ВыборкаСтрок.Сбросить();
		Пока ВыборкаСтрок.НайтиСледующий(ВыборкаШапок.Ссылка, "Ведомость") Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			ОбластьМакетаСтрока.Параметры.Заполнить(ВыборкаСтрок);
			ОбластьМакетаСтрока.Параметры.НомерСтроки = НомерСтроки;
			ОбластьМакетаСтрока.Параметры.ТабельныйНомер = 
				ПрефиксацияОбъектовКлиентСервер.УдалитьПрефиксыИзНомераОбъекта(ВыборкаСтрок.ТабельныйНомер, Истина, Истина);
				
			Если НастройкиПечатныхФорм.ВыводитьПолныеФИОВСписочныхПечатныхФормах Тогда
					
				ОбластьМакетаСтрока.Параметры.Физлицо = СокрЛП(ВыборкаСтрок.Фамилия)
					+ ?(ПустаяСтрока(ВыборкаСтрок.Имя), "", " " + ВыборкаСтрок.Имя)
					+ ?(ПустаяСтрока(ВыборкаСтрок.Отчество), "", " " + ВыборкаСтрок.Отчество);
					
			Иначе
				ОбластьМакетаСтрока.Параметры.Физлицо = ФизическиеЛицаКлиентСервер.ФамилияИнициалыФизЛица(Неопределено,
					ВыборкаСтрок.Фамилия, ВыборкаСтрок.Имя, ВыборкаСтрок.Отчество);
			КонецЕсли;
			
			// разбиение на страницы
			ВыведеноСтрок = ВыведеноСтрок + 1;
			
			// Проверим, уместится ли строка на странице или надо открывать новую страницу.
			ВывестиПодвалЛиста = Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, ВыводимыеОбласти);
			Если Не ВывестиПодвалЛиста И ВыведеноСтрок = ВсегоСтрокДокумента Тогда
				ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
				ВывестиПодвалЛиста = Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, ВыводимыеОбласти);
			КонецЕсли;
			Если ВывестиПодвалЛиста Тогда
				
				ОбластьМакетаИтогПоСтранице.Параметры.ИтогоНаСтранице = ИтогоНаСтранице;
				ТабличныйДокумент.Вывести(ОбластьМакетаИтогПоСтранице);
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ОбластьМакетаШапка);
				ВыведеноСтраниц = ВыведеноСтраниц + 1;
				ИтогоНаСтранице = 0;
				
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьМакетаСтрока);
			ИтогоНаСтранице = ИтогоНаСтранице + ВыборкаСтрок.Сумма;
			Итого = Итого + ВыборкаСтрок.Сумма;
			
		КонецЦикла; // по строкам документа
		
		Если ВыведеноСтрок > 0 Тогда 
			ОбластьМакетаИтогПоСтранице.Параметры.ИтогоНаСтранице = ИтогоНаСтранице;
		КонецЕсли;
		ОбластьМакетаПодвал.Параметры.КоличествоЛистов = ?(ВыведеноСтрок = 0,"",ВыведеноСтраниц + 1);
		
		ВыводимыеОбласти = Новый Массив();
		ВыводимыеОбласти.Добавить(ОбластьМакетаСтрока);
		ВыводимыеОбласти.Добавить(ОбластьМакетаИтогПоСтранице);
		ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
		Для Сч = 1 По ОбластьМакетаСтрока.Параметры.Количество() Цикл
			ОбластьМакетаСтрока.Параметры.Установить(Сч - 1,""); 
		КонецЦикла;
		ОбластьМакетаСтрока.Параметры.Физлицо = " ";
		Пока ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, ВыводимыеОбласти) Цикл
			ТабличныйДокумент.Вывести(ОбластьМакетаСтрока);
		КонецЦикла;
		ТабличныйДокумент.Вывести(ОбластьМакетаИтогПоСтранице);
		ТабличныйДокумент.Вывести(ОбластьМакетаПодвал);
		
		// В табличном документе необходимо задать имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаШапок.Ссылка);
		
	КонецЦикла; // по документам
		
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ВедомостьВКассуВыборкаДляПечатиТаблицы(ИмяТипа, Ведомости) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ведомости", Ведомости);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВедомостьЗарплата.Ссылка КАК Ссылка,
	|	ВедомостьЗарплата.Ссылка.Дата КАК Период,
	|	МИНИМУМ(ВедомостьСостав.НомерСтроки) КАК НомерСтроки,
	|	ВедомостьЗарплата.Сотрудник КАК Сотрудник,
	|	СУММА(ВедомостьЗарплата.КВыплате + ВедомостьЗарплата.КомпенсацияЗаЗадержкуЗарплаты) КАК Сумма
	|ПОМЕСТИТЬ ВТДанныеДокументов
	|ИЗ
	|	#ВедомостьЗарплата КАК ВедомостьЗарплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ #ВедомостьСостав КАК ВедомостьСостав
	|		ПО (ВедомостьСостав.ИдентификаторСтроки = ВедомостьЗарплата.ИдентификаторСтроки)
	|ГДЕ
	|	ВедомостьЗарплата.Ссылка В(&Ведомости)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВедомостьЗарплата.Ссылка,
	|	ВедомостьЗарплата.Ссылка.Дата,
	|	ВедомостьЗарплата.Сотрудник
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВедомостьЗарплата.КВыплате + ВедомостьЗарплата.КомпенсацияЗаЗадержкуЗарплаты) > 0";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВедомостьЗарплата",	ИмяТипа + ".Зарплата");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВедомостьСостав",	ИмяТипа + ".Состав");
	
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = 
		КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
    		Запрос.МенеджерВременныхТаблиц,
    		"ВТДанныеДокументов");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "ТабельныйНомер, Фамилия, Имя, Отчество");
	
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокументов.Ссылка КАК Ведомость,
	|	КадровыеДанныеСотрудников.ТабельныйНомер КАК ТабельныйНомер,
	|	КадровыеДанныеСотрудников.Фамилия,
	|	КадровыеДанныеСотрудников.Имя,
	|	КадровыеДанныеСотрудников.Отчество,
	|	ДанныеДокументов.Сумма КАК Сумма
	|ИЗ
	|	ВТДанныеДокументов КАК ДанныеДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ПО ДанныеДокументов.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
	|			И ДанныеДокументов.Период = КадровыеДанныеСотрудников.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокументов.Ссылка,
	|	ДанныеДокументов.НомерСтроки";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции	
	
#КонецОбласти

#Область СпособыВыплатыЗарплаты

Процедура СпособыВыплатыЗарплатыОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
КонецПроцедуры

#КонецОбласти

#КонецОбласти
