///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ОБНОВЛЕНИЯ 2.0 - 3.0

Функция ПараметрыПереходаСРедакции20() Экспорт
	
	Параметры = Константы.ПараметрыПереходаСРедакции20.Получить().Получить();
	
	Если ТипЗнч(Параметры) <> Тип("Структура") Тогда
		Параметры = Новый Структура();
	КонецЕсли;
	
	Если НЕ Параметры.Свойство("ЗапуститьПомощникПереходаСРедакции20") Тогда
		Параметры.Вставить("ЗапуститьПомощникПереходаСРедакции20", Ложь);
	КонецЕсли;
	
	Если НЕ Параметры.Свойство("ВыполнитьЗаполнениеПоследовательностей") Тогда
		Параметры.Вставить("ВыполнитьЗаполнениеПоследовательностей", Ложь);
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

Процедура УстановитьПараметрыПереходаСРедакции20(Параметры) Экспорт
	
	Константы.ПараметрыПереходаСРедакции20.Установить(Новый ХранилищеЗначения(Параметры));
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Блок обработки неконсистентных данных

// Процедура обрабатывает "потерянные" объекты конфигурации, которые препятствуют переходу с 2.0
//
Процедура ОбработатьПотерянныеОбъекты() Экспорт
	
	// Обработчики должны выполняться только если произошел переход с 2.0
	// и ИБ запускается первый раз после обновления конфигурации
	// и только если в ИБ нет разделения
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Константы.УдалитьНомерВерсииКонфигурации.Получить())
		И ОбновлениеИнформационнойБазы.ВерсияИБ(Метаданные.Имя)="0.0.0.0" Тогда
		
		// Обработка справочника ПодразделенияОрганизаций - 
		// обрабатываются элементы с пустым Владельцем
		ОбработатьПотерянныеПодразделения();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьПотерянныеПодразделения()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Ссылка
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	(ПодразделенияОрганизаций.Владелец ЕСТЬ NULL 
	|			ИЛИ ПодразделенияОрганизаций.Владелец = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))";
	
	Выборка = запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекущийОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если ТекущийОбъект.РайонныйКоэффициент = 0 Тогда
			ТекущийОбъект.РайонныйКоэффициент = 1;
		КонецЕсли;
		ТекущийОбъект.ПометкаУдаления = Истина;
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ТекущийОбъект);			
		Исключение
			ТекстСообщения = НСтр("ru='Операция не выполнена'");
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
		
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Блок обработчиков перехода с 2.0

Функция ЭтоПереходСРедакции20() Экспорт
	
	Если НЕ ПервыйЗапускИнформационнойБазы() 
		ИЛИ ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Константы.УдалитьНомерВерсииКонфигурации.Получить())
		И ОбновлениеИнформационнойБазы.ВерсияИБ(Метаданные.Имя)="0.0.0.0" Тогда
		
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура ОчиститьВерисиюПодсистемыБСППриПереходеС2БП() Экспорт
	
	Если ЭтоПереходСРедакции20() Тогда
		
		ВерсииПодсистем = РегистрыСведений.ВерсииПодсистем.СоздатьМенеджерЗаписи();
		ВерсииПодсистем.ИмяПодсистемы = "СтандартныеПодсистемы";
		ВерсииПодсистем.Активность = Истина;
		ВерсииПодсистем.Версия = "1.0.0.0";
		ВерсииПодсистем.Записать(Истина);
		ВерсииПодсистем = РегистрыСведений.УдалитьВерсииПодсистем.СоздатьМенеджерЗаписи();
		ВерсииПодсистем.ИмяПодсистемы = "СтандартныеПодсистемы";
		ВерсииПодсистем.Удалить();
		
		ВерсииПодсистем = РегистрыСведений.ВерсииПодсистем.СоздатьМенеджерЗаписи();
		ВерсииПодсистем.ИмяПодсистемы = Метаданные.Имя;
		ВерсииПодсистем.ЭтоОсновнаяКонфигурация = Истина;
		ВерсииПодсистем.Активность = Истина;
		ВерсииПодсистем.Версия = "0.0.0.0";
		ВерсииПодсистем.Записать(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПраваПервогоАдминистратора() Экспорт
	
	Если НЕ ПервыйЗапускИнформационнойБазы() Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Константы.УдалитьНомерВерсииКонфигурации.Получить())
		И ОбновлениеИнформационнойБазы.ВерсияИБ(Метаданные.Имя)="0.0.0.0" Тогда
		
		
		НужноСоздаватьАдминистратора = Истина;
		
		ТекущийПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
		ТекущийПользователь = Неопределено;
		Если ПользователиСлужебный.ПользовательПоИдентификаторуСуществует(ТекущийПользовательИБ.УникальныйИдентификатор, ,ТекущийПользователь) 
			И ЗначениеЗаполнено(ТекущийПользователь) Тогда
			
			Если УправлениеДоступом.ЕстьРоль(Справочники.ПрофилиГруппДоступа.Администратор, ,ТекущийПользователь) = Истина Тогда
				НужноСоздаватьАдминистратора = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НужноСоздаватьАдминистратора Тогда
			Пользователи.СоздатьАдминистратора(ТекущийПользовательИБ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВестиУчетПоПодразделениям() Экспорт
	
	Если ЭтоПереходСРедакции20() Тогда
		
		ОбновлениеИнформационнойБазыБП.УстановитьВестиУчетПоПодразделениям();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьНовыеПодсистемы() Экспорт
	
	// После обновления с редакции 2.0 все подсистемы БСП будут считаться новыми, т.к. в старой редакции не было ИОМ.
	// Поэтому будут срабатывать только обработчики первоначального заполнения, а в данном случае это не верно.
	Если ОбновлениеСПредыдущейРедакции.ЭтоПереходСРедакции20() Тогда 
		СведенияОбОбновлении = ОбновлениеИнформационнойБазыСлужебный.СведенияОбОбновленииИнформационнойБазы();
		СведенияОбОбновлении.НовыеПодсистемы.Очистить();
		ОбновлениеИнформационнойБазыСлужебный.ЗаписатьСведенияОбОбновленииИнформационнойБазы(СведенияОбОбновлении);
	КонецЕсли;
	
КонецПроцедуры

// Функция выполняет перенос(конвертацию) контактной информации, дополнительных сведений
// и паспортных данных физических лиц при обновлении конфигурации с редакции 2.0 на
// редакцию 3.0 со встроенной БСП
//
Процедура ПереносКИиДопСвойствПриОбновленииС20() Экспорт
	
	Если НЕ ЗначениеЗаполнено(Константы.УдалитьНомерВерсииКонфигурации.Получить()) Тогда 
		Возврат;
	КонецЕсли;
	
	ПереносКИПриОбновленииС20();
	ПереносДопСвойствПриОбновленииС20();

КонецПроцедуры

Процедура ПереносОсновнойОрганизацииПриОбновленииС20() Экспорт
	
	Если НЕ ЗначениеЗаполнено(Константы.УдалитьНомерВерсииКонфигурации.Получить()) Тогда 
		Возврат;
	КонецЕсли;
	
	НастройкаОсновнойОрганизации = ПланыВидовХарактеристик.УдалитьНастройкиПользователей["ОсновнаяОрганизация"];
	НастройкаОсновногоПодразделения = ПланыВидовХарактеристик.УдалитьНастройкиПользователей["ОсновноеПодразделениеОрганизации"];
	НастройкаОсновногоСклада = ПланыВидовХарактеристик.УдалитьНастройкиПользователей["ОсновнойСклад"];
	НастройкаВидимостиСчетовУчета = ПланыВидовХарактеристик.УдалитьНастройкиПользователей["ПоказыватьВДокументахСчетаУчета"];
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НастройкаОсновнойОрганизации" ,НастройкаОсновнойОрганизации);
	Запрос.УстановитьПараметр("НастройкаОсновногоПодразделения" ,НастройкаОсновногоПодразделения);
	Запрос.УстановитьПараметр("НастройкаОсновногоСклада" ,НастройкаОсновногоСклада);
	Запрос.УстановитьПараметр("НастройкаВидимостиСчетовУчета" ,НастройкаВидимостиСчетовУчета);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(НастройкиБП20.ОсновнаяОрганизация) КАК ОсновнаяОрганизация,
	|	МАКСИМУМ(НастройкиБП20.ОсновноеПодразделение) КАК ОсновноеПодразделение,
	|	МАКСИМУМ(НастройкиБП20.ОсновнойСклад) КАК ОсновнойСклад,
	|	МАКСИМУМ(НастройкиБП20.ВидимостьСчетовУчета) КАК ПоказыватьСчетаУчетаВДокументах,
	|	НастройкиБП20.Пользователь
	|ИЗ
	|	(ВЫБРАТЬ
	|		РегистрЗначениеПрав.Значение КАК ОсновнаяОрганизация,
	|		NULL КАК ОсновноеПодразделение,
	|		NULL КАК ОсновнойСклад,
	|		NULL КАК ВидимостьСчетовУчета,
	|		РегистрЗначениеПрав.Пользователь КАК Пользователь
	|	ИЗ
	|		РегистрСведений.УдалитьНастройкиПользователей КАК РегистрЗначениеПрав
	|	ГДЕ
	|		РегистрЗначениеПрав.Настройка = &НастройкаОсновнойОрганизации
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		NULL,
	|		РегистрЗначениеПрав.Значение,
	|		NULL,
	|		NULL,
	|		РегистрЗначениеПрав.Пользователь
	|	ИЗ
	|		РегистрСведений.УдалитьНастройкиПользователей КАК РегистрЗначениеПрав
	|	ГДЕ
	|		РегистрЗначениеПрав.Настройка = &НастройкаОсновногоПодразделения
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		NULL,
	|		NULL,
	|		РегистрЗначениеПрав.Значение,
	|		NULL,
	|		РегистрЗначениеПрав.Пользователь
	|	ИЗ
	|		РегистрСведений.УдалитьНастройкиПользователей КАК РегистрЗначениеПрав
	|	ГДЕ
	|		РегистрЗначениеПрав.Настройка = &НастройкаОсновногоСклада
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		NULL,
	|		NULL,
	|		NULL,
	|		РегистрЗначениеПрав.Значение,
	|		РегистрЗначениеПрав.Пользователь
	|	ИЗ
	|		РегистрСведений.УдалитьНастройкиПользователей КАК РегистрЗначениеПрав
	|	ГДЕ
	|		РегистрЗначениеПрав.Настройка = &НастройкаВидимостиСчетовУчета) КАК НастройкиБП20
	|
	|СГРУППИРОВАТЬ ПО
	|	НастройкиБП20.Пользователь";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.Пользователь) Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Выборка.Пользователь.ИдентификаторПользователяИБ);
			ИмяПользователяИБ = ПользовательИБ.Имя;
		Исключение
			Продолжить;
		КонецПопытки;
		
		ТекущаяНастройкаОрганизации = ОбщегоНазначенияБПВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация", ИмяПользователяИБ);
		ТекущаяНастройкаОсновногоПодразделения = ОбщегоНазначенияБПВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации", ИмяПользователяИБ);
		ТекущаяНастройкаОсновногоСклада = ОбщегоНазначенияБПВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнойСклад", ИмяПользователяИБ);
		
		ТекущаяНастройкаОрганизации = ?(НЕ ЗначениеЗаполнено(ТекущаяНастройкаОрганизации), Выборка.ОсновнаяОрганизация, ТекущаяНастройкаОрганизации);
		ТекущаяНастройкаОсновногоПодразделения = ?(НЕ ЗначениеЗаполнено(ТекущаяНастройкаОсновногоПодразделения), Выборка.ОсновноеПодразделение, ТекущаяНастройкаОсновногоПодразделения);
		ТекущаяНастройкаОсновногоСклада = ?(НЕ ЗначениеЗаполнено(ТекущаяНастройкаОсновногоСклада), Выборка.ОсновнойСклад, ТекущаяНастройкаОсновногоСклада);
		
		Если ЗначениеЗаполнено(ТекущаяНастройкаОрганизации) Тогда
			ХранилищеОбщихНастроек.Сохранить(ВРег("ОсновнаяОрганизация"),, ТекущаяНастройкаОрганизации,, ИмяПользователяИБ);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущаяНастройкаОсновногоПодразделения) Тогда
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяНастройкаОсновногоПодразделения, "Владелец") <> ТекущаяНастройкаОрганизации Тогда
				ХранилищеОбщихНастроек.Сохранить(ВРег("ОсновноеПодразделениеОрганизации"),,
					БухгалтерскийУчетПереопределяемый.ПустоеПодразделение(),, ИмяПользователяИБ);
			Иначе
				ХранилищеОбщихНастроек.Сохранить(ВРег("ОсновноеПодразделениеОрганизации"),,
					ТекущаяНастройкаОсновногоПодразделения,, ИмяПользователяИБ);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущаяНастройкаОсновногоСклада) Тогда
			ХранилищеОбщихНастроек.Сохранить(ВРег("ОсновнойСклад"),, ТекущаяНастройкаОсновногоСклада,, ИмяПользователяИБ);
		КонецЕсли;
		
		Если Выборка.ПоказыватьСчетаУчетаВДокументах <> NULL Тогда
			ОбщегоНазначенияБПВызовСервера.УстановитьЗначениеПоУмолчанию("ПоказыватьСчетаУчетаВДокументах", Выборка.ПоказыватьСчетаУчетаВДокументах, ИмяПользователяИБ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПереносКИПриОбновленииС20()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УдалитьКонтактнаяИнформация.Вид,
	|	УдалитьКонтактнаяИнформация.Вид.Наименование
	|ИЗ
	|	РегистрСведений.УдалитьКонтактнаяИнформация КАК УдалитьКонтактнаяИнформация
	|ГДЕ
	|	(НЕ УдалитьКонтактнаяИнформация.Вид.Предопределенный)
	|	И УдалитьКонтактнаяИнформация.Вид.ВидОбъектаКонтактнойИнформации = ЗНАЧЕНИЕ(Перечисление.УдалитьВидыОбъектовКонтактнойИнформации.Контрагенты)";
	ТаблицаУдалитьВидыКонтактнойИнформации = Запрос.Выполнить().Выгрузить();
	
	СоответствиеВидовКИ = Новый Соответствие;
	
	// Справочник "КонтактныеЛица"
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ИнформАдресКонтактногоЛица     , Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияКонтактныеЛица);
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ДругаяИнформацияКонтактногоЛица, Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтактныеЛица);
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ТелефонКонтактногоЛица         , Справочники.ВидыКонтактнойИнформации.ТелефонРабочийКонтактныеЛица);
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ТелефонМобильный               , Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйКонтактныеЛица);	
	
	// Справочник "Контрагенты"
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ЮрАдресКонтрагента         , Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ФактАдресКонтрагента       , Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ТелефонКонтрагента         , Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ДругаяИнформацияКонтрагента, Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагенты);
	
	НайденнаяСтрока = ТаблицаУдалитьВидыКонтактнойИнформации.Найти("Почтовый адрес", "ВидНаименование"); 
	Если НайденнаяСтрока <> Неопределено Тогда 
		СоответствиеВидовКИ.Вставить(НайденнаяСтрока.Вид, Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента);
	КонецЕсли;
	
	НайденнаяСтрока = ТаблицаУдалитьВидыКонтактнойИнформации.Найти("Факс", "ВидНаименование"); 
	Если НайденнаяСтрока <> Неопределено Тогда 
		СоответствиеВидовКИ.Вставить(НайденнаяСтрока.Вид, Справочники.ВидыКонтактнойИнформации.ФаксКонтрагенты);
	КонецЕсли;
	
	// Справочник "Организации"
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.EmailОрганизации            , Справочники.ВидыКонтактнойИнформации.EmailОрганизации);
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ДругаяИнформацияОрганизации , Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации);
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ТелефонОрганизации          , Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ТелефонПоЮрАдресуОрганизации, Справочники.ВидыКонтактнойИнформации.ТелефонПоЮридическомуАдресуОрганизации);
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.АдресИнострОрганизацииУчред , Справочники.ВидыКонтактнойИнформации.УчредительныйАдресИностраннойОрганизации);
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ФаксОрганизации             , Справочники.ВидыКонтактнойИнформации.ФаксОрганизации);
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ФактАдресОрганизации        , Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ЮрАдресОрганизации          , Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.АдресОрганизацииПочтовый    , Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации);
		
	// Справочник "ПодразделенияОрганизации"
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ФактАдресПодразделенияОрганизации       , Справочники.ВидыКонтактнойИнформации.ФаксПодразделенияОрганизаций);
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ТелефонПодразделенияОрганизации         , Справочники.ВидыКонтактнойИнформации.ТелефонПодразделенияОрганизаций);
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ФаксПодразделенияОрганизации            , Справочники.ВидыКонтактнойИнформации.ФаксПодразделенияОрганизаций);
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.EmailПодразделенияОрганизации           , Справочники.ВидыКонтактнойИнформации.EmailПодразделенияОрганизаций);
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ДругаяИнформацияПодразделенияОрганизации, Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияПодразделенияОрганизаций);
	
	// Справочник "ФизическиеЛица"
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ИнформАдресФизЛица     , Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица);
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ИнострАдресФизЛица     , Справочники.ВидыКонтактнойИнформации.АдресЗаПределамиРФФизическиеЛица);
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ФактАдресФизЛица       , Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица);
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ЮрАдресФизЛица         , Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица);
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ТелефонФизЛица         , Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица);
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ТелефонСлужебныйФизЛица, Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица);
	
	// Справочник "Пользователи"
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.СлужебныйАдресЭлектроннойПочтыПользователя, Справочники.ВидыКонтактнойИнформации.EmailПользователя);
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ДругаяИнформацияПользователя              , Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияПользователя);
	
	СоответствиеГруппВидовКИ = Новый Соответствие;
	СоответствиеГруппВидовКИ.Вставить(Тип("СправочникСсылка.КонтактныеЛица")          , Справочники.ВидыКонтактнойИнформации.СправочникКонтактныеЛица);
	СоответствиеГруппВидовКИ.Вставить(Тип("СправочникСсылка.Контрагенты")             , Справочники.ВидыКонтактнойИнформации.СправочникКонтрагенты);
	СоответствиеГруппВидовКИ.Вставить(Тип("СправочникСсылка.Организации")             , Справочники.ВидыКонтактнойИнформации.СправочникОрганизации);
	СоответствиеГруппВидовКИ.Вставить(БухгалтерскийУчетКлиентСерверПереопределяемый.ТипПодразделения(), Справочники.ВидыКонтактнойИнформации.СправочникПодразделенияОрганизаций);
	СоответствиеГруппВидовКИ.Вставить(Тип("СправочникСсылка.Пользователи")            , Справочники.ВидыКонтактнойИнформации.СправочникПользователи);
	СоответствиеГруппВидовКИ.Вставить(Тип("СправочникСсылка.ФизическиеЛица")          , Справочники.ВидыКонтактнойИнформации.СправочникФизическиеЛица);
	
	// Перенос контактной информации из РС в табличные части справочников
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОрганизацииКонтактнаяИнформация.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ОбъектыСКИ
	|ИЗ
	|	Справочник.Организации.КонтактнаяИнформация КАК ОрганизацииКонтактнаяИнформация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПодразделенияОрганизацийКонтактнаяИнформация.Ссылка
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций.КонтактнаяИнформация КАК ПодразделенияОрганизацийКонтактнаяИнформация
	|ГДЕ
	|	НЕ ПодразделенияОрганизацийКонтактнаяИнформация.Ссылка.Владелец ЕСТЬ NULL 
	|	И ПодразделенияОрганизацийКонтактнаяИнформация.Ссылка.Владелец <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОсновныеСредстваКонтактнаяИнформация.Ссылка
	|ИЗ
	|	Справочник.ОсновныеСредства.КонтактнаяИнформация КАК ОсновныеСредстваКонтактнаяИнформация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПользователиКонтактнаяИнформация.Ссылка
	|ИЗ
	|	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФизическиеЛицаКонтактнаяИнформация.Ссылка
	|ИЗ
	|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КонтрагентыКонтактнаяИнформация.Ссылка
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КонтактныеЛицаКонтактнаяИнформация.Ссылка
	|ИЗ
	|	Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактныеЛицаКонтактнаяИнформация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдалитьКонтактнаяИнформация.Объект КАК Объект,
	|	УдалитьКонтактнаяИнформация.Тип,
	|	УдалитьКонтактнаяИнформация.Вид,
	|	УдалитьКонтактнаяИнформация.Вид.Наименование КАК ВидНаименование,
	|	УдалитьКонтактнаяИнформация.Вид.Тип КАК ВидТип,
	|	УдалитьКонтактнаяИнформация.Вид.Порядок КАК ВидПорядок,
	|	УдалитьКонтактнаяИнформация.Вид.МожноРедактироватьТолькоВДиалоге КАК ВидМожноРедактироватьТолькоВДиалоге,
	|	УдалитьКонтактнаяИнформация.Представление,
	|	УдалитьКонтактнаяИнформация.Поле1,
	|	УдалитьКонтактнаяИнформация.Поле2,
	|	УдалитьКонтактнаяИнформация.Поле3,
	|	УдалитьКонтактнаяИнформация.Поле4,
	|	УдалитьКонтактнаяИнформация.Поле5,
	|	УдалитьКонтактнаяИнформация.Поле6,
	|	УдалитьКонтактнаяИнформация.Поле7,
	|	УдалитьКонтактнаяИнформация.Поле8,
	|	УдалитьКонтактнаяИнформация.Поле9,
	|	УдалитьКонтактнаяИнформация.Поле10
	|ИЗ
	|	РегистрСведений.УдалитьКонтактнаяИнформация КАК УдалитьКонтактнаяИнформация
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОбъектыСКИ КАК ОбъектыСКИ
	|		ПО УдалитьКонтактнаяИнформация.Объект = ОбъектыСКИ.Ссылка
	|ГДЕ
	|	НЕ УдалитьКонтактнаяИнформация.Объект.Ссылка ЕСТЬ NULL 
	|	И ОбъектыСКИ.Ссылка ЕСТЬ NULL 
	|ИТОГИ ПО
	|	Объект";
	
	ВыборкаОбъект = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОбъект.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(ВыборкаОбъект.Объект) Тогда
			Продолжить;
		КонецЕсли;
		
		Выборка = ВыборкаОбъект.Выбрать();
		
		ОбъектВладелец = ВыборкаОбъект.Объект.ПолучитьОбъект();
		Если Метаданные.Справочники.Содержит(ОбъектВладелец.Метаданные())
			И ОбъектВладелец.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		Пока Выборка.Следующий() Цикл
			Если СоответствиеВидовКИ[Выборка.Вид] = Неопределено Тогда 
				НайденныйВидКИ = Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию(Выборка.ВидНаименование, Истина, СоответствиеГруппВидовКИ[ТипЗнч(Выборка.Объект)]);
				Если Не ЗначениеЗаполнено(НайденныйВидКИ) Тогда
					СправочникВидыКИ = Справочники.ВидыКонтактнойИнформации.СоздатьЭлемент();
					СправочникВидыКИ.Наименование                      = СокрЛП(Выборка.ВидНаименование);
					СправочникВидыКИ.Родитель                          = СоответствиеГруппВидовКИ[ТипЗнч(Выборка.Объект)];
					СправочникВидыКИ.Тип                               = Выборка.ВидТип;
					СправочникВидыКИ.РеквизитДопУпорядочивания         = Выборка.ВидПорядок;
					СправочникВидыКИ.РедактированиеТолькоВДиалоге      = Выборка.ВидМожноРедактироватьТолькоВДиалоге;
					СправочникВидыКИ.МожноИзменятьСпособРедактирования = Ложь;
					СправочникВидыКИ.АдресТолькоРоссийский             = Ложь;
					
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникВидыКИ);
					
					Если НЕ ЗначениеЗаполнено(СправочникВидыКИ.Тип) Тогда
						
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'У вида контактной информации ""%1"" для ""%2"" не заполнен тип. Необходимо установить нужный тип.'"), 
							СправочникВидыКИ.Ссылка, СправочникВидыКИ.Родитель);
							
						ЗаписьЖурналаРегистрации(
							ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
							УровеньЖурналаРегистрации.Ошибка,
							Метаданные.Справочники.ВидыКонтактнойИнформации, 
							СправочникВидыКИ.Ссылка,
							ТекстСообщения);
							
					КонецЕсли;
					
					СоответствиеВидовКИ.Вставить(Выборка.Вид, СправочникВидыКИ.Ссылка);
				Иначе
					СоответствиеВидовКИ.Вставить(Выборка.Вид, НайденныйВидКИ);
				КонецЕсли;
			КонецЕсли;
			НоваяСтрока = ОбъектВладелец.КонтактнаяИнформация.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Вид = СоответствиеВидовКИ[Выборка.Вид];
			НоваяСтрока.Тип = Выборка.Тип;
			
			Если Выборка.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
				НоваяСтрока.ЗначенияПолей = "Индекс=" + Выборка.Поле1 + Символы.ПС
				   + "Регион="           + Выборка.Поле2 + Символы.ПС
				   + "Район="            + Выборка.Поле3 + Символы.ПС
				   + "Город="            + Выборка.Поле4 + Символы.ПС
				   + "НаселенныйПункт="  + Выборка.Поле5 + Символы.ПС
				   + "Улица="            + Выборка.Поле6 + Символы.ПС
				   + "Дом="              + Выборка.Поле7 + Символы.ПС
				   + "Корпус="           + Выборка.Поле8 + Символы.ПС
				   + "Квартира="         + Выборка.Поле9 + Символы.ПС
				   + "ТипДома=дом"       + Символы.ПС
				   + "ТипКорпуса=корпус" + Символы.ПС
				   + "ТипКвартиры=кв.";
			ИначеЕсли Выборка.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
				НоваяСтрока.ЗначенияПолей = "КодСтраны=" + Выборка.Поле1 + Символы.ПС
				   + "КодГорода="     + Выборка.Поле2 + Символы.ПС
				   + "НомерТелефона=" + Выборка.Поле3 + Символы.ПС
				   + "Добавочный="    + Выборка.Поле4;
				
				НоваяСтрока.НомерТелефонаБезКодов = Выборка.Поле3;
				НоваяСтрока.НомерТелефона         = Выборка.Поле1 + Выборка.Поле2 + Выборка.Поле3;
			ИначеЕсли Выборка.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
				НоваяСтрока.АдресЭП = Выборка.Представление;
			КонецЕсли;
			
			// Удаление символов переноса строк.
			НоваяСтрока.Представление = СтрЗаменить(НоваяСтрока.Представление, Символы.ПС," ");
			
		КонецЦикла;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбъектВладелец);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПереносДопСвойствПриОбновленииС20()
	
	// Перенос дополнительных сведений
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СвойстваОбъектов.Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК СвойстваОбъектов";
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		// дополнительные реквизиты и сведения уже существуют
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НаборыДополнительныхРеквизитовИСведений.ИмяПредопределенныхДанных,
	|	НаборыДополнительныхРеквизитовИСведений.Ссылка
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений КАК НаборыДополнительныхРеквизитовИСведений
	|ГДЕ
	|	НаборыДополнительныхРеквизитовИСведений.Предопределенный = ИСТИНА";
	
	НаборыДополнительныхРеквизитовИСведений = Запрос.Выполнить().Выгрузить();
	НаборыДополнительныхРеквизитовИСведений.Индексы.Добавить("ИмяПредопределенныхДанных");
	
	СоответствиеТипов = Новый Соответствие;
	СоответствиеТипов.Вставить(Тип("Число") , "Число");
	СоответствиеТипов.Вставить(Тип("Строка"), "Строка");
	СоответствиеТипов.Вставить(Тип("Булево"), "Булево");
	СоответствиеТипов.Вставить(Тип("Дата")  , "Дата");
	СоответствиеТипов.Вставить(Тип("СправочникСсылка.УдалитьЗначенияСвойствОбъектов"), "СправочникСсылка.ЗначенияСвойствОбъектов");
	СоответствиеТипов.Вставить(Тип("СправочникСсылка.ФизическиеЛица")                , "СправочникСсылка.ФизическиеЛица");
	СоответствиеТипов.Вставить(Тип("СправочникСсылка.Склады")                        , "СправочникСсылка.Склады");
	СоответствиеТипов.Вставить(Тип("СправочникСсылка.Пользователи")                  , "СправочникСсылка.Пользователи");
	СоответствиеТипов.Вставить(Тип("СправочникСсылка.Организации")                   , "СправочникСсылка.Организации");
	СоответствиеТипов.Вставить(Тип("СправочникСсылка.НоменклатурныеГруппы")          , "СправочникСсылка.НоменклатурныеГруппы");
	СоответствиеТипов.Вставить(Тип("СправочникСсылка.Номенклатура")                  , "СправочникСсылка.Номенклатура");
	СоответствиеТипов.Вставить(Тип("СправочникСсылка.Контрагенты")                   , "СправочникСсылка.Контрагенты");
	СоответствиеТипов.Вставить(Тип("СправочникСсылка.КонтактныеЛица")                , "СправочникСсылка.КонтактныеЛица");
	СоответствиеТипов.Вставить(Тип("СправочникСсылка.СтраныМира")                    , "СправочникСсылка.СтраныМира");
	СоответствиеТипов.Вставить(Тип("СправочникСсылка.КлассификаторЕдиницИзмерения")  , "СправочникСсылка.КлассификаторЕдиницИзмерения");
	СоответствиеТипов.Вставить(Тип("СправочникСсылка.Валюты")                        , "СправочникСсылка.Валюты");
	
	// Перенос дополнительных сведений
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СвойстваОбъектов.Ссылка,
	|	СвойстваОбъектов.ТипЗначения,
	|	СвойстваОбъектов.Наименование,
	|	СвойстваОбъектов.НазначениеСвойства
	|ИЗ
	|	ПланВидовХарактеристик.УдалитьСвойстваОбъектов КАК СвойстваОбъектов";
	
	СоответствиеОбъектов = Новый Соответствие();
	СоответствиеЗначенийСвойствОбъектов = Новый Соответствие();
	
	НачатьТранзакцию();
	
	Попытка
	
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			// Создание нового дополнительного свойства
			МассивНаименованийТипов = Новый Массив;
			Для Каждого КлючИЗначение ИЗ СоответствиеТипов Цикл
				Если Выборка.ТипЗначения.СодержитТип(КлючИЗначение.Ключ) Тогда
					МассивНаименованийТипов.Добавить(КлючИЗначение.Значение);
				КонецЕсли;
			КонецЦикла;
			
			ОбъектПВХ = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
			МассивТипов = Новый Массив;
			Для Каждого НаименованиеТипа Из МассивНаименованийТипов Цикл
				МассивТипов.Добавить(Тип(НаименованиеТипа));
			КонецЦикла;
			ОбъектПВХ.Заголовок    = Выборка.Наименование;
			ОбъектПВХ.Наименование = Выборка.Наименование;
			ОбъектПВХ.ТипЗначения = Новый ОписаниеТипов(МассивТипов);
			ОбъектПВХ.ЭтоДополнительноеСведение = Истина;
			
			Если УправлениеСвойствамиСлужебный.ТипЗначенияСодержитЗначенияСвойств(ОбъектПВХ.ТипЗначения) Тогда
				ОбъектПВХ.ДополнительныеЗначенияИспользуются = Истина;
			Иначе
				ОбъектПВХ.ДополнительныеЗначенияИспользуются = Ложь;
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектПВХ);
			
			ОбменДаннымиОбновлениеСПредыдущейРедакции.ЗаменитьСсылкуВУдалитьСоответствияОбъектовИнформационныхБаз(Выборка.Ссылка, ОбъектПВХ.Ссылка);
			
			СоответствиеОбъектов.Вставить(Выборка.Ссылка, ОбъектПВХ.Ссылка);
			
			// Перенос элементов справочника ЗначенияСвойствОбъектов
			ВыборкаЗначенияСвойствОбъектов = Справочники.УдалитьЗначенияСвойствОбъектов.Выбрать(, Выборка.Ссылка);
			Пока ВыборкаЗначенияСвойствОбъектов.Следующий() Цикл
				НовыйЭлемент = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
				НовыйЭлемент.Наименование = ВыборкаЗначенияСвойствОбъектов.Наименование;
				НовыйЭлемент.Владелец     = ОбъектПВХ.Ссылка;
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НовыйЭлемент);
				ОбменДаннымиОбновлениеСПредыдущейРедакции.ЗаменитьСсылкуВУдалитьСоответствияОбъектовИнформационныхБаз(
					ВыборкаЗначенияСвойствОбъектов.Ссылка, НовыйЭлемент.Ссылка);
				СоответствиеЗначенийСвойствОбъектов.Вставить(ВыборкаЗначенияСвойствОбъектов.Ссылка, НовыйЭлемент.Ссылка);
			КонецЦикла;

			// Перенос значений свойства в другой регистр
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	&СвойствоПосле КАК Свойство,
			|	ВЫБОР
			|		КОГДА ТИПЗНАЧЕНИЯ(ЗначенияСвойствОбъектов.Значение) = ТИП(Справочник.УдалитьЗначенияСвойствОбъектов)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЭтоЗначениеСвойствОбъектов,
			|	ЗначенияСвойствОбъектов.Значение КАК ЗначениеСтарое,
			|	ЗначенияСвойствОбъектов.Объект
			|ИЗ
			|	РегистрСведений.УдалитьЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
			|ГДЕ
			|	ЗначенияСвойствОбъектов.Свойство = &СвойствоДо";
			
			Запрос.УстановитьПараметр("СвойствоДо"   , Выборка.Ссылка);
			Запрос.УстановитьПараметр("СвойствоПосле", ОбъектПВХ.Ссылка);
			ТаблицаЗначенийДопСведений = Запрос.Выполнить().Выгрузить();
			
			СоответствияТиповИНаборов = Новый Соответствие();
			НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
			Для Каждого СтрокаЗначения Из ТаблицаЗначенийДопСведений Цикл
				
				ТипЗначенияОбъекта = ТипЗнч(СтрокаЗначения.Объект);
				НаборДополнительныхРеквизитовИСведений = СоответствияТиповИНаборов.Получить(ТипЗначенияОбъекта);
				Если НаборДополнительныхРеквизитовИСведений = Неопределено Тогда
					
					МетаданныеТипа = Метаданные.НайтиПоТипу(ТипЗначенияОбъекта);
					Если Метаданные.Справочники.Содержит(МетаданныеТипа) Тогда
						Набор = НаборыДополнительныхРеквизитовИСведений.Найти("Справочник_" + МетаданныеТипа.Имя, "ИмяПредопределенныхДанных");
					ИначеЕсли Метаданные.Документы.Содержит(МетаданныеТипа) Тогда
						Набор = НаборыДополнительныхРеквизитовИСведений.Найти("Документ_" + МетаданныеТипа.Имя, "ИмяПредопределенныхДанных");
					Иначе
						Набор = Неопределено;
					КонецЕсли;
					
					НаборДополнительныхРеквизитовИСведений = ?(Набор <> Неопределено, Набор.Ссылка, Справочники.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка());
					СоответствияТиповИНаборов.Вставить(ТипЗначенияОбъекта, НаборДополнительныхРеквизитовИСведений);
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(НаборДополнительныхРеквизитовИСведений) Тогда
					Запись = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(Запись, СтрокаЗначения);
					Если СтрокаЗначения.ЭтоЗначениеСвойствОбъектов Тогда
						Запись.Значение = СоответствиеЗначенийСвойствОбъектов.Получить(СтрокаЗначения.ЗначениеСтарое);
					Иначе
						Запись.Значение = СтрокаЗначения.ЗначениеСтарое;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать(Ложь);
			
			// Обновление наборов свойства
			Для Каждого СоответствиеТипаИНабора Из СоответствияТиповИНаборов Цикл
				Если ЗначениеЗаполнено(СоответствиеТипаИНабора.Значение) Тогда
					ОбщиеСвойства = СоответствиеТипаИНабора.Значение.ПолучитьОбъект();
					СвойствоНайдено = Ложь;
					Для Каждого ОбщееСвойство Из ОбщиеСвойства.ДополнительныеСведения Цикл
						Если ОбщееСвойство.Свойство = ОбъектПВХ.Ссылка Тогда
							СвойствоНайдено = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если НЕ СвойствоНайдено Тогда
						ОбщиеСвойства.КоличествоСведений = ОбщиеСвойства.КоличествоСведений + 1;
						НовоеСвойство = ОбщиеСвойства.ДополнительныеСведения.Добавить();
						НовоеСвойство.Свойство = ОбъектПВХ.Ссылка;
						ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбщиеСвойства);
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
		ЗапросНаборы = Новый Запрос();
		ЗапросНаборы.Текст =
		"ВЫБРАТЬ
		|	НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Свойство КАК Свойство,
		|	НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Ссылка КАК НаборСвойств,
		|	1 КАК Количество
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения
		|ИТОГИ
		|	СУММА(Количество)
		|ПО
		|	Свойство";
		ВыборкаНаборы = ЗапросНаборы.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаНаборы.Следующий() Цикл
			Если ЗначениеЗаполнено(ВыборкаНаборы.Свойство) Тогда
				Если ВыборкаНаборы.Количество = 1 Тогда
					ВыборкаСвойство = ВыборкаНаборы.Выбрать();
					Если ВыборкаСвойство.Следующий() Тогда
						Свойство = ВыборкаСвойство.Свойство.ПолучитьОбъект();
						Свойство.НаборСвойств = ВыборкаСвойство.НаборСвойств;
						ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Свойство);
					КонецЕсли;
				Иначе
					Свойство = ВыборкаНаборы.Свойство.ПолучитьОбъект();
					Свойство.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка();
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Свойство);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

Процедура ЗаполнениеРеквизитовОрганизацииПриОбновленииС20() Экспорт
	
	Если НЕ ЗначениеЗаполнено(Константы.УдалитьНомерВерсииКонфигурации.Получить()) Тогда 
		Возврат;
	КонецЕсли;
	
	Если НЕ ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Ссылка,
	|	ПодразделенияОрганизаций.ГоловнаяОрганизация
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	НЕ ПодразделенияОрганизаций.Владелец ЕСТЬ NULL 
	|	И ПодразделенияОрганизаций.Владелец <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ПодразделениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если ПодразделениеОбъект.РайонныйКоэффициент < 1 Тогда
			ПодразделениеОбъект.РайонныйКоэффициент = 1;
		КонецЕсли;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПодразделениеОбъект);		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка,
	|	Организации.ГоловнаяОрганизация,
	|	Организации.ПрефиксБП20
	|ИЗ
	|	Справочник.Организации КАК Организации";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОрганизацияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если ЗначениеЗаполнено(Выборка.ГоловнаяОрганизация)
			И Выборка.ГоловнаяОрганизация <> Выборка.Ссылка Тогда
			ОрганизацияОбъект.ОбособленноеПодразделение = Истина;
		Иначе
			ОрганизацияОбъект.ГоловнаяОрганизация = Выборка.Ссылка;
		КонецЕсли;

		// Заполнение префикса организации
		ОрганизацияОбъект.Префикс = Выборка.ПрефиксБП20;
		
		//Районный коэффициент заполняется в обработчике "Перед записью"
		//организации
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОрганизацияОбъект);		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнениеЗначенийФункциональныхОпцийПриОбновленииС20() Экспорт

	Если НЕ ЗначениеЗаполнено(Константы.УдалитьНомерВерсииКонфигурации.Получить()) Тогда 
		Возврат;
	КонецЕсли;
	
	Константы.ОсуществляетсяРеализацияТоваровУслугКомитентов.Установить(Истина);
	Константы.ОсуществляетсяРеализацияТоваровУслугЧерезКомиссионеров.Установить(Истина);
	Константы.ОсуществляетсяЗакупкаТоваровУслугДляКомитентов.Установить(Истина);
	Константы.ОсуществляетсяЗакупкаТоваровУслугЧерезКомиссионеров.Установить(Истина);
	Константы.ИспользоватьВалютныйУчет.Установить(Истина);
	Константы.ИспользоватьРучнуюКорректировкуДвижений.Установить(Истина);
	Константы.ВедетсяРозничнаяТорговля.Установить(Истина);
	Константы.ВедетсяПроизводственнаяДеятельность.Установить(Истина);
	Константы.ВедетсяУчетНМА.Установить(Истина);
	Константы.ВедетсяУчетОсновныхСредств.Установить(Истина);
	Константы.ВедетсяУчетСпецодеждыСпецоснастки.Установить(Истина);
	Константы.ВедетсяОтгрузкаБезПереходаПраваСобственности.Установить(Истина);
	Константы.ИспользоватьКомплектациюНоменклатуры.Установить(Истина);
	Константы.ИспользоватьОплатуПоПлатежнымКартам.Установить(Истина);
	Константы.ВедетсяУчетДенежныхДокументов.Установить(Истина);
	Константы.ИспользоватьПакетноеВыставлениеАктов.Установить(Истина);
	Константы.ИспользоватьПлатежныеТребования.Установить(Истина);
	Константы.УправлениеЗачетомАвансовПогашениемЗадолженности.Установить(Истина);
	Константы.ВедетсяУчетВозвратнойТары.Установить(Истина);
	Константы.ВедетсяУчетРозничнойПродажиАлкогольнойПродукцииПива.Установить(Истина);
	Константы.ИспользоватьКорректировочныеДокументы.Установить(Истина);
	
	СчетКасса = ПланыСчетов.Хозрасчетный.Касса;
	ИспользоватьСтатьиДвиженияДенежныхСредств = НЕ (СчетКасса.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств, "ВидСубконто") = Неопределено);
	Константы.ИспользоватьСтатьиДвиженияДенежныхСредств.Установить(ИспользоватьСтатьиДвиженияДенежныхСредств);

	НовыйНаборЗаписей = РегистрыСведений.УчетнаяПолитикаОрганизаций.СоздатьНаборЗаписей();
	НовыйНаборЗаписей.Прочитать();

	Для каждого Запись Из НовыйНаборЗаписей Цикл
		
		Запись.ПлательщикНалогаНаПрибыль = Запись.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая;
		
		Запись.ПоддержкаПБУ18 = Запись.ПлательщикНалогаНаПрибыль И Запись.ПоддержкаПБУ18;
		
		Запись.ПрименяетсяУСН = Запись.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная;
		
		Запись.ПрименяетсяУСНДоходы = Запись.ПрименяетсяУСН
			И Запись.ОбъектНалогообложенияУСН = Перечисления.ОбъектыНалогообложенияПоУСН.Доходы;
		
		Запись.ПрименяетсяУСНДоходыМинусРасходы = Запись.ПрименяетсяУСН 
			И Запись.ОбъектНалогообложенияУСН = Перечисления.ОбъектыНалогообложенияПоУСН.ДоходыМинусРасходы;
			
		Запись.ПлательщикНДС = Запись.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая;
			
		Запись.УпрощенныйУчетНДС = Запись.ПлательщикНДС
			И Запись.УпрощенныйУчетНДС;
		
	КонецЦикла;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НовыйНаборЗаписей);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	УдалитьЗначенияСвойствОбъектов.Объект
	|ИЗ
	|	РегистрСведений.УдалитьЗначенияСвойствОбъектов КАК УдалитьЗначенияСвойствОбъектов";
	Если Не Запрос.Выполнить().Пустой() Тогда 
		Константы.ИспользоватьДополнительныеРеквизитыИСведения.Установить(Истина);
		Константы.ИспользоватьОбщиеДополнительныеЗначения.Установить(Истина);
		Константы.ИспользоватьОбщиеДополнительныеРеквизитыИСведения.Установить(Истина);
	КонецЕсли;
	
	НачалоПримененияПостановления1137 = Константы.УдалитьНачалоПримененияИсправленныхСчетовФактур.Получить();
	Если ЗначениеЗаполнено(НачалоПримененияПостановления1137) Тогда
		Запись = РегистрыСведений.ПараметрыРегламентированногоУчета.СоздатьМенеджерЗаписи();
		Запись.Период = НачалоПримененияПостановления1137;
		Запись.Прочитать();
		Если Не Запись.Выбран() Тогда
			
			Запрос = Новый Запрос();
			Запрос.Параметры.Вставить("НачалоПримененияПостановления1137", НачалоПримененияПостановления1137);
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ПараметрыРегламентированногоУчетаСрезПоследних.ИспользуетсяПостановлениеНДС1137
			|ИЗ
			|	РегистрСведений.ПараметрыРегламентированногоУчета.СрезПоследних(&НачалоПримененияПостановления1137, ) КАК ПараметрыРегламентированногоУчетаСрезПоследних";
			Запрос.Текст = ТекстЗапроса;
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Запись.Заполнить(Выборка);
			КонецЕсли;
			Запись.ИспользуетсяПостановлениеНДС1137 = Истина;
			Запись.Период = НачалоПримененияПостановления1137;
			Запись.Записать(Истина);
		ИначеЕсли НЕ Запись.ИспользуетсяПостановлениеНДС1137 Тогда
			Запись.ИспользуетсяПостановлениеНДС1137 = Истина;
			Запись.Записать(Истина);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьКонстантыПриПереходеС20() Экспорт
	
	Если НЕ ЗначениеЗаполнено(Константы.УдалитьНомерВерсииКонфигурации.Получить()) Тогда 
		Возврат;
	КонецЕсли;
	
	Если СокрЛП(Константы.ПрефиксУзлаРаспределеннойИнформационнойБазыБП20.Получить())<> "" Тогда
		Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Установить(Константы.ПрефиксУзлаРаспределеннойИнформационнойБазыБП20.Получить());
	КонецЕсли;
	
	Справочники.Организации.ПерезаполнитьКонстантуИспользоватьНесколькоОрганизаций();
	Справочники.Склады.ПерезаполнитьКонстантуИспользоватьНесколькоСкладов();
	Справочники.НоменклатурныеГруппы.ПерезаполнитьКонстантуИспользоватьНесколькоНоменклатурныхГрупп();
	
	Константы.ВестиУчетЗатратПоПодразделениям.Установить(Истина);
	
	Константы.ИспользоватьНесколькоОтветственных.Установить(Истина);
	
	// Установка константы ведения учета зарплаты в БП
	УчетЗарплатыИКадровВоВнешнейПрограмме = Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.Получить();
	Константы.ИспользоватьНачислениеЗарплаты.Установить(НЕ УчетЗарплатыИКадровВоВнешнейПрограмме);
	Константы.УчетЗарплатыИКадровСредствамиБухгалтерии.Установить(НЕ УчетЗарплатыИКадровВоВнешнейПрограмме);
	
	Константы.ИспользоватьСинхронизациюДанных.Установить(Константы.ИспользоватьСинхронизациюДанных.Получить());
	
	Если УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Организации.Ссылка КАК Организация
		|ИЗ
		|	Справочник.Организации КАК Организации";
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат;
		Иначе
			Выборка = Результат.Выбрать();
		КонецЕсли;
		
		ОтражениеВРегламентированномУчетеНастройкиОрганизаций = РегистрыСведений.ОтражениеВРегламентированномУчетеНастройкиОрганизаций.СоздатьМенеджерЗаписи();
		НастройкиУчетаЗарплаты  = РегистрыСведений.НастройкиУчетаЗарплаты.СоздатьМенеджерЗаписи();
		Справочники.Резервы.СоздатьЭлементыПоУмолчанию();
		РезервЕжегодныхОтпусков = Справочники.Резервы.НайтиПоНаименованию("Резерв ежегодных отпусков", Истина);
	
		Пока Выборка.Следующий() Цикл
			
			ОтражениеВРегламентированномУчетеНастройкиОрганизаций.Организация = Выборка.Организация;
			ОтражениеВРегламентированномУчетеНастройкиОрганизаций.Прочитать();
			ОтражениеВРегламентированномУчетеНастройкиОрганизаций.Организация = Выборка.Организация;
			ОтражениеВРегламентированномУчетеНастройкиОрганизаций.ФормироватьПроводкиВКонцеПериода = УчетЗарплатыИКадровВоВнешнейПрограмме;
			ОтражениеВРегламентированномУчетеНастройкиОрганизаций.Записать();
			
			НастройкиУчетаЗарплаты.Организация = Выборка.Организация;
			НастройкиУчетаЗарплаты.Прочитать();
			НастройкиУчетаЗарплаты.Организация = Выборка.Организация;
			НастройкиУчетаЗарплаты.ИспользоватьФорматОбменаЗУП25 = Истина;
			НастройкиУчетаЗарплаты.РезервОтпусков = РезервЕжегодныхОтпусков;
			НастройкиУчетаЗарплаты.Записать();
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура очищает в документе "ОперацияБух"
// типовую операцию
//
Процедура ОчиститьТиповыеОперацииОперацииБухПриПереходеС20() Экспорт
	
	Если НЕ ЗначениеЗаполнено(Константы.УдалитьНомерВерсииКонфигурации.Получить()) Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОперацияБух.Ссылка
	|ИЗ
	|	Документ.ОперацияБух КАК ОперацияБух
	|ГДЕ
	|	ОперацияБух.СпособЗаполнения = ""Типовые операции""";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОперацияБух = Выборка.Ссылка.ПолучитьОбъект();
		ОперацияБух.СпособЗаполнения = НСтр("ru = 'Вручную'");
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОперацияБух);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроизвестиЗаменуСсылокНаНовыйПредопределенныйЭлементСтранМира() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтраныМира.Ссылка
	|ИЗ
	|	Справочник.СтраныМира КАК СтраныМира
	|ГДЕ
	|	СтраныМира.Код = ""643""
	|	И (НЕ СтраныМира.Предопределенный)";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Замены = Новый Соответствие();
		Замены.Вставить(Выборка.Ссылка, Справочники.СтраныМира.Россия);
		ОбщегоНазначенияБП.ЗаменитьСсылки(Замены);
		
		ОбъектСтрана = Выборка.Ссылка.ПолучитьОбъект();
		ОбъектСтрана.Удалить();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроизвестиЗаменуСсылокНаНовыйПредопределенныйЭлементГруппыПользователей() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ГруппаВсеПользователи = Справочники.ГруппыПользователей.ПолучитьСсылку(Новый УникальныйИдентификатор("58d5710e-0987-471c-a598-ba7ef1cb9366"));
	Если ОбщегоНазначения.СсылкаСуществует(ГруппаВсеПользователи) Тогда
		
		Замены = Новый Соответствие();
		Замены.Вставить(ГруппаВсеПользователи, Справочники.ГруппыПользователей.ВсеПользователи);
		ОбщегоНазначенияБП.ЗаменитьСсылки(Замены);
	
		ОбъектГруппаВсеПользователи = ГруппаВсеПользователи.ПолучитьОбъект();
		ОбъектГруппаВсеПользователи.Удалить();
		
	КонецЕсли;

КонецПроцедуры

Процедура ОбработатьСсылкиНаВедомости() Экспорт
	
	УчетЗарплатыИКадровВоВнешнейПрограмме = Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.Получить();
	ВедетсяУчетРасчетовПоЗарплатеСводно   = Константы.ВедетсяУчетРасчетовПоЗарплатеСводно.Получить();
	
	Если УчетЗарплатыИКадровВоВнешнейПрограмме И ВедетсяУчетРасчетовПоЗарплатеСводно Тогда
		Возврат;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка КАК Ссылка,
	|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка.ВидОперации КАК ВидОперации
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК РасходныйКассовыйОрдерВыплатаЗаработнойПлаты
	|ГДЕ
	|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.УдалитьВедомость <> ЗНАЧЕНИЕ(Документ.ВедомостьНаВыплатуЗарплаты.ПустаяСсылка)
	|	И РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость = НЕОПРЕДЕЛЕНО
	|	И РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка,
	|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка.ВидОперации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходныйКассовыйОрдерВыплатаДепонентов.Ссылка,
	|	РасходныйКассовыйОрдерВыплатаДепонентов.Ссылка.ВидОперации
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.ВыплатаДепонентов КАК РасходныйКассовыйОрдерВыплатаДепонентов
	|ГДЕ
	|	РасходныйКассовыйОрдерВыплатаДепонентов.УдалитьПлатежнаяВедомость <> ЗНАЧЕНИЕ(Документ.ВедомостьНаВыплатуЗарплаты.ПустаяСсылка)
	|	И РасходныйКассовыйОрдерВыплатаДепонентов.Ведомость = НЕОПРЕДЕЛЕНО
	|	И РасходныйКассовыйОрдерВыплатаДепонентов.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВыплатаДепонентов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Ссылка,
	|	РасходныйКассовыйОрдер.ВидОперации
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.УдалитьПлатежнаяВедомость <> ЗНАЧЕНИЕ(Документ.ВедомостьНаВыплатуЗарплаты.ПустаяСсылка)
	|	И РасходныйКассовыйОрдер.ПлатежнаяВедомость = НЕОПРЕДЕЛЕНО
	|	И РасходныйКассовыйОрдер.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СписаниеСРасчетногоСчетаПеречислениеЗаработнойПлаты.Ссылка,
	|	СписаниеСРасчетногоСчетаПеречислениеЗаработнойПлаты.Ссылка.ВидОперации
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета.ПеречислениеЗаработнойПлаты КАК СписаниеСРасчетногоСчетаПеречислениеЗаработнойПлаты
	|ГДЕ
	|	СписаниеСРасчетногоСчетаПеречислениеЗаработнойПлаты.УдалитьВедомость <> ЗНАЧЕНИЕ(Документ.ВедомостьНаВыплатуЗарплаты.ПустаяСсылка)
	|	И СписаниеСРасчетногоСчетаПеречислениеЗаработнойПлаты.Ведомость = НЕОПРЕДЕЛЕНО
	|	И СписаниеСРасчетногоСчетаПеречислениеЗаработнойПлаты.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП)
	|
	|СГРУППИРОВАТЬ ПО
	|	СписаниеСРасчетногоСчетаПеречислениеЗаработнойПлаты.Ссылка,
	|	СписаниеСРасчетногоСчетаПеречислениеЗаработнойПлаты.Ссылка.ВидОперации";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда		
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Выборка = Результат.Выбрать();
	
	Попытка
		Пока Выборка.Следующий() Цикл
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			Если Выборка.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
				Таблица             = ДокументОбъект.ВыплатаЗаработнойПлаты;
				ИмяСтарогоРеквизита = "УдалитьВедомость";
				ИмяНовогоРеквизита  = "Ведомость";
			ИначеЕсли Выборка.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов Тогда
				Таблица             = ДокументОбъект.ВыплатаДепонентов;
				ИмяСтарогоРеквизита = "УдалитьПлатежнаяВедомость";
				ИмяНовогоРеквизита  = "Ведомость";
			ИначеЕсли Выборка.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
				Таблица             = Неопределено;
				ИмяСтарогоРеквизита = "УдалитьПлатежнаяВедомость";
				ИмяНовогоРеквизита  = "ПлатежнаяВедомость";
			ИначеЕсли Выборка.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП Тогда
				Таблица             = ДокументОбъект.ПеречислениеЗаработнойПлаты;
				ИмяСтарогоРеквизита = "УдалитьВедомость";
				ИмяНовогоРеквизита  = "Ведомость";
			Иначе
				Продолжить;
			КонецЕсли;
			
			Если УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
				
				Если Таблица = Неопределено Тогда
					
					ДокументОбъект[ИмяНовогоРеквизита] = ДокументОбъект[ИмяСтарогоРеквизита];
					
				Иначе
					
					Для Каждого СтрокаТаблицы ИЗ Таблица Цикл

						СтрокаТаблицы[ИмяНовогоРеквизита] = СтрокаТаблицы[ИмяСтарогоРеквизита];
						
					КонецЦикла;
					
				КонецЕсли;
			Иначе
				
				Если Таблица = Неопределено Тогда
					
					НовыйДокумент = ЗарплатаКадрыОбновлениеСпредыдущейРедакции.КонвертироватьДанные(ДокументОбъект[ИмяСтарогоРеквизита]);
					Если НовыйДокумент = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					ДокументОбъект[ИмяНовогоРеквизита] = НовыйДокумент;
					
				Иначе
					
					Для Каждого СтрокаТаблицы ИЗ Таблица Цикл
						
						НовыйДокумент = ЗарплатаКадрыОбновлениеСпредыдущейРедакции.КонвертироватьДанные(СтрокаТаблицы[ИмяСтарогоРеквизита]);
						Если НовыйДокумент = Неопределено Тогда
							Продолжить;
						КонецЕсли;				
						СтрокаТаблицы[ИмяНовогоРеквизита] = НовыйДокумент;
						
					КонецЦикла;
					
				КонецЕсли;
			КонецЕсли;
			
			// Регистрация объектов на узлах плана обмена нужна, так как создается новый документ и ссылка на него
			// записывается в ДокументОбъект
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект, Истина);
			
		КонецЦикла;
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ПеренестиПрисоединенныеФайлы() Экспорт
	
	СуществуютПрисоединенныеФайлы = Истина;
	
	Пока СуществуютПрисоединенныеФайлы Цикл
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	УдалитьПрисоединенныеФайлы.ПрисоединенныйФайл,
		|	УдалитьПрисоединенныеФайлы.ХранимыйФайл
		|ИЗ
		|	РегистрСведений.УдалитьПрисоединенныеФайлы КАК УдалитьПрисоединенныеФайлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрисоединенныеФайлы КАК ПрисоединенныеФайлы
		|		ПО УдалитьПрисоединенныеФайлы.ПрисоединенныйФайл = ПрисоединенныеФайлы.ПрисоединенныйФайл
		|ГДЕ
		|	ПрисоединенныеФайлы.ПрисоединенныйФайл ЕСТЬ NULL ";
		
		РезультатЗапроса = Запрос.Выполнить();
		СуществуютПрисоединенныеФайлы = НЕ РезультатЗапроса.Пустой();
		Если СуществуютПрисоединенныеФайлы Тогда
			НаборЗаписей = РегистрыСведений.ПрисоединенныеФайлы.СоздатьНаборЗаписей();
			НаборЗаписей.Загрузить(РезультатЗапроса.Выгрузить());
			
			// регистрировать для обмена набор не требуется
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
			НаборЗаписей.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
			
			НаборЗаписей.Записать(Ложь);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьНачальныеНастройкиПользователей() Экспорт
	
	ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	Для Каждого ПользовательИБ ИЗ ПользователиИБ Цикл
		ПользователиСлужебный.УстановитьНачальныеНастройки(ПользовательИБ.Имя);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВосстановитьЗначенияДополнительныхСведений() Экспорт
	
	МассивДополнительныхСведений = Новый Массив;
	
	ДополнительныеСведения = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Выбрать();
	Пока ДополнительныеСведения.Следующий() Цикл
		Если УправлениеСвойствамиСлужебный.ТипЗначенияСодержитЗначенияСвойств(ДополнительныеСведения.ТипЗначения) Тогда
			МассивДополнительныхСведений.Добавить(ДополнительныеСведения.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Свойства", МассивДополнительныхСведений);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДополнительныеСведения.Свойство КАК Свойство,
	|	ДополнительныеСведения.Значение,
	|	ЗначенияСвойствОбъектов.Ссылка КАК ЗначениеСвойствОбъектов
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО ДополнительныеСведения.Значение = ЗначенияСвойствОбъектов.Наименование
	|			И ДополнительныеСведения.Свойство = ЗначенияСвойствОбъектов.Владелец
	|ГДЕ
	|	ДополнительныеСведения.Свойство В(&Свойства)
	|ИТОГИ ПО
	|	Свойство";
	
	ВыборкаСвойств = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСвойств.Следующий() Цикл
		
		СоответствиеЗначений = Новый Соответствие();
		Выборка = ВыборкаСвойств.Выбрать();
		Пока Выборка.Следующий() Цикл
			СоответствиеЗначений.Вставить(Выборка.Значение, Выборка.ЗначениеСвойствОбъектов);
		КонецЦикла;
		
		НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Свойство.Установить(ВыборкаСвойств.Свойство);
		НаборЗаписей.Прочитать();
		
		Для Каждого Запись Из НаборЗаписей Цикл
			Если ТипЗнч(Запись.Значение) = Тип("Строка") Тогда
				ЗначениеСвойства = СоответствиеЗначений.Получить(Запись.Значение);
				Если ЗначениеСвойства <> Неопределено Тогда
					Запись.Значение = ЗначениеСвойства;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьПроведен(МетаданныеДокумента, ПараметрыОтложенногоОбновления = Неопределено, РазмерПорции = 1000) Экспорт
	
	Если ТранзакцияАктивна() Тогда
		// Следует выполнять вне транзакции, так как проведение документов не гарантируется
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Если ПараметрыОтложенногоОбновления = Неопределено Тогда
		// Единственная порция данных
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Документы.Ссылка
		|ИЗ
		|	Документ.%ИмяДокумента% КАК Документы
		|ГДЕ
		|	НЕ Документы.Проведен
		|	И НЕ Документы.ПометкаУдаления";
	ИначеЕсли Не ПараметрыОтложенногоОбновления.Свойство("НачалоОбработки") Тогда
		// Первая порция данных
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ %РазмерПорции%
		|	Документы.Ссылка КАК Ссылка,
		|	Документы.МоментВремени КАК МоментВремени
		|ИЗ
		|	Документ.%ИмяДокумента% КАК Документы
		|ГДЕ
		|	НЕ Документы.Проведен
		|	И НЕ Документы.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	МоментВремени УБЫВ";
	Иначе
		// Не первая порция данных
		Запрос.УстановитьПараметр("НачалоОбработки", ПараметрыОтложенногоОбновления.НачалоОбработки);
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ %РазмерПорции%
		|	Документы.Ссылка КАК Ссылка,
		|	Документы.МоментВремени КАК МоментВремени
		|ИЗ
		|	Документ.%ИмяДокумента% КАК Документы
		|ГДЕ
		|	НЕ Документы.Проведен
		|	И НЕ Документы.ПометкаУдаления
		|	И Документы.МоментВремени < &НачалоОбработки
		|
		|УПОРЯДОЧИТЬ ПО
		|	МоментВремени УБЫВ";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%РазмерПорции%", Формат(РазмерПорции, "ЧГ=0"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяДокумента%", МетаданныеДокумента.Имя);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ПараметрыОтложенногоОбновления <> Неопределено Тогда
			ПараметрыОтложенногоОбновления.Вставить("НачалоОбработки", Выборка.МоментВремени);
		КонецЕсли;
		
		Блокировка = Новый БлокировкаДанных;
    	ЭлементБлокировки = Блокировка.Добавить("Документ." + МетаданныеДокумента.Имя);
    	ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
		
		НачатьТранзакцию();
		
		Попытка
    		Блокировка.Заблокировать();
		Исключение
			ОтменитьТранзакцию();
			Продолжить;
		КонецПопытки;
	
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Если Не Объект.ПроверитьЗаполнение() Тогда
			ОтменитьТранзакцию();
			Продолжить;
		КонецЕсли;
		
		Попытка
			Объект.Проведен = Истина;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
		Исключение
			
			ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось провести документ: %1 по причине:
					|%2'"), 
				Выборка.Ссылка, 
				ПредставлениеОшибки);
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				МетаданныеДокумента, 
				Выборка.Ссылка, 
				ТекстСообщения);
				
			Продолжить;
			
		КонецПопытки;
		
		ЗафиксироватьТранзакцию();
		
	КонецЦикла;
	
	Если ПараметрыОтложенногоОбновления <> Неопределено И Выборка.Количество() = РазмерПорции Тогда
		ПараметрыОтложенногоОбновления.Вставить("ОбработкаЗавершена", Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьНеобходимостьЗаполненияПоследовательностей() Экспорт

	Если НЕ ЭтоПереходСРедакции20() Тогда
		Возврат;
	КонецЕсли;

	ПараметрыПерехода = ПараметрыПереходаСРедакции20();
	ПараметрыПерехода.ВыполнитьЗаполнениеПоследовательностей = Истина;
	
	УстановитьПараметрыПереходаСРедакции20(ПараметрыПерехода);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ФИЗИЧЕСКИЕ ЛИЦА: ОБНОВЛЕНИЕ С БП 2.0

Процедура КонвертироватьДокументыФизическихЛицС20() Экспорт
	
	Если НЕ ЗначениеЗаполнено(Константы.УдалитьНомерВерсииКонфигурации.Получить()) Тогда 
		Возврат;
	КонецЕсли;
	
	СоответствиеКонвертированныхОбъектов = Новый Соответствие;
	
	КонвертироватьСправочникДокументыУдостоверяющиеЛичность(СоответствиеКонвертированныхОбъектов);
	ДокументыФизическихЛицКонвертация(СоответствиеКонвертированныхОбъектов);
	
КонецПроцедуры

//Справочник УдалитьДокументыУдостоверяющиеЛичность
//
Процедура КонвертироватьСправочникДокументыУдостоверяющиеЛичность(СоответствиеКонвертированныхОбъектов)
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьДокументыУдостоверяющиеЛичность.Ссылка,
	|	УдалитьДокументыУдостоверяющиеЛичность.ВерсияДанных,
	|	УдалитьДокументыУдостоверяющиеЛичность.ПометкаУдаления,
	|	УдалитьДокументыУдостоверяющиеЛичность.Предопределенный,
	|	УдалитьДокументыУдостоверяющиеЛичность.Наименование,
	|	УдалитьДокументыУдостоверяющиеЛичность.КодПФР,
	|	УдалитьДокументыУдостоверяющиеЛичность.КодИМНС,
	|	ВидыДокументовФизическихЛиц.Ссылка КАК ПриемникСсылка
	|ПОМЕСТИТЬ ВТСоответствиеПоДопКодам
	|ИЗ
	|	Справочник.УдалитьДокументыУдостоверяющиеЛичность КАК УдалитьДокументыУдостоверяющиеЛичность
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовФизическихЛиц КАК ВидыДокументовФизическихЛиц
	|		ПО УдалитьДокументыУдостоверяющиеЛичность.КодПФР = ВидыДокументовФизическихЛиц.КодПФР
	|			И УдалитьДокументыУдостоверяющиеЛичность.КодИМНС = ВидыДокументовФизическихЛиц.КодМВД
	|			И (ВидыДокументовФизическихЛиц.КодМВД <> """"
	|				ИЛИ ВидыДокументовФизическихЛиц.КодМВД <> """")
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоответствиеПоДопКодам.Ссылка,
	|	СоответствиеПоДопКодам.ВерсияДанных,
	|	СоответствиеПоДопКодам.ПометкаУдаления,
	|	СоответствиеПоДопКодам.Предопределенный,
	|	СоответствиеПоДопКодам.Наименование,
	|	СоответствиеПоДопКодам.КодПФР,
	|	СоответствиеПоДопКодам.КодИМНС,
	|	ВЫБОР
	|		КОГДА СоответствиеПоДопКодам.ПриемникСсылка ЕСТЬ NULL 
	|			ТОГДА ВидыДокументовФизическихЛиц.Ссылка
	|		ИНАЧЕ СоответствиеПоДопКодам.ПриемникСсылка
	|	КОНЕЦ КАК ПриемникСсылка
	|ИЗ
	|	ВТСоответствиеПоДопКодам КАК СоответствиеПоДопКодам
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовФизическихЛиц КАК ВидыДокументовФизическихЛиц
	|		ПО (СоответствиеПоДопКодам.ПриемникСсылка ЕСТЬ NULL )
	|			И СоответствиеПоДопКодам.Наименование = ВидыДокументовФизическихЛиц.Наименование
	|ГДЕ
	|	((НЕ СоответствиеПоДопКодам.ПриемникСсылка ЕСТЬ NULL )
	|			ИЛИ (НЕ ВидыДокументовФизическихЛиц.Ссылка ЕСТЬ NULL ))";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если (Не ЗначениеЗаполнено(Выборка)) ИЛИ НеПроизводитьКонвертациюЗначения(ТипЗнч(Выборка)) Тогда
			Продолжить;
		КонецЕсли;
		
		КонвертироватьЭлементДокументыУдостоверяющиеЛичность(Выборка, СоответствиеКонвертированныхОбъектов, Выборка.ПриемникСсылка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДокументыФизическихЛицКонвертация(СоответствиеКонвертированныхОбъектов)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УдалитьПаспортныеДанныеФизЛиц.Период,
	|	УдалитьПаспортныеДанныеФизЛиц.ФизЛицо,
	|	УдалитьПаспортныеДанныеФизЛиц.ДокументВид,
	|	УдалитьПаспортныеДанныеФизЛиц.ДокументСерия,
	|	УдалитьПаспортныеДанныеФизЛиц.ДокументНомер,
	|	УдалитьПаспортныеДанныеФизЛиц.ДокументДатаВыдачи,
	|	УдалитьПаспортныеДанныеФизЛиц.ДокументКемВыдан,
	|	УдалитьПаспортныеДанныеФизЛиц.ДокументКодПодразделения,
	|	УдалитьПаспортныеДанныеФизЛиц.ДатаРегистрацииПоМестуЖительства
	|ИЗ
	|	РегистрСведений.УдалитьПаспортныеДанныеФизЛиц КАК УдалитьПаспортныеДанныеФизЛиц";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыСведений.ДокументыФизическихЛиц.СоздатьНаборЗаписей();
	
	ТекстСерия				= НСтр("ru = ', серия: %1'");
	ТекстНомер				= НСтр("ru = ', № %1'");
	ТекстДатаВыдачи			= НСтр("ru = ', выдан: %1 года'");
	ТекстСрокДействия		= НСтр("ru = ', действует до: %1 года'");
	ТекстКодПодразделения	= НСтр("ru = ', № подр. %1'");

	Пока Выборка.Следующий() Цикл
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.Период				= Выборка.Период;
		ЗаписьНабора.Физлицо			= Выборка.ФизЛицо;
		ЗаписьНабора.ВидДокумента		= КонвертироватьЭлементДокументыУдостоверяющиеЛичность(Выборка.ДокументВид, СоответствиеКонвертированныхОбъектов);
		ЗаписьНабора.Серия				= Выборка.ДокументСерия;
		ЗаписьНабора.Номер				= Выборка.ДокументНомер;
		ЗаписьНабора.ДатаВыдачи			= Выборка.ДокументДатаВыдачи;
		ЗаписьНабора.КемВыдан			= Выборка.ДокументКемВыдан;
		ЗаписьНабора.КодПодразделения	= Выборка.ДокументКодПодразделения;
		ЗаписьНабора.ЯвляетсяДокументомУдостоверяющимЛичность	= Истина;
		
		Если ПустаяСтрока(ЗаписьНабора.Представление) И Не ЗаписьНабора.ВидДокумента.Пустая() Тогда
				ЗаписьНабора.Представление = ""
					+ ЗаписьНабора.ВидДокумента
					+ ?(ЗначениеЗаполнено(ЗаписьНабора.Серия), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСерия, ЗаписьНабора.Серия), "")
					+ ?(ЗначениеЗаполнено(ЗаписьНабора.Номер), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстНомер, ЗаписьНабора.Номер), "")
					+ ?(ЗначениеЗаполнено(ЗаписьНабора.ДатаВыдачи), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстДатаВыдачи, Формат(ЗаписьНабора.ДатаВыдачи,"ДФ='дд ММММ гггг'")), "")
					+ ?(ЗначениеЗаполнено(ЗаписьНабора.СрокДействия), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСрокДействия, Формат(ЗаписьНабора.СрокДействия,"ДФ='дд ММММ гггг'")), "")
					+ ?(ЗначениеЗаполнено(ЗаписьНабора.КемВыдан), ", " + ЗаписьНабора.КемВыдан, "")
					+ ?(ЗначениеЗаполнено(ЗаписьНабора.КодПодразделения) И ЗаписьНабора.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстКодПодразделения, ЗаписьНабора.КодПодразделения), "");
			КонецЕсли;

	КонецЦикла;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей, Истина);
	
КонецПроцедуры

Функция КонвертироватьЭлементДокументыУдостоверяющиеЛичность(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник = Неопределено) Экспорт
	
	Если ПустаяСтрока(КонвертируемыеДанные.Наименование) И КонвертируемыеДанные.Ссылка.Пустая() Тогда
		Элемент = ПолучитьСсылкуНаКонвертированныйОбъект(Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка(), СоответствиеКонвертированныхОбъектов);
		
		Если Элемент = Неопределено Тогда
			Элемент = Справочники.ВидыДокументовФизическихЛиц.СоздатьЭлемент();
			Элемент.Наименование = "Иные документы, выдаваемые органами МВД";
			УстановитьКодСправочника(Элемент, КонвертируемыеДанные);
			Элемент.КодМВД = "91";
			Элемент.КодПФР = "ПРОЧЕЕ";
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Элемент);
			
			ВставитьСсылкуНаКонвертированныйОбъект(Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка(), Элемент.Ссылка, СоответствиеКонвертированныхОбъектов);
		КонецЕсли;
		
	Иначе
		Элемент = ПолучитьСсылкуНаНовыйЭлемент(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник);
	
		Если Элемент = Неопределено Тогда
			Элемент = Справочники.ВидыДокументовФизическихЛиц.СоздатьЭлемент();
			Элемент.Наименование = КонвертируемыеДанные.Наименование;
			УстановитьКодСправочника(Элемент, КонвертируемыеДанные);
			Элемент.КодМВД = КонвертируемыеДанные.КодИМНС;
			Элемент.КодПФР = КонвертируемыеДанные.КодПФР;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Элемент);
			
			ВставитьСсылкуНаКонвертированныйОбъект(КонвертируемыеДанные.Ссылка, Элемент.Ссылка, СоответствиеКонвертированныхОбъектов);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Элемент.Ссылка;
КонецФункции	

Функция НеПроизводитьКонвертациюЗначения(Тип)
	
	Если Тип = Тип("Число") 
		Или Тип = Тип("Строка")
		Или Тип = Тип("Дата") 
		Или Тип = Тип("Булево")
		Или Тип = Тип("УникальныйИдентификатор") 
		Или Тип = Тип("ХранилищаНастроекМенеджер") 
		Или Тип = Тип("Null") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСсылкуНаНовыйЭлемент(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник)
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(КонвертируемыеДанные)) Тогда
		Ссылка = КонвертируемыеДанные;
	Иначе 
		Ссылка = КонвертируемыеДанные.Ссылка;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СсылкаНаКонвертированныйОбъект = ПолучитьСсылкуНаКонвертированныйОбъект(Ссылка, СоответствиеКонвертированныхОбъектов);
	Если СсылкаНаКонвертированныйОбъект <> Неопределено Тогда
		Возврат СсылкаНаКонвертированныйОбъект;		
	КонецЕсли;	
	
	Если КонвертируемыеДанные.Предопределенный Тогда
		Элемент = ПолучитьСоответствиеПредопределенногоЭлементаДокументыУдостоверяющиеЛичность(Ссылка);
		Если Элемент <> Неопределено Тогда
			Возврат Элемент;
		КонецЕсли;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаНаПриемник) Тогда
		ВставитьСсылкуНаКонвертированныйОбъект(Ссылка, СсылкаНаПриемник, СоответствиеКонвертированныхОбъектов);
		Возврат СсылкаНаПриемник;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции	

Функция ПолучитьСоответствиеПредопределенногоЭлементаДокументыУдостоверяющиеЛичность(Элемент)
	Если Элемент = Справочники.УдалитьДокументыУдостоверяющиеЛичность.ИМНС27 Тогда
		Возврат Справочники.ВидыДокументовФизическихЛиц.ВоенныйБилетОфицераЗапаса;		
	ИначеЕсли Элемент = Справочники.УдалитьДокументыУдостоверяющиеЛичность.ИМНС07 Тогда
		Возврат Справочники.ВидыДокументовФизическихЛиц.ВоенныйБилет;
	ИначеЕсли Элемент = Справочники.УдалитьДокументыУдостоверяющиеЛичность.ИМНС09 Тогда
		Возврат Справочники.ВидыДокументовФизическихЛиц.ДипломатическийПаспорт;
	ИначеЕсли Элемент = Справочники.УдалитьДокументыУдостоверяющиеЛичность.ИМНС22 Тогда
		Возврат Справочники.ВидыДокументовФизическихЛиц.ЗагранпаспортРФ;
	ИначеЕсли Элемент = Справочники.УдалитьДокументыУдостоверяющиеЛичность.ИМНС02 Тогда
		Возврат Справочники.ВидыДокументовФизическихЛиц.ЗагранпаспортСССР;
	ИначеЕсли Элемент = Справочники.УдалитьДокументыУдостоверяющиеЛичность.ИМНС21 Тогда
		Возврат Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ;
	ИначеЕсли Элемент = Справочники.УдалитьДокументыУдостоверяющиеЛичность.ИМНС01 Тогда
		Возврат Справочники.ВидыДокументовФизическихЛиц.ПаспортСССР;
	ИначеЕсли Элемент = Справочники.УдалитьДокументыУдостоверяющиеЛичность.ИМНС26 Тогда
		Возврат Справочники.ВидыДокументовФизическихЛиц.ПаспортМоряка;
	ИначеЕсли Элемент = Справочники.УдалитьДокументыУдостоверяющиеЛичность.ИМНС03 Тогда
		Возврат Справочники.ВидыДокументовФизическихЛиц.СвидетельствоОРождении;
	ИначеЕсли Элемент = Справочники.УдалитьДокументыУдостоверяющиеЛичность.ИМНС04 Тогда
		Возврат Справочники.ВидыДокументовФизическихЛиц.УдостоверениеОфицера;
	ИначеЕсли Элемент = Справочники.УдалитьДокументыУдостоверяющиеЛичность.ИМНС06 Тогда
		Возврат Справочники.ВидыДокументовФизическихЛиц.ПаспортМинморфлота;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
КонецФункции	

Процедура УстановитьКодСправочника(ОбъектПриемник, ДанныеИсточника)
	СтруктураДанныхИсточника = Новый Структура("Код", Неопределено);
	ЗаполнитьЗначенияСвойств(СтруктураДанныхИсточника, ДанныеИсточника);
	Если СтруктураДанныхИсточника.Код <> Неопределено И ОбъектПриемник.Метаданные().ДлинаКода <> 0 Тогда
		ОбъектПриемник.Код = СтруктураДанныхИсточника.Код;	
	КонецЕсли;	
КонецПроцедуры	

Процедура ВставитьСсылкуНаКонвертированныйОбъект(СсылкаИсходногоОбъетка, СсылкаКонвертированногоОбъекта, СоответствиеКонвертированныхОбъектов)
 	СоответствиеКонвертированныхОбъектовПоТипу = СоответствиеКонвертированныхОбъектов.Получить(ТипЗнч(СсылкаИсходногоОбъетка));
	Если СоответствиеКонвертированныхОбъектовПоТипу = Неопределено Тогда
		СоответствиеКонвертированныхОбъектовПоТипу = Новый Соответствие;
		СоответствиеКонвертированныхОбъектов.Вставить(ТипЗнч(СсылкаИсходногоОбъетка), СоответствиеКонвертированныхОбъектовПоТипу);
	КонецЕсли;	

	СоответствиеКонвертированныхОбъектовПоТипу.Вставить(СсылкаИсходногоОбъетка, СсылкаКонвертированногоОбъекта);
КонецПроцедуры	

Функция ПолучитьСсылкуНаКонвертированныйОбъект(Ссылка, СоответствиеКонвертированныхОбъектов)
	СоответствиеКонвертированныхОбъектовПоТипу = СоответствиеКонвертированныхОбъектов.Получить(ТипЗнч(Ссылка));
	Если СоответствиеКонвертированныхОбъектовПоТипу = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат СоответствиеКонвертированныхОбъектовПоТипу.Получить(Ссылка);
	КонецЕсли;	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РАСПРЕДЕЛЕННАЯ ИНФОРМАЦИОННАЯ БАЗА: ОБНОВЛЕНИЕ С БП 2.0

Процедура ОбновитьРИБПриПереходе20На30() Экспорт 
	
	Если ЗначениеЗаполнено(Константы.УдалитьНомерВерсииКонфигурации.Получить()) 
		И ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда 
		// Переход с версии 2.0
		Константы.НастройкаПодчиненногоУзлаРИБЗавершена.Установить(Истина);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПервыйЗапускИнформационнойБазы()
	
	Возврат НЕ Константы.ИспользоватьРазделениеПоОбластямДанных.Получить()
		И НЕ Константы.НеИспользоватьРазделениеПоОбластямДанных.Получить()
		И НЕ Константы.ЭтоАвтономноеРабочееМесто.Получить();
		
КонецФункции

