
////////////////////////////////////////////////////////////////////////////////
// Подсистема "Интернет-поддержка пользователей".
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Определяет, доступна ли текущему пользователю настройка параметров
// подключения к Интернет-поддержке в текущем режиме работы.
//
// Возвращаемое значение:
//	Булево - Истина, если настройка параметров доступна текущему пользователю;
//		Ложь - в противном случае.
//
Функция ДоступнаНастройкаПараметровПодключенияКИнтернетПоддержке() Экспорт
	
	Возврат ИнтернетПоддержкаПользователей.ИспользованиеИнтернетПоддержкиРазрешеноВТекущемРежимеРаботы()
		И Пользователи.ЭтоПолноправныйПользователь(, Истина, Ложь);
	
КонецФункции

// Определяет, доступно ли текущему пользователю выполнение подключения
// Интернет-поддержки: авторизация/регистрация пользователя, регистрация
// программного продукта в соответствии с текущим режимом работы
// и правами пользователя.
//
// Возвращаемое значение:
//	Булево - Истина - подключение Интернет-поддержки доступно,
//		Ложь - в противном случае.
//
Функция ДоступноПодключениеИнтернетПоддержки() Экспорт
	
	Если НЕ ИнтернетПоддержкаПользователей.ИспользованиеИнтернетПоддержкиРазрешеноВТекущемРежимеРаботы() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Пользователи.РолиДоступны("ПодключениеКСервисуИнтернетПоддержки", , Ложь) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Проверка ролей, дающих право подключения ИПП
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.МониторИнтернетПоддержки")
		И Пользователи.РолиДоступны("ИспользованиеМонитораИПП", , Ложь) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Подключение1СТакском")
		И Пользователи.РолиДоступны("ИспользованиеСервиса1СТакском", , Ложь) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
	// Роли ИспользованиеСервиса1СТакском и ИспользованиеМонитораИПП
	// автоматически предоставляют доступ для подключения
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Настройки пользователя, параметры подключения

// Возвращает настройку "НеНапоминатьОбАвторизацииДо".
//
// Возвращаемое значение:
// Дата - дата, до которой не следует напоминать об авторизации в сервисе ИПП
//	при запуске программы.
//
Функция ЗначениеНастройкиНеНапоминатьОбАвторизацииДо() Экспорт
	
	НеНапоминатьОбАвторизацииДо = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ИнтернетПоддержкаПользователей",
		"НеНапоминатьОбАвторизацииДо",
		'00010101');
	
	Возврат НеНапоминатьОбАвторизацииДо;
	
КонецФункции

// Устанавливает настройку "НеНапоминатьОбАвторизацииДо".
//
// Параметры:
//	УстанавливатьНастройку - Булево - установить или сбросить дату
//		для "НеНапоминатьОбАвторизацииДо".
//
Процедура УстановитьНастройкуНеНапоминатьОбАвторизацииДо(УстанавливатьНастройку) Экспорт
	
	СемьДнейВСекундах = 60 * 60 * 24 * 7;
	ЧерезСемьДней = НачалоДня(ТекущаяДатаСеанса() + СемьДнейВСекундах);
	НеНапоминатьОбАвторизацииДо = ?(УстанавливатьНастройку, ЧерезСемьДней, '00010101');
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ИнтернетПоддержкаПользователей",
		"НеНапоминатьОбАвторизацииДо",
		НеНапоминатьОбАвторизацииДо);
	
КонецПроцедуры

// Определяет сетевые параметры механизма Интернет-поддержки.
//
// Возвращаемое значение:
// Структура - структура со свойствами:
//	* ТаймаутСети - Число - таймаут подключения к сервису ИПП;
//
Функция СетевыеПараметрыИнтернетПоддержки() Экспорт
	
	Результат = Новый Структура;
	
	УстановитьПривилегированныйРежим(Истина);
	Результат.Вставить("ТаймаутСети", Константы.ТаймаутПодключенияКСервисуИнтернетПоддержки.Получить());
	
	Возврат Результат;
	
КонецФункции

// Определяет сторону (клиент или сервер 1С:Предприятия), на которой должно
// выполняться взаимодействие с веб-сервисом ИПП.
//
// Параметры:
// СетевыеПараметрыИПП - Структура - в параметре возврщаются сетевые
//	параметры ИПП (см. функцию СетевыеПараметрыИнтернетПоддержки())
//
// Возвращаемое значение:
//	Булево - Истина, если подключение осуществляется на сервере ИБ;
//
Функция ПодключениеКСервисуИППССервера1СПредприятия(СетевыеПараметрыИПП = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		// В файловом варианте обращение должно выполняться из клиента 1С:Предприятия
		ОбращениеССервера = Ложь;
	Иначе
		ОбращениеССервера = Константы.ПодключениеКСервисуИППССервера.Получить();
	КонецЕсли;
	
	Если НЕ ОбращениеССервера Тогда
		СетевыеПараметрыИПП = СетевыеПараметрыИнтернетПоддержки();
	КонецЕсли;
	
	Возврат ОбращениеССервера;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Служебная Функция для определения зарегистрирована ли текущая конфигурация
// в сервисе Интернет-поддержки.
// Предназначена для выполнения на стороне сервера 1С:Предприятия
// в клиент-серверном варианте работы (если взаимодействие с веб-сервисом
// ИПП осуществляется на стороне кластера серверов) или в режиме веб-клиента.
//
// Параметры:
//	ОбращениеССервера - Булево - выходной параметр - Истина, если
//		обращение к сервису ИПП осуществляется с сервера 1С:Предприятия;
//	ПараметрыИПП - Структура - если обращение выполняется из клиента,
//		то в структуре возвращаются необходимые параметры для
//		работы на клиентской стороне (см. функцию СетевыеПараметрыИнтернетПоддержки());
//	ОшибкаОбращенияКВебСервису - Булево - выходной параметр - Истина,
//		если в процессе обращения к сервису ИПП произошла ошибка
//		и "зарегистрированность" конфигурации проверить не удалось;
//
// Возвращаемое значение:
//	Булево - Истина, если конфигурация зарегистрирована в сервисе ИПП,
//		Ложь - если не зарегистрирована или в процессе обращения к сервису ИПП
//		произошла ошибка;
//
Функция КонфигурацияЗарегистрированаВСервисеИПП(
	ОбращениеССервера,
	ПараметрыИПП,
	ОшибкаОбращенияКВебСервису = Ложь) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
		ОбращениеССервера = Истина;
	Иначе
		ОбращениеССервера = ПодключениеКСервисуИППССервера1СПредприятия(ПараметрыИПП);
	КонецЕсли;
	
	Если ОбращениеССервера Тогда
		Возврат ИнтернетПоддержкаПользователейКлиентСервер.КонфигурацияЗарегистрированаВСервисеИПП(
			ОшибкаОбращенияКВебСервису);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Создает новый контекст взаимодействия с сервисом ИПП, в рамках которого
// выполняются все команды сервиса ИПП.
//
// Параметры:
//	МестоЗапуска - Строка - имя команды, использованной для запуска
//		механизма ИПП;
//	ПараметрыИПП - Структура - см. функцию ПараметрыСозданияКонтекста().
//	ПовторныйЗапуск - Булево - Истина, если запуск выполняется повторно.
//	СтартовыеПараметры - Структура, Неопределено - параметры, переданные при
//		запуске механизма.
//	ПриНачалеРаботыСистемы - Булево - признак начала бизнес-процесса при
//		при начале работы системы.
//
// Возвращаемое значение:
// Структура - структура с полями:
//	* ОписаниеСервисаИПП - Структура - см. функцию
//		ИнтернетПоддержкаПользователейКлиентСервер.НовыйОписаниеСервисаИПП()
//	* СетевыеПараметрыИПП - Структура - сетевые параметры ИПП, присутствует
//			только при подключении из клиентского приложения;
//		** ТаймаутСети - Число - таймаут подключения к сервису ИПП;
//	* КСКонтекст - Структура - клиент-серверный контекст взаимодействия;
//		** ОсновныеПараметры - Структура - см. функцию НовыйОсновныеПараметрыКонтекста();
//		** КонтекстРегистрации - Структура, Неопределено - контекст регистрации
//			программного продукта;
//		** Логин - Строка - Логин, с которым авторизовался пользователь ИПП;
//		** Пароль - Строка - Пароль,  с которым авторизовался пользователь ИПП;
//		** СессионныеПараметры - Соответствие - сеансовые данные, хранимые и
//			в сеансе взаимодействия с сервисом ИПП;
//		** СетевыеПараметрыИПП - Структура - сетевые параметры ИПП, присутствует
//				только при подключении из клиентского приложения;
//			*** ТаймаутСети - Число - таймаут подключения к сервису ИПП;
//		** ПриНачалеРаботыСистемы - Булево - запуск выполняется при начале работы системы;
//	* СтартовыеПараметрыМеханизма - Структура - параметры, с которыми был
//		выполнен запуск механизма. Копия параметра СтартовыеПараметры.
//
Функция НовыйКонтекстВзаимодействия(
	Знач МестоЗапуска,
	Знач ПовторныйЗапуск,
	Знач СтартовыеПараметры,
	Знач ПриНачалеРаботыСистемы = Ложь) Экспорт
	
	Результат = Новый Структура;
	
	ПараметрыИПП = ПараметрыСозданияКонтекста(МестоЗапуска, ПриНачалеРаботыСистемы);
	
	СтруктураЗапуска = ИнтернетПоддержкаПользователейКлиентСервер.ОпределитьВозможностьЗапускаПоМестуИПараметрам(
		МестоЗапуска,
		ПараметрыИПП);
	
	Если СтруктураЗапуска <> Неопределено Тогда
		// Если запуск запрещен, тогда возврат
		Результат.Вставить("УправляющаяСтруктураЗапуска", СтруктураЗапуска);
		Возврат Результат;
	КонецЕсли;
	
	// Создание контекста, используемого на клиенте и на сервере
	КСКонтекст = Новый Структура;
	КСКонтекст.Вставить("КонтекстРегистрации"   , Неопределено);
	КСКонтекст.Вставить("Логин"                 , "");
	КСКонтекст.Вставить("СессионныеПараметры"   , Новый Соответствие);
	КСКонтекст.Вставить("ПриНачалеРаботыСистемы", ПриНачалеРаботыСистемы);
	
	ОсновныеПараметры = НовыйОсновныеПараметрыКонтекста();
	ОсновныеПараметры.МестоЗапуска          = МестоЗапуска;
	ОсновныеПараметры.ИмяWSОпределения      = ИнтернетПоддержкаПользователейКлиентСервер.ИмяWSОпределения();
	ОсновныеПараметры.URIСервиса            = ИнтернетПоддержкаПользователейКлиентСервер.ИмяURIСервиса();
	ОсновныеПараметры.ПовторныйЗапуск       = ПовторныйЗапуск;
	ОсновныеПараметры.ОбращениеССервера     = ПараметрыИПП.ОбращениеССервера;
	
	СетевыеПараметрыИПП = Новый Структура;
	СетевыеПараметрыИПП.Вставить("ТаймаутСети", ПараметрыИПП.ТаймаутСети);
	
	Если ОсновныеПараметры.ОбращениеССервера Тогда
		
		ОсновныеПараметры.Вставить("СетевыеПараметрыИПП", СетевыеПараметрыИПП);
		
		// Создание кэша WSDL-описаний. Необходим для обращения с сервера,
		// т.к. на при каждом вызове с сервера содается новое подключение
		// к сервису.
		// Кэш очищается при завершении бизнес-процесса.
		ОсновныеПараметры.Вставить("КэшWSDLОписаний", Новый Соответствие);
		
	Иначе
		Результат.Вставить("ОписаниеСервисаИПП" , Неопределено);
		Результат.Вставить("СетевыеПараметрыИПП", СетевыеПараметрыИПП);
	КонецЕсли;
	
	ЗаписатьСтартовыеПараметрыКонтекста(СтартовыеПараметры, КСКонтекст);
	ЗаписатьСтартовыеПараметрыКонтекста(ПараметрыИПП.ОбщиеСтартовыеПараметры, КСКонтекст);
	
	КСКонтекст.Вставить("ОсновныеПараметры", ОсновныеПараметры);
	
	Результат.Вставить("КСКонтекст"    , КСКонтекст);
	Результат.Вставить("ФормыОбработки", Новый Соответствие);
	
	// Сохранение в контексте взаимодействия стартовых параметров механизма.
	// Необходимы для повтора подключения из формы ошибки обращения к сервису ИПП
	Результат.Вставить("СтартовыеПараметрыМеханизма", СтартовыеПараметры);
	
	// Доп. обработчик бизнес-процесса
	СерверныйОбработчик = ИнтернетПоддержкаПользователей.СерверныйОбработчикБизнесПроцесса(
		МестоЗапуска,
		"ПриСозданииКонтекстаВзаимодействия");
	
	Если СерверныйОбработчик <> Неопределено Тогда
		СерверныйОбработчик.ПриСозданииКонтекстаВзаимодействия(Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает все необходимые для работы с сервисом Интернет-поддержки
// параметры за одно обращение к серверу.
// Для минимизации объема передаваемой между клиентом и сервером информации
// возвращаются только необходимые параметры в зависимости от места вызова
// (клиент или сервер).
//
// Параметры:
//	МестоЗапуска - Строка - кнопка старта механизма ИПП;
//	ПриНачалеРаботыСистемы - Булево - признак начала бизнес-процесса при
//		при начале работы системы.
//
// Возвращаемое значение:
// Структура - структура с полями:
//	* МестоЗапуска - Строка - точка входа бизнес-процесса;
//	* ПриНачалеРаботыСистемы - Булево - Истина, если запуск бизнес-процесса
//		выполняется при начале работы системы;
//	* ИспользоватьИнтернетПоддержку - Булево - Истина, если разрешено
//		использование ИПП для текущего режима работы ИБ;
//	* ЗапускРазрешен - Булево - Истина, если текущему пользователю разрешен
//		запуск ИПП;
//	* ИспользоватьИнформационноеОкно - Булево - Истина, если в конфигурации
//		предусмотрено использование информационного окна;
//	* ТаймаутСети - Число - таймаут подключения к сервису ИПП в секундах;
//	* ОбращениеССервера - Булево - Истина, если соединение с сервисом ИПП
//		осуществляется на сервере информационной базы;
//	* НеНапоминатьОбАвторизацииДо - Дата - дата, по которую включительно
//		необходимо отключить напоминание об авторизации в ИПП при
//		старте программы
//	* ОбщиеСтартовыеПараметры - Структура - стартовые параметры механизма,
//		зачитанные из регистра сведений ПараметрыИнтернетПоддержкиПользователей.
//
Функция ПараметрыСозданияКонтекста(МестоЗапуска, ПриНачалеРаботыСистемы)
	
	Результат = Новый Структура;
	
	Результат.Вставить("МестоЗапуска"          , МестоЗапуска);
	Результат.Вставить("ПриНачалеРаботыСистемы", ПриНачалеРаботыСистемы);
	
	// Проверить использование механизма Интернет-поддержки
	ИспользоватьИнтернетПоддержку = ИнтернетПоддержкаПользователей.ИспользованиеИнтернетПоддержкиРазрешеноВТекущемРежимеРаботы();
	Результат.Вставить("ИспользоватьИнтернетПоддержку", ИспользоватьИнтернетПоддержку);
	
	Если ИнтернетПоддержкаПользователейКлиентСервер.ЭтоБазовыйБизнесПроцесс(МестоЗапуска) Тогда
		
		// В базовой функциональности доступен только бизнес-процесс
		// по точке входа "connectIPP"
		Результат.Вставить("ЗапускРазрешен", ДоступноПодключениеИнтернетПоддержки());
		
	Иначе
		
		Результат.Вставить("ЗапускРазрешен", Истина);
		// Вызов обработчика бизнес-процесса
		СерверныйОбработчик = ИнтернетПоддержкаПользователей.СерверныйОбработчикБизнесПроцесса(
			МестоЗапуска,
			"ПараметрыСозданияКонтекста");
		
		Если СерверныйОбработчик <> Неопределено Тогда
			ПрерватьОбработку = Ложь;
			СерверныйОбработчик.ПараметрыСозданияКонтекста(Результат, ПрерватьОбработку);
			Если ПрерватьОбработку Тогда
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Результат.ЗапускРазрешен Тогда
		Возврат Результат;
	КонецЕсли;
	
	ЭтоФайловаяИнформационнаяБаза = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбращениеССервера = Неопределено;
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
		// В веб-клиенте обращение к сервису ИПП должно осуществляться
		// только с сервера 1С:Предприятия
		ОбращениеССервера = Истина;
	Иначе
		Если ЭтоФайловаяИнформационнаяБаза Тогда
			// В файловом варианте обращение к сервису требуется выполнять
			// из клиентского приложения
			ОбращениеССервера = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Выборка необходимых параметров из ИБ
	ЗапросПараметров = Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТаймаутПодключенияКСервисуИнтернетПоддержки.Значение = 0 ТОГДА 30
	|		ИНАЧЕ ТаймаутПодключенияКСервисуИнтернетПоддержки.Значение
	|	КОНЕЦ КАК ТаймаутПодключенияКСервисуИнтернетПоддержки"
	+ ?(ОбращениеССервера <> Неопределено,
		"",
		", ПодключениеКСервисуИППССервера.Значение КАК ПодключениеКСервисуИППССервера")
	+ " ИЗ
	|	Константа.ТаймаутПодключенияКСервисуИнтернетПоддержки КАК ТаймаутПодключенияКСервисуИнтернетПоддержки"
	+ ?(ОбращениеССервера <> Неопределено,
		"",
		", Константа.ПодключениеКСервисуИППССервера КАК ПодключениеКСервисуИППССервера")
	+ ";
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыИнтернетПоддержкиПользователей.Имя,
	|	ПараметрыИнтернетПоддержкиПользователей.Значение
	|ИЗ
	|	РегистрСведений.ПараметрыИнтернетПоддержкиПользователей КАК ПараметрыИнтернетПоддержкиПользователей");
	
	Пакет = ЗапросПараметров.ВыполнитьПакет();
	ВыборкаКонстант = Пакет[0].Выбрать();
	ВыборкаКонстант.Следующий();
	Результат.Вставить("ТаймаутСети", ВыборкаКонстант.ТаймаутПодключенияКСервисуИнтернетПоддержки);
	Если ОбращениеССервера = Неопределено Тогда
		ОбращениеССервера = ВыборкаКонстант.ПодключениеКСервисуИППССервера;
	КонецЕсли;
	
	Результат.Вставить("ОбращениеССервера", ОбращениеССервера);
	
	// Заполнение общих стартовых параметров
	ВыборкаСтартовыхПараметров = Пакет[1].Выбрать();
	ОбщиеСтартовыеПараметры = Новый Структура;
	Пока ВыборкаСтартовыхПараметров.Следующий() Цикл
		Если НЕ ОбщиеСтартовыеПараметры.Свойство(ВыборкаСтартовыхПараметров.Имя) Тогда
			ОбщиеСтартовыеПараметры.Вставить(ВыборкаСтартовыхПараметров.Имя, ВыборкаСтартовыхПараметров.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Результат.Вставить("ОбщиеСтартовыеПараметры", ОбщиеСтартовыеПараметры);
	
	Возврат Результат;
	
КонецФункции

// Определяет состав основных параметров контекста взаимодействия с сервисом
// ИПП.
//
// Возвращаемое значение:
// Структура - структура с полями:
//	* ИмяWSОпределения - Строка - адрес WSDL-описания сервиса ИПП;
//	* URIСервиса - Строка - URI пространства имен сервиса;
//	* МестоЗапуска - Строка - имя кнопки вызова сервиса ИПП;
//	* ПовторныйЗапуск - Булево - Истина, если выполняется повторный запуск
//		механизма ИПП;
//	* ОбращениеССервера - Булево - Истина, если соединение с сервисом ИПП
//		устанавливается на сервере ИБ;
//
Функция НовыйОсновныеПараметрыКонтекста()
	
	Результат = Новый Структура();
	Результат.Вставить("ИмяWSОпределения" , "");
	Результат.Вставить("URIСервиса"       , "");
	Результат.Вставить("МестоЗапуска"     , "");
	Результат.Вставить("ПовторныйЗапуск"  , Ложь);
	Результат.Вставить("ОбращениеССервера", Истина);
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для обработки команд сервиса

// Получение команд сервиса ИПП и выполнение команд сервиса или возврат
// управления клиентской стороне.
//
// Параметры:
//	КСКонтекст - Структура - клиент-серверный контекст взаимодействия с
//		сервисом ИПП (см. функцию НовыйКонтекстВзаимодействия);
//	ПараметрыЗапроса - Массив - массив параметров запроса, передаваемых
//		сервису ИПП;
//	КонтекстОбработчика - Структура - см. функцию
//		ИнтернетПоддержкаПользователейКлиентСервер.НовыйКонтекстОбработчикаКоманд()
//	Продолжение - Булево - Истина, если продолжение выполнения команд без
//		обращения к сервису ИПП;
//	ПараметрыОбращенияКСервисуИПП - Структура - дополнительные параметры
//		обращения к сервису ИПП;
//	МассивСессионныхПараметровЗапроса - Массив - массив имен сессионных параметров,
//		передаваемых сервису ИПП;
//	СоздаваемыйКонтекстВзаимодействия - Структура - в параметре возвращается
//		контекст взаимодействия с сервисом ИПП, если он не задан. Используется
//		для исключения дополнительного серверного вызова при первом обращении к
//		сервису ИПП;
//	ПараметрыСозданияКонтекста - Структура - дополнительные параметры создания
//		контекста взаимодействия с сервисом ИПП.
//
Процедура ОбработкаКомандСервиса(
	КСКонтекст,
	Знач ПараметрыЗапроса,
	КонтекстОбработчика,
	Знач Продолжение,
	Знач ПараметрыОбращенияКСервисуИПП = Неопределено,
	Знач МассивСессионныхПараметровЗапроса = Неопределено,
	СоздаваемыйКонтекстВзаимодействия = Неопределено,
	Знач ПараметрыСозданияКонтекста = Неопределено) Экспорт
	
	Если КСКонтекст = Неопределено Тогда
		
		// Создание контекста взаимодействия с сервисом ИПП при первом запуске
		СоздаваемыйКонтекстВзаимодействия = НовыйКонтекстВзаимодействия(
			ПараметрыСозданияКонтекста.МестоЗапуска,
			ПараметрыСозданияКонтекста.ПовторныйЗапуск,
			ПараметрыСозданияКонтекста.СтартовыеПараметры);
		
		Если СоздаваемыйКонтекстВзаимодействия.Свойство("УправляющаяСтруктураЗапуска")
			ИЛИ НЕ СоздаваемыйКонтекстВзаимодействия.КСКонтекст.ОсновныеПараметры.ОбращениеССервера Тогда
			Возврат;
		КонецЕсли;
		
		КСКонтекст = СоздаваемыйКонтекстВзаимодействия.КСКонтекст;
		
	КонецЕсли;
	
	ОсновныеПараметры = КСКонтекст.ОсновныеПараметры;
	
	ОбработатьОтвет = Истина;
	
	Если ТипЗнч(ПараметрыОбращенияКСервисуИПП) = Тип("Структура") Тогда
		ПараметрыОбращенияКСервисуИПП.Свойство("ОбработатьОтвет", ОбработатьОтвет);
	КонецЕсли;
	
	// При продолжении обращение к веб-сервису не выполняется
	Если НЕ Продолжение Тогда
		
		// Всегда будет хотя бы один параметр запроса
		Если ТипЗнч(ПараметрыЗапроса) <> Тип("Массив") Тогда
			ПараметрыЗапроса = Новый Массив;
		КонецЕсли;
		
		ИнтернетПоддержкаПользователейКлиентСервер.ДобавитьСессионныеПараметрыКЗапросу(
			КСКонтекст,
			МассивСессионныхПараметровЗапроса,
			ПараметрыЗапроса);
		
		ДобавитьКомандыСервиса(ОсновныеПараметры, ПараметрыЗапроса, КонтекстОбработчика);
		
		Если ОбработатьОтвет <> Истина Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	// Пока нет ошибки, препятствующей продолжению выполнения команд,
	// выполнять команды сервера
	Попытка
		
		// Пока есть команды для выполнения
		Пока КонтекстОбработчика.Команды.Количество() > 0
			И НЕ КонтекстОбработчика.ПроизошлаОшибка
			И НЕ КонтекстОбработчика.ВыполнитьОстановку Цикл
			
			ТекущаяКоманда = КонтекстОбработчика.Команды[0];
			ТипКоманды = ИнтернетПоддержкаПользователейКлиентСервер.ТипКоманды(
				ТекущаяКоманда,
				ОсновныеПараметры.ОбращениеССервера,
				ОсновныеПараметры.МестоЗапуска);
			
			// Определение контекста выполнения - на сервере или на клиенте
			Если ТипКоманды = -1 Тогда
				
				// Если тип команды определить не удалось, тогда извлечь ее из стека и
				// продолжить выполнение
				КонтекстОбработчика.Команды.Удалить(0);
				Продолжить;
				
			ИначеЕсли ТипКоманды = 0 Тогда
				
				// Извлечение команды из стека и выполнение ее на сервере информационной базы
				КонтекстОбработчика.Команды.Удалить(0);
				ВыполнитьКомандуСервиса(КСКонтекст, ТекущаяКоманда, КонтекстОбработчика);
				
			Иначе
				
				// Возврат управления клиентскому приложению
				Возврат;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение
		
		КонтекстОбработчика.ПроизошлаОшибка = Истина;
		КонтекстОбработчика.ДействияПриОшибкеДляСервера.Добавить("СоздатьЗаписьВЖурналеРегистрации");
		КонтекстОбработчика.ДействияПриОшибкеДляСервера.Добавить("ПрерватьБизнесПроцесс");
		КонтекстОбработчика.ПолноеОписаниеОшибки = НСтр("ru = 'Произошло необрабатываемое исключение.'")
			+ " " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		КонтекстОбработчика.ПользовательскоеОписаниеОшибки =
			НСтр("ru = 'Неизвестная ошибка. Подробнее см. в журнале регистрации.'");
		КонтекстОбработчика.ДействиеПриОшибкеДляКлиента = "ПоказатьСообщение";
		
	КонецПопытки;
	
	// Если произошла ошибка, тогда завершить сеанс Интернет-поддержки с обработкой ошибок.
	Если КонтекстОбработчика.ПроизошлаОшибка Тогда
		ЗавершитьСеансИнтернетПоддержки(КСКонтекст, КонтекстОбработчика);
	КонецЕсли;
	
КонецПроцедуры

// Обращение к сервису ИПП и добавление команд в стек команд контекста
// обработчика команд
//
Процедура ДобавитьКомандыСервиса(
	ОсновныеПараметры,
	ДополнительныеПараметры,
	КонтекстОбработчика = Неопределено) Экспорт
	
	КэшWSDLОписаний = Неопределено;
	ОсновныеПараметры.Свойство("КэшWSDLОписаний", КэшWSDLОписаний);
	
	Попытка
		
		ОписаниеСервисаИППНаСервере = ИнтернетПоддержкаПользователейКлиентСервер.НовыйОписаниеСервисаИПП(
			ОсновныеПараметры.ИмяWSОпределения,
			ОсновныеПараметры.СетевыеПараметрыИПП,
			КэшWSDLОписаний);
		
	Исключение
		
		Если ТипЗнч(КонтекстОбработчика) = Тип("Структура") Тогда
			КонтекстОбработчика.ПроизошлаОшибка      = Истина;
			КонтекстОбработчика.ПолноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			КонтекстОбработчика.ДействияПриОшибкеДляСервера.Добавить("СоздатьЗаписьВЖурналеРегистрации");
			КонтекстОбработчика.ДействиеПриОшибкеДляКлиента = "ОтобразитьФормуОтсутствуетПодключение";
			КонтекстОбработчика.ПользовательскоеОписаниеОшибки =
				НСтр("ru = 'Ошибка при подключении к сервису Интернет-поддержки'");
		КонецЕсли;
		
		Возврат;
		
	КонецПопытки;
	
	Попытка
		
		ИнтернетПоддержкаПользователейКлиентСервер.ДобавитьКомандыСервиса(
			ОписаниеСервисаИППНаСервере,
			ДополнительныеПараметры,
			КонтекстОбработчика,
			ОсновныеПараметры);
		
		// После первого вызова необходимо отключить таймаут сети, т.к.
		// проверка обращения по таймауту уже выполнена
		Если ОсновныеПараметры.СетевыеПараметрыИПП.ТаймаутСети <> 0 Тогда
			ОсновныеПараметры.СетевыеПараметрыИПП.ТаймаутСети = 0;
			ИнтернетПоддержкаПользователейКлиентСервер.ИзменитьТаймаутОбращения(ОписаниеСервисаИППНаСервере, 0);
		КонецЕсли;
		
	Исключение
		
		Если ТипЗнч(КонтекстОбработчика) = Тип("Структура") Тогда
			КонтекстОбработчика.ПроизошлаОшибка      = Истина;
			КонтекстОбработчика.ПолноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			КонтекстОбработчика.ДействияПриОшибкеДляСервера.Добавить("СоздатьЗаписьВЖурналеРегистрации");
			КонтекстОбработчика.ДействиеПриОшибкеДляКлиента = "ОтобразитьФормуОтсутствуетПодключение";
			КонтекстОбработчика.ПользовательскоеОписаниеОшибки =
				НСтр("ru = 'Ошибка при получении данных с сервера Интернет-поддержки.'");
		КонецЕсли;
		
	КонецПопытки;
	
КонецПроцедуры

// Диспетчер выполнения команд сервиса ИПП на стороне сервера 1С:Предприятия
//
Процедура ВыполнитьКомандуСервиса(КСКонтекст, СтруктураКоманды, КонтекстОбработчика)
	
	ИмяКоманды = Неопределено;
	СтруктураКоманды.Свойство("ИмяКоманды", ИмяКоманды);
	
	Если ИмяКоманды = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяКоманды = "store.get" Тогда
		ИнтернетПоддержкаПользователейКлиентСервер.ВыполнениеКомандыПрочитатьПараметры(
			Новый Структура("КСКонтекст", КСКонтекст),
			СтруктураКоманды,
			КонтекстОбработчика,
			Истина);
		
	ИначеЕсли ИмяКоманды = "store.put" Тогда
		ИнтернетПоддержкаПользователейКлиентСервер.ВыполнениеКомандыЗаписьПараметров(
			КСКонтекст,
			СтруктураКоманды,
			КонтекстОбработчика);
		
	ИначеЕсли ИмяКоманды = "store.delete" Тогда
		ИнтернетПоддержкаПользователейКлиентСервер.УдалитьПараметрыКонтекста(
			КСКонтекст,
			СтруктураКоманды,
			КонтекстОбработчика);
		
	ИначеЕсли ИмяКоманды = "launchservice" Тогда
		ИзменитьБизнеспроцесс(КСКонтекст, СтруктураКоманды, КонтекстОбработчика);
		
	ИначеЕсли ИмяКоманды = "store.putorganizations" Тогда
		ИнтернетПоддержкаПользователейКлиентСервер.ЗаписатьСписокОрганизаций(КСКонтекст, СтруктураКоманды);
		
	ИначеЕсли ИмяКоманды = "store.putadressclassifier" Тогда
		ИнтернетПоддержкаПользователейКлиентСервер.ЗаписатьАдресныйКлассификатор(КСКонтекст, СтруктураКоманды);
		
	Иначе
		
		// Обработка команды через доп. обработчик бизнес-процесса
		СерверныйОбработчик = ИнтернетПоддержкаПользователей.СерверныйОбработчикБизнесПроцесса(
			КСКонтекст.ОсновныеПараметры.МестоЗапуска,
			"ВыполнитьКомандуСервиса");
		
		Если СерверныйОбработчик <> Неопределено Тогда
			СерверныйОбработчик.ВыполнитьКомандуСервиса(КСКонтекст, СтруктураКоманды, КонтекстОбработчика);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет команду изменения адреса текущего сервиса ИПП.
//
Процедура ИзменитьБизнеспроцесс(КСКонтекст, СтруктураКоманды, КонтекстОбработчика)
	
	ОсновныеПараметры = КСКонтекст.ОсновныеПараметры;
	
	ПараметрыКоманды = Неопределено;
	СтруктураКоманды.Свойство("Параметры", ПараметрыКоманды);
	
	БизнесПроцесс = Неопределено;
	ИмяURI        = Неопределено;
	
	Для каждого ПараметрКоманды Из ПараметрыКоманды Цикл
		
		Если ПараметрКоманды.Свойство("bp", БизнесПроцесс) Тогда
			ОсновныеПараметры.ИмяWSОпределения = БизнесПроцесс;
		КонецЕсли;
		
		Если ПараметрКоманды.Свойство("nameURI", ИмяURI) Тогда
			ОсновныеПараметры.URIСервиса = ИмяURI;
		КонецЕсли;
		
	КонецЦикла;
	
	// Добавление номера сессии
	ПараметрыЗапроса = Новый Массив;
	ЗначениеПараметра = ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(
		КСКонтекст,
		"session_id");
	
	СтруктураЗначений = Новый Структура("Имя, БизнесПроцесс, Значение, ОбластьВидимости", 
		"session_id",
		ОсновныеПараметры.ИмяWSОпределения,
		ЗначениеПараметра,
		"sessionParameter");
	
	ПараметрыЗапроса.Добавить(СтруктураЗначений);
	
	ОсновныеПараметры = КСКонтекст.ОсновныеПараметры;
	
	// Изменение бизнес-процесса на веб-сервере.
	// Будет создано новое подключение к сервису
	ДобавитьКомандыСервиса(ОсновныеПараметры, ПараметрыЗапроса, КонтекстОбработчика);
	
КонецПроцедуры

// Завершение сеанса Интернет-поддержки на стороне сервера 1С:Предпирятия.
//
Процедура ЗавершитьСеансИнтернетПоддержки(КСКонтекст, КонтекстОбработчика) Экспорт
	
	ОсновныеПараметры = КСКонтекст.ОсновныеПараметры;
	
	КоличествоКоманд = КонтекстОбработчика.ДействияПриОшибкеДляСервера.Количество();
	
	НомерКоманды = 0;
	Пока НомерКоманды < КонтекстОбработчика.ДействияПриОшибкеДляСервера.Количество() Цикл
		
		ДействиеВыполнено = Ложь;
		Действие = КонтекстОбработчика.ДействияПриОшибкеДляСервера[НомерКоманды];
		Если Действие = "СоздатьЗаписьВЖурналеРегистрации" Тогда
			
			Если НЕ ПустаяСтрока(КонтекстОбработчика.ПолноеОписаниеОшибки) Тогда
				ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
					КонтекстОбработчика.ПолноеОписаниеОшибки);
			КонецЕсли;
			
			ДействиеВыполнено = Истина;
			
		ИначеЕсли Действие = "ПрерватьБизнесПроцесс" Тогда
			
			Если ОсновныеПараметры.ОбращениеССервера Тогда
				ЗавершитьБизнесПроцесс(КСКонтекст);
				ДействиеВыполнено = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДействиеВыполнено Тогда
			КонтекстОбработчика.ДействияПриОшибкеДляСервера.Удалить(НомерКоманды);
		Иначе
			НомерКоманды = НомерКоманды + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	// Если какие-либо действия не были выполнены на сервере, тогда они будут возвращены
	// на клиентскую сторону для дальнейшего выполнения.
	
КонецПроцедуры

// Отправка оповещения сервису ИПП о завершении сеанса ИПП.
//
Процедура ЗавершитьБизнесПроцесс(КСКонтекст)
	
	Попытка
		
		ОсновныеПараметры = КСКонтекст.ОсновныеПараметры;
		
		ПараметрыЗакрытияБП = Новый Массив;
		ПараметрыЗакрытияБП.Добавить(Новый Структура("Имя, Значение", "CloseBP", "true"));
		
		ИнтернетПоддержкаПользователейКлиентСервер.ДобавитьСессионныеПараметрыКЗапросу(
			КСКонтекст,
			,
			ПараметрыЗакрытияБП);
		
		ДобавитьКомандыСервиса(
			ОсновныеПараметры,
			ПараметрыЗакрытияБП,
			Неопределено);
		
	Исключение
		// Обработка ответа сервиса не требуется, т.к. сервер просто оповещается
		// о закрытии бизнес-процесса для освобождения ресурсов
	КонецПопытки;
	
	КэшWSDLОписаний = Неопределено;
	ОсновныеПараметры.Свойство("КэшWSDLОписаний", КэшWSDLОписаний);
	ОчиститьКэшWSDLОписаний(КэшWSDLОписаний);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с параметрами ИПП

// Сохранение стартовых параметров при в сессионных параметрах при запуске ИПП
//
Процедура ЗаписатьСтартовыеПараметрыКонтекста(Знач СтартовыеПараметрыСтруктура, КСКонтекст)
	
	Если СтартовыеПараметрыСтруктура <> Неопределено Тогда
		
		ТипСтрока = Тип("Строка");
		Для каждого ПараметрВСтруктуре Из СтартовыеПараметрыСтруктура Цикл
			
			Параметр = ИнтернетПоддержкаПользователейКлиентСервер.НовыйПараметрИПП(
				ПараметрВСтруктуре.Ключ,
				ПараметрВСтруктуре.Значение,
				"startUp");
			
			КСКонтекст.СессионныеПараметры.Вставить(ПараметрВСтруктуре.Ключ, Параметр);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет запись общих стартовых параметров в регистр сведений
// "ПараметрыИнтернетПоддержкиПользователей"
//
Процедура ЗаписатьОбщиеСтартовыеПараметрыВРСИПП(Знач ОбщиеСтартовыеПараметры) Экспорт
	
	Для каждого КлючЗначение Из ОбщиеСтартовыеПараметры Цикл
		МенеджерЗаписи = РегистрыСведений.ПараметрыИнтернетПоддержкиПользователей.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Имя          = КлючЗначение.Ключ;
		МенеджерЗаписи.Значение     = КлючЗначение.Значение;
		МенеджерЗаписи.Записать(Истина);
	КонецЦикла;
	
КонецПроцедуры

// Удаление параметров из регистра сведений
// ПараметрыИнтернетПоддержкиПользователей
//
// Параметры:
//	УдаляемыеИзРС - Массив - массив строк - имена удаляемых параметров
//
Процедура УдалитьПараметрыИзРегистра(Знач УдаляемыеИзРС) Экспорт
	
	Для каждого КлючЗначение Из УдаляемыеИзРС Цикл
		НаборЗаписей = РегистрыСведений.ПараметрыИнтернетПоддержкиПользователей.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Имя.Установить(КлючЗначение.Ключ);
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Очистка настроек ИПП текущего пользователя.
//
Процедура ОчиститьНастройкиИПППользователя() Экспорт
	
	// Вызов обработчиков дополнительных подсистем
	СерверныеОбработчики = ИнтернетПоддержкаПользователейСлужебныйПовтИсп.ОбработчикиСобытий().Сервер;
	ИменаМодулей = СерверныеОбработчики.ОчиститьНастройкиИПППользователя;
	
	Для каждого ИмяМодуля Из ИменаМодулей Цикл
		МодульОбработчика = ОбщегоНазначения.ОбщийМодуль(ИмяМодуля);
		Если МодульОбработчика = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		МодульОбработчика.ОчиститьНастройкиИПППользователя();
	КонецЦикла;
	
	// Общая обработка выхода пользователя
	Попытка
		ИнтернетПоддержкаПользователейПереопределяемый.ПриВыходеПользователяИзИнтернетПоддержки();
	Исключение
		СообщениеОбОшибке = НСтр("ru = 'Ошибка при обработке выхода пользователя из Интернет-поддержки. %1'");
		СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке,
			"%1",
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации();
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Дополнительные служебные процедуры и функции

// Отправка электронного письма в службу технической поддержки Веб-ИТС.
//
Функция ОтправитьЭлектронноеПисьмоЧерезСервис(Знач СтруктураСообщения, СетевыеПараметрыИПП) Экспорт
	
	Возврат ИнтернетПоддержкаПользователейКлиентСервер.ОтправитьЭлектронноеПисьмоЧерезСервис(
		СтруктураСообщения,
		СетевыеПараметрыИПП);
	
КонецФункции

// Очистка кэша WSDL-описаний на стороне сервера 1С:Предприятия. Выполняется
// удаление сохраненных WSDL-описаний из временного хранилища.
//
Процедура ОчиститьКэшWSDLОписаний(КэшWSDLОписаний) Экспорт
	
	Если КэшWSDLОписаний <> Неопределено Тогда
		// Удаление из временного хранилища текстов WSDL-описаний
		Для каждого КлючЗначение Из КэшWSDLОписаний Цикл
			УдалитьИзВременногоХранилища(КлючЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	КэшWSDLОписаний.Очистить();
	
КонецПроцедуры

// Возвращается имя события журнала регистрации для записи ошибок
// Интернет-поддержки пользователей.
//
// Возвращаемое значение:
//	Строка - имя события ошибки Интернет-поддержки.
//
Функция СобытиеЖурналаРегистрацииИнтернетПоддержкаПользователейОшибка()
	
	Возврат НСтр("ru = 'Интернет-поддержка пользователей.Ошибка'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

// Возвращается имя события журнала регистрации для записи информационных
// сообщений Интернет-поддержки пользователей.
//
// Возвращаемое значение:
//	Строка - имя события информационного сообщения Интернет-поддержки.
//
Функция СобытиеЖурналаРегистрацииИнтернетПоддержкаПользователейИнформация()
	
	Возврат НСтр("ru = 'Интернет-поддержка пользователей.Информация'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

// Записывает в журнал регистрации описание ошибки
// с именем события "Интернет-поддержка пользователей.Ошибка".
//
// Параметры:
//	Ошибка - Строка - строковое представление ошибки.
//	Данные - Произвольный - данные, к которым относится сообщение об ошибке.
//
Процедура ЗаписатьОшибкуВЖурналРегистрации(Ошибка, Данные = Неопределено) Экспорт
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииИнтернетПоддержкаПользователейОшибка(),
		УровеньЖурналаРегистрации.Ошибка,
		,
		Данные,
		Ошибка);
	
КонецПроцедуры

// Записывает в журнал регистрации информацию
// с именем события "Интернет-поддержка пользователей.Информация".
//
// Параметры:
//	Сообщение - Строка - записываемая информация.
//
Процедура ЗаписатьИнформациюВЖурналРегистрации(Сообщение) Экспорт
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииИнтернетПоддержкаПользователейИнформация(),
		УровеньЖурналаРегистрации.Информация,
		,
		,
		Сообщение);
	
КонецПроцедуры

#КонецОбласти
