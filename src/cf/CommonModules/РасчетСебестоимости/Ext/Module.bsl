////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Функция РассчитатьСебестоимостьЗапасов(ТаблицаРеквизиты) Экспорт
	
	// Обеспечим приемлемость переданных данных стандартным подходом проведения документов
	Параметры = ПодготовитьПараметрыРегламентнойОперации(ТаблицаРеквизиты);
	
	Если Параметры.Реквизиты.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	Параметры = Неопределено; // Больше не потребуется
	
	// ОСНОВНАЯ ЛОГИКА РАСЧЕТА
	Возврат РассчитатьСебестоимость(Реквизиты.Период, Реквизиты.Организация, Реквизиты.Регистратор, "Запасы");
	
КонецФункции

Функция РассчитатьСебестоимостьВыпуска(ТаблицаРеквизиты) Экспорт

	// Обеспечим приемлемость переданных данных стандартным подходом проведения документов
	Параметры = ПодготовитьПараметрыРегламентнойОперации(ТаблицаРеквизиты);
	
	Если Параметры.Реквизиты.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	Параметры = Неопределено; // Больше не потребуется
	
	Возврат РассчитатьСебестоимость(Реквизиты.Период, Реквизиты.Организация, Реквизиты.Регистратор, "РасходыНаПроизводство");
	
КонецФункции

Функция СписатьРасходыНаПродажу(ТаблицаРеквизиты) Экспорт

	// Обеспечим приемлемость переданных данных стандартным подходом проведения документов
	Параметры = ПодготовитьПараметрыРегламентнойОперации(ТаблицаРеквизиты);
	
	Если Параметры.Реквизиты.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	Параметры = Неопределено; // Больше не потребуется
	
	Возврат РассчитатьСебестоимость(Реквизиты.Период, Реквизиты.Организация, Реквизиты.Регистратор, "РасходыНаПродажу");
	
КонецФункции

Процедура СформироватьДвиженияРасчетСебестоимости(ТаблицаПроводки, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыКорректировкаСтоимости(ТаблицаРеквизиты, ТаблицаПроводки);
	Проводки  = Параметры.Проводки;
	Реквизиты = Параметры.Реквизиты[0];
	Параметры = Неопределено;
	
	Если Проводки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаПроводки Из Проводки Цикл
		
		Проводка = Движения.Хозрасчетный.Добавить();
		ЗаполнитьЗначенияСвойств(Проводка, Реквизиты);
		ЗаполнитьЗначенияСвойств(Проводка, СтрокаПроводки);
		
		Для НомерСубконто = 1 По 3 Цикл
			// Дт
			БухгалтерскийУчет.УстановитьСубконто(
				СтрокаПроводки.СчетДт, 
				Проводка.СубконтоДт, 
				НомерСубконто, 
				СтрокаПроводки["СубконтоДт" + НомерСубконто]);
			// Кт
			БухгалтерскийУчет.УстановитьСубконто(
				СтрокаПроводки.СчетКт, 
				Проводка.СубконтоКт, 
				НомерСубконто, 
				СтрокаПроводки["СубконтоКт" + НомерСубконто]);
		КонецЦикла;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

// Передача параметров

Функция ПодготовитьПараметрыРегламентнойОперации(Реквизиты)
	
	Параметры = Новый Структура;
	Параметры.Вставить("Реквизиты", ОписаниеРеквизитовРегламентнойОперации(Реквизиты));
	
	Возврат Параметры;
	
КонецФункции

Функция ПодготовитьПараметрыКорректировкаСтоимости(Реквизиты, Проводки)
	
	Параметры = Новый Структура;
	Параметры.Вставить("Реквизиты", ОписаниеРеквизитовРегламентнойОперации(Реквизиты));
	
	// Таблица Проводки
	ОписаниеСумм = ОписаниеКоллекцииСумм(Истина, Истина, Истина);
	СписокОбязательныхКолонок = КоллекцииСумм.ИменаСвойствСтрокой(ОписаниеСумм) + "," 
	+ "СчетДт,"          // <ПланСчетовСсылка.Хозрасчетный>
	+ "СчетКт,"          // <ПланСчетовСсылка.Хозрасчетный>
	+ "СубконтоДт1,"     // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "СубконтоДт2,"     // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "СубконтоДт3,"     // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "СубконтоКт1,"     // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "СубконтоКт2,"     // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "СубконтоКт3,"     // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "ПодразделениеДт," // <Ссылка на справочник подразделений>
	+ "ПодразделениеКт," // <Ссылка на справочник подразделений>
	+ "Содержание";      // <Строка, 150>
	
	Параметры.Вставить(
		"Проводки", 
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(Проводки, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

Функция ОписаниеРеквизитовРегламентнойОперации(Реквизиты)
	
	// Разделим ответственность с регламентной операцией
	СписокОбязательныхКолонок = ""
	+ "Период,"              // <Дата>
	+ "Организация,"         // <СправочникСсылка.Организации>
	+ "Регистратор";         // <ДокументСсылка.*>
	
	Возврат ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(Реквизиты, СписокОбязательныхКолонок);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОСНОВНОЙ АЛГОРИТМ РАСЧЕТА СЕБЕСТОИМОСТИ

Функция РассчитатьСебестоимость(Период, Организация, Ссылка, Режим = "Запасы")
	
	Если Режим = "РасходыНаПроизводство" Тогда
		ОценитьЗапасы                     = Истина;
		РаспределитьРасходыНаПроизводство = Истина;
		СписатьРасходыНаПродажу           = Ложь;
	ИначеЕсли Режим = "РасходыНаПродажу" Тогда
		ОценитьЗапасы                     = Ложь;
		РаспределитьРасходыНаПроизводство = Ложь;
		СписатьРасходыНаПродажу           = Истина;
	Иначе
		ОценитьЗапасы                     = Истина;
		РаспределитьРасходыНаПроизводство = Ложь;
		СписатьРасходыНаПродажу           = Ложь;
	КонецЕсли;
	
	РазрезыУчетаРасходов = ЭлементыЗатратНастройкаПараметровУчета.РазрезыУчетаРасходов(Период, Организация);
	ОписаниеСумм         = ОписаниеКоллекцииСумм();
	ЭлементыЗатрат.ПодготовитьОписаниеКоллекцииСумм(ОписаниеСумм, РазрезыУчетаРасходов);
	
	ЗарегистрироватьЭтап("Начало расчета", Ссылка);
	
	// ПОДГОТОВКА
	
	Протокол = НовыйПротокол(ОписаниеСумм);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьСчетаЗатрат(
		МенеджерВременныхТаблиц, 
		Период, 
		Организация, 
		Режим);
	
	// ИНТЕРПРЕТАЦИЯ ПЕРВИЧНЫХ ДОКУМЕНТОВ
	
	// НачальноеСальдо
	СоздатьНачальноеСальдо(МенеджерВременныхТаблиц, Период, Организация);
	
	// ОборотыФикс
	СоздатьОборотыФикс(МенеджерВременныхТаблиц, Период, Организация);
	
	// Поступления (использует ОборотыФикс)
	СоздатьПоступления(МенеджерВременныхТаблиц, Период, Организация);
		
	// Выбытия (использует ОборотыФикс)
	СоздатьВыбытия(МенеджерВременныхТаблиц, Период, Организация);
	
	// НезавершенноеПроизводство
	СоздатьНезавершенноеПроизводство(МенеджерВременныхТаблиц, Период, Организация, Не РаспределитьРасходыНаПроизводство);
	
	ЭлементыЗатрат.СоздатьСтруктуруСтоимостиЗапасов(
		МенеджерВременныхТаблиц, 
		Период, 
		Организация, 
		РазрезыУчетаРасходов,
		ОценитьЗапасы);
	
	// Создаем таблицу КлючиВершин, которая позволяет упростить дальнейшую работу с данными - 
	// манипулировать не аналитикой, а номерами вершин
	СоздатьКлючиВершин(МенеджерВременныхТаблиц);
	
	// Аналогично - таблицы для учета по элементам затрат
	ЭлементыЗатрат.СоздатьКлючиЭлементовЗатрат(МенеджерВременныхТаблиц, РазрезыУчетаРасходов, ОценитьЗапасы);
	
	// Далее удобнее соединяться по идентификаторам, а не свойствам ключей
	ДополнитьВыбытияИдентификаторамиВершин(МенеджерВременныхТаблиц);
	
	ЗарегистрироватьЭтап("Получены данные первичных документов", Ссылка);
	
	// РАСПРЕДЕЛЕНИЕ РАСХОДОВ
	
	Если Режим = "РасходыНаПроизводство" Тогда
		ПравилаРаспределения = ПравилаРаспределенияРасходов.ПравилаРаспределенияРасходовНаПроизводство(Период, Организация);
	ИначеЕсли Режим = "РасходыНаПродажу" Тогда
		ПравилаРаспределения = ПравилаРаспределенияРасходов.ПравилаРаспределенияРасходовНаПродажу(Период, Организация);
	Иначе
		ПравилаРаспределения = ПравилаРаспределенияРасходов.НовыеПравилаРаспределения();
	КонецЕсли;
	
	Протокол.ПравилаРаспределения = ПравилаРаспределения;
	
	// Добавляет:
	// Расходы
	// РаспределениеНаСубконто
	// РаспределениеНаРасходы
	// ОбособленныйНалоговыйУчет
	// Обновляет:
	// КлючиВершин
	// Использует:
	// Поступления
	// все таблицы, созданные в СоздатьСчетаЗатрат()
	РаспределениеРасходов.СоздатьСхемуРаспределения(МенеджерВременныхТаблиц, ПравилаРаспределения, Период, Организация);
	
	// СодержаниеПроводокРаспределенияРасходов
	// ПравилаРаспределенияРасходовВыпуск
	ПравилаРаспределенияРасходов.СоздатьОсобенностиФормированияПроводок(
		МенеджерВременныхТаблиц, 
		ПравилаРаспределения);
		
	// ОЦЕНКА ЗАТРАТ
	
	// Для того, чтобы оценить затраты, представим их движение в виде графа.
	//
	// Граф состоит из ребер и вершин.
	//
	// Вершины - это состояния _затрат_, например, "20 счет по конкретному подразделению, НГ и статье затрат",
	// или "41 счет, конкретное наименование товара, конкретный склад, конкретная партия"
	// Важно: объекты учета, не являющиеся затратами, не входят в число вершин. 
	// Например, не будет вершины, соответствующей счету 90.02.
	//
	// Сначала граф заполняем следующими данными
	// - суммовая оценка вершины - это стоимость всех внешних поступлений,
	// - вес вершины - это вес всех движений, которые следует оценить (как внутри учета затрат так и "наружу"). 
	// По окончании работы процедуры
	// - суммовая оценка вершины - это стоимость, которая приходится на внешнее выбытие и конечный остаток
	// - вес вершины - это сумма количеств внешнего выбытия и конечного остатка.
	// Таким образом, вес и суммы вершины позволяют дать суммовую оценку проводкам по выбытию затрат.
	// Следствие: в каждом состоянии цена единицы остатка и внешнего выбытия в любом направлении будет одинаковой.
	//
	// Ребра - это движение затрат внутри учета затрат. Например - выпуск продукции или перемещение товаров, но не реализация услуг.
	// В начале работы процедуры 
	// - суммовой оценки не имеют
	// - вес вершины - это количественная характеристика движения
	// По окончании работы процедуры
	// - назначается суммовая оценка ребер
	// - вес не меняется
	//
	// Движения по распределению расходов - это также ребра.
	// Для них вес - это коэффициент распределения.
	//
	// Алгоритм оценки основан на допущении: игнорируются, разрушаются замкнутые маршруты в графе - "циклы", контуры
	// (далее используем термин "Контур", чтобы не путаться с ключевым словом языка Цикл).
	//
	// Отсутствие контуров позволяет представить движения в графе в виде одного или нескольких деревьев - 
	// _связных_ _ацикличных_ подграфов.
	// Здесь:
	// - связность означает наличие путей между любой парой вершин,
	// - ацикличность - отсутствие контуров и, как следствие, что между парами вершинами имеется только по одному пути.
	//
	// Следствие: в дереве легко последовательно рассчитать стоимость каждого ребра 
	// - следует найти корень и пройти от нее к тем вершинам, из которых нет исходящих ребер ("Приемников").
	//
	// Для вершин разных типов (Запасов и Расходов) и ребер разных типов (Перемещений, Распределений) 
	// применяются разные методы разрушения контуров:
	//
	// 1. Для перемещений считаем, что если товар в ходе перемещений снова попал в исходное состояние, то он как бы не перемещался, 
	// это движение можно исключить из общего оборота, а стоимость движения принять равной 0.
	// 
	// 2. Для остальных движений внутри контура запасов ("комплектаций") просто игнорируем одно из ребер цикла 
	// (считаем, что циклы в комплектациях редки, поэтому допустимо пожертвовать точностью вычислений за счет простоты алгоритма).
	//
	// 3. Контуры, которые проходят через вершины типа "Расходы", называются встречным выпуском.
	// Для таких контуров применяем следующий подход:
	// - заранее находим контуры и находим "слабые звенья" в них - те, которые потом разомкнем, тем самым разрушив цикл
	// - в ряде алгоритмов игнорируем "слабые звенья", но полностью циклы не разрушаются
	// - оценку расходов выполняем дважды:
	//   - сначала оцениваем весь граф, включая "слабые звенья"
	//   - затем разрушаем контуры, зафиксировав оценку слабых звеньев, полученную при первом распределении
	//   - наконец, выполняем оценку еще раз, начиная с тех вершин, в которые вели слабые звенья
	//
	// Граф затрат храним в виде структуры, содержащей
	// - две основные таблицы значений:
	//  - Вершины
	//  - Ребра
	// - вспомогательные (опциональные) таблицы значений:
	//  - Контуры
	//  - ЦелевоеСальдо
	//
	Затраты = ГрафЗатрат(МенеджерВременныхТаблиц, ОписаниеСумм);
	ЭлементыЗатрат.ДополнитьГрафЗатрат(Затраты.Вершины, ОписаниеСумм, МенеджерВременныхТаблиц, РазрезыУчетаРасходов, ОценитьЗапасы);
	
	Если РаспределитьРасходыНаПроизводство Тогда
		ЗаполнитьЦелевоеСальдо(Затраты, МенеджерВременныхТаблиц);
	КонецЕсли;
	
	// Разрушим контуры всех видов:
	РазрушитьПетли(Затраты);
	
	Если ОценитьЗапасы Тогда
		// - преобразуем граф перемещений, чтобы он содержал данные набора деревьев
		РазрушитьВсеКонтуры(Затраты, "Перемещения");
	
		// - если есть другие контуры (циклы) в разделе Запасы, то их тоже разрушим, но другим, менее "точным" способом
		РазрушитьВсеКонтуры(Затраты, "Запасы");
	КонецЕсли;
	
	// - обработаем контуры в разделе учета Расходы
	Если РаспределитьРасходыНаПроизводство Тогда
		
		// - отработаем ограничение, заданное пользователем
		ПрименитьНастройкуПорядкаПеределов(Затраты, МенеджерВременныхТаблиц, Период, Организация);
		
		// - разрушим встречный выпуск
		ПрименитьНастройкуВстречногоВыпуска(Затраты, МенеджерВременныхТаблиц, Период, Организация);
		РазрушитьВсеКонтуры(Затраты, "ВстречныйВыпуск", ПравилаРаспределения);
		
	КонецЕсли;
	
	Если РаспределитьРасходыНаПроизводство Или СписатьРасходыНаПродажу Тогда
		// - разрушим уцелевшие циклы: для математики оценки важно, чтобы контуров не было
		РазрушитьВсеКонтуры(Затраты, "Контрольный");
	КонецЕсли;
		
	ЗарегистрироватьЭтап("Готовы данные для оценки затрат", Ссылка);
	
	Если РаспределитьРасходыНаПроизводство Тогда
		// Оценка запасов уже выполнена регламентной операцией "Корректировка стоимости номенклатуры"
		ЗафиксироватьПредварительнуюОценкуЗапасов(Затраты, МенеджерВременныхТаблиц);
	КонецЕсли;
	
	ОценитьЗатраты(Затраты);
	
	ДооценитьКонтуры(Затраты);
	
	ЗарегистрироватьЭтап("Выполнена оценка затрат", Ссылка);
	
	СохранитьОценкуЗапасов(Протокол, Затраты, ОписаниеСумм); // В СоздатьДвижения оценка будет "испорчена"
	
	// Готовимся формировать проводки - преобразовываем абстрактные данные в аналитику проводок
	// Создает временные таблицы ВнутренниеДвижения, ВнешниеДвижения, ОценкаВершин, ДоступныеСуммы
	СоздатьДвижения(МенеджерВременныхТаблиц, Затраты, Протокол);
	
	ЗарегистрироватьЭтап("Готовы данные для формирования проводок", Ссылка);
	
	// ФОРМИРОВАНИЕ РЕЗУЛЬТАТА
	
	// Результат - это структура, содержащая 
	// - либо таблицы значений, соответствующие регистрам, в которые нужно записать результат
	// - либо свойство Ошибки (и тогда в регистры ничего не надо писать). 
	//   Ошибки - это структура с детальной информацией об ошибках
	Результат = Новый Структура;
	
	Если РаспределитьРасходыНаПроизводство Тогда
		
		// Ошибки закрытия счетов 20, 23, 25, 26
		ПодготовитьВыпускБезЗатрат(Результат, МенеджерВременныхТаблиц, Протокол);
		ПодготовитьРасходыНеУдалосьРаспределить(Результат, МенеджерВременныхТаблиц, Протокол);
		
	КонецЕсли;
	
	Если Результат.Свойство("Ошибки") Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Проводки
	Результат.Вставить("Хозрасчетный", НоваяТаблицаПроводок());
	
	// Подготовка проводок
	
	// Выбытия + ВнутренниеДвижения + ОценкаВершин
	ДобавитьПроводкиВнутренниеДвижения(
		Результат.Хозрасчетный, 
		МенеджерВременныхТаблиц);
		
	ЗарегистрироватьЭтап("Готовы проводки по Дт счетов учета запасов и расходов", Ссылка);
	
	// ВнешниеДвижения + ОценкаВершин
	ДобавитьПроводкиВнешниеДвижения(
		Результат.Хозрасчетный,
		МенеджерВременныхТаблиц,
		Затраты,
		РазрезыУчетаРасходов,
		Протокол);
		
	ЗарегистрироватьЭтап("Готовы проводки по Кт счетов учета запасов и расходов", Ссылка);
	
	// Счет 40
	Если РаспределитьРасходыНаПроизводство Тогда
		ДобавитьПроводкиСчет40(Результат.Хозрасчетный, Период, Организация, Ссылка);
	КонецЕсли;
	
	// Подготовка справок-расчетов
	СохранитьКлючиВершин(Протокол, МенеджерВременныхТаблиц);
	Если РаспределитьРасходыНаПроизводство Тогда
		СохранитьСебестоимостьВыпущеннойПродукции(Протокол, Затраты, ОписаниеСумм);
	КонецЕсли;
	
	ЭлементыЗатрат.ДополнитьРезультат(
		Результат, 
		Протокол, 
		ОписаниеСумм, 
		МенеджерВременныхТаблиц, 
		Организация, 
		ОценитьЗапасы);
	
	Если РаспределитьРасходыНаПроизводство ИЛИ СписатьРасходыНаПродажу Тогда
		
		// Создадим по данным протокола временную таблицу СальдоПослеРасчета,
		// которая используется для подготовки справок-расчетов
		СоздатьСальдоПослеРасчета(МенеджерВременныхТаблиц, Протокол);
		
		ПодготовитьСправкаРасчетСписанияКосвенныхРасходов(Протокол, МенеджерВременныхТаблиц, Период, Организация);
		
		Результат.Вставить("РасчетСписанияКосвенныхРасходов", Протокол.СправкаРасчетСписанияКосвенныхРасходов);
		
		Если РаспределитьРасходыНаПроизводство Тогда
		
			ПодготовитьСправкаРасчетСебестоимостиПродукции(Протокол, МенеджерВременныхТаблиц, Период, Организация);
			Результат.Вставить("РасчетСебестоимостиПродукции", Протокол.СправкаРасчетСебестоимостиПродукции);
	
			РасчетРаспределенияКосвенныхРасходов = ПодготовитьСправкаРасчетРаспределенияКосвенныхРасходов(Протокол, МенеджерВременныхТаблиц);
			Результат.Вставить("РасчетРаспределенияКосвенныхРасходов", РасчетРаспределенияКосвенныхРасходов);
			
			РасчетПорядкаПеределов = ПодготовитьСправкаРасчетПорядкаПеределов(Затраты, МенеджерВременныхТаблиц);
			Результат.Вставить("РасчетПорядкаПеределов",  РасчетПорядкаПеределов);
			
		КонецЕсли;
		
		УничтожитьСальдоПослеРасчета(МенеджерВременныхТаблиц);
		
		ЗарегистрироватьЭтап("Готовы справки-расчеты", Ссылка);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ИСХОДНЫЕ ДАННЫЕ

// Создадим временные таблицы с информацией о счетах затрат.
// Таблицы расходов могут опционально создаваться пустыми.
// Перечень таблиц:
// СчетаЗатрат
// СчетаЗапасов
// ОборотныеСубконто
// СчетаПрямыхРасходов
// СчетаКосвенныхРасходов
// СчетаРасходов
// СубконтоНоменклатурныеГруппы
// СубконтоСтатьиЗатрат
// СубконтоПользователя (все оборотные субконто, кроме аналитики учета расходов)
Процедура СоздатьСчетаЗатрат(МенеджерВременныхТаблиц, Период, Организация, Режим)
	
	СоздатьСчетаЗапасов(МенеджерВременныхТаблиц, Период, Организация, Режим = "РасходыНаПродажу");
	СоздатьСчетаРасходов(МенеджерВременныхТаблиц, Режим);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетаРасходов.Счет КАК Счет,
	|	""Расходы"" КАК РазделУчета
	|ПОМЕСТИТЬ СчетаЗатрат
	|ИЗ
	|	СчетаРасходов КАК СчетаРасходов
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СчетаЗапасов.Счет,
	|	""Запасы""
	|ИЗ
	|	СчетаЗапасов КАК СчетаЗапасов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйВидыСубконто.Ссылка КАК Счет,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 1
	|				ТОГДА ХозрасчетныйВидыСубконто.Суммовой
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК Субконто1,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 2
	|				ТОГДА ХозрасчетныйВидыСубконто.Суммовой
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК Субконто2,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 3
	|				ТОГДА ХозрасчетныйВидыСубконто.Суммовой
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК Субконто3
	|ПОМЕСТИТЬ СуммовойУчет
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|ГДЕ
	|	ХозрасчетныйВидыСубконто.Ссылка В
	|			(ВЫБРАТЬ
	|				СчетаЗатрат.Счет
	|			ИЗ
	|				СчетаЗатрат)
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйВидыСубконто.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйВидыСубконто.Ссылка КАК Счет,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 1
	|				ТОГДА ХозрасчетныйВидыСубконто.ТолькоОбороты
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК Субконто1,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 2
	|				ТОГДА ХозрасчетныйВидыСубконто.ТолькоОбороты
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК Субконто2,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 3
	|				ТОГДА ХозрасчетныйВидыСубконто.ТолькоОбороты
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК Субконто3
	|ПОМЕСТИТЬ ОборотныеСубконто
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|ГДЕ
	|	ХозрасчетныйВидыСубконто.Ссылка В
	|			(ВЫБРАТЬ
	|				СчетаЗатрат.Счет
	|			ИЗ
	|				СчетаЗатрат)
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйВидыСубконто.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет";
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Создает временные таблицы с перечнями счетов запасов:
// - СчетаЗапасов
// - СчетаТорговойНаценкиАТТ
// - СчетаМатериаловВЭксплуатации
Процедура СоздатьСчетаЗапасов(МенеджерВременныхТаблиц, Период, Организация, Пустые = Ложь)
	
	Если Пустые Тогда
		СчетаЗапасов           = Новый Массив;
		СчетаЗапасовИсключения = Новый Массив;
		УчетВПродажныхЦенах    = Ложь;
	Иначе
		
		// Не считаем счетами запасов те, на которых не ведется пономенклатурный учет
		СчетаЗапасов = УчетЗатрат.ПредопределенныеСчетаЗапасов();
		
		// Если учет ведется по розничным ценам, то счет 41.11 оценивается совместно с счетом наценки
		СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(Организация, Период);
		УчетВПродажныхЦенах = (СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости);
		
		Если УчетВПродажныхЦенах Тогда
			СчетаЗапасов.Добавить(ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ); // 42.01
		КонецЕсли;
		
		// Некоторые счета запасов не обрабатываем
		СчетаЗапасовИсключения = Новый Массив;
		СчетаЗапасовИсключения.Добавить(ПланыСчетов.Хозрасчетный.КорректировкаТоваровПрошлогоПериода);        // 41.К  - служебный счет
		СчетаЗапасовИсключения.Добавить(ПланыСчетов.Хозрасчетный.СпецоснасткаИСпецодеждаВЭксплуатации);       // 10.11 - не умеем
		
	КонецЕсли;
	
	// Создаем временные таблицы
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СчетаЗапасов",           СчетаЗапасов);
	Запрос.УстановитьПараметр("СчетаЗапасовИсключения", СчетаЗапасовИсключения);
	Запрос.УстановитьПараметр("УчетВПродажныхЦенах",    УчетВПродажныхЦенах);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет,
	|	Хозрасчетный.НомерСтроки КАК НомерСубконтоНоменклатура
	|ПОМЕСТИТЬ СчетаЗапасов
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура)
	|	И Хозрасчетный.Количественный
	|	И Хозрасчетный.Суммовой
	|	И Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетаЗапасов)
	|	И НЕ Хозрасчетный.Ссылка В ИЕРАРХИИ (&СчетаЗапасовИсключения)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ) КАК СчетЗапасов,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТорговаяНаценкаАТТ) КАК СчетНаценки
	|ПОМЕСТИТЬ СчетаТорговойНаценкиАТТ
	|ГДЕ
	|	&УчетВПродажныхЦенах
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетЗапасов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйВидыСубконто.Ссылка КАК Счет
	|ПОМЕСТИТЬ СчетаМатериаловВЭксплуатации
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|ГДЕ
	|	ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПартииМатериаловВЭксплуатации)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет";
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Создает временные таблицы с перечнями счетов расходов и аналитики на них:
// - СчетаРасходов
// - СчетаПрямыхРасходов
// - СчетаКосвенныхРасходов
// - СубконтоСтатьиЗатрат
// - СубконтоНоменклатурныеГруппы
// - СубконтоПользователя (все оборотные субконто, кроме аналитики учета расходов)
Процедура СоздатьСчетаРасходов(МенеджерВременныхТаблиц, Режим = "РасходыНаПроизводство")
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Если Режим = "РасходыНаПроизводство" Тогда
		Запрос.УстановитьПараметр("СчетаПрямыхРасходов",     УчетЗатрат.ПредопределенныеСчетаПрямыхРасходов());
		Запрос.УстановитьПараметр("СчетаКосвенныхРасходов",  УчетЗатрат.ПредопределенныеСчетаКосвенныхРасходов());
		Запрос.УстановитьПараметр("ДобавитьСчетВыпуска",     Истина);
	ИначеЕсли Режим = "РасходыНаПродажу" Тогда
		Запрос.УстановитьПараметр("СчетаПрямыхРасходов",     Новый Массив);
		Запрос.УстановитьПараметр("СчетаКосвенныхРасходов",  УчетЗатрат.ПредопределенныеСчетаРасходовНаПродажу());
		Запрос.УстановитьПараметр("ДобавитьСчетВыпуска",     Ложь);
	Иначе // Запасы
		Запрос.УстановитьПараметр("СчетаПрямыхРасходов",     Новый Массив);
		Запрос.УстановитьПараметр("СчетаКосвенныхРасходов",  Новый Массив);
		Запрос.УстановитьПараметр("ДобавитьСчетВыпуска",     Ложь);
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ СчетаПрямыхРасходов
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетаПрямыхРасходов)
	|	И НЕ Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ СчетаКосвенныхРасходов
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетаКосвенныхРасходов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаПрямыхРасходов.Счет КАК Счет
	|ПОМЕСТИТЬ СчетаРасходов
	|ИЗ
	|	СчетаПрямыхРасходов КАК СчетаПрямыхРасходов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетаКосвенныхРасходов.Счет
	|ИЗ
	|	СчетаКосвенныхРасходов КАК СчетаКосвенныхРасходов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыпускПродукции)
	|ГДЕ
	|	&ДобавитьСчетВыпуска
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйВидыСубконто.Ссылка КАК Счет,
	|	ХозрасчетныйВидыСубконто.НомерСтроки КАК НомерСубконто
	|ПОМЕСТИТЬ СубконтоСтатьиЗатрат
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|ГДЕ
	|	ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
	|	И ХозрасчетныйВидыСубконто.Ссылка В
	|			(ВЫБРАТЬ
	|				СчетаРасходов.Счет
	|			ИЗ
	|				СчетаРасходов КАК СчетаРасходов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйВидыСубконто.Ссылка КАК Счет,
	|	ХозрасчетныйВидыСубконто.НомерСтроки КАК НомерСубконто
	|ПОМЕСТИТЬ СубконтоНоменклатурныеГруппы
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|ГДЕ
	|	ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|	И ХозрасчетныйВидыСубконто.Ссылка В
	|			(ВЫБРАТЬ
	|				СчетаРасходов.Счет
	|			ИЗ
	|				СчетаРасходов КАК СчетаРасходов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйВидыСубконто.Ссылка КАК Счет,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 1
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК Субконто1,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 2
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК Субконто2,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 3
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК Субконто3
	|ПОМЕСТИТЬ СубконтоПользователя
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|		ЛЕВОЕ СОЕДИНЕНИЕ СубконтоСтатьиЗатрат КАК СубконтоСтатьиЗатрат
	|		ПО ХозрасчетныйВидыСубконто.Ссылка = СубконтоСтатьиЗатрат.Счет
	|			И ХозрасчетныйВидыСубконто.НомерСтроки = СубконтоСтатьиЗатрат.НомерСубконто
	|		ЛЕВОЕ СОЕДИНЕНИЕ СубконтоНоменклатурныеГруппы КАК СубконтоНоменклатурныеГруппы
	|		ПО ХозрасчетныйВидыСубконто.Ссылка = СубконтоНоменклатурныеГруппы.Счет
	|			И ХозрасчетныйВидыСубконто.НомерСтроки = СубконтоНоменклатурныеГруппы.НомерСубконто
	|ГДЕ
	|	ХозрасчетныйВидыСубконто.Ссылка В
	|			(ВЫБРАТЬ
	|				СчетаРасходов.Счет
	|			ИЗ
	|				СчетаРасходов КАК СчетаРасходов)
	|	И ХозрасчетныйВидыСубконто.ТолькоОбороты
	|	И ХозрасчетныйВидыСубконто.Суммовой
	|	И СубконтоСтатьиЗатрат.Счет ЕСТЬ NULL 
	|	И СубконтоНоменклатурныеГруппы.Счет ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйВидыСубконто.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет";
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Создает временную таблицу НачальноеСальдоЗапасов
//
Процедура СоздатьНачальноеСальдо(МенеджерВременныхТаблиц, Период, Организация)
	
	// НачальноеСальдо = 
	//   сальдо запасов
	// + сальдо прямых расходов
	// + сальдо косвенных расходов
	
	// На счетах косвенных расходов может остаться сальдо в двух случаях: 
	// 1. сальдо нормируемых расходов налогового учета
	// 2. сальдо транспортных расходов
	// Их получим в особом порядке и поместим в СальдоКосвенныхРасходов.
	// 
	// В налоговом учете на конец месяца могут остаться остатки сверхнормативных расходов.
	// Для того, чтобы в следующем месяце сопоставить эти расходы с нормативами,
	// важно знать статьи, по которым они отражены.
	// Но на счетах расходов статья затрат - оборотное субконто и при получении остатков на начало месяца 
	// статья неизвестна.
	//
	// Сверхнормативные расходы не могут остаться с предыдущего года.
	// Поэтому, для того, чтобы получить остатки сверхнормативных расходов в разрезе статей затрат,
	// достаточно обратиться к оборотам с начала года до текущего месяца.
	//
	// Так как все нормируемые расходы - косвенные, а КорСчет нужен только для разделения прямых и косвенных расходов,
	// то при расчете сальдо нормируемых расходов не определяем КорСчет
	//
	// Если налоговый учет не ведется, то получаем остатки "по простому": к оборотам не обращаемся.
	//
	// Транспортные расходы можно отражать только по тем счетам, по которым субконто СтатьяЗатрат не оборотное,
	// поэтому их тоже получаем "по простому".
	// КорСчет также не нужен, потому что эти расходы всегда прямые.
	
	// Сначала разберемся с косвенными расходами, затем с остальными расходами и затем добавим данные о запасах
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("НормируемыеРасходы",  Перечисления.ВидыРасходовНУ.НормируемыеРасходы());
	Запрос.УстановитьПараметр("НачалоГода",          НачалоГода(Период));
	Запрос.УстановитьПараметр("ДоНачалаПериода",     Новый Граница(НачалоМесяца(Период), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Период",              НачалоМесяца(Период));
	Запрос.УстановитьПараметр("НалоговыйУчет",       УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, Период));
	Запрос.УстановитьПараметр("ПустоеПодразделение", БухгалтерскийУчетПереопределяемый.ПустоеПодразделение());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйВидыСубконто.Ссылка КАК Счет,
	|	ХозрасчетныйВидыСубконто.НомерСтроки КАК НомерСубконто
	|ПОМЕСТИТЬ ВТ_СчетаРасходовОборотныеСтатьиЗатрат
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаКосвенныхРасходов КАК СчетаКосвенныхРасходов
	|		ПО ХозрасчетныйВидыСубконто.Ссылка = СчетаКосвенныхРасходов.Счет
	|ГДЕ
	|	ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
	|	И ХозрасчетныйВидыСубконто.ТолькоОбороты
	|	И ХозрасчетныйВидыСубконто.Суммовой
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСубконто,
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатьиЗатрат.Ссылка КАК СтатьяЗатрат
	|ПОМЕСТИТЬ ВТ_СтатьиЗатратНормируемые
	|ИЗ
	|	Справочник.СтатьиЗатрат КАК СтатьиЗатрат
	|ГДЕ
	|	СтатьиЗатрат.ВидРасходовНУ В(&НормируемыеРасходы)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтатьяЗатрат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Счет,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.Подразделение, &ПустоеПодразделение) КАК Подразделение,
	|	ХозрасчетныйОбороты.Субконто1,
	|	ХозрасчетныйОбороты.Субконто2,
	|	ХозрасчетныйОбороты.Субконто3,
	|	0 КАК Сумма,
	|	ХозрасчетныйОбороты.СуммаНУОборотДт - ХозрасчетныйОбороты.СуммаНУОборотКт КАК СуммаНУ,
	|	ХозрасчетныйОбороты.СуммаНУОборотКт - ХозрасчетныйОбороты.СуммаНУОборотДт КАК СуммаПР,
	|	0 КАК СуммаВР
	|ПОМЕСТИТЬ ВТ_СальдоКосвенныхРасходов
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоГода,
	|			&ДоНачалаПериода,
	|			,
	|			Счет В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					СчетаРасходов.Счет
	|				ИЗ
	|					ВТ_СчетаРасходовОборотныеСтатьиЗатрат КАК СчетаРасходов
	|				ГДЕ
	|					СчетаРасходов.НомерСубконто = 1),
	|			,
	|			Организация = &Организация
	|				И &НалоговыйУчет
	|				И Субконто1 ССЫЛКА Справочник.СтатьиЗатрат
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						ВТ_СтатьиЗатратНормируемые.СтатьяЗатрат
	|					ИЗ
	|						ВТ_СтатьиЗатратНормируемые),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Счет,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.Подразделение, &ПустоеПодразделение) КАК Подразделение,
	|	ХозрасчетныйОбороты.Субконто1,
	|	ХозрасчетныйОбороты.Субконто2,
	|	ХозрасчетныйОбороты.Субконто3,
	|	0,
	|	ХозрасчетныйОбороты.СуммаНУОборотДт - ХозрасчетныйОбороты.СуммаНУОборотКт,
	|	ХозрасчетныйОбороты.СуммаНУОборотКт - ХозрасчетныйОбороты.СуммаНУОборотДт,
	|	0
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоГода,
	|			&ДоНачалаПериода,
	|			,
	|			Счет В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					СчетаРасходов.Счет
	|				ИЗ
	|					ВТ_СчетаРасходовОборотныеСтатьиЗатрат КАК СчетаРасходов
	|				ГДЕ
	|					СчетаРасходов.НомерСубконто = 2),
	|			,
	|			Организация = &Организация
	|				И &НалоговыйУчет
	|				И Субконто2 ССЫЛКА Справочник.СтатьиЗатрат
	|				И Субконто2 В
	|					(ВЫБРАТЬ
	|						ВТ_СтатьиЗатратНормируемые.СтатьяЗатрат
	|					ИЗ
	|						ВТ_СтатьиЗатратНормируемые),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Счет,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.Подразделение, &ПустоеПодразделение) КАК Подразделение,
	|	ХозрасчетныйОбороты.Субконто1,
	|	ХозрасчетныйОбороты.Субконто2,
	|	ХозрасчетныйОбороты.Субконто3,
	|	0,
	|	ХозрасчетныйОбороты.СуммаНУОборотДт - ХозрасчетныйОбороты.СуммаНУОборотКт,
	|	ХозрасчетныйОбороты.СуммаНУОборотКт - ХозрасчетныйОбороты.СуммаНУОборотДт,
	|	0
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоГода,
	|			&ДоНачалаПериода,
	|			,
	|			Счет В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					СчетаРасходов.Счет
	|				ИЗ
	|					ВТ_СчетаРасходовОборотныеСтатьиЗатрат КАК СчетаРасходов
	|				ГДЕ
	|					СчетаРасходов.НомерСубконто = 3),
	|			,
	|			Организация = &Организация
	|				И &НалоговыйУчет
	|				И Субконто3 ССЫЛКА Справочник.СтатьиЗатрат
	|				И Субконто3 В
	|					(ВЫБРАТЬ
	|						ВТ_СтатьиЗатратНормируемые.СтатьяЗатрат
	|					ИЗ
	|						ВТ_СтатьиЗатратНормируемые),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.Подразделение, &ПустоеПодразделение) КАК Подразделение,
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Субконто2,
	|	ХозрасчетныйОстатки.Субконто3,
	|	ХозрасчетныйОстатки.СуммаОстаток,
	|	ХозрасчетныйОстатки.СуммаНУОстаток,
	|	ХозрасчетныйОстатки.СуммаПРОстаток,
	|	ХозрасчетныйОстатки.СуммаВРОстаток
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Период,
	|			Счет В
	|					(ВЫБРАТЬ
	|						СчетаКосвенныхРасходов.Счет
	|					ИЗ
	|						СчетаКосвенныхРасходов)
	|				И НЕ Счет В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							ВТ_СчетаРасходовОборотныеСтатьиЗатрат.Счет
	|						ИЗ
	|							ВТ_СчетаРасходовОборотныеСтатьиЗатрат),
	|			,
	|			Организация = &Организация) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_СчетаРасходовОборотныеСтатьиЗатрат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_СтатьиЗатратНормируемые";
	
	Запрос.Выполнить();
	
	// Теперь получим сальдо прямых расходов и запасов, затем скомпонуем результат
	
	// Для учета затрат нас не интересует оценка запасов в розничных ценах.
	// Поэтому если учет товаров в рознице ведется по ценам реализации,
	// то счет 41.11 заменяем на счет 42.01, на котором будут "храниться"
	// затраты в ценах приобретения.
	// При формировании проводок, если необходимо, выполним обратное преобразование.
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Период",              НачалоМесяца(Период));
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("ПустоеПодразделение", БухгалтерскийУчетПереопределяемый.ПустоеПодразделение());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачальноеСальдо.Счет КАК Счет,
	|	ЕСТЬNULL(НачальноеСальдо.Подразделение, &ПустоеПодразделение) КАК Подразделение,
	|	ЕСТЬNULL(НачальноеСальдо.Субконто1, НЕОПРЕДЕЛЕНО) КАК Субконто1,
	|	ЕСТЬNULL(НачальноеСальдо.Субконто2, НЕОПРЕДЕЛЕНО) КАК Субконто2,
	|	ЕСТЬNULL(НачальноеСальдо.Субконто3, НЕОПРЕДЕЛЕНО) КАК Субконто3,
	|	НачальноеСальдо.КоличествоОстаток КАК Количество,
	|	НачальноеСальдо.СуммаОстаток КАК Сумма,
	|	НачальноеСальдо.СуммаНУОстаток КАК СуммаНУ,
	|	НачальноеСальдо.СуммаПРОстаток КАК СуммаПР,
	|	НачальноеСальдо.СуммаВРОстаток КАК СуммаВР
	|ПОМЕСТИТЬ ВТ_НачальноеСальдоПрямыхРасходов
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Период,
	|			Счет В
	|				(ВЫБРАТЬ
	|					СчетаПрямыхРасходов.Счет
	|				ИЗ
	|					СчетаПрямыхРасходов),
	|			,
	|			Организация = &Организация) КАК НачальноеСальдо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачальноеСальдо.Счет КАК Счет,
	|	ЕСТЬNULL(НачальноеСальдо.Подразделение, &ПустоеПодразделение) КАК Подразделение,
	|	ЕСТЬNULL(НачальноеСальдо.Субконто1, НЕОПРЕДЕЛЕНО) КАК Субконто1,
	|	ЕСТЬNULL(НачальноеСальдо.Субконто2, НЕОПРЕДЕЛЕНО) КАК Субконто2,
	|	ЕСТЬNULL(НачальноеСальдо.Субконто3, НЕОПРЕДЕЛЕНО) КАК Субконто3,
	|	НачальноеСальдо.КоличествоОстаток КАК Количество,
	|	НачальноеСальдо.СуммаОстаток КАК Сумма,
	|	НачальноеСальдо.СуммаНУОстаток КАК СуммаНУ,
	|	НачальноеСальдо.СуммаПРОстаток КАК СуммаПР,
	|	НачальноеСальдо.СуммаВРОстаток КАК СуммаВР
	|ПОМЕСТИТЬ ВТ_НачальноеСальдоЗапасов
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Период,
	|			Счет В
	|				(ВЫБРАТЬ
	|					СчетаЗапасов.Счет
	|				ИЗ
	|					СчетаЗапасов),
	|			,
	|			Организация = &Организация) КАК НачальноеСальдо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СчетаТорговойНаценки.СчетНаценки, НачальноеСальдо.Счет) КАК Счет,
	|	НачальноеСальдо.Подразделение КАК Подразделение,
	|	ВЫБОР
	|		КОГДА СуммовойУчет.Субконто1
	|			ТОГДА НачальноеСальдо.Субконто1
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Субконто1,
	|	ВЫБОР
	|		КОГДА СуммовойУчет.Субконто2
	|			ТОГДА НачальноеСальдо.Субконто2
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Субконто2,
	|	ВЫБОР
	|		КОГДА СуммовойУчет.Субконто3
	|			ТОГДА НачальноеСальдо.Субконто3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Субконто3,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК КорСчет,
	|	ВЫБОР
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 1
	|			ТОГДА ВЫРАЗИТЬ(НачальноеСальдо.Субконто1 КАК Справочник.Номенклатура)
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 2
	|			ТОГДА ВЫРАЗИТЬ(НачальноеСальдо.Субконто2 КАК Справочник.Номенклатура)
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 3
	|			ТОГДА ВЫРАЗИТЬ(НачальноеСальдо.Субконто3 КАК Справочник.Номенклатура)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	КОНЕЦ КАК Номенклатура,
	|	СУММА(НачальноеСальдо.Количество) КАК Количество,
	|	СУММА(НачальноеСальдо.Сумма) КАК Сумма,
	|	СУММА(НачальноеСальдо.СуммаНУ) КАК СуммаНУ,
	|	СУММА(НачальноеСальдо.СуммаПР) КАК СуммаПР,
	|	СУММА(НачальноеСальдо.СуммаВР) КАК СуммаВР
	|ПОМЕСТИТЬ НачальноеСальдо
	|ИЗ
	|	ВТ_НачальноеСальдоЗапасов КАК НачальноеСальдо
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммовойУчет КАК СуммовойУчет
	|		ПО НачальноеСальдо.Счет = СуммовойУчет.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаТорговойНаценкиАТТ КАК СчетаТорговойНаценки
	|		ПО НачальноеСальдо.Счет = СчетаТорговойНаценки.СчетЗапасов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаЗапасов КАК СчетаЗапасов
	|		ПО НачальноеСальдо.Счет = СчетаЗапасов.Счет
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(СчетаТорговойНаценки.СчетНаценки, НачальноеСальдо.Счет),
	|	НачальноеСальдо.Подразделение,
	|	ВЫБОР
	|		КОГДА СуммовойУчет.Субконто1
	|			ТОГДА НачальноеСальдо.Субконто1
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СуммовойУчет.Субконто2
	|			ТОГДА НачальноеСальдо.Субконто2
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СуммовойУчет.Субконто3
	|			ТОГДА НачальноеСальдо.Субконто3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 1
	|			ТОГДА ВЫРАЗИТЬ(НачальноеСальдо.Субконто1 КАК Справочник.Номенклатура)
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 2
	|			ТОГДА ВЫРАЗИТЬ(НачальноеСальдо.Субконто2 КАК Справочник.Номенклатура)
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 3
	|			ТОГДА ВЫРАЗИТЬ(НачальноеСальдо.Субконто3 КАК Справочник.Номенклатура)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НачальноеСальдо.Счет,
	|	НачальноеСальдо.Подразделение,
	|	НачальноеСальдо.Субконто1,
	|	НачальноеСальдо.Субконто2,
	|	НачальноеСальдо.Субконто3,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
	|	СУММА(НачальноеСальдо.Количество),
	|	СУММА(НачальноеСальдо.Сумма),
	|	СУММА(НачальноеСальдо.СуммаНУ),
	|	СУММА(НачальноеСальдо.СуммаПР),
	|	СУММА(НачальноеСальдо.СуммаВР)
	|ИЗ
	|	ВТ_НачальноеСальдоПрямыхРасходов КАК НачальноеСальдо
	|
	|СГРУППИРОВАТЬ ПО
	|	НачальноеСальдо.Счет,
	|	НачальноеСальдо.Подразделение,
	|	НачальноеСальдо.Субконто1,
	|	НачальноеСальдо.Субконто2,
	|	НачальноеСальдо.Субконто3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НачальноеСальдо.Счет,
	|	ЕСТЬNULL(НачальноеСальдо.Подразделение, &ПустоеПодразделение),
	|	ЕСТЬNULL(НачальноеСальдо.Субконто1, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(НачальноеСальдо.Субконто2, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(НачальноеСальдо.Субконто3, НЕОПРЕДЕЛЕНО),
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
	|	0,
	|	НачальноеСальдо.Сумма,
	|	НачальноеСальдо.СуммаНУ,
	|	НачальноеСальдо.СуммаПР,
	|	НачальноеСальдо.СуммаВР
	|ИЗ
	|	ВТ_СальдоКосвенныхРасходов КАК НачальноеСальдо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет,
	|	Подразделение,
	|	Субконто1,
	|	Субконто2,
	|	Субконто3,
	|	Номенклатура,
	|	КорСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_НачальноеСальдоПрямыхРасходов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_НачальноеСальдоЗапасов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_СальдоКосвенныхРасходов";
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьОборотыФикс(МенеджерВременныхТаблиц, Период, Организация)
	
	// Обороты по фиксированной стоимости - это следующие движения из учета затрат (по ИЛИ):
	// - у которых стоит флаг НеКорректироватьСтоимостьАвтоматически
	// - ручные операции без количества
	// - возвраты от покупателей, стоимость которых фиксирована в документе (отражаются "красным сторно" - по Кт счетов с минусом)
	// - возвратные отходы (отражаются "красным сторно" - по Кт счетов с минусом)
	// - увеличение стоимости спецодежды и спецоснастки в эксплуатации
	//   (последние имеют особый порядок учета, уточнение оценки таких операций не поддерживается механизмами погашения стоимости)
	// - корректировка зарплаты
	// - исходящие авизо (отражают выбытие активов)
	
	// Такие операции описываются либо свойствами документов либо свойствами записи регистра.
	// Этих операций немного.
	// Поэтому сначала определяем ссылки на записи регистра по фиксированной стоимости.
	
	// ОборотыФикс нужны, чтобы
	// 1. из выбытий отобрать только те, которые следует рассчитать (исключить из всех выбытий ОборотыФикс, см. СоздатьВыбытия())
	// 2. к поступлениям добавить результат поступления по фиксированной стоимости (см. СоздатьПоступления())
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоПериода",       НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода",        КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("ПустоеПодразделение", БухгалтерскийУчетПереопределяемый.ПустоеПодразделение());
	
	// Запрос нельзя редактировать конструктором, потому что он содержит комментарии,
	// которые ниже будут заменены - см. //ОбъединитьДокументыФикс
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Движения.Регистратор КАК Регистратор,
	|	Движения.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВыбытияФикс
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Движения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|		ПО Движения.Регистратор = ВозвратТоваровОтПокупателя.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаЗапасов КАК СчетаЗапасов
	|		ПО Движения.СчетКт = СчетаЗапасов.Счет
	|ГДЕ
	|	Движения.Активность
	|	И Движения.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Движения.Организация = &Организация
	|	И Движения.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|	И Движения.КоличествоКт < 0
	|	И ВозвратТоваровОтПокупателя.Сделка.Дата < &НачалоПериода
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Движения.Регистратор,
	|	Движения.НомерСтроки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Движения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|		ПО Движения.Регистратор = ВозвратТоваровОтПокупателя.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаЗапасов КАК СчетаЗапасов
	|		ПО Движения.СчетКт = СчетаЗапасов.Счет
	|ГДЕ
	|	Движения.Активность
	|	И Движения.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Движения.Организация = &Организация
	|	И Движения.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|	И Движения.КоличествоКт < 0
	|	И ВозвратТоваровОтПокупателя.Сделка.Склад <> ВозвратТоваровОтПокупателя.Склад
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Движения.Регистратор,
	|	Движения.НомерСтроки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Движения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|		ПО Движения.Регистратор = ВозвратТоваровОтПокупателя.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаЗапасов КАК СчетаЗапасов
	|		ПО Движения.СчетКт = СчетаЗапасов.Счет
	|ГДЕ
	|	Движения.Активность
	|	И Движения.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Движения.Организация = &Организация
	|	И Движения.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|	И Движения.КоличествоКт < 0
	|	И ВозвратТоваровОтПокупателя.Сделка.Склад ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Движения.Регистратор,
	|	Движения.НомерСтроки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Движения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|		ПО Движения.Регистратор = ВозвратТоваровОтПокупателя.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаЗапасов КАК СчетаЗапасов
	|		ПО Движения.СчетКт = СчетаЗапасов.Счет
	|ГДЕ
	|	Движения.Активность
	|	И Движения.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Движения.Организация = &Организация
	|	И Движения.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|	И Движения.КоличествоКт < 0
	|	И ВозвратТоваровОтПокупателя.Сделка.Дата ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВозвратныеОтходы.Регистратор,
	|	ВозвратныеОтходы.НомерСтроки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК ВозвратныеОтходы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаЗапасов КАК СчетаЗапасов
	|		ПО ВозвратныеОтходы.СчетКт = СчетаЗапасов.Счет
	|ГДЕ
	|	ВозвратныеОтходы.Активность
	|	И ВозвратныеОтходы.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ВозвратныеОтходы.Организация = &Организация
	|	И ВозвратныеОтходы.Регистратор ССЫЛКА Документ.ОтчетПроизводстваЗаСмену
	|	И ВозвратныеОтходы.КоличествоКт < 0
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Движения.Регистратор,
	|	Движения.НомерСтроки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Движения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОперацияБух КАК ОперацияБух
	|		ПО Движения.Регистратор = ОперацияБух.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаЗапасов КАК СчетаЗапасов
	|		ПО Движения.СчетКт = СчетаЗапасов.Счет
	|ГДЕ
	|	Движения.Активность
	|	И Движения.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Движения.Организация = &Организация
	|	И Движения.Регистратор ССЫЛКА Документ.ОперацияБух
	|	И Движения.КоличествоКт < 0
	|	И НЕ ОперацияБух.СпособЗаполнения ПОДОБНО ""Сторно""
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	НеКорректируемые.Регистратор,
	|	НеКорректируемые.НомерСтроки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК НеКорректируемые
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаЗатрат КАК СчетаЗатрат
	|		ПО НеКорректируемые.СчетКт = СчетаЗатрат.Счет
	|ГДЕ
	|	НеКорректируемые.Активность
	|	И НеКорректируемые.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НеКорректируемые.Организация = &Организация
	|	И НеКорректируемые.НеКорректироватьСтоимостьАвтоматически
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ОперацияБух.Регистратор,
	|	ОперацияБух.НомерСтроки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК ОперацияБух
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаЗатрат КАК СчетаЗатрат
	|		ПО ОперацияБух.СчетКт = СчетаЗатрат.Счет
	|ГДЕ
	|	ОперацияБух.Активность
	|	И ОперацияБух.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ОперацияБух.Организация = &Организация
	|	И ОперацияБух.Регистратор ССЫЛКА Документ.ОперацияБух
	|	И ЕСТЬNULL(ОперацияБух.КоличествоКт, 0) = 0
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Движения.Регистратор,
	|	Движения.НомерСтроки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Движения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаМатериаловВЭксплуатации КАК СчетаМатериаловВЭксплуатации
	|		ПО Движения.СчетДт = СчетаМатериаловВЭксплуатации.Счет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаЗатрат КАК СчетаЗатрат
	|		ПО Движения.СчетКт = СчетаЗатрат.Счет
	|ГДЕ
	|	Движения.Активность
	|	И Движения.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Движения.Организация = &Организация
	|
	|//ОбъединитьДокументыФикс
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Обороты.СчетДт КАК СчетДт,
	|	ЕСТЬNULL(Обороты.ПодразделениеДт, &ПустоеПодразделение) КАК ПодразделениеДт,
	|	ЕСТЬNULL(Обороты.СубконтоДт1, НЕОПРЕДЕЛЕНО) КАК СубконтоДт1,
	|	ЕСТЬNULL(Обороты.СубконтоДт2, НЕОПРЕДЕЛЕНО) КАК СубконтоДт2,
	|	ЕСТЬNULL(Обороты.СубконтоДт3, НЕОПРЕДЕЛЕНО) КАК СубконтоДт3,
	|	Обороты.СчетКт КАК СчетКт,
	|	ЕСТЬNULL(Обороты.ПодразделениеКт, &ПустоеПодразделение) КАК ПодразделениеКт,
	|	ЕСТЬNULL(Обороты.СубконтоКт1, НЕОПРЕДЕЛЕНО) КАК СубконтоКт1,
	|	ЕСТЬNULL(Обороты.СубконтоКт2, НЕОПРЕДЕЛЕНО) КАК СубконтоКт2,
	|	ЕСТЬNULL(Обороты.СубконтоКт3, НЕОПРЕДЕЛЕНО) КАК СубконтоКт3,
	|	СУММА(ЕСТЬNULL(Обороты.КоличествоКт, 0)) КАК Количество,
	|	СУММА(ЕСТЬNULL(Обороты.Сумма, 0)) КАК Сумма,
	|	СУММА(ЕСТЬNULL(Обороты.СуммаНУКт, 0)) КАК СуммаНУ,
	|	СУММА(ЕСТЬNULL(Обороты.СуммаПРКт, 0)) КАК СуммаПР,
	|	СУММА(ЕСТЬNULL(Обороты.СуммаВРКт, 0)) КАК СуммаВР
	|ПОМЕСТИТЬ ОборотыФикс
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			(Регистратор, НомерСтроки) В
	|				(ВЫБРАТЬ
	|					ВыбытияФикс.Регистратор,
	|					ВыбытияФикс.НомерСтроки
	|				ИЗ
	|					ВыбытияФикс КАК ВыбытияФикс),
	|			,
	|			) КАК Обороты
	|
	|СГРУППИРОВАТЬ ПО
	|	Обороты.СчетДт,
	|	Обороты.ПодразделениеДт,
	|	Обороты.СубконтоДт1,
	|	Обороты.СубконтоДт2,
	|	Обороты.СубконтоДт3,
	|	Обороты.СчетКт,
	|	Обороты.ПодразделениеКт,
	|	Обороты.СубконтоКт1,
	|	Обороты.СубконтоКт2,
	|	Обороты.СубконтоКт3
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетКт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВыбытияФикс";
	
	// Дополним запрос для подготовки ВыбытияФикс документами, 
	// движения которых всегда считаются оборотами по фиксированной стоимости 
	
	ИменаДокументовФиксированнойСтоимости = Новый Массив;
	ИменаДокументовФиксированнойСтоимости.Добавить("НачислениеЗарплаты");
	ИменаДокументовФиксированнойСтоимости.Добавить("ОтражениеЗарплатыВБухучете");
	ИменаДокументовФиксированнойСтоимости.Добавить("ОтражениеЗарплатыВУчете");
	УчетОбособленныхПодразделений.ДополнитьМассивИменамиДокументовАвизо(ИменаДокументовФиксированнойСтоимости, Ложь);
	
	ТекстОбъединитьДокументыФикс = "";
	Для Каждого ИмяДокумента Из ИменаДокументовФиксированнойСтоимости Цикл
		
		ТекстПоДокументу = "
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Движения.Регистратор,
		|	Движения.НомерСтроки
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный КАК Движения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаЗатрат КАК СчетаЗатрат
		|		ПО Движения.СчетКт = СчетаЗатрат.Счет
		|ГДЕ
		|	Движения.Активность
		|	И Движения.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И Движения.Организация = &Организация
		|	И Движения.Регистратор ССЫЛКА Документ.%ИмяДокумента%
		|";
		
		ТекстПоДокументу = СтрЗаменить(ТекстПоДокументу, "%ИмяДокумента%", ИмяДокумента);
		ТекстОбъединитьДокументыФикс = ТекстОбъединитьДокументыФикс + ТекстПоДокументу;
		
	КонецЦикла;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ОбъединитьДокументыФикс", ТекстОбъединитьДокументыФикс);
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Создает временную таблицу Поступления
Процедура СоздатьПоступления(МенеджерВременныхТаблиц, Период, Организация)
	
	// Поступления =
	//   ОборотДт
	// - ОборотКт (по фиксированной стоимости)
	
	// ОборотДт =
	//   ОборотДтЗапасы
	// + ОборотДтРасходы,
	// при этом в ОборотДтРасходы заполняется поле КорСчет.
	// Это нужно для целей налогового учета - прямые расходы налогового учета
	// задаются с точностью до КорСчета.
	// Корсчет не может быть счетом расходов, потому что все "вторичные" расходы для целей налогового учета считаются прямыми.
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоПериода",       НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода",        КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("ПустоеПодразделение", БухгалтерскийУчетПереопределяемый.ПустоеПодразделение());
	
	// Для учета затрат нас не интересует сумма в розничных ценах.
	// Поэтому если учет товаров в рознице ведется по ценам реализации,
	// то счет 41.11 заменяем на счет 42.01, на котором будут "храниться"
	// затраты в ценах приобретения.
	// При формировании проводок, если необходимо, выполним обратное преобразование.
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Поступления.Счет КАК Счет,
	|	ЕСТЬNULL(Поступления.Подразделение, &ПустоеПодразделение) КАК Подразделение,
	|	Поступления.Субконто1,
	|	Поступления.Субконто2,
	|	Поступления.Субконто3,
	|	Поступления.КорСчет,
	|	СУММА(ЕСТЬNULL(Поступления.Количество, 0)) КАК Количество,
	|	СУММА(ЕСТЬNULL(Поступления.Сумма, 0)) КАК Сумма,
	|	СУММА(ЕСТЬNULL(Поступления.СуммаНУ, 0)) КАК СуммаНУ,
	|	СУММА(ЕСТЬNULL(Поступления.СуммаПР, 0)) КАК СуммаПР,
	|	СУММА(ЕСТЬNULL(Поступления.СуммаВР, 0)) КАК СуммаВР
	|ПОМЕСТИТЬ ВТ_Поступления
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОборотыДтЗапасы.Счет КАК Счет,
	|		ОборотыДтЗапасы.Подразделение КАК Подразделение,
	|		ОборотыДтЗапасы.Субконто1 КАК Субконто1,
	|		ОборотыДтЗапасы.Субконто2 КАК Субконто2,
	|		ОборотыДтЗапасы.Субконто3 КАК Субконто3,
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК КорСчет,
	|		ОборотыДтЗапасы.КоличествоОборотДт КАК Количество,
	|		ОборотыДтЗапасы.СуммаОборотДт КАК Сумма,
	|		ОборотыДтЗапасы.СуммаНУОборотДт КАК СуммаНУ,
	|		ОборотыДтЗапасы.СуммаПРОборотДт КАК СуммаПР,
	|		ОборотыДтЗапасы.СуммаВРОборотДт КАК СуммаВР
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				,
	|				Счет В
	|					(ВЫБРАТЬ
	|						СчетаЗапасов.Счет
	|					ИЗ
	|						СчетаЗапасов),
	|				,
	|				Организация = &Организация,
	|				,
	|				) КАК ОборотыДтЗапасы
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОборотыДтРасходы.Счет,
	|		ЕСТЬNULL(ОборотыДтРасходы.Подразделение, &ПустоеПодразделение),
	|		ОборотыДтРасходы.Субконто1,
	|		ОборотыДтРасходы.Субконто2,
	|		ОборотыДтРасходы.Субконто3,
	|		ОборотыДтРасходы.КорСчет,
	|		ОборотыДтРасходы.КоличествоОборотДт,
	|		ОборотыДтРасходы.СуммаОборотДт,
	|		ОборотыДтРасходы.СуммаНУОборотДт,
	|		ОборотыДтРасходы.СуммаПРОборотДт,
	|		ОборотыДтРасходы.СуммаВРОборотДт
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				,
	|				Счет В
	|					(ВЫБРАТЬ
	|						СчетаРасходов.Счет
	|					ИЗ
	|						СчетаРасходов),
	|				,
	|				Организация = &Организация,
	|				,
	|				) КАК ОборотыДтРасходы
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОборотыКт.СчетКт,
	|		ОборотыКт.ПодразделениеКт,
	|		ОборотыКт.СубконтоКт1,
	|		ОборотыКт.СубконтоКт2,
	|		ОборотыКт.СубконтоКт3,
	|		ВЫБОР
	|			КОГДА СчетаРасходов.Счет ЕСТЬ NULL 
	|				ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|			ИНАЧЕ ОборотыКт.СчетДт
	|		КОНЕЦ,
	|		-ОборотыКт.Количество,
	|		-ОборотыКт.Сумма,
	|		-ОборотыКт.СуммаНУ,
	|		-ОборотыКт.СуммаПР,
	|		-ОборотыКт.СуммаВР
	|	ИЗ
	|		ОборотыФикс КАК ОборотыКт
	|			ЛЕВОЕ СОЕДИНЕНИЕ СчетаРасходов КАК СчетаРасходов
	|			ПО ОборотыКт.СчетДт = СчетаРасходов.Счет) КАК Поступления
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(Поступления.Подразделение, &ПустоеПодразделение),
	|	Поступления.Счет,
	|	Поступления.Субконто1,
	|	Поступления.Субконто2,
	|	Поступления.Субконто3,
	|	Поступления.КорСчет
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СчетаТорговойНаценки.СчетНаценки, Поступления.Счет) КАК Счет,
	|	Поступления.Подразделение КАК Подразделение,
	|	ВЫБОР
	|		КОГДА СуммовойУчет.Субконто1
	|			ТОГДА ЕСТЬNULL(Поступления.Субконто1, НЕОПРЕДЕЛЕНО)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Субконто1,
	|	ВЫБОР
	|		КОГДА СуммовойУчет.Субконто2
	|			ТОГДА ЕСТЬNULL(Поступления.Субконто2, НЕОПРЕДЕЛЕНО)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Субконто2,
	|	ВЫБОР
	|		КОГДА СуммовойУчет.Субконто3
	|			ТОГДА ЕСТЬNULL(Поступления.Субконто3, НЕОПРЕДЕЛЕНО)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Субконто3,
	|	ВЫБОР
	|		КОГДА КорСчетаРасходов.Счет ЕСТЬ NULL 
	|			ТОГДА Поступления.КорСчет
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|	КОНЕЦ КАК КорСчет,
	|	ВЫБОР
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 1
	|			ТОГДА ВЫРАЗИТЬ(Поступления.Субконто1 КАК Справочник.Номенклатура)
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 2
	|			ТОГДА ВЫРАЗИТЬ(Поступления.Субконто2 КАК Справочник.Номенклатура)
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 3
	|			ТОГДА ВЫРАЗИТЬ(Поступления.Субконто3 КАК Справочник.Номенклатура)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	КОНЕЦ КАК Номенклатура,
	|	СУММА(Поступления.Количество) КАК Количество,
	|	СУММА(Поступления.Сумма) КАК Сумма,
	|	СУММА(Поступления.СуммаНУ) КАК СуммаНУ,
	|	СУММА(Поступления.СуммаПР) КАК СуммаПР,
	|	СУММА(Поступления.СуммаВР) КАК СуммаВР
	|ПОМЕСТИТЬ Поступления
	|ИЗ
	|	ВТ_Поступления КАК Поступления
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммовойУчет КАК СуммовойУчет
	|		ПО Поступления.Счет = СуммовойУчет.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаТорговойНаценкиАТТ КАК СчетаТорговойНаценки
	|		ПО Поступления.Счет = СчетаТорговойНаценки.СчетЗапасов
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаЗапасов КАК СчетаЗапасов
	|		ПО Поступления.Счет = СчетаЗапасов.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаРасходов КАК КорСчетаРасходов
	|		ПО Поступления.КорСчет = КорСчетаРасходов.Счет
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(СчетаТорговойНаценки.СчетНаценки, Поступления.Счет),
	|	Поступления.Подразделение,
	|	ВЫБОР
	|		КОГДА СуммовойУчет.Субконто1
	|			ТОГДА ЕСТЬNULL(Поступления.Субконто1, НЕОПРЕДЕЛЕНО)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СуммовойУчет.Субконто2
	|			ТОГДА ЕСТЬNULL(Поступления.Субконто2, НЕОПРЕДЕЛЕНО)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СуммовойУчет.Субконто3
	|			ТОГДА ЕСТЬNULL(Поступления.Субконто3, НЕОПРЕДЕЛЕНО)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 1
	|			ТОГДА ВЫРАЗИТЬ(Поступления.Субконто1 КАК Справочник.Номенклатура)
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 2
	|			ТОГДА ВЫРАЗИТЬ(Поступления.Субконто2 КАК Справочник.Номенклатура)
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 3
	|			ТОГДА ВЫРАЗИТЬ(Поступления.Субконто3 КАК Справочник.Номенклатура)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА КорСчетаРасходов.Счет ЕСТЬ NULL 
	|			ТОГДА Поступления.КорСчет
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет,
	|	Подразделение,
	|	Субконто1,
	|	Субконто2,
	|	Субконто3,
	|	Номенклатура,
	|	КорСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Поступления";
	Запрос.Выполнить();
	
КонецПроцедуры

// Создает временную таблицу ПредварительныеПроводкиВыпуск
Процедура СоздатьПредварительныеПроводкиВыпуск(МенеджерВременныхТаблиц, Период, Организация, СИспользованиемСчета40)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("НачалоПериода",             НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода",              КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организация",               Организация);
	Запрос.УстановитьПараметр("ПлательщикНалогаНаПрибыль", УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, Период));
	Запрос.УстановитьПараметр("ПустоеПодразделение",       БухгалтерскийУчетПереопределяемый.ПустоеПодразделение());
	Запрос.УстановитьПараметр("УчетНаСчетеВыпускПродукцииПоПодразделениям", 
	                                                       ПланыСчетов.Хозрасчетный.ВыпускПродукции.УчетПоПодразделениям);
	
	Если Не СИспользованиемСчета40 Тогда
		Запрос.УстановитьПараметр("ИспользоватьСчетВыпускПродукции",                  Ложь);
		Запрос.УстановитьПараметр("НомерСубконтоВидыСтоимостиВыпускПродукции",        0);
		Запрос.УстановитьПараметр("НомерСубконтоНоменклатурныеГруппыВыпускПродукции", 0);
	Иначе
		Запрос.УстановитьПараметр("ИспользоватьСчетВыпускПродукции", Истина);
		ВидыСубконтоСчет40 = ПланыСчетов.Хозрасчетный.ВыпускПродукции.ВидыСубконто;
		ВидыСтоимости      = ВидыСубконтоСчет40.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыСтоимости);
		Если ВидыСтоимости = Неопределено Тогда
			Запрос.УстановитьПараметр("НомерСубконтоВидыСтоимостиВыпускПродукции", 0);
		Иначе
			Запрос.УстановитьПараметр("НомерСубконтоВидыСтоимостиВыпускПродукции", ВидыСтоимости.НомерСтроки);
		КонецЕсли;
		НоменклатурныеГруппы = ВидыСубконтоСчет40.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
		Если НоменклатурныеГруппы = Неопределено Тогда
			Запрос.УстановитьПараметр("НомерСубконтоНоменклатурныеГруппыВыпускПродукции", 0);
		Иначе
			Запрос.УстановитьПараметр("НомерСубконтоНоменклатурныеГруппыВыпускПродукции", НоменклатурныеГруппы.НомерСтроки);
		КонецЕсли;
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыпускПродукцииУслуг.Продукция КАК Продукция,
	|	ВыпускПродукцииУслуг.СчетСписания КАК СчетДт,
	|	ВыпускПродукцииУслуг.ПодразделениеСписания КАК ПодразделениеДт,
	|	ВыпускПродукцииУслуг.СубконтоСписания1 КАК СубконтоДт1,
	|	ВыпускПродукцииУслуг.СубконтоСписания2 КАК СубконтоДт2,
	|	ВыпускПродукцииУслуг.СубконтоСписания3 КАК СубконтоДт3,
	|	ВыпускПродукцииУслуг.СчетЗатрат КАК СчетКт,
	|	ВыпускПродукцииУслуг.Подразделение КАК ПодразделениеКт,
	|	ВыпускПродукцииУслуг.НоменклатурнаяГруппа КАК НоменклатурнаяГруппаКт,
	|	ВыпускПродукцииУслуг.ПлановаяСтоимостьОборот КАК Сумма
	|ПОМЕСТИТЬ ВТ_ПредварительныеПроводкиВыпускАналитикаРасходов
	|ИЗ
	|	РегистрНакопления.ВыпускПродукцииУслуг.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Организация = &Организация
	|				И СчетЗатрат В
	|					(ВЫБРАТЬ
	|						СчетаРасходов.Счет
	|					ИЗ
	|						СчетаРасходов)) КАК ВыпускПродукцииУслуг
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетКт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Проводки.СчетДт,
	|	Проводки.ПодразделениеДт,
	|	Проводки.СубконтоДт1,
	|	Проводки.СубконтоДт2,
	|	Проводки.СубконтоДт3,
	|	ВЫБОР
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 1
	|			ТОГДА ВЫРАЗИТЬ(Проводки.СубконтоДт1 КАК Справочник.Номенклатура)
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 2
	|			ТОГДА ВЫРАЗИТЬ(Проводки.СубконтоДт2 КАК Справочник.Номенклатура)
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 3
	|			ТОГДА ВЫРАЗИТЬ(Проводки.СубконтоДт3 КАК Справочник.Номенклатура)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	КОНЕЦ КАК НоменклатураДт,
	|	ВЫБОР
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 1
	|			ТОГДА ВЫРАЗИТЬ(Проводки.СубконтоДт1 КАК Справочник.Номенклатура)
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 2
	|			ТОГДА ВЫРАЗИТЬ(Проводки.СубконтоДт2 КАК Справочник.Номенклатура)
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 3
	|			ТОГДА ВЫРАЗИТЬ(Проводки.СубконтоДт3 КАК Справочник.Номенклатура)
	|		ИНАЧЕ Проводки.Продукция
	|	КОНЕЦ КАК ПродукцияДт,
	|	ВЫБОР
	|		КОГДА &ИспользоватьСчетВыпускПродукции
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыпускПродукции)
	|		ИНАЧЕ Проводки.СчетКт
	|	КОНЕЦ КАК СчетКт,
	|	ВЫБОР
	|		КОГДА НЕ &ИспользоватьСчетВыпускПродукции
	|				ИЛИ &УчетНаСчетеВыпускПродукцииПоПодразделениям
	|			ТОГДА Проводки.ПодразделениеКт
	|		ИНАЧЕ &ПустоеПодразделение
	|	КОНЕЦ КАК ПодразделениеКт,
	|	ВЫБОР
	|		КОГДА &НомерСубконтоВидыСтоимостиВыпускПродукции = 1
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСтоимости.Плановая)
	|		КОГДА &НомерСубконтоНоменклатурныеГруппыВыпускПродукции = 1
	|			ТОГДА Проводки.НоменклатурнаяГруппаКт
	|		КОГДА СубконтоНоменклатурныеГруппы.НомерСубконто = 1
	|			ТОГДА Проводки.НоменклатурнаяГруппаКт
	|		КОГДА СубконтоСтатьиЗатрат.НомерСубконто = 1
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СубконтоКт1,
	|	ВЫБОР
	|		КОГДА &НомерСубконтоВидыСтоимостиВыпускПродукции = 2
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСтоимости.Плановая)
	|		КОГДА &НомерСубконтоНоменклатурныеГруппыВыпускПродукции = 2
	|			ТОГДА Проводки.НоменклатурнаяГруппаКт
	|		КОГДА СубконтоНоменклатурныеГруппы.НомерСубконто = 2
	|			ТОГДА Проводки.НоменклатурнаяГруппаКт
	|		КОГДА СубконтоСтатьиЗатрат.НомерСубконто = 2
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СубконтоКт2,
	|	ВЫБОР
	|		КОГДА &НомерСубконтоВидыСтоимостиВыпускПродукции = 3
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСтоимости.Плановая)
	|		КОГДА &НомерСубконтоНоменклатурныеГруппыВыпускПродукции = 3
	|			ТОГДА Проводки.НоменклатурнаяГруппаКт
	|		КОГДА СубконтоНоменклатурныеГруппы.НомерСубконто = 3
	|			ТОГДА Проводки.НоменклатурнаяГруппаКт
	|		КОГДА СубконтоСтатьиЗатрат.НомерСубконто = 3
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СубконтоКт3,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК НоменклатураКт,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК ПродукцияКт,
	|	Проводки.Сумма,
	|	ВЫБОР
	|		КОГДА &ПлательщикНалогаНаПрибыль
	|			ТОГДА Проводки.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаНУ,
	|	0 КАК СуммаПР,
	|	0 КАК СуммаВР
	|ПОМЕСТИТЬ ПредварительныеПроводкиВыпуск
	|ИЗ
	|	ВТ_ПредварительныеПроводкиВыпускАналитикаРасходов КАК Проводки
	|		ЛЕВОЕ СОЕДИНЕНИЕ СубконтоНоменклатурныеГруппы КАК СубконтоНоменклатурныеГруппы
	|		ПО Проводки.СчетКт = СубконтоНоменклатурныеГруппы.Счет
	|			И (НЕ &ИспользоватьСчетВыпускПродукции)
	|		ЛЕВОЕ СОЕДИНЕНИЕ СубконтоСтатьиЗатрат КАК СубконтоСтатьиЗатрат
	|		ПО Проводки.СчетКт = СубконтоСтатьиЗатрат.Счет
	|			И (НЕ &ИспользоватьСчетВыпускПродукции)
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаЗапасов КАК СчетаЗапасов
	|		ПО Проводки.СчетДт = СчетаЗапасов.Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ПредварительныеПроводкиВыпускАналитикаРасходов";
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Создает временную таблицу движений Выбытия.
Процедура СоздатьВыбытия(МенеджерВременныхТаблиц, Период, Организация)
	
	// Выбытия - это движения по Кт счетов учета, кроме операций фиксированной стоимости (см. СоздатьОборотыФикс())
	
	// Выбытия включают в себя движения внутри учета затрат и выбытия из него.
	
	// Среди выбытий внутри учета затрат есть такие, про которые известна дополнительная информация, не хранящаяся в проводках.
	// А именно, для движений по выпуску продукции и услуг по плановой стоимости известно:
	// - факт, что это выпуск
	// - номенклатура, включая номенклатуру внутренних услуг.
	// Эта информация хранится в регистре накопления ВыпускПродукцииУслуг.
	// Поэтому скорректируем информацию о выбытиях внутри учета затрат на данные этого регистра.
	// Важно: 
	// - речь идет только о суммовых движениях
	// - если используется счет 40, то данные регистра модифицируем:
	//   - в регистре ВыпускПродукцииУслуг не упоминается счет 40
	//   - а проводки сформированы по счету 40
	
	СпособУчетаВыпуска     = УчетнаяПолитика.СпособУчетаВыпускаГотовойПродукции(Организация, Период);
	СИспользованиемСчета40 = (СпособУчетаВыпуска = Перечисления.СпособыУчетаВыпускаГотовойПродукции.СИспользованиемСчета40);
	СоздатьПредварительныеПроводкиВыпуск(МенеджерВременныхТаблиц, Период, Организация, СИспользованиемСчета40);
	
	// Выбытия делятся на движения
	// - с "однородным" количеством, которое никогда не меняется в ходе движения ("перемещения")
	// - с "разнородным" количеством
	// Принимаем допущение, что если с обеих сторон движения номенклатура не изменилась,
	// то это движения с "однородным" количеством.
	// У таких движений во временной таблице установлен флаг БезИзмененияКоличества
	// (Важно: если нет номенклатуры на любой из сторон проводки, то это движение с "разнородным" количеством)
	
	// Для учета затрат нас не интересует сумма в розничных ценах.
	// Поэтому если учет товаров в рознице ведется по ценам реализации,
	// то счет 41.11 заменяем на счет 42.01, на котором будут "храниться"
	// затраты в ценах приобретения.
	// При формировании проводок, если необходимо, выполним обратное преобразование.
	
	// Если ведется учет по розничным ценам, то не формируем проводки вида Дт 90 Кт 42,
	// так как такие проводки формируются другой регламентной операцией.
	// Для того, чтобы исключить такие проводки, накладываем условие с использованием таблиц
	// СчетаСебестоимостьПродаж и СчетаТорговойНаценкиАТТ
	
	// Распределение расходов (другими словами, логика выбытия со счетов расходов) оперирует фиксированным составом именованной аналитики 
	// (Подразделениями, НоменклатурнымиГруппами и т.п.).
	// В то же время, пользователь может добавить дополнительную аналитику - оборотные субконто на счета расходов.
	// Она не будет поддержана логикой распределения.
	// Для того, чтобы позволить логике распределения игнорировать такую аналитику, 
	// очистим оборотные субконто пользователя по Кт счетов расходов - заполним их значениями Неопределено.
	// NB: 1. оборотные субконто используются в логике распределения (СтатьиЗатрат). Такие очищать не следует.
	//     2. так как субконто оборотные, то можно игнорировать их по Кт. Но не по Дт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("НачалоПериода",        НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода",         КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организация",          Организация);
	Запрос.УстановитьПараметр("ПустоеПодразделение",  БухгалтерскийУчетПереопределяемый.ПустоеПодразделение());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ ВТ_СчетаСебестоимостьПродаж
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СебестоимостьПродаж))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Обороты.КорСчет КАК СчетДт,
	|	ЕСТЬNULL(Обороты.ПодразделениеКор, &ПустоеПодразделение) КАК ПодразделениеДт,
	|	ЕСТЬNULL(Обороты.КорСубконто1, НЕОПРЕДЕЛЕНО) КАК СубконтоДт1,
	|	ЕСТЬNULL(Обороты.КорСубконто2, НЕОПРЕДЕЛЕНО) КАК СубконтоДт2,
	|	ЕСТЬNULL(Обороты.КорСубконто3, НЕОПРЕДЕЛЕНО) КАК СубконтоДт3,
	|	Обороты.Счет КАК СчетКт,
	|	ЕСТЬNULL(Обороты.Подразделение, &ПустоеПодразделение) КАК ПодразделениеКт,
	|	ЕСТЬNULL(Обороты.Субконто1, НЕОПРЕДЕЛЕНО) КАК СубконтоКт1,
	|	ЕСТЬNULL(Обороты.Субконто2, НЕОПРЕДЕЛЕНО) КАК СубконтоКт2,
	|	ЕСТЬNULL(Обороты.Субконто3, НЕОПРЕДЕЛЕНО) КАК СубконтоКт3,
	|	ЕСТЬNULL(Обороты.КоличествоОборотКт, 0) КАК Количество,
	|	ЕСТЬNULL(Обороты.СуммаОборотКт, 0) КАК Сумма,
	|	ЕСТЬNULL(Обороты.СуммаНУОборотКт, 0) КАК СуммаНУ,
	|	ЕСТЬNULL(Обороты.СуммаПРОборотКт, 0) КАК СуммаПР,
	|	ЕСТЬNULL(Обороты.СуммаВРОборотКт, 0) КАК СуммаВР
	|ПОМЕСТИТЬ ВТ_Выбытия
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Счет В
	|				(ВЫБРАТЬ
	|					СчетаЗатрат.Счет
	|				ИЗ
	|					СчетаЗатрат),
	|			,
	|			Организация = &Организация,
	|			,
	|			) КАК Обороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОборотыФикс.СчетДт,
	|	ОборотыФикс.ПодразделениеДт,
	|	ОборотыФикс.СубконтоДт1,
	|	ОборотыФикс.СубконтоДт2,
	|	ОборотыФикс.СубконтоДт3,
	|	ОборотыФикс.СчетКт,
	|	ОборотыФикс.ПодразделениеКт,
	|	ОборотыФикс.СубконтоКт1,
	|	ОборотыФикс.СубконтоКт2,
	|	ОборотыФикс.СубконтоКт3,
	|	-ОборотыФикс.Количество,
	|	-ОборотыФикс.Сумма,
	|	-ОборотыФикс.СуммаНУ,
	|	-ОборотыФикс.СуммаПР,
	|	-ОборотыФикс.СуммаВР
	|ИЗ
	|	ОборотыФикс КАК ОборотыФикс
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетДт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Обороты.СчетДт КАК СчетДт,
	|	Обороты.ПодразделениеДт КАК ПодразделениеДт,
	|	Обороты.СубконтоДт1 КАК СубконтоДт1,
	|	Обороты.СубконтоДт2 КАК СубконтоДт2,
	|	Обороты.СубконтоДт3 КАК СубконтоДт3,
	|	Обороты.НоменклатураДт КАК НоменклатураДт,
	|	Обороты.СчетКт КАК СчетКт,
	|	Обороты.ПодразделениеКт КАК ПодразделениеКт,
	|	Обороты.СубконтоКт1 КАК СубконтоКт1,
	|	Обороты.СубконтоКт2 КАК СубконтоКт2,
	|	Обороты.СубконтоКт3 КАК СубконтоКт3,
	|	Обороты.НоменклатураКт КАК НоменклатураКт,
	|	Обороты.Выпуск КАК Выпуск,
	|	СУММА(Обороты.Количество) КАК Количество,
	|	СУММА(Обороты.Сумма) КАК Сумма,
	|	СУММА(Обороты.СуммаНУ) КАК СуммаНУ,
	|	СУММА(Обороты.СуммаПР) КАК СуммаПР,
	|	СУММА(Обороты.СуммаВР) КАК СуммаВР
	|ПОМЕСТИТЬ ВТ_ВыбытияВыпуск
	|ИЗ
	|	(ВЫБРАТЬ
	|		Обороты.СчетДт КАК СчетДт,
	|		Обороты.ПодразделениеДт КАК ПодразделениеДт,
	|		Обороты.СубконтоДт1 КАК СубконтоДт1,
	|		Обороты.СубконтоДт2 КАК СубконтоДт2,
	|		Обороты.СубконтоДт3 КАК СубконтоДт3,
	|		ВЫБОР
	|			КОГДА СчетаЗапасовДт.НомерСубконтоНоменклатура = 1
	|				ТОГДА ВЫРАЗИТЬ(Обороты.СубконтоДт1 КАК Справочник.Номенклатура)
	|			КОГДА СчетаЗапасовДт.НомерСубконтоНоменклатура = 2
	|				ТОГДА ВЫРАЗИТЬ(Обороты.СубконтоДт2 КАК Справочник.Номенклатура)
	|			КОГДА СчетаЗапасовДт.НомерСубконтоНоменклатура = 3
	|				ТОГДА ВЫРАЗИТЬ(Обороты.СубконтоДт3 КАК Справочник.Номенклатура)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		КОНЕЦ КАК НоменклатураДт,
	|		Обороты.СчетКт КАК СчетКт,
	|		Обороты.ПодразделениеКт КАК ПодразделениеКт,
	|		Обороты.СубконтоКт1 КАК СубконтоКт1,
	|		Обороты.СубконтоКт2 КАК СубконтоКт2,
	|		Обороты.СубконтоКт3 КАК СубконтоКт3,
	|		ВЫБОР
	|			КОГДА СчетаЗапасовКт.НомерСубконтоНоменклатура = 1
	|				ТОГДА ВЫРАЗИТЬ(Обороты.СубконтоКт1 КАК Справочник.Номенклатура)
	|			КОГДА СчетаЗапасовКт.НомерСубконтоНоменклатура = 2
	|				ТОГДА ВЫРАЗИТЬ(Обороты.СубконтоКт2 КАК Справочник.Номенклатура)
	|			КОГДА СчетаЗапасовКт.НомерСубконтоНоменклатура = 3
	|				ТОГДА ВЫРАЗИТЬ(Обороты.СубконтоКт3 КАК Справочник.Номенклатура)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		КОНЕЦ КАК НоменклатураКт,
	|		ЛОЖЬ КАК Выпуск,
	|		Обороты.Количество КАК Количество,
	|		Обороты.Сумма КАК Сумма,
	|		Обороты.СуммаНУ КАК СуммаНУ,
	|		Обороты.СуммаПР КАК СуммаПР,
	|		Обороты.СуммаВР КАК СуммаВР
	|	ИЗ
	|		ВТ_Выбытия КАК Обороты
	|			ЛЕВОЕ СОЕДИНЕНИЕ СчетаЗапасов КАК СчетаЗапасовДт
	|			ПО Обороты.СчетДт = СчетаЗапасовДт.Счет
	|			ЛЕВОЕ СОЕДИНЕНИЕ СчетаЗапасов КАК СчетаЗапасовКт
	|			ПО Обороты.СчетКт = СчетаЗапасовКт.Счет
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВыпускСторно.СчетДт,
	|		ВыпускСторно.ПодразделениеДт,
	|		ВыпускСторно.СубконтоДт1,
	|		ВыпускСторно.СубконтоДт2,
	|		ВыпускСторно.СубконтоДт3,
	|		ВыпускСторно.НоменклатураДт,
	|		ВыпускСторно.СчетКт,
	|		ВыпускСторно.ПодразделениеКт,
	|		ВыпускСторно.СубконтоКт1,
	|		ВыпускСторно.СубконтоКт2,
	|		ВыпускСторно.СубконтоКт3,
	|		ВыпускСторно.НоменклатураКт,
	|		ЛОЖЬ,
	|		0,
	|		-ВыпускСторно.Сумма,
	|		-ВыпускСторно.СуммаНУ,
	|		-ВыпускСторно.СуммаПР,
	|		-ВыпускСторно.СуммаВР
	|	ИЗ
	|		ПредварительныеПроводкиВыпуск КАК ВыпускСторно
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Выпуск.СчетДт,
	|		Выпуск.ПодразделениеДт,
	|		Выпуск.СубконтоДт1,
	|		Выпуск.СубконтоДт2,
	|		Выпуск.СубконтоДт3,
	|		Выпуск.ПродукцияДт,
	|		Выпуск.СчетКт,
	|		Выпуск.ПодразделениеКт,
	|		Выпуск.СубконтоКт1,
	|		Выпуск.СубконтоКт2,
	|		Выпуск.СубконтоКт3,
	|		Выпуск.ПродукцияКт,
	|		ИСТИНА,
	|		0,
	|		Выпуск.Сумма,
	|		Выпуск.СуммаНУ,
	|		Выпуск.СуммаПР,
	|		Выпуск.СуммаВР
	|	ИЗ
	|		ПредварительныеПроводкиВыпуск КАК Выпуск) КАК Обороты
	|
	|СГРУППИРОВАТЬ ПО
	|	Обороты.СчетДт,
	|	Обороты.ПодразделениеДт,
	|	Обороты.СубконтоДт1,
	|	Обороты.СубконтоДт2,
	|	Обороты.СубконтоДт3,
	|	Обороты.НоменклатураДт,
	|	Обороты.СчетКт,
	|	Обороты.ПодразделениеКт,
	|	Обороты.СубконтоКт1,
	|	Обороты.СубконтоКт2,
	|	Обороты.СубконтоКт3,
	|	Обороты.НоменклатураКт,
	|	Обороты.Выпуск
	|
	|ИМЕЮЩИЕ
	|	(СУММА(Обороты.Количество) <> 0
	|		ИЛИ СУММА(Обороты.Сумма) <> 0
	|		ИЛИ СУММА(Обороты.СуммаНУ) <> 0
	|		ИЛИ СУММА(Обороты.СуммаПР) <> 0
	|		ИЛИ СУММА(Обороты.СуммаВР) <> 0)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетДт,
	|	СчетКт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СчетаЗатратДт.Счет ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ВнутреннееДвижение,
	|	ВЫБОР
	|		КОГДА Движения.НоменклатураКт = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		КОГДА Движения.НоменклатураКт <> Движения.НоменклатураДт
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК БезИзмененияКоличества,
	|	Движения.Выпуск,
	|	ЕСТЬNULL(СчетаТорговойНаценкиКт.СчетНаценки, Движения.СчетКт) КАК СчетКт,
	|	Движения.ПодразделениеКт КАК ПодразделениеКт,
	|	ВЫБОР
	|		КОГДА СубконтоПользователя.Субконто1
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		КОГДА СуммовойУчетКт.Субконто1
	|			ТОГДА Движения.СубконтоКт1
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СубконтоКт1,
	|	ВЫБОР
	|		КОГДА СубконтоПользователя.Субконто2
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		КОГДА СуммовойУчетКт.Субконто2
	|			ТОГДА Движения.СубконтоКт2
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СубконтоКт2,
	|	ВЫБОР
	|		КОГДА СубконтоПользователя.Субконто3
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		КОГДА СуммовойУчетКт.Субконто3
	|			ТОГДА Движения.СубконтоКт3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СубконтоКт3,
	|	Движения.НоменклатураКт КАК НоменклатураКт,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК КорСчетКт,
	|	ЕСТЬNULL(СчетаТорговойНаценкиДт.СчетНаценки, Движения.СчетДт) КАК СчетДт,
	|	Движения.ПодразделениеДт КАК ПодразделениеДт,
	|	ВЫБОР
	|		КОГДА СчетаЗатратДт.Счет ЕСТЬ NULL 
	|			ТОГДА Движения.СубконтоДт1
	|		КОГДА СуммовойУчетДт.Субконто1
	|			ТОГДА Движения.СубконтоДт1
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СубконтоДт1,
	|	ВЫБОР
	|		КОГДА СчетаЗатратДт.Счет ЕСТЬ NULL 
	|			ТОГДА Движения.СубконтоДт2
	|		КОГДА СуммовойУчетДт.Субконто2
	|			ТОГДА Движения.СубконтоДт2
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СубконтоДт2,
	|	ВЫБОР
	|		КОГДА СчетаЗатратДт.Счет ЕСТЬ NULL 
	|			ТОГДА Движения.СубконтоДт3
	|		КОГДА СуммовойУчетДт.Субконто3
	|			ТОГДА Движения.СубконтоДт3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СубконтоДт3,
	|	Движения.НоменклатураДт КАК НоменклатураДт,
	|	ВЫБОР
	|		КОГДА НЕ СчетаРасходовДт.Счет ЕСТЬ NULL 
	|				И СчетаРасходовКт.Счет ЕСТЬ NULL 
	|			ТОГДА Движения.СчетКт
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|	КОНЕЦ КАК КорСчетДт,
	|	СУММА(Движения.Количество) КАК Количество,
	|	СУММА(Движения.Сумма) КАК Сумма,
	|	СУММА(Движения.СуммаНУ) КАК СуммаНУ,
	|	СУММА(Движения.СуммаПР) КАК СуммаПР,
	|	СУММА(Движения.СуммаВР) КАК СуммаВР
	|ПОМЕСТИТЬ Выбытия
	|ИЗ
	|	ВТ_ВыбытияВыпуск КАК Движения
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаЗатрат КАК СчетаЗатратДт
	|		ПО Движения.СчетДт = СчетаЗатратДт.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаРасходов КАК СчетаРасходовДт
	|		ПО Движения.СчетДт = СчетаРасходовДт.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммовойУчет КАК СуммовойУчетДт
	|		ПО Движения.СчетДт = СуммовойУчетДт.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммовойУчет КАК СуммовойУчетКт
	|		ПО Движения.СчетКт = СуммовойУчетКт.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаТорговойНаценкиАТТ КАК СчетаТорговойНаценкиДт
	|		ПО Движения.СчетДт = СчетаТорговойНаценкиДт.СчетЗапасов
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаТорговойНаценкиАТТ КАК СчетаТорговойНаценкиКт
	|		ПО Движения.СчетКт = СчетаТорговойНаценкиКт.СчетЗапасов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетаСебестоимостьПродаж КАК СчетаСебестоимостьПродажДт
	|		ПО Движения.СчетДт = СчетаСебестоимостьПродажДт.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаРасходов КАК СчетаРасходовКт
	|		ПО Движения.СчетКт = СчетаРасходовКт.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ СубконтоПользователя КАК СубконтоПользователя
	|		ПО Движения.СчетКт = СубконтоПользователя.Счет
	|ГДЕ
	|	(СчетаСебестоимостьПродажДт.Счет ЕСТЬ NULL 
	|			ИЛИ СчетаТорговойНаценкиКт.СчетНаценки ЕСТЬ NULL )
	|
	|СГРУППИРОВАТЬ ПО
	|	Движения.ПодразделениеКт,
	|	ВЫБОР
	|		КОГДА СчетаЗатратДт.Счет ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	Движения.ПодразделениеДт,
	|	Движения.НоменклатураДт,
	|	Движения.НоменклатураКт,
	|	Движения.Выпуск,
	|	ЕСТЬNULL(СчетаТорговойНаценкиКт.СчетНаценки, Движения.СчетКт),
	|	ВЫБОР
	|		КОГДА СубконтоПользователя.Субконто1
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		КОГДА СуммовойУчетКт.Субконто1
	|			ТОГДА Движения.СубконтоКт1
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СубконтоПользователя.Субконто2
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		КОГДА СуммовойУчетКт.Субконто2
	|			ТОГДА Движения.СубконтоКт2
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СубконтоПользователя.Субконто3
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		КОГДА СуммовойУчетКт.Субконто3
	|			ТОГДА Движения.СубконтоКт3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ЕСТЬNULL(СчетаТорговойНаценкиДт.СчетНаценки, Движения.СчетДт),
	|	ВЫБОР
	|		КОГДА СчетаЗатратДт.Счет ЕСТЬ NULL 
	|			ТОГДА Движения.СубконтоДт1
	|		КОГДА СуммовойУчетДт.Субконто1
	|			ТОГДА Движения.СубконтоДт1
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СчетаЗатратДт.Счет ЕСТЬ NULL 
	|			ТОГДА Движения.СубконтоДт2
	|		КОГДА СуммовойУчетДт.Субконто2
	|			ТОГДА Движения.СубконтоДт2
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СчетаЗатратДт.Счет ЕСТЬ NULL 
	|			ТОГДА Движения.СубконтоДт3
	|		КОГДА СуммовойУчетДт.Субконто3
	|			ТОГДА Движения.СубконтоДт3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ СчетаРасходовДт.Счет ЕСТЬ NULL 
	|				И СчетаРасходовКт.Счет ЕСТЬ NULL 
	|			ТОГДА Движения.СчетКт
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|	КОНЕЦ
	|
	|ИМЕЮЩИЕ
	|	(СУММА(Движения.Количество) <> 0
	|		ИЛИ СУММА(Движения.Сумма) <> 0
	|		ИЛИ СУММА(Движения.СуммаНУ) <> 0
	|		ИЛИ СУММА(Движения.СуммаПР) <> 0
	|		ИЛИ СУММА(Движения.СуммаВР) <> 0)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетДт,
	|	ПодразделениеДт,
	|	СубконтоДт1,
	|	СубконтоДт2,
	|	СубконтоДт3,
	|	НоменклатураДт,
	|	КорСчетДт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Выбытия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ВыбытияВыпуск
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_СчетаСебестоимостьПродаж
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПредварительныеПроводкиВыпуск";
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Создает временную таблицу НезавершенноеПроизводство с суммами, которые должны остаться в НЗП после оценки затрат
Процедура СоздатьНезавершенноеПроизводство(МенеджерВременныхТаблиц, Период, Организация, Пустая = Ложь)
	
	Если Пустая Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ПустоеПодразделение", БухгалтерскийУчетПереопределяемый.ПустоеПодразделение());
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК Счет,
		|	&ПустоеПодразделение КАК Подразделение,
		|	НЕОПРЕДЕЛЕНО КАК Субконто1,
		|	НЕОПРЕДЕЛЕНО КАК Субконто2,
		|	НЕОПРЕДЕЛЕНО КАК Субконто3,
		|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК КорСчет,
		|	0 КАК Сумма,
		|	0 КАК СуммаНУ
		|ПОМЕСТИТЬ НезавершенноеПроизводство
		|ГДЕ
		|	ЛОЖЬ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Счет,
		|	Подразделение,
		|	Субконто1,
		|	Субконто2,
		|	Субконто3,
		|	Номенклатура,
		|	КорСчет";
		Запрос.Выполнить();
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоПериода",                   НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода",                    КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организация",                     Организация);
	Запрос.УстановитьПараметр("ПустоеПодразделение",             БухгалтерскийУчетПереопределяемый.ПустоеПодразделение());
	Запрос.УстановитьПараметр("ВестиУчетЗатратПоПодразделениям", ПолучитьФункциональнуюОпцию("ВестиУчетЗатратПоПодразделениям"));
	
	// Данные документов ИнвентаризацияНЗП с отбором по счетам прямых расходов,
	// выраженные в виде набора субконто.
	
	// Важно, чтобы в качестве статьи затрат была указана пустая статья затрат, а не Неопределено,
	// поскольку именно на этот ключ собираются прямые затраты со всех статей затрат.
	// См. ДобавитьПравилоНезавершенноеПроизводство
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СуммыНЗП.Ссылка.СчетЗатрат КАК Счет,
	|	ВЫБОР
	|		КОГДА &ВестиУчетЗатратПоПодразделениям = ИСТИНА
	|			ТОГДА СуммыНЗП.Ссылка.ПодразделениеОрганизации
	|		ИНАЧЕ &ПустоеПодразделение
	|	КОНЕЦ КАК Подразделение,
	|	ВЫБОР
	|		КОГДА СубконтоНоменклатурныеГруппы.НомерСубконто = 1
	|			ТОГДА СуммыНЗП.НоменклатурнаяГруппа
	|		КОГДА СубконтоСтатьиЗатрат.НомерСубконто = 1
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Субконто1,
	|	ВЫБОР
	|		КОГДА СубконтоНоменклатурныеГруппы.НомерСубконто = 2
	|			ТОГДА СуммыНЗП.НоменклатурнаяГруппа
	|		КОГДА СубконтоСтатьиЗатрат.НомерСубконто = 2
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Субконто2,
	|	ВЫБОР
	|		КОГДА СубконтоНоменклатурныеГруппы.НомерСубконто = 3
	|			ТОГДА СуммыНЗП.НоменклатурнаяГруппа
	|		КОГДА СубконтоСтатьиЗатрат.НомерСубконто = 3
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Субконто3,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК КорСчет,
	|	СУММА(СуммыНЗП.Сумма) КАК Сумма,
	|	СУММА(СуммыНЗП.СуммаНУ) КАК СуммаНУ
	|ПОМЕСТИТЬ НезавершенноеПроизводство
	|ИЗ
	|	Документ.ИнвентаризацияНЗП.Состав КАК СуммыНЗП
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаПрямыхРасходов КАК СчетаПрямыхРасходов
	|		ПО СуммыНЗП.Ссылка.СчетЗатрат = СчетаПрямыхРасходов.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ СубконтоНоменклатурныеГруппы КАК СубконтоНоменклатурныеГруппы
	|		ПО СуммыНЗП.Ссылка.СчетЗатрат = СубконтоНоменклатурныеГруппы.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ СубконтоСтатьиЗатрат КАК СубконтоСтатьиЗатрат
	|		ПО СуммыНЗП.Ссылка.СчетЗатрат = СубконтоСтатьиЗатрат.Счет
	|ГДЕ
	|	СуммыНЗП.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И СуммыНЗП.Ссылка.Организация = &Организация
	|	И СуммыНЗП.Ссылка.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	СуммыНЗП.Ссылка.СчетЗатрат,
	|	СуммыНЗП.Ссылка.ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА СубконтоНоменклатурныеГруппы.НомерСубконто = 1
	|			ТОГДА СуммыНЗП.НоменклатурнаяГруппа
	|		КОГДА СубконтоСтатьиЗатрат.НомерСубконто = 1
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СубконтоНоменклатурныеГруппы.НомерСубконто = 2
	|			ТОГДА СуммыНЗП.НоменклатурнаяГруппа
	|		КОГДА СубконтоСтатьиЗатрат.НомерСубконто = 2
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СубконтоНоменклатурныеГруппы.НомерСубконто = 3
	|			ТОГДА СуммыНЗП.НоменклатурнаяГруппа
	|		КОГДА СубконтоСтатьиЗатрат.НомерСубконто = 3
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ВестиУчетЗатратПоПодразделениям = ИСТИНА
	|			ТОГДА СуммыНЗП.Ссылка.ПодразделениеОрганизации
	|		ИНАЧЕ &ПустоеПодразделение
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет,
	|	Подразделение,
	|	Субконто1,
	|	Субконто2,
	|	Субконто3,
	|	Номенклатура,
	|	КорСчет";
	Запрос.Выполнить();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРЕОБРАЗОВАНИЕ ИСХОДНЫХ ДАННЫХ В АБСТРАКТНОЕ ОПИСАНИЕ

Процедура СоздатьКлючиВершин(МенеджерВременныхТаблиц)
	
	// МенеджерВременныхТаблиц содержит таблицы 
	// - СчетаЗатрат
	
	// - НачальноеСальдо
	// - Поступления
	// - Выбытия
	
	// Получим ключи всех затрат, известные из первичных документов
	
	// В менеджер добавляются временные таблицы КлючиВершин, ИдентификаторыВершин.
	// КлючиВершин позволяет по набору значений аналитики определить номер вершины,
	// ИдентификаторыВершин - по идентификатору определить аналитику и дополнительные сведения.
	// До распределения расходов количество записей в таблицах одинаковое:
	// они отличаются только индексами и составом полей с дополнительными сведениями.
	
	// После распределения расходов в таблице ИдентификаторыВершин могут присутствовать вершины,
	// которые отсутствуют в КлючиВершин.
	// Это связано с тем, что в ходе распределения могут появляться несколько вершин с одинаковой аналитикой учета,
	// отличающиеся нюансами налогового учета.
	// Одна (и только одна) из вершин с одинаковой аналитикой будет присутствовать в КлючиВершин.
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Вершины.Счет КАК Счет,
	|	Вершины.Подразделение КАК Подразделение,
	|	Вершины.Субконто1 КАК Субконто1,
	|	Вершины.Субконто2 КАК Субконто2,
	|	Вершины.Субконто3 КАК Субконто3,
	|	Вершины.Номенклатура КАК Номенклатура,
	|	Вершины.КорСчет КАК КорСчет
	|ИЗ
	|	НачальноеСальдо КАК Вершины
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Вершины.Счет,
	|	Вершины.Подразделение,
	|	Вершины.Субконто1,
	|	Вершины.Субконто2,
	|	Вершины.Субконто3,
	|	Вершины.Номенклатура,
	|	Вершины.КорСчет
	|ИЗ
	|	Поступления КАК Вершины
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Вершины.СчетДт,
	|	Вершины.ПодразделениеДт,
	|	Вершины.СубконтоДт1,
	|	Вершины.СубконтоДт2,
	|	Вершины.СубконтоДт3,
	|	Вершины.НоменклатураДт,
	|	Вершины.КорСчетДт
	|ИЗ
	|	Выбытия КАК Вершины
	|ГДЕ
	|	Вершины.ВнутреннееДвижение
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Вершины.СчетКт,
	|	Вершины.ПодразделениеКт,
	|	Вершины.СубконтоКт1,
	|	Вершины.СубконтоКт2,
	|	Вершины.СубконтоКт3,
	|	Вершины.НоменклатураКт,
	|	Вершины.КорСчетКт
	|ИЗ
	|	Выбытия КАК Вершины
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Вершины.Счет,
	|	Вершины.Подразделение,
	|	Вершины.Субконто1,
	|	Вершины.Субконто2,
	|	Вершины.Субконто3,
	|	Вершины.Номенклатура,
	|	Вершины.КорСчет
	|ИЗ
	|	НезавершенноеПроизводство КАК Вершины
	|
	|УПОРЯДОЧИТЬ ПО
	|	Счет,
	|	Подразделение,
	|	Субконто1,
	|	Субконто2,
	|	Субконто3,
	|	Номенклатура,
	|	КорСчет";
	
	КлючиВершин = Запрос.Выполнить().Выгрузить();
	
	Если КлючиВершин.Количество() = 0 Тогда
		
		// Колонки таблицы, выгруженной из пустого результата запроса могут быть не типизированными.
		// Поэтому нельзя загрузить такую таблицу в запрос.
		// Создадим пустую временную таблицу
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ПустоеПодразделение", БухгалтерскийУчетПереопределяемый.ПустоеПодразделение());
		Запрос.Текст =
		"ВЫБРАТЬ
		|	0 КАК Идентификатор,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК Счет,
		|	&ПустоеПодразделение КАК Подразделение,
		|	НЕОПРЕДЕЛЕНО КАК Субконто1,
		|	НЕОПРЕДЕЛЕНО КАК Субконто2,
		|	НЕОПРЕДЕЛЕНО КАК Субконто3,
		|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК КорСчет
		|ПОМЕСТИТЬ ВТ_КлючиВершин
		|ГДЕ
		|	ЛОЖЬ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Счет";
		Запрос.Выполнить();
		
	Иначе
		
		// Пронумеруем вершины
		КлючиВершин.Колонки.Добавить("Идентификатор", УчетЗатрат.ТипИдентификатораВершины());
		
		Для Каждого СтрокаТаблицы Из КлючиВершин Цикл
			СтрокаТаблицы.Идентификатор = КлючиВершин.Индекс(СтрокаТаблицы);
		КонецЦикла;
		
		// Поместим ключи всех вершин во временную таблицу.
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("КлючиВершин", КлючиВершин);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КлючиВершин.Идентификатор КАК Идентификатор,
		|	КлючиВершин.Счет КАК Счет,
		|	КлючиВершин.Подразделение КАК Подразделение,
		|	КлючиВершин.Субконто1 КАК Субконто1,
		|	КлючиВершин.Субконто2 КАК Субконто2,
		|	КлючиВершин.Субконто3 КАК Субконто3,
		|	КлючиВершин.Номенклатура КАК Номенклатура,
		|	КлючиВершин.КорСчет КАК КорСчет
		|ПОМЕСТИТЬ ВТ_КлючиВершин
		|ИЗ
		|	&КлючиВершин КАК КлючиВершин
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Счет
		|";
		Запрос.Выполнить();
		
	КонецЕсли;
	
	// Создадим КлючиВершин и ИдентификаторыВершин
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КлючиВершин.Идентификатор КАК Идентификатор,
	|	СчетаЗатрат.РазделУчета КАК РазделУчета,
	|	КлючиВершин.Счет КАК Счет,
	|	КлючиВершин.Подразделение КАК Подразделение,
	|	КлючиВершин.Субконто1 КАК Субконто1,
	|	КлючиВершин.Субконто2 КАК Субконто2,
	|	КлючиВершин.Субконто3 КАК Субконто3,
	|	КлючиВершин.Номенклатура КАК Номенклатура,
	|	КлючиВершин.КорСчет КАК КорСчет
	|ПОМЕСТИТЬ КлючиВершин
	|ИЗ
	|	ВТ_КлючиВершин КАК КлючиВершин
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаЗатрат КАК СчетаЗатрат
	|		ПО КлючиВершин.Счет = СчетаЗатрат.Счет
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет,
	|	Подразделение,
	|	Субконто1,
	|	Субконто2,
	|	Субконто3,
	|	Номенклатура,
	|	КорСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КлючиВершин.Идентификатор КАК Идентификатор,
	|	КлючиВершин.РазделУчета КАК РазделУчета,
	|	КлючиВершин.Счет КАК Счет,
	|	КлючиВершин.Подразделение КАК Подразделение,
	|	КлючиВершин.Субконто1 КАК Субконто1,
	|	КлючиВершин.Субконто2 КАК Субконто2,
	|	КлючиВершин.Субконто3 КАК Субконто3,
	|	КлючиВершин.Номенклатура КАК Номенклатура,
	|	КлючиВершин.КорСчет КАК КорСчет,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ОборотныеСубконто.Субконто1, ЛОЖЬ)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ КлючиВершин.Субконто1
	|	КОНЕЦ КАК НеОборотноеСубконто1,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ОборотныеСубконто.Субконто2, ЛОЖЬ)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ КлючиВершин.Субконто2
	|	КОНЕЦ КАК НеОборотноеСубконто2,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ОборотныеСубконто.Субконто3, ЛОЖЬ)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ КлючиВершин.Субконто3
	|	КОНЕЦ КАК НеОборотноеСубконто3
	|ПОМЕСТИТЬ ИдентификаторыВершин
	|ИЗ
	|	КлючиВершин КАК КлючиВершин
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОборотныеСубконто КАК ОборотныеСубконто
	|		ПО КлючиВершин.Счет = ОборотныеСубконто.Счет
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_КлючиВершин";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ДополнитьВыбытияИдентификаторамиВершин(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Выбытия.ВнутреннееДвижение,
	|	Выбытия.БезИзмененияКоличества,
	|	Выбытия.Выпуск,
	|	Выбытия.СчетКт,
	|	Выбытия.ПодразделениеКт,
	|	Выбытия.СубконтоКт1,
	|	Выбытия.СубконтоКт2,
	|	Выбытия.СубконтоКт3,
	|	Выбытия.НоменклатураКт,
	|	Выбытия.КорСчетКт,
	|	КлючиВершин.Идентификатор КАК Приемник,
	|	КлючиВершин.РазделУчета КАК РазделУчетаПриемник,
	|	Выбытия.СчетДт,
	|	Выбытия.ПодразделениеДт,
	|	Выбытия.СубконтоДт1,
	|	Выбытия.СубконтоДт2,
	|	Выбытия.СубконтоДт3,
	|	Выбытия.НоменклатураДт,
	|	Выбытия.КорСчетДт,
	|	Выбытия.Количество,
	|	Выбытия.Сумма,
	|	Выбытия.СуммаНУ,
	|	Выбытия.СуммаПР,
	|	Выбытия.СуммаВР
	|ПОМЕСТИТЬ ВТ_Выбытия
	|ИЗ
	|	Выбытия КАК Выбытия
	|		ЛЕВОЕ СОЕДИНЕНИЕ КлючиВершин КАК КлючиВершин
	|		ПО Выбытия.СчетДт = КлючиВершин.Счет
	|			И Выбытия.ПодразделениеДт = КлючиВершин.Подразделение
	|			И Выбытия.СубконтоДт1 = КлючиВершин.Субконто1
	|			И Выбытия.СубконтоДт2 = КлючиВершин.Субконто2
	|			И Выбытия.СубконтоДт3 = КлючиВершин.Субконто3
	|			И Выбытия.НоменклатураДт = КлючиВершин.Номенклатура
	|			И Выбытия.КорСчетДт = КлючиВершин.КорСчет
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Выбытия.СчетКт,
	|	Выбытия.ПодразделениеКт,
	|	Выбытия.СубконтоКт1,
	|	Выбытия.СубконтоКт2,
	|	Выбытия.СубконтоКт3,
	|	Выбытия.НоменклатураКт,
	|	Выбытия.КорСчетКт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Выбытия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Выбытия.ВнутреннееДвижение,
	|	Выбытия.БезИзмененияКоличества,
	|	Выбытия.Выпуск,
	|	КлючиВершин.Идентификатор КАК Источник,
	|	КлючиВершин.РазделУчета КАК РазделУчетаИсточник,
	|	Выбытия.СчетКт,
	|	Выбытия.ПодразделениеКт,
	|	Выбытия.СубконтоКт1,
	|	Выбытия.СубконтоКт2,
	|	Выбытия.СубконтоКт3,
	|	Выбытия.НоменклатураКт,
	|	Выбытия.КорСчетКт,
	|	Выбытия.Приемник КАК Приемник,
	|	Выбытия.РазделУчетаПриемник,
	|	Выбытия.СчетДт,
	|	Выбытия.ПодразделениеДт,
	|	Выбытия.СубконтоДт1,
	|	Выбытия.СубконтоДт2,
	|	Выбытия.СубконтоДт3,
	|	Выбытия.НоменклатураДт,
	|	Выбытия.КорСчетДт,
	|	Выбытия.Количество,
	|	Выбытия.Сумма,
	|	Выбытия.СуммаНУ,
	|	Выбытия.СуммаПР,
	|	Выбытия.СуммаВР
	|ПОМЕСТИТЬ Выбытия
	|ИЗ
	|	ВТ_Выбытия КАК Выбытия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КлючиВершин КАК КлючиВершин
	|		ПО Выбытия.СчетКт = КлючиВершин.Счет
	|			И Выбытия.ПодразделениеКт = КлючиВершин.Подразделение
	|			И Выбытия.СубконтоКт1 = КлючиВершин.Субконто1
	|			И Выбытия.СубконтоКт2 = КлючиВершин.Субконто2
	|			И Выбытия.СубконтоКт3 = КлючиВершин.Субконто3
	|			И Выбытия.НоменклатураКт = КлючиВершин.Номенклатура
	|			И Выбытия.КорСчетКт = КлючиВершин.КорСчет
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Источник,
	|	Приемник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Выбытия";
	
	Запрос.Выполнить();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// АЛГОРИТМЫ ОЦЕНКИ СТОИМОСТИ

// Соглашения приработе с суммами

Функция ОписаниеКоллекцииСумм(ИспользуетсяНалоговыйУчет = Истина, ИспользуютсяРазницыПоНалогуНаПрибыль = Истина, РазделятьНебалансовые = Ложь)
	
	ОписаниеСумм = КоллекцииСумм.НовыйОписаниеКоллекцииСумм();
	
	КоллекцииСумм.ДобавитьНаборСумм(ОписаниеСумм, "БухгалтерскийУчет", "Сумма");
	
	Если ИспользуетсяНалоговыйУчет Тогда
		Если РазделятьНебалансовые Тогда
			Ресурсы = "СуммаНУДт,СуммаНУКт";
		Иначе
			Ресурсы = "СуммаНУ";
		КонецЕсли;
		КоллекцииСумм.ДобавитьНаборСумм(ОписаниеСумм, "НалоговыйУчет", Ресурсы);
	КонецЕсли;
	
	Если ИспользуютсяРазницыПоНалогуНаПрибыль Тогда
		Если РазделятьНебалансовые Тогда
			Ресурсы = "СуммаПРДт,СуммаПРКт,СуммаВРДт,СуммаВРКт";
		Иначе
			Ресурсы = "СуммаПР, СуммаВР";
		КонецЕсли;
		КоллекцииСумм.ДобавитьНаборСумм(ОписаниеСумм, ИмяНабораСуммРазницыПоНалогуНаПрибыль(), Ресурсы);
	КонецЕсли;
	
	Возврат ОписаниеСумм;
	
КонецФункции

// Общие методы работы с графом затрат

Функция ГрафЗатрат(МенеджерВременныхТаблиц, ОписаниеСумм)
	
	// ОПИСАНИЕ КОЛЛЕКЦИИ ДЛЯ ХРАНЕНИЯ ГРАФА ЗАТРАТ
	
	ТипИдентификатораВершины = УчетЗатрат.ТипИдентификатораВершины();
	ТипВес                   = Новый ОписаниеТипов("Число");

	Затраты = Новый Структура;
	
	// Описание сумм
	Затраты.Вставить("ОписаниеСумм", ОписаниеСумм);
	
	// Вершины
	Затраты.Вставить("Вершины", Новый ТаблицаЗначений);
	// - заполняются исходными данными
	Затраты.Вершины.Колонки.Добавить("Идентификатор", ТипИдентификатораВершины);
	Затраты.Вершины.Колонки.Добавить("РазделУчета",   Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(7))); // Расходы, Запасы
	Затраты.Вершины.Колонки.Добавить("Вес",           ТипВес);
	// - результат расчета
	КоллекцииСумм.ДополнитьТаблицуЗначенийКолонкамиСумм(Затраты.Вершины, ОписаниеСумм);
	// НомерПередела используется для упорядочивания проводок, 
	// настройки порядка переделов, выводится в справку-расчет.
	// В предельном случае может быть столько переделов, сколько вершин.
	// Используется служебный номер передела "-1"
	КвалификаторыЧислаНомерПередела = Новый КвалификаторыЧисла(
		ТипИдентификатораВершины.КвалификаторыЧисла.Разрядность, 
		ТипИдентификатораВершины.КвалификаторыЧисла.РазрядностьДробнойЧасти,
		ДопустимыйЗнак.Любой);
	Затраты.Вершины.Колонки.Добавить("НомерПередела", Новый ОписаниеТипов("Число", КвалификаторыЧислаНомерПередела));
	// Также колонки могут временно добавляться по ходу работы с графом
	// (удаляются после завершения локальных алгоритмов)
	
	// Ребра
	
	Затраты.Вставить("Ребра", Новый ТаблицаЗначений);
	// - заполняются исходными данными
	Затраты.Ребра.Колонки.Добавить("ВидДвижения",          Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДвиженийРасчетСебестоимости"));
	Затраты.Ребра.Колонки.Добавить("Источник",             ТипИдентификатораВершины);
	Затраты.Ребра.Колонки.Добавить("Приемник",             ТипИдентификатораВершины);
	Затраты.Ребра.Колонки.Добавить("Вес",                  ТипВес);
	Затраты.Ребра.Колонки.Добавить("ПравилоРаспределения", ПравилаРаспределенияРасходов.ТипИмени());
	// - результат расчета
	КоллекцииСумм.ДополнитьТаблицуЗначенийКолонкамиСумм(Затраты.Ребра, ОписаниеСумм);
	// - промежуточные данные
 	// Для определенных ребер рассчитанная сумма не должна меняться после какого-то события ("фиксируется").
	// Например, после того как первоначально оценили ребро, являющееся встречным выпуском,
	// его суммовую оценку нельзя трогать.
	// Другими словами, при обходе графа для его оценки ребро отсутствует, по нему нельзя ходить.
	// Совсем удалить ребро нельзя, потому что оно хранит суммовую оценку.
	// Кроме того, эта оценка повлияла на суммовую оценку приемника.
	// Важно, чтобы для зафиксированных ребер суммовая оценка приемника 
	// не была скорректирована с учетом оценки источника.
	Затраты.Ребра.Колонки.Добавить("Зафиксировано",        Новый ОписаниеТипов("Булево"));
	// Слабые звенья - это те ребра, по которым "порвется" контур.
	// После устранения слабых звеньев граф станет ацикличным.
	Затраты.Ребра.Колонки.Добавить("СлабоеЗвено",          Новый ОписаниеТипов("Булево")); 
	
	// Контуры
	
	// Разомкнутые контуры сохраняются в графе, эти сведения учитываются при оценке - 
	// см. ДооценитьКонтуры()
	// Эту коллекцию заполним по мере нахождения контуров, см. ДобавитьКонтур()
	Затраты.Вставить("Контуры", Новый ТаблицаЗначений);
	Затраты.Контуры.Колонки.Добавить("Вершина", ТипИдентификатораВершины);
	Затраты.Контуры.Колонки.Добавить("Ребра",   Новый ОписаниеТипов("Массив")); 
	Затраты.Контуры.Колонки.Добавить("Вес",     ТипВес);
	
	// ЦелевоеСальдо
	
	// Для ряда вершин задано целевое сальдо - эти суммы должны остаться после оценки.
	// Например, целевое сальдо используется, когда пользователь задал суммы незавершенного производства.
	// Эту коллекцию заполним позже, см. ЗаполнитьЦелевоеСальдо()
	Затраты.Вставить("ЦелевоеСальдо",             Новый ТаблицаЗначений);
	Затраты.Вставить("ОписаниеСуммЦелевоеСальдо", ОписаниеКоллекцииСумм(Истина, Ложь));
	Затраты.ЦелевоеСальдо.Колонки.Добавить("Идентификатор", ТипИдентификатораВершины);
	// Заданы суммы БУ и НУ, а суммы разниц рассчитываются исходя из того, какие разницы есть в затратах
	КоллекцииСумм.ДополнитьТаблицуЗначенийКолонкамиСумм(Затраты.ЦелевоеСальдо, Затраты.ОписаниеСуммЦелевоеСальдо);
	
	Затраты.ЦелевоеСальдо.Индексы.Добавить("Идентификатор");
	
	// НастройкаВстречногоВыпуска
	
	// Граф может содержать таблицу НастройкаВстречногоВыпуска, если это предусмотрено настройками пользователя
	// См. ПрименитьНастройкуВстречногоВыпуска()
	
	// ЗАПОЛНЕНИЕ ГРАФА ЗАТРАТ
	
	// Заполним вершины.
	// МенеджерВременныхТаблиц содержит таблицы КлючиВершин, НачальноеСальдо, Поступления, Выбытия
	
	// Получим следующие данные о вершинах:
	// - суммарный вес всех значимых поступлений. Эта величина арифметически равна сумме всех выбытий и конечного остатка - 
	//   то есть сумме весов всех ребер, которые требуют оценки
	// - суммы внешних (!) поступлений - то есть таких проводок, которые определяют оценку оставшихся проводок
	//   (для этого вычитаем те поступления, что получились в результате выбытий)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Вершины.Идентификатор КАК Идентификатор,
	|	Вершины.РазделУчета КАК РазделУчета,
	|	СУММА(Вершины.Вес) КАК Вес,
	|	СУММА(Вершины.Сумма) КАК Сумма,
	|	СУММА(Вершины.СуммаНУ) КАК СуммаНУ,
	|	СУММА(Вершины.СуммаПР) КАК СуммаПР,
	|	СУММА(Вершины.СуммаВР) КАК СуммаВР
	|ИЗ
	|	(ВЫБРАТЬ
	|		Ключи.Идентификатор КАК Идентификатор,
	|		Ключи.РазделУчета КАК РазделУчета,
	|		0 КАК Вес,
	|		0 КАК Сумма,
	|		0 КАК СуммаНУ,
	|		0 КАК СуммаПР,
	|		0 КАК СуммаВР
	|	ИЗ
	|		ИдентификаторыВершин КАК Ключи
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Ключи.Идентификатор,
	|		Ключи.РазделУчета,
	|		Вершины.Количество,
	|		Вершины.Сумма,
	|		Вершины.СуммаНУ,
	|		Вершины.СуммаПР,
	|		Вершины.СуммаВР
	|	ИЗ
	|		НачальноеСальдо КАК Вершины
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ КлючиВершин КАК Ключи
	|			ПО Вершины.Счет = Ключи.Счет
	|				И Вершины.Подразделение = Ключи.Подразделение
	|				И Вершины.Субконто1 = Ключи.Субконто1
	|				И Вершины.Субконто2 = Ключи.Субконто2
	|				И Вершины.Субконто3 = Ключи.Субконто3
	|				И Вершины.Номенклатура = Ключи.Номенклатура
	|				И Вершины.КорСчет = Ключи.КорСчет
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Ключи.Идентификатор,
	|		Ключи.РазделУчета,
	|		Вершины.Количество,
	|		Вершины.Сумма,
	|		Вершины.СуммаНУ,
	|		Вершины.СуммаПР,
	|		Вершины.СуммаВР
	|	ИЗ
	|		Поступления КАК Вершины
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ КлючиВершин КАК Ключи
	|			ПО Вершины.Счет = Ключи.Счет
	|				И Вершины.Подразделение = Ключи.Подразделение
	|				И Вершины.Субконто1 = Ключи.Субконто1
	|				И Вершины.Субконто2 = Ключи.Субконто2
	|				И Вершины.Субконто3 = Ключи.Субконто3
	|				И Вершины.Номенклатура = Ключи.Номенклатура
	|				И Вершины.КорСчет = Ключи.КорСчет
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Вершины.Приемник,
	|		Вершины.РазделУчетаПриемник,
	|		0,
	|		-Вершины.Сумма,
	|		-Вершины.СуммаНУ,
	|		-Вершины.СуммаПР,
	|		-Вершины.СуммаВР
	|	ИЗ
	|		Выбытия КАК Вершины
	|	ГДЕ
	|		НЕ Вершины.Приемник ЕСТЬ NULL 
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		БазыРаспределения.Источник,
	|		""Расходы"",
	|		БазыРаспределения.База,
	|		0,
	|		0,
	|		0,
	|		0
	|	ИЗ
	|		РаспределениеНаРасходы КАК БазыРаспределения
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		БазыРаспределения.Идентификатор,
	|		""Расходы"",
	|		БазыРаспределения.База,
	|		0,
	|		0,
	|		0,
	|		0
	|	ИЗ
	|		РаспределениеНаСубконто КАК БазыРаспределения) КАК Вершины
	|
	|СГРУППИРОВАТЬ ПО
	|	Вершины.Идентификатор,
	|	Вершины.РазделУчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	Идентификатор";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Затраты.Вершины.Добавить(), Выборка);
	КонецЦикла;
	Затраты.Вершины.ЗаполнитьЗначения(-1, "НомерПередела");
		
	Затраты.Вершины.Индексы.Добавить("Идентификатор"); // См. ОписаниеВершины()
	
	// Заполним ребра.
	
	// Таблица Ребра содержит данные о движениях внутри учета затрат
	
	// Ребра могут быть разных типов (значения перечисления "ВидыДвиженийРасчетСебестоимости"):
	// - "Перемещение"      - ребра между вершинами с однородным весом; такие ребра связывают вершины из разделов "Запасы"
	//                        Вес - количество номенклатуры
	// - "Распределение"    - результат распределения расходов; Источник - из раздела "Расходы"
	//                        Вес - коэффициенты базы распределения
	// - "ПостоянныеРазницы"- результат выделения расходов налогового учета с тем, чтобы поступить с ними по-особенному.
	//                        За счет этого появятся разницы, такие разницы считаются постоянными
	//                        Источник - из раздела "Расходы"
	//                        Вес - не определен
	// - "ВременныеРазницы" - результат выделения расходов налогового учета с тем, чтобы поступить с ними по-особенному.
	//                        За счет этого появятся разницы, такие разницы считаются временными
	//                        Источник - из раздела "Расходы"
	//                        Вес - не определен
	// - "Другое"           - например по результатам комплектации товаров или использования материалов в производстве.
	//                        Вес - количество номенклатуры
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Ребра.ВидДвижения,
	|	Ребра.Источник КАК Источник,
	|	Ребра.Приемник,
	|	СУММА(Ребра.Вес) КАК Вес,
	|	Ребра.ПравилоРаспределения
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийРасчетСебестоимости.Перемещение) КАК ВидДвижения,
	|		Ребра.Источник КАК Источник,
	|		Ребра.Приемник КАК Приемник,
	|		Ребра.Количество КАК Вес,
	|		"""" КАК ПравилоРаспределения
	|	ИЗ
	|		Выбытия КАК Ребра
	|	ГДЕ
	|		Ребра.ВнутреннееДвижение
	|		И Ребра.БезИзмененияКоличества
	|		И Ребра.Количество <> 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийРасчетСебестоимости.Другое),
	|		Прочие.Источник,
	|		Прочие.Приемник,
	|		Прочие.Количество,
	|		""""
	|	ИЗ
	|		Выбытия КАК Прочие
	|	ГДЕ
	|		Прочие.ВнутреннееДвижение
	|		И НЕ Прочие.БезИзмененияКоличества
	|		И Прочие.Количество <> 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийРасчетСебестоимости.Распределение),
	|		БазыРаспределения.Идентификатор,
	|		КлючиПриемник.Идентификатор,
	|		БазыРаспределения.База,
	|		БазыРаспределения.Правило
	|	ИЗ
	|		РаспределениеНаСубконто КАК БазыРаспределения
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ КлючиВершин КАК КлючиПриемник
	|			ПО БазыРаспределения.Счет = КлючиПриемник.Счет
	|				И БазыРаспределения.Подразделение = КлючиПриемник.Подразделение
	|				И БазыРаспределения.Субконто1 = КлючиПриемник.Субконто1
	|				И БазыРаспределения.Субконто2 = КлючиПриемник.Субконто2
	|				И БазыРаспределения.Субконто3 = КлючиПриемник.Субконто3
	|				И БазыРаспределения.Номенклатура = КлючиПриемник.Номенклатура
	|				И БазыРаспределения.КорСчет = КлючиПриемник.КорСчет
	|	ГДЕ
	|		БазыРаспределения.База <> 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийРасчетСебестоимости.Распределение),
	|		БазыРаспределения.Источник,
	|		БазыРаспределения.Приемник,
	|		БазыРаспределения.База,
	|		БазыРаспределения.Правило
	|	ИЗ
	|		РаспределениеНаРасходы КАК БазыРаспределения
	|	ГДЕ
	|		БазыРаспределения.База <> 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОбособленныйНалоговыйУчет.ТипРазниц,
	|		ОбособленныйНалоговыйУчет.Источник,
	|		ОбособленныйНалоговыйУчет.Приемник,
	|		0,
	|		ОбособленныйНалоговыйУчет.Правило
	|	ИЗ
	|		ОбособленныйНалоговыйУчет КАК ОбособленныйНалоговыйУчет) КАК Ребра
	|
	|СГРУППИРОВАТЬ ПО
	|	Ребра.Источник,
	|	Ребра.Приемник,
	|	Ребра.ПравилоРаспределения,
	|	Ребра.ВидДвижения
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ребра.Источник,
	|	Ребра.Приемник";
	
	// Все вершины, используемые в Ребра, должны быть в коллекции Вершины!
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Затраты.Ребра.Добавить(), Выборка);
	КонецЦикла;
	
	// См. ИнцидентныеРебра()
	Затраты.Ребра.Индексы.Добавить("Источник");
	Затраты.Ребра.Индексы.Добавить("Источник,Зафиксировано");
	Затраты.Ребра.Индексы.Добавить("Источник,СлабоеЗвено");
	Затраты.Ребра.Индексы.Добавить("Источник,Зафиксировано,СлабоеЗвено");
	Затраты.Ребра.Индексы.Добавить("Приемник");
	
	Возврат Затраты;
	
КонецФункции

Процедура ЗаполнитьЦелевоеСальдо(Затраты, МенеджерВременныхТаблиц)
	
	// В вершинах графа проставим информацию о суммах незавершенного производства - 
	// то есть тех суммах, которые следует оставить на счетах, несмотря на данные весов вершины и ребер
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Ключи.Идентификатор КАК Идентификатор,
	|	НезавершенноеПроизводство.Сумма КАК Сумма,
	|	НезавершенноеПроизводство.СуммаНУ КАК СуммаНУ
	|ИЗ
	|	НезавершенноеПроизводство КАК НезавершенноеПроизводство
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КлючиВершин КАК Ключи
	|		ПО НезавершенноеПроизводство.Счет = Ключи.Счет
	|			И НезавершенноеПроизводство.Подразделение = Ключи.Подразделение
	|			И НезавершенноеПроизводство.Субконто1 = Ключи.Субконто1
	|			И НезавершенноеПроизводство.Субконто2 = Ключи.Субконто2
	|			И НезавершенноеПроизводство.Субконто3 = Ключи.Субконто3
	|			И НезавершенноеПроизводство.Номенклатура = Ключи.Номенклатура
	|			И НезавершенноеПроизводство.КорСчет = Ключи.КорСчет
	|
	|УПОРЯДОЧИТЬ ПО
	|	Идентификатор";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Затраты.ЦелевоеСальдо.Добавить(), Выборка);
	КонецЦикла;
	
КонецПроцедуры

Функция СкорректироватьОценкуРебра(ОписаниеПриемника, Ребро, НоваяОценкаРебра, ОписаниеСумм)
	
	// В оценке вершины-приемника уже может присутствовать предыдущая оценка ребра.
	// Поэтому скорректируем оценку вершины-приемника 
	// только на сумму разницы между предыдущей и новой оценкой ребра
	Корректировка = КоллекцииСумм.НовыйКоллекцияСумм(ОписаниеСумм);
	КоллекцииСумм.Заполнить(Корректировка, НоваяОценкаРебра, ОписаниеСумм);
	КоллекцииСумм.Вычесть(Корректировка, Ребро, ОписаниеСумм);
	
	// Изменим оценку вершины-приемника
	КоллекцииСумм.Сложить(ОписаниеПриемника, Корректировка, ОписаниеСумм);
	ЭлементыЗатрат.УстановитьОсновнойЭлемент(ОписаниеПриемника, ОписаниеСумм);
	
	// Доведем оценку ребра до новой оценки
	КоллекцииСумм.Заполнить(Ребро, НоваяОценкаРебра, ОписаниеСумм);
	
КонецФункции

Функция ОписаниеВершины(Затраты, Идентификатор)
	
	Возврат Затраты.Вершины.Найти(Идентификатор, "Идентификатор");
	
КонецФункции

Функция ИнцидентныеРебра(Затраты, Вершина, ВключаяСлабыеЗвенья = Ложь, ВключаяЗафиксированные = Ложь)
	
	Отбор = Новый Структура();
	Отбор.Вставить("Источник", Вершина);
	Если НЕ ВключаяЗафиксированные Тогда
		Отбор.Вставить("Зафиксировано", Ложь);
	КонецЕсли;
	Если НЕ ВключаяСлабыеЗвенья Тогда
		Отбор.Вставить("СлабоеЗвено",   Ложь);
	КонецЕсли;
	
	Возврат Затраты.Ребра.НайтиСтроки(Отбор);
	
КонецФункции

Функция МожноЗафиксироватьРебро(Затраты, Ребро)
	
	ОписаниеИсточника = ОписаниеВершины(Затраты, Ребро.Источник);
	
	Если Ребро.Вес = ОписаниеИсточника.Вес Тогда
		// Все затраты из вершины "перетекают" по этому ребру.
		// Его нельзя зафиксировать, так как затраты могут зависнуть в вершине.
		Возврат Ложь;
	Иначе
		// Часть из смежных ребер могут быть слабыми звеньями.
		// Исключим их из расчета, потому что слабые звенья "порвутся", будут позднее зафиксированы.
		// Зафиксированные ребра игнорируем, потому что их вес уже вычтен из веса источника (см. ЗафиксироватьРебро())
		СмежныеРебра = ИнцидентныеРебра(Затраты, Ребро.Источник, Истина);
		
		ВесИсточникаЗаВычетомСлабыхЗвеньев = ОписаниеИсточника.Вес;
		Для Каждого СмежноеРебро Из СмежныеРебра Цикл
			Если СмежноеРебро.СлабоеЗвено Тогда
				ВесИсточникаЗаВычетомСлабыхЗвеньев = ВесИсточникаЗаВычетомСлабыхЗвеньев - СмежноеРебро.Вес;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Ребро.Вес <> ВесИсточникаЗаВычетомСлабыхЗвеньев;
		
	КонецЕсли;
		
КонецФункции

// Общие алгоритмы работы с графом затрат

Функция КорниДеревьев(Затраты)
	
	// Находит вершины с нулевой степенью захода - то есть те, у которых нет предшественников.
	// При поиске корней исключаем слабые звенья (потому что дерево - это по определению ацикличный граф).
	//
	// Для поиска таких вершин всем приемникам ставим метки.
	// Вершины без меток - это корни.
	
	Затраты.Вершины.Колонки.Добавить("ПоступаютЗатраты", Новый ОписаниеТипов("Булево")); // Удалим метки по окончании функции
	
	Для Каждого Ребро Из Затраты.Ребра Цикл
		
		Если Ребро.Зафиксировано ИЛИ Ребро.СлабоеЗвено Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеПриемника = ОписаниеВершины(Затраты, Ребро.Приемник);
		ОписаниеПриемника.ПоступаютЗатраты = Истина;
		
	КонецЦикла;
	
	// Выберем затраты, в которые не поступают затраты
	КорниДеревьев = Затраты.Вершины.НайтиСтроки(Новый Структура("ПоступаютЗатраты", Ложь));
	
	// Метки нужны только для работы этой процедуры
	Затраты.Вершины.Колонки.Удалить("ПоступаютЗатраты");
	
	Возврат КорниДеревьев;
	
КонецФункции

Процедура РазрушитьВсеКонтуры(Затраты, МетодРазрушения, ПравилаРаспределения = Неопределено)
	
	// Произведем серию поисков в глубину в графе.
	// Т.е. из каждой вершины, в которую мы еще ни разу не приходили, запустим поиск в глубину, 
	// который при входе в вершину будет ставить ей метку "Подозреваемая", а при выходе - "Пройдена". 
	// И если поиск в глубину пытается пойти в подозреваемую вершину, то это означает, 
	// что мы нашли цикл.
	// Сам цикл восстановливаем проходом по массиву пути.
	
	// В начальный момент времени все вершины графа со статусом "НеПройдена". 
	// Выполним следующие действия: 
	// - из множества всех не пройденных вершин выберем любую вершину
	// - выполняем для нее процедуру поиска в глубину (DFS)
	// Повторяем эти шаги до тех пор, пока не останется вершин со статусом "НеПройдена"
	
	// Инициализируем поле "Статус", статус может принимать одно из трех значений:
	Статусы = Новый Структура;
	Статусы.Вставить("НеПройдена",    0);
	Статусы.Вставить("Подозреваемая", 1);
	Статусы.Вставить("Пройдена",      2);
	ТипСтатуса = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный));
	Затраты.Вершины.Колонки.Добавить("Статус", ТипСтатуса);
	
	// Заполним поле Выпуск. Оно используется для метода "ВстречныйВыпуск" в НайтиВстречныйВыпускБезНастройки() и НайтиВстречныйВыпускПоНастройке()
	Затраты.Ребра.Колонки.Добавить("Выпуск", Новый ОписаниеТипов("Булево"));
	Если ПравилаРаспределения <> Неопределено Тогда
		
		ПравилаРаспределенияВыпуск = Новый Соответствие;
		Для Каждого Правило Из ПравилаРаспределения Цикл
			Если Правило.Выпуск Тогда
				ПравилаРаспределенияВыпуск.Вставить(Правило.Имя, Правило.Имя);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Ребро Из Затраты.Ребра Цикл
			Если ЗначениеЗаполнено(ПравилаРаспределенияВыпуск[Ребро.ПравилоРаспределения]) Тогда
				Ребро.Выпуск = Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// Определим стартовые вершины, характеризующие область графа, которую будем обходить
	Если МетодРазрушения = "Контрольный" Тогда
		// Этот метод работает со всем графом, остальные - с его частью
		СтартовыеВершины = Затраты.Вершины;
	Иначе
		Если МетодРазрушения = "ВстречныйВыпуск" Тогда
			// Контуры встречного выпуска начинаем искать начиная от вершин расходов
			Отбор = Новый Структура("РазделУчета", "Расходы");
		Иначе
			// Остальные методы предназначены только для раздела "Запасы"
			Отбор = Новый Структура("РазделУчета", "Запасы");
		КонецЕсли;
		СтартовыеВершины = Затраты.Вершины.НайтиСтроки(Отбор);
	КонецЕсли;
	
	// Запустим разрушение
	Для Каждого ОписаниеВершины Из СтартовыеВершины Цикл
		
		Путь = Новый Массив;
		
		РазрушитьКонтурПоискВГлубинуРекурсивно(Затраты, ОписаниеВершины, Путь, МетодРазрушения, Статусы);
		
	КонецЦикла;
	
	// Уберем за собой
	Затраты.Вершины.Колонки.Удалить("Статус");
	Затраты.Ребра.Колонки.Удалить("Выпуск");
	
КонецПроцедуры

Функция РазрушитьКонтурПоискВГлубинуРекурсивно(Затраты, ОписаниеВершины, Путь, МетодРазрушения, Статусы)
	
	Если ОписаниеВершины.Статус = Статусы.Пройдена Тогда
		Возврат Неопределено; // Контуров не найдено
	ИначеЕсли ОписаниеВершины.Статус = Статусы.Подозреваемая Тогда
		// Найдена вершина, входящая в цикл.
		// Разрушаем цикл.
		// Цикл можем разрушить по разному - удалить то или иное ребро цикла.
		// После разрушения цикла текущая вершина станет недостижимой по тому пути,
		// по которому сюда пришли, поэтому обходить глубже бессмысленно.
		Возврат РазрушитьКонтур(Затраты, ОписаниеВершины, Путь, МетодРазрушения);
	КонецЕсли;

	ОписаниеВершины.Статус = Статусы.Подозреваемая;

	// Пойдем из Подозреваемой вершины и если прийдем в эту же, значит нашли контур
	
	Приемники = ИнцидентныеРебра(Затраты, ОписаниеВершины.Идентификатор); // Ходим только по остовным ребрам
	
	Для Каждого Ребро Из Приемники Цикл
		
		
		// Метод "Перемещения" разрушает циклы только в ограниченном пространстве ребер
		Если МетодРазрушения = "Перемещения" И Ребро.ВидДвижения <> Перечисления.ВидыДвиженийРасчетСебестоимости.Перемещение Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеПриемника = ОписаниеВершины(Затраты, Ребро.Приемник);
		
		// Метод "Запасы" ограничивается одноименным разделом учета
		Если МетодРазрушения = "Запасы" И ОписаниеПриемника.РазделУчета <> "Запасы" Тогда
			Продолжить;
		КонецЕсли;
		
		Путь.Добавить(Ребро);
		
		// Продолжим поиск в глубину
		ВершинаВозврата = РазрушитьКонтурПоискВГлубинуРекурсивно(
			Затраты, 
			ОписаниеВершины(Затраты, Ребро.Приемник), 
			Путь, 
			МетодРазрушения,
			Статусы);
			
		// Отступаем на шаг - удаляем последний элемент
		Путь.Удалить(Путь.Количество() - 1);
		
		Если ВершинаВозврата <> Неопределено Тогда
			// Избежим парадокса.
			// После того, как мы разрушили контур, может оказаться, что в этом графе (новом, измененном) 
			// вершина, в которой мы находимся, не достижима по пути, по которому в нее пришли.
			// В таком случае вернемся по следам назад в крайнюю достижимую вершину.
			Если ВершинаВозврата <> ОписаниеВершины.Идентификатор Тогда
				// Текущая вершина недостижима по Пути.
				// Сделаем шаг назад, уничтожим следы пребывания здесь.
				ОписаниеВершины.Статус = Статусы.НеПройдена;
				Возврат ВершинаВозврата;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Если пришли сюда, то подозрения с вершины сняты
	ОписаниеВершины.Статус = Статусы.Пройдена;
	
	Возврат Неопределено; // Контуры не найдены
	
КонецФункции

Функция РазрушитьКонтур(Затраты, ОписаниеВершины, Путь, МетодРазрушения)
	
	Контур = Новый Массив; // Содержит описание ребер из коллекции списка инцидентности
	// Найдем контур
	// Обходим Путь с конца, добавляя ребра до тех пор, пока не вернемся в Вершину 
	КоличествоШагов  = Путь.Количество();
	Для Индекс = 1 По КоличествоШагов Цикл // Обходим массив с конца
		
		Ребро = Путь[КоличествоШагов - Индекс];
		
		// Добавим в Контур ребро, соответствующее шагу,
		// так, чтобы ребра в контуре шли в порядке обхода
		Контур.Вставить(0, Ребро);
		
		Если Ребро.Источник = ОписаниеВершины.Идентификатор Тогда
			// Вернулись в первую по пути обхода вершину, которая принадлежит контуру
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	// Выберем проблемное ребро и удалим его
	Если МетодРазрушения = "ВстречныйВыпуск" Тогда
		
		// Сначала попробуем найти проблемное ребро в соответствии с настройкой
		ПроблемноеРебро = НайтиВстречныйВыпускПоНастройке(Контур, Затраты);
		
		Если ПроблемноеРебро = Неопределено Тогда
			
			ПроблемноеРебро = НайтиВстречныйВыпускБезНастройки(Контур, Затраты);
			
		КонецЕсли;
		
		ПроблемноеРебро.СлабоеЗвено = Истина;
		
	ИначеЕсли МетодРазрушения = "Перемещения" Тогда
		
		// Сократим все ребра контура на одинаковое количество
		МинимальныйВес = Контур[0].Вес;
		Для Каждого Ребро Из Контур Цикл
			МинимальныйВес = Мин(МинимальныйВес, Ребро.Вес);
		КонецЦикла;
		
		Для Каждого Ребро Из Контур Цикл
			
			// Сократим вес ребра
			Ребро.Вес = Ребро.Вес - МинимальныйВес;
			
			// Так как вес вершины соответствует сумме весов оцениваемых движений,
			// то уменьшим вес вершины
			ОписаниеИсточника     = ОписаниеВершины(Затраты, Ребро.Источник);
			ОписаниеИсточника.Вес = ОписаниеИсточника.Вес - МинимальныйВес;
			
			Если Ребро.Вес = 0 Тогда
				ЗафиксироватьРебро(Ребро, ОписаниеИсточника, Затраты.ОписаниеСумм);
			КонецЕсли;
			
		КонецЦикла;
		
		// Запишем контур в граф, чтобы позже его дооценить.
		// Подробнее см. ДооценитьКонтуры()
		// Дооценивать следует исходя из одной вершины, поэтому важно выбрать вершину,
		// которая предоставит адекватную оценку: количество поступления в него должно быть больше, 
		// чем вес, на который сокращены ребра.
		// В общем случае такой вершины может и не быть, поэтому найдем вершину с максимальным весом.
		ВершинаСМаксимальнымВесом = ОписаниеВершины(Затраты, Контур[0].Источник);
		Для Каждого ОписаниеРебра Из Контур Цикл
			ОписаниеИсточника = ОписаниеВершины(Затраты, ОписаниеРебра.Источник);
			Если ОписаниеИсточника.Вес > ВершинаСМаксимальнымВесом.Вес Тогда
				ВершинаСМаксимальнымВесом = ОписаниеИсточника;
			КонецЕсли;
		КонецЦикла;
		
		ДобавитьКонтур(Затраты, ВершинаСМаксимальнымВесом.Идентификатор, МинимальныйВес, Контур);
		
	Иначе
		
		// Приравниваем ко встречному выпуску - один раз пройдем по этому ребру
		ПроблемноеРебро = Контур[0];
		ПроблемноеРебро.СлабоеЗвено = Истина;
		
	КонецЕсли;
	
	// Вернем вершину перед первым по маршруту разомкнутым ребром
	Для Каждого Ребро Из Контур Цикл
		Если Ребро.Зафиксировано ИЛИ Ребро.СлабоеЗвено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ребро.Источник;
	
КонецФункции

Процедура РазрушитьПетли(Затраты)
	
	Для Каждого Ребро Из Затраты.Ребра Цикл
		
		Если Ребро.Зафиксировано Тогда
			Продолжить;
		КонецЕсли;
		
		Если Ребро.Источник <> Ребро.Приемник Тогда
			Продолжить;
		КонецЕсли;
			
		// Это петля
		ОписаниеИсточника = ОписаниеВершины(Затраты, Ребро.Источник);
		ЗафиксироватьРебро(Ребро, ОписаниеИсточника, Затраты.ОписаниеСумм);
		
		// Запишем информацию о контуре, чтобы его дооценить позже
		// См. ДооценитьКонтуры()
		Контур = Новый Массив;
		Контур.Добавить(Ребро);
		ДобавитьКонтур(Затраты, Ребро.Источник, Ребро.Вес, Контур);
				
	КонецЦикла;
		
КонецПроцедуры

Процедура ЗафиксироватьРебро(Ребро, ОписаниеИсточника, ОписаниеСумм)
	
	Ребро.Зафиксировано = Истина;
	
	// Так как фиксируется сумма, то уменьшим на эту сумму оценку источника
	КоллекцииСумм.Вычесть(ОписаниеИсточника, Ребро, ОписаниеСумм);
	
	// Так как вес ребра не участвует в оценке, то уменьшим сумму весов в источнике
	ОписаниеИсточника.Вес = ОписаниеИсточника.Вес - Ребро.Вес;
	
КонецПроцедуры

Процедура ДобавитьКонтур(Затраты, Вершина, Вес, РебраКонтура)
	
	НоваяСтрока = Затраты.Контуры.Добавить();
	НоваяСтрока.Вершина = Вершина;
	НоваяСтрока.Вес     = Вес;
	НоваяСтрока.Ребра   = РебраКонтура;
	
КонецПроцедуры

// Оценка затрат

// Рассчитывает суммы движения исходя из средней цены в оценке источника.
Функция ОценитьДвижение(Знач КоличествоДвижения, КоличествоИсточника, СуммыИсточника, ОписаниеСумм)
	
	Если КоличествоИсточника <= 0 Тогда
		Возврат КоллекцииСумм.НовыйКоллекцияСумм(ОписаниеСумм);
	КонецЕсли;
	
	КоличествоДвижения = Мин(КоличествоИсточника, КоличествоДвижения);
	
	// Рассчитаем оценку движения
	ОценкаДвижения = Доля(СуммыИсточника, ОписаниеСумм, КоличествоДвижения, КоличествоИсточника);
	
	// Скорректируем оценку источника
	КоличествоИсточника = КоличествоИсточника - КоличествоДвижения;
	КоллекцииСумм.Вычесть(СуммыИсточника, ОценкаДвижения, ОписаниеСумм);
	
	Возврат ОценкаДвижения;
	
КонецФункции

Функция Доля(ИсходныеСуммы, ОписаниеСумм, Числитель, Знаменатель)
	
	Результат = КоллекцииСумм.Доля(ИсходныеСуммы, ОписаниеСумм, Числитель, Знаменатель);
	
	ИсправитьПогрешностиОкругленияРазницыПоНалогуНаПрибыль(Результат, ИсходныеСуммы, ОписаниеСумм, Числитель, Знаменатель);
	ЭлементыЗатрат.Исправить(Результат, ОписаниеСумм);
	
	Возврат Результат;
	
КонецФункции

Процедура ИсключитьЦелевоеСальдо(Суммы, Затраты, ОписаниеВершины)
	
	Если ОписаниеВершины.РазделУчета <> "Расходы" Тогда
		Возврат;
	КонецЕсли;
	
	ЦелевоеСальдо = Затраты.ЦелевоеСальдо.Найти(ОписаниеВершины.Идентификатор, "Идентификатор");
	Если ЦелевоеСальдо = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если КоллекцииСумм.Пустая(ЦелевоеСальдо, Затраты.ОписаниеСуммЦелевоеСальдо) Тогда
		Возврат;
	КонецЕсли;
	
	ДостижимоеСальдо = КоллекцииСумм.НовыйКоллекцияСумм(Затраты.ОписаниеСумм);
	
	КоллекцииСумм.Заполнить(ДостижимоеСальдо, Суммы, Затраты.ОписаниеСуммЦелевоеСальдо);
	КоллекцииСумм.Ограничить(ДостижимоеСальдо, ЦелевоеСальдо, Затраты.ОписаниеСуммЦелевоеСальдо);
	
	// Дополним данные о достижимом сальдо разницами.
	// Рассчитаем их так, чтобы выглядело достоверно - 
	// разницы были такими же, как и в оценке расходов.
	РассчитатьРазницыПоНалогуНаПрибыль(ДостижимоеСальдо, ОписаниеВершины, Затраты.ОписаниеСумм);
	
	КоллекцииСумм.Вычесть(Суммы, ДостижимоеСальдо, Затраты.ОписаниеСумм);
	
	ЭлементыЗатрат.Исправить(Суммы, Затраты.ОписаниеСумм);
	
КонецПроцедуры

Процедура ОценитьЗатраты(Затраты)
	
	Затраты.Вершины.Колонки.Добавить("КоличествоИсточников",             УчетЗатрат.ТипИдентификатораВершины());
	Затраты.Вершины.Колонки.Добавить("КоличествоРассчитанныхИсточников", УчетЗатрат.ТипИдентификатораВершины());
	Затраты.Вершины.Колонки.Добавить("Достижима", Новый ОписаниеТипов("Булево")); // Достижима из стартовых вершин
	Затраты.Вершины.Колонки.Добавить("ВОчереди",  Новый ОписаниеТипов("Булево")); // Для обхода в ширину
	
	СтартовыеВершины = КорниДеревьев(Затраты);
	
	Пока СтартовыеВершины.Количество() > 0 Цикл
		
		// Используем для хранения очереди коллекцию СтартовыеВершины.
		// Отметим, что стартовые вершины уже стоят в очереди.
		// Признак ВОчереди нужен, чтобы исключить попадание вершины в очередь несколько раз.
		Для Каждого ОписаниеВершины Из СтартовыеВершины Цикл
			ОписаниеВершины.ВОчереди  = Истина;
		КонецЦикла;
		
		// Проставим у каждой вершины число источников. При этом не считаем источниками те, что инцидентны через слабые звенья
		// Используем обход графа в ширину
		Пока СтартовыеВершины.Количество() > 0 Цикл
			
			ОписаниеИсточника = СтартовыеВершины[0];
			ОписаниеИсточника.Достижима = Истина;
			
			Приемники = ИнцидентныеРебра(Затраты, ОписаниеИсточника.Идентификатор); // Ходим только по остовным ребрам
			
			Для Каждого Ребро Из Приемники Цикл
				
				ОписаниеПриемника = ОписаниеВершины(Затраты, Ребро.Приемник);
				ОписаниеПриемника.КоличествоИсточников = ОписаниеПриемника.КоличествоИсточников + 1;
				
				Если НЕ ОписаниеПриемника.ВОчереди Тогда
					// Не ставим в очередь несколько раз
					ОписаниеПриемника.ВОчереди = Истина;
					СтартовыеВершины.Добавить(ОписаниеПриемника);
				КонецЕсли;
				
			КонецЦикла;
			
			СтартовыеВершины.Удалить(0);
			
		КонецЦикла;
		
		СтартовыеВершины = Неопределено; // Следствие: признак "ВОчереди" более использовать нельзя
		
		// Выполняем оценку, начиная с достижимых вершин, у которых КоличествоИсточников = 0
		Отбор = Новый Структура;
		Отбор.Вставить("Достижима",            Истина);
		Отбор.Вставить("КоличествоИсточников", 0);
		СтартовыеВершины = Затраты.Вершины.НайтиСтроки(Отбор);
		
		// Обходим граф в ширину, таким образом, чтобы обход из вершины стартовал только тогда,
		// когда все источники для нее рассчитаны.
		// В ходе обхода оцениваем ребра.
		// Слабые звенья разрываем. Запоминаем вершины, в которые вели разрушенные ребра.
		ВершиныСлабыхЗвеньев = Новый Массив;
		
		Пока СтартовыеВершины.Количество() > 0 Цикл
			
			ОписаниеИсточника = СтартовыеВершины[0];
			
			// Вершины, которые подверглись оценке, имеют неотрицательный номер передела
			Если ОписаниеИсточника.НомерПередела < 0 Тогда
				ОписаниеИсточника.НомерПередела = 0;
			КонецЕсли;
			
			// Оценим инцидентные ребра:
			// цена всех инцидентных ребер - одинаковая
			КоличествоИсточника = 0 + ОписаниеИсточника.Вес;
			СуммыИсточника = КоллекцииСумм.НовыйКоллекцияСумм(Затраты.ОписаниеСумм); // При распределении будем изменять эту коллекцию
			КоллекцииСумм.Заполнить(СуммыИсточника, ОписаниеИсточника, Затраты.ОписаниеСумм);
			ИсключитьЦелевоеСальдо(СуммыИсточника, Затраты, ОписаниеИсточника);
			
			// Идем по приемникам, включая слабые звенья, но не включая зафиксированные ребра
			Приемники = ИнцидентныеРебра(Затраты, ОписаниеИсточника.Идентификатор, Истина);
			
			// Создадим кэш описаний приемников, чтобы сократить число поисков
			ОписанияПриемников = Новый Соответствие;
			Для Каждого Ребро Из Приемники Цикл
				ОписаниеПриемника = ОписаниеВершины(Затраты, Ребро.Приемник);
				ОписанияПриемников.Вставить(Ребро.Приемник, ОписаниеПриемника);
			КонецЦикла;
			
			// Сначала обработаем расщепление расходов в налоговом учете.
			Для Каждого Ребро Из Приемники Цикл
				
				Если НЕ (Ребро.ВидДвижения = Перечисления.ВидыДвиженийРасчетСебестоимости.ПостоянныеРазницы
					ИЛИ Ребро.ВидДвижения = Перечисления.ВидыДвиженийРасчетСебестоимости.ВременныеРазницы) Тогда
					Продолжить;
				КонецЕсли;
					
				ОценкаРебра = ВыделитьНалоговыйУчет(Ребро.ВидДвижения, СуммыИсточника, Затраты.ОписаниеСумм);
				СкорректироватьОценкуРебра(ОписанияПриемников[Ребро.Приемник], Ребро, ОценкаРебра, Затраты.ОписаниеСумм);
				
			КонецЦикла;
				
			// Затем распределим суммы источника, оставшиеся после расщепления.
			Для Каждого Ребро Из Приемники Цикл
				
				Если Ребро.ВидДвижения = Перечисления.ВидыДвиженийРасчетСебестоимости.ПостоянныеРазницы
					ИЛИ Ребро.ВидДвижения = Перечисления.ВидыДвиженийРасчетСебестоимости.ВременныеРазницы Тогда
					Продолжить;
				КонецЕсли;
				
				ОценкаРебра = ОценитьДвижение(Ребро.Вес, КоличествоИсточника, СуммыИсточника, Затраты.ОписаниеСумм);
				СкорректироватьОценкуРебра(ОписанияПриемников[Ребро.Приемник], Ребро, ОценкаРебра, Затраты.ОписаниеСумм);
				
			КонецЦикла;
				
			// Наконец, сделаем следующий шаг - в каждый из приемников затрат
			Для Каждого Ребро Из Приемники Цикл
				
				ОписаниеПриемника = ОписанияПриемников[Ребро.Приемник];
				
				Если Ребро.СлабоеЗвено Тогда
					
					// По слабому звену проходим только один раз - уже прошли, больше не пойдем
					ЗафиксироватьРебро(Ребро, ОписаниеИсточника, Затраты.ОписаниеСумм);
					
					// Из этой вершины запустим расчет еще раз, чтобы "рассосались" по всему графу последствия прохода по слабому звену
					ВершиныСлабыхЗвеньев.Добавить(ОписаниеПриемника);
					
				Иначе
					
					// Покажем, что рассчитали приемник
					ОписаниеПриемника.КоличествоРассчитанныхИсточников = ОписаниеПриемника.КоличествоРассчитанныхИсточников + 1;
					
					// Запустим расчет со следующей вершины, если все ее источники рассчитаны
					Если ОписаниеПриемника.КоличествоИсточников = ОписаниеПриемника.КоличествоРассчитанныхИсточников Тогда
						ОписаниеПриемника.НомерПередела = ОписаниеИсточника.НомерПередела + 1;
						СтартовыеВершины.Добавить(ОписаниеПриемника);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла; // По инцидентным ребрам
			
			СтартовыеВершины.Удалить(0);
			
		КонецЦикла;
		
		// Не допускаем одинаковые элементы в очереди
		СтартовыеВершины = ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(ВершиныСлабыхЗвеньев);
		
		// Инициализируем метки для следующей итерации
		Затраты.Вершины.ЗаполнитьЗначения(0,    "КоличествоИсточников");
		Затраты.Вершины.ЗаполнитьЗначения(0,    "КоличествоРассчитанныхИсточников");
		Затраты.Вершины.ЗаполнитьЗначения(Ложь, "Достижима");
		Затраты.Вершины.ЗаполнитьЗначения(Ложь, "ВОчереди");
		
	КонецЦикла;
	
	Затраты.Вершины.Колонки.Удалить("КоличествоИсточников");
	Затраты.Вершины.Колонки.Удалить("КоличествоРассчитанныхИсточников");
	Затраты.Вершины.Колонки.Удалить("Достижима");
	Затраты.Вершины.Колонки.Удалить("ВОчереди");
	
КонецПроцедуры

Функция ВыделитьНалоговыйУчет(ВидДвижения, СуммыИсточника, ОписаниеСумм)
	
	// В ходе выделения сумм налогового учета на другую вершину переносятся только суммы налогового учета.
	// В результате отражаются временные или постоянные разницы.
	// Какие именно определяется типом ребра.
	// Выделение сумм налогового учета нужно для того, чтобы поддержать разные правила для целей бухгалтерского и налогового учета.
	
	// Для пары БУ_ПР и НУ_ПР:
	// для вида учета БУ
	// БУ = БУ()
	// НУ = 0
	// ПР = ПР() + НУ()
	// ВР = ВР()
	// для вида учета НУ
	// БУ = 0
	// НУ = НУ()
	// ПР = - НУ()
	// ВР = 0
	// Таким образом, суммы ПР и ВР "ходят" вслед за суммой БУ,
	// а если возникают дополнительные разницы, то они считаются постоянными
	
	СуммыРебра = КоллекцииСумм.НовыйКоллекцияСумм(ОписаниеСумм);
	
	Если Не КоллекцииСумм.ЕстьНаборСумм(ОписаниеСумм, "НалоговыйУчет") Тогда
		Возврат СуммыРебра;
	КонецЕсли;
	
	СуммыРебра.СуммаНУ     = СуммыИсточника.СуммаНУ; // то же, что и СуммыИсточника.СуммаНУ + СуммыРебра.СуммаНУ
	СуммыИсточника.СуммаНУ = 0;                      // то же, что и СуммыИсточника.СуммаНУ - СуммыРебра.СуммаНУ
	
	Если Не ЕстьРазницыПоНалогуНаПрибыль(ОписаниеСумм) Тогда
		Возврат СуммыРебра;
	КонецЕсли;
	
	Если ВидДвижения = Перечисления.ВидыДвиженийРасчетСебестоимости.ПостоянныеРазницы Тогда
		
		СуммыРебра.СуммаПР     = - СуммыРебра.СуммаНУ; // то же, что и СуммыРебра.СуммаПР - СуммыРебра.СуммаНУ
		СуммыИсточника.СуммаПР = СуммыИсточника.СуммаПР + СуммыРебра.СуммаНУ;
		
	ИначеЕсли ВидДвижения = Перечисления.ВидыДвиженийРасчетСебестоимости.ВременныеРазницы Тогда
		
		СуммыРебра.СуммаВР     = - СуммыРебра.СуммаНУ; // то же, что и СуммыРебра.СуммаВР - СуммыРебра.СуммаНУ
		СуммыИсточника.СуммаВР = СуммыИсточника.СуммаВР + СуммыРебра.СуммаНУ;
		
	КонецЕсли;
	
	Возврат СуммыРебра;
		
КонецФункции

Процедура ДооценитьКонтуры(Затраты)
	
	// Контуры размыкаются потому, что этого требует выбранный математический алгоритм оценки.
	// То есть, они размыкаются, чтобы получить оценку.
	// В результате получается корректная сумма оценки всех движений "за контуром",
	// однако сумма движений, соответствующих сокращенным ребрам может получиться неверной, заниженной.
	// Чтобы получить адекватную сумму движений, соответствующих сокращенным ребрам, 
	// следует после оценки графа дооценить ребра, входящие в разомкнутые контуры.
	// Пример: потребуется дать оценку проводкам 2 и 3, 
	// несмотря на то, что эти движения не влияют на последующие движения (финансовый результат, проводка 4)
	// 1. Дт 41/1 Кт 60     10 шт на 1000 руб
	// 2. Дт 41/2 Кт 41/1   5 шт
	// 3. Дт 41/1 Кт 41/2   5 шт
	// 4. Дт 90   Кт 41/1   10 шт (на 1000 руб)
	// В ходе оценки графа движения 2 и 3 получили нулевую оценку.
	// Теперь дадим им новую оценку исходя из суммовой оценки той вершины, к которой "привязан" контур.
	
	ОписаниеСумм = Затраты.ОписаниеСумм;
	
	Для Каждого Контур Из Затраты.Контуры Цикл
		
		ОписаниеВершины = ОписаниеВершины(Затраты, Контур.Вершина);
		
		Если ОписаниеВершины.Вес = 0 Тогда
			// Ничего не сможем оценить исходя из такой вершины
			Продолжить;
		КонецЕсли;
	
		// Количество источника может быть меньше, чем количество движения.
		// В таком случае сумма дооценки должна быть больше, чем сумма источника 
		// (в отличие от остальных случаев оценки движений)
		// Поэтому здесь не используем ОценитьДвижение()
		
		СуммыДооценки = Доля(ОписаниеВершины, ОписаниеСумм, Контур.Вес, ОписаниеВершины.Вес);
		
		Для Каждого Ребро Из Контур.Ребра Цикл
			
			// Используем общий подход - сначала рассчитаем полную сумму движения, затем - сумму корректировки
			НоваяОценкаРебра = КоллекцииСумм.НовыйКоллекцияСумм(ОписаниеСумм);
			КоллекцииСумм.Заполнить(НоваяОценкаРебра, Ребро, ОписаниеСумм);
			КоллекцииСумм.Сложить(НоваяОценкаРебра, СуммыДооценки, ОписаниеСумм);
			
			ОписаниеПриемника = ОписаниеВершины(Затраты, Ребро.Приемник);
			СкорректироватьОценкуРебра(ОписаниеПриемника, Ребро, НоваяОценкаРебра, ОписаниеСумм);

			Если Ребро.Зафиксировано Тогда
				// Скорректируем оценку источника - так всегда поступаем с зафиксированными ребрами
				ОписаниеИсточника = ОписаниеВершины(Затраты, Ребро.Источник);
				КоллекцииСумм.Вычесть(ОписаниеИсточника, СуммыДооценки, ОписаниеСумм);
			КонецЕсли;
			
		КонецЦикла;
			
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗафиксироватьПредварительнуюОценкуЗапасов(Затраты, МенеджерВременныхТаблиц)
	
	Затраты.Ребра.Колонки.Добавить("Индекс", Новый ОписаниеТипов("Число")); // Нужен для помещения во временную таблицу, удалим в конце процедуры
	Для Каждого СтрокаТаблицы Из Затраты.Ребра Цикл
		СтрокаТаблицы.Индекс = Затраты.Ребра.Индекс(СтрокаТаблицы);
	КонецЦикла;
	
	ЛишниеВершины = ЗапасыНаКоторыеНеВлияютРасходы(Затраты);
	ИдентификаторыЛишнихВершин = Новый ТаблицаЗначений;
	ИдентификаторыЛишнихВершин.Колонки.Добавить("Идентификатор", УчетЗатрат.ТипИдентификатораВершины());
	Для Каждого СтрокаТаблицы Из ЛишниеВершины Цикл
		ИдентификаторыЛишнихВершин.Добавить().Идентификатор = СтрокаТаблицы.Идентификатор;
	КонецЦикла;
	
	// Найдем ребра из "лишних" вершин в остальную часть графа.
	// На предварительную оценку таких ребер увеличим оценку приемников.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ЛишниеВершины", ИдентификаторыЛишнихВершин);
	Запрос.УстановитьПараметр("Ребра",         Затраты.Ребра);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЛишниеВершины.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ЛишниеВершины
	|ИЗ
	|	&ЛишниеВершины КАК ЛишниеВершины
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ребра.Индекс КАК Индекс,
	|	Ребра.Источник КАК Источник,
	|	Ребра.Приемник КАК Приемник
	|ПОМЕСТИТЬ ВТ_Ребра
	|ИЗ
	|	&Ребра КАК Ребра
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Источник,
	|	Приемник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ребра.Источник КАК Источник,
	|	Ребра.Приемник КАК Приемник
	|ПОМЕСТИТЬ ВТ_РебраИзЛишнихВершин
	|ИЗ
	|	ВТ_Ребра КАК Ребра
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЛишниеВершины КАК ЛишниеВершины
	|		ПО Ребра.Источник = ЛишниеВершины.Идентификатор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Приемник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ребра.Источник КАК Источник,
	|	Ребра.Приемник КАК Приемник
	|ПОМЕСТИТЬ ВТ_ЛишниеРебраВлияютНаРасходы
	|ИЗ
	|	ВТ_РебраИзЛишнихВершин КАК Ребра
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЛишниеВершины КАК ЛишниеВершины
	|		ПО Ребра.Приемник = ЛишниеВершины.Идентификатор
	|ГДЕ
	|	ЛишниеВершины.Идентификатор ЕСТЬ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Источник,
	|	Приемник";
	Запрос.Выполнить();
	
	// Разделим запросы, формирующие временные таблицы и запросы, выбирающие данные,
	// чтобы не вычислять номера запросов в пакете
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Ребра.Индекс КАК Индекс
	|ИЗ
	|	ВТ_Ребра КАК Ребра
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_РебраИзЛишнихВершин КАК ЛишниеРебра
	|		ПО Ребра.Источник = ЛишниеРебра.Источник
	|			И Ребра.Приемник = ЛишниеРебра.Приемник
	|
	|УПОРЯДОЧИТЬ ПО
	|	Индекс УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ребра.Приемник КАК Идентификатор,
	|	СУММА(Выбытия.Сумма) КАК Сумма,
	|	СУММА(Выбытия.СуммаНУ) КАК СуммаНУ,
	|	СУММА(Выбытия.СуммаПР) КАК СуммаПР,
	|	СУММА(Выбытия.СуммаВР) КАК СуммаВР
	|ИЗ
	|	ВТ_ЛишниеРебраВлияютНаРасходы КАК Ребра
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Выбытия КАК Выбытия
	|		ПО Ребра.Источник = Выбытия.Источник
	|			И Ребра.Приемник = Выбытия.Приемник
	|
	|СГРУППИРОВАТЬ ПО
	|	Ребра.Приемник";
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	// Удалим лишние ребра из графа.
	Выборка = РезультатЗапроса[0].Выбрать();
	// Выборка отсортирована по убыванию строки - то есть удалять будем с конца таблицы ребер, чтобы не "порушить" индексы строк.
	Пока Выборка.Следующий() Цикл
		Затраты.Ребра.Удалить(Выборка.Индекс);
	КонецЦикла;
	
	// На оценку удаленных ребер скорректируем оценку вершин графа
	// (конечно, корректируем только вершины, которые не подлежат удалению)
	Выборка = РезультатЗапроса[1].Выбрать();
	ОписаниеСуммВыборка = ОписаниеКоллекцииСумм();
	Пока Выборка.Следующий() Цикл
		ОписаниеВершины = ОписаниеВершины(Затраты, Выборка.Идентификатор);
		КоллекцииСумм.Сложить(ОписаниеВершины, Выборка, ОписаниеСуммВыборка);
		ЭлементыЗатрат.УстановитьОсновнойЭлемент(ОписаниеВершины, Затраты.ОписаниеСумм);
	КонецЦикла;
	
	// Удалим лишние вершины из графа
	// Из таблицы Выбытия лишние ребра можно не удалять, потому что проводки формируются только с участием тех вершин-источников,
	// которые есть в графе
	Для Каждого ОписаниеВершины Из ЛишниеВершины Цикл
		
		СтрокиКУдалению = Затраты.Контуры.НайтиСтроки(Новый Структура("Вершина", ОписаниеВершины.Идентификатор));
		Для Каждого СтрокаТаблицы Из СтрокиКУдалению Цикл
			Затраты.Контуры.Удалить(СтрокаТаблицы);
		КонецЦикла;
		
		СтрокиКУдалению = Затраты.ЦелевоеСальдо.НайтиСтроки(Новый Структура("Идентификатор", ОписаниеВершины.Идентификатор));
		Для Каждого СтрокаТаблицы Из СтрокиКУдалению Цикл
			Затраты.ЦелевоеСальдо.Удалить(СтрокаТаблицы);
		КонецЦикла;
		
		Затраты.Вершины.Удалить(ОписаниеВершины);
		
	КонецЦикла;
	
	// Уберем за собой
	Затраты.Ребра.Колонки.Удалить("Индекс");
	
	Запрос.Текст = 
	"УНИЧТОЖИТЬ ВТ_Ребра
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ЛишниеРебраВлияютНаРасходы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_РебраИзЛишнихВершин";
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ЗапасыНаКоторыеНеВлияютРасходы(Затраты)
	
	// Находим вершины, у которых среди предшественников ни в одном поколении нет расходов.
	//
	// Для поиска таких вершин применим такой алгоритм:
	// - поджигаем все вершины из раздела "Расходы"
	// - "горящие" вершины "поджигают" смежные - пока не "сгорит" все, куда можно добраться
	// - не "сгоревшие" вершины - лишние (они в силу алгоритма из раздела "Запасы")
	
	Затраты.Вершины.Колонки.Добавить("ПоступаютРасходы", Новый ОписаниеТипов("Булево")); // Удалим метки по окончании функции
	
	ОчередьВершин = Новый Массив;
	
	// Ставим в очередь все расходы
	Для Каждого ОписаниеВершины Из Затраты.Вершины Цикл
		Если ОписаниеВершины.РазделУчета = "Расходы" Тогда
			ОписаниеВершины.ПоступаютРасходы = Истина;
			ОчередьВершин.Добавить(ОписаниеВершины);
		КонецЕсли;
	КонецЦикла;
	
	// "Поджигаем" все, до куда дотянемся
	Пока ОчередьВершин.Количество() > 0 Цикл
		
		ОписаниеВершины = ОчередьВершин[0];
		ОписаниеВершины.ПоступаютРасходы = Истина;
		
		Приемники = ИнцидентныеРебра(Затраты, ОписаниеВершины.Идентификатор, Истина, Истина);
		
		Для Каждого ОписаниеРебра Из Приемники Цикл
			
			ОписаниеПриемника = ОписаниеВершины(Затраты, ОписаниеРебра.Приемник);
			Если НЕ ОписаниеПриемника.ПоступаютРасходы Тогда
				ОчередьВершин.Добавить(ОписаниеПриемника);
			КонецЕсли;
			
		КонецЦикла;
		
		ОчередьВершин.Удалить(0);
		
	КонецЦикла;
	
	// Выберем расходы, которые не "сгорели"
	Отбор = Новый Структура;
	Отбор.Вставить("ПоступаютРасходы", Ложь);
	НеПоступаютРасходы = Затраты.Вершины.НайтиСтроки(Отбор);
	
	Затраты.Вершины.Колонки.Удалить("ПоступаютРасходы");
	
	Возврат НеПоступаютРасходы;
	
КонецФункции

// Встречный выпуск

Процедура ПрименитьНастройкуПорядкаПеределов(Затраты, МенеджерВременныхТаблиц, Период, Организация)
	
	// Учтем ограничения номеров переделов, заданные пользователем.
	// Будут назначены слабыми звеньями все связи, которые ведут 
	// из вершины с большим номером передела 
	// в вершину с меньшим номером.
	// В результате циклы будут исключены - они будут обработаны в том же порядке, что и встречный выпуск:
	// - сначала распределим расходы в том порядке, который задал пользователь
	// - повторим расчет, если были движения, идущие вразрез с этим порядком ("встречные").
	//   В ходе повторного расчета игнорируем встречные движения.
	// Если пользователь не задал номера переделов каким-то подразделениям, то это значит, что ограничений нет.
	
	Если Не УчетнаяПолитика.РассчитыватьСебестоимостьПолуфабрикатов(Организация, Период)
		И Не УчетнаяПолитика.РассчитыватьСебестоимостьУслугСобственнымПодразделениям(Организация, Период) Тогда
		// Производство одноэтапное, настройка не имеет смысла
		Возврат;
	КонецЕсли;
	
	СпособРасчетаСебестоимостиПроизводства = УчетнаяПолитика.СпособРасчетаСебестоимостиПроизводства(Организация, Период);
	Если СпособРасчетаСебестоимостиПроизводства <> Перечисления.СпособыРасчетаСебестоимостиПродукции.ПоПодразделениям Тогда
		// Настройка не используется
		Возврат;
	КонецЕсли;
	
	// Получим данные настройки
	// Важно получить все идентификаторы
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Период",      Период);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПорядокПеределов.НомерПередела КАК НомерПередела,
	|	ПорядокПеределов.Подразделение КАК Подразделение
	|ПОМЕСТИТЬ ВТ_ПорядокПеределов
	|ИЗ
	|	РегистрСведений.ПорядокЗакрытияПодразделенийОрганизаций.СрезПоследних(&Период, Организация = &Организация) КАК ПорядокПеределов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КлючиВершин.Идентификатор КАК Идентификатор,
	|	ПорядокПеределов.НомерПередела КАК НомерПередела
	|ИЗ
	|	ИдентификаторыВершин КАК КлючиВершин
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПорядокПеределов КАК ПорядокПеределов
	|		ПО (КлючиВершин.РазделУчета = ""Расходы"")
	|			И КлючиВершин.Подразделение = ПорядокПеределов.Подразделение";
	
	// Проставим номера переделов в соответствии с настройкой
	Выборка = Запрос.Выполнить().Выбрать();
	МаксимальныйНомерПередела = -1;
	Пока Выборка.Следующий() Цикл
		ОписаниеВершины = ОписаниеВершины(Затраты, Выборка.Идентификатор);
		ОписаниеВершины.НомерПередела = Выборка.НомерПередела;
		// Считаем, что вершины, для которых не задан номер передела, "всегда разрешены" - имеют 
		// - минимальный номер передела (-1), когда ребро ведет из этой вершины
		// - максимальный номер передела, когда ребро ведет в эту вершину
		МаксимальныйНомерПередела = Макс(МаксимальныйНомерПередела, Выборка.НомерПередела); 
	КонецЦикла;
	
	// Разорвем связи из вершины с бОльшим номером передела в вершины с меньшим номером передела
	Для Каждого ОписаниеВершины Из Затраты.Вершины Цикл
		
		Если ОписаниеВершины.РазделУчета <> "Расходы" Тогда
			// Настройку пользователь выполнил для расходов
			Продолжить;
		КонецЕсли;
		
		Если ОписаниеВершины.НомерПередела < 0 Тогда
			// Для этой вершины нет ограничений
			Продолжить;
		КонецЕсли;
		
		// Проверим, что выполняются ограничения для всех ребер из этой вершины
		Приемники = ИнцидентныеРебра(Затраты, ОписаниеВершины.Идентификатор);
		Для Каждого Ребро Из Приемники Цикл
			
			// Пользователь задал ограничения для расходов.
			// Поэтому может потребоваться проложить путь через вершины с запасами до вершины с расходами.
			// Используем поиск в глубину.
			// Если в ходе поиска найдем, что из этой вершины можно попасть в расходы с меньшим номером передела,
			// то разорвем ребро перед вершиной.
			ОписаниеПриемника = ОписаниеВершины(Затраты, Ребро.Приемник);
			Если ОписаниеВершины.НомерПередела > МинимальныйНомерПеределаРасходовРекурсивно(Затраты, ОписаниеПриемника, МаксимальныйНомерПередела) Тогда
				// Нельзя идти вспять
				Ребро.СлабоеЗвено = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Уберем за собой
	Запрос.Текст = 
	"УНИЧТОЖИТЬ ВТ_ПорядокПеределов";
	Запрос.Выполнить();
	
КонецПроцедуры	

Функция МинимальныйНомерПеределаРасходовРекурсивно(Затраты, ОписаниеВершины, МаксимальныйНомерПередела)
	
	Если ОписаниеВершины.РазделУчета = "Расходы" Тогда
		// Простой случай
		Если ОписаниеВершины.НомерПередела = -1 Тогда 
			Возврат МаксимальныйНомерПередела;
		Иначе
			Возврат ОписаниеВершины.НомерПередела;
		КонецЕсли;
	КонецЕсли;
	
	// С запасами сложнее - прийдется найти все расходы, в которые можно попасть из этой вершины,
	// проходя только по разделу запасы, и найти минимальный номер передела.
	
	// Для того, чтобы сократить сложность алгоритма (число обходов), 
	// при проходе по затратам каждой вершине затрат присвоим минимальный номер передела,
	// который достигается из нее.
	
	Если ОписаниеВершины.НомерПередела >= 0 Тогда // Присвоен какой-то номер 
		// обход не требуется - выполнен ранее
		Возврат ОписаниеВершины.НомерПередела;
	КонецЕсли;
	
	ОписаниеВершины.НомерПередела = МаксимальныйНомерПередела;
	
	Приемники = ИнцидентныеРебра(Затраты, ОписаниеВершины.Идентификатор);// Ходим только по остовным ребрам
	
	Для Каждого Ребро Из Приемники Цикл
		
		ОписаниеПриемника = ОписаниеВершины(Затраты, Ребро.Приемник);
		
		// Обойдем в глубину
		ОписаниеВершины.НомерПередела = Мин(
			ОписаниеВершины.НомерПередела,
			МинимальныйНомерПеределаРасходовРекурсивно(Затраты, ОписаниеПриемника, МаксимальныйНомерПередела));
		
	КонецЦикла;
	
	Возврат ОписаниеВершины.НомерПередела;
	
КонецФункции

// Заполняет в коллекции Затраты таблицу НастройкаВстречногоВыпуска
// в соответствии с настройками пользователя из регистра ВстречныйВыпускПродукцииУслуг.
// Также использует данные временных таблиц Расходы, ИдентификаторыВершин
Процедура ПрименитьНастройкуВстречногоВыпуска(Затраты, МенеджерВременныхТаблиц, Период, Организация)
	
	СпособРасчетаСебестоимостиПроизводства = УчетнаяПолитика.СпособРасчетаСебестоимостиПроизводства(Организация, Период);
	Если СпособРасчетаСебестоимостиПроизводства = Перечисления.СпособыРасчетаСебестоимостиПродукции.ПоПодразделениям Тогда
		// Настройка не используется
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	// Получаем настройки
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Период",      Период);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Настройка.Продукция КАК Продукция,
	|	Настройка.Подразделение КАК Подразделение,
	|	Настройка.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	Настройка.ПодразделениеПересчета,
	|	Настройка.НоменклатурнаяГруппаПересчета
	|ПОМЕСТИТЬ ВТ_НастройкаВстречногоВыпуска
	|ИЗ
	|	РегистрСведений.ВстречныйВыпускПродукцииУслуг.СрезПоследних(&Период, Организация = &Организация) КАК Настройка
	|ГДЕ
	|	Настройка.Учитывается
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Подразделение,
	|	НоменклатурнаяГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Настройка.Продукция
	|ИЗ
	|	ВТ_НастройкаВстречногоВыпуска КАК Настройка";
	
	Если Запрос.Выполнить().Пустой() Тогда
		// Нет настроек
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Текст = "УНИЧТОЖИТЬ ВТ_НастройкаВстречногоВыпуска";
		Запрос.Выполнить();
		Возврат;
	КонецЕсли;
	
	// Поместим ребра графа во временную таблицу
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ребра", Затраты.Ребра);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Ребра.Источник КАК Источник,
	|	Ребра.Приемник КАК Приемник
	|ПОМЕСТИТЬ ВТ_Ребра
	|ИЗ
	|	&Ребра КАК Ребра
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Источник,
	|	Приемник";
	Запрос.Выполнить();
	
	// Настройку для услуг применяем к фактическим данным.
	//
	// При этом настройка интерпретируется так:
	//
	// - для услуг (собственным подразделениям)  однозначно
	// -- Подразделение, НоменклатурнаяГруппа - Источник
	// -- Продукция, ПодразделениеПересчета, НоменклатурнаяГруппаПересчета - Приемник (в разделе "Расходы")
	//    (при этом ПодразделениеПересчета и НоменклатурнаяГруппаПересчета могут быть не заполнены, в таком случае означают "любое")
	//
	// - для продукции - двояко
	//
	// -- "со стороны выпуска" - по аналогии с услугами
	// --- Подразделение, НоменклатурнаяГруппа - Источник
	// --- Продукция - Приемник (в разделе "Запасы")
	// --- ПодразделениеПересчета, НоменклатурнаяГруппаПересчета - не заполнены
	
	// -- "со стороны использования"
	// --- Продукция - Источник (из раздела "Запасы")
	// --- ПодразделениеПересчета, НоменклатурнаяГруппаПересчета - Приемник 
	//    (в раздел "Расходы", могут быть не заполнены, в таком случае означают "любое")
	// --- Подразделение, НоменклатурнаяГруппа - дополнительное условие ("кто выпустил эту продукцию"). Такие расходы 
	// ---- должны быть в контуре
	// ---- должны относиться к выпуску (быть источником в ребре с типом "Выпуск")
	// ---- между этой вершиной и Источником не может быть других ребер выпуска
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Ребра.Источник КАК Источник,
	|	Ребра.Приемник КАК Приемник,
	|	НЕОПРЕДЕЛЕНО КАК Условие
	|ИЗ
	|	ВТ_НастройкаВстречногоВыпуска КАК Настройка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Расходы КАК КлючиИсточник
	|		ПО Настройка.Подразделение = КлючиИсточник.Подразделение
	|			И Настройка.НоменклатурнаяГруппа = КлючиИсточник.НоменклатурнаяГруппа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Расходы КАК КлючиПриемник
	|		ПО Настройка.Продукция = КлючиПриемник.Номенклатура
	|			И Настройка.ПодразделениеПересчета = КлючиПриемник.Подразделение
	|			И Настройка.НоменклатурнаяГруппаПересчета = КлючиПриемник.НоменклатурнаяГруппа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Ребра КАК Ребра
	|		ПО (КлючиИсточник.Идентификатор = Ребра.Источник)
	|			И (КлючиПриемник.Идентификатор = Ребра.Приемник)
	|ГДЕ
	|	Настройка.Продукция.Услуга
	|	И Настройка.ПодразделениеПересчета <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|	И Настройка.НоменклатурнаяГруппаПересчета <> ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Ребра.Источник,
	|	Ребра.Приемник,
	|	НЕОПРЕДЕЛЕНО
	|ИЗ
	|	ВТ_НастройкаВстречногоВыпуска КАК Настройка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Расходы КАК КлючиИсточник
	|		ПО Настройка.Подразделение = КлючиИсточник.Подразделение
	|			И Настройка.НоменклатурнаяГруппа = КлючиИсточник.НоменклатурнаяГруппа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Расходы КАК КлючиПриемник
	|		ПО Настройка.Продукция = КлючиПриемник.Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Ребра КАК Ребра
	|		ПО (КлючиИсточник.Идентификатор = Ребра.Источник)
	|			И (КлючиПриемник.Идентификатор = Ребра.Приемник)
	|ГДЕ
	|	Настройка.Продукция.Услуга
	|	И Настройка.ПодразделениеПересчета = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|	И Настройка.НоменклатурнаяГруппаПересчета = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Ребра.Источник,
	|	Ребра.Приемник,
	|	НЕОПРЕДЕЛЕНО
	|ИЗ
	|	ВТ_НастройкаВстречногоВыпуска КАК Настройка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Расходы КАК КлючиИсточник
	|		ПО Настройка.Подразделение = КлючиИсточник.Подразделение
	|			И Настройка.НоменклатурнаяГруппа = КлючиИсточник.НоменклатурнаяГруппа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Расходы КАК КлючиПриемник
	|		ПО Настройка.Продукция = КлючиПриемник.Номенклатура
	|			И Настройка.ПодразделениеПересчета = КлючиПриемник.Подразделение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Ребра КАК Ребра
	|		ПО (КлючиИсточник.Идентификатор = Ребра.Источник)
	|			И (КлючиПриемник.Идентификатор = Ребра.Приемник)
	|ГДЕ
	|	Настройка.Продукция.Услуга
	|	И Настройка.ПодразделениеПересчета <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|	И Настройка.НоменклатурнаяГруппаПересчета = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Ребра.Источник,
	|	Ребра.Приемник,
	|	НЕОПРЕДЕЛЕНО
	|ИЗ
	|	ВТ_НастройкаВстречногоВыпуска КАК Настройка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Расходы КАК КлючиИсточник
	|		ПО Настройка.Подразделение = КлючиИсточник.Подразделение
	|			И Настройка.НоменклатурнаяГруппа = КлючиИсточник.НоменклатурнаяГруппа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИдентификаторыВершин КАК КлючиПриемник
	|		ПО Настройка.Продукция = КлючиПриемник.Номенклатура
	|			И (КлючиПриемник.РазделУчета = ""Запасы"")
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Ребра КАК Ребра
	|		ПО (КлючиИсточник.Идентификатор = Ребра.Источник)
	|			И (КлючиПриемник.Идентификатор = Ребра.Приемник)
	|ГДЕ
	|	НЕ Настройка.Продукция.Услуга
	|	И Настройка.ПодразделениеПересчета = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|	И Настройка.НоменклатурнаяГруппаПересчета = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Ребра.Источник,
	|	Ребра.Приемник,
	|	Условие.Идентификатор
	|ИЗ
	|	ВТ_НастройкаВстречногоВыпуска КАК Настройка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИдентификаторыВершин КАК КлючиИсточник
	|		ПО Настройка.Продукция = КлючиИсточник.Номенклатура
	|			И (КлючиИсточник.РазделУчета = ""Запасы"")
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Расходы КАК КлючиПриемник
	|		ПО Настройка.ПодразделениеПересчета = КлючиПриемник.Подразделение
	|			И Настройка.НоменклатурнаяГруппаПересчета = КлючиПриемник.НоменклатурнаяГруппа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Ребра КАК Ребра
	|		ПО (КлючиИсточник.Идентификатор = Ребра.Источник)
	|			И (КлючиПриемник.Идентификатор = Ребра.Приемник)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Расходы КАК Условие
	|		ПО Настройка.Подразделение = Условие.Подразделение
	|			И Настройка.НоменклатурнаяГруппа = Условие.НоменклатурнаяГруппа
	|ГДЕ
	|	НЕ Настройка.Продукция.Услуга
	|	И Настройка.НоменклатурнаяГруппа <> ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|	И Настройка.ПодразделениеПересчета <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|	И Настройка.НоменклатурнаяГруппаПересчета <> ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Ребра.Источник,
	|	Ребра.Приемник,
	|	Условие.Идентификатор
	|ИЗ
	|	ВТ_НастройкаВстречногоВыпуска КАК Настройка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИдентификаторыВершин КАК КлючиИсточник
	|		ПО Настройка.Продукция = КлючиИсточник.Номенклатура
	|			И (КлючиИсточник.РазделУчета = ""Запасы"")
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Ребра КАК Ребра
	|		ПО (КлючиИсточник.Идентификатор = Ребра.Источник)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Расходы КАК Условие
	|		ПО Настройка.Подразделение = Условие.Подразделение
	|ГДЕ
	|	НЕ Настройка.Продукция.Услуга
	|	И Настройка.НоменклатурнаяГруппа = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|	И Настройка.ПодразделениеПересчета = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|	И Настройка.НоменклатурнаяГруппаПересчета = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Ребра.Источник,
	|	Ребра.Приемник,
	|	Условие.Идентификатор
	|ИЗ
	|	ВТ_НастройкаВстречногоВыпуска КАК Настройка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИдентификаторыВершин КАК КлючиИсточник
	|		ПО Настройка.Продукция = КлючиИсточник.Номенклатура
	|			И (КлючиИсточник.РазделУчета = ""Запасы"")
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Ребра КАК Ребра
	|		ПО (КлючиИсточник.Идентификатор = Ребра.Источник)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Расходы КАК Условие
	|		ПО Настройка.Подразделение = Условие.Подразделение
	|			И Настройка.НоменклатурнаяГруппа = Условие.НоменклатурнаяГруппа
	|ГДЕ
	|	НЕ Настройка.Продукция.Услуга
	|	И Настройка.НоменклатурнаяГруппа <> ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|	И Настройка.ПодразделениеПересчета = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|	И Настройка.НоменклатурнаяГруппаПересчета = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Ребра.Источник,
	|	Ребра.Приемник,
	|	Условие.Идентификатор
	|ИЗ
	|	ВТ_НастройкаВстречногоВыпуска КАК Настройка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИдентификаторыВершин КАК КлючиИсточник
	|		ПО Настройка.Продукция = КлючиИсточник.Номенклатура
	|			И (КлючиИсточник.РазделУчета = ""Запасы"")
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Расходы КАК КлючиПриемник
	|		ПО Настройка.ПодразделениеПересчета = КлючиПриемник.Подразделение
	|			И Настройка.НоменклатурнаяГруппаПересчета = КлючиПриемник.НоменклатурнаяГруппа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Ребра КАК Ребра
	|		ПО (КлючиИсточник.Идентификатор = Ребра.Источник)
	|			И (КлючиПриемник.Идентификатор = Ребра.Приемник)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Расходы КАК Условие
	|		ПО Настройка.Подразделение = Условие.Подразделение
	|ГДЕ
	|	НЕ Настройка.Продукция.Услуга
	|	И Настройка.НоменклатурнаяГруппа = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|	И Настройка.ПодразделениеПересчета <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|	И Настройка.НоменклатурнаяГруппаПересчета <> ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|ИТОГИ
	|	МАКСИМУМ(Условие)
	|ПО
	|	Источник,
	|	Приемник";
	
	Затраты.Вставить("НастройкаВстречногоВыпуска", Новый ТаблицаЗначений);
	Затраты.НастройкаВстречногоВыпуска.Колонки.Добавить("Источник", УчетЗатрат.ТипИдентификатораВершины());
	Затраты.НастройкаВстречногоВыпуска.Колонки.Добавить("Приемник", УчетЗатрат.ТипИдентификатораВершины());
	Затраты.НастройкаВстречногоВыпуска.Колонки.Добавить("Условие",  Новый ОписаниеТипов("Соответствие")); // Для эффективной проверки условия
	
	ВыборкаИсточник = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИсточник.Следующий() Цикл
		
		ВыборкаПриемник = ВыборкаИсточник.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПриемник.Следующий() Цикл
			
			НоваяСтрока = Затраты.НастройкаВстречногоВыпуска.Добавить();
			НоваяСтрока.Источник = ВыборкаПриемник.Источник;
			НоваяСтрока.Приемник = ВыборкаПриемник.Приемник;
			
			// Возможно, что размыкать это ребро следует при обнаружении контура следует не всегда,
			// а только если в контуре выполняется условие - продукция выпущена конкретным подразделением.
			// Если это так, то заполним список условий.
			// (Для услуг список пустой - условие отсутствует)
			
			Если ВыборкаПриемник.Условие <> Неопределено Тогда
				
				Выборка = ВыборкаПриемник.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока Выборка.Следующий() Цикл
					НоваяСтрока.Условие.Вставить(Выборка.Условие, Выборка.Условие);
				КонецЦикла;
				
			КонецЕсли; // Заполнили условие
			
		КонецЦикла; // ВыборкаПриемник
		
	КонецЦикла; // ВыборкаИсточник
	
	Затраты.НастройкаВстречногоВыпуска.Индексы.Добавить("Источник,Приемник");
	
	// Уберем за собой
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"УНИЧТОЖИТЬ ВТ_НастройкаВстречногоВыпуска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Ребра";
	Запрос.Выполнить();
	
КонецПроцедуры

Функция НайтиВстречныйВыпускПоНастройке(Контур, Затраты)
	
	Если НЕ Затраты.Свойство("НастройкаВстречногоВыпуска") Тогда
		Возврат Неопределено; // Настройка не используется
	КонецЕсли;
	
	// Найдем ребра, входящие в контур и описанные в настройке как встречный выпуск.
	Отбор = Новый Структура("Источник,Приемник");
	Для ИндексРебраВКонтуре = 0 По Контур.Количество() - 1 Цикл
		
		Ребро = Контур[ИндексРебраВКонтуре];
		
		ЗаполнитьЗначенияСвойств(Отбор, Ребро);
		ПоНастройке = Затраты.НастройкаВстречногоВыпуска.НайтиСтроки(Отбор);
		
		Если ПоНастройке.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не МожноЗафиксироватьРебро(Затраты, Ребро) Тогда
			// Такое ребро не считаем встречным выпуском, так как его размыкание приведет к зависанию сумм.
			Продолжить;
		КонецЕсли;
		
		Настройка = ПоНастройке[0];
		
		Если Настройка.Условие.Количество() = 0 Тогда
			Возврат Ребро;
		КонецЕсли;
		
		// Есть условие: размыкать это ребро следует только тогда, когда в контур входит одна из вершин, 
		// указанных пользователем в качестве вершины выпуска.
		// "Вершина выпуска" означает, что между этой вершиной и размыкаемым ребром нет расходов 
		// (могут лежать только вершины из раздела Запасы)
		
		// Находим вершину выпуска
		ТекущееРебро        = Ребро;
		ИндексТекущегоРебра = ИндексРебраВКонтуре;
		ОсталосьШагов  = Контур.Количество() - 1;// Чтобы не ходить по контуру вечно
		Пока ОсталосьШагов > 0 Цикл
			// Проверяем, является ли источник вершиной выпуска
			Если ТекущееРебро.Выпуск Тогда
				Если Настройка.Условие[ТекущееРебро.Источник] <> Неопределено Тогда
					// Условие выполняется - этот контур следует разорвать по ребру, указанному пользователем
					Возврат Ребро;
				Иначе
					// Условие не выполняется
					Прервать;
				КонецЕсли;
			КонецЕсли;
			// Шаг назад
			ИндексТекущегоРебра = ИндексТекущегоРебра - 1;
			Если ИндексТекущегоРебра < 0 Тогда
				ИндексТекущегоРебра = Контур.Вграница();
			КонецЕсли;
			ТекущееРебро = Контур[ИндексТекущегоРебра];
			ОсталосьШагов = ОсталосьШагов - 1;
		КонецЦикла;
		
		// Условие не выполняется
		
	КонецЦикла;// По Контур
	
	// Для контура пользователь не выполнил настройки
	Возврат Неопределено;
	
КонецФункции

Функция НайтиВстречныйВыпускБезНастройки(Знач Контур, Затраты)
	
	// Важно, чтобы ребро не было единственным "сливом" из вершины,
	// иначе в этой вершине зависнет сумма 
	// (а из данных первичных документов не следует, что должна зависнуть сумма)
	ПерваяОчередь = Новый Массив;
	Для Каждого Ребро Из Контур Цикл
		
		Если МожноЗафиксироватьРебро(Затраты, Ребро) Тогда
			ПерваяОчередь.Добавить(Ребро);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПерваяОчередь.Количество() > 0 Тогда
		Контур = ПерваяОчередь;
	КонецЕсли;
	
	// Стараемся выбрать то ребро, которое соответствует выпуску продукции/услуг либо отражает списание материалов в производство.
	// Это сделает результат понятнее и не нарушит пропорции распределения, которые отражаются в справках-расчетах.
	ПерваяОчередь = Новый Массив;
	Для Каждого Ребро Из Контур Цикл
		Если Ребро.Выпуск Или Ребро.ВидДвижения = Перечисления.ВидыДвиженийРасчетСебестоимости.Другое Тогда
			ПерваяОчередь.Добавить(Ребро);
		КонецЕсли;
	КонецЦикла;
	
	Если ПерваяОчередь.Количество() > 0 Тогда
		Контур = ПерваяОчередь;
	КонецЕсли;
	
	// Стараемся выбрать то ребро, у которого наименьший удельный вес.
	// Можно надеяться, что это какое-то незначительное ребро, которым можно пренебречь.
	Если Контур.Количество() = 1 Тогда
		Возврат Контур[0];
	КонецЕсли;
	
	РанжированныеПоВесу = Новый Массив;
	МинимальныйУдельныйВес = 1;
	Для Каждого Ребро Из Контур Цикл
		ОписаниеИсточника = ОписаниеВершины(Затраты, Ребро.Источник);
		Если ОписаниеИсточника.Вес = 0 Тогда
			РанжированныеПоВесу.Вставить(0, Ребро);
		Иначе
			УдельныйВес = Ребро.Вес / ОписаниеИсточника.Вес;
			Если УдельныйВес = МинимальныйУдельныйВес Тогда
				// Раз нет никаких методических предпочтений, то прибегнем к техническому, которое позволит сократить время выполнения:
				// выберем такое ребро, которое в наименьшей степени изменит граф. 
				// Скорее всего, таким ребром будет то, что стоит ближе к концу контура (то есть текущее лучше, чем предыдущее с таким же весом).
				РанжированныеПоВесу.Вставить(0, Ребро);
			ИначеЕсли УдельныйВес < МинимальныйУдельныйВес Тогда
				МинимальныйУдельныйВес = Мин(МинимальныйУдельныйВес, Ребро.Вес / ОписаниеИсточника.Вес);
				РанжированныеПоВесу.Вставить(0, Ребро);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РанжированныеПоВесу[0];
	
КонецФункции

// Разницы по налогу на прибыль

Функция ИмяНабораСуммРазницыПоНалогуНаПрибыль()
	
	Возврат "РазницыПоНалогуНаПрибыль";
	
КонецФункции

Функция ЕстьРазницыПоНалогуНаПрибыль(ОписаниеСумм)
	
	// Всегда, когда есть набор с разницами, должны быть и наборы для сумм БУ и НУ
	
	Возврат КоллекцииСумм.ЕстьНаборСумм(ОписаниеСумм, ИмяНабораСуммРазницыПоНалогуНаПрибыль());
	
КонецФункции

Процедура РассчитатьРазницыПоНалогуНаПрибыль(Приемник, Источник, ОписаниеСумм)
	
	Если Не ЕстьРазницыПоНалогуНаПрибыль(ОписаниеСумм) Тогда
		Возврат;
	КонецЕсли;
		
	// Алгоритм расчета опирается на данные Источника:
	// - по возможности относим разницу к той, которая имеет подходящий знак
	//   -- если обе разницы одного знака, то делим пропорционально
	// - в остальных случаях считаем разницу постоянной
		
	Разница = Приемник.Сумма - Приемник.СуммаНУ;
	
	Если Источник.СуммаПР = 0 И Источник.СуммаВР = 0 Тогда
		Приемник.СуммаПР = Разница;
		Приемник.СуммаВР = 0;
	ИначеЕсли ЗнакЧисла(Источник.СуммаПР) = ЗнакЧисла(Источник.СуммаВР) Тогда
		// Делим пропорционально. Знаменатель заведомо ненулевой.
		Приемник.СуммаПР = Окр(Разница / (Источник.СуммаПР + Источник.СуммаВР) * Источник.СуммаПР, УчетЗатрат.РазрядностьДробнойЧасти());
		Приемник.СуммаВР = Разница - Приемник.СуммаПР;
	ИначеЕсли ЗнакЧисла(Источник.СуммаВР) = ЗнакЧисла(Разница) Тогда
		Приемник.СуммаПР = 0;
		Приемник.СуммаВР = Разница;
	Иначе
		Приемник.СуммаПР = Разница;
		Приемник.СуммаВР = 0;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗнакЧисла(Значение)
	
	Если Значение > 0 Тогда
		Возврат 1;
	ИначеЕсли Значение < 0 Тогда
		Возврат -1;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Процедура ИсправитьПогрешностиОкругленияРазницыПоНалогуНаПрибыль(Доли, ИсходныеСуммы, ОписаниеСумм, Числитель, Знаменатель)
	
	Если Не ЕстьРазницыПоНалогуНаПрибыль(ОписаниеСумм) Тогда
		Возврат;
	КонецЕсли;
	
	Если Числитель = Знаменатель Тогда
		Возврат;
	КонецЕсли;
	
	Если ИсходныеСуммы.СуммаПР = 0 И ИсходныеСуммы.СуммаВР = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// В исходных суммах может соблюдаться равенство БУ = НУ + ПР + ВР.
	// При расчете долей равенство может нарушиться на копейки за счет погрешностей округления.
	//
	// В исходных суммах равенство может и не соблюдаться.
	// Чтобы не зависеть от того, соблюдалось равенство или нет в исходных суммах,
	// введем сумму Контроль = БУ - НУ - ПР - ВР.
	//
	// От этой суммы рассчитаем долю по тому же алгоритму, что и для других сумм.
	// А затем обеспечим, чтобы для коллекции с долями выполнялось равенство Контроль = БУ - НУ - ПР - ВР:
	// при необходимости исправим сумму ПР или ВР.
	
	КонтрольнаяСуммаИсходная = ИсходныеСуммы.Сумма - ИсходныеСуммы.СуммаНУ - ИсходныеСуммы.СуммаПР - ИсходныеСуммы.СуммаВР;
	КонтрольнаяСуммаДоли     = Доли.Сумма          - Доли.СуммаНУ          - Доли.СуммаПР          - Доли.СуммаВР;
	
	ДоляИсходнойКонтрольнойСуммы = КоллекцииСумм.ДоляСуммы(КонтрольнаяСуммаИсходная, Числитель, Знаменатель);
	Погрешность                  = КонтрольнаяСуммаДоли - ДоляИсходнойКонтрольнойСуммы; // Сумма, которую надо добавить к разницам
	
	Если Погрешность = 0 Тогда
		Возврат;
	КонецЕсли;
		
	СуммыПогрешности = КоллекцииСумм.НовыйКоллекцияСумм(ОписаниеСумм);
	СуммыПогрешности.Сумма = Погрешность;
	РассчитатьРазницыПоНалогуНаПрибыль(СуммыПогрешности, ИсходныеСуммы, ОписаниеСумм);
	СуммыПогрешности.Сумма = 0;
	КоллекцииСумм.Сложить(Доли, СуммыПогрешности, ОписаниеСумм);
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРЕОБРАЗОВАНИЕ ГРАФА В АНАЛИТИКУ ПРОВОДОК

// Создает временные таблицы ВнутренниеДвижения, ВнешниеДвижения, ОценкаВершин, ДоступныеСуммы
//
Процедура СоздатьДвижения(МенеджерВременныхТаблиц, Затраты, Протокол)
	
	// Определим суммы, исходя из которых рассчитываются внешние движения
	// (оценка источника за вычетом внутренних движений и целевого сальдо)
	// Эти суммы запишем в Вершины ("испортим" их).
	// Отдельно - для протокола - сохраним суммы оценки источника за вычетом внутренних движений
	Для Каждого ОписаниеИсточника Из Затраты.Вершины Цикл
		
		Приемники = ИнцидентныеРебра(Затраты, ОписаниеИсточника.Идентификатор, Истина, Истина); // Все ребра
		
		// "Портим" описание вершины - 
		// по окончании цикла вершины будут содержать суммы 
		// за вычетом уже рассчитанных (внутренних) движений
		Для Каждого Ребро Из Приемники Цикл
			
			// Уменьшим у источника вес и суммы, доступные к списанию
			Если Не Ребро.Зафиксировано Тогда // У зафиксированных ребер это сделали при фиксации ребра
				ОписаниеИсточника.Вес = ОписаниеИсточника.Вес - Ребро.Вес;
				КоллекцииСумм.Вычесть(ОписаниеИсточника, Ребро, Затраты.ОписаниеСумм);
			КонецЕсли;
			
		КонецЦикла;
		
		// Запишем в протокол
		Если Не КоллекцииСумм.Пустая(ОписаниеИсточника, Затраты.ОписаниеСумм) Тогда
			НоваяСтрока = Протокол.СальдоПослеРасчета.Добавить();
			НоваяСтрока.Идентификатор = ОписаниеИсточника.Идентификатор;
			КоллекцииСумм.Заполнить(НоваяСтрока, ОписаниеИсточника, Затраты.ОписаниеСумм);
		КонецЕсли;
		
		// Учтем целевое сальдо
		ИсключитьЦелевоеСальдо(ОписаниеИсточника, Затраты, ОписаниеИсточника);
		
	КонецЦикла;
	
	// Результаты оценки стоимости поместим во временные таблицы
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Вершины",        Затраты.Вершины);
	Запрос.УстановитьПараметр("Ребра",          Затраты.Ребра);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Вершины.Идентификатор КАК Идентификатор,
	|	Вершины.Вес,
	|	Вершины.Сумма,
	|	Вершины.СуммаНУ,
	|	Вершины.СуммаПР,
	|	Вершины.СуммаВР
	|ПОМЕСТИТЬ ОценкаВершин
	|ИЗ
	|	&Вершины КАК Вершины
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Вершины.Идентификатор КАК Идентификатор,
	|	Вершины.НомерПередела
	|ПОМЕСТИТЬ ВТ_ПорядокВершин
	|ИЗ
	|	&Вершины КАК Вершины
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ребра.Источник КАК Источник,
	|	Ребра.Приемник КАК Приемник,
	|	Ребра.ВидДвижения,
	|	Ребра.ПравилоРаспределения,
	|	Ребра.Вес КАК Вес,
	|	Ребра.Сумма,
	|	Ребра.СуммаНУ,
	|	Ребра.СуммаПР,
	|	Ребра.СуммаВР
	|ПОМЕСТИТЬ ВТ_ВнутренниеДвижения
	|ИЗ
	|	&Ребра КАК Ребра
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Источник,
	|	Приемник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВнешниеДвижения.Источник КАК Источник,
	|	ВнешниеДвижения.СчетКт КАК СчетКт,
	|	ВнешниеДвижения.ПодразделениеКт КАК ПодразделениеКт,
	|	ВнешниеДвижения.СубконтоКт1 КАК СубконтоКт1,
	|	ВнешниеДвижения.СубконтоКт2 КАК СубконтоКт2,
	|	ВнешниеДвижения.СубконтоКт3 КАК СубконтоКт3,
	|	ВнешниеДвижения.СчетДт КАК СчетДт,
	|	ВнешниеДвижения.ПодразделениеДт КАК ПодразделениеДт,
	|	ВнешниеДвижения.СубконтоДт1 КАК СубконтоДт1,
	|	ВнешниеДвижения.СубконтоДт2 КАК СубконтоДт2,
	|	ВнешниеДвижения.СубконтоДт3 КАК СубконтоДт3,
	|	ВнешниеДвижения.НоменклатураДт КАК НоменклатураДт,
	|	СУММА(ВнешниеДвижения.Количество) КАК Количество,
	|	СУММА(ВнешниеДвижения.Сумма) КАК Сумма,
	|	СУММА(ВнешниеДвижения.СуммаНУ) КАК СуммаНУ,
	|	СУММА(ВнешниеДвижения.СуммаПР) КАК СуммаПР,
	|	СУММА(ВнешниеДвижения.СуммаВР) КАК СуммаВР,
	|	ВнешниеДвижения.Выпуск КАК Выпуск,
	|	ВнешниеДвижения.ПравилоРаспределения КАК ПравилоРаспределения
	|ПОМЕСТИТЬ ВнешниеДвижения
	|ИЗ
	|	(ВЫБРАТЬ
	|		Выбытие.Источник КАК Источник,
	|		Выбытие.СчетКт КАК СчетКт,
	|		Выбытие.ПодразделениеКт КАК ПодразделениеКт,
	|		Выбытие.СубконтоКт1 КАК СубконтоКт1,
	|		Выбытие.СубконтоКт2 КАК СубконтоКт2,
	|		Выбытие.СубконтоКт3 КАК СубконтоКт3,
	|		Выбытие.СчетДт КАК СчетДт,
	|		Выбытие.ПодразделениеДт КАК ПодразделениеДт,
	|		Выбытие.СубконтоДт1 КАК СубконтоДт1,
	|		Выбытие.СубконтоДт2 КАК СубконтоДт2,
	|		Выбытие.СубконтоДт3 КАК СубконтоДт3,
	|		Выбытие.НоменклатураДт КАК НоменклатураДт,
	|		Выбытие.Количество КАК Количество,
	|		Выбытие.Сумма КАК Сумма,
	|		Выбытие.СуммаНУ КАК СуммаНУ,
	|		Выбытие.СуммаПР КАК СуммаПР,
	|		Выбытие.СуммаВР КАК СуммаВР,
	|		Выбытие.Выпуск КАК Выпуск,
	|		"""" КАК ПравилоРаспределения
	|	ИЗ
	|		Выбытия КАК Выбытие
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОценкаВершин КАК Вершины
	|			ПО Выбытие.Источник = Вершины.Идентификатор
	|	ГДЕ
	|		НЕ Выбытие.ВнутреннееДвижение
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РаспределениеРасходов.Идентификатор,
	|		КлючиИсточник.Счет,
	|		КлючиИсточник.Подразделение,
	|		КлючиИсточник.Субконто1,
	|		КлючиИсточник.Субконто2,
	|		КлючиИсточник.Субконто3,
	|		РаспределениеРасходов.Счет,
	|		РаспределениеРасходов.Подразделение,
	|		РаспределениеРасходов.Субконто1,
	|		РаспределениеРасходов.Субконто2,
	|		РаспределениеРасходов.Субконто3,
	|		РаспределениеРасходов.Номенклатура,
	|		РаспределениеРасходов.База,
	|		0,
	|		0,
	|		0,
	|		0,
	|		ЕСТЬNULL(РаспределениеНаВыпуск.Выпуск, ЛОЖЬ),
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(РаспределениеНаВыпуск.Выпуск, ЛОЖЬ) = ИСТИНА
	|				ТОГДА """"
	|			ИНАЧЕ РаспределениеРасходов.Правило
	|		КОНЕЦ
	|	ИЗ
	|		РаспределениеНаСубконто КАК РаспределениеРасходов
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИдентификаторыВершин КАК КлючиИсточник
	|			ПО РаспределениеРасходов.Идентификатор = КлючиИсточник.Идентификатор
	|			ЛЕВОЕ СОЕДИНЕНИЕ КлючиВершин КАК КлючиПриемник
	|			ПО РаспределениеРасходов.Счет = КлючиПриемник.Счет
	|				И РаспределениеРасходов.Подразделение = КлючиПриемник.Подразделение
	|				И РаспределениеРасходов.Субконто1 = КлючиПриемник.Субконто1
	|				И РаспределениеРасходов.Субконто2 = КлючиПриемник.Субконто2
	|				И РаспределениеРасходов.Субконто3 = КлючиПриемник.Субконто3
	|				И РаспределениеРасходов.Номенклатура = КлючиПриемник.Номенклатура
	|				И РаспределениеРасходов.КорСчет = КлючиПриемник.КорСчет
	|			ЛЕВОЕ СОЕДИНЕНИЕ ПравилаРаспределенияРасходовВыпуск КАК РаспределениеНаВыпуск
	|			ПО РаспределениеРасходов.Правило = РаспределениеНаВыпуск.Правило
	|	ГДЕ
	|		КлючиПриемник.Счет ЕСТЬ NULL 
	|		И РаспределениеРасходов.База <> 0) КАК ВнешниеДвижения
	|
	|СГРУППИРОВАТЬ ПО
	|	ВнешниеДвижения.Источник,
	|	ВнешниеДвижения.СчетКт,
	|	ВнешниеДвижения.ПодразделениеКт,
	|	ВнешниеДвижения.СубконтоКт1,
	|	ВнешниеДвижения.СубконтоКт2,
	|	ВнешниеДвижения.СубконтоКт3,
	|	ВнешниеДвижения.СчетДт,
	|	ВнешниеДвижения.ПодразделениеДт,
	|	ВнешниеДвижения.СубконтоДт1,
	|	ВнешниеДвижения.СубконтоДт2,
	|	ВнешниеДвижения.СубконтоДт3,
	|	ВнешниеДвижения.НоменклатураДт,
	|	ВнешниеДвижения.Выпуск,
	|	ВнешниеДвижения.ПравилоРаспределения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Источник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВнутренниеДвижения.Приемник,
	|	КлючиВершинДт.Счет КАК СчетДт,
	|	КлючиВершинДт.Подразделение КАК ПодразделениеДт,
	|	КлючиВершинДт.Субконто1 КАК СубконтоДт1,
	|	КлючиВершинДт.Субконто2 КАК СубконтоДт2,
	|	КлючиВершинДт.Субконто3 КАК СубконтоДт3,
	|	КлючиВершинДт.Номенклатура КАК НоменклатураДт,
	|	ВнутренниеДвижения.Источник,
	|	КлючиВершинКт.Счет КАК СчетКт,
	|	КлючиВершинКт.Подразделение КАК ПодразделениеКт,
	|	КлючиВершинКт.Субконто1 КАК СубконтоКт1,
	|	КлючиВершинКт.Субконто2 КАК СубконтоКт2,
	|	КлючиВершинКт.Субконто3 КАК СубконтоКт3,
	|	ВнутренниеДвижения.Вес КАК Вес,
	|	ВнутренниеДвижения.Сумма КАК Сумма,
	|	ВнутренниеДвижения.СуммаНУ КАК СуммаНУ,
	|	ВнутренниеДвижения.СуммаПР КАК СуммаПР,
	|	ВнутренниеДвижения.СуммаВР КАК СуммаВР,
	|	ВнутренниеДвижения.ВидДвижения КАК ВидДвижения,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РаспределениеНаВыпуск.Выпуск, ЛОЖЬ) = ИСТИНА
	|			ТОГДА """"
	|		ИНАЧЕ ВнутренниеДвижения.ПравилоРаспределения
	|	КОНЕЦ КАК ПравилоРаспределения,
	|	ЕСТЬNULL(РаспределениеНаВыпуск.Выпуск, ЛОЖЬ) КАК Выпуск,
	|	ПорядокВершин.НомерПередела КАК Порядок
	|ПОМЕСТИТЬ ВнутренниеДвижения
	|ИЗ
	|	ВТ_ВнутренниеДвижения КАК ВнутренниеДвижения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИдентификаторыВершин КАК КлючиВершинКт
	|		ПО ВнутренниеДвижения.Источник = КлючиВершинКт.Идентификатор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИдентификаторыВершин КАК КлючиВершинДт
	|		ПО ВнутренниеДвижения.Приемник = КлючиВершинДт.Идентификатор
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПравилаРаспределенияРасходовВыпуск КАК РаспределениеНаВыпуск
	|		ПО ВнутренниеДвижения.ПравилоРаспределения = РаспределениеНаВыпуск.Правило
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПорядокВершин КАК ПорядокВершин
	|		ПО ВнутренниеДвижения.Источник = ПорядокВершин.Идентификатор
	|ГДЕ
	|	НЕ(КлючиВершинДт.Счет = КлючиВершинКт.Счет
	|				И КлючиВершинДт.Подразделение = КлючиВершинКт.Подразделение
	|				И КлючиВершинДт.НеОборотноеСубконто1 = КлючиВершинКт.НеОборотноеСубконто1
	|				И КлючиВершинДт.НеОборотноеСубконто2 = КлючиВершинКт.НеОборотноеСубконто2
	|				И КлючиВершинДт.НеОборотноеСубконто3 = КлючиВершинКт.НеОборотноеСубконто3)
	|	И (РаспределениеНаВыпуск.Выпуск
	|			ИЛИ НЕ(ВнутренниеДвижения.Сумма = 0
	|					И ВнутренниеДвижения.СуммаНУ = 0
	|					И ВнутренниеДвижения.СуммаПР = 0
	|					И ВнутренниеДвижения.СуммаВР = 0))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетКт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ВнутренниеДвижения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ПорядокВершин";
	
	Запрос.Выполнить();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ ТАБЛИЦЫ ПРОВОДОК

// Проводки - общие процедуры

Функция НоваяТаблицаПроводок()
	
	ТипСчет             = Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный");
	ТипПодразделение    = БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения();
	ТипСубконто         = Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип;
	ТипСтрокаСодержание = Метаданные.РегистрыБухгалтерии.Хозрасчетный.Реквизиты.Содержание.Тип;
	
	ТаблицаПроводок = Новый ТаблицаЗначений;
	ТаблицаПроводок.Колонки.Добавить("Выпуск",          Новый ОписаниеТипов("Булево"));
	ТаблицаПроводок.Колонки.Добавить("СчетДт",          ТипСчет);
	ТаблицаПроводок.Колонки.Добавить("СчетКт",          ТипСчет);
	ТаблицаПроводок.Колонки.Добавить("СубконтоДт1",     ТипСубконто);
	ТаблицаПроводок.Колонки.Добавить("СубконтоДт2",     ТипСубконто);
	ТаблицаПроводок.Колонки.Добавить("СубконтоДт3",     ТипСубконто);
	ТаблицаПроводок.Колонки.Добавить("СубконтоКт1",     ТипСубконто);
	ТаблицаПроводок.Колонки.Добавить("СубконтоКт2",     ТипСубконто);
	ТаблицаПроводок.Колонки.Добавить("СубконтоКт3",     ТипСубконто);
	ТаблицаПроводок.Колонки.Добавить("ПодразделениеДт", ТипПодразделение);
	ТаблицаПроводок.Колонки.Добавить("ПодразделениеКт", ТипПодразделение);
	ТаблицаПроводок.Колонки.Добавить("Содержание",      ТипСтрокаСодержание);
	ОписаниеСуммПроводки = ОписаниеКоллекцииСумм(Истина, Истина, Истина);
	КоллекцииСумм.ДополнитьТаблицуЗначенийКолонкамиСумм(ТаблицаПроводок, ОписаниеСуммПроводки);
	
	Возврат ТаблицаПроводок;
	
КонецФункции

Процедура СвернутьТаблицуПроводок(Проводки)
	
	ОписаниеСумм  = ОписаниеКоллекцииСумм(Истина, Истина, Истина);
	
	Измерения = Новый Массив;
	Ресурсы   = КоллекцииСумм.ИменаСвойств(ОписаниеСумм);
	
	Для Каждого Колонка Из Проводки.Колонки Цикл
		
		ИмяКолонки = Колонка.Имя;
		
		Если Ресурсы.Найти(ИмяКолонки) = Неопределено Тогда
			Измерения.Добавить(ИмяКолонки);
		КонецЕсли;
		
	КонецЦикла;
	
	Измерения = СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(Измерения);
		
	Проводки.Свернуть(Измерения, КоллекцииСумм.ИменаСвойствСтрокой(ОписаниеСумм));
	
КонецПроцедуры

Функция СодержаниеПроводки(Выпуск, СодержаниеПроводки = "")
	
	Если ЗначениеЗаполнено(СодержаниеПроводки) Тогда
		Возврат СодержаниеПроводки;
	ИначеЕсли Выпуск Тогда
		Возврат НСтр("ru = 'Корректировка выпуска продукции (услуг)'");
	Иначе
		Возврат НСтр("ru = 'Корректировка стоимости списания'");
	КонецЕсли;
	
КонецФункции

Функция НовыйОписаниеПроводки()
	
	ОписаниеПроводки = Новый Структура;
	ОписаниеПроводки.Вставить("СчетДт",      ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	ОписаниеПроводки.Вставить("СчетКт",      ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	ОписаниеПроводки.Вставить("АналитикаДт", Новый Структура);
	ОписаниеПроводки.Вставить("АналитикаКт", Новый Структура);
	ОписаниеПроводки.Вставить("Суммы",       Новый Структура);
	ОписаниеПроводки.Вставить("Содержание",  "");
	ОписаниеПроводки.Вставить("Выпуск",      Ложь);
	ОписаниеПроводки.Вставить("ПараметрыДополнительныхПроводок", Неопределено);
	ОписаниеПроводки.Вставить("Сторно",      Ложь);
	
	Возврат ОписаниеПроводки;
	
КонецФункции

Процедура ДобавитьПроводку(ТаблицаПроводок, ОписаниеПроводки)
	
	Проводка = ТаблицаПроводок.Добавить();
	Проводка.Содержание = ОписаниеПроводки.Содержание;
	Проводка.Выпуск     = ОписаниеПроводки.Выпуск;
	
	Проводка.СчетДт     = ОписаниеПроводки.СчетДт;
	Проводка.СчетКт     = ОписаниеПроводки.СчетКт;
	
	// Заполним субконто Дт и Кт
	Для НомерСубконто = 1 По 3 Цикл
		Проводка["СубконтоДт" + НомерСубконто] = ОписаниеПроводки.АналитикаДт["Субконто" + НомерСубконто];
		Проводка["СубконтоКт" + НомерСубконто] = ОписаниеПроводки.АналитикаКт["Субконто" + НомерСубконто];
	КонецЦикла;
	
	// Заполним подразделения
	// В проводках по Дт счета 90 подразделение Дт должно соответствовать подразделению Кт.
	// Это нужно, так как 
	// - с одной стороны учет доходов и расходов ведется в разрезе подразделений
	// - с другой стороны, важно не допускать проводки между разными обособленными подразделениями
	ПодразделениеДт = ОписаниеПроводки.АналитикаДт.Подразделение;
	Если Проводка.СчетДт.УчетПоПодразделениям И Проводка.СчетКт.УчетПоПодразделениям Тогда
		Если БухгалтерскийУчетВызовСервераПовтИсп.СчетВИерархии(Проводка.СчетДт, ПланыСчетов.Хозрасчетный.Продажи) Тогда
			ПодразделениеДт = ОписаниеПроводки.АналитикаКт.Подразделение;
		КонецЕсли;
	КонецЕсли;
	
	БухгалтерскийУчет.УстановитьПодразделенияПроводки(
		Проводка, 
		ПодразделениеДт, 
		ОписаниеПроводки.АналитикаКт.Подразделение);
		
	// Заполним суммы
	Если ОписаниеПроводки.Сторно Тогда
		Знак = -1;
	Иначе
		Знак = 1;
	КонецЕсли;
	
	Суммы = ОписаниеПроводки.Суммы;
	Проводка.Сумма  = Знак * Суммы.Сумма;
	
	НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки( // Суммы НУ одинаковые в Дт и Кт
		Знак * Суммы.СуммаНУ, Знак * Суммы.СуммаНУ, 
		Знак * Суммы.СуммаПР, Знак * Суммы.СуммаПР,
		Знак * Суммы.СуммаВР, Знак * Суммы.СуммаВР,
		Проводка);
		
	ЭлементыЗатрат.ДобавитьПроводки(ТаблицаПроводок, Проводка, Суммы, ОписаниеПроводки.ПараметрыДополнительныхПроводок);
	
КонецПроцедуры

Функция НоваяСтруктураПолейПроводки(Основание = Неопределено, Суффикс = Неопределено)
	
	// Ключи - имена ключевых полей
	// Значения - шаблоны имени поля основания. 
	//            Используются, если передано основание и суффикс.
	//            В этом случае %% будет заменен на суффикс и из получившегося поля будет получено значения ключевого поля.
	Шаблон = Новый Структура;
	Шаблон.Вставить("Счет",          "Счет%%");
	Шаблон.Вставить("Подразделение", "Подразделение%%");
	Шаблон.Вставить("Субконто1",     "Субконто%%1");
	Шаблон.Вставить("Субконто2",     "Субконто%%2");
	Шаблон.Вставить("Субконто3",     "Субконто%%3");
	
	// См. также РазрезыУчета()
	
	// Инициализируем пустую структуру
	Ключ = Новый Структура;
	Для Каждого КлючИЗначение Из Шаблон Цикл
		Ключ.Вставить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	Если Основание = Неопределено Тогда
		Возврат Ключ;
	КонецЕсли;
	
	// Заполняем структуру
	Если Суффикс = Неопределено Тогда
		// Имена полей в основании и структуре совпадают
		ЗаполнитьЗначенияСвойств(Ключ, Основание);
	Иначе
		// Имена полей отличаются суффиксом
		Для Каждого КлючИЗначение Из Шаблон Цикл
			ИмяПоляОснования = СтрЗаменить(КлючИЗначение.Значение, "%%", Суффикс);
			Ключ.Вставить(КлючИЗначение.Ключ, Основание[ИмяПоляОснования]);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ключ;
	
КонецФункции

// Внутри учета затрат

Процедура ДобавитьПроводкиВнутренниеДвижения(Проводки, МенеджерВременныхТаблиц)
	
	// Рассчитаем корректировки - разницу между предварительными и окончательными движениями
	
	// МенеджерВременныхТаблиц содержит данные
	// - предварительных проводок (Выбытия)
	// - окончательных проводок (ВнутренниеДвижения)
	// - вершин, для которых могла измениться оценка (ОценкаВершин)
	
	// Получим корректировки
	// Не формируем тривиальные проводки - то есть те, где аналитика Дт и Кт совпадает либо все ресурсы равны 0
	// Также не формируем проводки для вершин, оценка которых заведомо не изменилась
	
	// Упорядочиваем так, чтобы сумма каждой проводка могла быть рассчитана без знания сумм следующих проводок.
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Корректировки.СчетДт КАК СчетДт,
	|	Корректировки.ПодразделениеДт КАК ПодразделениеДт,
	|	Корректировки.СубконтоДт1 КАК СубконтоДт1,
	|	Корректировки.СубконтоДт2 КАК СубконтоДт2,
	|	Корректировки.СубконтоДт3 КАК СубконтоДт3,
	|	Корректировки.НоменклатураДт КАК НоменклатураДт,
	|	Корректировки.СчетКт КАК СчетКт,
	|	Корректировки.ПодразделениеКт КАК ПодразделениеКт,
	|	Корректировки.СубконтоКт1 КАК СубконтоКт1,
	|	Корректировки.СубконтоКт2 КАК СубконтоКт2,
	|	Корректировки.СубконтоКт3 КАК СубконтоКт3,
	|	Корректировки.СодержаниеПроводки КАК СодержаниеПроводки,
	|	Корректировки.Выпуск КАК Выпуск,
	|	МАКСИМУМ(Корректировки.Порядок) КАК Порядок,
	|	СУММА(Корректировки.Сумма) КАК Сумма,
	|	СУММА(Корректировки.СуммаНУ) КАК СуммаНУ,
	|	СУММА(Корректировки.СуммаПР) КАК СуммаПР,
	|	СУММА(Корректировки.СуммаВР) КАК СуммаВР,
	|	СУММА(Корректировки.СуммаПлан) КАК СуммаПлан,
	|	СУММА(Корректировки.СуммаФакт) КАК СуммаФакт,
	|	СУММА(Корректировки.СуммаФактНУ) КАК СуммаФактНУ,
	|	СУММА(Корректировки.СуммаФактПР) КАК СуммаФактПР,
	|	СУММА(Корректировки.СуммаФактВР) КАК СуммаФактВР
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОкончательныеПроводки.СчетДт КАК СчетДт,
	|		ОкончательныеПроводки.ПодразделениеДт КАК ПодразделениеДт,
	|		ОкончательныеПроводки.СубконтоДт1 КАК СубконтоДт1,
	|		ОкончательныеПроводки.СубконтоДт2 КАК СубконтоДт2,
	|		ОкончательныеПроводки.СубконтоДт3 КАК СубконтоДт3,
	|		ОкончательныеПроводки.НоменклатураДт КАК НоменклатураДт,
	|		ОкончательныеПроводки.СчетКт КАК СчетКт,
	|		ОкончательныеПроводки.ПодразделениеКт КАК ПодразделениеКт,
	|		ОкончательныеПроводки.СубконтоКт1 КАК СубконтоКт1,
	|		ОкончательныеПроводки.СубконтоКт2 КАК СубконтоКт2,
	|		ОкончательныеПроводки.СубконтоКт3 КАК СубконтоКт3,
	|		ОкончательныеПроводки.Сумма КАК Сумма,
	|		ОкончательныеПроводки.СуммаНУ КАК СуммаНУ,
	|		ОкончательныеПроводки.СуммаПР КАК СуммаПР,
	|		ОкончательныеПроводки.СуммаВР КАК СуммаВР,
	|		0 КАК СуммаПлан,
	|		ОкончательныеПроводки.Сумма КАК СуммаФакт,
	|		ОкончательныеПроводки.СуммаНУ КАК СуммаФактНУ,
	|		ОкончательныеПроводки.СуммаПР КАК СуммаФактПР,
	|		ОкончательныеПроводки.СуммаВР КАК СуммаФактВР,
	|		ОкончательныеПроводки.Порядок КАК Порядок,
	|		СодержаниеПроводок.СодержаниеПроводки КАК СодержаниеПроводки,
	|		ОкончательныеПроводки.Выпуск КАК Выпуск
	|	ИЗ
	|		ВнутренниеДвижения КАК ОкончательныеПроводки
	|			ЛЕВОЕ СОЕДИНЕНИЕ СодержаниеПроводокРаспределенияРасходов КАК СодержаниеПроводок
	|			ПО ОкончательныеПроводки.ПравилоРаспределения = СодержаниеПроводок.Правило
	|				И (НЕ ОкончательныеПроводки.Выпуск)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПредварительныеПроводки.СчетДт,
	|		ПредварительныеПроводки.ПодразделениеДт,
	|		ПредварительныеПроводки.СубконтоДт1,
	|		ПредварительныеПроводки.СубконтоДт2,
	|		ПредварительныеПроводки.СубконтоДт3,
	|		ПредварительныеПроводки.НоменклатураДт,
	|		ПредварительныеПроводки.СчетКт,
	|		ПредварительныеПроводки.ПодразделениеКт,
	|		ПредварительныеПроводки.СубконтоКт1,
	|		ПредварительныеПроводки.СубконтоКт2,
	|		ПредварительныеПроводки.СубконтоКт3,
	|		-ПредварительныеПроводки.Сумма,
	|		-ПредварительныеПроводки.СуммаНУ,
	|		-ПредварительныеПроводки.СуммаПР,
	|		-ПредварительныеПроводки.СуммаВР,
	|		0,
	|		ПредварительныеПроводки.Сумма,
	|		0,
	|		0,
	|		0,
	|		0,
	|		NULL,
	|		ПредварительныеПроводки.Выпуск
	|	ИЗ
	|		Выбытия КАК ПредварительныеПроводки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОценкаВершин КАК Вершины
	|			ПО ПредварительныеПроводки.Источник = Вершины.Идентификатор
	|	ГДЕ
	|		ПредварительныеПроводки.ВнутреннееДвижение) КАК Корректировки
	|ГДЕ
	|	НЕ(Корректировки.СчетДт = Корректировки.СчетКт
	|				И Корректировки.ПодразделениеДт = Корректировки.ПодразделениеКт
	|				И Корректировки.СубконтоДт1 = Корректировки.СубконтоКт1
	|				И Корректировки.СубконтоДт2 = Корректировки.СубконтоКт2
	|				И Корректировки.СубконтоДт3 = Корректировки.СубконтоКт3)
	|
	|СГРУППИРОВАТЬ ПО
	|	Корректировки.СчетДт,
	|	Корректировки.ПодразделениеДт,
	|	Корректировки.СубконтоДт1,
	|	Корректировки.СубконтоДт2,
	|	Корректировки.СубконтоДт3,
	|	Корректировки.СчетКт,
	|	Корректировки.ПодразделениеКт,
	|	Корректировки.СубконтоКт1,
	|	Корректировки.СубконтоКт2,
	|	Корректировки.СубконтоКт3,
	|	Корректировки.Выпуск,
	|	Корректировки.СодержаниеПроводки,
	|	Корректировки.НоменклатураДт
	|
	|ИМЕЮЩИЕ
	|	(СУММА(Корректировки.Сумма) <> 0
	|		ИЛИ СУММА(Корректировки.СуммаНУ) <> 0
	|		ИЛИ СУММА(Корректировки.СуммаПР) <> 0
	|		ИЛИ СУММА(Корректировки.СуммаВР) <> 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	СодержаниеПроводки,
	|	Выпуск,
	|	СчетКт,
	|	ПодразделениеКт,
	|	СубконтоКт1,
	|	СубконтоКт2,
	|	СубконтоКт3,
	|	СчетДт,
	|	ПодразделениеДт,
	|	СубконтоДт1,
	|	СубконтоДт2,
	|	СубконтоДт3,
	|	НоменклатураДт";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОписаниеПроводки = НовыйОписаниеПроводки();
	
	// На каждую корректировку сформируем проводку
	Пока Выборка.Следующий() Цикл
		
		АналитикаДт = НоваяСтруктураПолейПроводки(Выборка, "Дт");
		АналитикаКт = НоваяСтруктураПолейПроводки(Выборка, "Кт");
		
		ОписаниеПроводки.СчетДт      = АналитикаДт.Счет;
		ОписаниеПроводки.СчетКт      = АналитикаКт.Счет;
		ОписаниеПроводки.АналитикаДт = АналитикаДт;
		ОписаниеПроводки.АналитикаКт = АналитикаКт;
		ОписаниеПроводки.Суммы       = Выборка;
		ОписаниеПроводки.Содержание  = СодержаниеПроводки(Выборка.Выпуск, Выборка.СодержаниеПроводки);
		ОписаниеПроводки.Выпуск      = Выборка.Выпуск;
		
		ДобавитьПроводку(Проводки, ОписаниеПроводки);
			
	КонецЦикла;
	
КонецПроцедуры

// "Списание" из учета затрат

Процедура ДобавитьПроводкиВнешниеДвижения(Проводки, МенеджерВременныхТаблиц, Затраты, РазрезыУчетаРасходов, Протокол)
	
	// Проводки по внешнему списанию следует свернуть, поэтому сначала соберем их в отдельной коллекции
	ПроводкиВнешнееСписание = НоваяТаблицаПроводок();
	
	// В результате оценки стоимости не должна поменяться стоимость на счетах расчетов.
	// Вместо счета расчета сделаем проводку на счет внереализационных доходов или расходов.
	СчетаРасчетов = Новый Массив;
	СчетаРасчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками);     // 60
	СчетаРасчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами_);           // 71
	СчетаРасчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоПрочимОперациям);   // 73
	СчетаРасчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами); // 76
	СчетаРасчетов.Добавить(ПланыСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты);            // 79
	
	СчетВнереализационныхРасходов  = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
	СчетВнереализационныхДоходов   = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
	СубконтоНаСчетеДоходовРасходов = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.РазницыСтоимостиВозвратаИФактическойСтоимостиТоваров");
	
	// Скомпонуем данные об оценке вершин и всех внешних движениях
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СчетаРасчетов", СчетаРасчетов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ СчетаРасчетов
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетаРасчетов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВнешниеДвижения.Источник КАК Источник,
	|	ВнешниеДвижения.СчетКт КАК СчетКт,
	|	РасходыКт.ВидДеятельности КАК ВидДеятельностиКт,
	|	ВнешниеДвижения.ПодразделениеКт КАК ПодразделениеКт,
	|	ВнешниеДвижения.СубконтоКт1 КАК СубконтоКт1,
	|	ВнешниеДвижения.СубконтоКт2 КАК СубконтоКт2,
	|	ВнешниеДвижения.СубконтоКт3 КАК СубконтоКт3,
	|	ВЫБОР
	|		КОГДА СчетаРасчетов.Счет ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СчетДтРасчеты,
	|	ВнешниеДвижения.СчетДт КАК СчетДт,
	|	ВнешниеДвижения.ПодразделениеДт КАК ПодразделениеДт,
	|	ВнешниеДвижения.СубконтоДт1 КАК СубконтоДт1,
	|	ВнешниеДвижения.СубконтоДт2 КАК СубконтоДт2,
	|	ВнешниеДвижения.СубконтоДт3 КАК СубконтоДт3,
	|	ВнешниеДвижения.НоменклатураДт КАК НоменклатураДт,
	|	ЕСТЬNULL(ОценкаВершин.Вес, 0) КАК КоличествоИсточника,
	|	ЕСТЬNULL(ОценкаВершин.Сумма, 0) КАК Сумма,
	|	ЕСТЬNULL(ОценкаВершин.СуммаНУ, 0) КАК СуммаНУ,
	|	ЕСТЬNULL(ОценкаВершин.СуммаПР, 0) КАК СуммаПР,
	|	ЕСТЬNULL(ОценкаВершин.СуммаВР, 0) КАК СуммаВР,
	|	ВнешниеДвижения.Количество КАК Количество,
	|	ВнешниеДвижения.Сумма КАК ПредварительнаяСумма,
	|	ВнешниеДвижения.СуммаНУ КАК ПредварительнаяСуммаНУ,
	|	ВнешниеДвижения.СуммаПР КАК ПредварительнаяСуммаПР,
	|	ВнешниеДвижения.СуммаВР КАК ПредварительнаяСуммаВР,
	|	ВнешниеДвижения.Выпуск КАК Выпуск,
	|	ВЫБОР
	|		КОГДА СубконтоНоменклатурныеГруппы.НомерСубконто = 1
	|			ТОГДА ВнешниеДвижения.СубконтоКт1
	|		КОГДА СубконтоНоменклатурныеГруппы.НомерСубконто = 2
	|			ТОГДА ВнешниеДвижения.СубконтоКт2
	|		КОГДА СубконтоНоменклатурныеГруппы.НомерСубконто = 3
	|			ТОГДА ВнешниеДвижения.СубконтоКт3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|	КОНЕЦ КАК НоменклатурнаяГруппаКт,
	|	ВЫБОР
	|		КОГДА СубконтоСтатьиЗатрат.НомерСубконто = 1
	|			ТОГДА ВнешниеДвижения.СубконтоКт1
	|		КОГДА СубконтоСтатьиЗатрат.НомерСубконто = 2
	|			ТОГДА ВнешниеДвижения.СубконтоКт2
	|		КОГДА СубконтоСтатьиЗатрат.НомерСубконто = 3
	|			ТОГДА ВнешниеДвижения.СубконтоКт3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)
	|	КОНЕЦ КАК СтатьяЗатратКт,
	|	ВЫБОР
	|		КОГДА СубконтоСтатьиЗатрат.НомерСубконто = 1
	|			ТОГДА ВЫРАЗИТЬ(ВнешниеДвижения.СубконтоКт1 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		КОГДА СубконтоСтатьиЗатрат.НомерСубконто = 2
	|			ТОГДА ВЫРАЗИТЬ(ВнешниеДвижения.СубконтоКт2 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		КОГДА СубконтоСтатьиЗатрат.НомерСубконто = 3
	|			ТОГДА ВЫРАЗИТЬ(ВнешниеДвижения.СубконтоКт3 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПустаяСсылка)
	|	КОНЕЦ КАК ВидДеятельностиСтатьиЗатратКт,
	|	ВнешниеДвижения.ПравилоРаспределения КАК ПравилоРаспределения,
	|	СодержаниеПроводок.СодержаниеПроводки КАК СодержаниеПроводки
	|ИЗ
	|	ВнешниеДвижения КАК ВнешниеДвижения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОценкаВершин КАК ОценкаВершин
	|		ПО ВнешниеДвижения.Источник = ОценкаВершин.Идентификатор
	|		ЛЕВОЕ СОЕДИНЕНИЕ Расходы КАК РасходыКт
	|		ПО ВнешниеДвижения.Источник = РасходыКт.Идентификатор
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаРасчетов КАК СчетаРасчетов
	|		ПО ВнешниеДвижения.СчетДт = СчетаРасчетов.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ СодержаниеПроводокРаспределенияРасходов КАК СодержаниеПроводок
	|		ПО ВнешниеДвижения.ПравилоРаспределения = СодержаниеПроводок.Правило
	|		ЛЕВОЕ СОЕДИНЕНИЕ СубконтоНоменклатурныеГруппы КАК СубконтоНоменклатурныеГруппы
	|		ПО ВнешниеДвижения.СчетКт = СубконтоНоменклатурныеГруппы.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ СубконтоСтатьиЗатрат КАК СубконтоСтатьиЗатрат
	|		ПО ВнешниеДвижения.СчетКт = СубконтоСтатьиЗатрат.Счет
	|
	|УПОРЯДОЧИТЬ ПО
	|	Источник,
	|	СодержаниеПроводки,
	|	Выпуск,
	|	СчетДт,
	|	ПодразделениеДт,
	|	СубконтоДт1,
	|	СубконтоДт2,
	|	СубконтоДт3,
	|	НоменклатураДт
	|ИТОГИ
	|	МАКСИМУМ(КоличествоИсточника),
	|	МАКСИМУМ(Сумма),
	|	МАКСИМУМ(СуммаНУ),
	|	МАКСИМУМ(СуммаПР),
	|	МАКСИМУМ(СуммаВР)
	|ПО
	|	Источник";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаИсточник = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ОписаниеСуммБазовое  = ОписаниеКоллекцииСумм(); // Без расширенной аналитики
	ОписаниеСуммПроводок = ОписаниеКоллекцииСумм(Истина, Истина, Истина); // То, как записывается в коллекции проводок - раздельные суммы по небалансовым ресурсам
	
	ПараметрыФормированияПроводокПоЭлементамЗатрат = ЭлементыЗатрат.ПараметрыФормированияПроводок(
		РазрезыУчетаРасходов, 
		МенеджерВременныхТаблиц,
		Затраты.ОписаниеСумм,
		ОписаниеСуммПроводок);
	
	СоответствиеИменПредварительнаяСумма = Новый Соответствие; 
	СоответствиеИменПредварительнаяСумма.Вставить("Сумма",   "ПредварительнаяСумма");
	СоответствиеИменПредварительнаяСумма.Вставить("СуммаНУ", "ПредварительнаяСуммаНУ");
	СоответствиеИменПредварительнаяСумма.Вставить("СуммаПР", "ПредварительнаяСуммаПР");
	СоответствиеИменПредварительнаяСумма.Вставить("СуммаВР", "ПредварительнаяСуммаВР");
	
	// В результате оценки стоимости не должна поменяться стоимость на счете учета товаров в рознице, должна поменяться наценка.
	//
	// Чтобы это обеспечить для НТТ:
	// вслед за проводкой по списанию товаров в Дт 41.12
	// следует сделать проводку сторно Дт 41.12 Кт 42.02
	//
	// Почему это сработает:
	// пример схемы проводок по счетам учета товаров в НТТ и торговой наценки для перемещения товаров с оптового склада
	// 1. Дт 41.12 Кт 42.02 (Розничная цена)
	// 2. Дт 41.12 Кт 41.01 (Себестоимость)
	// 3. Дт 41.12 Кт 42.02 (- Себестоимость)
	//
	// В АТТ проводки по счетам торговой наценки формируются по другому принципу:
	// оценка запасов корректируется на счете 42.01, а не 41.11.
	// Подробнее см. создание и использование временной таблицы СчетаТорговойНаценкиАТТ.
	
	СчетаТорговойНаценкиНТТ = Новый Соответствие;
	СчетаТорговойНаценкиНТТ.Вставить(
		ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ,
		ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ);
		
	Пока ВыборкаИсточник.Следующий() Цикл
		
		Источник = ОписаниеВершины(Затраты, ВыборкаИсточник.Источник);
		Если Источник = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоИсточника = Источник.Вес;
		СуммыИсточника      = КоллекцииСумм.НовыйКоллекцияСумм(Затраты.ОписаниеСумм);
		КоллекцииСумм.Заполнить(СуммыИсточника, Источник, Затраты.ОписаниеСумм);
		
		Выборка = ВыборкаИсточник.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока Выборка.Следующий() Цикл // По приемникам
			
			// Рассчитаем сумму корректировки
			ОценкаДвижения = ОценитьДвижение(Выборка.Количество, КоличествоИсточника, СуммыИсточника, Затраты.ОписаниеСумм);
			
			Если Не КоллекцииСумм.Пустая(ОценкаДвижения, Затраты.ОписаниеСумм) Тогда
				
				// Запишем в протокол сумму расходного движения с отрицательным знаком
				НоваяЗаписьПротокола = Протокол.СальдоПослеРасчета.Добавить();
				НоваяЗаписьПротокола.Идентификатор = Выборка.Источник;
				КоллекцииСумм.Вычесть(НоваяЗаписьПротокола, ОценкаДвижения, Затраты.ОписаниеСумм);
				
				Если Выборка.Выпуск Тогда
					
					// Запишем в протокол выпуск (услуг)
					НоваяСтрока = Протокол.СправкаРасчетСебестоимостиПродукции.Добавить();
					КоллекцииСумм.Заполнить(НоваяСтрока, ОценкаДвижения, ОписаниеСуммБазовое); // Фактическая оценка
					НоваяСтрока.СуммаПлан            = 0; // Предварительную оценку удобнее получить позже
					НоваяСтрока.Продукция            = Выборка.НоменклатураДт;
					НоваяСтрока.СчетУчета            = Выборка.СчетКт;
					НоваяСтрока.Подразделение        = Выборка.ПодразделениеКт;
					НоваяСтрока.НоменклатурнаяГруппа = Выборка.НоменклатурнаяГруппаКт;
					
					Если ЗначениеЗаполнено(НоваяСтрока.Продукция) Тогда
						НоваяСтрока.ВидОперации = Перечисления.ВидыОперацийРасчетаСебестоимости.ВыпускПродукцииИУслуг;
					Иначе
						НоваяСтрока.ВидОперации = Перечисления.ВидыОперацийРасчетаСебестоимости.УслугиБезИспользованияПлановыхЦен;
					КонецЕсли;
					
				ИначеЕсли ЗначениеЗаполнено(Выборка.ПравилоРаспределения) Тогда
					
					// Запишем в протокол списание расходов
					
					НоваяСтрока = Протокол.СправкаРасчетСписанияКосвенныхРасходов.Добавить();
					НоваяСтрока.СчетУчета     = Выборка.СчетКт;
					НоваяСтрока.Подразделение = Выборка.ПодразделениеКт;
					НоваяСтрока.СтатьяЗатрат  = Выборка.СтатьяЗатратКт;
					НоваяСтрока.ВидДеятельностиДляНалоговогоУчетаЗатрат
	                                          = Выборка.ВидДеятельностиСтатьиЗатратКт;
					
					НоваяСтрока.СуммаЗатрат   = Выборка.Сумма;
					НоваяСтрока.СуммаЗатратНУ = Выборка.СуммаНУ;
					НоваяСтрока.СуммаЗатратПР = Выборка.СуммаПР;
					НоваяСтрока.СуммаЗатратВР = Выборка.СуммаВР;
					Если Выборка.ВидДеятельностиКт = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения Тогда
						НоваяСтрока.СуммаННП   = Выборка.Сумма;
						НоваяСтрока.СуммаННПНУ = Выборка.СуммаНУ;
						НоваяСтрока.СуммаННППР = Выборка.СуммаПР;
						НоваяСтрока.СуммаННПВР = Выборка.СуммаВР;
					Иначе
						НоваяСтрока.СуммаНеННП   = Выборка.Сумма;
						НоваяСтрока.СуммаНеННПНУ = Выборка.СуммаНУ;
						НоваяСтрока.СуммаНеННППР = Выборка.СуммаПР;
						НоваяСтрока.СуммаНеННПВР = Выборка.СуммаВР;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;

			// Подготовим проводки на сумму разницы между предварительной и окончательной суммами - "корректировки"
			
			ДоКорректировки = КоллекцииСумм.НовыйКоллекцияСумм(ОписаниеСуммБазовое);
			КоллекцииСумм.Заполнить(
				ДоКорректировки, 
				Выборка, 
				ОписаниеСуммБазовое,
				СоответствиеИменПредварительнаяСумма); // Из выборки берем поля с префиксом "ПредварительнаяСумма"
			
			Корректировка = КоллекцииСумм.НовыйКоллекцияСумм(Затраты.ОписаниеСумм);
			КоллекцииСумм.Заполнить(Корректировка, ОценкаДвижения, Затраты.ОписаниеСумм);
			КоллекцииСумм.Вычесть(Корректировка, ДоКорректировки, ОписаниеСуммБазовое);
			
			// Убедимся, что есть что корректировать
			Если КоллекцииСумм.Пустая(Корректировка, Затраты.ОписаниеСумм) Тогда
				Продолжить;
			КонецЕсли;
			
			СодержаниеПроводки = СодержаниеПроводки(Выборка.Выпуск, Выборка.СодержаниеПроводки);
			
			Если Не Выборка.СчетДтРасчеты Тогда
				
				// Обычная проводка
				ОписаниеПроводки = НовыйОписаниеПроводки();
				ОписаниеПроводки.СчетДт      = Выборка.СчетДт;
				ОписаниеПроводки.СчетКт      = Выборка.СчетКт;
				ОписаниеПроводки.АналитикаДт = НоваяСтруктураПолейПроводки(Выборка, "Дт");
				ОписаниеПроводки.АналитикаКт = НоваяСтруктураПолейПроводки(Выборка, "Кт");
				ОписаниеПроводки.Суммы       = Корректировка;
				ОписаниеПроводки.Содержание  = СодержаниеПроводки;
				ОписаниеПроводки.Выпуск      = Выборка.Выпуск;
				ОписаниеПроводки.ПараметрыДополнительныхПроводок = ПараметрыФормированияПроводокПоЭлементамЗатрат;

				ДобавитьПроводку(ПроводкиВнешнееСписание, ОписаниеПроводки);
					
				// Добавим проводку по торговой наценке	
				СчетТорговойНаценки = СчетаТорговойНаценкиНТТ[Выборка.СчетДт];
				Если СчетТорговойНаценки <> Неопределено Тогда
					
					ОписаниеПроводки = НовыйОписаниеПроводки();
					ОписаниеПроводки.СчетДт      = Выборка.СчетДт;
					ОписаниеПроводки.СчетКт      = СчетТорговойНаценки;
					ОписаниеПроводки.АналитикаДт = НоваяСтруктураПолейПроводки(Выборка, "Дт");
					ОписаниеПроводки.АналитикаКт = ОписаниеПроводки.АналитикаДт; // Аналитика на счете запасов и счете наценки совпадает
					ОписаниеПроводки.Суммы       = Корректировка;
					ОписаниеПроводки.Содержание  = СодержаниеПроводки;
					ОписаниеПроводки.Выпуск      = Выборка.Выпуск;
					ОписаниеПроводки.Сторно      = Истина;
					
					ДобавитьПроводку(ПроводкиВнешнееСписание, ОписаниеПроводки);
					
				КонецЕсли;
				
				
			Иначе // СчетДтРасчеты
				
				// Корректировка расчетов выполняется за счет внереализационных доходов или расходов,
				// а не за счет расчетов
				АналитикаПрочихДоходовРасходов = НоваяСтруктураПолейПроводки();
				АналитикаПрочихДоходовРасходов.Вставить("Подразделение", Выборка.ПодразделениеДт);
				АналитикаПрочихДоходовРасходов.Вставить("Субконто1",     СубконтоНаСчетеДоходовРасходов);
				
				// В зависимости от знака корректировки определим, что будем корректировать - доходы или расходы
				Если Корректировка.Сумма > 0 ИЛИ 
					(Корректировка.Сумма = 0 И 
						(Корректировка.СуммаНУ > 0 
						ИЛИ Корректировка.СуммаПР > 0 
						ИЛИ Корректировка.СуммаВР > 0)) Тогда
						
					// Расходы
					
					ОписаниеПроводки = НовыйОписаниеПроводки();
					ОписаниеПроводки.СчетДт      = СчетВнереализационныхРасходов;
					ОписаниеПроводки.СчетКт      = Выборка.СчетКт;
					ОписаниеПроводки.АналитикаДт = АналитикаПрочихДоходовРасходов;
					ОписаниеПроводки.АналитикаКт = НоваяСтруктураПолейПроводки(Выборка, "Кт");
					ОписаниеПроводки.Суммы       = Корректировка;
					ОписаниеПроводки.Содержание  = СодержаниеПроводки;
					ОписаниеПроводки.Выпуск      = Выборка.Выпуск;
					
					ДобавитьПроводку(ПроводкиВнешнееСписание, ОписаниеПроводки);
					
				Иначе
					
					// Доходы - сторно
					
					ОписаниеПроводки = НовыйОписаниеПроводки();
					ОписаниеПроводки.СчетДт      = Выборка.СчетКт;
					ОписаниеПроводки.СчетКт      = СчетВнереализационныхДоходов;
					ОписаниеПроводки.АналитикаДт = НоваяСтруктураПолейПроводки(Выборка, "Кт");
					ОписаниеПроводки.АналитикаКт = АналитикаПрочихДоходовРасходов;
					ОписаниеПроводки.Суммы       = Корректировка;
					ОписаниеПроводки.Содержание  = СодержаниеПроводки;
					ОписаниеПроводки.Выпуск      = Выборка.Выпуск;
					ОписаниеПроводки.Сторно      = Истина;
					
					ДобавитьПроводку(ПроводкиВнешнееСписание, ОписаниеПроводки);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;  // По Выборке
		
	КонецЦикла;  // По ВыборкаИсточник
	
	// Уничтожим таблицы, которые больше не понадобятся
	// Используем тот же объект Запрос
	Запрос.Текст = 
	"УНИЧТОЖИТЬ ВнешниеДвижения";
	Запрос.Выполнить();
	
	// Свернем проводки и добавим их в общую коллекцию 
	СвернутьТаблицуПроводок(ПроводкиВнешнееСписание);
	Для Каждого Проводка Из ПроводкиВнешнееСписание Цикл
		Если КоллекцииСумм.Пустая(Проводка, ОписаниеСуммПроводок) Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Проводки.Добавить(), Проводка);
	КонецЦикла;
	
КонецПроцедуры

// Счет 40

Процедура ДобавитьПроводкиСчет40(Проводки, Период, Организация, Ссылка)
	
	СпособУчетаВыпуска = УчетнаяПолитика.СпособУчетаВыпускаГотовойПродукции(Организация, Период);
	
	Если СпособУчетаВыпуска <> Перечисления.СпособыУчетаВыпускаГотовойПродукции.СИспользованиемСчета40 Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	СоздатьСчетаЗапасов(МенеджерВременныхТаблиц, Период, Организация);
	СоздатьСчетаРасходов(МенеджерВременныхТаблиц);
	СоздатьПредварительныеПроводкиВыпуск(МенеджерВременныхТаблиц, Период, Организация, Ложь); // Важно сохранить исходную аналитику учета расходов
	
	// Пронумеруем таблицу перед помещением в запрос.
	// Запрос в итоге вернет строки, которые нужно заменить.
	Проводки.Колонки.Добавить("Индекс", Новый ОписаниеТипов("Число")); // Удалим в конце процедуры
	Для Каждого СтрокаТаблицы Из Проводки Цикл
		СтрокаТаблицы.Индекс = Проводки.Индекс(СтрокаТаблицы);
	КонецЦикла;
	
	// Поместим проводки во временные таблицы.
	// Затем отберем среди них те, которые были отражены с плановой стоимостью.
	// Отбираем только по аналитике Кт, так как при реализации услуг аналитика Дт в предварительных проводках и окончательных может не совпадать:
	// в проводках в Дт счета 90 устанавливаем подразделение по подразделению Кт - см. ДобавитьПроводку()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц; // Это локальный менеджер, используется только в этой процедуре
	Запрос.УстановитьПараметр("Проводки", Проводки);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Проводки.Индекс,
	|	Проводки.Сумма,
	|	Проводки.СуммаНУДт,
	|	Проводки.СуммаПРДт,
	|	Проводки.СуммаВРДт,
	|	Проводки.СуммаНУКт,
	|	Проводки.СуммаПРКт,
	|	Проводки.СуммаВРКт,
	|	Проводки.СчетДт КАК СчетДт,
	|	Проводки.СубконтоДт1 КАК СубконтоДт1,
	|	Проводки.СубконтоДт2 КАК СубконтоДт2,
	|	Проводки.СубконтоДт3 КАК СубконтоДт3,
	|	Проводки.СчетКт КАК СчетКт,
	|	Проводки.СубконтоКт1 КАК СубконтоКт1,
	|	Проводки.СубконтоКт2 КАК СубконтоКт2,
	|	Проводки.СубконтоКт3 КАК СубконтоКт3,
	|	Проводки.ПодразделениеДт КАК ПодразделениеДт,
	|	Проводки.ПодразделениеКт КАК ПодразделениеКт,
	|	Проводки.Содержание
	|ПОМЕСТИТЬ ВТ_ПредварительныеПроводкиСПлановойСтоимостью
	|ИЗ
	|	&Проводки КАК Проводки
	|ГДЕ
	|	Проводки.Выпуск
	|	И Проводки.СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыпускПродукции)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Проводки.Индекс,
	|	Проводки.Сумма,
	|	Проводки.СуммаНУДт,
	|	Проводки.СуммаПРДт,
	|	Проводки.СуммаВРДт,
	|	Проводки.СуммаНУКт,
	|	Проводки.СуммаПРКт,
	|	Проводки.СуммаВРКт,
	|	Проводки.СчетДт КАК СчетДт,
	|	Проводки.СубконтоДт1 КАК СубконтоДт1,
	|	Проводки.СубконтоДт2 КАК СубконтоДт2,
	|	Проводки.СубконтоДт3 КАК СубконтоДт3,
	|	Проводки.СчетКт КАК СчетКт,
	|	Проводки.СубконтоКт1 КАК СубконтоКт1,
	|	Проводки.СубконтоКт2 КАК СубконтоКт2,
	|	Проводки.СубконтоКт3 КАК СубконтоКт3,
	|	Проводки.ПодразделениеДт КАК ПодразделениеДт,
	|	Проводки.ПодразделениеКт КАК ПодразделениеКт,
	|	Проводки.Содержание
	|ПОМЕСТИТЬ ВТ_ОкончательныеПроводки
	|ИЗ
	|	&Проводки КАК Проводки
	|ГДЕ
	|	Проводки.Выпуск
	|	И Проводки.СчетКт <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыпускПродукции)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетКт,
	|	ПодразделениеКт,
	|	СубконтоКт1,
	|	СубконтоКт2,
	|	СубконтоКт3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВыпускПоПлановойСтоимости.СчетКт КАК СчетКт,
	|	ВыпускПоПлановойСтоимости.ПодразделениеКт КАК ПодразделениеКт,
	|	ВыпускПоПлановойСтоимости.СубконтоКт1 КАК СубконтоКт1,
	|	ВыпускПоПлановойСтоимости.СубконтоКт2 КАК СубконтоКт2,
	|	ВыпускПоПлановойСтоимости.СубконтоКт3 КАК СубконтоКт3
	|ПОМЕСТИТЬ ВТ_ПроводкиСПлановойСтоимостью
	|ИЗ
	|	ПредварительныеПроводкиВыпуск КАК ВыпускПоПлановойСтоимости
	|ГДЕ
	|	ВыпускПоПлановойСтоимости.Сумма <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетКт,
	|	ПодразделениеКт,
	|	СубконтоКт1,
	|	СубконтоКт2,
	|	СубконтоКт3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Проводки.Индекс,
	|	Проводки.Сумма,
	|	Проводки.СуммаНУДт,
	|	Проводки.СуммаПРДт,
	|	Проводки.СуммаВРДт,
	|	Проводки.СуммаНУКт,
	|	Проводки.СуммаПРКт,
	|	Проводки.СуммаВРКт,
	|	Проводки.СчетДт,
	|	Проводки.СубконтоДт1,
	|	Проводки.СубконтоДт2,
	|	Проводки.СубконтоДт3,
	|	Проводки.СчетКт КАК СчетКт,
	|	Проводки.СубконтоКт1,
	|	Проводки.СубконтоКт2,
	|	Проводки.СубконтоКт3,
	|	Проводки.ПодразделениеДт,
	|	Проводки.ПодразделениеКт,
	|	Проводки.Содержание,
	|	ВЫБОР
	|		КОГДА СубконтоНоменклатурныеГруппы.НомерСубконто = 1
	|			ТОГДА Проводки.СубконтоКт1
	|		КОГДА СубконтоНоменклатурныеГруппы.НомерСубконто = 2
	|			ТОГДА Проводки.СубконтоКт2
	|		КОГДА СубконтоНоменклатурныеГруппы.НомерСубконто = 3
	|			ТОГДА Проводки.СубконтоКт3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|	КОНЕЦ КАК НоменклатурнаяГруппа
	|ПОМЕСТИТЬ ВТ_ОкончательныеПроводкиСПлановойСтоимостью
	|ИЗ
	|	ВТ_ОкончательныеПроводки КАК Проводки
	|		ЛЕВОЕ СОЕДИНЕНИЕ СубконтоНоменклатурныеГруппы КАК СубконтоНоменклатурныеГруппы
	|		ПО Проводки.СчетКт = СубконтоНоменклатурныеГруппы.Счет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПроводкиСПлановойСтоимостью КАК ВыпускПоПлановойСтоимости
	|		ПО Проводки.СчетКт = ВыпускПоПлановойСтоимости.СчетКт
	|			И Проводки.ПодразделениеКт = ВыпускПоПлановойСтоимости.ПодразделениеКт
	|			И Проводки.СубконтоКт1 = ВыпускПоПлановойСтоимости.СубконтоКт1
	|			И Проводки.СубконтоКт2 = ВыпускПоПлановойСтоимости.СубконтоКт2
	|			И Проводки.СубконтоКт3 = ВыпускПоПлановойСтоимости.СубконтоКт3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ПроводкиСПлановойСтоимостью";
	
	Запрос.Выполнить();
	
	// Запомним строки, которые потребуется удалить.
	// Но удалим их позже - только после того, когда добавим новые строки.
	// Так проще сохранить порядок строк.
	СтрокиКУдалению = Новый Массив;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Проводки.Индекс
	|ИЗ
	|	ВТ_ПредварительныеПроводкиСПлановойСтоимостью КАК Проводки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Проводки.Индекс
	|ИЗ
	|	ВТ_ОкончательныеПроводкиСПлановойСтоимостью КАК Проводки";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокиКУдалению.Добавить(Проводки[Выборка.Индекс]);
	КонецЦикла;
	
	// Получим строки, которые нужно заменить в таблице проводок:
	// а. в проводках по Кт счета 40 заменим вид стоимости на "Отклонение".
	//    Такие проводки - это сторно предварительных проводок (предварительных - то есть сформированных первичными документами).
	//    Цель: добиться того, что проводки по Кт счета 40, сформированные регламентной операцией, 
	//    будут иметь вид стоимости Отклонение.
	// б. проводки по выпуску разобъем на две:
	//   1. По Дт счета 40 с видом стоимости "Выпуск по фактической стоимости"
	//   2. По Кт счета 40 с видом стоимости "Отклонение"
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц; // Это локальный менеджер
	
	ВидыСубконтоСчет40 = ПланыСчетов.Хозрасчетный.ВыпускПродукции.ВидыСубконто;
	
	ВидыСтоимости = ВидыСубконтоСчет40.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыСтоимости);
	Если ВидыСтоимости = Неопределено Тогда
		Запрос.УстановитьПараметр("НомерСубконтоВидыСтоимости", 0);
	Иначе
		Запрос.УстановитьПараметр("НомерСубконтоВидыСтоимости", ВидыСтоимости.НомерСтроки);
	КонецЕсли;
	
	НоменклатурныеГруппы = ВидыСубконтоСчет40.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
	Если НоменклатурныеГруппы = Неопределено Тогда
		Запрос.УстановитьПараметр("НомерСубконтоНоменклатурныеГруппы", 0);
	Иначе
		Запрос.УстановитьПараметр("НомерСубконтоНоменклатурныеГруппы", НоменклатурныеГруппы.НомерСтроки);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("УчетНаСчетеВыпускПродукцииПоПодразделениям", ПланыСчетов.Хозрасчетный.ВыпускПродукции.УчетПоПодразделениям);
	Запрос.УстановитьПараметр("ПустоеПодразделение",                        БухгалтерскийУчетПереопределяемый.ПустоеПодразделение());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(Проводки.Индекс) КАК Индекс,
	|	Проводки.Порядок КАК Порядок,
	|	Проводки.СчетДт,
	|	Проводки.ПодразделениеДт,
	|	Проводки.СубконтоДт1,
	|	Проводки.СубконтоДт2,
	|	Проводки.СубконтоДт3,
	|	Проводки.СчетКт,
	|	Проводки.ПодразделениеКт,
	|	Проводки.СубконтоКт1,
	|	Проводки.СубконтоКт2,
	|	Проводки.СубконтоКт3,
	|	СУММА(Проводки.Сумма) КАК Сумма,
	|	СУММА(Проводки.СуммаНУДт) КАК СуммаНУДт,
	|	СУММА(Проводки.СуммаПРДт) КАК СуммаПРДт,
	|	СУММА(Проводки.СуммаВРДт) КАК СуммаВРДт,
	|	СУММА(Проводки.СуммаНУКт) КАК СуммаНУКт,
	|	СУММА(Проводки.СуммаПРКт) КАК СуммаПРКт,
	|	СУММА(Проводки.СуммаВРКт) КАК СуммаВРКт
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПлановаяСтоимость.Индекс КАК Индекс,
	|		2 КАК Порядок,
	|		ПлановаяСтоимость.СчетДт КАК СчетДт,
	|		ПлановаяСтоимость.ПодразделениеДт КАК ПодразделениеДт,
	|		ПлановаяСтоимость.СубконтоДт1 КАК СубконтоДт1,
	|		ПлановаяСтоимость.СубконтоДт2 КАК СубконтоДт2,
	|		ПлановаяСтоимость.СубконтоДт3 КАК СубконтоДт3,
	|		ПлановаяСтоимость.СчетКт КАК СчетКт,
	|		ВЫБОР
	|			КОГДА &УчетНаСчетеВыпускПродукцииПоПодразделениям
	|				ТОГДА ПлановаяСтоимость.ПодразделениеКт
	|			ИНАЧЕ &ПустоеПодразделение
	|		КОНЕЦ КАК ПодразделениеКт,
	|		ВЫБОР
	|			КОГДА &НомерСубконтоВидыСтоимости = 1
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСтоимости.Отклонение)
	|			ИНАЧЕ ПлановаяСтоимость.СубконтоКт1
	|		КОНЕЦ КАК СубконтоКт1,
	|		ВЫБОР
	|			КОГДА &НомерСубконтоВидыСтоимости = 2
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСтоимости.Отклонение)
	|			ИНАЧЕ ПлановаяСтоимость.СубконтоКт2
	|		КОНЕЦ КАК СубконтоКт2,
	|		ВЫБОР
	|			КОГДА &НомерСубконтоВидыСтоимости = 3
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСтоимости.Отклонение)
	|			ИНАЧЕ ПлановаяСтоимость.СубконтоКт3
	|		КОНЕЦ КАК СубконтоКт3,
	|		ПлановаяСтоимость.Сумма КАК Сумма,
	|		ПлановаяСтоимость.СуммаНУДт КАК СуммаНУДт,
	|		ПлановаяСтоимость.СуммаПРДт КАК СуммаПРДт,
	|		ПлановаяСтоимость.СуммаВРДт КАК СуммаВРДт,
	|		ПлановаяСтоимость.СуммаНУКт КАК СуммаНУКт,
	|		ПлановаяСтоимость.СуммаПРКт КАК СуммаПРКт,
	|		ПлановаяСтоимость.СуммаВРКт КАК СуммаВРКт
	|	ИЗ
	|		ВТ_ПредварительныеПроводкиСПлановойСтоимостью КАК ПлановаяСтоимость
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Дт40.Индекс,
	|		1,
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыпускПродукции),
	|		ВЫБОР
	|			КОГДА &УчетНаСчетеВыпускПродукцииПоПодразделениям
	|				ТОГДА Дт40.ПодразделениеКт
	|			ИНАЧЕ &ПустоеПодразделение
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА &НомерСубконтоНоменклатурныеГруппы = 1
	|				ТОГДА Дт40.НоменклатурнаяГруппа
	|			КОГДА &НомерСубконтоВидыСтоимости = 1
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСтоимости.Фактическая)
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА &НомерСубконтоНоменклатурныеГруппы = 2
	|				ТОГДА Дт40.НоменклатурнаяГруппа
	|			КОГДА &НомерСубконтоВидыСтоимости = 2
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСтоимости.Фактическая)
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА &НомерСубконтоНоменклатурныеГруппы = 3
	|				ТОГДА Дт40.НоменклатурнаяГруппа
	|			КОГДА &НомерСубконтоВидыСтоимости = 3
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСтоимости.Фактическая)
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ,
	|		Дт40.СчетКт,
	|		Дт40.ПодразделениеКт,
	|		Дт40.СубконтоКт1,
	|		Дт40.СубконтоКт2,
	|		Дт40.СубконтоКт3,
	|		Дт40.Сумма,
	|		Дт40.СуммаНУДт,
	|		Дт40.СуммаПРДт,
	|		Дт40.СуммаВРДт,
	|		Дт40.СуммаНУКт,
	|		Дт40.СуммаПРКт,
	|		Дт40.СуммаВРКт
	|	ИЗ
	|		ВТ_ОкончательныеПроводкиСПлановойСтоимостью КАК Дт40
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Кт40.Индекс,
	|		2,
	|		Кт40.СчетДт,
	|		Кт40.ПодразделениеДт,
	|		Кт40.СубконтоДт1,
	|		Кт40.СубконтоДт2,
	|		Кт40.СубконтоДт3,
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыпускПродукции),
	|		ВЫБОР
	|			КОГДА &УчетНаСчетеВыпускПродукцииПоПодразделениям
	|				ТОГДА Кт40.ПодразделениеКт
	|			ИНАЧЕ &ПустоеПодразделение
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА &НомерСубконтоНоменклатурныеГруппы = 1
	|				ТОГДА Кт40.НоменклатурнаяГруппа
	|			КОГДА &НомерСубконтоВидыСтоимости = 1
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСтоимости.Отклонение)
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА &НомерСубконтоНоменклатурныеГруппы = 2
	|				ТОГДА Кт40.НоменклатурнаяГруппа
	|			КОГДА &НомерСубконтоВидыСтоимости = 2
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСтоимости.Отклонение)
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА &НомерСубконтоНоменклатурныеГруппы = 3
	|				ТОГДА Кт40.НоменклатурнаяГруппа
	|			КОГДА &НомерСубконтоВидыСтоимости = 3
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСтоимости.Отклонение)
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ,
	|		Кт40.Сумма,
	|		Кт40.СуммаНУДт,
	|		Кт40.СуммаПРДт,
	|		Кт40.СуммаВРДт,
	|		Кт40.СуммаНУКт,
	|		Кт40.СуммаПРКт,
	|		Кт40.СуммаВРКт
	|	ИЗ
	|		ВТ_ОкончательныеПроводкиСПлановойСтоимостью КАК Кт40) КАК Проводки
	|
	|СГРУППИРОВАТЬ ПО
	|	Проводки.СчетДт,
	|	Проводки.ПодразделениеДт,
	|	Проводки.СубконтоДт1,
	|	Проводки.СубконтоДт2,
	|	Проводки.СубконтоДт3,
	|	Проводки.СчетКт,
	|	Проводки.ПодразделениеКт,
	|	Проводки.СубконтоКт1,
	|	Проводки.СубконтоКт2,
	|	Проводки.СубконтоКт3,
	|	Проводки.Порядок
	|
	|УПОРЯДОЧИТЬ ПО
	|	Индекс УБЫВ,
	|	Проводки.Порядок УБЫВ";
	
	// Выборка упорядочена так, чтобы строки добавлялись "с конца".
	// Этим обеспечиваем, что проводки будут вставлены перед теми, которые собрались удалять.
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Проводки.Вставить(Выборка.Индекс);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка, , "ПодразделениеДт, ПодразделениеКт");
		НоваяСтрока.Содержание = СодержаниеПроводки(Истина);
		
		БухгалтерскийУчет.УстановитьПодразделенияПроводки(
			НоваяСтрока, 
			Выборка.ПодразделениеДт, 
			Выборка.ПодразделениеКт);
		
	КонецЦикла;
	
	// Удалим "приговоренные" строки
	Для Каждого Проводка Из СтрокиКУдалению Цикл
		Проводки.Удалить(Проводка);
	КонецЦикла;
	
	// Уберем за собой
	Проводки.Колонки.Удалить("Индекс");
	
	// Менеджер локальный, поэтому временные таблицы можно не уничтожать
	
	ЗарегистрироватьЭтап("Готовы проводки по счету 40", Ссылка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОТОКОЛИРОВАНИЕ ХОДА РАСЧЕТА

Функция НовыйПротокол(ОписаниеСумм)
	
	ТипСумма = УчетЗатрат.ТипСумма();
	
	// Протокол используется для заполнения справок-расчетов
	Протокол = Новый Структура;
	Протокол.Вставить("ПравилаРаспределения", ПравилаРаспределенияРасходов.НовыеПравилаРаспределения());
	
	// Суммарная оценка запасов - включает начальное сальдо и сумму всех поступлений
	Протокол.Вставить("ОценкаЗапасов", Новый ТаблицаЗначений);
	Протокол.ОценкаЗапасов.Колонки.Добавить("Идентификатор", УчетЗатрат.ТипИдентификатораВершины());
	Протокол.ОценкаЗапасов.Индексы.Добавить("Идентификатор");
	КоллекцииСумм.ДополнитьТаблицуЗначенийКолонкамиСумм(Протокол.ОценкаЗапасов, ОписаниеСумм);
	
	// Движения из Расходов в Запасы
	Протокол.Вставить("СебестоимостьВыпущеннойПродукции", Новый ТаблицаЗначений);
	Протокол.СебестоимостьВыпущеннойПродукции.Колонки.Добавить("Идентификатор", УчетЗатрат.ТипИдентификатораВершины());
	Протокол.СебестоимостьВыпущеннойПродукции.Индексы.Добавить("Идентификатор");
	КоллекцииСумм.ДополнитьТаблицуЗначенийКолонкамиСумм(Протокол.СебестоимостьВыпущеннойПродукции, ОписаниеСумм);
	
	// Сальдо на счетах затрат после формирования проводок
	Протокол.Вставить("СальдоПослеРасчета", Новый ТаблицаЗначений);
	Протокол.СальдоПослеРасчета.Колонки.Добавить("Идентификатор", УчетЗатрат.ТипИдентификатораВершины());
	Протокол.СальдоПослеРасчета.Индексы.Добавить("Идентификатор");
	КоллекцииСумм.ДополнитьТаблицуЗначенийКолонкамиСумм(Протокол.СальдоПослеРасчета, ОписаниеСумм);
	
	// Ключи вершин
	Протокол.Вставить("КлючиВершин", Новый ТаблицаЗначений);
	Протокол.КлючиВершин.Колонки.Добавить("Идентификатор", УчетЗатрат.ТипИдентификатораВершины());
	Протокол.КлючиВершин.Колонки.Добавить("Счет",          Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	Протокол.КлючиВершин.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Протокол.КлючиВершин.Колонки.Добавить("Субконто1",     Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип);
	Протокол.КлючиВершин.Колонки.Добавить("Субконто2",     Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип);
	Протокол.КлючиВершин.Колонки.Добавить("Субконто3",     Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип);
	Протокол.КлючиВершин.Колонки.Добавить("Номенклатура",  Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Протокол.КлючиВершин.Колонки.Добавить("КорСчет",       Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	Протокол.КлючиВершин.Индексы.Добавить("Идентификатор");
	
	// Себестоимость в разрезе продукции, включая те случаи, когда в проводки не записывается номенклатура
	Протокол.Вставить("СправкаРасчетСебестоимостиПродукции",    Новый ТаблицаЗначений);
	Протокол.СправкаРасчетСебестоимостиПродукции.Колонки.Добавить("Продукция",            Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
 	Протокол.СправкаРасчетСебестоимостиПродукции.Колонки.Добавить("СчетУчета",            Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	Протокол.СправкаРасчетСебестоимостиПродукции.Колонки.Добавить("Подразделение",        БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	Протокол.СправкаРасчетСебестоимостиПродукции.Колонки.Добавить("НоменклатурнаяГруппа", Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
 	Протокол.СправкаРасчетСебестоимостиПродукции.Колонки.Добавить("ВидОперации",          Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийРасчетаСебестоимости"));
	Протокол.СправкаРасчетСебестоимостиПродукции.Колонки.Добавить("СуммаПлан",            ТипСумма);
	Протокол.СправкаРасчетСебестоимостиПродукции.Колонки.Добавить("Сумма",                ТипСумма);
	Протокол.СправкаРасчетСебестоимостиПродукции.Колонки.Добавить("СуммаНУ",              ТипСумма);
	Протокол.СправкаРасчетСебестоимостиПродукции.Колонки.Добавить("СуммаПР",              ТипСумма);
	Протокол.СправкаРасчетСебестоимостиПродукции.Колонки.Добавить("СуммаВР",              ТипСумма);
	Протокол.СправкаРасчетСебестоимостиПродукции.Колонки.Добавить("СуммаНЗП",             ТипСумма);
	Протокол.СправкаРасчетСебестоимостиПродукции.Колонки.Добавить("СуммаНЗПНУ",           ТипСумма);
	Протокол.СправкаРасчетСебестоимостиПродукции.Колонки.Добавить("СуммаНЗППР",           ТипСумма);
	Протокол.СправкаРасчетСебестоимостиПродукции.Колонки.Добавить("СуммаНЗПВР",           ТипСумма);
	
	// Расходы, списанные из контура учета затрат, но не являющиеся выпуском
	Протокол.Вставить("СправкаРасчетСписанияКосвенныхРасходов", Новый ТаблицаЗначений);
 	Протокол.СправкаРасчетСписанияКосвенныхРасходов.Колонки.Добавить("СчетУчета",     Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	Протокол.СправкаРасчетСписанияКосвенныхРасходов.Колонки.Добавить("Подразделение", БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	Протокол.СправкаРасчетСписанияКосвенныхРасходов.Колонки.Добавить("СтатьяЗатрат",  Новый ОписаниеТипов("СправочникСсылка.СтатьиЗатрат"));
 	Протокол.СправкаРасчетСписанияКосвенныхРасходов.Колонки.Добавить("ВидДеятельностиДляНалоговогоУчетаЗатрат",   Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДеятельностиДляНалоговогоУчетаЗатрат"));// Из статьи затрат
	Протокол.СправкаРасчетСписанияКосвенныхРасходов.Колонки.Добавить("СуммаЗатрат",   ТипСумма); // Всего до списания
	Протокол.СправкаРасчетСписанияКосвенныхРасходов.Колонки.Добавить("СуммаЗатратНУ", ТипСумма); 
	Протокол.СправкаРасчетСписанияКосвенныхРасходов.Колонки.Добавить("СуммаЗатратПР", ТипСумма); 
	Протокол.СправкаРасчетСписанияКосвенныхРасходов.Колонки.Добавить("СуммаЗатратВР", ТипСумма); 
	Протокол.СправкаРасчетСписанияКосвенныхРасходов.Колонки.Добавить("СуммаННП",      ТипСумма); // По видам деятельности на основной системе учета (облагаемым налогом на прибыль)
	Протокол.СправкаРасчетСписанияКосвенныхРасходов.Колонки.Добавить("СуммаННПНУ",    ТипСумма);
	Протокол.СправкаРасчетСписанияКосвенныхРасходов.Колонки.Добавить("СуммаННППР",    ТипСумма);
	Протокол.СправкаРасчетСписанияКосвенныхРасходов.Колонки.Добавить("СуммаННПВР",    ТипСумма);
	Протокол.СправкаРасчетСписанияКосвенныхРасходов.Колонки.Добавить("СуммаНеННП",    ТипСумма); // По видам деятельности не на основной системе учета (не облагаемым налогом на прибыль)
	Протокол.СправкаРасчетСписанияКосвенныхРасходов.Колонки.Добавить("СуммаНеННПНУ",  ТипСумма);
	Протокол.СправкаРасчетСписанияКосвенныхРасходов.Колонки.Добавить("СуммаНеННППР",  ТипСумма);
	Протокол.СправкаРасчетСписанияКосвенныхРасходов.Колонки.Добавить("СуммаНеННПВР",  ТипСумма);
	
	Возврат Протокол;
	
КонецФункции

Процедура ЗарегистрироватьЭтап(Этап, Ссылка)
	
	ЗаписьЖурналаРегистрации(
		"РегламентныеОперации",
		УровеньЖурналаРегистрации.Информация,
		Метаданные.Документы.РегламентнаяОперация,
		Ссылка,
		Этап);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СОСТАВЛЕНИЕ СПРАВОК-РАСЧЕТОВ

Процедура СоздатьСальдоПослеРасчета(МенеджерВременныхТаблиц, Протокол)
	
	// Данные протокола поместим во временную таблицу 
	// и преобразуем их к удобному для дальнейшей обработки виду:
	// - заполним аналитику учета затрат (в протоколе - только номер вершины)
	// - уточним суммы НУ и ПР для расходов, не учитываемых в целях налогообложения.
	// Уточнять суммы НУ и ПР нужно, так как в конфигурации принято соглашение:
	// не учитываемые расходы никогда не отражаются по виду учета "НУ",
	// могут отражаться по виду учета "ПР". 
	// См. также
	// - ОтразитьДоходыРасходыНеУчитываемыеВНалоговомУчете в модуле набора записей регистра Хозрасчетный
	// - правило распределения расходов ДобавитьПравилоРасходыНеУчитываемыеВЦеляхНалогообложения()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Протокол", Протокол.СальдоПослеРасчета);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Протокол.Идентификатор КАК Идентификатор,
	|	Протокол.Сумма,
	|	Протокол.СуммаНУ,
	|	Протокол.СуммаПР,
	|	Протокол.СуммаВР
	|ПОМЕСТИТЬ ВТ_Протокол
	|ИЗ
	|	&Протокол КАК Протокол
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сальдо.Идентификатор КАК Идентификатор,
	|	СУММА(Сальдо.Сумма) КАК Сумма,
	|	СУММА(Сальдо.СуммаНУ) КАК СуммаНУ,
	|	СУММА(Сальдо.СуммаПР) КАК СуммаПР,
	|	СУММА(Сальдо.СуммаВР) КАК СуммаВР
	|ПОМЕСТИТЬ ВТ_СальдоПослеРасчета
	|ИЗ
	|	ВТ_Протокол КАК Сальдо
	|
	|СГРУППИРОВАТЬ ПО
	|	Сальдо.Идентификатор
	|
	|ИМЕЮЩИЕ
	|	(СУММА(Сальдо.Сумма) <> 0
	|		ИЛИ СУММА(Сальдо.СуммаНУ) <> 0
	|		ИЛИ СУММА(Сальдо.СуммаПР) <> 0
	|		ИЛИ СУММА(Сальдо.СуммаВР) <> 0)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ключи.Счет КАК Счет,
	|	Ключи.Подразделение,
	|	Ключи.Субконто1,
	|	Ключи.Субконто2,
	|	Ключи.Субконто3,
	|	Сальдо.Сумма,
	|	Сальдо.СуммаНУ,
	|	Сальдо.СуммаПР,
	|	Сальдо.СуммаВР
	|ПОМЕСТИТЬ ВТ_СальдоПослеРасчетаАналитика
	|ИЗ
	|	ВТ_СальдоПослеРасчета КАК Сальдо
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИдентификаторыВершин КАК Ключи
	|		ПО Сальдо.Идентификатор = Ключи.Идентификатор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Протокол
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_СальдоПослеРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатьиЗатрат.Ссылка КАК СтатьяЗатрат
	|ПОМЕСТИТЬ ВТ_СтатьиЗатратНеУчитываемые
	|ИЗ
	|	Справочник.СтатьиЗатрат КАК СтатьиЗатрат
	|ГДЕ
	|	СтатьиЗатрат.ВидРасходовНУ = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтатьяЗатрат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СальдоПослеРасчета.Счет КАК Счет,
	|	СальдоПослеРасчета.Подразделение КАК Подразделение,
	|	СальдоПослеРасчета.Субконто1 КАК Субконто1,
	|	СальдоПослеРасчета.Субконто2 КАК Субконто2,
	|	СальдоПослеРасчета.Субконто3 КАК Субконто3
	|ПОМЕСТИТЬ ВТ_НеучитываемыеРасходы
	|ИЗ
	|	ВТ_СальдоПослеРасчетаАналитика КАК СальдоПослеРасчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СубконтоСтатьиЗатрат КАК СубконтоСтатьиЗатрат
	|		ПО СальдоПослеРасчета.Счет = СубконтоСтатьиЗатрат.Счет
	|			И (СубконтоСтатьиЗатрат.НомерСубконто = 1)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СтатьиЗатратНеУчитываемые КАК СтатьиЗатрат
	|		ПО СальдоПослеРасчета.Субконто1 = СтатьиЗатрат.СтатьяЗатрат
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СальдоПослеРасчета.Счет,
	|	СальдоПослеРасчета.Подразделение,
	|	СальдоПослеРасчета.Субконто1,
	|	СальдоПослеРасчета.Субконто2,
	|	СальдоПослеРасчета.Субконто3
	|ИЗ
	|	ВТ_СальдоПослеРасчетаАналитика КАК СальдоПослеРасчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СубконтоСтатьиЗатрат КАК СубконтоСтатьиЗатрат
	|		ПО СальдоПослеРасчета.Счет = СубконтоСтатьиЗатрат.Счет
	|			И (СубконтоСтатьиЗатрат.НомерСубконто = 2)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СтатьиЗатратНеУчитываемые КАК СтатьиЗатрат
	|		ПО СальдоПослеРасчета.Субконто2 = СтатьиЗатрат.СтатьяЗатрат
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СальдоПослеРасчета.Счет,
	|	СальдоПослеРасчета.Подразделение,
	|	СальдоПослеРасчета.Субконто1,
	|	СальдоПослеРасчета.Субконто2,
	|	СальдоПослеРасчета.Субконто3
	|ИЗ
	|	ВТ_СальдоПослеРасчетаАналитика КАК СальдоПослеРасчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СубконтоСтатьиЗатрат КАК СубконтоСтатьиЗатрат
	|		ПО СальдоПослеРасчета.Счет = СубконтоСтатьиЗатрат.Счет
	|			И (СубконтоСтатьиЗатрат.НомерСубконто = 3)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СтатьиЗатратНеУчитываемые КАК СтатьиЗатрат
	|		ПО СальдоПослеРасчета.Субконто3 = СтатьиЗатрат.СтатьяЗатрат
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет,
	|	Подразделение,
	|	Субконто1,
	|	Субконто2,
	|	Субконто3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_СтатьиЗатратНеУчитываемые
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СальдоПослеРасчета.Счет КАК Счет,
	|	СальдоПослеРасчета.Подразделение,
	|	СальдоПослеРасчета.Субконто1,
	|	СальдоПослеРасчета.Субконто2,
	|	СальдоПослеРасчета.Субконто3,
	|	СУММА(СальдоПослеРасчета.Сумма) КАК Сумма,
	|	СУММА(ВЫБОР
	|			КОГДА НеучитываемыеРасходы.Счет ЕСТЬ NULL 
	|				ТОГДА СальдоПослеРасчета.СуммаНУ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаНУ,
	|	СУММА(ВЫБОР
	|			КОГДА НеучитываемыеРасходы.Счет ЕСТЬ NULL 
	|				ТОГДА СальдоПослеРасчета.СуммаПР
	|			ИНАЧЕ СальдоПослеРасчета.СуммаНУ + СальдоПослеРасчета.СуммаПР
	|		КОНЕЦ) КАК СуммаПР,
	|	СУММА(СальдоПослеРасчета.СуммаВР) КАК СуммаВР
	|ПОМЕСТИТЬ СальдоПослеРасчета
	|ИЗ
	|	ВТ_СальдоПослеРасчетаАналитика КАК СальдоПослеРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НеучитываемыеРасходы КАК НеучитываемыеРасходы
	|		ПО СальдоПослеРасчета.Счет = НеучитываемыеРасходы.Счет
	|			И СальдоПослеРасчета.Подразделение = НеучитываемыеРасходы.Подразделение
	|			И СальдоПослеРасчета.Субконто1 = НеучитываемыеРасходы.Субконто1
	|			И СальдоПослеРасчета.Субконто2 = НеучитываемыеРасходы.Субконто2
	|			И СальдоПослеРасчета.Субконто3 = НеучитываемыеРасходы.Субконто3
	|
	|СГРУППИРОВАТЬ ПО
	|	СальдоПослеРасчета.Счет,
	|	СальдоПослеРасчета.Подразделение,
	|	СальдоПослеРасчета.Субконто1,
	|	СальдоПослеРасчета.Субконто2,
	|	СальдоПослеРасчета.Субконто3
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_СальдоПослеРасчетаАналитика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_НеучитываемыеРасходы";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура УничтожитьСальдоПослеРасчета(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"УНИЧТОЖИТЬ СальдоПослеРасчета";
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ПодготовитьСправкаРасчетПорядкаПеределов(Затраты, МенеджерВременныхТаблиц)
	
	// Выведем порядок переделов в виде, привычном для пользователей прошлых версий
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Вершины", Затраты.Вершины);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Вершины.Идентификатор КАК Идентификатор,
	|	Вершины.НомерПередела КАК НомерПередела
	|ПОМЕСТИТЬ ВТ_НомераПеределов
	|ИЗ
	|	&Вершины КАК Вершины
	|ГДЕ
	|	Вершины.РазделУчета = ""Расходы""
	|	И Вершины.НомерПередела > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Расходы.Счет КАК Счет,
	|	Расходы.Подразделение КАК Подразделение,
	|	Расходы.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	МАКСИМУМ(НомераПеределов.НомерПередела) КАК НомерПередела
	|ПОМЕСТИТЬ ВТ_НомераПеределовАналитика
	|ИЗ
	|	ВТ_НомераПеределов КАК НомераПеределов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Расходы КАК Расходы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаПрямыхРасходов КАК СчетаПрямыхРасходов
	|			ПО Расходы.Счет = СчетаПрямыхРасходов.Счет
	|		ПО НомераПеределов.Идентификатор = Расходы.Идентификатор
	|
	|СГРУППИРОВАТЬ ПО
	|	Расходы.Счет,
	|	Расходы.Подразделение,
	|	Расходы.НоменклатурнаяГруппа
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерПередела
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НомераПеределов.НомерПередела КАК НомерПередела,
	|	НомераПеределов.Счет КАК Счет,
	|	НомераПеределов.Подразделение КАК Подразделение,
	|	НомераПеределов.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
	|ИЗ
	|	ВТ_НомераПеределовАналитика КАК НомераПеределов
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерПередела,
	|	Счет,
	|	Подразделение,
	|	НоменклатурнаяГруппа
	|ИТОГИ ПО
	|	НомерПередела";
	
	ДвиженияРасчетПорядкаПеределов = Новый ТаблицаЗначений;
	ДвиженияРасчетПорядкаПеределов.Колонки.Добавить("НомерПередела");
	ДвиженияРасчетПорядкаПеределов.Колонки.Добавить("Счет");
	ДвиженияРасчетПорядкаПеределов.Колонки.Добавить("Подразделение");
	ДвиженияРасчетПорядкаПеределов.Колонки.Добавить("НоменклатурнаяГруппа");
	
	ВыборкаПеределов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	НомерПередела = 1; // Пользователю показываем натуральные числа
	Пока ВыборкаПеределов.Следующий() Цикл
		
		Выборка = ВыборкаПеределов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ДвиженияРасчетПорядкаПеределов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.НомерПередела = НомерПередела;
		КонецЦикла;
		
		НомерПередела = НомерПередела + 1;
		
	КонецЦикла;
	
	// Уберем за собой
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"УНИЧТОЖИТЬ ВТ_НомераПеределов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_НомераПеределовАналитика";
	Запрос.Выполнить();
	
	Возврат ДвиженияРасчетПорядкаПеределов;
	
	
КонецФункции

Процедура ПодготовитьСправкаРасчетСебестоимостиПродукции(Протокол, МенеджерВременныхТаблиц, Период, Организация)
	
	// Справка уже заполнена данными о внешних движения по фактической стоимости.
	// Дополним ее данными о внутренних движениях по фактической стоимости и данными о плановой стоимости.
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода",  КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Расчет.НоменклатураДт КАК Продукция,
	|	Расчет.СчетКт КАК СчетУчета,
	|	Расчет.ПодразделениеКт КАК Подразделение,
	|	Расчет.НоменклатурнаяГруппаКт КАК НоменклатурнаяГруппа,
	|	СУММА(Расчет.СуммаПлан) КАК СуммаПлан,
	|	СУММА(Расчет.Сумма) КАК Сумма,
	|	СУММА(Расчет.СуммаНУ) КАК СуммаНУ,
	|	СУММА(Расчет.СуммаПР) КАК СуммаПР,
	|	СУММА(Расчет.СуммаВР) КАК СуммаВР
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОкончательныеПроводки.НоменклатураДт КАК НоменклатураДт,
	|		ОкончательныеПроводки.СчетКт КАК СчетКт,
	|		ОкончательныеПроводки.ПодразделениеКт КАК ПодразделениеКт,
	|		ВЫБОР
	|			КОГДА СубконтоНоменклатурныеГруппы.НомерСубконто = 1
	|				ТОГДА ОкончательныеПроводки.СубконтоКт1
	|			КОГДА СубконтоНоменклатурныеГруппы.НомерСубконто = 2
	|				ТОГДА ОкончательныеПроводки.СубконтоКт2
	|			КОГДА СубконтоНоменклатурныеГруппы.НомерСубконто = 3
	|				ТОГДА ОкончательныеПроводки.СубконтоКт3
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|		КОНЕЦ КАК НоменклатурнаяГруппаКт,
	|		0 КАК СуммаПлан,
	|		ОкончательныеПроводки.Сумма КАК Сумма,
	|		ОкончательныеПроводки.СуммаНУ КАК СуммаНУ,
	|		ОкончательныеПроводки.СуммаПР КАК СуммаПР,
	|		ОкончательныеПроводки.СуммаВР КАК СуммаВР
	|	ИЗ
	|		ВнутренниеДвижения КАК ОкончательныеПроводки
	|			ЛЕВОЕ СОЕДИНЕНИЕ СубконтоНоменклатурныеГруппы КАК СубконтоНоменклатурныеГруппы
	|			ПО ОкончательныеПроводки.СчетКт = СубконтоНоменклатурныеГруппы.Счет
	|	ГДЕ
	|		ОкончательныеПроводки.Выпуск
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 1
	|				ТОГДА ВЫРАЗИТЬ(ПредварительныеПроводки.СубконтоСписания1 КАК Справочник.Номенклатура)
	|			КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 2
	|				ТОГДА ВЫРАЗИТЬ(ПредварительныеПроводки.СубконтоСписания2 КАК Справочник.Номенклатура)
	|			КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 3
	|				ТОГДА ВЫРАЗИТЬ(ПредварительныеПроводки.СубконтоСписания3 КАК Справочник.Номенклатура)
	|			ИНАЧЕ ПредварительныеПроводки.Продукция
	|		КОНЕЦ,
	|		ПредварительныеПроводки.СчетЗатрат,
	|		ПредварительныеПроводки.Подразделение,
	|		ПредварительныеПроводки.НоменклатурнаяГруппа,
	|		ПредварительныеПроводки.ПлановаяСтоимостьОборот,
	|		0,
	|		0,
	|		0,
	|		0
	|	ИЗ
	|		РегистрНакопления.ВыпускПродукцииУслуг.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				,
	|				Организация = &Организация
	|					И СчетЗатрат В
	|						(ВЫБРАТЬ
	|							СчетаРасходов.Счет
	|						ИЗ
	|							СчетаРасходов)) КАК ПредварительныеПроводки
	|			ЛЕВОЕ СОЕДИНЕНИЕ СчетаЗапасов КАК СчетаЗапасов
	|			ПО ПредварительныеПроводки.СчетЗатрат = СчетаЗапасов.Счет) КАК Расчет
	|
	|СГРУППИРОВАТЬ ПО
	|	Расчет.НоменклатураДт,
	|	Расчет.СчетКт,
	|	Расчет.ПодразделениеКт,
	|	Расчет.НоменклатурнаяГруппаКт";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
	
		НоваяСтрока = Протокол.СправкаРасчетСебестоимостиПродукции.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.ВидОперации = Перечисления.ВидыОперацийРасчетаСебестоимости.ВыпускПродукцииИУслуг;
		
	КонецЦикла;
	
	// Дополним справку данными о НЗП.
	// Отберем среди вершин сальдо после расчета те вершины, что относятся к прямым расходам,
	// и представим их в виде аналитики расходов (Счет, Подразделение, НоменклатурнаяГруппа)
	// Результат запишем в протокол
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сальдо.Счет КАК СчетУчета,
	|	Сальдо.Подразделение,
	|	ВЫБОР
	|		КОГДА СубконтоНоменклатурныеГруппы.НомерСубконто = 1
	|			ТОГДА Сальдо.Субконто1
	|		КОГДА СубконтоНоменклатурныеГруппы.НомерСубконто = 2
	|			ТОГДА Сальдо.Субконто2
	|		КОГДА СубконтоНоменклатурныеГруппы.НомерСубконто = 3
	|			ТОГДА Сальдо.Субконто3
	|	КОНЕЦ КАК НоменклатурнаяГруппа,
	|	СУММА(Сальдо.Сумма) КАК СуммаНЗП,
	|	СУММА(Сальдо.СуммаНУ) КАК СуммаНЗПНУ,
	|	СУММА(Сальдо.СуммаПР) КАК СуммаНЗППР,
	|	СУММА(Сальдо.СуммаВР) КАК СуммаНЗПВР
	|ИЗ
	|	СальдоПослеРасчета КАК Сальдо
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаПрямыхРасходов КАК СчетаПрямыхРасходов
	|		ПО Сальдо.Счет = СчетаПрямыхРасходов.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ СубконтоНоменклатурныеГруппы КАК СубконтоНоменклатурныеГруппы
	|		ПО Сальдо.Счет = СубконтоНоменклатурныеГруппы.Счет
	|
	|СГРУППИРОВАТЬ ПО
	|	Сальдо.Счет,
	|	Сальдо.Подразделение,
	|	ВЫБОР
	|		КОГДА СубконтоНоменклатурныеГруппы.НомерСубконто = 1
	|			ТОГДА Сальдо.Субконто1
	|		КОГДА СубконтоНоменклатурныеГруппы.НомерСубконто = 2
	|			ТОГДА Сальдо.Субконто2
	|		КОГДА СубконтоНоменклатурныеГруппы.НомерСубконто = 3
	|			ТОГДА Сальдо.Субконто3
	|	КОНЕЦ
	|
	|ИМЕЮЩИЕ
	|	(СУММА(Сальдо.Сумма) <> 0
	|		ИЛИ СУММА(Сальдо.СуммаНУ) <> 0
	|		ИЛИ СУММА(Сальдо.СуммаПР) <> 0
	|		ИЛИ СУММА(Сальдо.СуммаВР) <> 0)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Протокол.СправкаРасчетСебестоимостиПродукции.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.ВидОперации = Перечисления.ВидыОперацийРасчетаСебестоимости.РасходыНаПроизводствоПродукцииИУслуг;
	КонецЦикла;
	
КонецПроцедуры			

Функция ПодготовитьСправкаРасчетРаспределенияКосвенныхРасходов(Протокол, МенеджерВременныхТаблиц)
	
	// Получим данные о распределении косвенных расходов на расходы -
	// примерно так, как в ДобавитьПроводкиВнутренниеДвижения()
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Распределение.ПравилоРаспределения КАК ПравилоРаспределения,
	|	Распределение.СчетКт КАК СчетКт,
	|	Распределение.ПодразделениеКт КАК ПодразделениеКт,
	|	ВЫБОР
	|		КОГДА СубконтоСтатьиЗатратКт.НомерСубконто = 1
	|			ТОГДА Распределение.СубконтоКт1
	|		КОГДА СубконтоСтатьиЗатратКт.НомерСубконто = 2
	|			ТОГДА Распределение.СубконтоКт2
	|		КОГДА СубконтоСтатьиЗатратКт.НомерСубконто = 3
	|			ТОГДА Распределение.СубконтоКт3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)
	|	КОНЕЦ КАК СтатьяЗатратКт,
	|	РасходыДт.ВидДеятельности КАК ВидДеятельностиДт,
	|	Распределение.СчетДт КАК СчетДт,
	|	Распределение.ПодразделениеДт КАК ПодразделениеДт,
	|	ВЫБОР
	|		КОГДА СубконтоНоменклатурныеГруппыДт.НомерСубконто = 1
	|			ТОГДА Распределение.СубконтоДт1
	|		КОГДА СубконтоНоменклатурныеГруппыДт.НомерСубконто = 2
	|			ТОГДА Распределение.СубконтоДт2
	|		КОГДА СубконтоНоменклатурныеГруппыДт.НомерСубконто = 3
	|			ТОГДА Распределение.СубконтоДт3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|	КОНЕЦ КАК НоменклатурнаяГруппаДт,
	|	Распределение.Сумма КАК Сумма,
	|	Распределение.СуммаНУ КАК СуммаНУ,
	|	Распределение.СуммаПР КАК СуммаПР,
	|	Распределение.СуммаВР КАК СуммаВР,
	|	ВЫБОР
	|		КОГДА РасходыКт.НалоговыйУчет = ЗНАЧЕНИЕ(Перечисление.ОсобенностиНалоговогоУчетаРасходов.ОтличаетсяБазаРаспределения)
	|			ТОГДА 0
	|		ИНАЧЕ Распределение.Вес
	|	КОНЕЦ КАК СуммаБазы,
	|	ВЫБОР
	|		КОГДА РасходыКт.НалоговыйУчет = ЗНАЧЕНИЕ(Перечисление.ОсобенностиНалоговогоУчетаРасходов.ОтличаетсяБазаРаспределения)
	|			ТОГДА Распределение.Вес
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаБазыНУ,
	|	ВЫБОР
	|		КОГДА РасходыКт.НалоговыйУчет = ЗНАЧЕНИЕ(Перечисление.ОсобенностиНалоговогоУчетаРасходов.ОтличаетсяБазаРаспределения)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОтличаетсяБазаРаспределения
	|ПОМЕСТИТЬ ВТ_РезультатРаспределенияКосвенныхРасходов
	|ИЗ
	|	ВнутренниеДвижения КАК Распределение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаКосвенныхРасходов КАК СчетаКосвенныхРасходовКт
	|		ПО Распределение.СчетКт = СчетаКосвенныхРасходовКт.Счет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Расходы КАК РасходыДт
	|		ПО Распределение.Приемник = РасходыДт.Идентификатор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Расходы КАК РасходыКт
	|		ПО Распределение.Источник = РасходыКт.Идентификатор
	|		ЛЕВОЕ СОЕДИНЕНИЕ СубконтоНоменклатурныеГруппы КАК СубконтоНоменклатурныеГруппыДт
	|		ПО Распределение.СчетДт = СубконтоНоменклатурныеГруппыДт.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ СубконтоСтатьиЗатрат КАК СубконтоСтатьиЗатратКт
	|		ПО Распределение.СчетКт = СубконтоСтатьиЗатратКт.Счет
	|ГДЕ
	|	Распределение.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийРасчетСебестоимости.Распределение)
	|	И НЕ Распределение.Выпуск
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПравилоРаспределения";
	
	Запрос.Выполнить();
	
	// Подготовим информацию о правилах распределения, которые привели к такому результату
	РелевантныеПравилаРаспределения = Новый ТаблицаЗначений;
	РелевантныеПравилаРаспределения.Колонки.Добавить("Имя",          ПравилаРаспределенияРасходов.ТипИмени());
	РелевантныеПравилаРаспределения.Колонки.Добавить("ВидОперации",  Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийРасчетаКосвенныхРасходов"));
	РелевантныеПравилаРаспределения.Колонки.Добавить("МетодРасчета", Новый ОписаниеТипов("ПеречислениеСсылка.БазыРаспределенияКосвенныхРасходов"));
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Распределение.ПравилоРаспределения КАК Имя
	|ИЗ
	|	ВТ_РезультатРаспределенияКосвенныхРасходов КАК Распределение";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		// Найдем в протоколе это правило
		Правило = Протокол.ПравилаРаспределения.Найти(Выборка.Имя, "Имя");
		Если Правило = Неопределено Тогда
			// Где-то нарушилась целостность
			Продолжить;
		КонецЕсли;
		
		// Заполним сведения о правиле распределения
		НоваяСтрока = РелевантныеПравилаРаспределения.Добавить();
		НоваяСтрока.Имя          = Правило.Имя;
		НоваяСтрока.МетодРасчета = Правило.МетодРасчета;
		Если Правило.ПоляИсточника.Свойство("Подразделение") Тогда
			НоваяСтрока.ВидОперации = Перечисления.ВидыОперацийРасчетаКосвенныхРасходов.РаспределениеОбщепроизводственныхРасходов;
		Иначе
			НоваяСтрока.ВидОперации = Перечисления.ВидыОперацийРасчетаКосвенныхРасходов.РаспределениеОбщехозяйственныхРасходов;
		КонецЕсли;
		
	КонецЦикла;
	
	// Скомпонуем результат в вид, удобный для записи в регистр РасчетРаспределенияКосвенныхРасходов
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Правила", РелевантныеПравилаРаспределения);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Правила.Имя КАК Имя,
	|	Правила.ВидОперации КАК ВидОперации,
	|	Правила.МетодРасчета КАК МетодРасчета
	|ПОМЕСТИТЬ ВТ_ПравилаРаспределения
	|ИЗ
	|	&Правила КАК Правила
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Имя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПравилаРаспределения.ВидОперации КАК ВидОперации,
	|	ПравилаРаспределения.МетодРасчета КАК БазаРаспределения,
	|	Распределение.СчетКт КАК СчетУчета,
	|	Распределение.ПодразделениеКт КАК Подразделение,
	|	Распределение.СтатьяЗатратКт КАК СтатьяЗатрат,
	|	ВЫБОР
	|		КОГДА Распределение.ВидДеятельностиДт = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕНВД,
	|	Распределение.СчетДт КАК СчетРаспределения,
	|	Распределение.ПодразделениеДт КАК ПодразделениеРаспределения,
	|	Распределение.НоменклатурнаяГруппаДт КАК НоменклатурнаяГруппаРаспределения,
	|	СУММА(Распределение.Сумма) КАК Сумма,
	|	СУММА(Распределение.СуммаНУ) КАК СуммаНУ,
	|	СУММА(Распределение.СуммаПР) КАК СуммаПР,
	|	СУММА(Распределение.СуммаВР) КАК СуммаВР,
	|	СУММА(Распределение.СуммаБазы) КАК СуммаБазы,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(Распределение.ОтличаетсяБазаРаспределения) = ИСТИНА
	|			ТОГДА СУММА(Распределение.СуммаБазыНУ)
	|		ИНАЧЕ СУММА(Распределение.СуммаБазы)
	|	КОНЕЦ КАК СуммаБазыНУ,
	|	СУММА(Распределение.СуммаБазы) КАК СуммаБазыПР,
	|	СУММА(Распределение.СуммаБазы) КАК СуммаБазыВР
	|ИЗ
	|	ВТ_РезультатРаспределенияКосвенныхРасходов КАК Распределение
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПравилаРаспределения КАК ПравилаРаспределения
	|		ПО Распределение.ПравилоРаспределения = ПравилаРаспределения.Имя
	|
	|СГРУППИРОВАТЬ ПО
	|	ПравилаРаспределения.ВидОперации,
	|	ПравилаРаспределения.МетодРасчета,
	|	Распределение.СчетКт,
	|	Распределение.ПодразделениеКт,
	|	Распределение.СтатьяЗатратКт,
	|	ВЫБОР
	|		КОГДА Распределение.ВидДеятельностиДт = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	Распределение.СчетДт,
	|	Распределение.ПодразделениеДт,
	|	Распределение.НоменклатурнаяГруппаДт
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЕНВД,
	|	ВидОперации,
	|	БазаРаспределения,
	|	СчетУчета,
	|	Подразделение,
	|	СтатьяЗатрат,
	|	СчетРаспределения,
	|	ПодразделениеРаспределения,
	|	НоменклатурнаяГруппаРаспределения";
	
	СправкаРасчетРаспределенияКосвенныхРасходов = Запрос.Выполнить().Выгрузить();
		
	// Уберем за собой
	Запрос.Текст = 
	"УНИЧТОЖИТЬ ВТ_РезультатРаспределенияКосвенныхРасходов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ПравилаРаспределения";
	
	Запрос.Выполнить();
	
	Возврат СправкаРасчетРаспределенияКосвенныхРасходов;
	
КонецФункции

Процедура ПодготовитьСправкаРасчетСписанияКосвенныхРасходов(Протокол, МенеджерВременныхТаблиц, Период, Организация)
	
	// Дополним справку данными о сальдо косвенных расходов.
	// Сальдо может быть ненулевым, если были нормируемые расходы либо так настроено распределение.
	
	// Отберем среди вершин те, что относятся к косвенным расходам,
	// и представим их в виде аналитики расходов (Счет, Подразделение, СтатьяЗатрат)
	// Результат запишем в протокол
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сальдо.Счет КАК СчетУчета,
	|	Сальдо.Подразделение,
	|	ВЫБОР
	|		КОГДА СубконтоСтатьиЗатрат.НомерСубконто = 1
	|			ТОГДА Сальдо.Субконто1
	|		КОГДА СубконтоСтатьиЗатрат.НомерСубконто = 2
	|			ТОГДА Сальдо.Субконто2
	|		КОГДА СубконтоСтатьиЗатрат.НомерСубконто = 3
	|			ТОГДА Сальдо.Субконто3
	|	КОНЕЦ КАК СтатьяЗатрат,
	|	ВЫБОР
	|		КОГДА СубконтоСтатьиЗатрат.НомерСубконто = 1
	|			ТОГДА ВЫРАЗИТЬ(Сальдо.Субконто1 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		КОГДА СубконтоСтатьиЗатрат.НомерСубконто = 2
	|			ТОГДА ВЫРАЗИТЬ(Сальдо.Субконто2 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		КОГДА СубконтоСтатьиЗатрат.НомерСубконто = 3
	|			ТОГДА ВЫРАЗИТЬ(Сальдо.Субконто3 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПустаяСсылка)
	|	КОНЕЦ КАК ВидДеятельностиДляНалоговогоУчетаЗатрат,
	|	СУММА(Сальдо.Сумма) КАК СуммаЗатрат,
	|	СУММА(Сальдо.СуммаНУ) КАК СуммаЗатратНУ,
	|	СУММА(Сальдо.СуммаПР) КАК СуммаЗатратПР,
	|	СУММА(Сальдо.СуммаВР) КАК СуммаЗатратВР
	|ИЗ
	|	СальдоПослеРасчета КАК Сальдо
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаКосвенныхРасходов КАК СчетаКосвенныхРасходов
	|		ПО Сальдо.Счет = СчетаКосвенныхРасходов.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ СубконтоСтатьиЗатрат КАК СубконтоСтатьиЗатрат
	|		ПО Сальдо.Счет = СубконтоСтатьиЗатрат.Счет
	|
	|СГРУППИРОВАТЬ ПО
	|	Сальдо.Счет,
	|	Сальдо.Подразделение,
	|	ВЫБОР
	|		КОГДА СубконтоСтатьиЗатрат.НомерСубконто = 1
	|			ТОГДА Сальдо.Субконто1
	|		КОГДА СубконтоСтатьиЗатрат.НомерСубконто = 2
	|			ТОГДА Сальдо.Субконто2
	|		КОГДА СубконтоСтатьиЗатрат.НомерСубконто = 3
	|			ТОГДА Сальдо.Субконто3
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СубконтоСтатьиЗатрат.НомерСубконто = 1
	|			ТОГДА ВЫРАЗИТЬ(Сальдо.Субконто1 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		КОГДА СубконтоСтатьиЗатрат.НомерСубконто = 2
	|			ТОГДА ВЫРАЗИТЬ(Сальдо.Субконто2 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		КОГДА СубконтоСтатьиЗатрат.НомерСубконто = 3
	|			ТОГДА ВЫРАЗИТЬ(Сальдо.Субконто3 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПустаяСсылка)
	|	КОНЕЦ
	|
	|ИМЕЮЩИЕ
	|	(СУММА(Сальдо.Сумма) <> 0
	|		ИЛИ СУММА(Сальдо.СуммаНУ) <> 0
	|		ИЛИ СУММА(Сальдо.СуммаПР) <> 0
	|		ИЛИ СУММА(Сальдо.СуммаВР) <> 0)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Протокол.СправкаРасчетСписанияКосвенныхРасходов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
	// Если организация не применяет спец.режимы, или применяет только спец.режимы,
	// то все статьи затрат учитываются либо по основному виду деятельности, либо по спец.режимам,
	// не зависимо от значения, указанного в статье затрат.
	// Поэтому и в расчете списания косвенных расходов необходимо указывать в поле ВидДеятельностиДляНалоговогоУчетаЗатрат 
	// только доступные виды деятельности
	Если УчетнаяПолитика.ТолькоОсновнаяСистемаНалогообложения(Организация, Период) Тогда
		Протокол.СправкаРасчетСписанияКосвенныхРасходов.ЗаполнитьЗначения(
					Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения,
					"ВидДеятельностиДляНалоговогоУчетаЗатрат");
	ИначеЕсли УчетнаяПолитика.ТолькоОсобыйПорядокНалогообложения(Организация, Период) Тогда
		Протокол.СправкаРасчетСписанияКосвенныхРасходов.ЗаполнитьЗначения(
					Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения,
					"ВидДеятельностиДляНалоговогоУчетаЗатрат");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьРасходыНеУдалосьРаспределить(Результат, МенеджерВременныхТаблиц, Протокол)
	
	// Подготовим информацию о правилах распределения, которые привели к такому результату
	РелевантныеПравилаРаспределения = Новый ТаблицаЗначений;
	РелевантныеПравилаРаспределения.Колонки.Добавить("Имя",          ПравилаРаспределенияРасходов.ТипИмени());
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НеУдалосьРаспределить.Правило КАК Правило
	|ИЗ
	|	НеУдалосьРаспределить КАК НеУдалосьРаспределить";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		// Найдем в протоколе это правило
		Правило = Протокол.ПравилаРаспределения.Найти(Выборка.Правило, "Имя");
		Если Правило = Неопределено Тогда
			// Где-то нарушилась целостность
			Продолжить;
		КонецЕсли;
		
		// Речь только о тех расходах, которые распределяются 
		// "методами распределения косвенных расходов"
		Если Не ЗначениеЗаполнено(Правило.МетодРасчета) Тогда
			Продолжить;
		КонецЕсли;
		
		// Заполним сведения о правиле распределения
		ЗаполнитьЗначенияСвойств(РелевантныеПравилаРаспределения.Добавить(), Правило);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПравилаРаспределения", РелевантныеПравилаРаспределения);
	// ВТ_НеУдалосьРаспределитьАналитика используется, чтобы организовать упорядочивание.
	// Представления выбираются, чтобы попали в кэш представлений
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПравилаРаспределения.Имя
	|ПОМЕСТИТЬ ВТ_ПравилаРаспределения
	|ИЗ
	|	&ПравилаРаспределения КАК ПравилаРаспределения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПравилаРаспределения.Имя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПравилаРаспределения.Имя КАК ПравилоРаспределения,
	|	ВЫРАЗИТЬ(ИдентификаторыВершин.Счет КАК ПланСчетов.Хозрасчетный) КАК Счет,
	|	ВЫРАЗИТЬ(ИдентификаторыВершин.Подразделение КАК Справочник.ПодразделенияОрганизаций) КАК Подразделение,
	|	ВЫБОР
	|		КОГДА СубконтоНоменклатурныеГруппы.НомерСубконто = 1
	|			ТОГДА ВЫРАЗИТЬ(ИдентификаторыВершин.Субконто1 КАК Справочник.НоменклатурныеГруппы)
	|		КОГДА СубконтоНоменклатурныеГруппы.НомерСубконто = 2
	|			ТОГДА ВЫРАЗИТЬ(ИдентификаторыВершин.Субконто2 КАК Справочник.НоменклатурныеГруппы)
	|		КОГДА СубконтоНоменклатурныеГруппы.НомерСубконто = 3
	|			ТОГДА ВЫРАЗИТЬ(ИдентификаторыВершин.Субконто3 КАК Справочник.НоменклатурныеГруппы)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|	КОНЕЦ КАК НоменклатурнаяГруппа,
	|	ВЫБОР
	|		КОГДА СубконтоСтатьиЗатрат.НомерСубконто = 1
	|			ТОГДА ВЫРАЗИТЬ(ИдентификаторыВершин.Субконто1 КАК Справочник.СтатьиЗатрат)
	|		КОГДА СубконтоСтатьиЗатрат.НомерСубконто = 2
	|			ТОГДА ВЫРАЗИТЬ(ИдентификаторыВершин.Субконто2 КАК Справочник.СтатьиЗатрат)
	|		КОГДА СубконтоСтатьиЗатрат.НомерСубконто = 3
	|			ТОГДА ВЫРАЗИТЬ(ИдентификаторыВершин.Субконто3 КАК Справочник.СтатьиЗатрат)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)
	|	КОНЕЦ КАК СтатьяЗатрат,
	|	ВЫРАЗИТЬ(ИдентификаторыВершин.КорСчет КАК ПланСчетов.Хозрасчетный) КАК КорСчет,
	|	СУММА(ОценкаВершин.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВТ_НеУдалосьРаспределитьАналитика
	|ИЗ
	|	НеУдалосьРаспределить КАК НеУдалосьРаспределить
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОценкаВершин КАК ОценкаВершин
	|		ПО НеУдалосьРаспределить.Идентификатор = ОценкаВершин.Идентификатор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИдентификаторыВершин КАК ИдентификаторыВершин
	|		ПО НеУдалосьРаспределить.Идентификатор = ИдентификаторыВершин.Идентификатор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПравилаРаспределения КАК ПравилаРаспределения
	|		ПО НеУдалосьРаспределить.Правило = ПравилаРаспределения.Имя
	|		ЛЕВОЕ СОЕДИНЕНИЕ СубконтоНоменклатурныеГруппы КАК СубконтоНоменклатурныеГруппы
	|		ПО (ИдентификаторыВершин.Счет = СубконтоНоменклатурныеГруппы.Счет)
	|		ЛЕВОЕ СОЕДИНЕНИЕ СубконтоСтатьиЗатрат КАК СубконтоСтатьиЗатрат
	|		ПО (ИдентификаторыВершин.Счет = СубконтоСтатьиЗатрат.Счет)
	|ГДЕ
	|	ОценкаВершин.Сумма > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ПравилаРаспределения.Имя,
	|	ИдентификаторыВершин.Счет,
	|	ИдентификаторыВершин.Подразделение,
	|	ВЫБОР
	|		КОГДА СубконтоНоменклатурныеГруппы.НомерСубконто = 1
	|			ТОГДА ВЫРАЗИТЬ(ИдентификаторыВершин.Субконто1 КАК Справочник.НоменклатурныеГруппы)
	|		КОГДА СубконтоНоменклатурныеГруппы.НомерСубконто = 2
	|			ТОГДА ВЫРАЗИТЬ(ИдентификаторыВершин.Субконто2 КАК Справочник.НоменклатурныеГруппы)
	|		КОГДА СубконтоНоменклатурныеГруппы.НомерСубконто = 3
	|			ТОГДА ВЫРАЗИТЬ(ИдентификаторыВершин.Субконто3 КАК Справочник.НоменклатурныеГруппы)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СубконтоСтатьиЗатрат.НомерСубконто = 1
	|			ТОГДА ВЫРАЗИТЬ(ИдентификаторыВершин.Субконто1 КАК Справочник.СтатьиЗатрат)
	|		КОГДА СубконтоСтатьиЗатрат.НомерСубконто = 2
	|			ТОГДА ВЫРАЗИТЬ(ИдентификаторыВершин.Субконто2 КАК Справочник.СтатьиЗатрат)
	|		КОГДА СубконтоСтатьиЗатрат.НомерСубконто = 3
	|			ТОГДА ВЫРАЗИТЬ(ИдентификаторыВершин.Субконто3 КАК Справочник.СтатьиЗатрат)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)
	|	КОНЕЦ,
	|	ИдентификаторыВершин.КорСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НеУдалосьРаспределить.ПравилоРаспределения КАК ПравилоРаспределения,
	|	НеУдалосьРаспределить.Счет КАК Счет,
	|	НеУдалосьРаспределить.Подразделение,
	|	НеУдалосьРаспределить.НоменклатурнаяГруппа,
	|	НеУдалосьРаспределить.СтатьяЗатрат,
	|	НеУдалосьРаспределить.КорСчет,
	|	НеУдалосьРаспределить.Счет.Представление,
	|	НеУдалосьРаспределить.Подразделение.Представление,
	|	НеУдалосьРаспределить.НоменклатурнаяГруппа.Представление,
	|	НеУдалосьРаспределить.СтатьяЗатрат.Представление,
	|	НеУдалосьРаспределить.КорСчет.Представление,
	|	НеУдалосьРаспределить.Сумма
	|ИЗ
	|	ВТ_НеУдалосьРаспределитьАналитика КАК НеУдалосьРаспределить
	|
	|УПОРЯДОЧИТЬ ПО
	|	НеУдалосьРаспределить.Счет.Порядок,
	|	НеУдалосьРаспределить.ПравилоРаспределения,
	|	НеУдалосьРаспределить.Подразделение.РеквизитДопУпорядочивания,
	|	НеУдалосьРаспределить.НоменклатурнаяГруппа.Наименование,
	|	НеУдалосьРаспределить.СтатьяЗатрат.Наименование,
	|	НеУдалосьРаспределить.КорСчет
	|ИТОГИ ПО
	|	Счет,
	|	ПравилоРаспределения";
	
	РасходыНеУдалосьРаспределить = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// Дополним список ошибок сведениями об использованной базе распределения
	РасходыНеУдалосьРаспределить.Колонки.Добавить("Настройка",             Новый ОписаниеТипов("РегистрСведенийКлючЗаписи.МетодыРаспределенияКосвенныхРасходовОрганизаций"));
	РасходыНеУдалосьРаспределить.Колонки.Добавить("МетодРасчета",          Новый ОписаниеТипов("ПеречислениеСсылка.БазыРаспределенияКосвенныхРасходов"));
	РасходыНеУдалосьРаспределить.Колонки.Добавить("ВРазрезеПодразделений", Новый ОписаниеТипов("Булево"));
	
	Для Каждого ГруппаОшибокСчет Из РасходыНеУдалосьРаспределить.Строки Цикл
		Для Каждого ГруппаОшибокПравилоРаспределения Из ГруппаОшибокСчет.Строки Цикл
		
			// Найдем в протоколе это правило
			Правило = Протокол.ПравилаРаспределения.Найти(ГруппаОшибокПравилоРаспределения.ПравилоРаспределения, "Имя");
			Если Правило = Неопределено Тогда
				// Где-то нарушилась целостность
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ГруппаОшибокПравилоРаспределения, Правило, "Настройка, МетодРасчета");
			Если Правило.ПоляИсточника.Свойство("Подразделение")
				И ПолучитьФункциональнуюОпцию("ВестиУчетЗатратПоПодразделениям")
				Тогда
				ГруппаОшибокПравилоРаспределения.ВРазрезеПодразделений = Истина;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Если РасходыНеУдалосьРаспределить.Строки.Количество() > 0 Тогда
		Если Не Результат.Свойство("Ошибки") Тогда
			Результат.Вставить("Ошибки", Новый Структура);
		КонецЕсли;
		Результат.Ошибки.Вставить("РасходыНеУдалосьРаспределить",  РасходыНеУдалосьРаспределить);
	КонецЕсли;
	
	// Уберем за собой
	Запрос.Текст = 
	"УНИЧТОЖИТЬ ВТ_ПравилаРаспределения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_НеУдалосьРаспределитьАналитика";
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ПодготовитьВыпускБезЗатрат(Результат, МенеджерВременныхТаблиц, Протокол)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВнутренниеДвижения.Источник КАК Идентификатор,
	|	ВнутренниеДвижения.СчетКт КАК Счет,
	|	ВнутренниеДвижения.ПодразделениеКт КАК Подразделение,
	|	ВнутренниеДвижения.СубконтоКт1 КАК Субконто1,
	|	ВнутренниеДвижения.СубконтоКт2 КАК Субконто2,
	|	ВнутренниеДвижения.СубконтоКт3 КАК Субконто3,
	|	ВнутренниеДвижения.НоменклатураДт КАК Продукция
	|ПОМЕСТИТЬ ВТ_ВыпускБезЗатрат
	|ИЗ
	|	ВнутренниеДвижения КАК ВнутренниеДвижения
	|ГДЕ
	|	ВнутренниеДвижения.Выпуск
	|	И ВнутренниеДвижения.Сумма = 0
	|	И ВнутренниеДвижения.НоменклатураДт <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВнешниеДвижения.Источник,
	|	ВнешниеДвижения.СчетКт,
	|	ВнешниеДвижения.ПодразделениеКт,
	|	ВнешниеДвижения.СубконтоКт1,
	|	ВнешниеДвижения.СубконтоКт2,
	|	ВнешниеДвижения.СубконтоКт3,
	|	ВнешниеДвижения.НоменклатураДт
	|ИЗ
	|	ВнешниеДвижения КАК ВнешниеДвижения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОценкаВершин КАК ОценкаВершин
	|		ПО ВнешниеДвижения.Источник = ОценкаВершин.Идентификатор
	|ГДЕ
	|	ВнешниеДвижения.Выпуск
	|	И ВнешниеДвижения.НоменклатураДт <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И ЕСТЬNULL(ОценкаВершин.Сумма, 0) = 0
	|	И ВнешниеДвижения.Количество <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВыпускБезЗатрат.Идентификатор
	|ИЗ
	|	ВТ_ВыпускБезЗатрат КАК ВыпускБезЗатрат";
	
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыпускБезЗатрат.Идентификатор КАК Идентификатор,
	|	ВыпускБезЗатрат.Счет КАК Счет,
	|	ВыпускБезЗатрат.Подразделение КАК Подразделение,
	|	ВЫБОР
	|		КОГДА СубконтоНоменклатурныеГруппы.НомерСубконто = 1
	|			ТОГДА ВыпускБезЗатрат.Субконто1
	|		КОГДА СубконтоНоменклатурныеГруппы.НомерСубконто = 2
	|			ТОГДА ВыпускБезЗатрат.Субконто2
	|		КОГДА СубконтоНоменклатурныеГруппы.НомерСубконто = 3
	|			ТОГДА ВыпускБезЗатрат.Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|	КОНЕЦ КАК НоменклатурнаяГруппа,
	|	ВыпускБезЗатрат.Продукция КАК Продукция
	|ПОМЕСТИТЬ ВТ_ВыпускБезЗатратАналитика
	|ИЗ
	|	ВТ_ВыпускБезЗатрат КАК ВыпускБезЗатрат
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СубконтоНоменклатурныеГруппы КАК СубконтоНоменклатурныеГруппы
	|		ПО ВыпускБезЗатрат.Счет = СубконтоНоменклатурныеГруппы.Счет
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор";
	Запрос.Выполнить();
	
	// В частном случае затраты не могут быть распределены на выпуск из-за того, что неверно выполнена оценка НЗП.
	// Оценка НЗП не верна, если ее сумма, указанная в документе Инвентаризация НЗП,
	// выше, чем сумма затрат.
	
	// Получим данные инвентаризации.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Ключи.Идентификатор КАК Идентификатор,
	|	НезавершенноеПроизводство.Сумма КАК Сумма,
	|	НезавершенноеПроизводство.Счет КАК Счет,
	|	НезавершенноеПроизводство.Подразделение КАК Подразделение,
	|	ВЫБОР
	|		КОГДА СубконтоНоменклатурныеГруппы.НомерСубконто = 1
	|			ТОГДА НезавершенноеПроизводство.Субконто1
	|		КОГДА СубконтоНоменклатурныеГруппы.НомерСубконто = 2
	|			ТОГДА НезавершенноеПроизводство.Субконто2
	|		КОГДА СубконтоНоменклатурныеГруппы.НомерСубконто = 3
	|			ТОГДА НезавершенноеПроизводство.Субконто3
	|	КОНЕЦ КАК НоменклатурнаяГруппа
	|ПОМЕСТИТЬ ВТ_НезавершенноеПроизводство
	|ИЗ
	|	НезавершенноеПроизводство КАК НезавершенноеПроизводство
	|		ЛЕВОЕ СОЕДИНЕНИЕ СубконтоНоменклатурныеГруппы КАК СубконтоНоменклатурныеГруппы
	|		ПО НезавершенноеПроизводство.Счет = СубконтоНоменклатурныеГруппы.Счет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КлючиВершин КАК Ключи
	|		ПО НезавершенноеПроизводство.Счет = Ключи.Счет
	|			И НезавершенноеПроизводство.Подразделение = Ключи.Подразделение
	|			И НезавершенноеПроизводство.Субконто1 = Ключи.Субконто1
	|			И НезавершенноеПроизводство.Субконто2 = Ключи.Субконто2
	|			И НезавершенноеПроизводство.Субконто3 = Ключи.Субконто3
	|			И НезавершенноеПроизводство.Номенклатура = Ключи.Номенклатура
	|			И НезавершенноеПроизводство.КорСчет = Ключи.КорСчет
	|ГДЕ
	|	НезавершенноеПроизводство.Сумма > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НезавершенноеПроизводство.Идентификатор,
	|	НезавершенноеПроизводство.Сумма
	|ИЗ
	|	ВТ_НезавершенноеПроизводство КАК НезавершенноеПроизводство
	|ГДЕ
	|	НезавершенноеПроизводство.Идентификатор В
	|			(ВЫБРАТЬ
	|				ВыпускБезЗатрат.Идентификатор
	|			ИЗ
	|				ВТ_ВыпускБезЗатратАналитика КАК ВыпускБезЗатрат)";
	
	// Сравним данные инвентаризации с сальдо затрат после расчета.
	// Получим СуммыЗаблокированныхЗатрат - то есть данные о затратах, которые были заблокированы инвентаризацией 
	// и это привело к тому, что себестоимость продукции нельзя рассчитать.
	// Используем СальдоПослеРасчета, а не ОценкаВершин, потому что ОценкаВершин уже уменьшена на суммы, указанные в документах инвентаризации
	
	ЗаблокированныеЗатраты = Новый ТаблицаЗначений;
	ЗаблокированныеЗатраты.Колонки.Добавить("Идентификатор", УчетЗатрат.ТипИдентификатораВершины());
	ЗаблокированныеЗатраты.Колонки.Добавить("Сумма",         УчетЗатрат.ТипСумма());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаПротокола = Протокол.СальдоПослеРасчета.Найти(Выборка.Идентификатор, "Идентификатор");
		Если СтрокаПротокола = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СуммаЗатрат = СтрокаПротокола.Сумма;
		ОценкаНЗП   = Выборка.Сумма;
		
		Если СуммаЗатрат > ОценкаНЗП Тогда
			// "Часть затрат оставили в НЗП"
			Продолжить;
		КонецЕсли;
		
		Вершина = ЗаблокированныеЗатраты.Добавить();
		Вершина.Идентификатор = Выборка.Идентификатор;
		Вершина.Сумма         = СтрокаПротокола.Сумма;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ЗаблокированныеЗатраты", ЗаблокированныеЗатраты);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаблокированныеЗатраты.Идентификатор КАК Идентификатор,
	|	ЗаблокированныеЗатраты.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВТ_ЗаблокированныеЗатраты
	|ИЗ
	|	&ЗаблокированныеЗатраты КАК ЗаблокированныеЗатраты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|";
	Запрос.Выполнить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НезавершенноеПроизводство.Идентификатор,
	|	ВЫРАЗИТЬ(НезавершенноеПроизводство.Счет КАК ПланСчетов.Хозрасчетный) КАК Счет,
	|	ВЫРАЗИТЬ(НезавершенноеПроизводство.Подразделение КАК Справочник.ПодразделенияОрганизаций) КАК Подразделение,
	|	ВЫРАЗИТЬ(НезавершенноеПроизводство.НоменклатурнаяГруппа КАК Справочник.НоменклатурныеГруппы) КАК НоменклатурнаяГруппа,
	|	Затраты.Сумма КАК Затраты,
	|	НезавершенноеПроизводство.Сумма КАК НезавершенноеПроизводство
	|ПОМЕСТИТЬ ВТ_Ошибки
	|ИЗ
	|	ВТ_НезавершенноеПроизводство КАК НезавершенноеПроизводство
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЗаблокированныеЗатраты КАК Затраты
	|		ПО НезавершенноеПроизводство.Идентификатор = Затраты.Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ошибки.Идентификатор КАК Идентификатор,
	|	Ошибки.Счет КАК Счет,
	|	Ошибки.Подразделение КАК Подразделение,
	|	Ошибки.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	Ошибки.Затраты КАК Затраты,
	|	Ошибки.НезавершенноеПроизводство КАК НезавершенноеПроизводство,
	|	ПРЕДСТАВЛЕНИЕ(Ошибки.Счет),
	|	ПРЕДСТАВЛЕНИЕ(Ошибки.Подразделение),
	|	ПРЕДСТАВЛЕНИЕ(Ошибки.НоменклатурнаяГруппа)
	|ИЗ
	|	ВТ_Ошибки КАК Ошибки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ошибки.Счет.Порядок,
	|	Ошибки.Подразделение.РеквизитДопУпорядочивания,
	|	Ошибки.НоменклатурнаяГруппа.Наименование,
	|	Идентификатор";
	
	НевернаяОценкаНезавершенногоПроизводства = Новый ТаблицаЗначений;
 	НевернаяОценкаНезавершенногоПроизводства.Колонки.Добавить("Идентификатор",             УчетЗатрат.ТипИдентификатораВершины());
 	НевернаяОценкаНезавершенногоПроизводства.Колонки.Добавить("Счет",                      Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	НевернаяОценкаНезавершенногоПроизводства.Колонки.Добавить("Подразделение",             БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	НевернаяОценкаНезавершенногоПроизводства.Колонки.Добавить("НоменклатурнаяГруппа",      Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	НевернаяОценкаНезавершенногоПроизводства.Колонки.Добавить("Затраты",                   УчетЗатрат.ТипСумма());
	НевернаяОценкаНезавершенногоПроизводства.Колонки.Добавить("НезавершенноеПроизводство", УчетЗатрат.ТипСумма());
	НевернаяОценкаНезавершенногоПроизводства.Колонки.Добавить("Продукция",                 Новый ОписаниеТипов("Массив")); // Массив номенклатуры
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(НевернаяОценкаНезавершенногоПроизводства.Добавить(), Выборка);
	КонецЦикла;
	
	НевернаяОценкаНезавершенногоПроизводства.Индексы.Добавить("Идентификатор");
	
	// Дополним информацией о продукции
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Выпуск.Идентификатор КАК Идентификатор,
	|	Выпуск.Продукция
	|ИЗ
	|	ВТ_ВыпускБезЗатратАналитика КАК Выпуск
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Ошибки КАК Ошибки
	|		ПО Выпуск.Идентификатор = Ошибки.Идентификатор
	|ИТОГИ ПО
	|	Идентификатор";
	
	ВыборкаИдентификаторов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИдентификаторов.Следующий() Цикл
		
		ОписаниеОшибки = НевернаяОценкаНезавершенногоПроизводства.Найти(ВыборкаИдентификаторов.Идентификатор, "Идентификатор");
		Если ОписаниеОшибки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Выборка = ВыборкаИдентификаторов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Выборка.Следующий() Цикл
			ОписаниеОшибки.Продукция.Добавить(Выборка.Продукция);
		КонецЦикла;
		
	КонецЦикла;
	
	Если НевернаяОценкаНезавершенногоПроизводства.Количество() > 0 Тогда
		Если Не Результат.Свойство("Ошибки") Тогда
			Результат.Вставить("Ошибки", Новый Структура);
		КонецЕсли;
		Результат.Ошибки.Вставить("НевернаяОценкаНезавершенногоПроизводства",  НевернаяОценкаНезавершенногоПроизводства);
	КонецЕсли;
	
	// Уберем за собой
	Запрос.Текст = 
	"УНИЧТОЖИТЬ ВТ_Ошибки";
	Запрос.Выполнить();
	
	// Другие случаи выпуска без затрат
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыпускБезЗатрат.Идентификатор,
	|	ВЫРАЗИТЬ(ВыпускБезЗатрат.Счет КАК ПланСчетов.Хозрасчетный) КАК Счет,
	|	ВЫРАЗИТЬ(ВыпускБезЗатрат.Подразделение КАК Справочник.ПодразделенияОрганизаций) КАК Подразделение,
	|	ВЫРАЗИТЬ(ВыпускБезЗатрат.НоменклатурнаяГруппа КАК Справочник.НоменклатурныеГруппы) КАК НоменклатурнаяГруппа,
	|	ВЫРАЗИТЬ(ВыпускБезЗатрат.Продукция КАК Справочник.Номенклатура) КАК Продукция
	|ПОМЕСТИТЬ ВТ_Ошибки
	|ИЗ
	|	ВТ_ВыпускБезЗатратАналитика КАК ВыпускБезЗатрат
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗаблокированныеЗатраты КАК Затраты
	|		ПО ВыпускБезЗатрат.Идентификатор = Затраты.Идентификатор
	|ГДЕ
	|	Затраты.Идентификатор ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ошибки.Идентификатор КАК Идентификатор,
	|	Ошибки.Счет КАК Счет,
	|	Ошибки.Подразделение КАК Подразделение,
	|	Ошибки.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	Ошибки.Продукция КАК Продукция,
	|	Ошибки.Продукция.Услуга КАК ЭтоУслуга,
	|	ПРЕДСТАВЛЕНИЕ(Ошибки.Счет),
	|	ПРЕДСТАВЛЕНИЕ(Ошибки.Подразделение),
	|	ПРЕДСТАВЛЕНИЕ(Ошибки.НоменклатурнаяГруппа),
	|	ПРЕДСТАВЛЕНИЕ(Ошибки.Продукция)
	|ИЗ
	|	ВТ_Ошибки КАК Ошибки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ошибки.Счет.Порядок,
	|	Ошибки.Подразделение.РеквизитДопУпорядочивания,
	|	Ошибки.НоменклатурнаяГруппа.Наименование,
	|	Идентификатор,
	|	Ошибки.Продукция.Наименование
	|ИТОГИ ПО
	|	ЭтоУслуга";
	
	ВыпускБезЗатрат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ВыпускБезЗатрат.Строки.Количество() > 0 Тогда
		Если Не Результат.Свойство("Ошибки") Тогда
			Результат.Вставить("Ошибки", Новый Структура);
		КонецЕсли;
		Результат.Ошибки.Вставить("ВыпускБезЗатрат",  ВыпускБезЗатрат);
	КонецЕсли;
	
	// Уберем за собой
	Запрос.Текст = 
	"УНИЧТОЖИТЬ ВТ_ВыпускБезЗатрат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ВыпускБезЗатратАналитика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_НезавершенноеПроизводство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Ошибки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ЗаблокированныеЗатраты";
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СохранитьКлючиВершин(Протокол, МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КлючиВершин.Идентификатор КАК Идентификатор,
	|	КлючиВершин.Счет КАК Счет,
	|	КлючиВершин.Подразделение КАК Подразделение,
	|	КлючиВершин.Субконто1 КАК Субконто1,
	|	КлючиВершин.Субконто2 КАК Субконто2,
	|	КлючиВершин.Субконто3 КАК Субконто3,
	|	КлючиВершин.Номенклатура КАК Номенклатура,
	|	КлючиВершин.КорСчет КАК КорСчет
	|ИЗ
	|	КлючиВершин КАК КлючиВершин";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Протокол.КлючиВершин.Добавить(), Выборка);
	КонецЦикла;
	
КонецПроцедуры

Процедура СохранитьОценкуЗапасов(Протокол, Затраты, ОписаниеСумм)
	
	ОтборЗапасы = Новый Структура("РазделУчета", "Запасы");
	Для Каждого ОписаниеВершины Из Затраты.Вершины.НайтиСтроки(ОтборЗапасы) Цикл
		
		Если КоллекцииСумм.Пустая(ОписаниеВершины, ОписаниеСумм) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Протокол.ОценкаЗапасов.Добавить();
		НоваяСтрока.Идентификатор = ОписаниеВершины.Идентификатор;
		КоллекцииСумм.Заполнить(НоваяСтрока, ОписаниеВершины, ОписаниеСумм);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СохранитьСебестоимостьВыпущеннойПродукции(Протокол, Затраты, ОписаниеСумм)
	
	Для Каждого Ребро Из Затраты.Ребра Цикл
		
		ОписаниеИсточника = ОписаниеВершины(Затраты, Ребро.Источник);
		Если ОписаниеИсточника.РазделУчета <> "Расходы" Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеПриемника = ОписаниеВершины(Затраты, Ребро.Приемник);
		Если ОписаниеПриемника.РазделУчета <> "Запасы" Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Протокол.СебестоимостьВыпущеннойПродукции.Добавить();
		НоваяСтрока.Идентификатор = Ребро.Приемник;
		КоллекцииСумм.Заполнить(НоваяСтрока, Ребро, ОписаниеСумм);
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВИЗУАЛИЗАЦИЯ ГРАФА

// Возвращает описание графа на языке Dot.
// Такое описание графа, в частности, позволяет визуализировать граф затрат.
Функция ОписаниеГрафа(Затраты, МенеджерВременныхТаблиц) Экспорт
	
	ФорматИдентификатора = "ЧН=0; ЧГ=0";
	
	Результат = Новый ТекстовыйДокумент;
	
	Результат.ДобавитьСтроку("digraph abstract {");
	
	Для Каждого ОписаниеВершины Из Затраты.Вершины Цикл
		
		Если ОписаниеВершины.РазделУчета = "Запасы" Тогда
			Результат.ДобавитьСтроку("" 
				+ Формат(ОписаниеВершины.Идентификатор, ФорматИдентификатора) 
				+ "[shape=""box""];");
		КонецЕсли;
			
	КонецЦикла;
	
	Для Каждого Ребро Из Затраты.Ребра Цикл
			
		Если Ребро.ВидДвижения = Перечисления.ВидыДвиженийРасчетСебестоимости.ВременныеРазницы Тогда
			ВидСтрелки = "odot";
		ИначеЕсли Ребро.ВидДвижения = Перечисления.ВидыДвиженийРасчетСебестоимости.ПостоянныеРазницы Тогда
			ВидСтрелки = "dot";
		Иначе
			ВидСтрелки = "normal";
		КонецЕсли;
		
		Результат.ДобавитьСтроку(""     
			+ Формат(Ребро.Источник, ФорматИдентификатора)
			+ " -> " + Формат(Ребро.Приемник, ФорматИдентификатора)  
			+ " [label=""" + Формат(Ребро.Вес, "ЧРГ=' '") + """]"
			+ ?(НЕ Ребро.СлабоеЗвено И НЕ Ребро.Зафиксировано, "", " [style=dotted]")
			+ " [arrowhead=""" + ВидСтрелки + """]"
			+ ";");
		
	КонецЦикла;
		
	// Кластеры
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Расходы.Идентификатор,
	|	Расходы.Счет КАК Счет,
	|	Расходы.Подразделение КАК Подразделение,
	|	Расходы.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ПРЕДСТАВЛЕНИЕ(Расходы.Счет),
	|	ПРЕДСТАВЛЕНИЕ(Расходы.Подразделение),
	|	ПРЕДСТАВЛЕНИЕ(Расходы.НоменклатурнаяГруппа)
	|ИЗ
	|	Расходы КАК Расходы
	|ИТОГИ ПО
	|	Счет,
	|	Подразделение,
	|	НоменклатурнаяГруппа";
	
	Итоги = Новый Массив;
	Итоги.Добавить("Счет");
	Итоги.Добавить("Подразделение");
	Итоги.Добавить("НоменклатурнаяГруппа");
	ВывестиКластер(Результат, Запрос.Выполнить(), Итоги, ФорматИдентификатора);
	
	Результат.ДобавитьСтроку("}"); // digraph abstract
	
	Возврат Результат.ПолучитьТекст();
	
КонецФункции

Процедура ВывестиКластер(Результат, РезультатЗапроса, Итоги, ФорматИдентификатора, НомерКластера = 0)
	
	Если Итоги.Количество() = 0 Тогда
		
		Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Выборка.Следующий() Цикл
			Результат.ДобавитьСтроку(Формат(Выборка.Идентификатор, ФорматИдентификатора) + ";");
		КонецЦикла;
	
	Иначе
		
		Группировка = Итоги[0];
		НовыеИтоги = Новый Массив; // Удалим первый элемент
		Для Индекс = 1 По Итоги.ВГраница() Цикл
			НовыеИтоги.Добавить(Итоги[Индекс]);
		КонецЦикла;
		
		Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ВыделитьКластер = (Выборка.Количество() > 1);
		Пока Выборка.Следующий() Цикл
			
			Если ВыделитьКластер Тогда
				
				НомерКластера       = НомерКластера + 1;
				СтрокаНомерКластера = Формат(НомерКластера, "ЧГ=0");
				Заголовок           = Выборка[Группировка];
				Результат.ДобавитьСтроку("subgraph cluster" + СтрокаНомерКластера);
				Результат.ДобавитьСтроку("{style=""dotted""; label=""" + Заголовок + """;");
				
			КонецЕсли;
				
			ВывестиКластер(Результат, Выборка, НовыеИтоги, ФорматИдентификатора, НомерКластера);
			
			Если ВыделитьКластер Тогда
				
				Результат.ДобавитьСтроку("} // cluster" + СтрокаНомерКластера + ", " + Заголовок);
				
			КонецЕсли;
				
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры
