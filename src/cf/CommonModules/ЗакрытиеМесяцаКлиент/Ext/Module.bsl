

// Открывает форму ошибок регламентной операции.
//
// Параметры:
//  Ссылка	 - Ссылка на регламентную операцию с ошибками.
//
Процедура ОткрытьФормуОшибок(Ссылка) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", Ссылка);
	ОткрытьФорму("Документ.РегламентнаяОперация.Форма.ФормаОшибок", ПараметрыФормы, ЭтотОбъект, Ссылка);
	
КонецПроцедуры

Процедура ОтменитьЗаданияАктуализации(Форма, Организация) Экспорт
	
	Если ЗначениеЗаполнено(Форма.ИдентификаторЗаданияАктуализации) Тогда
		ЗакрытиеМесяцаВызовСервера.ОтменитьВыполнениеЗадания(Форма.ИдентификаторЗаданияАктуализации);
		ПараметрыОповещения = Новый Структура("Организация", Организация);
		Оповестить("АктуализацияОтменена", ПараметрыОповещения);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// АКТУАЛИЗАЦИЯ ДАННЫХ

// Показывает описание ошибок, возникших в ходе актуализации.
//
// Параметры:
//  РезультатАктуализации	 - Структура
//
Процедура ПоказатьОшибкиАктуализации(Форма, РезультатАктуализации) Экспорт
	
	Если РезультатАктуализации.Выполнено Тогда
		Возврат;
	КонецЕсли;
	
	// Ошибки восстановления последовательности.
	Если РезультатАктуализации.Свойство("АдресХранилищаСОшибками") Тогда 
		
		ОбщегоНазначенияБПКлиент.ОткрытьФормуОшибокПерепроведения(Форма, РезультатАктуализации.АдресХранилищаСОшибками);
		
	// Ошибки закрытия месяца.
	ИначеЕсли РезультатАктуализации.Свойство("РегламентнаяОперацияСОшибками") Тогда 
	
		ОткрытьФормуОшибок(РезультатАктуализации.РегламентнаяОперацияСОшибками);
		
	Иначе
		
		Если РезультатАктуализации.Свойство("СообщенияПользователю") Тогда
			Для каждого ТекстСообщения Из РезультатАктуализации.СообщенияПользователю Цикл
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЦикла;
		КонецЕсли;
		Если РезультатАктуализации.Свойство("ВидОперации") Тогда
			ТекстСообщения = НСтр("ru = 'Ошибка при выполнении операции ""%1"" за %2 г.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
				РезультатАктуализации.ВидОперации,
				Формат(РезультатАктуализации.ПериодРегистрации, "ДФ='MMMM yyyy'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;		
	
	ПоказатьПредупреждение(, НСтр("ru='Актуализация не выполнена. Обнаружены ошибки.'"));
	
КонецПроцедуры

Процедура Актуализировать(Форма, Организация, Период = Неопределено) Экспорт
	
	ВыполняемоеЗадание = ЗакрытиеМесяцаВызовСервера.НайтиФоновоеЗаданиеАктуализацииПоОрганизации(Организация, Форма.УникальныйИдентификатор);
	
	Если ВыполняемоеЗадание = Неопределено Тогда
		АктуализироватьДанные(Форма, Организация, Период);
	Иначе
		ОтобразитьСостояниеАктуализации(Форма, ВыполняемоеЗадание);	
		Форма.Элементы.Актуализация.Видимость = Истина;
		Форма.ПодключитьОбработчикОжидания("Подключаемый_ПроверитьЗавершениеАктуализации", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура АктуализироватьДанные(Форма, Организация, Период = Неопределено)
	
	Элементы = Форма.Элементы;
	
	Форма.ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации");
	
	ОтобразитьСостояниеАктуализации(Форма);	
	
	ПараметрыАктуализации = Новый Структура;
	ПараметрыАктуализации.Вставить("Организация",                  Организация);
	ПараметрыАктуализации.Вставить("Период",                       Период);
	ПараметрыАктуализации.Вставить("ИдентификаторЗадания",         Форма.ИдентификаторЗаданияАктуализации);
	ПараметрыАктуализации.Вставить("УникальныйИдентификаторФормы", Форма.УникальныйИдентификатор);
	ПараметрыАктуализации.Вставить("АдресХранилищаСОшибками",      ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор));
	ПараметрыАктуализации.Вставить("НачалоВыполнения",             ЗначениеТаймера());
	
	РезультатВыполнения = ЗакрытиеМесяцаВызовСервера.АктуализироватьДанные(ПараметрыАктуализации);
	
	Форма.АдресХранилищаАктуализации = РезультатВыполнения.АдресХранилища;
	
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("АктуализацияДанныхНачалоАктуализации");
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ОбработатьРезультатАктуализации(Форма, Организация, Период);
		Форма.ИдентификаторЗаданияАктуализации = Неопределено;
	Иначе
		Форма.ПрогрессорАктуализации = "0%.";
		Форма.ИдентификаторЗаданияАктуализации = РезультатВыполнения.ИдентификаторЗадания;
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(Форма.ПараметрыОбработчикаОжиданияАктуализации);
		Форма.ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации", 1, Истина);
	КонецЕсли;

КонецПроцедуры

Процедура ОтменитьАктуализацию(Форма, Организация, Период = Неопределено) Экспорт
	
	Форма.ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации");
	ЗакрытиеМесяцаВызовСервера.ОтменитьВыполнениеЗадания(Форма.ИдентификаторЗаданияАктуализации);
	Форма.ИдентификаторЗаданияАктуализации = Неопределено;
	
	ПроверитьАктуальностьДанных(Форма, Организация, Период);
	
	ПараметрыОповещения = Новый Структура("Организация", Организация);
	Оповестить("АктуализацияОтменена", ПараметрыОповещения);
	
КонецПроцедуры

Процедура ПроверитьВыполнениеАктуализацииОтчета(Форма, Организация, Период = Неопределено) Экспорт

	Попытка
		Если ЗакрытиеМесяцаВызовСервера.ЗаданиеВыполнено(Форма.ИдентификаторЗаданияАктуализации) Тогда
			ОбработатьРезультатАктуализации(Форма, Организация, Период);
			Форма.ИдентификаторЗаданияАктуализации = Неопределено;
		Иначе
			ОбновитьПроцентПрогресса(Форма);
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(Форма.ПараметрыОбработчикаОжиданияАктуализации);
			Форма.ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации",
				Форма.ПараметрыОбработчикаОжиданияАктуализации.ТекущийИнтервал, Истина);
		КонецЕсли;
	Исключение
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

Процедура ОбработатьРезультатАктуализации(Форма, Организация, Период = Неопределено) Экспорт
	
	Элементы = Форма.Элементы;
	
	Форма.ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации");
	
	РезультатАктуализации = ПолучитьИзВременногоХранилища(Форма.АдресХранилищаАктуализации);
	
	Если РезультатАктуализации.Выполнено Тогда
		ПараметрыОповещения = Новый Структура("Организация", Организация);
		Оповестить("АктуализацияЗавершенаУспешно", ПараметрыОповещения);
	Иначе 
		ПоказатьОшибкиАктуализации(Форма, РезультатАктуализации);
		Элементы.Актуализация.Видимость = Истина;
		ПараметрыОповещения = Новый Структура("Организация", Организация);
		Оповестить("АктуализацияОтменена", ПараметрыОповещения);
	КонецЕсли;
	
	Если РезультатАктуализации.НачалоВыполнения <> Неопределено Тогда
		ГлубинаНеактуальности = ПолучитьГлубинуНеактуальности(РезультатАктуализации.ПределАктуализации);
		ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени("АктуализацияДанныхВыполненаАктуализацияЗаПериод" + ГлубинаНеактуальности, РезультатАктуализации.НачалоВыполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗавершениеАктуализации(Форма, Организация, Период = Неопределено) Экспорт
	
	ВыполняемоеЗадание = ЗакрытиеМесяцаВызовСервера.НайтиФоновоеЗаданиеАктуализацииПоОрганизации(Организация, Форма.УникальныйИдентификатор);
	
	Если ВыполняемоеЗадание = Неопределено Тогда
		Форма.ОтключитьОбработчикОжидания("Подключаемый_ПроверитьЗавершениеАктуализации");
		ПроверитьАктуальностьДанных(Форма, Организация, Период);
	Иначе
		ОтобразитьСостояниеАктуализации(Форма, ВыполняемоеЗадание);
		Форма.ПодключитьОбработчикОжидания("Подключаемый_ПроверитьЗавершениеАктуализации", 1, Истина);
	КонецЕсли;

КонецПроцедуры

Процедура ОтобразитьСостояниеАктуализации(Форма, ВыполняемоеЗаданиеАктуализации = Неопределено) 
	
	ИдетАктуализация = ВыполняемоеЗаданиеАктуализации = Неопределено;
	
	Элементы = Форма.Элементы;
	Элементы.РисПриАктуализации.Видимость = ИдетАктуализация;
	Элементы.ПрогрессорАктуализации.Видимость = ИдетАктуализация;
	Элементы.ОтменитьАктуализацию.Видимость = ИдетАктуализация;
	
	Если ИдетАктуализация Тогда
		
		Элементы.ТекстПриАктуализации.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Центр;
		Элементы.СкрытьПриАктуализации.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Центр;
		Элементы.ИдетАктуализация.ЦветФона = Новый Цвет;
		
		ТекстПриАктуализации = НСтр("ru='Данные этого отчета могут измениться.'");
		Элементы.ТекстПриАктуализации.Заголовок = ТекстПриАктуализации;
		
	Иначе // Актуализация выполняется в другом отчете или другим пользователем.
		
		Элементы.ТекстПриАктуализации.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Низ;
		Элементы.СкрытьПриАктуализации.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Низ;
		Элементы.ИдетАктуализация.ЦветФона = ЗакрытиеМесяцаВызовСервера.ПолучитьПредупреждающийЦвет();
		
		Если ПустаяСтрока(ВыполняемоеЗаданиеАктуализации.УникальныйИдентификатор) Тогда // Актуализация выполняется другим пользователем в файловом режиме.
			ТекстПриАктуализации = НСтр("ru='Актуализация данных, запущенная другим пользователем, еще не закончилась. Данные этого отчета могут быть неактуальны.'");
			Элементы.ТекстПриАктуализации.Заголовок = ТекстПриАктуализации;
		ИначеЕсли ВыполняемоеЗаданиеАктуализации.Пользователь <> ПользователиКлиентСервер.ТекущийПользователь() Тогда // Актуализация выполняется другим пользователем в клиент-серверном режиме.
			ТекстПриАктуализации = НСтр("ru='Идет актуализация данных пользователем %1. Данные этого отчета могут быть неактуальны.'");
			ТекстПриАктуализации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПриАктуализации, ВыполняемоеЗаданиеАктуализации.Пользователь);
			Элементы.ТекстПриАктуализации.Заголовок = ТекстПриАктуализации;
		Иначе // Актуализация выполняется текущим пользователем в другом отчете.
			ТекстПриАктуализации = НСтр("ru='Актуализация данных, запущенная в другом отчете, еще не закончилась. Данные этого отчета могут быть неактуальны.'");
			Элементы.ТекстПриАктуализации.Заголовок = ТекстПриАктуализации;
		КонецЕсли;
		
	КонецЕсли;

	Элементы.Актуализация.ТекущаяСтраница = Элементы.ИдетАктуализация;
	
КонецПроцедуры

Процедура ОбработкаОповещенияАктуализации(Форма, Организация, Период, ИмяСобытия, Параметр, Источник) Экспорт
	
	Элементы = Форма.Элементы;
	
	// В формах отчетов информация об актуальности данных выводится, 
	// только если поле Результат доступно для просмотра.
	Если Элементы.Найти("РезультатСхемы") <> Неопределено Тогда
		ВыводитьИнформацию = Истина;
	Иначе
		Попытка
			ВыводитьИнформацию = Элементы.Результат.ОтображениеСостояния.Видимость = Ложь;
		Исключение
			ВыводитьИнформацию = Истина;
		КонецПопытки;
	КонецЕсли;
	
	Если НЕ ВыводитьИнформацию Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяСобытия = "АктуализацияЗавершенаУспешно" И Организация = Параметр.Организация Тогда
		Форма.ОтключитьОбработчикОжидания("Подключаемый_ПроверитьЗавершениеАктуализации");
		Элементы.Актуализация.ТекущаяСтраница = Элементы.ДанныеАктуализированы;
		Элементы.Актуализация.Видимость = Истина;
	ИначеЕсли ИмяСобытия = "АктуализацияОтменена" И Организация = Параметр.Организация Тогда
		Форма.ОтключитьОбработчикОжидания("Подключаемый_ПроверитьЗавершениеАктуализации");
		Если Элементы.Актуализация.Видимость Тогда
			ПроверитьАктуальность(Форма, Организация, Период);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СкрытьПанельАктуализацииАвтоматически(Форма) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Форма.ИдентификаторЗаданияАктуализации) Тогда
		СкрытьПанельАктуализации(Форма, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура СкрытьПанельАктуализации(Форма, АвтоматическийВызов = Ложь) Экспорт
	
	Форма.Элементы.Актуализация.Видимость = Ложь;
	
	Если НЕ АвтоматическийВызов Тогда
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("АктуализацияДанныхСкрыть");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьПроцентПрогресса(Форма)
	
	Прогресс = ЗакрытиеМесяцаВызовСервера.ПрочитатьПрогресс(Форма.ИдентификаторЗаданияАктуализации);
	Если ТипЗнч(Прогресс) = Тип("Структура") И Прогресс.Свойство("Процент") Тогда
		Процент = Мин(Прогресс.Процент, 99);
		Форма.ПрогрессорАктуализации = Строка(Процент) + "%.";
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОВЕРКА АКТУАЛЬНОСТИ

Процедура ПодключитьПроверкуАктуальности(Форма) Экспорт
	
	Форма.ПодключитьОбработчикОжидания("Подключаемый_ПроверитьАктуальность", 0.7, Истина);
	
КонецПроцедуры

Процедура ПроверитьАктуальность(Форма, Организация, Период = Неопределено) Экспорт
	
	Если НЕ ЗакрытиеМесяцаВызовСервера.ПроверятьАктуальность() Тогда
		СкрытьПанельАктуализацииАвтоматически(Форма);
		Возврат;
	КонецЕсли;
	
	Форма.ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации");
	Форма.ОтключитьОбработчикОжидания("Подключаемый_ПроверитьЗавершениеАктуализации");
	
	ВыполняемоеЗадание = ЗакрытиеМесяцаВызовСервера.НайтиФоновоеЗаданиеАктуализацииПоОрганизации(Организация, Форма.УникальныйИдентификатор);
	
	Если ВыполняемоеЗадание = Неопределено Тогда
		ПроверитьАктуальностьДанных(Форма, Организация, Период);
	Иначе
		Если Форма.ИдентификаторЗаданияАктуализации = ВыполняемоеЗадание.УникальныйИдентификатор Тогда // Задание дано этим отчетом.
			ОтобразитьСостояниеАктуализации(Форма);	
			ОбновитьПроцентПрогресса(Форма);
			Форма.Элементы.Актуализация.Видимость = Истина;
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(Форма.ПараметрыОбработчикаОжиданияАктуализации);
			Форма.ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации", 1, Истина);
		Иначе // Задание дал другой отчет.
			ОтобразитьСостояниеАктуализации(Форма, ВыполняемоеЗадание);	
			Форма.Элементы.Актуализация.Видимость = Истина;
			Форма.ПодключитьОбработчикОжидания("Подключаемый_ПроверитьЗавершениеАктуализации", 1, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьАктуальностьДанных(Форма, Организация, Период = Неопределено)
	
	Элементы = Форма.Элементы;
	
	Форма.ОтключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиАктуальности");
	
	Элементы.Актуализация.ТекущаяСтраница = Элементы.ИдетПроверкаАктуальности;
	Элементы.Актуализация.Видимость = Истина;

	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("Организация", Организация);	
	ПараметрыПроверки.Вставить("Период", Период);	
	ПараметрыПроверки.Вставить("ИдентификаторЗадания",         Форма.ИдентификаторЗаданияАктуализации);
	ПараметрыПроверки.Вставить("УникальныйИдентификаторФормы", Форма.УникальныйИдентификатор);	
	ПараметрыПроверки.Вставить("НачалоВыполнения",             ЗначениеТаймера());
	
	РезультатВыполнения = ЗакрытиеМесяцаВызовСервера.ПроверитьАктуальность(ПараметрыПроверки);
	
	Форма.АдресХранилищаАктуализации = РезультатВыполнения.АдресХранилища;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ОбработатьРезультатПроверкиАктуальности(Форма);
		Форма.ИдентификаторЗаданияАктуализации = Неопределено;
	Иначе
		Форма.ИдентификаторЗаданияАктуализации = РезультатВыполнения.ИдентификаторЗадания;
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(Форма.ПараметрыОбработчикаОжиданияАктуализации);
		Форма.ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиАктуальности", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьРезультатПроверкиАктуальности(Форма) Экспорт

	Элементы = Форма.Элементы;
	
	Форма.ОтключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиАктуальности");
	
	РезультатПроверки = ПолучитьИзВременногоХранилища(Форма.АдресХранилищаАктуализации);
	
	Если НЕ РезультатПроверки.ТребуетсяАктуализация Тогда
		Элементы.Актуализация.Видимость = Ложь;
	Иначе
		Форма.ДатаАктуальности = РезультатПроверки.ДатаАктуальности;
		МассивПодстрок = Новый Массив;
		МассивПодстрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Данные учета актуальны на '")));
		МассивПодстрок.Добавить(Новый ФорматированнаяСтрока(Формат(Форма.ДатаАктуальности, "ДЛФ=D"), Новый Шрифт(,, Истина)));
		МассивПодстрок.Добавить(Новый ФорматированнаяСтрока(". "));
		Если РезультатПроверки.АктуализацияДоступна И РезультатПроверки.АктуализацияВозможна Тогда
			МассивПодстрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Рекомендуется актуализировать данные.'")));
			Элементы.ТекстПриНеобходимостиАктуализации.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
			Элементы.ТекстПриНеобходимостиАктуализации.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Центр;
			Элементы.СкрытьПриНеобходимостиАктуализации.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Центр;
		Иначе
			Если РезультатПроверки.АктуализацияВозможна Тогда
				МассивПодстрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Для актуализации данных требуются права главного бухгалтера.'")));
			КонецЕсли;
			Элементы.ТекстПриНеобходимостиАктуализации.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
			Элементы.ТекстПриНеобходимостиАктуализации.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Низ;
			Элементы.СкрытьПриНеобходимостиАктуализации.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Низ;
		КонецЕсли;
		Элементы.Актуализировать.Видимость = РезультатПроверки.АктуализацияДоступна И РезультатПроверки.АктуализацияВозможна;
		Элементы.ТекстПриНеобходимостиАктуализации.Заголовок = Новый ФорматированнаяСтрока(МассивПодстрок);
		Элементы.Актуализация.ТекущаяСтраница = Элементы.ТребуетсяАктуализация;
		
		Если РезультатПроверки.НачалоВыполнения <> Неопределено Тогда
			ГлубинаНеактуальности = ПолучитьГлубинуНеактуальности(РезультатПроверки.ДатаАктуальности);
			ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени("АктуализацияДанныхТребуетсяАктуализацияЗаПериод" + ГлубинаНеактуальности, РезультатПроверки.НачалоВыполнения);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьВыполнениеПроверкиАктуальностиОтчета(Форма) Экспорт
	
	Попытка
		Если ЗакрытиеМесяцаВызовСервера.ЗаданиеВыполнено(Форма.ИдентификаторЗаданияАктуализации) Тогда
			ОбработатьРезультатПроверкиАктуальности(Форма);
			Форма.ИдентификаторЗаданияАктуализации = Неопределено;
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(Форма.ПараметрыОбработчикаОжиданияАктуализации);
			Форма.ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиАктуальности",
				Форма.ПараметрыОбработчикаОжиданияАктуализации.ТекущийИнтервал, Истина);
		КонецЕсли;
	Исключение
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОЦЕНКА ПРОИЗВОДИТЕЛЬНОСТИ

Функция ЗначениеТаймера()
	Если ОценкаПроизводительностиВызовСервераПовтИсп.ВыполнятьЗамерыПроизводительности() Тогда
		Возврат ОценкаПроизводительностиКлиентСервер.ЗначениеТаймера();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ПолучитьГлубинуНеактуальности(ДатаАктуальности)
	
	Если НачалоМесяца(ДатаАктуальности) > НачалоМесяца(ДобавитьМесяц(ТекущаяДата(), -3)) Тогда
		ГлубинаНеактуальности = "ДоКвартала";
	ИначеЕсли НачалоМесяца(ДатаАктуальности) > НачалоМесяца(ДобавитьМесяц(ТекущаяДата(), -6)) Тогда
		ГлубинаНеактуальности = "ОтКварталаДоПолугодия";
	ИначеЕсли НачалоМесяца(ДатаАктуальности) > НачалоМесяца(ДобавитьМесяц(ТекущаяДата(), -12)) Тогда
		ГлубинаНеактуальности = "ОтПолугодияДоГода";
	Иначе
		ГлубинаНеактуальности = "БольшеГода";
	КонецЕсли;
	
	Возврат ГлубинаНеактуальности;
	
КонецФункции
