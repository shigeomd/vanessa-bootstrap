Функция ВсеВидыОпераций() Экспорт
	
	ВидыОпераций = Новый ТаблицаЗначений;
	ВидыОпераций.Колонки.Добавить("ВидОперации",                  Новый ОписаниеТипов("ПеречислениеСсылка.ВидыРегламентныхОпераций"));
	ВидыОпераций.Колонки.Добавить("НомерГруппы",                  Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2,0,ДопустимыйЗнак.Неотрицательный)));
	ВидыОпераций.Колонки.Добавить("ПоОрганизацииВЦелом",          Новый ОписаниеТипов("Булево"));
	ВидыОпераций.Колонки.Добавить("ДокументРегламентнаяОперация", Новый ОписаниеТипов("Булево"));
	
	Для Каждого ВидОперации Из Перечисления.ВидыРегламентныхОпераций Цикл
		НоваяСтрока = ВидыОпераций.Добавить();
		НоваяСтрока.ВидОперации                  = ВидОперации;
		НоваяСтрока.НомерГруппы                  = ГруппаПоВидуОперации(ВидОперации);
		НоваяСтрока.ПоОрганизацииВЦелом          = ГруппаВыполняетсяПоОрганизацииВЦелом(НоваяСтрока.НомерГруппы);
		НоваяСтрока.ДокументРегламентнаяОперация = ЗакрытиеМесяцаКлиентСервер.ИспользуетсяДокументРегламентнаяОперация(ВидОперации);
	КонецЦикла;
	
	Возврат ВидыОпераций;
	
КонецФункции

Функция ГруппаПоВидуОперации(ВидОперации) Экспорт
	
	Если ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетДолейСписанияКосвенныхРасходов Тогда 
		НомерГруппы = 2;
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчетов20_23_25_26 Тогда 
		НомерГруппы = 3;
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчета44 Тогда 
		НомерГруппы = 3;
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетРезервовПоСомнительнымДолгам Тогда 
		НомерГруппы = 3;
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.НачислениеСтраховыхВзносовИП Тогда 
		НомерГруппы = 3;
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.ВключениеАвансовВПрочиеДоходыДляИП Тогда 
		НомерГруппы = 3;
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.РаспределениеРасходовПоВидамДеятельностиДляУСН Тогда 
		НомерГруппы = 3;
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.РаспределениеРасходовПоВидамДеятельностиДляИП Тогда
		НомерГруппы = 3;
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетРасходовУменьшающихНалогУСН Тогда
		НомерГруппы = 3;
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчетов90_91 Тогда 
		НомерГруппы = 4;
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.СписаниеУбытковПрошлыхЛет Тогда 
		НомерГруппы = 4;
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетНалогаНаПрибыль Тогда 
		НомерГруппы = 4;
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетНалогаУСН Тогда 
		НомерГруппы = 4;		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.РеформацияБаланса Тогда 
		НомерГруппы = 4;
	Иначе
		НомерГруппы = 1;
	КонецЕсли;
	
	Возврат НомерГруппы;
	
КонецФункции

Функция ПериодичностьРегламентнойОперации(ВидОперации) Экспорт
	
	Если ВидОперации = Перечисления.ВидыРегламентныхОпераций.НачислениеНДС 
		Или ВидОперации = Перечисления.ВидыРегламентныхОпераций.ПризнаниеРасходовНаПриобретениеНМАДляУСН
		Или ВидОперации = Перечисления.ВидыРегламентныхОпераций.ПризнаниеРасходовНаПриобретениеОСДляУСН
		Или ВидОперации = Перечисления.ВидыРегламентныхОпераций.РаспределениеРасходовПоВидамДеятельностиДляУСН
		Или ВидОперации = Перечисления.ВидыРегламентныхОпераций.СписаниеДопРасходовДляУСН
		Или ВидОперации = Перечисления.ВидыРегламентныхОпераций.СписаниеТаможенныхПлатежейДляУСН
		Или ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетРасходовУменьшающихНалогУСН
		Или ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетНалогаУСН Тогда
		
		Возврат Перечисления.Периодичность.Квартал;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.РеформацияБаланса 
		Или ВидОперации = Перечисления.ВидыРегламентныхОпераций.ВключениеАвансовВПрочиеДоходыДляИП Тогда
		
		Возврат Перечисления.Периодичность.Год;
		
	Иначе
		
		Возврат Перечисления.Периодичность.Месяц;
		
	КонецЕсли;
	
КонецФункции

// ОБЩИЕ СОГЛАШЕНИЯ

Функция ВидДокументаНачисленияЗарплаты(Организация) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии") Тогда
		Возврат "НачислениеЗарплаты";
	Иначе
		ИспользоватьФорматОбменаЗУП25 = ПолучитьФункциональнуюОпцию(
			"ИспользоватьФорматОбменаЗУП25", 
			Новый Структура("Организация", Организация));
		Если ИспользоватьФорматОбменаЗУП25 Тогда
			Возврат "ОтражениеЗарплатыВУчете";
		Иначе
			Возврат "ОтражениеЗарплатыВБухучете";
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеОперацииНачислениеЗарплаты(Организация) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии") Тогда
		Возврат НСтр("ru = 'Начисление зарплаты'");
	Иначе
		Возврат НСтр("ru = 'Отражение зарплаты в учете'");
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеОперацииПерепроведениеДокументов() Экспорт
	
	Возврат НСтр("ru = 'Перепроведение документов за месяц'");
	
КонецФункции

Функция ГруппаВыполняетсяПоОрганизацииВЦелом(НомерГруппы) Экспорт
	
	Возврат НомерГруппы = 2 ИЛИ НомерГруппы = 4;
	
КонецФункции

// ПОЛУЧЕНИЕ СТАТУСА ЗАКРЫТИЯ МЕСЯЦА

// Создает временную таблицу ДетальныйСтатусЗакрытияМесяца с колонками
// - Организация
// - ВидОперации
// - Требуется
// - Состояние
// - РучнаяКорректировка
//
// Менеджер должен содержать таблицу Организации
Процедура СоздатьДетальныйСтатусЗакрытияМесяца(МенеджерВременныхТаблиц, Период, Организация, Знач ВидыОпераций = Неопределено) Экспорт
	
	Если ВидыОпераций = Неопределено Тогда
		ВидыОпераций = ВсеВидыОпераций();
	КонецЕсли;
	
	СоздатьВидыОпераций(МенеджерВременныхТаблиц, ВидыОпераций);
	
	// Получим данные об операциях, которые требуется выполнить исходя из данных учетной политики и первичных документов
	СоздатьОперацииКВыполнению(МенеджерВременныхТаблиц, ВидыОпераций, Период, Организация);
	
	// Получим данные регламентных операций
	СоздатьДанныеРегламентныхОпераций(МенеджерВременныхТаблиц, Период, Организация);
	
	// Получим все данные в одной таблице
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", БухгалтерскийУчетПереопределяемый.ГоловнаяОрганизация(Организация));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Организация КАК Организация,
	|	ВидыОпераций.ВидОперации КАК ВидОперации,
	|	ВидыОпераций.НомерГруппы КАК НомерГруппы,
	|	ВидыОпераций.ПоОрганизацииВЦелом КАК ПоОрганизацииВЦелом,
	|	ВидыОпераций.ДокументРегламентнаяОперация КАК ДокументРегламентнаяОперация
	|ПОМЕСТИТЬ ВсеОперации
	|ИЗ
	|	Организации КАК Организации,
	|	ВидыОпераций КАК ВидыОпераций
	|ГДЕ
	|	НЕ ВидыОпераций.ПоОрганизацииВЦелом
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	&ГоловнаяОрганизация,
	|	ВидыОпераций.ВидОперации,
	|	ВидыОпераций.НомерГруппы,
	|	ВидыОпераций.ПоОрганизацииВЦелом,
	|	ВидыОпераций.ДокументРегламентнаяОперация
	|ИЗ
	|	ВидыОпераций КАК ВидыОпераций
	|ГДЕ
	|	ВидыОпераций.ПоОрганизацииВЦелом
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ВидОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеОперации.Организация КАК Организация,
	|	ВсеОперации.ВидОперации КАК ВидОперации,
	|	ВсеОперации.НомерГруппы КАК НомерГруппы,
	|	ВсеОперации.ПоОрганизацииВЦелом,
	|	ВЫБОР
	|		КОГДА ОперацииКВыполнению.ВидОперации ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Требуется,
	|	ВЫБОР
	|		КОГДА ОперацииКВыполнению.ВидОперации ЕСТЬ NULL 
	|				И ЕСТЬNULL(РегламентныеОперации.Ссылка, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.НеВыполнено)
	|		ИНАЧЕ ЕСТЬNULL(РегламентныеОперации.Состояние, ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.НеВыполнено))
	|	КОНЕЦ КАК Состояние,
	|	ВЫБОР
	|		КОГДА ВсеОперации.ДокументРегламентнаяОперация = ИСТИНА
	|			ТОГДА ЕСТЬNULL(РегламентныеОперации.РучнаяКорректировка, ЛОЖЬ)
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК РучнаяКорректировка,
	|	ЕСТЬNULL(РегламентныеОперации.Устарела, ЛОЖЬ) КАК Устарела,
	|	ЕСТЬNULL(РегламентныеОперации.Ссылка, НЕОПРЕДЕЛЕНО) КАК Ссылка
	|ПОМЕСТИТЬ ДетальныйСтатусЗакрытияМесяца
	|ИЗ
	|	ВсеОперации КАК ВсеОперации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеРегламентныхОпераций КАК РегламентныеОперации
	|		ПО ВсеОперации.Организация = РегламентныеОперации.Организация
	|			И ВсеОперации.ВидОперации = РегламентныеОперации.ВидОперации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОперацииКВыполнению КАК ОперацииКВыполнению
	|		ПО ВсеОперации.Организация = ОперацииКВыполнению.Организация
	|			И ВсеОперации.ВидОперации = ОперацииКВыполнению.ВидОперации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ВидОперации";
	// Если регламентная операция не требуется, то ее можем считать выполненной только тогда,
	// когда известна ссылка на регламентный документ, который ее выполнил.
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Возвращает таблицу значений с перечнем регламентных операций, 
// относящихся к предыдущим группам закрытия месяца.
//
// Структура таблицы формируется в процедуре . 
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица со структурой, формируемой в процедуре
//					  СоздатьДетальныйСтатусЗакрытияМесяца()
//	Неопределено - если нет операций из предыдущих групп
//
Функция ДетальныйСтатусПредыдущихГрупп(Период, Организация, ВидОперации) Экспорт

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если НЕ СоздатьДетальныйСтатусПредыдущихГрупп(МенеджерВременныхТаблиц, Период, Организация, ВидОперации) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДетальныйСтатусЗакрытияМесяца.Организация,
	|	ДетальныйСтатусЗакрытияМесяца.ВидОперации,
	|	ДетальныйСтатусЗакрытияМесяца.ВидОперации.Порядок КАК ПорядокВидаОперации,
	|	ДетальныйСтатусЗакрытияМесяца.НомерГруппы,
	|	ДетальныйСтатусЗакрытияМесяца.ПоОрганизацииВЦелом,
	|	ДетальныйСтатусЗакрытияМесяца.Требуется,
	|	ДетальныйСтатусЗакрытияМесяца.Состояние,
	|	ДетальныйСтатусЗакрытияМесяца.РучнаяКорректировка,
	|	ДетальныйСтатусЗакрытияМесяца.Устарела,
	|	ДетальныйСтатусЗакрытияМесяца.Ссылка
	|ИЗ
	|	ДетальныйСтатусЗакрытияМесяца КАК ДетальныйСтатусЗакрытияМесяца
	|УПОРЯДОЧИТЬ ПО
	|	НомерГруппы,
	|	ПорядокВидаОперации
	|";
		
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Процедура СоздатьУстаревшиеОперации(МенеджерВременныхТаблиц, Период, Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоПериода",       НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода",        КонецМесяца(Период));
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", БухгалтерскийУчетПереопределяемый.ГоловнаяОрганизация(Организация));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Организация КАК Организация,
	|	РегламентнаяОперация.ВидОперации КАК ВидОперации
	|ПОМЕСТИТЬ ВТ_ВыполненныеОперации
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	НЕ РегламентнаяОперация.ПометкаУдаления
	|	И РегламентнаяОперация.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РегламентнаяОперация.ВидОперации В
	|			(ВЫБРАТЬ
	|				ВидыОпераций.ВидОперации
	|			ИЗ
	|				ВидыОпераций)
	|	И РегламентнаяОперация.Организация В
	|			(ВЫБРАТЬ
	|				Организации.Организация
	|			ИЗ
	|				Организации)
	|	И РегламентнаяОперация.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	РегламентнаяОперация.Организация,
	|	РегламентнаяОперация.ВидОперации
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	НЕ РегламентнаяОперация.ПометкаУдаления
	|	И РегламентнаяОперация.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РегламентнаяОперация.ВидОперации В
	|			(ВЫБРАТЬ
	|				ВидыОпераций.ВидОперации
	|			ИЗ
	|				ВидыОпераций)
	|	И РегламентнаяОперация.Организация = &ГоловнаяОрганизация
	|	И РегламентнаяОперация.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ВидОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УстаревшиеОперации.Организация КАК Организация,
	|	УстаревшиеОперации.ВидОперации КАК ВидОперации
	|ПОМЕСТИТЬ ВТ_ДанныеРегистраУстаревшиеОперации
	|ИЗ
	|	РегистрСведений.НеактуальныеРегламентныеОперации КАК УстаревшиеОперации
	|ГДЕ
	|	УстаревшиеОперации.Организация = &ГоловнаяОрганизация
	|	И НЕ &ГоловнаяОрганизация В
	|				(ВЫБРАТЬ
	|					Организации.Организация
	|				ИЗ
	|					Организации)
	|	И УстаревшиеОперации.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И УстаревшиеОперации.ВидОперации В
	|			(ВЫБРАТЬ
	|				ВидыОпераций.ВидОперации
	|			ИЗ
	|				ВидыОпераций
	|			ГДЕ
	|				ВидыОпераций.ПоОрганизацииВЦелом)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УстаревшиеОперации.Организация,
	|	УстаревшиеОперации.ВидОперации
	|ИЗ
	|	РегистрСведений.НеактуальныеРегламентныеОперации КАК УстаревшиеОперации
	|ГДЕ
	|	УстаревшиеОперации.Организация В
	|			(ВЫБРАТЬ
	|				Организации.Организация
	|			ИЗ
	|				Организации)
	|	И УстаревшиеОперации.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И УстаревшиеОперации.ВидОперации В
	|			(ВЫБРАТЬ
	|				ВидыОпераций.ВидОперации
	|			ИЗ
	|				ВидыОпераций)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ВидОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УстаревшиеОперации.Организация КАК Организация,
	|	УстаревшиеОперации.ВидОперации КАК ВидОперации
	|ПОМЕСТИТЬ УстаревшиеОперации
	|ИЗ
	|	ВТ_ДанныеРегистраУстаревшиеОперации КАК УстаревшиеОперации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ВыполненныеОперации КАК ВыполненныеОперации
	|		ПО УстаревшиеОперации.Организация = ВыполненныеОперации.Организация
	|			И УстаревшиеОперации.ВидОперации = ВыполненныеОперации.ВидОперации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ВидОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ДанныеРегистраУстаревшиеОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ВыполненныеОперации";
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	
КонецПроцедуры

// Данные о документах РегламентнаяОперация и приравненных к ним
Процедура СоздатьДанныеРегламентныхОпераций(МенеджерВременныхТаблиц, Период, Организация) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СоздатьУстаревшиеОперации(МенеджерВременныхТаблиц, Период, Организация);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоПериода",                      НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода",                       КонецМесяца(Период));
	Запрос.УстановитьПараметр("НачислениеЗарплаты",                 ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии"));
	Запрос.УстановитьПараметр("ВыполняютсяСпециальнымиДокументами", Перечисления.ВидыРегламентныхОпераций.ВыполняютсяСпециальнымиДокументами());
	// Операции группы 2 и 4 следует искать у головной организации
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",                БухгалтерскийУчетПереопределяемый.ГоловнаяОрганизация(Организация));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Организация КАК Организация,
	|	РегламентнаяОперация.ВидОперации КАК ВидОперации,
	|	РегламентнаяОперация.Состояние КАК Состояние,
	|	РегламентнаяОперация.РучнаяКорректировка КАК РучнаяКорректировка,
	|	РегламентнаяОперация.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА РегламентнаяОперация.РучнаяКорректировка
	|			ТОГДА 0
	|		ИНАЧЕ 10
	|	КОНЕЦ + ВЫБОР
	|		КОГДА РегламентнаяОперация.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено)
	|			ТОГДА 0
	|		КОГДА РегламентнаяОперация.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Пропущено)
	|			ТОГДА 1
	|		КОГДА РегламентнаяОперация.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.ВыполненоСОшибками)
	|			ТОГДА 2
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК Приоритет
	|ПОМЕСТИТЬ ВТ_ДанныеДокументовРегламентнаяОперация
	|ИЗ
	|	(ВЫБРАТЬ
	|		РегламентнаяОперация.Организация КАК Организация,
	|		РегламентнаяОперация.ВидОперации КАК ВидОперации,
	|		РегламентнаяОперация.Состояние КАК Состояние,
	|		РегламентнаяОперация.РучнаяКорректировка КАК РучнаяКорректировка,
	|		РегламентнаяОперация.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|	ГДЕ
	|		РегламентнаяОперация.Организация В
	|				(ВЫБРАТЬ
	|					Организации.Организация
	|				ИЗ
	|					Организации)
	|		И РегламентнаяОперация.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|		И РегламентнаяОперация.ВидОперации В
	|				(ВЫБРАТЬ
	|					ВидыОпераций.ВидОперации
	|				ИЗ
	|					ВидыОпераций)
	|		И НЕ РегламентнаяОперация.ПометкаУдаления
	|		И НЕ РегламентнаяОперация.ВидОперации В (&ВыполняютсяСпециальнымиДокументами)
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		РегламентнаяОперация.Организация,
	|		РегламентнаяОперация.ВидОперации,
	|		РегламентнаяОперация.Состояние,
	|		РегламентнаяОперация.РучнаяКорректировка,
	|		РегламентнаяОперация.Ссылка
	|	ИЗ
	|		Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|	ГДЕ
	|		РегламентнаяОперация.Организация = &ГоловнаяОрганизация
	|		И НЕ &ГоловнаяОрганизация В
	|					(ВЫБРАТЬ
	|						Организации.Организация
	|					ИЗ
	|						Организации)
	|		И РегламентнаяОперация.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|		И РегламентнаяОперация.ВидОперации В
	|				(ВЫБРАТЬ
	|					ВидыОпераций.ВидОперации
	|				ИЗ
	|					ВидыОпераций
	|				ГДЕ
	|					ВидыОпераций.ПоОрганизацииВЦелом)
	|		И НЕ РегламентнаяОперация.ПометкаУдаления) КАК РегламентнаяОперация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ВидОперации,
	|	Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегламентнаяОперация.Организация КАК Организация,
	|	РегламентнаяОперация.ВидОперации КАК ВидОперации,
	|	МИНИМУМ(РегламентнаяОперация.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ ВТ_УникальныеРегламентныеОперации
	|ИЗ
	|	ВТ_ДанныеДокументовРегламентнаяОперация КАК РегламентнаяОперация
	|
	|СГРУППИРОВАТЬ ПО
	|	РегламентнаяОперация.Организация,
	|	РегламентнаяОперация.ВидОперации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ВидОперации,
	|	Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокументов.Организация,
	|	ДанныеДокументов.ВидОперации,
	|	МАКСИМУМ(ДанныеДокументов.Состояние) КАК Состояние,
	|	МАКСИМУМ(ДанныеДокументов.РучнаяКорректировка) КАК РучнаяКорректировка,
	|	МАКСИМУМ(ДанныеДокументов.Ссылка) КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ДанныеДокументов
	|ИЗ
	|	(ВЫБРАТЬ
	|		РегламентнаяОперация.Организация КАК Организация,
	|		РегламентнаяОперация.ВидОперации КАК ВидОперации,
	|		РегламентнаяОперация.Состояние КАК Состояние,
	|		РегламентнаяОперация.РучнаяКорректировка КАК РучнаяКорректировка,
	|		РегламентнаяОперация.Ссылка КАК Ссылка
	|	ИЗ
	|		ВТ_УникальныеРегламентныеОперации КАК УникальныеРегламентныеОперации
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеДокументовРегламентнаяОперация КАК РегламентнаяОперация
	|			ПО УникальныеРегламентныеОперации.Организация = РегламентнаяОперация.Организация
	|				И УникальныеРегламентныеОперации.ВидОперации = РегламентнаяОперация.ВидОперации
	|				И УникальныеРегламентныеОперации.Приоритет = РегламентнаяОперация.Приоритет
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НачислениеЗарплаты.Организация,
	|		ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.НачислениеЗарплаты),
	|		ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено),
	|		ИСТИНА,
	|		НачислениеЗарплаты.Ссылка
	|	ИЗ
	|		Документ.НачислениеЗарплаты КАК НачислениеЗарплаты
	|	ГДЕ
	|		&НачислениеЗарплаты
	|		И ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.НачислениеЗарплаты) В
	|				(ВЫБРАТЬ
	|					ВидыОпераций.ВидОперации
	|				ИЗ
	|					ВидыОпераций)
	|		И НачислениеЗарплаты.Организация В
	|				(ВЫБРАТЬ
	|					Организации.Организация
	|				ИЗ
	|					Организации)
	|		И НачислениеЗарплаты.МесяцНачисления МЕЖДУ &НачалоПериода И &КонецПериода
	|		И НачислениеЗарплаты.Проведен
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Организации.Организация,
	|		ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.НачислениеЗарплаты),
	|		ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено),
	|		ИСТИНА,
	|		НЕОПРЕДЕЛЕНО
	|	ИЗ
	|		Организации КАК Организации
	|	ГДЕ
	|		НЕ &НачислениеЗарплаты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Организации.Организация,
	|		ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.НачислениеНДС),
	|		ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено),
	|		ИСТИНА,
	|		НЕОПРЕДЕЛЕНО
	|	ИЗ
	|		Организации КАК Организации
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НачислениеОценочныхОбязательствПоОтпускам.Организация,
	|		ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.НачислениеРезерваОтпусков),
	|		ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено),
	|		ИСТИНА,
	|		НачислениеОценочныхОбязательствПоОтпускам.Ссылка
	|	ИЗ
	|		Документ.НачислениеОценочныхОбязательствПоОтпускам КАК НачислениеОценочныхОбязательствПоОтпускам
	|	ГДЕ
	|		ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.НачислениеРезерваОтпусков) В
	|				(ВЫБРАТЬ
	|					ВидыОпераций.ВидОперации
	|				ИЗ
	|					ВидыОпераций)
	|		И НачислениеОценочныхОбязательствПоОтпускам.Организация В
	|				(ВЫБРАТЬ
	|					Организации.Организация
	|				ИЗ
	|					Организации)
	|		И НачислениеОценочныхОбязательствПоОтпускам.ПериодРегистрации МЕЖДУ &НачалоПериода И &КонецПериода
	|		И НачислениеОценочныхОбязательствПоОтпускам.Проведен) КАК ДанныеДокументов
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокументов.Организация,
	|	ДанныеДокументов.ВидОперации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДанныеДокументов.Организация,
	|	ДанныеДокументов.ВидОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокументов.Организация КАК Организация,
	|	ДанныеДокументов.ВидОперации КАК ВидОперации,
	|	ДанныеДокументов.Состояние,
	|	ДанныеДокументов.РучнаяКорректировка,
	|	ВЫБОР
	|		КОГДА УстаревшиеОперации.Организация ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Устарела,
	|	ДанныеДокументов.Ссылка
	|ПОМЕСТИТЬ ДанныеРегламентныхОпераций
	|ИЗ
	|	ВТ_ДанныеДокументов КАК ДанныеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ УстаревшиеОперации КАК УстаревшиеОперации
	|		ПО ДанныеДокументов.Организация = УстаревшиеОперации.Организация
	|			И ДанныеДокументов.ВидОперации = УстаревшиеОперации.ВидОперации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ВидОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ДанныеДокументовРегламентнаяОперация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ДанныеДокументов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ УстаревшиеОперации";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВидыОпераций(МенеджерВременныхТаблиц, Знач ВидыОпераций = Неопределено) Экспорт
	
	Если ВидыОпераций = Неопределено Тогда
		ВидыОпераций = ВсеВидыОпераций();
	КонецЕсли;
	
	// Поместим ВидыОпераций во временную таблицу
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВидыОпераций", ВидыОпераций);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыОпераций.ВидОперации КАК ВидОперации,
	|	ВидыОпераций.НомерГруппы КАК НомерГруппы,
	|	ВидыОпераций.ПоОрганизацииВЦелом КАК ПоОрганизацииВЦелом,
	|	ВидыОпераций.ДокументРегламентнаяОперация КАК ДокументРегламентнаяОперация
	|ПОМЕСТИТЬ ВидыОпераций
	|ИЗ
	|	&ВидыОпераций КАК ВидыОпераций
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидОперации";
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьОперацииКВыполнению(МенеджерВременныхТаблиц, ВидыОпераций, Период, Организация)
	
	ВыполнитьБезусловно = Новый ТаблицаЗначений; // Потому что потом помещать во временную таблицу
	ВыполнитьБезусловно.Колонки.Добавить("ВидОперации",           Новый ОписаниеТипов("ПеречислениеСсылка.ВидыРегламентныхОпераций"));
	ВыполнитьБезусловно.Колонки.Добавить("ПоГоловнойОрганизации", Новый ОписаниеТипов("Булево"));
	
	ЗапросыДляОбъединения = Новый Массив;
	ВременныеТаблицы      = Новый Соответствие;
	
	// Соберем данные о регламентных операциях для подготовки текстов запросов
	Для Каждого СтрокаВидОперации Из ВидыОпераций Цикл
		
		ВидОперации = СтрокаВидОперации.ВидОперации;
		
		Условие = УсловиеВыполненияРегламентнойОперации(ВидОперации, Организация, Период);
		
		Если Условие = Ложь Тогда
			
			Продолжить;
			
		ИначеЕсли Условие = Истина Тогда
			
			НоваяСтрока = ВыполнитьБезусловно.Добавить();
			НоваяСтрока.ВидОперации           = ВидОперации;
			НоваяСтрока.ПоГоловнойОрганизации = ГруппаВыполняетсяПоОрганизацииВЦелом(ГруппаПоВидуОперации(ВидОперации));
			
		Иначе
			
			Для Каждого ТекстЗапроса Из Условие Цикл
				Если ПустаяСтрока(ТекстЗапроса.Ключ) Тогда
					ЗапросыДляОбъединения.Добавить(ТекстЗапроса.Значение);
				Иначе
					ВременныеТаблицы.Вставить(ТекстЗапроса.Ключ, ТекстЗапроса.Значение);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
			
	КонецЦикла;
	
	// Подготовим текст запроса, который помещает во временную таблицу список операций, выполняемых безусловно
	ВременныеТаблицы.Вставить(
	"ВТ_ВыполнитьБезусловно",
	"ВЫБРАТЬ
	|	ВыполнитьБезусловно.ВидОперации КАК ВидОперации,
	|	ВыполнитьБезусловно.ПоГоловнойОрганизации КАК ПоГоловнойОрганизации
	|ПОМЕСТИТЬ ВТ_ВыполнитьБезусловно
	|ИЗ
	|	&ВыполнитьБезусловно КАК ВыполнитьБезусловно
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПоГоловнойОрганизации");
	
	// Подготовим текст запроса, который получит список операций, выполняемых безусловно, в разрезе организаций
	ЗапросыДляОбъединения.Добавить(
	"ВЫБРАТЬ
	|	Организации.Организация КАК Организация,
	|	ВыполнитьБезусловно.ВидОперации КАК ВидОперации
	|ИЗ
	|	ВТ_ВыполнитьБезусловно КАК ВыполнитьБезусловно,
	|	Организации КАК Организации
	|ГДЕ
	|	НЕ ВыполнитьБезусловно.ПоГоловнойОрганизации
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	&ГоловнаяОрганизация,
	|	ВыполнитьБезусловно.ВидОперации
	|ИЗ
	|	ВТ_ВыполнитьБезусловно КАК ВыполнитьБезусловно
	|ГДЕ
	|	ВыполнитьБезусловно.ПоГоловнойОрганизации");
	
	// Скомпонуем текст запроса, который поместит во временную таблицу полный список операций к выполнению в разрезе организаций
	ЗапросыДляОбъединения.Вставить(
	0, 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.ПустаяСсылка) КАК ВидОперации
	|ПОМЕСТИТЬ ОперацииКВыполнению
	|ГДЕ
	|	ЛОЖЬ");
	
	ТекстЗапроса = "";
	// Создание временных таблиц
	Для Каждого ВременнаяТаблица Из ВременныеТаблицы Цикл
		ТекстЗапроса = ТекстЗапроса + ВременнаяТаблица.Значение + ";" + Символы.ПС;
	КонецЦикла;
	// Выборка данных
	ТекстЗапросаВыборкиДанных = СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(
		ЗапросыДляОбъединения,
		Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС);
	ТекстЗапроса = ТекстЗапроса + ТекстЗапросаВыборкиДанных;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВыполнитьБезусловно", ВыполнитьБезусловно);
	Запрос.УстановитьПараметр("НачалоПериода",       НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода",        КонецМесяца(Период));
	Запрос.УстановитьПараметр("НачалоГода",          НачалоГода(Период));
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", БухгалтерскийУчетПереопределяемый.ГоловнаяОрганизация(Организация));
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	
КонецПроцедуры

Функция СоздатьДетальныйСтатусПредыдущихГрупп(МенеджерВременныхТаблиц, Период, Организация, ВидОперации)
	
	НомерГруппы = ГруппаПоВидуОперации(ВидОперации);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Если ГруппаВыполняетсяПоОрганизацииВЦелом(НомерГруппы) Тогда
		// Должны быть выполнены операции предыдущих групп по всем организациям
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Организации.Ссылка КАК Организация
		|ПОМЕСТИТЬ Организации
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ГоловнаяОрганизация = &Организация
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация";
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ
		|	&Организация КАК Организация
		|ПОМЕСТИТЬ Организации
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация";
	КонецЕсли;
	Запрос.Выполнить();
	
	// Отберем операции предыдущих групп
	ВсеВидыОпераций = ВсеВидыОпераций();
	ВидыОпераций = ВсеВидыОпераций.СкопироватьКолонки();
	Для Каждого ОписаниеВидОперации Из ВсеВидыОпераций Цикл
		Если ОписаниеВидОперации.НомерГруппы < НомерГруппы Тогда
			ЗаполнитьЗначенияСвойств(ВидыОпераций.Добавить(), ОписаниеВидОперации);
		КонецЕсли;
	КонецЦикла;
	
	Если ВидыОпераций.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СоздатьДетальныйСтатусЗакрытияМесяца(
		МенеджерВременныхТаблиц,
		Период,
		Организация,
		ВидыОпераций);
		
	Возврат Истина;
		
КонецФункции

// УСЛОВИЯ ВЫПОЛНЕНИЯ РЕГЛАМЕНТНЫХ ОПЕРАЦИЙ

// Возвращает 
// - Истина, если операцию следует выполнять
// - Ложь, если операцию не надо выполнять
// - Соответствие - Содержит тексты запросов, выполнение которых позволит понять, надо ее выполнять или нет.
// Ключи соответствия:
// - "" (обязательный) - Строка - текст запроса, который выбирает два поля: 
//   Организация и ВидОперации (именно в таком порядке, чтобы можно было объединять)
// - <ИмяВременнойТаблицы> (опциональные) - Строка - тексты запросов, создающих временные таблицы для первого запроса
//   (имена временных таблиц нужны, потому что одни и те же временные таблицы могут использоваться для проверки разных регл. операций)
Функция УсловиеВыполненияРегламентнойОперации(ВидОперации, Организация, Период)
	
	// "Простые" условия (Истина и Ложь) возвращаем сразу,
	// сложное (соответствие) - в конце функции
	
	Периодичность = ПериодичностьРегламентнойОперации(ВидОперации);
	Если Периодичность = Перечисления.Периодичность.Квартал
		И Месяц(Период)%3 <> 0 Тогда
		Возврат Ложь;
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год
		И Месяц(Период) <> 12 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстЗапроса = "";
	ВременныеТаблицы = Новый Структура;
	
	// ГРУППА 1
	
	Если ВидОперации = Перечисления.ВидыРегламентныхОпераций.НачислениеЗарплаты Тогда
		
		Если НЕ УчетЗарплаты.ИспользуетсяПодсистемаУчетаЗарплатыИКадров() Тогда
			Возврат Ложь;
		Иначе
			Возврат Не ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии") 
			Или УчетЗарплаты.НеобходимоНачислятьЗарплату(Организация, Период);
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.НачислениеРезерваОтпусков Тогда
		
		Если НЕ УчетЗарплаты.ИспользуетсяПодсистемаУчетаЗарплатыИКадров() Тогда
			Возврат Ложь;
		Иначе
			Возврат УчетЗарплаты.ВедетсяУчетРезервовОтпусков(Организация, Период);
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.НачислениеНДС Тогда
		
		// Периодичность задана в ПериодичностьРегламентнойОперации()
		
		Возврат (УчетнаяПолитика.СистемаНалогообложения(Организация, Период) = Перечисления.СистемыНалогообложения.Общая);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.АмортизацияИИзносОС Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	АмортизацияОС.Организация КАК Организация,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.АмортизацияИИзносОС) КАК ВидОперации
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&НачалоПериода,
		|			Счет В
		|				(ВЫБРАТЬ
		|					СчетаОсновныхСредств.Счет
		|				ИЗ
		|					СчетаОсновныхСредств),
		|			,
		|			Организация В
		|				(ВЫБРАТЬ
		|					Организации.Организация
		|				ИЗ
		|					Организации)) КАК АмортизацияОС
		|ГДЕ
		|	АмортизацияОС.СуммаОстаток <> 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	АмортизацияОС.Организация,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.АмортизацияИИзносОС)
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&НачалоПериода,
		|			Счет В
		|				(ВЫБРАТЬ
		|					СчетаОсновныхСредств.Счет
		|				ИЗ
		|					СчетаОсновныхСредств),
		|			,
		|			Организация В
		|				(ВЫБРАТЬ
		|					Организации.Организация
		|				ИЗ
		|					Организации)) КАК АмортизацияОС
		|ГДЕ
		|	АмортизацияОС.СуммаНУОстаток <> 0";
		
		ВременныеТаблицы.Вставить(
		"СчетаОсновныхСредств",
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет
		|ПОМЕСТИТЬ СчетаОсновныхСредств
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОсновныеСредства), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДоходныеВложенияВ_МЦ))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Счет");
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.АмортизацияНМАИсписаниеРасходовПоНИОКР Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	АмортизацияНМА.Организация,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.АмортизацияНМАИсписаниеРасходовПоНИОКР)
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&НачалоПериода,
		|			Счет В
		|				(ВЫБРАТЬ
		|					СчетаНематериальныхАктивов.Счет
		|				ИЗ
		|					СчетаНематериальныхАктивов),
		|			,
		|			Организация В
		|				(ВЫБРАТЬ
		|					Организации.Организация
		|				ИЗ
		|					Организации)) КАК АмортизацияНМА
		|ГДЕ
		|	АмортизацияНМА.СуммаОстаток <> 0";
		
		ВременныеТаблицы.Вставить(
		"СчетаНематериальныхАктивов",
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет
		|ПОМЕСТИТЬ СчетаНематериальныхАктивов
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НематериальныеАктивы), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.АмортизацияНематериальныхАктивов))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Счет");
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.ПогашениеСтоимостиСпецодеждыИспецоснасткиВЭксплуатации Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПогашениеСтоимостиСпецодежды.Организация,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.ПогашениеСтоимостиСпецодеждыИспецоснасткиВЭксплуатации)
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&НачалоПериода,
		|			Счет В
		|				(ВЫБРАТЬ
		|					СчетаСпецодежды.Счет
		|				ИЗ
		|					СчетаСпецодежды),
		|			,
		|			Организация В
		|				(ВЫБРАТЬ
		|					Организации.Организация
		|				ИЗ
		|					Организации)) КАК ПогашениеСтоимостиСпецодежды
		|ГДЕ
		|	ПогашениеСтоимостиСпецодежды.СуммаОстаток <> 0";
		
		ВременныеТаблицы.Вставить(
		"СчетаСпецодежды",
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет
		|ПОМЕСТИТЬ СчетаСпецодежды
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СпецоснасткаИСпецодеждаНаСкладе), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СпецоснасткаИСпецодеждаВЭксплуатации))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Счет");
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.ПереоценкаВалютныхСредств Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПереоценкаВалютныхСредств.Организация КАК Организация,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.ПереоценкаВалютныхСредств) КАК ВидОперации
		|ИЗ
		|	(ВЫБРАТЬ
		|		Остатки.Организация КАК Организация,
		|		Остатки.Счет КАК Счет,
		|		Остатки.Подразделение КАК Подразделение,
		|		Остатки.Субконто1 КАК Субконто1,
		|		Остатки.Субконто2 КАК Субконто2,
		|		Остатки.Субконто3 КАК Субконто3,
		|		Остатки.СуммаОстатокДт КАК СуммаОстатокДт,
		|		Остатки.СуммаОстатокКт КАК СуммаОстатокКт
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Остатки(
		|				ДОБАВИТЬКДАТЕ(&КонецПериода, СЕКУНДА, 1),
		|				Счет.Валютный,
		|				,
		|				Организация В
		|					(ВЫБРАТЬ
		|						Организации.Организация
		|					ИЗ
		|						Организации)) КАК Остатки) КАК ПереоценкаВалютныхСредств";
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетТорговойНаценкиПоПроданнымТоварам Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РасчетТорговойНаценки.Организация,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.РасчетТорговойНаценкиПоПроданнымТоварам)
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			,
		|			Счет В
		|				(ВЫБРАТЬ
		|					СчетаТоварыВРозничнойТорговле.Счет
		|				ИЗ
		|					СчетаТоварыВРозничнойТорговле),
		|			,
		|			Организация В
		|				(ВЫБРАТЬ
		|					Организации.Организация
		|				ИЗ
		|					Организации)) КАК РасчетТорговойНаценки
		|ГДЕ
		|	РасчетТорговойНаценки.СуммаОборотКт <> 0";
		
		ВременныеТаблицы.Вставить(
		"СчетаТоварыВРозничнойТорговле",
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет
		|ПОМЕСТИТЬ СчетаТоварыВРозничнойТорговле
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Счет");
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчета97 Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗакрытиеСчета97.Организация,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.ЗакрытиеСчета97)
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			,
		|			Счет В
		|				(ВЫБРАТЬ
		|					СчетаРасходыБудущихПериодов.Счет
		|				ИЗ
		|					СчетаРасходыБудущихПериодов),
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов),
		|			Организация В
		|					(ВЫБРАТЬ
		|						Организации.Организация
		|					ИЗ
		|						Организации)
		|				И НЕ Субконто1 В
		|						(ВЫБРАТЬ
		|							УбыткиПрошлыхЛет.СтатьяРБП
		|						ИЗ
		|							УбыткиПрошлыхЛет)) КАК ЗакрытиеСчета97
		|ГДЕ
		|	НЕ(ЗакрытиеСчета97.СуммаКонечныйОстатокДт = 0
		|				И ЗакрытиеСчета97.СуммаНУКонечныйОстатокДт = 0
		|				И ЗакрытиеСчета97.СуммаПРКонечныйОстатокДт = 0
		|				И ЗакрытиеСчета97.СуммаОборотКт = 0
		|				И ЗакрытиеСчета97.СуммаНУОборотКт = 0
		|				И ЗакрытиеСчета97.СуммаПРОборотКт = 0)";
		
		ДобавитьВременныеТаблицыРБП(ВременныеТаблицы);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.КорректировкаСтоимостиНоменклатуры Тогда
		
		Возврат Истина;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетНалогаНаИмущество Тогда
		
		Если Период < '20140101' Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ОСНО = УчетнаяПолитика.СистемаНалогообложения(Организация, Период) = Перечисления.СистемыНалогообложения.Общая;
		
		Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация)
			И (ОСНО ИЛИ Период >= '20140701') Тогда
			
			Если Месяц(Период) = 12
				ИЛИ (Месяц(Период)%3 = 0 И РасчетИмущественныхНалогов.УплачиваютсяАвансыПоНалогуНаИмущество(Организация, Период)) Тогда
				
				Если ОСНО Тогда
					
					ТекстЗапроса =
					"ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	АмортизацияОС.Организация КАК Организация,
					|	ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.РасчетНалогаНаИмущество) КАК ВидОперации
					|ИЗ
					|	РегистрБухгалтерии.Хозрасчетный.Остатки(
					|			НАЧАЛОПЕРИОДА(&НачалоПериода, ГОД),
					|			Счет В
					|				(ВЫБРАТЬ
					|					СчетаОсновныхСредств.Счет
					|				ИЗ
					|					СчетаОсновныхСредств),
					|			,
					|			Организация В
					|				(ВЫБРАТЬ
					|					Организации.Организация
					|				ИЗ
					|					Организации)) КАК АмортизацияОС
					|ГДЕ
					|	АмортизацияОС.СуммаОстаток <> 0
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	ХозрасчетныйОбороты.Организация,
					|	ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.РасчетНалогаНаИмущество)
					|ИЗ
					|	РегистрБухгалтерии.Хозрасчетный.Обороты(
					|			НАЧАЛОПЕРИОДА(&НачалоПериода, ГОД),
					|			&КонецПериода,
					|			,
					|			Счет В
					|				(ВЫБРАТЬ
					|					СчетаОсновныхСредств.Счет
					|				ИЗ
					|					СчетаОсновныхСредств),
					|			,
					|			Организация В
					|				(ВЫБРАТЬ
					|					Организации.Организация
					|				ИЗ
					|					Организации),
					|			,
					|			) КАК ХозрасчетныйОбороты
					|ГДЕ
					|	ХозрасчетныйОбороты.СуммаОборот <> 0
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствамСрезПоследних.Организация,
					|	ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.РасчетНалогаНаИмущество)
					|ИЗ
					|	РегистрСведений.СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.СрезПоследних(
					|			&КонецПериода,
					|			Организация В
					|					(ВЫБРАТЬ
					|						Организации.Организация
					|					ИЗ
					|						Организации)
					|				И НалоговаяБаза = ЗНАЧЕНИЕ(Перечисление.НалоговаяБазаПоНалогуНаИмущество.КадастроваяСтоимость)) КАК СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствамСрезПоследних";
					
					ВременныеТаблицы.Вставить(
					"СчетаОсновныхСредств",
					"ВЫБРАТЬ
					|	Хозрасчетный.Ссылка КАК Счет
					|ПОМЕСТИТЬ СчетаОсновныхСредств
					|ИЗ
					|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
					|ГДЕ
					|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОсновныеСредства), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДоходныеВложенияВ_МЦ))
					|
					|ИНДЕКСИРОВАТЬ ПО
					|	Счет");
					
				Иначе
					
					ТекстЗапроса = 
					"ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствамСрезПоследних.Организация,
					|	ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.РасчетНалогаНаИмущество) КАК ВидОперации
					|ИЗ
					|	РегистрСведений.СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.СрезПоследних(
					|			&КонецПериода,
					|			Организация В
					|					(ВЫБРАТЬ
					|						Организации.Организация
					|					ИЗ
					|						Организации)
					|				И НалоговаяБаза = ЗНАЧЕНИЕ(Перечисление.НалоговаяБазаПоНалогуНаИмущество.КадастроваяСтоимость)) КАК СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствамСрезПоследних";
					
				КонецЕсли;
			Иначе
				Возврат Ложь;
			КонецЕсли;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетТранспортногоНалога Тогда
		
		Если Период < '20140101' ИЛИ НЕ ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если Месяц(Период) = 12 Тогда
			ЗаменитьНалоговыйПериодВЗапросе = Ложь;
		ИначеЕсли Месяц(Период)%3 = 0 И РасчетИмущественныхНалогов.УплачиваютсяАвансыПоТранспортномуНалогу(Организация, Период) Тогда
			ЗаменитьНалоговыйПериодВЗапросе = Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РегистрацияТранспортныхСредствСрезПоследних.Организация КАК Организация,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.РасчетТранспортногоНалога) КАК ВидОперации
		|ИЗ
		|	РегистрСведений.РегистрацияТранспортныхСредств.СрезПоследних(
		|			ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&НачалоПериода, ГОД), СЕКУНДА, -1),
		|			Организация В
		|					(ВЫБРАТЬ
		|						Организации.Организация
		|					ИЗ
		|						Организации)
		|				И ВключатьВНалоговуюБазу) КАК РегистрацияТранспортныхСредствСрезПоследних
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РегистрацияТранспортныхСредств.Организация,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.РасчетТранспортногоНалога)
		|ИЗ
		|	РегистрСведений.РегистрацияТранспортныхСредств КАК РегистрацияТранспортныхСредств
		|ГДЕ
		|	РегистрацияТранспортныхСредств.ВключатьВНалоговуюБазу
		|	И РегистрацияТранспортныхСредств.Период МЕЖДУ НАЧАЛОПЕРИОДА(&НачалоПериода, ГОД) И &КонецПериода
		|	И РегистрацияТранспортныхСредств.Организация В
		|			(ВЫБРАТЬ
		|				Организации.Организация
		|			ИЗ
		|				Организации)";
		
		Если ЗаменитьНалоговыйПериодВЗапросе Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ГОД", "КВАРТАЛ");
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетЗемельногоНалога Тогда
		
		Если Период < '20140101' 
			ИЛИ (Период >= '20150101' И НЕ ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация)) Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Если Месяц(Период) = 12 Тогда
			ЗаменитьНалоговыйПериодВЗапросе = Ложь;
		ИначеЕсли (Месяц(Период)%3 = 0 И РасчетИмущественныхНалогов.УплачиваютсяАвансыПоЗемельномуНалогу(Организация, Период)) Тогда
			ЗаменитьНалоговыйПериодВЗапросе = Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РегистрацияЗемельныхУчастковСрезПоследних.Организация КАК Организация,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.РасчетЗемельногоНалога) КАК ВидОперации
		|ИЗ
		|	РегистрСведений.РегистрацияЗемельныхУчастков.СрезПоследних(
		|			ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&НачалоПериода, ГОД), СЕКУНДА, -1),
		|			Организация В
		|					(ВЫБРАТЬ
		|						Организации.Организация
		|					ИЗ
		|						Организации)
		|				И ВключатьВНалоговуюБазу) КАК РегистрацияЗемельныхУчастковСрезПоследних
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РегистрацияЗемельныхУчастков.Организация,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.РасчетЗемельногоНалога)
		|ИЗ
		|	РегистрСведений.РегистрацияЗемельныхУчастков КАК РегистрацияЗемельныхУчастков
		|ГДЕ
		|	РегистрацияЗемельныхУчастков.ВключатьВНалоговуюБазу
		|	И РегистрацияЗемельныхУчастков.Период МЕЖДУ НАЧАЛОПЕРИОДА(&НачалоПериода, ГОД) И &КонецПериода
		|	И РегистрацияЗемельныхУчастков.Организация В
		|			(ВЫБРАТЬ
		|				Организации.Организация
		|			ИЗ
		|				Организации)";
		
		Если ЗаменитьНалоговыйПериодВЗапросе Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ГОД", "КВАРТАЛ");
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.ИсключениеНЗПИзСоставаМатериальныхРасходовДляУСН Тогда
		
		Возврат (УчетнаяПолитика.СистемаНалогообложения(Организация, Период) = Перечисления.СистемыНалогообложения.Упрощенная)
			И УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Организация, Период)
			И (УчетнаяПолитика.ПорядокПризнанияМатериальныхРасходов(Организация, Период) = Перечисления.ПорядокПризнанияМатериальныхРасходов.УменьшатьРасходыНаОстатокНЗП);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.ПризнаниеРасходовНаПриобретениеОСДляУСН Тогда
		
		// Периодичность задана в ПериодичностьРегламентнойОперации()
		
		Если НЕ ((УчетнаяПолитика.СистемаНалогообложения(Организация, Период) = Перечисления.СистемыНалогообложения.Упрощенная)
			И УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Организация, Период)) Тогда
			Возврат Ложь;
		Иначе
			
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ОСНалоговыйУчетУСН.Организация КАК Организация,
			|	ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.ПризнаниеРасходовНаПриобретениеОСДляУСН) КАК ВидОперации
			|ИЗ
			|	РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчетУСН.СрезПоследних(
			|			ДОБАВИТЬКДАТЕ(&КонецПериода, СЕКУНДА, 1),
			|			Организация В
			|				(ВЫБРАТЬ
			|					Организации.Организация
			|				ИЗ
			|					Организации)) КАК ОСНалоговыйУчетУСН
			|ГДЕ
			|	ОСНалоговыйУчетУСН.Активность";
			
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.ПризнаниеРасходовНаПриобретениеНМАДляУСН Тогда
		
		// Периодичность задана в ПериодичностьРегламентнойОперации()
		
		Если НЕ ((УчетнаяПолитика.СистемаНалогообложения(Организация, Период) = Перечисления.СистемыНалогообложения.Упрощенная)
			И УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Организация, Период)) Тогда
			Возврат Ложь;
		Иначе
			
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	НМАНалоговыйУчетУСН.Организация,
			|	ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.ПризнаниеРасходовНаПриобретениеНМАДляУСН)
			|ИЗ
			|	РегистрСведений.ПервоначальныеСведенияНМАНалоговыйУчетУСН.СрезПоследних(
			|			ДОБАВИТЬКДАТЕ(&КонецПериода, СЕКУНДА, 1),
			|			Организация В
			|					(ВЫБРАТЬ
			|						Организации.Организация
			|					ИЗ
			|						Организации)) КАК НМАНалоговыйУчетУСН
			|ГДЕ
			|	НМАНалоговыйУчетУСН.Активность";
			
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.СписаниеДопРасходовДляУСН Тогда
		
		// Периодичность задана в ПериодичностьРегламентнойОперации()
		
		Если НЕ ((УчетнаяПолитика.СистемаНалогообложения(Организация, Период) = Перечисления.СистемыНалогообложения.Упрощенная)
			И УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Организация, Период)) Тогда
			Возврат Ложь;
			
		Иначе
			
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	РасходыПриУСН.Организация,
			|	ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.СписаниеДопРасходовДляУСН)
			|ИЗ
			|	РегистрНакопления.РасходыПриУСН.Остатки(
			|			ДОБАВИТЬКДАТЕ(&КонецПериода, СЕКУНДА, 1),
			|			Организация В
			|					(ВЫБРАТЬ
			|						Организации.Организация
			|					ИЗ
			|						Организации)
			|				И ВидРасхода = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ДопРасходы)) КАК РасходыПриУСН
			|ГДЕ
			|	РасходыПриУСН.СуммаОстаток <> 0";
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.СписаниеТаможенныхПлатежейДляУСН Тогда
		
		// Периодичность задана в ПериодичностьРегламентнойОперации()
		
		Если НЕ ((УчетнаяПолитика.СистемаНалогообложения(Организация, Период) = Перечисления.СистемыНалогообложения.Упрощенная)
			И УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Организация, Период)) Тогда
			Возврат Ложь;
		Иначе
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	РасходыПриУСН.Организация,
			|	ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.СписаниеТаможенныхПлатежейДляУСН)
			|ИЗ
			|	РегистрНакопления.РасходыПриУСН.Остатки(
			|			ДОБАВИТЬКДАТЕ(&КонецПериода, СЕКУНДА, 1),
			|			Организация В
			|					(ВЫБРАТЬ
			|						Организации.Организация
			|					ИЗ
			|						Организации)
			|				И ВидРасхода = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовУСН.ТаможенныеПлатежи)) КАК РасходыПриУСН
			|ГДЕ
			|	РасходыПриУСН.СуммаОстаток <> 0";
		КонецЕсли;
		
	// ГРУППА 2
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетДолейСписанияКосвенныхРасходов Тогда
		
		Возврат Истина;
		
	// ГРУППА 3
	
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчетов20_23_25_26 Тогда
		
		Если БухгалтерскийУчетПереопределяемый.ВедетсяПроизводственнаяДеятельность(Организация, Период) Тогда
			
			Возврат Истина;
			
		Иначе
			
			ТекстЗапроса =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Хозрасчетный.Организация КАК Организация,
			|	ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.ЗакрытиеСчетов20_23_25_26) КАК ВидОперации
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
			|ГДЕ
			|	Хозрасчетный.Активность
			|	И Хозрасчетный.Период МЕЖДУ &НачалоПериода И &КонецПериода
			|	И Хозрасчетный.СчетДт В
			|			(ВЫБРАТЬ
			|				СчетаЗатратПоОсновнойДеятельности.Счет
			|			ИЗ
			|				СчетаЗатратПоОсновнойДеятельности)
			|	И Хозрасчетный.Организация В
			|			(ВЫБРАТЬ
			|				Организации.Организация
			|			ИЗ
			|				Организации)
			|	И Хозрасчетный.Сумма > 0
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	Хозрасчетный.Организация,
			|	ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.ЗакрытиеСчетов20_23_25_26)
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
			|ГДЕ
			|	Хозрасчетный.Активность
			|	И Хозрасчетный.Период МЕЖДУ &НачалоПериода И &КонецПериода
			|	И Хозрасчетный.СчетКт В
			|			(ВЫБРАТЬ
			|				СчетаЗатратПоОсновнойДеятельности.Счет
			|			ИЗ
			|				СчетаЗатратПоОсновнойДеятельности)
			|	И Хозрасчетный.Организация В
			|			(ВЫБРАТЬ
			|				Организации.Организация
			|			ИЗ
			|				Организации)
			|	И Хозрасчетный.Сумма > 0";
			
			// См. УчетЗатрат.ПредопределенныеСчетаРасходов()
			ВременныеТаблицы.Вставить(
			"СчетаЗатратПоОсновнойДеятельности",
			"ВЫБРАТЬ
			|	Хозрасчетный.Ссылка КАК Счет
			|ПОМЕСТИТЬ СчетаЗатратПоОсновнойДеятельности
			|ИЗ
			|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
			|ГДЕ
			|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОсновноеПроизводство_), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВспомогательныеПроизводства), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОбщепроизводственныеРасходы), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОбщехозяйственныеРасходы))
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Счет");
			
		КонецЕсли;
	
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчета44 Тогда
		
		Возврат Истина;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетРезервовПоСомнительнымДолгам Тогда
		
		 Возврат УчетнаяПолитика.ФормироватьРезервыПоСомнительнымДолгамБУ(Организация, Период)
			Или УчетнаяПолитика.ФормироватьРезервыПоСомнительнымДолгамНУ(Организация, Период);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.РаспределениеРасходовПоВидамДеятельностиДляУСН Тогда
		
		// Периодичность задана в ПериодичностьРегламентнойОперации()
		
		Если НЕ ((УчетнаяПолитика.СистемаНалогообложения(Организация, Период) = Перечисления.СистемыНалогообложения.Упрощенная)
			И УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Организация, Период)) Тогда
			Возврат Ложь;
			
		ИначеЕсли НЕ ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация)
			И УчетнаяПолитика.ПлательщикЕНВД(Организация, Период) Тогда
			// У ИП на УСН страховые взносы начисляются ежеквартально. При совмещении с ЕНВД возникают распределяемые расходы.
			Возврат Истина;
			
		Иначе
			
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	РасходыПриУСН.Организация КАК Организация,
			|	ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.РаспределениеРасходовПоВидамДеятельностиДляУСН) КАК ВидОперации
			|ИЗ
			|	РегистрНакопления.РасходыПриУСН.Остатки(
			|			ДОБАВИТЬКДАТЕ(&КонецПериода, СЕКУНДА, 1),
			|			Организация В
			|					(ВЫБРАТЬ
			|						Организации.Организация
			|					ИЗ
			|						Организации)
			|				И СтатусыОплатыРасходовУСН = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходовУСН.НеРаспределено)) КАК РасходыПриУСН
			|ГДЕ
			|	РасходыПриУСН.СуммаОстаток <> 0";
			
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.РаспределениеРасходовПоВидамДеятельностиДляИП Тогда
		
		Возврат УчетнаяПолитика.ПлательщикНДФЛ(Организация, Период);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.ВключениеАвансовВПрочиеДоходыДляИП Тогда
		
		Возврат УчетнаяПолитика.ПлательщикНДФЛ(Организация, Период); // Периодичность задана в ПериодичностьРегламентнойОперации()
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.НачислениеСтраховыхВзносовИП Тогда
		
		Если НачалоДня(Период) >= '20140101' И НЕ ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация) Тогда
			
			Если УчетнаяПолитика.ПлательщикНДФЛ(Организация, Период) Тогда
				Возврат (Месяц(Период) = 12);
			Иначе
				Возврат (Месяц(Период)%3 = 0); // Раз в квартал
			КонецЕсли;
			
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетРасходовУменьшающихНалогУСН Тогда
		
		Возврат УчетнаяПолитика.ПрименяетсяУСНДоходы(Организация, Период); // периодичность задана в ПериодичностьРегламентнойОперации()
		
	// ГРУППА 4
	
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчетов90_91 Тогда
		
		Возврат Истина;
	
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетНалогаНаПрибыль Тогда
		
		Возврат УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, Период);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетНалогаУСН Тогда
		
		Возврат УчетнаяПолитика.ПрименяетсяУСН(Организация, Период); // Периодичность задана в ПериодичностьРегламентнойОперации()
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.СписаниеУбытковПрошлыхЛет Тогда
		
		Если НЕ УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, Период) Тогда
			
			Возврат Ложь;
			
		Иначе
			
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	УбыткиПрошлыхЛет.Организация КАК Организация,
			|	ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.СписаниеУбытковПрошлыхЛет) КАК ВидОперации
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
			|			&НачалоГода,
			|			&КонецПериода,
			|			,
			|			,
			|			Счет В
			|				(ВЫБРАТЬ
			|					СчетаРасходыБудущихПериодов.Счет
			|				ИЗ
			|					СчетаРасходыБудущихПериодов),
			|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов),
			|			Организация = &ГоловнаяОрганизация
			|				И Субконто1 В
			|					(ВЫБРАТЬ
			|						УбыткиПрошлыхЛет.СтатьяРБП
			|					ИЗ
			|						УбыткиПрошлыхЛет)) КАК УбыткиПрошлыхЛет
			|ГДЕ
			|	УбыткиПрошлыхЛет.СуммаНУНачальныйОстатокДт > 0";
			
			ДобавитьВременныеТаблицыРБП(ВременныеТаблицы);
			
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.РеформацияБаланса Тогда
		
		Возврат Истина; // Периодичность задана в ПериодичностьРегламентнойОперации()
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
	// Вернем сложное условие
	
	Условие = Новый Соответствие;
	Условие.Вставить("", ТекстЗапроса);
	Для Каждого ВременнаяТаблица Из ВременныеТаблицы Цикл
		Условие.Вставить(ВременнаяТаблица.Ключ, ВременнаяТаблица.Значение);
	КонецЦикла;
	Возврат Условие;
	
КонецФункции

Процедура ДобавитьВременныеТаблицыРБП(ВременныеТаблицы)

	ВременныеТаблицы.Вставить(
	"СчетаРасходыБудущихПериодов",
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ СчетаРасходыБудущихПериодов
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасходыБудущихПериодов), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПлатежиПоДобровольномуСтрахованиюРаботников), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПлатежиПоПрочимВидамСтрахования))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет");
	
	ВременныеТаблицы.Вставить("УбыткиПрошлыхЛет",
	"ВЫБРАТЬ
	|	РасходыБудущихПериодов.Ссылка КАК СтатьяРБП
	|ПОМЕСТИТЬ УбыткиПрошлыхЛет
	|ИЗ
	|	Справочник.РасходыБудущихПериодов КАК РасходыБудущихПериодов
	|ГДЕ
	|	РасходыБудущихПериодов.ВидРБП = ЗНАЧЕНИЕ(Перечисление.ВидыРБП.УбыткиПрошлыхЛет)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтатьяРБП");
	
КонецПроцедуры

// ЕДИНСТВО ИНТЕРФЕЙСА

// Организацию следует передавать, если эта организация - не та, в контексте которой выявлена ошибка.
Функция ТекстОшибкиРаноВыполнятьОперацию(ВидОперации, Период, Устарела, Организация = Неопределено) Экспорт
	
	ПараметрыТекста = Новый Структура;
	ПараметрыТекста.Вставить("Период",      Формат(Период, "ДФ='MMММ yyyy ""г.""'"));
	ПараметрыТекста.Вставить("Организация", Организация);
	
	Если ВидОперации = Перечисления.ВидыРегламентныхОпераций.НачислениеЗарплаты Тогда
		ПараметрыТекста.Вставить("ВидОперации", ПредставлениеОперацииНачислениеЗарплаты(Организация));
	Иначе
		ПараметрыТекста.Вставить("ВидОперации", ВидОперации);
	КонецЕсли;
	
	Если Устарела Тогда
		
		Если ЗначениеЗаполнено(Организация) Тогда
			ШаблонТекста = НСтр("ru = 'Нарушена последовательность регламентных операций.
				|Ожидается изменение результатов выполнения операции ""[ВидОперации]"" за [Период] по организации [Организация].
				|Выполните операцию повторно.
				|Полный отчет о выполнении операций в обособленных подразделениях можно получить из формы ""Закрытие месяца""
				|(раздел ""Учет и отчетность"" - ""Закрытие месяца"").'");
		Иначе
			ШаблонТекста = НСтр("ru = 'Нарушена последовательность регламентных операций.
				|Ожидается изменение результатов выполнения операции ""[ВидОперации]"" за [Период]
				|Выполните операцию повторно (раздел ""Учет и отчетность"" - ""Закрытие месяца"").'");
		КонецЕсли;
		
	Иначе // Не выполнена
		
		Если ЗначениеЗаполнено(Организация) Тогда
			ШаблонТекста = НСтр("ru = 'Не выполнена операция ""[ВидОперации]"" за [Период] по организации [Организация].
				|Выполните операцию.
				|Полный отчет о выполнении операций в обособленных подразделениях можно получить из формы ""Закрытие месяца""
				|(раздел ""Учет и отчетность"" - ""Закрытие месяца"").'");
		Иначе
			ШаблонТекста = НСтр("ru = 'Не выполнена операция ""[ВидОперации]"" за [Период]
				|Выполните операцию (раздел ""Учет и отчетность"" - ""Закрытие месяца"").'");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонТекста, ПараметрыТекста);
		
КонецФункции

// ПРОВЕРКА, ЧТО ПРЕДЫДУЩИЕ ОПЕРАЦИИ ВЫПОЛНЕНЫ

// Ошибки - может содержать Неопределено или коллекцию, созданную функцией 
//                 ВыводСообщенийОбОшибках.НовыйДетальнаяИнформацияОбОшибках().
//                 В последнем случае коллекция будет заполнена.
Функция ПредыдущиеОперацииВыполнены(Период, Организация, ВидОперации, Ошибки = Неопределено) Экспорт
	
	Если Не ВыполненаОперацияПредыдущегоМесяца(Период, Организация, ВидОперации, Ошибки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ВыполненыОперацииПредыдущихГрупп(Период, Организация, ВидОперации, Ошибки);
	
КонецФункции

Функция ВыполненаОперацияПредыдущегоМесяца(Период, Организация, ВидОперации, Ошибки = Неопределено) Экспорт
	
	// Если это первый месяц после загрузки начальных остатков, то ничего не проверям
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период",      НачалоМесяца(Период)-1);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДатыВводаНачальныхОстатков.Организация
	|ИЗ
	|	РегистрСведений.ДатыВводаНачальныхОстатков КАК ДатыВводаНачальныхОстатков
	|ГДЕ
	|	ДатыВводаНачальныхОстатков.Организация = &Организация
	|	И КОНЕЦПЕРИОДА(ДатыВводаНачальныхОстатков.ДатаВводаНачальныхОстатков, МЕСЯЦ) >= &Период";
	Если Не Запрос.Выполнить().Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Если это первый месяц, в котором ведется учет по организации, то ничего не проверяем
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период",      НачалоМесяца(Период));
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЖурналОпераций.Ссылка
	|ИЗ
	|	ЖурналДокументов.ЖурналОпераций КАК ЖурналОпераций
	|ГДЕ
	|	ЖурналОпераций.Организация = &Организация
	|	И ЖурналОпераций.Дата < &Период
	|	И ЖурналОпераций.Проведен
	|	И НЕ ЖурналОпераций.Ссылка ССЫЛКА Документ.ВводНачальныхОстатков";
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&Организация КАК Организация
	|ПОМЕСТИТЬ Организации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация";
	Запрос.Выполнить();
	
	ВидыОпераций = ВсеВидыОпераций();
	ВидыОпераций = ВидыОпераций.Скопировать(Новый Структура("ВидОперации", ВидОперации));
	
	ПроверяемыйПериод = НачалоМесяца(Период) - 1;
	
	СоздатьДетальныйСтатусЗакрытияМесяца(
		МенеджерВременныхТаблиц,
		ПроверяемыйПериод,
		Организация,
		ВидыОпераций);
		
	Возврат Не НайтиОшибкиВыполненияПредыдущихОпераций(МенеджерВременныхТаблиц, Ошибки, ПроверяемыйПериод, Организация);
	
КонецФункции

Функция ВыполненыОперацииПредыдущихГрупп(Период, Организация, ВидОперации, Ошибки, МенеджерВременныхТаблиц = Неопределено) Экспорт
	
	Если МенеджерВременныхТаблиц = Неопределено Тогда
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;
	
	Если НЕ СоздатьДетальныйСтатусПредыдущихГрупп(МенеджерВременныхТаблиц, Период, Организация, ВидОперации) Тогда
		Возврат Истина;
	КонецЕсли;
		
	Возврат Не НайтиОшибкиВыполненияПредыдущихОпераций(МенеджерВременныхТаблиц, Ошибки, Период, Организация);
	
КонецФункции

Функция НайтиОшибкиВыполненияПредыдущихОпераций(МенеджерВременныхТаблиц, Ошибки, Период, Организация)
	
	// МенеджерВременныхТаблиц содержит ДетальныйСтатусЗакрытияМесяца
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Статус.Организация КАК Организация,
	|	Статус.ВидОперации КАК ВидОперации,
	|	Статус.Устарела КАК Устарела,
	|	Статус.Ссылка КАК Ссылка
	|ИЗ
	|	ДетальныйСтатусЗакрытияМесяца КАК Статус
	|ГДЕ
	|	Статус.Требуется
	|	И (Статус.Устарела
	|			ИЛИ Статус.Состояние В (ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.НеВыполнено), ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.ВыполненоСОшибками)))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Статус.ВидОперации.Порядок";
    Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Заполним информацию об ошибках
	Если Ошибки <> Неопределено Тогда
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Описание = ТекстОшибкиРаноВыполнятьОперацию(
				Выборка.ВидОперации, 
				Период, 
				Выборка.Устарела, 
				?(Организация = Выборка.Организация, Неопределено, Выборка.Организация));
				
			ВыводСообщенийОбОшибках.ДобавитьПростоеОписаниеОшибки(
				Ошибки, 
				Описание, 
				Выборка.Ссылка);
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции	

// РАСШИРЕНИЕ ПОДСИСТЕМЫ "ДЛИТЕЛЬНЫЕ ОПЕРАЦИИ"

Функция ЗаданиеЕщеВыполняется(ИдентификаторЗадания) Экспорт
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	
	Возврат Задание <> Неопределено И Задание.Состояние = СостояниеФоновогоЗадания.Активно;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// СПРАВКИ-РАСЧЕТЫ
//

Функция ПолучитьСписокСправокРасчетовПоВидуОперации(Знач ВидОперации,Знач Организация,Знач ПериодРегистрации = Неопределено) Экспорт
	
	Если ТипЗнч(ВидОперации) <> Тип("Массив") Тогда
		МассивОпераций = Новый Массив;
		МассивОпераций.Добавить(ВидОперации);
	Иначе
		МассивОпераций = ВидОперации;
	КонецЕсли;	
	
	ПериодРегистрации			= ?(ПериодРегистрации = Неопределено,ТекущаяДата(),ПериодРегистрации);
	ПлательщикНалогаНаПрибыль	= УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, ПериодРегистрации);
	ПоддержкаПБУ18				= УчетнаяПолитика.ПоддержкаПБУ18(Организация, ПериодРегистрации);
	ПрименяетсяУСН				= УчетнаяПолитика.ПрименяетсяУСН(Организация, ПериодРегистрации);
	
	Список = Новый СписокЗначений;

	//Операции Группы 1
	
	Если МассивОпераций.Найти(Перечисления.ВидыРегламентныхОпераций.НачислениеРезерваОтпусков) <> Неопределено Тогда
		Если ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии")
			И УчетЗарплаты.РасчетЗарплатыДляНебольшихОрганизаций()
			И УчетЗарплаты.ВедетсяУчетРезервовОтпусков(Организация, ПериодРегистрации) Тогда
			Список.Добавить("СправкаРасчетРезервыОтпусков","Резервы отпусков");
		КонецЕсли;
	КонецЕсли;
	
	Если МассивОпераций.Найти(Перечисления.ВидыРегламентныхОпераций.АмортизацияИИзносОС) <> Неопределено Тогда
		Список.Добавить("СправкаРасчетАмортизации","Амортизация");
		
		Если ПлательщикНалогаНаПрибыль Тогда
			Список.Добавить("СправкаРасчетАмортизационнойПремии","Амортизационная премия");
		КонецЕсли;
		
	КонецЕсли;
	
	Если МассивОпераций.Найти(Перечисления.ВидыРегламентныхОпераций.АмортизацияНМАИсписаниеРасходовПоНИОКР) <> Неопределено Тогда
		Если Список.НайтиПоЗначению("СправкаРасчетАмортизации") = Неопределено Тогда
			Список.Добавить("СправкаРасчетАмортизации","Амортизация");
		КонецЕсли;
	КонецЕсли;
	
	Если МассивОпераций.Найти(Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчета97) <> Неопределено Тогда	
		Список.Добавить("СправкаРасчетСписаниеРБП","Списание расходов будущих периодов");
	КонецЕсли;
	
	Если МассивОпераций.Найти(Перечисления.ВидыРегламентныхОпераций.ПереоценкаВалютныхСредств) <> Неопределено Тогда
		Список.Добавить("СправкаРасчетПереоценкаВалютныхСредств","Переоценка валютных средств");
	КонецЕсли;

	Если МассивОпераций.Найти(Перечисления.ВидыРегламентныхОпераций.РасчетНалогаНаИмущество) <> Неопределено Тогда
		Список.Добавить("СправкаРасчетНалогаНаИмущество", "Расчет налога на имущество");
	КонецЕсли;
	
	Если МассивОпераций.Найти(Перечисления.ВидыРегламентныхОпераций.РасчетТранспортногоНалога) <> Неопределено Тогда
		Список.Добавить("СправкаРасчетТранспортногоНалога", "Расчет транспортного налога");
	КонецЕсли;
	
	Если МассивОпераций.Найти(Перечисления.ВидыРегламентныхОпераций.РасчетЗемельногоНалога) <> Неопределено Тогда
		Список.Добавить("СправкаРасчетЗемельногоНалога", "Расчет земельного налога");
	КонецЕсли;
		
	//Операции Группы 2
	
	Если МассивОпераций.Найти(Перечисления.ВидыРегламентныхОпераций.РасчетДолейСписанияКосвенныхРасходов) <> Неопределено Тогда
		
		Если ПлательщикНалогаНаПрибыль Тогда
			Список.Добавить("СправкаРасчетНормированияРасходов","Нормирование расходов");
		КонецЕсли;
		
	КонецЕсли;
	
	//Операции группы 3
	
	Если МассивОпераций.Найти(Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчетов20_23_25_26) <> Неопределено Тогда
		Список.Добавить("СправкаРасчетКалькуляцияСебестоимости","Калькуляция себестоимости");	
		Список.Добавить("СправкаРасчетСебестоимостиПродукции","Себестоимость выпущеной продукции");	
		Список.Добавить("СправкаРасчетРаспределенияКосвенныхРасходов","Распределение косвенных расходов");
		Список.Добавить("СправкаРасчетСписанияКосвенныхРасходов", "Списание косвенных расходов");
	КонецЕсли;	
	
	Если МассивОпераций.Найти(Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчета44) <> Неопределено Тогда
		
		Если Список.НайтиПоЗначению("СправкаРасчетСписанияКосвенныхРасходов") = Неопределено Тогда
			Список.Добавить("СправкаРасчетСписанияКосвенныхРасходов","Списание косвенных расходов");
		КонецЕсли;
		
		Список.Добавить("СправкаРасчетТранспортныхРасходов","Транспортные расходы");
		
	КонецЕсли;
	
	//Операции группы 4
	
	Если МассивОпераций.Найти(Перечисления.ВидыРегламентныхОпераций.РасчетРезервовПоСомнительнымДолгам) <> Неопределено Тогда
		Список.Добавить("СправкаРасчетРезервыПоСомнительнымДолгам","Резервы по сомнительным долгам");
	КонецЕсли;
	
	Если МассивОпераций.Найти(Перечисления.ВидыРегламентныхОпераций.РасчетНалогаНаПрибыль) <> Неопределено Тогда
		Если ПлательщикНалогаНаПрибыль Тогда
			НалоговыйУчетОбособленныхПодразделений.ДополнитьСписокСправокРасчетов(Список);
			Если ПоддержкаПБУ18 Тогда
				Список.Добавить("СправкаРасчетПостоянныхИВременныхРазниц","Налоговые активы и обязательства");
			КонецЕсли;
		КонецЕсли;
		Список.Добавить("СправкаРасчетНалогаНаПрибыль","Расчет налога на прибыль");
		
		Если Константы.ПрименяютсяРазныеСтавкиНалогаНаПрибыль.Получить() И ПлательщикНалогаНаПрибыль Тогда
			Список.Добавить("СправкаРасчетПересчетСтоимостиОтложенныхНалоговыхАктивовИОбязательств","Пересчет стоимости отложенных налоговых активов и обязательств");
		КонецЕсли;
	КонецЕсли;
	
	Если МассивОпераций.Найти(Перечисления.ВидыРегламентныхОпераций.СписаниеУбытковПрошлыхЛет) <> Неопределено Тогда
		Если ПлательщикНалогаНаПрибыль Тогда
			Список.Добавить("СправкаРасчетУбытковПрошлыхЛет","Списание убытков прошлых лет");
		КОнецЕсли;
	КонецЕсли;
		
	Если МассивОпераций.Найти(Перечисления.ВидыРегламентныхОпераций.РеформацияБаланса) <> Неопределено И Список.НайтиПоЗначению("СправкаРасчетПересчетСтоимостиОтложенныхНалоговыхАктивовИОбязательств") = Неопределено Тогда
		Список.Добавить("СправкаРасчетПересчетСтоимостиОтложенныхНалоговыхАктивовИОбязательств","Пересчет стоимости отложенных налоговых активов и обязательств");
	КонецЕсли;
	
	Если МассивОпераций.Найти(Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчетов90_91) <> Неопределено  Тогда
		Если Список.НайтиПоЗначению("СправкаРасчетНалогаНаПрибыль") = Неопределено Тогда
			Список.Добавить("СправкаРасчетНалогаНаПрибыль","Расчет налога на прибыль");
		КонецЕсли;
	КонецЕсли;
	
	Если МассивОпераций.Найти(Перечисления.ВидыРегламентныхОпераций.РасчетНалогаУСН) <> Неопределено Тогда
		Если ПрименяетсяУСН Тогда
			Список.Добавить("СправкаРасчетНалогаУСН", "Расчет налога УСН");
		КонецЕсли;
	КонецЕсли;
	
	Если МассивОпераций.Найти(Перечисления.ВидыРегламентныхОпераций.РасчетТорговойНаценкиПоПроданнымТоварам) <> Неопределено  Тогда
		Если Список.НайтиПоЗначению("СправкаРасчетТорговойНаценки") = Неопределено Тогда
			Список.Добавить("СправкаРасчетТорговойНаценки","Списание торговой наценки по проданным товарам");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Список;
	
КонецФункции

Функция СуществуетСправкаРасчет(ВидОперации) Экспорт
	
	Если  ВидОперации = Перечисления.ВидыРегламентныхОпераций.ИсключениеНЗПИзСоставаМатериальныхРасходовДляУСН
		ИЛИ  ВидОперации = Перечисления.ВидыРегламентныхОпераций.КорректировкаСтоимостиНоменклатуры
		ИЛИ  ВидОперации = Перечисления.ВидыРегламентныхОпераций.ПогашениеСтоимостиСпецодеждыИспецоснасткиВэксплуатации
		ИЛИ  ВидОперации = Перечисления.ВидыРегламентныхОпераций.ПризнаниеРасходовНаПриобретениеНМАДляУСН
		ИЛИ  ВидОперации = Перечисления.ВидыРегламентныхОпераций.ПризнаниеРасходовНаПриобретениеОСДляУСН
		ИЛИ  ВидОперации = Перечисления.ВидыРегламентныхОпераций.РаспределениеРасходовПоВидамДеятельностиДляИП
		ИЛИ  ВидОперации = Перечисления.ВидыРегламентныхОпераций.РаспределениеРасходовПоВидамДеятельностиДляУСН
		ИЛИ  ВидОперации = Перечисления.ВидыРегламентныхОпераций.СписаниеДопРасходовДляУСН 
		ИЛИ  ВидОперации = Перечисления.ВидыРегламентныхОпераций.СписаниеТаможенныхПлатежейДляУСН
		Тогда
		Возврат Ложь
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАКРЫТИЯ МЕСЯЦА


// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПодготовитьПараметрыТаблицаРеквизиты(ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"       // <Дата>
	+ "Организация,"  // <СправочникСсылка.Организации>
	+ "Регистратор"   // <ДокументСсылка.*>
	;
	
	Параметры.Вставить("Реквизиты", 
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции // ПодготовитьПараметрыТаблицаРеквизиты()

Процедура ИзменитьИменаКолонокВТаблицеЗначений(ТаблицаДляРС, СоответствиеКолонок) Экспорт
	
	Для каждого ЭлементСтруктуры Из СоответствиеКолонок Цикл
		Если ТипЗнч(ЭлементСтруктуры.Ключ) <> Тип("Строка")
				ИЛИ ТипЗнч(ЭлементСтруктуры.Значение) <> Тип("Строка") Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаДляРС.Колонки[ЭлементСтруктуры.Ключ].Имя = ЭлементСтруктуры.Значение;
	КонецЦикла;
	
КонецПроцедуры

// Выполняет запись в регистры информации параметров расчетов по рег.операциям
// по данным которых будут построены справки - расчеты
Процедура ЗаписьВоВспомогательныеРегистрыСведений(Движения, ТаблицаДвижений, ТаблицаРеквизиты,
										ВспомогательныйРегистр, СтрокаГруппировки = Неопределено, СтрокаСуммирования = Неопределено) Экспорт
	
	Если ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВспомогательныйРасчет = Движения[ВспомогательныйРегистр];
	Параметры = ПодготовитьПараметрыТаблицаРеквизиты(ТаблицаРеквизиты);
	
	Если Параметры.Реквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Если ТаблицаДвижений.Колонки.Найти("Организация") = Неопределено Тогда
		ТаблицаДвижений.Колонки.Добавить("Организация",
			Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КонецЕсли;
	
	ТаблицаДвижений.ЗаполнитьЗначения(Реквизиты.Организация, "Организация");
	Если СтрокаГруппировки <> Неопределено И СтрокаСуммирования <> Неопределено Тогда
		ТаблицаДвижений.Свернуть(СтрокаГруппировки, СтрокаСуммирования);
	КонецЕсли;
	
	КолонкиПериода = Новый Структура;
	КолонкиПериода.Вставить("ПериодРасчета", Реквизиты.Период);
	КолонкиПериода.Вставить("Период",        Реквизиты.Период);
	
	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		ВспомогательныйРасчетЗапись = ВспомогательныйРасчет.Добавить();
		ЗаполнитьЗначенияСвойств(ВспомогательныйРасчетЗапись, КолонкиПериода);
		ЗаполнитьЗначенияСвойств(ВспомогательныйРасчетЗапись, СтрокаТаблицы);
	КонецЦикла;
	
	ВспомогательныйРасчет.Записывать = Истина;
	
КонецПроцедуры // ЗаписьВоВспомогательныеРегистрыСведений()


// РАСЧЕТ СПИСАНИЯ РБП

Процедура СформироватьДвиженияРасчетСписанияРБП(РасчетСписанияРБП, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыРасчетСписанияРБП(РасчетСписанияРБП, ТаблицаРеквизиты);
	
	Если Параметры.ТаблицаРасчетСписанияРБП.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты       = Параметры.Реквизиты[0];
	ПоддержкаПБУ18  = УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);
	
	Для каждого СтрокаРасчетРБП Из Параметры.ТаблицаРасчетСписанияРБП Цикл
		Проводка             = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.СчетДт      = СтрокаРасчетРБП.СчетСписания;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаРасчетРБП.СубконтоЗатрат1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаРасчетРБП.СубконтоЗатрат2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаРасчетРБП.СубконтоЗатрат3);
		Проводка.СчетКт      = СтрокаРасчетРБП.СчетУчета;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаРасчетРБП.СубконтоКт1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаРасчетРБП.СубконтоКт2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаРасчетРБП.СубконтоКт3);
		Проводка.Сумма       = СтрокаРасчетРБП.Сумма;
		
		Проводка.СуммаПРДт = СтрокаРасчетРБП.СуммаПР;
		Проводка.СуммаНУДт = СтрокаРасчетРБП.СуммаНУ;
		ЭтоНепринимаемыеРасходы = НалоговыйУчет.ОпределитьНеПринимаемыеРасходы(Проводка);
		Если ЭтоНепринимаемыеРасходы Тогда 
			Проводка.СуммаПРДт = ?(ПоддержкаПБУ18, Проводка.СуммаПРДт + Проводка.СуммаНУДт, 0);
			Проводка.СуммаНУДт = 0;
		КонецЕсли;
		
		БухгалтерскийУчет.УстановитьПодразделенияПроводки(
			Проводка, СтрокаРасчетРБП.ПодразделениеОрганизации, СтрокаРасчетРБП.ПодразделениеОрганизации);
		
		НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(
			Проводка.СуммаНУДт, СтрокаРасчетРБП.СуммаНУ, Проводка.СуммаПРДт,
			СтрокаРасчетРБП.СуммаПР, СтрокаРасчетРБП.СуммаВР, СтрокаРасчетРБП.СуммаВР,
			Проводка, ПоддержкаПБУ18); 
		
		Проводка.Содержание  = Реквизиты.Содержание;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры // СформироватьДвиженияРасчетСписанияРБП()

Функция ПодготовитьТаблицуРасчетСписанияРБП(ТаблицаРеквизиты, Отказ) Экспорт
	
	РасчетСписанияРБП = ПолучитьТаблицаРасчетСписанияРБП();
	Параметры = ПодготовитьПараметрыРасчетСписанияРБП(РасчетСписанияРБП, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	ТаблицаРасчетСписанияРБП = Параметры.ТаблицаРасчетСписанияРБП;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Получим списки счетов, где должна быть заполнена аналитика
	КонтрольЗатрат.СоздатьВременныеТаблицыСчетаГдеОбязательнаАналитика(МенеджерВременныхТаблиц);
	
	// Получим список счетов и документов, где не заполнена аналитика
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ВидРБП = Новый Массив;
	ВидРБП.Добавить(Перечисления.ВидыРБП.Прочие);
	ВидРБП.Добавить(Перечисления.ВидыРБП.ОсвоениеПриродныхРесурсов);
	ВидРБП.Добавить(Перечисления.ВидыРБП.УбыткиОтРеализацииАмортизируемогоИмущества);
	ВидРБП.Добавить(Перечисления.ВидыРБП.ДолгосрочноеСтрахованиеЖизни);
	ВидРБП.Добавить(Перечисления.ВидыРБП.СтрахованиеНаОплатуМедицинскихРасходов);
	ВидРБП.Добавить(Перечисления.ВидыРБП.СтрахованиеНаСлучайСмертиИУтратыРаботоспособности);
	ВидРБП.Добавить(Перечисления.ВидыРБП.ПрочиеВидыСтрахования);
	
	СчетаУчетаРБП = Новый Массив;
	СчетаУчетаРБП.Добавить(ПланыСчетов.Хозрасчетный.ПлатежиПоДобровольномуСтрахованиюРаботников);
	СчетаУчетаРБП.Добавить(ПланыСчетов.Хозрасчетный.РасходыБудущихПериодов);
	СчетаУчетаРБП.Добавить(ПланыСчетов.Хозрасчетный.ПлатежиПоПрочимВидамСтрахования);
	
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("КонецМесяца", Новый Граница(Реквизиты.КонДата));
	Запрос.УстановитьПараметр("Счета",       СчетаУчетаРБП);
	Запрос.УстановитьПараметр("ВидРБП",      ВидРБП);
	Запрос.УстановитьПараметр("ПустоеПодразделение", БухгалтерскийУчетПереопределяемый.ПустоеПодразделение());

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ ВТ_Счета
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&Счета)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Подразделение КАК Подразделение,
	|	ХозрасчетныйОстатки.Субконто1 КАК Субконто1,
	|	ХозрасчетныйОстатки.Субконто2 КАК Субконто2,
	|	ХозрасчетныйОстатки.Субконто3 КАК Субконто3,
	|	СУММА(ХозрасчетныйОстатки.СуммаОстаток) КАК Остаток,
	|	СУММА(ХозрасчетныйОстатки.СуммаНУОстаток) КАК ОстатокНУ,
	|	СУММА(ХозрасчетныйОстатки.СуммаПРОстаток) КАК ОстатокПР,
	|	СУММА(ХозрасчетныйОстатки.СуммаВРОстаток) КАК ОстатокВР,
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Субконто1 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.РасходыБудущихПериодов)
	|		КОГДА ХозрасчетныйОстатки.Субконто2 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.РасходыБудущихПериодов)
	|		КОГДА ХозрасчетныйОстатки.Субконто3 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто3 КАК Справочник.РасходыБудущихПериодов)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.РасходыБудущихПериодов.ПустаяСсылка)
	|	КОНЕЦ КАК РБП
	|ПОМЕСТИТЬ ВТ_РБП
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&КонецМесяца,
	|			Счет В
	|				(ВЫБРАТЬ
	|					ВТ_Счета.Счет
	|				ИЗ
	|					ВТ_Счета),
	|			,
	|			Организация = &Организация
	|				И ВЫБОР
	|					КОГДА Субконто1 ССЫЛКА Справочник.РасходыБудущихПериодов
	|						ТОГДА ВЫРАЗИТЬ(Субконто1 КАК Справочник.РасходыБудущихПериодов).ВидРБП В (&ВидРБП)
	|					КОГДА Субконто2 ССЫЛКА Справочник.РасходыБудущихПериодов
	|						ТОГДА ВЫРАЗИТЬ(Субконто2 КАК Справочник.РасходыБудущихПериодов).ВидРБП В (&ВидРБП)
	|					КОГДА Субконто3 ССЫЛКА Справочник.РасходыБудущихПериодов
	|						ТОГДА ВЫРАЗИТЬ(Субконто3 КАК Справочник.РасходыБудущихПериодов).ВидРБП В (&ВидРБП)
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ) КАК ХозрасчетныйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Субконто2,
	|	ХозрасчетныйОстатки.Субконто3,
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РБП.Подразделение,
	|	ВТ_РБП.Субконто1,
	|	ВТ_РБП.Субконто2,
	|	ВТ_РБП.Субконто3,
	|	ВТ_РБП.Остаток,
	|	ВТ_РБП.ОстатокНУ,
	|	ВТ_РБП.ОстатокПР,
	|	ВТ_РБП.ОстатокВР,
	|	ВТ_РБП.Счет,
	|	ВТ_РБП.РБП,
	|	ВТ_РБП.РБП.СпособПризнанияРасходов,
	|	ВТ_РБП.РБП.СчетЗатрат КАК РБПСчетЗатрат,
	|	ВТ_РБП.РБП.ДатаНачалаСписания,
	|	ВТ_РБП.РБП.ДатаОкончанияСписания,
	|	ВТ_РБП.РБП.СубконтоЗатрат1 КАК РБПСубконтоЗатрат1,
	|	ВТ_РБП.РБП.СубконтоЗатрат2 КАК РБПСубконтоЗатрат2,
	|	ВТ_РБП.РБП.СубконтоЗатрат3 КАК РБПСубконтоЗатрат3,
	|	ВТ_РБП.РБП.Сумма,
	|	ВЫБОР
	|		КОГДА СчетаГдеОбязательныПодразделения.Счет ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаПодразделение,
	|	СчетаГдеОбязательныНоменклатурныеГруппы.НомерСубконто КАК НомерСубконтоОбязательныНоменклатурныеГруппы,
	|	СчетаГдеОбязательныСтатьиЗатрат.НомерСубконто КАК НомерСубконтоОбязательныСтатьиЗатрат
	|ИЗ
	|	ВТ_РБП КАК ВТ_РБП
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаГдеОбязательныПодразделения КАК СчетаГдеОбязательныПодразделения
	|		ПО ВТ_РБП.РБП.СчетЗатрат = СчетаГдеОбязательныПодразделения.Счет
	|			И (ВТ_РБП.Подразделение = &ПустоеПодразделение)
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаГдеОбязательныНоменклатурныеГруппы КАК СчетаГдеОбязательныНоменклатурныеГруппы
	|		ПО ВТ_РБП.РБП.СчетЗатрат = СчетаГдеОбязательныНоменклатурныеГруппы.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаГдеОбязательныСтатьиЗатрат КАК СчетаГдеОбязательныСтатьиЗатрат
	|		ПО ВТ_РБП.РБП.СчетЗатрат = СчетаГдеОбязательныСтатьиЗатрат.Счет
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_РБП.Счет,
	|	ВТ_РБП.Субконто1,
	|	ВТ_РБП.Субконто2,
	|	ВТ_РБП.Субконто3,
	|	ВТ_РБП.Подразделение";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	РБПНеЗаполненоПодразделение = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		Счет  = Выборка.Счет;
		РБП   = Выборка.РБП;
		Если НЕ ЗначениеЗаполнено(РБП) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Выборка.РБПСпособПризнанияРасходов = Перечисления.СпособыПризнанияРасходов.ВОсобомПорядке Тогда
			Продолжить;
		КонецЕсли;      
		
		СчетЗатрат = Выборка.РБПСчетЗатрат;
		
		Если НЕ ЗначениеЗаполнено(Выборка.РБПДатаНачалаСписания) Тогда
			Отказ = Истина;
			ШаблонСообщения = НСтр("ru = 'Не заполнена дата начала списания для статьи расходов будущих периодов ""%1"". 
			|Укажите дату начала списания.'");
			
			ТекстСообщения  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонСообщения, РБП);
			
			БухгалтерскийУчетПереопределяемый.СообщитьОбОшибкеРегОперацииСНавигацией(ТекстСообщения, РБП, Отказ, Реквизиты.Регистратор);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Выборка.РБПДатаОкончанияСписания) Тогда
			Отказ = Истина;
			ШаблонСообщения = НСтр("ru = 'Не заполнена дата окончания списания для статьи расходов будущих периодов ""%1"". 
			|Укажите дату окончания списания.'");
			
			ТекстСообщения  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонСообщения, РБП);
			
			БухгалтерскийУчетПереопределяемый.СообщитьОбОшибкеРегОперацииСНавигацией(ТекстСообщения, РБП, Отказ, Реквизиты.Регистратор);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СчетЗатрат) Тогда
			Отказ = Истина;
			ШаблонСообщения = НСтр("ru = 'Не заполнен счет списания для статьи расходов будущих периодов ""%1"". 
			|Укажите счет списания списания.'");
			
			ТекстСообщения  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонСообщения, РБП);
			
			БухгалтерскийУчетПереопределяемый.СообщитьОбОшибкеРегОперацииСНавигацией(ТекстСообщения, РБП, Отказ, Реквизиты.Регистратор);
			
		Иначе
		
			НеЗаполненаАналитика = Новый Массив;
			
			// Проверим заполнение аналитики учета затрат
			Если Выборка.ОшибкаПодразделение Тогда
				// В этом контексте сообщение выдавать не следует,
				// потому что причина не в неправильно оформленной статье РБП,
				// а в неправильно оформленном документе, которым приняты к учету РБП.
				// Такие документы найдем отдельно
				РБПНеЗаполненоПодразделение.Добавить(РБП);
			КонецЕсли;
				
			Если ЗначениеЗаполнено(Выборка.НомерСубконтоОбязательныНоменклатурныеГруппы) 
				И НЕ ЗначениеЗаполнено(Выборка["РБПСубконтоЗатрат" + Выборка.НомерСубконтоОбязательныНоменклатурныеГруппы]) Тогда
				НеЗаполненаАналитика.Добавить("НоменклатурнаяГруппа");
			КонецЕсли;
		
			Если ЗначениеЗаполнено(Выборка.НомерСубконтоОбязательныСтатьиЗатрат) 
				И НЕ ЗначениеЗаполнено(Выборка["РБПСубконтоЗатрат" + Выборка.НомерСубконтоОбязательныСтатьиЗатрат]) Тогда
				НеЗаполненаАналитика.Добавить("СтатьяЗатрат");
			КонецЕсли;
		
			Если НеЗаполненаАналитика.Количество() > 0 Тогда
		
				// Сообщим об ошибке
			
				ТекстОшибки = НСтр("ru = 'Не [Заполнены] [Реквизиты] для статьи расходов будущих периодов ""[РБП]"".
            	|Заполните аналитику'");
				
				ПараметрыТекста = Новый Структура;
				ПараметрыТекста.Вставить("РБП", "" + РБП);
			
				СловаДляСклонения = Новый Структура;
				СловаДляСклонения.Вставить("Заполнены", Новый Структура("он,она,оно,они",НСтр("ru='заполнен'"),НСтр("ru='заполнена'"),НСтр("ru='заполнено'"),НСтр("ru='заполнены'")));
				КонтрольЗатрат.ДобавитьСклонениеВПараметрыСообщенияОбОшибке(ПараметрыТекста, НеЗаполненаАналитика, СловаДляСклонения); 
				
				// [Реквизиты]
				КонтрольЗатрат.ДобавитьПереченьАналитикиВПараметрыСообщенияОбОшибке(ПараметрыТекста, НеЗаполненаАналитика);
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстОшибки,  ПараметрыТекста);
				
				БухгалтерскийУчетПереопределяемый.СообщитьОбОшибкеРегОперацииСНавигацией(ТекстОшибки, РБП, Отказ, Реквизиты.Регистратор);
				
			КонецЕсли;			
			
		КонецЕсли; // Проверка аналитики
		
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		
		ВспомогательныеДанныеРасчета = Новый Структура("КоличествоМесяцевДней, КоличествоМесяцевДнейТекущегоПериода", 0, 0);
		ДатаНачала = ?(Выборка.РБПДатаНачалаСписания > Реквизиты.НачДата, Выборка.РБПДатаНачалаСписания, Реквизиты.НачДата);
		
		СуммаСписания   = БухгалтерскийУчет.СуммаСписанияЗаМесяц(
			РБП, ДатаНачала, Выборка.РБПДатаОкончанияСписания, Выборка.Остаток,
			ВспомогательныеДанныеРасчета, Реквизиты.НачДата, Реквизиты.КонДата);
		СуммаСписанияНУ = БухгалтерскийУчет.СуммаСписанияЗаМесяц(
			РБП, ДатаНачала, Выборка.РБПДатаОкончанияСписания, Выборка.ОстатокНУ,
			ВспомогательныеДанныеРасчета, Реквизиты.НачДата, Реквизиты.КонДата);
		СуммаСписанияПР = БухгалтерскийУчет.СуммаСписанияЗаМесяц(
			РБП, ДатаНачала, Выборка.РБПДатаОкончанияСписания, Выборка.ОстатокПР,
			ВспомогательныеДанныеРасчета, Реквизиты.НачДата, Реквизиты.КонДата);
		СуммаСписанияВР = БухгалтерскийУчет.СуммаСписанияЗаМесяц(
			РБП, ДатаНачала, Выборка.РБПДатаОкончанияСписания, Выборка.ОстатокВР,
			ВспомогательныеДанныеРасчета, Реквизиты.НачДата, Реквизиты.КонДата);
		
		Если СуммаСписания = 0 И СуммаСписанияНУ = 0 И СуммаСписанияПР = 0 И СуммаСписанияВР = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаЗаписьРасчетаРБП = ТаблицаРасчетСписанияРБП.Добавить();
		СтрокаЗаписьРасчетаРБП.ДатаНачала               = Выборка.РБПДатаНачалаСписания;
		СтрокаЗаписьРасчетаРБП.ДатаОкончания            = Выборка.РБПДатаОкончанияСписания;
		СтрокаЗаписьРасчетаРБП.КоличествоМесяцевДней    = ВспомогательныеДанныеРасчета.КоличествоМесяцевДней;
		СтрокаЗаписьРасчетаРБП.КоличествоМесяцевДнейТекущегоПериода
			= ВспомогательныеДанныеРасчета.КоличествоМесяцевДнейТекущегоПериода;
		СтрокаЗаписьРасчетаРБП.СпособПризнанияРасходов  = Выборка.РБПСпособПризнанияРасходов;
		СтрокаЗаписьРасчетаРБП.ПодразделениеОрганизации = Выборка.Подразделение;
		СтрокаЗаписьРасчетаРБП.СчетУчета                = Счет;
		СтрокаЗаписьРасчетаРБП.СчетСписания             = СчетЗатрат;
		СтрокаЗаписьРасчетаРБП.Статья                   = РБП;
		СтрокаЗаписьРасчетаРБП.СуммаДоговора            = Выборка.РБПСумма;
		СтрокаЗаписьРасчетаРБП.Сумма                    = СуммаСписания;
		СтрокаЗаписьРасчетаРБП.НачОстаток               = Выборка.Остаток;
		СтрокаЗаписьРасчетаРБП.КонОстаток               = Выборка.Остаток   - Окр(СуммаСписания,   2);
		СтрокаЗаписьРасчетаРБП.НачОстатокНУ             = Выборка.ОстатокНУ;
		СтрокаЗаписьРасчетаРБП.КонОстатокНУ             = Выборка.ОстатокНУ - Окр(СуммаСписанияНУ, 2);
		СтрокаЗаписьРасчетаРБП.СуммаНУ                  = СуммаСписанияНУ;
		СтрокаЗаписьРасчетаРБП.НачОстатокПР             = Выборка.ОстатокПР;
		СтрокаЗаписьРасчетаРБП.КонОстатокПР             = Выборка.ОстатокПР - Окр(СуммаСписанияПР, 2);
		СтрокаЗаписьРасчетаРБП.СуммаПР                  = СуммаСписанияПР;
		СтрокаЗаписьРасчетаРБП.НачОстатокВР             = Выборка.ОстатокВР;
		СтрокаЗаписьРасчетаРБП.КонОстатокВР             = Выборка.ОстатокВР - Окр(СуммаСписанияВР, 2);
		СтрокаЗаписьРасчетаРБП.СуммаВР                  = СуммаСписанияВР;
		СтрокаЗаписьРасчетаРБП.СубконтоЗатрат1          = Выборка.РБПСубконтоЗатрат1;
		СтрокаЗаписьРасчетаРБП.СубконтоЗатрат2          = Выборка.РБПСубконтоЗатрат2;
		СтрокаЗаписьРасчетаРБП.СубконтоЗатрат3          = Выборка.РБПСубконтоЗатрат3;
		СтрокаЗаписьРасчетаРБП.СубконтоКт1              = Выборка.Субконто1;
		СтрокаЗаписьРасчетаРБП.СубконтоКт2              = Выборка.Субконто2;
		СтрокаЗаписьРасчетаРБП.СубконтоКт3              = Выборка.Субконто3;
		
	КонецЦикла;
	
	НайтиДокументыНеЗаполненоПодразделениеРБП(Реквизиты.Организация, СчетаУчетаРБП, РБПНеЗаполненоПодразделение, Отказ, Реквизиты.Регистратор);
	
	Возврат ТаблицаРасчетСписанияРБП;
	
КонецФункции // ПодготовитьТаблицуРасчетСписанияРБП()

Функция ПолучитьТаблицаРасчетСписанияРБП()
	
	ОписаниеТипаДата      = Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	ОписаниеТипаЧисла10_6 = ОбщегоНазначения.ОписаниеТипаЧисло(10, 6);
	ОписаниеТипаЧисла12_2 = ОбщегоНазначения.ОписаниеТипаЧисло(12, 2);
	ОписаниеТипаСчетХозр  = Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный");
	
	ТаблицаРасчетСписанияРБП = Новый ТаблицаЗначений;
	ТаблицаРасчетСписанияРБП.Колонки.Добавить("Организация",
		Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаРасчетСписанияРБП.Колонки.Добавить("Статья",
		Новый ОписаниеТипов("СправочникСсылка.РасходыБудущихПериодов"));
	ТаблицаРасчетСписанияРБП.Колонки.Добавить("ДатаНачала",    ОписаниеТипаДата);
	ТаблицаРасчетСписанияРБП.Колонки.Добавить("ДатаОкончания", ОписаниеТипаДата);
	ТаблицаРасчетСписанияРБП.Колонки.Добавить("СчетУчета",     ОписаниеТипаСчетХозр);
	ТаблицаРасчетСписанияРБП.Колонки.Добавить("СчетСписания",  ОписаниеТипаСчетХозр);
	ТаблицаРасчетСписанияРБП.Колонки.Добавить("СпособПризнанияРасходов",
		Новый ОписаниеТипов("ПеречислениеСсылка.СпособыПризнанияРасходов"));
	ТаблицаРасчетСписанияРБП.Колонки.Добавить("ПодразделениеОрганизации",
		БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	ТаблицаРасчетСписанияРБП.Колонки.Добавить("СубконтоЗатрат1");
	ТаблицаРасчетСписанияРБП.Колонки.Добавить("СубконтоЗатрат2");
	ТаблицаРасчетСписанияРБП.Колонки.Добавить("СубконтоЗатрат3");
	ТаблицаРасчетСписанияРБП.Колонки.Добавить("СубконтоКт1");
	ТаблицаРасчетСписанияРБП.Колонки.Добавить("СубконтоКт2");
	ТаблицаРасчетСписанияРБП.Колонки.Добавить("СубконтоКт3");
	ТаблицаРасчетСписанияРБП.Колонки.Добавить("КоличествоМесяцевДнейТекущегоПериода",
		ОписаниеТипаЧисла10_6);
	ТаблицаРасчетСписанияРБП.Колонки.Добавить("КоличествоМесяцевДней", ОписаниеТипаЧисла10_6);
	ТаблицаРасчетСписанияРБП.Колонки.Добавить("СуммаДоговора", ОбщегоНазначения.ОписаниеТипаЧисло(10, 2));
	ТаблицаРасчетСписанияРБП.Колонки.Добавить("НачОстаток",    ОписаниеТипаЧисла12_2);
	ТаблицаРасчетСписанияРБП.Колонки.Добавить("НачОстатокНУ",  ОписаниеТипаЧисла12_2);
	ТаблицаРасчетСписанияРБП.Колонки.Добавить("НачОстатокПР",  ОписаниеТипаЧисла12_2);
	ТаблицаРасчетСписанияРБП.Колонки.Добавить("НачОстатокВР",  ОписаниеТипаЧисла12_2);
	ТаблицаРасчетСписанияРБП.Колонки.Добавить("Сумма",         ОписаниеТипаЧисла12_2);
	ТаблицаРасчетСписанияРБП.Колонки.Добавить("СуммаНУ",       ОписаниеТипаЧисла12_2);
	ТаблицаРасчетСписанияРБП.Колонки.Добавить("СуммаПР",       ОписаниеТипаЧисла12_2);
	ТаблицаРасчетСписанияРБП.Колонки.Добавить("СуммаВР",       ОписаниеТипаЧисла12_2);
	ТаблицаРасчетСписанияРБП.Колонки.Добавить("КонОстаток",    ОписаниеТипаЧисла12_2);
	ТаблицаРасчетСписанияРБП.Колонки.Добавить("КонОстатокНУ",  ОписаниеТипаЧисла12_2);
	ТаблицаРасчетСписанияРБП.Колонки.Добавить("КонОстатокПР",  ОписаниеТипаЧисла12_2);
	ТаблицаРасчетСписанияРБП.Колонки.Добавить("КонОстатокВР",  ОписаниеТипаЧисла12_2);
	
	Возврат ТаблицаРасчетСписанияРБП;
	
КонецФункции

Функция ПодготовитьПараметрыРасчетСписанияРБП(РасчетСписанияРБП, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаРасчетСписанияРБП
	
	СписокОбязательныхКолонок = ""
	+ "Организация,"                // <СправочникСсылка.Организации>
	+ "Статья,"                     // <СправочникСсылка.РасходыБудущихПериодов>
	+ "ДатаНачала,"                 // <Дата>
	+ "ДатаОкончания,"              // <Дата>
	+ "СчетУчета,"                  // <ПланСчетовСсылка.Хозрасчетный>
	+ "СчетСписания,"               // <ПланСчетовСсылка.Хозрасчетный>
	+ "СпособПризнанияРасходов,"    // <ПеречислениеСсылка.СпособыПризнанияРасходов>
	+ "ПодразделениеОрганизации,"   // <Ссылка на справочник подразделений>
	+ "СубконтоЗатрат1,"
	+ "СубконтоЗатрат2,"
	+ "СубконтоЗатрат3,"
	+ "СубконтоКт1,"
	+ "СубконтоКт2,"
	+ "СубконтоКт3,"
	+ "КоличествоМесяцевДнейТекущегоПериода," // <Число, 10, 6>
	+ "КоличествоМесяцевДней,"                // <Число, 10, 6>
	+ "СуммаДоговора,"                        // <Число, 10, 2>
	+ "НачОстаток,"                           // <Число, 12, 2>
	+ "НачОстатокНУ,"                         // <Число, 12, 2>
	+ "НачОстатокПР,"                         // <Число, 12, 2>
	+ "НачОстатокВР,"                         // <Число, 12, 2>
	+ "Сумма,"                                // <Число, 12, 2>
	+ "СуммаНУ,"                              // <Число, 12, 2>
	+ "СуммаПР,"                              // <Число, 12, 2>
	+ "СуммаВР,"                              // <Число, 12, 2>
	+ "КонОстаток,"                           // <Число, 12, 2>
	+ "КонОстатокНУ,"                         // <Число, 12, 2>
	+ "КонОстатокПР,"                         // <Число, 12, 2>
	+ "КонОстатокВР"                          // <Число, 12, 2>
	;
	
	Параметры.Вставить("ТаблицаРасчетСписанияРБП", 
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(РасчетСписанияРБП, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"           // <Дата>
	+ "НачДата,"          // <Дата>
	+ "КонДата,"          // <Дата>
	+ "Организация,"      // <СправочникСсылка.Организации>
	+ "Регистратор,"      // <ДокументСсылка.*>
	+ "Содержание"        // <Строка, 150>
	;
	
	Параметры.Вставить("Реквизиты", 
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции // ПодготовитьПараметрыРасчетСписанияРБП()

Процедура НайтиДокументыНеЗаполненоПодразделениеРБП(Организация, СчетаУчетаРБП, РБПНеЗаполненоПодразделение, Отказ, ДокументРегламентнойОперации)
	
	Если РБПНеЗаполненоПодразделение.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Ищем документы принятия к учету РБП. Эти документы могли быть введены ранее месяца,
	// в котором выполняется регламентная операция
	
	// Так как выполняем запрос к виртуальной таблице без отбора,
	// постараемся максимально упростить построение виртуальной таблицы и ограничить отборами данные для ее построения.
	// Для этого предварительно выберем во временные таблицы перечень РБП и перечень подозрительных регистраторов.
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация",                 Организация);
	Запрос.УстановитьПараметр("СчетаУчетаРБП",               СчетаУчетаРБП);
	Запрос.УстановитьПараметр("РБПНеЗаполненоПодразделение", РБПНеЗаполненоПодразделение);
	Запрос.УстановитьПараметр("ПустоеПодразделение", 		 БухгалтерскийУчетПереопределяемый.ПустоеПодразделение());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка
	|ПОМЕСТИТЬ СчетаУчетаРБП
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетаУчетаРБП)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасходыБудущихПериодов.Ссылка
	|ПОМЕСТИТЬ ПроблемныеРБП
	|ИЗ
	|	Справочник.РасходыБудущихПериодов КАК РасходыБудущихПериодов
	|ГДЕ
	|	РасходыБудущихПериодов.Ссылка В(&РБПНеЗаполненоПодразделение)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ХозрасчетныйСубконто.Регистратор
	|ПОМЕСТИТЬ ПодозрительныеДокументы
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконто
	|ГДЕ
	|	ХозрасчетныйСубконто.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов)
	|	И ХозрасчетныйСубконто.Значение В
	|			(ВЫБРАТЬ
	|				Отбор.Ссылка
	|			ИЗ
	|				ПроблемныеРБП КАК Отбор)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Движения.Регистратор,
	|	Движения.СчетДт КАК СчетРБП,
	|	ВЫБОР
	|		КОГДА Движения.ВидСубконтоДт1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов)
	|			ТОГДА Движения.СубконтоДт1
	|		КОГДА Движения.ВидСубконтоДт2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов)
	|			ТОГДА Движения.СубконтоДт2
	|		КОГДА Движения.ВидСубконтоДт3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов)
	|			ТОГДА Движения.СубконтоДт3
	|	КОНЕЦ КАК СтатьяРБП,
	|	Движения.Период
	|ПОМЕСТИТЬ ПроблемныеДокументы
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			,
	|			,
	|			Организация = &Организация
	|				И ПодразделениеДт = &ПустоеПодразделение
	|				И Регистратор В
	|					(ВЫБРАТЬ
	|						Отбор.Регистратор
	|					ИЗ
	|						ПодозрительныеДокументы КАК Отбор)
	|				И Активность
	|				И (ВидСубконтоДт1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов)
	|						И СубконтоДт1 В
	|							(ВЫБРАТЬ
	|								Отбор.Ссылка
	|							ИЗ
	|								ПроблемныеРБП КАК Отбор)
	|					ИЛИ ВидСубконтоДт2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов)
	|						И СубконтоДт2 В
	|							(ВЫБРАТЬ
	|								Отбор.Ссылка
	|							ИЗ
	|								ПроблемныеРБП КАК Отбор)
	|					ИЛИ ВидСубконтоДт3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов)
	|						И СубконтоДт3 В
	|							(ВЫБРАТЬ
	|								Отбор.Ссылка
	|							ИЗ
	|								ПроблемныеРБП КАК Отбор))
	|				И СчетДт В
	|					(ВЫБРАТЬ
	|						Отбор.Ссылка
	|					ИЗ
	|						СчетаУчетаРБП КАК Отбор),
	|			,
	|			) КАК Движения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроблемныеДокументы.Регистратор,
	|	ПроблемныеДокументы.СчетРБП,
	|	ПроблемныеДокументы.СтатьяРБП,
	|	ПРЕДСТАВЛЕНИЕ(ПроблемныеДокументы.Регистратор),
	|	ПРЕДСТАВЛЕНИЕ(ПроблемныеДокументы.СчетРБП),
	|	ПРЕДСТАВЛЕНИЕ(ПроблемныеДокументы.СтатьяРБП),
	|	ПроблемныеДокументы.Период КАК Период
	|ИЗ
	|	ПроблемныеДокументы КАК ПроблемныеДокументы
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";

	// Обработаем результат
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТекстОшибки = НСтр("ru = 'При принятии к учету расходов будущих периодов по статье ""%НазваниеСпособа%"" не заполнено подразделение на счете %Счет% в документе %Регистратор%.
		|Укажите подразделение'");
		
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НазваниеСпособа%", Выборка.СтатьяРБП);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Счет%",            Выборка.СчетРБП);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Регистратор%",     Выборка.Регистратор);
		
		БухгалтерскийУчетПереопределяемый.СообщитьОбОшибкеРегОперацииСНавигацией(ТекстОшибки, Выборка.Регистратор, Отказ, ДокументРегламентнойОперации);
			
	КонецЦикла;
	
КонецПроцедуры

// РАСЧЕТ ТОРГОВОЙ НАЦЕНКИ ПО ПРОДАННЫМ ТОВАРАМ

Процедура СформироватьДвиженияРасчетТорговойНаценки(ТаблицаРасчетНаценки, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыРасчетТорговойНаценки(ТаблицаРасчетНаценки, ТаблицаРеквизиты);
	
	Если Параметры.ТаблицаПроводокРасчетНаценки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Для каждого СтрокаРасчетНаценки Из Параметры.ТаблицаПроводокРасчетНаценки Цикл
		Проводка = Движения.Хозрасчетный.Добавить();
		ЗаполнитьЗначенияСвойств(Проводка, Реквизиты);
		Проводка.СчетДт = СтрокаРасчетНаценки.СчетДт;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаРасчетНаценки.НоменклатурныеГруппы);
		
		Проводка.СчетКт = СтрокаРасчетНаценки.СчетКт;
		Если СтрокаРасчетНаценки.ВидСклада = "НТТ" Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады", СтрокаРасчетНаценки.Склады);
			Если СтрокаРасчетНаценки.ЕстьСтавкиНДС Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС", СтрокаРасчетНаценки.СтавкиНДС);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС", СтрокаРасчетНаценки.СтавкиНДС);
			КонецЕсли;
		Иначе
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаРасчетНаценки.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады", СтрокаРасчетНаценки.Склады);
			Если СтрокаРасчетНаценки.ЕстьПартии Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии", СтрокаРасчетНаценки.Партии);
			КонецЕсли;
		КонецЕсли;
		
		Проводка.Сумма = СтрокаРасчетНаценки.СуммаНаценки;
		БухгалтерскийУчет.УстановитьПодразделенияПроводки(
			Проводка, СтрокаРасчетНаценки.Подразделение, СтрокаРасчетНаценки.Подразделение);
		
		НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(
			СтрокаРасчетНаценки.СуммаНаценкиНУ, СтрокаРасчетНаценки.СуммаНаценкиНУ, СтрокаРасчетНаценки.СуммаНаценкиПР,
			СтрокаРасчетНаценки.СуммаНаценкиПР, СтрокаРасчетНаценки.СуммаНаценкиВР, СтрокаРасчетНаценки.СуммаНаценкиВР,
			Проводка);
		
	КонецЦикла;
	
	// Формируем записи для регистров формирования справки-расчета
	СписокРесурсов = ""
	+ "ПродажнаяСтоимостьРеализация,"
	+ "ПродажнаяСтоимостьОстаток,"
	+ "ТорговаяНаценкаОстаток,"
	+ "ТорговаяНаценкаОстатокНУ,"
	+ "ТорговаяНаценкаОстатокПР,"
	+ "ТорговаяНаценкаОстатокВР,"
	+ "ПроцентСкидкиНакидки,"
	+ "ПроцентСкидкиНакидкиНУ,"
	+ "ПроцентСкидкиНакидкиПР,"
	+ "ПроцентСкидкиНакидкиВР,"
	+ "СуммаНаценки,"
	+ "СуммаНаценкиНУ,"
	+ "СуммаНаценкиПР,"
	+ "СуммаНаценкиВР";
	
	ТаблицаДвиженийРегистраРасчетНаценкиНТТ = Параметры.ТаблицаДвиженийРегистраРасчетНаценки.Скопировать(Новый Структура("ВидСклада", "НТТ"));
	ТаблицаДвиженийРегистраРасчетНаценкиНТТ.Свернуть("СтавкиНДС, Склады, СчетКт", СписокРесурсов);
	
	Если ТаблицаДвиженийРегистраРасчетНаценкиНТТ.Количество() > 0 Тогда
		Движения.РасчетТорговойНаценкиНТТ.Записывать = Истина;
	КонецЕсли; 
	
	Для каждого СтрокаРасчетНаценки Из ТаблицаДвиженийРегистраРасчетНаценкиНТТ Цикл
		ЗаписьРегистраНТТ 							= Движения.РасчетТорговойНаценкиНТТ.Добавить();
		ЗаписьРегистраНТТ.ПериодРасчета 			= Реквизиты.Период;
		ЗаписьРегистраНТТ.СчетУчетаТорговойНаценки 	= СтрокаРасчетНаценки.СчетКт;
		ЗаполнитьЗначенияСвойств(ЗаписьРегистраНТТ, Реквизиты);
		ЗаполнитьЗначенияСвойств(ЗаписьРегистраНТТ, СтрокаРасчетНаценки);
	КонецЦикла; 
	
	СписокРесурсов = ""
	+ "ПродажнаяСтоимостьРеализация,"
	+ "СуммаНаценки,"
	+ "СуммаНаценкиНУ,"
	+ "СуммаНаценкиПР,"
	+ "СуммаНаценкиВР";
	
	ТаблицаДвиженийРегистраРасчетНаценкиАТТ = Параметры.ТаблицаДвиженийРегистраРасчетНаценки.Скопировать(Новый Структура("ВидСклада", "АТТ"));
	ТаблицаДвиженийРегистраРасчетНаценкиАТТ.Свернуть(""
		+"Номенклатура," 
		+"Партии,"
		+"Склады,"
		+"СчетКт,"
		+"ПродажнаяСтоимостьОстаток," 
		+"ТорговаяНаценкаОстаток,"
		+"ТорговаяНаценкаОстатокНУ,"
		+"ТорговаяНаценкаОстатокПР,"
		+"ТорговаяНаценкаОстатокВР,"
		+"ПроцентСкидкиНакидки,"
		+"ПроцентСкидкиНакидкиНУ,"
		+"ПроцентСкидкиНакидкиПР,"
		+"ПроцентСкидкиНакидкиВР"
		,СписокРесурсов);
	
	Если ТаблицаДвиженийРегистраРасчетНаценкиАТТ.Количество() > 0 Тогда
		Движения.РасчетТорговойНаценкиАТТ.Записывать = Истина;
	КонецЕсли; 
	
	Для каждого СтрокаРасчетНаценки Из ТаблицаДвиженийРегистраРасчетНаценкиАТТ Цикл
		
		ЗаписьРегистраАТТ = Движения.РасчетТорговойНаценкиАТТ.Добавить();
		ЗаписьРегистраАТТ.ПериодРасчета = Реквизиты.Период;
		ЗаписьРегистраАТТ.СчетУчетаТорговойНаценки 	= СтрокаРасчетНаценки.СчетКт;
		
		ЗаполнитьЗначенияСвойств(ЗаписьРегистраАТТ, Реквизиты);
		ЗаполнитьЗначенияСвойств(ЗаписьРегистраАТТ, СтрокаРасчетНаценки);
	КонецЦикла; 
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры 

Функция ПодготовитьТаблицуРасчетТорговойНаценки(ТаблицаРеквизиты, Отказ) Экспорт
	
	ТаблицаРасчетНаценки = ПолучитьТаблицаРасчетНаценки();
	Параметры = ПодготовитьПараметрыРасчетТорговойНаценки(ТаблицаРасчетНаценки, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	ТаблицаПроводокРасчетНаценки    = Параметры.ТаблицаПроводокРасчетНаценки;
	РозничнаяТорговляОблагаетсяЕНВД = УчетнаяПолитика.РозничнаяТорговляОблагаетсяЕНВД(
		Реквизиты.Организация, Реквизиты.КонДата);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйВидыСубконто.Ссылка
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|ГДЕ
	|	ХозрасчетныйВидыСубконто.Ссылка = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ)
	|	И ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС)";
	
	РазделятьПоСтавкамНДС = НЕ Запрос.Выполнить().Пустой();
	
	//НТТ
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	Если РазделятьПоСтавкамНДС Тогда
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС);
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет
		|ПОМЕСТИТЬ ВТ_Счета9002
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СебестоимостьПродаж))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Счет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РегСчетаУчетаВНТТ.СчетРасходовОтРеализации,
		|	РегСчетаУчетаВНТТ.ТорговаяТочка КАК ТорговаяТочка
		|ПОМЕСТИТЬ ВТ_СчетаУчетаВНТТ
		|ИЗ
		|	РегистрСведений.СчетаУчетаВНТТ.СрезПоследних(&КонДата, ) КАК РегСчетаУчетаВНТТ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТорговаяТочка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(Хозрасчетный.Подразделение, &ПустоеПодразделение) КАК Подразделение,
		|	ВЫРАЗИТЬ(Хозрасчетный.Субконто1 КАК Справочник.Склады) КАК Субконто1,
		|	ВЫРАЗИТЬ(Хозрасчетный.Субконто2 КАК Перечисление.СтавкиНДС) КАК Субконто2,
		|	Хозрасчетный.СуммаОстатокКт КАК СуммаОстатокКт,
		|	Хозрасчетный.СуммаНУОстатокКт КАК СуммаНУОстатокКт,
		|	Хозрасчетный.СуммаПРОстатокКт КАК СуммаПРОстатокКт,
		|	Хозрасчетный.СуммаВРОстатокКт КАК СуммаВРОстатокКт
		|ПОМЕСТИТЬ ВТ_ХозрасчетныйОстаткиТН
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонГраница, Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТорговаяНаценкаНТТ), &ВидыСубконто, Организация = &Организация) КАК Хозрасчетный
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Субконто1,
		|	Субконто2,
		|	Подразделение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(Хозрасчетный.Подразделение, &ПустоеПодразделение) КАК Подразделение,
		|	ВЫРАЗИТЬ(Хозрасчетный.Субконто1 КАК Справочник.Склады) КАК Субконто1,
		|	ВЫРАЗИТЬ(Хозрасчетный.Субконто2 КАК Перечисление.СтавкиНДС) КАК Субконто2,
		|	Хозрасчетный.СуммаОстатокДт КАК СуммаОстатокДт
		|ПОМЕСТИТЬ ВТ_ХозрасчетныйОстаткиПС
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонГраница, Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ), &ВидыСубконто, Организация = &Организация) КАК Хозрасчетный
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Субконто1,
		|	Субконто2,
		|	Подразделение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ХозрасчетныйОборотыДтКт.ПодразделениеКт, &ПустоеПодразделение) КАК Подразделение,
		|	ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК Справочник.Склады) КАК СубконтоКт1,
		|	ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.СубконтоКт2 КАК Перечисление.СтавкиНДС) КАК СубконтоКт2,
		|	ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаОборот
		|ПОМЕСТИТЬ ВТ_ХозрасчетныйОборотыДтКт
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
		|			&НачДата,
		|			&КонДата,
		|			,
		|			СчетДт В
		|				(ВЫБРАТЬ
		|					ВТ_Счета9002.Счет
		|				ИЗ
		|					ВТ_Счета9002),
		|			,
		|			СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ),
		|			&ВидыСубконто,
		|			Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СубконтоКт1,
		|	СубконтоКт2,
		|	Подразделение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ХозрасчетныйОстаткиТН.Подразделение КАК Подразделение,
		|	ВТ_ХозрасчетныйОстаткиТН.Субконто1 КАК Склады,
		|	ВТ_ХозрасчетныйОстаткиТН.Субконто1.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	ВТ_ХозрасчетныйОстаткиТН.Субконто2 КАК СтавкиНДС,
		|	СУММА(ВТ_ХозрасчетныйОстаткиТН.СуммаОстатокКт) КАК ТорговаяНаценкаОстаток,
		|	СУММА(ВТ_ХозрасчетныйОстаткиТН.СуммаНУОстатокКт) КАК ТорговаяНаценкаОстатокНУ,
		|	СУММА(ВТ_ХозрасчетныйОстаткиТН.СуммаПРОстатокКт) КАК ТорговаяНаценкаОстатокПР,
		|	СУММА(ВТ_ХозрасчетныйОстаткиТН.СуммаВРОстатокКт) КАК ТорговаяНаценкаОстатокВР,
		|	СУММА(ВТ_ХозрасчетныйОборотыДтКт.СуммаОборот) КАК ПродажнаяСтоимостьРеализация,
		|	СУММА(ЕСТЬNULL(ВТ_ХозрасчетныйОстаткиПС.СуммаОстатокДт, 0)) КАК ПродажнаяСтоимостьОстаток,
		|	ВЫБОР
		|		КОГДА ВТ_СчетаУчетаВНТТ.СчетРасходовОтРеализации ЕСТЬ НЕ NULL 
		|				И ВТ_СчетаУчетаВНТТ.СчетРасходовОтРеализации <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|			ТОГДА ВТ_СчетаУчетаВНТТ.СчетРасходовОтРеализации
		|		ИНАЧЕ ВЫБОР
		|				КОГДА &РозничнаяТорговляОблагаетсяЕНВД
		|					ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СебестоимостьПродажЕНВД)
		|				ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД)
		|			КОНЕЦ
		|	КОНЕЦ КАК СчетСебестоимости
		|ИЗ
		|	ВТ_ХозрасчетныйОстаткиТН КАК ВТ_ХозрасчетныйОстаткиТН
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ХозрасчетныйОборотыДтКт КАК ВТ_ХозрасчетныйОборотыДтКт
		|		ПО ВТ_ХозрасчетныйОстаткиТН.Подразделение = ВТ_ХозрасчетныйОборотыДтКт.Подразделение
		|			И ВТ_ХозрасчетныйОстаткиТН.Субконто1 = ВТ_ХозрасчетныйОборотыДтКт.СубконтоКт1
		|			И ВТ_ХозрасчетныйОстаткиТН.Субконто2 = ВТ_ХозрасчетныйОборотыДтКт.СубконтоКт2
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ХозрасчетныйОстаткиПС КАК ВТ_ХозрасчетныйОстаткиПС
		|		ПО ВТ_ХозрасчетныйОстаткиТН.Подразделение = ВТ_ХозрасчетныйОстаткиПС.Подразделение
		|			И ВТ_ХозрасчетныйОстаткиТН.Субконто1 = ВТ_ХозрасчетныйОстаткиПС.Субконто1
		|			И ВТ_ХозрасчетныйОстаткиТН.Субконто2 = ВТ_ХозрасчетныйОстаткиПС.Субконто2
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетаУчетаВНТТ КАК ВТ_СчетаУчетаВНТТ
		|		ПО ВТ_ХозрасчетныйОстаткиТН.Субконто1 = ВТ_СчетаУчетаВНТТ.ТорговаяТочка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ХозрасчетныйОстаткиТН.Субконто1,
		|	ВТ_ХозрасчетныйОстаткиТН.Субконто1.НоменклатурнаяГруппа,
		|	ВТ_ХозрасчетныйОстаткиТН.Субконто2,
		|	ВТ_ХозрасчетныйОстаткиТН.Подразделение,
		|	ВЫБОР
		|		КОГДА ВТ_СчетаУчетаВНТТ.СчетРасходовОтРеализации ЕСТЬ НЕ NULL 
		|				И ВТ_СчетаУчетаВНТТ.СчетРасходовОтРеализации <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|			ТОГДА ВТ_СчетаУчетаВНТТ.СчетРасходовОтРеализации
		|		ИНАЧЕ ВЫБОР
		|				КОГДА &РозничнаяТорговляОблагаетсяЕНВД
		|					ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СебестоимостьПродажЕНВД)
		|				ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД)
		|			КОНЕЦ
		|	КОНЕЦ
		|
		|ИМЕЮЩИЕ
		|	СУММА(ВТ_ХозрасчетныйОборотыДтКт.СуммаОборот) + СУММА(ЕСТЬNULL(ВТ_ХозрасчетныйОстаткиПС.СуммаОстатокДт, 0)) <> 0 И
		|	СУММА(ВТ_ХозрасчетныйОборотыДтКт.СуммаОборот) <> 0 И
		|	(СУММА(ВТ_ХозрасчетныйОборотыДтКт.СуммаОборот) * СУММА(ВТ_ХозрасчетныйОстаткиТН.СуммаОстатокКт) > 0
		|		ИЛИ СУММА(ВТ_ХозрасчетныйОборотыДтКт.СуммаОборот) * СУММА(ВТ_ХозрасчетныйОстаткиТН.СуммаНУОстатокКт) > 0
		|		ИЛИ СУММА(ВТ_ХозрасчетныйОборотыДтКт.СуммаОборот) * СУММА(ВТ_ХозрасчетныйОстаткиТН.СуммаПРОстатокКт) > 0
		|		ИЛИ СУММА(ВТ_ХозрасчетныйОборотыДтКт.СуммаОборот) * СУММА(ВТ_ХозрасчетныйОстаткиТН.СуммаВРОстатокКт) > 0)
		|ИТОГИ
		|	МАКСИМУМ(НоменклатурнаяГруппа)
		|ПО
		|	Склады,
		|	СтавкиНДС,
		|	Подразделение";
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет
		|ПОМЕСТИТЬ ВТ_Счета9002
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СебестоимостьПродаж))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Счет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РегСчетаУчетаВНТТ.СчетРасходовОтРеализации,
		|	РегСчетаУчетаВНТТ.ТорговаяТочка КАК ТорговаяТочка
		|ПОМЕСТИТЬ ВТ_СчетаУчетаВНТТ
		|ИЗ
		|	РегистрСведений.СчетаУчетаВНТТ.СрезПоследних(&КонДата, ) КАК РегСчетаУчетаВНТТ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТорговаяТочка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(Хозрасчетный.Подразделение, &ПустоеПодразделение) КАК Подразделение,
		|	ВЫРАЗИТЬ(Хозрасчетный.Субконто1 КАК Справочник.Склады) КАК Субконто1,
		|	Хозрасчетный.СуммаОстатокКт КАК СуммаОстатокКт,
		|	Хозрасчетный.СуммаНУОстатокКт КАК СуммаНУОстатокКт,
		|	Хозрасчетный.СуммаПРОстатокКт КАК СуммаПРОстатокКт,
		|	Хозрасчетный.СуммаВРОстатокКт КАК СуммаВРОстатокКт
		|ПОМЕСТИТЬ ВТ_ХозрасчетныйОстаткиТН
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонГраница, Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТорговаяНаценкаНТТ), &ВидыСубконто, Организация = &Организация) КАК Хозрасчетный
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Субконто1,
		|	Подразделение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(Хозрасчетный.Подразделение, &ПустоеПодразделение) КАК Подразделение,
		|	ВЫРАЗИТЬ(Хозрасчетный.Субконто1 КАК Справочник.Склады) КАК Субконто1,
		|	Хозрасчетный.СуммаОстатокДт КАК СуммаОстатокДт
		|ПОМЕСТИТЬ ВТ_ХозрасчетныйОстаткиПС
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонГраница, Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ), &ВидыСубконто, Организация = &Организация) КАК Хозрасчетный
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Субконто1,
		|	Подразделение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ХозрасчетныйОборотыДтКт.ПодразделениеКт, &ПустоеПодразделение) КАК Подразделение,
		|	ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК Справочник.Склады) КАК СубконтоКт1,
		|	ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаОборот
		|ПОМЕСТИТЬ ВТ_ХозрасчетныйОборотыДтКт
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
		|			&НачДата,
		|			&КонДата,
		|			,
		|			СчетДт В
		|				(ВЫБРАТЬ
		|					ВТ_Счета9002.Счет
		|				ИЗ
		|					ВТ_Счета9002),
		|			,
		|			СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ),
		|			&ВидыСубконто,
		|			Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СубконтоКт1,
		|	Подразделение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ХозрасчетныйОстаткиТН.Подразделение КАК Подразделение,
		|	ВТ_ХозрасчетныйОстаткиТН.Субконто1 КАК Склады,
		|	ВТ_ХозрасчетныйОстаткиТН.Субконто1.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	СУММА(ВТ_ХозрасчетныйОстаткиТН.СуммаОстатокКт) КАК ТорговаяНаценкаОстаток,
		|	СУММА(ВТ_ХозрасчетныйОстаткиТН.СуммаНУОстатокКт) КАК ТорговаяНаценкаОстатокНУ,
		|	СУММА(ВТ_ХозрасчетныйОстаткиТН.СуммаПРОстатокКт) КАК ТорговаяНаценкаОстатокПР,
		|	СУММА(ВТ_ХозрасчетныйОстаткиТН.СуммаВРОстатокКт) КАК ТорговаяНаценкаОстатокВР,
		|	СУММА(ВТ_ХозрасчетныйОборотыДтКт.СуммаОборот) КАК ПродажнаяСтоимостьРеализация,
		|	СУММА(ЕСТЬNULL(ВТ_ХозрасчетныйОстаткиПС.СуммаОстатокДт, 0)) КАК ПродажнаяСтоимостьОстаток,
		|	ВЫБОР
		|		КОГДА ВТ_СчетаУчетаВНТТ.СчетРасходовОтРеализации ЕСТЬ НЕ NULL 
		|				И ВТ_СчетаУчетаВНТТ.СчетРасходовОтРеализации <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|			ТОГДА ВТ_СчетаУчетаВНТТ.СчетРасходовОтРеализации
		|		ИНАЧЕ ВЫБОР
		|				КОГДА &РозничнаяТорговляОблагаетсяЕНВД
		|					ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СебестоимостьПродажЕНВД)
		|				ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД)
		|			КОНЕЦ
		|	КОНЕЦ КАК СчетСебестоимости
		|ИЗ
		|	ВТ_ХозрасчетныйОстаткиТН КАК ВТ_ХозрасчетныйОстаткиТН
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ХозрасчетныйОборотыДтКт КАК ВТ_ХозрасчетныйОборотыДтКт
		|		ПО ВТ_ХозрасчетныйОстаткиТН.Подразделение = ВТ_ХозрасчетныйОборотыДтКт.Подразделение
		|			И ВТ_ХозрасчетныйОстаткиТН.Субконто1 = ВТ_ХозрасчетныйОборотыДтКт.СубконтоКт1
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ХозрасчетныйОстаткиПС КАК ВТ_ХозрасчетныйОстаткиПС
		|		ПО ВТ_ХозрасчетныйОстаткиТН.Подразделение = ВТ_ХозрасчетныйОстаткиПС.Подразделение
		|			И ВТ_ХозрасчетныйОстаткиТН.Субконто1 = ВТ_ХозрасчетныйОстаткиПС.Субконто1
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетаУчетаВНТТ КАК ВТ_СчетаУчетаВНТТ
		|		ПО ВТ_ХозрасчетныйОстаткиТН.Субконто1 = ВТ_СчетаУчетаВНТТ.ТорговаяТочка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ХозрасчетныйОстаткиТН.Субконто1,
		|	ВТ_ХозрасчетныйОстаткиТН.Субконто1.НоменклатурнаяГруппа,
		|	ВТ_ХозрасчетныйОстаткиТН.Подразделение,
		|	ВЫБОР
		|		КОГДА ВТ_СчетаУчетаВНТТ.СчетРасходовОтРеализации ЕСТЬ НЕ NULL 
		|				И ВТ_СчетаУчетаВНТТ.СчетРасходовОтРеализации <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|			ТОГДА ВТ_СчетаУчетаВНТТ.СчетРасходовОтРеализации
		|		ИНАЧЕ ВЫБОР
		|				КОГДА &РозничнаяТорговляОблагаетсяЕНВД
		|					ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СебестоимостьПродажЕНВД)
		|				ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД)
		|			КОНЕЦ
		|	КОНЕЦ
		|
		|ИМЕЮЩИЕ
		|	СУММА(ВТ_ХозрасчетныйОборотыДтКт.СуммаОборот) + СУММА(ЕСТЬNULL(ВТ_ХозрасчетныйОстаткиПС.СуммаОстатокДт, 0)) <> 0 И
		|	СУММА(ВТ_ХозрасчетныйОборотыДтКт.СуммаОборот) <> 0 И
		|	(СУММА(ВТ_ХозрасчетныйОборотыДтКт.СуммаОборот) * СУММА(ВТ_ХозрасчетныйОстаткиТН.СуммаОстатокКт) > 0
		|		ИЛИ СУММА(ВТ_ХозрасчетныйОборотыДтКт.СуммаОборот) * СУММА(ВТ_ХозрасчетныйОстаткиТН.СуммаНУОстатокКт) > 0
		|		ИЛИ СУММА(ВТ_ХозрасчетныйОборотыДтКт.СуммаОборот) * СУММА(ВТ_ХозрасчетныйОстаткиТН.СуммаПРОстатокКт) > 0
		|		ИЛИ СУММА(ВТ_ХозрасчетныйОборотыДтКт.СуммаОборот) * СУММА(ВТ_ХозрасчетныйОстаткиТН.СуммаВРОстатокКт) > 0)
		|ИТОГИ
		|	МАКСИМУМ(НоменклатурнаяГруппа)
		|ПО
		|	Склады,
		|	Подразделение";
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РозничнаяТорговляОблагаетсяЕНВД", РозничнаяТорговляОблагаетсяЕНВД);
	Запрос.УстановитьПараметр("НачДата",      Реквизиты.НачДата);
	Запрос.УстановитьПараметр("КонДата",      Реквизиты.КонДата);
	Запрос.УстановитьПараметр("КонГраница",   Новый Граница(Реквизиты.КонДата, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация",  Реквизиты.Организация);
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	Запрос.УстановитьПараметр("ПустоеПодразделение", БухгалтерскийУчетПереопределяемый.ПустоеПодразделение());
	
	// Заменим обращение к реквизитам склада через переопределяемые функции.
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
								"ВТ_ХозрасчетныйОстаткиТН.Субконто1.НоменклатурнаяГруппа",
								БухгалтерскийУчетПереопределяемый.ТекстЗапросаНоменклатурнаяГруппаСклада("ВТ_ХозрасчетныйОстаткиТН.Субконто1"));
	
	Запрос.Текст     = ТекстЗапроса;
	ВыборкаПоСкладам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Склады");
	
	Пока ВыборкаПоСкладам.Следующий() Цикл
		
		НоменклатурнаяГруппаВыручки = ВыборкаПоСкладам.НоменклатурнаяГруппа;
		ВыборкаПоПодразделениям     = ВыборкаПоСкладам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Подразделение");
		
		Пока ВыборкаПоПодразделениям.Следующий() Цикл
			//Формируем проводку по списанию торговой наценки
						
			//Расчет торговой наценки
			Если РазделятьПоСтавкамНДС Тогда
				ВыборкаПоСтавкамНДС = ВыборкаПоПодразделениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СтавкиНДС");
				Пока ВыборкаПоСтавкамНДС.Следующий() Цикл
					ВыборкаДетальная = ВыборкаПоСтавкамНДС.Выбрать();
					Пока ВыборкаДетальная.Следующий() Цикл
						Запись = ТаблицаПроводокРасчетНаценки.Добавить();
						Запись.ЕстьСтавкиНДС = РазделятьПоСтавкамНДС;
						Запись.СчетКт        = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ;
						Запись.ВидСклада     = "НТТ";
						
						ТН    = ВыборкаДетальная.ТорговаяНаценкаОстаток;
						ТН_НУ = ВыборкаДетальная.ТорговаяНаценкаОстатокНУ;
						ТН_ПР = ВыборкаДетальная.ТорговаяНаценкаОстатокПР;
						ТН_ВР = ВыборкаДетальная.ТорговаяНаценкаОстатокВР;
						ПС    = ВыборкаДетальная.ПродажнаяСтоимостьОстаток;
						ОБ    = ВыборкаДетальная.ПродажнаяСтоимостьРеализация;
						
						СуммаНаценки   	= ТН * ОБ / (ПС + ОБ);
						СуммаНаценкиНУ 	= ТН_НУ * ОБ / (ПС + ОБ);
						СуммаНаценкиПР 	= ТН_ПР * ОБ / (ПС + ОБ);
						СуммаНаценкиВР  = ТН_ВР * ОБ / (ПС + ОБ);
						ПроцентСкидки  	= ТН / (ПС + ОБ) * 100;
						ПроцентСкидкиНУ = ТН_НУ / (ПС + ОБ) * 100;
						ПроцентСкидкиПР = ТН_ПР / (ПС + ОБ) * 100;
						ПроцентСкидкиВР = ТН_ВР / (ПС + ОБ) * 100;
						
						Запись.СчетДт               		= ВыборкаДетальная.СчетСебестоимости;
						Запись.СтавкиНДС            		= ВыборкаДетальная.СтавкиНДС;
						Запись.НоменклатурныеГруппы 		= НоменклатурнаяГруппаВыручки;
						Запись.Склады               		= ВыборкаДетальная.Склады;
						Запись.Подразделение        		= ВыборкаДетальная.Подразделение;
						Запись.ТорговаяНаценкаОстаток 		= ВыборкаДетальная.ТорговаяНаценкаОстаток;
						Запись.ТорговаяНаценкаОстатокНУ 	= ВыборкаДетальная.ТорговаяНаценкаОстатокНУ;
						Запись.ТорговаяНаценкаОстатокПР 	= ВыборкаДетальная.ТорговаяНаценкаОстатокПР;
						Запись.ТорговаяНаценкаОстатокВР 	= ВыборкаДетальная.ТорговаяНаценкаОстатокВР;
						Запись.ПродажнаяСтоимостьОстаток 	= ВыборкаДетальная.ПродажнаяСтоимостьОстаток;
						Запись.ПродажнаяСтоимостьРеализация = ВыборкаДетальная.ПродажнаяСтоимостьРеализация;
						Запись.ПроцентСкидкиНакидки 		= ПроцентСкидки;
						Запись.ПроцентСкидкиНакидкиНУ 		= ПроцентСкидкиНУ;
						Запись.ПроцентСкидкиНакидкиПР 		= ПроцентСкидкиПР;
						Запись.ПроцентСкидкиНакидкиВР 		= ПроцентСкидкиВР;
						Запись.СуммаНаценки         		= -СуммаНаценки;
						Запись.СуммаНаценкиНУ       		= -СуммаНаценкиНУ;
						Запись.СуммаНаценкиПР       		= -СуммаНаценкиПР;
						Запись.СуммаНаценкиВР       		= -СуммаНаценкиВР;
					КонецЦикла;
				КонецЦикла;
			Иначе
				ВыборкаДетальная = ВыборкаПоПодразделениям.Выбрать();
				Пока ВыборкаДетальная.Следующий() Цикл
					Запись = ТаблицаПроводокРасчетНаценки.Добавить();
					Запись.ЕстьСтавкиНДС = РазделятьПоСтавкамНДС;
					Запись.СчетКт        = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ;
					Запись.ВидСклада     = "НТТ";
					
					ТН 	  = ВыборкаДетальная.ТорговаяНаценкаОстаток;
					ТН_НУ = ВыборкаДетальная.ТорговаяНаценкаОстатокНУ;
					ТН_ПР = ВыборкаДетальная.ТорговаяНаценкаОстатокПР;
					ТН_ВР = ВыборкаДетальная.ТорговаяНаценкаОстатокВР;
					ПС 	  = ВыборкаДетальная.ПродажнаяСтоимостьОстаток;
					ОБ 	  = ВыборкаДетальная.ПродажнаяСтоимостьРеализация;
					
					СуммаНаценки   = ТН * ОБ / (ПС + ОБ);
					СуммаНаценкиНУ = ТН_НУ * ОБ / (ПС + ОБ);
					СуммаНаценкиПР = ТН_ПР * ОБ / (ПС + ОБ);
					СуммаНаценкиВР = ТН_ВР * ОБ / (ПС + ОБ);
					ПроцентСкидки  	= ТН / (ПС + ОБ) * 100;
					ПроцентСкидкиНУ = ТН_НУ / (ПС + ОБ) * 100;
					ПроцентСкидкиПР = ТН_ПР / (ПС + ОБ) * 100;
					ПроцентСкидкиВР = ТН_ВР / (ПС + ОБ) * 100;
					
					Запись.СчетДт               		= ВыборкаДетальная.СчетСебестоимости;
					Запись.НоменклатурныеГруппы 		= НоменклатурнаяГруппаВыручки;
					Запись.Склады               		= ВыборкаДетальная.Склады;
					Запись.Подразделение        		= ВыборкаДетальная.Подразделение;
					Запись.ТорговаяНаценкаОстаток 		= ВыборкаДетальная.ТорговаяНаценкаОстаток;
					Запись.ТорговаяНаценкаОстатокНУ 	= ВыборкаДетальная.ТорговаяНаценкаОстатокНУ;
					Запись.ТорговаяНаценкаОстатокПР 	= ВыборкаДетальная.ТорговаяНаценкаОстатокПР;
					Запись.ТорговаяНаценкаОстатокВР 	= ВыборкаДетальная.ТорговаяНаценкаОстатокВР;
					Запись.ПродажнаяСтоимостьОстаток 	= ВыборкаДетальная.ПродажнаяСтоимостьОстаток;
					Запись.ПродажнаяСтоимостьРеализация = ВыборкаДетальная.ПродажнаяСтоимостьРеализация;
					Запись.СуммаНаценки         		= -СуммаНаценки;
					Запись.СуммаНаценкиНУ       		= -СуммаНаценкиНУ;
					Запись.СуммаНаценкиПР       		= -СуммаНаценкиПР;
					Запись.СуммаНаценкиВР       		= -СуммаНаценкиВР;
					Запись.ПроцентСкидкиНакидки 		= ПроцентСкидки;
					Запись.ПроцентСкидкиНакидкиНУ 		= ПроцентСкидкиНУ;
					Запись.ПроцентСкидкиНакидкиПР 		= ПроцентСкидкиПР;
					Запись.ПроцентСкидкиНакидкиВР 		= ПроцентСкидкиВР;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	//АТТ
	РазделятьПоПартиям = БухгалтерскийУчетВызовСервераПовтИсп.НаСчетеВедетсяПартионныйУчет(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ)
						 И УчетнаяПолитика.СпособОценкиМПЗ(Реквизиты.Организация, Реквизиты.КонДата) <> Перечисления.СпособыОценки.ПоСредней;
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	Если РазделятьПоПартиям Тогда
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачДата",      Реквизиты.НачДата);
	Запрос.УстановитьПараметр("КонДата",      Реквизиты.КонДата);
	Запрос.УстановитьПараметр("КонГраница",   Новый Граница(Реквизиты.КонДата, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация",  Реквизиты.Организация);
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	Запрос.УстановитьПараметр("ПустоеПодразделение", БухгалтерскийУчетПереопределяемый.ПустоеПодразделение());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ ВТ_Счета9002
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СебестоимостьПродаж))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Хозрасчетный.Подразделение, &ПустоеПодразделение) КАК Подразделение,
	|	ВЫРАЗИТЬ(Хозрасчетный.Субконто1 КАК Справочник.Номенклатура) КАК Субконто1,
	|	ВЫРАЗИТЬ(Хозрасчетный.Субконто2 КАК Справочник.Склады) КАК Субконто2,
	// Код для замены. Начало
	|	Хозрасчетный.Субконто3 КАК Субконто3,
	// Код для замены. Конец
	|	Хозрасчетный.СуммаОстатокКт КАК СуммаОстатокКт,
	|	Хозрасчетный.СуммаНУОстатокКт КАК СуммаНУОстатокКт,
	|	Хозрасчетный.СуммаПРОстатокКт КАК СуммаПРОстатокКт,
	|	Хозрасчетный.СуммаВРОстатокКт КАК СуммаВРОстатокКт
	|ПОМЕСТИТЬ ВТ_ХозрасчетныйОстаткиТН
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонГраница, Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТорговаяНаценкаАТТ), &ВидыСубконто, Организация = &Организация) КАК Хозрасчетный
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Подразделение,
	|	Субконто1,
	// Код для замены. Начало
	|	Субконто3,
	// Код для замены. Конец
	|	Субконто2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Хозрасчетный.Подразделение, &ПустоеПодразделение) КАК Подразделение,
	|	ВЫРАЗИТЬ(Хозрасчетный.Субконто1 КАК Справочник.Номенклатура) КАК Субконто1,
	|	ВЫРАЗИТЬ(Хозрасчетный.Субконто2 КАК Справочник.Склады) КАК Субконто2,
	// Код для замены. Начало
	|	Хозрасчетный.Субконто3 КАК Субконто3,
	// Код для замены. Конец
	|	Хозрасчетный.СуммаОстатокДт КАК СуммаОстатокДт
	|ПОМЕСТИТЬ ВТ_ХозрасчетныйОстаткиПС
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонГраница, Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ), &ВидыСубконто, Организация = &Организация) КАК Хозрасчетный
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Подразделение,
	|	Субконто1,
	// Код для замены. Начало
	|	Субконто3,
	// Код для замены. Конец
	|	Субконто2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ХозрасчетныйОборотыДтКт.ПодразделениеКт, &ПустоеПодразделение) КАК ПодразделениеКт,
	|	ХозрасчетныйОборотыДтКт.СчетДт КАК СчетДт,
	|	ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК Справочник.НоменклатурныеГруппы) КАК НоменклатурнаяГруппа,
	|	ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК Справочник.Номенклатура) КАК СубконтоКт1,
	|	ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.СубконтоКт2 КАК Справочник.Склады) КАК СубконтоКт2,
	// Код для замены. Начало
	|	ХозрасчетныйОборотыДтКт.СубконтоКт3 КАК Субконто3,
	// Код для замены. Конец
	|	ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаОборот
	|ПОМЕСТИТЬ ВТ_ХозрасчетныйОборотыДтКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачДата,
	|			&КонДата,
	|			,
	|			СчетДт В
	|				(ВЫБРАТЬ
	|					ВТ_Счета9002.Счет
	|				ИЗ
	|					ВТ_Счета9002),
	|			,
	|			СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ),
	|			&ВидыСубконто,
	|			Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПодразделениеКт,
	|	СубконтоКт1,
	// Код для замены. Начало
	|	Субконто3,
	// Код для замены. Конец
	|	СубконтоКт2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ХозрасчетныйОстаткиТН.Подразделение КАК Подразделение,
	|	ВТ_ХозрасчетныйОстаткиТН.Субконто1 КАК Номенклатура,
	|	ВТ_ХозрасчетныйОстаткиТН.Субконто2 КАК Склады,
	// Код для замены. Начало
	|	ВТ_ХозрасчетныйОстаткиТН.Субконто3 КАК Партия,
	// Код для замены. Конец
	|	ВТ_ХозрасчетныйОборотыДтКт.СчетДт КАК СубСчет90_02,
	|	ВТ_ХозрасчетныйОборотыДтКт.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	МАКСИМУМ(ВТ_ХозрасчетныйОстаткиТН.СуммаОстатокКт) КАК ТорговаяНаценкаОстаток,
	|	МАКСИМУМ(ВТ_ХозрасчетныйОстаткиТН.СуммаНУОстатокКт) КАК ТорговаяНаценкаОстатокНУ,
	|	МАКСИМУМ(ВТ_ХозрасчетныйОстаткиТН.СуммаПРОстатокКт) КАК ТорговаяНаценкаОстатокПР,
	|	МАКСИМУМ(ВТ_ХозрасчетныйОстаткиТН.СуммаВРОстатокКт) КАК ТорговаяНаценкаОстатокВР,
	|	СУММА(ВТ_ХозрасчетныйОборотыДтКт.СуммаОборот) КАК ПродажнаяСтоимостьРеализация,
	|	МАКСИМУМ(ЕСТЬNULL(ВТ_ХозрасчетныйОстаткиПС.СуммаОстатокДт, 0)) КАК ПродажнаяСтоимостьОстаток
	|ИЗ
	|	ВТ_ХозрасчетныйОстаткиТН КАК ВТ_ХозрасчетныйОстаткиТН
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ХозрасчетныйОборотыДтКт КАК ВТ_ХозрасчетныйОборотыДтКт
	|		ПО ВТ_ХозрасчетныйОстаткиТН.Подразделение = ВТ_ХозрасчетныйОборотыДтКт.ПодразделениеКт
	|			И ВТ_ХозрасчетныйОстаткиТН.Субконто1 = ВТ_ХозрасчетныйОборотыДтКт.СубконтоКт1
	|			И ВТ_ХозрасчетныйОстаткиТН.Субконто2 = ВТ_ХозрасчетныйОборотыДтКт.СубконтоКт2
	// Код для замены. Начало
	|			И ВТ_ХозрасчетныйОстаткиТН.Субконто3 = ВТ_ХозрасчетныйОборотыДтКт.Субконто3
	// Код для замены. Конец
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ХозрасчетныйОстаткиПС КАК ВТ_ХозрасчетныйОстаткиПС
	|		ПО ВТ_ХозрасчетныйОстаткиТН.Подразделение = ВТ_ХозрасчетныйОстаткиПС.Подразделение
	|			И ВТ_ХозрасчетныйОстаткиТН.Субконто1 = ВТ_ХозрасчетныйОстаткиПС.Субконто1
	|			И ВТ_ХозрасчетныйОстаткиТН.Субконто2 = ВТ_ХозрасчетныйОстаткиПС.Субконто2
	// Код для замены. Начало
	|			И ВТ_ХозрасчетныйОстаткиТН.Субконто3 = ВТ_ХозрасчетныйОстаткиПС.Субконто3
	// Код для замены. Конец
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ХозрасчетныйОстаткиТН.Подразделение,
	|	ВТ_ХозрасчетныйОстаткиТН.Субконто1,
	|	ВТ_ХозрасчетныйОстаткиТН.Субконто2,
	// Код для замены. Начало
	|	ВТ_ХозрасчетныйОстаткиТН.Субконто3,
	// Код для замены. Конец
	|	ВТ_ХозрасчетныйОборотыДтКт.СчетДт,
	|	ВТ_ХозрасчетныйОборотыДтКт.НоменклатурнаяГруппа
	|
	|ИТОГИ ПО
	|	Подразделение,
	|	Номенклатура,
	|	Склады,
	|	Партия,
	|	СубСчет90_02,
	|	НоменклатурнаяГруппа";
	
	Если НЕ РазделятьПоПартиям Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И ВТ_ХозрасчетныйОстаткиТН.Субконто3 = ВТ_ХозрасчетныйОборотыДтКт.Субконто3", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И ВТ_ХозрасчетныйОстаткиТН.Субконто3 = ВТ_ХозрасчетныйОстаткиПС.Субконто3",   "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "	ХозрасчетныйОборотыДтКт.СубконтоКт3 КАК Субконто3,",                        "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "	Хозрасчетный.Субконто3 КАК Субконто3,",                                     "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТ_ХозрасчетныйОстаткиТН.Субконто3 КАК Партия", "НЕОПРЕДЕЛЕНО КАК Партия");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТ_ХозрасчетныйОстаткиТН.Субконто3,", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "	Субконто3,",                        "");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	ВыборкаПоПодразделениям = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Подразделение");
	Пока ВыборкаПоПодразделениям.Следующий() Цикл
		ВыборкаПоНоменклатуре = ВыборкаПоПодразделениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Номенклатура");
		Пока ВыборкаПоНоменклатуре.Следующий() Цикл
			ВыборкаПоСкладам = ВыборкаПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Склады");
			Пока ВыборкаПоСкладам.Следующий() Цикл
				ВыборкаПоПартиям = ВыборкаПоСкладам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,  "Партия");
				Пока ВыборкаПоПартиям.Следующий() Цикл
					
					ТН 		 = ВыборкаПоПартиям.ТорговаяНаценкаОстаток;
					ТН_НУ 	 = ВыборкаПоПартиям.ТорговаяНаценкаОстатокНУ;
					ТН_ПР 	 = ВыборкаПоПартиям.ТорговаяНаценкаОстатокПР;
					ТН_ВР 	 = ВыборкаПоПартиям.ТорговаяНаценкаОстатокВР;
					ПС 		 = ВыборкаПоПартиям.ПродажнаяСтоимостьОстаток;
					ОБ_Всего = ВыборкаПоПартиям.ПродажнаяСтоимостьРеализация;
					
					ВыборкаПоСчетам = ВыборкаПоПартиям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СубСчет90_02");
					Пока ВыборкаПоСчетам.Следующий() Цикл
						ВыборкаПоНГ = ВыборкаПоСчетам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "НоменклатурнаяГруппа");
						Пока ВыборкаПоНГ.Следующий() Цикл
							//Расчет торговой наценки
							
							ОБ = ВыборкаПоНГ.ПродажнаяСтоимостьРеализация;
							
							Если ПС + ОБ_Всего = 0 Тогда
								Продолжить;
							Иначе
								СуммаНаценки   	= ТН * ОБ / (ПС + ОБ_Всего);
								СуммаНаценкиНУ 	= ТН_НУ * ОБ / (ПС + ОБ_Всего);
								СуммаНаценкиПР 	= ТН_ПР * ОБ / (ПС + ОБ_Всего);
								СуммаНаценкиВР 	= ТН_ВР * ОБ / (ПС + ОБ_Всего);
								ПроцентСкидки  	= ТН / (ПС + ОБ_Всего) * 100;
								ПроцентСкидкиНУ = ТН_НУ / (ПС + ОБ_Всего) * 100;
								ПроцентСкидкиПР = ТН_ПР / (ПС + ОБ_Всего) * 100;
								ПроцентСкидкиВР = ТН_ВР / (ПС + ОБ_Всего) * 100;
							КонецЕсли;
							
							Если (СуммаНаценки > 0) ИЛИ (СуммаНаценкиНУ > 0) ИЛИ (СуммаНаценкиПР > 0) ИЛИ (СуммаНаценкиВР > 0) Тогда
								
								//Формируем проводку по списанию торговой наценки
								Запись = ТаблицаПроводокРасчетНаценки.Добавить();
								Запись.СчетДт         				= ВыборкаПоНГ.СубСчет90_02;
								Запись.НоменклатурныеГруппы 		= ВыборкаПоНГ.НоменклатурнаяГруппа;
								Запись.СчетКт         				= ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
								Запись.ВидСклада      				= "АТТ";
								Запись.ЕстьПартии     				= РазделятьПоПартиям;
								Запись.Номенклатура   				= ВыборкаПоПартиям.Номенклатура;
								Запись.Склады         				= ВыборкаПоПартиям.Склады;
								Запись.Подразделение 				= ВыборкаПоПартиям.Подразделение;
								Запись.СуммаНаценки	 	 			= -СуммаНаценки;
								Запись.СуммаНаценкиНУ 				= -СуммаНаценкиНУ;
								Запись.СуммаНаценкиПР 				= -СуммаНаценкиПР;
								Запись.СуммаНаценкиВР 				= -СуммаНаценкиВР;
								Запись.ПроцентСкидкиНакидки 		= ПроцентСкидки;
								Запись.ПроцентСкидкиНакидкиНУ 		= ПроцентСкидкиНУ;
								Запись.ПроцентСкидкиНакидкиПР 		= ПроцентСкидкиПР;
								Запись.ПроцентСкидкиНакидкиВР 		= ПроцентСкидкиВР;
								Запись.ТорговаяНаценкаОстаток 		= ВыборкаПоНГ.ТорговаяНаценкаОстаток;
								Запись.ТорговаяНаценкаОстатокНУ 	= ВыборкаПоНГ.ТорговаяНаценкаОстатокНУ;
								Запись.ТорговаяНаценкаОстатокПР 	= ВыборкаПоНГ.ТорговаяНаценкаОстатокПР;
								Запись.ТорговаяНаценкаОстатокВР 	= ВыборкаПоНГ.ТорговаяНаценкаОстатокВР;
								Запись.ПродажнаяСтоимостьОстаток 	= ВыборкаПоНГ.ПродажнаяСтоимостьОстаток;
								Запись.ПродажнаяСтоимостьРеализация = ВыборкаПоНГ.ПродажнаяСтоимостьРеализация;
								
								Если РазделятьПоПартиям Тогда
									Запись.Партии     = ВыборкаПоПартиям.Партия;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаПроводокРасчетНаценки;
	
КонецФункции // ПодготовитьТаблицуРасчетТорговойНаценки()

Функция ПолучитьТаблицаРасчетНаценки()
	
	ОписаниеТипаЧисла15_2 = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2);
	ОписаниеТипаЧисла15_8 = ОбщегоНазначения.ОписаниеТипаЧисло(15, 8);
	ОписаниеТипаСчетХозр  = Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный");
	ОписаниеТипаБулево    = Новый ОписаниеТипов("Булево");
	
	ТаблицаРасчетНаценки = Новый ТаблицаЗначений;
	ТаблицаРасчетНаценки.Колонки.Добавить("ПродажнаяСтоимостьРеализация",	ОписаниеТипаЧисла15_2);
	ТаблицаРасчетНаценки.Колонки.Добавить("ПродажнаяСтоимостьОстаток",   	ОписаниеТипаЧисла15_2);
	ТаблицаРасчетНаценки.Колонки.Добавить("ТорговаяНаценкаОстаток", 		ОписаниеТипаЧисла15_2);
	ТаблицаРасчетНаценки.Колонки.Добавить("ТорговаяНаценкаОстатокНУ",   	ОписаниеТипаЧисла15_2);
	ТаблицаРасчетНаценки.Колонки.Добавить("ТорговаяНаценкаОстатокПР",   	ОписаниеТипаЧисла15_2);
	ТаблицаРасчетНаценки.Колонки.Добавить("ТорговаяНаценкаОстатокВР", 		ОписаниеТипаЧисла15_2);
	ТаблицаРасчетНаценки.Колонки.Добавить("ПроцентСкидкиНакидки",	 		ОписаниеТипаЧисла15_8);
	ТаблицаРасчетНаценки.Колонки.Добавить("ПроцентСкидкиНакидкиНУ",	 		ОписаниеТипаЧисла15_8);
	ТаблицаРасчетНаценки.Колонки.Добавить("ПроцентСкидкиНакидкиПР",	 		ОписаниеТипаЧисла15_8);
	ТаблицаРасчетНаценки.Колонки.Добавить("ПроцентСкидкиНакидкиВР",	 		ОписаниеТипаЧисла15_8);
	ТаблицаРасчетНаценки.Колонки.Добавить("СуммаНаценки",         			ОписаниеТипаЧисла15_2);
	ТаблицаРасчетНаценки.Колонки.Добавить("СуммаНаценкиНУ",       			ОписаниеТипаЧисла15_2);
	ТаблицаРасчетНаценки.Колонки.Добавить("СуммаНаценкиПР",       			ОписаниеТипаЧисла15_2);
	ТаблицаРасчетНаценки.Колонки.Добавить("СуммаНаценкиВР",       			ОписаниеТипаЧисла15_2);
	ТаблицаРасчетНаценки.Колонки.Добавить("СчетДт",               			ОписаниеТипаСчетХозр);
	ТаблицаРасчетНаценки.Колонки.Добавить("СчетКт",               			ОписаниеТипаСчетХозр);
	ТаблицаРасчетНаценки.Колонки.Добавить("ВидСклада",            			ОбщегоНазначения.ОписаниеТипаСтрока(3));
	ТаблицаРасчетНаценки.Колонки.Добавить("ЕстьПартии",           			ОписаниеТипаБулево);
	ТаблицаРасчетНаценки.Колонки.Добавить("ЕстьСтавкиНДС",        			ОписаниеТипаБулево);
	ТаблицаРасчетНаценки.Колонки.Добавить("Склады",               			Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаРасчетНаценки.Колонки.Добавить("Партии");
	ТаблицаРасчетНаценки.Колонки.Добавить("СтавкиНДС",            			Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	ТаблицаРасчетНаценки.Колонки.Добавить("Номенклатура",         			Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаРасчетНаценки.Колонки.Добавить("НоменклатурныеГруппы", 			БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьОписаниеТиповНоменклатурнойГруппы());
	ТаблицаРасчетНаценки.Колонки.Добавить("Подразделение",        			БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	
	Возврат ТаблицаРасчетНаценки;
	
КонецФункции

Функция ПодготовитьПараметрыРасчетТорговойНаценки(ТаблицаРасчетНаценки, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаПроводокРасчетНаценки
	
	СписокОбязательныхКолонок = ""
	+ "ПродажнаяСтоимостьРеализация,"         // <Число, 15, 2>
	+ "ПродажнаяСтоимостьОстаток,"         // <Число, 15, 2>
	+ "ТорговаяНаценкаОстаток,"  // <Число, 15, 2>
	+ "ТорговаяНаценкаОстатокНУ,"  // <Число, 15, 2>
	+ "ТорговаяНаценкаОстатокПР,"  // <Число, 15, 2>
	+ "ТорговаяНаценкаОстатокВР,"  // <Число, 15, 2>
	+ "ПроцентСкидкиНакидки,"  // <Число, 15, 2>
	+ "ПроцентСкидкиНакидкиНУ,"  // <Число, 15, 2>
	+ "ПроцентСкидкиНакидкиПР,"  // <Число, 15, 2>
	+ "ПроцентСкидкиНакидкиВР,"  // <Число, 15, 2>
	+ "СуммаНаценки,"         // <Число, 15, 2>
	+ "СуммаНаценкиНУ,"       // <Число, 15, 2>
	+ "СуммаНаценкиПР,"       // <Число, 15, 2>
	+ "СуммаНаценкиВР,"       // <Число, 15, 2>
	+ "СчетДт,"               // <ПланСчетовСсылка.Хозрасчетный>
	+ "СчетКт,"               // <ПланСчетовСсылка.Хозрасчетный>
	+ "ВидСклада,"            // <Строка, 3>
	+ "ЕстьПартии,"           // <Булево>
	+ "ЕстьСтавкиНДС,"        // <Булево>
	+ "Склады,"               // <СправочникСсылка.Склады>
	+ "Партии,"
	+ "СтавкиНДС,"            // <ПеречислениеСсылка.СтавкиНДС>
	+ "Номенклатура,"         // <СправочникСсылка.Номенклатура>
	+ "НоменклатурныеГруппы," // <СправочникСсылка.НоменклатурныеГруппы>
	+ "Подразделение"         // <Ссылка на справочник подразделений>
	;
	
	Параметры.Вставить("ТаблицаПроводокРасчетНаценки", 
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРасчетНаценки, СписокОбязательныхКолонок));
		
	СписокОбязательныхКолонок = ""
	+ "ПродажнаяСтоимостьРеализация,"         // <Число, 15, 2>
	+ "ПродажнаяСтоимостьОстаток,"         // <Число, 15, 2>
	+ "ТорговаяНаценкаОстаток,"  // <Число, 15, 2>
	+ "ТорговаяНаценкаОстатокНУ,"  // <Число, 15, 2>
	+ "ТорговаяНаценкаОстатокПР,"  // <Число, 15, 2>
	+ "ТорговаяНаценкаОстатокВР,"  // <Число, 15, 2>
	+ "ПроцентСкидкиНакидки,"  // <Число, 15, 2>
	+ "ПроцентСкидкиНакидкиНУ,"  // <Число, 15, 2>
	+ "ПроцентСкидкиНакидкиПР,"  // <Число, 15, 2>
	+ "ПроцентСкидкиНакидкиВР,"  // <Число, 15, 2>
	+ "СуммаНаценки,"         // <Число, 15, 2>
	+ "СуммаНаценкиНУ,"       // <Число, 15, 2>
	+ "СуммаНаценкиПР,"       // <Число, 15, 2>
	+ "СуммаНаценкиВР,"       // <Число, 15, 2>
	+ "ВидСклада,"            // <Строка, 3>
	+ "СчетКт,"               // <ПланСчетовСсылка.Хозрасчетный>
	+ "Склады,"               // <СправочникСсылка.Склады>
	+ "Партии,"
	+ "СтавкиНДС,"            // <ПеречислениеСсылка.СтавкиНДС>
	+ "Номенклатура,"         // <СправочникСсылка.Номенклатура>
	+ "Подразделение"         // <Ссылка на справочник подразделений>
	;
	
	Параметры.Вставить("ТаблицаДвиженийРегистраРасчетНаценки", 
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРасчетНаценки, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"                          // <Дата>
	+ "НачДата,"                         // <Дата>
	+ "КонДата,"                         // <Дата>
	+ "Организация,"                     // <СправочникСсылка.Организации>
	+ "Регистратор,"                     // <ДокументСсылка.*>
	+ "Содержание"                       // <Строка, 150>
	;
	
	Параметры.Вставить("Реквизиты", 
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции // ПодготовитьПараметрыРасчетТорговойНаценки()

// СПИСАНИЕ УБЫТКОВ ПРОШЛЫХ ЛЕТ

Процедура СформироватьДвиженияСписаниеУбытков(ТаблицаУбытков, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры       = ПодготовитьПараметрыСписаниеУбытков(ТаблицаРеквизиты);
	Реквизиты       = Параметры.Реквизиты[0];
	ПоддержкаПБУ18  = УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);
	
	СуммаСписания = Реквизиты.СуммаСписания;
	
	Для каждого УбытокПрошлогоПериода Из ТаблицаУбытков Цикл
		
		Если СуммаСписания = 0 Тогда
			Прервать;
		КонецЕсли;
		
		СуммаУбыткаВсего = УбытокПрошлогоПериода.СуммаУбыткаВсего;
		
		Если СуммаСписания > 0 Тогда 
			СуммаУбыткаМожноСписать = ?( СуммаСписания < УбытокПрошлогоПериода.Остаток, СуммаСписания,  УбытокПрошлогоПериода.Остаток);
		Иначе
			СуммаУбыткаМожноСписать = ?(-СуммаСписания < УбытокПрошлогоПериода.СуммаНУ, СуммаСписания, -УбытокПрошлогоПериода.СуммаНУ);
		КонецЕсли;
		
		Если СуммаСписания <> 0 Тогда 
			СуммаСписания  = СуммаСписания - СуммаУбыткаМожноСписать;
			
			Если СуммаУбыткаМожноСписать <> 0 Тогда
				Проводка = Движения.Хозрасчетный.Добавить();
				Проводка.Период                            = Реквизиты.Период;
				Проводка.Организация                       = Реквизиты.Организация;
				Проводка.СчетДт                            = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД;
				Проводка.СубконтоДт.ПрибылиИУбытки         = Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж;
				Проводка.СчетКт                            = УбытокПрошлогоПериода.Счет;
				Проводка.СубконтоКт.РасходыБудущихПериодов = УбытокПрошлогоПериода.РБП;
				Проводка.Содержание                        = Реквизиты.Содержание;
				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(
					СуммаУбыткаМожноСписать, СуммаУбыткаМожноСписать, 0, 0,
					- СуммаУбыткаМожноСписать, -СуммаУбыткаМожноСписать, 
					Проводка, ПоддержкаПБУ18); 
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры // СформироватьДвиженияСписаниеУбытков()

Функция ПодготовитьТаблицуУбытков(СуммаСписания = 0, ТаблицаРеквизиты, Отказ) Экспорт
	Параметры = ПодготовитьПараметрыСписаниеУбытков(ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоГода",  НачалоГода(Реквизиты.НачДата));
	Запрос.УстановитьПараметр("КонДата",     Реквизиты.КонДата);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ ВТ_Счета99
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт) - СУММА(ХозрасчетныйОбороты.СуммаНУОборотДт) КАК ПрибыльНУ
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоГода,
	|			&КонДата,
	|			,
	|			Счет В
	|				(ВЫБРАТЬ
	|					ВТ_Счета99.Счет
	|				ИЗ
	|					ВТ_Счета99),
	|			,
	|			Организация = &Организация,
	|			,
	|			) КАК ХозрасчетныйОбороты";
	
	Результат = Запрос.Выполнить().Выгрузить();
	ПрибыльНУ = Результат.Итог("ПрибыльНУ");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоГода",  НачалоГода(Реквизиты.НачДата));
	Запрос.УстановитьПараметр("КонДата",     Реквизиты.КонДата);
	Запрос.УстановитьПараметр("ДатаОкончанияСписания", НачалоДня(Реквизиты.КонДата));
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ ВТ_Счета97
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасходыБудущихПериодов))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.РасходыБудущихПериодов).ДатаНачалаСписания КАК ГОД,
	|	ХозрасчетныйОбороты.Счет КАК Счет,
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт) КАК СуммаНУ,
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.РасходыБудущихПериодов) КАК РБП,
	|	ХозрасчетныйОбороты.СуммаНУКонечныйОстаток КАК Остаток,
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.РасходыБудущихПериодов).Сумма КАК СуммаУбыткаВсего
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
	|			&НачалоГода,
	|			&КонДата,
	|			,
	|			,
	|			Счет В
	|				(ВЫБРАТЬ
	|					ВТ_Счета97.Счет
	|				ИЗ
	|					ВТ_Счета97),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов),
	|			Организация = &Организация
	|				И ВЫРАЗИТЬ(Субконто1 КАК Справочник.РасходыБудущихПериодов).ВидРБП = ЗНАЧЕНИЕ(Перечисление.ВидыРБП.УбыткиПрошлыхЛет)
	|				И ВЫРАЗИТЬ(Субконто1 КАК Справочник.РасходыБудущихПериодов).ДатаНачалаСписания <= &НачалоГода
	|				И ВЫРАЗИТЬ(Субконто1 КАК Справочник.РасходыБудущихПериодов).ДатаОкончанияСписания >= &ДатаОкончанияСписания) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.СуммаНУКонечныйОстаток,
	|	ХозрасчетныйОбороты.Счет,
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.РасходыБудущихПериодов).ДатаНачалаСписания,
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.РасходыБудущихПериодов),
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.РасходыБудущихПериодов).Сумма
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГОД";
	
	ТаблицаУбытков      = Запрос.Выполнить().Выгрузить();
	ВсегоУбытковСписано = ТаблицаУбытков.Итог("СуммаНУ");
	ВсегоУбытков        = ТаблицаУбытков.Итог("Остаток");
	
	Если ПрибыльНУ <= 0 И ВсегоУбытковСписано = 0 Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Если ПрибыльНУ <= 0 Тогда
		СуммаСписания = ?(ПрибыльНУ > -ВсегоУбытковСписано, ПрибыльНУ,    -ВсегоУбытковСписано);
	Иначе
		СуммаСписания = ?(ПрибыльНУ >  ВсегоУбытков + ВсегоУбытковСписано, ВсегоУбытков, ПрибыльНУ);
	КонецЕсли;
	
	Если СуммаСписания < 0 Тогда
		ТаблицаУбытков.Сортировать("Год Убыв");
	КонецЕсли;
	
	Возврат ТаблицаУбытков;
	
КонецФункции // ПодготовитьТаблицуУбытков()

Функция ПодготовитьПараметрыСписаниеУбытков(ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"       // <Дата>
	+ "НачДата,"      // <Дата>
	+ "КонДата,"      // <Дата>
	+ "Организация,"  // <СправочникСсылка.Организации>
	+ "Регистратор,"  // <ДокументСсылка.*>
	+ "Содержание,"   // <Строка, 150>
	+ "СуммаСписания" // <Число, 15, 2>
	;
	
	Параметры.Вставить("Реквизиты", 
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции // ПодготовитьПараметрыСписаниеУбытков()

// РЕЗЕРВЫ ПО СОМНИТЕЛЬНЫМ ДОЛГАМ

Процедура ПодготовитьТаблицыРачетРезервовПоСомнительнымДолгам(РезервыПоСомнительнымДолгам, ТаблицаДолейКосвенныхРасходов, ТаблицаРеквизиты, Отказ) Экспорт
	
	ТаблицыРезервовПоСомнительнымДолгам    = ПолучитьТаблицаРезервовПоСомнительнымДолгам();
	Параметры = ПодготовитьПараметрыРезервовПоСомнительнымДолгам(ТаблицыРезервовПоСомнительнымДолгам, РезервыПоСомнительнымДолгам, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	РасчетРезервыПоСомнительнымДолгам = Параметры.РезервыПоСомнительнымДолгам;
	
	Если РасчетРезервыПоСомнительнымДолгам.Количество() > 0 Тогда
		РасчетРезервыПоСомнительнымДолгам.Очистить();
	КонецЕсли;
	
	РасчетРезервыПоСомнительнымДолгам = УчетДоходовРасходов.СформироватьТаблицуРасчетаРезервовПоСомнительнымДолгам(ТаблицаРеквизиты, ТаблицаДолейКосвенныхРасходов);
	
	РезервыПоСомнительнымДолгам = РасчетРезервыПоСомнительнымДолгам.Скопировать();
	
КонецПроцедуры // ПодготовитьТаблицыРезервыПоСомнительнымДолгам()

Функция ПолучитьТаблицаРезервовПоСомнительнымДолгам()
	
	ОписаниеТипаЧисла15_2 = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2);
	ОписаниеТипаСчетХозр  = Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный");
	
	ТаблицаРезервовПоСомнительнымДолгам = Новый ТаблицаЗначений;
	ТаблицаРезервовПоСомнительнымДолгам.Колонки.Добавить("Сумма",              ОписаниеТипаЧисла15_2);
	ТаблицаРезервовПоСомнительнымДолгам.Колонки.Добавить("НачисленоБУ",        ОписаниеТипаЧисла15_2);
	ТаблицаРезервовПоСомнительнымДолгам.Колонки.Добавить("НачисленоНУ",        ОписаниеТипаЧисла15_2);
	ТаблицаРезервовПоСомнительнымДолгам.Колонки.Добавить("ВосстановленоБУ",    ОписаниеТипаЧисла15_2);
	ТаблицаРезервовПоСомнительнымДолгам.Колонки.Добавить("ВосстановленоНУ",    ОписаниеТипаСчетХозр);
	ТаблицаРезервовПоСомнительнымДолгам.Колонки.Добавить("ПрисоединеноБУ",     ОписаниеТипаСчетХозр);
	ТаблицаРезервовПоСомнительнымДолгам.Колонки.Добавить("НачисленоСНачалаГодаНУ",ОписаниеТипаСчетХозр);
	ТаблицаРезервовПоСомнительнымДолгам.Колонки.Добавить("Контрагент",         Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаРезервовПоСомнительнымДолгам.Колонки.Добавить("ДоговорКонтрагента", БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьОписаниеТиповДоговора());
	ТаблицаРезервовПоСомнительнымДолгам.Колонки.Добавить("ДокументРасчетовСКонтрагентом",      Неопределено);
	
	Возврат ТаблицаРезервовПоСомнительнымДолгам;
	
КонецФункции

Функция ПодготовитьПараметрыРезервовПоСомнительнымДолгам(ТаблицаПроводок, РезервыПоСомнительнымДолгам, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаРезервовПоСомнительнымДолгам
	
	СписокОбязательныхКолонок = ""
	+ "НачисленоБУ,"     // <Число, 15, 2>
	+ "НачисленоНУ,"     // <Число, 15, 2>
	+ "ВосстановленоБУ," // <Число, 15, 2>
	+ "ВосстановленоНУ," // <Число, 15, 2>
	+ "ПрисоединеноБУ,"   // <Число, 15, 2>
	+ "НачисленоСНачалаГодаНУ,"   // <Число, 15, 2>
	+ "Контрагент,"   // <СправочникСсылка.Контрагент>
	+ "ДоговорКонтрагента,"      // <СправочникСсылка.ДоговораКонтрагнетов>
	+ "ДокументРасчетовСКонтрагентом" // <Документы расчетов с контрагентами>
	;
	
	Параметры.Вставить("ТаблицаРезервовПоСомнительнымДолгам", 
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаПроводок, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.РезервыПоСомнительнымДолгам
	
	Параметры.Вставить("РезервыПоСомнительнымДолгам", 
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(РезервыПоСомнительнымДолгам, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата>
	+ "КонДата,"                        // <Дата>
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "Регистратор"                    // <ДокументСсылка.*>
	;
	
	Параметры.Вставить("Реквизиты", 
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции // ПодготовитьПараметрыРезервовПоСомнительнымДолгам()

Процедура СформироватьДвиженияРезервыПоСомнительнымДолгам(ТаблицаРезервовПоСомнительнымДолгам, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры       = ПодготовитьПараметрыРезервовПоСомнительнымДолгам(ТаблицаРезервовПоСомнительнымДолгам, Неопределено, ТаблицаРеквизиты);
	Реквизиты       = Параметры.Реквизиты[0];
	ПрименениеПБУ18  = УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);
	Счет63   = ПланыСчетов.Хозрасчетный.РезервыПоСомнительнымДолгам;
	Счет91_1 = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
	Счет91_2 = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
	Статья   = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.РезервыПоСомнительнымДолгам");
	ТаблицаРезервовПоСомнительнымДолгам.Свернуть("Контрагент,ДоговорКонтрагента,ДокументРасчетовСКонтрагентом","НачисленоБУ,НачисленоНУ,ВосстановленоБУ,ВосстановленоНУ,ПрисоединеноБУ,НачисленоСНачалаГодаНУ");
	
	Для каждого Запись Из ТаблицаРезервовПоСомнительнымДолгам Цикл
		
		Если Запись.НачисленоБУ <> 0 Или Запись.НачисленоНУ <> 0 Тогда
			
			Проводка                = Движения.Хозрасчетный.Добавить();
			Проводка.Период         = Реквизиты.Период;
			Проводка.Организация    = Реквизиты.Организация;
			
			Проводка.СчетДт         = Счет91_2;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Статья);
			
			Проводка.СчетКт       = Счет63;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Запись.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Запись.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, Запись.ДокументРасчетовСКонтрагентом);
			
			Проводка.Сумма        = Запись.НачисленоБУ;
			
			НачисленоНУ = Запись.НачисленоНУ;
			НачисленоПР = Запись.НачисленоБУ - Запись.НачисленоНУ;
			
			НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(НачисленоНУ,НачисленоНУ,НачисленоПР, НачисленоПР,0,0,Проводка, ПрименениеПБУ18); 
			
			Проводка.Содержание   = "Начислены резервы по сомнительным долгам";
		КонецЕсли;
		
		Если Запись.ВосстановленоБУ <> 0 Или Запись.ВосстановленоНУ <> 0 Тогда
			
			Проводка                = Движения.Хозрасчетный.Добавить();
			Проводка.Период         = Реквизиты.Период;
			Проводка.Организация    = Реквизиты.Организация;
			
			Проводка.СчетКт         = Счет91_1;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Статья);
			
			Проводка.СчетДт       = Счет63;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Запись.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, Запись.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, Запись.ДокументРасчетовСКонтрагентом);
			
			Проводка.Сумма        = Запись.ВосстановленоБУ;
			
			НачисленоНУ = Запись.ВосстановленоНУ;
			НачисленоПР = Запись.ВосстановленоБУ - Запись.ВосстановленоНУ;
			
			НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(НачисленоНУ,НачисленоНУ,НачисленоПР, НачисленоПР,0,0,Проводка, ПрименениеПБУ18); 
			
			Проводка.Содержание   = "Восстановлены резервы по сомнительным долгам";
		КонецЕсли;
		
		Если Запись.ПрисоединеноБУ <> 0 Тогда

			ПрисоединеноБУ = Запись.ПрисоединеноБУ;
			
			Если ПрисоединеноБУ <> 0 Тогда
				Проводка                = Движения.Хозрасчетный.Добавить();
				Проводка.Период         = Реквизиты.Период;
				Проводка.Организация    = Реквизиты.Организация;
				
				Проводка.СчетКт         = Счет91_1;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Статья);
				
				Проводка.СчетДт       	= Счет63;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Запись.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, Запись.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, Запись.ДокументРасчетовСКонтрагентом);
				
				Проводка.Сумма        = ПрисоединеноБУ;
				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(0,0,ПрисоединеноБУ,ПрисоединеноБУ,0,0,Проводка, ПрименениеПБУ18); 
				
				Проводка.Содержание   = "Присоединение резерва к доходам";
				
				Проводка                = Движения.Хозрасчетный.Добавить();
				Проводка.Период         = Реквизиты.Период;
				Проводка.Организация    = Реквизиты.Организация;
				
				Проводка.СчетДт         = Счет91_2;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Статья);
				
				Проводка.СчетКт       	= Счет63;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Запись.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Запись.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, Запись.ДокументРасчетовСКонтрагентом);
				
				Проводка.Сумма        = ПрисоединеноБУ;
				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(0,0,ПрисоединеноБУ,ПрисоединеноБУ,0,0,Проводка, ПрименениеПБУ18); 
				
				Проводка.Содержание   = "Присоединение резерва к расходам";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры // СформироватьДвиженияРезервыПоСомнительнымДолгам()

// ЗАКРЫТИЕ СЧЕТОВ 90, 91

Процедура СформироватьДвиженияЗакрытиеЗакрытиеСчетов90_91(ТаблицаПроводок, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры       = ПодготовитьПараметрыЗакрытиеСчетов90_91(ТаблицаПроводок, ТаблицаРеквизиты);
	Реквизиты       = Параметры.Реквизиты[0];
	ПоддержкаПБУ18  = УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);
	
	Для каждого Запись Из Параметры.ТаблицаЗакрытияСчетов90_91 Цикл
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.СчетДт      = Запись.СчетДт;
		Проводка.СчетКт      = Запись.СчетКт;
		
		Если Запись.ЭтоПрибыль Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
											"ПрибылиИУбытки", Запись.ПрибылиИУбытки);
		Иначе
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
											"ПрибылиИУбытки", Запись.ПрибылиИУбытки);
		КонецЕсли;
		
		БухгалтерскийУчет.УстановитьПодразделенияПроводки(
				Проводка, Запись.Подразделение, Запись.Подразделение);
		
		Проводка.Сумма = Запись.Сумма;
		СуммаНУ        = Запись.СуммаНУ;
		СуммаПР        = Запись.СуммаПР;
		СуммаВР        = Запись.СуммаВР;
		
		НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаНУ, СуммаНУ, СуммаПР, СуммаПР,
								СуммаВР, СуммаВР, Проводка, ПоддержкаПБУ18);
		Проводка.Содержание = Реквизиты.Содержание;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры // СформироватьДвиженияЗакрытиеЗакрытиеСчетов90_91()

Функция ПодготовитьТаблицыЗакрытиеСчета90(ТаблицаРеквизиты, СписокОрганизаций, Отказ) Экспорт
	
	ЗакрытиеСчетов90_91 = ПолучитьТаблицаЗакрытияСчетов90_91();
	Параметры = ПодготовитьПараметрыЗакрытиеСчетов90_91(ЗакрытиеСчетов90_91, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	ТаблицаПроводок = Параметры.ТаблицаЗакрытияСчетов90_91;
	
	Запрос    = Новый Запрос;
	Запрос.УстановитьПараметр("НачДата",           Реквизиты.НачДата);
	Запрос.УстановитьПараметр("КонДата",           Реквизиты.КонДата);
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций.ВыгрузитьЗначения());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ ВТ_Счета90
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Продажи))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД) КАК СчетПрибылейИУбытков,
	|	ЕСТЬNULL(Хозрасчетный.СуммаОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаОборотДт, 0) КАК Прибыль,
	|	ЕСТЬNULL(Хозрасчетный.СуммаПРОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаПРОборотДт, 0) КАК ПрибыльПР,
	|	ЕСТЬNULL(Хозрасчетный.СуммаВРОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаВРОборотДт, 0) КАК ПРибыльВР,
	|	ЕСТЬNULL(Хозрасчетный.СуммаНУОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаНУОборотДт, 0) КАК ПрибыльНУ
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачДата,
	|			&КонДата,
	|			,
	|			Счет В
	|					(ВЫБРАТЬ
	|						ВТ_Счета90.Счет
	|					ИЗ
	|						ВТ_Счета90)
	|				И Счет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж)
	|				И (НЕ Счет В
	|						(ВЫБРАТЬ
	|							ВТ_СчетаЕН.Счет
	|						ИЗ
	|							ВТ_СчетаЕН)),
	|			,
	|			Организация В (&СписокОрганизаций),
	|			КорСчет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж),
	|			) КАК Хозрасчетный
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибылиИУбыткиЕНВД),
	|	ЕСТЬNULL(Хозрасчетный.СуммаОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаОборотДт, 0),
	|	ЕСТЬNULL(Хозрасчетный.СуммаПРОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаПРОборотДт, 0),
	|	ЕСТЬNULL(Хозрасчетный.СуммаВРОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаВРОборотДт, 0),
	|	ЕСТЬNULL(Хозрасчетный.СуммаНУОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаНУОборотДт, 0)
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачДата,
	|			&КонДата,
	|			,
	|			Счет В
	|					(ВЫБРАТЬ
	|						ВТ_Счета90.Счет
	|					ИЗ
	|						ВТ_Счета90)
	|				И Счет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж)
	|				И Счет В
	|					(ВЫБРАТЬ
	|						ВТ_СчетаЕН.Счет
	|					ИЗ
	|						ВТ_СчетаЕН),
	|			,
	|			Организация В (&СписокОрганизаций),
	|			КорСчет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж),
	|			) КАК Хозрасчетный";
	
	Запрос.Текст = НалоговыйУчет.ДобавитьТекстЗапросаСчетаЕНВД(Запрос);
	Результат    = Запрос.Выполнить();
	Выборка	     = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если НЕ Выборка.Прибыль = 0 ИЛИ НЕ Выборка.ПрибыльНУ = 0 ИЛИ НЕ Выборка.ПрибыльПР = 0 ИЛИ НЕ Выборка.ПрибыльВР = 0 Тогда
			Запись = ТаблицаПроводок.Добавить();
			Если Выборка.Прибыль >= 0 Тогда
				Запись.ЭтоПрибыль     = Истина;
				Запись.СчетДт         = ПланыСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж;
				Запись.СчетКт         = Выборка.СчетПрибылейИУбытков;
				Запись.ПрибылиИУбытки = Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж;
				Запись.Сумма          = Выборка.Прибыль;
				Запись.СуммаНУ        = Выборка.ПрибыльНУ;
				Запись.СуммаПР        = Выборка.ПрибыльПР;
				Запись.СуммаВР        = Выборка.ПрибыльВР;
			КонецЕсли;
			
			Если Выборка.Прибыль < 0 Тогда
				Запись.ЭтоПрибыль     = Ложь;
				Запись.СчетДт         = Выборка.СчетПрибылейИУбытков;
				Запись.СчетКт         = ПланыСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж;
				Запись.ПрибылиИУбытки = Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж;
				Запись.Сумма          = -Выборка.Прибыль;
				Запись.СуммаНУ        = -Выборка.ПрибыльНУ;
				Запись.СуммаПР        = -Выборка.ПрибыльПР;
				Запись.СуммаВР        = -Выборка.ПрибыльВР;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаПроводок;
	
КонецФункции // ПодготовитьТаблицыЗакрытиеСчета90()

Процедура СформироватьДвиженияПоОкруглениюНДС(ТаблицаРеквизиты, СписокОрганизаций, Движения) Экспорт
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	ОкруглениеНДС(Реквизиты, СписокОрганизаций, Движения);
	
	ОкруглениеНДСНалоговогоАгента(Реквизиты, СписокОрганизаций, Движения);
		
КонецПроцедуры // СформироватьДвиженияПоОкруглениюНДС()

Процедура ОкруглениеНДС(Реквизиты, СписокОрганизаций, Движения)
	
	Запрос	= Новый Запрос;
	
	СубконтоВидыПлатежейВБюджет = Новый Массив;
	СубконтоВидыПлатежейВБюджет.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	
	Запрос.УстановитьПараметр("НачДата",					 Реквизиты.НачДата);
	Запрос.УстановитьПараметр("КонДата",					 Реквизиты.КонДата);
	Запрос.УстановитьПараметр("СубконтоВидыПлатежейВБюджет", СубконтоВидыПлатежейВБюджет);
	Запрос.УстановитьПараметр("СписокОрганизаций", 			 СписокОрганизаций.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("НалогНачисленУплачен",		 Перечисления.ВидыПлатежейВГосБюджет.Налог);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Счет,
	|	СУММА(Хозрасчетный.СуммаОборотДт) КАК СуммаОборотДт,
	|	СУММА(Хозрасчетный.СуммаОборотКт) КАК СуммаОборотКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачДата,
	|			&КонДата,
	|			,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДС),
	|			&СубконтоВидыПлатежейВБюджет,
	|			Организация В (&СписокОрганизаций)
	|				И Субконто1 = &НалогНачисленУплачен,
	|			НЕ КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Касса))
	|				И НЕ КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетныеСчета)),
	|			) КАК Хозрасчетный
	|
	|СГРУППИРОВАТЬ ПО
	|	Хозрасчетный.Счет";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда 
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		ПараметрыОтчета = Новый Структура();
		ПараметрыОтчета.Вставить("Организация", 			 Реквизиты.Организация);
		ПараметрыОтчета.Вставить("ГруппаОрганизаций",        СписокОрганизаций.ВыгрузитьЗначения());
		ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета", Реквизиты.НачДата);
		ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",  Реквизиты.КонДата);
		ПараметрыОтчета.Вставить("ВесьОборотЗаПериод",  	 Истина);
		ПараметрыОтчета.Вставить("ВидДокумента");
		ПараметрыОтчета.Вставить("ДатаПодписи", Реквизиты.КонДата);
		
		Контейнер = Новый Структура();
		Контейнер.Вставить("Раздел3", ПолучитьСтруктуруПоказателейРаздела3Декларации());
		Контейнер.Вставить("Раздел4", ПолучитьСтруктуруПоказателейРаздела4Декларации());
		Контейнер.Вставить("Раздел6", ПолучитьСтруктуруПоказателейРаздела6Декларации());
		
		УчетНДС.ЗаполнитьОтчетНДСФормаОтчета2009Кв4(ПараметрыОтчета, Контейнер, Ложь);
		
		СтруктураПоказателейРаздела3 = Контейнер.Раздел3;
		СтруктураПоказателейРаздела4 = Контейнер.Раздел4;
		СтруктураПоказателейРаздела6 = Контейнер.Раздел6;
		
		УчетНДС.РасчитатьПоказателиРаздела3Декларации(СтруктураПоказателейРаздела3);
		
		ОстатокОкругления = 0;
		НДСКВозмещению = Ложь;
		ВычетПоЭкспорту = Окр(СтруктураПоказателейРаздела4.П000400000103_1) + Окр(СтруктураПоказателейРаздела6.П000600000104_1);
		НачислениеПоЭкспорту = Окр(СтруктураПоказателейРаздела6.П000600000103_1);

		Если СтруктураПоказателейРаздела3.П000300023003 > 0 Тогда 
			НДСПо68_02 = Выборка.СуммаОборотКт - Выборка.СуммаОборотДт;
			ОстатокОкругления = НДСПо68_02 - СтруктураПоказателейРаздела3.П000300023003 + ВычетПоЭкспорту - НачислениеПоЭкспорту;
		ИначеЕсли СтруктураПоказателейРаздела3.П000300024003 > 0 Тогда 
			НДСКВозмещению = Истина;
			НДСПо68_02 = Выборка.СуммаОборотДт - Выборка.СуммаОборотКт;
			ОстатокОкругления = НДСПо68_02 - СтруктураПоказателейРаздела3.П000300024003 - ВычетПоЭкспорту + НачислениеПоЭкспорту;
		КонецЕсли;
		
		Если ОстатокОкругления = 0 
			ИЛИ ОстатокОкругления > 0.99
			ИЛИ ОстатокОкругления < -0.99 Тогда // Если остаток округления больше рубля, проводку по округлению не формируем
			Возврат;
		Иначе 
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.ПрочиеПрибылиИУбытки;
			Проводка.СчетКт      = Выборка.Счет;
			Проводка.СубконтоКт.ВидыПлатежейВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог;
						
			Если НЕ НДСКВозмещению Тогда
				Проводка.Сумма = - ОстатокОкругления;
			Иначе
				Проводка.Сумма = ОстатокОкругления;
			КонецЕсли;
			
			Проводка.Содержание = Реквизиты.Содержание;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОкруглениеНДСНалоговогоАгента(Реквизиты, СписокОрганизаций, Движения)
	
	Запрос	= Новый Запрос;
	
	Запрос.УстановитьПараметр("НачДата",           Реквизиты.НачДата);
	Запрос.УстановитьПараметр("КонДата",           Реквизиты.КонДата);
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций.ВыгрузитьЗначения());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Счет,
	|	СУММА(Хозрасчетный.СуммаОборотКт) КАК СуммаОборотКт,
	|	Хозрасчетный.Субконто1 КАК Контрагент,
	|	Хозрасчетный.Субконто2 КАК Договор,
	|	Хозрасчетный.Субконто3 КАК ДокументРасчетовСКонтрагентами
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачДата, &КонДата, , Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСНалоговогоАгента), , Организация В (&СписокОрганизаций), , ) КАК Хозрасчетный
	|
	|СГРУППИРОВАТЬ ПО
	|	Хозрасчетный.Счет,
	|	Хозрасчетный.Субконто1,
	|	Хозрасчетный.Субконто2,
	|	Хозрасчетный.Субконто3";
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда 
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ОкрСумма = Окр(Выборка.СуммаОборотКт);
			ОстатокОкругления = ОкрСумма - Выборка.СуммаОборотКт;
			
			Если ОстатокОкругления = 0 Тогда 
				Продолжить;
			Иначе				
				Проводка = Движения.Хозрасчетный.Добавить();
				Проводка.Период      = Реквизиты.Период;
				Проводка.Организация = Реквизиты.Организация;
				
				Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.ПрочиеПрибылиИУбытки;
				Проводка.СчетКт      = Выборка.Счет;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКТ,
					"Контрагенты", Выборка.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКТ,
					"Договоры", Выборка.Договор);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКТ,
					"ДокументыРасчетовСКонтрагентами", Выборка.ДокументРасчетовСКонтрагентами);
					
				Проводка.Сумма 		= ОстатокОкругления;
				Проводка.Содержание = Реквизиты.Содержание;
			КонецЕсли;	
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ОкруглениеНДСНалоговогоАгента()

Функция ПолучитьСтруктуруПоказателейРаздела3Декларации()
	
	СтруктураПоказателейРаздела3 = Новый Структура;
	
	СтруктураПоказателейРаздела3.Вставить("П000300001003",0);
	СтруктураПоказателейРаздела3.Вставить("П000300002003",0);
	СтруктураПоказателейРаздела3.Вставить("П000300003003",0);
	СтруктураПоказателейРаздела3.Вставить("П000300004003",0);
	СтруктураПоказателейРаздела3.Вставить("П000300005003",0);
	СтруктураПоказателейРаздела3.Вставить("П000300006003",0);
	СтруктураПоказателейРаздела3.Вставить("П000300007003",0);
	СтруктураПоказателейРаздела3.Вставить("П000300008003",0);
	СтруктураПоказателейРаздела3.Вставить("П000300013003",0);
	СтруктураПоказателейРаздела3.Вставить("П000300014003",0);
	СтруктураПоказателейРаздела3.Вставить("П000300015003",0);
	СтруктураПоказателейРаздела3.Вставить("П000300016003",0);
	СтруктураПоказателейРаздела3.Вставить("П000300017003",0);
	СтруктураПоказателейРаздела3.Вставить("П000300018003",0);
	СтруктураПоказателейРаздела3.Вставить("П000300019003",0);
	СтруктураПоказателейРаздела3.Вставить("П000300020003",0);
	СтруктураПоказателейРаздела3.Вставить("П000300021003",0);
	СтруктураПоказателейРаздела3.Вставить("П000300022003",0);
	СтруктураПоказателейРаздела3.Вставить("П000300023003",0);
	СтруктураПоказателейРаздела3.Вставить("П000300024003",0);
	СтруктураПоказателейРаздела3.Вставить("П000300001005",0);
	СтруктураПоказателейРаздела3.Вставить("П000300002005",0);
	СтруктураПоказателейРаздела3.Вставить("П000300003005",0);
	СтруктураПоказателейРаздела3.Вставить("П000300004005",0);
	СтруктураПоказателейРаздела3.Вставить("П000300005005",0);
	СтруктураПоказателейРаздела3.Вставить("П000300006005",0);
	СтруктураПоказателейРаздела3.Вставить("П000300007005",0);
	СтруктураПоказателейРаздела3.Вставить("П000300008005",0);
	СтруктураПоказателейРаздела3.Вставить("П000300009005",0);
	СтруктураПоказателейРаздела3.Вставить("П000300010005",0);
	СтруктураПоказателейРаздела3.Вставить("П000300011005",0);
	СтруктураПоказателейРаздела3.Вставить("П000300012005",0);
	
	Возврат СтруктураПоказателейРаздела3;
	
КонецФункции

Функция ПолучитьСтруктуруПоказателейРаздела4Декларации()
	
	СтруктураПоказателейРаздела4 = Новый Структура;
	
	СтруктураПоказателейРаздела4.Вставить("П000400000102_1",0);
	СтруктураПоказателейРаздела4.Вставить("П000400000103_1",0);
	
	Возврат СтруктураПоказателейРаздела4;
	
КонецФункции

Функция ПолучитьСтруктуруПоказателейРаздела6Декларации()

	СтруктураПоказателейРаздела6 = Новый Структура;
	
	СтруктураПоказателейРаздела6.Вставить("П000600000102_1", 0);
	СтруктураПоказателейРаздела6.Вставить("П000600000103_1", 0);
	СтруктураПоказателейРаздела6.Вставить("П000600000104_1", 0);
	
	Возврат СтруктураПоказателейРаздела6;

КонецФункции

Функция ПодготовитьТаблицыЗакрытиеСчета91(ТаблицаРеквизиты, СписокОрганизаций, Отказ) Экспорт
	
	ЗакрытиеСчетов90_91 = ПолучитьТаблицаЗакрытияСчетов90_91();
	Параметры = ПодготовитьПараметрыЗакрытиеСчетов90_91(ЗакрытиеСчетов90_91, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	ТаблицаПроводок = Параметры.ТаблицаЗакрытияСчетов90_91;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачДата",           Реквизиты.НачДата);
	Запрос.УстановитьПараметр("КонДата",           Реквизиты.КонДата);
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("КоэффициентЕНВД",   Реквизиты.КоэффициентЕНВД);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счета
	|ПОМЕСТИТЬ ВТ_Счета91
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеДоходыИРасходы))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД) КАК СчетПрибылейИУбытков,
	|	ЕСТЬNULL(Хозрасчетный.СуммаОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаОборотДт, 0) КАК Прибыль,
	|	ЕСТЬNULL(Хозрасчетный.СуммаПРОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаПРОборотДт, 0) КАК ПрибыльПР,
	|	ЕСТЬNULL(Хозрасчетный.СуммаВРОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаВРОборотДт, 0) КАК ПРибыльВР,
	|	ЕСТЬNULL(Хозрасчетный.СуммаНУОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаНУОборотДт, 0) КАК ПрибыльНУ
	|ПОМЕСТИТЬ ВТ_Закрытие91_НеЕНВД
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачДата,
	|			&КонДата,
	|			,
	|			Счет В
	|				(ВЫБРАТЬ
	|					ВТ_Счета91.Счета
	|				ИЗ
	|					ВТ_Счета91),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы),
	|			Организация В (&СписокОрганизаций)
	|				И (ВЫРАЗИТЬ(Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)
	|					ИЛИ Субконто1 = ЗНАЧЕНИЕ(Справочник.ПрочиеДоходыИРасходы.ПустаяСсылка)),
	|			НЕ КорСчет В
	|					(ВЫБРАТЬ
	|						ВТ_Счета91.Счета
	|					ИЗ
	|						ВТ_Счета91),
	|			) КАК Хозрасчетный
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД),
	|	(ЕСТЬNULL(Хозрасчетный.СуммаОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаОборотДт, 0)) * (1 - &КоэффициентЕНВД),
	|	(ЕСТЬNULL(Хозрасчетный.СуммаПРОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаПРОборотДт, 0)) * (1 - &КоэффициентЕНВД),
	|	(ЕСТЬNULL(Хозрасчетный.СуммаВРОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаВРОборотДт, 0)) * (1 - &КоэффициентЕНВД),
	|	(ЕСТЬNULL(Хозрасчетный.СуммаНУОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаНУОборотДт, 0)) * (1 - &КоэффициентЕНВД)
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачДата,
	|			&КонДата,
	|			,
	|			Счет В
	|				(ВЫБРАТЬ
	|					ВТ_Счета91.Счета
	|				ИЗ
	|					ВТ_Счета91),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы),
	|			Организация В (&СписокОрганизаций)
	|				И ВЫРАЗИТЬ(Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты),
	|			,
	|			) КАК Хозрасчетный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибылиИУбыткиЕНВД) КАК СчетПрибылейИУбытков,
	|	ЕСТЬNULL(Хозрасчетный.СуммаОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаОборотДт, 0) КАК Прибыль,
	|	ЕСТЬNULL(Хозрасчетный.СуммаПРОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаПРОборотДт, 0) КАК ПрибыльПР,
	|	ЕСТЬNULL(Хозрасчетный.СуммаВРОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаВРОборотДт, 0) КАК ПРибыльВР,
	|	ЕСТЬNULL(Хозрасчетный.СуммаНУОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаНУОборотДт, 0) КАК ПрибыльНУ
	|ПОМЕСТИТЬ ВТ_Закрытие91_ЕНВД
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачДата,
	|			&КонДата,
	|			,
	|			Счет В
	|				(ВЫБРАТЬ
	|					ВТ_Счета91.Счета
	|				ИЗ
	|					ВТ_Счета91),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы),
	|			Организация В (&СписокОрганизаций)
	|				И ВЫРАЗИТЬ(Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения),
	|			НЕ КорСчет В
	|					(ВЫБРАТЬ
	|						ВТ_Счета91.Счета
	|					ИЗ
	|						ВТ_Счета91),
	|			) КАК Хозрасчетный
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибылиИУбыткиЕНВД),
	|	(ЕСТЬNULL(Хозрасчетный.СуммаОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаОборотДт, 0)) * &КоэффициентЕНВД,
	|	(ЕСТЬNULL(Хозрасчетный.СуммаПРОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаПРОборотДт, 0)) * &КоэффициентЕНВД,
	|	(ЕСТЬNULL(Хозрасчетный.СуммаВРОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаВРОборотДт, 0)) * &КоэффициентЕНВД,
	|	(ЕСТЬNULL(Хозрасчетный.СуммаНУОборотКт, 0) - ЕСТЬNULL(Хозрасчетный.СуммаНУОборотДт, 0)) * &КоэффициентЕНВД
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачДата,
	|			&КонДата,
	|			,
	|			Счет В
	|				(ВЫБРАТЬ
	|					ВТ_Счета91.Счета
	|				ИЗ
	|					ВТ_Счета91),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы),
	|			Организация В (&СписокОрганизаций)
	|				И ВЫРАЗИТЬ(Субконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты),
	|			,
	|			) КАК Хозрасчетный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Закрытие91_НеЕНВД.СчетПрибылейИУбытков КАК СчетПрибылейИУбытков,
	|	СУММА(ВТ_Закрытие91_НеЕНВД.Прибыль) КАК Прибыль,
	|	СУММА(ВТ_Закрытие91_НеЕНВД.ПрибыльПР) КАК ПрибыльПР,
	|	СУММА(ВТ_Закрытие91_НеЕНВД.ПРибыльВР) КАК ПРибыльВР,
	|	СУММА(ВТ_Закрытие91_НеЕНВД.ПрибыльНУ) КАК ПрибыльНУ
	|ИЗ
	|	ВТ_Закрытие91_НеЕНВД КАК ВТ_Закрытие91_НеЕНВД
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Закрытие91_НеЕНВД.СчетПрибылейИУбытков
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Закрытие91_ЕНВД.СчетПрибылейИУбытков,
	|	ВТ_Закрытие91_ЕНВД.Прибыль,
	|	ВТ_Закрытие91_ЕНВД.ПрибыльПР,
	|	ВТ_Закрытие91_ЕНВД.ПРибыльВР,
	|	ВТ_Закрытие91_ЕНВД.ПрибыльНУ
	|ИЗ
	|	ВТ_Закрытие91_ЕНВД КАК ВТ_Закрытие91_ЕНВД";
	
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если НЕ Выборка.Прибыль = 0 ИЛИ НЕ Выборка.ПрибыльНУ = 0 ИЛИ НЕ Выборка.ПрибыльПР = 0 ИЛИ НЕ Выборка.ПрибыльВР = 0 Тогда
			Запись = ТаблицаПроводок.Добавить();
			Если Выборка.Прибыль >= 0 Тогда
				Запись.ЭтоПрибыль = Истина;
				Запись.СчетДт         = ПланыСчетов.Хозрасчетный.СальдоПрочихДоходовИРасходов;
				Запись.СчетКт         = Выборка.СчетПрибылейИУбытков;
				Запись.ПрибылиИУбытки = Перечисления.ПрибылиИУбытки.СальдоПрочихДоходовИРасходов;
				Запись.Сумма          = Выборка.Прибыль;
				Запись.СуммаНУ        = Выборка.ПрибыльНУ;
				Запись.СуммаПР        = Выборка.ПрибыльПР;
				Запись.СуммаВР        = Выборка.ПрибыльВР;
			КонецЕсли;
			
			Если Выборка.Прибыль < 0 Тогда
				Запись.ЭтоПрибыль     = Ложь;
				Запись.СчетДт         = Выборка.СчетПрибылейИУбытков;
				Запись.СчетКт         = ПланыСчетов.Хозрасчетный.СальдоПрочихДоходовИРасходов;
				Запись.ПрибылиИУбытки = Перечисления.ПрибылиИУбытки.СальдоПрочихДоходовИРасходов;
				Запись.Сумма          = -Выборка.Прибыль;
				Запись.СуммаНУ        = -Выборка.ПрибыльНУ;
				Запись.СуммаПР        = -Выборка.ПрибыльПР;
				Запись.СуммаВР        = -Выборка.ПрибыльВР;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаПроводок;
	
КонецФункции // ПодготовитьТаблицыЗакрытиеСчета91()

Функция ПолучитьТаблицаЗакрытияСчетов90_91()
	
	ОписаниеТипаЧисла15_2 = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2);
	ОписаниеТипаСчетХозр  = Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный");
	
	ТаблицаЗакрытияСчетов90_91 = Новый ТаблицаЗначений;
	ТаблицаЗакрытияСчетов90_91.Колонки.Добавить("СчетДт",         ОписаниеТипаСчетХозр);
	ТаблицаЗакрытияСчетов90_91.Колонки.Добавить("СчетКт",         ОписаниеТипаСчетХозр);
	ТаблицаЗакрытияСчетов90_91.Колонки.Добавить("Сумма",          ОписаниеТипаЧисла15_2);
	ТаблицаЗакрытияСчетов90_91.Колонки.Добавить("СуммаНУ",        ОписаниеТипаЧисла15_2);
	ТаблицаЗакрытияСчетов90_91.Колонки.Добавить("СуммаПР",        ОписаниеТипаЧисла15_2);
	ТаблицаЗакрытияСчетов90_91.Колонки.Добавить("СуммаВР",        ОписаниеТипаЧисла15_2);
	ТаблицаЗакрытияСчетов90_91.Колонки.Добавить("ЭтоПрибыль",     Новый ОписаниеТипов("Булево"));
	ТаблицаЗакрытияСчетов90_91.Колонки.Добавить("ПрибылиИУбытки", Новый ОписаниеТипов("ПеречислениеСсылка.ПрибылиИУбытки"));
	ТаблицаЗакрытияСчетов90_91.Колонки.Добавить("Подразделение",  БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	
	Возврат ТаблицаЗакрытияСчетов90_91;
	
КонецФункции

Функция ПодготовитьПараметрыЗакрытиеСчетов90_91(ТаблицаПроводок, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаЗакрытияСчетов90_91
	
	СписокОбязательныхКолонок = ""
	+ "Сумма,"          // <Число, 15, 2>
	+ "СуммаНУ,"        // <Число, 15, 2>
	+ "СуммаПР,"        // <Число, 15, 2>
	+ "СуммаВР,"        // <Число, 15, 2>
	+ "СчетДт,"         // <ПланСчетовСсылка.Хозрасчетный>
	+ "СчетКт,"         // <ПланСчетовСсылка.Хозрасчетный>
	+ "ЭтоПрибыль,"     // <Булево>
	+ "ПрибылиИУбытки," // <ПеречислениеСсылка.ПрибылиИУбытки>
	+ "Подразделение"   // <Ссылка на справочник подразделений>
	;
	
	Параметры.Вставить("ТаблицаЗакрытияСчетов90_91", 
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаПроводок, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"          // <Дата>
	+ "НачДата,"         // <Дата>
	+ "КонДата,"         // <Дата>
	+ "Организация,"     // <СправочникСсылка.Организации>
	+ "Регистратор,"     // <ДокументСсылка.*>
	+ "КоэффициентЕНВД," // <Число, 15, 2>
	+ "Содержание"       // <Строка, 150>
	;
	
	Параметры.Вставить("Реквизиты", 
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции // ПодготовитьПараметрыЗакрытиеСчетов90_91()

// РЕФОРМАЦИЯ БАЛАНСА И ЗАКРЫТИЕ ГОДА

Процедура СформироватьДвиженияЗакрытиеГода(ТаблицаЗакрытие, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры       = ПодготовитьПараметрыЗакрытиеГода(ТаблицаЗакрытие, Неопределено, ТаблицаРеквизиты);
	Реквизиты       = Параметры.Реквизиты[0];
	ПоддержкаПБУ18  = УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);
	
	Если Параметры.ТаблицаЗакрытие.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Запись Из Параметры.ТаблицаЗакрытие Цикл
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.СчетДт      = Запись.СчетДт;
		Проводка.СчетКт      = Запись.СчетКт;
		Проводка.Сумма       = Запись.Сумма;
		Проводка.Содержание  = Запись.Содержание;
		
		Если Запись.КоличествоДт <> 0 Тогда
			Проводка.КоличествоДт = Запись.КоличествоДт;
		КонецЕсли;
		
		Если Запись.КоличествоКт <> 0 Тогда
			Проводка.КоличествоКт = Запись.КоличествоКт;
		КонецЕсли;
		
		Если Запись.СубконтоДт1 <> Неопределено Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Запись.СубконтоДт1);
		КонецЕсли;
		
		Если Запись.СубконтоКт1 <> Неопределено Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Запись.СубконтоКт1);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Запись.Подразделение) Тогда
			БухгалтерскийУчет.УстановитьПодразделенияПроводки(
				Проводка, Запись.Подразделение, Запись.Подразделение);
		КонецЕсли;
		
		СуммаНУ = Запись.СуммаНУ;
		СуммаПР = Запись.СуммаПР;
		СуммаВР = Запись.СуммаВР;
		
		Если СуммаНУ <> 0 Или СуммаПР <> 0 Или СуммаВР <> 0 Тогда
			НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(
				СуммаНУ, СуммаНУ, СуммаПР, СуммаПР, СуммаВР, СуммаВР, Проводка, ПоддержкаПБУ18);
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры // СформироватьДвижения99Реформация()

Процедура СформироватьДвиженияуПересчетОНАиОНО(ТаблицаЗакрытие, ТаблицаРеквизиты, Движения, Отказ, ЗакрытиеГода = Истина, СуммаПересчетаУбытков = 0) Экспорт
	
	Параметры = ПодготовитьПараметрыЗакрытиеГода(
		Неопределено, ТаблицаЗакрытие, ТаблицаРеквизиты);
		Реквизиты = Параметры.Реквизиты[0];
	
	Если Параметры.ТаблицаОНАОНО.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗакрытиеГода Тогда  
		СчетПрибыли = ?(Реквизиты.Период < '20100101', ПланыСчетов.Хозрасчетный.ПрибыльПодлежащаяРаспределению, ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиОтПересчетаОНА_ОНО);
		СчетУбытка = ?(Реквизиты.Период < '20100101', ПланыСчетов.Хозрасчетный.УбытокПодлежащийПокрытию, ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиОтПересчетаОНА_ОНО);
	Иначе
		СчетПрибыли = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиОтПересчетаОНА_ОНО;
		СчетУбытка =  ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиОтПересчетаОНА_ОНО;
	КонецЕсли;
	
	Если СуммаПересчетаУбытков <> 0 Тогда   
		Запись = Параметры.ТаблицаОНАОНО.Добавить();
		Запись.Разница = СуммаПересчетаУбытков;
		Запись.Счет = ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы;
		Запись.Вид = Перечисления.ВидыАктивовИОбязательств.УбытокТекущегоПериода;
		Запись.Содержание = "Пересчет убытков";
	КонецЕсли;
	
	Для каждого Запись Из Параметры.ТаблицаОНАОНО Цикл
		Если Запись.Счет = ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы И НЕ Запись.Разница = 0 Тогда // Счет 09
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание  = Запись.Содержание;
			
			Если Запись.Разница > 0  Тогда
				Проводка.Сумма  = Запись.Разница;
				Проводка.СчетДт = Запись.Счет;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Запись.Вид);
				Проводка.СчетКт = СчетПрибыли;
			Иначе
				Проводка.Сумма  = -Запись.Разница;
				Проводка.СчетКт = Запись.Счет;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Запись.Вид);
				Проводка.СчетДт = СчетУбытка;
			КонецЕсли;
		КонецЕсли;
		
		Если Запись.Счет = ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеОбязательства И НЕ Запись.Разница = 0 Тогда // Счет 77
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание  = Запись.Содержание;
			
			Если Запись.Разница > 0 Тогда
				Проводка.Сумма  = Запись.Разница;
				Проводка.СчетКт = Запись.Счет;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Запись.Вид);
				Проводка.СчетДт = СчетУбытка;
			Иначе
				Проводка.Сумма  = -Запись.Разница;
				Проводка.СчетДт = Запись.Счет;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Запись.Вид);
				Проводка.СчетКт = СчетПрибыли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры // СформироватьДвиженияуПересчетОНАиОНО

Функция ПодготовитьТаблицуПересчетОНАиОНО(ТаблицаРеквизиты, СписокОрганизаций, Отказ, Реформация = Истина) Экспорт
	
	ТаблицаЗакрытие = ПолучитьТаблицаОНАОНО();
	Параметры       = ПодготовитьПараметрыЗакрытиеГода(
		Неопределено, ТаблицаЗакрытие, ТаблицаРеквизиты);
	Реквизиты       = Параметры.Реквизиты[0];
	ТаблицаОНАОНО   = Параметры.ТаблицаОНАОНО;
	
	НоваяСтавка     = Реквизиты.НоваяСтавка;
	СтараяСтавка    = Реквизиты.СтараяСтавка;
	
	Если НоваяСтавка = СтараяСтавка Тогда
		Возврат ТаблицаОНАОНО;
	КонецЕсли;
	
	ТаблицаВидовАктивовИОбязательств = НалоговыйУчет.ПолучитьТаблицуВидовАктивовИОбязательств();
	Для каждого СтрокаВидАктиваОбязательства Из ТаблицаВидовАктивовИОбязательств Цикл
		ТаблицаВидаАктивовИОбязательств = НалоговыйУчет.ОстаткиВременныхРазницПоВидуАктивовОбязательств(
										СтрокаВидАктиваОбязательства, СписокОрганизаций, Реквизиты.НачалоГода, Реквизиты.КонДата);
		Если ТаблицаВидаАктивовИОбязательств.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаВидаАктивовИОбязательств.Свернуть("СчетОНАОНО, СтараяСумма", "Сумма");
		
		Для каждого Строка Из ТаблицаВидаАктивовИОбязательств Цикл
			Если НЕ (Строка.Сумма = 0 И Строка.СтараяСумма = 0) Тогда
				Запись = ТаблицаОНАОНО.Добавить();
				Запись.Счет        = Строка.СчетОНАОНО;
				Запись.Вид         = СтрокаВидАктиваОбязательства.ВидАктивовОбязательств;
				Запись.НоваяСумма  = Окр(Строка.Сумма * НоваяСтавка / 100, 2);
				Запись.СтараяСумма = Строка.СтараяСумма;
				Запись.Разница     = 0;
				Запись.Содержание  = "";
			Конецесли;
		КОнецЦикла;
	КонецЦикла;
	
	ТаблицаОНАОНО.Свернуть("Счет, Вид, СтараяСумма, Содержание", "НоваяСумма, Разница");
	
	ТаблицаОНАОНО.Колонки.Добавить("ВидАктивовИОбязательствПБУ18");
	ТаблицаОНАОНО.Колонки.Добавить("Реформация");
	ТаблицаОНАОНО.Колонки.Добавить("НоваяСтавка");
	ТаблицаОНАОНО.Колонки.Добавить("СтараяСтавка");
	
	ОНО = Перечисления.ВидыАктивовИОбязательствПБУ18.ОНО;
	ОНА = Перечисления.ВидыАктивовИОбязательствПБУ18.ОНА;
	
	Для каждого Запись Из ТаблицаОНАОНО Цикл
		Запись.Разница      = Запись.НоваяСумма - Запись.СтараяСумма;
		Запись.Содержание   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Пересчет по ставке %1'"), Строка(Окр(НоваяСтавка, 6)) + "%");
		Запись.Реформация   = Реформация;
		Запись.СтараяСтавка = СтараяСтавка;
		Запись.НоваяСтавка  = НоваяСтавка;
		Если Запись.Счет = ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы Тогда // Счет 09
			Запись.ВидАктивовИОбязательствПБУ18 = ОНА;
		Иначе
			Запись.ВидАктивовИОбязательствПБУ18 = ОНО;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаОНАОНО;
	
КонецФункции // ПодготовитьТаблицуПересчетОНАиОНО

Функция ПодготовитьТаблицуЗакрытие99Реформация(ТаблицаРеквизиты, Отказ) Экспорт
	
	ТаблицаЗакрытие = ПолучитьТаблицаЗакрытие();
	Параметры       = ПодготовитьПараметрыЗакрытиеГода(
		ТаблицаЗакрытие, Неопределено, ТаблицаРеквизиты);
	Реквизиты                   = Параметры.Реквизиты[0];
	ТаблицаЗакрытие99Реформация = Параметры.ТаблицаЗакрытие;
	ПлательщикНалогаНаПрибыль   = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаПБУ18              = УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);
	
	КонГраница = Новый Граница(Реквизиты.КонДата, ВидГраницы.Включая);
	
	// Закрытие 99 счетов в БУ и реформация баланса
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонГраница",  КонГраница);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ ВТ_СчетаПрибылейИУбытков
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибылиИУбытки))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокДт, 0) КАК СуммаДт,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокКт, 0) КАК СуммаКт,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаНУОстатокДт, 0) КАК СуммаДтНУ,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаНУОстатокКт, 0) КАК СуммаКтНУ,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаПРОстатокДт, 0) КАК СуммаДтПР,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаПРОстатокКт, 0) КАК СуммаКтПР,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаВРОстатокДт, 0) КАК СуммаДтВР,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаВРОстатокКт, 0) КАК СуммаКтВР,
	|	ХозрасчетныйОстатки.Подразделение,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокКт, 0) - ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокДт, 0) КАК СуммаСписания,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаНУОстатокКт, 0) - ЕСТЬNULL(ХозрасчетныйОстатки.СуммаНУОстатокДт, 0) КАК СуммаСписанияНУ,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаПРОстатокКт, 0) - ЕСТЬNULL(ХозрасчетныйОстатки.СуммаПРОстатокДт, 0) КАК СуммаСписанияПР,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаВРОстатокКт, 0) - ЕСТЬNULL(ХозрасчетныйОстатки.СуммаВРОстатокДт, 0) КАК СуммаСписанияВР
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&КонГраница,
	|			Счет В
	|				(ВЫБРАТЬ
	|					ВТ_СчетаПрибылейИУбытков.Счет
	|				ИЗ
	|					ВТ_СчетаПрибылейИУбытков),
	|			,
	|			Организация = &Организация) КАК ХозрасчетныйОстатки";
	
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	
	Прибыль   = 0;
	ПрибыльНУ = 0;
	ПрибыльПР = 0;
	ПрибыльВР = 0;
	
	Пока Выборка.Следующий() Цикл
		СуммаСписания = Выборка.СуммаСписания;
		СуммаСписанияНУ = 0;
		СуммаСписанияПР = 0;
		СуммаСписанияВР = 0;
		
		Прибыль = Прибыль + СуммаСписания;
		Если ПлательщикНалогаНаПрибыль Тогда
			СуммаСписанияНУ = Выборка.СуммаСписанияНУ;
			ПрибыльНУ       = ПрибыльНУ + СуммаСписанияНУ;
			Если ПоддержкаПБУ18 Тогда
				СуммаСписанияПР = Выборка.СуммаСписанияПР;
				СуммаСписанияВР = Выборка.СуммаСписанияВР;
				ПрибыльПР       = ПрибыльПР + СуммаСписанияПР;
				ПрибыльВР       = ПрибыльВР + СуммаСписанияВР;
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.Счет = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД Тогда
			СуммаСписания           = 0;
			Если ПлательщикНалогаНаПрибыль Тогда
				СуммаСписанияНУ     = 0;
				Если ПоддержкаПБУ18 Тогда
					СуммаСписанияПР = 0;
					СуммаСписанияВР = 0;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если СуммаСписания = 0 И СуммаСписанияНУ = 0 И СуммаСписанияПР = 0 И СуммаСписанияВР = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СуммаСписания > 0  Тогда
			Запись = ТаблицаЗакрытие99Реформация.Добавить();
			Запись.СчетДт        = Выборка.Счет;
			Запись.СчетКт        = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД;
			Запись.Подразделение = Выборка.Подразделение;
			Запись.Сумма         = СуммаСписания;
			Запись.СуммаНУ       = СуммаСписанияНУ;
			Запись.СуммаПР       = СуммаСписанияПР;
			Запись.СуммаВР       = СуммаСписанияВР;
			Запись.Содержание    = Реквизиты.СодержаниеРеформация;
		КонецЕсли;
		
		Если СуммаСписания < 0 Тогда
			Запись = ТаблицаЗакрытие99Реформация.Добавить();
			Запись.СчетДт        = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД;
			Запись.СчетКт        = Выборка.Счет;
			Запись.Подразделение = Выборка.Подразделение;
			Запись.Сумма         = -СуммаСписания;
			Запись.СуммаНУ       = -СуммаСписанияНУ;
			Запись.СуммаПР       = -СуммаСписанияПР;
			Запись.СуммаВР       = -СуммаСписанияВР;
			Запись.Содержание    = Реквизиты.СодержаниеРеформация;
		КонецЕсли;
	КонецЦикла;
	
	Если Прибыль > 0 Тогда
		Запись = ТаблицаЗакрытие99Реформация.Добавить();
		Запись.СчетДт        = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД;
		Запись.СчетКт        = ПланыСчетов.Хозрасчетный.ПрибыльПодлежащаяРаспределению;
		Запись.Подразделение = Выборка.Подразделение;
		Запись.Сумма         = Прибыль;
		Запись.СуммаНУ       = ПрибыльНУ;
		Запись.СуммаПР       = ПрибыльПР;
		Запись.СуммаВР       = ПрибыльВР;
		Запись.Содержание    = Реквизиты.СодержаниеРеформация;
	КонецЕсли;
	
	Если Прибыль < 0 Тогда
		Запись = ТаблицаЗакрытие99Реформация.Добавить();
		Запись.СчетДт        = ПланыСчетов.Хозрасчетный.УбытокПодлежащийПокрытию;
		Запись.СчетКт        = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД;
		Запись.Подразделение = Выборка.Подразделение;
		Запись.Сумма         = -Прибыль;
		Запись.СуммаНУ       = -ПрибыльНУ;
		Запись.СуммаПР       = -ПрибыльПР;
		Запись.СуммаВР       = -ПрибыльВР;
		Запись.Содержание    = Реквизиты.СодержаниеРеформация;
	КонецЕсли;
	
	Возврат ТаблицаЗакрытие99Реформация;
	
КонецФункции // ПодготовитьТаблицуЗакрытие99Реформация()

Функция ПодготовитьТаблицуЗакрытие90БУ(ТаблицаРеквизиты, Отказ) Экспорт
	
	ТаблицаЗакрытие     = ПолучитьТаблицаЗакрытие();
	Параметры           = ПодготовитьПараметрыЗакрытиеГода(ТаблицаЗакрытие, Неопределено, ТаблицаРеквизиты);
	Реквизиты           = Параметры.Реквизиты[0];
	
	ЗаполнитьЗакрытиеСчетаВнутреннимиЗаписями(
		Параметры.ТаблицаЗакрытие,
		Реквизиты.КонДата,
		Реквизиты.Организация,
		ПланыСчетов.Хозрасчетный.Продажи,
		ПланыСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж,
		Реквизиты.СодержаниеЗакрытиеГода);
		
	Возврат Параметры.ТаблицаЗакрытие;
		
КонецФункции

Функция ПодготовитьТаблицуЗакрытие91БУ(ТаблицаРеквизиты, Отказ) Экспорт
	
	ТаблицаЗакрытие     = ПолучитьТаблицаЗакрытие();
	Параметры           = ПодготовитьПараметрыЗакрытиеГода(ТаблицаЗакрытие, Неопределено, ТаблицаРеквизиты);
	Реквизиты           = Параметры.Реквизиты[0];
	
	ЗаполнитьЗакрытиеСчетаВнутреннимиЗаписями(
		Параметры.ТаблицаЗакрытие,
		Реквизиты.КонДата,
		Реквизиты.Организация,
		ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы,
		ПланыСчетов.Хозрасчетный.СальдоПрочихДоходовИРасходов,
		Реквизиты.СодержаниеЗакрытиеГода);
		
	Возврат Параметры.ТаблицаЗакрытие;
	
КонецФункции // ПодготовитьТаблицуЗакрытие91БУ()

// Готовит данные для закрытия счетов внутренними записями.
// См. приказ Минфина от 31 октября 2000 г. N 94н:
// "По окончании отчетного года 
// - все субсчета, открытые к счету 90 "Продажи" (кроме субсчета 90-9 "Прибыль / убыток от продаж"), 
// закрываются внутренними записями на субсчет 90-9 "Прибыль / убыток от продаж";
// - все субсчета, открытые к счету 91 "Прочие доходы и расходы" (кроме субсчета 91-9 "Сальдо прочих доходов и расходов"),
// закрываются внутренними записями на субсчет 91-9 "Сальдо прочих доходов и расходов"."
//
// Параметры:
//  Проводки			 - ТаблицаЗначений - заполняемая таблица, описывающая проводки по закрытию счета, см. ПолучитьТаблицаЗакрытие()
//  Период				 - Дата - дата, характеризующая закрываемый год: любая дата этого года
//  Организация			 - СправочникСсылка.Организации - (головная) организация
//  СинтетическийСчет	 - ПланСчетовСсылка.Хозрасчетный - закрываемый счет: 90 или 91
//  СубсчетСальдо		 - ПланСчетовСсылка.Хозрасчетный - субсчет, на который закрываются субсчета: 90.09 или 91.09
Процедура ЗаполнитьЗакрытиеСчетаВнутреннимиЗаписями(Проводки, Период, Организация, СинтетическийСчет, СубсчетСальдо, Содержание) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоСледующегоГода", КонецГода(Период) + 1);
	Запрос.УстановитьПараметр("ВсяОрганизация",       ОбщегоНазначенияБПВызовСервераПовтИсп.ВсяОрганизация(Организация));
	Запрос.УстановитьПараметр("СинтетическийСчет",    СинтетическийСчет);
	Запрос.УстановитьПараметр("СубсчетСальдо",        СубсчетСальдо);
	
	// Все субконто на счетах 90, 91 должны быть оборотными.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет,
	|	Хозрасчетный.Вид КАК Вид,
	|	Хозрасчетный.Порядок
	|ПОМЕСТИТЬ Счета
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ (&СинтетическийСчет)
	|	И НЕ Хозрасчетный.Ссылка В ИЕРАРХИИ (&СубсчетСальдо)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ХозрасчетныйОстатки.Подразделение КАК Подразделение,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстаток, 0)) КАК Сумма,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстатки.СуммаНУОстаток, 0)) КАК СуммаНУ,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстатки.СуммаПРОстаток, 0)) КАК СуммаПР,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстатки.СуммаВРОстаток, 0)) КАК СуммаВР,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОстатки.КоличествоОстаток, 0)) КАК Количество
	|ПОМЕСТИТЬ Данные
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&НачалоСледующегоГода,
	|			Счет В
	|				(ВЫБРАТЬ
	|					Счета.Счет
	|				ИЗ
	|					Счета),
	|			,
	|			Организация В (&ВсяОрганизация)) КАК ХозрасчетныйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Подразделение
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Счета.Вид КАК Вид,
	|	Данные.Счет КАК Счет,
	|	Данные.Подразделение КАК Подразделение,
	|	Данные.Сумма КАК Сумма,
	|	Данные.СуммаНУ КАК СуммаНУ,
	|	Данные.СуммаПР КАК СуммаПР,
	|	Данные.СуммаВР КАК СуммаВР,
	|	Данные.Количество КАК Количество
	|ИЗ
	|	Данные КАК Данные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Счета КАК Счета
	|		ПО Данные.Счет = Счета.Счет
	|
	|УПОРЯДОЧИТЬ ПО
	|	Счета.Порядок,
	|	Счета.Счет";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Сумма = 0 И Выборка.Количество = 0 И Выборка.СуммаНУ = 0 И Выборка.СуммаПР = 0  И Выборка.СуммаВР = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Запись = Проводки.Добавить();
		Запись.Содержание    = Содержание;
		Запись.Подразделение = Выборка.Подразделение;
		Если Выборка.Вид = ВидСчета.Пассивный Тогда
			
			Запись.СчетДт        = Выборка.Счет;
			Запись.СчетКт        = СубсчетСальдо;
			Запись.Сумма         = -Выборка.Сумма;
			Запись.СуммаНУ       = -Выборка.СуммаНУ;
			Запись.СуммаПР       = -Выборка.СуммаПР;
			Запись.СуммаВР       = -Выборка.СуммаВР;
			Запись.КоличествоДт  = -Выборка.Количество;
			
		Иначе
			
			Запись.СчетДт        = СубсчетСальдо;
			Запись.СчетКт        = Выборка.Счет;
			Запись.Сумма         = Выборка.Сумма;
			Запись.СуммаНУ       = Выборка.СуммаНУ;
			Запись.СуммаПР       = Выборка.СуммаПР;
			Запись.СуммаВР       = Выборка.СуммаВР;
			Запись.КоличествоКт  = Выборка.Количество;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьТаблицуЗакрытие20_23_25_26НУиНЕ(ТаблицаРеквизиты, Отказ) Экспорт
	
	ТаблицаЗакрытие = ПолучитьТаблицаЗакрытие();
	Параметры       = ПодготовитьПараметрыЗакрытиеГода(
		ТаблицаЗакрытие, Неопределено, ТаблицаРеквизиты);
	Реквизиты       = Параметры.Реквизиты[0];
	ТаблицаЗакрытие20_23_25_26НУ = Параметры.ТаблицаЗакрытие;
	
	// закрытие счетов 20, 23, 25, 26
	СписокСчетовНУ = Новый Массив;
	СписокСчетовНУ.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
	СписокСчетовНУ.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
	СписокСчетовНУ.Добавить(ПланыСчетов.Хозрасчетный.ДоходыРасходыНеУчитываемые);
	
	КонГраница = Новый Граница(Реквизиты.КонДата, ВидГраницы.Включая);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонГраница",     КонГраница);
	Запрос.УстановитьПараметр("Организация",    Реквизиты.Организация);
	Запрос.УстановитьПараметр("СписокСчетовНУ", СписокСчетовНУ);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ ВТ_Счета
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ (&СписокСчетовНУ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НалоговыйОстатки.Счет КАК Счет,
	|	НалоговыйОстатки.Подразделение КАК Подразделение,
	|	СУММА(ЕСТЬNULL(НалоговыйОстатки.СуммаОстатокКт, 0) - ЕСТЬNULL(НалоговыйОстатки.СуммаОстатокДт, 0)) КАК СуммаСписания,
	|	СУММА(ЕСТЬNULL(НалоговыйОстатки.СуммаНУОстатокКт, 0) - ЕСТЬNULL(НалоговыйОстатки.СуммаНУОстатокДт, 0)) КАК СуммаСписанияНУ,
	|	СУММА(ЕСТЬNULL(НалоговыйОстатки.СуммаПРОстатокКт, 0) - ЕСТЬNULL(НалоговыйОстатки.СуммаПРОстатокДт, 0)) КАК СуммаСписанияПР,
	|	СУММА(ЕСТЬNULL(НалоговыйОстатки.СуммаВРОстатокКт, 0) - ЕСТЬNULL(НалоговыйОстатки.СуммаВРОстатокДт, 0)) КАК СуммаСписанияВР,
	|	НалоговыйОстатки.Субконто1 КАК СтатьяЗатрат
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&КонГраница,
	|			Счет В
	|				(ВЫБРАТЬ
	|					ВТ_Счета.Счет
	|				ИЗ
	|					ВТ_Счета),
	|			,
	|			Организация = &Организация) КАК НалоговыйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	НалоговыйОстатки.Счет,
	|	НалоговыйОстатки.Подразделение,
	|	НалоговыйОстатки.Субконто1";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Выборка Из Результат Цикл
		Если Выборка.СуммаСписанияНУ > 0 Тогда
			Запись = ТаблицаЗакрытие20_23_25_26НУ.Добавить();
			Запись.СчетДт      = Выборка.Счет;
			Запись.СубконтоДт1 = Выборка.СтатьяЗатрат;
			Если НЕ Выборка.Счет.Забалансовый Тогда
				Запись.СчетКт      = ПланыСчетов.Хозрасчетный.ПрибыльПодлежащаяРаспределению;
			КонецЕсли;
			Запись.Сумма       = Выборка.СуммаСписания;
			Запись.СуммаНУ     = Выборка.СуммаСписанияНУ;
			Запись.СуммаПР     = Выборка.СуммаСписанияПР;
			Запись.СуммаВР     = Выборка.СуммаСписанияВР;
			Запись.Содержание  = Реквизиты.СодержаниеЗакрытиеГода;
			Запись.Подразделение = Выборка.Подразделение;

		КонецЕсли;
		
		Если Выборка.СуммаСписанияНУ < 0 Тогда
			Запись = ТаблицаЗакрытие20_23_25_26НУ.Добавить();
			Если НЕ Выборка.Счет.Забалансовый Тогда
				Запись.СчетДт      = ПланыСчетов.Хозрасчетный.УбытокПодлежащийПокрытию;
			КонецЕсли;
			Запись.СчетКт      = Выборка.Счет;
			Запись.СубконтоКт1 = Выборка.СтатьяЗатрат;
			Запись.Сумма       = -Выборка.СуммаСписания;
			Запись.СуммаНУ     = -Выборка.СуммаСписанияНУ;
			Запись.СуммаПР     = -Выборка.СуммаСписанияПР;
			Запись.СуммаВР     = -Выборка.СуммаСписанияВР;
			Запись.Содержание  = Реквизиты.СодержаниеЗакрытиеГода; 
			Запись.Подразделение = Выборка.Подразделение;

		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаЗакрытие20_23_25_26НУ;
	
КонецФункции // ПодготовитьТаблицуЗакрытие20_23_25_26НУ()

Функция ПодготовитьТаблицуЗакрытие44НУ(ТаблицаРеквизиты, Отказ) Экспорт
	
	ТаблицаЗакрытие = ПолучитьТаблицаЗакрытие();
	Параметры       = ПодготовитьПараметрыЗакрытиеГода(
		ТаблицаЗакрытие, Неопределено, ТаблицаРеквизиты);
	Реквизиты       = Параметры.Реквизиты[0];
	ТаблицаЗакрытие44НУ = Параметры.ТаблицаЗакрытие;
	
	КонГраница = Новый Граница(Реквизиты.КонДата, ВидГраницы.Включая);
	
	// закрытие счета 44 по всем статьям затрат, кроме транспортных расходов
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонГраница",  КонГраница);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ ВТ_Счета44
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасходыНаПродажу))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НалоговыйОстатки.Счет КАК Счет,
	|	НалоговыйОстатки.Подразделение КАК Подразделение,
	|	СУММА(ЕСТЬNULL(НалоговыйОстатки.СуммаОстатокКт, 0) - ЕСТЬNULL(НалоговыйОстатки.СуммаОстатокДт, 0)) КАК СуммаСписания,
	|	СУММА(ЕСТЬNULL(НалоговыйОстатки.СуммаНУОстатокКт, 0) - ЕСТЬNULL(НалоговыйОстатки.СуммаНУОстатокДт, 0)) КАК СуммаСписанияНУ,
	|	СУММА(ЕСТЬNULL(НалоговыйОстатки.СуммаПРОстатокКт, 0) - ЕСТЬNULL(НалоговыйОстатки.СуммаПРОстатокДт, 0)) КАК СуммаСписанияПР,
	|	СУММА(ЕСТЬNULL(НалоговыйОстатки.СуммаВРОстатокКт, 0) - ЕСТЬNULL(НалоговыйОстатки.СуммаВРОстатокДт, 0)) КАК СуммаСписанияВР,
	|	НалоговыйОстатки.Субконто1 КАК СтатьяЗатрат
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&КонГраница,
	|			Счет В
	|				(ВЫБРАТЬ
	|					ВТ_Счета44.Счет
	|				ИЗ
	|					ВТ_Счета44),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат),
	|			Организация = &Организация
	|				И (НЕ Субконто1.ВидРасходовНУ = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.ТранспортныеРасходы))) КАК НалоговыйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	НалоговыйОстатки.Счет,
	|	НалоговыйОстатки.Подразделение,
	|	НалоговыйОстатки.Субконто1";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Выборка Из Результат Цикл
		Если Выборка.СуммаСписанияНУ > 0 Тогда
			Запись = ТаблицаЗакрытие44НУ.Добавить();
			Запись.СчетДт      = Выборка.Счет;
			Запись.СчетКт      = ПланыСчетов.Хозрасчетный.ПрибыльПодлежащаяРаспределению;
			Запись.СубконтоДт1 = Выборка.СтатьяЗатрат;
			Запись.Сумма       = Выборка.СуммаСписания;
			Запись.СуммаНУ     = Выборка.СуммаСписанияНУ;
			Запись.СуммаПР     = Выборка.СуммаСписанияПР;
			Запись.СуммаВР     = Выборка.СуммаСписанияВР;
			Запись.Содержание  = Реквизиты.СодержаниеЗакрытиеГода;
			Запись.Подразделение = Выборка.Подразделение;

		КонецЕсли;
		
		Если Выборка.СуммаСписанияНУ < 0 Тогда
			Запись = ТаблицаЗакрытие44НУ.Добавить();
			Запись.СчетДт      = ПланыСчетов.Хозрасчетный.УбытокПодлежащийПокрытию;
			Запись.СчетКт      = Выборка.Счет;
			Запись.СубконтоКт1 = Выборка.СтатьяЗатрат;
			Запись.Сумма       = -Выборка.СуммаСписания;
			Запись.СуммаНУ     = -Выборка.СуммаСписанияНУ;
			Запись.СуммаПР     = -Выборка.СуммаСписанияПР;
			Запись.СуммаВР     = -Выборка.СуммаСписанияВР;
			Запись.Содержание  = Реквизиты.СодержаниеЗакрытиеГода; 
			Запись.Подразделение = Выборка.Подразделение;

		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаЗакрытие44НУ;
	
КонецФункции // ПодготовитьТаблицуЗакрытие44НУ()

Функция ПолучитьТаблицаЗакрытие()
	
	ОписаниеТипаЧисла15_2 = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2);
	ОписаниеТипаЧисла15_3 = ОбщегоНазначения.ОписаниеТипаЧисло(15, 3);
	ОписаниеТипаСчетХозр  = Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный");
	
	ТаблицаЗакрытие = Новый ТаблицаЗначений;
	ТаблицаЗакрытие.Колонки.Добавить("СчетДт",        ОписаниеТипаСчетХозр);
	ТаблицаЗакрытие.Колонки.Добавить("СчетКт",        ОписаниеТипаСчетХозр);
	ТаблицаЗакрытие.Колонки.Добавить("Подразделение", БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	ТаблицаЗакрытие.Колонки.Добавить("СубконтоДт1");
	ТаблицаЗакрытие.Колонки.Добавить("СубконтоКт1");
	ТаблицаЗакрытие.Колонки.Добавить("Сумма",         ОписаниеТипаЧисла15_2);
	ТаблицаЗакрытие.Колонки.Добавить("СуммаНУ",       ОписаниеТипаЧисла15_2);
	ТаблицаЗакрытие.Колонки.Добавить("СуммаПР",       ОписаниеТипаЧисла15_2);
	ТаблицаЗакрытие.Колонки.Добавить("СуммаВР",       ОписаниеТипаЧисла15_2);
	ТаблицаЗакрытие.Колонки.Добавить("КоличествоДт",  ОписаниеТипаЧисла15_3);
	ТаблицаЗакрытие.Колонки.Добавить("КоличествоКт",  ОписаниеТипаЧисла15_3);
	ТаблицаЗакрытие.Колонки.Добавить("Содержание",    ОбщегоНазначения.ОписаниеТипаСтрока(150));
	
	Возврат ТаблицаЗакрытие;
	
КонецФункции

Функция ПолучитьТаблицаОНАОНО()
	
	ОписаниеТипаЧисла15_2 = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2);
	
	ТаблицаОНАОНО = Новый ТаблицаЗначений;
	ТаблицаОНАОНО.Колонки.Добавить("Счет",        Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаОНАОНО.Колонки.Добавить("НоваяСумма",  ОписаниеТипаЧисла15_2);
	ТаблицаОНАОНО.Колонки.Добавить("СтараяСумма", ОписаниеТипаЧисла15_2);
	ТаблицаОНАОНО.Колонки.Добавить("Разница",     ОписаниеТипаЧисла15_2);
	ТаблицаОНАОНО.Колонки.Добавить("Вид",         Новый ОписаниеТипов("ПеречислениеСсылка.ВидыАктивовИОбязательств"));
	ТаблицаОНАОНО.Колонки.Добавить("Содержание",  ОбщегоНазначения.ОписаниеТипаСтрока(150));
	
	Возврат ТаблицаОНАОНО;
	
КонецФункции

Функция ПодготовитьПараметрыЗакрытиеГода(ТаблицаЗакрытие, ТаблицаОНАОНО, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаЗакрытие
	СписокОбязательныхКолонок = ""
	+ "СчетДт,"        // <ПланСчетовСсылка.Хозрасчетный>
	+ "СчетКт,"        // <ПланСчетовСсылка.Хозрасчетный>
	+ "Подразделение," // <Ссылка на справочник подразделений>
	+ "СубконтоДт1,"
	+ "СубконтоКт1,"
	+ "Сумма,"         // <Число, 15, 2>
	+ "СуммаНУ,"       // <Число, 15, 2>
	+ "СуммаПР,"       // <Число, 15, 2>
	+ "СуммаВР,"       // <Число, 15, 2>
	+ "КоличествоДт,"  // <Число, 15, 3>
	+ "КоличествоКт,"  // <Число, 15, 3>
	+ "Содержание"     // <Строка, 150>
	;
	
	Параметры.Вставить("ТаблицаЗакрытие", 
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаЗакрытие, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.ТаблицаОНАОНО
	СписокОбязательныхКолонок = ""
	+ "Счет,"        // <ПланСчетовСсылка.Хозрасчетный>
	+ "НоваяСумма,"  // <Число, 15, 2>
	+ "СтараяСумма," // <Число, 15, 2>
	+ "Разница,"     // <Число, 15, 2>
	+ "Вид,"         // <ПеречислениеСсылка.ВидыАктивовИОбязательств>
	+ "Содержание"   // <Строка, 150>
	;
	
	Параметры.Вставить("ТаблицаОНАОНО", 
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОНАОНО, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	СписокОбязательныхКолонок = ""
	+ "Период,"                  // <Дата>
	+ "НачалоГода,"              // <Дата>
	+ "НачДата,"                 // <Дата>
	+ "КонДата,"                 // <Дата>
	+ "Организация,"             // <СправочникСсылка.Организации>
	+ "Регистратор,"             // <ДокументСсылка.*>
	+ "Предприниматель,"         // <Булево>
	+ "НоваяСтавка,"             // <Число, 15, 2>
	+ "СтараяСтавка,"            // <Число, 15, 2>
	+ "СодержаниеРеформация,"    // <Строка, 150>
	+ "СодержаниеЗакрытиеГода"   // <Строка, 150>
	;
	
	Параметры.Вставить("Реквизиты", 
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции // ПодготовитьПараметрыЗакрытиеГода()

// ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ ПРИ ИЗМЕНЕНИИ СТАВКИ НАЛОГА НА ПРИБЫЛЬ

Функция ПолучитьТекстСообщенияОНеобходимостиРеформации(Период, Организация = Неопределено) Экспорт
    
    ДатаРеформации = НачалоДня(Период) - 1;
    
    Запрос = Новый Запрос;
    Запрос.УстановитьПараметр("ДатаКон", ДатаРеформации);
    
    Массив = Новый Массив;
    Массив.Добавить(ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы);
    Массив.Добавить(ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеОбязательства);
    Запрос.УстановитьПараметр("Счета", Массив);
    
    Запрос.Текст = 	
    "ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |   ХозрасчетныйОстатки.Организация КАК Организация
    |ИЗ
    |   РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаКон, Счет В ИЕРАРХИИ (&Счета), , Организация.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)) КАК ХозрасчетныйОстатки
    |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(&ДатаКон, ) КАК УчетнаяПолитикаОрганизацийСрезПоследних
    |       ПО ХозрасчетныйОстатки.Организация = УчетнаяПолитикаОрганизацийСрезПоследних.Организация
    |ГДЕ
    |   ХозрасчетныйОстатки.СуммаОстаток <> 0
    |   И УчетнаяПолитикаОрганизацийСрезПоследних.ПоддержкаПБУ18
    |   И УчетнаяПолитикаОрганизацийСрезПоследних.СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.Общая)
    |
    |УПОРЯДОЧИТЬ ПО
    |   ХозрасчетныйОстатки.Организация.Наименование";
    
    Если ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
        Запрос.УстановитьПараметр("Организация", Организация);
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "Организация.ЮридическоеФизическоеЛицо", "Организация = &Организация И Организация.ЮридическоеФизическоеЛицо");
    КонецЕсли;
    
    Результат = Запрос.Выполнить();
    
	Если Результат.Пустой() Тогда
		
        Возврат "";
		
	Иначе
	
		СписокОрганизаций = "";
	    Выборка = Результат.Выбрать();
	    Пока Выборка.Следующий() Цикл
	        СписокОрганизаций = СписокОрганизаций + "
	        |" + Выборка.Организация.ПолноеНаименование();
	    КонецЦикла;
		
		ПредставлениеПериода = Формат(Год(ДатаРеформации), "ЧГ=");
		
	    ТекстСообщения = НСтр("ru='Изменена ставка налога на прибыль.
	    |Рекомендуется выполнить регламентную операцию ""Реформация баланса"" закрытия месяца
	    |за декабрь %1 года (раздел ""Учет и отчетность - Регламентные операции"") для следующих организаций: %2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ПредставлениеПериода, СписокОрганизаций);
	    
	    Возврат ТекстСообщения;
		
	КонецЕсли;
	
КонецФункции
