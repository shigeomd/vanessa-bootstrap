
#Область ПрограммныйИнтерфейс

// Создает команду и размещает на командной панели отчета кнопку "Отправить по электронной почте"
//
// Параметры:
//  Форма - УправляемаяФорма - форма отчета.
//  ГруппаОсновнойКоманднойПанели - ГруппаФормы - группа в которой будет размещена кнопка "Отправить".
//  ЭлементОсновнойКоманднойПанели - ГруппаФормы, КнопкаФормы - элемент формы перед которым будет размещена кнопка "Отправить".
//  ГруппаДополнительнойКоманднойПанели - ГруппаФормы - дополнительная группа формы для размещения кнопки "Отправить".
//  ЭлементДополнительнойКоманднойПанели - ГруппаФормы, КнопкаФормы - элемент формы для размещения кнопки "Отправить" в
//   ГруппаДополнительнойКоманднойПанели.
//
Процедура ПриСозданииОтчетаНаСервере(Форма, ГруппаОсновнойКоманднойПанели, ЭлементОсновнойКоманднойПанели = Неопределено,
		ГруппаДополнительнойКоманднойПанели, ЭлементДополнительнойКоманднойПанели = Неопределено) Экспорт
	
	ДобавитьКомандуОтправкиНаФормуОтчета(Форма, ГруппаОсновнойКоманднойПанели, ЭлементОсновнойКоманднойПанели,
		ГруппаДополнительнойКоманднойПанели, ЭлементДополнительнойКоманднойПанели);
	
КонецПроцедуры

// Возвращает адреса электронной почты из контактной информации контрагента
//
// Параметры:
//  Контрагент - СправочникСсылка.Контрагенты - ссылка на контрагента.
//
// Возвращаемое значение:
//  СписокЗначений - содержит адрес электронной почты и представление владельца почты.
//    * Значение      - Строка - адрес электронной почты.
//    * Представление - Строка - представление владельца адреса электронной почты
//
Функция АдресаЭлектроннойПочты(Контрагент) Экспорт

	СписокАдресовПолучателя = Новый СписокЗначений;
	
	Если Контрагент  <> Неопределено Тогда
		
		ТипыКИ = Новый Массив;
		ТипыКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		
		Объекты = Новый Массив();
		Объекты.Добавить(Контрагент);
		АдресаПолучателя = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(Объекты, ТипыКИ);
		
		Для каждого АдресПолучателя Из АдресаПолучателя Цикл
			
			СписокАдресовПолучателя.Добавить(АдресПолучателя.Представление, Контрагент.Наименование);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СписокАдресовПолучателя;

КонецФункции

// Формирует таблицу с описанием команд отправки по электронной почте и помещает ее во временное хранилище
//
// Параметры:
//   ИмяФормыДокумента       - Строка - Имя формы с подключенной общей командой ОтправитьПоЭлектроннойПочте.
//   ИмяМенеджераОтправки    - Строка - Полное имя метаданных отправляемого документа.
//   УникальныйИдентификатор - УникальныйИдентификатор - Уникальный идентификатор формы, во временное хранилище которой
//                                                       надо поместить данные.
//
// Возвращаемое значение:
//  Строка - Адрес во временном хранилище.
//
Функция АдресКомандОтправки(ИмяФормыДокумента, ИмяМенеджераОтправки, УникальныйИдентификатор) Экспорт
	
	КомандыОтправки = ОтправкаПочтовыхСообщенийПовтИсп.КомандыОтправкиФормы(ИмяФормыДокумента, ИмяМенеджераОтправки);
	
	НайденныеКоманды = КомандыОтправки.НайтиСтроки(Новый Структура("СкрытаФункциональнымиОпциями", Ложь));
	
	Если НайденныеКоманды.Количество() > 0 Тогда
		ДобавитьКомандыОтправки(НайденныеКоманды);
	КонецЕсли;
	
	АдресКомандОтправки = ПоместитьВоВременноеХранилище(КомандыОтправки, УникальныйИдентификатор);
	
	Возврат АдресКомандОтправки;
	
КонецФункции

// Формирует структуру параметров электронного письма для отправки отчета.
//
// Параметры:
//  ПараметрыОтчета - Структура - см.ОтправкаПочтовыхСообщенийКлиент.ОтправитьОтчет.
//
// Возвращаемое значение:
//  Структура - Структура параметров для передачи в функцию РаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо.
//
Функция ПараметрыЭлектронногоПисьмаДляОтчетов(ПараметрыОтчета) Экспорт
	
	Вложения = ПоместитьТабличныйДокументОтчетаВоВременноеХранилище(ПараметрыОтчета);
	
	ТекстПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'К письму приложен отчет: %1.'"),
		ПараметрыОтчета.Заголовок);
		
	
	ПараметрыПисьма = ПараметрыПисьма();
	ПараметрыПисьма.Тема     = ПараметрыОтчета.Заголовок;
	ПараметрыПисьма.Текст    = ТекстПисьма;
	ПараметрыПисьма.Вложения = Вложения;
	
	Возврат ПараметрыПисьма;
	
КонецФункции

// Формирует структуру параметров электронного письма для отправки документа.
//
// Параметры:
//  НаборПечатныхФорм - Массив - содержит структуры с табличными документами и объектами печати.
//   см.ДополнительныеОтчетыИОбработки.ПечатьПоВнешнемуИсточнику и УправлениеПечатью.СформироватьПечатныеФормыДляБыстройПечати.
//  МенеджерПечати - Строка - имя менеджера печати.
//  ДополнительныеПараметры - Структура - дополнительные параметры для сохранения печатных форм:
//   * УпаковатьВАрхив - Булево - упаковать печатные формы в архив.
//   * ФорматыСохранения - Массив - содержит формат сохранения файлов см. ТипФайлаТабличногоДокумента.
//
// Возвращаемое значение:
//  Структура - Структура параметров для передачи в функцию РаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо.
//
Функция ПараметрыЭлектронногоПисьма(НаборПечатныхФорм, МенеджерПечати, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыПисьма = ПараметрыПисьма();
	
	ПечатныеФормыПоОбъектам = Новый ТаблицаЗначений;
	ПечатныеФормыПоОбъектам.Колонки.Добавить("Объект");
	ПечатныеФормыПоОбъектам.Колонки.Добавить("ПечатныеФормы");
	ПечатныеФормыПоОбъектам.Индексы.Добавить("Объект");
	
	Вложения = ПоместитьТабличныеДокументыВоВременноеХранилище(НаборПечатныхФорм, ПечатныеФормыПоОбъектам, ДополнительныеПараметры);
	
	Если Вложения.Количество() > 0 Тогда
		
		ПараметрыПисьма.Вложения = Вложения;
		
		ТабличныеДокументы = Новый СписокЗначений;
		ОбъектыПечати = Новый Массив;
		Для Каждого ПечатныеФормы Из НаборПечатныхФорм Цикл
			ОбщегоНазначенияКлиентСервер.ЗаполнитьКоллекциюСвойств(ПечатныеФормы.ТабличныеДокументы, ТабличныеДокументы);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбъектыПечати, ПечатныеФормы.ОбъектыПечати.ВыгрузитьЗначения());
		КонецЦикла;
		
		ОбъектыПечати = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОбъектыПечати);
		
		КоличествоЭД = ПрисоединитьЭлектронныеДокументы(ОбъектыПечати, Вложения);
		
		ЗаполнитьТемуПолучателяПисьма(ОбъектыПечати,
			ПечатныеФормыПоОбъектам,
			ПараметрыПисьма,
			КоличествоЭД);
		
	КонецЕсли;
	
	Возврат ПараметрыПисьма;
	
КонецФункции

// Заполняет тему, текст и получателя электронного письма.
//
// Параметры:
//  МассивОбъектов - Массив - массив ссылок на объекты.
//  КоллекцияПечатныхФорм  - ТаблицаЗначений - таблица содержащая сформированные печатные формы.
//  ПараметрыВывода  - Структура - параметры письма см. РаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо.
//  КоличествоЭД - Число - Количество пакетов с электронными документами.
//
Процедура ЗаполнитьТемуПолучателяПисьма(МассивОбъектов, КоллекцияПечатныхФорм, ПараметрыВывода, КоличествоЭД = 0) Экспорт
	
	Если ТипЗнч(МассивОбъектов[0]) = Тип("СправочникСсылка.Организации") Тогда
		ЗаполнитьТемуТелоПисьмаСКарточкойОрганизации(МассивОбъектов, ПараметрыВывода, КоллекцияПечатныхФорм);
		Возврат;
	КонецЕсли;
	
	СтруктураТиповОбъектыПечати = РазложитьСписокПоТипамОбъектов(МассивОбъектов);
	ОписаниеДопустимыхТиповКонтрагента = ОписаниеТиповИзСтроки("Контрагенты, Организации, ФизическиеЛица");
	
	ОрганизацияПоПисьму = ПолучитьЗначениеОбщегоРеквизита(СтруктураТиповОбъектыПечати, "Организация", ОписаниеТиповИзСтроки("Организации"));
	КонтрагентПоПисьму  = ПолучитьЗначениеОбщегоРеквизита(СтруктураТиповОбъектыПечати, "Контрагент",  ОписаниеДопустимыхТиповКонтрагента);
	
	Если ПараметрыВывода.Свойство("ПараметрыОтправки") Тогда
		ПараметрыПисьма = ПараметрыВывода.ПараметрыОтправки;
	Иначе
		ПараметрыПисьма = ПараметрыВывода;
	КонецЕсли;
	
	ПараметрыПисьма.Получатель = АдресаЭлектроннойПочты(КонтрагентПоПисьму);
	
	КоличествоВложений = 0;
	Если ПараметрыПисьма.Свойство("Вложения") Тогда
		КоличествоВложений = ПараметрыПисьма.Вложения.Количество();
	КонецЕсли;
	
	ЕстьОбщийКонтрагент  = НЕ КонтрагентПоПисьму  = Неопределено;
	Если ЕстьОбщийКонтрагент Тогда
		ПредставлениеКонтрагента = ПолучитьПредставлениеСПрефиксом(НСтр("ru='для'"),
			Справочники.Контрагенты.ПолучитьКраткоеНаименованиеКонтрагента(КонтрагентПоПисьму));
	Иначе
		ПредставлениеКонтрагента = "";
	КонецЕсли;
	
	ЕстьОбщаяОрганизация = НЕ ОрганизацияПоПисьму = Неопределено;
	Если ЕстьОбщаяОрганизация Тогда
		ПредставлениеОрганизации = ПолучитьПредставлениеСПрефиксом(НСтр("ru='от'"),
			ПолучитьНаименованиеКонтрагента(ОрганизацияПоПисьму));
	Иначе
		ПредставлениеОрганизации = "";
	КонецЕсли;
	
	ТемаПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Документы %1 %2'"),
		ПредставлениеКонтрагента,
		ПредставлениеОрганизации);
	
	ТекстПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'К письму приложены документы %1 %2:'"),
		ПредставлениеКонтрагента,
		ПредставлениеОрганизации);
	
	Запрос = Новый Запрос;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	ЗапросСхемы = СхемаЗапроса.ПакетЗапросов[0];
	ЗапросСхемы.ВыбиратьРазрешенные = Истина;
	
	ЭтоПервыйОператорВыбора = Истина;
	Для Каждого ТипОбъекта Из СтруктураТиповОбъектыПечати Цикл
		
		ЕстьРеквизитСумма  = ОбщегоНазначения.ЕстьРеквизитОбъекта("СуммаДокумента", ТипОбъекта.Ключ);
		ЕстьРеквизитВалюта = ОбщегоНазначения.ЕстьРеквизитОбъекта("ВалютаДокумента", ТипОбъекта.Ключ);
		
		Если ЭтоПервыйОператорВыбора Тогда
			ЭтоПервыйОператорВыбора = Ложь;
			ОператорВыбора = ЗапросСхемы.Операторы[0];
		Иначе
			ОператорВыбора = ЗапросСхемы.Операторы.Добавить();
		КонецЕсли;
		
		Источник = ОператорВыбора.Источники.Добавить("Документ." + ТипОбъекта.Ключ.Имя, "ВыгружаемыйДокумент");
		
		ОператорВыбора.ВыбираемыеПоля.Добавить("ВыгружаемыйДокумент.Ссылка");
		ИмяПоляСумма = ?(ЕстьРеквизитСумма, "ВыгружаемыйДокумент.СуммаДокумента", "0");
		ОператорВыбора.ВыбираемыеПоля.Добавить(ИмяПоляСумма);
		ИмяПоляВалюта = ?(ЕстьРеквизитВалюта, "ВыгружаемыйДокумент.ВалютаДокумента", "ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)");
		ОператорВыбора.ВыбираемыеПоля.Добавить(ИмяПоляВалюта);
		
		НаименованиеОтбора = "МассивОбъектов" + ТипОбъекта.Ключ.Имя;
		ОператорВыбора.Отбор.Добавить("ВыгружаемыйДокумент.Ссылка В(&" + НаименованиеОтбора + ")");
		Запрос.УстановитьПараметр(НаименованиеОтбора, ТипОбъекта.Значение);
	КонецЦикла;
	
	ЗапросСхемы.Колонки[0].Псевдоним = "Ссылка";
	ЗапросСхемы.Колонки[1].Псевдоним = "СуммаДокумента";
	ЗапросСхемы.Колонки[2].Псевдоним = "ВалютаДокумента";
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ТаблицаСведенийОбъектовПечати = Неопределено;
	Иначе
		ТаблицаСведенийОбъектовПечати = РезультатЗапроса.Выгрузить();
		ТаблицаСведенийОбъектовПечати.Индексы.Добавить("Ссылка");
	КонецЕсли;

	Для Каждого Объект Из МассивОбъектов Цикл
		
		ТекстСуммаДокумента  = "";
		
		Если ТаблицаСведенийОбъектовПечати <> Неопределено Тогда
			СведенияОбъектаПечати = ТаблицаСведенийОбъектовПечати.Найти(Объект, "Ссылка");
			Если ЗначениеЗаполнено(СведенияОбъектаПечати.СуммаДокумента) Тогда
				Шаблон = Нстр("ru='на сумму %1 %2'");
				ТекстСуммаДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон,
					Формат(СведенияОбъектаПечати.СуммаДокумента, "ЧЦ=15; ЧДЦ=2"),
					СведенияОбъектаПечати.ВалютаДокумента);
			КонецЕсли;
		КонецЕсли;
		
		ПутьКДанным = "";
		Если КоллекцияПечатныхФорм.Колонки.Найти("СинонимМакета") <> Неопределено Тогда
			ПутьКДанным = "СинонимМакета";
		ИначеЕсли КоллекцияПечатныхФорм.Колонки.Найти("Представление") <> Неопределено Тогда
			ПутьКДанным = "Представление";
		Иначе
			СведенияОбъектаПечати = КоллекцияПечатныхФорм.Найти(Объект, "Объект");
			Для Каждого ПечатнаяФорма Из СведенияОбъектаПечати.ПечатныеФормы Цикл
				ТекстПисьма = ТекстПисьма + Символы.ПС + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 %2'"),
				ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Объект, ПечатнаяФорма.Ключ.Представление),
					ТекстСуммаДокумента);
			КонецЦикла;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПутьКДанным) Тогда
			Для Каждого ПечатнаяФорма Из КоллекцияПечатныхФорм Цикл
				ТекстПисьма = ТекстПисьма + Символы.ПС + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 %2'"),
					ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Объект, ПечатнаяФорма[ПутьКДанным]),
					ТекстСуммаДокумента);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоВложений > 0 И КоличествоЭД > 0 Тогда
		НачальныйИндекс = КоличествоВложений - КоличествоЭД;
		Для Индекс = НачальныйИндекс По КоличествоВложений - 1 Цикл
			ТекстПисьма = ТекстПисьма + Символы.ПС+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1'"),
				ПараметрыПисьма.Вложения[Индекс].Представление);
		КонецЦикла;
	КонецЕсли;
	
	ДокументHTML = ПолучитьДокументHTMLИзОбычногоТекста(ТекстПисьма);
	ТекстПисьма  = ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
	
	ПараметрыПисьма.Тема  = УдалитьЛишниеПробелы(ТемаПисьма);
	ПараметрыПисьма.Текст = УдалитьЛишниеПробелы(ТекстПисьма);
	
КонецПроцедуры

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает список команд отправки для указанной формы.
//
// Параметры:
//  ИмяФормыДокумента - Строка - полное имя формы, для которой необходимо получить список команд отправки.
//
// Возвращаемое значение:
//  ТаблицаЗначений - описание см. в КомандыОтправки().
//
Функция КомандыОтправкиФормы(ИмяФормыДокумента, ИмяМенеджераОтправки) Экспорт
	
	КомандыОтправки = КомандыОтправки();
	КомандыОтправки.Колонки.Добавить("СкрытаФункциональнымиОпциями", Новый ОписаниеТипов("Булево"));
	
	МенеджерОтправки = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяМенеджераОтправки);
	МенеджерОтправки.ДобавитьКомандыОтправки(КомандыОтправки);
	
	Для Каждого КомандаОтправки Из КомандыОтправки Цикл
		Если ПустаяСтрока(КомандаОтправки.МенеджерПечати) Тогда
			КомандаОтправки.МенеджерПечати = ИмяМенеджераОтправки;
		КонецЕсли;
	КонецЦикла;
	
	ДополнительныеОтчетыИОбработки.ПриПолученииКомандПечати(КомандыОтправки, ИмяФормыДокумента);
	
	Для Каждого КомандаОтправки Из КомандыОтправки Цикл
		Если КомандаОтправки.Порядок = 0 Тогда
			КомандаОтправки.Порядок = 50;
		КонецЕсли;
	КонецЦикла;
	
	КомандыОтправки.Сортировать("Порядок Возр, Представление Возр");
	
	ЧастиИмени = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяФормыДокумента, ".", Истина);
	КраткоеИмяФормы = ЧастиИмени[ЧастиИмени.Количество()-1];
	
	// фильтр по именам форм
	Для НомерСтроки = -КомандыОтправки.Количество() + 1 По 0 Цикл
		КомандаОтправки = КомандыОтправки[-НомерСтроки];
		СписокФорм = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КомандаОтправки.СписокФорм, ",", Истина);
		Если СписокФорм.Количество() > 0 И СписокФорм.Найти(КраткоеИмяФормы) = Неопределено Тогда
			КомандыОтправки.Удалить(КомандаОтправки);
		КонецЕсли;
	КонецЦикла;
	
	ОпределитьВидимостьКомандОтправкиПоФункциональнымОпциям(КомандыОтправки);
	
	Возврат КомандыОтправки;
	
КонецФункции

Функция ПечатныеФормы(ОписаниеКоманды) Экспорт
	
	ПечатныеФормы = УправлениеПечатью.СформироватьПечатныеФормыДляБыстройПечати(ОписаниеКоманды.МенеджерПечати,
		ОписаниеКоманды.Идентификатор, ОписаниеКоманды.ОбъектыОтправки, ОписаниеКоманды.ДополнительныеПараметры);
	
	Возврат ПечатныеФормы;
	
КонецФункции

Функция ПечатныеФормыИзВнешнегоИсточника(ОписаниеКоманды) Экспорт
	
	ПараметрыВывода = Неопределено;
	ОбъектыОтправки = Новый СписокЗначений;
	Результат = Неопределено;
	
	ДополнительныеОтчетыИОбработки.ПечатьПоВнешнемуИсточнику(ОписаниеКоманды.Ссылка,
		ОписаниеКоманды.ПараметрыИсточника, Результат, ОбъектыОтправки, ПараметрыВывода);
	
	ТабличныеДокументы = Новый СписокЗначений;
	Для Каждого ПечатнаяФорма Из Результат Цикл
		ТабличныеДокументы.Добавить(ПечатнаяФорма.ТабличныйДокумент, ПечатнаяФорма.СинонимМакета);
	КонецЦикла;
	
	ПечатныеФормы = Новый Структура;
	ПечатныеФормы.Вставить("ОбъектыПечати"     , ОбъектыОтправки);
	ПечатныеФормы.Вставить("ПараметрыВывода"   , ПараметрыВывода);
	ПечатныеФормы.Вставить("ТабличныеДокументы", ТабличныеДокументы);
	
	Возврат ПечатныеФормы;
	
КонецФункции

Функция ОтправитьУПД(ОписаниеКоманды, ЕстьОшибки) Экспорт
	
	НастройкиПечати = УчетНДСВызовСервера.ПолучитьНастройкиПечатиУниверсальныхПередаточныхДокументов(ОписаниеКоманды.ОбъектыОтправки);
	
	Если НастройкиПечати.УниверсальныеПередаточныеДокументы.Количество() > 0 Тогда
		ПечатныеФормы = УправлениеПечатью.СформироватьПечатныеФормыДляБыстройПечати(
				"Обработка.ПечатьУПД",
				НастройкиПечати.СписокМакетов,
				НастройкиПечати.УниверсальныеПередаточныеДокументы,
				ОписаниеКоманды.ДополнительныеПараметры);
	КонецЕсли;
	
	Для Каждого ДокументБезСчетаФактуры Из НастройкиПечати.ДокументыБезСчетовФактур Цикл
		
		Если НастройкиПечати.ДокументыСчетФактураНеТребуются.Найти(ДокументБезСчетаФактуры) = Неопределено Тогда
			
			ТекстСообщения = НСтр("ru = 'По документу %1 счет-фактура не выписан'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументБезСчетаФактуры);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			ЕстьОшибки = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПечатныеФормы;
	
КонецФункции

Функция ОтправитьУКД(ОписаниеКоманды, ЕстьОшибки) Экспорт
	
	НастройкиПечати = УчетНДСВызовСервера.ПолучитьНастройкиПечатиУниверсальныхКорректировочныхДокументов(ОписаниеКоманды.ОбъектыОтправки);
	
	Если НастройкиПечати.УниверсальныеКорректировочныеДокументы.Количество() > 0 Тогда
		ПечатныеФормы = УправлениеПечатью.СформироватьПечатныеФормыДляБыстройПечати(
							"Обработка.ПечатьУКД",
							НастройкиПечати.СписокМакетов,
							НастройкиПечати.УниверсальныеКорректировочныеДокументы,
							ОписаниеКоманды.ДополнительныеПараметры);
	КонецЕсли;
	
	Для Каждого ДокументБезСчетаФактуры Из НастройкиПечати.ДокументыБезСчетовФактур Цикл
		
		Если НастройкиПечати.ДокументыСчетФактураНеТребуются.Найти(ДокументБезСчетаФактуры) = Неопределено Тогда
			
			ТекстСообщения = НСтр("ru = 'По документу %1 счет-фактура не выписан'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументБезСчетаФактуры);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			ЕстьОшибки = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПечатныеФормы
	
КонецФункции

Функция ОтправитьСчетФактураВыданный(ОписаниеКоманды, ЕстьОшибки) Экспорт
	
	НастройкиПечати = УчетНДСВызовСервера.ПолучитьНастройкиПечатиСчетовФактур(ОписаниеКоманды.ОбъектыОтправки);
	
	Если НастройкиПечати.СчетаФактуры.Количество() > 0 Тогда
		ПечатныеФормы = УправлениеПечатью.СформироватьПечатныеФормыДляБыстройПечати(
				"Документ.СчетФактураВыданный",
				НастройкиПечати.СписокМакетов,
				НастройкиПечати.СчетаФактуры,
				ОписаниеКоманды.ДополнительныеПараметры);
	КонецЕсли;
	
	Для Каждого ДокументБезСчетаФактуры Из НастройкиПечати.ДокументыБезСчетовФактур Цикл
		
		ТекстСообщения = НСтр("ru='По документу %1 счет-фактура не выписан.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументБезСчетаФактуры);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		ЕстьОшибки = Истина;
	КонецЦикла;
	
	Возврат ПечатныеФормы
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПрисоединитьЭлектронныеДокументы(СериализуемыеОбъекты, Вложения)
	
	КоличествоЭД = 0;
	
	СериализуемыеОбъектыПоТипам = РазложитьСписокПоТипамОбъектов(СериализуемыеОбъекты);
	Для Каждого ТипСериализуемогоОбъекта Из СериализуемыеОбъектыПоТипам Цикл
		
		ПакетыЭД = ЭлектронныеДокументыБП.СериализоватьОбъекты(ТипСериализуемогоОбъекта.Значение);
		КоличествоДокументовВПакете = ?(ЗначениеЗаполнено(ПакетыЭД), ПакетыЭД.Количество(), 0);
		
		Если КоличествоДокументовВПакете > 0 Тогда
			
			Для Каждого ПакетЭД Из ПакетыЭД Цикл
				Вложения.Добавить(ПакетЭД);
			КонецЦикла;
			
			КоличествоЭД = КоличествоЭД + КоличествоДокументовВПакете;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КоличествоЭД;
	
КонецФункции

Функция ПоместитьТабличныеДокументыВоВременноеХранилище(ТабличныеДокументы, ПечатныеФормыПоОбъектам, ДополнительныеПараметры = Неопределено)
	
	Результат = Новый Массив;
	УпаковатьВАрхив = Ложь;
	ФорматыСохранения = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипФайлаТабличногоДокумента.PDF);
	
	ТаблицаФорматов = УправлениеПечатью.НастройкиФорматовСохраненияТабличногоДокумента();
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ДополнительныеПараметры.Свойство("УпаковатьВАрхив"  , УпаковатьВАрхив);
		ДополнительныеПараметры.Свойство("ФорматыСохранения", ФорматыСохранения);
	КонецЕсли;
	
	Если УпаковатьВАрхив Тогда
		ИмяАрхива = ПолучитьИмяВременногоФайла("zip");
		ЗаписьZipФайла = Новый ЗаписьZipФайла(ИмяАрхива);
	КонецЕсли;
	
	ИмяВременнойПапки = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(ИмяВременнойПапки);
	ИспользованныеИменаФайлов = Новый Соответствие;
	
	ОбработанныеПечатныеФормы = Новый Массив;
	
	Для Каждого ПечатныйФормы Из ТабличныеДокументы Цикл
		ПечатныеФормыПоОбъектам(ПечатныеФормыПоОбъектам, ПечатныйФормы);
	КонецЦикла;
	
	Для Каждого Объект Из ПечатныеФормыПоОбъектам Цикл
		
		Для Каждого ПечатнаяФормаОбъекта Из Объект.ПечатныеФормы Цикл
			
			ПечатнаяФорма = ПечатнаяФормаОбъекта.Значение;
			
			Если ПечатнаяФорма.Вывод = ИспользованиеВывода.Запретить Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого ТипФайла Из ФорматыСохранения Цикл
				
				НастройкиФормата = ТаблицаФорматов.НайтиСтроки(Новый Структура("ТипФайлаТабличногоДокумента", ТипФайла))[0];
				
				ИмяФайла = ИмяФайлаПечатнойФормыПоУмолчанию(Объект.Объект, ПечатнаяФормаОбъекта.Ключ);
				ИмяФайла = ИмяФайла + "." + НастройкиФормата.Расширение;
				ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла);
				
				ПолноеИмяФайла = УникальноеИмяФайла(ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременнойПапки) + ИмяФайла);
				ПечатнаяФорма.Записать(ПолноеИмяФайла, ТипФайла);
				
				Если ТипФайла = ТипФайлаТабличногоДокумента.HTML Тогда
					ВставитьКартинкиВHTML(ПолноеИмяФайла);
				КонецЕсли;
				
				Если УпаковатьВАрхив Тогда 
					ЗаписьZipФайла.Добавить(ПолноеИмяФайла);
				Иначе
					
					ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
					АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, Новый УникальныйИдентификатор);
					
					ОписаниеФайла = Новый Структура;
					ОписаниеФайла.Вставить("Представление", ИмяФайла);
					ОписаниеФайла.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
					
					Результат.Добавить(ОписаниеФайла);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если УпаковатьВАрхив Тогда
		ЗаписьZipФайла.Записать();
		
		ФайлАрхива = Новый Файл(ИмяАрхива);
		ДвоичныеДанные = Новый ДвоичныеДанные(ИмяАрхива);
		АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, Новый УникальныйИдентификатор);
		
		ОписаниеФайла = Новый Структура;
		ОписаниеФайла.Вставить("Представление"            , ПечатнаяФормаОбъекта.Ключ.Представление + ".zip");
		ОписаниеФайла.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
		
		Результат.Добавить(ОписаниеФайла);
		
		УдалитьФайлы(ИмяАрхива);
	КонецЕсли;
	
	УдалитьФайлы(ИмяВременнойПапки);
	
	Возврат Результат;
	
КонецФункции

Функция ПоместитьТабличныйДокументОтчетаВоВременноеХранилище(ПараметрыОтчета)
	
	Результат = Новый СписокЗначений;
	
	ТабличныйДокумент = ПараметрыОтчета.ТабличныйДокумент;
	
	ИмяВременнойПапки = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(ИмяВременнойПапки);
	ПолныйПутьКФайлу = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременнойПапки);
	
	Если ТабличныйДокумент.Вывод = ИспользованиеВывода.Запретить Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяФайла = ПараметрыОтчета.Заголовок + ".xls";
	ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла);
	
	ПолноеИмяФайла = УникальноеИмяФайла(ПолныйПутьКФайлу + ИмяФайла);
	
	ТабличныйДокумент.Записать(ПолноеИмяФайла, ТипФайлаТабличногоДокумента.XLS);
	
	Результат.Добавить(ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПолноеИмяФайла), Новый УникальныйИдентификатор), ИмяФайла);
	
	УдалитьФайлы(ИмяВременнойПапки);
	
	Возврат Результат;
	
КонецФункции

Процедура ПечатныеФормыПоОбъектам(ПечатныеФормыПоОбъектам, ПечатнаяФорма)
	
	Для Каждого ОбъектПечати Из ПечатнаяФорма.ОбъектыПечати Цикл
		ИмяОбласти = ОбъектПечати.Представление;
		Для Каждого ПечатнаяФормаДокумента Из ПечатнаяФорма.ТабличныеДокументы Цикл
			Область = ПечатнаяФормаДокумента.Значение.Области.Найти(ИмяОбласти);
			Если Область = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ТабличныйДокумент = ПечатнаяФормаДокумента.Значение.ПолучитьОбласть(Область.Верх, , Область.Низ);
			Свойства = "АвтоМасштаб, Вывод, ВысотаСтраницы, ДвусторонняяПечать, Защита, ИмяПринтера, КодЯзыкаМакета,
				|КоличествоЭкземпляров, МасштабПечати, ОриентацияСтраницы, ПолеСверху, ПолеСлева, ПолеСнизу, ПолеСправа,
				|РазборПоКопиям, РазмерКолонтитулаСверху, РазмерКолонтитулаСнизу, РазмерСтраницы, ТочностьПечати,
				|ЧерноБелаяПечать, ШиринаСтраницы, ЭкземпляровНаСтранице";
			ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ПечатнаяФормаДокумента.Значение, Свойства);
			ПечатныеФормыОбъекта = ПечатныеФормыПоОбъектам.Найти(ОбъектПечати.Значение, "Объект");
			Если ПечатныеФормыОбъекта = Неопределено Тогда
				ОписаниеПечатнойФормы = Новый Соответствие;
				ОписаниеПечатнойФормы.Вставить(ПечатнаяФормаДокумента, ТабличныйДокумент);
				ОписаниеОтправляемогоОбъекта = ПечатныеФормыПоОбъектам.Добавить();
				ОписаниеОтправляемогоОбъекта.Объект        = ОбъектПечати.Значение;
				ОписаниеОтправляемогоОбъекта.ПечатныеФормы = ОписаниеПечатнойФормы;
			Иначе
				ПечатныеФормыОбъекта.ПечатныеФормы.Вставить(ПечатнаяФормаДокумента, ТабличныйДокумент);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ИмяФайлаПечатнойФормыПоУмолчанию(ОбъектПечати, НазваниеПечатнойФормы)
	
	Если ОбщегоНазначения.ЭтоДокумент(Метаданные.НайтиПоТипу(ТипЗнч(ОбъектПечати))) Тогда
		ПараметрыДляВставки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектПечати, "Дата,Номер");
		ПараметрыДляВставки.Номер = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ПараметрыДляВставки.Номер, Истина);
		ПараметрыДляВставки.Дата = Формат(ПараметрыДляВставки.Дата, "ДЛФ=DD");
		ПараметрыДляВставки.Вставить("НазваниеПечатнойФормы", НазваниеПечатнойФормы);
		Шаблон = НСтр("ru = '[НазваниеПечатнойФормы] № [Номер] от [Дата]'");
	Иначе
		ПараметрыДляВставки = Новый Структура;
		ПараметрыДляВставки.Вставить("НазваниеПечатнойФормы",НазваниеПечатнойФормы);
		ПараметрыДляВставки.Вставить("ПредставлениеОбъекта", Строка(ОбъектПечати));
		Шаблон = НСтр("ru = '[НазваниеПечатнойФормы] [ПредставлениеОбъекта]'");
	КонецЕсли;
	
	ИмяФайла = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Шаблон, ПараметрыДляВставки);
	Возврат СтрЗаменить(ИмяФайла, ".", "");
	
КонецФункции

Функция УникальноеИмяФайла(ИмяФайла)
	
	Файл = Новый Файл(ИмяФайла);
	ИмяБезРасширения = Файл.ИмяБезРасширения;
	Расширение = Файл.Расширение;
	Папка = Файл.Путь;
	
	Счетчик = 1;
	Пока Файл.Существует() Цикл
		Счетчик = Счетчик + 1;
		Файл = Новый Файл(Папка + ИмяБезРасширения + " (" + Счетчик + ")" + Расширение);
	КонецЦикла;
	
	Возврат Файл.ПолноеИмя;
	
КонецФункции

Процедура ОпределитьВидимостьКомандОтправкиПоФункциональнымОпциям(КомандыОтправки)
	
	Для НомерКоманды = -КомандыОтправки.Количество() + 1 По 0 Цикл
		
		ОписаниеКомандыОтправки = КомандыОтправки[-НомерКоманды];
		ФункциональныеОпцииКомандыОтправки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
			ОписаниеКомандыОтправки.ФункциональныеОпции, ",", Истина);
		ВидимостьКоманды = ФункциональныеОпцииКомандыОтправки.Количество() = 0;
		Для Каждого ФункциональнаяОпция Из ФункциональныеОпцииКомандыОтправки Цикл
			
			ВидимостьКоманды = ВидимостьКоманды Или ПолучитьФункциональнуюОпцию(ФункциональнаяОпция);
			
			Если ВидимостьКоманды Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		ОписаниеКомандыОтправки.СкрытаФункциональнымиОпциями = Не ВидимостьКоманды;
		
	КонецЦикла;
	
КонецПроцедуры

Функция КомандыОтправки()
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	
	Результат.Колонки.Добавить("МенеджерПечати", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ИмяКоманды", Новый ОписаниеТипов("Строка"));
	
	// Альтернативный обработчик команды.
	Результат.Колонки.Добавить("Обработчик", Новый ОписаниеТипов("Строка"));
	
	Результат.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("Картинка", Новый ОписаниеТипов("Картинка"));
	
	// Имена форм для которых будет доступна команда. Разделитель - запятая
	Результат.Колонки.Добавить("СписокФорм", Новый ОписаниеТипов("Строка"));
	
	// Имена функциональных опций, влияющих на видимость команд. Разделитель - запятая.
	Результат.Колонки.Добавить("ФункциональныеОпции", Новый ОписаниеТипов("Строка"));
	
	Результат.Колонки.Добавить("ДополнительныеПараметры", Новый ОписаниеТипов("Структура"));
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыПисьма()
	
	ПараметрыПисьма = Новый Структура;
	ПараметрыПисьма.Вставить("Получатель"               , "");
	ПараметрыПисьма.Вставить("Тема"                     , "");
	ПараметрыПисьма.Вставить("Текст"                    , "");
	ПараметрыПисьма.Вставить("Вложения"                 , "");
	ПараметрыПисьма.Вставить("УдалятьФайлыПослеОтправки", Истина);
	
	Возврат ПараметрыПисьма;
	
КонецФункции

Процедура ДобавитьКомандыОтправки(КомандыОтправки)
	
	Для Каждого КомандаОтправки Из КомандыОтправки Цикл
		НомерКоманды = КомандаОтправки.Владелец().Индекс(КомандаОтправки);
		ИмяКоманды = "КомандаОтправки" + НомерКоманды;
		КомандаОтправки.ИмяКоманды = ИмяКоманды;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьКомандуОтправкиНаФормуОтчета(Форма, ИмяГруппыОсновнойКоманднойПанели, ИмяЭлементаОсновнойКоманднойПанели,
		ИмяГруппыДополнительнойКоманднойПанели, ИмяЭлементаДополнительнойКоманднойПанели)
	
	ГруппаОсновнойКоманднойПанели = Форма.Элементы.Найти(ИмяГруппыОсновнойКоманднойПанели);
	ЭлементОсновнойКоманднойПанели = Форма.Элементы.Найти(ИмяЭлементаОсновнойКоманднойПанели);
	
	ИмяКоманды = ИмяГруппыОсновнойКоманднойПанели + "КомандаОтправки";
	
	КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
	КомандаФормы.Действие = "Подключаемый_ВыполнитьКомандуОтправки";
	КомандаФормы.Подсказка = НСтр("ru='Отправить по электронной почте'");
	
	КомандаФормы.Картинка = БиблиотекаКартинок.ЭлектронноеПисьмо;
	
	Если ЭлементОсновнойКоманднойПанели <> Неопределено Тогда
		КнопкаОсновнойКоманднойПанели = Форма.Элементы.Вставить(ГруппаОсновнойКоманднойПанели.Имя + "Отправить", Тип("КнопкаФормы"),
			ГруппаОсновнойКоманднойПанели, ЭлементОсновнойКоманднойПанели);
	Иначе
		КнопкаОсновнойКоманднойПанели = Форма.Элементы.Добавить(ГруппаОсновнойКоманднойПанели.Имя + "Отправить", Тип("КнопкаФормы"),
			ГруппаОсновнойКоманднойПанели);
	КонецЕсли;
	
	КнопкаОсновнойКоманднойПанели.Вид         = ВидКнопкиФормы.КнопкаКоманднойПанели;
	КнопкаОсновнойКоманднойПанели.Заголовок   = НСтр("ru='Отправить по электронной почте'");
	КнопкаОсновнойКоманднойПанели.Отображение = ОтображениеКнопки.Картинка;
	КнопкаОсновнойКоманднойПанели.ИмяКоманды  = ИмяКоманды;
	
	ГруппаДополнительнойКоманднойПанели = Форма.Элементы.Найти(ИмяГруппыДополнительнойКоманднойПанели);
	ЭлементДополнительнойКоманднойПанели = Форма.Элементы.Найти(ИмяЭлементаДополнительнойКоманднойПанели);
	
	Если ЭлементДополнительнойКоманднойПанели <> Неопределено Тогда
		КнопкаДополнительнойКоманднойПанели = Форма.Элементы.Вставить(ГруппаДополнительнойКоманднойПанели.Имя + "Отправить",
			Тип("КнопкаФормы"), ГруппаДополнительнойКоманднойПанели, ЭлементДополнительнойКоманднойПанели);
	Иначе
		КнопкаДополнительнойКоманднойПанели = Форма.Элементы.Добавить(ГруппаДополнительнойКоманднойПанели.Имя + "Отправить",
			Тип("КнопкаФормы"), ГруппаДополнительнойКоманднойПанели);
	КонецЕсли;
	
	КнопкаДополнительнойКоманднойПанели.Вид                   = ВидКнопкиФормы.КнопкаКоманднойПанели;
	КнопкаДополнительнойКоманднойПанели.Заголовок             = НСтр("ru='Отправить по электронной почте'");
	КнопкаДополнительнойКоманднойПанели.ТолькоВоВсехДействиях = Истина;
	КнопкаДополнительнойКоманднойПанели.ИмяКоманды            = ИмяКоманды;
	
КонецПроцедуры

Процедура ВставитьКартинкиВHTML(ИмяФайлаHTML)
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент();
	ТекстовыйДокумент.Прочитать(ИмяФайлаHTML, КодировкаТекста.UTF8);
	ТекстHTML = ТекстовыйДокумент.ПолучитьТекст();
	
	ФайлHTML = Новый Файл(ИмяФайлаHTML);
	
	ИмяПапкиКартинок = ФайлHTML.ИмяБезРасширения + "_files";
	ПутьКПапкеКартинок = СтрЗаменить(ФайлHTML.ПолноеИмя, ФайлHTML.Имя, ИмяПапкиКартинок);
	
	ФайлыКартинок = НайтиФайлы(ПутьКПапкеКартинок, "*");
	
	Для Каждого ФайлКартинки Из ФайлыКартинок Цикл
		КартинкаТекстом = Base64Строка(Новый ДвоичныеДанные(ФайлКартинки.ПолноеИмя));
		КартинкаТекстом = "data:image/" + Сред(ФайлКартинки.Расширение,2) + ";base64," + Символы.ПС + КартинкаТекстом;
		
		ТекстHTML = СтрЗаменить(ТекстHTML, ИмяПапкиКартинок + "\" + ФайлКартинки.Имя, КартинкаТекстом);
	КонецЦикла;
		
	ТекстовыйДокумент.УстановитьТекст(ТекстHTML);
	ТекстовыйДокумент.Записать(ИмяФайлаHTML, КодировкаТекста.UTF8);
	
КонецПроцедуры

// Заполняет тему, текст и получателя электронного письма содержащего реквизиты организации
//
// Параметры:
//  МассивОбъектов - Массив - массив ссылок на объекты
//  ПараметрыПисьма  - Структура - структура содержащая параметры письма
//  ТаблицаПечатныхФорм - ТаблицаЗначений - содержит табличные документы печатных форм и их настройки.
//
Процедура ЗаполнитьТемуТелоПисьмаСКарточкойОрганизации(МассивОбъектов, ПараметрыПисьма, ТаблицаПечатныхФорм)
	
	ВсегоОрганизаций = МассивОбъектов.Количество();
	
	Если ВсегоОрганизаций = 1 Тогда
		ТемаПисьма = Нстр("ru='Реквизиты организации %1'");
		ТемаПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТемаПисьма,
			МассивОбъектов[0].НаименованиеСокращенное);
	ИначеЕсли ВсегоОрганизаций > 1 И ВсегоОрганизаций < 10 Тогда
		ТемаПисьма = Нстр("ru='Реквизиты организаций %1'");
		НаименованияОрганизаций = "";
		Для Каждого Организация Из МассивОбъектов Цикл
			НаименованияОрганизаций = НаименованияОрганизаций + Организация.НаименованиеСокращенное + ", ";
		КонецЦикла;
		ТемаПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТемаПисьма, НаименованияОрганизаций);
		СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ТемаПисьма, 2);
	КонецЕсли;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("html");
	
	Если ТаблицаПечатныхФорм.Колонки.Найти("ТабличныйДокумент") <> Неопределено Тогда
		ПутьКДанным = "ТабличныйДокумент";
		ПечатнаяФормаРеквизитыОрганизации = ТаблицаПечатныхФорм[0][ПутьКДанным];
	Иначе
		ПутьКДанным = "ПечатныеФормы";
		ПечатныеФормыПоОбъектам = ТаблицаПечатныхФорм[0][ПутьКДанным];
		Для Каждого ПечатнаяФорма Из ПечатныеФормыПоОбъектам Цикл
			ПечатнаяФормаРеквизитыОрганизации = ПечатнаяФорма.Значение;
		КонецЦикла;
	КонецЕсли;
	
	ПечатнаяФормаРеквизитыОрганизации.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.HTML);
	
	ДокументHTML = Новый ДокументHTML;
	
	ЭлементТело = ДокументHTML.СоздатьЭлемент("body");
	ДокументHTML.Тело = ЭлементТело;
	
	ЭлементБлок = ДокументHTML.СоздатьЭлемент("p");
	ЭлементТело.ДобавитьДочерний(ЭлементБлок);
	
	HTMLТабличногоДокумента = Новый ЧтениеHTML;
	HTMLТабличногоДокумента.ОткрытьФайл(ИмяФайла);
	
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(HTMLТабличногоДокумента);
	ЭлементыTd = ДокументDOM.ПолучитьЭлементыПоИмени("td");
	
	ЭтоПервыйЭлемент = Истина;
	
	Для Каждого ЭлементTd Из ЭлементыTd Цикл
		
		// не обрабатываем пустые колонки
		Если ЭлементTd.ТекстовоеСодержимое = "" Тогда
			Продолжить;
		КонецЕсли;
		
		// колонки с неразрывным пробелом (&nbsp) в HTML используются для разделения групп реквизитов
		// заменяем такие колонки на пустые строки с переносом строки
		Если ЭлементTd.ТекстовоеСодержимое = Символ(160) Тогда
			ДобавитьТекстовыйУзел(ЭлементБлок, " ", Истина);
			Продолжить;
		КонецЕсли;
		
		// первый элемент карточки всегда наименование организации после которого нужно добавить перенос строки
		Если ЭтоПервыйЭлемент Тогда
			ДобавитьТекстовыйУзел(ЭлементБлок, СокрЛП(ЭлементTd.ТекстовоеСодержимое), Истина);
			ЭтоПервыйЭлемент = Ложь;
			Продолжить;
		КонецЕсли;
		
		// ИмяКласса - это адрес ячейки в табличном документе (R1C0, R1C1 итд), т.к. в ячейках *С1 находятся значения
		// реквизитов, то после них следует добавлять перенос строки
		Если Прав(ЭлементTd.ИмяКласса, 1) = "1" Тогда
			ДобавитьТекстовыйУзел(ЭлементБлок, СокрЛП(ЭлементTd.ТекстовоеСодержимое), Истина);
		Иначе
			ДобавитьТекстовыйУзел(ЭлементБлок, СокрЛП(ЭлементTd.ТекстовоеСодержимое));
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстПисьма  = ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
	
	ПараметрыПисьма.Тема  = УдалитьЛишниеПробелы(ТемаПисьма);
	ПараметрыПисьма.Текст = УдалитьЛишниеПробелы(ТекстПисьма);
	
КонецПроцедуры

// Получает текст HTML из объекта ДокументHTML
//
// Параметры
//  ДокументHTML  - ДокументHTML - документ, из которого будет извлекаться текст
//
// Возвращаемое значение:
//   Строка   - текст HTML
//
Функция ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML)
	
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьHTML = Новый ЗаписьHTML;
	ЗаписьHTML.УстановитьСтроку();
	ЗаписьDOM.Записать(ДокументHTML,ЗаписьHTML);
	Возврат ЗаписьHTML.Закрыть();
	
КонецФункции

// Получает объект ДокументHTML из обычного текста
//
// Параметры
//  Текст  - Строка - текст из которого будет создан документ HTML
//
// Возвращаемое значение:
//   ДокументHTML   - созданный документ HTML
//
Функция ПолучитьДокументHTMLИзОбычногоТекста(Текст)
	
	ДокументHTML = Новый ДокументHTML;
	
	ЭлементТело = ДокументHTML.СоздатьЭлемент("body");
	ДокументHTML.Тело = ЭлементТело;
	
	ЭлементБлок = ДокументHTML.СоздатьЭлемент("p");
	ЭлементТело.ДобавитьДочерний(ЭлементБлок);
	
	КоличествоСтрок = СтрЧислоСтрок(Текст);
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		ДобавитьТекстовыйУзел(ЭлементБлок, СтрПолучитьСтроку(Текст, НомерСтроки),
			?(НомерСтроки = КоличествоСтрок, Ложь, Истина));
	КонецЦикла;
	
	Возврат ДокументHTML;
	
КонецФункции

// Добавляет текстовый узел в ДокументHTML
//
// Параметры
//  ЭлементРодитель  - ЭлементHTML - элемент,к которому будет добавлен дочерний элемент
//  Текст  - Строка - содержимое текстового узла
//  ДобавлятьПереносСтроки - Булево - при установке в Истина добавляет тэг переноса строки
//
// Возвращаемое значение:
//   ЭлементHTML   - добавленный элемент
//
Процедура ДобавитьТекстовыйУзел(ЭлементРодитель, Текст, ДобавлятьПереносСтроки = Ложь)
	
	ДокументВладелец = ЭлементРодитель.ДокументВладелец;
	
	ТекстовыйУзел = ДокументВладелец.СоздатьТекстовыйУзел(Текст);
	ЭлементРодитель.ДобавитьДочерний(ТекстовыйУзел);
	
	Если ДобавлятьПереносСтроки Тогда
		ЭлементРодитель.ДобавитьДочерний(ДокументВладелец.СоздатьЭлемент("br"));
	КонецЕсли;
	
КонецПроцедуры

// Список значений раскладываем на соотвествие по типам значений
//
// Параметры:
//  МассивОбъектов - Массив - ссылки на объекты метаданных.
//
// Возвращаемое значение:
//  Соответствие - соответствие в котором:
//   Ключ - Тип - тип объекта метаданных.
//   Значение - Массив - массив объектов типа.
//
Функция РазложитьСписокПоТипамОбъектов(СписокОбъектов)
	
	СтруктураТипов = Новый Соответствие;
	
	Для Каждого Объект Из СписокОбъектов Цикл
		
		МетаданныеДокумента = Объект.Метаданные();
		
		Если СтруктураТипов.Получить(МетаданныеДокумента) = Неопределено Тогда
			
			МассивДокументов = Новый Массив;
			СтруктураТипов.Вставить(МетаданныеДокумента, МассивДокументов);
			
		КонецЕсли;
		
		СтруктураТипов[МетаданныеДокумента].Добавить(Объект);
		
	КонецЦикла;
	
	Возврат СтруктураТипов;
	
КонецФункции

Функция УдалитьЛишниеПробелы(ИсходнаяСтрока)
	
	Пока Найти(ИсходнаяСтрока, "  ") > 0 Цикл
		ИсходнаяСтрока = СтрЗаменить(ИсходнаяСтрока, "  ", " ");
	КонецЦикла;
	
	Возврат ИсходнаяСтрока;
	
КонецФункции

Функция ОписаниеТиповИзСтроки(СтрокаОписанияТипов)
	
	СтруктураДопустимыхТипов = Новый Структура(СтрокаОписанияТипов);
	МассивДопустимыхТипов = Новый Массив;
	
	Для каждого ЭлементСтруктуры Из СтруктураДопустимыхТипов Цикл
		
		МассивДопустимыхТипов.Добавить(Тип("СправочникСсылка."+ЭлементСтруктуры.Ключ));
		
	КонецЦикла;
	
	Возврат Новый ОписаниеТипов(МассивДопустимыхТипов);
	
КонецФункции

// Возвращает ссылку на значение реквизита который должен быть одинаков во всех документах списка.
//
// Параметры:
//  ОбъектыПечати  - СписокЗначений - список документов в которых ищем контрагента
//
// Возвращаемое значение:
//  СправочникСсылка - ссылка на значение реквизита, которая содержится во всех документах.
//
Функция ПолучитьЗначениеОбщегоРеквизита(СтруктураТипов, ИмяРеквизита, ОписаниеДопустимыхТипов)
	
	Перем ТекстЗапроса;
	
	Запрос = Новый Запрос;
	
	ТекстЗапросаПоДокументу = "
	|	%ИмяДокумента%.%ИмяРеквизита% КАК %ИмяРеквизита%
	|ИЗ
	|	Документ.%ИмяДокумента% КАК %ИмяДокумента%
	|ГДЕ
	|	%ИмяДокумента%.Ссылка В(&СписокДокументов%ИмяДокумента%)";
	
	ТекстЗапросаПоДокументу = СтрЗаменить(ТекстЗапросаПоДокументу, "%ИмяРеквизита%", ИмяРеквизита);
	
	Для каждого КлючИЗначение Из СтруктураТипов Цикл
		
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта(ИмяРеквизита, КлючИЗначение.Ключ) Тогда
			
			ИмяДокумента = КлючИЗначение.Ключ.Имя;
			
			Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
				
				ТекстЗапроса = ТекстЗапроса+"
				|ОБЪЕДИНИТЬ
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ";
				
			Иначе
				
				ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ";
				
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + СтрЗаменить(ТекстЗапросаПоДокументу, "%ИмяДокумента%", ИмяДокумента);
			
			Запрос.УстановитьПараметр("СписокДокументов"+ИмяДокумента, КлючИЗначение.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПустаяСтрока(ТекстЗапроса) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		
		Если Выборка.Количество() = 1 Тогда
			
			Если Выборка.Следующий() Тогда
				
				Возврат ОписаниеДопустимыхТипов.ПривестиЗначение(Выборка[ИмяРеквизита]);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьПредставлениеСПрефиксом(Префикс, Значение)
	
	Если ПустаяСтрока(Значение) Тогда
		Возврат "";
	Иначе
		Возврат " "+Префикс+" "+Значение;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьНаименованиеКонтрагента(Ссылка)
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат "";
	КонецЕсли;
	
	ИменаРеквизитовОбъекта = Новый Соответствие;
	
	ИменаРеквизитовОбъекта.Вставить(Тип("СправочникСсылка.Контрагенты")   , "НаименованиеПолное");
	ИменаРеквизитовОбъекта.Вставить(Тип("СправочникСсылка.Организации")   , "НаименованиеСокращенное");
	ИменаРеквизитовОбъекта.Вставить(Тип("СправочникСсылка.ФизическиеЛица"), "Наименование");
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИменаРеквизитовОбъекта[ТипЗнч(Ссылка)]);
	
КонецФункции

#КонецОбласти