
#Область ПроцедурыИФункцииПодключениеОтключениеОборудованияСинхронно

// Производит подключение доступного оборудования по списку типов ПО
//
Функция ПодключитьОборудованиеПоТипу(ИдентификаторКлиента, ТипыПО, ОписаниеОшибки = "") Экспорт
	
	СтруктураТиповПО = Новый Структура();
	Если ТипЗнч(ТипыПО) = Тип("Массив") Тогда
		Для каждого ТипПО Из ТипыПО Цикл
			СтруктураТиповПО.Вставить(ТипПО);
		КонецЦикла;
	Иначе
		СтруктураТиповПО.Вставить(ТипыПО);
	КонецЕсли;
	
	Возврат ПодключитьОборудование(ИдентификаторКлиента, СтруктураТиповПО, , ОписаниеОшибки);
	 
 КонецФункции

// Подключает одиночный экземпляр устройства определяемый идентификатором.
//
Функция ПодключитьОборудованиеПоИдентификатору(ИдентификаторКлиента, ИдентификаторУстройства, ОписаниеОшибки = "") Экспорт
	
	Возврат ПодключитьОборудование(ИдентификаторКлиента, , ИдентификаторУстройства, ОписаниеОшибки);
	
КонецФункции

// Функция подключает устройства по типу оборудования.
// Возвращает результат выполнения функции.
Функция ПодключитьОборудование(ИдентификаторКлиента, ТипыПО = Неопределено,
							   ИдентификаторУстройства = Неопределено, ОписаниеОшибки = "") Экспорт
	   
	КонечныйРезультат = Истина;
	Результат         = Истина;
	
	ОбъектДрайвера    = Неопределено;
	ОписаниеОшибки    = "";
	ОписаниеОшибкиУстройства = "";

	Результат = МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента();
	Если Не Результат Тогда
		ОписаниеОшибки = НСтр("ru='Предварительно необходимо выбрать рабочее место подключаемого оборудования текущего сеанса.'");
		Возврат Ложь;
	КонецЕсли;
	
	СписокОборудования = МенеджерОборудованияКлиентПовтИсп.ПолучитьСписокОборудования(ТипыПО, ИдентификаторУстройства);
	
	Если СписокОборудования.Количество() > 0 Тогда
		Для каждого Устройство Из СписокОборудования Цикл
			
			// Проверим, не подключено ли устройство ранее.
			ПодключенноеУстройство = ПолучитьПодключенноеУстройство(глПодключаемоеОборудование.ПараметрыПодключенияПО, Устройство.Ссылка);
			
			Если ПодключенноеУстройство = Неопределено Тогда // Если устройство не было подключено ранее.
				ОбъектДрайвера = ПолучитьОбъектДрайвера(Устройство);
				Если ОбъектДрайвера = Неопределено Тогда
					// Сообщить об ошибке, что не удалось загрузить драйвер.
					ОписаниеОшибки = ОписаниеОшибки + ?(ПустаяСтрока(ОписаниеОшибки), "", Символы.ПС)
								   + НСтр("ru='%Наименование%: Не удалось загрузить драйвер устройства.
									 |Проверьте, что драйвер корректно установлен и зарегистрирован в системе.'");
					ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", Устройство.Наименование);
					КонечныйРезультат = Ложь;
					Продолжить;
				КонецЕсли;
				
				НовоеПодключение = Новый Структура();
				НовоеПодключение.Вставить("Клиенты"               , Новый Массив());
				НовоеПодключение.Клиенты.Добавить(ИдентификаторКлиента);
				НовоеПодключение.Вставить("Ссылка"                 , Устройство.Ссылка);
				НовоеПодключение.Вставить("ИдентификаторУстройства", Устройство.ИдентификаторУстройства);
				НовоеПодключение.Вставить("ОбработчикДрайвера"     , Устройство.ОбработчикДрайвера);
				НовоеПодключение.Вставить("Наименование"           , Устройство.Наименование);
				НовоеПодключение.Вставить("ТипОборудования"        , Устройство.ТипОборудования);
				НовоеПодключение.Вставить("ДрайверОборудования"    , Устройство.ДрайверОборудования);
				НовоеПодключение.Вставить("ВСоставеКонфигурации"   , Устройство.ВСоставеКонфигурации);
				НовоеПодключение.Вставить("ИдентификаторОбъекта"   , Устройство.ИдентификаторОбъекта);
				НовоеПодключение.Вставить("ИмяМакетаДрайвера"      , Устройство.ИмяМакетаДрайвера);
				НовоеПодключение.Вставить("ИмяФайлаДрайвера"       , Устройство.ИмяФайлаДрайвера);
				НовоеПодключение.Вставить("РабочееМесто"           , Устройство.РабочееМесто);
				НовоеПодключение.Вставить("ИмяКомпьютера"          , Устройство.ИмяКомпьютера);
				НовоеПодключение.Вставить("Параметры"              , Устройство.Параметры);
				НовоеПодключение.Вставить("КоличествоПодключенных" , 1);
				НовоеПодключение.Вставить("ПараметрыПодключения"   , Новый Структура());
				НовоеПодключение.ПараметрыПодключения.Вставить("ТипОборудования", Устройство.ТипОборудованияИмя);
				
				ВыходныеПараметры = Неопределено;
				
				ОбработчикДрайвера = МенеджерОборудованияКлиентПовтИсп.ПолучитьОбработчикДрайвера(НовоеПодключение.ОбработчикДрайвера, Не НовоеПодключение.ВСоставеКонфигурации);
				Если ОбработчикДрайвера = Неопределено Тогда
					// Сообщить об ошибке, что не удалось загрузить драйвер.
					ОписаниеОшибки = ОписаниеОшибки +  НСтр("ru='Не удалось подключить обработчик драйвера.'");
					КонечныйРезультат = Ложь;
					Продолжить;
				Иначе
					// Принудительно заменяем асинхронный обработчик на синхронный, так как работам в синхронном режиме.
					Если ОбработчикДрайвера = ПодключаемоеОборудованиеУниверсальныйДрайверАсинхронноКлиент Тогда
						ОбработчикДрайвера = ПодключаемоеОборудованиеУниверсальныйДрайверКлиент;
					КонецЕсли;
					
					Результат = ОбработчикДрайвера.ПодключитьУстройство(
						ОбъектДрайвера,
						НовоеПодключение.Параметры,
						НовоеПодключение.ПараметрыПодключения,
						ВыходныеПараметры);
				КонецЕсли;
				
				Если Результат Тогда
					Если ВыходныеПараметры.Количество() >= 2 Тогда
						НовоеПодключение.Вставить("ИсточникСобытия", ВыходныеПараметры[0]);
						НовоеПодключение.Вставить("ИменаСобытий",    ВыходныеПараметры[1]);
					Иначе
						НовоеПодключение.Вставить("ИсточникСобытия", "");
						НовоеПодключение.Вставить("ИменаСобытий",    Неопределено);
					КонецЕсли;
					глПодключаемоеОборудование.ПараметрыПодключенияПО.Добавить(НовоеПодключение);
				Иначе
					// Сообщим пользователю о том, что не удалось подключить устройство.
					ОписаниеОшибки = ОписаниеОшибки + ?(ПустаяСтрока(ОписаниеОшибки), "", Символы.ПС)
								   + НСтр("ru='Не удалось подключить устройство ""%Наименование%"": %ОписаниеОшибки% (%КодОшибки%)'");
					ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%"  , Устройство.Наименование);
					ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
					ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%КодОшибки%"     , ВыходныеПараметры[0]);
				КонецЕсли;
			Иначе // Устройство было подключено ранее.
				// Увеличим количество пользователей данного соединения.
				ПодключенноеУстройство.Клиенты.Добавить(ИдентификаторКлиента);
				ПодключенноеУстройство.КоличествоПодключенных = ПодключенноеУстройство.КоличествоПодключенных + 1;
			КонецЕсли;
			
			КонечныйРезультат = КонечныйРезультат И Результат;
		КонецЦикла;
	ИначеЕсли ИдентификаторУстройства <> Неопределено Тогда
		ОписаниеОшибки = НСтр("ru='Выбранное устройство не может использоваться для подключения.
		|Укажите другое устройство.'");
		КонечныйРезультат = Ложь;
	КонецЕсли;

	Возврат КонечныйРезультат;

КонецФункции

// Поиск по идентификатору подключенного ранее устройства.
//
Функция ПолучитьПодключенноеУстройство(СписокПодключений, Идентификатор) Экспорт
	
	ПодключенноеУстройство = Неопределено;
	
	Для каждого Подключение Из СписокПодключений Цикл
		Если Подключение.Ссылка = Идентификатор Тогда
			ПодключенноеУстройство = Подключение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПодключенноеУстройство;
	
КонецФункции

// Отключает устройства по типу оборудования.
//
Функция ОтключитьОборудованиеПоТипу(ИдентификаторКлиента, ТипыПО, ОписаниеОшибки = "") Экспорт

	Возврат ОтключитьОборудование(ИдентификаторКлиента, ТипыПО, ,ОписаниеОшибки);

КонецФункции

// Отключает устройство, определенное идентификатором.
//
Функция ОтключитьОборудованиеПоИдентификатору(ИдентификаторКлиента, ИдентификаторУстройства, ОписаниеОшибки = "") Экспорт

	Возврат ОтключитьОборудование(ИдентификаторКлиента, , ИдентификаторУстройства, ОписаниеОшибки);

КонецФункции

// Производит принудительное отключение всего подключенного оборудования,
// независимо от числа ссылок на подключение.
Функция ОтключитьВсеОборудование(ОписаниеОшибки = "") Экспорт
	
	КонечныйРезультат = Истина;
	Результат         = Истина;
	
	Для каждого ПодключенноеУстройство Из глПодключаемоеОборудование.ПараметрыПодключенияПО Цикл
		
		ОбъектДрайвера = ПолучитьОбъектДрайвера(ПодключенноеУстройство);
		Если ОбъектДрайвера = Неопределено Тогда
			// Сообщить об ошибке, что не удалось загрузить драйвер.
			ОписаниеОшибки = НСтр("ru='""%Наименование%"": Не удалось загрузить драйвер устройства.
										|Проверьте, что драйвер корректно установлен и зарегистрирован в системе.'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", ПодключенноеУстройство.Наименование);
			КонечныйРезультат = Ложь;
			Продолжить;
		КонецЕсли;
		
		ВыходныеПараметры = Неопределено;
		
		ОбработчикДрайвера = МенеджерОборудованияКлиентПовтИсп.ПолучитьОбработчикДрайвера(ПодключенноеУстройство.ОбработчикДрайвера, Не ПодключенноеУстройство.ВСоставеКонфигурации);
		
		// Принудительно заменяем асинхронный обработчик на синхронный, так как работам в синхронном режиме.
		Если ОбработчикДрайвера = ПодключаемоеОборудованиеУниверсальныйДрайверАсинхронноКлиент Тогда
			ОбработчикДрайвера = ПодключаемоеОборудованиеУниверсальныйДрайверКлиент;
		КонецЕсли;
	
		Результат = ОбработчикДрайвера.ОтключитьУстройство(
				ОбъектДрайвера,
				ПодключенноеУстройство.Параметры,
				ПодключенноеУстройство.ПараметрыПодключения,
				ВыходныеПараметры);
				
		Если НЕ Результат Тогда
			ОписаниеОшибки = НСтр("ru='При отключении устройства ""%Наименование%"" произошла ошибка: %ОписаниеОшибки% (%КодОшибки%)'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", ПодключенноеУстройство.Наименование);
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%КодОшибки%", ВыходныеПараметры[0]);
		Иначе
			ПодключенноеУстройство.КоличествоПодключенных = 0;
		КонецЕсли;
		КонечныйРезультат = КонечныйРезультат И Результат;
	КонецЦикла;
	
	глПодключаемоеОборудование.ПараметрыПодключенияПО.Очистить();
	
	Возврат КонечныйРезультат;
	
КонецФункции

// Функция подключает устройства по типу оборудования.
// 
Функция ОтключитьОборудование(ИдентификаторКлиента, ТипыПО = Неопределено, ИдентификаторУстройства = Неопределено, ОписаниеОшибки = "")
	
	КонечныйРезультат = Истина;
	Результат         = Истина;
	
	ВыходноеОписаниеОшибки = "";
	
	Если глПодключаемоеОборудование.ПараметрыПодключенияПО <> Неопределено Тогда
		КоличествоУстройств = глПодключаемоеОборудование.ПараметрыПодключенияПО.Количество();
		Для Индекс = 1 По КоличествоУстройств Цикл
			
			ПодключенноеУстройство = глПодключаемоеОборудование.ПараметрыПодключенияПО[КоличествоУстройств - Индекс];
			ИмяТипаПО = МенеджерОборудованияКлиентПовтИсп.ПолучитьИмяТипаОборудования(ПодключенноеУстройство.ТипОборудования);
			КлиентПодключения = ПодключенноеУстройство.Клиенты.Найти(ИдентификаторКлиента);
			Если КлиентПодключения <> Неопределено  И (ТипыПО = Неопределено Или ТипыПО.Найти(ИмяТипаПО) <> Неопределено)
			   И (ИдентификаторУстройства = Неопределено  Или ПодключенноеУстройство.Ссылка = ИдентификаторУстройства)Тогда
				 
				 Если ПодключенноеУстройство.КоличествоПодключенных = 1 Тогда
					 
					ОбъектДрайвера = ПолучитьОбъектДрайвера(ПодключенноеУстройство);
					Если ОбъектДрайвера = Неопределено Тогда
						// Сообщить об ошибке, что не удалось загрузить драйвер.
						ОписаниеОшибки = НСтр("ru='""%Наименование%"": Не удалось загрузить драйвер устройства.
													|Проверьте, что драйвер корректно установлен и зарегистрирован в системе.'");
						ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", ПодключенноеУстройство.Наименование);
						КонечныйРезультат = Ложь;
						Продолжить;
					КонецЕсли;
					
					ВыходныеПараметры = Неопределено;
					
					ОбработчикДрайвера = МенеджерОборудованияКлиентПовтИсп.ПолучитьОбработчикДрайвера(ПодключенноеУстройство.ОбработчикДрайвера, Не ПодключенноеУстройство.ВСоставеКонфигурации);
					
					// Принудительно заменяем асинхронный обработчик на синхронный, так как работам в синхронном режиме.
					Если ОбработчикДрайвера = ПодключаемоеОборудованиеУниверсальныйДрайверАсинхронноКлиент Тогда
						ОбработчикДрайвера = ПодключаемоеОборудованиеУниверсальныйДрайверКлиент;
					КонецЕсли;
					
					Результат = ОбработчикДрайвера.ОтключитьУстройство(
							ОбъектДрайвера,
							ПодключенноеУстройство.Параметры,
							ПодключенноеУстройство.ПараметрыПодключения,
							ВыходныеПараметры);
							
					Если НЕ Результат Тогда
						ОписаниеОшибки = ОписаниеОшибки + ?(ПустаяСтрока(ОписаниеОшибки), "", Символы.ПС)
									   + НСтр("ru='При отключении устройства ""%Наименование%"" произошла ошибка: %ОписаниеОшибки% (%КодОшибки%)'");
						ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", ПодключенноеУстройство.Наименование);
						ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
						ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%КодОшибки%", ВыходныеПараметры[0]);
					Иначе
						ПодключенноеУстройство.КоличествоПодключенных = 0;
					КонецЕсли;
					
					НомерСтрокиМассива = глПодключаемоеОборудование.ПараметрыПодключенияПО.Найти(ПодключенноеУстройство);
					Если НомерСтрокиМассива <> Неопределено Тогда
						глПодключаемоеОборудование.ПараметрыПодключенияПО.Удалить(НомерСтрокиМассива);
					КонецЕсли;
				Иначе
					ПодключенноеУстройство.КоличествоПодключенных = ПодключенноеУстройство.КоличествоПодключенных - 1;
					ПодключенноеУстройство.Клиенты.Удалить(КлиентПодключения);
				КонецЕсли;
			КонецЕсли;
			
			КонечныйРезультат = КонечныйРезультат И Результат;
		КонецЦикла;
	КонецЕсли;
	
	Возврат КонечныйРезультат;
	
КонецФункции  

#КонецОбласти   

#Область ПроцедурыИФункцииПодключениеОборудованияАсинхронно

// Производит подключение доступного оборудования по списку типов ПО
//
Процедура НачатьПодключениеОборудованиеПоТипу(ОповещениеПриПодключении, ИдентификаторКлиента, ТипыПО) Экспорт
	
	СтруктураТиповПО = Новый Структура();
	Если ТипЗнч(ТипыПО) = Тип("Массив") Тогда
		Для каждого ТипПО Из ТипыПО Цикл
			СтруктураТиповПО.Вставить(ТипПО);
		КонецЦикла;
	Иначе
		СтруктураТиповПО.Вставить(ТипыПО);
	КонецЕсли;
	
	НачатьПодключениеОборудования(ОповещениеПриПодключении, ИдентификаторКлиента, СтруктураТиповПО);
	 
 КонецПроцедуры

// Начать подключать одиночный экземпляр устройства определяемый идентификатором.
//
Процедура НачатьПодключениеОборудованиеПоИдентификатору(ОповещениеПриПодключении, ИдентификаторКлиента, ИдентификаторУстройства) Экспорт
	
	НачатьПодключениеОборудования(ОповещениеПриПодключении, ИдентификаторКлиента, , ИдентификаторУстройства);
	
КонецПроцедуры

Процедура НачатьПодключениеОборудованияЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		Если РезультатВыполнения.ВыходныеПараметры.Количество() >= 2 Тогда
			Параметры.НовоеПодключение.Вставить("ИсточникСобытия", Параметры.ВыходныеПараметры[0]);
			Параметры.НовоеПодключение.Вставить("ИменаСобытий",    Параметры.ВыходныеПараметры[1]);
		Иначе
			Параметры.НовоеПодключение.Вставить("ИсточникСобытия", "");
			Параметры.НовоеПодключение.Вставить("ИменаСобытий",    Неопределено);
		КонецЕсли;
		глПодключаемоеОборудование.ПараметрыПодключенияПО.Добавить(Параметры.НовоеПодключение);
		Если Параметры.ОповещениеПриПодключении <> Неопределено Тогда
			ОписаниеОшибки = НСтр("ru='Ошибок нет.'");
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки", Истина, ОписаниеОшибки);
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриПодключении, РезультатВыполнения);
		КонецЕсли;
	Иначе
		// Сообщим пользователю о том, что не удалось подключить устройство.
		Если Параметры.ОповещениеПриПодключении <> Неопределено Тогда
			ОписаниеОшибки = НСтр("ru='Не удалось подключить устройство ""%Наименование%"": %ОписаниеОшибки% (%КодОшибки%)'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%"  , Параметры.НовоеПодключение.Наименование);
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ОписаниеОшибки%", Параметры.ВыходныеПараметры[1]);
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%КодОшибки%"     , Параметры.ВыходныеПараметры[0]);
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки", Ложь, ОписаниеОшибки);
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриПодключении, РезультатВыполнения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПодключениеОборудованияПолучениеОбъектаДрайвераЗавершение(ОбъектДрайвера, Параметры) Экспорт
	
	Если ОбъектДрайвера = Неопределено Тогда
		
		Если Параметры.ОповещениеПриПодключении <> Неопределено Тогда
			// Сообщить об ошибке, что не удалось загрузить драйвер.
			ОписаниеОшибки = НСтр("ru='%Наименование%: Не удалось загрузить драйвер устройства.
										|Проверьте, что драйвер корректно установлен и зарегистрирован в системе.'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", Параметры.НовоеПодключение.Наименование);
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки", Ложь, ОписаниеОшибки);
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриПодключении, РезультатВыполнения);
		КонецЕсли;
		
	Иначе
		Оповещение = Новый ОписаниеОповещения("НачатьПодключениеОборудованияЗавершение", ЭтотОбъект, Параметры);
		Параметры.ОбработчикДрайвера.НачатьПодключениеУстройства(Оповещение, ОбъектДрайвера, 
			 Параметры.НовоеПодключение.Параметры,  Параметры.НовоеПодключение.ПараметрыПодключения, Параметры);
	КонецЕсли;
	
КонецПроцедуры

// Начать подключения устройсва.
// 
Процедура НачатьПодключениеОборудования(ОповещениеПриПодключении, ИдентификаторКлиента, ТипыПО = Неопределено, ИдентификаторУстройства = Неопределено) Экспорт
	   
	ОбъектДрайвера = Неопределено;
	
	Результат = МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента();
	Если Не Результат Тогда
		Если ОповещениеПриПодключении <> Неопределено Тогда
			ОписаниеОшибки = НСтр("ru='Предварительно необходимо выбрать рабочее место подключаемого оборудования текущего сеанса.'");
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки", Результат, ОписаниеОшибки);
			ВыполнитьОбработкуОповещения(ОповещениеПриПодключении, РезультатВыполнения);
		КонецЕсли;
	КонецЕсли;
	
	СписокОборудования = МенеджерОборудованияКлиентПовтИсп.ПолучитьСписокОборудования(ТипыПО, ИдентификаторУстройства);
	
	Если СписокОборудования.Количество() > 0 Тогда
		Для каждого Устройство Из СписокОборудования Цикл
			
			// Проверим, не подключено ли устройство ранее.
			ПодключенноеУстройство = ПолучитьПодключенноеУстройство(глПодключаемоеОборудование.ПараметрыПодключенияПО, Устройство.Ссылка);
			
			Если ПодключенноеУстройство = Неопределено Тогда // Если устройство не было подключено ранее.
				
				ОбработчикДрайвера = МенеджерОборудованияКлиентПовтИсп.ПолучитьОбработчикДрайвера(Устройство.ОбработчикДрайвера, Не Устройство.ВСоставеКонфигурации);
				
				НовоеПодключение = Новый Структура();
				НовоеПодключение.Вставить("Клиенты"               , Новый Массив());
				НовоеПодключение.Клиенты.Добавить(ИдентификаторКлиента);
				НовоеПодключение.Вставить("Ссылка"                 , Устройство.Ссылка);
				НовоеПодключение.Вставить("ИдентификаторУстройства", Устройство.ИдентификаторУстройства);
				НовоеПодключение.Вставить("ОбработчикДрайвера"     , Устройство.ОбработчикДрайвера);
				НовоеПодключение.Вставить("Наименование"           , Устройство.Наименование);
				НовоеПодключение.Вставить("ТипОборудования"        , Устройство.ТипОборудования);
				НовоеПодключение.Вставить("ДрайверОборудования"    , Устройство.ДрайверОборудования);
				НовоеПодключение.Вставить("ВСоставеКонфигурации"   , Устройство.ВСоставеКонфигурации);
				НовоеПодключение.Вставить("ИдентификаторОбъекта"   , Устройство.ИдентификаторОбъекта);
				НовоеПодключение.Вставить("ИмяМакетаДрайвера"      , Устройство.ИмяМакетаДрайвера);
				НовоеПодключение.Вставить("ИмяФайлаДрайвера"       , Устройство.ИмяФайлаДрайвера);
				НовоеПодключение.Вставить("РабочееМесто"           , Устройство.РабочееМесто);
				НовоеПодключение.Вставить("ИмяКомпьютера"          , Устройство.ИмяКомпьютера);
				НовоеПодключение.Вставить("Параметры"              , Устройство.Параметры);
				НовоеПодключение.Вставить("КоличествоПодключенных" , 1);
				НовоеПодключение.Вставить("ПараметрыПодключения"   , Новый Структура());
				НовоеПодключение.ПараметрыПодключения.Вставить("ТипОборудования", Устройство.ТипОборудованияИмя);
				
				Если ОбработчикДрайвера = Неопределено Тогда
					// Сообщить об ошибке, что не удалось подключить обработчик.
					Если ОповещениеПриПодключении <> Неопределено Тогда
						ОписаниеОшибки = НСтр("ru='Не удалось подключить обработчик драйвера.'");
						РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки", Ложь, ОписаниеОшибки);
						ВыполнитьОбработкуОповещения(ОповещениеПриПодключении, РезультатВыполнения);
					КонецЕсли;
					Продолжить;
				Иначе
					
					// Разделение на асинронные и синронные вызывы.
					Если ОбработчикДрайвера.ПоддержкаАсинхронногоРежима() Тогда
						// Асинронные вызовы
						ПараметрыКоманды = Новый Структура("НовоеПодключение, ОповещениеПриПодключении, ОбработчикДрайвера", НовоеПодключение, ОповещениеПриПодключении, ОбработчикДрайвера);
						Оповещение = Новый ОписаниеОповещения("НачатьПодключениеОборудованияПолучениеОбъектаДрайвераЗавершение", ЭтотОбъект, ПараметрыКоманды);
						НачатьПолучениеОбъектаДрайвера(Оповещение, Устройство);
					Иначе
						// Синронные
						ОбъектДрайвера = ПолучитьОбъектДрайвера(Устройство);
						Если ОбъектДрайвера = Неопределено Тогда
							Если ОповещениеПриПодключении <> Неопределено Тогда
								// Сообщить об ошибке, что не удалось загрузить драйвер.
								ОписаниеОшибки = НСтр("ru='%Наименование%: Не удалось загрузить драйвер устройства.
													|Проверьте, что драйвер корректно установлен и зарегистрирован в системе.'");
								ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%",НовоеПодключение.Наименование);
								РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки", Ложь, ОписаниеОшибки);
								ВыполнитьОбработкуОповещения(ОповещениеПриПодключении, РезультатВыполнения);
							КонецЕсли;
							Продолжить;
						Иначе
							ВыходныеПараметры = Неопределено;
							Результат = ОбработчикДрайвера.ПодключитьУстройство(ОбъектДрайвера, НовоеПодключение.Параметры, НовоеПодключение.ПараметрыПодключения, ВыходныеПараметры);
							
							Если Результат Тогда
								
								Если ВыходныеПараметры.Количество() >= 2 Тогда
									НовоеПодключение.Вставить("ИсточникСобытия", ВыходныеПараметры[0]);
									НовоеПодключение.Вставить("ИменаСобытий",    ВыходныеПараметры[1]);
								Иначе
									НовоеПодключение.Вставить("ИсточникСобытия", "");
									НовоеПодключение.Вставить("ИменаСобытий",    Неопределено);
								КонецЕсли;
								глПодключаемоеОборудование.ПараметрыПодключенияПО.Добавить(НовоеПодключение);
								
								Если ОповещениеПриПодключении <> Неопределено Тогда
									ОписаниеОшибки = НСтр("ru='Ошибок нет.'");
									РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки", Истина, ОписаниеОшибки);
									ВыполнитьОбработкуОповещения(ОповещениеПриПодключении, РезультатВыполнения);
								КонецЕсли;
								
							Иначе
								// Сообщим пользователю о том, что не удалось подключить устройство.
								Если ОповещениеПриПодключении <> Неопределено Тогда
									ОписаниеОшибки = НСтр("ru='Не удалось подключить устройство ""%Наименование%"": %ОписаниеОшибки% (%КодОшибки%)'");
									ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%"  , НовоеПодключение.Наименование);
									ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
									ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%КодОшибки%"     , ВыходныеПараметры[0]);
									РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки", Ложь, ОписаниеОшибки);
									ВыполнитьОбработкуОповещения(ОповещениеПриПодключении, РезультатВыполнения);
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
			
			Иначе // Устройство было подключено ранее.
				// Увеличим количество пользователей данного соединения.
				ПодключенноеУстройство.Клиенты.Добавить(ИдентификаторКлиента);
				ПодключенноеУстройство.КоличествоПодключенных = ПодключенноеУстройство.КоличествоПодключенных + 1;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли  ИдентификаторУстройства <> Неопределено И ОповещениеПриПодключении <> Неопределено Тогда
		ОписаниеОшибки =  НСтр("ru='Выбранное устройство не может использоваться для подключения. Укажите другое устройство.'");
		РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки", Результат, ОписаниеОшибки);
		ВыполнитьОбработкуОповещения(ОповещениеПриПодключении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Начать отключение устройств по типу оборудования.
//
Процедура НачатьОтключениеОборудованиеПоТипу(ОповещениеПриОтключении, ИдентификаторКлиента, ТипыПО) Экспорт
	
	НачатьОтключениеОборудование(ОповещениеПриОтключении, ИдентификаторКлиента, ТипыПО, );
	
КонецПроцедуры

//  Начать отключать устройства определенное идентификатором.
//
Процедура НачатьОтключениеОборудованиеПоИдентификатору(ОповещениеПриОтключении, ИдентификаторКлиента, ИдентификаторУстройства) Экспорт
	
	НачатьОтключениеОборудование(ОповещениеПриОтключении, ИдентификаторКлиента, , ИдентификаторУстройства);
	
КонецПроцедуры

Процедура НачатьОтключениеОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		Параметры.ПодключенноеУстройство.КоличествоПодключенных = 0;
		
		НомерСтрокиМассива = глПодключаемоеОборудование.ПараметрыПодключенияПО.Найти(Параметры.ПодключенноеУстройство);
		Если НомерСтрокиМассива <> Неопределено Тогда
			глПодключаемоеОборудование.ПараметрыПодключенияПО.Удалить(НомерСтрокиМассива);
		КонецЕсли;
		Если Параметры.ОповещениеПриОтключении <> Неопределено Тогда
			ОписаниеОшибки = НСтр("ru='Ошибок нет.'");
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки", Истина, ОписаниеОшибки);
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриОтключении, РезультатВыполнения);
		КонецЕсли;
	Иначе
		// Сообщим пользователю о том, что не удалось подключить устройство.
		Если Параметры.ОповещениеПриОтключении <> Неопределено Тогда
			ОписаниеОшибки = НСтр("ru='При отключении устройства ""%Наименование%"" произошла ошибка: %ОписаниеОшибки% (%КодОшибки%).'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%"  , Параметры.ПодключенноеУстройство.Наименование);
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ОписаниеОшибки%", Параметры.ВыходныеПараметры[1]);
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%КодОшибки%"     , Параметры.ВыходныеПараметры[0]);
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки", Ложь, ОписаниеОшибки);
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриОтключении, РезультатВыполнения);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура НачатьОтключениеОборудованиеПолучениеОбъектаДрайвераЗавершение(ОбъектДрайвера, Параметры) Экспорт
	
	Если ОбъектДрайвера = Неопределено Тогда
		
		Если Параметры.ОповещениеПриОтключении <> Неопределено Тогда
			// Сообщить об ошибке, что не удалось загрузить драйвер.
			ОписаниеОшибки = НСтр("ru='%Наименование%: Не удалось загрузить драйвер устройства.
										|Проверьте, что драйвер корректно установлен и зарегистрирован в системе.'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", Параметры.ПодключенноеУстройство.Наименование);
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки", Ложь, ОписаниеОшибки);
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриОтключении, РезультатВыполнения);
		КонецЕсли;
		
	Иначе
		Оповещение = Новый ОписаниеОповещения("НачатьОтключениеОборудованиеЗавершение", ЭтотОбъект, Параметры);
		Параметры.ОбработчикДрайвера.НачатьОтключениеУстройства(Оповещение, ОбъектДрайвера, 
			 Параметры.ПодключенноеУстройство.Параметры,  Параметры.ПодключенноеУстройство.ПараметрыПодключения, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

// Функция подключает устройства по типу оборудования.
// 
Процедура НачатьОтключениеОборудование(ОповещениеПриОтключении, ИдентификаторКлиента, ТипыПО = Неопределено, ИдентификаторУстройства = Неопределено)
	
	Если глПодключаемоеОборудование.ПараметрыПодключенияПО <> Неопределено Тогда
		КоличествоУстройств = глПодключаемоеОборудование.ПараметрыПодключенияПО.Количество();
		Для Индекс = 1 По КоличествоУстройств Цикл
			
			ПодключенноеУстройство = глПодключаемоеОборудование.ПараметрыПодключенияПО[КоличествоУстройств - Индекс];
			ИмяТипаПО = МенеджерОборудованияКлиентПовтИсп.ПолучитьИмяТипаОборудования(ПодключенноеУстройство.ТипОборудования);
			КлиентПодключения = ПодключенноеУстройство.Клиенты.Найти(ИдентификаторКлиента);
			Если КлиентПодключения <> Неопределено  И (ТипыПО = Неопределено Или ТипыПО.Найти(ИмяТипаПО) <> Неопределено)
			   И (ИдентификаторУстройства = Неопределено  Или ПодключенноеУстройство.Ссылка = ИдентификаторУстройства)Тогда
				
				Если ПодключенноеУстройство.КоличествоПодключенных = 1 Тогда
					
					ОбработчикДрайвера = МенеджерОборудованияКлиентПовтИсп.ПолучитьОбработчикДрайвера(ПодключенноеУстройство.ОбработчикДрайвера, Не ПодключенноеУстройство.ВСоставеКонфигурации);
					Если ОбработчикДрайвера = Неопределено Тогда
						// Сообщить об ошибке, что не удалось подключить обработчик.
						Если ОповещениеПриОтключении <> Неопределено Тогда
							ОписаниеОшибки = НСтр("ru='Не удалось подключить обработчик драйвера.'");
							РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки", Ложь, ОписаниеОшибки);
							ВыполнитьОбработкуОповещения(ОповещениеПриОтключении, РезультатВыполнения);
						КонецЕсли;
					Иначе
						// Разделение на асинронные и синронные вызывы.
						Если ОбработчикДрайвера.ПоддержкаАсинхронногоРежима() Тогда
							// Асинронные вызовы
							ПараметрыКоманды = Новый Структура("ПодключенноеУстройство, ОповещениеПриОтключении, ОбработчикДрайвера", ПодключенноеУстройство, ОповещениеПриОтключении, ОбработчикДрайвера);
							Оповещение = Новый ОписаниеОповещения("НачатьОтключениеОборудованиеПолучениеОбъектаДрайвераЗавершение", ЭтотОбъект, ПараметрыКоманды);
							НачатьПолучениеОбъектаДрайвера(Оповещение, ПодключенноеУстройство);
						Иначе
							ОбъектДрайвера = ПолучитьОбъектДрайвера(ПодключенноеУстройство);
							Если ОбъектДрайвера = Неопределено Тогда
								Если ОповещениеПриОтключении <> Неопределено Тогда
									// Сообщить об ошибке, что не удалось загрузить драйвер.
									ОписаниеОшибки = НСтр("ru='%Наименование%: Не удалось загрузить драйвер устройства.
														|Проверьте, что драйвер корректно установлен и зарегистрирован в системе.'");
									ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%",ПодключенноеУстройство.Наименование);
									РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки", Ложь, ОписаниеОшибки);
									ВыполнитьОбработкуОповещения(ОповещениеПриОтключении, РезультатВыполнения);
								КонецЕсли;
							Иначе
								ВыходныеПараметры = Неопределено;
								Результат = ОбработчикДрайвера.ОтключитьУстройство(ОбъектДрайвера, ПодключенноеУстройство.Параметры, ПодключенноеУстройство.ПараметрыПодключения, ВыходныеПараметры);
								Если НЕ Результат Тогда
									// Сообщим пользователю о том, что не удалось подключить устройство.
									Если ОповещениеПриОтключении <> Неопределено Тогда
										ОписаниеОшибки = НСтр("ru='При отключении устройства ""%Наименование%"" произошла ошибка: %ОписаниеОшибки% (%КодОшибки%)'");
										ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%"  , ПодключенноеУстройство.Наименование);
										ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
										ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%КодОшибки%"     , ВыходныеПараметры[0]);
										РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки", Ложь, ОписаниеОшибки);
										ВыполнитьОбработкуОповещения(ОповещениеПриОтключении, РезультатВыполнения);
									КонецЕсли;
								Иначе
									ПодключенноеУстройство.КоличествоПодключенных = 0;
								КонецЕсли;
								
								НомерСтрокиМассива = глПодключаемоеОборудование.ПараметрыПодключенияПО.Найти(ПодключенноеУстройство);
								Если НомерСтрокиМассива <> Неопределено Тогда
									глПодключаемоеОборудование.ПараметрыПодключенияПО.Удалить(НомерСтрокиМассива);
								КонецЕсли;
								
								Если ОповещениеПриОтключении <> Неопределено Тогда
									ОписаниеОшибки = НСтр("ru='Ошибок нет.'");
									РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки", Истина, ОписаниеОшибки);
									ВыполнитьОбработкуОповещения(ОповещениеПриОтключении, РезультатВыполнения);
								КонецЕсли;
								
							КонецЕсли;
							
						КонецЕсли;
					КонецЕсли;
					
				Иначе
					ПодключенноеУстройство.КоличествоПодключенных = ПодключенноеУстройство.КоличествоПодключенных - 1;
					ПодключенноеУстройство.Клиенты.Удалить(КлиентПодключения);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры  

#КонецОбласти   

#Область ПроцедурыИФункцииПодключенияОтключенияОборудованияВФорме

// Подключает необходимые типы оборудования при открытии формы.
//
// Параметры:
//	Форма - УправляемаяФорма
//	ПоддерживаемыеТипыПодключаемогоОборудования - Строка
//		Содержит перечень типов подключаемого оборудования, разделенных запятыми.
//
Функция ПодключитьОборудованиеПриОткрытииФормы(Форма, ПоддерживаемыеТипыПодключаемогоОборудования) Экспорт
	
	ОборудованиеПодключено = Истина;
	
	Форма.ПоддерживаемыеТипыПодключаемогоОборудования = ПоддерживаемыеТипыПодключаемогоОборудования;
	
	Если Форма.ИспользоватьПодключаемоеОборудование Тогда

		ОписаниеОшибки = "";
		
		ОборудованиеПодключено = ПодключитьОборудованиеПоТипу(
			Форма.УникальныйИдентификатор,
			ПреобразоватьСписокСтрокойВМассив(Форма.ПоддерживаемыеТипыПодключаемогоОборудования),
			ОписаниеОшибки);
		
		Если НЕ ОборудованиеПодключено Тогда
			
			ТекстСообщения = НСтр("ru='При подключении оборудования произошла ошибка:
									|""%ОписаниеОшибки%"".'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОборудованиеПодключено; // Признак ошибки при подключении оборудования.
	
КонецФункции

// Отключает подключенные типы оборудования при закрытии формы.
//
Функция ОтключитьОборудованиеПриЗакрытииФормы(Форма) Экспорт
	
	Возврат МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(
				Форма.УникальныйИдентификатор,
				ПреобразоватьСписокСтрокойВМассив(Форма.ПоддерживаемыеТипыПодключаемогоОборудования));
	
КонецФункции

// Начать подключение необходимых типов оборудования при открытии формы.
//
// Параметры:
//	Форма - УправляемаяФорма
//	ПоддерживаемыеТипыПодключаемогоОборудования - Строка
//		Содержит перечень типов подключаемого оборудования, разделенных запятыми.
//
Процедура НачатьПодключениеОборудованиеПриОткрытииФормы(ОповещениеПриПодключении, Форма, ПоддерживаемыеТипыПодключаемогоОборудования) Экспорт
	
	Форма.ПоддерживаемыеТипыПодключаемогоОборудования = ПоддерживаемыеТипыПодключаемогоОборудования;
	
	Если Форма.ИспользоватьПодключаемоеОборудование Тогда
			
	Если ОповещениеПриПодключении = Неопределено Тогда
		ОповещениеПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершениеПоУмолчанию", МенеджерОборудованияКлиент);
	КонецЕсли;


		НачатьПодключениеОборудованиеПоТипу(ОповещениеПриПодключении, Форма.УникальныйИдентификатор,
											ПреобразоватьСписокСтрокойВМассив(Форма.ПоддерживаемыеТипыПодключаемогоОборудования));
	КонецЕсли;
	
КонецПроцедуры

// Обработчик оповещения по умолчанию
//
Процедура ПодключитьОборудованиеЗавершениеПоУмолчанию(РезультатВыполнения, Параметры) Экспорт
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru='При подключении оборудования произошла ошибка:""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Начать отключать оборудование по типу при закрытии формы.
//
Процедура НачатьОтключениеОборудованиеПриЗакрытииФормы(ОповещениеПриОтключении, Форма) Экспорт
	
	Если ОповещениеПриОтключении = Неопределено Тогда
		ОповещениеПриОтключении = Новый ОписаниеОповещения("ОтключитьОборудованиеЗавершениеПоУмолчанию", МенеджерОборудованияКлиент);
	КонецЕсли;
	
	НачатьОтключениеОборудованиеПоТипу(ОповещениеПриОтключении, 
										Форма.УникальныйИдентификатор, 
										ПреобразоватьСписокСтрокойВМассив(Форма.ПоддерживаемыеТипыПодключаемогоОборудования));
	
КонецПроцедуры

Процедура ОтключитьОборудованиеЗавершениеПоУмолчанию(РезультатВыполнения, Параметры) Экспорт
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru='При отключении оборудования произошла ошибка: ""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииДляРаботыСПодключаемымОборудованием

// Направляет команду ответственному обработчику драйвера
// (в соответствии с указанным значением обработчика во входном параметре "Идентификатор").
Функция ВыполнитьКоманду(Идентификатор, Команда, ВходныеПараметры, ВыходныеПараметры, Таймаут = -1) Экспорт
	
	Результат = Ложь;
	
	// Поиск подключенного устройства.
	ПодключенноеУстройство = ПолучитьПодключенноеУстройство(глПодключаемоеОборудование.ПараметрыПодключенияПО, Идентификатор);
	
	Если ПодключенноеУстройство <> Неопределено Тогда
		// Получение объекта драйвера
		ОбъектДрайвера = ПолучитьОбъектДрайвера(ПодключенноеУстройство);
		Если ОбъектДрайвера = Неопределено Тогда
			// Сообщить об ошибке, что не удалось загрузить драйвер.
			ВыходныеПараметры = Новый Массив();
			ОписаниеОшибки = НСтр("ru='""%Наименование%"": Не удалось загрузить драйвер устройства.
										|Проверьте, что драйвер корректно установлен и зарегистрирован в системе.'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", ПодключенноеУстройство.Наименование);
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(ОписаниеОшибки);
		Иначе
			Параметры            = ПодключенноеУстройство.Параметры;
			ПараметрыПодключения = ПодключенноеУстройство.ПараметрыПодключения;
			ОбработчикДрайвера = МенеджерОборудованияКлиентПовтИсп.ПолучитьОбработчикДрайвера(ПодключенноеУстройство.ОбработчикДрайвера, Не ПодключенноеУстройство.ВСоставеКонфигурации);
			Если ОбработчикДрайвера = Неопределено Тогда
				// Сообщить об ошибке, что не удалось загрузить драйвер.
				ВыходныеПараметры = Новый Массив();
				ТекстСообщения = НСтр("ru='Не удалось подключить обработчик драйвера.'");
				ВыходныеПараметры.Добавить(999);
				ВыходныеПараметры.Добавить(ТекстСообщения);
				ВыходныеПараметры.Добавить(НСтр("ru='Не установлен'"));
			Иначе
				// Принудительно заменяем асинхронный обработчик на синхронный, так как работам в синхронном режиме.
				Если ОбработчикДрайвера = ПодключаемоеОборудованиеУниверсальныйДрайверАсинхронноКлиент Тогда
					ОбработчикДрайвера = ПодключаемоеОборудованиеУниверсальныйДрайверКлиент;
				КонецЕсли;
				// Вызов метода выполнения команды у обработчика.
				Результат = ОбработчикДрайвера.ВыполнитьКоманду(Команда, ВходныеПараметры, ВыходныеПараметры, 
																ОбъектДрайвера, Параметры, ПараметрыПодключения); 
			КонецЕсли
		КонецЕсли;
	Иначе
		// Сообщить об ошибке, что устройство не подключено.
		ВыходныеПараметры = Новый Массив();
		ТекстСообщения = НСтр("ru='Устройство не подключено. Перед выполнением операции устройство должно быть подключено.'");
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Завершение выполнение команды ответственному обработчику драйвера
//
Процедура НачатьВыполнениеКомандыЗавершение(ОбъектДрайвера, ПараметрыКоманды) Экспорт
	
	Если ОбъектДрайвера = Неопределено Тогда
		// Сообщить об ошибке, что не удалось загрузить драйвер.
		ТекстОшибки = НСтр("ru='Не удалось загрузить драйвер устройства.
								|Проверьте, что драйвер корректно установлен и зарегистрирован в системе.'");
		ВыходныеПараметры = Новый Массив();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ТекстОшибки);
		ВыходныеПараметры.Добавить(НСтр("ru='Не установлен'"));
		РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ПараметрыКоманды.ОповещениеПриЗавершении, РезультатВыполнения);
	Иначе
		
		ОбработчикДрайвера = МенеджерОборудованияКлиентПовтИсп.ПолучитьОбработчикДрайвера(ПараметрыКоманды.ДанныеОборудования.ОбработчикДрайвера, Не ПараметрыКоманды.ДанныеОборудования.ВСоставеКонфигурации);
		Если ОбработчикДрайвера = Неопределено Тогда
			// Сообщить об ошибке, что не удалось загрузить драйвер.
			ТекстОшибки = НСтр("ru='Не удалось подключить обработчик драйвера.'");
			ВыходныеПараметры = Новый Массив();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(ТекстОшибки);
			ВыходныеПараметры.Добавить(НСтр("ru='Не установлен'"));
			РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ПараметрыКоманды.ОповещениеПриЗавершении, РезультатВыполнения);
		Иначе
			Если ОбработчикДрайвера.ПоддержкаАсинхронногоРежима() Тогда
				ОбработчикДрайвера.НачатьВыполнениеКоманды(ПараметрыКоманды.ОповещениеПриЗавершении, ПараметрыКоманды.Команда, ПараметрыКоманды.ВходныеПараметры,
					ОбъектДрайвера, ПараметрыКоманды.ДанныеОборудования.Параметры, ПараметрыКоманды.ДанныеОборудования.ПараметрыПодключения);
			Иначе
				ВыходныеПараметры = Неопределено;
				Результат = ОбработчикДрайвера.ВыполнитьКоманду(ПараметрыКоманды.Команда, ПараметрыКоманды.ВходныеПараметры,
					ВыходныеПараметры, ОбъектДрайвера, ПараметрыКоманды.ДанныеОборудования.Параметры, ПараметрыКоманды.ДанныеОборудования.ПараметрыПодключения);
				Если Не Результат Тогда
					ВыходныеПараметры.Добавить(НСтр("ru='Установлен'"));
				КонецЕсли;
				РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Результат, ВыходныеПараметры);
				ВыполнитьОбработкуОповещения(ПараметрыКоманды.ОповещениеПриЗавершении, РезультатВыполнения);
			КонецЕсли;
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

// Начать выполнение команды ответственному обработчику драйвера
//
Процедура НачатьВыполнениеКоманды(ОповещениеПриЗавершении, Идентификатор, Команда, ВходныеПараметры) Экспорт
	
	// Поиск подключенного устройства.
	ПодключенноеУстройство = ПолучитьПодключенноеУстройство(глПодключаемоеОборудование.ПараметрыПодключенияПО, Идентификатор);
	
	Если ПодключенноеУстройство <> Неопределено Тогда
		ПараметрыКоманды = Новый Структура();
		ПараметрыКоманды.Вставить("Идентификатор"      , Идентификатор);
		ПараметрыКоманды.Вставить("Команда"            , Команда);
		ПараметрыКоманды.Вставить("ВходныеПараметры"   , ВходныеПараметры);
		ПараметрыКоманды.Вставить("ДанныеОборудования" , ПодключенноеУстройство);
		ПараметрыКоманды.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
		Оповещение = Новый ОписаниеОповещения("НачатьВыполнениеКомандыЗавершение", ЭтотОбъект, ПараметрыКоманды);
		НачатьПолучениеОбъектаДрайвера(Оповещение, ПодключенноеУстройство);
	Иначе
		// Сообщить об ошибке, что устройство не подключено.
		ТекстОшибки = НСтр("ru='Устройство не подключено. Перед выполнением операции устройство должно быть подключено.'");
		ВыходныеПараметры = Новый Массив();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ТекстОшибки);
		ВыходныеПараметры.Добавить(НСтр("ru='Установлен'"));
		РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет дополнительную команду к драйверу, не требующую предварительного подключения устройства в системе.
//
Функция ВыполнитьДополнительнуюКоманду(Команда, ВходныеПараметры, ВыходныеПараметры, Идентификатор, Параметры) Экспорт
	
	Результат = Ложь;
	
	// Поиск подключенного устройства.
	ПодключенноеУстройство = ПолучитьПодключенноеУстройство(глПодключаемоеОборудование.ПараметрыПодключенияПО, Идентификатор);

	Если ПодключенноеУстройство = Неопределено Тогда
		
		ДанныеОборудования = МенеджерОборудованияВызовСервера.ПолучитьДанныеУстройства(Идентификатор);
		
		времПараметрыПодключения = Новый Структура();
		времПараметрыПодключения.Вставить("ТипОборудования", ДанныеОборудования.ТипОборудованияИмя);
		
		ОбъектДрайвера = ПолучитьОбъектДрайвера(ДанныеОборудования);
		
		Если ОбъектДрайвера = Неопределено Тогда
			
			// Сообщить об ошибке, что не удалось загрузить драйвер.
			ВыходныеПараметры = Новый Массив();
			ТекстСообщения = НСтр("ru='Не удалось загрузить драйвер устройства.
										|Проверьте, что драйвер корректно установлен и зарегистрирован в системе.'");
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(ТекстСообщения);
			ВыходныеПараметры.Добавить(НСтр("ru='Не установлен'"));
			
		Иначе
			
			ОбработчикДрайвера = МенеджерОборудованияКлиентПовтИсп.ПолучитьОбработчикДрайвера(ДанныеОборудования.ОбработчикДрайвера, Не ДанныеОборудования.ВСоставеКонфигурации);
		
			Если ОбработчикДрайвера = Неопределено Тогда
				// Сообщить об ошибке, что не удалось загрузить драйвер.
				ВыходныеПараметры = Новый Массив();
				ТекстСообщения = НСтр("ru='Не удалось подключить обработчик драйвера.'");
				ВыходныеПараметры.Добавить(999);
				ВыходныеПараметры.Добавить(ТекстСообщения);
				ВыходныеПараметры.Добавить(НСтр("ru='Не установлен'"));
			Иначе
				// Принудительно заменяем асинхронный обработчик на синхронный, так как работам в синхронном режиме.
				Если ОбработчикДрайвера = ПодключаемоеОборудованиеУниверсальныйДрайверАсинхронноКлиент Тогда
					ОбработчикДрайвера = ПодключаемоеОборудованиеУниверсальныйДрайверКлиент;
				КонецЕсли;
				Результат = ОбработчикДрайвера.ВыполнитьКоманду(Команда,
					ВходныеПараметры,
					ВыходныеПараметры,
					ОбъектДрайвера,
					Параметры,
					времПараметрыПодключения);
					Если Не Результат Тогда
						ВыходныеПараметры.Добавить(НСтр("ru='Установлен'"));
					КонецЕсли;
			КонецЕсли
				
		КонецЕсли;
	Иначе
		// Сообщить об ошибке, что устройство подключено.
		ВыходныеПараметры = Новый Массив();
		ТекстСообщения = НСтр("ru='Устройство подключено. Перед выполнением операции устройство должно быть отключено.'");
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ТекстСообщения);
		ВыходныеПараметры.Добавить(НСтр("ru='Установлен'"));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполняет команду обработчика драйвера, не требующую предварительного подключения устройства в системе.
//
Функция ВыполнитьКомандуОбработчикаДрайвера(Команда, ВходныеПараметры, ВыходныеПараметры, Идентификатор, Параметры, ПоддержкаАсинхронногоРежима) Экспорт
	
	Результат = Ложь;
	
	ДанныеОборудования = МенеджерОборудованияВызовСервера.ПолучитьДанныеУстройства(Идентификатор);
	
	ОбработчикДрайвера = МенеджерОборудованияКлиентПовтИсп.ПолучитьОбработчикДрайвера(ДанныеОборудования.ОбработчикДрайвера, Не ДанныеОборудования.ВСоставеКонфигурации);
	
	Если ОбработчикДрайвера <> Неопределено Тогда
		Результат = ОбработчикДрайвера.ВыполнитьКоманду(Команда, ВходныеПараметры, ВыходныеПараметры, Неопределено, Параметры, Неопределено);
		ПоддержкаАсинхронногоРежима = ОбработчикДрайвера.ПоддержкаАсинхронногоРежима();
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции


// Завершение выполнение дополнительной команды к драйверу, не требующую предварительного подключения устройства в системе.
//
Процедура НачатьВыполнениеДополнительнойКомандыЗавершение(ОбъектДрайвера, ПараметрыКоманды) Экспорт
	
	Если ОбъектДрайвера = Неопределено Тогда
		// Сообщить об ошибке, что не удалось загрузить драйвер.
		ТекстОшибки = НСтр("ru='Не удалось загрузить драйвер устройства.
								|Проверьте, что драйвер корректно установлен и зарегистрирован в системе.'");
		ВыходныеПараметры = Новый Массив();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ТекстОшибки);
		ВыходныеПараметры.Добавить(НСтр("ru='Не установлен'"));
		РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ПараметрыКоманды.ОповещениеПриЗавершении, РезультатВыполнения);
	Иначе
		
		ОбработчикДрайвера = МенеджерОборудованияКлиентПовтИсп.ПолучитьОбработчикДрайвера(ПараметрыКоманды.ДанныеОборудования.ОбработчикДрайвера, Не ПараметрыКоманды.ДанныеОборудования.ВСоставеКонфигурации);
		
		Если ОбработчикДрайвера = Неопределено Тогда
			// Сообщить об ошибке, что не удалось подключить обработчик драйвера.
			ТекстОшибки = НСтр("ru='Не удалось подключить обработчик драйвера.'");
			ВыходныеПараметры = Новый Массив();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(ТекстОшибки);
			ВыходныеПараметры.Добавить(НСтр("ru='Не установлен'"));
			РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ПараметрыКоманды.ОповещениеПриЗавершении, РезультатВыполнения);
		Иначе
			времПараметрыПодключения = Новый Структура();
			времПараметрыПодключения.Вставить("ТипОборудования", ПараметрыКоманды.ДанныеОборудования.ТипОборудованияИмя);
			
			Если ОбработчикДрайвера.ПоддержкаАсинхронногоРежима() Тогда
				ОбработчикДрайвера.НачатьВыполнениеКоманды(ПараметрыКоманды.ОповещениеПриЗавершении, ПараметрыКоманды.Команда, ПараметрыКоманды.ВходныеПараметры,
					ОбъектДрайвера, ПараметрыКоманды.Параметры, времПараметрыПодключения);
			Иначе
				ВыходныеПараметры = Неопределено;
				Результат = ОбработчикДрайвера.ВыполнитьКоманду(ПараметрыКоманды.Команда, ПараметрыКоманды.ВходныеПараметры,
					ВыходныеПараметры, ОбъектДрайвера, ПараметрыКоманды.Параметры, времПараметрыПодключения);
				Если Не Результат Тогда
					ВыходныеПараметры.Добавить(НСтр("ru='Установлен'"));
				КонецЕсли;
				РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Результат, ВыходныеПараметры);
				ВыполнитьОбработкуОповещения(ПараметрыКоманды.ОповещениеПриЗавершении, РезультатВыполнения);
			КонецЕсли;
		КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

// Начать выполнение дополнительной команды к драйверу, не требующую предварительного подключения устройства в системе.
//
Процедура НачатьВыполнениеДополнительнойКоманды(ОповещениеПриЗавершении, Команда, ВходныеПараметры, Идентификатор, Параметры) Экспорт
	
	// Поиск подключенного устройства.
	ПодключенноеУстройство = ПолучитьПодключенноеУстройство(глПодключаемоеОборудование.ПараметрыПодключенияПО, Идентификатор);
	                                                       
	Если ПодключенноеУстройство = Неопределено Тогда
		ДанныеОборудования = МенеджерОборудованияВызовСервера.ПолучитьДанныеУстройства(Идентификатор);
		ПараметрыКоманды = Новый Структура();
		ПараметрыКоманды.Вставить("Команда"           , Команда);
		ПараметрыКоманды.Вставить("ВходныеПараметры"  , ВходныеПараметры);
		ПараметрыКоманды.Вставить("Параметры"         , Параметры);
		ПараметрыКоманды.Вставить("ДанныеОборудования", ДанныеОборудования);
		ПараметрыКоманды.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
		Оповещение = Новый ОписаниеОповещения("НачатьВыполнениеДополнительнойКомандыЗавершение", ЭтотОбъект, ПараметрыКоманды);
		НачатьПолучениеОбъектаДрайвера(Оповещение, ДанныеОборудования);
	Иначе
		// Сообщить об ошибке, что устройство подключено.
		ТекстОшибки = НСтр("ru='Устройство подключено. Перед выполнением операции устройство должно быть отключено.'");
		ВыходныеПараметры = Новый Массив();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ТекстОшибки);
		ВыходныеПараметры.Добавить(НСтр("ru='Установлен'"));
		РезультатВыполнения = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

// Функция, вызываемая при начале работы системы.
// Выполняет подготовку данных механизма.
Функция ПриНачалеРаботыСистемы() Экспорт

	Если глПодключаемоеОборудование = Неопределено Тогда
		глПодключаемоеОборудование = Новый Структура("ДрайвераПодключаемогоОборудования,
												|ПараметрыПодключенияПО,
												|ПоследнийСлипЧек,
												|ТаблицаУстройствДМ,
												|ПараметрыДрайверМенеджера",
												 Новый Соответствие(),
												 Новый Массив(),
												 "",
												 Новый Структура(),
												 Новый Структура());
	КонецЕсли;
	
#Если Не ВебКлиент Тогда
	ПереустановитьПомеченныеДрайверы();
#КонецЕсли
	
КонецФункции

// Функция, вызываемая при начале работы системы.
// Выполняет подготовку данных механизма.
Функция ПередЗавершениемРаботыСистемы() Экспорт
	
	ОтключитьВсеОборудование();
	
КонецФункции

// Выполнить настройку оборудования.
// 
Процедура ВыполнитьНастройкуОборудования(Идентификатор) Экспорт

	Результат = Истина;
	
	ДанныеУстройства = МенеджерОборудованияКлиентПовтИсп.ПолучитьДанныеУстройства(Идентификатор);
	ПараметрыФормы = Новый Структура("ПараметрыОборудования", ДанныеУстройства.Параметры);
	ПараметрыФормы.Вставить("Идентификатор", Идентификатор);       
	ПараметрыФормы.Вставить("ДрайверОборудования", ДанныеУстройства.ДрайверОборудования);  
	
	ФормаНастройки = "ФормаНастройкиУниверсальныйДрайвер";
	
	ОбработчикДрайвера = МенеджерОборудованияКлиентПовтИсп.ПолучитьОбработчикДрайвера(ДанныеУстройства.ОбработчикДрайвера, Не ДанныеУстройства.ВСоставеКонфигурации);
		
	Если Не ОбработчикДрайвера = ПодключаемоеОборудованиеУниверсальныйДрайверКлиент И 
		Не ОбработчикДрайвера = ПодключаемоеОборудованиеУниверсальныйДрайверАсинхронноКлиент Тогда
		ФормаНастройки = МенеджерОборудованияКлиентПовтИсп.ПолучитьИмяФормыНастройкиПараметров(Строка(ДанныеУстройства.ОбработчикДрайвера));
	КонецЕсли;
		
	Если НЕ ПустаяСтрока(ФормаНастройки) Тогда
		Обработчик = Новый ОписаниеОповещения("ВыполнитьНастройкуОборудованияЗавершение", ЭтотОбъект);
		ОткрытьФорму("ОбщаяФорма." + ФормаНастройки, ПараметрыФормы,,,  ,, Обработчик, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Произошла ошибка инициализации формы настройки драйвера.'")); 
	КонецЕсли;
	
КонецПроцедуры

// Завершение настройки оборудования.
//
Процедура ВыполнитьНастройкуОборудованияЗавершение(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		РезультатЗавершения = Ложь;
		Если Результат.Свойство("Идентификатор") И Результат.Свойство("ПараметрыОборудования") Тогда
			РезультатЗавершения = МенеджерОборудованияВызовСервера.СохранитьПараметрыУстройства(Результат.Идентификатор, Результат.ПараметрыОборудования);
		КонецЕсли;
		
		Если РезультатЗавершения Тогда 
			ОбновитьПовторноИспользуемыеЗначения();
		Иначе
			СообщениеОбОшибке = НСтр("ru='Не удалось сохранить параметры устройства.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет пользовательские настройки подключаемого оборудования.
//
Процедура СохранитьПользовательскиеНастройкиПодключаемогоОборудования(СписокНастроек) Экспорт

	МенеджерОборудованияВызовСервера.СохранитьПользовательскиеНастройкиПодключаемогоОборудования(СписокНастроек);

КонецПроцедуры

// Процедура формирует задержку указанной длительности.
//
// Параметры:
//  Время - <Число>
//        - Длительность задержки в секундах.
//
Процедура Пауза(Время) Экспорт

	ВремяЗавершения = ТекущаяДата() + Время;
	Пока ТекущаяДата() < ВремяЗавершения Цикл
	КонецЦикла;

КонецПроцедуры

// Обрезает передаваемую строку по длине поля, если поле слишком короткое - дополняет символами
//
Функция ПостроитьПоле(Знач Текст, Знач ДлинаПоля, ДобСимвол = "", ДобавлятьСправа = Истина) Экспорт
	
	ДобСимвол = ?(ПустаяСтрока(ДобСимвол), " ", ДобСимвол);
	
	ТекстПолный = Лев(Текст, ДлинаПоля);
	Пока СтрДлина(ТекстПолный) < ДлинаПоля Цикл
		Если ДобавлятьСправа Тогда
			ТекстПолный = ТекстПолный + ДобСимвол;
		Иначе
			ТекстПолный = ДобСимвол + ТекстПолный;
		КонецЕсли;
	КонецЦикла;
	          
	Возврат ТекстПолный;
	
КонецФункции

// Выстраивает строку по длине поля, если поле длинное - переносит на следующую строку
//
Функция ПостроитьПолеПереносом(Знач Текст, Знач ДлинаПоля, ДобСимвол = "") Экспорт
	
	ДобСимвол = ?(ПустаяСтрока(ДобСимвол), " ", ДобСимвол);
	
	Если СтрДлина(Текст) > ДлинаПоля Тогда 
		ТекстПолный = "";
		Пока СтрДлина(Текст) > ДлинаПоля Цикл
			ТекстПолный = ТекстПолный + ?(ПустаяСтрока(ТекстПолный), "", Символы.ПС) +  Лев(Текст, ДлинаПоля);
			Текст = Сред(Текст, ДлинаПоля + 1);
		КонецЦикла;
		ТекстПолный = ТекстПолный + ?(ПустаяСтрока(Текст), "", Символы.ПС + Текст);
	Иначе
		ТекстПолный = Текст;
	КонецЕсли;
		
	Возврат ТекстПолный;
	
КонецФункции

// формирует строку из двух полей, если передается одно поле дополняет символами до нужного размера
//
Функция ВыстроитьПоля(Знач Текст1, Знач Текст2 = "", Знач ДлинаПоля) Экспорт
	
	Если ПустаяСтрока(Текст2) Тогда
		ТекстПолный = ПостроитьПоле(Текст1, СтрДлина(Текст1) + Цел((ДлинаПоля - СтрДлина(Текст1))/2), , Ложь);
		ТекстПолный = ПостроитьПоле(ТекстПолный, ДлинаПоля);
	ИначеЕсли СтрДлина(Текст1) + СтрДлина(Текст2) < ДлинаПоля Тогда
		ТекстПолный = ПостроитьПоле(Текст1, ДлинаПоля - СтрДлина(Текст2)) + Текст2;
	Иначе
		ТекстПолный = ПостроитьПоле(Текст1, ДлинаПоля) + Символы.ПС + ПостроитьПоле(Текст2, ДлинаПоля, ,Ложь)
	КонецЕсли;
	
	Возврат ТекстПолный;
	
КонецФункции

// Преобразовать cписок cтрокой в массив.
//
Функция ПреобразоватьСписокСтрокойВМассив(Источник) Экспорт
	
	ПромежуточнаяСтруктура = Новый Структура(Источник);
	Приемник = Новый Массив;
	
	Для Каждого КлючИЗначение Из ПромежуточнаяСтруктура Цикл
		Приемник.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	Возврат Приемник;
	
КонецФункции

// Возвращает макет слип чека по наименованию макета.
//
Функция ПолучитьСлипЧек(ИмяМакета, ШиринаСлипЧека, Параметры, АвторизацияПИН = Ложь) Экспорт

	Возврат МенеджерОборудованияКлиентПовтИсп.ПолучитьСлипЧек(ИмяМакета, ШиринаСлипЧека, Параметры, АвторизацияПИН);

КонецФункции

Процедура НачатьУстановкуРасширенияРаботыСФайламиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		НачатьУстановкуРасширенияРаботыСФайлами();
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПодключениеРасширенияРаботыСФайламиЗавершение(Подключено, ДополнительныеПараметры) Экспорт
	
	Если Не Подключено И ДополнительныеПараметры.ПредлагатьУстановку Тогда
		Оповещение = Новый ОписаниеОповещения("НачатьУстановкуРасширенияРаботыСФайламиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстСообщения = НСтр("ru='Для продолжении работы необходимо установить расширение для веб-клиента ""1С:Предприятие"". Установить?'");
		ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет); 
	КонецЕсли;
	
	Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Подключено);
	КонецЕсли
	
КонецПроцедуры

// Проверить доступность расширения работы с Файлами.
// 
Процедура ПроверитьДоступностьРасширенияРаботыСФайлами(ОповещениеПриЗавершении, ПредлагатьУстановку = Истина) Экспорт
	
	#Если Не ВебКлиент Тогда
	// В тонком и толстом клиентах расширение подключено всегда.
	ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Истина);
	Возврат;
	#КонецЕсли
	
	ДополнительныеПараметры = Новый Структура("ОповещениеПриЗавершении, ПредлагатьУстановку", ОповещениеПриЗавершении, ПредлагатьУстановку);
	Оповещение = Новый ОписаниеОповещения("НачатьПодключениеРасширенияРаботыСФайламиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);
	
КонецПроцедуры

// Завершение выбора файла драйвера.
//
Процедура ВыборФайлаДрайвераЗавершение(ВыбранныеФайлы, Параметры) Экспорт
	
	Если ТипЗнч(ВыбранныеФайлы) = Тип("Массив") И ВыбранныеФайлы.Количество() > 0 
		И Параметры.ОповещениеПриВыборе <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриВыборе, ВыбранныеФайлы[0]);
	КонецЕсли;
	
КонецПроцедуры

// Функция начинает выбор файла драйвера для последующей загрузки.
//
Процедура НачатьВыборФайлаДрайвера(ОповещениеПриВыборе) Экспорт 
	
	Результат = Ложь;
	ПолноеИмяФайла = "";
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = НСтр("ru='Выберите файл драйвера'");
	ДиалогОткрытияФайла.Фильтр = НСтр("ru='Файл драйвера'") + ?(МенеджерОборудованияКлиентПовтИсп.ЭтоLinuxКлиент(), "(*.zip)|*.zip", "(*.zip, *.exe)| *.zip; *.exe");  
	
	Параметры = Новый Структура("ОповещениеПриВыборе", ОповещениеПриВыборе);
	Оповещение = Новый ОписаниеОповещения("ВыборФайлаДрайвераЗавершение", ЭтотОбъект, Параметры);
	
	ДиалогОткрытияФайла.Показать(Оповещение);
	
КонецПроцедуры

// Завершение выбора файла
//
Процедура НачатьВыборФайлаРасширенияЗавершение(Установлено, ДополнительныеПараметры) Экспорт
	
	Если Установлено Тогда
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла[ДополнительныеПараметры.РежимДиалогаВыбораФайла]);
		Диалог.МножественныйВыбор = Ложь;
		Диалог.ПолноеИмяФайла = ДополнительныеПараметры.ИмяФайла;
		Диалог.Показать(ДополнительныеПараметры.ОповещениеПриВыборе);
	КонецЕсли;
	
КонецПроцедуры

// Функция начинает выбор файла.
//
Процедура НачатьВыборФайла(ОповещениеПриВыборе, Знач ИмяФайла, РежимДиалогаВыбораФайла = "Открытие") Экспорт
	
	ПараметрыКоманды = Новый Структура("ОповещениеПриВыборе, ИмяФайла, РежимДиалогаВыбораФайла", ОповещениеПриВыборе, ИмяФайла, РежимДиалогаВыбораФайла);
	Оповещение = Новый ОписаниеОповещения("НачатьВыборФайлаРасширенияЗавершение", ЭтотОбъект, ПараметрыКоманды);
	МенеджерОборудованияКлиент.ПроверитьДоступностьРасширенияРаботыСФайлами(Оповещение);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Процедура выбора устройства из доступных, привязанных к текущему рабочему месту.
//
Процедура ПредложитьВыбратьУстройство(ОповещениеВыбора, ТипОборудования, ТекстЗаголовкаВыбора, 
	СообщениеНеПодключен = "", СообщениеНеВыбран = "", БезСообщений = Ложь, ТекстСообщения = "") Экспорт
	
	Если Не МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		ТекстСообщения = НСтр("ru='Предварительно необходимо выбрать рабочее место подключаемого оборудования текущего сеанса.'");
		Если Не БезСообщений Тогда
		      ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	СписокДоступныхУстройств = МенеджерОборудованияВызовСервера.ПолучитьСписокОборудования(ТипОборудования);
	
	Если СписокДоступныхУстройств.Количество() = 0 Тогда
		Если Не ПустаяСтрока(СообщениеНеПодключен) Тогда
			Если БезСообщений Тогда
				ТекстСообщения = СообщениеНеПодключен;
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеНеПодключен);
			КонецЕсли;
		КонецЕсли;
	Иначе
		СписокУстройств = Новый СписокЗначений();
		Для каждого Устройства Из СписокДоступныхУстройств Цикл
			СписокУстройств.Добавить(Устройства.Ссылка, Устройства.Наименование);
		КонецЦикла;
		Если СписокУстройств.Количество() = 1 Тогда
			Идентификатор = СписокУстройств[0].Значение;
			ВыполнитьОбработкуОповещения(ОповещениеВыбора, Идентификатор); 
		Иначе
			Контекст = Новый Структура;
			Контекст.Вставить("СледующееОповещение", ОповещениеВыбора);
			Контекст.Вставить("СообщениеНеВыбран"  , ?(ПустаяСтрока(СообщениеНеВыбран), СообщениеНеПодключен, СообщениеНеВыбран));
			Контекст.Вставить("БезСообщений"       , БезСообщений);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПредложитьВыбратьУстройствоЗавершение", ЭтотОбъект, Контекст);
			СписокУстройств.ПоказатьВыборЭлемента(ОписаниеОповещения, ТекстЗаголовкаВыбора);
		КонецЕсли;
	КонецЕсли;
	
	Возврат;
	
КонецПроцедуры

Процедура ПредложитьВыбратьУстройствоЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Если Параметры <> Неопределено Тогда
			Если Параметры.БезСообщений Тогда
				ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, Неопределено);
			ИначеЕсли Не ПустаяСтрока(Параметры.СообщениеНеВыбран) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Параметры.СообщениеНеВыбран);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если Параметры <> Неопределено И Параметры.СледующееОповещение <> Неопределено Тогда
			Идентификатор = Результат.Значение;
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, Идентификатор);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Функция предоставляет диалог выбора рабочего места.
// 
Процедура ПредложитьВыборРабочегоМеста(ОбработкаОповещения, ИдентификаторКлиента = "") Экспорт

	Результат = Ложь;
	РабочееМесто = "";
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ИдентификаторКлиента", ИдентификаторКлиента);
	
	ОткрытьФорму("Справочник.ПодключаемоеОборудование.Форма.ФормаВыбораРабочегоМеста", ПараметрыФормы,,,  ,, ОбработкаОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

// Завершение выбора рабочего места.
//
Процедура ПредложитьВыборРабочегоМестаЗавершение(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("РабочееМесто") Тогда 
		МенеджерОборудованияКлиент.УстановитьРабочееМесто(Результат.РабочееМесто);
	КонецЕсли;
		
КонецПроцедуры

// Функция устанавливает рабочее место.
// 
Процедура УстановитьРабочееМесто(РабочееМесто) Экспорт
	
	МенеджерОборудованияВызовСервера.УстановитьРабочееМестоКлиента(РабочееМесто);
	Оповестить("ИзмененоРабочееМестоТекущегоСеанса", РабочееМесто);
	
КонецПроцедуры

// Выполняет обновление имени компьютера в параметре сеанса "РабочееМестоКлиента".
//
Функция ОбновитьРабочееМестоКлиента() Экспорт
	
	Результат = Истина;
	
	РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
	
	Если Не ЗначениеЗаполнено(РабочееМесто) Тогда
		СистемнаяИнформация = Новый СистемнаяИнформация();
		
		МассивРабочихМест = МенеджерОборудованияКлиентПовтИсп.НайтиРабочиеМестаПоИД(ВРег(СистемнаяИнформация.ИдентификаторКлиента));
		Если МассивРабочихМест.Количество() = 0 Тогда
			Параметры = Новый Структура;
			Параметры.Вставить("ИмяКомпьютера");
			Параметры.Вставить("ИдентификаторКлиента");
			
			#Если Не ВебКлиент Тогда
				Параметры.ИмяКомпьютера = ИмяКомпьютера();
			#КонецЕсли
			
			Параметры.ИдентификаторКлиента = ВРег(СистемнаяИнформация.ИдентификаторКлиента);
			РабочееМесто = МенеджерОборудованияВызовСервера.СоздатьРабочееМестоКлиента(Параметры);
		Иначе
			РабочееМесто = МассивРабочихМест[0];
		КонецЕсли;
		
	КонецЕсли;
	
	Если Результат
		И РабочееМесто <> МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента() Тогда
		МенеджерОборудованияВызовСервера.УстановитьРабочееМестоКлиента(РабочееМесто);
		Оповестить("ИзмененоРабочееМестоТекущегоСеанса", РабочееМесто);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Если Не ВебКлиент Тогда

// Функция получает значение атрибута текущего элемента.
//
Функция ПрочитатьАтрибут(ЧтениеXML, ИмяАтрибута, ЗначениеАтрибута)
	
	Значение = ЧтениеXML.ЗначениеАтрибута(ИмяАтрибута);
	
	Если Значение = Неопределено Тогда
		ЗначениеАтрибута = Неопределено;
		Возврат Ложь;
	Иначе
		ЗначениеАтрибута = XMLЗначение(Тип("Строка"), Значение);
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция ПрочитатьЭлементXML(ЧтениеXML, ТекстСообщенияОбОшибке)
	
	Попытка
		Результат = ЧтениеXML.Прочитать();
	Исключение
		ТекстСообщенияОбОшибке = НСтр("ru='При чтении XML-описания макета произошла ошибка.'");
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция формирует структуру с описанием макета.
//
Функция ПолучитьСтруктуруСОписаниемМакета(Источник, СообщениеОбОшибке, Результат) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Поля", Новый Массив);
	
	ЧтениеXML = Новый ЧтениеXML();
	ПараметрыЧтения = Новый ПараметрыЧтенияXML("1.0");
	ЧтениеXML.УстановитьСтроку(Источник, ПараметрыЧтения);
	
	ТекстСообщенияОбОшибке = "";
	
	Пока ПрочитатьЭлементXML(ЧтениеXML, ТекстСообщенияОбОшибке) Цикл
		
		ЗначениеАтрибута = Неопределено;
		
		Если ЧтениеXML.Имя="Formatting" И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
			
			Если ПрочитатьАтрибут(ЧтениеXML, "Width", ЗначениеАтрибута) Тогда
				Результат.Вставить("Ширина", Число(ЗначениеАтрибута));
			Иначе
				СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута Width элемента Formatting произошла ошибка.'");
				Возврат Ложь;
			КонецЕсли;
			
			Если ПрочитатьАтрибут(ЧтениеXML, "Height", ЗначениеАтрибута) Тогда
				Результат.Вставить("Высота", Число(ЗначениеАтрибута));
			Иначе
				СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута Height элемента Formatting произошла ошибка.'");
				Возврат Ложь;
			КонецЕсли;
			
			Если ПрочитатьАтрибут(ЧтениеXML, "Orientation", ЗначениеАтрибута) Тогда
				Результат.Вставить("Ориентация", Число(ЗначениеАтрибута));
			Иначе
				Результат.Вставить("Ориентация", 0);
			КонецЕсли;
		
		ИначеЕсли (ЧтениеXML.Имя="Text" ИЛИ ЧтениеXML.Имя="Barcode" ИЛИ ЧтениеXML.Имя="Image" ИЛИ ЧтениеXML.Имя="UserData") И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
			
			НовоеПоле = Новый Структура;
			НовоеПоле.Вставить("Тип", ЧтениеXML.Имя);
			
			Если ПрочитатьАтрибут(ЧтениеXML, "FieldName", ЗначениеАтрибута) Тогда
				НовоеПоле.Вставить("Наименование", ЗначениеАтрибута);
			Иначе
				СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута FieldName элемента UserData произошла ошибка.'");
				Возврат Ложь;
			КонецЕсли;
			
			Если ПрочитатьАтрибут(ЧтениеXML, "TypeFill", ЗначениеАтрибута) Тогда
				
				Если ЗначениеАтрибута=Неопределено Тогда
					СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута TypeFill элемента UserData произошла ошибка.'");
					Возврат Ложь;
				КонецЕсли;
				
				НовоеПоле.Вставить("ТипЗаполнения", ЗначениеАтрибута);
				
				Если ЗначениеАтрибута="Parameter" Тогда
					
					Если ПрочитатьАтрибут(ЧтениеXML, "ValueDefault", ЗначениеАтрибута) Тогда
						НовоеПоле.Вставить("ЗначениеПоУмолчанию", ЗначениеАтрибута);
					КонецЕсли;
					
					Если ПрочитатьАтрибут(ЧтениеXML, "Value", ЗначениеАтрибута) Тогда
						
						Если ЗначениеАтрибута=Неопределено Тогда
							СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута Value элемента UserData произошла ошибка.'");
							Возврат Ложь;
						Иначе
							НовоеПоле.Вставить("Значение", ЗначениеАтрибута);
						КонецЕсли;
						
					Иначе
						СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута Value элемента UserData произошла ошибка.'");
						Возврат Ложь;
					КонецЕсли;
					
				Иначе
					
					Если ПрочитатьАтрибут(ЧтениеXML, "Value", ЗначениеАтрибута) Тогда
						НовоеПоле.Вставить("Значение", ЗначениеАтрибута);
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута TypeFill элемента UserData произошла ошибка.'");
				Возврат Ложь;
			КонецЕсли;
			
			Если НовоеПоле.Тип<>"UserData" Тогда
				
				Если ПрочитатьАтрибут(ЧтениеXML, "Left", ЗначениеАтрибута) Тогда
					НовоеПоле.Вставить("Лево", Число(ЗначениеАтрибута));
				Иначе
					СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута Left элемента Text произошла ошибка.'");
					Возврат Ложь;
				КонецЕсли;
				
				Если ПрочитатьАтрибут(ЧтениеXML, "Top", ЗначениеАтрибута) Тогда
					НовоеПоле.Вставить("Верх", Число(ЗначениеАтрибута));
				Иначе
					СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута Top элемента Text произошла ошибка.'");
					Возврат Ложь;
				КонецЕсли;
				
				Если ПрочитатьАтрибут(ЧтениеXML, "Width", ЗначениеАтрибута) Тогда
					НовоеПоле.Вставить("Право", НовоеПоле.Лево + Число(ЗначениеАтрибута) - 1);
				Иначе
					СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута Width элемента Text произошла ошибка.'");
					Возврат Ложь;
				КонецЕсли;
				
				Если ПрочитатьАтрибут(ЧтениеXML, "Height", ЗначениеАтрибута) Тогда
					НовоеПоле.Вставить("Низ", НовоеПоле.Верх + Число(ЗначениеАтрибута) - 1);
				Иначе
					СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута Height элемента Text произошла ошибка.'");
					Возврат Ложь;
				КонецЕсли;
				
				Если ПрочитатьАтрибут(ЧтениеXML, "Orientation", ЗначениеАтрибута) Тогда
					НовоеПоле.Вставить("Ориентация", Число(ЗначениеАтрибута));
				КонецЕсли;				
				
				Если НовоеПоле.Тип="Text" Тогда
					
					Если ПрочитатьАтрибут(ЧтениеXML, "FontName", ЗначениеАтрибута) Тогда
						НовоеПоле.Вставить("ИмяШрифта", ЗначениеАтрибута);
					КонецЕсли;
					
					Если ПрочитатьАтрибут(ЧтениеXML, "FontSize", ЗначениеАтрибута) Тогда
						НовоеПоле.Вставить("РазмерШрифта", Число(ЗначениеАтрибута));
					Иначе
						СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута FontSize элемента Text произошла ошибка.'");
						Возврат Ложь;
					КонецЕсли;
					
					Если ПрочитатьАтрибут(ЧтениеXML, "FontStyle", ЗначениеАтрибута) Тогда
						ЗначениеСтильШрифта = ЗначениеАтрибута;
						НовоеПоле.Вставить("Жирный", Найти(ЗначениеСтильШрифта, "Bold")>0);
						НовоеПоле.Вставить("Наклонный", Найти(ЗначениеСтильШрифта, "Italic")>0);
						НовоеПоле.Вставить("Подчеркивание",  Найти(ЗначениеСтильШрифта, "Underline")>0);
						НовоеПоле.Вставить("Зачеркивание", Найти(ЗначениеСтильШрифта, "Strikeout")>0);
					КонецЕсли;
					
					Если ПрочитатьАтрибут(ЧтениеXML, "Align", ЗначениеАтрибута) Тогда
						НовоеПоле.Вставить("ПоложениеПоГоризонтали", ЗначениеАтрибута);
					КонецЕсли;
					
					Если ПрочитатьАтрибут(ЧтениеXML, "VAlign", ЗначениеАтрибута) Тогда
						НовоеПоле.Вставить("ПоложениеПоВертикали", ЗначениеАтрибута);
					КонецЕсли;
					
					Если ПрочитатьАтрибут(ЧтениеXML, "Multiline", ЗначениеАтрибута) Тогда
						НовоеПоле.Вставить("Многострочность", ЗначениеАтрибута);
					КонецЕсли;
				
				ИначеЕсли НовоеПоле.Тип="Barcode" Тогда
					
					Если ПрочитатьАтрибут(ЧтениеXML, "Type", ЗначениеАтрибута) Тогда
						НовоеПоле.Вставить("ТипШтрихкода", ЗначениеАтрибута);
					Иначе
						СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута Type элемента Barcode произошла ошибка.'");
						Возврат Ложь;
					КонецЕсли;
					
					Если ПрочитатьАтрибут(ЧтениеXML, "PrintHRI", ЗначениеАтрибута) Тогда
						НовоеПоле.Вставить("ПодписьШтрихкода", ЗначениеАтрибута);
						ПодписьШтрихкода = ЗначениеАтрибута;
					Иначе
						ПодписьШтрихкода = Истина;
					КонецЕсли;
					
					Если ПрочитатьАтрибут(ЧтениеXML, "FontSize", ЗначениеАтрибута) Тогда
						Если ПодписьШтрихкода И ЗначениеАтрибута=Неопределено Тогда
							СообщениеОбОшибке = НСтр("ru='При чтении файла атрибута FontSize элемента Barcode произошла ошибка. При значении атрибута PrintHRI = True указание значения атрибута FontSize обязательно!'");
							Возврат Ложь;
						КонецЕсли;
						НовоеПоле.Вставить("РазмерШрифтаПодписи", Число(ЗначениеАтрибута));
					КонецЕсли;
					
					Если ПрочитатьАтрибут(ЧтениеXML, "CheckSymbol", ЗначениеАтрибута) Тогда
						НовоеПоле.Вставить("КонтрольныйСимвол", ЗначениеАтрибута);
					КонецЕсли;
					
				КонецЕсли;
				
				Если НовоеПоле.Тип = "Text" ИЛИ НовоеПоле.Тип = "Image" Тогда
					
					Если ПрочитатьАтрибут(ЧтениеXML, "Border", ЗначениеАтрибута) Тогда
						
						ЗначениеBorder = ЗначениеАтрибута;
						НовоеПоле.Вставить("РамкаСлева", Найти(ЗначениеBorder, "Left")>0);
						НовоеПоле.Вставить("РамкаСверху", Найти(ЗначениеBorder, "Top")>0);
						НовоеПоле.Вставить("РамкаСправа",  Найти(ЗначениеBorder, "Right")>0);
						НовоеПоле.Вставить("РамкаСнизу", Найти(ЗначениеBorder, "Bottom")>0);
						
						Если ЗначениеЗаполнено(ЗначениеBorder) Тогда
							
							Если ПрочитатьАтрибут(ЧтениеXML, "BorderStyle", ЗначениеАтрибута) Тогда
								НовоеПоле.Вставить("ТипРамки", ЗначениеАтрибута);
							КонецЕсли;
							
							Если ПрочитатьАтрибут(ЧтениеXML, "BorderWidth", ЗначениеАтрибута) Тогда
								НовоеПоле.Вставить("ТолщинаРамки", Число(ЗначениеАтрибута));
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Результат.Поля.Добавить(НовоеПоле);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекстСообщенияОбОшибке) Тогда
		СообщениеОбОшибке = ТекстСообщенияОбОшибке;
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Процедура записывает значение атрибута текущего элемента.
//
Процедура ЗаписатьАтрибутЭлемента(ЗаписьXML, ИмяАтрибута, ЗначениеАтрибута)
	
	Если ЗначениеЗаполнено(ЗначениеАтрибута) ИЛИ ТипЗнч(ЗначениеАтрибута)=Тип("Число") ИЛИ ИмяАтрибута="Value" Тогда
		ЗаписьXML.ЗаписатьАтрибут(ИмяАтрибута, XMLСтрока(Формат(ЗначениеАтрибута, "ЧН=0; ЧГ=0; БЛ=false; БИ=true")));
	КонецЕсли;
	
КонецПроцедуры

// Функция формирует текст XML для передачи его принтеру этикеток.
//
Функция СформироватьДанныеДляПринтераЭтикеток(МассивЭтикеток, МакетЭтикетки=Неопределено) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML; 
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Data");
	
	Если ЗначениеЗаполнено(МакетЭтикетки) Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("Formatting");
		
		Если МакетЭтикетки.Ориентация = 0 ИЛИ МакетЭтикетки.Ориентация = 180 Тогда
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Width", МакетЭтикетки.Ширина);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Height", МакетЭтикетки.Высота);
		Иначе
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Width", МакетЭтикетки.Высота);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Height", МакетЭтикетки.Ширина);
		КонецЕсли;
		
		Для Каждого ТекЭлемент Из МакетЭтикетки.Поля Цикл
			
			ЗаписьXML.ЗаписатьНачалоЭлемента(ТекЭлемент.Тип);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "FieldName", ТекЭлемент.Наименование);
			
			Если МакетЭтикетки.Ориентация = 0 Тогда
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "Left", ТекЭлемент.Лево-1);
			ИначеЕсли МакетЭтикетки.Ориентация = 90 Тогда
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "Left", ТекЭлемент.Верх-1);
			ИначеЕсли МакетЭтикетки.Ориентация = 180 Тогда
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "Left", МакетЭтикетки.Ширина - ТекЭлемент.Право);
			ИначеЕсли МакетЭтикетки.Ориентация = 270 Тогда
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "Left", МакетЭтикетки.Высота - ТекЭлемент.Низ);
			КонецЕсли;
			
			Если МакетЭтикетки.Ориентация = 0 Тогда
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "Top", ТекЭлемент.Верх-1);
			ИначеЕсли МакетЭтикетки.Ориентация = 90 Тогда
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "Top", МакетЭтикетки.Ширина - ТекЭлемент.Право);
			ИначеЕсли МакетЭтикетки.Ориентация = 180 Тогда
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "Top", МакетЭтикетки.Высота - ТекЭлемент.Низ);
			ИначеЕсли МакетЭтикетки.Ориентация = 270 Тогда
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "Top", ТекЭлемент.Лево-1);
			КонецЕсли;
			
			Если МакетЭтикетки.Ориентация = 0 ИЛИ МакетЭтикетки.Ориентация = 180 Тогда
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "Width", ТекЭлемент.Право - ТекЭлемент.Лево+1);
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "Height", ТекЭлемент.Низ - ТекЭлемент.Верх+1);
			Иначе
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "Width", ТекЭлемент.Низ - ТекЭлемент.Верх+1);
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "Height", ТекЭлемент.Право - ТекЭлемент.Лево+1);
			КонецЕсли;
			
			Если МакетЭтикетки.Ориентация <> 0 Тогда
				
				Если ТекЭлемент.Свойство("Ориентация") Тогда
					
					Если ЗначениеЗаполнено(ТекЭлемент.Ориентация) Тогда
						ОриентацияПоля = Число(ТекЭлемент.Ориентация);
					Иначе
						ОриентацияПоля = 0;
					КонецЕсли;
					
				Иначе
					ОриентацияПоля = 0;
				КонецЕсли;
				
				НовоеЗначениеОриентации = ОриентацияПоля + Число(МакетЭтикетки.Ориентация);
				НовоеЗначениеОриентации = Формат(?(НовоеЗначениеОриентации>270, НовоеЗначениеОриентации-360, НовоеЗначениеОриентации), "ЧГ=0");
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "Orientation", НовоеЗначениеОриентации);
				
			Иначе
				
				Если ТекЭлемент.Свойство("Ориентация") Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Orientation", ТекЭлемент.Ориентация);
				КонецЕсли;
				
			КонецЕсли;
			
			Если ТекЭлемент.ТипЗаполнения = "Parameter" Тогда
				
				Если ТекЭлемент.Свойство("ЗначениеПоУмолчанию") Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Value", ТекЭлемент.ЗначениеПоУмолчанию);
				КонецЕсли;
				
			Иначе
				
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "Static", Истина);
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "Value", ТекЭлемент.Значение);
				
			КонецЕсли;
			
			Если ТекЭлемент.Тип = "Text" Тогда
				
				Если ТекЭлемент.Свойство("ИмяШрифта") Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "FontName", ТекЭлемент.ИмяШрифта);
				КонецЕсли;
				
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "FontSize", ТекЭлемент.РазмерШрифта);
				
				СтильШрифта = "";
				
				Если ТекЭлемент.Свойство("Жирный") Тогда
					Если ТекЭлемент.Жирный Тогда
						СтильШрифта = "Bold";
					КонецЕсли;
				КонецЕсли;
				
				Если ТекЭлемент.Свойство("Наклонный") Тогда
					Если ТекЭлемент.Наклонный Тогда
						СтильШрифта = ?(СтильШрифта <> "", СтильШрифта + " ", "") + "Italic";
					КонецЕсли;
				КонецЕсли;
				
				Если ТекЭлемент.Свойство("Подчеркивание") Тогда
					Если ТекЭлемент.Подчеркивание Тогда
						СтильШрифта = ?(СтильШрифта <> "", СтильШрифта + " ", "") + "Underline";
					КонецЕсли;
				КонецЕсли;
				
				Если ТекЭлемент.Свойство("Зачеркивание") Тогда
					Если ТекЭлемент.Зачеркивание Тогда
						СтильШрифта = ?(СтильШрифта <> "", СтильШрифта + " ", "") + "StrikeOut";
					КонецЕсли;
				КонецЕсли;
				
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "FontStyle", СтильШрифта);
				
				ГорВыравнивание = "Left";
				
				Если ТекЭлемент.Свойство("ПоложениеПоГоризонтали") Тогда
					Если ЗначениеЗаполнено(ТекЭлемент.ПоложениеПоГоризонтали) Тогда
						ГорВыравнивание = ТекЭлемент.ПоложениеПоГоризонтали;
					КонецЕсли;
				КонецЕсли;
				
				ВерВыравнивание = "Top";
				
				Если ТекЭлемент.Свойство("ПоложениеПоВертикали") Тогда
					Если ЗначениеЗаполнено(ТекЭлемент.ПоложениеПоВертикали) Тогда
						ВерВыравнивание = ТекЭлемент.ПоложениеПоВертикали;
					КонецЕсли;
				КонецЕсли;
				
				Если МакетЭтикетки.Ориентация = 0 Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", ГорВыравнивание);
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", ВерВыравнивание);
				ИначеЕсли МакетЭтикетки.Ориентация = 90 Тогда
					
					Если ВерВыравнивание="Top" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", "Left");
					ИначеЕсли ВерВыравнивание="Center" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", "Center");
					ИначеЕсли ВерВыравнивание="Bottom" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", "Right");
					КонецЕсли;
					
					Если ГорВыравнивание="Left" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", "Bottom");
					ИначеЕсли ГорВыравнивание="Center" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", "Center");
					ИначеЕсли ГорВыравнивание="Right" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", "Top");
					КонецЕсли;
					
				ИначеЕсли МакетЭтикетки.Ориентация = 180 Тогда
					
					Если ГорВыравнивание="Left" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", "Right");
					ИначеЕсли ГорВыравнивание="Center" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", "Center");
					ИначеЕсли ГорВыравнивание="Right" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", "Left");
					КонецЕсли;
					
					Если ВерВыравнивание="Top" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", "Bottom");
					ИначеЕсли ВерВыравнивание="Center" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", "Center");
					ИначеЕсли ВерВыравнивание="Bottom" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", "Top");
					КонецЕсли;
					
				ИначеЕсли МакетЭтикетки.Ориентация = 270 Тогда
					
					Если ВерВыравнивание="Top" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", "Right");
					ИначеЕсли ВерВыравнивание="Center" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", "Center");
					ИначеЕсли ВерВыравнивание="Bottom" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Align", "Left");
					КонецЕсли;
					
					Если ГорВыравнивание="Left" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", "Top");
					ИначеЕсли ГорВыравнивание="Center" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", "Center");
					ИначеЕсли ГорВыравнивание="Right" Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "VAlign", "Bottom");
					КонецЕсли;
					
				КонецЕсли;
				
				Если ТекЭлемент.Свойство("Многострочность") Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "Multiline", ТекЭлемент.Многострочность);
				КонецЕсли;
				
			ИначеЕсли ТекЭлемент.Тип = "Barcode" Тогда
				
				ЗаписатьАтрибутЭлемента(ЗаписьXML, "Type", ТекЭлемент.ТипШтрихкода);
				
				Если ТекЭлемент.Свойство("ПодписьШтрихкода") Тогда
					
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "PrintHRI", ТекЭлемент.ПодписьШтрихкода);
					
					Если ТекЭлемент.ПодписьШтрихкода Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "FontSize", ТекЭлемент.РазмерШрифтаПодписи);
					КонецЕсли;
					
				КонецЕсли;
				
				Если ТекЭлемент.Свойство("КонтрольныйСимвол") Тогда
					ЗаписатьАтрибутЭлемента(ЗаписьXML, "CheckSymbol", ТекЭлемент.КонтрольныйСимвол);
				КонецЕсли;	
				
			КонецЕсли;
			
			Если ТекЭлемент.Тип = "Text" ИЛИ ТекЭлемент.Тип = "Image" Тогда
				
				Рамка = "";
				
				Если ТекЭлемент.Свойство("РамкаСлева") Тогда
					Если ТекЭлемент.РамкаСлева Тогда
						Рамка = "Left";
					КонецЕсли;
				КонецЕсли;
				
				Если ТекЭлемент.Свойство("РамкаСверху") Тогда
					Если ТекЭлемент.РамкаСверху Тогда
						Рамка = ?(Рамка <> "", Рамка + " ", "") + "Top";
					КонецЕсли;
				КонецЕсли;
				
				Если ТекЭлемент.Свойство("РамкаСправа") Тогда
					Если ТекЭлемент.РамкаСправа Тогда
						Рамка = ?(Рамка <> "", Рамка + " ", "") + "Right";
					КонецЕсли;
				КонецЕсли;
				
				Если ТекЭлемент.Свойство("РамкаСнизу") Тогда
					Если ТекЭлемент.РамкаСнизу Тогда
						Рамка = ?(Рамка <> "", Рамка + " ", "") + "Bottom";
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Рамка) Тогда
					
					Если МакетЭтикетки.Ориентация = 0 Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Border", Рамка);
					ИначеЕсли МакетЭтикетки.Ориентация = 90 Тогда
						Рамка=СтрЗаменить(Рамка, "Left", "B1ottom");
						Рамка=СтрЗаменить(Рамка, "Top", "L1eft");
						Рамка=СтрЗаменить(Рамка, "Right", "T1op");
						Рамка=СтрЗаменить(Рамка, "Bottom", "R1ight");
						Рамка=СтрЗаменить(Рамка, "1", "");
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Border", Рамка);
					ИначеЕсли МакетЭтикетки.Ориентация = 180 Тогда
						Рамка=СтрЗаменить(Рамка, "Left", "R1ight");
						Рамка=СтрЗаменить(Рамка, "Top", "B1ottom");
						Рамка=СтрЗаменить(Рамка, "Right", "L1eft");
						Рамка=СтрЗаменить(Рамка, "Bottom", "T1op");
						Рамка=СтрЗаменить(Рамка, "1", "");
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Border", Рамка);
					ИначеЕсли МакетЭтикетки.Ориентация = 270 Тогда
						Рамка=СтрЗаменить(Рамка, "Left", "T1op");
						Рамка=СтрЗаменить(Рамка, "Top", "R1ight");
						Рамка=СтрЗаменить(Рамка, "Right", "B1ottom");
						Рамка=СтрЗаменить(Рамка, "Bottom", "L1eft");
						Рамка=СтрЗаменить(Рамка, "1", "");
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "Border", Рамка);
					КонецЕсли;
					
					Если ТекЭлемент.Свойство("ТипРамки") Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "BorderStyle", ТекЭлемент.ТипРамки);
					КонецЕсли;
					
					Если ТекЭлемент.Свойство("ТолщинаРамки") Тогда
						ЗаписатьАтрибутЭлемента(ЗаписьXML, "BorderWidth", ТекЭлемент.ТолщинаРамки);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ЗаписьXML.ЗаписатьКонецЭлемента();		
			
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Labels");
	
	Для Каждого ТекЭтикетка Из МассивЭтикеток Цикл
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Label");
		
		Если ТекЭтикетка.Свойство("Количество") Тогда
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Quantity", ТекЭтикетка.Количество);
		КонецЕсли;
		
		Для Каждого ТекПоле Из ТекЭтикетка.Поля Цикл
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Record");
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "FieldName", ТекПоле.ИмяПоля);
			ЗаписатьАтрибутЭлемента(ЗаписьXML, "Value", ТекПоле.Значение);
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

#КонецЕсли

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСЭлектроннымиВесами

// Получает вес с электронных весов.
// УникальныйИдентификатор - идентификатор формы.
// ОповещениеПриПолученииВеса - оповещение при завершении взвешивании и передачи веса.
//
Процедура НачатьПолученияВесаСЭлектронныхВесов(ОповещениеПриПолученииВеса, УникальныйИдентификатор) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("СледующееОповещение"     , ОповещениеПриПолученииВеса);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПолученияВесаСЭлектронныхВесовЗавершение", ЭтотОбъект, Контекст);
	МенеджерОборудованияКлиент.ПредложитьВыбратьУстройство(ОписаниеОповещения, "ЭлектронныеВесы",
		НСтр("ru='Выберите электронные весы'"), НСтр("ru='Электронные весы не подключены.'"), НСтр("ru='Электронные весы не выбраны.'"));
	
КонецПроцедуры

// Процедура завершения получения веса с электронных весов.
// 
Процедура НачатьПолученияВесаСЭлектронныхВесовЗавершение(ИдентификаторУстройства, Параметры) Экспорт
	
	ОписаниеОшибки = "";
	// Подключаем Весы
	Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(Параметры.УникальныйИдентификатор, ИдентификаторУстройства, ОписаниеОшибки);
	Если Результат Тогда  
		
		ВходныеПараметры  = Неопределено;
		ВыходныеПараметры = Неопределено;
		
		// Пытаемся получить вес
		Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства, "ПолучитьВес", ВходныеПараметры, ВыходныеПараметры);    
		Если Результат Тогда
			Вес = ВыходныеПараметры[0]; // Вес получен
			Если Параметры.СледующееОповещение <> Неопределено Тогда
				ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, Вес);
			КонецЕсли;
		Иначе
			ТекстСообщения = НСтр("ru='При использовании электронных весов произошла ошибка.
								|Дополнительное описание: |%ДополнительноеОписание%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ВыходныеПараметры[1]);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		// Отключаем Весы
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(Параметры.УникальныйИдентификатор, ИдентификаторУстройства);
		
	Иначе
		// Ошибка подключения весов
		ТекстСообщения = НСтр("ru='При подключении электронных весов произошла ошибка.
				|Дополнительное описание: %ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСТСД

// Начать выгрузку данных в терминал сбора данных.
// УникальныйИдентификатор - идентификатор формы.
// ОповещениеПриВыгрузкуДанные - оповещение при завершении выгрузки данных.
//
Процедура НачатьВыгрузкуДанныеВТСД(ОповещениеПриВыгрузкуДанные, УникальныйИдентификатор, ТаблицаВыгрузкиТоваров) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("СледующееОповещение"     , ОповещениеПриВыгрузкуДанные);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	Контекст.Вставить("ТаблицаВыгрузкиТоваров"  , ТаблицаВыгрузкиТоваров);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыгрузкуДанныеВТСДЗавершение", ЭтотОбъект, Контекст);
	МенеджерОборудованияКлиент.ПредложитьВыбратьУстройство(ОписаниеОповещения, "ТерминалСбораДанных",
		НСтр("ru='Выберите терминал сбора данных'"), НСтр("ru='Терминал сбора данных не подключен.'"));
	
КонецПроцедуры

Процедура НачатьВыгрузкуДанныеВТСДЗавершение(ИдентификаторУстройства, Параметры) Экспорт
	
	ОписаниеОшибки = "";
	// Подключаем ТСД
	Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(Параметры.УникальныйИдентификатор, ИдентификаторУстройства, ОписаниеОшибки);
	
	Если Результат Тогда
		
		ВходныеПараметры  = Новый Массив();
		ВыходныеПараметры = Неопределено;
				
		// Преобразуем массив структур в массив списка значений с предопределенным и фиксированным порядком полей:
		// 0 - Штрихкод
		// 1 - Номенклатура
		// 2 - ЕдиницаИзмерения
		// 3 - ХарактеристикаНоменклатуры
		// 4 - СерияНоменклатуры
		// 5 - Качество
		// 6 - Цена
		// 7 - Количество
		МассивТСД = Новый Массив;
		Для Каждого текСтрока Из Параметры.ТаблицаВыгрузкиТоваров Цикл
			Если текСтрока.Свойство("Номенклатура") Тогда
				НаименованиеНоменклатуры = Строка(текСтрока.Номенклатура);
			ИначеЕсли текСтрока.Свойство("Наименование") Тогда
				НаименованиеНоменклатуры = текСтрока.Наименование;
			Иначе
				НаименованиеНоменклатуры = "";
			КонецЕсли;
			СтрокаМассиваТСД = Новый СписокЗначений; // Не массив для сохранения совместимости с обработками обслуживания.
			СтрокаМассиваТСД.Добавить(?(текСтрока.Свойство("Штрихкод")                   , текСтрока.Штрихкод, ""));
			СтрокаМассиваТСД.Добавить(НаименованиеНоменклатуры);
			СтрокаМассиваТСД.Добавить(?(текСтрока.Свойство("ЕдиницаИзмерения")           , текСтрока.ЕдиницаИзмерения, ""));
			СтрокаМассиваТСД.Добавить(?(текСтрока.Свойство("ХарактеристикаНоменклатуры") , текСтрока.ХарактеристикаНоменклатуры, ""));
			СтрокаМассиваТСД.Добавить(?(текСтрока.Свойство("СерияНоменклатуры")          , текСтрока.СерияНоменклатуры, ""));
			СтрокаМассиваТСД.Добавить(?(текСтрока.Свойство("Качество")                   , текСтрока.Качество, ""));
			СтрокаМассиваТСД.Добавить(?(текСтрока.Свойство("Цена")                       , текСтрока.Цена, 0));
			СтрокаМассиваТСД.Добавить(?(текСтрока.Свойство("Количество")                 , текСтрока.Количество, 0));
			МассивТСД.Добавить(СтрокаМассиваТСД);
		КонецЦикла;
				
		ВходныеПараметры.Добавить("Items");
		ВходныеПараметры.Добавить(МассивТСД);
				
		Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства, "UploadDirectory", ВходныеПараметры, ВыходныеПараметры);
		Если НЕ Результат Тогда
			ТекстСообщения = НСтр("ru='При выгрузке данных в терминал сбора данных произошла ошибка.
									|%ОписаниеОшибки%
									|Данные в терминал сбора данных не выгружены.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Иначе
			Если Параметры.СледующееОповещение <> Неопределено Тогда
				ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, Истина);
			КонецЕсли;
		КонецЕсли;
		
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(Параметры.УникальныйИдентификатор, ИдентификаторУстройства);
			
	Иначе
		ТекстСообщения = НСтр("ru='При подключении устройства произошла ошибка.
								  |%ОписаниеОшибки%
								  |Данные в терминал сбора данных не выгружены.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
		
КонецПроцедуры

// Начать загрузку данных из терминала сбора данных.
// УникальныйИдентификатор - идентификатор формы.
// ОповещениеПриЗагрузкеДанные - оповещение при завершении выгрузки данных.
// СворачиватьДанные - сворачивать данные при загрузке (группировка по штрикоду и суммирование количества).
//
Процедура НачатьЗагрузкуДанныеИзТСД(ОповещениеПриЗагрузкеДанные, УникальныйИдентификатор, СворачиватьДанные = Истина) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("СледующееОповещение"     , ОповещениеПриЗагрузкеДанные);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	Контекст.Вставить("СворачиватьДанные"       , СворачиватьДанные);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьЗагрузкуДанныеИзТСДЗавершение", ЭтотОбъект, Контекст);
	МенеджерОборудованияКлиент.ПредложитьВыбратьУстройство(ОписаниеОповещения, "ТерминалСбораДанных",
		НСтр("ru='Выберите терминал сбора данных'"), НСтр("ru='Терминал сбора данных не подключен.'"));
		
КонецПроцедуры

Процедура НачатьЗагрузкуДанныеИзТСДЗавершение(ИдентификаторУстройства, Параметры) Экспорт
	
	ОписаниеОшибки = "";
	// Подключаем ТСД
	Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(Параметры.УникальныйИдентификатор, ИдентификаторУстройства, ОписаниеОшибки);
	
	Если Результат Тогда
		ВходныеПараметры  = Неопределено;
		ВыходныеПараметры = Неопределено;
		
		Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства, "DownloadDocument", ВходныеПараметры, ВыходныеПараметры);
		
		Если Результат Тогда
			
			ТаблицаЗагрузкиИзТСД = Новый Массив();       
			ТаблицаДанных = Новый Соответствие();
			
			Для Индекс = 0 По ВыходныеПараметры[0].Количество()/2 - 1 Цикл
				Штрихкод    = ВыходныеПараметры[0][Индекс * 2 + 0];
				Количество = Число(?(ВыходныеПараметры[0][Индекс * 2 + 1] <> Неопределено, ВыходныеПараметры[0][Индекс * 2 + 1], 0));
				Если Параметры.СворачиватьДанные Тогда
					Данные = ТаблицаДанных.Получить(Штрихкод);
					Если Данные = Неопределено Тогда
						ТаблицаДанных.Вставить(Штрихкод, Количество)
					Иначе
						ТаблицаДанных.Вставить(Штрихкод, Данные + Количество)
					КонецЕсли;
				Иначе
					ТаблицаЗагрузкиИзТСД.Добавить(Новый Структура("Штрихкод, Количество", Штрихкод, Количество));
				КонецЕсли;
			КонецЦикла;
					
			Если Параметры.СворачиватьДанные Тогда
				Для Каждого Данные  Из ТаблицаДанных Цикл
					ТаблицаЗагрузкиИзТСД.Добавить(Новый Структура("Штрихкод, Количество", Данные.Ключ, Данные.Значение));
				КонецЦикла
			КонецЕсли;
			
			Если Параметры.СледующееОповещение <> Неопределено Тогда
				ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, ТаблицаЗагрузкиИзТСД);
			КонецЕсли;
			
		Иначе
			ТекстСообщения = НСтр("ru='При загрузке данных из терминала сбора данных произошла ошибка.
									  |%ОписаниеОшибки%
									  |Данные из терминала сбора данных не загружены.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(Параметры.УникальныйИдентификатор, ИдентификаторУстройства);
		
	Иначе
		ТекстСообщения = НСтр("ru='При подключении устройства произошла ошибка.
								  |%ОписаниеОшибки%
								  |Данные из терминала сбора данных не загружены.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Начать очистку данных в терминале сбора данных.
// УникальныйИдентификатор - идентификатор формы.
// ОповещениеПриОчисткеДанные - оповещение при завершении очистке данных.
//
Процедура НачатьОчисткуДанныеВТСД(ОповещениеПриОчисткеДанные, УникальныйИдентификатор) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("СледующееОповещение"     , ОповещениеПриОчисткеДанные);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьОчисткуДанныеВТСДЗавершение", ЭтотОбъект, Контекст);
	МенеджерОборудованияКлиент.ПредложитьВыбратьУстройство(ОписаниеОповещения, "ТерминалСбораДанных",
		НСтр("ru='Выберите терминал сбора данных'"), НСтр("ru='Терминал сбора данных не подключен.'"));
		
КонецПроцедуры

Процедура НачатьОчисткуДанныеВТСДЗавершение(ИдентификаторУстройства, Параметры) Экспорт
	
	ОписаниеОшибки = "";
	// Подключаем ТСД
	Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(Параметры.УникальныйИдентификатор, ИдентификаторУстройства, ОписаниеОшибки);
	
	Если Результат Тогда
		ВходныеПараметры  = Неопределено;
		ВыходныеПараметры = Неопределено;
		
		Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства, "ClearTable", ВходныеПараметры, ВыходныеПараметры);
		
		Если НЕ Результат Тогда
			ТекстСообщения = НСтр("ru='При очистке данных в терминале сбора данных произошла ошибка.
									  |%ОписаниеОшибки%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Иначе
			Если Параметры.СледующееОповещение <> Неопределено Тогда
				ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, Истина);
			КонецЕсли;
		КонецЕсли;
		
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(Параметры.УникальныйИдентификатор, ИдентификаторУстройства);
		
	Иначе
		ТекстСообщения = НСтр("ru='При подключении устройства произошла ошибка.
								  |%ОписаниеОшибки%
								  |Данные в терминал сбора данных не выгружены.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСЭквайрингом

// Начать подключение эквайрингово терминала. 
// Если эквайринговый терминал не поддерживает печать квитанций на терминале,  для печати подключается фискальный
// регистратор.
//
// Входящие параметры: 
//   УникальныйИдентификатор - идентификатор формы.
//   ОповещениеПриЗавершении - оповещение при завершении подключении эквайрингово терминала.
//   ЭквайринговыйТерминал - Эквайринговый терминал, если незаполнен, будет выбран.
// Исходящие параметры: - 
//   Структура со следующими атрибутами.
//     ИдентификаторПодключенногоЭТ - Идентификатор подключенного эквайринговогой терминала.
//     ИдентификаторПодключенногоПУ - Идентификатор подключенного фискального регистратора.
//     ПечатьКвитанцийНаТерминале - Поддерживает печать квитанций на терминале, если True то ИдентификаторПодключенногоПУ = Неопределено.
// После использования подключенные устройства необходимо отключить методом ОтключитьЭквайринговыйТерминал.
//
Процедура НачатьПодключенияЭквайринговогоТерминала(ОповещениеПриЗавершении, УникальныйИдентификатор, ЭквайринговыйТерминал = Неопределено) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("СледующееОповещение"     , ОповещениеПриЗавершении);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	
	Если ЗначениеЗаполнено(ЭквайринговыйТерминал) Тогда
		ПодключенияЭквайринговогоТерминалаЗавершение(ЭквайринговыйТерминал, Контекст);
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("ПодключенияЭквайринговогоТерминалаЗавершение", ЭтотОбъект, Контекст);
		МенеджерОборудованияКлиент.ПредложитьВыбратьУстройство(ОписаниеОповещения, "ЭквайринговыйТерминал",
			НСтр("ru='Выберите эквайринговый терминал'"), НСтр("ru='Эквайринговый терминал не подключен.'"));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодключенияЭквайринговогоТерминалаЗавершение(ИдентификаторУстройстваЭТ, Параметры) Экспорт
	
	ОписаниеОшибки = "";
	
	РезультатЭТ = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(Параметры.УникальныйИдентификатор, ИдентификаторУстройстваЭТ, ОписаниеОшибки);
	
	Если Не РезультатЭТ Тогда
		ТекстСообщения = НСтр("ru='При подключении эквайрингового терминала произошла ошибка:
						|""%ОписаниеОшибки%"".
						|Операция не была проведена.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	Иначе
		
		ВходныеПараметры = Новый Массив();
		ВыходныеПараметры = Неопределено;
		РезультатЭТ = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройстваЭТ, "PrintSlipOnTerminal", ВходныеПараметры, ВыходныеПараметры);
		
		Если ВыходныеПараметры.Количество() > 0 И ВыходныеПараметры[0] Тогда
			Если Параметры.СледующееОповещение <> Неопределено Тогда
				ПараметрыЗавершения = Новый Структура;
				ПараметрыЗавершения.Вставить("УникальныйИдентификатор"      , Параметры.УникальныйИдентификатор);
				ПараметрыЗавершения.Вставить("ИдентификаторПодключенногоЭТ" , ИдентификаторУстройстваЭТ);
				ПараметрыЗавершения.Вставить("ПечатьКвитанцийНаТерминале"   , Истина);
 				МенеджерОборудованияКлиент.Пауза(1);
				ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, ПараметрыЗавершения);
			КонецЕсли;
		Иначе
			Параметры.Вставить("ИдентификаторПодключенногоЭТ" , ИдентификаторУстройстваЭТ);
			Параметры.Вставить("ПечатьКвитанцийНаТерминале"   , Ложь);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПодключениеУстройстваПечатиЗавершение", ЭтотОбъект, Параметры);
			ПоддерживаемыеТипыВО = Новый Массив();
			ПоддерживаемыеТипыВО.Добавить("ФискальныйРегистратор");
			ПоддерживаемыеТипыВО.Добавить("ПринтерЧеков");
			МенеджерОборудованияКлиент.ПредложитьВыбратьУстройство(ОписаниеОповещения, ПоддерживаемыеТипыВО,
					НСтр("ru='Выберите устройство для печати эквайринговых чеков'"), 
					НСтр("ru='Устройство для печати эквайринговых чеков не подключено.'"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодключениеУстройстваПечатиЗавершение(ИдентификаторУстройстваПУ, Параметры) Экспорт
	
	ОписаниеОшибки = "";
	
	РезультатПУ = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(Параметры.УникальныйИдентификатор, ИдентификаторУстройстваПУ, ОписаниеОшибки);
	
	Если Не РезультатПУ Тогда
		
		// Отключение устройства ЭТ
		Если Не Параметры.ИдентификаторПодключенногоЭТ = Неопределено Тогда
			МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(Параметры.УникальныйИдентификатор, Параметры.ИдентификаторПодключенногоЭТ);
		КонецЕсли;
			
		ТекстСообщения = НСтр("ru='При подключении устройство печати произошла ошибка:
					|""%ОписаниеОшибки%"".
					|Операция не может быть проведена.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	Иначе
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			ПараметрыЗавершения = Новый Структура;
			ПараметрыЗавершения.Вставить("УникальныйИдентификатор"      , Параметры.УникальныйИдентификатор);
			ПараметрыЗавершения.Вставить("ИдентификаторПодключенногоЭТ" , Параметры.ИдентификаторПодключенногоЭТ);
			ПараметрыЗавершения.Вставить("ПечатьКвитанцийНаТерминале"   , Параметры.ПечатьКвитанцийНаТерминале);
			ПараметрыЗавершения.Вставить("ИдентификаторПодключенногоПУ" , ИдентификаторУстройстваПУ);
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, ПараметрыЗавершения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Отключение подключенного эквайрингово терминала. 
// Если эквайринговый терминал не поддерживает печать квитанций на терминале, для печати подключается фискальный
// регистратор.
// Данной процедурой он тоже будет отключен/
// Входящие параметры:  
//   Параметры  - Структура со следующими атрибутами.
//     ИдентификаторПодключенногоЭТ - Идентификатор подключенного эквайринговогой терминала.
//     ИдентификаторПодключенногоПУ - Идентификатор подключенного фискального регистратора.
//     ПечатьКвитанцийНаТерминале   - Поддерживает печать квитанций на терминале, если True то ИдентификаторПодключенногоПУ = Неопределено.
//  УникальныйИдентификатор - идентификатор формы.
//
Процедура ОтключитьЭквайринговыйТерминал(УникальныйИдентификатор, Параметры) Экспорт
	
	Если Не Параметры.ПечатьКвитанцийНаТерминале И Не Параметры.ИдентификаторПодключенногоПУ = Неопределено Тогда
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор, Параметры.ИдентификаторПодключенногоПУ);
	КонецЕсли;
	
	Если Не Параметры.ИдентификаторПодключенногоЭТ = Неопределено Тогда
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор, Параметры.ИдентификаторПодключенногоЭТ);
	КонецЕсли;
	 
КонецПроцедуры

Процедура ВыполнитьСверкуИтоговЭквайринговомТерминалеЗавершение(Результат, Параметры) Экспорт
	
	Если НЕ ТипЗнч(Результат) = Тип("Структура") Тогда
		ТекстСообщения = НСтр("ru='При выполнении операции произошла ошибка.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	УникальныйИдентификатор = Результат.УникальныйИдентификатор;
	ВходныеПараметры  = Неопределено;
	ВыходныеПараметры = Неопределено;
	
	// Выполнение операции на ЭТ
	РезультатЭТ = МенеджерОборудованияКлиент.ВыполнитьКоманду(Результат.ИдентификаторПодключенногоЭТ, "Settlement", ВходныеПараметры, ВыходныеПараметры);
	
	Если Не РезультатЭТ Тогда
		ТекстСообщения = НСтр("ru='При выполнении операции возникла ошибка:
					|""%ОписаниеОшибки%"".
					|Операция сверки итогов не была проведена.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	Иначе
		
		ТекстСлипЧека = ВыходныеПараметры[0][1];
		Если Не ПустаяСтрока(ТекстСлипЧека) Тогда
			глПодключаемоеОборудование.Вставить("ПоследнийСлипЧек", ТекстСлипЧека);
		КонецЕсли;
	
		Если Не Результат.ПечатьКвитанцийНаТерминале И Не Результат.ИдентификаторПодключенногоПУ = Неопределено Тогда
			Если Не ПустаяСтрока(ТекстСлипЧека) Тогда
				
				ВходныеПараметры = Новый Массив();
				ВходныеПараметры.Добавить(ТекстСлипЧека);
				ВыходныеПараметры = Неопределено;
				РезультатПУ = МенеджерОборудованияКлиент.ВыполнитьКоманду(Результат.ИдентификаторПодключенногоПУ, "PrintText", ВходныеПараметры, ВыходныеПараметры);
				
				Если Не РезультатПУ Тогда
					ТекстСообщения = НСтр("ru='При печати слип чека возникла ошибка:
												|""%ОписаниеОшибки%"".'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
			Иначе
				ТекстСообщения = НСтр("ru='Операция сверки итогов успешно выполнена.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	МенеджерОборудованияКлиент.ОтключитьЭквайринговыйТерминал(УникальныйИдентификатор, Результат);
	
КонецПроцедуры

// Выполнить cверку итогов на эквайринговом терминале.
// Если эквайринговый терминал не поддерживает печать квитанций на терминале, для печати подключается фискальный
// регистратор.
//
// Входящие параметры: 
//   УникальныйИдентификатор - идентификатор формы.
//
Процедура ВыполнитьСверкуИтоговНаЭквайринговомТерминале(УникальныйИдентификатор) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьСверкуИтоговЭквайринговомТерминалеЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьПодключенияЭквайринговогоТерминала(ОписаниеОповещения, УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииРаботыCВесамиСПечатьюЭтикеток

Процедура НачатьВыгрузкуДанныеВВесыСПечатьюЭтикеток(ОповещениеПриВыгрузкеДанные, ИдентификаторКлиента, ИдентификаторУстройства = Неопределено, ТаблицаВыгрузкиТоваров, ЧастичнаяВыгрузка = Ложь, ОтображатьСообщения = Истина) Экспорт
	
	Если ТаблицаВыгрузкиТоваров.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru='Нет данных для выгрузки!'");
		Если ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Если ОповещениеПриВыгрузкеДанные <> Неопределено Тогда
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Ложь, ТекстСообщения, ИдентификаторУстройства);
			ВыполнитьОбработкуОповещения(ОповещениеПриВыгрузкеДанные, РезультатВыполнения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("СледующееОповещение"    , ОповещениеПриВыгрузкеДанные);
	Контекст.Вставить("ИдентификаторКлиента"   , ИдентификаторКлиента);
	Контекст.Вставить("ТаблицаВыгрузкиТоваров" , ТаблицаВыгрузкиТоваров);
	Контекст.Вставить("ЧастичнаяВыгрузка"      , ЧастичнаяВыгрузка);
	Контекст.Вставить("ОтображатьСообщения"    , ОтображатьСообщения);
	
	Если ИдентификаторУстройства = Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыгрузкуДанныеВВесыСПечатьюЭтикетокЗавершение", ЭтотОбъект, Контекст);
		МенеджерОборудованияКлиент.ПредложитьВыбратьУстройство(ОписаниеОповещения, "ВесыСПечатьюЭтикеток",
			НСтр("ru='Выберите весы с печатью этикеток'"), НСтр("ru='Весы с печатью этикеток не подключены.'"));
	Иначе
		НачатьВыгрузкуДанныеВВесыСПечатьюЭтикетокЗавершение(ИдентификаторУстройства, Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьВыгрузкуДанныеВВесыСПечатьюЭтикетокЗавершение(ИдентификаторУстройства, Параметры) Экспорт
	
	Параметры.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
#Если ВебКлиент Тогда
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыгрузкуДанныеВВесыСПечатьюЭтикетокФайловоеРасширениеЗавершение", ЭтотОбъект, Параметры);
	ПроверитьДоступностьРасширенияРаботыСФайлами(ОписаниеОповещения, Ложь);
#Иначе
	// В тонком и толстом клиентах расширение подключено всегда.
	НачатьВыгрузкуДанныеВВесыСПечатьюЭтикетокФайловоеРасширениеЗавершение(Истина, Параметры);
#КонецЕсли
	
КонецПроцедуры

Процедура НачатьВыгрузкуДанныеВВесыСПечатьюЭтикетокФайловоеРасширениеЗавершение(Подключено, Параметры) Экспорт
	
	Если Не Подключено Тогда
		ТекстСообщения = НСтр("ru='Данная операция не доступна без установленного расширения для веб-клиента ""1С:Предприятие"".'");
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Ложь, ТекстСообщения, Параметры.ИдентификаторУстройства);
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ОписаниеОшибки = "";
	
	Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(Параметры.ИдентификаторКлиента, Параметры.ИдентификаторУстройства, ОписаниеОшибки);
	
	Если Результат Тогда
		
		ВходныеПараметры  = Новый Массив;
		ВходныеПараметры.Добавить(Параметры.ТаблицаВыгрузкиТоваров);
		ВходныеПараметры.Добавить(Параметры.ЧастичнаяВыгрузка); // Частичная выгрузка.
		ВыходныеПараметры = Неопределено;
			
		Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(Параметры.ИдентификаторУстройства, "ВыгрузитьТовары", ВходныеПараметры, ВыходныеПараметры);
		
		Если НЕ Результат Тогда
			ТекстСообщения = НСтр("ru='При выгрузке данных в оборудование произошла ошибка.
									  |%ОписаниеОшибки%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
		Иначе
			ТекстСообщения = НСтр("ru='Данные выгружены успешно.'");
		КонецЕсли;
		
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Результат, ТекстСообщения, Параметры.ИдентификаторУстройства);
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(Параметры.ИдентификаторКлиента, Параметры.ИдентификаторУстройства);
		
	Иначе
		ТекстСообщения = НСтр("ru='При подключении устройства произошла ошибка.
									|%ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
		
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Ложь, ТекстСообщения, Параметры.ИдентификаторУстройства);
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьОчисткуТоваровВВесахСПечатьюЭтикеток(ОповещениеПриОчисткеДанные, ИдентификаторКлиента, ИдентификаторУстройства = Неопределено, ОтображатьСообщения = Истина) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("СледующееОповещение"  , ОповещениеПриОчисткеДанные);
	Контекст.Вставить("ИдентификаторКлиента" , ИдентификаторКлиента);
	Контекст.Вставить("ОтображатьСообщения"  , ОтображатьСообщения);
	
	Если ИдентификаторУстройства = Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьОчисткуТоваровВВесахСПечатьюЭтикетокЗавершение", ЭтотОбъект, Контекст);
		МенеджерОборудованияКлиент.ПредложитьВыбратьУстройство(ОписаниеОповещения, "ВесыСПечатьюЭтикеток",
			НСтр("ru='Выберите весы с печатью этикеток'"), НСтр("ru='Весы с печатью этикеток не подключены.'"));
	Иначе
		НачатьОчисткуТоваровВВесахСПечатьюЭтикетокЗавершение(ИдентификаторУстройства, Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьОчисткуТоваровВВесахСПечатьюЭтикетокЗавершение(ИдентификаторУстройства, Параметры) Экспорт
	
	ОписаниеОшибки = "";
	
	Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(Параметры.ИдентификаторКлиента, ИдентификаторУстройства, ОписаниеОшибки);
	
	Если Результат Тогда
		
		ВходныеПараметры  = Неопределено;
		ВыходныеПараметры = Неопределено;
		
		Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства, "ОчиститьБазу", ВходныеПараметры, ВыходныеПараметры);
		Если НЕ Результат Тогда
			ТекстСообщения = НСтр("ru='При очистке данных в оборудование произошла ошибка.
									  |%ОписаниеОшибки%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
		Иначе
			ТекстСообщения = НСтр("ru='Очистка данных успешно завершена.'");
		КонецЕсли;
		
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Результат, ТекстСообщения, ИдентификаторУстройства);
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
			
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(Параметры.ИдентификаторКлиента, ИдентификаторУстройства);
	Иначе
		ТекстСообщения = НСтр("ru='При подключении устройства произошла ошибка.
									|%ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
		
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Ложь, ТекстСообщения, ИдентификаторУстройства);
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСОборудованиемККМOffline

// Выгружает настройки на ККМ оффлайн
//
Процедура НачатьВыгрузкуНастроекВККМOffline(ОповещениеПриВыгрузкеДанные, УникальныйИдентификатор, ИдентификаторУстройства = Неопределено,
	
	СтруктураНастроек, ОтображатьСообщения = Истина) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("СледующееОповещение"     , ОповещениеПриВыгрузкеДанные);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	Контекст.Вставить("СтруктураНастроек"       , СтруктураНастроек);
	Контекст.Вставить("ОтображатьСообщения"     , ОтображатьСообщения);
	
	Если ИдентификаторУстройства = Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыгрузкуНастроекВККМOfflineЗавершение", ЭтотОбъект, Контекст);
		МенеджерОборудованияКлиент.ПредложитьВыбратьУстройство(ОписаниеОповещения, "ККМOffline",
			НСтр("ru='Выберите ККМ Offline'"), НСтр("ru='ККМ Offline не подключены.'"));
	Иначе
		НачатьВыгрузкуНастроекВККМOfflineЗавершение(ИдентификаторУстройства, Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьВыгрузкуНастроекВККМOfflineЗавершение(ИдентификаторУстройства, Параметры) Экспорт
	
	Параметры.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
	#Если ВебКлиент Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыгрузкуНастроекВККМOfflineФайловоеРасширениеЗавершение", ЭтотОбъект, Параметры);
		ПроверитьДоступностьРасширенияРаботыСФайлами(ОписаниеОповещения, Ложь);
	#Иначе
		// В тонком и толстом клиентах расширение подключено всегда.
		НачатьВыгрузкуНастроекВККМOfflineФайловоеРасширениеЗавершение(Истина, Параметры);
	#КонецЕсли
	
КонецПроцедуры

Процедура НачатьВыгрузкуНастроекВККМOfflineФайловоеРасширениеЗавершение(Подключено, Параметры) Экспорт
	
	Если Не Подключено Тогда
		ТекстСообщения = НСтр("ru='Данная операция не доступна без установленного расширения для веб-клиента ""1С:Предприятие"".'");
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Ложь, ТекстСообщения, Параметры.ИдентификаторУстройства);
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ОписаниеОшибки = "";
	
	Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства, ОписаниеОшибки);
	
	Если Результат Тогда
		
		Состояние(НСтр("ru='Выполняется выгрузка настроек в ККМ Offline...'")); 
		
		
		ВходныеПараметры  = Параметры.СтруктураНастроек;
		ВыходныеПараметры = Неопределено;
		
		Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(Параметры.ИдентификаторУстройства, "ВыгрузитьНастройки", ВходныеПараметры, ВыходныеПараметры);
		
		Если НЕ Результат Тогда
			ТекстСообщения = НСтр("ru='При выгрузке данных в оборудование произошла ошибка.
									  |%ОписаниеОшибки%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
		Иначе
			ТекстСообщения = НСтр("ru='Данные выгружены успешно.'");
		КонецЕсли;
		
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Результат, ТекстСообщения, Параметры.ИдентификаторУстройства);
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства);
		
	Иначе
		ТекстСообщения = НСтр("ru='При подключении устройства произошла ошибка.
									|%ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
		
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Ложь, ТекстСообщения, Параметры.ИдентификаторУстройства);
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Очищает товары в ККМ Offline.
//
Процедура НачатьОчисткуТоваровВККМOffline(ОповещениеПриОчисткеДанные, УникальныйИдентификатор, ИдентификаторУстройства = Неопределено, ОтображатьСообщения = Истина) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("СледующееОповещение"     , ОповещениеПриОчисткеДанные);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	Контекст.Вставить("ОтображатьСообщения"     , ОтображатьСообщения);
	
	Если ИдентификаторУстройства = Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьОчисткуТоваровВККМOfflineЗавершение", ЭтотОбъект, Контекст);
		МенеджерОборудованияКлиент.ПредложитьВыбратьУстройство(ОписаниеОповещения, "ККМOffline",
			НСтр("ru='Выберите ККМ Offline'"), НСтр("ru='ККМ Offline не подключены.'"));
	Иначе
		НачатьОчисткуТоваровВККМOfflineЗавершение(ИдентификаторУстройства, Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьОчисткуТоваровВККМOfflineЗавершение(ИдентификаторУстройства, Параметры) Экспорт
	
	Параметры.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
#Если ВебКлиент Тогда
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьОчисткуТоваровВККМOfflineФайловоеРасширениеЗавершение", ЭтотОбъект, Параметры);
	ПроверитьДоступностьРасширенияРаботыСФайлами(ОписаниеОповещения, Ложь);
#Иначе
	// В тонком и толстом клиентах расширение подключено всегда.
	НачатьОчисткуТоваровВККМOfflineФайловоеРасширениеЗавершение(Истина, Параметры);
#КонецЕсли
	
КонецПроцедуры

Процедура НачатьОчисткуТоваровВККМOfflineФайловоеРасширениеЗавершение(Подключено, Параметры) Экспорт
	
	Если Не Подключено Тогда
		ТекстСообщения = НСтр("ru='Данная операция не доступна без установленного расширения для веб-клиента ""1С:Предприятие"".'");
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Ложь, ТекстСообщения, Параметры.ИдентификаторУстройства);
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ОписаниеОшибки = "";
	ВремРасширеннаяВыгрузка = Ложь;
	ПоддержкаАсинхронногоРежима = Ложь;
	
	ВходныеПараметры  = Неопределено;
	ВыходныеПараметры = Неопределено;
	ВремРасширеннаяВыгрузка = МенеджерОборудованияКлиент.ВыполнитьКомандуОбработчикаДрайвера("РасширеннаяВыгрузка", ВходныеПараметры, ВыходныеПараметры, Параметры.ИдентификаторУстройства, Неопределено, ПоддержкаАсинхронногоРежима);
	
	Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства, ОписаниеОшибки);
	
	Если Результат Тогда
		
		Состояние(НСтр("ru='Выполняется очистка товаров в ККМ Offline...'"));
		
		ВходныеПараметры  = Неопределено;
		ВыходныеПараметры = Неопределено;
		
		Если ПоддержкаАсинхронногоРежима Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("НачатьОчисткуТоваровВККМOfflineВыполнитьКомандуЗавершение", ЭтотОбъект, Параметры);
			МенеджерОборудованияКлиент.НачатьВыполнениеКоманды(ОписаниеОповещения, Параметры.ИдентификаторУстройства, "ОчиститьБазу", ВходныеПараметры);
		Иначе
			Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(Параметры.ИдентификаторУстройства, "ОчиститьБазу", ВходныеПараметры, ВыходныеПараметры);
			Если НЕ Результат Тогда
				ТекстСообщения = НСтр("ru='При очистке данных в оборудование произошла ошибка.
										  |%ОписаниеОшибки%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
			Иначе
				ТекстСообщения = НСтр("ru='Очистка данных успешно завершена.'");
			КонецЕсли;
			
			Если Параметры.СледующееОповещение <> Неопределено Тогда
				РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Результат, ТекстСообщения, Параметры.ИдентификаторУстройства);
				ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства);
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru='При подключении устройства произошла ошибка.
									|%ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
		
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Ложь, ТекстСообщения, Параметры.ИдентификаторУстройства);
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьОчисткуТоваровВККМOfflineВыполнитьКомандуЗавершение(РезультатКоманды, Параметры) Экспорт
	
	Если НЕ РезультатКоманды.Результат Тогда
		ТекстСообщения = НСтр("ru='При очистке данных в оборудование произошла ошибка.
								|%ОписаниеОшибки%'"
		);
		ОписаниеОшибки = ?(РезультатКоманды.ВыходныеПараметры.Количество() > 1, РезультатКоманды.ВыходныеПараметры[1], "");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
		
	Иначе
		ТекстСообщения = НСтр("ru='Очистка данных успешно завершена.'");
	КонецЕсли;
	
	Если Параметры.СледующееОповещение <> Неопределено Тогда
		РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", РезультатКоманды.Результат, ТекстСообщения, Параметры.ИдентификаторУстройства);
		ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства);

КонецПроцедуры

// Выгружает таблицу с данными в ККМ Offline.
// 
Процедура НачатьВыгрузкуДанныеВККМOffline(ОповещениеПриВыгрузкеДанные, УникальныйИдентификатор, ИдентификаторУстройства = Неопределено,
	ТаблицаВыгрузкиТоваров, ЧастичнаяВыгрузка = Ложь, ОтображатьСообщения = Истина, РасширеннаяВыгрузка = Ложь) Экспорт
	
	Если ТаблицаВыгрузкиТоваров.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru='Нет данных для выгрузки!'");
		Если ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Если ОповещениеПриВыгрузкеДанные <> Неопределено Тогда
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Ложь, ТекстСообщения, ИдентификаторУстройства);
			ВыполнитьОбработкуОповещения(ОповещениеПриВыгрузкеДанные, РезультатВыполнения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("СледующееОповещение"     , ОповещениеПриВыгрузкеДанные);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	Контекст.Вставить("ТаблицаВыгрузкиТоваров"  , ТаблицаВыгрузкиТоваров);
	Контекст.Вставить("ЧастичнаяВыгрузка"       , ЧастичнаяВыгрузка);
	Контекст.Вставить("ОтображатьСообщения"     , ОтображатьСообщения);
	Контекст.Вставить("РасширеннаяВыгрузка"     , РасширеннаяВыгрузка);
	
	Если ИдентификаторУстройства = Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыгрузкуДанныеВККМOfflineЗавершение", ЭтотОбъект, Контекст);
		МенеджерОборудованияКлиент.ПредложитьВыбратьУстройство(ОписаниеОповещения, "ККМOffline",
			НСтр("ru='Выберите ККМ Offline'"), НСтр("ru='ККМ Offline не подключены.'"));
	Иначе
		НачатьВыгрузкуДанныеВККМOfflineЗавершение(ИдентификаторУстройства, Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьВыгрузкуДанныеВККМOfflineЗавершение(ИдентификаторУстройства, Параметры) Экспорт
	
	Параметры.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
#Если ВебКлиент Тогда
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыгрузкуДанныеВККМOfflineФайловоеРасширениеЗавершение", ЭтотОбъект, Параметры);
	ПроверитьДоступностьРасширенияРаботыСФайлами(ОписаниеОповещения, Ложь);
#Иначе
	// В тонком и толстом клиентах расширение подключено всегда.
	НачатьВыгрузкуДанныеВККМOfflineФайловоеРасширениеЗавершение(Истина, Параметры);
#КонецЕсли
	
КонецПроцедуры

Процедура НачатьВыгрузкуДанныеВККМOfflineФайловоеРасширениеЗавершение(Подключено, Параметры) Экспорт
	
	Если Не Подключено Тогда
		ТекстСообщения = НСтр("ru='Данная операция не доступна без установленного расширения для веб-клиента ""1С:Предприятие"".'");
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Ложь, ТекстСообщения, Параметры.ИдентификаторУстройства);
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ОписаниеОшибки = "";
	ВремРасширеннаяВыгрузка = Ложь;
	ПоддержкаАсинхронногоРежима = Ложь;
	
	ВходныеПараметры  = Неопределено;
	ВыходныеПараметры = Неопределено;
	ВремРасширеннаяВыгрузка = МенеджерОборудованияКлиент.ВыполнитьКомандуОбработчикаДрайвера("РасширеннаяВыгрузка", ВходныеПараметры, ВыходныеПараметры, Параметры.ИдентификаторУстройства, Неопределено, ПоддержкаАсинхронногоРежима);
	
	Если Параметры.РасширеннаяВыгрузка И НЕ ВремРасширеннаяВыгрузка Тогда
		ТекстСообщения = НСтр("ru='Операция расширенной выгрузки не доступна для выбранного драйвера.'");
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Ложь, ТекстСообщения, Параметры.ИдентификаторУстройства);
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства, ОписаниеОшибки);
	
	Если Результат Тогда
		
		Состояние(НСтр("ru='Выполняется выгрузка товаров в ККМ Offline...'"));
		
		ВходныеПараметры  = Новый Массив;
		Если ВремРасширеннаяВыгрузка И НЕ Параметры.РасширеннаяВыгрузка Тогда
			МассивВыгрузкиТоваров = МенеджерОборудованияКлиентСервер.ПолучитьСтруктуруПрайсЛиста();
			Для Каждого СтрокаТЧ Из Параметры.ТаблицаВыгрузкиТоваров Цикл
				ЭлементМассива = МенеджерОборудованияКлиентСервер.ПолучитьСтруктуруЗаписиМассиваТовары();
				ЭлементМассива.Код                 = СтрокаТЧ.Код;
				ЭлементМассива.Артикул             = ?(СтрокаТЧ.Свойство("Артикул"), СтрокаТЧ.Артикул, "");
				ЭлементМассива.Штрихкод            = Строка(СтрокаТЧ.Штрихкод);
				ЭлементМассива.Наименование        = СтрокаТЧ.Наименование;
				ЭлементМассива.ЕдиницаИзмерения    = СтрокаТЧ.ЕдиницаИзмерения;
				ЭлементМассива.Цена                = СтрокаТЧ.Цена;
				ЭлементМассива.Остаток             = ?(СтрокаТЧ.Свойство("Остаток"), СтрокаТЧ.Остаток, 0);
				ЭлементМассива.Весовой             = ?(СтрокаТЧ.Свойство("ВесовойТовар"), СтрокаТЧ.ВесовойТовар, Ложь);
				ЭлементМассива.ИмеетХарактеристики = Ложь;
				ЭлементМассива.ИмеетУпаковки       = Ложь;
				МассивВыгрузкиТоваров.Товары.Добавить(ЭлементМассива);
			КонецЦикла;
			ВходныеПараметры.Добавить(МассивВыгрузкиТоваров);
		Иначе
			ВходныеПараметры.Добавить(Параметры.ТаблицаВыгрузкиТоваров);
		КонецЕсли;
		
		ВходныеПараметры.Добавить(Параметры.ЧастичнаяВыгрузка); // Частичная выгрузка.
		ВыходныеПараметры = Неопределено;
		
		Если ПоддержкаАсинхронногоРежима Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыгрузкуДанныеВККМOfflineВыполнитьКомандуЗавершение", ЭтотОбъект, Параметры);
			МенеджерОборудованияКлиент.НачатьВыполнениеКоманды(ОписаниеОповещения, Параметры.ИдентификаторУстройства, "ВыгрузитьТовары", ВходныеПараметры);
		Иначе
			Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(Параметры.ИдентификаторУстройства, "ВыгрузитьТовары", ВходныеПараметры, ВыходныеПараметры);
			Если НЕ Результат Тогда
				ТекстСообщения = НСтр("ru='При выгрузке данных в оборудование произошла ошибка.
										  |%ОписаниеОшибки%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
			Иначе
				ТекстСообщения = НСтр("ru='Данные выгружены успешно.'");
			КонецЕсли;
			
			Если Параметры.СледующееОповещение <> Неопределено Тогда
				РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Результат, ТекстСообщения, Параметры.ИдентификаторУстройства);
				ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства);
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru='При подключении устройства произошла ошибка.
									|%ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
		
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Ложь, ТекстСообщения, Параметры.ИдентификаторУстройства);
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьВыгрузкуДанныеВККМOfflineВыполнитьКомандуЗавершение(РезультатКоманды, Параметры) Экспорт
	
	Если НЕ РезультатКоманды.Результат Тогда
		ТекстСообщения = НСтр("ru='При выгрузке данных в оборудование произошла ошибка.
								  |%ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатКоманды.ВыходныеПараметры[1]);
	Иначе
		ТекстСообщения = НСтр("ru='Данные выгружены успешно.'");
	КонецЕсли;
	
	Если Параметры.СледующееОповещение <> Неопределено Тогда
		РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", РезультатКоманды.Результат, ТекстСообщения, Параметры.ИдентификаторУстройства);
		ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства);

КонецПроцедуры

// Начать загрузку данных из ККМ Offline.
// УникальныйИдентификатор - идентификатор формы.
// ОповещениеПриЗагрузкеДанные - оповещение при завершении выгрузки данных.
//
Процедура НачатьЗагрузкуОтчетаОРозничныхПродажахИзККМOffline(ОповещениеПриЗагрузкеДанные, УникальныйИдентификатор, ИдентификаторУстройства = Неопределено, ОтображатьСообщения = Истина, РасширеннаяЗагрузка = Ложь) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("СледующееОповещение"     , ОповещениеПриЗагрузкеДанные);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	Контекст.Вставить("ОтображатьСообщения"     , ОтображатьСообщения);
	Контекст.Вставить("РасширеннаяЗагрузка"     , РасширеннаяЗагрузка);
	
	Если ИдентификаторУстройства = Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьЗагрузкуОтчетаОРозничныхПродажахИзККМOfflineЗавершение", ЭтотОбъект, Контекст);
		МенеджерОборудованияКлиент.ПредложитьВыбратьУстройство(ОписаниеОповещения, "ККМOffline",
			НСтр("ru='Выберите ККМ Offline'"), НСтр("ru='ККМ Offline не подключены.'"));
	Иначе
		НачатьЗагрузкуОтчетаОРозничныхПродажахИзККМOfflineЗавершение(ИдентификаторУстройства, Контекст);
	КонецЕсли;
		
КонецПроцедуры

Процедура НачатьЗагрузкуОтчетаОРозничныхПродажахИзККМOfflineЗавершение(ИдентификаторУстройства, Параметры) Экспорт
	
	Параметры.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
#Если ВебКлиент Тогда
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьЗагрузкуОтчетаОРозничныхПродажахИзККМOfflineФайловоеРасширениеЗавершение", ЭтотОбъект, Параметры);
	ПроверитьДоступностьРасширенияРаботыСФайлами(ОписаниеОповещения, Ложь);
#Иначе
	// В тонком и толстом клиентах расширение подключено всегда.
	НачатьЗагрузкуОтчетаОРозничныхПродажахИзККМOfflineФайловоеРасширениеЗавершение(Истина, Параметры);
#КонецЕсли
	
КонецПроцедуры

Процедура НачатьЗагрузкуОтчетаОРозничныхПродажахИзККМOfflineФайловоеРасширениеЗавершение(Подключено, Параметры) Экспорт
	
	Если Не Подключено Тогда
		ТекстСообщения = НСтр("ru='Данная операция не доступна без установленного расширения для веб-клиента ""1С:Предприятие"".'");
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Ложь, ТекстСообщения, Параметры.ИдентификаторУстройства);
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ОписаниеОшибки = "";
	ВремРасширеннаяЗагрузка = Ложь;
	ПоддержкаАсинхронногоРежима = Ложь;
	
	ВходныеПараметры  = Неопределено;
	ВыходныеПараметры = Неопределено;
	ВремРасширеннаяЗагрузка = МенеджерОборудованияКлиент.ВыполнитьКомандуОбработчикаДрайвера("РасширеннаяЗагрузка", ВходныеПараметры, ВыходныеПараметры, Параметры.ИдентификаторУстройства, Неопределено, ПоддержкаАсинхронногоРежима);
	
	Если Параметры.РасширеннаяЗагрузка И НЕ ВремРасширеннаяЗагрузка Тогда
		ТекстСообщения = НСтр("ru='Операция расширенной загрузки не доступна для выбранного драйвера.'");
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Ложь, ТекстСообщения, Параметры.ИдентификаторУстройства);
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства, ОписаниеОшибки);
	
	Если Результат Тогда
		Состояние(НСтр("ru='Выполняется загрузка товаров из ККМ Offline...'"));
		
		ВходныеПараметры  = Новый Массив;
		ВыходныеПараметры = Неопределено;
		
		ИмяКоманды = ?(ВремРасширеннаяЗагрузка И Параметры.РасширеннаяЗагрузка, "ЗагрузитьРасширенныйОтчет", "ЗагрузитьОтчет");
		
		Если ПоддержкаАсинхронногоРежима Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("НачатьЗагрузкуОтчетаОРозничныхПродажахИзККМOfflineВыполнитьКомандуЗавершение", ЭтотОбъект, Параметры);
			МенеджерОборудованияКлиент.НачатьВыполнениеКоманды(ОписаниеОповещения, Параметры.ИдентификаторУстройства, ИмяКоманды, ВходныеПараметры);
		Иначе
			Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(Параметры.ИдентификаторУстройства, ИмяКоманды, ВходныеПараметры, ВыходныеПараметры);
			Если НЕ Результат Тогда
				ТекстСообщения = НСтр("ru='При загрузка данных из ККМ Offline произошла ошибка.
										  |%ОписаниеОшибки%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
				ТаблицаТоваров = Неопределено;
			Иначе
				ТаблицаТоваров = ВыходныеПараметры[0];
				ТекстСообщения = НСтр("ru='Данные загружены успешно.'");
			КонецЕсли;
			
			Если Параметры.СледующееОповещение <> Неопределено Тогда
				РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ТаблицаТоваров, ИдентификаторУстройства, РасширеннаяЗагрузка", 
													   Результат, ТекстСообщения, ТаблицаТоваров, Параметры.ИдентификаторУстройства, Параметры.РасширеннаяЗагрузка);
				ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства);
		КонецЕсли;
		
	Иначе
		ТекстСообщения = НСтр("ru='При подключении устройства произошла ошибка.
									|%ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
		
		Если Параметры.ОтображатьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторУстройства", Ложь, ТекстСообщения, Параметры.ИдентификаторУстройства);
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьЗагрузкуОтчетаОРозничныхПродажахИзККМOfflineВыполнитьКомандуЗавершение(РезультатКоманды, Параметры) Экспорт
	
	Если НЕ РезультатКоманды.Результат Тогда
		ТекстСообщения = НСтр("ru='При загрузка данных из ККМ Offline произошла ошибка.
								  |%ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатКоманды.ВыходныеПараметры[1]);
		ТаблицаТоваров = Неопределено;
	Иначе
		ТаблицаТоваров = РезультатКоманды.ВыходныеПараметры[0];
		ТекстСообщения = НСтр("ru='Данные загружены успешно.'");
	КонецЕсли;
	
	Если Параметры.СледующееОповещение <> Неопределено Тогда
		РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ТаблицаТоваров, ИдентификаторУстройства, РасширеннаяЗагрузка", 
											   РезультатКоманды.Результат, ТекстСообщения, ТаблицаТоваров, Параметры.ИдентификаторУстройства, Параметры.РасширеннаяЗагрузка);
		ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства);
	
КонецПроцедуры

// Начать выставление флага о загрузке отчета.
//
Процедура НачатьВыставитьФлагОтчетЗагруженККМOffline(УникальныйИдентификатор, ИдентификаторУстройства, ОтображатьСообщения = Истина) Экспорт;
	
	ОписаниеОшибки = "";
	
	Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор, ИдентификаторУстройства, ОписаниеОшибки);
	
	Если Результат Тогда
		ВходныеПараметры  = Неопределено;
		ВыходныеПараметры = Неопределено;
		
		Параметры = Новый Структура("УникальныйИдентификатор, ИдентификаторУстройства", УникальныйИдентификатор, ИдентификаторУстройства);
		
		ПоддержкаАсинхронногоРежима = Ложь;
		МенеджерОборудованияКлиент.ВыполнитьКомандуОбработчикаДрайвера("РасширеннаяЗагрузка", ВходныеПараметры, Неопределено, ИдентификаторУстройства, Неопределено, ПоддержкаАсинхронногоРежима);
		
		Если ПоддержкаАсинхронногоРежима Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыставитьФлагОтчетЗагруженККМOfflineЗавершение", ЭтотОбъект, Параметры);
			МенеджерОборудованияКлиент.НачатьВыполнениеКоманды(ОписаниеОповещения, ИдентификаторУстройства, "ОтчетЗагружен", ВходныеПараметры);
		Иначе
			МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства, "ОтчетЗагружен", ВходныеПараметры, ВыходныеПараметры);
			МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор, ИдентификаторУстройства);
		КонецЕсли;
			
	Иначе
		Если ОтображатьСообщения Тогда
			ТекстСообщения = НСтр("ru='При подключении устройства произошла ошибка.
								  |%ОписаниеОшибки%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьВыставитьФлагОтчетЗагруженККМOfflineЗавершение(РезультатКоманды, Параметры) Экспорт
	
	МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(Параметры.УникальныйИдентификатор, Параметры.ИдентификаторУстройства);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСУстройсвамиПечати

// Функция получает ширину строки в символах.
//  
Функция ПолучитьШиринуСтрокиПечатающегоУстройства(ИдентификаторУстройства) Экспорт
	
	ВходныеПараметры  = Неопределено;
	ВыходныеПараметры = Неопределено;
	
	Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства, "GetLineLength", ВходныеПараметры, ВыходныеПараметры);    
	
	Если Результат Тогда
		Возврат ВыходныеПараметры[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСУстройсвамиВвода

// Определяет соответствует ли код карты шаблону.
// На входе:
// ДанныеДорожек - Массив содержащий строки кода дорожки. Всего 3 Элемента.
// ДанныеШаблона - структура содержащая данные шаблона:
//	- Суффикс
//	- Префикс
//	- РазделительБлоков
//	- ДлинаКода
// На выходе:
// Истина - код соответствует шаблону.
// Сообщение пользователю что именно не соответствует.
Функция КодСоответствуетШаблонуМК(ДанныеДорожек, ДанныеШаблона) Экспорт
	
	ОднаДорожкаПрисутствует = Ложь;
	ПроверкаПройдена = Истина;
	
	Для Итератор = 1 По 3 Цикл
		Если ДанныеШаблона["ДоступностьДорожки"+Строка(Итератор)] Тогда
			ОднаДорожкаПрисутствует = Истина;
			текСтрока = ДанныеДорожек[Итератор - 1];
			Если Прав(текСтрока, СтрДлина(ДанныеШаблона["Суффикс" + Строка(Итератор)])) <> ДанныеШаблона["Суффикс" + Строка(Итератор)] Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Дорожка'") + Символы.НПП + Строка(Итератор) 
					+ ". "+НСтр("ru='Суффикс карты не соответствует суффиксу шаблона.'"));
				ПроверкаПройдена = Ложь;
			КонецЕсли;
			
			Если Лев(текСтрока, СтрДлина(ДанныеШаблона["Префикс" + Строка(Итератор)])) <> ДанныеШаблона["Префикс" + Строка(Итератор)] Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Дорожка'") + Символы.НПП + Строка(Итератор) 
					+ ". " + НСтр("ru='Префикс карты не соответствует префиксу шаблона.'"));
				ПроверкаПройдена = Ложь;
			КонецЕсли;
			
			Если Найти(текСтрока, ДанныеШаблона["РазделительБлоков"+Строка(Итератор)]) = 0 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Дорожка'") + Символы.НПП + Строка(Итератор) 
					+ ". "+НСтр("ru='Разделитель блоков карты не соответствует разделителю блоков шаблона.'"));
				ПроверкаПройдена = Ложь;
			КонецЕсли;
				
			Если СтрДлина(текСтрока) <> ДанныеШаблона["ДлинаКода"+Строка(Итератор)] Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Дорожка'") + Символы.НПП + Строка(Итератор) 
					+ ". " + НСтр("ru='Длина кода карты не соответствует длине кода шаблона.'"));
				ПроверкаПройдена = Ложь;
			КонецЕсли;
			
			Если НЕ ПроверкаПройдена Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ОднаДорожкаПрисутствует Тогда 
		Возврат Истина;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='В шаблоне не указано ни одной доступной дорожки.'"));
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Производит получение события от устройсва.
//
Функция ПолучитьСобытиеОтУстройства(ОписаниеСобытия, ОписаниеОшибки = "") Экспорт
	
	Результат = Неопределено;
	
	// Поиск обработчика события
	Для каждого Подключение Из глПодключаемоеОборудование.ПараметрыПодключенияПО Цикл
						  
		Если Подключение.ИсточникСобытия = ОписаниеСобытия.Источник
		 Или (ПустаяСтрока(Подключение.ИсточникСобытия)
		   И Подключение.ИменаСобытий <> Неопределено) Тогда
		   
		   // Ищем среди подключенного оборудования устройство с полученным событием.
			Событие = Подключение.ИменаСобытий.Найти(ОписаниеСобытия.Событие);
			Если Событие <> Неопределено Тогда
				ОбъектДрайвера = ПолучитьОбъектДрайвера(Подключение);
				Если ОбъектДрайвера = Неопределено Тогда
					// Сообщить об ошибке, что не удалось загрузить драйвер.
					ОписаниеОшибки = НСтр("ru='""%Наименование%"": Не удалось загрузить драйвер устройства.
												|Проверьте, что драйвер корректно установлен и зарегистрирован в системе.'");
					ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", Подключение.Наименование);
					Продолжить;
				КонецЕсли;
				
				ВходныеПараметры  = Новый Массив();
				ВходныеПараметры.Добавить(ОписаниеСобытия.Событие);
				ВходныеПараметры.Добавить(ОписаниеСобытия.Данные);
				ВыходныеПараметры = Неопределено;
				
				// Обрабатываем сообщение
				РезультатОбработки = ВыполнитьКоманду(Подключение.Ссылка, "ОбработатьСобытие", ВходныеПараметры, ВыходныеПараметры);
				
				Если РезультатОбработки Тогда
					// Оповещаем 
					Результат = Новый Структура();
					Результат.Вставить("ИмяСобытия", ВыходныеПараметры[0]);
					Результат.Вставить("Параметр",   ВыходныеПараметры[1]);
					Результат.Вставить("Источник",   "ПодключаемоеОборудование");
				КонецЕсли;
				
				// Оповещаем драйвер о завершении обработки события.
				ВходныеПараметры.Очистить();
				ВходныеПараметры.Добавить(РезультатОбработки);
				ВыполнитьКоманду(Подключение.Ссылка, "ЗавершитьОбработкуСобытия", ВходныеПараметры, ВыходныеПараметры);
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Производит обработку данных события, полученных от клиента.
//
Функция ОбработатьСобытиеОтУстройства(ОписаниеСобытия, ОписаниеОшибки = "") Экспорт

	Результат = Истина;
	
	// Поиск обработчика события
	Для каждого Подключение Из глПодключаемоеОборудование.ПараметрыПодключенияПО Цикл
						  
		Если Подключение.ИсточникСобытия = ОписаниеСобытия.Источник
		 Или (ПустаяСтрока(Подключение.ИсточникСобытия)
		   И Подключение.ИменаСобытий <> Неопределено) Тогда
		   
		   // Ищем среди подключенного оборудования устройство с полученным событием.
			Событие = Подключение.ИменаСобытий.Найти(ОписаниеСобытия.Событие);
			Если Событие <> Неопределено Тогда
				
				ОбработчикДрайвера = МенеджерОборудованияКлиентПовтИсп.ПолучитьОбработчикДрайвера(Подключение.ОбработчикДрайвера, Не Подключение.ВСоставеКонфигурации);
				Если ОбработчикДрайвера = ПодключаемоеОборудованиеУниверсальныйДрайверАсинхронноКлиент 
					Или ОбработчикДрайвера = ПодключаемоеОборудованиеУниверсальныйДрайверКлиент Тогда
					
					ВыходныеПараметры = Новый Массив();
					// Обрабатываем сообщение
					Результат = ОбработчикДрайвера.ОбработатьСобытие(Неопределено, Подключение.Параметры, Подключение.ПараметрыПодключения, ОписаниеСобытия.Событие, ОписаниеСобытия.Данные, ВыходныеПараметры);
					// Обрабатываем сообщение
					Если Результат Тогда
						// Оповещаем 
						Оповестить(ВыходныеПараметры[0], ВыходныеПараметры[1], "ПодключаемоеОборудование");
					КонецЕсли;
					
				Иначе
					
					ВходныеПараметры  = Новый Массив();
					ВходныеПараметры.Добавить(ОписаниеСобытия.Событие);
					ВходныеПараметры.Добавить(ОписаниеСобытия.Данные);
					ВыходныеПараметры = Неопределено;
					// Обрабатываем сообщение
					Результат = ВыполнитьКоманду(Подключение.Ссылка, "ОбработатьСобытие", ВходныеПараметры, ВыходныеПараметры);
					Если Результат Тогда
						// Оповещаем 
						Оповестить(ВыходныеПараметры[0], ВыходныеПараметры[1], "ПодключаемоеОборудование");
					КонецЕсли;
				    // Оповещаем драйвер о завершении обработки события.
					ВходныеПараметры.Очистить();
					ВходныеПараметры.Добавить(Результат);
					ВыполнитьКоманду(Подключение.Ссылка, "ЗавершитьОбработкуСобытия", ВходныеПараметры, ВыходныеПараметры);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСОборудованиемПринтеромЭтикеток

// Начать печать этикеток.
//
Процедура НачатьПечатьЭтикеток(ОповещениеПриЗавершенииПечати, УникальныйИдентификатор, ОписаниеЭтикеткиВXML, ДанныеДляПечати, ИдентификаторУстройства = Неопределено, ОтображатьСообщения = Истина) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("СледующееОповещение"    , ОповещениеПриЗавершенииПечати);
	Контекст.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	Контекст.Вставить("ОписаниеЭтикеткиВXML"   , ОписаниеЭтикеткиВXML);
	Контекст.Вставить("ДанныеДляПечати"        , ДанныеДляПечати);
	Контекст.Вставить("ОтображатьСообщения"    , ОтображатьСообщения);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПечатьЭтикетокЗавершение", ЭтотОбъект, Контекст);
	
	Если ИдентификаторУстройства = Неопределено Тогда		
		МенеджерОборудованияКлиент.ПредложитьВыбратьУстройство(ОписаниеОповещения, "ПринтерЭтикеток",
			НСтр("ru='Выберите принтер этикеток'"), НСтр("ru='Принтеры этикеток не подключены'"));
	Иначе
		НачатьПечатьЭтикетокЗавершение(ИдентификаторУстройства, Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПечатьЭтикетокЗавершение(ИдентификаторУстройства, Параметры) Экспорт
	
	ОписаниеОшибки = "";
	Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(Параметры.УникальныйИдентификатор, ИдентификаторУстройства, ОписаниеОшибки);
	
	Если Результат Тогда
		
		Состояние(НСтр("ru='Выполняется печать этикеток...'"));
		ВходныеПараметры  = Новый Массив;
		ОписаниеЭтикеткиВСтруктуре = Неопределено;
		СообщениеОбОшибке = "";
		ТекстСообщения = "";
		
		#Если Не ВебКлиент Тогда
			Результат = ПолучитьСтруктуруСОписаниемМакета(Параметры.ОписаниеЭтикеткиВXML, СообщениеОбОшибке, ОписаниеЭтикеткиВСтруктуре);
		#Иначе
			Результат = МенеджерОборудованияВызовСервера.ПолучитьСтруктуруСОписаниемМакета(Параметры.ОписаниеЭтикеткиВXML, СообщениеОбОшибке, ОписаниеЭтикеткиВСтруктуре);
		#КонецЕсли
		
		Если Не Результат Тогда			
			ТекстСообщения = НСтр("ru='При обработке макета этикетки произошла ошибка.
									  |%ОписаниеОшибки%
									  |Печать прервана.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", СообщениеОбОшибке);
		Иначе
			
			ВходныеПараметры.Добавить(ОписаниеЭтикеткиВСтруктуре);
			ВходныеПараметры.Добавить(Параметры.ДанныеДляПечати);
			ВыходныеПараметры = Неопределено;
				
			Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства, "ПечатьЭтикеток", ВходныеПараметры, ВыходныеПараметры);
			
			Если НЕ Результат Тогда
				ТекстСообщения = НСтр("ru='Во время печати произошла ошибка.
										  |%ОписаниеОшибки%
										  |Печать прервана.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
			КонецЕсли;
			
			МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(Параметры.УникальныйИдентификатор, ИдентификаторУстройства);
			
		КонецЕсли;
		
	Иначе
		ТекстСообщения = НСтр("ru='При подключении устройства произошла ошибка.
									|%ОписаниеОшибки%
									|Печать прервана.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
	КонецЕсли;
	
	Если Параметры.ОтображатьСообщения И ЗначениеЗаполнено(ТекстСообщения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Если Параметры.СледующееОповещение <> Неопределено Тогда
		
		РезультатВыполнения = Новый Структура;
		РезультатВыполнения.Вставить("Результат", Результат);
		РезультатВыполнения.Вставить("ОписаниеОшибки", ТекстСообщения);
		ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, РезультатВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры

// Начать редактирование макета.
//
Процедура НачатьРедактированиеМакета(ОповещениеПриЗавершенииРедактирования, ОписаниеЭтикеткиВXML, АдресХранилищаСКД) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("СледующееОповещение", ОповещениеПриЗавершенииРедактирования);
	Контекст.Вставить("XMLОписаниеМакета"  , ОписаниеЭтикеткиВXML);
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("НачатьРедактированиеМакетаЗавершение", ЭтотОбъект, Контекст);
	ОткрытьФорму("ОбщаяФорма.РедакторЭтикетокФормаРедактированияМакета", Новый Структура("АдресХранилищаСКД", АдресХранилищаСКД),,,,, ОповещениеПриЗавершении);
	
КонецПроцедуры

Процедура НачатьРедактированиеМакетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("РазмерМакета",		?(Результат <> Неопределено, ДополнительныеПараметры.РазмерМакета, Неопределено));
	ДопПараметры.Вставить("XMLОписаниеМакета",	?(Результат <> Неопределено, ДополнительныеПараметры.XMLОписаниеМакета, Неопределено));
	ДопПараметры.Вставить("Поля",				?(Результат <> Неопределено, ДополнительныеПараметры.Поля, Неопределено));
	
	ОписаниеОповещения = Новый ОписаниеОповещения(ДополнительныеПараметры.СледующееОповещение.ИмяПроцедуры, ДополнительныеПараметры.СледующееОповещение.Модуль, ДопПараметры);
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, ?(Результат <> Неопределено, Результат, КодВозвратаДиалога.Отмена));
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбщихКоманд

// Открытие формы списка рабочих мест.
//
Процедура ОткрытьРабочиеМеста(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента();
	ПараметрыФормы = Новый Структура();
	ОткрытьФорму("Справочник.РабочиеМеста.ФормаСписка", ПараметрыФормы, ПараметрыВыполненияКоманды.Источник, ПараметрыВыполненияКоманды.Уникальность, ПараметрыВыполненияКоманды.Окно);
	
КонецПроцедуры

// Процедура для выбора рабочего места текущего сеанса.
//
Процедура ВыбратьРМТекущегоСеанса(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ПредложитьВыборРабочегоМестаЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.ПредложитьВыборРабочегоМеста(Оповещение);
	
КонецПроцедуры

// Открытие формы подключаемого Оборудования.
//
Процедура ОткрытьПодключаемоеОборудование(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента();
	
	ПараметрыФормы = Новый Структура();
	ОткрытьФорму("Справочник.ПодключаемоеОборудование.ФормаСписка", ПараметрыФормы, ПараметрыВыполненияКоманды.Источник, ПараметрыВыполненияКоманды.Уникальность, ПараметрыВыполненияКоманды.Окно);
	
КонецПроцедуры

// Открытие формы драйверов оборудования.
//
Процедура ОткрытьДрайверыОборудования(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента();
	
	ПараметрыФормы = Новый Структура();
	ОткрытьФорму("Справочник.ДрайверыОборудования.ФормаСписка", ПараметрыФормы, ПараметрыВыполненияКоманды.Источник, ПараметрыВыполненияКоманды.Уникальность, ПараметрыВыполненияКоманды.Окно);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииДляРаботыСДрайвером

// Проверяет установлен ли драйвер.
//
Функция ДрайверУстановлен(Идентификатор) Экспорт
	
	ДанныеОборудования = МенеджерОборудованияВызовСервера.ПолучитьДанныеУстройства(Идентификатор);
	ОбъектДрайвера = ПолучитьОбъектДрайвера(ДанныеОборудования);
	
	Возврат ОбъектДрайвера <> Неопределено;
	
КонецФункции

#Если Не ВебКлиент Тогда

// Установить или переустановить драйверы помеченные флагами.
//
Процедура ПереустановитьПомеченныеДрайверы() Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	МассивРабочихМест = МенеджерОборудованияКлиентПовтИсп.НайтиРабочиеМестаПоИД(ВРег(СистемнаяИнформация.ИдентификаторКлиента));
	Если МассивРабочихМест.Количество() = 0 Тогда
		РабочееМесто = Неопределено
	Иначе
		РабочееМесто = МассивРабочихМест[0];
	КонецЕсли;
	
	// Переустановить драйверы помеченные флагом для переустановки.
	Если ЗначениеЗаполнено(РабочееМесто) Тогда
		СписокОборудования = МенеджерОборудованияВызовСервера.ПолучитьСписокДрайверовДляПереустановки(РабочееМесто);
		Для Каждого Оборудование Из СписокОборудования Цикл
			Если Оборудование.ДанныеДрайвера.ВСоставеКонфигурации И НЕ Оборудование.ДанныеДрайвера.ПоставляетсяДистрибутивом Тогда
				НачатьУстановкуВнешнейКомпоненты(, "ОбщийМакет." + Оборудование.ДанныеДрайвера.ИмяМакетаДрайвера);
			КонецЕсли;
			МенеджерОборудованияВызовСервера.УстановитьПризнакПереустановкиДрайвера(РабочееМесто, Оборудование.ДрайверОборудования, Ложь); 
		КонецЦикла;
	КонецЕсли;
	
	// Установить драйверы помеченные флагом для переустановки.
	Если ЗначениеЗаполнено(РабочееМесто) Тогда
		СписокОборудования = МенеджерОборудованияВызовСервера.ПолучитьСписокДрайверовДляУстановки(РабочееМесто);
		Для Каждого Оборудование Из СписокОборудования Цикл
			Если Оборудование.ДанныеДрайвера.ВСоставеКонфигурации И НЕ Оборудование.ДанныеДрайвера.ПоставляетсяДистрибутивом Тогда
				ОбъектДрайвера = ПолучитьОбъектДрайвера(Оборудование.ДанныеДрайвера);
				Если ОбъектДрайвера = Неопределено Тогда
					НачатьУстановкуВнешнейКомпоненты(, "ОбщийМакет." + Оборудование.ДанныеДрайвера.ИмяМакетаДрайвера);
				Иначе
					ОтключитьОбъектДрайвера(Оборудование.ДанныеДрайвера);
				КонецЕсли;
			КонецЕсли;
			МенеджерОборудованияВызовСервера.УстановитьПризнакУстановкиДрайвера(РабочееМесто, Оборудование.ДрайверОборудования, Ложь); 
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьУстановкуДрайвераИзДистрибутиваЗавершение(Результат, Параметры) Экспорт
	
	Если Параметры.Свойство("ВременныйФайл") Тогда
		НачатьУдалениеФайлов(, Параметры.ВременныйФайл);
	КонецЕсли;
	Если Параметры.Свойство("КаталогИнсталляции") Тогда
		НачатьУдалениеФайлов(, Параметры.КаталогИнсталляции);
	КонецЕсли;
	
	Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, Результат = 0);
	КонецЕсли;
	
КонецПроцедуры

// Начать установку драйвера из дистрибутива поставщика из макета.
//
Процедура НачатьУстановкуДрайвераИзДистрибутиваВМакете(ОповещениеПриЗавершении, ИмяМакета, ИмяФайла) Экспорт
	
	Результат = Ложь;
	// Получение макета с сервера
	СсылкаНаФайл = МенеджерОборудованияВызовСервера.ПолучитьМакетССервера(ИмяМакета);
	ИмяФайлаВрем = ?(ПустаяСтрока(ИмяФайла), "setup.exe", ИмяФайла);
	
	// НачатьПолучениеКаталогаВременныхФайлов 
	ВременныйКаталог   = КаталогВременныхФайлов();
	ВременныйФайл      = ВременныйКаталог + "Model.zip";
	КаталогИнсталляции = ВременныйКаталог + "Model\";
	
	// Распаковка архива дистрибутива во временный каталог.
	Результат = ПолучитьФайл(СсылкаНаФайл, ВременныйФайл, Ложь);
	
	ФайлАрхива = Новый ЧтениеZipФайла();
	ФайлАрхива.Открыть(ВременныйФайл);
	
	Если ФайлАрхива.Элементы.Найти(ИмяФайлаВрем) <> Неопределено Тогда
		// Распаковка дистрибутива
		ФайлАрхива.ИзвлечьВсе(КаталогИнсталляции);
		ФайлАрхива.Закрыть();
		// Запуск инсталлятора
		Параметры = Новый Структура("КаталогИнсталляции, ВременныйФайл, ОповещениеПриЗавершении", КаталогИнсталляции, ВременныйФайл, ОповещениеПриЗавершении);
		Оповещение = Новый ОписаниеОповещения("НачатьУстановкуДрайвераИзДистрибутиваЗавершение", ЭтотОбъект, Параметры);
		НачатьЗапускПриложения(Оповещение, КаталогИнсталляции + ИмяФайлаВрем, КаталогИнсталляции, Истина);
	Иначе
		ТекстОшибки = НСтр("ru='Ошибка установки драйвера из дистрибутива в макете.
							|Файл ""%Файл%"" в макете не найден.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Файл%", ИмяФайлаВрем);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки); 
		НачатьУдалениеФайлов(, ВременныйФайл);
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьУстановкуДрайвераИзДистрибутиваИзБазыЗавершение(Результат, Параметры) Экспорт
	
	НачатьУдалениеФайлов(, Параметры.ВременныйКаталог + "Model\");
	НачатьУдалениеФайлов(, Параметры.ВременныйКаталог + "Model.zip");
	
	Если Параметры.ОповещениеПриЗавершении <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, Результат = 0);
	КонецЕсли;
	
КонецПроцедуры

// Начать установку драйвера из дистрибутива поставщика из базы.
//
Процедура НачатьУстановкуДрайвераИзДистрибутиваИзБазы(ОповещениеПриЗавершении, ДанныеДрайвера) Экспорт
	
	Результат = Ложь;
	
	ВременныйКаталог   = КаталогВременныхФайлов();
	ИмяФайлаВрем       = ВременныйКаталог + ДанныеДрайвера.ИмяФайлаДрайвера;
	КаталогИнсталляции = ВременныйКаталог + "Model\";
	
	ПолучитьФайл(ПолучитьНавигационнуюСсылку(ДанныеДрайвера.ДрайверОборудования, "ЗагруженныйДрайвер"), ИмяФайлаВрем, Ложь);
	ВременныйФайл = Новый Файл(ИмяФайлаВрем);
	
	Если ВРег(ВременныйФайл.Расширение) = ".ZIP" Тогда
		// Распаковка дистрибутива
		ФайлАрхива = Новый ЧтениеZipФайла();
		ФайлАрхива.Открыть(ВременныйФайл.ПолноеИмя);
		
		ИмяФайлаУстанавливаемый = "";
		Если ФайлАрхива.Элементы.Найти(ВременныйФайл.ИмяБезРасширения  + ".EXE") <> Неопределено Тогда
			ИмяФайлаУстанавливаемый = ВременныйФайл.ИмяБезРасширения  + ".EXE";
		ИначеЕсли ФайлАрхива.Элементы.Найти("setup.exe") <> Неопределено Тогда
			ИмяФайлаУстанавливаемый = "setup.exe";
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ИмяФайлаУстанавливаемый) Тогда
			// Распаковка дистрибутива
			ФайлАрхива.ИзвлечьВсе(КаталогИнсталляции);
			ФайлАрхива.Закрыть();
			// Запуск инсталлятора
			Параметры = Новый Структура("КаталогИнсталляции, ВременныйФайл, ОповещениеПриЗавершении", КаталогИнсталляции, ИмяФайлаВрем, ОповещениеПриЗавершении);
			Оповещение = Новый ОписаниеОповещения("НачатьУстановкуДрайвераИзДистрибутиваЗавершение", ЭтотОбъект, Параметры);
			НачатьЗапускПриложения(Оповещение, КаталогИнсталляции + ИмяФайлаУстанавливаемый, КаталогИнсталляции, Истина);
		Иначе
			ФайлАрхива.Закрыть();
			ТекстОшибки = НСтр("ru='Ошибка установки драйвера из дистрибутива в архиве.
						|Необходимый файл в архиве не найден.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки); 
			НачатьУдалениеФайлов(, ИмяФайлаВрем);
		КонецЕсли;
	Иначе
		// Запуск инсталлятора
		Параметры = Новый Структура("ВременныйФайл, ОповещениеПриЗавершении", ИмяФайлаВрем, ОповещениеПриЗавершении);
		Оповещение = Новый ОписаниеОповещения("НачатьУстановкуДрайвераИзДистрибутиваЗавершение", ЭтотОбъект, Параметры);
		НачатьЗапускПриложения(Оповещение, ВременныйКаталог + ИмяФайлаВрем, ВременныйКаталог, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли

// Отключение объекта драйвера.
//
Процедура ОтключитьОбъектДрайвера(ДанныеДрайвера) Экспорт

	НомерСтрокиМассива = глПодключаемоеОборудование.ПараметрыПодключенияПО.Найти(ДанныеДрайвера.ДрайверОборудования);
	Если НомерСтрокиМассива <> Неопределено Тогда
		глПодключаемоеОборудование.ПараметрыПодключенияПО.Удалить(НомерСтрокиМассива);
	КонецЕсли;
	
КонецПроцедуры

// Получение объекта драйвера
//
Функция ПолучитьОбъектДрайвера(ДанныеДрайвера, ТекстОшибки = Неопределено) Экспорт
	
	ОбъектДрайвера = Неопределено;
	
	Для каждого ДрайверПО Из глПодключаемоеОборудование.ДрайвераПодключаемогоОборудования Цикл
		Если ДрайверПО.Ключ = ДанныеДрайвера.ДрайверОборудования  Тогда
			ОбъектДрайвера = ДрайверПО.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;   
	
	Если ОбъектДрайвера = Неопределено Тогда
		Попытка
			
			ProgID = ДанныеДрайвера.ИдентификаторОбъекта;
			Если ПустаяСтрока(ProgID) Тогда
				ОбъектДрайвера = ""; // Драйвер не требуется
			Иначе
				ProgID1 = ?(Найти(ProgID, "|") > 0, Сред(ProgID, 1, Найти(ProgID, "|")-1), ProgID); 
				ProgID2 = ?(Найти(ProgID, "|") > 0, Сред(ProgID, Найти(ProgID, "|")+1), ProgID); 
				Если ДанныеДрайвера.ПоставляетсяДистрибутивом Тогда
					ПодключитьВнешнююКомпоненту(ProgID1);
				Иначе
					ИмяОбъекта = Сред(ProgID1, Найти(ProgID1, ".") + 1); 
					Префикс = Сред(ProgID1, 1, Найти(ProgID1, ".")); 
					ProgID2 = Префикс + СтрЗаменить(ИмяОбъекта, ".", "_") + "." + ИмяОбъекта;
					Если ДанныеДрайвера.ВСоставеКонфигурации Тогда
						Результат = ПодключитьВнешнююКомпоненту("ОбщийМакет." + ДанныеДрайвера.ИмяМакетаДрайвера, СтрЗаменить(ИмяОбъекта, ".", "_"));
					Иначе
						СсылкаНаДрайвер = ПолучитьНавигационнуюСсылку(ДанныеДрайвера.ДрайверОборудования, "ЗагруженныйДрайвер");
						Результат = ПодключитьВнешнююКомпоненту(СсылкаНаДрайвер, СтрЗаменить(ИмяОбъекта, ".", "_"));
					КонецЕсли;
				КонецЕсли;
				ОбъектДрайвера = Новый (ProgID2);
				
			КонецЕсли;
				
		Исключение
			Инфо = ИнформацияОбОшибке();
			ТекстОшибки = Инфо.Описание;
		КонецПопытки;
		
		Если ОбъектДрайвера <> Неопределено Тогда
			глПодключаемоеОборудование.ДрайвераПодключаемогоОборудования.Вставить(ДанныеДрайвера.ДрайверОборудования, ОбъектДрайвера);
			ОбъектДрайвера = глПодключаемоеОборудование.ДрайвераПодключаемогоОборудования[ДанныеДрайвера.ДрайверОборудования];
		КонецЕсли;
		
	КонецЕсли;   
		
	Возврат ОбъектДрайвера;
	
КонецФункции

Процедура НачатьПолучениеОбъектаДрайвераЗавершение(Подключено, ДополнительныеПараметры) Экспорт
	
	ОбъектДрайвера = Неопределено;
	
	Если Подключено Тогда 
		Попытка
			ОбъектДрайвера = Новый (ДополнительныеПараметры.ProgID);
			Если ОбъектДрайвера <> Неопределено Тогда
				глПодключаемоеОборудование.ДрайвераПодключаемогоОборудования.Вставить(ДополнительныеПараметры.ДрайверОборудования, ОбъектДрайвера);
				ОбъектДрайвера = глПодключаемоеОборудование.ДрайвераПодключаемогоОборудования[ДополнительныеПараметры.ДрайверОборудования];
			КонецЕсли;
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, ОбъектДрайвера);
			Возврат;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Неопределено);
	
КонецПроцедуры

// Начать получение объекта драйвера.
//
Процедура НачатьПолучениеОбъектаДрайвера(ОповещениеПриЗавершении, ДанныеДрайвера) Экспорт
	
	ОбъектДрайвера = Неопределено;
	
	Для каждого ДрайверПО Из глПодключаемоеОборудование.ДрайвераПодключаемогоОборудования Цикл
		Если ДрайверПО.Ключ = ДанныеДрайвера.ДрайверОборудования  Тогда
			ОбъектДрайвера = ДрайверПО.Значение;
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, ОбъектДрайвера);
			Возврат;
		КонецЕсли;
	КонецЦикла;   
	
	Если ОбъектДрайвера = Неопределено Тогда
			ProgID = ДанныеДрайвера.ИдентификаторОбъекта;
			Если ПустаяСтрока(ProgID) Тогда
				ОбъектДрайвера = ""; // Драйвер не требуется
				ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, ОбъектДрайвера);
			Иначе
				ProgID1 = ?(Найти(ProgID, "|") > 0, Сред(ProgID, 1, Найти(ProgID, "|")-1), ProgID); 
				ProgID2 = ?(Найти(ProgID, "|") > 0, Сред(ProgID, Найти(ProgID, "|")+1), ProgID); 
				
				Если ДанныеДрайвера.ПоставляетсяДистрибутивом Тогда
					Параметры = Новый Структура("ProgID, ОповещениеПриЗавершении, ДрайверОборудования", ProgID2, ОповещениеПриЗавершении, ДанныеДрайвера.ДрайверОборудования);
					Оповещение = Новый ОписаниеОповещения("НачатьПолучениеОбъектаДрайвераЗавершение", ЭтотОбъект, Параметры);
					НачатьПодключениеВнешнейКомпоненты(Оповещение, ProgID1);
				Иначе
					ИмяОбъекта = Сред(ProgID1, Найти(ProgID1, ".") + 1); 
					Префикс = Сред(ProgID1, 1, Найти(ProgID1, ".")); 
					ProgID2 = Префикс + СтрЗаменить(ИмяОбъекта, ".", "_") + "." + ИмяОбъекта;
					
					Параметры = Новый Структура("ProgID, ОповещениеПриЗавершении, ДрайверОборудования", ProgID2, ОповещениеПриЗавершении, ДанныеДрайвера.ДрайверОборудования);
					Оповещение = Новый ОписаниеОповещения("НачатьПолучениеОбъектаДрайвераЗавершение", ЭтотОбъект, Параметры);
					Если ДанныеДрайвера.ВСоставеКонфигурации Тогда
						НачатьПодключениеВнешнейКомпоненты(Оповещение, "ОбщийМакет." + ДанныеДрайвера.ИмяМакетаДрайвера, СтрЗаменить(ИмяОбъекта, ".", "_"));
					Иначе
						СсылкаНаДрайвер = ПолучитьНавигационнуюСсылку(ДанныеДрайвера.ДрайверОборудования, "ЗагруженныйДрайвер");
						НачатьПодключениеВнешнейКомпоненты(Оповещение, СсылкаНаДрайвер, СтрЗаменить(ИмяОбъекта, ".", "_"));
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
	КонецЕсли;   
	
КонецПроцедуры

// Установить драйвер оборудования.
//
Процедура УстановитьДрайвер(Идентификатор, ОповещениеИзДистрибутиваПриЗавершении = Неопределено, ОповещениеИзАрхиваПриЗавершении = Неопределено) Экспорт
	
	ДанныеДрайвера = МенеджерОборудованияВызовСервера.ПолучитьДанныеДрайвера(Идентификатор);
	
	Попытка  
		Если ДанныеДрайвера.ВСоставеКонфигурации Тогда
			
			Если ДанныеДрайвера.ПоставляетсяДистрибутивом Тогда
			#Если ВебКлиент Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Данный драйвер не поддерживает работу в веб-клиенте.'")); 
			#Иначе
				Если МенеджерОборудованияКлиентПовтИсп.ЭтоLinuxКлиент() Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Данный драйвер не может быть установлен и использован в среде Linux.'")); 
					Возврат;
				КонецЕсли;
				НачатьУстановкуДрайвераИзДистрибутиваВМакете(ОповещениеИзДистрибутиваПриЗавершении, ДанныеДрайвера.ИмяМакетаДрайвера, ДанныеДрайвера.ИмяФайлаДрайвера);
			#КонецЕсли
			Иначе
				НачатьУстановкуВнешнейКомпоненты(ОповещениеИзАрхиваПриЗавершении, "ОбщийМакет." + ДанныеДрайвера.ИмяМакетаДрайвера);
			КонецЕсли;
			
		Иначе
			
			Если ДанныеДрайвера.ПоставляетсяДистрибутивом Тогда
			#Если ВебКлиент Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Данный драйвер не поддерживает работу в веб-клиенте.'")); 
			#Иначе
				Если МенеджерОборудованияКлиентПовтИсп.ЭтоLinuxКлиент() Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Данный драйвер не может быть установлен и использован в среде Linux.'")); 
					Возврат;
				КонецЕсли;
				НачатьУстановкуДрайвераИзДистрибутиваИзБазы(ОповещениеИзДистрибутиваПриЗавершении, ДанныеДрайвера);
			#КонецЕсли
			Иначе
				СсылкаНаДрайвер = ПолучитьНавигационнуюСсылку(ДанныеДрайвера.ДрайверОборудования, "ЗагруженныйДрайвер");
				НачатьУстановкуВнешнейКомпоненты(ОповещениеИзАрхиваПриЗавершении, СсылкаНаДрайвер);
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Произошла ошибка при установке драйвера.'")); 
	КонецПопытки;  
		
КонецПроцедуры

#КонецОбласти