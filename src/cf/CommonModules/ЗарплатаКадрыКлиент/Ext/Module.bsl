
#Область ПрограммныйИнтерфейс

// Выполняет необходимые проверки и запросы пользователю перед записью организации.
// При ответе пользователя о необходимости обработки вызывает сервер.
// Параметры:
//	ДанныеОрганизации - данные формы, соответствующие Организации.
//	Форма - форма справочника
//	Отказ - признак отказа от записи.
//	ОповещениеЗавершения - описание оповещения, выполняемого после завершения процедуры.
Процедура ФормаОрганизацииПередЗаписью(ДанныеОрганизации, Форма, Отказ, ОповещениеЗавершения = Неопределено, ЗакрытьПослеЗаписи = Истина) Экспорт
	
	Перем НеобходимостьОбработки;
	
	ТекущееСостояниеОрганизации = Новый Структура("Ссылка,ПрименятьРайонныйКоэффициент,ПрименятьСевернуюНадбавку");
	
	ТекущееСостояниеОрганизации.Ссылка = ДанныеОрганизации.Ссылка;
	ТекущееСостояниеОрганизации.ПрименятьРайонныйКоэффициент = ДанныеОрганизации.ПрименятьРайонныйКоэффициент;
	ТекущееСостояниеОрганизации.ПрименятьСевернуюНадбавку = ДанныеОрганизации.ПрименятьСевернуюНадбавку;
	
	ЗарплатаКадрыВызовСервера.НеобходимостьОбработкиДанныхПриЗаписиОрганизации(ТекущееСостояниеОрганизации, НеобходимостьОбработки);
	
	ДополнительныеОбработки = Новый Массив;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДанныеОрганизации", ДанныеОрганизации);
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("Отказ", Отказ);
	ДополнительныеПараметры.Вставить("ЗакрытьПослеЗаписи", ЗакрытьПослеЗаписи);
	ДополнительныеПараметры.Вставить("НеобходимостьОбработки", НеобходимостьОбработки);
	ДополнительныеПараметры.Вставить("ДополнительныеОбработки", ДополнительныеОбработки);
	ДополнительныеПараметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	
	Если НеобходимостьОбработки.ОбработатьСН Тогда
		// Запрос про северную надбавку.
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Вы отменили применение северных надбавок для организации ""%1"". 
						|Размер северной надбавки будет удален для всех сотрудников организации. 
						|Предыдущие результаты расчетов сохранятся, но в дальнейшем начисление северных надбавок выполняться не будет.
						|Удалить северные надбавки?'"), ДанныеОрганизации.Наименование);
		Оповещение = Новый ОписаниеОповещения("ФормаОрганизацииПередЗаписьюОбработатьСНЗавершение", ЭтотОбъект, ДополнительныеПараметры);				
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.Отмена);
	Иначе 
		ФормаОрганизацииПередЗаписьюОбработатьРК(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет действия в форме Организации, связанные с зарплатно-кадровой спецификой.
// Вызов процедуры необходимо выполнять в обработчике ОбработкаОповещения
// формы организации.
Процедура ОрганизацииФормаЭлементаОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	
	Если ИмяСобытия = "ОтредактированаИстория" И (Параметр.ИмяРегистра = "ИсторияРегистрацийВОрганеПФР" Или Параметр.ИмяРегистра = "ТерриториальныеУсловияПФР") Тогда
		РедактированиеПериодическихСведенийКлиент.ОбработкаОповещения(Форма, Форма.ОрганизацияСсылка, ИмяСобытия, Параметр, Источник);
		Если Параметр.ИмяРегистра = "ИсторияРегистрацийВОрганеПФР" Тогда 
			Форма.ИсторияРегистрацийВОрганеПФРПериодСтрокой = ЗарплатаКадрыКлиентСервер.ПолучитьПредставлениеКвартала(Форма.ИсторияРегистрацийВОрганеПФР.Период);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет действия в форме Организации, связанные с зарплатно-кадровой спецификой.
// Вызов процедуры необходимо выполнять в обработчике ИсторияРегистрацийВОрганеПФРПериодПриИзменении
// формы организации.
Процедура ОрганизацииФормаЭлементаИсторияРегистрацийВОрганеПФРПериодПриИзменении(Форма) Экспорт
	
	ВводМесяцаПриИзменении(Форма, "ИсторияРегистрацийВОрганеПФР.Период", "ИсторияРегистрацийВОрганеПФРПериодСтрокой", Форма.Модифицированность);
	Если Форма.ИсторияРегистрацийВОрганеПФР.Период <> НачалоКвартала(Форма.ИсторияРегистрацийВОрганеПФР.Период) Тогда
		Форма.ИсторияРегистрацийВОрганеПФР.Период = НачалоКвартала(Форма.ИсторияРегистрацийВОрганеПФР.Период);
		Форма.ИсторияРегистрацийВОрганеПФРПериодСтрокой = ЗарплатаКадрыКлиентСервер.ПолучитьПредставлениеКвартала(Форма.ИсторияРегистрацийВОрганеПФР.Период);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет действия в форме Организации, связанные с зарплатно-кадровой спецификой.
// Вызов процедуры необходимо выполнять в обработчике ИсторияРегистрацийВОрганеПФРПериодНачалоВыбора
// формы организации.
Процедура ОрганизацииФормаЭлементаИсторияРегистрацийВОрганеПФРПериодНачалоВыбора(Форма) Экспорт
	
	ПутьРеквизита = "ИсторияРегистрацийВОрганеПФР.Период";
	ПутьРеквизитаПредставления = "ИсторияРегистрацийВОрганеПФРПериодСтрокой";
	
	Значение = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьРеквизита);
	
	ДополнительныеПараметры = Новый Структура("Форма, ПутьРеквизита, ПутьРеквизитаПредставления", Форма, ПутьРеквизита, ПутьРеквизитаПредставления);
	Оповещение = Новый ОписаниеОповещения("ОрганизацииФормаЭлементаИсторияРегистрацийВОрганеПФРПериодНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ВыборПериода",
		Новый Структура("Значение,РежимВыбораПериода,ЗапрашиватьРежимВыбораПериодаУВладельца", Значение, "Квартал", Ложь),
		Форма, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Продолжение процедуры ОрганизацииФормаЭлементаИсторияРегистрацийВОрганеПФРПериодНачалоВыбора.
//
Процедура ОрганизацииФормаЭлементаИсторияРегистрацийВОрганеПФРПериодНачалоВыбораЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	ПутьРеквизита = ДополнительныеПараметры.ПутьРеквизита;
	ПутьРеквизитаПредставления = ДополнительныеПараметры.ПутьРеквизитаПредставления;
	
	ВыбранноеЗначение = НачалоКвартала(ВыбранноеЗначение);
	Значение = ВыбранноеЗначение;
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, ПутьРеквизита, Значение);
	Представление = ЗарплатаКадрыКлиентСервер.ПолучитьПредставлениеКвартала(Значение);
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, ПутьРеквизитаПредставления, Представление);
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

// Выполняет действия в форме Организации, связанные с зарплатно-кадровой спецификой.
// Вызов процедуры необходимо выполнять в обработчике ИсторияРегистрацийВОрганеПФРПериодРегулирование
// формы организации.
Процедура ОрганизацииФормаЭлементаИсторияРегистрацийВОрганеПФРПериодРегулирование(Форма, Направление) Экспорт
	
	ВводМесяцаРегулирование(Форма, "ИсторияРегистрацийВОрганеПФР.Период", "ИсторияРегистрацийВОрганеПФРПериодСтрокой", Направление * 3, Форма.Модифицированность);
	Форма.ИсторияРегистрацийВОрганеПФРПериодСтрокой = ЗарплатаКадрыКлиентСервер.ПолучитьПредставлениеКвартала(Форма.ИсторияРегистрацийВОрганеПФР.Период);
	
КонецПроцедуры

// Открывает форму подготовки квартальной отчетности.
Процедура ПерейтиВРабочееМестоПодготовкиКвартальнойОтчетностиПФР(Организация, ОтчетныйПериод) Экспорт
	ПерсонифицированныйУчетКлиент.ПерейтиВРабочееМестоПодготовкиКвартальнойОтчетностиПФР(Организация, ОтчетныйПериод);	
КонецПроцедуры

// Процедура реализует печать объектов, отображаемых на закладке Отчеты и Уведомления формы Отчетность.
// Параметры - (см. РегламентированнаяОтчетностьКлиентПереопределяемый.Печать) 
//	 
Процедура ПечатьДокументаОтчетности(Ссылка, ИмяМакетаДляПечати, СтандартнаяОбработка) Экспорт
	ЗарплатаКадрыКлиентВнутренний.ПечатьДокументаОтчетности(Ссылка, ИмяМакетаДляПечати, СтандартнаяОбработка);		
КонецПроцедуры	

// Процедура реализует печать объектов, отображаемых на закладке Отчеты и Уведомления формы Отчетность.
// Параметры - (см. РегламентированнаяОтчетностьКлиентПереопределяемый.Выгрузить) 
//	 
Процедура ВыгрузитьДокументОтчетности(Ссылка) Экспорт
	ЗарплатаКадрыКлиентВнутренний.ВыгрузитьДокументОтчетности(Ссылка);	
КонецПроцедуры	

// Процедура реализует печать объектов, отображаемых на закладке Отчеты и Уведомления формы Отчетность.
// Параметры - (см. РегламентированнаяОтчетностьКлиентПереопределяемый.СоздатьНовыйОбъект) 
//	 
Процедура СоздатьНовыйДокументОтчетности(Организация, Тип, СтандартнаяОбработка) Экспорт
	ЗарплатаКадрыКлиентВнутренний.СоздатьНовыйДокументОтчетности(Организация, Тип, СтандартнаяОбработка);	
КонецПроцедуры	

// Открывает в качестве расшифровки переданной ячейки предварительно подготовленный вариант отчета.
// Параметры:
//	ИДОтчета - Строка - идентификатор отчета (совпадает с именем объекта метаданных).
// 	ИДРедакцииОтчета - Строка - идентификатор редакции формы отчета (совпадает с именем формы объекта метаданных).
//  ИДИменПоказателей - Массив - массив идентификаторов имен показателей, по которым формируется расшифровка.
//  ПараметрыОтчета - Структура - структура параметров отчета, необходимых для формирования расшифровки.
// 
Процедура ОткрытьРасшифровкуРегламентированногоОтчета(ИДОтчета, ИДРедакцииОтчета, ИДИменПоказателей, ПараметрыОтчета) Экспорт
	ЗарплатаКадрыКлиентВнутренний.ОткрытьРасшифровкуРегламентированногоОтчета(ИДОтчета, ИДРедакцииОтчета, ИДИменПоказателей, ПараметрыОтчета);
КонецПроцедуры

// Запускает фоновое задание, восстанавливающее начальные значения законодательных классификаторов.
//
// Параметры:
//		Форма - УправляемаяФорма, в которой расположена команда вызывающая команда.
//
Процедура ВосстановитьНачальныеЗначения(Форма) Экспорт
	
	ДополнительныеСвойства = Новый Структура("Форма,ИменаОбъектовМетаданных", Форма, "");
	Оповещение = Новый ОписаниеОповещения("ВосстановитьНачальныеЗначенияЗавершение", ЭтотОбъект, ДополнительныеСвойства);
	
	ТекстВопроса = НСтр("ru='При восстановлении начальных значений, в справочниках будет произведен поиск и пометка на удаление
		|задвоенных элементов, замена ссылок помеченных на удаление элементов, создание недостающих элементов, выполнена очистка
		|наборов записей регистров сведений и произведено заполнение регистров заново.
		|
		|Восстановить начальные значения?'");
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

// Вызывается при нажатии на гиперссылку или двойном щелчке на ячейке 
// табличного документа с описанием изменений системы.
//
// Параметры:
//   Область - ОбластьЯчеекТабличногоДокумента - область документа, на 
//             которой произошло нажатие.
//
// См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриНажатииНаГиперссылкуВДокументеОписанияОбновлений(Знач Область) Экспорт
	
	Если Область.Имя = "_АктуализироватьАдресныйКлассификатор" Тогда
		ОткрытьФорму("РегистрСведений.АдресныеОбъекты.Форма.АктуализацияУстаревшегоКлассификатора");
	КонецЕсли;

КонецПроцедуры


// Обработчик, вызываемый при начале работы системы.
//
// Параметры:
//		Параметры - описание см ОбщегоНазначенияКлиентПереопределяемый.ПриНачалеРаботыСистемы
//
Процедура ПриНачалеРаботыСистемы(Параметры) Экспорт
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПереносДанныхБухгалтерия3Зарплата3") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("ПереносДанныхБухгалтерия3Зарплата3Клиент");
		Модуль.ПриНачалеРаботыСистемы(Параметры);
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Подключает обработчик ожидания перед запуском обработчика события (активизация строки списка, запуск расчета и др.).
//
// Параметры:
//		Форма
//		ИмяОбработчикаОжидания
//		ФлагНеобходимостиОбработкиСобытия - Булево, используется, когда форме нужно выполнить какие то действия
//					в обработчике перед записью или при активизации другой строки списка.
//
Процедура ПодключитьОбработчикОжиданияОбработкиСобытия(Форма, ИмяОбработчикаОжидания, ФлагНеобходимостиОбработкиСобытия = Неопределено) Экспорт
	
	ПериодОжидания = ПериодОжиданияЗапускаОбработчикаСобытия();
	Если ПериодОжидания > 0 Тогда
		Форма.ПодключитьОбработчикОжидания(ИмяОбработчикаОжидания, ПериодОжидания, Истина);
	КонецЕсли; 
	
	ФлагНеобходимостиОбработкиСобытия = Истина;
		
КонецПроцедуры

// Проверяет заполнение реквизита "Организация" у переданного объекта.
// 
// Параметры:
//	ПроверяемыйОбъект	- проверяемое, любой объект, допускающий доступ к полям по имени
//	                      и имеющий свойство Организация.
//								
//	Возвращаемое значение:
//		Булево. Истина - организация заполнена, Ложь - в противном случае. 
//			
Функция ОрганизацияЗаполнена(ПроверяемыйОбъект) Экспорт
	
	ПравилаПроверки = Новый Структура("Организация");
	
	ОрганизацияЗаполнена =  ЗарплатаКадрыКлиентСервер.СвойстваЗаполнены(ПроверяемыйОбъект, ПравилаПроверки, Ложь);
	
	Если Не ОрганизацияЗаполнена Тогда
		ПоказатьПредупреждение(, НСтр("ru='Для заполнения документа необходимо выбрать организацию.'"), , НСтр("ru = 'Ошибка заполнения'"));
	КонецЕсли;
	
	Возврат ОрганизацияЗаполнена;
	
КонецФункции

// Обработчики событий поля ввода.

Процедура ВводМесяцаПриИзменении(РедактируемыйОбъект, ПутьРеквизита, ПутьРеквизитаПредставления, Модифицированность = Ложь) Экспорт
	
	ЗначениеПредставления = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления);
	Значение              = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита);
	
	ДатаКакМесяцПодобратьДатуПоТексту(ЗначениеПредставления, Значение);
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления, ЗарплатаКадрыКлиентСервер.ПолучитьПредставлениеМесяца(Значение));
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита, Значение);
	
	Модифицированность = Истина;
	
КонецПроцедуры 

Процедура ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Если Не ПустаяСтрока(Текст) Тогда
		ДанныеВыбора = ДатаКакМесяцПодобратьДатуПоТексту(Текст);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Если Текст <> "" Тогда
		ДанныеВыбора = ДатаКакМесяцПодобратьДатуПоТексту(Текст);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВводМесяцаНачалоВыбора(Форма, РедактируемыйОбъект, ПутьРеквизита, ПутьРеквизитаПредставления, ИзменитьМодифицированность = Истина, ОповещениеЗавершения = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("РедактируемыйОбъект", РедактируемыйОбъект);
	ДополнительныеПараметры.Вставить("ПутьРеквизита", ПутьРеквизита);
	ДополнительныеПараметры.Вставить("ПутьРеквизитаПредставления", ПутьРеквизитаПредставления);
	ДополнительныеПараметры.Вставить("ИзменитьМодифицированность", ИзменитьМодифицированность);
	ДополнительныеПараметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	
	Значение = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита);
	
	Оповещение = Новый ОписаниеОповещения("ВводМесяцаНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ВыборПериода", 
		Новый Структура("Значение,РежимВыбораПериода,ЗапрашиватьРежимВыбораПериодаУВладельца", Значение, "Месяц", Ложь),
		Форма, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ВводМесяцаНачалоВыбораЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт

	Форма = ДополнительныеПараметры.Форма;
	РедактируемыйОбъект = ДополнительныеПараметры.РедактируемыйОбъект;
	ПутьРеквизита = ДополнительныеПараметры.ПутьРеквизита;
	ПутьРеквизитаПредставления = ДополнительныеПараметры.ПутьРеквизитаПредставления;
	ИзменитьМодифицированность = ДополнительныеПараметры.ИзменитьМодифицированность;
	ОповещениеЗавершения = ДополнительныеПараметры.ОповещениеЗавершения;
	
	Если ВыбранноеЗначение = Неопределено Тогда
		
		Если ОповещениеЗавершения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Ложь);
		КонецЕсли;
		
	Иначе
		
		Значение = ВыбранноеЗначение;
		
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита, Значение);
		Представление = ЗарплатаКадрыКлиентСервер.ПолучитьПредставлениеМесяца(Значение);
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления, Представление);
		
		Если ИзменитьМодифицированность Тогда 
			Форма.Модифицированность = Истина;
		КонецЕсли;
		
		Если ОповещениеЗавершения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОповещениеЗавершения = Неопределено Тогда
		Форма.ОбновитьОтображениеДанных();
	КонецЕсли;
	
КонецПроцедуры

Процедура ВводМесяцаРегулирование(РедактируемыйОбъект, ПутьРеквизита, ПутьРеквизитаПредставления, Направление, Модифицированность = Ложь) Экспорт
	
	Значение = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита);
	Значение = ДобавитьМесяц(Значение, Направление);
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита, Значение);
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления, ЗарплатаКадрыКлиентСервер.ПолучитьПредставлениеМесяца(Значение));
	
	Модифицированность = Истина;
 	
КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////

// Обработчик события, связанного с редактированием места рождения.
// Событие НачалоВыбора в поля место рождения в таблице.
Процедура МестоРожденияВТаблицеНачалоВыбора(МестоРождения, МестоРожденияПредставление, ОповещениеЗавершения = Неопределено) Экспорт	
	
	ДополнительныеПараметры = Новый Структура("ОповещениеЗавершения", ОповещениеЗавершения);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Представление", МестоРождения);
	
	Оповещение = Новый ОписаниеОповещения("МестоРожденияВТаблицеНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ВводМестаРождения", ПараметрыФормы, , , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

Процедура МестоРожденияВТаблицеНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДанныеМестаРождения = Неопределено;
	
	Если Результат <> Неопределено Тогда
		ДанныеМестаРождения = Новый Структура;
		ДанныеМестаРождения.Вставить("МестоРождения", Результат);
		ДанныеМестаРождения.Вставить("МестоРожденияПредставление", ПерсонифицированныйУчетКлиентСервер.ПредставлениеМестаРождения(Результат));
	КонецЕсли;	
	
	Если ДополнительныеПараметры.ОповещениеЗавершения <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершения, ДанныеМестаРождения);
	КонецЕсли;
	
КонецПроцедуры

// Редактирование данных физического лица.
Процедура ОткрытьФормуФизическогоЛицаДляРедактирования(ФизическоеЛицо, ИмяЭлемента) Экспорт 
	СтруктураСоответствияПолей = ПолучитьСоответствиеПолейФормыДокументаПолямФормыФизическогоЛица();
	Параметры = Новый Структура("Ключ, ТекущийЭлемент", ФизическоеЛицо, СтруктураСоответствияПолей[ИмяЭлемента]);
	
	ОткрытьФорму("Справочник.ФизическиеЛица.ФормаОбъекта", Параметры);
КонецПроцедуры	

#Область КлючевыеРеквизитыЗаполненияФормы

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Механизм КлючевыеРеквизитыЗаполненияФормы
// Процедуры и функции для предупреждения об очистке таблиц формы при редактировании "ключевых" реквизитов.
//
// Для работы механизма в форме должны быть определены экспортные процедуры: 
// 		КлючевыеРеквизитыЗаполненияФормыТаблицыОчищаемыеПриИзменении()
// 		КлючевыеРеквизитыЗаполненияФормыОписаниеКлючевыхРеквизитов().
//

// Процедура очищает таблицы формы подключенные к механизму.
Процедура КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(Форма) Экспорт
	МассивИменТаблиц = Форма.КлючевыеРеквизитыЗаполненияФормыТаблицыОчищаемыеПриИзменении();
	Для каждого ИмяТаблицы Из МассивИменТаблиц Цикл
		Таблица  = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ИмяТаблицы);
		Таблица.Очистить();
	КонецЦикла; 
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(Форма, ОтображениеПредупрежденияПриРедактировании.НеОтображать);
КонецПроцедуры

#КонецОбласти

#Область УправлениеОтборамиВФормахСДинамическимСписком

Процедура ПараметрКритерияОтбораНаФормеСДинамическимСпискомПриИзменении(Форма, Элемент) Экспорт
	
	НайденныеСтроки = Форма.ПараметрыКритерияОтбора.НайтиСтроки(Новый Структура("ИмяЭлементаФормыПараметра", Элемент.Имя));
	Если НайденныеСтроки.Количество() > 0 Тогда
		// Изменение параметра, установим использование
		СтрокаПараметра = НайденныеСтроки[0];
		Форма[СтрокаПараметра.ИмяРеквизитаФормыПараметраИспользование] = Истина;
	Иначе
		НайденныеСтроки = Форма.ПараметрыКритерияОтбора.НайтиСтроки(Новый Структура("ИмяЭлементаФормыПараметраИспользование", Элемент.Имя));
		Если НайденныеСтроки.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		// Изменение использования параметра
		СтрокаПараметра = НайденныеСтроки[0];
	КонецЕсли;
	
	Список = Форма[Форма.НаименованиеРеквизитаФормыДинамическийСписок];
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Список,
		СтрокаПараметра.ИмяПараметра,
		Форма[СтрокаПараметра.ИмяРеквизитаФормыПараметра],
		Форма[СтрокаПараметра.ИмяРеквизитаФормыПараметраИспользование]);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВосстановитьНачальныеЗначенияСправочника(Форма, ИменаОбъектовМетаданных) Экспорт
	
	ДополнительныеСвойства = Новый Структура("Форма,ИменаОбъектовМетаданных", Форма, ИменаОбъектовМетаданных);
	Оповещение = Новый ОписаниеОповещения("ВосстановитьНачальныеЗначенияЗавершение", ЭтотОбъект, ДополнительныеСвойства);
	
	ТекстВопроса = НСтр("ru='При восстановлении начальных значений будет произведен поиск и пометка на удаление
		|задвоенных элементов, замена ссылок помеченных на удаление элементов, создание недостающих элементов.
		|
		|Восстановить начальные значения?'");
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

Процедура ВосстановитьНачальныеЗначенияРегистраСведений(Форма, ИменаОбъектовМетаданных) Экспорт
	
	ДополнительныеСвойства = Новый Структура("Форма,ИменаОбъектовМетаданных", Форма, ИменаОбъектовМетаданных);
	Оповещение = Новый ОписаниеОповещения("ВосстановитьНачальныеЗначенияЗавершение", ЭтотОбъект, ДополнительныеСвойства);
	
	ТекстВопроса = НСтр("ru='При восстановлении начальных значений будет выполнена очистка записей
		|и произведено заполнение заново.
		|
		|Восстановить начальные значения?'");
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

Процедура ВосстановитьНачальныеЗначенияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли; 
	
	Форма 					= ДополнительныеПараметры.Форма;
	ИменаОбъектовМетаданных = ДополнительныеПараметры.ИменаОбъектовМетаданных;
	
	Результат = ЗарплатаКадрыВызовСервера.ВосстановитьНачальныеЗначения(ИменаОбъектовМетаданных, Форма.УникальныйИдентификатор);
	Если НЕ Результат.ЗаданиеВыполнено Тогда
		
		Форма.ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(Форма.ПараметрыОбработчикаОжидания);
		ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(Форма, Форма.ИдентификаторЗадания);
		ТекущийИнтервал = Форма.ПараметрыОбработчикаОжидания.ТекущийИнтервал;
		
	Иначе
		ТекущийИнтервал = 0.1;
	КонецЕсли;
	Форма.ПодключитьОбработчикОжидания("Подключаемый_ОжиданиеВыполненияДлительнойОперации", ТекущийИнтервал, Истина);
	
КонецПроцедуры

Функция ВосстановлениеНачальныхЗначенийВыполнено(Форма) Экспорт
	
	ВосстановлениеВыполнено = Ложь;
	
	Попытка
		
		ФормаДлительнойОперации = ДлительныеОперацииКлиентПовтИсп.ФормаДлительнойОперации();
		
		Если ФормаДлительнойОперации.Открыта() 
			И ФормаДлительнойОперации.ИдентификаторЗадания = Форма.ИдентификаторЗадания Тогда
			
			Если ЗарплатаКадрыВызовСервера.ЗаданиеВыполнено(Форма.ИдентификаторЗадания) Тогда
				
				ВосстановлениеВыполнено = Истина;
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
				
			Иначе
				
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(Форма.ПараметрыОбработчикаОжидания);
				
				Форма.ПодключитьОбработчикОжидания(
					"Подключаемый_ОжиданиеВыполненияДлительнойОперации",
					Форма.ПараметрыОбработчикаОжидания.ТекущийИнтервал,
					Истина);
					
			КонецЕсли;
				
		Иначе
			ВосстановлениеВыполнено = Истина;
		КонецЕсли;
		
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ВосстановлениеВыполнено;
	
КонецФункции

// Возвращает период ожидания формы, перед запуском обработчиков событий.
//
Функция ПериодОжиданияЗапускаОбработчикаСобытия()
	
	ПериодОжидания = 0;
	Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
		ПериодОжидания = 1;
	Иначе
		ПериодОжидания = 0.1;
	КонецЕсли;
	
	Возврат ПериодОжидания;
	
КонецФункции

Функция ПолучитьСоответствиеПолейФормыДокументаПолямФормыФизическогоЛица()
	СтруктураСоответствия = Новый Структура();
	СтруктураСоответствия.Вставить("Фамилия", "Наименование");
	СтруктураСоответствия.Вставить("Имя", "Наименование");
	СтруктураСоответствия.Вставить("Отчество", "Наименование");
	СтруктураСоответствия.Вставить("Пол", "ФизлицоПол");
	СтруктураСоответствия.Вставить("ДатаРождения", "ФизлицоДатаРождения");
	СтруктураСоответствия.Вставить("МестоРожденияПредставление", "ФизическоеЛицоМестоРождения");
	СтруктураСоответствия.Вставить("Гражданство", "ГражданствоФизическихЛицСтрана");
	СтруктураСоответствия.Вставить("АдресФактическийПредставление", "ГруппаКонтактнаяИнформация");
	СтруктураСоответствия.Вставить("АдресРегистрацииПредставление", "ГруппаКонтактнаяИнформация");
	СтруктураСоответствия.Вставить("Телефоны", "ГруппаКонтактнаяИнформация");	
	СтруктураСоответствия.Вставить("ДокументУдостоверяющийЛичность", "ДокументыФизическихЛицВидДокумента"); 

	Возврат СтруктураСоответствия;
	
КонецФункции	

Процедура ОткрытьФормуРедактированияРегистрацииВНалоговомОргане(Форма) Экспорт
	
	ДополнительныеПараметры = Новый Структура("Форма, ЗаписатьЭлемент", Форма, Истина);
	
	Если Не ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		
		Оповещение = Новый ОписаниеОповещения("ОткрытьФормуРедактированияРегистрацииВНалоговомОрганеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = НСтр("ru='Данные были изменены. Сохранить изменения?'");
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Отмена);
		
	Иначе 
		
		ДополнительныеПараметры.ЗаписатьЭлемент = Ложь;
		ОткрытьФормуРедактированияРегистрацииВНалоговомОрганеЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОткрытьФормуРедактированияРегистрацииВНалоговомОрганеЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	
	Если ДополнительныеПараметры.ЗаписатьЭлемент И Не Форма.Записать() Тогда
		Возврат;
	КонецЕсли; 
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("СтруктурнаяЕдиница", Форма.Объект.Ссылка);
	ПараметрыОткрытия.Вставить("ТолькоПросмотр", Форма.ТолькоПросмотр);
	
	ОткрытьФорму("ОбщаяФорма.РедактированиеРегистрацииВНалоговомОргане", ПараметрыОткрытия, Форма);
	
КонецПроцедуры

#Область ФормаОрганизацииПередЗаписью

// Продолжение процедуры ФормаОрганизацииПередЗаписью.
//
Процедура ФормаОрганизацииПередЗаписьюОбработатьСНЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		ДополнительныеПараметры.Отказ = Истина;
		ДополнительныеПараметры.ДанныеОрганизации.ПрименятьСевернуюНадбавку = Истина;
		Возврат;
	Иначе
		// Необходимо удалить северные надбавки.
		ДополнительныеПараметры.ДополнительныеОбработки.Добавить("УдалитьСН");
		ФормаОрганизацииПередЗаписьюОбработатьРК(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ФормаОрганизацииПередЗаписью.
//
Процедура ФормаОрганизацииПередЗаписьюОбработатьРК(ДополнительныеПараметры) 
	
	Если ДополнительныеПараметры.НеобходимостьОбработки.ОбработатьРК Тогда
		// Запрос про районный коэффициент.
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Вы отменили применение районного коэффициента для организации ""%1"". 
						|Размер районного коэффициента будет удален для всех подразделений этой организации. 
						|Предыдущие результаты расчетов сохранятся, но в дальнейшем доплата по районному коэффициенту выполняться не будет.
						|Удалить районные коэффициенты?'"), ДополнительныеПараметры.ДанныеОрганизации.Наименование);
		Оповещение = Новый ОписаниеОповещения("ФормаОрганизацииПередЗаписьюОбработатьРКЗавершение", ЭтотОбъект, ДополнительныеПараметры);				
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.Отмена);
	Иначе 
		ФормаОрганизацииПередЗаписьюОбработатьПФР(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ФормаОрганизацииПередЗаписью.
//
Процедура ФормаОрганизацииПередЗаписьюОбработатьРКЗавершение(Ответ, ДополнительныеПараметры) Экспорт 

	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		ДополнительныеПараметры.Отказ = Истина;
		ДополнительныеПараметры.ДанныеОрганизации.ПрименятьРайонныйКоэффициент = Истина;
		Возврат;
	Иначе
		// Необходимо удалить районные коэффициенты.
		ДополнительныеПараметры.ДополнительныеОбработки.Добавить("УдалитьРК");
		ФормаОрганизацииПередЗаписьюОбработатьПФР(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ФормаОрганизацииПередЗаписью.
//
Процедура ФормаОрганизацииПередЗаписьюОбработатьПФР(ДополнительныеПараметры)
	
	Если ДополнительныеПараметры.ДополнительныеОбработки.Количество() > 0 Тогда
		// По умолчанию - отказ от записи.
		ДополнительныеПараметры.Отказ = Истина;
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("СохранениеИзмененийВЗарплатеОрганизации");
		ЗарплатаКадрыВызовСервера.ОбработкаДанныхПриЗаписиОрганизации(ДополнительныеПараметры.ДанныеОрганизации.Ссылка, ДополнительныеПараметры.ДополнительныеОбработки);
		// Если обработка данных удачно выполнена - запись выполняется.
		ДополнительныеПараметры.Отказ = Ложь;
	КонецЕсли;
	
	ТекстКнопкиДа = НСтр("ru = 'Изменились сведения о регистрации в органе ПФР'");
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'При редактировании Вы изменили сведения о регистрации в органе ПФР. 
		|Если Вы исправили прежние сведения о регистрации (они были ошибочными), нажмите ""Исправлена ошибка"".
		|Если сведения о регистрации изменились с %1, нажмите ""%2""'"), 
		Формат(ДополнительныеПараметры.Форма.ИсторияРегистрацийВОрганеПФР.Период, "ДФ='к ""кв."" ггг ""г.""'"),
		ТекстКнопкиДа);
		
	Оповещение = Новый ОписаниеОповещения("ФормаОрганизацииПередЗаписьюОбработатьПФРЗавершение", ЭтотОбъект, ДополнительныеПараметры);	
	РедактированиеПериодическихСведенийКлиент.ЗапроситьРежимИзмененияРегистра(ДополнительныеПараметры.Форма, "ИсторияРегистрацийВОрганеПФР", ТекстВопроса, ТекстКнопкиДа, ДополнительныеПараметры.Отказ, Оповещение);
	
КонецПроцедуры

// Продолжение процедуры ФормаОрганизацииПередЗаписью.
//
Процедура ФормаОрганизацииПередЗаписьюОбработатьПФРЗавершение(Отказ, ДополнительныеПараметры) Экспорт 

	ДополнительныеПараметры.ДанныеОрганизации.РегистрационныйНомерПФР = ДополнительныеПараметры.Форма.ИсторияРегистрацийВОрганеПФР.РегистрационныйНомерПФР;
	
	Если Отказ Тогда
		ДополнительныеПараметры.Отказ = Истина; 
		Возврат;
	КонецЕсли;
	
	ТекстКнопкиДа = НСтр("ru = 'Изменились сведения о территориальных условиях ПФР'");
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'При редактировании Вы изменили сведения о территориальных условиях ПФР.
		|Если Вы исправили прежние сведения о территориальных условиях (они были ошибочными), нажмите ""Исправлена ошибка"".
		|Если сведения о территориальных условиях ПФР изменились с %1, нажмите ""%2""'"), 
		Формат(ДополнительныеПараметры.Форма.ТерриториальныеУсловияПФР.Период, "ДФ='к ""кв."" ггг ""г.""'"),
		ТекстКнопкиДа);
		
	Оповещение = Новый ОписаниеОповещения("ФормаОрганизацииПередЗаписьюЗавершение", ЭтотОбъект, ДополнительныеПараметры);	
	РедактированиеПериодическихСведенийКлиент.ЗапроситьРежимИзмененияРегистра(ДополнительныеПараметры.Форма,"ТерриториальныеУсловияПФР", ТекстВопроса, ТекстКнопкиДа, ДополнительныеПараметры.Отказ, Оповещение);
	
КонецПроцедуры

// Продолжение процедуры ФормаОрганизацииПередЗаписью.
//
Процедура ФормаОрганизацииПередЗаписьюЗавершение(Отказ, ДополнительныеПараметры) Экспорт 
	
	Если Отказ Тогда
		ДополнительныеПараметры.Отказ = Истина; 
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	
	ПараметрыЗаписи = Новый Структура("ПроверкаПередЗаписьюВыполнена", Истина);
	
	Если ДополнительныеПараметры.ОповещениеЗавершения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершения, ПараметрыЗаписи);
	ИначеЕсли Форма.Записать(ПараметрыЗаписи) И ДополнительныеПараметры.ЗакрытьПослеЗаписи Тогда 
		Форма.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Универсальный механизм "Месяц строкой".

// Подбирает массив номеров месяцев, соответствующих переданной строке
// например, для строки "ма" это будут 3 и 5, для "а" - 4 и 8
// используется в ПодобратьДатуПоТексту.
//
Функция СписокМесяцевПоСтроке(Текст)
	
	СписокМесяцев  = Новый СписокЗначений;
	Месяцы         = Новый Соответствие;
	МесяцыВозврата = Новый Массив;
	
	Для Счетчик = 1 По 12 Цикл
		Представление = Формат(Дата(2000, Счетчик, 1), "ДФ='ММММ'");
		СписокМесяцев.Добавить(Счетчик, Представление);
		Представление = Формат(Дата(2000, Счетчик, 1), "ДФ='МММ'");
		СписокМесяцев.Добавить(Счетчик, Представление);
	КонецЦикла;
	
	Для Каждого ЭлементСписка Из СписокМесяцев Цикл
		Если ВРег(Текст) = ВРег(Лев(ЭлементСписка.Представление, СтрДлина(Текст))) Тогда
			Месяцы[ЭлементСписка.Значение] = 0;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Элемент Из Месяцы Цикл
		МесяцыВозврата.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	Возврат МесяцыВозврата;
	
КонецФункции

Функция ДатаКакМесяцПодобратьДатуПоТексту(Текст, ДатаПоТексту = НеОпределено)
	
	СписокВозврата = Новый СписокЗначений;
	ТекущийГод = Год(ОбщегоНазначенияКлиент.ДатаСеанса());
	
	Если ПустаяСтрока(Текст) Тогда
		ДатаПоТексту = Дата(1, 1, 1);
		Возврат СписокВозврата;
	КонецЕсли;
	
	Если Найти(Текст, ".") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, ".");
	ИначеЕсли Найти(Текст, ",") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, ",");
	ИначеЕсли Найти(Текст, "-") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "-");
	ИначеЕсли Найти(Текст, "/") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "/");
	ИначеЕсли Найти(Текст, "\") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "\");
	Иначе
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, " ");
	КонецЕсли;
	
	Если Подстроки.Количество() = 1 Тогда
		
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Текст) Тогда
			МесяцЧислом = Число(Текст);
			Если МесяцЧислом >= 1 И МесяцЧислом <=12 Тогда
				ДатаПоТексту = Дата(ТекущийГод, МесяцЧислом, 1);
				Если СтрДлина(Текст) = 1 Тогда
					СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='М/гг'"));
				Иначе
					СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММ/гг'"));
				КонецЕсли;
			Иначе
				Возврат СписокВозврата;
			КонецЕсли;                
		Иначе
			СписокМесяцев = СписокМесяцевПоСтроке(Текст);
			Для Каждого Месяц Из СписокМесяцев Цикл
				ДатаПоТексту = Дата(ТекущийГод, Месяц, 1);
				СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММММ гггг'"));
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли Подстроки.Количество() = 2 Тогда
		
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Подстроки[1]) Тогда
			
			Если ПустаяСтрока(Подстроки[1]) Тогда
				ГодЧислом = 0;
				Подстроки[1] = "0";
				ТекстВозврата = Текст + "0";
			Иначе
				ГодЧислом = Число(Подстроки[1]);
				ТекстВозврата = "";
			КонецЕсли;
			
			Если ГодЧислом > 3000 Тогда
				Возврат СписокВозврата;
			КонецЕсли;
			
			Если СтрДлина(Подстроки[1]) <= 1 Тогда
				ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 3) + Подстроки[1]);
			ИначеЕсли СтрДлина(Подстроки[1]) = 2 Тогда
				ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 2) + Подстроки[1]);
			ИначеЕсли СтрДлина(Подстроки[1]) = 3 Тогда
				ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 1) + Подстроки[1]);
			ИначеЕсли СтрДлина(Подстроки[1]) = 4 Тогда
				ГодЧислом = Число(Подстроки[1]);
			КонецЕсли;                    
			
		Иначе
			
			Возврат СписокВозврата;
			
		КонецЕсли;                
		Если ЗначениеЗаполнено(Подстроки[0]) И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Подстроки[0]) Тогда
			
			МесяцЧислом = Число(Подстроки[0]);
			Если МесяцЧислом >= 1 И МесяцЧислом <= 12 Тогда
				ДатаПоТексту = Дата(ГодЧислом, МесяцЧислом, 1);
				СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММММ гггг'"));
			Иначе
				Возврат СписокВозврата;
			КонецЕсли;                
			
		Иначе
			
			СписокМесяцев = СписокМесяцевПоСтроке(Подстроки[0]);
			
			Если СписокМесяцев.Количество() = 1 Тогда
				ДатаПоТексту = Дата(ГодЧислом, СписокМесяцев[0], 1);
				СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММММ гггг'"));
			Иначе
				Для Каждого Месяц Из СписокМесяцев Цикл
					ДатаПоТексту = Дата(ГодЧислом, Месяц, 1);
					СписокВозврата.Добавить(Формат(Дата(ГодЧислом, Месяц, 1), "ДФ='ММММ гггг'"));
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат СписокВозврата;
	
КонецФункции

#КонецОбласти