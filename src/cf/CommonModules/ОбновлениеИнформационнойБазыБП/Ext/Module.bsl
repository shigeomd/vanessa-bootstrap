////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы (БухгалтерияПредприятия).
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Сведения о библиотеке (или конфигурации).

// См. описание в общем модуле ОбновлениеИнформационнойБазыБСП.
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя = Метаданные.Имя;
	Описание.Версия = Метаданные.Версия;
	
	Описание.ТребуемыеПодсистемы.Добавить("СтандартныеПодсистемы");
	Описание.ТребуемыеПодсистемы.Добавить("БиблиотекаТехнологииСервиса");
	Описание.ТребуемыеПодсистемы.Добавить("РегламентированнаяОтчетность");
	Описание.ТребуемыеПодсистемы.Добавить("БиблиотекаЭлектронныхДокументов");
	Описание.ТребуемыеПодсистемы.Добавить("ЗарплатаКадрыБазовая");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.

// См. описание в общем модуле ОбновлениеИнформационнойБазыБСП.
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	// Подключаются процедуры-обработчики обновления конфигурации
	// Обработчики обновления обменов данными
	УчетОбособленныхПодразделений.ПриДобавленииОбработчиковОбновления(Обработчики);
	
	// Обновление ставки рефинансирования запускается по мере необходимости
	// указывается версия, в которой следует отработать изменение ставки
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.25.5";
	Обработчик.Процедура = "РегистрыСведений.СтавкаРефинансированияЦБ.ОбновитьСтавкиРефинансирования";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ПервыйЗапуск";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "0.0.0.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.УстановитьВестиУчетПоПодразделениям";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "0.0.0.2";
	Обработчик.Процедура = "ОбновлениеСПредыдущейРедакции.ЗаполнениеРеквизитовОрганизацииПриОбновленииС20";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.УстановитьДатуТекущейВерсии";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ОбновитьОрганизацииКонтрагентыЮрФизЛицо";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ПерезаписатьУчетнуюПолитику";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.10";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.РазделитьЗадолженностьВДокументах";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.10";
	Обработчик.Процедура = "ОбновлениеСПредыдущейРедакции.УстановитьКонстантыПриПереходеС20";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.10";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.УстановитьКорректировкуДляДокументовПоЗП";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.10";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.УстановитьКорректировкуДляДокументовПоНалогамСФОТ";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.10";
	Обработчик.Процедура = "УчетДенежныхСредствБП.ОчиститьБанкиОтНеиспользуемыхЭлементов";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.10";
	Обработчик.Процедура = "УчетДенежныхСредствБП.УстановитьВДокументахСтатьюДДСИзРасшифровкаПлатежа";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.11";
	Обработчик.Процедура = "УчетДенежныхСредствБП.ОчиститьВДокументахРасшифровкуПлатежа";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.13";
	Обработчик.Процедура = "ОбновлениеСПредыдущейРедакции.УстановитьНеобходимостьЗаполненияПоследовательностей";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.13";
	Обработчик.Процедура = "Обработки.ПомощникПереходаСРедакции20.ВыполнитьСохранениеНумерацииПриОбновлении";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.1.13";
	Обработчик.Процедура           = "Документы.РеализацияТоваровУслуг.ЗаменитьВидыОперацийНаПростыеПриПереходеС20Отложенно";
	Обработчик.НачальноеЗаполнение = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	Обработчик.Комментарий = 
		НСтр("ru = 'Заменяет вид операции ""Товары, услуги, комиссия"" в документе ""Реализация (акт, накладная)""
			| на простые виды ""Товары"" и ""Услуги"".'");
	Обработчик.РежимВыполнения = "Отложенно";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.1.13";
	Обработчик.Процедура           = "Документы.ПоступлениеТоваровУслуг.ЗаменитьВидыОперацийНаПростыеПриПереходеС20Отложенно";
	Обработчик.НачальноеЗаполнение = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	Обработчик.Комментарий = 
		НСтр("ru = 'Заменяет вид операции ""Товары, услуги, комиссия"" в документе ""Поступление (акт, накладная)""
			| на простые виды ""Товары"" и ""Услуги"".'");
	Обработчик.РежимВыполнения = "Отложенно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.11";
	Обработчик.Процедура = "ОбновлениеСПредыдущейРедакции.ОчиститьТиповыеОперацииОперацииБухПриПереходеС20";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.13";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.НастройкиОтраженияЗарплатыВРеглУчете";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.13";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнитьЗначениеРеквизитаВалютный";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.13";
	Обработчик.Процедура = "ОбновлениеСПредыдущейРедакции.ПереносКИиДопСвойствПриОбновленииС20";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.13";
	Обработчик.Процедура = "ОбновлениеСПредыдущейРедакции.ПереносОсновнойОрганизацииПриОбновленииС20";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.13";
	Обработчик.Процедура = "ОбновлениеСПредыдущейРедакции.ЗаполнениеЗначенийФункциональныхОпцийПриОбновленииС20";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.13";
	Обработчик.Процедура = "ОбновлениеСПредыдущейРедакции.ПеренестиПрисоединенныеФайлы";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.13";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнитьТабличныеЧастиНоменклатурыДокументаВНО";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.13";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнитьТабличныеЧастиРасчетовСКонтрагентамиДокументаВНО";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.13";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнитьТабличныеЧастиРасчетовСПодотчетнымиЛицамиДокументаВНО";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.13";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнитьКлючиСвязейТабличныхЧастейДокументаВНО";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.13";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнитьТабличныеЧастиДанныхПоНДСДокументаВНО";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.14";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаменитьТипыСкладовВРегистреСчетовУчетаНоменклатуры";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.14";
	Обработчик.Процедура = "ОбновлениеСПредыдущейРедакции.КонвертироватьДокументыФизическихЛицС20";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.14";
	Обработчик.Процедура = "ЗарплатаКадрыОбновлениеСПредыдущейРедакции.ЗарплатаКадрыОбновлениеС20";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.14";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнитьТабличныеЧастиРасчетовПоЗаработнойПлатеДокументаВНО";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.15";
	Обработчик.Процедура = "ОбменДаннымиОбновлениеСПредыдущейРедакции.ВыполнитьПереносПлановОбменаБСП";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.15";
	Обработчик.Процедура = "ОбменДаннымиОбновлениеСПредыдущейРедакции.ВыполнитьПереносПлановОбменаУниверсальногоОбмена";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.2.7";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.УстановитьСубконтоНаСчетахПереводыВПути";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.13";
	Обработчик.Процедура = "ОбновлениеСПредыдущейРедакции.ПроизвестиЗаменуСсылокНаНовыйПредопределенныйЭлементСтранМира";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.13";
	Обработчик.Процедура = "ОбновлениеСПредыдущейРедакции.ПроизвестиЗаменуСсылокНаНовыйПредопределенныйЭлементГруппыПользователей";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.13";
	Обработчик.Процедура = "ОбновлениеСПредыдущейРедакции.УстановитьНачальныеНастройкиПользователей";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.1.13";
	Обработчик.Процедура           = "Документы.ИнвентаризацияНЗП.УстановитьПроведен";
	Обработчик.НачальноеЗаполнение = Истина; // Для того, чтобы выполнять при обновлении с 2БП на 3БП
	Обработчик.Комментарий         = НСтр("ru = 'Устанавливает признак ""Проведен"" в документах ""Инвентаризация НЗП""'");
	Обработчик.РежимВыполнения     = "Отложенно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.1.13";
	Обработчик.Процедура           = "Документы.ПлатежноеПоручение.УстановитьПроведен";
	Обработчик.НачальноеЗаполнение = Истина; // Для того, чтобы выполнять при обновлении с 2БП на 3БП
	Обработчик.Комментарий         = НСтр("ru = 'Устанавливает признак ""Проведен"" в документах ""Платежное поручение""'");
	Обработчик.РежимВыполнения     = "Отложенно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.1.13";
	Обработчик.Процедура           = "Документы.ПлатежноеТребование.УстановитьПроведен";
	Обработчик.НачальноеЗаполнение = Истина; // Для того, чтобы выполнять при обновлении с 2БП на 3БП
	Обработчик.Комментарий         = НСтр("ru = 'Устанавливает признак ""Проведен"" в документах ""Платежное требование""'");
	Обработчик.РежимВыполнения     = "Отложенно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "3.0.4.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнитьВидАктиваДляРБП";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "3.0.4.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнитьВидИмущества";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "3.0.5.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ОбработатьДобавлениеСчетовКорректировкиПрошлогоПериода";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	// Установка вида счета-фактуры для счета-фактуры полученного
	// заполнение новых реквизитов
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "3.0.5.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ОбновитьСчетФактуруПолученный";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "3.0.5.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнитьСпособПризнанияНИОКР";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	// Конвертация сведений об отражении зарплаты в учете
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "3.0.5.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.КонвертацияСведенийОбОтраженииЗарплатыВУчете";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	// Обработка добавления нового счета 50.04
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "3.0.6.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ОбработкаДобавленияНовогоСчета_50_04";
	Обработчик.НачальноеЗаполнение = Истина;
	
	//Обновление плана счетов (новые счета 08.11, 08.12, 50.04, 69.06)
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "3.0.6.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнениеКодовБыстрогоВыбора";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.7.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ОбновитьДополнительныеОтчетыИОбработки";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.8.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнитьТЧПокупателиОтчетКомиссионераОПродажах";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.8.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.УстановитьДатуНачалаДействияПостановления1137";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.8.13";
	Обработчик.Процедура = "УчетДенежныхСредствБП.УстановитьСуммуУслугВТЧРасшифровкаПлатежаВДокументахПоступлениеНаРС";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.8.13";
	Обработчик.Процедура = "УчетДенежныхСредствБП.УстановитьКурсНаДатуПриобретенияРеализацииВалютыВТЧРасшифровкаПлатежаВДокументахПоступлениеНаРС";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.9.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.УстановитьИспользоватьРучнуюКорректировкуДвижений";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.9.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ОпределитьПараметруУчетаРасчетовСРаботниками";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.10.8";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ВключитьРежимРазделенияИтоговРегистровНакопленийИБухгалтерии";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.10.8";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ОчиститьСуммыПРприПродажеВалюты";
	Обработчик.НачальноеЗаполнение = Ложь; // Процедура не должна запускаться при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.10.8";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.УстановитьКорректировкуДляДокументовВНОПоНалогам";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.11.2";
	Обработчик.Процедура = "РегистрыСведений.УчетнаяПолитикаОрганизаций.ЗаполнитьИспользуемыеСистемыНалогообложения";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.11.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.УстановитьКорректировкуДляРегистрацийОплатыОсновныхСредствИП";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.11.5";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ОбновитьНаименованиеРубля";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.12.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнениеОсновнойНоменклатурнойГруппыВидовДеятельностиИП";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.12.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнениеВидовДеятельностиИП";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.12.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнениеНоменклатурныхГруппРеализацииПродукцииУслуг";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.12.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнитьВидОперацииВОтчетеКомитентуОПродажах";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.12.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнениеВидаКодаОперацииСчетФактуры";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "3.0.12.6";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ПереносДвиженийДокументовУчетаЗарплаты";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "3.0.13.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.СоздатьНастройкиУчетаЗарплаты";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "3.0.13.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнитьУчетнуюПолитикуПорядокОтраженияАвансаУСН";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "3.0.14.5";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаписатьУчетнуюПолитикуОбособленныхПодразделений";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "3.0.14.5";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.УстановитьКонстантуНеИспользуетсяОСНО";
	Обработчик.НачальноеЗаполнение = Ложь; // Процедура не должна запускаться при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "3.0.15.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.УстановитьКорректировкуДляСчетовФактурПолученных_НДСПредъявленКВычету";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "3.0.15.1";
	Обработчик.Процедура = "ОбновлениеСПредыдущейРедакции.ОбновитьРИБПриПереходе20На30";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "3.0.16.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнениеКППКонтрагентаЖурналаУчетаСчетовФактур";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "3.0.16.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнениеРеквизитовПервичныхДокументов";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "3.0.16.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ОбработкаИзмененияПризнакаСчетаВНО";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "3.0.16.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ОбновлениеРегистраРеквизитыУплатыНалоговИПлатежейВБюджет";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "3.0.16.8";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗарегистрироватьИзменинияИдентификаторовОбъектовМетаданных";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "3.0.16.10";
	Обработчик.Процедура = "РегламентированнаяОтчетностьОбновлениеОбъектовЭДО.ПереносДанныхЭДОПриОбновлении";
	Обработчик.НачальноеЗаполнение = Истина; // Процедура не должна запускаться при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "3.0.16.10";
	Обработчик.Процедура = "РегламентированнаяОтчетностьОбновлениеОбъектовЭДО.ПереносДанныхЭДОПриОбновлении20";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "3.0.16.10";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ОбработкаДокументовУчетаЗарплаты";
	Обработчик.НачальноеЗаполнение = Истина; // Процедура не должна запускаться при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "3.0.17.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ОграничитьСрокиДействияПатентовУСН";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	//Обновление плана счетов (новые счета 08.11, 08.12, 50.04, 69.06)
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "3.0.17.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ДозаполнениеКодовБыстрогоВыбора";
	Обработчик.НачальноеЗаполнение = Ложь; // Процедура не должна запускаться при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.17.4";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.УстановитьИспользоватьСтатьиДвиженияДенежныхСредств";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.17.8";
	Обработчик.Процедура = "УчетОбособленныхПодразделений.ЗаполнитьГраницыКонтролируемости";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.17.8";
	Обработчик.Процедура = "РегистрыСведений.МетодыОпределенияПрямыхРасходовПроизводстваВНУ.УдалитьЗаписиНеСНачалаГода";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.17.8";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ПереносДвиженийИсчисленныеСтраховыеВзносы";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "3.0.18.1";
	Обработчик.Процедура    = "РегистрыСведений.УчетнаяПолитикаОрганизаций.ЗаполнитьЗакладкуЗатратыНаПроизводство";
	Обработчик.НачальноеЗаполнение = Истина; // Чтобы вызвался при обновлении с 2БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 		= "3.0.18.1";
	Обработчик.Процедура 	= "ОбновлениеИнформационнойБазыБП.УдалениеСубконтоДокументыРасчетовСчет_76_НА";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 		= "3.0.18.7";
	Обработчик.Процедура 	= "ОбновлениеИнформационнойБазыБП.УдалитьДублиПоВзаиморасчетамССотрудниками";
	Обработчик.НачальноеЗаполнение = Ложь; // Процедура должна запускаться только при обновлении с 3.0.17 - 3.0.18
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 		= "3.0.19.1";
	Обработчик.Процедура 	= "ОбновлениеИнформационнойБазыБП.УстановитьПорядокПризнанияДопРасходов";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.19.11";
	Обработчик.Процедура = "Справочники.ИдентификаторыОбъектовМетаданных.ЗарегистрироватьПолноеИзменениеДляПодчиненныхУзловРИБ";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.19.18";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ОбновитьВидКИТелефонаПользователя";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 		= "3.0.19.28";
	Обработчик.Процедура 	= "ОбновлениеИнформационнойБазыБП.ОбновитьТипыПредопределеннойКонтактнойИнформации";
	Обработчик.НачальноеЗаполнение = Истина; // Процедура должна запускаться при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 		= "3.0.19.35";
	Обработчик.Процедура 	= "ОбновлениеИнформационнойБазыБП.ВыполнитьКонвертациюСчетовФактур";
	Обработчик.НачальноеЗаполнение = Истина; // Процедура должна запускаться при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.20.1";	
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ОбновитьСчетаФактурыСозданныеВНО";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.20.1";	
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ОбновитьЗарплатуКВыплатеОрганизаций";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "3.0.20.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ОбновитьЭкологическийКлассТС";
	Обработчик.НачальноеЗаполнение = Ложь; // Процедура не должна запускаться при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 		= "3.0.20.1";
	Обработчик.Процедура 	= "ОбновлениеИнформационнойБазыБП.ОбновитьДокументыКорректировкаДолга";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.20.3";
	Обработчик.Процедура = "Справочники.ПрочиеДоходыИРасходы.Заполнить_СписаниеНДСНаРасходыПереходНаУСН";
	Обработчик.НачальноеЗаполнение = Истина; // Процедура должна запускаться при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.20.17";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнитьПустойТипКонтактнойИнформации";
	Обработчик.НачальноеЗаполнение = Истина; // Процедура должна запускаться при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.21.1";
	Обработчик.Процедура = "УчетДенежныхСредствБП.ОбновитьРКОПоВыплатеДепонентов";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.21.1";
	Обработчик.Процедура           = "РегистрыСведений.ЗадачиБухгалтера.ЗаполнениеЗадачНачалаРаботыПриОбновленииС20";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "3.0.21.1";
	Обработчик.Процедура    = "РегистрыСведений.НалогиОтчеты.ЗаполнитьПоНаличиюРегламентированныхОтчетов";
	Обработчик.НачальноеЗаполнение = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 		= "3.0.21.1";
	Обработчик.Процедура 	= "ОбновлениеИнформационнойБазыБП.ОбработатьЖурналУчетаСчетовФактур";
	Обработчик.НачальноеЗаполнение = Истина; // Процедура должна запускаться при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 		= "3.0.21.1";
	Обработчик.Процедура 	= "ОбновлениеИнформационнойБазыБП.ОбработатьКорректировочныеСчетаФактуры";
	Обработчик.НачальноеЗаполнение = Истина; // Процедура должна запускаться при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "3.0.21.1";
	Обработчик.Процедура    = "Документы.РегламентнаяОперация.ДобавитьРегламентнуюОперацию_ВключениеАвансовВПрочиеДоходыДляИП";
	Обработчик.НачальноеЗаполнение = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "3.0.21.1";
	Обработчик.Процедура    = "ОбновлениеИнформационнойБазыБП.ОбработатьАвансовыеСчетаФактурыПолученные";
	Обработчик.НачальноеЗаполнение = Ложь; // Процедура не должна запускаться при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "3.0.21.1";
	Обработчик.Процедура    = "ОбновлениеИнформационнойБазыБП.ОбработатьДвиженияПоРегистрамНДС";
	Обработчик.НачальноеЗаполнение = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.22.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБП.УстановитьКонстантуРегистрироватьСчетаФактурыНаСуммовыеРазницы";
	Обработчик.НачальноеЗаполнение = Истина; // Процедура должна запускаться при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.22.1";
	Обработчик.Процедура           = "РегистрыСведений.НеактуальныеРегламентныеОперации.УдалитьВремяИзДатыИОчиститьГруппу";
	Обработчик.НачальноеЗаполнение = Истина; // Процедура должна запускаться при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 		= "3.0.22.3";
	Обработчик.Процедура 	= "ОбновлениеИнформационнойБазыБП.ОбновитьДвиженияРегистраРублевыеСуммыДокументовВВалюте";
	Обработчик.НачальноеЗаполнение = Истина; //Для начального заполнения регистра "Рублевые суммы документов в валюте"
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "3.0.23.4";
	Обработчик.Процедура    = "ОбновлениеИнформационнойБазыБП.УстановитьФорматСохраненияРегистровУчета";
	Обработчик.НачальноеЗаполнение = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "3.0.23.7";
	Обработчик.Процедура    = "Документы.СчетФактураПолученный.ОбработатьСчетаФактурыИзПредыдущейВерсии";
	Обработчик.НачальноеЗаполнение = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 		       = "3.0.24.1";
	Обработчик.Процедура 	       = "Документы.РегламентнаяОперация.ЗаполнитьОписаниеОшибок";
	Обработчик.НачальноеЗаполнение = Истина; // Процедура должна запускаться при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    			= "3.0.24.1";
	Обработчик.Процедура 			= "РегламентированнаяОтчетностьОбновлениеОбъектовЭДО.ЗаполнениеДанныхЭДОПриОбновлении20";
	Обработчик.НачальноеЗаполнение 	= Истина; // В противном случае процедура не запустится при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       		= "3.0.24.1";
	Обработчик.Процедура   			= "Документы.СчетФактураВыданный.ОбработатьНомераИСуммыСчетаФактуры";
	Обработчик.НачальноеЗаполнение 	= Истина; // Надо выполнять при обновлении с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       		= "3.0.24.1";
	Обработчик.Процедура    		= "Документы.СчетФактураПолученный.ОбработатьНомераИСуммыСчетаФактуры";
	Обработчик.НачальноеЗаполнение 	= Истина; // Надо выполнять при обновлении с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       		= "3.0.24.1";
	Обработчик.Процедура    		= "ОбновлениеСПредыдущейРедакции.ОбработатьСсылкиНаВедомости";
	Обработчик.НачальноеЗаполнение 	= Истина; // Надо выполнять при обновлении с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 		       = "3.0.24.1";
	Обработчик.Процедура 	       = "Справочники.ОсновныеСредства.ПроставитьТипОСПриОбновлении";
	Обработчик.НачальноеЗаполнение = Истина; // Процедура должна запускаться при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       		= "3.0.25.1";
	Обработчик.Процедура    		= "Документы.ДопЛистКнигиПокупокДляПередачиВЭлектронномВиде.ОбработатьДокументыСНезаполненнымРеквизитомПериодПоСКНП";
	Обработчик.НачальноеЗаполнение = Ложь; // Процедура не должна запускаться при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       		= "3.0.25.1";
	Обработчик.Процедура    		= "Документы.ДопЛистКнигиПродажДляПередачиВЭлектронномВиде.ОбработатьДокументыСНезаполненнымРеквизитомПериодПоСКНП";
	Обработчик.НачальноеЗаполнение = Ложь; // Процедура не должна запускаться при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       		= "3.0.25.1";
	Обработчик.Процедура    		= "Документы.ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде.ОбработатьДокументыСНезаполненнымРеквизитомПериодПоСКНП";
	Обработчик.НачальноеЗаполнение = Ложь; // Процедура не должна запускаться при переходе с 2БП на 3БП
 
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       		= "3.0.25.1";
	Обработчик.Процедура    		= "Документы.КнигаПокупокДляПередачиВЭлектронномВиде.ОбработатьДокументыСНезаполненнымРеквизитомПериодПоСКНП";
	Обработчик.НачальноеЗаполнение = Ложь; // Процедура не должна запускаться при переходе с 2БП на 3БП
 
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       		= "3.0.25.1";
	Обработчик.Процедура    		= "Документы.КнигаПродажДляПередачиВЭлектронномВиде.ОбработатьДокументыСНезаполненнымРеквизитомПериодПоСКНП";
	Обработчик.НачальноеЗаполнение = Ложь; // Процедура не должна запускаться при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 		       = "3.0.25.3";
	Обработчик.Процедура 	       = "Справочники.КлассификаторПродукцииПоВидамДеятельности.ЗаполнитьПредопределенныеДанные";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.25.4";
	Обработчик.Процедура           = "Справочники.ЗадачиБухгалтера.ЗаполнитьТребованиямиНормативныхДокументов";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.ОбщиеДанные         = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.26.1";
	Обработчик.Процедура           = "Документы.КорректировкаРеализации.ЗаполнитьРеквизитыИсправленияКорректировкиРеализации";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.26.1";
	Обработчик.Процедура           = "Документы.КорректировкаПоступления.ЗаполнитьРеквизитыИсправленияКорректировкиПоступления";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.26.3";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБП.ОбновитьРеквизитВидОбменаСКонтролирующимиОрганамиСправочникаОрганизации";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.27.1";
	Обработчик.Процедура           = "Документы.ПередачаОС.ЗаполнитьДобавленныеРеквизиты";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.28.1";
	Обработчик.Процедура           = "УчетНДСПереопределяемый.ОбработатьУчетнуюПолитикуРаздельныйУчетНДСДо2014Года";
	Обработчик.НачальноеЗаполнение = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.28.1";
	Обработчик.Процедура           = "Справочники.Организации.ОчиститьКодНалоговогоОрганаПолучателя";
	Обработчик.НачальноеЗаполнение = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.28.1";
	Обработчик.Процедура           = "РегистрыСведений.СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.ЗаполнитьПорядокОпределенияНалоговойБазы";
	Обработчик.НачальноеЗаполнение = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.28.5";
	Обработчик.Процедура           = "УчетДенежныхСредствБП.ИсправитьОчередностьПлатежаВРеквизитахДляУплатыВБюджет";
	Обработчик.НачальноеЗаполнение = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.28.6";
	Обработчик.Процедура           = "ОбновлениеСПредыдущейРедакции.ВосстановитьЗначенияДополнительныхСведений";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	//Обновление плана счетов (новые счета 69.02.7, 69.06.5)
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.28.8";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБП.ДозаполнениеКодовБыстрогоВыбора";
	Обработчик.НачальноеЗаполнение = Ложь; // Процедура не должна запускаться при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.28.8";
	Обработчик.Процедура           = "Справочники.Организации.ОчиститьНаименованиеПлательщикаПриПеречисленииВБюджет";
	Обработчик.НачальноеЗаполнение = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.29.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБП.ЗарегистрироватьИзмененияВидовОтправляемыхДокументов";
	Обработчик.НачальноеЗаполнение = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();   
	Обработчик.Версия              = "3.0.29.1";
	Обработчик.Процедура           = "РегламентированнаяОтчетностьОбновлениеОбъектовЭДО.ЗаполнитьАдресЭлектроннойПочтыФСГС";
	Обработчик.НачальноеЗаполнение = Ложь; // Не требуется для перехода с 2.0 на 3.0
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.29.1";
	Обработчик.Процедура           = "Документы.РегламентнаяОперация.ДобавитьРегламентнуюОперацию_НачислениеСтраховыхВзносовИП";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.29.1";
	Обработчик.Процедура           = "Документы.СписаниеСРасчетногоСчета.СформироватьДвиженияПоДокументамОплаты";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	//Обновление справочника контрагенты для целей проверки корректности ввода ИНН и КПП справочника Контрагенты
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.29.1";
	Обработчик.Процедура           = "Справочники.Контрагенты.ОбновлениеСправочникаКонтрагентыПриВключенииКонтроляКорректностиИННиКПП";
	Обработчик.НачальноеЗаполнение = Истина; // Процедура должна запускаться при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.29.6";
	Обработчик.Процедура           = "Документы.СчетНаОплатуПокупателю.ПеренестиРегистрациюПользовательскойПечатнойФормыСчета";
	Обработчик.НачальноеЗаполнение = Ложь; // Не требуется для перехода с 2.0 на 3.0
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.29.6";
	Обработчик.Процедура           = "РегламентированнаяОтчетностьОбновлениеОбъектовЭДО.ПолностьюЗаполнитьСправочникВидыОтправляемыхДокументов";
	Обработчик.НачальноеЗаполнение = Истина; // Процедура должна запускаться при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.30.1";
	Обработчик.Процедура           = "УчетДенежныхСредствБП.ВернутьСтрокуВТЧРасшифровкаПлатежаВДокументахПоступлениеНаРС_ПрочееПоступление";
	Обработчик.НачальноеЗаполнение = Ложь; // Процедура не должна запускаться при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.30.1";
	Обработчик.Процедура           = "Обработки.ПодборНоменклатуры.СброситьНастройкиПользователей";
	Обработчик.НачальноеЗаполнение = Ложь; 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.31.1";
	Обработчик.Процедура           = "РегистрыСведений.СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.ЗаполнитьКадастровыйНомер";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.31.8";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБП.ЗарегистрироватьИзмененияУчетныхЗаписейЭлектроннойПочты";
	Обработчик.НачальноеЗаполнение = Истина;
	
#Область ОбработчикиОбновленияУпрощениеНастройкиКУДиР
	
	ВерсияКонфигурацииДляОбновленияНастройкиКУДиР = "3.0.30.1";
	
	// Упрощение настройки КУДиР - монопольные обработчики
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = ВерсияКонфигурацииДляОбновленияНастройкиКУДиР;
	Обработчик.Процедура           = "Документы.ВыдачаДенежныхДокументов.ОбработатьРучнуюНастройкуКУДиР";
	Обработчик.НачальноеЗаполнение = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = ВерсияКонфигурацииДляОбновленияНастройкиКУДиР;
	Обработчик.Процедура           = "Документы.ПоступлениеДенежныхДокументов.ОбработатьРучнуюНастройкуКУДиР";
	Обработчик.НачальноеЗаполнение = Истина; // Надо выполнять при обновлении с 2БП на 3БП
		
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = ВерсияКонфигурацииДляОбновленияНастройкиКУДиР;
	Обработчик.Процедура           = "Документы.ОтчетКомитентуОПродажах.ОбработатьРучнуюНастройкуУСНДляАктуальныхДокументов";
	Обработчик.НачальноеЗаполнение = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = ВерсияКонфигурацииДляОбновленияНастройкиКУДиР;
	Обработчик.Процедура           = "Документы.ПоступлениеНаРасчетныйСчет.ЗаполнитьРеквизитыНастройкиУСНДляАктуальныхДокументов";
	Обработчик.НачальноеЗаполнение = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = ВерсияКонфигурацииДляОбновленияНастройкиКУДиР;
	Обработчик.Процедура           = "Документы.ПриходныйКассовыйОрдер.ЗаполнитьРеквизитыНастройкиУСНДляАктуальныхДокументов";
	Обработчик.НачальноеЗаполнение = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = ВерсияКонфигурацииДляОбновленияНастройкиКУДиР;
	Обработчик.Процедура           = "Документы.РасходныйКассовыйОрдер.ЗаполнитьРеквизитыНастройкиУСНДляАктуальныхДокументов";
	Обработчик.НачальноеЗаполнение = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = ВерсияКонфигурацииДляОбновленияНастройкиКУДиР;
	Обработчик.Процедура           = "Документы.СписаниеСРасчетногоСчета.ЗаполнитьРеквизитыНастройкиУСНДляАктуальныхДокументов";
	Обработчик.НачальноеЗаполнение = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	
	// Упрощение настройки КУДиР - отложенные обработчики
	// Отчет комитенту о продажах
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = ВерсияКонфигурацииДляОбновленияНастройкиКУДиР;
	Обработчик.Процедура           = "Документы.ОтчетКомитентуОПродажах.ОбработатьРучнуюНастройкуУСНОтложенно";
	Обработчик.НачальноеЗаполнение = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	Обработчик.Комментарий = 
		НСтр("ru = 'Обрабатывает отчеты комитентам о продажах, отражение которых в КУДиР настроено пользователями'");
	Обработчик.РежимВыполнения = "Отложенно";
	
	// Поступление на расчетный счет
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = ВерсияКонфигурацииДляОбновленияНастройкиКУДиР;
	Обработчик.Процедура           = "Документы.ПоступлениеНаРасчетныйСчет.ЗаполнитьПорядокОтраженияАвансаВРасшифровкеПлатежаОтложенно";
	Обработчик.НачальноеЗаполнение = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	Обработчик.Комментарий = 
		НСтр("ru = 'Заполняет значение нового реквизита ""Отражение аванса в НУ""
			|в табличных частях документов ""Поступление на расчетный счет"" прошлых периодов.'");
	Обработчик.РежимВыполнения = "Отложенно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = ВерсияКонфигурацииДляОбновленияНастройкиКУДиР;
	Обработчик.Процедура           = "Документы.ПоступлениеНаРасчетныйСчет.ЗаполнитьДоходыУСНПрочиеРасчетыВРасшифровкеПлатежаОтложенно";
	Обработчик.НачальноеЗаполнение = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	Обработчик.Комментарий = 
		НСтр("ru = 'Заполняет значение нового реквизита ""Доходы УСН""
			|в табличных частях документов ""Поступление на расчетный счет"" прошлых периодов.'");
	Обработчик.РежимВыполнения = "Отложенно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = ВерсияКонфигурацииДляОбновленияНастройкиКУДиР;
	Обработчик.Процедура           = "Документы.ПоступлениеНаРасчетныйСчет.ОбработатьРучнуюНастройкуУСНПрочиеРасчетыОтложенно";
	Обработчик.НачальноеЗаполнение = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	Обработчик.Комментарий = 
		НСтр("ru = 'Заполняет реквизиты отражения в УСН при прочих расчетах с контрагентами
			|у документов ""Поступление на расчетный счет"" прошлых периодов.'");
	Обработчик.РежимВыполнения = "Отложенно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = ВерсияКонфигурацииДляОбновленияНастройкиКУДиР;
	Обработчик.Процедура           = "Документы.ПоступлениеНаРасчетныйСчет.ОбработатьРучнуюНастройкуУСНПрочиеПоступленияОтложенно";
	Обработчик.НачальноеЗаполнение = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	Обработчик.Комментарий = 
		НСтр("ru = 'Заполняет реквизиты отражения в УСН для прочих операций
			|у документов ""Поступление на расчетный счет"" прошлых периодов.'");
	Обработчик.РежимВыполнения = "Отложенно";
	
	// ПКО
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = ВерсияКонфигурацииДляОбновленияНастройкиКУДиР;
	Обработчик.Процедура           = "Документы.ПриходныйКассовыйОрдер.ЗаполнитьПорядокОтраженияАвансаВРасшифровкеПлатежаОтложенно";
	Обработчик.НачальноеЗаполнение = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	Обработчик.Комментарий = 
		НСтр("ru = 'Заполняет значение нового реквизита ""Отражение аванса в НУ""
			|в табличных частях документов ""Поступление наличных"" прошлых периодов.'");
	Обработчик.РежимВыполнения = "Отложенно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = ВерсияКонфигурацииДляОбновленияНастройкиКУДиР;
	Обработчик.Процедура           = "Документы.ПриходныйКассовыйОрдер.ЗаполнитьДоходыУСНПрочиеРасчетыВРасшифровкеПлатежаОтложенно";
	Обработчик.НачальноеЗаполнение = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	Обработчик.Комментарий = 
		НСтр("ru = 'Заполняет значение нового реквизита ""Доходы УСН""
			|в табличных частях документов ""Поступление наличных"" прошлых периодов.'");
	Обработчик.РежимВыполнения = "Отложенно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = ВерсияКонфигурацииДляОбновленияНастройкиКУДиР;
	Обработчик.Процедура           = "Документы.ПриходныйКассовыйОрдер.ОбработатьРучнуюНастройкуУСНПрочиеРасчетыОтложенно";
	Обработчик.НачальноеЗаполнение = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	Обработчик.Комментарий = 
		НСтр("ru = 'Заполняет реквизиты отражения в УСН при прочих расчетах с контрагентами
			|у документов ""Поступление наличных"" прошлых периодов.'");
	Обработчик.РежимВыполнения = "Отложенно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = ВерсияКонфигурацииДляОбновленияНастройкиКУДиР;
	Обработчик.Процедура           = "Документы.ПриходныйКассовыйОрдер.ОбработатьРучнуюНастройкуУСНПрочиеПоступленияОтложенно";
	Обработчик.НачальноеЗаполнение = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	Обработчик.Комментарий = 
		НСтр("ru = 'Заполняет реквизиты отражения в УСН для прочих операций
			|у документов ""Поступление наличных"" прошлых периодов.'");
	Обработчик.РежимВыполнения = "Отложенно";
	
	// РКО
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = ВерсияКонфигурацииДляОбновленияНастройкиКУДиР;
	Обработчик.Процедура           = "Документы.РасходныйКассовыйОрдер.ОбработатьРучнуюНастройкуУСНСписанияСредствПриУСНДоходыОтложенно";
	Обработчик.НачальноеЗаполнение = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	Обработчик.Комментарий = 
		НСтр("ru = 'Обрабатывает выдачу наличных с ручной настройкой отражения в КУДиР
			|по организациям, применяющим УСН с объектом ""Доходы""'");
	Обработчик.РежимВыполнения = "Отложенно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = ВерсияКонфигурацииДляОбновленияНастройкиКУДиР;
	Обработчик.Процедура           = "Документы.РасходныйКассовыйОрдер.ЗаполнитьРасходыУСНПрочиеРасчетыОтложенно";
	Обработчик.НачальноеЗаполнение = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	Обработчик.Комментарий = 
		НСтр("ru = 'Заполняет значение нового реквизита ""Расходы УСН""
			|в табличных частях документов ""Выдача наличных"" прошлых периодов.'");
	Обработчик.РежимВыполнения = "Отложенно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = ВерсияКонфигурацииДляОбновленияНастройкиКУДиР;
	Обработчик.Процедура           = "Документы.РасходныйКассовыйОрдер.ОбработатьРучнуюНастройкуУСНПрочиеСписанияОтложенно";
	Обработчик.НачальноеЗаполнение = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	Обработчик.Комментарий = 
		НСтр("ru = 'Обрабатывает выдачу наличных с ручной настройкой отражения в КУДиР
			|по организациям, применяющим УСН с объектом ""Доходы минус расходы""'");
	Обработчик.РежимВыполнения = "Отложенно";
	
	// Списание с расчетного счета
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = ВерсияКонфигурацииДляОбновленияНастройкиКУДиР;
	Обработчик.Процедура           = "Документы.СписаниеСРасчетногоСчета.ОбработатьРучнуюНастройкуУСНСписанияСредствПриУСНДоходыОтложенно";
	Обработчик.НачальноеЗаполнение = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	Обработчик.Комментарий = 
		НСтр("ru = 'Обрабатывает списания с расчетного счета с ручной настройкой отражения в КУДиР
			|по организациям, применяющим УСН с объектом ""Доходы""'");
	Обработчик.РежимВыполнения = "Отложенно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = ВерсияКонфигурацииДляОбновленияНастройкиКУДиР;
	Обработчик.Процедура           = "Документы.СписаниеСРасчетногоСчета.ЗаполнитьРасходыУСНПрочиеРасчетыОтложенно";
	Обработчик.НачальноеЗаполнение = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	Обработчик.Комментарий = 
		НСтр("ru = 'Заполняет значение нового реквизита ""Расходы УСН""
			|в табличных частях документов ""Списание с расчетного счета"" прошлых периодов.'");
	Обработчик.РежимВыполнения = "Отложенно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = ВерсияКонфигурацииДляОбновленияНастройкиКУДиР;
	Обработчик.Процедура           = "Документы.СписаниеСРасчетногоСчета.ОбработатьРучнуюНастройкуУСНПрочиеСписанияОтложенно";
	Обработчик.НачальноеЗаполнение = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	Обработчик.Комментарий = 
		НСтр("ru = 'Обрабатывает списания с расчетного счета с ручной настройкой отражения в КУДиР
			|по организациям, применяющим УСН с объектом ""Доходы минус расходы""'");
	Обработчик.РежимВыполнения = "Отложенно";
	
#КонецОбласти

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       		= "3.0.31.1";
	Обработчик.Процедура    		= "Справочники.Склады.ПерезаполнитьКонстантуИспользоватьНесколькоСкладов";
	Обработчик.НачальноеЗаполнение 	= Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.31.1";
	Обработчик.Процедура           = "Документы.ВводНачальныхОстатков.ЗаполнитьРаботниковПоСпискуСотрудников";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.31.1";
	Обработчик.Процедура           = "Справочники.ТипыЦенНоменклатуры.ЗаполнитьКонстантуИспользоватьТипыЦенНоменклатуры";
	Обработчик.НачальноеЗаполнение = Истина; // Процедура должна запускаться при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.31.1";
	Обработчик.Процедура           = "Справочники.ПрочиеДоходыИРасходы.Заполнить_СписаниеНДСНаРасходыНеНУ";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.31.1";
	Обработчик.Процедура           = "Справочники.ДоговорыКонтрагентов.ЗаполнитьПризнакПредъявляетНДС";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.31.1";
	Обработчик.Процедура           = "Справочники.СтатьиЗатрат.ОбработкаСправочникаДляУправленияПредопределеннымиЗначениями";
	Обработчик.НачальноеЗаполнение = Истина; // Процедура должна запускаться при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.31.1";
	Обработчик.Процедура           = "Справочники.ПрочиеДоходыИРасходы.ОбработкаСправочникаДляУправленияПредопределеннымиЗначениями";
	Обработчик.НачальноеЗаполнение = Истина; // Процедура должна запускаться при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия               = "3.0.31.2";
	Обработчик.Процедура            = "Справочники.Организации.ЗаполнитьИспользуемыеВидыОрганизаций";
	Обработчик.НачальноеЗаполнение  = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия               = "3.0.31.2";
	Обработчик.Процедура            = "ОбновлениеИнформационнойБазыБП.ЗаполнениеКонстантТипаПоставки";
	Обработчик.НачальноеЗаполнение  = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.31.2";
	Обработчик.Процедура           = "Справочники.Организации.ПерезаполнитьКонстантуИспользоватьНесколькоОрганизаций";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       		= "3.0.31.4";
	Обработчик.Процедура = "РегистрыСведений.УчетнаяПолитикаОрганизаций.ЗаполнитьСтавкуНалогаУСН";
	Обработчик.НачальноеЗаполнение = Истина; // Процедура должна запускаться при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       		= "3.0.31.4";
	Обработчик.Процедура = "Документы.РегламентнаяОперация.ДобавитьРегламентнуюОперациюРасчетНалогаУСН";
	Обработчик.НачальноеЗаполнение = Истина; // Процедура должна запускаться при переходе с 2БП на 3БП
	
	Если ПолучитьФункциональнуюОпцию("РаботаВЛокальномРежиме") Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия       		= "3.0.31.5";
		Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.УстановитьИспользованиеДополнительныхОтчетовИОбработок";
		Обработчик.НачальноеЗаполнение = Истина; // Процедура должна запускаться при переходе с 2БП на 3БП
		Обработчик.ОбщиеДанные         = Истина;
	КонецЕсли;
	
#Область ОбработчикиОбновленияПоследовательности

	ВерсияКонфигурацииДляОбновленияПоследовательностей = "3.0.31.5";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = ВерсияКонфигурацииДляОбновленияПоследовательностей;
	Обработчик.Процедура           = "РаботаСПоследовательностями.ЗаменитьСтарыеПоследовательностиНаДокументыОрганизаций";
	Обработчик.НачальноеЗаполнение = Истина; // Процедура должна запускаться при переходе с 2БП на 3БП

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = ВерсияКонфигурацииДляОбновленияПоследовательностей;
	Обработчик.Процедура           = "РаботаСПоследовательностями.ОчиститьПоследовательностьВзаиморасчеты20Отложенно";
	Обработчик.НачальноеЗаполнение = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	Обработчик.Комментарий = 
		НСтр("ru = 'Удаляет записи из последовательности ""Взаиморасчеты"" редакции 2.0,
			|которая более не используется.'");
	Обработчик.РежимВыполнения = "Отложенно";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = ВерсияКонфигурацииДляОбновленияПоследовательностей;
	Обработчик.Процедура           = "РаботаСПоследовательностями.ОчиститьОбщуюПоследовательность20Отложенно";
	Обработчик.НачальноеЗаполнение = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	Обработчик.Комментарий = 
		НСтр("ru = 'Удаляет записи из последовательности ""Общая последовательность"" редакции 2.0,
			|которая более не используется.'");
	Обработчик.РежимВыполнения = "Отложенно";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = ВерсияКонфигурацииДляОбновленияПоследовательностей;
	Обработчик.Процедура           = "РаботаСПоследовательностями.ОчиститьПоследовательностьВзаиморасчеты30Отложенно";
	Обработчик.НачальноеЗаполнение = Ложь; // Не надо выполнять при обновлении с 2БП на 3БП
	Обработчик.Комментарий = 
		НСтр("ru = 'Удаляет записи из последовательности ""Взаиморасчеты"" редакции 3.0,
			|которая более не используется.'");
	Обработчик.РежимВыполнения = "Отложенно";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = ВерсияКонфигурацииДляОбновленияПоследовательностей;
	Обработчик.Процедура           = "РаботаСПоследовательностями.ОчиститьОбщуюПоследовательность30Отложенно";
	Обработчик.НачальноеЗаполнение = Ложь; // Не надо выполнять при обновлении с 2БП на 3БП
	Обработчик.Комментарий = 
		НСтр("ru = 'Удаляет записи из последовательности ""Общая последовательность"" редакции 3.0,
			|которая более не используется.'");
	Обработчик.РежимВыполнения = "Отложенно";
	
#КонецОбласти	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.31.5";
	Обработчик.Процедура           = "Справочники.ВидыРегистровУчета.ЗаполнитьВидыРегистровУчета";
	Обработчик.НачальноеЗаполнение = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	Обработчик.ОбщиеДанные         = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.31.5";
	Обработчик.Процедура           = "РегистрыСведений.НастройкиУчетаЗарплаты.ЗаполнитьПорядокПримененияВычетовПоНДФЛ";
	Обработчик.НачальноеЗаполнение = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.31.6";
	Обработчик.Процедура           = "ОтражениеЗарплатыВБухучете.ОбработатьДокументыОтражениеЗарплатыВБухучете";
	Обработчик.НачальноеЗаполнение = Ложь; // Не надо выполнять при обновлении с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.31.11";
	Обработчик.Процедура           = "Справочники.Организации.ЗаполнитьДатуРегистрацииИП";
	Обработчик.НачальноеЗаполнение = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия               = "3.0.32.1";
	Обработчик.Процедура            = "ОбновлениеИнформационнойБазыБП.УстановитьВедетсяУчетИмпортныхТоваров";
	Обработчик.НачальноеЗаполнение  = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия               = "3.0.32.1";
	Обработчик.Процедура            = "Справочники.ПрочиеДоходыИРасходы.СоздатьПредопределенныеЭлементыПереходСБП20";
	Обработчик.НачальноеЗаполнение  = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия               = "3.0.32.2";
	Обработчик.Процедура            = "РегистрыСведений.МетодыОпределенияПрямыхРасходовПроизводстваВНУ.ДобавитьСчетаВзносовС2014Года";
	Обработчик.НачальноеЗаполнение  = Ложь;
	
	//Обновление плана счетов (новый счет 68.06)
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.32.3";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБП.ДозаполнениеКодовБыстрогоВыбора";
	Обработчик.НачальноеЗаполнение = Ложь; // Процедура не должна запускаться при переходе с 2БП на 3БП
	
	//Создание способов отражения расходов по налогам (по умолчанию)
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.32.3";
	Обработчик.Процедура           = "РегистрыСведений.СпособыОтраженияРасходовПоНалогам.СоздатьЗаписиОтражениеНалоговПоУмолчанию";
	Обработчик.НачальноеЗаполнение = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.32.3";
	Обработчик.Процедура           = "Справочники.ВидыРегистровУчета.ЗаполнитьВидыРегистровУчета";
	Обработчик.НачальноеЗаполнение = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	Обработчик.ОбщиеДанные         = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.32.4";
	Обработчик.Процедура           = "РаботаСПоследовательностями.ИсключитьСчетаФактурыИзПоследовательностиДокументыОрганизаций";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Комментарий = 
		НСтр("ru = 'Удаляет записи по счета-фактурам из последовательности ""Документы организаций"",
			|которые более не используются.'");
	Обработчик.РежимВыполнения = "Отложенно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.33.2";
	Обработчик.Процедура           = "МенеджерОборудованияВызовСервераПереопределяемый.ОбновитьПоставляемыеДрайвера";
	Обработчик.НачальноеЗаполнение = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.33.2";
	Обработчик.Процедура           = "МенеджерОборудованияВызовСервераПереопределяемый.ОбновитьДрайверыВСправочникеПодключаемогоОборудования";
	Обработчик.НачальноеЗаполнение = Ложь; // Надо выполнять при обновлении с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.33.3";
	Обработчик.Процедура           = "МониторРуководителя.ЗаполнитьДанныеМонитораРуководителя";
	Обработчик.НачальноеЗаполнение = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.33.4";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБП.УстановитьРежимКомандногоИнтерфейса";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.33.6";
	Обработчик.Процедура           = "Документы.ИнвентаризацияОС.УстановитьПроведен";
	Обработчик.НачальноеЗаполнение = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	Обработчик.Комментарий         = НСтр("ru = 'Устанавливает признак ""Проведен"" в документах ""Инвентаризация ОС""'");
	Обработчик.РежимВыполнения     = "Отложенно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.33.7";
	Обработчик.Процедура           = "РегистрыСведений.НоменклатурныеГруппыРеализацииПродукцииУслуг.ЗаполнитьОрганизациюПриОднофирменномУчете";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.33.9";
	Обработчик.Процедура           = "РегистрыСведений.ЗадачиБухгалтера.ПеренестиДанныеИзРегистраВыполненныеЗадачиНачалаРаботы";
	Обработчик.НачальноеЗаполнение = Ложь; // Не надо выполнять при обновлении с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.33.21";
	Обработчик.Процедура           = "Документы.СписаниеСРасчетногоСчета.ЗаполнитьНалоговыйПериодПриУплатеСТраховыхВзносовИП";
	Обработчик.НачальноеЗаполнение = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.34.2";
	Обработчик.Процедура           = "Справочники.ПрочиеДоходыИРасходы.ОбновитьПредопределенныйЭлементСписаниеНДСНаПрочиеРасходы";
	Обработчик.НачальноеЗаполнение = Ложь; // Не надо выполнять при обновлении с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.34.4";
	Обработчик.Процедура           = "НалоговыйУчет.ОтключитьПрименениеРазличныхСтавокПоНалогуНаПрибыльПРОФ";
	Обработчик.НачальноеЗаполнение = Истина; // Процедура должна запускаться при переходе с 2БП на 3БП
	
	//Обновление плана счетов (новые счета РВ.3 и РВ.4)
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "3.0.34.5";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ДозаполнениеКодовБыстрогоВыбора";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия               = "3.0.35.1";
	Обработчик.Процедура            = "Справочники.ПодразделенияОрганизаций.ЗаполнитьКонстантуВестиУчетЗатратПоПодразделениям";
	Обработчик.НачальноеЗаполнение  = Ложь; // Не надо выполнять при обновлении с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.35.4";
	Обработчик.Процедура           = "УчетОбособленныхПодразделений.ЗаполнитьСтрануРегистрацииВКонтрагентах";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "3.0.35.4";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.УстановитьИспользованиеУведомленияОКонтролируемыхСделках";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.35.6";
	Обработчик.Процедура = "Справочники.Контрагенты.ОтменитьРегистрациюДублей";
	Обработчик.НачальноеЗаполнение = Ложь; // Процедура не должна запускаться при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия               = "3.0.35.8";
	Обработчик.Процедура            = "ОбновлениеИнформационнойБазыБП.ЗаполнитьКонстантуИспользоватьНесколькоОтветственных";
	Обработчик.НачальноеЗаполнение  = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.35.9";
	Обработчик.Процедура           = "Документы.ЗаписьКУДиР.ЗарегистрироватьДанныеПервичныхДокументов";
	Обработчик.НачальноеЗаполнение = Истина; // Процедура должна запускаться при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.35.9";
	Обработчик.Процедура           = "ПроверкаКонтрагентов.ВключитьПроверкуКонтрагентовДляРежимаСервисов";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.ОбщиеДанные         = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.35.9";
	Обработчик.Процедура           = "ПроверкаКонтрагентов.ПроверитьКонтрагентовПослеВключенияПроверки";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Комментарий = НСтр("ru = 'Проверяет существование контрагентов по базе ФНС.
		|До завершения выполнения существование контрагента может быть определено не для всех контрагентов'");
		
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия               = "3.0.35.10";
	Обработчик.Процедура            = "Обработки.ФункциональностьПрограммы.ЗаполнитьКонстантыУправленияФункциональностью";
	Обработчик.НачальноеЗаполнение  = Ложь; // Процедура должна запускаться при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия               = "3.0.35.11";
	Обработчик.Процедура            = "РегистрыСведений.УчетнаяПолитикаОрганизаций.УстановитьПорядокПризнанияТаможенныхПлатежей";
	Обработчик.НачальноеЗаполнение  = Истина; // Процедура должна запускаться при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия               = "3.0.35.11";
	Обработчик.Процедура            = "Документы.ГТДИмпорт.ЗаполнитьОтражениеВУСНАктуальныхДокументов";
	Обработчик.НачальноеЗаполнение  = Истина; // Процедура должна запускаться при переходе с 2БП на 3БП
	Обработчик = Обработчики.Добавить();
	
	Обработчик.Версия               = "3.0.35.11";
	Обработчик.Процедура            = "Документы.ГТДИмпорт.ЗаполнитьОтражениеВУСНДокументовПрошлыхЛет";
	Обработчик.НачальноеЗаполнение  = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	Обработчик.Комментарий = 
		НСтр("ru = 'Заполняет добавленную колонку ""Расходы (НУ)"" табличной части ""Товары"" документа ""ГТД по импорту""'");
	Обработчик.РежимВыполнения = "Отложенно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.35.14";
	Обработчик.Процедура           = "ПланыСчетов.Хозрасчетный.ОбработатьДобавлениеСчетовУчетаНДСВТаможенномСоюзе";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.35.14";
	Обработчик.Процедура           = "ПланыОбмена.ОбменУправлениеТорговлей103БухгалтерияПредприятия30.ОбновитьСвойстваПредопределенногоУзла";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.36.1";
	Обработчик.Процедура           = "Справочники.Организации.ЗаполнитьПризнакИспользованияТрудаРаботниковИП";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.36.3";
	Обработчик.Процедура           = "Обработки.ФункциональностьПрограммы.ЗаполнитьКонстантуАлкогольнаяПродукция";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.36.4";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБП.УдалитьНастройкиФормСтандартныхОтчетов";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.36.4";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБП.ОбновитьВидыЭлектронныхДокументов_3_0_36";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.36.7";
	Обработчик.Процедура           = "Справочники.ПрочиеДоходыИРасходы.ОбновитьПредопределенныйЭлементРасходыНаУслугиБанков";
	Обработчик.НачальноеЗаполнение = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.36.8";
	Обработчик.Процедура           = "Документы.ПоступлениеТоваровУслуг.ЗаполнитьСчетаРасчетовСКомитентами";
	Обработчик.НачальноеЗаполнение = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.37.1";
	Обработчик.Процедура           = "Документы.ПодтверждениеОплатыНДСВБюджет.ЗарегистрироватьДатуНомерДокументаПодтверждающегоОплатуНДСВБюджет";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.37.2";
	Обработчик.Процедура           = "РегистрыСведений.МетодыРаспределенияКосвенныхРасходовОрганизаций.ЗаполнитьОрганизациюПриОднофирменномУчете";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.37.3";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБП.УдалитьНастройкиФормОтчетов";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.36.13";
	Обработчик.Процедура           = "Справочники.Организации.ПереписатьКодПодчиненностиФССДляИП";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия               = "3.0.36.13";
	Обработчик.Процедура            = "Справочники.Контрагенты.ЗаполнитьПризнакПринадлежностьКонтрагентаГосударственнымОрганам";
	Обработчик.НачальноеЗаполнение  = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	Обработчик.Комментарий = 
		НСтр("ru = 'Заполняет признак принадлежности контрагентов к государственным органам'");
	Обработчик.РежимВыполнения = "Отложенно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.36.15";
	Обработчик.Процедура           = "ЗарплатаКадрыОбновлениеСПредыдущейРедакции.ЗаполнитьРесурсОсновноеМестоРаботы";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.36.17";
	Обработчик.Процедура           = "ОтражениеЗарплатыВБухучете.ЗаполнитьВидОперацииПоЗарплатеВНачислениях";
	Обработчик.НачальноеЗаполнение  = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.36.17";
	Обработчик.Процедура           = "ОтражениеЗарплатыВБухучете.ЗаполнитьВидОперацииПоЗарплатеВНачисленияхДляНатуральныхДоходов";
	Обработчик.НачальноеЗаполнение  = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.37.5";
	Обработчик.Процедура           = "Справочники.ШаблоныДоговоров.ЗаполнениеТиповыхШаблоновДоговоровОтложено";
	Обработчик.НачальноеЗаполнение = Истина; // Процедура должна запускаться при переходе с 2БП на 3БП
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет типовые шаблоны договоров.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.37.10";
	Обработчик.Процедура           = "ПланыСчетов.Хозрасчетный.ПереименоватьСчетНалогаУСН";
	Обработчик.НачальноеЗаполнение = Истина; // Процедура должна запускаться при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.37.11";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБП.УстановитьВестиУчетПоПодразделениям";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.37.23";
	Обработчик.Процедура           = "Документы.КорректировкаПоступления.УстановитьРеквизитКорректироватьНДС";
	Обработчик.НачальноеЗаполнение = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.37.23";
	Обработчик.Процедура           = "Документы.КорректировкаРеализации.УстановитьРеквизитКорректироватьНДС";
	Обработчик.НачальноеЗаполнение = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.37.24";
	Обработчик.Процедура           = "УчетЗарплаты.НастроитьПодсистемуЗарплатаИКадры";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия			   = "3.0.37.27";
	Обработчик.Процедура 		   = "ОбновлениеИнформационнойБазыБП.УстановитьКонстантыПоКомиссионнойДеятельности";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.37.27";
	Обработчик.Процедура           = "Документы.ОтражениеЗарплатыВУчете.ЗаполнитьСуммыНалоговогоУчета";
	Обработчик.НачальноеЗаполнение = Истина; // Процедура должна запускаться при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия               = "3.0.37.30";
	Обработчик.Процедура            = "Справочники.ОбъектыСтатистическогоНаблюдения.ПерезаполнитьПоставляемымиДанными";
	Обработчик.НачальноеЗаполнение  = Ложь; // Не надо выполнять при обновлении с 2БП на 3БП
	Обработчик.ОбщиеДанные 		    = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.37.38";
	Обработчик.Процедура           = "Документы.СчетФактураВыданный.УстановитьВидОперацииНаАвансКомитентуНаЗакупку";
	Обработчик.НачальноеЗаполнение = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.38.1";
	Обработчик.Процедура           = "Справочники.ЗадачиБухгалтера.УдалитьПлатаЗаНегативноеВоздействиеНаОкружающуюСреду"; // Он же вызывает и ЗаполнитьТребованиямиНормативныхДокументов
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.ОбщиеДанные         = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.38.2"; // Должен быть выполнен после УдалитьПлатаЗаНегативноеВоздействиеНаОкружающуюСреду
	Обработчик.Процедура           = "Справочники.ЗадачиБухгалтера.УдалитьНастройкиПлатаЗаНегативноеВоздействиеНаОкружающуюСреду";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.38.3";
	Обработчик.Процедура           = "РегистрыСведений.ПорядокУплатыНалоговНаМестах.ПреобразоватьЗаписиСПустымНалоговымОрганом";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.38.4";
	Обработчик.Процедура           = "РегистрыСведений.ИспользоватьНесколькоБанковскихСчетовОрганизации.УстановитьЗначенияФО";
	Обработчик.НачальноеЗаполнение = Истина; // Процедура должна запускаться при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.38.4";
	Обработчик.Процедура           = "ПланыОбмена.ПоОрганизации.ЗарегистрироватьСпособыОтраженияРасходовСПустойОрганизацией";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения     = "Отложенно";
	Обработчик.Комментарий = 
		НСтр("ru = 'Регистрирует в узлах РИБ ""По организации"" способы отражения расходов с пустой организацией'");
		
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.38.4";
	Обработчик.Процедура           = "Документы.СписаниеСРасчетногоСчета.ЗаменитьКонтрагентаНаФизическоеЛицоМонопольно";
	Обработчик.НачальноеЗаполнение  = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.38.5";
	Обработчик.Процедура           = "Документы.ПлатежноеПоручение.УстановитьВидОперацииМонопольно";
	Обработчик.НачальноеЗаполнение  = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.38.6";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБП.УстановитьКонстантыВестиУчетПоОрганизациям";
	Обработчик.НачальноеЗаполнение = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.38.8";
	Обработчик.Процедура           = "Справочники.Номенклатура.ЗаполнитьВидыНоменклатуры";
	Обработчик.НачальноеЗаполнение = Истина; // Процедура должна запускаться при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.38.8";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБП.УстановитьПоказыватьСчетаВДокументах";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.38.11";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБП.МониторРуководителяУстановитьНастройкиПоУмолчанию";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.38.11";
	Обработчик.Процедура           = "РегистрыСведений.КорреспонденцииСчетов.ЗаполнитьКорреспонденцииСчетов";
	Обработчик.НачальноеЗаполнение = Истина; // Процедура должна запускаться при переходе с 2БП на 3БП
	Обработчик.ОбщиеДанные         = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.38.11";
	Обработчик.Процедура           = "Справочники.ЗарплатныеПроекты.ЗаполнитьБанкПоКлассификатору";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.38.19";
	Обработчик.Процедура           = "ПланыОбмена.ПоОрганизации.ЗарегистрироватьКонтрагентыКонтактныеЛица";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения     = "Отложенно";
	Обработчик.Комментарий = 
		НСтр("ru = 'Регистрирует в узлах РИБ ""По организации"" контрагентов и их контактных лиц.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.38.24";
	Обработчик.Процедура           = "Справочники.ШаблоныДоговоров.ОбновлениеТиповыхШаблоновДоговоров_3_0_38_Отложено";
	Обработчик.НачальноеЗаполнение = Ложь; // Процедура НЕ должна запускаться при переходе с 2БП на 3БП
	Обработчик.РежимВыполнения 	   = "Отложенно";
	Обработчик.Комментарий 		   = НСтр("ru = 'Обновление типовых шаблонов договоров.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.38.31";
	Обработчик.Процедура           = "РегистрыСведений.ДанныеПервичныхДокументов.ЗаполнитьНомераРасходныхКассовыйОрдеров";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.38.36";
	Обработчик.Процедура = "Документы.РегламентнаяОперация.ДобавитьРегламентнуюОперациюРасчетРасходовУменьшающихНалогУСН";
	Обработчик.НачальноеЗаполнение = Истина; // Процедура должна запускаться при переходе с 2БП на 3БП

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.38.36";
	Обработчик.Процедура = "Документы.ЗаписьКУДиР.ДобавитьДвиженияПоРасходамУменьшающимНалогУСН";
	Обработчик.НачальноеЗаполнение = Истина; // Процедура должна запускаться при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия               = "3.0.38.42";
	Обработчик.Процедура            = "Справочники.ПрочиеДоходыИРасходы.ОбновитьПредопределенныеЭлементыКурсовыеИСуммовыеРазницы";
	Обработчик.НачальноеЗаполнение  = Ложь; // Процедура не должна запускаться при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.38.46";
	Обработчик.Процедура = "Документы.СчетФактураВыданный.УстановитьКодВидаОперацииСводныйКомиссионный";
	Обработчик.НачальноеЗаполнение = Истина; // Процедура должна запускаться при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.38.46";
	Обработчик.Процедура = "Документы.СчетФактураПолученный.УстановитьКодВидаОперацииСводныйКомиссионный";
	Обработчик.НачальноеЗаполнение = Истина; // Процедура должна запускаться при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.38.46";
	Обработчик.Процедура = "Документы.ФормированиеЗаписейКнигиПокупок.УстановитьКодВидаОперации";
	Обработчик.НачальноеЗаполнение = Истина; // Процедура должна запускаться при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.38.46";
	Обработчик.Процедура           = "Документы.ВводНачальныхОстатков.ЗаполнитьКодВидаОперацииИСуммыВЖурналеУчетаСФОтложенно";
	Обработчик.НачальноеЗаполнение = Истина; // Процедура должна запускаться при переходе с 2БП на 3БП
    Обработчик.Комментарий = 
		НСтр("ru = 'Заполняет код вида операции и суммы в регистре ""Журнал учета счетов-фактур""'");
	Обработчик.РежимВыполнения = "Отложенно";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.38.46";
	Обработчик.Процедура           = "Документы.ВводНачальныхОстатков.ЗаполнитьКодВидаОперацииВДанныеПоНДСОтложенно";
	Обработчик.НачальноеЗаполнение = Истина; // Процедура должна запускаться при переходе с 2БП на 3БП
    Обработчик.Комментарий = 
		НСтр("ru = 'Заполняет код вида операции по НДС в документе ""Ввод начальных остатков""'");
	Обработчик.РежимВыполнения = "Отложенно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.38.55";
	Обработчик.Процедура           = "Справочники.БанковскиеСчета.ИсправитьВладельцаСчета";
	Обработчик.НачальноеЗаполнение  = Ложь; // Процедура не должна запускаться при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.39.1";
	Обработчик.Процедура           = "РегистрыСведений.УдалитьВыполненныеЗадачиНачалаРаботы.ОчиститьРегистр";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.39.2";
	Обработчик.Процедура           = "Документы.ВводНачальныхОстатков.ВосстановитьКлючиСвязейТабличныхЧастейДокументаВНО";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.39.3";
	Обработчик.Процедура           = "РегистрыСведений.СтатусыДокументов.ЗаполнитьСтатусыОплатыСчетов";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия               = "3.0.39.4";
	Обработчик.Процедура            = "Справочники.НоменклатурныеГруппы.ПерезаполнитьКонстантуИспользоватьНесколькоНоменклатурныхГрупп";
	Обработчик.НачальноеЗаполнение  = Ложь; // Процедура не должна запускаться при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия               = "3.0.39.6";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ДозаполнениеКодовБыстрогоВыбора";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.39.6";
	Обработчик.Процедура           = "Обработки.ФункциональностьПрограммы.ЗаполнитьКонстантуКорректировочныеДокументы";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.39.7";
	Обработчик.Процедура           = "Справочники.ДополнительныеУсловия.ЗаполнениеТиповыхДополнительныхУсловий";
	Обработчик.НачальноеЗаполнение = Истина; // Процедура должна запускаться при переходе с 2БП на 3БП
	Обработчик.Комментарий = НСтр("ru = 'Создает типовые дополнительные условия.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.39.7";
	Обработчик.Процедура           = "Справочники.ДополнительныеУсловия.ЗаполнениеТиповыхДополнительныхУсловийВОрганизации";
	Обработчик.НачальноеЗаполнение = Истина; // Процедура должна запускаться при переходе с 2БП на 3БП
	Обработчик.Комментарий = НСтр("ru = 'Заполняет дополнительные условия организаций.'");

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.39.7";
	Обработчик.Процедура           = "Справочники.ДополнительныеУсловия.ЗаполнениеТиповыхДополнительныхУсловийВСчетахНаОплатуПокупателю";
	Обработчик.НачальноеЗаполнение = Истина; // Процедура должна запускаться при переходе с 2БП на 3БП
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет дополнительные условия счетов на оплату.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.39.8";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБП.УстановитьКонстантыУчетаНДСспецРежимы";
	Обработчик.НачальноеЗаполнение = Истина; // Процедура должна запускаться при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.39.9";
	Обработчик.Процедура           = "Документы.СчетНаОплатуПокупателю.ОбработатьТаблицуУслуги"; 
	Обработчик.НачальноеЗаполнение = Истина; // Процедура должна запускаться при переходе с 2БП на 3БП
	Обработчик.Комментарий = 
		НСтр("ru = 'Объединяет данные закладок ""Товары"" и ""Услуги""'");
	Обработчик.РежимВыполнения = "Отложенно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.39.9";
	Обработчик.Процедура           = "Документы.СчетНаОплатуПоставщика.ОбработатьТаблицуУслуги";
	Обработчик.НачальноеЗаполнение = Истина; // Процедура должна запускаться при переходе с 2БП на 3БП
    Обработчик.Комментарий = 
		НСтр("ru = 'Объединяет данные закладок ""Товары"" и ""Услуги""'");
	Обработчик.РежимВыполнения = "Отложенно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.39.10";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБП.ЗаполнитьИсториюРегистрацийВНалоговомОргане";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.39.13";
	Обработчик.Процедура           = "Документы.ПоступлениеНаРасчетныйСчет.ЗаменитьКонтрагентаНаФизическоеЛицо";
	Обработчик.НачальноеЗаполнение  = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.39.13";
	Обработчик.Процедура           = "Справочники.ПрочиеДоходыИРасходы.СоздатьУстановитьПредопределенныеЭлементыДляУчетаЗарплаты";
	Обработчик.НачальноеЗаполнение  = Истина; // Надо выполнять при обновлении с 2БП на 3БП
		
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.39.17";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБП.ЗаполнитьРеквизитыКлючевыхОпераций";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.ОбщиеДанные         = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.39.19";
	Обработчик.Процедура           = "Документы.КорректировкаПоступления.УстановитьРеквизитСуммаВРозницеДоИзменения";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.39.18";
	Обработчик.Процедура           = "Справочники.Резервы.СоздатьЭлементыПоУмолчанию";
	Обработчик.НачальноеЗаполнение = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.39.18";
	Обработчик.Процедура           = "РегистрыСведений.НастройкиУчетаЗарплаты.ПерезаполнитьЗначенияПоУмолчанию";
	Обработчик.НачальноеЗаполнение = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.39.21";
	Обработчик.Процедура           = "РегистрыСведений.ЖурналУчетаСчетовФактур.ОчиститьКППКонтрагента";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.39.21";
	Обработчик.Процедура           = "РегистрыСведений.РасчетЗемельногоНалога.ПеренестиПериодСтроительстваИзРесурсовВИзмерения";
	Обработчик.НачальноеЗаполнение = Ложь; // Не надо выполнять при обновлении с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия               = "3.0.39.22";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ДозаполнениеКодовБыстрогоВыбора";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия               = "3.0.39.22";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнитьРеквизитыСчетовУчетаРезервов";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.39.23";
	Обработчик.Процедура           = "РегистрыСведений.КорреспонденцииСчетов.ЗаполнитьКорреспонденцииСчетов";
	Обработчик.НачальноеЗаполнение = Ложь; // Процедура должна запускаться при переходе с 2БП на 3БП
	Обработчик.ОбщиеДанные         = Истина;
		
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.39.27";
	Обработчик.Процедура           = "Справочники.ЗадачиБухгалтера.ЗаполнитьТребованиямиНормативныхДокументов";
	Обработчик.НачальноеЗаполнение = Ложь; // Для начального заполнения этот обработчик вызван в версии 3.0.25.4
	Обработчик.ОбщиеДанные         = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия               = "3.0.39.28";
	Обработчик.Процедура            = "Справочники.Организации.ЗаполнитьИспользуемыеВидыОрганизаций";
	Обработчик.НачальноеЗаполнение  = Истина;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия               = "3.0.39.29";
	Обработчик.Процедура            = "Справочники.ВидыНалоговИПлатежейВБюджет.ЗаполнитьПоставляемыеДанные";
	Обработчик.НачальноеЗаполнение  = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия               = "3.0.39.30";
	Обработчик.Процедура            = "Документы.ПлатежноеПоручение.ЗаполнитьРеквизитыНалогВидНалоговогоОбязательства";
	Обработчик.НачальноеЗаполнение  = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия               = "3.0.39.31";
	Обработчик.Процедура            = "Документы.СписаниеСРасчетногоСчета.ЗаполнитьРеквизитНалог";
	Обработчик.НачальноеЗаполнение  = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия               = "3.0.39.31";
	Обработчик.Процедура            = "Документы.РасходныйКассовыйОрдер.ЗаполнитьРеквизитНалог";
	Обработчик.НачальноеЗаполнение  = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия               = "3.0.39.32";
	Обработчик.Процедура = "Справочники.Контрагенты.ЗаполнитьНалоговыйНомерИностранногоКонтрагента";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.39.43";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБП.ОбновитьВидыЭлектронныхДокументов_3_0_39";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.39.49";
	Обработчик.Процедура           = "ПланыСчетов.Хозрасчетный.ОбновитьПараметрыСчета96_09";
	Обработчик.НачальноеЗаполнение = Истина; // Процедура должна запускаться при переходе с 2БП на 3БП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия               = "3.0.39.53";
	Обработчик.Процедура = "Справочники.Контрагенты.ЗаполнитьПустуюСтрануРегистрации";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.39.54";
	Обработчик.Процедура           = "РегистрыСведений.ПрефиксыИнформационныхБаз.ЗаполнитьПрефиксТекущейИБ";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.39.54";
	Обработчик.Процедура           = "Справочники.СтатистическиеПоказатели.ЗаполнитьПоставляемымиПравилами";
	Обработчик.ОбщиеДанные         = Истина;
	Обработчик.НачальноеЗаполнение = Истина;
	
КонецПроцедуры

// См. описание в общем модуле ОбновлениеИнформационнойБазыБСП.
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
	ОбновлениеСПредыдущейРедакции.УстановитьПраваПервогоАдминистратора();
	
	ОбновлениеСПредыдущейРедакции.УстановитьВестиУчетПоПодразделениям();
	
	ОбновлениеСПредыдущейРедакции.ОчиститьВерисиюПодсистемыБСППриПереходеС2БП();
	
	ОбновлениеСПредыдущейРедакции.ОбработатьПотерянныеОбъекты();
	
	ОбновлениеСПредыдущейРедакции.ОчиститьНовыеПодсистемы();
	
КонецПроцедуры

// См. описание в общем модуле ОбновлениеИнформационнойБазыБСП.
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
КонецПроцедуры

// См. описание в общем модуле ОбновлениеИнформационнойБазыБСП.
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы ПредыдущееИмяКонфигурации. 
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации  = "БухгалтерияПредприятияБазовая";
	Обработчик.Процедура                  = "Обработки.ФункциональностьПрограммы.УстановитьПолнуюФункциональность";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации  = "БухгалтерияПредприятияБазовая";
	Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыБП.УстановитьКонстантыВестиУчетПоОрганизациям";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации  = "БухгалтерияПредприятия";
	Обработчик.Процедура                  = "УчетОбособленныхПодразделений.ПодготовитьИнформационнуюБазу";
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
	Если ОбновлениеСПредыдущейРедакции.ЭтоПереходСРедакции20() Тогда 
		
		РежимОбновленияДанных = "ОбновлениеВерсии";
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, 
	Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Заполнение пустой ИБ

// Демонстрирует процедуру-обработчик обновления и первоначального заполнения
// данных ИБ, которая выполняется однократно при переходе на версию 1.0.0.0.
//
Процедура ПервыйЗапуск() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// В новой базе, а также при обновлении с редакции БП 2.0 устанавливается режим интерфейса "Такси"
	Константы.ИнтерфейсТакси.Установить(Истина);
	Константы.ИнтерфейсВерсии82.Установить(Ложь);
	Константы.ИнтерфейсВерсии77.Установить(Ложь);

	Если ЗначениеЗаполнено(Константы.УдалитьНомерВерсииКонфигурации.Получить()) Тогда 
		Возврат; // Переход с версии 2.0
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = НайтиСоздатьВалюту("643", "руб.", "Российский рубль", "рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2");
	
	Константы.ВалютаРегламентированногоУчета.Установить(ВалютаРегламентированногоУчета);
	Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Установить(Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить);
	Константы.ИспользоватьРучнуюКорректировкуДвижений.Установить(Истина);
	Константы.ОтключитьКонтрольОтрицательныхОстатков.Установить(Истина);
	Константы.ИспользоватьУведомленияОКонтролируемыхСделках.Установить(Истина);
	
	Константы.ВестиУчетПоОрганизациям.Установить(Истина);
	Константы.ОсновнойВидОрганизации.Установить(Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	Константы.ОсновнаяСистемаНалогообложения.Установить(Перечисления.СистемыНалогообложения.Общая);
	
	// Установить флаг учета авансов в валюте по курсу авансов в НУ
	Константы.НачалоОценкиДоходовИРасходовВНУПоКурсуАвансов.Установить(Дата("20100101"));
	
	// Обработка плана счетов
	УстановитьПараметрыСчетовБУ();
	
	ЗаполнениеКодовБыстрогоВыбора();
	
	УстановитьСуммовойУчетНаСкладах();
	
	УстановитьУчетНаСчетахТоваровВРознице();
	
	УстановитьУчетПоДокументамНаСчетахРасчетов();
	
	УстановитьУчетНаСчетахУчетаЗарплаты();
	
	УстановитьВестиУчетПоПодразделениям();
	
	УстановитьВестиУчетЗатратПоПодразделениям();
	
	// По умолчанию блок зарплаты отключен
	УчетЗарплаты.ОтключитьПодсистемуУчетаЗарплатыИКадров();
	
	// Заполнение справочников
	
	ЗаполнитьСправочникРасходыБудущихПериодов();
	
	ВключитьРежимРазделенияИтоговРегистровНакопленийИБухгалтерии();
	
	КонтактнаяИнформацияОбновлениеИБ();
	
	ЗаполнитьРеквизитыКлючевыхОпераций();
	
	Справочники.СтатьиЗатрат.СоздатьПредопределенныеЭлементыНоваяИБ();
	Справочники.ПрочиеДоходыИРасходы.СоздатьПредопределенныеЭлементыНоваяИБ();
	РегистрыСведений.СтатьиЗатратПоНалогамВзносамСФОТ.ЗаполнитьСоответствияСтатейЗатратПоНалогамВзносамСФОТ();
	Справочники.Резервы.СоздатьЭлементыПоУмолчанию();
	
	МенеджерОборудованияВызовСервераПереопределяемый.ОбновитьПоставляемыеДрайвера();
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обновление ИБ

Процедура ЗаполнениеКодовБыстрогоВыбора(ТолькоНезаполненные = Ложь) Экспорт
	
	МассивПлановСчетов = Новый Массив;
	МассивПлановСчетов.Добавить(ПланыСчетов.Хозрасчетный);
	
	Для Каждого ЭлементПланСчетов ИЗ МассивПлановСчетов Цикл
		Попытка
			ПланСчетов = ЭлементПланСчетов.Выбрать();
			Пока ПланСчетов.Следующий() Цикл
				Объект = ПланСчетов.ПолучитьОбъект();
				
				Если ТолькоНезаполненные Тогда
					Если НЕ ЗначениеЗаполнено(Объект.КодБыстрогоВыбора) Тогда
						Объект.КодБыстрогоВыбора = СокрЛП(СтрЗаменить(Объект.Код, ".", ""));
					КонецЕсли;
				Иначе
					Объект.КодБыстрогоВыбора = СокрЛП(СтрЗаменить(Объект.Код, ".", ""));
				КонецЕсли;
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
				
			КонецЦикла;
		Исключение
			ТекстСообщения = НСтр("ru='Операция не выполнена'");
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДозаполнениеКодовБыстрогоВыбора() Экспорт
	
	ЗаполнениеКодовБыстрогоВыбора(Истина);
	
КонецПроцедуры

Процедура УстановитьВестиУчетПоПодразделениям() Экспорт
	
	Константы.ВестиУчетПоПодразделениям.Установить(Истина);
	
КонецПроцедуры

Процедура ВключитьРежимРазделенияИтоговРегистровНакопленийИБухгалтерии() Экспорт
	
	Для Каждого Регистр Из РегистрыНакопления Цикл
			Регистр.УстановитьРежимРазделенияИтогов(Истина);
	КонецЦикла;
	
	Для Каждого Регистр Из РегистрыБухгалтерии Цикл
			Регистр.УстановитьРежимРазделенияИтогов(Истина);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОпределитьПараметруУчетаРасчетовСРаботниками() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	БУ = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
	ВестиСводныйУчетРасчетовСРаботниками = БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций, "ВидСубконто") = Неопределено;
	Константы.ВедетсяУчетРасчетовПоЗарплатеСводно.Установить(ВестиСводныйУчетРасчетовСРаботниками);
	Константы.ВедетсяУчетРасчетовПоЗарплатеПоРаботникам.Установить(НЕ ВестиСводныйУчетРасчетовСРаботниками);
	
КонецПроцедуры


Процедура РазделитьЗадолженностьВДокументах() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КорректировкаДолгаДебиторскаяЗадолженность.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.КорректировкаДолга.ДебиторскаяЗадолженность КАК КорректировкаДолгаДебиторскаяЗадолженность
	|ГДЕ
	|	КорректировкаДолгаДебиторскаяЗадолженность.УдалитьВидЗадолженности = ЗНАЧЕНИЕ(Перечисление.ВидыЗадолженности.Кредиторская)
	|
	|СГРУППИРОВАТЬ ПО
	|	КорректировкаДолгаДебиторскаяЗадолженность.Ссылка";
	
	ВыборкаДокументов = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
		СтрокиКредиторки = ДокументОбъект.ДебиторскаяЗадолженность.НайтиСтроки(Новый Структура("УдалитьВидЗадолженности", Перечисления.ВидыЗадолженности.Кредиторская));
		Для Каждого СтрокаКредиторки Из СтрокиКредиторки Цикл
			
			НоваяСтрока = ДокументОбъект.КредиторскаяЗадолженность.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКредиторки);
			ДокументОбъект.ДебиторскаяЗадолженность.Удалить(СтрокаКредиторки);
			
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЗначениеРеквизитаВалютный() Экспорт
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константы КАК Константы
	|		ПО ДоговорыКонтрагентов.ВалютаВзаиморасчетов <> Константы.ВалютаРегламентированногоУчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БанковскиеСчета.Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константы КАК Константы
	|		ПО БанковскиеСчета.ВалютаДенежныхСредств <> Константы.ВалютаРегламентированногоУчета";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	Попытка
		Пока Выборка.Следующий() Цикл
			СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СправочникОбъект.Валютный = Истина;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
		КонецЦикла;
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = НСтр("ru = 'Операция не выполнена'");
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ОбновитьТипыПредопределеннойКонтактнойИнформации() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыКонтактнойИнформации.Ссылка
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.Предопределенный = ИСТИНА
	|	И ВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.ПустаяСсылка)";
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		КонтактнаяИнформацияОбновлениеИБ();
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьДатуТекущейВерсии() Экспорт
	
	// в режиме сервиса не требуется напоминать об обновлении
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	Константы.ДатаТекущейВерсии.Установить(Дата(2015,04,09));
	
КонецПроцедуры

Процедура УстановитьКорректировкуДляДокументовПоНалогамСФОТ() Экспорт
	
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.НДФЛ);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоСоциальномуСтрахованию);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСчетов", МассивСчетов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СписаниеСРасчетногоСчета.Ссылка
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|ГДЕ
	|	СписаниеСРасчетногоСчета.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога)
	|	И СписаниеСРасчетногоСчета.Проведен = ИСТИНА
	|	И СписаниеСРасчетногоСчета.РучнаяКорректировка = ЛОЖЬ
	|	И СписаниеСРасчетногоСчета.СчетУчетаРасчетовСКонтрагентом В ИЕРАРХИИ(&МассивСчетов)";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Попытка
			Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.Прямой);
			Пока Выборка.Следующий() Цикл
				ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ДокументОбъект.РучнаяКорректировка = Истина;
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
			КонецЦикла;
		Исключение
			ТекстСообщения = НСтр("ru='Операция не выполнена'");
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьСчетаФактурыСозданныеВНО() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетФактураВыданныйДокументыОснования.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_КорректныеСчетаФактуры
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|ГДЕ
	|	СчетФактураВыданныйДокументыОснования.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаАванс)
	|	И СчетФактураВыданныйДокументыОснования.Ссылка.СформированПриВводеНачальныхОстатковНДС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетФактураВыданный.Ссылка,
	|	СчетФактураВыданный.ДокументОснование
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаАванс)
	|	И СчетФактураВыданный.СформированПриВводеНачальныхОстатковНДС
	|	И ВЫБОР
	|			КОГДА СчетФактураВыданный.Ссылка В
	|					(ВЫБРАТЬ
	|						ВТ_КорректныеСчетаФактуры.Ссылка
	|					ИЗ
	|						ВТ_КорректныеСчетаФактуры)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	
	ВыборкаДокументов = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		Попытка
			ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
			НоваяСтрока                   = ДокументОбъект.ДокументыОснования.Добавить();
			НоваяСтрока.ДокументОснование = ВыборкаДокументов.ДокументОснование;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
		Исключение
			ТекстСообщения	= НСтр("ru = 'Не удалось обновить данные документа'");
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьЗарплатуКВыплатеОрганизаций() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВедомостьНаВыплатуЗарплаты.Ссылка
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплаты КАК ВедомостьНаВыплатуЗарплаты";
	
	ВыборкаДокументов = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		Попытка
			ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
			ДокументОбъект.СуммаДокумента = ДокументОбъект.Зарплата.Итог("Сумма") + ДокументОбъект.Зарплата.Итог("КомпенсацияЗаЗадержкуЗарплаты");
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
		Исключение
			ТекстСообщения	= НСтр("ru = 'Не удалось обновить данные документа'");
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьДокументыКорректировкаДолга() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЧДебиторскаяЗадолженность.Ссылка 
	|ИЗ
	|	Документ.КорректировкаДолга.ДебиторскаяЗадолженность КАК ТЧДебиторскаяЗадолженность
	|ГДЕ
	|	ТЧДебиторскаяЗадолженность.Ссылка.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКорректировкаДолга.Прочее)
	|	И ТЧДебиторскаяЗадолженность.Ссылка.ВидАвансаЗадолженности = ЗНАЧЕНИЕ(Перечисление.ВидыАвансаЗадолженности.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ // без повторов
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЧКредиторскаяЗадолженность.Ссылка
	|ИЗ
	|	Документ.КорректировкаДолга.КредиторскаяЗадолженность КАК ТЧКредиторскаяЗадолженность
	|ГДЕ
	|	ТЧКредиторскаяЗадолженность.Ссылка.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКорректировкаДолга.Прочее)
	|	И ТЧКредиторскаяЗадолженность.Ссылка.ВидАвансаЗадолженности = ЗНАЧЕНИЕ(Перечисление.ВидыАвансаЗадолженности.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка 
	|";
	
	ВыборкаДокументов = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		ДокОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
	
		Документы.КорректировкаДолга.КонвертацияДокументаКорректировкаДолгаПоМоделиМетаданныхРелиза3020ИСтарше(ДокОбъект);
		
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ОбработатьЖурналУчетаСчетовФактур() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетФактураВыданный.Ссылка КАК СчетФактура,
	|	СчетФактураВыданный.Исправление,
	|	СчетФактураВыданный.НомерИсправления,
	|	СчетФактураВыданный.Дата,
	|	СчетФактураВыданный.УдалитьНомерИсправленияИсходногоДокумента КАК НомерИсправленияИсходногоДокумента,
	|	СчетФактураВыданный.УдалитьДатаИсправленияИсходногоДокумента КАК ДатаИсправленияИсходногоДокумента
	|ПОМЕСТИТЬ ВТ_СчФактурыДокументы
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.Проведен = ИСТИНА
	|	И СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|	И (СчетФактураВыданный.Исправление
	|			ИЛИ СчетФактураВыданный.ИсправляемыйСчетФактура.Исправление)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетФактураПолученный.Ссылка,
	|	СчетФактураПолученный.Исправление,
	|	СчетФактураПолученный.НомерИсправления,
	|	СчетФактураПолученный.Дата,
	|	СчетФактураПолученный.УдалитьНомерИсправленияИсходногоДокумента КАК НомерИсправленияИсходногоДокумента,
	|	СчетФактураПолученный.УдалитьДатаИсправленияИсходногоДокумента КАК ДатаИсправленияИсходногоДокумента
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.Проведен = ИСТИНА
	|	И СчетФактураПолученный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|	И (СчетФактураПолученный.Исправление
	|			ИЛИ СчетФактураПолученный.ИсправляемыйСчетФактура.Исправление)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЖурналУчетаСчетовФактур.Регистратор КАК Регистратор,
	|	ВТ_СчФактурыДокументы.Исправление,
	|	ВТ_СчФактурыДокументы.НомерИсправления,
	|	ВТ_СчФактурыДокументы.Дата,
	|	ВТ_СчФактурыДокументы.НомерИсправленияИсходногоДокумента,
	|	ВТ_СчФактурыДокументы.ДатаИсправленияИсходногоДокумента,
	|	ВТ_СчФактурыДокументы.СчетФактура
	|ИЗ
	|	ВТ_СчФактурыДокументы КАК ВТ_СчФактурыДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналУчетаСчетовФактур КАК ЖурналУчетаСчетовФактур
	|		ПО ВТ_СчФактурыДокументы.СчетФактура = ЖурналУчетаСчетовФактур.СчетФактура
	|ГДЕ
	|	(ЖурналУчетаСчетовФактур.НомерИсправления <> ВТ_СчФактурыДокументы.НомерИсправленияИсходногоДокумента
	|			ИЛИ ЖурналУчетаСчетовФактур.ДатаИсправления <> ВТ_СчФактурыДокументы.ДатаИсправленияИсходногоДокумента
	|			ИЛИ ВТ_СчФактурыДокументы.Исправление
	|				И (ЖурналУчетаСчетовФактур.НомерИсправленияКорректировочногоСчетаФактуры <> ВТ_СчФактурыДокументы.НомерИсправления
	|					ИЛИ ЖурналУчетаСчетовФактур.ДатаИсправленияКорректировочногоСчетаФактуры <> ВТ_СчФактурыДокументы.Дата))
	|ИТОГИ ПО
	|	Регистратор";
	
	СчетаФактурыДляКорректировки = Новый ТаблицаЗначений;
	
	СчетаФактурыДляКорректировки.Колонки.Добавить("СчетФактура");
	СчетаФактурыДляКорректировки.Колонки.Добавить("Исправление");
	СчетаФактурыДляКорректировки.Колонки.Добавить("НомерИсправления");
	СчетаФактурыДляКорректировки.Колонки.Добавить("Дата");
	СчетаФактурыДляКорректировки.Колонки.Добавить("НомерИсправленияИсходногоДокумента");
	СчетаФактурыДляКорректировки.Колонки.Добавить("ДатаИсправленияИсходногоДокумента");

	ВыборкаРегистраторы = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);			   
	
	Пока ВыборкаРегистраторы.Следующий()Цикл
		
		НаборЗаписей = РегистрыСведений.ЖурналУчетаСчетовФактур.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаРегистраторы.Регистратор);
		НаборЗаписей.Прочитать();
		
		ВыборкаСчетаФактуры = ВыборкаРегистраторы.Выбрать();
		
		СчетаФактурыДляКорректировки.Очистить();
		Пока ВыборкаСчетаФактуры.Следующий() Цикл
			СчетФактураДляКорректировки = СчетаФактурыДляКорректировки.Добавить();
			ЗаполнитьЗначенияСвойств(СчетФактураДляКорректировки, ВыборкаСчетаФактуры);
		КонецЦикла;
		
		Для каждого СтрокаНабора Из НаборЗаписей Цикл
			
			СчетФактура = СчетаФактурыДляКорректировки.Найти(СтрокаНабора.СчетФактура, "СчетФактура");
			
			Если СчетФактура = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			
			Если СчетФактура.Исправление Тогда
				СтрокаНабора.НомерИсправленияКорректировочногоСчетаФактуры = СчетФактура.НомерИсправления;
				СтрокаНабора.ДатаИсправленияКорректировочногоСчетаФактуры  = СчетФактура.Дата;
			КонецЕсли;
			
			СтрокаНабора.НомерИсправления = СчетФактура.НомерИсправленияИсходногоДокумента;
			СтрокаНабора.ДатаИсправления  = СчетФактура.ДатаИсправленияИсходногоДокумента;
			
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьАвансовыеСчетаФактурыПолученные() Экспорт

	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументыОснования.Ссылка,
	|	КОЛИЧЕСТВО(ДокументыОснования.ДокументОснование) КАК КоличествоОснований
	|ПОМЕСТИТЬ СчетФактурыПолученные
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК ДокументыОснования
	|ГДЕ
	|	ДокументыОснования.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.НаАванс)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументыОснования.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетФактуры.Ссылка
	|ИЗ
	|	СчетФактурыПолученные КАК СчетФактуры
	|ГДЕ
	|	СчетФактуры.КоличествоОснований > 1";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
	
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
		
			ОбрабатываемыйСчетФактура = Выборка.Ссылка;
			
			ОбъектСчетФактура = ОбрабатываемыйСчетФактура.ПолучитьОбъект();
			ДокументыОснования = ОбъектСчетФактура.ДокументыОснования;
			ДокументыОснования.Очистить();
			НоваяСтрокаОснований = ДокументыОснования.Добавить();
			НоваяСтрокаОснований.ДокументОснование = ОбъектСчетФактура.ДокументОснование;
			
			Попытка
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектСчетФактура);
			Исключение
				ТекстСообщения	= НСтр("ru = 'Не удалось обновить данные документа'");
				ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));			
			КонецПопытки;
			
		КонецЦикла;
	
	КонецЕсли;

КонецПроцедуры

Процедура ОбработатьДвиженияПоРегистрамНДС() Экспорт
	
	ПустыеСсылкиИсправленныйСчетФактура = Новый СписокЗначений;
	ПустыеСсылкиИсправленныйСчетФактура.Добавить(Документы.КорректировкаПоступления.ПустаяСсылка());
	ПустыеСсылкиИсправленныйСчетФактура.Добавить(Документы.КорректировкаРеализации.ПустаяСсылка());
	ПустыеСсылкиИсправленныйСчетФактура.Добавить(Документы.СчетФактураПолученный.ПустаяСсылка());
	
	// НДС предъявленный
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ПустыеСсылкиИсправленныйСчетФактура", ПустыеСсылкиИсправленныйСчетФактура);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НДСПредъявленный.Регистратор
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный КАК НДСПредъявленный
	|ГДЕ
	|	НДСПредъявленный.ИсправленныйСчетФактура <> НЕОПРЕДЕЛЕНО
	|	И НДСПредъявленный.ИсправленныйСчетФактура В(&ПустыеСсылкиИсправленныйСчетФактура)";
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
	
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
		
			НаборЗаписейНДСПредъявленный = РегистрыНакопления.НДСПредъявленный.СоздатьНаборЗаписей();
			НаборЗаписейНДСПредъявленный.Отбор.Регистратор.Установить(Выборка.Регистратор);
			НаборЗаписейНДСПредъявленный.Прочитать();
			УчетНДС.ПривестиПустоеИзмерениеИсправленныйСчетФактура(НаборЗаписейНДСПредъявленный);
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписейНДСПредъявленный);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПустыеСсылкиИсправленныйСчетФактура.Добавить(Документы.СчетФактураВыданный.ПустаяСсылка());
	
	// НДС записи книги покупок
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ПустыеСсылкиИсправленныйСчетФактура", ПустыеСсылкиИсправленныйСчетФактура);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаписиКнигиПокупок.Регистратор
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок КАК ЗаписиКнигиПокупок
	|ГДЕ
	|	ЗаписиКнигиПокупок.ИсправленныйСчетФактура <> НЕОПРЕДЕЛЕНО
	|	И ЗаписиКнигиПокупок.ИсправленныйСчетФактура В(&ПустыеСсылкиИсправленныйСчетФактура)";
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
	
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
		
			НаборЗаписейНДСПокупки = РегистрыНакопления.НДСЗаписиКнигиПокупок.СоздатьНаборЗаписей();
			НаборЗаписейНДСПокупки.Отбор.Регистратор.Установить(Выборка.Регистратор);
			НаборЗаписейНДСПокупки.Прочитать();
			УчетНДС.ПривестиПустоеИзмерениеИсправленныйСчетФактура(НаборЗаписейНДСПокупки);
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписейНДСПокупки);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// НДС записи книги продаж
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ПустыеСсылкиИсправленныйСчетФактура", ПустыеСсылкиИсправленныйСчетФактура);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаписиКнигиПродаж.Регистратор
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК ЗаписиКнигиПродаж
	|ГДЕ
	|	ЗаписиКнигиПродаж.ИсправленныйСчетФактура <> НЕОПРЕДЕЛЕНО
	|	И ЗаписиКнигиПродаж.ИсправленныйСчетФактура В(&ПустыеСсылкиИсправленныйСчетФактура)";
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
	
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
		
			НаборЗаписейНДСПродажи = РегистрыНакопления.НДСЗаписиКнигиПродаж.СоздатьНаборЗаписей();
			НаборЗаписейНДСПродажи.Отбор.Регистратор.Установить(Выборка.Регистратор);
			НаборЗаписейНДСПродажи.Прочитать();
			УчетНДС.ПривестиПустоеИзмерениеИсправленныйСчетФактура(НаборЗаписейНДСПродажи);
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписейНДСПродажи);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьТекстЗапросаДляПечатиСправкиРасчетаРублевыеСуммыДокументовВВалюте(СтруктураПараметров, НомераТаблиц)
	
	МетаданныеДокумента = СтруктураПараметров.МетаданныеДокумента;
	
	ВыбратьТаблицыПодчиненных = СтруктураПараметров.ВыбратьТаблицыПодчиненных;
	
	ИмяРеквизитаСвязиСПодчиненными = СтруктураПараметров.ИмяРеквизитаСвязиСПодчиненными;
	
	НаправлениеДвижения = СтруктураПараметров.НаправлениеДвижения;
	
	ИмяДокумента = МетаданныеДокумента.Имя;
	
	НомераТаблиц.Вставить("ТаблицаДокументовРегистраРублевыеСуммыСрезПоследних", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВТ_ТаблицаПоШапкеДокумента", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ПредварительнаяТаблицаДляРасчетаРублевыхСумм", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РублевыеСуммыДокументовВВалюте.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ТаблицаДокументовРегистраРублевыеСуммыСрезПоследних
	|ИЗ
	|	РегистрСведений.РублевыеСуммыДокументовВВалюте КАК РублевыеСуммыДокументовВВалюте
	|ГДЕ
	|	РублевыеСуммыДокументовВВалюте.Регистратор ССЫЛКА Документ."+ИмяДокумента+"
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеОбрабатываемогоДокумента.Ссылка КАК Ссылка,
	|	ДанныеОбрабатываемогоДокумента.Дата КАК Дата,
	|	"+?(МетаданныеДокумента.Реквизиты.Найти("ВалютаДокумента") = Неопределено, "ДанныеОбрабатываемогоДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов", "ДанныеОбрабатываемогоДокумента.ВалютаДокумента")+" КАК ВалютаДокумента,
	|	ДанныеОбрабатываемогоДокумента.Организация КАК Организация,
	|	"+?(МетаданныеДокумента.Реквизиты.Найти("СчетУчетаРасчетовСКонтрагентом") = Неопределено, "Значение(ПланСчетов.Хозрасчетный.ПустаяСсылка)", ?(ИмяДокумента = "ВозвратТоваровПоставщику", "ДанныеОбрабатываемогоДокумента.СчетУчетаРасчетовПоПретензиям", "ДанныеОбрабатываемогоДокумента.СчетУчетаРасчетовСКонтрагентом"))+" КАК СчетУчетаРасчетовСКонтрагентом,
	|	"+?(МетаданныеДокумента.Реквизиты.Найти("СчетУчетаРасчетовПоТаре") = Неопределено, "Значение(ПланСчетов.Хозрасчетный.ПустаяСсылка)", "ДанныеОбрабатываемогоДокумента.СчетУчетаРасчетовПоТаре")+" КАК СчетУчетаРасчетовПоТаре,";
	
	Если НЕ ИмяДокумента = "КорректировкаПоступления" и НЕ ИмяДокумента = "КорректировкаРеализации" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|	"+?(ВыбратьТаблицыПодчиненных, "ДанныеОбрабатываемогоДокумента."+ИмяРеквизитаСвязиСПодчиненными+".КурсВзаиморасчетов", ?(МетаданныеДокумента.Реквизиты.Найти("КурсВзаиморасчетов") = Неопределено, "ДанныеОбрабатываемогоДокумента.КурсДокумента", "ДанныеОбрабатываемогоДокумента.КурсВзаиморасчетов"))+" КАК КурсВзаиморасчетов,
		|	"+?(ВыбратьТаблицыПодчиненных, "ДанныеОбрабатываемогоДокумента."+ИмяРеквизитаСвязиСПодчиненными+".КратностьВзаиморасчетов", ?(МетаданныеДокумента.Реквизиты.Найти("КратностьВзаиморасчетов") = Неопределено, "ДанныеОбрабатываемогоДокумента.КратностьДокумента", "ДанныеОбрабатываемогоДокумента.КратностьВзаиморасчетов"))+" КАК КратностьВзаиморасчетов,";
		
	Иначе
		
		ТекстЗапроса = ТекстЗапроса + "
		|	ДанныеОбрабатываемогоДокумента.ВидОперации КАК ВидОперации,";
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|	"+?(МетаданныеДокумента.Реквизиты.Найти("ДоговорКонтрагента") = Неопределено, "ЛОЖЬ", "ЕСТЬNULL(ДанныеОбрабатываемогоДокумента.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах, ЛОЖЬ)")+" КАК РасчетыВУсловныхЕдиницах,
	|	"+?(МетаданныеДокумента.Реквизиты.Найти("ДоговорКонтрагента") = Неопределено, "ЛОЖЬ", "ЕСТЬNULL(ДанныеОбрабатываемогоДокумента.ДоговорКонтрагента.УчетАгентскогоНДС, ЛОЖЬ)")+" КАК УчетАгентскогоНДС,
	|	"+?(ВыбратьТаблицыПодчиненных, "ДанныеОбрабатываемогоДокумента."+ИмяРеквизитаСвязиСПодчиненными+".СуммаВключаетНДС", ?(МетаданныеДокумента.Реквизиты.Найти("СуммаВключаетНДС") = Неопределено, "ЛОЖЬ","ДанныеОбрабатываемогоДокумента.СуммаВключаетНДС"))+" КАК СуммаВключаетНДС,
	|	"+?(МетаданныеДокумента.Реквизиты.Найти("СтавкаНДС") = Неопределено, "НЕОПРЕДЕЛЕНО","ДанныеОбрабатываемогоДокумента.СтавкаНДС")+" КАК СтавкаНДС,
	|	"+?(ИмяДокумента = "ОтчетКомиссионераОПродажах" или ИмяДокумента = "ОтчетКомитентуОПродажах", "ДанныеОбрабатываемогоДокумента.СтавкаНДСВознаграждения", 0)+" КАК СтавкаНДСВознаграждения";
	
	Если ИмяДокумента = "ОтчетКомиссионераОПродажах" Тогда
		
		ТекстЗапроса = ТекстЗапроса + ",
		|	ДанныеОбрабатываемогоДокумента.СчетУчетаРасчетовЗаПосредническиеУслуги КАК СчетУчетаРасчетовЗаПосредническиеУслуги";
		
	КонецЕсли;
		
	ТекстЗапроса = ТекстЗапроса + "
	|ПОМЕСТИТЬ ВТ_ТаблицаПоШапкеДокумента
	|ИЗ
	|	Документ."+ИмяДокумента+" КАК ДанныеОбрабатываемогоДокумента
	|ГДЕ
	|	НЕ ДанныеОбрабатываемогоДокумента.Ссылка В(ВЫБРАТЬ ТаблицаДокументовРегистраРублевыеСуммыСрезПоследних.Регистратор ИЗ ТаблицаДокументовРегистраРублевыеСуммыСрезПоследних КАК ТаблицаДокументовРегистраРублевыеСуммыСрезПоследних)
	|	И ДанныеОбрабатываемогоДокумента.Проведен
	|	И "+?(МетаданныеДокумента.Реквизиты.Найти("ВалютаДокумента") = Неопределено, "ДанныеОбрабатываемогоДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов", "ДанныеОбрабатываемогоДокумента.ВалютаДокумента")+" <> &ВалютаРеглУчета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|   СчетУчетаРасчетовСКонтрагентом
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////";
	
	ПерваяТабличнаяЧасть = Истина;
	
	Если НЕ ВыбратьТаблицыПодчиненных Тогда
	
		Для Каждого ТабличнаяЧастьДокумента Из МетаданныеДокумента.ТабличныеЧасти Цикл
			
			ИмяТабличнойчасти = ТабличнаяЧастьДокумента.Имя;
			
			Если Метаданные.Перечисления.ТабличныеЧастиДокументов.ЗначенияПеречисления.Найти(ИмяТабличнойЧасти) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ИмяДокумента = "АвансовыйОтчет" и ИмяТабличнойчасти = "ВозвратнаяТара" Тогда
				Продолжить;
			КонецЕсли;	
			
			Если НЕ ПерваяТабличнаяЧасть Тогда
				ТекстЗапроса = ТекстЗапроса + "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|";
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	"""+ИмяТабличнойчасти+""" КАК ИмяСписка,
			|	Значение(Перечисление.ТабличныеЧастиДокументов."+ИмяТабличнойчасти+") КАК ТабличнаячастьДокумента,
			|	ОбрабатываемаяТаблица.Ссылка КАК Ссылка,
			|	ОбрабатываемаяТаблица.НомерСтроки КАК НомерСтроки,";
			
			Если ИмяТабличнойчасти = "ВозвратнаяТара" ИЛИ ИмяТабличнойчасти = "ОплатаПоставщикам" Тогда
				
				ТекстЗапроса = ТекстЗапроса + "
				|	Неопределено КАК СтавкаНДС,
				|	0 КАК НДСВал,
				|	ОбрабатываемаяТаблица.Сумма КАК ВсегоВал,";
				
			Иначе	
				
				ТекстЗапроса = ТекстЗапроса + " 
				|	"+?(ТабличнаяЧастьДокумента.Реквизиты.Найти("СтавкаНДС") = Неопределено, "ВТ_ТаблицаПоШапкеДокумента.СтавкаНДС", "ОбрабатываемаяТаблица.СтавкаНДС")+" КАК СтавкаНДС,
				|	ОбрабатываемаяТаблица.СуммаНДС КАК НДСВал,
				|	ВЫБОР 
				|		КОГДА ВТ_ТаблицаПоШапкеДокумента.СуммаВключаетНДС 
				|			ТОГДА ОбрабатываемаяТаблица.Сумма 
				|		ИНАЧЕ ОбрабатываемаяТаблица.Сумма + ОбрабатываемаяТаблица.СуммаНДС 
				|	КОНЕЦ КАК ВсегоВал,";
				
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + "
			|	ОбрабатываемаяТаблица.Ссылка КАК ДокументСинхронизацииСРегистромРублевыеСуммы,
			|	0 КАК ВсегоРуб,
			|	0 КАК НДСРуб,
			|	0 КАК СуммаБезНДСРуб,";
			
			Если ИмяДокумента = "ПоступлениеДопРасходов" Тогда
				
				ТекстЗапроса = ТекстЗапроса + "
				|	ЕСТЬNULL(ОбрабатываемаяТаблица.Количество, 0) КАК БазаРаспределенияКоличество,
				|	ОбрабатываемаяТаблица.СуммаТовара КАК БазаРаспределенияСумма,
				|	Значение(Перечисление.СпособыРаспределенияДопРасходов.ПустаяСсылка) КАК СпособРаспределения,";
				
			КонецЕсли;	
			
			Если ИмяТабличнойчасти = "Товары" и НЕ ТабличнаяЧастьДокумента.Реквизиты.Найти("СчетУчета") = Неопределено Тогда
				
				ТекстЗапроса = ТекстЗапроса + "
				|	ЕСТЬNULL(ОбрабатываемаяТаблица.СчетУчета.Забалансовый, ЛОЖЬ) КАК ЭтоКомиссия";
					
			ИначеЕсли ИмяТабличнойЧасти = "АгентскиеУслуги" Тогда
				
				ТекстЗапроса = ТекстЗапроса + "
				|	ИСТИНА КАК ЭтоКомиссия";
				
			Иначе
				
				Если ИмяДокумента = "ОтчетКомитентуОПродажах" Тогда
					
					ТекстЗапроса = ТекстЗапроса + "
					|	Истина КАК ЭтоКомиссия";
					
				Иначе	
				
					ТекстЗапроса = ТекстЗапроса + "
					|	ЛОЖЬ КАК ЭтоКомиссия";
					
				КонецЕсли;	
				
			КонецЕсли;
			
			Если ПерваяТабличнаяЧасть Тогда
				ТекстЗапроса = ТекстЗапроса + "
				|ПОМЕСТИТЬ ПредварительнаяТаблицаДляРасчетаРублевыхСумм";
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + "
			|ИЗ
			|	Документ."+ИмяДокумента+"."+ИмяТабличнойчасти+" КАК ОбрабатываемаяТаблица
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
			|	ПО ОбрабатываемаяТаблица.Ссылка = ВТ_ТаблицаПоШапкеДокумента.Ссылка";
			
			ПерваяТабличнаяЧасть = ЛОЖЬ;
			
			Если ИмяДокумента = "ОтчетКомитентуОПродажах" или ИмяДокумента = "ОтчетКомиссионераОПродажах" Тогда
				
				ТекстЗапроса = ТекстЗапроса + "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	"""" КАК ИмяСписка,
				|	Значение(Перечисление.ТабличныеЧастиДокументов.ПустаяСсылка) КАК ТабличнаяЧастьДокумента,
				|	ОбрабатываемаяТаблица.Ссылка КАК Ссылка,
				|	1 КАК НомерСтроки,
				|	МАКСИМУМ(ВТ_ТаблицаПоШапкеДокумента.СтавкаНДСВознаграждения) КАК СтавкаНДС,
				|	Сумма(ОбрабатываемаяТаблица.СуммаНДСВознаграждения) КАК НДСВал,
				|	Сумма(ВЫБОР 
				|		КОГДА ВТ_ТаблицаПоШапкеДокумента.СуммаВключаетНДС 
				|			ТОГДА ОбрабатываемаяТаблица.СуммаВознаграждения 
				|		ИНАЧЕ ОбрабатываемаяТаблица.СуммаВознаграждения + ОбрабатываемаяТаблица.СуммаНДСВознаграждения 
				|	КОНЕЦ) КАК ВсегоВал,
				|	ОбрабатываемаяТаблица.Ссылка КАК ДокументСинхронизацииСРегистромРублевыеСуммы,
				|	0,
				|	0,
				|	0,
				|	ИСТИНА КАК ЭтоКомиссия
				|ИЗ
				|	Документ."+ИмяДокумента+"."+ИмяТабличнойчасти+" КАК ОбрабатываемаяТаблица
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
				|	ПО ОбрабатываемаяТаблица.Ссылка = ВТ_ТаблицаПоШапкеДокумента.Ссылка
				|ГДЕ
				|	ОбрабатываемаяТаблица.СуммаВознаграждения <> 0
				|
				|СГРУППИРОВАТЬ ПО
				|	ОбрабатываемаяТаблица.Ссылка";
				
			ИначеЕсли ИмяДокумента = "КорректировкаРеализации" или ИмяДокумента = "КорректировкаПоступления" Тогда
				
				ТекстЗапроса = ТекстЗапроса + "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	"""+ИмяТабличнойчасти+"ДоИзменения"+""" КАК ИмяСписка,
				|	Значение(Перечисление.ТабличныеЧастиДокументов."+ИмяТабличнойчасти+"ДоИзменения) КАК ТабличнаячастьДокумента,
				|	ОбрабатываемаяТаблица.Ссылка КАК Ссылка,
				|	ОбрабатываемаяТаблица.НомерСтроки КАК НомерСтроки,
				|	ОбрабатываемаяТаблица.СтавкаНДСДоИзменения КАК СтавкаНДС,
				|	ВЫБОР 
				|		КОГДА ВТ_ТаблицаПоШапкеДокумента.ВидОперации = Значение(Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки) 
				|			ТОГДА ОбрабатываемаяТаблица.СуммаНДСДоИзменения 
				|				ИНАЧЕ ОбрабатываемаяТаблица.СуммаНДСДоКорректировки
				|	КОНЕЦ КАК НДСВал,
				|	ВЫБОР 
				|		КОГДА ВТ_ТаблицаПоШапкеДокумента.СуммаВключаетНДС 
				|			ТОГДА 
				|				ВЫБОР 
				|					КОГДА ВТ_ТаблицаПоШапкеДокумента.ВидОперации = Значение(Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки) 
				|						ТОГДА ОбрабатываемаяТаблица.СуммаДоИзменения
				|					ИНАЧЕ ОбрабатываемаяТаблица.СуммаДоКорректировки
				|				КОНЕЦ  
				|		ИНАЧЕ 
				|			ВЫБОР 
				|				КОГДА ВТ_ТаблицаПоШапкеДокумента.ВидОперации = Значение(Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки) 
				|					ТОГДА ОбрабатываемаяТаблица.СуммаДоИзменения + ОбрабатываемаяТаблица.СуммаНДСДоИзменения 
				|				ИНАЧЕ ОбрабатываемаяТаблица.СуммаДоКорректировки + ОбрабатываемаяТаблица.СуммаНДСДоКорректировки 
				|			КОНЕЦ 
				|	КОНЕЦ КАК ВсегоВал,
				|	ОбрабатываемаяТаблица.Ссылка КАК ДокументСинхронизацииСРегистромРублевыеСуммы,
				|	0 КАК ВсегоРуб,
				|	0 КАК НДСРуб,
				|	0 КАК СуммаБезНДСРуб,
				|	Ложь
				|ИЗ
				|	Документ."+ИмяДокумента+"."+ИмяТабличнойчасти+" КАК ОбрабатываемаяТаблица
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
				|	ПО ОбрабатываемаяТаблица.Ссылка = ВТ_ТаблицаПоШапкеДокумента.Ссылка";
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ИмяДокумента = "ПередачаНМА" Тогда
			
			ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	"""" КАК ИмяСписка,
			|	Значение(Перечисление.ТабличныеЧастиДокументов.ПустаяСсылка) КАК ТабличнаячастьДокумента,
			|	ДанныеОбрабатываемогоДокумента.Ссылка КАК Ссылка,
			|	1 КАК НомерСтроки,
			|	ДанныеОбрабатываемогоДокумента.СтавкаНДС КАК СтавкаНДС,
			|	ДанныеОбрабатываемогоДокумента.СуммаНДС  КАК НДСВал,
			|	ВЫБОР 
			|		КОГДА ВТ_ТаблицаПоШапкеДокумента.СуммаВключаетНДС 
			|			ТОГДА ДанныеОбрабатываемогоДокумента.Сумма 
			|		ИНАЧЕ ДанныеОбрабатываемогоДокумента.Сумма + ДанныеОбрабатываемогоДокумента.СуммаНДС 
			|	КОНЕЦ КАК ВсегоВал,
			|	ДанныеОбрабатываемогоДокумента.Ссылка КАК ДокументСинхронизацииСРегистромРублевыеСуммы,
			|	0 КАК ВсегоРуб,
			|	0 КАК НДСРуб,
			|	0 КАК СуммаБезНДСРуб,
			|	Ложь КАК ЭтоКомиссия
			|ПОМЕСТИТЬ ПредварительнаяТаблицаДляРасчетаРублевыхСумм
			|ИЗ
			|	Документ.ПередачаНМА КАК ДанныеОбрабатываемогоДокумента
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
			|	ПО ДанныеОбрабатываемогоДокумента.Ссылка = ВТ_ТаблицаПоШапкеДокумента.Ссылка";
			
		ИначеЕсли ИмяДокумента = "ПоступлениеДопРасходов" Тогда
			
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	"""" КАК ИмяСписка,
			|	Значение(Перечисление.ТабличныеЧастиДокументов.ПустаяСсылка) КАК ТабличнаячастьДокумента,
			|	ДанныеОбрабатываемогоДокумента.Ссылка КАК Ссылка,
			|	1 КАК НомерСтроки,
			|	ДанныеОбрабатываемогоДокумента.СтавкаНДС КАК СтавкаНДС,
			|	ДанныеОбрабатываемогоДокумента.СуммаНДС  КАК НДСВал,
			|	ВЫБОР 
			|		КОГДА ВТ_ТаблицаПоШапкеДокумента.СуммаВключаетНДС 
			|			ТОГДА ДанныеОбрабатываемогоДокумента.Сумма 
			|		ИНАЧЕ ДанныеОбрабатываемогоДокумента.Сумма + ДанныеОбрабатываемогоДокумента.СуммаНДС 
			|	КОНЕЦ КАК ВсегоВал,
			|	ДанныеОбрабатываемогоДокумента.Ссылка КАК ДокументСинхронизацииСРегистромРублевыеСуммы,
			|	0 КАК ВсегоРуб,
			|	0 КАК НДСРуб,
			|	0 КАК СуммаБезНДСРуб,
			|	Ложь КАК ЭтоКомиссия,
			|	0 КАК БазаРаспределенияКоличество,
			|	0 КАК БазаРаспределенияСумма,
			|	ДанныеОбрабатываемогоДокумента.СпособРаспределения КАК СпособРаспределения
			|ИЗ
			|	Документ.ПоступлениеДопРасходов КАК ДанныеОбрабатываемогоДокумента
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
			|	ПО ДанныеОбрабатываемогоДокумента.Ссылка = ВТ_ТаблицаПоШапкеДокумента.Ссылка";
			
		КонецЕсли;	
		
	Иначе
		
		МассивТиповПодчиненныхДокументов = МетаданныеДокумента.Реквизиты[ИмяРеквизитаСвязиСПодчиненными].Тип.Типы();
		
		Для Каждого ТипПодчиненногоДокумента Из МассивТиповПодчиненныхДокументов Цикл
			
			ПодчиненныйДокумент = Новый(ТипПодчиненногоДокумента);
			
			МетаданныеПодчиненногоДокумента = ПодчиненныйДокумент.Метаданные();
			
			ИмяПодчиненногоДокумента = МетаданныеПодчиненногоДокумента.Имя;
			
			Для Каждого ТабличнаяЧастьДокумента Из МетаданныеПодчиненногоДокумента.ТабличныеЧасти Цикл
				
				ИмяТабличнойчасти = ТабличнаяЧастьДокумента.Имя;
				
				Если Метаданные.Перечисления.ТабличныеЧастиДокументов.ЗначенияПеречисления.Найти(ИмяТабличнойЧасти) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Если Найти(ИмяТабличнойчасти, "Услуги") > 0 или  Найти(ИмяТабличнойчасти, "Тара") > 0 Тогда
					Продолжить;
				КонецЕсли;	
				
				Если НЕ ПерваяТабличнаяЧасть Тогда
					ТекстЗапроса = ТекстЗапроса + "
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|";
				КонецЕсли;
				
				ТекстЗапроса = ТекстЗапроса + "
				|ВЫБРАТЬ
				|	"""+ИмяТабличнойчасти+""" КАК ИмяСписка,
				|	Значение(Перечисление.ТабличныеЧастиДокументов."+ИмяТабличнойчасти+") КАК ТабличнаячастьДокумента,
				|	ОбрабатываемаяТаблица.Ссылка КАК Ссылка,
				|	ОбрабатываемаяТаблица.НомерСтроки КАК НомерСтроки,
				|	ЕстьNULL(ОбрабатываемаяТаблица.СтавкаНДС, Значение(Перечисление.СтавкиНДС.БезНДС)) КАК СтавкаНДС,
				|	ЕСТЬNULL(ОбрабатываемаяТаблица.СуммаНДС, 0) КАК НДСВал,
				|	ВЫБОР 
				|		КОГДА ВТ_ТаблицаПоШапкеДокумента.СуммаВключаетНДС 
				|			ТОГДА ЕСТЬNULL(ОбрабатываемаяТаблица.Сумма, 0) 
				|		ИНАЧЕ ЕстьNULL(ОбрабатываемаяТаблица.Сумма, 0) + ЕстьNULL(ОбрабатываемаяТаблица.СуммаНДС, 0)
				|	КОНЕЦ КАК ВсегоВал,
				|	ГоловнойДокумент.Ссылка КАК ДокументСинхронизацииСРегистромРублевыеСуммы,
				|	0 КАК ВсегоРуб,
				|	0 КАК НДСРуб,
				|	0 КАК СуммаБезНДСРуб,";
				
				Если ИмяТабличнойчасти = "Товары" и НЕ ТабличнаяЧастьДокумента.Реквизиты.Найти("СчетУчета") = Неопределено Тогда
					
					ТекстЗапроса = ТекстЗапроса + "
					|	ЕСТЬNULL(ОбрабатываемаяТаблица.СчетУчета.Забалансовый, ЛОЖЬ) КАК ЭтоКомиссия";
					
				ИначеЕсли ИмяТабличнойЧасти = "АгентскиеУслуги" Тогда
					
					ТекстЗапроса = ТекстЗапроса + "
					|	ИСТИНА КАК ЭтоКомиссия";
					
				Иначе
					
					ТекстЗапроса = ТекстЗапроса + "
					|	ЛОЖЬ КАК ЭтоКомиссия";
					
				КонецЕсли;	
				
				Если ПерваяТабличнаяЧасть Тогда
					ТекстЗапроса = ТекстЗапроса + "
					|ПОМЕСТИТЬ ПредварительнаяТаблицаДляРасчетаРублевыхСумм";
				КонецЕсли;
				
				ТекстЗапроса = ТекстЗапроса + "
				|ИЗ
				|	Документ."+ИмяДокумента+" КАК ГоловнойДокумент
				|	ЛЕВОЕ СОЕДИНЕНИЕ Документ."+ИмяПодчиненногоДокумента+"."+ИмяТабличнойчасти+" КАК ОбрабатываемаяТаблица
				|	ПО ГоловнойДокумент."+ИмяРеквизитаСвязиСПодчиненными+" = ОбрабатываемаяТаблица.Ссылка
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
				|	ПО ГоловнойДокумент.Ссылка = ВТ_ТаблицаПоШапкеДокумента.Ссылка";
				
				ПерваяТабличнаяЧасть = ЛОЖЬ;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ИмяДокумента = "АктОбОказанииПроизводственныхУслуг"
		или ИмяДокумента = "ВозвратТоваровПоставщику"
		или ИмяДокумента = "ОтражениеНачисленияНДС"
		или ИмяДокумента = "ОтчетКомитентуОПродажах"
		или ИмяДокумента = "ПередачаНМА"
		или ИмяДокумента = "ПередачаОС"
		или ИмяДокумента = "РеализацияТоваровУслуг"
		или ИмяДокумента = "РеализацияУслугПоПереработке" Тогда
		
		НомераТаблиц.Вставить("СуммыПоНДССобственномуНеСгруппированная", НомераТаблиц.Количество());
		НомераТаблиц.Вставить("СуммыПоНДССобственному", НомераТаблиц.Количество());
		НомераТаблиц.Вставить("УничтожениеСуммыПоНДССобственномуНеСгруппированная", НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НДСНачисленный.Регистратор,
		|	СУММА(НДСНачисленный.НДС) КАК ВсегоНДСРуб,
		|	Сумма(НДСНачисленный.СуммаБезНДС) КАК ВсегоБезНДСРуб
		|ПОМЕСТИТЬ СуммыПоНДССобственномуНеСгруппированная
		|ИЗ
		|	РегистрНакопления.НДСНачисленный КАК НДСНачисленный
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
		|	ПО НДСНачисленный.Регистратор = ВТ_ТаблицаПоШапкеДокумента.Ссылка
		|	И (НДСНачисленный.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход))
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСНачисленный.Регистратор
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	НДСПродажи.Регистратор,
		|	СУММА(НДСПродажи.НДС),
		|	СУММА(НДСПродажи.СуммаБезНДС)
		|ИЗ
		|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСПродажи
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
		|	ПО НДСПродажи.Регистратор = ВТ_ТаблицаПоШапкеДокумента.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСПродажи.Регистратор
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	НДСРеализация0.Регистратор,
		|	СУММА(НДСРеализация0.НДС),
		|	СУММА(НДСРеализация0.СуммаБезНДС)
		|ИЗ
		|	РегистрНакопления.НДСРеализация0 КАК НДСРеализация0
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
		|	ПО НДСРеализация0.Регистратор = ВТ_ТаблицаПоШапкеДокумента.Ссылка
		|ГДЕ
		|	НДСРеализация0.Период >= &НачалоУпрощенногоУчетаНДС
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСРеализация0.Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СуммыПоНДССобственномуНеСгруппированная.Регистратор,
		|	СУММА(СуммыПоНДССобственномуНеСгруппированная.ВсегоНДСРуб) КАК ВсегоНДСРуб,
		|	СУММА(СуммыПоНДССобственномуНеСгруппированная.ВсегоБезНДСРуб) КАК ВсегоБезНДСРуб
		|ПОМЕСТИТЬ СуммыПоНДССобственному
		|ИЗ
		|	СуммыПоНДССобственномуНеСгруппированная КАК СуммыПоНДССобственномуНеСгруппированная
		|СГРУППИРОВАТЬ ПО
		|	СуммыПоНДССобственномуНеСгруппированная.Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ СуммыПоНДССобственномуНеСгруппированная";
		
	ИначеЕсли ИмяДокумента = "РеализацияОтгруженныхТоваров" Тогда
		
		НомераТаблиц.Вставить("СуммыПоНДССобственномуНеСгруппированная", НомераТаблиц.Количество());
		НомераТаблиц.Вставить("СуммыПоНДССобственному", НомераТаблиц.Количество());
		НомераТаблиц.Вставить("УничтожениеСуммыПоНДССобственномуНеСгруппированная", НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НДСНачисленный.Регистратор,
		|	СУММА(НДСНачисленный.НДС) КАК ВсегоНДСРуб,
		|	Сумма(НДСНачисленный.СуммаБезНДС) КАК ВсегоБезНДСРуб
		|ПОМЕСТИТЬ СуммыПоНДССобственномуНеСгруппированная
		|ИЗ
		|	РегистрНакопления.НДСНачисленный КАК НДСНачисленный
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
		|	ПО НДСНачисленный.Регистратор = ВТ_ТаблицаПоШапкеДокумента.Ссылка
		|	И (НДСНачисленный.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход))
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСНачисленный.Регистратор
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	НДСПродажи.Регистратор,
		|	СУММА(НДСПродажи.НДС),
		|	СУММА(НДСПродажи.СуммаБезНДС)
		|ИЗ
		|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСПродажи
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
		|	ПО НДСПродажи.Регистратор = ВТ_ТаблицаПоШапкеДокумента.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСПродажи.Регистратор
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	НДСРеализация0.Регистратор,
		|	СУММА(НДСРеализация0.НДС),
		|	СУММА(НДСРеализация0.СуммаБезНДС)
		|ИЗ
		|	РегистрНакопления.НДСРеализация0 КАК НДСРеализация0
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
		|	ПО НДСРеализация0.Регистратор = ВТ_ТаблицаПоШапкеДокумента.Ссылка
		|ГДЕ
		|	НДСРеализация0.Период >= &НачалоУпрощенногоУчетаНДС
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСРеализация0.Регистратор
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ПредварительнаяТаблицаДляРасчетаРублевыхСумм.ДокументСинхронизацииСРегистромРублевыеСуммы КАК Регистратор,
		|	СУММА(НДСНачисленный.НДС) КАК ВсегоНДСРуб,
		|	Сумма(НДСНачисленный.СуммаБезНДС) КАК ВсегоБезНДСРуб
		|ИЗ
		|	РегистрНакопления.НДСНачисленный КАК НДСНачисленный
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПредварительнаяТаблицаДляРасчетаРублевыхСумм КАК ПредварительнаяТаблицаДляРасчетаРублевыхСумм
		|	ПО НДСНачисленный.Регистратор = ПредварительнаяТаблицаДляРасчетаРублевыхСумм.Ссылка
		|	И (НДСНачисленный.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход))
		|
		|СГРУППИРОВАТЬ ПО
		|	ПредварительнаяТаблицаДляРасчетаРублевыхСумм.ДокументСинхронизацииСРегистромРублевыеСуммы
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ПредварительнаяТаблицаДляРасчетаРублевыхСумм.ДокументСинхронизацииСРегистромРублевыеСуммы КАК Регистратор,
		|	СУММА(НДСПродажи.НДС),
		|	СУММА(НДСПродажи.СуммаБезНДС)
		|ИЗ
		|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСПродажи
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПредварительнаяТаблицаДляРасчетаРублевыхСумм КАК ПредварительнаяТаблицаДляРасчетаРублевыхСумм
		|	ПО НДСПродажи.Регистратор = ПредварительнаяТаблицаДляРасчетаРублевыхСумм.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ПредварительнаяТаблицаДляРасчетаРублевыхСумм.ДокументСинхронизацииСРегистромРублевыеСуммы
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ПредварительнаяТаблицаДляРасчетаРублевыхСумм.ДокументСинхронизацииСРегистромРублевыеСуммы КАК Регистратор,
		|	СУММА(НДСРеализация0.НДС),
		|	СУММА(НДСРеализация0.СуммаБезНДС)
		|ИЗ
		|	РегистрНакопления.НДСРеализация0 КАК НДСРеализация0
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПредварительнаяТаблицаДляРасчетаРублевыхСумм КАК ПредварительнаяТаблицаДляРасчетаРублевыхСумм
		|	ПО НДСРеализация0.Регистратор = ПредварительнаяТаблицаДляРасчетаРублевыхСумм.Ссылка
		|ГДЕ
		|	НДСРеализация0.Период >= &НачалоУпрощенногоУчетаНДС
		|
		|СГРУППИРОВАТЬ ПО
		|	ПредварительнаяТаблицаДляРасчетаРублевыхСумм.ДокументСинхронизацииСРегистромРублевыеСуммы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СуммыПоНДССобственномуНеСгруппированная.Регистратор,
		|	СУММА(СуммыПоНДССобственномуНеСгруппированная.ВсегоНДСРуб) КАК ВсегоНДСРуб,
		|	СУММА(СуммыПоНДССобственномуНеСгруппированная.ВсегоБезНДСРуб) КАК ВсегоБезНДСРуб
		|ПОМЕСТИТЬ СуммыПоНДССобственному
		|ИЗ
		|	СуммыПоНДССобственномуНеСгруппированная КАК СуммыПоНДССобственномуНеСгруппированная
		|	
		|СГРУППИРОВАТЬ ПО
		|	СуммыПоНДССобственномуНеСгруппированная.Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ СуммыПоНДССобственномуНеСгруппированная";
		
	ИначеЕсли  ИмяДокумента = "ОтражениеНДСКВычету" Тогда
		
		НомераТаблиц.Вставить("СуммыПоНДССобственному", НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НДСПокупки.Регистратор,
		|	СУММА(НДСПокупки.НДС) КАК ВсегоНДСРуб,
		|	СУММА(НДСПокупки.СуммаБезНДС) КАК ВсегоБезНДСРуб
		|ПОМЕСТИТЬ СуммыПоНДССобственному
		|ИЗ
		|	РегистрНакопления.НДСЗаписиКнигиПокупок КАК НДСПокупки
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
		|	ПО НДСПокупки.Регистратор = ВТ_ТаблицаПоШапкеДокумента.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСПокупки.Регистратор";
		
	ИначеЕсли ИмяДокумента = "ОтчетКомиссионераОПродажах" Тогда
		
		НомераТаблиц.Вставить("СуммыПоНДССобственномуНеСгруппированная", НомераТаблиц.Количество());
		НомераТаблиц.Вставить("СуммыПоНДССобственному", НомераТаблиц.Количество());
		НомераТаблиц.Вставить("УничтожениеСуммыПоНДССобственномуНеСгруппированная", НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НДСНачисленный.Регистратор,
		|	СУММА(НДСНачисленный.НДС) КАК ВсегоНДСРуб,
		|	Сумма(НДСНачисленный.СуммаБезНДС) КАК ВсегоБезНДСРуб,
		|	СУММА(0) КАК ВсегоНДСРубВознаграждение,
		|	СУММА(0) КАК ВсегоБезНДСРубВознаграждение
		|ПОМЕСТИТЬ СуммыПоНДССобственномуНеСгруппированная
		|ИЗ
		|	РегистрНакопления.НДСНачисленный КАК НДСНачисленный
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
		|	ПО НДСНачисленный.Регистратор = ВТ_ТаблицаПоШапкеДокумента.Ссылка
		|	И (НДСНачисленный.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход))
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСНачисленный.Регистратор
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	НДСПродажи.Регистратор,
		|	СУММА(НДСПродажи.НДС),
		|	СУММА(НДСПродажи.СуммаБезНДС),
		|	СУММА(0),
		|	СУММА(0)
		|ИЗ
		|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСПродажи
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
		|	ПО НДСПродажи.Регистратор = ВТ_ТаблицаПоШапкеДокумента.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСПродажи.Регистратор
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	НДСРеализация0.Регистратор,
		|	СУММА(НДСРеализация0.НДС),
		|	СУММА(НДСРеализация0.СуммаБезНДС),
		|	СУММА(0),
		|	СУММА(0)
		|ИЗ
		|	РегистрНакопления.НДСРеализация0 КАК НДСРеализация0
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
		|	ПО НДСРеализация0.Регистратор = ВТ_ТаблицаПоШапкеДокумента.Ссылка
		|ГДЕ
		|	НДСРеализация0.Период >= &НачалоУпрощенногоУчетаНДС
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСРеализация0.Регистратор
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	НДСПредъявленный.Регистратор,
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(НДСПредъявленный.НДС),
		|	СУММА(НДСПредъявленный.СуммаБезНДС)
		|ИЗ
		|	РегистрНакопления.НДСПредъявленный КАК НДСПредъявленный
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
		|	ПО НДСПредъявленный.Регистратор = ВТ_ТаблицаПоШапкеДокумента.Ссылка
		|	И (НДСПредъявленный.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход))
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСПредъявленный.Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СуммыПоНДССобственномуНеСгруппированная.Регистратор,
		|	СУММА(СуммыПоНДССобственномуНеСгруппированная.ВсегоНДСРуб) КАК ВсегоНДСРуб,
		|	СУММА(СуммыПоНДССобственномуНеСгруппированная.ВсегоБезНДСРуб) КАК ВсегоБезНДСРуб,
		|	СУММА(СуммыПоНДССобственномуНеСгруппированная.ВсегоНДСРубВознаграждение) КАК ВсегоНДСРубВознаграждение,
		|	СУММА(СуммыПоНДССобственномуНеСгруппированная.ВсегоБезНДСРубВознаграждение) КАК ВсегоБезНДСРубВознаграждение
		|ПОМЕСТИТЬ СуммыПоНДССобственному
		|ИЗ
		|	СуммыПоНДССобственномуНеСгруппированная КАК СуммыПоНДССобственномуНеСгруппированная
		|СГРУППИРОВАТЬ ПО
		|	СуммыПоНДССобственномуНеСгруппированная.Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ СуммыПоНДССобственномуНеСгруппированная";
		
	ИначеЕсли НЕ ИмяДокумента = "КорректировкаРеализации" и НЕ ИмяДокумента = "КорректировкаПоступления" И НЕ ИмяДокумента = "АвансовыйОтчет" Тогда
		
		НомераТаблиц.Вставить("СуммыПоНДССобственному", НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НДСПредъявленный.Регистратор,
		|	СУММА(НДСПредъявленный.НДС) КАК ВсегоНДСРуб,
		|	СУММА(НДСПредъявленный.СуммаБезНДС) КАК ВсегоБезНДСРуб
		|ПОМЕСТИТЬ СуммыПоНДССобственному
		|ИЗ
		|	РегистрНакопления.НДСПредъявленный КАК НДСПредъявленный
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
		|	ПО НДСПредъявленный.Регистратор = ВТ_ТаблицаПоШапкеДокумента.Ссылка
		|	И (НДСПредъявленный.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход))
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСПредъявленный.Регистратор";
		
	КонецЕсли;
	
	Если ИмяДокумента = "ОтчетКомиссионераОПродажах" Тогда
		
		НомераТаблиц.Вставить("КурсовыеРазницы",                                               НомераТаблиц.Количество());
		НомераТаблиц.Вставить("СуммаПоПроводкамБезКурсовыхРазницНеСгруппированные",            НомераТаблиц.Количество());
		НомераТаблиц.Вставить("СуммаПоПроводкамБезКурсовыхРазниц",                             НомераТаблиц.Количество());
		НомераТаблиц.Вставить("УничтожениеСуммаПоПроводкамБезКурсовыхРазницНеСгруппированные", НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ТаблицаШапкаССуммами",                                          НомераТаблиц.Количество());
		НомераТаблиц.Вставить("УничтожениеКурсовыеРазницы",                                    НомераТаблиц.Количество());
		НомераТаблиц.Вставить("УничтожениеСуммаПоПроводкамБезКурсовыхРазниц",                  НомераТаблиц.Количество());
		НомераТаблиц.Вставить("УничтожениеСуммыПоНДССобственному",                             НомераТаблиц.Количество());
		НомераТаблиц.Вставить("УничтожениеВТ_ТаблицаПоШапкеДокумента",                          НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса +"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОбороты.Регистратор,
		|	СУММА(ВЫБОР
		|			КОГДА ХозрасчетныйОбороты.КорСчет = ВТ_ТаблицаПоШапкеДокумента.СчетУчетаРасчетовСКонтрагентом
		|					И ХозрасчетныйОбороты.Счет = &СчетДоходов
		|				ТОГДА ХозрасчетныйОбороты.СуммаОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КурсоваяРазницаПоРасчетамСПокупателемРуб,
		|	СУММА(ВЫБОР
		|			КОГДА ХозрасчетныйОбороты.КорСчет = ВТ_ТаблицаПоШапкеДокумента.СчетУчетаРасчетовЗаПосредническиеУслуги
		|					И ХозрасчетныйОбороты.Счет = &СчетРасходов
		|				ТОГДА -ХозрасчетныйОбороты.СуммаОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КурсоваяРазницаПоРасчетамСПоставщикомРуб
		|ПОМЕСТИТЬ КурсовыеРазницы
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			,
		|			,
		|			Регистратор,
		|			Счет = &СчетДоходов
		|				ИЛИ Счет = &СчетРасходов,
		|			,
		|			Субконто1 В (&МассивЗначенийАналитикиКурсовыхРазниц)
		|				ИЛИ Субконто2 В (&МассивЗначенийАналитикиКурсовыхРазниц)
		|				ИЛИ Субконто3 В (&МассивЗначенийАналитикиКурсовыхРазниц),
		|			,
		|			) КАК ХозрасчетныйОбороты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
		|		ПО ХозрасчетныйОбороты.Регистратор = ВТ_ТаблицаПоШапкеДокумента.Ссылка
		|			И (ХозрасчетныйОбороты.КорСчет = ВТ_ТаблицаПоШапкеДокумента.СчетУчетаРасчетовСКонтрагентом
		|				ИЛИ ХозрасчетныйОбороты.КорСчет = ВТ_ТаблицаПоШапкеДокумента.СчетУчетаРасчетовЗаПосредническиеУслуги)
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОбороты.Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОбороты.Регистратор,
		|	СУММА(ХозрасчетныйОбороты.ВалютнаяСуммаДт) КАК ВсегоВалПоПроводкам,
		|	СУММА(ХозрасчетныйОбороты.Сумма) КАК ВсегоРубПоПроводкам,
		|	СУММА(0) КАК ВсегоВалПоПроводкамВознаграждение,
		|	СУММА(0) КАК ВсегоРубПоПроводкамВознаграждение
		|ПОМЕСТИТЬ СуммаПоПроводкамБезКурсовыхРазницНеСгруппированные
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный КАК ХозрасчетныйОбороты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
		|		ПО ХозрасчетныйОбороты.Регистратор = ВТ_ТаблицаПоШапкеДокумента.Ссылка
		|			И ХозрасчетныйОбороты.СчетДт = ВТ_ТаблицаПоШапкеДокумента.СчетУчетаРасчетовСКонтрагентом
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОбороты.Регистратор
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ХозрасчетныйОбороты.Регистратор,
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(ХозрасчетныйОбороты.ВалютнаяСуммаКт),
		|	СУММА(ХозрасчетныйОбороты.Сумма)
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный КАК ХозрасчетныйОбороты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
		|		ПО ХозрасчетныйОбороты.Регистратор = ВТ_ТаблицаПоШапкеДокумента.Ссылка
		|			И ХозрасчетныйОбороты.СчетКт = ВТ_ТаблицаПоШапкеДокумента.СчетУчетаРасчетовЗаПосредническиеУслуги
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОбороты.Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СуммаПоПроводкамБезКурсовыхРазницНеСгруппированные.Регистратор,
		|	СУММА(СуммаПоПроводкамБезКурсовыхРазницНеСгруппированные.ВсегоВалПоПроводкам) КАК ВсегоВалПоПроводкам,
		|	СУММА(СуммаПоПроводкамБезКурсовыхРазницНеСгруппированные.ВсегоРубПоПроводкам) КАК ВсегоРубПоПроводкам,
		|	СУММА(СуммаПоПроводкамБезКурсовыхРазницНеСгруппированные.ВсегоВалПоПроводкамВознаграждение) КАК ВсегоВалПоПроводкамВознаграждение,
		|	СУММА(СуммаПоПроводкамБезКурсовыхРазницНеСгруппированные.ВсегоРубПоПроводкамВознаграждение) КАК ВсегоРубПоПроводкамВознаграждение
		|ПОМЕСТИТЬ СуммаПоПроводкамБезКурсовыхРазниц
		|ИЗ
		|	СуммаПоПроводкамБезКурсовыхРазницНеСгруппированные КАК СуммаПоПроводкамБезКурсовыхРазницНеСгруппированные
		|
		|СГРУППИРОВАТЬ ПО
		|	СуммаПоПроводкамБезКурсовыхРазницНеСгруппированные.Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ СуммаПоПроводкамБезКурсовыхРазницНеСгруппированные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_ТаблицаПоШапкеДокумента.Ссылка,
		|	ВТ_ТаблицаПоШапкеДокумента.Дата,
		|	ВТ_ТаблицаПоШапкеДокумента.ВалютаДокумента,
		|	ВТ_ТаблицаПоШапкеДокумента.Организация,
		|	ВТ_ТаблицаПоШапкеДокумента.КурсВзаиморасчетов,
		|	ВТ_ТаблицаПоШапкеДокумента.КратностьВзаиморасчетов,
		|	ВТ_ТаблицаПоШапкеДокумента.РасчетыВУсловныхЕдиницах,
		|	ВТ_ТаблицаПоШапкеДокумента.УчетАгентскогоНДС,
		|	ВТ_ТаблицаПоШапкеДокумента.СуммаВключаетНДС,
		|	ВТ_ТаблицаПоШапкеДокумента.СчетУчетаРасчетовСКонтрагентом,
		|	ВТ_ТаблицаПоШапкеДокумента.СчетУчетаРасчетовПоТаре,
		|	ЕСТЬNULL(СуммаПоПроводкамБезКурсовыхРазниц.ВсегоВалПоПроводкам, 0) КАК ВсегоВалПоПроводкам,
		|	ЕСТЬNULL(СуммаПоПроводкамБезКурсовыхРазниц.ВсегоВалПоПроводкамВознаграждение, 0) КАК ВсегоВалПоПроводкамВознаграждение,
		|	ЕСТЬNULL(СуммаПоПроводкамБезКурсовыхРазниц.ВсегоРубПоПроводкам, 0) - ЕСТЬNULL(КурсовыеРазницы.КурсоваяРазницаПоРасчетамСПокупателемРуб, 0) КАК ВсегоРубПоПроводкам,
		|	ЕСТЬNULL(СуммаПоПроводкамБезКурсовыхРазниц.ВсегоРубПоПроводкамВознаграждение, 0) - ЕСТЬNULL(КурсовыеРазницы.КурсоваяРазницаПоРасчетамСПоставщикомРуб, 0) КАК ВсегоРубПоПроводкамВознаграждение,
		|	ЕСТЬNULL(СуммыПоНДССобственному.ВсегоНДСРуб, 0) КАК ВсегоНДСРуб,
		|	ЕСТЬNULL(СуммыПоНДССобственному.ВсегоБезНДСРуб, 0) КАК ВсегоБезНДСРуб,
		|	ЕСТЬNULL(СуммыПоНДССобственному.ВсегоНДСРубВознаграждение, 0) КАК ВсегоНДСРубВознаграждение,
		|	ЕСТЬNULL(СуммыПоНДССобственному.ВсегоБезНДСРубВознаграждение, 0) КАК ВсегоБезНДСРубВознаграждение
		|ИЗ
		|	ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ КурсовыеРазницы КАК КурсовыеРазницы
		|		ПО ВТ_ТаблицаПоШапкеДокумента.Ссылка = КурсовыеРазницы.Регистратор
		|		ЛЕВОЕ СОЕДИНЕНИЕ СуммаПоПроводкамБезКурсовыхРазниц КАК СуммаПоПроводкамБезКурсовыхРазниц
		|		ПО ВТ_ТаблицаПоШапкеДокумента.Ссылка = СуммаПоПроводкамБезКурсовыхРазниц.Регистратор
		|		ЛЕВОЕ СОЕДИНЕНИЕ СуммыПоНДССобственному КАК СуммыПоНДССобственному
		|		ПО ВТ_ТаблицаПоШапкеДокумента.Ссылка = СуммыПоНДССобственному.Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ КурсовыеРазницы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ СуммаПоПроводкамБезКурсовыхРазниц
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ СуммыПоНДССобственному
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ТаблицаПоШапкеДокумента";
		
	ИначеЕсли ИмяДокумента = "ВозвратТоваровПоставщику" Тогда
		
		НомераТаблиц.Вставить("ТаблицаШапкаССуммами",                         НомераТаблиц.Количество());
		НомераТаблиц.Вставить("УничтожениеСуммыПоНДССобственному",            НомераТаблиц.Количество());
		НомераТаблиц.Вставить("УничтожениеВТ_ТаблицаПоШапкеДокумента",        НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса +"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_ТаблицаПоШапкеДокумента.Ссылка,
		|	ВТ_ТаблицаПоШапкеДокумента.Дата,
		|	ВТ_ТаблицаПоШапкеДокумента.ВалютаДокумента,
		|	ВТ_ТаблицаПоШапкеДокумента.Организация,
		|	ВТ_ТаблицаПоШапкеДокумента.КурсВзаиморасчетов,
		|	ВТ_ТаблицаПоШапкеДокумента.КратностьВзаиморасчетов,
		|	ВТ_ТаблицаПоШапкеДокумента.РасчетыВУсловныхЕдиницах,
		|	ВТ_ТаблицаПоШапкеДокумента.УчетАгентскогоНДС,
		|	ВТ_ТаблицаПоШапкеДокумента.СуммаВключаетНДС,
		|	ВТ_ТаблицаПоШапкеДокумента.СчетУчетаРасчетовСКонтрагентом,
		|	ВТ_ТаблицаПоШапкеДокумента.СчетУчетаРасчетовПоТаре,
		|	0 КАК ВсегоВалПоПроводкам,
		|	0 КАК ВсегоРубПоПроводкам,
		|	ЕСТЬNULL(СуммыПоНДССобственному.ВсегоНДСРуб, 0) КАК ВсегоНДСРуб,
		|	ЕСТЬNULL(СуммыПоНДССобственному.ВсегоБезНДСРуб, 0) КАК ВсегоБезНДСРуб
		|ИЗ
		|	ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
		|	ЛЕВОЕ СОЕДИНЕНИЕ СуммыПоНДССобственному КАК СуммыПоНДССобственному
		|	ПО ВТ_ТаблицаПоШапкеДокумента.Ссылка = СуммыПоНДССобственному.Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ СуммыПоНДССобственному
		|;
		|
		|////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ТаблицаПоШапкеДокумента";
		
	ИначеЕсли НЕ ИмяДокумента = "АвансовыйОтчет" и НЕ ИмяДокумента = "КорректировкаПоступления" и НЕ ИмяДокумента = "КорректировкаРеализации" Тогда
	
		Если НаправлениеДвижения = "Выбытие" Тогда
			
			Если ИмяДокумента = "ВозвратТоваровОтПокупателя" Тогда
				
				НомераТаблиц.Вставить("КурсовыеРазницы",                              НомераТаблиц.Количество());
				НомераТаблиц.Вставить("СуммаПоПроводкамБезКурсовыхРазниц",            НомераТаблиц.Количество());
				НомераТаблиц.Вставить("ТаблицаШапкаССуммами",                         НомераТаблиц.Количество());
				НомераТаблиц.Вставить("УничтожениеКурсовыеРазницы",                   НомераТаблиц.Количество());
				НомераТаблиц.Вставить("УничтожениеСуммаПоПроводкамБезКурсовыхРазниц", НомераТаблиц.Количество());
				НомераТаблиц.Вставить("УничтожениеСуммыПоНДССобственному",            НомераТаблиц.Количество());
				НомераТаблиц.Вставить("УничтожениеВТ_ТаблицаПоШапкеДокумента",        НомераТаблиц.Количество());
				
				ТекстЗапроса = ТекстЗапроса +"
				|;
				|
				|////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ХозрасчетныйОбороты.Регистратор,
				|	СУММА(ВЫБОР КОГДА ХозрасчетныйОбороты.КорСчет = ВТ_ТаблицаПоШапкеДокумента.СчетУчетаРасчетовСКонтрагентом и ХозрасчетныйОбороты.Счет = &СчетДоходов ТОГДА ХозрасчетныйОбороты.СуммаОборот Иначе 0 КОНЕЦ) КАК КурсоваяРазницаРуб
				|ПОМЕСТИТЬ КурсовыеРазницы
				|ИЗ
				|	РегистрБухгалтерии.Хозрасчетный.Обороты(
				|			,
				|			,
				|			Регистратор,
				|			Счет = &СчетДоходов,
				|			,
				|			Субконто1 В (&МассивЗначенийАналитикиКурсовыхРазниц)
				|				ИЛИ Субконто2 В (&МассивЗначенийАналитикиКурсовыхРазниц)
				|				ИЛИ Субконто3 В (&МассивЗначенийАналитикиКурсовыхРазниц),
				|			,
				|			) КАК ХозрасчетныйОбороты
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
				|	ПО ХозрасчетныйОбороты.Регистратор = ВТ_ТаблицаПоШапкеДокумента.Ссылка
				|	И ХозрасчетныйОбороты.КорСчет = ВТ_ТаблицаПоШапкеДокумента.СчетУчетаРасчетовСКонтрагентом
				|
				|СГРУППИРОВАТЬ ПО
				|	ХозрасчетныйОбороты.Регистратор
				|;
				|
				|////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ХозрасчетныйОбороты.Регистратор,
				|	СУММА(ХозрасчетныйОбороты.ВалютнаяСуммаДт*(-1)) КАК ВсегоВалПоПроводкам,
				|   СУММА(ХозрасчетныйОбороты.Сумма*(-1)) КАК ВсегоРубПоПроводкам
				|ПОМЕСТИТЬ СуммаПоПроводкамБезКурсовыхРазниц
				|ИЗ
				|	РегистрБухгалтерии.Хозрасчетный КАК ХозрасчетныйОбороты
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
				|	ПО ХозрасчетныйОбороты.Регистратор = ВТ_ТаблицаПоШапкеДокумента.Ссылка
				|	И ХозрасчетныйОбороты.СчетДт = ВТ_ТаблицаПоШапкеДокумента.СчетУчетаРасчетовСКонтрагентом
				|
				|СГРУППИРОВАТЬ ПО
				|	ХозрасчетныйОбороты.Регистратор
				|;
				|
				|////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ВТ_ТаблицаПоШапкеДокумента.Ссылка,
				|	ВТ_ТаблицаПоШапкеДокумента.Дата,
				|	ВТ_ТаблицаПоШапкеДокумента.ВалютаДокумента,
				|	ВТ_ТаблицаПоШапкеДокумента.Организация,
				|	ВТ_ТаблицаПоШапкеДокумента.КурсВзаиморасчетов,
				|	ВТ_ТаблицаПоШапкеДокумента.КратностьВзаиморасчетов,
				|	ВТ_ТаблицаПоШапкеДокумента.РасчетыВУсловныхЕдиницах,
				|	ВТ_ТаблицаПоШапкеДокумента.УчетАгентскогоНДС,
				|	ВТ_ТаблицаПоШапкеДокумента.СуммаВключаетНДС,
				|	ВТ_ТаблицаПоШапкеДокумента.СчетУчетаРасчетовСКонтрагентом,
				|	ВТ_ТаблицаПоШапкеДокумента.СчетУчетаРасчетовПоТаре,
				|	ЕСТЬNULL(СуммаПоПроводкамБезКурсовыхРазниц.ВсегоВалПоПроводкам,0) КАК ВсегоВалПоПроводкам,
				|	ЕСТЬNULL(СуммаПоПроводкамБезКурсовыхРазниц.ВсегоРубПоПроводкам, 0) - ЕСТЬNULL(КурсовыеРазницы.КурсоваяРазницаРуб, 0) КАК ВсегоРубПоПроводкам,
				|	ЕСТЬNULL(СуммыПоНДССобственному.ВсегоНДСРуб, 0) КАК ВсегоНДСРуб,
				|	ЕСТЬNULL(СуммыПоНДССобственному.ВсегоБезНДСРуб, 0) КАК ВсегоБезНДСРуб
				|ИЗ
				|	ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
				|	ЛЕВОЕ СОЕДИНЕНИЕ КурсовыеРазницы КАК КурсовыеРазницы
				|	ПО ВТ_ТаблицаПоШапкеДокумента.Ссылка = КурсовыеРазницы.Регистратор
				|	ЛЕВОЕ СОЕДИНЕНИЕ СуммаПоПроводкамБезКурсовыхРазниц КАК СуммаПоПроводкамБезКурсовыхРазниц
				|	ПО ВТ_ТаблицаПоШапкеДокумента.Ссылка = СуммаПоПроводкамБезКурсовыхРазниц.Регистратор
				|	ЛЕВОЕ СОЕДИНЕНИЕ СуммыПоНДССобственному КАК СуммыПоНДССобственному
				|	ПО ВТ_ТаблицаПоШапкеДокумента.Ссылка = СуммыПоНДССобственному.Регистратор
				|;
				|
				|////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ КурсовыеРазницы
				|;
				|
				|////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ СуммаПоПроводкамБезКурсовыхРазниц
				|;
				|
				|////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ СуммыПоНДССобственному
				|;
				|
				|////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ ВТ_ТаблицаПоШапкеДокумента";
				
			Иначе	
				
				НомераТаблиц.Вставить("КурсовыеРазницы",                              НомераТаблиц.Количество());
				НомераТаблиц.Вставить("СуммаПоПроводкамБезКурсовыхРазниц",            НомераТаблиц.Количество());
				НомераТаблиц.Вставить("ТаблицаШапкаССуммами",                         НомераТаблиц.Количество());
				НомераТаблиц.Вставить("УничтожениеКурсовыеРазницы",                   НомераТаблиц.Количество());
				НомераТаблиц.Вставить("УничтожениеСуммаПоПроводкамБезКурсовыхРазниц", НомераТаблиц.Количество());
				НомераТаблиц.Вставить("УничтожениеСуммыПоНДССобственному",            НомераТаблиц.Количество());
				НомераТаблиц.Вставить("УничтожениеВТ_ТаблицаПоШапкеДокумента",        НомераТаблиц.Количество());
				
				ТекстЗапроса = ТекстЗапроса +"
				|;
				|
				|////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ХозрасчетныйОбороты.Регистратор,
				|	СУММА(ВЫБОР КОГДА ХозрасчетныйОбороты.КорСчет = ВТ_ТаблицаПоШапкеДокумента.СчетУчетаРасчетовСКонтрагентом и ХозрасчетныйОбороты.Счет = &СчетДоходов ТОГДА ХозрасчетныйОбороты.СуммаОборот Иначе 0 КОНЕЦ) КАК КурсоваяРазницаРуб
				|ПОМЕСТИТЬ КурсовыеРазницы
				|ИЗ
				|	РегистрБухгалтерии.Хозрасчетный.Обороты(
				|			,
				|			,
				|			Регистратор,
				|			Счет = &СчетДоходов,
				|			,
				|			Субконто1 В (&МассивЗначенийАналитикиКурсовыхРазниц)
				|				ИЛИ Субконто2 В (&МассивЗначенийАналитикиКурсовыхРазниц)
				|				ИЛИ Субконто3 В (&МассивЗначенийАналитикиКурсовыхРазниц),
				|			,
				|			) КАК ХозрасчетныйОбороты
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
				|	ПО ХозрасчетныйОбороты.Регистратор = ВТ_ТаблицаПоШапкеДокумента.Ссылка
				|	И ХозрасчетныйОбороты.КорСчет = ВТ_ТаблицаПоШапкеДокумента.СчетУчетаРасчетовСКонтрагентом
				|
				|СГРУППИРОВАТЬ ПО
				|	ХозрасчетныйОбороты.Регистратор
				|;
				|
				|////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ХозрасчетныйОбороты.Регистратор,
				|	СУММА(ХозрасчетныйОбороты.ВалютнаяСуммаДт) КАК ВсегоВалПоПроводкам,
				|   СУММА(ХозрасчетныйОбороты.Сумма) КАК ВсегоРубПоПроводкам
				|ПОМЕСТИТЬ СуммаПоПроводкамБезКурсовыхРазниц
				|ИЗ
				|	РегистрБухгалтерии.Хозрасчетный КАК ХозрасчетныйОбороты
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
				|	ПО ХозрасчетныйОбороты.Регистратор = ВТ_ТаблицаПоШапкеДокумента.Ссылка
				|	И ХозрасчетныйОбороты.СчетДт = ВТ_ТаблицаПоШапкеДокумента.СчетУчетаРасчетовСКонтрагентом
				|
				|СГРУППИРОВАТЬ ПО
				|	ХозрасчетныйОбороты.Регистратор
				|;
				|
				|////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ВТ_ТаблицаПоШапкеДокумента.Ссылка,
				|	ВТ_ТаблицаПоШапкеДокумента.Дата,
				|	ВТ_ТаблицаПоШапкеДокумента.ВалютаДокумента,
				|	ВТ_ТаблицаПоШапкеДокумента.Организация,
				|	ВТ_ТаблицаПоШапкеДокумента.КурсВзаиморасчетов,
				|	ВТ_ТаблицаПоШапкеДокумента.КратностьВзаиморасчетов,
				|	ВТ_ТаблицаПоШапкеДокумента.РасчетыВУсловныхЕдиницах,
				|	ВТ_ТаблицаПоШапкеДокумента.УчетАгентскогоНДС,
				|	ВТ_ТаблицаПоШапкеДокумента.СуммаВключаетНДС,
				|	ВТ_ТаблицаПоШапкеДокумента.СчетУчетаРасчетовСКонтрагентом,
				|	ВТ_ТаблицаПоШапкеДокумента.СчетУчетаРасчетовПоТаре,
				|	ЕСТЬNULL(СуммаПоПроводкамБезКурсовыхРазниц.ВсегоВалПоПроводкам,0) КАК ВсегоВалПоПроводкам,
				|	ЕСТЬNULL(СуммаПоПроводкамБезКурсовыхРазниц.ВсегоРубПоПроводкам, 0) - ЕСТЬNULL(КурсовыеРазницы.КурсоваяРазницаРуб, 0) КАК ВсегоРубПоПроводкам,
				|	ЕСТЬNULL(СуммыПоНДССобственному.ВсегоНДСРуб, 0) КАК ВсегоНДСРуб,
				|	ЕСТЬNULL(СуммыПоНДССобственному.ВсегоБезНДСРуб, 0) КАК ВсегоБезНДСРуб
				|ИЗ
				|	ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
				|	ЛЕВОЕ СОЕДИНЕНИЕ КурсовыеРазницы КАК КурсовыеРазницы
				|	ПО ВТ_ТаблицаПоШапкеДокумента.Ссылка = КурсовыеРазницы.Регистратор
				|	ЛЕВОЕ СОЕДИНЕНИЕ СуммаПоПроводкамБезКурсовыхРазниц КАК СуммаПоПроводкамБезКурсовыхРазниц
				|	ПО ВТ_ТаблицаПоШапкеДокумента.Ссылка = СуммаПоПроводкамБезКурсовыхРазниц.Регистратор
				|	ЛЕВОЕ СОЕДИНЕНИЕ СуммыПоНДССобственному КАК СуммыПоНДССобственному
				|	ПО ВТ_ТаблицаПоШапкеДокумента.Ссылка = СуммыПоНДССобственному.Регистратор
				|;
				|
				|////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ КурсовыеРазницы
				|;
				|
				|////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ СуммаПоПроводкамБезКурсовыхРазниц
				|;
				|
				|////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ СуммыПоНДССобственному
				|;
				|
				|////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ ВТ_ТаблицаПоШапкеДокумента";
				
			КонецЕсли;	
			
		Иначе
			
			НомераТаблиц.Вставить("КурсовыеРазницы",                              НомераТаблиц.Количество());
			НомераТаблиц.Вставить("СуммаПоПроводкамБезКурсовыхРазниц",            НомераТаблиц.Количество());
			НомераТаблиц.Вставить("ТаблицаШапкаССуммами",                         НомераТаблиц.Количество());
			НомераТаблиц.Вставить("УничтожениеКурсовыеРазницы",                   НомераТаблиц.Количество());
			НомераТаблиц.Вставить("УничтожениеСуммаПоПроводкамБезКурсовыхРазниц", НомераТаблиц.Количество());
			НомераТаблиц.Вставить("УничтожениеСуммыПоНДССобственному",            НомераТаблиц.Количество());
			НомераТаблиц.Вставить("УничтожениеВТ_ТаблицаПоШапкеДокумента",        НомераТаблиц.Количество());
			
			ТекстЗапроса = ТекстЗапроса +"
			|;
			|
			|////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ХозрасчетныйОбороты.Регистратор,
			|	СУММА(ВЫБОР КОГДА ХозрасчетныйОбороты.КорСчет = ВТ_ТаблицаПоШапкеДокумента.СчетУчетаРасчетовСКонтрагентом и ХозрасчетныйОбороты.Счет = &СчетРасходов ТОГДА ХозрасчетныйОбороты.СуммаОборот Иначе 0 КОНЕЦ) КАК КурсоваяРазницаРуб
			|ПОМЕСТИТЬ КурсовыеРазницы
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Обороты(
			|			,
			|			,
			|			Регистратор,
			|			Счет = &СчетРасходов,
			|			,
			|			Субконто1 В (&МассивЗначенийАналитикиКурсовыхРазниц)
			|				ИЛИ Субконто2 В (&МассивЗначенийАналитикиКурсовыхРазниц)
			|				ИЛИ Субконто3 В (&МассивЗначенийАналитикиКурсовыхРазниц),
			|			,
			|			) КАК ХозрасчетныйОбороты
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
			|	ПО ХозрасчетныйОбороты.Регистратор = ВТ_ТаблицаПоШапкеДокумента.Ссылка
			|	И ХозрасчетныйОбороты.КорСчет = ВТ_ТаблицаПоШапкеДокумента.СчетУчетаРасчетовСКонтрагентом
			|
			|СГРУППИРОВАТЬ ПО
			|	ХозрасчетныйОбороты.Регистратор
			|;
			|
			|////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ХозрасчетныйОбороты.Регистратор,
			|	СУММА(ХозрасчетныйОбороты.ВалютнаяСуммаДт) КАК ВсегоВалПоПроводкам,
			|   СУММА(ХозрасчетныйОбороты.Сумма) КАК ВсегоРубПоПроводкам
			|ПОМЕСТИТЬ СуммаПоПроводкамБезКурсовыхРазниц
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный КАК ХозрасчетныйОбороты
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
			|	ПО ХозрасчетныйОбороты.Регистратор = ВТ_ТаблицаПоШапкеДокумента.Ссылка
			|	И ХозрасчетныйОбороты.СчетКт = ВТ_ТаблицаПоШапкеДокумента.СчетУчетаРасчетовСКонтрагентом
			|
			|СГРУППИРОВАТЬ ПО
			|	ХозрасчетныйОбороты.Регистратор
			|;
			|
			|////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВТ_ТаблицаПоШапкеДокумента.Ссылка,
			|	ВТ_ТаблицаПоШапкеДокумента.Дата,
			|	ВТ_ТаблицаПоШапкеДокумента.ВалютаДокумента,
			|	ВТ_ТаблицаПоШапкеДокумента.Организация,
			|	ВТ_ТаблицаПоШапкеДокумента.КурсВзаиморасчетов,
			|	ВТ_ТаблицаПоШапкеДокумента.КратностьВзаиморасчетов,
			|	ВТ_ТаблицаПоШапкеДокумента.РасчетыВУсловныхЕдиницах,
			|	ВТ_ТаблицаПоШапкеДокумента.УчетАгентскогоНДС,
			|	ВТ_ТаблицаПоШапкеДокумента.СуммаВключаетНДС,
			|	ВТ_ТаблицаПоШапкеДокумента.СчетУчетаРасчетовСКонтрагентом,
			|	ВТ_ТаблицаПоШапкеДокумента.СчетУчетаРасчетовПоТаре,
			|	ЕСТЬNULL(СуммаПоПроводкамБезКурсовыхРазниц.ВсегоВалПоПроводкам,0) КАК ВсегоВалПоПроводкам,
			|	ЕСТЬNULL(СуммаПоПроводкамБезКурсовыхРазниц.ВсегоРубПоПроводкам, 0) - ЕСТЬNULL(КурсовыеРазницы.КурсоваяРазницаРуб, 0) КАК ВсегоРубПоПроводкам,
			|	ЕСТЬNULL(СуммыПоНДССобственному.ВсегоНДСРуб, 0) КАК ВсегоНДСРуб,
			|	ЕСТЬNULL(СуммыПоНДССобственному.ВсегоБезНДСРуб, 0) КАК ВсегоБезНДСРуб
			|ИЗ
			|	ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
			|	ЛЕВОЕ СОЕДИНЕНИЕ КурсовыеРазницы КАК КурсовыеРазницы
			|	ПО ВТ_ТаблицаПоШапкеДокумента.Ссылка = КурсовыеРазницы.Регистратор
			|	ЛЕВОЕ СОЕДИНЕНИЕ СуммаПоПроводкамБезКурсовыхРазниц КАК СуммаПоПроводкамБезКурсовыхРазниц
			|	ПО ВТ_ТаблицаПоШапкеДокумента.Ссылка = СуммаПоПроводкамБезКурсовыхРазниц.Регистратор
			|	ЛЕВОЕ СОЕДИНЕНИЕ СуммыПоНДССобственному КАК СуммыПоНДССобственному
			|	ПО ВТ_ТаблицаПоШапкеДокумента.Ссылка = СуммыПоНДССобственному.Регистратор
			|;
			|
			|////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ КурсовыеРазницы
			|;
			|
			|////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ СуммаПоПроводкамБезКурсовыхРазниц
			|;
			|
			|////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ СуммыПоНДССобственному
			|;
			|
			|////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТ_ТаблицаПоШапкеДокумента";
			
		КонецЕсли;	
		
	Иначе
		
		НомераТаблиц.Вставить("ТаблицаШапкаССуммами",                  НомераТаблиц.Количество());
		НомераТаблиц.Вставить("УничтожениеВТ_ТаблицаПоШапкеДокумента", НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТаблицаПоШапкеДокумента.Ссылка,
		|	ВТ_ТаблицаПоШапкеДокумента.Дата,
		|	ВТ_ТаблицаПоШапкеДокумента.ВалютаДокумента,
		|	ВТ_ТаблицаПоШапкеДокумента.Организация,";
		
		Если НЕ ИмяДокумента = "КорректировкаПоступления" и НЕ ИмяДокумента = "КорректировкаРеализации" Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	ВТ_ТаблицаПоШапкеДокумента.КурсВзаиморасчетов,
			|	ВТ_ТаблицаПоШапкеДокумента.КратностьВзаиморасчетов,";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|	ВТ_ТаблицаПоШапкеДокумента.РасчетыВУсловныхЕдиницах,
		|	ВТ_ТаблицаПоШапкеДокумента.УчетАгентскогоНДС,
		|	ВТ_ТаблицаПоШапкеДокумента.СуммаВключаетНДС,
		|	ВТ_ТаблицаПоШапкеДокумента.СчетУчетаРасчетовСКонтрагентом,
		|	ВТ_ТаблицаПоШапкеДокумента.СчетУчетаРасчетовПоТаре,
		|	0 КАК ВсегоВалПоПроводкам,
		|	0 КАК ВсегоРубПоПроводкам,
		|	0 КАК ВсегоНДСРуб,
		|	0 КАК ВсегоБезНДСРуб
		|ИЗ
		|	ВТ_ТаблицаПоШапкеДокумента КАК ВТ_ТаблицаПоШапкеДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ТаблицаПоШапкеДокумента";
		
	КонецЕсли;
	
	НомераТаблиц.Вставить("ТаблицаДокумента",                                        НомераТаблиц.Количество());
	НомераТаблиц.Вставить("УничтожениеПредварительнаяТаблицаДляРасчетаРублевыхСумм", НомераТаблиц.Количество());
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПредварительнаяТаблицаДляРасчетаРублевыхСумм.ИмяСписка,
	|	ПредварительнаяТаблицаДляРасчетаРублевыхСумм.ТабличнаячастьДокумента, 
	|	ПредварительнаяТаблицаДляРасчетаРублевыхСумм.ДокументСинхронизацииСРегистромРублевыеСуммы КАК Ссылка,
	|	ПредварительнаяТаблицаДляРасчетаРублевыхСумм.НомерСтроки,
	|	Сумма(ПредварительнаяТаблицаДляРасчетаРублевыхСумм.ВсегоВал) КАК ВсегоВал,
	|	Максимум(ПредварительнаяТаблицаДляРасчетаРублевыхСумм.СтавкаНДС) КАК СтавкаНДС,
	|	Сумма(ПредварительнаяТаблицаДляРасчетаРублевыхСумм.НДСВал) КАК НДСВал,
	|	Сумма(ПредварительнаяТаблицаДляРасчетаРублевыхСумм.ВсегоВал - ПредварительнаяТаблицаДляРасчетаРублевыхСумм.НДСВал) КАК ВсегоБезНДСвал,
	|	Сумма(ПредварительнаяТаблицаДляРасчетаРублевыхСумм.ВсегоРуб) КАК ВсегоРуб,
	|	Сумма(ПредварительнаяТаблицаДляРасчетаРублевыхСумм.НДСРуб) КАК НДСРуб,
	|	Сумма(ПредварительнаяТаблицаДляРасчетаРублевыхСумм.СуммаБезНДСРуб) КАК СуммаБезНДСРуб,
	|	МАКСИМУМ(ПредварительнаяТаблицаДляРасчетаРублевыхСумм.ЭтоКомиссия) КАК ЭтоКомиссия";
	
	Если ИмяДокумента = "ПоступлениеДопРасходов" Тогда
		
		ТекстЗапроса = ТекстЗапроса + ",
		|	СУММА(ВЫРАЗИТЬ(ПредварительнаяТаблицаДляРасчетаРублевыхСумм.БазаРаспределенияКоличество КАК ЧИСЛО(19,3))) КАК БазаРаспределенияКоличество,
		|	СУММА(ВЫРАЗИТЬ(ПредварительнаяТаблицаДляРасчетаРублевыхСумм.БазаРаспределенияСумма КАК Число(15,2))) КАК БазаРаспределенияСумма,
		|	МАКСИМУМ(ПредварительнаяТаблицаДляРасчетаРублевыхСумм.СпособРаспределения) КАК СпособРаспределения";
		
	КонецЕсли;	
	
	ТекстЗапроса = ТекстЗапроса + "
	|ИЗ
	|	ПредварительнаяТаблицаДляРасчетаРублевыхСумм КАК ПредварительнаяТаблицаДляРасчетаРублевыхСумм";
	
	Если НЕ ИмяДокумента = "ПоступлениеДопРасходов" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ
		|	ПредварительнаяТаблицаДляРасчетаРублевыхСумм.ВсегоВал <> 0";
		
	КонецЕсли;

	ТекстЗапроса = ТекстЗапроса + "
	|
	|СГРУППИРОВАТЬ ПО
	|	ПредварительнаяТаблицаДляРасчетаРублевыхСумм.ИмяСписка,
	|	ПредварительнаяТаблицаДляРасчетаРублевыхСумм.ТабличнаячастьДокумента, 
	|	ПредварительнаяТаблицаДляРасчетаРублевыхСумм.ДокументСинхронизацииСРегистромРублевыеСуммы,
	|	ПредварительнаяТаблицаДляРасчетаРублевыхСумм.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПредварительнаяТаблицаДляРасчетаРублевыхСумм.ДокументСинхронизацииСРегистромРублевыеСуммы,
	|	ПредварительнаяТаблицаДляРасчетаРублевыхСумм.ИмяСписка,
	|	ПредварительнаяТаблицаДляРасчетаРублевыхСумм.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПредварительнаяТаблицаДляРасчетаРублевыхСумм";
	
	Возврат ТекстЗапроса;
	
КонецФункции	

Процедура ОбновитьДвиженияРегистраРублевыеСуммыДокументовВВалюте() Экспорт
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	РегистрСведенийРублевыеСуммыДокументовВВалютеОбъектМетаданных = Метаданные.РегистрыСведений.РублевыеСуммыДокументовВВалюте;
	
	МассивВидовОбрабатываемыхДокументов = Новый Массив;
	
	ДокументыОбъектыМетаданных = Метаданные.Документы;
	
	Для Каждого Документ Из ДокументыОбъектыМетаданных Цикл
		
		НаборДвижений = Документ.Движения;
		
		Если Документ.Движения.Содержит(РегистрСведенийРублевыеСуммыДокументовВВалютеОбъектМетаданных) Тогда
			МассивВидовОбрабатываемыхДокументов.Добавить(Документ);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ОбрабатываемыйДокумент Из МассивВидовОбрабатываемыхДокументов Цикл
		
		ИмяДокумента = ОбрабатываемыйДокумент.Имя;
		
		НомераТаблиц = Новый Структура;
		
		СтруктураПередаваемыхПараметров = Новый Структура;
		СтруктураПередаваемыхПараметров.Вставить("МетаданныеДокумента", ОбрабатываемыйДокумент);
		СтруктураПередаваемыхПараметров.Вставить("ВыбратьТаблицыПодчиненных", Ложь);
		СтруктураПередаваемыхПараметров.Вставить("ИмяРеквизитаСвязиСПодчиненными", "");
		
		Если ИмяДокумента = "ПоступлениеНМА" или ИмяДокумента = "ПоступлениеДопРасходов"
			или ИмяДокумента = "ПоступлениеИзПереработки" или ИмяДокумента = "ПоступлениеТоваровУслуг"
			или ИмяДокумента = "ОтражениеНДСКВычету" Тогда
			
			СтруктураПередаваемыхПараметров.Вставить("НаправлениеДвижения", "Поступление");
			
		Иначе
			
			СтруктураПередаваемыхПараметров.Вставить("НаправлениеДвижения", "Выбытие");
			
			Если ИмяДокумента = "РеализацияОтгруженныхТоваров" Тогда
				
				СтруктураПередаваемыхПараметров.ВыбратьТаблицыПодчиненных = Истина;
				СтруктураПередаваемыхПараметров.ИмяРеквизитаСвязиСПодчиненными = "ДокументОтгрузки";
				
			КонецЕсли;
			
		КонецЕсли;	
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = ПодготовитьТекстЗапросаДляПечатиСправкиРасчетаРублевыеСуммыДокументовВВалюте(СтруктураПередаваемыхПараметров ,НомераТаблиц);
		
		Запрос.УстановитьПараметр("ВалютаРеглУчета", ВалютаРегламентированногоУчета);
		Запрос.УстановитьПараметр("НачалоУпрощенногоУчетаНДС", НачалоДня('2012-01-01'));
		
		МассивКурсовыхРазниц = Новый Массив;
		МассивКурсовыхРазниц.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.КурсовыеРазницы"));
		МассивКурсовыхРазниц.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.КурсовыеРазницыПоРасчетамВУЕ"));
		МассивКурсовыхРазниц.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.СуммовыеРазницы"));
		
		Запрос.УстановитьПараметр("МассивЗначенийАналитикиКурсовыхРазниц", МассивКурсовыхРазниц);
		Запрос.УстановитьПараметр("СчетДоходов", ПланыСчетов.Хозрасчетный.ПрочиеДоходы);
		Запрос.УстановитьПараметр("СчетРасходов", ПланыСчетов.Хозрасчетный.ПрочиеРасходы);
		
		Результат            = Запрос.ВыполнитьПакет();
		
		ВыборкаПоДокументам = Результат[НомераТаблиц.ТаблицаШапкаССуммами].Выбрать();
		
		ВыборкаПоТабличнымЧастям = Результат[НомераТаблиц.ТаблицаДокумента].Выбрать();
		
		Пока ВыборкаПоДокументам.Следующий() Цикл
			
			ОбрабатываемыйДокументСсылка = ВыборкаПоДокументам.Ссылка;
			Организация                  = ВыборкаПоДокументам.Организация;
			ДатаДокумента                = ВыборкаПоДокументам.Дата;
			СуммаРубПоДокументу          = ВыборкаПоДокументам.ВсегоРубПоПроводкам;
			
			СуммаНДСРубСобственный     = ВыборкаПоДокументам.ВсегоНДСРуб;
			СуммаБезНДСРубСобственный  = ВыборкаПоДокументам.ВсегоБезНДСРуб;
			
			Если ИмяДокумента = "КорректировкаПоступления" или ИмяДокумента = "КорректировкаРеализации" Тогда
				
				СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
				ВыборкаПоДокументам.ВалютаДокумента, ОбрабатываемыйДокументСсылка[?(ИмяДокумента = "КорректировкаПоступления", "ИсправляемыйДокументПоступления", "ИсправляемыйДокументРеализации")].Дата);
				
				Курс                         = СтруктураКурсаВзаиморасчетов.Курс;
				Кратность                    = СтруктураКурсаВзаиморасчетов.Кратность;
				
			Иначе
				
				Курс                         = ВыборкаПоДокументам.КурсВзаиморасчетов;
				Кратность                    = ВыборкаПоДокументам.КратностьВзаиморасчетов;
				
			КонецЕсли;	
			
			ВычестьСуммуТары = Ложь;
			
			Если НЕ ОбрабатываемыйДокумент.ТабличныеЧасти.Найти("ВозвратнаяТара") = Неопределено И Не ИмяДокумента = "АвансовыйОтчет" Тогда
				
				Если ВыборкаПоДокументам.СчетУчетаРасчетовПоТаре = ВыборкаПоДокументам.СчетУчетаРасчетовСКонтрагентом Тогда
					ВычестьСуммуТары = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
			НаборЗаписейРублевыеСуммы = РегистрыСведений.РублевыеСуммыДокументовВВалюте.СоздатьНаборЗаписей();
			
			Отбор = НаборЗаписейРублевыеСуммы.Отбор;
			
			ПолеОтбора = Отбор.Найти("Регистратор");
			
			ПолеОтбора.ВидСравнения = ВидСравнения.Равно;
			ПолеОтбора.Значение     = ОбрабатываемыйДокументСсылка;
			
			ТаблицаДляЗаписиВРегистр = Новый ТаблицаЗначений;
			
			ТаблицаДляЗаписиВРегистр.Колонки.Добавить("ИмяСписка", ОбщегоНазначения.ОписаниеТипаСтрока(150));
			ТаблицаДляЗаписиВРегистр.Колонки.Добавить("ТабличнаяЧастьДокумента", Новый ОписаниеТипов("ПеречислениеСсылка.ТабличныеЧастиДокументов"));
			ТаблицаДляЗаписиВРегистр.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(17, 0));
			ТаблицаДляЗаписиВРегистр.Колонки.Добавить("ВсегоВал", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
			ТаблицаДляЗаписиВРегистр.Колонки.Добавить("НДСВал", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
			ТаблицаДляЗаписиВРегистр.Колонки.Добавить("ВсегоБезНДСВал", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
			ТаблицаДляЗаписиВРегистр.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
			ТаблицаДляЗаписиВРегистр.Колонки.Добавить("ВсегоРуб", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
			ТаблицаДляЗаписиВРегистр.Колонки.Добавить("НДСРуб", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
			ТаблицаДляЗаписиВРегистр.Колонки.Добавить("СуммаБезНДСРуб", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
			ТаблицаДляЗаписиВРегистр.Колонки.Добавить("ЭтоКомиссия", Новый ОписаниеТипов("Булево"));
			
			Если ИмяДокумента = "ПоступлениеДопРасходов" Тогда
				
				ТаблицаДляЗаписиВРегистр.Колонки.Добавить("БазаРаспределенияКоличество", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
				ТаблицаДляЗаписиВРегистр.Колонки.Добавить("БазаРаспределенияСумма", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
				ТаблицаДляЗаписиВРегистр.Колонки.Добавить("СпособРаспределения", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыРаспределенияДопРасходов"));
				
			КонецЕсли;	
			
			ВыборкаПоТабличнымЧастям.Сбросить();
			Пока ВыборкаПоТабличнымЧастям.НайтиСледующий(ОбрабатываемыйДокументСсылка, "Ссылка") Цикл
				
				НоваяСтрока = ТаблицаДляЗаписиВРегистр.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоТабличнымЧастям);
				
			КонецЦикла;
			
			Если ИмяДокумента = "ОтчетКомиссионераОПродажах" ИЛИ ИмяДокумента = "ОтчетКомитентуОПродажах" Тогда
				
				Если ИмяДокумента = "ОтчетКомиссионераОПродажах" Тогда
					
					СуммаВознагражденияРуб       = ВыборкаПоДокументам.ВсегоРубПоПроводкамВознаграждение;
					СуммаНДСВознагражденияРуб    = ВыборкаПоДокументам.ВсегоНДСРубВознаграждение;
					СуммаБезНДСВознагражденияРуб = ВыборкаПоДокументам.ВсегоБезНДСРубВознаграждение;
					
				Иначе
					
					СуммаВознагражденияРуб       = СуммаРубПоДокументу;
					СуммаНДСВознагражденияРуб    = СуммаНДСРубСобственный;
					СуммаБезНДСВознагражденияРуб = СуммаБезНДСРубСобственный;
					
					СуммаРубПоДокументу       = 0;
					СуммаНДСРубСобственный    = 0;
					СуммаБезНДСРубСобственный = 0;
					
				КонецЕсли;	
				
				ОтборВознаграждение = Новый Структура("ТабличнаяЧастьДокумента", Перечисления.ТабличныеЧастиДокументов.ПустаяСсылка());
				ТаблицаТолькоВознаграждение = ТаблицаДляЗаписиВРегистр.Скопировать(ОтборВознаграждение);
				
				ТаблицаБезТары = ТаблицаДляЗаписиВРегистр.Скопировать();
				
				СтрокаТаблицыСТарой = ТаблицаБезТары.Найти(Перечисления.ТабличныеЧастиДокументов.ПустаяСсылка(), "ТабличнаяЧастьДокумента");
				
				Пока НЕ СтрокаТаблицыСТарой = Неопределено Цикл
					
					ТаблицаБезТары.Удалить(СтрокаТаблицыСТарой);
					
					СтрокаТаблицыСТарой = ТаблицаБезТары.Найти(Перечисления.ТабличныеЧастиДокументов.ПустаяСсылка(), "ТабличнаяЧастьДокумента");
					
				КонецЦикла;
				
				Если ТаблицаТолькоВознаграждение.Количество() > 0 Тогда
					
					ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
					СуммаВознагражденияРуб, ТаблицаТолькоВознаграждение, "ВсегоРуб", "ВсегоВал");
					
					СуммаДляРаспределенияНДС = СуммаНДСВознагражденияРуб + СуммаБезНДСВознагражденияРуб;
					
					ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
					СуммаДляРаспределенияНДС, ТаблицаТолькоВознаграждение, "СуммаБезНДСРуб", "ВсегоВал");
					
					Для Каждого СтрокаТаблицы Из ТаблицаТолькоВознаграждение Цикл
						
						ПроцентНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС);
						
						СтрокаТаблицы.НДСРуб = СтрокаТаблицы.СуммаБезНДСРуб*ПроцентНДС/(100 + ПроцентНДС);
						
						СтрокаТаблицы.СуммаБезНДСРуб = СтрокаТаблицы.СуммаБезНДСРуб - СтрокаТаблицы.НДСРуб;
						
						Если ВыборкаПоДокументам.УчетАгентскогоНДС и НЕ ВыборкаПоДокументам.РасчетыВУсловныхЕдиницах Тогда
							СтрокаТаблицы.ВсегоРУб = СтрокаТаблицы.НДСРуб;
						КонецЕсли;	
						
						НоваяСтрока = НаборЗаписейРублевыеСуммы.Добавить();
						
						НоваяСтрока.Активность              = Истина;
						НоваяСтрока.Организация             = Организация;
						НоваяСтрока.Период                  = ДатаДокумента;
						НоваяСтрока.Регистратор             = ОбрабатываемыйДокументСсылка;
						НоваяСтрока.ТабличнаяЧастьДокумента = СтрокаТаблицы.ТабличнаяЧастьДокумента;
						НоваяСтрока.НомерСтрокиДокумента    = СтрокаТаблицы.НомерСтроки;
						НоваяСтрока.Всего                   = СтрокаТаблицы.ВсегоРуб;
						НоваяСтрока.НДС                     = СтрокаТаблицы.НДСРуб;
						НоваяСтрока.НалоговаяБазаНДС        = СтрокаТаблицы.СуммаБезНДСРуб;
						
					КонецЦикла;
					
				КонецЕсли;
				
			ИначеЕсли ИмяДокумента = "ПоступлениеДопРасходов" Тогда
				
				ОтборРасходыРаспределяемые = Новый Структура("ТабличнаяЧастьДокумента", Перечисления.ТабличныеЧастиДокументов.ПустаяСсылка());
				ТаблицаТолькоРасходыРаспределяемые = ТаблицаДляЗаписиВРегистр.Скопировать(ОтборРасходыРаспределяемые);
				
				ТаблицаБезТары = ТаблицаДляЗаписиВРегистр.Скопировать();
				
				СтрокаТаблицыСТарой = ТаблицаБезТары.Найти(Перечисления.ТабличныеЧастиДокументов.ПустаяСсылка(), "ТабличнаяЧастьДокумента");
				
				Пока НЕ СтрокаТаблицыСТарой = Неопределено Цикл
					
					ТаблицаБезТары.Удалить(СтрокаТаблицыСТарой);
					
					СтрокаТаблицыСТарой = ТаблицаБезТары.Найти(Перечисления.ТабличныеЧастиДокументов.ПустаяСсылка(), "ТабличнаяЧастьДокумента");
					
				КонецЦикла;
				
				Если ТаблицаТолькоРасходыРаспределяемые.Количество() > 0 Тогда
					
					СуммаРасходовДляРаспределения    = ТаблицаТолькоРасходыРаспределяемые[0].ВсегоВал;
					СуммаНДСПоРаспределяемымРасходам = ТаблицаТолькоРасходыРаспределяемые[0].НДСВал;
					
					ТаблицаБезТары.Колонки.Добавить("ВзаиморасчетыИзШапки", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
					ТаблицаБезТары.Колонки.Добавить("НДСИзШапки", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
					
					Если ТаблицаТолькоРасходыРаспределяемые[0].СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоКоличеству Тогда 
						
						ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
						СуммаРасходовДляРаспределения, ТаблицаБезТары, "ВзаиморасчетыИзШапки", "БазаРаспределенияКоличество");
						
						ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
						СуммаНДСПоРаспределяемымРасходам, ТаблицаБезТары, "НДСИзШапки", "БазаРаспределенияКоличество");
						
					Иначе
						
						ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
						СуммаРасходовДляРаспределения, ТаблицаБезТары, "ВзаиморасчетыИзШапки", "БазаРаспределенияСумма");
						
						ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
						СуммаНДСПоРаспределяемымРасходам, ТаблицаБезТары, "НДСИзШапки", "БазаРаспределенияСумма");
						
					КонецЕсли;
					
					Для Каждого СтрокаТаблицы Из ТаблицаБезТары Цикл
						
						СтрокаТаблицы.ВсегоВал = СтрокаТаблицы.ВсегоВал + СтрокаТаблицы.ВзаиморасчетыИзШапки;
						СтрокаТаблицы.НДСВал   = СтрокаТаблицы.НДСВал + СтрокаТаблицы.НДСИзШапки;
						
					КонецЦикла;
					
				КонецЕсли;	
				
			Иначе	
				
				ОтборТара = Новый Структура("ИмяСписка", "ВозвратнаяТара");
				ТаблицаТолькоТара = ТаблицаДляЗаписиВРегистр.Скопировать(ОтборТара);
				
				ТаблицаБезТары = ТаблицаДляЗаписиВРегистр.Скопировать();
				
				СтрокаТаблицыСТарой = ТаблицаБезТары.Найти("ВозвратнаяТара", "ИмяСписка");
				
				Пока НЕ СтрокаТаблицыСТарой = Неопределено Цикл
					
					ТаблицаБезТары.Удалить(СтрокаТаблицыСТарой);
					
					СтрокаТаблицыСТарой = ТаблицаБезТары.Найти("ВозвратнаяТара", "ИмяСписка");
					
				КонецЦикла;
				
				Если ТаблицаТолькоТара.Количество() > 0 Тогда
					
					СуммаРубДляРаспределения = ?(Кратность = 0, 0, ТаблицаТолькоТара.Итог("ВсегоВал")*Курс/Кратность);
					
					ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
					СуммаРубДляРаспределения, ТаблицаТолькоТара, "ВсегоРуб", "ВсегоВал");
					
					Для Каждого СтрокаТаблицы Из ТаблицаТолькоТара Цикл
						
						НоваяСтрока = НаборЗаписейРублевыеСуммы.Добавить();
						
						НоваяСтрока.Активность = Истина;
						НоваяСтрока.Организация = Организация;
						НоваяСтрока.Период      = ДатаДокумента;
						НоваяСтрока.Регистратор = ОбрабатываемыйДокументСсылка;
						НоваяСтрока.ТабличнаяЧастьДокумента = СтрокаТаблицы.ТабличнаяЧастьДокумента;
						НоваяСтрока.НомерСтрокиДокумента    = СтрокаТаблицы.НомерСтроки;
						НоваяСтрока.Всего                   = СтрокаТаблицы.ВсегоРуб;
						НоваяСтрока.НДС                     = СтрокаТаблицы.НДСРуб;
						НоваяСтрока.НалоговаяБазаНДС        = СтрокаТаблицы.СуммаБезНДСРуб;
						
					КонецЦикла;
					
				КонецЕсли;	
				
				Если ВычестьСуммуТары Тогда
					СуммаРубПоДокументу = СуммаРубПоДокументу - ТаблицаТолькоТара.Итог("ВсегоРуб");
				КонецЕсли;
				
				Если ИмяДокумента = "АвансовыйОтчет" Тогда
					
					ОтборТара = Новый Структура("ИмяСписка", "ОплатаПоставщикам");
					ТаблицаТолькоОплатаПоставщикам = ТаблицаДляЗаписиВРегистр.Скопировать(ОтборТара);
					
					ТаблицаБезТары = ТаблицаБезТары.Скопировать();
					
					СтрокаТаблицыСТарой = ТаблицаБезТары.Найти("ОплатаПоставщикам", "ИмяСписка");
					
					Пока НЕ СтрокаТаблицыСТарой = Неопределено Цикл
						
						ТаблицаБезТары.Удалить(СтрокаТаблицыСТарой);
						
						СтрокаТаблицыСТарой = ТаблицаБезТары.Найти("ОплатаПоставщикам", "ИмяСписка");
						
					КонецЦикла;
					
					Если ТаблицаТолькоОплатаПоставщикам.Количество() > 0 Тогда
						
						СуммаРубДляРаспределения = ?(Кратность = 0, 0, ТаблицаТолькоОплатаПоставщикам.Итог("ВсегоВал")*Курс/Кратность);
						
						ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
						СуммаРубДляРаспределения, ТаблицаТолькоОплатаПоставщикам, "ВсегоРуб", "ВсегоВал");
						
						Для Каждого СтрокаТаблицы Из ТаблицаТолькоОплатаПоставщикам Цикл
							
							НоваяСтрока = НаборЗаписейРублевыеСуммы.Добавить();
							
							НоваяСтрока.Активность = Истина;
							НоваяСтрока.Организация = Организация;
							НоваяСтрока.Период      = ДатаДокумента;
							НоваяСтрока.Регистратор = ОбрабатываемыйДокументСсылка;
							НоваяСтрока.ТабличнаяЧастьДокумента = СтрокаТаблицы.ТабличнаяЧастьДокумента;
							НоваяСтрока.НомерСтрокиДокумента    = СтрокаТаблицы.НомерСтроки;
							НоваяСтрока.Всего                   = СтрокаТаблицы.ВсегоРуб;
							НоваяСтрока.НДС                     = СтрокаТаблицы.НДСРуб;
							НоваяСтрока.НалоговаяБазаНДС        = СтрокаТаблицы.СуммаБезНДСРуб;
							
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;	
				
			КонецЕсли;	
			
			Если НЕ СуммаРубПоДокументу = 0 Тогда
				
				ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
				СуммаРубПоДокументу, ТаблицаБезТары, "ВсегоРуб", "ВсегоВал");
				
				Если ВыборкаПоДокументам.УчетАгентскогоНДС или НЕ ВыборкаПоДокументам.РасчетыВУсловныхЕдиницах Тогда
					СуммаДляРаспределенияНДС = ?(Кратность = 0, 0, ТаблицаБезТары.Итог("ВсегоВал")*Курс/Кратность);
				Иначе
					СуммаДляРаспределенияНДС = ТаблицаБезТары.Итог("ВсегоРуб");
				КонецЕсли;	
				
				Если НЕ СуммаНДСРубСобственный = 0 или НЕ СуммаБезНДСРубСобственный = 0 Тогда
					
					ОтборСобственного = Новый Структура("ЭтоКомиссия", Ложь);
					
					ТаблицаСобственногоТовара = ТаблицаБезТары.Скопировать(ОтборСобственного);
					
					СуммаДляРаспределенияНДССобственного = СуммаНДСРубСобственный + СуммаБезНДСРубСобственный;
					
					ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
					СуммаДляРаспределенияНДССобственного, ТаблицаСобственногоТовара, "СуммаБезНДСРуб", "ВсегоВал");
					
					ОтборНеСобственный = Новый Структура("ЭтоКомиссия", Истина);
					
					ТаблицаНеСобственногоТовара = ТаблицаБезТары.Скопировать(ОтборНеСобственный);
					
					СуммаДляРаспределенияБезНДСНеСобственного = СуммаДляРаспределенияНДС - СуммаДляРаспределенияНДССобственного;
					
					ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
					СуммаДляРаспределенияБезНДСНеСобственного, ТаблицаНеСобственногоТовара, "СуммаБезНДСРуб", "ВсегоВал");
					
					Для Каждого СтрокаТаблицы Из ТаблицаНеСобственногоТовара Цикл
						
						ПроцентНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС);
						
						СтрокаТаблицы.НДСРуб = СтрокаТаблицы.СуммаБезНДСРуб*ПроцентНДС/(100 + ПроцентНДС);
						
						СтрокаТаблицы.СуммаБезНДСРуб = СтрокаТаблицы.СуммаБезНДСРуб - СтрокаТаблицы.НДСРуб;
						
						НоваяСтрока = НаборЗаписейРублевыеСуммы.Добавить();
						
						НоваяСтрока.Активность = Истина;
						НоваяСтрока.Организация = Организация;
						НоваяСтрока.Период      = ДатаДокумента;
						НоваяСтрока.Регистратор = ОбрабатываемыйДокументСсылка;
						НоваяСтрока.ТабличнаяЧастьДокумента = СтрокаТаблицы.ТабличнаяЧастьДокумента;
						НоваяСтрока.НомерСтрокиДокумента = СтрокаТаблицы.НомерСтроки;
						НоваяСтрока.Всего = ?(Найти(СтрокаТаблицы.ИмяСписка, "ДоИзменения"), СтрокаТаблицы.ВсегоРуб*(-1), СтрокаТаблицы.ВсегоРуб);
						НоваяСтрока.НДС   = ?(Найти(СтрокаТаблицы.ИмяСписка, "ДоИзменения"), СтрокаТаблицы.НДСРуб*(-1), СтрокаТаблицы.НДСРуб);
						НоваяСтрока.НалоговаяБазаНДС = ?(Найти(СтрокаТаблицы.ИмяСписка, "ДоИзменения"), СтрокаТаблицы.СуммаБезНДСРуб*(-1), СтрокаТаблицы.СуммаБезНДСРуб);
						
					КонецЦикла;
					
					Для Каждого СтрокаТаблицы Из ТаблицаСобственногоТовара Цикл
						
						ПроцентНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС);
						
						СтрокаТаблицы.НДСРуб = СтрокаТаблицы.СуммаБезНДСРуб*ПроцентНДС/(100 + ПроцентНДС);
						
					КонецЦикла;
					
					ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
					СуммаНДСРубСобственный, ТаблицаСобственногоТовара, "НДСРуб");
					
					Для Каждого СтрокаТаблицы Из ТаблицаСобственногоТовара Цикл
						
						СтрокаТаблицы.СуммаБезНДСРуб = СтрокаТаблицы.СуммаБезНДСРуб - СтрокаТаблицы.НДСРуб;
						
						Если ВыборкаПоДокументам.УчетАгентскогоНДС и НЕ ВыборкаПоДокументам.РасчетыВУсловныхЕдиницах Тогда
							СтрокаТаблицы.ВсегоРуб = СтрокаТаблицы.ВсегоРуб + СтрокаТаблицы.НДСРуб;
						КонецЕсли;	
						
						НоваяСтрока = НаборЗаписейРублевыеСуммы.Добавить();
						
						НоваяСтрока.Активность = Истина;
						НоваяСтрока.Организация = Организация;
						НоваяСтрока.Период      = ДатаДокумента;
						НоваяСтрока.Регистратор = ОбрабатываемыйДокументСсылка;
						НоваяСтрока.ТабличнаяЧастьДокумента = СтрокаТаблицы.ТабличнаяЧастьДокумента;
						НоваяСтрока.НомерСтрокиДокумента = СтрокаТаблицы.НомерСтроки;
						НоваяСтрока.Всего = ?(Найти(СтрокаТаблицы.ИмяСписка, "ДоИзменения"), СтрокаТаблицы.ВсегоРуб*(-1), СтрокаТаблицы.ВсегоРуб);
						НоваяСтрока.НДС   = ?(Найти(СтрокаТаблицы.ИмяСписка, "ДоИзменения"), СтрокаТаблицы.НДСРуб*(-1), СтрокаТаблицы.НДСРуб);
						НоваяСтрока.НалоговаяБазаНДС = ?(Найти(СтрокаТаблицы.ИмяСписка, "ДоИзменения"), СтрокаТаблицы.СуммаБезНДСРуб*(-1), СтрокаТаблицы.СуммаБезНДСРуб);
						
					КонецЦикла;	
					
					ТаблицаБезТары.Очистить();
					
				Иначе
					
					ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
					СуммаДляРаспределенияНДС, ТаблицаБезТары, "СуммаБезНДСРуб", "ВсегоВал");
					
					Для Каждого СтрокаТаблицы Из ТаблицаБезТары Цикл
						
						ПроцентНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС);
						
						СтрокаТаблицы.НДСРуб = СтрокаТаблицы.СуммаБезНДСРуб*ПроцентНДС/(100 + ПроцентНДС);
						
						СтрокаТаблицы.СуммаБезНДСРуб = СтрокаТаблицы.СуммаБезНДСРуб - СтрокаТаблицы.НДСРуб;
						
					КонецЦикла;
					
				КонецЕсли;	
				
			Иначе
				
				СуммаДляРаспределенияНДС = ?(Кратность = 0, 0, ТаблицаБезТары.Итог("ВсегоВал")*Курс/Кратность);
				
				ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
				СуммаДляРаспределенияНДС, ТаблицаБезТары, "ВсегоРуб", "ВсегоВал");
				
				Если НЕ СуммаНДСРубСобственный = 0 или НЕ СуммаБезНДСРубСобственный = 0 Тогда
					
					ОтборСобственного = Новый Структура("ЭтоКомиссия", Ложь);
					
					ТаблицаСобственногоТовара = ТаблицаБезТары.Скопировать(ОтборСобственного);
					
					СуммаДляРаспределенияНДССобственного = СуммаНДСРубСобственный + СуммаБезНДСРубСобственный;
					
					ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
					СуммаДляРаспределенияНДССобственного, ТаблицаСобственногоТовара, "СуммаБезНДСРуб", "ВсегоВал");
					
					ОтборНеСобственный = Новый Структура("ЭтоКомиссия", Истина);
					
					ТаблицаНеСобственногоТовара = ТаблицаБезТары.Скопировать(ОтборНеСобственный);
					
					СуммаДляРаспределенияБезНДСНеСобственного = СуммаДляРаспределенияНДС - СуммаДляРаспределенияНДССобственного;
					
					ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
					СуммаДляРаспределенияБезНДСНеСобственного, ТаблицаНеСобственногоТовара, "СуммаБезНДСРуб", "ВсегоВал");
					
					Для Каждого СтрокаТаблицы Из ТаблицаНеСобственногоТовара Цикл
						
						ПроцентНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС);
						
						СтрокаТаблицы.НДСРуб = СтрокаТаблицы.СуммаБезНДСРуб*ПроцентНДС/(100 + ПроцентНДС);
						
						СтрокаТаблицы.СуммаБезНДСРуб = СтрокаТаблицы.СуммаБезНДСРуб - СтрокаТаблицы.НДСРуб;
						
						НоваяСтрока = НаборЗаписейРублевыеСуммы.Добавить();
						
						НоваяСтрока.Активность = Истина;
						НоваяСтрока.Организация = Организация;
						НоваяСтрока.Период      = ДатаДокумента;
						НоваяСтрока.Регистратор = ОбрабатываемыйДокументСсылка;
						НоваяСтрока.ТабличнаяЧастьДокумента = СтрокаТаблицы.ТабличнаяЧастьДокумента;
						НоваяСтрока.НомерСтрокиДокумента = СтрокаТаблицы.НомерСтроки;
						НоваяСтрока.Всего = ?(Найти(СтрокаТаблицы.ИмяСписка, "ДоИзменения"), СтрокаТаблицы.ВсегоРуб*(-1), СтрокаТаблицы.ВсегоРуб);
						НоваяСтрока.НДС   = ?(Найти(СтрокаТаблицы.ИмяСписка, "ДоИзменения"), СтрокаТаблицы.НДСРуб*(-1), СтрокаТаблицы.НДСРуб);
						НоваяСтрока.НалоговаяБазаНДС = ?(Найти(СтрокаТаблицы.ИмяСписка, "ДоИзменения"), СтрокаТаблицы.СуммаБезНДСРуб*(-1), СтрокаТаблицы.СуммаБезНДСРуб);
						
					КонецЦикла;
					
					Для Каждого СтрокаТаблицы Из ТаблицаСобственногоТовара Цикл
						
						ПроцентНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС);
						
						СтрокаТаблицы.НДСРуб = СтрокаТаблицы.СуммаБезНДСРуб*ПроцентНДС/(100 + ПроцентНДС);
						
					КонецЦикла;
					
					ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
					СуммаНДСРубСобственный, ТаблицаСобственногоТовара, "НДСРуб");
					
					Для Каждого СтрокаТаблицы Из ТаблицаСобственногоТовара Цикл
						
						СтрокаТаблицы.СуммаБезНДСРуб = СтрокаТаблицы.СуммаБезНДСРуб - СтрокаТаблицы.НДСРуб;
						
						Если ВыборкаПоДокументам.УчетАгентскогоНДС и НЕ ВыборкаПоДокументам.РасчетыВУсловныхЕдиницах Тогда
							СтрокаТаблицы.ВсегоРуб = СтрокаТаблицы.ВсегоРуб + СтрокаТаблицы.НДСРуб;
						КонецЕсли;	
						
						НоваяСтрока = НаборЗаписейРублевыеСуммы.Добавить();
						
						НоваяСтрока.Активность = Истина;
						НоваяСтрока.Организация = Организация;
						НоваяСтрока.Период      = ДатаДокумента;
						НоваяСтрока.Регистратор = ОбрабатываемыйДокументСсылка;
						НоваяСтрока.ТабличнаяЧастьДокумента = СтрокаТаблицы.ТабличнаяЧастьДокумента;
						НоваяСтрока.НомерСтрокиДокумента = СтрокаТаблицы.НомерСтроки;
						НоваяСтрока.Всего = ?(Найти(СтрокаТаблицы.ИмяСписка, "ДоИзменения"), СтрокаТаблицы.ВсегоРуб*(-1), СтрокаТаблицы.ВсегоРуб);
						НоваяСтрока.НДС   = ?(Найти(СтрокаТаблицы.ИмяСписка, "ДоИзменения"), СтрокаТаблицы.НДСРуб*(-1), СтрокаТаблицы.НДСРуб);
						НоваяСтрока.НалоговаяБазаНДС = ?(Найти(СтрокаТаблицы.ИмяСписка, "ДоИзменения"), СтрокаТаблицы.СуммаБезНДСРуб*(-1), СтрокаТаблицы.СуммаБезНДСРуб);
						
					КонецЦикла;	
					
					ТаблицаБезТары.Очистить();
					
				Иначе	
					
					Для Каждого СтрокаТаблицы Из ТаблицаБезТары Цикл
						
						ПроцентНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС);
						
						СтрокаТаблицы.НДСРуб = СтрокаТаблицы.ВсегоРуб*ПроцентНДС/(100 + ПроцентНДС);
						
						СтрокаТаблицы.СуммаБезНДСРуб = СтрокаТаблицы.ВсегоРуб - СтрокаТаблицы.НДСРуб;
						
					КонецЦикла;
					
				КонецЕСли;	
				
			КонецЕсли;	
			
			Для Каждого СтрокаТаблицы Из ТаблицаБезТары Цикл
				
				НоваяСтрока = НаборЗаписейРублевыеСуммы.Добавить();
				
				НоваяСтрока.Активность = Истина;
				НоваяСтрока.Организация = Организация;
				НоваяСтрока.Период      = ДатаДокумента;
				НоваяСтрока.Регистратор = ОбрабатываемыйДокументСсылка;
				НоваяСтрока.ТабличнаяЧастьДокумента = СтрокаТаблицы.ТабличнаяЧастьДокумента;
				НоваяСтрока.НомерСтрокиДокумента = СтрокаТаблицы.НомерСтроки;
				НоваяСтрока.Всего = ?(Найти(СтрокаТаблицы.ИмяСписка, "ДоИзменения"), СтрокаТаблицы.ВсегоРуб*(-1), СтрокаТаблицы.ВсегоРуб);
				НоваяСтрока.НДС   = ?(Найти(СтрокаТаблицы.ИмяСписка, "ДоИзменения"), СтрокаТаблицы.НДСРуб*(-1), СтрокаТаблицы.НДСРуб);
				НоваяСтрока.НалоговаяБазаНДС = ?(Найти(СтрокаТаблицы.ИмяСписка, "ДоИзменения"), СтрокаТаблицы.СуммаБезНДСРуб*(-1), СтрокаТаблицы.СуммаБезНДСРуб);
				
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписейРублевыеСуммы);
			
		КонецЦикла;
			
	КонецЦикла;
	
КонецПроцедуры	

Процедура ОбновитьЭкологическийКлассТС() Экспорт
	
	ЗаписиРегистрацииТС = РегистрыСведений.РегистрацияТранспортныхСредств.СоздатьНаборЗаписей();
	ЗаписиРегистрацииТС.Прочитать();
	ЕстьИзменения = Ложь;
	
	Для Каждого Строка Из ЗаписиРегистрацииТС Цикл
		Если ЗначениеЗаполнено(Строка.УдалитьЭкологическийКласс)
			И Не ЗначениеЗаполнено(Строка.ЭкологическийКласс) Тогда 
			
			Строка.ЭкологическийКласс = Строка.УдалитьЭкологическийКласс;
			Строка.УдалитьЭкологическийКласс = "";
			ЕстьИзменения = Истина;
			
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьИзменения Тогда 
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ЗаписиРегистрацииТС);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПустойТипКонтактнойИнформации() Экспорт
	
	ОбъектыКИ = Новый Массив();
	ОбъектыКИ.Добавить("Справочник.КонтактныеЛица");
	ОбъектыКИ.Добавить("Справочник.Контрагенты");
	ОбъектыКИ.Добавить("Справочник.Организации");
	ОбъектыКИ.Добавить("Справочник.ОсновныеСредства");
	ОбъектыКИ.Добавить("Справочник.ПодразделенияОрганизаций");
	ОбъектыКИ.Добавить("Справочник.Пользователи");
	ОбъектыКИ.Добавить("Справочник.ФизическиеЛица");
	
	Для Каждого ОбъектКИ Из ОбъектыКИ Цикл
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таб.Ссылка,
		|	Таб.Вид КАК ВидДляПоиска,
		|	Таб.Вид.Тип КАК ТипДляУстановки
		|ИЗ
		|	" + ОбъектКИ + ".КонтактнаяИнформация КАК Таб
		|ГДЕ
		|	Таб.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.ПустаяСсылка)
		|	И Таб.Вид <> ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПустаяСсылка)
		|	И Таб.Вид.Тип <> ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.ПустаяСсылка)";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если ТипЗнч(Выборка.Ссылка) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
				Если НЕ ЗначениеЗаполнено(Выборка.Ссылка.Владелец) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
						
			ОбъектСсылки = Выборка.Ссылка.ПолучитьОбъект();
			СтрокиДляУстановки = ОбъектСсылки.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Тип, Вид",Перечисления.ТипыКонтактнойИнформации.ПустаяСсылка(), Выборка.ВидДляПоиска));
			Для Каждого СтрокаДляУстановки Из СтрокиДляУстановки Цикл
				СтрокаДляУстановки.Тип = Выборка.ТипДляУстановки;
			КонецЦикла;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбъектСсылки);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьКонстантуРегистрироватьСчетаФактурыНаСуммовыеРазницы() Экспорт
	
	РегистрироватьСчетаФактурыНаСуммовыеРазницы = Константы.ИспользоватьВалютныйУчет.Получить()
		И (Константы.ИспользуетсяОСНО.Получить() ИЛИ Константы.ИспользуетсяНДФЛИП.Получить());
		
	Константы.РегистрироватьСчетаФактурыНаСуммовыеРазницы.Установить(РегистрироватьСчетаФактурыНаСуммовыеРазницы);
	
КонецПроцедуры

Процедура ЗаполнитьТабличныеЧастиНоменклатурыДокументаВНО() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка                  КАК Ссылка,
		|	Док.Ссылка.Проведен         КАК Проведен,
		|	Док.Ссылка.ПометкаУдаления  КАК ПометкаУдаления,
		|	КОЛИЧЕСТВО(Док.НомерСтроки) КАК КоличествоСтрокДляКонвертации
		|ИЗ
		|	Документ.ВводНачальныхОстатков.УдалитьМПЗПриобретенные КАК Док
		|
		|СГРУППИРОВАТЬ ПО
		|	Док.Ссылка,
		|	Док.Ссылка.Проведен,
		|	Док.Ссылка.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Док.Ссылка.Дата,
		|	Док.Ссылка
		|";
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Попытка
			Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.Прямой);
			Пока Выборка.Следующий() Цикл
				Если Выборка.КоличествоСтрокДляКонвертации > 0 Тогда
					ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
					ДокументОбъект.ОбменДанными.Загрузка = Истина;
					ДокументОбъект.ВыполнитьКонвертациюНоменклатурыПриПереходеС2БП();
					ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли;
			КонецЦикла;
		Исключение
			ТекстСообщения = НСтр("ru='Операция не выполнена'");
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьТабличныеЧастиРасчетовСКонтрагентамиДокументаВНО() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка                  КАК Ссылка,
		|	Док.Ссылка.Проведен         КАК Проведен,
		|	Док.Ссылка.ПометкаУдаления  КАК ПометкаУдаления,
		|	КОЛИЧЕСТВО(Док.НомерСтроки) КАК КоличествоСтрокДляКонвертации
		|ИЗ
		|	Документ.ВводНачальныхОстатков.РасчетыСКонтрагентами КАК Док
		|ГДЕ
		|	Док.СчетУчета.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
		|	И Док.Сумма <> 0
		|
		|СГРУППИРОВАТЬ ПО
		|	Док.Ссылка,
		|	Док.Ссылка.Проведен,
		|	Док.Ссылка.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Док.Ссылка.Дата,
		|	Док.Ссылка
		|";
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Попытка
			Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.Прямой);
			Пока Выборка.Следующий() Цикл
				Если Выборка.КоличествоСтрокДляКонвертации > 0 Тогда
					ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
					ДокументОбъект.ОбменДанными.Загрузка = Истина;
					ДокументОбъект.ВыполнитьКонвертациюРасчетовСКонтрагентамиПриПереходеС2БП();
					ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли;
			КонецЦикла;
		Исключение
			ТекстСообщения = НСтр("ru='Операция не выполнена'");
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьТабличныеЧастиРасчетовСПодотчетнымиЛицамиДокументаВНО() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка                  КАК Ссылка,
		|	Док.Ссылка.Проведен         КАК Проведен,
		|	Док.Ссылка.ПометкаУдаления  КАК ПометкаУдаления,
		|	КОЛИЧЕСТВО(Док.НомерСтроки) КАК КоличествоСтрокДляКонвертации
		|ИЗ
		|	Документ.ВводНачальныхОстатков.РасчетыСПодотчетнымиЛицами КАК Док
		|ГДЕ
		|	Док.СчетУчета.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
		|	И Док.Сумма <> 0
		|
		|СГРУППИРОВАТЬ ПО
		|	Док.Ссылка,
		|	Док.Ссылка.Проведен,
		|	Док.Ссылка.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Док.Ссылка.Дата,
		|	Док.Ссылка
		|";
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Попытка
			Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.Прямой);
			Пока Выборка.Следующий() Цикл
				Если Выборка.КоличествоСтрокДляКонвертации > 0 Тогда
					ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
					ДокументОбъект.ОбменДанными.Загрузка = Истина;
					ДокументОбъект.ВыполнитьКонвертациюРасчетовСПодотчетнымиЛицамиПриПереходеС2БП();
					ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли;
			КонецЦикла;
		Исключение
			ТекстСообщения = НСтр("ru='Операция не выполнена'");
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьКлючиСвязейТабличныхЧастейДокументаВНО() Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Док.Ссылка КАК Ссылка,
	               |	Док.Ссылка.Проведен КАК Проведен,
	               |	Док.Ссылка.ПометкаУдаления КАК ПометкаУдаления,
	               |	Док.НомерСтроки КАК НомерСтроки
	               |ПОМЕСТИТЬ ВТ_ИтогиПоДокументу
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		Док.Ссылка КАК Ссылка,
	               |		Док.Ссылка.Проведен КАК Проведен,
	               |		Док.Ссылка.ПометкаУдаления КАК ПометкаУдаления,
	               |		Док.НомерСтроки КАК НомерСтроки
	               |	ИЗ
	               |		Документ.ВводНачальныхОстатков.МПЗОтгруженные КАК Док
	               |	ГДЕ
	               |		Док.УдалитьКлюч <> 0
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		Док.Ссылка,
	               |		Док.Ссылка.Проведен,
	               |		Док.Ссылка.ПометкаУдаления,
	               |		Док.НомерСтроки
	               |	ИЗ
	               |		Документ.ВводНачальныхОстатков.ДанныеПоСФ КАК Док
	               |	ГДЕ
	               |		Док.УдалитьКлюч <> 0
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		Док.Ссылка,
	               |		Док.Ссылка.Проведен,
	               |		Док.Ссылка.ПометкаУдаления,
	               |		Док.НомерСтроки
	               |	ИЗ
	               |		Документ.ВводНачальныхОстатков.МПЗРеализованныеИП КАК Док
	               |	ГДЕ
	               |		Док.УдалитьКлюч <> 0
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		Док.Ссылка,
	               |		Док.Ссылка.Проведен,
	               |		Док.Ссылка.ПометкаУдаления,
	               |		Док.НомерСтроки
	               |	ИЗ
	               |		Документ.ВводНачальныхОстатков.Обороты КАК Док
	               |	ГДЕ
	               |		Док.УдалитьКлюч <> 0) КАК Док
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Док.Ссылка КАК Ссылка,
	               |	Док.Ссылка.Проведен КАК Проведен,
	               |	Док.Ссылка.ПометкаУдаления КАК ПометкаУдаления,
	               |	КОЛИЧЕСТВО(Док.НомерСтроки) КАК КоличествоСтрокДляКонвертации
	               |ИЗ
	               |	ВТ_ИтогиПоДокументу КАК Док
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Док.Ссылка,
	               |	Док.Ссылка.Проведен,
	               |	Док.Ссылка.ПометкаУдаления
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Док.Ссылка.Дата,
	               |	Док.Ссылка";
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Попытка
			Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.Прямой);
			Пока Выборка.Следующий() Цикл
				Если Выборка.КоличествоСтрокДляКонвертации > 0 Тогда
					ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
					ДокументОбъект.ОбменДанными.Загрузка = Истина;
					ДокументОбъект.ВыполнитьКонвертациюКлючейСвязиТабличныхЧастейПриПереходеС2БП();
					ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли;
			КонецЦикла;
		Исключение
			ТекстСообщения = НСтр("ru='Операция не выполнена'");
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьТабличныеЧастиДанныхПоНДСДокументаВНО() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Док.Ссылка КАК Ссылка,
	               |	Док.Ссылка.ПометкаУдаления КАК ПометкаУдаления,
	               |	Док.Ссылка.Проведен КАК Проведен,
	               |	КОЛИЧЕСТВО(Док.НомерСтроки) КАК КоличествоСтрокДляКонвертации
	               |ИЗ
	               |	Документ.ВводНачальныхОстатков.ДанныеПоНДС КАК Док
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Док.Ссылка,
	               |	Док.Ссылка.ПометкаУдаления,
	               |	Док.Ссылка.Проведен
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Док.Ссылка.Дата,
	               |	Док.Ссылка";
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Попытка
			Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.Прямой);
			Пока Выборка.Следующий() Цикл
				Если Выборка.КоличествоСтрокДляКонвертации > 0 Тогда
					ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
					ДокументОбъект.ОбменДанными.Загрузка = Истина;
					ДокументОбъект.ВыполнитьКонвертациюОстатковПоНДСПриПереходеС2БП();
					ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли;
			КонецЦикла;
		Исключение
			ТекстСообщения = НСтр("ru='Операция не выполнена'");
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьТабличныеЧастиРасчетовПоЗаработнойПлатеДокументаВНО() Экспорт
	
	УчетЗарплатыИКадровВоВнешнейПрограмме = Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.Получить();
	БУ = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
	ВестиСводныйУчетРасчетовСРаботниками = БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций, "ВидСубконто") = Неопределено;
	
	Если УчетЗарплатыИКадровВоВнешнейПрограмме И ВестиСводныйУчетРасчетовСРаботниками Тогда
		Возврат;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Док.Ссылка КАК Ссылка,
	               |	КОЛИЧЕСТВО(Док.НомерСтроки) КАК КоличествоСтрокДляКонвертации,
	               |	Док.Ссылка.Проведен КАК Проведен,
	               |	Док.Ссылка.ПометкаУдаления КАК ПометкаУдаления
	               |ИЗ
	               |	Документ.ВводНачальныхОстатков.РасчетыПоЗаработнойПлате КАК Док
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Док.Ссылка,
	               |	Док.Ссылка.Проведен,
	               |	Док.Ссылка.ПометкаУдаления
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Док.Ссылка.Дата,
	               |	Док.Ссылка";
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Попытка
			Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.Прямой);
			Пока Выборка.Следующий() Цикл
				Если Выборка.КоличествоСтрокДляКонвертации > 0 Тогда
					ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
					ДокументОбъект.ОбменДанными.Загрузка = Истина;
					ДокументОбъект.ВыполнитьКонвертациюОстатковПоЗарплатеПриПереходеС2БП();
					ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли;
			КонецЦикла;
		Исключение
			ТекстСообщения = НСтр("ru='Операция не выполнена'");
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры

Процедура ПерезаписатьУчетнуюПолитику() Экспорт
	
	НаборЗаписей = РегистрыСведений.УчетнаяПолитикаОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	ЗаписиБезОрганизации = Новый Массив;
	Для каждого Запись Из НаборЗаписей Цикл
		Если НЕ ЗначениеЗаполнено(Запись.Организация) Тогда
			ЗаписиБезОрганизации.Добавить(Запись);
		КонецЕсли;
	КонецЦикла;
	Для каждого Запись Из ЗаписиБезОрганизации Цикл
		НаборЗаписей.Удалить(Запись);
	КонецЦикла;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
	
КонецПроцедуры

Процедура УстановитьКорректировкуДляДокументовПоЗП() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВводНачальныхОстатков.Ссылка
	|ИЗ
	|	Документ.ВводНачальныхОстатков КАК ВводНачальныхОстатков
	|ГДЕ
	|	ВводНачальныхОстатков.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаДляВводаОстатков.РасчетыСПерсоналомПоОплатеТрудаИДепонентам)
	|	И ВводНачальныхОстатков.Проведен = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Ссылка
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВыплатаДепонентов))
	|	И РасходныйКассовыйОрдер.Проведен = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СписаниеСРасчетногоСчета.Ссылка
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|ГДЕ
	|	СписаниеСРасчетногоСчета.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП)
	|	И СписаниеСРасчетногоСчета.Проведен = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтражениеЗарплатыВУчете.Ссылка
	|ИЗ
	|	Документ.ОтражениеЗарплатыВУчете КАК ОтражениеЗарплатыВУчете
	|ГДЕ
	|	ОтражениеЗарплатыВУчете.Проведен = ИСТИНА";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Попытка
			Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.Прямой);
			Пока Выборка.Следующий() Цикл
				ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ДокументОбъект.РучнаяКорректировка = Истина;
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
			КонецЦикла;
		Исключение
			ТекстСообщения = НСтр("ru='Операция не выполнена'");
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры

// Устанавливает субконто Статьи ДДС на счетах ПереводыВПути
Процедура УстановитьСубконтоНаСчетахПереводыВПути() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	Если Константы.ИспользоватьСтатьиДвиженияДенежныхСредств.Получить() Тогда
		
		Счета = Новый Массив;
		// Счет 57
		Счета.Добавить(ПланыСчетов.Хозрасчетный.ПереводыВПути);
		Счета.Добавить(ПланыСчетов.Хозрасчетный.ПереводыВПутиВал);
			
		Для Каждого Счет Из Счета Цикл
			
			Если Счет.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств, "ВидСубконто") = Неопределено Тогда
				СчетОбъект = Счет.ПолучитьОбъект();
				НовыйВидСубконто = СчетОбъект.ВидыСубконто.Добавить();
				НовыйВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств;
				НовыйВидСубконто.ТолькоОбороты = Истина;
				НовыйВидСубконто.Суммовой = Истина;
				НовыйВидСубконто.Валютный = Истина;
				
				РегистрироватьНаУзлахПлановОбмена = Истина;
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СчетОбъект, РегистрироватьНаУзлахПлановОбмена);
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьОрганизацииКонтрагентыЮрФизЛицо() Экспорт
	Запрос = Новый Запрос();
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ПустаяСсылка)
	|	И Контрагенты.ЭтоГруппа = ЛОЖЬ";
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Если Объект.УдалитьЮрФизЛицо = Перечисления.УдалитьЮрФизЛицо.ФизЛицо Тогда
			Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		Иначе
			Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.ГоловнойКонтрагент) И НЕ Объект.ОбособленноеПодразделение Тогда
			Объект.ГоловнойКонтрагент = Объект.Ссылка;
		КонецЕсли;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
	КонецЦикла;
	
	Запрос = Новый Запрос();
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ПустаяСсылка)";
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Если Объект.УдалитьЮрФизЛицо = Перечисления.УдалитьЮрФизЛицо.ФизЛицо Тогда
			Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		Иначе
			Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		КонецЕсли;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет новый реквизит "Вид актива" справочника РБП
//
Процедура ЗаполнитьВидАктиваДляРБП() Экспорт

	РБП = Справочники.РасходыБудущихПериодов;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|   ХозрасчетныйОбороты.Субконто1 КАК РБПна76
		|ИЗ
		|   РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНачала, &ДатаОкончания, , Счет В ИЕРАРХИИ (&Счет76), &ВидСубконтоРБП, , , ) КАК ХозрасчетныйОбороты
		|ГДЕ
		|   (НЕ ХозрасчетныйОбороты.Субконто1.ЭтоГруппа)
		|   И ХозрасчетныйОбороты.Субконто1.ВидАктива = ЗНАЧЕНИЕ(Перечисление.ВидыАктивовДляРБП.ПустаяСсылка)
		|СГРУППИРОВАТЬ ПО
		|   ХозрасчетныйОбороты.Субконто1";

	Запрос.УстановитьПараметр("ВидСубконтоРБП", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов);
	Запрос.УстановитьПараметр("ДатаНачала",    '20081231000000');
	Запрос.УстановитьПараметр("ДатаОкончания", '20111231235959');
	Запрос.УстановитьПараметр("Счет76",        ПланыСчетов.Хозрасчетный.ПлатежиПоДобровольномуСтрахованиюРаботников);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		РБПОбъект = ВыборкаДетальныеЗаписи.РБПна76.ПолучитьОбъект();
		РБПОбъект.ВидАктива = Перечисления.ВидыАктивовДляРБП.ДебиторскаяЗадолженность;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(РБПОбъект);
	КонецЦикла;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|   РасходыБудущихПериодов.Ссылка КАК РБПНа97
		|ИЗ
		|   Справочник.РасходыБудущихПериодов КАК РасходыБудущихПериодов
		|ГДЕ
		|   (НЕ РасходыБудущихПериодов.ЭтоГруппа)
		|   И РасходыБудущихПериодов.ВидАктива = ЗНАЧЕНИЕ(Перечисление.ВидыАктивовДляРБП.ПустаяСсылка)";
	
	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		РБПОбъект = ВыборкаДетальныеЗаписи.РБПНа97.ПолучитьОбъект();
		РБПОбъект.ВидАктива = Перечисления.ВидыАктивовДляРБП.ПрочиеОборотныеАктивы;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(РБПОбъект);
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьВидИмущества() Экспорт
	
	НаборЗаписей = РегистрыСведений.СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	Для каждого СтрокаНабора Из НаборЗаписей Цикл
		Если СтрокаНабора.УдалитьВходитВСоставЕСГС Тогда
			СтрокаНабора.ВидИмущества = Перечисления.ВидыИмущества.ВходитВСоставЕСГС;
		Иначе
			СтрокаНабора.ВидИмущества = Перечисления.ВидыИмущества.ОсобенностиОтсутствуют;
		КонецЕсли;
	КонецЦикла;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
	
КонецПроцедуры

Процедура ОбработатьДобавлениеСчетовКорректировкиПрошлогоПериода() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	БУ = ПланыСчетов.Хозрасчетный.Товары.ПолучитьОбъект();

	// Бухгалтерский учет
	ВестиПартионныйУчетБУ = НЕ (БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии, "ВидСубконто") = Неопределено);
	ВестиСкладскойУчетБУ  = НЕ (БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "ВидСубконто") = Неопределено);
	Если ВестиСкладскойУчетБУ Тогда
		ВестиСуммовойУчетПоСкладамБУ = БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "ВидСубконто").Суммовой;
	Иначе
		ВестиСуммовойУчетПоСкладамБУ = Ложь;
	КонецЕсли;
	
	// обработка добавления нового счета 41.К
	СчетОбъект = ПланыСчетов.Хозрасчетный.КорректировкаТоваровПрошлогоПериода.ПолучитьОбъект();
	СчетОбъект.КодБыстрогоВыбора = "41К";
	//Номенклатура
	Субконто      = СчетОбъект.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура, "ВидСубконто");
	НетДокументов = (Субконто = Неопределено);
	ВсегоСубконто = СчетОбъект.ВидыСубконто.Количество();
	Если НетДокументов И ВсегоСубконто < 3 Тогда
		НовыйВид = СчетОбъект.ВидыСубконто.Добавить();
		НовыйВид.ВидСубконто    = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура;
		НовыйВид.Суммовой       = Истина;
		НовыйВид.Количественный = Истина;
	КонецЕсли;
	//Партия
	Если ВестиПартионныйУчетБУ Тогда
		Субконто      = СчетОбъект.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии, "ВидСубконто");
		НетДокументов = (Субконто = Неопределено);
		ВсегоСубконто = СчетОбъект.ВидыСубконто.Количество();
		Если НетДокументов И ВсегоСубконто < 3 Тогда
			НовыйВид = СчетОбъект.ВидыСубконто.Добавить();
			НовыйВид.ВидСубконто    = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии;
			НовыйВид.Суммовой       = Истина;
			НовыйВид.Количественный = Истина;
		КонецЕсли;
	КонецЕсли;
	//Склад
	Если ВестиСкладскойУчетБУ Тогда
		Субконто      = СчетОбъект.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "ВидСубконто");
		НетДокументов = (Субконто = Неопределено);
		ВсегоСубконто = СчетОбъект.ВидыСубконто.Количество();
		Если НетДокументов И ВсегоСубконто < 3 Тогда
			НовыйВид = СчетОбъект.ВидыСубконто.Добавить();
			НовыйВид.ВидСубконто    = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады;
			НовыйВид.Суммовой       = ВестиСуммовойУчетПоСкладамБУ;
			НовыйВид.Количественный = Истина;
		КонецЕсли;
	КонецЕсли;
	
	РегистрироватьНаУзлахПлановОбмена = Истина;
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СчетОбъект, РегистрироватьНаУзлахПлановОбмена);
	
	// обработка добавления нового счета 004.К
	СчетОбъект = ПланыСчетов.Хозрасчетный.КорректировкаКомТоваровПрошлогоПериода.ПолучитьОбъект();
	СчетОбъект.КодБыстрогоВыбора = "004К";
	//Номенклатура
	Субконто      = СчетОбъект.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура, "ВидСубконто");
	НетДокументов = (Субконто = Неопределено);
	ВсегоСубконто = СчетОбъект.ВидыСубконто.Количество();
	Если НетДокументов И ВсегоСубконто < 3 Тогда
		НовыйВид = СчетОбъект.ВидыСубконто.Добавить();
		НовыйВид.ВидСубконто    = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура;
		НовыйВид.Суммовой       = Истина;
		НовыйВид.Количественный = Истина;
	КонецЕсли;
	//Склад
	Если ВестиСкладскойУчетБУ Тогда
		Субконто      = СчетОбъект.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "ВидСубконто");
		НетДокументов = (Субконто = Неопределено);
		ВсегоСубконто = СчетОбъект.ВидыСубконто.Количество();
		Если НетДокументов И ВсегоСубконто < 3 Тогда
			НовыйВид = СчетОбъект.ВидыСубконто.Добавить();
			НовыйВид.ВидСубконто    = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады;
			НовыйВид.Суммовой       = ВестиСуммовойУчетПоСкладамБУ;
			НовыйВид.Количественный = Истина;
		КонецЕсли;
	КонецЕсли;
	
	РегистрироватьНаУзлахПлановОбмена = Истина;
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СчетОбъект, РегистрироватьНаУзлахПлановОбмена);
	
	// обработка добавления нового счета 76.К
	СчетОбъект = ПланыСчетов.Хозрасчетный.КорректировкаРасчетовПрошлогоПериода.ПолучитьОбъект();
	СчетОбъект.КодБыстрогоВыбора = "76К";
	Субконто      = СчетОбъект.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами, "ВидСубконто");
	НетДокументов = (Субконто = Неопределено);
	ВсегоСубконто = СчетОбъект.ВидыСубконто.Количество();
	Если НетДокументов И ВсегоСубконто < 3 Тогда
		НовыйВид = СчетОбъект.ВидыСубконто.Добавить();
		НовыйВид.ВидСубконто    = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами;
		НовыйВид.Суммовой       = Истина;
		НовыйВид.Валютный       = Истина;
		НовыйВид.Количественный = Истина;
	КонецЕсли;
	
	РегистрироватьНаУзлахПлановОбмена = Истина;
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СчетОбъект, РегистрироватьНаУзлахПлановОбмена);
	
КонецПроцедуры

// Устанавливает код быстрого выбора и субконто Статьи ДДС на счете КассаПлатежногоАгента
Процедура ОбработкаДобавленияНовогоСчета_50_04() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	СчетОбъект   = ПланыСчетов.Хозрасчетный.КассаПлатежногоАгента.ПолучитьОбъект();
	ЗаписатьСчет = Ложь;
	
	Если Константы.ИспользоватьСтатьиДвиженияДенежныхСредств.Получить()
		И СчетОбъект.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств, "ВидСубконто") = Неопределено Тогда
		
		НовыйВидСубконто = СчетОбъект.ВидыСубконто.Добавить();
		НовыйВидСубконто.ВидСубконто   = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств;
		НовыйВидСубконто.ТолькоОбороты = Истина;
		НовыйВидСубконто.Суммовой      = Истина;
		НовыйВидСубконто.Валютный      = Истина;
		ЗаписатьСчет                   = Истина;
		
	КонецЕсли;
	
	Если ЗаписатьСчет Тогда
		РегистрироватьНаУзлахПлановОбмена = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СчетОбъект, РегистрироватьНаУзлахПлановОбмена);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает значение реквизитов табличной части "ДокументыОснования" из реквизитов шапки документов "СчетФактураВыданный", "СчетФактураПолученный" 
Процедура ОбработатьКорректировочныеСчетаФактуры() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетФактураВыданныйДокументыОснования.Ссылка,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.НомерИсходногоДокумента,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.ДатаИсходногоДокумента,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.УдалитьУчитыватьИсправлениеИсходногоДокумента КАК УчитыватьИсправлениеИсходногоДокумента,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.УдалитьНомерИсправленияИсходногоДокумента КАК НомерИсправленияИсходногоДокумента,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.УдалитьДатаИсправленияИсходногоДокумента КАК ДатаИсправленияИсходногоДокумента,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.СуммаУвеличение,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.СуммаУменьшение,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.СуммаНДСУвеличение,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.СуммаНДСУменьшение
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|ГДЕ
	|	СчетФактураВыданныйДокументыОснования.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|	И (СчетФактураВыданныйДокументыОснования.НомерИсходногоДокумента = """"
	|			ИЛИ СчетФактураВыданныйДокументыОснования.ДатаИсходногоДокумента = ДАТАВРЕМЯ(1, 1, 1))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетФактураПолученныйДокументыОснования.Ссылка,
	|	СчетФактураПолученныйДокументыОснования.Ссылка.НомерИсходногоДокумента,
	|	СчетФактураПолученныйДокументыОснования.Ссылка.ДатаИсходногоДокумента,
	|	СчетФактураПолученныйДокументыОснования.Ссылка.УдалитьУчитыватьИсправлениеИсходногоДокумента,
	|	СчетФактураПолученныйДокументыОснования.Ссылка.УдалитьНомерИсправленияИсходногоДокумента,
	|	СчетФактураПолученныйДокументыОснования.Ссылка.УдалитьДатаИсправленияИсходногоДокумента,
	|	СчетФактураПолученныйДокументыОснования.Ссылка.СуммаУвеличение,
	|	СчетФактураПолученныйДокументыОснования.Ссылка.СуммаУменьшение,
	|	СчетФактураПолученныйДокументыОснования.Ссылка.СуммаНДСУвеличение,
	|	СчетФактураПолученныйДокументыОснования.Ссылка.СуммаНДСУменьшение
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
	|ГДЕ
	|	СчетФактураПолученныйДокументыОснования.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный)
	|	И (СчетФактураПолученныйДокументыОснования.НомерИсходногоДокумента = """"
	|			ИЛИ СчетФактураПолученныйДокументыОснования.ДатаИсходногоДокумента = ДАТАВРЕМЯ(1, 1, 1))";
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			СчетФактура = Выборка.Ссылка.ПолучитьОбъект(); 
			
			Если СчетФактура.ДокументыОснования.Количество() > 1 Тогда 
				Попытка
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(СчетФактура, , Истина);
				Исключение
					ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
				КонецПопытки;
			Иначе
				ЗаполнитьЗначенияСвойств(СчетФактура.ДокументыОснования[0], Выборка);
				Попытка
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(СчетФактура);
				Исключение
					ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
				КонецПопытки;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

// У счетов-фактур полученных добавлен реквизит ВидСчетаФактуры
// его необходимо заполнить, также надо заполнить сумму НДС 
Процедура ОбновитьСчетФактуруПолученный() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетФактураПолученный.Ссылка
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.ПустаяСсылка)";
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			СчетФактура = Выборка.Ссылка.ПолучитьОбъект();
			
			Если СчетФактура.УдалитьНаАванс Тогда
				СчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс;
			Иначе
				СчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаПоступление;
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СчетФактура);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполнитьСпособПризнанияНИОКР() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|   ПринятиеКУчетуНМА.Ссылка КАК Док,
	|   ПринятиеКУчетуНМА.НачислятьАмортизациюНУ КАК АмортизацияНУ
	|ИЗ
	|   Документ.ПринятиеКУчетуНМА КАК ПринятиеКУчетуНМА
	|
	|СГРУППИРОВАТЬ ПО
	|   ПринятиеКУчетуНМА.НачислятьАмортизациюНУ,
	|   ПринятиеКУчетуНМА.Ссылка";
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТекущийДокумент = Выборка.Док.ПолучитьОбъект();
		ТекущийДокумент.ПорядокСписанияНИОКРНаРасходыНУ = ?(Выборка.АмортизацияНУ, Перечисления.ПорядокСписанияНИОКРНУ.Равномерно, Перечисления.ПорядокСписанияНИОКРНУ.НеСписывать);
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ТекущийДокумент);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|   ВводНачальныхОстатков.Ссылка КАК Док
	|ИЗ
	|   Документ.ВводНачальныхОстатков КАК ВводНачальныхОстатков
	|ГДЕ
	|   ВводНачальныхОстатков.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаДляВводаОстатков.НематериальныеАктивыИНИОКР)";   
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТекущийДокумент = Выборка.Док.ПолучитьОбъект();
		Таблица = ТекущийДокумент.НМА;
		Для Каждого СтрокаТаблица Из Таблица Цикл
			СтрокаТаблица.ПорядокСписанияНИОКРНаРасходыНУ = ?(СтрокаТаблица.НачислятьАмортизациюНУ, Перечисления.ПорядокСписанияНИОКРНУ.Равномерно, Перечисления.ПорядокСписанияНИОКРНУ.НеСписывать);
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ТекущийДокумент);
		
	КонецЦикла;
	
КонецФункции

Процедура ОбновлениеРегистраРеквизитыУплатыНалоговИПлатежейВБюджет() Экспорт
	
	НаборЗаписей = РегистрыСведений.РеквизитыУплатыНалоговИПлатежейВБюджет.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	Для каждого СтрокаНабора Из НаборЗаписей Цикл
		Если ЗначениеЗаполнено(СтрокаНабора.УдалитьПоказательТипа)
			И НЕ ЗначениеЗаполнено(СтрокаНабора.ПоказательТипа) Тогда
			СтрокаНабора.ПоказательТипа = СтрокаНабора.УдалитьПоказательТипа;
		КонецЕсли;
	КонецЦикла;
	
	Если НаборЗаписей.Модифицированность() Тогда
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
	КонецЕсли;
	
КонецПроцедуры

// В документ добавлена новая т.ч. Покупатели, в неё необходимо добавить одну строку.
// В колонку Покупатель пишем контрагента-комиссионера из шапки
//
Процедура ЗаполнитьТЧПокупателиОтчетКомиссионераОПродажах() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтчетКомиссионераОПродажах.Ссылка КАК Ссылка,
	|	ОтчетКомиссионераОПродажах.Контрагент
	|ПОМЕСТИТЬ ВТ_ОтчетыКомиссионера
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах КАК ОтчетКомиссионераОПродажах
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтчетКомиссионераОПродажах.Ссылка,
	|	ОтчетКомиссионераОПродажах.Контрагент
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ОтчетКомиссионераОПродажах.Покупатели.НомерСтроки) = 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОтчетыКомиссионера.Ссылка КАК ОтчетКомиссионера,
	|	СчетФактураВыданный.Ссылка КАК Ссылка,
	|	СчетФактураВыданный.Дата КАК Дата,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.Проведен
	|			ТОГДА 2
	|		КОГДА СчетФактураВыданный.ПометкаУдаления
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Приоритет
	|ПОМЕСТИТЬ ВТ_СчетФактуры
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ОтчетыКомиссионера КАК ВТ_ОтчетыКомиссионера
	|		ПО СчетФактураВыданный.ДокументОснование = ВТ_ОтчетыКомиссионера.Ссылка
	|			И (СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаРеализацию))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОтчетКомиссионера,
	|	Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СчетФактуры.ОтчетКомиссионера КАК ОтчетКомиссионера,
	|	МАКСИМУМ(ВТ_СчетФактуры.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ ВТ_Приоритет
	|ИЗ
	|	ВТ_СчетФактуры КАК ВТ_СчетФактуры
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_СчетФактуры.ОтчетКомиссионера
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОтчетКомиссионера,
	|	Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОтчетыКомиссионера.Ссылка КАК Ссылка,
	|	ВТ_ОтчетыКомиссионера.Контрагент КАК Покупатель,
	|	ВЫБОР
	|		КОГДА ВТ_СчетФактуры.Ссылка ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ВыставленСФ,
	|	ВТ_СчетФактуры.Дата КАК ДатаСФ,
	|	ВТ_СчетФактуры.Ссылка КАК СчетФактура
	|ИЗ
	|	ВТ_ОтчетыКомиссионера КАК ВТ_ОтчетыКомиссионера
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Приоритет КАК ВТ_Приоритет
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СчетФактуры КАК ВТ_СчетФактуры
	|			ПО ВТ_Приоритет.ОтчетКомиссионера = ВТ_СчетФактуры.ОтчетКомиссионера
	|				И ВТ_Приоритет.Приоритет = ВТ_СчетФактуры.Приоритет
	|		ПО ВТ_ОтчетыКомиссионера.Ссылка = ВТ_Приоритет.ОтчетКомиссионера";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ОтчетКомиссионера = Выборка.Ссылка.ПолучитьОбъект();
			СтрокаТЧ = ОтчетКомиссионера.Покупатели.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, Выборка);
			
			Попытка
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОтчетКомиссионера);
			Исключение
				ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Установка даты начала действия постановления правительства 1137
// Установка производится в том случае, если дата не установлена, либо 
// установлена на дату после 01.04.2012, либо до 01.01.2012
Процедура УстановитьДатуНачалаДействияПостановления1137() Экспорт
	
	НачалоПримененияПостановления1137 = УчетНДСБП.ПолучитьДатуНачалаДействияПостановления1137();
	Если НачалоПримененияПостановления1137 < '20120101' ИЛИ НачалоПримененияПостановления1137 > '20120401' Тогда
		НачалоПримененияПостановления1137 = '20120401';
	КонецЕсли;
	Если НачалоПримененияПостановления1137 <> УчетНДСБП.ПолучитьДатуНачалаДействияПостановления1137() Тогда
		УчетНДСБП.УстановитьДатуНачалаДействияПостановления1137(НачалоПримененияПостановления1137);
	КонецЕсли;
	
КонецПроцедуры

// Установка видимости флажка "Ручная корректировка" в формах документов
//
Процедура УстановитьИспользоватьРучнуюКорректировкуДвижений() Экспорт

	Константы.ИспользоватьРучнуюКорректировкуДвижений.Установить(Истина);

КонецПроцедуры // УстановитьИспользоватьРучнуюКорректировкуДвижений()

// Обнулим лишние суммы ПР в проводках по продаже валюты.
// 
Процедура ОчиститьСуммыПРприПродажеВалюты() Экспорт

	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Регистратор,
	|	Хозрасчетный.НомерСтроки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(, , Запись, 
	|				Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеДоходыИРасходы)), 
	|				ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы), 
	|				Субконто1 = ЗНАЧЕНИЕ(Справочник.ПрочиеДоходыИРасходы.ОтклонениеКурсаПродажиПокупкиВалюты), , ) КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.СуммаПРОборот <> 0
	|	И Регистратор ССЫЛКА Документ.ПоступлениеНаРасчетныйСчет
	|	И ВЫРАЗИТЬ(Регистратор КАК Документ.ПоступлениеНаРасчетныйСчет).ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки
	|";

	Проводки = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	Выборка = Запрос.Выполнить().Выбрать();
	
	Счет91_01 = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
	Счет91_02 = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
	
	ЕстьДанные = Выборка.Следующий();
	
	Пока ЕстьДанные Цикл
	
		ТекущийРегистратор = Выборка.Регистратор;
	
		Проводки.Отбор.Регистратор.Установить(ТекущийРегистратор, Истина);
		Проводки.Прочитать();
		Пока ЕстьДанные
			 И Выборка.Регистратор = ТекущийРегистратор Цикл
			 
			
			Если Выборка.НомерСтроки <= Проводки.Количество() Тогда
			    Проводка = Проводки[Выборка.НомерСтроки - 1];
			    
			    Если Проводка.СчетДт = Счет91_02 Тогда
			    	Проводка.СуммаПРДт = 0;
			    ИначеЕсли Проводка.СчетКт = Счет91_01 Тогда
			    	Проводка.СуммаПРКт = 0;
			    КонецЕсли;
				
			КонецЕсли;
		
			ЕстьДанные = Выборка.Следующий();
		
		КонецЦикла;
		
		Если Проводки.Модифицированность() Тогда
			Попытка
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(Проводки);
			Исключение
				ТекстСообщения = НСтр("ru = 'Не удалось очистить сумму ПР в проводке по отклонению курса продажи валюты 
		                               |для документа ""%1"".
		                               |
		                               |%2'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ТекущийРегистратор, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);					   
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры 

// Установка флага "Ручная корректировка" в документах ввода остатков 
// по разделу учета "Расчеты по налогам и сборам (счета 68, 69)" 
//
Процедура УстановитьКорректировкуДляДокументовВНОПоНалогам() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВводНачальныхОстатков.Ссылка
	|ИЗ
	|	Документ.ВводНачальныхОстатков КАК ВводНачальныхОстатков
	|ГДЕ
	|	ВводНачальныхОстатков.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаДляВводаОстатков.РасчетыПоНалогамИСборам)
	|	И ВводНачальныхОстатков.Проведен = ИСТИНА";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Попытка
			Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.Прямой);
			Пока Выборка.Следующий() Цикл
				ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ДокументОбъект.РучнаяКорректировка = Истина;
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЦикла;
		Исключение
			ТекстСообщения = НСтр("ru='Операция не выполнена'");
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// Установка флага "Ручная корректировка" в документов "Регистрация оплаты ОС и НМА для УСН"
// введенных для индивидуальных предпринимателей 
//
Процедура УстановитьКорректировкуДляРегистрацийОплатыОсновныхСредствИП() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УчетнаяПолитикаОрганизаций.Организация КАК Организация,
	|	УчетнаяПолитикаОрганизаций.СистемаНалогообложения КАК СистемаНалогообложения,
	|	УчетнаяПолитикаОрганизаций.Организация.ЮридическоеФизическоеЛицо КАК ЮридическоеФизическоеЛицо
	|ПОМЕСТИТЬ ВТ_ПлательщикиНДФЛ
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
	|ГДЕ
	|	УчетнаяПолитикаОрганизаций.Организация.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|	И НЕ УчетнаяПолитикаОрганизаций.СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.Упрощенная)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистрацияОплатыОсновныхСредствДляУСН.Ссылка,
	|	РегистрацияОплатыОсновныхСредствДляУСН.Дата,
	|	РегистрацияОплатыОсновныхСредствДляУСН.Организация
	|ИЗ
	|	Документ.РегистрацияОплатыОсновныхСредствДляУСН КАК РегистрацияОплатыОсновныхСредствДляУСН
	|ГДЕ
	|	РегистрацияОплатыОсновныхСредствДляУСН.Организация В
	|			(ВЫБРАТЬ
	|				ПлательщикиНДФЛ.Организация
	|			ИЗ
	|				ВТ_ПлательщикиНДФЛ КАК ПлательщикиНДФЛ)
	|	И РегистрацияОплатыОсновныхСредствДляУСН.Проведен = ИСТИНА";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		Попытка
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				Если УчетнаяПолитика.ПлательщикНДФЛ(Выборка.Организация, Выборка.Дата) Тогда
					ДокументОбъект	= Выборка.Ссылка.ПолучитьОбъект();
					ДокументОбъект.РучнаяКорректировка = Истина;
					ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли;
			КонецЦикла;
		Исключение
			ТекстСообщения = НСтр("ru='Операция не выполнена'");
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызов процедуры обновит наименование у Рубля, если оно отличается от "руб."
//
Процедура ОбновитьНаименованиеРубля() Экспорт
	
	ВалютаРегламентированногоУчета = НайтиСоздатьВалюту("643", "руб.", "Российский рубль", "рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2");
	
КонецПроцедуры

// Заполнение реквизита Номенклатурная группа справочника Виды деятельности
//
Процедура ЗаполнениеОсновнойНоменклатурнойГруппыВидовДеятельностиИП() Экспорт
	
	Запрос	= Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СправочникВидыДеятельностиПредпринимателей.Ссылка КАК ВидДеятельности,
		|	РегистрВидыДеятельностиПредпринимателей.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
		|ИЗ
		|	Справочник.ВидыДеятельностиПредпринимателей КАК СправочникВидыДеятельностиПредпринимателей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВидыДеятельностиПредпринимателей КАК РегистрВидыДеятельностиПредпринимателей
		|		ПО (РегистрВидыДеятельностиПредпринимателей.ВидДеятельности = СправочникВидыДеятельностиПредпринимателей.Ссылка)
		|ГДЕ
		|	СправочникВидыДеятельностиПредпринимателей.НоменклатурнаяГруппа = ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
		|	И НЕ СправочникВидыДеятельностиПредпринимателей.ПометкаУдаления
		|ИТОГИ ПО
		|	ВидДеятельности";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаВидДеятельности	= Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ВидДеятельности");
	Пока ВыборкаВидДеятельности.Следующий() Цикл
		
		Выборка = ВыборкаВидДеятельности.Выбрать();
		Если Выборка.Следующий() Тогда
			
			ВидДеятельностиОбъект = Выборка.ВидДеятельности.ПолучитьОбъект();
			ВидДеятельностиОбъект.НоменклатурнаяГруппа = Выборка.НоменклатурнаяГруппа;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ВидДеятельностиОбъект);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполнение основного вида деятельности в учетной политике предпринимателей.
// Если для Основного характера деятельности и Основной номенклатурной группы
// вид деятельности не задан, то создается новый элемент
//
Процедура ЗаполнениеВидовДеятельностиИП() Экспорт
	Перем ОсновнойВидДеятельности, ОсновнойХарактерДеятельности, ОсновнаяНоменклатурнаяГруппа;
	
	НаборЗаписей	= РегистрыСведений.УчетнаяПолитикаОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	Для каждого Запись Из НаборЗаписей Цикл
		
		Если НЕ Запись.ПлательщикНДФЛ Тогда
			Продолжить;
		КонецЕсли;
		
		Запись.ДляПризнанияРасходовТребуетсяПолучениеДоходаИП	= НЕ Запись.УдалитьДляПризнанияРасходовНеТребуетсяПолучениеДохода;
		Запись.АвансыВключаютсяВДоходыВПериодеПолученияИП		= НЕ Запись.ПризнаватьРасходыПоОперациямПрошлогоГодаИП;
				
		ОсновнойХарактерДеятельности	= Запись.УдалитьОсновнойХарактерДеятельности;
		ОсновнаяНоменклатурнаяГруппа	= Запись.УдалитьОсновнаяНоменклатурнаяГруппа;
		
		Если НЕ ЗначениеЗаполнено(ОсновнойХарактерДеятельности)
			ИЛИ НЕ ЗначениеЗаполнено(ОсновнаяНоменклатурнаяГруппа) Тогда
		
			Продолжить;
		
		КонецЕсли;
		
		ОсновнойВидДеятельности	= РегистрыСведений.ВидыДеятельностиПредпринимателей.ПолучитьВидДеятельности(
			ОсновнойХарактерДеятельности, ОсновнаяНоменклатурнаяГруппа);
			
		Если ОсновнойВидДеятельности = Неопределено Тогда
			
			Попытка;
				НаименованиеВидаДеятельности	= СокрЛП(ОсновнойХарактерДеятельности)
												+ ", "
												+ СокрЛП(ОсновнаяНоменклатурнаяГруппа);
				
				ВидДеятельностиОбъект	= Справочники.ВидыДеятельностиПредпринимателей.СоздатьЭлемент();
				ВидДеятельностиОбъект.Наименование			= НаименованиеВидаДеятельности;
				ВидДеятельностиОбъект.НаименованиеПолное	= НаименованиеВидаДеятельности;
				ВидДеятельностиОбъект.ХарактерДеятельности	= ОсновнойХарактерДеятельности;
				ВидДеятельностиОбъект.НоменклатурнаяГруппа	= ОсновнаяНоменклатурнаяГруппа;
				ВидДеятельностиОбъект.Записать();
				
				ОсновнойВидДеятельности	= ВидДеятельностиОбъект.Ссылка;
				
				МенеджерЗаписиРегистра	= РегистрыСведений.ВидыДеятельностиПредпринимателей.СоздатьМенеджерЗаписи();
				МенеджерЗаписиРегистра.НоменклатурнаяГруппа	= ОсновнаяНоменклатурнаяГруппа;
				МенеджерЗаписиРегистра.ХарактерДеятельности	= ОсновнойХарактерДеятельности;
				МенеджерЗаписиРегистра.ВидДеятельности		= ОсновнойВидДеятельности;
				МенеджерЗаписиРегистра.Записать();
			Исключение
				
				ТекстСообщения = НСтр("ru = 'Не создан вид деятельности'");
				ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ВызватьИсключение;
				
			КонецПопытки;
			
		Иначе
			
			ВидДеятельностиОбъект	= ОсновнойВидДеятельности.ПолучитьОбъект();
			ВидДеятельностиОбъект.НоменклатурнаяГруппа	= ОсновнаяНоменклатурнаяГруппа;
			Попытка
				ВидДеятельностиОбъект.Записать();
			Исключение
				ТекстСообщения = НСтр("ru = 'Не установлена основная номенклатурная группа вида деятельности'");
				ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ВызватьИсключение;
			КонецПопытки;
			
		КонецЕсли;
		
		Запись.ОсновнойВидДеятельности	= ОсновнойВидДеятельности;
		
		Если Запись.АвансыВключаютсяВДоходыВПериодеПолученияИП Тогда
			Запись.ВидДеятельностиДоходовПоАвансамИП	= Запись.ОсновнойВидДеятельности;
		КонецЕсли;
		
	КонецЦикла;
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
		ТекстСообщения	= НСтр("ru = 'Не выполнено обновление записей регистра сведений ""Учетная политика""'");
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Заполнение номенклатурных групп для отражения реализации продукции и услуг в учетной политике производства.
//
Процедура ЗаполнениеНоменклатурныхГруппРеализацииПродукцииУслуг() Экспорт
	
	НаборЗаписей = РегистрыСведений.НоменклатурныеГруппыРеализацииПродукцииУслуг.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Организация,
	|	ХозрасчетныйОбороты.Субконто1 КАК НоменклатурнаяГруппа
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(, , , Счет = &Счет90, &НоменклатурныеГруппы, , НЕ КорСчет В ИЕРАРХИИ (&СчетаТоваров), ) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	ХозрасчетныйОбороты.Субконто1 <> &ПустаяНоменклатурнаяГруппа";
	
	Запрос.УстановитьПараметр("Счет90", ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД);
	Запрос.УстановитьПараметр("ПустаяНоменклатурнаяГруппа", Справочники.НоменклатурныеГруппы.ПустаяСсылка());
	Запрос.УстановитьПараметр("НоменклатурныеГруппы", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
	
	СчетаТоваров = Новый Массив;
	СчетаТоваров.Добавить(Планысчетов.Хозрасчетный.Товары);
	СчетаТоваров.Добавить(Планысчетов.Хозрасчетный.ТорговаяНаценка);
	СчетаТоваров.Добавить(Планысчетов.Хозрасчетный.ТорговаяНаценка);
	СчетаТоваров.Добавить(Планысчетов.Хозрасчетный.ПокупныеТоварыОтгруженные);
	Запрос.УстановитьПараметр("СчетаТоваров", СчетаТоваров);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НовыйНаборЗаписей = НаборЗаписей.Добавить(); 
		НовыйНаборЗаписей.Активность = Истина;
		НовыйНаборЗаписей.Организация = Выборка.Организация;
		НовыйНаборЗаписей.НоменклатурнаяГруппа = Выборка.НоменклатурнаяГруппа;
	КонецЦикла;
	
	РегистрироватьНаУзлахПлановОбмена = Истина;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей, РегистрироватьНаУзлахПлановОбмена);
	
КонецПроцедуры

// Снятие пометки на удаление со "старых" документов учета зарплаты, помеченных
// как "Удалить..." 
//
Процедура ОбработкаДокументовУчетаЗарплаты() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьДепонированиеОрганизаций.Ссылка,
	|	УдалитьДепонированиеОрганизаций.Проведен КАК Проведен,
	|	УдалитьДепонированиеОрганизаций.Дата,
	|	УдалитьДепонированиеОрганизаций.Организация
	|ИЗ
	|	Документ.УдалитьДепонированиеОрганизаций КАК УдалитьДепонированиеОрганизаций
	|ГДЕ
	|	УдалитьДепонированиеОрганизаций.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УдалитьСписаниеДепонентовВДоходыОрганизаций.Ссылка,
	|	УдалитьСписаниеДепонентовВДоходыОрганизаций.Проведен,
	|	УдалитьСписаниеДепонентовВДоходыОрганизаций.Дата,
	|	УдалитьСписаниеДепонентовВДоходыОрганизаций.Организация
	|ИЗ
	|	Документ.УдалитьСписаниеДепонентовВДоходыОрганизаций КАК УдалитьСписаниеДепонентовВДоходыОрганизаций
	|ГДЕ
	|	УдалитьСписаниеДепонентовВДоходыОрганизаций.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УдалитьОтражениеЗарплатыВУчете.Ссылка,
	|	УдалитьОтражениеЗарплатыВУчете.Проведен,
	|	УдалитьОтражениеЗарплатыВУчете.Дата,
	|	УдалитьОтражениеЗарплатыВУчете.Организация
	|ИЗ
	|	Документ.УдалитьОтражениеЗарплатыВУчете КАК УдалитьОтражениеЗарплатыВУчете
	|ГДЕ
	|	УдалитьОтражениеЗарплатыВУчете.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УдалитьНачислениеЗарплатыРаботникамОрганизаций.Ссылка,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизаций.Проведен,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизаций.Дата,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизаций.Организация
	|ИЗ
	|	Документ.УдалитьНачислениеЗарплатыРаботникамОрганизаций КАК УдалитьНачислениеЗарплатыРаботникамОрганизаций
	|ГДЕ
	|	УдалитьНачислениеЗарплатыРаботникамОрганизаций.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УдалитьРасчетЕСН.Ссылка,
	|	УдалитьРасчетЕСН.Проведен,
	|	УдалитьРасчетЕСН.Дата,
	|	УдалитьРасчетЕСН.Организация
	|ИЗ
	|	Документ.УдалитьРасчетЕСН КАК УдалитьРасчетЕСН
	|ГДЕ
	|	УдалитьРасчетЕСН.ПометкаУдаления";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда		
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Выборка = Результат.Выбрать();
	
	Попытка
		Пока Выборка.Следующий() Цикл
			
			КонвертируемыйОбъект = Выборка.Ссылка.ПолучитьОбъект();
			КонвертируемыйОбъект.УстановитьПометкуУдаления(Ложь);
			КонвертируемыйОбъект.Проведен = Истина;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(КонвертируемыйОбъект);
			
		КонецЦикла;
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Перенос движений "старых" документов учета зарплаты, помеченных
// как "Удалить..." в документ "ОперацияБух" и замена ссылок на 
// эти документы в записях регистров и документах
Процедура ПереносДвиженийДокументовУчетаЗарплаты() Экспорт
	
	МассивИменРегистровСведений    = Новый Массив;	
	МассивИменРегистровСведений.Добавить("РасшифровкаКУДиР");
	
	МассивИменРегистровНакопления = Новый Массив;
	МассивИменРегистровНакопления.Добавить("ИПДоходы");
	МассивИменРегистровНакопления.Добавить("ИПИныеМатериальныеРасходы");
	МассивИменРегистровНакопления.Добавить("ИПМПЗ");
	МассивИменРегистровНакопления.Добавить("ИПМПЗОбороты");
	МассивИменРегистровНакопления.Добавить("ИПМПЗОтгруженные");
	МассивИменРегистровНакопления.Добавить("ИППрочиеРасходы");
	МассивИменРегистровНакопления.Добавить("ИПРасходыНаОплатуТруда");
	МассивИменРегистровНакопления.Добавить("ИПРБП");
	МассивИменРегистровНакопления.Добавить("ПрочиеРасчеты");
	МассивИменРегистровНакопления.Добавить("РасходыПриУСН");
	МассивИменРегистровНакопления.Добавить("КнигаУчетаДоходовИРасходов");
	
	МассивИменРеквизитов = Новый Массив;
	МассивИменРеквизитов.Добавить("Партия");
	МассивИменРеквизитов.Добавить("РасчетныйДокумент");
	МассивИменРеквизитов.Добавить("ПартияСписаннойНоменклатуры");
	МассивИменРеквизитов.Добавить("ПартияПоступившейНоменклатуры");
	МассивИменРеквизитов.Добавить("Документ");
	МассивИменРеквизитов.Добавить("РеквизитыДокументаОплаты");
	МассивИменРеквизитов.Добавить("ПартияМПЗ");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьДепонированиеОрганизаций.Ссылка,
	|	УдалитьДепонированиеОрганизаций.Проведен КАК Проведен,
	|	УдалитьДепонированиеОрганизаций.Дата,
	|	УдалитьДепонированиеОрганизаций.Организация
	|ИЗ
	|	Документ.УдалитьДепонированиеОрганизаций КАК УдалитьДепонированиеОрганизаций
	|ГДЕ
	|	НЕ УдалитьДепонированиеОрганизаций.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УдалитьСписаниеДепонентовВДоходыОрганизаций.Ссылка,
	|	УдалитьСписаниеДепонентовВДоходыОрганизаций.Проведен,
	|	УдалитьСписаниеДепонентовВДоходыОрганизаций.Дата,
	|	УдалитьСписаниеДепонентовВДоходыОрганизаций.Организация
	|ИЗ
	|	Документ.УдалитьСписаниеДепонентовВДоходыОрганизаций КАК УдалитьСписаниеДепонентовВДоходыОрганизаций
	|ГДЕ
	|	НЕ УдалитьСписаниеДепонентовВДоходыОрганизаций.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УдалитьОтражениеЗарплатыВУчете.Ссылка,
	|	УдалитьОтражениеЗарплатыВУчете.Проведен,
	|	УдалитьОтражениеЗарплатыВУчете.Дата,
	|	УдалитьОтражениеЗарплатыВУчете.Организация
	|ИЗ
	|	Документ.УдалитьОтражениеЗарплатыВУчете КАК УдалитьОтражениеЗарплатыВУчете
	|ГДЕ
	|	НЕ УдалитьОтражениеЗарплатыВУчете.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УдалитьНачислениеЗарплатыРаботникамОрганизаций.Ссылка,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизаций.Проведен,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизаций.Дата,
	|	УдалитьНачислениеЗарплатыРаботникамОрганизаций.Организация
	|ИЗ
	|	Документ.УдалитьНачислениеЗарплатыРаботникамОрганизаций КАК УдалитьНачислениеЗарплатыРаботникамОрганизаций
	|ГДЕ
	|	НЕ УдалитьНачислениеЗарплатыРаботникамОрганизаций.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УдалитьРасчетЕСН.Ссылка,
	|	УдалитьРасчетЕСН.Проведен,
	|	УдалитьРасчетЕСН.Дата,
	|	УдалитьРасчетЕСН.Организация
	|ИЗ
	|	Документ.УдалитьРасчетЕСН КАК УдалитьРасчетЕСН
	|ГДЕ
	|	НЕ УдалитьРасчетЕСН.ПометкаУдаления";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	СоответствиеКонвертируемыхОбъектов = Новый Соответствие;	
	
	Выборка = Результат.Выбрать();
		
	Попытка
		Пока Выборка.Следующий() Цикл
			
			ЭтоОперация = Ложь;
			
			ДокументСсылка = ЗарплатаКадрыОбновлениеСпредыдущейРедакции.КонвертироватьДанные(Выборка.Ссылка);
			
			Если ДокументСсылка = Неопределено Тогда
				ЭтоОперация = Истина;
				Документ = Документы.ОперацияБух.СоздатьДокумент();
				Документ.Дата        = Выборка.Дата;
				Документ.Организация = Выборка.Организация;
				Документ.Комментарий = НСтр("ru = 'Данные документа: '") + Выборка.Ссылка;			
				Документ.Записать(РежимЗаписиДокумента.Запись);
			Иначе
				Документ = ДокументСсылка.ПолучитьОбъект();
			КонецЕсли;
			
			СоответствиеКонвертируемыхОбъектов.Вставить(Выборка.Ссылка, Документ.Ссылка);
			
			//Заменим значение свойства объекта в УдалитьЗначенияСвойствОбъектов
			НаборУдалитьЗначенияСвойствОбъектовДоИзменения = РегистрыСведений.УдалитьЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
			НаборУдалитьЗначенияСвойствОбъектовДоИзменения.Отбор.Объект.Установить(Выборка.Ссылка);
			НаборУдалитьЗначенияСвойствОбъектовДоИзменения.Прочитать();
			Если НаборУдалитьЗначенияСвойствОбъектовДоИзменения.Количество()>0 Тогда
				НаборУдалитьЗначенияСвойствОбъектовПослеИзменения = РегистрыСведений.УдалитьЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
				НаборУдалитьЗначенияСвойствОбъектовПослеИзменения.Отбор.Объект.Установить(ДокументСсылка);
				НаборУдалитьЗначенияСвойствОбъектовПослеИзменения.Прочитать();
				Если НаборУдалитьЗначенияСвойствОбъектовПослеИзменения.Количество() = 0 Тогда
					ТаблицаНабора = НаборУдалитьЗначенияСвойствОбъектовДоИзменения.Выгрузить();
					ТаблицаНабора.ЗаполнитьЗначения(ДокументСсылка, "Объект");
					НаборУдалитьЗначенияСвойствОбъектовПослеИзменения.Загрузить(ТаблицаНабора);
					НаборУдалитьЗначенияСвойствОбъектовПослеИзменения.Записать();
				КонецЕсли;
				НаборУдалитьЗначенияСвойствОбъектовДоИзменения.Очистить();
				НаборУдалитьЗначенияСвойствОбъектовДоИзменения.Записать();
			КонецЕсли;
			
			КонвертируемыйОбъект = Выборка.Ссылка.ПолучитьОбъект();
			КонвертируемыйОбъектДвижения = КонвертируемыйОбъект.Движения;
			
			СуммаОперации= 0;			
			СкопироватьОчиститьНаборЗаписей("РегистрБухгалтерии", "Хозрасчетный", Выборка.Ссылка, Документ.Ссылка, СуммаОперации, НЕ ЭтоОперация);
			Если СуммаОперации <> 0 Тогда
				Если ЭтоОперация Тогда
					Документ.СуммаОперации = СуммаОперации;
				КонецЕсли;
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Документ);
			КонецЕсли;
			
			Для Каждого ЗначениеМасива Из МассивИменРегистровСведений Цикл
				Если КонвертируемыйОбъектДвижения.Найти(ЗначениеМасива) <> Неопределено Тогда
					Если ЭтоОперация Тогда
						СтрокаРегистра = Документ.ТаблицаРегистровСведений.Добавить();
						СтрокаРегистра.Имя = ЗначениеМасива;
					КонецЕсли;
					Документ.Движения[ЗначениеМасива].Записывать = Истина;
					
					СкопироватьОчиститьНаборЗаписей("РегистрСведений", ЗначениеМасива, Выборка.Ссылка, Документ.Ссылка,,НЕ ЭтоОперация);
					
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ЗначениеМасива Из МассивИменРегистровНакопления Цикл
				Если КонвертируемыйОбъектДвижения.Найти(ЗначениеМасива) <> Неопределено Тогда
					Если ЭтоОперация Тогда
						СтрокаРегистра = Документ.ТаблицаРегистровНакопления.Добавить();
						СтрокаРегистра.Имя = ЗначениеМасива;
						Документ.Движения[ЗначениеМасива].Записывать = Истина;
					КонецЕсли;
					СкопироватьОчиститьНаборЗаписей("РегистрНакопления", ЗначениеМасива, Выборка.Ссылка, Документ.Ссылка,, НЕ ЭтоОперация);
					
				КонецЕсли;
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(КонвертируемыйОбъект);
			
		КонецЦикла;
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
	МассивКонвертируемыхДокументов = Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивКонвертируемыхДокументов", МассивКонвертируемыхДокументов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеПервичныхДокументов.Документ,
	|	ДанныеПервичныхДокументов.Организация
	|ИЗ
	|	РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|ГДЕ
	|	ДанныеПервичныхДокументов.Документ В(&МассивКонвертируемыхДокументов)";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		
		Попытка
			
			Пока Выборка.Следующий() Цикл				
				
				МенеджерЗаписиРегистра	= РегистрыСведений.ДанныеПервичныхДокументов.СоздатьМенеджерЗаписи();
				МенеджерЗаписиРегистра.Организация	= Выборка.Организация;
				МенеджерЗаписиРегистра.Документ		= Выборка.Документ;
				МенеджерЗаписиРегистра.Прочитать();
				МенеджерЗаписиРегистра.Организация	= Выборка.Организация;
				НовыйДокумент = СоответствиеКонвертируемыхОбъектов.Получить(Выборка.Документ);
				МенеджерЗаписиРегистра.Документ		= ?(НовыйДокумент = Неопределено, Выборка.Документ, НовыйДокумент);
				МенеджерЗаписиРегистра.Записать();
				
			КонецЦикла;
		Исключение
			
			ОтменитьТранзакцию();
			ВызватьИсключение;
			
		КонецПопытки;
				
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасшифровкаКУДиР.Регистратор,
	|	РасшифровкаКУДиР.Организация,
	|	РасшифровкаКУДиР.РеквизитыДокументаОплаты КАК Ссылка,
	|	""РасшифровкаКУДиР"" КАК ИмяРегистра,
	|	""РеквизитыДокументаОплаты"" КАК ИмяРеквизита
	|ИЗ
	|	РегистрСведений.РасшифровкаКУДиР КАК РасшифровкаКУДиР
	|ГДЕ
	|	РасшифровкаКУДиР.РеквизитыДокументаОплаты В(&МассивКонвертируемыхДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИПДоходы.Регистратор,
	|	ИПДоходы.Организация,
	|	ИПДоходы.Партия,
	|	""ИПДоходы"",
	|	""Партия""
	|ИЗ
	|	РегистрНакопления.ИПДоходы КАК ИПДоходы
	|ГДЕ
	|	ИПДоходы.Партия В(&МассивКонвертируемыхДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИПИныеМатериальныеРасходы.Регистратор,
	|	ИПИныеМатериальныеРасходы.Организация,
	|	ИПИныеМатериальныеРасходы.Партия,
	|	""ИПИныеМатериальныеРасходы"",
	|	""Партия""
	|ИЗ
	|	РегистрНакопления.ИПИныеМатериальныеРасходы КАК ИПИныеМатериальныеРасходы
	|ГДЕ
	|	ИПИныеМатериальныеРасходы.Партия В(&МассивКонвертируемыхДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИПИныеМатериальныеРасходы.Регистратор,
	|	ИПИныеМатериальныеРасходы.Организация,
	|	ИПИныеМатериальныеРасходы.ПартияМПЗ,
	|	""ИПИныеМатериальныеРасходы"",
	|	""ПартияМПЗ""
	|ИЗ
	|	РегистрНакопления.ИПИныеМатериальныеРасходы КАК ИПИныеМатериальныеРасходы
	|ГДЕ
	|	ИПИныеМатериальныеРасходы.ПартияМПЗ В(&МассивКонвертируемыхДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИПМПЗ.Регистратор,
	|	ИПМПЗ.Организация,
	|	ИПМПЗ.Партия,
	|	""ИПМПЗ"",
	|	""Партия""
	|ИЗ
	|	РегистрНакопления.ИПМПЗ КАК ИПМПЗ
	|ГДЕ
	|	ИПМПЗ.Партия В(&МассивКонвертируемыхДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИПМПЗОбороты.Регистратор,
	|	ИПМПЗОбороты.Организация,
	|	ИПМПЗОбороты.ПартияСписаннойНоменклатуры,
	|	""ИПМПЗОбороты"",
	|	""ПартияСписаннойНоменклатуры""
	|ИЗ
	|	РегистрНакопления.ИПМПЗОбороты КАК ИПМПЗОбороты
	|ГДЕ
	|	ИПМПЗОбороты.ПартияСписаннойНоменклатуры В(&МассивКонвертируемыхДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИПМПЗОбороты.Регистратор,
	|	ИПМПЗОбороты.Организация,
	|	ИПМПЗОбороты.ПартияПоступившейНоменклатуры,
	|	""ИПМПЗОбороты"",
	|	""ПартияПоступившейНоменклатуры""
	|ИЗ
	|	РегистрНакопления.ИПМПЗОбороты КАК ИПМПЗОбороты
	|ГДЕ
	|	ИПМПЗОбороты.ПартияПоступившейНоменклатуры В(&МассивКонвертируемыхДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИПМПЗОтгруженные.Регистратор,
	|	ИПМПЗОтгруженные.Организация,
	|	ИПМПЗОтгруженные.Партия,
	|	""ИПМПЗОтгруженные"",
	|	""Партия""
	|ИЗ
	|	РегистрНакопления.ИПМПЗОтгруженные КАК ИПМПЗОтгруженные
	|ГДЕ
	|	ИПМПЗОтгруженные.Партия В(&МассивКонвертируемыхДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИППрочиеРасходы.Регистратор,
	|	ИППрочиеРасходы.Организация,
	|	ИППрочиеРасходы.РасчетныйДокумент,
	|	""ИППрочиеРасходы"",
	|	""РасчетныйДокумент""
	|ИЗ
	|	РегистрНакопления.ИППрочиеРасходы КАК ИППрочиеРасходы
	|ГДЕ
	|	ИППрочиеРасходы.РасчетныйДокумент В(&МассивКонвертируемыхДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИПРасходыНаОплатуТруда.Регистратор,
	|	ИПРасходыНаОплатуТруда.Организация,
	|	ИПРасходыНаОплатуТруда.РасчетныйДокумент,
	|	""ИПРасходыНаОплатуТруда"",
	|	""РасчетныйДокумент""
	|ИЗ
	|	РегистрНакопления.ИПРасходыНаОплатуТруда КАК ИПРасходыНаОплатуТруда
	|ГДЕ
	|	ИПРасходыНаОплатуТруда.РасчетныйДокумент В(&МассивКонвертируемыхДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИПРБП.Регистратор,
	|	ИПРБП.Организация,
	|	ИПРБП.Партия,
	|	""ИПРБП"",
	|	""Партия""
	|ИЗ
	|	РегистрНакопления.ИПРБП КАК ИПРБП
	|ГДЕ
	|	ИПРБП.Партия В(&МассивКонвертируемыхДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПрочиеРасчеты.Регистратор,
	|	ПрочиеРасчеты.Организация,
	|	ПрочиеРасчеты.РасчетныйДокумент,
	|	""ПрочиеРасчеты"",
	|	""РасчетныйДокумент""
	|ИЗ
	|	РегистрНакопления.ПрочиеРасчеты КАК ПрочиеРасчеты
	|ГДЕ
	|	ПрочиеРасчеты.РасчетныйДокумент В(&МассивКонвертируемыхДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасходыПриУСН.Регистратор,
	|	РасходыПриУСН.Организация,
	|	РасходыПриУСН.РасчетныйДокумент,
	|	""РасходыПриУСН"",
	|	""РасчетныйДокумент""
	|ИЗ
	|	РегистрНакопления.РасходыПриУСН КАК РасходыПриУСН
	|ГДЕ
	|	РасходыПриУСН.РасчетныйДокумент В(&МассивКонвертируемыхДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасходыПриУСН.Регистратор,
	|	РасходыПриУСН.Организация,
	|	РасходыПриУСН.Партия,
	|	""РасходыПриУСН"",
	|	""Партия""
	|ИЗ
	|	РегистрНакопления.РасходыПриУСН КАК РасходыПриУСН
	|ГДЕ
	|	РасходыПриУСН.Партия В(&МассивКонвертируемыхДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасходыПриУСН.Регистратор,
	|	РасходыПриУСН.Организация,
	|	РасходыПриУСН.РеквизитыДокументаОплаты,
	|	""РасходыПриУСН"",
	|	""РеквизитыДокументаОплаты""
	|ИЗ
	|	РегистрНакопления.РасходыПриУСН КАК РасходыПриУСН
	|ГДЕ
	|	РасходыПриУСН.РеквизитыДокументаОплаты В(&МассивКонвертируемыхДокументов)";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		
		Попытка
			
			Пока Выборка.Следующий() Цикл
				
				НовыйДокумент = СоответствиеКонвертируемыхОбъектов.Получить(Выборка.Ссылка);
				НовыйДокумент = ?(НовыйДокумент = Неопределено, Выборка.Ссылка, НовыйДокумент);
				
				Если МассивИменРегистровСведений.Найти(Выборка.ИмяРегистра) <> Неопределено Тогда 
					НаборЗаписейРегистра	= РегистрыСведений[Выборка.ИмяРегистра].СоздатьНаборЗаписей();
				Иначе
					НаборЗаписейРегистра	= РегистрыНакопления[Выборка.ИмяРегистра].СоздатьНаборЗаписей();
				КонецЕсли;
				
				ОтборПоРегистратору = НаборЗаписейРегистра.Отбор.Регистратор;
				ОтборПоРегистратору.Установить(Выборка.Регистратор);
				НаборЗаписейРегистра.Прочитать();
				
				ТаблицаЗаписей = НаборЗаписейРегистра.Выгрузить();						
				Отбор = Новый Структура(Выборка.ИмяРеквизита, Выборка.Ссылка);			
				МассивСтрок = ТаблицаЗаписей.НайтиСтроки(Отбор);
				Для Каждого СтрокаМассива Из МассивСтрок Цикл
					СтрокаМассива[Выборка.ИмяРеквизита] = НовыйДокумент;				
				КонецЦикла;
				
				НаборЗаписейРегистра.Загрузить(ТаблицаЗаписей);
				НаборЗаписейРегистра.Записать();
				
			КонецЦикла; 
			
		Исключение
			
			ОтменитьТранзакцию();
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаписьКнигиУчетаДоходовИРасходовИПТаблица1.Ссылка КАК Ссылка,
	|	ЗаписьКнигиУчетаДоходовИРасходовИПТаблица1.Партия КАК Документ,
	|	""Таблица1"" КАК ИмяТаблицы,
	|	""Партия"" КАК ИмяРеквизита
	|ИЗ
	|	Документ.ЗаписьКнигиУчетаДоходовИРасходовИП.Таблица1 КАК ЗаписьКнигиУчетаДоходовИРасходовИПТаблица1
	|ГДЕ
	|	ЗаписьКнигиУчетаДоходовИРасходовИПТаблица1.Партия В(&МассивКонвертируемыхДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаписьКнигиУчетаДоходовИРасходовИПТаблица2.Ссылка,
	|	ЗаписьКнигиУчетаДоходовИРасходовИПТаблица2.Партия,
	|	""Таблица2"",
	|	""Партия""
	|ИЗ
	|	Документ.ЗаписьКнигиУчетаДоходовИРасходовИП.Таблица2 КАК ЗаписьКнигиУчетаДоходовИРасходовИПТаблица2
	|ГДЕ
	|	ЗаписьКнигиУчетаДоходовИРасходовИПТаблица2.Партия В(&МассивКонвертируемыхДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаписьКнигиУчетаДоходовИРасходовИПТаблица4.Ссылка,
	|	ЗаписьКнигиУчетаДоходовИРасходовИПТаблица4.Партия,
	|	""Таблица4"",
	|	""Партия""
	|ИЗ
	|	Документ.ЗаписьКнигиУчетаДоходовИРасходовИП.Таблица4 КАК ЗаписьКнигиУчетаДоходовИРасходовИПТаблица4
	|ГДЕ
	|	ЗаписьКнигиУчетаДоходовИРасходовИПТаблица4.Партия В(&МассивКонвертируемыхДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаписьКнигиУчетаДоходовИРасходовИПТаблица5.Ссылка,
	|	ЗаписьКнигиУчетаДоходовИРасходовИПТаблица5.РасчетныйДокумент,
	|	""Таблица5"",
	|	""РасчетныйДокумент""
	|ИЗ
	|	Документ.ЗаписьКнигиУчетаДоходовИРасходовИП.Таблица5 КАК ЗаписьКнигиУчетаДоходовИРасходовИПТаблица5
	|ГДЕ
	|	ЗаписьКнигиУчетаДоходовИРасходовИПТаблица5.РасчетныйДокумент В(&МассивКонвертируемыхДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаписьКнигиУчетаДоходовИРасходовИПТаблица6.Ссылка,
	|	ЗаписьКнигиУчетаДоходовИРасходовИПТаблица6.РасчетныйДокумент,
	|	""Таблица6"",
	|	""РасчетныйДокумент""
	|ИЗ
	|	Документ.ЗаписьКнигиУчетаДоходовИРасходовИП.Таблица6 КАК ЗаписьКнигиУчетаДоходовИРасходовИПТаблица6
	|ГДЕ
	|	ЗаписьКнигиУчетаДоходовИРасходовИПТаблица6.РасчетныйДокумент В(&МассивКонвертируемыхДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаписьКнигиУчетаДоходовИРасходовИПТаблица12.Ссылка,
	|	ЗаписьКнигиУчетаДоходовИРасходовИПТаблица12.Партия,
	|	""Таблица12"",
	|	""Партия""
	|ИЗ
	|	Документ.ЗаписьКнигиУчетаДоходовИРасходовИП.Таблица12 КАК ЗаписьКнигиУчетаДоходовИРасходовИПТаблица12
	|ГДЕ
	|	ЗаписьКнигиУчетаДоходовИРасходовИПТаблица12.Партия В(&МассивКонвертируемыхДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаписьКнигиУчетаДоходовИРасходовИПТаблица15.Ссылка,
	|	ЗаписьКнигиУчетаДоходовИРасходовИПТаблица15.ПартияСписаннойНоменклатуры,
	|	""Таблица15"",
	|	""ПартияСписаннойНоменклатуры""
	|ИЗ
	|	Документ.ЗаписьКнигиУчетаДоходовИРасходовИП.Таблица15 КАК ЗаписьКнигиУчетаДоходовИРасходовИПТаблица15
	|ГДЕ
	|	ЗаписьКнигиУчетаДоходовИРасходовИПТаблица15.ПартияСписаннойНоменклатуры В(&МассивКонвертируемыхДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаписьКнигиУчетаДоходовИРасходовИПТаблица15.Ссылка,
	|	ЗаписьКнигиУчетаДоходовИРасходовИПТаблица15.ПартияПоступившейНоменклатуры,
	|	""Таблица15"",
	|	""ПартияСписаннойНоменклатуры""
	|ИЗ
	|	Документ.ЗаписьКнигиУчетаДоходовИРасходовИП.Таблица15 КАК ЗаписьКнигиУчетаДоходовИРасходовИПТаблица15
	|ГДЕ
	|	ЗаписьКнигиУчетаДоходовИРасходовИПТаблица15.ПартияПоступившейНоменклатуры В(&МассивКонвертируемыхДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаписьКнигиУчетаДоходовИРасходовИПТаблица63.Ссылка,
	|	ЗаписьКнигиУчетаДоходовИРасходовИПТаблица63.РасчетныйДокумент,
	|	""Таблица63"",
	|	""РасчетныйДокумент""
	|ИЗ
	|	Документ.ЗаписьКнигиУчетаДоходовИРасходовИП.Таблица63 КАК ЗаписьКнигиУчетаДоходовИРасходовИПТаблица63
	|ГДЕ
	|	ЗаписьКнигиУчетаДоходовИРасходовИПТаблица63.РасчетныйДокумент В(&МассивКонвертируемыхДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВводНачальныхОстатковРасчетыСПодотчетнымиЛицами.Ссылка,
	|	ВводНачальныхОстатковРасчетыСПодотчетнымиЛицами.РасчетныйДокумент,
	|	""РасчетыСПодотчетнымиЛицами"",
	|	""РасчетныйДокумент""
	|ИЗ
	|	Документ.ВводНачальныхОстатков.РасчетыСПодотчетнымиЛицами КАК ВводНачальныхОстатковРасчетыСПодотчетнымиЛицами
	|ГДЕ
	|	ВводНачальныхОстатковРасчетыСПодотчетнымиЛицами.РасчетныйДокумент В(&МассивКонвертируемыхДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВводНачальныхОстатковРасходыБудущихПериодов.Ссылка,
	|	ВводНачальныхОстатковРасходыБудущихПериодов.РасчетныйДокумент,
	|	""РасходыБудущихПериодов"",
	|	""РасчетныйДокумент""
	|ИЗ
	|	Документ.ВводНачальныхОстатков.РасходыБудущихПериодов КАК ВводНачальныхОстатковРасходыБудущихПериодов
	|ГДЕ
	|	ВводНачальныхОстатковРасходыБудущихПериодов.РасчетныйДокумент В(&МассивКонвертируемыхДокументов)";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		
		Попытка
			
			Пока Выборка.Следующий() Цикл
				
				НовыйДокумент = СоответствиеКонвертируемыхОбъектов.Получить(Выборка.Документ);
				НовыйДокумент = ?(НовыйДокумент = Неопределено, Выборка.Документ, НовыйДокумент);

				ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
				Отбор = Новый Структура(Выборка.ИмяРеквизита, Выборка.Документ);				
				МассивСтрок = ДокументОбъект[Выборка.ИмяТаблицы].НайтиСтроки(Отбор);
				Для Каждого СтрокаМассива Из МассивСтрок Цикл
					СтрокаМассива[Выборка.ИмяРеквизита] = НовыйДокумент;				
				КонецЦикла;
				
				ДокументОбъект.ОбменДанными.Загрузка = Истина;
				ДокументОбъект.Записать();
				
			КонецЦикла; 
			
		Исключение
			
			ОтменитьТранзакцию();
			ВызватьИсключение;
			
		КонецПопытки;
				
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура СкопироватьОчиститьНаборЗаписей(ТипРегистра, ИмяРегистра, Источник, Примемник, СуммаОперации = 0, Дополнять = Ложь)
	
	Если ТипРегистра = "РегистрСведений" Тогда
		НаборЗаписейРегистра	= РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
	ИначеЕсли ТипРегистра = "РегистрНакопления" Тогда
		НаборЗаписейРегистра	= РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
	ИначеЕсли ТипРегистра = "РегистрБухгалтерии" Тогда
		НаборЗаписейРегистра	= РегистрыБухгалтерии[ИмяРегистра].СоздатьНаборЗаписей();
	КонецЕсли;
	
	ОтборПоРегистратору = НаборЗаписейРегистра.Отбор.Регистратор;
	ОтборПоРегистратору.Установить(Источник);
	НаборЗаписейРегистра.Прочитать();
	
	ТаблицаЗаписей = НаборЗаписейРегистра.Выгрузить();	
	
	Если ТаблицаЗаписей.Количество() <> 0 Тогда
		Если НЕ ТаблицаЗаписей[0].Активность Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипРегистра = "РегистрСведений" Тогда
		НовыйНаборЗаписей	= РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
	ИначеЕсли ТипРегистра = "РегистрНакопления" Тогда
		НовыйНаборЗаписей	= РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
	ИначеЕсли ТипРегистра = "РегистрБухгалтерии" Тогда
		НовыйНаборЗаписей	= РегистрыБухгалтерии[ИмяРегистра].СоздатьНаборЗаписей();
		СуммаОперации = ТаблицаЗаписей.Итог("Сумма");
	КонецЕсли;
	
	ОтборПоРегистратору = НовыйНаборЗаписей.Отбор.Регистратор;
	ОтборПоРегистратору.Установить(Примемник);
	НовыйНаборЗаписей.Прочитать();	
		
	Если НовыйНаборЗаписей.Количество() <> 0 Тогда
		Если Дополнять Тогда
			ТаблицаНовыхЗаписей = НовыйНаборЗаписей.Выгрузить();	
			Для Каждого Строка ИЗ ТаблицаЗаписей Цикл
				НоваяЗапись = ТаблицаНовыхЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, Строка);		 				
			КонецЦикла;
			ТаблицаЗаписей =  ТаблицаНовыхЗаписей;
			Если ТипРегистра = "РегистрСведений" И ИмяРегистра = "РасшифровкаКУДиР" Тогда
				Для каждого СтрокаНовойЗаписи Из ТаблицаЗаписей Цикл				
					СтрокаНовойЗаписи.СтрокаДокумента = ТаблицаНовыхЗаписей.Индекс(СтрокаНовойЗаписи) + 1;					
				КонецЦикла; 
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
	
	НовыйНаборЗаписей.Загрузить(ТаблицаЗаписей);
	НовыйНаборЗаписей.Записать();	
	
	НаборЗаписейРегистра.Очистить();
	НаборЗаписейРегистра.Записать();
	
КонецПроцедуры

// Перенос движений "старых" документов учета зарплаты, помеченных
// как "Удалить..." в документ "ОперацияБух" и замена ссылок на 
// эти документы в записях регистров и документах
Процедура ПереносДвиженийИсчисленныеСтраховыеВзносы() Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсчисленныеСтраховыеВзносы.Регистратор КАК Ссылка,
	|	ИсчисленныеСтраховыеВзносы.Период КАК Дата,
	|	ИсчисленныеСтраховыеВзносы.Организация КАК Организация
	|ИЗ
	|	РегистрНакопления.ИсчисленныеСтраховыеВзносы КАК ИсчисленныеСтраховыеВзносы
	|ГДЕ
	|	(ИсчисленныеСтраховыеВзносы.Регистратор ССЫЛКА Документ.УдалитьРасчетЕСН
	|			ИЛИ ИсчисленныеСтраховыеВзносы.Регистратор ССЫЛКА Документ.УдалитьНДФЛиЕСНДоходыИНалоги)
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсчисленныеСтраховыеВзносы.Регистратор,
	|	ИсчисленныеСтраховыеВзносы.Период,
	|	ИсчисленныеСтраховыеВзносы.Организация";
	
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() = 0 Тогда		
		Возврат;
	КонецЕсли;
	
	Результат.Свернуть("Ссылка, Дата, Организация",);
	
	НачатьТранзакцию();
	
	Попытка
		Для Каждого СтрокаТаблицы ИЗ Результат Цикл	
			
			ДокументИсточник = СтрокаТаблицы.Ссылка;
			
			Документ = Документы.ОперацияБух.СоздатьДокумент();
			Документ.Дата        = СтрокаТаблицы.Дата;
			Документ.Организация = СтрокаТаблицы.Организация;
			Документ.Комментарий = НСтр("ru = 'Данные документа: '") + ДокументИсточник;
			
			СтрокаРегистра = Документ.ТаблицаРегистровНакопления.Добавить();
			СтрокаРегистра.Имя = "ИсчисленныеСтраховыеВзносы";

			Документ.Записать(РежимЗаписиДокумента.Запись);	
						
			СкопироватьОчиститьНаборЗаписей("РегистрНакопления", "ИсчисленныеСтраховыеВзносы", ДокументИсточник, Документ.Ссылка);
			
		КонецЦикла;
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Заполнение нового реквизита ВидОперации в отчете комитенту.
//
Процедура ЗаполнитьВидОперацииВОтчетеКомитентуОПродажах() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтчетКомитентуОПродажах.Ссылка,
	|	ОтчетКомитентуОПродажах.Дата
	|ИЗ
	|	Документ.ОтчетКомитентуОПродажах КАК ОтчетКомитентуОПродажах
	|ГДЕ
	|	ОтчетКомитентуОПродажах.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОтчетКомитентуОПродажах.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата
	|";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Попытка
				ОтчетКомитенту = Выборка.Ссылка.ПолучитьОбъект();
				ОтчетКомитенту.ВидОперации = Перечисления.ВидыОперацийОтчетКомитентуОПродажах.ОтчетОПродажах;
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОтчетКомитенту);
			Исключение
				ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Заполнение обязательных реквизитов счетов-фактур
//
Процедура ЗаполнениеВидаКодаОперацииСчетФактуры() Экспорт

	НачалоПримененияПостановления1137 = УчетНДСБП.ПолучитьДатуНачалаДействияПостановления1137();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПримененияПостановления1137", НачалоПримененияПостановления1137);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетФактураВыданный.Ссылка КАК Ссылка,
		|	СчетФактураВыданный.Дата КАК Дата,
		|	СчетФактураВыданный.ВидСчетаФактуры КАК ВидСчетаФактуры,
		|	СчетФактураВыданный.КодВидаОперации КАК КодВидаОперации,
		|	СчетФактураВыданный.КодСпособаВыставления КАК КодСпособаВыставления
		|ИЗ
		|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|ГДЕ
		|	(СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.ПустаяСсылка)
		|			ИЛИ СчетФактураВыданный.ВидСчетаФактуры = НЕОПРЕДЕЛЕНО
		|			ИЛИ СчетФактураВыданный.Дата >= &НачалоПримененияПостановления1137
		|				И СчетФактураВыданный.КодВидаОперации ПОДОБНО """"
		|			ИЛИ СчетФактураВыданный.Дата >= &НачалоПримененияПостановления1137
		|				И СчетФактураВыданный.КодСпособаВыставления = 0)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СчетФактураПолученный.Ссылка КАК Ссылка,
		|	СчетФактураПолученный.Дата КАК Дата,
		|	СчетФактураПолученный.ВидСчетаФактуры КАК ВидСчетаФактуры,
		|	СчетФактураПолученный.КодВидаОперации КАК КодВидаОперации,
		|	СчетФактураПолученный.КодСпособаПолучения КАК КодСпособаПолучения
		|ИЗ
		|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
		|ГДЕ
		|	(СчетФактураПолученный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.ПустаяСсылка)
		|			ИЛИ СчетФактураПолученный.ВидСчетаФактуры = НЕОПРЕДЕЛЕНО
		|			ИЛИ СчетФактураПолученный.Дата >= &НачалоПримененияПостановления1137
		|				И СчетФактураПолученный.КодВидаОперации ПОДОБНО """"
		|			ИЛИ СчетФактураПолученный.Дата >= &НачалоПримененияПостановления1137
		|				И СчетФактураПолученный.КодСпособаПолучения = 0)";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Если НЕ МассивРезультатов[0].Пустой() Тогда
	
		ВыборкаСчетФактураВыданный = МассивРезультатов[0].Выбрать();
		Пока ВыборкаСчетФактураВыданный.Следующий() Цикл
			
			СчетФактураОбъект	= ВыборкаСчетФактураВыданный.Ссылка.ПолучитьОбъект();
			
			Если НЕ ЗначениеЗаполнено(СчетФактураОбъект.ВидСчетаФактуры) Тогда
				СчетФактураОбъект.ВидСчетаФактуры	= Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;
			КонецЕсли;
			
			Если СчетФактураОбъект.Дата >= НачалоПримененияПостановления1137
				И ПустаяСтрока(СчетФактураОбъект.КодВидаОперации) Тогда
			
				СчетФактураОбъект.КодВидаОперации	= Документы.СчетФактураВыданный.ПолучитьКодВидаОперации(СчетФактураОбъект);
			
			КонецЕсли;
			
			Если СчетФактураОбъект.Дата >= НачалоПримененияПостановления1137
				И СчетФактураОбъект.КодСпособаВыставления = 0 Тогда
				
				СчетФактураОбъект.КодСпособаВыставления	= 1;
				
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(СчетФактураОбъект);
			
		КонецЦикла;
	
	КонецЕсли;
	
	Если НЕ МассивРезультатов[1].Пустой() Тогда
		
		ВыборкаСчетФактураПолученный = МассивРезультатов[1].Выбрать();
		Пока ВыборкаСчетФактураПолученный.Следующий() Цикл
			
			СчетФактураОбъект	= ВыборкаСчетФактураПолученный.Ссылка.ПолучитьОбъект();
			
			Если НЕ ЗначениеЗаполнено(СчетФактураОбъект.ВидСчетаФактуры) Тогда
				СчетФактураОбъект.ВидСчетаФактуры	= Перечисления.ВидСчетаФактурыПолученного.НаПоступление;
			КонецЕсли;
			
			Если СчетФактураОбъект.Дата >= НачалоПримененияПостановления1137
				И ПустаяСтрока(СчетФактураОбъект.КодВидаОперации) Тогда
			
				СчетФактураОбъект.КодВидаОперации	= Документы.СчетФактураПолученный.ПолучитьКодВидаОперации(СчетФактураОбъект);
			
			КонецЕсли;
			
			Если СчетФактураОбъект.Дата >= НачалоПримененияПостановления1137
				И СчетФактураОбъект.КодСпособаПолучения = 0 Тогда
				
				СчетФактураОбъект.КодСпособаПолучения	= 1;
				
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(СчетФактураОбъект);
			
		КонецЦикла;
	
	КонецЕсли;

КонецПроцедуры

// Заполнение добавленных ресурсов учетной политики
Процедура ЗаполнитьУчетнуюПолитикуПорядокОтраженияАвансаУСН() Экспорт
	
	НаборЗаписей = РегистрыСведений.УчетнаяПолитикаОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	Для каждого Запись Из НаборЗаписей Цикл
		
		Если НЕ ЗначениеЗаполнено(Запись.ПорядокОтраженияАвансаУСН) Тогда
			Запись.ПорядокОтраженияАвансаУСН	= Перечисления.ПорядокОтраженияАвансов.ДоходУСН;
		КонецЕсли;
		
	КонецЦикла;
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
		ТекстСообщения	= НСтр("ru = 'Не выполнено обновление записей регистра сведений ""Учетная политика""'");
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
		
КонецПроцедуры

// Копирование записей учетной политики головных организаций в записи по их обособленным подразделениям
Процедура ЗаписатьУчетнуюПолитикуОбособленныхПодразделений() Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК ОбособленноеПодразделение,
	|	Организации.ГоловнаяОрганизация КАК ГоловнаяОрганизация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ОбособленноеПодразделение");
	
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗаписиГоловнойОрганизации = РегистрыСведений.УчетнаяПолитикаОрганизаций.СоздатьНаборЗаписей();
		ЗаписиГоловнойОрганизации.Отбор.Организация.Установить(Выборка.ГоловнаяОрганизация);
		ЗаписиГоловнойОрганизации.Прочитать();
		
		ЗаписиПодразделения = РегистрыСведений.УчетнаяПолитикаОрганизаций.СоздатьНаборЗаписей();
		ЗаписиПодразделения.Отбор.Организация.Установить(Выборка.ОбособленноеПодразделение);
		Для каждого Запись Из ЗаписиГоловнойОрганизации Цикл
			НоваяЗапись = ЗаписиПодразделения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Запись);
			НоваяЗапись.Организация = Выборка.ОбособленноеПодразделение;
		КонецЦикла;
		ЗаписиПодразделения.Записать(Истина);
		
	КонецЦикла;

КонецПроцедуры

//Заполнить зачение константы НеИспользуетсяОСНО 
//исходя из значения константы ИспользуетсяОСНО
Процедура УстановитьКонстантуНеИспользуетсяОСНО() Экспорт
	
	Константы.НеИспользуетсяОСНО.Установить(Не Константы.ИспользуетсяОСНО.Получить());
	
КонецПроцедуры	

// Установка флага "Ручная корректировка" в счетах-фактурах полученных
// для упрощенного учета НДС с установленным флагом "Отразить вычет НДС"
//
Процедура УстановитьКорректировкуДляСчетовФактурПолученных_НДСПредъявленКВычету() Экспорт
	
	Запрос	= Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УчетнаяПолитикаОрганизаций.Организация КАК Организация
	|ПОМЕСТИТЬ ВТ_ОрганизацииСУпрощеннымУчетомНДС
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
	|ГДЕ
	|	УчетнаяПолитикаОрганизаций.ПлательщикНДС
	|	И УчетнаяПолитикаОрганизаций.УпрощенныйУчетНДС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетФактураПолученный.Ссылка,
	|	СчетФактураПолученный.Дата,
	|	СчетФактураПолученный.Организация
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.НДСПредъявленКВычету
	|	И СчетФактураПолученный.Проведен
	|	И НЕ СчетФактураПолученный.РучнаяКорректировка
	|	И СчетФактураПолученный.Дата < ДАТАВРЕМЯ(2012, 1, 1)
	|	И СчетФактураПолученный.Организация В
	|			(ВЫБРАТЬ
	|				ОрганизацииСУпрощеннымУчетомНДС.Организация
	|			ИЗ
	|				ВТ_ОрганизацииСУпрощеннымУчетомНДС КАК ОрганизацииСУпрощеннымУчетомНДС)";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.Прямой);
	Пока Выборка.Следующий() Цикл
		
		Если НЕ УчетнаяПолитика.УпрощенныйУчетНДС(Выборка.Организация, Выборка.Дата) Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект	= Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.РучнаяКорректировка	= Истина;
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			ТекстСообщения	= НСтр("ru = 'Не установлен флаг ""Ручная корректировка"" у документа ""Счет-фактура полученный""'");
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполнение ресурса "КППКонтрагента" регистра сведений "ЖурналУчетаСчетовФактур"
//
Процедура ЗаполнениеКППКонтрагентаЖурналаУчетаСчетовФактур() Экспорт
	
	Запрос	= Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЖурналУчетаСчетовФактур.Регистратор,
	|	ЖурналУчетаСчетовФактур.Контрагент.КПП КАК КППКонтрагента
	|ИЗ
	|	РегистрСведений.ЖурналУчетаСчетовФактур КАК ЖурналУчетаСчетовФактур
	|ГДЕ
	|	ЖурналУчетаСчетовФактур.КППКонтрагента = """"
	|	И ЖурналУчетаСчетовФактур.Контрагент.КПП <> """"";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.ЖурналУчетаСчетовФактур.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.Прочитать();
		
		Для Каждого Запись Из НаборЗаписей Цикл
			Запись.КППКонтрагента	= Выборка.КППКонтрагента;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполнение регистра "Данные первичных документов
//
Процедура ЗаполнениеРеквизитовПервичныхДокументов() Экспорт
	
	// Документы, у которых есть реквизиты вх.номер и вх.дата
	ВходящиеДокументы = Новый Массив;
	ВходящиеДокументы.Добавить("ДокументРасчетовСКонтрагентом");
	ВходящиеДокументы.Добавить("КорректировкаПоступления");
	ВходящиеДокументы.Добавить("ОтчетКомиссионераОПродажах");
	ВходящиеДокументы.Добавить("ПоступлениеДенежныхДокументов");
	ВходящиеДокументы.Добавить("ПоступлениеДопРасходов");
	ВходящиеДокументы.Добавить("ПоступлениеНаРасчетныйСчет");
	ВходящиеДокументы.Добавить("ПоступлениеНМА");
	ВходящиеДокументы.Добавить("ПоступлениеТоваровУслуг");
	ВходящиеДокументы.Добавить("СписаниеСРасчетногоСчета");	
	ВходящиеДокументы.Добавить("СчетФактураПолученный");	
	
	УчетОбособленныхПодразделений.ДополнитьМассивИменамиДокументовАвизо(ВходящиеДокументы, Истина);
	
	// Документы, у которых нет реквизитов вх.номер и вх.дата
	РасчетныеДокументы = Новый Массив;
	РасчетныеДокументы.Добавить("ТребованиеНакладная");
	РасчетныеДокументы.Добавить("СписаниеТоваров");
	РасчетныеДокументы.Добавить("ОтчетПроизводстваЗаСмену");
	РасчетныеДокументы.Добавить("СписаниеОС");
	РасчетныеДокументы.Добавить("ПередачаОС");
	РасчетныеДокументы.Добавить("ГТДИмпорт");
	РасчетныеДокументы.Добавить("ОприходованиеТоваров");
	РасчетныеДокументы.Добавить("СписаниеМатериаловИзЭксплуатации");
	РасчетныеДокументы.Добавить("ВыдачаДенежныхДокументов");
	РасчетныеДокументы.Добавить("ПередачаМатериаловВЭксплуатацию");
	РасчетныеДокументы.Добавить("ПринятиеКУчетуОС");
	РасчетныеДокументы.Добавить("КорректировкаРеализации");
	РасчетныеДокументы.Добавить("РасходныйКассовыйОрдер");	
	РасчетныеДокументы.Добавить("ОперацияБух");
	РасчетныеДокументы.Добавить("АктОбОказанииПроизводственныхУслуг");
	РасчетныеДокументы.Добавить("КорректировкаДолга");
	РасчетныеДокументы.Добавить("ОказаниеУслуг");
	РасчетныеДокументы.Добавить("МодернизацияОС");
	РасчетныеДокументы.Добавить("ВозвратТоваровОтПокупателя");
	РасчетныеДокументы.Добавить("ПередачаТоваров");
	РасчетныеДокументы.Добавить("ОтчетКомитентуОПродажах");
	РасчетныеДокументы.Добавить("ПодготовкаКПередачеОС");
	РасчетныеДокументы.Добавить("ПередачаОборудованияВМонтаж");
	РасчетныеДокументы.Добавить("ПередачаНМА");
	РасчетныеДокументы.Добавить("ОтчетОРозничныхПродажах");
	РасчетныеДокументы.Добавить("ПриходныйКассовыйОрдер");
	РасчетныеДокументы.Добавить("ПоступлениеИзПереработки");
	РасчетныеДокументы.Добавить("РеализацияУслугПоПереработке");
	РасчетныеДокументы.Добавить("КомплектацияНоменклатуры");
	РасчетныеДокументы.Добавить("РеализацияТоваровУслуг");
	РасчетныеДокументы.Добавить("ВозвратТоваровПоставщику");
	РасчетныеДокументы.Добавить("ПартияМатериаловВЭксплуатации");
	РасчетныеДокументы.Добавить("РеализацияОтгруженныхТоваров");
	РасчетныеДокументы.Добавить("ВозвратМатериаловИзЭксплуатации");
	РасчетныеДокументы.Добавить("Партия");
	РасчетныеДокументы.Добавить("ПринятиеКУчетуНМА");
	РасчетныеДокументы.Добавить("СписаниеНМА");
	РасчетныеДокументы.Добавить("ПеремещениеТоваров");
	РасчетныеДокументы.Добавить("АвансовыйОтчет");
	РасчетныеДокументы.Добавить("ИнвентаризацияТоваровНаСкладе");
	РасчетныеДокументы.Добавить("ИнвентаризацияНЗП");
	РасчетныеДокументы.Добавить("НачислениеЗарплаты");
	РасчетныеДокументы.Добавить("ОтражениеЗарплатыВБухучете");
	РасчетныеДокументы.Добавить("ОтражениеЗарплатыВУчете");
	РасчетныеДокументы.Добавить("РегистрацияОплатыОсновныхСредствДляУСН");
	РасчетныеДокументы.Добавить("ВводНачальныхОстатков");
	РасчетныеДокументы.Добавить("ВосстановлениеНДС");
	РасчетныеДокументы.Добавить("ВосстановлениеНДСПоОбъектамНедвижимости");
	РасчетныеДокументы.Добавить("ДепонированиеЗарплаты");
	РасчетныеДокументы.Добавить("НачислениеНДСпоСМРхозспособом");
	РасчетныеДокументы.Добавить("ОтражениеНачисленияНДС");
	РасчетныеДокументы.Добавить("ОтражениеНДСКВычету");
	РасчетныеДокументы.Добавить("ПеремещениеОС");
	РасчетныеДокументы.Добавить("ПереоценкаТоваровВРознице");
	РасчетныеДокументы.Добавить("ПодтверждениеНулевойСтавкиНДС");	
	РасчетныеДокументы.Добавить("РаспределениеНДС");
	РасчетныеДокументы.Добавить("РегламентнаяОперация");
	РасчетныеДокументы.Добавить("СписаниеДепонированнойЗарплаты");
	РасчетныеДокументы.Добавить("СписаниеНДС");
	РасчетныеДокументы.Добавить("СчетФактураВыданный");
	РасчетныеДокументы.Добавить("ФормированиеЗаписейКнигиПокупок");
	РасчетныеДокументы.Добавить("ФормированиеЗаписейКнигиПродаж");
	РасчетныеДокументы.Добавить("ПерерасчетНДФЛ");
	РасчетныеДокументы.Добавить("СправкиНДФЛДляПередачиВНалоговыйОрган");
	
	УчетОбособленныхПодразделений.ДополнитьМассивИменамиДокументовАвизо(РасчетныеДокументы, Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	МассивОрганизаций = РезультатЗапроса.ВыгрузитьКолонку("Организация");
	
	// Обработка входящих документов
	Для Каждого ВходящийДокумент ИЗ ВходящиеДокументы Цикл
		РеквизитыДокументов = ПолучитьРеквизитыДокументов(МассивОрганизаций, ВходящийДокумент, Истина);
		ЗаписатьРеквизитыДокументов(РеквизитыДокументов);
	КонецЦикла;
	
	// Обработка исходящих или расчетных документов
	Для Каждого РасчетныйДокумент ИЗ РасчетныеДокументы Цикл
		РеквизитыДокументов = ПолучитьРеквизитыДокументов(МассивОрганизаций, РасчетныйДокумент);
		ЗаписатьРеквизитыДокументов(РеквизитыДокументов);
	КонецЦикла;	
	
КонецПроцедуры

Функция ПолучитьРеквизитыДокументов(МассивОрганизаций, ТипДокумента, ВходящиеДокументы = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);
	
	Если ВходящиеДокументы Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументРасчетовСКонтрагентом.Организация КАК Организация,
		|	ДокументРасчетовСКонтрагентом.Ссылка КАК Документ,
		|	ДокументРасчетовСКонтрагентом.ДатаВходящегоДокумента КАК Дата,
		|	ДокументРасчетовСКонтрагентом.НомерВходящегоДокумента КАК Номер,
		|	ЛОЖЬ КАК ПреобразоватьНомер,
		|	ДокументРасчетовСКонтрагентом.Дата КАК ДатаРегистратора,
		|	ДокументРасчетовСКонтрагентом.Номер КАК НомерРегистратора
		|ИЗ
		|	Документ.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом
		|ГДЕ
		|	ДокументРасчетовСКонтрагентом.Организация В(&МассивОрганизаций)";
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументРасчетовСКонтрагентом.Организация КАК Организация,
		|	ДокументРасчетовСКонтрагентом.Ссылка КАК Документ,
		|	ДокументРасчетовСКонтрагентом.Дата КАК Дата,
		|	ДокументРасчетовСКонтрагентом.Номер КАК Номер,
		|	ИСТИНА КАК ПреобразоватьНомер,
		|	ДокументРасчетовСКонтрагентом.Дата КАК ДатаРегистратора,
		|	ДокументРасчетовСКонтрагентом.Номер КАК НомерРегистратора
		|ИЗ
		|	Документ.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом
		|ГДЕ
		|	ДокументРасчетовСКонтрагентом.Организация В(&МассивОрганизаций)";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДокументРасчетовСКонтрагентом", ТипДокумента); 
		
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Процедура ЗаписатьРеквизитыДокументов(ВыборкаДокументов)
		
	Пока ВыборкаДокументов.Следующий() Цикл
		МенеджерЗаписиРегистра = РегистрыСведений.ДанныеПервичныхДокументов.СоздатьМенеджерЗаписи();
		МенеджерЗаписиРегистра.Прочитать();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписиРегистра, ВыборкаДокументов);		
		
		Если ВыборкаДокументов.ПреобразоватьНомер Тогда
			МенеджерЗаписиРегистра.Номер = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаДокументов.Номер, Истина, Ложь);
		КонецЕсли;
		
		Попытка
			МенеджерЗаписиРегистра.Записать();
		Исключение
			ТекстСообщения	= НСтр("ru = 'Не удалось зарегистрировадь данные документа'");
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
        		
	КонецЦикла;
	
КонецПроцедуры

// Перезаполнение документа Ввод начальных остатков ввиду изменения признака АП отдельных счетов
//
Процедура ОбработкаИзмененияПризнакаСчетаВНО() Экспорт
	
	МассивОпераций = Новый Массив;
	МассивОпераций.Добавить(Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеСчетаБухгалтерскогоУчета);
	МассивОпераций.Добавить(Перечисления.РазделыУчетаДляВводаОстатков.Капитал);
	
	МассивПассивныхСчетов = Новый Массив;
	МассивПассивныхСчетов.Добавить(ПланыСчетов.Хозрасчетный.РезервыПодСнижениеСтоимостиМатериалов);
	МассивПассивныхСчетов.Добавить(ПланыСчетов.Хозрасчетный.РезервыПодСнижениеСтоимостиТоваров);
	МассивПассивныхСчетов.Добавить(ПланыСчетов.Хозрасчетный.РезервыПодСнижениеСтоимостиГотовойПродукции);
	МассивПассивныхСчетов.Добавить(ПланыСчетов.Хозрасчетный.РезервыПодСнижениеСтоимостиНезавершенногоПроизводства);
	МассивПассивныхСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПрибыльПодлежащаяРаспределению);
	МассивПассивныхСчетов.Добавить(ПланыСчетов.Хозрасчетный.НераспределеннаяПрибыльВОбращении);
	МассивПассивныхСчетов.Добавить(ПланыСчетов.Хозрасчетный.НераспределеннаяПрибыльИспользованная);
	МассивПассивныхСчетов.Добавить(ПланыСчетов.Хозрасчетный.ЦелевоеФинансированиеИзБюджета);
	МассивПассивныхСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПрочееЦелевоеФинансированиеИПоступления);
	
	МассивАктивныхСчетов = Новый Массив;
	МассивАктивныхСчетов.Добавить(ПланыСчетов.Хозрасчетный.ЗаготовлениеИПриобретениеМатериалов);
	МассивАктивныхСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеТоваров);
	МассивАктивныхСчетов.Добавить(ПланыСчетов.Хозрасчетный.УбытокПодлежащийПокрытию);
	МассивАктивныхСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасходыНаКапитальныеВложения);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("МассивОпераций",        МассивОпераций);
	Запрос.УстановитьПараметр("МассивПассивныхСчетов", МассивПассивныхСчетов);
	Запрос.УстановитьПараметр("МассивАктивныхСчетов",  МассивАктивныхСчетов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВводНачальныхОстатковБухСправка.НомерСтроки,
	|	ВводНачальныхОстатковБухСправка.СчетУчета,
	|	ВводНачальныхОстатковБухСправка.Сумма,
	|	ВводНачальныхОстатковБухСправка.СуммаКт,
	|	ВводНачальныхОстатковБухСправка.Ссылка
	|ИЗ
	|	Документ.ВводНачальныхОстатков.БухСправка КАК ВводНачальныхОстатковБухСправка
	|ГДЕ
	|	ВводНачальныхОстатковБухСправка.Ссылка.РазделУчета В(&МассивОпераций)
	|	И ((ВводНачальныхОстатковБухСправка.СчетУчета В (&МассивПассивныхСчетов)
	|				И ВводНачальныхОстатковБухСправка.Сумма <> 0)
	|			ИЛИ (ВводНачальныхОстатковБухСправка.СчетУчета В (&МассивАктивныхСчетов)
	|				И ВводНачальныхОстатковБухСправка.СуммаКт <> 0))";
	
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	НачатьТранзакцию();
	
	ТаблицаДокументов = Результат.Скопировать();
	ТаблицаДокументов.Свернуть("Ссылка","");
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаДокументов Цикл
		СтруктураОтбора = Новый Структура("Ссылка", СтрокаТаблицы.Ссылка);		
		МассивСтрок = Результат.НайтиСтроки(СтруктураОтбора);
		
		Попытка
			
			ДокументОбъект = СтрокаТаблицы.Ссылка.ПолучитьОбъект();
			ТабличнаяЧасть = ДокументОбъект.БухСправка;
			
			Для Каждого СтрокаМассива ИЗ МассивСтрок Цикл
				
				СтрокаТабличнойЧасти = ТабличнаяЧасть[СтрокаМассива.НомерСтроки-1];
				Если СтрокаТабличнойЧасти.Сумма <> 0 Тогда
					СтрокаТабличнойЧасти.СуммаКт = - СтрокаТабличнойЧасти.Сумма;
					СтрокаТабличнойЧасти.Сумма = 0;
				ИначеЕсли СтрокаТабличнойЧасти.СуммаКт <> 0 Тогда
					СтрокаТабличнойЧасти.Сумма = - СтрокаТабличнойЧасти.СуммаКт;
					СтрокаТабличнойЧасти.СуммаКт = 0;
				КонецЕсли;
				
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Проверка срока действия патентов, патенты по упрощенной системе налогообложения со сроком действия,
// истекающим после 01.01.2013 г., действуют только до конца 2012 г.
// 
Процедура ОграничитьСрокиДействияПатентовУСН() Экспорт
	
	ДатаНачалаДействияПатентнойСистемы	= УчетУСН.ДатаНачалаДействияПатентнойСистемы();
	
	Запрос	= Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачалаДействияПатентнойСистемы", ДатаНачалаДействияПатентнойСистемы);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Патенты.Ссылка
	|ИЗ
	|	Справочник.Патенты КАК Патенты
	|ГДЕ
	|	НЕ Патенты.ПометкаУдаления
	|	И Патенты.ДатаНачала < &ДатаНачалаДействияПатентнойСистемы
	|	И Патенты.ДатаОкончания >= &ДатаНачалаДействияПатентнойСистемы";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Патент = Выборка.Ссылка.ПолучитьОбъект();
		Патент.ДатаОкончания = ДатаНачалаДействияПатентнойСистемы - 1;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Патент);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьИспользоватьСтатьиДвиженияДенежныхСредств() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	СчетКасса = ПланыСчетов.Хозрасчетный.Касса;
	ИспользоватьСтатьиДвиженияДенежныхСредств = НЕ (СчетКасса.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств, "ВидСубконто") = Неопределено);
	Константы.ИспользоватьСтатьиДвиженияДенежныхСредств.Установить(ИспользоватьСтатьиДвиженияДенежныхСредств);
	
КонецПроцедуры

// Удаляет субконто "ДокументыРасчетовСКонтрагентами" со счета 76.НА
Процедура УдалениеСубконтоДокументыРасчетовСчет_76_НА() Экспорт
	
	СчетОбъект = ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента.ПолучитьОбъект();
	СтрокаДокументыРачетов = СчетОбъект.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами, "ВидСубконто");
	
	Если СтрокаДокументыРачетов <> Неопределено Тогда
		СчетОбъект.ВидыСубконто.Удалить(СтрокаДокументыРачетов);
		РегистрироватьНаУзлахПлановОбмена = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СчетОбъект, РегистрироватьНаУзлахПлановОбмена);
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьДублиПоВзаиморасчетамССотрудниками() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписаниеСРасчетногоСчетаПеречислениеЗаработнойПлаты.Ведомость КАК Ссылка
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета.ПеречислениеЗаработнойПлаты КАК СписаниеСРасчетногоСчетаПеречислениеЗаработнойПлаты
	|ГДЕ
	|	СписаниеСРасчетногоСчетаПеречислениеЗаработнойПлаты.УдалитьВедомость <> ЗНАЧЕНИЕ(Документ.ВедомостьНаВыплатуЗарплаты.ПустаяСсылка)
	|	И СписаниеСРасчетногоСчетаПеречислениеЗаработнойПлаты.Ведомость ССЫЛКА Документ.ВедомостьНаВыплатуЗарплатыВБанк
	|	И СписаниеСРасчетногоСчетаПеречислениеЗаработнойПлаты.Ведомость <> ЗНАЧЕНИЕ(Документ.ВедомостьНаВыплатуЗарплатыВБанк.ПустаяСсылка)
	|	И СписаниеСРасчетногоСчетаПеречислениеЗаработнойПлаты.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК РасходныйКассовыйОрдерВыплатаЗаработнойПлаты
	|ГДЕ
	|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.УдалитьВедомость <> ЗНАЧЕНИЕ(Документ.ВедомостьНаВыплатуЗарплаты.ПустаяСсылка)
	|	И РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость ССЫЛКА Документ.ВедомостьНаВыплатуЗарплатыВКассу
	|	И РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость <> ЗНАЧЕНИЕ(Документ.ВедомостьНаВыплатуЗарплатыВКассу.ПустаяСсылка)
	|	И РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасходныйКассовыйОрдер.Ссылка
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.УдалитьПлатежнаяВедомость <> ЗНАЧЕНИЕ(Документ.ВедомостьНаВыплатуЗарплаты.ПустаяСсылка)
	|	И РасходныйКассовыйОрдер.ПлатежнаяВедомость ССЫЛКА Документ.ВедомостьНаВыплатуЗарплатыВКассу
	|	И РасходныйКассовыйОрдер.ПлатежнаяВедомость <> ЗНАЧЕНИЕ(Документ.ВедомостьНаВыплатуЗарплатыВКассу.ПустаяСсылка)
	|	И РасходныйКассовыйОрдер.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗарплатаКВыплатеОперациями.Организация,
	|	ЗарплатаКВыплатеОперациями.ФизическоеЛицо,
	|	ЗарплатаКВыплатеОперациями.Период,
	|	ЗарплатаКВыплатеОперациями.Регистратор КАК Регистратор,
	|	ЗарплатаКВыплатеОперациями.НомерСтроки КАК НомерСтроки,
	|	""ЗарплатаКВыплате"" КАК ИмяРегистра
	|ИЗ
	|	РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплатеПоВедомостям
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
	|		ПО ЗарплатаКВыплатеПоВедомостям.Регистратор = Регистраторы.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплатеОперациями
	|		ПО ЗарплатаКВыплатеПоВедомостям.Период = ЗарплатаКВыплатеОперациями.Период
	|			И ЗарплатаКВыплатеПоВедомостям.ВидДвижения = ЗарплатаКВыплатеОперациями.ВидДвижения
	|			И ЗарплатаКВыплатеПоВедомостям.Организация = ЗарплатаКВыплатеОперациями.Организация
	|			И ЗарплатаКВыплатеПоВедомостям.ФизическоеЛицо = ЗарплатаКВыплатеОперациями.ФизическоеЛицо
	|			И ЗарплатаКВыплатеПоВедомостям.Сотрудник = ЗарплатаКВыплатеОперациями.Сотрудник
	|			И ЗарплатаКВыплатеПоВедомостям.Подразделение = ЗарплатаКВыплатеОперациями.Подразделение
	|			И ЗарплатаКВыплатеПоВедомостям.ПериодВзаиморасчетов = ЗарплатаКВыплатеОперациями.ПериодВзаиморасчетов
	|			И ЗарплатаКВыплатеПоВедомостям.СтатьяФинансирования = ЗарплатаКВыплатеОперациями.СтатьяФинансирования
	|			И ЗарплатаКВыплатеПоВедомостям.СтатьяРасходов = ЗарплатаКВыплатеОперациями.СтатьяРасходов
	|			И ЗарплатаКВыплатеПоВедомостям.ДокументОснование = ЗарплатаКВыплатеОперациями.ДокументОснование
	|			И (ЗарплатаКВыплатеОперациями.Регистратор ССЫЛКА Документ.ОперацияБух)
	|			И ЗарплатаКВыплатеПоВедомостям.СуммаКВыплате = ЗарплатаКВыплатеОперациями.СуммаКВыплате
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВзаиморасчетыПоОперациям.Организация,
	|	ВзаиморасчетыПоОперациям.ФизическоеЛицо,
	|	ВзаиморасчетыПоОперациям.Период,
	|	ВзаиморасчетыПоОперациям.Регистратор,
	|	ВзаиморасчетыПоОперациям.НомерСтроки,
	|	""ВзаиморасчетыССотрудниками""
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыССотрудниками КАК ВзаиморасчетыПоВедомостям
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
	|		ПО ВзаиморасчетыПоВедомостям.Регистратор = Регистраторы.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыССотрудниками КАК ВзаиморасчетыПоОперациям
	|		ПО ВзаиморасчетыПоВедомостям.Период = ВзаиморасчетыПоОперациям.Период
	|			И ВзаиморасчетыПоВедомостям.ВидДвижения = ВзаиморасчетыПоОперациям.ВидДвижения
	|			И ВзаиморасчетыПоВедомостям.Организация = ВзаиморасчетыПоОперациям.Организация
	|			И ВзаиморасчетыПоВедомостям.ФизическоеЛицо = ВзаиморасчетыПоОперациям.ФизическоеЛицо
	|			И ВзаиморасчетыПоВедомостям.Сотрудник = ВзаиморасчетыПоОперациям.Сотрудник
	|			И ВзаиморасчетыПоВедомостям.Подразделение = ВзаиморасчетыПоОперациям.Подразделение
	|			И ВзаиморасчетыПоВедомостям.СуммаВзаиморасчетов = ВзаиморасчетыПоОперациям.СуммаВзаиморасчетов
	|			И ВзаиморасчетыПоВедомостям.ВидВзаиморасчетов = ВзаиморасчетыПоОперациям.ВидВзаиморасчетов
	|			И ВзаиморасчетыПоВедомостям.ГруппаНачисленияУдержанияВыплаты = ВзаиморасчетыПоОперациям.ГруппаНачисленияУдержанияВыплаты
	|			И (ВзаиморасчетыПоОперациям.Регистратор ССЫЛКА Документ.ОперацияБух)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	ИмяРегистра,
	|	НомерСтроки УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		РегистраторОбъект = Выборка.Регистратор.ПолучитьОбъект();
		
		Пока Выборка.СледующийПоЗначениюПоля("ИмяРегистра") Цикл
			НаборЗаписей  = РегистраторОбъект.Движения[Выборка.ИмяРегистра];
			НаборЗаписей.Прочитать();
			НаборЗаписей.Записывать = Истина;
			
			Пока Выборка.Следующий() Цикл
				НаборЗаписей.Удалить(Выборка.НомерСтроки - 1);
			КонецЦикла;
			
		КонецЦикла;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(РегистраторОбъект);
	КонецЦикла;
	
КонецПроцедуры

//Устанавливает значение ПорядокПризнанияДопРасходов в записях учетной политики
Процедура УстановитьПорядокПризнанияДопРасходов() Экспорт
	
	НаборЗаписей	= РегистрыСведений.УчетнаяПолитикаОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();

	Для каждого Запись Из НаборЗаписей Цикл
		
		Если НЕ ЗначениеЗаполнено(Запись.ПорядокПризнанияДопРасходов) Тогда
			Запись.ПорядокПризнанияДопРасходов = Перечисления.ПорядокПризнанияДопРасходов.ВключатьВСтоимость;
		КонецЕсли;
				
	КонецЦикла;
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
		ТекстСообщения	= НСтр("ru = 'Не выполнено обновление записей регистра сведений ""Учетная политика""'");
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

Процедура ВыполнитьКонвертациюСчетовФактур() Экспорт
	
	МассивДокументовСДаннымиСФ = ПолучитьИменаКонвертируемыхДокументов();
	
	ТекстЗапросаПоДокументамСДаннымиСФ =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетаФактурыДокументыОснования.ДокументОснование КАК ДокументОснование,
	|	СчетаФактурыДокументыОснования.Ссылка.ПометкаУдаления КАК ПометкаУдаления
	|ПОМЕСТИТЬ СчетаФактурыДокументыОснования
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетаФактурыДокументыОснования
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОснование,
	|	ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументСДаннымиСФ.Ссылка,
	|	ДокументСДаннымиСФ.ПрямаяЗаписьВКнигу КАК НДСПредъявленКВычету,
	|	ДокументСДаннымиСФ.УдалитьНомерВходящегоСчетаФактуры КАК НомерВходящегоДокумента,
	|	ДокументСДаннымиСФ.УдалитьДатаВходящегоСчетаФактуры КАК ДатаВходящегоДокумента,
	|	ДокументСДаннымиСФ.НДСВключенВСтоимость КАК НДСВключенВСтоимость,
	|	ВЫБОР
	|		КОГДА ДокументСДаннымиСФ.Дата < ДАТАВРЕМЯ(2012, 1, 1)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УпрощенныйУчет,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактур.Регистратор ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьЗаписиЖурналаУчетаСФ
	|ИЗ
	|	Документ.ОтражениеНДСКВычету КАК ДокументСДаннымиСФ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналУчетаСчетовФактур КАК ЖурналУчетаСчетовФактур
	|		ПО ДокументСДаннымиСФ.Ссылка = ЖурналУчетаСчетовФактур.Регистратор
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаФактурыДокументыОснования КАК СчетФактураПолученныйДокументыОснования
	|		ПО ДокументСДаннымиСФ.Ссылка = СчетФактураПолученныйДокументыОснования.ДокументОснование
	|			И ДокументСДаннымиСФ.ПометкаУдаления = СчетФактураПолученныйДокументыОснования.ПометкаУдаления
	|ГДЕ
	|	ДокументСДаннымиСФ.УдалитьПредъявленСчетФактура
	|	И СчетФактураПолученныйДокументыОснования.ДокументОснование ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументСДаннымиСФ.Ссылка,
	|	ДокументСДаннымиСФ.УдалитьНДСПредъявленКВычету,
	|	ДокументСДаннымиСФ.УдалитьНомерВходящегоСчетаФактуры,
	|	ДокументСДаннымиСФ.УдалитьДатаВходящегоСчетаФактуры,
	|	ЛОЖЬ,
	|	ВЫБОР
	|		КОГДА ДокументСДаннымиСФ.Дата < ДАТАВРЕМЯ(2012, 1, 1)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактур.Регистратор ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК ДокументСДаннымиСФ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналУчетаСчетовФактур КАК ЖурналУчетаСчетовФактур
	|		ПО ДокументСДаннымиСФ.Ссылка = ЖурналУчетаСчетовФактур.Регистратор
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаФактурыДокументыОснования КАК СчетФактураПолученныйДокументыОснования
	|		ПО ДокументСДаннымиСФ.Ссылка = СчетФактураПолученныйДокументыОснования.ДокументОснование
	|			И ДокументСДаннымиСФ.ПометкаУдаления = СчетФактураПолученныйДокументыОснования.ПометкаУдаления
	|ГДЕ
	|	ДокументСДаннымиСФ.УдалитьПредъявленСчетФактура
	|	И СчетФактураПолученныйДокументыОснования.ДокументОснование ЕСТЬ NULL ";
		
	Если МассивДокументовСДаннымиСФ.Количество() > 0 Тогда
				
		Для Каждого ИмяДокумента Из МассивДокументовСДаннымиСФ Цикл
			ТекстЗапросаПоДокументамСДаннымиСФ = ТекстЗапросаПоДокументамСДаннымиСФ + 
			    "
				|ОБЪЕДИНИТЬ ВСЕ 
				|
				|ВЫБРАТЬ
		        |	ДокументСДаннымиСФ.Ссылка,
				|	ДокументСДаннымиСФ.УдалитьНДСПредъявленКВычету,
		        |	ДокументСДаннымиСФ.УдалитьНомерВходящегоСчетаФактуры,
		        |	ДокументСДаннымиСФ.УдалитьДатаВходящегоСчетаФактуры,
				|	ДокументСДаннымиСФ.НДСВключенВСтоимость,
				|	ВЫБОР
				|		КОГДА ДокументСДаннымиСФ.Дата < ДАТАВРЕМЯ(2012, 1, 1)
				|			ТОГДА ИСТИНА
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ,
				|	ВЫБОР
				|		КОГДА ЖурналУчетаСчетовФактур.Регистратор ЕСТЬ НЕ NULL 
				|			ТОГДА ИСТИНА
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ
				|ИЗ
		        |	Документ." + ИмяДокумента + " КАК ДокументСДаннымиСФ
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналУчетаСчетовФактур КАК ЖурналУчетаСчетовФактур
				|		ПО ДокументСДаннымиСФ.Ссылка = ЖурналУчетаСчетовФактур.Регистратор
				|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаФактурыДокументыОснования КАК СчетФактураПолученныйДокументыОснования
				|		ПО ДокументСДаннымиСФ.Ссылка = СчетФактураПолученныйДокументыОснования.ДокументОснование
				|			И ДокументСДаннымиСФ.ПометкаУдаления = СчетФактураПолученныйДокументыОснования.ПометкаУдаления
				|ГДЕ
		        |	ДокументСДаннымиСФ.УдалитьПредъявленСчетФактура
				|	И СчетФактураПолученныйДокументыОснования.ДокументОснование ЕСТЬ NULL";

		КонецЦикла;
           	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПоДокументамСДаннымиСФ;
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
	
	Реквизиты = Новый Структура("НДСПредъявленКВычету, НДСВключенВСтоимость, НомерВходящегоДокумента, ДатаВходящегоДокумента, ЕстьЗаписиЖурналаУчетаСФ, УпрощенныйУчет");
	
	ИмяСобытияЖурналаРегистрации = НСтр("ru = 'Конвертация счетов-фактур'");
	
	Для каждого СтрокаТаблицы Из ТаблицаДокументов Цикл
		
		НачатьТранзакцию();
        			
		Основание = СтрокаТаблицы.Ссылка;
		ЗаполнитьЗначенияСвойств(Реквизиты, СтрокаТаблицы);
		СтруктураТаблицДвижений = Новый Структура;
				
		Попытка
		
			ЗаписатьОснование(Основание, Реквизиты, СтруктураТаблицДвижений);
			
		Исключение
		
			ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки);
		    ОтменитьТранзакцию();
			
			ВызватьИсключение ОписаниеОшибки;
	
		КонецПопытки;	
			
		// Создание документа "Счет-фактура полученный"
		СчетФактураМенеджер = Документы.СчетФактураПолученный;
		СчетФактура = СчетФактураМенеджер.СоздатьДокумент();
		
		НоваяСтрока = СчетФактура.ДокументыОснования.Добавить();
		НоваяСтрока.ДокументОснование = Основание;
		
		ЗаполнитьЗначенияСвойств(СчетФактура, Реквизиты);
		
		Если СтрокаТаблицы.УпрощенныйУчет Тогда
			СчетФактура.НДСПредъявленКВычету = Ложь;
		Иначе	
			Если ТипЗнч(Основание) = Тип("ДокументОбъект.ОтражениеНДСКВычету")
				ИЛИ Реквизиты.НДСВключенВСтоимость Тогда
				СчетФактура.НДСПредъявленКВычету = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		СчетФактура.Дата 			= Основание.Дата;
		СчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаПоступление;
		СчетФактура.Ответственный   = Пользователи.ТекущийПользователь();
		СчетФактура.ПометкаУдаления = Основание.ПометкаУдаления;
								
		СчетФактура.ОпределениеПараметровСчетаФактуры();
		СчетФактура.КодСпособаПолучения = 1;
		СчетФактура.Комментарий = "## Создан на основании: " + Основание + " ##";
		СчетФактура.УстановитьНовыйНомер();
		
		Попытка
			
			СчетФактура.ОбменДанными.Загрузка = Истина;
			СчетФактура.Проведен = Основание.Проведен;
			СчетФактура.Записать();
			
			Если СтруктураТаблицДвижений.Количество() > 0 Тогда
				
				Если СтруктураТаблицДвижений.Свойство("ЖурналУчетаСчетовФактур") Тогда
					
					ТаблицаЖурналУчетаСчетовФактур = СтруктураТаблицДвижений.ЖурналУчетаСчетовФактур;
					ТаблицаЖурналУчетаСчетовФактур.ЗаполнитьЗначения(СчетФактура.Ссылка, "СчетФактура"); 
				
				КонецЕсли; 
				
				Движения = СчетФактура.Движения;
				
				Для каждого Движение Из Движения Цикл
					
					ИмяРегистра = Движение.Метаданные().Имя;
					Если СтруктураТаблицДвижений.Свойство(ИмяРегистра) Тогда
						Если СчетФактура.НДСПредъявленКВычету ИЛИ ИмяРегистра = "ЖурналУчетаСчетовФактур" Тогда
							Движение.Загрузить(СтруктураТаблицДвижений[ИмяРегистра]);
							Движение.Записывать = Истина;
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла; 
				
				Движения.Записать();
				
			КонецЕсли; 
						
			
			            			
		Исключение
		
			ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки);
		    ОтменитьТранзакцию();
			
			ВызватьИсключение ОписаниеОшибки;
	
		КонецПопытки;
				
		Если СтрокаТаблицы.УпрощенныйУчет 
			И ТипЗнч(Основание) <> Тип("ДокументОбъект.ОтражениеНДСКВычету") Тогда
			Если Реквизиты.НДСПредъявленКВычету И НЕ СтрокаТаблицы.НДСВключенВСтоимость Тогда
				
				// Создание документа "Отражение НДС к вычету"
				ОтражениеНДСКВычетуМенеджер = Документы.ОтражениеНДСКВычету;
				ОтражениеНДС = ОтражениеНДСКВычетуМенеджер.СоздатьДокумент();
							
				ОтражениеНДС.ПрямаяЗаписьВКнигу = Истина;
				ОтражениеНДС.ИспользоватьДокументРасчетовКакСчетФактуру = Истина;
				ОтражениеНДС.ФормироватьПроводки = Истина;
				
				ОтражениеНДС.РасчетныйДокумент = Основание;
				ЗаполнениеДокументов.ЗаполнитьПоОснованию(ОтражениеНДС, Основание);
				ОтражениеНДС.ЗаполнитьПоРасчетномуДокументу(Ложь);
		        ЗаполнениеДокументов.Заполнить(ОтражениеНДС, Основание);
				
				ОтражениеНДС.Дата = Основание.Дата;
				ОтражениеНДС.Комментарий = "## Создан на основании: " + Основание + " ##";
				ОтражениеНДС.УстановитьНовыйНомер();
				
				Попытка
					
					ОтражениеНДС.ОбменДанными.Загрузка = Истина;
					ОтражениеНДС.Проведен = Основание.Проведен;
					ОтражениеНДС.Записать();					
					
					Если СтруктураТаблицДвижений.Количество() > 0 Тогда
					
						Движения = ОтражениеНДС.Движения;
						
						Для каждого Движение Из Движения Цикл
							
							ИмяРегистра = Движение.Метаданные().Имя;
							
							Если СтруктураТаблицДвижений.Свойство(ИмяРегистра) Тогда
								Если ИмяРегистра = "Хозрасчетный" ИЛИ ИмяРегистра = "НДСЗаписиКнигиПокупок" Тогда
									Движение.Загрузить(СтруктураТаблицДвижений[ИмяРегистра]);
									Движение.Записывать = Истина;
								КонецЕсли;
							КонецЕсли;
							
						КонецЦикла; 
						
	                    Движения.Записать();
						
					КонецЕсли;	
					
				Исключение
					
					ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки);
					ОтменитьТранзакцию();
					
					ВызватьИсключение ОписаниеОшибки;
					
				КонецПопытки;	
				
			КонецЕсли;	
		КонецЕсли;

		ЗафиксироватьТранзакцию();
        			
	КонецЦикла;
	
КонецПроцедуры	

Функция ПолучитьИменаКонвертируемыхДокументов()

	ИменаДокументов = Новый Массив;
	Для Каждого Документ Из Метаданные.Документы Цикл
				
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("УдалитьПредъявленСчетФактура", Документ)
			И ОбщегоНазначения.ЕстьРеквизитОбъекта("УдалитьНДСПредъявленКВычету", Документ) Тогда
			
			ТипДанных = Тип("ДокументСсылка." + Документ.Имя);
			
			Если ТипДанных <> Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")
				И ТипДанных <> Тип("ДокументСсылка.ОтражениеНДСКВычету") Тогда
				ИменаДокументов.Добавить(Документ.Имя);		
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;

	Возврат ИменаДокументов;

КонецФункции

Процедура ЗаписатьОснование(Основание, Реквизиты, СтруктураТаблицДвижений)
	
	Если НЕ Основание.Проведен Тогда
		Возврат;
	КонецЕсли;	
			
	// Очистка движений
	Если Реквизиты.НДСПредъявленКВычету 
		И ТипЗнч(Основание) <> Тип("ДокументОбъект.ОтражениеНДСКВычету") Тогда

		Если НЕ Реквизиты.УпрощенныйУчет Тогда 
			
			// Регистр "НДС предъявленный"
			НаборНДСПредъявленный = РегистрыНакопления.НДСПредъявленный.СоздатьНаборЗаписей();
			НаборНДСПредъявленный.Отбор.Регистратор.Установить(Основание);
			НаборНДСПредъявленный.Прочитать();
			
			ТаблицаНДСПредъявленныйСчетФактура = НаборНДСПредъявленный.ВыгрузитьКолонки();
			ТаблицаНДСПредъявленныйОснование = НаборНДСПредъявленный.ВыгрузитьКолонки();
									
			Для каждого СтрокаНабора Из НаборНДСПредъявленный Цикл
				
				Если СтрокаНабора.ВидДвижения = ВидДвиженияНакопления.Расход 
					И СтрокаНабора.Событие = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком Тогда
					
					СтрокаДвиженийСчетаФактуры = ТаблицаНДСПредъявленныйСчетФактура.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаДвиженийСчетаФактуры, СтрокаНабора); 
					
				Иначе
					СтрокаДвиженийОснования = ТаблицаНДСПредъявленныйОснование.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаДвиженийОснования, СтрокаНабора); 
				КонецЕсли;	
				
			КонецЦикла;
				
			Если ТаблицаНДСПредъявленныйСчетФактура.Количество() > 0 Тогда
				НаборНДСПредъявленный.Загрузить(ТаблицаНДСПредъявленныйОснование);
				НаборНДСПредъявленный.Записать();
				СтруктураТаблицДвижений.Вставить("НДСПредъявленный", ТаблицаНДСПредъявленныйСчетФактура);
			КонецЕсли;
			
		КонецЕсли;	
		
		Если Реквизиты.ЕстьЗаписиЖурналаУчетаСФ Тогда
			// Регистр "Журнал учета счетов-фактур"
			НаборЖурналСчетовФактур = РегистрыСведений.ЖурналУчетаСчетовФактур.СоздатьНаборЗаписей();
			НаборЖурналСчетовФактур.Отбор.Регистратор.Установить(Основание);
			НаборЖурналСчетовФактур.Прочитать();
			
			СтруктураТаблицДвижений.Вставить("ЖурналУчетаСчетовФактур", НаборЖурналСчетовФактур.Выгрузить());
			НаборЖурналСчетовФактур.Очистить();
			НаборЖурналСчетовФактур.Записать();
		КонецЕсли;	
			      		
		// Регистр "НДС покупки"
		НаборНДСПокупки = РегистрыНакопления.НДСЗаписиКнигиПокупок.СоздатьНаборЗаписей();
		НаборНДСПокупки.Отбор.Регистратор.Установить(Основание);
		НаборНДСПокупки.Прочитать();
		
		СтруктураТаблицДвижений.Вставить("НДСЗаписиКнигиПокупок", НаборНДСПокупки.Выгрузить());
		НаборНДСПокупки.Очистить();
		НаборНДСПокупки.Записать();
		
		// Проводки Дт 68.02 Кт 19.**
		НаборХозрасчетный = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
		НаборХозрасчетный.Отбор.Регистратор.Установить(Основание);
		НаборХозрасчетный.Прочитать();
		
		НаборХозрасчетныйТаблица = НаборХозрасчетный.Выгрузить();
		
		ТаблицаХозрасчетныйОснование = НаборХозрасчетный.ВыгрузитьКолонки();
		ТаблицаХозрасчетныйСчетФактура = НаборХозрасчетный.ВыгрузитьКолонки();
		
		Для каждого СтрокаНабора Из НаборХозрасчетныйТаблица Цикл
		
			Если СтрокаНабора.СчетДт = ПланыСчетов.Хозрасчетный.НДС Тогда
				СтрокаДвиженийСчетаФактуры = ТаблицаХозрасчетныйСчетФактура.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвиженийСчетаФактуры, СтрокаНабора);
            Иначе 
				СтрокаДвиженийОснования = ТаблицаХозрасчетныйОснование.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвиженийОснования, СтрокаНабора);
            КонецЕсли;
			
		КонецЦикла;	
		
		Если ТаблицаХозрасчетныйСчетФактура.Количество() > 0 Тогда
			НаборХозрасчетный.Загрузить(ТаблицаХозрасчетныйОснование);
			НаборХозрасчетный.Записать();
			СтруктураТаблицДвижений.Вставить("Хозрасчетный", ТаблицаХозрасчетныйСчетФактура);
		КонецЕсли;
		
	Иначе
		Если Реквизиты.ЕстьЗаписиЖурналаУчетаСФ Тогда
			// Регистр "Журнал учета счетов-фактур"
			НаборЖурналСчетовФактур = РегистрыСведений.ЖурналУчетаСчетовФактур.СоздатьНаборЗаписей();
			НаборЖурналСчетовФактур.Отбор.Регистратор.Установить(Основание);
			НаборЖурналСчетовФактур.Прочитать();
			
			СтруктураТаблицДвижений.Вставить("ЖурналУчетаСчетовФактур", НаборЖурналСчетовФактур.Выгрузить());
			НаборЖурналСчетовФактур.Очистить();
			НаборЖурналСчетовФактур.Записать();
		КонецЕсли;	
	КонецЕсли;	
		    	
КонецПроцедуры	

Процедура ОбновитьВидКИТелефонаПользователя() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	ТипКИ = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Справочники.ВидыКонтактнойИнформации.ТелефонПользователя, "Тип");
	Если НЕ ЗначениеЗаполнено(ТипКИ) Тогда
		
		ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
								Перечисления.ТипыКонтактнойИнформации.Телефон);
		ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ТелефонПользователя;
		ПараметрыВида.Подсказка                         = НСтр("ru='Контактный телефон пользователя'");
		ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
		ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
		ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
		ПараметрыВида.Порядок                           = 2;
		ПараметрыВида.РазрешитьВводНесколькихЗначений   = Истина;
		
		УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьФорматСохраненияРегистровУчета() Экспорт
	
	Если НЕ ЗначениеЗаполнено(Константы.ФорматСохраненияРегистровУчета.Получить()) Тогда
		Константы.ФорматСохраненияРегистровУчета.Установить(Перечисления.ФорматыСохраненияОтчетов.PDF);
	КонецЕсли;
	
КонецПроцедуры

// Заполнение коснтант, определяющих поведение программы
// в зависимости от типа поставки. Вызывается при обновлении и
// при переходе с другой версии продукта.
//
Процедура ЗаполнениеКонстантТипаПоставки() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЭтоБазоваяВерсияКонфигурации = СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации();
	
	ОсновнойВидОрганизации = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	
	Если ЭтоБазоваяВерсияКонфигурации Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Организации.ЮридическоеФизическоеЛицо КАК ВидОрганизации
			|ИЗ
			|	Справочник.Организации КАК Организации";
			
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ОсновнойВидОрганизации = Выборка.ВидОрганизации;
		КонецЕсли;
		
	КонецЕсли;
	
	ИспользуетсяОСНО = Константы.ИспользуетсяОСНО.Получить();
	ИспользуетсяУСН  = Константы.ИспользуетсяУСН.Получить();
	ИспользуетсяОсобыйПорядок = Константы.ИспользуетсяЕНВД.Получить()
		ИЛИ Константы.ИспользуетсяУСНПатент.Получить();
	
	Если ОсновнойВидОрганизации = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо
		И НЕ ИспользуетсяОСНО И НЕ ИспользуетсяУСН И ИспользуетсяОсобыйПорядок Тогда
		ОсновнаяСистемаНалогообложения = Перечисления.СистемыНалогообложения.ОсобыйПорядок;
	ИначеЕсли НЕ ИспользуетсяОСНО И ИспользуетсяУСН Тогда
		ОсновнаяСистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная;
	Иначе
		ОсновнаяСистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая;
	КонецЕсли;
	
	Константы.ВестиУчетПоОрганизациям.Установить(НЕ ЭтоБазоваяВерсияКонфигурации);
	Константы.ОсновнойВидОрганизации.Установить(ОсновнойВидОрганизации);
	Константы.ОсновнаяСистемаНалогообложения.Установить(ОсновнаяСистемаНалогообложения);
	
КонецПроцедуры

Процедура УстановитьИспользованиеДополнительныхОтчетовИОбработок() Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("РаботаВЛокальномРежиме") Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДополнительныеОтчетыИОбработки.Ссылка
		|ИЗ
		|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки";
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой()
			И ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеОтчетыИОбработки") Тогда
			
			Константы.ИспользоватьДополнительныеОтчетыИОбработки.Установить(Ложь);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьИспользованиеУведомленияОКонтролируемыхСделках() Экспорт
	
	Константы.ИспользоватьУведомленияОКонтролируемыхСделках.Установить(Истина);
	
КонецПроцедуры

Процедура ОбновитьВидыЭлектронныхДокументов_3_0_36() Экспорт
	
	ОбновлениеИнформационнойБазыЭД.ОбновитьНастройкиЭДО(Перечисления.ВидыЭД.АктНаПередачуПрав);
	
КонецПроцедуры

Процедура ОбновитьВидыЭлектронныхДокументов_3_0_39() Экспорт
	
	ОбновлениеИнформационнойБазыЭД.ОбновитьНастройкиЭДО(Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара);
	
КонецПроцедуры

Процедура УстановитьКонстантыВестиУчетПоОрганизациям() Экспорт
	
	РежимТакси = Константы.ИнтерфейсТакси.Получить();
	ЭтоБазоваяВерсияКонфигурации = СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации();
	
	ВестиУчетПоОрганизациям = Константы.ВестиУчетПоОрганизациям.СоздатьМенеджерЗначения();
	ВестиУчетПоОрганизациям.Значение = НЕ ЭтоБазоваяВерсияКонфигурации И РежимТакси;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ВестиУчетПоОрганизациям); 
	
	ВестиУчетПоОрганизациям82 = Константы.ВестиУчетПоОрганизациям82.СоздатьМенеджерЗначения();
	ВестиУчетПоОрганизациям82.Значение = НЕ ЭтоБазоваяВерсияКонфигурации И НЕ РежимТакси;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ВестиУчетПоОрганизациям82); 
	
КонецПроцедуры	

Процедура МониторРуководителяУстановитьНастройкиПоУмолчанию() Экспорт
	
	Отбор = Новый Структура;
	Отбор.Вставить("КлючОбъекта" , "МониторРуководителя");
	Отбор.Вставить("КлючНастроек", "СписокРазделовМонитораРуководителя");
	
	СписокРазделовИзНастроек = ХранилищеОбщихНастроек.Выбрать(Отбор);
	
	ДобавляемыйРаздел = Перечисления.РазделыМонитораРуководителя.НеоплаченныеСчетаПокупателям;
	РазделЗадолженностьПокупателей = Перечисления.РазделыМонитораРуководителя.ЗадолженностьПокупателей;
	
	Пока СписокРазделовИзНастроек.Следующий() Цикл
		Пользователь = СписокРазделовИзНастроек.Пользователь;
		СписокРазделов = СписокРазделовИзНастроек.Настройки;
		Если ЗначениеЗаполнено(СписокРазделов) Тогда
			СписокСодержитРаздел = СписокРазделов.НайтиПоЗначению(ДобавляемыйРаздел);
			Если СписокСодержитРаздел = Неопределено Тогда
				РазделСпискаЗадолженностьПокупателя = СписокРазделов.НайтиПоЗначению(РазделЗадолженностьПокупателей);
				ИндексРазделаЗадолженностьПокупателя = СписокРазделов.Индекс(РазделСпискаЗадолженностьПокупателя);
				Если ИндексРазделаЗадолженностьПокупателя = Неопределено Тогда
					ИндексРазделаЗадолженностьПокупателя = 0;
				КонецЕсли;
				СписокРазделов.Вставить(ИндексРазделаЗадолженностьПокупателя, ДобавляемыйРаздел, , Истина);
				ХранилищеОбщихНастроек.Сохранить("МониторРуководителя",
					"СписокРазделовМонитораРуководителя",
					СписокРазделов,
					"Настройка разделов монитора руководителя",
					Пользователь);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьКонстантыУчетаНДСспецРежимы() Экспорт
	
	Если Константы.ИспользуетсяОСНО.Получить() ИЛИ Константы.ИспользуетсяНДФЛИП.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СчетФактураВыданный.Ссылка
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный;
	|
	|//////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СчетФактураПолученный.Ссылка
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный;
	|
	|//////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	НДСЗаписиКнигиПродаж.Регистратор
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	НДСНачисленный.Регистратор
	|ИЗ
	|	РегистрНакопления.НДСНачисленный КАК НДСНачисленный
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.УчетАгентскогоНДС";
	
	НаборРезультатов = Запрос.ВыполнитьПакет();
	Если НЕ НаборРезультатов[0].Пустой() Тогда
		ВыписыватьСчетаФактурыСпецРежимы = Константы.ВыписыватьСчетаФактурыСпецРежимы.СоздатьМенеджерЗначения();
		ВыписыватьСчетаФактурыСпецРежимы.Значение = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ВыписыватьСчетаФактурыСпецРежимы);
	КонецЕсли;
	
	Если НЕ НаборРезультатов[1].Пустой() Тогда
		РегистрироватьСчетаФактурыСпецРежимы = Константы.РегистрироватьСчетаФактурыСпецРежимы.СоздатьМенеджерЗначения();
		РегистрироватьСчетаФактурыСпецРежимы.Значение = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(РегистрироватьСчетаФактурыСпецРежимы);
	КонецЕсли;
	
	Если НЕ НаборРезультатов[2].Пустой() Тогда
		УплачиватьНДСспецРежимы = Константы.УплачиватьНДСспецРежимы.СоздатьМенеджерЗначения();
		УплачиватьНДСспецРежимы.Значение = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(УплачиватьНДСспецРежимы);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИсториюРегистрацийВНалоговомОргане() Экспорт
	
	ДатаНачалаДействия = РегистрыСведений.ИсторияРегистрацийВНалоговомОргане.ДатаОтсчетаПериодическихСведений();
	
	// В запросе выбираем организации и подразделения, у которых на дату начала действия регистра
	// нет ни одной записи.
	// В качестве регистрации на начало действия используем либо первую запись в истории, 
	// а если записей в истории нет, то значение регистрации из справочника
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("ДатаНачалаДействия", ДатаНачалаДействия);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК СтруктурнаяЕдиница,
	|	Организации.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОрганеСправочника,
	|	Организации.Ссылка КАК Организация
	|ПОМЕСТИТЬ НезаполненнаяИстория
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияРегистрацийВНалоговомОргане КАК ИсторияРегистрацийВНалоговомОргане
	|		ПО Организации.Ссылка = ИсторияРегистрацийВНалоговомОргане.СтруктурнаяЕдиница
	|			И (ИсторияРегистрацийВНалоговомОргане.Период = &ДатаНачалаДействия)
	|ГДЕ
	|	Организации.РегистрацияВНалоговомОргане <> ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|	И ИсторияРегистрацийВНалоговомОргане.Период ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Ссылка,
	|	ПодразделенияОрганизаций.РегистрацияВНалоговомОргане,
	|	ПодразделенияОрганизаций.Владелец
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияРегистрацийВНалоговомОргане КАК ИсторияРегистрацийВНалоговомОргане
	|		ПО ПодразделенияОрганизаций.Ссылка = ИсторияРегистрацийВНалоговомОргане.СтруктурнаяЕдиница
	|			И (ИсторияРегистрацийВНалоговомОргане.Период = &ДатаНачалаДействия)
	|ГДЕ
	|	ПодразделенияОрганизаций.РегистрацияВНалоговомОргане <> ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|	И ИсторияРегистрацийВНалоговомОргане.Период ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НезаполненнаяИстория.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	НезаполненнаяИстория.РегистрацияВНалоговомОрганеСправочника,
	|	НезаполненнаяИстория.Организация,
	|	МИНИМУМ(ИсторияРегистрацийВНалоговомОргане.Период) КАК Период
	|ПОМЕСТИТЬ НезаполненнаяИсторияСПериодами
	|ИЗ
	|	НезаполненнаяИстория КАК НезаполненнаяИстория
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияРегистрацийВНалоговомОргане КАК ИсторияРегистрацийВНалоговомОргане
	|		ПО НезаполненнаяИстория.СтруктурнаяЕдиница = ИсторияРегистрацийВНалоговомОргане.СтруктурнаяЕдиница
	|
	|СГРУППИРОВАТЬ ПО
	|	НезаполненнаяИстория.СтруктурнаяЕдиница,
	|	НезаполненнаяИстория.РегистрацияВНалоговомОрганеСправочника,
	|	НезаполненнаяИстория.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтруктурнаяЕдиница,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НезаполненнаяИсторияСПериодами.СтруктурнаяЕдиница,
	|	НезаполненнаяИсторияСПериодами.Организация,
	|	ЕСТЬNULL(ИсторияРегистрацийВНалоговомОргане.РегистрацияВНалоговомОргане, НезаполненнаяИсторияСПериодами.РегистрацияВНалоговомОрганеСправочника) КАК РегистрацияВНалоговомОргане
	|ИЗ
	|	НезаполненнаяИсторияСПериодами КАК НезаполненнаяИсторияСПериодами
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияРегистрацийВНалоговомОргане КАК ИсторияРегистрацийВНалоговомОргане
	|		ПО НезаполненнаяИсторияСПериодами.СтруктурнаяЕдиница = ИсторияРегистрацийВНалоговомОргане.СтруктурнаяЕдиница
	|			И НезаполненнаяИсторияСПериодами.Период = ИсторияРегистрацийВНалоговомОргане.Период";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ИсторияРегистраций = РегистрыСведений.ИсторияРегистрацийВНалоговомОргане.СоздатьНаборЗаписей();
		ИсторияРегистраций.Отбор.СтруктурнаяЕдиница.Установить(Выборка.СтруктурнаяЕдиница);
		ИсторияРегистраций.Прочитать();
		НоваяЗапись = ИсторияРегистраций.Добавить();
		НоваяЗапись.Период = ДатаНачалаДействия;
		НоваяЗапись.СтруктурнаяЕдиница = Выборка.СтруктурнаяЕдиница;
		НоваяЗапись.РегистрацияВНалоговомОргане = Выборка.РегистрацияВНалоговомОргане;
		НоваяЗапись.Организация = Выборка.Организация;
		
		ТаблицаИстории = ИсторияРегистраций.Выгрузить();
		ТаблицаИстории.Сортировать("Период");
		
		ИсторияРегистраций.Очистить();
		
		Для Каждого СтрокаТаблицы Из ТаблицаИстории Цикл
			
			// Если в наборе есть несколько записей подряд с одинаковой регистрацией, но разной датой,
			// то оставить нужно только первую
			Если ИсторияРегистраций.Количество() = 0
				ИЛИ ИсторияРегистраций[ИсторияРегистраций.Количество()-1].РегистрацияВНалоговомОргане <> СтрокаТаблицы.РегистрацияВНалоговомОргане Тогда
				
				ЗаписьИстории = ИсторияРегистраций.Добавить();
				ЗаполнитьЗначенияСвойств(ЗаписьИстории, СтрокаТаблицы);
				
				Если НЕ ЗначениеЗаполнено(ЗаписьИстории.Организация) Тогда
					ЗаписьИстории.Организация = Выборка.Организация;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ИсторияРегистраций);
		
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсторияРегистрацийВНалоговомОргане.СтруктурнаяЕдиница,
	|	ВЫБОР
	|		КОГДА ИсторияРегистрацийВНалоговомОргане.СтруктурнаяЕдиница ССЫЛКА Справочник.ПодразделенияОрганизаций
	|			ТОГДА ИсторияРегистрацийВНалоговомОргане.СтруктурнаяЕдиница.Владелец
	|		ИНАЧЕ ИсторияРегистрацийВНалоговомОргане.СтруктурнаяЕдиница
	|	КОНЕЦ КАК Организация
	|ИЗ
	|	РегистрСведений.ИсторияРегистрацийВНалоговомОргане КАК ИсторияРегистрацийВНалоговомОргане
	|ГДЕ
	|	ИсторияРегистрацийВНалоговомОргане.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ИсторияРегистраций = РегистрыСведений.ИсторияРегистрацийВНалоговомОргане.СоздатьНаборЗаписей();
		ИсторияРегистраций.Отбор.СтруктурнаяЕдиница.Установить(Выборка.СтруктурнаяЕдиница);
		ИсторияРегистраций.Прочитать();
		Для Каждого ЗаписьИстории Из ИсторияРегистраций Цикл
			Если НЕ ЗначениеЗаполнено(ЗаписьИстории.Организация) Тогда
				ЗаписьИстории.Организация = Выборка.Организация;
			КонецЕсли;
		КонецЦикла;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ИсторияРегистраций);
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики отражения зарплаты в регламентированном учете

Процедура НастройкиОтраженияЗарплатыВРеглУчете() Экспорт

	Если НЕ ЗначениеЗаполнено(Константы.УдалитьНомерВерсииКонфигурации.Получить()) Тогда 
		Возврат;
	КонецЕсли;
	
	// Установка константы ведения учета зарплаты в БП	
	Константы.ИспользоватьНачислениеЗарплаты.Установить(НЕ Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.Получить());
	Константы.УчетЗарплатыИКадровСредствамиБухгалтерии.Установить(НЕ Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.Получить());
	
	// Заполнение обязательных реквизитов справочника "Подразделения организации"
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Ссылка,
	|	ПодразделенияОрганизаций.РайонныйКоэффициент
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	НЕ ПодразделенияОрганизаций.Владелец ЕСТЬ NULL 
	|	И ПодразделенияОрганизаций.Владелец <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПодразделениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		РайонныйКоэффициент = ПодразделениеОбъект.РайонныйКоэффициент;
		Если РайонныйКоэффициент < 1
			ИЛИ РайонныйКоэффициент > 2 Тогда
			ПодразделениеОбъект.РайонныйКоэффициент = 1;
		КонецЕсли;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПодразделениеОбъект);		
	КонецЦикла;

КонецПроцедуры

Процедура КонвертацияСведенийОбОтраженииЗарплатыВУчете() Экспорт
	
	Если НЕ ЗначениеЗаполнено(Константы.УдалитьНомерВерсииКонфигурации.Получить()) Тогда 
		Возврат;
	КонецЕсли;
	
	// обновление настроек программы 
	Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.Установить(НЕ Константы.ИспользоватьНачислениеЗарплаты.Получить());
	Константы.УчетЗарплатыИКадровСредствамиБухгалтерии.Установить(Константы.ИспользоватьНачислениеЗарплаты.Получить());
	ЗаполнениеКодовБыстрогоВыбора(Истина);
	
	СпособыОтраженияЗарплатыВБухУчетеВыборка = Справочники.СпособыОтраженияЗарплатыВБухУчете.Выбрать();
	Если СпособыОтраженияЗарплатыВБухУчетеВыборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектыСписанияЗатрат = СоздатьОбъектыСписанияЗатрат();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			
	// создаем временную таблицу соответствия объектов бухучета
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БухучетЗарплаты.Счет,
	|	БухучетЗарплаты.Субконто1,
	|	БухучетЗарплаты.Субконто2,
	|	БухучетЗарплаты.Субконто3,
	|	БухучетЗарплаты.ОтражениеВУСН,
	|	БухучетЗарплаты.СпособОтраженияЗарплатыВБухучете
	|ПОМЕСТИТЬ БухучетЗарплаты
	|ИЗ
	|	&БухучетЗарплаты КАК БухучетЗарплаты";
	
	Запрос.УстановитьПараметр("БухучетЗарплаты", ОбъектыСписанияЗатрат);
	Запрос.Выполнить();
	
	// обрабатываем начисления
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка,
	|	БухучетЗарплаты.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БухучетЗарплаты КАК БухучетЗарплаты
	|		ПО Начисления.УдалитьСчет = БухучетЗарплаты.Счет
	|			И Начисления.УдалитьСубконто1 = БухучетЗарплаты.Субконто1
	|			И Начисления.УдалитьСубконто2 = БухучетЗарплаты.Субконто2
	|			И Начисления.УдалитьСубконто3 = БухучетЗарплаты.Субконто3
	|			И Начисления.УдалитьОтражениеВУСН = БухучетЗарплаты.ОтражениеВУСН
	|			И (Начисления.УдалитьСчет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|				ИЛИ Начисления.УдалитьСчет <> ЗНАЧЕНИЕ(Перечисление.ОтражениеВУСН.ПустаяСсылка))
	|			И (Начисления.СпособОтраженияЗарплатыВБухучете = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухУчете.ПустаяСсылка))";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НачислениеОбъект.СпособОтраженияЗарплатыВБухучете = Выборка.СпособОтраженияЗарплатыВБухучете;
		НачислениеОбъект.Записать();
	КонецЦикла;
	
	// обрабатываем наборы записей регистров
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БухучетЗарплатыОрганизаций.Период,
	|	БухучетЗарплатыОрганизаций.Организация,
	|	БухучетЗарплатыОрганизаций.УдалитьСчет,
	|	БухучетЗарплатыОрганизаций.УдалитьСубконто1,
	|	БухучетЗарплатыОрганизаций.УдалитьСубконто2,
	|	БухучетЗарплатыОрганизаций.УдалитьСубконто3,
	|	БухучетЗарплатыОрганизаций.УдалитьОтражениеВУСН,
	|	БухучетЗарплаты.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете
	|ИЗ
	|	РегистрСведений.БухучетЗарплатыОрганизаций КАК БухучетЗарплатыОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ БухучетЗарплаты КАК БухучетЗарплаты
	|		ПО БухучетЗарплатыОрганизаций.УдалитьСчет = БухучетЗарплаты.Счет
	|			И БухучетЗарплатыОрганизаций.УдалитьСубконто1 = БухучетЗарплаты.Субконто1
	|			И БухучетЗарплатыОрганизаций.УдалитьСубконто2 = БухучетЗарплаты.Субконто2
	|			И БухучетЗарплатыОрганизаций.УдалитьСубконто3 = БухучетЗарплаты.Субконто3
	|			И БухучетЗарплатыОрганизаций.УдалитьОтражениеВУСН = БухучетЗарплаты.ОтражениеВУСН
	|ГДЕ
	|	1 В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				1
	|			ИЗ
	|				РегистрСведений.БухучетЗарплатыОрганизаций КАК БухучетЗарплатыОрганизаций
	|			ГДЕ
	|				(БухучетЗарплатыОрганизаций.УдалитьСчет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|					ИЛИ БухучетЗарплатыОрганизаций.УдалитьСчет <> ЗНАЧЕНИЕ(Перечисление.ОтражениеВУСН.ПустаяСсылка))
	|				И БухучетЗарплатыОрганизаций.СпособОтраженияЗарплатыВБухучете = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухУчете.ПустаяСсылка))";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		НаборЗаписей = РегистрыСведений.БухучетЗарплатыОрганизаций.СоздатьНаборЗаписей();
		НаборЗаписей.Загрузить(РезультатЗапроса.Выгрузить());
		НаборЗаписей.Записать(Истина);
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	БухучетЗарплатыСотрудников.Период,
	|	БухучетЗарплатыСотрудников.Сотрудник,
	|	БухучетЗарплатыСотрудников.УдалитьСчет,
	|	БухучетЗарплатыСотрудников.УдалитьСубконто1,
	|	БухучетЗарплатыСотрудников.УдалитьСубконто2,
	|	БухучетЗарплатыСотрудников.УдалитьСубконто3,
	|	БухучетЗарплатыСотрудников.УдалитьОтражениеВУСН,
	|	БухучетЗарплаты.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете
	|ИЗ
	|	РегистрСведений.БухучетЗарплатыСотрудников КАК БухучетЗарплатыСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ БухучетЗарплаты КАК БухучетЗарплаты
	|		ПО БухучетЗарплатыСотрудников.УдалитьСчет = БухучетЗарплаты.Счет
	|			И БухучетЗарплатыСотрудников.УдалитьСубконто1 = БухучетЗарплаты.Субконто1
	|			И БухучетЗарплатыСотрудников.УдалитьСубконто2 = БухучетЗарплаты.Субконто2
	|			И БухучетЗарплатыСотрудников.УдалитьСубконто3 = БухучетЗарплаты.Субконто3
	|			И БухучетЗарплатыСотрудников.УдалитьОтражениеВУСН = БухучетЗарплаты.ОтражениеВУСН
	|ГДЕ
	|	1 В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				1
	|			ИЗ
	|				РегистрСведений.БухучетЗарплатыСотрудников КАК БухучетЗарплатыСотрудников
	|			ГДЕ
	|				БухучетЗарплатыСотрудников.УдалитьСчет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|				И БухучетЗарплатыСотрудников.СпособОтраженияЗарплатыВБухучете = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухУчете.ПустаяСсылка))";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ТаблицаЗаписей = РезультатЗапроса.Выгрузить();
		ТаблицаЗаписей.Свернуть("Период, Сотрудник, СпособОтраженияЗарплатыВБухучете",);
		НаборЗаписей = РегистрыСведений.БухучетЗарплатыСотрудников.СоздатьНаборЗаписей();
		НаборЗаписей.Загрузить(РезультатЗапроса.Выгрузить());
		НаборЗаписей.Записать(Истина);
	КонецЕсли;
	
	// Заполняем порядок отражения зарплаты в учете	
	Для Каждого СтрокаТаблицы Из ОбъектыСписанияЗатрат Цикл
		
		МенеджерЗаписи = РегистрыСведений.ПорядокОтраженияЗарплатыВБухУчете.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТаблицы);
		МенеджерЗаписи.ЕНВД = Ложь;
		МенеджерЗаписи.Прочитать();
		Если НЕ МенеджерЗаписи.Выбран() Тогда
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТаблицы);		
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
		МенеджерЗаписи = РегистрыСведений.ПорядокОтраженияЗарплатыВБухУчете.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТаблицы);
		МенеджерЗаписи.ЕНВД = Истина;
		МенеджерЗаписи.Прочитать();
		Если НЕ МенеджерЗаписи.Выбран() Тогда
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТаблицы);		
			МенеджерЗаписи.ЕНВД = Истина;
			МенеджерЗаписи.ОтражениеВУСН = Перечисления.ОтражениеВУСН.НеПринимаются;
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

Функция СоздатьОбъектыСписанияЗатрат()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	БухучетЗарплаты.Счет,
	|	БухучетЗарплаты.Субконто1,
	|	БухучетЗарплаты.Субконто2,
	|	БухучетЗарплаты.Субконто3,
	|	БухучетЗарплаты.УдалитьОтражениеВУСН КАК ОтражениеВУСН
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Начисления.УдалитьСчет КАК Счет,
	|		Начисления.УдалитьСубконто1 КАК Субконто1,
	|		Начисления.УдалитьСубконто2 КАК Субконто2,
	|		Начисления.УдалитьСубконто3 КАК Субконто3,
	|		Начисления.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|		Начисления.УдалитьОтражениеВУСН КАК УдалитьОтражениеВУСН
	|	ИЗ
	|		ПланВидовРасчета.Начисления КАК Начисления
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		БухучетЗарплатыОрганизаций.УдалитьСчет,
	|		БухучетЗарплатыОрганизаций.УдалитьСубконто1,
	|		БухучетЗарплатыОрганизаций.УдалитьСубконто2,
	|		БухучетЗарплатыОрганизаций.УдалитьСубконто3,
	|		БухучетЗарплатыОрганизаций.СпособОтраженияЗарплатыВБухучете,
	|		БухучетЗарплатыОрганизаций.УдалитьОтражениеВУСН
	|	ИЗ
	|		РегистрСведений.БухучетЗарплатыОрганизаций КАК БухучетЗарплатыОрганизаций
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		БухучетЗарплатыСотрудников.УдалитьСчет,
	|		БухучетЗарплатыСотрудников.УдалитьСубконто1,
	|		БухучетЗарплатыСотрудников.УдалитьСубконто2,
	|		БухучетЗарплатыСотрудников.УдалитьСубконто3,
	|		БухучетЗарплатыСотрудников.СпособОтраженияЗарплатыВБухучете,
	|		БухучетЗарплатыСотрудников.УдалитьОтражениеВУСН
	|	ИЗ
	|		РегистрСведений.БухучетЗарплатыСотрудников КАК БухучетЗарплатыСотрудников) КАК БухучетЗарплаты
	|ГДЕ
	|	(БухучетЗарплаты.Счет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|			ИЛИ БухучетЗарплаты.УдалитьОтражениеВУСН <> ЗНАЧЕНИЕ(Перечисление.ОтражениеВУСН.ПустаяСсылка))
	|	И БухучетЗарплаты.СпособОтраженияЗарплатыВБухучете = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухУчете.ПустаяСсылка)");
	
	БухучетЗарплаты = Запрос.Выполнить().Выгрузить();
	БухучетЗарплаты.Колонки.Добавить("СпособОтраженияЗарплатыВБухучете", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияЗарплатыВБухУчете"));
	
	Для Каждого СтрокаТаблицы Из БухучетЗарплаты Цикл
		ОбъектБухучетаЗарплаты = Справочники.СпособыОтраженияЗарплатыВБухУчете.СоздатьЭлемент();
		ОбъектБухучетаЗарплаты.Наименование = НаименованиеОбъектаБухучетаЗарплаты(
												СтрокаТаблицы.Счет, 
												СтрокаТаблицы.Субконто1, 
												СтрокаТаблицы.Субконто2, 
												СтрокаТаблицы.Субконто3,
												СтрокаТаблицы.ОтражениеВУСН);
		ОбъектБухучетаЗарплаты.Записать();
		ОбъектБухучетаЗарплатыСсылка = ОбъектБухучетаЗарплаты.Ссылка;
		СтрокаТаблицы.СпособОтраженияЗарплатыВБухучете = ОбъектБухучетаЗарплатыСсылка;
	КонецЦикла;
	
	Возврат БухучетЗарплаты;
	
КонецФункции // СоздатьОбъектыСписанияЗатрат

Функция НаименованиеОбъектаБухучетаЗарплаты(Счет, Субконто1, Субконто2, Субконто3, ОтражениеВУСН)
	
	ОграничениеДлины = 30;
	
	МассивСубконто = Новый Массив;
	МассивСубконто.Добавить(Субконто1);
	МассивСубконто.Добавить(Субконто2);
	МассивСубконто.Добавить(Субконто3);
	
	ПредставлениеСубконто = "";
	Для НомерСубконто = 1 По 3 Цикл
		Субконто = МассивСубконто[НомерСубконто - 1];
		Если ЗначениеЗаполнено(Субконто) Тогда
			ПредставлениеЗначения = Строка(Субконто);
			Если СтрДлина(ПредставлениеЗначения) > ОграничениеДлины Тогда
				ПредставлениеЗначения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1...", 
											Лев(ПредставлениеЗначения, ОграничениеДлины - 3));
			КонецЕсли;
			ПредставлениеСубконто =	ПредставлениеСубконто + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 (%2), ",
										ПредставлениеЗначения,
										Строка(Субконто.Метаданные().Синоним));
		КонецЕсли;
	КонецЦикла;
	
	ПредставлениеУСН = ?(ЗначениеЗаполнено(ОтражениеВУСН), 
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(", в УСН %1", НРег(Строка(ОтражениеВУСН))),
						"");
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1Счет %2%3", 
				ПредставлениеСубконто, 
				Строка(Счет),
				ПредставлениеУСН);
	
КонецФункции // НаименованиеОбъектаБухучетаЗарплаты

Процедура СоздатьНастройкиУчетаЗарплаты() Экспорт
	
	УчетЗарплатыИКадровВоВнешнейПрограмме = Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.Получить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	Иначе
		Выборка = Результат.Выбрать();
	КонецЕсли;
	
	НастройкиУчетаЗарплаты  = РегистрыСведений.НастройкиУчетаЗарплаты.СоздатьМенеджерЗаписи();
	
	Пока Выборка.Следующий() Цикл

		НастройкиУчетаЗарплаты.Организация = Выборка.Организация;
		НастройкиУчетаЗарплаты.Прочитать();		
		НастройкиУчетаЗарплаты.Организация = Выборка.Организация;
		НастройкиУчетаЗарплаты.Записать();
				
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// БИБЛИОТЕКА СТАНДАРТНЫХ ПОДСИСТЕМ

Процедура ОбновитьДополнительныеОтчетыИОбработки() Экспорт
	
	СоответствиеИменКомандРазделам = Новый Соответствие;
	
	// Дополнительные отчеты
	
	СоответствиеИменКомандРазделам.Вставить(
		"ДополнительныеОтчетыБанкИКасса", 
		Метаданные.Подсистемы.БанкИКасса
	);
	
	СоответствиеИменКомандРазделам.Вставить(
		"ДополнительныеОтчетыПродажи", 
		Метаданные.Подсистемы.Продажи
	);
	
	СоответствиеИменКомандРазделам.Вставить(
		"ДополнительныеОтчетыПокупки", 
		Метаданные.Подсистемы.Покупки
	);
	
	СоответствиеИменКомандРазделам.Вставить(
		"ДополнительныеОтчетыСклад", 
		Метаданные.Подсистемы.Склад
	);
	
	СоответствиеИменКомандРазделам.Вставить(
		"ДополнительныеОтчетыПроизводство", 
		Метаданные.Подсистемы.Производство
	);
	
	СоответствиеИменКомандРазделам.Вставить(
		"ДополнительныеОтчетыОСИНМА", 
		Метаданные.Подсистемы.ОСИНМА
	);
	
	СоответствиеИменКомандРазделам.Вставить(
		"ДополнительныеОтчетыЗарплатаИКадры", 
		Метаданные.Подсистемы.ЗарплатаИКадры
	);
	
	СоответствиеИменКомандРазделам.Вставить(
		"ДополнительныеОтчетыОперации", 
		Метаданные.Подсистемы.Операции
	);
	
	СоответствиеИменКомандРазделам.Вставить(
		"ДополнительныеОтчетыОтчеты", 
		Метаданные.Подсистемы.Отчеты
	);
	
	СоответствиеИменКомандРазделам.Вставить(
		"ДополнительныеОтчетыСправочники", 
		Метаданные.Подсистемы.Справочники
	);
	
	СоответствиеИменКомандРазделам.Вставить(
		"ДополнительныеОтчетыБанкИКасса82", 
		Метаданные.Подсистемы.БанкИКасса82
	);
	
	СоответствиеИменКомандРазделам.Вставить(
		"ДополнительныеОтчетыПокупкиИПродажи82", 
		Метаданные.Подсистемы.ПокупкиИПродажи82
	);

	СоответствиеИменКомандРазделам.Вставить(
		"ДополнительныеОтчетыНоменклатураИСклад82", 
		Метаданные.Подсистемы.НоменклатураИСклад82
	);
	
	СоответствиеИменКомандРазделам.Вставить(
		"ДополнительныеОтчетыПроизводство82", 
		Метаданные.Подсистемы.Производство82
	);

	СоответствиеИменКомандРазделам.Вставить(
		"ДополнительныеОтчетыОсновныеСредстваИНМА82", 
		Метаданные.Подсистемы.ОсновныеСредстваИНМА82
	);

	СоответствиеИменКомандРазделам.Вставить(
		"ДополнительныеОтчетыСотрудникиИЗарплата82", 
		Метаданные.Подсистемы.СотрудникиИЗарплата82
	);

	СоответствиеИменКомандРазделам.Вставить(
		"ДополнительныеОтчетыУчетНалогиОтчетность82", 
		Метаданные.Подсистемы.УчетНалогиОтчетность82
	);
	
	СоответствиеИменКомандРазделам.Вставить(
		"ДополнительныеОтчетыСправочникиИНастройкиУчета82", 
		Метаданные.Подсистемы.СправочникиИНастройкиУчета82
	);

	СоответствиеИменКомандРазделам.Вставить(
		"ДополнительныеОтчетыАдминистрирование", 
		Метаданные.Подсистемы.Администрирование
	);

	// Дополнительные обработки
	
	СоответствиеИменКомандРазделам.Вставить(
		"ДопонительныеОбработкиБанкИКасса", 
		Метаданные.Подсистемы.БанкИКасса
	);
	
	СоответствиеИменКомандРазделам.Вставить(
		"ДопонительныеОбработкиПродажи", 
		Метаданные.Подсистемы.Продажи
	);
	
	СоответствиеИменКомандРазделам.Вставить(
		"ДопонительныеОбработкиПокупки", 
		Метаданные.Подсистемы.Покупки
	);
	
	СоответствиеИменКомандРазделам.Вставить(
		"ДопонительныеОбработкиСклад", 
		Метаданные.Подсистемы.Склад
	);
	
	СоответствиеИменКомандРазделам.Вставить(
		"ДопонительныеОбработкиПроизводство", 
		Метаданные.Подсистемы.Производство
	);
	
	СоответствиеИменКомандРазделам.Вставить(
		"ДопонительныеОбработкиОСИНМА", 
		Метаданные.Подсистемы.ОСИНМА
	);
	
	СоответствиеИменКомандРазделам.Вставить(
		"ДопонительныеОбработкиЗарплатаИКадры", 
		Метаданные.Подсистемы.ЗарплатаИКадры
	);
	
	СоответствиеИменКомандРазделам.Вставить(
		"ДопонительныеОбработкиОперации", 
		Метаданные.Подсистемы.Операции
	);
	
	СоответствиеИменКомандРазделам.Вставить(
		"ДопонительныеОбработкиОтчеты", 
		Метаданные.Подсистемы.Отчеты
	);
	
	СоответствиеИменКомандРазделам.Вставить(
		"ДопонительныеОбработкиСправочники", 
		Метаданные.Подсистемы.Справочники
	);
	
	СоответствиеИменКомандРазделам.Вставить(
		"ДополнительныеОбработкиБанкИКасса82", 
		Метаданные.Подсистемы.БанкИКасса82
	);
	
	СоответствиеИменКомандРазделам.Вставить(
		"ДополнительныеОбработкиПокупкиИПродажи82", 
		Метаданные.Подсистемы.ПокупкиИПродажи82
	);

	СоответствиеИменКомандРазделам.Вставить(
		"ДополнительныеОбработкиНоменклатураИСклад82", 
		Метаданные.Подсистемы.НоменклатураИСклад82
	);
	
	СоответствиеИменКомандРазделам.Вставить(
		"ДополнительныеОбработкиПроизводство82", 
		Метаданные.Подсистемы.Производство82
	);

	СоответствиеИменКомандРазделам.Вставить(
		"ДополнительныеОбработкиОсновныеСредстваИНМА82", 
		Метаданные.Подсистемы.ОсновныеСредстваИНМА82
	);

	СоответствиеИменКомандРазделам.Вставить(
		"ДополнительныеОбработкиСотрудникиИЗарплата82", 
		Метаданные.Подсистемы.СотрудникиИЗарплата82
	);

	СоответствиеИменКомандРазделам.Вставить(
		"ДополнительныеОбработкиУчетНалогиОтчетность82", 
		Метаданные.Подсистемы.УчетНалогиОтчетность82
	);
	
	СоответствиеИменКомандРазделам.Вставить(
		"ДополнительныеОбработкиСправочникиИНастройкиУчета82", 
		Метаданные.Подсистемы.СправочникиИНастройкиУчета82
	);

	СоответствиеИменКомандРазделам.Вставить(
		"ДополнительныеОбработкиАдминистрирование", 
		Метаданные.Подсистемы.Администрирование
	);
	
	ДополнительныеОтчетыИОбработки.ЗаменитьИменаРазделовНаИдентификаторы(СоответствиеИменКомандРазделам);
	
КонецПроцедуры

Процедура ЗарегистрироватьИзменинияИдентификаторовОбъектовМетаданных() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел()=Неопределено Тогда
		ПланыОбменаРИБ = Новый Массив();
		ПланыОбменаРИБ.Добавить(Метаданные.ПланыОбмена.Полный);
		ПланыОбменаРИБ.Добавить(Метаданные.ПланыОбмена.ПоОрганизации);
		Для Каждого ПланОбмена Из ПланыОбменаРИБ Цикл
			Запрос = Новый Запрос();
			Запрос.Параметры.Вставить("ЭтотУзел", ПланыОбмена[ПланОбмена.Имя].ЭтотУзел());
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ПланОбменаРИБ.Ссылка
			|ИЗ
			|	ПланОбмена.[ИмяПланаОбмена] КАК ПланОбменаРИБ
			|ГДЕ
			|	ПланОбменаРИБ.Ссылка <> &ЭтотУзел";
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "[ИмяПланаОбмена]", ПланОбмена.Имя);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				ПланыОбмена.ЗарегистрироватьИзменения(Выборка.Ссылка, Метаданные.Справочники.ИдентификаторыОбъектовМетаданных);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьИзмененияУчетныхЗаписейЭлектроннойПочты() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел()=Неопределено Тогда
		ПланыОбменаРИБ = Новый Массив();
		ПланыОбменаРИБ.Добавить(Метаданные.ПланыОбмена.ПоОрганизации);
		Для Каждого ПланОбмена Из ПланыОбменаРИБ Цикл
			Запрос = Новый Запрос();
			Запрос.Параметры.Вставить("ЭтотУзел", ПланыОбмена[ПланОбмена.Имя].ЭтотУзел());
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ПланОбменаРИБ.Ссылка
			|ИЗ
			|	ПланОбмена.[ИмяПланаОбмена] КАК ПланОбменаРИБ
			|ГДЕ
			|	ПланОбменаРИБ.Ссылка <> &ЭтотУзел";
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "[ИмяПланаОбмена]", ПланОбмена.Имя);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				ПланыОбмена.ЗарегистрироватьИзменения(Выборка.Ссылка, Метаданные.Справочники.УчетныеЗаписиЭлектроннойПочты);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Регламентированная отчетность

Процедура ЗаменитьТипыСкладовВРегистреСчетовУчетаНоменклатуры() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	РегистрСведений.СчетаУчетаНоменклатуры КАК СчетаУчетаНоменклатуры";

	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	КоличествоСтрок = ТаблицаРезультата.Количество();
	Для Инд = 1 по КоличествоСтрок Цикл
		Строка = ТаблицаРезультата[Инд-1];
		Если ЗначениеЗаполнено(Строка.Склад) Тогда
			Строка.ТипСклада = Строка.Склад.ТипСклада;
		ИначеЕсли Не ЗначениеЗаполнено(Строка.УдалитьТипСклада) Тогда
			Продолжить;
		ИначеЕсли Строка.УдалитьТипСклада = Перечисления.УдалитьТипыСкладов.Оптовый Тогда
			Строка.ТипСклада = Перечисления.ТипыСкладов.ОптовыйСклад;
		ИначеЕсли Строка.УдалитьТипСклада = Перечисления.УдалитьТипыСкладов.Розничный Тогда
			Строка.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин;
			НоваяСтрока = ТаблицаРезультата.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.ТипСклада 	= Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка;
			Строка.ТипСклада 		= Перечисления.ТипыСкладов.РозничныйМагазин;
		КонецЕсли;
		Строка.УдалитьТипСклада = Перечисления.ТипыСкладов.ПустаяСсылка();
	КонецЦикла;

	НаборЗаписей = РегистрыСведений.СчетаУчетаНоменклатуры.СоздатьНаборЗаписей();
	НаборЗаписей.Загрузить(ТаблицаРезультата);
	НаборЗаписей.Записать(Истина);

КонецПроцедуры

Процедура ОбновитьРеквизитВидОбменаСКонтролирующимиОрганамиСправочникаОрганизации() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ВидОбменаСКонтролирующимиОрганами = ЗНАЧЕНИЕ(Перечисление.УдалитьВидыОбменаСКонтролирующимиОрганами.ОбменОтключен)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		
		Объект.ВидОбменаСКонтролирующимиОрганами = Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменОтключен;
		
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
		Исключение
			ТекстСообщения	= НСтр("ru = 'Не удалось обновить вид обмена с контролирующими органами организации'");
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
			
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьИзмененияВидовОтправляемыхДокументов() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПланыОбменаРИБ = Новый Массив();
	ПланыОбменаРИБ.Добавить(Метаданные.ПланыОбмена.Полный);
	ПланыОбменаРИБ.Добавить(Метаданные.ПланыОбмена.ПоОрганизации);
	ПланыОбменаРИБ.Добавить(Метаданные.ПланыОбмена.АвтономнаяРабота);
	Для Каждого ПланОбмена Из ПланыОбменаРИБ Цикл
		Запрос = Новый Запрос();
		Запрос.Параметры.Вставить("ЭтотУзел", ПланыОбмена[ПланОбмена.Имя].ЭтотУзел());
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПланОбменаРИБ.Ссылка КАК Ссылка
		|ИЗ
		|	ПланОбмена.[ИмяПланаОбмена] КАК ПланОбменаРИБ
		|ГДЕ
		|	ПланОбменаРИБ.Ссылка <> &ЭтотУзел";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "[ИмяПланаОбмена]", ПланОбмена.Имя);
		ВсеУзлы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		Если ВсеУзлы.Количество() > 0 Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(ВсеУзлы, Метаданные.Справочники.ВидыОтправляемыхДокументов);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции

Процедура КонтактнаяИнформацияОбновлениеИБ()
	
	ПараметрыПроверкиАдресаРФ = Новый Структура;
	ПараметрыПроверкиАдресаРФ.Вставить("АдресТолькоРоссийский", Истина);
	ПараметрыПроверкиАдресаРФ.Вставить("ПроверятьКорректность", Ложь);
	ПараметрыПроверкиАдресаРФ.Вставить("ЗапрещатьВводНекорректного", Ложь);
	ПараметрыПроверкиАдресаРФ.Вставить("СкрыватьНеактуальныеАдреса", Ложь);
	ПараметрыПроверкиАдресаРФ.Вставить("ВключатьСтрануВПредставление", Ложь);
	
	// Пользователи
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
						Перечисления.ТипыКонтактнойИнформации.Другое);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияПользователя;
	ПараметрыВида.Подсказка                         = НСтр("ru='Другая информация пользователя'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 3;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	// Конец Пользователи
	
	// КонтактныеЛица
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
						Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияКонтактныеЛица;
	ПараметрыВида.Подсказка                         = НСтр("ru='Адрес для информирования контактных лиц'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 1;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Ложь;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
						Перечисления.ТипыКонтактнойИнформации.Телефон);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйКонтактныеЛица;
	ПараметрыВида.Подсказка                         = НСтр("ru='Мобильный телефон контактного лица'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 2;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
						Перечисления.ТипыКонтактнойИнформации.Телефон);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ТелефонРабочийКонтактныеЛица;
	ПараметрыВида.Подсказка                         = НСтр("ru='Рабочий телефон контактного лица'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 3;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
						Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.EmailКонтактныеЛица;
	ПараметрыВида.Подсказка                         = НСтр("ru='Адрес электронной почты контактного лица'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 4;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
						Перечисления.ТипыКонтактнойИнформации.Другое);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтактныеЛица;
	ПараметрыВида.Подсказка                         = НСтр("ru='Любая другая контактная информация'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 5;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	// Конец КонтактныеЛица
	
	// Контрагенты
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
						Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
	ПараметрыВида.Подсказка                         = НСтр("ru='Юридический адрес контрагента'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 1;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Ложь;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
						Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
	ПараметрыВида.Подсказка                         = НСтр("ru='Фактический адрес контрагента'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 2;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Ложь;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
						Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента;
	ПараметрыВида.Подсказка                         = НСтр("ru='Почтовый адрес контрагента'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 3;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Ложь;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
						Перечисления.ТипыКонтактнойИнформации.Телефон);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
	ПараметрыВида.Подсказка                         = НСтр("ru='Телефон контрагента'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 4;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
						Перечисления.ТипыКонтактнойИнформации.Факс);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ФаксКонтрагенты;
	ПараметрыВида.Подсказка                         = НСтр("ru='Факс контрагента'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 5;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
						Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты;
	ПараметрыВида.Подсказка                         = НСтр("ru='Адрес электронной почты контрагента'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 6;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
						Перечисления.ТипыКонтактнойИнформации.Другое);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагенты;
	ПараметрыВида.Подсказка                         = НСтр("ru='Любая другая контактная информация'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 7;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	// Конец Контрагенты
	
	// ПодразделенияОрганизаций
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
						Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ФактическийАдресПодразделенияОрганизаций;
	ПараметрыВида.Подсказка                         = НСтр("ru='Фактический адрес подразделения организации'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Ложь;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Истина;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 1;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Ложь;
	ЗаполнитьЗначенияСвойств(ПараметрыВида.НастройкиПроверки, ПараметрыПроверкиАдресаРФ);
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
						Перечисления.ТипыКонтактнойИнформации.Телефон);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ТелефонПодразделенияОрганизаций;
	ПараметрыВида.Подсказка                         = НСтр("ru='Телефон подразделения организации'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 2;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
						Перечисления.ТипыКонтактнойИнформации.Факс);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ФаксПодразделенияОрганизаций;
	ПараметрыВида.Подсказка                         = НСтр("ru='Факс подразделения организации'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 3;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
						Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.EmailПодразделенияОрганизаций;
	ПараметрыВида.Подсказка                         = НСтр("ru='Адрес электронной почты подразделения организации'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 4;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
						Перечисления.ТипыКонтактнойИнформации.Другое);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияПодразделенияОрганизаций;
	ПараметрыВида.Подсказка                         = НСтр("ru='Любая другая контактная информация'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 5;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	// Конец ПодразделенияОрганизаций	
	
	// Организации
	Справочники.Организации.ОбновитьПредопределенныеВидыКонтактнойИнформацииОрганизаций();
	// Конец Организации
	
	// ОсновныеСредства
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
						Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.АдресМестонахожденияОсновныеСредства;
	ПараметрыВида.Подсказка                         = НСтр("ru='Адрес местонахождения основного средства'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Ложь;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Истина;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 1;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Ложь;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	// Конец ОсновныеСредства
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Первоначальное заполнение ИБ

Функция НайтиСоздатьВалюту(Код, Наименование, НаименованиеПолное, ПараметрыПрописиНаРусском)
	
	Ссылка = Справочники.Валюты.НайтиПоКоду(Код);
	
	Если Ссылка.Пустая() Тогда
		
		СправочникОбъект = Справочники.Валюты.СоздатьЭлемент();
		
		СправочникОбъект.Код                       = Код;
		СправочникОбъект.Наименование              = Наименование;
		СправочникОбъект.НаименованиеПолное        = НаименованиеПолное;
		СправочникОбъект.ПараметрыПрописиНаРусском = ПараметрыПрописиНаРусском;
		
		СправочникОбъект.Записать();
		
		Ссылка = СправочникОбъект.Ссылка;
		
		// установим курс и кратность = 1 на 1 января 1980
		РаботаСКурсамиВалют.ПроверитьКорректностьКурсаНа01_01_1980(Ссылка);
		
	Иначе
		
		// Рубль может быть создан из классификатора, где он имеет наименование RUB,
		// нам это не подходит, т.к. это поле выводится в печатных формах
		Если Ссылка.Наименование <> Наименование Тогда
			СправочникОбъект = Ссылка.ПолучитьОбъект();
			СправочникОбъект.Наименование = Наименование;
			
			СправочникОбъект.Записать();
			Ссылка = СправочникОбъект.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

Процедура УстановитьПараметрыСчетовБУ()
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	ВыборкаСчетов = ПланыСчетов.Хозрасчетный.ВыбратьИерархически();
	Пока ВыборкаСчетов.Следующий() Цикл
		Родитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаСчетов.Ссылка, "Родитель");
		Если НЕ ЗначениеЗаполнено(Родитель) Тогда
			Продолжить;
		КонецЕсли;
		
		Объект = Родитель.ПолучитьОбъект();
		Если Объект.ЗапретитьИспользоватьВПроводках Тогда
			Продолжить;
		КонецЕсли;
		
		Объект.ЗапретитьИспользоватьВПроводках = Истина;
		Объект.Записать();
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();

КонецПроцедуры

Процедура УстановитьСуммовойУчетНаСкладах()

	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	Счета = Новый СписокЗначений();
	Счета.Добавить("ОборудованиеКУстановке");
	Счета.Добавить("ПриобретениеОбъектовОсновныхСредств");
	Счета.Добавить("Полуфабрикаты");
	Счета.Добавить("Товары");
	Счета.Добавить("ТорговаяНаценкаАТТ");
	Счета.Добавить("ГотоваяПродукция");
	Счета.Добавить("Материалы");
	Счета.Добавить("ТоварыПринятыеНаКомиссию");

	НачатьТранзакцию();

	Для каждого Счет Из Счета Цикл
		УстановитьСубконтоНоменклатура(Счет.Значение, "Хозрасчетный", Истина, Ложь);
	КонецЦикла;

	Счета = Новый СписокЗначений();
	Счета.Добавить("МатериалыПереданныеВПереработку");
	Счета.Добавить("ТоварыОтгруженные");

	Для каждого Счет Из Счета Цикл
		УстановитьСубконтоНоменклатура(Счет.Значение, "Хозрасчетный", Истина, Истина);
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();

КонецПроцедуры

Процедура УстановитьУчетНаСчетахТоваровВРознице()
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	// На счетах 41.11, 41.12, 42.01, 42.02 субконто Склад должно присутствовать всегда.
	// Настройки суммового и количественного учета по субконто на счете должны быть такие же как и в процедуре 
	// ОбщегоНазначенияБПВызовСервера.ПолучитьСоответствиеСубконтоПараметрамУчета().
	Счета = Новый Соответствие;
	Счета.Вставить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ, Истина); // 41.11
	Счета.Вставить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ, Истина); // 41.12
	Счета.Вставить(ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ, Истина); // 42.01
	Счета.Вставить(ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ, Ложь); // 42.02
	
	Для каждого КлючЗначение Из Счета Цикл
		
		Счет = КлючЗначение.Ключ;
		
		Если Счет.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады) = Неопределено Тогда
			Попытка
				СчетОбъект = Счет.ПолучитьОбъект();
				
				НоваяСтрокаСубконто = СчетОбъект.ВидыСубконто.Добавить();
				НоваяСтрокаСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады;
				НоваяСтрокаСубконто.Суммовой 		= Истина;
				НоваяСтрокаСубконто.Количественный 	= Счета[Счет];
				СчетОбъект.Записать();
				
			Исключение
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Установка субконто Склад на счете %1 не выполнена.'"), Счет);
				ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка
					,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьУчетПоДокументамНаСчетахРасчетов()

	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	ОбрабатываемыеСчета = Новый Массив;

	ОбрабатываемыеСчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками);     // 60
	ОбрабатываемыеСчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками);      // 62
	ОбрабатываемыеСчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами); // 76

	// Исключения - счета (включая подчиненные им), на которых есть аналитика "Контрагенты" и "Договоры",
	// но на которых не нужно устанавливать субконто "Документы расчетов с контрагентом"
	СчетаИсключения = Новый Массив;

	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.ВекселяВыданные); 										// 60.03
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.ВекселяПолученные); 										// 62.03
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоИмущественномуЛичномуИДобровольномуСтрахованию); // 76.01
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоПричитающимсяДивидендам); 						// 76.03
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоИмущественномуИЛичномуСтрахованиюВал);      		// 76.21
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента);      						// 76.НА

	Запрос = Новый запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ХозрасчетныйВидыСубконто.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|ГДЕ
	|	ХозрасчетныйВидыСубконто.Ссылка В ИЕРАРХИИ(&ОбрабатываемыеСчета)
	|	И (НЕ ХозрасчетныйВидыСубконто.Ссылка В ИЕРАРХИИ (&СчетаИсключения))
	|	И ХозрасчетныйВидыСубконто.Ссылка <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами)
	|	И ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры)";
	
	Запрос.УстановитьПараметр("ОбрабатываемыеСчета", ОбрабатываемыеСчета);
	Запрос.УстановитьПараметр("СчетаИсключения",     СчетаИсключения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СчетОбъект    = Выборка.Счет.ПолучитьОбъект();
		Субконто      = СчетОбъект.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами, "ВидСубконто");
		НетДокументов = (Субконто = Неопределено);
		ВсегоСубконто = СчетОбъект.ВидыСубконто.Количество();
		Если НетДокументов И ВсегоСубконто < 3 Тогда
			
			НовыйВид = СчетОбъект.ВидыСубконто.Добавить();
			
			НовыйВид.ВидСубконто    = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами;
			НовыйВид.Суммовой       = Истина;
			НовыйВид.Валютный       = Истина;
			НовыйВид.Количественный = Истина;
			
			СчетОбъект.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьУчетНаСчетахУчетаЗарплаты()

	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	Объект = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда.ПолучитьОбъект();

	Субконто = Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидНачисленийОплатыТрудаПоСтатье255НК, "ВидСубконто");
	Если Субконто = Неопределено Тогда
		НовыйВид = Объект.ВидыСубконто.Добавить();
		НовыйВид.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидНачисленийОплатыТрудаПоСтатье255НК;
		НовыйВид.Суммовой    = Истина;
		НовыйВид.ТолькоОбороты    = Истина;
		Объект.Записать();
	КонецЕсли;

	Субконто = Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций, "ВидСубконто");
	Если Субконто <> Неопределено
		И Объект.ВидыСубконто[1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций Тогда
		Объект.ВидыСубконто.Сдвинуть(1,-1);
		Объект.Записать();
	КонецЕсли;
	
	ОпределитьПараметруУчетаРасчетовСРаботниками();

КонецПроцедуры

Процедура ЗаполнитьСправочникРасходыБудущихПериодов()

	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	РасходыБудущихПериодов = Справочники.РасходыБудущихПериодов;

	СтатьяРасходовБудущихПериодов = РасходыБудущихПериодов.РБПНаЕСН.ПолучитьОбъект();
	СтатьяРасходовБудущихПериодов.СпособПризнанияРасходов = Перечисления.СпособыПризнанияРасходов.ВОсобомПорядке;
	СтатьяРасходовБудущихПериодов.Записать();

	СтатьяРасходовБудущихПериодов = РасходыБудущихПериодов.РБПНаОплатуТруда.ПолучитьОбъект();
	СтатьяРасходовБудущихПериодов.СпособПризнанияРасходов = Перечисления.СпособыПризнанияРасходов.ВОсобомПорядке;
	СтатьяРасходовБудущихПериодов.Записать();

	СтатьяРасходовБудущихПериодов = РасходыБудущихПериодов.РБПНаПФР.ПолучитьОбъект();
	СтатьяРасходовБудущихПериодов.СпособПризнанияРасходов = Перечисления.СпособыПризнанияРасходов.ВОсобомПорядке;
	СтатьяРасходовБудущихПериодов.Записать();

	СтатьяРасходовБудущихПериодов = РасходыБудущихПериодов.РБПНаФСС.ПолучитьОбъект();
	СтатьяРасходовБудущихПериодов.СпособПризнанияРасходов = Перечисления.СпособыПризнанияРасходов.ВОсобомПорядке;
	СтатьяРасходовБудущихПериодов.Записать();
	
	СтатьяРасходовБудущихПериодов = РасходыБудущихПериодов.РБПНаСтраховыеВзносы.ПолучитьОбъект();
	СтатьяРасходовБудущихПериодов.СпособПризнанияРасходов = Перечисления.СпособыПризнанияРасходов.ВОсобомПорядке;
	СтатьяРасходовБудущихПериодов.Записать();

КонецПроцедуры

Процедура УстановитьСубконтоНоменклатура(ИмяСчета, ИмяПланаСчетов, ЕстьКоличество, ЕстьКонтрагент)

	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	ВидСубконто = "ВидыСубконтоХозрасчетные";

	Попытка

		Счет  = ПланыСчетов[ИмяПланаСчетов][ИмяСчета];
		Счета = Новый СписокЗначений();
		Счета.Добавить(Счет);

		ВыборкаСчетов = ПланыСчетов[ИмяПланаСчетов].ВыбратьИерархически(Счет);
		Пока ВыборкаСчетов.Следующий() Цикл
			Счета.Добавить(ВыборкаСчетов.Ссылка);
		КонецЦикла;

		Для каждого Счет Из Счета Цикл

			Объект = Счет.Значение.ПолучитьОбъект();

			Если Объект.Код = "41.12" ИЛИ Объект.Код = "45.04" Тогда
				Продолжить;
			КонецЕсли;

			Если ЕстьКонтрагент Тогда

				Если Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик[ВидСубконто].Контрагенты, "ВидСубконто") = Неопределено Тогда

					НовыйВид = Объект.ВидыСубконто.Вставить(0);

					НовыйВид.ВидСубконто = ПланыВидовХарактеристик[ВидСубконто].Контрагенты;
					НовыйВид.Суммовой    = Истина;

					Если ЕстьКоличество Тогда
						НовыйВид.Количественный = Истина;
					КонецЕсли;

					Объект.Записать();
				КонецЕсли;

			КонецЕсли;

			Если Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик[ВидСубконто].Номенклатура, "ВидСубконто") = Неопределено Тогда

				НовыйВид = Объект.ВидыСубконто.Добавить();

				НовыйВид.ВидСубконто = ПланыВидовХарактеристик[ВидСубконто].Номенклатура;
				НовыйВид.Суммовой    = Истина;

				Если ЕстьКоличество Тогда
					НовыйВид.Количественный = Истина;
				КонецЕсли;

				Объект.Записать();
			КонецЕсли;

		КонецЦикла;

	Исключение
		ТекстСообщения = НСтр("ru='Операция не выполнена'");
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

КонецПроцедуры

Процедура УстановитьВедетсяУчетИмпортныхТоваров() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	НомераГТД.Ссылка
	               |ИЗ
	               |	Справочник.НомераГТД КАК НомераГТД";
	
	Если НЕ Запрос.Выполнить().Пустой() Тогда
	
		Константы.ВедетсяУчетИмпортныхТоваров.Установить(Истина);
	
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьРежимКомандногоИнтерфейса() Экспорт
	
	Если НЕ Константы.ИнтерфейсВерсии77.Получить()
		И НЕ Константы.ИнтерфейсВерсии82.Получить() 
		И НЕ Константы.ИнтерфейсТакси.Получить() Тогда
		// При обновлении с предыдущей версии БП (3.0.32) режим интерфейса сохраняется
		ОбщегоНазначенияБП.УстановитьРежимКомандногоИнтерфейса("ИнтерфейсВерсии82");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Константы.РежимИнтерфейсаУстановленАвтоматически.Установить(Истина);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыСчетовУчетаРезервов() Экспорт
	
	СчетОбъект = ПланыСчетов.Хозрасчетный.РезервыПредстоящихРасходов.ПолучитьОбъект();
	СчетОбъект.ЗапретитьИспользоватьВПроводках = Истина;
	СчетОбъект.Записать();
	
	СчетОбъект = ПланыСчетов.Хозрасчетный.ОценочныеОбязательстваПоВознаграждениямРаботникам.ПолучитьОбъект();
	СчетОбъект.ЗапретитьИспользоватьВПроводках = Истина;
	СчетОбъект.Записать();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Ключевые операции

Процедура ЗаполнитьРеквизитыКлючевыхОпераций() Экспорт

	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() И ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеСправочника = Метаданные.Справочники.КлючевыеОперации;

	ТаблицаКлючевыхОпераций = Новый ТаблицаЗначений;
	ТаблицаКлючевыхОпераций.Колонки.Добавить("ИмяКлючевойОперации", МетаданныеСправочника.Реквизиты.Имя.Тип);
	ТаблицаКлючевыхОпераций.Колонки.Добавить("ЦелевоеВремя", 		МетаданныеСправочника.Реквизиты.ЦелевоеВремя.Тип);

	ПодготовитьТаблицуЦелевогоВремяКлючевыхОпераций(ТаблицаКлючевыхОпераций);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаКлючевыхОпераций", ТаблицаКлючевыхОпераций);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаКлючевыхОпераций.ИмяКлючевойОперации КАК ИмяКлючевойОперации,
	|	ТаблицаКлючевыхОпераций.ЦелевоеВремя КАК ЦелевоеВремя
	|ПОМЕСТИТЬ ВТ_ТаблицаКлючевыхОпераций
	|ИЗ
	|	&ТаблицаКлючевыхОпераций КАК ТаблицаКлючевыхОпераций
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИмяКлючевойОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаКлючевыхОпераций.ИмяКлючевойОперации,
	|	ВТ_ТаблицаКлючевыхОпераций.ЦелевоеВремя,
	|	ЕСТЬNULL(КлючевыеОперации.Приоритет, 0) КАК Приоритет,
	|	КлючевыеОперации.Ссылка
	|ИЗ
	|	ВТ_ТаблицаКлючевыхОпераций КАК ВТ_ТаблицаКлючевыхОпераций
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючевыеОперации КАК КлючевыеОперации
	|		ПО ВТ_ТаблицаКлючевыхОпераций.ИмяКлючевойОперации = КлючевыеОперации.Имя
	|ГДЕ
	|	(ВТ_ТаблицаКлючевыхОпераций.ЦелевоеВремя <> КлючевыеОперации.ЦелевоеВремя
	|			ИЛИ КлючевыеОперации.ЦелевоеВремя ЕСТЬ NULL )
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(КлючевыеОперации.Приоритет) КАК Приоритет
	|ИЗ
	|	Справочник.КлючевыеОперации КАК КлючевыеОперации";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Выборка = РезультатЗапроса[1].Выбрать();
	ВыборкаМаксПриоритет = РезультатЗапроса[2].Выбрать();
	
	МаксПриоритет = 0;
	Если ВыборкаМаксПриоритет.Следующий() Тогда
		Если ЗначениеЗаполнено(ВыборкаМаксПриоритет.Приоритет) Тогда
			МаксПриоритет = ВыборкаМаксПриоритет.Приоритет;
		КонецЕсли;
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Приоритет = 0 Тогда
			МаксПриоритет = МаксПриоритет + 1;
		КонецЕсли;
		
		УстановитьРеквизитыКлючевойОперации(
			Выборка.ИмяКлючевойОперации, 
			Выборка.Ссылка, 
			МаксПриоритет, 
			Выборка.ЦелевоеВремя);

	КонецЦикла;

КонецПроцедуры

Процедура ПодготовитьТаблицуЦелевогоВремяКлючевыхОпераций(ТаблицаКлючевыхОпераций)

	///////////////////////
	// Общие формы
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ФормированиеПисьмаПрисоединенныеФайлы", 2);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "КлассическаяОтправкаДокументаПоЭлектроннойПочте", 2);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "БыстраяОтправкаДокументаПоЭлектроннойПочте"     , 6);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОтправкаОтчетаПоЭлектроннойПочте"               , 2);
	
	///////////////////////
	// Общие команды
	
	//	ЖурналОпераций, ЖурналОпераций82
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыЖурналОпераций",				0.5);
	//	ОценкаПроизводительностиФормаСпискаПлатежноеПоручение
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыСпискаПлатежноеПоручение", 		0.5);
	//	ОценкаПроизводительностиФормаСпискаПоступлениеТоваровУслуг
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыСпискаПоступлениеТоваровУслуг", 0.5);
	//	ОценкаПроизводительностиФормаСпискаРеализацияТоваровУслуг
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыСпискаРеализацияТоваровУслуг", 	0.5);
	//	ОценкаПроизводительностиФормаСпискаСчетНаОплатуПокупателю
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыСпискаСчетНаОплатуПокупателям", 0.5);
	//	ОценкаПроизводительностиФормаСпискаСчетНаОплатуПоставщика
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыСпискаСчетНаОплатуПоставщика", 	0.5);
	//	РегистрацияСчетовФактурНаАванс
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыОбработкиРегистрацияСчетовФактурНаАванс",		0.5);
	//	РегламентированныеОтчеты, РегламентированныеОтчеты82, Интерфейс77ОтчетыРегламентированныеОтчеты
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыРегламентированнаяОтчетность", 	0.5);

	///////////////////////
	// Справочники
	
	//	ДоговорыКонтрагентов
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ЗаполнениеДоговораПоШаблону", 				3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ЗаполнениеДоговораПоШаблонуПоставки", 		3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ЗаполнениеДоговораПоШаблонуОказанияУслуг", 	3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ЗаполнениеДоговораПоШаблонуПодряда", 		3);
	//	Контрагенты
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыВыбораКонтрагенты",			0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыКонтрагенты", 				0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыКонтрагенты", 				0.5);

	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ЗагрузкаКарточкиКонтрагентаИзФайла", 0.5);

	//	Номенклатура
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыВыбораНоменклатура",		0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыНоменклатура", 				0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыНоменклатура", 				0.5);
	//	Организации
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыОрганизации", 				0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СохранениеИзмененийВОрганизации", 		1);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СохранениеИзмененийВЗарплатеОрганизации",1);
	//	ФизическиеЛица
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыСотрудник",					0.5);


	///////////////////////
	// Документы

	// АвансовыйОтчет
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыАвансовыйОтчет", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеАвансовыйОтчет", 		3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыАвансовыйОтчет", 	0.5);
	// АктОбОказанииПроизводственныхУслуг
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыАктОбОказанииПроизводственныхУслуг", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеАктОбОказанииПроизводственныхУслуг", 		3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыАктОбОказанииПроизводственныхУслуг", 	0.5);
	// АктСверкиВзаиморасчетов
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ЗаполнениеАктаСверкиВзаиморасчетов",		5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыАктСверкиВзаиморасчетов", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеАктСверкиВзаиморасчетов", 		3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыАктСверкиВзаиморасчетов", 	0.5);
	// ВозвратМатериаловИзЭксплуатации
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыВозвратМатериаловИзЭксплуатации", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеВозвратМатериаловИзЭксплуатации", 		3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыВозвратМатериаловИзЭксплуатации",	0.5);
	// ВозвратТоваровОтПокупателя
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыВозвратТоваровОтПокупателя", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеВозвратТоваровОтПокупателя", 		3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыВозвратТоваровОтПокупателя", 	0.5);
	// ВозвратТоваровПоставщику
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыВозвратТоваровПоставщику", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеВозвратТоваровПоставщику", 	3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыВозвратТоваровПоставщику", 	0.5);
	// ВосстановлениеНДС
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыВосстановлениеНДС", 0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеВосстановлениеНДС", 	3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыВосстановлениеНДС", 0.5);
	// ВосстановлениеНДСПоОбъектамНедвижимости
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыВосстановлениеНДСПоОбъектамНедвижимости", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеВосстановлениеНДСПоОбъектамНедвижимости", 		3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыВосстановлениеНДСПоОбъектамНедвижимости", 	0.5);
	// ВыдачаДенежныхДокументов
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыВыдачаДенежныхДокументов", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеВыдачаДенежныхДокументов", 	3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыВыдачаДенежныхДокументов", 	0.5);
	// ГТДИмпорт
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыГТДИмпорт", 0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеГТДИмпорт", 	3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыГТДИмпорт", 0.5);
	// Доверенность
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыДоверенность", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеДоверенность", 	3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыДоверенность", 	0.5);
	// ИнвентаризацияНЗП
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыИнвентаризацияНЗП", 0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеИнвентаризацияНЗП", 	3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыИнвентаризацияНЗП", 0.5);
	// ИнвентаризацияОС
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыИнвентаризацияОС", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеИнвентаризацияОС", 	3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыИнвентаризацияОС", 	0.5);
	// ИнвентаризацияТоваровНаСкладе
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыИнвентаризацияТоваровНаСкладе", 0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеИнвентаризацияТоваровНаСкладе", 	3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыИнвентаризацияТоваровНаСкладе", 0.5);
	// КомплектацияНоменклатуры
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыКомплектацияНоменклатуры", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеКомплектацияНоменклатуры", 	3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыКомплектацияНоменклатуры", 	0.5);
	// КорректировкаДолга
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыКорректировкаДолга", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеКорректировкаДолга", 		3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыКорректировкаДолга", 	0.5);
	// КорректировкаПоступления
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыКорректировкаПоступления", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеКорректировкаПоступления", 	3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыКорректировкаПоступления", 	0.5);
	// КорректировкаРеализации
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыКорректировкаРеализации", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеКорректировкаРеализации", 		3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыКорректировкаРеализации", 	0.5);
	// МодернизацияОС
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыМодернизацияОС", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеМодернизацияОС", 		3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыМодернизацияОС", 	0.5);
	// НачислениеЗарплаты
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыНачислениеЗарплаты",		0.5);
	// НачислениеНДСпоСМРхозспособом
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыНачислениеНДСпоСМРхозспособом", 0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеНачислениеНДСпоСМРхозспособом", 	3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыНачислениеНДСпоСМРхозспособом", 0.5);
	// ОказаниеУслуг
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыОказаниеУслуг", 0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеОказаниеУслуг", 	3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыОказаниеУслуг", 0.5);
	// ОперацияБух
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ЗаписьОперацияБух", 			3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыОперацияБух", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыОперацияБух", 	0.5);
	// ОприходованиеТоваров
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыОприходованиеТоваров", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеОприходованиеТоваров", 	3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыОприходованиеТоваров", 	0.5);
	// ОтражениеЗарплатыВУчете
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыОтражениеЗарплатыВУчете", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеОтражениеЗарплатыВУчете", 		3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыОтражениеЗарплатыВУчете", 	0.5);
	// ОтражениеНачисленияНДС
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыОтражениеНачисленияНДС", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеОтражениеНачисленияНДС", 		3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыОтражениеНачисленияНДС", 	0.5);
	// ОтражениеНДСКВычету
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыОтражениеНДСКВычету", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеОтражениеНДСКВычету", 		3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыОтражениеНДСКВычету", 	0.5);
	// ОтчетКомиссионераОПродажах
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыОтчетКомиссионераОПродажах", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеОтчетКомиссионераОПродажах", 		3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыОтчетКомиссионераОПродажах", 	0.5);
	// ОтчетКомитенту
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыОтчетКомитентуОЗакупках", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыОтчетКомитентуОПродажах", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеОтчетКомитентуОЗакупках", 		3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеОтчетКомитентуОПродажах", 		3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыОтчетКомитентуОЗакупках", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыОтчетКомитентуОПродажах", 	0.5);
	// ОтчетОРозничныхПродажах
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыОтчетОРозничныхПродажах", 0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеОтчетОРозничныхПродажах",		2);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыОтчетОРозничныхПродажах", 0.5);
	// ОтчетПроизводстваЗаСмену
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыОтчетПроизводстваЗаСмену", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеОтчетПроизводстваЗаСмену", 	3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыОтчетПроизводстваЗаСмену", 	0.5);
	// ПередачаМатериаловВЭксплуатацию
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыПередачаМатериаловВЭксплуатацию", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеПередачаМатериаловВЭксплуатацию", 		3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыПередачаМатериаловВЭксплуатацию", 	0.5);
	// ПередачаНМА
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыПередачаНМА", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеПередачаНМА", 		3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыПередачаНМА", 	0.5);
	// ПередачаОборудованияВМонтаж
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыПередачаОборудованияВМонтаж", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеПередачаОборудованияВМонтаж", 		3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыПередачаОборудованияВМонтаж",	0.5);
	// ПередачаОС
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыПередачаОС", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеПередачаОС", 		3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыПередачаОС", 	0.5);
	// ПередачаТоваров
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыПередачаТоваров", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеПередачаТоваров", 		3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыПередачаТоваров", 	0.5);
	// ПеремещениеОС
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыПеремещениеОС", 0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеПеремещениеОС", 	3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыПеремещениеОС", 0.5);
	// ПеремещениеТоваров
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыПеремещениеТоваров", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеПеремещениеТоваров", 		3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыПеремещениеТоваров", 	0.5);
	// ПереоценкаТоваровВРознице
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыПереоценкаТоваровВРознице", 0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеПереоценкаТоваровВРознице", 	3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыПереоценкаТоваровВРознице", 0.5);
	// ПлатежноеПоручение
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыПлатежноеПоручение", 		0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеПлатежноеПоручение", 			3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыПлатежноеПоручение", 		0.5);

	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ЗагрузкаСчетаНаОплатуИзФайла", 0.5);

	// ПлатежноеТребование
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыПлатежноеТребование", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеПлатежноеТребование", 		3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыПлатежноеТребование", 	0.5);
	// ПодготовкаКПередачеОС
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыПодготовкаКПередачеОС", 0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеПодготовкаКПередачеОС", 	3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыПодготовкаКПередачеОС", 0.5);
	// ПодтверждениеНулевойСтавкиНДС
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыПодтверждениеНулевойСтавкиНДС", 0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеПодтверждениеНулевойСтавкиНДС", 	5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыПодтверждениеНулевойСтавкиНДС", 0.5);
	// ПоступлениеДенежныхДокументов
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыПоступлениеДенежныхДокументов", 0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеПоступлениеДенежныхДокументов", 	3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыПоступлениеДенежныхДокументов", 0.5);
	// ПоступлениеДопРасходов
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыПоступлениеДопРасходов", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеПоступлениеДопРасходов", 		3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыПоступлениеДопРасходов", 	0.5);
	// ПоступлениеИзПереработки
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыПоступлениеИзПереработки", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеПоступлениеИзПереработки", 	3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыПоступлениеИзПереработки", 	0.5);
	//	ПоступлениеНаРасчетныйСчет
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыПоступлениеНаРасчетныйСчет", 0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеПоступлениеНаРасчетныйСчет", 	2);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыПоступлениеНаРасчетныйСчет", 0.5);
	// ПоступлениеНМА
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыПоступлениеНМА", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеПоступлениеНМА", 		3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыПоступлениеНМА", 	0.5);
	//	ПоступлениеТоваровИУслуг
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыПоступлениеТоваровУслугОбщая", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыПоступлениеТоваровУслугТовары", 0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыПоступлениеТоваровУслугУслуги", 0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеПоступлениеТоваровИУслуг", 		2);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыПоступлениеТоваровУслугОбщая", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыПоступлениеТоваровУслугТовары", 0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыПоступлениеТоваровУслугУслуги", 0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПечатьПоступлениеТоваровУслугНакладная", 1);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПечатьПоступлениеТоваровУслугТОРГ12_БезУслуг", 1);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПечатьПоступлениеТоваровУслугТОРГ12", 1);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПечатьПоступлениеТоваровУслугТОРГ4", 1);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПечатьПоступлениеТоваровУслугОС14", 1);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПечатьПоступлениеТоваровУслугМ4", 1);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПечатьПоступлениеТоваровУслугСчетФактураПолученный", 1);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПечатьПоступлениеТоваровУслугРублевыеСуммыДокументаВВалюте", 1);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПечатьПоступлениеТоваровУслугАкт", 1);
	// ПринятиеКУчетуНМА
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыПринятиеКУчетуНМА", 0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеПринятиеКУчетуНМА", 	3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыПринятиеКУчетуНМА", 0.5);
	// ПринятиеКУчетуОС
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыПринятиеКУчетуОС", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеПринятиеКУчетуОС", 	3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыПринятиеКУчетуОС", 	0.5);
	// ПриходныйКассовыйОрдер
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыПриходныйКассовыйОрдер", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеПриходныйКассовыйОрдер", 		2);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыПриходныйКассовыйОрдер", 	0.5);
	// РаспределениеНДС
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыРаспределениеНДС", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеРаспределениеНДС", 	10);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыРаспределениеНДС", 	0.5);
	// РасходныйКассовыйОрдер
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыРасходныйКассовыйОрдер", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеРасходныйКассовыйОрдер", 		2);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеРасходныйКассовыйОрдерУплатаНалога", 2);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыРасходныйКассовыйОрдер", 	0.5);
	// РеализацияОтгруженныхТоваров
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыРеализацияОтгруженныхТоваров", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеРеализацияОтгруженныхТоваров", 	3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыРеализацияОтгруженныхТоваров", 	0.5);
	//	РеализацияТоваровИУслуг
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыРеализацияТоваровУслугОбщая", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыРеализацияТоваровУслугТовары", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыРеализацияТоваровУслугУслуги", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеРеализацияТоваровИУслуг", 			3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыРеализацияТоваровУслугОбщая", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыРеализацияТоваровУслугТовары", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыРеализацияТоваровУслугУслуги", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПечатьРеализацияТоваровУслугНакладная", 1);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПечатьРеализацияТоваровУслугАкт", 1);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПечатьРеализацияТоваровУслугАктНаПередачуПрав", 1);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПечатьРеализацияТоваровУслугТОРГ12", 1);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПечатьРеализацияТоваровУслугТОРГ12_БезУслуг", 1);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПечатьРеализацияТоваровУслугМ15", 1);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПечатьРеализацияТоваровУслугТранспортнаяНакладная", 1);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПечатьРеализацияТоваровУслугТТН", 1);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПечатьРеализацияТоваровУслугСчетФактура", 1);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПечатьРеализацияТоваровУслугРублевыеСуммыДокументаВВалюте", 1);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПечатьРеализацияТоваровУслугУниверсальныйПередаточныйДокумент", 1);
	// РеализацияУслугПоПереработке
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыРеализацияУслугПоПереработке", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеРеализацияУслугПоПереработке", 	3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыРеализацияУслугПоПереработке", 	0.5);
	// РегламентнаяОперация
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыРегламентнаяОперация", 0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыРегламентнаяОперация", 0.5);
	// СписаниеМатериаловИзЭксплуатации
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыСписаниеМатериаловИзЭксплуатации", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеСписаниеМатериаловИзЭксплуатации", 	3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыСписаниеМатериаловИзЭксплуатации", 	0.5);
	// СписаниеНДС
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыСписаниеНДС", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеСписаниеНДС", 		3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыСписаниеНДС", 	0.5);
	// СписаниеНМА
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыСписаниеНМА", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеСписаниеНМА", 		3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыСписаниеНМА", 	0.5);
	// СписаниеОС
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыСписаниеОС", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеСписаниеОС", 		3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыСписаниеОС", 	0.5);
	// СписаниеСРасчетногоСчета
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыСписаниеСРасчетногоСчета", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеСписаниеСРасчетногоСчета",		2);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыСписаниеСРасчетногоСчета", 	0.5);
	// СписаниеТоваров
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыСписаниеТоваров", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеСписаниеТоваров", 		3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыСписаниеТоваров", 	0.5);
	//	СчетНаОплатуПокупателю
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыСчетНаОплатуПокупателям", 		0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеСчетНаОплатуПокупателю", 			3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыСчетНаОплатуПокупателям", 		0.5);
	//	СчетНаОплатуПоставщика
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыСчетНаОплатуПоставщика", 		0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеСчетНаОплатуПоставщика", 			3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыСчетНаОплатуПоставщика", 		0.5);
	//	СчетФактураВыданный
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыСчетФактураВыданныйНаРеализацию", 		0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыСчетФактураВыданныйНаАванс", 			0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыСчетФактураВыданныйНалоговыйАгент", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыСчетФактураВыданныйКорректировочный", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыСчетФактураВыданныйНаСуммовуюРазницу", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеСчетФактураВыданныйНаРеализацию", 			2);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеСчетФактураВыданныйНаАванс", 				2);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеСчетФактураВыданныйНалоговыйАгент", 		2);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеСчетФактураВыданныйКорректировочный", 		2);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеСчетФактураВыданныйНаСуммовуюРазницу", 	2);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыСчетФактураВыданныйНаРеализацию", 		0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыСчетФактураВыданныйНаАванс", 			0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыСчетФактураВыданныйНалоговыйАгент", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыСчетФактураВыданныйКорректировочный", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыСчетФактураВыданныйНаСуммовуюРазницу", 	0.5);
	//	СчетФактураПолученный
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыСчетФактураПолученныйНаПоступление",			0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыСчетФактураПолученныйБланкСтрогойОтчетности",	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыСчетФактураПолученныйНаАванс",					0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыСчетФактураПолученныйКорректировочный",			0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеСчетФактураПолученныйНаПоступление",				3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеСчетФактураПолученныйБланкСтрогойОтчетности",		3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеСчетФактураПолученныйНаАванс",						3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеСчетФактураПолученныйКорректировочный",			3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыСчетФактураПолученныйНаПоступление",			0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыСчетФактураПолученныйБланкСтрогойОтчетности",	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыСчетФактураПолученныйНаАванс",					0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыСчетФактураПолученныйКорректировочный",			0.5);
	// ТребованиеНакладная
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыТребованиеНакладная", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеТребованиеНакладная", 		3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыТребованиеНакладная", 	0.5);
	// УстановкаЦенНоменклатуры
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыУстановкаЦенНоменклатуры", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеУстановкаЦенНоменклатуры", 	3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыУстановкаЦенНоменклатуры", 	0.5);
	// ФормированиеЗаписейКнигиПокупок
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыФормированиеЗаписейКнигиПокупок", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеФормированиеЗаписейКнигиПокупок", 		10);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыФормированиеЗаписейКнигиПокупок", 	0.5);
	// ФормированиеЗаписейКнигиПродаж
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыФормированиеЗаписейКнигиПродаж", 	0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПроведениеФормированиеЗаписейКнигиПродаж", 		10);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеФормыФормированиеЗаписейКнигиПродаж", 	0.5);

	///////////////////////
	// Журналы документов
	
	// 	БанковскиеВыписки
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОтборПоОрганизациямВЖурналеВыпискиПоБанку", 	1);
	
	// ЖурналОпераций
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыСпискаДокументовПоКонтрагенту",         0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыСпискаДокументовПоДоговоруКонтрагента", 0.5);
	
	///////////////////////
	// Отчеты
	
	//	АнализСчета
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ФормированиеОтчетаАнализСчета",					1);
	//	КарточкаСчета	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ФормированиеОтчетаКарточкаСчета", 				6);
	//	ОборотноСальдоваяВедомость
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ФормированиеОтчетаОборотноСальдоваяВедомость",	2);
	//	ОборотноСальдоваяВедомостьПоСчету
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ФормированиеОтчетаОборотноСальдоваяВедомостьПоСчету", 	2);
	//	ОборотыСчета
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ФормированиеОтчетаОборотыСчета",				1);
	//	ОтчетПоПроводкам
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ФормированиеОтчетаОтчетПоПроводкам",			2);
	//	РегламентированныйОтчетБухОтчетность
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыБухгалтерскаяОтчетность", 		0.5);
	//	РегламентированныйОтчет4ФСС
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ЗаполнениеФормыНалоговаяОтчетность4ФСС",		1);
	//	РегламентированныйОтчетБухОтчетность
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ЗаполнениеФормыБухгалтерскаяОтчетность",		120);
	//	РегламентированныйОтчетНДС
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ЗаполнениеФормыРеглОтчетаНДС",				1);
	//	РегламентированныйОтчетПрибыль
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ЗаполнениеФормыНалоговаяОтчетностьПрибыль",	120);
	//	РегламентированныйОтчетРСВ1
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ЗаполнениеФормыНалоговаяОтчетностьРСВ1",		1);
	// АнализНеоплаченныхСчетовПокупателям
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ФормированиеОтчетаАнализНеоплаченныхСчетовПокупателям"     , 5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ФормированиеПисьмаОтчетАнализНеоплаченныхСчетовПокупателям", 5);
	
	///////////////////////
	// Обработки
	
	//	ДокументооборотСКонтролирующимиОрганами
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыРегламентированнаяОтчетность",		0.5);
	//	ЗакрытиеМесяца
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ЗакрытиеМесяца", 					300);
	//	КлиентБанк	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОбновлениеФормыПриВыбореВыписокДляЗагрузкеИзКлиентБанка", 0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ВремяЧтенияФайлаПриВыбореВыписокДляЧтенияИзКлиентБанка",  2);
	//	ОбщиеОбъектыРегламентированнойОтчетности
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыРеглОтчета4ФСС",		0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыРеглОтчетаНДС",			0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыРеглОтчетаПрибыль",		0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ОткрытиеФормыРеглОтчетаРСВ1",		0.5);
	//	ПодготовкаКвартальнойОтчетностиВПФР
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ПриАктивизацииСтрокиВФормеКвартальнаяОтчетностьВПФР",		0.5);
	// 	РегистрацияСчетовФактурНаАванс
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеСчетФактурыНаАвансЗаполнение", 20);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "СозданиеСчетФактурыНаАвансВыполнение", 20);

	// ЧтениеЭДИзЭлектроннойПочты

	///////////////////////

	// Актуализация данных
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ЗагрузкаСчетаНаОплатуИзЭлектроннойПочты", 2);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "ЗагрузкаКарточкиКонтрагентаИзЭлектроннойПочты", 2);

	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "АктуализацияДанныхСкрыть",                                             0.5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "АктуализацияДанныхНачалоАктуализации",                                 0.5);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "АктуализацияДанныхВыполненаАктуализацияЗаПериодДоКвартала",            300*2*3);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "АктуализацияДанныхВыполненаАктуализацияЗаПериодОтКварталаДоПолугодия", 300*2*6);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "АктуализацияДанныхВыполненаАктуализацияЗаПериодОтПолугодияДоГода",     300*2*12);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "АктуализацияДанныхВыполненаАктуализацияЗаПериодБольшеГода",            300*2*36);
	
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "АктуализацияДанныхТребуетсяАктуализацияЗаПериодДоКвартала",            5);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "АктуализацияДанныхТребуетсяАктуализацияЗаПериодОтКварталаДоПолугодия", 5*2);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "АктуализацияДанныхТребуетсяАктуализацияЗаПериодОтПолугодияДоГода",     5*4);
	ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, "АктуализацияДанныхТребуетсяАктуализацияЗаПериодБольшеГода",            5*12);
	
КонецПроцедуры

Процедура ДобавитьЦелевоеВремя(ТаблицаКлючевыхОпераций, ИмяКлючевойОперации, ЦелевоеВремя)

	НоваяСтрока = ТаблицаКлючевыхОпераций.Добавить();
	НоваяСтрока.ИмяКлючевойОперации = ИмяКлючевойОперации;
	НоваяСтрока.ЦелевоеВремя 		= ЦелевоеВремя;

КонецПроцедуры 

Процедура УстановитьРеквизитыКлючевойОперации(ИмяКлючевойОперации, Знач СсылкаНаКлючевуюОперацию, Приоритет, ЦелевоеВремя)
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаКлючевуюОперацию) Тогда
		СсылкаНаКлючевуюОперацию = ОценкаПроизводительностиВызовСервераПовтИсп.ПолучитьКлючевуюОперациюПоИмени(ИмяКлючевойОперации);
	КонецЕсли;
	СпрОбъект = СсылкаНаКлючевуюОперацию.ПолучитьОбъект();

	СпрОбъект.ДополнительныеСвойства.Вставить(ОценкаПроизводительностиКлиентСервер.НеПроверятьПриоритет());
	
	СпрОбъект.ПометкаУдаления				= Ложь;
	СпрОбъект.Имя							= ИмяКлючевойОперации;
	СпрОбъект.МинимальноДопустимыйУровень 	= Перечисления.УровниПроизводительности.Хорошо;
	Если НЕ ЗначениеЗаполнено(СпрОбъект.Приоритет) Тогда
		СпрОбъект.Приоритет					= Приоритет;
	КонецЕсли;
	СпрОбъект.ЦелевоеВремя					= ЦелевоеВремя;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОбъект, Ложь, Ложь);
	
КонецПроцедуры

Процедура УстановитьВестиУчетЗатратПоПодразделениям() Экспорт
	
	Если БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям() Тогда
		Константы.ВестиУчетЗатратПоПодразделениям.Установить(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКонстантуИспользоватьНесколькоОтветственных() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Константы.ИспользоватьНесколькоОтветственных.Установить(Истина);
	
КонецПроцедуры

Процедура УдалитьНастройкиФормСтандартныхОтчетов() Экспорт
	
	НастройкиФормСтандартныхОтчетов = Новый Массив;
	НастройкиФормСтандартныхОтчетов.Добавить("Отчет.ОборотноСальдоваяВедомость.Форма.ФормаОтчета/НастройкиФормы");
	НастройкиФормСтандартныхОтчетов.Добавить("Отчет.ОборотноСальдоваяВедомостьПоСчету.Форма.ФормаОтчета/НастройкиФормы");
	НастройкиФормСтандартныхОтчетов.Добавить("Отчет.АнализСчета.Форма.ФормаОтчета/НастройкиФормы");
	НастройкиФормСтандартныхОтчетов.Добавить("Отчет.КарточкаСчета.Форма.ФормаОтчета/НастройкиФормы");
	НастройкиФормСтандартныхОтчетов.Добавить("Отчет.ОборотыСчета.Форма.ФормаОтчета/НастройкиФормы");
	НастройкиФормСтандартныхОтчетов.Добавить("Отчет.АнализСубконто.Форма.ФормаОтчета/НастройкиФормы");
	НастройкиФормСтандартныхОтчетов.Добавить("Отчет.КарточкаСубконто.Форма.ФормаОтчета/НастройкиФормы");
	НастройкиФормСтандартныхОтчетов.Добавить("Отчет.ОборотыМеждуСубконто.Форма.ФормаОтчета/НастройкиФормы");
	НастройкиФормСтандартныхОтчетов.Добавить("Отчет.СводныеПроводки.Форма.ФормаОтчета/НастройкиФормы");
	НастройкиФормСтандартныхОтчетов.Добавить("Отчет.ОтчетПоПроводкам.Форма.ФормаОтчета/НастройкиФормы");
	НастройкиФормСтандартныхОтчетов.Добавить("Отчет.ГлавнаяКнига.Форма.ФормаОтчета/НастройкиФормы");
	НастройкиФормСтандартныхОтчетов.Добавить("Отчет.ШахматнаяВедомость.Форма.ФормаОтчета/НастройкиФормы");
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого Настройка Из НастройкиФормСтандартныхОтчетов Цикл
		ХранилищеСистемныхНастроек.Удалить(Настройка, Неопределено, Неопределено);
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьНастройкиФормОтчетов() Экспорт
	
	НастройкиФормСтандартныхОтчетов = Новый Массив;
	НастройкиФормСтандартныхОтчетов.Добавить("Отчет.СправкаРасчетНалогаНаПрибыль.Форма.ФормаОтчета/НастройкиФормы");
	НастройкиФормСтандартныхОтчетов.Добавить("Отчет.СправкаРасчетРезервыПоСомнительнымДолгам.Форма.ФормаОтчета/НастройкиФормы");
	НастройкиФормСтандартныхОтчетов.Добавить("Отчет.СправкаРасчетРаспределенияКосвенныхРасходов.Форма.ФормаОтчета/НастройкиФормы");
	НастройкиФормСтандартныхОтчетов.Добавить("Отчет.СправкаРасчетАмортизации.Форма.ФормаОтчета/НастройкиФормы");
	НастройкиФормСтандартныхОтчетов.Добавить("Отчет.СправкаРасчетСписанияКосвенныхРасходов.Форма.ФормаОтчета/НастройкиФормы");
	НастройкиФормСтандартныхОтчетов.Добавить("Отчет.СправкаРасчетКалькуляцияСебестоимости.Форма.ФормаОтчета/НастройкиФормы");
	НастройкиФормСтандартныхОтчетов.Добавить("Отчет.РегистрыНалоговогоУчета.Форма.ФормаОтчета/НастройкиФормы");
	НастройкиФормСтандартныхОтчетов.Добавить("Отчет.РегистрыБУСубъектовМалогоПредпринимательства.Форма.ФормаОтчета/НастройкиФормы");
	НастройкиФормСтандартныхОтчетов.Добавить("Отчет.АнализДвиженийДенежныхСредств.Форма.ФормаОтчета/НастройкиФормы");
	НастройкиФормСтандартныхОтчетов.Добавить("Отчет.ОстаткиНДСПоАвансамПокупателей.Форма.ФормаОтчета/НастройкиФормы");
	НастройкиФормСтандартныхОтчетов.Добавить("Отчет.ВедомостьАмортизацииОСБухгалтерскийУчет.Форма.ФормаОтчета/НастройкиФормы");
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого Настройка Из НастройкиФормСтандартныхОтчетов Цикл
		ХранилищеСистемныхНастроек.Удалить(Настройка, Неопределено, Неопределено);
	КонецЦикла;
	
КонецПроцедуры

// Установка значения констант - функциональных опций по комиссионной деятельности
//
Процедура УстановитьКонстантыПоКомиссионнойДеятельности() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК ОсуществляетсяРеализацияТоваровУслугКомитентов,
	|	0 КАК ОсуществляетсяРеализацияТоваровУслугЧерезКомиссионеров,
	|	0 КАК ОсуществляетсяЗакупкаТоваровУслугДляКомитентов,
	|	0 КАК ОсуществляетсяЗакупкаТоваровУслугЧерезКомиссионеров
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомитентом)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	0,
	|	1,
	|	0,
	|	0
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	0,
	|	0,
	|	1,
	|	0
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	0,
	|	0,
	|	0,
	|	1
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку)
	|ИТОГИ
	|	СУММА(ОсуществляетсяРеализацияТоваровУслугКомитентов),
	|	СУММА(ОсуществляетсяРеализацияТоваровУслугЧерезКомиссионеров),
	|	СУММА(ОсуществляетсяЗакупкаТоваровУслугДляКомитентов),
	|	СУММА(ОсуществляетсяЗакупкаТоваровУслугЧерезКомиссионеров)
	|ПО
	|	ОБЩИЕ";

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
				
		ОсуществляетсяРеализацияТоваровУслугКомитентов = Константы.ОсуществляетсяРеализацияТоваровУслугКомитентов.СоздатьМенеджерЗначения();
		ОсуществляетсяРеализацияТоваровУслугКомитентов.Значение = Выборка.ОсуществляетсяРеализацияТоваровУслугКомитентов > 0;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОсуществляетсяРеализацияТоваровУслугКомитентов); 
		
		ОсуществляетсяРеализацияТоваровУслугЧерезКомиссионеров = Константы.ОсуществляетсяРеализацияТоваровУслугЧерезКомиссионеров.СоздатьМенеджерЗначения();
		ОсуществляетсяРеализацияТоваровУслугЧерезКомиссионеров.Значение = Выборка.ОсуществляетсяРеализацияТоваровУслугЧерезКомиссионеров > 0;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОсуществляетсяРеализацияТоваровУслугЧерезКомиссионеров); 
		
		ОсуществляетсяЗакупкаТоваровУслугДляКомитентов = Константы.ОсуществляетсяЗакупкаТоваровУслугДляКомитентов.СоздатьМенеджерЗначения();
		ОсуществляетсяЗакупкаТоваровУслугДляКомитентов.Значение = Выборка.ОсуществляетсяЗакупкаТоваровУслугДляКомитентов > 0;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОсуществляетсяЗакупкаТоваровУслугДляКомитентов); 
		
		ОсуществляетсяЗакупкаТоваровУслугЧерезКомиссионеров = Константы.ОсуществляетсяЗакупкаТоваровУслугЧерезКомиссионеров.СоздатьМенеджерЗначения();
		ОсуществляетсяЗакупкаТоваровУслугЧерезКомиссионеров.Значение = Выборка.ОсуществляетсяЗакупкаТоваровУслугЧерезКомиссионеров > 0;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОсуществляетсяЗакупкаТоваровУслугЧерезКомиссионеров); 
	
	 КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПоказыватьСчетаВДокументах() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Пользователи.Ссылка,
	|	Пользователи.ИдентификаторПользователяИБ
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.ИдентификаторПользователяИБ) Тогда
			
			Пользователь = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Выборка.ИдентификаторПользователяИБ);
			Если Пользователь <> Неопределено Тогда
				
				ОбщегоНазначенияБПВызовСервера.УстановитьЗначениеПоУмолчанию("ПоказыватьСчетаУчетаВДокументах", Истина, Пользователь.Имя);
				
			КонецЕсли;
			
		ИначеЕсли НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
			
			ОбщегоНазначенияБПВызовСервера.УстановитьЗначениеПоУмолчанию("ПоказыватьСчетаУчетаВДокументах", Истина, "");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
