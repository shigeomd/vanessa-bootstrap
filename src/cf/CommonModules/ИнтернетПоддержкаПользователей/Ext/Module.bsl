
////////////////////////////////////////////////////////////////////////////////
// Подсистема "Интернет-поддержка пользователей"
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает логин и пароль пользователя Интернет-поддержки,
// сохраненные в информационной базе.
//
// Возвращаемое значение:
//	Структура - структура, содержащая логин и пароль пользователя
//		Интернет-поддержки:
//		* Логин - Строка - логин пользователя Интернет-поддержки;
//		* Пароль - Строка - пароль пользователя Интернет-поддержки, отсутствует,
//			если пользователь не установил флаг "Запомнить меня".
//	Неопределено - при отсутствии сохраненных данных авторизации.
//
Функция ДанныеАутентификацииПользователяИнтернетПоддержки() Экспорт
	
	ЗапросПараметров = Новый Запрос(
	"ВЫБРАТЬ
	|	ПараметрыИнтернетПоддержкиПользователей.Имя КАК ИмяПараметра,
	|	ПараметрыИнтернетПоддержкиПользователей.Значение КАК ЗначениеПараметра
	|ИЗ
	|	РегистрСведений.ПараметрыИнтернетПоддержкиПользователей КАК ПараметрыИнтернетПоддержкиПользователей
	|ГДЕ
	|	ПараметрыИнтернетПоддержкиПользователей.Имя В (""login"", ""password"")
	|	И ПараметрыИнтернетПоддержкиПользователей.Пользователь = &ПустойИдентификатор");
	
	ЗапросПараметров.УстановитьПараметр("ПустойИдентификатор",
		Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	
	ЛогинПользователя  = Неопределено;
	ПарольПользователя = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	ВыборкаПараметров = ЗапросПараметров.Выполнить().Выбрать();
	Пока ВыборкаПараметров.Следующий() Цикл
		
		// В запросе регистр символов не учитывается
		ИмяПараметраНРег = НРег(ВыборкаПараметров.ИмяПараметра);
		Если ИмяПараметраНРег = "login" Тогда
			ЛогинПользователя = ВыборкаПараметров.ЗначениеПараметра;
			
		ИначеЕсли ИмяПараметраНРег = "password" Тогда
			ПарольПользователя = ВыборкаПараметров.ЗначениеПараметра;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЛогинПользователя <> Неопределено И ПарольПользователя <> Неопределено Тогда
		Возврат Новый Структура("Логин, Пароль", ЛогинПользователя, ПарольПользователя);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Определяет, разрешено ли использование Интернет-поддержки в текущем режиме
// работы информационной базы.
// Определяет на основании значений: 1) Это локальный режим работы;
// 2) реализации процедуры
// ИнтернетПоддержкаПользователейПереопределяемый.ИспользоватьИнтернетПоддержку()
//
// Возвращаемое значение:
//	Булево - Истина - использование разрешено, Ложь - в противном случае.
//
Функция ИспользованиеИнтернетПоддержкиРазрешеноВТекущемРежимеРаботы() Экспорт
	
	// Запрет работы в модели сервиса
	Отказ = ОбщегоНазначенияПовтИсп.РазделениеВключено();
	Если НЕ Отказ Тогда
		
		// Если работа в локальном режиме, тогда выполнить дополнительную проверку разрешения
		ИнтернетПоддержкаПользователейПереопределяемый.ИспользоватьИнтернетПоддержку(Отказ);
		Если ТипЗнч(Отказ) <> Тип("Булево") Тогда
			Отказ = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат (Отказ = Ложь);
	
КонецФункции

// Добавляет необходимые параметры работы клиента при запуске.
//
// Параметры:
//	Параметры - Структура - заполняемые параметры;
//
Процедура ПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	ПараметрыИПП = Новый Структура;
	
	ОписаниеОбработчиков = ИнтернетПоддержкаПользователейСлужебныйПовтИсп.ОбработчикиСобытий();
	
	Для каждого ИмяМодуля Из ОписаниеОбработчиков.Сервер.ПараметрыРаботыКлиентаПриЗапуске Цикл
		МодульОбработчика = ОбщегоНазначения.ОбщийМодуль(ИмяМодуля);
		Если МодульОбработчика <> Неопределено Тогда
			МодульОбработчика.ПараметрыРаботыКлиентаПриЗапуске(ПараметрыИПП);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыИПП.Вставить("ПриНачалеРаботыСистемы", ОписаниеОбработчиков.Клиент.ПриНачалеРаботыСистемы);
	
	Параметры.Вставить("ИнтернетПоддержкаПользователей", ПараметрыИПП);
	
КонецПроцедуры

// Добавляет необходимые параметры работы клиента.
//
// Параметры:
//	Параметры - Структура - заполняемые параметры;
//
Процедура ПараметрыРаботыКлиента(Параметры) Экспорт
	
	ПараметрыИПП = Новый Структура;
	
	// Имя и версия конфигурации для использования на клиенте
	ПараметрыИПП.Вставить("ИмяКонфигурации"          , Метаданные.Имя);
	ПараметрыИПП.Вставить("ВерсияКонфигурации"       , Метаданные.Версия);
	ПараметрыИПП.Вставить("КодЛокализации"           , ТекущийКодЛокализации());
	ПараметрыИПП.Вставить("ВерсияОбработкиОбновления", ВерсияОбработкиОбновления());
	
	// Обработчики бизнес-процессов
	ПараметрыИПП.Вставить("КлиентскиеОбработчикиБизнесПроцессов",
		ИнтернетПоддержкаПользователейСлужебныйПовтИсп.ОбработчикиСобытий().Клиент.БизнесПроцессы);
	
	Параметры.Вставить("ИнтернетПоддержкаПользователей", ПараметрыИПП);
	
КонецПроцедуры

// см. описание этой же процедуры в РаботаВБезопасномРежимеПереопределяемый
// из СтандартныеПодсистемы.БазоваяФункциональность
//
// Параметры:
//	ЗапросыРазрешений - заполняемые разрешения;
//
// Пример использования в переопределяемой процедуре
// РаботаВБезопасномРежимеПереопределяемый.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам():
// 
//	// ИнтернетПоддержкаПользователей
//	ИнтернетПоддержкаПользователей.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(Разрешения)
//	// Конец ИнтернетПоддержкаПользователей
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	Если ИспользованиеИнтернетПоддержкиРазрешеноВТекущемРежимеРаботы() Тогда
		
		ОписаниеРесурса = ИнтернетПоддержкаПользователейКлиентСервер.ОписаниеРесурсаИнтернетПоддержки();
		Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
			ОписаниеРесурса.Протокол,
			ОписаниеРесурса.Адрес,
			ОписаниеРесурса.Порт,
			ОписаниеРесурса.Описание);
		
		ЗапросыРазрешений.Добавить(Разрешение);
		
	КонецЕсли;
	
КонецПроцедуры

// см. описание этой же процедуры в ОбщегоНазначенияПереопределяемый
Процедура ПриДобавленииПереименованийОбъектовМетаданных(Итог) Экспорт
	
	// Базовая функциональность БИП
	// 2.1.2.1
	ОбщегоНазначения.ДобавитьПереименование(
		Итог,
		"2.1.2.1",
		"Роль.ИспользованиеИПП",
		"Роль.ПодключениеКСервисуИнтернетПоддержки",
		"ИнтернетПоддержкаПользователей");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает версию обработки обновления конфигурации.
Функция ВерсияОбработкиОбновления() Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОбновлениеКонфигурации") Тогда
		
		ПодсистемаСтандартныеПодсистемы = Новый Структура("Имя, Версия");
		ОбновлениеИнформационнойБазыБСП.ПриДобавленииПодсистемы(ПодсистемаСтандартныеПодсистемы);
		
		Возврат ПодсистемаСтандартныеПодсистемы.Версия;
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

// Возвращает имена модулей подсистем, реализующих обработку событий библиотеки.
//
// Возвращаемое значение:
//	Массив - массив элементов типа Строка - имена модулей подсистем,
//		реализующих заполнение описаний обработчиков событий.
//
// Описание модулей подсистем:
//
// Каждый модуль, имя которого возвращается функцией, должен реализовывать
// экспортную процедуру служебного программного интерфейса, реализующую
// заполнение описания обработчиков событий.
//
// Процедура ДобавитьОбработчикиСобытий(СерверныеОбработчики, КлиентскиеОбработчики) Экспорт
//
// КонецПроцедуры
//
// Подробную информацию по реализации процедур см. в описании функции
// ИнтернетПоддержкаПользователейСлужебныйПовтИсп.ОбработчикиСобытий().
//
Функция МодулиПодсистем() Экспорт
	
	Результат = Новый Массив;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.МониторИнтернетПоддержки") Тогда
		Результат.Добавить("МониторИнтернетПоддержки");
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Подключение1СТакском") Тогда
		Результат.Добавить("Подключение1СТакском");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает серверный обработчик бизнес-процесса.
// Параметры:
//	МестоЗапуска - Строка - точка входа в бизнес-процесс;
//	ИмяСобытия - Строка - имя обрабатываемого события.
//
// Возвращаемое значение:
//	ОбщийМодуль - модуль, содержащий заданный обработчик бизнес-процесса;
//	Неопределено - если обработчик бизнес-процесса неопределен.
//
Функция СерверныйОбработчикБизнесПроцесса(МестоЗапуска, ИмяСобытия) Экспорт
	
	Если ИнтернетПоддержкаПользователейКлиентСервер.ЭтоБазовыйБизнесПроцесс(МестоЗапуска) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОбработчикиСобытий = ИнтернетПоддержкаПользователейСлужебныйПовтИсп.ОбработчикиСобытий();
	МодулиОбработчиковБизнесПроцессов = ОбработчикиСобытий.Сервер.БизнесПроцессы;
	ИмяМодуля = МодулиОбработчиковБизнесПроцессов[МестоЗапуска + "\" + ИмяСобытия];
	
	Если ИмяМодуля = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ОбщийМодуль(ИмяМодуля);
	
КонецФункции

#КонецОбласти
