Функция ПредставлениеПериодаСобытия(НачалоПериода, КонецПериода) Экспорт
	
	Возврат НРег(ПредставлениеПериода(НачалоПериода, КонецПериода, "ФП=Истина"));
	
КонецФункции

// Возвращает массив периодов в интервале. 
// Возвращаются все периоды, пересекающиеся с интервалом.
// Возвращаются даты начала периода.
Функция Периоды(НачалоИнтервала, КонецИнтервала, Период) Экспорт
	
	Периоды = Новый Массив;
	
	ТекущийПериод = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Период, КонецИнтервала);
	Периоды.Добавить(ТекущийПериод);
	
	Пока ТекущийПериод > НачалоИнтервала Цикл
	
		ТекущийПериод = ИнтерфейсыВзаимодействияБРОКлиентСервер.ДобавитьПериод(ТекущийПериод, Период, -1);
		Периоды.Вставить(0, ТекущийПериод); // Пятимся назад, а значения в массиве хотим по возрастанию.
	
	КонецЦикла;
	
	Возврат Периоды;
	
КонецФункции

Функция ДатаНачалаДеятельности(Организация) Экспорт
	
	// Интервал начинается не ранее даты учетной политики и ввода остатков,
	// а для ИП - еще и не ранее даты выдачи свидетельства о регистрации.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	УчетнаяПолитикаОрганизаций.Период КАК Дата
	|ПОМЕСТИТЬ УчетнаяПолитика
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
	|ГДЕ
	|	УчетнаяПолитикаОрганизаций.Организация = &Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УчетнаяПолитика.Дата КАК Дата
	|ИЗ
	|	УчетнаяПолитика КАК УчетнаяПолитика
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ДОБАВИТЬКДАТЕ(ДатыВводаНачальныхОстатков.ДатаВводаНачальныхОстатков, ДЕНЬ, 1)
	|ИЗ
	|	РегистрСведений.ДатыВводаНачальныхОстатков КАК ДатыВводаНачальныхОстатков
	|ГДЕ
	|	ДатыВводаНачальныхОстатков.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|			ТОГДА Организации.СвидетельствоДатаВыдачи
	|		ИНАЧЕ Организации.ДатаРегистрации
	|	КОНЕЦ
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка = &Организация";
	
	НачалоИнтервала = '0001-01-01';
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НачалоИнтервала = Макс(НачалоИнтервала, Выборка.Дата);
	КонецЦикла;
	
	Возврат НачалоИнтервала;
	
КонецФункции

Функция НачалоАктуальногоПериода(Правило, ТекущаяДата, ДатаНачалаДеятельности = '0001-01-01') Экспорт
	
	// В качестве параметра Правило можно передавать ссылку на правило 
	// или иной объект (выборку, структуру) со свойствами 
	// Периодичность, СрокМесяцев, СрокДней, Действие, БазовыйПериод, ОтставаниеБазовогоПериода
	
	День = 24 * 60 * 60;
	
	СобытиеПозжеРелевантногоПериода = СрокИстекаетПослеОкончанияРелевантногоПериода(Правило);
	
	// Запас позволяет игнорировать правила переноса дат на выходные
	АктуальныйПериод = ТекущаяДата - 15 * День;
	
	Если СобытиеПозжеРелевантногоПериода Тогда
		
		// ограничимся периодом, по которому заведомо успеваем
		АктуальныйПериод = ДобавитьМесяц(АктуальныйПериод - Правило.СрокДней * День, - Правило.СрокМесяцев);
		
		АктуальныйПериод = Макс(АктуальныйПериод, ДатаНачалаДеятельности);
		
	Иначе
		
		// Базовый период предшествует релевантному и может быть другой длительности.
		ПростойБазовыйПериод = БазовыйПериодОпределяетсяПросто(Правило);
		ДлительностьБазовогоПериода = Правило.Периодичность;
		Если Не ПростойБазовыйПериод Тогда
			ДлительностьБазовогоПериода = Правило.БазовыйПериод;
		КонецЕсли;
		
		// Базовый период всегда предшествует сроку
		ОтставаниеБазовогоПериода = Правило.ОтставаниеБазовогоПериода;
		УточнитьОтставаниеБазовогоПериода(
			ОтставаниеБазовогоПериода, 
			ДлительностьБазовогоПериода, 
			Правило.СрокМесяцев);
		
		ОпережениеБазовогоПериода = 1 + ОтставаниеБазовогоПериода;
		
		АктуальныйПериод = ИнтерфейсыВзаимодействияБРОКлиентСервер.ДобавитьПериод(
			АктуальныйПериод,
			Правило.БазовыйПериод,
			- ОпережениеБазовогоПериода);
		
	КонецЕсли;
	
	
	Возврат АктуальныйПериод;
	
КонецФункции

Функция СрокИстекаетПослеОкончанияРелевантногоПериода(Правило) Экспорт
	
	// В качестве параметра можно передавать ссылку на правило 
	// или иной объект (выборку, структуру) со свойствами 
	// СрокМесяцев, СрокДней
	Возврат Не (Правило.СрокМесяцев < 0 Или Правило.СрокМесяцев = 0 И Правило.СрокДней = 0);
	
КонецФункции

Функция БазовыйПериодОпределяетсяПросто(Правило) Экспорт
	
	// В качестве параметра можно передавать ссылку на правило 
	// или иной объект (выборку, структуру) со свойствами 
	// Действие, БазовыйПериод, Периодичность, ОтставаниеБазовогоПериода
	
	Возврат Правило.Действие <> Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога
		Или Не ЗначениеЗаполнено(Правило.БазовыйПериод)
		Или (Правило.БазовыйПериод = Правило.Периодичность И Правило.ОтставаниеБазовогоПериода = 0);
		
КонецФункции 

Функция ЗапуститьЗаполнениеВФоне(ИдентификаторФормы, Организация, СозданаНоваяОрганизация = Ложь, ОбновитьИЗаполнитьЗадачиНачалаРаботы = Истина, ОбновитьИЗаполнитьРегулярныеЗадачи = Истина) Экспорт
	
	ПараметрыФункции = Новый Структура();
	ПараметрыФункции.Вставить("Организация", Организация);
	ПараметрыФункции.Вставить("Упреждение", УпреждениеЗаполненияСписка());
	ПараметрыФункции.Вставить("СозданаНоваяОрганизация", СозданаНоваяОрганизация);
	
	ПараметрыФункции.Вставить("ОбновитьИЗаполнитьЗадачиНачалаРаботы", ОбновитьИЗаполнитьЗадачиНачалаРаботы);
	ПараметрыФункции.Вставить("ОбновитьИЗаполнитьРегулярныеЗадачи",   ОбновитьИЗаполнитьРегулярныеЗадачи);
	
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		ИдентификаторФормы,
		"КалендарьБухгалтера.ЗаполнитьВФоне", 
		ПараметрыФункции, 
		НСтр("ru = 'Обновление списка задач бухгалтера'"));
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьВФоне(Параметры, ВременноеХранилищеРезультата) Экспорт
	Перем Организация, Упреждение, СозданаНоваяОрганизация;
	Перем ОбновитьИЗаполнитьЗадачиНачалаРаботы, ОбновитьИЗаполнитьРегулярныеЗадачи;
	
	Если Параметры <> Неопределено Тогда
		
		Параметры.Свойство("Организация", Организация);
		Параметры.Свойство("Упреждение", Упреждение);
		Параметры.Свойство("СозданаНоваяОрганизация", СозданаНоваяОрганизация);
		
		Параметры.Свойство("ОбновитьИЗаполнитьЗадачиНачалаРаботы", ОбновитьИЗаполнитьЗадачиНачалаРаботы);
		Параметры.Свойство("ОбновитьИЗаполнитьРегулярныеЗадачи",   ОбновитьИЗаполнитьРегулярныеЗадачи);
		
	КонецЕсли;
	
	Если Упреждение = Неопределено Тогда
		Упреждение = УпреждениеЗаполненияСписка();
	КонецЕсли;
	
	Если СозданаНоваяОрганизация = Неопределено Тогда
		СозданаНоваяОрганизация = Ложь;
	КонецЕсли;
	
	Если ОбновитьИЗаполнитьЗадачиНачалаРаботы = Неопределено Или ОбновитьИЗаполнитьЗадачиНачалаРаботы Тогда
		ИзмененыЗадачиНачалаРаботы = РегистрыСведений.ЗадачиБухгалтера.ОбновитьИЗаполнитьЗадачиНачалаРаботы(Организация, СозданаНоваяОрганизация);
	Иначе
		ИзмененыЗадачиНачалаРаботы = Ложь;
	КонецЕсли;
	
	Если ОбновитьИЗаполнитьРегулярныеЗадачи = Неопределено Или ОбновитьИЗаполнитьРегулярныеЗадачи Тогда
		ИзмененыРегулярныеЗадачи = РегистрыСведений.ЗадачиБухгалтера.ОбновитьИЗаполнитьРегулярныеЗадачи(Организация, Упреждение);
	Иначе
		ИзмененыРегулярныеЗадачи = Ложь;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(ИзмененыЗадачиНачалаРаботы Или ИзмененыРегулярныеЗадачи, ВременноеХранилищеРезультата);
	
КонецПроцедуры

Процедура ЗаполнитьРегламентнымЗаданием() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	РегистрыСведений.ЗадачиБухгалтера.ОбновитьИЗаполнитьЗадачиНачалаРаботы();
	
	РегистрыСведений.ЗадачиБухгалтера.ОбновитьИЗаполнитьРегулярныеЗадачи(, УпреждениеЗаполненияСписка());
	
КонецПроцедуры

Функция УпреждениеЗаполненияСписка() Экспорт
	
	Возврат 14;
	
КонецФункции

Процедура УточнитьОтставаниеБазовогоПериода(ОтставаниеБазовогоПериода, ДлительностьБазовогоПериода, СрокМесяцев) Экспорт
	Если СрокМесяцев < -1 И ДлительностьБазовогоПериода = Перечисления.Периодичность.Месяц Тогда
		ОтставаниеБазовогоПериода = Макс(ОтставаниеБазовогоПериода, - 1 - СрокМесяцев);
	КонецЕсли;
КонецПроцедуры

// Возвращает возможность выполнения задачи текущим пользователем
//
Функция ПравоВыполненияЗадачи(Задача) Экспорт
	
	ЕстьПраво = Ложь;
	
	Если ТипЗнч(Задача) = Тип("ПеречислениеСсылка.ЗадачиНачалаРаботы") Тогда
		
		Если Задача = Перечисления.ЗадачиНачалаРаботы.РеквизитыОрганизации Тогда
			
			ЕстьПраво = ПравоДоступа("Изменение", Метаданные.Справочники.Организации);
			
		ИначеЕсли Задача = Перечисления.ЗадачиНачалаРаботы.ПараметрыУчета Тогда
			
			ЕстьПраво = РольДоступна("ПолныеПрава");
			
		ИначеЕсли Задача = Перечисления.ЗадачиНачалаРаботы.УчетнаяПолитика Тогда
			
			ЕстьПраво = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.УчетнаяПолитикаОрганизаций);
			
		ИначеЕсли Задача = Перечисления.ЗадачиНачалаРаботы.СписокНалоговОтчетов Тогда
			
			ЕстьПраво = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НалогиОтчеты);
			
		ИначеЕсли Задача = Перечисления.ЗадачиНачалаРаботы.НастройкаЗаполненияФормСтатистики Тогда
			
			ЕстьПраво = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НастройкаЗаполненияФормСтатистики);
			
		ИначеЕсли Задача = Перечисления.ЗадачиНачалаРаботы.НачальныеОстатки Тогда
			
			ЕстьПраво = ПравоДоступа("Использование", Метаданные.Обработки.ВводНачальныхОстатков);
			
		ИначеЕсли Задача = Перечисления.ЗадачиНачалаРаботы.Подключение1СОтчетности Тогда
			
			ЕстьПраво = ПравоДоступа("Использование", Метаданные.Обработки.ОбщиеОбъектыРегламентированнойОтчетности);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Задача) = Тип("СправочникСсылка.ПравилаРегулярныхПлатежей") Тогда
		
		ЕстьПраво = ПравоДоступа("Изменение", Метаданные.Документы.ПлатежноеПоручение);
		
	Иначе
		
		ЕстьПраво = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ЗадачиБухгалтера);
		
	КонецЕсли;
		
	Возврат ЕстьПраво;
	
КонецФункции
