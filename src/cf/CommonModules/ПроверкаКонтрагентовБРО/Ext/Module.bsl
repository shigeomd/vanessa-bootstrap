////////////////////////////////////////////////////////////////////////////////
// Проверка контрагентов в Декларации по НДС
//  
////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс

Процедура ПриСозданииНаСервереДекларацияПоНДС(Форма) Экспорт
	
	ИнициализироватьРеквизитыДекларацияПоНДС(Форма);
	
	// Предлагаем заменить стандартное поведение
	Если НЕ СтандартноеДействиеПриСозданииНаСервереОтчета(Форма) Тогда
		Возврат;
	КонецЕсли;
	// Конец. Предлагаем заменить стандартное поведение
	
	ЕстьПравоНаИспользованиеПроверки = ЕстьПравоНаИспользованиеПроверки();
	
	Форма.Элементы.ПроверитьКонтрагентовВОтчетеКоманда.Видимость 	= ЕстьПравоНаИспользованиеПроверки;
	Форма.Элементы.ПроверкаКонтрагента.Видимость 					= ЕстьПравоНаИспользованиеПроверки;
	
	Форма.РеквизитыПроверкиКонтрагентов.ПроверкаИспользуется = ПроверкаКонтрагентовБРОВызовСервера.ИспользованиеПроверкиВозможно();
	
	УстановитьНадписиВПанелиОтчетаПриСоздании(Форма);
	ПроверкаКонтрагентовБРОКлиентСервер.УстановитьВидПанелиПроверкиКонтрагентовВОтчете(Форма);
	
КонецПроцедуры

Процедура ОтобразитьРезультатПроверкиКонтрагентаВДекларации(Форма) Экспорт
	
	РезультатПроверкиКонтрагентов = ПолучитьИзВременногоХранилища(Форма.РеквизитыПроверкиКонтрагентов.АдресХранилища);
	
	Если РезультатПроверкиКонтрагентов <> Неопределено Тогда
	
		Если РезультатПроверкиКонтрагентов.Свойство("НетДоступаКВебСервисуФНС") Тогда
			
			// Не удалось проверить контрагентов.
			Форма.РеквизитыПроверкиКонтрагентов.ЕстьДоступКВебСервисуФНС = Ложь;

		ИначеЕсли РезультатПроверкиКонтрагентов.Свойство("ЕстьКонтрагентыДляПроверки") 
			И НЕ РезультатПроверкиКонтрагентов.ЕстьКонтрагентыДляПроверки Тогда
			
			// Нет ни одного контрагента
			Форма.РеквизитыПроверкиКонтрагентов.ПроверкаВыполнялась 		= Истина;
			Форма.РеквизитыПроверкиКонтрагентов.ЕстьКонтрагентыДляПроверки 	= Ложь;

		Иначе
			
			Форма.РеквизитыПроверкиКонтрагентов.ПроверкаВыполнялась 			= Истина;
			Форма.РеквизитыПроверкиКонтрагентов.ЕстьДоступКВебСервисуФНС 		= Истина;
			Форма.РеквизитыПроверкиКонтрагентов.ЕстьКонтрагентыДляПроверки 		= Истина;

			Разделы = ПроверкаКонтрагентовБРОКлиентСервер.ПроверяемыеРазделыДекларацииПоНДС();
	
			Для НомерРаздела = Разделы.Начальный По Разделы.Конечный Цикл
				
				СохранитьРезультатыПроверкиВФорму(Форма, НомерРаздела);
			
			КонецЦикла;
			
			ВывестиРазделОтчета(Форма);
			
		КонецЕсли;
		
		Форма.Модифицированность = Истина;
		
	КонецЕсли;
	
	ПроверкаКонтрагентовБРОКлиентСервер.ВывестиНужнуюПанельПроверкиКонтрагентовВОтчете(Форма);
	
	ВыделитьРазделСОшибкой(Форма);
	
КонецПроцедуры

Процедура ПроверитьКонтрагентовВДекларации(Форма) Экспорт
	
	Форма.РеквизитыПроверкиКонтрагентов.ИдентификаторЗадания = Неопределено;

	ОчиститьСохраненныеРезультатыПроверки(Форма);
	ОчиститьРезультатыПредыдущихПроверок(Форма);
	
	ПодготовитьДанныеФоновогоЗадания(Форма);
	
	Параметры = Новый Структура;
	Параметры.Вставить("УникальныйИдентификатор", Форма.УникальныйИдентификатор);
	
	НаименованиеЗадания = НСтр("ru = 'Проверка контрагентов в Декларации по НДС'");
	
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		Форма.УникальныйИдентификатор,
		"ПроверкаКонтрагентовБРО.ПроверитьКонтрагентовВДекларацииФоновоеЗадание",
		Параметры,
		НаименованиеЗадания);
		
	Форма.РеквизитыПроверкиКонтрагентов.АдресХранилища       = Результат.АдресХранилища;
	Форма.РеквизитыПроверкиКонтрагентов.ИдентификаторЗадания = Результат.ИдентификаторЗадания;

КонецПроцедуры

Процедура ПодменитьТабличныйДокументРаздела(Форма, ТабличныйДокументРаздела, ИмяРаздела) Экспорт
	
	Если НЕ Форма.РеквизитыПроверкиКонтрагентов.ПроверкаИспользуется Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПроверкаКонтрагентовБРОКлиентСервер.ЭтоПроверяемыйРаздел(ИмяРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	НомерРаздела = СтрЗаменить(ИмяРаздела, "Раздел", "");
	
	Если Форма.РеквизитыПроверкиКонтрагентов.ВыведеныВсеСтроки Тогда
		
		// Если нет некорректных контрагентов, то подкрашенную форму выводим стандартную
		Имя = ПроверкаКонтрагентовБРОКлиентСервер.ИмяАдресаНекорректныхКонтрагентов(НомерРаздела);
	
		Если НЕ Форма.СтруктураРеквизитовФормы.Свойство(Имя) Тогда
			Возврат;
		КонецЕсли;
		
		АдресаНекорректныхКонтрагентов = Форма.СтруктураРеквизитовФормы[Имя];
		
		Если АдресаНекорректныхКонтрагентов = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		НекорректныеКонтрагенты = ПолучитьИзВременногоХранилища(АдресаНекорректныхКонтрагентов);

		Имя = ПроверкаКонтрагентовБРОКлиентСервер.ИмяАдресаПроверенногоОтчета(НомерРаздела);
		
	Иначе
		Имя = ПроверкаКонтрагентовБРОКлиентСервер.ИмяАдресаОтчетаПоНекорректнымКонтрагентам(НомерРаздела);
	КонецЕсли;
	
	Если НЕ Форма.СтруктураРеквизитовФормы.Свойство(Имя) Тогда
		Возврат;
	КонецЕсли;
	
	Адрес = Форма.СтруктураРеквизитовФормы[Имя];
	
	Если НЕ ЭтоАдресВременногоХранилища(Адрес) Тогда
		Возврат;
	КонецЕсли;
	
	НовыйТабличныйДокументРаздела = ПолучитьИзВременногоХранилища(Адрес);
	
	Если НовыйТабличныйДокументРаздела <> Неопределено Тогда
		ТабличныйДокументРаздела = НовыйТабличныйДокументРаздела;
	КонецЕсли;

КонецПроцедуры

Функция НовыйИдентификаторТекущегоРаздела(Форма) Экспорт
	
	Форма.РеквизитыПроверкиКонтрагентов.ВыведеныВсеСтроки = НЕ Форма.РеквизитыПроверкиКонтрагентов.ВыведеныВсеСтроки;
	
	ПроверкаКонтрагентовБРОКлиентСервер.УстановитьВидПанелиПроверкиКонтрагентовВОтчете(Форма, "НайденыНекорректныеКонтрагенты");
	
	НаименованиеРаздела  = НаименованиеТекущегоРаздела(Форма);
	ИдентификаторРаздела = ИдентификаторРазделаПоНаименованию(Форма, НаименованиеРаздела);
	
	Возврат ИдентификаторРаздела;
	
КонецФункции

Процедура ВосстановитьРезультатыПроверки(Форма) Экспорт
	
	Если НЕ Форма.РеквизитыПроверкиКонтрагентов.ПроверкаИспользуется Тогда
		Возврат;
	КонецЕсли;
	
	ОтчетДобавленКопированием = ЗначениеЗаполнено(Форма.СтруктураРеквизитовФормы.мСкопированаФорма);
	
	Если НЕ ОтчетДобавленКопированием Тогда
		ВосстановитьРезультатПроверкиИзРегистра(Форма);
		ВывестиРазделОтчета(Форма);
		ПроверкаКонтрагентовБРОКлиентСервер.ВывестиНужнуюПанельПроверкиКонтрагентовВОтчете(Форма);
		ВыделитьРазделСОшибкой(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьРезультатыПроверки(Форма) Экспорт
	
	Если Форма.РеквизитыПроверкиКонтрагентов.ПроверкаИспользуется Тогда
		СохранитьРезультатыПроверкиКонтрагентов(Форма);
	Иначе
		ОчиститьСохраненныеРезультатыПроверки(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗакрытииРегламентированногоОтчета(Форма) Экспорт
	 
	ОчиститьДанныеФоновогоЗадания(Форма.УникальныйИдентификатор);
	
КонецПроцедуры

Процедура ПроверитьКонтрагентовВДекларацииФоновоеЗадание(Параметры, АдресХранилища) Экспорт
	
	Если ЕстьДоступКВебСервисуФНС() Тогда
		
		УникальныйИдентификатор = Параметры.УникальныйИдентификатор;
		
		Разделы = ПроверкаКонтрагентовБРОКлиентСервер.ПроверяемыеРазделыДекларацииПоНДС();
	
		КоличествоКонтрагентов = 0;
		Для НомерРаздела = Разделы.Начальный По Разделы.Конечный Цикл
			ПроверитьКонтрагентовВРазделе(УникальныйИдентификатор, НомерРаздела, КоличествоКонтрагентов);
		КонецЦикла;
		
		Результат = Новый Структура;
		Результат.Вставить("ЕстьКонтрагентыДляПроверки", КоличествоКонтрагентов > 0);
		
	Иначе
		Результат = Новый Структура;
		Результат.Вставить("НетДоступаКВебСервисуФНС", Истина);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Процедура ОчиститьРезультатыПроверкиКонтрагентов(Форма, НаименованиеРаздела = Неопределено) Экспорт

	Если НЕ Форма.РеквизитыПроверкиКонтрагентов.ПроверкаИспользуется Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НаименованиеРаздела) Тогда
		
		Если НЕ ПроверкаКонтрагентовБРОКлиентСервер.ЭтоПроверяемыйРаздел(НаименованиеРаздела) Тогда
			Возврат;
		КонецЕсли;
		
		НомерРаздела = СтрЗаменить(НаименованиеРаздела, "Раздел", "");
	
		ОчиститьРезультатыПроверкиКонтрагентовВРазделе(Форма, НомерРаздела);
		
	Иначе
		
		Разделы = ПроверкаКонтрагентовБРОКлиентСервер.ПроверяемыеРазделыДекларацииПоНДС();
		СтруктураРеквизитовФормы = Форма.СтруктураРеквизитовФормы;
		
		Для НомерРаздела = Разделы.Начальный По Разделы.Конечный Цикл
			ОчиститьРезультатыПроверкиКонтрагентовВРазделе(Форма, НомерРаздела);
		КонецЦикла;
		
	КонецЕсли;
	
	Форма.РеквизитыПроверкиКонтрагентов.ЕстьКонтрагентыДляПроверки = ЕстьКонтрагентыДляПроверки(Форма);
	ВыделитьРазделСОшибкой(Форма);
	ПроверкаКонтрагентовБРОКлиентСервер.ВывестиНужнуюПанельПроверкиКонтрагентовВОтчете(Форма);
	
КонецПроцедуры

#Область ОболочкаДляПодсистемыБСП

#Область Функции

Функция ЕстьПравоНаИспользованиеПроверки() Экспорт
	
	// Предлагаем заменить стандартное поведение
	Результат = Ложь;
	
	Модуль = ОбщийМодульПроверкаКонтрагентовБРОПереопределяемый();
	Если Модуль <> Неопределено Тогда
		
		СтандартнаяОбработка 	= Истина; 
		Модуль.ЕстьПравоНаИспользованиеПроверки(Результат, СтандартнаяОбработка);
		Если НЕ СтандартнаяОбработка Тогда
			Возврат Результат;
		КонецЕсли;
		
	КонецЕсли;
	// Конец. Предлагаем заменить стандартное поведение
	
	Если ПроверкаКонтрагентовБРОКлиентСервер.РаботаСКонтрагентамиСуществует() Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ПроверкаКонтрагентов");
		Возврат Модуль.ЕстьПравоНаИспользованиеПроверки();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЕстьПравоНаРедактированиеНастроек() Экспорт
	
	// Предлагаем заменить стандартное поведение
	Результат = Ложь;
			
	Модуль = ОбщийМодульПроверкаКонтрагентовБРОПереопределяемый();
	Если Модуль <> Неопределено Тогда
		
		СтандартнаяОбработка 	= Истина;
		Модуль.ЕстьПравоНаРедактированиеНастроек(Результат, СтандартнаяОбработка);
		
		Если НЕ СтандартнаяОбработка Тогда
			Возврат Результат;
		КонецЕсли;
		
	КонецЕсли;
	// Конец. Предлагаем заменить стандартное поведение
	
	Если ПроверкаКонтрагентовБРОКлиентСервер.РаботаСКонтрагентамиСуществует() Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ПроверкаКонтрагентов");
		Возврат Модуль.ЕстьПравоНаРедактированиеНастроек();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЕстьДоступКВебСервисуФНС() Экспорт
	
	// Предлагаем заменить стандартное поведение
	Результат = Ложь;
	
	Модуль = ОбщийМодульПроверкаКонтрагентовБРОПереопределяемый();
	Если Модуль <> Неопределено Тогда

		СтандартнаяОбработка = Истина;
		Модуль.ЕстьДоступКВебСервисуФНС(Результат, СтандартнаяОбработка);
		
		Если НЕ СтандартнаяОбработка Тогда
			Возврат Результат;
		КонецЕсли;
		
	КонецЕсли;
	// Конец. Предлагаем заменить стандартное поведение
	
	Если ПроверкаКонтрагентовБРОКлиентСервер.РаботаСКонтрагентамиСуществует() Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ПроверкаКонтрагентов");
		Возврат Модуль.ЕстьДоступКВебСервисуФНС();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПроверкаКонтрагентовВключена() Экспорт
	
	// Предлагаем заменить стандартное поведение
	Результат = Ложь;
			
	Модуль = ОбщийМодульПроверкаКонтрагентовБРОПереопределяемый();
	Если Модуль <> Неопределено Тогда
	
		СтандартнаяОбработка = Истина; 
		Модуль.ПроверкаКонтрагентовВключена(Результат, СтандартнаяОбработка);
		
		Если НЕ СтандартнаяОбработка Тогда
			Возврат Результат;
		КонецЕсли;
		
	КонецЕсли;
	// Конец. Предлагаем заменить стандартное поведение
	
	Если ПроверкаКонтрагентовБРОКлиентСервер.РаботаСКонтрагентамиСуществует() Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ПроверкаКонтрагентов");
		Возврат Модуль.ПроверкаКонтрагентовВключена();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СостоянияНедействующегоКонтрагента(ДополнятьСостояниемСОшибкой = Ложь, ДополнятьПустымСостоянием = Ложь) Экспорт
	
	// Предлагаем заменить стандартное поведение
	Результат = Новый Массив;
	
	Модуль = ОбщийМодульПроверкаКонтрагентовБРОПереопределяемый();
	Если Модуль <> Неопределено Тогда
		
		СтандартнаяОбработка = Истина; 
		Модуль.СостоянияНедействующегоКонтрагента(ДополнятьСостояниемСОшибкой, ДополнятьПустымСостоянием, Результат, СтандартнаяОбработка);
		
		Если НЕ СтандартнаяОбработка Тогда
			Возврат Результат;
		КонецЕсли;
		
	КонецЕсли;
	// Конец. Предлагаем заменить стандартное поведение
	
	Если ПроверкаКонтрагентовБРОКлиентСервер.РаботаСКонтрагентамиСуществует() Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ПроверкаКонтрагентовКлиентСерверПовтИсп");
		Возврат Модуль.СостоянияНедействующегоКонтрагента(ДополнятьСостояниемСОшибкой, ДополнятьПустымСостоянием);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СсылкаНаИнструкцию() Экспорт
	
	// Предлагаем заменить стандартное поведение
	Результат = Новый ФорматированнаяСтрока(НСтр("ru = 'Подробнее о проверке'"),,,, "e1cib/app/Обработка.ИнструкцияПоИспользованиюПроверкиКонтрагента");
	
	Модуль = ОбщийМодульПроверкаКонтрагентовБРОПереопределяемый();
	Если Модуль <> Неопределено Тогда
		
		СтандартнаяОбработка = Истина; 
		Модуль.СсылкаНаИнструкцию(Результат, СтандартнаяОбработка);
		
		Если НЕ СтандартнаяОбработка Тогда
			Возврат Результат;
		КонецЕсли;
		
	КонецЕсли;
	// Конец. Предлагаем заменить стандартное поведение
	
	Если ПроверкаКонтрагентовБРОКлиентСервер.РаботаСКонтрагентамиСуществует() Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ПроверкаКонтрагентовКлиентСерверПовтИсп");
		Возврат Модуль.СсылкаНаИнструкцию();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Процедуры

Процедура ПроверитьКонтрагентов(ДанныеКонтрагентов, АдресХранилища = Неопределено, ЭтоПроверкаСправочника = Истина, СохранятьРезультатСразуПослеПроверки = Ложь) Экспорт
	
	// Предлагаем заменить стандартное поведение
	Модуль = ОбщийМодульПроверкаКонтрагентовБРОПереопределяемый();
	Если Модуль <> Неопределено Тогда
		
		СтандартнаяОбработка = Истина; 
		Модуль.ПроверитьКонтрагентов(ДанныеКонтрагентов, АдресХранилища, ЭтоПроверкаСправочника, СохранятьРезультатСразуПослеПроверки, СтандартнаяОбработка);
		
		Если НЕ СтандартнаяОбработка Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	// Конец. Предлагаем заменить стандартное поведение
	
	Если ПроверкаКонтрагентовБРОКлиентСервер.РаботаСКонтрагентамиСуществует() Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ПроверкаКонтрагентов");
		Модуль.ПроверитьКонтрагентов(ДанныеКонтрагентов, АдресХранилища, ЭтоПроверкаСправочника, СохранятьРезультатСразуПослеПроверки);
	КонецЕсли;
		
КонецПроцедуры

Процедура УстановитьНадписиВПанелиОтчетаПриСозданииНаСервере(Форма) Экспорт
	
	// Предлагаем заменить стандартное поведение
	Модуль = ОбщийМодульПроверкаКонтрагентовБРОПереопределяемый();
	Если Модуль <> Неопределено Тогда
	
		СтандартнаяОбработка = Истина; 
		Модуль.УстановитьНадписиВПанелиОтчетаПриСозданииНаСервере(Форма, СтандартнаяОбработка);
		
		Если НЕ СтандартнаяОбработка Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	// Конец. Предлагаем заменить стандартное поведение
	
	Если ПроверкаКонтрагентовБРОКлиентСервер.РаботаСКонтрагентамиСуществует() Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ПроверкаКонтрагентов");
		Модуль.УстановитьНадписиВПанелиОтчетаПриСозданииНаСервере(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВключитьВыключитьПроверкуКонтрагентов(ВключитьПроверку) Экспорт
	
	// Предлагаем заменить стандартное поведение
	Модуль = ОбщийМодульПроверкаКонтрагентовБРОПереопределяемый();
	Если Модуль <> Неопределено Тогда
	
		СтандартнаяОбработка = Истина; 
		Модуль.ВключитьВыключитьПроверкуКонтрагентов(ВключитьПроверку, СтандартнаяОбработка);
		
		Если НЕ СтандартнаяОбработка Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	// Конец. Предлагаем заменить стандартное поведение
	
	Если ПроверкаКонтрагентовБРОКлиентСервер.РаботаСКонтрагентамиСуществует() Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ПроверкаКонтрагентов");
		Модуль.ВключитьВыключитьПроверкуКонтрагентов(ВключитьПроверку);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьКонтрагентовПослеВключенияПроверкиФоновоеЗадание() Экспорт
	
	// Предлагаем заменить стандартное поведение
	Модуль = ОбщийМодульПроверкаКонтрагентовБРОПереопределяемый();
	Если Модуль <> Неопределено Тогда
			
		СтандартнаяОбработка = Истина; 
		Модуль.ПроверитьКонтрагентовПослеВключенияПроверкиФоновоеЗадание(СтандартнаяОбработка);
		Если НЕ СтандартнаяОбработка Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	// Конец. Предлагаем заменить стандартное поведение
	
	Если ПроверкаКонтрагентовБРОКлиентСервер.РаботаСКонтрагентамиСуществует() Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ПроверкаКонтрагентов");
		Модуль.ПроверитьКонтрагентовПослеВключенияПроверкиФоновоеЗадание();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

#Область СохранениеИВосстановление

Процедура СохранитьРезультатыПроверкиКонтрагентов(Форма)
	
	Разделы = ПроверкаКонтрагентовБРОКлиентСервер.ПроверяемыеРазделыДекларацииПоНДС();
	
	НачальныйРаздел = Разделы.Начальный;
	КонечныйРаздел 	= Разделы.Конечный;
	
	Для НомерРаздела = НачальныйРаздел По КонечныйРаздел Цикл

		ВидДополнительногоФайла = ПроверкаКонтрагентовБРОКлиентСервер.НазваниеВидаДанныхПроверенногоОтчета(НомерРаздела);
		ИмяАдресаДанных			= ПроверкаКонтрагентовБРОКлиентСервер.ИмяАдресаПроверенногоОтчета(НомерРаздела);
		ЗаписатьРезультатПроверкиРазделаВРегистр(Форма, ВидДополнительногоФайла, ИмяАдресаДанных);
		
		ВидДополнительногоФайла = ПроверкаКонтрагентовБРОКлиентСервер.НазваниеВидаДанныхОтчетаПоНекорректнымКонтрагентам(НомерРаздела);
		ИмяАдресаДанных			= ПроверкаКонтрагентовБРОКлиентСервер.ИмяАдресаОтчетаПоНекорректнымКонтрагентам(НомерРаздела);
		ЗаписатьРезультатПроверкиРазделаВРегистр(Форма, ВидДополнительногоФайла, ИмяАдресаДанных);
		
		ВидДополнительногоФайла = ПроверкаКонтрагентовБРОКлиентСервер.НазваниеВидаДанныхНекорректныхКонтрагентов(НомерРаздела);
		ИмяАдресаДанных			= ПроверкаКонтрагентовБРОКлиентСервер.ИмяАдресаНекорректныхКонтрагентов(НомерРаздела);
		ЗаписатьРезультатПроверкиРазделаВРегистр(Форма, ВидДополнительногоФайла, ИмяАдресаДанных);
		
	КонецЦикла;
	
	ЗаписатьРеквизитыПроверкиКонтрагентовВРегистр(Форма);
	
КонецПроцедуры

Процедура ОчиститьСохраненныеРезультатыПроверки(Форма)
	
	Разделы = ПроверкаКонтрагентовБРОКлиентСервер.ПроверяемыеРазделыДекларацииПоНДС();
	
	НачальныйРаздел = Разделы.Начальный;
	КонечныйРаздел 	= Разделы.Конечный;
	
	Для НомерРаздела = НачальныйРаздел По КонечныйРаздел Цикл

		ВидДополнительногоФайла = ПроверкаКонтрагентовБРОКлиентСервер.НазваниеВидаДанныхПроверенногоОтчета(НомерРаздела);
		ОчиститьРезультатПроверкиРазделаВРегистр(Форма, ВидДополнительногоФайла);
		
		ВидДополнительногоФайла = ПроверкаКонтрагентовБРОКлиентСервер.НазваниеВидаДанныхОтчетаПоНекорректнымКонтрагентам(НомерРаздела);
		ОчиститьРезультатПроверкиРазделаВРегистр(Форма, ВидДополнительногоФайла);
		
		ВидДополнительногоФайла = ПроверкаКонтрагентовБРОКлиентСервер.НазваниеВидаДанныхНекорректныхКонтрагентов(НомерРаздела);
		ОчиститьРезультатПроверкиРазделаВРегистр(Форма, ВидДополнительногоФайла);
		
	КонецЦикла;
	
	ВидДополнительногоФайла = ПроверкаКонтрагентовБРОКлиентСервер.НазваниеВидаДанныхРеквизитовПроверкиКонтрагентов();
	ОчиститьРезультатПроверкиРазделаВРегистр(Форма, ВидДополнительногоФайла);
	
КонецПроцедуры

Процедура ВосстановитьРезультатПроверкиИзРегистра(Форма) Экспорт
	
	Разделы = ПроверкаКонтрагентовБРОКлиентСервер.ПроверяемыеРазделыДекларацииПоНДС();
	
	НачальныйРаздел = Разделы.Начальный;
	КонечныйРаздел 	= Разделы.Конечный;
	
	Для НомерРаздела = НачальныйРаздел По КонечныйРаздел Цикл

		ВидДополнительногоФайла = ПроверкаКонтрагентовБРОКлиентСервер.НазваниеВидаДанныхПроверенногоОтчета(НомерРаздела);
		ИмяАдресаДанных			= ПроверкаКонтрагентовБРОКлиентСервер.ИмяАдресаПроверенногоОтчета(НомерРаздела);
		ВосстановитьРезультатПроверкиРазделаИзРегистра(Форма, ВидДополнительногоФайла, ИмяАдресаДанных);
		
		ВидДополнительногоФайла = ПроверкаКонтрагентовБРОКлиентСервер.НазваниеВидаДанныхОтчетаПоНекорректнымКонтрагентам(НомерРаздела);
		ИмяАдресаДанных			= ПроверкаКонтрагентовБРОКлиентСервер.ИмяАдресаОтчетаПоНекорректнымКонтрагентам(НомерРаздела);
		ВосстановитьРезультатПроверкиРазделаИзРегистра(Форма, ВидДополнительногоФайла, ИмяАдресаДанных);
		
		ВидДополнительногоФайла = ПроверкаКонтрагентовБРОКлиентСервер.НазваниеВидаДанныхНекорректныхКонтрагентов(НомерРаздела);
		ИмяАдресаДанных			= ПроверкаКонтрагентовБРОКлиентСервер.ИмяАдресаНекорректныхКонтрагентов(НомерРаздела);
		ВосстановитьРезультатПроверкиРазделаИзРегистра(Форма, ВидДополнительногоФайла, ИмяАдресаДанных);
		
	КонецЦикла;
	
	ВосстановитьРеквизитыПроверкиКонтрагентовИзРегистра(Форма);
	
КонецПроцедуры

Процедура ЗаписатьРезультатПроверкиРазделаВРегистр(Форма, ВидДополнительногоФайла, ИмяАдресаДанных)
	
	СтруктураРеквизитовФормы = Форма.СтруктураРеквизитовФормы;
	
	ЗаписьРегистраСведений = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
	ЗаписьРегистраСведений.РегламентированныйОтчет = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	ЗаписьРегистраСведений.ВидДополнительногоФайла = ВидДополнительногоФайла;
	
	Если СтруктураРеквизитовФормы.Свойство(ИмяАдресаДанных) И СтруктураРеквизитовФормы[ИмяАдресаДанных] <> Неопределено Тогда
		
		АдресДанных = СтруктураРеквизитовФормы[ИмяАдресаДанных];
		
		ЗаписьРегистраСведений.СодержимоеФайла 	= Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресДанных));
		ЗаписьРегистраСведений.ИмяФайла 		= ВидДополнительногоФайла + ".mxl";
		ЗаписьРегистраСведений.Размер 			= 1;
		ЗаписьРегистраСведений.ДатаДобавления 	= ТекущаяДатаСеанса();
		ЗаписьРегистраСведений.Записать();
		
	Иначе
		
		ЗаписьРегистраСведений.Удалить();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьРеквизитыПроверкиКонтрагентовВРегистр(Форма)
	
	СтруктураРеквизитовФормы 	= Форма.СтруктураРеквизитовФормы;
	ВидДополнительногоФайла 	= ПроверкаКонтрагентовБРОКлиентСервер.НазваниеВидаДанныхРеквизитовПроверкиКонтрагентов();
	
	ЗаписьРегистраСведений = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
	ЗаписьРегистраСведений.РегламентированныйОтчет 	= СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	ЗаписьРегистраСведений.ВидДополнительногоФайла 	= ВидДополнительногоФайла;
	ЗаписьРегистраСведений.СодержимоеФайла 			= Новый ХранилищеЗначения(Форма.РеквизитыПроверкиКонтрагентов);
	ЗаписьРегистраСведений.ИмяФайла 				= ВидДополнительногоФайла + ".mxl";
	ЗаписьРегистраСведений.Размер 					= 1;
	ЗаписьРегистраСведений.ДатаДобавления 			= ТекущаяДатаСеанса();
	ЗаписьРегистраСведений.Записать();
	
КонецПроцедуры

Процедура ОчиститьРезультатПроверкиРазделаВРегистр(Форма, ВидДополнительногоФайла)
	
	СтруктураРеквизитовФормы = Форма.СтруктураРеквизитовФормы;
	
	ЗаписьРегистраСведений = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
	ЗаписьРегистраСведений.РегламентированныйОтчет = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	ЗаписьРегистраСведений.ВидДополнительногоФайла = ВидДополнительногоФайла;
	
	ЗаписьРегистраСведений.Удалить();
	
КонецПроцедуры

Процедура ВосстановитьРезультатПроверкиРазделаИзРегистра(Форма, ВидДополнительногоФайла, ИмяАдресаДанных)
	
	СтруктураРеквизитовФормы = Форма.СтруктураРеквизитовФормы;
	
	ЗаписьРегистраСведений = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
	ЗаписьРегистраСведений.РегламентированныйОтчет = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	ЗаписьРегистраСведений.ВидДополнительногоФайла = ВидДополнительногоФайла;
	
	ЗаписьРегистраСведений.Прочитать();
	
	Если ЗначениеЗаполнено(ЗаписьРегистраСведений.ВидДополнительногоФайла) Тогда
		АдресДанных = ПоместитьВоВременноеХранилище(ЗаписьРегистраСведений.СодержимоеФайла.Получить(), Форма.УникальныйИдентификатор);
		СтруктураРеквизитовФормы.Вставить(ИмяАдресаДанных, АдресДанных);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВосстановитьРеквизитыПроверкиКонтрагентовИзРегистра(Форма)
	
	ВидДополнительногоФайла = ПроверкаКонтрагентовБРОКлиентСервер.НазваниеВидаДанныхРеквизитовПроверкиКонтрагентов();
	
	ЗаписьРегистраСведений = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
	ЗаписьРегистраСведений.РегламентированныйОтчет = Форма.СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	ЗаписьРегистраСведений.ВидДополнительногоФайла = ВидДополнительногоФайла;
	
	ЗаписьРегистраСведений.Прочитать();
	
	Если ЗначениеЗаполнено(ЗаписьРегистраСведений.ВидДополнительногоФайла) Тогда
		
		ВосстановленныеРеквизитыПроверкиКонтрагентов = ЗаписьРегистраСведений.СодержимоеФайла.Получить();
		
		Если ВосстановленныеРеквизитыПроверкиКонтрагентов.Свойство("ПроверкаВыполнялась") Тогда
			Форма.РеквизитыПроверкиКонтрагентов.ПроверкаВыполнялась = ВосстановленныеРеквизитыПроверкиКонтрагентов.ПроверкаВыполнялась;
		КонецЕсли;
		
		Если ВосстановленныеРеквизитыПроверкиКонтрагентов.Свойство("ЕстьДоступКВебСервисуФНС") Тогда
			Если ВосстановленныеРеквизитыПроверкиКонтрагентов.ЕстьДоступКВебСервисуФНС Тогда
				Форма.РеквизитыПроверкиКонтрагентов.ЕстьДоступКВебСервисуФНС = ВосстановленныеРеквизитыПроверкиКонтрагентов.ЕстьДоступКВебСервисуФНС;
			КонецЕсли;
		КонецЕсли;
		
		Если ВосстановленныеРеквизитыПроверкиКонтрагентов.Свойство("НайденыНекорректныеКонтрагенты") Тогда
			Форма.РеквизитыПроверкиКонтрагентов.НайденыНекорректныеКонтрагенты = ВосстановленныеРеквизитыПроверкиКонтрагентов.НайденыНекорректныеКонтрагенты;
		КонецЕсли;
		
		Если ВосстановленныеРеквизитыПроверкиКонтрагентов.Свойство("ЕстьКонтрагентыДляПроверки") Тогда
			Форма.РеквизитыПроверкиКонтрагентов.ЕстьКонтрагентыДляПроверки = ВосстановленныеРеквизитыПроверкиКонтрагентов.ЕстьКонтрагентыДляПроверки;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДанныеФоновыхЗаданийПроверкиКонтрагентов

Процедура ЗапомнитьДанныеФоновогоЗадания(УникальныйИдентификатор, ДанныеРаздела, НомерРаздела, ВидДанных)
	
	ЗаписьРегистраСведений = РегистрыСведений.ДанныеФоновогоЗаданияПроверкиКонтрагентов.СоздатьМенеджерЗаписи();
	ЗаписьРегистраСведений.УникальныйИдентификатор 	= УникальныйИдентификатор;
	ЗаписьРегистраСведений.НомерРаздела 			= НомерРаздела;
	ЗаписьРегистраСведений.ВидДанных 				= ВидДанных;
	
	Сжатие = Новый СжатиеДанных(9);
	Данные = Новый ХранилищеЗначения(ДанныеРаздела, Сжатие);
	
	ЗаписьРегистраСведений.Данные = Данные;
	ЗаписьРегистраСведений.Записать();
	
КонецПроцедуры

Процедура ОчиститьДанныеФоновогоЗадания(УникальныйИдентификатор)
	
	ЗаписьРегистраСведений = РегистрыСведений.ДанныеФоновогоЗаданияПроверкиКонтрагентов.СоздатьМенеджерЗаписи();
	ЗаписьРегистраСведений.УникальныйИдентификатор 	= УникальныйИдентификатор;
	ЗаписьРегистраСведений.Удалить();
	
КонецПроцедуры

Функция ВосстановитьДанныеФоновогоЗадания(УникальныйИдентификатор, НомерРаздела, ВидДанных)
	
	ЗаписьРегистраСведений = РегистрыСведений.ДанныеФоновогоЗаданияПроверкиКонтрагентов.СоздатьМенеджерЗаписи();
	ЗаписьРегистраСведений.УникальныйИдентификатор 	= УникальныйИдентификатор;
	ЗаписьРегистраСведений.НомерРаздела 			= НомерРаздела;
	ЗаписьРегистраСведений.ВидДанных	 			= ВидДанных;
	ЗаписьРегистраСведений.Прочитать();
	
	Возврат ЗаписьРегистраСведений.Данные.Получить();
	
КонецФункции

#КонецОбласти

#Область ОтображениеРезультатовПроверки

Процедура ВывестиРазделОтчета(Форма)
	
	Форма.ВывестиМакетВТаблДокНаСервере(Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
КонецПроцедуры

Функция ИдентификаторРазделаПоНаименованию(Форма, НаименованиеРаздела)
	
	ИдентификаторРаздела = Неопределено;
	
	// Получаем идентикификатор раздела
	РазделыОтчета = Форма.РазделыОтчета.ПолучитьЭлементы();
	Для каждого СтрокаРаздела Из РазделыОтчета Цикл
		Если СтрокаРаздела.КолонкаРазделыОтчетаСокрНаим = НаименованиеРаздела Тогда
			
			ИдентификаторРаздела = СтрокаРаздела.ПолучитьИдентификатор(); 
			Прервать;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИдентификаторРаздела;
	
КонецФункции

Функция НаименованиеТекущегоРаздела(Форма)
	
	НаимТекущегоРаздела = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	
	Если Форма.РеквизитыПроверкиКонтрагентов.ВыведеныВсеСтроки
		ИЛИ ПроверкаКонтрагентовБРОКлиентСервер.ЭтоПроверяемыйРаздел(НаимТекущегоРаздела) Тогда
		НаименованиеРаздела = НаимТекущегоРаздела;
	Иначе
		
		ТекущийРазделСодержитОшибки = ПроверкаКонтрагентовБРОКлиентСервер.ЭтоРазделДекларацииСОшибкамиПроверкиКонтрагентов(Форма, НаимТекущегоРаздела);
		Если ТекущийРазделСодержитОшибки Тогда
			// Остаемся в текущем
			НаименованиеРаздела = НаимТекущегоРаздела;
		Иначе
			// Ищем первый некорректный и туда позиционируемся
			НомерПервогоРаздела = НомерПервогоРазделаСОшибкамиКонтрагентов(Форма);
			
			Если НомерПервогоРаздела = 0 Тогда
				НаименованиеРаздела = НаимТекущегоРаздела;
			Иначе
				НаименованиеРаздела = "Раздел" + Строка(НомерПервогоРаздела);
			КонецЕсли;

		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НаименованиеРаздела;
	
КонецФункции

Функция НомерПервогоРазделаСОшибкамиКонтрагентов(Форма)
	
	НомерПервогоРаздела = 0;
	
	Разделы = ПроверкаКонтрагентовБРОКлиентСервер.ПроверяемыеРазделыДекларацииПоНДС();
	
	НачальныйРаздел = Разделы.Начальный;
	КонечныйРаздел 	= Разделы.Конечный;
	
	Для НомерРаздела = НачальныйРаздел По КонечныйРаздел Цикл
		
		АдресНекорректныхКонтрагентов = ПроверкаКонтрагентовБРОКлиентСервер.ИмяАдресаНекорректныхКонтрагентов(НомерРаздела);
		Если Форма.СтруктураРеквизитовФормы.Свойство(АдресНекорректныхКонтрагентов) Тогда
			
			НомерПервогоРаздела = НомерРаздела;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НомерПервогоРаздела;
	
КонецФункции

Процедура СохранитьРезультатыПроверкиВФорму(Форма, НомерРаздела)
	
	СохранитьПроверенныйОтчетВФорму(Форма, НомерРаздела);
	СохранитьОтчетПоНекорректнымКонтрагентамВФорму(Форма, НомерРаздела);
	СохранитьНекорректныеКонтрагентыВФорму(Форма, НомерРаздела);
	
КонецПроцедуры

Процедура СохранитьПроверенныйОтчетВФорму(Форма, НомерРаздела)
	
	УникальныйИдентификатор  = Форма.УникальныйИдентификатор;
	СтруктураРеквизитовФормы = Форма.СтруктураРеквизитовФормы;
	
	ПроверенныйОтчет = ВосстановитьДанныеФоновогоЗадания(УникальныйИдентификатор, НомерРаздела, "ПроверенныйОтчет");
	Ключ = ПроверкаКонтрагентовБРОКлиентСервер.ИмяАдресаПроверенногоОтчета(НомерРаздела);
	СохранитьРезультатПроверкиВФорму(Ключ, ПроверенныйОтчет, СтруктураРеквизитовФормы, Форма);
	
КонецПроцедуры

Процедура СохранитьОтчетПоНекорректнымКонтрагентамВФорму(Форма, НомерРаздела)
	
	УникальныйИдентификатор  = Форма.УникальныйИдентификатор;
	СтруктураРеквизитовФормы = Форма.СтруктураРеквизитовФормы;
	
	ОтчетПоНекорректнымКонтрагентам	= ВосстановитьДанныеФоновогоЗадания(УникальныйИдентификатор, НомерРаздела, "ОтчетПоНекорректнымКонтрагентам");
	Ключ = ПроверкаКонтрагентовБРОКлиентСервер.ИмяАдресаОтчетаПоНекорректнымКонтрагентам(НомерРаздела);
	СохранитьРезультатПроверкиВФорму(Ключ, ОтчетПоНекорректнымКонтрагентам, СтруктураРеквизитовФормы, Форма);
	
КонецПроцедуры

Процедура СохранитьНекорректныеКонтрагентыВФорму(Форма, НомерРаздела)
	
	УникальныйИдентификатор  = Форма.УникальныйИдентификатор;
	СтруктураРеквизитовФормы = Форма.СтруктураРеквизитовФормы;
	
	НекорректныеКонтрагенты = ВосстановитьДанныеФоновогоЗадания(УникальныйИдентификатор, НомерРаздела, "НекорректныеКонтрагенты");
	Ключ = ПроверкаКонтрагентовБРОКлиентСервер.ИмяАдресаНекорректныхКонтрагентов(НомерРаздела);
	СохранитьРезультатПроверкиВФорму(Ключ, НекорректныеКонтрагенты, СтруктураРеквизитовФормы, Форма);
	
КонецПроцедуры

Процедура СохранитьРезультатПроверкиВФорму(Ключ, Данные, СтруктураРеквизитовФормы, Форма)
	
	Если Данные <> Неопределено Тогда
		
		Адрес = ПоместитьВоВременноеХранилище(Данные, Форма.УникальныйИдентификатор);
		СтруктураРеквизитовФормы.Вставить(Ключ, Адрес);
		
	КонецЕсли;
	
КонецПроцедуры
		
#КонецОбласти

#Область ПодкраскаИФормированиеТабличныхДокументов

Процедура ВыделитьИСохранитьНекорректныхКонтрагентов(УникальныйИдентификатор, НомерРаздела, НекорректныеКонтрагентыРаздела)
	
	ТабличныйДокумент = ВосстановитьДанныеФоновогоЗадания(УникальныйИдентификатор, НомерРаздела, "ТабличныйДокумент");
	
	Если ТабличныйДокумент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПроверенныйОтчет 				= ОтчетСВыделеннымиНекорректнымиКонтрагентами(ТабличныйДокумент, НомерРаздела, НекорректныеКонтрагентыРаздела);
	ОтчетПоНекорректнымКонтрагентам = ОтчетТолькоПоНекорректнымКонтрагентам(ПроверенныйОтчет, НомерРаздела, НекорректныеКонтрагентыРаздела);
	
	// Запоминаем результат проверки
	ЗапомнитьДанныеФоновогоЗадания(УникальныйИдентификатор, ПроверенныйОтчет, НомерРаздела, "ПроверенныйОтчет");
	ПроверенныйОтчет = Неопределено; // Очищаем память 
	
	ЗапомнитьДанныеФоновогоЗадания(УникальныйИдентификатор, ОтчетПоНекорректнымКонтрагентам, НомерРаздела, "ОтчетПоНекорректнымКонтрагентам");
	ОтчетПоНекорректнымКонтрагентам = Неопределено; // Очищаем память  
	
	КонтрагентыСОшибками = КонтрагентыСОшибками(НекорректныеКонтрагентыРаздела);
	ЗапомнитьДанныеФоновогоЗадания(УникальныйИдентификатор, КонтрагентыСОшибками, НомерРаздела, "НекорректныеКонтрагенты");
	КонтрагентыСОшибками = Неопределено; // Очищаем память   
	
КонецПроцедуры

Функция ОтчетСВыделеннымиНекорректнымиКонтрагентами(ТабличныйДокумент, НомерРаздела, НекорректныеКонтрагентыРаздела)
	
	ОкончаниеШапкиОтчета = ОкончаниеШапкиОтчета(ТабличныйДокумент, НомерРаздела);
	
	// Копируем полностью
	ПроверенныйОтчет = Новый ТабличныйДокумент;
	ПроверенныйОтчет.Вывести(ТабличныйДокумент);
	ТабличныйДокумент = Неопределено; // Очищаем память
	
	НомерПорНекорректныхКонтрагентов = НекорректныеКонтрагентыРаздела.Скопировать(,"НомерСтроки, ВысотаСтроки");
	НомерПорНекорректныхКонтрагентов.Свернуть("НомерСтроки, ВысотаСтроки");
	
	Для Каждого НекорректныйКонтрагент ИЗ НомерПорНекорректныхКонтрагентов Цикл 
		
		НомерСтроки 	= ОкончаниеШапкиОтчета + НекорректныйКонтрагент.НомерСтроки;
		ВысотаСтроки 	= НекорректныйКонтрагент.ВысотаСтроки;
		
		ПодкраситьСтроку(ПроверенныйОтчет, НомерРаздела, НомерСтроки, ВысотаСтроки);
		
	КонецЦикла;
	
	Возврат ПроверенныйОтчет;
	
КонецФункции

Функция ОтчетТолькоПоНекорректнымКонтрагентам(ПроверенныйОтчет, НомерРаздела, НекорректныеКонтрагентыРаздела)
	
	ОкончаниеШапкиОтчета = ОкончаниеШапкиОтчета(ПроверенныйОтчет, НомерРаздела);
	
	ОтчетПоНекорректнымКонтрагентам = Новый ТабличныйДокумент;
	ОтчетПоНекорректнымКонтрагентам.Вывести(ПроверенныйОтчет);
	
	НомерПорНекорректныхКонтрагентов = НекорректныеКонтрагентыРаздела.Скопировать(,"НомерСтроки, ВысотаСтроки");
	НомерПорНекорректныхКонтрагентов.Свернуть("НомерСтроки, ВысотаСтроки");
	
	НомерПервойСтрокиСкрываемойОбласти 		= ОкончаниеШапкиОтчета + 1;
	НомерПоследнейСтрокиСкрываемойОбласти 	= ОкончаниеШапкиОтчета + 1;
	
	Для Каждого НекорректныйКонтрагент ИЗ НомерПорНекорректныхКонтрагентов Цикл
		
		НомерПервойСтрокиНекорректногоКонтрагентаИсходный 		= ОкончаниеШапкиОтчета + НекорректныйКонтрагент.НомерСтроки;
		НомерПервойСтрокиНекорректногоКонтрагентаПослеСдвига 	= НомерПервойСтрокиНекорректногоКонтрагентаИсходный;
		НомерПоследнейСтрокиСкрываемойОбласти 					= НомерПервойСтрокиНекорректногоКонтрагентаПослеСдвига - 1; // предыдущая строка
		
		Если НомерПервойСтрокиСкрываемойОбласти <= НомерПоследнейСтрокиСкрываемойОбласти Тогда
			
			КоличествоУдаленныхСтрок 		= НомерПоследнейСтрокиСкрываемойОбласти - НомерПервойСтрокиСкрываемойОбласти + 1;
			СкрываемаяОбласть 				= ОтчетПоНекорректнымКонтрагентам.Область(НомерПервойСтрокиСкрываемойОбласти, ,НомерПоследнейСтрокиСкрываемойОбласти);
			СкрываемаяОбласть.Видимость 	= Ложь;
			
		КонецЕсли;
		
		НомерПоследнейСтрокиНекорректногоКонтрагентаИсходный 	= ОкончаниеШапкиОтчета + НекорректныйКонтрагент.НомерСтроки + НекорректныйКонтрагент.ВысотаСтроки - 1;
		НомерПоследнейСтрокиНекорректногоКонтрагентаПослеСдвига = НомерПоследнейСтрокиНекорректногоКонтрагентаИсходный;
		НомерПервойСтрокиСкрываемойОбласти 						= НомерПоследнейСтрокиНекорректногоКонтрагентаПослеСдвига + 1; // следующая строка
		
	КонецЦикла;
	
	// Удаляем остаток табличной части
	СкрываемаяОбласть 				= ОтчетПоНекорректнымКонтрагентам.Область(НомерПервойСтрокиСкрываемойОбласти, ,ОтчетПоНекорректнымКонтрагентам.ВысотаТаблицы);
	СкрываемаяОбласть.Видимость 	= Ложь;
	
	Возврат ОтчетПоНекорректнымКонтрагентам;
	
КонецФункции

Процедура ПодкраситьСтроку(ТабДок, НомерРаздела, НомерСтроки, ВысотаСтроки) 
	
	// В полном отчете подкрашиваем строку
	ПерваяКолонка 		= ПерваяКолонкаТаблицы(НомерРаздела);
	ШиринаТабДока 		= ТабДок.ШиринаТаблицы;
	Область 			= ТабДок.Область(НомерСтроки, ПерваяКолонка, НомерСтроки + ВысотаСтроки - 1, ШиринаТабДока);
	Область.ЦветФона 	= Новый Цвет(251, 212, 212);

КонецПроцедуры

Функция ПерваяКолонкаТаблицы(НомерРаздела)
	
	Если НомерРаздела = 10
		ИЛИ НомерРаздела = 11
		ИЛИ НомерРаздела = 12 Тогда
		ПерваяКолонка = 2;
	Иначе
		ПерваяКолонка = 1;
	КонецЕсли;
	
	Возврат ПерваяКолонка;
	
КонецФункции

Функция ОкончаниеШапкиОтчета(ТабличныйДокумент, Раздел)
	
	ПерваяКолонкаТаблицы 	= ПерваяКолонкаТаблицы(Раздел);
	
	НомерПервойСтроки		= 0;
	НомерПервойКолонки		= ПерваяКолонкаТаблицы;
	НомерПоследнейСтроки	= 0;
	НомерПоследнейКолонки	= ПерваяКолонкаТаблицы;
	
	Начало = ТабличныйДокумент.Область(НомерПервойСтроки, НомерПервойКолонки, НомерПоследнейСтроки, НомерПоследнейКолонки);
	
	НомерПервойСтроки		= 0;
	НомерПервойКолонки		= ПерваяКолонкаТаблицы;
	НомерПоследнейСтроки	= ТабличныйДокумент.ВысотаТаблицы;
	НомерПоследнейКолонки	= ПерваяКолонкаТаблицы;
	
	Где = ТабличныйДокумент.Область(НомерПервойСтроки, НомерПервойКолонки, НомерПоследнейСтроки, НомерПоследнейКолонки); 
	
	// Ищем сначала п/п затем 1 чтобы найти конец шапки
	НайденнаяОбласть = ТабличныйДокумент.НайтиТекст("п/п", Начало, Где);
	НайденнаяОбласть = ТабличныйДокумент.НайтиТекст("1", НайденнаяОбласть, Где);
	
	Если НайденнаяОбласть = Неопределено Тогда
		НомерСтроки = 0;
	Иначе
		НомерСтроки = НайденнаяОбласть.Верх;
	КонецЕсли;
	
	Возврат НомерСтроки;
	
КонецФункции

Процедура ВыделитьРазделСОшибкой(Форма) Экспорт
	
	РазделыОтчета = Форма.РазделыОтчета.ПолучитьЭлементы();
	Для каждого Раздел Из РазделыОтчета Цикл
	
		Раздел.СодержитОшибкиПроверкиКонтрагентов =
			Форма.РеквизитыПроверкиКонтрагентов.ПроверкаИспользуется
			И ПроверкаКонтрагентовБРОКлиентСервер.ЭтоРазделДекларацииСОшибкамиПроверкиКонтрагентов(Форма, Раздел.КолонкаРазделыОтчетаСокрНаим);
		
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти

#Область ПодготовкаДанныхКПроверке

Процедура ПодготовитьДанныеФоновогоЗадания(Форма) 
	
	СтруктураРеквизитовФормы = Форма.СтруктураРеквизитовФормы;
	
	Разделы = ПроверкаКонтрагентовБРОКлиентСервер.ПроверяемыеРазделыДекларацииПоНДС();
	
	НачальныйРаздел = Разделы.Начальный;
	КонечныйРаздел 	= Разделы.Конечный;
	
	Для НомерРаздела = НачальныйРаздел По КонечныйРаздел Цикл
		
		ЗаполнитьТаблицуРаздела(Форма, НомерРаздела);
		ЗаполнитьТабличныйДокументРаздела(Форма, НомерРаздела);
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуРаздела(Форма, НомерРаздела)
	
	СтруктураРеквизитовФормы 	= Форма.СтруктураРеквизитовФормы;
	Свойство 					= "АдресДанныхРаздел" + Строка(НомерРаздела);
	ДанныеРаздела 				= Неопределено;
	
	Если СтруктураРеквизитовФормы.Свойство(Свойство) Тогда
		Адрес = СтруктураРеквизитовФормы[Свойство];
		Если ЭтоАдресВременногоХранилища(Адрес) Тогда
			ДанныеРаздела = ПолучитьИзВременногоХранилища(Адрес).Записи;
		КонецЕсли;
	КонецЕсли;
	
	ЗапомнитьДанныеФоновогоЗадания(Форма.УникальныйИдентификатор, ДанныеРаздела, НомерРаздела, "ТаблицаЗначений");
	
КонецПроцедуры

Процедура ЗаполнитьТабличныйДокументРаздела(Форма, НомерРаздела)
	
	СтруктураРеквизитовФормы 	= Форма.СтруктураРеквизитовФормы;
	Свойство 					= "АдресТабличногоДокументаРаздел" + Строка(НомерРаздела);
	ДанныеРаздела 				= Неопределено;
	
	Если СтруктураРеквизитовФормы.Свойство(Свойство) Тогда
		Адрес = СтруктураРеквизитовФормы[Свойство];
		Если ЭтоАдресВременногоХранилища(Адрес) Тогда
			ДанныеРаздела = ПолучитьИзВременногоХранилища(Адрес);
		КонецЕсли;
	КонецЕсли;
	
	ЗапомнитьДанныеФоновогоЗадания(Форма.УникальныйИдентификатор, ДанныеРаздела, НомерРаздела, "ТабличныйДокумент");
	
КонецПроцедуры

Процедура ОчиститьРезультатыПредыдущихПроверок(Форма)
	
	Разделы = ПроверкаКонтрагентовБРОКлиентСервер.ПроверяемыеРазделыДекларацииПоНДС();
		
	НачальныйРаздел = Разделы.Начальный;
	КонечныйРаздел 	= Разделы.Конечный;
	
	СтруктураРеквизитовФормы = Форма.СтруктураРеквизитовФормы;
	
	// Очищаем все предыдущие результаты проверки
	Для НомерРаздела = НачальныйРаздел По КонечныйРаздел Цикл
		
		Ключ = ПроверкаКонтрагентовБРОКлиентСервер.ИмяАдресаПроверенногоОтчета(НомерРаздела);
		УдалитьПредыдущийРезультатПроверки(СтруктураРеквизитовФормы, Ключ);
		
		Ключ = ПроверкаКонтрагентовБРОКлиентСервер.ИмяАдресаОтчетаПоНекорректнымКонтрагентам(НомерРаздела);
		УдалитьПредыдущийРезультатПроверки(СтруктураРеквизитовФормы, Ключ);
		
		Ключ = ПроверкаКонтрагентовБРОКлиентСервер.ИмяАдресаНекорректныхКонтрагентов(НомерРаздела);
		УдалитьПредыдущийРезультатПроверки(СтруктураРеквизитовФормы, Ключ);
		
	КонецЦикла;
	
	Форма.РеквизитыПроверкиКонтрагентов.НайденыНекорректныеКонтрагенты 	= Ложь;
	Форма.РеквизитыПроверкиКонтрагентов.ВыведеныВсеСтроки 				= Истина;
	
	// Очищаем выделение разделов с ошибками
	ВыделитьРазделСОшибкой(Форма);
	// Показываем отчет с очищенными результатами проверки на время выполнения проверки
	ВывестиРазделОтчета(Форма);
	
КонецПроцедуры

Процедура УдалитьПредыдущийРезультатПроверки(СтруктураРеквизитовФормы, Ключ)
	
	Если СтруктураРеквизитовФормы.Свойство(Ключ) Тогда
		СтруктураРеквизитовФормы.Удалить(Ключ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Проверка

Процедура ПроверитьКонтрагентовВРазделе(УникальныйИдентификатор, НомерРаздела, КоличествоКонтрагентов)
	
	ВсеКонтрагентыРаздела 			= ВсеКонтрагентыРаздела(УникальныйИдентификатор, НомерРаздела);
	КоличествоКонтрагентовРаздела 	= ВсеКонтрагентыРаздела.Количество();

	Если КоличествоКонтрагентовРаздела = 0 Тогда
		Возврат;
	Иначе
		КоличествоКонтрагентов = КоличествоКонтрагентов + КоличествоКонтрагентовРаздела;
	КонецЕсли;
	
	НекорректныеКонтрагенты = НекорректныеКонтрагентыРаздела(ВсеКонтрагентыРаздела);
	ВсеКонтрагентыРаздела 	= Неопределено; // Очищаем, чтобы не было переполнения памяти
	
	ВыделитьИСохранитьНекорректныхКонтрагентов(УникальныйИдентификатор, НомерРаздела, НекорректныеКонтрагенты);
	
КонецПроцедуры

Функция КонтрагентыСОшибками(НекорректныеКонтрагентыРаздела)
	
	Если НекорректныеКонтрагентыРаздела.Количество() = 0 Тогда
		КонтрагентыСОшибками = Неопределено;
	Иначе
		КонтрагентыСОшибками = НекорректныеКонтрагентыРаздела.Скопировать();
	КонецЕсли;
	
	Возврат КонтрагентыСОшибками;
	
КонецФункции	

Функция НекорректныеКонтрагентыРаздела(ПроверяемыеКонтрагенты)
	
	АдресХранилища 			= ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
	ДанныеКонтрагентов 		= ПроверяемыеКонтрагенты.Скопировать();
	
	ПроверитьКонтрагентов(ДанныеКонтрагентов, АдресХранилища, Ложь);
	
	СостоянияНедействующегоКонтрагента = СостоянияНедействующегоКонтрагента(Истина);
	ЗаполнитьСостояния(ПроверяемыеКонтрагенты, ДанныеКонтрагентов, СостоянияНедействующегоКонтрагента);
	ДанныеКонтрагентов = Неопределено;
	
	ПроверяемыеКонтрагенты.Свернуть("Раздел, НомерПор, ИНН, КПП, Дата, Состояние, ВысотаСтроки, НомерСтроки");
	
	Возврат ПроверяемыеКонтрагенты;

КонецФункции

Функция ВсеКонтрагентыРаздела(УникальныйИдентификатор, НомерРаздела)
	
	ТаблицаРаздела 		= ВосстановитьДанныеФоновогоЗадания(УникальныйИдентификатор, НомерРаздела, "ТаблицаЗначений");
	ДанныеКонтрагентов 	= ШаблонТаблицыДанныеКонтрагента();
	
	ТекущийНомерСтроки = 1;
	Если ТаблицаРаздела <> Неопределено Тогда
		
		Для каждого СтрокаРаздела Из ТаблицаРаздела Цикл
			
			ДанныеКонтрагента 	= СтрокаРаздела[ИмяПоляКонтрагентаРаздела(НомерРаздела)];
			Раздел 				= НомерРаздела;
			НомерПор 			= СтрокаРаздела.НомерПор;
			Дата 				= ДатаСчетаФактурыВДекларации(СтрокаРаздела);
			ВысотаСтроки 		= ?(Раздел = 10, СтрокаРаздела.СвПосрДеят.Количество(), 1);

			ДобавитьКонтрагента(ДанныеКонтрагентов, ДанныеКонтрагента, Раздел, НомерПор, Дата, ТекущийНомерСтроки, ВысотаСтроки);
					
		КонецЦикла;
			
	КонецЕсли;
	
	Возврат ДанныеКонтрагентов;
	
КонецФункции

Функция ЕстьКонтрагентыДляПроверки(Форма)
	
	Разделы = ПроверкаКонтрагентовБРОКлиентСервер.ПроверяемыеРазделыДекларацииПоНДС();
	
	Для НомерРаздела = Разделы.Начальный По Разделы.Конечный Цикл
	
		СтруктураРеквизитовФормы 	= Форма.СтруктураРеквизитовФормы;
		Свойство 					= "АдресДанныхРаздел" + Строка(НомерРаздела);
		ДанныеРаздела 				= Неопределено;
		
		Если НЕ СтруктураРеквизитовФормы.Свойство(Свойство) Тогда
			Продолжить;
		КонецЕсли;
			
		Адрес = СтруктураРеквизитовФормы[Свойство];
		
		Если НЕ ЭтоАдресВременногоХранилища(Адрес) Тогда
			Продолжить;
		КонецЕсли;
			
		ТаблицаРаздела = ПолучитьИзВременногоХранилища(Адрес).Записи;
		КоличествоКонтрагентов = ТаблицаРаздела.Количество();
		
		Если КоличествоКонтрагентов > 0 Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЕстьКолонкаСтрокиТаблицыЗначений(Источник, ИмяКолонки)
	
	ИскомыеРеквизиты = Новый Структура(ИмяКолонки, NULL);
	ЗаполнитьЗначенияСвойств(ИскомыеРеквизиты, Источник);

	РеквизитСуществует = Ложь;
	Если ИскомыеРеквизиты[ИмяКолонки] <> NULL Тогда
		РеквизитСуществует = Истина;
	КонецЕсли;
	
	Возврат РеквизитСуществует;

КонецФункции

Функция ИмяПоляКонтрагентаРаздела(НомерРаздела)
	
	Если НомерРаздела = 8
		ИЛИ НомерРаздела = 11 Тогда
		Имя = "СвПрод";
	ИначеЕсли НомерРаздела = 9
		ИЛИ НомерРаздела = 10
		ИЛИ НомерРаздела = 12 Тогда
		Имя = "СвПокуп";
	КонецЕсли;
	
	Возврат Имя;
	
КонецФункции

Функция ШаблонТаблицыДанныеКонтрагента()
	
	ДанныеКонтрагентов = Новый ТаблицаЗначений;
	
	ДанныеКонтрагентов.Колонки.Добавить("Контрагент", 	Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ДанныеКонтрагентов.Колонки.Добавить("ИНН", 			Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(12)));
	ДанныеКонтрагентов.Колонки.Добавить("КПП", 			Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(9)));
	ДанныеКонтрагентов.Колонки.Добавить("Дата", 		Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ДанныеКонтрагентов.Колонки.Добавить("Состояние", 	Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияСуществованияКонтрагента"));
	ДанныеКонтрагентов.Колонки.Добавить("Раздел", 		Новый ОписаниеТипов("Число",,Новый КвалификаторыЧисла(2, 0)));
	ДанныеКонтрагентов.Колонки.Добавить("НомерПор", 	Новый ОписаниеТипов("Число",,Новый КвалификаторыЧисла(12, 0)));
	ДанныеКонтрагентов.Колонки.Добавить("ВысотаСтроки", Новый ОписаниеТипов("Число",,Новый КвалификаторыЧисла(3, 0)));
	ДанныеКонтрагентов.Колонки.Добавить("НомерСтроки",  Новый ОписаниеТипов("Число",,Новый КвалификаторыЧисла(12, 0)));
	
	ДобавитьКолонкуОбластьДанных(ДанныеКонтрагентов);
	
	Возврат ДанныеКонтрагентов;
	
КонецФункции

Процедура ДобавитьКонтрагента(ДанныеКонтрагентов, ДанныеКонтрагента, Раздел, НомерПор, Дата, ТекущийНомерСтроки, ВысотаСтроки = 1) 

	Если ТипЗнч(ДанныеКонтрагента) = Тип("Структура") Тогда
		
		ЗаполнитьДанныеКонтрагента(
			ДанныеКонтрагентов, 
			ИННКонтрагентаВДекларации(ДанныеКонтрагента),
			КППКонтрагентаВДекларации(ДанныеКонтрагента),
			Дата, 
			Раздел, 
			НомерПор,
			ТекущийНомерСтроки,
			ВысотаСтроки);
				
	ИначеЕсли ТипЗнч(ДанныеКонтрагента) = Тип("Массив") Тогда
		
		Для каждого Контрагент Из ДанныеКонтрагента Цикл
					
			ЗаполнитьДанныеКонтрагента(
				ДанныеКонтрагентов, 
				ИННКонтрагентаВДекларации(Контрагент),
				КППКонтрагентаВДекларации(Контрагент),
				Дата, 
				Раздел, 
				НомерПор,
				ТекущийНомерСтроки,
				ВысотаСтроки);
			
		КонецЦикла;
			
	КонецЕсли;
	
	ТекущийНомерСтроки = ТекущийНомерСтроки + ВысотаСтроки;
		
КонецПроцедуры

Процедура ЗаполнитьДанныеКонтрагента(ДанныеКонтрагентов, ИНН, КПП, Дата, Раздел, НомерПор, НомерСтроки, ВысотаСтроки)
	
	НоваяСтрока 				= ДанныеКонтрагентов.Добавить();
	НоваяСтрока.ИНН 			= ИНН;
	НоваяСтрока.КПП 			= КПП;
	НоваяСтрока.Дата 			= Дата;
	НоваяСтрока.Раздел 			= Раздел;
	НоваяСтрока.НомерПор 		= НомерПор;
	НоваяСтрока.НомерСтроки 	= НомерСтроки;
	НоваяСтрока.ВысотаСтроки 	= ВысотаСтроки;

КонецПроцедуры

#Область ПреобразованиеДанныхКНужномуФормату

Функция ДатаСчетаФактурыВДекларации(Строка)
	
	Результат = Дата(1,1,1);
	
	Если ЕстьКолонкаСтрокиТаблицыЗначений(Строка, "ДатаСчФ") Тогда
		// 12 раздел
		Дата = ДатаИзСтроки(Строка.ДатаСчФ);
	Иначе
		ДатаСчФПрод 	= Строка.ДатаСчФПрод;
		ДатаИспрСчФ 	= Строка.ДатаИспрСчФ;
		ДатаКСчФПрод 	= Строка.ДатаКСчФПрод;
		ДатаИспрКСчФ 	= Строка.ДатаИспрКСчФ;
		
		Если ДатаЗаполнена(ДатаИспрКСчФ) Тогда
			Результат = ДатаИзСтроки(ДатаИспрКСчФ);
		ИначеЕсли ДатаЗаполнена(ДатаКСчФПрод) Тогда
			Результат = ДатаИзСтроки(ДатаКСчФПрод);
		ИначеЕсли ДатаЗаполнена(ДатаИспрСчФ) Тогда
			Результат = ДатаИзСтроки(ДатаИспрСчФ);
		Иначе
			Результат = ДатаИзСтроки(ДатаСчФПрод);
		КонецЕсли;
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

Функция ИННКонтрагентаВДекларации(ДанныеКонтрагента)
	
	ИНН = "";
	
	Если ДанныеКонтрагента <> Неопределено Тогда
		Если ДанныеКонтрагента.Свойство("ИННФЛ") Тогда
			ИНН = ДанныеКонтрагента.ИННФЛ;
		ИначеЕсли ДанныеКонтрагента.Свойство("ИННЮЛ") Тогда
			ИНН = ДанныеКонтрагента.ИННЮЛ;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИНН;
	
КонецФункции

Функция КППКонтрагентаВДекларации(ДанныеКонтрагента)
	
	КПП = "";
	
	Если ДанныеКонтрагента <> Неопределено Тогда
		Если ДанныеКонтрагента.Свойство("КПП") Тогда
			КПП = ДанныеКонтрагента.КПП;
		КонецЕсли;
	КонецЕсли;
	
	Возврат КПП;
	
КонецФункции

Функция ДатаИзСтроки(ДатаДляПреобразования)
	
	Результат = Дата(1,1,1);
	
	Если ДатаЗаполнена(ДатаДляПреобразования) Тогда
		
		Год 	= Прав(ДатаДляПреобразования, 4);
		Месяц 	= Сред(ДатаДляПреобразования, 4, 2);
		Число	= Лев(ДатаДляПреобразования, 2);
		
		Результат = Дата(Год + Месяц + Число);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДатаЗаполнена(Дата)
	
	Возврат Дата <> "Нет даты" 
		И Дата <> Дата(1,1,1) 
		И ЗначениеЗаполнено(Дата);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Вспомогательные

Функция ОбщийМодульПроверкаКонтрагентовБРОПереопределяемый() Экспорт
	
	Попытка
		Возврат ОбщегоНазначения.ОбщийМодуль("ПроверкаКонтрагентовБРОПереопределяемый");
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция СтандартноеДействиеПриСозданииНаСервереОтчета(Форма) Экспорт
	
	// Предлагаем заменить стандартное поведение
	Модуль = ОбщийМодульПроверкаКонтрагентовБРОПереопределяемый();
	Если Модуль <> Неопределено Тогда
		
		СтандартнаяОбработка = Истина; 
		Модуль.ПриСозданииНаСервереДекларацияПоНДС(Форма, СтандартнаяОбработка);
		
		Если НЕ СтандартнаяОбработка Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	// Не позволяем идти дальше, если нет стандартной подсистемы
	Возврат ПроверкаКонтрагентовБРОКлиентСервер.РаботаСКонтрагентамиСуществует();
	
КонецФункции

Процедура ДобавитьКолонкуОбластьДанных(Таблица)
	
	Таблица.Колонки.Добавить("ОбластьДанныхВспомогательныеДанные", 	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 0, ДопустимыйЗнак.Неотрицательный)));
	
КонецПроцедуры

Процедура ИнициализироватьРеквизитыДекларацияПоНДС(Форма)
	
	НовыеРеквизиты = Новый Структура;
	
	// Служебный реквизит для работы фонового задания.
	НовыеРеквизиты.Вставить("АдресХранилища");
	// Служебный реквизит для работы фонового задания.
	НовыеРеквизиты.Вставить("ИдентификаторЗадания", 			Новый УникальныйИдентификатор);
	НовыеРеквизиты.Вставить("ВыведеныВсеСтроки", 				Истина);
	НовыеРеквизиты.Вставить("ПроверкаВыполнялась", 				Ложь);
	НовыеРеквизиты.Вставить("ЕстьДоступКВебСервисуФНС", 		Истина);
	НовыеРеквизиты.Вставить("ПроверкаИспользуется", 			Ложь);
	НовыеРеквизиты.Вставить("НайденыНекорректныеКонтрагенты", 	Ложь);
	НовыеРеквизиты.Вставить("ЕстьКонтрагентыДляПроверки", 		Ложь);

	Форма.РеквизитыПроверкиКонтрагентов = НовыеРеквизиты;
	
КонецПроцедуры

Процедура УстановитьНадписиВПанелиОтчетаПриСоздании(Форма)
	
	УстановитьНадписиВПанелиОтчетаПриСозданииНаСервере(Форма);
	
	СсылкаНаИнструкцию = Новый ФорматированнаяСтрока(" ", ПроверкаКонтрагентовБРО.СсылкаНаИнструкцию());
	
	// Доп информация
	ЭлементФормы = Форма.Элементы.Найти("ТекстДопИнформацияПоПроверке");
	Если ЭлементФормы <> Неопределено Тогда
		ЭлементФормы.Заголовок = Новый ФорматированнаяСтрока(НСтр("ru = 'Проверка контрагентов по данным ФНС не выполнена: не заполнены сведения для проверки'"), СсылкаНаИнструкцию);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСостояния(ПроверяемыеКонтрагенты, ДанныеКонтрагентов, Состояния = Неопределено)
	
	// Соединяем результаты проверки с исходной таблицей.
	Запрос = Новый Запрос;
	Если ПроверяемыеКонтрагенты.Колонки.Найти("Состояние") <> Неопределено Тогда
		ПроверяемыеКонтрагенты.Колонки.Удалить("Состояние");
	КонецЕсли;
	ПоместитьТаблицуЗначенийВоВременнуюТаблицу(ПроверяемыеКонтрагенты, Запрос, "ПроверяемыеКонтрагенты");
		
	ПоместитьТаблицуЗначенийВоВременнуюТаблицу(ДанныеКонтрагентов, 	Запрос, "ДанныеКонтрагентов");
	
	// По всем контрагентам определяем состояние.
	// В таблице оставляем только контрагентов с ошибками.
	Запрос.Текст = Запрос.Текст + "
		|ВЫБРАТЬ 
		| 	" + ПредставлениеКолонок(ПроверяемыеКонтрагенты, "ПроверяемыеКонтрагенты.") + ", 
		| 	ДанныеКонтрагентов.Состояние КАК Состояние
		|ИЗ 
		|	ПроверяемыеКонтрагенты КАК ПроверяемыеКонтрагенты
		|	ЛЕВОЕ СОЕДИНЕНИЕ ДанныеКонтрагентов КАК ДанныеКонтрагентов
		|	ПО ПроверяемыеКонтрагенты.Контрагент = ДанныеКонтрагентов.Контрагент
		|		И ПроверяемыеКонтрагенты.ИНН = ДанныеКонтрагентов.ИНН
		|		И ПроверяемыеКонтрагенты.КПП = ДанныеКонтрагентов.КПП
		|		И (НАЧАЛОПЕРИОДА(ПроверяемыеКонтрагенты.Дата, День) = НАЧАЛОПЕРИОДА(ДанныеКонтрагентов.Дата, День)
		|		ИЛИ НАЧАЛОПЕРИОДА(ПроверяемыеКонтрагенты.Дата, День) = ДатаВремя(1,1,1))";
		
	Если Состояния <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
			|
			|ГДЕ
			|	ДанныеКонтрагентов.Состояние В (&Состояния)";
		
		Запрос.УстановитьПараметр("Состояния", Состояния);
	КонецЕсли;
		
	ПроверяемыеКонтрагенты = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

Процедура ПоместитьТаблицуЗначенийВоВременнуюТаблицу(Таблица, Запрос, ИмяВременнойТаблицы)
	
	ПредставлениеКолонок = ПредставлениеКолонок(Таблица);
	
	Запрос.Текст = Запрос.Текст + "
		|ВЫБРАТЬ 
		| " + ПредставлениеКолонок + "
		| ПОМЕСТИТЬ " + ИмяВременнойТаблицы + "
		| ИЗ &" + ИмяВременнойТаблицы + " КАК " + ИмяВременнойТаблицы + ";
		|//////////////////////////////////////////////////////////////////////////////////////////////////";
	
	Запрос.УстановитьПараметр(ИмяВременнойТаблицы, Таблица);
	
КонецПроцедуры

Функция ПредставлениеКолонок(Таблица, СинонимТаблицы = "")
	
	КолонкиИсходнойТаблицы = Новый Массив;
	Для Каждого Колонка Из Таблица.Колонки Цикл
		КолонкиИсходнойТаблицы.Добавить(СинонимТаблицы + Колонка.Имя);
	КонецЦикла;
	
	ПредставлениеКолонок = СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(КолонкиИсходнойТаблицы, "," + Символы.ПС);
	Возврат ПредставлениеКолонок;
	
КонецФункции

Процедура ОчиститьРезультатыПроверкиКонтрагентовВРазделе(Форма, НомерРаздела)

	Ключ = ПроверкаКонтрагентовБРОКлиентСервер.ИмяАдресаПроверенногоОтчета(НомерРаздела);
	Форма.СтруктураРеквизитовФормы.Удалить(Ключ);
	
	Ключ = ПроверкаКонтрагентовБРОКлиентСервер.ИмяАдресаОтчетаПоНекорректнымКонтрагентам(НомерРаздела);
	Форма.СтруктураРеквизитовФормы.Удалить(Ключ);
	
	Ключ = ПроверкаКонтрагентовБРОКлиентСервер.ИмяАдресаНекорректныхКонтрагентов(НомерРаздела);
	Форма.СтруктураРеквизитовФормы.Удалить(Ключ);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти