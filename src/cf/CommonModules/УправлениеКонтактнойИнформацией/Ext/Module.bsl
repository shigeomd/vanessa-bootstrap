////////////////////////////////////////////////////////////////////////////////
// Подсистема "Контактная информация".
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы и модуля объекта.

// Обработчик для события формы ПриСозданииНаСервере.
// Вызывается из модуля формы объекта-владельца КИ при внедрении подсистемы.
//
// Параметры:
//    Форма                - УправляемаяФорма - Форма объекта-владельца, предназначенная для вывода контактной.
//                           Информации.
//    Объект               - Произвольный - Объект-владелец контактной информации.
//    ПоложениеЗаголовкаКИ - ПоложениеЗаголовкаЭлементаФормы - Может принимать значения
//                                                             ПоложениеЗаголовкаЭлементаФормы.Лево  или
//                                                             ПоложениеЗаголовкаЭлементаФормы.Верх (по умолчанию).
//
Процедура ПриСозданииНаСервере(Форма, Объект, ИмяЭлементаДляРазмещения = "", ПоложениеЗаголовкаКИ = "",
	Знач ИсключаемыеВиды = Неопределено, ОтложеннаяИнициализация = Ложь) Экспорт
	
	Если ИсключаемыеВиды = Неопределено Тогда
		ИсключаемыеВиды = Новый Массив;
	КонецЕсли;
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	ПроверитьНаличиеРеквизитовКонтактнойИнформации(Форма, МассивДобавляемыхРеквизитов);
	
	// Получим список видов КИ
	
	СсылкаНаОбъект = Объект.Ссылка;
	МетаданныеОбъекта = СсылкаНаОбъект.Метаданные();
	ПолноеИмяОбъектаМетаданных = МетаданныеОбъекта.ПолноеИмя();
	ИмяГруппыВидовКИ = СтрЗаменить(ПолноеИмяОбъектаМетаданных, ".", "");
	ГруппаВидовКИ = Справочники.ВидыКонтактнойИнформации[ИмяГруппыВидовКИ];
	ИмяОбъекта = МетаданныеОбъекта.Имя;
	
	Если МетаданныеОбъекта.ТабличныеЧасти.КонтактнаяИнформация.Реквизиты.Найти("ИдентификаторСтрокиТабличнойЧасти") = Неопределено Тогда
		ДанныеИдентификатораСтрокиТабличнойЧасти = "0";
	Иначе
		ДанныеИдентификатораСтрокиТабличнойЧасти = "ЕСТЬNULL(КонтактнаяИнформация.ИдентификаторСтрокиТабличнойЧасти, 0)";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Запрос.Текст ="
		|ВЫБРАТЬ
		|	ВидыКонтактнойИнформации.Ссылка                       КАК Вид,
		|	ВидыКонтактнойИнформации.ИмяПредопределенныхДанных    КАК ИмяПредопределенныхДанных,
		|	ВидыКонтактнойИнформации.Тип                          КАК Тип,
		|	ВидыКонтактнойИнформации.ОбязательноеЗаполнение       КАК ОбязательноеЗаполнение,
		|	ВидыКонтактнойИнформации.Подсказка                    КАК Подсказка,
		|	ВидыКонтактнойИнформации.Наименование                 КАК Наименование,
		|	ВидыКонтактнойИнформации.РедактированиеТолькоВДиалоге КАК РедактированиеТолькоВДиалоге,
		|	ВидыКонтактнойИнформации.ЭтоГруппа                    КАК ЭтоРеквизитТабличнойЧасти,
		|	ВидыКонтактнойИнформации.РеквизитДопУпорядочивания    КАК РеквизитДопУпорядочивания,
		|	ЕСТЬNULL(КонтактнаяИнформация.Представление, """")    КАК Представление,
		|	ЕСТЬNULL(КонтактнаяИнформация.ЗначенияПолей, """")    КАК ЗначенияПолей,
		|	ЕСТЬNULL(КонтактнаяИнформация.НомерСтроки, 0)         КАК НомерСтроки,
		|	" + ДанныеИдентификатораСтрокиТабличнойЧасти + "      КАК ИдентификаторСтроки,
		|	ВЫРАЗИТЬ("""""""" КАК СТРОКА(200))                    КАК ИмяРеквизита,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА)                             КАК Комментарий
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	" +  ПолноеИмяОбъектаМетаданных + ".КонтактнаяИнформация КАК КонтактнаяИнформация
		|ПО 
		|	КонтактнаяИнформация.Ссылка = &Владелец
		|	И ВидыКонтактнойИнформации.Ссылка = КонтактнаяИнформация.Вид
		|ГДЕ
		|	НЕ ВидыКонтактнойИнформации.ПометкаУдаления
		|	И (
		|		ВидыКонтактнойИнформации.Родитель = &ГруппаВидовКИ 
		|		ИЛИ ВидыКонтактнойИнформации.Родитель.Родитель = &ГруппаВидовКИ)
		|УПОРЯДОЧИТЬ ПО
		|	ВидыКонтактнойИнформации.Ссылка ИЕРАРХИЯ
		|";
	Иначе
		Запрос.Текст ="
		|ВЫБРАТЬ
		|	КонтактнаяИнформация.Представление               КАК Представление,
		|	КонтактнаяИнформация.ЗначенияПолей               КАК ЗначенияПолей,
		|	КонтактнаяИнформация.НомерСтроки                 КАК НомерСтроки,
		|	КонтактнаяИнформация.Вид                         КАК Вид,
		|	" + ДанныеИдентификатораСтрокиТабличнойЧасти + " КАК ИдентификаторСтрокиТабличнойЧасти
		|ПОМЕСТИТЬ 
		|	КонтактнаяИнформация
		|ИЗ
		|	&ТаблицаКонтактнойИнформации КАК КонтактнаяИнформация
		|ИНДЕКСИРОВАТЬ ПО
		|	Вид
		|;////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	ВидыКонтактнойИнформации.Ссылка                       КАК Вид,
		|	ВидыКонтактнойИнформации.ИмяПредопределенныхДанных    КАК ИмяПредопределенныхДанных,
		|	ВидыКонтактнойИнформации.Тип                          КАК Тип,
		|	ВидыКонтактнойИнформации.ОбязательноеЗаполнение       КАК ОбязательноеЗаполнение,
		|	ВидыКонтактнойИнформации.Подсказка                    КАК Подсказка,
		|	ВидыКонтактнойИнформации.Наименование                 КАК Наименование,
		|	ВидыКонтактнойИнформации.РедактированиеТолькоВДиалоге КАК РедактированиеТолькоВДиалоге,
		|	ВидыКонтактнойИнформации.ЭтоГруппа                    КАК ЭтоРеквизитТабличнойЧасти,
		|	ВидыКонтактнойИнформации.РеквизитДопУпорядочивания    КАК РеквизитДопУпорядочивания,
		|	ЕСТЬNULL(КонтактнаяИнформация.Представление, """")    КАК Представление,
		|	ЕСТЬNULL(КонтактнаяИнформация.ЗначенияПолей, """")    КАК ЗначенияПолей,
		|	ЕСТЬNULL(КонтактнаяИнформация.НомерСтроки, 0)         КАК НомерСтроки,
		|	" + ДанныеИдентификатораСтрокиТабличнойЧасти + "      КАК ИдентификаторСтроки,
		|	ВЫРАЗИТЬ("""""""" КАК СТРОКА(200))                    КАК ИмяРеквизита,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА)                             КАК Комментарий
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|ЛЕВОЕ СОЕДИНЕНИЕ 
		|	КонтактнаяИнформация КАК КонтактнаяИнформация
		|ПО 
		|	ВидыКонтактнойИнформации.Ссылка = КонтактнаяИнформация.Вид
		|ГДЕ
		|	НЕ ВидыКонтактнойИнформации.ПометкаУдаления
		|	И (
		|		ВидыКонтактнойИнформации.Родитель = &ГруппаВидовКИ 
		|		ИЛИ ВидыКонтактнойИнформации.Родитель.Родитель = &ГруппаВидовКИ)
		|УПОРЯДОЧИТЬ ПО
		|	ВидыКонтактнойИнформации.Ссылка ИЕРАРХИЯ
		|";
		
		Запрос.УстановитьПараметр("ТаблицаКонтактнойИнформации", Объект.КонтактнаяИнформация.Выгрузить());
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ГруппаВидовКИ", ГруппаВидовКИ);
	Запрос.УстановитьПараметр("Владелец", СсылкаНаОбъект);
	
	УстановитьПривилегированныйРежим(Истина);
	КонтактнаяИнформация = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией).Строки;
	УстановитьПривилегированныйРежим(Ложь);
	
	КонтактнаяИнформация.Сортировать("РеквизитДопУпорядочивания, НомерСтроки");
	Строка500 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(500));
	
	СозданныеРеквизиты = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ИсключаемыеВиды);
	
	Для Каждого ОбъектКонтактнойИнформации Из КонтактнаяИнформация Цикл
		
		Если ОбъектКонтактнойИнформации.ЭтоРеквизитТабличнойЧасти Тогда
			
			ИмяВидаКИ = ОбъектКонтактнойИнформации.ИмяПредопределенныхДанных;
			Поз = Найти(ИмяВидаКИ, ИмяОбъекта);
			
			ИмяТабличнойЧасти = Сред(ИмяВидаКИ, Поз + СтрДлина(ИмяОбъекта));
			
			ПредыдущийВид = Неопределено;
			ИмяРеквизита = "";
			
			ОбъектКонтактнойИнформации.Строки.Сортировать("РеквизитДопУпорядочивания");
			
			Для Каждого СтрокаКИ Из ОбъектКонтактнойИнформации.Строки Цикл
				
				ОбъектКонтактнойИнформации.Строки.Сортировать("РеквизитДопУпорядочивания");
				
				ТекущийВид = СтрокаКИ.Вид;
				
				Если ТекущийВид <> ПредыдущийВид Тогда
					
					ИмяРеквизита = "КонтактнаяИнформацияПоле" + ИмяТабличнойЧасти + ОбъектКонтактнойИнформации.Строки.Индекс(СтрокаКИ);
					
					ПутьРеквизитов = "Объект." + ИмяТабличнойЧасти;
					
					МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизита, Строка500, ПутьРеквизитов, СтрокаКИ.Наименование, Истина));
					МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизита + "ЗначенияПолей", Новый ОписаниеТипов("СписокЗначений, Строка"), ПутьРеквизитов,, Истина));
					ПредыдущийВид = ТекущийВид;
					
				КонецЕсли;
				
				СтрокаКИ.ИмяРеквизита = ИмяРеквизита;
				
			КонецЦикла;
			
		Иначе
			
			Индекс = СозданныеРеквизиты.Найти(ОбъектКонтактнойИнформации.Вид);
			
			Если Индекс = Неопределено Тогда
				ОбъектКонтактнойИнформации.ИмяРеквизита = "КонтактнаяИнформацияПоле" + КонтактнаяИнформация.Индекс(ОбъектКонтактнойИнформации);
				Если Не ОтложеннаяИнициализация Тогда
					МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ОбъектКонтактнойИнформации.ИмяРеквизита, Строка500, , ОбъектКонтактнойИнформации.Наименование, Истина));
				КонецЕсли;
			Иначе
				ОбъектКонтактнойИнформации.ИмяРеквизита = "КонтактнаяИнформацияПоле" + ОбъектКонтактнойИнформации.ИмяПредопределенныхДанных;
				СозданныеРеквизиты.Удалить(Индекс);
			КонецЕсли;
			
			// При обнаружении ошибок распознавания не прерываем генерацию.
			Попытка
				ОбъектКонтактнойИнформации.Комментарий = КомментарийКонтактнойИнформации(ОбъектКонтактнойИнформации.ЗначенияПолей);
			Исключение
				ЗаписьЖурналаРегистрации(УправлениеКонтактнойИнформациейСлужебный.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка, , ОбъектКонтактнойИнформации.ЗначенияПолей, 
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Некорректный формат контактной информации.'"), ,
				ОбъектКонтактнойИнформации.ИмяРеквизита);
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
	// Добавим новые реквизиты
	Если МассивДобавляемыхРеквизитов.Количество() > 0 Тогда
		Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	КонецЕсли;
	
	Форма.ПараметрыКонтактнойИнформации = Новый Структура;
	Форма.ПараметрыКонтактнойИнформации.Вставить("ПоложениеЗаголовка", Строка(ПоложениеЗаголовкаКИ));
	Форма.ПараметрыКонтактнойИнформации.Вставить("ГруппаДляРазмещения", ИмяЭлементаДляРазмещения);
	Форма.ПараметрыКонтактнойИнформации.Вставить("СписокДобавляемыхЭлементов", Новый СписокЗначений);
	Форма.ПараметрыКонтактнойИнформации.Вставить("ДобавленныеЭлементы", Новый СписокЗначений);
	Форма.ПараметрыКонтактнойИнформации.Вставить("ИсключаемыеВиды", ИсключаемыеВиды);
	Форма.ПараметрыКонтактнойИнформации.Вставить("ОтложеннаяИнициализация", ОтложеннаяИнициализация);
	Форма.ПараметрыКонтактнойИнформации.Вставить("ВыполненаОтложеннаяИнициализация", Ложь);
	
	ПредыдущийВид = Неопределено;
	
	Отбор = Новый Структура("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	КоличествоАдресов = КонтактнаяИнформация.НайтиСтроки(Отбор).Количество();
	
	// Создадим элементы на форме и заполним значения реквизитов.
	Родитель = ?(ПустаяСтрока(ИмяЭлементаДляРазмещения), Форма, Форма.Элементы[ИмяЭлементаДляРазмещения]);
	
	// Создаем группы для контактной информации.
	ГруппаКомпоновки = Группа("ГруппаКомпоновкиКонтактнойИнформации",
	Форма, Родитель, ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная, 5);
	ГруппаЗаголовков = Группа("ГруппаЗаголовковКонтактнойИнформации",
	Форма, ГруппаКомпоновки, ГруппировкаПодчиненныхЭлементовФормы.Вертикальная, 4);
	ГруппаПолейВвода = Группа("ГруппаПолейВводаКонтактнойИнформации",
	Форма, ГруппаКомпоновки, ГруппировкаПодчиненныхЭлементовФормы.Вертикальная, 4);
	ГруппаДействий = Группа("ГруппаДействийКонтактнойИнформации",
	Форма, ГруппаКомпоновки, ГруппировкаПодчиненныхЭлементовФормы.Вертикальная, 4);
	
	ЗаголовокСлева = ЗаголовокСлева(Форма, ПоложениеЗаголовкаКИ);
	СозданныеЭлементы = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ИсключаемыеВиды);
	
	Для Каждого СтрокаКИ Из КонтактнаяИнформация Цикл
		
		Если СтрокаКИ.ЭтоРеквизитТабличнойЧасти Тогда
			
			ИмяВидаКИ = ОбщегоНазначения.ИмяПредопределенного(СтрокаКИ.Вид);
			Поз = Найти(ИмяВидаКИ, ИмяОбъекта);
			
			ИмяТабличнойЧасти = Сред(ИмяВидаКИ, Поз + СтрДлина(ИмяОбъекта));
			
			ПредыдущийВидТЧ = Неопределено;
			
			Для Каждого СтрокаТабличнойЧастиКИ Из СтрокаКИ.Строки Цикл
				
				ВидТЧ = СтрокаТабличнойЧастиКИ.Вид;
				
				Если ВидТЧ <> ПредыдущийВидТЧ Тогда
					
					ГруппаТабличнойЧасти = Форма.Элементы[ИмяТабличнойЧасти + "ГруппаКонтактнаяИнформация"];
					
					Элемент = Форма.Элементы.Добавить(СтрокаТабличнойЧастиКИ.ИмяРеквизита, Тип("ПолеФормы"), ГруппаТабличнойЧасти);
					Элемент.Вид = ВидПоляФормы.ПолеВвода;
					Элемент.ПутьКДанным = "Объект." + ИмяТабличнойЧасти + "." + СтрокаТабличнойЧастиКИ.ИмяРеквизита;
					
					Если ДляТипаКонтактнойИнформацииДоступноРедактированиеВДиалоге(СтрокаТабличнойЧастиКИ.Тип) Тогда
						Элемент.КнопкаВыбора = Истина;
						Если ВидТЧ.РедактированиеТолькоВДиалоге Тогда
							Элемент.РедактированиеТекста = Ложь;
						КонецЕсли;
						
						Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_КонтактнаяИнформацияНачалоВыбора");
					КонецЕсли;
					Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_КонтактнаяИнформацияПриИзменении");
					
					Если ВидТЧ.ОбязательноеЗаполнение Тогда
						Элемент.АвтоОтметкаНезаполненного = Истина;
					КонецЕсли;
					
					ДобавитьОписаниеЭлемента(Форма, СтрокаТабличнойЧастиКИ.ИмяРеквизита, 2);
					ДобавитьРеквизитВОписание(Форма, СтрокаТабличнойЧастиКИ, Ложь, Истина);
					ПредыдущийВидТЧ = ВидТЧ;
					
				КонецЕсли;
				
				Отбор = Новый Структура;
				Отбор.Вставить("ИдентификаторСтрокиТабличнойЧасти", СтрокаТабличнойЧастиКИ.ИдентификаторСтроки);
				
				СтрокиТаблицы = Форма.Объект[ИмяТабличнойЧасти].НайтиСтроки(Отбор);
				
				Если СтрокиТаблицы.Количество() = 1 Тогда
					
					СтрокаТаблицы = СтрокиТаблицы[0];
					СтрокаТаблицы[СтрокаТабличнойЧастиКИ.ИмяРеквизита] = СтрокаТабличнойЧастиКИ.Представление;
					СтрокаТаблицы[СтрокаТабличнойЧастиКИ.ИмяРеквизита + "ЗначенияПолей"] = СтрокаТабличнойЧастиКИ.ЗначенияПолей;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Продолжить;
			
		КонецЕсли;
		
		ЕстьКомментарий = ЗначениеЗаполнено(СтрокаКИ.Комментарий);
		ИмяРеквизита = СтрокаКИ.ИмяРеквизита;
		ИндексЭлемента = СозданныеЭлементы.Найти(СтрокаКИ.Вид);
		СтатическийЭлемент = ИндексЭлемента <> Неопределено;
		
		ЭтоНовыйВидКИ = (СтрокаКИ.Вид <> ПредыдущийВид);
		
		Если ОтложеннаяИнициализация Тогда
			
			ДобавитьРеквизитВОписание(Форма, СтрокаКИ, ЭтоНовыйВидКИ,, СтатическийЭлемент);
			Если СтатическийЭлемент Тогда
				СозданныеЭлементы.Удалить(ИндексЭлемента);
			КонецЕсли;
			Продолжить;
			
		КонецЕсли;
		
		Если Не СтатическийЭлемент Тогда
			
			Если ЗаголовокСлева Тогда
				
				Заголовок(Форма, СтрокаКИ.Тип, ИмяРеквизита, ГруппаЗаголовков, СтрокаКИ.Наименование, ЭтоНовыйВидКИ, ЕстьКомментарий);
				
			КонецЕсли;
			
			ПолеВвода(Форма, СтрокаКИ.РедактированиеТолькоВДиалоге, СтрокаКИ.Тип, ИмяРеквизита, СтрокаКИ.Подсказка, ЭтоНовыйВидКИ, СтрокаКИ.ОбязательноеЗаполнение);
			
			// Выводим комментарий
			Если ЕстьКомментарий Тогда
				
				ИмяКомментария = "Комментарий" + ИмяРеквизита;
				Комментарий(Форма, СтрокаКИ.Комментарий, ИмяКомментария, ГруппаПолейВвода);
				
			КонецЕсли;
			
			// Заглушка , если заголовок у поля сверху.
			Если Не ЗаголовокСлева И ЭтоНовыйВидКИ Тогда
				
				ИмяДекорации = "ДекорацияВерх" + ИмяРеквизита;
				Декорация = Форма.Элементы.Добавить(ИмяДекорации, Тип("ДекорацияФормы"), ГруппаДействий);
				ДобавитьОписаниеЭлемента(Форма, ИмяДекорации, 2);
				
			КонецЕсли;
			
			Действие(Форма, СтрокаКИ.Тип, ИмяРеквизита, ГруппаДействий, КоличествоАдресов, ЕстьКомментарий);
			
		Иначе
			
			СозданныеЭлементы.Удалить(ИндексЭлемента);
			
		КонецЕсли;
		
		ДобавитьРеквизитВОписание(Форма, СтрокаКИ, ЭтоНовыйВидКИ);
		
		ПредыдущийВид = СтрокаКИ.Вид;
		
	КонецЦикла;
	
	Если Не ОтложеннаяИнициализация И Форма.ПараметрыКонтактнойИнформации.СписокДобавляемыхЭлементов.Количество() > 0 Тогда
		
		ГруппаКоманды = Группа("ГруппаКонтактнаяИнформацияДобавитьПолеВвода",
		Форма, Родитель, ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная, 5);
		ГруппаКоманды.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
		
		ИмяКоманды = "КонтактнаяИнформацияДобавитьПолеВвода";
		Команда = Форма.Команды.Добавить(ИмяКоманды);
		Команда.Подсказка = НСтр("ru = 'Добавить дополнительное поле контактной информации'");
		Команда.Отображение = ОтображениеКнопки.КартинкаИТекст;
		Команда.Картинка = БиблиотекаКартинок.ДобавитьЭлементСписка;
		Команда.Действие = "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
		
		ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 9, Истина);
		
		Кнопка = Форма.Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"), ГруппаКоманды);
		Кнопка.Заголовок = НСтр("ru = 'Добавить'");
		Кнопка.ИмяКоманды = ИмяКоманды;
		ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 2);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик для события формы ПриЧтенииНаСервере.
// Вызывается из модуля формы объекта-владельца КИ при внедрении подсистемы.
//
// Параметры:
//    Форма  - УправляемаяФорма - Форма объекта-владельца, предназначенная для вывода контактной информации.
//    Объект - Произвольный - Объект-владелец контактной информации.
//
Процедура ПриЧтенииНаСервере(Форма, Объект) Экспорт
	
	СписокРеквизитовФормы = Форма.ПолучитьРеквизиты();
	
	ПервыйЗапуск = Истина;
	Для Каждого Реквизит Из СписокРеквизитовФормы Цикл
		Если Реквизит.Имя = "ПараметрыКонтактнойИнформации" И ТипЗнч(Форма.ПараметрыКонтактнойИнформации) = Тип("Структура") Тогда
			ПервыйЗапуск = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПервыйЗапуск Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = Форма.ПараметрыКонтактнойИнформации;
	
	ПоложениеЗаголовкаКИ = Параметры.ПоложениеЗаголовка;
	ПоложениеЗаголовкаКИ = ?(ЗначениеЗаполнено(ПоложениеЗаголовкаКИ), ПоложениеЗаголовкаЭлементаФормы[ПоложениеЗаголовкаКИ], ПоложениеЗаголовкаЭлементаФормы.Верх);
	
	ИмяЭлементаДляРазмещения = Параметры.ГруппаДляРазмещения;
	
	ВыполненаОтложеннаяИнициализация = Параметры.ВыполненаОтложеннаяИнициализация;
	
	УдалитьКомандыИЭлементыФормы(Форма);
	
	МассивУдаляемыхРеквизитов = Новый Массив;
	
	ИмяОбъекта = Объект.Ссылка.Метаданные().Имя;
	
	СтатическиеРеквизиты = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(Параметры.ИсключаемыеВиды);
	
	ОтложеннаяИнициализация = Параметры.ОтложеннаяИнициализация И Не ВыполненаОтложеннаяИнициализация;
	
	Для Каждого РеквизитФормы Из Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
		
		Если РеквизитФормы.ЭтоРеквизитТабличнойЧасти Тогда
			
			МассивУдаляемыхРеквизитов.Добавить("Объект." + ИмяТабличнойЧастиПоВидуКИ(РеквизитФормы.Вид, ИмяОбъекта) + "." + РеквизитФормы.ИмяРеквизита);
			МассивУдаляемыхРеквизитов.Добавить("Объект." + ИмяТабличнойЧастиПоВидуКИ(РеквизитФормы.Вид, ИмяОбъекта) + "." + РеквизитФормы.ИмяРеквизита + "ЗначенияПолей");
			
		Иначе
			
			Индекс = СтатическиеРеквизиты.Найти(РеквизитФормы.Вид);
			
			Если Индекс = Неопределено Тогда // Реквизит создается динамически
				Если Не ОтложеннаяИнициализация Тогда
					МассивУдаляемыхРеквизитов.Добавить(РеквизитФормы.ИмяРеквизита);
				КонецЕсли;
			Иначе
				СтатическиеРеквизиты.Удалить(Индекс);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Очистить();
	Форма.ИзменитьРеквизиты(, МассивУдаляемыхРеквизитов);
	
	ПриСозданииНаСервере(Форма, Объект, ИмяЭлементаДляРазмещения, ПоложениеЗаголовкаКИ, Параметры.ИсключаемыеВиды, ОтложеннаяИнициализация);
	Параметры.ВыполненаОтложеннаяИнициализация = ВыполненаОтложеннаяИнициализация;
	
КонецПроцедуры

// Обработчик для события формы ПослеЗаписиНаСервере.
// Вызывается из модуля формы объекта-владельца КИ при внедрении подсистемы.
//
// Параметры:
//    Форма  - УправляемаяФорма - Форма объекта-владельца, предназначенная для вывода контактной информации.
//    Объект - Произвольный - Объект-владелец контактной информации.
//
Процедура ПослеЗаписиНаСервере(Форма, Объект) Экспорт
	
	ИмяОбъекта = Объект.Ссылка.Метаданные().Имя;
	
	Для Каждого СтрокаТаблицы Из Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
		
		Если СтрокаТаблицы.ЭтоРеквизитТабличнойЧасти Тогда
			
			ВидИнформации = СтрокаТаблицы.Вид;
			ИмяРеквизита = СтрокаТаблицы.ИмяРеквизита;
			ИмяТабличнойЧасти = ИмяТабличнойЧастиПоВидуКИ(ВидИнформации, ИмяОбъекта);
			ТабличнаяЧастьФормы = Форма.Объект[ИмяТабличнойЧасти];
			
			Для Каждого СтрокаТабличнойЧастиФормы Из ТабличнаяЧастьФормы Цикл
				
				Отбор = Новый Структура;
				Отбор.Вставить("Вид", ВидИнформации);
				Отбор.Вставить("ИдентификаторСтрокиТабличнойЧасти", СтрокаТабличнойЧастиФормы.ИдентификаторСтрокиТабличнойЧасти);
				НайденныеСтроки = Объект.КонтактнаяИнформация.НайтиСтроки(Отбор);
				
				Если НайденныеСтроки.Количество() = 1 Тогда
					
					СтрокаКИ = НайденныеСтроки[0];
					СтрокаТабличнойЧастиФормы[ИмяРеквизита] = СтрокаКИ.Представление;
					СтрокаТабличнойЧастиФормы[ИмяРеквизита + "ЗначенияПолей"] = СтрокаКИ.ЗначенияПолей;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик для события формы ОбработкаПроверкиЗаполненияНаСервере.
// Вызывается из модуля формы объекта-владельца КИ при внедрении подсистемы.
//
// Параметры:
//    Форма  - УправляемаяФорма - Форма объекта-владельца, предназначенная для вывода контактной информации.
//    Объект - Произвольный - Объект-владелец контактной информации.
//
Процедура ОбработкаПроверкиЗаполненияНаСервере(Форма, Объект, Отказ) Экспорт
	
	ИмяОбъекта = Объект.Ссылка.Метаданные().Имя;
	УровеньОшибок = 0;
	ПредыдущийВид = Неопределено;
	
	Для Каждого СтрокаТаблицы Из Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
		
		ВидИнформации = СтрокаТаблицы.Вид;
		ТипИнформации = СтрокаТаблицы.Тип;
		Комментарий   = СтрокаТаблицы.Комментарий;
		ИмяРеквизита  = СтрокаТаблицы.ИмяРеквизита;
		
		ОбязательноеЗаполнение = ВидИнформации.ОбязательноеЗаполнение;
		
		Если СтрокаТаблицы.ЭтоРеквизитТабличнойЧасти Тогда
			
			ИмяТабличнойЧасти = ИмяТабличнойЧастиПоВидуКИ(ВидИнформации, ИмяОбъекта);
			ТабличнаяЧастьФормы = Форма.Объект[ИмяТабличнойЧасти];
			
			Для Каждого СтрокаТабличнойЧастиФормы Из ТабличнаяЧастьФормы Цикл
				
				Представление = СтрокаТабличнойЧастиФормы[ИмяРеквизита];
				Поле = "Объект." + ИмяТабличнойЧасти + "[" + (СтрокаТабличнойЧастиФормы.НомерСтроки - 1) + "]." + ИмяРеквизита;
				
				Если ОбязательноеЗаполнение И ПустаяСтрока(Представление) Тогда
					
					ТекстСообщения = Нстр("ru = 'Поле ""%1"" не заполнено.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВидИнформации.Наименование);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле);
					ТекущийУровеньОшибок = 2;
					
				Иначе
					
					ЗначенияПолей = СтрокаТабличнойЧастиФормы[ИмяРеквизита + "ЗначенияПолей"];
					
					ТекущийУровеньОшибок = ПроверитьКонтактнуюИнформацию(Представление, ЗначенияПолей, ВидИнформации,
					ТипИнформации, ИмяРеквизита, , Поле);
					
					СтрокаТабличнойЧастиФормы[ИмяРеквизита] = Представление;
					СтрокаТабличнойЧастиФормы[ИмяРеквизита + "ЗначенияПолей"] = ЗначенияПолей;
					
				КонецЕсли;
				
				УровеньОшибок = ?(ТекущийУровеньОшибок > УровеньОшибок, ТекущийУровеньОшибок, УровеньОшибок);
				
			КонецЦикла;
			
		Иначе
			
			ЭлементФормы = Форма.Элементы.Найти(ИмяРеквизита);
			Если ЭлементФормы = Неопределено Тогда
				Продолжить; // Элемент не был создан. Не была вызвана отложенная инициализация.
			КонецЕсли;
			
			Представление = Форма[ИмяРеквизита];
			
			Если ВидИнформации <> ПредыдущийВид И ОбязательноеЗаполнение И ПустаяСтрока(Представление) 
				// И нет других строк с данными для видов КИ с множественными значениями.
				И Не ЕстьДругиеЗаполненныеСтрокКИДанногоВида(Форма, СтрокаТаблицы, ВидИнформации)
			Тогда
				
				ТекстСообщения = Нстр("ru = 'Поле ""%1"" не заполнено.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВидИнформации.Наименование);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,ИмяРеквизита);
				ТекущийУровеньОшибок = 2;
				
			Иначе
				
				ТекущийУровеньОшибок = ПроверитьКонтактнуюИнформацию(Представление, СтрокаТаблицы.ЗначенияПолей,
				ВидИнформации, ТипИнформации, ИмяРеквизита, Комментарий);
				
			КонецЕсли;
			
			УровеньОшибок = ?(ТекущийУровеньОшибок > УровеньОшибок, ТекущийУровеньОшибок, УровеньОшибок);
			
		КонецЕсли;
		
		ПредыдущийВид = ВидИнформации;
		
	КонецЦикла;
	
	Если УровеньОшибок <> 0 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик для события формы ПередЗаписьюНаСервере.
// Вызывается из модуля формы объекта-владельца КИ при внедрении подсистемы.
//
// Параметры:
//    Форма  - УправляемаяФорма - Форма объекта-владельца, предназначенная для вывода контактной информации.
//    Объект - Произвольный - Объект-владелец контактной информации.
//
Процедура ПередЗаписьюНаСервере(Форма, Объект, Отказ = Ложь) Экспорт
	
	Объект.КонтактнаяИнформация.Очистить();
	ИмяОбъекта = Объект.Ссылка.Метаданные().Имя;
	ПредыдущийВид = Неопределено;
	
	Для Каждого СтрокаТаблицы Из Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
		
		ВидИнформации = СтрокаТаблицы.Вид;
		ТипИнформации = СтрокаТаблицы.Тип;
		ИмяРеквизита  = СтрокаТаблицы.ИмяРеквизита;
		ОбязательноеЗаполнение = ВидИнформации.ОбязательноеЗаполнение;
		
		Если СтрокаТаблицы.ЭтоРеквизитТабличнойЧасти Тогда
			
			ИмяТабличнойЧасти = ИмяТабличнойЧастиПоВидуКИ(ВидИнформации, ИмяОбъекта);
			ТабличнаяЧастьФормы = Форма.Объект[ИмяТабличнойЧасти];
			Для Каждого СтрокаТабличнойЧастиФормы Из ТабличнаяЧастьФормы Цикл
				
				ИдентификаторСтроки = СтрокаТабличнойЧастиФормы.ПолучитьИдентификатор();
				СтрокаТабличнойЧастиФормы.ИдентификаторСтрокиТабличнойЧасти = ИдентификаторСтроки;
				
				СтрокаТабличнойЧасти = Объект[ИмяТабличнойЧасти][СтрокаТабличнойЧастиФормы.НомерСтроки - 1];
				СтрокаТабличнойЧасти.ИдентификаторСтрокиТабличнойЧасти = ИдентификаторСтроки;
				
				ЗначенияПолей = СтрокаТабличнойЧастиФормы[ИмяРеквизита + "ЗначенияПолей"];
				
				ЗаписатьКонтактнуюИнформацию(Объект, ЗначенияПолей, ВидИнформации, ТипИнформации, ИдентификаторСтроки);
				
			КонецЦикла;
			
		Иначе
			
			ЗаписатьКонтактнуюИнформацию(Объект, СтрокаТаблицы.ЗначенияПолей, ВидИнформации, ТипИнформации);
			
		КонецЕсли;
		
		ПредыдущийВид = ВидИнформации;
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет (удаляет) поле ввода или комментарий на форму, обновляя данные.
// Вызывается из модуля формы объекта-владельца КИ при внедрении подсистемы.
//
// Параметры:
//    Форма     - УправляемаяФорма - Форма объекта-владельца, предназначенная для вывода контактной информации.
//    Объект    - Произвольный - Объект-владелец контактной информации.
//    Результат - Произвольный - Необязательный служебный реквизит, полученный из предыдущего обработчика события.
//
// Возвращаемое значение:
//    Неопределено
//
Функция ОбновитьКонтактнуюИнформацию(Форма, Объект, Результат = Неопределено) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат Неопределено;
		
	ИначеЕсли Результат.Свойство("ЭтоДобавлениеКомментария") Тогда
		ИзменитьКомментарий(Форма, Результат.ИмяРеквизита, Результат.ЭтоДобавлениеКомментария);
		
	ИначеЕсли Результат.Свойство("ДобавляемыйВид") Тогда
		ДобавитьСтрокуКонтактнойИнформации(Форма, Результат);
		
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Обработчик подписки события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполненияКонтактнойИнформации(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	ОбработкаЗаполненияКонтактнойИнформацииОбъекта(Источник, ДанныеЗаполнения);
	
КонецПроцедуры

// Обработчик подписки события "ОбработкаЗаполнения" для документов.
//
Процедура ОбработкаЗаполненияКонтактнойИнформацииДокумента(Источник, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	ОбработкаЗаполненияКонтактнойИнформацииОбъекта(Источник, ДанныеЗаполнения);
	
КонецПроцедуры

// Выполняет отложенную инициализацию реквизитов и элементов контактной информации
//
// Параметры:
//    Форма                - УправляемаяФорма - Форма объекта-владельца, предназначенная для вывода контактной.
//                           Информации.
//    Объект               - Произвольный - Объект-владелец контактной информации.
//
Процедура ВыполнитьОтложеннуюИнициализацию(Форма, Объект) Экспорт
	
	КонтактнаяИнформацияОписаниеДополнительныхРеквизитов = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Выгрузить(, "Вид, Представление, ЗначенияПолей, Комментарий");
	Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Очистить();
	ИмяЭлементаДляРазмещения = Форма.ПараметрыКонтактнойИнформации.ГруппаДляРазмещения;
	ПоложениеЗаголовкаКИ = Форма.ПараметрыКонтактнойИнформации.ПоложениеЗаголовка;
	ПоложениеЗаголовкаКИ = ?(ЗначениеЗаполнено(ПоложениеЗаголовкаКИ), ПоложениеЗаголовкаЭлементаФормы[ПоложениеЗаголовкаКИ], ПоложениеЗаголовкаЭлементаФормы.Верх);
	ПриСозданииНаСервере(Форма, Объект, ИмяЭлементаДляРазмещения, ПоложениеЗаголовкаКИ, Форма.ПараметрыКонтактнойИнформации.ИсключаемыеВиды);
	
	Для Каждого ВидКонтактнойИнформации Из Форма.ПараметрыКонтактнойИнформации.ИсключаемыеВиды Цикл
		
		Отбор = Новый Структура("Вид", ВидКонтактнойИнформации);
		МассивСтрок = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
		
		Если МассивСтрок.Количество() > 0 Тогда
			СохраненноеЗначение = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор)[0];
			ТекущееЗначение = МассивСтрок[0];
			ЗаполнитьЗначенияСвойств(ТекущееЗначение, СохраненноеЗначение);
			Форма[ТекущееЗначение.ИмяРеквизита] = СохраненноеЗначение.Представление;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Форма.Элементы.Найти("ПустаяДекорацияКонтактнаяИнформация") <> Неопределено
		И Форма.Элементы.ГруппаПолейВводаКонтактнойИнформации.ПодчиненныеЭлементы.Количество() > 0 Тогда
		Форма.Элементы.ПустаяДекорацияКонтактнаяИнформация.Видимость = Ложь;
	КонецЕсли;
	
	Форма.ПараметрыКонтактнойИнформации.ВыполненаОтложеннаяИнициализация = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Чтение контактной информации другими подсистемами.

// Проверяет адрес на соответствие требованиям к адресной информации.
//
// Параметры:
//   АдресВXML					 - Строка -  строка XML контактной информации.
//   ПараметрыПроверки	 - Структура, СправочникСсылка.ВидыКонтактнойИнформации - флаги проверки адреса.
//          АдресТолькоРоссийский - Булево - Адрес должен быть только Российским. По умолчанию ИСТИНА.
//          ФорматАдреса - Строка - По какому классифткатору проверять "КЛАДР" или "ФИАС". По умолчанию "КЛАДР".
// Возвращаемое значение:
//   Структура - содержит структуру с полями:
//        * Результат - Строка - результат проверки: "Корректный", "НеПроверен", "СодержитОшибки".
//        * СписокОшибок - СписокЗначений - Информация о ошибках.
Функция ПроверитьАдрес(Знач АдресВXML, ПараметрыПроверки = Неопределено) Экспорт
	
	Возврат УправлениеКонтактнойИнформациейСлужебный.ПроверитьАдресВXML(АдресВXML, ПараметрыПроверки);
КонецФункции

// Преобразует все входящие форматы контактной информации в XML.
//
// Параметры:
//    ЗначенияПолей - Строка, Структура, Соответствие, СписокЗначений - описание полей контактной информации.
//    Представление - Строка  - представления. Используется, если невозможно определить представление из параметра.
//                    ЗначенияПолей (отсутствие поля "Представление").
//    ОжидаемыйВид  - СправочникСсылка.ВидыКонтактнойИнформации, ПеречислениеСсылка.ТипыКонтактнойИнформации - 
//                    Используется для определения типа, если его невозможно вычислить по полю ЗначенияПолей.
//
// Возвращаемое значение:
//     Строка  - XML данные контактной информации.
//
Функция КонтактнаяИнформацияВXML(Знач ЗначенияПолей, Знач Представление = "", Знач ОжидаемыйВид = Неопределено) Экспорт
	
	Результат = УправлениеКонтактнойИнформациейСлужебный.ПривестиКонтактнуюИнформациюXML(Новый Структура(
		"ЗначенияПолей, Представление, ВидКонтактнойИнформации",
		ЗначенияПолей, Представление, ОжидаемыйВид));
	Возврат Результат.ДанныеXML;
	
КонецФункции

// Возвращает соответствующее значение перечисления "ТипыКонтактнойИнформации" по строке XML.
//
// Параметры:
//    XMLСтрока - Строка - контактная информацию.
//
// Возвращаемое значение:
//    ПеречислениеСсылка.ТипыКонтактнойИнформации - соответствующий тип.
//
Функция ТипКонтактнойИнформации(Знач XMLСтрока) Экспорт
	Возврат УправлениеКонтактнойИнформациейСлужебный.ТипКонтактнойИнформации(XMLСтрока);
КонецФункции

// Разбирает представление контактной информации и возвращает строку XML.
// Для почтовых адресов корректный разбор не гарантируется.
//
//  Параметры:
//      Представление - Строка  - строковое представление контактной информации, выводимое пользователю.
//      ОжидаемыйВид  - СправочникСсылка.ВидыКонтактнойИнформации, ПеречислениеСсылка.ТипыКонтактнойИнформации, Структура
//
// Возвращаемое значение:
//      Строка - контактная информация в XML.
//
Функция КонтактнаяИнформацияXMLПоПредставлению(Представление, ОжидаемыйВид) Экспорт
	
	Возврат УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(
		УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOПоПредставлению(Представление, ОжидаемыйВид));
		
КонецФункции

// Получает представление контактной информации (адреса, телефона, электронной почты и т.п.).
//
// Параметры:
//    XMLСтрока               - ОбъектXDTO, Строка - объект или XML контактной информации.
//    ВидКонтактнойИнформации - Структура - дополнительные параметры формирования представления для адресов:
//      * ВключатьСтрануВПредставление - Булево - в представление будет включена страна адреса;
//      * ФорматАдреса                 - Строка - если указано "КЛАДР", то в представление адреса 
//                                                не включаются округ и внутригородской район.
//
// Возвращаемое значение:
//    Строка - представление контактной информации.
//
Функция ПредставлениеКонтактнойИнформации(Знач XMLСтрока, Знач ВидКонтактнойИнформации = Неопределено) Экспорт
	
	Возврат УправлениеКонтактнойИнформациейСлужебный.ПредставлениеКонтактнойИнформации(XMLСтрока, ВидКонтактнойИнформации);
	
КонецФункции

// Получает комментарий для контактной информации.
//
// Параметры:
//   XMLСтрока - ОбъектXDTO, Строка - объект или XML контактной информации.
//
// Возвращаемое значение:
//   Строка
//
Функция КомментарийКонтактнойИнформации(XMLСтрока) Экспорт
	
	ЭтоСтрока = ТипЗнч(XMLСтрока) = Тип("Строка");
	Если ЭтоСтрока И Не УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(XMLСтрока) Тогда
		// Предыдущий формат значений полей, комментарий отсутствует.
		Возврат "";
	КонецЕсли;
	
	ОбъектXDTO = ?(ЭтоСтрока, УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(XMLСтрока), XMLСтрока);
	Возврат ОбъектXDTO.Комментарий;
	
КонецФункции

// Получает комментарий для контактной информации.
//
// Параметры:
//   XMLСтрока   - ОбъектXDTO, Строка - объект или XML контактной информации. 
//   Комментарий - Строка - новое значение комментария.
//
//
Процедура УстановитьКомментарийКонтактнойИнформации(XMLСтрока, Знач Комментарий) Экспорт
	
	ЭтоСтрока = ТипЗнч(XMLСтрока) = Тип("Строка");
	Если ЭтоСтрока И Не УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(XMLСтрока) Тогда
		// Предыдущий формат значений полей, комментарий отсутствует.
		Возврат;
	КонецЕсли;
	
	ОбъектXDTO = ?(ЭтоСтрока, УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(XMLСтрока), XMLСтрока);
	ОбъектXDTO.Комментарий = Комментарий;
	Если ЭтоСтрока Тогда
		XMLСтрока = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(ОбъектXDTO);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает информацию о стране адреса.
// Если переданная строка не содержит информации об адресе, то будет вызвано исключение.
//
// Параметры:
//    XMLСтрока - Строка - XML контактной информации.
//
// Возвращаемое значение:
//    Структура - описание страны адреса. Содержит поля:
//        * Ссылка             - СправочникСсылка.СтраныМира, Неопределено - соответствующий элемент страны мира.
//        * Наименование       - Строка - часть описания страны.
//        * Код                - Строка - часть описания страны.
//        * НаименованиеПолное - Строка - часть описания страны.
//        * КодАльфа2          - Строка - часть описания страны.
//        * КодАльфа3          - Строка - часть описания страны.
//
// Если передана пустая строка, то возвращается пустая структура.
// Если страна не найдена в справочнике, то но найдена в классфикаторе, то поле "Ссылка" результата не заполнено.
// Если страна не найдена ни в адресе, ни в классификаторе, то будет заполнено только поле "Наименование".
//
Функция СтранаАдресаКонтактнойИнформации(Знач XMLСтрока) Экспорт
	
	Результат = Новый Структура("Ссылка, Код, Наименование, НаименованиеПолное, КодАльфа2, КодАльфа3");
	Если ПустаяСтрока(XMLСтрока) Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Читаем наименование страны
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСерверПовтИсп.ПространствоИмен();
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(XMLСтрока);
	XDTOАдрес = ФабрикаXDTO.ПрочитатьXML(Чтение, ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	Адрес = XDTOАдрес.Состав;
	Если Адрес = Неопределено Или Адрес.Тип() <> ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
		ВызватьИсключение НСтр("ru = 'Невозможно определить страну, ожидается адрес.'");
	КонецЕсли;
	
	Результат.Наименование = СокрЛП(Адрес.Страна);
	ДанныеСтраны = Справочники.СтраныМира.ДанныеСтраныМира(, Результат.Наименование);
	Возврат ?(ДанныеСтраны = Неопределено, Результат, ДанныеСтраны);
КонецФункции

// Возвращает наименование субъекта РФ для адреса или пустую строку, если субъект не определен.
// Если переданная строка не содержит информации об адресе, то будет вызвано исключение.
//
// Параметры:
//    XMLСтрока - Строка - XML контактной информации.
//
// Возвращаемое значение:
//    Строка - наименование
//
Функция РегионАдресаКонтактнойИнформации(Знач XMLСтрока) Экспорт
	
	Если ПустаяСтрока(XMLСтрока) Тогда
		Возврат "";
	КонецЕсли;
	
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСерверПовтИсп.ПространствоИмен();
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(XMLСтрока);
	XDTOАдрес = ФабрикаXDTO.ПрочитатьXML(Чтение, ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	Адрес = XDTOАдрес.Состав;
	Если Адрес = Неопределено Или Адрес.Тип() <> ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
		ВызватьИсключение НСтр("ru = 'Невозможно определить субъекта РФ, ожидается адрес.'");
	КонецЕсли;
	
	АдресРФ = УправлениеКонтактнойИнформациейСлужебный.РоссийскийАдрес(Адрес);
	Возврат ?(АдресРФ = Неопределено, "", СокрЛП(АдресРФ.СубъектРФ));
	
КонецФункции

// Возвращает наименование города для адреса РФ или пустую строку для иностранного адреса.
// Если переданная строка не содержит информации об адресе, то будет вызвано исключение.
//
// Параметры:
//    XMLСтрока - Строка - XML контактной информации.
//
// Возвращаемое значение:
//    Строка - наименование
//
Функция ГородАдресаКонтактнойИнформации(Знач XMLСтрока) Экспорт
	
	Если ПустаяСтрока(XMLСтрока) Тогда
		Возврат "";
	КонецЕсли;
	
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСерверПовтИсп.ПространствоИмен();
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(XMLСтрока);
	XDTOАдрес = ФабрикаXDTO.ПрочитатьXML(Чтение, ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	Адрес = XDTOАдрес.Состав;
	Если Адрес = Неопределено Или Адрес.Тип() <> ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
		ВызватьИсключение НСтр("ru = 'Невозможно определить город, ожидается адрес.'");
	КонецЕсли;
	
	АдресРФ = УправлениеКонтактнойИнформациейСлужебный.РоссийскийАдрес(Адрес);
	Возврат ?(АдресРФ = Неопределено, "", СокрЛП(АдресРФ.Город));
	
КонецФункции

// Возвращает домен сетевого адреса для веб-ссылки или адреса электронной почты.
//
// Параметры:
//    XMLСтрока - Строка - XML контактной информации.
//
// Возвращаемое значение:
//    Строка - требуемое значение.
//
Функция ДоменАдресаКонтактнойИнформации(Знач XMLСтрока) Экспорт
	Если ПустаяСтрока(XMLСтрока) Тогда
		Возврат "";
	КонецЕсли;
	
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСерверПовтИсп.ПространствоИмен();
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(XMLСтрока);
	XDTOАдрес = ФабрикаXDTO.ПрочитатьXML(Чтение, ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	Состав = XDTOАдрес.Состав;
	Если Состав <> Неопределено Тогда
		Тип = Состав.Тип();
		Если Тип = ФабрикаXDTO.Тип(ПространствоИмен, "ВебСайт") Тогда
			ДоменАдреса = СокрЛП(Состав.Значение);
			Позиция = Найти(ДоменАдреса, "://");
			Если Позиция > 0 Тогда
				ДоменАдреса = Сред(ДоменАдреса, Позиция + 3);
			КонецЕсли;
			Позиция = Найти(ДоменАдреса, "/");
			Возврат ?(Позиция = 0, ДоменАдреса, Лев(ДоменАдреса, Позиция - 1));
			
		ИначеЕсли Тип = ФабрикаXDTO.Тип(ПространствоИмен, "ЭлектроннаяПочта") Тогда
			ДоменАдреса = СокрЛП(Состав.Значение);
			Позиция = Найти(ДоменАдреса, "@");
			Возврат ?(Позиция = 0, ДоменАдреса, Сред(ДоменАдреса, Позиция + 1));
			
		КонецЕсли;
	КонецЕсли;
	
	ВызватьИсключение НСтр("ru = 'Невозможно определить домен, ожидается электронная почта или веб-ссылка.'");	
КонецФункции

// Возвращает строку с номером телефона без кода и дополнительного номера.
//
// Параметры:
//    XMLСтрока - Строка - XML контактной информации.
//
// Возвращаемое значение:
//    Строка - требуемое значение.
//
Функция НомерТелефонаКонтактнойИнформации(Знач XMLСтрока) Экспорт
	Если ПустаяСтрока(XMLСтрока) Тогда
		Возврат "";
	КонецЕсли;
	
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСерверПовтИсп.ПространствоИмен();
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(XMLСтрока);
	XDTOАдрес = ФабрикаXDTO.ПрочитатьXML(Чтение, ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	Состав = XDTOАдрес.Состав;
	Если Состав <> Неопределено Тогда
		Тип = Состав.Тип();
		Если Тип = ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона") Тогда
			Возврат СокрЛП(Состав.Номер);
			
		ИначеЕсли Тип = ФабрикаXDTO.Тип(ПространствоИмен, "НомерФакса") Тогда
			Возврат СокрЛП(Состав.Номер);
			
		КонецЕсли;
	КонецЕсли;
	
	ВызватьИсключение НСтр("ru = 'Невозможно определить номер, ожидается телефона или факс.'");
КонецФункции

// Сравнивает два экземпляра контактной информации.
//
// Параметры:
//    Данные1 - ОбъектXTDO - объект с контактной информацией.
//            - Строка     - контактная информация в формате XML.
//            - Структура  - описание контактной информацию. Ожидаются поля:
//                 * ЗначенияПолей - Строка, Структура, СписокЗначений, Соответствие - поля контактной информации.
//                 * Представление - Строка - Представление. Используется в случае, если не удалось вычислить 
//                                            представление из ЗначенияПолей (отсутствие в них поля Представление).
//                 * Комментарий - Строка - комментарий. Используется в случае, если не удалось вычислить  комментарий
//                                          из ЗначенияПолей.
//                 * ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации, ПеречислениеСсылка.ТипыКонтактнойИнформации, Структура
//                                             Используется в случае, если не удалось вычислить  тип из ЗначенияПолей.
//    Данные2 - ОбъектXTDO, Строка, Структура - аналогично Данные1.
//
// Возвращаемое значение:
//     ТаблицаЗначений: - таблица отличающихся полей со следующими колонками:
//        * Путь      - Строка - XPath, идентифицирующий различающееся значение. Значение "ТипКонтактнойИнформации"
//                               означает, что переданные экземпляры контактной информации различаются типом.
//        * Описание  - Строка - описание отличающегося реквизита в терминах предметной области.
//        * Значение1 - Строка - значение, соответствующая объекту, переданному в параметре Данные1.
//        * Значение2 - Строка - значение, соответствующая объекту, переданному в параметре Данные2.
//
Функция РазличияКонтактнойИнформации(Знач Данные1, Знач Данные2) Экспорт
	Возврат УправлениеКонтактнойИнформациейСлужебный.РазличияКонтактнойИнформации(Данные1, Данные2);
КонецФункции

// Получить значение определенного вида контактной информации у объекта.
//
// Параметры:
//     Ссылка                  - ЛюбаяСсылка - ссылка на объект-владелец контактной информации (организация,
//                                             контрагент, партнер и т.д.).
//     ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации - параметры обработки.
//
// Возвращаемое значение:
//     Строка - строковое представление значения.
//
Функция КонтактнаяИнформацияОбъекта(Ссылка, ВидКонтактнойИнформации) Экспорт
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Ссылка);
	
	КонтактнаяИнформацияОбъекта = КонтактнаяИнформацияОбъектов(МассивОбъектов,, ВидКонтактнойИнформации);
	
	Если КонтактнаяИнформацияОбъекта.Количество() > 0 Тогда
		Возврат КонтактнаяИнформацияОбъекта[0].Представление;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Предназначена для создания временной таблицы с контактной информацией нескольких объектов.
//
// Параметры:
//    МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - для формирования.
//    МассивОбъектов - Массив - владельцы контактной информации, все элементы должны быть одного типа.
//    ТипыКИ         - Массив - необязательный, используется если не задан все типы.
//    ВидыКИ         - Массив -  необязательный, используется если не задан все виды.
//
// В менеджере создается временная таблица ВТКонтактнаяИнформация с полями:
//    * Объект        - Ссылка - владелец КИ.
//    * Вид           - СправочникСсылка.ВидыКонтактнойИнформации
//    * Тип           - ПеречислениеСсылка.ТипыКонтактнойИнформации
//    * ЗначенияПолей - Строка - данные значений полей.
//    * Представление - Строка - представление КИ.
//
Процедура СоздатьВТКонтактнаяИнформация(МенеджерВременныхТаблиц, МассивОбъектов, ТипыКИ = Неопределено, ВидыКИ = Неопределено) Экспорт
	
	Если ТипЗнч(МассивОбъектов) = Тип("Массив") И МассивОбъектов.Количество() > 0 Тогда
		Ссылка = МассивОбъектов.Получить(0);
	Иначе
		ВызватьИсключение НСтр("ru = 'Неверное значение для массива владельцев контактной информации.'");
	КонецЕсли;
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактнаяИнформация.Ссылка КАК Объект,
		|	КонтактнаяИнформация.Вид КАК Вид,
		|	КонтактнаяИнформация.Тип КАК Тип,
		|	КонтактнаяИнформация.ЗначенияПолей КАК ЗначенияПолей,
		|	КонтактнаяИнформация.Представление КАК Представление
		|ПОМЕСТИТЬ ВТКонтактнаяИнформация
		|ИЗ
		|	" + Ссылка.Метаданные().ПолноеИмя() + ".КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Ссылка В (&МассивОбъектов)
		|	" + ?(ТипыКИ = Неопределено, "", "И КонтактнаяИнформация.Тип В (&ТипыКИ)") + "
		|	" + ?(ВидыКИ = Неопределено, "", "И КонтактнаяИнформация.Вид В (&ВидыКИ)") + "
		|");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ТипыКИ", ТипыКИ);
	Запрос.УстановитьПараметр("ВидыКИ", ВидыКИ);
	
	Запрос.Выполнить();
КонецПроцедуры

// Предназначена для получения контактной информации для нескольких объектов.
//
// Параметры:
//    МассивОбъектов - Массив - владельцы контактной информации, все элементы должны быть одного типа.
//    ТипыКИ         - Массив - необязательный, используется если не задан все типы.
//    ВидыКИ         - Массив -  необязательный, используется если не задан все виды.
//
// Возвращаемое значение
//    Таблица значений - результат. Колонки:
//        * Объект        - Ссылка - владелец КИ.
//        * Вид           - СправочникСсылка.ВидыКонтактнойИнформации
//        * Тип           - ПеречислениеСсылка.ТипыКонтактнойИнформации
//        * ЗначенияПолей - Строка - данные значений полей.
//        * Представление - Строка - представление КИ.
//
Функция КонтактнаяИнформацияОбъектов(МассивОбъектов, ТипыКИ = Неопределено, ВидыКИ = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТКонтактнаяИнформация(Запрос.МенеджерВременныхТаблиц, МассивОбъектов, ТипыКИ, ВидыКИ);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Объект КАК Объект,
	|	КонтактнаяИнформация.Вид КАК Вид,
	|	КонтактнаяИнформация.Тип КАК Тип,
	|	КонтактнаяИнформация.ЗначенияПолей КАК ЗначенияПолей,
	|	КонтактнаяИнформация.Представление КАК Представление
	|ИЗ
	|	ВТКонтактнаяИнформация КАК КонтактнаяИнформация";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Заполняет контактную информацию в объектах.
//
// Параметры:
//    ДанныеЗаполнения - ТаблицаЗначений - описывает объекты для для заполнения. Содержит колонки:
//        * Приемник    - Произвольный - ссылка или объект, в котором нужно заполнить КИ.
//        * ВидКИ       - СправочникСсылка.ВидыКонтактнойИнформации  - вид контактной информации, заполняемый в
//                                                                     приемнике.
//        * СтруктураКИ - СписокЗначений, Строка, Структура - данные значений полей контактной информации.
//        * КлючСтроки  - Структура - фильтр для поиска строки в табличной части, где Ключ - имя колонки в табличной
//                                    части, Значение - значение отбора.
//
Процедура ЗаполнитьКонтактнуюИнформациюОбъектов(ДанныеЗаполнения) Экспорт
	
	ПредыдущийПриемник = Неопределено;
	ДанныеЗаполнения.Сортировать("Приемник, ВидКИ");
	
	Для Каждого СтрокаЗаполнения Из ДанныеЗаполнения Цикл
		
		Приемник = СтрокаЗаполнения.Приемник;
		Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Приемник)) Тогда
			Приемник = Приемник.ПолучитьОбъект();
		КонецЕсли;
		
		Если ПредыдущийПриемник <> Неопределено И ПредыдущийПриемник <> Приемник Тогда
			Если ПредыдущийПриемник.Ссылка = Приемник.Ссылка Тогда
				Приемник = ПредыдущийПриемник;
			Иначе
				ПредыдущийПриемник.Записать();
			КонецЕсли;
		КонецЕсли;
		
		ВидКИ = СтрокаЗаполнения.ВидКИ;
		ИмяОбъектаПриемника = Приемник.Метаданные().Имя;
		ИмяТабличнойЧасти = ИмяТабличнойЧастиПоВидуКИ(ВидКИ, ИмяОбъектаПриемника);
		
		Если ПустаяСтрока(ИмяТабличнойЧасти) Тогда
			ЗаполнитьКонтактнуюИнформациюТабличнойЧасти(Приемник, ВидКИ, СтрокаЗаполнения.СтруктураКИ);
		Иначе
			Если ТипЗнч(СтрокаЗаполнения.КлючСтроки) <> Тип("Структура") Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаЗаполнения.КлючСтроки.Свойство("НомерСтроки") Тогда
				КоличествоСтрокТабличнойЧасти = Приемник[ИмяТабличнойЧасти].Количество();
				НомерСтроки = СтрокаЗаполнения.КлючСтроки.НомерСтроки;
				Если НомерСтроки > 0 И НомерСтроки <= КоличествоСтрокТабличнойЧасти Тогда
					СтрокаТабличнойЧасти = Приемник[ИмяТабличнойЧасти][НомерСтроки - 1];
					ЗаполнитьКонтактнуюИнформациюТабличнойЧасти(Приемник, ВидКИ, СтрокаЗаполнения.СтруктураКИ, СтрокаТабличнойЧасти);
				КонецЕсли;
			Иначе
				СтрокиТабличнойЧасти = Приемник[ИмяТабличнойЧасти].НайтиСтроки(СтрокаЗаполнения.КлючСтроки);
				Для каждого СтрокаТабличнойЧасти Из СтрокиТабличнойЧасти Цикл
					ЗаполнитьКонтактнуюИнформациюТабличнойЧасти(Приемник, ВидКИ, СтрокаЗаполнения.СтруктураКИ, СтрокаТабличнойЧасти);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		ПредыдущийПриемник = Приемник;
		
	КонецЦикла;
	
	Если ПредыдущийПриемник <> Неопределено Тогда
		ПредыдущийПриемник.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Заполняет контактную информацию объекта.
//
// Параметры:
//    Приемник    - Произвольный - ссылка или объект, в котором нужно заполнить КИ.
//    ВидКИ       - СправочникСсылка.ВидыКонтактнойИнформации - вид контактной информации, заполняемый в приемнике.
//    СтруктураКИ - Структура - заполненная структура контактной информации.
//    КлючСтроки  - Структура  - отбор для поиска строки в табличной части, Ключ - Имя колонки в табличной части,
//                               значение - значение отбора.
//
Процедура ЗаполнитьКонтактнуюИнформациюОбъекта(Приемник, ВидКИ, СтруктураКИ, КлючСтроки = Неопределено) Экспорт
	
	ДанныеЗаполнения = Новый ТаблицаЗначений;
	ДанныеЗаполнения.Колонки.Добавить("Приемник");
	ДанныеЗаполнения.Колонки.Добавить("ВидКИ");
	ДанныеЗаполнения.Колонки.Добавить("СтруктураКИ");
	ДанныеЗаполнения.Колонки.Добавить("КлючСтроки");
	
	СтрокаЗаполнения = ДанныеЗаполнения.Добавить();
	СтрокаЗаполнения.Приемник = Приемник;
	СтрокаЗаполнения.ВидКИ = ВидКИ;
	СтрокаЗаполнения.СтруктураКИ = СтруктураКИ;
	СтрокаЗаполнения.КлючСтроки = КлючСтроки;
	
	ЗаполнитьКонтактнуюИнформациюОбъектов(ДанныеЗаполнения);
	
КонецПроцедуры

// Устарела. Следует использовать КонтактнаяИнформацияОбъекта.
//
Функция ПолучитьКонтактнуюИнформацияОбъекта(Ссылка, ВидКонтактнойИнформации) Экспорт
	Возврат КонтактнаяИнформацияОбъекта(Ссылка, ВидКонтактнойИнформации);
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обратная совместимость.

//  Возвращает значения всей контактной информации определенного вида для объекта-владельца.
//
//  Параметры:
//      Ссылка                  - ЛюбаяСсылка - ссылка на объект-владелец контактной информации (организация,
//                                              контрагент, партнер и т.д.).
//      ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации - параметры обработки.
//
//  Возвращаемое значение:
//      Таблица значений -информация. Колонками: 
//          * НомерСтроки     - Число     - номер строки дополнительной табличной части объекта-владельца.
//          * Представление   - Строка    - представление КИ, введенное пользователем.
//          * СтруктураПолей  - Структура - пары ключ-значение данных информации.
//
Функция ТаблицаКонтактнойИнформацииОбъекта(Ссылка, ВидКонтактнойИнформации) Экспорт
	
	Запрос = Новый Запрос(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("
		|ВЫБРАТЬ 
		|	Данные.ИдентификаторСтрокиТабличнойЧасти КАК НомерСтроки,
		|	Данные.Представление                     КАК Представление,
		|	Данные.ЗначенияПолей                     КАК ЗначенияПолей
		|ИЗ
		|	%1.КонтактнаяИнформация КАК Данные
		|ГДЕ
		|	Данные.Ссылка = &Ссылка
		|	И Данные.Вид = &Вид
		|УПОРЯДОЧИТЬ ПО
		|	Данные.ИдентификаторСтрокиТабличнойЧасти
		|", Ссылка.Метаданные().ПолноеИмя()));
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Вид", ВидКонтактнойИнформации);
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("НомерСтроки");
	Результат.Колонки.Добавить("Представление");
	Результат.Колонки.Добавить("СтруктураПолей");
	Результат.Индексы.Добавить("НомерСтроки");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаДанных = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДанных, Выборка, "НомерСтроки, Представление");
		СтрокаДанных.СтруктураПолей = ПредыдущаяСтруктураКонтактнойИнформацииXML(
			Выборка.ЗначенияПолей, ВидКонтактнойИнформации);
	КонецЦикла;
	
	Возврат  Результат;
КонецФункции


// Преобразует данные формата XML в предыдущий формат контактной информации.
//
// Параметры:
//    Данные                 - Строка - XML контактной информации.
//    СокращенныйСоставПолей - Булево - если Ложь, то из состава полей будут исключены
//                                      поля, отсутствующие в версиях БСП младше 2.1.3.
//
// Возвращаемое значение:
//    Строка  - набор пар ключ-значение, разделенных переносом строки.
//
Функция ПредыдущийФорматКонтактнойИнформацииXML(Знач Данные, Знач СокращенныйСоставПолей = Ложь) Экспорт
	
	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(Данные) Тогда
		СтарыйФормат = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияВСтаруюСтруктуру(Данные, СокращенныйСоставПолей);
		Возврат УправлениеКонтактнойИнформациейКлиентСервер.ПреобразоватьСписокПолейВСтроку(
			СтарыйФормат.ЗначенияПолей, Ложь);
	КонецЕсли;
	
	Возврат Данные;
КонецФункции

// Преобразует данные нового формата XML контактной информации в структуру старого формата.
//
// Параметры:
//   Данные                  - Строка - XML контактной информации или пары ключ-значение.
//   ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации, Структура - параметры контактной информации. 
//
// Возвращаемое значение:
//   Структура - набор пар ключ-значение. Состав свойств для адреса:
//        ** Страна           - Строка - текстовое представление страны.
//        ** КодСтраны        - Строка - код страны по ОКСМ.
//        ** Индекс           - Строка - почтовый индекс (только для адресов РФ).
//        ** Регион           - Строка - текстовое представление региона РФ (только для адресов РФ).
//        ** КодРегиона       - Строка - код региона РФ (только для адресов РФ).
//        ** РегионСокращение - Строка - сокращение региона (если СтарыйСоставПолей = Ложь).
//        ** Район            - Строка - текстовое представление района (только для адресов РФ).
//        ** РайонСокращение  - Строка - сокращение района (если СтарыйСоставПолей = Ложь).
//        ** Город            - Строка - текстовое представление города (только для адресов РФ).
//        ** ГородСокращение  - Строка - сокращение города (только для адресов РФ).
//        ** НаселенныйПункт  - Строка - текстовое представление населенного пункта (только для адресов РФ).
//        ** НаселенныйПунктСокращение - Строка - сокращение населенного пункта (если СтарыйСоставПолей = Ложь).
//        ** Улица            - Строка - текстовое представление улицы (только для адресов РФ).
//        ** УлицаСокращение  - Строка - сокращение улицы (если СтарыйСоставПолей = Ложь).
//        ** ТипДома          - Строка - см. ТипыОбъектовАдресацииАдресаРФ().
//        ** Дом              - Строка - текстовое представление дома (только для адресов РФ).
//        ** ТипКорпуса       - Строка - см. ТипыОбъектовАдресацииАдресаРФ().
//        ** Корпус           - Строка - текстовое представление корпуса (только для адресов РФ).
//        ** ТипКвартиры      - Строка - см. ТипыОбъектовАдресацииАдресаРФ().
//        ** Квартира         - Строка - текстовое представление квартиры (только для адресов РФ).
//       Состав свойств для телефона:
//        ** КодСтраны        - Строка - код страны. Например, +7.
//        ** КодГорода        - Строка - код города. Например, 495.
//        ** НомерТелефона    - Строка - номер телефона.
//        ** Добавочный       - Строка - добавочный номер телефона.
//
Функция ПредыдущаяСтруктураКонтактнойИнформацииXML(Знач Данные, Знач ВидКонтактнойИнформации = Неопределено) Экспорт
	
	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(Данные) Тогда
		// Новый формат КИ
		Возврат УправлениеКонтактнойИнформациейКлиентСервер.СтруктураЗначенийПолей(
			ПредыдущийФорматКонтактнойИнформацииXML(Данные));
		
	ИначеЕсли ПустаяСтрока(Данные) И ВидКонтактнойИнформации <> Неопределено Тогда
		// Генерируем по виду
		Возврат УправлениеКонтактнойИнформациейКлиентСервер.СтруктураКонтактнойИнформацииПоТипу(
			ВидКонтактнойИнформации.Тип);
		
	КонецЕсли;
	
	// Возвращаем полную структуру для данного вида с заполненными полями.
	Возврат УправлениеКонтактнойИнформациейКлиентСервер.СтруктураЗначенийПолей(Данные, ВидКонтактнойИнформации);
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////

// Определяет данные страны по справочнику стран или классификатору ОКСМ.
//
// Параметры:
//    КодСтраны    - Строка, Число - код ОКСМ страны. Если не указано, то поиск по коду не производится.
//    Наименование - Строка - Наименование страны. Если не указано, то поиск по наименованию не производится.
//
// Возвращаемое значение:
//    Структура - описание страны. Содержит поля:
//        * Ссылка             - СправочникСсылка.СтраныМира, Неопределено - соответствующий элемент страны мира.
//        * Наименование       - Строка - часть описания страны.
//        * Код                - Строка - часть описания страны.
//        * НаименованиеПолное - Строка - часть описания страны.
//        * КодАльфа2          - Строка - часть описания страны.
//        * КодАльфа3          - Строка - часть описания страны.
//    Неопределено - страна не найдена ни в адресе, ни в классификаторе.
//
Функция ДанныеСтраныМира(Знач КодСтраны = Неопределено, Знач Наименование = Неопределено) Экспорт
	Возврат Справочники.СтраныМира.ДанныеСтраныМира(КодСтраны, Наименование);
КонецФункции

// Определяет данные страны по классификатору ОКСМ.
//
// Параметры:
//    КодСтраны - Строка, Число - код страны.
//
// Возвращаемое значение:
//    Структура - описание страны. Содержит поля:
//        * Наименование       - Строка - часть описания страны.
//        * Код                - Строка - часть описания страны.
//        * НаименованиеПолное - Строка - часть описания страны.
//        * КодАльфа2          - Строка - часть описания страны.
//        * КодАльфа3          - Строка - часть описания страны.
//    Неопределено - страна не найдена в классификаторе.
//
Функция ДанныеКлассификатораСтранМираПоКоду(Знач КодСтраны) Экспорт
	Возврат Справочники.СтраныМира.ДанныеКлассификатораСтранМираПоКоду(КодСтраны);
КонецФункции

// Определяет данные страны по классификатору ОКСМ.
//
// Параметры:
//    Наименование - Строка - наименование страны.
//
// Возвращаемое значение:
//    Структура - описание страны. Содержит поля:
//        * Наименование       - Строка - часть описания страны.
//        * Код                - Строка - часть описания страны.
//        * НаименованиеПолное - Строка - часть описания страны.
//        * КодАльфа2          - Строка - часть описания страны.
//        * КодАльфа3          - Строка - часть описания страны.
//    Неопределено - страна не найдена в классификаторе.
//
Функция ДанныеКлассификатораСтранМираПоНаименованию(Знач Наименование) Экспорт
	Возврат Справочники.СтраныМира.ДанныеКлассификатораСтранМираПоНаименованию(Наименование);
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы.

// Получить значения определенного типа контактной информации у объекта.
//
// Параметры
//    Ссылка                  - ЛюбаяСсылка - ссылка на объект-владелец контактной информации (организация, контрагент, партнер и т.д.)
//    ТипКонтактнойИнформации - ПеречислениеСсылка.ТипыКонтактнойИнформации
//
// Возвращаемое значение:
//    ТаблицаЗначений - колонки 
//        * Значение - строка - строковое представление значения
//        * Вид      - строка - представление вида контактной информации
//
Функция ЗначенияКонтактнойИнформацииОбъекта(Ссылка, ТипКонтактнойИнформации) Экспорт
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Ссылка);
	
	КонтактнаяИнформацияОбъекта = КонтактнаяИнформацияОбъектов(МассивОбъектов, ТипКонтактнойИнформации);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("КонтактнаяИнформацияОбъекта", КонтактнаяИнформацияОбъекта);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КонтактнаяИнформацияОбъекта.Представление,
	|	КонтактнаяИнформацияОбъекта.Вид
	|ПОМЕСТИТЬ ВТКонтактнаяИнформацияОбъекта
	|ИЗ
	|	&КонтактнаяИнформацияОбъекта КАК КонтактнаяИнформацияОбъекта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтактнаяИнформацияОбъекта.Представление КАК Значение,
	|	ПРЕДСТАВЛЕНИЕ(КонтактнаяИнформацияОбъекта.Вид) КАК Вид
	|ИЗ
	|	ВТКонтактнаяИнформацияОбъекта КАК КонтактнаяИнформацияОбъекта";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции


// Устанавливает свойства вида контактной информации.
// 
// Параметры:
//    Параметры - Структура - См. описание в функции ПараметрыВидаКонтактнойИнформации
// 
Процедура УстановитьСвойстваВидаКонтактнойИнформации(Параметры) Экспорт
	
	Если ТипЗнч(Параметры.Вид) = Тип("Строка") Тогда
		Объект = Справочники.ВидыКонтактнойИнформации[Параметры.Вид].ПолучитьОбъект();
	Иначе
		Объект = Параметры.Вид.ПолучитьОбъект();
	КонецЕсли;
	
	Объект.Тип                                  = Параметры.Тип;
	Объект.Подсказка                            = Параметры.Подсказка;
	Объект.МожноИзменятьСпособРедактирования    = Параметры.МожноИзменятьСпособРедактирования;
	Объект.РедактированиеТолькоВДиалоге         = Параметры.РедактированиеТолькоВДиалоге;
	Объект.ОбязательноеЗаполнение               = Параметры.ОбязательноеЗаполнение;
	Объект.РазрешитьВводНесколькихЗначений      = Параметры.РазрешитьВводНесколькихЗначений;
	Объект.ЗапретитьРедактированиеПользователем = Параметры.ЗапретитьРедактированиеПользователем;
	
	НастройкиПроверки = Параметры.НастройкиПроверки;
	ПроверятьНастройки = ТипЗнч(НастройкиПроверки) = Тип("Структура");
	ОшибкаПараметров   = НСтр("ru = 'Некорректно заполнены настройки проверки адреса'");
	
	Если ПроверятьНастройки И Параметры.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		Если НастройкиПроверки.АдресТолькоРоссийский Тогда
			Если Не НастройкиПроверки.ПроверятьКорректность Тогда
				Если НастройкиПроверки.ЗапрещатьВводНекорректного Тогда
					ВызватьИсключение ОшибкаПараметров;
				КонецЕсли;
			Иначе
				// См. примечание
				Если Не НастройкиПроверки.ЗапрещатьВводНекорректного Тогда
					ВызватьИсключение ОшибкаПараметров;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			Если НастройкиПроверки.ПроверятьКорректность Или НастройкиПроверки.ЗапрещатьВводНекорректного Или НастройкиПроверки.СкрыватьНеактуальныеАдреса Тогда
				ВызватьИсключение ОшибкаПараметров;
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Объект, НастройкиПроверки);
		
	ИначеЕсли ПроверятьНастройки И Параметры.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		Если Не НастройкиПроверки.ПроверятьКорректность Тогда
			Если НастройкиПроверки.ЗапрещатьВводНекорректного Тогда
				ВызватьИсключение ОшибкаПараметров;
			КонецЕсли;
		Иначе
			// См. примечание
			Если Не НастройкиПроверки.ЗапрещатьВводНекорректного Тогда
				ВызватьИсключение ОшибкаПараметров;
			КонецЕсли;
		КонецЕсли;
		УстановитьЗначенияРеквизитовПроверки(Объект, НастройкиПроверки);
		
	Иначе
		УстановитьЗначенияРеквизитовПроверки(Объект);
		
	КонецЕсли;
	
	Если Параметры.Порядок <> Неопределено Тогда
		Объект.РеквизитДопУпорядочивания = Параметры.Порядок;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
	
КонецПроцедуры

// Возвращает структуру параметров вида контактной информации для определенного типа
// 
// Параметры:
//    Тип - ПеречислениеСсылка.ТипыКонтактнойИнформации, Строка - тип контактной информации для
//                                                                заполнения свойства НастройкиПроверки
// 
// Возвращаемое значение:
//    Структура - содержит структуру с полями:
//        * Вид - СправочникСсылка.ВидыКонтактнойИнформации, Строка   - Ссылка на вид контактной информации или
//                                                                      идентификатор предопределенного элемента.
//        * Тип - ПеречислениеСсылка.ТипыКонтактнойИнформации - Тип контактной информации или его
//                                                                      идентификатор.
//        * Подсказка - Строка                                        - Подсказка к виду контактной информации.
//        * Порядок - Число, Неопределено                             - Порядок вида контактной информации, положение в
//                                                                      списке относительно других элементов:
//                                                                          Неопределено - не переназначать;
//                                                                          0            - назначить автоматически;
//                                                                          Число > 0    - назначить указанный порядок.
//        * МожноИзменятьСпособРедактирования - Булево                - Истина, если есть возможность изменять способ
//                                                                      редактирования только в диалоге, Ложь - иначе.
//        * РедактированиеТолькоВДиалоге - Булево                     - Истина, если редактировать только в диалоге,
//                                                                      Ложь - иначе.
//        * ОбязательноеЗаполнение                                    - Булево - Истина, если требуется обязательное
//                                                                      заполнение поля, Ложь - иначе.
//        * РазрешитьВводНесколькихЗначений - Булево                  - Признак возможности использования дополнительных
//                                                                      полей ввода для данного вида.
//        * ЗапретитьРедактированиеПользователем - Булево             - Признак недоступности редактирования
//                                                                      пользователем свойства вида контактной
//                                                                      информации.
//        * НастройкиПроверки - Структура, Неопределено               - Настройки проверки вида контактной информации.
//            Для типа Адрес - Структура, содержащая поля:
//                * АдресТолькоРоссийский        - Булево - Истина, если используются только российские адреса, Ложь -
//                                                          иначе.
//                * ПроверятьКорректность        - Булево - Истина, если используется проверка адреса по разрезам КЛАДР
//                                                          (Только если АдресТолькоРоссийский = Истина), Ложь - иначе.
//                * ПроверятьПоФИАС              - Булево - Истина, если используется проверка адреса по разрезам ФИАС
//                                                          (Только если АдресТолькоРоссийский = Истина), Ложь - иначе.
//                * ЗапрещатьВводНекорректного   - Булево - Истина, если требуется запрещать пользователю записывать
//                                                          некорректный адрес (Только если ПроверятьКорректность =
//                                                          Истина), Ложь - иначе.
//                * СкрыватьНеактуальныеАдреса   - Булево - Истина, если не требуется показывать неактуальные адреса при
//                                                          вводе(Только если АдресТолькоРоссийский = Истина),
//                                                          Ложь - иначе.
//                * ВключатьСтрануВПредставление - Булево - Истина, если требуется включать наименование страны в
//                                                          представление адреса, Ложь - иначе.
//            Для типа АдресЭлектроннойПочты - Структура, содержащая поля:
//                * ПроверятьКорректность        - Булево - Истина, если требуется проверка адреса электронной почты на
//                                                          корректность, Ложь - иначе.
//                * ЗапрещатьВводНекорректного   - Булево - Истина, если требуется запрещать пользователю записывать
//                                                          некорректный адрес (Только если
//                                                          ПроверятьКорректность = Истина), Ложь - иначе.
//            Для остальных типов или для задания настроек по умолчанию используется Неопределено.
//
// Примечание:
//    Установка параметра ПроверятьКорректность в значение Истина требует так же установить параметр
//    ЗапрещатьВводНекорректного в значение Истина.
// 
//    При использовании параметра Порядок следует внимательно следить за уникальностью назначаемого значения. Если
//    после выполнения обновления значения порядка окажутся неуникальными в пределах группы, то настройка порядка
//    пользователем будет невозможна.
//    В общем случае рекомендуется не использовать этот параметр (порядок не изменится), либо заполнять его значением
//    0 (порядок будет назначен автоматически в подсистеме "Настройка порядка элементов" при выполнении процедуры).
//    Для размещения видов КИ в определенной последовательности относительно друг друга без явного размещения в начале
//    списка достаточно вызывать данную процедуру в нужной последовательности для каждого вида КИ с указанием
//    порядка 0. Если добавляется предопределенный вид КИ к уже существующим в ИБ, не рекомендуется назначать порядок
//    в явном виде.
// 
Функция ПараметрыВидаКонтактнойИнформации(Тип = Неопределено) Экспорт
	
	Если ТипЗнч(Тип) = Тип("Строка") Тогда
		УстанавливаемыйТип = Перечисления.ТипыКонтактнойИнформации[Тип];
	Иначе
		УстанавливаемыйТип = Тип;
	КонецЕсли;
	
	ПараметрыВида = Новый Структура;
	ПараметрыВида.Вставить("Вид");
	ПараметрыВида.Вставить("Тип", УстанавливаемыйТип);
	ПараметрыВида.Вставить("Подсказка");
	ПараметрыВида.Вставить("Порядок");
	ПараметрыВида.Вставить("МожноИзменятьСпособРедактирования", Ложь);
	ПараметрыВида.Вставить("РедактированиеТолькоВДиалоге", Ложь);
	ПараметрыВида.Вставить("ОбязательноеЗаполнение", Ложь);
	ПараметрыВида.Вставить("РазрешитьВводНесколькихЗначений", Ложь);
	ПараметрыВида.Вставить("ЗапретитьРедактированиеПользователем", Ложь);
	
	Если УстанавливаемыйТип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		НастройкиПроверки = Новый Структура;
		НастройкиПроверки.Вставить("АдресТолькоРоссийский", Ложь);
		НастройкиПроверки.Вставить("ПроверятьКорректность", Ложь);
		НастройкиПроверки.Вставить("ПроверятьПоФИАС", Ложь);
		НастройкиПроверки.Вставить("ЗапрещатьВводНекорректного", Ложь);
		НастройкиПроверки.Вставить("СкрыватьНеактуальныеАдреса", Ложь);
		НастройкиПроверки.Вставить("ВключатьСтрануВПредставление", Ложь);
	ИначеЕсли УстанавливаемыйТип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		НастройкиПроверки = Новый Структура;
		НастройкиПроверки.Вставить("ПроверятьКорректность", Ложь);
		НастройкиПроверки.Вставить("ЗапрещатьВводНекорректного", Ложь);
	Иначе
		НастройкиПроверки = Неопределено;
	КонецЕсли;
	
	ПараметрыВида.Вставить("НастройкиПроверки", НастройкиПроверки);
	
	Возврат ПараметрыВида;
	
КонецФункции

// Записывает контактную информацию из XML в поля табличной части Контактная информация объекта.
//
// Параметры:
//    Объект - ЛюбаяСсылка - номер телефона или факса.
//    ЗначенияПолей - Строка - контактная информация в формате XML.
//    ВидИнформации - Справочник.ВидыКонтактнойИнформация - ссылка на вид контактной информации.
//    ТипИнформации - Перечисление.ТипыКонтактнойИнформация - тип контактной информации.
//    ИдентификаторСтроки - Число - идентификатор строки табличной части.
Процедура ЗаписатьКонтактнуюИнформацию(Объект, ЗначенияПолей, ВидИнформации, ТипИнформации, ИдентификаторСтроки = 0) Экспорт
	
	ОбъектКИ = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(ЗначенияПолей, ВидИнформации);
	
	Если Не УправлениеКонтактнойИнформациейСлужебный.XDTOКонтактнаяИнформацияЗаполнена(ОбъектКИ) Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = Объект.КонтактнаяИнформация.Добавить();
	НоваяСтрока.Представление = ОбъектКИ.Представление;
	НоваяСтрока.ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(ОбъектКИ);
	НоваяСтрока.Вид           = ВидИнформации;
	НоваяСтрока.Тип           = ТипИнформации;
	
	Если ЗначениеЗаполнено(ИдентификаторСтроки) Тогда
		НоваяСтрока.ИдентификаторСтрокиТабличнойЧасти = ИдентификаторСтроки;
	КонецЕсли;
	
	// Заполнение дополнительных реквизитов ТЧ.
	Если ТипИнформации = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		ЗаполнитьРеквизитыТабличнойЧастиДляАдресаЭлектроннойПочты(НоваяСтрока, ОбъектКИ);
		
	ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		ЗаполнитьРеквизитыТабличнойЧастиДляАдреса(НоваяСтрока, ОбъектКИ);
		
	ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		ЗаполнитьРеквизитыТабличнойЧастиДляТелефона(НоваяСтрока, ОбъектКИ);
		
	ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		ЗаполнитьРеквизитыТабличнойЧастиДляТелефона(НоваяСтрока, ОбъектКИ);
		
	ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
		ЗаполнитьРеквизитыТабличнойЧастиДляВебСтраницы(НоваяСтрока, ОбъектКИ);
		
	КонецЕсли;
	
КонецПроцедуры

// Устарела. Следует использовать УстановитьСвойстваВидаКонтактнойИнформации.
//
Процедура ОбновитьВидКонтактнойИнформации(Вид, Тип, Подсказка, МожноИзменятьСпособРедактирования, РедактированиеТолькоВДиалоге,
	ОбязательноеЗаполнение, Порядок = Неопределено, РазрешитьВводНесколькихЗначений = Ложь, НастройкиПроверки = Неопределено) Экспорт
	
	ПараметрыВида = ПараметрыВидаКонтактнойИнформации();
	ПараметрыВида.Вид = Вид;
	ПараметрыВида.Тип = Тип;
	ПараметрыВида.Подсказка = Подсказка;
	ПараметрыВида.МожноИзменятьСпособРедактирования = МожноИзменятьСпособРедактирования;
	ПараметрыВида.РедактированиеТолькоВДиалоге = РедактированиеТолькоВДиалоге;
	ПараметрыВида.ОбязательноеЗаполнение = ОбязательноеЗаполнение;
	ПараметрыВида.Порядок = Порядок;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = РазрешитьВводНесколькихЗначений;
	ПараметрыВида.НастройкиПроверки = НастройкиПроверки;
	ПараметрыВида.ЗапретитьРедактированиеПользователем = Ложь;
	
	УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Инициализация элементов на форме объект-владельца контактной информации.

Процедура ДобавитьОписаниеЭлемента(Форма, ИмяЭлемента, Приоритет, ЭтоКоманда = Ложь)
	
	Форма.ПараметрыКонтактнойИнформации.ДобавленныеЭлементы.Добавить(ИмяЭлемента, Приоритет, ЭтоКоманда);
	
КонецПроцедуры

Процедура УдалитьОписаниеЭлемента(Форма, ИмяЭлемента)
	
	ДобавленныеЭлементы = Форма.ПараметрыКонтактнойИнформации.ДобавленныеЭлементы;
	НайденнаяСтрока = ДобавленныеЭлементы.НайтиПоЗначению(ИмяЭлемента);
	ДобавленныеЭлементы.Удалить(НайденнаяСтрока);
	
КонецПроцедуры

Функция ЗаголовокСлева(Форма, Знач ПоложениеЗаголовкаКИ = Неопределено)
	
	Если Не ЗначениеЗаполнено(ПоложениеЗаголовкаКИ) Тогда
		
		СохраненноеПоложениеЗаголовка = Форма.ПараметрыКонтактнойИнформации.ПоложениеЗаголовка;
		Если ЗначениеЗаполнено(СохраненноеПоложениеЗаголовка) Тогда
			ПоложениеЗаголовкаКИ = ПоложениеЗаголовкаЭлементаФормы[СохраненноеПоложениеЗаголовка];
		Иначе
			ПоложениеЗаголовкаКИ = ПоложениеЗаголовкаЭлементаФормы.Верх;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат (ПоложениеЗаголовкаКИ = ПоложениеЗаголовкаЭлементаФормы.Лево);
	
КонецФункции

Процедура ИзменитьКомментарий(Форма, ИмяРеквизита, ЭтоДобавлениеКомментария)
	
	ОписаниеКонтактнойИнформации = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
	
	Отбор = Новый Структура("ИмяРеквизита", ИмяРеквизита);
	НайденнаяСтрока = ОписаниеКонтактнойИнформации.НайтиСтроки(Отбор)[0];
	
	// Заголовок и поле ввода
	ЗаголовокЭлемента = Форма.Элементы.Найти("Заголовок" + ИмяРеквизита);
	ИмяКомментария = "Комментарий" + ИмяРеквизита;
	
	ЗаголовокСлева = ЗаголовокСлева(Форма);
	
	Если ЭтоДобавлениеКомментария Тогда
		
		ПолеВвода = Форма.Элементы.Найти(ИмяРеквизита);
		ГруппаПолейВвода = Форма.Элементы.ГруппаПолейВводаКонтактнойИнформации;
		
		ТекущийЭлемент = ?(ГруппаПолейВвода.ПодчиненныеЭлементы.Найти(ПолеВвода.Имя) = Неопределено, ПолеВвода.Родитель, ПолеВвода);
		ИндексТекущегоЭлемента = ГруппаПолейВвода.ПодчиненныеЭлементы.Индекс(ТекущийЭлемент);
		СледующийЭлемент = ГруппаПолейВвода.ПодчиненныеЭлементы.Получить(ИндексТекущегоЭлемента + 1);
		
		Комментарий = Комментарий(Форма, НайденнаяСтрока.Комментарий, ИмяКомментария, ГруппаПолейВвода);
		Форма.Элементы.Переместить(Комментарий, ГруппаПолейВвода, СледующийЭлемент);
		
		Если ЗаголовокСлева Тогда
			
			ГруппаЗаголовков = Форма.Элементы.ГруппаЗаголовковКонтактнойИнформации;
			ИндексЗаголовка = ГруппаЗаголовков.ПодчиненныеЭлементы.Индекс(ЗаголовокЭлемента);
			СледующийЗаголовок = ГруппаЗаголовков.ПодчиненныеЭлементы.Получить(ИндексЗаголовка + 1);
			
			ИмяЗаглушки = "ЗаглушкаЗаголовка" + ИмяРеквизита;
			Заглушка = Форма.Элементы.Добавить(ИмяЗаглушки, Тип("ДекорацияФормы"), ГруппаЗаголовков);
			Форма.Элементы.Переместить(Заглушка, ГруппаЗаголовков, СледующийЗаголовок);
			ДобавитьОписаниеЭлемента(Форма, ИмяЗаглушки, 2);
			
		КонецЕсли;
		
	Иначе
		
		Комментарий = Форма.Элементы[ИмяКомментария];
		Форма.Элементы.Удалить(Комментарий);
		УдалитьОписаниеЭлемента(Форма, ИмяКомментария);
		
		Если ЗаголовокСлева Тогда
			
			ЗаголовокЭлемента.Высота = 1;
			
			ИмяЗаглушки = "ЗаглушкаЗаголовка" + ИмяРеквизита;
			ЗаглушкаЗаголовка = Форма.Элементы[ИмяЗаглушки];
			Форма.Элементы.Удалить(ЗаглушкаЗаголовка);
			УдалитьОписаниеЭлемента(Форма, ИмяЗаглушки);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Действие
	ГруппаДействий = Форма.Элементы.ГруппаДействийКонтактнойИнформации;
	ИмяЗаглушкиДействия = "ЗаглушкаДействия" + ИмяРеквизита;
	ЗаглушкаДействия = Форма.Элементы.Найти(ИмяЗаглушкиДействия);
	
	Если ЭтоДобавлениеКомментария Тогда
		
		Если ЗаглушкаДействия = Неопределено Тогда
			
			ЗаглушкаДействия = Форма.Элементы.Добавить(ИмяЗаглушкиДействия, Тип("ДекорацияФормы"), ГруппаДействий);
			ЗаглушкаДействия.Высота = 1;
			Действие = Форма.Элементы["Команда" + ИмяРеквизита];
			ИндексКоманды = ГруппаДействий.ПодчиненныеЭлементы.Индекс(Действие);
			СледующийЭлемент = ГруппаДействий.ПодчиненныеЭлементы.Получить(ИндексКоманды + 1);
			Если ЗаглушкаДействия <> СледующийЭлемент Тогда
				Форма.Элементы.Переместить(ЗаглушкаДействия, ГруппаДействий, СледующийЭлемент);
			КонецЕсли;
			ДобавитьОписаниеЭлемента(Форма, ИмяЗаглушкиДействия, 2);
			
		Иначе
			
			ЗаглушкаДействия.Высота = 2;
			
		КонецЕсли;
		
	Иначе
		
		Если ЗаглушкаДействия.Высота = 1 Тогда
			
			Форма.Элементы.Удалить(ЗаглушкаДействия);
			УдалитьОписаниеЭлемента(Форма, ИмяЗаглушкиДействия);
			
		Иначе
			
			ЗаглушкаДействия.Высота = 1;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСтрокуКонтактнойИнформации(Форма, Результат)
	
	ДобавляемыйВид = Результат.ДобавляемыйВид;
	Если ТипЗнч(ДобавляемыйВид)= Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
		ИнформацияОВидеКИ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДобавляемыйВид, "Тип, Наименование, РедактированиеТолькоВДиалоге, Подсказка");
	Иначе
		ИнформацияОВидеКИ = ДобавляемыйВид;
		ДобавляемыйВид    = ДобавляемыйВид.Ссылка;
	КонецЕсли;
	
	ТаблицаКонтактнойИнформации = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
	
	Отбор = Новый Структура("Вид", ДобавляемыйВид);
	НайденныеСтроки = ТаблицаКонтактнойИнформации.НайтиСтроки(Отбор);
	КоличествоЭлементов = НайденныеСтроки.Количество();
	
	ПоследняяСтрока = НайденныеСтроки.Получить(КоличествоЭлементов-1);
	ИндексДобавляемойСтроки = ТаблицаКонтактнойИнформации.Индекс(ПоследняяСтрока) + 1;
	ЭтоПоследняяСтрока = Ложь;
	Если ИндексДобавляемойСтроки = ТаблицаКонтактнойИнформации.Количество() Тогда
		ЭтоПоследняяСтрока = Истина;
	Иначе
		ИмяСледующегоРеквизита = ТаблицаКонтактнойИнформации[ИндексДобавляемойСтроки].ИмяРеквизита;
	КонецЕсли;
	
	НоваяСтрока = ТаблицаКонтактнойИнформации.Вставить(ИндексДобавляемойСтроки);
	ИмяРеквизита = "КонтактнаяИнформацияПоле" + НоваяСтрока.ПолучитьИдентификатор();
	НоваяСтрока.ИмяРеквизита = ИмяРеквизита;
	НоваяСтрока.Вид = ДобавляемыйВид;
	НоваяСтрока.Тип = ИнформацияОВидеКИ.Тип;
	НоваяСтрока.ЭтоРеквизитТабличнойЧасти = Ложь;
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(500)), , ИнформацияОВидеКИ.Наименование, Истина));
	
	Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	ЗаголовокСлева = ЗаголовокСлева(Форма);
	
	// Отрисовка на форме
	Если ЗаголовокСлева Тогда
		ГруппаЗаголовков = Форма.Элементы.ГруппаЗаголовковКонтактнойИнформации;
		Заголовок = Заголовок(Форма, ИнформацияОВидеКИ.Тип, ИмяРеквизита, ГруппаЗаголовков, ИнформацияОВидеКИ.Наименование);
		
		Если Не ЭтоПоследняяСтрока Тогда
			СледующийЗаголовок = Форма.Элементы["Заголовок" + ИмяСледующегоРеквизита];
			Форма.Элементы.Переместить(Заголовок, ГруппаЗаголовков, СледующийЗаголовок);
		КонецЕсли;
	КонецЕсли;
	
	ГруппаПолейВвода = Форма.Элементы.ГруппаПолейВводаКонтактнойИнформации;
	ПолеВвода = ПолеВвода(Форма, ИнформацияОВидеКИ.РедактированиеТолькоВДиалоге, ИнформацияОВидеКИ.Тип, ИмяРеквизита, ИнформацияОВидеКИ.Подсказка);
	
	Если Не ЭтоПоследняяСтрока Тогда
		
		ИмяСледующегоЭлемента = ПоследняяСтрока.ИмяРеквизита;
		
		Если ЗначениеЗаполнено(ПоследняяСтрока.Комментарий) Тогда
			ИмяСледующегоЭлемента = "Комментарий" + ИмяСледующегоЭлемента;
		КонецЕсли;
		
		ИндексСледующегоЭлемента = ГруппаПолейВвода.ПодчиненныеЭлементы.Индекс(Форма.Элементы[ИмяСледующегоЭлемента]) + 1;
		СледующийЭлемент = ГруппаПолейВвода.ПодчиненныеЭлементы.Получить(ИндексСледующегоЭлемента);
		
		Форма.Элементы.Переместить(ПолеВвода, ГруппаПолейВвода, СледующийЭлемент);
		
	КонецЕсли;
	
	ГруппаДействий = Форма.Элементы.ГруппаДействийКонтактнойИнформации;
	Отбор = Новый Структура("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	КоличествоАдресов = ТаблицаКонтактнойИнформации.НайтиСтроки(Отбор).Количество();
	
	ИмяДействия = "Команда" + ИмяСледующегоРеквизита;
	ИмяЗаглушки = "ДекорацияВерх" + ИмяСледующегоРеквизита;
	
	Если Форма.Элементы.Найти(ИмяЗаглушки) <> Неопределено Тогда
		ИмяСледующегоДействия = ИмяЗаглушки;
	ИначеЕсли Форма.Элементы.Найти(ИмяДействия) <> Неопределено Тогда
		ИмяСледующегоДействия = ИмяДействия;
	Иначе
		ИмяСледующегоДействия = "ЗаглушкаДействия" + ИмяСледующегоРеквизита;
	КонецЕсли;
	
	Действие = Действие(Форма, ИнформацияОВидеКИ.Тип, ИмяРеквизита, ГруппаДействий, КоличествоАдресов);
	Если Не ЭтоПоследняяСтрока Тогда
		СледующееДействие = Форма.Элементы[ИмяСледующегоДействия];
		Форма.Элементы.Переместить(Действие, ГруппаДействий, СледующееДействие);
	КонецЕсли;
	
	Форма.ТекущийЭлемент = Форма.Элементы[ИмяРеквизита];
	
	Если ИнформацияОВидеКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес
		И ИнформацияОВидеКИ.РедактированиеТолькоВДиалоге Тогда
		
		Результат.Вставить("ЭлементФормыАдреса", ИмяРеквизита);
		
	КонецЕсли;
	
КонецПроцедуры

Функция Заголовок(Форма, Тип, ИмяРеквизита, ГруппаЗаголовков, Наименование, ЭтоНовыйВидКИ = Ложь, ЕстьКомментарий = Ложь)
	
	ИмяЗаголовка = "Заголовок" + ИмяРеквизита;
	Элемент = Форма.Элементы.Добавить(ИмяЗаголовка, Тип("ДекорацияФормы"), ГруппаЗаголовков);
	Элемент.Заголовок = ?(ЭтоНовыйВидКИ, Наименование + ":", "");
	
	Если Тип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
		Элемент.Высота = 5;
		Элемент.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Верх;
	Иначе
		Элемент.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Центр;
	КонецЕсли;
	
	ДобавитьОписаниеЭлемента(Форма, ИмяЗаголовка, 2);
	
	Если ЕстьКомментарий Тогда
		
		ИмяЗаглушки = "ЗаглушкаЗаголовка" + ИмяРеквизита;
		Заглушка = Форма.Элементы.Добавить(ИмяЗаглушки, Тип("ДекорацияФормы"), ГруппаЗаголовков);
		ДобавитьОписаниеЭлемента(Форма, ИмяЗаглушки, 2);
		
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

Функция ПолеВвода(Форма, РедактированиеТолькоВДиалоге, Тип, ИмяРеквизита, Подсказка, ЭтоНовыйВидКИ = Ложь, ОбязательноеЗаполнение = Ложь)
	
	ЗаголовокСлева = ЗаголовокСлева(Форма);
	
	Элемент = Форма.Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Форма.Элементы.ГруппаПолейВводаКонтактнойИнформации);
	Элемент.Вид = ВидПоляФормы.ПолеВвода;
	Элемент.Подсказка = Подсказка;
	Элемент.ПутьКДанным = ИмяРеквизита;
	Элемент.РастягиватьПоГоризонтали = Истина;
	Элемент.ПоложениеЗаголовка = ?(ЗаголовокСлева Или Не ЭтоНовыйВидКИ, ПоложениеЗаголовкаЭлементаФормы.Нет, ПоложениеЗаголовкаЭлементаФормы.Верх);
	Элемент.УстановитьДействие("Очистка", "Подключаемый_КонтактнаяИнформацияОчистка");
	
	ДобавитьОписаниеЭлемента(Форма, ИмяРеквизита, 2);
	
	// Устанавливаем свойства поля ввода.
	Если Тип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
		Элемент.Высота = 5;
		Элемент.МногострочныйРежим = Истина;
		Элемент.РастягиватьПоВертикали = Ложь;
	Иначе
		
		// Ввод комментария через контекстное меню.
		ИмяКоманды = "КонтекстноеМеню" + ИмяРеквизита;
		Команда = Форма.Команды.Добавить(ИмяКоманды);
		Кнопка = Форма.Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"), Элемент.КонтекстноеМеню);
		Команда.Подсказка = НСтр("ru = 'Ввести комментарий'");
		Команда.Действие = "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
		Кнопка.Заголовок = НСтр("ru = 'Ввести комментарий'");
		Кнопка.ИмяКоманды = ИмяКоманды;
		Команда.ИзменяетСохраняемыеДанные = Истина;
		
		ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 1);
		ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 9, Истина);
	КонецЕсли;
	
	Если ОбязательноеЗаполнение И ЭтоНовыйВидКИ Тогда
		Элемент.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;
	
	// Редактирование в диалоге
	Если ДляТипаКонтактнойИнформацииДоступноРедактированиеВДиалоге(Тип) Тогда
		
		Элемент.КнопкаВыбора = Истина;
		
		Если РедактированиеТолькоВДиалоге Тогда
			Элемент.РедактированиеТекста = Ложь;
			Элемент.ЦветФона = ЦветаСтиля.КонтактнаяИнформацияСРедактированиемВДиалогеЦвет;
		КонецЕсли;
		Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_КонтактнаяИнформацияНачалоВыбора");
		
	КонецЕсли;
	Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_КонтактнаяИнформацияПриИзменении");
	
	Возврат Элемент;
	
КонецФункции

Функция Действие(Форма, Тип, ИмяРеквизита, ГруппаДействий, КоличествоАдресов, ЕстьКомментарий = Ложь)
	
	МожноСоздаватьДействие = Истина;
	Если Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
			МодульРаботаСПочтовымиСообщениями = ОбщегоНазначения.ОбщийМодуль("РаботаСПочтовымиСообщениями");
			Если НЕ МодульРаботаСПочтовымиСообщениями.ДоступнаОтправкаПисем() Тогда
				МожноСоздаватьДействие = Ложь;
			КонецЕсли;
		Иначе
			МожноСоздаватьДействие = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если МожноСоздаватьДействие И ((Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница
		Или Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
		Или (Тип = Перечисления.ТипыКонтактнойИнформации.Адрес И КоличествоАдресов > 1)) Тогда
		
		// Есть действие
		ИмяКоманды = "Команда" + ИмяРеквизита;
		Команда = Форма.Команды.Добавить(ИмяКоманды);
		ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 9, Истина);
		Команда.Отображение = ОтображениеКнопки.Картинка;
		Команда.Действие = "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
		
		Элемент = Форма.Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"), ГруппаДействий);
		ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 2);
		Элемент.ИмяКоманды = ИмяКоманды;
		
		Если Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			
			Элемент.Заголовок = НСтр("ru = 'Заполнить'");
			Команда.Подсказка = НСтр("ru = 'Заполнить адрес из другого поля'");
			Команда.Картинка = БиблиотекаКартинок.ПереместитьВлево;
			Команда.ИзменяетСохраняемыеДанные = Истина;
			
		ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
			
			Элемент.Заголовок = НСтр("ru = 'Перейти'");
			Команда.Подсказка = НСтр("ru = 'Перейти по ссылке'");
			Команда.Картинка = БиблиотекаКартинок.КонтактнаяИнформацияПерейтиПоСсылке;
			
		ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			
			Элемент.Заголовок = НСтр("ru = 'Написать письмо'");
			Команда.Подсказка = НСтр("ru = 'Написать письмо'");
			Команда.Картинка = БиблиотекаКартинок.ОтправитьЭлектронноеПисьмо;
			
		КонецЕсли;
		
		Если ЕстьКомментарий Тогда
			
			ИмяЗаглушкиДействия = "ЗаглушкаДействия" + ИмяРеквизита;
			ЗаглушкаДействия = Форма.Элементы.Добавить(ИмяЗаглушкиДействия, Тип("ДекорацияФормы"), ГруппаДействий);
			ЗаглушкаДействия.Высота = 1;
			ДобавитьОписаниеЭлемента(Форма, ИмяЗаглушкиДействия, 2);
			
		КонецЕсли;
		
	Иначе
		
		// Действия нет, ставим заглушку.
		ИмяЗаглушкиДействия = "ЗаглушкаДействия" + ИмяРеквизита;
		Элемент = Форма.Элементы.Добавить(ИмяЗаглушкиДействия, Тип("ДекорацияФормы"), ГруппаДействий);
		ДобавитьОписаниеЭлемента(Форма, ИмяЗаглушкиДействия, 2);
		Если ЕстьКомментарий Тогда
			Элемент.Высота = 2;
		ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
			Элемент.Высота = 5;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

Функция Комментарий(Форма, Комментарий, ИмяКомментария, ГруппаДляРазмещения)
	
	Элемент = Форма.Элементы.Добавить(ИмяКомментария, Тип("ДекорацияФормы"), ГруппаДляРазмещения);
	Элемент.Заголовок = Комментарий;
	
	Элемент.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
	
	Элемент.РастягиватьПоГоризонтали = Истина;
	Элемент.РастягиватьПоВертикали  = Ложь;
	Элемент.ВертикальноеПоложение  = ВертикальноеПоложениеЭлемента.Верх;
	
	Элемент.Высота = 1;
	
	ДобавитьОписаниеЭлемента(Форма, ИмяКомментария, 2);
	
	Возврат Элемент;
	
КонецФункции

// Убирает разделители в номере телефона.
//
// Параметры:
//    НомерТелефона - Строка - номер телефона или факса.
//
// Возвращаемое значение:
//     Строка - номер телефона или факса без разделителей.
//
Функция УбратьРазделителиВНомерТелефона(Знач НомерТелефона)
	
	Поз = Найти(НомерТелефона, ",");
	Если Поз <> 0 Тогда
		НомерТелефона = Лев(НомерТелефона, Поз-1);
	КонецЕсли;
	
	НомерТелефона = СтрЗаменить(НомерТелефона, "-", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, " ", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, "+", "");
	
	Возврат НомерТелефона;
	
КонецФункции

Функция Группа(ИмяГруппы, Форма, Родитель, Группировка, ПорядокУдаления) 
	
	Группа = Форма.Элементы.Найти(ИмяГруппы);
	
	Если Группа = Неопределено Тогда
		Группа = Форма.Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), Родитель);
		Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		Группа.ОтображатьЗаголовок = Ложь;
		Группа.Отображение = ОтображениеОбычнойГруппы.Нет;
		Группа.Группировка = Группировка;
		ДобавитьОписаниеЭлемента(Форма, ИмяГруппы, ПорядокУдаления);
		
	КонецЕсли;
	
	Возврат Группа;
	
КонецФункции

Процедура ПроверитьНаличиеРеквизитовКонтактнойИнформации(Форма, МассивДобавляемыхРеквизитов)
	
	СписокРеквизитовФормы = Форма.ПолучитьРеквизиты();
	
	СоздатьПараметрыКонтактнойИнформации = Истина;
	СоздатьТаблицуКонтактнойИнформации = Истина;
	Для Каждого Реквизит Из СписокРеквизитовФормы Цикл
		Если Реквизит.Имя = "ПараметрыКонтактнойИнформации" Тогда
			СоздатьПараметрыКонтактнойИнформации = Ложь;
		ИначеЕсли Реквизит.Имя = "КонтактнаяИнформацияОписаниеДополнительныхРеквизитов" Тогда
			СоздатьТаблицуКонтактнойИнформации = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если СоздатьТаблицуКонтактнойИнформации Тогда
		
		Строка500 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(500));
		
		// Создадим таблицу значений
		ИмяОписания = "КонтактнаяИнформацияОписаниеДополнительныхРеквизитов";
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяОписания, Новый ОписаниеТипов("ТаблицаЗначений")));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ИмяРеквизита", Строка500, ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Вид", Новый ОписаниеТипов("СправочникСсылка.ВидыКонтактнойИнформации"), ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Тип", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыКонтактнойИнформации"), ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЗначенияПолей", Новый ОписаниеТипов("СписокЗначений, Строка"), ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Представление", Строка500, ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Комментарий", Новый ОписаниеТипов("Строка"), ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЭтоРеквизитТабличнойЧасти", Новый ОписаниеТипов("Булево"), ИмяОписания));
		
	КонецЕсли;
	
	Если СоздатьПараметрыКонтактнойИнформации Тогда
		
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ПараметрыКонтактнойИнформации", Новый ОписаниеТипов()));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЗначенияРеквизитовПроверки(Объект, НастройкиПроверки = Неопределено)
	
	Объект.ПроверятьКорректность = ?(НастройкиПроверки = Неопределено, Ложь, НастройкиПроверки.ПроверятьКорректность);
	Если Объект.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		Объект.ПроверятьПоФИАС       = ?(НастройкиПроверки = Неопределено, Ложь, НастройкиПроверки.ПроверятьПоФИАС);
	КонецЕсли;
	
	Объект.АдресТолькоРоссийский = Ложь;
	Объект.ВключатьСтрануВПредставление = Ложь;
	Объект.ЗапрещатьВводНекорректного =?(НастройкиПроверки = Неопределено, Ложь, НастройкиПроверки.ЗапрещатьВводНекорректного);
	Объект.СкрыватьНеактуальныеАдреса = Ложь;
	
КонецПроцедуры

Процедура ДобавитьРеквизитВОписание(Форма, СтрокаКИ, ЭтоНовыйВидКИ, ЭтоРеквизитТабличнойЧасти = Ложь, ЗаполнятьЗначениеРеквизита = Истина)
	
	НоваяСтрока = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Добавить();
	НоваяСтрока.ИмяРеквизита  = СтрокаКИ.ИмяРеквизита;
	НоваяСтрока.Вид           = СтрокаКИ.Вид;
	НоваяСтрока.Тип           = СтрокаКИ.Тип;
	НоваяСтрока.ЭтоРеквизитТабличнойЧасти = ЭтоРеквизитТабличнойЧасти;
	
	Если ПустаяСтрока(СтрокаКИ.ЗначенияПолей) Тогда
		НоваяСтрока.ЗначенияПолей = "";
	Иначе
		НоваяСтрока.ЗначенияПолей = УправлениеКонтактнойИнформациейКлиентСервер.ПреобразоватьСтрокуВСписокПолей(СтрокаКИ.ЗначенияПолей);
	КонецЕсли;
	
	НоваяСтрока.Представление = СтрокаКИ.Представление;
	НоваяСтрока.Комментарий   = СтрокаКИ.Комментарий;
	
	Если ЗаполнятьЗначениеРеквизита И Не ЭтоРеквизитТабличнойЧасти Тогда
		
		Форма[СтрокаКИ.ИмяРеквизита] = СтрокаКИ.Представление;
		
	КонецЕсли;
	
	СтруктураВидаКИ = УправлениеКонтактнойИнформациейСлужебный.СтруктураВидаКонтактнойИнформации(СтрокаКИ.Вид);
	СтруктураВидаКИ.Вставить("Ссылка", СтрокаКИ.Вид);
	
	Если ЭтоНовыйВидКИ И СтруктураВидаКИ.РазрешитьВводНесколькихЗначений И Не ЭтоРеквизитТабличнойЧасти Тогда
		
		Форма.ПараметрыКонтактнойИнформации.СписокДобавляемыхЭлементов.Добавить(СтруктураВидаКИ, СтрокаКИ.Вид.Наименование);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьКомандыИЭлементыФормы(Форма)
	
	ДобавленныеЭлементы = Форма.ПараметрыКонтактнойИнформации.ДобавленныеЭлементы;
	ДобавленныеЭлементы.СортироватьПоПредставлению();
	
	Для Каждого УдаляемыйЭлемент Из ДобавленныеЭлементы Цикл
		
		Если УдаляемыйЭлемент.Пометка Тогда
			Форма.Команды.Удалить(Форма.Команды[УдаляемыйЭлемент.Значение]);
		Иначе
			Форма.Элементы.Удалить(Форма.Элементы[УдаляемыйЭлемент.Значение]);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает доступно ли редактирование в диалоге по типу контактной информации.
//
// Параметры:
//    Тип - ПеречислениеСсылка.ТипыКонтактнойИнформации - тип контактной информации.
//
// Возвращаемое значение:
//    Булево - доступно или нет редактирование в диалоге.
//
Функция ДляТипаКонтактнойИнформацииДоступноРедактированиеВДиалоге(Тип)
	
	Если Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		Возврат Истина;
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		Возврат Истина;
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Возвращает имя табличной части документа по виду контактной информации.
//
// Параметры:
//    ВидКИ      - СправочникСсылка.ВидыКонтактнойИнформации - вид контактной информации.
//    ИмяОбъекта - Строка - полное имя объекта метаданного.
//
// Возвращаемое значение:
//    Строка - имя табличной части или пустая строка, если табличной части нет.
//
Функция ИмяТабличнойЧастиПоВидуКИ(ВидКИ, ИмяОбъекта) Экспорт
	
	ГруппаВидаКИ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидКИ, "Родитель");
	ИмяВидаКИ = ОбщегоНазначения.ИмяПредопределенного(ГруппаВидаКИ);
	Поз = Найти(ИмяВидаКИ, ИмяОбъекта);
	
	Возврат Сред(ИмяВидаКИ, Поз + СтрДлина(ИмяОбъекта));
	
КонецФункции

// Проверяет на наличие в форме заполненных строк КИ того же вида (за исключением текущей).
//
Функция ЕстьДругиеЗаполненныеСтрокКИДанногоВида(Знач Форма, Знач ПроверяемаяСтрока, Знач ВидКонтактнойИнформации)
	
	ВсеСтрокиЭтогоВида = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(
		Новый Структура("Вид", ВидКонтактнойИнформации)
	);
	
	Для Каждого СтрокаВида Из ВсеСтрокиЭтогоВида Цикл
		
		Если СтрокаВида <> ПроверяемаяСтрока Тогда
			Представление = Форма[СтрокаВида.ИмяРеквизита];
			Если Не ПустаяСтрока(Представление) Тогда 
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

Процедура ВывестиСообщениеПользователю(ТекстСообщения, ИмяРеквизита, ПолеРеквизита)
	
	ИмяРеквизита = ?(ПустаяСтрока(ПолеРеквизита), ИмяРеквизита, "");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,ПолеРеквизита, ИмяРеквизита);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Заполнение дополнительных реквизитов табличной части "Контактная информация".

// Заполняет дополнительные реквизиты табличной части "Контактная информация" для адреса.
//
// Параметры:
//    СтрокаТабличнойЧасти - СтрокаТабличнойЧасти - заполняемая строка табличной части "Контактная информация".
//    Источник             - ОбъектXDTO  - контактная информация.
//
Процедура ЗаполнитьРеквизитыТабличнойЧастиДляАдреса(СтрокаТабличнойЧасти, Источник)
	
	// Умолчания
	СтрокаТабличнойЧасти.Страна = "";
	СтрокаТабличнойЧасти.Регион = "";
	СтрокаТабличнойЧасти.Город  = "";
	
	Адрес = Источник.Состав;
	
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСерверПовтИсп.ПространствоИмен();
	ЭтоАдрес = ТипЗнч(Адрес) = Тип("ОбъектXDTO") И Адрес.Тип() = ФабрикаXDTO.Тип(ПространствоИмен, "Адрес");
	Если ЭтоАдрес И Адрес.Состав <> Неопределено Тогда 
		СтрокаТабличнойЧасти.Страна = Адрес.Страна;
		АдресРФ = УправлениеКонтактнойИнформациейСлужебный.РоссийскийАдрес(Адрес);
		Если АдресРФ <> Неопределено Тогда
			// Российский адрес
			СтрокаТабличнойЧасти.Регион = АдресРФ.СубъектРФ;
			СтрокаТабличнойЧасти.Город  = АдресРФ.Город;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет дополнительные реквизиты табличной части "Контактная информация" для адреса электронной почты.
//
// Параметры:
//    СтрокаТабличнойЧасти - СтрокаТабличнойЧасти - заполняемая строка табличной части "Контактная информация".
//    Источник             - ОбъектXDTO  - контактная информация.
//
Процедура ЗаполнитьРеквизитыТабличнойЧастиДляАдресаЭлектроннойПочты(СтрокаТабличнойЧасти, Источник)
	
	Результат = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(СтрокаТабличнойЧасти.Представление, Ложь);
	
	Если Результат.Количество() > 0 Тогда
		СтрокаТабличнойЧасти.АдресЭП = Результат[0].Адрес;
		
		Поз = Найти(СтрокаТабличнойЧасти.АдресЭП, "@");
		Если Поз <> 0 Тогда
			СтрокаТабличнойЧасти.ДоменноеИмяСервера = Сред(СтрокаТабличнойЧасти.АдресЭП, Поз+1);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет дополнительные реквизиты табличной части "Контактная информация" для телефона и факса.
//
// Параметры:
//    СтрокаТабличнойЧасти - СтрокаТабличнойЧасти - заполняемая строка табличной части "Контактная информация".
//    Источник             - ОбъектXDTO  - контактная информация.
//
Процедура ЗаполнитьРеквизитыТабличнойЧастиДляТелефона(СтрокаТабличнойЧасти, Источник)
	
	// Умолчания
	СтрокаТабличнойЧасти.НомерТелефонаБезКодов = "";
	СтрокаТабличнойЧасти.НомерТелефона         = "";
	
	Телефон = Источник.Состав;
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСерверПовтИсп.ПространствоИмен();
	Если Телефон <> Неопределено И Телефон.Тип() = ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона") Тогда
		КодСтраны     = Телефон.КодСтраны;
		КодГорода     = Телефон.КодГорода;
		НомерТелефона = Телефон.Номер;
		
		Если Лев(КодСтраны, 1) = "+" Тогда
			КодСтраны = Сред(КодСтраны, 2);
		КонецЕсли;
		
		Поз = Найти(НомерТелефона, ",");
		Если Поз <> 0 Тогда
			НомерТелефона = Лев(НомерТелефона, Поз-1);
		КонецЕсли;
		
		Поз = Найти(НомерТелефона, Символы.ПС);
		Если Поз <> 0 Тогда
			НомерТелефона = Лев(НомерТелефона, Поз-1);
		КонецЕсли;
		
		СтрокаТабличнойЧасти.НомерТелефонаБезКодов = УбратьРазделителиВНомерТелефона(НомерТелефона);
		СтрокаТабличнойЧасти.НомерТелефона         = УбратьРазделителиВНомерТелефона(Строка(КодСтраны) + КодГорода + НомерТелефона);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет дополнительные реквизиты табличной части "Контактная информация" для телефона и факса.
//
// Параметры:
//    СтрокаТабличнойЧасти - СтрокаТабличнойЧасти - заполняемая строка табличной части "Контактная информация".
//    Источник             - ОбъектXDTO  - контактная информация.
//
Процедура ЗаполнитьРеквизитыТабличнойЧастиДляВебСтраницы(СтрокаТабличнойЧасти, Источник)
	
	// Умолчания
	СтрокаТабличнойЧасти.ДоменноеИмяСервера = "";
	
	АдресСтраницы = Источник.Состав;
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСерверПовтИсп.ПространствоИмен();
	Если АдресСтраницы <> Неопределено И АдресСтраницы.Тип() = ФабрикаXDTO.Тип(ПространствоИмен, "ВебСайт") Тогда
		АдресСтрокой = АдресСтраницы.Значение;
		
		// Удалим протокол
		АдресСервера = Прав(АдресСтрокой, СтрДлина(АдресСтрокой) - Найти(АдресСтрокой, "://") );
		Поз = Найти(АдресСервера, "/");
		// Удалим путь
		АдресСервера = ?(Поз = 0, АдресСервера, Лев(АдресСервера,  Поз-1));
		
		СтрокаТабличнойЧасти.ДоменноеИмяСервера = АдресСервера;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет контактную информацию в табличной части "Контактная информация" приемника.
//
// Параметры:
//        * Приемник    - Произвольный - Объект, в котором нужно заполнить КИ.
//        * ВидКИ       - СправочникСсылка.ВидыКонтактнойИнформации - вид контактной информации, заполняемый в
//                                                                    приемнике.
//        * СтруктураКИ - СписокЗначений, Строка, Структура - данные значений полей контактной информации.
//        * СтрокаТабличнойЧасти - СтрокаТабличнойЧасти, Неопределено - данные приемника, если контактная информация
//                                 заполняется для строки.
//                                                                      Неопределено, если контактная информация
//                                                                      заполняется для приемника.
//
Процедура ЗаполнитьКонтактнуюИнформациюТабличнойЧасти(Приемник, ВидКИ, СтруктураКИ, СтрокаТабличнойЧасти = Неопределено)
	
	ПараметрыОтбора = Новый Структура;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		ДанныеЗаполнения = Приемник;
	Иначе
		ДанныеЗаполнения = СтрокаТабличнойЧасти;
		ПараметрыОтбора.Вставить("ИдентификаторСтрокиТабличнойЧасти", СтрокаТабличнойЧасти.ИдентификаторСтрокиТабличнойЧасти);
	КонецЕсли;
	
	ПараметрыОтбора.Вставить("Вид", ВидКИ);
	НайденныеСтрокиКИ = Приемник.КонтактнаяИнформация.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтрокиКИ.Количество() = 0 Тогда
		СтрокаКИ = Приемник.КонтактнаяИнформация.Добавить();
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			СтрокаКИ.ИдентификаторСтрокиТабличнойЧасти = СтрокаТабличнойЧасти.ИдентификаторСтрокиТабличнойЧасти;
		КонецЕсли;
	Иначе
		СтрокаКИ = НайденныеСтрокиКИ[0];
	КонецЕсли;
	
	// Из любого понимаемого - в XML.
	ЗначенияПолей = КонтактнаяИнформацияВXML(СтруктураКИ, , ВидКИ);
	Представление = ПредставлениеКонтактнойИнформации(ЗначенияПолей);
	
	СтрокаКИ.Тип           = ВидКИ.Тип;
	СтрокаКИ.Вид           = ВидКИ;
	СтрокаКИ.Представление = Представление;
	СтрокаКИ.ЗначенияПолей = ЗначенияПолей;
	
	ЗаполнитьДополнительныеРеквизитыКонтактнойИнформации(СтрокаКИ, Представление, ЗначенияПолей);
КонецПроцедуры

// Проверяет контактную информацию электронной почты и сообщает об ошибках. 
//
// Параметры:
//     Источник      - ОбъектXDTO - контактная информацией.
//     ВидИнформации - СправочникСсылка.ВидыКонтактнойИнформации - вид контактной информации с настройками проверки.
//     ИмяРеквизита  - Строка - необязательно имя реквизита для привязки сообщения об ошибке.
//
// Возвращаемое значение:
//     Число - уровень ошибок: 0 - нет, 1 - неблокирующие, 2 - блокирующие.
//
Функция ОшибкиЗаполненияЭлектроннойПочты(Источник, ВидИнформации, Знач ИмяРеквизита = "", ПолеРеквизита = "")
	
	Если Не ВидИнформации.ПроверятьКорректность Тогда
		Возврат 0;
	КонецЕсли;
	
	СтрокаОшибки = "";
	
	АдресЭП = Источник.Состав;
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСерверПовтИсп.ПространствоИмен();
	Если АдресЭП <> Неопределено И АдресЭП.Тип() = ФабрикаXDTO.Тип(ПространствоИмен, "ЭлектроннаяПочта") Тогда
		Попытка
			Результат = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(АдресЭП.Значение);
			Если Результат.Количество() > 1 Тогда
				
				СтрокаОшибки = Нстр("ru = 'Допускается ввод только одного адреса электронной почты'");
				
			КонецЕсли;
		Исключение
			СтрокаОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
	КонецЕсли;
	
	Если Не ПустаяСтрока(СтрокаОшибки) Тогда
		ВывестиСообщениеПользователю(СтрокаОшибки, ИмяРеквизита, ПолеРеквизита);
		УровеньОшибки = ?(ВидИнформации.ЗапрещатьВводНекорректного, 2, 1);
	Иначе
		УровеньОшибки = 0;
	КонецЕсли;
	
	Возврат УровеньОшибки;
	
КонецФункции

// Заполняет дополнительные реквизиты строки табличной части "Контактная информация".
//
// Параметры:
//    СтрокаКИ      - СтрокаТабличнойЧасти - строка "Контактная информация".
//    Представление - Строка                     - представление значения.
//    ЗначенияПолей - СписокЗначений, ОбъектXTDO - значения полей.
//
Процедура ЗаполнитьДополнительныеРеквизитыКонтактнойИнформации(СтрокаКИ, Представление, ЗначенияПолей)
	
	Если ТипЗнч(ЗначенияПолей) = Тип("ОбъектXDTO") Тогда
		ОбъектКИ = ЗначенияПолей;
	Иначе
		ОбъектКИ = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(ЗначенияПолей, СтрокаКИ.Вид);
	КонецЕсли;
	
	ТипИнформации = СтрокаКИ.Тип;

	Если ТипИнформации = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		ЗаполнитьРеквизитыТабличнойЧастиДляАдресаЭлектроннойПочты(СтрокаКИ, ОбъектКИ);
		
	ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		ЗаполнитьРеквизитыТабличнойЧастиДляАдреса(СтрокаКИ, ОбъектКИ);
		
	ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		ЗаполнитьРеквизитыТабличнойЧастиДляТелефона(СтрокаКИ, ОбъектКИ);
		
	ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		ЗаполнитьРеквизитыТабличнойЧастиДляТелефона(СтрокаКИ, ОбъектКИ);
		
	ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
		ЗаполнитьРеквизитыТабличнойЧастиДляВебСтраницы(СтрокаКИ, ОбъектКИ);
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет контактную информацию и записывает ее в таблицу значений.
//
Функция ПроверитьКонтактнуюИнформацию(Представление, ЗначенияПолей, ВидИнформации, ТипИнформации,
	ИмяРеквизита, Комментарий = Неопределено, ПутьКРеквизиту = "")
	
	ТекстСериализации = ?(ПустаяСтрока(ЗначенияПолей), Представление, ЗначенияПолей);
	
	ОбъектКИ = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(ТекстСериализации, ВидИнформации);
	Если Комментарий <> Неопределено Тогда
		ОбъектКИ.Комментарий = Комментарий;
	КонецЕсли;
	ОбъектКИ.Представление = Представление;
	
	ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(ОбъектКИ);
	
	Если ПустаяСтрока(Представление) И ПустаяСтрока(ОбъектКИ.Комментарий) Тогда
		Возврат 0;
	КонецЕсли;
	
	// Проверка
	Если ТипИнформации = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		УровеньОшибок = ОшибкиЗаполненияЭлектроннойПочты(ОбъектКИ, ВидИнформации, ИмяРеквизита, ПутьКРеквизиту);
	ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		УровеньОшибок = ОшибкиЗаполненияАдреса(ОбъектКИ.Состав, ВидИнформации, ИмяРеквизита);
	ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		УровеньОшибок = ОшибкиЗаполненияТелефона(ОбъектКИ, ВидИнформации, ИмяРеквизита);
	ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		УровеньОшибок = ОшибкиЗаполненияТелефона(ОбъектКИ, ВидИнформации, ИмяРеквизита);
	ИначеЕсли ТипИнформации = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
		УровеньОшибок = ОшибкиЗаполненияВебСтраницы(ОбъектКИ, ВидИнформации, ИмяРеквизита);
	Иначе
		// Другое (прочее) не проверяем.
		УровеньОшибок = 0;
	КонецЕсли;
	
	Возврат УровеньОшибок;
	
КонецФункции

// Проверяет контактную информацию адреса и сообщает об ошибках. Возвращает флаг наличия ошибок.
//
// Параметры:
//     Источник      - ОбъектXDTO - контактная информацией.
//     ВидИнформации - СправочникСсылка.ВидыКонтактнойИнформации - вид контактной информации с настройками проверки.
//     ИмяРеквизита  - Строка - необязательно имя реквизита для привязки сообщения об ошибке.
//
// Возвращаемое значение:
//     Число - уровень ошибок: 0 - нет, 1 - неблокирующие, 2 - блокирующие.
//
Функция ОшибкиЗаполненияАдреса(Источник, ВидИнформации, ИмяРеквизита = "", ПолеРеквизита = "") Экспорт
	
	Если Не ВидИнформации.ПроверятьКорректность Тогда
		Возврат 0;
	КонецЕсли;
	ЕстьОшибки = Ложь;
	
	Если НЕ УправлениеКонтактнойИнформациейСлужебный.ЭтоРоссийскийАдрес(Источник) Тогда
		Возврат 0;
	КонецЕсли;
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСерверПовтИсп.ПространствоИмен();
	
	Если Источник <> Неопределено И Источник.Тип() = ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
		Адрес = Источник;
	Иначе
		Адрес = Источник.Состав;
	КонецЕсли;
	
	Если Адрес <> Неопределено И Адрес.Тип() = ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
		СписокОшибок = УправлениеКонтактнойИнформациейСлужебный.ОшибкиЗаполненияАдресаXDTO(Адрес, ВидИнформации);
		Для Каждого Элемент Из СписокОшибок Цикл
			ВывестиСообщениеПользователю(Элемент.Представление, ИмяРеквизита, ПолеРеквизита);
			ЕстьОшибки = Истина;
		КонецЦикла;
	КонецЕсли;
	
	Если ЕстьОшибки И ВидИнформации.ЗапрещатьВводНекорректного Тогда
		Возврат 2;
	ИначеЕсли ЕстьОшибки Тогда
		Возврат 1;
	КонецЕсли;
	
	Возврат 0;
КонецФункции

// Проверяет контактную информацию телефона и сообщает об ошибках. Возвращает флаг наличия ошибок.
//
// Параметры:
//     Источник      - ОбъектXDTO - контактная информацией.
//     ВидИнформации - СправочникСсылка.ВидыКонтактнойИнформации - вид контактной информации с настройками проверки.
//     ИмяРеквизита  - Строка - необязательно имя реквизита для привязки сообщения об ошибке.
//
// Возвращаемое значение:
//     Число - уровень ошибок: 0 - нет, 1 - неблокирующие, 2 - блокирующие.
//
Функция ОшибкиЗаполненияТелефона(Источник, ВидИнформации, ИмяРеквизита = "")
	Возврат 0;
КонецФункции

// Проверяет контактную информацию веб страницы и сообщает об ошибках. Возвращает флаг наличия ошибок.
//
// Параметры:
//     Источник      - ОбъектXDTO - контактная информацией.
//     ВидИнформации - СправочникСсылка.ВидыКонтактнойИнформации - вид контактной информации с настройками проверки.
//     ИмяРеквизита  - Строка - необязательно имя реквизита для привязки сообщения об ошибке.
//
// Возвращаемое значение:
//     Число - уровень ошибок: 0 - нет, 1 - неблокирующие, 2 - блокирующие.
//
Функция ОшибкиЗаполненияВебСтраницы(Источник, ВидИнформации, ИмяРеквизита = "")
	Возврат 0;
КонецФункции

Процедура ОбработкаЗаполненияКонтактнойИнформацииОбъекта(Объект, Знач ДанныеЗаполнения)
	
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	// Наименование, если есть в объекте-приемнике.
	Наименование = Неопределено;
	Если ДанныеЗаполнения.Свойство("Наименование", Наименование) 
		И ЕстьРеквизитОбъекта("Наименование", Объект) 
	Тогда
		Объект.Наименование = Наименование;
	КонецЕсли;
	
	// Таблица контактной информации, заполняется только если КИ не находится в другой ТЧ.
	КонтактнаяИнформация = Неопределено;
	Если ДанныеЗаполнения.Свойство("КонтактнаяИнформация", КонтактнаяИнформация) 
		И ЕстьРеквизитОбъекта("КонтактнаяИнформация", Объект) 
	Тогда
	
		Если ТипЗнч(КонтактнаяИнформация) = Тип("ТаблицаЗначений") Тогда
			КолонкиТаблицы = КонтактнаяИнформация.Колонки;
		Иначе
			КолонкиТаблицы = КонтактнаяИнформация.ВыгрузитьКолонки().Колонки;
		КонецЕсли;
		
		Если КолонкиТаблицы.Найти("ИдентификаторСтрокиТабличнойЧасти") = Неопределено Тогда
			
			Для Каждого СтрокаКИ Из КонтактнаяИнформация Цикл
				НоваяСтрокаКИ = Объект.КонтактнаяИнформация.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаКИ, СтрокаКИ, , "ЗначенияПолей");
				НоваяСтрокаКИ.ЗначенияПолей = КонтактнаяИнформацияВXML(СтрокаКИ.ЗначенияПолей, СтрокаКИ.Представление, СтрокаКИ.Вид);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет, есть ли у объекта реквизит с заданным именем.
//
// Параметры:
//     ИмяРеквизита - Строка       - Имя реквизита, наличие которого проверяется.
//     Объект       - Произвольный - Проверяемый объект.
//
// Возвращаемое значение:
//     Булево - результат проверки.
//
Функция ЕстьРеквизитОбъекта(Знач ИмяРеквизита, Знач Объект)
	ПроверкаРеквизита = Новый Структура(ИмяРеквизита, Неопределено);
	ЗаполнитьЗначенияСвойств(ПроверкаРеквизита, Объект);
	Если ПроверкаРеквизита[ИмяРеквизита] <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПроверкаРеквизита[ИмяРеквизита] = "";
	ЗаполнитьЗначенияСвойств(ПроверкаРеквизита, Объект);
	Возврат ПроверкаРеквизита.Наименование = Неопределено;
КонецФункции

#КонецОбласти
