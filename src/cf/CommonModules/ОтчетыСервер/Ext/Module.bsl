////////////////////////////////////////////////////////////////////////////////
// Методы работы с СКД из формы отчета (сервер).
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Анализ

Функция РасширеннаяИнформацияОНастройках(КомпоновщикНастроекКД, Форма, УсловияВывода = Неопределено) Экспорт
	Если Форма = Неопределено Тогда
		НастройкиОтчета = ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию();
	Иначе
		НастройкиОтчета = Форма.НастройкиОтчета;
	КонецЕсли;
	
	НастройкиКД = КомпоновщикНастроекКД.Настройки;
	ПользовательскиеНастройкиКД = КомпоновщикНастроекКД.ПользовательскиеНастройки;
	
	ДополнительныеНастройкиЭлементов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПользовательскиеНастройкиКД.ДополнительныеСвойства, "ЭлементыФормы");
	Если ДополнительныеНастройкиЭлементов = Неопределено Тогда
		ДополнительныеНастройкиЭлементов = Новый Соответствие;
	КонецЕсли;
	
	Информация = Новый Структура;
	Информация.Вставить("ТолькоПользовательские", Ложь);
	Информация.Вставить("ТолькоБыстрые", Ложь);
	Информация.Вставить("ИдентификаторТекущегоУзлаКД", Неопределено);
	Если УсловияВывода <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Информация, УсловияВывода);
	КонецЕсли;
	
	Информация.Вставить("НастройкиКД", НастройкиКД);
	
	Информация.Вставить("НастройкиОтчета",           НастройкиОтчета);
	Информация.Вставить("ДеревоВарианта",            ДеревоВарианта());
	Информация.Вставить("НастройкиВарианта",         ТаблицаНастроекВарианта());
	Информация.Вставить("ПользовательскиеНастройки", ТаблицаПользовательскихНастроек());
	
	Информация.Вставить("ОтключаемыеСвязи", Новый Массив);
	Информация.Вставить("Связи", Новый Структура);
	Информация.Связи.Вставить("ПоТипу",             ТаблицаСвязейПоТипу());
	Информация.Связи.Вставить("ПараметровВыбора",   ТаблицаСвязейПараметровВыбора());
	Информация.Связи.Вставить("ОбъектовМетаданных", ТаблицаСвязейОбъектовМетаданных(НастройкиОтчета));
	
	Информация.Вставить("ДополнительныеНастройкиЭлементов",   ДополнительныеНастройкиЭлементов);
	Информация.Вставить("СоответствиеИменОбъектовМетаданных", Новый Соответствие);
	Информация.Вставить("Поиск", Новый Структура);
	Информация.Поиск.Вставить("НастройкиВариантаПоПолюКД", Новый Соответствие);
	Информация.Поиск.Вставить("ПользовательскиеНастройки", Новый Соответствие);
	Информация.Вставить("ЕстьБыстрыеНастройки", Ложь);
	Информация.Вставить("ЕстьОбычныеНастройки", Ложь);
	
	Для Каждого ПользовательскаяНастройкаКД Из ПользовательскиеНастройкиКД.Элементы Цикл
		СвойстваНастройки = Информация.ПользовательскиеНастройки.Добавить();
		СвойстваНастройки.ПользовательскаяНастройкаКД = ПользовательскаяНастройкаКД;
		СвойстваНастройки.Идентификатор               = ПользовательскаяНастройкаКД.ИдентификаторПользовательскойНастройки;
		СвойстваНастройки.ИндексВКоллекции = ПользовательскиеНастройкиКД.Элементы.Индекс(ПользовательскаяНастройкаКД);
		СвойстваНастройки.ИдентификаторКД  = ПользовательскиеНастройкиКД.ПолучитьИдентификаторПоОбъекту(ПользовательскаяНастройкаКД);
		СвойстваНастройки.Тип              = ОтчетыКлиентСервер.ТипНастройкиСтрокой(ТипЗнч(ПользовательскаяНастройкаКД));
		Информация.Поиск.ПользовательскиеНастройки.Вставить(СвойстваНастройки.Идентификатор, СвойстваНастройки);
	КонецЦикла;
	
	СтрокаДерева = ДеревоВариантаЗарегистрироватьУзел(Информация, НастройкиКД, НастройкиКД, Информация.ДеревоВарианта.Строки);
	СтрокаДерева.Глобальная = Истина;
	Информация.Вставить("ДеревоВариантаКорневаяСтрока", СтрокаДерева);
	Если Информация.ИдентификаторТекущегоУзлаКД = Неопределено Тогда
		Информация.ИдентификаторТекущегоУзлаКД = СтрокаДерева.ИдентификаторКД;
		Если Не Информация.ТолькоПользовательские Тогда
			СтрокаДерева.ВыводРазрешен = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ЗарегистрироватьНастройкиВарианта(НастройкиКД, Информация);
	
	ЗарегистрироватьСвязиОтВедущих(Информация);
	
	Возврат Информация;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Дерево варианта

Функция ДеревоВарианта()
	Результат = Новый ДеревоЗначений;
	
	// Узлы СКД.
	Результат.Колонки.Добавить("УзелКД");
	Результат.Колонки.Добавить("ПользовательскаяНастройкаКД");
	
	// Прикладная структура.
	Результат.Колонки.Добавить("ПользовательскаяНастройка");
	
	// Поиск этой настройки в узле.
	Результат.Колонки.Добавить("ИдентификаторКД");
	
	// Связь с узлами СКД.
	Результат.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	
	// Описание настройки.
	Результат.Колонки.Добавить("Тип", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Подтип", Новый ОписаниеТипов("Строка"));
	
	Результат.Колонки.Добавить("ЕстьСтруктура", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ЕстьПоляИОформление", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("Глобальная", Новый ОписаниеТипов("Булево"));
	
	// Вывод.
	Результат.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Заголовок", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ВыводРазрешен", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ВыводитьТолькоФлажок", Новый ОписаниеТипов("Булево"));
	
	Возврат Результат;
КонецФункции

Функция ДеревоВариантаЗарегистрироватьУзел(Информация, НастройкиКД, УзелКД, НаборСтрокДерева, Подтип = "")
	СтрокаДерева = НаборСтрокДерева.Добавить();
	СтрокаДерева.УзелКД = УзелКД;
	СтрокаДерева.Тип = ОтчетыКлиентСервер.ТипНастройкиСтрокой(ТипЗнч(УзелКД));
	СтрокаДерева.Подтип = Подтип;
	Если СтрокаДерева.Тип <> "Настройки" Тогда
		СтрокаДерева.Идентификатор = УзелКД.ИдентификаторПользовательскойНастройки;
	КонецЕсли;
	
	СтрокаДерева.ИдентификаторКД = НастройкиКД.ПолучитьИдентификаторПоОбъекту(УзелКД);
	
	Если СтрокаДерева.Тип = "Настройки" Тогда
		СтрокаДерева.ЕстьСтруктура = Истина;
		СтрокаДерева.ЕстьПоляИОформление = Истина;
	ИначеЕсли СтрокаДерева.Тип = "Группировка"
		Или СтрокаДерева.Тип = "ГруппировкаДиаграммы"
		Или СтрокаДерева.Тип = "ГруппировкаТаблицы" Тогда
		СтрокаДерева.ЕстьСтруктура = Истина;
		СтрокаДерева.ЕстьПоляИОформление = Истина;
	ИначеЕсли СтрокаДерева.Тип = "Таблица" Тогда
		СтрокаДерева.ЕстьПоляИОформление = Истина;
	ИначеЕсли СтрокаДерева.Тип = "Диаграмма" Тогда
		СтрокаДерева.ЕстьПоляИОформление = Истина;
	ИначеЕсли СтрокаДерева.Тип = "КоллекцияЭлементовСтруктурыТаблицы"
		Или СтрокаДерева.Тип = "КоллекцияЭлементовСтруктурыДиаграммы"
		Или СтрокаДерева.Тип = "НастройкиВложенногоОбъекта" Тогда
		// см. далее.
	Иначе
		Возврат СтрокаДерева;
	КонецЕсли;
	
	ЗаполнитьПредставлениеНастройки(СтрокаДерева, Ложь);
	
	Если СтрокаДерева.ЕстьПоляИОформление Тогда
		СтрокаДерева.Заголовок = ЗаголовокИзПараметровВывода(УзелКД.ПараметрыВывода);
	КонецЕсли;
	
	Если Не Информация.ТолькоПользовательские Тогда
		СтрокаДерева.ВыводРазрешен = (СтрокаДерева.ИдентификаторКД = Информация.ИдентификаторТекущегоУзлаКД);
	КонецЕсли;
	
	Если ТипЗнч(СтрокаДерева.Идентификатор) = Тип("Строка") И Не ПустаяСтрока(СтрокаДерева.Идентификатор) Тогда
		СвойстваНастройки = Информация.Поиск.ПользовательскиеНастройки.Получить(СтрокаДерева.Идентификатор);
		Если СвойстваНастройки <> Неопределено Тогда
			СтрокаДерева.ПользовательскаяНастройка   = СвойстваНастройки;
			СтрокаДерева.ПользовательскаяНастройкаКД = СвойстваНастройки.ПользовательскаяНастройкаКД;
			ЗарегистрироватьПользовательскуюНастройку(Информация, СвойстваНастройки, СтрокаДерева, Неопределено);
			Если Информация.ТолькоПользовательские Тогда
				СтрокаДерева.ВыводРазрешен = СвойстваНастройки.ВыводРазрешен;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаДерева.ЕстьСтруктура Тогда
		Для Каждого ВложенныйЭлемент Из УзелКД.Структура Цикл
			ДеревоВариантаЗарегистрироватьУзел(Информация, НастройкиКД, ВложенныйЭлемент, СтрокаДерева.Строки);
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокаДерева.Тип = "Таблица" Тогда
		ДеревоВариантаЗарегистрироватьУзел(Информация, НастройкиКД, УзелКД.Строки, СтрокаДерева.Строки, "ТаблицаСтроки");
		ДеревоВариантаЗарегистрироватьУзел(Информация, НастройкиКД, УзелКД.Колонки, СтрокаДерева.Строки, "ТаблицаКолонки");
	ИначеЕсли СтрокаДерева.Тип = "Диаграмма" Тогда
		ДеревоВариантаЗарегистрироватьУзел(Информация, НастройкиКД, УзелКД.Точки, СтрокаДерева.Строки, "ДиаграммаТочки");
		ДеревоВариантаЗарегистрироватьУзел(Информация, НастройкиКД, УзелКД.Серии, СтрокаДерева.Строки, "ДиаграммаСерии");
	ИначеЕсли СтрокаДерева.Тип = "КоллекцияЭлементовСтруктурыТаблицы"
		Или СтрокаДерева.Тип = "КоллекцияЭлементовСтруктурыДиаграммы" Тогда
		Для Каждого ВложенныйЭлемент Из УзелКД Цикл
			ДеревоВариантаЗарегистрироватьУзел(Информация, НастройкиКД, ВложенныйЭлемент, СтрокаДерева.Строки);
		КонецЦикла;
	ИначеЕсли СтрокаДерева.Тип = "НастройкиВложенногоОбъекта" Тогда
		ДеревоВариантаЗарегистрироватьУзел(Информация, НастройкиКД, УзелКД.Настройки, СтрокаДерева.Строки);
	КонецЕсли;
	
	Возврат СтрокаДерева;
КонецФункции

Функция ЗаголовокИзПараметровВывода(ПараметрыВывода)
	ВыводитьЗаголовокКД = ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВыводитьЗаголовок"));
	Если ВыводитьЗаголовокКД = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	Если ВыводитьЗаголовокКД.Использование = Истина
		И ВыводитьЗаголовокКД.Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить Тогда
		Возврат "";
	КонецЕсли;
	// В значении Авто считается что заголовок выводится.
	// Когда параметр ВыводитьЗаголовок отключен это эквивалент значения Авто.
	ЗаголовокКД = ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Заголовок"));
	Если ЗаголовокКД = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	Возврат ЗаголовокКД.Значение;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Настройки варианта

Функция ТаблицаНастроекВарианта()
	Результат = Новый ДеревоЗначений;
	
	// Узлы СКД.
	Результат.Колонки.Добавить("ЭлементКД");
	Результат.Колонки.Добавить("ДоступнаяНастройкаКД");
	Результат.Колонки.Добавить("ПользовательскаяНастройкаКД");
	
	// Прикладная структура.
	Результат.Колонки.Добавить("СтрокаДерева");
	Результат.Колонки.Добавить("ПользовательскаяНастройка");
	Результат.Колонки.Добавить("Владелец");
	Результат.Колонки.Добавить("Глобальная", Новый ОписаниеТипов("Булево"));
	
	// Поиск этой настройки в узле.
	Результат.Колонки.Добавить("ИмяКоллекции", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ИдентификаторКД");
	
	// Связь с узлами СКД.
	Результат.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ИдентификаторЭлемента", Новый ОписаниеТипов("Строка"));
	
	// Описание настройки.
	Результат.Колонки.Добавить("Тип", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Подтип", Новый ОписаниеТипов("Строка"));
	
	Результат.Колонки.Добавить("ПолеКД");
	Результат.Колонки.Добавить("Значение");
	Результат.Колонки.Добавить("ВидСравнения");
	Результат.Колонки.Добавить("ВводСписком", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ИнформацияОТипах");
	
	Результат.Колонки.Добавить("ОтмеченныеЗначения");
	Результат.Колонки.Добавить("ПараметрыВыбора");
	
	Результат.Колонки.Добавить("СвязьПоТипу");
	Результат.Колонки.Добавить("СвязиПараметровВыбора");
	Результат.Колонки.Добавить("СвязиПоМетаданным");
	Результат.Колонки.Добавить("ОграничениеТипа");
	
	// API
	Результат.Колонки.Добавить("ОписаниеТипов");
	Результат.Колонки.Добавить("ЗначенияДляВыбора");
	Результат.Колонки.Добавить("ЗапросЗначенийВыбора");
	Результат.Колонки.Добавить("ОграничиватьВыборУказаннымиЗначениями", Новый ОписаниеТипов("Булево"));
	
	// Вывод.
	Результат.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ВыводРазрешен", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ВыводитьФлажок", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ВыборГруппИЭлементов");
	
	Возврат Результат;
КонецФункции

Функция ТаблицаПользовательскихНастроек()
	Результат = Новый ТаблицаЗначений;
	
	// Узлы СКД.
	Результат.Колонки.Добавить("УзелКД");
	Результат.Колонки.Добавить("НастройкаВариантаКД");
	Результат.Колонки.Добавить("ПользовательскаяНастройкаКД");
	Результат.Колонки.Добавить("ДоступнаяНастройкаКД");
	
	// Прикладная структура.
	Результат.Колонки.Добавить("СтрокаДерева");
	Результат.Колонки.Добавить("НастройкаВарианта");
	
	// Поиск этой настройки в узле.
	Результат.Колонки.Добавить("ИдентификаторКД");
	Результат.Колонки.Добавить("ИндексВКоллекции", Новый ОписаниеТипов("Число"));
	
	// Связь с узлами СКД.
	Результат.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ИдентификаторЭлемента", Новый ОписаниеТипов("Строка"));
	
	// Описание настройки.
	Результат.Колонки.Добавить("Тип", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Подтип", Новый ОписаниеТипов("Строка"));
	
	Результат.Колонки.Добавить("ПолеКД");
	Результат.Колонки.Добавить("Значение");
	Результат.Колонки.Добавить("ВидСравнения");
	Результат.Колонки.Добавить("ВводСписком", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ИнформацияОТипах");
	
	Результат.Колонки.Добавить("ОтмеченныеЗначения");
	Результат.Колонки.Добавить("ПараметрыВыбора");
	
	// API
	Результат.Колонки.Добавить("ОписаниеТипов");
	Результат.Колонки.Добавить("ЗначенияДляВыбора");
	Результат.Колонки.Добавить("ЗапросЗначенийВыбора");
	Результат.Колонки.Добавить("ОграничиватьВыборУказаннымиЗначениями", Новый ОписаниеТипов("Булево"));
	
	// Вывод.
	Результат.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Быстрая", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("Обычная", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ВыводРазрешен", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ВыводитьФлажок", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ВыводитьТолькоФлажок", Новый ОписаниеТипов("Булево"));
	
	Результат.Колонки.Добавить("ТипЭлементов", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ВыборГруппИЭлементов");
	
	// Дополнительные свойства.
	Результат.Колонки.Добавить("Дополнительно", Новый ОписаниеТипов("Структура"));
	
	Возврат Результат;
КонецФункции

Функция ТаблицаСвязейПоТипу()
	// Связи из СКД.
	ТаблицаСвязейПоТипу = Новый ТаблицаЗначений;
	ТаблицаСвязейПоТипу.Колонки.Добавить("Ведущий");
	ТаблицаСвязейПоТипу.Колонки.Добавить("ВедущийПолеКД");
	ТаблицаСвязейПоТипу.Колонки.Добавить("Подчиненный");
	ТаблицаСвязейПоТипу.Колонки.Добавить("ПодчиненныйИмяПараметра");
	
	Возврат ТаблицаСвязейПоТипу;
КонецФункции

Функция ТаблицаСвязейПараметровВыбора()
	ТаблицаСвязейПараметровВыбора = Новый ТаблицаЗначений;
	ТаблицаСвязейПараметровВыбора.Колонки.Добавить("Ведущий");
	ТаблицаСвязейПараметровВыбора.Колонки.Добавить("ВедущийПолеКД");
	ТаблицаСвязейПараметровВыбора.Колонки.Добавить("Подчиненный");
	ТаблицаСвязейПараметровВыбора.Колонки.Добавить("ПодчиненныйИмяПараметра");
	ТаблицаСвязейПараметровВыбора.Колонки.Добавить("Действие");
	
	Возврат ТаблицаСвязейПараметровВыбора;
КонецФункции

Функция ТаблицаСвязейОбъектовМетаданных(НастройкиОтчета)
	// Связи из метаданных.
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ВедущийТип",          Новый ОписаниеТипов("Тип"));
	Результат.Колонки.Добавить("ПодчиненныйТип",      Новый ОписаниеТипов("Тип"));
	Результат.Колонки.Добавить("ПодчиненныйРеквизит", Новый ОписаниеТипов("Строка"));
	
	// Механизмы расширения.
	ОтчетыПереопределяемый.ДополнитьСвязиОбъектовМетаданных(Результат); // Глобальные связи...
	Если НастройкиОтчета.События.ДополнитьСвязиОбъектовМетаданных Тогда // ... можно переопределить локально для отчета.
		ОтчетОбъект = ОтчетОбъект(НастройкиОтчета);
		ОтчетОбъект.ДополнитьСвязиОбъектовМетаданных(Результат);
	КонецЕсли;
	
	Результат.Колонки.Добавить("ЕстьВедущие",     Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ЕстьПодчиненные", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("Ведущие",     Новый ОписаниеТипов("Массив"));
	Результат.Колонки.Добавить("Подчиненные", Новый ОписаниеТипов("Массив"));
	Результат.Колонки.Добавить("ВедущийПолноеИмя",     Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ПодчиненныйПолноеИмя", Новый ОписаниеТипов("Строка"));
	
	Возврат Результат;
КонецФункции

Процедура ЗарегистрироватьНастройкиВарианта(НастройкиКД, Информация)
	ДеревоВарианта = Информация.ДеревоВарианта;
	НастройкиВарианта = Информация.НастройкиВарианта;
	
	Найденные = ДеревоВарианта.Строки.НайтиСтроки(Новый Структура("ЕстьСтруктура", Истина), Истина);
	Для Каждого СтрокаДерева Из Найденные Цикл
		
		// Настройки, свойство Отбор
		// Группировка, свойство Отбор
		// ГруппировкаТаблицы, свойство Отбор.
		// ГруппировкаДиаграммы, свойство Отбор.
		
		// Настройки, свойство Отбор.Элементы.
		// Группировка, свойство Отбор.Элементы
		// ГруппировкаТаблицы, свойство Отбор.Элементы
		// ГруппировкаДиаграммы, свойство Отбор.Элементы.
		
		ЗарегистрироватьУзелНастроек(НастройкиКД, Информация, СтрокаДерева, "Отбор");
		
		// Настройки, свойство Порядок.
		// Группировка, свойство Порядок
		// ГруппировкаТаблицы, свойство Порядок.
		// ГруппировкаДиаграммы, свойство Порядок.
		
		ЗарегистрироватьУзелНастроек(НастройкиКД, Информация, СтрокаДерева, "Порядок");
		
		// Настройки, свойство Структура.
		// Группировка, свойство Структура.
		// ГруппировкаТаблицы, свойство Структура.
		// ГруппировкаДиаграммы, свойство Структура.
		
		ЗарегистрироватьУзелНастроек(НастройкиКД, Информация, СтрокаДерева, "Структура");
		
	КонецЦикла;
	
	Найденные = ДеревоВарианта.Строки.НайтиСтроки(Новый Структура("ЕстьПоляИОформление", Истина), Истина);
	Для Каждого СтрокаДерева Из Найденные Цикл
		
		// Настройки, свойство Выбор
		// Таблица, свойство Выбор
		// Диаграмма, свойство Выбор
		// Группировка, свойство Выбор
		// ГруппировкаДиаграммы, свойство Выбор.
		// ГруппировкаТаблицы, свойство Выбор.
		
		ЗарегистрироватьУзелНастроек(НастройкиКД, Информация, СтрокаДерева, "Выбор");
		
		// Настройки, свойство УсловноеОформление.
		// Таблица, свойство УсловноеОформление.
		// Диаграмма, свойство УсловноеОформление.
		// Группировка, свойство УсловноеОформление.
		// ГруппировкаДиаграммы, свойство УсловноеОформление.
		// ГруппировкаТаблицы, свойство УсловноеОформление.
		
		// Настройки, свойство УсловноеОформление.Элементы.
		// Таблица, свойство УсловноеОформление.Элементы.
		// Диаграмма, свойство УсловноеОформление.Элементы.
		// Группировка, свойство УсловноеОформление.Элементы
		// ГруппировкаДиаграммы, свойство УсловноеОформление.Элементы
		// ГруппировкаТаблицы, свойство УсловноеОформление.Элементы.
		
		ЗарегистрироватьУзелНастроек(НастройкиКД, Информация, СтрокаДерева, "УсловноеОформление");
		
	КонецЦикла;
	
	Найденные = ДеревоВарианта.Строки.НайтиСтроки(Новый Структура("Глобальная", Истина), Истина);
	Для Каждого СтрокаДерева Из Найденные Цикл
		
		// Настройки, свойство ПараметрыДанных, метод НайтиЗначениеПараметра().
		
		ЗарегистрироватьУзелНастроек(НастройкиКД, Информация, СтрокаДерева, "ПараметрыДанных");
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьУзелНастроек(НастройкиКД, Информация, СтрокаДерева, ИмяКоллекции, НаборЭлементов = Неопределено, Родитель = Неопределено, Владелец = Неопределено)
	УзелКД = СтрокаДерева.УзелКД[ИмяКоллекции];
	
	Владелец = Информация.НастройкиВарианта.Строки.Добавить();
	Владелец.СтрокаДерева = СтрокаДерева;
	Если ИмяКоллекции <> "ПараметрыДанных" Тогда
		Владелец.Идентификатор = УзелКД.ИдентификаторПользовательскойНастройки;
	КонецЕсли;
	Владелец.Тип           = ОтчетыКлиентСервер.ТипНастройкиСтрокой(ТипЗнч(УзелКД));
	Владелец.ИмяКоллекции  = ИмяКоллекции;
	Владелец.Глобальная    = СтрокаДерева.Глобальная;
	Владелец.ЭлементКД     = УзелКД;
	Владелец.ВыводРазрешен = Не Информация.ТолькоПользовательские И СтрокаДерева.ВыводРазрешен;
	
	Если ТипЗнч(Владелец.Идентификатор) = Тип("Строка") И Не ПустаяСтрока(Владелец.Идентификатор) Тогда
		СвойстваНастройки = Информация.Поиск.ПользовательскиеНастройки.Получить(Владелец.Идентификатор);
		Если СвойстваНастройки <> Неопределено Тогда
			Владелец.ПользовательскаяНастройка = СвойстваНастройки;
			ЗарегистрироватьПользовательскуюНастройку(Информация, СвойстваНастройки, Неопределено, Владелец);
			Если Информация.ТолькоПользовательские Тогда
				Владелец.ВыводРазрешен = СвойстваНастройки.ВыводРазрешен;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяКоллекции = "Отбор"
		Или ИмяКоллекции = "ПараметрыДанных"
		Или ИмяКоллекции = "УсловноеОформление" Тогда
		ЗарегистрироватьПодчиненныеЭлементыНастроек(Информация, УзелКД, УзелКД.Элементы, Владелец, Владелец);
	КонецЕсли;
КонецПроцедуры

Процедура ЗарегистрироватьПодчиненныеЭлементыНастроек(Информация, УзелКД, НаборЭлементов, Владелец, Родитель)
	Для Каждого ЭлементКД Из НаборЭлементов Цикл
		НастройкаВарианта = Родитель.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НастройкаВарианта, Владелец, "СтрокаДерева, ИмяКоллекции, Глобальная");
		НастройкаВарианта.Идентификатор = ЭлементКД.ИдентификаторПользовательскойНастройки;
		НастройкаВарианта.Тип = ОтчетыКлиентСервер.ТипНастройкиСтрокой(ТипЗнч(ЭлементКД));
		НастройкаВарианта.ИдентификаторКД = УзелКД.ПолучитьИдентификаторПоОбъекту(ЭлементКД);
		НастройкаВарианта.Владелец = Владелец;
		НастройкаВарианта.ЭлементКД = ЭлементКД;
		НастройкаВарианта.ВыводРазрешен = Не Информация.ТолькоПользовательские И Владелец.ВыводРазрешен;
		
		Если НастройкаВарианта.Тип = "ЭлементОтбора"
			Или НастройкаВарианта.Тип = "ЗначениеПараметраНастроек" Тогда
			ЗарегистрироватьПоле(Информация, УзелКД, ЭлементКД, НастройкаВарианта);
			Если НастройкаВарианта.ДоступнаяНастройкаКД = Неопределено Тогда
				НастройкаВарианта.ВыводРазрешен = Ложь;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		СвойстваНастройки = Неопределено;
		Если ТипЗнч(НастройкаВарианта.Идентификатор) = Тип("Строка") И Не ПустаяСтрока(НастройкаВарианта.Идентификатор) Тогда
			СвойстваНастройки = Информация.Поиск.ПользовательскиеНастройки.Получить(НастройкаВарианта.Идентификатор);
		КонецЕсли;
		Если СвойстваНастройки <> Неопределено Тогда
			НастройкаВарианта.ПользовательскаяНастройка = СвойстваНастройки;
			ЗарегистрироватьПользовательскуюНастройку(Информация, СвойстваНастройки, Неопределено, НастройкаВарианта);
			Если Информация.ТолькоПользовательские Тогда
				НастройкаВарианта.ВыводРазрешен = СвойстваНастройки.ВыводРазрешен;
				НастройкаВарианта.Значение      = СвойстваНастройки.Значение;
				НастройкаВарианта.ВидСравнения  = СвойстваНастройки.ВидСравнения;
			КонецЕсли;
		КонецЕсли;
		
		Если НастройкаВарианта.Тип = "ЭлементОтбора" Тогда
			ЗарегистрироватьТипыИСвязи(Информация, УзелКД, ЭлементКД, НастройкаВарианта);
		ИначеЕсли НастройкаВарианта.Тип = "ГруппаЭлементовОтбора" Тогда
			НастройкаВарианта.Значение = ЭлементКД.ТипГруппы;
			ЗарегистрироватьПодчиненныеЭлементыНастроек(Информация, УзелКД, ЭлементКД.Элементы, Владелец, НастройкаВарианта);
		ИначеЕсли НастройкаВарианта.Тип = "ЗначениеПараметраНастроек" Тогда
			ЗарегистрироватьТипыИСвязи(Информация, УзелКД, ЭлементКД, НастройкаВарианта);
			ЗарегистрироватьПодчиненныеЭлементыНастроек(Информация, УзелКД, ЭлементКД.ЗначенияВложенныхПараметров, Владелец, НастройкаВарианта);
		КонецЕсли;
		
		Если СвойстваНастройки <> Неопределено Тогда
			СвойстваНастройки.ОписаниеТипов      = НастройкаВарианта.ОписаниеТипов;
			СвойстваНастройки.ИнформацияОТипах   = НастройкаВарианта.ИнформацияОТипах;
			СвойстваНастройки.ЗначенияДляВыбора  = НастройкаВарианта.ЗначенияДляВыбора;
			СвойстваНастройки.ПараметрыВыбора    = НастройкаВарианта.ПараметрыВыбора;
			СвойстваНастройки.ОграничиватьВыборУказаннымиЗначениями = НастройкаВарианта.ОграничиватьВыборУказаннымиЗначениями;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ЗарегистрироватьПоле(Информация, УзелКД, ЭлементКД, НастройкаВарианта)
	Если ПустаяСтрока(НастройкаВарианта.Идентификатор) Тогда
		Идентификатор = Строка(НастройкаВарианта.СтрокаДерева.ИдентификаторКД);
		Если Не ПустаяСтрока(Идентификатор) Тогда
			Идентификатор = Идентификатор + "_";
		КонецЕсли;
		НастройкаВарианта.Идентификатор = Идентификатор + НастройкаВарианта.ИмяКоллекции + "_" + Строка(НастройкаВарианта.ИдентификаторКД);
	КонецЕсли;
	НастройкаВарианта.ИдентификаторЭлемента = ОтчетыКлиентСервер.ПривестиИдентификаторКИмени(НастройкаВарианта.Идентификатор);
	
	Если НастройкаВарианта.Тип = "ЗначениеПараметраНастроек" Тогда
		ДоступныеПараметры = УзелКД.ДоступныеПараметры;
		Если ДоступныеПараметры = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ДоступнаяНастройкаКД = ДоступныеПараметры.НайтиПараметр(ЭлементКД.Параметр);
		Если ДоступнаяНастройкаКД = Неопределено Тогда
			Возврат;
		КонецЕсли;
		// БыстрыйВыбор, ВыборГруппИЭлементов, ДоступенСписокЗначений, ДоступныеЗначения, ЗапрещатьНезаполненныеЗначения,
		// Использование, Маска, СвязьПоТипу, ФормаВыбора ФорматРедактирования.
		Если Не ДоступнаяНастройкаКД.Видимость Тогда
			НастройкаВарианта.ВыводРазрешен = Ложь;
		КонецЕсли;
		НастройкаВарианта.ДоступнаяНастройкаКД = ДоступнаяНастройкаКД;
		НастройкаВарианта.ПолеКД = Новый ПолеКомпоновкиДанных("ПараметрыДанных." + Строка(ЭлементКД.Параметр));
		НастройкаВарианта.Значение = ЭлементКД.Значение;
		Если ДоступнаяНастройкаКД.ДоступенСписокЗначений Тогда
			НастройкаВарианта.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		Иначе
			НастройкаВарианта.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		КонецЕсли;
	Иначе
		ДоступныеПоляОтбора = УзелКД.ДоступныеПоляОтбора;
		Если ДоступныеПоляОтбора = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ДоступнаяНастройкаКД = ДоступныеПоляОтбора.НайтиПоле(ЭлементКД.ЛевоеЗначение);
		Если ДоступнаяНастройкаКД = Неопределено Тогда
			Возврат;
		КонецЕсли;
		НастройкаВарианта.ДоступнаяНастройкаКД = ДоступнаяНастройкаКД;
		НастройкаВарианта.ПолеКД       = ЭлементКД.ЛевоеЗначение;
		НастройкаВарианта.Значение     = ЭлементКД.ПравоеЗначение;
		НастройкаВарианта.ВидСравнения = ЭлементКД.ВидСравнения;
	КонецЕсли;
	
	Если НастройкаВарианта.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке
		Или НастройкаВарианта.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии
		Или НастройкаВарианта.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке
		Или НастройкаВарианта.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
		НастройкаВарианта.ВводСписком = Истина;
		НастройкаВарианта.ВыборГруппИЭлементов = ГруппыИЭлементы.ГруппыИЭлементы;
	ИначеЕсли НастройкаВарианта.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии
		Или НастройкаВарианта.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
		НастройкаВарианта.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
	Иначе
		НастройкаВарианта.ВыборГруппИЭлементов = ОтчетыКлиентСервер.ПривестиЗначениеКТипуГруппыИЭлементы(ДоступнаяНастройкаКД.ВыборГруппИЭлементов);
	КонецЕсли;
	
	НастройкаВарианта.ОписаниеТипов = ДоступнаяНастройкаКД.ТипЗначения;
	
	Информация.Поиск.НастройкиВариантаПоПолюКД.Вставить(НастройкаВарианта.ПолеКД, НастройкаВарианта);
	
	НастройкаВарианта.ВыводитьФлажок = Истина;
	Если (НастройкаВарианта.Тип = "ЗначениеПараметраНастроек"
			И ДоступнаяНастройкаКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда)
		Или НастройкаВарианта.Тип = "ВыбранныеПоля"
		Или НастройкаВарианта.Тип = "Порядок"
		Или НастройкаВарианта.Тип = "КоллекцияЭлементовСтруктурыТаблицы"
		Или НастройкаВарианта.Тип = "КоллекцияЭлементовСтруктурыДиаграммы"
		Или НастройкаВарианта.Тип = "Отбор"
		Или НастройкаВарианта.Тип = "УсловноеОформление"
		Или НастройкаВарианта.Тип = "СтруктураНастроек" Тогда
		НастройкаВарианта.ВыводитьФлажок = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьТипыИСвязи(Информация, УзелКД, ЭлементКД, НастройкаВарианта)
	
	///////////////////////////////////////////////////////////////////
	// Информация о типах.
	
	НастройкаВарианта.СвязиПоМетаданным     = Новый Массив;
	НастройкаВарианта.СвязиПараметровВыбора = Новый Массив;
	НастройкаВарианта.ПараметрыВыбора       = Новый Массив;
	
	Если НастройкаВарианта.ВводСписком Тогда
		НастройкаВарианта.ОтмеченныеЗначения = ОтчетыКлиентСервер.ЗначенияСписком(НастройкаВарианта.Значение);
	КонецЕсли;
	НастройкаВарианта.ЗначенияДляВыбора = Новый СписокЗначений;
	НастройкаВарианта.ЗапросЗначенийВыбора = Новый Запрос;
	
	ШаблонЗапросаПеречислений = "ВЫБРАТЬ Ссылка ИЗ &ИмяПеречисления";
	ТекстЗапросаЗначений = "";
	
	ИнформацияОТипах = ОтчетыКлиентСервер.АнализТипов(НастройкаВарианта.ОписаниеТипов, Истина);
	ИнформацияОТипах.Вставить("СодержитСсылочныеТипы", Ложь);
	ИнформацияОТипах.Вставить("КоличествоПеречислений",         0);
	ИнформацияОТипах.Вставить("КоличествоПрочихСсылочныхТипов", 0);
	ИнформацияОТипах.Вставить("Перечисления",        Новый Массив);
	ИнформацияОТипах.Вставить("ПрочиеСсылочныеТипы", Новый Массив);
	Для Каждого Тип Из ИнформацияОТипах.ОбъектныеТипы Цикл
		ПолноеИмя = Информация.СоответствиеИменОбъектовМетаданных.Получить(Тип);
		Если ПолноеИмя = Неопределено Тогда // Регистрация имени объекта метаданных.
			ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
			Если ОбъектМетаданных = Неопределено Тогда
				ПолноеИмя = -1;
			Иначе
				ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
			КонецЕсли;
			Информация.СоответствиеИменОбъектовМетаданных.Вставить(Тип, ПолноеИмя);
		КонецЕсли;
		Если ПолноеИмя = -1 Тогда
			Продолжить;
		КонецЕсли;
		
		ИнформацияОТипах.СодержитСсылочныеТипы = Истина;
		
		Если ВРег(Лев(ПолноеИмя, 13)) = "ПЕРЕЧИСЛЕНИЕ." Тогда
			ИнформацияОТипах.Перечисления.Добавить(ПолноеИмя);
			ИнформацияОТипах.КоличествоПеречислений = ИнформацияОТипах.КоличествоПеречислений + 1;
			Если ТекстЗапросаЗначений <> "" Тогда
				ТекстЗапросаЗначений = ТекстЗапросаЗначений + Символы.ПС + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС;
			КонецЕсли;
			ТекстЗапросаЗначений = ТекстЗапросаЗначений + СтрЗаменить(ШаблонЗапросаПеречислений, "&ИмяПеречисления", ПолноеИмя);
		Иначе
			ИнформацияОТипах.ПрочиеСсылочныеТипы.Добавить(ПолноеИмя);
			ИнформацияОТипах.КоличествоПрочихСсылочныхТипов = ИнформацияОТипах.КоличествоПрочихСсылочныхТипов + 1;
		КонецЕсли;
		
		// Поиск типа в глобальных связях среди подчиненных.
		Найденные = Информация.Связи.ОбъектовМетаданных.НайтиСтроки(Новый Структура("ПодчиненныйТип", Тип));
		Для Каждого СвязьПоМетаданным Из Найденные Цикл // Регистрация настройки как подчиненной.
			СвязьПоМетаданным.ЕстьПодчиненные = Истина;
			СвязьПоМетаданным.Подчиненные.Добавить(НастройкаВарианта);
		КонецЦикла;
		
		// Поиск типа в глобальных связях среди ведущих.
		Если НастройкаВарианта.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
			// Поле может быть ведущим если имеет вид сравнения "Равно".
			Найденные = Информация.Связи.ОбъектовМетаданных.НайтиСтроки(Новый Структура("ВедущийТип", Тип));
			Для Каждого СвязьПоМетаданным Из Найденные Цикл // Регистрация настройки как ведущей.
				СвязьПоМетаданным.ЕстьВедущие = Истина;
				СвязьПоМетаданным.Ведущие.Добавить(НастройкаВарианта);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	НастройкаВарианта.ИнформацияОТипах = ИнформацияОТипах;
	
	///////////////////////////////////////////////////////////////////
	// Информация о связях и параметрах выбора.
	
	ДоступнаяНастройкаКД = НастройкаВарианта.ДоступнаяНастройкаКД;
	
	Если ЗначениеЗаполнено(ДоступнаяНастройкаКД.СвязьПоТипу) Тогда
		СтрокаСвязи = Информация.Связи.ПоТипу.Добавить();
		СтрокаСвязи.Подчиненный   = НастройкаВарианта;
		СтрокаСвязи.ВедущийПолеКД = ДоступнаяНастройкаКД.СвязьПоТипу.Поле;
		СтрокаСвязи.ПодчиненныйИмяПараметра = ДоступнаяНастройкаКД.СвязьПоТипу.ЭлементСвязи;
	КонецЕсли;
	
	Для Каждого СтрокаСвязи Из ДоступнаяНастройкаКД.ПолучитьСвязиПараметровВыбора() Цикл
		Если ПустаяСтрока(Строка(СтрокаСвязи.Поле)) Тогда
			Продолжить;
		КонецЕсли;
		СтрокаСвязиПараметров = Информация.Связи.ПараметровВыбора.Добавить();
		СтрокаСвязиПараметров.Подчиненный             = НастройкаВарианта;
		СтрокаСвязиПараметров.ПодчиненныйИмяПараметра = СтрокаСвязи.Имя;
		СтрокаСвязиПараметров.ВедущийПолеКД           = СтрокаСвязи.Поле;
		СтрокаСвязиПараметров.Действие                = СтрокаСвязи.ИзменениеЗначения;
	КонецЦикла;
	
	Для Каждого ПараметрВыбораКД Из ДоступнаяНастройкаКД.ПолучитьПараметрыВыбора() Цикл
		НастройкаВарианта.ПараметрыВыбора.Добавить(Новый ПараметрВыбора(ПараметрВыбораКД.Имя, ПараметрВыбораКД.Значение));
	КонецЦикла;
	
	///////////////////////////////////////////////////////////////////
	// Список значений.
	
	Если ТипЗнч(ДоступнаяНастройкаКД.ДоступныеЗначения) = Тип("СписокЗначений")
		И ДоступнаяНастройкаКД.ДоступныеЗначения.Количество() > 0 Тогда
		// Разработчик ограничил выбор списком доступных значений.
		НастройкаВарианта.ОграничиватьВыборУказаннымиЗначениями = Истина;
		Для Каждого ЭлементСписка Из ДоступнаяНастройкаКД.ДоступныеЗначения Цикл
			ЗначениеВСКД = ЭлементСписка.Значение;
			Если Не ЗначениеЗаполнено(ЭлементСписка.Представление)
				И (ЗначениеВСКД = Неопределено
					Или ЗначениеВСКД = Тип("Неопределено")
					Или ЗначениеВСКД = Новый ОписаниеТипов("Неопределено")
					Или Не ЗначениеЗаполнено(ЗначениеВСКД)) Тогда
				Продолжить; // Запрет пустых значений.
			КонецЕсли;
			Если ТипЗнч(ЗначениеВСКД) = Тип("Тип") Тогда
				МассивТипов = Новый Массив;
				МассивТипов.Добавить(ЗначениеВСКД);
				ЗначениеВФорме = Новый ОписаниеТипов(МассивТипов);
			Иначе
				ЗначениеВФорме = ЗначениеВСКД;
			КонецЕсли;
			ОтчетыКлиентСервер.ДобавитьУникальноеЗначениеВСписок(НастройкаВарианта.ЗначенияДляВыбора, ЗначениеВФорме, ЭлементСписка.Представление, Ложь);
		КонецЦикла;
	Иначе
		НастройкиСохраненныеРанее = Информация.ДополнительныеНастройкиЭлементов[НастройкаВарианта.ИдентификаторЭлемента];
		Если НастройкиСохраненныеРанее <> Неопределено
			И ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НастройкиСохраненныеРанее, "ОграничиватьВыборУказаннымиЗначениями") = Ложь Тогда
			СтарыеЗначенияДляВыбора  = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НастройкиСохраненныеРанее, "ЗначенияДляВыбора");
			СтароеОписаниеТипов      = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НастройкиСохраненныеРанее, "ОписаниеТипов");
			Если ТипЗнч(СтарыеЗначенияДляВыбора) = Тип("СписокЗначений") И ТипЗнч(СтароеОписаниеТипов) = Тип("ОписаниеТипов") Тогда
				КонтролироватьТип = Не ОписанияТиповСовпадают(НастройкаВарианта.ОписаниеТипов, СтароеОписаниеТипов);
				НастройкаВарианта.ЗначенияДляВыбора.ТипЗначения = НастройкаВарианта.ОписаниеТипов;
				ОтчетыКлиентСервер.ДополнитьСписок(НастройкаВарианта.ЗначенияДляВыбора, СтарыеЗначенияДляВыбора, КонтролироватьТип);
			КонецЕсли;
		КонецЕсли;
		
		НастройкаВарианта.ЗапросЗначенийВыбора.Текст = ТекстЗапросаЗначений;
		Если ИнформацияОТипах.КоличествоПеречислений = ИнформацияОТипах.КоличествоТипов Тогда
			НастройкаВарианта.ОграничиватьВыборУказаннымиЗначениями = Истина; // Только перечисления.
		КонецЕсли;
	КонецЕсли;
	
	// Механизмы расширения.
	// Глобальные настройки вывода типов.
	ОтчетыПереопределяемый.ПриОпределенииПараметровВыбора(Неопределено, НастройкаВарианта);
	// Локальное переопределение для отчета.
	Если Информация.НастройкиОтчета.События.ПриОпределенииПараметровВыбора Тогда
		ОтчетОбъект = ОтчетОбъект(Информация.НастройкиОтчета);
		ОтчетОбъект.ПриОпределенииПараметровВыбора(Неопределено, НастройкаВарианта);
	КонецЕсли;
	
	// Автоматическое заполнение.
	Если НастройкаВарианта.ЗапросЗначенийВыбора.Текст <> "" Тогда
		ДобавляемыеЗначения = НастройкаВарианта.ЗапросЗначенийВыбора.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
		Для Каждого ЗначениеВФорме Из ДобавляемыеЗначения Цикл
			ОтчетыКлиентСервер.ДобавитьУникальноеЗначениеВСписок(НастройкаВарианта.ЗначенияДляВыбора, ЗначениеВФорме, Неопределено, Ложь);
		КонецЦикла;
		НастройкаВарианта.ЗначенияДляВыбора.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьСвязиОтВедущих(Информация)
	Связи = Информация.Связи;
	
	// Регистрация связи параметров выбора (динамическая связь, отключаемая флажком Использование).
	Найденные = Связи.ОбъектовМетаданных.НайтиСтроки(Новый Структура("ЕстьПодчиненные, ЕстьВедущие", Истина, Истина));
	Для Каждого СвязьПоМетаданным Из Найденные Цикл
		Для Каждого Ведущий Из СвязьПоМетаданным.Ведущие Цикл
			Для Каждого Подчиненный Из СвязьПоМетаданным.Подчиненные Цикл
				Если Ведущий.ВыводРазрешен Тогда // Отключаемая связь.
					ОписаниеСвязи = Новый Структура;
					ОписаниеСвязи.Вставить("ТипСвязи",                "ПоМетаданным");
					ОписаниеСвязи.Вставить("Ведущий",                 Ведущий);
					ОписаниеСвязи.Вставить("Подчиненный",             Подчиненный);
					ОписаниеСвязи.Вставить("ВедущийТип",              СвязьПоМетаданным.ВедущийТип);
					ОписаниеСвязи.Вставить("ПодчиненныйТип",          СвязьПоМетаданным.ПодчиненныйТип);
					ОписаниеСвязи.Вставить("ПодчиненныйИмяПараметра", СвязьПоМетаданным.ПодчиненныйРеквизит);
					Информация.ОтключаемыеСвязи.Добавить(ОписаниеСвязи);
					Подчиненный.СвязиПоМетаданным.Добавить(ОписаниеСвязи);
				Иначе // Фиксированный параметр выбора.
					Подчиненный.ПараметрыВыбора.Добавить(Новый ПараметрВыбора(СвязьПоМетаданным.ПодчиненныйРеквизит, Ведущий.Значение));
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	// Связи по типу.
	Для Каждого СвязьПоТипу Из Связи.ПоТипу Цикл
		Ведущий = Информация.Поиск.НастройкиВариантаПоПолюКД.Получить(СвязьПоТипу.ВедущийПолеКД);
		Если Ведущий = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Подчиненный = СвязьПоТипу.Подчиненный;
		Если Ведущий.ВыводРазрешен Тогда // Отключаемая связь.
			ОписаниеСвязи = Новый Структура;
			ОписаниеСвязи.Вставить("ТипСвязи",                "ПоТипу");
			ОписаниеСвязи.Вставить("Ведущий",                 Ведущий);
			ОписаниеСвязи.Вставить("Подчиненный",             Подчиненный);
			ОписаниеСвязи.Вставить("ПодчиненныйИмяПараметра", СвязьПоТипу.ПодчиненныйИмяПараметра);
			Информация.ОтключаемыеСвязи.Добавить(ОписаниеСвязи);
			Подчиненный.СвязьПоТипу = ОписаниеСвязи;
		Иначе // Фиксированное ограничения типа.
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(ТипЗнч(Ведущий.Значение));
			Подчиненный.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
		КонецЕсли;
	КонецЦикла;
	
	// Связи параметров выбора.
	Для Каждого СвязьПараметровВыбора Из Связи.ПараметровВыбора Цикл
		Ведущий     = СвязьПараметровВыбора.Ведущий;
		Подчиненный = СвязьПараметровВыбора.Подчиненный;
		Если Ведущий = Неопределено Тогда
			ЛучшийВариант = 99;
			Найденные = Информация.НастройкиВарианта.Строки.НайтиСтроки(Новый Структура("ПолеКД", СвязьПараметровВыбора.ВедущийПолеКД), Истина);
			Для Каждого ПотенциальныйРодитель Из Найденные Цикл
				Если ПотенциальныйРодитель.Родитель = Подчиненный.Родитель Тогда // Элементы в одной группе.
					Если Не ПустаяСтрока(ПотенциальныйРодитель.ИдентификаторЭлемента) Тогда // Ведущий выведен в пользовательские.
						Ведущий = ПотенциальныйРодитель;
						ЛучшийВариант = 0;
						Прервать; // Самый лучший вариант.
					Иначе
						Ведущий = ПотенциальныйРодитель;
						ЛучшийВариант = 1;
					КонецЕсли;
				ИначеЕсли ЛучшийВариант > 2 И ПотенциальныйРодитель.Владелец = Подчиненный.Владелец Тогда // Элементы в одной коллекции.
					Если Не ПустаяСтрока(ПотенциальныйРодитель.ИдентификаторЭлемента) Тогда // Ведущий выведен в пользовательские.
						Если ЛучшийВариант > 2 Тогда
							Ведущий = ПотенциальныйРодитель;
							ЛучшийВариант = 2;
						КонецЕсли;
					Иначе
						Если ЛучшийВариант > 3 Тогда
							Ведущий = ПотенциальныйРодитель;
							ЛучшийВариант = 3;
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ЛучшийВариант > 4 И ПотенциальныйРодитель.СтрокаДерева = Подчиненный.СтрокаДерева Тогда // Элементы в одном узле.
					Если Не ПустаяСтрока(ПотенциальныйРодитель.ИдентификаторЭлемента) Тогда // Ведущий выведен в пользовательские.
						Если ЛучшийВариант > 4 Тогда
							Ведущий = ПотенциальныйРодитель;
							ЛучшийВариант = 4;
						КонецЕсли;
					Иначе
						Если ЛучшийВариант > 5 Тогда
							Ведущий = ПотенциальныйРодитель;
							ЛучшийВариант = 5;
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ЛучшийВариант > 6 Тогда
					Ведущий = ПотенциальныйРодитель;
					ЛучшийВариант = 6;
				КонецЕсли;
			КонецЦикла;
			Если Ведущий = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если Ведущий.ВыводРазрешен Тогда // Отключаемая связь.
			ОписаниеСвязи = Новый Структура;
			ОписаниеСвязи.Вставить("ТипСвязи",      "ПараметровВыбора");
			ОписаниеСвязи.Вставить("Ведущий",       Ведущий);
			ОписаниеСвязи.Вставить("Подчиненный",   Подчиненный);
			ОписаниеСвязи.Вставить("ПодчиненныйИмяПараметра", СвязьПараметровВыбора.ПодчиненныйИмяПараметра);
			ОписаниеСвязи.Вставить("ПодчиненныйДействие",     СвязьПараметровВыбора.Действие);
			Информация.ОтключаемыеСвязи.Добавить(ОписаниеСвязи);
			Подчиненный.СвязиПараметровВыбора.Добавить(ОписаниеСвязи);
		Иначе // Фиксированный параметр выбора.
			Если ТипЗнч(Ведущий.Значение) = Тип("ПолеКомпоновкиДанных") Тогда
				Продолжить; // Расширенная работа с отборами по полю компоновки данных не поддерживается.
			КонецЕсли;
			Подчиненный.ПараметрыВыбора.Добавить(Новый ПараметрВыбора(СвязьПараметровВыбора.ПодчиненныйИмяПараметра, Ведущий.Значение));
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Пользовательские настройки

Функция ЗарегистрироватьПользовательскуюНастройку(Информация, СвойстваНастройки, СтрокаДерева, НастройкаВарианта)
	ПользовательскаяНастройкаКД = СвойстваНастройки.ПользовательскаяНастройкаКД;
	
	РежимОтображения = ПользовательскаяНастройкаКД.РежимОтображения;
	Если РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
		Возврат СвойстваНастройки;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СвойстваНастройки.Идентификатор) Тогда
		Возврат СвойстваНастройки;
	КонецЕсли;
	СвойстваНастройки.ИдентификаторЭлемента = ОтчетыКлиентСервер.ПривестиИдентификаторКИмени(СвойстваНастройки.Идентификатор);
	
	Если НастройкаВарианта <> Неопределено Тогда
		Если НастройкаВарианта.Владелец <> Неопределено Тогда
			СвойстваНастройки.УзелКД = НастройкаВарианта.Владелец.ЭлементКД;
		КонецЕсли;
		СвойстваНастройки.СтрокаДерева         = НастройкаВарианта.СтрокаДерева;
		СвойстваНастройки.НастройкаВариантаКД  = НастройкаВарианта.ЭлементКД;
		СвойстваНастройки.НастройкаВарианта    = НастройкаВарианта;
		СвойстваНастройки.Подтип               = НастройкаВарианта.Подтип;
		СвойстваНастройки.ПолеКД               = НастройкаВарианта.ПолеКД;
		СвойстваНастройки.ДоступнаяНастройкаКД = НастройкаВарианта.ДоступнаяНастройкаКД;
		Если РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Авто Тогда
			РежимОтображения = СвойстваНастройки.НастройкаВариантаКД.РежимОтображения;
		КонецЕсли;
	Иначе
		СвойстваНастройки.УзелКД              = СтрокаДерева.УзелКД;
		СвойстваНастройки.СтрокаДерева        = СтрокаДерева;
		СвойстваНастройки.Тип                 = СтрокаДерева.Тип;
		СвойстваНастройки.Подтип              = СтрокаДерева.Подтип;
		СвойстваНастройки.НастройкаВариантаКД = СвойстваНастройки.УзелКД;
		Если РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Авто Тогда
			РежимОтображения = СвойстваНастройки.УзелКД.РежимОтображения;
		КонецЕсли;
	КонецЕсли;
	
	Если РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ Тогда
		СвойстваНастройки.Быстрая = Истина;
		Информация.ЕстьБыстрыеНастройки = Истина;
	ИначеЕсли РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный Тогда
		СвойстваНастройки.Обычная = Истина;
		Информация.ЕстьОбычныеНастройки = Истина;
	ИначеЕсли Информация.ТолькоПользовательские Тогда
		Возврат СвойстваНастройки;
	КонецЕсли;
	
	// Определение доступной настройки.
	Если СвойстваНастройки.Тип = "НастройкиВложенногоОбъекта" Тогда
		СвойстваНастройки.ДоступнаяНастройкаКД = Информация.НастройкиКД.ДоступныеОбъекты.Элементы.Найти(СвойстваНастройки.СтрокаДерева.УзелКД.ИдентификаторОбъекта);
	ИначеЕсли СвойстваНастройки.Тип = "ЗначениеПараметраНастроек"
		Или СвойстваНастройки.Тип = "ЭлементОтбора" Тогда
		Если СвойстваНастройки.ДоступнаяНастройкаКД = Неопределено Тогда
			Возврат СвойстваНастройки; // Имя поля изменилось или поле было удалено.
		КонецЕсли;
	КонецЕсли;
	
	Если Информация.ТолькоПользовательские Тогда
		Если Информация.ТолькоБыстрые Тогда
			СвойстваНастройки.ВыводРазрешен = СвойстваНастройки.Быстрая;
		Иначе
			СвойстваНастройки.ВыводРазрешен = Истина;
		КонецЕсли;
	КонецЕсли;
	
	СвойстваНастройки.ВыводитьФлажок = Истина;
	СвойстваНастройки.ВыводитьТолькоФлажок = Ложь;
	
	ЗаполнитьПредставлениеНастройки(СвойстваНастройки, Истина);
	
	Если СвойстваНастройки.Тип = "ГруппаЭлементовОтбора"
		Или СвойстваНастройки.Тип = "НастройкиВложенногоОбъекта"
		Или СвойстваНастройки.Тип = "Группировка"
		Или СвойстваНастройки.Тип = "Таблица"
		Или СвойстваНастройки.Тип = "ГруппировкаТаблицы"
		Или СвойстваНастройки.Тип = "Диаграмма"
		Или СвойстваНастройки.Тип = "ГруппировкаДиаграммы"
		Или СвойстваНастройки.Тип = "ЭлементУсловногоОформления" Тогда
		
		СвойстваНастройки.ВыводитьТолькоФлажок = Истина;
		
	ИначеЕсли СвойстваНастройки.Тип = "ЗначениеПараметраНастроек"
		Или СвойстваНастройки.Тип = "ЭлементОтбора" Тогда
		
		Если СвойстваНастройки.Тип = "ЗначениеПараметраНастроек" Тогда
			СвойстваНастройки.Значение = ПользовательскаяНастройкаКД.Значение;
		Иначе
			СвойстваНастройки.Значение = ПользовательскаяНастройкаКД.ПравоеЗначение;
		КонецЕсли;
		
		// Определение типа значения настройки.
		ИнформацияОТипах = ОтчетыКлиентСервер.АнализТипов(СвойстваНастройки.ДоступнаяНастройкаКД.ТипЗначения, Истина);
		СвойстваНастройки.ИнформацияОТипах = ИнформацияОТипах;
		СвойстваНастройки.ОписаниеТипов    = ИнформацияОТипах.ОписаниеТиповДляФормы;
		
		Если СвойстваНастройки.Тип = "ЗначениеПараметраНастроек" Тогда
			Если СвойстваНастройки.ДоступнаяНастройкаКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда Тогда
				СвойстваНастройки.ВыводитьФлажок = Ложь;
				ПользовательскаяНастройкаКД.Использование = Истина;
			КонецЕсли;
			Если СвойстваНастройки.ДоступнаяНастройкаКД.ДоступенСписокЗначений Тогда
				СвойстваНастройки.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			Иначе
				СвойстваНастройки.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			КонецЕсли;
		ИначеЕсли СвойстваНастройки.Тип = "ЭлементОтбора" Тогда
			СвойстваНастройки.ВидСравнения = ПользовательскаяНастройкаКД.ВидСравнения;
		КонецЕсли;
		
		Если СвойстваНастройки.ИнформацияОТипах.СодержитТипПериод
			И СвойстваНастройки.ИнформацияОТипах.КоличествоТипов = 1 Тогда
			
			СвойстваНастройки.ТипЭлементов = "СтандартныйПериод";
			
		ИначеЕсли Не СвойстваНастройки.ВыводитьФлажок
			И СвойстваНастройки.ИнформацияОТипах.СодержитТипБулево
			И СвойстваНастройки.ИнформацияОТипах.КоличествоТипов = 1 Тогда
			
			СвойстваНастройки.ТипЭлементов = "ТолькоФлажокЗначения";
			
		ИначеЕсли СвойстваНастройки.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено
			Или СвойстваНастройки.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
			
			СвойстваНастройки.ВыводитьТолькоФлажок = Истина;
			СвойстваНастройки.Представление = СвойстваНастройки.Представление + ": " + НРег(Строка(СвойстваНастройки.ВидСравнения));
			
		ИначеЕсли СвойстваНастройки.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке
			Или СвойстваНастройки.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии
			Или СвойстваНастройки.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке
			Или СвойстваНастройки.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
			
			СвойстваНастройки.ВводСписком = Истина;
			СвойстваНастройки.ТипЭлементов = "СписокСПодбором";
			СвойстваНастройки.ВыборГруппИЭлементов = ГруппыИЭлементы.ГруппыИЭлементы;
			
		Иначе
			
			СвойстваНастройки.ТипЭлементов = "СвязьСКомпоновщиком";
			Если СвойстваНастройки.ВидСравнения <> ВидСравненияКомпоновкиДанных.Равно
				И СвойстваНастройки.ВидСравнения <> ВидСравненияКомпоновкиДанных.Содержит
				И Не СвойстваНастройки.ВыводитьТолькоФлажок Тогда
				СвойстваНастройки.Представление = СвойстваНастройки.Представление + " (" + НРег(Строка(СвойстваНастройки.ВидСравнения)) + ")";
			КонецЕсли;
			Если СвойстваНастройки.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии
				Или СвойстваНастройки.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
				СвойстваНастройки.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СвойстваНастройки.ВыборГруппИЭлементов = Неопределено Тогда
			СвойстваНастройки.ВыборГруппИЭлементов = НастройкаВарианта.ВыборГруппИЭлементов;
		КонецЕсли;
		
	ИначеЕсли СвойстваНастройки.Тип = "ВыбранныеПоля"
		Или СвойстваНастройки.Тип = "Порядок"
		Или СвойстваНастройки.Тип = "КоллекцияЭлементовСтруктурыТаблицы"
		Или СвойстваНастройки.Тип = "КоллекцияЭлементовСтруктурыДиаграммы"
		Или СвойстваНастройки.Тип = "Отбор"
		Или СвойстваНастройки.Тип = "УсловноеОформление"
		Или СвойстваНастройки.Тип = "СтруктураНастроек" Тогда
		
		СвойстваНастройки.ТипЭлементов = "СвязьСКомпоновщиком";
		СвойстваНастройки.ВыводитьФлажок = Ложь;
		
	Иначе
		
		СвойстваНастройки.ТипЭлементов = "СвязьСКомпоновщиком";
		
	КонецЕсли;
	
	Если СвойстваНастройки.ВыводитьТолькоФлажок Тогда
		СвойстваНастройки.ТипЭлементов = "";
	ИначеЕсли СвойстваНастройки.Быстрая И СвойстваНастройки.ТипЭлементов = "СписокСПодбором" Тогда
		СвойстваНастройки.ТипЭлементов = "СвязьСКомпоновщиком";
	КонецЕсли;
	
	Возврат СвойстваНастройки;
КонецФункции

Процедура ЗаполнитьПредставлениеНастройки(СвойстваНастройки, ЭтоПользовательскаяНастройка)
	ЭлементЗаголовок = "";
	Если ЭтоПользовательскаяНастройка Тогда
		НастройкаВариантаКД = СвойстваНастройки.НастройкаВариантаКД;
		ПользовательскаяНастройкаКД = СвойстваНастройки.ПользовательскаяНастройкаКД;
		ДоступнаяНастройкаКД = СвойстваНастройки.ДоступнаяНастройкаКД;
	Иначе
		НастройкаВариантаКД = СвойстваНастройки.УзелКД;
		ПользовательскаяНастройкаКД = НастройкаВариантаКД;
		ДоступнаяНастройкаКД = Неопределено;
	КонецЕсли;
	
	СтруктураПредставлений = Новый Структура("Представление, ПредставлениеПользовательскойНастройки", "", "");
	ЗаполнитьЗначенияСвойств(СтруктураПредставлений, НастройкаВариантаКД);
	
	СвойстваНастройки.ВыводитьТолькоФлажок = ЗначениеЗаполнено(СтруктураПредставлений.Представление);
	
	Если ЗначениеЗаполнено(СтруктураПредставлений.ПредставлениеПользовательскойНастройки) Тогда
		
		ЭлементЗаголовок = СтруктураПредставлений.ПредставлениеПользовательскойНастройки;
		
	ИначеЕсли ЗначениеЗаполнено(СтруктураПредставлений.Представление) И СтруктураПредставлений.Представление <> "1" Тогда
		
		ЭлементЗаголовок = СтруктураПредставлений.Представление;
		
	ИначеЕсли ДоступнаяНастройкаКД <> Неопределено И ЗначениеЗаполнено(ДоступнаяНастройкаКД.Заголовок) Тогда
		
		ЭлементЗаголовок = ДоступнаяНастройкаКД.Заголовок;
		
	КонецЕсли;
	
	// Представление "По умолчанию".
	Если Не ЗначениеЗаполнено(ЭлементЗаголовок) Тогда
		
		Если ЗначениеЗаполнено(СвойстваНастройки.Подтип) Тогда
			
			Если СвойстваНастройки.Подтип = "ДиаграммаСерии" Тогда
				
				ЭлементЗаголовок = НСтр("ru = 'Серии'");
				
			ИначеЕсли СвойстваНастройки.Подтип = "ДиаграммаТочки" Тогда
				
				ЭлементЗаголовок = НСтр("ru = 'Точки'");
				
			ИначеЕсли СвойстваНастройки.Подтип = "ТаблицаСтроки" Тогда
				
				ЭлементЗаголовок = НСтр("ru = 'Строки'");
				
			ИначеЕсли СвойстваНастройки.Подтип = "ТаблицаКолонки" Тогда
				
				ЭлементЗаголовок = НСтр("ru = 'Колонки'");
				
			Иначе
				
				ЭлементЗаголовок = Строка(СвойстваНастройки.Подтип);
				
			КонецЕсли;
			
		ИначеЕсли СвойстваНастройки.Тип = "Отбор" Тогда
			
			ЭлементЗаголовок = НСтр("ru = 'Отбор'");
			
		ИначеЕсли СвойстваНастройки.Тип = "ГруппаЭлементовОтбора" Тогда
			
			ЭлементЗаголовок = Строка(ПользовательскаяНастройкаКД.ТипГруппы);
			
		ИначеЕсли СвойстваНастройки.Тип = "ЭлементОтбора" Тогда
			
			ЭлементЗаголовок = Строка(НастройкаВариантаКД.ЛевоеЗначение);
			
		ИначеЕсли СвойстваНастройки.Тип = "Порядок" Тогда
			
			ЭлементЗаголовок = НСтр("ru = 'Сортировка'");
			
		ИначеЕсли СвойстваНастройки.Тип = "ВыбранныеПоля" Тогда
			
			ЭлементЗаголовок = НСтр("ru = 'Поля'");
			
		ИначеЕсли СвойстваНастройки.Тип = "УсловноеОформление" Тогда
			
			ЭлементЗаголовок = НСтр("ru = 'Оформление'");
			
		ИначеЕсли СвойстваНастройки.Тип = "ЭлементУсловногоОформления" Тогда
			
			ПредставлениеОформления = Строка(ПользовательскаяНастройкаКД.Оформление);
			Если ПредставлениеОформления = "" Тогда
				ЭлементЗаголовок = НСтр("ru = 'Не оформлять'");
			Иначе
				ЭлементЗаголовок = ПредставлениеОформления;
			КонецЕсли;
			
			ПредставлениеПолей = Строка(ПользовательскаяНастройкаКД.Поля);
			Если ПредставлениеПолей = "" Тогда
				ЭлементЗаголовок = ЭлементЗаголовок + " / " + НСтр("ru = 'Все поля'");
			Иначе
				ЭлементЗаголовок = ЭлементЗаголовок + " / " + НСтр("ru = 'Поля:'") + " " + ПредставлениеПолей;
			КонецЕсли;
			
			ПредставлениеОтбора = ПредставлениеОтбора(ПользовательскаяНастройкаКД.Отбор);
			Если ПредставлениеОтбора <> "" Тогда
				ЭлементЗаголовок = ЭлементЗаголовок + " / " + НСтр("ru = 'Условие:'") + " " + ПредставлениеОтбора;
			КонецЕсли;
			
		ИначеЕсли СвойстваНастройки.Тип = "ЗначениеПараметраНастроек" Тогда
			
			ЭлементЗаголовок = Строка(НастройкаВариантаКД.Параметр);
			
		ИначеЕсли СвойстваНастройки.Тип = "Группировка"
			Или СвойстваНастройки.Тип = "ГруппировкаТаблицы"
			Или СвойстваНастройки.Тип = "ГруппировкаДиаграммы" Тогда
			
			ЭлементЗаголовок = СокрЛП(Строка(НастройкаВариантаКД.ПоляГруппировки));
			Если ПустаяСтрока(ЭлементЗаголовок) Тогда
				ЭлементЗаголовок = НСтр("ru = '<Детальные записи>'");
			КонецЕсли;
			
		ИначеЕсли СвойстваНастройки.Тип = "Таблица" Тогда
			
			ЭлементЗаголовок = НСтр("ru = 'Таблица'");
			
		ИначеЕсли СвойстваНастройки.Тип = "Диаграмма" Тогда
			
			ЭлементЗаголовок = НСтр("ru = 'Диаграмма'");
			
		ИначеЕсли СвойстваНастройки.Тип = "НастройкиВложенногоОбъекта" Тогда
			
			ЭлементЗаголовок = Строка(ПользовательскаяНастройкаКД);
			Если ПустаяСтрока(ЭлементЗаголовок) Тогда
				ЭлементЗаголовок = НСтр("ru = 'Вложенная группировка'");
			КонецЕсли;
			
		ИначеЕсли СвойстваНастройки.Тип = "СтруктураНастроек" Тогда
			
			ЭлементЗаголовок = НСтр("ru = 'Структура'");
			
		Иначе
			
			ЭлементЗаголовок = Строка(СвойстваНастройки.Тип);
			
		КонецЕсли;
		
	КонецЕсли;
	
	СвойстваНастройки.Представление = СокрЛП(ЭлементЗаголовок);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные

Функция ПредставлениеОтбора(УзелКД, НаборСтрокКД = Неопределено)
	Если НаборСтрокКД = Неопределено Тогда
		НаборСтрокКД = УзелКД.Элементы;
	КонецЕсли;
	
	Представление = "";
	
	Для Каждого ЭлементКД Из НаборСтрокКД Цикл
		
		Если ТипЗнч(ЭлементКД) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			
			ПредставлениеГруппы = Строка(ЭлементКД.ТипГруппы);
			ПредставлениеВложенных = ПредставлениеОтбора(УзелКД, ЭлементКД.Элементы);
			Если ПредставлениеВложенных = "" Тогда
				Продолжить;
			КонецЕсли;
			ПредставлениеЭлемента = ПредставлениеГруппы + "(" + ПредставлениеВложенных + ")";
			
		ИначеЕсли ТипЗнч(ЭлементКД) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			
			ДоступноеПолеОтбораКД = УзелКД.ДоступныеПоляОтбора.НайтиПоле(ЭлементКД.ЛевоеЗначение);
			Если ДоступноеПолеОтбораКД = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДоступноеПолеОтбораКД.Заголовок) Тогда
				ПредставлениеПоля = ДоступноеПолеОтбораКД.Заголовок;
			Иначе
				ПредставлениеПоля = Строка(ЭлементКД.ЛевоеЗначение);
			КонецЕсли;
			
			ПредставлениеЗначения = Строка(ЭлементКД.ПравоеЗначение);
			
			Если ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
				ПредставлениеУсловия = "=";
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
				ПредставлениеУсловия = "<>";
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше Тогда
				ПредставлениеУсловия = ">";
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
				ПредставлениеУсловия = ">=";
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше Тогда
				ПредставлениеУсловия = "<";
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
				ПредставлениеУсловия = "<=";
			
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
				ПредставлениеУсловия = НСтр("ru = 'В группе'");
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
				ПредставлениеУсловия = НСтр("ru = 'Не в группе'");
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
				ПредставлениеУсловия = НСтр("ru = 'В списке'");
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
				ПредставлениеУсловия = НСтр("ru = 'Не в списке'");
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
				ПредставлениеУсловия = НСтр("ru = 'В списке включая подчиненные'");
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
				ПредставлениеУсловия = НСтр("ru = 'Не в списке включая подчиненные'");
			
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит Тогда
				ПредставлениеУсловия = НСтр("ru = 'Содержит'");
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.НеСодержит Тогда
				ПредставлениеУсловия = НСтр("ru = 'Не содержит'");
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.Подобно Тогда
				ПредставлениеУсловия = НСтр("ru = 'Подобно'");
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.НеПодобно Тогда
				ПредставлениеУсловия = НСтр("ru = 'Не подобно'");
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.НачинаетсяС Тогда
				ПредставлениеУсловия = НСтр("ru = 'Начинается с'");
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.НеНачинаетсяС Тогда
				ПредставлениеУсловия = НСтр("ru = 'Не начинается с'");
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено Тогда
				ПредставлениеУсловия = НСтр("ru = 'Заполнено'");
				ПредставлениеЗначения = "";
			ИначеЕсли ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
				ПредставлениеУсловия = НСтр("ru = 'Не заполнено'");
				ПредставлениеЗначения = "";
			КонецЕсли;
			
			ПредставлениеЭлемента = СокрЛП(ПредставлениеПоля + " " + ПредставлениеУсловия + " " + ПредставлениеЗначения);
			
		Иначе
			Продолжить;
		КонецЕсли;
		
		Представление = Представление + ?(Представление = "", "", ", ") + ПредставлениеЭлемента;
		
	КонецЦикла;
	
	Возврат Представление;
КонецФункции

Функция ОписанияТиповСовпадают(ОписаниеТипов1, ОписаниеТипов2) Экспорт
	Если ОписаниеТипов1 = Неопределено Или ОписаниеТипов2 = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ОписаниеТипов1 = ОписаниеТипов2
		Или ОбщегоНазначения.ЗначениеВСтрокуXML(ОписаниеТипов1) = ОбщегоНазначения.ЗначениеВСтрокуXML(ОписаниеТипов2);
КонецФункции

Функция ОтчетОбъект(НастройкиОтчета) Экспорт
	Если НастройкиОтчета.Свойство("ОтчетОбъект") Тогда
		Возврат НастройкиОтчета.ОтчетОбъект;
	КонецЕсли;
	ОтчетОбъект = ОбщегоНазначения.ОбъектПоПолномуИмени(НастройкиОтчета.ПолноеИмя);
	НастройкиОтчета.Вставить("ОтчетОбъект", ОтчетОбъект);
	Возврат ОтчетОбъект;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вывод

Процедура ВывестиЭлементыНастройки(Форма, Элементы, СвойстваНастройки, ГруппаВывода, Прочее) Экспорт
	ЭлементВывода = Новый Структура("Размер, ИмяЭлемента1, ИмяЭлемента2");
	ЭлементВывода.Размер = 1;
	
	ШаблонИмениЭлемента = СвойстваНастройки.Тип + "_%1_" + СвойстваНастройки.ИдентификаторЭлемента;
	
	// Группа требуется для вывода некоторых типов полей.
	Если СвойстваНастройки.ТипЭлементов = "СтандартныйПериод"
		Или СвойстваНастройки.ТипЭлементов = "СписокСПодбором" Тогда
		ГруппаИмя = СтрЗаменить(ШаблонИмениЭлемента, "%1", "Группа");
		
		Группа = Элементы.Добавить(ГруппаИмя, Тип("ГруппаФормы"), Элементы.НеОтсортированное);
		Группа.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
		Группа.Отображение         = ОтображениеОбычнойГруппы.Нет;
		Группа.Заголовок           = СвойстваНастройки.Представление;
		Группа.ОтображатьЗаголовок = Ложь;
	КонецЕсли;
	
	// Флажок использования.
	Если СвойстваНастройки.ВыводитьФлажок Тогда
		ФлажокИмя = СтрЗаменить(ШаблонИмениЭлемента, "%1", "Использование");
		
		Если СвойстваНастройки.ТипЭлементов = "СписокСПодбором" Тогда
			ГруппаДляФлажка = Группа;
			ЭлементВывода.ИмяЭлемента1 = ГруппаИмя;
		Иначе
			ГруппаДляФлажка = Элементы.НеОтсортированное;
			ЭлементВывода.ИмяЭлемента1 = ФлажокИмя;
		КонецЕсли;
		
		Флажок = Элементы.Добавить(ФлажокИмя, Тип("ПолеФормы"), ГруппаДляФлажка);
		Флажок.Вид         = ВидПоляФормы.ПолеФлажка;
		Флажок.Заголовок   = СвойстваНастройки.Представление + ?(СвойстваНастройки.ВыводитьТолькоФлажок, "", ":");
		Флажок.ПутьКДанным = Прочее.ПутьККомпоновщику + ".ПользовательскиеНастройки[" + СвойстваНастройки.ИндексВКоллекции + "].Использование";
		Флажок.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
		Флажок.УстановитьДействие("ПриИзменении", "Подключаемый_ФлажокИспользование_ПриИзменении");
	КонецЕсли;
	
	// Поля для значений.
	Если СвойстваНастройки.ТипЭлементов <> "" Тогда
		
		ИнформацияОТипах = СвойстваНастройки.ИнформацияОТипах;
		
		Если СвойстваНастройки.Тип = "ЗначениеПараметраНастроек"
			Или СвойстваНастройки.Тип = "ЭлементОтбора" Тогда
			
			Если СвойстваНастройки.ВводСписком Тогда
				СвойстваНастройки.ОтмеченныеЗначения = ОтчетыКлиентСервер.ЗначенияСписком(СвойстваНастройки.Значение);
			КонецЕсли;
			
			// Сохранение параметров выбора настройки в дополнительных свойствах пользовательских настроек.
			НастройкиЭлемента = Новый Структура;
			НастройкиЭлемента.Вставить("Представление",     СвойстваНастройки.Представление);
			НастройкиЭлемента.Вставить("ВыводитьФлажок",    СвойстваНастройки.ВыводитьФлажок);
			НастройкиЭлемента.Вставить("ОписаниеТипов",     СвойстваНастройки.ОписаниеТипов);
			НастройкиЭлемента.Вставить("ПараметрыВыбора",   СвойстваНастройки.ПараметрыВыбора);
			НастройкиЭлемента.Вставить("ЗначенияДляВыбора", СвойстваНастройки.ЗначенияДляВыбора);
			НастройкиЭлемента.Вставить("ОграничиватьВыборУказаннымиЗначениями", СвойстваНастройки.ОграничиватьВыборУказаннымиЗначениями);
			Прочее.ДополнительныеНастройкиЭлементов.Вставить(СвойстваНастройки.ИдентификаторЭлемента, НастройкиЭлемента);
		КонецЕсли;
		
		////////////////////////////////////////////////////////////////////////////////
		// ВЫВОД.
		
		ЗначениеИмя = СтрЗаменить(ШаблонИмениЭлемента, "%1", "Значение");
		
		Если СвойстваНастройки.ТипЭлементов = "ТолькоФлажокЗначения" Тогда
			
			БыстрыеНастройкиДобавитьРеквизит(Прочее.ПараметрыЗаполнения, ЗначениеИмя, СвойстваНастройки.ОписаниеТипов);
			
			ЭлементВывода.ИмяЭлемента1 = ЗначениеИмя;
			
			ПолеВвода = Элементы.Добавить(ЗначениеИмя, Тип("ПолеФормы"), Группа);
			ПолеВвода.Вид                = ВидПоляФормы.ПолеФлажка;
			ПолеВвода.Заголовок          = СвойстваНастройки.Представление;
			ПолеВвода.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
			ПолеВвода.УстановитьДействие("ПриИзменении", "Подключаемый_ФлажокЗначения_ПриИзменении");
			
			Прочее.ДобавленныеПоляВвода.Вставить(ЗначениеИмя, СвойстваНастройки.Значение);
			
		ИначеЕсли СвойстваНастройки.ТипЭлементов = "СвязьСКомпоновщиком" Тогда
			
			Прочее.ИменаОсновныхРеквизитовФормы.Вставить(СвойстваНастройки.ИдентификаторЭлемента, ЗначениеИмя);
			Прочее.ИменаЭлементовДляУстановкиСвязей.Вставить(СвойстваНастройки.ИдентификаторЭлемента, ЗначениеИмя);
			
			ЭлементВывода.ИмяЭлемента2 = ЗначениеИмя;
			
			ПолеВвода = Элементы.Добавить(ЗначениеИмя, Тип("ПолеФормы"), Группа);
			ПолеВвода.Вид         = ВидПоляФормы.ПолеВвода;
			ПолеВвода.Заголовок   = СвойстваНастройки.Представление;
			ПолеВвода.ПутьКДанным = Прочее.ПутьККомпоновщику + ".ПользовательскиеНастройки[" + СвойстваНастройки.ИндексВКоллекции + "].Значение";
			ПолеВвода.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			ПолеВвода.УстановитьДействие("ПриИзменении", "Подключаемый_ПолеВвода_ПриИзменении");
			
			Если СвойстваНастройки.ВводСписком Тогда
				ПолеВвода.УстановитьДействие("НачалоВыбора", "Подключаемый_СписокКомпоновщика_Значение_НачалоВыбора");
			КонецЕсли;
			
			Если СвойстваНастройки.Тип = "ЗначениеПараметраНастроек" Тогда
				ПолеВвода.АвтоОтметкаНезаполненного = СвойстваНастройки.ДоступнаяНастройкаКД.ЗапрещатьНезаполненныеЗначения;
			КонецЕсли;
			
		ИначеЕсли СвойстваНастройки.ТипЭлементов = "ПолеВвода" Тогда
			
			ЭлементВывода.ИмяЭлемента2 = ЗначениеИмя;
			
			Прочее.ИменаОсновныхРеквизитовФормы.Вставить(СвойстваНастройки.ИдентификаторЭлемента, ЗначениеИмя);
			Прочее.ИменаЭлементовДляУстановкиСвязей.Вставить(СвойстваНастройки.ИдентификаторЭлемента, ЗначениеИмя);
			
			// Реквизит
			БыстрыеНастройкиДобавитьРеквизит(Прочее.ПараметрыЗаполнения, ЗначениеИмя, СвойстваНастройки.ОписаниеТипов);
			
			ПолеВвода = Элементы.Добавить(ЗначениеИмя, Тип("ПолеФормы"), Группа);
			ПолеВвода.Вид                 = ВидПоляФормы.ПолеВвода;
			ПолеВвода.Заголовок           = СвойстваНастройки.Представление;
			ПолеВвода.КнопкаОткрытия      = Ложь;
			ПолеВвода.КнопкаРегулирования = Ложь;
			ПолеВвода.ПоложениеЗаголовка  = ПоложениеЗаголовкаЭлементаФормы.Нет;
			ПолеВвода.УстановитьДействие("ПриИзменении", "Подключаемый_ПолеВвода_ПриИзменении");
			
			ЗаполнитьЗначенияСвойств(ПолеВвода, СвойстваНастройки.ДоступнаяНастройкаКД, "БыстрыйВыбор, Маска, ФормаВыбора, ФорматРедактирования");
			
			ПолеВвода.ВыборГруппИЭлементов = СвойстваНастройки.ВыборГруппИЭлементов;
			
			Если СвойстваНастройки.Тип = "ЗначениеПараметраНастроек" Тогда
				ПолеВвода.АвтоОтметкаНезаполненного = СвойстваНастройки.ДоступнаяНастройкаКД.ЗапрещатьНезаполненныеЗначения;
			КонецЕсли;
			
			// Поля ввода следующих типов не растягиваются по горизонтали и не имеют кнопки очистки:
			//     Дата, Булево, Число, Тип.
			ПолеВвода.КнопкаОчистки            = ИнформацияОТипах.СодержитОбъектныеТипы;
			ПолеВвода.РастягиватьПоГоризонтали = ИнформацияОТипах.СодержитОбъектныеТипы;
			Для Каждого ЭлементСпискаВФорме Из СвойстваНастройки.ЗначенияДляВыбора Цикл
				ЗаполнитьЗначенияСвойств(ПолеВвода.СписокВыбора.Добавить(), ЭлементСпискаВФорме);
			КонецЦикла;
			Если СвойстваНастройки.ОграничиватьВыборУказаннымиЗначениями Тогда
				ПолеВвода.РежимВыбораИзСписка = Истина;
				ПолеВвода.КнопкаСоздания = Ложь;
				ПолеВвода.РастягиватьПоГоризонтали = Истина;
			КонецЕсли;
			
			// Фиксированные параметры выбора.
			Если СвойстваНастройки.ПараметрыВыбора.Количество() > 0 Тогда
				ПолеВвода.ПараметрыВыбора = Новый ФиксированныйМассив(СвойстваНастройки.ПараметрыВыбора);
			КонецЕсли;
			
			// Значение реквизита.
			Значение = СвойстваНастройки.Значение;
			Если ТипЗнч(Значение) = Тип("СтандартнаяДатаНачала") Тогда
				Значение = Дата(Значение);
			ИначеЕсли ТипЗнч(Значение) = Тип("Тип") Тогда
				МассивТипов = Новый Массив;
				МассивТипов.Добавить(Значение);
				Значение = Новый ОписаниеТипов(МассивТипов);
			КонецЕсли;
			Прочее.ДобавленныеПоляВвода.Вставить(ЗначениеИмя, Значение);
			
		ИначеЕсли СвойстваНастройки.ТипЭлементов = "СтандартныйПериод" Тогда
			
			Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			
			ЭлементВывода.Размер = 1;
			ЭлементВывода.ИмяЭлемента2 = ГруппаИмя;
			
			ВидПериодаИмя           = СтрЗаменить(ШаблонИмениЭлемента, "%1", "Вид");
			ПредставлениеИмя        = СтрЗаменить(ШаблонИмениЭлемента, "%1", "Представление");
			ПериодНачалоИмя         = СтрЗаменить(ШаблонИмениЭлемента, "%1", "Начало");
			ПериодОкончаниеИмя      = СтрЗаменить(ШаблонИмениЭлемента, "%1", "Окончание");
			ДекорацияИмя            = СтрЗаменить(ШаблонИмениЭлемента, "%1", "Декорация");
			СтраницыИмя             = СтрЗаменить(ШаблонИмениЭлемента, "%1", "Страницы");
			СтраницаСтандартныйИмя  = СтрЗаменить(ШаблонИмениЭлемента, "%1", "СтраницаСтандартный");
			СтраницаПроизвольныйИмя = СтрЗаменить(ШаблонИмениЭлемента, "%1", "СтраницаПроизвольный");
			
			// Реквизиты.
			БыстрыеНастройкиДобавитьРеквизит(Прочее.ПараметрыЗаполнения, ЗначениеИмя,      "СтандартныйПериод");
			БыстрыеНастройкиДобавитьРеквизит(Прочее.ПараметрыЗаполнения, ВидПериодаИмя,    "ПеречислениеСсылка.ДоступныеПериодыОтчета");
			БыстрыеНастройкиДобавитьРеквизит(Прочее.ПараметрыЗаполнения, ПредставлениеИмя, "Строка");
			
			// Вид периода - Элемент.
			ВидПериодаЭлемент = Элементы.Добавить(ВидПериодаИмя, Тип("ПолеФормы"), Группа);
			ВидПериодаЭлемент.Вид                      = ВидПоляФормы.ПолеВвода;
			ВидПериодаЭлемент.Заголовок                = СвойстваНастройки.Представление;
			ВидПериодаЭлемент.РежимВыбораИзСписка      = Истина;
			ВидПериодаЭлемент.РастягиватьПоГоризонтали = Ложь;
			ВидПериодаЭлемент.Ширина                   = 11;
			ВидПериодаЭлемент.ПоложениеЗаголовка       = ПоложениеЗаголовкаЭлементаФормы.Нет;
			ВидПериодаЭлемент.УстановитьДействие("ПриИзменении", "Подключаемый_СтандартныйПериод_Вид_ПриИзменении");
			
			// Вид периода - Список выбора.
			МинимальнаяПериодичность = Форма.НастройкиОтчета.СоответствиеПериодичностиПараметров[СвойстваНастройки.ПолеКД];
			Если МинимальнаяПериодичность = Неопределено Тогда
				МинимальнаяПериодичность = Перечисления.ДоступныеПериодыОтчета.День;
			КонецЕсли;
			
			ДоступныеПериоды = ОтчетыКлиентСервер.ПолучитьСписокДоступныхПериодов();
			Для Индекс = ДоступныеПериоды.Найти(МинимальнаяПериодичность) По ДоступныеПериоды.ВГраница() Цикл
				ВидПериодаЭлемент.СписокВыбора.Добавить(ДоступныеПериоды[Индекс]);
			КонецЦикла;
			
			// Страницы.
			ГруппаСтраниц = Элементы.Добавить(СтраницыИмя, Тип("ГруппаФормы"), Группа);
			ГруппаСтраниц.Вид                = ВидГруппыФормы.Страницы;
			ГруппаСтраниц.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
			ГруппаСтраниц.Ширина = 24;
			ГруппаСтраниц.РастягиватьПоГоризонтали = Ложь;
			
			// Страница СтандартныйПериод.
			СтраницаСтандартныйПериод = Элементы.Добавить(СтраницаСтандартныйИмя, Тип("ГруппаФормы"), ГруппаСтраниц);
			СтраницаСтандартныйПериод.Вид                 = ВидГруппыФормы.Страница;
			СтраницаСтандартныйПериод.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			СтраницаСтандартныйПериод.ОтображатьЗаголовок = Ложь;
			
			// Страница Произвольный.
			СтраницаПроизвольныйПериод = Элементы.Добавить(СтраницаПроизвольныйИмя, Тип("ГруппаФормы"), ГруппаСтраниц);
			СтраницаПроизвольныйПериод.Вид                 = ВидГруппыФормы.Страница;
			СтраницаПроизвольныйПериод.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			СтраницаПроизвольныйПериод.ОтображатьЗаголовок = Ложь;
			
			// Стандартный период.
			Период = Элементы.Добавить(ПредставлениеИмя, Тип("ПолеФормы"), СтраницаСтандартныйПериод);
			Период.Вид       = ВидПоляФормы.ПолеВвода;
			Период.Заголовок = НСтр("ru = 'Период'");
			Период.РастягиватьПоГоризонтали = Истина;
			Период.КнопкаВыбора   = Истина;
			Период.КнопкаОткрытия = Ложь;
			Период.КнопкаОчистки  = Ложь;
			Период.КнопкаРегулирования  = Ложь;
			Период.РедактированиеТекста = Ложь;
			Период.ПоложениеЗаголовка   = ПоложениеЗаголовкаЭлементаФормы.Нет;
			Период.УстановитьДействие("Очистка",      "Подключаемый_СтандартныйПериод_Значение_Очистка");
			Период.УстановитьДействие("НачалоВыбора", "Подключаемый_СтандартныйПериод_Значение_НачалоВыбора");
			
			// Начало произвольного периода.
			ПериодНачало = Элементы.Добавить(ПериодНачалоИмя, Тип("ПолеФормы"), СтраницаПроизвольныйПериод);
			ПериодНачало.Вид    = ВидПоляФормы.ПолеВвода;
			ПериодНачало.РастягиватьПоГоризонтали = Истина;
			ПериодНачало.КнопкаВыбора   = Истина;
			ПериодНачало.КнопкаОткрытия = Ложь;
			ПериодНачало.КнопкаОчистки  = Ложь;
			ПериодНачало.КнопкаРегулирования  = Ложь;
			ПериодНачало.РедактированиеТекста = Истина;
			ПериодНачало.ПоложениеЗаголовка   = ПоложениеЗаголовкаЭлементаФормы.Нет;
			ПериодНачало.УстановитьДействие("ПриИзменении", "Подключаемый_СтандартныйПериод_НачалоПериода_ПриИзменении");
			
			Если СвойстваНастройки.Тип = "ЗначениеПараметраНастроек" Тогда
				ПериодНачало.АвтоОтметкаНезаполненного = СвойстваНастройки.ДоступнаяНастройкаКД.ЗапрещатьНезаполненныеЗначения;
			КонецЕсли;
			
			Тире = Элементы.Добавить(ДекорацияИмя, Тип("ДекорацияФормы"), СтраницаПроизвольныйПериод);
			Тире.Вид       = ВидДекорацииФормы.Надпись;
			Тире.Заголовок = Символ(8211); // Среднее тире (en dash).
			
			// Окончание произвольного периода.
			ПериодОкончание = Элементы.Добавить(ПериодОкончаниеИмя, Тип("ПолеФормы"), СтраницаПроизвольныйПериод);
			ПериодОкончание.Вид = ВидПоляФормы.ПолеВвода;
			ЗаполнитьЗначенияСвойств(ПериодОкончание, ПериодНачало, "РастягиватьПоГоризонтали, Ширина, ПоложениеЗаголовка, 
			|РедактированиеТекста, КнопкаВыбора, КнопкаОткрытия, КнопкаОчистки, КнопкаРегулирования, АвтоОтметкаНезаполненного");
			ПериодОкончание.УстановитьДействие("ПриИзменении", "Подключаемый_СтандартныйПериод_КонецПериода_ПриИзменении");
			
			// Значения.
			НачалоПериода = СвойстваНастройки.Значение.ДатаНачала;
			КонецПериода  = СвойстваНастройки.Значение.ДатаОкончания;
			ВидПериода    = ОтчетыКлиентСервер.ПолучитьВидСтандартногоПериода(СвойстваНастройки.Значение, ВидПериодаЭлемент.СписокВыбора);
			Представление = ОтчетыКлиентСервер.ПредставлениеСтандартногоПериода(СвойстваНастройки.Значение, ВидПериода);
			
			Дополнительно = Новый Структура;
			Дополнительно.Вставить("ЗначениеИмя",        ЗначениеИмя);
			Дополнительно.Вставить("ВидПериодаИмя",      ВидПериодаИмя);
			Дополнительно.Вставить("ПериодНачалоИмя",    ПериодНачалоИмя);
			Дополнительно.Вставить("ПериодОкончаниеИмя", ПериодОкончаниеИмя);
			Дополнительно.Вставить("ПредставлениеИмя",   ПредставлениеИмя);
			Дополнительно.Вставить("ВидПериода",         ВидПериода);
			Дополнительно.Вставить("Представление",      Представление);
			СвойстваНастройки.Дополнительно = Дополнительно;
			Прочее.ДобавленныеСтандартныеПериоды.Добавить(СвойстваНастройки);
			
			// Активация страницы.
			Если ВидПериода = Перечисления.ДоступныеПериодыОтчета.ПроизвольныйПериод Тогда
				ГруппаСтраниц.ТекущаяСтраница = СтраницаПроизвольныйПериод;
			Иначе
				ГруппаСтраниц.ТекущаяСтраница = СтраницаСтандартныйПериод;
			КонецЕсли;
			
		ИначеЕсли СвойстваНастройки.ТипЭлементов = "СписокСПодбором" Тогда
			
			Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			
			ЭлементВывода.Размер = 5;
			ЭлементВывода.ИмяЭлемента1 = ГруппаИмя;
			
			ГруппаЗаголовокИмя = СтрЗаменить(ШаблонИмениЭлемента, "%1", "ГруппаЗаголовка");
			ДекорацияИмя       = СтрЗаменить(ШаблонИмениЭлемента, "%1", "Декорация");
			ТаблицаИмя              = СтрЗаменить(ШаблонИмениЭлемента, "%1", "СписокЗначений");
			ГруппаКолонокИмя        = СтрЗаменить(ШаблонИмениЭлемента, "%1", "ГруппаКолонок");
			КолонкаИспользованиеИмя = СтрЗаменить(ШаблонИмениЭлемента, "%1", "Колонка_Использование");
			КолонкаЗначениеИмя      = СтрЗаменить(ШаблонИмениЭлемента, "%1", "Колонка_Значение");
			КоманднаяПанельИмя = СтрЗаменить(ШаблонИмениЭлемента, "%1", "КоманднаяПанель");
			КнопкаПодборИмя    = СтрЗаменить(ШаблонИмениЭлемента, "%1", "Подбор");
			КнопкаВставитьИмя  = СтрЗаменить(ШаблонИмениЭлемента, "%1", "ВставитьИзБуфера");
			
			Прочее.ИменаОсновныхРеквизитовФормы.Вставить(СвойстваНастройки.ИдентификаторЭлемента, ТаблицаИмя);
			Прочее.ИменаЭлементовДляУстановкиСвязей.Вставить(СвойстваНастройки.ИдентификаторЭлемента, КолонкаЗначениеИмя);
			
			Если Не СвойстваНастройки.ВыводитьФлажок Или Не СвойстваНастройки.ОграничиватьВыборУказаннымиЗначениями Тогда
				
				// Группа-строка для заголовка и командной панели таблицы.
				ГруппаЗаголовокТаблицы = Элементы.Добавить(ГруппаЗаголовокИмя, Тип("ГруппаФормы"), Группа);
				ГруппаЗаголовокТаблицы.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
				ГруппаЗаголовокТаблицы.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
				ГруппаЗаголовокТаблицы.Отображение         = ОтображениеОбычнойГруппы.Нет;
				ГруппаЗаголовокТаблицы.ОтображатьЗаголовок = Ложь;
				
				// Флажок уже создан.
				Если СвойстваНастройки.ВыводитьФлажок Тогда
					Элементы.Переместить(Флажок, ГруппаЗаголовокТаблицы);
				КонецЕсли;
				
				// Заголовок / Пустая декорация.
				ПустаяДекорация = Элементы.Добавить(ДекорацияИмя, Тип("ДекорацияФормы"), ГруппаЗаголовокТаблицы);
				ПустаяДекорация.Вид                      = ВидДекорацииФормы.Надпись;
				ПустаяДекорация.Заголовок                = ?(СвойстваНастройки.ВыводитьФлажок, " ", СвойстваНастройки.Представление + ":");
				ПустаяДекорация.РастягиватьПоГоризонтали = Истина;
				
				// Кнопки.
				Если Не СвойстваНастройки.ОграничиватьВыборУказаннымиЗначениями Тогда
					Если ИнформацияОТипах.СодержитСсылочныеТипы Тогда
						КомандаПодбор = Форма.Команды.Добавить(КнопкаПодборИмя);
						КомандаПодбор.Действие    = "Подключаемый_СписокСПодбором_Подбор";
						КомандаПодбор.Заголовок   = НСтр("ru = 'Подбор'");
						КомандаПодбор.Отображение = ОтображениеКнопки.Текст;
					Иначе
						КомандаПодбор = Форма.Команды.Добавить(КнопкаПодборИмя);
						КомандаПодбор.Действие    = "Подключаемый_СписокСПодбором_Добавить";
						КомандаПодбор.Заголовок   = НСтр("ru = 'Добавить'");
						КомандаПодбор.Отображение = ОтображениеКнопки.Текст;
						КомандаПодбор.Картинка    = БиблиотекаКартинок.СоздатьЭлементСписка;
					КонецЕсли;
					
					КнопкаПодбор = Элементы.Добавить(КнопкаПодборИмя, Тип("КнопкаФормы"), ГруппаЗаголовокТаблицы);
					КнопкаПодбор.ИмяКоманды = КнопкаПодборИмя;
					КнопкаПодбор.Вид = ВидКнопкиФормы.Гиперссылка;
					
					Если Прочее.ЕстьЗагрузкаДанныхИзФайла Тогда
						КомандаВставить = Форма.Команды.Добавить(КнопкаВставитьИмя);
						КомандаВставить.Действие    = "Подключаемый_СписокСПодбором_ВставитьИзБуфера";
						КомандаВставить.Заголовок   = НСтр("ru = 'Вставить из буфера обмена...'");
						КомандаВставить.Картинка    = БиблиотекаКартинок.ЗаполнитьФорму;
						КомандаВставить.Отображение = ОтображениеКнопки.Картинка;
						
						КнопкаВставить = Элементы.Добавить(КнопкаВставитьИмя, Тип("КнопкаФормы"), ГруппаЗаголовокТаблицы);
						КнопкаВставить.ИмяКоманды = КнопкаВставитьИмя;
						КнопкаВставить.Вид = ВидКнопкиФормы.Гиперссылка;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			// Реквизит.
			БыстрыеНастройкиДобавитьРеквизит(Прочее.ПараметрыЗаполнения, ТаблицаИмя, "СписокЗначений");
			
			// Группа с отступом и таблицей.
			ГруппаСОтступом = Элементы.Добавить(ГруппаИмя + "Отступ", Тип("ГруппаФормы"), Группа);
			ГруппаСОтступом.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаСОтступом.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			ГруппаСОтступом.Отображение         = ОтображениеОбычнойГруппы.Нет;
			ГруппаСОтступом.Заголовок           = СвойстваНастройки.Представление;
			ГруппаСОтступом.ОтображатьЗаголовок = Ложь;
			
			// Декорация отступа.
			ПустаяДекорация = Элементы.Добавить(ДекорацияИмя + "Отступ", Тип("ДекорацияФормы"), ГруппаСОтступом);
			ПустаяДекорация.Вид                      = ВидДекорацииФормы.Надпись;
			ПустаяДекорация.Заголовок                = "     ";
			ПустаяДекорация.РастягиватьПоГоризонтали = Ложь;
			
			// Таблица.
			ТаблицаФормы = Элементы.Добавить(ТаблицаИмя, Тип("ТаблицаФормы"), ГруппаСОтступом);
			ТаблицаФормы.Отображение               = ОтображениеТаблицы.Список;
			ТаблицаФормы.Заголовок                 = СвойстваНастройки.Представление;
			ТаблицаФормы.ПоложениеЗаголовка        = ПоложениеЗаголовкаЭлементаФормы.Нет;
			ТаблицаФормы.ПоложениеКоманднойПанели  = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
			ТаблицаФормы.ВертикальныеЛинии         = Ложь;
			ТаблицаФормы.ГоризонтальныеЛинии       = Ложь;
			ТаблицаФормы.Шапка                     = Ложь;
			ТаблицаФормы.Подвал                    = Ложь;
			ТаблицаФормы.ИзменятьПорядокСтрок      = Истина;
			ТаблицаФормы.РастягиватьПоГоризонтали  = Истина;
			ТаблицаФормы.РастягиватьПоВертикали    = Истина;
			ТаблицаФормы.Высота                    = 3;
			
			Если СвойстваНастройки.ВыводитьФлажок Тогда
				// Для платформы 8.3.5 и ниже.
				Инструкция = ВариантыОтчетов.ИнструкцияУсловногоОформления();
				Инструкция.Поля = ТаблицаИмя + "," + КолонкаИспользованиеИмя + "," + КолонкаЗначениеИмя;
				Инструкция.Отборы.Вставить(Флажок.ПутьКДанным, Ложь);
				Инструкция.Оформление.Вставить("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
				ВариантыОтчетов.ДобавитьЭлементУсловногоОформления(Форма, Инструкция);
				
				Если Не СвойстваНастройки.ПользовательскаяНастройкаКД.Использование Тогда
					ТаблицаФормы.ЦветТекста = Форма.ЦветНеактивныхЗначенийТаблицы;
				КонецЕсли;
			КонецЕсли;
			
			// Группа колонок "в ячейке".
			ГруппаКолонок = Элементы.Добавить(ГруппаКолонокИмя, Тип("ГруппаФормы"), ТаблицаФормы);
			ГруппаКолонок.Вид         = ВидГруппыФормы.ГруппаКолонок;
			ГруппаКолонок.Группировка = ГруппировкаКолонок.ВЯчейке;
			
			// Колонка "Использование".
			КолонкаИспользованиеЭлемент = Элементы.Добавить(КолонкаИспользованиеИмя, Тип("ПолеФормы"), ГруппаКолонок);
			КолонкаИспользованиеЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
			
			// Колонка "Значение".
			КолонкаЗначениеЭлемент = Элементы.Добавить(КолонкаЗначениеИмя, Тип("ПолеФормы"), ГруппаКолонок);
			КолонкаЗначениеЭлемент.Вид = ВидПоляФормы.ПолеВвода;
			
			ЗаполнитьЗначенияСвойств(КолонкаЗначениеЭлемент, СвойстваНастройки.ДоступнаяНастройкаКД, "БыстрыйВыбор, Маска, ФормаВыбора, ФорматРедактирования");
			
			КолонкаЗначениеЭлемент.ВыборГруппИЭлементов = СвойстваНастройки.ВыборГруппИЭлементов;
			
			Если СвойстваНастройки.ОграничиватьВыборУказаннымиЗначениями Тогда
				КолонкаЗначениеЭлемент.ТолькоПросмотр = Истина;
			КонецЕсли;
			
			// Заполнение имен объектов метаданных в разрезах типов и идентификаторов элементов (для предустановленных).
			// Используется при клике по кнопке "Подбор" для получения имени формы подбора.
			Если ЗначениеЗаполнено(КолонкаЗначениеЭлемент.ФормаВыбора) Тогда
				Прочее.СоответствиеИменОбъектовМетаданных.Вставить(СвойстваНастройки.ИдентификаторЭлемента, КолонкаЗначениеЭлемент.ФормаВыбора);
			КонецЕсли;
			
			// Фиксированные параметры выбора.
			Если СвойстваНастройки.ПараметрыВыбора.Количество() > 0 Тогда
				КолонкаЗначениеЭлемент.ПараметрыВыбора = Новый ФиксированныйМассив(СвойстваНастройки.ПараметрыВыбора);
			КонецЕсли;
			
			Дополнительно = Новый Структура;
			Дополнительно.Вставить("ТаблицаИмя",              ТаблицаИмя);
			Дополнительно.Вставить("ИмяКолонкиЗначение",      КолонкаЗначениеИмя);
			Дополнительно.Вставить("ИмяКолонкиИспользование", КолонкаИспользованиеИмя);
			СвойстваНастройки.Дополнительно = Дополнительно;
			Прочее.ДобавленныеСпискиЗначений.Добавить(СвойстваНастройки);
			
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлементВывода.ИмяЭлемента1 = Неопределено Тогда
		ЗаголовокИмя = СтрЗаменить(ШаблонИмениЭлемента, "%1", "Заголовок");
		ПолеНадписи = Элементы.Добавить(ЗаголовокИмя, Тип("ДекорацияФормы"), Элементы.НеОтсортированное);
		ПолеНадписи.Вид       = ВидДекорацииФормы.Надпись;
		ПолеНадписи.Заголовок = СвойстваНастройки.Представление + ":";
		ЭлементВывода.ИмяЭлемента1 = ЗаголовокИмя;
	КонецЕсли;
	
	Если СвойстваНастройки.ТипЭлементов = "СтандартныйПериод" Тогда
		ГруппаВывода.Порядок.Вставить(0, ЭлементВывода);
	Иначе
		ГруппаВывода.Порядок.Добавить(ЭлементВывода);
	КонецЕсли;
	ГруппаВывода.Размер = ГруппаВывода.Размер + ЭлементВывода.Размер;
	
КонецПроцедуры

Процедура БыстрыеНастройкиДобавитьРеквизит(ПараметрыЗаполнения, РеквизитПолноеИмя, ТипРеквизита)
	Если ТипЗнч(ТипРеквизита) = Тип("ОписаниеТипов") Тогда
		ТипыДобавляемого = ТипРеквизита;
	ИначеЕсли ТипЗнч(ТипРеквизита) = Тип("Строка") Тогда
		ТипыДобавляемого = Новый ОписаниеТипов(ТипРеквизита);
	ИначеЕсли ТипЗнч(ТипРеквизита) = Тип("Массив") Тогда
		ТипыДобавляемого = Новый ОписаниеТипов(ТипРеквизита);
	ИначеЕсли ТипЗнч(ТипРеквизита) = Тип("Тип") Тогда
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипРеквизита);
		ТипыДобавляемого = Новый ОписаниеТипов(МассивТипов);
	Иначе
		Возврат;
	КонецЕсли;
	
	ТипыСуществующего = ПараметрыЗаполнения.Реквизиты.Существующие.Получить(РеквизитПолноеИмя);
	Если ОписанияТиповСовпадают(ТипыСуществующего, ТипыДобавляемого) Тогда
		ПараметрыЗаполнения.Реквизиты.Существующие.Удалить(РеквизитПолноеИмя);
	Иначе
		ПозицияТочки = Найти(РеквизитПолноеИмя, ".");
		Если ПозицияТочки = 0 Тогда
			ПутьКРеквизиту = "";
			КраткоеИмяРеквизита = РеквизитПолноеИмя;
		Иначе
			ПутьКРеквизиту = Лев(РеквизитПолноеИмя, ПозицияТочки - 1);
			КраткоеИмяРеквизита = Сред(РеквизитПолноеИмя, ПозицияТочки + 1);
		КонецЕсли;
		
		ПараметрыЗаполнения.Реквизиты.Добавляемые.Добавить(Новый РеквизитФормы(КраткоеИмяРеквизита, ТипыДобавляемого, ПутьКРеквизиту));
		Если ТипыСуществующего <> Неопределено Тогда
			ПараметрыЗаполнения.Реквизиты.Удаляемые.Добавить(РеквизитПолноеИмя);
			ПараметрыЗаполнения.Реквизиты.Существующие.Удалить(РеквизитПолноеИмя);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ВывестиПоПорядку(Форма, ГруппаВывода, Родитель, КоличествоКолонок, ГибкаяБалансировка = Истина) Экспорт
	Элементы = Форма.Элементы;
	Если ГибкаяБалансировка Тогда
		Если ГруппаВывода.Размер <= 7 Тогда
			КоличествоКолонок = 1;
		КонецЕсли;
	КонецЕсли;
	
	РодительИмя = Родитель.Имя;
	
	НомерКолонки = 0;
	ОсталосьКолонок = КоличествоКолонок + 1;
	ОсталосьМестаВсего = ГруппаВывода.Размер;
	ОсталосьМестаВКолонке = 0;
	
	Для Каждого ЭлементВывода Из ГруппаВывода.Порядок Цикл
		Если ОсталосьКолонок > 0
			И ЭлементВывода.Размер > ОсталосьМестаВКолонке*4 Тогда // Текущий шаг больше оставшегося места.
			НомерКолонки = НомерКолонки + 1;
			ОсталосьКолонок = ОсталосьКолонок - 1;
			ОсталосьМестаВКолонке = ОсталосьМестаВсего/ОсталосьКолонок;
			
			КолонкаВерхнегоУровня = Элементы.Добавить(РодительИмя + НомерКолонки, Тип("ГруппаФормы"), Элементы[РодительИмя]);
			КолонкаВерхнегоУровня.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
			КолонкаВерхнегоУровня.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			КолонкаВерхнегоУровня.Отображение         = ОтображениеОбычнойГруппы.Нет;
			КолонкаВерхнегоУровня.ОтображатьЗаголовок = Ложь;
			
			НомерПодгруппы = 0;
			ТекущаяГруппа1 = Неопределено;
			ТекущаяГруппа2 = Неопределено;
		КонецЕсли;
		
		Если ЭлементВывода.ИмяЭлемента2 = Неопределено Тогда // Вывод в одну колонку.
			Если ТекущаяГруппа2 <> Неопределено Тогда
				ТекущаяГруппа2 = Неопределено;
			КонецЕсли;
			Элементы.Переместить(Элементы[ЭлементВывода.ИмяЭлемента1], КолонкаВерхнегоУровня);
		Иначе
			Если ТекущаяГруппа2 = Неопределено Тогда
				НомерПодгруппы = НомерПодгруппы + 1;
				
				Колонки = Элементы.Добавить(РодительИмя + НомерКолонки + "_" + НомерПодгруппы, Тип("ГруппаФормы"), КолонкаВерхнегоУровня);
				Колонки.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
				Колонки.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
				Колонки.Отображение         = ОтображениеОбычнойГруппы.Нет;
				Колонки.ОтображатьЗаголовок = Ложь;
				
				ТекущаяГруппа1 = Элементы.Добавить(РодительИмя + НомерКолонки + "_" + НомерПодгруппы + "_1", Тип("ГруппаФормы"), Колонки);
				ТекущаяГруппа1.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
				ТекущаяГруппа1.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
				ТекущаяГруппа1.Отображение         = ОтображениеОбычнойГруппы.Нет;
				ТекущаяГруппа1.ОтображатьЗаголовок = Ложь;
				
				ТекущаяГруппа2 = Элементы.Добавить(РодительИмя + НомерКолонки + "_" + НомерПодгруппы + "_2", Тип("ГруппаФормы"), Колонки);
				ТекущаяГруппа2.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
				ТекущаяГруппа2.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
				ТекущаяГруппа2.Отображение         = ОтображениеОбычнойГруппы.Нет;
				ТекущаяГруппа2.ОтображатьЗаголовок = Ложь;
			КонецЕсли;
			Элементы.Переместить(Элементы[ЭлементВывода.ИмяЭлемента1], ТекущаяГруппа1);
			Элементы.Переместить(Элементы[ЭлементВывода.ИмяЭлемента2], ТекущаяГруппа2);
		КонецЕсли;
		
		ОсталосьМестаВсего = ОсталосьМестаВсего - ЭлементВывода.Размер;
		ОсталосьМестаВКолонке = ОсталосьМестаВКолонке - ЭлементВывода.Размер;
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Сохранение состояния формы

Функция ЗапомнитьВыделенныеСтроки(Форма, ИмяТаблицы, КлючевыеКолонки) Экспорт
	ТаблицаРеквизит = Форма[ИмяТаблицы];
	ТаблицаЭлемент = Форма.Элементы[ИмяТаблицы];
	
	Результат = Новый Структура;
	Результат.Вставить("Выделенные", Новый Массив);
	Результат.Вставить("Текущая", Неопределено);
	
	ТекущаяИдентификатор = ТаблицаЭлемент.ТекущаяСтрока;
	Если ТекущаяИдентификатор <> Неопределено Тогда
		СтрокаТаблицы = ТаблицаРеквизит.НайтиПоИдентификатору(ТекущаяИдентификатор);
		Если СтрокаТаблицы <> Неопределено Тогда
			ДанныеСтроки = Новый Структура(КлючевыеКолонки);
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаТаблицы);
			Результат.Текущая = ДанныеСтроки;
		КонецЕсли;
	КонецЕсли;
	
	ВыделенныеСтроки = ТаблицаЭлемент.ВыделенныеСтроки;
	Если ВыделенныеСтроки <> Неопределено Тогда
		Для Каждого ВыделеннаяИдентификатор Из ВыделенныеСтроки Цикл
			Если ВыделеннаяИдентификатор = ТекущаяИдентификатор Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТаблицы = ТаблицаРеквизит.НайтиПоИдентификатору(ВыделеннаяИдентификатор);
			Если СтрокаТаблицы <> Неопределено Тогда
				ДанныеСтроки = Новый Структура(КлючевыеКолонки);
				ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаТаблицы);
				Результат.Выделенные.Добавить(ДанныеСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Процедура ВосстановитьВыделенныеСтроки(Форма, ИмяТаблицы, СтрокиТаблицы) Экспорт
	ТаблицаРеквизит = Форма[ИмяТаблицы];
	ТаблицаЭлемент = Форма.Элементы[ИмяТаблицы];
	
	ТаблицаЭлемент.ВыделенныеСтроки.Очистить();
	
	Если СтрокиТаблицы.Текущая <> Неопределено Тогда
		Найденные = НайтиСтрокиТаблицы(ТаблицаРеквизит, СтрокиТаблицы.Текущая);
		Если Найденные <> Неопределено И Найденные.Количество() > 0 Тогда
			Для Каждого СтрокаТаблицы Из Найденные Цикл
				Если СтрокаТаблицы <> Неопределено Тогда
					Идентификатор = СтрокаТаблицы.ПолучитьИдентификатор();
					ТаблицаЭлемент.ТекущаяСтрока = Идентификатор;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ДанныеСтроки Из СтрокиТаблицы.Выделенные Цикл
		Найденные = НайтиСтрокиТаблицы(ТаблицаРеквизит, ДанныеСтроки);
		Если Найденные <> Неопределено И Найденные.Количество() > 0 Тогда
			Для Каждого СтрокаТаблицы Из Найденные Цикл
				Если СтрокаТаблицы <> Неопределено Тогда
					ТаблицаЭлемент.ВыделенныеСтроки.Добавить(СтрокаТаблицы.ПолучитьИдентификатор());
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция НайтиСтрокиТаблицы(ТаблицаРеквизит, ДанныеСтроки)
	Если ТипЗнч(ТаблицаРеквизит) = Тип("ДанныеФормыКоллекция") Тогда // Таблица значений.
		Возврат ТаблицаРеквизит.НайтиСтроки(ДанныеСтроки);
	ИначеЕсли ТипЗнч(ТаблицаРеквизит) = Тип("ДанныеФормыДерево") Тогда // Дерево значений.
		Возврат НайтиРекурсивно(ТаблицаРеквизит.ПолучитьЭлементы(), ДанныеСтроки);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция НайтиРекурсивно(НаборСтрок, ДанныеСтроки, Найденные = Неопределено)
	Если Найденные = Неопределено Тогда
		Найденные = Новый Массив;
	КонецЕсли;
	Для Каждого СтрокаТаблицы Из НаборСтрок Цикл
		ЗначенияСовпадают = Истина;
		Для Каждого КлючИЗначение Из ДанныеСтроки Цикл
			Если СтрокаТаблицы[КлючИЗначение.Ключ] <> КлючИЗначение.Значение Тогда
				ЗначенияСовпадают = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗначенияСовпадают Тогда
			Найденные.Добавить(СтрокаТаблицы);
		КонецЕсли;
		НайтиРекурсивно(СтрокаТаблицы.ПолучитьЭлементы(), ДанныеСтроки, Найденные);
	КонецЦикла;
	Возврат Найденные;
КонецФункции

#КонецОбласти
