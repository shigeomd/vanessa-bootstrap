////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ДВИЖЕНИЯМИ ДОКУМЕНТОВ

// Процедура удаления существующих движений документа при перепроведении (отмене проведения)
Процедура УдалитьДвиженияРегистратора(ДокументОбъект, Отказ, РучнаяКорректировка = Ложь, ВыборочноОчищатьРегистры = Истина) Экспорт

	Если РучнаяКорректировка Тогда
		ИзменитьАктивностьПоРегистратору(ДокументОбъект, Отказ, Ложь);
		возврат;
	КонецЕсли;

	Если ВыборочноОчищатьРегистры Тогда
		СписокРегистровДляОчисткиДвижений = Новый Массив;
		//СписокРегистровДляОчисткиДвижений.Добавить(Тип("РегистрНакопленияНаборЗаписей.РасходыПриУСН"));
	КонецЕсли;

	//Очистка движений документа
	Для Каждого Движение ИЗ ДокументОбъект.Движения Цикл

		Если ВыборочноОчищатьРегистры И (СписокРегистровДляОчисткиДвижений.Найти(ТипЗнч(Движение))<>неопределено) Тогда
			Продолжить;
		КонецЕсли;
		Движение.Очистить();

	КонецЦикла;

	//Запись пустых наборов движений в ИБ(очистка старых движений)
	Для Каждого Движение ИЗ ДокументОбъект.Движения Цикл

		Если (ВыборочноОчищатьРегистры И (СписокРегистровДляОчисткиДвижений.Найти(ТипЗнч(Движение))<>неопределено))
			ИЛИ НЕ ВыборочноОчищатьРегистры Тогда

			Если Движение.Количество() > 0 Тогда
				ПозицияТочки = Найти(Строка(Движение), ".");
				ТипРегистра = Лев(Строка(Движение), ПозицияТочки - 13);
				ИмяРегистра = СокрП(Сред(Строка(Движение), ПозицияТочки + 1));

				ЕСли ТипРегистра = "РегистрНакопления" Тогда
					МетаданныеНабора = Метаданные.РегистрыНакопления[ИмяРегистра];
					Набор = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();

				ИначеЕсли ТипРегистра = "РегистрБухгалтерии" Тогда
					МетаданныеНабора = Метаданные.РегистрыБухгалтерии[ИмяРегистра];
					Набор = РегистрыБухгалтерии[ИмяРегистра].СоздатьНаборЗаписей();

				ИначеЕсли ТипРегистра = "РегистрСведений" Тогда
					МетаданныеНабора = Метаданные.РегистрыСведений[ИмяРегистра];
					Набор = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();

				ИначеЕсли ТипРегистра = "РегистрРасчета" Тогда
					МетаданныеНабора = Метаданные.РегистрыРасчета[ИмяРегистра];
					Набор = РегистрыРасчета[ИмяРегистра].СоздатьНаборЗаписей();

				КонецЕсли;

				Если НЕ ПравоДоступа("Изменение", МетаданныеНабора) Тогда
					// отсутствуют права на всю таблицу регистра
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='Нарушение прав доступа: %1'"),
								МетаданныеНабора.Синоним);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
					Возврат;
				КонецЕсли;

				Набор.Отбор.Регистратор.Установить(ДокументОбъект.Ссылка);

			Иначе
				Набор = Движение;
			КонецЕсли;

			Попытка
				Набор.Записать();
			Исключение
				// возможно «сработал» RLS или механизм даты запрета изменения
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки(), , , , Отказ);
				ОписаниеОшибки = ИнформацияОбОшибке();
				ЗаписьЖурналаРегистрации(НСТр("ru = 'Операция не выполнена'"), УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки.Описание);
				ВызватьИсключение НСтр("ru='Операция не выполнена'");
			КонецПопытки;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Процедура включения активности движений при проведении документа, движения которого
// заданы вручную
Процедура ИзменитьАктивностьПоРегистратору(ДокументОбъект, Отказ,ВключитьАктивность = Истина) Экспорт

	Для Каждого Набор ИЗ ДокументОбъект.Движения Цикл

		Набор.Прочитать();
		Набор.УстановитьАктивность(ВключитьАктивность);

		Попытка
			Набор.Записать();
		Исключение
			// возможно «сработал» RLS или механизм даты запрета изменения
			ОписаниеОшибки = ИнформацияОбОшибке();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ОписаниеОшибки), , , , Отказ);
			ЗаписьЖурналаРегистрации(НСТр("ru = 'Операция не выполнена'"), 
				УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ОписаниеОшибки));
				
			ВызватьИсключение НСтр("ru='Операция не выполнена'");
		КонецПопытки;

	КонецЦикла;

КонецПроцедуры

Функция ПолучитьСтруктуруИзРезультатаЗапроса(РезультатЗапроса) Экспорт

	СтруктураПараметров = Новый Структура;

	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Для каждого КолонкаРезультата Из РезультатЗапроса.Колонки Цикл
		СтруктураПараметров.Вставить(КолонкаРезультата.Имя, Выборка[КолонкаРезультата.Имя]);
	КонецЦикла;

    Возврат СтруктураПараметров;

КонецФункции

Функция ТекстРазделителяЗапросовПакета() Экспорт

	ТекстРазделителя =
	"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";

	Возврат ТекстРазделителя;

КонецФункции

Процедура РаспределитьСуммуПоКолонкеТаблицы(РаспределяемаяСумма, Таблица, ИмяКолонки, ИмяКолонкиБазы = "") Экспорт

	Если РаспределяемаяСумма <> 0 Тогда
		Если ПустаяСтрока(ИмяКолонкиБазы) Тогда
			МассивСтарыхСумм = Таблица.ВыгрузитьКолонку(ИмяКолонки);
		Иначе
			МассивСтарыхСумм = Таблица.ВыгрузитьКолонку(ИмяКолонкиБазы);
		КонецЕсли;
		МассивНовыхСумм = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(РаспределяемаяСумма, МассивСтарыхСумм);
		Если МассивНовыхСумм <> Неопределено Тогда
	 		Таблица.ЗагрузитьКолонку(МассивНовыхСумм, ИмяКолонки);
		КонецЕсли; 
	Иначе
		Таблица.ЗаполнитьЗначения(0, ИмяКолонки);
	КонецЕсли;

КонецПроцедуры

// Возвращает список обязательных колонок (через запятую), отсутствующих в таблице значений
//
//Параметры:
//	Таблица 			- <ТаблицаЗначений> - проверяемая таблица
//	ОбязательныеКолонки - <Строка> - имена колонок, которые обязательно должны присутствовать в таблице
//
//Возвращаемое значение:
//	<Строка> - имена отсутствующих в таблице колонок через запятую
Функция ПроверитьКолонкиТаблицыЗначений(Таблица, ОбязательныеКолонки)	Экспорт

	СтруктураКолонок = Новый Структура(ОбязательныеКолонки);
	КолонкиТаблицы = Таблица.Колонки;
	СтрокаНеНайденных = "";

	Для Каждого ОбязательнаяКолонка Из СтруктураКолонок Цикл

		Если КолонкиТаблицы.Найти(ОбязательнаяКолонка.Ключ) = Неопределено Тогда
			СтрокаНеНайденных = СтрокаНеНайденных + ?(СтрокаНеНайденных = "", "", ", ") + ОбязательнаяКолонка.Ключ;
		КонецЕсли;

	КонецЦикла;

	Возврат СтрокаНеНайденных;

КонецФункции

Функция ПолучитьТаблицуПараметровПроведения(ИсходнаяТаблица, СписокКолонок) Экспорт

	Если ИсходнаяТаблица = Неопределено Тогда
		
		ТаблицаРезультат = Новый ТаблицаЗначений;
		Колонки = Новый Структура(СписокКолонок);
		Для каждого Колонка Из Колонки Цикл
			ТаблицаРезультат.Колонки.Добавить(Колонка.Ключ);
		КонецЦикла;
		Возврат ТаблицаРезультат;

	Иначе

		Возврат ИсходнаяТаблица.Скопировать(, СписокКолонок);

	КонецЕсли;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕРКИ НАЛИЧИЯ И ЗАПОЛНЕНИЯ РЕВИЗИТОВ

// Позволяет определить есть ли среди реквизитов шапки документа
// реквизит с переданным именем.
//
// Параметры:
//  ИмяРеквизита - строковое имя искомого реквизита,
//  МетаданныеДокумента - объект описания метаданных документа, среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция ЕстьРеквизитДокумента(ИмяРеквизита, МетаданныеДокумента) Экспорт

	Возврат ОбщегоНазначения.ЕстьРеквизитОбъекта(ИмяРеквизита, МетаданныеДокумента);

КонецФункции // ЕстьРеквизитДокумента()

Функция ЕстьРеквизитТабЧастиДокумента(ИмяРеквизита, МетаданныеДокумента, ИмяТабЧасти) Экспорт

	Возврат ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента(ИмяРеквизита, МетаданныеДокумента, ИмяТабЧасти);
	
КонецФункции // ЕстьРеквизитТабЧастиДокумента()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФИЗЛИЦАМИ

// Функция формирует фамилию и инициалы либо по наименованию элемента спр-ка ФизическиеЛица
//  либо по переданным строкам.
//  Если передан Объект, то извлеченная из него строка считается совокупностью
//  Фамилия + Имя + Отчество, разделенными пробелами.
//
// Параметры
//  Объект		- строка или ссылка или объект элемента спр-ка ФизическиеЛица.
//  Фамилия		- фамилия физ. лица.
//  Имя			- имя физ. лица.
//  Отчество	- отчество физ. лица.
//
// Возвращаемое значение
//  Фамилия и Инициалы одной строкой. Побочные эффекты - переданная целая строка
//  Побочные эффекты - переданная целая строка разбивается на подстроки, соответствующие
//  отдельным Фамилии,Имени и Отчеству
//
Функция ФамилияИнициалыФизЛица(Объект = "", Фамилия = " ", Имя = " ", Отчество = " ",Знач ДатаСреза = Неопределено) Экспорт

	ТипОбъекта = ТипЗнч(Объект);
	Если ТипОбъекта = Тип("Строка") Тогда
		ФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(Объект)," ");

	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ФизическиеЛица") или ТипОбъекта = Тип("СправочникОбъект.ФизическиеЛица") ИЛИ
			  ТипОбъекта = Тип("СправочникСсылка.Сотрудники") или ТипОбъекта = Тип("СправочникОбъект.Сотрудники") Тогда
			  ДатаСреза = ?(ЗначениеЗаполнено(ДатаСреза), ДатаСреза, ТекущаяДата());
			  
			  ФизическоеЛицо = УчетЗарплаты.ПолучитьФизическоеЛицо(Объект);
			  ДанныеФизическогоЛица = УчетЗарплаты.ДанныеФизическихЛиц(,ФизическоеЛицо, ДатаСреза, Истина);
			  Фамилия = ДанныеФизическогоЛица.Фамилия;
			  Имя	  = ДанныеФизическогоЛица.Имя;
			  Отчество= ДанныеФизическогоЛица.Отчество;
			  Возврат ДанныеФизическогоЛица.Представление;
			  
	Иначе

		// используем возможно переданные отдельные строки
		Возврат ?(НЕ ПустаяСтрока(Фамилия),
				Фамилия + ?(НЕ ПустаяСтрока(Имя)," " + Лев(Имя,1) + "." + ?(НЕ ПустаяСтрока(Отчество),Лев(Отчество,1)+".", ""), ""),
				"")
	КонецЕсли;

	КоличествоПодстрок = ФИО.Количество();
	Фамилия = ?(КоличествоПодстрок > 0,ФИО[0],"");
	Имя		= ?(КоличествоПодстрок > 1,ФИО[1],"");
	Отчество= ?(КоличествоПодстрок > 2,ФИО[2],"");

	Возврат ?(НЕ ПустаяСтрока(Фамилия),
				Фамилия + ?(НЕ ПустаяСтрока(Имя)," " + Лев(Имя,1) + "." + ?(НЕ ПустаяСтрока(Отчество),Лев(Отчество,1)+".", ""), ""),
				"");

КонецФункции

// Процедура возвращает паспортные данные физлица в виде строки
//
// Параметры:
//  ФизЛицо - ссылка на элемент справочника "Физические лица",по которому необходимо
//            получить паспортные данные.
//
// Возвращаемое значение:
//  Строка с данными об удостоверении личности физического лица
//
Функция ПолучитьПаспортныеДанныеСтрокой(Организация, ФизЛицо) Экспорт
    		
	СтруктураПаспортныхДанных = УчетЗарплаты.ДанныеФизическихЛиц(Организация, ФизЛицо, ОбщегоНазначенияБП.ПолучитьРабочуюДату());

	Если ЗначениеЗаполнено(СтруктураПаспортныхДанных.ПредставлениеДокумента) Тогда
		Возврат СтруктураПаспортныхДанных.ПредставлениеДокумента;
	Иначе
		Возврат НСтр("ru = 'Отсутствуют данные об удостоверении личности.'");
	КонецЕсли;

КонецФункции // ПолучитьПаспортныеДанныеСтрокой()

// Функция формирует фамилию, имя и отчество одной строкой
//
// Параметры
//  Фамилия  - фамилия физ. лица.
//  Имя      - имя физ. лица.
//  Отчество - отчество физ. лица.
//  ФИОКратко    - Булево - если Истина (по умолчанию), Представление физ.лица включает фамилию и инициалы, если Ложь - фамилию и полностью имя и отчество
//
// Возвращаемое значение
//  Фамилия, имя, отчество одной строкой.
//
Функция ПолучитьФамилиюИмяОтчество(Фамилия = " ", Имя = " ", Отчество = " ", ФИОКратко = Истина) Экспорт

	Если ФИОКратко Тогда
		Возврат ?(НЕ ПустаяСтрока(Фамилия), Фамилия + ?(НЕ ПустаяСтрока(Имя)," " + Лев(Имя,1) + "." +
				?(НЕ ПустаяСтрока(Отчество) ,
				Лев(Отчество,1)+".", ""), ""), "");
	Иначе
		Возврат ?(НЕ ПустаяСтрока(Фамилия), Фамилия + ?(НЕ ПустаяСтрока(Имя)," " + Имя +
				?(НЕ ПустаяСтрока(Отчество) , " " + Отчество, ""), ""), "");
	КонецЕсли;

КонецФункции // ПолучитьФамилиюИмяОтчество()

// Функция возвращает совокупность данных о физическом лице в виде структуры,
// В совокупность данных входит ФИО, должность в заданной организации,
// паспортные данные и др.
//
// Параметры:
//  Организация  - СправочникСсылка.Организации - организация, по которой
//                 определяется должность и подразделение работника
//  ФизЛицо      - СправочникСсылка.ФизическиеЛица - физическое лицо,
//                 по которому возвращается совокупность данных
//  ДатаСреза    - Дата - дата, на которую считываются данные
//  ФИОКратко    - Булево - если Истина (по умолчанию), Представление физ.лица включает фамилию и инициалы, если Ложь - фамилию и полностью имя и отчество
//
// Возвращаемое значение:
//  Структура    - Структура с совокупностью данных о физическом лице:
//                 - Фамилия
//                 - Имя
//                 - Отчество
//                 - Представление (Фамилия И.О.)
//                 - Подразделение
//                 - ВидДокумента
//                 - Серия
//                 - Номер
//                 - ДатаВыдачи
//                 - КемВыдан
//                 - КодПодразделения
//
Функция ДанныеФизЛица(Организация, ФизЛицо, ДатаСреза, ФИОКратко = Истина) Экспорт
	
	Возврат УчетЗарплаты.ДанныеФизическихЛиц(Организация, ФизЛицо, ДатаСреза, ФИОКратко);

КонецФункции // ДанныеФизЛица

// Функция возвращает совокупность данных о физических лицах в виде таблицы
// значений. В совокупность данных входит ФИО, должность в заданной
// организации, паспортные данные и др.
//
// Параметры:
//  Организация  - СправочникСсылка.Организации - организация, по которой
//                 определяется должность и подразделение работника(ов)
//  ФизЛицо      - СправочникСсылка.ФизическиеЛица или Массив - физическое лицо
//                 или список физ. лиц, по которым возвращается совокупность
//                 данных
//  ДатаСреза    - Дата - дата, на которую считываются данные
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица с совокупностью данных о физическом лице.
//                  Колонки: возвращаемой таблицы:
//                  - Фамилия
//                  - Имя
//                  - Отчество
//                  - Представление (Фамилия И.О.)
//                  - Подразделение
//                  - ВидДокумента
//                  - Серия
//                  - Номер
//                  - ДатаВыдачи
//                  - КемВыдан
//                  - КодПодразделения
//
Функция ДанныеФизЛиц(Организация, ФизЛицо, ДатаСреза) Экспорт
	
	Возврат УчетЗарплаты.ДанныеФизическихЛиц(Организация, ФизЛицо, ДатаСреза, Истина, Истина);

КонецФункции // ДанныеФизЛиц

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ДОКУМЕНТАМИ

// Функция формирует представление заголовка документа
//
// Возвращаемое значение:
//  Строка - представление номера документа
//
Функция СформироватьЗаголовокДокумента(ДокументОбъект, НазваниеДокумента = "") Экспорт

	Если ДокументОбъект = Неопределено Тогда
		Возврат "";
	Иначе
		Возврат ?(НЕ ЗначениеЗаполнено(НазваниеДокумента), ДокументОбъект.Метаданные().Синоним, НазваниеДокумента) + " № "
			+ ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДокументОбъект.Номер, Истина, Ложь)
			+ " от " + Формат(ДокументОбъект.Дата, "ДФ='дд ММММ гггг'") + " г.";
	КонецЕсли;

КонецФункции // СформироватьЗаголовокДокумента()

// Функция формирует представление суммы прописью в указанной валюте
//
// Возвращаемое значение:
//  Строка - сумма прописью
//
Функция СформироватьСуммуПрописью(Сумма, Валюта) Экспорт

	Если Валюта.ПараметрыПрописиНаРусском = "" Тогда
		Возврат ФорматСумм(Сумма);
	Иначе
		Возврат ЧислоПрописью(Сумма, ,Валюта.ПараметрыПрописиНаРусском);
	КонецЕсли;

КонецФункции // СформироватьСуммуПрописью()

// Стандартная для данной конфигурации функция форматирования сумм
//
// Параметры:
//  Сумма  - число, которое мы хотим форматировать,
//  Валюта - ссылка на элемент справочника валют, если задан, то к в результирующую строку
//           будет добавлено представление валюты
//  ЧН     - строка, представляющая нулевое значение числа,
//  ЧРГ    - символ-разделитель групп целой части числа.
//
// Возвращаемое значение:
//  Отформатированная должным образом строковое представление суммы.
//
Функция ФорматСумм(Сумма, Валюта = Неопределено, ЧН = "", ЧРГ = "") Экспорт

	ФорматнаяСтрока = "ЧЦ=15;ЧДЦ=2" +
					?(НЕ ЗначениеЗаполнено(ЧН), "", ";" + "ЧН=" + ЧН) +
					?(НЕ ЗначениеЗаполнено(ЧРГ),"", ";" + "ЧРГ=" + ЧРГ);

	РезультирующаяСтрока = СокрЛ(Формат(Сумма, ФорматнаяСтрока));

	Если ЗначениеЗаполнено(Валюта) Тогда
		РезультирующаяСтрока = РезультирующаяСтрока + " " + СокрП(Валюта);
	КонецЕсли;

	Возврат РезультирующаяСтрока;

КонецФункции // ФорматСумм()

// Изменяет текущую страницу формы документа, если при открытии формы
// первая страница содержит пустую табличную часть, но на форме есть еще страницы
// с непустой табличной частью.
// Проверяется также видимость элемента
//
// Параметры:
//   Форма                - форма документа, который открывается;
//   СписокТабличныхПолей - Список значений - табличных полей, где
//                            Значение - имя элемента формы,
//                            Представление - имя табличной части (в метаданных)
//
Функция ПолучитьПервуюНепустуюВидимуюТабличнуюЧасть(Форма, СписокТабличныхПолей) Экспорт

	Для Каждого Элемент из СписокТабличныхПолей Цикл
		Если Форма.Объект[Элемент.Представление].Количество() > 0 Тогда
			Если Форма.Элементы[Элемент.Значение].Видимость Тогда
				// Эта табличная часть - первая видимая, у которой есть данные
				Возврат Элемент.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат "";

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАПОЛНЕНИЯ ПАРАМЕТРОВ СЕАНСА

// Функция применяется при необходимости получить сведения об учетной политике организации.
//
// Параметры: нет
//
// Возвращаемое значение - дерево значений.
//  На первом уровне дерева - список организаций, для которых задана учетная политика
//  На втором уровне дерева - записи учетной политики по организации, каждая запись хранится в дереве как структура
//
Функция ЗаполнениеУчетнойПолитики() Экспорт

	Запрос = Новый Запрос();

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	*
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитика";

	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Сортировать("Период");

	ДеревоУчетнойПолитики = Новый ДеревоЗначений;
	ДеревоУчетнойПолитики.Колонки.Добавить("Организация");
	ДеревоУчетнойПолитики.Колонки.Добавить("Период");
	ДеревоУчетнойПолитики.Колонки.Добавить("УчетнаяПолитика");

	Для каждого Строка Из Результат Цикл
		УчетнаяПолитикаОрганизации = ДеревоУчетнойПолитики.Строки.Найти(Строка.Организация, "Организация");
		Если УчетнаяПолитикаОрганизации = Неопределено Тогда
			УчетнаяПолитикаОрганизации = ДеревоУчетнойПолитики.Строки.Добавить();
			УчетнаяПолитикаОрганизации.Организация = Строка.Организация;
		КонецЕсли;
		ПоПериоду = УчетнаяПолитикаОрганизации.Строки.Добавить();
		ПоПериоду.Период = Строка.Период;

		СтруктураУчетнойПолитики = Новый Структура;
		Для Каждого Колонка Из Результат.Колонки Цикл
			СтруктураУчетнойПолитики.Вставить(Колонка.Имя, Строка[Колонка.Имя]);
		КонецЦикла;
		СтруктураУчетнойПолитики.Вставить("УСН",
			СтруктураУчетнойПолитики.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная);

		ПоПериоду.УчетнаяПолитика = СтруктураУчетнойПолитики;

	КонецЦикла;

	Возврат ДеревоУчетнойПолитики;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ТАБЛИЦАМИ

// Добавляет в таблицу значений строки из другой таблицы значений и
// в них значения колонок с совпадающими наименованиями.
//
// Параметры:
//  ТаблицаИсточник - таблица значений, откуда берутся значения.
//  ТаблицаПриемник - таблица значений, куда добавляются строки.
//
Процедура ЗагрузитьВТаблицуЗначений(ТаблицаИсточник, ТаблицаПриемник) Экспорт

	Для каждого СтрокаТаблицыИсточника Из ТаблицаИсточник Цикл

		СтрокаТаблицыПриемника = ТаблицаПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);

	КонецЦикла;

КонецПроцедуры // ЗагрузитьВТаблицуЗначений()

Процедура УпорядочитьТаблицуПоДокументу(ТаблицаЗначений, КолонкаДокумента, КолонкаДаты, Направление = "Возр") Экспорт

	Если ТаблицаЗначений.Колонки.Найти(КолонкаДаты) = Неопределено Тогда
		ТаблицаЗначений.Колонки.Добавить(КолонкаДаты, ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	КонецЕсли;
	
	Если ТаблицаЗначений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьДатуДокументаКРезультатуЗапроса(ТаблицаЗначений, КолонкаДокумента, КолонкаДаты);
	
	СписокКолонок = КолонкаДаты + " " + Направление + ", " + КолонкаДокумента + " " + Направление;
	ТаблицаЗначений.Сортировать(СписокКолонок, Новый СравнениеЗначений);
	
КонецПроцедуры

Процедура ДобавитьДатуДокументаКРезультатуЗапроса(Результат, КолонкаДокумента, КолонкаСДатой) Экспорт

	КэшПоТипам = Новый Соответствие;
	
	Для каждого СтрокаТаблицы из Результат Цикл
		//Для каждого СтрокаТаблицы из Строка.строки Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы[КолонкаДокумента]) тогда
			Продолжить;
		КонецЕсли;
		
		ТипТекущегоДокумента = ТипЗнч(СтрокаТаблицы[КолонкаДокумента]);
		МассивТипа = КэшПоТипам[ТипТекущегоДокумента];
		Если МассивТипа = Неопределено Тогда
			МассивТипа = Новый Массив;
			КэшПоТипам.Вставить(ТипТекущегоДокумента, МассивТипа);
		КонецЕсли;
		МассивТипа.Добавить(СтрокаТаблицы[КолонкаДокумента]);
		//КонецЦикла;
	КонецЦикла;
	
	Если КэшПоТипам.Количество()=0 тогда
		Возврат;
	КонецЕсли;
	
	Запрос = новый запрос;
	
	Для Каждого КлючИЗначение ИЗ КэшПоТипам Цикл
		ИмяМетаданных = Метаданные.НайтиПоТипу(КлючИЗначение.Ключ).Имя;
		
		Запрос.Текст = Запрос.Текст+
		?(Запрос.Текст="","",
		"
		|Объединить все")+
		"
		|	ВЫБРАТЬ
		|		Док.Ссылка Как Ссылка,
		|		Док.Дата
		|	ИЗ Документ."+ИмяМетаданных+" КАК Док
		|	Где Док.ссылка в  (&ДокументыТипа_"+ИмяМетаданных+")";
		УдалитьПовторяющиесяЭлементыМассива(КлючИЗначение.Значение);
		Запрос.УстановитьПараметр("ДокументыТипа_"+ИмяМетаданных, КлючИЗначение.Значение);
		
	КонецЦикла;
	
	Результат.Индексы.Добавить(КолонкаДокумента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить(КолонкаДокумента, Выборка.Ссылка);
		
		НайденныеСтроки = Результат.НайтиСтроки(ПараметрыОтбора);
		Для Каждого строка ИЗ НайденныеСтроки Цикл
			строка[КолонкаСДатой] = Выборка.Дата;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // ДобавитьДатуДокументаКРезультатуЗапроса()

Процедура ПронумероватьТаблицу(ТаблицаЗначений, ИмяКолонкиНомера = "НомерСтроки") Экспорт

	Если ТаблицаЗначений.Колонки.Найти(ИмяКолонкиНомера) = Неопределено Тогда
		ТаблицаЗначений.Колонки.Добавить(ИмяКолонкиНомера, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	КонецЕсли;

	Ном = 1;
	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		СтрокаТаблицы[ИмяКолонкиНомера] = Ном;
		Ном = Ном + 1;
	КонецЦикла;

КонецПроцедуры

Функция ПустаяТаблицаРегистраНакопления(ИмяРегистра) Экспорт

	ПустаяТаблица = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей().ВыгрузитьКолонки();
	ПустаяТаблица.Колонки.Удалить("Регистратор");
	ПустаяТаблица.Колонки.Удалить("МоментВремени");
	ПустаяТаблица.Колонки.Удалить("Активность");
	Если ПустаяТаблица.Колонки.Найти("ВидДвижения") <> Неопределено Тогда
		ПустаяТаблица.Колонки.Удалить("ВидДвижения");
	КонецЕсли;

	Возврат ПустаяТаблица;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ УПРАВЛЕНИЯ НОМЕРАМИ ДОКУМЕНТОВ

// Функция возвращает массив вышестоящих групп указанного элемента.
//
// Параметры:
//  Элемент      - Элемент справочника, для которого ищется родитель
//
// Возвращаемое значение
//  Массив вышестоящих групп
//
Функция ПолучитьСписокВышеСтоящихГрупп(ЭлементСправочника) Экспорт

	Результат = Новый Массив;

	Если НЕ ЗначениеЗаполнено(ЭлементСправочника) Тогда
		Возврат Результат;
	КонецЕсли;

	МетаданныеСправочника = ЭлементСправочника.Метаданные();
	Если НЕ МетаданныеСправочника.Иерархический Тогда
		Возврат Результат;
	КонецЕсли;
	ИмяСправочника = МетаданныеСправочника.Имя;
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Справочник1.Родитель КАК Родитель1,
	|	Справочник2.Родитель КАК Родитель2,
	|	Справочник3.Родитель КАК Родитель3,
	|	Справочник4.Родитель КАК Родитель4,
	|	Справочник5.Родитель КАК Родитель5
	|ИЗ
	|	Справочник." + ИмяСправочника + " КАК Справочник1
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяСправочника + " КАК Справочник2
	|		ПО (Справочник2.Ссылка = Справочник1.Родитель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяСправочника + " КАК Справочник3
	|		ПО (Справочник3.Ссылка = Справочник2.Родитель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяСправочника + " КАК Справочник4
	|		ПО (Справочник4.Ссылка = Справочник3.Родитель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяСправочника + " КАК Справочник5
	|		ПО (Справочник5.Ссылка = Справочник4.Родитель)
	|ГДЕ
	|	Справочник1.Ссылка = &Ссылка";

	ТекущийЭлемент = ЭлементСправочника;

	Пока ЗначениеЗаполнено(ТекущийЭлемент) Цикл
		Запрос.УстановитьПараметр("Ссылка", ТекущийЭлемент);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Для Индекс = 1 по 5 Цикл
				ТекущийЭлемент = Выборка["Родитель" + Индекс];
				Если ЗначениеЗаполнено(ТекущийЭлемент) Тогда
					Результат.Добавить(ТекущийЭлемент);
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ТекущийЭлемент = Неопределено;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции

// Функция возвращает массив вышестоящих групп указанного элемента.
//
// Параметры:
//  МассивЭлементовСправочника      - Массив элементов справочника, для которого ищются родители
//                                    Все элементы массива должны быть одного вида!
//
// Возвращаемое значение
//  Соответствие массивов вышестоящих групп
//
Функция ПолучитьСписокВышеСтоящихГруппЭлементов(МассивЭлементовСправочника) Экспорт

	Результат = Новый Соответствие;
	
	Если МассивЭлементовСправочника.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого ЭлементСправочника Из МассивЭлементовСправочника Цикл
		Результат.Вставить(ЭлементСправочника, Новый Массив);
	КонецЦикла;
	
	МетаданныеСправочника = МассивЭлементовСправочника[0].Метаданные();
	Если НЕ МетаданныеСправочника.Иерархический Тогда
		Возврат Результат;
	КонецЕсли;
	
	ИмяСправочника = МетаданныеСправочника.Имя;
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Справочник1.Ссылка КАК Элемент,
	|	Справочник1.Родитель КАК Родитель1,
	|	Справочник2.Родитель КАК Родитель2,
	|	Справочник3.Родитель КАК Родитель3,
	|	Справочник4.Родитель КАК Родитель4,
	|	Справочник5.Родитель КАК Родитель5
	|ИЗ
	|	Справочник.Номенклатура КАК Справочник1
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Справочник2
	|		ПО (Справочник2.Ссылка = Справочник1.Родитель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Справочник3
	|		ПО (Справочник3.Ссылка = Справочник2.Родитель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Справочник4
	|		ПО (Справочник4.Ссылка = Справочник3.Родитель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Справочник5
	|		ПО (Справочник5.Ссылка = Справочник4.Родитель)
	|ГДЕ
	|	Справочник1.Ссылка В(&МассивСсылок)";
	
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "Номенклатура", ИмяСправочника);
	
	//	Таблица соответствия групп и элементов (начальной точки иерархии):
	//		Родитель - группа справочника
	//		Элемент - элемент справочника, для которого строится иерархия
	СоответствиеГруппИЭлементов = Новый ТаблицаЗначений;
	СоответствиеГруппИЭлементов.Колонки.Добавить("Родитель",	Новый ОписаниеТипов("СправочникСсылка." + ИмяСправочника));
	СоответствиеГруппИЭлементов.Колонки.Добавить("Элемент",		Новый ОписаниеТипов("СправочникСсылка." + ИмяСправочника));
	СоответствиеГруппИЭлементов.Индексы.Добавить("Родитель");
	Для Каждого ЭлементСправочника Из МассивЭлементовСправочника Цикл
		НовоеСоответствие = СоответствиеГруппИЭлементов.Добавить();
		НовоеСоответствие.Родитель	= ЭлементСправочника;
		НовоеСоответствие.Элемент	= ЭлементСправочника;
	КонецЦикла;
	
	Отбор	= Новый Структура("Родитель");
	
	ТекущийМассивСсылок = МассивЭлементовСправочника;
	
	Пока ТекущийМассивСсылок.Количество() > 0 Цикл
		
		Запрос.УстановитьПараметр("МассивСсылок", УдалитьПовторяющиесяЭлементыМассива(ТекущийМассивСсылок));
		Выборка = Запрос.Выполнить().Выбрать();
		
		ТекущийМассивСсылок	= Новый Массив;
		
		Пока Выборка.Следующий() Цикл
			
			Отбор.Родитель = Выборка.Элемент;
			
			НайденныеСтроки = СоответствиеГруппИЭлементов.НайтиСтроки(Отбор);
			Для Каждого СоответствиеГруппыИЭлемента Из НайденныеСтроки Цикл
				
				ЭлементСправочника	= СоответствиеГруппыИЭлемента.Элемент;
				
				МассивВышеСтоящихГруп	= Результат.Получить(ЭлементСправочника);
				
				Для Индекс = 1 по 5 Цикл
					
					Родитель = Выборка["Родитель" + Индекс];
					Если ЗначениеЗаполнено(Родитель) Тогда
						
						МассивВышеСтоящихГруп.Добавить(Родитель);
						Если Индекс = 5 Тогда
							ТекущийМассивСсылок.Добавить(Родитель);
							НовоеСоответствие = СоответствиеГруппИЭлементов.Добавить();
							НовоеСоответствие.Родитель	= Родитель;
							НовоеСоответствие.Элемент	= ЭлементСправочника;
						КонецЕсли;
						
					Иначе
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// Формирует строку представления документа для сообщений при проведении.
//
// Параметры
//  Документ - ссылка на проводимый документ.
//
// Возвращаемое значение
//  Строка с представлением документа.
//
Функция ПредставлениеДокументаПриПроведении(Документ) Экспорт
	
	МетаданныеДокумента = Документ.Метаданные();
	
	ВидОперацииСтр = "";
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВидОперации", МетаданныеДокумента) Тогда
		ВидОперацииСтр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru = ' (%1)'"), Документ.ВидОперации);
	КонецЕсли;
	
	ПредставлениеДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Проведение документа: %1%2'"), СокрЛП(Документ), ВидОперацииСтр);
	
	Возврат ПредставлениеДокумента;

КонецФункции // ПредставлениеДокументаПриПроведении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С УПРАВЛЯЕМЫМИ БЛОКИРОВКАМИ

// Устанавливает управляемую блокировку таблицы
//
// Параметры:
//  СтруктураПараметров 		- <Структура>. Структура параметров блокировки. Обязательный параметр.
//								Обязательно должна содержать свойства:
//								"ИмяТаблицы" - <Строка> - имя таблицы, на которую накладывается блокировка.
//									Например: "АвансовыйОтчет"
//								Необязательные свойства:
//								"ТипТаблицы" - <Строка> - тип таблицы, на которую накладывается блокировка.
//									Пространство блокировки состоит из типа таблицы и имени таблицы.
//									Например: "Документ"
//									Значение по умолчанию: "РегистрНакопления"
//								"РежимБлокировки" - <РежимБлокировкиДанных> - режим накладываемой блокировки.
//									Значение по умолчанию: РежимБлокировкиДанных.Исключительный
//								"ИсточникДанных" - источник данных для блокировки.
//									Может передаваться значение любого типа, поддерживаемого свойством ИсточникДанных элемента блокировки,
//									а также типа "Менеджер временных таблиц".
//									Если в структуре нет этого свойства - блокировки через ИспользоватьИзИсточникаДанных() не накладываются.
//								"ИмяВременнойТаблицы" - <Строка> - имя временной таблицы менеджера временных таблиц, которая служит источником данных для блокировки.
//									Обязательно должно указываться, если в качестве источника данных процедуре передан менеджер временных таблиц.
//  КоллекцияЗначенийБлокировки	- <Структура или Соответствие> - описывает значения блокировки, накладываемые с помощью УстановитьЗначение().
//									Ключ - поле блокировки - <Строка или (только для соответствия) ПланыВидовХарактеристикСсылка>,
//										ПланыВидовХарактеристикСсылка используется для блокировки регистра бухгалтерии по виду субконто.
//									Значение - блокируемое значение - <Произвольный тип>.
//									Если передано Неопределено или если коллекция не содержит ни одного элемента -
//									блокировки методом УстановитьЗначение() не накладываются.
//  КоллекцияОписанияИсточника	- <Структура или Соответствие> - описывает значения блокировки, накладываемые с помощью ИспользоватьИзИсточникаДанных().
//									Ключ - поле блокировки - <Строка или (только для соответствия) ПланыВидовХарактеристикСсылка>,
//										ПланыВидовХарактеристикСсылка используется для блокировки регистра бухгалтерии по виду субконто.
//									Значение - поле таблицы источника данных - <Строка>.
//									Если передано Неопределено или если коллекция не содержит ни одного элемента -
//									блокировки методом ИспользоватьИзИсточникаДанных() не накладываются.
//  Отказ 						- <Булево> - при ошибке в процессе установки блокировки в этот параметр процедура возвращает значение Истина
//  Заголовок 					- <Строка> - заголовок сообщения об ошибке при установке блокировки
//
Процедура УстановитьУправляемуюБлокировку(СтруктураПараметров, КоллекцияЗначенийБлокировки = Неопределено, КоллекцияОписанияИсточника = Неопределено, Отказ = Ложь, Заголовок = "") Экспорт

	Если НЕ ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;

	ИспользоватьЗначенияБлокировки = КоллекцияЗначенийБлокировки <> Неопределено
		И (ТипЗнч(КоллекцияЗначенийБлокировки) = Тип("Структура")
			ИЛИ ТипЗнч(КоллекцияЗначенийБлокировки) = Тип("Соответствие"))
		И КоллекцияЗначенийБлокировки.Количество() > 0;

	ИспользоватьИсточникДанных     = КоллекцияОписанияИсточника <> Неопределено
		И (ТипЗнч(КоллекцияОписанияИсточника) = Тип("Структура")
			ИЛИ ТипЗнч(КоллекцияОписанияИсточника) = Тип("Соответствие"))
		И КоллекцияОписанияИсточника.Количество() > 0
		И СтруктураПараметров.Свойство("ИсточникДанных");

	Если НЕ ИспользоватьЗначенияБлокировки И НЕ ИспользоватьИсточникДанных Тогда
		Возврат;
	КонецЕсли;

	Блокировка = Новый БлокировкаДанных;

	ТипТаблицы = ?(СтруктураПараметров.Свойство("ТипТаблицы"), СтруктураПараметров.ТипТаблицы, "РегистрНакопления");
	ИмяТаблицы = СтруктураПараметров.ИмяТаблицы;
	ПространствоБлокировки = ТипТаблицы  + "." + ИмяТаблицы;
	ЭлементБлокировки = Блокировка.Добавить(ПространствоБлокировки);

	РежимБлокировки = ?(СтруктураПараметров.Свойство("РежимБлокировки"), СтруктураПараметров.РежимБлокировки, РежимБлокировкиДанных.Исключительный);
	ЭлементБлокировки.Режим = РежимБлокировки;

	Если ИспользоватьЗначенияБлокировки Тогда

		Для каждого ЭлементКоллекции Из КоллекцияЗначенийБлокировки Цикл

			ЭлементБлокировки.УстановитьЗначение(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);

		КонецЦикла;

	КонецЕсли;

	Если ИспользоватьИсточникДанных Тогда

		ИсточникДанных = СтруктураПараметров.ИсточникДанных;

		Если ТипЗнч(ИсточникДанных) = Тип("МенеджерВременныхТаблиц") Тогда

			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = ИсточникДанных;
			ТекстЗапроса = "";
			Для каждого ЭлементКоллекции Из КоллекцияОписанияИсточника Цикл
				ТекстЗапроса = ТекстЗапроса + ",
				|	Таб." + ЭлементКоллекции.Значение;
			КонецЦикла;
			ТекстЗапроса = Сред(ТекстЗапроса, 2);
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ"
			+ ТекстЗапроса + "
			|ИЗ
			|	" + СтруктураПараметров.ИмяВременнойТаблицы + " КАК Таб";
			Запрос.Текст = ТекстЗапроса;
			Результат    = Запрос.Выполнить();

			ЭлементБлокировки.ИсточникДанных = Результат;

		Иначе

			ЭлементБлокировки.ИсточникДанных = ИсточникДанных;

		КонецЕсли;

		Для каждого ЭлементКоллекции Из КоллекцияОписанияИсточника Цикл

			ЭлементБлокировки.ИспользоватьИзИсточникаДанных(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);

		КонецЦикла;

	КонецЕсли;

	Попытка

		Блокировка.Заблокировать();

	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки(), , , ,Отказ);
		ОписаниеОшибки = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(НСТр("ru = 'Операция не выполнена'"), УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки.Описание);
		ВызватьИсключение НСтр("ru='Операция не выполнена'");

	КонецПопытки;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ НАСТРОЙКИ ПАРАМЕТРОВ УЧЕТА

Функция ОпределитьПараметрыУчета() Экспорт

	ПараметрыУчета = ОбщегоНазначенияБПКлиентСервер.СтруктураПараметровУчета();

	// Запасы
	БУ = ПланыСчетов.Хозрасчетный.Товары.ПолучитьОбъект();

	ПараметрыУчета.ВестиПартионныйУчет = БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии, "ВидСубконто") <> Неопределено;
	ВестиСкладскойУчет  = БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "ВидСубконто") <> Неопределено;
	Если ВестиСкладскойУчет Тогда
		ВестиСуммовойУчетПоСкладам = БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "ВидСубконто").Суммовой;
	Иначе
		ВестиСуммовойУчетПоСкладам = Ложь;
	КонецЕсли;

	ПараметрыУчета.СкладскойУчет = ?(ВестиСкладскойУчет, ?(ВестиСуммовойУчетПоСкладам, 2, 1), 0);

	//Розница
	БУ = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ.ПолучитьОбъект();
	ПараметрыУчета.ИспользоватьОборотнуюНоменклатуру = БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура, "ВидСубконто") <> Неопределено;
	ПараметрыУчета.РазделятьПоСтавкамНДС = БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС, "ВидСубконто") <> Неопределено;

	//Работники
	ПараметрыУчета.ВестиУчетПоРаботникам = ?(БухгалтерскийУчетПереопределяемый.ВедетсяУчетРасчетовПоЗарплатеСводно(),0,1);
	ПараметрыУчета.УчетЗарплатыИКадровВоВнешнейПрограмме = БухгалтерскийУчетПереопределяемый.УчетЗарплатыИКадровВоВнешнейПрограмме();
	ПараметрыУчета.КадровыйУчет = БухгалтерскийУчетПереопределяемый.ВедетсяКадровыйУчет();

	//Раздельный учет НДС
	БУ = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымЦенностям.ПолучитьОбъект();
	ПараметрыУчета.ВестиУчетНДСПоСпособам = БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СпособыУчетаНДС, "ВидСубконто") <> Неопределено;
	
	// Элементы затрат
	ЭлементыЗатратНастройкаПараметровУчета.ПрочитатьЗначенияПараметровУчета(ПараметрыУчета);
		
	Возврат ПараметрыУчета;

КонецФункции

Функция ПолучитьСоответствиеСубконтоПараметрамУчета(ТолькоМПЗ = Ложь) Экспорт

	// Структура параметров

	Результат = Новый ТаблицаЗначений; // Структуры СтруктураПараметров
	Результат.Колонки.Добавить("Счета"); // Счета для обработки, таблица значений со структурой КолонкиСчетов
	Результат.Колонки.Добавить("ИсключенияИерархии", Новый ОписаниеТипов("Массив")); // Массив счетов
		// которые не должны обрабатываться при обработке подчиненных счетов
	Результат.Колонки.Добавить("Субконто"); // Параметры субконто, таблица значений со структурой КолонкиСубконто
	Результат.Колонки.Добавить("Параметры", Новый ОписаниеТипов("ТаблицаЗначений")); // Список параметров и
		// значения исключений, таблица значений со структурой КолонкиПараметров

	КолонкиСчетов = Новый ТаблицаЗначений;
	КолонкиСчетов.Колонки.Добавить("Счет", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	КолонкиСчетов.Колонки.Добавить("СПодчиненными", Новый ОписаниеТипов("Булево")); // Обрабатывать все субсчета

	// Имя параметра, константа типа Булево или строка "ПоСчету" (только для признаков учета Количественный и Валютный)
	// Неопределено - не менять
	ТипПараметра = Новый ОписаниеТипов("Неопределено, Строка, Булево", , Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная));

	КолонкиСубконто = Новый ТаблицаЗначений;
	КолонкиСубконто.Колонки.Добавить("Вид", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные"));
	КолонкиСубконто.Колонки.Добавить("Параметр", ТипПараметра); // Необходимость включения субконто
	КолонкиСубконто.Колонки.Добавить("Количественный", ТипПараметра);
	КолонкиСубконто.Колонки.Добавить("Суммовой", ТипПараметра);
	КолонкиСубконто.Колонки.Добавить("ТолькоОбороты", ТипПараметра);
	КолонкиСубконто.Колонки.Добавить("Валютный", ТипПараметра);

	КолонкиПараметров = Новый ТаблицаЗначений; // Описания параметров учета
	// Имя параметра учета
	КолонкиПараметров.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	КолонкиПараметров.Колонки.Добавить("Исключения", Новый ОписаниеТипов("ТаблицаЗначений")); // Счета, для которых будут
		//использоваться константные значения вместо значений параметров

	КолонкиИсключений = Новый ТаблицаЗначений;
	КолонкиИсключений.Колонки.Добавить("Счет", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	КолонкиИсключений.Колонки.Добавить("СПодчиненными", Новый ОписаниеТипов("Булево"));
	КолонкиИсключений.Колонки.Добавить("Значение", Новый ОписаниеТипов("Неопределено, Булево"));

	////////////////////////////////////////////////////////////////
	// Учет МПЗ
	СтрокаРезультата = Результат.Добавить();

	// Счета
	Счета = КолонкиСчетов.СкопироватьКолонки();
	СтрокаРезультата.Счета = Счета;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке;
	СтрокаСчета.СПодчиненными = Истина;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств;
	СтрокаСчета.СПодчиненными = Истина;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.Полуфабрикаты;
	СтрокаСчета.СПодчиненными = Истина;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.Товары;
	СтрокаСчета.СПодчиненными = Истина;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ГотоваяПродукция;
	СтрокаСчета.СПодчиненными = Истина;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.Материалы;
	СтрокаСчета.СПодчиненными = Истина;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ТоварыОтгруженные;
	СтрокаСчета.СПодчиненными = Истина;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ТоварыНаСкладе;
	СтрокаСчета.СПодчиненными = Истина;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.МатериалыПринятыеВПереработку;
	СтрокаСчета.СПодчиненными = Истина;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
	СтрокаСчета.СПодчиненными = Ложь;

	// Исключения иерархии
	ИсключенияИерархии = Новый Массив;
	СтрокаРезультата.ИсключенияИерархии = ИсключенияИерархии;

	ИсключенияИерархии.Добавить(ПланыСчетов.Хозрасчетный.СпецоснасткаИСпецодеждаВЭксплуатации);
	ИсключенияИерархии.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ);
	ИсключенияИерархии.Добавить(ПланыСчетов.Хозрасчетный.СпецодеждаВЭксплуатации);
	ИсключенияИерархии.Добавить(ПланыСчетов.Хозрасчетный.СпецоснасткаВЭксплуатации);
	ИсключенияИерархии.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ);
	ИсключенияИерархии.Добавить(ПланыСчетов.Хозрасчетный.ПереданныеОбъектыНедвижимости);
	
	// Субконто
	Субконто = КолонкиСубконто.СкопироватьКолонки();
	СтрокаРезультата.Субконто = Субконто;

	СтрокаСубконто = Субконто.Добавить();
	СтрокаСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура;
	СтрокаСубконто.Параметр = Истина;
	СтрокаСубконто.Количественный = Истина;
	СтрокаСубконто.Суммовой = Истина;
	СтрокаСубконто.ТолькоОбороты = Ложь;
	СтрокаСубконто.Валютный = Неопределено;

	СтрокаСубконто = Субконто.Добавить();
	СтрокаСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС;
	СтрокаСубконто.Параметр = Ложь;
	СтрокаСубконто.Количественный = Истина;
	СтрокаСубконто.Суммовой = Истина;
	СтрокаСубконто.ТолькоОбороты = Ложь;
	СтрокаСубконто.Валютный = Неопределено;

	СтрокаСубконто = Субконто.Добавить();
	СтрокаСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии;
	СтрокаСубконто.Параметр = "ВестиПартионныйУчет";
	СтрокаСубконто.Количественный = Истина;
	СтрокаСубконто.Суммовой = Истина;
	СтрокаСубконто.ТолькоОбороты = Ложь;
	СтрокаСубконто.Валютный = Неопределено;

	СтрокаСубконто = Субконто.Добавить();
	СтрокаСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады;
	СтрокаСубконто.Параметр = "ВестиСкладскойУчет";
	СтрокаСубконто.Количественный = Истина;
	СтрокаСубконто.Суммовой = "ВестиСуммовойУчетПоСкладам";
	СтрокаСубконто.ТолькоОбороты = Ложь;
	СтрокаСубконто.Валютный = Неопределено;

	// Параметры
	Параметры = КолонкиПараметров.СкопироватьКолонки();
	СтрокаРезультата.Параметры = Параметры;

	СтрокаПараметра = Параметры.Добавить();
	СтрокаПараметра.Имя = "ВестиПартионныйУчет";
	СтрокаПараметра.Исключения = КолонкиИсключений.Скопировать();

		СтрокаИсключения = СтрокаПараметра.Исключения.Добавить();
		СтрокаИсключения.Счет = ПланыСчетов.Хозрасчетный.ТоварыПринятыеНаКомиссию;
		СтрокаИсключения.СПодчиненными = Истина;
		СтрокаИсключения.Значение = Истина;

		СтрокаИсключения = СтрокаПараметра.Исключения.Добавить();
		СтрокаИсключения.Счет = ПланыСчетов.Хозрасчетный.МатериалыПринятыеВПереработку;
		СтрокаИсключения.СПодчиненными = Ложь;
		СтрокаИсключения.Значение = Неопределено;

	СтрокаПараметра = Параметры.Добавить();
	СтрокаПараметра.Имя = "ВестиСкладскойУчет";
	СтрокаПараметра.Исключения = КолонкиИсключений.Скопировать();

		СтрокаИсключения = СтрокаПараметра.Исключения.Добавить();
		СтрокаИсключения.Счет = ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку;
		СтрокаИсключения.СПодчиненными = Истина;
		СтрокаИсключения.Значение = Неопределено;

		СтрокаИсключения = СтрокаПараметра.Исключения.Добавить();
		СтрокаИсключения.Счет = ПланыСчетов.Хозрасчетный.ТоварыОтгруженные;
		СтрокаИсключения.СПодчиненными = Истина;
		СтрокаИсключения.Значение = Неопределено;

		СтрокаИсключения = СтрокаПараметра.Исключения.Добавить();
		СтрокаИсключения.Счет = ПланыСчетов.Хозрасчетный.ТоварыПереданныеНаКомиссию;
		СтрокаИсключения.СПодчиненными = Ложь;
		СтрокаИсключения.Значение = Неопределено;

		СтрокаИсключения = СтрокаПараметра.Исключения.Добавить();
		СтрокаИсключения.Счет = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ;
		СтрокаИсключения.СПодчиненными = Ложь;
		СтрокаИсключения.Значение = Истина;

		СтрокаИсключения = СтрокаПараметра.Исключения.Добавить();
		СтрокаИсключения.Счет = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
		СтрокаИсключения.СПодчиненными = Ложь;
		СтрокаИсключения.Значение = Истина;

	СтрокаПараметра = Параметры.Добавить();
	СтрокаПараметра.Имя = "ВестиСуммовойУчетПоСкладам";
	СтрокаПараметра.Исключения = КолонкиИсключений.Скопировать();

		СтрокаИсключения = СтрокаПараметра.Исключения.Добавить();
		СтрокаИсключения.Счет = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ;
		СтрокаИсключения.СПодчиненными = Ложь;
		СтрокаИсключения.Значение = Истина;

		СтрокаИсключения = СтрокаПараметра.Исключения.Добавить();
		СтрокаИсключения.Счет = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
		СтрокаИсключения.СПодчиненными = Ложь;
		СтрокаИсключения.Значение = Истина;

	Если ТолькоМПЗ Тогда
		Возврат Результат;
	КонецЕсли;

	////////////////////////////////////////////////////////////////
	// Розничная торговля
	СтрокаРезультата = Результат.Добавить();

	// Счета
	Счета = КолонкиСчетов.СкопироватьКолонки();
	СтрокаРезультата.Счета = Счета;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ;
	СтрокаСчета.СПодчиненными = Ложь;

	// Субконто
	Субконто = КолонкиСубконто.СкопироватьКолонки();
	СтрокаРезультата.Субконто = Субконто;

	СтрокаСубконто = Субконто.Добавить();
	СтрокаСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура;
	СтрокаСубконто.Параметр = "ИспользоватьОборотнуюНоменклатуру";
	СтрокаСубконто.Количественный = Ложь;
	СтрокаСубконто.Суммовой = Истина;
	СтрокаСубконто.ТолькоОбороты = Истина;
	СтрокаСубконто.Валютный = Неопределено;

	СтрокаСубконто = Субконто.Добавить();
	СтрокаСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС;
	СтрокаСубконто.Параметр = "РазделятьПоСтавкамНДС";
	СтрокаСубконто.Количественный = Ложь;
	СтрокаСубконто.Суммовой = Истина;
	СтрокаСубконто.ТолькоОбороты = Ложь;
	СтрокаСубконто.Валютный = Неопределено;

	СтрокаСубконто = Субконто.Добавить();
	СтрокаСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии;
	СтрокаСубконто.Параметр = Ложь;
	СтрокаСубконто.Количественный = Истина;
	СтрокаСубконто.Суммовой = Истина;
	СтрокаСубконто.ТолькоОбороты = Ложь;
	СтрокаСубконто.Валютный = Неопределено;

	СтрокаСубконто = Субконто.Добавить();
	СтрокаСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады;
	СтрокаСубконто.Параметр = Истина;
	СтрокаСубконто.Количественный = Ложь;
	СтрокаСубконто.Суммовой = Истина;
	СтрокаСубконто.ТолькоОбороты = Ложь;
	СтрокаСубконто.Валютный = Неопределено;

	// Параметры
	Параметры = КолонкиПараметров.СкопироватьКолонки();
	СтрокаРезультата.Параметры = Параметры;

	СтрокаПараметра = Параметры.Добавить();
	СтрокаПараметра.Имя = "ИспользоватьОборотнуюНоменклатуру";
	СтрокаПараметра.Исключения = КолонкиИсключений.Скопировать();

		СтрокаИсключения = СтрокаПараметра.Исключения.Добавить();
		СтрокаИсключения.Счет = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ;
		СтрокаИсключения.СПодчиненными = Ложь;
		СтрокаИсключения.Значение = Ложь;

	СтрокаПараметра = Параметры.Добавить();
	СтрокаПараметра.Имя = "РазделятьПоСтавкамНДС";
	СтрокаПараметра.Исключения = КолонкиИсключений.Скопировать();

	////////////////////////////////////////////////////////////////
	// Денежные средства
	СтрокаРезультата = Результат.Добавить();

	// Счета
	Счета = КолонкиСчетов.СкопироватьКолонки();
	СтрокаРезультата.Счета = Счета;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.Касса;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.КассаОрганизации;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ОперационнаяКасса;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.КассаПлатежногоАгента;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.КассаОрганизацииВал;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ВалютныеСчета;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.СпециальныеСчета;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.Аккредитивы;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ЧековыеКнижки;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ДепозитныеСчета;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ПрочиеСпециальныеСчета;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.АккредитивыВал;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ДепозитныеСчетаВал;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ПрочиеСпециальныеСчетаВал;
	СтрокаСчета.СПодчиненными = Ложь;
	
	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ПереводыВПути;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ПереводыВПутиВал;
	СтрокаСчета.СПодчиненными = Ложь;
	
	// Субконто
	Субконто = КолонкиСубконто.СкопироватьКолонки();
	СтрокаРезультата.Субконто = Субконто;

	СтрокаСубконто = Субконто.Добавить();
	СтрокаСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств;
	СтрокаСубконто.Параметр = "ВестиУчетПоСтатьямДДС";
	СтрокаСубконто.Количественный = Ложь;
	СтрокаСубконто.Суммовой = Истина;
	СтрокаСубконто.ТолькоОбороты = Истина;
	СтрокаСубконто.Валютный = Истина;

	// Параметры
	Параметры = КолонкиПараметров.СкопироватьКолонки();
	СтрокаРезультата.Параметры = Параметры;

	СтрокаПараметра = Параметры.Добавить();
	СтрокаПараметра.Имя = "ВестиУчетПоСтатьямДДС";
	СтрокаПараметра.Исключения = КолонкиИсключений.Скопировать();

	////////////////////////////////////////////////////////////////
	// Зарплата

	СтрокаРезультата = Результат.Добавить();

	// Счета
	Счета = КолонкиСчетов.СкопироватьКолонки();
	СтрокаРезультата.Счета = Счета;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
	СтрокаСчета.СПодчиненными = Истина;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.РасчетыПоДепонированнымСуммам;
	СтрокаСчета.СПодчиненными = Истина;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.РасходыНаОплатуТрудаБудущихПериодов;
	СтрокаСчета.СПодчиненными = Истина;

	// Субконто
	Субконто = КолонкиСубконто.СкопироватьКолонки();
	СтрокаРезультата.Субконто = Субконто;

	СтрокаСубконто = Субконто.Добавить();
	СтрокаСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций;
	СтрокаСубконто.Параметр = "ВестиУчетПоРаботникам";
	СтрокаСубконто.Количественный = "Количественный";
	СтрокаСубконто.Суммовой = Истина;
	СтрокаСубконто.ТолькоОбороты = Ложь;
	СтрокаСубконто.Валютный = Ложь;

	// Параметры
	Параметры = КолонкиПараметров.СкопироватьКолонки();
	СтрокаРезультата.Параметры = Параметры;

	СтрокаПараметра = Параметры.Добавить();
	СтрокаПараметра.Имя = "ВестиУчетПоРаботникам";
	СтрокаПараметра.Исключения = КолонкиИсключений.Скопировать();

	////////////////////////////////////////////////////////////////
	// Раздельный учет НДС
	
	СтрокаРезультата = Результат.Добавить();

	// Счета
	Счета = КолонкиСчетов.СкопироватьКолонки();
	СтрокаРезультата.Счета = Счета;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымЦенностям;
	СтрокаСчета.СПодчиненными = Истина;

	// Исключения иерархии
	ИсключенияИерархии = Новый Массив;
	СтрокаРезультата.ИсключенияИерархии = ИсключенияИерархии;

	ИсключенияИерархии.Добавить(ПланыСчетов.Хозрасчетный.АкцизыПоОплаченнымМатериальнымЦенностям);
	ИсключенияИерархии.Добавить(ПланыСчетов.Хозрасчетный.НДСПоТоварамРеализованнымПоСтавке0);
	
	// Субконто
	Субконто = КолонкиСубконто.СкопироватьКолонки();
	СтрокаРезультата.Субконто = Субконто;

	СтрокаСубконто = Субконто.Добавить();
	СтрокаСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СпособыУчетаНДС;
	СтрокаСубконто.Параметр = "ВестиУчетНДСПоСпособам";
	СтрокаСубконто.Количественный = Истина;
	СтрокаСубконто.Суммовой = Истина;
	СтрокаСубконто.ТолькоОбороты = Ложь;
	СтрокаСубконто.Валютный = Неопределено;

	// Параметры
	Параметры = КолонкиПараметров.СкопироватьКолонки();
	СтрокаРезультата.Параметры = Параметры;

	СтрокаПараметра = Параметры.Добавить();
	СтрокаПараметра.Имя = "ВестиУчетНДСПоСпособам";
	СтрокаПараметра.Исключения = КолонкиИсключений.Скопировать();
	
	////////////////////////////////////////////////////////////////
	// Элементы затрат
	
	ЭлементыЗатратНастройкаПараметровУчета.ДобавитьОписаниеРазрезовУчета(
		Результат, 
		КолонкиСчетов, 
		КолонкиСубконто, 
		КолонкиПараметров, 
		КолонкиИсключений);
	
	Возврат Результат;

КонецФункции

Функция ПолучитьЗначенияПараметровУчетаДляСчета(ПараметрыУчета, ПараметрыГруппыСчетов, Счет)

	Результат = Новый Структура;

	Для каждого СтрокаПараметра Из ПараметрыГруппыСчетов Цикл
		ЗначениеУстановлено = Ложь;
		Для каждого СтрокаИсключения Из СтрокаПараметра.Исключения Цикл
			Если СтрокаИсключения.Счет = Счет Тогда
				ЗначениеПараметра = СтрокаИсключения.Значение;
				ЗначениеУстановлено = Истина;
				Прервать;
			Иначе
				Если СтрокаИсключения.СПодчиненными
					И БухгалтерскийУчетВызовСервераПовтИсп.СчетВИерархии(Счет, СтрокаИсключения.Счет) Тогда

					ЗначениеПараметра = СтрокаИсключения.Значение;
					ЗначениеУстановлено = Истина;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		Если НЕ ЗначениеУстановлено Тогда
			ЗначениеПараметра = ПараметрыУчета[СтрокаПараметра.Имя];
		КонецЕсли;
		Результат.Вставить(СтрокаПараметра.Имя, ЗначениеПараметра);
	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция ПолучитьЗначениеПараметраУчетаСубконто(Параметр, ЗначенияПараметровУчетаДляСчета, СтрокаСчета)

	Если Параметр = Неопределено ИЛИ ТипЗнч(Параметр) = Тип("Булево") Тогда
		Возврат Параметр;
	Иначе
		Если ЗначенияПараметровУчетаДляСчета.Свойство(Параметр) Тогда
			Возврат ЗначенияПараметровУчетаДляСчета[Параметр];
		Иначе
			Возврат СтрокаСчета[Параметр];
		КонецЕсли;
	КонецЕсли;

КонецФункции

Функция ПолучитьСтруктуруПризнаковУчетаСубконто()

	ПризнакиУчета = Новый Структура;
	ПризнакиУчета.Вставить("Количественный", НСтр("ru = 'Количественный'"));
	ПризнакиУчета.Вставить("Суммовой", НСтр("ru = 'Суммовой'"));
	ПризнакиУчета.Вставить("ТолькоОбороты", НСтр("ru = 'Только обороты'"));
	ПризнакиУчета.Вставить("Валютный", НСтр("ru = 'Валютный'"));

	Возврат ПризнакиУчета;

КонецФункции

Функция ПолучитьДействияИзмененияСубконто(ПараметрыУчетаФормы, ТолькоМПЗ = Ложь) Экспорт

	ПараметрыУчета = Новый Структура;
	Для каждого КлючИЗначение Из ПараметрыУчетаФормы Цикл
		ПараметрыУчета.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	// Учет МПЗ
	Если НЕ ПараметрыУчета.Свойство("ВестиСкладскойУчет") Тогда
		ПараметрыУчета.Вставить("ВестиСкладскойУчет", ПараметрыУчета.СкладскойУчет > 0);
	КонецЕсли;
	Если НЕ ПараметрыУчета.Свойство("ВестиСуммовойУчетПоСкладам") Тогда
		ПараметрыУчета.Вставить("ВестиСуммовойУчетПоСкладам", ПараметрыУчета.СкладскойУчет > 1);
	КонецЕсли;

	ПараметрыСубконто = ПолучитьСоответствиеСубконтоПараметрамУчета(ТолькоМПЗ);

	ПризнакиУчета = ПолучитьСтруктуруПризнаковУчетаСубконто();

	ТипДействия = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Любой));
	// -1 удалить; 0 - не менять; 1 - установить

	ТаблицаДействий = Новый ТаблицаЗначений;
	ТаблицаДействий.Колонки.Добавить("Счет", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаДействий.Колонки.Добавить("Субконто", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные"));
	ТаблицаДействий.Колонки.Добавить("Действие", ТипДействия);
	Для каждого ПризнакУчета Из ПризнакиУчета Цикл
		ТаблицаДействий.Колонки.Добавить(ПризнакУчета.Ключ, ТипДействия);
	КонецЦикла;

	Для каждого ОписаниеГруппыСчетов Из ПараметрыСубконто Цикл

		СчетаВСписке = Новый Массив;
		СчетаВИерархии = Новый Массив;
		СчетаНеВИерархии = ОписаниеГруппыСчетов.ИсключенияИерархии;

		Для каждого ОписаниеСчета Из ОписаниеГруппыСчетов.Счета Цикл
			Если ОписаниеСчета.СПодчиненными Тогда
				СчетаВИерархии.Добавить(ОписаниеСчета.Счет);
			Иначе
				СчетаВСписке.Добавить(ОписаниеСчета.Счет);
			КонецЕсли;
		КонецЦикла;

		// Получим список счетов для обработки
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СчетаВСписке", СчетаВСписке);
		Запрос.УстановитьПараметр("СчетаВИерархии", СчетаВИерархии);
		Запрос.УстановитьПараметр("СчетаНеВИерархии", СчетаНеВИерархии);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет,
		|	Хозрасчетный.Порядок КАК Порядок,
		|	Хозрасчетный.Код,
		|	Хозрасчетный.Валютный,
		|	Хозрасчетный.Количественный,
		|	Хозрасчетный.ВидыСубконто.(
		|		НомерСтроки КАК НомерСтроки,
		|		ВидСубконто,
		|		ТолькоОбороты,
		|		Суммовой,
		|		Валютный,
		|		Количественный
		|	)
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	(Хозрасчетный.Ссылка В (&СчетаВСписке)
		|			ИЛИ Хозрасчетный.Ссылка В ИЕРАРХИИ (&СчетаВИерархии)
		|				И (НЕ Хозрасчетный.Ссылка В ИЕРАРХИИ (&СчетаНеВИерархии)))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок,
		|	Счет,
		|	НомерСтроки";

		ВыборкаСчетов = Запрос.Выполнить().Выбрать();
		Пока ВыборкаСчетов.Следующий() Цикл

			ПараметрыСчета = ПолучитьЗначенияПараметровУчетаДляСчета(ПараметрыУчета,
				ОписаниеГруппыСчетов.Параметры, ВыборкаСчетов.Счет);

			ВидыСубконто = ВыборкаСчетов.ВидыСубконто.Выгрузить();

			Для каждого ОписаниеСубконто Из ОписаниеГруппыСчетов.Субконто Цикл
				СтрокаДействия = Неопределено;

				ИспользованиеСубконто = ПолучитьЗначениеПараметраУчетаСубконто(ОписаниеСубконто.Параметр,
					ПараметрыСчета, ВыборкаСчетов);

				Если ИспользованиеСубконто = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				СтрокаСубконто = ВидыСубконто.Найти(ОписаниеСубконто.Вид, "ВидСубконто");
				Если ИспользованиеСубконто Тогда
					Если СтрокаСубконто = Неопределено Тогда
						СтрокаДействия = ТаблицаДействий.Добавить();
						СтрокаДействия.Счет = ВыборкаСчетов.Счет;
						СтрокаДействия.Субконто = ОписаниеСубконто.Вид;
						СтрокаДействия.Действие = 1;						
					КонецЕсли;

					// проверим признаки учета
					Для каждого ПризнакУчета Из ПризнакиУчета Цикл
						ЗначениеПризнака = ПолучитьЗначениеПараметраУчетаСубконто(ОписаниеСубконто[ПризнакУчета.Ключ],
							ПараметрыСчета, ВыборкаСчетов);
						Если ЗначениеПризнака = Неопределено Тогда
							Продолжить;
						КонецЕсли;

						Если СтрокаСубконто = Неопределено
							ИЛИ СтрокаСубконто[ПризнакУчета.Ключ] <> ЗначениеПризнака Тогда

							Если СтрокаДействия = Неопределено Тогда
								СтрокаДействия = ТаблицаДействий.Добавить();
								СтрокаДействия.Счет = ВыборкаСчетов.Счет;
								СтрокаДействия.Субконто = ОписаниеСубконто.Вид;
							КонецЕсли;
							Если ЗначениеПризнака Тогда
								СтрокаДействия[ПризнакУчета.Ключ] = 1;
							Иначе
								СтрокаДействия[ПризнакУчета.Ключ] = -1;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				Иначе
					Если СтрокаСубконто = Неопределено Тогда
						Продолжить;
					Иначе
						СтрокаДействия = ТаблицаДействий.Добавить();
						СтрокаДействия.Счет = ВыборкаСчетов.Счет;
						СтрокаДействия.Субконто = ОписаниеСубконто.Вид;
						СтрокаДействия.Действие = -1;
					КонецЕсли;
				КонецЕсли;

			КонецЦикла;

		КонецЦикла;
	КонецЦикла;

	Возврат ТаблицаДействий;

КонецФункции

Функция ПолучитьТекстСообщенияИзмененияПризнаковУчета(ОписаниеИзменения)

	ШаблонСообщения = НСтр("ru = 'Счет %1, признак ""Учет по подразделениям"" %2'");
	Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
		ОписаниеИзменения.Счет, ОписаниеИзменения.Изменение);

	Возврат Сообщение;

КонецФункции

Процедура ДобавитьВПротоколИзменениеСубконто(ПротоколИзменений, ВидСубконто, Изменение)
	
	Если Изменение = 1 Тогда
		ШаблонТекста = НСтр("ru = 'Добавлено субконто ""%1""'");
	ИначеЕсли Изменение = -1 Тогда
		ШаблонТекста = НСтр("ru = 'Удалено субконто ""%1""'");
	Иначе
		ШаблонТекста = НСтр("ru = 'Изменено субконто ""%1""'");
	КонецЕсли;
	
	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, ВидСубконто);
	ПротоколИзменений.Добавить(Текст);
		
КонецПроцедуры

Процедура ДобавитьВПротоколИзменениеПризнакаУчета(ПротоколИзменений, ВидСубконто, ПризнакУчета, Изменение)
	
	// В интерфейсе признаки учета называем "видами"
	Если Изменение = 1 Тогда
		ШаблонТекста = НСтр("ru = 'У субконто ""%1"" установлен вид учета %2'");
	ИначеЕсли Изменение = -1 Тогда
		ШаблонТекста = НСтр("ru = 'У субконто ""%1"" снят вид учета %2'");
	Иначе
		ШаблонТекста = НСтр("ru = 'У субконто ""%1"" изменен вид учета %2'");
	КонецЕсли;
	
	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, ВидСубконто, ПризнакУчета);
	ПротоколИзменений.Добавить(Текст);
		
КонецПроцедуры

Процедура ПрименитьПараметрыУчета(ПараметрыУчета, ИзмененыПараметрыСубконто = Ложь, Отказ = Ложь, ТолькоМПЗ = Ложь, ВестиУчетЗатратПоПодразделениям = Истина) Экспорт
	
	ПризнакиУчета             = ПолучитьСтруктуруПризнаковУчетаСубконто();
	ДействияИзмененияСубконто = ПолучитьДействияИзмененияСубконто(ПараметрыУчета); // Иерархическая коллекция: на первом уровне действия с субконто на каждом из счетов, на втором - действия с призаками учета.
	
	// Сгруппируем изменения по счетам, так как записывать будем именно счет
	СчетаКИзменению = ОбщегоНазначения.ВыгрузитьКолонку(ДействияИзмененияСубконто, "Счет", Истина);
	ДействияИзмененияСубконто.Индексы.Добавить("Счет");
	Отбор = Новый Структура("Счет");
	
	НачатьТранзакцию();

	Для Каждого Счет Из СчетаКИзменению Цикл
		
		Отбор.Счет = Счет;
		ДействияДляСчета = ДействияИзмененияСубконто.НайтиСтроки(Отбор);
		
		Объект = Счет.ПолучитьОбъект();
		
		ПротоколИзменений = Новый Массив;
		
		Для Каждого Действие Из ДействияДляСчета Цикл
			
			// Действие: -1 удалить; 0 - не менять; 1 - установить
			
			// Действия с видом субконто
			Если Действие.Действие = 1 Тогда
				
				// Добавить субконто
				
				Если Счет = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда Тогда
					ВидыСубконтоСтрока = Объект.ВидыСубконто.Вставить(0);
				Иначе				
					ВидыСубконтоСтрока = Объект.ВидыСубконто.Добавить();
				КонецЕсли;
			
				ВидыСубконтоСтрока.ВидСубконто = Действие.Субконто;
				
				ДобавитьВПротоколИзменениеСубконто(ПротоколИзменений, ВидыСубконтоСтрока.ВидСубконто, Действие.Действие);
				
			Иначе
				
				ВидыСубконтоСтрока = Объект.ВидыСубконто.Найти(Действие.Субконто, "ВидСубконто");
				Если ВидыСубконтоСтрока = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			Если Действие.Действие = -1 Тогда
				
				ДобавитьВПротоколИзменениеСубконто(ПротоколИзменений, ВидыСубконтоСтрока.ВидСубконто, Действие.Действие);
				
				Объект.ВидыСубконто.Удалить(ВидыСубконтоСтрока);
				
				Продолжить;
				
			КонецЕсли;
			
			// Действия с признаками учета
			
			Для Каждого ПризнакУчета Из ПризнакиУчета Цикл
				
				ДействиеСПризнаком = Действие[ПризнакУчета.Ключ];

				Если ДействиеСПризнаком = 1 Тогда
					ЗначениеПризнака = Истина;
				ИначеЕсли ДействиеСПризнаком = -1 Тогда
					ЗначениеПризнака = Ложь;
				Иначе
					Продолжить;
				КонецЕсли;
				
				Если ВидыСубконтоСтрока[ПризнакУчета.Ключ] = ЗначениеПризнака Тогда
					Продолжить;
				КонецЕсли;
				
				ВидыСубконтоСтрока[ПризнакУчета.Ключ] = ЗначениеПризнака;
				
				ДобавитьВПротоколИзменениеПризнакаУчета(
					ПротоколИзменений, 
					ВидыСубконтоСтрока.ВидСубконто, 
					ПризнакУчета.Значение, 
					ДействиеСПризнаком);
				
			КонецЦикла; // По признакам учета
			
		КонецЦикла; // По ДействияДляСчета
		
		Если Не Объект.Модифицированность() Тогда
			Продолжить;
		КонецЕсли;
		
		ПротоколИзмененийСтрокой = СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(ПротоколИзменений, Символы.ПС);
		
		Попытка
			Объект.Записать();
		Исключение
			ОписаниеОшибки = ИнформацияОбОшибке();
			ОтменитьТранзакцию();
			
			Отказ = Истина;
			
			ШаблонТекста = НСтр("ru = 'Ошибка при записи счета [КодСчета]:
				|[ОписаниеОшибки]
				|Ошибка произошла при попытке выполнить следующие изменения:
				|[ПротоколИзменений]'");
				
			ПараметрыТекста = Новый Структура;
			ПараметрыТекста.Вставить("КодСчета",          Объект.Код);
			ПараметрыТекста.Вставить("ПротоколИзменений", ПротоколИзмененийСтрокой);
			
			// В журнал регистрации выведем подробную информацию
			ПараметрыТекста.Вставить("ОписаниеОшибки", ПодробноеПредставлениеОшибки(ОписаниеОшибки));
			
			Текст = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонТекста, ПараметрыТекста);
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Настройка параметров учета.Ошибка выполнения'"),
				УровеньЖурналаРегистрации.Ошибка,
				Счет.Метаданные(),
				Счет, // Данные
				Текст);
				
			// Пользователю выведем краткое сообщение
			ШаблонТекста = НСтр("ru = 'Ошибка при записи счета [КодСчета]
				|Подробности см. в Журнале регистрации.'");
			Текст = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонТекста, ПараметрыТекста);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
			
			Возврат;
			
		КонецПопытки;
		
		// Запишем в журнал регистрации подробную информацию об изменениях
		ЗаписьЖурналаРегистрации(
			НСтр("ru ='Настройка параметров учета.Изменены настройки плана счетов'"),
			УровеньЖурналаРегистрации.Информация, 
			Счет.Метаданные(),
			Счет,
			ПротоколИзмененийСтрокой,
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		
	КонецЦикла; // По СчетаКИзменению

	БухгалтерскийУчетПереопределяемый.УстановитьПараметрыУчетаРасчетовПоЗарплате(?(ПараметрыУчета.ВестиУчетПоРаботникам = 1, Ложь, Истина));
	БухгалтерскийУчетПереопределяемый.УстановитьУчетЗарплатыИКадровВоВнешнейПрограмме(?(ПараметрыУчета.УчетЗарплатыИКадровВоВнешнейПрограмме = 1, Истина, Ложь));
	БухгалтерскийУчетПереопределяемый.УстановитьНастройкиКадровогоУчета(ПараметрыУчета.КадровыйУчет, ?(ПараметрыУчета.УчетЗарплатыИКадровВоВнешнейПрограмме = 0, Истина, Ложь));
	
	Если Не БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям() Тогда
		
		ИзмененияПризнаковУчета = Новый Массив;
		
		СчетаУчетаЗатратПоПодразделениям = БухгалтерскийУчетПереопределяемый.СчетаУчетаЗатратПоПодразделениям();
		Для каждого Счет Из СчетаУчетаЗатратПоПодразделениям Цикл
			
				Объект = Счет.ПолучитьОбъект();
				Если Объект.УчетПоподразделениям = ВестиУчетЗатратПоПодразделениям Тогда
					Продолжить;
				КонецЕсли;
				Объект.УчетПоподразделениям = ВестиУчетЗатратПоПодразделениям;
			Попытка
				Объект.Записать();
				Если ВестиУчетЗатратПоПодразделениям Тогда
					ТекстИзменения = НСтр("ru = 'установлен'");
				Иначе
					ТекстИзменения = НСтр("ru = 'снят'");
				КонецЕсли;
				ИзмененияПризнаковУчета.Добавить(Новый Структура("Объект, Счет, Изменение",
					Объект, Счет, ТекстИзменения));
			Исключение
				ШаблонСообщения = НСтр("ru = 'При попытке изменения учета по подразделениям
					|произошла ошибка:
					|%1'");
				ОписаниеОшибки = ИнформацияОбОшибке();
				Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
					КраткоеПредставлениеОшибки(ОписаниеОшибки));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение);
				Отказ = Истина;
				ЗаписьЖурналаРегистрации(НСТр("ru = 'Операция не выполнена'"), УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки.Описание);
				ОтменитьТранзакцию();
				Возврат;
				
			КонецПопытки;
			
		КонецЦикла;
		
		Если ИзмененияПризнаковУчета.Количество() > 0 Тогда
			
			Для каждого ОписаниеИзменения Из ИзмененияПризнаковУчета Цикл
				Сообщение = ПолучитьТекстСообщенияИзмененияПризнаковУчета(ОписаниеИзменения);
				ЗаписьЖурналаРегистрации(НСтр("ru ='Изменения признаков учета'"),
					УровеньЖурналаРегистрации.Информация, ОписаниеИзменения.Объект,
					ОписаниеИзменения.Счет, Сообщение, РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
			КонецЦикла
			
		КонецЕсли;
		
		Если Не ВестиУчетЗатратПоПодразделениям Тогда
			
			РегистрыСведений.МетодыОпределенияПрямыхРасходовПроизводстваВНУ.ОбновитьМетодыОпределенияПрямыхРасходовПроизводстваВНУ();
		
			РегистрыСведений.МетодыРаспределенияКосвенныхРасходовОрганизаций.ОбновитьМетодыРаспределенияКосвенныхРасходовОрганизаций();
			
		КонецЕсли;
		
	КонецЕсли;

	ЗафиксироватьТранзакцию();
	ОбновитьПовторноИспользуемыеЗначения();

КонецПроцедуры

Функция НайтиУчетнуюПолитику(Организация) Экспорт
	
	Перем Ключ;
	
	Выборка = РегистрыСведений.УчетнаяПолитикаОрганизаций.Выбрать(,, Новый Структура("Организация", Организация), "Убыв");
	Если Выборка.Следующий() Тогда
		ДанныеКлюча	= Новый Структура("Период, Организация", Выборка.Период, Выборка.Организация);
		Ключ	= РегистрыСведений.УчетнаяПолитикаОрганизаций.СоздатьКлючЗаписи(ДанныеКлюча);
	Иначе
		Ключ	= РегистрыСведений.УчетнаяПолитикаОрганизаций.ПустойКлюч();
	КонецЕсли;
	
	Возврат Ключ;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОЛУЧЕНИЯ И УСТАНОВКИ НАСТРОЕК ПОЛЬЗОВАТЕЛЕЙ

// Процедура записывает значение по умолчанию для передаваемого пользователя и настройки.
//
// Параметры:
//  Настройка    - Строка - вид настройки
//  Значение     - значение настройки
//  Пользователь - СправочникСсылка.Пользователи - текущий пользователь программы, для которого устанавливается настройка
//
// Возвращаемое значение:
//  Нет
//
Процедура УстановитьЗначениеПоУмолчанию(Настройка, Значение, Пользователь = Неопределено) Экспорт

	Если ВРег(Настройка) = ВРег("ОсновнаяОрганизация")
		ИЛИ ВРег(Настройка) = ВРег("ОсновноеПодразделениеОрганизации")
		ИЛИ ВРег(Настройка) = ВРег("ОсновнойСклад")
		ИЛИ ВРег(Настройка) = ВРег("ВариантРабочегоСтола") Тогда
		
		
		ТекущаяНастройка = ПолучитьЗначениеПоУмолчанию(Настройка, Пользователь);
		
		Если ВРег(Настройка) = ВРег("ОсновнаяОрганизация")
			И НЕ ТекущаяНастройка = Настройка Тогда
			
			ХранилищеОбщихНастроек.Сохранить(ВРег("ОсновноеПодразделениеОрганизации"),,
				БухгалтерскийУчетПереопределяемый.ПустоеПодразделение(),, Пользователь);
		
		КонецЕсли;
		
		ХранилищеОбщихНастроек.Сохранить(ВРег(Настройка),, Значение,, Пользователь);
		
	ИначеЕсли ВРег(Настройка) = ВРег("РабочаяДата") Тогда
		ОбщегоНазначения.УстановитьРабочуюДатуПользователя(Значение, Пользователь);
	ИначеЕсли ВРег(Настройка) = ВРег("ПоказыватьСчетаУчетаВДокументах") Тогда
		ХранилищеОбщихНастроек.Сохранить(ВРег(Настройка),, Значение,, Пользователь);
	КонецЕсли;
	
КонецПроцедуры // УстановитьЗначениеПоУмолчанию()

Функция ПолучитьЗначениеПоУмолчанию(Настройка, Пользователь = Неопределено) Экспорт
	
	Возврат БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию(Настройка, Пользователь);
	
КонецФункции

// Определяет подразделение по данным о складе и организации
//
// Параметры:
//  Склад  -  СправочникСсылка.Склад - место хранения МПЗ
//  Организация  - СправочникСсылка.Организации
//
// Возвращаемое значение:
//   Подразделение  -  СправочникСсылка.Подразделение - подразделение, соответствующее
//   указанному месту хранания МПЗ
//
Функция ПолучитьПодразделение(Организация, Склад) Экспорт

	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Ссылка", Склад);
	Запрос.Текст = 
	
	 "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	 |	Склады.ПодразделениеОрганизации,
	 |	Склады.ПодразделениеОрганизации.Владелец КАК ПодразделениеОрганизацииВладелец
	 |ИЗ
	 |	Справочник.Склады КАК Склады
	 |ГДЕ
	 |	Склады.Ссылка = &Ссылка";
	 
	 Результат = Запрос.Выполнить().Выбрать();
	 Результат.Следующий();
	 
	 ПодразделениеОрганизации = Результат.ПодразделениеОрганизации;
	 ПодразделениеОрганизацииВладелец = Результат.ПодразделениеОрганизацииВладелец;
	
	Если ПодразделениеОрганизацииВладелец = Организация Тогда
		Возврат ПодразделениеОрганизации;
	Иначе
		Возврат БухгалтерскийУчетПереопределяемый.ПустоеПодразделение();
	КонецЕсли;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФУНКЦИОНАЛЬНЫМИ ОПЦИЯМИ

Функция ПолучитьФункциональнуюОпциюОбъекта(Имя, Объект) Экспорт

	ПараметрыФО = Новый Структура("Организация, Период",
		Объект.Организация, НачалоМесяца(Объект.Дата));

	Возврат ПолучитьФункциональнуюОпцию(Имя, ПараметрыФО);

КонецФункции

Функция ИспользуетсяНеСтандартныйИнтерфейс() Экспорт
		
	Возврат Константы.ИнтерфейсВерсии77.Получить();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ДИНАМИЧЕСКИМИ СПИСКАМИ

// Возвращает отборы динамического списка как значения заполнения при программном вводе новой строки в список
//
// Параметры:
//  КомпоновщикНастроек  - КомпоновщикНастроекДинамическогоСписка - компоновщик настроек списка
//
// Возвращаемое значение:
//   Структура   - значения отборов для заполнения нового элемента списка
//
Функция ЗначенияЗаполненияДинамическогоСписка(Знач КомпоновщикНастроек) Экспорт
	
	ЗначенияЗаполнения = Новый Структура;
	
	НастройкиСписка = КомпоновщикНастроек.ПолучитьНастройки();
	ДобавитьЗначенияЗаполнения(НастройкиСписка.Отбор.Элементы, ЗначенияЗаполнения);
	
	Возврат ЗначенияЗаполнения;

КонецФункции 

Процедура ДобавитьЗначенияЗаполнения(КоллекцияОтборов, ЗначенияЗаполнения)

	Для каждого ЭлементОтбора Из КоллекцияОтборов Цикл
	
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") 
			И ЭлементОтбора.Использование 
			И ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
			
			НаименованиеОтбора = Строка(ЭлементОтбора.ЛевоеЗначение);
			Если Найти(НаименованиеОтбора, ".") = 0 Тогда
				ЗначенияЗаполнения.Вставить(НаименованиеОтбора, ЭлементОтбора.ПравоеЗначение);
			КонецЕсли;
		ИначеЕсли ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") 
			И ЭлементОтбора.Использование Тогда
		    ДобавитьЗначенияЗаполнения(ЭлементОтбора, ЗначенияЗаполнения);
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура ЗаменитьСвязьПараметровВыбора(Элемент, Имя, НоваяСвязьПараметровВыбора) Экспорт


	МассивСвязей = Новый Массив;
	Для Каждого СвязьПараметровВыбора Из Элемент.СвязиПараметровВыбора Цикл
		Если ВРег(СвязьПараметровВыбора.Имя) <> ВРег(Имя) Тогда
			МассивСвязей.Добавить(СвязьПараметровВыбора);
		КонецЕсли;
	КонецЦикла;

	Элемент.СвязиПараметровВыбора = Новый ФиксированныйМассив(Новый Массив);
	МассивСвязей.Добавить(НоваяСвязьПараметровВыбора);
	Элемент.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязей);

КонецПроцедуры

// Процедура вызывается из форм платежных документов при смене кассы или
// банковского счета. Меняет валюту, курс документа и пересчитывает сумму.
//
// Параметры:
//  ВалютаДокумента  - ссылка на справочник, валюта документа до изменения;
//  КурсДокумента    - число, курс документа до изменения;
//  ДатаДокумента    - дата, дата на которую будем получать новый курс;
//  СуммаДокумента   - число, сумма документа;
//  ВалютаДенежныхСредств - ссылка на справочник, валюта выбранного счета или кассы
//                     (новая валюта документа);
//
Процедура ПриИзмененииЗначенияКассыБанковскогоСчета(ВалютаДокумента, КурсДокумента, КратностьДокумента, ДатаДокумента,
	                                        СуммаДокумента, ВалютаДенежныхСредств) Экспорт

	СтараяВалюта    = ВалютаДокумента;
	СтарыйКурс      = КурсДокумента;
	СтараяКратность = КратностьДокумента;
	ВалютаДокумента = ВалютаДенежныхСредств;

	СтруктураКурсаВалютаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, ДатаДокумента);
	КурсДокумента        = СтруктураКурсаВалютаДокумента.Курс;
	КратностьДокумента   = СтруктураКурсаВалютаДокумента.Кратность;

	Если ВалютаДокумента <>  СтараяВалюта
	   И СуммаДокумента > 0 Тогда

		СуммаДокумента = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаДокумента, СтараяВалюта, ВалютаДокумента, СтарыйКурс,
									    КурсДокумента,СтараяКратность,КратностьДокумента);

	КонецЕсли;

КонецПроцедуры

Функция ПолучитьПодразделениеПриИзмененииСчета(Подразделение, Организация, ПодразделениеПоУмолчанию = Неопределено) Экспорт

	Если Не (ЗначениеЗаполнено(Подразделение) 
			И БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(Подразделение, Организация)) Тогда
		Если ПодразделениеПоУмолчанию = Неопределено Тогда
			ПодразделениеПоУмолчанию = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");
		КонецЕсли;

		Если ЗначениеЗаполнено(ПодразделениеПоУмолчанию) Тогда
			Если БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ПодразделениеПоУмолчанию, Организация) Тогда
				Подразделение = ПодразделениеПоУмолчанию;
			Иначе
				Подразделение = Неопределено;
			КонецЕсли;
		Иначе
			Подразделение = Неопределено;
		КонецЕсли;
	КонецЕсли;

	Возврат Подразделение;

КонецФункции

// Выполняет установку отбора по указанной организации в динамических списках.
// Вызывать необходимо из обработчика формы ПриСозданииНаСервере.
// Если в форму при открытии был передан отбор по организации, то функция не будет выполнена.
//
// Параметры
//  Форма          - УправляемаяФорма  - форма, в которой необходимо установить отбор
//  ИмяСписка      - Строка - имя реквизита формы типа ДинамическийСписок.
//  ИмяРеквизита   - Строка - имя поля-организации в динамическом списке.
//  ЗначениеОтбора - СправочникСсылка.Организации, СписокЗначений, Массив - значение отбора.
//                   Если значение не задано, то будет подставлена основная организация из
//                   настроек пользователя.
//
// Возвращаемое значение:
//   СправочникСсылка.Организации - Если отбор установлен, то вернет значение отбора.
//
Функция УстановитьОтборПоОсновнойОрганизации(Форма, ИмяСписка = "Список", ИмяРеквизита = "Организация", ЗначениеОтбора = Неопределено) Экспорт

	Если Справочники.Организации.ИспользуетсяНесколькоОрганизаций() Тогда
		
		Если Форма.Параметры.Свойство("Отбор") И Форма.Параметры.Отбор.Свойство(ИмяРеквизита) Тогда
			// Если значение отбора передается в параметрах формы - берем его оттуда, параметр при этом удаляем
			ОсновнаяОрганизация = Форма.Параметры.Отбор[ИмяРеквизита];
			Форма.Параметры.Отбор.Удалить(ИмяРеквизита);
		ИначеЕсли ТипЗнч(ЗначениеОтбора) = Тип("СправочникСсылка.Организации") 
			ИЛИ ТипЗнч(ЗначениеОтбора) = Тип("СписокЗначений") 
			ИЛИ ТипЗнч(ЗначениеОтбора) = Тип("Массив") Тогда
			ОсновнаяОрганизация = ЗначениеОтбора;
		Иначе
			ОсновнаяОрганизация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
		КонецЕсли;
		
		Если ТипЗнч(ОсновнаяОрганизация) = Тип("СправочникСсылка.Организации") Тогда
			ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Равно;
		Иначе
			ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке;
		КонецЕсли;
		
		ИспользованиеОтбора = ЗначениеЗаполнено(ОсновнаяОрганизация);
		
		РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
		
	Иначе
		
		ОсновнаяОрганизация = Справочники.Организации.ПустаяСсылка();
		ВидСравненияОтбора  = ВидСравненияКомпоновкиДанных.Равно;
		ИспользованиеОтбора = Ложь;
		РежимОтображения    = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма[ИмяСписка], ИмяРеквизита, ОсновнаяОрганизация, ВидСравненияОтбора, , ИспользованиеОтбора, РежимОтображения);
	
	Возврат ОсновнаяОрганизация;
	
КонецФункции

// Возвращает структуру данных со сводным описанием контрагента
//
// Параметры:
//  СписокСведений - список значений со значениями параметров организации
//   СписокСведений формируется функцией СведенияОЮрФизЛице
//  Список         - список запрашиваемых параметров организации
//  СПрефиксом     - Признак выводить или нет префикс параметра организации
//
// Возвращаемое значение:
//  Строка - описатель организации / контрагента / физ.лица.
//
Функция ОписаниеОрганизации(СписокСведений, Список = "", СПрефиксом = Истина) Экспорт

	Если ПустаяСтрока(Список) Тогда

		Список = "ИНН,Свидетельство,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет";
		Если НЕ СписокСведений.Свойство("НаименованиеДляПечатныхФорм") Тогда
			Список = "НаименованиеПолное," + Список;
		Иначе
			Список = "НаименованиеДляПечатныхФорм," + Список;
		КонецЕсли;

	КонецЕсли;

	Результат = "";

	СоответствиеПараметров = Новый Соответствие();
	СоответствиеПараметров.Вставить("ПолноеНаименование",			" ");
	СоответствиеПараметров.Вставить("СокращенноеНаименование",		" ");
	СоответствиеПараметров.Вставить("НаименованиеДляПечатныхФорм",	" ");
	СоответствиеПараметров.Вставить("ИНН",							" ИНН ");
	СоответствиеПараметров.Вставить("КПП",							" КПП ");
	СоответствиеПараметров.Вставить("Свидетельство",				" ");
	СоответствиеПараметров.Вставить("СвидетельствоДатаВыдачи",		" от ");
	СоответствиеПараметров.Вставить("ЮридическийАдрес",				" ");
	СоответствиеПараметров.Вставить("ФактическийАдрес",				" ");
	СоответствиеПараметров.Вставить("Телефоны",						" тел.: ");
	СоответствиеПараметров.Вставить("Факс",							" факс: ");
	СоответствиеПараметров.Вставить("НомерСчета",					" р/с ");
	СоответствиеПараметров.Вставить("Банк",               			" в банке ");
	СоответствиеПараметров.Вставить("БИК",                			" БИК ");
	СоответствиеПараметров.Вставить("КоррСчет",           			" к/с ");
	СоответствиеПараметров.Вставить("КодПоОКПО",          			" Код по ОКПО ");

	Список          = Список + ?(Прав(Список, 1) = ",", "", ",");
	ЧислоПараметров = СтрЧислоВхождений(Список, ",");

	Для Счетчик = 1 По ЧислоПараметров Цикл

		ПозЗапятой = Найти(Список, ",");

		Если ПозЗапятой > 0  Тогда
			ИмяПараметра = Лев(Список, ПозЗапятой - 1);
			Список = Сред(Список, ПозЗапятой + 1, СтрДлина(Список));

			Попытка
				СтрокаДополнения = "";
				СписокСведений.Свойство(ИмяПараметра, СтрокаДополнения);

				Если ПустаяСтрока(СтрокаДополнения) Тогда
					Продолжить;
				КонецЕсли;

				Префикс = СоответствиеПараметров[ИмяПараметра];
				Если Не ПустаяСтрока(Результат)  Тогда
					Результат = Результат + ",";
				КонецЕсли;

				Результат = Результат + ?(СПрефиксом = Истина, ?(ПустаяСтрока(Результат), СокрЛ(Префикс), Префикс), " ") + СтрокаДополнения;

			Исключение

				ТекстСообщения = НСТр("ru = 'Не удалось определить значение параметра организации:'") + " " + ИмяПараметра;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);

				ОписаниеОшибки = ИнформацияОбОшибке();
				ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки.Описание);

			КонецПопытки;

		КонецЕсли;

	КонецЦикла;
	
	Результат = СокрЛП(Результат);
	Пока Найти(Результат, "  ") > 0 Цикл
		Результат = СтрЗаменить(Результат, "  ", " ");
	КонецЦикла;
	Возврат Результат;

КонецФункции // ОписаниеОрганизации()

// Стандартная функция форматирования прописи количества
//
// Параметры:
//  Количество - число, которое мы хотим форматировать
//
// Возвращаемое значение:
//  Отформатированная должным образом строковое представление количества.
//
Функция КоличествоПрописью(Количество) Экспорт

	ЦелаяЧасть   = Цел(Количество);
	ДробнаяЧасть = Окр(Количество - ЦелаяЧасть, 3);

	Если ДробнаяЧасть = Окр(ДробнаяЧасть,0) Тогда
		ПараметрыПрописи = ", , , , , , , , 0";

	ИначеЕсли ДробнаяЧасть = Окр(ДробнаяЧасть, 1) Тогда
		ПараметрыПрописи = "целая, целых, целых, ж, десятая, десятых, десятых, м, 1";

	ИначеЕсли ДробнаяЧасть = Окр(ДробнаяЧасть, 2) Тогда
		ПараметрыПрописи = "целая, целых, целых, ж, сотая, сотых, сотых, м, 2";

	Иначе
		ПараметрыПрописи = "целая, целых, целых, ж, тысячная, тысячных, тысячных, м, 3";

	КонецЕсли;

	Возврат ЧислоПрописью(Количество, ,ПараметрыПрописи);

КонецФункции // КоличествоПрописью()

// Проверяет, умещаются ли переданные табличные документы на страницу при печати.
//
// Параметры
//  ТабДокумент       – Табличный документ
//  ВыводимыеОбласти  – Массив из проверяемых таблиц или табличный документ
//  РезультатПриОшибке - Какой возвращать результат при возникновении ошибки
//
// Возвращаемое значение:
//   Булево   – умещаются или нет переданные документы
//
Функция ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти, РезультатПриОшибке = Истина) Экспорт

	Попытка
		Возврат ТабДокумент.ПроверитьВывод(ВыводимыеОбласти);
	Исключение
		ОписаниеОшибки = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(
			НСТр("ru = 'Невозможно получить информацию о текущем принтере (возможно, в системе не установлено ни одного принтера)'"),
			УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки.Описание);
		Возврат РезультатПриОшибке;
	КонецПопытки;

КонецФункции // ПроверитьВыводТабличногоДокумента()

// Функция возвращает часть запроса для корректного заполнения содержания услуг
// при формировании печатных форм.
//
// Параметр:
//  ТабличнаяЧасть - имя табличной части, из которой выбирается содержание
//                   услуг.
//
// Возвращаемое значение:
//  Строка - текст части запроса.
//
Функция ПолучитьЧастьЗапросаДляВыбораСодержанияУслуг(Знач ТабличнаяЧасть) Экспорт

	ТабличнаяЧасть = ТабличнаяЧасть + ?(ПустаяСтрока(ТабличнаяЧасть), "", ".");

	ЧастьЗапроса =
	"	ВЫБОР
	|		КОГДА НЕ (" + ТабличнаяЧасть + "Содержание ПОДОБНО """") ТОГДА
	|			" + ТабличнаяЧасть + "Содержание
	|		КОГДА НЕ (" + ТабличнаяЧасть + "Номенклатура.НаименованиеПолное ПОДОБНО """") ТОГДА
	|			" + ТабличнаяЧасть + "Номенклатура.НаименованиеПолное
	|		ИНАЧЕ
	|			" + ТабличнаяЧасть + "Номенклатура.Наименование
	|	КОНЕЦ";

	Возврат ЧастьЗапроса;

КонецФункции // ПолучитьЧастьЗапросаДляВыбораСодержанияУслуг()

Функция ПолучитьМассивПустыхЗначенийПоОписаниюТипов(ОписаниеТипов) Экспорт

	МассивПустыхЗначений = Новый Массив;
	МассивПустыхЗначений.Добавить(Неопределено);

	Для каждого Тип Из ОписаниеТипов.Типы() Цикл

		МассивПустыхЗначений.Добавить(Новый(Тип));

	КонецЦикла;

	Возврат МассивПустыхЗначений;

КонецФункции

Функция ПолучитьКопиюКоллекции(Знач Коллекция) Экспорт

	Возврат СериализаторXDTO.ПрочитатьXDTO(СериализаторXDTO.ЗаписатьXDTO(Коллекция));

КонецФункции
 
///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ФОРМАМИ

Процедура УстановитьУсловноеОформлениеОсновногоЭлемента(Список, ПараметрыОтбора, 
			ИмяНастройки = "ОсновнойЭлемент", ПредставлениеНастройки = "Выделение основного элемента") Экспорт
	
	Если ТипЗнч(ПараметрыОтбора)<>Тип("Структура") Тогда
		Возврат;
	ИначеЕсли НЕ (ПараметрыОтбора.Свойство("ЛевоеЗначение") 
				И ПараметрыОтбора.Свойство("ВидСравнения") 
				И ПараметрыОтбора.Свойство("ПравоеЗначение")) Тогда
		Возврат;
	КонецЕсли;
	
	СписокУдаляемыхЭлементов = Новый СписокЗначений;
	Для каждого ЭлементУсловногоОформления Из Список.УсловноеОформление.Элементы Цикл
		Если ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = ИмяНастройки Тогда
			СписокУдаляемыхЭлементов.Добавить(ЭлементУсловногоОформления);
		КонецЕсли;
	КонецЦикла;
	Для каждого Элемент Из СписокУдаляемыхЭлементов Цикл
		Список.УсловноеОформление.Элементы.Удалить(Элемент.Значение);
	КонецЦикла;
	
	ЭлементУсловногоОформления = Список.УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ЭлементОтбора.ЛевоеЗначение  = ПараметрыОтбора.ЛевоеЗначение;
	ЭлементОтбора.ВидСравнения   = ПараметрыОтбора.ВидСравнения;
	ЭлементОтбора.ПравоеЗначение = ПараметрыОтбора.ПравоеЗначение;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(, , Истина));
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = ИмяНастройки;
	ЭлементУсловногоОформления.Представление = ПредставлениеНастройки;
	
КонецПроцедуры

Функция ПолучитьПараметрыУсловногоОформленияОсновногоЭлемента(ИмяПоляОтбораЛевое, ИмяПоляОтбораПравое, ВидСравнения = "Равно") Экспорт
	
	Возврат(Новый Структура("ЛевоеЗначение, ВидСравнения, ПравоеЗначение",
		Новый ПолеКомпоновкиДанных(ИмяПоляОтбораЛевое), ВидСравненияКомпоновкиДанных[ВидСравнения],
		Новый ПолеКомпоновкиДанных(ИмяПоляОтбораПравое)));
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ЗАПРОСЫ, ПОЛЯ И РЕКВИЗИТЫ

// Получение незаполненного значения для типа определенного реквизита.
// Результат - массив значений (актуально для составного типа)
//
Функция ПолучитьНезаполненноеЗначениеРеквизита(ТипДанныхРеквизита) Экспорт
	
	ПустыеЗначенияТипа = Новый Массив;

	Для Каждого Тип Из ТипДанныхРеквизита.Типы() Цикл
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип);
		Описание = Новый ОписаниеТипов(МассивТипов);
		ПустыеЗначенияТипа.Добавить(Описание.ПривестиЗначение());
	КонецЦикла;

	Возврат Новый ФиксированныйМассив(ПустыеЗначенияТипа);
	
КонецФункции                                  

// Возвращает массив ссылок на все договоры данной организации
//
Функция ПолучитьВсеДоговорыОрганизации(Организация) Экспорт
	
	Результат = Новый Массив();
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК ДоговорСсылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Организация = &Организация";
	Запрос.УстановитьПараметр("Организация", Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	                                                        
	Пока Выборка.Следующий() Цикл
		Результат.Добавить(Выборка.ДоговорСсылка);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПодобратьВероятнуюДолжностьОтветственногоЛица(ОтветственноеЛицо) Экспорт
	
	Возврат ОтветственныеЛицаБП.ПодобратьВероятнуюДолжностьОтветственногоЛица(ОтветственноеЛицо);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С КЛАССИФИКАТОРАМИ

Функция ПолучитьКлассификатор(ИмяМакета) Экспорт

	Классификатор = Новый Соответствие();
	
	Макет = Справочники.Организации.ПолучитьМакет(ИмяМакета);
	
	ТекущаяОбласть = Макет.Область("Классификатор");

	Если ТекущаяОбласть <> Неопределено Тогда	
	
		Для НомерСтр = ТекущаяОбласть.Верх По ТекущаяОбласть.Низ Цикл
			
			// Перебор строк макета.
			КодПоказателя = СокрП(Макет.Область(НомерСтр, 1).Текст);
			Название      = СокрП(Макет.Область(НомерСтр, 2).Текст);
			
			Если КодПоказателя = "###" Тогда
				Прервать;
			ИначеЕсли ПустаяСтрока(КодПоказателя) Тогда
				Продолжить;
			Иначе
				Классификатор.Вставить(КодПоказателя, Название);
			КонецЕсли;

		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Новый ФиксированноеСоответствие(Классификатор);

КонецФункции


////////////////////////////////////////////////////////////////////////////////
// РАБОТА СО СПРАВОЧНИКАМИ

Функция ПолучитьКоличествоЭлементовСправочника(ИмяСправочника) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(Организации.Ссылка) КАК КоличествоЭлементов
	|ИЗ
	|	Справочник.Организации КАК Организации";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Организации", ИмяСправочника);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КоличествоЭлементов;
	КонецЕсли;
	
	Возврат 0;

КонецФункции

Функция ПроверитьНаличиеДоступныхОрганизаций() Экспорт

	Если НЕ ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
	 	Возврат Истина;
	КонецЕсли;
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат ПолучитьКоличествоЭлементовСправочника("Организации") > 0;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С НУМЕРАЦИЕЙ

Функция ПолучитьНомерБП20(НомерОбъекта, ПрефиксРазрешен = Истина) Экспорт
	
	МассивПрефиксовДляОбхода = ОбщегоНазначенияБПВызовСервераПовтИсп.ПрефиксыОрганизацийБП20();
	
	Номер = НомерОбъекта;
	НомерИзменен = Ложь;
	
	Номер = ПолучитьНомерБезПрефиксов(Номер, МассивПрефиксовДляОбхода, ПрефиксРазрешен);
	
	УдаленПрефиксСФНаАванс = Ложь;
	ОтдельнаяНумерацияСФНаАванс = Константы.ОтдельнаяНумерацияСчетовФактурНаАванс.Получить();
	Если ОтдельнаяНумерацияСФНаАванс
		И Сред(Номер, 1, 1) = "А" Тогда
		
		УдаленПрефиксСФНаАванс = Истина;
		Номер = Сред(Номер, 2);
		Если Сред(Номер, 1, 1) = "-" Тогда 
			Номер = Сред(Номер, 2);
		КонецЕсли;
		Номер = ПолучитьНомерБезПрефиксов(Номер, МассивПрефиксовДляОбхода, ПрефиксРазрешен);
	КонецЕсли;
	
	Если УдаленПрефиксСФНаАванс Тогда
		Номер = "А" + Номер;
	КонецЕсли;
	
	Возврат Номер;
	
КонецФункции

Функция СформироватьМассивПрефиксовДляРИБИОрганизации(ПрефиксыОрганизаций) 
	
	МассивПрефиксов = ПолучитьМассивПрефиксовРИБ();
	
	Для Каждого ПрефиксОрганизации Из ПрефиксыОрганизаций Цикл
		Если ПрефиксОрганизации <> "" Тогда
			МассивПрефиксов.Добавить(ПрефиксОрганизации);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивПрефиксов.Количество() = 0 Тогда
		МассивПрефиксов.Добавить("");
	КонецЕсли;
	
	Возврат МассивПрефиксов;
	
КонецФункции

Функция ПолучитьМассивПрефиксовРИБ()
	
	МассивПрефиксов = Новый Массив();
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ Различные
	               |	ПрефиксыИнформационныхБаз.Префикс КАК Префикс
	               |ИЗ
	               |	РегистрСведений.ПрефиксыИнформационныхБаз КАК ПрефиксыИнформационныхБаз";
	
	ВыборкаУзлов = Запрос.Выполнить().Выбрать();
	Пока ВыборкаУзлов.Следующий() Цикл
		
		Если Не ПустаяСтрока(ВыборкаУзлов.Префикс) Тогда
			
			МассивПрефиксов.Добавить(ВыборкаУзлов.Префикс);
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат МассивПрефиксов;
	
КонецФункции

// Функция возвращает массив с префиксами организаций в формате БП 2.0
// Для кэширования необходимо вызывать эту функцию из общего модуля 
// ОбщегоНазначенияБПВызовСервераПовтИсп.
//
Функция ПрефиксыОрганизацийБП20() Экспорт

	//Получим значения всех возможных префиксов организаций
	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос();
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Организации.ПрефиксБП20 КАК Префикс
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ПрефиксБП20 <> """"";
	Запрос.Текст = ТекстЗапроса;
	ПрефиксыОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Префикс");
	
	МассивПрефиксов = СформироватьМассивПрефиксовДляРИБИОрганизации(ПрефиксыОрганизаций);

    Возврат МассивПрефиксов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// 

Функция ОчиститьДанныеВБазе() Экспорт
	
	Если НЕ Пользователи.ЭтоПолноправныйПользователь(, Истина) Тогда
		ВызватьИсключение(НСтр("ru = 'Не достаточно прав для выполнения операции'"));
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		ОбщегоНазначения.ЗаблокироватьИБ();
	Исключение
		Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось установить монопольный режим (%1)'"),
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
	КонецПопытки;
	
	НачатьТранзакцию();
	Попытка
		
		МДОбщегоРеквизита = Метаданные.ОбщиеРеквизиты.ОбластьДанныхОсновныеДанные;
		
		// Переберем все метаданные
		
		// Константы
		Для каждого МетаданныеКонстанты Из Метаданные.Константы Цикл
			Если НЕ ОбщегоНазначения.ЭтоРазделенныйОбъектМетаданных(МетаданныеКонстанты,
				ОбщегоНазначенияПовтИсп.РазделительОсновныхДанных()) Тогда
				Продолжить;
			КонецЕсли;
			
			МенеджерЗначения = Константы[МетаданныеКонстанты.Имя].СоздатьМенеджерЗначения();
			МенеджерЗначения.ОбменДанными.Загрузка = Истина;
			МенеджерЗначения.Значение = МетаданныеКонстанты.Тип.ПривестиЗначение();
			МенеджерЗначения.Записать();
		КонецЦикла;
		
		// Ссылочные типы
		
		ВидыОбъектов = Новый Массив;
		ВидыОбъектов.Добавить("Справочники");
		ВидыОбъектов.Добавить("Документы");
		ВидыОбъектов.Добавить("ПланыВидовХарактеристик");
		ВидыОбъектов.Добавить("ПланыСчетов");
		ВидыОбъектов.Добавить("ПланыВидовРасчета");
		ВидыОбъектов.Добавить("БизнесПроцессы");
		ВидыОбъектов.Добавить("Задачи");
		
		Для каждого ВидОбъекта Из ВидыОбъектов Цикл
			МетаданныеКоллекция = Метаданные[ВидОбъекта];
			Для каждого МДОбъекта Из МетаданныеКоллекция Цикл
				Если НЕ ОбщегоНазначения.ЭтоРазделенныйОбъектМетаданных(МДОбъекта,
					ОбщегоНазначенияПовтИсп.РазделительОсновныхДанных()) Тогда
					Продолжить;
				КонецЕсли;
				
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ
				|	_XMLВыгрузка_Таблица.Ссылка КАК Ссылка
				|ИЗ
				|	" + МДОбъекта.ПолноеИмя() + " КАК _XMLВыгрузка_Таблица";
				Если ВидОбъекта = "Справочники"
					ИЛИ ВидОбъекта = "ПланыВидовХарактеристик"
					ИЛИ ВидОбъекта = "ПланыСчетов"
					ИЛИ ВидОбъекта = "ПланыВидовРасчета" Тогда
					
					Запрос.Текст = Запрос.Текст + "
					|ГДЕ
					|	_XMLВыгрузка_Таблица.Предопределенный = ЛОЖЬ";
				КонецЕсли;
				
				РезультатЗапроса = Запрос.Выполнить();
				Выборка = РезультатЗапроса.Выбрать();
				Пока Выборка.Следующий() Цикл
					Удаление = Новый УдалениеОбъекта(Выборка.Ссылка);
					Удаление.ОбменДанными.Загрузка = Истина;
					Удаление.Записать();
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		// Регистры кроме независимых регистров сведений и последовательности
		ВидыТаблиц = Новый Массив;
		ВидыТаблиц.Добавить("РегистрыНакопления");
		ВидыТаблиц.Добавить("РегистрыРасчета");
		ВидыТаблиц.Добавить("РегистрыБухгалтерии");
		ВидыТаблиц.Добавить("РегистрыСведений");
		ВидыТаблиц.Добавить("Последовательности");
		Для каждого ВидТаблицы Из ВидыТаблиц Цикл
			МетаданныеКоллекция = Метаданные[ВидТаблицы];
			МенеджерВида = Вычислить(ВидТаблицы);
			Для каждого МДРегистра Из МетаданныеКоллекция Цикл
				
				Если НЕ ОбщегоНазначения.ЭтоРазделенныйОбъектМетаданных(МДРегистра,
					ОбщегоНазначенияПовтИсп.РазделительОсновныхДанных()) Тогда
					Продолжить;
				КонецЕсли;
				
				Если ВидТаблицы = "РегистрыСведений"
					И МДРегистра.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда
					
					Продолжить;
				КонецЕсли;
				
				МенеджерТипа = МенеджерВида[МДРегистра.Имя];
				
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	_XMLВыгрузка_Таблица.Регистратор КАК Регистратор
				|ИЗ
				|	" + МДРегистра.ПолноеИмя() + " КАК _XMLВыгрузка_Таблица";
				РезультатЗапроса = Запрос.Выполнить();
				Выборка = РезультатЗапроса.Выбрать();
				Пока Выборка.Следующий() Цикл
					НаборЗаписей = МенеджерТипа.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
					НаборЗаписей.ОбменДанными.Загрузка = Истина;
					НаборЗаписей.Записать();
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		// Независимые регистры сведений
		Для каждого МДРегистра Из Метаданные.РегистрыСведений Цикл
			
			Если НЕ ОбщегоНазначения.ЭтоРазделенныйОбъектМетаданных(МДРегистра,
				ОбщегоНазначенияПовтИсп.РазделительОсновныхДанных()) Тогда
				Продолжить;
			КонецЕсли;
			
			Если МДРегистра.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
				
				Продолжить;
			КонецЕсли;
			
			МенеджерТипа = РегистрыСведений[МДРегистра.Имя];
			
			НаборЗаписей = МенеджерТипа.СоздатьНаборЗаписей();
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать();
		КонецЦикла;
		
		// Планы обмена
		
		Для каждого МДПланаОбмена Из Метаданные.ПланыОбмена Цикл
			
			Если НЕ ОбщегоНазначения.ЭтоРазделенныйОбъектМетаданных(МДПланаОбмена,
				ОбщегоНазначенияПовтИсп.РазделительОсновныхДанных()) Тогда
				Продолжить;
			КонецЕсли;
			
			МенеджерТипа = ПланыОбмена[МДПланаОбмена.Имя];
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	_XMLВыгрузка_Таблица.Ссылка КАК Ссылка
			|ИЗ
			|	" + МДПланаОбмена.ПолноеИмя() + " КАК _XMLВыгрузка_Таблица
			|ГДЕ
			|	_XMLВыгрузка_Таблица.Ссылка <> &ЭтотУзел";
			Запрос.УстановитьПараметр("ЭтотУзел", МенеджерТипа.ЭтотУзел());
			РезультатЗапроса = Запрос.Выполнить();
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				Удаление = Новый УдалениеОбъекта(Выборка.Ссылка);
				Удаление.ОбменДанными.Загрузка = Истина;
				Удаление.Записать();
			КонецЦикла;
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
		ОбщегоНазначения.РазблокироватьИБ();
		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Удаление данных'"), 
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
	КонецПопытки;
	Возврат Истина;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС ПОЛЯ ВЫБОРА ОРГАНИЗАЦИИ С ОБОСОБЛЕННЫМИ ПОДРАЗДЕЛЕНИЯМИ
//

Процедура ЗаполнитьСписокОрганизаций(ЭлементПолеОрганизация, СоответствиеОрганизаций) Экспорт
	
	СоответствиеОрганизаций = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НаборОрганизаций.Организация КАК Организация,
	|	НаборОрганизаций.ОрганизацияПредставление КАК ОрганизацияПредставление,
	|	НаборОрганизаций.ВключатьОбособленныеПодразделения
	|ИЗ
	|	(ВЫБРАТЬ
	|		Организации.Ссылка КАК Организация,
	|		Организации.Наименование КАК ОрганизацияПредставление,
	|		ЛОЖЬ КАК ВключатьОбособленныеПодразделения
	|	ИЗ
	|		Справочник.Организации КАК Организации
	|";
	
	Если БухгалтерскиеОтчетыВызовСервераПовтИсп.ДоступностьУчетаПоПодразделениям() Тогда
		Запрос.Текст = Запрос.Текст +
		"
		|	ОБЪЕДИНИТЬ ВСЕ
		|" + "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		Организации.ГоловнаяОрганизация,
		|		Организации.ГоловнаяОрганизация.Наименование,
		|		ИСТИНА
		|	ИЗ
		|		Справочник.Организации КАК Организации
		|	ГДЕ
		|		Организации.ОбособленноеПодразделение";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст +
		") КАК НаборОрганизаций
		|УПОРЯДОЧИТЬ ПО
		|	ОрганизацияПредставление";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЭлементПолеОрганизация.СписокВыбора.Очистить();
	МаксКоличествоСимволов = 40;
	Пока Выборка.Следующий() Цикл
		Ключ     = СтрЗаменить(Строка(Выборка.ВключатьОбособленныеПодразделения) + Выборка.Организация.УникальныйИдентификатор(), "-", "");
		Значение = Новый Структура("Организация,ВключатьОбособленныеПодразделения", Выборка.Организация, Выборка.ВключатьОбособленныеПодразделения);
		СоответствиеОрганизаций.Вставить(Ключ, Значение);
		
		ОрганизацияПредставление = Выборка.ОрганизацияПредставление;
		
		Если Выборка.ВключатьОбособленныеПодразделения Тогда
			ОрганизацияПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 с обособленными подразделениями'"),
				Выборка.ОрганизацияПредставление);
		КонецЕсли;
		
		ЭлементПолеОрганизация.СписокВыбора.Добавить(Ключ, ОрганизацияПредставление);
		
		МаксКоличествоСимволов = Макс(МаксКоличествоСимволов, СтрДлина(ОрганизацияПредставление));
	КонецЦикла;
	
	ЭлементПолеОрганизация.ШиринаСпискаВыбора = Окр(?(МаксКоличествоСимволов > 200, 200, МаксКоличествоСимволов) * 1.3);
	ЭлементПолеОрганизация.ВысотаСпискаВыбора = ?(ЭлементПолеОрганизация.СписокВыбора.Количество() > 15, 15, ЭлементПолеОрганизация.СписокВыбора.Количество());

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ДАННЫМИ В БАЗЕ

// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект.
// 
//  Если доступа к одному из реквизитов нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Параметры:
//  Ссылка    - Ссылка на объект - элемент справочника, документ, ...
//
//  Реквизиты - Строка - имена реквизитов, перечисленные через запятую, в формате
//              требований к свойствам структуры.
//              Например, "Код, Наименование, Родитель".
//            - Структура, ФиксированнаяСтруктура - в качестве ключа передается
//              псевдоним поля для возвращаемой структуры с результатом, а в качестве
//              значения (опционально) фактическое имя поля в таблице.
//              Если значение не определено, то имя поля берется из ключа.
//            - Массив, ФиксированныйМассив - имена реквизитов в формате требований
//              к свойствам структуры.
//
// Возвращаемое значение:
//  Структура - содержит имена (ключи) и значения затребованных реквизитов.
// 
Функция ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты) Экспорт
	
	Если ТипЗнч(Реквизиты) = Тип("Строка") Тогда
		СтруктураРеквизитов = Новый Структура(Реквизиты);
		
	ИначеЕсли ТипЗнч(Реквизиты) = Тип("Структура")
	      ИЛИ ТипЗнч(Реквизиты) = Тип("ФиксированнаяСтруктура") Тогда
		
		СтруктураРеквизитов = Реквизиты;
		
	ИначеЕсли ТипЗнч(Реквизиты) = Тип("Массив")
	      ИЛИ ТипЗнч(Реквизиты) = Тип("ФиксированныйМассив") Тогда
		
		СтруктураРеквизитов = Новый Структура;
		Для каждого Реквизит Из Реквизиты Цикл
			СтруктураРеквизитов.Вставить(Реквизит);
		КонецЦикла;
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неверный тип второго параметра Реквизиты: %1'"),
			Строка(ТипЗнч(Реквизиты)));
	КонецЕсли;
	
	ТекстПолей = "";
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		
		ИмяПоля   = ?(ЗначениеЗаполнено(КлючИЗначение.Значение),
		              СокрЛП(КлючИЗначение.Значение),
		              СокрЛП(КлючИЗначение.Ключ));
		
		Псевдоним = СокрЛП(КлючИЗначение.Ключ);
		
		ТекстПолей  = ТекстПолей + ?(ПустаяСтрока(ТекстПолей), "", ",") + "
		|	" + ИмяПоля + " КАК " + Псевдоним;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|" + ТекстПолей + "
	|ИЗ
	|	" + Ссылка.Метаданные().ПолноеИмя() + " КАК ПсевдонимЗаданнойТаблицы
	|ГДЕ
	|	ПсевдонимЗаданнойТаблицы.Ссылка = &Ссылка
	|";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Результат = Новый Структура;
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		Результат.Вставить(КлючИЗначение.Ключ);
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	
	Возврат Результат;
	
КонецФункции

// Возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект.
// 
//  Если доступа к реквизиту нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Параметры:
//  Ссылка       - ссылка на объект, - элемент справочника, документ, ...
//  ИмяРеквизита - Строка, например, "Код".
// 
// Возвращаемое значение:
//  Произвольный    - зависит от типа значения прочитанного реквизита.
// 
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита) Экспорт
	
	Результат = ЗначенияРеквизитовОбъекта(Ссылка, ИмяРеквизита);
	Возврат Результат[ИмяРеквизита];
	
КонецФункции 

// Процедура активизирует элемент формы.
// Если это - табличная часть, то тогда анализируется,
// может табличная часть на закладке и если так,
// то закладка становится текущей, но табличная часть не активизируется
//
// Параметры:
//  Форма            - Управляемая форма
//  ИмяЭлементаФормы - Строка - имя элемента, который необходимо активизировать
//
Процедура АктивизироватьЭлементФормы(Форма, ИмяЭлементаФормы) Экспорт

	Если НЕ ПустаяСтрока(ИмяЭлементаФормы) Тогда
		НайденныйЭлементФормы = Форма.Элементы.Найти(ИмяЭлементаФормы);
		Если НайденныйЭлементФормы <> Неопределено Тогда
			Если ТипЗнч(НайденныйЭлементФормы) = Тип("ТаблицаФормы") Тогда
				// Для таблицы определить - если она находится на закладке, то не активизировать элемент,
				// а сделать активной страницу, на которой находится эта табличная часть
				Страница = НайденныйЭлементФормы.Родитель;
				Пока Страница <> Неопределено И ТипЗнч(Страница) = Тип("ГруппаФормы") И Страница.Вид = ВидГруппыФормы.ОбычнаяГруппа Цикл
					// Таблица может быть внутри группы, а группа на странице
					Страница = Страница.Родитель;
				КонецЦикла;
				Если (Страница <> Неопределено) И ТипЗнч(Страница) = Тип("ГруппаФормы") И (Страница.Вид = ВидГруппыФормы.Страница) Тогда
					// Определим владельца этой страницы и активизируем эту страницу
					ПанельСтраниц = Страница.Родитель;
					Если (ПанельСтраниц <> Неопределено) И (ПанельСтраниц.Вид = ВидГруппыФормы.Страницы) Тогда
						ПанельСтраниц.ТекущаяСтраница = Страница;
					Иначе
						Форма.ТекущийЭлемент = НайденныйЭлементФормы;
					КонецЕсли;
				Иначе
					Форма.ТекущийЭлемент = НайденныйЭлементФормы;
				КонецЕсли;
			Иначе
				Форма.ТекущийЭлемент = НайденныйЭлементФормы;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция НовыйОписаниеТаблицПараметровПроведения() Экспорт
	
	Возврат Новый Массив; // См. ДобавитьОписаниеТаблицыПараметровПроведения()
	
КонецФункции

Функция ДобавитьОписаниеТаблицыПараметровПроведения(ОписаниеТаблиц, ИмяТаблицы, Таблица) Экспорт
	
	Описание = Новый Структура;
	Описание.Вставить("ИмяТаблицы", ИмяТаблицы);
	Описание.Вставить("Таблица",    Таблица);
	Описание.Вставить("Колонки",    Новый Массив);
	
	ОписаниеТаблиц.Добавить(Описание);
	
	Возврат Описание;
	
КонецФункции

Функция ПодготовитьТаблицыПараметрыПроведения(ОписаниеТаблиц) Экспорт
	
	Параметры = Новый Структура;
	
	Для Каждого Описание Из ОписаниеТаблиц Цикл
	
		ИменаКолонок = СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(Описание.Колонки);
		Таблица      = ПолучитьТаблицуПараметровПроведения(Описание.Таблица, ИменаКолонок);
		
		Параметры.Вставить(Описание.ИмяТаблицы, Таблица);
		
	КонецЦикла;
	
	Возврат Параметры;
	
КонецФункции

Функция ПолучитьНомерБезПрефиксов(Номер, МассивПрефиксовДляОбхода, ПрефиксРазрешен = Истина)

	ПрефиксНомера = "";
	
	Для Каждого ТекущийПрефикс ИЗ МассивПрефиксовДляОбхода Цикл
	
		ТекущийНомер = Найти(Номер, ТекущийПрефикс);
		
		Если ТекущийНомер = 1 Тогда
			Номер = Сред(Номер, СтрДлина(ТекущийПрефикс)+1);
			Если ОбщегоНазначенияБПВызовСервераПовтИсп.ВыводитьПрефиксИБ(ТекущийПрефикс) И ПрефиксРазрешен Тогда
				ПрефиксНомера = ПрефиксНомера + ТекущийПрефикс;
			КонецЕсли;
		КонецЕсли;
		
		// так же, может остаться "минус" впереди
		Если Лев(Номер, 1) = "-" Тогда
			Номер = Сред(Номер, 2);
		КонецЕсли;
		
		// удаление ведущих нулей
		Пока Лев(Номер, 1)="0" Цикл
			Номер = Сред(Номер, 2);
		КонецЦикла;
	КонецЦикла;
	
	Номер = ПрефиксНомера + Номер;
	
	Возврат Номер;

КонецФункции

//Удаляет повторяющиеся элементы массива.
Функция УдалитьПовторяющиесяЭлементыМассива(Массив, НеИспользоватьНеопределено = Ложь) Экспорт

	ОписаниеТиповСправочники  = Справочники.ТипВсеСсылки();
	ОписаниеТиповДокументы    = Документы.ТипВсеСсылки();
	ОписаниеТиповПВХ          = ПланыВидовХарактеристик.ТипВсеСсылки();
	ОписаниеТиповПланыСчетов  = ПланыСчетов.ТипВсеСсылки();
	ОписаниеТиповПланыРасчета = ПланыВидовРасчета.ТипВсеСсылки();

	Если ТипЗнч(Массив) = Тип("Массив") Тогда

		УжеВМассиве = Новый Соответствие;
		БылоНеопределено = Ложь;

		КолвоЭлементовВМассиве = Массив.Количество();

		Для ОбратныйИндекс = 1 По КолвоЭлементовВМассиве Цикл
			ЭлементМассива = Массив[КолвоЭлементовВМассиве - ОбратныйИндекс];
			ТипЭлемента = ТипЗнч(ЭлементМассива);
			Если ЭлементМассива = Неопределено Тогда
				Если БылоНеопределено или НеИспользоватьНеопределено Тогда
					Массив.Удалить(КолвоЭлементовВМассиве - ОбратныйИндекс);
				Иначе
					БылоНеопределено = Истина;
				КонецЕсли;
				Продолжить;
			ИначеЕсли ОписаниеТиповСправочники.СодержитТип(ТипЭлемента)
				ИЛИ ОписаниеТиповДокументы.СодержитТип(ТипЭлемента)
				ИЛИ ОписаниеТиповПВХ.СодержитТип(ТипЭлемента)
				ИЛИ ОписаниеТиповПланыСчетов.СодержитТип(ТипЭлемента)
				ИЛИ ОписаниеТиповПланыРасчета.СодержитТип(ТипЭлемента) Тогда

				ИДЭлемента = Строка(ЭлементМассива.УникальныйИдентификатор());

			Иначе

				ИДЭлемента = ЭлементМассива;

			КонецЕсли;

			Если УжеВМассиве[ИДЭлемента] = Истина Тогда
				Массив.Удалить(КолвоЭлементовВМассиве - ОбратныйИндекс);
			Иначе
				УжеВМассиве[ИДЭлемента] = Истина;
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

	Возврат Массив;

КонецФункции

// Проверяет, что в массиве объекты одного типа
//
// Параметры:
//  МассивОбъектов - Массив - массив объектов, которые нужно проверить
//
// Возвращаемое значение:
//  Булево
//
Функция ОбъектыОдногоТипаВМассиве(МассивОбъектов) Экспорт
	
	ТипОбъекта = Неопределено;
	Для каждого Объект Из МассивОбъектов Цикл
		Если ТипОбъекта = Неопределено Тогда
			ТипОбъекта = ТипЗнч(Объект);
			Продолжить;
		КонецЕсли;
		
		Если ТипОбъекта <> ТипЗнч(Объект) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции
