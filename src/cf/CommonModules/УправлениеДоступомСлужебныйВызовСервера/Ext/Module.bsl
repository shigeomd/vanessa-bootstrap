////////////////////////////////////////////////////////////////////////////////
// Подсистема "Управление доступом".
// 
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Обслуживание таблиц ВидыДоступа и ЗначенияДоступа в формах редактирования.

// Только для внутреннего использования.
Функция СформироватьДанныеВыбораПользователя(Знач Текст,
                                             Знач ВключаяГруппы = Истина,
                                             Знач ВключаяВнешнихПользователей = Неопределено,
                                             Знач БезПользователей = Ложь) Экспорт
	
	Возврат Пользователи.СформироватьДанныеВыбораПользователя(
		Текст,
		ВключаяГруппы,
		ВключаяВнешнихПользователей,
		БезПользователей);
	
КонецФункции

// Возвращает список значений доступа не помеченных на удаление.
//  Используется в обработчиках событий ОкончаниеВводаТекста и АвтоПодбор.
//
// Параметры:
//  Текст         - Строка - символы введенные пользователем.
//  ВключаяГруппы - Булево - если Истина, включать группы пользователей и внешних пользователей.
//  ВидДоступа    - Ссылка - пустая ссылка основного типа значения доступа,
//                - Строка - имя вида доступа, значения доступа которого выбираются.
//
Функция СформироватьДанныеВыбораЗначенияДоступа(Знач Текст, Знач ВидДоступа, ВключаяГруппы = Истина) Экспорт
	
	СвойстваВидаДоступа = УправлениеДоступомСлужебный.СвойстваВидаДоступа(ВидДоступа);
	Если СвойстваВидаДоступа = Неопределено Тогда
		Возврат Новый СписокЗначений;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Текст", Текст + "%");
	Запрос.УстановитьПараметр("ВключаяГруппы", ВключаяГруппы);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПредставленияПеречислений.Ссылка КАК Ссылка,
	|	ПредставленияПеречислений.Наименование КАК Наименование
	|ПОМЕСТИТЬ ПредставленияПеречислений
	|ИЗ
	|	&ПредставленияПеречислений КАК ПредставленияПеречислений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НЕОПРЕДЕЛЕНО КАК Ссылка,
	|	"""" КАК Наименование
	|ГДЕ
	|	ЛОЖЬ";
	
	ЗапросПредставленийПеречислений = Новый Запрос;
	ЗапросПредставленийПеречислений.Текст =
	"ВЫБРАТЬ
	|	"""" КАК Ссылка,
	|	"""" КАК Наименование
	|ГДЕ
	|	ЛОЖЬ";
	
	Для каждого Тип Из СвойстваВидаДоступа.ТипыВыбираемыхЗначений Цикл
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
		ПолноеИмяТаблицы = ОбъектМетаданных.ПолноеИмя();
		
		Если (     Метаданные.Справочники.Содержит(ОбъектМетаданных)
		       ИЛИ Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных) )
		   И ОбъектМетаданных.Иерархический
		   И ОбъектМетаданных.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов
		   И НЕ ВключаяГруппы Тогда
			
			УсловиеДляГруппы = "НЕ Таблица.ЭтоГруппа";
		Иначе
			УсловиеДляГруппы = "Истина";
		КонецЕсли;
		
		Если Метаданные.Перечисления.Содержит(ОбъектМетаданных) Тогда
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	Таблица.Ссылка КАК Ссылка,
			|	ПРЕДСТАВЛЕНИЕ(Таблица.Ссылка) КАК Наименование
			|ИЗ
			|	&ПолноеИмяТаблицы КАК Таблица";
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолноеИмяТаблицы", ПолноеИмяТаблицы);
			
			ЗапросПредставленийПеречислений.Текст = ЗапросПредставленийПеречислений.Текст
				+ Символы.ПС + Символы.ПС + " ОБЪЕДИНИТЬ ВСЕ " + Символы.ПС + Символы.ПС
				+ ТекстЗапроса;
		Иначе
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	Таблица.Ссылка КАК Ссылка,
			|	Таблица.Наименование КАК Наименование
			|ИЗ
			|	&ПолноеИмяТаблицы КАК Таблица
			|ГДЕ
			|	(НЕ Таблица.ПометкаУдаления)
			|	И Таблица.Наименование ПОДОБНО &Текст
			|	И &УсловиеДляГруппы";
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолноеИмяТаблицы", ПолноеИмяТаблицы);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеДляГруппы", УсловиеДляГруппы);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Таблица.Наименование",
				"Таблица." + ПолеПредставления(ОбъектМетаданных));
			
			Запрос.Текст = Запрос.Текст
				+ Символы.ПС + Символы.ПС + " ОБЪЕДИНИТЬ ВСЕ " + Символы.ПС + Символы.ПС
				+ ТекстЗапроса;
		КонецЕсли;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ПредставленияПеречислений",
		ЗапросПредставленийПеречислений.Выполнить().Выгрузить());
	
	Запрос.Текст = Запрос.Текст
		+ Символы.ПС + Символы.ПС + " ОБЪЕДИНИТЬ ВСЕ "  + Символы.ПС + Символы.ПС;
	
	Запрос.Текст = Запрос.Текст +
	"ВЫБРАТЬ
	|	ПредставленияПеречислений.Ссылка,
	|	ПредставленияПеречислений.Наименование
	|ИЗ
	|	ПредставленияПеречислений КАК ПредставленияПеречислений
	|ГДЕ
	|	ПредставленияПеречислений.Наименование ПОДОБНО &Текст";
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеВыбора.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;
	
	Возврат ДанныеВыбора;
	
КонецФункции

Функция ПолеПредставления(ОбъектМетаданных)
	
	ПолеПредставления = "Наименование";
	
	Если Метаданные.ПланыОбмена.Содержит(ОбъектМетаданных) Тогда
		
		Если ОбъектМетаданных.ОсновноеПредставление
			= Метаданные.СвойстваОбъектов.ОсновноеПредставлениеПланаОбмена.ВВидеКода Тогда
			
			ПолеПредставления = "Код";
		КонецЕсли;
		
	ИначеЕсли Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
		
		Если ОбъектМетаданных.ОсновноеПредставление
			= Метаданные.СвойстваОбъектов.ОсновноеПредставлениеСправочника.ВВидеКода Тогда
			
			ПолеПредставления = "Код";
		КонецЕсли;
		
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных) Тогда
		
		Если ОбъектМетаданных.ОсновноеПредставление
			= Метаданные.СвойстваОбъектов.ОсновноеПредставлениеВидаХарактеристики.ВВидеКода Тогда
			
			ПолеПредставления = "Код";
		КонецЕсли;
		
	ИначеЕсли Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных) Тогда
		
		Если ОбъектМетаданных.ОсновноеПредставление
			= Метаданные.СвойстваОбъектов.ОсновноеПредставлениеСчета.ВВидеКода Тогда
			
			ПолеПредставления = "Код";
		КонецЕсли;
		
	ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(ОбъектМетаданных) Тогда
		
		Если ОбъектМетаданных.ОсновноеПредставление
			= Метаданные.СвойстваОбъектов.ОсновноеПредставлениеВидаРасчета.ВВидеКода Тогда
			
			ПолеПредставления = "Код";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПолеПредставления;
	
КонецФункции

#КонецОбласти
