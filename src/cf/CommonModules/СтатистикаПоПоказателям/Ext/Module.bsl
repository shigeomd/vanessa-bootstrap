////////////////////////////////////////////////////////////////////////////////
// Подсистема "СтатистикаПоПоказателям"
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

Процедура ЭкспортНакопленнойСтатистики() Экспорт
	
	СекундВЧасе = 3600;
	
	НижняяГраница = Константы.НижняяГраницаСчитыванияСтатистики.Получить();
	ВерхняяГраница = ТекущаяДата();
	
	Интервал = ВерхняяГраница - НижняяГраница;
	
	Если Интервал <= 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Данные извлекаем за интервал не больший 1 часа.
	Если Интервал > СекундВЧасе Тогда
		ВерхняяГраница = НижняяГраница + СекундВЧасе;
	КонецЕсли;
		
	// Извлечение данных статистики
	ОтборИнформация = Новый Структура("ДатаНачала, ДатаОкончания, Уровень",
		НижняяГраница, ВерхняяГраница, УровеньЖурналаРегистрации.Информация);
		
	ЖурналРегистрацииИнформация = Новый ТаблицаЗначений;
	ВыгрузитьЖурналРегистрации(ЖурналРегистрацииИнформация, ОтборИнформация);
	
	ТаблицаДляОтправки = ПодготовитьТаблицуДляОтправки(ЖурналРегистрацииИнформация);
	
	Если ЗначениеЗаполнено(ТаблицаДляОтправки) Тогда
		ОтправитьСтатистику(ТаблицаДляОтправки, ВерхняяГраница);
	Иначе
		// Фиксация нижней границы обработки
		Константы.НижняяГраницаСчитыванияСтатистики.Установить(ВерхняяГраница);
	КонецЕсли; 

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПодготовитьТаблицуДляОтправки(ЖурналРегистрацииИнформация)
	
	ТаблицаИнформация = Новый ТаблицаЗначений;
	ТаблицаИнформация.Колонки.Добавить("Событие");
	ТаблицаИнформация.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ТаблицаИнформация.Колонки.Добавить("ОбластьДанных", Новый ОписаниеТипов("Число,Строка"));
	ТаблицаИнформация.Колонки.Добавить("Период");
	
	ЕстьРазделитель = ЖурналРегистрацииИнформация.Колонки.Найти("РазделениеДанныхСеанса") <> Неопределено;
	Для Каждого СтрокаТаблицы Из ЖурналРегистрацииИнформация Цикл
		МаркерСобытияСтатистики = СтатистикаПоПоказателямКлиентСервер.МаркерСобытияСтатистики();
		Если Найти(СтрокаТаблицы.Событие, МаркерСобытияСтатистики) Тогда
			НоваяСтрока = ТаблицаИнформация.Добавить();
			НоваяСтрока.Событие = СокрЛП(СтрЗаменить(СтрокаТаблицы.Событие, МаркерСобытияСтатистики + ".", ""));
			НоваяСтрока.Количество = 1;
			Если ЕстьРазделитель И СтрокаТаблицы.РазделениеДанныхСеанса.Свойство("ОбластьДанныхОсновныеДанные") Тогда
				НоваяСтрока.ОбластьДанных = СтрокаТаблицы.РазделениеДанныхСеанса.ОбластьДанныхОсновныеДанные;
			КонецЕсли;
			
			НоваяСтрока.Период = НачалоМинуты(СтрокаТаблицы.Дата);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаИнформация.Свернуть("Событие, ОбластьДанных, Период", "Количество");
	
	Возврат ТаблицаИнформация;
	
КонецФункции

Процедура ОтправитьСтатистику(Знач КоллекцияСведений, ВерхняяГраница)
	
	ИмяФайлаСтатистики = ПолучитьИмяВременногоФайла(".txt");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайлаСтатистики);
	
	Для Каждого СтрокаТаблицы Из КоллекцияСведений Цикл
		СтрокаДляЗаписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1#%2#%3#%4", XMLСтрока(СтрокаТаблицы.Период), XMLСтрока(СтрокаТаблицы.ОбластьДанных),
			СтрокаТаблицы.Событие, XMLСтрока(СтрокаТаблицы.Количество));
			
		ЗаписьТекста.ЗаписатьСтроку(СтрокаДляЗаписи);
	КонецЦикла;
	
	ЗаписьТекста.Закрыть();
	
	ИмяАрхива = ПолучитьИмяВременногоФайла(".zip");
	
	ЗаписьZip = Новый ЗаписьZipФайла(ИмяАрхива,,,, УровеньСжатияZIP.Максимальный);
	ЗаписьZip.Добавить(ИмяФайлаСтатистики);
	ЗаписьZip.Записать();
	
	ИдентификаторФайла = РаботаВМоделиСервиса.ПоместитьФайлВХранилищеМенеджераСервиса(Новый ДвоичныеДанные(ИмяАрхива));
	
	УдалитьФайлы(ИмяФайлаСтатистики);
	УдалитьФайлы(ИмяАрхива);
	
	НачатьТранзакцию();
	
	Попытка
		
		Сообщение = СообщенияВМоделиСервиса.НовоеСообщение(
			СообщенияСтатистикаПоПоказателямИнтерфейс.СообщениеСведение());
		
		Тело = Сообщение.Body;
		Тело.FileId = ИдентификаторФайла;
		
		СообщенияВМоделиСервиса.ОтправитьСообщение(
			Сообщение,
			РаботаВМоделиСервисаПовтИсп.КонечнаяТочкаМенеджераСервиса());
			
		// Фиксация нижней границы обработки
		Константы.НижняяГраницаСчитыванияСтатистики.Установить(ВерхняяГраница);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти