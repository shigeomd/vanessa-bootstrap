#Область ПрограммныйИнтерфейс

// Возвращает оптимальную периодичность уплаты фиксированных страховых взносов ИП,
// в зависимости от системы налогообложения
//
Функция ПериодичностьУплатыФиксированныхСтраховыхВзносов(Организация, Период) Экспорт
	
	ПрименяетсяУСН = УчетнаяПолитика.ПрименяетсяУСНЗаПериод(Организация, НачалоКвартала(Период), КонецКвартала(Период));
	ПлательщикЕНВД = УчетнаяПолитика.ПлательщикЕНВДЗаПериод(Организация, НачалоКвартала(Период), КонецКвартала(Период));
	
	ЕстьНаемныеРаботники = НЕ ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии")
		ИЛИ УчетЗарплаты.ИПИспользуетТрудНаемныхРаботников(Организация);
	
	Если ПрименяетсяУСН ИЛИ (ПлательщикЕНВД И НЕ ЕстьНаемныеРаботники) Тогда
		Периодичность= Перечисления.Периодичность.Квартал;
	Иначе
		Периодичность= Перечисления.Периодичность.Год;
	КонецЕсли;
	
	Возврат Периодичность;
	
КонецФункции

// Возвращает суммы фиксированных страховых взносов к уплате на дату с учетом уплаченных ранее в налоговом периоде
//
Функция ФиксированныеСтраховыеВзносыКУплате(Организация, Период, ПериодичностьУплаты, СообщатьОбОшибках = Истина, Регистратор = Неопределено) Экспорт
	
	СтраховыеВзносы = Новый Структура;
	
	// Сумма годового взноса
	СтраховыеВзносы.Вставить("СуммаВзносаПФРВсего",   0);
	СтраховыеВзносы.Вставить("СуммаВзносаФФОМСВсего", 0);
	СтраховыеВзносы.Вставить("СуммаВзносаФССВсего",   0);
	
	// Уплачено ранее с начала года
	СтраховыеВзносы.Вставить("СуммаВзносаПФРУплачено",   0);
	СтраховыеВзносы.Вставить("СуммаВзносаФФОМСУплачено", 0);
	СтраховыеВзносы.Вставить("СуммаВзносаФССУплачено",   0);
	
	// Сумма к уплате сейчас
	СтраховыеВзносы.Вставить("СуммаВзносаПФР",   0);
	СтраховыеВзносы.Вставить("СуммаВзносаФФОМС", 0);
	СтраховыеВзносы.Вставить("СуммаВзносаФСС",   0);
	
	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация) Тогда
		Возврат СтраховыеВзносы;
	КонецЕсли;
	
	Если Период < '20140101' Тогда
		Если СообщатьОбОшибках Тогда
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Расчет фиксированных страховых взносов за %1 год не поддерживается'"), Формат(Период, "ДФ=yyyy"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
		КонецЕсли;
		Возврат СтраховыеВзносы;
	КонецЕсли;
	
	ФиксированныеСтраховыеВзносы  = РассчитатьФиксированныеСтраховыеВзносы(Организация, 
		?(ПериодичностьУплаты = Перечисления.Периодичность.Квартал, КонецКвартала(Период), КонецГода(Период)));
	
	СтраховыеВзносыУплаченные = СтраховыеВзносыУплаченныеЗаСтраховойПериод(Организация, Период, 
		Перечисления.ВидыСтраховыхВзносовИП.ФиксированныеСтраховыеВзносы, Регистратор);
	
	СтраховыеВзносыУплаченные.Индексы.Добавить("СчетУчета");
	
	ПараметрыОтбора = Новый Структура("СчетУчета");
	
	СчетаУчетаСтраховыхВзносов = СчетаУчетаСтраховыхВзносов();
	
	Для Каждого КлючИЗначение Из СчетаУчетаСтраховыхВзносов Цикл
		
		Начислено = ФиксированныеСтраховыеВзносы[КлючИЗначение.Ключ];
		Всего     = ФиксированныеСтраховыеВзносы[КлючИЗначение.Ключ + "Всего"];
		
		ПараметрыОтбора.СчетУчета = КлючИЗначение.Значение;
		МассивСтрокОплаты  = СтраховыеВзносыУплаченные.НайтиСтроки(ПараметрыОтбора);
		
		Уплачено = 0;
		Для Каждого СтрокаОплаты Из МассивСтрокОплаты Цикл
			Уплачено = Уплачено + СтрокаОплаты.Сумма;
		КонецЦикла;
		
		СтраховыеВзносы["СуммаВзноса" + КлючИЗначение.Ключ + "Всего"]     = Всего;
		СтраховыеВзносы["СуммаВзноса" + КлючИЗначение.Ключ + "Уплачено"]  = Уплачено;
		СтраховыеВзносы["СуммаВзноса" + КлючИЗначение.Ключ]               = Макс(Начислено - Уплачено, 0);
		
	КонецЦикла;
	
	Возврат СтраховыеВзносы;
	
КонецФункции

// Возвращает суммы страховых взносов, исчисленные с суммы доходов
//
Функция СтраховыеВзносыСДоходовКУплате(Организация, Период, ПериодичностьУплаты, СтруктураДоходов, СообщатьОбОшибках = Истина) Экспорт
	
	СтраховыеВзносы = Новый Структура;
	СтраховыеВзносы.Вставить("ПредельнаяСуммаВзноса",          Ложь);
	СтраховыеВзносы.Вставить("СуммаВзносаПФРсДоходовВсего",    0); // Сумма взноса с начала года
	СтраховыеВзносы.Вставить("СуммаВзносаПФРсДоходовУплачено", 0); // Уплачено ранее с начала года
	СтраховыеВзносы.Вставить("СуммаВзносаПФРсДоходов",         0); // Сумма к уплате
	
	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация) Тогда
		Возврат СтраховыеВзносы;
	КонецЕсли;
	
	Если Период < '20140101' Тогда
		Если СообщатьОбОшибках Тогда
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Страховые взносы, исчисленные с суммы дохода за %1 год не уплачиваются'"), Формат(Период, "Л=ru; ДФ=yyyy"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
		КонецЕсли;
		Возврат СтраховыеВзносы;
	КонецЕсли;
	
	// Расчет суммы взноса
	
	ДанныеДляРасчета = ДанныеДляРасчетаСтраховыхВзносовСДоходов(Организация, Период);
	
	ВсегоДоходов = СтруктураДоходов.СуммаДоходаИП
				 + СтруктураДоходов.СуммаДоходаУСН
				 + СтруктураДоходов.ВмененныйДоход
				 + СтруктураДоходов.ПотенциальноВозможныйДоход;
	
	ОблагаемыйДоход = Макс(ВсегоДоходов - ДанныеДляРасчета.ПорогДоходов, 0);
	Если ОблагаемыйДоход = 0 Тогда
		Возврат СтраховыеВзносы;
	КонецЕсли;
	
	РасчетнаяСуммаВзноса    = Окр(ОблагаемыйДоход * ДанныеДляРасчета.ПроцентВзносов / 100, 2, 1);
	МаксимальнаяСуммаВзноса = ДанныеДляРасчета.ПредельнаяСуммаВзноса - ДанныеДляРасчета.ФиксированнаяЧасть;
	
	СтраховыеВзносыУплаченные = СтраховыеВзносыУплаченныеЗаСтраховойПериод(Организация, Период, 
		Перечисления.ВидыСтраховыхВзносовИП.СтраховыеВзносыСДоходов);
	
	// Проверка предельной величины взноса
	СтраховыеВзносы.ПредельнаяСуммаВзноса = (РасчетнаяСуммаВзноса >= МаксимальнаяСуммаВзноса);
	
	СтраховыеВзносы.СуммаВзносаПФРсДоходовВсего    = ?(СтраховыеВзносы.ПредельнаяСуммаВзноса, МаксимальнаяСуммаВзноса, РасчетнаяСуммаВзноса);
	СтраховыеВзносы.СуммаВзносаПФРсДоходовУплачено = СтраховыеВзносыУплаченные.Итог("Сумма");
	
	СтраховыеВзносы.СуммаВзносаПФРсДоходов = СтраховыеВзносы.СуммаВзносаПФРсДоходовВсего - СтраховыеВзносы.СуммаВзносаПФРсДоходовУплачено;
	
	Возврат СтраховыеВзносы;
	
КонецФункции

Функция ДанныеДляРасчетаСтраховыхВзносовСДоходов(Организация, Период) Экспорт
	
	ДанныеДляРасчета = Новый Структура;
	ДанныеДляРасчета.Вставить("ПроцентВзносов", 0);
	ДанныеДляРасчета.Вставить("ПорогДоходов", 0);
	ДанныеДляРасчета.Вставить("ПредельнаяСуммаВзноса", 0); // с учетом фиксированной части
	ДанныеДляРасчета.Вставить("ФиксированнаяЧасть", 0);
	
	ФиксированныеСтраховыеВзносы = РассчитатьФиксированныеСтраховыеВзносы(Организация, КонецГода(Период), Ложь);
	
	ТарифыСтраховыхВзносов = ТарифыСтраховыхВзносов(Период);
	
	ПредельнаяСуммаВзноса = 8 * МинимальнаяОплатаТрудаРФНаНачалоГода(Период) * ТарифыСтраховыхВзносов.ПФР/100 * 12;
	
	ДанныеДляРасчета.ПроцентВзносов        = 1;
	ДанныеДляРасчета.ПорогДоходов          = 300000;
	ДанныеДляРасчета.ПредельнаяСуммаВзноса = ПредельнаяСуммаВзноса;
	ДанныеДляРасчета.ФиксированнаяЧасть    = ФиксированныеСтраховыеВзносы.ПФР;
	
	Возврат ДанныеДляРасчета;
	
КонецФункции

Функция СтруктураДоходовПоВидамДеятельности(Организация, Знач НачалоПериода, Знач КонецПериода, СообщатьОбОшибках = Истина) Экспорт
	
	СтруктураДоходов = Новый Структура("СуммаДоходаИП, СуммаДоходаУСН, ВмененныйДоход, ПотенциальноВозможныйДоход", 0, 0, 0, 0);
	
	ДатаРегистрации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ДатаРегистрации");
	Если ЗначениеЗаполнено(ДатаРегистрации) Тогда
		Если ДатаРегистрации > КонецПериода Тогда
			Возврат СтруктураДоходов;
		КонецЕсли;
		Если ДатаРегистрации > НачалоПериода Тогда
			НачалоПериода = ДатаРегистрации;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураДоходов.СуммаДоходаИП = УчетДоходовИРасходовПредпринимателя.СуммаДохода(
		Организация, НачалоПериода, КонецПериода);
		
	СтруктураДоходов.СуммаДоходаУСН = УчетУСН.СуммаДохода(
		Организация, НачалоПериода, КонецПериода);
		
	СтруктураДоходов.ВмененныйДоход = УчетЕНВД.ВмененныйДоход(
		Организация, НачалоПериода, КонецПериода, СообщатьОбОшибках);
		
	СтруктураДоходов.ПотенциальноВозможныйДоход = УчетУСН.ПотенциальноВозможныйДоход(
		Организация, НачалоПериода, КонецПериода, , СообщатьОбОшибках);
	
	Возврат СтруктураДоходов;
	
КонецФункции

Функция ЭтоСчетУчетаСтраховыхВзносовИП(СчетУчета) Экспорт
	
	Если ЗначениеЗаполнено(СчетУчета) Тогда
		СчетаУчетаСтраховыхВзносов = СчетаУчетаСтраховыхВзносов();
		Для Каждого КлючИЗначение Из СчетаУчетаСтраховыхВзносов Цикл
			Если КлючИЗначение.Значение = СчетУчета Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#Область УплатаСтраховыхВзносов

Функция ПодготовитьТаблицуУплатыСтраховыхВзносов(ТаблицаРасшифровкаПлатежа, ТаблицаРеквизиты) Экспорт
	
	Параметры = ПодготовитьПараметрыУплатыСтраховыхВзносов(ТаблицаРасшифровкаПлатежа, ТаблицаРеквизиты);
	Если Параметры.РасшифровкаПлатежа.Количество() = 0 Или Параметры.Реквизиты.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Реквизиты.Организация) Или Не ЭтоСчетУчетаСтраховыхВзносовИП(Реквизиты.СчетУчета) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РасшифровкаПлатежа = Параметры.РасшифровкаПлатежа;
	
	НалоговыйПериод = ?(ЗначениеЗаполнено(Реквизиты.НалоговыйПериод), Реквизиты.НалоговыйПериод, Реквизиты.Период);
	
	НомерСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НомерСубконто(
		Реквизиты.СчетУчета, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыСтраховыхВзносовИП);
		
	Если Реквизиты.СчетУчета = ПланыСчетов.Хозрасчетный.ПФР_ОПС_ИП И НомерСубконто > 0 Тогда
		
		ФиксированныеСтраховыеВзносыКУплате = ФиксированныеСтраховыеВзносыКУплате(
			Реквизиты.Организация, НалоговыйПериод, Перечисления.Периодичность.Год, Ложь, Реквизиты.Регистратор);
		
		СуммаВзносаПФРКУплате = ФиксированныеСтраховыеВзносыКУплате.СуммаВзносаПФР;
		
		Для Каждого СтрокаРасшифровки Из РасшифровкаПлатежа Цикл
			ВидСтраховогоВзноса = СтрокаРасшифровки["СубконтоДт" + НомерСубконто];
			Если ВидСтраховогоВзноса = Перечисления.ВидыСтраховыхВзносовИП.ФиксированныеСтраховыеВзносы Тогда
				СуммаВзносаПФРКУплате = СуммаВзносаПФРКУплате - СтрокаРасшифровки.СуммаРуб;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаРасшифровки Из РасшифровкаПлатежа Цикл
			ВидСтраховогоВзноса = СтрокаРасшифровки["СубконтоДт" + НомерСубконто];
			Если Не ЗначениеЗаполнено(ВидСтраховогоВзноса) Тогда
				
				Если СуммаВзносаПФРКУплате = 0 Тогда
					
					СтрокаРасшифровки["СубконтоДт" + НомерСубконто] = Перечисления.ВидыСтраховыхВзносовИП.СтраховыеВзносыСДоходов;
					
				ИначеЕсли СтрокаРасшифровки.СуммаРуб > СуммаВзносаПФРКУплате Тогда
					
					СуммаРуб = СтрокаРасшифровки.СуммаРуб;
					
					СтрокаРасшифровки["СубконтоДт" + НомерСубконто] = Перечисления.ВидыСтраховыхВзносовИП.ФиксированныеСтраховыеВзносы;
					СтрокаРасшифровки.СуммаРуб = СуммаВзносаПФРКУплате;
					
					НоваяСтрока = РасшифровкаПлатежа.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасшифровки);
					НоваяСтрока["СубконтоДт" + НомерСубконто] = Перечисления.ВидыСтраховыхВзносовИП.СтраховыеВзносыСДоходов;
					НоваяСтрока.СуммаРуб = СуммаРуб - СуммаВзносаПФРКУплате;
					
					СуммаВзносаПФРКУплате = 0;
					
				Иначе
					
					СтрокаРасшифровки["СубконтоДт" + НомерСубконто] = Перечисления.ВидыСтраховыхВзносовИП.ФиксированныеСтраховыеВзносы;
					СуммаВзносаПФРКУплате = СуммаВзносаПФРКУплате - СтрокаРасшифровки.СуммаРуб;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла
		
	КонецЕсли;
	
	Возврат РасшифровкаПлатежа;
	
КонецФункции

Процедура СформироватьДвиженияУплатаСтраховыхВзносов(ТаблицаРасшифровкаПлатежа, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыУплатыСтраховыхВзносов(ТаблицаРасшифровкаПлатежа, ТаблицаРеквизиты);
	Если Параметры.РасшифровкаПлатежа.Количество() = 0 ИЛИ Параметры.Реквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Реквизиты.Организация) Или Не УчетСтраховыхВзносовИП.ЭтоСчетУчетаСтраховыхВзносовИП(Реквизиты.СчетУчета) Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаПлатежа Из Параметры.РасшифровкаПлатежа Цикл
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период      = Реквизиты.Период;
		Проводка.Содержание  = Реквизиты.Содержание;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Сумма       = СтрокаПлатежа.СуммаРуб;
		
		Проводка.СчетДт = СтрокаПлатежа.СчетДт;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаПлатежа.СубконтоДт1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаПлатежа.СубконтоДт2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаПлатежа.СубконтоДт3);
		
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = СтрокаПлатежа.ПодразделениеДт;
		КонецЕсли;
		
		Проводка.СчетКт = СтрокаПлатежа.СчетКт;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаПлатежа.СубконтоКт1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаПлатежа.СубконтоКт2);
		
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = СтрокаПлатежа.ПодразделениеКт;
		КонецЕсли;

	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыУплатыСтраховыхВзносов(ТаблицаРасшифровкаПлатежа, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.РасшифровкаПлатежа
	
	СписокОбязательныхКолонок = ""
	+ "СчетДт,"                // <ПланСчетовСсылка.Хозрасчетный> - счет по дебету проводки (корреспондирующий со счетом ден.средств)
	+ "СубконтоДт1,"           // Субконто1 по счету дебета
	+ "СубконтоДт2,"           // Субконто2 по счету дебета
	+ "СубконтоДт3,"           // Субконто3 по счету дебета
	+ "ПодразделениеДт,"       // <Ссылка на справочник подразделений> - подразделение по дебету проводки
	+ "СчетКт,"                // <ПланСчетовСсылка.Хозрасчетный> - счет по кредиту проводки (счет учета денежных средств)
	+ "СубконтоКт1,"           // Субконто1 по счету кредита
	+ "СубконтоКт2,"           // Субконто2 по счету кредита
	+ "СубконтоКт3,"           // Субконто3 по счету кредита
	+ "ПодразделениеКт,"       // <Ссылка на справочник подразделений> - подразделение по кредиту проводки
	+ "СуммаРуб";              // <Число,15,2> - рублевая сумма поступления
	
	
	Параметры.Вставить("РасшифровкаПлатежа", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРасшифровкаПлатежа, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"                // <Дата> - период движений - дата документа
	+ "Организация,"           // <СправочникСсылка.Организации>
	+ "ВалютаДокумента,"       // <СправочникСсылка.Валюты>
	+ "Содержание,"            // <Строка,150> - содержание проводок
	+ "СчетУчета,"             // <ПланСчетовСсылка.Хозрасчетный> - счет по дебету проводки (корреспондирующий со счетом ден.средств)
	+ "НалоговыйПериод,"       // <Дата> - налоговый период, за который уплачивается взнос
	+ "Регистратор";           // <ДокументСсылка> - документ, который проводится
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти

#Область НачислениеСтраховыхВзносов

// При квартальной уплате начисляются уплаченные взносы, но в конце года вся сумма взносов
//
Функция ПодготовитьТаблицуНачисленияСтраховыхВзносов(ТаблицаРеквизитов) Экспорт
	
	Параметры = ПодготовитьПараметрыТаблицыНачисленияСтраховыхВзносов(ТаблицаРеквизитов);
	Если Параметры.Реквизиты.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Если Реквизиты.Период < '20140101' Или ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Реквизиты.Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаСтраховыхВзносов = Новый ТаблицаЗначений;
	ТаблицаСтраховыхВзносов.Колонки.Добавить("СтраховойПериод",      ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаСтраховыхВзносов.Колонки.Добавить("СчетУчета",            Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаСтраховыхВзносов.Колонки.Добавить("ВидПлатежаВГосБюджет", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПлатежейВГосБюджет"));
	ТаблицаСтраховыхВзносов.Колонки.Добавить("ВидСтраховогоВзноса",  Новый ОписаниеТипов("ПеречислениеСсылка.ВидыСтраховыхВзносовИП"));
	ТаблицаСтраховыхВзносов.Колонки.Добавить("СтатьяЗатрат",         Новый ОписаниеТипов("СправочникСсылка.ПрочиеДоходыИРасходы"));
	ТаблицаСтраховыхВзносов.Колонки.Добавить("ДокументОплаты",       Документы.ТипВсеСсылки());
	ТаблицаСтраховыхВзносов.Колонки.Добавить("Сумма",                ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	// Для ИП на ОСНО регламентная операция выполняется раз в год, для остальных - раз в квартал
	НачалоПериода = ?(УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период),
		НачалоГода(Реквизиты.Период), НачалоКвартала(Реквизиты.Период));
	КонецПериода  = КонецМесяца(Реквизиты.Период);
	
	ФиксированныеСтраховыеВзносы = РассчитатьФиксированныеСтраховыеВзносы(Реквизиты.Организация, КонецПериода, Ложь);
	
	ФиксированныеСтраховыеВзносыНачисленные = ФиксированныеСтраховыеВзносыНачисленные(Реквизиты.Организация, НачалоГода(Реквизиты.Период), КонецПериода);
	ФиксированныеСтраховыеВзносыНачисленные.Индексы.Добавить("СчетУчета, ВидСтраховогоВзноса");
	
	ПараметрыОтбора = Новый Структура("СчетУчета, ВидСтраховогоВзноса");
	
	СтраховыеВзносыУплаченные = СтраховыеВзносыУплаченныеЗаПериод(Реквизиты.Организация, НачалоПериода, КонецПериода);
	СтраховыеВзносыУплаченные.Индексы.Добавить("СчетУчета");
	
	СчетаУчетаСтраховыхВзносов = СчетаУчетаСтраховыхВзносов();
	Для Каждого КлючИЗначение Из СчетаУчетаСтраховыхВзносов Цикл
		
		СчетУчета    = КлючИЗначение.Значение;
		ГодовойВзнос = ФиксированныеСтраховыеВзносы[КлючИЗначение.Ключ + "Всего"];
		
		НайденныеПлатежи = СтраховыеВзносыУплаченные.Скопировать(Новый Структура("СчетУчета", СчетУчета));
		НайденныеПлатежи.Сортировать("ДатаДокументаОплаты, ДокументОплаты", Новый СравнениеЗначений);
		
		Для Каждого Платеж Из НайденныеПлатежи Цикл
			
			// Начисление уплаченных страховых взносов
			
			Если ЗначениеЗаполнено(Платеж.СтраховойПериод) Тогда
				
				ГраницыПериодаУплаты = ГраницыПериодаУплатыСтраховыхВзносов(
					Платеж.СтраховойПериод, Платеж.ВидСтраховогоВзноса);
					
				Если НачалоГода(Реквизиты.Период) < НачалоГода(ГраницыПериодаУплаты.НачалоПериода)
					Или НачалоГода(Реквизиты.Период) > НачалоГода(ГраницыПериодаУплаты.КонецПериода) Тогда
					
					Продолжить;
					
				КонецЕсли;
				
			КонецЕсли;
			
			НайденныеНачисления = ФиксированныеСтраховыеВзносыНачисленные.НайтиСтроки(
				Новый Структура("СчетУчета, ВидСтраховогоВзноса", СчетУчета, Платеж.ВидСтраховогоВзноса));
			
			Если Платеж.ВидСтраховогоВзноса = Перечисления.ВидыСтраховыхВзносовИП.ФиксированныеСтраховыеВзносы Тогда
				Если НайденныеНачисления.Количество() > 0 Тогда
					Сумма = Мин(Платеж.Сумма, ГодовойВзнос - НайденныеНачисления[0].Сумма);
				Иначе
					Сумма = Мин(Платеж.Сумма, ГодовойВзнос);
				КонецЕсли;
			Иначе
				// Страховые взносы, исчисленные с суммы дохода
				Сумма = Платеж.Сумма;
			КонецЕсли;
			
			Если Сумма <> 0 Тогда
				
				НоваяСтрока = ТаблицаСтраховыхВзносов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Платеж);
				НоваяСтрока.СтраховойПериод  = ?(ЗначениеЗаполнено(Платеж.СтраховойПериод), Платеж.СтраховойПериод, Реквизиты.Период);
				НоваяСтрока.СтатьяЗатрат     = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.РасходыПоУплатеСтраховыхВзносовИП");
				НоваяСтрока.Сумма            = Сумма;
				
				// Учитываем в таблице начислений
				Если НайденныеНачисления.Количество() > 0 Тогда
					НайденныеНачисления[0].Сумма = НайденныеНачисления[0].Сумма + Сумма;
				Иначе
					НоваяСтрока = ФиксированныеСтраховыеВзносыНачисленные.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Платеж);
					НоваяСтрока.Сумма = Сумма;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если КонецПериода = КонецГода(Реквизиты.Период) Тогда
			
			// Доначисление фиксированных страховых взносов за год
			НайденныеНачисления = ФиксированныеСтраховыеВзносыНачисленные.НайтиСтроки(
				Новый Структура("СчетУчета, ВидСтраховогоВзноса", СчетУчета, Перечисления.ВидыСтраховыхВзносовИП.ФиксированныеСтраховыеВзносы));
			
			Если НайденныеНачисления.Количество() > 0 Тогда
				Сумма = Макс(ГодовойВзнос - НайденныеНачисления[0].Сумма, 0);
			Иначе
				Сумма = ГодовойВзнос;
			КонецЕсли;
			
			Если Сумма <> 0 Тогда
				НоваяСтрока = ТаблицаСтраховыхВзносов.Добавить();
				НоваяСтрока.СтраховойПериод      = КонецГода(Реквизиты.Период);
				НоваяСтрока.СчетУчета            = СчетУчета;
				НоваяСтрока.ВидПлатежаВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог;
				НоваяСтрока.ВидСтраховогоВзноса  = Перечисления.ВидыСтраховыхВзносовИП.ФиксированныеСтраховыеВзносы;
				НоваяСтрока.СтатьяЗатрат         = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.РасходыПоУплатеСтраховыхВзносовИП");
				НоваяСтрока.Сумма                = Сумма;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаСтраховыхВзносов;
	
КонецФункции

Функция ПодготовитьПараметрыТаблицыНачисленияСтраховыхВзносов(ТаблицаРеквизитов)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"			// <Дата> - период движений - дата документа
		+ "Регистратор,"	// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация";	// <СправочникСсылка.Организации> - оранизация
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияНачислениеСтраховыхВзносов(ТаблицаСтраховыхВзносов, ТаблицаРеквизитов, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыНачисленияСтраховыхВзносов(ТаблицаСтраховыхВзносов, ТаблицаРеквизитов);
	Если Параметры.СтраховыеВзносы.Количество() = 0 ИЛИ Параметры.Реквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Если Реквизиты.Период < '20140101' Или ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Реквизиты.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ПериодичностьУплатыФиксированныхСтраховыхВзносов = ПериодичностьУплатыФиксированныхСтраховыхВзносов(Реквизиты.Организация, Реквизиты.Период);
	
	Для каждого СтраховойВзнос Из Параметры.СтраховыеВзносы Цикл
		
		Проводка = Движения.Хозрасчетный.Добавить();
		ЗаполнитьЗначенияСвойств(Проводка, Реквизиты);
		
		Если ПериодичностьУплатыФиксированныхСтраховыхВзносов = Перечисления.Периодичность.Квартал 
			И НачалоГода(СтраховойВзнос.СтраховойПериод) = НачалоГода(Реквизиты.Период) Тогда
			ПредставлениеПериода = ПредставлениеПериода(
				НачалоКвартала(Реквизиты.Период), КонецКвартала(Реквизиты.Период), "ФП=Истина");
		Иначе
			ПредставлениеПериода = ПредставлениеПериода(
				НачалоГода(СтраховойВзнос.СтраховойПериод), КонецГода(СтраховойВзнос.СтраховойПериод), "ФП=Истина");
		КонецЕсли;
		
		Проводка.Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"Начислены страховые взносы за %1", ПредставлениеПериода);
		
		Проводка.СчетДт = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПрочиеДоходыИРасходы",
			СтраховойВзнос.СтатьяЗатрат);
		
		Проводка.СчетКт = СтраховойВзнос.СчетУчета;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыПлатежейВГосБюджет",
			СтраховойВзнос.ВидПлатежаВГосБюджет);
			
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыСтраховыхВзносовИП",
			СтраховойВзнос.ВидСтраховогоВзноса);
		
		Проводка.Сумма = СтраховойВзнос.Сумма;
		
	КонецЦикла
	
КонецПроцедуры

Функция ПодготовитьПараметрыНачисленияСтраховыхВзносов(ТаблицаСтраховыхВзносов, ТаблицаРеквизитов)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "СтраховойПериод,"		// <Дата> - период, к которому относится уплата взноса
		+ "СчетУчета,"				// <ПланСчетовСсылка.Хозрасчетный> - счет учета страховых взносов
		+ "ВидПлатежаВГосБюджет,"	// <ПеречислениеСсылка.ВидыПлатежейВГосБюджет> - вид платежа в бюджет
		+ "ВидСтраховогоВзноса,"	// <ПеречислениеСсылка.ВидыСтраховыхВзносовИП> - вид страхового взноса
		+ "СтатьяЗатрат,"			// <СправочникСсылка.ПрочиеДоходыИРасходы> - статья затрат
		+ "Сумма";					// <СправочникСсылка.Подразделения> - подразделение
		
	Параметры.Вставить("СтраховыеВзносы", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСтраховыхВзносов, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"			// <Дата> - период движений - дата документа
		+ "Регистратор,"	// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация";	// <СправочникСсылка.Организации> - оранизация
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции

Процедура ВыявитьУчетныеОшибкиУплатыСтраховыхВзносов(Ошибки, Период, Организация) Экспорт
	
	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	НачалоПериода = ?(УчетнаяПолитика.ПлательщикНДФЛ(Организация, Период), НачалоГода(Период), НачалоКвартала(Период));
	КонецПериода  = КонецМесяца(Период);
	
	ПроверитьЗаполнениеВидовПлатежейВГосБюджет(Ошибки, НачалоПериода, КонецПериода, Организация);
	
	ПроверитьЗаполнениеВидовСтраховыхВзносов(Ошибки, НачалоПериода, КонецПериода, Организация);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция РассчитатьФиксированныеСтраховыеВзносы(Организация, Знач Период, СообщатьОбОшибках = Истина)
	
	Период = КонецМесяца(Период); // Считаем взносы до конца месяца
	
	СтраховыеВзносы = Новый Структура;
	// Суммы взносов до конца текущего месяца
	СтраховыеВзносы.Вставить("ПФР",        0);
	СтраховыеВзносы.Вставить("ФФОМС",      0);
	СтраховыеВзносы.Вставить("ФСС",        0);
	// Суммы взносов до конца года
	СтраховыеВзносы.Вставить("ПФРВсего",   0);
	СтраховыеВзносы.Вставить("ФФОМСВсего", 0);
	СтраховыеВзносы.Вставить("ФССВсего",   0);
	
	// Расчет сумм взносов в фонды
	
	ДатаРегистрации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ДатаРегистрации");
	
	Если НЕ ЗначениеЗаполнено(ДатаРегистрации) ИЛИ НачалоДня(ДатаРегистрации) < НачалоГода(Период) Тогда
		
		МесяцевДоКонцаГода  = 12;
		ПолныхМесяцев       = Месяц(Период);
		ДнейВНеполномМесяце = 0;
		ПолныхДней          = 0;
		
	Иначе
		// Размер страховых взносов определяется пропорционально количеству календарных месяцев начиная с календарного месяца
		// начала деятельности (для индивидуального предпринимателя - календарный месяц, в котором произведена его государственная
		// регистрация в качестве индивидуального предпринимателя)
		МесяцевДоКонцаГода  = 12 - Месяц(ДатаРегистрации);
		ПолныхМесяцев       = Месяц(Период) - Месяц(ДатаРегистрации);
		
		// За неполный месяц деятельности фиксированный размер страховых взносов определяется пропорционально количеству
		// календарных дней этого месяца. Течение срока начинается на следующий день после календарной даты, которым
		// определено его начало.
		ДнейВНеполномМесяце = День(КонецМесяца(ДатаРегистрации));
		ПолныхДней          = ДнейВНеполномМесяце - День(ДатаРегистрации);
		
	КонецЕсли;
	
	ТарифыСтраховыхВзносов = ТарифыСтраховыхВзносов(Период);
	МРОТ = МинимальнаяОплатаТрудаРФНаНачалоГода(Период);
	
	// Сумма взносов за один месяц
	МесячныйВзносПФР   = МРОТ * ТарифыСтраховыхВзносов.ПФР / 100;
	МесячныйВзносФФОМС = МРОТ * ТарифыСтраховыхВзносов.ФФОМС / 100;
	МесячныйВзносФСС   = МРОТ * ТарифыСтраховыхВзносов.ФСС / 100;
	
	// Сумма взносов за первый месяц деятельности
	СуммаВзносаПФРЗаНеполныйМесяц   = ?(ПолныхДней <> 0, МесячныйВзносПФР * ПолныхДней/ДнейВНеполномМесяце, 0);
	СуммаВзносаФФОМСЗаНеполныйМесяц = ?(ПолныхДней <> 0, МесячныйВзносФФОМС * ПолныхДней/ДнейВНеполномМесяце, 0);
	
	// Сумма взносов до конца текущего месяца
	СуммаВзносаПФР   = МесячныйВзносПФР * ПолныхМесяцев + СуммаВзносаПФРЗаНеполныйМесяц;
	СуммаВзносаФФОМС = МесячныйВзносФФОМС * ПолныхМесяцев + СуммаВзносаФФОМСЗаНеполныйМесяц;
	
	// Сумма взносов до конца года
	СуммаВзносаПФРВсего   = МесячныйВзносПФР * МесяцевДоКонцаГода + СуммаВзносаПФРЗаНеполныйМесяц;
	СуммаВзносаФФОМСВсего = МесячныйВзносФФОМС * МесяцевДоКонцаГода + СуммаВзносаФФОМСЗаНеполныйМесяц;
	
	Если УчетнаяПолитика.УплачиватьДобровольныеВзносыВФСС(Организация, Период) Тогда
		// Право на получение страхового обеспечения наступает только при условии уплаты
		// полной суммы страховых взносов за предшествующий календарный год
		СуммаВзносаФСС      = МесячныйВзносФСС * Месяц(Период);
		СуммаВзносаФССВсего = МесячныйВзносФСС * 12;
	Иначе
		СуммаВзносаФСС      = 0;
		СуммаВзносаФССВсего = 0;
	КонецЕсли;
	
	СтраховыеВзносы.ПФР        = Окр(СуммаВзносаПФР, 2, 1);
	СтраховыеВзносы.ФФОМС      = Окр(СуммаВзносаФФОМС, 2, 1);
	СтраховыеВзносы.ФСС        = Окр(СуммаВзносаФСС, 2, 1);
	
	СтраховыеВзносы.ПФРВсего   = Окр(СуммаВзносаПФРВсего, 2, 1);
	СтраховыеВзносы.ФФОМСВсего = Окр(СуммаВзносаФФОМСВсего, 2, 1);
	СтраховыеВзносы.ФССВсего   = Окр(СуммаВзносаФССВсего, 2, 1);
	
	Возврат СтраховыеВзносы;
	
КонецФункции

Функция СтраховыеВзносыУплаченныеЗаСтраховойПериод(Организация, СтраховойПериод, ВидСтраховыхВзносов = Неопределено, Регистратор = Неопределено)
	Перем СтраховыеВзносыУплаченные;
	
	Если Не ЗначениеЗаполнено(ВидСтраховыхВзносов)
		Или ВидСтраховыхВзносов = Перечисления.ВидыСтраховыхВзносовИП.ФиксированныеСтраховыеВзносы Тогда
		
		ГраницыПериода = ГраницыПериодаУплатыСтраховыхВзносов(СтраховойПериод, Перечисления.ВидыСтраховыхВзносовИП.ФиксированныеСтраховыеВзносы);
		
		СтраховыеВзносыУплаченные = СтраховыеВзносыУплаченные(Организация, ГраницыПериода.НачалоПериода, ГраницыПериода.КонецПериода,
			СтраховойПериод, Перечисления.ВидыСтраховыхВзносовИП.ФиксированныеСтраховыеВзносы, Регистратор);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидСтраховыхВзносов)
		Или ВидСтраховыхВзносов = Перечисления.ВидыСтраховыхВзносовИП.СтраховыеВзносыСДоходов Тогда
		
		ГраницыПериода = ГраницыПериодаУплатыСтраховыхВзносов(СтраховойПериод, Перечисления.ВидыСтраховыхВзносовИП.СтраховыеВзносыСДоходов);
		
		СтраховыеВзносыСДоходовУплаченные = СтраховыеВзносыУплаченные(Организация, ГраницыПериода.НачалоПериода, ГраницыПериода.КонецПериода,
			СтраховойПериод, Перечисления.ВидыСтраховыхВзносовИП.СтраховыеВзносыСДоходов, Регистратор);
		
		Если СтраховыеВзносыУплаченные = Неопределено Тогда
			СтраховыеВзносыУплаченные = СтраховыеВзносыСДоходовУплаченные;
		Иначе
			ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(СтраховыеВзносыСДоходовУплаченные, СтраховыеВзносыУплаченные);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтраховыеВзносыУплаченные;
	
КонецФункции

Функция СтраховыеВзносыУплаченныеЗаПериод(Организация, НачалоПериода, КонецПериода, ВидСтраховыхВзносов = Неопределено)
	
	// Не проверяем страховой период
	Возврат СтраховыеВзносыУплаченные(Организация, НачалоПериода, КонецПериода, , ВидСтраховыхВзносов);
	
КонецФункции

// При расчете взносов к оплате учитывается Страховой период - ищем все оплаты, относящиеся к страховому периоду
// При начислении взносов учитывается период начисления с Начала периода по Конец периода - ищем все оплаты за период начисления
//
Функция СтраховыеВзносыУплаченные(Организация, НачалоПериода, КонецПериода, СтраховойПериод = Неопределено, ВидСтраховыхВзносов = Неопределено, Регистратор = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",            Организация);
	Запрос.УстановитьПараметр("НачалоПериода",          НачалоПериода);
	Если Регистратор = Неопределено Тогда
		Запрос.УстановитьПараметр("КонецПериода",           Новый Граница(КонецПериода, ВидГраницы.Включая));
	Иначе
		Запрос.УстановитьПараметр("КонецПериода",           Новый Граница(Регистратор.МоментВремени(), ВидГраницы.Исключая));
	КонецЕсли;
	Запрос.УстановитьПараметр("ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.ВидыНалоговыхПлатежей());
	
	Если ЗначениеЗаполнено(ВидСтраховыхВзносов) Тогда
		Запрос.УстановитьПараметр("ВидСтраховыхВзносов", ВидСтраховыхВзносов);
	КонецЕсли;
	
	ВидыСубконтоПФР = Новый Массив;
	ВидыСубконтоПФР.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	ВидыСубконтоПФР.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыСтраховыхВзносовИП);
	Запрос.УстановитьПараметр("ВидыСубконтоПФР", ВидыСубконтоПФР);
	
	ВидыСубконтоФФОМС_ФСС = Новый Массив;
	ВидыСубконтоФФОМС_ФСС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	Запрос.УстановитьПараметр("ВидыСубконтоФФОМС_ФСС", ВидыСубконтоФФОМС_ФСС);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.Регистратор КАК ДокументОплаты,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОборотыДтКт.Регистратор) = ТИП(Документ.СписаниеСРасчетногоСчета)
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.СписаниеСРасчетногоСчета).Дата
	|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОборотыДтКт.Регистратор) = ТИП(Документ.РасходныйКассовыйОрдер)
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.РасходныйКассовыйОрдер).Дата
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДатаДокументаОплаты,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОборотыДтКт.Регистратор) = ТИП(Документ.СписаниеСРасчетногоСчета)
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.СписаниеСРасчетногоСчета).НалоговыйПериод
	|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОборотыДтКт.Регистратор) = ТИП(Документ.РасходныйКассовыйОрдер)
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.РасходныйКассовыйОрдер).НалоговыйПериод
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СтраховойПериод,
	|	ХозрасчетныйОборотыДтКт.СчетДт КАК СчетУчета,
	|	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК ВидПлатежаВГосБюджет,
	|	ХозрасчетныйОборотыДтКт.СубконтоДт2 КАК ВидСтраховогоВзноса,
	|	ХозрасчетныйОборотыДтКт.СуммаОборот КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Регистратор,
	|			СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПФР_ОПС_ИП),
	|			&ВидыСубконтоПФР,
	|			,
	|			,
	|			Организация = &Организация
	|				И СубконтоДт1 В (&ВидыПлатежейВГосБюджет)
	|				И &УсловиеПоВидуСтраховыхВзносов) КАК ХозрасчетныйОборотыДтКт";
	
	Если ЗначениеЗаполнено(ВидСтраховыхВзносов) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоВидуСтраховыхВзносов", "СубконтоДт2 = &ВидСтраховыхВзносов");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоВидуСтраховыхВзносов", "ИСТИНА");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВидСтраховыхВзносов) ИЛИ ВидСтраховыхВзносов = Перечисления.ВидыСтраховыхВзносовИП.ФиксированныеСтраховыеВзносы Тогда
		ТекстЗапроса = ТекстЗапроса +"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|" +
		"ВЫБРАТЬ
		|	ХозрасчетныйОборотыДтКт.Регистратор КАК ДокументОплаты,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОборотыДтКт.Регистратор) = ТИП(Документ.СписаниеСРасчетногоСчета)
		|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.СписаниеСРасчетногоСчета).Дата
		|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОборотыДтКт.Регистратор) = ТИП(Документ.РасходныйКассовыйОрдер)
		|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.РасходныйКассовыйОрдер).Дата
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ДатаДокументаОплаты,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОборотыДтКт.Регистратор) = ТИП(Документ.СписаниеСРасчетногоСчета)
		|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.СписаниеСРасчетногоСчета).НалоговыйПериод
		|		КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОборотыДтКт.Регистратор) = ТИП(Документ.РасходныйКассовыйОрдер)
		|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.РасходныйКассовыйОрдер).НалоговыйПериод
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК СтраховойПериод,
		|	ХозрасчетныйОборотыДтКт.СчетДт КАК СчетУчета,
		|	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК ВидПлатежаВГосБюджет,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыСтраховыхВзносовИП.ФиксированныеСтраховыеВзносы) КАК ВидСтраховогоВзноса,
		|	ХозрасчетныйОборотыДтКт.СуммаОборот
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Регистратор,
		|			СчетДт В (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ФОМС_СтраховойГод), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ФСС_СтраховойГод)),
		|			&ВидыСубконтоФФОМС_ФСС,
		|			,
		|			,
		|			Организация = &Организация
		|				И СубконтоДт1 В (&ВидыПлатежейВГосБюджет)) КАК ХозрасчетныйОборотыДтКт";
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	СтраховыеВзносыУплаченные = Запрос.Выполнить().Выгрузить();
	
	Если ЗначениеЗаполнено(СтраховойПериод) Тогда
		
		// Проверка страхового периода
		Индекс = СтраховыеВзносыУплаченные.Количество() - 1;
		Пока Индекс >= 0 Цикл
			
			ТекущаяСтрока = СтраховыеВзносыУплаченные[Индекс];
			
			Если ЗначениеЗаполнено(ТекущаяСтрока.СтраховойПериод)
				И НачалоГода(ТекущаяСтрока.СтраховойПериод) <> НачалоГода(СтраховойПериод) Тогда
				
				СтраховыеВзносыУплаченные.Удалить(ТекущаяСтрока);
				
			КонецЕсли;
			
			Индекс = Индекс - 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтраховыеВзносыУплаченные;
	
КонецФункции

Функция ФиксированныеСтраховыеВзносыНачисленные(Организация, НачалоПериода, КонецПериода)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",          НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",           Новый Граница(КонецПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация",            Организация);
	Запрос.УстановитьПараметр("ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.ВидыНалоговыхПлатежей());
	
	ВидыСубконтоПФР = Новый Массив;
	ВидыСубконтоПФР.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	ВидыСубконтоПФР.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыСтраховыхВзносовИП);
	Запрос.УстановитьПараметр("ВидыСубконтоПФР", ВидыСубконтоПФР);
	
	ВидыСубконтоФФОМС_ФСС = Новый Массив;
	ВидыСубконтоФФОМС_ФСС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	Запрос.УстановитьПараметр("ВидыСубконтоФФОМС_ФСС", ВидыСубконтоФФОМС_ФСС);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.СчетКт КАК СчетУчета,
	|	ХозрасчетныйОборотыДтКт.СубконтоКт2 КАК ВидСтраховогоВзноса,
	|	ХозрасчетныйОборотыДтКт.СуммаОборот КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			,
	|			,
	|			СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПФР_ОПС_ИП),
	|			&ВидыСубконтоПФР,
	|			Организация = &Организация
	|				И СубконтоКт1 В (&ВидыПлатежейВГосБюджет)
	|				И СубконтоКт2 = ЗНАЧЕНИЕ(Перечисление.ВидыСтраховыхВзносовИП.ФиксированныеСтраховыеВзносы)) КАК ХозрасчетныйОборотыДтКт
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.СчетКт,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСтраховыхВзносовИП.ФиксированныеСтраховыеВзносы),
	|	ХозрасчетныйОборотыДтКт.СуммаОборот
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			,
	|			,
	|			СчетКт В (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ФОМС_СтраховойГод), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ФСС_СтраховойГод)),
	|			&ВидыСубконтоФФОМС_ФСС,
	|			Организация = &Организация
	|				И СубконтоКт1 В (&ВидыПлатежейВГосБюджет)) КАК ХозрасчетныйОборотыДтКт
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетУчета";
	
	ФиксированныеСтраховыеВзносыНачисленные = Запрос.Выполнить().Выгрузить();
	
	Возврат ФиксированныеСтраховыеВзносыНачисленные;
	
КонецФункции

Функция ГраницыПериодаУплатыСтраховыхВзносов(СтраховойПериод, ВидСтраховыхВзносов)
	
	ГраницыПериода = Новый Структура;
	ГраницыПериода.Вставить("НачалоПериода", НачалоГода(СтраховойПериод));
	
	Если ВидСтраховыхВзносов = Перечисления.ВидыСтраховыхВзносовИП.СтраховыеВзносыСДоходов Тогда
		// 1 апреля следующего года
		ГраницыПериода.Вставить("КонецПериода", НачалоМесяца(ДобавитьМесяц(КонецГода(СтраховойПериод), 4)));
	Иначе
		ГраницыПериода.Вставить("КонецПериода", КонецГода(СтраховойПериод));
	КонецЕсли;
	
	Возврат ГраницыПериода;
	
КонецФункции

Функция ТарифыСтраховыхВзносов(Период)
	
	СтруктураТарифов = Новый Структура;
	СтруктураТарифов.Вставить("ПФР", 0);
	СтруктураТарифов.Вставить("ФФОМС", 0);
	СтруктураТарифов.Вставить("ФСС", 0);
	
	Если Период < '20140101' Тогда
	Иначе
		СтруктураТарифов.ПФР   = 26;
		СтруктураТарифов.ФФОМС = 5.1;
		СтруктураТарифов.ФСС   = 2.9;
	КонецЕсли;
	
	
	Возврат СтруктураТарифов;
	
КонецФункции

Функция МинимальнаяОплатаТрудаРФНаНачалоГода(Период)
	
	ДанныеМРОТ = РегистрыСведений.МинимальнаяОплатаТрудаРФ.ДанныеМинимальногоРазмераОплатыТрудаРФ(НачалоГода(Период));
	
	Возврат ДанныеМРОТ.Размер;
	
КонецФункции

Функция СчетаУчетаСтраховыхВзносов() Экспорт
	
	СчетаУчета = Новый Структура;
	СчетаУчета.Вставить("ПФР",   ПланыСчетов.Хозрасчетный.ПФР_ОПС_ИП);
	СчетаУчета.Вставить("ФФОМС", ПланыСчетов.Хозрасчетный.ФОМС_СтраховойГод);
	СчетаУчета.Вставить("ФСС",   ПланыСчетов.Хозрасчетный.ФСС_СтраховойГод);
	
	Возврат СчетаУчета;
	
КонецФункции

Процедура ПроверитьЗаполнениеВидовПлатежейВГосБюджет(Ошибки, НачалоПериода, КонецПериода, Организация)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  Новый Граница(КонецПериода, ВидГраницы.Включая));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.Регистратор КАК ДокументОплаты,
	|	ХозрасчетныйОборотыДтКт.СчетДт КАК СчетУчета
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Регистратор,
	|			СчетДт В (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПФР_ОПС_ИП), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ФОМС_СтраховойГод), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ФСС_СтраховойГод)),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
	|			,
	|			,
	|			Организация = &Организация
	|				И СубконтоДт1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.ПустаяСсылка)) КАК ХозрасчетныйОборотыДтКт";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Ошибка = ВыводСообщенийОбОшибках.ДобавитьПростоеОписаниеОшибки(Ошибки);
	Ошибка.Описание     = НСтр("ru = 'Не указан вид платежа в страховой фонд.'");
	Ошибка.Рекомендация = НСтр("ru = 'Укажите вид платежа в страховой фонд.'");
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТекстОшибки = НСтр("ru = 'В документе [Документ] не указан вид платежа в страховой фонд'");
		
		ПараметрыСтроки = Новый Структура;
		ПараметрыСтроки.Вставить("Документ", Строка(Выборка.ДокументОплаты));
		
		МестоОшибки = Ошибка.ЛокализацияДетально.Добавить();
		МестоОшибки.Локализация = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстОшибки, ПараметрыСтроки);
		МестоОшибки.Ссылка      = Выборка.ДокументОплаты;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеВидовСтраховыхВзносов(Ошибки, НачалоПериода, КонецПериода, Организация)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  Новый Граница(КонецПериода, ВидГраницы.Включая));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.Регистратор КАК ДокументОплаты,
	|	ХозрасчетныйОборотыДтКт.СчетДт КАК СчетУчета
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Регистратор,
	|			СчетДт В (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПФР_ОПС_ИП), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ФОМС_СтраховойГод), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ФСС_СтраховойГод)),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыСтраховыхВзносовИП),
	|			,
	|			,
	|			Организация = &Организация
	|				И СубконтоДт1 = ЗНАЧЕНИЕ(Перечисление.ВидыСтраховыхВзносовИП.ПустаяСсылка)) КАК ХозрасчетныйОборотыДтКт";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Ошибка = ВыводСообщенийОбОшибках.ДобавитьПростоеОписаниеОшибки(Ошибки);
	Ошибка.Описание     = НСтр("ru = 'Не указан вид страхового взноса'");
	Ошибка.Рекомендация = НСтр("ru = 'Укажите вид страхового взноса'");
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТекстОшибки = НСтр("ru = 'В документе [Документ] не указан вид страхового взноса'");
		
		ПараметрыСтроки = Новый Структура;
		ПараметрыСтроки.Вставить("Документ", Строка(Выборка.ДокументОплаты));
		
		МестоОшибки = Ошибка.ЛокализацияДетально.Добавить();
		МестоОшибки.Локализация = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстОшибки, ПараметрыСтроки);
		МестоОшибки.Ссылка      = Выборка.ДокументОплаты;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти