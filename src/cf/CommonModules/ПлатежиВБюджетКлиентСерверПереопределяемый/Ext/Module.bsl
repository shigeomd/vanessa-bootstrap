Функция РеквизитыДокумента_ПлатежноеПоручение() Экспорт
	
	Реквизиты = Новый Соответствие;
	
	Реквизиты.Вставить("ВидПеречисления",      "ВидПеречисленияВБюджет");
	Реквизиты.Вставить("ИдентификаторПлатежа", "ИдентификаторПлатежа");
	Реквизиты.Вставить("СтатусПлательщика",    "СтатусСоставителя");
	Реквизиты.Вставить("КБК",                  "КодБК");
	Реквизиты.Вставить("КодТерритории",        "КодОКАТО");
	Реквизиты.Вставить("ОснованиеПлатежа",     "ПоказательОснования");
	Реквизиты.Вставить("НалоговыйПериод",      "ПоказательПериода");
	Реквизиты.Вставить("НомерДокумента",       "ПоказательНомера");
	Реквизиты.Вставить("ДатаДокумента",        "ПоказательДаты");
	Реквизиты.Вставить("ТипПлатежа",           "ПоказательТипа");
	Реквизиты.Вставить("НазначениеПлатежа",    "НазначениеПлатежа");
	Реквизиты.Вставить("ОчередностьПлатежа",   "ОчередностьПлатежа");
	
	Возврат Реквизиты;
	
КонецФункции

Функция РеквизитыДокумента_РасходныйКассовыйОрдер() Экспорт
	
	Реквизиты = Новый Соответствие;
	
	Реквизиты.Вставить("ВидПеречисления",      "ВидПеречисленияВБюджет");
	Реквизиты.Вставить("ИдентификаторПлатежа", "ИдентификаторПлатежа");
	Реквизиты.Вставить("СтатусПлательщика",    "СтатусСоставителя");
	Реквизиты.Вставить("КБК",                  "КодБК");
	Реквизиты.Вставить("КодТерритории",        "КодОКАТО");
	Реквизиты.Вставить("ОснованиеПлатежа",     "ПоказательОснования");
	Реквизиты.Вставить("НалоговыйПериод",      "ПоказательПериода");
	Реквизиты.Вставить("НомерДокумента",       "ПоказательНомера");
	Реквизиты.Вставить("ДатаДокумента",        "ПоказательДаты");
	Реквизиты.Вставить("ТипПлатежа",           "ПоказательТипа");
	Реквизиты.Вставить("НазначениеПлатежа",    "Основание");
	
	Возврат Реквизиты;
	
КонецФункции

Функция ЭтоНДФЛ(ВидНалога) Экспорт
	
	Если Не ЗначениеЗаполнено(ВидНалога) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат (ВидНалога = ПредопределенноеЗначение("Перечисление.ВидыНалогов.НДФЛ"));
	
КонецФункции

Функция ЭтоФиксированныеВзносы(ВидНалога) Экспорт
	
	Если Не ЗначениеЗаполнено(ВидНалога) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат (ВидНалога = ПредопределенноеЗначение("Перечисление.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть")
		Или ВидНалога = ПредопределенноеЗначение("Перечисление.ВидыНалогов.ФиксированныеВзносы_ФФОМС")
		Или ВидНалога = ПредопределенноеЗначение("Перечисление.ВидыНалогов.ФиксированныеВзносы_ФСС")
		Или ВидНалога = ПредопределенноеЗначение("Перечисление.ВидыНалогов.ФиксированныеВзносы_ПФР_НакопительнаяЧасть"));
	
КонецФункции

Функция ЭтоОбязательныеСтраховыеВзносы(ВидНалога) Экспорт
	
	Если Не ЗначениеЗаполнено(ВидНалога) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат (ВидНалога = ПредопределенноеЗначение("Перечисление.ВидыНалогов.СтраховыеВзносы_ПФР_СтраховаяЧасть")
		Или ВидНалога = ПредопределенноеЗначение("Перечисление.ВидыНалогов.СтраховыеВзносы_ФСС")
		Или ВидНалога = ПредопределенноеЗначение("Перечисление.ВидыНалогов.СтраховыеВзносы_ФСС_НСиПЗ")
		Или ВидНалога = ПредопределенноеЗначение("Перечисление.ВидыНалогов.СтраховыеВзносы_ФФОМС")
		Или ВидНалога = ПредопределенноеЗначение("Перечисление.ВидыНалогов.СтраховыеВзносы_ПФР_НакопительнаяЧасть"));
	
КонецФункции

Функция ПредставлениеПорядкаОтраженияБУ(Параметры = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Представление", ОбщегоНазначенияБПКлиентСервер.ПредставлениеНезаполненногоЗначения());
	Результат.Вставить("Заполнен",      Ложь);
	
	Если Параметры <> Неопределено И ЗначениеЗаполнено(Параметры.СчетУчета) Тогда
		
		// Подготовим текст и перечень реквизитов, требующих заполнения
		ЭлементыТекста = Новый Массив;
		
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Параметры.СчетУчета);
		ЭлементыТекста.Добавить(СвойстваСчета.Код);
		
		Для НомерСубконто = 1 По СвойстваСчета.КоличествоСубконто Цикл
			ЗначениеСубконто = Параметры["Субконто" + НомерСубконто];
			Если Не ЗначениеЗаполнено(ЗначениеСубконто) Тогда
				Если СвойстваСчета["ВидСубконто" + НомерСубконто] = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыСтраховыхВзносовИП") Тогда
					ЭлементыТекста.Добавить(НСтр("ru = '<Авто>'"));
				КонецЕсли;
			Иначе
				ЭлементыТекста.Добавить(Параметры["Субконто" + НомерСубконто]);
			КонецЕсли;
		КонецЦикла;
		
		Результат.Представление = СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(ЭлементыТекста, НСтр("ru = ', '"));
		Если Не ПустаяСтрока(Результат.Представление) Тогда
			// Предложение следует начинать с заглавной буквы
			Результат.Представление = ВРег(Лев(Результат.Представление, 1)) + Сред(Результат.Представление, 2);
		КонецЕсли;
		
		Результат.Заполнен = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НовыеРеквизитыПлатежаВБюджет(Объект, ПеречислениеВБюджет = Истина) Экспорт
	
	РеквизитыПлатежаВБюджет = Новый Структура;
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
		РеквизитыДокумента = РеквизитыДокумента_ПлатежноеПоручение();
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		РеквизитыДокумента = РеквизитыДокумента_РасходныйКассовыйОрдер();
	КонецЕсли;
	
	Для Каждого Реквизит Из РеквизитыДокумента Цикл
		РеквизитыПлатежаВБюджет.Вставить(Реквизит.Значение)
	КонецЦикла;
	
	Если ПеречислениеВБюджет Тогда
		ЗаполнитьЗначенияСвойств(РеквизитыПлатежаВБюджет, Объект);
	КонецЕсли;
	
	Возврат РеквизитыПлатежаВБюджет;
	
КонецФункции
