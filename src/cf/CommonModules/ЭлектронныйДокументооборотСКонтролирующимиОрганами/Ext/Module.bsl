
#Область ПрограммныйИнтерфейс

Функция СоздатьОбъектДляРаботыСДвоичнымиДанными() Экспорт
	
	ДвДанные = НовыйОбъектДвоичныеДанные(Истина);
	Если ДвДанные = Неопределено Тогда
		
		ПутьВК = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьПутьВК();
		
		Если ПодключитьВК(ПутьВК, Истина) Тогда
			
			ДвДанные = НовыйОбъектДвоичныеДанные(Ложь);
			Если ДвДанные = Неопределено Тогда
				Возврат Неопределено;
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДвДанные;
	
КонецФункции

Функция НовыйОбъектДвоичныеДанные(ТихийРежим = Истина)
	
	Попытка
		
		ДвДанные = Новый("Addin.ЭДОNative.BinaryDataS");
		Возврат ДвДанные;
		
	Исключение
		
		Если НЕ ТихийРежим Тогда
			ТекстСообщения = НСтр("ru='Не удалось создать объект для работы с двоичными данными.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции

Функция ПодключитьВК(ПутьВК, ТихийРежим = Истина)
	
	Попытка
		КодВозврата = ПодключитьВнешнююКомпоненту(ПутьВК, "ЭДОNative");
	Исключение
		КодВозврата = Ложь;
	КонецПопытки;
	
	Если НЕ КодВозврата И НЕ ТихийРежим Тогда
		ТекстСообщения = НСтр("ru='Не удалось подключить внешнюю компоненту для работы с криптографией.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат КодВозврата;
	
КонецФункции

Процедура ПриЗаписиОрганизации(ОбъектЗаписи, Отказ) Экспорт 
	
	КонтекстЭДО = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	Если КонтекстЭДО = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстЭДО.ПриЗаписиОбъекта(ОбъектЗаписи, Отказ);
	
	
КонецПроцедуры

Функция ПодключенныеОрганизации(ОтборОрганизации = Неопределено) Экспорт
	
	ТипОтбораОрганизации = ТипЗнч(ОтборОрганизации);
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
						  |	Организации.Ссылка КАК Ссылка
						  |ИЗ
						  |	Справочник.Организации КАК Организации
						  |ГДЕ
						  |	Организации.ВидОбменаСКонтролирующимиОрганами = &ВидОбменаСКонтролирующимиОрганами
						  |	И Организации.УчетнаяЗаписьОбмена <> &ПустаяУчетнаяЗаписьОбмена"
						  + ?(ОтборОрганизации <> Неопределено, ?(ТипОтбораОрганизации <> Тип("Массив"), "
						  |	И Организации.Ссылка = &ОтборОрганизации", "
						  |	И Организации.Ссылка В (&ОтборОрганизации)"), "") + "
						  |	И НЕ Организации.ПометкаУдаления
						  |	И НЕ Организации.УчетнаяЗаписьОбмена.ПометкаУдаления");
	Запрос.УстановитьПараметр("ВидОбменаСКонтролирующимиОрганами", Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате);
	Запрос.УстановитьПараметр("ПустаяУчетнаяЗаписьОбмена", Справочники.УчетныеЗаписиДокументооборота.ПустаяСсылка());
	Запрос.УстановитьПараметр("ОтборОрганизации", ОтборОрганизации);
	
	Попытка
		ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Если ОтборОрганизации <> Неопределено И ТипОтбораОрганизации <> Тип("Массив") Тогда
		Результат = (ТаблицаЗапроса.Количество() > 0);
		
	Иначе
		Результат = Новый Массив;
		Для Каждого СтрокаЗапроса Из ТаблицаЗапроса Цикл
			Результат.Добавить(СтрокаЗапроса.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗаголовокГиперссылкиЗаявления(ФормаОрганизации, Организация, Отказ, СтандартнаяОбработка) Экспорт
	
	ЗаголовокПервичногоЗаявления = НСтр("ru = 'Заявление на подключение к 1С-Отчетности'");
	ЗаголовокВторичногоЗаявления = НСтр("ru = 'Заявление на изменение реквизитов подключения к 1С-Отчетности или замену сертификата'");
	
	// Инициализируем контекст
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	
	// проверяем на наличие права к документообороту
	Если КонтекстЭДОСервер = Неопределено Тогда
		Возврат ЗаголовокПервичногоЗаявления;
	КонецЕсли;
	
	ПоддерживаетсяВторичноеЗаявление = КонтекстЭДОСервер.ПоддерживаетсяВторичноеЗаявление(Организация);
	
	Если ПоддерживаетсяВторичноеЗаявление Тогда
		Возврат ЗаголовокВторичногоЗаявления;
	Иначе
		Возврат ЗаголовокПервичногоЗаявления;
	КонецЕсли;
	
КонецФункции

// Заполняет значения элементов структуры, передаваемой в параметрах.
//
// Параметры:
//   Организация - СправочникСсылка.Организации
//	 СтруктураПараметров - структура. Возможные поля:
//     ОтпечатокСертификатаПодписи - Строка, 40
//     ЭлектроннаяПодписьВМоделиСервиса - Булево
//     ТипКриптоПровайдера - строка, возможные значения
//       "VipNet"
//       "CryptoPro"
//       ""
//
Процедура ЗаполнитьПараметрыДляФормыПодключенияКСервисуЭлектронныхДокументов(Организация, СтруктураПараметров) Экспорт
	Если НЕ ЗначениеЗаполнено(Организация) ИЛИ НЕ ЗначениеЗаполнено(СтруктураПараметров) Тогда
		Возврат;
	КонецЕсли;
	
	//заполенение полей ОтпечатокСертификатаПодписи и ЭлектроннаяПодписьВМоделиСервиса
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	УчетныеЗаписиДокументооборота.СертификатРуководителя,
		|	УчетныеЗаписиДокументооборота.ЭлектроннаяПодписьВМоделиСервиса
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиДокументооборота КАК УчетныеЗаписиДокументооборота
		|		ПО Организации.УчетнаяЗаписьОбмена = УчетныеЗаписиДокументооборота.Ссылка
		|ГДЕ
		|	Организации.ВидОбменаСКонтролирующимиОрганами = &ВидОбменаСКонтролирующимиОрганами
		|	И Организации.Ссылка = &ОрганизацияСсылка
		|	И НЕ Организации.ПометкаУдаления
		|	И НЕ УчетныеЗаписиДокументооборота.ПометкаУдаления";
		
	Запрос.УстановитьПараметр("ВидОбменаСКонтролирующимиОрганами", Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате);
	Запрос.УстановитьПараметр("ОрганизацияСсылка", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если СтруктураПараметров.Свойство("ОтпечатокСертификатаПодписи") Тогда
			СтруктураПараметров.Вставить("ОтпечатокСертификатаПодписи", Выборка.СертификатРуководителя);
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("ЭлектроннаяПодписьВМоделиСервиса") Тогда
			СтруктураПараметров.Вставить("ЭлектроннаяПодписьВМоделиСервиса", Выборка.ЭлектроннаяПодписьВМоделиСервиса);
		КонецЕсли;
	
	КонецЕсли; 	
	
	//заполенение поля ТипКриптоПровайдера
	Если СтруктураПараметров.Свойство("ТипКриптоПровайдера") Тогда
		Если СтруктураПараметров.Свойство("ЭлектроннаяПодписьВМоделиСервиса") И СтруктураПараметров.ЭлектроннаяПодписьВМоделиСервиса = Истина Тогда
			// поле структуры ЭлектроннаяПодписьВМоделиСервиса существует и равно Истине
			ТипКриптоПровайдера = "CryptoPro";
		Иначе
			
			ТипКриптоПровайдера = "";
			
			CryptoProCSP = ДокументооборотСКОКриптографияКлиентСервер.КриптопровайдерCryptoPro();
			ViPNetCSP = ДокументооборотСКОКриптографияКлиентСервер.КриптопровайдерViPNet();
			
			ПараметрыКриптографии = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПовтИсп.ЗаполнитьПараметрыКриптографии();
			
			Если ПараметрыКриптографии.ПрисутствуетЗаполненныйПараметр Тогда
				ПараметрыКриптоПровайдера = ПараметрыКриптографии.ПараметрыКриптографии;
				Если ПараметрыКриптоПровайдера["ИмяКриптопровайдера"] = CryptoProCSP.Имя 
				И ПараметрыКриптоПровайдера["ТипКриптопровайдера"] = CryptoProCSP.Тип  Тогда
					ТипКриптоПровайдера = "CryptoPro";
				ИначеЕсли ПараметрыКриптоПровайдера["ИмяКриптопровайдера"] = ViPNetCSP.Имя 
				И ПараметрыКриптоПровайдера["ТипКриптопровайдера"] = ViPNetCSP.Тип  Тогда
					ТипКриптоПровайдера = "VipNet";
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		СтруктураПараметров.Вставить("ТипКриптоПровайдера", ТипКриптоПровайдера);
		
	КонецЕсли;
	
КонецПроцедуры

#Область НоваяФормаРегламентированнойОтчетности

#Область РаботаСРегистромСведенийЖурналОтправокВКонтролирующиеОрганы

Функция ПараметрыПроцедурыСоздатьЗаписьВРегистреЖурналОтправокВКонтролирующиеОрганы() Экспорт

	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Ссылка", 					Неопределено);
	ЗначенияЗаполнения.Вставить("ДатаСоздания", 			ТекущаяДатаСеанса());
	ЗначенияЗаполнения.Вставить("Наименование", 			"");
	ЗначенияЗаполнения.Вставить("ПредставлениеПериода", 	"");
	ЗначенияЗаполнения.Вставить("ВидКонтролирующегоОргана", Неопределено);
	ЗначенияЗаполнения.Вставить("КодКонтролирующегоОргана", "");
	ЗначенияЗаполнения.Вставить("Организация", 				Неопределено);
	ЗначенияЗаполнения.Вставить("ЕстьОтвет", 				Ложь);
	ЗначенияЗаполнения.Вставить("СтраницаЖурнала", 			Неопределено);
	
	Возврат ЗначенияЗаполнения;
	
КонецФункции	

Процедура СоздатьЗаписьВРегистреЖурналОтправокВКонтролирующиеОрганы(ЗначенияЗаполнения) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
	
		Объект 						= ЗначенияЗаполнения.Ссылка;
		Ссылка 						= Объект.Ссылка;
		ЭтоНовыйОбъект 				= Истина;
		СостояниеСдачиОтчетности 	= Неопределено;
		СтатусОтправки 				= Неопределено;
		Наименование 				= ЗначенияЗаполнения.Наименование;
		
		Если НЕ ЗначениеЗаполнено(Наименование) Тогда
			Наименование = Строка(Ссылка);
		КонецЕсли;
		
		ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОпределитьСтатусИСостояниеСдачиОтчетности(
			Ссылка, ЗначенияЗаполнения.Организация, ЗначенияЗаполнения.ВидКонтролирующегоОргана, СостояниеСдачиОтчетности, СтатусОтправки);
		
		ЗначенияЗаполнения.Вставить("Ссылка", 								Ссылка);
		ЗначенияЗаполнения.Вставить("СтатусОтправки", 						СтатусОтправки);
		ЗначенияЗаполнения.Вставить("СостояниеСдачиОтчетности", 			СостояниеСдачиОтчетности);
		ЗначенияЗаполнения.Вставить("ПредставлениеКонтролирующегоОргана", 	ПредставлениеКонтролирующегоОргана(ЗначенияЗаполнения));
		ЗначенияЗаполнения.Вставить("ПометкаУдаления", 						Ссылка.ПометкаУдаления);
		ЗначенияЗаполнения.Вставить("Наименование", 						Наименование);
		ЗначенияЗаполнения.Вставить("НеОтправляетсяВКонтролирующийОрган", 	НЕ ОбъектОтправляетсяВКонтролирующиеОрганы(Ссылка));
		ЗначенияЗаполнения.Вставить("ЕстьКритическиеОшибкиОтправки", 		ЕстьКритическиеСообщения(Ссылка));
		
		СтруктураКлюча = Новый Структура("Ссылка", Ссылка);
		Ключ = РегистрыСведений.ЖурналОтправокВКонтролирующиеОрганы.СоздатьКлючЗаписи(СтруктураКлюча);
		ЗаблокироватьДанныеДляРедактирования(Ключ);
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЖурналОтправокВКонтролирующиеОрганы");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
		Блокировка.Заблокировать();
		
		// Записываем данные в регистр
		НаборЗаписей = РегистрыСведений.ЖурналОтправокВКонтролирующиеОрганы.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Ссылка.Установить(Ссылка);
		НаборЗаписей.Очистить();
		
		Запись = НаборЗаписей.Добавить();
		Если СтатусОтправки = Неопределено И СостояниеСдачиОтчетности = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Запись, ЗначенияЗаполнения, , "СостояниеСдачиОтчетности, СтатусОтправки");
		Иначе
			ЗаполнитьЗначенияСвойств(Запись, ЗначенияЗаполнения);
		КонецЕсли;
		
		НаборЗаписей.Записать(Истина);
	
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Запись в регистре сведений ЖурналОтправокВКонтролирующиеОрганы'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
	КонецПопытки;

КонецПроцедуры

Функция ПредставлениеКонтролирующегоОргана(ЗначенияЗаполнения)

	Представление = "";
	
	Если ТипЗнч(ЗначенияЗаполнения.Ссылка) = Тип("СправочникСсылка.ПерепискаСКонтролирующимиОрганами")
		И ЗначенияЗаполнения.Ссылка.Статус = Перечисления.СтатусыПисем.Полученное 
		И НЕ ЗначениеЗаполнено(ЗначенияЗаполнения.ВидКонтролирующегоОргана) Тогда
		
		КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
		Если КонтекстЭДОСервер <> Неопределено Тогда
			ПоследнийЦиклОбмена = КонтекстЭДОСервер.ПолучитьПоследнийЦиклОбмена(ЗначенияЗаполнения.Ссылка);
			Если ЗначениеЗаполнено(ПоследнийЦиклОбмена) Тогда
				Представление = Строка(ПоследнийЦиклОбмена.ВнешняяОрганизация); 
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Представление = РегламентированнаяОтчетностьВызовСервера.ПредставлениеКонтролирующегоОргана(ЗначенияЗаполнения);
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

Процедура ПометитьОбъектНепрочтенным(Ссылка) Экспорт
	
	НачатьТранзакцию();
	Попытка
	
		СтруктураКлюча = Новый Структура("НепрочтенноеСообщение", Ссылка);
		Ключ = РегистрыСведений.НепрочтеннаяПерепискаСКонтролирующимиОрганами.СоздатьКлючЗаписи(СтруктураКлюча);
		ЗаблокироватьДанныеДляРедактирования(Ключ);

		НаборЗаписей = РегистрыСведений.НепрочтеннаяПерепискаСКонтролирующимиОрганами.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.НепрочтенноеСообщение.Установить(Ссылка);
		
		Запись = НаборЗаписей.Добавить();
		Запись.НепрочтенноеСообщение = Ссылка;
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(
			"Пометка письма прочтенным", 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#Область ЗаписиОбъектовВРегистрЖурналОтправокВКонтролирующиеОрганы

Процедура ЗаписатьЗапросНаИнформационноеОбслуживаниеВРегистрЖурналОтправокВКонтролирующиеОрганы(Объект) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер <> Неопределено Тогда
		КонтекстЭДОСервер.ЗаписатьЗапросНаИнформационноеОбслуживаниеВРегистрЖурналОтправокВКонтролирующиеОрганы(Объект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьЗапросНаВыпискуИзЕГРЮЛ_ЕГРИПВРегистрЖурналОтправокВКонтролирующиеОрганы(Объект) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер <> Неопределено Тогда
		КонтекстЭДОСервер.ЗаписатьЗапросНаВыпискуИзЕГРЮЛ_ЕГРИПВРегистрЖурналОтправокВКонтролирующиеОрганы(Объект);
	КонецЕсли;
	
КонецПроцедуры
	
Процедура ЗаписатьПерепискаСКонтролирующимиОрганамиВРегистрЖурналОтправокВКонтролирующиеОрганы(Объект) Экспорт

	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер <> Неопределено Тогда
		КонтекстЭДОСервер.ЗаписатьПерепискаСКонтролирующимиОрганамиВРегистрЖурналОтправокВКонтролирующиеОрганы(Объект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьОписиИсходящихДокументовВНалоговыеОрганыВРегистрЖурналОтправокВКонтролирующиеОрганы(Объект) Экспорт

	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер <> Неопределено Тогда
		КонтекстЭДОСервер.ЗаписатьОписиИсходящихДокументовВНалоговыеОрганыВРегистрЖурналОтправокВКонтролирующиеОрганы(Объект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьДокументыРеализацииПолномочийНалоговыхОргановВРегистрЖурналОтправокВКонтролирующиеОрганы(Объект) Экспорт

	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер <> Неопределено Тогда
		КонтекстЭДОСервер.ЗаписатьДокументыРеализацииПолномочийНалоговыхОргановВРегистрЖурналОтправокВКонтролирующиеОрганы(Объект);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьОписиВходящихДокументовИзНалоговыхОргановВРегистрЖурналОтправокВКонтролирующиеОрганы(Объект) Экспорт

	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер <> Неопределено Тогда
		КонтекстЭДОСервер.ЗаписатьОписиВходящихДокументовИзНалоговыхОргановВРегистрЖурналОтправокВКонтролирующиеОрганы(Объект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьЭлектронныеПредставленияРегламентированныхОтчетовВРегистрЖурналОтчетовСтатусы(Объект) Экспорт

	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер <> Неопределено Тогда
		КонтекстЭДОСервер.ЗаписатьЭлектронныеПредставленияРегламентированныхОтчетовВРегистрЖурналОтчетовСтатусы(Объект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьПрочиеУведомленияВРегистрЖурналОтправокВКонтролирующиеОрганы(Объект) Экспорт

	Свойства = СвойстваПрочихУведомлений(Объект);
	СоздатьЗаписьВРегистреЖурналОтправокВКонтролирующиеОрганы(Свойства);
	
КонецПроцедуры

Функция СвойстваПрочихУведомлений(Объект) Экспорт

	Ссылка = Объект.Ссылка;
	
	Наименование 						= Строка(Ссылка);
	ВидКонтролирующегоОргана 			= Неопределено;
	НеОтправляетсяВКонтролирующийОрган 	= Ложь;
	
	ТаблицаОписания = ТаблицаОписанияПрочихУведомлений();
	НайденнаяСтрока = ТаблицаОписания.Найти(ТипЗнч(Ссылка), "ТипОбъекта");
	Если НайденнаяСтрока <> Неопределено Тогда
		Наименование 						= НайденнаяСтрока.Наименование;
		ВидКонтролирующегоОргана			= НайденнаяСтрока.ВидКонтролирующегоОргана;
		НеОтправляетсяВКонтролирующийОрган	= НайденнаяСтрока.НеОтправляетсяВКонтролирующийОрган;
	КонецЕсли;
	
	ЗначенияЗаполнения = ПараметрыПроцедурыСоздатьЗаписьВРегистреЖурналОтправокВКонтролирующиеОрганы();
	ЗначенияЗаполнения.Ссылка 					= Ссылка;
	ЗначенияЗаполнения.Наименование 			= Наименование;
	ЗначенияЗаполнения.СтраницаЖурнала			= Перечисления.СтраницыЖурналаОтчетность.Уведомления;
	ЗначенияЗаполнения.ВидКонтролирующегоОргана	= ВидКонтролирующегоОргана;
	
	ОпределениеСвойстваОбъектаДляОтображенииВФормеОтчетность(Ссылка, ЗначенияЗаполнения);
	
	Возврат ЗначенияЗаполнения;
	
КонецФункции

Процедура ЗаписатьУведомлениеОСпецрежимахНалогообложенияВРегистрЖурналОтправокВКонтролирующиеОрганы(Объект) Экспорт

	Свойства = СвойстваУведомленияОСпецрежимахНалогообложения(Объект);
	СоздатьЗаписьВРегистреЖурналОтправокВКонтролирующиеОрганы(Свойства);
	
КонецПроцедуры

Функция СвойстваУведомленияОСпецрежимахНалогообложения(Объект) Экспорт

	Ссылка = Объект.Ссылка;
	
	// Наименование
	Наименование = Строка(Объект.ВидУведомления);
	
	// Вид и код контролирующего органа
	ВидКонтролирующегоОргана	= Перечисления.ТипыКонтролирующихОрганов.ФНС;
	Если ЗначениеЗаполнено(Объект.РегистрацияВИФНС) Тогда
		КодКонтролирующегоОргана	= Объект.РегистрацияВИФНС.Код;
	Иначе
		КодКонтролирующегоОргана	= "";
	КонецЕсли;
	
	Организация = Объект.Организация;
	
	// Запись в регистр
	ЗначенияЗаполнения = ПараметрыПроцедурыСоздатьЗаписьВРегистреЖурналОтправокВКонтролирующиеОрганы();
	ЗначенияЗаполнения.Ссылка 					= Ссылка;
	ЗначенияЗаполнения.ДатаСоздания				= Ссылка.Дата;
	ЗначенияЗаполнения.Наименование 			= Наименование;
	ЗначенияЗаполнения.ВидКонтролирующегоОргана = ВидКонтролирующегоОргана;
	ЗначенияЗаполнения.КодКонтролирующегоОргана = КодКонтролирующегоОргана;
	ЗначенияЗаполнения.Организация 				= Организация;
	ЗначенияЗаполнения.СтраницаЖурнала			= Перечисления.СтраницыЖурналаОтчетность.Уведомления;
	
	Возврат ЗначенияЗаполнения;
	
КонецФункции

Процедура ЗаписатьСобытиеДокументооборотаСКО(Запись) Экспорт
	
	ТекущийСеансДокументооборотаСКО = ДокументооборотСКО.ТекущийСеансДокументооборотаСКО();
		
	Группа = ПолучитьГруппуНовогоСобытияДокументооборотаСКО(Запись);
	
	Если Не ЗначениеЗаполнено(Группа) Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.ЖурналНовыхСобытий.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Ссылка = Запись.Объект;
	МенеджерЗаписи.Прочитать();
	
	Если МенеджерЗаписи.Выбран() И МенеджерЗаписи.Статус <> Запись.Статус
		ИЛИ Не МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.Ссылка = Запись.Объект;
		МенеджерЗаписи.СеансСвязи = ТекущийСеансДокументооборотаСКО;
		МенеджерЗаписи.Наименование = Запись.Наименование;	
		МенеджерЗаписи.Статус = Запись.Статус;
		МенеджерЗаписи.Организация = Запись.Организация;
		МенеджерЗаписи.ДатаСобытия = ТекущаяДатаСеанса();
		МенеджерЗаписи.КонтролирующийОрган = Запись.КонтролирующийОрган;
		МенеджерЗаписи.Группа = Группа;
		МенеджерЗаписи.Состояние = Запись.Состояние;
		МенеджерЗаписи.Порядок = ПолучитьПорядокНовогоСобытияДокументооборотаСКО(Запись, Группа);
		МенеджерЗаписи.ЕстьОтвет = ЕстьОтвет(Запись);
		МенеджерЗаписи.НеОтправляетсяВКонтролирующийОрган = Запись.НеОтправляетсяВКонтролирующийОрган;
		МенеджерЗаписи.ОтправленоПолучено = ПолучитьОтправленоПолученоНовогоСобытияДокументооборотаСКО(Запись);
		МенеджерЗаписи.Просмотрено = Ложь;
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
КонецПроцедуры

Функция ЕстьОтвет(Запись)
	
	Если ТипЗнч(Запись.Объект) = Тип("ДокументСсылка.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика")
		ИЛИ ТипЗнч(Запись.Объект) = Тип("ДокументСсылка.ЗапросНаИнформационноеОбслуживаниеСтрахователя")
		ИЛИ ТипЗнч(Запись.Объект) = Тип("ДокументСсылка.ЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП") Тогда
		Возврат Запись.ЕстьОтвет;
	Иначе
		Возврат Ложь;
	КонецЕсли;       	
	
КонецФункции

Функция ПолучитьОтправленоПолученоНовогоСобытияДокументооборотаСКО(Запись)

	Если Запись.Страница = Перечисления.СтраницыЖурналаОтчетность.Входящие Тогда
		Если ТипЗнч(Запись.Объект) = Тип("СправочникСсылка.ПерепискаСКонтролирующимиОрганами") Тогда
			Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Запись.Объект, "ДатаОтправки");
		ИначеЕсли ТипЗнч(Запись.Объект) = Тип("СправочникСсылка.ДокументыРеализацииПолномочийНалоговыхОрганов") Тогда
			КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
			ОписьВходящихДокументов = КонтекстЭДОСервер.ПолучитьОписьВходящихДокументовПоТребованию(Запись.Объект);
			Если ЗначениеЗаполнено(ОписьВходящихДокументов) Тогда
				Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОписьВходящихДокументов, "ДатаОтправки");
			Иначе
				Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Запись.Объект, "ДатаДокумента");
			КонецЕсли;
		КонецЕсли;
	Иначе
		КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
		
		Если Запись.ВидКонтролирующегоОргана = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСС") Тогда
			ПоследнийЦиклОбмена = КонтекстЭДОСервер.ПолучитьПоследнююОтправкуОтчетаВФСС(Запись.Объект);
			Если ЗначениеЗаполнено(ПоследнийЦиклОбмена.ДатаЗакрытия) И Год(ПоследнийЦиклОбмена.ДатаЗакрытия) <> 3999 Тогда
				Возврат ПоследнийЦиклОбмена.ДатаЗакрытия;
			Иначе
				Возврат ПоследнийЦиклОбмена.ДатаОтправки;
			КонецЕсли;
		ИначеЕсли Запись.ВидКонтролирующегоОргана = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСРАР") Тогда
			ПоследнийЦиклОбмена = КонтекстЭДОСервер.ПолучитьПоследнююОтправкуОтчетаВФСРАР(Запись.Объект);
			Если ЗначениеЗаполнено(ПоследнийЦиклОбмена.ДатаЗакрытия) И Год(ПоследнийЦиклОбмена.ДатаЗакрытия) <> 3999 Тогда
				Возврат ПоследнийЦиклОбмена.ДатаЗакрытия;
			Иначе
				Возврат ПоследнийЦиклОбмена.ДатаОтправки;
			КонецЕсли;
		ИначеЕсли Запись.ВидКонтролирующегоОргана = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.РПН") Тогда
			ПоследнийЦиклОбмена = КонтекстЭДОСервер.ПолучитьПоследнююОтправкуОтчетаВРПН(Запись.Объект);
			Если ЗначениеЗаполнено(ПоследнийЦиклОбмена.ДатаЗакрытия) И Год(ПоследнийЦиклОбмена.ДатаЗакрытия) <> 3999 Тогда
				Возврат ПоследнийЦиклОбмена.ДатаЗакрытия;
			Иначе
				Возврат ПоследнийЦиклОбмена.ДатаОтправки;
			КонецЕсли;
		Иначе
			ПоследнийЦиклОбмена = КонтекстЭДОСервер.ПолучитьПоследнийЦиклОбмена(Запись.Объект);
			Возврат ПоследнийЦиклОбмена.ДатаПоследнегоСообщения;
		КонецЕсли;
	КонецЕсли;
		
КонецФункции

Функция ПолучитьГруппуНовогоСобытияДокументооборотаСКО(Запись)

	ЗавершенныеСостояния = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		"Не сдано;Не принято в обработку;Сдано, требует уточнения;Сдано;Не принято;Принято;Доставлено", ";");
		
	НезавершенныеСостояния = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		"Отправлено оператору;Отправлено в ФНС;Отправлено в ПФР;Отправлено в ФСС;Отправлено в Росстат;Отправлено в ФСРАР;Отправлено в РПН;Принято в обработку", ";");
	
	Если Запись.Страница = Перечисления.СтраницыЖурналаОтчетность.Входящие Тогда
		Возврат Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ПолученныеСообщения;		
	ИначеЕсли (Запись.Страница = Перечисления.СтраницыЖурналаОтчетность.Сверки ИЛИ Запись.Страница = Перечисления.СтраницыЖурналаОтчетность.ЕГРЮЛ) 
		И (Запись.Статус = "Отказано" ИЛИ Запись.Статус = "Не найдено в реестре" ИЛИ Запись.Статус = "Готово") Тогда
		Возврат Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ОбработанныеЗапросы;		
	ИначеЕсли ЗавершенныеСостояния.Найти(Запись.Статус) <> Неопределено Тогда
		Возврат Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ЗавершенныеОтправки;		
	ИначеЕсли НезавершенныеСостояния.Найти(Запись.Статус) <> Неопределено Тогда
		Возврат Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.НезавершенныеОтправки; 	
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПорядокНовогоСобытияДокументооборотаСКО(Запись, Группа)
	
	Порядок = 0;
	
	Если Группа = Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ПолученныеСообщения Тогда
		Порядок = 0;	
	ИначеЕсли Группа = Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ОбработанныеЗапросы Тогда
		Если Запись.Статус <> "Не отправлено" Тогда
			Если Запись.Страница = Перечисления.СтраницыЖурналаОтчетность.Сверки
				И Запись.Статус = "Отказано" Тогда
				Порядок = 0;
			ИначеЕсли Запись.Страница = Перечисления.СтраницыЖурналаОтчетность.ЕГРЮЛ
				И Запись.Статус = "Не найдено в реестре" Тогда
				Порядок = 1;
			ИначеЕсли Запись.Страница = Перечисления.СтраницыЖурналаОтчетность.Сверки
				И Запись.Статус = "Готово" Тогда
				Порядок = 2;
			ИначеЕсли Запись.Страница = Перечисления.СтраницыЖурналаОтчетность.ЕГРЮЛ
				И Запись.Статус = "Готово" Тогда
				Порядок = 3;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Группа = Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ЗавершенныеОтправки Тогда
		Порядок = 0;
	ИначеЕсли Группа = Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.НезавершенныеОтправки Тогда
		Порядок = 0;
	КонецЕсли;
	
	Возврат Порядок;
	
КонецФункции

Процедура ПометитьНовыеСобытияПросмотренными(СписокСсылок) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		Для Каждого Ссылка Из СписокСсылок Цикл
			МенеджерЗаписи = РегистрыСведений.ЖурналНовыхСобытий.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Ссылка = Ссылка;
			МенеджерЗаписи.Прочитать();
			МенеджерЗаписи.Просмотрено = Истина;
			МенеджерЗаписи.Записать(Истина);
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		
		ОтменитьТранзакцию();
	КонецПопытки;
	
	
КонецПроцедуры

Функция ДатаПоследнегоОбновленияСобытий(ИнициаторСеанса = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(СеансыСвязиСКонтролирующимиОрганами.Окончание) КАК ДатаСобытия
	|ИЗ
	|	Справочник.СеансыСвязиСКонтролирующимиОрганами КАК СеансыСвязиСКонтролирующимиОрганами
	|ГДЕ
	|	СеансыСвязиСКонтролирующимиОрганами.Успешно";
	
	Если ЗначениеЗаполнено(ИнициаторСеанса) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И СеансыСвязиСКонтролирующимиОрганами.ИнициаторСеанса = &ИнициаторСеанса";
	КонецЕсли;
	Запрос.УстановитьПараметр("ИнициаторСеанса", ИнициаторСеанса);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат '00010101';
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.ДатаСобытия;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецФункции

Функция ПолучитьНадписьВремяОбновления(ДатаПоследнегоОбновления) Экспорт

	Если Не ЗначениеЗаполнено(ДатаПоследнегоОбновления) Тогда
		Возврат НСтр("ru = 'Обновлено только что'");
	КонецЕсли;
	
	ВременнаяРазница = ТекущаяУниверсальнаяДата() - ДатаПоследнегоОбновления;
	
	НадписьВремяОбновления = "";
	Если ВременнаяРазница < 0 Тогда
		НадписьВремяОбновления = "";
	ИначеЕсли ВременнаяРазница < 15 * 60 Тогда
		НадписьВремяОбновления = НСтр("ru = 'Обновлено только что'");
	ИначеЕсли ВременнаяРазница < 30 * 60 Тогда
		НадписьВремяОбновления = НСтр("ru = 'Обновлено 15 минут назад'");		
	ИначеЕсли ВременнаяРазница < 60 * 60 Тогда
		НадписьВремяОбновления = НСтр("ru = 'Обновлено полчаса назад'");		
	ИначеЕсли ВременнаяРазница < 2 * 60 * 60 Тогда
		НадписьВремяОбновления = НСтр("ru = 'Обновлено час назад'");		
	ИначеЕсли ВременнаяРазница < 24 * 60 * 60 Тогда
		НадписьВремяОбновления = НСтр("ru = 'Обновлено несколько часов назад'");		
	ИначеЕсли ВременнаяРазница < 48 * 60 * 60 Тогда
		НадписьВремяОбновления = НСтр("ru = 'Обновлено вчера'");		
	Иначе
		НадписьВремяОбновления = НСтр("ru = 'Обновлено несколько дней назад'");
	КонецЕсли;
	
	Возврат НадписьВремяОбновления;
	
КонецФункции

Процедура ЗаполнитьДеревоНовое(ДеревоНовое, ИнициаторСеанса = Неопределено) Экспорт
	
	ДеревоНовое.Строки.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЖурналНовыхСобытий.Наименование,
	|	ЖурналНовыхСобытий.Ссылка КАК Объект,
	|	ЖурналНовыхСобытий.Статус,
	|	ЖурналНовыхСобытий.Организация,
	|	ЖурналНовыхСобытий.КонтролирующийОрган,
	|	ВЫБОР
	|		КОГДА ЖурналНовыхСобытий.Группа = ЗНАЧЕНИЕ(Перечисление.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ПолученныеСообщения)
	|			ТОГДА ВЫБОР
	|					КОГДА НепрочтеннаяПерепискаСКонтролирующимиОрганами.НепрочтенноеСообщение ЕСТЬ NULL 
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		ИНАЧЕ ЖурналНовыхСобытий.Просмотрено
	|	КОНЕЦ КАК Просмотрено,
	|	ЖурналНовыхСобытий.Состояние,
	|	ВЫБОР
	|		КОГДА ЖурналНовыхСобытий.Группа = ЗНАЧЕНИЕ(Перечисление.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ПолученныеСообщения)
	|			ТОГДА 0
	|		КОГДА ЖурналНовыхСобытий.Группа = ЗНАЧЕНИЕ(Перечисление.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ОбработанныеЗапросы)
	|			ТОГДА 1
	|		КОГДА ЖурналНовыхСобытий.Группа = ЗНАЧЕНИЕ(Перечисление.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ЗавершенныеОтправки)
	|			ТОГДА 2
	|		КОГДА ЖурналНовыхСобытий.Группа = ЗНАЧЕНИЕ(Перечисление.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.НеЗавершенныеОтправки)
	|			ТОГДА 3
	|	КОНЕЦ КАК ГруппаПорядок,
	|	ЖурналНовыхСобытий.СеансСвязи,
	|	ЖурналНовыхСобытий.ДатаСобытия,
	|	ЖурналНовыхСобытий.Порядок КАК Порядок,
	|	ЖурналНовыхСобытий.ЕстьОтвет,
	|	ЖурналНовыхСобытий.НеОтправляетсяВКонтролирующийОрган,
	|	ЖурналНовыхСобытий.Группа КАК Группа,
	|	ЖурналНовыхСобытий.ОтправленоПолучено КАК ОтправленоПолучено
	|ИЗ
	|	РегистрСведений.ЖурналНовыхСобытий КАК ЖурналНовыхСобытий
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НепрочтеннаяПерепискаСКонтролирующимиОрганами КАК НепрочтеннаяПерепискаСКонтролирующимиОрганами
	|		ПО ЖурналНовыхСобытий.Ссылка = НепрочтеннаяПерепискаСКонтролирующимиОрганами.НепрочтенноеСообщение
	|ГДЕ
	|	ЖурналНовыхСобытий.ДатаСобытия > &ДатаСобытия
	|	И (НЕ &ИспользоватьОтборИнициаторСеанса
	|			ИЛИ ЖурналНовыхСобытий.СеансСвязи.ИнициаторСеанса = &ИнициаторСеанса)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ИСТИНА,
	|	NULL,
	|	0,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ЗНАЧЕНИЕ(Перечисление.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ПолученныеСообщения),
	|	NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ИСТИНА,
	|	NULL,
	|	1,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ЗНАЧЕНИЕ(Перечисление.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ОбработанныеЗапросы),
	|	NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ИСТИНА,
	|	NULL,
	|	2,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ЗНАЧЕНИЕ(Перечисление.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ЗавершенныеОтправки),
	|	NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ИСТИНА,
	|	NULL,
	|	3,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ЗНАЧЕНИЕ(Перечисление.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.НеЗавершенныеОтправки),
	|	NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГруппаПорядок,
	|	Просмотрено,
	|	ОтправленоПолучено УБЫВ
	|ИТОГИ ПО
	|	Группа";
	Запрос.УстановитьПараметр("ДатаСобытия", ДобавитьМесяц(ТекущаяДатаСеанса(), -1));
	Запрос.УстановитьПараметр("ИнициаторСеанса", ИнициаторСеанса);
	Запрос.УстановитьПараметр("ИспользоватьОтборИнициаторСеанса", ЗначениеЗаполнено(ИнициаторСеанса));
	
	ВыборкаГруппа = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаГруппа.Следующий() Цикл		
		ВыборкаДетали = ВыборкаГруппа.Выбрать();
		
		ЗаполнитьСтрокиДерева(ДеревоНовое, ВыборкаДетали, ВыборкаГруппа.Группа, ИнициаторСеанса);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокиДерева(ДеревоНовое, ВыборкаДетали, Группа, ИнициаторСеанса)
	
	Если ИнициаторСеанса = Перечисления.ИнициаторыСеансовСвязиСКонтролирующимиОрганами.Автообмен
		И Группа = Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.НезавершенныеОтправки Тогда
		Возврат;
	КонецЕсли;
	
	МассивНовые = Новый Массив;
	МассивСтарые = Новый Массив;
	
	Пока ВыборкаДетали.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаДетали.Объект) Тогда
			ЭлементДерева = ЭлементДерева();

			ЭлементДерева.Дата = Отступ(ВыборкаДетали.Просмотрено, Группа) + Формат(ВыборкаДетали.ОтправленоПолучено, "ДФ=dd.MM.yyyy");
			ЭлементДерева.Наименование = ВыборкаДетали.Наименование;
			ЭлементДерева.Ссылка = ВыборкаДетали.Объект;
			ЭлементДерева.КонтролирующийОрган = ВыборкаДетали.КонтролирующийОрган;
			ЭлементДерева.Статус = ВыборкаДетали.Статус;
			ЭлементДерева.Организация = ВыборкаДетали.Организация;
			ЭлементДерева.НеПрочитано = Не ВыборкаДетали.Просмотрено;
			ЭлементДерева.СостояниеСдачиОтчетности = ВыборкаДетали.Состояние;
			ЭлементДерева.ЕстьОтвет = ВыборкаДетали.ЕстьОтвет;
			ЭлементДерева.НеОтправляетсяВКонтролирующийОрган = ВыборкаДетали.НеОтправляетсяВКонтролирующийОрган;
			ЭлементДерева.Группа = Группа;
			
			Если Группа = Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ПолученныеСообщения Тогда
				ЭлементДерева.ЭтоСтатусСсылка = ЭлементДерева.Статус = "Подтвердите прием";
			КонецЕсли;
			
			Если ВыборкаДетали.Просмотрено Тогда
				МассивСтарые.Добавить(ЭлементДерева);
			Иначе
				МассивНовые.Добавить(ЭлементДерева);
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;
	
	СтрокаБлок = ДеревоНовое.Строки.Добавить();
	СтрокаБлок.ЭтоЗаголовокБлока = Истина;
	СтрокаБлок.ЗаголовокБлока = Строка(Группа);
	СтрокаБлок.Группа = Группа;
	
	Если МассивНовые.Количество() = 0 Тогда
		СтрокаСобытие = ДеревоНовое.Строки.Добавить();
		СтрокаСобытие.Наименование = Отступ() + НадписьНовыхНет(Группа);
	Иначе
		Для Каждого НовоеСобытие Из МассивНовые Цикл
			СтрокаСобытие = ДеревоНовое.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСобытие, НовоеСобытие);
		КонецЦикла;
	КонецЕсли;
	
	Если ИнициаторСеанса <> Перечисления.ИнициаторыСеансовСвязиСКонтролирующимиОрганами.Автообмен
		И Группа <> Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.НезавершенныеОтправки Тогда
		Если МассивСтарые.Количество() > 0 Тогда
			СтрокаБлок = ДеревоНовое.Строки.Добавить();
			СтрокаБлок.ЭтоПодЗаголовок = Истина;
			СтрокаБлок.ЗаголовокБлока = ЗаголовокНедавноПросмотренных(Группа);
			
			Для Каждого СтароеСобытие Из МассивСтарые Цикл
				СтрокаСобытие = СтрокаБлок.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаСобытие, СтароеСобытие);		
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаВерхнегоУровня = ДеревоНовое.Строки.Добавить();
	СтрокаВерхнегоУровня.ЭтоРазделитель = Истина;	
	
КонецПроцедуры

Функция Отступ(Просмотрено = Ложь, Группа = Неопределено)
	
	Если Группа = Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.НезавершенныеОтправки ИЛИ Не Просмотрено Тогда
		Возврат "     ";
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция НадписьНовыхНет(Группа)
	
	Если Группа = Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ПолученныеСообщения
		ИЛИ Группа = Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ОбработанныеЗапросы
		ИЛИ Группа = Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ЗавершенныеОтправки Тогда
		Возврат НСтр("ru = 'Новых нет'");
	ИначеЕсли Группа = Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.НезавершенныеОтправки Тогда
		Возврат НСтр("ru = 'Незавершенных нет'");
	КонецЕсли;
	
КонецФункции

Функция ЗаголовокНедавноПросмотренных(Группа)
	
	Если Группа = Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ПолученныеСообщения Тогда
		Возврат НСтр("ru = 'Недавно полученные сообщения'");
	ИначеЕсли Группа = Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ОбработанныеЗапросы Тогда
		Возврат НСтр("ru = 'Недавно обработанные запросы'");
	ИначеЕсли Группа = Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.ЗавершенныеОтправки Тогда
		Возврат НСтр("ru = 'Недавно завершенные отправки'");
	ИначеЕсли Группа = Перечисления.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.НезавершенныеОтправки Тогда
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция ЭлементДерева()
	
	ПустойЭлемент = Новый Структура("Дата, Наименование, Ссылка, КонтролирующийОрган, Статус, Организация, НеПрочитано, СостояниеСдачиОтчетности, СостояниеСдачиОтчетности, ЕстьОтвет, НеОтправляетсяВКонтролирующийОрган, Группа, ЭтоСтатусСсылка");
	
	Возврат ПустойЭлемент;
				
КонецФункции

#КонецОбласти

#Область ВспомогательныхПроцедурИФункций

Процедура ПометитьОбъектНепрочтеннымПриЗаписи(Объект) Экспорт
	
	Ссылка = Объект.Ссылка;
	
	НужноПометитьОбъектНепрочитанным = Ложь;
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ДокументыРеализацииПолномочийНалоговыхОрганов") Тогда
		
		НужноПометитьОбъектНепрочитанным = Истина;
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ПерепискаСКонтролирующимиОрганами") Тогда
		
		Если Ссылка.Статус = Перечисления.СтатусыПисем.Полученное Тогда
			НужноПометитьОбъектНепрочитанным = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НужноПометитьОбъектНепрочитанным Тогда
		ПометитьОбъектНепрочтенным(Ссылка);
	КонецЕсли;

КонецПроцедуры

Функция ТаблицаОписанияПрочихУведомлений() Экспорт
	
	ТаблицаОписания = РегламентированнаяОтчетность.ТаблицаОписанияОбъектовРегламентированнойОтчетности();
	
	// оставляем в таблице только уведомления и нужные колонки
	ТаблицаОписанияУведомлений = ТаблицаОписания.Скопировать(Новый Структура("ВидДокумента", Перечисления.СтраницыЖурналаОтчетность.Уведомления));
		
	Возврат ТаблицаОписанияУведомлений;

КонецФункции

Процедура ПрисоединитьДерево(ДеревоПриемник, ПрисоединяемоеДерево) Экспорт
	
	СтрокиДереваПриемника = ДеревоПриемник.Строки;
	Для каждого СтрокаПрисоединяемогоДерева Из ПрисоединяемоеДерево.Строки Цикл
		НоваяСтрокаДереваПриемника = СтрокиДереваПриемника.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаДереваПриемника, СтрокаПрисоединяемогоДерева);
		ПрисоединитьДерево(НоваяСтрокаДереваПриемника, СтрокаПрисоединяемогоДерева);
	КонецЦикла; 
	
КонецПроцедуры

Процедура ОпределитьСтатусИСостояниеСдачиОтчетности(Ссылка, Организация, ВидКонтролирующегоОргана, СостояниеСдачиОтчетности, СтатусОтправки) Экспорт
	
	// Определяем текст статуса и цвет
	Если ОбъектОтправляетсяВКонтролирующиеОрганы(Ссылка) Тогда
		
		ТекущееСостояние = ДокументооборотСКОВызовСервера.ПараметрыПрорисовкиСтатуса(
			Ссылка, ВидКонтролирующегоОргана);
			
		Если ТекущееСостояние = Неопределено ИЛИ ТекущееСостояние.ТекущийЭтапОтправки = Неопределено Тогда
			СтатусОтправки 				= НСтр("ru = 'Не отправлено'");
			СостояниеСдачиОтчетности 	= Перечисления.СостояниеСдачиОтчетности.ДокументооборотНеНачат;
		Иначе
			ТекущийЭтап = ТекущееСостояние.ТекущийЭтапОтправки;
			
			СтатусОтправки 				= ТекущийЭтап.ТекстСтатуса;
			СостояниеСдачиОтчетности 	= ТекущийЭтап.СостояниеСдачиОтчетности;
		КонецЕсли;
		
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ПереопределитьСтатусИСостояниеСдачиОтчетности(Ссылка, СтатусОтправки, СостояниеСдачиОтчетности);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОбъектОтправляетсяВКонтролирующиеОрганы(Ссылка) Экспорт
	
	ОбъектОтправляется = Истина;
	
	// Среди уведомлений о спецрежимах налогообложения есть те, которые не отправляются
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.УведомлениеОСпецрежимахНалогообложения") Тогда
		Если ПравоДоступа("Чтение", Метаданные.Справочники.ВидыОтправляемыхДокументов) Тогда
			ВидыОтправляемыхУведомлений = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ВидыОтправляемыхУведомленийОСпецрежимахНалогообложения();
			Если ВидыОтправляемыхУведомлений.Найти(Ссылка.ВидУведомления) = Неопределено Тогда
				ОбъектОтправляется = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	// Регламентированные отчеты
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		
		РегламентированнаяОтчетность.РегламентированныйОтчетОтправляетсяВКонтролирующиеОрганы(Ссылка, ОбъектОтправляется);
		
	Иначе
		
		// Объекты, не входящие в БРО
		ТаблицаОписания = РегламентированнаяОтчетность.ТаблицаОписанияОбъектовРегламентированнойОтчетности();
		СтрокаОписанияОбъекта = ТаблицаОписания.Найти(ТипЗнч(Ссылка), "ТипОбъекта");
		Если СтрокаОписанияОбъекта <> Неопределено Тогда
			ОбъектОтправляется = НЕ СтрокаОписанияОбъекта.НеОтправляетсяВКонтролирующийОрган;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбъектОтправляется;

КонецФункции

Функция ЕстьКритическиеСообщения(Ссылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДОСервер.ЕстьКритическиеСообщения(Ссылка);
	
КонецФункции

Функция ВидыЭлектронныхПредставленийВРазделеУведомления() Экспорт
	
	// Уведомления о спецрежимах налогоообложения
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВидыОтправляемыхДокументов.Ссылка
		|ИЗ
		|	Справочник.ВидыОтправляемыхДокументов КАК ВидыОтправляемыхДокументов
		|ГДЕ
		|	ВидыОтправляемыхДокументов.ТипДокумента = &ТипДокумента";

	Запрос.УстановитьПараметр("ТипДокумента", Перечисления.ТипыОтправляемыхДокументов.ИсходящееУведомлениеФНС);

	Выгрузка = Запрос.Выполнить().Выгрузить();
	ВидыЭлектронныхПредставлений = Выгрузка.ВыгрузитьКолонку("Ссылка");
	
	// Уведомления из конфигурации-потребителя
	ОписаниеОбъектовНеВходящихВБРО = РегламентированнаяОтчетность.ТаблицаОписанияОбъектовРегламентированнойОтчетности();
	Для каждого ОписаниеОбъекта Из ОписаниеОбъектовНеВходящихВБРО Цикл
		Если ОписаниеОбъекта.ВидДокумента = Перечисления.СтраницыЖурналаОтчетность.Уведомления 
			И ЗначениеЗаполнено(ОписаниеОбъекта.ВидЭлектронногоПредставления) Тогда
				
				// Проверка нужна чтобы предотвратить добавление дублей в массив 
				Если ВидыЭлектронныхПредставлений.Найти(ОписаниеОбъекта.ВидЭлектронногоПредставления) = Неопределено Тогда
					ВидыЭлектронныхПредставлений.Добавить(ОписаниеОбъекта.ВидЭлектронногоПредставления);
				КонецЕсли;
			
		КонецЕсли;
	КонецЦикла; 
	
	Возврат ВидыЭлектронныхПредставлений;
	
КонецФункции

Функция ЭтотВидЭлектронногоПредставленияОтноситсяКРазделуУведомления(ВидОтчета) Экспорт
	
	ВидыОтчетовРазделаУведомления = ВидыЭлектронныхПредставленийВРазделеУведомления();
	Возврат ВидыОтчетовРазделаУведомления.Найти(ВидОтчета) <> Неопределено;
	
КонецФункции

Процедура ЗаписьОбъектовРегламентированнойОтчетности(Предмет, Отказ) Экспорт
	
	РегламентированнаяОтчетность.ЗаписьОбъектовРегламентированнойОтчетности(Предмет, Отказ);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ИсправлениеСтатусовОтправок2НДФЛ

Процедура ИсправитьНекорректныеСостоянияОтправок2НДФЛ() Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстЭДОСервер.ИсправитьНекорректныеСостоянияОтправок2НДФЛ();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОпределениеСвойстваОбъектаДляОтображенииВФормеОтчетность(Ссылка, ЗначенияЗаполнения)
	
	ТаблицаСвойств = РегламентированнаяОтчетность.ОпределитьСвойстваОбъектовДляОтображенияВФормеОтчетность(Ссылка);
	СвойстваСсылки = ТаблицаСвойств.Найти(Ссылка, "Ссылка");
	
	Если СвойстваСсылки <> Неопределено Тогда
		
		ЗначенияЗаполнения.ДатаСоздания = СвойстваСсылки.ДатаСоздания;
		Если ЗначениеЗаполнено(СвойстваСсылки.Наименование) Тогда
			ЗначенияЗаполнения.Наименование = СвойстваСсылки.Наименование;
		КонецЕсли;
		ЗначенияЗаполнения.ДатаСоздания 			= СвойстваСсылки.ДатаСоздания;
		ЗначенияЗаполнения.КодКонтролирующегоОргана = СвойстваСсылки.КодКонтролирующегоОргана;
		ЗначенияЗаполнения.Организация 				= СвойстваСсылки.Организация;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДокументыПоТребованиюФНС

//Обработчик обновления БРО 1.1.6
Процедура ЗаполнитьРегистрДокументыПоТребованиюФНС(Параметры = Неопределено) Экспорт
	
	Параметры.ОбработкаЗавершена = Ложь;

	УстановитьПривилегированныйРежим(Истина);

	СвойстваВладельцевЭД = Новый Соответствие;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ОпределитьСвойстваВладельцевЭлектронныхДокументов(СвойстваВладельцевЭД);

	ОбработаноОбъектов = 0;
	
	Пока ОбработаноОбъектов < 1000 И Не Параметры.ОбработкаЗавершена Цикл
		СвойстваИсточников = Новый Соответствие;
		
		ВыборкаИсточников = ВыборкаИсточниковНеЗаписанныхВРегистрДокументыПоТребованиюФНС(Параметры);
		
		Если ЗначениеЗаполнено(ВыборкаИсточников) Тогда
			ОбработаноОбъектов = ОбработаноОбъектов + ВыборкаИсточников.Количество();
		КонецЕсли;
		
		СсылкаГраница = Неопределено;
		Если ЗначениеЗаполнено(ВыборкаИсточников) Тогда
			Пока ВыборкаИсточников.Следующий() Цикл
				СвойстваИсточников.Вставить(ВыборкаИсточников.Объект, Новый Массив);
				СсылкаГраница = ВыборкаИсточников.Объект;
			КонецЦикла;	
		КонецЕсли;
		Параметры.Вставить("СсылкаГраница", СсылкаГраница);
		
		Попытка
			// определение свойств источников
			ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ОпределитьСвойстваИсточниковДляРегистраДокументыПоТребованиюФНС(СвойстваИсточников);
		Исключение
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			
			ЗаписьЖурналаРегистрации(
				"Ошибка при заполнении регистра ДокументыПоТребованиюФНС: определение свойств источников", 
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
		КонецПопытки;
		
		НачатьТранзакцию();
		Попытка
			// запись свойств источников в регистр
			СоответствиеВидовДокументовФНС = СоответствиеВидовДокументовФНС();
				
			Для каждого СвойстваИсточника Из СвойстваИсточников Цикл
				ИсточникСсылка = СвойстваИсточника.Ключ.Ссылка;
				МассивСтруктурСвойствИсточника = СвойстваИсточника.Значение;
				
				ВидДокументаФНСЭДСтрока = СвойстваВладельцевЭД[ИсточникСсылка];
				ВидДокументаФНСЭДПеречисление = СоответствиеВидовДокументовФНС[ВидДокументаФНСЭДСтрока];
				
				Для каждого СтруктураСвойствИсточника Из МассивСтруктурСвойствИсточника Цикл
					
					НаборЗаписей = РегистрыСведений.ДокументыПоТребованиюФНС.СоздатьНаборЗаписей();
					Если СтруктураСвойствИсточника.Свойство("Организация") Тогда
						НаборЗаписей.Отбор.Организация.Установить(СтруктураСвойствИсточника.Организация);
					КонецЕсли;
					Если СтруктураСвойствИсточника.Свойство("ВидДокументаФНС") Тогда
						НаборЗаписей.Отбор.ВидДокументаФНС.Установить(СтруктураСвойствИсточника.ВидДокументаФНС);
					КонецЕсли;
					Если СтруктураСвойствИсточника.Свойство("НомерСтрокиИсточника") Тогда
						НаборЗаписей.Отбор.НомерСтрокиИсточника.Установить(СтруктураСвойствИсточника.НомерСтрокиИсточника);
					КонецЕсли;
					НаборЗаписей.Отбор.Источник.Установить(ИсточникСсылка);
					
					Запись = НаборЗаписей.Добавить();
					Запись.Источник = ИсточникСсылка;
					ЗаполнитьЗначенияСвойств(Запись, СтруктураСвойствИсточника);
					СтруктураСвойствИсточника.Свойство("Дата",       Запись.ДатаДокумента);
					СтруктураСвойствИсточника.Свойство("Номер",      Запись.НомерДокумента);
					СтруктураСвойствИсточника.Свойство("СуммаВсего", Запись.СуммаДокумента);
					
					Запись.ЕстьЭлектронныйДокумент = (ВидДокументаФНСЭДПеречисление = Запись.ВидДокументаФНС);	
					НаборЗаписей.Записать(Истина);
				КонецЦикла;
				
			КонецЦикла;

			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка при заполнении регистра ДокументыПоТребованиюФНС: запись свойств источников'"), 
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
		КонецПопытки;
	КонецЦикла;
	
	ВыборкаСканированныхДокументов = ВыборкаСканированныхДокументовНеЗаписанныхВРегистрДокументыПоТребованиюФНС();
		
	Пока ВыборкаСканированныхДокументов.Следующий() Цикл
		
		СканированныйДокумент = ВыборкаСканированныхДокументов.Ссылка;
		
		Попытка
			
			// Запись в регистр
			ЗаписатьСканированныйДокументВРегистрДокументыПоТребованиюФНС(СканированныйДокумент);
			
		Исключение
		
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			
			ЗаписьЖурналаРегистрации(
				"Ошибка при заполнении регистра ДокументыПоТребованиюФНС", 
				УровеньЖурналаРегистрации.Ошибка,, СканированныйДокумент,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
				
		КонецПопытки;

	КонецЦикла;	
	
КонецПроцедуры

Функция ВыборкаИсточниковНеЗаписанныхВРегистрДокументыПоТребованиюФНС(Параметры)
	
	Если Не Параметры.Свойство("МассивТипов") Тогда
		СоответствиеВидовДокументов = Новый Соответствие;
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСерверПереопределяемый.ОпределитьСоответствиеТиповИсточниковВидамДокументовФНС(
			СоответствиеВидовДокументов);
		
		МассивТипов = Новый Массив;
		Для каждого элСоответствиеВидовДокументов Из СоответствиеВидовДокументов Цикл
			МассивТиповОдногоВида = элСоответствиеВидовДокументов.Значение;
			Для каждого ТипИсточника Из МассивТиповОдногоВида Цикл
				Если МассивТипов.Найти(ТипИсточника) = Неопределено Тогда
					МассивТипов.Добавить(ТипИсточника);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Если НЕ ЗначениеЗаполнено(МассивТипов) Тогда
			Параметры.ОбработкаЗавершена = Истина;
			Возврат Неопределено;
		КонецЕсли;
		Параметры.Вставить("МассивТипов", МассивТипов);
		Параметры.Вставить("ТекущийЭлемент", 0);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "";
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		РазмерВыборки = "1000";
	Иначе
		РазмерВыборки = "10000";
	КонецЕсли;
	
	Если Параметры.ТекущийЭлемент <= Параметры.МассивТипов.ВГраница() Тогда
		Пока Параметры.ТекущийЭлемент <= Параметры.МассивТипов.ВГраница() Цикл
			ТекущийТип = Параметры.МассивТипов[Параметры.ТекущийЭлемент];
			ОбъектМетаданных = Метаданные.НайтиПоТипу(ТекущийТип);			
			Если ОбъектМетаданных <> Неопределено Тогда
				
				ПолноеИмяТипа 		= ОбъектМетаданных.ПолноеИмя();
				ИмяТипа 			= ОбъектМетаданных.Имя;
				
				Запрос.Текст =
				"ВЫБРАТЬ ПЕРВЫЕ " + РазмерВыборки + "
				|	%1.Ссылка КАК Объект
				|ИЗ
				|	%2. КАК %1
				|ГДЕ
				|	НЕ %1.ПометкаУдаления";
				
				Если Метаданные.Справочники.Содержит(ОбъектМетаданных)                                                   
				И ОбъектМетаданных.Иерархический
				И ОбъектМетаданных.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
					Запрос.Текст = Запрос.Текст + "
					|	И %1.ЭтоГруппа = ЛОЖЬ" 
				КонецЕсли;

				Если Параметры.Свойство("СсылкаГраница") И ЗначениеЗаполнено(Параметры.СсылкаГраница)
					И ТипЗнч(Параметры.СсылкаГраница) = ТекущийТип Тогда
					Запрос.Текст = Запрос.Текст + "
					|	И %1.Ссылка < &СсылкаГраница";
					Запрос.УстановитьПараметр("СсылкаГраница", Параметры.СсылкаГраница);
				КонецЕсли;
				
				Запрос.Текст = Запрос.Текст + 
				"
				|УПОРЯДОЧИТЬ ПО
				|	Ссылка УБЫВ";
				
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%1", ИмяТипа);
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%2", ПолноеИмяТипа);
				
				РезультатЗапроса = Запрос.Выполнить();
				Если РезультатЗапроса.Пустой() Тогда
					Параметры.ТекущийЭлемент = Параметры.ТекущийЭлемент + 1;
				Иначе
					Выборка = РезультатЗапроса.Выбрать();
					Возврат Выборка;
				КонецЕсли;
			Иначе
				Параметры.ТекущийЭлемент = Параметры.ТекущийЭлемент + 1;
			КонецЕсли;			
		КонецЦикла;
	Иначе
		Параметры.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецФункции

Функция ВыборкаСканированныхДокументовНеЗаписанныхВРегистрДокументыПоТребованиюФНС()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СканированныеДокументыДляПередачиВЭлектронномВиде.Ссылка
	|ИЗ
	|	Справочник.СканированныеДокументыДляПередачиВЭлектронномВиде КАК СканированныеДокументыДляПередачиВЭлектронномВиде
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыПоТребованиюФНС КАК ДокументыПоТребованиюФНС
	|		ПО ДокументыПоТребованиюФНС.СканированныйДокумент = СканированныеДокументыДляПередачиВЭлектронномВиде.Ссылка
	|ГДЕ
	|	ДокументыПоТребованиюФНС.СканированныйДокумент Есть NULL";
	
	
	// Выполнение полученного запроса
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Возврат РезультатЗапроса;
	
КонецФункции

// Обработчик подписки на событие "ЗаписатьИсточникВРегистрДокументыПоТребованиюФНС"
Процедура ЗаписатьИсточникВРегистрДокументыПоТребованиюФНС(Источник) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Ссылка = Источник.Ссылка;
	
	Если Ссылка <> Источник Тогда
		// Источник - это объект
		Если Источник.ОбменДанными.Загрузка Тогда
			Возврат;
		КонецЕсли;
		
		Если Источник.ДополнительныеСвойства.Свойство("ГрупповоеПерепроведение") Тогда
			// При групповом перепроведении сведения не изменяются
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	СвойстваИсточников = Новый Соответствие;
	СвойстваИсточников.Вставить(Ссылка, Новый Массив);
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ОпределитьСвойстваИсточниковДляРегистраДокументыПоТребованиюФНС(СвойстваИсточников);
	
	СвойстваИсточника = СвойстваИсточников[Ссылка];
	
	Если НЕ ЗначениеЗаполнено(СвойстваИсточника) Тогда
		//удалим ссылку на данный источник в сканированных документах
		УдалитьСсылкуНаИсточникВСканированныхДокументах(Ссылка);
	КонецЕсли;
	
	ОбновитьСвойстваИсточникаВРегистреДокументыПоТребованиюФНС(Ссылка, СвойстваИсточника);
	
КонецПроцедуры

Процедура УдалитьСсылкуНаИсточникВСканированныхДокументах(Источник)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СканированныеДокументыДляПередачиВЭлектронномВиде.Ссылка
		|ИЗ
		|	Справочник.СканированныеДокументыДляПередачиВЭлектронномВиде КАК СканированныеДокументыДляПередачиВЭлектронномВиде
		|ГДЕ
		|	СканированныеДокументыДляПередачиВЭлектронномВиде.Источник = &Источник";
	
	Запрос.УстановитьПараметр("Источник", Источник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ОбъектСпр = Выборка.Ссылка.ПолучитьОбъект();
		ОбъектСпр.Источник = Неопределено;
		ОбъектСпр.НомерСтрокиИсточника = 0;
		ОбъектСпр.Записать(); 
	КонецЦикла;

КонецПроцедуры

Процедура ЗаписатьСканированныйДокументВРегистрДокументыПоТребованиюФНС(СканированныйДокумент) Экспорт

	Ссылка = СканированныйДокумент.Ссылка;
	Если Ссылка <> СканированныйДокумент Тогда
		Если СканированныйДокумент.ОбменДанными.Загрузка Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СвойстваСканированногоДокумента = СвойстваСканированногоДокументаДляРегистраДокументыПоТребованиюФНС(Ссылка);
	ОбновитьСвойстваСканированногоДокументаВРегистреДокументыПоТребованиюФНС(Ссылка, СвойстваСканированногоДокумента);
	
КонецПроцедуры

// Обработчик подписки на событие "ЗаписатьЭлектронныйДокументВРегистрДокументыПоТребованиюФНС"
Процедура ЗаписатьЭлектронныйДокументВРегистрДокументыПоТребованиюФНС(ЭлектронныйДокумент) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Ссылка = ЭлектронныйДокумент.Ссылка;
	Если Ссылка <> ЭлектронныйДокумент Тогда
		Если ЭлектронныйДокумент.ОбменДанными.Загрузка Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ДокументИБ = Неопределено;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ОпределитьВладельцаЭлектронногоДокумента(Ссылка, ДокументИБ);
	
	Если НЕ ЗначениеЗаполнено(ДокументИБ) Тогда
		Возврат;	
	КонецЕсли;
	
	МассивВладельцевЭД = Новый Массив;
	МассивВладельцевЭД.Добавить(ДокументИБ);
	СоответствиеВидДокументаИБ = Новый Соответствие;
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ОпределитьСвойстваВладельцевЭлектронныхДокументов(СоответствиеВидДокументаИБ, МассивВладельцевЭД);
	
	ВидДокументаФНССтрока = СоответствиеВидДокументаИБ[Ссылка];
	ОбновитьНаличиеЭДВРегистреДокументыПоТребованиюФНС(ДокументИБ, ВидДокументаФНССтрока);
	
КонецПроцедуры

Функция СвойстваСканированногоДокументаДляРегистраДокументыПоТребованиюФНС(Ссылка) 

	ЗначенияЗаполнения = Новый Структура;
	
	//определим основные реквизиты сканированного документа
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СканированныеДокументыДляПередачиВЭлектронномВиде.Организация,
		|	СканированныеДокументыДляПередачиВЭлектронномВиде.ВидДокумента,
		|	СканированныеДокументыДляПередачиВЭлектронномВиде.НомерДокумента,
		|	СканированныеДокументыДляПередачиВЭлектронномВиде.ДатаДокумента,
		|	СканированныеДокументыДляПередачиВЭлектронномВиде.СуммаВсего,
		|	СканированныеДокументыДляПередачиВЭлектронномВиде.Источник,
		|	СканированныеДокументыДляПередачиВЭлектронномВиде.НомерСтрокиИсточника,
		|	СканированныеДокументыДляПередачиВЭлектронномВиде.Направление,
		|	СканированныеДокументыДляПередачиВЭлектронномВиде.ПометкаУдаления
		|ИЗ
		|	Справочник.СканированныеДокументыДляПередачиВЭлектронномВиде КАК СканированныеДокументыДляПередачиВЭлектронномВиде
		|ГДЕ
		|	СканированныеДокументыДляПередачиВЭлектронномВиде.Ссылка = &Ссылка";

	Запрос.Параметры.Вставить("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ЗначенияЗаполнения.Вставить("ВидДокументаФНС", 			ВыборкаДетальныеЗаписи.ВидДокумента);
		ЗначенияЗаполнения.Вставить("Источник", 				ВыборкаДетальныеЗаписи.Источник);
		ЗначенияЗаполнения.Вставить("НомерСтрокиИсточника",		ВыборкаДетальныеЗаписи.НомерСтрокиИсточника);
		ЗначенияЗаполнения.Вставить("Организация", 				ВыборкаДетальныеЗаписи.Организация);
		ЗначенияЗаполнения.Вставить("Направление", 				ВыборкаДетальныеЗаписи.Направление);
		ЗначенияЗаполнения.Вставить("НомерДокумента", 			ВыборкаДетальныеЗаписи.НомерДокумента);
		ЗначенияЗаполнения.Вставить("ДатаДокумента", 			ВыборкаДетальныеЗаписи.ДатаДокумента);
		ЗначенияЗаполнения.Вставить("СуммаДокумента", 			ВыборкаДетальныеЗаписи.СуммаВсего);
		ЗначенияЗаполнения.Вставить("ПометкаУдаления", 			ВыборкаДетальныеЗаписи.ПометкаУдаления);
	КонецЕсли;
	
	//определим строкой свойство Контрагенты
	Организация = ВыборкаДетальныеЗаписи.Организация;
	ИННКППОрганизации = Новый Структура; //требуется для формирования представления контрагентов (из списка участников нужно убрать организацию)
	
	//Сведения об организации
	ЭтоПБОЮЛ = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация);
	
	ИНН = "";
	КПП = "";
	Если ЭтоПБОЮЛ Тогда
		
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, , "ИННФЛ");	
		ИНН = СведенияОбОрганизации.ИННФЛ;
		
	Иначе
		
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, , "ИННЮЛ, КППЮЛ");	
		ИНН = СведенияОбОрганизации.ИННЮЛ; 
		КПП = СведенияОбОрганизации.КППЮЛ; 
		
	КонецЕсли; 
	
	ИННКППОрганизации.Вставить("ИНН", ИНН);
	ИННКППОрганизации.Вставить("КПП", КПП);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СканированныеДокументыДляПередачиВЭлектронномВидеРеквизитыУчастников.ЮрЛицоНаименование,
		|	СканированныеДокументыДляПередачиВЭлектронномВидеРеквизитыУчастников.ЮрЛицоИНН,
		|	СканированныеДокументыДляПередачиВЭлектронномВидеРеквизитыУчастников.ЮрЛицоКПП,
		|	СканированныеДокументыДляПередачиВЭлектронномВидеРеквизитыУчастников.ФизЛицоФамилия,
		|	СканированныеДокументыДляПередачиВЭлектронномВидеРеквизитыУчастников.ФизЛицоИмя,
		|	СканированныеДокументыДляПередачиВЭлектронномВидеРеквизитыУчастников.ФизЛицоОтчество,
		|	СканированныеДокументыДляПередачиВЭлектронномВидеРеквизитыУчастников.ФизЛицоИНН,
		|	СканированныеДокументыДляПередачиВЭлектронномВидеРеквизитыУчастников.ЯвляетсяЮрЛицом,
		|	СканированныеДокументыДляПередачиВЭлектронномВидеРеквизитыУчастников.Контрагент КАК КонтрагентСсылка
		|ИЗ
		|	Справочник.СканированныеДокументыДляПередачиВЭлектронномВиде.РеквизитыУчастников КАК СканированныеДокументыДляПередачиВЭлектронномВидеРеквизитыУчастников
		|ГДЕ
		|	СканированныеДокументыДляПередачиВЭлектронномВидеРеквизитыУчастников.Ссылка = &Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Контрагенты = "";
	СписокКонтрагентов = Новый СписокЗначений;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Контрагент = "";
		Если ВыборкаДетальныеЗаписи.ЯвляетсяЮрЛицом Тогда
			Если ИННКППОрганизации.ИНН <> ВыборкаДетальныеЗаписи.ЮрЛицоИНН И ИННКППОрганизации.КПП <> ВыборкаДетальныеЗаписи.ЮрЛицоКПП Тогда
				Контрагент = ВыборкаДетальныеЗаписи.ЮрЛицоНаименование;	
			КонецЕсли; 
		Иначе
			Если ИННКППОрганизации.ИНН <> ВыборкаДетальныеЗаписи.ФизЛицоИНН Тогда
				Контрагент = СокрЛП(ВыборкаДетальныеЗаписи.ФизЛицоФамилия + " " + ВыборкаДетальныеЗаписи.ФизЛицоИмя + " " + ВыборкаДетальныеЗаписи.ФизЛицоОтчество);
			КонецЕсли; 
		КонецЕсли;	
		
		Если Контрагент <> "" Тогда
			
			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.КонтрагентСсылка) Тогда
				//заполнена ссылка на справочник, поэтому заменяем сформированное представление контрагента его наименованием
				Контрагент = Строка(ВыборкаДетальныеЗаписи.КонтрагентСсылка);	
			КонецЕсли;
			
			Если СписокКонтрагентов.НайтиПоЗначению(Контрагент) = Неопределено Тогда
				СписокКонтрагентов.Добавить(Контрагент);
				Контрагенты = Контрагенты + ", " + Контрагент;	
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Контрагенты = Сред(Контрагенты, 3); //отрезаем первую запятую
	ЗначенияЗаполнения.Вставить("КонтрагентПредставление", 	Контрагенты);
	
	Возврат ЗначенияЗаполнения;
	
КонецФункции

Процедура ОбновитьСвойстваСканированногоДокументаВРегистреДокументыПоТребованиюФНС(Ссылка, ЗначенияЗаполнения) 
	
	НачатьТранзакцию();
	
	Попытка
		
		ОбъектУдален = ЗначенияЗаполнения.ПометкаУдаления;
		
		// Записываем данные в регистр
		НаборЗаписей = РегистрыСведений.ДокументыПоТребованиюФНС.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.СканированныйДокумент.Установить(Ссылка);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() = 0 Тогда
			//данный сканированный документ ещё не отражен в регистре
			
			Если НЕ ОбъектУдален Тогда
				//попытаемся найти строку, в которую его нужно вписать
				МенеджерЗаписи = РегистрыСведений.ДокументыПоТребованиюФНС.СоздатьМенеджерЗаписи();
				
				МенеджерЗаписи.СканированныйДокумент 	= Справочники.СканированныеДокументыДляПередачиВЭлектронномВиде.ПустаяСсылка();
				МенеджерЗаписи.Организация				= ЗначенияЗаполнения.Организация;
				МенеджерЗаписи.ВидДокументаФНС 			= ЗначенияЗаполнения.ВидДокументаФНС;
				МенеджерЗаписи.Источник 				= ЗначенияЗаполнения.Источник;
				МенеджерЗаписи.НомерСтрокиИсточника		= ЗначенияЗаполнения.НомерСтрокиИсточника;
				МенеджерЗаписи.Прочитать();
				
				Если МенеджерЗаписи.Выбран() Тогда
					//есть такая строка
					//можно вносить данные в регистр только если по данному источнику нет ЭД
					Если НЕ МенеджерЗаписи.ЕстьЭлектронныйДокумент Тогда
						ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ЗначенияЗаполнения);
						МенеджерЗаписи.Контрагент = Неопределено;	//очистим поле Контрагент, теперь эта запись завязана на скандокумент, а не на документ-источник
						МенеджерЗаписи.СканированныйДокумент = Ссылка;
						МенеджерЗаписи.Записать();
					КонецЕсли;
				Иначе
					//нет такой строки
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ЗначенияЗаполнения);
					МенеджерЗаписи.СканированныйДокумент = Ссылка;
					МенеджерЗаписи.Записать();
				КонецЕсли;
								
			КонецЕсли;
			
		Иначе
			//данный сканированный документ уже есть в регистре

			Если ОбъектУдален Тогда
				//нужно удалить ссылку на сканированной документ в регистре
				МассивСканДокументовДляУдаленияИзЖурнала = Новый Массив;
				МассивСканДокументовДляУдаленияИзЖурнала.Добавить(Ссылка);
				УдалитьИзЖурналаМассивСканДокументов(МассивСканДокументовДляУдаленияИзЖурнала);
			Иначе
				Запись = НаборЗаписей[0]; //запись со сканированным документом всего одна
				
				ИсточникЗаписи = Запись.Источник;
				ИсточникСканированногоДокумента = ЗначенияЗаполнения.Источник;
				
				ИсточникДляОбновления = Неопределено;
				Если ИсточникЗаписи <> ИсточникСканированногоДокумента Тогда
					//изменилась связь сканированного документа и источника (появилась, удалена или изменена)
					
					Если ЗначениеЗаполнено(ИсточникСканированногоДокумента) Тогда
						// связь сканированного документа и источника появилась или изменилась.
						
						Если ЗначениеЗаполнено(ИсточникЗаписи) Тогда
							// связь сканированного документа и источника изменилась
							// следует его прописать источник разорванной связи в новой строке, для этого обновим свойства всего источника после записи набора	
							ИсточникДляОбновления =  ИсточникЗаписи;
						КонецЕсли;
						
						// в этой строке сканированного документа источник будет прописан,
						// возможно его нужно убрать из других строк
						НаборЗаписейИсточника = РегистрыСведений.ДокументыПоТребованиюФНС.СоздатьНаборЗаписей();
						НаборЗаписейИсточника.Отбор.Источник.Установить(ИсточникСканированногоДокумента);
						НаборЗаписейИсточника.Отбор.СканированныйДокумент.Установить(Справочники.СканированныеДокументыДляПередачиВЭлектронномВиде.ПустаяСсылка());
						НаборЗаписейИсточника.Отбор.ВидДокументаФНС.Установить(ЗначенияЗаполнения.ВидДокументаФНС);
						НаборЗаписейИсточника.Отбор.НомерСтрокиИсточника.Установить(ЗначенияЗаполнения.НомерСтрокиИсточника);
						НаборЗаписейИсточника.Записать();
					Иначе
						// связь сканированного документа и источника разорвана
						// из этой строки сканированного документа источник будет изъят,
						// следует его прописать в новой строке, для этого обновим свойства всего источника после записи набора
						ИсточникДляОбновления =  ИсточникЗаписи;
					КонецЕсли;
					
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(Запись, ЗначенияЗаполнения);	
				НаборЗаписей.Записать();
				
				Если ЗначениеЗаполнено(ИсточникДляОбновления) Тогда
					ЗаписатьИсточникВРегистрДокументыПоТребованиюФНС(ИсточникДляОбновления);	
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Запись в регистре сведений ДокументыПоТребованиюФНС'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
	КонецПопытки;

КонецПроцедуры

Процедура ОбновитьСвойстваИсточникаВРегистреДокументыПоТребованиюФНС(Источник, МассивЗначенияЗаполнения) 
	
	СоответствиеВидовДокументовФНС = СоответствиеВидовДокументовФНС();
	МассивВладельцевЭД = Новый Массив;
	МассивВладельцевЭД.Добавить(Источник);
	СвойстваВладельцевЭД = Новый Соответствие;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ОпределитьСвойстваВладельцевЭлектронныхДокументов(СвойстваВладельцевЭД, МассивВладельцевЭД);
	
	ВидДокументаФНСЭДСтрока = СвойстваВладельцевЭД[Источник];
	ВидДокументаФНСЭДПеречисление = СоответствиеВидовДокументовФНС[ВидДокументаФНСЭДСтрока];
	
	НачатьТранзакцию();
	
	Попытка
		
		// Записываем данные в регистр
		// 1 фаза: найдем все прежние записи по данному источнику
		НаборЗаписей = РегистрыСведений.ДокументыПоТребованиюФНС.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Источник.Установить(Источник);
		НаборЗаписей.Прочитать();
		МассивУдаляемыхЗаписей = Новый Массив;
		
		Для каждого Запись Из НаборЗаписей Цикл
			//для каждой записи найдем новые свойства по ключевым параметрам записи
			СтруктураСвойств = НайтиСтруктуруСвойствИсточникаПоКлючевымПолям(МассивЗначенияЗаполнения, Запись.ВидДокументаФНС, Запись.НомерСтрокиИсточника);
			Если СтруктураСвойств = Неопределено Тогда
				// новых свойств не найдено, нужно удалять либо всю запись, либо свойства источника из записи
				Если ЗначениеЗаполнено(Запись.СканированныйДокумент) Тогда
					//удаляем свойства источника из записи
					//не требуется, так как перед этим перезаписали сканированные документы по данному источнику, предварительно удалив источник.
				Иначе
					//удаляем всю запись
					МассивУдаляемыхЗаписей.Добавить(Запись);
				КонецЕсли;
			Иначе
				// найдены свойства, обновим их	
				Если ЗначениеЗаполнено(Запись.СканированныйДокумент) Тогда
					//оставляем в регистре реквизиты сканированного документа
				Иначе
					//записываем в регистр реквизиты документа-источника
					СтруктураСвойств.Свойство("Организация", 			Запись.Организация);
					СтруктураСвойств.Свойство("ВидДокументаФНС", 		Запись.ВидДокументаФНС);
					СтруктураСвойств.Свойство("НомерСтрокиИсточника", 	Запись.НомерСтрокиИсточника);
					СтруктураСвойств.Свойство("Направление", 			Запись.Направление);
					СтруктураСвойств.Свойство("Контрагент", 			Запись.Контрагент);
					СтруктураСвойств.Свойство("Дата", 					Запись.ДатаДокумента);
					СтруктураСвойств.Свойство("Номер", 					Запись.НомерДокумента);
					СтруктураСвойств.Свойство("СуммаВсего", 			Запись.СуммаДокумента);
					
					Запись.Источник = Источник;
					
					Запись.ЕстьЭлектронныйДокумент = (ВидДокументаФНСЭДПеречисление = Запись.ВидДокументаФНС);	
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого УдаляемаяЗапись Из МассивУдаляемыхЗаписей Цикл
			НаборЗаписей.Удалить(УдаляемаяЗапись);
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
		// 2 фаза: обойдем все новые свойства
		НаборЗаписей = РегистрыСведений.ДокументыПоТребованиюФНС.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Источник.Установить(Источник);
		
		Для каждого СтруктураСвойств Из МассивЗначенияЗаполнения Цикл
			//если записей с такими ключевыми значениями нету - добавим
			НаборЗаписей.Отбор.ВидДокументаФНС.Установить(СтруктураСвойств.ВидДокументаФНС);
			Если СтруктураСвойств.Свойство("НомерСтрокиИсточника") Тогда
				НаборЗаписей.Отбор.НомерСтрокиИсточника.Установить(СтруктураСвойств.НомерСтрокиИсточника);
			КонецЕсли;
			
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() = 0 Тогда
				Запись = НаборЗаписей.Добавить();
				
				СтруктураСвойств.Свойство("Организация", 			Запись.Организация);
				СтруктураСвойств.Свойство("ВидДокументаФНС", 		Запись.ВидДокументаФНС);
				СтруктураСвойств.Свойство("НомерСтрокиИсточника", 	Запись.НомерСтрокиИсточника);
				СтруктураСвойств.Свойство("Направление", 			Запись.Направление);
				СтруктураСвойств.Свойство("Контрагент", 			Запись.Контрагент);
				СтруктураСвойств.Свойство("Дата", 					Запись.ДатаДокумента);
				СтруктураСвойств.Свойство("Номер", 					Запись.НомерДокумента);
				СтруктураСвойств.Свойство("СуммаВсего", 			Запись.СуммаДокумента);
				
				Запись.Источник = Источник;
				
				Запись.ЕстьЭлектронныйДокумент = (ВидДокументаФНСЭДПеречисление = Запись.ВидДокументаФНС);	
				
				НаборЗаписей.Записать();
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Запись в регистре сведений ДокументыПоТребованиюФНС'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
	КонецПопытки;

КонецПроцедуры

Процедура ОбновитьНаличиеЭДВРегистреДокументыПоТребованиюФНС(ДокументИБ, ВидДокументаФНССтрока) 
	
	НачатьТранзакцию();
	
	Попытка
		
		Если ВидДокументаФНССтрока = Неопределено Тогда
			
			УдалитьНаличиеЭДДокументаИБ(ДокументИБ);
			
		Иначе
			
			МассивСканДокументовДляУдаленияИзЖурнала = Новый Массив;
			
			СоответствиеВидовДокументовФНС = СоответствиеВидовДокументовФНС();
			ВидДокументаФНСПеречисление = СоответствиеВидовДокументовФНС[ВидДокументаФНССтрока];
			Если ВидДокументаФНСПеречисление = Неопределено Тогда
				ВызватьИсключение "Не удалось определить вид документа ФНС";
			КонецЕсли;
			
			// Записываем данные в регистр
			НаборЗаписей = РегистрыСведений.ДокументыПоТребованиюФНС.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ВидДокументаФНС.Установить(ВидДокументаФНСПеречисление);
			НаборЗаписей.Отбор.Источник.Установить(ДокументИБ);
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() = 0 Тогда
				ОтменитьТранзакцию();
				Возврат;
			Иначе
				Для каждого Запись Из НаборЗаписей Цикл
					Запись.ЕстьЭлектронныйДокумент = Истина;
					Если ЗначениеЗаполнено(Запись.СканированныйДокумент) Тогда
						МассивСканДокументовДляУдаленияИзЖурнала.Добавить(Запись.СканированныйДокумент);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			НаборЗаписей.Записать(Истина);	
			
			Если МассивСканДокументовДляУдаленияИзЖурнала.Количество() <> 0 Тогда
				УдалитьИзЖурналаМассивСканДокументов(МассивСканДокументовДляУдаленияИзЖурнала);
			КонецЕсли;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Запись в регистре сведений ДокументыПоТребованиюФНС'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
	КонецПопытки;

КонецПроцедуры

Процедура УдалитьИзЖурналаМассивСканДокументов(МассивСканДокументов)
	
	Для каждого СканДокумент Из МассивСканДокументов Цикл
		НаборЗаписей = РегистрыСведений.ДокументыПоТребованиюФНС.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.СканированныйДокумент.Установить(СканДокумент);
		НаборЗаписей.Прочитать();
		//запись со сканированным документом всего одна
		//проверим, есть ли источник по данной записи
		ИсточникДляОбновления = Неопределено;
		Если НаборЗаписей.Количество() > 0 Тогда
			Запись = НаборЗаписей[0];
			ИсточникДляОбновления = Запись.Источник;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИсточникДляОбновления) Тогда
			//нужно удалить ссылку сканированный документ и заполнить запись данными источника
			//удаление ссылки производится удалением записей и их восстановлением, но уже без ссылки на сканированный документ
			//это требуется для сохранения идентификатора записи
			ВременнаяТаблица = НаборЗаписей.Выгрузить(); 
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать(); 
			СтрокаТаблицы = ВременнаяТаблица[0];
			
			СтрокаТаблицы.СканированныйДокумент = Справочники.СканированныеДокументыДляПередачиВЭлектронномВиде.ПустаяСсылка();
			
			НовыйНаборЗаписей = РегистрыСведений.ДокументыПоТребованиюФНС.СоздатьНаборЗаписей();
			НовыйНаборЗаписей.Отбор.Организация.Установить(СтрокаТаблицы.Организация);
			НовыйНаборЗаписей.Отбор.СканированныйДокумент.Установить(Справочники.СканированныеДокументыДляПередачиВЭлектронномВиде.ПустаяСсылка());
			НовыйНаборЗаписей.Отбор.ВидДокументаФНС.Установить(СтрокаТаблицы.ВидДокументаФНС);
			НовыйНаборЗаписей.Отбор.Источник.Установить(ИсточникДляОбновления);
			НовыйНаборЗаписей.Отбор.НомерСтрокиИсточника.Установить(СтрокаТаблицы.НомерСтрокиИсточника);
			НовыйНаборЗаписей.Загрузить(ВременнаяТаблица);
			НовыйНаборЗаписей.Записать(); 
			
			ЗаписатьИсточникВРегистрДокументыПоТребованиюФНС(ИсточникДляОбновления);

		Иначе
			//нужно просто удалить набор записей
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать(); 
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура УдалитьНаличиеЭДДокументаИБ(ДокументИБ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДокументыПоТребованиюФНС.Организация,
		|	ДокументыПоТребованиюФНС.ВидДокументаФНС,
		|	ДокументыПоТребованиюФНС.СканированныйДокумент,
		|	ДокументыПоТребованиюФНС.Источник,
		|	ДокументыПоТребованиюФНС.НомерСтрокиИсточника
		|ИЗ
		|	РегистрСведений.ДокументыПоТребованиюФНС КАК ДокументыПоТребованиюФНС
		|ГДЕ
		|	ДокументыПоТребованиюФНС.Источник = &Источник
		|	И ДокументыПоТребованиюФНС.ЕстьЭлектронныйДокумент";
	
	Запрос.УстановитьПараметр("Источник", ДокументИБ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.ДокументыПоТребованиюФНС.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.ЕстьЭлектронныйДокумент = Ложь;	
			МенеджерЗаписи.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиСтруктуруСвойствИсточникаПоКлючевымПолям(МассивЗначенияЗаполнения, ВидДокументаФНС, НомерСтрокиИсточника) Экспорт

	Для каждого СтруктураСвойствИсточника Из МассивЗначенияЗаполнения Цикл
		
		СвойствоИсточника_ВидДокументаФНС = СтруктураСвойствИсточника.ВидДокументаФНС;
		//НомерСтрокиИсточника - необязательный реквизит источника, может отсутствовать в структуре свойств источника
		СвойствоИсточника_НомерСтрокиИсточника = ?(СтруктураСвойствИсточника.Свойство("НомерСтрокиИсточника"), СтруктураСвойствИсточника.НомерСтрокиИсточника, 0); 
		
		Если СвойствоИсточника_ВидДокументаФНС = ВидДокументаФНС
		И СвойствоИсточника_НомерСтрокиИсточника = НомерСтрокиИсточника Тогда
			Возврат СтруктураСвойствИсточника;
		КонецЕсли;
		
	КонецЦикла;

	Возврат Неопределено;
	
КонецФункции

Функция СоответствиеВидовДокументовФНС() 
	
	СоответствиеРезультат = Новый Соответствие;
	СоответствиеРезультат.Вставить("СчетФактура", 					Перечисления.ВидыПредставляемыхДокументов.СчетФактура); 
	СоответствиеРезультат.Вставить("КорректировочныйСчетФактура", 	Перечисления.ВидыПредставляемыхДокументов.КорректировочныйСчетФактура); 
	СоответствиеРезультат.Вставить("АктПриемкиСдачиРабот", 			Перечисления.ВидыПредставляемыхДокументов.АктПриемкиСдачиРабот); 
	СоответствиеРезультат.Вставить("ТоварнаяНакладнаяТОРГ12", 		Перечисления.ВидыПредставляемыхДокументов.ТоварнаяНакладнаяТОРГ12); 
	
	Возврат СоответствиеРезультат;	
	
КонецФункции

Функция МассивДоступныхВидовДокументовИсточников() Экспорт
	
	// массив видов документов источников
	МассивВидыДокументов = Новый Массив;
	МассивВидыДокументов.Добавить(Перечисления.ВидыПредставляемыхДокументов.СчетФактура);
	МассивВидыДокументов.Добавить(Перечисления.ВидыПредставляемыхДокументов.КорректировочныйСчетФактура);
	МассивВидыДокументов.Добавить(Перечисления.ВидыПредставляемыхДокументов.ТоварноТранспортнаяНакладная);
	МассивВидыДокументов.Добавить(Перечисления.ВидыПредставляемыхДокументов.АктПриемкиСдачиРабот);
	МассивВидыДокументов.Добавить(Перечисления.ВидыПредставляемыхДокументов.ГрузоваяТаможеннаяДекларация);
	МассивВидыДокументов.Добавить(Перечисления.ВидыПредставляемыхДокументов.ДобавочныйЛистГрузовойТаможеннойДекларации);
	МассивВидыДокументов.Добавить(Перечисления.ВидыПредставляемыхДокументов.ТоварнаяНакладнаяТОРГ12);
	МассивВидыДокументов.Добавить(Перечисления.ВидыПредставляемыхДокументов.Договор); 
	МассивВидыДокументов.Добавить(Перечисления.ВидыПредставляемыхДокументов.ДополнениеКДоговору); 
	МассивВидыДокументов.Добавить(Перечисления.ВидыПредставляемыхДокументов.СпецификацияЦены); 
	
	СоответствиеВидовДокументов = Новый Соответствие;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСерверПереопределяемый.ОпределитьСоответствиеТиповИсточниковВидамДокументовФНС(СоответствиеВидовДокументов);
	
	МассивДоступныхВидов = Новый Массив;
	
	Для каждого элСоответствиеВидовДокументов Из СоответствиеВидовДокументов Цикл
		ВидДокументаФНС = элСоответствиеВидовДокументов.Ключ;
		МассивТиповОдногоВида = элСоответствиеВидовДокументов.Значение;
		Если МассивТиповОдногоВида.Количество() > 0 Тогда
			МассивДоступныхВидов.Добавить(ВидДокументаФНС);	
		КонецЕсли;
	КонецЦикла;

	Возврат МассивДоступныхВидов;
	
КонецФункции 

Функция СправочникКонтрагентовДоступен() Экспорт
	
	СправочникКонтрагенты = Метаданные.Справочники.Найти("Контрагенты");
	Если СправочникКонтрагенты = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

Функция РеквизитыСправочникаКонтрагентовДоступны() Экспорт
	
	СправочникКонтрагенты = Метаданные.Справочники.Найти("Контрагенты");
	Если СправочникКонтрагенты = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СправочникКонтрагенты.Реквизиты.Найти("НаименованиеПолное") = Неопределено 
	ИЛИ СправочникКонтрагенты.Реквизиты.Найти("ЮридическоеФизическоеЛицо") = Неопределено 
	ИЛИ СправочникКонтрагенты.Реквизиты.Найти("ИНН") = Неопределено 
	ИЛИ СправочникКонтрагенты.Реквизиты.Найти("КПП") = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

#КонецОбласти