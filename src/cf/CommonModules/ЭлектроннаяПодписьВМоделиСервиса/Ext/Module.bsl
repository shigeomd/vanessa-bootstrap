////////////////////////////////////////////////////////////////////////////////
// Подсистема "Электронная подпись в модели сервиса".
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура УстановитьПараметрСеансаСеансовыеКлючиЭлектроннойПодписиВМоделиСервиса(ИмяПараметра = Неопределено, УстановленныеПараметры = Неопределено) Экспорт
	
	ПараметрыСеанса.СеансовыеКлючиЭлектроннойПодписиВМоделиСервиса = Новый ФиксированноеСоответствие(Новый Соответствие);
	
КонецПроцедуры

Процедура ПолучитьТаблицуПараметровИБ(ТаблицаПараметров) Экспорт
		
	РаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "ИспользоватьЭлектроннуюПодписьВМоделиСервиса");
	РаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "ИмяПользователяСервисаПодключенияЭлектроннойПодписиВМоделиСервиса");
	РаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "ПарольПользователяСервисаПодключенияЭлектроннойПодписиВМоделиСервиса");
	РаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "АдресСервисаПодключенияЭлектроннойПодписиВМоделиСервиса");
	РаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "АдресКриптосервиса");
	
КонецПроцедуры

// Заполняет структуру массивами поддерживаемых версий всех подлежащих версионированию программных интерфейсов,
// используя в качестве ключей имена программных интерфейсов.
// Обеспечивает функциональность Web-сервиса InterfaceVersion.
// При внедрении надо поменять тело процедуры так, чтобы она возвращала актуальные наборы версий (см. пример.ниже).
//
// Параметры:
// СтруктураПоддерживаемыхВерсий - Структура:
//  Ключ - Имя программного интерфейса,
//  Значение - Массив(Строка) - поддерживаемые версии программного интерфейса.
//
// Пример реализации:
//
//  // СервисПередачиФайлов
//  МассивВерсий = Новый Массив;
//  МассивВерсий.Добавить("1.0.1.1");
//  МассивВерсий.Добавить("1.0.2.1"); 
//  СтруктураПоддерживаемыхВерсий.Вставить("СервисПередачиФайлов", МассивВерсий);
//  // Конец СервисПередачиФайлов
//
Процедура ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов(СтруктураПоддерживаемыхВерсий) Экспорт
	
	МассивВерсий = Новый Массив;
	МассивВерсий.Добавить("1.0.1.1");
	СтруктураПоддерживаемыхВерсий.Вставить("ЭлектроннаяПодписьВМоделиСервиса", МассивВерсий);	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//

Функция АдресWSDL(URI) Экспорт
	
	Адрес = СокрЛП(URI);
	Если Найти(НРег(Адрес), "?wsdl") = СтрДлина(Адрес) - 4 Тогда
		Возврат Адрес;
	Иначе
		Возврат Адрес + "?wsdl";		
	КонецЕсли;
	
КонецФункции

Функция ПодробноеПредставлениеИнформацияОбОшибке(ИнформацияОбОшибке) Экспорт
	
	Шаблон = "{%1(%2)}:%3
			|%4
			|%5";
			
	ПредставлениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							Шаблон, ИнформацияОбОшибке.ИмяМодуля, ИнформацияОбОшибке.НомерСтроки,
							ИнформацияОбОшибке.Описание, ИнформацияОбОшибке.ИсходнаяСтрока,
							СокрЛП(ПричинаОшибки(ИнформацияОбОшибке.Причина)));
							
	Возврат ПредставлениеОшибки;							

КонецФункции

Функция КраткоеПредставлениеИнформацияОбОшибке(ИнформацияОбОшибке) Экспорт
	
	Возврат ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке).Описание;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
//

Процедура ПолучитьДействующиеКлючи(СтруктураПараметров, АдресХранилища) Экспорт 
	
	ТаблицаКлючей = МодульУчетаЗаявленийАбонентаВМоделиСервиса.ПолучитьДействующиеКлючи(
		СтруктураПараметров.ИНН, СтруктураПараметров.КПП, СтруктураПараметров.ОбластьДанных);
		
	ПоместитьВоВременноеХранилище(ТаблицаКлючей, АдресХранилища);	
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ


Функция ПричинаОшибки(ИнформацияОбОшибке)
	
	Результат = "";
	Если ИнформацияОбОшибке <> Неопределено Тогда
		Результат = "по причине:" + Символы.ПС + ИнформацияОбОшибке.Описание + Символы.ПС;
		Если ИнформацияОбОшибке.Причина <> Неопределено Тогда
			Результат = Результат + ПричинаОшибки(ИнформацияОбОшибке.Причина);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат; 		
		
КонецФункции

Функция ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке)
	
	Результат = ИнформацияОбОшибке;
	Если ИнформацияОбОшибке <> Неопределено Тогда
		Если ИнформацияОбОшибке.Причина <> Неопределено Тогда
			Результат = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке.Причина);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

