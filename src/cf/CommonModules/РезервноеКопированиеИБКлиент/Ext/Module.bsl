////////////////////////////////////////////////////////////////////////////////
// Подсистема "Резервное копирование ИБ".
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Процедура проверяет необходимость проведения резервного копирования
// или показа пользователю необходимого информационного сообщения.
//
Процедура ПриНачалеРаботыСистемы(Параметры) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент() Или ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРаботы = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиентаПриЗапуске();
	Если ПараметрыРаботы.РазделениеВключено Тогда
		Возврат;
	КонецЕсли;
	
	ФиксированныеПараметрыРезервногоКопированияИБ = Неопределено;
	Если Не ПараметрыРаботы.Свойство("РезервноеКопированиеИБ", ФиксированныеПараметрыРезервногоКопированияИБ) Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(ФиксированныеПараметрыРезервногоКопированияИБ) <> Тип("ФиксированнаяСтруктура") Тогда
		Возврат;
	КонецЕсли;
	
	// Заполнение глобальных переменных.
	ЗаполнитьЗначенияГлобальныхПеременных(ФиксированныеПараметрыРезервногоКопированияИБ);
	
	ПроверитьРезервноеКопированиеИБ(ФиксированныеПараметрыРезервногоКопированияИБ);
	
	Если ФиксированныеПараметрыРезервногоКопированияИБ.ПроведеноВосстановление Тогда
		ТекстОповещения = НСтр("ru = 'Восстановление данных проведено успешно.'");
		ПоказатьОповещениеПользователя(НСтр("ru = 'Данные восстановлены.'"), , ТекстОповещения);
	КонецЕсли;
	
	ВариантОповещения = ФиксированныеПараметрыРезервногоКопированияИБ.ПараметрОповещения;
	
	Если ВариантОповещения = "НеОповещать" Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ТекущиеДела") Тогда
		ПоказыватьПредупреждение = Ложь;
		РезервноеКопированиеИБКлиентПереопределяемый.ПриОпределенииНеобходимостиПоказаПредупрежденийОРезервномКопировании(ПоказыватьПредупреждение);
	Иначе
		ПоказыватьПредупреждение = Истина;
	КонецЕсли;
	
	Если ПоказыватьПредупреждение
		И (ВариантОповещения = "Просрочено" Или ВариантОповещения = "ЕщеНеНастроено") Тогда
		ОповеститьПользователяОРезервномКопировании(ВариантОповещения);
	КонецЕсли;
	
	ПодключитьОбработчикОжиданияРезервногоКопирования();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполнение глобальных переменных.
Процедура ЗаполнитьЗначенияГлобальныхПеременных(ФиксированныеПараметрыРезервногоКопированияИБ) Экспорт
	
	ИмяПараметра = "СтандартныеПодсистемы.ПараметрыРезервногоКопированияИБ";
	ПараметрыПриложения.Вставить(ИмяПараметра, Новый Структура);
	ПараметрыПриложения[ИмяПараметра].Вставить("ПроцессВыполняется");
	ПараметрыПриложения[ИмяПараметра].Вставить("МинимальнаяДатаСледующегоАвтоматическогоРезервногоКопирования");
	ПараметрыПриложения[ИмяПараметра].Вставить("ДатаПоследнегоРезервногоКопирования");
	ПараметрыПриложения[ИмяПараметра].Вставить("ПараметрОповещения");
	
	ЗаполнитьЗначенияСвойств(ПараметрыПриложения[ИмяПараметра], ФиксированныеПараметрыРезервногоКопированияИБ);
	ПараметрыПриложения[ИмяПараметра].Вставить("РасписаниеЗначение", ОбщегоНазначенияКлиентСервер.СтруктураВРасписание(ФиксированныеПараметрыРезервногоКопированияИБ.РасписаниеКопирования));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики служебных событий подсистем БСП.

// Проверяет возможность выполнения резервного копирования в пользовательском режиме.
//
// Параметры:
//  Результат - Булево (возвращаемое значение).
//
Процедура ПриПроверкеВозможностиРезервногоКопированияВПользовательскомРежиме(Результат) Экспорт
	
	Если СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая Тогда
		
		Результат = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при предложении создать резервную копию.
//
Процедура ПриПредложенииПользователюСоздатьРезервнуюКопию() Экспорт
	
	Если СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая Тогда
		
		ОткрытьФормуРезервногоКопирования();
		
	КонецЕсли;
	
КонецПроцедуры

// Доопределяет список предупреждений пользователю перед завершением работы системы.
//
// Параметры:
//  Предупреждения - Массив - в массив можно добавить элементы типа Структура,
//                            свойства которой см. в СтандартныеПодсистемыКлиент.ПредупреждениеПриЗавершениеРаботы.
//
Процедура ПриПолученииСпискаПредупрежденийЗавершенияРаботы(Предупреждения) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента();
	
	Если ПараметрыРаботыКлиента.РазделениеВключено Или Не ПараметрыРаботыКлиента.ИнформационнаяБазаФайловая Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроверитьНаличиеРезервногоКопирования() <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПредупреждения = СтандартныеПодсистемыКлиент.ПредупреждениеПриЗавершениеРаботы();
	ПараметрыПредупреждения.ТекстФлажка = НСтр("ru = 'Выполнить резервное копирование'");
	ПараметрыПредупреждения.Приоритет = 50;
	
	ДействиеПриУстановленномФлажке = ПараметрыПредупреждения.ДействиеПриУстановленномФлажке;
	ДействиеПриУстановленномФлажке.Форма = "Обработка.РезервноеКопированиеИБ.Форма.РезервноеКопированиеДанных";
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("РежимРаботы", "ВыполнитьПриЗавершенииРаботы");
	ДействиеПриУстановленномФлажке.ПараметрыФормы = ПараметрыФормы;
	
	Предупреждения.Добавить(ПараметрыПредупреждения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Экспортные служебные процедуры и функции.

// Возвращает имя формы настроек резервного копирования в зависимости от режима работы.
//
Функция ИмяФормыНастроекРезервногоКопирования() Экспорт
	
	Если СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая Тогда
		
		Возврат "Обработка.НастройкаРезервногоКопированияИБ.Форма.Форма";
		
	Иначе
		
		Возврат "Обработка.НастройкаРезервногоКопированияИБ.Форма.НапоминаниеКлиентСервер";
		
	КонецЕсли;
	
КонецФункции

// Открывает форму для запуска процесса резервного копирования.
// Параметры:
//     Владелец               - Произвольный - Владелец для открываемой формы.
//     ПараметрыОткрытияФормы - Структура - Параметры окна, см ОткрытьФорму().
//
Функция ОткрытьФормуРезервногоКопирования(Знач Владелец = Неопределено, Знач ПараметрыОткрытияФормы = Неопределено) Экспорт
	
	Параметры = Новый Структура("Параметры, Владелец, Уникальность, Окно, НавигационнаяСсылка, ОписаниеОповещенияОЗакрытии, РежимОткрытияОкна");
	Если ПараметрыОткрытияФормы <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Параметры, ПараметрыОткрытияФормы);
	КонецЕсли;
	
	ВладелецФормы = ?(Владелец = Неопределено, Параметры.Владелец, Владелец);
	
	ОткрытьФорму("Обработка.РезервноеКопированиеИБ.Форма.РезервноеКопированиеДанных",
		Параметры.Параметры, ВладелецФормы, 
		Параметры.Уникальность, Параметры.Окно, Параметры.НавигационнаяСсылка, Параметры.ОписаниеОповещенияОЗакрытии, 
		Параметры.РежимОткрытияОкна);
		
КонецФункции

// Проверяет необходимость запуска автоматического резервного копирования
// в процессе работы пользователя, а также повторного оповещения после игнорировании первоначального.
//
Процедура ОбработчикОжиданияЗапуска() Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент() Или ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
		Возврат;
	КонецЕсли;
	
	Если СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая
		И НеобходимостьАвтоматическогоРезервногоКопирования() Тогда
		ПровестиРезервноеКопирование();
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ТекущиеДела") Тогда
		ПоказыватьПредупреждение = Ложь;
		РезервноеКопированиеИБКлиентПереопределяемый.ПриОпределенииНеобходимостиПоказаПредупрежденийОРезервномКопировании(ПоказыватьПредупреждение);
	Иначе
		ПоказыватьПредупреждение = Истина;
	КонецЕсли;
	
	ВариантОповещения = ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыРезервногоКопированияИБ"].ПараметрОповещения;
	Если ПоказыватьПредупреждение
		И (ВариантОповещения = "Просрочено" Или ВариантОповещения = "ЕщеНеНастроено") Тогда
		ОповеститьПользователяОРезервномКопировании(ВариантОповещения);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет необходимость проведения автоматического резервного копирования.
//
// Возвращаемое значение - Булево - Истина, если необходима, Ложь - иначе.
//
Функция НеобходимостьАвтоматическогоРезервногоКопирования() Экспорт
	Перем РасписаниеЗначение;
	
	ПараметрыРезервногоКопированияИБ = ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыРезервногоКопированияИБ"];
	Если ПараметрыРезервногоКопированияИБ = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПараметрыРезервногоКопированияИБ.ПроцессВыполняется
		ИЛИ НЕ ПараметрыРезервногоКопированияИБ.Свойство("МинимальнаяДатаСледующегоАвтоматическогоРезервногоКопирования")
		ИЛИ НЕ ПараметрыРезервногоКопированияИБ.Свойство("РасписаниеЗначение", РасписаниеЗначение)
		ИЛИ НЕ ПараметрыРезервногоКопированияИБ.Свойство("ДатаПоследнегоРезервногоКопирования") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если РасписаниеЗначение = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДатаПроверки = ОбщегоНазначенияКлиент.ДатаСеанса();
	Если ПараметрыРезервногоКопированияИБ.МинимальнаяДатаСледующегоАвтоматическогоРезервногоКопирования = '29990101' Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат РасписаниеЗначение.ТребуетсяВыполнение(ДатаПроверки, ПараметрыРезервногоКопированияИБ.ДатаПоследнегоРезервногоКопирования);
КонецФункции

// Запускает резервное копирование по расписанию.
// 
Процедура ПровестиРезервноеКопирование()
	
	// Затем резервное копирование.
	ДатыСледующегоАвтоматическогоКопирования = РезервноеКопированиеИБВызовСервера.СформироватьДатыСледующегоАвтоматическогоКопирования();
	ЗаполнитьЗначенияСвойств(ПараметрыПриложения["СтандартныеПодсистемы.ПараметрыРезервногоКопированияИБ"],
		ДатыСледующегоАвтоматическогоКопирования);
	
	ПараметрыФормы = Новый Структура("РежимРаботы", "ВыполнитьСейчас");
	ОткрытьФорму("Обработка.РезервноеКопированиеИБ.Форма.РезервноеКопированиеДанных", ПараметрыФормы);
	
КонецПроцедуры

// Удаляет резервные копии по заданным настройкам.
//
Процедура УдалитьРезервныеКопииПоНастройке() Экспорт
	
	// Очистка архива с копиями.
	ФиксированныеПараметрыРезервногоКопированияИБ = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().РезервноеКопированиеИБ;
	КаталогХранения = ФиксированныеПараметрыРезервногоКопированияИБ.КаталогХраненияРезервныхКопий;
	ПараметрыУдаления = ФиксированныеПараметрыРезервногоКопированияИБ.ПараметрыУдаления;
	
	Если ПараметрыУдаления.ТипОграничения <> "ХранитьВсе" И КаталогХранения <> Неопределено Тогда
		
		Попытка
			Файл = Новый Файл(КаталогХранения);
			Если НЕ Файл.ЭтоКаталог() Тогда
				Возврат;
			КонецЕсли;
			
			МассивФайлов = НайтиФайлы(КаталогХранения, "backup*.zip", Ложь);
			СписокУдаляемыхФайлов = Новый Массив;
			
			// Удаление резервных копий.
			Если ПараметрыУдаления.ТипОграничения = "ПоПериоду" Тогда
				Для Каждого ЭлементФайл Из МассивФайлов Цикл
					ТекущаяДата = ОбщегоНазначенияКлиент.ДатаСеанса();
					ЗначениеВСекундах = КоличествоСекундВПериоде(ПараметрыУдаления.ЗначениеВЕдиницахИзмерения, ПараметрыУдаления.ЕдиницаИзмеренияПериода);
					ПроизводитьУдаление = ((ТекущаяДата - ЗначениеВСекундах) > ЭлементФайл.ПолучитьВремяИзменения());
					Если ПроизводитьУдаление Тогда
						СписокУдаляемыхФайлов.Добавить(ЭлементФайл);
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли МассивФайлов.Количество() >= ПараметрыУдаления.КоличествоКопий Тогда
				СписокФайлов = Новый СписокЗначений;
				СписокФайлов.ЗагрузитьЗначения(МассивФайлов);
				
				Для Каждого Файл Из СписокФайлов Цикл
					Файл.Значение = Файл.Значение.ПолучитьВремяИзменения();
				КонецЦикла;
				
				СписокФайлов.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
				ДатаПоследнегоАрхива = СписокФайлов[ПараметрыУдаления.КоличествоКопий-1].Значение;
				
				Для Каждого ЭлементФайл Из МассивФайлов Цикл
					
					Если ЭлементФайл.ПолучитьВремяИзменения() <= ДатаПоследнегоАрхива Тогда
						СписокУдаляемыхФайлов.Добавить(ЭлементФайл);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Для Каждого УдаляемыйФайл Из СписокУдаляемыхФайлов Цикл
				УдалитьФайлы(УдаляемыйФайл.ПолноеИмя);
			КонецЦикла;
			
		Исключение
			
			ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(СобытиеЖурналаРегистрации(), "Ошибка",
				НСтр("ru = 'Не удалось провести очистку каталога с резервными копиями.'") + Символы.ПС 
				+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),,Истина);
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

// При старте системы проверяет, первый ли это запуск после проведения резервного копирования. 
// Если да - выводит форму обработчика с результатами резервного копирования.
//
// Параметры:
//	Параметры - Структура - параметры резервного копирования.
//
Процедура ПроверитьРезервноеКопированиеИБ(Параметры)
	
	Если Не Параметры.ПроведеноКопирование Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.РучнойЗапускПоследнегоРезервногоКопирования Тогда
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("РежимРаботы", ?(Параметры.РезультатКопирования, "УспешноВыполнено", "НеВыполнено"));
		ПараметрыФормы.Вставить("ИмяФайлаРезервнойКопии", Параметры.ИмяФайлаРезервнойКопии);
		ОткрытьФорму("Обработка.РезервноеКопированиеИБ.Форма.РезервноеКопированиеДанных", ПараметрыФормы);
		
	Иначе
		
		ПоказатьОповещениеПользователя(НСтр("ru = 'Резервное копирование'"),
			"e1cib/command/ОбщаяКоманда.ПоказатьРезультатРезервногоКопирования",
			НСтр("ru = 'Резервное копирование проведено успешно'"), БиблиотекаКартинок.Информация32);
		РезервноеКопированиеИБВызовСервера.УстановитьЗначениеНастройки("ПроведеноКопирование", Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

// По результатам анализа параметров резервного копирования выдает соответствующее оповещение.
//
// Параметры: 
//   ВариантОповещения - Строка - результат проверки на посылку оповещения.
//
Процедура ОповеститьПользователяОРезервномКопировании(ВариантОповещения) Экспорт
	
	ТекстПояснения = "";
	Если ВариантОповещения = "Просрочено" Тогда
		
		ТекстПояснения = НСтр("ru = 'Автоматическое резервное копирование не было выполнено.'"); 
		ПоказатьОповещениеПользователя(НСтр("ru = 'Резервное копирование'"),
			"e1cib/app/Обработка.РезервноеКопированиеИБ", ТекстПояснения, БиблиотекаКартинок.Предупреждение32);
		
	ИначеЕсли ВариантОповещения = "ЕщеНеНастроено" Тогда
		
		ИмяФормыНастроек = "e1cib/app/%1";
		ИмяФормыНастроек = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ИмяФормыНастроек, ИмяФормыНастроекРезервногоКопирования());
			
		ТекстПояснения = НСтр("ru = 'Рекомендуется настроить резервное копирование информационной базы.'"); 
		ПоказатьОповещениеПользователя(НСтр("ru = 'Резервное копирование'"),
			ИмяФормыНастроек, ТекстПояснения, БиблиотекаКартинок.Предупреждение32);
			
	КонецЕсли;
	
	ТекущаяДата = ОбщегоНазначенияКлиент.ДатаСеанса();
	РезервноеКопированиеИБВызовСервера.УстановитьДатуПоследнегоНапоминания(ТекущаяДата);
	
КонецПроцедуры

// Получает каталог файла по его имени.
//
// Параметры: ПутьКФайлу - Строка, путь к указанному файлу.
//
// Возвращаемое значение: Строка, путь к каталогу с указанным файлом.
//
Функция ПолучитьКаталогФайла(Знач ПутьКФайлу) Экспорт
	ПозицияСимвола = ПолучитьНомерПоследнегоСимвола(ПутьКФайлу, "\"); 
	Если ПозицияСимвола > 1 Тогда
		Возврат Сред(ПутьКФайлу, 1, ПозицияСимвола - 1); 
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

// Возвращает тип события журнала регистрации для данной подсистемы.
//
// Возвращаемое значение - Строка - тип события журнала регистрации.
//
Функция СобытиеЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru = 'Резервное копирование информационной базы'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

// Возвращает параметры скрипта резервного копирования.
//
// Возвращаемое значение - Структура - структура скрипта резервного копирования.
//
Функция КлиентскиеПараметрыРезервногоКопирования() Экспорт
	#Если НЕ ВебКлиент Тогда
		
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("ДатаВремяОбновленияУстановлена", Ложь);
		СтруктураПараметров.Вставить("ИмяФайлаПрограммы", СтандартныеПодсистемыКлиент.ИмяИсполняемогоФайлаПриложения());
		СтруктураПараметров.Вставить("СобытиеЖурналаРегистрации", НСтр("ru = 'Резервное копирование ИБ'"));
		
		// Определение каталога временных файлов.
		ТекущаяДата = ОбщегоНазначенияКлиент.ДатаСеанса();
		СтруктураПараметров.Вставить("КаталогВременныхФайловОбновления"	, КаталогВременныхФайлов() + "1Cv8Backup." + Формат(ТекущаяДата, "ДФ=ггММддЧЧммсс") + "\");
		
		Возврат СтруктураПараметров;
	#КонецЕсли
КонецФункции

// Возвращает инофрмацию о параметрах аутентификации.
//
Функция ПараметрыАутентификацииАдминистратораОбновления(ПарольАдминистратора) Экспорт
	
	Результат = Новый Структура("ИмяПользователя,
	|ПарольПользователя,
	|СтрокаПодключения,
	|ПараметрыАутентификации,
	|СтрокаСоединенияИнформационнойБазы",
	Неопределено, "", "", "", "", "");
	
	ТекущиеСоединения = СоединенияИБВызовСервера.ИнформацияОСоединениях(Истина, ПараметрыПриложения["СтандартныеПодсистемы.СообщенияДляЖурналаРегистрации"]);
	Результат.СтрокаСоединенияИнформационнойБазы = ТекущиеСоединения.СтрокаСоединенияИнформационнойБазы;
	// Диагностика случая, когда ролевой безопасности в системе не предусмотрено.
	// Т.е. ситуация, когда любой пользователь «может» в системе все.
	Если НЕ ТекущиеСоединения.ЕстьАктивныеПользователи Тогда
		Возврат Результат;
	КонецЕсли;
	
	Пользователь = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформацияОПользователе.Имя;
	
	Результат.ИмяПользователя			= Пользователь;
	Результат.ПарольПользователя		= ПарольАдминистратора;
	Результат.СтрокаПодключения			= "Usr=""" + Пользователь + """;Pwd=""" + ПарольАдминистратора + """;";
	Результат.ПараметрыАутентификации	= "/N""" + Пользователь + """ /P""" + ПарольАдминистратора + """ /WA-";
	Возврат Результат;
	
КонецФункции

// Проверят возможность подключения к информационной базе.
//
Функция ПроверитьДоступКИнформационнойБазе(ПарольАдминистратора) Экспорт
	
	// В базовых версиях проверку подключения не осуществляем;
	// при некорректном вводе имени и пароля обновление завершится неуспешно.
	Если СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ЭтоБазоваяВерсияКонфигурации Тогда
		Возврат Истина;
	КонецЕсли;
	
	ОбщегоНазначенияКлиент.ЗарегистрироватьCOMСоединитель(Ложь);
	
	ПараметрыПодключения = ОбщегоНазначенияКлиентСервер.СтруктураПараметровДляУстановкиВнешнегоСоединения();
	ПараметрыПодключения.КаталогИнформационнойБазы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаСоединенияИнформационнойБазы(), """")[1];
	ПараметрыПодключения.ИмяПользователя = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформацияОПользователе.Имя;
	ПараметрыПодключения.ПарольПользователя = ПарольАдминистратора;
	
	Результат = ОбщегоНазначенияКлиентСервер.УстановитьВнешнееСоединениеСБазой(ПараметрыПодключения);
	
	Если Результат.ОшибкаПодключенияКомпоненты Тогда
		
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(
			СобытиеЖурналаРегистрации(),"Ошибка", Результат.ПодробноеОписаниеОшибки, , Истина);
		
	КонецЕсли;
	
	Возврат Не Результат.ОшибкаПодключенияКомпоненты;
	
КонецФункции

// Подключение глобального обработчика ожидания.
//
Процедура ПодключитьОбработчикОжиданияРезервногоКопирования() Экспорт
	
	ПодключитьОбработчикОжидания("ОбработчикДействийРезервногоКопирования", 60);
	
КонецПроцедуры

// Отключение глобального обработчика ожидания.
//
Процедура ОтключитьОбработчикОжиданияРезервногоКопирования() Экспорт
	
	ОтключитьОбработчикОжидания("ОбработчикДействийРезервногоКопирования");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Локальные служебные процедуры и функции.

// Функция проверяет настройки резервного копирования.
//
// Возвращаемое значение:
//	Неопределено - если резервное копирование не запланировано,
//	Дата         - если запланировано резервное копирование на определенную дату,
//	Булево       - если резервное копирование запланировано сразу при завершении работы.
//
Функция ПроверитьНаличиеРезервногоКопирования() 
#Если ВебКлиент Тогда
	Возврат Неопределено;
#КонецЕсли

	Параметры = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиентаПриЗавершении();
	Если Не Параметры.РезервноеКопированиеИБ.ДоступностьРолейОповещения Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Параметры.РезервноеКопированиеИБ.ВыполнятьПриЗавершенииРаботы;
	
КонецФункции

// Возвращает позицию последнего передаваемого символа.
//
// Параметры:
//	ИсходнаяСтрока - Строка - строка, в которой осуществляется поиск.
//	СимволПоиска - Строка - символ поиска.
//	
// Возвращаемое значение - Число - позиция символа.
//
Функция ПолучитьНомерПоследнегоСимвола(Знач ИсходнаяСтрока, Знач СимволПоиска)
	ПозицияСимвола = СтрДлина(ИсходнаяСтрока);
	Пока ПозицияСимвола >= 1 Цикл
		
		Если Сред(ИсходнаяСтрока, ПозицияСимвола, 1) = СимволПоиска Тогда
			Возврат ПозицияСимвола; 
		КонецЕсли;
		
		ПозицияСимвола = ПозицияСимвола - 1;	
	КонецЦикла;
	Возврат 0;
КонецФункции

Функция КоличествоСекундВПериоде(Период, ТипПериода)
	
	Если ТипПериода = "День" Тогда
		Множитель = 3600 * 24;
	ИначеЕсли ТипПериода = "Неделя" Тогда
		Множитель = 3600 * 24 * 7; 
	ИначеЕсли ТипПериода = "Месяц" Тогда
		Множитель = 3600 * 24 * 30;
	ИначеЕсли ТипПериода = "Год" Тогда
		Множитель = 3600 * 24 * 365;
	КонецЕсли;
	
	Возврат Множитель * Период;
	
КонецФункции

#КонецОбласти
