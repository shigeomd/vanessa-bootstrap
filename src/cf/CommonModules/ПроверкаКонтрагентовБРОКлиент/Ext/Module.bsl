////////////////////////////////////////////////////////////////////////////////
// Проверка контрагентов в Декларации по НДС
//  
////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс

Процедура ПриОткрытииДекларацияПоНДС(Форма) Экспорт
	
	Если НЕ СтандартноеДействиеПриОткрытииОтчета(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Форма.РеквизитыПроверкиКонтрагентов.ПроверкаИспользуется Тогда
		Форма.ПодключитьОбработчикОжидания("Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьКонтрагентовВОтчетеКоманда(Форма) Экспорт
	
	Если Форма.РеквизитыПроверкиКонтрагентов.ПроверкаИспользуется Тогда
		ЗапуститьПроверкуКонтрагентовВДекларации(Форма);
	Иначе
		ПоказатьПредложениеВключитьПроверкуКонтрагентовВКоманде(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьПредложениеВключитьПроверкуКонтрагентовПриОткрытии(Форма) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ЭтоЗапускПроверкиПриОткрытии", Истина);
	
	ПоказатьПредложениеВключитьПроверкуКонтрагентов(Форма, ДополнительныеПараметры);
		
КонецПроцедуры

Процедура ПоказатьПредложениеВключитьПроверкуКонтрагентовПередЗаполнением(Форма) Экспорт
	
	Если НЕ СтандартноеДействиеПередЗаполнениемОтчета(Форма) Тогда
		ВыполнитьЗаполнениеОтчета = Истина;
	Иначе
		Если Форма.РеквизитыПроверкиКонтрагентов.ПроверкаИспользуется Тогда
			ВыполнитьЗаполнениеОтчета = Истина;
		Иначе
			ВыполнитьЗаполнениеОтчета = Ложь;
			
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("ЭтоЗапускПроверкиПослеЗаполнения", Истина);
				
			ПоказатьПредложениеВключитьПроверкуКонтрагентов(Форма, ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
	
	Если ВыполнитьЗаполнениеОтчета Тогда
		
		// Продолжаем заполнение декларации
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗаполнитьАвтоПослеПредложенияПроверитьКонтрагентов", 
			Форма);
			
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеВключенияПроверкиКонтрагентов(Форма, ПроверкаВключена, ВходящийКонтекст) Экспорт
	
	ПроверкаИспользуется = ПроверкаВключена = Истина;
	Форма.РеквизитыПроверкиКонтрагентов.ПроверкаИспользуется = ПроверкаИспользуется;
	
	Если ВходящийКонтекст.Свойство("ЭтоЗапускПроверкиКомандой") Тогда
		
		// Запускаем проверку контрагентов
		Если ПроверкаИспользуется Тогда
			ЗапуститьПроверкуКонтрагентовВДекларации(Форма);
		КонецЕсли;
		
	ИначеЕсли ВходящийКонтекст.Свойство("ЭтоЗапускПроверкиПослеЗаполнения") Тогда
		 
		// Запускаем заполнение отчета 
		ВыполняемоеОповещение = ОписаниеОповещенияЗаполненияОтчета(Форма);
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗапуститьПроверкуКонтрагентовВДекларации(Форма) Экспорт
	
	Форма.РеквизитыПроверкиКонтрагентов.ПроверкаВыполнялась = Ложь;
	Если Форма.РеквизитыПроверкиКонтрагентов.ПроверкаИспользуется Тогда
		СохранитьОтчетПередПроверкой(Форма);
	Иначе
		ПроверкаКонтрагентовБРОКлиентСервер.ВывестиНужнуюПанельПроверкиКонтрагентовВОтчете(Форма);
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗапуститьПроверкуКонтрагентовПослеСохранения(Форма) Экспорт
	
	Если Форма.РеквизитыПроверкиКонтрагентов.ЕстьДоступКВебСервисуФНС Тогда
		
		// Показываем "бублик" длительной операции
		ПроверкаКонтрагентовБРОКлиентСервер.УстановитьВидПанелиПроверкиКонтрагентовВОтчете(Форма, "ПроверкаВПроцессеВыполнения");

		Форма.ПроверитьКонтрагентовВДекларации();
		
		// Инициализируем параметры фонового задания
		Если ЗначениеЗаполнено(Форма.РеквизитыПроверкиКонтрагентов.ИдентификаторЗадания) Тогда
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(Форма.ПроверкаКонтрагентовПараметрыОбработчикаОжидания);
		КонецЕсли;
		
		Форма.ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиКонтрагентов", 1, Истина);
		
	Иначе
		ПроверкаКонтрагентовБРОКлиентСервер.ВывестиНужнуюПанельПроверкиКонтрагентовВОтчете(Форма);
	КонецЕсли;
		
КонецПроцедуры

Процедура ОбработатьРезультатПроверкиКонтрагентовВДекларации(Форма) Экспорт
	 
	Попытка

		ИдентификаторЗадания = Форма.РеквизитыПроверкиКонтрагентов.ИдентификаторЗадания;
	
		Если ИдентификаторЗадания = Неопределено
			ИЛИ ПроверкаКонтрагентовБРОВызовСервера.ЗаданиеВыполнено(Форма.РеквизитыПроверкиКонтрагентов.ИдентификаторЗадания) Тогда
			
			Форма.ОтобразитьРезультатПроверкиКонтрагентаВДекларации();
			Форма.РеквизитыПроверкиКонтрагентов.ИдентификаторЗадания = Неопределено;
			
		Иначе
			
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(Форма.ПроверкаКонтрагентовПараметрыОбработчикаОжидания);
			Форма.ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиКонтрагентов",
				Форма.ПроверкаКонтрагентовПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
				
		КонецЕсли;
			
	Исключение
		ВызватьИсключение;
	КонецПопытки;
		
КонецПроцедуры

Процедура ПереключитьРежимОтображенияОтчета(Форма) Экспорт
	
	ИдентификаторПервогоРазделаСОшибками = Форма.НовыйИдентификаторТекущегоРаздела();

	Если ИдентификаторПервогоРазделаСОшибками = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.Элементы.РазделыОтчета.ТекущаяСтрока <> ИдентификаторПервогоРазделаСОшибками Тогда
		Форма.Элементы.РазделыОтчета.ТекущаяСтрока = ИдентификаторПервогоРазделаСОшибками;
	КонецЕсли;
	
	Форма.РазделыОтчетаПриАктивизацииСтроки(Форма.Элементы.РазделыОтчета);
	
КонецПроцедуры

Функция ПропуститьПроверкуТекущихДанных(Форма) Экспорт
	
	ПропуститьПроверку = Ложь;
	
	Если Форма.РеквизитыПроверкиКонтрагентов.ПроверкаИспользуется Тогда
		Если Форма.Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
			// Алгоритм декларации
			ПропуститьПроверку = Ложь;
		Иначе
			Если ПроверкаКонтрагентовБРОКлиентСервер.ЕстьНекорректныеКонтрагентыВДекларации(Форма) Тогда
				// Новый алгоритм
				ПропуститьПроверку = Истина;
			Иначе
				ПропуститьПроверку = Ложь;
			КонецЕсли;
		КонецЕсли;
	Иначе
		// Алгоритм декларации
		ПропуститьПроверку = Ложь; 
	КонецЕсли;
		
	Возврат ПропуститьПроверку;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОбщийМодульПроверкаКонтрагентовБРОКлиентПереопределяемый() Экспорт
	
	Попытка
		Возврат ОбщегоНазначенияКлиент.ОбщийМодуль("ПроверкаКонтрагентовБРОКлиентПереопределяемый");
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция СтандартноеДействиеПриОткрытииОтчета(Форма) Экспорт
	
	// Предлагаем заменить стандартное поведение
	Модуль = ОбщийМодульПроверкаКонтрагентовБРОКлиентПереопределяемый();
	Если Модуль <> Неопределено Тогда
		
		СтандартнаяОбработка = Истина; 
		Модуль.ПриОткрытииДекларацияПоНДС(Форма, СтандартнаяОбработка);
		
		Если НЕ СтандартнаяОбработка Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	// Не позволяем идти дальше, если нет стандартной подсистемы
	Возврат ПроверкаКонтрагентовБРОКлиентСервер.РаботаСКонтрагентамиСуществует();
	
КонецФункции

Функция СтандартноеДействиеПередЗаполнениемОтчета(Форма) Экспорт
	
	// Предлагаем заменить стандартное поведение
	Модуль = ОбщийМодульПроверкаКонтрагентовБРОКлиентПереопределяемый();
	Если Модуль <> Неопределено Тогда
		
		СтандартнаяОбработка = Истина; 
		Модуль.ПоказатьПредложениеВключитьПроверкуКонтрагентовПередЗаполнением(Форма, СтандартнаяОбработка);
		
		Если НЕ СтандартнаяОбработка Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПроверкаКонтрагентовБРОКлиентСервер.РаботаСКонтрагентамиСуществует();
	
КонецФункции

Процедура ПоказатьПредложениеВключитьПроверкуКонтрагентовВКоманде(Форма)
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ЭтоЗапускПроверкиКомандой", Истина);
			
	ПоказатьПредложениеВключитьПроверкуКонтрагентов(Форма, ДополнительныеПараметры);

КонецПроцедуры

Процедура ПоказатьПредложениеВключитьПроверкуКонтрагентов(Форма, ДополнительныеПараметры)
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(
		"ПослеВключенияПроверкиКонтрагентов",
		Форма,
		ДополнительныеПараметры);
		
	Если ПроверкаКонтрагентовБРОВызовСервера.НужноПоказатьПредложениеВключитьПроверку(ДополнительныеПараметры) Тогда
		
		ОткрытьФорму("ОбщаяФорма.ВключениеПроверкиКонтрагентовБРО", ДополнительныеПараметры, Форма,,,,ОписаниеОповещенияОЗакрытии);
		
	Иначе
		
		Если ДополнительныеПараметры.Свойство("ЭтоЗапускПроверкиПослеЗаполнения") Тогда
		 
			// Запускаем заполнение отчета 
			ВыполняемоеОповещение = ОписаниеОповещенияЗаполненияОтчета(Форма);
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОписаниеОповещенияЗаполненияОтчета(Форма)
	
	ВыполняемоеОповещение = Новый ОписаниеОповещения(
		"ЗаполнитьАвтоПослеПредложенияПроверитьКонтрагентов", 
		Форма);
		
	Возврат ВыполняемоеОповещение;
	
КонецФункции

Процедура СохранитьОтчетПередПроверкой(Форма)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗапуститьПроверкуКонтрагентовПослеСохранения", Форма);

	Если Форма.Модифицированность Тогда
		Форма.СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ЗапуститьПроверкуКонтрагентовПослеСохранения(Форма);
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти
