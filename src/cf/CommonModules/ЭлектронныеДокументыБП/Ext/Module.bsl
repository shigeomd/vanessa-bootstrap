
////////////////////////////////////////////////////////////////////
// ЗАГРУЗКА ДАННЫХ ИЗ ФАЙЛОВ XLSX, MXL

Процедура ПолучитьДанныеВФорматеБЭД(ПараметрыВызоваСервера, АдресХранилища) Экспорт
		
	ИмяВременногоФайла = ПараметрыВызоваСервера.ИмяВременногоФайла;	
	Результат = Новый Структура;
	ДанныеФайла = ЗагрузитьФайлВТаблицу(ИмяВременногоФайла, ПараметрыВызоваСервера.Расширение);
	ДанныеДокумента = ПолучитьДанныеДокумента(ДанныеФайла.Лист1);						
	Если ДанныеДокумента.Свойство("ТекстОшибки") Тогда
		
		Результат.Вставить("ТекстОшибки", ДанныеДокумента.ТекстОшибки);
		
	Иначе
		
		Если ДанныеДокумента.Свойство("НомерСчФ") Тогда
		
			Результат.Вставить("НомерСчФ", ДанныеДокумента.НомерСчФ);
			Результат.Вставить("ДатаСчФ", ДанныеДокумента.ДатаСчФ);
		
		КонецЕсли;			
		ФайлЭД = ЗаписатьДанныеВXML(ДанныеДокумента);
		Если ФайлЭД = Неопределено Тогда
			
			Результат.Вставить("ТекстОшибки", НСтр("ru = 'Не удалось получить данные из файла. Подробности см. в журнале регистрации.'"));
			
		Иначе
			
			ДвоичныеДанные = Новый ДвоичныеДанные(ФайлЭД);
			Результат.Вставить("ДвоичныеДанные", ДвоичныеДанные);		
			Результат.Вставить("ВидДокумента", ДанныеДокумента.ВидДокумента);		
			УдалитьФайлы(ФайлЭД);
			
		КонецЕсли;
		
	КонецЕсли;	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);	
	УдалитьФайлы(ИмяВременногоФайла);
	
КонецПроцедуры

// Формирует пакеты электронных документов для быстрого обмена.
//
// Параметры:
//  СериализуемыеОбъекты - Массив - ссылки на сериализуемые документы.
//
// Возвращаемое значение:
//  Массив - пакеты электронных документов.
//
Функция СериализоватьОбъекты(СериализуемыеОбъекты) Экспорт
	
	// объекты всегда будут одного типа
	ТипСериализуемыхОбъектов = ТипЗнч(СериализуемыеОбъекты[0]);
	
	Если ТипСериализуемыхОбъектов = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ВидЭД = Перечисления.ВидыЭД.ТОРГ12;
		ПакетыЭД = Документы.РеализацияТоваровУслуг.СформироватьРеализациюТоваровИУслугВXML(СериализуемыеОбъекты);
	КонецЕсли;
	
	Если ТипСериализуемыхОбъектов = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		
		ВидЭД = Перечисления.ВидыЭД.СчетНаОплату;
		Попытка
			
			ПакетыЭД = Документы.СчетНаОплатуПокупателю.СформироватьСчетаНаОплатуПокупателюВXML(СериализуемыеОбъекты);
			
		Исключение
			
			ИмяСобытия = НСтр("ru = 'Отправка документов по электронной почте'");
			ТекстОшибки = НСтр("ru = 'Произошли ошибки при формировании электронного документа. Электронный документ для счета на оплату не создан'");
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.СчетНаОплатуПокупателю,, ТекстОшибки);
			
		КонецПопытки;
		
	КонецЕсли;
	
	Если ТипСериализуемыхОбъектов = Тип("СправочникСсылка.Организации") Тогда
		ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД;
		ПакетыЭД = Справочники.Организации.СформироватьКарточкиОрганизацииВXML(СериализуемыеОбъекты);
	КонецЕсли;
	
	Возврат ПакетыЭД;
	
КонецФункции

#Область ЧтениеФайловXLSX

Процедура ЗагрузитьВТаблицуXLSX(ПутьКФайлу, РезультатВыполнения)
		
	Файл = Новый Файл(ПутьКФайлу);
	Если НЕ Файл.Существует() Тогда
		
		Возврат;
		
	КонецЕсли;     	
	
	РазделительПути = ПолучитьРазделительПути();
	ВременныйКаталог = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор()) + РазделительПути;
	УдалитьФайлы(ВременныйКаталог, "*");
	РаспаковатьФайл(ПутьКФайлу, ВременныйКаталог);
	
	// workbook.xml - файл с описанием листов 
	ФайлРабочаяКнига = ВременныйКаталог + "xl" + РазделительПути +"workbook.xml";
	КоличествоЛистов = КоличествоЛистов(ФайлРабочаяКнига);	
	Если КоличествоЛистов = Неопределено Тогда
		
		РезультатВыполнения.ЕстьОшибки = Истина;
		Возврат;
		
	ИначеЕсли КоличествоЛистов = 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Количество листов в файле Excel равно 0'"));
		
	КонецЕсли;
	РезультатВыполнения.Вставить("КоличествоЛистов", КоличествоЛистов);
	
	// sharedStrings.xml - файл со строковыми данными
	ФайлСтрок = ВременныйКаталог + "xl" + РазделительПути +"sharedStrings.xml";
	СписокСтрок = СписокСтрок(ФайлСтрок);
	
	// Получаем форматы данных из файла styles.xml
	ФайлФорматов = ВременныйКаталог + "xl" + РазделительПути +"styles.xml";
	СписокФорматов = ПолучитьСписокФорматов(ФайлФорматов);

	// Обрабатываем каждый лист документа Excel2007 отдельно
	Для НомерЛиста = 1 По КоличествоЛистов Цикл
		
		ИмяФайлаЛиста = "sheet" + НомерЛиста + ".xml";
		ФайлЛиста = ВременныйКаталог + "xl" + РазделительПути + "worksheets" + РазделительПути + ИмяФайлаЛиста;
		Файл = Новый Файл(ФайлЛиста);
		Если НЕ Файл.Существует() Тогда
			
			РезультатВыполнения.ЕстьОшибки = Истина;
			ТекстОшибки = НСтр("ru = 'Загрузка товаров из Excel. Ошибка при чтении файла %1'");
			СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстОшибки, "sheet" + НомерЛиста);
			ЗаписьЖурналаРегистрации(ТекстОшибки, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Возврат;
			
		КонецЕсли;	    				
		ТаблицаДанных = Новый ТаблицаЗначений;				
		ЗаполнитьТаблицуДанных(ФайлЛиста, ИмяФайлаЛиста, СписокСтрок, СписокФорматов, ТаблицаДанных);	
		РезультатВыполнения.Вставить("Лист" + НомерЛиста, Таблицаданных);
		
	КонецЦикла;
	
	УдалитьФайлы(ПутьКФайлу);
	УдалитьФайлы(ВременныйКаталог);	

КонецПроцедуры

Функция КоличествоЛистов(ФайлРабочаяКнига)
			
	ЧтениеХМЛ = Новый ЧтениеXML;	
	Попытка
		
		ЧтениеХМЛ.ОткрытьФайл(ФайлРабочаяКнига);
		
	Исключение
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка товаров из Excel. Ошибка при чтении файла workbook.xml'"),
				УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));		
		Возврат Неопределено;
		
	КонецПопытки;
	
	ПостроительДом = Новый ПостроительDOM;
	ДокументДом = ПостроительДом.Прочитать(ЧтениеХМЛ);
	Листы = ДокументДом.ПолучитьЭлементыПоИмени("sheets");	
	
	// В узле sheets содержатся дочерние узлы sheet. Количество узлов sheet равно количеству листов в документе Excel2007
	КолЛистов = Листы[0].ДочерниеУзлы.Количество();	
	ЧтениеХМЛ.Закрыть();
	
	Возврат КолЛистов;
	
КонецФункции

Функция СписокСтрок(ФайлСтрок)

	ЧтениеХМЛ = Новый ЧтениеXML;
	МассивСтрок = Новый Массив;	
	Попытка
		
		ЧтениеХМЛ.ОткрытьФайл(ФайлСтрок);
		
	Исключение
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка товаров из Excel. Ошибка при чтении файла SharedStrings.xml'"),
				УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));		
		Возврат МассивСтрок;
		
	КонецПопытки;
	
	ПостроительДом = Новый ПостроительDOM;
	ДокументДом = ПостроительДом.Прочитать(ЧтениеХМЛ);
	КореньСтрок = ДокументДом.ПолучитьЭлементыПоИмени("sst");			
	Если КореньСтрок.Количество() > 0 Тогда
		
		Строки = КореньСтрок[0].ДочерниеУзлы;
		Для Каждого СтрокаДанных Из Строки Цикл
			
			МассивСтрок.Добавить(СтрокаДанных.ТекстовоеСодержимое);
			
		КонецЦикла;
		
	КонецЕсли; 	
	ЧтениеХМЛ.Закрыть();
	
	Возврат МассивСтрок;	

КонецФункции // СписокСтрок()

Функция ПолучитьСписокФорматов(ФайлФорматов)
	
	ЧтениеХМЛ = Новый ЧтениеXML;
	ОписаниеФорматов = Новый Соответствие;	
	Попытка
		
		ЧтениеХМЛ.ОткрытьФайл(ФайлФорматов);
		
	Исключение
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка товаров из Excel. Ошибка при чтении файла styles.xml'"),
				УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));		
		Возврат ОписаниеФорматов;
		
	КонецПопытки;
	
	ПостроительДом = Новый ПостроительDOM;
	ДокументДом = ПостроительДом.Прочитать(ЧтениеХМЛ);
	СписокФорматов = ДокументДом.ПолучитьЭлементыПоИмени("xf");	
	Позиция = 0;
	Для Каждого ЭлементСписка Из СписокФорматов Цикл
		
		Атрибут = ЭлементСписка.Атрибуты.ПолучитьИменованныйЭлемент("numFmtId");
		Если Атрибут <> Неопределено Тогда
			ОписаниеФорматов.Вставить(Позиция, "Строка");
			НомерФормата =  Число(Атрибут.Значение);
			Если НомерФормата > 0 И НомерФормата < 12 Тогда
				
				ОписаниеФорматов.Вставить(Позиция, "Число");
				
			ИначеЕсли НомерФормата > 13 И НомерФормата <= 17 Тогда
				
				ОписаниеФорматов.Вставить(Позиция, "Дата");
				
			ИначеЕсли НомерФормата >= 18 И НомерФормата <= 21 Тогда
				
				ОписаниеФорматов.Вставить(Позиция, "Время");
				
			ИначеЕсли НомерФормата = 22 Тогда
				
				ОписаниеФорматов.Вставить(Позиция, "ДатаВремя");
				
			ИначеЕсли НомерФормата >= 164 Тогда	
				
				ОписаниеФорматов.Вставить(Позиция, "Строка");				
				
			КонецЕсли; 			
			
		КонецЕсли;
		Позиция = Позиция + 1;
		
	КонецЦикла; 	
	ЧтениеХМЛ.Закрыть();
	
	Возврат ОписаниеФорматов;
	
КонецФункции

Процедура РаспаковатьФайл(Файл, Каталог)
	
	Архив = Новый ЧтениеZipФайла;
	Архив.Открыть(Файл);
	Архив.ИзвлечьВсе(Каталог, РежимВосстановленияПутейФайловZIP.Восстанавливать);
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуДанных(ФайлЛиста, ИмяФайлаЛиста, СписокСтрок, СписокФорматов, ТаблицаДанных)

	ЧтениеХМЛ = Новый ЧтениеXML;	
	Попытка
		
		ЧтениеХМЛ.ОткрытьФайл(ФайлЛиста);
		
	Исключение
		
		ТекстОшибки = НСтр("ru = 'Загрузка товаров из Excel. Ошибка при чтении файла %1'");
		СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстОшибки, ИмяФайлаЛиста);
		ЗаписьЖурналаРегистрации(ТекстОшибки, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));		
		Возврат;
		
	КонецПопытки;	
	ПостроительДом = Новый ПостроительDOM;
	ДокументДом = ПостроительДом.Прочитать(ЧтениеХМЛ);
	СтрокиФайла = ДокументДом.ПолучитьЭлементыПоИмени("row");	
	
	// Получаем значение диапазона данных и вычисляю количество колонок
	СписокДиапазоновДанных = ДокументДом.ПолучитьЭлементыПоИмени("dimension");	
	МаксИмяКолонки = "";
	Если СписокДиапазоновДанных.Количество() > 0 Тогда
		
		ДиапазонДанных = АтрибутДом(СписокДиапазоновДанных[0], "ref");
		Если ДиапазонДанных <> Неопределено Тогда
			
			Позиция = Найти(ДиапазонДанных, ":");
			МаксИмяКолонки = ?(Позиция = 0, ТолькоЗаглавныеЛатинскиеБуквыБезЦифр(ДиапазонДанных), 
			ТолькоЗаглавныеЛатинскиеБуквыБезЦифр(Сред(ДиапазонДанных, Позиция + 1)));			
			
		КонецЕсли;
		
	КонецЕсли; 	
	// Значение диапазона может быть неверным, поэтому вычисляем количество колонок в первой строке и беру максимальное		
	СоздатьКолонокиТаблицыДанных(ТаблицаДанных, МаксИмяКолонки);
	
	// Получаем значения ячеек и размещаем их в таблице значений	
	КолСпискаСтрок = СписокСтрок.Количество();
	Для Каждого Строка Из СтрокиФайла Цикл
		
		НоваяСтрока = ТаблицаДанных.Добавить();
		КолонкиФайла = Строка.ПолучитьЭлементыПоИмени("c"); // колонки в строке
		Для Каждого Колонка Из КолонкиФайла Цикл
			
			АдресЯчейки = АтрибутДом(Колонка, "r");			
			ФорматЯчейки = АтрибутДом(Колонка, "s");			
			ТипЯчейки = АтрибутДом(Колонка, "t");
			СписокДом = Колонка.ПолучитьЭлементыПоИмени("v");
			ЗначениеЯчейки = Неопределено;
			Если СписокДом.Количество() > 0 Тогда
				
				ЗначениеЯчейки = СписокДом[0].ТекстовоеСодержимое;	
				
			КонецЕсли;	
			
			ЯчейкаСодержитТекст = Ложь;			
			Если ТипЯчейки <> Неопределено И НРег(ТипЯчейки) = "s" И ЗначениеЯчейки <> Неопределено Тогда
				
				ЯчейкаСодержитТекст = Истина;
				ПозицияДанных = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЗначениеЯчейки);
				Если ПозицияДанных < КолСпискаСтрок Тогда
					
					ЗначениеЯчейки = СписокСтрок[ПозицияДанных];
					
				КонецЕсли;
				
			КонецЕсли;		
			
			Если ЗначениеЯчейки <> Неопределено Тогда
				
				Если ФорматЯчейки <> Неопределено Тогда
					
					ИмяФормата = СписокФорматов.Получить(СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ФорматЯчейки));
					Если ИмяФормата = "Дата" ИЛИ ИмяФормата = "ДатаВремя" ИЛИ ИмяФормата = "Время" Тогда
						
						Если ЗначениеЗаполнено(ЗначениеЯчейки) И НЕ ЯчейкаСодержитТекст Тогда
							
							ПозицияРазделителя = Найти(ЗначениеЯчейки, ".");
							Если ПозицияРазделителя > 0 Тогда 
								
								КоличествоДней = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Лев(ЗначениеЯчейки, ПозицияРазделителя - 1)) * 86400 - 2 * 86400;
								КоличествоСекунд = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Сред(ЗначениеЯчейки, ПозицияРазделителя + 1)) - 2 * 60;
								
							Иначе
								
								КоличествоДней = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЗначениеЯчейки) * 86400 - 2 * 86400;
								КоличествоСекунд = 0;
								
							КонецЕсли;								
							ПолученнаяДата = Дата(1900, 1, 1, 0, 0, 0) + КоличествоДней + КоличествоСекунд;								
							Если ИмяФормата = "Дата" Тогда 
								
								ЗначениеЯчейки = Формат(ПолученнаяДата, "ДЛФ=D");
								
							ИначеЕсли ИмяФормата = "ДатаВремя" Тогда 
								
								ЗначениеЯчейки = Формат(ПолученнаяДата, "ДЛФ=DT");
								
							ИначеЕсли ИмяФормата = "Время" Тогда 
								
								ЗначениеЯчейки = Формат(ПолученнаяДата, "ДЛФ=T");
								
							КонецЕсли;
							
						КонецЕсли;
						
					Иначе
						
						Если ИмяФормата = "Число" Тогда
							
							ЗначениеЯчейкиЧисло = Формат(СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЗначениеЯчейки), "ЧРГ=''; ЧГ=0");
							Если НЕ ЗначениеЗаполнено(ЗначениеЯчейкиЧисло) Тогда
								
								ЗначениеЯчейки = Формат(ЗначениеЯчейки, "ЧРГ=''; ЧГ=0");
								
							Иначе
								
								ЗначениеЯчейки = ЗначениеЯчейкиЧисло;
								
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;  				
					
				КонецЕсли;
				
			КонецЕсли; 			
			
			Если АдресЯчейки <> Неопределено Тогда
				
				ИмяКолонкиТаблицы = ТолькоЗаглавныеЛатинскиеБуквыБезЦифр(АдресЯчейки);
				НоваяСтрока[ИмяКолонкиТаблицы] = ЗначениеЯчейки;
				
			КонецЕсли;		
			
		КонецЦикла;	
		
	КонецЦикла;   	
	ЧтениеХМЛ.Закрыть();	
	
КонецПроцедуры

Функция АтрибутДом(ЭлементДом, ИмяАтрибутаДом)

	Атрибут = ЭлементДом.Атрибуты.ПолучитьИменованныйЭлемент(ИмяАтрибутаДом);
	Возврат ?(Атрибут = Неопределено, Неопределено, Атрибут.Значение);	

КонецФункции // АтрибутДом()

// Убирает из строки все символы кроме заглавных латинских букв.
Функция ТолькоЗаглавныеЛатинскиеБуквыБезЦифр(Знач Строка)

	ДлинаСтроки = СтрДлина(Строка);
	СтрокаРезультат = "";
	Для Н = 1 По ДлинаСтроки Цикл
		
		Символ = Сред(Строка, Н, 1);
		Если КодСимвола(Символ) >= 65 И КодСимвола(Символ) <= 90 Тогда
			
			СтрокаРезультат = СтрокаРезультат + Символ;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтрокаРезультат;

КонецФункции // ТекстБезЦифр()

Процедура СоздатьКолонокиТаблицыДанных(ТаблицаДанных, МаксИмяКолонки)
	
	ПервыйСимвол = "";
	ИмяКолонки = "";	
	ДлинаМаксИмя = СтрДлина(МаксИмяКолонки);
	Для Н = 64 По 90 Цикл
		
		Если Н > 64 Тогда
			
			ПервыйСимвол = Символ(Н);
			
		КонецЕсли;		
		Для К = 65 По 90 Цикл
			
			ВторойСимвол = Символ(К);
			ИмяКолонки = ПервыйСимвол + ВторойСимвол;
			ТаблицаДанных.Колонки.Добавить(ИмяКолонки);
			Если ИмяКолонки >= МаксИмяКолонки И СтрДлина(ИмяКолонки) >= ДлинаМаксИмя Тогда
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;	
		Если ИмяКолонки >= МаксИмяКолонки И СтрДлина(ИмяКолонки) >= ДлинаМаксИмя Тогда
				
				Прервать;
				
		КонецЕсли;		
		
	КонецЦикла; 

КонецПроцедуры

#КонецОбласти

#Область ЧтениеФайловMXL

Процедура ЗагрузитьВТаблицуMXL(ПутьКФайлу, РезультатВыполнения)

	ТаблицаДанных = Новый ТаблицаЗначений;
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.Прочитать(ПутьКФайлу);
	КоличествоКолонок = ТабДок.ШиринаТаблицы;
	КоличествоСтрок = ТабДок.ВысотаТаблицы;
	Для НомерКолонки = 1 По КоличествоКолонок Цикл
		
		ТаблицаДанных.Колонки.Добавить("К" + НомерКолонки);
		
	КонецЦикла;	
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		
		СтрокаТаблицы = ТаблицаДанных.Добавить();
		Для НомерКолонки = 1 По КоличествоКолонок Цикл
			
			АдресЯчейки = "R" + НомерСтроки + "C" + НомерКолонки;
			Ячейка = ТабДок.Область(АдресЯчейки);
			ЗначениеЯчейки = ?(ПустаяСтрока(Ячейка.Текст), Неопределено, Ячейка.Текст);
			СтрокаТаблицы[НомерКолонки - 1] = ЗначениеЯчейки;
			
		КонецЦикла;		
		
	КонецЦикла;
		
	РезультатВыполнения.Вставить("Лист1", ТаблицаДанных);
	
КонецПроцедуры

#КонецОбласти

#Область ПоискДанныхДокумента

Функция ПолучитьДанныеДокумента(ТаблицаДанных)
	
	// Выясняем вид печатной формы
	МаксИндексКолонок = ТаблицаДанных.Колонки.Количество() - 1;
	КоличествоСтрок = ТаблицаДанных.Количество();
	ВидДокумента = "";	
	Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
		
		Для Н = 0 По МаксИндексКолонок Цикл
			
			ЗначениеЯчейки = УдалитьПереносыСтроки(СтрокаДанных[Н]);
			Если ТипЗнч(ЗначениеЯчейки) <> Тип("Строка") Или ПустаяСтрока(ЗначениеЯчейки) Тогда
				
				Продолжить;				
				
			КонецЕсли;
			ПодготовленноеЗначение = ПодготовитьСтроку(ЗначениеЯчейки);
			Если Найти(ПодготовленноеЗначение, "унифицированнаяформаторг12") > 0 Тогда
				
				ВидДокумента = "ТОРГ12";
				Прервать;
				
			ИначеЕсли Найти(ПодготовленноеЗначение, "универсальныйпередаточныйдокумент") > 0 Тогда
				
				ВидДокумента = "УПД";
				Прервать;	
				
			КонецЕсли;			
			
		КонецЦикла;
		Если Не ПустаяСтрока(ВидДокумента) Тогда
				
			Прервать;
				
		КонецЕсли;				
		
	КонецЦикла;
	
	// Получаем данные о товарах в соответствии с видом печатной формы		
	ДанныеДокумента = Неопределено;	
	Если Не ПустаяСтрока(ВидДокумента) Тогда	
	
		ДанныеДокумента = ПолучитьДанные(ТаблицаДанных, МаксИндексКолонок, КоличествоСтрок, ВидДокумента);
		
	Иначе
		
		ТекстОшибки = НСтр("ru = 'Выбранный файл не содержит данных в формате ТОРГ-12 или УПД. Укажите корректный файл.'");
		Возврат Новый Структура("ТекстОшибки", ТекстОшибки);
		
	КонецЕсли;	
	
	Возврат ДанныеДокумента;
	
КонецФункции

// ТОРГ12

Функция ПолучитьДанныеПоставщикаТОРГ12(СтрокаДанных, МаксИндексКолонок)
		
	ДанныеПоставщика = Новый Структура;
	ИскатьДанныеПоставщика = Ложь;	
	Для Н = 0 По МаксИндексКолонок Цикл
		
		ЗначениеЯчейки = УдалитьПереносыСтроки(СтрокаДанных[Н]);
		Если ТипЗнч(ЗначениеЯчейки) <> Тип("Строка") Или ПустаяСтрока(ЗначениеЯчейки) Тогда
			
			Продолжить;
			
		КонецЕсли;		
		ПодготовленноеЗначение = ПодготовитьСтроку(ЗначениеЯчейки);
		Если ИскатьДанныеПоставщика И Найти(ПодготовленноеЗначение, "инн") > 0 Тогда			
						
			Пока Не ПустаяСтрока(ЗначениеЯчейки) Цикл
				
				Если Не ДанныеПоставщика.Свойство("ЮридическийАдрес") Тогда				
					
					// выделяем адрес из строки
					Адрес = ЗначениеЯчейки;
					Адрес = Сред(Адрес, Найти(НРег(Адрес), "инн"));
					Адрес = Сред(Адрес, Найти(Адрес, ",") + 1);
					ПозицияКонцаАдреса = Найти(НРег(Адрес), "тел.:") - 1;
					Если ПозицияКонцаАдреса <= 0 Тогда 
						
						ПозицияКонцаАдреса = Найти(НРег(Адрес), "факс:") - 1;
						
					КонецЕсли;
					Если ПозицияКонцаАдреса <= 0 Тогда 
						
						ПозицияКонцаАдреса = Найти(НРег(Адрес), "р/с") - 1;
						
					КонецЕсли;	
					Если ПозицияКонцаАдреса <= 0 Тогда						
						
						ДанныеПоставщика.Вставить("ЮридическийАдрес", СокрЛП(Адрес));					
					
					Иначе 
						
						Адрес = СокрЛП(Лев(Адрес, ПозицияКонцаАдреса));
						Если Прав(Адрес, 1) = "," Тогда
							
							Адрес = Лев(Адрес, СтрДлина(Адрес) - 1);
							
						КонецЕсли;
						ДанныеПоставщика.Вставить("ЮридическийАдрес", СокрЛП(Адрес));
						
					КонецЕсли;	
				
				КонецЕсли;
				
				ПозицияЗапятой = Найти(ЗначениеЯчейки, ",");				
				Если ПозицияЗапятой = 0 Тогда
					
					ЧастьСтроки = ЗначениеЯчейки;
					ЗначениеЯчейки = "";
					
				Иначе	
					
					ЧастьСтроки = Лев(ЗначениеЯчейки, ПозицияЗапятой - 1);
					ЗначениеЯчейки = Сред(ЗначениеЯчейки, ПозицияЗапятой + 1);
					
				КонецЕсли;				
				
				// заполняем наименование исходя из предположения, что название поставщика находиться в начале строки
				Если Не ДанныеПоставщика.Свойство("НаименованиеПолное") Тогда
					
					ДанныеПоставщика.Вставить("НаименованиеПолное", СокрЛП(ЧастьСтроки));
					
				ИначеЕсли Не ДанныеПоставщика.Свойство("ИНН") И Найти(НРег(ЧастьСтроки), "инн") > 0 Тогда	
					
					ДанныеПоставщика.Вставить("ИНН", ЦифрыИзСтроки(ЧастьСтроки));
					
				ИначеЕсли Не ДанныеПоставщика.Свойство("Телефон") И Найти(НРег(ЧастьСтроки), "тел.:") > 0 Тогда		
					
					ЧастьСтроки = НРег(ЧастьСтроки);
					ЧастьСтроки = СтрЗаменить(ЧастьСтроки, "тел.:", "");
					ДанныеПоставщика.Вставить("Телефон", СокрЛП(ЧастьСтроки));
					
				ИначеЕсли Не ДанныеПоставщика.Свойство("Факс") И Найти(НРег(ЧастьСтроки), "факс:") > 0 Тогда		
					
					ЧастьСтроки = НРег(ЧастьСтроки);
					ЧастьСтроки = СтрЗаменить(ЧастьСтроки, "факс:", "");
					ДанныеПоставщика.Вставить("Факс", СокрЛП(ЧастьСтроки));	
					
				ИначеЕсли Не ДанныеПоставщика.Свойство("РасчетныйСчет") И Найти(НРег(ЧастьСтроки), "р/с") > 0 Тогда	
					
					ДанныеПоставщика.Вставить("РасчетныйСчет", ЦифрыИзСтроки(ЧастьСтроки));	
					
				ИначеЕсли Не ДанныеПоставщика.Свойство("БИК") И Найти(НРег(ЧастьСтроки), "бик") > 0 Тогда	
					
					ДанныеПоставщика.Вставить("БИК", ЦифрыИзСтроки(ЧастьСтроки));		
					
				КонецЕсли;
				
			КонецЦикла;
				
		ИначеЕсли ПодготовленноеЗначение = "поставщик" Тогда 
		
			ИскатьДанныеПоставщика = Истина;
		
		КонецЕсли;			
		
	КонецЦикла; 
	
	Возврат ДанныеПоставщика;

КонецФункции // ПолучитьДанныеПоставщика(СтрокаДанных, МаксИндекКолонок)()

Функция ПолучитьДанныеКонтрагентаТОРГ12(СтрокаДанных, МаксИндексКолонок, КлючевоеСлово)
	
	ДанныеКонтрагента = Новый Структура;
	ИскатьДанныеКонтрагента = Ложь;		
	Для Н = 0 По МаксИндексКолонок Цикл
		
		ЗначениеЯчейки = УдалитьПереносыСтроки(СтрокаДанных[Н]);
		Если ТипЗнч(ЗначениеЯчейки) <> Тип("Строка") Или ПустаяСтрока(ЗначениеЯчейки) Тогда
			
			Продолжить;
			
		КонецЕсли;		
		ПодготовленноеЗначение = ПодготовитьСтроку(ЗначениеЯчейки);
		Если ИскатьДанныеКонтрагента И Найти(НРег(ЗначениеЯчейки), "инн") > 0 Тогда	

			Пока Не ПустаяСтрока(ЗначениеЯчейки) Цикл
				
				ПозицияЗапятой = Найти(ЗначениеЯчейки, ",");				
				Если ПозицияЗапятой = 0 Тогда
					
					ЧастьСтроки = ЗначениеЯчейки;
					ЗначениеЯчейки = "";
					
				Иначе	
					
					ЧастьСтроки = Лев(ЗначениеЯчейки, ПозицияЗапятой - 1);
					ЗначениеЯчейки = Сред(ЗначениеЯчейки, ПозицияЗапятой + 1);
					
				КонецЕсли;				
				
				// заполняем наименование исходя из предположения, что название поставщика находиться в начале строки
				Если Не ДанныеКонтрагента.Свойство("НаименованиеПолное") Тогда
					
					ДанныеКонтрагента.Вставить("НаименованиеПолное", СокрЛП(ЧастьСтроки));
					
				ИначеЕсли Не ДанныеКонтрагента.Свойство("ИНН") И Найти(НРег(ЧастьСтроки), "инн") > 0 Тогда	
					
					ДанныеКонтрагента.Вставить("ИНН", ЦифрыИзСтроки(ЧастьСтроки));
					
				КонецЕсли;
				
			КонецЦикла;
				
		ИначеЕсли ПодготовленноеЗначение = НРег(КлючевоеСлово) Тогда 
		
			ИскатьДанныеКонтрагента = Истина;
		
		КонецЕсли;				
		
	КонецЦикла;
	
	Возврат ДанныеКонтрагента;
	
КонецФункции

Процедура ПолучитьНомерДатуДокументаТОРГ12(СтрокаДанных, МаксИндексКолонок, ТаблицаДанных, ДанныеДокумента)
		
	НомерНайден = Ложь;
	ДатаНайдена = Ложь;
	Для Н = 0 По МаксИндексКолонок Цикл
		
		ЗначениеЯчейки = УдалитьПереносыСтроки(СтрокаДанных[Н]);
		Если ТипЗнч(ЗначениеЯчейки) <> Тип("Строка") Или ПустаяСтрока(ЗначениеЯчейки) Тогда
			
			Продолжить;
			
		КонецЕсли;		
		ПодготовленноеЗначение = ПодготовитьСтроку(ЗначениеЯчейки);
		Если Не НомерНайден И Найти(ПодготовленноеЗначение, "номердокумента") > 0 Тогда
			
			ИндексСтроки = ТаблицаДанных.Индекс(СтрокаДанных);
			НомТН = УдалитьПереносыСтроки(ТаблицаДанных[ИндексСтроки + 1][Н]);
			Если ЗначениеЗаполнено(НомТН) Тогда
				
				ДанныеДокумента.Вставить("НомТН", Строка(НомТН));
				
			Иначе
				
				ДанныеДокумента.Вставить("НомТН", "");
				
			КонецЕсли;
			НомерНайден = Истина;
			
		ИначеЕсли Не ДатаНайдена И Найти(ПодготовленноеЗначение, "датасоставления") > 0 Тогда
			
			ИндексСтроки = ТаблицаДанных.Индекс(СтрокаДанных);
			ДатаТН = УдалитьПереносыСтроки(ТаблицаДанных[ИндексСтроки + 1][Н]);
			Если ЗначениеЗаполнено(ДатаТН) Тогда
				
				ДанныеДокумента.Вставить("ДатаТН", Строка(ДатаТН));
				
			Иначе	
				
				ДанныеДокумента.Вставить("ДатаТН", "");
				
			КонецЕсли;	
			ДатаНайдена = Истина;
					
		КонецЕсли;						
		Если НомерНайден И ДатаНайдена Тогда
			
			Прервать;
			
		КонецЕсли; 
		
	КонецЦикла; 	

КонецПроцедуры // ПолучитьНомерДатуДокумента()

Процедура ДобавитьСтрокиВТаблицуЗаголовковТОРГ12(ТаблицаЗаголовков)
	
	// номер по порядку
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "НомТов";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "номер";	
	НоваяСтрокаЗаголовков.НомерКолонки		= "1";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	// товар 
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "НаимТов";
	НоваяСтрокаЗаголовков.СтрокаПоиска		= "товар";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "2";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";
	
	// единица измерения
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "НаимЕдИзм";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "единицаизмерения";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "4";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";
	
	// количество
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "Нетто";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "количествомассанетто";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "10";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";   
	
	// сумма без ндс
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "СумБезНДС";
	НоваяСтрокаЗаголовков.СтрокаПоиска		= "суммабезучетандс";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "12";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	// сумма с ндс
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "СумУчНДС";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "суммасучетомндс";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "15";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	// цена
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "Цена";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "цена";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "11";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	// ставка ндс
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "СтавкаНДС";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "ндс";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "13";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	// артикул
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "Артикул";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "код";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "3";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 2;
	НоваяСтрокаЗаголовков.ТипДанных	 		= "Строка";

	// код единицы измерения
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "ОКЕИ_Тов";
	НоваяСтрокаЗаголовков.СтрокаПоиска	 	= "кодпоокеи";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "5";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 2;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";   	
	
КонецПроцедуры

// УПД

Процедура НомерДатаСФ(СтрокаДанных, МаксИндексКолонок, ДанныеДокумента)
	
	// Ищем номер счета-фактуры
	ИскатьНомер = Ложь;
	НомерКолонки = 0;
	Для Н = 0 По МаксИндексКолонок Цикл
		
		ЗначениеЯчейки = УдалитьПереносыСтроки(СтрокаДанных[Н]);
		Если Не ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
			
			Продолжить;
			
		КонецЕсли;		
		Если ИскатьНомер Тогда
			
			ДанныеДокумента.Вставить("НомерСчФ", ЗначениеЯчейки);
			НомерКолонки = Н + 1;
			Прервать;
			
		Иначе
			
			ПодготовленноеЗначение = ПодготовитьСтроку(ЗначениеЯчейки);
			Если Найти(ПодготовленноеЗначение, "счетфактура") > 0 Тогда
				
				ИскатьНомер = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Ищем дату счета фактуры
	Если Не ДанныеДокумента.Свойство("НомерСчФ") Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	ИскатьДату = Ложь;
	Для Н = НомерКолонки По МаксИндексКолонок Цикл
		
		ЗначениеЯчейки = УдалитьПереносыСтроки(СтрокаДанных[Н]);
		Если Не ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
			
			Продолжить;
			
		КонецЕсли;						
		Если ИскатьДату Тогда
			
			ДеньСтр = Лев(ЗначениеЯчейки, Найти(ЗначениеЯчейки, " ") - 1);
			День = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ДеньСтр);
			ЗначениеЯчейки = Сред(ЗначениеЯчейки, Найти(ЗначениеЯчейки, " ") + 1);
			МесяцСтр = НРег(Лев(ЗначениеЯчейки, Найти(ЗначениеЯчейки, " ") - 1));				
			Если Найти(МесяцСтр, "январ") > 0 Тогда
				
				Месяц = 1;
				
			ИначеЕсли Найти(МесяцСтр, "феврал") > 0 Тогда
				
				Месяц = 2;
				
			ИначеЕсли Найти(МесяцСтр, "март") > 0 Тогда
				
				Месяц = 3;
				
			ИначеЕсли Найти(МесяцСтр, "апрел") > 0 Тогда
				
				Месяц = 4;
				
			ИначеЕсли Найти(МесяцСтр, "ма") > 0 Тогда
				
				Месяц = 5;
				
			ИначеЕсли Найти(МесяцСтр, "июн") > 0 Тогда
				
				Месяц = 6;
				
			ИначеЕсли Найти(МесяцСтр, "июл") > 0 Тогда
				
				Месяц = 7;
				
			ИначеЕсли Найти(МесяцСтр, "август") > 0 Тогда
				
				Месяц = 8;
				
			ИначеЕсли Найти(МесяцСтр, "сентябр") > 0 Тогда
				
				Месяц = 9;
				
			ИначеЕсли Найти(МесяцСтр, "октябр") > 0 Тогда
				
				Месяц = 10;
				
			ИначеЕсли Найти(МесяцСтр, "ноябр") > 0 Тогда
				
				Месяц = 11;
				
			ИначеЕсли Найти(МесяцСтр, "декабр") > 0 Тогда
				
				Месяц = 12;
				
			Иначе
				
				Месяц = 0;
				
			КонецЕсли;	
			
			ЗначениеЯчейки = Сред(ЗначениеЯчейки, Найти(ЗначениеЯчейки, " ") + 1); 			
			ГодСтр = ЦифрыИзСтроки(ЗначениеЯчейки);
			Год = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ГодСтр);
			Если День <> Неопределено И Месяц <> 0 И Год <> Неопределено Тогда
				
				Дата = Дата(Год, Месяц, День);
				
			Иначе
				
				Дата = Дата(1, 1, 1);
				
			КонецЕсли;			
			ДанныеДокумента.Вставить("ДатаСчФ", Дата);
			Прервать;
			
		Иначе
			
			ПодготовленноеЗначение = ПодготовитьСтроку(ЗначениеЯчейки);
			Если Найти(ПодготовленноеЗначение, "от") > 0 Тогда
				
				ИскатьДату = Истина;
				
			КонецЕсли;
			
		КонецЕсли;		
		
	КонецЦикла;	    	
	ДанныеДокумента.Вставить("НомТН", ДанныеДокумента.НомерСчФ);
	ДанныеДокумента.Вставить("ДатаТН", Формат(ДанныеДокумента.ДатаСчФ, "ДФ=dd.MM.yyyy"));
			
КонецПроцедуры

Функция ПолучитьДанныеКонтрагентаУПД(СтрокаДанных, МаксИндексКолонок, ТаблицаДанных, КлючевоеСлово)
	
	ДанныеКонтрагента = Новый Структура;
	ИскатьНаименование = Ложь;
	КлючевоеСлово = НРег(КлючевоеСлово);
	Для Н = 0 По МаксИндексКолонок Цикл
		
		ЗначениеЯчейки = УдалитьПереносыСтроки(СтрокаДанных[Н]);
		Если ТипЗнч(ЗначениеЯчейки) <> Тип("Строка") Или ПустаяСтрока(ЗначениеЯчейки) Тогда
				
			Продолжить;
				
		КонецЕсли;
		Если ИскатьНаименование Тогда		
				
			ДанныеКонтрагента.Вставить("НаименованиеПолное", ЗначениеЯчейки);
			Прервать;	
			
		Иначе			
			
			ПодготовленноеЗначение = ПодготовитьСтроку(ЗначениеЯчейки);
			Если Найти(ПодготовленноеЗначение, КлючевоеСлово) > 0 Тогда
				
				ИскатьНаименование = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла; 		
	Если Не ДанныеКонтрагента.Свойство("НаименованиеПолное") Тогда
		
		Возврат ДанныеКонтрагента;
		
	КонецЕсли;
	
	// Ищем остальные реквизиты контрагента
	НомерСтроки = ТаблицаДанных.Индекс(СтрокаДанных) + 1;		
	КоличествоСтрок = ТаблицаДанных.Количество();
	ИскатьАдрес = Ложь;
	ИскатьИНН = Ложь;
	Пока НомерСтроки < КоличествоСтрок Цикл
		
		СтрокаДанных = ТаблицаДанных[НомерСтроки];		
		Если Не ДанныеКонтрагента.Свойство("ЮридическийАдрес") Тогда
			
			Для Н = 0 По МаксИндексКолонок Цикл
				
				ЗначениеЯчейки = УдалитьПереносыСтроки(СтрокаДанных[Н]);
				Если ТипЗнч(ЗначениеЯчейки) <> Тип("Строка") Или ПустаяСтрока(ЗначениеЯчейки) Тогда
					
					Продолжить;
					
				КонецЕсли;				
				Если ИскатьАдрес Тогда				
						
					ДанныеКонтрагента.ЮридическийАдрес = ЗначениеЯчейки;
					Прервать;					
					
				Иначе
					
					ПодготовленноеЗначение = ПодготовитьСтроку(ЗначениеЯчейки);				
					Если Найти(ПодготовленноеЗначение, "адрес") > 0 Тогда
						
						ИскатьАдрес = Истина;
						ДанныеКонтрагента.Вставить("ЮридическийАдрес", "");
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;		
						
		ИначеЕсли Не ДанныеКонтрагента.Свойство("ИНН") Тогда
			
				
			Для Н = 0 По МаксИндексКолонок Цикл
			
				ЗначениеЯчейки = УдалитьПереносыСтроки(СтрокаДанных[Н]);
				Если ТипЗнч(ЗначениеЯчейки) <> Тип("Строка") Или ПустаяСтрока(ЗначениеЯчейки) Тогда
					
					Продолжить;
					
				КонецЕсли;				
				Если ИскатьИНН Тогда				
						
					ПозицияСлэша = Найти(ЗначениеЯчейки, "/");
					ПозицияСлэша = ?(ПозицияСлэша = 0, Найти(ЗначениеЯчейки, "\"), ПозицияСлэша);
					ДанныеКонтрагента.ИНН = СокрЛП(?(ПозицияСлэша = 0, ЗначениеЯчейки, 
						Лев(ЗначениеЯчейки, ПозицияСлэша - 1)));
					ДанныеКонтрагента.Вставить("КПП", СокрЛП(?(ПозицияСлэша = 0, "", Сред(ЗначениеЯчейки, ПозицияСлэша + 1))));
					Прервать;				
					
				Иначе
					
					ПодготовленноеЗначение = ПодготовитьСтроку(ЗначениеЯчейки);				
					Если Найти(ПодготовленноеЗначение, ?(КлючевоеСлово = "продавец", "иннкпппродавца", "иннкпппокупателя")) > 0 Тогда
						
						ИскатьИНН = Истина;
						ДанныеКонтрагента.Вставить("ИНН", "");
						
					КонецЕсли;
					
				КонецЕсли;
			
			КонецЦикла;	
				
		КонецЕсли;		
		Если ДанныеКонтрагента.Свойство("ИНН") И ДанныеКонтрагента.Свойство("ЮридическийАдрес") Тогда
			
			Прервать;
			
		КонецЕсли;
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	Возврат ДанныеКонтрагента;
	
КонецФункции

Процедура ДобавитьСтрокиВТаблицуЗаголовковУПД(ТаблицаЗаголовков)
	
	// номер по порядку
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "НомТов";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "пп";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "а";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	// товар 
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "НаимТов";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "наименованиетовара";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "1";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";
	
	// единица измерения
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "НаимЕдИзм";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "условноеобозначение";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "2а";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 2;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";
	
	// количество
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "Нетто";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "количество";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "3";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";   
	
	// сумма без ндс
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "СумБезНДС";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "стоимостьтоваровработуслугимущественныхправбезналога";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "5";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	// сумма с ндс
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "СумУчНДС";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "стоимостьтоваровработуслугимущественныхправсналогом";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "9";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	// цена
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "Цена";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "цена";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "4";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	// ставка ндс
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "СтавкаНДС";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "налоговаяставка";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "7";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	// артикул
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "Артикул";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "кодтовара";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "б";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";

	// код единицы измерения
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "ОКЕИ_Тов";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "код";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "2";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 2;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";  	
	
КонецПроцедуры

// Общие

Функция ПолучитьДанные(ТаблицаДанных, МаксИндексКолонок, КоличествоСтрок, ВидДокумента)
		
	ДанныеДокумента = Новый Структура;
	ДанныеДокумента.Вставить("ВидДокумента", ВидДокумента);
	ТаблицаТоваров = ПодготовитьТаблицуТоваров();		
	
	КоличествоСовпаденийЗаголовков = 5;
	КоличествоСовпаденийВторойСтрокиЗаголовков = 1;
	КоличествоСовпаденийНумерацииКолонок = 5;
	
	НайденаСтрокаЗаголовкаТаблицы			 = Ложь;
	НайденаВтораяСтрокаЗаголовкаТаблицы		 = Ложь;
	НайденаСтрокаНумерацииКолонокТаблицы	 = Ложь;		
	
	СчетчикСтрок = 0;
	НомерСтрокиТовара = 1;
	ДанныеШапкиПолучены = Ложь;
	Для Каждого СтрокаДанных Из ТаблицаДанных Цикл							
		
		Если Не ДанныеШапкиПолучены Тогда
			
			Если ВидДокумента = "ТОРГ12" Тогда
			
				Если Не ДанныеДокумента.Свойство("Грузополучатель") Тогда	
				
					ДанныеКонтрагента = ПолучитьДанныеКонтрагентаТОРГ12(СтрокаДанных, МаксИндексКолонок, "Грузополучатель");
					Если ДанныеКонтрагента.Количество() > 0 Тогда
						
						ДанныеДокумента.Вставить("Грузополучатель", ДанныеКонтрагента);
						
					КонецЕсли;
				
				ИначеЕсли Не ДанныеДокумента.Свойство("Поставщик") Тогда	
				
					ДанныеКонтрагента = ПолучитьДанныеПоставщикаТОРГ12(СтрокаДанных, МаксИндексКолонок);
					Если ДанныеКонтрагента.Количество() > 0 Тогда
						
						ДанныеДокумента.Вставить("Поставщик", ДанныеКонтрагента);
						
					КонецЕсли;
					
				ИначеЕсли Не ДанныеДокумента.Свойство("Плательщик") Тогда	
				
					ДанныеКонтрагента = ПолучитьДанныеКонтрагентаТОРГ12(СтрокаДанных, МаксИндексКолонок, "Плательщик");
					Если ДанныеКонтрагента.Количество() > 0 Тогда
						
						ДанныеДокумента.Вставить("Плательщик", ДанныеКонтрагента);
						
					КонецЕсли;
					
				ИначеЕсли Не ДанныеДокумента.Свойство("НомТН") Тогда	
				
					ПолучитьНомерДатуДокументаТОРГ12(СтрокаДанных, МаксИндексКолонок, ТаблицаДанных, ДанныеДокумента);			
					Если ДанныеДокумента.Свойство("НомТН") Тогда
						
						ДанныеШапкиПолучены = Истина;
						
					КонецЕсли;
					
				КонецЕсли;	
			
			Иначе // УПД
				
				Если Не ДанныеДокумента.Свойство("НомерСчФ") Тогда
					
					НомерДатаСФ(СтрокаДанных, МаксИндексКолонок, ДанныеДокумента);	
					
				ИначеЕсли Не ДанныеДокумента.Свойство("Поставщик") Тогда	
					
					ДанныеКонтрагента = ПолучитьДанныеКонтрагентаУПД(СтрокаДанных, МаксИндексКолонок, ТаблицаДанных, "Продавец");
					Если ДанныеКонтрагента.Количество() > 0 Тогда
						
						ДанныеДокумента.Вставить("Поставщик", ДанныеКонтрагента);
						
					КонецЕсли;
					
				ИначеЕсли Не ДанныеДокумента.Свойство("Грузополучатель") Тогда	
					
					ДанныеКонтрагента = ПолучитьДанныеКонтрагентаУПД(СтрокаДанных, МаксИндексКолонок, ТаблицаДанных, "Покупатель");
					Если ДанныеКонтрагента.Количество() > 0 Тогда
						
						ДанныеДокумента.Вставить("Грузополучатель", ДанныеКонтрагента);
						ДанныеДокумента.Вставить("Плательщик", ДанныеКонтрагента);
						ДанныеШапкиПолучены = Истина;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе	
			
			// поиск данных табличной части
			Если НЕ НайденаСтрокаЗаголовкаТаблицы Тогда			
				
				ТаблицаЗаголовков = ПодготовитьТаблицуЗаголовковТабличнойЧасти(СтрокаДанных, МаксИндексКолонок, ВидДокумента);
				Если ТаблицаЗаголовков <> Неопределено Тогда
					
					МассивЗаголовков = ТаблицаЗаголовков.НайтиСтроки(Новый Структура("КолонкаНайдена, СтрокаЗаголовка", Истина, 1));
					Если МассивЗаголовков.Количество() >= КоличествоСовпаденийЗаголовков Тогда
						
						НайденаСтрокаЗаголовкаТаблицы = Истина;					
						
					КонецЕсли;					
				
				КонецЕсли;			
				
			ИначеЕсли Не НайденаВтораяСтрокаЗаголовкаТаблицы Тогда	
				
				НайтиВторуюСтрокуЗаголовкаТабличнойЧасти(СтрокаДанных, ТаблицаЗаголовков, МаксИндексКолонок, ВидДокумента);
				Если ТаблицаЗаголовков <> Неопределено Тогда
					
					
					МассивЗаголовков = ТаблицаЗаголовков.НайтиСтроки(Новый Структура("КолонкаНайдена, СтрокаЗаголовка", Истина, 2));
					Если МассивЗаголовков.Количество() >= КоличествоСовпаденийВторойСтрокиЗаголовков Тогда
						
						НайденаВтораяСтрокаЗаголовкаТаблицы = Истина;					
						
					КонецЕсли;					
				
				КонецЕсли;
				
			// поиск нумерации колонок таблицы товаров	
			ИначеЕсли НЕ НайденаСтрокаНумерацииКолонокТаблицы Тогда
				
				ПроверитьНумерациюКолонокТабличнойЧасти(СтрокаДанных, ТаблицаЗаголовков);
				МассивЗаголовков = ТаблицаЗаголовков.НайтиСтроки(Новый Структура("НумерацияКолонкиНайдена", Истина));
				Если МассивЗаголовков.Количество() >= КоличествоСовпаденийНумерацииКолонок Тогда
					
					НайденаСтрокаНумерацииКолонокТаблицы = Истина;
					
				КонецЕсли;
				
				// поиск товаров	
			ИначеЕсли НайденаСтрокаЗаголовкаТаблицы И НайденаВтораяСтрокаЗаголовкаТаблицы И НайденаСтрокаНумерацииКолонокТаблицы Тогда	
				
				РазобратьСтрокуТабличнойЧасти(СтрокаДанных, ТаблицаЗаголовков, НомерСтрокиТовара, ТаблицаТоваров);		
				
			КонецЕсли;	
			
		КонецЕсли;	
		СчетчикСтрок = СчетчикСтрок + 1;	
		
	КонецЦикла;		
	ДанныеДокумента.Вставить("ТаблицаТоваров", ТаблицаТоваров);
		
	ТекстОшибки = "";
	Если 	ДанныеДокумента.ВидДокумента = "ТОРГ12" 
			И ДанныеДокумента.Свойство("Грузополучатель") 
			И ДанныеДокумента.Свойство("Поставщик") 
			И ДанныеДокумента.Свойство("Плательщик") 
			И ДанныеДокумента.Свойство("НомТН") Тогда 				
			
		ПроверитьДанныеПолучателя(ДанныеДокумента);	
			
		ИНН = "";	
		Если ДанныеДокумента.Грузополучатель.Свойство("ИНН", ИНН) Тогда
			
			Если ЗначениеЗаполнено(ИНН) Тогда
				
				СсылкаНаОрганизацию = ЭлектронныеДокументыПереопределяемый.СсылкаНаОбъектПоИННКПП("Организации", ИНН, Неопределено);
				Если Не ЗначениеЗаполнено(СсылкаНаОрганизацию) Тогда
					
					ТекстОшибки = НСтр("ru = 'Не удалось загрузить файл. Не найдена организация-грузополучатель.'");
					
				КонецЕсли;
				
			Иначе
				
				ТекстОшибки = НСтр("ru = 'Не удалось загрузить файл. Не заполнен ИНН грузополучателя.'");
				
			КонецЕсли;	
			
		КонецЕсли;			
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			
			Возврат Новый Структура("ТекстОшибки", ТекстОшибки);		
			
		КонецЕсли;
			
		Возврат ДанныеДокумента;		
		
	ИначеЕсли 	ДанныеДокумента.ВидДокумента = "УПД" 
		        И ДанныеДокумента.Свойство("НомерСчФ")
				И ДанныеДокумента.Свойство("Грузополучатель")
				И ДанныеДокумента.Свойство("Плательщик")
				И ДанныеДокумента.Свойство("Поставщик") Тогда
				
		Если ПустаяСтрока(ДанныеДокумента.Поставщик.ИНН) Тогда
						
			ТекстОшибки = НСтр("ru = 'Не удалось загрузить файл. Возможно нет данных поставщика или не указан его ИНН.'");									
			
		КонецЕсли;  
		
		ПроверитьДанныеПолучателя(ДанныеДокумента);
		
		ИНН = "";	
		Если ДанныеДокумента.Грузополучатель.Свойство("ИНН", ИНН) Тогда
			
			Если ЗначениеЗаполнено(ИНН) Тогда
				
				СсылкаНаОрганизацию = ЭлектронныеДокументыПереопределяемый.СсылкаНаОбъектПоИННКПП("Организации", ИНН, Неопределено);
				Если Не ЗначениеЗаполнено(СсылкаНаОрганизацию) Тогда
					
					ТекстОшибки = НСтр("ru = 'Не удалось загрузить файл. Не найдена организация-грузополучатель.'");
					
				КонецЕсли;
				
			Иначе
				
				ТекстОшибки = НСтр("ru = 'Не удалось загрузить файл. Не заполнен ИНН грузополучателя.'");
				
			КонецЕсли;	
			
		КонецЕсли;			
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			
			Возврат Новый Структура("ТекстОшибки", ТекстОшибки);		
			
		КонецЕсли;
		
		Возврат ДанныеДокумента;			
		
	Иначе		
		
		Если Не ДанныеДокумента.Свойство("Поставщик") Тогда
			
			ТекстОшибки = НСтр("ru = 'Не удалось загрузить файл. Возможно нет данных поставщика или не указан его ИНН.'");
			
		ИначеЕсли Не ДанныеДокумента.Свойство("Грузополучатель") Тогда	
			
			ТекстОшибки = НСтр("ru = 'Не удалось загрузить файл. Не найден грузополучатель.'");			
			
		Иначе	
			
			ТекстОшибки = НСтр("ru = 'Не удалось загрузить файл.'");
			
		КонецЕсли;
		
		Возврат Новый Структура("ТекстОшибки", ТекстОшибки);
		
	КонецЕсли;
	
КонецФункции

Процедура ПроверитьДанныеПолучателя(ДанныеДокумента)
	
	Грузополучатель = ДанныеДокумента.Грузополучатель;
	Плательщик = ДанныеДокумента.Плательщик;
	ИННГрузополучателя = "";
	Если Не Грузополучатель.Свойство("ИНН", ИННГрузополучателя) Тогда
		
		Грузополучатель.Вставить("ИНН");
		
	КонецЕсли;
	ИННПлательщика = "";
	Если Не Плательщик.Свойство("ИНН", ИННПлательщика) Тогда
		
		Плательщик.Вставить("ИНН");
		
	КонецЕсли;
	Если ПустаяСтрока(Грузополучатель.ИНН) Тогда
		
		Грузополучатель.ИНН = ИННПлательщика;
		
	КонецЕсли;
	Если ПустаяСтрока(Плательщик.ИНН) Тогда
		
		Плательщик.ИНН = ИННГрузополучателя;
		
	КонецЕсли;	

КонецПроцедуры 

Функция УдалитьПереносыСтроки(Знач Стр)

	Если ТипЗнч(Стр) <> Тип("Строка") Тогда
		
		Возврат Стр;
		
	КонецЕсли;
		
	ДлинаСтроки = СтрДлина(Стр);
	СтрРезультат = "";	
	Для Н = 1 По ДлинаСтроки Цикл
		
		СимволСтроки = Сред(Стр, Н, 1);
		Если СимволСтроки = Символы.ПС
			ИЛИ СимволСтроки = Символы.ВК Тогда 
				
			СимволСтроки = ?(СимволСтроки = Символы.ПС, " ", "");
			
		КонецЕсли;
		СтрРезультат = СтрРезультат + СимволСтроки;
		
	КонецЦикла;
	
	Возврат СокрЛП(СтрРезультат); 

КонецФункции// УдалитьПереносСтроки()

// Перевод текста в нижний регистр и удаление из нее пробелов и других спец. символов.
Функция ПодготовитьСтроку(Знач Стр)
	
	Если ТипЗнч(Стр) <> Тип("Строка") Тогда
		
		Возврат Стр;
		
	КонецЕсли;
	
	Стр = НРег(Стр);
	ДлинаСтроки = СтрДлина(Стр);
	СтрРезультат = "";	
	Для Н = 1 По ДлинаСтроки Цикл
		
		СимволСтроки = Сред(Стр, Н, 1);
		Если 	СимволСтроки = " " 
				ИЛИ СимволСтроки = "-" 
				ИЛИ СимволСтроки = "№" 
				ИЛИ СимволСтроки = """"
				ИЛИ СимволСтроки = ","
				ИЛИ СимволСтроки = "."				
				ИЛИ СимволСтроки = ":"				
				ИЛИ СимволСтроки = ";"								
				ИЛИ СимволСтроки = Символы.ПС
				ИЛИ СимволСтроки = Символы.ВК
				ИЛИ СимволСтроки = "/"
				ИЛИ СимволСтроки = "("
				ИЛИ СимволСтроки = ")"
				ИЛИ СимволСтроки = "\"
				ИЛИ СимволСтроки = "|" Тогда 
				
			Продолжить;
			
		КонецЕсли;
		СтрРезультат = СтрРезультат + СимволСтроки;
		
	КонецЦикла;
	
	Возврат СтрРезультат;
	
КонецФункции

Функция ЦифрыИзСтроки(Знач Стр)

	Если ТипЗнч(Стр) <> Тип("Строка") Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Стр = НРег(Стр);
	ДлинаСтроки = СтрДлина(Стр);
	СтрРезультат = "";	
	Для Н = 1 По ДлинаСтроки Цикл
		
		СимволСтроки = Сред(Стр, Н, 1);
		Если КодСимвола(СимволСтроки) < 48 ИЛИ КодСимвола(СимволСтроки) > 57 Тогда
			
			Продолжить;
			
		КонецЕсли;
		СтрРезультат = СтрРезультат + СимволСтроки;
		
	КонецЦикла;
	
	Возврат СтрРезультат;   

КонецФункции // ЦифрыИзСтроки()

Функция ПодготовитьТаблицуТоваров()
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("НомТов");
	ТаблицаТоваров.Колонки.Добавить("НаимТов");
	ТаблицаТоваров.Колонки.Добавить("Артикул");	
	ТаблицаТоваров.Колонки.Добавить("НаимЕдИзм");
	ТаблицаТоваров.Колонки.Добавить("ОКЕИ_Тов");
	ТаблицаТоваров.Колонки.Добавить("Нетто", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТаблицаТоваров.Колонки.Добавить("СумБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("СумУчНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0)));
	
	Возврат ТаблицаТоваров;
	
КонецФункции

Функция ПодготовитьТаблицуЗаголовковТабличнойЧасти(СтрокаДанных, МаксИндексКолонок, ВидДокумента)

	ИскатьЗаголовки = Ложь;
	Для Н = 0 По МаксИндексКолонок Цикл
		
		ЗначениеЯчейки = УдалитьПереносыСтроки(СтрокаДанных[Н]);
		Если ТипЗнч(ЗначениеЯчейки) <> Тип("Строка") Или ПустаяСтрока(ЗначениеЯчейки) Тогда
			
			Продолжить;
			
		КонецЕсли;
		ПодготовленноеЗначение = ПодготовитьСтроку(ЗначениеЯчейки);
		Если ВидДокумента = "ТОРГ12" Тогда
			
			Если Найти(ПодготовленноеЗначение, "номерпопорядку") > 0 ИЛИ Найти(ПодготовленноеЗначение, "единицаизмерения") > 0 Тогда
			
				ИскатьЗаголовки = Истина;
				Прервать;
			
			КонецЕсли;	
		
		Иначе
			
			Если Найти(ПодготовленноеЗначение, "наименованиетовара") > 0 ИЛИ Найти(ПодготовленноеЗначение, "единицаизмерения") > 0 Тогда
			
				ИскатьЗаголовки = Истина;
				Прервать;
			
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЦикла;
	Если Не ИскатьЗаголовки Тогда
		
		Возврат Неопределено;
		
	КонецЕсли; 
	
	ТаблицаЗаголовков = Новый ТаблицаЗначений;
	ТаблицаЗаголовков.Колонки.Добавить("НазваниеКолонки", Новый ОписаниеТипов("Строка"));
	ТаблицаЗаголовков.Колонки.Добавить("СтрокаПоиска", Новый ОписаниеТипов("Строка"));
	ТаблицаЗаголовков.Колонки.Добавить("КолонкаНайдена", Новый ОписаниеТипов("Булево"));
	ТаблицаЗаголовков.Колонки.Добавить("НумерацияКолонкиНайдена", Новый ОписаниеТипов("Булево"));
	ТаблицаЗаголовков.Колонки.Добавить("ТипДанных", Новый ОписаниеТипов("Строка"));
	ТаблицаЗаголовков.Колонки.Добавить("ИндексКолонки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаЗаголовков.Колонки.Добавить("НомерКолонки", Новый ОписаниеТипов("Строка"));
	ТаблицаЗаголовков.Колонки.Добавить("СтрокаЗаголовка", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	
	Если ВидДокумента = "ТОРГ12" Тогда
		
		ДобавитьСтрокиВТаблицуЗаголовковТОРГ12(ТаблицаЗаголовков);
		
	Иначе
		
		ДобавитьСтрокиВТаблицуЗаголовковУПД(ТаблицаЗаголовков)
		
	КонецЕсли;
	
	// индексы для поиска
	ТаблицаЗаголовков.Индексы.Добавить("НазваниеКолонки, КолонкаНайдена, НумерацияКолонкиНайдена, СтрокаЗаголовка");
			
	ТаблицаЗаголовков.ЗаполнитьЗначения(Ложь, "КолонкаНайдена");
	ТаблицаЗаголовков.ЗаполнитьЗначения(Ложь, "НумерацияКолонкиНайдена");
	ТаблицаЗаголовков.ЗаполнитьЗначения(0, "ИндексКолонки");		
	
	Для Н = 0 По МаксИндексКолонок Цикл
		
		ЗначениеЯчейки = СтрокаДанных[Н];
		Если ТипЗнч(ЗначениеЯчейки) <> Тип("Строка") Тогда
			
			Продолжить;
			
		КонецЕсли;
		ПодготовленноеЗначение = ПодготовитьСтроку(ЗначениеЯчейки);
		МассивЗаголовков = ТаблицаЗаголовков.НайтиСтроки(Новый Структура("КолонкаНайдена, СтрокаЗаголовка", Ложь, 1));
		Для Каждого ЭлементМассива Из МассивЗаголовков Цикл			
			
			Если Найти(ПодготовленноеЗначение, ЭлементМассива.СтрокаПоиска) > 0 Тогда
				
				Если ВидДокумента = "ТОРГ12" И ЭлементМассива.НазваниеКолонки = "СтавкаНДС" Тогда
					
					Если ПодготовленноеЗначение = "ндс" Тогда // исключаю строки "СуммаСНДС" и "СуммаБезНДС"
						
						ЭлементМассива.ИндексКолонки = Н;
						ЭлементМассива.КолонкаНайдена = Истина;
						
					КонецЕсли;
					
				Иначе
				
					ЭлементМассива.ИндексКолонки = Н;
					ЭлементМассива.КолонкаНайдена = Истина;
					
				КонецЕсли;	
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаЗаголовков;	

КонецФункции // ПодготовитьТаблицуПоиска()

Процедура НайтиВторуюСтрокуЗаголовкаТабличнойЧасти(СтрокаДанных, ТаблицаЗаголовков, МаксИндексКолонок, ВидДокумента)
	
	ИскатьЗаголовки = Ложь;
	Для Н = 0 По МаксИндексКолонок Цикл
		
		ЗначениеЯчейки = УдалитьПереносыСтроки(СтрокаДанных[Н]);
		Если ТипЗнч(ЗначениеЯчейки) <> Тип("Строка") Или ПустаяСтрока(ЗначениеЯчейки) Тогда
			
			Продолжить;
			
		КонецЕсли;
		ПодготовленноеЗначение = ПодготовитьСтроку(ЗначениеЯчейки);
		Если ПодготовленноеЗначение = "код" ИЛИ Найти(ПодготовленноеЗначение, "кодпоокеи") > 0 Тогда
		
			ИскатьЗаголовки = Истина;
		
		КонецЕсли;	
		
	КонецЦикла;
	Если Не ИскатьЗаголовки Тогда
		
		Возврат;
		
	КонецЕсли; 	
	
	Для Н = 0 По МаксИндексКолонок Цикл
		
		ЗначениеЯчейки = УдалитьПереносыСтроки(СтрокаДанных[Н]);
		Если ТипЗнч(ЗначениеЯчейки) <> Тип("Строка") Или ПустаяСтрока(ЗначениеЯчейки) Тогда
			
			Продолжить;
			
		КонецЕсли;
		ПодготовленноеЗначение = ПодготовитьСтроку(ЗначениеЯчейки);
		МассивЗаголовков = ТаблицаЗаголовков.НайтиСтроки(Новый Структура("КолонкаНайдена, СтрокаЗаголовка", Ложь, 2));
		Для Каждого ЭлементМассива Из МассивЗаголовков Цикл			
			
			Если Найти(ПодготовленноеЗначение, ЭлементМассива.СтрокаПоиска) > 0 Тогда

				Если ВидДокумента = "ТОРГ12" И ЭлементМассива.НазваниеКолонки = "Артикул" Тогда
					
					Если ПодготовленноеЗначение = "код" Тогда 
						
						ЭлементМассива.ИндексКолонки = Н;
						ЭлементМассива.КолонкаНайдена = Истина;
						
					КонецЕсли;
					
				Иначе
				
					ЭлементМассива.ИндексКолонки = Н;
					ЭлементМассива.КолонкаНайдена = Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПроверитьНумерациюКолонокТабличнойЧасти(СтрокаДанных, ТаблицаЗаголовков)

	Для Каждого СтрокаЗаголовков Из ТаблицаЗаголовков Цикл
		
		ЗначениеЯчейки = УдалитьПереносыСтроки(Строка(СтрокаДанных[СтрокаЗаголовков.ИндексКолонки]));
		Если Не ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
			
			Продолжить;
			
		КонецЕсли;	
		ПодготовленноеЗначение = ПодготовитьСтроку(ЗначениеЯчейки);		
		Если СтрокаЗаголовков.НомерКолонки = ПодготовленноеЗначение Тогда
			
			СтрокаЗаголовков.НумерацияКолонкиНайдена = Истина;	
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура РазобратьСтрокуТабличнойЧасти(СтрокаДанных, ТаблицаЗаголовков, НомерСтрокиТовара, ТаблицаТоваров)

	ЗаголовокНомерПоПорядку = ТаблицаЗаголовков.Найти("НомТов", "НазваниеКолонки");
	ЗначениеЯчейки = УдалитьПереносыСтроки(СтрокаДанных[ЗаголовокНомерПоПорядку.ИндексКолонки]);
	ПодготовленноеЗначение = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЗначениеЯчейки);
	Если ПодготовленноеЗначение <> НомерСтрокиТовара Тогда
		
		Возврат;
		
	КонецЕсли;	
	НоваяСтрокаТовара = ТаблицаТоваров.Добавить();	
	МассивЗаголовков = ТаблицаЗаголовков.НайтиСтроки(Новый Структура("КолонкаНайдена", Истина));
	Для Каждого ЭлементЗаголовка Из МассивЗаголовков Цикл
		
		ЗначениеЯчейки = УдалитьПереносыСтроки(СтрокаДанных[ЭлементЗаголовка.ИндексКолонки]);		
		Если ЭлементЗаголовка.ТипДанных = "Число" Тогда
			
			Если ЭлементЗаголовка.НазваниеКолонки = "СтавкаНДС" Тогда
				
				ЗначениеЯчейки = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЦифрыИзСтроки(ЗначениеЯчейки));	
				
			Иначе	
				
				ЗначениеЯчейки = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЗначениеЯчейки);
				
			КонецЕсли;
			
		ИначеЕсли ЭлементЗаголовка.ТипДанных = "Строка" Тогда
			
			ЗначениеЯчейки = Строка(ЗначениеЯчейки);
			
		КонецЕсли;	
			
		НоваяСтрокаТовара[ЭлементЗаголовка.НазваниеКолонки] = ЗначениеЯчейки;
		
	КонецЦикла;
    НомерСтрокиТовара = НомерСтрокиТовара + 1;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаписьДанныхДокументаВXML

Функция ЗаписатьДанныеВXML(ДанныеДокумента)
	
	ВременныйКаталог = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор()) + ПолучитьРазделительПути();
	СоздатьКаталог(ВременныйКаталог);	
	УдалитьФайлы(ВременныйКаталог, "*");
	Ид = Строка(Новый УникальныйИдентификатор());
	ТекстОшибки = "";
	
	СформироватьXMLДокумента(ДанныеДокумента, ВременныйКаталог, ТекстОшибки);	
	СформироватьТранспортнуюИнформациюXML(ВременныйКаталог, Ид);
	СформироватьКарточкуXML(ВременныйКаталог, Ид, ДанныеДокумента);
	
	ФайлАрхива = ПолучитьИмяВременногоФайла("zip");
	ЗипКонтейнер = Новый ЗаписьZipФайла();	
	ЗипКонтейнер.Открыть(ФайлАрхива);	
	ОбъектыДобавляемыеВАрхив = ВременныйКаталог + "*";
	ЗипКонтейнер.Добавить(ОбъектыДобавляемыеВАрхив);
	ЗипКонтейнер.Записать();	
	
	УдалитьФайлы(ВременныйКаталог);
	
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		Возврат ФайлАрхива;
		
	КонецЕсли;
	
КонецФункции

Процедура СформироватьXMLДокумента(ДанныеДокумента, ВременныйКаталог, ТекстОшибки)
		
	Попытка
	
	    ДанныеПоставщика = ДанныеДокумента.Поставщик;
		ДанныеГрузополучателя = ДанныеДокумента.Грузополучатель;
		ДатаСеанса = Формат(ТекущаяДатаСеанса(), "ДФ=dd.MM.yyyy"); 
		СтруктураФайла = Новый Структура("Префикс, ИДПолучателя, ИДОтправителя, ГГГГММДД, УникальныйИдентификатор");
		СтруктураФайла.Префикс = "DP_OTORG12";
		СтруктураФайла.ИДПолучателя = ДанныеГрузополучателя.ИНН + ?(ДанныеГрузополучателя.Свойство("КПП"),
			"_" + ДанныеГрузополучателя.КПП, "");
		СтруктураФайла.ИДОтправителя = ДанныеПоставщика.ИНН + ?(ДанныеПоставщика.Свойство("КПП"),
			"_" + ДанныеПоставщика.КПП, "");
		СтруктураФайла.ГГГГММДД = ДатаСеанса;
		СтруктураФайла.УникальныйИдентификатор = Строка(Новый УникальныйИдентификатор());
		ИдФайла = ЭлектронныеДокументыСлужебный.ФНСИмяФайла(СтруктураФайла);
			
		ПространствоИменСхемы = "OTORG12";
		Файл = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Файл", ПространствоИменСхемы);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Файл, "ИдФайл",   ИдФайла,   Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", "1С:Предприятие 8", , ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", "5.01", Истина, ТекстОшибки);				
		
		СвУчДокОбор = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Файл.СвУчДокОбор", ПространствоИменСхемы);
		КС = Новый КвалификаторыСтроки(46, ДопустимаяДлина.Фиксированная);
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		ОписаниеТиповСтрока46 = Новый ОписаниеТипов(Массив, , КС);
		
		ИдОтпр = ОписаниеТиповСтрока46.ПривестиЗначение(СтруктураФайла.ИдОтправителя);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдОтпр", ИдОтпр, Истина, ТекстОшибки);
		ИдПок = ОписаниеТиповСтрока46.ПривестиЗначение(СтруктураФайла.ИдПолучателя);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдПок", ИдПок, Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Файл, "СвУчДокОбор", СвУчДокОбор, Истина, ТекстОшибки);
		
		Документ = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИменСхемы);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Документ, "КНД", "1175004", Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Документ, "ДатаДок", ДанныеДокумента.ДатаТН, Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Документ, "ВремДок", Формат(ТекущаяДатаСеанса(), "ДФ=ЧЧ.мм.сс"), Истина, ТекстОшибки);
		
		СвТНО = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СвТНО", ПространствоИменСхемы);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СвТНО, "НаимПервДок", "Товарная накладная", Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СвТНО, "ОКУДПервДок", "0330212", Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СвТНО, "НомФорм", "ТОРГ-12", Истина, ТекстОшибки);
		
		// поставщик	
		Поставщик = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);
		ИдСв = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("УчастникТип.ИдСв", ПространствоИменСхемы);
		ПодготовитьДанныеУчастника(ДанныеПоставщика, ПространствоИменСхемы, ИдСв, ТекстОшибки);
	    ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Поставщик, "ИдСв",  ИдСв, , ТекстОшибки);		
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СвТНО, "Поставщик",  Поставщик, , ТекстОшибки);	
		
		// грузополучатель	
		Грузополучатель = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);
		ИдСв = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("УчастникТип.ИдСв", ПространствоИменСхемы);
		ПодготовитьДанныеУчастника(ДанныеГрузополучателя, ПространствоИменСхемы, ИдСв, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Грузополучатель, "ИдСв",  ИдСв, , ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СвТНО, "ГрузПолуч",  Грузополучатель, , ТекстОшибки);	
		
		// плательщик
		ДанныеПлательщика = ДанныеДокумента.Плательщик;
		Плательщик = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);
		ИдСв = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("УчастникТип.ИдСв", ПространствоИменСхемы);
		ПодготовитьДанныеУчастника(ДанныеПлательщика, ПространствоИменСхемы, ИдСв, ТекстОшибки);
	    ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Плательщик, "ИдСв",  ИдСв, , ТекстОшибки);		
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СвТНО, "Плательщик",  Плательщик, , ТекстОшибки);	
		
		// тн
		ТН = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ТН", ПространствоИменСхемы);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ТН, "НомТН", ДанныеДокумента.НомТН, Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ТН, "ДатаТН", ДанныеДокумента.ДатаТН, Истина, ТекстОшибки);
		
		// таблица товаров
		Таблица = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ТН.Таблица", ПространствоИменСхемы);	 
		СуммаБезНДСВсего = 0;
		СуммаСНДСВсего = 0;
		Для Каждого Товар Из ДанныеДокумента.ТаблицаТоваров Цикл		
			
			СведТов = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ТН.Таблица.СвТов", ПространствоИменСхемы);		
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СведТов, "НомТов", Товар.НомТов, Истина, ТекстОшибки);		
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СведТов, "НаимЕдИзм", ?(ПустаяСтрока(Товар.НаимЕдИзм), "шт", Товар.НаимЕдИзм), Истина, ТекстОшибки);		
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СведТов, "Нетто", Товар.Нетто, Истина, ТекстОшибки);		
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СведТов, "НаимТов", Товар.НаимТов, , ТекстОшибки);				
			Если СтрДлина(Товар.ОКЕИ_Тов) = 3 Тогда
				
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СведТов, "ОКЕИ_Тов", Товар.ОКЕИ_Тов, , ТекстОшибки);
				
			КонецЕсли;  						
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СведТов, "Цена", Товар.Цена, , ТекстОшибки);				
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СведТов, "СумБезНДС", Товар.СумБезНДС, , ТекстОшибки);				
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СведТов, "СтавкаНДС", Товар.СтавкаНДС, , ТекстОшибки);		
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СведТов, "СумНДС", Товар.СумУчНДС - Товар.СумБезНДС, , ТекстОшибки);		
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СведТов, "СумУчНДС", Товар.СумУчНДС, Истина, ТекстОшибки);
			СуммаБезНДСВсего = СуммаБезНДСВсего + Товар.СумБезНДС;
			СуммаСНДСВсего = СуммаСНДСВсего + Товар.СумУчНДС; 
			
			Таблица.СвТов.Добавить(СведТов);
			
		КонецЦикла;
		
		// итого по таблице товаров
		ВсегоНакл = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ТН.Таблица.ВсегоНакл", ПространствоИменСхемы);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ВсегоНакл, "СумБезНДСВс", СуммаБезНДСВсего, , ТекстОшибки);	
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ВсегоНакл, "СумНДСВс", СуммаСНДСВсего - СуммаБезНДСВсего, , ТекстОшибки);	
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ВсегоНакл, "СумУчНДСВс", СуммаСНДСВсего, , ТекстОшибки);	
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Таблица, "ВсегоНакл", ВсегоНакл, , ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ТН, "Таблица", Таблица, Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СвТНО, "ТН", ТН, Истина, ТекстОшибки);	
		
		ИнфПол = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ИнфПол", ПространствоИменСхемы);
		СтрокаИнфПол = "<Данные><Реквизит Имя=""ЗагрузкаИзФайлаExcel"" Значение=""Истина""/></Данные>";
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ИнфПол, "ТекстИнф", СтрокаИнфПол, , ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СвТНО, "ИнфПол", ИнфПол, Истина, ТекстОшибки);	
		
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Документ, "СвТНО", СвТНО, Истина, ТекстОшибки);
		Подписант = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Документ, "Подписант", Подписант, Истина, ТекстОшибки);

		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, ТекстОшибки);
		Файл.Проверить();
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
		ЭлектронныеДокументыВнутренний.ВыгрузитьЭДвФайл(Файл, ВременныйКаталог + "doc.xml", Ложь, "windows-1251");  	
		
	Исключение
		
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
																					
		Если ПустаяСтрока(ТекстОшибки) Тогда
			
			ТекстОшибки = ТекстСообщения;	
			
		КонецЕсли;
		
	КонецПопытки;
	
КонецПроцедуры // ЗаписатьДанныеВXML()

Процедура ПодготовитьДанныеУчастника(ДанныеУчастника, ПространствоИменСхемы, ИдСв, ТекстОшибки)
	
	Если СтрДлина(ДанныеУчастника.ИНН) > 10 Тогда
		
		ФИО = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);
		СвФЛ = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвФЛ", ПространствоИменСхемы);		
		ДанныеИП = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ДанныеУчастника.НаименованиеПолное, " ", Истина, Истина);
		Для Н = 0 По ДанныеИП.ВГраница() Цикл
			
			Если Н = 0 Тогда
				
				ФИО.Фамилия = ДанныеИП[Н];
				
			ИначеЕсли  Н = 1 Тогда
				
				ФИО.Имя = ДанныеИП[Н];
				
			ИначеЕсли  Н = 2 Тогда
				
				ФИО.Отчество = ДанныеИП[Н];
				
			КонецЕсли;
			
		КонецЦикла;  
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СвФЛ, "ФИОИП", ФИО, , ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СвФЛ, "ИННФЛ", ДанныеУчастника.ИНН, , ТекстОшибки);			
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ИдСв, "СвФЛ",  СвФЛ, , ТекстОшибки);			
		
	Иначе
		
		СвЮЛ = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвЮЛ", ПространствоИменСхемы);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СвЮЛ, "НаимОрг", ДанныеУчастника.НаименованиеПолное, , ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СвЮЛ, "ИННЮЛ", ДанныеУчастника.ИНН, , ТекстОшибки);
		Если ДанныеУчастника.Свойство("КПП") Тогда
			
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СвЮЛ, "КПП", ДанныеУчастника.КПП, , ТекстОшибки);
			
		КонецЕсли;
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ИдСв, "СвЮЛ",  СвЮЛ, , ТекстОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьТранспортнуюИнформациюXML(ВременныйКаталог, Ид)
	
	ТекстОшибки = "";
	ПутьКОписанию = "{http://api-invoice.taxcom.ru/meta}.ContainerDescription";	
	Попытка
		
		ОписаниеКонтейнера = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML(ПутьКОписанию);
		
		Документооборот = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML(ПутьКОписанию + ".DocFlow");
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Документооборот, "ID", Ид, , ТекстОшибки);
		
		ДокументыСхемы  = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML(ПутьКОписанию + ".DocFlow.Documents");
		Документ     = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML(ПутьКОписанию + ".DocFlow.Documents.Document"); 		
		
		Файлы = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML(ПутьКОписанию + ".DocFlow.Documents.Document.Files");
		ФайлДанных = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML(ПутьКОписанию + ".DocFlow.Documents.Document.Files.MainImage");
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ФайлДанных, "Path", "doc.xml", Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Файлы, "MainImage", ФайлДанных, , ТекстОшибки);				
			
		ФайлКарточки = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML(ПутьКОписанию + ".DocFlow.Documents.Document.Files.ExternalCard");
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ФайлКарточки, "Path", "card.xml", , ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Файлы, "ExternalCard", ФайлКарточки, , ТекстОшибки);
		
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Документ, "Files", Файлы, , ТекстОшибки);
		ДокументыСхемы.Document.Добавить(Документ);
		
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Документооборот, "Documents", ДокументыСхемы, , ТекстОшибки);
		ОписаниеКонтейнера.DocFlow.Добавить(Документооборот);
		
		ОписаниеКонтейнера.Проверить();		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
		ЭлектронныеДокументыВнутренний.ВыгрузитьЭДвФайл(ОписаниеКонтейнера, ВременныйКаталог + "meta.xml", Ложь);		
		
	Исключение
		
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование транспортной информации'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);                                   		
																					
	КонецПопытки; 

КонецПроцедуры

Процедура СформироватьКарточкуXML(ВременныйКаталог, Ид, ДанныеДокумента)

	ПутьКОписанию = "{http://api-invoice.taxcom.ru/card}.Card";
	ТекстОшибки = "";
	ДанныеПоставщика = ДанныеДокумента.Поставщик;
	ДанныеГрузополучателя = ДанныеДокумента.Грузополучатель;	
	Попытка
		
		Карточка = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML(ПутьКОписанию);
		
		АбонентОтправитель = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML(ПутьКОписанию + ".Sender.Abonent");
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(АбонентОтправитель, "Id", ДанныеПоставщика.ИНН, , ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(АбонентОтправитель, "Name", ДанныеПоставщика.НаименованиеПолное, , ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(АбонентОтправитель, "Inn", ДанныеПоставщика.ИНН, , ТекстОшибки);				
		Отправитель = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML(ПутьКОписанию + ".Sender");
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Отправитель, "Abonent", АбонентОтправитель, , ТекстОшибки);
	
		АбонентПолучатель  = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML(ПутьКОписанию + ".Receiver.Abonent");								
		Получатель  = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML(ПутьКОписанию + ".Receiver");
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Получатель, "Abonent", АбонентПолучатель, , ТекстОшибки);
		
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Карточка, "Sender", Отправитель, , ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Карточка, "Receiver", Получатель, , ТекстОшибки);
		
		Идентификаторы = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML(ПутьКОписанию + ".Identifiers");
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Идентификаторы, "ExternalIdentifier", Ид, , ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Карточка, "Identifiers", Идентификаторы, , ТекстОшибки);
		
		Тип = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML(ПутьКОписанию + ".Type");
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Тип, "Name", "Consignment", , ТекстОшибки);		
			
		Описание = ЭлектронныеДокументыВнутренний.ПолучитьОбъектТипаCML(ПутьКОписанию + ".Description");
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Описание, "Title", "ТОРГ-12 (титул продавца)", , ТекстОшибки);				
				
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Карточка, "Type", Тип, , ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Карточка, "Description", Описание, , ТекстОшибки);
		
		Карточка.Проверить();		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
		ЭлектронныеДокументыВнутренний.ВыгрузитьЭДвФайл(Карточка, ВременныйКаталог + "card.xml", Ложь);
	
	Исключение
		
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование карточки такском'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);		
	
	КонецПопытки;	

КонецПроцедуры  

#КонецОбласти

#Область ЗагрузкаЭД

Функция ПолучитьКонтрагентаИДанныеДокумента(АдресаФайловXML, ИдентификаторФормы) Экспорт
	
	ТаблицаДанных = Документы.РеализацияТоваровУслуг.РазобратьРеализациюТоваровИУслугВXML(АдресаФайловXML);
	ДанныеДокумента = Неопределено;
	ФайлДанных = Неопределено;
	Если ТаблицаДанных.Количество() > 0 Тогда
		
		ТекстОшибки = ТаблицаДанных[0].ТекстОшибки;
		Если Не ПустаяСтрока(ТекстОшибки) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Возврат Неопределено;
			
		КонецЕсли;		
		ДанныеДокумента = ТаблицаДанных[0].ДанныеДокумента;
		ФайлДанных = ПоместитьВоВременноеХранилище(ТаблицаДанных[0].ФайлДанных, ИдентификаторФормы);		
		
	КонецЕсли;		
	Если ДанныеДокумента = Неопределено Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;       	
	СтруктураЭД = ПолучитьСтруктуруЭД(ДанныеДокумента, ИдентификаторФормы, ФайлДанных);
	
	Возврат СтруктураЭД;
	
КонецФункции 

Функция СоздатьДокументИзЭД(СтруктураЭД) Экспорт
		
	Попытка
				
		ДокументПоступления = СоздатьОбъектИБ(СтруктураЭД.ДанныеДокумента, СтруктураЭД.Контрагент);
		
		Если СтруктураЭД.Свойство("ДанныеСФ") Тогда
			
			СчетФактура = СоздатьОбъектИБ(СтруктураЭД.ДанныеСФ,, ДокументПоступления);
			Если СчетФактура.КодСпособаПолучения <> 1 Тогда // КодСпособаПолучения 1 - в бумажном виде, 2 - электронно
				
				СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
				СчетФактураОбъект.КодСпособаПолучения = 1;
				СчетФактураОбъект.Записать();
				
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат ДокументПоступления;				
				
	Исключение   			
			
		ШаблонСообщения = НСтр("ru='%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			ИнформацияОбОшибке().Описание);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат Неопределено;
			
	КонецПопытки;	

КонецФункции 

Функция СоздатьОбъектИБ(ДанныеДокумента, Контрагент = Неопределено, ДокументПоступления = Неопределено)
		
	СтруктураРазбора = ПолучитьИзВременногоХранилища(ДанныеДокумента);
	ДеревоРазбора = СтруктураРазбора.ДеревоРазбора;	
	СтрокаОбъекта = СтруктураРазбора.СтрокаОбъекта;
	Если ТипЗнч(СтрокаОбъекта) <> Тип("СтрокаДереваЗначений") Тогда
		
		НайденныеСтроки = ДеревоРазбора.Строки.Найти("ЭлектронныеДокументы","ТипОбъекта");
		СтрокаОбъекта = НайденныеСтроки.Строки[0];
		
	КонецЕсли;	
	Если СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
		
		ОписаниеРаботИзДерева = ДеревоРазбора.Строки.Найти("СписокОписаний","ТипОбъекта");
		ОписаниеРаботИзСтрокиОбъекта = СтрокаОбъекта.Строки.Найти("СписокОписаний","Реквизит");
		ОписаниеРаботИзСтрокиОбъекта.ЗначениеРеквизита = ОписаниеРаботИзДерева;
		
	КонецЕсли; 
	Если СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец Или СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
		
		ЗаполнитьНоменклатуру(ДеревоРазбора, Контрагент);
		
	КонецЕсли;	
	Если СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.СчетФактура Тогда
		
		НоваяСтрока = СтрокаОбъекта.Строки.Добавить();
		НоваяСтрока.Реквизит = "ДокументыОснования";
		ДокументыОснования = НоваяСтрока.Строки.Добавить();
		ДокументыОснования.СсылкаНаОбъект = ДокументПоступления;
		
	КонецЕсли; 
	СсылкаНаОбъект = ЭлектронныеДокументыПереопределяемый.СохранитьДанныеОбъектаВБД(СтрокаОбъекта,
			ДеревоРазбора,
			Неопределено);	 
			
	Возврат СсылкаНаОбъект;
	
КонецФункции

Процедура ЗаполнитьНоменклатуру(ДеревоРазбора, Владелец)

	СписокНоменклатуры = ДеревоРазбора.Строки.Найти("Номенклатура", "ТипОбъекта", Истина);
	Если СписокНоменклатуры = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;	
	МассивИдентификаторов = Новый Массив;
	Для Каждого СтрокаСписка Из СписокНоменклатуры.Строки Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаСписка.СсылкаНаОбъект) Тогда
			
			МассивИдентификаторов.Добавить(СтрокаСписка.ИД);
			
		КонецЕсли;
		
	КонецЦикла;	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	НоменклатураПоставщиков.Идентификатор,
	                      |	НоменклатураПоставщиков.Номенклатура
	                      |ИЗ
	                      |	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
	                      |ГДЕ
	                      |	НоменклатураПоставщиков.Владелец = &Владелец
	                      |	И НоменклатураПоставщиков.Идентификатор В(&СписокИдентификаторов)");
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("СписокИдентификаторов", МассивИдентификаторов);
	Выборка = Запрос.Выполнить().Выбрать();
	ИдНоменклатура = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		
		ИдНоменклатура.Вставить(Выборка.Идентификатор, Выборка.Номенклатура);
		
	КонецЦикла;
	СписокНоменклатуры = ДеревоРазбора.Строки.Найти("Номенклатура", "ТипОбъекта", Истина);						  
	Если СписокНоменклатуры = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	Для Каждого СтрокаСписка Из СписокНоменклатуры.Строки Цикл
		
		Если ЗначениеЗаполнено(СтрокаСписка.СсылкаНаОбъект) Тогда
			
			Продолжить;
			
		КонецЕсли;		
		СтрокаСписка.СсылкаНаОбъект = ИдНоменклатура[СтрокаСписка.ИД];
		
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьСтруктуруЭД(ДанныеДокумента, ИдентификаторФормы, ФайлДанных, НаименованиеКонтрагента = "") Экспорт
	
	ДеревоРазбора = ДанныеДокумента.ДеревоРазбора;
	НайденныеСтроки = ДеревоРазбора.Строки.Найти("ЭлектронныеДокументы","ТипОбъекта");
	СтрокаОбъекта = НайденныеСтроки.Строки[0];
	СсылкаКонтрагента = ПолучитьЗначениеРеквизитаДерева(СтрокаОбъекта, "Контрагент", Истина, ДеревоРазбора);	
	Если СсылкаКонтрагента = Неопределено Или СсылкаКонтрагента.Пустая() Тогда
		
		ИндексСтрокиКонтрагента = ПолучитьЗначениеРеквизитаДерева(СтрокаОбъекта, "Контрагент", Истина);	
		СтрокаКонтрагента = ДеревоРазбора.Строки.Найти(ИндексСтрокиКонтрагента, "ИндексСтроки", Истина);
		ИНН = ПолучитьЗначениеРеквизитаДерева(СтрокаКонтрагента, "ИНН", Истина, ДеревоРазбора);
		КПП = ПолучитьЗначениеРеквизитаДерева(СтрокаКонтрагента, "КПП", Истина, ДеревоРазбора);
		СсылкаКонтрагента = ЭлектронныеДокументыПереопределяемый.СсылкаНаОбъектПоИННКПП("Контрагенты", ИНН, КПП);
		Если СсылкаКонтрагента = Неопределено Тогда
			
			СсылкаКонтрагента = ЭлектронныеДокументыПереопределяемый.СсылкаНаОбъектПоИННКПП("Контрагенты", ИНН, Неопределено); // если не найден по ИНН и КПП, ищем только по ИНН
			
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СсылкаКонтрагента) Тогда
			
			СсылкаКонтрагента = НовыйКонтрагент(СтрокаКонтрагента, ДеревоРазбора, Неопределено, НаименованиеКонтрагента); // если не находим по ИНН, создаем нового контрагента
			
		КонецЕсли;
		СтрокаКонтрагента.СсылкаНаОбъект = СсылкаКонтрагента;
		
	КонецЕсли;
	ДанныеДокумента.СтрокаОбъекта = СтрокаОбъекта;
	
	АдресДанныхДокумента = ПоместитьВоВременноеХранилище(ДанныеДокумента, ИдентификаторФормы);
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВидЭД", СтрокаОбъекта.ВидЭД);
	СтруктураЭД.Вставить("СпособОбменаЭД", Перечисления.СпособыОбменаЭД.БыстрыйОбмен);
	СтруктураЭД.Вставить("ДанныеФайлаРазбора", ФайлДанных);
	СтруктураЭД.Вставить("Контрагент"    , СсылкаКонтрагента);                                        
	СтруктураЭД.Вставить("НаправлениеЭД" , Перечисления.НаправленияЭД.Входящий);
	СтруктураЭД.Вставить("ВладелецФайла" , Неопределено);  
	СтруктураЭД.Вставить("ДанныеДокумента" , АдресДанныхДокумента);
	
	Возврат СтруктураЭД;  
	
КонецФункции

Функция НовыйКонтрагент(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, НаименованиеКонтрагента = "") Экспорт
	
	ИНН = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ИНН", Истина, ДеревоРазбора);
	КПП = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "КПП", Истина, ДеревоРазбора);
	
	ОфициальноеНаименование = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ОфициальноеНаименование", Истина, ДеревоРазбора);	
	
	Если СсылкаНаВладельца = Неопределено Тогда
		Контрагент= Справочники.Контрагенты.СоздатьЭлемент();		
	Иначе
		Контрагент= СсылкаНаВладельца.ПолучитьОбъект();
	КонецЕсли;

	ДанныеКонтрагента       = СтрокаДляЗагрузки;
	ПолноеНаименование      = ДанныеКонтрагента.Строки.Найти("ПолноеНаименование", "Реквизит", Истина);
	ЮрФизЛицо               = ДанныеКонтрагента.Строки.Найти("ЮрФизЛицо", "Реквизит", Истина);	
	ЮрАдресСтруктурой       = ДанныеКонтрагента.Строки.Найти("АдресСтруктурой", "Реквизит", Истина);
	Телефон       			= ДанныеКонтрагента.Строки.Найти("Телефоны", "Реквизит", Истина);
	Контакты                = ДанныеКонтрагента.Строки.Найти("Контакты", "Реквизит", Истина); 	
	Если ЗначениеЗаполнено(НаименованиеКонтрагента) Тогда
		
		Контрагент.Наименование = НаименованиеКонтрагента;
		
	Иначе
		
		Контрагент.Наименование = ?(ПустаяСтрока(ОфициальноеНаименование), ПолноеНаименование.ЗначениеРеквизита, ОфициальноеНаименование);
		
	КонецЕсли;
	Контрагент.НаименованиеПолное = ?(ПустаяСтрока(ОфициальноеНаименование), ПолноеНаименование.ЗначениеРеквизита, ОфициальноеНаименование);
	Контрагент.ИНН = ИНН;
	Контрагент.КПП = КПП; 		
	Контрагент.ЮридическоеФизическоеЛицо = ?(ЮрФизЛицо = Неопределено, Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо, ЮрФизЛицо.ЗначениеРеквизита);
	
	ТаблицаКИ = Новый ТаблицаЗначений;
	ТаблицаКИ.Колонки.Добавить("Приемник");
	ТаблицаКИ.Колонки.Добавить("ВидКИ");
	ТаблицаКИ.Колонки.Добавить("СтруктураКИ");
	ТаблицаКИ.Колонки.Добавить("КлючСтроки");   
	
	// Контактная информация 
	Если ЮрАдресСтруктурой <> Неопределено Тогда
		
		СтрокаКИ = ТаблицаКИ.Добавить();
		СтрокаКИ.Приемник = Контрагент;
		СтрокаКИ.ВидКИ = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
		СтрокаКИ.СтруктураКИ = ЮрАдресСтруктурой.ЗначениеРеквизита;
		
		СтрокаКИ = ТаблицаКИ.Добавить();
		СтрокаКИ.Приемник = Контрагент;
		СтрокаКИ.ВидКИ = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
		СтрокаКИ.СтруктураКИ = ЮрАдресСтруктурой.ЗначениеРеквизита;
			
	КонецЕсли;	
	Если Телефон <> Неопределено Тогда
		
		СтрокаКИ = ТаблицаКИ.Добавить();
		СтрокаКИ.Приемник = Контрагент;
		СтрокаКИ.ВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
		СтрокаКИ.СтруктураКИ = Новый Структура("НомерТелефона", Телефон.ЗначениеРеквизита);		
		                                                  
	КонецЕсли;
	УправлениеКонтактнойИнформацией.ЗаполнитьКонтактнуюИнформациюОбъектов(ТаблицаКИ);	
	
	Если Контакты <> Неопределено Тогда
		
		Для Каждого СтрокаДанных Из Контакты.ЗначениеРеквизита Цикл
			
			ЗаполнитьКИПоПредставлению(Контрагент, СтрокаДанных.Представление, СтрокаДанных.Вид);
			
		КонецЦикла;		
		
	КонецЕсли;

	Контрагент.Записать();
	
	// Банковский счет
	НайденныеСтроки = ДеревоРазбора.Строки.Найти("ЭлектронныеДокументы","ТипОбъекта");
	СтрокаОбъекта = НайденныеСтроки.Строки[0];
	ИДБанковскогоСчета = ПолучитьЗначениеРеквизитаДерева(СтрокаОбъекта, "БанковскийСчетКонтрагента", Истина);
	НайденныеСтроки = ДеревоРазбора.Строки.Найти(ИДБанковскогоСчета, "ИндексСтроки", Истина);
	Если НайденныеСтроки <> Неопределено Тогда
				
		НомерСчета = ПолучитьЗначениеРеквизитаДерева(НайденныеСтроки, "НомерСчета", Истина);
		Если ЗначениеЗаполнено(НомерСчета) Тогда	
		
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("Владелец", Контрагент.Ссылка);
			
			БанковскийСчет = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("БанковскиеСчетаОрганизаций", НомерСчета, ДопПараметры);
			Если БанковскийСчет = Неопределено Тогда
				БанковскийСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
				БанковскийСчет.Владелец = Контрагент.Ссылка;
				БанковскийСчет.НомерСчета = НомерСчета;
			Иначе
				БанковскийСчет = БанковскийСчет.Получитьобъект();
				БанковскийСчет.Владелец = Контрагент.Ссылка;
			КонецЕсли;
					
			Если Не ЗначениеЗаполнено(БанковскийСчет.Банк) Тогда
				
				ДанныеБанка = ПолучитьЗначениеРеквизитаДерева(НайденныеСтроки, "Банк", Истина, ДеревоРазбора);
				Если ДанныеБанка <> Неопределено Тогда
					
					БанкБИК = ДанныеБанка.Код;
					Если ЗначениеЗаполнено(БанкБИК) Тогда
						
						Банк = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Банки", БанкБИК);
						Если Не ЗначениеЗаполнено(Банк) Тогда
							
							МассивБанковИзКлассификатора = Новый Массив;
							МассивБанковИзКлассификатора.Добавить(РаботаСБанкамиПереопределяемый.СсылкаПоКлассификатору(БанкБИК));
							РаботаСБанкамиПереопределяемый.ПодобратьБанкИзКлассификатора(МассивБанковИзКлассификатора);
							Банк = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Банки", БанкБИК);
							
						КонецЕсли;						
						БанковскийСчет.Банк = Банк;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			БанковскийСчет.ВалютаДенежныхСредств = Справочники.Валюты.НайтиПоКоду("643"); 
			БанковскийСчет.Наименование = Строка(Банк) + " (" + БанковскийСчет.НомерСчета  + ", руб.)";
			БанковскийСчет.Записать();
			                 
		КонецЕсли;
		
	КонецЕсли;		
	Контрагент.Записать();
	
	Возврат Контрагент.Ссылка;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыФункции

Процедура ЗаполнитьКИПоПредставлению(КонтрагентОбъект, Представление, ВидКИ) Экспорт
	
	НоваяСтрока               = КонтрагентОбъект.КонтактнаяИнформация.Добавить();
	НоваяСтрока.Тип           = ВидКИ.Тип;
	НоваяСтрока.Вид           = ВидКИ;
	НоваяСтрока.Представление = Представление;
	
КонецПроцедуры

Функция ПолучитьЗначениеРеквизитаДерева(СтрокаДерева, ИмяРеквизита, ВключатьПодчиненные = Ложь, ДеревоРазбора = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Если СтрокаДерева.Строки.Количество()>0 Тогда
		НайденнаяСтрока = СтрокаДерева.Строки.Найти(ИмяРеквизита, "Реквизит", ВключатьПодчиненные);
	Иначе
		НайденнаяСтрока = СтрокаДерева;
	КонецЕсли;
	
	Если НайденнаяСтрока <> Неопределено Тогда
		Результат = НайденнаяСтрока.ЗначениеРеквизита;
		// Если реквизит ссылочного типа (передали реквизит ДеревоРазбора),
		// тогда был найден всего лишь индекс строки
		Если ЗначениеЗаполнено(ДеревоРазбора) Тогда 
			НайденнаяСтрока = ДеревоРазбора.Строки.Найти(Результат, "ИндексСтроки", Истина);
			Если НайденнаяСтрока <> Неопределено Тогда
				Результат = НайденнаяСтрока.СсылкаНаОбъект;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
	
Функция ЗагрузитьФайлВТаблицу(ИмяВременногоФайла, Расширение)
	
	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("ЕстьОшибки", Ложь);	
	Если Расширение = "xlsx" Тогда 
		
		ЗагрузитьВТаблицуXLSX(ИмяВременногоФайла, РезультатВыполнения);
		
	ИначеЕсли Расширение = "mxl" Тогда 
		
		ЗагрузитьВТаблицуMXL(ИмяВременногоФайла, РезультатВыполнения);	
		
	КонецЕсли;
	
	Возврат РезультатВыполнения;	
	
КонецФункции

#КонецОбласти