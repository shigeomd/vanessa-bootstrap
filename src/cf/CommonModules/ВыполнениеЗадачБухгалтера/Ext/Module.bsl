// ИНТЕРФЕЙС МОДУЛЯ

Функция ОписаниеДействия(Организация, РегистрацияВНалоговомОргане, Срок, Правило, ПериодСобытия, Периодичность, Описание, СпособОплаты) Экспорт
	
	Если ТипЗнч(Правило) = Тип("СправочникСсылка.ПравилаРегулярныхПлатежей") Тогда
		
		Возврат ОписаниеДействияРегулярныйПлатеж(Организация, Срок, Правило, ПериодСобытия, Периодичность, Описание);
		
	Иначе
		
		Возврат ОписаниеДействияНалоговыйПлатеж(
			Организация,
			РегистрацияВНалоговомОргане,
			Срок,
			Правило,
			ПериодСобытия,
			Периодичность,
			Описание,
			СпособОплаты);
		
	КонецЕсли
	
КонецФункции

Функция НовыйОписаниеПлатежа() Экспорт
	
	ОписаниеПлатежа = Новый Структура;
	ОписаниеПлатежа.Вставить("Организация",        Справочники.Организации.ПустаяСсылка());
	ОписаниеПлатежа.Вставить("Налог",              Справочники.ВидыНалоговИПлатежейВБюджет.ПустаяСсылка());
	ОписаниеПлатежа.Вставить("СпособОплаты",       Перечисления.СпособыУплатыНалогов.ПустаяСсылка());
	ОписаниеПлатежа.Вставить("ИмяЗадачи",          "");
	ОписаниеПлатежа.Вставить("Период",             '00010101');
	ОписаниеПлатежа.Вставить("ПоказательПериода",  "");
	ОписаниеПлатежа.Вставить("Аванс",              Ложь);
	ОписаниеПлатежа.Вставить("КБК",                "");
	ОписаниеПлатежа.Вставить("ОКАТО",              "");
	ОписаниеПлатежа.Вставить("Сумма",              0);
	ОписаниеПлатежа.Вставить("Описание",           "");
	ОписаниеПлатежа.Вставить("Декларация",         Документы.РегламентированныйОтчет.ПустаяСсылка());
	ОписаниеПлатежа.Вставить("ДатаДекларации",     '00010101');
	ОписаниеПлатежа.Вставить("КодНалоговогоОргана", "");
	
	Возврат ОписаниеПлатежа;
	
КонецФункции

Функция ЗначенияЗаполненияПлатежногоДокумента(ОписаниеПлатежа) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ОписаниеПлатежа.КодНалоговогоОргана) Тогда
		// Если не заполен Код налогового органа, попробуем получить его из сведений об организации
		ДанныеНалоговогоОргана = Справочники.ВидыНалоговИПлатежейВБюджет.ДанныеНалоговогоОрганаПоКБК(ОписаниеПлатежа.КБК);
		Если НЕ ПустаяСтрока(ДанныеНалоговогоОргана.ВидНалоговогоОргана) Тогда
			СписокПараметров = Новый Массив;
			СписокПараметров.Добавить(ДанныеНалоговогоОргана.ВидНалоговогоОргана);
			СписокПараметров.Добавить("ОКТМО");
			СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
				ОписаниеПлатежа.Организация,
				ОписаниеПлатежа.Период,
				СписокПараметров);
			СведенияОбОрганизации.Свойство(ДанныеНалоговогоОргана.ВидНалоговогоОргана, ОписаниеПлатежа.КодНалоговогоОргана);
			Если ПустаяСтрока(ОписаниеПлатежа.ОКАТО) Тогда
				ОписаниеПлатежа.ОКАТО = СведенияОбОрганизации.ОКТМО;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ПустаяСтрока(ОписаниеПлатежа.ОКАТО) Тогда
		СписокПараметров = Новый Массив;
		СписокПараметров.Добавить("ОКТМО");
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			ОписаниеПлатежа.Организация,
			ОписаниеПлатежа.Период,
			СписокПараметров);
		ОписаниеПлатежа.ОКАТО = СведенияОбОрганизации.ОКТМО;
	КонецЕсли;
	
	ДанныеПлатежногоДокумента = Новый Структура;
	// Контекст
	ДанныеПлатежногоДокумента.Вставить("Организация",                ОписаниеПлатежа.Организация);
	ДанныеПлатежногоДокумента.Вставить("Налог",                      ОписаниеПлатежа.Налог);
	ДанныеПлатежногоДокумента.Вставить("ВидНалоговогоОбязательства", Перечисления.ВидыПлатежейВГосБюджет.Налог);
	
	Если ОписаниеПлатежа.СпособОплаты = Перечисления.СпособыУплатыНалогов.НаличнымиПоКвитанции Тогда
		
		ДанныеПлатежногоДокумента.Вставить("ВидОперации", Перечисления.ВидыОперацийРКО.УплатаНалога);
		ДанныеПлатежногоДокумента.Вставить("СчетКасса",   ПланыСчетов.Хозрасчетный.КассаОрганизации);
		
		Если НЕ ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(ОписаниеПлатежа.Организация) Тогда
			ИндивидуальныйПредприниматель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОписаниеПлатежа.Организация, "ИндивидуальныйПредприниматель");
			Если ЗначениеЗаполнено(ИндивидуальныйПредприниматель) Тогда
				ДанныеФизЛица = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(
					ОписаниеПлатежа.Организация, ИндивидуальныйПредприниматель, ОписаниеПлатежа.Период, Ложь);
				ДанныеПлатежногоДокумента.Вставить("Выдать",      ДанныеФизЛица.Представление);
				ДанныеПлатежногоДокумента.Вставить("ПоДокументу", ДанныеФизЛица.ПредставлениеДокумента);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		ДанныеПлатежногоДокумента.Вставить("ПеречислениеВБюджет", Истина);
		ДанныеПлатежногоДокумента.Вставить("ВидОперации",         Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога);
	КонецЕсли;
	
	ДанныеПлатежногоДокумента.Вставить("ВалютаДокумента", ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	ДанныеПлатежногоДокумента.Вставить("ВидПеречисленияВБюджет", ПлатежиВБюджетКлиентСервер.ВидПеречисления(ОписаниеПлатежа.КБК, ОписаниеПлатежа.Период));
	
	// Известны из декларации
	ДанныеПлатежногоДокумента.Вставить("СуммаДокумента",    ОписаниеПлатежа.Сумма);
	ПоказательДаты = ПлатежиВБюджетКлиентСервер.ПреобразоватьДатуКСтроке(ОписаниеПлатежа.ДатаДекларации);
	ДанныеПлатежногоДокумента.Вставить("ПоказательДаты",    ПоказательДаты);
	ДанныеПлатежногоДокумента.Вставить("ДокументОснование", ОписаниеПлатежа.Декларация);
	
	// Зависят от налога, но известны из декларации
	ДанныеПлатежногоДокумента.Вставить("КодБК",             ОписаниеПлатежа.КБК);
	ДанныеПлатежногоДокумента.Вставить("КодОКАТО",          ОписаниеПлатежа.ОКАТО);
	ДанныеПлатежногоДокумента.Вставить("ПоказательПериода", ОписаниеПлатежа.ПоказательПериода);
	
	Если ЗначениеЗаполнено(ОписаниеПлатежа.Налог) И ОписаниеПлатежа.Налог <> Справочники.ВидыНалоговИПлатежейВБюджет.ПрочиеНалогиИСборы Тогда
		
		ПредставлениеНалоговогоПериода = ПлатежиВБюджетКлиентСервер.ПредставлениеНалоговогоПериода(
			ОписаниеПлатежа.ПоказательПериода);
			
		НазначениеПлатежа = Справочники.ВидыНалоговИПлатежейВБюджет.НазначениеПлатежа(
			ОписаниеПлатежа.Налог, , ОписаниеПлатежа.Организация, ОписаниеПлатежа.Период, ПредставлениеНалоговогоПериода);
			
	Иначе
		НазначениеПлатежа = ОписаниеПлатежа.Описание;
	КонецЕсли;
	
	Если ОписаниеПлатежа.СпособОплаты = Перечисления.СпособыУплатыНалогов.НаличнымиПоКвитанции Тогда
		ДанныеПлатежногоДокумента.Вставить("Основание", НазначениеПлатежа);
	Иначе
		ДанныеПлатежногоДокумента.Вставить("НазначениеПлатежа", НазначениеПлатежа);
	КонецЕсли;
	
	Если ОписаниеПлатежа.Аванс И Не ПлатежиВБюджетКлиентСервер.ДействуетПриказ107н(ОбщегоНазначенияБП.ПолучитьРабочуюДату()) Тогда
		ДанныеПлатежногоДокумента.Вставить("ПоказательТипа", ПлатежиВБюджетКлиентСервер.ТипПлатежаАванс());
	КонецЕсли;
	
	// Зависят от налога, но не известны из декларации
	НастройкиУплатыНалога = РегистрыСведений.РеквизитыУплатыНалоговИПлатежейВБюджет.НайтиПоКБК(
		ОписаниеПлатежа.Организация,
		ОписаниеПлатежа.КБК,
		ОписаниеПлатежа.ОКАТО);
	
	Если НастройкиУплатыНалога <> Неопределено Тогда
		
		ДанныеПлатежногоДокумента.Вставить("Контрагент",      НастройкиУплатыНалога.Получатель);
		ДанныеПлатежногоДокумента.Вставить("СчетКонтрагента", НастройкиУплатыНалога.СчетПолучателя);
		ДанныеПлатежногоДокумента.Вставить(
			"СтатьяДвиженияДенежныхСредств",
			НастройкиУплатыНалога.СтатьяДвиженияДенежныхСредств);
		
		Если НЕ ПустаяСтрока(НастройкиУплатыНалога.НазначениеПлатежа) Тогда
			Если НастройкиУплатыНалога.ВидПеречисленияВБюджет <> Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж Тогда
				ДанныеПлатежногоДокумента.Вставить("НазначениеПлатежа", НастройкиУплатыНалога.НазначениеПлатежа);
			Иначе
				ПредставлениеНалоговогоПериода = ПлатежиВБюджетКлиентСервер.ПредставлениеНалоговогоПериода(
					ДанныеПлатежногоДокумента.ПоказательПериода);
				Если НЕ ПустаяСтрока(ПредставлениеНалоговогоПериода) Тогда
					НазначениеПлатежа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '%1 %2'"),
						НастройкиУплатыНалога.НазначениеПлатежа,
						ПредставлениеНалоговогоПериода);
					ДанныеПлатежногоДокумента.Вставить("НазначениеПлатежа", НазначениеПлатежа);
				Иначе
					ДанныеПлатежногоДокумента.Вставить("НазначениеПлатежа", НастройкиУплатыНалога.НазначениеПлатежа);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ДанныеПлатежногоДокумента.Вставить("ВидПеречисленияВБюджет", НастройкиУплатыНалога.ВидПеречисленияВБюджет);
		ДанныеПлатежногоДокумента.Вставить("ПоказательТипа",         НастройкиУплатыНалога.ПоказательТипа);
		ДанныеПлатежногоДокумента.Вставить("СтатусСоставителя",      НастройкиУплатыНалога.СтатусСоставителя);
		ДанныеПлатежногоДокумента.Вставить("ОчередностьПлатежа",     НастройкиУплатыНалога.ОчередностьПлатежа);
		ДанныеПлатежногоДокумента.Вставить("ПоказательОснования",    НастройкиУплатыНалога.ПоказательОснования);
		
		// ПоказательПериода точнее определяется из декларации, чем задан в настройке
		
		Если ОписаниеПлатежа.СпособОплаты = Перечисления.СпособыУплатыНалогов.НаличнымиПоКвитанции Тогда
			АналитикаПлатежаВБюджетПриУплатеНаличными = Документы.РасходныйКассовыйОрдер.АналитикаПлатежаВБюджетПриУплатеНаличными(
				НастройкиУплатыНалога.СчетУчета,
				ОписаниеПлатежа.Организация,
				ОписаниеПлатежа.КБК,
				ОписаниеПлатежа.КодНалоговогоОргана,
				ОписаниеПлатежа.Период);
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ДанныеПлатежногоДокумента, АналитикаПлатежаВБюджетПриУплатеНаличными);
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ОписаниеПлатежа.КодНалоговогоОргана) Тогда
			ВидГосоргана = Справочники.Контрагенты.ВидГосударственногоОрганаПоКБК(ДанныеПлатежногоДокумента.КодБК);
			ДанныеПлатежногоДокумента.Вставить("КодНалоговогоОргана", ОписаниеПлатежа.КодНалоговогоОргана);
			
			//определяем получателя по данным информационной базы
			НалоговыйОрган = ДанныеГосударственныхОрганов.ГосударственныйОрган(ВидГосоргана, ОписаниеПлатежа.КодНалоговогоОргана);
			Если ЗначениеЗаполнено(НалоговыйОрган.Ссылка) Тогда
				ДанныеПлатежногоДокумента.Вставить("Контрагент",      НалоговыйОрган.Ссылка);
				ДанныеПлатежногоДокумента.Вставить("СчетКонтрагента", НалоговыйОрган.ПлатежныеРеквизиты.БанковскийСчет);
			Иначе
				//Определяем данные получателя из веб-сервиса
				Если ВидГосоргана = Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган Тогда
					Реквизиты = ДанныеГосударственныхОрганов.РеквизитыНалоговогоОрганаПоКоду(ОписаниеПлатежа.КодНалоговогоОргана);
				ИначеЕсли ВидГосоргана = Перечисления.ВидыГосударственныхОрганов.ОрганПФР Тогда
					Реквизиты = ДанныеГосударственныхОрганов.РеквизитыОтделенияПФРПоКоду(ОписаниеПлатежа.КодНалоговогоОргана);
				ИначеЕсли ВидГосоргана = Перечисления.ВидыГосударственныхОрганов.ОрганФСС Тогда
					Реквизиты = ДанныеГосударственныхОрганов.РеквизитыОтделенияФССПоКоду(ОписаниеПлатежа.КодНалоговогоОргана);
				Иначе
					Реквизиты = Неопределено;
				КонецЕсли;
				Если Реквизиты <> Неопределено
					И НЕ ЗначениеЗаполнено(Реквизиты.ОписаниеОшибки) Тогда
					
					Если ЗначениеЗаполнено(Реквизиты.Ссылка) Тогда
						ДанныеПлатежногоДокумента.Вставить("Контрагент",      Реквизиты.Ссылка);
						ДанныеПлатежногоДокумента.Вставить("СчетКонтрагента", Реквизиты.ПлатежныеРеквизиты.БанковскийСчет);
					Иначе
						ДанныеГосударственныхОрганов.ОбновитьДанныеГосударственногоОргана(Реквизиты);
						ДанныеПлатежногоДокумента.Вставить("Контрагент",      Реквизиты.Ссылка);
						ДанныеПлатежногоДокумента.Вставить("СчетКонтрагента", Реквизиты.ПлатежныеРеквизиты.БанковскийСчет);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если ОписаниеПлатежа.СпособОплаты = Перечисления.СпособыУплатыНалогов.НаличнымиПоКвитанции Тогда
			Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоКБК(ОписаниеПлатежа.КБК);
			СчетУчетаРасчетовСКонтрагентом = Справочники.ВидыНалоговИПлатежейВБюджет.СчетУчета(Налог, ОписаниеПлатежа.Период);
			Если ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентом) Тогда
				АналитикаПлатежаВБюджетПриУплатеНаличными = Документы.РасходныйКассовыйОрдер.АналитикаПлатежаВБюджетПриУплатеНаличными(
					СчетУчетаРасчетовСКонтрагентом,
					ОписаниеПлатежа.Организация,
					ОписаниеПлатежа.КБК,
					ОписаниеПлатежа.КодНалоговогоОргана,
					ОписаниеПлатежа.Период);
				ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ДанныеПлатежногоДокумента, АналитикаПлатежаВБюджетПриУплатеНаличными);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеПлатежногоДокумента;
	
КонецФункции

Функция ТребованияНеВыполняемыеБРО() Экспорт
	
	НевыполнимыеТребования = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Владелец.Код КАК ИдентификаторНалогаОтчета,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Код КАК ИдентификаторПравила,
	|	ПравилаПредставленияОтчетовУплатыНалогов.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Владелец.РеквизитДопУпорядочивания КАК ВладелецРеквизитДопУпорядочивания
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК ПравилаПредставленияОтчетовУплатыНалогов
	|ГДЕ
	|	НЕ ПравилаПредставленияОтчетовУплатыНалогов.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВладелецРеквизитДопУпорядочивания,
	|	РеквизитДопУпорядочивания";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ИмяТребования = Выборка.ИдентификаторНалогаОтчета + "." + Выборка.ИдентификаторПравила;
		Если Не ИнтерфейсыВзаимодействияБРО.ТребованиеОбрабатывается(ИмяТребования) Тогда
			НевыполнимыеТребования.Добавить(ИмяТребования);
		КонецЕсли;
	КонецЦикла;
	
	Возврат НевыполнимыеТребования;
	
КонецФункции

// ВЫПОЛНЕНИЕ ДЕЙСТВИЙ

Функция ОписаниеДействияНалоговыйПлатеж(Организация, РегистрацияВНалоговомОргане, Срок, Правило, ПериодСобытия, Периодичность, Описание, СпособОплаты)

	ИмяЗадачи = Правило.Владелец.Код;
	Действие  = Правило.Действие;
	
	ПолноеИмяПравила = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПолноеИмяПравила(Правило);
	
	Если Действие = Перечисления.ВидыДействийКалендаряБухгалтера.Отчет Тогда
		
		Если (ПолноеИмяПравила = "СтраховыеВзносы.2013_ОтчетностьПФР"
			ИЛИ ПолноеИмяПравила = "СтраховыеВзносы.2014_ОтчетностьПФРБумажная"
			ИЛИ ПолноеИмяПравила = "СтраховыеВзносы.2014_ОтчетностьПФРЭлектронная")
			И ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии") Тогда
			
			// БЗКБ может обеспечить выполнение этого действия
			Возврат ОписаниеДействияОтчетПФР(Организация, ПериодСобытия);
			
		ИначеЕсли ПолноеИмяПравила = "СтраховыеВзносы.2013_Отчет_Допвзносы_Накопительная_ПФР" Тогда
			
			// БЗКБ может обеспечить выполнение этого действия
			Возврат ОписаниеДействияРеестрДСВ3(Организация);
			
		ИначеЕсли ИмяЗадачи = "НДФЛ_Агент" Тогда
			
			// БЗКБ может обеспечить выполнение этого действия
			Возврат ОписаниеДействия2НДФЛ(Организация, ПериодСобытия);
			
		Иначе
			
			// БРО может выполнить это действие?
			ОписаниеДействия = ОписаниеДействияДекларация(Правило, ПериодСобытия, Организация, РегистрацияВНалоговомОргане);
			Если ОписаниеДействия <> Неопределено Тогда
				Возврат ОписаниеДействия;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Действие = Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога Тогда
		
		Если ИмяЗадачи = "СтраховыеВзносы" Тогда
			// Можно надеяться, что начисления отражены на счетах бухгалтерского учета
			
			Возврат ОписаниеДействияУплатаСтраховыхВзносов(Организация, СпособОплаты, ПериодСобытия, Правило);
			
		ИначеЕсли ПолноеИмяПравила = "ЕСХН.2013_УплатаАванс" Тогда
			
			Возврат ОписаниеДействияФормированиеПлатежныхПорученийНаУплатуНалогов(Организация, СпособОплаты);
			
		ИначеЕсли ПолноеИмяПравила = "ТранспортныйНалог.2013_УплатаАванс"
			Или ПолноеИмяПравила = "ЗемельныйНалог.2013_Аванс" Тогда
			
			Возврат ОписаниеДействияУплатаАвансовПоИмущественнымНалогам(
				Организация,
				РегистрацияВНалоговомОргане,
				СпособОплаты,
				Срок,
				Правило,
				ПериодСобытия,
				Описание);
			
		ИначеЕсли ИмяЗадачи = "СтраховыеВзносы_Предприниматель" Тогда
			
			Возврат ОписаниеДействияРасчетСтраховыхВзносовИП(Организация, СпособОплаты, ПериодСобытия, Правило,
				Перечисления.ВидыСтраховыхВзносовИП.ФиксированныеСтраховыеВзносы);
			
		ИначеЕсли ИмяЗадачи = "СтраховыеВзносыСДоходов_Предприниматель"Тогда
			
			Возврат ОписаниеДействияРасчетСтраховыхВзносовИП(Организация, СпособОплаты, ПериодСобытия, Правило,
				Перечисления.ВидыСтраховыхВзносовИП.СтраховыеВзносыСДоходов);
			
		ИначеЕсли ПолноеИмяПравила = "УСН.2013_УплатаАвансов" Тогда
			
			Возврат ОписаниеДействияУплатаАвансовогоПлатежаУСН(Организация, СпособОплаты, Срок, Правило, ПериодСобытия, Описание);
			
		ИначеЕсли ИнтерфейсыВзаимодействияБРО.ТребованиеОбрабатывается(ПолноеИмяПравила) Тогда
			
			// БРО попробует предоставить данные декларации
			Возврат ОписаниеДействияПлатежПоДаннымДекларации(Организация, РегистрацияВНалоговомОргане, СпособОплаты, Срок, Правило, ПериодСобытия, Описание);
			
		Иначе
			
			Возврат ОписаниеДействияФормированиеПлатежныхПорученийНаУплатуНалогов(Организация, СпособОплаты);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(Правило.Наименование) Тогда
		ОписаниеДействия = Новый Структура;
		ОписаниеДействия.Вставить("Предупреждение", Правило.Наименование);
		Возврат ОписаниеДействия;
	КонецЕсли;
	
	Возврат Новый Структура; // Никакое действие не можем выполнить
	
КонецФункции

Функция ОписаниеДействияРегулярныйПлатеж(Организация, Срок, Правило, ПериодСобытия, Периодичность, Описание)
	
	ОписаниеДействия = Новый Структура;
	ПараметрыФормы = Новый Структура;
	
	// В качестве шаблона для ввода новой платежки ищем последний введенный по текущему правилу документ.
	ШаблонПравила = РегистрыСведений.РегулярныеПлатежи.ШаблонПравила(Организация, Правило, ПериодСобытия);
	Если ШаблонПравила = Неопределено Тогда
		
		Возврат ОписаниеДействия;
		
	ИначеЕсли ШаблонПравила.ПериодСобытия = ПериодСобытия Тогда
		
		// Если по правилу вводился документ в ПериодСобытия, то открываем его
		ПараметрыФормы.Вставить("Ключ", ШаблонПравила.ПлатежноеПоручение);
		
	Иначе
		
		// Если в периоде документ не вводился, вводим новый копированием последнего введенного по правилу платежного поручения
		ПараметрыФормы.Вставить("ЗначениеКопирования", ШаблонПравила.ПлатежноеПоручение);
		
		ПараметрыФормы.Вставить("Правило",       Правило);
		ПараметрыФормы.Вставить("ПериодСобытия", ПериодСобытия);
		
	КонецЕсли;
	
	ОписаниеДействия.Вставить("ИмяФормы",       "Документ.ПлатежноеПоручение.ФормаОбъекта");
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияДекларация(Правило, ПериодСобытия, Организация, РегистрацияВНалоговомОргане)
	
	ПолноеИмяПравила = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПолноеИмяПравила(Правило);
	
	НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Правило.ФинансовыйПериод, ПериодСобытия);
	КонецПериода  = КонецДня(ПериодСобытия);
	
	ОписаниеФормы = ИнтерфейсыВзаимодействияБРО.ОписаниеФормыРеглОтчета(
		ПолноеИмяПравила,
		Организация,
		РегистрацияВНалоговомОргане,
		НачалоПериода,
		КонецПериода,
		Правило.Периодичность);
	
	Если ОписаниеФормы = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОписаниеДействия = Новый Структура;
	ОписаниеДействия.Вставить("ИмяФормы",       ОписаниеФормы.Имя);
	ОписаниеДействия.Вставить("ПараметрыФормы", ОписаниеФормы.Параметры);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияПлатежПоДаннымДекларации(Организация, РегистрацияВНалоговомОргане, СпособОплаты, Срок, Правило, ПериодСобытия, Описание)
	
	ИмяФормыПлатежногоДокумента = ?(СпособОплаты = Перечисления.СпособыУплатыНалогов.НаличнымиПоКвитанции,
		"Документ.РасходныйКассовыйОрдер.ФормаОбъекта", "Документ.ПлатежноеПоручение.ФормаОбъекта");
	
	ОписаниеДействия = Новый Структура;
	НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Правило.Периодичность, ПериодСобытия);
	КонецПериода  = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Правило.Периодичность, ПериодСобытия);
	
	СобытиеПозжеРелевантногоПериода = КалендарьБухгалтера.СрокИстекаетПослеОкончанияРелевантногоПериода(Правило);
	ПростойБазовыйПериод            = КалендарьБухгалтера.БазовыйПериодОпределяетсяПросто(Правило);
	
	ДлительностьБазовогоПериода = Правило.Периодичность;
	
	Если СобытиеПозжеРелевантногоПериода И ПростойБазовыйПериод Тогда
		// Базовый период и релевантный период совпадают
		НачалоБазовогоПериода = НачалоПериода;
		КонецБазовогоПериода  = КонецПериода;
	Иначе
		
		// Базовый и релевантный периоды не совпадают.
		// Базовый период включает в себя один или несколько релевантных.
		Если Не ПростойБазовыйПериод Тогда
			ДлительностьБазовогоПериода = Правило.БазовыйПериод;
		КонецЕсли;
		
		// Базовый период всегда предшествует сроку
		ОтставаниеБазовогоПериода = Правило.ОтставаниеБазовогоПериода;
		КалендарьБухгалтера.УточнитьОтставаниеБазовогоПериода(
			ОтставаниеБазовогоПериода,
			ДлительностьБазовогоПериода,
			Правило.СрокМесяцев);
		
		// авансы за первое полугодие 2013 платим по данным 2012 года. СрокМесяцев = 0, ОтставаниеБазовогоПериода = 0
		// прогноз на май даем в апреле по данным за март. СрокМесяцев = -2, ОтставаниеБазовогоПериода = 1 (или 0)
		// авансы в апреле платим по данным 1 квартала. СрокМесяцев = -1, ОтставаниеБазовогоПериода = 0
		// авансы в феврале платим по данным 3 квартала. СрокМесяцев = -1, ОтставаниеБазовогоПериода = 1
		ОпережениеРелевантногоПериода = 1 +  ОтставаниеБазовогоПериода;
		
		БазовыйПериод = ИнтерфейсыВзаимодействияБРОКлиентСервер.ДобавитьПериод(
			НачалоПериода,
			ДлительностьБазовогоПериода,
			-ОпережениеРелевантногоПериода);
		
		НачалоБазовогоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(ДлительностьБазовогоПериода, БазовыйПериод);
		КонецБазовогоПериода  = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(ДлительностьБазовогоПериода,  БазовыйПериод);
		
	КонецЕсли;
	
	ПолноеИмяПравила = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПолноеИмяПравила(Правило);
	
	ОписаниеПлатежа = НовыйОписаниеПлатежа();
	ОписаниеПлатежа.Организация  = Организация;
	ОписаниеПлатежа.СпособОплаты = СпособОплаты;
	ОписаниеПлатежа.ИмяЗадачи    = Правило.Владелец.Код;
	
	ПериодДекларации = КонецБазовогоПериода;
	ДанныеДекларации = ИнтерфейсыВзаимодействияБРО.ДанныеРеглОтчетаДляУплатыНалога(
		ПолноеИмяПравила,
		Организация,
		РегистрацияВНалоговомОргане,
		ПериодДекларации);
	
	ЭтоНДС = (Правило.Владелец.Код = "НДС");
	
	// Определим период, к которому относится платеж,
	// в соответствии с классификатором, используемым в платежных поручениях
	НалоговыйПериодДляПлатежейВБюджет = Правило.Периодичность;
	Если ЭтоНДС Тогда
		// Особенность НДС в том, что он уплачивается несколькими (ежемесячными) платежами,
		// каждый из которых относится к одному и тому же периоду (кварталу).
		// Из текста правил оформления  документов нельзя сделать однозначный вывод, что указывать в данном случае - месяц или квартал.
		// Сейчас местные УФНС рекомендуют указывать значение "КВ" (квартал).
		НалоговыйПериодДляПлатежейВБюджет = Перечисления.Периодичность.Квартал;
		
	ИначеЕсли Правило.Владелец.Код = "НДФЛ_Предприниматель" Тогда
		
		// Если по годовому платежу предусматривается более одного срока уплаты налогового платежа
		// и установлены конкретные даты уплаты, то указываются эти даты.
		
		НалоговыйПериодДляПлатежейВБюджет = Неопределено;
		
	КонецЕсли;
	
	ПериодичностьПоКлассификатору = ПлатежиВБюджетПереопределяемый.ПериодичностьПоКлассификатору(НалоговыйПериодДляПлатежейВБюджет);
	Если ПериодичностьПоКлассификатору = ПлатежиВБюджетКлиентСервер.ПлатежПоКонкретнойДате() 
		Или НалоговыйПериодДляПлатежейВБюджет <> Правило.Периодичность Тогда
		ПоказательПериода = ПлатежиВБюджетКлиентСервер.НалоговыйПериод(Срок, ПериодичностьПоКлассификатору);
	Иначе
		ПоказательПериода = ПлатежиВБюджетКлиентСервер.НалоговыйПериод(ПериодСобытия, ПериодичностьПоКлассификатору);
	КонецЕсли;
	
	Если ДанныеДекларации = Неопределено Тогда
		
		// Декларации нет.
		// Надо предложить пользователю заполнить декларацию
		// Но быть готовым, что он не согласится и придется заполнять платежку без декларации.
		
		ШаблонТекста = НСтр("ru = 'Перед оформлением платежного документа рекомендуется подготовить отчет ""[Декларация] за [Период]"".
			|В этом случае сумма и реквизиты платежа будут взяты из отчета.'");
		ПараметрыТекста = Новый Структура;
		ПараметрыТекста.Вставить("Декларация", ИнтерфейсыВзаимодействияБРО.ПредставлениеФормыРегламентированногоОтчета(ПолноеИмяПравила, ПериодДекларации));
		НачалоНалоговогоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Правило.ФинансовыйПериод, КонецБазовогоПериода);
		ПараметрыТекста.Вставить("Период",     КалендарьБухгалтера.ПредставлениеПериодаСобытия(НачалоНалоговогоПериода, КонецБазовогоПериода));
		
		ОписаниеДействия.Вставить("Вопрос",      СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонТекста, ПараметрыТекста));
		ОписаниеДействия.Вставить("ВариантДа",   НСтр("ru = 'Подготовить отчет'"));
		ОписаниеДействия.Вставить("ВариантНет",  НСтр("ru = 'Оформить платежный документ'"));
		ОписаниеДействия.Вставить("ДействиеДа",  Новый Структура);
		ОписаниеДействия.Вставить("ДействиеНет", Новый Структура);
		
		// Откроем форму отчета
		ОписаниеФормы = ИнтерфейсыВзаимодействияБРО.ОписаниеФормыРеглОтчета(
			ПолноеИмяПравила,
			Организация,
			РегистрацияВНалоговомОргане,
			НачалоБазовогоПериода,
			КонецБазовогоПериода,
			ДлительностьБазовогоПериода);
		ОписаниеДействия.ДействиеДа.Вставить("ИмяФормы",       ОписаниеФормы.Имя);
		ОписаниеДействия.ДействиеДа.Вставить("ПараметрыФормы", ОписаниеФормы.Параметры);
		
		// Откроем пустой документ
		
		ОписаниеПлатежа.Период            = ПериодСобытия;
		ОписаниеПлатежа.ПоказательПериода = ПоказательПериода;
		
		ВидНалога = РасчетыСБюджетом.ВидНалогаПоКодуЗадачи(ОписаниеПлатежа.ИмяЗадачи, ОписаниеПлатежа.Организация, ОписаниеПлатежа.Период);
		
		ОписаниеПлатежа.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидНалога);
		
		ОписаниеПлатежа.КБК = Справочники.ВидыНалоговИПлатежейВБюджет.КБК(ОписаниеПлатежа.Налог, , ОписаниеПлатежа.Период);
		
		ЗначенияЗаполнения = ЗначенияЗаполненияПлатежногоДокумента(ОписаниеПлатежа);
		
		ОписаниеДействия.ДействиеНет.Вставить("ИмяФормы", ИмяФормыПлатежногоДокумента);
		ОписаниеДействия.ДействиеНет.Вставить("ПараметрыФормы",
			Новый Структура("ЗначенияЗаполнения, ПериодСобытия, Правило",
				ЗначенияЗаполнения,
				ПериодСобытия,
				Правило));
		
		Возврат ОписаниеДействия;
		
	КонецЕсли;
	
	// Удалим строки, не относящиеся к заданному периоду
	КоличествоСтрок = ДанныеДекларации.Платежи.Количество();
	
	// Добавим информацию о коде налогового органа
	ДанныеДекларации.Платежи.Колонки.Добавить("КодНалоговогоОргана", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20)));
	
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		Платеж = ДанныеДекларации.Платежи[КоличествоСтрок - НомерСтроки];
		Если ЭтоНДС И НачалоМесяца(Платеж.Период) = НачалоМесяца(Срок) Тогда
			// Особенность НДС в том, что он уплачивается несколькими платежами.
			// В данных декларации такие платежи отнесены к месяцам, в которых они уплачиваются.
			ПериодПлатежа = ПериодСобытия;
		Иначе
			ПериодПлатежа = Платеж.Период;
		КонецЕсли;
		
		Платеж.КодНалоговогоОргана = ДанныеДекларации.КодНалоговогоОргана;
		
		ЧужойПериод = ПериодПлатежа < НачалоПериода Или ПериодПлатежа > КонецПериода;
		Если ЧужойПериод Тогда
			ДанныеДекларации.Платежи.Удалить(Платеж);
		КонецЕсли;
	КонецЦикла;
	
	// Возможно, платежные документы уже созданы
	ДополнитьДанныеДекларацииПлатежнымиДокументами(СпособОплаты, ПериодСобытия, Правило, ДанныеДекларации, ПоказательПериода, Организация);
	
	Если ЭтоНДС Тогда
		// Особенность НДС в том, что он уплачивается несколькими платежами.
		// В данных декларации такие платежи отнесены к месяцам, в которых они уплачиваются.
		Для Каждого Платеж Из ДанныеДекларации.Платежи Цикл
			Если НачалоМесяца(Платеж.Период) = НачалоМесяца(Срок) Тогда
				Платеж.Период = ПериодСобытия;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// Удалим строки, по которым нет платежей
	Если ДанныеДекларации.Платежи.Количество() > 1 Тогда
		КоличествоСтрок = ДанныеДекларации.Платежи.Количество();
		Для НомерСтроки = 1 По КоличествоСтрок Цикл
			Платеж = ДанныеДекларации.Платежи[КоличествоСтрок - НомерСтроки];
			Если Платеж.Сумма = 0 И Не ЗначениеЗаполнено(Платеж.ПлатежноеПоручение) Тогда
				ДанныеДекларации.Платежи.Удалить(Платеж);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ДанныеДекларации.Платежи.Количество() = 0 Тогда
		
		ОписаниеДействия.Вставить("ИмяФормы", ИмяФормыПлатежногоДокумента);
		// По декларации ничего не надо платить.
		// Откроем пустую платежку
		
		ОписаниеПлатежа.Период              = ПериодСобытия;
		ОписаниеПлатежа.Декларация          = ДанныеДекларации.Ссылка;
		ОписаниеПлатежа.ДатаДекларации      = ДанныеДекларации.ДатаПодписи;
		ОписаниеПлатежа.КодНалоговогоОргана = ДанныеДекларации.КодНалоговогоОргана;
		ОписаниеПлатежа.ПоказательПериода   = ПоказательПериода;
		ОписаниеПлатежа.Описание            = Описание;
		
		ВидНалога = РасчетыСБюджетом.ВидНалогаПоКодуЗадачи(ОписаниеПлатежа.ИмяЗадачи, ОписаниеПлатежа.Организация, ОписаниеПлатежа.Период);
		
		ОписаниеПлатежа.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидНалога);
		
		ОписаниеПлатежа.КБК = Справочники.ВидыНалоговИПлатежейВБюджет.КБК(ОписаниеПлатежа.Налог, , ОписаниеПлатежа.Период);
		
		ЗначенияЗаполнения = ЗначенияЗаполненияПлатежногоДокумента(ОписаниеПлатежа);
		
		ОписаниеДействия.Вставить("ПараметрыФормы", Новый Структура("ЗначенияЗаполнения, ПериодСобытия, Правило", ЗначенияЗаполнения, ПериодСобытия, Правило));
		
	ИначеЕсли ДанныеДекларации.Платежи.Количество() = 1 Тогда
		
		ОписаниеДействия.Вставить("ИмяФормы", ИмяФормыПлатежногоДокумента);
		
		Платеж = ДанныеДекларации.Платежи[0];
		Если ЗначениеЗаполнено(Платеж.ПлатежноеПоручение) Тогда
			
			// Откроем существующую платежку
			ОписаниеДействия.Вставить("ПараметрыФормы", Новый Структура("Ключ", Платеж.ПлатежноеПоручение));
			
		Иначе
			
			// Создадим платежку по данным декларации
			
			ОписаниеПлатежа.Период              = ПериодСобытия;
			ОписаниеПлатежа.ПоказательПериода   = ПоказательПериода;
			ОписаниеПлатежа.Аванс               = Платеж.Аванс;
			ОписаниеПлатежа.ОКАТО               = Платеж.ОКАТО;
			ОписаниеПлатежа.Сумма               = Платеж.Сумма;
			ОписаниеПлатежа.Описание            = Описание;
			ОписаниеПлатежа.Декларация          = ДанныеДекларации.Ссылка;
			ОписаниеПлатежа.ДатаДекларации      = ДанныеДекларации.ДатаПодписи;
			ОписаниеПлатежа.КодНалоговогоОргана = ДанныеДекларации.КодНалоговогоОргана;
			
			Если ЗначениеЗаполнено(Платеж.ВидНалога) Тогда
				// В декларации определен вид налога
				ОписаниеПлатежа.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Платеж.ВидНалога);
				Если Не ПустаяСтрока(Платеж.КБК) Тогда
					ОписаниеПлатежа.КБК = Платеж.КБК;
				Иначе
					ОписаниеПлатежа.КБК = Справочники.ВидыНалоговИПлатежейВБюджет.КБК(ОписаниеПлатежа.Налог, , ОписаниеПлатежа.Период);
				КонецЕсли;
			ИначеЕсли Не ПустаяСтрока(Платеж.КБК) Тогда
				// В декларации определен КБК
				ОписаниеПлатежа.КБК   = Платеж.КБК;
				ОписаниеПлатежа.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоКБК(ОписаниеПлатежа.КБК);
			Иначе
				ВидНалога = РасчетыСБюджетом.ВидНалогаПоКодуЗадачи(ОписаниеПлатежа.ИмяЗадачи, ОписаниеПлатежа.Организация, ОписаниеПлатежа.Период);
				ОписаниеПлатежа.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидНалога);
				ОписаниеПлатежа.КБК   = Справочники.ВидыНалоговИПлатежейВБюджет.КБК(ОписаниеПлатежа.Налог, , ОписаниеПлатежа.Период);
			КонецЕсли;
			
			ЗначенияЗаполнения = ЗначенияЗаполненияПлатежногоДокумента(ОписаниеПлатежа);
			
			ОписаниеДействия.Вставить("ПараметрыФормы", Новый Структура("ЗначенияЗаполнения, ПериодСобытия, Правило", ЗначенияЗаполнения, ПериодСобытия, Правило));
			
		КонецЕсли;
		
	Иначе
		
		// Откроем форму списка платежей
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация",       Организация);
		ПараметрыФормы.Вставить("ПериодСобытия",     ПериодСобытия);
		ПараметрыФормы.Вставить("Правило",           Правило);
		ПараметрыФормы.Вставить("СпособОплаты",      СпособОплаты);
		ПараметрыФормы.Вставить("Декларация",        ДанныеДекларации.Ссылка);
		ПараметрыФормы.Вставить("ДатаДекларации",    ДанныеДекларации.ДатаПодписи);
		ПараметрыФормы.Вставить("ОписаниеДействия",  Описание);
		ПараметрыФормы.Вставить("ПоказательПериода", ПоказательПериода);
		ПараметрыФормы.Вставить("ВидНалога",         РасчетыСБюджетом.ВидНалогаПоКодуЗадачи(ОписаниеПлатежа.ИмяЗадачи, ОписаниеПлатежа.Организация, ОписаниеПлатежа.Период));
		ПараметрыФормы.Вставить("Платежи",           ПоместитьВоВременноеХранилище(ДанныеДекларации.Платежи));
		
		ОписаниеДействия.Вставить("ИмяФормы",       "Обработка.ФормированиеПлатежныхПорученийНаУплатуНалогов.Форма.УплатаПоДекларации");
		ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
		
	КонецЕсли;
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияОтчетПФР(Организация, ПериодСобытия)
	
	ОписаниеДействия = Новый Структура;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",    Организация);
	ПараметрыФормы.Вставить("ОтчетныйПериод", НачалоКвартала(ПериодСобытия));
	
	ОписаниеДействия.Вставить("ИмяФормы",       "Обработка.ПодготовкаКвартальнойОтчетностиВПФР.Форма");
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияРеестрДСВ3(Организация)
	
	ОписаниеДействия = Новый Структура;
	
	Если Не ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии") Тогда
		
		ТекстПредупреждения = НСтр("ru = 'В настройках параметров учета указано, что учет заработной платы ведется во внешней программе.
			|Подготовьте реестр ДСВ-3 в той программе, в которой начисляете зарплату'");
		
		ОписаниеДействия.Вставить("Предупреждение", ТекстПредупреждения);
		Возврат ОписаниеДействия;
		
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Организация", Организация);
	
	ОписаниеДействия.Вставить("ИмяФормы",       "Документ.РеестрДСВ_3.ФормаСписка");
	ОписаниеДействия.Вставить("ПараметрыФормы", Новый Структура("Отбор", Отбор));
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействия2НДФЛ(Организация, ПериодСобытия)
	
	ОписаниеДействия = Новый Структура;
	
	Если Не ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии") Тогда
		
		ТекстПредупреждения = НСтр("ru = 'В настройках параметров учета указано, что учет заработной платы ведется во внешней программе.
			|Подготовьте справки 2-НДФЛ в той программе, в которой начисляете зарплату'");
		
		ОписаниеДействия.Вставить("Предупреждение", ТекстПредупреждения);
		Возврат ОписаниеДействия;
		
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Организация",     Организация);
	Отбор.Вставить("НалоговыйПериод", Год(ПериодСобытия));
	
	ОписаниеДействия.Вставить("ИмяФормы",       "Документ.СправкиНДФЛДляПередачиВНалоговыйОрган.ФормаСписка");
	ОписаниеДействия.Вставить("ПараметрыФормы", Новый Структура("Отбор", Отбор));
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияУплатаСтраховыхВзносов(Организация, СпособОплаты, ПериодСобытия, Правило)
	
	ОписаниеДействия = Новый Структура;
	
	// Убедимся, что выполнена регламентная операция начисления взносов.
	
	ИмяДокумента = ЗакрытиеМесяца.ВидДокументаНачисленияЗарплаты(Организация);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период",      ПериодСобытия);
	Запрос.УстановитьПараметр("Документ",    ИмяДокумента);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	НачислениеЗарплаты.Ссылка,
	|	НачислениеЗарплаты.Проведен КАК Проведен
	|ИЗ
	|	Документ.НачислениеЗарплаты КАК НачислениеЗарплаты
	|ГДЕ
	|	&Документ = ""НачислениеЗарплаты""
	|	И НЕ НачислениеЗарплаты.ПометкаУдаления
	|	И НачислениеЗарплаты.Организация = &Организация
	|	И НачислениеЗарплаты.МесяцНачисления МЕЖДУ НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Период, МЕСЯЦ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 2
	|	ОтражениеЗарплатыВБухучете.Ссылка,
	|	ОтражениеЗарплатыВБухучете.Проведен
	|ИЗ
	|	Документ.ОтражениеЗарплатыВБухучете КАК ОтражениеЗарплатыВБухучете
	|ГДЕ
	|	&Документ = ""ОтражениеЗарплатыВБухучете""
	|	И НЕ ОтражениеЗарплатыВБухучете.ПометкаУдаления
	|	И ОтражениеЗарплатыВБухучете.Организация = &Организация
	|	И ОтражениеЗарплатыВБухучете.ПериодРегистрации МЕЖДУ НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Период, МЕСЯЦ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 2
	|	ОтражениеЗарплатыВУчете.Ссылка,
	|	ОтражениеЗарплатыВУчете.Проведен
	|ИЗ
	|	Документ.ОтражениеЗарплатыВУчете КАК ОтражениеЗарплатыВУчете
	|ГДЕ
	|	&Документ = ""ОтражениеЗарплатыВУчете""
	|	И НЕ ОтражениеЗарплатыВУчете.ПометкаУдаления
	|	И ОтражениеЗарплатыВУчете.Организация = &Организация
	|	И ОтражениеЗарплатыВУчете.ПериодРегистрации МЕЖДУ НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Период, МЕСЯЦ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Проведен УБЫВ";
	
	Результат = Запрос.Выполнить();
	ОперацияВыполнена   = Ложь;
	НесколькоДокументов = Ложь;
	Ссылка              = Неопределено;
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Если Выборка.Проведен Тогда
			ОперацияВыполнена = Истина;
		Иначе
			Если Выборка.Количество() = 1 Тогда
				Ссылка = Выборка.Ссылка;
			ИначеЕсли Выборка.Количество() = 2 Тогда
				НесколькоДокументов = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ОперацияВыполнена Тогда
		
		Возврат ОписаниеДействияФормированиеПлатежныхПорученийНаУплатуСтраховыхВзносов(Организация, СпособОплаты, ПериодСобытия, Правило);
		
	КонецЕсли;
	
	// Операция не выполнена.
	// Предложим выполнить регламентную операцию.
	// Но будем готовы, что пользователь все равно захочет оформить платежки
	
	ШаблонВопроса = НСтр("ru = 'Этот платеж рекомендуется выполнять после того, как [Статус] за [Период]
		|[Вопрос]?'");
	ШаблонВарианта = НСтр("ru = 'Да, [Требование]'");
	ПараметрыТекста = Новый Структура;
	ПараметрыТекста.Вставить("Период", КалендарьБухгалтера.ПредставлениеПериодаСобытия(НачалоМесяца(ПериодСобытия), КонецМесяца(ПериодСобытия)));
	
	Если ИмяДокумента = "НачислениеЗарплаты" Тогда
		// начисляем в БП
		ПараметрыТекста.Вставить("Статус",     НСтр("ru = 'начислена зарплата и взносы'"));
		ПараметрыТекста.Вставить("Вопрос",     НСтр("ru = 'Начислить зарплату и взносы'"));
		ПараметрыТекста.Вставить("Требование", НСтр("ru = 'начислить зарплату'"));
	ИначеЕсли ИмяДокумента = "ОтражениеЗарплатыВУчете" Тогда
		// загружаем из ЗУП 2.5
		ПараметрыТекста.Вставить("Статус",     НСтр("ru = 'загружены данные о зарплате и взносах'"));
		ПараметрыТекста.Вставить("Вопрос",     НСтр("ru = 'Загрузить данные о зарплате и взносах'"));
		ПараметрыТекста.Вставить("Требование", НСтр("ru = 'загрузить данные'"));
	Иначе
		// вводим вручную
		ПараметрыТекста.Вставить("Статус",     НСтр("ru = 'введены данные о зарплате и взносах'"));
		ПараметрыТекста.Вставить("Вопрос",     НСтр("ru = 'Ввести данные о зарплате и взносах'"));
		ПараметрыТекста.Вставить("Требование", НСтр("ru = 'ввести данные'"));
	КонецЕсли;
	
	ОписаниеДействия.Вставить("Вопрос",      СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонВопроса, ПараметрыТекста));
	ОписаниеДействия.Вставить("ВариантДа",   СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонВарианта, ПараметрыТекста));
	ОписаниеДействия.Вставить("ВариантНет",  НСтр("ru = 'Нет, оформить платежный документ'"));
	ОписаниеДействия.Вставить("ДействиеДа",  Новый Структура);
	ОписаниеДействия.Вставить("ДействиеНет", Новый Структура);
	
	Отбор = Новый Структура();
	Отбор.Вставить("Организация",       Организация);
	Отбор.Вставить("МесяцНачисления",   НачалоМесяца(ПериодСобытия));
	Отбор.Вставить("ПериодРегистрации", НачалоМесяца(ПериодСобытия));
	Если ИмяДокумента = "ОтражениеЗарплатыВУчете" Тогда
		// Откроем форму обработки загрузки
		ОписаниеДействия.ДействиеДа.Вставить("ИмяФормы",       "Обработка.ЗагрузкаДанныхИзЗУП.Форма");
		ОписаниеДействия.ДействиеДа.Вставить("ПараметрыФормы", Отбор);
	Иначе
		// Откроем форму документа или списка (если документов несколько)
		Если НесколькоДокументов Тогда
			ОписаниеДействия.ДействиеДа.Вставить("ИмяФормы",       "Документ."+ИмяДокумента+".ФормаСписка");
			ОписаниеДействия.ДействиеДа.Вставить("ПараметрыФормы", Новый Структура("Отбор", Отбор));
		ИначеЕсли ЗначениеЗаполнено(Ссылка) Тогда
			ОписаниеДействия.ДействиеДа.Вставить("ИмяФормы",       "Документ."+ИмяДокумента+".ФормаОбъекта");
			ОписаниеДействия.ДействиеДа.Вставить("ПараметрыФормы", Новый Структура("Ключ", Ссылка));
		Иначе
			ОписаниеДействия.ДействиеДа.Вставить("ИмяФормы",       "Документ."+ИмяДокумента+".ФормаОбъекта");
			ОписаниеДействия.ДействиеДа.Вставить("ПараметрыФормы", Новый Структура("ЗначенияЗаполнения", Отбор));
		КонецЕсли;
	КонецЕсли;
	
	// Откроем пустой платежный документ
	
	ИмяФормыПлатежногоДокумента = ?(СпособОплаты = Перечисления.СпособыУплатыНалогов.НаличнымиПоКвитанции,
		"Документ.РасходныйКассовыйОрдер.ФормаОбъекта", "Документ.ПлатежноеПоручение.ФормаОбъекта");
	
	ОписаниеПлатежа = НовыйОписаниеПлатежа();
	ОписаниеПлатежа.Организация  = Организация;
	ОписаниеПлатежа.СпособОплаты = СпособОплаты;
	ОписаниеПлатежа.ИмяЗадачи    = Правило.Владелец.Код;
	ОписаниеПлатежа.Период       = ПериодСобытия;
	
	ВидНалога = РасчетыСБюджетом.ВидНалогаПоКодуЗадачи(ОписаниеПлатежа.ИмяЗадачи, ОписаниеПлатежа.Организация, ОписаниеПлатежа.Период);
	
	ОписаниеПлатежа.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидНалога);
	
	ОписаниеПлатежа.КБК = Справочники.ВидыНалоговИПлатежейВБюджет.КБК(ОписаниеПлатежа.Налог, , ОписаниеПлатежа.Период);
	
	ЗначенияЗаполнения = ЗначенияЗаполненияПлатежногоДокумента(ОписаниеПлатежа);
	
	ОписаниеДействия.ДействиеНет.Вставить("ИмяФормы",       ИмяФормыПлатежногоДокумента);
	ОписаниеДействия.ДействиеНет.Вставить("ПараметрыФормы", Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения));
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияФормированиеПлатежныхПорученийНаУплатуНалогов(Организация, СпособОплаты)
	
	ОписаниеДействия = Новый Структура;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",  Организация);
	ПараметрыФормы.Вставить("СпособОплаты", СпособОплаты);
	
	ОписаниеДействия.Вставить("ИмяФормы",       "Обработка.ФормированиеПлатежныхПорученийНаУплатуНалогов.Форма");
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияРасчетСтраховыхВзносовИП(Организация, СпособОплаты, ПериодСобытия, Правило, ВидСтраховыхВзносов)
	
	ОписаниеДействия = Новый Структура;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",         Организация);
	ПараметрыФормы.Вставить("СпособОплаты",        СпособОплаты);
	ПараметрыФормы.Вставить("ПериодСобытия",       КонецКвартала(ПериодСобытия));
	ПараметрыФормы.Вставить("Правило",             Правило);
	ПараметрыФормы.Вставить("ВидСтраховыхВзносов", ВидСтраховыхВзносов);
	
	// Конечное имя формы определяетя видом страховых взносов
	ОписаниеДействия.Вставить("ИмяФормы",       "Обработка.РасчетСтраховыхВзносовИП.Форма");
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияУплатаАвансовогоПлатежаУСН(Организация, СпособОплаты, Срок, Правило, ПериодСобытия, Описание)
	
	Перем Платежи;
	
	ОписаниеДействия = Новый Структура;
	НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Правило.Периодичность, ПериодСобытия);
	КонецПериода  = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Правило.Периодичность, ПериодСобытия);
	
	ИмяФормыПлатежногоДокумента = ?(СпособОплаты = Перечисления.СпособыУплатыНалогов.НаличнымиПоКвитанции,
		"Документ.РасходныйКассовыйОрдер.ФормаОбъекта", "Документ.ПлатежноеПоручение.ФормаОбъекта");
	
	СписокПараметров = Новый Массив;
	СписокПараметров.Добавить("КодНО");
	СписокПараметров.Добавить("ОКТМО");
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ПериодСобытия, СписокПараметров);
	
	ВидНалога = РасчетыСБюджетом.ВидНалогаПоКодуЗадачи(Правило.Владелец.Код, Организация, КонецПериода);
	
	Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидНалога);
	
	КБК = Справочники.ВидыНалоговИПлатежейВБюджет.КБК(Налог, , КонецПериода);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("НачалоПериода",       НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",        КонецПериода);
	Запрос.УстановитьПараметр("КодНалоговогоОргана", СведенияОбОрганизации.КодНО);
	Запрос.УстановитьПараметр("ОКТМО",               СведенияОбОрганизации.ОКТМО);
	Запрос.УстановитьПараметр("КБК",                 КБК);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасчетНалогаУСН.ПериодРасчета КАК Период,
	|	СУММА(РасчетНалогаУСН.НалогКУплате) КАК Сумма,
	|	&КодНалоговогоОргана,
	|	&КБК,
	|	&ОКТМО КАК ОКАТО
	|ИЗ
	|	РегистрСведений.РасчетНалогаУСН КАК РасчетНалогаУСН
	|ГДЕ
	|	РасчетНалогаУСН.Организация = &Организация
	|	И РасчетНалогаУСН.ПериодРасчета МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РасчетНалогаУСН.НалогКУплате > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетНалогаУСН.ПериодРасчета";
	
	Платежи = Запрос.Выполнить().Выгрузить();
	
	Платежи.Колонки.Добавить("Аванс",  Новый ОписаниеТипов("Булево"));
	Платежи.Колонки.Добавить("Агент",  Новый ОписаниеТипов("Булево"));
	
	Платежи.ЗаполнитьЗначения(Истина, "Аванс");
	
	// Определим период, к которому относится платеж,
	// в соответствии с классификатором, используемым в платежных поручениях
	НалоговыйПериодДляПлатежейВБюджет = Правило.Периодичность;
	ПериодичностьПоКлассификатору = ПлатежиВБюджетПереопределяемый.ПериодичностьПоКлассификатору(НалоговыйПериодДляПлатежейВБюджет);
	Если ПериодичностьПоКлассификатору = ПлатежиВБюджетКлиентСервер.ПлатежПоКонкретнойДате() 
		Или НалоговыйПериодДляПлатежейВБюджет <> Правило.Периодичность Тогда
		ПоказательПериода = ПлатежиВБюджетКлиентСервер.НалоговыйПериод(Срок, ПериодичностьПоКлассификатору);
	Иначе
		ПоказательПериода = ПлатежиВБюджетКлиентСервер.НалоговыйПериод(ПериодСобытия, ПериодичностьПоКлассификатору);
	КонецЕсли;
	
	ДополнитьНачисленияПлатежнымиДокументами(СпособОплаты, Правило, Платежи, ПериодСобытия, Организация);
	
	Если Платежи.Количество() = 0 Тогда
		
		ОписаниеДействия.Вставить("ИмяФормы", ИмяФормыПлатежногоДокумента);
		// По операции ничего не надо платить.
		// Откроем пустую платежку
		ОписаниеПлатежа = НовыйОписаниеПлатежа();
		ОписаниеПлатежа.Организация         = Организация;
		ОписаниеПлатежа.Налог               = Налог;
		ОписаниеПлатежа.СпособОплаты        = СпособОплаты;
		ОписаниеПлатежа.ИмяЗадачи           = Правило.Владелец.Код;
		ОписаниеПлатежа.Период              = ПериодСобытия;
		ОписаниеПлатежа.ПоказательПериода   = ПоказательПериода;
		ОписаниеПлатежа.КБК                 = КБК;
		ОписаниеПлатежа.ОКАТО               = СведенияОбОрганизации.ОКТМО;
		ОписаниеПлатежа.КодНалоговогоОргана = СведенияОбОрганизации.КодНО;
		
		ЗначенияЗаполнения = ЗначенияЗаполненияПлатежногоДокумента(ОписаниеПлатежа);
		ОписаниеДействия.Вставить("ПараметрыФормы", Новый Структура("ЗначенияЗаполнения, ПериодСобытия, Правило", ЗначенияЗаполнения, ПериодСобытия, Правило));
		
	ИначеЕсли Платежи.Количество() = 1 Тогда
		
		ОписаниеДействия.Вставить("ИмяФормы", ИмяФормыПлатежногоДокумента);
		
		Платеж = Платежи[0];
		
		// Создадим платежку по данным операции
		ОписаниеПлатежа = НовыйОписаниеПлатежа(); // Передаем параметры в структуре, потому что их много
		ОписаниеПлатежа.Организация         = Организация;
		ОписаниеПлатежа.Налог               = Налог;
		ОписаниеПлатежа.СпособОплаты        = СпособОплаты;
		ОписаниеПлатежа.ИмяЗадачи           = Правило.Владелец.Код;
		ОписаниеПлатежа.Период              = Платеж.Период;
		ОписаниеПлатежа.ПоказательПериода   = ПоказательПериода;
		ОписаниеПлатежа.Аванс               = Платеж.Аванс;
		ОписаниеПлатежа.КБК                 = Платеж.КБК;
		ОписаниеПлатежа.ОКАТО               = Платеж.ОКАТО;
		ОписаниеПлатежа.Сумма               = Платеж.Сумма;
		ОписаниеПлатежа.Описание            = Описание;
		ОписаниеПлатежа.КодНалоговогоОргана = Платеж.КодНалоговогоОргана;
		
		ЗначенияЗаполнения = ЗначенияЗаполненияПлатежногоДокумента(ОписаниеПлатежа);
		
		ОписаниеДействия.Вставить("ПараметрыФормы", Новый Структура("ЗначенияЗаполнения, ПериодСобытия, Правило", ЗначенияЗаполнения, ПериодСобытия, Правило));
		
	Иначе
		
		// Откроем форму списка платежей
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация",       Организация);
		ПараметрыФормы.Вставить("ПериодСобытия",     ПериодСобытия);
		ПараметрыФормы.Вставить("Правило",           Правило);
		ПараметрыФормы.Вставить("СпособОплаты",      СпособОплаты);
		ПараметрыФормы.Вставить("ОписаниеДействия",  Описание);
		ПараметрыФормы.Вставить("ПоказательПериода", ПоказательПериода);
		ПараметрыФормы.Вставить("Платежи",           ПоместитьВоВременноеХранилище(Платежи));
		ПараметрыФормы.Вставить("Декларация",        Документы.РегламентированныйОтчет.ПустаяСсылка());
		ПараметрыФормы.Вставить("ДатаДекларации",    Дата(1, 1, 1));
		ПараметрыФормы.Вставить("ВидНалога",         РасчетыСБюджетом.ВидНалогаПоКодуЗадачи(Правило.Владелец.Код, Организация, КонецПериода));
		
		ОписаниеДействия.Вставить("ИмяФормы",       "Обработка.ФормированиеПлатежныхПорученийНаУплатуНалогов.Форма.УплатаПоДекларации");
		ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
		
	КонецЕсли;
	
	Возврат ОписаниеДействия;
	
КонецФункции

Процедура ДополнитьДанныеДекларацииПлатежнымиДокументами(СпособОплаты, ПериодСобытия, Правило, ДанныеДекларации, ПоказательПериода, Организация)
	
	МассивТиповПлатежныхДокументов = Новый Массив;
	МассивТиповПлатежныхДокументов.Добавить(Тип("ДокументСсылка.ПлатежноеПоручение"));
	МассивТиповПлатежныхДокументов.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	
	Платежи = ДанныеДекларации.Платежи;
	Платежи.Колонки.Добавить("Индекс",             Новый ОписаниеТипов("Число"));
	Платежи.Колонки.Добавить("ПлатежноеПоручение", Новый ОписаниеТипов(МассивТиповПлатежныхДокументов));
	Платежи.Колонки.Добавить("Оплачено",           Новый ОписаниеТипов("Булево"));
	Для Каждого СтрокаПлатежа Из Платежи Цикл
		СтрокаПлатежа.Индекс = Платежи.Индекс(СтрокаПлатежа);
	КонецЦикла;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Платежи.Период КАК Период,
	|	Платежи.КБК КАК КБК,
	|	Платежи.ОКАТО КАК ОКАТО,
	|	Платежи.Аванс КАК Аванс,
	|	Платежи.Индекс КАК ИндексПлатежа
	|ПОМЕСТИТЬ ОтборТекущиеПлатежи
	|ИЗ
	|	&Платежи КАК Платежи
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КБК,
	|	ОКАТО,
	|	Аванс
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СвязанныеДокументы.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ОтборДекларация
	|ИЗ
	|	КритерийОтбора.СвязанныеДокументы(&Декларация) КАК СвязанныеДокументы
	|ГДЕ
	|	СвязанныеДокументы.Ссылка ССЫЛКА Документ.ПлатежноеПоручение
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗадачиБухгалтераНалоговыеПлатежи.ПлатежноеПоручение
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтераНалоговыеПлатежи КАК ЗадачиБухгалтераНалоговыеПлатежи
	|ГДЕ
	|	ЗадачиБухгалтераНалоговыеПлатежи.Организация = &Организация
	|	И ЗадачиБухгалтераНалоговыеПлатежи.Правило = &Правило
	|	И ЗадачиБухгалтераНалоговыеПлатежи.ПериодСобытия = &ПериодСобытия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка" + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Если СпособОплаты = Перечисления.СпособыУплатыНалогов.НаличнымиПоКвитанции Тогда
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	РасходныйКассовыйОрдер.Ссылка,
		|	РасходныйКассовыйОрдер.Дата,
		|	РасходныйКассовыйОрдер.КодБК КАК КБК,
		|	РасходныйКассовыйОрдер.КодОКАТО КАК ОКАТО,
		|	РасходныйКассовыйОрдер.СуммаДокумента КАК Сумма,
		|	ИСТИНА КАК Оплачено
		|ПОМЕСТИТЬ ПлатежиПоДекларации
		|ИЗ
		|	ОтборДекларация КАК Отбор
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
		|		ПО Отбор.Ссылка = РасходныйКассовыйОрдер.Ссылка
		|ГДЕ
		|	РасходныйКассовыйОрдер.Организация = &Организация
		|	И НЕ РасходныйКассовыйОрдер.ПометкаУдаления
		|	И РасходныйКассовыйОрдер.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.УплатаНалога)
		|	И РасходныйКассовыйОрдер.ПоказательПериода = &ПоказательПериода
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КБК,
		|	ОКАТО" + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
		
	Иначе
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ПлатежноеПоручение.Ссылка,
		|	ПлатежноеПоручение.Дата,
		|	ПлатежноеПоручение.КодБК КАК КБК,
		|	ПлатежноеПоручение.КодОКАТО КАК ОКАТО,
		|	ПлатежноеПоручение.СуммаДокумента КАК Сумма,
		|	ПлатежноеПоручение.Оплачено
		|ПОМЕСТИТЬ ПлатежиПоДекларации
		|ИЗ
		|	ОтборДекларация КАК Отбор
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
		|		ПО Отбор.Ссылка = ПлатежноеПоручение.Ссылка
		|ГДЕ
		|	ПлатежноеПоручение.Организация = &Организация
		|	И НЕ ПлатежноеПоручение.ПометкаУдаления
		|	И ПлатежноеПоручение.ПеречислениеВБюджет
		|	И ПлатежноеПоручение.ПоказательПериода = &ПоказательПериода
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КБК,
		|	ОКАТО" + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ
	|	Декларация.ИндексПлатежа КАК ИндексПлатежа,
	|	ПлатежиПоДекларации.Ссылка КАК ПлатежноеПоручение,
	|	ПлатежиПоДекларации.Оплачено,
	|	ПлатежиПоДекларации.Сумма
	|ИЗ
	|	ПлатежиПоДекларации КАК ПлатежиПоДекларации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборТекущиеПлатежи КАК Декларация
	|		ПО ПлатежиПоДекларации.КБК = Декларация.КБК
	|			И ПлатежиПоДекларации.ОКАТО = Декларация.ОКАТО
	|			И &УсловиеПоПериоду
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПлатежиПоДекларации.Сумма УБЫВ
	|ИТОГИ ПО
	|	ИндексПлатежа";
	
	Если Правило.Владелец.Код = "НДС" Тогда
		// Особенность НДС в том, что он уплачивается несколькими платежами.
		// Поэтому дополнительно проверяем месяц платежного поручения.
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоПериоду", "НАЧАЛОПЕРИОДА(Декларация.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ПлатежиПоДекларации.Дата, МЕСЯЦ)");
	Иначе
		// Не проверяем период
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоПериоду", "ИСТИНА");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",       Организация);
	Запрос.УстановитьПараметр("Декларация",        ДанныеДекларации.Ссылка);
	Запрос.УстановитьПараметр("Платежи",           Платежи);
	Запрос.УстановитьПараметр("ПоказательПериода", ПоказательПериода);
	Запрос.УстановитьПараметр("Правило",           Правило);
	Запрос.УстановитьПараметр("ПериодСобытия",     ПериодСобытия);
	Запрос.Текст = ТекстЗапроса;
	
	ВыборкаПоИндексам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоИндексам.Следующий() Цикл
		Выборка = ВыборкаПоИндексам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Если Выборка.Следующий() Тогда
			Платеж = Платежи[Выборка.ИндексПлатежа];
			Платеж.ПлатежноеПоручение = Выборка.ПлатежноеПоручение;
			Платеж.Оплачено = Выборка.Оплачено;
			//Платеж.Сумма    = Выборка.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	Платежи.Колонки.Удалить("Индекс");
	
КонецПроцедуры

Функция ОписаниеДействияФормированиеПлатежныхПорученийНаУплатуСтраховыхВзносов(Организация, СпособОплаты, ПериодСобытия, Правило)
	
	НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Перечисления.Периодичность.Месяц, ПериодСобытия);
	КонецПериода  = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Перечисления.Периодичность.Месяц, ПериодСобытия);
	
	ИмяФормыПлатежногоДокумента = ?(СпособОплаты = Перечисления.СпособыУплатыНалогов.НаличнымиПоКвитанции,
		"Документ.РасходныйКассовыйОрдер.ФормаОбъекта", "Документ.ПлатежноеПоручение.ФормаОбъекта");
	
	СчетаСтраховыхВзносов = ПараметрыСтраховыхВзносов(ПериодСобытия);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	
	//Для поиска ранее введенных платежных поручений
	Запрос.УстановитьПараметр("Правило",       Правило);
	Запрос.УстановитьПараметр("ПериодСобытия", ПериодСобытия);
	
	ЗначенияСубконто = Новый Массив;
	ЗначенияСубконто.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Налог);
	ЗначенияСубконто.Добавить(Перечисления.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию);
	
	//Для получения остатков
	Запрос.УстановитьПараметр("СведенияОНалогах", СчетаСтраховыхВзносов);
	Запрос.УстановитьПараметр("ВидСубконто",      ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	Запрос.УстановитьПараметр("ЗначенияСубконто", ЗначенияСубконто);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СведенияОНалогах.СчетУчета,
	|	СведенияОНалогах.КБК,
	|	СведенияОНалогах.Налог,
	|	СведенияОНалогах.НазначениеПлатежа
	|ПОМЕСТИТЬ ВТ_СведенияОНалогах
	|ИЗ
	|	&СведенияОНалогах КАК СведенияОНалогах
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Счет КАК СчетУчета,
	|	ХозрасчетныйОбороты.Субконто1 КАК Субконто1,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка) КАК Субконто2,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка) КАК Субконто3,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотКт - ХозрасчетныйОбороты.СуммаОборотДт) КАК Сумма,
	|	ВТ_СведенияОНалогах.КБК КАК КБК,
	|	ВТ_СведенияОНалогах.Налог КАК Налог,
	|	ВТ_СведенияОНалогах.НазначениеПлатежа КАК НазначениеПлатежа
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Регистратор,
	|			Счет В
	|				(ВЫБРАТЬ
	|					ВТ_СведенияОНалоге.СчетУчета
	|				ИЗ
	|					ВТ_СведенияОНалогах КАК ВТ_СведенияОНалоге),
	|			&ВидСубконто,
	|			Организация = &Организация
	|				И Субконто1 В (&ЗначенияСубконто),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СведенияОНалогах КАК ВТ_СведенияОНалогах
	|		ПО ХозрасчетныйОбороты.Счет = ВТ_СведенияОНалогах.СчетУчета
	|ГДЕ
	|	НЕ(ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.СписаниеСРасчетногоСчета
	|				ИЛИ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.РасходныйКассовыйОрдер)
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Счет,
	|	ХозрасчетныйОбороты.Субконто1,
	|	ВТ_СведенияОНалогах.КБК,
	|	ВТ_СведенияОНалогах.Налог,
	|	ВТ_СведенияОНалогах.НазначениеПлатежа
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетУчета,
	|	Субконто1,
	|	Сумма";
	
	ТаблицаНалоговВзносов = Запрос.Выполнить().Выгрузить();
	
	СписокПараметров = Новый Массив;
	СписокПараметров.Добавить("КодОрганаПФР");
	СписокПараметров.Добавить("КодПодчиненностиФСС");
	СписокПараметров.Добавить("ОКТМО");
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ПериодСобытия, СписокПараметров);
	
	ТаблицаНалоговВзносов.Колонки.Добавить("Организация");
	ТаблицаНалоговВзносов.Колонки.Добавить("ОКАТО",               Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(11)));
	ТаблицаНалоговВзносов.Колонки.Добавить("КодНалоговогоОргана", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(10)));
	ТаблицаНалоговВзносов.Колонки.Добавить("Аванс",               Новый ОписаниеТипов("Булево"));
	
	Для Каждого СтрокаВзносов Из ТаблицаНалоговВзносов Цикл
		
		СтрокаВзносов.Организация = Организация;
		СтрокаВзносов.ОКАТО       = СведенияОбОрганизации.ОКТМО;
		СтрокаВзносов.Аванс       = Истина;
		
		ВидГосударственногоОргана = ПлатежиВБюджетПереопределяемый.ВидГосударственногоОргана(СтрокаВзносов.КБК);
		ВидНалоговогоОргана       = ПлатежиВБюджетКлиентСервер.ВидНалоговогоОргана(ВидГосударственногоОргана);
		Если Не ПустаяСтрока(ВидНалоговогоОргана) Тогда
			СведенияОбОрганизации.Свойство(ВидНалоговогоОргана, СтрокаВзносов.КодНалоговогоОргана);
		КонецЕсли;
		
	КонецЦикла;
	
	ДополнитьНачисленияПлатежнымиДокументами(СпособОплаты, Правило, ТаблицаНалоговВзносов, ПериодСобытия, Организация);
	
	ОписаниеДействия = Новый Структура;
	
	Если ТаблицаНалоговВзносов.Количество() = 0 Тогда
		
		ОписаниеДействия.Вставить("ИмяФормы", ИмяФормыПлатежногоДокумента);
		// Откроем пустую платежку
		ОписаниеПлатежа = НовыйОписаниеПлатежа();
		ОписаниеПлатежа.Организация        = Организация;
		ОписаниеПлатежа.СпособОплаты       = СпособОплаты;
		ОписаниеПлатежа.ИмяЗадачи          = Правило.Владелец.Код;
		ОписаниеПлатежа.Декларация         = Справочники.РегламентированныеОтчеты.ПустаяСсылка();
		ОписаниеПлатежа.ДатаДекларации     = '00010101';
		ОписаниеПлатежа.Период             = ПериодСобытия;
		ОписаниеПлатежа.ПоказательПериода  = "0";
		ЗначенияЗаполнения = ЗначенияЗаполненияПлатежногоДокумента(ОписаниеПлатежа);
		ОписаниеДействия.Вставить("ПараметрыФормы", Новый Структура("ЗначенияЗаполнения, ПериодСобытия, Правило", ЗначенияЗаполнения, ПериодСобытия, Правило));
		
	ИначеЕсли ТаблицаНалоговВзносов.Количество() = 1 Тогда
		
		ОписаниеДействия.Вставить("ИмяФормы", ИмяФормыПлатежногоДокумента);
		
		Платеж = ТаблицаНалоговВзносов[0];
		Если ЗначениеЗаполнено(Платеж.ПлатежноеПоручение) Тогда
			
			// Откроем существующую платежку
			ОписаниеДействия.Вставить("ПараметрыФормы", Новый Структура("Ключ", Платеж.ПлатежноеПоручение));
			
		Иначе
			
			// Создадим платежку по данным декларации
			ОписаниеПлатежа = НовыйОписаниеПлатежа();
			ОписаниеПлатежа.Организация         = Организация;
			ОписаниеПлатежа.СпособОплаты        = СпособОплаты;
			ОписаниеПлатежа.ИмяЗадачи           = Правило.Владелец.Код;
			ОписаниеПлатежа.Период              = ПериодСобытия;
			ОписаниеПлатежа.ПоказательПериода   = "0";
			ОписаниеПлатежа.Аванс               = Платеж.Аванс;
			ОписаниеПлатежа.КБК                 = Платеж.КБК;
			ОписаниеПлатежа.ОКАТО               = Платеж.ОКАТО;
			ОписаниеПлатежа.Сумма               = Платеж.Сумма;
			ОписаниеПлатежа.Описание            = Платеж.НазначениеПлатежа;
			ОписаниеПлатежа.Декларация          = Справочники.РегламентированныеОтчеты.ПустаяСсылка();
			ОписаниеПлатежа.ДатаДекларации      = '00010101';
			ОписаниеПлатежа.КодНалоговогоОргана = Платеж.КодНалоговогоОргана;
			ЗначенияЗаполнения = ЗначенияЗаполненияПлатежногоДокумента(ОписаниеПлатежа);
			
			ОписаниеДействия.Вставить("ПараметрыФормы", Новый Структура("ЗначенияЗаполнения, ПериодСобытия, Правило", ЗначенияЗаполнения, ПериодСобытия, Правило));
			
		КонецЕсли;
		
	Иначе
		// Откроем форму списка платежей
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация",       Организация);
		ПараметрыФормы.Вставить("ПериодСобытия",     ПериодСобытия);
		ПараметрыФормы.Вставить("Правило",           Правило);
		ПараметрыФормы.Вставить("СпособОплаты",      СпособОплаты);
		ПараметрыФормы.Вставить("Декларация",        Справочники.РегламентированныеОтчеты.ПустаяСсылка());
		ПараметрыФормы.Вставить("ДатаДекларации",    '00010101');
		ПараметрыФормы.Вставить("ОписаниеДействия",  "Уплата страховых взносов");
		ПараметрыФормы.Вставить("ПоказательПериода", "0");
		ПараметрыФормы.Вставить("Платежи",           ПоместитьВоВременноеХранилище(ТаблицаНалоговВзносов));
		
		ОписаниеДействия.Вставить("ИмяФормы",       "Обработка.ФормированиеПлатежныхПорученийНаУплатуНалогов.Форма.УплатаПоДекларации");
		ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
		
	КонецЕсли;
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияУплатаАвансовПоИмущественнымНалогам(Организация, РегистрацияВНалоговомОргане, СпособОплаты, Срок, Правило, ПериодСобытия, Описание)
	
	ОписаниеДействия = Новый Структура;
	НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Правило.Периодичность, ПериодСобытия);
	КонецПериода  = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Правило.Периодичность, ПериодСобытия);
	
	ИмяФормыПлатежногоДокумента = ?(СпособОплаты = Перечисления.СпособыУплатыНалогов.НаличнымиПоКвитанции,
		"Документ.РасходныйКассовыйОрдер.ФормаОбъекта", "Документ.ПлатежноеПоручение.ФормаОбъекта");
	
	СписокПараметров = Новый Массив;
	СписокПараметров.Добавить("КодНО");
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ПериодСобытия, СписокПараметров);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.УстановитьПараметр("НачалоПериода",  НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",   КонецПериода);
	Запрос.УстановитьПараметр("КодНО",          СведенияОбОрганизации.КодНО);
	Запрос.УстановитьПараметр("НалоговыйОрган", РегистрацияВНалоговомОргане);
	
	ИмяЗадачи = Правило.Владелец.Код;
	Если ИмяЗадачи = "ТранспортныйНалог" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РасчетТранспортногоНалога.ПериодРасчета КАК Период,
		|	РасчетТранспортногоНалога.КодПоОКТМО КАК ОКАТО,
		|	СУММА(РасчетТранспортногоНалога.СуммаНалогаКУплате) КАК Сумма,
		|	ЕСТЬNULL(РасчетТранспортногоНалога.ИФНС.Код, &КодНО) КАК КодНалоговогоОргана
		|ИЗ
		|	РегистрСведений.РасчетТранспортногоНалога КАК РасчетТранспортногоНалога
		|ГДЕ
		|	РасчетТранспортногоНалога.Организация = &Организация
		|	И РасчетТранспортногоНалога.ПериодРасчета МЕЖДУ &НачалоПериода И &КонецПериода
		|	И РасчетТранспортногоНалога.СуммаНалогаКУплате > 0
		|	И РасчетТранспортногоНалога.ИФНС = &НалоговыйОрган
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетТранспортногоНалога.ПериодРасчета,
		|	РасчетТранспортногоНалога.КодПоОКТМО,
		|	ЕСТЬNULL(РасчетТранспортногоНалога.ИФНС.Код, &КодНО)";
		
	ИначеЕсли ИмяЗадачи = "ЗемельныйНалог" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РасчетЗемельногоНалога.ПериодРасчета КАК Период,
		|	РасчетЗемельногоНалога.КодПоОКТМО КАК ОКАТО,
		|	СУММА(РасчетЗемельногоНалога.СуммаНалогаКУплате) КАК Сумма,
		|	РасчетЗемельногоНалога.КБК,
		|	ЕСТЬNULL(РасчетЗемельногоНалога.ИФНС.Код, &КодНО) КАК КодНалоговогоОргана
		|ИЗ
		|	РегистрСведений.РасчетЗемельногоНалога КАК РасчетЗемельногоНалога
		|ГДЕ
		|	РасчетЗемельногоНалога.Организация = &Организация
		|	И РасчетЗемельногоНалога.ПериодРасчета МЕЖДУ &НачалоПериода И &КонецПериода
		|	И РасчетЗемельногоНалога.СуммаНалогаКУплате > 0
		|	И РасчетЗемельногоНалога.ИФНС = &НалоговыйОрган
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетЗемельногоНалога.ПериодРасчета,
		|	РасчетЗемельногоНалога.КодПоОКТМО,
		|	РасчетЗемельногоНалога.КБК,
		|	ЕСТЬNULL(РасчетЗемельногоНалога.ИФНС.Код, &КодНО)";
		
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	Платежи = Результат.Выгрузить();
	Платежи.Колонки.Добавить("Аванс", Новый ОписаниеТипов("Булево"));
	Платежи.Колонки.Добавить("Агент", Новый ОписаниеТипов("Булево"));
	
	Платежи.ЗаполнитьЗначения(Истина, "Аванс");
	
	Если ИмяЗадачи = "ТранспортныйНалог" Тогда
		
		ВидНалога = РасчетыСБюджетом.ВидНалогаПоКодуЗадачи(ИмяЗадачи, Организация, КонецПериода);
		
		Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидНалога);
		КБК   = Справочники.ВидыНалоговИПлатежейВБюджет.КБК(Налог, , КонецПериода);
		
		Платежи.Колонки.Добавить("КБК", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20)));
		Платежи.ЗаполнитьЗначения(КБК);
		
	КонецЕсли;
	
	// Определим период, к которому относится платеж,
	// в соответствии с классификатором, используемым в платежных поручениях
	НалоговыйПериодДляПлатежейВБюджет = Правило.Периодичность;
	ПериодичностьПоКлассификатору = ПлатежиВБюджетПереопределяемый.ПериодичностьПоКлассификатору(НалоговыйПериодДляПлатежейВБюджет);
	Если ПериодичностьПоКлассификатору = ПлатежиВБюджетКлиентСервер.ПлатежПоКонкретнойДате()
		Или НалоговыйПериодДляПлатежейВБюджет <> Правило.Периодичность Тогда
		ПоказательПериода = ПлатежиВБюджетКлиентСервер.НалоговыйПериод(Срок, ПериодичностьПоКлассификатору);
	Иначе
		ПоказательПериода = ПлатежиВБюджетКлиентСервер.НалоговыйПериод(ПериодСобытия, ПериодичностьПоКлассификатору);
	КонецЕсли;
	
	ДополнитьНачисленияПлатежнымиДокументами(СпособОплаты, Правило, Платежи, ПериодСобытия, Организация);
	
	Если Платежи.Количество() = 0 Тогда
		
		ОписаниеДействия.Вставить("ИмяФормы", ИмяФормыПлатежногоДокумента);
		// По операции ничего не надо платить.
		// Откроем пустую платежку
		ОписаниеПлатежа = НовыйОписаниеПлатежа();
		ОписаниеПлатежа.Организация       = Организация;
		ОписаниеПлатежа.СпособОплаты      = СпособОплаты;
		ОписаниеПлатежа.ИмяЗадачи         = ИмяЗадачи;
		ОписаниеПлатежа.Период            = ПериодСобытия;
		ОписаниеПлатежа.ПоказательПериода = ПоказательПериода;
		
		ВидНалога = РасчетыСБюджетом.ВидНалогаПоКодуЗадачи(ОписаниеПлатежа.ИмяЗадачи, ОписаниеПлатежа.Организация, ОписаниеПлатежа.Период);
		
		ОписаниеПлатежа.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидНалога);
		
		ОписаниеПлатежа.КБК = Справочники.ВидыНалоговИПлатежейВБюджет.КБК(
			ОписаниеПлатежа.Налог, , ОписаниеПлатежа.Период);
		
		ЗначенияЗаполнения = ЗначенияЗаполненияПлатежногоДокумента(ОписаниеПлатежа);
		
		ОписаниеДействия.Вставить("ПараметрыФормы", Новый Структура("ЗначенияЗаполнения, ПериодСобытия, Правило", ЗначенияЗаполнения, ПериодСобытия, Правило));
		
	ИначеЕсли Платежи.Количество() = 1 Тогда
		
		ОписаниеДействия.Вставить("ИмяФормы", ИмяФормыПлатежногоДокумента);
		
		Платеж = Платежи[0];
		
		// Создадим платежку по данным операции
		ОписаниеПлатежа = НовыйОписаниеПлатежа(); // Передаем параметры в структуре, потому что их много
		ОписаниеПлатежа.Организация         = Организация;
		ОписаниеПлатежа.СпособОплаты        = СпособОплаты;
		ОписаниеПлатежа.ИмяЗадачи           = ИмяЗадачи;
		ОписаниеПлатежа.Период              = Платеж.Период;
		ОписаниеПлатежа.ПоказательПериода   = ПоказательПериода;
		ОписаниеПлатежа.Аванс               = Платеж.Аванс;
		ОписаниеПлатежа.КБК                 = Платеж.КБК;
		ОписаниеПлатежа.ОКАТО               = Платеж.ОКАТО;
		ОписаниеПлатежа.Сумма               = Платеж.Сумма;
		ОписаниеПлатежа.Описание            = Описание;
		ОписаниеПлатежа.КодНалоговогоОргана = Платеж.КодНалоговогоОргана;
		
		ВидНалога = РасчетыСБюджетом.ВидНалогаПоКодуЗадачи(ОписаниеПлатежа.ИмяЗадачи, ОписаниеПлатежа.Организация, ОписаниеПлатежа.Период);
		
		ОписаниеПлатежа.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидНалога);
		
		Если ПустаяСтрока(ОписаниеПлатежа.КБК) Тогда
			ОписаниеПлатежа.КБК = Справочники.ВидыНалоговИПлатежейВБюджет.КБК(
				ОписаниеПлатежа.Налог, , ОписаниеПлатежа.Период);
		КонецЕсли;
		
		ЗначенияЗаполнения = ЗначенияЗаполненияПлатежногоДокумента(ОписаниеПлатежа);
		
		ОписаниеДействия.Вставить("ПараметрыФормы", Новый Структура("ЗначенияЗаполнения, ПериодСобытия, Правило", ЗначенияЗаполнения, ПериодСобытия, Правило));
		
	Иначе
		
		// Откроем форму списка платежей
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация",       Организация);
		ПараметрыФормы.Вставить("ПериодСобытия",     ПериодСобытия);
		ПараметрыФормы.Вставить("Правило",           Правило);
		ПараметрыФормы.Вставить("СпособОплаты",      СпособОплаты);
		ПараметрыФормы.Вставить("ОписаниеДействия",  Описание);
		ПараметрыФормы.Вставить("ПоказательПериода", ПоказательПериода);
		ПараметрыФормы.Вставить("Платежи",           ПоместитьВоВременноеХранилище(Платежи));
		ПараметрыФормы.Вставить("Декларация",        Документы.РегламентированныйОтчет.ПустаяСсылка());
		ПараметрыФормы.Вставить("ДатаДекларации",    Дата(1,1,1));
		ПараметрыФормы.Вставить("ВидНалога",         РасчетыСБюджетом.ВидНалогаПоКодуЗадачи(ИмяЗадачи, Организация, ПериодСобытия));
		
		ОписаниеДействия.Вставить("ИмяФормы",       "Обработка.ФормированиеПлатежныхПорученийНаУплатуНалогов.Форма.УплатаПоДекларации");
		ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
		
	КонецЕсли;
	
	Возврат ОписаниеДействия;
	
КонецФункции

Процедура ДополнитьНачисленияПлатежнымиДокументами(СпособОплаты, Правило, Платежи, ПоказательПериода, Организация)
	
	МассивТиповПлатежныхДокументов = Новый Массив;
	МассивТиповПлатежныхДокументов.Добавить(Тип("ДокументСсылка.ПлатежноеПоручение"));
	МассивТиповПлатежныхДокументов.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	
	Платежи.Колонки.Добавить("Индекс",             Новый ОписаниеТипов("Число"));
	Платежи.Колонки.Добавить("ПлатежноеПоручение", Новый ОписаниеТипов(МассивТиповПлатежныхДокументов));
	Платежи.Колонки.Добавить("Оплачено",           Новый ОписаниеТипов("Булево"));
	Для Каждого СтрокаПлатежа Из Платежи Цикл
		СтрокаПлатежа.Индекс = Платежи.Индекс(СтрокаПлатежа);
	КонецЦикла;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Платежи.КБК КАК КБК,
	|	Платежи.ОКАТО КАК ОКАТО,
	|	Платежи.Аванс КАК Аванс,
	|	Платежи.Индекс КАК ИндексПлатежа
	|ПОМЕСТИТЬ ОтборТекущиеПлатежи
	|ИЗ
	|	&Платежи КАК Платежи
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КБК,
	|	ОКАТО,
	|	Аванс
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиБухгалтераНалоговыеПлатежи.ПлатежноеПоручение КАК Ссылка
	|ПОМЕСТИТЬ ОтборПравило
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтераНалоговыеПлатежи КАК ЗадачиБухгалтераНалоговыеПлатежи
	|ГДЕ
	|	ЗадачиБухгалтераНалоговыеПлатежи.Организация = &Организация
	|	И ЗадачиБухгалтераНалоговыеПлатежи.Правило = &Правило
	|	И ЗадачиБухгалтераНалоговыеПлатежи.ПериодСобытия = &ПериодСобытия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка" + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Если СпособОплаты = Перечисления.СпособыУплатыНалогов.НаличнымиПоКвитанции Тогда
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	РасходныйКассовыйОрдер.Ссылка,
		|	РасходныйКассовыйОрдер.Дата,
		|	РасходныйКассовыйОрдер.КодБК КАК КБК,
		|	РасходныйКассовыйОрдер.КодОКАТО КАК ОКАТО,
		|	РасходныйКассовыйОрдер.СуммаДокумента КАК Сумма,
		|	ИСТИНА КАК Оплачено
		|ПОМЕСТИТЬ ПлатежиПоПравилу
		|ИЗ
		|	ОтборПравило КАК Отбор
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
		|		ПО Отбор.Ссылка = РасходныйКассовыйОрдер.Ссылка
		|ГДЕ
		|	РасходныйКассовыйОрдер.Организация = &Организация
		|	И НЕ РасходныйКассовыйОрдер.ПометкаУдаления
		|	И РасходныйКассовыйОрдер.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.УплатаНалога)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КБК,
		|	ОКАТО" + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
		
	Иначе
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ПлатежноеПоручение.Ссылка,
		|	ПлатежноеПоручение.Дата,
		|	ПлатежноеПоручение.КодБК КАК КБК,
		|	ПлатежноеПоручение.КодОКАТО КАК ОКАТО,
		|	ПлатежноеПоручение.СуммаДокумента КАК Сумма,
		|	ПлатежноеПоручение.Оплачено
		|ПОМЕСТИТЬ ПлатежиПоПравилу
		|ИЗ
		|	ОтборПравило КАК Отбор
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
		|		ПО Отбор.Ссылка = ПлатежноеПоручение.Ссылка
		|ГДЕ
		|	ПлатежноеПоручение.Организация = &Организация
		|	И НЕ ПлатежноеПоручение.ПометкаУдаления
		|	И ПлатежноеПоручение.ПеречислениеВБюджет
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КБК,
		|	ОКАТО" + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ
	|	Платежи.ИндексПлатежа КАК ИндексПлатежа,
	|	ПлатежиПоПравилу.Ссылка КАК ПлатежноеПоручение,
	|	ПлатежиПоПравилу.Оплачено,
	|	ПлатежиПоПравилу.Сумма
	|ИЗ
	|	ПлатежиПоПравилу КАК ПлатежиПоПравилу
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборТекущиеПлатежи КАК Платежи
	|		ПО ПлатежиПоПравилу.КБК = Платежи.КБК
	|			И ПлатежиПоПравилу.ОКАТО = Платежи.ОКАТО
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПлатежиПоПравилу.Сумма УБЫВ
	|ИТОГИ ПО
	|	ИндексПлатежа";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("Правило",       Правило);
	Запрос.УстановитьПараметр("Платежи",       Платежи);
	Запрос.УстановитьПараметр("ПериодСобытия", ПоказательПериода);
	Запрос.Текст = ТекстЗапроса;
	
	ВыборкаПоИндексам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоИндексам.Следующий() Цикл
		Выборка = ВыборкаПоИндексам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Если Выборка.Следующий() Тогда
			Платеж = Платежи[Выборка.ИндексПлатежа];
			Платеж.ПлатежноеПоручение = Выборка.ПлатежноеПоручение;
			Платеж.Оплачено = Выборка.Оплачено;
			//Платеж.Сумма    = Выборка.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	Платежи.Колонки.Удалить("Индекс");
	
КонецПроцедуры

Процедура ДополнитьМассивСчетовУчета(ТаблицаСчетовСтраховыхВзносов, Налог, ПериодСобытия)
	
	СчетУчетаВзносов = Справочники.ВидыНалоговИПлатежейВБюджет.СчетУчета(Налог, ПериодСобытия);
	Если ЗначениеЗаполнено(СчетУчетаВзносов) Тогда
		НоваяСтрока = ТаблицаСчетовСтраховыхВзносов.Добавить();
		НоваяСтрока.Налог     = Налог;
		НоваяСтрока.СчетУчета = СчетУчетаВзносов;
		НоваяСтрока.КБК       = Справочники.ВидыНалоговИПлатежейВБюджет.КБК(Налог, , ПериодСобытия);
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыСтраховыхВзносов(ПериодСобытия)
	
	ТаблицаСчетовСтраховыхВзносов = Новый ТаблицаЗначений;
	ТаблицаСчетовСтраховыхВзносов.Колонки.Добавить("Налог",             Новый ОписаниеТипов("СправочникСсылка.ВидыНалоговИПлатежейВБюджет"));
	ТаблицаСчетовСтраховыхВзносов.Колонки.Добавить("СчетУчета",         Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаСчетовСтраховыхВзносов.Колонки.Добавить("КБК",               Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20)));
	ТаблицаСчетовСтраховыхВзносов.Колонки.Добавить("НазначениеПлатежа", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(210)));
	
	// 69.01
	ДополнитьМассивСчетовУчета(ТаблицаСчетовСтраховыхВзносов,
		Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.СтраховыеВзносы_ФСС),
		ПериодСобытия);
		
	// 69.02.7
	ДополнитьМассивСчетовУчета(ТаблицаСчетовСтраховыхВзносов,
		Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.СтраховыеВзносы_ПФР_СтраховаяЧасть),
		ПериодСобытия);
		
	// 69.11
	ДополнитьМассивСчетовУчета(ТаблицаСчетовСтраховыхВзносов,
		Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.СтраховыеВзносы_ФСС_НСиПЗ),
		ПериодСобытия);
		
	// 69.03.1
	ДополнитьМассивСчетовУчета(ТаблицаСчетовСтраховыхВзносов,
		Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.СтраховыеВзносы_ФФОМС),
		ПериодСобытия);

	Если УчетЗарплаты.ИспользуетсяТрудЧленовЛетныхЭкипажей() Тогда
		// 69.02.3
		ДополнитьМассивСчетовУчета(ТаблицаСчетовСтраховыхВзносов,
			Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.ДополнительныеВзносы_ПФР_ЛетныеЭкипажи),
			ПериодСобытия);
	КонецЕсли;
	
	Если УчетЗарплаты.ИспользуетсяТрудШахтеров() Тогда	
		// 69.02.4
		ДополнитьМассивСчетовУчета(ТаблицаСчетовСтраховыхВзносов,
			Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.ДополнительныеВзносы_ПФР_Шахтеры),
			ПериодСобытия);
	КонецЕсли;
	
	Если УчетЗарплаты.ИспользуютсяРаботыСДосрочнойПенсией() Тогда
		// 69.02.5
		ДополнитьМассивСчетовУчета(ТаблицаСчетовСтраховыхВзносов,
			Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.ДополнительныеВзносы_ПФР_ВредныеУсловия),
			ПериодСобытия);
		
		// 69.02.6
		ДополнитьМассивСчетовУчета(ТаблицаСчетовСтраховыхВзносов,
			Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.ДополнительныеВзносы_ПФР_ТяжелыеУсловия),
			ПериодСобытия);
	КонецЕсли;
	
	Если УчетЗарплаты.УдерживаютсяДобровольныеВзносыВПФР() Тогда
		// 69.05.2
		ДополнитьМассивСчетовУчета(ТаблицаСчетовСтраховыхВзносов,
			Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.СтраховыеВзносы_ПФР_Добровольные),
			ПериодСобытия);
	КонецЕсли;
	
	Возврат ТаблицаСчетовСтраховыхВзносов;
	
КонецФункции
