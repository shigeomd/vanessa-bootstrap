#Область СтатусыДокументов

// Возвращает право на изменение статусов документов
//
// Возвращаемое значение:
//  Булево
//
Функция ПравоИзмененияСтатусовДокументов() Экспорт
	
	Возврат ПравоДоступа("Изменение", Метаданные.РегистрыСведений.СтатусыДокументов);
	
КонецФункции

Функция ПодготовитьТаблицуСтатусовСчетов(ТаблицаОплатыСчетов, ТаблицаРеквизитов) Экспорт
	
	Параметры = ПодготовитьПараметрыТаблицыСтатусовСчетов(ТаблицаОплатыСчетов, ТаблицаРеквизитов);
	
	Если Параметры.Реквизиты.Количество() = 0 Или Параметры.ОплатаСчетов.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты    = Параметры.Реквизиты[0];
	ОплатаСчетов = Параметры.ОплатаСчетов;
	
	ТаблицаСтатусов = НоваяТаблицаСтатусов();
	
	// Установка управляемой блокировки
	
	ПараметрыБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы, ИсточникДанных",
		"РегистрСведений", "СтатусыДокументов", ОплатаСчетов);
	
	ЗначенияБлокировки = Новый Структура;
	ЗначенияБлокировки.Вставить("Организация", Реквизиты.Организация);
	
	ОписаниеИсточника = Новый Структура("Документ", "СчетНаОплату");
	
	ОбщегоНазначенияБПВызовСервера.УстановитьУправляемуюБлокировку(ПараметрыБлокировки, ЗначенияБлокировки, ОписаниеИсточника);
	
	// Читаем статусы оплаченных счетов и отсекаем те счета, статусы которых менять не собираемся
	
	АвтоматическиИзменяемыеСтатусы = Новый Массив;
	АвтоматическиИзменяемыеСтатусы.Добавить(Перечисления.СтатусОплатыСчетаПокупателю.НеОплачен);
	АвтоматическиИзменяемыеСтатусы.Добавить(Перечисления.СтатусОплатыСчетаПокупателю.ОплаченЧастично);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация",                    Реквизиты.Организация);
	Запрос.УстановитьПараметр("ОплатаСчетов",                   ОплатаСчетов);
	Запрос.УстановитьПараметр("АвтоматическиИзменяемыеСтатусы", АвтоматическиИзменяемыеСтатусы);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	ОплатаСчетов.СчетНаОплату КАК СчетНаОплату,
	|	ОплатаСчетов.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВТ_ТаблицаДокументов
	|ИЗ
	|	&ОплатаСчетов КАК ОплатаСчетов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	СчетНаОплату
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументов.СчетНаОплату,
	|	ТаблицаДокументов.Сумма,
	|	СчетНаОплатуПокупателю.Дата,
	|	СчетНаОплатуПокупателю.СуммаДокумента,
	|	ЕСТЬNULL(СтатусыДокументов.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусОплатыСчетаПокупателю.НеОплачен)) КАК Статус
	|ПОМЕСТИТЬ ВТ_ТаблицаДокументов_Статусы
	|ИЗ
	|	ВТ_ТаблицаДокументов КАК ТаблицаДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
	|		ПО (СчетНаОплатуПокупателю.Организация = ТаблицаДокументов.Организация)
	|			И (СчетНаОплатуПокупателю.Ссылка = ТаблицаДокументов.СчетНаОплату)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументов КАК СтатусыДокументов
	|		ПО (СтатусыДокументов.Организация = ТаблицаДокументов.Организация)
	|			И (СтатусыДокументов.Документ = ТаблицаДокументов.СчетНаОплату)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Статус
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументов.Дата КАК Дата,
	|	ТаблицаДокументов.СчетНаОплату КАК СчетНаОплату,
	|	ТаблицаДокументов.СуммаДокумента КАК СуммаДокумента,
	|	ТаблицаДокументов.Статус КАК Статус
	|ИЗ
	|	ВТ_ТаблицаДокументов_Статусы КАК ТаблицаДокументов
	|ГДЕ
	|	ТаблицаДокументов.Статус В(&АвтоматическиИзменяемыеСтатусы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	СчетНаОплату";
	
	ТаблицаНеоплаченныхСчетов = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаНеоплаченныхСчетов.Количество() = 0 Тогда
		Возврат ТаблицаСтатусов;
	КонецЕсли;
	
	// Раньше даты первого счета не имеет смысла искать оплаты
	Запрос.УстановитьПараметр(
		"ДатаПервогоСчета", НачалоДня(ТаблицаНеоплаченныхСчетов[0].Дата));
	
	Запрос.УстановитьПараметр("ПозицияРегистратора",
		Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	
	Запрос.УстановитьПараметр("СписокНеоплаченныхСчетов",
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаНеоплаченныхСчетов, "СчетНаОплату"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.СчетНаОплату КАК СчетНаОплату,
	|	СУММА(ВложенныйЗапрос.Сумма) КАК СуммаОплаты
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаДокументов.СчетНаОплату КАК СчетНаОплату,
	|		ТаблицаДокументов.Сумма КАК Сумма
	|	ИЗ
	|		ВТ_ТаблицаДокументов_Статусы КАК ТаблицаДокументов
	|	ГДЕ
	|		ТаблицаДокументов.Статус В(&АвтоматическиИзменяемыеСтатусы)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОплатаСчетовОбороты.СчетНаОплату,
	|		ОплатаСчетовОбороты.СуммаОборот
	|	ИЗ
	|		РегистрНакопления.ОплатаСчетов.Обороты(
	|				&ДатаПервогоСчета,
	|				&ПозицияРегистратора,
	|				,
	|				Организация = &Организация
	|					И СчетНаОплату В (&СписокНеоплаченныхСчетов)) КАК ОплатаСчетовОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОплатаСчетовОбороты.СчетНаОплату,
	|		ОплатаСчетовОбороты.СуммаОборот
	|	ИЗ
	|		РегистрНакопления.ОплатаСчетов.Обороты(
	|				&ПозицияРегистратора,
	|				,
	|				,
	|				Организация = &Организация
	|					И СчетНаОплату В (&СписокНеоплаченныхСчетов)) КАК ОплатаСчетовОбороты) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.СчетНаОплату,
	|	ВложенныйЗапрос.СчетНаОплату.СуммаДокумента";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НайденныеСтроки = ТаблицаНеоплаченныхСчетов.НайтиСтроки(Новый Структура("СчетНаОплату", Выборка.СчетНаОплату));
		
		Если НайденныеСтроки.Количество() = 0 Или Выборка.СуммаОплаты >= НайденныеСтроки[0].СуммаДокумента Тогда
			Статус = Перечисления.СтатусОплатыСчетаПокупателю.Оплачен;
		ИначеЕсли  Выборка.СуммаОплаты > 0 Тогда
			Статус = Перечисления.СтатусОплатыСчетаПокупателю.ОплаченЧастично;
		Иначе
			Статус = Перечисления.СтатусОплатыСчетаПокупателю.НеОплачен;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаСтатусов.Добавить();
		НоваяСтрока.Документ = Выборка.СчетНаОплату;
		НоваяСтрока.Статус   = Статус;
		
	КонецЦикла;
	
	Возврат ТаблицаСтатусов;
	
КонецФункции

Функция ПодготовитьПараметрыТаблицыСтатусовСчетов(ТаблицаОплатыСчетов, ТаблицаРеквизитов)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ОплатаСчетов
	
	СписокОбязательныхКолонок = ""
		+ "СчетНаОплату," // <ДокументСсылка.СчетНаОплатуПокупателю> - счет на оплату
		+ "Сумма";        // <Число,15,2> - сумма оплаты в валюте счета
	
	Параметры.Вставить("ОплатаСчетов", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаОплатыСчетов, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"      // <Дата> - период движений - дата документа
		+ "Регистратор," // <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация"; // <СправочникСсылка.Организации> - организация
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

Функция НоваяТаблицаСтатусов()
	
	ТаблицаСтатусов = Новый ТаблицаЗначений;
	ТаблицаСтатусов.Колонки.Добавить("Документ", Новый ОписаниеТипов("ДокументСсылка.СчетНаОплатуПокупателю"));
	ТаблицаСтатусов.Колонки.Добавить("Статус",   Новый ОписаниеТипов("ПеречислениеСсылка.СтатусОплатыСчетаПокупателю"));
	
	Возврат ТаблицаСтатусов;
	
КонецФункции

Процедура СформироватьДвиженияСтатусовДокументов(ТаблицаСтатусов, ТаблицаРеквизитов) Экспорт
	
	Параметры = ПодготовитьПараметрыСтатусовДокументов(ТаблицаСтатусов, ТаблицаРеквизитов);
	
	Если Параметры.Реквизиты.Количество() = 0 Или Параметры.СтатусыДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Для Каждого СтрокаСтатуса Из Параметры.СтатусыДокументов Цикл
		
		НаборЗаписей = РегистрыСведений.СтатусыДокументов.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Документ.Значение = СтрокаСтатуса.Документ;
		НаборЗаписей.Отбор.Документ.Использование = Истина;
		
		Запись = НаборЗаписей.Добавить();
		Запись.Организация = Реквизиты.Организация;
		Запись.Документ    = СтрокаСтатуса.Документ;
		Запись.Статус      = СтрокаСтатуса.Статус;
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьПараметрыСтатусовДокументов(ТаблицаСтатусов, ТаблицаРеквизитов)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.СтатусыДокументов
	
	СписокОбязательныхКолонок = ""
		+ "Документ," // <ДокументСсылка.*> - документ
		+ "Статус";   // <ПеречислениеСсылка.*> - статус
	
	Параметры.Вставить("СтатусыДокументов", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСтатусов, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Организация"; // <СправочникСсылка.Организации> - организация
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти

#Область ОплатаСчетов

Процедура СформироватьДвиженияОплатаСчетов(ТаблицаОплатыСчетов, ТаблицаРеквизитов, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыОплатаСчетов(ТаблицаОплатыСчетов, ТаблицаРеквизитов);
	
	Если Параметры.Реквизиты.Количество() = 0 Или Параметры.ОплатаСчетов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Движения.ОплатаСчетов.Записывать = Истина;
	
	Для Каждого СтрокаОплаты Из Параметры.ОплатаСчетов Цикл
		
		Если СтрокаОплаты.Сумма <> 0 Тогда
			НовоеДвижение = Движения.ОплатаСчетов.Добавить();
			ЗаполнитьЗначенияСвойств(НовоеДвижение, СтрокаОплаты);
			ЗаполнитьЗначенияСвойств(НовоеДвижение, Реквизиты);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьПараметрыОплатаСчетов(ТаблицаОплатыСчетов, ТаблицаРеквизитов)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ОплатаСчетов
	
	СписокОбязательныхКолонок = ""
		+ "СчетНаОплату," // <ДокументСсылка.СчетНаОплатуПокупателю> - счет на оплату
		+ "СтавкаНДС,"    // <ПеречислениеСсылка.СтавкиНДС> - ставка НДС
		+ "Сумма,"        // <Число, 15, 2> - сумма оплаты в валюте счета включая НДС
		+ "СуммаНДС,"     // <Число, 15, 2> - сумма НДС в валюте счета
		+ "Валюта";       // <СправочникСсылка.Валюта> - валюта счета
	
	Параметры.Вставить("ОплатаСчетов", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаОплатыСчетов, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"      // <Дата> - период движений - дата документа
		+ "Регистратор," // <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация"; // <СправочникСсылка.Организации> - организация
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

// Уменьшает таблицу УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДСВРазрезеСтавокНДС() на
// сумму полученного аванса по счету. Вызывается из обработки заполнения платежных документов.
//
Функция ТаблицаСуммКОплатеВРазрезеСтавокНДС(ДанныеОбъекта, ТаблицаСуммВРазрезеСтавокНДС) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",  ДанныеОбъекта.Организация);
	Запрос.УстановитьПараметр("СчетНаОплату", ДанныеОбъекта.Основание);
	Запрос.УстановитьПараметр("ДатаСчета",    НачалоДня(ДанныеОбъекта.ДатаОснования));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОплатаСчетовОбороты.СтавкаНДС КАК СтавкаНДС,
	|	ОплатаСчетовОбороты.СуммаОборот КАК Сумма,
	|	ОплатаСчетовОбороты.СуммаНДСОборот КАК СуммаНДС
	|ИЗ
	|	РегистрНакопления.ОплатаСчетов.Обороты(
	|			&ДатаСчета,
	|			,
	|			,
	|			Организация = &Организация
	|				И СчетНаОплату = &СчетНаОплату) КАК ОплатаСчетовОбороты";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ТаблицаСуммКОплате = ТаблицаСуммВРазрезеСтавокНДС.СкопироватьКолонки();
		
		ТаблицаОплат = РезультатЗапроса.Выгрузить();
		
		Для Каждого СтрокаТаблицыСумм Из ТаблицаСуммВРазрезеСтавокНДС Цикл
			
			НайденныеСтроки = ТаблицаОплат.НайтиСтроки(Новый Структура("СтавкаНДС", СтрокаТаблицыСумм.СтавкаНДС));
			Если НайденныеСтроки.Количество() > 0 Тогда
				НеоплаченнаяСумма    = Макс(СтрокаТаблицыСумм.Сумма - НайденныеСтроки[0].Сумма, 0);
				НеоплаченнаяСуммаНДС = Макс(СтрокаТаблицыСумм.СуммаНДС - НайденныеСтроки[0].СуммаНДС, 0);
			Иначе
				НеоплаченнаяСумма    = СтрокаТаблицыСумм.Сумма;
				НеоплаченнаяСуммаНДС = СтрокаТаблицыСумм.СуммаНДС;
			КонецЕсли;
			
			Если НеоплаченнаяСумма > 0 Тогда
				НоваяСтрока = ТаблицаСуммКОплате.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыСумм);
				НоваяСтрока.Сумма     = НеоплаченнаяСумма;
				НоваяСтрока.СуммаНДС  = НеоплаченнаяСуммаНДС;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		ТаблицаСуммКОплате = ТаблицаСуммВРазрезеСтавокНДС;
	КонецЕсли;
	
	Возврат ТаблицаСуммКОплате;
	
КонецФункции

#КонецОбласти