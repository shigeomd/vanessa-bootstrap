
////////////////////////////////////////////////////////////////////////////////
// ЭлектронныеДокументыСлужебныйКлиент: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Только для внутреннего использования
Функция ПроверитьИспользованиеИнтернетПоддержкаПользователей() Экспорт
	
	Использование = Неопределено;
	ЭлектронныеДокументыКлиентПереопределяемый.ПроверитьИспользованиеИнтернетПоддержкаПользователей(Использование);
	Если Использование = Неопределено Тогда
		Использование = Ложь;
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			Если Метаданные.Константы.Найти("ФайлОбработкиИнтернетПоддержкиПользователей") <> Неопределено Тогда
				Использование = Истина;
			КонецЕсли;
		#КонецЕсли
	КонецЕсли;
	
	Возврат Использование;
	
КонецФункции

// Открывает форму просмотра электронного документа.
//
// Параметры:
//  СсылкаНаЭД        - ссылка на электронный документ, открываемый для просмотра
//  ПараметрыОткрытия - структура, дополнительные параметры просмотра
//  ВладелецФормы     - управляемая форма
//
Процедура ОткрытьЭДДляПросмотра(СсылкаНаЭД, ПараметрыОткрытия = Неопределено, ВладелецФормы = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаЭД) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("СсылкаНаЭД", СсылкаНаЭД);
	Параметры.Вставить("ПараметрыОткрытия", ПараметрыОткрытия);
	Параметры.Вставить("ВладелецФормы", ВладелецФормы);
	
	Оповещение = Новый ОписаниеОповещения("ПослеПолученияОтпечатковОткрытьЭДДляПросмотра", ЭтотОбъект, Параметры);
	
	ЭлектроннаяПодписьКлиент.ПолучитьОтпечаткиСертификатов(Оповещение, Истина, Ложь);

КонецПроцедуры

Процедура ПолучитьCоответствиеСоглашенийИПараметровСертификатов(ОбработчикОповещения, МассивСоглашений = Неопределено, МассивЭД = Неопределено) Экспорт
	
	Отказ = Ложь;
	
	МассивСтруктурСертификатов = Новый Массив;
	ВыполнятьКриптооперацииНаСервере = ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере();
	СтМассивовСтруктурСертификатов = Новый Структура;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОбработчикОповещения", ОбработчикОповещения);
	ДополнительныеПараметры.Вставить("МассивСоглашений", МассивСоглашений);
	ДополнительныеПараметры.Вставить("МассивЭД", МассивЭД);
	
	ИспользуютсяЭП = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции("ИспользоватьЭлектронныеПодписиЭД");
	ПоказатьОшибку = (ИспользуютсяЭП И НЕ ВыполнятьКриптооперацииНаСервере);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПослеПолученияОтпечатковСертификатов", ЭтотОбъект, ДополнительныеПараметры);
	ЭлектроннаяПодписьКлиент.ПолучитьОтпечаткиСертификатов(ОписаниеОповещения, Истина, ПоказатьОшибку);
	
КонецПроцедуры

// Выводит сообщение пользователю о нехватке прав доступа.
Процедура СообщитьПользователюОНарушенииПравДоступа() Экспорт
	
	ОчиститьСообщения();
	ТекстСообщения = НСтр("ru = 'Нарушение прав доступа'");
	ЭлектронныеДокументыКлиентПереопределяемый.ПодготовитьТекстСообщенияОНарушенииПравДоступа(ТекстСообщения);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

// Заполняет данные о способах получения технической поддержки по ЭДО.
//
//
Процедура ЗаполнитьДанныеСлужбыПоддержки(ТелефонСлужбыПоддержки, АдресЭлектроннойПочтыСлужбыПоддержки) Экспорт

	// Контактные данные ЗАО "Калуга Астрал"
	ТелефонСлужбыПоддержки = "8-800-333-9313";
	АдресЭлектроннойПочтыСлужбыПоддержки = "edo@1c.ru";

КонецПроцедуры

Процедура ОткрытьИнструкциюПо1СБухфон() Экспорт
	
	ПерейтиПоНавигационнойСсылке("http://its.1c.ru/db/aboutits#content:750:1");
	
КонецПроцедуры

// Получает пароль к сертификату, если доступен текущему пользователю.
//
// Параметры:
//  СертификатЭП       - СправочникСсылка.СертификатыЭП - сертификат ЭП.
//  ПарольПользователя - Строка - пароль к сертификату ЭП, полученный из глобальной переменной.
//
// Возвращаемое значение:
//  Булево - Истина - если пароль для сертификата ЭП получен, иначе - Ложь.
//
Функция ПарольКСертификатуПолучен(СертификатЭП, ПарольПользователя, НаВремяСеанса = Ложь) Экспорт
	
	ПарольПользователя = Неопределено;
	СоответствиеСертификатаИПароля = ПараметрыПриложения["ЭлектронноеВзаимодействие.СоответствиеСертификатаИПароля"];
	Если ТипЗнч(СоответствиеСертификатаИПароля) = Тип("ФиксированноеСоответствие") Тогда
		ПарольПользователя = СоответствиеСертификатаИПароля.Получить(СертификатЭП);
		НаВремяСеанса = (ПарольПользователя <> Неопределено);
	КонецЕсли;
	
	Если ПарольПользователя = Неопределено Тогда
		ПарольПользователя = ЭлектронныеДокументыСлужебныйВызовСервера.ПарольКСертификату(СертификатЭП);
	КонецЕсли;
	
	Возврат (ПарольПользователя <> Неопределено);
	
КонецФункции

// Открывает форму ПроверкаСертификата и возвращает результат проверки.
//
// Параметры:
//  Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - проверяемый сертификат.
//
//  ОбработкаЗавершения  - ОписаниеОповещения - вызывается при закрытии формы.
//  ПроверитьАвторизацию - Булево - если Истина, то к проверкам сертификата будет добавлен тест связи
//                            с сервером Такском.
//  ВладелецФормы        - УправляемаяФорма - другая форма.
//  ПроверкаПриВыборе    - Булево - если Истина, тогда кнопка Проверить будет называться
//                            "Проверить и продолжить", а кнопка Закрыть будет называться "Отмена".
//  БезПодтверждения     - Булево - если установить Истина, тогда при наличии пароля
//                            проверка будет выполнена сразу без открытия формы.
//                            Если режим ПроверкаПриВыборе и установлен параметр ОбработкаРезультата, то
//                            форма не будет открыта, если параметр ПроверкиПройдены установлен Истина.
//
Процедура ТестНастроекСПроверкойСертификата(
					Сертификат,
					ОбработкаЗавершения = Неопределено,
					ПроверитьАвторизацию = Ложь,
					ВладелецФормы = Неопределено,
					ПроверкаПриВыборе = Ложь,
					БезПодтверждения = Ложь) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ОбработкаРезультата = Новый ОписаниеОповещения("ОбработкаРезультатаТестаСертификата",
		ЭлектронныеДокументыСлужебныйКлиент, ДополнительныеПараметры);
	ДополнительныеПараметры.Вставить("ВладелецФормы",       ВладелецФормы);
	ДополнительныеПараметры.Вставить("ПроверкаПриВыборе",   ПроверкаПриВыборе);
	ДополнительныеПараметры.Вставить("ОбработкаРезультата", ОбработкаРезультата);
	ДополнительныеПараметры.Вставить("БезПодтверждения",    БезПодтверждения);
	
	ПараметрыДополнительныхПроверок = Новый Структура;
	ПараметрыДополнительныхПроверок.Вставить("ПроверитьАвторизацию", ПроверитьАвторизацию);
	
	ДополнительныеПараметры.Вставить("ПараметрыДополнительныхПроверок", ПараметрыДополнительныхПроверок);
	
	ЗаголовокФормы = НСтр("ru = 'Проверка сертификата %1'");
	ЗаголовокФормы = СтрЗаменить(ЗаголовокФормы, "%1", Сертификат);
	ДополнительныеПараметры.Вставить("ЗаголовокФормы", ЗаголовокФормы);
	Если ТипЗнч(ОбработкаЗавершения) = Тип("ОписаниеОповещения") Тогда
		ДополнительныеПараметры.Вставить("ОбработкаЗавершения", ОбработкаЗавершения);
	КонецЕсли;
	
	ЭлектроннаяПодписьКлиент.ПроверитьСертификатСправочника(Сертификат, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбработкаРезультатаТестаСертификата(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		
		СтруктураПроверокСертификатаНаКлиенте = ДополнительныеПараметры.Результат.ПроверкиНаСервере;
		СтруктураПроверокСертификатаНаСервере = ДополнительныеПараметры.Результат.ПроверкиНаКлиенте;
		
		РезультатСервер = Ложь;
		Если ТипЗнч(СтруктураПроверокСертификатаНаСервере) = Тип("Структура") Тогда
			РезультатСервер = СтруктураПроверокСертификатаНаСервере.Количество() > 0;
			Для каждого ЭлементСтруктуры Из СтруктураПроверокСертификатаНаСервере Цикл
				Если Не ЭлементСтруктуры.Значение Тогда
					РезультатСервер = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		РезультатКлиент = Ложь;
		Если ТипЗнч(СтруктураПроверокСертификатаНаКлиенте) = Тип("Структура") Тогда
			РезультатКлиент = СтруктураПроверокСертификатаНаКлиенте.Количество() > 0;
			Для каждого ЭлементСтруктуры Из СтруктураПроверокСертификатаНаКлиенте Цикл
				Если Не ЭлементСтруктуры.Значение Тогда
					РезультатКлиент = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Результат = РезультатКлиент ИЛИ РезультатСервер;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПароли(ПараметрыСертификата, Результат) Экспорт
	
	ПараметрыСертификата.ПарольПользователя = Результат.ПарольПользователя;
	Если ПараметрыСертификата.Свойство("Пользователь") И Результат.Свойство("Пользователь") Тогда
		ПараметрыСертификата.Пользователь = Результат.Пользователь;
	КонецЕсли;
	ПараметрыСертификата.ПарольПолучен = Истина;

КонецПроцедуры

// Устарела.Использует модальный вызов. Использовать "ЗапроситьПарольКСертификату"
// Функция получает пароль пользователя к сертификатам ЭП. Если в СоотвСертификатовИИхСтруктур передано несколько
// сертификатов, то после запроса пароля у пользователя в этот параметр вместо списка помещается один выбранный
// сертификат и его параметры.
//
// Параметры:
//  СоотвСертификатовИИхСтруктур - Соответствие - содержит соответствие сертификатов и их параметров:
//    * Ключ     - СправочникСсылка.СертификатыЭП - сертификат ЭП.
//    * Значение - Структура - содержит параметры сертификата.
//  ВидОперации                    - Строка - вид операции, для выполнения которой запрашивается пароль пользователя.
//  ОбъектыДляОбработки - Массив, СправочникСсылка.ЭДПрисоединенныеФайлы - один или список объектов ИБ для обработки;
//  ДляЗаписиВИБ - Булево - Истина - если запрашивается пароль для сохранения в реквизит справочника.
//
// Возвращаемое значение:
//  Булево - Истина - если пароль для сертификата ЭП получен, иначе - Ложь.
//
Функция ПарольКСертификатуПолученМодально(СоотвСертификатовИИхСтруктур, ВидОперации,
	ОбъектыДляОбработки = Неопределено, ДляЗаписиВИБ = Ложь) Экспорт
	
	ПарольПолучен = Ложь;
	
	Если ТипЗнч(СоотвСертификатовИИхСтруктур) = Тип("Соответствие") Тогда
		КоличествоСертификатов = СоотвСертификатовИИхСтруктур.Количество();
		Соответствие = Новый Соответствие;
		Для Каждого КлючИЗначение Из СоотвСертификатовИИхСтруктур Цикл
			Сертификат = КлючИЗначение.Ключ;
			ПараметрыСертификата = КлючИЗначение.Значение;
			ПрограммаБанка = Неопределено;
			Если НЕ ЗначениеЗаполнено(ПараметрыСертификата) Тогда
				ПараметрыСертификата = ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыСертификата(Сертификат);
			КонецЕсли;
			Если ПараметрыСертификата.Свойство("ПрограммаБанка")
				И ПараметрыСертификата.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн") Тогда
				ПарольПолучен = Истина;
				Прервать;
			КонецЕсли;
			ПарольПользователя = Неопределено;
			Если НЕ ДляЗаписиВИБ И КоличествоСертификатов = 1
				И (ПараметрыСертификата.Свойство("ПарольПолучен", ПарольПолучен) И ПарольПолучен
				ИЛИ ПарольКСертификатуПолучен(Сертификат, ПарольПользователя)) Тогда
				Если НЕ ПарольПолучен Тогда
					ПарольПолучен = Истина;
					ПараметрыСертификата.Вставить("ПарольПолучен", ПарольПолучен);
					ПараметрыСертификата.Вставить("ПарольПользователя", ПарольПользователя);
				КонецЕсли;
				Прервать;
			ИначеЕсли ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку")
					И НЕ ОбъектыДляОбработки = Неопределено
					И АктуаленКэшПароляСертификатаЧерезДополнительнуюОбработку(ПараметрыСертификата, ОбъектыДляОбработки) Тогда
				ПарольПолучен = Истина;
				Прервать;
			ИначеЕсли ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.iBank2")
					И НЕ ОбъектыДляОбработки = Неопределено
					И АктуаленКэшПароляСертификатаiBank2(ПараметрыСертификата, ОбъектыДляОбработки) Тогда
				ПарольПолучен = Истина;
				Прервать;
			КонецЕсли;
			// В форме запроса пароля используются 3 параметра из структуры сертификата:
			// ПарольПользователя, ПарольПолучен, ЗапомнитьПарольКСертификату. Их и передадим в форму.
			Структура = Новый Структура("ПарольПользователя, ПарольПолучен, ЗапомнитьПарольКСертификату");
			ЗаполнитьЗначенияСвойств(Структура, ПараметрыСертификата);
			Соответствие.Вставить(Сертификат, Структура);
		КонецЦикла;
		
		Если Соответствие.Количество() > 0 Тогда
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("ВидОперации",   ВидОперации);
			ПараметрыФормы.Вставить("ДляЗаписиВИБ",  ДляЗаписиВИБ);
			ПараметрыФормы.Вставить("Соответствие",  Соответствие);
			Если ОбъектыДляОбработки <> Неопределено Тогда
				Если ТипЗнч(ОбъектыДляОбработки) <> Тип("Массив") Тогда
					МассивОбъектов = Новый Массив;
					МассивОбъектов.Добавить(ОбъектыДляОбработки);
				Иначе
					МассивОбъектов = ОбъектыДляОбработки;
				КонецЕсли;
				ПараметрыФормы.Вставить("ОбъектыДляОбработки", МассивОбъектов);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПарольПолучен;
	
КонецФункции

// Процедура добавляет пароль в глобальную переменную "СоответствиеСертификатаИПароля".
//
// Параметры:
//  СертификатЭП       - СправочникСсылка.СертификатыЭП - сертификат ЭП.
//  ПарольПользователя - Строка - пароль к сертификату ЭП.
//
Процедура ДобавитьПарольВГлобальнуюПеременную(СертификатЭП, ПарольПользователя) Экспорт
	
	Соответствие = Новый Соответствие;
	СоответствиеСертификатаИПароля = ПараметрыПриложения["ЭлектронноеВзаимодействие.СоответствиеСертификатаИПароля"];
	Если ТипЗнч(СоответствиеСертификатаИПароля) = Тип("ФиксированноеСоответствие") Тогда
		Для Каждого Элемент Из СоответствиеСертификатаИПароля Цикл
			Соответствие.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Соответствие.Вставить(СертификатЭП, ПарольПользователя);
	
	ПараметрыПриложения.Вставить("ЭлектронноеВзаимодействие.СоответствиеСертификатаИПароля",
		Новый ФиксированноеСоответствие(Соответствие));
	
КонецПроцедуры

// Процедура удаляет пароль из глобальной переменной "СоответствиеСертификатаИПароля".
//
// Параметры:
//  СертификатЭП - СправочникСсылка.СертификатыЭП - сертификат ЭП.
//
Процедура УдалитьПарольИзГлобальнойПеременной(СертификатЭП) Экспорт
	
	СоответствиеСертификатаИПароля = ПараметрыПриложения["ЭлектронноеВзаимодействие.СоответствиеСертификатаИПароля"];
	Если ТипЗнч(СоответствиеСертификатаИПароля) = Тип("ФиксированноеСоответствие")
		И СоответствиеСертификатаИПароля.Получить(СертификатЭП) <> Неопределено Тогда
		Соответствие = Новый Соответствие;
		Для Каждого Элемент Из СоответствиеСертификатаИПароля Цикл
			Если Элемент.Ключ <> СертификатЭП Тогда
				Соответствие.Вставить(Элемент.Ключ, Элемент.Значение);
			КонецЕсли;
		КонецЦикла;
		
		СоответствиеСертификатаИПароля = Новый ФиксированноеСоответствие(Соответствие);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьОтклонениеАннулированиеЭД(СсылкаНаЭД, ПараметрыЭД, ОтклонитьАннулирование = Ложь) Экспорт
	
	Если ПараметрыЭД.Отклонить Тогда
		ФормироватьЭД = Ложь;
		ПродолжитьОбработку = ЭлектронныеДокументыСлужебныйВызовСервера.МожноОтклонитьЭтотЭД(СсылкаНаЭД, ФормироватьЭД);
		Если ОтклонитьАннулирование Тогда
			Заголовок = НСтр("ru = 'Укажите причины отклонения предложения об аннулировании'");
		Иначе
			
			Если ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоСчетФактураПолученный(СсылкаНаЭД) Тогда
				Заголовок = НСтр("ru = 'Укажите текст запроса на уточнение'");
			Иначе
				Заголовок = НСтр("ru = 'Укажите причины отклонения документа'");
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		ФормироватьЭД = Истина;
		ПродолжитьОбработку = ЭлектронныеДокументыСлужебныйВызовСервера.МожноАннулироватьЭтотЭД(СсылкаНаЭД);
		Заголовок = НСтр("ru = 'Укажите причины аннулирования документа'");
	КонецЕсли;
	Если ПродолжитьОбработку Тогда
		ТекстУточнения = "";
		ПараметрыЭД.Вставить("СсылкаНаЭД", СсылкаНаЭД);
		ПараметрыЭД.Вставить("ФормироватьЭД", ФормироватьЭД);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьОтклонениеАннулированиеЭДЗавершить", ЭтотОбъект, ПараметрыЭД);
		ПоказатьВводСтроки(ОписаниеОповещения, ТекстУточнения, Заголовок, , Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьПредложениеОбАннулировании(ПервичныйЭД, ОтклонитьАннулирование = Ложь) Экспорт
	
	СтруктураЭД = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСсылкиНаЭДДляПОА(ПервичныйЭД);
	СтруктураЭД.Вставить("Отклонить", ОтклонитьАннулирование);
	Если ЗначениеЗаполнено(СтруктураЭД) Тогда
		Если ОтклонитьАннулирование Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьПредложениеОбАннулированииЗавершить", ЭтотОбъект);
			СтруктураЭД.Вставить("ОписаниеОповещения", ОписаниеОповещения);
			ОбработатьОтклонениеАннулированиеЭД(СтруктураЭД.ПОА, СтруктураЭД, ОтклонитьАннулирование);
		Иначе
			ОтправитьПодтверждениеЭД(СтруктураЭД.ВладелецФайла, СтруктураЭД.ПОА);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьПодписатьСлужебныйЭД(СсылкаНаЭД,
	ВидЭД, ТекстУточнения = "", ДопПараметры = Неопределено, ОписаниеОповещения = Неопределено) Экспорт
	
	Если ТипЗнч(СсылкаНаЭД) <> Тип("Массив") Тогда
		МассивЭД = Новый Массив;
		МассивЭД.Добавить(СсылкаНаЭД);
	Иначе
		МассивЭД = СсылкаНаЭД;
	КонецЕсли;
	
	ЭлектронныеДокументыКлиентСервер.СформироватьПодписатьИОтправитьСлужебныеЭД(МассивЭД, ВидЭД,
		ТекстУточнения, ДопПараметры, ОписаниеОповещения);
	
КонецПроцедуры

// Только для внутреннего использования
Процедура ОтправитьПодтверждениеЭД(ПараметрКоманды, ЭД = Неопределено) Экспорт
	
	МассивСсылок = ПолучитьМассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Если ЭД = Неопределено Тогда
			Возврат;
		Иначе
			МассивСсылок = Новый Массив;
		КонецЕсли;
	КонецЕсли;
	
	ОбработатьЭД(МассивСсылок, "УтвердитьПодписатьОтправить", , ЭД);
	Оповестить("ОбновитьСостояниеЭД");
	
КонецПроцедуры

// Только для внутреннего использования
Процедура УтвердитьЭД(ПараметрКоманды, ЭД = Неопределено, ФлагОтправки = Истина, ДопПараметры = Неопределено) Экспорт
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Если НЕ (ЭлектронныеДокументыПереопределяемый.ЕстьПравоОбработкиЭД()) Тогда
			СообщитьПользователюОНарушенииПравДоступа();
			Возврат;
		КонецЕсли;
	#КонецЕсли
	
	МассивСсылок = ПолучитьМассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Если ЭД = Неопределено Тогда
			Возврат;
		Иначе
			МассивСсылок = Новый Массив;
		КонецЕсли;
	КонецЕсли;
	
	Если ФлагОтправки Тогда
		ИмяКоманды = "УтвердитьОтправить";
	Иначе
		ИмяКоманды = "Утвердить";
	КонецЕсли;
	ОбработатьЭД(МассивСсылок, ИмяКоманды, ДопПараметры, ЭД);
	
	Оповестить("ОбновитьСостояниеЭД");
	
КонецПроцедуры

// Функция получает массив ссылок на объекты.
//
// Параметры:
//  ПараметрКоманды - ссылка на объект или массив
//
// Возвращаемое значение:
//  МассивСсылок - если передан в параметр массив, то возвращает его же
//                 если передана пустая ссылка возвращает неопределено
//
Функция ПолучитьМассивПараметров(ПараметрКоманды) Экспорт
	
	Если ТипЗнч(ПараметрКоманды) = Тип("Массив") Тогда
		Если ПараметрКоманды.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		МассивСсылок = ПараметрКоманды;
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ИначеЕсли ТипЗнч(ПараметрКоманды) = Тип("ВыделенныеСтрокиТабличногоПоля") Тогда
			МассивСсылок = Новый Массив;
			Для Каждого Элемент ИЗ ПараметрКоманды Цикл
				МассивСсылок.Добавить(Элемент);
			КонецЦикла
	#КонецЕсли
	Иначе // пришла единичная ссылка на объект
		Если НЕ ЗначениеЗаполнено(ПараметрКоманды) Тогда
			Возврат Неопределено;
		КонецЕсли;
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(ПараметрКоманды);
	КонецЕсли;
	
	Возврат МассивСсылок;
	
КонецФункции

// Вызывается из процедуры ПодготовитьИОтправитьПЭДПродолжить(...).
// Вызывает процедуру ВыполнитьДействияПослеОтправкиПЭДЗавершить(ДопПараметры).
//
// Параметры:
//   Результат - МенеджерКриптографии - инициализированный менеджер криптографии.
//               Строка - описание ошибки при создании менеджера криптографии.
//               Непределено - первый вызов метода

//   ДопПараметры - Структура:
//      Параметры                                   - Структура - входящие параметры для отправки ЭД.
//      РезультатОтправкиПЭД                        - Структура:
//         МассивПакетовДляОбработкиНаКлиенте - Массив - элементы - ДокументСсылка.ПакетыЭД.
//         КолОтправленных                    - Число.
//      СоответствиеПрофилейИПараметровСертификатов - Соответствие.
//
Процедура ВыполнитьДействияПослеОтправкиПЭД(Результат, ДопПараметры) Экспорт
	
	Параметры = Неопределено;
	РезультатОтправкиПЭД = Неопределено;
	ОбработчикПослеОтправкиПЭД = Неопределено;
	СоответствиеПрофилейИПараметровСертификатов = Неопределено;
	ДопПараметры.Свойство("Параметры", Параметры);
	ДопПараметры.Свойство("РезультатОтправкиПЭД", РезультатОтправкиПЭД);
	ДопПараметры.Свойство("СоответствиеПрофилейИПараметровСертификатов", СоответствиеПрофилейИПараметровСертификатов);
	
	ПерейтиКЗавершениюОтправки = Истина;
	МассивПакетовДляОбработкиНаКлиенте = Неопределено;
	Если ТипЗнч(РезультатОтправкиПЭД) = Тип("Структура")
		И РезультатОтправкиПЭД.Свойство("МассивПакетовДляОбработкиНаКлиенте", МассивПакетовДляОбработкиНаКлиенте)
		И МассивПакетовДляОбработкиНаКлиенте.Количество() > 0 Тогда
		
		Если Результат = Неопределено Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьДействияПослеОтправкиПЭД", ЭтотОбъект, ДопПараметры);
			ЭлектроннаяПодписьКлиент.СоздатьМенеджерКриптографии(ОписаниеОповещения, "Шифрование");

			ПерейтиКЗавершениюОтправки = Ложь;
		ИначеЕсли ТипЗнч(Результат) = Тип("МенеджерКриптографии") Тогда
			ПерейтиКЗавершениюОтправки = Ложь;
			// По концепции БЭД электронный документ в пакете один.
			СоответствиеДанныхПакетов = ЭлектронныеДокументыСлужебныйВызовСервера.СоответствиеДанныхПакетов(
													РезультатОтправкиПЭД.МассивПакетовДляОбработкиНаКлиенте);
													
			Параметры.Вставить("СоответствиеДанныхПакетов", СоответствиеДанныхПакетов);
			Параметры.Вставить("МенеджерКриптографии", Результат);
			ПодготовитьПакетыДляОтправки(ДопПараметры);
		КонецЕсли;
	КонецЕсли;
	
	Если ПерейтиКЗавершениюОтправки Тогда
		ВыполнитьДействияПослеОтправкиПЭДЗавершить(ДопПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из процедуры ВыполнитьДействияПослеОтправкиПЭД(...).
// Вызывает процедуру НачатьОтправкуПакетовЧерезДополнительнуюОбработку(...),
//   либо ПодключитьВнешнююКомпонентуiBank2(...),
//   либо выполняет описание оповещения переданное в параметре ОбработчикПослеОтправкиПЭД.
//
// Параметры:
//   ДопПараметры - Структура:
//      РезультатОтправкиПЭД       - Структура:
//         
//      Параметры                  - Структура - необязательный параметр, дополнительные параметры,
//                                     переданные из метода инициировавшего отправку ПЭД.
//      ОбработчикПослеОтправкиПЭД - ОписаниеОповещения - необязательный параметр, обработка результата отправки ПЭД.
//
Процедура ВыполнитьДействияПослеОтправкиПЭДЗавершить(ДопПараметры)
	
	Параметры = Неопределено;
	РезультатОтправкиПЭД = Неопределено;
	ОбработчикПослеОтправкиПЭД = Неопределено;
	ДопПараметры.Свойство("Параметры", Параметры);
	ДопПараметры.Свойство("РезультатОтправкиПЭД", РезультатОтправкиПЭД);
	ДопПараметры.Свойство("ОбработчикПослеОтправкиПЭД", ОбработчикПослеОтправкиПЭД);
	
	ВыполнитьОбработчикПослеОтправки = Истина;
	Если ТипЗнч(РезультатОтправкиПЭД) = Тип("Структура") Тогда
		Если РезультатОтправкиПЭД.Свойство("ДанныеДляОтправкиЧерезДопОбработку")
			И РезультатОтправкиПЭД.ДанныеДляОтправкиЧерезДопОбработку.Количество() > 0 Тогда
			
			Структура = Новый Структура;
			Структура.Вставить("ДанныеДляОтправки", РезультатОтправкиПЭД.ДанныеДляОтправкиЧерезДопОбработку);
			Структура.Вставить("ОбработчикПослеОтправкиПЭД", ОбработчикПослеОтправкиПЭД);
			Структура.Вставить("КолПодготовленных", РезультатОтправкиПЭД.КолПодготовленных);
			Структура.Вставить("КолОтправленных",   РезультатОтправкиПЭД.КолОтправленных);
			ОтправитьЧерезДополнительнуюОбработку(Неопределено, Структура);
			ВыполнитьОбработчикПослеОтправки = Ложь;
		ИначеЕсли РезультатОтправкиПЭД.Свойство("ДанныеДляОтправкиiBank2")
			И РезультатОтправкиПЭД.ДанныеДляОтправкиiBank2.Количество() > 0 Тогда
			
			Параметры.Вставить("СтруктураДанных", РезультатОтправкиПЭД);
			Если РезультатОтправкиПЭД.Свойство("КолПодготовленных") Тогда
				Параметры.ИтогКолПодготовленных = Параметры.ИтогКолПодготовленных + РезультатОтправкиПЭД.КолПодготовленных;
			КонецЕсли;
			
			ОбработчикПослеПодключения = Новый ОписаниеОповещения("НачатьОтправкуПакетовiBank2", ЭтотОбъект, Параметры);
			Параметры.Вставить("ОбработчикПослеПодключенияКомпоненты", ОбработчикПослеПодключения);
			ПодключитьВнешнююКомпонентуiBank2(Параметры);
			ВыполнитьОбработчикПослеОтправки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ВыполнитьОбработчикПослеОтправки
		И ТипЗнч(ОбработчикПослеОтправкиПЭД) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(ОбработчикПослеОтправкиПЭД, РезультатОтправкиПЭД);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из процедуры ПодготовитьИОтправитьПЭД(...).
// Вызывает процедуру ВыполнитьДействияПослеОтправкиПЭД(Результат, ДопПараметры).
//
// Параметры:
//   Результат    - Структура:
//      СоответствиеПрофилейИПараметровСертификатов - Соответствие.
//   ДопПараметры - Струкутра:
//      Параметры                  - Структура.
//      ПризнакПодписи             - Булево.
//      ДобавленныеФайлы           - СправочникСсылка.ЭДПрисоединенныеФайлы.
//      ОбработчикПослеОтправкиПЭД - ОписаниеОповещения.
//
Процедура ПодготовитьИОтправитьПЭДПродолжить(Результат, ДопПараметры) Экспорт
	
	СоответствиеПрофилейИПараметровСертификатов = Неопределено;
	Если НЕ (ТипЗнч(Результат) = Тип("Структура")
		И Результат.Свойство("СоответствиеПрофилейИПараметровСертификатов", СоответствиеПрофилейИПараметровСертификатов)
		И ТипЗнч(СоответствиеПрофилейИПараметровСертификатов) = Тип("Соответствие")) Тогда
		
		СоответствиеПрофилейИПараметровСертификатов = Новый Соответствие;
	КонецЕсли;
	
	Параметры = Неопределено;
	ПризнакПодписи = Неопределено;
	ДобавленныеФайлы = Неопределено;
	ОбработчикПослеОтправкиПЭД = Неопределено;
	ДопПараметры.Свойство("Параметры", Параметры);
	ДопПараметры.Свойство("ПризнакПодписи", ПризнакПодписи);
	ДопПараметры.Свойство("ДобавленныеФайлы", ДобавленныеФайлы);
	ДопПараметры.Свойство("ОбработчикПослеОтправкиПЭД", ОбработчикПослеОтправкиПЭД);
	
	РезультатОтправкиПЭД = ЭлектронныеДокументыСлужебныйВызовСервера.СоздатьИОтправитьДокументыПЭД(ДобавленныеФайлы,
																								ПризнакПодписи,
																								СоответствиеПрофилейИПараметровСертификатов);
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Параметры", Параметры);
	ДопПараметры.Вставить("РезультатОтправкиПЭД", РезультатОтправкиПЭД);
	ДопПараметры.Вставить("ОбработчикПослеОтправкиПЭД", ОбработчикПослеОтправкиПЭД);
	ДопПараметры.Вставить("СоответствиеПрофилейИПараметровСертификатов", СоответствиеПрофилейИПараметровСертификатов);
	
	ВыполнитьДействияПослеОтправкиПЭД(Неопределено, ДопПараметры);
	
КонецПроцедуры

// Готовит к отправке ЭД и ОТПРАВЛЯЕТ (подготовленные электронные документы).
//
// Параметры:
//  ДобавленныеФайлы - Массив ссылок на электронные документы, которые необходимо поместить в пакеты ЭД,
//  ПризнакПодписи - булево, признак того, что электронные документы подписаны ЭП
//  СтруктураПаролейИМаркеров - содержит данные о паролях сертификатов и маркеров
//  Параметры - дополнительные параметры обработки
//
Процедура ПодготовитьИОтправитьПЭД(
	ДобавленныеФайлы,
	ПризнакПодписи,
	СоответствиеПрофилейИПараметровСертификатов = Неопределено,
	Параметры = Неопределено,
	ОбработчикПослеОтправкиПЭД = Неопределено) Экспорт
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ДобавленныеФайлы", ДобавленныеФайлы);
	ДопПараметры.Вставить("ПризнакПодписи", ПризнакПодписи);
	ДопПараметры.Вставить("Параметры", Параметры);
	ДопПараметры.Вставить("ОбработчикПослеОтправкиПЭД", ОбработчикПослеОтправкиПЭД);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодготовитьИОтправитьПЭДПродолжить", ЭтотОбъект, ДопПараметры);
	Если СоответствиеПрофилейИПараметровСертификатов = Неопределено
		ИЛИ НЕ ЗначениеЗаполнено(СоответствиеПрофилейИПараметровСертификатов) Тогда
		
		ПолучитьCоответствиеСоглашенийИПараметровСертификатов(ОписаниеОповещения, , ДобавленныеФайлы);
	Иначе
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("СоответствиеПрофилейИПараметровСертификатов", СоответствиеПрофилейИПараметровСертификатов);
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, ПараметрыОповещения);
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования
Процедура ОтправитьМассивПакетовЭД(Знач МассивПЭД, ОбработкаОповещения = Неопределено) Экспорт
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ОбработкаОповещения", ОбработкаОповещения);
	ДопПараметры.Вставить("МассивПЭД", МассивПЭД);
	
	Оповещение = Новый ОписаниеОповещения("ОтправитьМассивПакетовОповещение", ЭтотОбъект, ДопПараметры);
	
	ПолучитьCоответствиеСоглашенийИПараметровСертификатов(Оповещение, , МассивПЭД);
	
КонецПроцедуры

// Проверяет валидность подписей электронного документа
// и заполняет реквизиты Статус и ДатаПроверкиПодписи в табличной части ЭлектронныеПодписи.
//
// Параметры:
//  ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы
//
Процедура ОпределитьСтатусыПодписей(ЭД) Экспорт

	РезультатПроверки = Новый Массив;
	
	СтруктураСодержимогоЭД = ЭлектронныеДокументыСлужебныйВызовСервера.СтруктураСодержимогоЭД(ЭД);
	СтруктураСодержимогоЭД.Вставить("ИндексПроверки", -1);
	СтруктураСодержимогоЭД.Вставить("ПроверяемыйЭД", ЭД);
	ОпределитьСтатусОчереднойПодписи(Неопределено, СтруктураСодержимогоЭД);
	
КонецПроцедуры

// Выводит пользователю информацию об обработанных электронных документах.
//
// Параметры:
//  КолСформированных - число, количество сформированных электронных документов,
//  КолПодписанных - число, количество подписанных электронных документов,
//  КолОтправленных - число, количество отправленных электронных документов.
//
Процедура ВывестиИнформациюОбОбработанныхЭД(КолСформированных, КолУтвержденных, КолПодписанных, КолПодготовленных, КолОтправленных = 0) Экспорт
	
	Если КолПодготовленных + КолОтправленных > 0 Тогда
		ДопТекст = ?(КолОтправленных > 0, "отправлено", "подготовлено к отправке");
		Количество = ?(КолОтправленных > 0, КолОтправленных, КолПодготовленных);
		Если КолПодписанных > 0 Тогда
			Если КолУтвержденных > 0 Тогда
				Если КолСформированных > 0 Тогда
					Текст = НСтр("ru = 'Сформировано: (%1), утверждено: (%2), подписано: (%3), %4 пакетов: (%5)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолСформированных, КолУтвержденных,
						КолПодписанных, ДопТекст, Количество);
				Иначе
					Текст = НСтр("ru = 'Утверждено: (%1), подписано: (%2), %3 пакетов: (%4)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолУтвержденных, КолПодписанных, ДопТекст,
						КолПодготовленных);
				КонецЕсли;
			Иначе
				Текст = НСтр("ru = 'Подписано: (%1), %2 пакетов: (%3)'");
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолПодписанных, ДопТекст, КолПодготовленных);
			КонецЕсли;
		Иначе
			Если КолУтвержденных > 0 Тогда
				Если КолСформированных > 0 Тогда
					Текст = НСтр("ru = 'Сформировано: (%1), утверждено: (%2), %3 пакетов: (%4)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолСформированных,
						КолУтвержденных, ДопТекст, КолПодготовленных);
				Иначе
					Текст = НСтр("ru = 'Утверждено: (%1), %2 пакетов: (%3)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолУтвержденных, ДопТекст, КолПодготовленных);
				КонецЕсли;
			Иначе
				Текст = НСтр("ru = '%1 пакетов: (%2)'");
				Количество = Макс(КолПодготовленных, КолОтправленных);
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ДопТекст, Количество);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если КолПодписанных > 0 Тогда
			Если КолУтвержденных > 0 Тогда
				Если КолСформированных > 0 Тогда
					Текст = НСтр("ru = 'Сформировано: (%1), утверждено: (%2), подписано: (%3)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолСформированных, КолУтвержденных,
						КолПодписанных);
				Иначе
					Текст = НСтр("ru = 'Утверждено: (%1), подписано: (%2)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолУтвержденных, КолПодписанных);
				КонецЕсли;
			Иначе
				Текст = НСтр("ru = 'Подписано: (%1)'");
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолПодписанных);
			КонецЕсли;
		Иначе
			Если КолУтвержденных > 0 Тогда
				Если КолСформированных > 0 Тогда
					Текст = НСтр("ru = 'Сформировано: (%1), утверждено: (%2)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолСформированных, КолУтвержденных);
				Иначе
					Текст = НСтр("ru = 'Утверждено: (%1)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолУтвержденных);
				КонецЕсли;
			Иначе
				Если КолСформированных > 0 Тогда
					Текст = НСтр("ru = 'Сформировано: (%1)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолСформированных);
				Иначе
					Текст = НСтр("ru = 'Обработанных документов нет...'");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ТекстЗаголовка = НСтр("ru = 'Обмен электронными документами'");
	ПоказатьОповещениеПользователя(ТекстЗаголовка, ,Текст);
		
КонецПроцедуры

// Обрабатывает переданные документы ИБ в системе обмена электронными документами в соответствие с параметрами.
//
// Параметры:
//  МассивСсылокНаОбъект - массив ссылок на объекты ИБ или на ЭД, которые необходимо обработать,
//  Действие - строка, представление действия, которое необходимо произвести с электронными документами,
//  ДопПараметры - структура, дополнительные параметры обработки электронных документов.
//  ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы, ссылка на элемент справочника ЭДПрисоединенныеФайлы,
//       если нужно обработать только один ЭД
//
Процедура ОбработатьЭД(Знач МассивСсылокНаОбъект,
	Действие, ДопПараметры = "", Знач ЭД = Неопределено, ОписаниеОповещения = Неопределено) Экспорт
			
	Если ТипЗнч(ДопПараметры) <> Тип("Структура") Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("МассивСсылокНаОбъект", МассивСсылокНаОбъект);
	Параметры.Вставить("Действие", Действие);
	Параметры.Вставить("ДопПараметры", ДопПараметры);
	Параметры.Вставить("ЭД", ЭД);
	Параметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	
	Если (ЭлектронныеДокументыКлиентСервер.ЕстьДействие(Действие, "Подписать")
			ИЛИ ЭлектронныеДокументыКлиентСервер.ЕстьДействие(Действие, "Отправить"))
		И ЭлектроннаяПодписьКлиент.ИспользоватьЭлектронныеПодписи() Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеПолученияОтпечатковОбработатьЭД", ЭтотОбъект, Параметры);
		ЭлектроннаяПодписьКлиент.ПолучитьОтпечаткиСертификатов(Оповещение, Истина, Ложь);
		Возврат;
	КонецЕсли;
		
	ПослеПолученияОтпечатковОбработатьЭД(Неопределено, Параметры)
	
КонецПроцедуры

Функция ПараметрыСертификатов(СоотвествиеПрофилей)
	
	Результат = Новый Соответствие;
	Для Каждого КлючЗначение Из СоотвествиеПрофилей Цикл
		Результат.Вставить(КлючЗначение.Значение.СертификатПодписи, КлючЗначение.Значение);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ОбработатьРезультатПодписания(РезультатВыполнения, Параметры) Экспорт
	
	ОписаниеДанных = Неопределено;
	Если ТипЗнч(РезультатВыполнения) = Тип("Структура")
		И РезультатВыполнения.Свойство("ОписаниеДанных", ОписаниеДанных)
		И ТипЗнч(ОписаниеДанных) = Тип("Структура") Тогда
		
		СвойстваПодписи = Неопределено;
		Если ОписаниеДанных.Свойство("СвойстваПодписи", СвойстваПодписи) Тогда
			ЭД = Неопределено;
			Если ОписаниеДанных.Свойство("ТекущийЭлементНабораДанных", ЭД)
				ИЛИ ОписаниеДанных.Свойство("Объект", ЭД) Тогда
				
				СоответствиеЭДИПодписей = Неопределено;
				Если ТипЗнч(Параметры) = Тип("Структура")
					И Параметры.Свойство("СоответствиеЭДИПодписей", СоответствиеЭДИПодписей)
					И ТипЗнч(СоответствиеЭДИПодписей) = Тип("Соответствие") Тогда
					СоответствиеЭДИПодписей.Вставить(ЭД, СвойстваПодписи);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьДвоичныеДанныеДляЭД(Результат, ДополнительныеПараметры) Экспорт
	
	ЭД = Неопределено;
	ОписаниеДанных = Неопределено;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ЭД", ЭД)
		И ТипЗнч(ЭД) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда
		
		ВыбранныйСертификат = Неопределено;
		Если НЕ (ДополнительныеПараметры.Свойство("ОписаниеДанных", ОписаниеДанных)
			И ТипЗнч(ОписаниеДанных) = Тип("Структура")
			И ОписаниеДанных.Свойство("ВыбранныйСертификат", ВыбранныйСертификат)
			И ТипЗнч(ВыбранныйСертификат) = Тип("Структура")
			И ВыбранныйСертификат.Свойство("Ссылка", ВыбранныйСертификат)
			И ТипЗнч(ВыбранныйСертификат) = Тип("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования")) Тогда
			
			ВыбранныйСертификат = Неопределено;
		КонецЕсли;
		ДвоичныеДанныеЭД = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьДвоичныеДанныеФайла(ЭД, ВыбранныйСертификат);
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("Данные", ДвоичныеДанныеЭД);
	
	ВыполнитьОбработкуОповещения(Результат.Оповещение, Параметры);
	
КонецПроцедуры

// Подписывает ЭД и переходит в процедуру ДействияПослеПодписанияЭД(Параметры).
//
// Параметры:
//   РезультатВыполнения - Неопределено - в логике работы процедуры не участвует.
//   Параметры - Структура:
//      Результат                    - Структура:
//         СтруктСтруктурМассивовЭДиСертификатов - Структура:
//            МассивСертификатов - Массив - один или несколько сертификатов, которыми могут быть подписаны
//               ЭД, находящиеся в следующем параметре структуры.
//            СоответствиеЭДиДД  - Соответствие:
//               Ключ     - СправочникСсылка.ЭДПрисоединенныеФайлы - ссылка на подписываемый ЭД.
//               Значение - Неопределено, Строка - Адрес временного хранилища, ссылающийся на двоичные
//                  данные ЭД. Если значение не заполнено, то двоичные данные ЭД будут определяться
//                  непосредственно перед подписанием ЭД в процедуре указанной в обработчике оповещения,
//                  например: ПолучитьДвоичныеДанныеДляЭД.
//            ДанныеДляСпецОбработки - Соответствие - данные для подписания банковских ЭД.
//         МассивЭДкОбновлениюСтатуса            - Массив - массив ЭД, для которых после подписания всех документов
//            надо будет обновить статусы.
//      СоответствиеЭДИПодписей      - Соответствие.
//      СоотвСертификатовИИхСтруктур - Соответствие:
//         Ключ     - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования.
//         Значение - Структура - параметры сертификата.
//
Процедура ПодписатьЭД(РезультатВыполнения = Неопределено, Параметры) Экспорт
	
	СтруктСтруктурМассивовЭДиСертификатов = Неопределено;
	ВходящаяСтруктура = Параметры.Результат;
	
	Если ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		ИтогКолПодписанных = 0;
		Если РезультатВыполнения.Свойство("ИтогКолПодписанных", ИтогКолПодписанных)
			И ТипЗнч(ИтогКолПодписанных) = Тип("Число") Тогда
			
			Параметры.ИтогКолПодписанных = Параметры.ИтогКолПодписанных + ИтогКолПодписанных;
		КонецЕсли;
		
		// Оповещение произошло из процедуры БСП
		Если РезультатВыполнения.Свойство("НаборДанных") Тогда
			// Если Успех, необходимо перебрать элементы массива Набор данных
			// в подписанных эд в элементе массива являющимся структурой будет свойство "Свойства подписи"
			// такие ЭД надо добавить в массив "МассивЭД" для обновления их статусов.
			МассивЭД = Неопределено;
			Если НЕ (Параметры.Свойство("МассивЭДкОбновлениюСтатуса", МассивЭД)
						ИЛИ ТипЗнч(МассивЭД) = Тип("Массив")) Тогда
						
				Параметры.Вставить("МассивЭДкОбновлениюСтатуса", Новый Массив);
				МассивЭД = Параметры.МассивЭДкОбновлениюСтатуса;
				
			КонецЕсли;

			Для Каждого ПодписываемыеДанные Из РезультатВыполнения.НаборДанных Цикл
				Если Не ПодписываемыеДанные.Свойство("СвойстваПодписи") Тогда
					Параметры.МассивЭДКУдалениюИзОтправки.Добавить(ПодписываемыеДанные.Объект);
					Продолжить;
				КонецЕсли;
				МассивЭД.Добавить(ПодписываемыеДанные.Объект);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВходящаяСтруктура.Свойство("СтруктСтруктурМассивовЭДиСертификатов", СтруктСтруктурМассивовЭДиСертификатов)
		И СтруктСтруктурМассивовЭДиСертификатов.Количество() > 0 Тогда
		
		СоответствиеЭДИПодписей = Неопределено;
		Если НЕ (Параметры.Свойство("СоответствиеЭДИПодписей", СоответствиеЭДИПодписей)
			ИЛИ ТипЗнч(СоответствиеЭДИПодписей) = Тип("Соответствие")) Тогда
			
			Параметры.Вставить("СоответствиеЭДИПодписей", Новый Соответствие);
		КонецЕсли;
		
		Для Каждого Элемент Из СтруктСтруктурМассивовЭДиСертификатов Цикл
			
			Структура = Элемент.Значение;
			СтруктСтруктурМассивовЭДиСертификатов.Удалить(Элемент.Ключ);
			
			МассивСертификатов = Структура.МассивСертификатов;
			ОписаниеПодписатьЭД = Новый ОписаниеОповещения("ПодписатьЭД", ЭтотОбъект, Параметры);
			ДанныеДляСпецОбработки = Неопределено;
			СоответствиеЭДиДД = Неопределено;
			Если Структура.Свойство("СоответствиеЭДиДД", СоответствиеЭДиДД)
				И ТипЗнч(СоответствиеЭДиДД) = Тип("Соответствие") Тогда
				
				Если СоответствиеЭДиДД.Количество() = 1 Тогда
					Операция = НСтр("ru = 'Подписание электронного документа'");
				Иначе
					Операция = НСтр("ru = 'Подписание электронных документов'");
				КонецЕсли;
				
				ОписаниеДанных = Новый Структура;
				ОписаниеДанных.Вставить("Операция",            Операция);
				ОписаниеДанных.Вставить("ОтборСертификатов",   МассивСертификатов);
				ОписаниеДанных.Вставить("ПоказатьКомментарий", Ложь);
				ОписаниеДанных.Вставить("НаборДанных",         Новый Массив);
				ОписаниеДанных.Вставить("ЗаголовокДанных",     НСтр("ru = 'Документ'"));
				ОписаниеДанных.Вставить("БезПодтверждения",    Истина);
				
				НаборДанных = ОписаниеДанных.НаборДанных;
				МассивЭДДляПредставления = Новый Массив;
				Для Каждого ЭлементДанных Из СоответствиеЭДиДД Цикл
					ЭД = ЭлементДанных.Ключ;
					Данные = Новый Структура;
					Если ЭлементДанных.Значение = Неопределено ИЛИ НЕ ЭтоАдресВременногоХранилища(ЭлементДанных.Значение) Тогда
						ПараметрыДляПолученияДД = Новый Структура("ЭД, ОписаниеДанных", ЭД, ОписаниеДанных);
						СсылкаНаДД = Новый ОписаниеОповещения("ПолучитьДвоичныеДанныеДляЭД", ЭтотОбъект, ПараметрыДляПолученияДД);
					Иначе
						СсылкаНаДД = ЭлементДанных.Значение;
					КонецЕсли;
					Данные.Вставить("Данные", СсылкаНаДД);
					Данные.Вставить("Объект", ЭД);
					
					НаборДанных.Добавить(Данные);
					МассивЭДДляПредставления.Добавить(ЭД);
				КонецЦикла;
				
				Если МассивЭДДляПредставления.Количество() = 1 Тогда
					ПредставлениеЭД = ЭлектронныеДокументыСлужебныйВызовСервера.ПредставлениеЭД(МассивЭДДляПредставления[0]);
					НаборДанных[0].Вставить("Представление", ПредставлениеЭД);
				Иначе
					ПредставлениеЭД = НСтр("ru = 'Электронные документы (%1)'");
					ПредставлениеЭД = СтрЗаменить(ПредставлениеЭД, "%1", МассивЭДДляПредставления.Количество());
					ПредставлениеЭД = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ПредставлениеЭД);
					СписокПредставленийЭД = ЭлектронныеДокументыСлужебныйВызовСервера.СписокПредставленийЭД(МассивЭДДляПредставления);
					ОписаниеДанных.Вставить("СписокПредставлений", СписокПредставленийЭД);
					ОписаниеДанных.Вставить("ПредставлениеНабора", ПредставлениеЭД);
				КонецЕсли;
				
				ЭлектроннаяПодписьКлиент.Подписать(ОписаниеДанных, , ОписаниеПодписатьЭД);
			ИначеЕсли Структура.Свойство("ДанныеДляСпецОбработки", ДанныеДляСпецОбработки)
				И ТипЗнч(ДанныеДляСпецОбработки) = Тип("Соответствие") И ДанныеДляСпецОбработки.Количество() Тогда
				
				Параметры.Вставить("ДанныеДляСпецОбработки", ДанныеДляСпецОбработки);
				Параметры.Вставить("МассивСертификатов", МассивСертификатов);
				Параметры.Вставить("ОбработчикПродолжения", ОписаниеПодписатьЭД);
				НачатьПодписаниеБанковскихЭД(Параметры);
			Иначе
				ПодписатьЭД(, Параметры);
			КонецЕсли;
			Прервать;
		КонецЦикла;
	Иначе
		
		ДействияПослеПодписанияЭД(Параметры);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияПослеПодписанияЭД(Параметры)
	
	МассивЭДкОбновлениюСтатуса = Неопределено;
	Если ТипЗнч(Параметры) = Тип("Структура")
		И Параметры.Свойство("МассивЭДкОбновлениюСтатуса", МассивЭДкОбновлениюСтатуса)
		И ТипЗнч(МассивЭДкОбновлениюСтатуса) = Тип("Массив") Тогда
		
		ЭлектронныеДокументыСлужебныйВызовСервера.ДействияПослеПодписанияЭДНаСервере(МассивЭДкОбновлениюСтатуса);
		
		Для Каждого ЭД Из МассивЭДкОбновлениюСтатуса Цикл
			ОпределитьСтатусыПодписей(ЭД);
		КонецЦикла;
	КонецЕсли;
	
	ОтправкаЭД(Параметры);
	
КонецПроцедуры

Процедура НачатьПодписаниеБанковскихЭД(Структура)
	
	СоотвСертификатовИИхСтруктур = Неопределено;
	МассивСертификатов = Неопределено;
	ДанныеДляСпецОбработки = Неопределено;
	ОписаниеПодписатьЭД = Неопределено;
	Структура.Свойство("ОбработчикПродолжения", ОписаниеПодписатьЭД);
	Если Структура.Свойство("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур)
		И ТипЗнч(СоотвСертификатовИИхСтруктур) = Тип("Соответствие")
		И Структура.Свойство("МассивСертификатов", МассивСертификатов)
		И ТипЗнч(МассивСертификатов) = Тип("Массив")
		И Структура.Свойство("ДанныеДляСпецОбработки", ДанныеДляСпецОбработки)
		И ТипЗнч(ДанныеДляСпецОбработки) = Тип("Соответствие") Тогда
		
		Соответствие = Новый Соответствие;
		Для Каждого Сертификат Из МассивСертификатов Цикл
			ПараметрыСертификата = СоотвСертификатовИИхСтруктур.Получить(Сертификат);
			Если ТипЗнч(ПараметрыСертификата) = Тип("Структура") Тогда
				Соответствие.Вставить(Сертификат, ПараметрыСертификата);
			КонецЕсли;
		КонецЦикла;
		
		МассивЭДКПодписи = Новый Массив;
		ВидОперации = НСтр("ru = 'Подписание электронных документов'");
		// ДанныеДляСпецОбработки - Соответствие:
		//   Ключ     - ПрограммаБанка.
		//   Значение - Соответствие:
		//     Ключ     - СоглашениеЭД.
		//     Значение - МассивЭД.
		// Т.к. это соответствие формируется в разрезе сертификата подписи, то оно однозначно:
		// массив сертификатов подписи по 1 программе банка и 1 соглашению ЭД (в каждом
		// рассматриваемом соответствии не больше одного элемента):
		Для Каждого КлючИЗначение Из ДанныеДляСпецОбработки Цикл
			Структура.Вставить("ПрограммаБанка", КлючИЗначение.Ключ);
			Для Каждого СоглашениеИЭД Из КлючИЗначение.Значение Цикл
				Структура.Вставить("СоглашениеЭД", СоглашениеИЭД.Ключ);
				Для Каждого ЭД Из СоглашениеИЭД.Значение Цикл
					МассивЭДКПодписи.Добавить(ЭД);
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		ВызватьОповещение = Новый ОписаниеОповещения("ПродолжитьПодписаниеБанковскихЭД", ЭтотОбъект, Структура);
		Структура.Вставить("ВызватьОповещение", ВызватьОповещение);
		Структура.Вставить("МассивЭДКПодписи", МассивЭДКПодписи);
		ПолучитьПарольКСертификату(Соответствие, ВидОперации, МассивЭДКПодписи, Ложь, Структура);
	ИначеЕсли ТипЗнч(ОписаниеПодписатьЭД) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(ОписаниеПодписатьЭД);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из ПолучитьПарольКСертификату по выполнению описания оповещения.
//
// Параметры:
//    Результат - Структура - результат выбора сертификата подписи и ввода пароля к нему:
//       ВыбранныйСертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования.
//       ПарольПользователя  - Строка - пароль к сертификату.
//    Параметры - Структура:
//       СоотвСертификатовИИхСтруктур - Соответствие.
//       ПрограммаБанка               - ПеречислениеСсылка.ПрограммыБанка.
//       ОбработчикПродолжения        - ОписаниеОповещения - описание, которое надо
//                                    выполнить после завершения обработки текущих ЭД.
//
Процедура ПродолжитьПодписаниеБанковскихЭД(Результат, Параметры) Экспорт
	
	ВыбранныйСертификат = Неопределено;
	ОписаниеПодписатьЭД = Неопределено;
	ПрерватьОбработку = Истина;
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("ВыбранныйСертификат", ВыбранныйСертификат)
		И ТипЗнч(ВыбранныйСертификат) = Тип("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования") Тогда
		
		ПараметрыСертификата = Параметры.СоотвСертификатовИИхСтруктур[ВыбранныйСертификат];
		ПараметрыСертификата.Вставить("ПарольПолучен", Истина);
		ПараметрыСертификата.Вставить("ПарольПользователя", Результат.ПарольПользователя);
		ПараметрыСертификата.Вставить("ВыбранныйСертификат", ВыбранныйСертификат);
		Параметры.Вставить("СтруктураСертификата", ПараметрыСертификата);
		
		Если Параметры.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн") Тогда
			Параметры.Вставить("МассивОбработанныхСоглашенийЭД", Новый Массив);
			Параметры.Вставить("ОтправитьНаПодписьПослеОбработки");
			Параметры.Вставить("РезультатВыбораСертификатаБанка", Результат);
			ДанныеСпецОбработки = Параметры.ДанныеДляСпецОбработки;
			Для Каждого ЭлементСоответствия Из ДанныеСпецОбработки Цикл
				ТекущиеДанные = ЭлементСоответствия.Значение;
				Параметры.ДанныеДляСпецОбработки.Удалить(ЭлементСоответствия.Ключ);
				НачатьПодписаниеЭДСбербанка(ТекущиеДанные, Параметры);
				ПрерватьОбработку = Ложь;
				Возврат;
			КонецЦикла;
		ИначеЕсли Параметры.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку") Тогда
			ОбработчикПослеПодключения = Новый ОписаниеОповещения("ПроверитьНеобходимостьУстановкиПинКода",
				ЭтотОбъект, Параметры);
			Структура = Новый Структура;
			Структура.Вставить("ВыполняласьПопыткаПолученияМодуля", Ложь);
			Структура.Вставить("ОбработкаПослеПолученияМодуля", ОбработчикПослеПодключения);
			Структура.Вставить("СоглашениеЭД", Параметры.СоглашениеЭД);
			// Если получится получить внешний модуль, то будет выполнен обработчик ОбработкаВСлучаеУспеха.
			// В противном случае произойдет возврат к подписанию других ЭД (ОбработкаВСлучаеНеудачи).
			ПолучитьВнешнийМодульЧерезДополнительнуюОбработку(Структура);
			ПрерватьОбработку = Ложь;
		ИначеЕсли Параметры.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.iBank2") Тогда
			ОбработчикПослеПодключения = Новый ОписаниеОповещения("НачатьПодписаниеiBank2", ЭтотОбъект, Параметры);
			Параметры.Вставить("ОбработчикПослеПодключенияКомпоненты", ОбработчикПослеПодключения);
			ПодключитьВнешнююКомпонентуiBank2(Параметры);
			ПрерватьОбработку = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ПрерватьОбработку И Параметры.Свойство("ОбработчикПродолжения", ОписаниеПодписатьЭД)
		И ТипЗнч(ОписаниеПодписатьЭД) = Тип("ОписаниеОповещения") Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеПодписатьЭД);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправкаЭД(Параметры) Экспорт
	
	Результат = Параметры.Результат;
	МассивЭДКУдалениюИзОтправки = Параметры.МассивЭДКУдалениюИзОтправки;
	НемедленнаяОтправкаЭД = Параметры.НемедленнаяОтправкаЭД;
	СоотвСертификатовИИхСтруктур = Параметры.СоотвСертификатовИИхСтруктур;
	СоотвСоглашенийИСертификатовАвторизации = Неопределено;
	СоотвСоглашенийИМассивовЭДКОтправке = Неопределено;
	НастройкиЭДОСЭДКОтправке = Неопределено;
	СтруктураКОтправке = Неопределено;
	Если Результат.Свойство("СтруктураКОтправке", СтруктураКОтправке) Тогда
		Параметры.Вставить("СоотвСоглашенийИСтруктурСертификатов", Новый Соответствие);
		СоотвСоглашенийИСтруктурСертификатов = Параметры.СоотвСоглашенийИСтруктурСертификатов;
		Если СтруктураКОтправке.Свойство("САвторизациейЛогинПароль", СоотвСоглашенийИМассивовЭДКОтправке)
			И ТипЗнч(СоотвСоглашенийИМассивовЭДКОтправке) = Тип("Соответствие")
			И СоотвСоглашенийИМассивовЭДКОтправке.Количество() > 0 Тогда
			
			Параметры.Вставить("ТекущийИндексОтправкиЭДВБанкСАвторизациейЛогинПароль", 0);
			НачатьОтправкуЭДВБанкСАвторизациейЛогинПароль(Неопределено, Параметры);
		Иначе
			МассивЭД = Неопределено;
			Если СтруктураКОтправке.Свойство("БезПодписи", МассивЭД) И ТипЗнч(МассивЭД) = Тип("Массив")
				И МассивЭД.Количество() > 0 Тогда
				
				Параметры.Вставить("МассивКОтправкеБезПодписи", МассивЭД);
			КонецЕсли;
			
			Если СтруктураКОтправке.Свойство("СПодписью", МассивЭД) И ТипЗнч(МассивЭД) = Тип("Массив") Тогда
				Если МассивЭДКУдалениюИзОтправки.Количество() > 0 И МассивЭД.Количество() > 0 Тогда
					Для Каждого УдаляемыйЭД Из МассивЭДКУдалениюИзОтправки Цикл
						ТекИндекс = МассивЭД.Найти(УдаляемыйЭД);
						Если ТекИндекс <> Неопределено Тогда
							МассивЭД.Удалить(ТекИндекс);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			Иначе
				МассивЭД = Новый Массив;
			КонецЕсли;
			
			Параметры.Вставить("МассивКОтправке", МассивЭД);
			МассивКОтправке = Параметры.МассивКОтправке;
			
			Если НЕ (Результат.Свойство("СоотвСоглашенийИСертификатовАвторизации", СоотвСоглашенийИСертификатовАвторизации)
				И ТипЗнч(СоотвСоглашенийИСертификатовАвторизации) = Тип("Соответствие")) Тогда
				СоотвСоглашенийИСертификатовАвторизации = Новый Соответствие;
			КонецЕсли;
			
			ЭтоОтправкаЧерезОператора = Ложь;
			РасшифроватьМаркер = Ложь;
			Если СтруктураКОтправке.Свойство("САвторизацией", СоотвСоглашенийИМассивовЭДКОтправке)
				И ТипЗнч(СоотвСоглашенийИМассивовЭДКОтправке) = Тип("Соответствие")
				И СоотвСоглашенийИМассивовЭДКОтправке.Количество() Тогда
				Для Каждого ТекЭл Из СоотвСоглашенийИМассивовЭДКОтправке Цикл
					ЭтоОтправкаЧерезОператора = Истина;
					ПрофильНастроекЭДО = ТекЭл.Ключ;
					РеквизитыПрофиляНастроекЭДО = ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыПрофиляНастроекЭДО(
						ПрофильНастроекЭДО);
					ЕстьЭДкОтправке = Ложь;
					Для Каждого ОтправляемыйЭД Из ТекЭл.Значение Цикл
						Если МассивЭДКУдалениюИзОтправки.Найти(ОтправляемыйЭД) = Неопределено Тогда
							МассивКОтправке.Добавить(ОтправляемыйЭД);
							ЕстьЭДкОтправке = Истина;
						КонецЕсли;
					КонецЦикла;
					Если ЕстьЭДкОтправке Тогда
						МассивСертификатов = СоотвСоглашенийИСертификатовАвторизации.Получить(ПрофильНастроекЭДО);
						Если НемедленнаяОтправкаЭД И ЗначениеЗаполнено(МассивСертификатов) Тогда
							// На клиента массив ЭД к отправке через ОЭДО, может прийти только в том случае,
							// если не было возможности отправить эти ЭД с сервера (нет пароля к сертификату)
							ЕстьМаркер = Ложь;
							Для Каждого Сертификат Из МассивСертификатов Цикл
								
								КлючПоискаСертификата = Строка(Сертификат.УникальныйИдентификатор()) + "_" + РеквизитыПрофиляНастроекЭДО.ИдентификаторОрганизации;
								СтруктураСертификата = СоотвСертификатовИИхСтруктур.Получить(КлючПоискаСертификата);
								
								МаркерРасшифрованный = Неопределено;
								Если СтруктураСертификата.Свойство("МаркерРасшифрованный", МаркерРасшифрованный)
									И ЗначениеЗаполнено(МаркерРасшифрованный) Тогда
									
									СоотвСоглашенийИСтруктурСертификатов.Вставить(ПрофильНастроекЭДО, СтруктураСертификата);
									ЕстьМаркер = Истина;
									Прервать;
								КонецЕсли;
							КонецЦикла;
							Если НЕ ЕстьМаркер Тогда
								// Отправка будет продолжена после расшифровки маркеров.
								РасшифроватьМаркер = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если СтруктураКОтправке.Свойство("ЧерезТокенСбербанка") И СтруктураКОтправке.ЧерезТокенСбербанка.Количество() Тогда
				ДанныеДляОтправкиВСбербанк = ЭлектронныеДокументыСлужебныйВызовСервера.ДанныеДляОтправкиВСбербанк(
					СтруктураКОтправке.ЧерезТокенСбербанка);
				Параметры.Вставить("ДанныеДляОтправкиВСбербанк", ДанныеДляОтправкиВСбербанк);
				ОтправитьДокументыВСбербанк(Параметры);
				Возврат;
			КонецЕсли;
			
			ЭтоОтправкаВБанк = Ложь;
			РасшифроватьМаркерБанка = Ложь;
			Если СтруктураКОтправке.Свойство("САутентификациейПоСертификату", НастройкиЭДОСЭДКОтправке)
				И ТипЗнч(НастройкиЭДОСЭДКОтправке) = Тип("Соответствие") Тогда
				Для Каждого ТекЭл Из НастройкиЭДОСЭДКОтправке Цикл
					ЭтоОтправкаВБанк = Истина;
					НастройкаЭДО = ТекЭл.Ключ;
					ЕстьЭДкОтправке = Ложь;
					Для Каждого ОтправляемыйЭД Из ТекЭл.Значение Цикл
						Если МассивЭДКУдалениюИзОтправки.Найти(ОтправляемыйЭД) = Неопределено Тогда
							МассивКОтправке.Добавить(ОтправляемыйЭД);
							ЕстьЭДкОтправке = Истина;
						КонецЕсли;
					КонецЦикла;
					Если ЕстьЭДкОтправке Тогда
						МассивСертификатов = СоотвСоглашенийИСертификатовАвторизации.Получить(НастройкаЭДО);
						Если НемедленнаяОтправкаЭД И ЗначениеЗаполнено(МассивСертификатов) Тогда
							// На клиента массив ЭД к отправке в банк, может прийти только в том случае,
							// если не было возможности отправить эти ЭД с сервера (нет пароля к сертификату)
							ЕстьМаркер = Ложь;
							Для Каждого Сертификат Из МассивСертификатов Цикл
								СтруктураСертификата = СоотвСертификатовИИхСтруктур.Получить(Сертификат);
								МаркерРасшифрованный = Неопределено;
								Если СтруктураСертификата.Свойство("МаркерРасшифрованный", МаркерРасшифрованный)
									И ЗначениеЗаполнено(МаркерРасшифрованный) Тогда
									
									СоотвСоглашенийИСтруктурСертификатов.Вставить(НастройкаЭДО, СтруктураСертификата);
									ЕстьМаркер = Истина;
									Прервать;
								КонецЕсли;
							КонецЦикла;
							Если НЕ ЕстьМаркер Тогда
								// Отправка будет продолжена после расшифровки маркеров.
								РасшифроватьМаркерБанка = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;

			Если ЭтоОтправкаЧерезОператора Тогда
				Если РасшифроватьМаркер Тогда
					ОбработчикОповещения = Новый ОписаниеОповещения("ПродолжитьОтправкуЭДПослеРасшифровкиМаркера", ЭтотОбъект, Параметры);
					ИД_Параметров = Строка(Новый УникальныйИдентификатор);
					ПараметрыПриложения.Вставить("ЭлектронноеВзаимодействие." + ИД_Параметров, Параметры);
					ДопПараметры = Новый Структура;
					ДопПараметры.Вставить("ИД_Параметров", ИД_Параметров);
					ДопПараметры.Вставить("ОбработчикОповещения", ОбработчикОповещения);
					ДопПараметры.Вставить("СоответствиеСоглашенийИСертификатов", СоотвСоглашенийИСертификатовАвторизации);
					
					РасшифроватьМаркер(, ДопПараметры);
				Иначе
					ЗавершитьОтправкуЭД(Неопределено, Параметры);
				КонецЕсли;
			ИначеЕсли ЭтоОтправкаВБанк Тогда
				Если РасшифроватьМаркерБанка Тогда
					ОбработчикОповещения = Новый ОписаниеОповещения("ПродолжитьОтправкуЭДПослеРасшифровкиМаркера", ЭтотОбъект, Параметры);
					ИД_Параметров = Строка(Новый УникальныйИдентификатор);
					ПараметрыПриложения.Вставить("ЭлектронноеВзаимодействие." + ИД_Параметров, Параметры);
					ДопПараметры = Новый Структура;
					ДопПараметры.Вставить("ИД_Параметров", ИД_Параметров);
					ДопПараметры.Вставить("ОбработчикОповещения", ОбработчикОповещения);
					ДопПараметры.Вставить("СоответствиеСоглашенийИСертификатов", СоотвСоглашенийИСертификатовАвторизации);
					
					РасшифроватьМаркерБанка(, ДопПараметры);
				Иначе
					ЗавершитьОтправкуЭД(Неопределено, Параметры);
				КонецЕсли;
			Иначе
				ЗавершитьОтправкуЭД(Неопределено, Параметры);
			КонецЕсли;
		КонецЕсли;
	Иначе
		ВыполнитьДействияПослеОтправки(Параметры);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из процедуры РасшифроватьМаркер(), по выполнению Описания Оповещения созданного
// в процедуре ОтправкаЭД(Параметры).
//
// Параметры:
//   Результат - Структура:
//               СоответствиеПрофилейИПараметровСертификатов - Соответствие:
//                                   Ключ     - СправочникСсылка.ПараметрыНастроекЭДО.
//                                   Значение - Структура:
//                                              МаркерРасшифрованный - ДвоичныеДанные - расшифрованного маркера.
//                                              прочие реквизиты сертификата (необязательно).
//
//   Параметры - Структура:
//               СоотвСоглашенийИСтруктурСертификатов - Соответствие
//                                                      Ключ     - СправочникСсылка.ПараметрыНастроекЭДО.
//                                                      Значение - Структура - Параметры сертификата.
//               МассивКОтправке - Массив - ЭД подготовленные к отправке.
//
Процедура ПродолжитьОтправкуЭДПослеРасшифровкиМаркера(Результат, Параметры) Экспорт
	
	СоотвСоглашенийИСтруктурСертификатов = Неопределено;
	Если НЕ (Параметры.Свойство("СоотвСоглашенийИСтруктурСертификатов", СоотвСоглашенийИСтруктурСертификатов)
			 И ТипЗнч(СоотвСоглашенийИСтруктурСертификатов) = Тип("Соответствие")) Тогда
		
		Параметры.Вставить("СоотвСоглашенийИСтруктурСертификатов", Новый Соответствие);
		СоотвСоглашенийИСтруктурСертификатов = Параметры.СоотвСоглашенийИСтруктурСертификатов;
	КонецЕсли;
	
	ВозврСоответствие = Неопределено;
	Если ТипЗнч(Результат) = Тип("Структура")
		И Результат.Свойство("СоответствиеПрофилейИПараметровСертификатов", ВозврСоответствие)
		И ТипЗнч(ВозврСоответствие) = Тип("Соответствие") Тогда
		
		Для Каждого КлючИЗначение Из ВозврСоответствие Цикл
			СоотвСоглашенийИСтруктурСертификатов.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ЗавершитьОтправкуЭД(Неопределено, Параметры);
	
КонецПроцедуры

// Обрабатывает результаты очередной итерации отправки ЭД, при необходимости (во входящих параметрах есть
// не отправленные ЭД) начинает следующую итерацию отправки ЭД.
//
// Параметры:
//    Результат - Структура, Неопределено - в структуре возвращается результат прошедшей итерации отправки ЭД:
//       КолПодготовленных - Число.
//       КолОтправленных   - Число.
//    Параметры - Структура:
//    МассивКОтправке           - Массив.
//    МассивКОтправкеБезПодписи - Массив.
//    Прочие параметры.
//
Процедура ЗавершитьОтправкуЭД(Результат, Параметры) Экспорт
	
	СоотвСоглашенийИСтруктурСертификатов = Параметры.СоотвСоглашенийИСтруктурСертификатов;
	ПродолжитьВыполнитьДействияПослеОтправки = Истина;
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		КолПодготовленных = 0;
		КолОтправленных = 0;
		Если НЕ(Результат.Свойство("КолПодготовленных", КолПодготовленных)
				И ТипЗнч(КолПодготовленных) = Тип("Число")) Тогда
			
			КолПодготовленных = 0;
		КонецЕсли;
		Если НЕ(Результат.Свойство("КолОтправленных", КолОтправленных)
				И ТипЗнч(КолОтправленных) = Тип("Число")) Тогда
			
			КолОтправленных = 0;
		КонецЕсли;
		Параметры.ИтогКолПодготовленных = Параметры.ИтогКолПодготовленных + КолПодготовленных;
		Параметры.ИтогКолОтправленных = Параметры.ИтогКолОтправленных + КолОтправленных;
	КонецЕсли;
	
	МассивЭД = Неопределено;
	МассивКОтправке = Неопределено;
	МассивКОтправкеБезПодписи = Неопределено;
	Если Параметры.Свойство("МассивКОтправке", МассивКОтправке)
		И ТипЗнч(МассивКОтправке) = Тип("Массив")
		И МассивКОтправке.Количество() > 0 Тогда
		
		МассивЭД = МассивКОтправке;
		Параметры.Удалить("МассивКОтправке");
		ПризнакПодписи = Истина;
	ИначеЕсли Параметры.Свойство("МассивКОтправкеБезПодписи", МассивКОтправкеБезПодписи)
		И ТипЗнч(МассивКОтправкеБезПодписи) = Тип("Массив")
		И МассивКОтправкеБезПодписи.Количество() > 0 Тогда
		
		МассивЭД = МассивКОтправкеБезПодписи;
		Параметры.Удалить("МассивКОтправкеБезПодписи");
		ПризнакПодписи = Ложь;
	КонецЕсли;
	
	Если МассивЭД <> Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьОтправкуЭД", ЭтотОбъект, Параметры);
		ПодготовитьИОтправитьПЭД(МассивЭД, ПризнакПодписи, СоотвСоглашенийИСтруктурСертификатов, Параметры, ОписаниеОповещения);
		ПродолжитьВыполнитьДействияПослеОтправки = Ложь;
	КонецЕсли;
	
	Если ПродолжитьВыполнитьДействияПослеОтправки Тогда
		ВыполнитьДействияПослеОтправки(Параметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьОтправкуЭДВБанкСАвторизациейЛогинПароль(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		// Вызов после выполнения метода ПодготовитьИОтправитьПЭД(...).
		КолПодготовленных = 0;
		КолОтправленных = 0;
		Если Результат.Свойство("КолПодготовленных", КолПодготовленных) И ТипЗнч(КолПодготовленных) = Тип("Число") Тогда
			//
			Параметры.ИтогКолПодготовленных = Параметры.ИтогКолПодготовленных + КолПодготовленных;
		КонецЕсли;
		Если Результат.Свойство("КолОтправленных", КолОтправленных) И ТипЗнч(КолОтправленных) = Тип("Число") Тогда
			//
			Параметры.ИтогКолОтправленных = Параметры.ИтогКолОтправленных + КолОтправленных;
		КонецЕсли;
	КонецЕсли;
	СтруктураКОтправке = Параметры.Результат.СтруктураКОтправке;
	СоотвСоглашенийИМассивовЭДКОтправке = СтруктураКОтправке.САвторизациейЛогинПароль;
	НемедленнаяОтправкаЭД = Параметры.НемедленнаяОтправкаЭД;
	СоотвСоглашенийИСтруктурСертификатов = Параметры.СоотвСоглашенийИСтруктурСертификатов;
	
	МассивКОтправкеБезПодписи = Новый Массив;
	ТекущийИндекс = 0;
	Для Каждого ТекЭл Из СоотвСоглашенийИМассивовЭДКОтправке Цикл
		ТекущийИндекс = ТекущийИндекс + 1;
		Если ТекущийИндекс <= Параметры.ТекущийИндексОтправкиЭДВБанкСАвторизациейЛогинПароль Тогда
			Продолжить;
		КонецЕсли;
		Параметры.ТекущийИндексОтправкиЭДВБанкСАвторизациейЛогинПароль = ТекущийИндекс;

		СоглашениеЭД = ТекЭл.Ключ;
		Если НемедленнаяОтправкаЭД Тогда
			Параметры.Вставить("СоглашениеЭД", СоглашениеЭД);
			Параметры.Вставить("МассивЭДКОтправкеВБанкСАвторизациейЛогинПароль", ТекЭл.Значение);
//			Параметры.Вставить("Результат", Результат);
			ПараметрыАвторизации = Неопределено;
			Если ПолученыДанныеАвторизации(ТекЭл.Ключ, ПараметрыАвторизации) Тогда
				ОтправитьЭДВБанкСАутентификациейЛогинПароль(ПараметрыАвторизации, Параметры);
			Иначе
				ОООЗ = Новый ОписаниеОповещения("ОтправитьЭДВБанкСАутентификациейЛогинПароль", ЭтотОбъект, Параметры);
				ПолучитьДанныеАутентификации(ТекЭл.Ключ, ОООЗ);
				Возврат;
			КонецЕсли;
		Иначе
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивКОтправкеБезПодписи, ТекЭл.Значение);
		КонецЕсли;
	КонецЦикла;
	Если МассивКОтправкеБезПодписи.Количество() > 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьОтправкуЭД", ЭтотОбъект, Параметры);
		ПодготовитьИОтправитьПЭД(МассивКОтправкеБезПодписи, Ложь, СоотвСоглашенийИСтруктурСертификатов,, ОписаниеОповещения);
	Иначе
		ЗавершитьОтправкуЭД(Неопределено, Параметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьДействияПослеОтправки(Параметры)
	
	Перем Действие, ИтогКолНовыхЭД, ИтогКолУтвержденныхЭД, ИтогКолПодписанных, ИтогКолПодготовленных, ИтогКолОтправленных;
	
	Если НЕ Параметры.Свойство("ИтогКолНовыхЭД", ИтогКолНовыхЭД) Тогда
		ИтогКолНовыхЭД = 0;
	КонецЕсли;
	Если НЕ Параметры.Свойство("ИтогКолУтвержденныхЭД", ИтогКолУтвержденныхЭД) Тогда
		ИтогКолУтвержденныхЭД = 0;
	КонецЕсли;
	Если НЕ Параметры.Свойство("ИтогКолПодписанных", ИтогКолПодписанных) Тогда
		ИтогКолПодписанных = 0;
	КонецЕсли;
	Если НЕ Параметры.Свойство("ИтогКолПодготовленных", ИтогКолПодготовленных) Тогда
		ИтогКолПодготовленных = 0;
	КонецЕсли;
	Если НЕ Параметры.Свойство("ИтогКолОтправленных", ИтогКолОтправленных) Тогда
		ИтогКолОтправленных = 0;
	КонецЕсли;

	Оповестить("ОбновитьСостояниеЭД");

	Если Параметры.Свойство("Действие")
		И ЭлектронныеДокументыКлиентСервер.ЕстьДействие(Параметры.Действие, "Показать") Тогда
		Результат = Параметры.Результат;
		МассивОбработки = "";
		Если Результат.Свойство("МассивНовыхЭД", МассивОбработки) И МассивОбработки <> Неопределено Тогда
			Для Каждого ТекЭл Из МассивОбработки Цикл
				ОткрытьЭДДляПросмотра(ТекЭл);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Параметры.Свойство("НеВыводитьИнформациюОбОбработанныхЭД") Тогда
		ВывестиИнформациюОбОбработанныхЭД(
			ИтогКолНовыхЭД, ИтогКолУтвержденныхЭД, ИтогКолПодписанных, ИтогКолПодготовленных, ИтогКолОтправленных);
	КонецЕсли;
	
	
	ВсегоОбработано = ИтогКолНовыхЭД + ИтогКолУтвержденныхЭД + ИтогКолПодписанных + ИтогКолПодготовленных
					+ ИтогКолОтправленных;
	
	Если Параметры.Свойство("ОповеститьОСозданииУведомления") И ВсегоОбработано > 0 Тогда
		Оповестить("СозданоУведомление", Параметры.ОповеститьОСозданииУведомления);
	КонецЕсли;
	
	ОписаниеОповещения = Неопределено;
	Если Параметры.Свойство("ОписаниеОповещения", ОписаниеОповещения)
		И ТипЗнч(ОписаниеОповещения) = Тип("ОписаниеОповещения") Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, (ВсегоОбработано > 0));
	КонецЕсли;
	
КонецПроцедуры

// Отправка и получение электронных документов одной командой.
Процедура ОтправитьПолучитьЭлектронныеДокументы(ТребуетсяПовторитьПолучение = Ложь) Экспорт
	
	ОчиститьСообщения();
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Если НЕ ЭлектронныеДокументыПереопределяемый.ЕстьПравоОбработкиЭД() Тогда
			СообщитьПользователюОНарушенииПравДоступа();
			Возврат;
		КонецЕсли;
		Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
			ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ТекстСообщенияОНеобходимостиНастройкиСистемы("РаботаСЭД");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
	#КонецЕсли
		
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТребуетсяПовторитьПолучение", ТребуетсяПовторитьПолучение);
	
	ОбработкаОповещения = Новый ОписаниеОповещения("ОтправитьПолучитьЭДВыполнить", ЭтотОбъект, ДопПараметры);
	
	ИспользоватьЭП = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции("ИспользоватьЭлектронныеПодписиЭД");
	
	Если ИспользоватьЭП Тогда
		ПолучитьCоответствиеСоглашенийИПараметровСертификатов(ОбработкаОповещения);
	Иначе
		Результат = Новый Структура;
		Результат.Вставить("СоответствиеПрофилейИПараметровСертификатов", Новый Соответствие);
		ОтправитьПолучитьЭДВыполнить(Результат, ДопПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьПолучитьЭДВыполнить(Результат, ДополнительныеПараметры) Экспорт
	
	СоотвСоглашенийИСтруктурСертификатов = Неопределено;
	Если ТипЗнч(Результат) <> Тип("Структура")
		ИЛИ Не Результат.Свойство("СоответствиеПрофилейИПараметровСертификатов", СоотвСоглашенийИСтруктурСертификатов) Тогда
		Возврат;
	КонецЕсли;
	
	// Блок обновления статусов настроек ЭДО и получения новых приглашений.
	ТекстСообщения = НСтр("ru = 'Выполняется получение информации о приглашениях. Подождите...'");
	Состояние(НСтр("ru = 'Получение.'"), , ТекстСообщения);
	ЭлектронныеДокументыСлужебныйВызовСервера.ОбновитьСтатусыПодключенияНастроекЭДО(СоотвСоглашенийИСтруктурСертификатов);
	
	// Блок отправки и получения ЭД.
	ТекстСообщения = НСтр("ru = 'Выполняется отправка и получение пакетов электронных документов. Подождите...'");
	Состояние(НСтр("ru = 'Отправка и получение.'"), , ТекстСообщения);
	
	// Получение и отправка документов.
	
	ТребуетсяПовторитьПолучение = ДополнительныеПараметры.ТребуетсяПовторитьПолучение;
	СтруктураВозврата = ЭлектронныеДокументыСлужебныйВызовСервера.ОтправитьИПолучитьДокументы(
		СоотвСоглашенийИСтруктурСертификатов,
		ТребуетсяПовторитьПолучение);

	НовыеДокументы = СтруктураВозврата.НовыеДокументы;
	СтруктураВозврата.Вставить("КоличествоНовыхЭД", НовыеДокументы.МассивВозврата.Количество());
	
	Если НовыеДокументы.ПараметрыРаспаковки.Количество() > 0 Тогда
		// Распаковываем принятые пакеты с электронными документами.
		ТекстСообщения = НСтр("ru = 'Выполняется распаковка пакетов электронных документов. Подождите...'");
		Состояние(НСтр("ru = 'Распаковка.'"), , ТекстСообщения);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьПолучитьЭДЗавершить", ЭтотОбъект, СтруктураВозврата);
		НовыеДокументы.Вставить("ОбработчикПродолжения", ОписаниеОповещения);
		НовыеДокументы.Вставить("ВсегоРаспаковано", 0);
		
		Оповещение = Новый ОписаниеОповещения("РаспаковатьМассивПакетовЭДПродолжить", ЭтотОбъект, НовыеДокументы);
		ЭлектроннаяПодписьКлиент.СоздатьМенеджерКриптографии(Оповещение, "ПолучениеСертификатов", Ложь);
	Иначе
		ОтправитьПолучитьЭДЗавершить(Результат, СтруктураВозврата);
	КонецЕсли;
	
	// Если использование маркера превысило 5 минут, его необходимо переполучить.
	Если ТребуетсяПовторитьПолучение Тогда
		ОтправитьПолучитьЭлектронныеДокументы(ТребуетсяПовторитьПолучение);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из ОтправитьПолучитьЭДВыполнить и, по описанию оповещения, из ОбработатьОчереднойПакетЭД.
// Выводит оповещение пользователю о результатах отправки, получения и распаковки ПЭД.
//
// Параметры:
//    Результат - Число, Неопределено - количество распакованных ПЭД.
//    Параметры - Структура - результаты отправки и получения ПЭД.
//
Процедура ОтправитьПолучитьЭДЗавершить(Результат, Параметры) Экспорт
	
	// Подготовим вывод сообщения для пользователя об отправке/получению пакетов ЭД.
	КолОтправленныхПакетов = Параметры.КолОтправленныхПакетов;
	КоличествоНовыхЭД = Параметры.КоличествоНовыхЭД;
	ШаблонОповещения = НСтр("ru = 'Отправлено пакетов: (%1), получено пакетов: (%2).'");
	ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОповещения,
		КолОтправленныхПакетов, КоличествоНовыхЭД);
	Если ТипЗнч(Результат) = Тип("Число") Тогда
		ТекстОповещения = ТекстОповещения + Символы.ПС + НСтр("ru = 'Распаковано пакетов: %1.'");
		ТекстОповещения = СтрЗаменить(ТекстОповещения, "%1", Результат);
	КонецЕсли;
	Оповестить("ОбновитьСостояниеЭД");
	
	ЗаголовокОповещения = НСтр("ru = 'Обмен электронными документами'");
	ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);
	
КонецПроцедуры

Процедура ОбработатьОчереднойПакетЭД(Результат, СтруктураПакетовЭД) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Число") Тогда
		СтруктураПакетовЭД.ВсегоРаспаковано = СтруктураПакетовЭД.ВсегоРаспаковано + Результат;
	КонецЕсли;
	Завершить = Истина;
	Если ТипЗнч(СтруктураПакетовЭД) = Тип("Структура") Тогда
		ПараметрыРаспаковки = Неопределено;
		Если СтруктураПакетовЭД.Свойство("ПараметрыРаспаковки", ПараметрыРаспаковки)
			И ТипЗнч(ПараметрыРаспаковки) = Тип("Массив") И ПараметрыРаспаковки.Количество() > 0 Тогда
			
			// Т.к. распаковка пакетов происходит ассинхронно, то из массива параметров распаковки берем по одному элементу,
			// распаковываем и удаляем его из массива, результат распаковки плюсуется в СтруктуруПараметровЭД:
			СтруктураРаспаковки = ПараметрыРаспаковки[0];
			ПараметрыРаспаковки.Удалить(0);
			СтруктураШифрования = Неопределено;
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьОчереднойПакетЭД", ЭтотОбъект, СтруктураПакетовЭД);
			
			Если СтруктураРаспаковки.Свойство("СпособОбменаЭД") Тогда
				ДанныеВозврата = Новый Структура("ДанныеЭП");
				Завершить = Ложь;
				РаспаковатьПакетЭДБанкаНаКлиенте(СтруктураРаспаковки.ПакетЭД, ДанныеВозврата, ОписаниеОповещения);
			Иначе
				ДанныеРаспаковки = Неопределено;
				Если НЕ СтруктураРаспаковки.Свойство("ДанныеРаспаковки", ДанныеРаспаковки)
					ИЛИ ТипЗнч(ДанныеРаспаковки) <> Тип("Структура") Тогда
					ДанныеРаспаковки = ЭлектронныеДокументыСлужебныйВызовСервера.ВернутьМассивДвоичныхДанныхПакета(
																						СтруктураРаспаковки.ПакетЭД);
				КонецЕсли;
				
				Если ТипЗнч(ДанныеРаспаковки) = Тип("Структура") Тогда
					
					ИмяСвойства = "ЭлектронноеВзаимодействие.ЕстьКриптосредствоНаКлиенте";
					ЕстьКриптосредствоНаКлиенте = ПараметрыПриложения.Получить(ИмяСвойства);
					Если ТипЗнч(ЕстьКриптосредствоНаКлиенте) <> Тип("Булево") Тогда
						ЕстьКриптосредствоНаКлиенте = Ложь;
					КонецЕсли;
					ДопПараметры = Новый Структура;
					ДопПараметры.Вставить("ПакетЭД", СтруктураРаспаковки.ПакетЭД);
					ДопПараметры.Вставить("ОбработчикПродолжения", ОписаниеОповещения);
					ДопПараметры.Вставить("ЕстьКриптосредствоНаКлиенте", ЕстьКриптосредствоНаКлиенте);
					ДопПараметры.Вставить("ДанныеРаспаковки", ДанныеРаспаковки);
					
					ПервичныйЭД = Истина;
					ТипДанных = Неопределено;
					Если ДанныеРаспаковки.Свойство("ТипДанных", ТипДанных) И ТипДанных <> "ЭД" Тогда
						ПервичныйЭД = Ложь;
					КонецЕсли;
					// Расшифровывать требуется только первичный ЭД, подтверждение и служебные ЭД не шифруются.
					ДопПараметры.Вставить("ТипДанных", ТипДанных);
					Если ПервичныйЭД И СтруктураРаспаковки.Свойство("СтруктураШифрования", СтруктураШифрования)
						И ТипЗнч(СтруктураШифрования) = Тип("Структура") Тогда
						
						ЗашифрованныеДД = Новый Массив;
						Для Каждого Элемент Из ДанныеРаспаковки.СтруктураДвоичныхДанных Цикл
							ЗашифрованныеДД.Добавить(Элемент);
						КонецЦикла;
						ДанныеРаспаковки.СтруктураДвоичныхДанных = Новый Массив;
						ДопПараметры.Вставить("Сертификат", СтруктураШифрования.Сертификат);
						ДопПараметры.Вставить("ЗашифрованныеДД", ЗашифрованныеДД);
						РасшифроватьДанныеЭД(, ДопПараметры)
					Иначе
						Если ДанныеРаспаковки.Свойство("ТипДанных", ТипДанных) И ТипДанных <> "ЭД" И ТипДанных <> "Подпись" Тогда
							ОбработатьПолученныйСлужебныйЭД(ДопПараметры);
						Иначе
							ОбработатьДанныеПакетаЭДНаКлиенте(ДопПараметры);
						КонецЕсли;
					КонецЕсли;
				Иначе
					ОбработатьОчереднойПакетЭД(Неопределено, СтруктураПакетовЭД);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Завершить Тогда
		ОбработчикПродолжения = Неопределено;
		Если СтруктураПакетовЭД.Свойство("ОбработчикПродолжения", ОбработчикПродолжения)
			И ТипЗнч(ОбработчикПродолжения) = Тип("ОписаниеОповещения") Тогда
			
			ВыполнитьОбработкуОповещения(ОбработчикПродолжения, СтруктураПакетовЭД.ВсегоРаспаковано);
		Иначе
			СообщитьРезультатыРаспаковкиПакетовЭД(СтруктураПакетовЭД.ВсегоРаспаковано);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из ОбработатьОчереднойПакетЭД и, по описанию оповещения, из ЭлектроннаяПодписьКлиент.Расшифровать.
//
Процедура РасшифроватьДанныеЭД(Результат, ДополнительныеПараметры) Экспорт
	
	// В результате приходят расшифрованные данные маркера, поместим их в ВозврСоответствие:
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		РасшифрованныеДанные = Неопределено;
		ОбрабатываемаяСтруктура = Неопределено;
		Если Результат.Свойство("РасшифрованныеДанные", РасшифрованныеДанные)
			И ДополнительныеПараметры.Свойство("ОбрабатываемаяСтруктура", ОбрабатываемаяСтруктура) Тогда
			
			Если ЭтоАдресВременногоХранилища(РасшифрованныеДанные) Тогда
				РасшифрованныеДанные = ПолучитьИзВременногоХранилища(РасшифрованныеДанные);
			КонецЕсли;
			
			Если ТипЗнч(РасшифрованныеДанные) = Тип("ДвоичныеДанные") Тогда
				
				ОбрабатываемаяСтруктура.ДвоичныеДанные = РасшифрованныеДанные;
				ДополнительныеПараметры.ДанныеРаспаковки.СтруктураДвоичныхДанных.Добавить(ОбрабатываемаяСтруктура);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ЗапуститьФинальныйОбработчикОповещения = Истина;
	
	МассивДвоичныхДанных = Неопределено;
	Если ДополнительныеПараметры.Свойство("ЗашифрованныеДД", МассивДвоичныхДанных)
		И ТипЗнч(МассивДвоичныхДанных) = Тип("Массив") И МассивДвоичныхДанных.Количество() > 0 Тогда
		
		СтруктураДанных = МассивДвоичныхДанных[0];
		МассивСертификатов = Новый Массив;
		МассивСертификатов.Добавить(ДополнительныеПараметры.Сертификат);
		
		ОписаниеДанных = Новый Структура;
		ОписаниеДанных.Вставить("ОтборСертификатов", МассивСертификатов);
		ОписаниеДанных.Вставить("БезПодтверждения",  Истина);
		ОписаниеДанных.Вставить("ЭтоАутентификация", Ложь);
		ОписаниеДанных.Вставить("Данные", СтруктураДанных.ДвоичныеДанные);
		
		
		ОбрабатываемаяСтруктура = Новый Структура("ДвоичныеДанные, ИмяФайлаБезРасширения, ИмяФайла");
		ЗаполнитьЗначенияСвойств(ОбрабатываемаяСтруктура, СтруктураДанных);
		ДополнительныеПараметры.Вставить("ОбрабатываемаяСтруктура", ОбрабатываемаяСтруктура);
		ДополнительныеПараметры.Вставить("ОписаниеДанных", ОписаниеДанных);
		
		// Удалим из соответствия обработанный элемент:
		ЗапуститьФинальныйОбработчикОповещения = Ложь;
		ДополнительныеПараметры.ЗашифрованныеДД.Удалить(0);
		ОписаниеОповещения = Новый ОписаниеОповещения("РасшифроватьДанныеЭД", ЭтотОбъект, ДополнительныеПараметры);
		ЭлектроннаяПодписьКлиент.Расшифровать(ОписаниеДанных, , ОписаниеОповещения);
	КонецЕсли;
	
	Если ЗапуститьФинальныйОбработчикОповещения Тогда
		ОбработатьДанныеПакетаЭДНаКлиенте(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из ОбработатьОчереднойПакетЭД и РасшифроватьДанныеЭД
//
Процедура ОбработатьДанныеПакетаЭДНаКлиенте(Параметры)
	
	ДанныеРаспаковки = Параметры.ДанныеРаспаковки;
	МассивДвоичныхДанныхИзвещений = ДанныеРаспаковки.СтруктураДвоичныхДанныхИзвещений;
	Параметры.Вставить("ВсегоРаспаковано", 0);

	Если МассивДвоичныхДанныхИзвещений.Количество() > 0 Тогда
		Параметры.Вставить("ИндексОбработкиИзвещения", -1);
		Параметры.Удалить("ПодписьНеверна");
		ОбработатьОчередноеИзвещение(Параметры);
		Возврат;
	КонецЕсли;
	
	ТипДанных = Неопределено;
	Если ДанныеРаспаковки.Свойство("ТипДанных", ТипДанных) И ТипДанных <> "ЭД" И ТипДанных <> "Подпись" Тогда
		ОбработатьПолученныйСлужебныйЭД(Параметры);
	Иначе
		ПослеОбработкиИзвещенийОбработатьДанныеПакетаЭД(Параметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьПолученныйСлужебныйЭД(Параметры) Экспорт
	
	ОписаниеОповещения               = Параметры.ОбработчикПродолжения;
	ДанныеРаспаковки                 = Параметры.ДанныеРаспаковки;
	ЕстьКриптосредствоНаКлиенте      = Параметры.ЕстьКриптосредствоНаКлиенте;
	ПакетЭД                          = Параметры.ПакетЭД;
	
	СтруктураВозврата       = Новый Структура;
	СоответствиеЭДИПодписей = Новый Соответствие;
	КоличествоОбработанныхДокументов = ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьДвоичныеДанныеПакетаОператораЭДО(
						ПакетЭД, ДанныеРаспаковки, ЕстьКриптосредствоНаКлиенте, СоответствиеЭДИПодписей, СтруктураВозврата);
	МассивДобавленныхФайлов             = СтруктураВозврата.МассивДобавленныхФайлов;
	МассивДобавленныхФайловДляИзвещений = СтруктураВозврата.МассивДобавленныхФайловДляИзвещений;
	МассивВладельцев                    = СтруктураВозврата.МассивВладельцев;
	Если ТипЗнч(МассивДобавленныхФайлов) = Тип("Массив") И МассивДобавленныхФайлов.Количество() > 0 Тогда
		
		Если СоответствиеЭДИПодписей.Количество() > 0 Тогда
			МассивЭДиПодписей = Новый Массив;
			Для Каждого Элемент Из СоответствиеЭДИПодписей Цикл
				Для Каждого ДанныеПодписи ИЗ Элемент.Значение Цикл
					СтруктураДанных = Новый Структура;
					СтруктураДанных.Вставить("ЭлектронныйДокумент", Элемент.Ключ);
					СтруктураДанных.Вставить("ДанныеПодписи", ДанныеПодписи);
					МассивЭДиПодписей.Добавить(СтруктураДанных);
				КонецЦикла;
			КонецЦикла;
			ЗанестиИнформациюОПодписи(МассивЭДиПодписей);
		КонецЕсли;
	КонецЕсли;
	
	Если КоличествоОбработанныхДокументов > 0 Тогда
		Оповестить("ОбновитьДокументИБПослеЗаполнения", МассивВладельцев);
	КонецЕсли;
	
	// Получили данные от оператора ЭДО
	Если МассивДобавленныхФайловДляИзвещений.Количество() > 0 Тогда
		ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ИзвещениеОПолучении");
		СформироватьПодписатьСлужебныйЭД(МассивДобавленныхФайловДляИзвещений, ВидЭД, , , ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КоличествоОбработанныхДокументов);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Только для внутреннего использования
Процедура РаспаковатьМассивПакетовЭД(МассивПЭД) Экспорт
	
	// Распаковываем принятые пакеты с электронными документами.
	ТекстСообщения = НСтр("ru = 'Выполняется распаковка пакетов электронных документов. Подождите...'");
	Состояние(НСтр("ru = 'Распаковка.'"), , ТекстСообщения);

	ПараметрыРаспаковки = ЭлектронныеДокументыСлужебныйВызовСервера.ОпределитьПараметрыРаспаковки(МассивПЭД);
	Если ПараметрыРаспаковки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПакетовЭД = Новый Структура;
	СтруктураПакетовЭД.Вставить("ПараметрыРаспаковки", ПараметрыРаспаковки);
	СтруктураПакетовЭД.Вставить("ВсегоРаспаковано", 0);
	
	Оповещение = Новый ОписаниеОповещения("РаспаковатьМассивПакетовЭДПродолжить", ЭтотОбъект, СтруктураПакетовЭД);
	ЭлектроннаяПодписьКлиент.СоздатьМенеджерКриптографии(Оповещение, "ПолучениеСертификатов", Ложь);
	
КонецПроцедуры

// Формирует и выводит сообщение, которое может быть связано с элементом 
// управления формы.
//
//  Параметры
//  ТекстСообщенияПользователю - Строка - текст сообщения.
//  ИдентификаторНазначения - УникальныйИдентификатор - к какой форме должно быть "привязано" сообщение
//
Процедура СообщитьПользователю(ТекстСообщенияПользователю, ИдентификаторНазначения);
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.ИдентификаторНазначения = ИдентификаторНазначения;
	Сообщение.Сообщить();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Распаковка пакетов ЭД (расшифровка, проверка, подписи)

Процедура СообщитьРезультатыРаспаковкиПакетовЭД(ВсегоРаспаковано)
	
	Если НЕ ЗначениеЗаполнено(ВсегоРаспаковано) Тогда
		ВсегоРаспаковано = 0;
	КонецЕсли;
	
	ЗаголовокОповещения = НСтр("ru = 'Обмен электронными документами'");
	ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru = 'Распаковано электронных документов: (%1)'"), ВсегоРаспаковано);
	ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);
	
	Оповестить("ОбновитьСостояниеЭД");
	
КонецПроцедуры

Процедура ПолучитьДанныеЗашифрованногоМаркера(Результат, ДополнительныеПараметры) Экспорт
	
	ИД_Параметров = Неопределено;
	МаркерЗашифрованный = Неопределено;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ИД_Параметров", ИД_Параметров) Тогда
		
		// Параметры - Структура("СоотвСоглашенийИМассиваСертификатовАвторизации, СоотвСертификатовИИхСтруктур, ВозврСоответствие").
		// ВозврСоответствие - параметр, который передается в метод, указанный в обработке оповещения
		// (ДополнительныеПараметры.ОбработкаОповещения).
		СоотвСертификатовИИхСтруктур = Неопределено;
		Параметры = ПараметрыПриложения["ЭлектронноеВзаимодействие." + ИД_Параметров];
		Если ТипЗнч(Параметры) = Тип("Структура")
			И Параметры.Свойство("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур) Тогда
			
			// Результат - структура - ОписаниеДанных которая была передана в метод Расшифровать(),
			// дополненная параметром ВыбранныйСертификат на стороне БСП:
			ОписаниеДанных = Неопределено;
			ВыбранныйСертификат = Неопределено;
			Если ДополнительныеПараметры.Свойство("ОписаниеДанных", ОписаниеДанных)
				И ТипЗнч(ОписаниеДанных) = Тип("Структура")
				И ОписаниеДанных.Свойство("ВыбранныйСертификат", ВыбранныйСертификат)
				И ТипЗнч(ВыбранныйСертификат) = Тип("Структура")
				И ВыбранныйСертификат.Свойство("Ссылка", ВыбранныйСертификат)
				И СоотвСертификатовИИхСтруктур.Получить(Строка(ВыбранныйСертификат.УникальныйИдентификатор()) + "_" + ДополнительныеПараметры.ИдентификаторОрганизации) <> Неопределено Тогда
				
				СтруктураПараметровЗапросаМаркера = Параметры.СоотвСертификатовИИхСтруктур[Строка(ВыбранныйСертификат.УникальныйИдентификатор()) + "_" + ДополнительныеПараметры.ИдентификаторОрганизации];
				
				СтруктураПараметровЗапросаМаркера.Вставить("СпособОбменаЭД", ДополнительныеПараметры.СпособОбменаЭД);
				СтруктураПараметровЗапросаМаркера.Вставить("ИдентификаторОрганизации", ДополнительныеПараметры.ИдентификаторОрганизации);
				
				МаркерЗашифрованный = ЭлектронныеДокументыСлужебныйВызовСервера.ЗашифрованныйМаркер(СтруктураПараметровЗапросаМаркера,
					ДополнительныеПараметры.ПараметрыАутентификации);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("Данные", МаркерЗашифрованный);
	ВыполнитьОбработкуОповещения(Результат.Оповещение, Параметры);
	
КонецПроцедуры

Процедура РасшифроватьМаркер(Результат, ДополнительныеПараметры) Экспорт
	
	ИД_Параметров = Неопределено;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ИД_Параметров", ИД_Параметров) Тогда
		
		// Параметры - Структура("СоотвСоглашенийИМассиваСертификатовАвторизации,
		//   СоотвСертификатовИИхСтруктур, СоответствиеПрофилейИПараметровСертификатов").
		// ВозврСоответствие - параметр, который передается в метод, указанный в обработке оповещения
		// (ДополнительныеПараметры.ОбработкаОповещения).
		ВозврСоответствие = Неопределено;
		Параметры = ПараметрыПриложения["ЭлектронноеВзаимодействие." + ИД_Параметров];
		Если НЕ (ТипЗнч(Параметры) = Тип("Структура")
			И Параметры.Свойство("СоответствиеПрофилейИПараметровСертификатов", ВозврСоответствие)
			И ТипЗнч(ВозврСоответствие) = Тип("Соответствие")) Тогда
			
			Параметры.Вставить("СоответствиеПрофилейИПараметровСертификатов", Новый Соответствие);
			ВозврСоответствие = Параметры.СоответствиеПрофилейИПараметровСертификатов;
		КонецЕсли;
		
		// В результате приходят расшифрованные данные маркера, поместим их в ВозврСоответствие:
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			Успех = Ложь;
			РасшифрованныеДанные = Неопределено;
			ПрофильНастроекЭДО = Неопределено;
			Если Результат.Свойство("РасшифрованныеДанные", РасшифрованныеДанные) Тогда
				Если ЭтоАдресВременногоХранилища(РасшифрованныеДанные) Тогда
					РасшифрованныеДанные = ПолучитьИзВременногоХранилища(РасшифрованныеДанные);
				КонецЕсли;
				Если ТипЗнч(РасшифрованныеДанные) = Тип("ДвоичныеДанные")
					И ДополнительныеПараметры.Свойство("ПрофильНастроекЭДО", ПрофильНастроекЭДО) Тогда
					
					ВыбранныйСертификат = Неопределено;
					Если Результат.Свойство("ВыбранныйСертификат", ВыбранныйСертификат)
						И ТипЗнч(ВыбранныйСертификат) = Тип("Структура")
						И ВыбранныйСертификат.Свойство("Ссылка", ВыбранныйСертификат)
						И Параметры.СоотвСертификатовИИхСтруктур.Получить(ВыбранныйСертификат) <> Неопределено Тогда
						
						ПараметрыСертификата = Параметры.СоотвСертификатовИИхСтруктур[ВыбранныйСертификат];
						ПараметрыСертификата.Вставить("МаркерРасшифрованный", РасшифрованныеДанные);
						ВозврСоответствие.Вставить(ПрофильНастроекЭДО, ПараметрыСертификата);
					Иначе
						ВозврСоответствие.Вставить(ПрофильНастроекЭДО, Новый Структура("МаркерРасшифрованный", РасшифрованныеДанные));
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ЗапуститьФинальныйОбработчикОповещения = Истина;
		ОбработчикОповещения = Неопределено;
		СоответствиеСоглашенийИСертификатов = Неопределено;
		Если ДополнительныеПараметры.Свойство("СоответствиеСоглашенийИСертификатов", СоответствиеСоглашенийИСертификатов)
			И ТипЗнч(СоответствиеСоглашенийИСертификатов) = Тип("Соответствие")
			И СоответствиеСоглашенийИСертификатов.Количество() > 0 Тогда
			
			Для Каждого Элемент Из СоответствиеСоглашенийИСертификатов Цикл
				ПрофильНастроекЭДО = Элемент.Ключ;
				Сертификаты = Элемент.Значение;
				
				// Аутентификация на 1С Логин для сервиса 1С:ЭДО.
				ПараметрыАутентификации = Неопределено;
				РеквизитыПрофиляНастроекЭДО = ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыПрофиляНастроекЭДО(ПрофильНастроекЭДО);
				Если РеквизитыПрофиляНастроекЭДО.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО") Тогда
					Если ДополнительныеПараметры.Свойство("ПараметрыАутентификации", ПараметрыАутентификации) Тогда
						
						Если (ТипЗнч(ПараметрыАутентификации) <> Тип("Структура") ИЛИ Не ЗначениеЗаполнено(ПараметрыАутентификации.Пароль)) Тогда
							
							СтандартныеПодсистемыКлиент.АвторизоватьНаСайтеПоддержкиПользователей(ЭтотОбъект,
								Новый ОписаниеОповещения("АутентификацияНаСервисе1СЭДО", ЭтотОбъект, ДополнительныеПараметры));
								
							Возврат;
						КонецЕсли;
					Иначе
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ (ТипЗнч(Сертификаты) = Тип("Массив") И ЗначениеЗаполнено(ПрофильНастроекЭДО)) Тогда
					Продолжить;
				КонецЕсли;
				
				Маркер = Неопределено;
				МассивСертификатов = Новый Массив;
				Для Каждого Сертификат Из Сертификаты Цикл
					КлючПоискаСертификата = Строка(Сертификат.УникальныйИдентификатор()) + "_" + РеквизитыПрофиляНастроекЭДО.ИдентификаторОрганизации;
					ПараметрыСтруктура = Параметры.СоотвСертификатовИИхСтруктур.Получить(КлючПоискаСертификата);
					Если ПараметрыСтруктура.Свойство("МаркерРасшифрованный", Маркер) Тогда
						ВозврСоответствие.Вставить(ПрофильНастроекЭДО, ПараметрыСтруктура);
						МассивСертификатов = Новый Массив;
						Прервать;
					Иначе
						ПараметрыСтруктура.Свойство("МаркерЗашифрованный", Маркер);
						Если ПараметрыСтруктура.ПарольПолучен Тогда
							// Авторизоваться на сервере оператора можно любым зарегистрированным в соглашении сертификатом,
							// поэтому, если есть несколько доступных для авторизации сертификатов и среди них есть хотя бы
							// один с сохраненным (в сертификате или сеансе) паролем, то вернем именно его, чтобы не открывать
							// диалог выбора сертификата.
							МассивСертификатов = Новый Массив;
							МассивСертификатов.Добавить(Сертификат);
							Прервать;
						Иначе
							МассивСертификатов.Добавить(Сертификат);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				// Если массив серитфикатов пустой, значит либо уже есть расшифрованный маркер, либо нет сертификатов,
				// в обоих случаях переходим к обработке следующей Настройки ЭДО.
				Если МассивСертификатов.Количество() > 0 Тогда
					ОписаниеДанных = Новый Структура;
					ОписаниеДанных.Вставить("ОтборСертификатов", МассивСертификатов);
					ОписаниеДанных.Вставить("БезПодтверждения",  Истина);
					ОписаниеДанных.Вставить("ЭтоАутентификация", Истина);
					ОписаниеДанных.Вставить("Операция", НСтр("ru = 'Аутентификация в сервисе ЭДО'"));
					ОписаниеДанных.Вставить("РазрешитьЗапоминатьПароль", Истина);
					Если Маркер = Неопределено Тогда
						СтруктураПараметровЗапросаМаркера = Новый Структура();
						СтруктураПараметровЗапросаМаркера.Вставить("ИД_Параметров", ИД_Параметров);
						СтруктураПараметровЗапросаМаркера.Вставить("ОписаниеДанных", ОписаниеДанных);
						
						СтруктураПараметровЗапросаМаркера.Вставить("СпособОбменаЭД", РеквизитыПрофиляНастроекЭДО.СпособОбменаЭД);
						СтруктураПараметровЗапросаМаркера.Вставить("ИдентификаторОрганизации", РеквизитыПрофиляНастроекЭДО.ИдентификаторОрганизации);
						СтруктураПараметровЗапросаМаркера.Вставить("ПараметрыАутентификации", ПараметрыАутентификации);
						
						Маркер = Новый ОписаниеОповещения("ПолучитьДанныеЗашифрованногоМаркера", ЭтотОбъект, СтруктураПараметровЗапросаМаркера);
					КонецЕсли;
					
					ОписаниеДанных.Вставить("Данные", Маркер);
					
					ДополнительныеПараметры.Вставить("ПрофильНастроекЭДО", ПрофильНастроекЭДО);
					ДополнительныеПараметры.Вставить("ОписаниеДанных", ОписаниеДанных);
					
					// Удалим из соответствия обработанный элемент:
					СоответствиеСоглашенийИСертификатов.Удалить(ПрофильНастроекЭДО);
					ОписаниеОповещения = Новый ОписаниеОповещения("РасшифроватьМаркер", ЭтотОбъект, ДополнительныеПараметры);
					
					ЗапуститьФинальныйОбработчикОповещения = Ложь;
					ЭлектроннаяПодписьКлиент.Расшифровать(ОписаниеДанных, , ОписаниеОповещения);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ЗапуститьФинальныйОбработчикОповещения
			И ДополнительныеПараметры.Свойство("ОбработчикОповещения", ОбработчикОповещения)
			И ТипЗнч(ОбработчикОповещения) = Тип("ОписаниеОповещения") Тогда
			
			ПараметрыОповещения = Новый Структура;
			ПараметрыОповещения.Вставить("СоответствиеПрофилейИПараметровСертификатов", ВозврСоответствие);
			
			Если ПараметрыПриложения["ЭлектронноеВзаимодействие." + ИД_Параметров] <> Неопределено Тогда
				ПараметрыПриложения.Удалить("ЭлектронноеВзаимодействие." + ИД_Параметров);
			КонецЕсли;
			
			ВыполнитьОбработкуОповещения(ОбработчикОповещения, ПараметрыОповещения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьМассивПакетовОповещение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СоотвСоглашенийИСтруктурСертификатов = Результат.СоответствиеПрофилейИПараметровСертификатов;
	МассивПЭД = ДополнительныеПараметры.МассивПЭД;
	
	Результат = ЭлектронныеДокументыСлужебныйВызовСервера.ОтправкаПакетовЭД(МассивПЭД, СоотвСоглашенийИСтруктурСертификатов);
	
	Оповестить("ОбновитьСостояниеЭД");
	
	ОбработкаОповещения = ДополнительныеПараметры.ОбработкаОповещения;
		
	Если Не ОбработкаОповещения = Неопределено Тогда
		
		ВыполнитьОбработкуОповещения(ОбработкаОповещения, Результат);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьПредложениеОбАннулированииЗавершить(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Оповестить("ОбновитьСостояниеЭД");
	
КонецПроцедуры

Процедура ОбработатьОтклонениеАннулированиеЭДЗавершить(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Текст = НСтр("ru = '%1, %2:
			|%3'");
		ТекстУточнения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст,
			ДополнительныеПараметры.Организация, ПользователиКлиентСервер.ТекущийПользователь(), Результат);
		
		Если ДополнительныеПараметры.Отклонить Тогда
			ВидСлужебногоЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.УведомлениеОбУточнении");
		Иначе
			ВидСлужебногоЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПредложениеОбАннулировании");
		КонецЕсли;
		// При аннулировании параметр ФормироватьЭД всегда имеет значение Истина,
		// при отклонении может иметь значение как Истина, так и Ложь.
		ОписаниеОповещения = Неопределено;
		ДополнительныеПараметры.Свойство("ОписаниеОповещения", ОписаниеОповещения);
		ФормироватьЭД = Ложь;
		Если НЕ (ДополнительныеПараметры.Свойство("ФормироватьЭД", ФормироватьЭД) И ФормироватьЭД = Истина) Тогда
			НовыйСтатусЭД = ПредопределенноеЗначение("Перечисление.СтатусыЭД.Отклонен");
			СтруктураПараметров = Новый Структура("СтатусЭД, ПричинаОтклонения", НовыйСтатусЭД, Результат);
			СсылкаНаЭД = ДополнительныеПараметры.СсылкаНаЭД;
			ЭлектронныеДокументыСлужебныйВызовСервера.ИзменитьПоСсылкеПрисоединенныйФайл(ДополнительныеПараметры.СсылкаНаЭД, СтруктураПараметров, Ложь);
			Если ТипЗнч(ОписаниеОповещения) = Тип("ОписаниеОповещения") Тогда
				ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
			КонецЕсли;
		Иначе
			СформироватьПодписатьСлужебныйЭД(ДополнительныеПараметры.СсылкаНаЭД,
				ВидСлужебногоЭД, ТекстУточнения, ОписаниеОповещения);
		КонецЕсли;
	ИначеЕсли Результат <> Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Причина не указана, действие отменено.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьЭДВБанкСАутентификациейЛогинПароль(ПараметрыАутентификации, Параметры) Экспорт
	
	Если Не ЗначениеЗаполнено(ПараметрыАутентификации) Тогда
		НачатьОтправкуЭДВБанкСАвторизациейЛогинПароль(Параметры.Результат, Параметры);
		Возврат;
	КонецЕсли;
	
	НастройкаЭДО = Параметры.СоглашениеЭД;
	РеквизитыНастройкиЭДО = ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыНастройкиЭДО(НастройкаЭДО);
	АсинхронныйОбмен = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АсинхронныйОбмен");
	Если РеквизитыНастройкиЭДО.ПрограммаБанка = АсинхронныйОбмен Тогда
		Обработчик = Новый ОписаниеОповещения("ОтправитьЭДВБанкПослеПолученияМаркера", ЭтотОбъект, Параметры);
		ПолучитьМаркерБанкаПоЛогинуИПаролю(НастройкаЭДО, Обработчик, РеквизитыНастройкиЭДО.АдресСервера,
			РеквизитыНастройкиЭДО.ИдентификаторОрганизации, ПараметрыАутентификации.Пользователь,
			ПараметрыАутентификации.ПарольПользователя);
	Иначе
		МассивЭДКОтправке = Параметры.МассивЭДКОтправкеВБанкСАвторизациейЛогинПароль;
		СоотвСоглашенийИСтруктурСертификатов = Параметры.СоотвСоглашенийИСтруктурСертификатов;
		СоотвСоглашенийИСтруктурСертификатов.Вставить(Параметры.СоглашениеЭД, ПараметрыАутентификации);
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьОтправкуЭДВБанкСАвторизациейЛогинПароль", ЭтотОбъект, Параметры);
		ПодготовитьИОтправитьПЭД(МассивЭДКОтправке, Ложь, СоотвСоглашенийИСтруктурСертификатов, , ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьЭДВБанкПослеПолученияМаркера(Маркер, Параметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Маркер) Тогда
		НачатьОтправкуЭДВБанкСАвторизациейЛогинПароль(Параметры.Результат, Параметры);
		Возврат;
	КонецЕсли;
	
	ПараметрыАутентификации = Новый Структура;
	ПараметрыАутентификации.Вставить("МаркерРасшифрованный", Маркер);
	МассивЭДКОтправке = Параметры.МассивЭДКОтправкеВБанкСАвторизациейЛогинПароль;
	СоотвСоглашенийИСтруктурСертификатов = Параметры.СоотвСоглашенийИСтруктурСертификатов;
	СоотвСоглашенийИСтруктурСертификатов.Вставить(Параметры.СоглашениеЭД, ПараметрыАутентификации);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьОтправкуЭДВБанкСАвторизациейЛогинПароль", ЭтотОбъект, Параметры);
	ПодготовитьИОтправитьПЭД(МассивЭДКОтправке, Ложь, СоотвСоглашенийИСтруктурСертификатов, , ОписаниеОповещения);
	
КонецПроцедуры

Процедура РасшифроватьМаркерБанка(Результат, ДополнительныеПараметры) Экспорт
	
	ИД_Параметров = Неопределено;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ИД_Параметров", ИД_Параметров) Тогда
		
		// Параметры - Структура("СоотвСоглашенийИМассиваСертификатовАвторизации,
		//   СоотвСертификатовИИхСтруктур, СоответствиеПрофилейИПараметровСертификатов").
		// ВозврСоответствие - параметр, который передается в метод, указанный в обработке оповещения
		// (ДополнительныеПараметры.ОбработкаОповещения).
		ВозврСоответствие = Неопределено;
		Параметры = ПараметрыПриложения["ЭлектронноеВзаимодействие." + ИД_Параметров];
		Если НЕ (ТипЗнч(Параметры) = Тип("Структура")
			И Параметры.Свойство("СоответствиеПрофилейИПараметровСертификатов", ВозврСоответствие)
			И ТипЗнч(ВозврСоответствие) = Тип("Соответствие")) Тогда
			
			Параметры.Вставить("СоответствиеПрофилейИПараметровСертификатов", Новый Соответствие);
			ВозврСоответствие = Параметры.СоответствиеПрофилейИПараметровСертификатов;
		КонецЕсли;
		
		// В результате приходят расшифрованные данные маркера, поместим их в ВозврСоответствие:
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			Успех = Ложь;
			РасшифрованныеДанные = Неопределено;
			ПрофильНастройкиЭДО = Неопределено;
			Если Результат.Свойство("РасшифрованныеДанные", РасшифрованныеДанные) Тогда
				Если ЭтоАдресВременногоХранилища(РасшифрованныеДанные) Тогда
					РасшифрованныеДанные = ПолучитьИзВременногоХранилища(РасшифрованныеДанные);
				КонецЕсли;
				Если ТипЗнч(РасшифрованныеДанные) = Тип("ДвоичныеДанные")
					И ДополнительныеПараметры.Свойство("ПрофильНастройкиЭДО", ПрофильНастройкиЭДО) Тогда
					
					ВыбранныйСертификат = Неопределено;
					Если Результат.Свойство("ВыбранныйСертификат", ВыбранныйСертификат)
						И ТипЗнч(ВыбранныйСертификат) = Тип("Структура")
						И ВыбранныйСертификат.Свойство("Ссылка", ВыбранныйСертификат)
						И Параметры.СоотвСертификатовИИхСтруктур.Получить(ВыбранныйСертификат) <> Неопределено Тогда
						
						ПараметрыСертификата = Параметры.СоотвСертификатовИИхСтруктур[ВыбранныйСертификат];
						ПараметрыСертификата.Вставить("МаркерРасшифрованный", РасшифрованныеДанные);
						ВозврСоответствие.Вставить(ПрофильНастройкиЭДО, ПараметрыСертификата);
					Иначе
						ВозврСоответствие.Вставить(ПрофильНастройкиЭДО, Новый Структура("МаркерРасшифрованный", РасшифрованныеДанные));
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ЗапуститьФинальныйОбработчикОповещения = Истина;
		ОбработчикОповещения = Неопределено;
		СоответствиеСоглашенийИСертификатов = Неопределено;
		Если ДополнительныеПараметры.Свойство("СоответствиеСоглашенийИСертификатов", СоответствиеСоглашенийИСертификатов)
			И ТипЗнч(СоответствиеСоглашенийИСертификатов) = Тип("Соответствие")
			И СоответствиеСоглашенийИСертификатов.Количество() > 0 Тогда
			
			Для Каждого Элемент Из СоответствиеСоглашенийИСертификатов Цикл
				ПрофильНастройкиЭДО = Элемент.Ключ;
				Сертификаты = Элемент.Значение;
				
				Если НЕ (ТипЗнч(Сертификаты) = Тип("Массив") И ЗначениеЗаполнено(ПрофильНастройкиЭДО))Тогда
					Продолжить;
				КонецЕсли;
				
				Маркер = Неопределено;
				МассивСертификатов = Новый Массив;
				Для Каждого Сертификат Из Сертификаты Цикл
					ПараметрыСтруктура = Параметры.СоотвСертификатовИИхСтруктур.Получить(Сертификат);
					Если ПараметрыСтруктура.Свойство("МаркерРасшифрованный", Маркер) Тогда
						ВозврСоответствие.Вставить(ПрофильНастройкиЭДО, ПараметрыСтруктура);
						МассивСертификатов = Новый Массив;
						Прервать;
					Иначе
						ПараметрыСтруктура.Свойство("МаркерЗашифрованный", Маркер);
						Если ПараметрыСтруктура.ПарольПолучен Тогда
							// Авторизоваться на сервере оператора можно любым зарегистрированным в соглашении сертификатом,
							// поэтому, если есть несколько доступных для авторизации сертификатов и среди них есть хотя бы
							// один с сохраненным (в сертификате или сеансе) паролем, то вернем именно его, чтобы не открывать
							// диалог выбора сертификата.
							МассивСертификатов = Новый Массив;
							МассивСертификатов.Добавить(Сертификат);
							Прервать;
						Иначе
							МассивСертификатов.Добавить(Сертификат);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				// Если массив серитфикатов пустой, значит либо уже есть расшифрованный маркер, либо нет сертификатов,
				// в обоих случаях переходим к обработке следующей Настройки ЭДО.
				Если МассивСертификатов.Количество() > 0 Тогда
					ОписаниеДанных = Новый Структура;
					ОписаниеДанных.Вставить("ОтборСертификатов", МассивСертификатов);
					ОписаниеДанных.Вставить("БезПодтверждения",  Истина);
					ОписаниеДанных.Вставить("ЭтоАутентификация", Истина);
					ОписаниеДанных.Вставить("Операция", НСтр("ru = 'Аутентификация на сервере банка'"));
					ОписаниеДанных.Вставить("РазрешитьЗапоминатьПароль", Истина);
					Если Маркер = Неопределено Тогда
						ПараметрыЗапросаМеркера = Новый Структура("ИД_Параметров, ОписаниеДанных", ИД_Параметров, ОписаниеДанных);
						Маркер = Новый ОписаниеОповещения("ПолучитьДанныеЗашифрованногоМаркераБанка", ЭтотОбъект, ПараметрыЗапросаМеркера);
					КонецЕсли;
					
					ОписаниеДанных.Вставить("Данные", Маркер);
					
					ДополнительныеПараметры.Вставить("ПрофильНастройкиЭДО", ПрофильНастройкиЭДО);
					ДополнительныеПараметры.Вставить("ОписаниеДанных", ОписаниеДанных);
					
					// Удалим из соответствия обработанный элемент:
					СоответствиеСоглашенийИСертификатов.Удалить(ПрофильНастройкиЭДО);
					ОписаниеОповещения = Новый ОписаниеОповещения("РасшифроватьМаркерБанка", ЭтотОбъект, ДополнительныеПараметры);
					
					ЗапуститьФинальныйОбработчикОповещения = Ложь;
					ЭлектроннаяПодписьКлиент.Расшифровать(ОписаниеДанных, , ОписаниеОповещения);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ЗапуститьФинальныйОбработчикОповещения
			И ДополнительныеПараметры.Свойство("ОбработчикОповещения", ОбработчикОповещения)
			И ТипЗнч(ОбработчикОповещения) = Тип("ОписаниеОповещения") Тогда
			
			ПараметрыОповещения = Новый Структура;
			ПараметрыОповещения.Вставить("СоответствиеПрофилейИПараметровСертификатов", ВозврСоответствие);
			
			Если ПараметрыПриложения["ЭлектронноеВзаимодействие." + ИД_Параметров] <> Неопределено Тогда
				ПараметрыПриложения.Удалить("ЭлектронноеВзаимодействие." + ИД_Параметров);
			КонецЕсли;
			
			ВыполнитьОбработкуОповещения(ОбработчикОповещения, ПараметрыОповещения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодписатьЗапросыВыписок(Результат, ПараметрыОбработки) Экспорт
	
	СоотвСертификатовИИхСтруктур = ПараметрыОбработки.СоотвСертификатовИИхСтруктур;
	МассивЭД = ПараметрыОбработки.МассивЭД;
	
	МассивСертификатов = Новый Массив;
	Для Каждого КлючИЗначение Из СоотвСертификатовИИхСтруктур Цикл
		МассивСертификатов.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	Если МассивЭД.Количество() = 1 Тогда
		Операция = НСтр("ru = 'Подписание электронного документа'");
	Иначе
		Операция = НСтр("ru = 'Подписание электронных документов'");
	КонецЕсли;
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("Операция",            Операция);
	ОписаниеДанных.Вставить("ОтборСертификатов",   МассивСертификатов);
	ОписаниеДанных.Вставить("ПоказатьКомментарий", Ложь);
	ОписаниеДанных.Вставить("БезПодтверждения",    Истина);
	
	НаборДанных = Новый Массив;
	Для Каждого ЭД Из МассивЭД Цикл
		Данные = Новый Структура;
		ПараметрыДляПолученияДД = Новый Структура("ЭД, ОписаниеДанных", ЭД, ОписаниеДанных);
		СсылкаНаДД = Новый ОписаниеОповещения("ПолучитьДвоичныеДанныеДляЭД", ЭтотОбъект, ПараметрыДляПолученияДД);
		Данные.Вставить("Данные", СсылкаНаДД);
		Данные.Вставить("Объект", ЭД);
		
		НаборДанных.Добавить(Данные);
	КонецЦикла;
	
	ОписаниеДанных.Вставить("НаборДанных", НаборДанных);
	ПараметрыОбработки.Вставить("ОписаниеДанных", ОписаниеДанных);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодписатьЗапросыВыписокЗавершить", ЭтотОбъект, ПараметрыОбработки);
	ЭлектроннаяПодписьКлиент.Подписать(ОписаниеДанных, , ОписаниеОповещения);
	
КонецПроцедуры

Процедура ПодписатьЗапросыВыписокЗавершить(Результат, ПараметрыОбработки) Экспорт
	
	КолПодписанных = 0;
	НаборДанных = Неопределено;
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.Свойство("НаборДанных", НаборДанных)
			И ТипЗнч(НаборДанных) = Тип("Массив") Тогда
			Для Каждого Структура Из НаборДанных Цикл
				СвойстваПодписи = Неопределено;
				Подпись = Неопределено;
				Если Структура.Свойство("СвойстваПодписи", СвойстваПодписи)
					И ТипЗнч(СвойстваПодписи) = Тип("Структура")
					И СвойстваПодписи.Свойство("Подпись", Подпись) Тогда
					КолПодписанных = КолПодписанных + 1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если КолПодписанных > 0 Тогда
		
		РеквизитыНастройкиЭДО = ПараметрыОбработки.ПараметрыФормы.РеквизитыНастройкиЭДО;
		
		АсинхронныйОбмен = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АсинхронныйОбмен");
		Если РеквизитыНастройкиЭДО.ПрограммаБанка = АсинхронныйОбмен Тогда
			Если РеквизитыНастройкиЭДО.АутентификацияПоСертификату Тогда
				МассивСертификатов = Новый Массив;
				Для Каждого КлючЗначение Из ПараметрыОбработки.СоотвСертификатовИИхСтруктур Цикл
					ДанныеСертификата = КлючЗначение.Значение;
					Маркер = ЭлектронныеДокументыСлужебныйВызовСервера.ЗашифрованныйМаркерБанка(
						ПараметрыОбработки.ПараметрыФормы.СоглашениеЭД, ДанныеСертификата);
					МассивСертификатов.Добавить(КлючЗначение.Ключ);
				КонецЦикла;
				Если Маркер = Неопределено Тогда
					Возврат;
				КонецЕсли;
				
				ОписаниеДанных = Новый Структура;
				ОписаниеДанных.Вставить("ОтборСертификатов", МассивСертификатов);
				ОписаниеДанных.Вставить("БезПодтверждения",  Истина);
				ОписаниеДанных.Вставить("ЭтоАутентификация", Истина);
				ОписаниеДанных.Вставить("Операция", НСтр("ru = 'Аутентификация на сервере банка'"));
				ОписаниеДанных.Вставить("РазрешитьЗапоминатьПароль", Истина);
				ОписаниеДанных.Вставить("Данные", Маркер);
					
				ОписаниеОповещения = Новый ОписаниеОповещения(
					"ПродолжитьОтправкуЗапросаВыпискиПослеРасшифровкиМаркера", ЭтотОбъект, ПараметрыОбработки);
				ЭлектроннаяПодписьКлиент.Расшифровать(ОписаниеДанных, , ОписаниеОповещения);
				Возврат;
			Иначе
				ПараметрыАутентификации = Новый Структура;
				ПолученыДанныеАутентификации = ЭлектронныеДокументыСлужебныйКлиент.ПолученыДанныеАвторизации(
									ПараметрыОбработки.ПараметрыФормы.СоглашениеЭД, ПараметрыАутентификации);
				Если НЕ ПолученыДанныеАутентификации Тогда
					ОООЗ = Новый ОписаниеОповещения(
						"ОткрытьФормуЗапросаВыписки", ЭлектронныеДокументыСлужебныйКлиент, ПараметрыОбработки.ПараметрыФормы);
					ЭлектронныеДокументыСлужебныйКлиент.ПолучитьДанныеАутентификации(
						ПараметрыОбработки.ПараметрыФормы.СоглашениеЭД, ОООЗ);
					Возврат;
				КонецЕсли;
			КонецЕсли
		КонецЕсли;
		
		ВладелецФормы = ПараметрыОбработки.ПараметрыФормы.Владелец;
		ПараметрыОбработки.ПараметрыФормы.Удалить("Владелец");
		ОткрытьФорму("Обработка.ОбменЭлектроннымиДокументамиСБанком.Форма.ЗапросВБанк", ПараметрыОбработки.ПараметрыФормы,
			ВладелецФормы);
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ПродолжитьОтправкуЗапросаВыпискиПослеРасшифровкиМаркера(Результат, Параметры) Экспорт

	Если Результат.Успех Тогда
		ПараметрыЗапроса = Новый Структура;
		ПараметрыЗапроса.Вставить("СоглашениеЭД", Параметры.ПараметрыФормы.СоглашениеЭД);
		ПараметрыЗапроса.Вставить("МассивЭД", Параметры.МассивЭД);
		ИдентификаторСессииБанка = ЭлектронныеДокументыСлужебныйВызовСервера.СтрокаИзДвоичныхДанных(
																	Результат.РасшифрованныеДанные);
		ПараметрыЗапроса.Вставить("ИдентификаторСессииБанка", ИдентификаторСессииБанка);
		ОткрытьФорму("Обработка.ОбменЭлектроннымиДокументамиСБанком.Форма.ЗапросВБанк", ПараметрыЗапроса,
			Параметры.ПараметрыФормы.Владелец);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеПодписанияЗапросаЗонда(Результат, ПараметрыОбработки) Экспорт
	
	Если Результат.Успех Тогда
		Если ПараметрыОбработки.РеквизитыНастройкиЭДО.АутентификацияПоСертификату Тогда
			
			ПараметрыСертификата = Новый Структура;
			ПараметрыСертификата.Вставить("СертификатПодписи", Результат.ВыбранныйСертификат.Ссылка);
			ПараметрыСертификата.Вставить("ДанныеСертификата", Результат.ВыбранныйСертификат.Данные);
			Маркер = ЭлектронныеДокументыСлужебныйВызовСервера.ЗашифрованныйМаркерБанка(
				ПараметрыОбработки.НастройкаЭДО, ПараметрыСертификата);
			Если Маркер = Неопределено Тогда
				СтруктураРезультата = Новый Структура("Успех", Ложь);
				ВыполнитьОбработкуОповещения(ПараметрыОбработки.ОбработчикПослеТестаНастройки, СтруктураРезультата);
				Возврат;
			КонецЕсли;
			МассивСертификатов = Новый Массив;
			МассивСертификатов.Добавить(Результат.ВыбранныйСертификат.Ссылка);
			
			ОписаниеДанных = Новый Структура;
			ОписаниеДанных.Вставить("ОтборСертификатов", МассивСертификатов);
			ОписаниеДанных.Вставить("БезПодтверждения",  Истина);
			ОписаниеДанных.Вставить("ЭтоАутентификация", Истина);
			ОписаниеДанных.Вставить("Операция", НСтр("ru = 'Аутентификация на сервере банка'"));
			ОписаниеДанных.Вставить("РазрешитьЗапоминатьПароль", Истина);
			ОписаниеДанных.Вставить("Данные", Маркер);
				
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПродолжитьОтправкуЗапросаЗондаПослеРасшифровкиМаркера", ЭтотОбъект, ПараметрыОбработки);
			ЭлектроннаяПодписьКлиент.Расшифровать(ОписаниеДанных, , ОписаниеОповещения);
		Иначе
			ОООЗ = Новый ОписаниеОповещения(
				"ПолучитьМаркерБанкаПослеВводаДанныхАутентификации", ЭтотОбъект, ПараметрыОбработки);
			ПолучитьДанныеАутентификации(ПараметрыОбработки.НастройкаЭДО, ОООЗ, Истина);
		КонецЕсли;
	Иначе
		СтруктураРезультата = Новый Структура("Успех", Ложь);
		ВыполнитьОбработкуОповещения(ПараметрыОбработки.ОбработчикПослеТестаНастройки, СтруктураРезультата);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьМаркерБанкаПослеВводаДанныхАутентификации(ДанныеАутентификации, Параметры) Экспорт
	
	Если ДанныеАутентификации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ТестСвязиСБанкомAsync", ЭтотОбъект, Параметры);
	
	ПолучитьМаркерБанкаПоЛогинуИПаролю(Параметры.НастройкаЭДО, Обработчик, Параметры.РеквизитыНастройкиЭДО.АдресСервера,
		Параметры.РеквизитыНастройкиЭДО.ИдентификаторОрганизации, ДанныеАутентификации.Пользователь,
		ДанныеАутентификации.ПарольПользователя);
	
КонецПроцедуры

Процедура ПродолжитьОтправкуЗапросаЗондаПослеРасшифровкиМаркера(Результат, Параметры) Экспорт
	
	Если Результат.Успех Тогда
		ПараметрыЗапроса = Новый Структура;
		ПараметрыЗапроса.Вставить("СоглашениеЭД", Параметры.НастройкаЭДО);
		ПараметрыЗапроса.Вставить("ЭлектронныйДокумент", Параметры.ЗапросЗонд);
		ИдентификаторСессииБанка = ЭлектронныеДокументыСлужебныйВызовСервера.СтрокаИзДвоичныхДанных(
																	Результат.РасшифрованныеДанные);
		ПараметрыЗапроса.Вставить("ИдентификаторСессииБанка", ИдентификаторСессииБанка);
		ОткрытьФорму("Обработка.ОбменЭлектроннымиДокументамиСБанком.Форма.ЗапросВБанк", ПараметрыЗапроса, , , , ,
			Параметры.ОбработчикПослеТестаНастройки);
	Иначе
		СтруктураРезультата = Новый Структура("Успех", Ложь);
		ВыполнитьОбработкуОповещения(Параметры.ОбработчикПослеТестаНастройки, СтруктураРезультата);
	КонецЕсли;

КонецПроцедуры

Процедура РаспаковатьПакетЭДБанкаНаКлиенте(ПакетЭД, Структура, ОписаниеОповещения)
	
	ЭлектронныеДокументыСлужебныйВызовСервера.РаспаковатьПакетЭДБанка(ПакетЭД, Структура);
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, Неопределено);
	
КонецПроцедуры

//Производит десериализацию данных
//
// Параметры:
// ПредставлениеXML - Строка - сериализованные данные
//
// Возвращаемое значение:
//  Произвольный - десериализованные данные
//
Функция ДеСериализованныеДанные(Знач ПредставлениеXML) Экспорт

	#Если НЕ ВебКлиент Тогда
	
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(ПредставлениеXML);
		ЧтениеXML.Прочитать();

		Сериализатор = Новый СериализаторXDTO(ФабрикаXDTO);
		Возврат Сериализатор.ПрочитатьXML(ЧтениеXML);
	#Иначе
		
		Возврат ЭлектронныеДокументыСлужебныйВызовСервера.ДеСериализованныеДанные(ПредставлениеXML);
		
	#КонецЕсли

КонецФункции

Процедура ОткрытьФормуЗапросаВыписки(ПараметрыАутентификации, Параметры) Экспорт
	
	Если ПараметрыАутентификации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыНастрокиЭДО = ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыНастройкиЭДО(Параметры.СоглашениеЭД);
	
	АсинхронныйОбмен = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АсинхронныйОбмен");
	
	Если РеквизитыНастрокиЭДО.ПрограммаБанка = АсинхронныйОбмен Тогда
		Обработчик = Новый ОписаниеОповещения("ЗапроситьВыпискуПослеПолученияМаркераБанка", ЭтотОбъект, Параметры);
		ПолучитьМаркерБанкаПоЛогинуИПаролю(Параметры.СоглашениеЭД, Обработчик, РеквизитыНастрокиЭДО.АдресСервера,
			РеквизитыНастрокиЭДО.ИдентификаторОрганизации, ПараметрыАутентификации.Пользователь,
			ПараметрыАутентификации.ПарольПользователя);
		Возврат;
	КонецЕсли;
	
	Если ПараметрыАутентификации.Количество() Тогда
		Параметры.Вставить("Пользователь", ПараметрыАутентификации.Пользователь);
		Параметры.Вставить("Пароль", ПараметрыАутентификации.ПарольПользователя);
	КонецЕсли;
	
	ВладелецФормы = Параметры.Владелец;
	Параметры.Удалить("Владелец");
	ОткрытьФорму("Обработка.ОбменЭлектроннымиДокументамиСБанком.Форма.ЗапросВБанк", Параметры, ВладелецФормы);
	
КонецПроцедуры

// Вызывается из
//
// Параметры:
//    Результат - Структура, Неопределено - в структуре возвращаются результаты очередной завершившейся итерации
//              отправки банковских ЭД в банк:
//       ИтогКолПодготовленных - Число.
//       ИтогКолОтправленных   - Число.
//    Параметры - Структура:
//       НастройкиЭДОСБанками - Массив.
//       ИтогКолПодготовленных - Число.
//       ИтогКолОтправленных   - Число.
//
Процедура ВыполнитьОбменСБанками(Результат, Параметры) Экспорт
	
	ИтогКолПодготовленных = 0;
	ИтогКолОтправленных = 0;
	ИтогКолПолученных = 0;
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.Свойство("ИтогКолПодготовленных", ИтогКолПодготовленных) Тогда
			КолПодготовленных = 0;
			Если НЕ (Параметры.Свойство("ИтогКолПодготовленных", КолПодготовленных)
					И ТипЗнч(КолПодготовленных) = Тип("Число")) Тогда
				
				КолПодготовленных = 0;
			КонецЕсли;
			КолПодготовленных = КолПодготовленных + ИтогКолПодготовленных;
			Параметры.Вставить("ИтогКолПодготовленных", КолПодготовленных);
		КонецЕсли;
		Если Результат.Свойство("ИтогКолОтправленных", ИтогКолОтправленных) Тогда
			КолОтправленных = 0;
			Если НЕ (Параметры.Свойство("ИтогКолОтправленных", КолОтправленных)
					И ТипЗнч(КолОтправленных) = Тип("Число")) Тогда
				
				КолОтправленных = 0;
			КонецЕсли;
			КолОтправленных = КолОтправленных + ИтогКолОтправленных;
			Параметры.Вставить("ИтогКолОтправленных", КолОтправленных);
		КонецЕсли;
		Если Результат.Свойство("ИтогКолПолученных", ИтогКолПолученных) Тогда
			КолПолученных = 0;
			Если НЕ (Параметры.Свойство("ИтогКолПолученных", КолПолученных)
					И ТипЗнч(КолПолученных) = Тип("Число")) Тогда
				
				КолПолученных = 0;
			КонецЕсли;
			КолПолученных = КолПолученных + ИтогКолПолученных;
			Параметры.Вставить("ИтогКолПолученных", КолПолученных);
		КонецЕсли;
	КонецЕсли;
	
	НастройкиЭДОСБанками = Неопределено;
	Если НЕ Параметры.Свойство("НастройкиЭДОСБанками", НастройкиЭДОСБанками)
		ИЛИ НастройкиЭДОСБанками.Количество() = 0 Тогда
		
		ВыполнитьДействияПослеОтправки(Параметры);
	Иначе
		НастройкаЭДО = НастройкиЭДОСБанками[0];
		Параметры.НастройкиЭДОСБанками.Удалить(0);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьОбменСБанками", ЭтотОбъект, Параметры);
		Структура = Новый Структура("ОбработчикПродолжения, СоглашениеЭД, ИтогКолПодготовленных, ИтогКолОтправленных",
			ОписаниеОповещения, НастройкаЭДО, 0, 0);
		ВыполнитьОбменСБанком(Структура);
	КонецЕсли;
	
КонецПроцедуры

// Отправка и получение электронных документов одной командой.
//
// Параметры:
//    Параметры - Структура:
//       ОбработчикПродолжения - ОписаниеОповещения.
//       СоглашениеЭД          - СправочникСсылка.СоглашенияОбОбменеЭД.
//       ИтогКолПодготовленных - Число.
//       ИтогКолОтправленных   - Число.
//
Процедура ВыполнитьОбменСБанком(Параметры)
	
	// Блок отправки и получения ЭД.
	ТекстСообщения = НСтр("ru = 'Отправка пакетов электронных документов в банк. Подождите...'");
	Состояние(НСтр("ru = 'Отправка.'"), , ТекстСообщения);
		
	ПараметрыАвторизации = Новый Соответствие;
	Параметры.Вставить("ПараметрыАвторизации", ПараметрыАвторизации);
	
	РеквизитыСоглашения = ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыНастройкиЭДО(Параметры.СоглашениеЭД);
	
	СинхронныйОбмен = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АльфаБанкОнлайн");
	ОбменЧерезДопОбработку = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку");
	Параметры.Вставить("ТребуетсяАвторизация", Истина);
	ДанныеАвторизации = Неопределено;
	СбербанкОнлайн = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн");
	
	Если РеквизитыСоглашения.ПрограммаБанка = СбербанкОнлайн Тогда
		Параметры.Вставить("ПолучитьРезультатыОбработкиЗапросовВыписки");
		Параметры.Вставить("ПолучитьРезультатыОбработкиВыпискиБанка");
		Параметры.Вставить("ПолучитьРезультатыОбработкиПлатежныхПоручений");
		Параметры.Вставить("ПолучитьРезультатыОбработкиЗапросовНочнойВыписки");
		Параметры.Вставить("ОтправитьЗапросНаПолучениеГотовыхВыписокСбербанк");
		Параметры.Вставить("ВыполнитьОбменСБанками");
		ОтправитьЗапросНаНочныеВыпискиСбербанк(Параметры.СоглашениеЭД, Параметры);
		Возврат;
	КонецЕсли;
	
	Если РеквизитыСоглашения.АутентификацияПоСертификату Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеПолученияОтпечатковВыполнитьОбменСБанком", ЭтотОбъект, Параметры);
		ЭлектроннаяПодписьКлиент.ПолучитьОтпечаткиСертификатов(Оповещение, Истина, Ложь);
		Возврат;
	КонецЕсли;
	
	Если (РеквизитыСоглашения.ПрограммаБанка = СинхронныйОбмен И РеквизитыСоглашения.ИспользуетсяКриптография)
		ИЛИ РеквизитыСоглашения.ПрограммаБанка = ОбменЧерезДопОбработку
		ИЛИ ПарольКСертификатуПолучен(Параметры.СоглашениеЭД, ДанныеАвторизации) Тогда
			
		Если ДанныеАвторизации = Неопределено Тогда
			Параметры.Вставить("ТребуетсяАвторизация", Ложь);
		КонецЕсли;
		ОтправитьДокументыВБанк(ДанныеАвторизации, Параметры);
	Иначе
		ОООЗ = Новый ОписаниеОповещения("ОтправитьДокументыВБанк", ЭтотОбъект, Параметры);
		ПолучитьДанныеАутентификации(Параметры.СоглашениеЭД, ОООЗ);
	КонецЕсли;
	
	
КонецПроцедуры

// Отправка и получение электронных документов одной командой.
//
// Параметры:
//    ДанныеАутентификации - Структура или Неопределено.
//    Параметры         - Структура - контекст выполнения
//
Процедура ОтправитьДокументыВБанк(ДанныеАутентификации, Параметры) Экспорт
	
	ВыполнитьОповещение = Ложь;
	Если НЕ Параметры.ТребуетсяАвторизация ИЛИ ЗначениеЗаполнено(ДанныеАутентификации) Тогда
		РеквизитыНастройкиЭДО = ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыНастройкиЭДО(Параметры.СоглашениеЭД);
		АсинхронныйОбмен = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АсинхронныйОбмен");
		Если РеквизитыНастройкиЭДО.ПрограммаБанка = АсинхронныйОбмен Тогда
			// При аутентификации по сертификату отправка выполняется после расшифровки маркера
			// из процедуры ПослеПолученияОтпечатковВыполнитьОбменСБанком.
			Обработчик = Новый ОписаниеОповещения("ОтправитьИПолучитьДокументыВБанкПослеПолученияМаркера", ЭтотОбъект, Параметры);
			
			ПолучитьМаркерБанкаПоЛогинуИПаролю(Параметры.СоглашениеЭД, Обработчик, РеквизитыНастройкиЭДО.АдресСервера,
				РеквизитыНастройкиЭДО.ИдентификаторОрганизации, ДанныеАутентификации.Пользователь,
				ДанныеАутентификации.ПарольПользователя);
		Иначе
			ПараметрыАвторизации = Параметры.ПараметрыАвторизации;
			СоглашениеЭД = Параметры.СоглашениеЭД;
			ПараметрыАвторизации.Вставить(СоглашениеЭД, ДанныеАутентификации);
			
			СтруктураВозврата = Неопределено;
			ЭлектронныеДокументыСлужебныйВызовСервера.ОтправитьЭДВБанк(СоглашениеЭД, ПараметрыАвторизации, СтруктураВозврата);
			
			Если СтруктураВозврата.Свойство("КолОтправленныхПакетов") Тогда
				Параметры.ИтогКолОтправленных = Параметры.ИтогКолОтправленных + СтруктураВозврата.КолОтправленныхПакетов;
			КонецЕсли;
			// Т.к. отправка выполняется по конкретному соглашению, то соответствия в СтруктуреВозврата
			// (ДанныеДляОтправкиЧерезДопОбработку, ДанныеДляОтправкиiBank2) с ключом СоглашениеЭД, не могут иметь больше
			// одного элемента. Поэтому можно сразу извлечь данные для отправки из соответствия.
			Если СтруктураВозврата.Свойство("ДанныеДляОтправкиЧерезДопОбработку")
				И СтруктураВозврата.ДанныеДляОтправкиЧерезДопОбработку.Количество() > 0 Тогда
				
				ДанныеДляОтправки = СтруктураВозврата.ДанныеДляОтправкиЧерезДопОбработку.Получить(СоглашениеЭД);
				Параметры.Вставить("ДанныеДляОтправки", ДанныеДляОтправки);
				ОбработчикПослеПодключения = Новый ОписаниеОповещения("НачатьОтправкуПакетовЧерезДополнительнуюОбработку",
					ЭтотОбъект, Параметры);
				Параметры.Вставить("ВыполняласьПопыткаПолученияМодуля", Ложь);
				Параметры.Вставить("ОбработкаПослеПолученияМодуля", ОбработчикПослеПодключения);
				ПолучитьВнешнийМодульЧерезДополнительнуюОбработку(Параметры);
			ИначеЕсли СтруктураВозврата.Свойство("ДанныеДляОтправкиiBank2")
				И СтруктураВозврата.ДанныеДляОтправкиiBank2.Количество() > 0 Тогда
				
				Параметры.Вставить("СтруктураДанных", СтруктураВозврата);
				ОбработчикПослеПодключения = Новый ОписаниеОповещения("НачатьОтправкуПакетовiBank2", ЭтотОбъект, Параметры);
				Параметры.Вставить("ОбработчикПослеПодключенияКомпоненты", ОбработчикПослеПодключения);
				ПодключитьВнешнююКомпонентуiBank2(Параметры);
			Иначе
				ВыполнитьОповещение = Истина;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ВыполнитьОповещение = Истина;
	КонецЕсли;
	
	Если ВыполнитьОповещение Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОбработчикПродолжения, Параметры.ИтогКолОтправленных);
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования
Процедура ТестСвязиСБанкомAsync(Маркер, Параметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Маркер) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("СоглашениеЭД", Параметры.НастройкаЭДО);
	ПараметрыЗапроса.Вставить("ЭлектронныйДокумент", Параметры.ЗапросЗонд);
	ПараметрыЗапроса.Вставить("ИдентификаторСессииБанка", Маркер);
	ОткрытьФорму("Обработка.ОбменЭлектроннымиДокументамиСБанком.Форма.ЗапросВБанк", ПараметрыЗапроса, , , , ,
		Параметры.ОбработчикПослеТестаНастройки);

КонецПроцедуры

// Выполняет получение идентификатора сессии банка (маркера)
//
// Параметры:
//    НастройкаЭДО - СправочникСсылка.СоглашенияОбИспользованииЭД - настройка обмена с банком
//    Обработчик - ОписаниеОповещения - обработчик, вызываемый после получения маркера.
//    В параметре Результат - Строка - маркер банка
//    АдресСервера - Строка - URL адрес сервера банка
//    ИдентификаторОрганизации - Строка - идентификатор организации на сервере банка
//    Пользователь - Строка - логин на сервере банка
//    Пароль - Строка - пароль аутентификации на сервере банка
Процедура ПолучитьМаркерБанкаПоЛогинуИПаролю(НастройкаЭДО, Обработчик, АдресСервера, ИдентификаторОрганизации, Пользователь, Пароль) Экспорт
	
	ДанныеSMSАвторизации = Неопределено;
	ИдентификаторСессииБанка = ЭлектронныеДокументыСлужебныйВызовСервера.МаркерБанка(
		АдресСервера, ИдентификаторОрганизации, Пользователь, Пароль, ДанныеSMSАвторизации);
	Если ЗначениеЗаполнено(ДанныеSMSАвторизации) Тогда
		Параметры = Новый Структура;
		Параметры.Вставить("ОбработчикПослеРасширеннойАутентификации", Обработчик);
		Параметры.Вставить("АдресСервера", АдресСервера);
		Параметры.Вставить("ИдентификаторОрганизации", ИдентификаторОрганизации);
		Параметры.Вставить("НеподтвержденныйИдентификаторСессииБанка", ИдентификаторСессииБанка);
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ИдентификаторСессии", ИдентификаторСессииБанка);
		ПараметрыФормы.Вставить("Телефон", ДанныеSMSАвторизации.МаскаТелефона);
		ПараметрыФормы.Вставить("НастройкаЭДО", НастройкаЭДО);
		ОО = Новый ОписаниеОповещения("ОтправитьОдноразовыйПарольSMSВБанк", ЭтотОбъект, Параметры);
		ОткрытьФорму("Обработка.ОбменЭлектроннымиДокументамиСБанком.Форма.РасширеннаяАутентификацияПоSMS", ПараметрыФормы, , , , , ОО);
	Иначе
		ВыполнитьОбработкуОповещения(Обработчик, ИдентификаторСессииБанка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьОдноразовыйПарольSMSВБанк(ОдноразовыйПароль, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(ОдноразовыйПароль) Тогда
		ИдентификаторСессииБанка = ЭлектронныеДокументыСлужебныйВызовСервера.МаркерБанкаПоSMS(Параметры.АдресСервера,
		Параметры.ИдентификаторОрганизации, Параметры.НеподтвержденныйИдентификаторСессииБанка, ОдноразовыйПароль);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Параметры.ОбработчикПослеРасширеннойАутентификации, ИдентификаторСессииБанка);

КонецПроцедуры

Процедура ЗапроситьВыпискуПослеПолученияМаркераБанка(ИдентификаторСессииБанка, Параметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторСессииБанка) Тогда
		Возврат;
	КонецЕсли;
	
	ВладелецФормы = Параметры.Владелец;
	Параметры.Удалить("Владелец");
	Параметры.Удалить("ПроцедураОбработчик");
	Параметры.Удалить("ОбъектОбработчик");
	Параметры.Вставить("ИдентификаторСессииБанка", ИдентификаторСессииБанка);
	ОткрытьФорму("Обработка.ОбменЭлектроннымиДокументамиСБанком.Форма.ЗапросВБанк", Параметры, ВладелецФормы);
	
КонецПроцедуры

Процедура ОтправитьИПолучитьДокументыВБанкПослеПолученияМаркера(Маркер, Параметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Маркер) Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОбработчикПродолжения, Неопределено);
		Возврат;
		
	КонецЕсли;
	
	ДанныеАутентификации = Новый Структура;
	ДанныеАутентификации.Вставить("МаркерРасшифрованный", Маркер);
	
	ОтправитьИПолучитьДокументыВБанк(ДанныеАутентификации, Параметры)
	
КонецПроцедуры

Процедура ОтправитьИПолучитьДокументыВБанкПослеРасшифровкиМаркера(Результат, Параметры) Экспорт
	
	Если НЕ Результат.Успех Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОбработчикПродолжения, Неопределено);
		Возврат;
	КонецЕсли;
	
	ДанныеСтрокой = ЭлектронныеДокументыСлужебныйВызовСервера.СтрокаИзДвоичныхДанных(Результат.РасшифрованныеДанные);
	ДанныеАутентификации = Новый Структура;
	ДанныеАутентификации.Вставить("МаркерРасшифрованный", ДанныеСтрокой);

	ОтправитьИПолучитьДокументыВБанк(ДанныеАутентификации, Параметры)
	
КонецПроцедуры

Процедура ОтправитьИПолучитьДокументыВБанк(ДанныеАутентификации, Параметры)
	
	ПараметрыАвторизации = Параметры.ПараметрыАвторизации;
		
	НастройкаЭДО = Параметры.СоглашениеЭД;
	
	ПараметрыАвторизации.Вставить(НастройкаЭДО, ДанныеАутентификации);
		
	СтруктураВозврата = Неопределено;
	ЭлектронныеДокументыСлужебныйВызовСервера.ОтправитьЭДВБанк(НастройкаЭДО, ПараметрыАвторизации, СтруктураВозврата);
	ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЭДИзБанкаАсинхронныйОбмен(ПараметрыАвторизации, СтруктураВозврата);
		
	// Подготовим вывод сообщения для пользователя об отправке/получению пакетов ЭД.
	КолОтправленныхПакетов = СтруктураВозврата.КолОтправленныхПакетов;
	КолПолученныхПакетов = СтруктураВозврата.КолПолученныхПакетов;
	ШаблонОповещения = НСтр("ru = 'Отправлено пакетов: (%1), получено пакетов: (%2).'");
	ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонОповещения, КолОтправленныхПакетов, КолПолученныхПакетов);
	
	Оповестить("ОбновитьСостояниеЭД");
		
	ЗаголовокОповещения = НСтр("ru = 'Обмен электронными документами'");
	ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);
	
	Структура = Новый Структура("ИтогКолОтправленных, ИтогКолПолученных", КолОтправленныхПакетов, КолПолученныхПакетов);
	Параметры.ИтогКолОтправленных = Параметры.ИтогКолОтправленных + СтруктураВозврата.КолОтправленныхПакетов;
	ВыполнитьОбработкуОповещения(Параметры.ОбработчикПродолжения, Структура);
	
КонецПроцедуры

// Процедура интерактивно запрашивает логин и пароль у пользователя
// Параметры:
//  СоглашениеЭД - СправочникСсылка.СоглашенияОбИспользованииЭД - ссылка на соглашение с банком
//  ОписаниеОповещенияОЗакрытии - ОписаниеОповещения - где будет продолжена работа программы
//  Параметры - дополнительные параметры обработки данных
//
Процедура ПолучитьДанныеАутентификации(СоглашениеЭД, ОписаниеОповещенияОЗакрытии, ЭтоТест = Ложь) Экспорт
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ВидОперации", Нстр("ru = 'Аутентификация на сервере банка'"));
	ПараметрыФормы.Вставить("ДляЗаписиВИБ", ЭтоТест);
	ПараметрыСоглашения = Новый Соответствие;
	ПараметрыСоглашения.Вставить(СоглашениеЭД);
	ПараметрыФормы.Вставить("Соответствие", ПараметрыСоглашения);
	ОткрытьФорму("Обработка.ОбменЭлектроннымиДокументамиСБанком.Форма.ЗапросПароляКСертификату",
		ПараметрыФормы, , , , , ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

//Производит сериализацию данных
//
// Параметры:
// Значение - Произвольный - данные для сериализации
//
// Возвращаемое значение:
//  Строка - сериализованные данные
//
Функция СериализованныеДанные(Знач Значение) Экспорт

	#Если НЕ ВебКлиент Тогда

		Если Значение = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;

		Сериализатор = Новый СериализаторXDTO(ФабрикаXDTO);
		ОбъектXDTO = Сериализатор.ЗаписатьXDTO(Значение);
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку();
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);

		Возврат ЗаписьXML.Закрыть();
		
	#Иначе
		
		Возврат ЭлектронныеДокументыСлужебныйВызовСервера.СериализованныеДанные(Значение);

	#КонецЕсли

КонецФункции

Процедура РасширеннаяАутентификация(НастройкаЭДО, Знач Сертификат, Знач ПараметрыРасширеннойАутентификации, ОООЗ)

	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Сертификат",   Сертификат);
	ПараметрыФормы.Вставить("Сессия",       ПараметрыРасширеннойАутентификации.Сессия);
	ПараметрыФормы.Вставить("НастройкаЭДО", НастройкаЭДО);

	ОткрытьФорму(
		"Обработка.ОбменЭлектроннымиДокументамиСБанком.Форма.РасширеннаяАутентификацияПоSMS", ПараметрыФормы, , , , , ОООЗ);


КонецПроцедуры

#КонецОбласти

#Область iBank2

Функция ИмяКомпонентыiBank2() Экспорт
	
	Возврат "AddIn.iBank2DX.iBank2ProviderDX_v_1_0";
	
КонецФункции

// Устанавливает пароль для установки соединения с банком
//
// Параметры:
//  СертификатXML  - Строка - Содержит данные сертификата
//  Пароль  - Строка - пароль сертификата
//
// Возвращаемое значение:
//   Булево   - пароль верный или нет
//
Функция УстановитьПарольСертификатаiBank2(СертификатXML, Пароль) Экспорт
	
	ПараметрыПодсистемыОбменСБанками = ПараметрыПриложения["ОбменСБанками.Параметры"];
	ВнешнийПодключаемыйМодуль = ?(ТипЗнч(ПараметрыПодсистемыОбменСБанками) = Тип("Соответствие"),
		ПараметрыПодсистемыОбменСБанками.Получить(ИмяКомпонентыiBank2()), Неопределено);

	Попытка
		ВнешнийПодключаемыйМодуль.УстановитьПарольСертификата(СертификатXML, Пароль);
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка установки пароля сертификата.
									|Код ошибки: %1
									|%2'");
		ДеталиОшибки = ИнформацияОбОшибкеiBank2();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ШаблонОшибки, ДеталиОшибки.Код, ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Установка пароля сертификата'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
							Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Устанавливает соединение с банком
//
// Параметры:
//  СоглашениеЭД - СправочникСсылка.СоглашенияОбИспользованииЭД - соглашение с банком
//  СертификатXML  - Строка - данные сертификата
//  Параметры  - Структура - Содержит контекст выполнения метода
//  АутентификацияВыполнена - Булево - Истина - соединение установлено, иначе Ложь
//
Процедура УстановитьСоединениеiBank2(СоглашениеЭД, СертификатXML, ОписаниеОповещения) Экспорт
	
	ПараметрыПодсистемыОбменСБанками = ПараметрыПриложения["ОбменСБанками.Параметры"];
	ВнешнийПодключаемыйМодуль = ?(ТипЗнч(ПараметрыПодсистемыОбменСБанками) = Тип("Соответствие"),
		ПараметрыПодсистемыОбменСБанками.Получить(ИмяКомпонентыiBank2()), Неопределено);
	
	НастройкиПроксиСервера = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().НастройкиПроксиСервера;
	
	ВыполнитьОповещение = Истина;
	АутентификацияВыполнена = Истина;
	Если ЗначениеЗаполнено(НастройкиПроксиСервера) Тогда
	
		НастройкиПрокси = Новый Структура;

		НастройкиПрокси.Вставить("ТипПодключения", 0);

		Если НастройкиПроксиСервера["ИспользоватьПрокси"] Тогда
			НастройкиПрокси.ТипПодключения = ?(НастройкиПроксиСервера["ИспользоватьСистемныеНастройки"], 1, 2);
		КонецЕсли;

		НастройкиПрокси.Вставить("Сервер",       НастройкиПроксиСервера["Сервер"]);
		НастройкиПрокси.Вставить("Порт",         Формат(НастройкиПроксиСервера["Порт"], "ЧГ=0"));
		НастройкиПрокси.Вставить("Пользователь", НастройкиПроксиСервера["Пользователь"]);
		НастройкиПрокси.Вставить("Пароль",       НастройкиПроксиСервера["Пароль"]);

		НастройкиПроксиXML = СериализованныеДанные(НастройкиПрокси);
		
		Попытка
			ВнешнийПодключаемыйМодуль.УстановитьПрокси(НастройкиПроксиXML);
		Исключение
			ШаблонОшибки = НСтр("ru = 'Ошибка установки настроек прокси-сервера.
										|Код ошибки: %1
										|%2'");
			ДеталиОшибки = ИнформацияОбОшибкеiBank2();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонОшибки, ДеталиОшибки.Код, ДеталиОшибки.Сообщение);
			Операция = НСтр("ru = 'Установка настроек прокси сервера'");
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
								Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
			АутентификацияВыполнена = Ложь;
		КонецПопытки;
		
	КонецЕсли;
	
	Если АутентификацияВыполнена Тогда
		Идентификатор = Строка(СоглашениеЭД.УникальныйИдентификатор());
		Попытка

			Если НЕ ВнешнийПодключаемыйМодуль.УстановитьСоединение(СертификатXML, Идентификатор) Тогда
				ПараметрыРасширеннойАутентификацииXML = Неопределено;
				ТребуетсяРасширеннаяАутентификация = ВнешнийПодключаемыйМодуль.НеобходимоВыполнитьРасширеннуюАутентификацию(
																						ПараметрыРасширеннойАутентификацииXML);
				Если ТребуетсяРасширеннаяАутентификация Тогда
					ПараметрыРасширеннойАутентификации = ДеСериализованныеДанные(ПараметрыРасширеннойАутентификацииXML);
					Если ПараметрыРасширеннойАутентификации.Способы.Количество() = 0 Тогда
						ВызватьИсключение НСтр("ru = 'Не определены способы расширенной аутентификации.'");
					КонецЕсли;
					Если НЕ ПараметрыРасширеннойАутентификации.Способы.Свойство("SMS") Тогда
						ВызватьИсключение НСтр("ru = 'Расширенная аутентификация по SMS не поддерживается.'");
					КонецЕсли;
					ОдноразовыйПароль = Неопределено;
					РасширеннаяАутентификация(СоглашениеЭД, СертификатXML, ПараметрыРасширеннойАутентификации, ОписаниеОповещения);
					ВыполнитьОповещение = Ложь;
				Иначе
					ВызватьИсключение НСтр("ru = 'Ошибка установки соединения'");
				КонецЕсли;
			КонецЕсли;
			
		Исключение
			ШаблонОшибки = НСтр("ru = 'Ошибка установки соединения.
										|Код ошибки: %1
										|%2'");
			ДеталиОшибки = ИнформацияОбОшибкеiBank2();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонОшибки, ДеталиОшибки.Код, ДеталиОшибки.Сообщение);
			Операция = НСтр("ru = 'Установка соединения'");
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
								Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
			АутентификацияВыполнена = Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Если ВыполнитьОповещение Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, АутентификацияВыполнена);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает PIN код для доступа к банковскому ключу
//
// Параметры
//  ИдентификаторХранилища  - Строка - идентификатор хранилища
//  ПинКод  - Строка - Пин код
//
// Возвращаемое значение:
//  Булево -  пин код установлен успешно или нет
//
Функция УстановитьPINКодХранилищаiBank2(ИдентификаторХранилища, ПинКод) Экспорт
	
	ПараметрыПодсистемыОбменСБанками = ПараметрыПриложения["ОбменСБанками.Параметры"];
	ВнешнийПодключаемыйМодуль = ?(ТипЗнч(ПараметрыПодсистемыОбменСБанками) = Тип("Соответствие"),
		ПараметрыПодсистемыОбменСБанками.Получить(ИмяКомпонентыiBank2()), Неопределено);
	ПинКодУстановлен = Истина;
	
	Попытка
		ВнешнийПодключаемыйМодуль.УстановитьPINКодХранилища(ИдентификаторХранилища, ПинКод);
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка установки PIN-кода.
									|Код ошибки: %1
									|%2'");
		ДеталиОшибки = ИнформацияОбОшибкеiBank2();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонОшибки, ДеталиОшибки.Код, ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Установка PIN-кода'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
			Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
		ПинКодУстановлен = Ложь;
	КонецПопытки;
	
	Возврат ПинКодУстановлен;
	
КонецФункции

Функция УстановленПарольСертификатаiBank2(СертификатXML) Экспорт
	
	ПараметрыПодсистемыОбменСБанками = ПараметрыПриложения["ОбменСБанками.Параметры"];
	ВнешнийПодключаемыйМодуль = ?(ТипЗнч(ПараметрыПодсистемыОбменСБанками) = Тип("Соответствие"),
		ПараметрыПодсистемыОбменСБанками.Получить(ИмяКомпонентыiBank2()), Неопределено);

	Попытка
		УстановленПарольСертификата = ВнешнийПодключаемыйМодуль.НеобходимоУстановитьПарольСертификата(СертификатXML) = Ложь;
	Исключение
		УстановленПарольСертификата = Ложь;
	КонецПопытки;

	Возврат УстановленПарольСертификата;
	
КонецФункции

// Вызывается после установки компоненты iBank2
// Параметры:
//    Параметры - Структура
//     * ОО - ОписаниеОповещения - описание процедуры дальнейшей обработки
//     * СоглашениеЭД - СправочникСсылка.СоглашенияОбИспользованииЭД - соглашение с банком
//
Процедура ПослеУстановкиКомпонентыiBank2(Параметры) Экспорт
	
	ВыполнитьОбработкуОповещения(Параметры.ОО, Параметры.Результат);
	
КонецПроцедуры

Процедура ПолучитьВыпискуiBank2(ВнешнийПодключаемыйМодуль, Параметры) Экспорт

	Если ВнешнийПодключаемыйМодуль = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СоглашениеЭД = Параметры.СоглашениеЭД;
	ДанныеСертификатов = ЭлектронныеДокументыСлужебныйВызовСервера.ДанныеСертификатовБанка(СоглашениеЭД);
	
	Устройства = ПодключенныеХранилищаiBank2();
	
	СписокВыбора = Новый Массив;
	Соответствие = Новый Соответствие;
	УстановленПарольСертификата = Ложь;

	Если Устройства.Количество() > 0 Тогда
		Для Каждого ДанныеСертификата ИЗ ДанныеСертификатов Цикл
			ДанныеСертификатаiBank2 = ДанныеСертификатаiBank2(ДанныеСертификата.ДвоичныеДанныеСертификата);
			Если Устройства.Найти(ДанныеСертификатаiBank2.ИдентификаторХранилища) <> Неопределено Тогда
				Соответствие.Вставить(ДанныеСертификата.Сертификат, ДанныеСертификата);
			КонецЕсли;
		КонецЦикла
	Иначе
		ТекстСообщения = Нстр("ru = 'Для выполнения операции необходимо подключить банковский ключ к компьютеру'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат
	КонецЕсли;
	
	Параметры.Вставить("СоотвСертификатовИИхСтруктур", Соответствие);
	Параметры.Вставить("ДанныеСертификатов", ДанныеСертификатов);
	
	ВидОперации = НСтр("ru = 'Аутентификация на ресурсе банка'");
	Если Не УстановленПарольСертификата Тогда
		Если Соответствие.Количество() > 0 Тогда
			Если НЕ ПарольКСертификатуПолучен2(Соответствие, ВидОперации) Тогда
				ОО = Новый ОписаниеОповещения("ПродолжитьПолучениеВыпискиПослеВводаПароляСертификатаiBank2", ЭтотОбъект, Параметры);
				Параметры.Вставить("ВызватьОповещение", ОО);
				ПолучитьПарольКСертификату(Соответствие, ВидОперации, , , Параметры);
				Возврат;
			КонецЕсли;
		Иначе
			ТекстСообщения = Нстр("ru = 'К компьютеру подключен не подходящий банковский ключ'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПродолжитьПолучениеВыпискиПослеВводаПароляСертификатаiBank2(Неопределено, Параметры)
	
КонецПроцедуры


//Получает массив идентификаторов хранилищ, подключенных к компьютеру
//
// Возвращаемое значение:
//  Массив - идентификаторы хранилищ
//
Функция ПодключенныеХранилищаiBank2() Экспорт
	
	ПараметрыПодсистемыОбменСБанками = ПараметрыПриложения["ОбменСБанками.Параметры"];
	ВнешнийПодключаемыйМодуль = ?(ТипЗнч(ПараметрыПодсистемыОбменСБанками) = Тип("Соответствие"),
		ПараметрыПодсистемыОбменСБанками.Получить(ИмяКомпонентыiBank2()), Неопределено);
	
	Попытка
		УстройстваXML = ВнешнийПодключаемыйМодуль.ХранилищаСертификатов();
		Устройства = ДеСериализованныеДанные(УстройстваXML);
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка при поиске подключенных хранилищ.
		                          |Код ошибки: %1
		                          |%2'");
		ДеталиОшибки = ИнформацияОбОшибкеiBank2();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ШаблонОшибки, ДеталиОшибки.Код, ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Поиск хранилищ'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
							Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
		Возврат Неопределено;
	КонецПопытки;
	
	Если Устройства.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не найдено ни одного хранилища.
									|Убедитесь, что устройство подключено к компьютеру и повторите операцию'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат Устройства;
	
КонецФункции

Процедура ОтправитьПакетыiBank2(АутентификацияВыполнена, Параметры) Экспорт
	
	Если АутентификацияВыполнена = Истина Тогда
		ДокументыКОтправке = Новый Массив;
		МассивОтправленныхЭД = Новый Массив;
		
		Для Каждого Документ Из Параметры.ОтправляемыеПакетыiBank2 Цикл
			СтруктураОтправки = Новый Структура;
			СтруктураОтправки.Вставить("Ключ",                Документ.Значение.Ключ);
			СтруктураОтправки.Вставить("ЭлектронныйДокумент", Документ.Значение.ПлатежноеПоручение);
			СтруктураОтправки.Вставить("СхемаДанных",         ПолучитьИзВременногоХранилища(Документ.Значение.СлужебныеДанные));
			СтруктураОтправки.Вставить("Подписи",             Новый Массив);
		
			Для Каждого СтрокаДанныеПодписи Из Документ.Значение.Подписи Цикл
				Подпись = ПолучитьИзВременногоХранилища(СтрокаДанныеПодписи.АдресПодписи);
				ДанныеПодписи = Новый Структура("Сертификат, Подпись", СтрокаДанныеПодписи.Сертификат, Подпись);
				СтруктураОтправки.Подписи.Добавить(ДанныеПодписи);
			КонецЦикла;
			ДокументыКОтправке.Добавить(СтруктураОтправки);
		КонецЦикла;
		
		СтруктураОтправки = Новый Структура();
		СтруктураОтправки.Вставить("Документы",         ДокументыКОтправке);
		СтруктураОтправки.Вставить("ВерсияСхемыДанных", "1.07");

		Результат = ОтправитьЗапросiBank2("3", СтруктураОтправки);
		
		Если НЕ Результат = Неопределено Тогда
			КоличествоОтправленных = Результат.Количество();
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьОтветБанка(Параметры.ОтправляемыеПакетыiBank2, Результат);
			Параметры.ИтогКолОтправленных = Параметры.ИтогКолОтправленных + КоличествоОтправленных;
		КонецЕсли;
	КонецЕсли;
	
	ПродолжитьРекурсивноОтправкуПакетовiBank2(Параметры);
	
КонецПроцедуры

// Отправляет запрос в банк
//
// Параметры
//  ТипЗапроса  - Строка - тип запроса
//  ДанныеОтправки  - Структура - данные для отправки
//
// Возвращаемое значение:
//  Соответствие или Неопределено - результат выполнения
//
Функция ОтправитьЗапросiBank2(ТипЗапроса, ДанныеОтправки) Экспорт
	
	ПараметрыПодсистемыОбменСБанками = ПараметрыПриложения["ОбменСБанками.Параметры"];
	ВнешнийПодключаемыйМодуль = ?(ТипЗнч(ПараметрыПодсистемыОбменСБанками) = Тип("Соответствие"),
		ПараметрыПодсистемыОбменСБанками.Получить(ИмяКомпонентыiBank2()), Неопределено);
	
	Попытка
		ДанныеОтправкиXML = СериализованныеДанные(ДанныеОтправки);
		РезультатXML = ВнешнийПодключаемыйМодуль.ОтправитьЗапрос(ТипЗапроса, ДанныеОтправкиXML);
		Результат = ДеСериализованныеДанные(РезультатXML);
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка отправки данных.
									|Код ошибки: %1
									|%2'");
		ДеталиОшибки = ИнформацияОбОшибкеiBank2();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ШаблонОшибки, ДеталиОшибки.Код, ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Отправка данных'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
							Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
	КонецПопытки;
	
	Возврат Результат

КонецФункции 

// Проверяет необходимость установки пин-кода
//
// Параметры:
//  ИдентификаторХранилища  - Строка - идентификатор хранилища
//
// Возвращаемое значение:
//   Булево, Неопределено - Истина - пин-код уже установлен или не требуется,
//                          Ложь - требуется установка пин кода и он не установлен,
//                          Неопределено - произошла ошибка при определении необходимости пин-кода
//
Функция НеобходимоУстановитьPINКодХранилищаiBank2(ИдентификаторХранилища) Экспорт
	
	ПараметрыПодсистемыОбменСБанками = ПараметрыПриложения["ОбменСБанками.Параметры"];
	ВнешнийПодключаемыйМодуль = ?(ТипЗнч(ПараметрыПодсистемыОбменСБанками) = Тип("Соответствие"),
		ПараметрыПодсистемыОбменСБанками.Получить(ИмяКомпонентыiBank2()), Неопределено);
	
	Попытка
		ТребуетсяПИН = ВнешнийПодключаемыйМодуль.НеобходимоУстановитьPINКодХранилища(ИдентификаторХранилища);
	Исключение
		ОчиститьСообщения();
		ШаблонОшибки = НСтр("ru = 'Ошибка проверки необходимости ввода PIN-кода.
								|Код ошибки: %1
								|%2'");
		ДеталиОшибки = ИнформацияОбОшибкеiBank2();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ШаблонОшибки, ДеталиОшибки.Код, ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Проверка необходимости ввода PIN-кода'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
			Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ТребуетсяПИН;
		
КонецФункции

Процедура УстановитьPINКод(PINКод, Параметры) Экспорт
	
	ПрерватьПодписание = Истина;
	Если PINКод <> Неопределено Тогда
		Если УстановитьPINКодХранилищаiBank2(Параметры.ИдентификаторХранилища, PINКод) Тогда
			ПрерватьПодписание = Ложь;
			ПродолжитьПодписаниеiBank2(Параметры)
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеПодписатьЭД = Неопределено;
	Если ПрерватьПодписание
		И Параметры.Свойство("ОбработчикПродолжения", ОписаниеПодписатьЭД)
		И ТипЗнч(ОписаниеПодписатьЭД) = Тип("ОписаниеОповещения") Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеПодписатьЭД);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПодписаниеiBank2(ВнешнийПодключаемыйМодуль, Параметры) Экспорт
	
	Если Параметры.Свойство("ПараметрыВК") Тогда
		// Удалим из структуры параметры, использованные для подключения внешней компоненты:
		Параметры.Удалить("ПараметрыВК");
	КонецЕсли;
	ОписаниеПодписатьЭД = Неопределено;
	Параметры.Свойство("ОбработчикПродолжения", ОписаниеПодписатьЭД);
	ПрерватьПодписание = Ложь;
	Если ВнешнийПодключаемыйМодуль <> Неопределено Тогда
		СтруктураСертификата = Параметры.СтруктураСертификата;
		
		МассивЭДДляПроверки = Новый Массив;
		
		РеквизитыСертификата = ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыСертификата(
														СтруктураСертификата.СертификатПодписи);
		СертификатXML = РеквизитыСертификата.ДвоичныеДанныеСертификата;
		Параметры.Вставить("СертификатXMLiBank2", СертификатXML);
		
		ДанныеСертификата = ДанныеСертификатаiBank2(СертификатXML);
		Если ДанныеСертификата = Неопределено Тогда
			ПрерватьПодписание = Истина;
		Иначе
			Параметры.Вставить("ИдентификаторХранилища", ДанныеСертификата.ИдентификаторХранилища);
			
			ТребуетсяУстановкаPINКода = НеобходимоУстановитьPINКодХранилищаiBank2(Параметры.ИдентификаторХранилища);
			Если ТребуетсяУстановкаPINКода = Истина Тогда
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("СоглашениеЭД", Параметры.СоглашениеЭД);
				ПараметрыФормы.Вставить("ИдентификаторХранилища", Параметры.ИдентификаторХранилища);
				ИмяФормы = "Обработка.ОбменЭлектроннымиДокументамиСБанком.Форма.ЗапросPINКода";
				ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьPINКод", ЭтотОбъект, Параметры);
				ОткрытьФорму(ИмяФормы, ПараметрыФормы, , , , , ОписаниеОповещения);
			ИначеЕсли ТребуетсяУстановкаPINКода <> Неопределено Тогда
				ПродолжитьПодписаниеiBank2(Параметры);
			Иначе
				ПрерватьПодписание = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПрерватьПодписание И ТипЗнч(ОписаниеПодписатьЭД) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(ОписаниеПодписатьЭД);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПродолжитьПодписаниеiBank2(Параметры)
	
	СертификатXML = Параметры.СертификатXMLiBank2;
	СтруктураСертификата = Параметры.СтруктураСертификата;
	СоглашениеЭД = Параметры.СоглашениеЭД;
	МассивЭДДляПодписиiBank2 = Параметры.МассивЭДКПодписи;
	
	ПарольУстановлен = УстановитьПарольСертификатаiBank2(СертификатXML, СтруктураСертификата.ПарольПользователя);
	
	ПрерватьПодписание = Истина;
	Если ПарольУстановлен Тогда
		ДанныеОбработки = ЭлектронныеДокументыСлужебныйВызовСервера.ДанныеДляФормированияЭПЧерезДопОбработку(
																					МассивЭДДляПодписиiBank2);
		Параметры.Вставить("ДанныеДляПодписиiBank2", ДанныеОбработки);
		
		НужнаАутентификация = (ДанныеОбработки.МассивЭДБезСхем.Количество() > 0);
		Если НужнаАутентификация Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ПодписаниеЭДiBank2", ЭтотОбъект, Параметры);
			УстановитьСоединениеiBank2(СоглашениеЭД, СертификатXML, ОписаниеОповещения);
		Иначе
			ПодписаниеЭДiBank2(Истина, Параметры);
		КонецЕсли;
		ПрерватьПодписание = Ложь;
	КонецЕсли;
	
	ОписаниеПодписатьЭД = Неопределено;
	Если ПрерватьПодписание И Параметры.Свойство("ОбработчикПродолжения", ОписаниеПодписатьЭД)
		И ТипЗнч(ОписаниеПодписатьЭД) = Тип("ОписаниеОповещения") Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеПодписатьЭД);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодписаниеЭДiBank2(АутентификацияВыполнена, Параметры) Экспорт
	
	ПрерватьПодписание = Ложь;
	Если АутентификацияВыполнена = Истина Тогда
		ПараметрыПодсистемыОбменСБанками = ПараметрыПриложения["ОбменСБанками.Параметры"];
		
		//Параметры.Удалить("НеВыводитьИнформациюОбОбработанныхЭД");
		СоглашениеЭД = Параметры.СоглашениеЭД;
		СтруктураСертификата = Параметры.СтруктураСертификата;
		СертификатXML = Параметры.СертификатXMLiBank2;
		ДанныеОбработки = Параметры.ДанныеДляПодписиiBank2;

		ВнешнийПодключаемыйМодуль = ?(ТипЗнч(ПараметрыПодсистемыОбменСБанками) = Тип("Соответствие"),
			ПараметрыПодсистемыОбменСБанками.Получить(ИмяКомпонентыiBank2()), Неопределено);
		
		Если ДанныеОбработки.МассивТекстовыхДанныхЭД.Количество() > 0 Тогда
			Попытка
				МассивТекстовыхДанныхЭДXML = СериализованныеДанные(ДанныеОбработки.МассивТекстовыхДанныхЭД);
				МассивНовыхСхемДанныхXML = ВнешнийПодключаемыйМодуль.СхемаДанных(МассивТекстовыхДанныхЭДXML);
				МассивНовыхСхемДанных = ДеСериализованныеДанные(МассивНовыхСхемДанныхXML);
				ЭлектронныеДокументыСлужебныйВызовСервера.СохранитьСхемыДанных(
					СоглашениеЭД, ДанныеОбработки.МассивЭДБезСхем, МассивНовыхСхемДанных);
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДанныеОбработки.МассивДанныхСхем,  МассивНовыхСхемДанных);
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДанныеОбработки.МассивЭДСоСхемами, ДанныеОбработки.МассивЭДБезСхем);
			Исключение
				ШаблонОшибки = НСтр("ru = 'Ошибка получения схемы данных.
											|Код ошибки: %1
											|%2'");
				ДеталиОшибки = ИнформацияОбОшибкеiBank2();
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									ШаблонОшибки, ДеталиОшибки.Код, ДеталиОшибки.Сообщение);
				Операция = НСтр("ru = 'Получение схемы данных'");
				ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
									Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
				ПрерватьПодписание = Истина;
			КонецПопытки;
		КонецЕсли;
		
		Если НЕ ПрерватьПодписание Тогда
			ДанныеПодписей = Новый Соответствие;
			КоличествоЭД = ДанныеОбработки.МассивЭДСоСхемами.Количество();
			Попытка
				МассивДанныхСхемXML = СериализованныеДанные(ДанныеОбработки.МассивДанныхСхем);
				МассивПодписейXML = ВнешнийПодключаемыйМодуль.Подписать(СертификатXML, МассивДанныхСхемXML);
				МассивПодписей = ДеСериализованныеДанные(МассивПодписейXML);
				
				ЭлектронныеДокументыСлужебныйВызовСервера.СохранитьДанныеПодписей(
					ДанныеОбработки.МассивЭДСоСхемами, МассивПодписей, СтруктураСертификата.СертификатПодписи);
				
				Параметры.Вставить("ИтогКолПодписанных", МассивПодписей.Количество());
				
				Параметры.Вставить("МассивЭДДляПроверкиiBank2", Параметры.МассивЭДКПодписи);
				
				НачатьПроверкуСтатусовПодписейiBank2(Параметры);
			Исключение
				ШаблонОшибки = НСтр("ru = 'Ошибка подписания документов.
											|Код ошибки: %1
											|%2'");
				ДеталиОшибки = ИнформацияОбОшибкеiBank2();
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									ШаблонОшибки, ДеталиОшибки.Код, ДеталиОшибки.Сообщение);
				Операция = НСтр("ru = 'Подписание документов'");
				ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
									Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
				ПрерватьПодписание = Истина;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеПодписатьЭД = Неопределено;
	Если (ПрерватьПодписание ИЛИ АутентификацияВыполнена <> Истина)
		И Параметры.Свойство("ОбработчикПродолжения", ОписаниеПодписатьЭД)
		И ТипЗнч(ОписаниеПодписатьЭД) = Тип("ОписаниеОповещения") Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеПодписатьЭД);
	КонецЕсли;
	
КонецПроцедуры

// Осуществляет проверку валидности подписей
//
// Параметры
//  Параметры - Структура - содержит параметры обработки
//
Процедура НачатьПроверкуСтатусовПодписейiBank2(Параметры) Экспорт
	
	ДоступноеХранилище = ДоступноеХранилищеiBank2();
	Если НЕ ЗначениеЗаполнено(ДоступноеХранилище) Тогда
		ОО = Новый ОписаниеОповещения("ВыполнитьПроверкуСтатусовПодписейiBank2", ЭтотОбъект, Параметры);
		ВыбратьХранилищеiBank2(Параметры.СоглашениеЭД, ОО);
	Иначе
		ВыполнитьПроверкуСтатусовПодписейiBank2(ДоступноеХранилище, Параметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьПроверкуСтатусовПодписейiBank2(ДоступноеХранилище, Параметры) Экспорт
	
	ПараметрыПодсистемыОбменСБанками = ПараметрыПриложения["ОбменСБанками.Параметры"];
	
	ВнешнийПодключаемыйМодуль = ?(ТипЗнч(ПараметрыПодсистемыОбменСБанками) = Тип("Соответствие"),
		ПараметрыПодсистемыОбменСБанками.Получить(ИмяКомпонентыiBank2()), Неопределено);
	
	МассивЭД = Параметры.МассивЭДДляПроверкиiBank2;
	МассивСтруктурЭД = ЭлектронныеДокументыСлужебныйВызовСервера.МассивСтруктурСодержимогоЭД(МассивЭД);
	СоответствиеРезультатов = Новый Соответствие;
	Для Каждого СтруктураЭД Из МассивСтруктурЭД Цикл
		РезультатПроверки = Новый Массив;
		Для Каждого СтрокаЭП Из СтруктураЭД.Подписи Цикл
			СтруктураЗаписи = Новый Структура("НомерСтроки", СтрокаЭП.НомерСтроки);
			Попытка
				ДвоичныеДанныеЭП = СтрокаЭП.Подпись;
				СертификатXML = СтрокаЭП.Сертификат;
				ДопПараметры = Новый Структура("ИдентификаторХранилища", ДоступноеХранилище);
				ДанныеЭДXML = СериализованныеДанные(СтруктураЭД.ДанныеЭД);
				ДвоичныеДанныеЭПXML = СериализованныеДанные(ДвоичныеДанныеЭП);
				ДопПараметрыXML = СериализованныеДанные(ДопПараметры);
				ПодписьВалидна = ВнешнийПодключаемыйМодуль.ПроверитьПодпись(
					СертификатXML, ДанныеЭДXML, ДвоичныеДанныеЭПXML, ДопПараметрыXML);
				СтруктураЗаписи.Вставить("Результат", ПодписьВалидна);
				РезультатПроверки.Добавить(СтруктураЗаписи);
			Исключение
				ШаблонОшибки = НСтр("ru = 'Ошибка проверки подписи.
										|Код ошибки: %1
										|%2'");
				ДеталиОшибки = ИнформацияОбОшибкеiBank2();
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									ШаблонОшибки, ДеталиОшибки.Код, ДеталиОшибки.Сообщение);
				Операция = НСтр("ru = 'Проверка подписи'");
				ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
									Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
			КонецПопытки;
		КонецЦикла;
		СоответствиеРезультатов.Вставить(СтруктураЭД.ЭД, РезультатПроверки);
	КонецЦикла;
	
	Если СоответствиеРезультатов.Количество() > 0 Тогда
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьМассивРезультатовПроверкиПодписей(СоответствиеРезультатов);
	КонецЕсли;
	
	ОписаниеПодписатьЭД = Неопределено;
	Если Параметры.Свойство("ОбработчикПродолжения", ОписаниеПодписатьЭД)
		И ТипЗнч(ОписаниеПодписатьЭД) = Тип("ОписаниеОповещения") Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеПодписатьЭД);
	КонецЕсли;
	
	Если Параметры.Свойство("ОповеститьОПроверкеЭП") Тогда
		Оповестить("ПроведенаПроверкаЭП", МассивЭД);
	КонецЕсли;
	
КонецПроцедуры

//Получает внешний интерфейс внешней компоненты
//
// Параметры:
//   Параметры - Структура:
//     ПараметрыВК - Структура:
//       ВыполняласьПопыткаУстановкиКомпоненты - Булево - признак выполненной ранее попытки установки компоненты.
//       ОбработчикПослеПодключенияКомпоненты  - ОписаниеОповещения - выполняется после попытки подключения компоненты.
//                                               Первым параметром (Результат) передается ПодключаемыйМодуль
//                                               компоненты в случае успешного прдключения, иначе - Неопределено.
//                                               Первым параметром (Результат) передается ПодключаемыйМодуль
//       Адрес                                 - Строка - адрес подключаемой компоненты во временном хранилище.
//       Имя                                   - Строка - имя подключаемой компоненты.
//       Тип                                   - ТипВнешнейКомпоненты.
//       ИмяМодуля                             - Строка - имя модуля подключенной компоненты.
//
Процедура ПодключитьВнешнююКомпонентуБанка(Параметры) Экспорт
	
	ПараметрыВК = Неопределено;
	Если Параметры.Свойство("ПараметрыВК", ПараметрыВК) И ТипЗнч(ПараметрыВК) = Тип("Структура") Тогда

		
		ПодключениеЗавершено = Ложь;
		ПодключаемыйМодуль = Неопределено;
		ПараметрыПодсистемыОбменСБанками = ПараметрыПриложения["ОбменСБанками.Параметры"];
		Если ПараметрыПодсистемыОбменСБанками = Неопределено Тогда
			ПараметрыПриложения.Вставить("ОбменСБанками.Параметры", Новый Соответствие);
			ПараметрыПодсистемыОбменСБанками = ПараметрыПриложения["ОбменСБанками.Параметры"];
		Иначе
			ПодключаемыйМодуль = ПараметрыПодсистемыОбменСБанками.Получить(ПараметрыВК.ИмяМодуля);
		КонецЕсли;
		
		Если ПодключаемыйМодуль = Неопределено Тогда
			АдресВнешнейКомпоненты = ЭлектронныеДокументыСлужебныйВызовСервера.АдресВнешнейКомпонентыБанка(
				Параметры.НастройкаЭДО, ПараметрыВК.ПрограммаБанка);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПодключенияВнешнейКомпонентыБанка", ЭтотОбъект, Параметры);
			Параметры.ПараметрыВК.Вставить("Адрес", АдресВнешнейКомпоненты);
			НачатьПодключениеВнешнейКомпоненты(ОписаниеОповещения, АдресВнешнейКомпоненты, ПараметрыВК.Имя, ПараметрыВК.Тип);
			Возврат;
		КонецЕсли;
		
		ВыполнитьОбработкуОповещения(ПараметрыВК.ОбработчикПослеПодключенияКомпоненты, ПодключаемыйМодуль);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодключитьВнешнююКомпонентуiBank2(Параметры) Экспорт
	
	ОписаниеОповещения = Неопределено;
	Если ТипЗнч(Параметры) = Тип("Структура")
		И Параметры.Свойство("ОбработчикПослеПодключенияКомпоненты", ОписаниеОповещения) Тогда
		Параметры.Удалить("ОбработчикПослеПодключенияКомпоненты");
		ПараметрыВК = Новый Структура;
		ПараметрыВК.Вставить("ОбработчикПослеПодключенияКомпоненты", ОписаниеОповещения);
		ПараметрыВК.Вставить("ИмяМодуля", ИмяКомпонентыiBank2());
		ПараметрыВК.Вставить("Имя", "iBank2DX");
		ПараметрыВК.Вставить("Тип", ТипВнешнейКомпоненты.Native);
		ПараметрыВК.Вставить("ПрограммаБанка", ПредопределенноеЗначение("Перечисление.ПрограммыБанка.iBank2"));
		
		Параметры.Вставить("ПараметрыВК", ПараметрыВК);
		ПодключитьВнешнююКомпонентуБанка(Параметры);
	КонецЕсли;
	
КонецПроцедуры

// Получает информацию о последней возникшей ошибке из компоненты
//
// Возвращаемое значение:
//  Структура - содержит данные:
//    * Код - Строка - код ошибки
//    * Сообщение - Строка - сообщение об ошибке для пользователя
//
Функция ИнформацияОбОшибкеiBank2() Экспорт
	
	ПараметрыПодсистемыОбменСБанками = ПараметрыПриложения["ОбменСБанками.Параметры"];
	Если ПараметрыПодсистемыОбменСБанками <> Неопределено
		И ПараметрыПодсистемыОбменСБанками.Получить(ИмяКомпонентыiBank2()) <> Неопределено Тогда
		
		ВнешнийПодключаемыйМодуль = ПараметрыПодсистемыОбменСБанками.Получить(ИмяКомпонентыiBank2());
		ДеталиОшибкиXML = ВнешнийПодключаемыйМодуль.ДеталиОшибки();
		Возврат ДеСериализованныеДанные(ДеталиОшибкиXML);
	КонецЕсли;
	
КонецФункции

//Предлагает пользователю выбрать хранилище и возвращает результат выбора
//
// Параметры:
//  СоглашениеЭД  - СправочникСсылка.СоглашенияОбИспользованииЭД - ссылка на соглашение с банком
//  ОО - ОписаниеОповещения - описание вызова процедуры программного модуля, который будет осуществлен после выбора хранилища
//
Процедура ВыбратьХранилищеiBank2(СоглашениеЭД, ОО) Экспорт
	
	Хранилища = ПодключенныеХранилищаiBank2();
	
	Если Не Хранилища = Неопределено И Хранилища.Количество() > 0 Тогда
		СтруктураПараметров = Новый Структура("Хранилища, СоглашениеЭД", Хранилища, СоглашениеЭД);
		ОткрытьФорму("Обработка.ОбменЭлектроннымиДокументамиСБанком.Форма.ВыборХранилища", СтруктураПараметров, , , , , ОО);
	Иначе
		ТекстСообщения = Нстр("ru = 'Для выполнения операции необходимо подключить банковский ключ к компьютеру'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли
	
КонецПроцедуры

// Получает данные сертификата в виде структуры
//
// Параметры
//  СертификатXML  - Строка - сертифкат в виде строки
//
// Возвращаемое значение:
//  Структура или Неопределено -  Данные сертификата в виде структуры
//
Функция ДанныеСертификатаiBank2(СертификатXML) Экспорт
	
	ПараметрыПодсистемыОбменСБанками = ПараметрыПриложения["ОбменСБанками.Параметры"];
	ВнешнийПодключаемыйМодуль = ?(ТипЗнч(ПараметрыПодсистемыОбменСБанками) = Тип("Соответствие"),
		ПараметрыПодсистемыОбменСБанками.Получить(ИмяКомпонентыiBank2()), Неопределено);
	
	Попытка
		ДанныеСертификатаXML = ВнешнийПодключаемыйМодуль.ДанныеСертификата(СертификатXML);
		ДанныеСертификата = ДеСериализованныеДанные(ДанныеСертификатаXML);
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка получения данных сертификата.
									|Код ошибки: %1
									|%2'");
		ДеталиОшибки = ИнформацияОбОшибкеiBank2();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ШаблонОшибки, ДеталиОшибки.Код, ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Получение данных сертификата'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
			Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ДанныеСертификата;
	
КонецФункции

Процедура НачатьОтправкуПакетовiBank2(ВнешнийПодключаемыйМодуль, Параметры) Экспорт
	
	Если Параметры.Свойство("ПараметрыВК") Тогда
		// Удалим из структуры параметры, использованные для подключения внешней компоненты:
		Параметры.Удалить("ПараметрыВК");
	КонецЕсли;
	ОбработчикПродолжения = Неопределено;
	Параметры.Свойство("ОбработчикПродолжения", ОбработчикПродолжения);
	ПрерватьОтправку = Истина;
	Если ВнешнийПодключаемыйМодуль <> Неопределено Тогда
		Устройства = ПодключенныеХранилищаiBank2();
		Если Устройства.Количество() = 0 Тогда
			ТекстСообщения = Нстр("ru = 'К компьютеру не подключен банковский ключ для отправки данных по настройке ЭДО: %1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Параметры.СоглашениеЭД);
		Иначе
			Параметры.Вставить("Устройства", Устройства);
			ПродолжитьРекурсивноОтправкуПакетовiBank2(Параметры);
			ПрерватьОтправку = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ПрерватьОтправку И ТипЗнч(ОбработчикПродолжения) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(ОбработчикПродолжения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПродолжитьРекурсивноОтправкуПакетовiBank2(Параметры)
	
	ДанныеОтправки = Параметры.СтруктураДанных.ДанныеДляОтправкиiBank2;
	Если ДанныеОтправки.Количество() > 0 Тогда
		Устройства = Параметры.Устройства;
		Для Каждого КлючЗначение Из ДанныеОтправки Цикл
			Параметры.Вставить("ТекущиеДанныеОтправкиiBank2", КлючЗначение.Значение);
			Сертификаты = КлючЗначение.Значение.Сертификаты;
			СписокВыбораСертификата = Новый Массив;
			
			Для Каждого ДанныеСертификата ИЗ КлючЗначение.Значение.Сертификаты Цикл
				ПарольУстановлен = УстановленПарольСертификатаiBank2(ДанныеСертификата.ДвоичныеДанныеСертификата);
				
				Если ПарольУстановлен Тогда
					ВыбранныйСертификат = ДанныеСертификата.СертификатСсылка;
					Соответствие = Новый Соответствие;
					Соответствие.Вставить(ВыбранныйСертификат, ДанныеСертификата);
					ДанныеСертификата.Вставить("ВыбранныйСертификат", ВыбранныйСертификат);
					Параметры.Вставить("СоотвСертификатовИИхСтруктур", Соответствие);
					Прервать;
				КонецЕсли;
			
				ДанныеСертификатаiBank2 = ДанныеСертификатаiBank2(ДанныеСертификата.ДвоичныеДанныеСертификата);
				Если Устройства.Найти(ДанныеСертификатаiBank2.ИдентификаторХранилища) <> Неопределено Тогда
					СписокВыбораСертификата.Добавить(ДанныеСертификата.СертификатСсылка);
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ ПарольУстановлен Тогда
				Если СписокВыбораСертификата.Количество() = 0 Тогда
					Для Каждого ДанныеСертификата ИЗ Сертификаты Цикл
						СписокВыбораСертификата.Вставить(ДанныеСертификата.СертификатСсылка);
					КонецЦикла;
				КонецЕсли;
				Соответствие = Новый Соответствие;
				Для Каждого Сертификат Из СписокВыбораСертификата Цикл
					СтруктураСертификата = ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыСертификата(Сертификат);
					Соответствие.Вставить(Сертификат, СтруктураСертификата);
				КонецЦикла;
				
				Параметры.Вставить("СоотвСертификатовИИхСтруктур", Соответствие);
				
				Если НЕ ПарольКСертификатуПолучен2(Соответствие, НСтр("ru = 'Аутентификация на ресурсе банка'")) Тогда
					ОООЗ = Новый ОписаниеОповещения(
						"ПродолжитьОтправкуПакетовПослеВводаПароляКСертификатуiBank2", ЭтотОбъект, Параметры);
					Параметры.Вставить("ВызватьОповещение", ОООЗ);
					ПолучитьПарольКСертификату(Соответствие, НСтр("ru = 'Аутентификация на ресурсе банка'"), , , Параметры);
				Иначе
					// В функции ПарольКСертификатуПолучен2() переменная Соответствие переопределяется,
					// поэтому берем первый элемент соответствия - это и будет сертификат, к которому получен пароль:
					Для Каждого Элемент Из Соответствие Цикл
						ДанныеСертификата = Элемент.Значение;
						Прервать;
					КонецЦикла;
					ПарольУстановлен = Истина;
				КонецЕсли;
			КонецЕсли;
			Если ПарольУстановлен Тогда
				ПродолжитьОтправкуПакетовПослеВводаПароляКСертификатуiBank2(ДанныеСертификата, Параметры);
			КонецЕсли;
			Параметры.СтруктураДанных.ДанныеДляОтправкиiBank2.Удалить(КлючЗначение.Ключ);
			Прервать;
		КонецЦикла;
	Иначе
		ОбработчикПродолжения = Неопределено;
		Параметры.Свойство("ОбработчикПродолжения", ОбработчикПродолжения);
		
		Если ТипЗнч(ОбработчикПродолжения) = Тип("ОписаниеОповещения") Тогда
			ВыполнитьОбработкуОповещения(ОбработчикПродолжения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Начинает тест соглашения после подключения внешней компоненты
//
// Параметры:
//  ВнешняяКомпонента - внешняя компонента банка
//  Параметры  - Структура - содержит параметры выполнения метода
//    * ИдентификаторНазначения - Уникальный идентификатор - идентификатор формы для вывода сообщений
//    * СоглашениеЭД - СправочникСсылка.СоглашенияОбИспользованииЭД - соглашение с банком
//
Процедура НачатьТестСоглашенияiBank2(ВнешняяКомпонента, Параметры) Экспорт

	Если ВнешняяКомпонента = Неопределено Тогда
		Возврат
	КонецЕсли;

	РезультатТеста = НСтр("ru = 'Пройден успешно.'");
	
	ИдентификаторНазначения = Параметры.ИдентификаторНазначения;
	ОписаниеТеста = НСтр("ru = 'Тест. Инициализация внешней компоненты банка.'");
	СообщитьПользователю(ОписаниеТеста, ИдентификаторНазначения);
	
	ПараметрыПодсистемыОбменСБанками = ПараметрыПриложения["ОбменСБанками.Параметры"];
	Если ПараметрыПодсистемыОбменСБанками <> Неопределено
		И ПараметрыПодсистемыОбменСБанками.Получить(ИмяКомпонентыiBank2()) <> Неопределено Тогда
		
		СообщитьПользователю(РезультатТеста, ИдентификаторНазначения);

		СоглашениеЭД = Параметры.СоглашениеЭД;
		ДоступныеСертификаты = ЭлектронныеДокументыСлужебныйВызовСервера.ДоступныеСертификаты(СоглашениеЭД);
		
		Параметры = Новый Структура;
		Параметры.Вставить("ИндексТестаСертификата", 0);
		Параметры.Вставить("ДоступныеСертификаты", ДоступныеСертификаты);
		Параметры.Вставить("ИдентификаторНазначения", ИдентификаторНазначения);
		Параметры.Вставить("СоглашениеЭД", СоглашениеЭД);
		
		НачатьТестСертификатовiBank2(Параметры);
	КонецЕсли;

КонецПроцедуры

Процедура ПродолжитьОтправкуПакетовПослеВводаПароляКСертификатуiBank2(Результат, Параметры) Экспорт
	
	ВыбранныйСертификат = Неопределено;
	ПрерватьОбработку = Ложь;
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("ВыбранныйСертификат", ВыбранныйСертификат)
		И ТипЗнч(ВыбранныйСертификат) = Тип("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования") Тогда
		
		ПараметрыСертификата = Параметры.СоотвСертификатовИИхСтруктур[ВыбранныйСертификат];
		ПараметрыСертификата.Вставить("ПарольПолучен", Истина);
		ПараметрыСертификата.Вставить("ПарольПользователя", Результат.ПарольПользователя);
		ПараметрыСертификата.Вставить("ВыбранныйСертификат", ВыбранныйСертификат);
		ПараметрыСертификата.Вставить("Комментарий", "");
		Результат.Свойство("Комментарий", ПараметрыСертификата.Комментарий);
		Параметры.Вставить("СтруктураСертификата", ПараметрыСертификата);
		ТекущиеДанныеОтправкиiBank2 = Параметры.ТекущиеДанныеОтправкиiBank2;
		Для Каждого ДанныеСертификата ИЗ ТекущиеДанныеОтправкиiBank2.Сертификаты Цикл
			Если ДанныеСертификата.СертификатСсылка = ВыбранныйСертификат Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ДанныеСертификатаiBank2 = ДанныеСертификатаiBank2(ДанныеСертификата.ДвоичныеДанныеСертификата);
		Если ДанныеСертификатаiBank2 <> Неопределено Тогда
			Параметры.Вставить("ОтправляемыеПакетыiBank2", ТекущиеДанныеОтправкиiBank2.ДанныеПакетов);
			Параметры.Вставить("ИмяПроцедуры", "ОтправитьПакетыiBank2");
			Параметры.Вставить("Модуль", ЭтотОбъект);
			Параметры.Вставить("ИдентификаторХранилища", ДанныеСертификатаiBank2.ИдентификаторХранилища);

			НеобходимоУстановитьPINКодХранилищаiBank2 = НеобходимоУстановитьPINКодХранилищаiBank2(
													ДанныеСертификатаiBank2.ИдентификаторХранилища);
														
			Если НеобходимоУстановитьPINКодХранилищаiBank2 = Неопределено Тогда
				ПрерватьОбработку = Истина;
			ИначеЕсли НеобходимоУстановитьPINКодХранилищаiBank2 Тогда
				ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(
					"ПродолжитьОтправкуПакетовПослеВводаPINКодаiBank2", ЭтотОбъект, Параметры);
				НачатьУстановкуPINКодаХранилища(
					Параметры.СоглашениеЭД, ДанныеСертификатаiBank2.ИдентификаторХранилища, ОписаниеОповещенияОЗакрытии);
				Возврат;
			Иначе
				ПродолжитьОтправкуПакетовiBank2(Параметры);
			КонецЕсли;
		Иначе
			ПрерватьОбработку = Истина;
		КонецЕсли;
	КонецЕсли;
	Если ПрерватьОбработку Тогда
		ПродолжитьРекурсивноОтправкуПакетовiBank2(Параметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПродолжитьОтправкуПакетовПослеВводаPINКодаiBank2(PINКод, Параметры) Экспорт
	
	Если PINКод <> Неопределено Тогда
		PINУстановлен = УстановитьPINКодХранилищаiBank2(Параметры.ИдентификаторХранилища, PINКод);
		Если PINУстановлен Тогда
			ПродолжитьОтправкуПакетовiBank2(Параметры);
		Иначе
			ПродолжитьРекурсивноОтправкуПакетовiBank2(Параметры);
		КонецЕсли;
	Иначе
		ПродолжитьРекурсивноОтправкуПакетовiBank2(Параметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПродолжитьПолучениеВыпискиПослеВводаPINКодаiBank2(PINКод, Параметры) Экспорт
	
	Если PINКод = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	PINУстановлен = УстановитьPINКодХранилищаiBank2(Параметры.ИдентификаторХранилища, PINКод);
	
	Если Не PINУстановлен Тогда
		Возврат;
	КонецЕсли;
	
	ПродолжитьПолучениеВыпискиiBank2(Параметры);
	
КонецПроцедуры

Процедура ПродолжитьПолучениеВыпискиПослеВводаПароляСертификатаiBank2(Результат, Параметры) Экспорт
	
	ВыбранныйСертификат = Неопределено;
	СоотвСертификатовИИхСтруктур = Неопределено;
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("ВыбранныйСертификат", ВыбранныйСертификат)
		И ТипЗнч(ВыбранныйСертификат) = Тип("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования") Тогда
		
		ДанныеСертификатов = Параметры.ДанныеСертификатов;
		
		Для Каждого ДанныеСертификата ИЗ ДанныеСертификатов Цикл
			Если ДанныеСертификата.Сертификат = ВыбранныйСертификат Тогда
				ДанныеСертификата.Вставить("ПарольПолучен", Истина);
				ДанныеСертификата.Вставить("ПарольПользователя", Результат.ПарольПользователя);
				ДанныеСертификата.Вставить("ВыбранныйСертификат", ВыбранныйСертификат);
				ДанныеСертификата.Вставить("Комментарий", "");
				Результат.Свойство("Комментарий", ДанныеСертификата.Комментарий);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ДанныеСертификатаiBank2 = ДанныеСертификатаiBank2(ДанныеСертификата.ДвоичныеДанныеСертификата);
		Если ДанныеСертификатаiBank2 <> Неопределено Тогда
			Параметры.Вставить("ИмяПроцедуры", "ПродолжитьПолучениеВыписки");
			Параметры.Вставить("Модуль", ЭтотОбъект);
			Параметры.Вставить("ДанныеСертификата", ДанныеСертификата);
			Параметры.Вставить("ПарольПользователя", Результат.ПарольПользователя);
			Параметры.Вставить("ИдентификаторХранилища", ДанныеСертификатаiBank2.ИдентификаторХранилища);
			
			ТребуетсяУстановкаPINКода = НеобходимоУстановитьPINКодХранилищаiBank2(ДанныеСертификатаiBank2.ИдентификаторХранилища);
				
			Если ТребуетсяУстановкаPINКода = Ложь Тогда
				ПродолжитьПолучениеВыпискиiBank2(Параметры)
			ИначеЕсли ТребуетсяУстановкаPINКода Тогда
				ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(
					"ПродолжитьПолучениеВыпискиПослеВводаPINКодаiBank2", ЭтотОбъект, Параметры);
				НачатьУстановкуPINКодаХранилища(
					Параметры.СоглашениеЭД, ДанныеСертификатаiBank2.ИдентификаторХранилища, ОписаниеОповещенияОЗакрытии);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПродолжитьТестСоглашенияiBank2(Параметры)
	
	ИдентификаторНазначения = Параметры.ИдентификаторНазначения;
	СертификатXML = Параметры.СертификатXML;
	ПарольПользователя = Параметры.ПарольПользователя;
	СоглашениеЭД = Параметры.СоглашениеЭД;
	ПараметрыПодсистемыОбменСБанками = ПараметрыПриложения["ОбменСБанками.Параметры"];
	ВнешнийПодключаемыйМодуль = ?(ТипЗнч(ПараметрыПодсистемыОбменСБанками) = Тип("Соответствие"),
		ПараметрыПодсистемыОбменСБанками.Получить(ИмяКомпонентыiBank2()), Неопределено);
	
	РезультатТеста = НСтр("ru = 'Пройден успешно.'");
	
	Если Параметры.Свойство("УстановленPINКод") Тогда
		СообщитьПользователю(РезультатТеста, ИдентификаторНазначения);
	КонецЕсли;
	
	// Блок проверка авторизации на ресурсе банка.
	ОписаниеТеста = НСтр("ru = 'Тест. Аутентификация на ресурсе банка.'");
	СообщитьПользователю(ОписаниеТеста, ИдентификаторНазначения);
	ВидОперации = НСтр("ru = 'Аутентификация на ресурсе банка'");
	Попытка
		ВнешнийПодключаемыйМодуль.УстановитьПарольСертификата(СертификатXML, ПарольПользователя);
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка авторизации на ресурсе банка.
									|Код ошибки: %1
									|%2'");
		ДеталиОшибки = ИнформацияОбОшибкеiBank2();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ШаблонОшибки, ДеталиОшибки.Код, ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Аутентификация на ресурсе банка'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
			Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
		Возврат;
	КонецПопытки;
	СообщитьПользователю(РезультатТеста, ИдентификаторНазначения);
	
	// Блок проверка установки соединения с банком.
	ОписаниеТеста = НСтр("ru = 'Тест. Установка соединения с банком.'");
	СообщитьПользователю(ОписаниеТеста, ИдентификаторНазначения);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжитьТестСоглашенияПослеАутентификацииiBank2", ЭтотОбъект, Параметры);
	УстановитьСоединениеiBank2(СоглашениеЭД, СертификатXML, ОписаниеОповещения);
	
КонецПроцедуры

Процедура ПродолжитьТестСоглашенияПослеАутентификацииiBank2(АутентификацияВыполнена, Параметры) Экспорт
	
	ИдентификаторНазначения = Параметры.ИдентификаторНазначения;
	ПараметрыСертификата = Параметры.ПараметрыСертификата;
	СертификатXML = Параметры.СертификатXML;
	ДанныеСертификата = Параметры.ДанныеСертификата;
	
	Если Не АутентификацияВыполнена = Истина Тогда
		Возврат;
	КонецЕсли;
	
	РезультатТеста = НСтр("ru = 'Пройден успешно.'");

	СообщитьПользователю(РезультатТеста, ИдентификаторНазначения);
		
	// Блок проверка установки подписи для данных.
	ОписаниеТеста = НСтр("ru = 'Тест. Установка подписи.'");
	СообщитьПользователю(ОписаниеТеста, ИдентификаторНазначения);
	ОтпечатокBase64 = ЭлектронныеДокументыСлужебныйВызовСервера.СтрокаBase64БезBOM(ПараметрыСертификата.Отпечаток);
	ДвоичныеДанные = Base64Значение(ОтпечатокBase64);
	МассивПодписи = Новый Массив;
	МассивПодписи.Добавить(ДвоичныеДанные);
	ПараметрыПодписи = Новый Структура("Пароль", ПараметрыСертификата.ПарольПользователя);
	ПараметрыПодсистемыОбменСБанками = ПараметрыПриложения["ОбменСБанками.Параметры"];
	ВнешнийПодключаемыйМодуль = ?(ТипЗнч(ПараметрыПодсистемыОбменСБанками) = Тип("Соответствие"),
		ПараметрыПодсистемыОбменСБанками.Получить(ИмяКомпонентыiBank2()), Неопределено);
		
	Попытка
		МассивПодписиXML = СериализованныеДанные(МассивПодписи);
		МассивПодписейXML = ВнешнийПодключаемыйМодуль.Подписать(СертификатXML, МассивПодписиXML);
		МассивПодписей = ДеСериализованныеДанные(МассивПодписейXML);
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка установки подписи.
									|Код ошибки: %1
									|%2'");
		ДеталиОшибки = ИнформацияОбОшибкеiBank2();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ШаблонОшибки, ДеталиОшибки.Код, ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Установка подписии'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
							Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
		Возврат;
	КонецПопытки;
	СообщитьПользователю(РезультатТеста, ИдентификаторНазначения);
	
	// Блок проверка подписи.
	ОписаниеТеста = НСтр("ru = 'Тест. Проверка подписи.'");
	СообщитьПользователю(ОписаниеТеста, ИдентификаторНазначения);
	Попытка
		ДопПараметры = Новый Структура("ИдентификаторХранилища", ДанныеСертификата.ИдентификаторХранилища);
		ДопПараметрыXML = СериализованныеДанные(ДопПараметры);
		ДвоичныеДанныеXML = СериализованныеДанные(ДвоичныеДанные);
		ПодписьXML = СериализованныеДанные(МассивПодписей[0]);
		ПодписьВалидна = ВнешнийПодключаемыйМодуль.ПроверитьПодпись(
			СертификатXML, ДвоичныеДанныеXML, ПодписьXML, ДопПараметрыXML);
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка проверки подписи.
								|Код ошибки: %1
								|%2'");
		ДеталиОшибки = ИнформацияОбОшибкеiBank2();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонОшибки, ДеталиОшибки.Код, ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Проверка подписи'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
							Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
		Возврат;
	КонецПопытки;
	Если НЕ ПодписьВалидна Тогда
		СообщитьПользователю(НСтр("ru = 'Подпись не валидна'"), ИдентификаторНазначения);
		Возврат;
	КонецЕсли;
	СообщитьПользователю(РезультатТеста, ИдентификаторНазначения);

	НачатьТестСертификатовiBank2(Параметры);
	
КонецПроцедуры

Процедура ПродолжитьТестСоглашенияПослеВводаPINКодаiBank2(PINКод, Параметры) Экспорт

	Если PINКод = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПинКодУстановлен = УстановитьPINКодХранилищаiBank2(Параметры.ИдентификаторХранилища, PINКод);
	
	Если Не ПинКодУстановлен Тогда
		Возврат;
	КонецЕсли;
	
	ПродолжитьТестСоглашенияiBank2(Параметры)
	
КонецПроцедуры

Процедура ПродолжитьТестСоглашенияПослеВводаПароляКСертификатуiBank2(ПараметрВозврата, Параметры) Экспорт
	
	ИдентификаторНазначения = Параметры.ИдентификаторНазначения;
	
	Если Параметры.СоотвСертификатовИИхСтруктур.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не введен пароль для сертификата.
									|Тест прерван.'");
		СообщитьПользователю(ТекстСообщения, ИдентификаторНазначения);
		Возврат;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из Параметры.СоотвСертификатовИИхСтруктур Цикл
		ПараметрыСертификата = КлючИЗначение.Значение;
		ПарольПользователя = ПараметрыСертификата.ПарольПользователя;
		ВыбранныйСертификат = КлючИЗначение.Ключ;
		Прервать;
	КонецЦикла;

	СоглашениеЭД = Параметры.СоглашениеЭД;
	
	РезультатТеста = НСтр("ru = 'Пройден успешно.'");
	
	СертификатXML = ПараметрыСертификата.ДвоичныеДанныеСертификата;
		
	// Блок чтения данных сертификата.
	ОписаниеТеста = НСтр("ru = 'Тест. Чтение данных сертификата.'");
	СообщитьПользователю(ОписаниеТеста, ИдентификаторНазначения);
	ДанныеСертификата = ДанныеСертификатаiBank2(СертификатXML);
	Если ДанныеСертификата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СообщитьПользователю(РезультатТеста, ИдентификаторНазначения);
	
	// Блок проверка наличия установленного PIN-кода.
	ОписаниеТеста = НСтр("ru = 'Тест. Проверка наличия PIN-кода на хранилище.'");
	СообщитьПользователю(ОписаниеТеста, ИдентификаторНазначения);
	ТребуетсяПИН = НеобходимоУстановитьPINКодХранилищаiBank2(ДанныеСертификата.ИдентификаторХранилища);
	Если ТребуетсяПИН = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СообщитьПользователю(РезультатТеста, ИдентификаторНазначения);
	
	Параметры.Вставить("СертификатXML", СертификатXML);
	Параметры.Вставить("ПарольПользователя", ПарольПользователя);
	Параметры.Вставить("ДанныеСертификата", ДанныеСертификата);
	Параметры.Вставить("ИмяПроцедуры", "ПродолжитьТестСоглашенияПослеАутентификацииiBank2");
	Параметры.Вставить("Модуль", ЭтотОбъект);
	Параметры.Вставить("ПараметрыСертификата", ПараметрыСертификата);
	Параметры.Вставить("ИдентификаторХранилища", ДанныеСертификата.ИдентификаторХранилища);
	
	// Блок проверка установки PIN-кода.
	Если ТребуетсяПИН Тогда
		ОписаниеТеста = НСтр("ru = 'Тест. Установка PIN-кода на хранилище.'");
		СообщитьПользователю(ОписаниеТеста, ИдентификаторНазначения);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ИдентификаторХранилища", ДанныеСертификата.ИдентификаторХранилища);
		ПараметрыФормы.Вставить("СоглашениеЭД", СоглашениеЭД);
		Параметры.Вставить("УстановленPINКод");
		ОООЗ = Новый ОписаниеОповещения("ПродолжитьТестСоглашенияПослеВводаPINКодаiBank2", ЭтотОбъект, Параметры);
		ОткрытьФорму("Обработка.ОбменЭлектроннымиДокументамиСБанком.Форма.ЗапросPINКода", ПараметрыФормы, , , , , ОООЗ);
		Возврат;
	КонецЕсли;
	ПродолжитьТестСоглашенияiBank2(Параметры);
	
КонецПроцедуры

Процедура ПродолжитьПолучениеВыпискиiBank2(Параметры)
	
	ДанныеСертификата = Параметры.ДанныеСертификата;
	ПарольПользователя = Параметры.ПарольПользователя;
	
	ПарольУстановлен = УстановитьПарольСертификатаiBank2(ДанныеСертификата.ДвоичныеДанныеСертификата, ПарольПользователя);
	Если НЕ ПарольУстановлен Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжитьПолучениеВыписки", ЭтотОбъект, Параметры);
	УстановитьСоединениеiBank2(Параметры.СоглашениеЭД, ДанныеСертификата.ДвоичныеДанныеСертификата, ОписаниеОповещения);
	
КонецПроцедуры

Процедура ПродолжитьОтправкуПакетовiBank2(Параметры)
	
	СтруктураСертификата = Параметры.СтруктураСертификата;
	ПарольПользователя = СтруктураСертификата.ПарольПользователя;
	СоглашениеЭД = Параметры.СоглашениеЭД;
	СертификатXMLiBank2 = СтруктураСертификата.ДвоичныеДанныеСертификата;
	
	ПарольУстановлен = УстановитьПарольСертификатаiBank2(СертификатXMLiBank2, ПарольПользователя);
	Если ПарольУстановлен Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьПакетыiBank2", ЭтотОбъект, Параметры);
		УстановитьСоединениеiBank2(СоглашениеЭД, СертификатXMLiBank2, ОписаниеОповещения);
	Иначе
		ПродолжитьРекурсивноОтправкуПакетовiBank2(Параметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьТестСертификатовiBank2(Параметры)
	
	ДоступныеСертификаты = Параметры.ДоступныеСертификаты;
	ИдентификаторНазначения = Параметры.ИдентификаторНазначения;
	СоглашениеЭД = Параметры.СоглашениеЭД;
	РезультатТеста = НСтр("ru = 'Пройден успешно.'");
	
	ТекущийИндекс = 0;
	Для Каждого Элемент ИЗ ДоступныеСертификаты Цикл
		
		ТекущийИндекс = ТекущийИндекс + 1;
		Если ТекущийИндекс <= Параметры.ИндексТестаСертификата Тогда
			Продолжить;
		КонецЕсли;
		Параметры.ИндексТестаСертификата = ТекущийИндекс;
		
		ПараметрыСертификата = Элемент.Значение;
		
		ТекстСообщения = Нстр("ru = 'Проверка сертификата: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Элемент.Ключ);
		СообщитьПользователю(ТекстСообщения, ИдентификаторНазначения);
		
		Соответствие = Новый Соответствие;
		Соответствие.Вставить(Элемент.Ключ, ПараметрыСертификата);
		
		Параметры.Вставить("СоотвСертификатовИИхСтруктур", Соответствие);
		
		Если НЕ ПарольКСертификатуПолучен2(Соответствие, НСтр("ru = 'Аутентификация на ресурсе банка'")) Тогда
			ОООЗ = Новый ОписаниеОповещения("ПродолжитьТестСоглашенияПослеВводаПароляКСертификатуiBank2", ЭтотОбъект);
			Параметры.Вставить("ВызватьОповещение", ОООЗ);
			ПолучитьПарольКСертификату(Соответствие, НСтр("ru = 'Аутентификация на ресурсе банка'"), , , Параметры);
			Возврат;
		КонецЕсли;
		
		ПродолжитьТестСоглашенияПослеВводаПароляКСертификатуiBank2(Неопределено, Параметры);
		Возврат;
	КонецЦикла;
	
	Если ДоступныеСертификаты.Количество() = 0 Тогда
		ТекстСообщения = Нстр("ru = 'Проверка проведена не полностью, т.к. в соглашении отсутствуют сертификаты подписи'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	// Блок проверки отправки тестового запроса.
	ОписаниеТеста = НСтр("ru = 'Тест. Отправка тестового запроса.'");
	СообщитьПользователю(ОписаниеТеста, ИдентификаторНазначения);
	
	СертификатXML = Параметры.СертификатXML;
	
	ПараметрыПодсистемыОбменСБанками = ПараметрыПриложения["ОбменСБанками.Параметры"];
	ВнешнийПодключаемыйМодуль = ?(ТипЗнч(ПараметрыПодсистемыОбменСБанками) = Тип("Соответствие"),
		ПараметрыПодсистемыОбменСБанками.Получить(ИмяКомпонентыiBank2()), Неопределено);
	
	Попытка
		ВнешнийПодключаемыйМодуль.ОтправитьЗапрос("1", Неопределено);
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка отправки тестового запроса.
									|Код ошибки: %1
									|%2'");
		ДеталиОшибки = ИнформацияОбОшибкеiBank2();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ШаблонОшибки, ДеталиОшибки.Код, ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Отправка тестового запроса'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
			Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
		Возврат;
	КонецПопытки;
	СообщитьПользователю(РезультатТеста, ИдентификаторНазначения);
	
КонецПроцедуры

Функция АктуаленКэшПароляСертификатаiBank2(ДанныеСертификата, МассивЭД)
	
	ПараметрыПодсистемыОбменСБанками = ПараметрыПриложения["ОбменСБанками.Параметры"];
	ВнешнийПодключаемыйМодуль = ?(ТипЗнч(ПараметрыПодсистемыОбменСБанками) = Тип("Соответствие"),
		ПараметрыПодсистемыОбменСБанками.Получить(ИмяКомпонентыiBank2()), Неопределено);

	РеквизитыСертификата = ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыСертификата(
													ДанныеСертификата.СертификатПодписи);
	
	СлужебныеДанныеСертификата = ДанныеСертификатаiBank2(РеквизитыСертификата.ДвоичныеДанныеСертификата);
		
	Если СлужебныеДанныеСертификата = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	ТребуетсяУстановкаPINКодаХранилищаiBank2 = НеобходимоУстановитьPINКодХранилищаiBank2(
										СлужебныеДанныеСертификата.ИдентификаторХранилища);
	Если НЕ ТребуетсяУстановкаPINКодаХранилищаiBank2 = Ложь Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		ДанныеСертификатаXML = СериализованныеДанные(РеквизитыСертификата.ДвоичныеДанныеСертификата);
		НеобходимоУстановитьПарольСертификата = ВнешнийПодключаемыйМодуль.НеобходимоУстановитьПарольСертификата(
																							ДанныеСертификатаXML);
		Возврат НеобходимоУстановитьПарольСертификата = Ложь;
	Исключение
		Возврат Ложь;
	КонецПопытки;

КонецФункции

Функция ДоступноеХранилищеiBank2()
	
	Хранилища = ПодключенныеХранилищаiBank2();
	
	Если Хранилища = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Каждого ИдентификаторХранилища Из Хранилища Цикл
		
		Если НЕ НеобходимоУстановитьPINКодХранилищаiBank2(ИдентификаторХранилища) Тогда
			
			Возврат ИдентификаторХранилища;
			
		КонецЕсли;
		
	КонецЦикла
	
КонецФункции

Функция ДоступноеХранилищеЧерезДополнительнуюОбработку(ВнешнийПодключаемыйМодуль)
	
	Хранилища = ПодключенныеХранилищаЧерезДополнительнуюОбработку(ВнешнийПодключаемыйМодуль);
	
	Если Хранилища = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Каждого ИдентификаторХранилища Из Хранилища Цикл
		
		Если НЕ ТребуетсяУстановкаPINКодаХранилищаЧерезДополнительнуюОбработку(ВнешнийПодключаемыйМодуль, ИдентификаторХранилища)
			ИЛИ УстановленPINКодХранилищаЧерезДополнительнуюОбработку(ВнешнийПодключаемыйМодуль, ИдентификаторХранилища) Тогда
			
			Возврат ИдентификаторХранилища;
			
		КонецЕсли;
		
	КонецЦикла
	
КонецФункции

#КонецОбласти

#Область ОбменСБанкамиЧерезДополнительнуюОбработку

// Вызывается из ПродолжитьПодписаниеБанковскихЭД, ЭлектронныеДокументыКлиент.ПолучитьВыпискуБанка,
// НачатьПроверкуСтатусовПодписейЧерезДополнительнуюОбработку, ОтправитьЧерезДополнительнуюОбработку,
// ОтправитьДокументыВБанк, ЭДПрисоединенныеФайлы.ФормаПросмотраЭД
// и, по обработке оповещения, из НачатьУстановкуВнешнейКомпоненты.
// Получает внешний модуль для подписания ЭД через доп.обработку и переходит к подписанию ЭД.
//
// Параметры:
//    Параметры - Структура:
//       СоглашениеЭД                        - СправочникСсылка.СоглашенияОбИспользованииЭД - настройка ЭДО
//                                           по которой выполняется подписание.
//       ВыполняласьПопыткаПолученияМодуля   - Булево - Истина если процедура вызывается рекурсивно после попытки
//                                           получения внешнего подключаемого модуля.
//       ОбработкаПослеПолученияМодуля       - ОписаниеОповещения - описание, которое надо выполнить после
//                                           получения внешнего подключаемого модуля.
//
Процедура ПолучитьВнешнийМодульЧерезДополнительнуюОбработку(Параметры) Экспорт
	
	ПрерватьОбработку = Истина;
	ВнешнийПодключаемыйМодуль = ВнешнийПодключаемыйМодульЧерезДополнительнуюОбработку(Параметры.СоглашениеЭД);
	Если ВнешнийПодключаемыйМодуль = Неопределено Тогда
		ВыполняласьПопыткаПодключения = Параметры.ВыполняласьПопыткаПолученияМодуля;
		Если ВыполняласьПопыткаПодключения = Ложь Тогда
			ПараметрыПодсистемыОбменСБанками = ПараметрыПриложения["ОбменСБанками.Параметры"];
			Если ПараметрыПодсистемыОбменСБанками <> Неопределено Тогда
				ПараметрыСоглашения = ПараметрыПодсистемыОбменСБанками.Получить(Параметры.СоглашениеЭД);
				Если ЗначениеЗаполнено(ПараметрыСоглашения) И ПараметрыСоглашения.Свойство("АдресКомпоненты") Тогда
					ПрерватьПодписание = Ложь;
					Параметры.ВыполняласьПопыткаПолученияМодуля = Истина;
					ОО = Новый ОписаниеОповещения("ПолучитьВнешнийМодульЧерезДополнительнуюОбработку", ЭтотОбъект, Параметры);
					НачатьУстановкуВнешнейКомпоненты(ОО, ПараметрыСоглашения.АдресКомпоненты);
					ПрерватьОбработку = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОбработкаОповещения = Неопределено;
	Если ПрерватьОбработку И Параметры.Свойство("ОбработкаПослеПолученияМодуля", ОбработкаОповещения)
		И ТипЗнч(ОбработкаОповещения) = Тип("ОписаниеОповещения") Тогда
		
		ВыполнитьОбработкуОповещения(ОбработкаОповещения, ВнешнийПодключаемыйМодуль);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет необходимость установки пин-кода
//
// Параметры:
//  ВнешнийПодключаемыйМодуль  - Управляемая Форма - внешняя управляемая форма
//  ИдентификаторХранилища  - Строка - идентификатор хранилища
//
// Возвращаемое значение:
//   Булево, Неопределено - Истина - пин-код уже установлен или не требуется, Ложь - требуется установка пин кода,
//                          Неопределено - произошла ошибка при определении необходимости пин-кода
//
Функция НеобходимаУстановкаPINКодаХранилищаЧерезДополнительнуюОбработку(ВнешнийПодключаемыйМодуль, ИдентификаторХранилища) Экспорт
	
	ТребуетсяПИН = ТребуетсяУстановкаPINКодаХранилищаЧерезДополнительнуюОбработку(
								ВнешнийПодключаемыйМодуль, ИдентификаторХранилища);
	
	Если ТребуетсяПИН = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТребуетсяПИН Тогда
		
		УстановленPINКодХранилища = УстановленPINКодХранилищаЧерезДополнительнуюОбработку(
										ВнешнийПодключаемыйМодуль, ИдентификаторХранилища);
	
		Если УстановленPINКодХранилища = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Возврат НЕ УстановленPINКодХранилища;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция УстановленПарольСертификатаЧерезДополнительнуюОбработку(ВнешнийПодключаемыйМодуль, СертификатXML) Экспорт
	
	Попытка
		УстановленПарольСертификата = ВнешнийПодключаемыйМодуль.УстановленПарольСертификата(СертификатXML) = Истина;
	Исключение
		УстановленПарольСертификата = Ложь;
	КонецПопытки;

	Возврат УстановленПарольСертификата;
	
КонецФункции

// Устанавливает PIN код для доступа к банковскому ключу
//
// Параметры
//  ВнешнийПодключаемыйМодуль - УправляемаяФорма - внешний программный интерфейс
//  ИдентификаторХранилища  - Строка - идентификатор хранилища
//  ПинКод  - Строка - Пин код
//
// Возвращаемое значение:
//  Булево -  пин код установлен успешно или нет
//
Функция УстановитьPINКодХранилищаЧерезДополнительнуюОбработку(ВнешнийПодключаемыйМодуль, ИдентификаторХранилища, ПинКод) Экспорт
	
	ПинКодУстановлен = Истина;
	
	Попытка
		ВнешнийПодключаемыйМодуль.УстановитьPINКодХранилища(ИдентификаторХранилища, ПинКод);
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка установки PIN-кода.
		                          |Код ошибки: %1
		                          |%2'");
		ДеталиОшибки = ВнешнийПодключаемыйМодуль.ДеталиОшибки();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
		                                                                         ДеталиОшибки.Код,
		                                                                         ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Установка PIN-кода'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция,
		                                                                            ПодробноеПредставлениеОшибки,
		                                                                            ТекстСообщения,
		                                                                            1);
		ПинКодУстановлен = Ложь;
	КонецПопытки;
	
	Возврат ПинКодУстановлен;
	
КонецФункции


/////////////////////////////////////////
// Получение выписки через доп.обработку:


// Вызывается из ЭлектронныеДокументыКлиент.ПолучитьВыпискуБанка и,
// по обработке оповещения, из ПолучитьВнешнийМодульЧерезДополнительнуюОбработку.
// Получает внешний модуль для подписания ЭД через доп.обработку и переходит к получению выписки банка.
//
// Параметры:
//    ВнешнийПодключаемыйМодуль - Внешний подключаемый модуль.
//    Параметры                 - Структура:
//       СоглашениеЭД - СправочникСсылка.СоглашенияОбИспользованииЭД - настройка ЭДО
//                    по которой выполняется получение выписки.
//       НомерСчета   - Строка - номер банковского счета организации. Если не указан, то запрос по всем счетам.
//       ДатаНачала    - Дата.
//       ДатаОкончания - Дата.
//       Владелец      - Форма или элемент формы - получатель оповещения о выборе элемента - выписки банка.
//
Процедура ПолучитьВыпискуЧерезДополнительнуюОбработку(ВнешнийПодключаемыйМодуль, Параметры) Экспорт
	
	Если ВнешнийПодключаемыйМодуль <> Неопределено Тогда
		СоглашениеЭД = Параметры.СоглашениеЭД;
		ДанныеСертификатов = ЭлектронныеДокументыСлужебныйВызовСервера.ДанныеСертификатовБанка(СоглашениеЭД);
		
		Устройства = ПодключенныеХранилищаЧерезДополнительнуюОбработку(ВнешнийПодключаемыйМодуль);
		
		СписокВыбора = Новый Массив;
		Соответствие = Новый Соответствие;
		УстановленПарольСертификата = Ложь;
		Если Устройства <> Неопределено И Устройства.Количество() > 0 Тогда
			Для Каждого ДанныеСертификата ИЗ ДанныеСертификатов Цикл
				ДанныеСертификатаЧерезДополнительнуюОбработку = ДанныеСертификатаЧерезДополнительнуюОбработку(
													ВнешнийПодключаемыйМодуль, ДанныеСертификата.ДвоичныеДанныеСертификата);
				Если Устройства.Найти(ДанныеСертификатаЧерезДополнительнуюОбработку.ИдентификаторХранилища) <> Неопределено Тогда
					Соответствие.Вставить(ДанныеСертификата.Сертификат, ДанныеСертификата);
					УстановленПарольСертификата = УстановленПарольСертификатаЧерезДополнительнуюОбработку(
											ВнешнийПодключаемыйМодуль, ДанныеСертификата.ДвоичныеДанныеСертификата);
					Если УстановленПарольСертификата Тогда
						Прервать;
					КонецЕсли
				КонецЕсли;
			КонецЦикла
		Иначе
			ТекстСообщения = Нстр("ru = 'Для выполнения операции необходимо подключить банковский ключ к компьютеру'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат
		КонецЕсли;
		
		Параметры.Вставить("СоотвСертификатовИИхСтруктур", Соответствие);
		Параметры.Вставить("ДанныеСертификатов", ДанныеСертификатов);
		Параметры.Вставить("ВнешнийПодключаемыйМодуль", ВнешнийПодключаемыйМодуль);
		
		ВидОперации = НСтр("ru = 'Аутентификация на ресурсе банка'");
		Если УстановленПарольСертификата Тогда
			ВыбранныйСертификат = Неопределено;
			Если НЕ (ДанныеСертификата.Свойство("ВыбранныйСертификат")
				И ТипЗнч(ВыбранныйСертификат) = Тип("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования")) Тогда
				
				ДанныеСертификата.Вставить("ВыбранныйСертификат", ДанныеСертификата.Сертификат);
			КонецЕсли;
			ПродолжитьПолучениеВыпискиПослеВводаПароляСертификатаЧерезДополнительнуюОбработку(ДанныеСертификата, Параметры)
		Иначе
			Если Соответствие.Количество() > 0 Тогда
				Если НЕ ПарольКСертификатуПолучен2(Соответствие, ВидОперации) Тогда
					ОО = Новый ОписаниеОповещения(
						"ПродолжитьПолучениеВыпискиПослеВводаПароляСертификатаЧерезДополнительнуюОбработку", ЭтотОбъект, Параметры);
					Параметры.Вставить("ВызватьОповещение", ОО);
					ПолучитьПарольКСертификату(Соответствие, ВидОперации, , , Параметры);
					Возврат;
				КонецЕсли;
			Иначе
				ТекстСообщения = Нстр("ru = 'К компьютеру подключен не подходящий банковский ключ'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из ЭлектронныеДокументыКлиент.ПолучитьВыпискуБанка и,
// по обработке оповещения, из ПолучитьВнешнийМодульЧерезДополнительнуюОбработку.
// Получает внешний модуль для подписания ЭД через доп.обработку и переходит к получению выписки банка.
//
// Параметры:
//    Результат - Структура, Неопределено - если структура,
//              то процедура была вызвана после получения пароля к сертификату:
//       ВыбранныйСертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования.
//       Комментарий         - Строка.
//       ПарольПользователя  - Строка.
//       Пользователь        - СправочникСсылка.Пользователи, Неопределено.
//    Параметры - Структура:
//       СоотвСертификатовИИхСтруктур - Соответствие.
//       ДанныеСертификатов           - Структура.
//       ВнешнийПодключаемыйМодуль    - Внешний подключаемый модуль.
//       СоглашениеЭД                 - СправочникСсылка.СоглашенияОбИспользованииЭД - настройка ЭДО
//                                    по которой выполняется получение выписки.
//       НомерСчета                   - Строка - номер банковского счета организации. Если не указан, то запрос по всем счетам.
//       Владелец                     - Форма или элемент формы - получатель оповещения о выборе элемента - выписки банка.
//       ДатаНачала                   - Дата.
//       ДатаОкончания                - Дата.
//
Процедура ПродолжитьПолучениеВыпискиПослеВводаПароляСертификатаЧерезДополнительнуюОбработку(Результат, Параметры) Экспорт
	
	ВыбранныйСертификат = Неопределено;
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("ВыбранныйСертификат", ВыбранныйСертификат)
		И ТипЗнч(ВыбранныйСертификат) = Тип("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования") Тогда
		
		СоотвСертификатовИИхСтруктур = Параметры.СоотвСертификатовИИхСтруктур;
		СоглашениеЭД = Параметры.СоглашениеЭД;
		
		Если СоотвСертификатовИИхСтруктур.Количество() > 0 Тогда
			ДанныеСертификатов = Параметры.ДанныеСертификатов;
			ВнешнийПодключаемыйМодуль = Параметры.ВнешнийПодключаемыйМодуль;
			
			Для Каждого ДанныеСертификата ИЗ ДанныеСертификатов Цикл
				Если ДанныеСертификата.Сертификат = ВыбранныйСертификат Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			ДанныеСертификатаЧерезДополнительнуюОбработку = ДанныеСертификатаЧерезДополнительнуюОбработку(
											ВнешнийПодключаемыйМодуль, ДанныеСертификата.ДвоичныеДанныеСертификата);
			Если ДанныеСертификатаЧерезДополнительнуюОбработку <> Неопределено Тогда
				Параметры.Вставить("ИмяПроцедуры", "ПродолжитьПолучениеВыписки");
				Параметры.Вставить("Модуль", ЭтотОбъект);
				Параметры.Вставить("ДанныеСертификата", ДанныеСертификата);
				Параметры.Вставить("ПарольПользователя", Результат.ПарольПользователя);
				Параметры.Вставить("ИдентификаторХранилища", ДанныеСертификатаЧерезДополнительнуюОбработку.ИдентификаторХранилища);
				
				ТребуетсяУстановкаPINКода = НеобходимаУстановкаPINКодаХранилищаЧерезДополнительнуюОбработку(
					ВнешнийПодключаемыйМодуль, ДанныеСертификатаЧерезДополнительнуюОбработку.ИдентификаторХранилища);
					
				Если ТребуетсяУстановкаPINКода = Ложь Тогда
					ПродолжитьПолучениеВыпискиЧерезДополнительнуюОбработку(Параметры);
				ИначеЕсли ТребуетсяУстановкаPINКода = Истина Тогда
					ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(
						"ПродолжитьПолучениеВыпискиПослеВводаPINКодаЧерезДополнительнуюОбработку", ЭтотОбъект, Параметры);
					НачатьУстановкуPINКодаХранилища(
						СоглашениеЭД, ДанныеСертификатаЧерезДополнительнуюОбработку.ИдентификаторХранилища, ОписаниеОповещенияОЗакрытии);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПродолжитьПолучениеВыпискиПослеВводаPINКодаЧерезДополнительнуюОбработку(PINКод, Параметры) Экспорт
	
	ВнешнийПодключаемыйМодуль = Параметры.ВнешнийПодключаемыйМодуль;
	
	Если PINКод = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановленPIN = УстановитьPINКодХранилищаЧерезДополнительнуюОбработку(
		ВнешнийПодключаемыйМодуль, Параметры.ИдентификаторХранилища, PINКод);
		
	Если НЕ УстановленPIN Тогда
		Возврат;
	КонецЕсли;
	
	СоглашениеЭД = Параметры.СоглашениеЭД;
	
	ДанныеСертификата = Параметры.ДанныеСертификата;
	ПарольПользователя = Параметры.ПарольПользователя;
	
	ПарольУстановлен = УстановитьПарольСертификатаЧерезДополнительнуюОбработку(
		ВнешнийПодключаемыйМодуль, ДанныеСертификата.ДвоичныеДанныеСертификата, ПарольПользователя);
	Если НЕ ПарольУстановлен Тогда
		Возврат;
	КонецЕсли;
	
	СоединениеУстановлено = Ложь;
	УстановитьСоединениеЧерезДополнительнуюОбработку(СоглашениеЭД, ВнешнийПодключаемыйМодуль,
							ДанныеСертификата.ДвоичныеДанныеСертификата, Параметры, СоединениеУстановлено);
	Если Не СоединениеУстановлено Тогда
		Возврат;
	КонецЕсли;
	
	ПродолжитьПолучениеВыписки(СоединениеУстановлено, Параметры);
	
КонецПроцедуры

Процедура ПродолжитьПолучениеВыписки(АутентификацияВыполнена, Параметры) Экспорт
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("СоглашениеЭД", Параметры.СоглашениеЭД);
	ПараметрыФормы.Вставить("ДанныеСертификата", Параметры.ДанныеСертификата);
	ПараметрыФормы.Вставить("ДатаНачала", Параметры.ДатаНачала);
	ПараметрыФормы.Вставить("ДатаОкончания", Параметры.ДатаОкончания);
	ПараметрыФормы.Вставить("НомерСчета", Параметры.НомерСчета);

	ОткрытьФорму(
		"Обработка.ОбменЭлектроннымиДокументамиСБанком.Форма.ЗапросВБанк", ПараметрыФормы, Параметры.Владелец);
	
КонецПроцедуры


//////////////////////////////////////////////////////////////
// Отправка пакетов банковских документов через доп.обработку:


// Вызывается из ВыполнитьДействияПослеОтправкиПЭДЗавершить.
// Рекурсивная обработка (отправка) банковских документов.
//
// Параметры:
//    Результат - Число, Неопределено.
//    Параметры - Структура:
//       ОбработчикПослеОтправкиПЭД - ОписаниеОповещения - описание, которое надо выполнить когда
//                                  будут обработаны все данные для отправки (ДанныеДляОтправки).
//       ДанныеДляОтправки          - Соответствие
//          Ключ     - СправочникСсылка.СоглашенияОбИспользованииЭД - настройка ЭДО,
//                   по которой требуется отправить документы.
//          Значение - Структура:
//             Данныепакетов - Соответствие.
//             Сертификаты   - Массив - структуры данных сертификатов.
//       КолПодготовленных - Число.
//       КолОтправленных   - Число.
//
Процедура ОтправитьЧерезДополнительнуюОбработку(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Число") Тогда
		Параметры.КолОтправленных = Параметры.КолОтправленных + Результат;
	КонецЕсли;
	
	ДанныеДляОтправки = Неопределено;
	Если НЕ Параметры.Свойство("ДанныеДляОтправки", ДанныеДляОтправки)
		ИЛИ ДанныеДляОтправки.Количество() = 0 Тогда
		
		ВыполнитьОбработкуОповещения(Параметры.ОбработчикПослеОтправкиПЭД, Параметры);
	Иначе
		Для Каждого КлючИЗначение Из ДанныеДляОтправки Цикл
			// СтруктураОтправки будет передана в процедуру
			// НачатьОтправкуПакетовЧерезДополнительнуюОбработку, после получения внешнего модуля.
			СтруктураОтправки = Новый Структура;
			СтруктураОтправки.Вставить("СоглашениеЭД",          КлючИЗначение.Ключ);
			СтруктураОтправки.Вставить("ДанныеДляОтправки",     КлючИЗначение.Значение);
			СтруктураОтправки.Вставить("ИтогКолОтправленных",   0);
			СтруктураОтправки.Вставить("ИтогКолПодготовленных", 0);
			
			Параметры.ДанныеДляОтправки.Удалить(КлючИЗначение.Ключ);
			// ОбработчикПродолжения - рекурсивный вызов текущей процедуры, для продолжения
			// отправки следующего элемента ДанныеДляОтправки.
			ОбработчикПродолжения = Новый ОписаниеОповещения("ОтправитьЧерезДополнительнуюОбработку", ЭтотОбъект, Параметры);
			СтруктураОтправки.Вставить("ОбработчикПродолжения", ОбработчикПродолжения);
			
			// СтруктураПодключения нужна для получения внешнего модуля.
			СтруктураПодключения = Новый Структура;
			СтруктураПодключения.Вставить("СоглашениеЭД",      КлючИЗначение.Ключ);
			СтруктураПодключения.Вставить("ВыполняласьПопыткаПолученияМодуля", Ложь);
			
			ОбработчикПослеПодключения = Новый ОписаниеОповещения("НачатьОтправкуПакетовЧерезДополнительнуюОбработку",
				ЭтотОбъект, СтруктураОтправки);
			СтруктураПодключения.Вставить("ОбработкаПослеПолученияМодуля", ОбработчикПослеПодключения);
			
			ПолучитьВнешнийМодульЧерезДополнительнуюОбработку(СтруктураПодключения);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из ПолучитьВнешнийМодульЧерезДополнительнуюОбработку по описанию оповещения,
// 
//
// Параметры:
//    ВнешнийПодключаемыйМодуль - внешний подключаемый модуль.
//    Параметры - Структура:
//       ОбработчикПродолжения - ОписаниеОповещения.
//       ДанныеДляОтправки     - Структура:
//          ДанныеПакетов - Соответствие.
//          Сертификаты   - Массив.
//       СоглашениеЭД          - СправочникСсылка.СоглашенияОбОбменеЭД.
//       ИтогКолПодготовленных - Число.
//       ИтогКолОтправленных   - Число.
//       ПараметрыАвторизации  - Соответствие.
//       ТребуетсяАвторизация  - Булево.
//
Процедура НачатьОтправкуПакетовЧерезДополнительнуюОбработку(ВнешнийПодключаемыйМодуль, Параметры) Экспорт
	
	ПрерватьОбработку = Истина;
	Если ВнешнийПодключаемыйМодуль <> Неопределено Тогда
		ДанныеОтправки = Параметры.ДанныеДляОтправки;
		
		Параметры.Вставить("ВнешнийПодключаемыйМодуль", ВнешнийПодключаемыйМодуль);
		Устройства = ПодключенныеХранилищаЧерезДополнительнуюОбработку(ВнешнийПодключаемыйМодуль);
		
		СписокВыбораСертификата = Новый Массив;
		
		Если Устройства <> Неопределено И Устройства.Количество() > 0 Тогда
			Для Каждого ДанныеСертификата ИЗ ДанныеОтправки.Сертификаты Цикл
				ПарольУстановлен = УстановленПарольСертификатаЧерезДополнительнуюОбработку(
								ВнешнийПодключаемыйМодуль, ДанныеСертификата.ДвоичныеДанныеСертификата);
				Если ПарольУстановлен Тогда
					Соответствие = Новый Соответствие;
					СтруктураСертификата = ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыСертификата(
																		ДанныеСертификата.СертификатСсылка);
					Соответствие.Вставить(ДанныеСертификата.СертификатСсылка, СтруктураСертификата);
					Параметры.Вставить("СоотвСертификатовИИхСтруктур", Соответствие);
					Прервать;
				КонецЕсли;
			
				СодержимоеСертификата = ДанныеСертификатаЧерезДополнительнуюОбработку(
						ВнешнийПодключаемыйМодуль, ДанныеСертификата.ДвоичныеДанныеСертификата);
				Если Устройства.Найти(СодержимоеСертификата.ИдентификаторХранилища) <> Неопределено Тогда
					СписокВыбораСертификата.Добавить(ДанныеСертификата.СертификатСсылка);
				КонецЕсли;
			КонецЦикла;
			
			Параметры.Вставить("ДанныеСертификата", ДанныеСертификата);
			
			Если НЕ ПарольУстановлен Тогда
				Если СписокВыбораСертификата.Количество() = 0 Тогда
					Для Каждого ДанныеСертификата ИЗ ДанныеОтправки.Сертификаты Цикл
						СписокВыбораСертификата.Вставить(ДанныеСертификата.СертификатСсылка);
					КонецЦикла;
				КонецЕсли;
				Соответствие = Новый Соответствие;
				Для Каждого Сертификат Из СписокВыбораСертификата Цикл
					СтруктураСертификата = ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыСертификата(Сертификат);
					Соответствие.Вставить(Сертификат, СтруктураСертификата);
				КонецЦикла;
				
				Параметры.Вставить("СоотвСертификатовИИхСтруктур", Соответствие);
				
				Если ПарольКСертификатуПолучен2(Соответствие, НСтр("ru = 'Аутентификация на ресурсе банка'")) Тогда
					// В функции ПарольКСертификатуПолучен2() переменная Соответствие переопределяется,
					// поэтому берем первый элемент соответствия - это и будет сертификат, к которому получен пароль:
					Для Каждого Элемент Из Соответствие Цикл
						ДанныеСертификата = Элемент.Значение;
						Прервать;
					КонецЦикла;
					ПарольУстановлен = Истина;
				Иначе
					ОООЗ = Новый ОписаниеОповещения(
						"ПродолжитьОтправкуПакетовПослеВводаПароляКСертификатуЧерезДополнительнуюОбработку", ЭтотОбъект, Параметры);
					Параметры.Вставить("ВызватьОповещение", ОООЗ);
					ПолучитьПарольКСертификату(Соответствие, НСтр("ru = 'Аутентификация на ресурсе банка'"), , , Параметры);
					ПрерватьОбработку = Ложь;
				КонецЕсли;
			КонецЕсли;
			Если ПарольУстановлен Тогда
				ВыбранныйСертификат = Неопределено;
				Если НЕ (ДанныеСертификата.Свойство("ВыбранныйСертификат")
					И ТипЗнч(ВыбранныйСертификат) = Тип("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования")) Тогда
					
					ДанныеСертификата.Вставить("ВыбранныйСертификат", ДанныеСертификата.СертификатСсылка);
				КонецЕсли;
				ПродолжитьОтправкуПакетовПослеВводаПароляКСертификатуЧерезДополнительнуюОбработку(ДанныеСертификата, Параметры);
				ПрерватьОбработку = Ложь;
			КонецЕсли;
		Иначе
			ТекстСообщения = Нстр("ru = 'К компьютеру не подключен банковский ключ для отправки данных по настройке ЭДО: %1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Параметры.СоглашениеЭД);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	ОбработчикПродолжения = Неопределено;
	Если ПрерватьОбработку И Параметры.Свойство("ОбработчикПродолжения", ОбработчикПродолжения)
		И ТипЗнч(ОбработчикПродолжения) = Тип("ОписаниеОповещения") Тогда
		
		ВыполнитьОбработкуОповещения(ОбработчикПродолжения, Параметры.ИтогКолОтправленных);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из НачатьОтправкуПакетовЧерезДополнительнуюОбработку и,
// по описанию оповещения, из ПолучитьПарольКСертификату
// 
//
// Параметры:
//    Результат - Неопределено, Структура - если Неопределено - то пароль к сертификату небыл получен.
//    Параметры - Структура:
//       ВнешнийПодключаемыйМодуль - внешний подключаемый модуль.
//       СоотвСертификатовИИхСтруктур - Структура.
//       ОбработчикПродолжения - ОписаниеОповещения.
//       ДанныеДляОтправки     - Структура:
//          ДанныеПакетов - Соответствие.
//          Сертификаты   - Массив - массив структур сертификатов.
//       СоглашениеЭД          - СправочникСсылка.СоглашенияОбОбменеЭД.
//
//       ИтогКолПодготовленных - Число.
//       ИтогКолОтправленных   - Число.
//       ПараметрыАвторизации  - Соответствие.
//       ТребуетсяАвторизация  - Булево.
//
Процедура ПродолжитьОтправкуПакетовПослеВводаПароляКСертификатуЧерезДополнительнуюОбработку(Результат, Параметры) Экспорт
	
	ВыбранныйСертификат = Неопределено;
	ПрерватьОбработку = Истина;
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("ВыбранныйСертификат", ВыбранныйСертификат)
		И ТипЗнч(ВыбранныйСертификат) = Тип("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования") Тогда
		
		ПараметрыСертификата = Параметры.СоотвСертификатовИИхСтруктур[ВыбранныйСертификат];
		ПараметрыСертификата.Вставить("ПарольПолучен", Истина);
		ПараметрыСертификата.Вставить("ПарольПользователя", Результат.ПарольПользователя);
		ПараметрыСертификата.Вставить("ВыбранныйСертификат", ВыбранныйСертификат);
		ПараметрыСертификата.Вставить("Комментарий", "");
		Результат.Свойство("Комментарий", ПараметрыСертификата.Комментарий);
		Параметры.Вставить("СтруктураСертификата", ПараметрыСертификата);
		
		ВнешнийПодключаемыйМодуль = Параметры.ВнешнийПодключаемыйМодуль;
		Сертификаты = Параметры.ДанныеДляОтправки.Сертификаты;
		ДанныеСертификата = Неопределено;
		Для Каждого СтруктураСертификата Из Сертификаты Цикл
			Если СтруктураСертификата.СертификатСсылка = ВыбранныйСертификат Тогда
				ДанныеСертификата = СтруктураСертификата;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ДанныеСертификата <> Неопределено Тогда
			Параметры.Вставить("ДанныеСертификата", ДанныеСертификата);
			ДанныеСертификатаЧерезДополнительнуюОбработку = ДанныеСертификатаЧерезДополнительнуюОбработку(
				ВнешнийПодключаемыйМодуль, ДанныеСертификата.ДвоичныеДанныеСертификата);
			ИдентификаторХранилища = ДанныеСертификатаЧерезДополнительнуюОбработку.ИдентификаторХранилища;
			
			Если ДанныеСертификатаЧерезДополнительнуюОбработку <> Неопределено Тогда
				Параметры.Вставить("ОтправляемыеПакетыЧерезДопОбработку", Параметры.ДанныеДляОтправки.ДанныеПакетов);
				Параметры.Вставить("ИмяПроцедуры", "ОтправитьПакетыЧерезДополнительнуюОбработку");
				Параметры.Вставить("Модуль", ЭтотОбъект);
				Параметры.Вставить("ПарольУстановлен", Истина);
				Параметры.Вставить("ПарольПользователя", Результат.ПарольПользователя);
				Параметры.Вставить("ИдентификаторХранилища", ИдентификаторХранилища);

				НеобходимаУстановкаPINКодаХранилища = НеобходимаУстановкаPINКодаХранилищаЧерезДополнительнуюОбработку(
																	ВнешнийПодключаемыйМодуль, ИдентификаторХранилища);
				Если НеобходимаУстановкаPINКодаХранилища = Истина Тогда
					ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(
						"ПродолжитьОтправкуПакетаПослеВводаPINКодаЧерезДополнительнуюОбработку", ЭтотОбъект, Параметры);
					НачатьУстановкуPINКодаХранилища(Параметры.СоглашениеЭД, ИдентификаторХранилища, ОписаниеОповещенияОЗакрытии);
					ПрерватьОбработку = Ложь;
				ИначеЕсли НеобходимаУстановкаPINКодаХранилища = Ложь Тогда
					ПродолжитьОтправкуПакетаЧерезДополнительнуюОбработку(Параметры);
					ПрерватьОбработку = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОбработчикПродолжения = Неопределено;
	Если ПрерватьОбработку И Параметры.Свойство("ОбработчикПродолжения", ОбработчикПродолжения)
		И ТипЗнч(ОбработчикПродолжения) = Тип("ОписаниеОповещения") Тогда
		
		ВыполнитьОбработкуОповещения(ОбработчикПродолжения, Параметры.ИтогКолОтправленных);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПродолжитьОтправкуПакетаПослеВводаPINКодаЧерезДополнительнуюОбработку(PINКод, Параметры) Экспорт
	
	ВнешнийПодключаемыйМодуль = Параметры.ВнешнийПодключаемыйМодуль;
	ПрерватьОбработку = Истина;
	Если PINКод <> Неопределено Тогда
		УстановленPIN = УстановитьPINКодХранилищаЧерезДополнительнуюОбработку(
			ВнешнийПодключаемыйМодуль, Параметры.ИдентификаторХранилища, PINКод);
		Если УстановленPIN Тогда
			ПродолжитьОтправкуПакетаЧерезДополнительнуюОбработку(Параметры)
		КонецЕсли;
	КонецЕсли;
	
	ОбработчикПродолжения = Неопределено;
	Если ПрерватьОбработку И Параметры.Свойство("ОбработчикПродолжения", ОбработчикПродолжения)
		И ТипЗнч(ОбработчикПродолжения) = Тип("ОписаниеОповещения") Тогда
		
		ВыполнитьОбработкуОповещения(ОбработчикПродолжения, Параметры.ИтогКолОтправленных);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из ПродолжитьОтправкуПакетовПослеВводаПароляКСертификатуЧерезДополнительнуюОбработку и,
// по описанию оповещения, из ПродолжитьОтправкуПакетаПослеВводаPINКодаЧерезДополнительнуюОбработку.
// 
//
// Параметры:
//    Параметры - Структура:
//       ВнешнийПодключаемыйМодуль    - внешний подключаемый модуль.
//       СоглашениеЭД                 - СправочникСсылка.СоглашенияОбОбменеЭД.
//       ПарольУстановлен             - Булево.
//       ДанныеСертификата            - Структура.
//       ПарольПользователя           - Строка.
//       ОбработчикПродолжения        - ОписаниеОповещения.
//
//       СоотвСертификатовИИхСтруктур - Структура.
//       ДанныеДляОтправки            - Структура:
//          ДанныеПакетов - Соответствие.
//          Сертификаты   - Массив.
//       ИтогКолПодготовленных        - Число.
//       ИтогКолОтправленных          - Число.
//       ПараметрыАвторизации         - Соответствие.
//       ТребуетсяАвторизация         - Булево.
//
Процедура ПродолжитьОтправкуПакетаЧерезДополнительнуюОбработку(Параметры)
	
	ВнешнийПодключаемыйМодуль = Параметры.ВнешнийПодключаемыйМодуль;
	
	ПарольУстановлен = Параметры.ПарольУстановлен;
	ДанныеСертификата = Параметры.ДанныеСертификата;
	ПарольПользователя = Параметры.ПарольПользователя;
	СоглашениеЭД = Параметры.СоглашениеЭД;
	
	ПрерватьОбработку = Истина;
	Если ПарольУстановлен Тогда
		ПарольВерный = УстановитьПарольСертификатаЧерезДополнительнуюОбработку(
			ВнешнийПодключаемыйМодуль, ДанныеСертификата.ДвоичныеДанныеСертификата, ПарольПользователя);
		Если ПарольВерный Тогда
			УстановленоСоединениеСБанком = Ложь;
			УстановитьСоединениеЧерезДополнительнуюОбработку(СоглашениеЭД, ВнешнийПодключаемыйМодуль,
					ДанныеСертификата.ДвоичныеДанныеСертификата, Параметры, УстановленоСоединениеСБанком);
			Если УстановленоСоединениеСБанком Тогда
				ОтправитьПакетыЧерезДополнительнуюОбработку(УстановленоСоединениеСБанком, Параметры);
				ПрерватьОбработку = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОбработчикПродолжения = Неопределено;
	Если ПрерватьОбработку И Параметры.Свойство("ОбработчикПродолжения", ОбработчикПродолжения)
		И ТипЗнч(ОбработчикПродолжения) = Тип("ОписаниеОповещения") Тогда
		
		ВыполнитьОбработкуОповещения(ОбработчикПродолжения, Параметры.ИтогКолОтправленных);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьПакетыЧерезДополнительнуюОбработку(АутентификацияВыполнена, Параметры) Экспорт
	
	Если АутентификацияВыполнена = Истина Тогда
		ДокументыКОтправке = Новый Массив;
		МассивОтправленныхЭД = Новый Массив;
		
		Для Каждого Документ Из Параметры.ОтправляемыеПакетыЧерезДопОбработку Цикл
			СтруктураОтправки = Новый Структура;
			СтруктураОтправки.Вставить("Ключ",                Документ.Значение.Ключ);
			СтруктураОтправки.Вставить("ЭлектронныйДокумент", Документ.Значение.ПлатежноеПоручение);
			СтруктураОтправки.Вставить("СхемаДанных",         ПолучитьИзВременногоХранилища(Документ.Значение.СлужебныеДанные));
			СтруктураОтправки.Вставить("Подписи",             Новый Массив);
		
			Для Каждого СтрокаДанныеПодписи Из Документ.Значение.Подписи Цикл
				Подпись = ПолучитьИзВременногоХранилища(СтрокаДанныеПодписи.АдресПодписи);
				ДанныеПодписи = Новый Структура("Сертификат, Подпись", СтрокаДанныеПодписи.Сертификат, Подпись);
				СтруктураОтправки.Подписи.Добавить(ДанныеПодписи);
			КонецЦикла;
			ДокументыКОтправке.Добавить(СтруктураОтправки);
		КонецЦикла;
		
		СтруктураОтправки = Новый Структура();
		СтруктураОтправки.Вставить("Документы",         ДокументыКОтправке);
		СтруктураОтправки.Вставить("ВерсияСхемыДанных", "1.07");

		Результат = ОтправитьЗапросЧерезДополнительнуюОбработку(
			Параметры.ВнешнийПодключаемыйМодуль, Параметры.ДанныеСертификата.ДвоичныеДанныеСертификата, 3, СтруктураОтправки);
		
		Если НЕ Результат = Неопределено Тогда
			КоличествоОтправленных = Результат.Количество();
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьОтветБанка(
					Параметры.ОтправляемыеПакетыЧерезДопОбработку, Результат);
			Параметры.ИтогКолОтправленных = Параметры.ИтогКолОтправленных + КоличествоОтправленных;
		КонецЕсли;
	КонецЕсли;
	
	ОбработчикПродолжения = Неопределено;
	Если Параметры.Свойство("ОбработчикПродолжения", ОбработчикПродолжения)
		И ТипЗнч(ОбработчикПродолжения) = Тип("ОписаниеОповещения") Тогда
		
		ВыполнитьОбработкуОповещения(ОбработчикПродолжения, Параметры.ИтогКолОтправленных);
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////
// Подписание банковских документов через доп.обработку:

// Вызывается из ПолучитьВнешнийМодульЧерезДополнительнуюОбработку по обработке оповещения.
// Дозаполняет недостающие данные, необходимые для подписания ЭД и переходит к подписанию ЭД.
//
// Параметры:
//    ВнешнийПодключаемыйМодуль - внешний подключаемый модуль.
//    Параметры                 - Структура:
//       СоглашениеЭД          - СправочникСсылка.СоглашенияОбИспользованииЭД - настройка ЭДО по которой
//                             выполняется подписание.
//       МассивЭДКПодписи      - Массив - подписываемые ЭД.
//       СтруктураСертификата  - Структура - параметры сертификата, для которого "выше"
//                             выполнялся запрос пароля.
//       ОбработчикПродолжения - ОписаниеОповещения - описание, которое надо выполнить после завершения
//                             отработки текущих ЭД (МассивЭДКПодписи).
//
Процедура ПроверитьНеобходимостьУстановкиПинКода(ВнешнийПодключаемыйМодуль, Параметры) Экспорт
	
	ПрерватьПодписание = Истина;
	Если ВнешнийПодключаемыйМодуль <> Неопределено Тогда
		Параметры.Вставить("ВнешнийПодключаемыйМодуль", ВнешнийПодключаемыйМодуль);
		СертификатСсылка = Параметры.СтруктураСертификата.СертификатПодписи;
		РеквизитыСертификата = ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыСертификата(СертификатСсылка);
		
		СертификатXML = РеквизитыСертификата.ДвоичныеДанныеСертификата;
		Параметры.Вставить("СертификатXMLЧерезДопОбработку", СертификатXML);
		
		ДанныеСертификата = ДанныеСертификатаЧерезДополнительнуюОбработку(ВнешнийПодключаемыйМодуль, СертификатXML);
		
		Если ДанныеСертификата <> Неопределено Тогда
			Параметры.Вставить("ИдентификаторХранилища", ДанныеСертификата.ИдентификаторХранилища);
			
			ТребуетсяУстановкаPINКода = НеобходимаУстановкаPINКодаХранилищаЧерезДополнительнуюОбработку(
				ВнешнийПодключаемыйМодуль, ДанныеСертификата.ИдентификаторХранилища);
			
			Если ТребуетсяУстановкаPINКода = Истина Тогда
				ОО = Новый ОписаниеОповещения(
					"ПродолжитьПодписаниеПослеВводаPINКодаЧерезДополнительнуюОбработку", ЭтотОбъект, Параметры);
				НачатьУстановкуPINКодаХранилища(Параметры.СоглашениеЭД, ДанныеСертификата.ИдентификаторХранилища, ОО);
				ПрерватьПодписание = Ложь;
			ИначеЕсли ТребуетсяУстановкаPINКода = Ложь Тогда
				ПродолжитьПодписаниеЧерезДополнительнуюОбработку(Параметры);
				ПрерватьПодписание = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеПодписатьЭД = Неопределено;
	Если ПрерватьПодписание И Параметры.Свойство("ОбработчикПродолжения", ОписаниеПодписатьЭД)
		И ТипЗнч(ОписаниеПодписатьЭД) = Тип("ОписаниеОповещения") Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеПодписатьЭД);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПродолжитьПодписаниеПослеВводаPINКодаЧерезДополнительнуюОбработку(PINКод, Параметры) Экспорт
	
	ПрерватьПодписание = Истина;
	ВнешнийПодключаемыйМодуль = Параметры.ВнешнийПодключаемыйМодуль;
	Если PINКод <> Неопределено Тогда
		УстановленPIN = УстановитьPINКодХранилищаЧерезДополнительнуюОбработку(
			ВнешнийПодключаемыйМодуль, Параметры.ИдентификаторХранилища, PINКод);
			
		Если УстановленPIN Тогда
			ПрерватьПодписание = Ложь;
			ПродолжитьПодписаниеЧерезДополнительнуюОбработку(Параметры)
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеПодписатьЭД = Неопределено;
	Если ПрерватьПодписание И Параметры.Свойство("ОбработчикПродолжения", ОписаниеПодписатьЭД)
		И ТипЗнч(ОписаниеПодписатьЭД) = Тип("ОписаниеОповещения") Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеПодписатьЭД);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПродолжитьПодписаниеЧерезДополнительнуюОбработку(Параметры) Экспорт
	
	ВнешнийПодключаемыйМодуль = Параметры.ВнешнийПодключаемыйМодуль;
	
	СертификатXML = Параметры.СертификатXMLЧерезДопОбработку;
	СтруктураСертификата = Параметры.СтруктураСертификата;
	СоглашениеЭД = Параметры.СоглашениеЭД;
	
	ПарольУстановлен = УстановитьПарольСертификатаЧерезДополнительнуюОбработку(
		ВнешнийПодключаемыйМодуль, СертификатXML, СтруктураСертификата.ПарольПользователя);
	
	ПрерватьПодписание = Истина;
	Если ПарольУстановлен Тогда
		ПрерватьПодписание = Ложь;
		АутентификацияВыполнена = Ложь;
		Параметры.Вставить("ИмяПроцедуры", "ПодписаниеЭДЧерезДополнительнуюОбработку");
		Параметры.Вставить("Модуль", ЭтотОбъект);
		УстановитьСоединениеЧерезДополнительнуюОбработку(
			СоглашениеЭД, ВнешнийПодключаемыйМодуль, СертификатXML, Параметры, АутентификацияВыполнена);
		
		Если АутентификацияВыполнена Тогда
			ПодписаниеЭДЧерезДополнительнуюОбработку(АутентификацияВыполнена, Параметры);
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеПодписатьЭД = Неопределено;
	Если ПрерватьПодписание И Параметры.Свойство("ОбработчикПродолжения", ОписаниеПодписатьЭД)
		И ТипЗнч(ОписаниеПодписатьЭД) = Тип("ОписаниеОповещения") Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеПодписатьЭД);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодписаниеЭДЧерезДополнительнуюОбработку(АутентификацияВыполнена, Параметры) Экспорт
	
	ВнешнийПодключаемыйМодуль = Параметры.ВнешнийПодключаемыйМодуль;
	МассивЭДДляПроверки = Новый Массив;
	СоглашениеЭД = Параметры.СоглашениеЭД;
	СтруктураСертификата = Параметры.СтруктураСертификата;
	МассивЭДКПодписи = Параметры.МассивЭДКПодписи;
	ПрерватьПодписание = Ложь;
	Если АутентификацияВыполнена = Истина Тогда
		СертификатXML = Параметры.СертификатXMLЧерезДопОбработку;
		ДанныеОбработки = ЭлектронныеДокументыСлужебныйВызовСервера.ДанныеДляФормированияЭПЧерезДопОбработку(
																Параметры.МассивЭДКПодписи);

		Если ДанныеОбработки.МассивТекстовыхДанныхЭД.Количество() > 0 Тогда
			Попытка
				МассивНовыхСхемДанных = ВнешнийПодключаемыйМодуль.СхемаДанных(
						СертификатXML, ДанныеОбработки.МассивТекстовыхДанныхЭД);
			Исключение
				ШаблонОшибки = НСтр("ru = 'Ошибка получения схемы данных.
											|Код ошибки: %1
											|%2'");
				ДеталиОшибки = ВнешнийПодключаемыйМодуль.ДеталиОшибки();
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									ШаблонОшибки, ДеталиОшибки.Код, ДеталиОшибки.Сообщение);
				Операция = НСтр("ru = 'Получение схемы данных'");
				ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
					Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
				ПрерватьПодписание = Истина;
			КонецПопытки;
			Если НЕ ПрерватьПодписание Тогда
				ЭлектронныеДокументыСлужебныйВызовСервера.СохранитьСхемыДанных(
					СоглашениеЭД, ДанныеОбработки.МассивЭДБезСхем, МассивНовыхСхемДанных);
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДанныеОбработки.МассивДанныхСхем,  МассивНовыхСхемДанных);
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДанныеОбработки.МассивЭДСоСхемами, ДанныеОбработки.МассивЭДБезСхем);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ПрерватьПодписание Тогда
			ДанныеПодписей = Новый Соответствие;
			КоличествоЭД = ДанныеОбработки.МассивЭДСоСхемами.Количество();
			ПараметрыПодписи = Новый Структура("Пароль", СтруктураСертификата.ПарольПользователя);
			Попытка
				МассивПодписей = ВнешнийПодключаемыйМодуль.Подписать(
					СертификатXML, ДанныеОбработки.МассивДанныхСхем, ПараметрыПодписи);
			Исключение
				ШаблонОшибки = НСтр("ru = 'Ошибка подписания документов.
											|Код ошибки: %1
											|%2'");
				ДеталиОшибки = ВнешнийПодключаемыйМодуль.ДеталиОшибки();
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									ШаблонОшибки, ДеталиОшибки.Код, ДеталиОшибки.Сообщение);
				Операция = НСтр("ru = 'Подписание документов'");
				ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
									Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
				ПрерватьПодписание = Истина;
			КонецПопытки;
			Если НЕ ПрерватьПодписание Тогда
				ЭлектронныеДокументыСлужебныйВызовСервера.СохранитьДанныеПодписей(
					ДанныеОбработки.МассивЭДСоСхемами, МассивПодписей, СтруктураСертификата.СертификатПодписи);
				Для Каждого ТекДокумент Из МассивЭДКПодписи Цикл
					МассивЭДДляПроверки.Добавить(ТекДокумент);
				КонецЦикла;
				Параметры.Вставить("РезультатПодписания", Новый Структура("ИтогКолПодписанных", МассивПодписей.Количество()));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеПодписатьЭД = Неопределено;
	Параметры.Свойство("ОбработчикПродолжения", ОписаниеПодписатьЭД);
	Если НЕ ПрерватьПодписание Тогда
		Параметры.Вставить("ТекущийИндексПроверкиПодписейЧерезДополнительнуюОбработку", 0);
		Параметры.Вставить("МассивЭДДляПроверкиЧерезДополнительнуюОбработку", МассивЭДДляПроверки);
		НачатьПроверкуСтатусовПодписейЧерезДополнительнуюОбработку(ВнешнийПодключаемыйМодуль, Параметры);
	ИначеЕсли ТипЗнч(ОписаниеПодписатьЭД) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(ОписаниеПодписатьЭД);
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////
// Проверка статусов установленных подписей через доп.обработку:

// Вызывается из ПодписаниеЭДЧерезДополнительнуюОбработку, Справочники.ЭДПрисоединенныеФайлы.ФормаПросмотраЭД
// модуль формы, Обработки.ОбменЭлектроннымиДокументамиСБанком.ЗапросВБанк модуль формы.
// Осуществляет проверку валидности подписей
//
// Параметры
//    ВнешнийПодключаемыйМодуль - внешний подключаемый модуль.
//    Параметры                 - Структура:
//       СоглашениеЭД                        - СправочникСсылка.СоглашенияОбИспользованииЭД - настройка ЭДО по которой
//                                           выполняется подписание.
//       ОбработчикПродолжения     - ОписаниеОповещения - (необязательный) описание, которое надо выполнить после завершения
//                                           отработки текущих ЭД (МассивЭДКПодписи).
//       ВнешнийПодключаемыйМодуль           - (необязательный) внешний подключаемый модуль.
//       МассивЭДДляПроверкиЧерезДополнительнуюОбработку - Массив - подписываемые ЭД.
//       ОповеститьОПроверкеЭП               - Строка - (необязательный) признак необходимости выполнить "Оповестить()".
//
Процедура НачатьПроверкуСтатусовПодписейЧерезДополнительнуюОбработку(ВнешнийПодключаемыйМодуль, Параметры) Экспорт
	
	Если ВнешнийПодключаемыйМодуль = Неопределено Тогда
		ОО = Новый ОписаниеОповещения("ПолучитьДоступноеХранилищеЧерезДополнительнуюОбработку", ЭтотОбъект, Параметры);
		Структура = Новый Структура;
		Структура.Вставить("ВыполняласьПопыткаПолученияМодуля", Ложь);
		Структура.Вставить("ОбработкаПослеПолученияМодуля", ОО);
		Структура.Вставить("СоглашениеЭД", Параметры.СоглашениеЭД);
		// Если получится получить внешний модуль, то будет выполнен обработчик ОбработкаВСлучаеУспеха.
		// В противном случае произойдет возврат к подписанию других ЭД (ОбработкаВСлучаеНеудачи).
		ПолучитьВнешнийМодульЧерезДополнительнуюОбработку(Структура);
	Иначе
		ПолучитьДоступноеХранилищеЧерезДополнительнуюОбработку(ВнешнийПодключаемыйМодуль, Параметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьДоступноеХранилищеЧерезДополнительнуюОбработку(ВнешнийПодключаемыйМодуль, Параметры) Экспорт
	
	Если ВнешнийПодключаемыйМодуль = Неопределено Тогда
		ОписаниеОповещения = Неопределено;
		Если Параметры.Свойство("ОбработчикПродолжения", ОписаниеОповещения)
			И ТипЗнч(ОписаниеОповещения) = Тип("ОписаниеОповещения") Тогда
			
			Результат = Неопределено;
			Параметры.Свойство("РезультатПодписания", Результат);
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, Результат);
		КонецЕсли;
	Иначе
		Параметры.Вставить("ВнешнийПодключаемыйМодуль", ВнешнийПодключаемыйМодуль);
		ДоступноеХранилище = ДоступноеХранилищеЧерезДополнительнуюОбработку(ВнешнийПодключаемыйМодуль);
		Если ЗначениеЗаполнено(ДоступноеХранилище) Тогда
			ВыполнитьПроверкуСтатусовПодписейЧерезДополнительнуюОбработку(ДоступноеХранилище, Параметры);
		Иначе
			ОО = Новый ОписаниеОповещения("ВыполнитьПроверкуСтатусовПодписейЧерезДополнительнуюОбработку", ЭтотОбъект, Параметры);
			ВыбратьХранилищеЧерезДополнительнуюОбработку(Параметры.СоглашениеЭД, ОО, Параметры);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//Предлагает пользователю выбрать хранилище и возвращает результат выбора
//
// Параметры:
//  СоглашениеЭД  - СправочникСсылка.СоглашенияОбИспользованииЭД - ссылка на соглашение с банком
//  ОО - ОписаниеОповещения - описание вызова процедуры программного модуля, который будет осуществлен после выбора хранилища
//  Параметры  - структура - параметры обработки ЭД
//
Процедура ВыбратьХранилищеЧерезДополнительнуюОбработку(СоглашениеЭД, ОО, Параметры) Экспорт
	
	Хранилища = ПодключенныеХранилищаЧерезДополнительнуюОбработку(Параметры.ВнешнийПодключаемыйМодуль);
	
	Если Не Хранилища = Неопределено И Хранилища.Количество() > 0 Тогда
		СтруктураПараметров = Новый Структура("Хранилища, СоглашениеЭД", Хранилища, СоглашениеЭД);
		ОткрытьФорму("Обработка.ОбменЭлектроннымиДокументамиСБанком.Форма.ВыборХранилища", СтруктураПараметров, , , , , ОО);
	Иначе
		ТекстСообщения = Нстр("ru = 'Для выполнения операции необходимо подключить банковский ключ к компьютеру'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ВыполнитьОбработкуОповещения(ОО);
	КонецЕсли
	
КонецПроцедуры

// Вызывается из НачатьПроверкуСтатусовПодписейЧерезДополнительнуюОбработку и,
// по обработке оповещения, из ВыбратьХранилищеЧерезДополнительнуюОбработку.
// Осуществляет проверку валидности подписей.
//
// Параметры
//    ДоступноеХранилище - хранилище сертификатов.
//    Параметры                 - Структура:
//       ВнешнийПодключаемыйМодуль           - внешний подключаемый модуль.
//       МассивЭДДляПроверкиЧерезДополнительнуюОбработку - Массив - ЭД в которых надо проверить статусы подписей.
//       ОбработчикПродолжения     - ОписаниеОповещения - (необязательный) описание, которое надо выполнить
//                                           после завершения отработки текущих ЭД (МассивЭДКПодписи).
//       ОповеститьОПроверкеЭП               - Строка - (необязательный) признак необходимости выполнить "Оповестить()".
//
Процедура ВыполнитьПроверкуСтатусовПодписейЧерезДополнительнуюОбработку(ДоступноеХранилище, Параметры) Экспорт
	
	Если ДоступноеХранилище <> Неопределено Тогда
		ВнешнийПодключаемыйМодуль = Параметры.ВнешнийПодключаемыйМодуль;
		МассивЭД = Параметры.МассивЭДДляПроверкиЧерезДополнительнуюОбработку;
		Для Каждого ЭД Из МассивЭД Цикл
			СтруктураСодержимогоЭД = ЭлектронныеДокументыСлужебныйВызовСервера.СтруктураСодержимогоЭД(ЭД);
			
			РезультатПроверки = Новый Массив;
			Для Каждого СтрокаЭП Из СтруктураСодержимогоЭД.Подписи Цикл
				СтруктураЗаписи = Новый Структура("НомерСтроки", СтрокаЭП.НомерСтроки);
				Попытка
					ДвоичныеДанныеЭП = СтрокаЭП.Подпись;
					СертификатXML = СтрокаЭП.Сертификат;
					ДопПараметры = Новый Структура("ИдентификаторХранилища", ДоступноеХранилище);
					ПодписьВалидна = ВнешнийПодключаемыйМодуль.ПроверитьПодпись(
						СертификатXML, СтруктураСодержимогоЭД.ДанныеЭД, ДвоичныеДанныеЭП, ДопПараметры);
					СтруктураЗаписи.Вставить("Результат", ПодписьВалидна);
					РезультатПроверки.Добавить(СтруктураЗаписи);
				Исключение
					ШаблонОшибки = НСтр("ru = 'Ошибка проверки подписи.
											|Код ошибки: %1
											|%2'");
					ДеталиОшибки = ВнешнийПодключаемыйМодуль.ДеталиОшибки();
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										ШаблонОшибки, ДеталиОшибки.Код, ДеталиОшибки.Сообщение);
					Операция = НСтр("ru = 'Проверка подписи'");
					ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
										Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
				КонецПопытки;
			КонецЦикла;
			
			ЭлектронныеДокументыСлужебныйВызовСервера.СохранитьРезультатыПроверкиПодписей(ЭД, РезультатПроверки);
		КонецЦикла;
		
		Если Параметры.Свойство("ОповеститьОПроверкеЭП") Тогда
			Оповестить("ПроведенаПроверкаЭП", МассивЭД);
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеОповещения = Неопределено;
	Если Параметры.Свойство("ОбработчикПродолжения", ОписаниеОповещения)
		И ТипЗнч(ОписаниеОповещения) = Тип("ОписаниеОповещения") Тогда
		
		Результат = Неопределено;
		Параметры.Свойство("РезультатПодписания", Результат);
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Результат);
	КонецЕсли;
	
КонецПроцедуры


Процедура ПродолжитьТестСоглашенияПослеВводаПароляКСертификатуЧерезДополнительнуюОбработку(ПараметрВозврата, Параметры) Экспорт
	
	ИдентификаторНазначения = Параметры.ИдентификаторНазначения;
	
	Если Параметры.СоотвСертификатовИИхСтруктур.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не введен пароль для сертификата.
									|Тест прерван.'");
		СообщитьПользователю(ТекстСообщения, ИдентификаторНазначения);
		Возврат;
	КонецЕсли;
	
	
	ПарольПользователя = Неопределено;
	ВыбранныйСертификат = Неопределено;
	ПараметрВозврата.Свойство("ПарольПользователя", ПарольПользователя);
	//ПараметрВозврата.Свойство("ВыбранныйСертификат", ВыбранныйСертификат);
	Для Каждого КлючИЗначение Из Параметры.СоотвСертификатовИИхСтруктур Цикл
		ПараметрыСертификата = КлючИЗначение.Значение;
		ПараметрыСертификата.ПарольПользователя = ПарольПользователя;
		//ВыбранныйСертификат = КлючИЗначение.Ключ;
		Прервать;
	КонецЦикла;
	
	ВнешнийПодключаемыйМодуль = Параметры.ВнешнийПодключаемыйМодуль;
	СоглашениеЭД = Параметры.СоглашениеЭД;
	
	РезультатТеста = НСтр("ru = 'Пройден успешно.'");
	
	СертификатXML = ПараметрыСертификата.ДанныеСертификата;
		
	// Блок чтения данных сертификата.
	ОписаниеТеста = НСтр("ru = 'Тест. Чтение данных сертификата.'");
	СообщитьПользователю(ОписаниеТеста, ИдентификаторНазначения);
	ДанныеСертификата = ДанныеСертификатаЧерезДополнительнуюОбработку(ВнешнийПодключаемыйМодуль, СертификатXML);
	Если ДанныеСертификата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СообщитьПользователю(РезультатТеста, ИдентификаторНазначения);
	
	// Блок проверка наличия установленного PIN-кода.
	ОписаниеТеста = НСтр("ru = 'Тест. Проверка наличия PIN-кода на хранилище.'");
	СообщитьПользователю(ОписаниеТеста, ИдентификаторНазначения);
	ТребуетсяПИН = ТребуетсяУстановкаPINКодаХранилищаЧерезДополнительнуюОбработку(ВнешнийПодключаемыйМодуль,
	                                                  ДанныеСертификата.ИдентификаторХранилища);
	Если ТребуетсяПИН = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СообщитьПользователю(РезультатТеста, ИдентификаторНазначения);
	
	Параметры.Вставить("СертификатXML", СертификатXML);
	Параметры.Вставить("ПарольПользователя", ПарольПользователя);
	Параметры.Вставить("ДанныеСертификата", ДанныеСертификата);
	Параметры.Вставить("ИмяПроцедуры", "ПродолжитьТестСоглашенияЧерезДополнительнуюОбработкуПослеАутентификации");
	Параметры.Вставить("Модуль", ЭтотОбъект);
	Параметры.Вставить("ПараметрыСертификата", ПараметрыСертификата);
	Параметры.Вставить("ИдентификаторХранилища", ДанныеСертификата.ИдентификаторХранилища);
	
	// Блок проверка установки PIN-кода.
	Если ТребуетсяПИН Тогда
		ОписаниеТеста = НСтр("ru = 'Тест. Установка PIN-кода на хранилище.'");
		СообщитьПользователю(ОписаниеТеста, ИдентификаторНазначения);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ИдентификаторХранилища", ДанныеСертификата.ИдентификаторХранилища);
		ПараметрыФормы.Вставить("СоглашениеЭД", СоглашениеЭД);
		Параметры.Вставить("УстановленPINКод");
		ОООЗ = Новый ОписаниеОповещения(
			"ПродолжитьТестСоглашенияЧерезДополнительнуюОбработкуПослеВводаPINКода", ЭтотОбъект, Параметры);
		ОткрытьФорму("Обработка.ОбменЭлектроннымиДокументамиСБанком.Форма.ЗапросPINКода", ПараметрыФормы, , , , , ОООЗ);
		Возврат;
	КонецЕсли;
	ПродолжитьТестСоглашенияЧерезДополнительнуюОбработку(Параметры);
	
КонецПроцедуры

//Получает внешний интерфейс дополнительной обработки
//
// Параметры:
//  СоглашениеЭД  - СправочникСсылка.СоглашенияОбИспользованииЭД - ссылка на соглашение
//
// Возвращаемое значение:
//  Форма - форма внешней обработки или Неопределено, если не удалось получить внешний интерфейс
//
Функция ВнешнийПодключаемыйМодульЧерезДополнительнуюОбработку(СоглашениеЭД) Экспорт

	Перем НоваяВерсияОбработки;
	Перем ИмяОбъекта;
	Перем АдресФайла;
	
	ПараметрыПодсистемыОбменСБанками = ПараметрыПриложения["ОбменСБанками.Параметры"];
	Если ПараметрыПодсистемыОбменСБанками = Неопределено Тогда
		ПараметрыПриложения.Вставить("ОбменСБанками.Параметры", Новый Соответствие);
		ПараметрыПодсистемыОбменСБанками = ПараметрыПриложения["ОбменСБанками.Параметры"];
	Иначе
		ПараметрыОбмена = ПараметрыПодсистемыОбменСБанками.Получить(СоглашениеЭД);
		Если ПараметрыОбмена <> Неопределено И ПараметрыОбмена.Свойство("Версия") Тогда
			ОбработкаПодключена = ЭлектронныеДокументыСлужебныйВызовСервера.ПодключитьВнешнююОбработку(
					СоглашениеЭД, ПараметрыОбмена.Версия, НоваяВерсияОбработки, ИмяОбъекта, АдресФайла);
			Если НЕ ОбработкаПодключена Тогда
				Возврат Неопределено;
			КонецЕсли;
			Если ПараметрыОбмена.Версия <> НоваяВерсияОбработки Тогда
				ОбработкаИнициализирована = ИнициализироватьИнтерфейсДополнительнойОбработки(
									СоглашениеЭД, НоваяВерсияОбработки, ИмяОбъекта, АдресФайла);
				Если Не ОбработкаИнициализирована Тогда
					Возврат Неопределено;
				КонецЕсли;
				ПараметрыОбмена = ПараметрыПодсистемыОбменСБанками.Получить(СоглашениеЭД);
			КонецЕсли;
			Возврат ПараметрыОбмена.ПодключаемыйМодуль;
		КонецЕсли;
	КонецЕсли;
	
	ВнешняяОбработкаПодключена = ЭлектронныеДокументыСлужебныйВызовСервера.ПодключитьВнешнююОбработку(
								СоглашениеЭД, Неопределено, НоваяВерсияОбработки, ИмяОбъекта, АдресФайла);
	
	Если Не ВнешняяОбработкаПодключена Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОбработкаИнициализирована = ИнициализироватьИнтерфейсДополнительнойОбработки(
						СоглашениеЭД, НоваяВерсияОбработки, ИмяОбъекта, АдресФайла);
	
	Если Не ОбработкаИнициализирована Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыОбмена = ПараметрыПодсистемыОбменСБанками.Получить(СоглашениеЭД);
	
	Возврат ПараметрыОбмена.ПодключаемыйМодуль;
	
КонецФункции

// Устанавливает пароль для установки соединения с банком
//
// Параметры:
//  ВнешнийПодключаемыйМодуль  - Управляемая Форма - внешняя управляемая форма
//  СертификатXML  - Строка - Содержит данные сертификата
//  Пароль  - Строка - пароль сертификата
//
// Возвращаемое значение:
//   Булево   - пароль верный или нет
//
Функция УстановитьПарольСертификатаЧерезДополнительнуюОбработку(ВнешнийПодключаемыйМодуль, СертификатXML, Пароль) Экспорт
	
	Попытка
		УстановленПарольСертификата = ВнешнийПодключаемыйМодуль.УстановленПарольСертификата(СертификатXML) = Истина;
	Исключение
		УстановленПарольСертификата = Ложь;
	КонецПопытки;
	
	Если Не УстановленПарольСертификата Тогда
		Попытка
			ВнешнийПодключаемыйМодуль.УстановитьПарольСертификата(СертификатXML, Пароль);
		Исключение
			ШаблонОшибки = НСтр("ru = 'Ошибка установки пароля сертификата.
										|Код ошибки: %1
										|%2'");
			ДеталиОшибки = ВнешнийПодключаемыйМодуль.ДеталиОшибки();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																ШаблонОшибки,
																ДеталиОшибки.Код,
																ДеталиОшибки.Сообщение);
			Операция = НСтр("ru = 'Установка пароля сертификата'");
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция,
																						ПодробноеПредставлениеОшибки,
																						ТекстСообщения,
																						1);
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет наличие уже установленного PIN код для хранилища
//
// Параметры:
//  ВнешнийПодключаемыйМодуль  - Управляемая Форма - внешняя управляемая форма
//  ИдентификаторХранилища  - Строка - идентификатор хранилища
//
// Возвращаемое значение:
//   Булево, Неопределено - Истина - пин-код установлен установлен ранее, Ложь - пин код не установлен,
//                          Неопределено - произошла ошибка
//
Функция УстановленPINКодХранилищаЧерезДополнительнуюОбработку(ВнешнийПодключаемыйМодуль, ИдентификаторХранилища) Экспорт
	
	Попытка
		УстановленPINКодХранилища = ВнешнийПодключаемыйМодуль.УстановленPINКодХранилища(ИдентификаторХранилища);
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка проверки установленного PIN-кода.
								|Код ошибки: %1
								|%2'");
		ДеталиОшибки = ВнешнийПодключаемыйМодуль.ДеталиОшибки();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
		                                                                         ДеталиОшибки.Код,
		                                                                         ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Проверка наличия установленного PIN-кода'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция,
		                                                                            ПодробноеПредставлениеОшибки,
		                                                                            ТекстСообщения,
		                                                                            1);
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат УстановленPINКодХранилища;
	
КонецФункции

// Открывает форму ввода пин-кода
//
// Параметры:
//  СоглашениеЭД  - СправочникСсылка.СоглашенияОбИспользованииЭД - ссылка на настройки обмена с банком
//  ИдентификаторХранилища  - Строка - идентификатор хранилища
//  ОписаниеОповещенияОЗакрытии - ОписаниеОповещения - возврат после ввода PIN-кода
//
Процедура НачатьУстановкуPINКодаХранилища(СоглашениеЭД, ИдентификаторХранилища, ОписаниеОповещенияОЗакрытии) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СоглашениеЭД", СоглашениеЭД);
	ПараметрыФормы.Вставить("ИдентификаторХранилища", ИдентификаторХранилища);
	ОткрытьФорму("Обработка.ОбменЭлектроннымиДокументамиСБанком.Форма.ЗапросPINКода", ПараметрыФормы, , , , ,
																				ОписаниеОповещенияОЗакрытии);
	
КонецПроцедуры

// Отправляет запрос в банк
//
// Параметры
//  ВнешнийПодключаемыйМодуль  - Управляемая Форма - внешняя управляемая форма
//  СертификатXML  - строка - данные сертификата
//  ТипЗапроса  - Число - тип запроса
//  ДанныеОтправки  - Структура - данные для отправки
//
// Возвращаемое значение:
//  Соответствие или Неопределено -  результат выполнения
//
Функция ОтправитьЗапросЧерезДополнительнуюОбработку(ВнешнийПодключаемыйМодуль, СертификатXML, ТипЗапроса, ДанныеОтправки) Экспорт

	Попытка
		Результат = ВнешнийПодключаемыйМодуль.ОтправитьЗапрос(СертификатXML, ТипЗапроса, ДанныеОтправки);
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка отправки данных.
		                          |Код ошибки: %1
		                          |%2'");
		ДеталиОшибки = ВнешнийПодключаемыйМодуль.ДеталиОшибки();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
		                                                                         ДеталиОшибки.Код,
		                                                                         ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Отправка данных'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция,
																					ПодробноеПредставлениеОшибки,
																					ТекстСообщения,
																					1);
	КонецПопытки;
	
	Возврат Результат

КонецФункции 

// Получает данные сертификата в виде структуры данных
//
// Параметры
//  ВнешнийПодключаемыйМодуль  - Управляемая Форма - внешняя управляемая форма
//  СертификатXML  - Строка - сертифкат в виде строки
//
// Возвращаемое значение:
//  Структура или Неопределено -  Данные сертификата в виде структуры
//
Функция ДанныеСертификатаЧерезДополнительнуюОбработку(ВнешнийПодключаемыйМодуль, СертификатXML) Экспорт
	
	Попытка
		ДанныеСертификата = ВнешнийПодключаемыйМодуль.ДанныеСертификата(СертификатXML);
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка получения данных сертификата.
									|Код ошибки: %1
									|%2'");
		ДеталиОшибки = ВнешнийПодключаемыйМодуль.ДеталиОшибки();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
															ШаблонОшибки,
															ДеталиОшибки.Код,
															ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Получение данных сертификата'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция,
																					ПодробноеПредставлениеОшибки,
																					ТекстСообщения,
																					1);
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ДанныеСертификата;
	
КонецФункции

Процедура НачатьТестСоглашенияЧерезДополнительнуюОбработку(Параметры) Экспорт
	
	ДоступныеСертификаты = Параметры.ДоступныеСертификаты;
	СоглашениеЭД = Параметры.СоглашениеЭД;
	ИдентификаторНазначения = Параметры.ИдентификаторНазначения;
	РезультатТеста = НСтр("ru = 'Пройден успешно.'");
	
	ВнешнийПодключаемыйМодуль = ВнешнийПодключаемыйМодульЧерезДополнительнуюОбработку(СоглашениеЭД);
	
	Если ВнешнийПодключаемыйМодуль = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Тест не пройден.'");
		СообщитьПользователю(ТекстСообщения, ИдентификаторНазначения);
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("УстановленаВнешняяКомпонента") Тогда
		СообщитьПользователю(РезультатТеста, ИдентификаторНазначения);
		Параметры.Удалить("УстановленаВнешняяКомпонента");
	КонецЕсли;
	
	Параметры.Вставить("ВнешнийПодключаемыйМодуль", ВнешнийПодключаемыйМодуль);
	
	ТекущийИндекс = 0;
	Для Каждого Элемент ИЗ ДоступныеСертификаты Цикл
		
		ТекущийИндекс = ТекущийИндекс + 1;
		Если ТекущийИндекс <= Параметры.ИндексТестаСертификата Тогда
			Продолжить;
		КонецЕсли;
		Параметры.ИндексТестаСертификата = ТекущийИндекс;
		
		ПараметрыСертификата = Элемент.Значение;
		
		ТекстСообщения = Нстр("ru = 'Проверка сертификата: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Элемент.Ключ);
		СообщитьПользователю(ТекстСообщения, ИдентификаторНазначения);
		
		Соответствие = Новый Соответствие;
		Соответствие.Вставить(Элемент.Ключ, ПараметрыСертификата);
		
		Параметры.Вставить("СоотвСертификатовИИхСтруктур", Соответствие);
		
		Если НЕ ПарольКСертификатуПолучен2(Соответствие, НСтр("ru = 'Аутентификация на ресурсе банка'")) Тогда
			ОООЗ = Новый ОписаниеОповещения(
				"ПродолжитьТестСоглашенияПослеВводаПароляКСертификатуЧерезДополнительнуюОбработку", ЭтотОбъект, Параметры);
			Параметры.Вставить("ВызватьОповещение", ОООЗ);
			ПолучитьПарольКСертификату(Соответствие, НСтр("ru = 'Аутентификация на ресурсе банка'"), , , Параметры);
			Возврат;
		КонецЕсли;
		
		ПродолжитьТестСоглашенияПослеВводаПароляКСертификатуЧерезДополнительнуюОбработку(Неопределено, Параметры);
		Возврат;
	КонецЦикла;
	
	Если ДоступныеСертификаты.Количество() = 0 Тогда
		ТекстСообщения = Нстр("ru = 'Проверка проведена не полностью, т.к. в соглашении отсутствуют сертификаты подписи'");
		СообщитьПользователю(ТекстСообщения, ИдентификаторНазначения);
		Возврат;
	КонецЕсли;
	
	// Блок проверки отправки тестового запроса.
	ОписаниеТеста = НСтр("ru = 'Тест. Отправка тестового запроса.'");
	СообщитьПользователю(ОписаниеТеста, ИдентификаторНазначения);
	
	СертификатXML = Параметры.СертификатXML;
	
	Попытка
		ВнешнийПодключаемыйМодуль.ОтправитьЗапрос(СертификатXML, 1);
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка отправки тестового запроса.
									|Код ошибки: %1
									|%2'");
		ДеталиОшибки = ВнешнийПодключаемыйМодуль.ДеталиОшибки();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ШаблонОшибки, ДеталиОшибки.Код, ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Отправка тестового запроса'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
			Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
		Возврат;
	КонецПопытки;
	СообщитьПользователю(РезультатТеста, ИдентификаторНазначения);
	
КонецПроцедуры

//Получает массив идентификаторов хранилищ, подключенных к компьютеру
//
// Параметры:
//  ВнешнийПодключаемыйМодуль  - Управляемая Форма - внешняя управляемая форма
//
// Возвращаемое значение:
//  Массив - идентификаторы хранилищ или Неопределено в случае ошибки
//
Функция ПодключенныеХранилищаЧерезДополнительнуюОбработку(ВнешнийПодключаемыйМодуль) Экспорт
	
	Попытка
		Устройства = ВнешнийПодключаемыйМодуль.ХранилищаСертификатов();
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка при поиске подключенных хранилищ.
		                          |Код ошибки: %1
		                          |%2'");
		ДеталиОшибки = ВнешнийПодключаемыйМодуль.ДеталиОшибки();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ШаблонОшибки, ДеталиОшибки.Код, ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Поиск хранилищ'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
							Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
		Возврат Неопределено;
	КонецПопытки;
	
	Если Устройства.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не найдено ни одного хранилища.
									|Убедитесь, что устройство подключено к компьютеру и повторите операцию'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат Устройства;
	
КонецФункции

// Устанавливает соединение с банком
//
// Параметры:
//  СоглашениеЭД - СправочникСсылка.СоглашенияОбИспользованииЭД - соглашение с банком
//  ВнешнийПодключаемыйМодуль  - Управляемая Форма - внешняя управляемая форма
//  СертификатXML  - Строка - Содержит данные сертификата
//  Параметры - Структура - контекст выполнения метода
//  АутентификацияВыполнена - Булево - Истина - соединение установлено, иначе Ложь
//
Процедура УстановитьСоединениеЧерезДополнительнуюОбработку(СоглашениеЭД, ВнешнийПодключаемыйМодуль, СертификатXML, Параметры, АутентификацияВыполнена) Экспорт
	
	АутентификацияВыполнена = Ложь;
	Попытка
		
		Если НЕ ВнешнийПодключаемыйМодуль.УстановитьСоединение(СертификатXML) Тогда
			ПараметрыРасширеннойАутентификации = Неопределено;
			ТребуетсяРасширеннаяАутентификация = ВнешнийПодключаемыйМодуль.ТребуетсяРасширеннаяАутентификация(
															СертификатXML, ПараметрыРасширеннойАутентификации);
			Если ТребуетсяРасширеннаяАутентификация Тогда
				Если ПараметрыРасширеннойАутентификации.Способы.Количество() = 0 Тогда
					ВызватьИсключение НСтр("ru = 'Не определены способы расширенной аутентификации.'");
				КонецЕсли;
				Если НЕ ПараметрыРасширеннойАутентификации.Способы.Свойство("SMS") Тогда
					ВызватьИсключение НСтр("ru = 'Расширенная аутентификация по SMS не поддерживается.'");
				КонецЕсли;
				ОдноразовыйПароль = Неопределено;
				ОООЗ = Новый ОписаниеОповещения(Параметры.ИмяПроцедуры, Параметры.Модуль, Параметры);
				РасширеннаяАутентификация(СоглашениеЭД, СертификатXML, ПараметрыРасширеннойАутентификации, ОООЗ);

			Иначе
				ВызватьИсключение НСтр("ru = 'Ошибка установки соединения'");
			КонецЕсли;
		Иначе
			АутентификацияВыполнена = Истина;

		КонецЕсли;
		
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка установки соединения.
									|Код ошибки: %1
									|%2'");
		ДеталиОшибки = ВнешнийПодключаемыйМодуль.ДеталиОшибки();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ШаблонОшибки, ДеталиОшибки.Код, ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Установка соединения'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
							Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
		ОписаниеОповещения = Неопределено;
		Если Параметры.Свойство("ОбработчикПродолжения", ОписаниеОповещения)
			И ТипЗнч(ОписаниеОповещения) = Тип("ОписаниеОповещения") Тогда
			
			ВыполнитьОбработкуОповещения(ОписаниеОповещения);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

// Проверяет, нужно ли устанавливать пин-код
//
// Параметры
//  ВнешнийПодключаемыйМодуль  - Управляемая Форма - внешняя управляемая форма
//  ИдентификаторХранилища - Строка - идентификатор хранилища
//
// Возвращаемое значение:
//  Булево или Неопределено - нужно установить PIN или Неопределено при возникновении ошибки
//
Функция ТребуетсяУстановкаPINКодаХранилищаЧерезДополнительнуюОбработку(ВнешнийПодключаемыйМодуль, ИдентификаторХранилища) Экспорт
	
	Попытка
		ТребуетсяПИН = ВнешнийПодключаемыйМодуль.ТребуетсяУстановкаPINКодаХранилища(ИдентификаторХранилища);
	Исключение
		ОчиститьСообщения();
		ШаблонОшибки = НСтр("ru = 'Ошибка проверки необходимости ввода PIN-кода.
								|Код ошибки: %1
								|%2'");
		ДеталиОшибки = ВнешнийПодключаемыйМодуль.ДеталиОшибки();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
		                                                                         ДеталиОшибки.Код,
		                                                                         ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Проверка необходимости ввода PIN-кода'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция,
		                                                                            ПодробноеПредставлениеОшибки,
		                                                                            ТекстСообщения,
		                                                                            1);
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ТребуетсяПИН;
	
КонецФункции

// Функция проверяет, получен ли ранее пароль для авторизации на сервере банка.
// Параметры:
//  СоглашениеЭД - СправочникСсылка.СоглашенияОбИспользованииЭД - ссылка на соглашение с банком
//  ДанныеАвторизации - Структура, содержит следующие записи
//    * Пользователь - строка - имя пользователя
//    * Пароль - Строка - пароль пользователя
//
// Возвращаемое значение:
//  Булево - Истина - если пароль для сертификата ЭП получен ранее, иначе - Ложь.
//
Функция ПолученыДанныеАвторизации(СоглашениеЭД, ДанныеАвторизации) Экспорт
	
	Если Не ЗначениеЗаполнено(СоглашениеЭД) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СоответствиеСертификатаИПароля = ПараметрыПриложения["ЭлектронноеВзаимодействие.СоответствиеСертификатаИПароля"];
	Если ТипЗнч(СоответствиеСертификатаИПароля) = Тип("ФиксированноеСоответствие") Тогда
		ДанныеАвторизации = СоответствиеСертификатаИПароля.Получить(СоглашениеЭД);
		Если ЗначениеЗаполнено(ДанныеАвторизации) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ПродолжитьТестСоглашенияЧерезДополнительнуюОбработкуПослеАутентификации(АутентификацияВыполнена, Параметры) Экспорт
	
	Если Не АутентификацияВыполнена = Истина Тогда
		Возврат;
	КонецЕсли;

	ИдентификаторНазначения = Параметры.ИдентификаторНазначения;
	ПараметрыСертификата = Параметры.ПараметрыСертификата;
	ВнешнийПодключаемыйМодуль = Параметры.ВнешнийПодключаемыйМодуль;
	СертификатXML = Параметры.СертификатXML;
	ДанныеСертификата = Параметры.ДанныеСертификата;
	
	РезультатТеста = НСтр("ru = 'Пройден успешно.'");

	СообщитьПользователю(РезультатТеста, ИдентификаторНазначения);
		
	// Блок проверка установки подписи для данных.
	ОписаниеТеста = НСтр("ru = 'Тест. Установка подписи.'");
	СообщитьПользователю(ОписаниеТеста, ИдентификаторНазначения);
	ОтпечатокBase64 = ЭлектронныеДокументыСлужебныйВызовСервера.СтрокаBase64БезBOM(ПараметрыСертификата.Отпечаток);
	ДвоичныеДанные = Base64Значение(ОтпечатокBase64);
	МассивПодписи = Новый Массив;
	МассивПодписи.Добавить(ДвоичныеДанные);
	ПараметрыПодписи = Новый Структура("Пароль", ПараметрыСертификата.ПарольПользователя);
	Попытка
		МассивПодписей = ВнешнийПодключаемыйМодуль.Подписать(СертификатXML, МассивПодписи, ПараметрыПодписи);
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка установки подписи.
									|Код ошибки: %1
									|%2'");
		ДеталиОшибки = ВнешнийПодключаемыйМодуль.ДеталиОшибки();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
															ШаблонОшибки,
															ДеталиОшибки.Код,
															ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Установка подписии'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция,
																					ПодробноеПредставлениеОшибки,
																					ТекстСообщения,
																					1);
		Возврат;
	КонецПопытки;
	СообщитьПользователю(РезультатТеста, ИдентификаторНазначения);
	
	// Блок проверка подписи.
	ОписаниеТеста = НСтр("ru = 'Тест. Проверка подписи.'");
	СообщитьПользователю(ОписаниеТеста, ИдентификаторНазначения);
	Попытка
		ДопПараметры = Новый Структура("ИдентификаторХранилища", ДанныеСертификата.ИдентификаторХранилища);
		ПодписьВалидна = ВнешнийПодключаемыйМодуль.ПроверитьПодпись(СертификатXML,
		                                                            ДвоичныеДанные,
		                                                            МассивПодписей[0],
		                                                            ДопПараметры);
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка проверки подписи.
								|Код ошибки: %1
								|%2'");
		ДеталиОшибки = ВнешнийПодключаемыйМодуль.ДеталиОшибки();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
															ШаблонОшибки,
															ДеталиОшибки.Код,
															ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Проверка подписи'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция,
																					ПодробноеПредставлениеОшибки,
																					ТекстСообщения,
																					1);
		Возврат;
	КонецПопытки;
	Если НЕ ПодписьВалидна Тогда
		СообщитьПользователю(НСтр("ru = 'Подпись не валидна'"), ИдентификаторНазначения);
		Возврат;
	КонецЕсли;
	СообщитьПользователю(РезультатТеста, ИдентификаторНазначения);

	НачатьТестСоглашенияЧерезДополнительнуюОбработку(Параметры);
	
КонецПроцедуры

Процедура ПродолжитьТестСоглашенияЧерезДополнительнуюОбработкуПослеВводаPINКода(PINКод, Параметры) Экспорт
	
	СоглашениеЭД = Параметры.СоглашениеЭД;
	
	Если НЕ PINКод = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВнешнийПодключаемыйМодуль = ВнешнийПодключаемыйМодульЧерезДополнительнуюОбработку(СоглашениеЭД);
	Если ВнешнийПодключаемыйМодуль = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПинКодУстановлен = УстановитьPINКодХранилищаЧерезДополнительнуюОбработку(
			ВнешнийПодключаемыйМодуль, Параметры.ИдентификаторХранилища, PINКод);
			
	Если Не ПинКодУстановлен Тогда
		Возврат;
	КонецЕсли;
		
	ПродолжитьТестСоглашенияЧерезДополнительнуюОбработку(Параметры)
	
КонецПроцедуры

Процедура ТестСоглашенияЧерезДополнительнуюОбработку(СоглашениеЭД, ИдентификаторНазначения)
	
	Перем ВерсияОбработки, ИмяОбъекта, АдресФайла;
		
	РезультатТеста = НСтр("ru = 'Пройден успешно.'");
	
	// Блок проверки наличия внешней обработки для обмена с банком
	ОписаниеТеста = НСтр("ru = 'Тест. Проверка наличия внешней обработки для обмена с банком.'");
	СообщитьПользователю(ОписаниеТеста, ИдентификаторНазначения);
	ВнешняяОбработкаПодключена = ЭлектронныеДокументыСлужебныйВызовСервера.ПодключитьВнешнююОбработку(
								СоглашениеЭД, ВерсияОбработки, ВерсияОбработки, ИмяОбъекта, АдресФайла);
	Если Не ВнешняяОбработкаПодключена Тогда
		Возврат;
	КонецЕсли;
	СообщитьПользователю(РезультатТеста, ИдентификаторНазначения);
	
	// Блок инициализации интерфейса.
	ОписаниеТеста = НСтр("ru = 'Тест. Инициализация служебного интерфейса.'");
	СообщитьПользователю(ОписаниеТеста, ИдентификаторНазначения);
	
	ДоступныеСертификаты = ЭлектронныеДокументыСлужебныйВызовСервера.ДоступныеСертификаты(СоглашениеЭД);
	
	Параметры = Новый Структура;
	Параметры.Вставить("ИндексТестаСертификата", 0);
	Параметры.Вставить("ДоступныеСертификаты", ДоступныеСертификаты);
	Параметры.Вставить("ИдентификаторНазначения", ИдентификаторНазначения);
	Параметры.Вставить("СоглашениеЭД", СоглашениеЭД);
	
	ВнешнийПодключаемыйМодуль = ВнешнийПодключаемыйМодульЧерезДополнительнуюОбработку(СоглашениеЭД);
	
	Если ВнешнийПодключаемыйМодуль = Неопределено Тогда
		ПараметрыПодсистемыОбменСБанками = ПараметрыПриложения["ОбменСБанками.Параметры"];
		Если ПараметрыПодсистемыОбменСБанками <> Неопределено Тогда
			ПараметрыСоглашения = ПараметрыПодсистемыОбменСБанками.Получить(СоглашениеЭД);
			Если ЗначениеЗаполнено(ПараметрыСоглашения) И ПараметрыСоглашения.Свойство("АдресКомпоненты") Тогда
				Параметры.Вставить("ТекущееСоглашениеЭДЧерезДополнительнуюОбработку", СоглашениеЭД);
				Параметры.Вставить("УстановленаВнешняяКомпонента");
				ОО = Новый ОписаниеОповещения("НачатьТестСоглашенияЧерезДополнительнуюОбработку", ЭтотОбъект, Параметры);
				НачатьУстановкуВнешнейКомпоненты(ОО, ПараметрыСоглашения.АдресКомпоненты);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	НачатьТестСоглашенияЧерезДополнительнуюОбработку(Параметры);
	
КонецПроцедуры

Функция АктуаленКэшПароляСертификатаЧерезДополнительнуюОбработку(ДанныеСертификата, МассивЭД) Экспорт
	
	СоглашениеЭД = ЭлектронныеДокументыСлужебныйВызовСервера.СоглашениеЭД(МассивЭД[0]);
	ВнешнийПодключаемыйМодуль = ВнешнийПодключаемыйМодульЧерезДополнительнуюОбработку(СоглашениеЭД);
	Если ВнешнийПодключаемыйМодуль = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	РеквизитыСертификата = ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыСертификата(
													ДанныеСертификата.СертификатПодписи);
	
	СлужебныеДанныеСертификата = ДанныеСертификатаЧерезДополнительнуюОбработку(ВнешнийПодключаемыйМодуль,
												РеквизитыСертификата.ДвоичныеДанныеСертификата);
		
	Если СлужебныеДанныеСертификата = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	ТребуетсяУстановкаPINКодаХранилищаЧерезДополнительнуюОбработку = ТребуетсяУстановкаPINКодаХранилищаЧерезДополнительнуюОбработку(
														ВнешнийПодключаемыйМодуль, СлужебныеДанныеСертификата.ИдентификаторХранилища);
	Если НЕ ТребуетсяУстановкаPINКодаХранилищаЧерезДополнительнуюОбработку = Ложь Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		УстановленПарольСертификата = ВнешнийПодключаемыйМодуль.УстановленПарольСертификата(
												РеквизитыСертификата.ДвоичныеДанныеСертификата);
		Возврат УстановленПарольСертификата = Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;

КонецФункции

Функция ИнициализироватьИнтерфейсДополнительнойОбработки(СоглашениеЭД, ВерсияОбработки, ИмяОбъекта, АдресФайла)
	
	Если ЗначениеЗаполнено(АдресФайла) Тогда
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			ВремФайл = ПолучитьИмяВременногоФайла("epf");
			ДвоичныеДанныеОбработки = ПолучитьИзВременногоХранилища(АдресФайла);
			ДвоичныеДанныеОбработки.Записать(ВремФайл);
			ПодключаемыйМодуль = ВнешниеОбработки.ПолучитьФорму(ВремФайл);
		#КонецЕсли
	Иначе
		ИмяФормы = "ВнешняяОбработка." + ИмяОбъекта + ".Форма";
		ПодключаемыйМодуль = ПолучитьФорму(ИмяФормы, Новый Структура("РежимЭДО", Истина), , Новый УникальныйИдентификатор);
	КонецЕсли;
	
	ПараметрыПодсистемыОбменСБанками = ПараметрыПриложения["ОбменСБанками.Параметры"];
	Если ПараметрыПодсистемыОбменСБанками = Неопределено Тогда
		ПараметрыПриложения.Вставить("ОбменСБанками.Параметры", Новый Соответствие);
		ПараметрыПодсистемыОбменСБанками = ПараметрыПриложения["ОбменСБанками.Параметры"];
	КонецЕсли;

	Попытка
		ОписаниеОбработки = ПодключаемыйМодуль.ОписаниеОбработки();
		ВерсияAPI = ОписаниеОбработки.ВерсияAPI;
	Исключение
		ВерсияAPI = 1;
	КонецПопытки;
		
	Если ВерсияAPI = 1 Тогда
		Попытка
			ПодключаемыйМодуль.Инициализировать();
		Исключение
			ШаблонОшибки = НСтр("ru = 'Ошибка инициализации дополнительной обработки.
										|Код ошибки: %1
										|%2'");
			ДеталиОшибки = ПодключаемыйМодуль.ДеталиОшибки();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонОшибки, ДеталиОшибки.Код, ДеталиОшибки.Сообщение);
			Операция = НСтр("ru = 'Инициализация внешней обработки'");
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
								Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
			Возврат Ложь;
		КонецПопытки;
	Иначе
		Попытка
			АдресКомпоненты = "";
			ИнициализацияВыполнена = ПодключаемыйМодуль.НачатьИнициализацию(АдресКомпоненты);
		Исключение
			ШаблонОшибки = НСтр("ru = 'Ошибка инициализации дополнительной обработки.
										|Код ошибки: %1
										|%2'");
			ДеталиОшибки = ПодключаемыйМодуль.ДеталиОшибки();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонОшибки, ДеталиОшибки.Код, ДеталиОшибки.Сообщение);
			Операция = НСтр("ru = 'Инициализация внешней обработки'");
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
								Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
			Возврат Ложь;
		КонецПопытки;
		
		Если НЕ ИнициализацияВыполнена Тогда
			Если ЗначениеЗаполнено(ПараметрыПодсистемыОбменСБанками) Тогда
				ПараметрыСоглашения = ПараметрыПодсистемыОбменСБанками.Получить(СоглашениеЭД);
				Если ЗначениеЗаполнено(ПараметрыСоглашения) И ПараметрыСоглашения.Свойство("АдресКомпоненты") Тогда
					УдалитьИзВременногоХранилища(ПараметрыСоглашения.АдресКомпоненты);
					ПараметрыПодсистемыОбменСБанками.Удалить(СоглашениеЭД);
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(АдресКомпоненты) Тогда
				Параметры = Новый Структура;
				Параметры.Вставить("АдресКомпоненты", АдресКомпоненты);
				ПараметрыПодсистемыОбменСБанками.Вставить(СоглашениеЭД, Параметры);
			КонецЕсли;
			Возврат Ложь;
		Иначе
			Попытка
				ПодключаемыйМодуль.ЗавершитьИнициализацию();
			Исключение
				ШаблонОшибки = НСтр("ru = 'Ошибка завершения инициализации.
											|Код ошибки: %1
											|%2'");
				ДеталиОшибки = ПодключаемыйМодуль.ДеталиОшибки();
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									ШаблонОшибки, ДеталиОшибки.Код, ДеталиОшибки.Сообщение);
				Операция = НСтр("ru = 'Завершение инициализации внешней обработки'");
				ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
									Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;

	КонецЕсли;
	
	ПараметрыПодсистемыОбменСБанками = ПараметрыПриложения["ОбменСБанками.Параметры"];
	Если ПараметрыПодсистемыОбменСБанками = Неопределено Тогда
		ПараметрыПриложения.Вставить("ОбменСБанками.Параметры", Новый Соответствие);
		ПараметрыПодсистемыОбменСБанками = ПараметрыПриложения["ОбменСБанками.Параметры"];
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("ПодключаемыйМодуль", ПодключаемыйМодуль);
	Параметры.Вставить("Версия",             ВерсияОбработки);
	ПараметрыПодсистемыОбменСБанками.Вставить(СоглашениеЭД, Параметры);
	
	Возврат Истина;
	
КонецФункции

Процедура ПродолжитьПолучениеВыпискиЧерезДополнительнуюОбработку(Параметры)
	
	ВнешнийПодключаемыйМодуль = Параметры.ВнешнийПодключаемыйМодуль;
	СоглашениеЭД = Параметры.СоглашениеЭД;
	
	ДанныеСертификата = Параметры.ДанныеСертификата;
	ПарольПользователя = Параметры.ПарольПользователя;
	
	ПарольУстановлен = УстановитьПарольСертификатаЧерезДополнительнуюОбработку(
		ВнешнийПодключаемыйМодуль, ДанныеСертификата.ДвоичныеДанныеСертификата, ПарольПользователя);
	Если НЕ ПарольУстановлен Тогда
		Возврат;
	КонецЕсли;
	
	СоединениеУстановлено = Ложь;
	УстановитьСоединениеЧерезДополнительнуюОбработку(СоглашениеЭД, ВнешнийПодключаемыйМодуль, ДанныеСертификата.ДвоичныеДанныеСертификата,
																					Параметры, СоединениеУстановлено);
	Если Не СоединениеУстановлено Тогда
		Возврат;
	КонецЕсли;
	
	ПродолжитьПолучениеВыписки(СоединениеУстановлено, Параметры);
	
КонецПроцедуры

Процедура ПродолжитьТестСоглашенияЧерезДополнительнуюОбработку(Параметры)
	
	СоглашениеЭД = Параметры.СоглашениеЭД;
	
	ИдентификаторНазначения = Параметры.ИдентификаторНазначения;
	ВнешнийПодключаемыйМодуль = Параметры.ВнешнийПодключаемыйМодуль;
	СертификатXML = Параметры.СертификатXML;
	ПарольПользователя = Параметры.ПарольПользователя;
		
	РезультатТеста = НСтр("ru = 'Пройден успешно.'");
	
	Если Параметры.Свойство("УстановленPINКод") Тогда
		СообщитьПользователю(РезультатТеста, ИдентификаторНазначения);
	КонецЕсли;
	
	// Блок проверка авторизации на ресурсе банка.
	ОписаниеТеста = НСтр("ru = 'Тест. Аутентификация на ресурсе банка.'");
	СообщитьПользователю(ОписаниеТеста, ИдентификаторНазначения);
	ВидОперации = НСтр("ru = 'Аутентификация на ресурсе банка'");
	Попытка
		ВнешнийПодключаемыйМодуль.УстановитьПарольСертификата(СертификатXML, ПарольПользователя);
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка авторизации на ресурсе банка.
									|Код ошибки: %1
									|%2'");
		ДеталиОшибки = ВнешнийПодключаемыйМодуль.ДеталиОшибки();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ШаблонОшибки, ДеталиОшибки.Код, ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Аутентификация на ресурсе банка'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
			Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
		Возврат;
	КонецПопытки;
	СообщитьПользователю(РезультатТеста, ИдентификаторНазначения);
	
	// Блок проверка установки соединения с банком.
	ОписаниеТеста = НСтр("ru = 'Тест. Установка соединения с банком.'");
	СообщитьПользователю(ОписаниеТеста, ИдентификаторНазначения);
	АутентификацияВыполнена = Ложь;
	
	УстановитьСоединениеЧерезДополнительнуюОбработку(
		СоглашениеЭД, ВнешнийПодключаемыйМодуль, СертификатXML, Параметры, АутентификацияВыполнена);
	Если АутентификацияВыполнена Тогда
		ПродолжитьТестСоглашенияЧерезДополнительнуюОбработкуПослеАутентификации(АутентификацияВыполнена, Параметры);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрямойОбменСоСбербанком

Процедура ТестСоглашенияСбербанк(СоглашениеЭД, Параметры = Неопределено) Экспорт
		
	КаналСоздан = Ложь;
	
	ОО = Новый ОписаниеОповещения("ТестСоглашенияСбербанк", ЭтотОбъект, Параметры);
	УстановитьВиртуальныйКаналСоСбербанком(СоглашениеЭД, КаналСоздан, ОО, Параметры);
	
	Если Не КаналСоздан Тогда
		Возврат;
	КонецЕсли;
	
	ПодключаемыйМодуль1С = ПараметрыПриложения["ОбменСБанками.Параметры"].Получить("AddIn.SBRF.SBRFServiceProxy");
	
	Попытка
		
		ТестоваяСтрока = "Test from 1C";
		XDTOРезультат = ПодключаемыйМодуль1С.sendRequests(ТестоваяСтрока);
		ТекстСообщения = НСтр("ru = 'Тест выполнен успешно !'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);

	Исключение
		
		ВидОперации = НСтр("ru = 'Тест соединения'");
		ТекстСообщения = Нстр("ru = 'Нет связи с сервером банка'") + Символы.ПС
						+ НСтр("ru = 'Подробности в журнале регистрации'");
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
									ВидОперации, ОписаниеОшибки(), ТекстСообщения, 1);
		
	КонецПопытки;
	
КонецПроцедуры

// Осуществляет отправку платежных поручений в банк
//
// Параметры
//  НастройкаЭДО  - СправочникСсылка.СоглашениеОбИспользованииЭД - НастройкаЭДО для прямого обмена с банком
//  Параметры - Структура - параметры отправки документов
//
Процедура ОтправитьПлатежныеПорученияСбербанк(НастройкаЭДО, Параметры) Экспорт

	МассивЭД = Параметры.ДанныеДляОтправкиВСбербанк.Получить(НастройкаЭДО);
	Параметры.ДанныеДляОтправкиВСбербанк.Удалить(НастройкаЭДО);

	Если НЕ ЗначениеЗаполнено(НастройкаЭДО) Тогда
		ОтправитьДокументыВСбербанк(Параметры);
		Возврат;
	КонецЕсли;

	КаналСоздан = Ложь;
	ОО = Новый ОписаниеОповещения("ОтправитьПлатежныеПорученияСбербанк", ЭтотОбъект, Параметры);
	
	УстановитьВиртуальныйКаналСоСбербанком(НастройкаЭДО, КаналСоздан, ОО, Параметры);
	Если Не КаналСоздан Тогда
		ОтправитьДокументыВСбербанк(Параметры);
		Возврат;
	КонецЕсли;
	
	ПодключаемыйМодуль1С = ПараметрыПриложения["ОбменСБанками.Параметры"].Получить("AddIn.SBRF.SBRFServiceProxy");
	
	КолОтправленных = 0;
	
	МассивОтправленныхЭД = Новый Массив;
	
	ДанныеСертификатовПодписи = ЭлектронныеДокументыСлужебныйВызовСервера.ДанныеСертификатовПодписи(МассивЭД);

	ПодключаемыйМодуль = ПараметрыПриложения["ОбменСБанками.Параметры"].Получить("AddIn.CryptoExtension.VPNKeyTLS");
	
	Для Каждого ЭД Из МассивЭД Цикл
		Попытка
			
			ИдентификаторЗапроса = Неопределено;
			ИдентификаторОрганизации = Неопределено;
			ПакетXML = ЭлектронныеДокументыСлужебныйВызовСервера.ПакетXMLСберБанка(
				ЭД, НастройкаЭДО, ИдентификаторЗапроса, ИдентификаторОрганизации);
			
			Ответ = ПодключаемыйМодуль1С.sendRequests(ПакетXML);
			
			ОписаниеСобытия = Нстр("ru = 'Отправка платежного поручения'");
			ЭлектронныеДокументыСлужебныйВызовСервера.ЗаписатьСобытиеВЖурналАудита(НастройкаЭДО, ОписаниеСобытия, ПакетXML);
			Событие = НСтр("ru = 'Получен тикет на отправку платежного поручения'");
			ЭлектронныеДокументыСлужебныйВызовСервера.ЗаписатьСобытиеВЖурналАудита(НастройкаЭДО, Событие, Ответ);
			
			МассивИдентификаторов = Новый Массив;
			Если Сред(Ответ, 1, 23) = "00000000-0000-0000-0000" Тогда
				ОпределитьОшибкуИСообщитьПользователю(НастройкаЭДО, ЭД, ИдентификаторЗапроса, ИдентификаторОрганизации, Ответ);
			Иначе
				МассивОтправленныхЭД.Добавить(ЭД);
				МассивИдентификаторов.Добавить(Ответ);
				КолОтправленных = КолОтправленных + 1;
			КонецЕсли;
			ВидЭДПлатежноеПоручение = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПлатежноеПоручение");
			ЭлектронныеДокументыСлужебныйВызовСервера.СохранитьИдентификаторы(
				МассивИдентификаторов, НастройкаЭДО, ВидЭДПлатежноеПоручение);
		
		Исключение
			ВидОперации = НСтр("ru = 'Отправка платежных поручений в банк'");
			ТекстСообщения = Нстр("ru = 'Нет связи с сервером банка'") + Символы.ПС
							+ НСтр("ru = 'Подробности в журнале регистрации'");
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
				ВидОперации, ОписаниеОшибки(), ТекстСообщения, 1);
			ОтправитьДокументыВСбербанк(Параметры);
			Возврат;
		КонецПопытки;
	КонецЦикла;
	Параметры.ИтогКолОтправленных = Параметры.ИтогКолОтправленных + КолОтправленных;
	СтатусОтправлен = ПредопределенноеЗначение("Перечисление.СтатусыЭД.Отправлен");
	ЭлектронныеДокументыСлужебныйВызовСервера.УстановитьСтатусыЭД(МассивОтправленныхЭД, СтатусОтправлен);
	ОтправитьДокументыВСбербанк(Параметры);

КонецПроцедуры

// Отправляет в банк запрос на ночные выписки
//
// Параметры
//  СоглашениеЭД  - СправочникСсылка.СоглашенияОбИспользованииЭД - соглашение со Сбербанком
//  Параметры - Структура - данные для обработки
//
Процедура ОтправитьЗапросНаНочныеВыпискиСбербанк(СоглашениеЭД, Параметры) Экспорт
	
	ТекущееСоглашениеЭД = ЗначениеИзКэша("ТекущееСоглашениеЭД");
	Если НЕ СоглашениеЭД = ТекущееСоглашениеЭД И ЗначениеЗаполнено(ТекущееСоглашениеЭД) Тогда
		СессияЗавершена = Ложь;
		ЗавершитьСессиюНаТокене(СессияЗавершена);
		Если НЕ СессияЗавершена Тогда
			Если Параметры.Свойство("ОповещениеПослеПолученияНовыхДокументов") Тогда
				ВыполнитьОбработкуОповещения(Параметры.ОповещениеПослеПолученияНовыхДокументов, Ложь);
			КонецЕсли;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ (ЗначениеЗаполнено(ЗначениеИзКэша("ТекущееСоглашениеЭД"))
				И ЗначениеЗаполнено(ЗначениеИзКэша("НомерКонтейнера"))) Тогда
		ПараметрыФормы = Новый Структура("СоглашениеЭД", СоглашениеЭД);
		Оповещение = Новый ОписаниеОповещения("ВыполнитьОтправкуЗапросовНаНочныеВыпискиСбербанк", ЭтотОбъект, Параметры);
		ОткрытьФорму("Обработка.ОбменЭлектроннымиДокументамиСБанком.Форма.ЗапросДанныхАутентификацииСбербанк",
						ПараметрыФормы, , , , , Оповещение);
	Иначе
		ВыполнитьОтправкуЗапросовНаНочныеВыпискиСбербанк(СоглашениеЭД, Параметры);
	КонецЕсли;
		
КонецПроцедуры

// Выполняет отправку в сбербанк запроса на ночные выписки после авторизации
//
// Параметры
//  <НастройкаЭДО>  - <СправочникСсылка.СоглашенияОбИспользованииЭД> - соглашение
//
Процедура ВыполнитьОтправкуЗапросовНаНочныеВыпискиСбербанк(НастройкаЭДО, Параметры = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(НастройкаЭДО) Тогда
		Если Параметры.Свойство("ОповещениеПослеПолученияНовыхДокументов") Тогда
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПослеПолученияНовыхДокументов, Ложь);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("НастройкаЭДО", НастройкаЭДО);
	
	ОписаниеОбработчика = Новый ОписаниеОповещения(
		"ПослеПодключенияВнешнейКомпонентыОтправитьЗапросНаНочныеВыпискиСбербанк", ЭтотОбъект, Параметры);
	ПараметрыВК = Новый Структура;
	ПараметрыВК.Вставить("ОбработчикПослеПодключенияКомпоненты", ОписаниеОбработчика);
	ПараметрыВК.Вставить("ИмяМодуля", "AddIn.CryptoExtension.VPNKeyTLS");
	ПараметрыВК.Вставить("Имя", "CryptoExtension");
	ПараметрыВК.Вставить("Тип", ТипВнешнейКомпоненты.Native);
	ПараметрыВК.Вставить("ПрограммаБанка", ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн"));
	Параметры.Вставить("ПараметрыВК", ПараметрыВК);
	Параметры.Вставить("НастройкаЭДО", НастройкаЭДО);
	
	ПодключитьВнешнююКомпонентуБанка(Параметры);
	
КонецПроцедуры

// Получает статусы и идентификаторы отправленных платежных документов
//
// Параметры
//  НастройкаЭДО  - СправочникСсылка.СоглашениеОбИспользованииЭД - настройка ЭДО со сбербанком
//  ВидЭД  - Перечисление.ВидыЭД - вид электронного документа
//  Параметры - Структура - дополнительные параметры
//
Процедура ПолучитьРезультатыОбработкиЗапросовСбербанк(Знач НастройкаЭДО, ВидЭД, Параметры = Неопределено) Экспорт
	
	СтрокаЗапроса = "";
	ИдентификаторЗапроса = "";
	МассивИдентификаторов = ЭлектронныеДокументыСлужебныйВызовСервера.МассивИдентификаторовЗапроса(НастройкаЭДО, ВидЭД);
	
	РеквизитыСоглашения = ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыНастройкиЭДО(НастройкаЭДО);
	
	ПодключаемыйМодуль1С = ПараметрыПриложения["ОбменСБанками.Параметры"].Получить("AddIn.SBRF.SBRFServiceProxy");
	
	МассивЭДДляПроверки = Новый Массив;
	
	Для Каждого Идентификатор ИЗ МассивИдентификаторов Цикл
	
		Попытка
			
			Ответ = ПодключаемыйМодуль1С.getRequestStatus(Идентификатор, РеквизитыСоглашения.ИдентификаторОрганизации);
			Если ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПлатежноеПоручение") Тогда
				ОписаниеОтправки = Нстр("ru = 'Отправлен идентификатор отправленного платежного поручения'");
				ОписаниеПолучения = Нстр("ru = 'Получен статус обработки отправленного платежного поручения'");
			ИначеЕсли ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ЗапросВыписки") Тогда
				ОписаниеОтправки = Нстр("ru = 'Отправлен идентификатор отправленного запроса банковской выписки'");
				ОписаниеПолучения = Нстр("ru = 'Получен статус обработки отправленного запроса банковской выписки'");
			ИначеЕсли ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ЗапросНочнойВыписки") Тогда
				ОписаниеОтправки = Нстр("ru = 'Отправлен идентификатор отправленного запроса готовых выписок'");
				ОписаниеПолучения = Нстр("ru = 'Получена выписка банка'");
			ИначеЕсли ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ВыпискаБанка") Тогда
				ОписаниеОтправки = Нстр("ru = 'Отправлен идентификатор отправленного запроса выписки банка'");
				ОписаниеПолучения = Нстр("ru = 'Получен статус обработки отправленного запроса банковской выписки'");
			КонецЕсли;
			ЭлектронныеДокументыСлужебныйВызовСервера.ЗаписатьСобытиеВЖурналАудита(
				НастройкаЭДО, ОписаниеОтправки, Идентификатор);
			ЭлектронныеДокументыСлужебныйВызовСервера.ЗаписатьСобытиеВЖурналАудита(
				НастройкаЭДО, ОписаниеПолучения, Ответ);
			
			МассивНовыхЭД = Новый Массив;
			Если Ответ = "<!--NOT PROCESSED YET-->" ИЛИ Ответ = "<!--NOT_PROCESSED_YET-->" Тогда
				Продолжить; // Запрос еще не был обработан
			ИначеЕсли Ответ = "<!--REQUEST NOT FOUND-->" ИЛИ Ответ = "<!--REQUEST_NOT_FOUND-->" Тогда
				ЭлектронныеДокументыСлужебныйВызовСервера.УдалитьИдентификаторЗапроса(НастройкаЭДО, Идентификатор, ВидЭД);
				Продолжить; // идентифкатор не найден в базе банка
			КонецЕсли;
				
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьОтветСбербанка(
						Ответ, НастройкаЭДО, ВидЭД, МассивНовыхЭД, Идентификатор);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивЭДДляПроверки, МассивНовыхЭД);
		
		Исключение
			
			ВидОперации = НСтр("ru = 'Получение информации о результатах обработки документов'");
			ТекстСообщения = Нстр("ru = 'Нет связи с сервером банка'") + Символы.ПС
							+ НСтр("ru = 'Подробности в журнале регистрации'");
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
				ВидОперации, ОписаниеОшибки(), ТекстСообщения, 1);
			Если Параметры.Свойство("ОповещениеПослеПолученияНовыхДокументов") Тогда
				ВыполнитьОбработкуОповещения(Параметры.ОповещениеПослеПолученияНовыхДокументов, Ложь);
				Возврат;
			КонецЕсли;
			Прервать;

		КонецПопытки;

	КонецЦикла;
	
	ПараметрыПроверки = Новый Структура("МассивЭДДляПроверкиЭПСбербанк", МассивЭДДляПроверки);
	ПараметрыПроверки.Вставить("ИндексПроверкиЭПСбербанка", 0);
	ОпределитьСтатусыПодписейСбербанка(НастройкаЭДО, ПараметрыПроверки);
	
	Оповестить("ОбновитьСостояниеЭД");
	
	Если ЗначениеЗаполнено(Параметры) Тогда
		Если Параметры.Свойство("ПолучитьРезультатыОбработкиВыпискиБанка") Тогда
			Параметры.Удалить("ПолучитьРезультатыОбработкиВыпискиБанка");
			ПолучитьРезультатыОбработкиЗапросовСбербанк(
				НастройкаЭДО, ПредопределенноеЗначение("Перечисление.ВидыЭД.ВыпискаБанка"), Параметры);
			Возврат;
		ИначеЕсли Параметры.Свойство("ПолучитьРезультатыОбработкиПлатежныхПоручений") Тогда
			Параметры.Удалить("ПолучитьРезультатыОбработкиПлатежныхПоручений");
			ПолучитьРезультатыОбработкиЗапросовСбербанк(
				НастройкаЭДО, ПредопределенноеЗначение("Перечисление.ВидыЭД.ПлатежноеПоручение"), Параметры);
			Возврат;
		ИначеЕсли Параметры.Свойство("ПолучитьРезультатыОбработкиЗапросовНочнойВыписки") Тогда
			Параметры.Удалить("ПолучитьРезультатыОбработкиЗапросовНочнойВыписки");
			ПолучитьРезультатыОбработкиЗапросовСбербанк(
				НастройкаЭДО, ПредопределенноеЗначение("Перечисление.ВидыЭД.ЗапросНочнойВыписки"), Параметры);
			Возврат;
		ИначеЕсли Параметры.Свойство("ОтправитьЗапросНаПолучениеГотовыхВыписокСбербанк") Тогда
				Параметры.Удалить("ОтправитьЗапросНаПолучениеГотовыхВыписокСбербанк");
			ОтправитьЗапросНаПолучениеГотовыхВыписокСбербанк(НастройкаЭДО, Параметры);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры) И Параметры.Свойство("ВыполнитьОбменСБанками") Тогда
		Параметры.Удалить("ВыполнитьОбменСБанками");
		ВыполнитьОбменСБанками(Неопределено, Параметры);
	КонецЕсли;
	
КонецПроцедуры

// Добавляет подпись для документа сбербанка с использованием токена
//
// Параметры
//  НастройкаЭДО  - СправочникСсылка.СоглашенияОбИспользованииЭД - настройка прямого обмена с банком
//  ДобавленныеФайлы - Массив - массив подписываемых электронных документов
//  СертификатПодписи  - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - ссылка на сертификат подписи
//  Параметры  - Структура - контекст выполнения
//
Процедура ПодписатьЭДСбербанкаОпределеннымСертификатом(НастройкаЭДО, ДобавленныеФайлы, СертификатПодписи, Параметры) Экспорт
	
	Параметры.Вставить("ДобавленныеФайлыСбербанка", ДобавленныеФайлы);
	
	ТекущееСоглашениеЭД = ЗначениеИзКэша("ТекущееСоглашениеЭД");
	Если НЕ НастройкаЭДО = ТекущееСоглашениеЭД И ЗначениеЗаполнено(ТекущееСоглашениеЭД) Тогда
		СессияЗавершена = Ложь;
		ЗавершитьСессиюНаТокене(СессияЗавершена);
		Если НЕ СессияЗавершена Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СертификатПодписи) Тогда
		Если НЕ СертификатПодписи = ЗначениеИзКэша("СертификатПодписи") Тогда
			
			ЗакэшироватьПараметрСбербанка("СертификатПодписи", СертификатПодписи);

			ПараметрыФормы = Новый Структура("СоглашениеЭД", НастройкаЭДО);
		
			Оповещение = Новый ОписаниеОповещения("ПодписатьЭДСбербанка", ЭтотОбъект, Параметры);
			
			ОткрытьФорму("Обработка.ОбменЭлектроннымиДокументамиСБанком.Форма.ЗапросДанныхАутентификацииСбербанк",
							ПараметрыФормы, , , , , Оповещение);
			Возврат;
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(ЗначениеИзКэша("ТекущееСоглашениеЭД"))
		ИЛИ НЕ ЗначениеЗаполнено(ЗначениеИзКэша("НомерКонтейнера")) Тогда
		
		ПараметрыФормы = Новый Структура("СоглашениеЭД", НастройкаЭДО);
		ЗакэшироватьПараметрСбербанка("СертификатПодписи", СертификатПодписи);
		
		Оповещение = Новый ОписаниеОповещения("ПодписатьЭДСбербанка", ЭтотОбъект, Параметры);
		
		ОткрытьФорму("Обработка.ОбменЭлектроннымиДокументамиСБанком.Форма.ЗапросДанныхАутентификацииСбербанк",
					ПараметрыФормы, , , , , Оповещение);
		Возврат;
	КонецЕсли;
		
	ПодписатьЭДСбербанка(НастройкаЭДО, Параметры)
	
КонецПроцедуры

// Добавляет подпись для документа сбербанка после авторизации
//
// Параметры
//  СоглашениеЭД  - СправочникСсылка.СоглашенияОбИспользованииЭДО - соглашение с банком
//  ДобавленныеФайлы  - Массив - содержит ссылки на Справочник.ЭДПрисоединенныеФайлы
//
Процедура ПодписатьЭДСбербанка(НастройкаЭДО, Параметры) Экспорт
	
	ДобавленныеФайлы = Параметры.ДобавленныеФайлыСбербанка;
	
	Если Не ЗначениеЗаполнено(НастройкаЭДО) Тогда
		Возврат;
	КонецЕсли;

	Параметры.Вставить("НастройкаЭДО", НастройкаЭДО);
	ОписаниеОбработчика = Новый ОписаниеОповещения(
		"ПослеПодключенияКомпонентыПодписатьЭДСбербанка", ЭтотОбъект, Параметры);
	ПараметрыВК = Новый Структура;
	ПараметрыВК.Вставить("ОбработчикПослеПодключенияКомпоненты", ОписаниеОбработчика);
	ПараметрыВК.Вставить("ИмяМодуля", "AddIn.CryptoExtension.VPNKeyTLS");
	ПараметрыВК.Вставить("Имя", "CryptoExtension");
	ПараметрыВК.Вставить("Тип", ТипВнешнейКомпоненты.Native);
	ПараметрыВК.Вставить("ПрограммаБанка", ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн"));
	Параметры.Вставить("ПараметрыВК", ПараметрыВК);
	Параметры.Вставить("НастройкаЭДО", НастройкаЭДО);
	
	ПодключитьВнешнююКомпонентуБанка(Параметры);
	
КонецПроцедуры

Процедура ПослеПодключенияКомпонентыПодписатьЭДСбербанка(ПодключаемыйМодуль, Параметры) Экспорт
	
	НастройкаЭДО = Параметры.НастройкаЭДО;
	
	Если ПодключаемыйМодуль = Неопределено Тогда
		Возврат;
	КонецЕсли;

	КаналУстановлен = Ложь;
	ОО = Новый ОписаниеОповещения("ПодписатьЭДСбербанка", ЭтотОбъект, Параметры);
	УстановитьВиртуальныйКаналСоСбербанком(НастройкаЭДО, КаналУстановлен, ОО, Параметры);
	
	Если Не КаналУстановлен Тогда
		Возврат;
	КонецЕсли;
	
	ОпределитьСертификатПодписиСбербанк(НастройкаЭДО, "ПослеВыбораСертификатаПодписатьЭДСбербанк", Параметры);
	
КонецПроцедуры

// Определяет валидность установленных подписей и сохраняет результат в ЭД
//
// Параметры:
// СоглашениеЭД - СправочникСсылка.СоглашенияОбИспользованииЭД - соглашение со Сбербанком
// Параметры - Структура - содержит данные для обработки
//
Процедура ОпределитьСтатусыПодписейСбербанка(НастройкаЭДО, Параметры) Экспорт

	Параметры.Вставить("НастройкаЭДО", НастройкаЭДО);
	ОписаниеОбработчика = Новый ОписаниеОповещения(
		"ПослеПодключенияКомпонентыОпределитьСтатусыПодписейСбербанка", ЭтотОбъект, Параметры);

	ПараметрыВК = Новый Структура;
	ПараметрыВК.Вставить("ОбработчикПослеПодключенияКомпоненты", ОписаниеОбработчика);
	ПараметрыВК.Вставить("ИмяМодуля", "AddIn.CryptoExtension.VPNKeyTLS");
	ПараметрыВК.Вставить("Имя", "CryptoExtension");
	ПараметрыВК.Вставить("Тип", ТипВнешнейКомпоненты.Native);
	ПараметрыВК.Вставить("ПрограммаБанка", ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн"));
	Параметры.Вставить("ПараметрыВК", ПараметрыВК);
	Параметры.Вставить("НастройкаЭДО", НастройкаЭДО);
	
	ПодключитьВнешнююКомпонентуБанка(Параметры);

КонецПроцедуры

// Устанавливает зашифрованный канал с банком через токен
//
// Параметры
//  <СоглашениеЭД>  - <СправочникСсылка.СоглашениеОбИспользованииЭД> - соглашение об обмене электронными документами
//  <КаналСоздан>  - <Булево> - признак, что канал создан
//
Процедура УстановитьВиртуальныйКаналСоСбербанком(НастройкаЭДО, КаналСоздан, ОО, Параметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(НастройкаЭДО) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеИзКэша("КаналУстановлен") = Истина И ЗначениеИзКэша("ТекущееСоглашениеЭД") = НастройкаЭДО Тогда
		КаналСоздан = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("НастройкаЭДО", НастройкаЭДО);
	Параметры.Вставить("ОповещениеПослеУстановкиВиртуальногоКанала", ОО);
	
	ОписаниеОбработчика = Новый ОписаниеОповещения(
		"ПослеПодключенияКомпонентыУстановитьВиртуальныйКаналСбербанк", ЭтотОбъект, Параметры);

	ПараметрыВК = Новый Структура;
	ПараметрыВК.Вставить("ОбработчикПослеПодключенияКомпоненты", ОписаниеОбработчика);
	ПараметрыВК.Вставить("ИмяМодуля", "AddIn.CryptoExtension.VPNKeyTLS");
	ПараметрыВК.Вставить("Имя", "CryptoExtension");
	ПараметрыВК.Вставить("Тип", ТипВнешнейКомпоненты.Native);
	ПараметрыВК.Вставить("ПрограммаБанка", ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн"));
	Параметры.Вставить("ПараметрыВК", ПараметрыВК);
	
	ПодключитьВнешнююКомпонентуБанка(Параметры);

КонецПроцедуры

Процедура ОтправитьЗапросВыпискиПослеУстановленияКаналаСбербанк(НастройкаЭДО, Параметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(НастройкаЭДО) Тогда
		Возврат;
	КонецЕсли;
	
	ВладелецФормы = Параметры.Владелец;
	
	Параметры.Удалить("Владелец");
	Параметры.Удалить("ПараметрыВК");
	Параметры.Удалить("ОповещениеПослеУстановкиВиртуальногоКанала");
	ОткрытьФорму("Обработка.ОбменЭлектроннымиДокументамиСБанком.Форма.ЗапросВБанк", Параметры, ВладелецФормы);

КонецПроцедуры

// Выполняет кэширование данных авторизации на сервере сбербанка
//
// Параметры
//  Название  - Строка - название кэшируемого параметра
//  Значение  - Произвольный - значение кэшируемого параметра
//
Процедура ЗакэшироватьПараметрСбербанка(Название, Значение) Экспорт
	
	ПараметрыПодсистемыОбменСБанками = ПараметрыПриложения["ОбменСБанками.Параметры"];
	Если ТипЗнч(ПараметрыПодсистемыОбменСБанками) <> Тип("Соответствие") Тогда
		ПараметрыПриложения.Вставить("ОбменСБанками.Параметры", Новый Соответствие);
		ПараметрыПодсистемыОбменСБанками = ПараметрыПриложения["ОбменСБанками.Параметры"];
	КонецЕсли;
	
	ПараметрыОбменаСбербанк = ПараметрыПодсистемыОбменСБанками.Получить("Сбербанк");
	
	Если ПараметрыОбменаСбербанк = Неопределено Тогда
		ПараметрыОбменаСбербанк = Новый Структура;
	КонецЕсли;
	
	ПараметрыОбменаСбербанк.Вставить(Название, Значение);
	ПараметрыПодсистемыОбменСБанками.Вставить("Сбербанк", ПараметрыОбменаСбербанк);
	
КонецПроцедуры

// Завершает открытую сессию на токене Сбербанка
//
// Параметры:
//  СессияЗавершена  - Булево - если сессию удалось завершить, возвращает Истина, иначе Ложь
//
Процедура ЗавершитьСессиюНаТокене(СессияЗавершена) Экспорт
	
	ПодключаемыйМодуль = ПараметрыПриложения["ОбменСБанками.Параметры"].Получить("AddIn.CryptoExtension.VPNKeyTLS");
	Рез = ПодключаемыйМодуль.ЗавершитьСессию();
	ОчиститьДанныеАвторизацииСбербанк();
	ЕстьОшибка = НЕ (Рез = 0);
	Если ЕстьОшибка Тогда
		ОчиститьСообщения();
		ТекстСообщения = НСтр("ru = 'Не удалось завершить сессию на токене.
									|Необходим перезапуск токена'");
		ТекстОшибки = НСтр("ru = 'Компонента AddIn.Bicrypt при завершении сессии на токене вернула код ошибки'") + Рез;
		Операция = НСтр("ru = 'Завершение сессии на токене.'");
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция, ТекстОшибки, ТекстСообщения, 1);
	Иначе
		ЗакэшироватьПараметрСбербанка("КаналУстановлен", Ложь);
	КонецЕсли;
	
	СессияЗавершена = НЕ ЕстьОшибка;
	
КонецПроцедуры

// Возвращает закэшированный параметр обмена со сбербанком
//
// Параметры
//  НазваниеПараметра  - Строка - название параметра
//
// Возвращаемое значение:
// Произвольный - значение параметра
//
Функция ЗначениеИзКэша(НазваниеПараметра) Экспорт
	
	ПараметрыПодсистемыОбменСБанками = ПараметрыПриложения["ОбменСБанками.Параметры"];
	Если ТипЗнч(ПараметрыПодсистемыОбменСБанками) = Тип("Соответствие") Тогда
		ПараметрыОбменаСбербанк = ПараметрыПодсистемыОбменСБанками.Получить("Сбербанк");
		Если ПараметрыОбменаСбербанк <> Неопределено И ПараметрыОбменаСбербанк.Свойство(НазваниеПараметра) Тогда
			Возврат ПараметрыОбменаСбербанк[НазваниеПараметра];
		КонецЕсли;
	КонецЕсли;
	
КонецФункции
// Выполняет очистку закэшированных параметров обмена со Сбербанком
//
Процедура ОчиститьДанныеАвторизацииСбербанк() Экспорт
	
	ПараметрыПодсистемыОбменСБанками = ПараметрыПриложения["ОбменСБанками.Параметры"];
	Если ТипЗнч(ПараметрыПодсистемыОбменСБанками) = Тип("Соответствие") Тогда
		ПараметрыПодсистемыОбменСБанками.Удалить("Сбербанк");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьВводДанныхАутентификацииСбербанка(НастройкаЭДО, Параметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(НастройкаЭДО) Тогда
		Возврат
	КонецЕсли;
	
	КаналСоздан = Ложь;
	
	Если ЗначениеИзКэша("КаналУстановлен") = Истина Тогда
		КаналСоздан = Истина
	Иначе
		ОписаниеОбработчика = Новый ОписаниеОповещения("ОбработатьВводДанныхАутентификацииСбербанка", ЭтотОбъект, Параметры);
		УстановитьВиртуальныйКаналСоСбербанком(НастройкаЭДО, КаналСоздан, ОписаниеОбработчика, Параметры);
	КонецЕсли;
		
	Если КаналСоздан Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОО, НастройкаЭДО);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет процедуру аутентификации на банковском ключе
//
// Параметры
//  СоглашениеЭД  - СправочникСсылка.СоглашенияОбИспользованииЭД - ссылка на соглашение с банком
//  Параметры - Структура - содержит дополнительные параметры
//    * АвторизацияВыполнена - Булево - признак удачной аутентификации
//    * ПринудительнаяАутентификация - Булево - Истина, если проводить аутентификацию даже если она была выполнена ранее,
//                                              Ложь, проводить аутентификацию только если она еще не производилась
//
Процедура ПровестиАутентификациюНаТокенеСбербанка(НастройкаЭДО, Параметры) Экспорт
	
	Параметры.Вставить("НастройкаЭДО", НастройкаЭДО);
	ОписаниеОбработчика = Новый ОписаниеОповещения(
		"ПослеПодключенияКомпонентыПровестиАутентификациюНаТокенеСбербанка", ЭтотОбъект, Параметры);
	ПараметрыВК = Новый Структура;
	ПараметрыВК.Вставить("ОбработчикПослеПодключенияКомпоненты", ОписаниеОбработчика);
	ПараметрыВК.Вставить("ИмяМодуля", "AddIn.CryptoExtension.VPNKeyTLS");
	ПараметрыВК.Вставить("Имя", "CryptoExtension");
	ПараметрыВК.Вставить("Тип", ТипВнешнейКомпоненты.Native);
	ПараметрыВК.Вставить("ПрограммаБанка", ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн"));
	Параметры.Вставить("ПараметрыВК", ПараметрыВК);
	Параметры.Вставить("НастройкаЭДО", НастройкаЭДО);

	ПодключитьВнешнююКомпонентуБанка(Параметры);

КонецПроцедуры

// Отправляет в банк запрос на получение готовых  выписок банка
//
// Параметры
//  <НастройкаЭДО> - <СправочникСсылка.СоглашениеОбИспользованииЭД> - настройка ЭДО с банком
//
Процедура ОтправитьЗапросНаПолучениеГотовыхВыписокСбербанк(НастройкаЭДО, Параметры) Экспорт
	
	МассивЗапросов = ЭлектронныеДокументыСлужебныйВызовСервера.ТекстыЗапросаСостоянийЗапросовВыпискиБанка(НастройкаЭДО);
		
	Если НЕ МассивЗапросов.Количество() Тогда
		Если Параметры.Свойство("ОповещениеПослеПолученияНовыхДокументов") Тогда
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПослеПолученияНовыхДокументов, Истина);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаЗначение Из МассивЗапросов Цикл
		
		ПодключаемыйМодуль1С = ПараметрыПриложения["ОбменСБанками.Параметры"].Получить("AddIn.SBRF.SBRFServiceProxy");

		Попытка
			Ответ = ПодключаемыйМодуль1С.sendRequests(СтрокаЗначение);
		Исключение
			ВидОперации = НСтр("ru = 'Получение банковских выписок'");
			ТекстСообщения = Нстр("ru = 'Нет связи с сервером банка.
										|Подробности в журнале регистрации'");
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
				ВидОперации, ОписаниеОшибки(), ТекстСообщения, 1);
			Возврат;
		КонецПопытки;

		Описание = НСтр("ru = 'Оправлен запрос состояния обработки запроса выписки'");

		ЭлектронныеДокументыСлужебныйВызовСервера.ЗаписатьСобытиеВЖурналАудита(
			НастройкаЭДО, Описание, СтрокаЗначение);
		МассивИдентификаторов = Новый Массив;
		МассивИдентификаторов.Добавить(Ответ);
		ТипЭДВыпискаБанка = ПредопределенноеЗначение("Перечисление.ВидыЭД.ВыпискаБанка");
		ЭлектронныеДокументыСлужебныйВызовСервера.СохранитьИдентификаторы(
			МассивИдентификаторов, НастройкаЭДО, ТипЭДВыпискаБанка);
	
		Описание = НСтр("ru = 'Получен идентификатор извещения о состоянии обработки запроса выписки'");
		ЭлектронныеДокументыСлужебныйВызовСервера.ЗаписатьСобытиеВЖурналАудита(
			НастройкаЭДО, Описание, Ответ);
		ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ВыпискаБанка");
		ПолучитьРезультатыОбработкиЗапросовСбербанк(НастройкаЭДО, ВидЭД, Параметры);
	КонецЦикла;
	
	Если Параметры.Свойство("ОповещениеПослеПолученияНовыхДокументов") Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПослеПолученияНовыхДокументов, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьЗапросВыпискиСбербанк(НастройкаЭДО, Параметры) Экспорт
	
	КаналСоздан = Ложь;
	ОО = Новый ОписаниеОповещения("ОтправитьЗапросВыпискиСбербанк", ЭтотОбъект, Параметры);
	УстановитьВиртуальныйКаналСоСбербанком(НастройкаЭДО, КаналСоздан, ОО, Параметры);
	
	Если Не КаналСоздан Тогда
		Возврат;
	КонецЕсли;
	
	ЭД = Параметры.ДобавленныеФайлыСбербанка[0];
	
	ДанныеСертификатовПодписи = ЭлектронныеДокументыСлужебныйВызовСервера.ДанныеСертификатовПодписи(
		Параметры.ДобавленныеФайлыСбербанка);
	
	ПодключаемыйМодуль = ПараметрыПриложения["ОбменСБанками.Параметры"].Получить("AddIn.CryptoExtension.VPNKeyTLS");
	
	Попытка
		
		ПодключаемыйМодуль1С = ПараметрыПриложения["ОбменСБанками.Параметры"].Получить("AddIn.SBRF.SBRFServiceProxy");
		
		ИдентификаторЗапроса = Неопределено;
		ИдентификаторОрганизации = Неопределено;
		ПакетXML = ЭлектронныеДокументыСлужебныйВызовСервера.ПакетXMLСбербанка(
			ЭД, НастройкаЭДО, ИдентификаторЗапроса, ИдентификаторОрганизации);
		Ответ = ПодключаемыйМодуль1С.sendRequests(ПакетXML);

		Описание = Нстр("ru = 'Запрос на выписку отправлен в банк'");
		ЭлектронныеДокументыСлужебныйВызовСервера.ЗаписатьСобытиеВЖурналАудита(НастройкаЭДО, Описание, ПакетXML);

		Описание = Нстр("ru = 'Получен идентификатор отправки запроса на выписку'");
		ЭлектронныеДокументыСлужебныйВызовСервера.ЗаписатьСобытиеВЖурналАудита(
												НастройкаЭДО, Описание, Ответ);
		МассивИдентификаторов = Новый Массив;
		ЕстьОшибка = Ложь;
		
		Если Сред(Ответ, 1, 23) = "00000000-0000-0000-0000" Тогда
			ОпределитьОшибкуИСообщитьПользователю(НастройкаЭДО, ЭД, ИдентификаторЗапроса, ИдентификаторОрганизации, Ответ);
			ЕстьОшибка = Истина;
		Иначе
			МассивИдентификаторов.Добавить(Ответ);
		КонецЕсли;
				
		Если ЕстьОшибка Тогда
			Если Параметры.Свойство("ЭтоЗапросВыписки") Тогда
				ВыполнитьОбработкуОповещения(Параметры.ЭтоЗапросВыписки, Ложь);
			КонецЕсли;
			Возврат;
		КонецЕсли;
		
		ВидЭДЗапросВыписки = ПредопределенноеЗначение("Перечисление.ВидыЭД.ЗапросВыписки");
		
		ЭлектронныеДокументыСлужебныйВызовСервера.СохранитьИдентификаторы(
			МассивИдентификаторов, НастройкаЭДО, ВидЭДЗапросВыписки);
		
		СтатусЭДОтправлен = ПредопределенноеЗначение("Перечисление.СтатусыЭД.Отправлен");
	
		ЭлектронныеДокументыСлужебныйВызовСервера.УстановитьСтатусЭД(ЭД, СтатусЭДОтправлен);
		
	Исключение

		ВидОперации = НСтр("ru = 'Запрос выписки банка'");
		ТекстСообщения = Нстр("ru = 'Нет связи с сервером банка'") + Символы.ПС + НСтр("ru = 'Подробности в журнале регистрации'");
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ОписаниеОшибки(), ТекстСообщения, 1);
		Если Параметры.Свойство("ЭтоЗапросВыписки") Тогда
			ВыполнитьОбработкуОповещения(Параметры.ЭтоЗапросВыписки, Ложь);
		КонецЕсли;
		Возврат;
	КонецПопытки;

	Оповестить("ОбновитьСостояниеЭД");
	
	Если Параметры.Свойство("ЭтоЗапросВыписки") Тогда
		ВыполнитьОбработкуОповещения(Параметры.ЭтоЗапросВыписки, Истина);
	КонецЕсли;
	
КонецПроцедуры

// обработчик асинхронного вызова
Процедура ОтправитьЗапросНаНочнуюВыпискуПоСертификату(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Если Параметры.Свойство("ОповещениеПослеПолученияНовыхДокументов") Тогда
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПослеПолученияНовыхДокументов, Ложь);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ИдентификаторСертификата = Результат.Значение;
	Параметры.Вставить("ИдентификаторСертификата", ИдентификаторСертификата);
	Параметры.Вставить("СертификатПодписи", Параметры.СоответствиеСертификатовСбербанка.Получить(ИдентификаторСертификата));
	ЗакэшироватьПараметрСбербанка("СертификатПодписи", Параметры.СертификатПодписи);
	
	КаналСоздан = ложь;
	ОО = Новый ОписаниеОповещения("ПослеУстановкиКаналаВыполнитьОтправкуЗапросовНаНочныеВыпискиСбербанк", ЭтотОбъект, Параметры);
	УстановитьВиртуальныйКаналСоСбербанком(Параметры.НастройкаЭДО, КаналСоздан, ОО, Параметры);
	Если Не КаналСоздан Тогда
		Возврат;
	КонецЕсли;
	
	ПослеУстановкиКаналаВыполнитьОтправкуЗапросовНаНочныеВыпискиСбербанк(Параметры.НастройкаЭДО, Параметры)
	
КонецПроцедуры

// обработчик асинхронного вызова
Процедура ПослеУстановкиКаналаВыполнитьОтправкуЗапросовНаНочныеВыпискиСбербанк(НастройкаЭДО, Параметры) Экспорт
	
	ИдентификаторЗапроса = Строка(Новый УникальныйИдентификатор);
	РеквизитыНастройкиЭДО = ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыНастройкиЭДО(НастройкаЭДО);
	ИдентификаторОрганизации = РеквизитыНастройкиЭДО.ИдентификаторОрганизации;
	СтрокаПодписи = "ATTRIBUTES" + Символ(10) + "OrgId=" + ИдентификаторОрганизации + Символ(10)
					+ "RequestId=" + ИдентификаторЗапроса;

	СтрокаПодписиBase64 = ЭлектронныеДокументыСлужебныйВызовСервера.СтрокаBase64БезBOM(СтрокаПодписи);

	Операция = Нстр("ru = 'Формирование запроса на ночную выписку'");
	ЭП = "";
	
	ПодключаемыйМодуль = ПараметрыПриложения["ОбменСБанками.Параметры"].Получить("AddIn.CryptoExtension.VPNKeyTLS");

	Попытка
		Рез = ПодключаемыйМодуль.ПодписатьДанныеЧерезVPNKeyTLS(СтрокаПодписиBase64, Параметры.ИдентификаторСертификата, ЭП);
		Если Рез <> 0 Тогда
			ТекстСообщения = НСтр("ru = 'При подписании ЭП произошла ошибка
										|Подробности в журнале регистрации'");
			ТекстОшибки = НСтр("ru = 'Компонента AddIn.Bicrypt при подписании вернула код ошибки'") + " " + Рез;
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция, ТекстОшибки, ТекстСообщения, 1);
			ОчиститьДанныеАвторизацииСбербанк();
			Если Параметры.Свойство("ОповещениеПослеПолученияНовыхДокументов") Тогда
				ВыполнитьОбработкуОповещения(Параметры.ОповещениеПослеПолученияНовыхДокументов, Ложь);
			КонецЕсли;
			Возврат;
		КонецЕсли;
	Исключение
		ОчиститьСообщения();
		ТекстСообщения = НСтр("ru = 'При подписании ЭП произошла ошибка
									|Подробности в журнале регистрации'");
		ТекстОшибки = ОписаниеОшибки();
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция, ТекстОшибки, ТекстСообщения, 1);
		Если Параметры.Свойство("ОповещениеПослеПолученияНовыхДокументов") Тогда
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПослеПолученияНовыхДокументов, Ложь);
		КонецЕсли;
		Возврат;
	КонецПопытки;
	
	СертификатПодписи = Параметры.СоответствиеСертификатовСбербанка.Получить(Параметры.ИдентификаторСертификата);
	
	СтрокаЗапроса = ЭлектронныеДокументыСлужебныйВызовСервера.ТекстЗапросаНочнойВыписки(
		НастройкаЭДО, ИдентификаторЗапроса, ИдентификаторОрганизации, ЭП, СертификатПодписи);
		
	Если Не ЗначениеЗаполнено(СтрокаЗапроса) Тогда
		Если Параметры.Свойство("ОповещениеПослеПолученияНовыхДокументов") Тогда
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПослеПолученияНовыхДокументов, Ложь);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Попытка
		
		ПодключаемыйМодуль1С = ПараметрыПриложения["ОбменСБанками.Параметры"].Получить("AddIn.SBRF.SBRFServiceProxy");

		Ответ = ПодключаемыйМодуль1С.sendRequests(СтрокаЗапроса);
		Операция = Нстр("ru = 'Запрос на ночную выписку отправлен в банк'");
		
		ЭлектронныеДокументыСлужебныйВызовСервера.ЗаписатьСобытиеВЖурналАудита(НастройкаЭДО, Операция, СтрокаЗапроса);
		
		МассивИдентификаторов = Новый Массив;
	
		Если Сред(Ответ, 1, 23) = "00000000-0000-0000-0000" Тогда
			ТипЗапроса = Нстр("ru = 'Запрос ночных выписок'");
			ОпределитьОшибкуИСообщитьПользователю(
				НастройкаЭДО, ТипЗапроса, ИдентификаторЗапроса, ИдентификаторОрганизации, Ответ);
		Иначе
			МассивИдентификаторов.Добавить(Ответ);
		КонецЕсли;
		
		ЗапросНочнойВыписки = ПредопределенноеЗначение("Перечисление.ВидыЭД.ЗапросНочнойВыписки");
		ЭлектронныеДокументыСлужебныйВызовСервера.СохранитьИдентификаторы(
			МассивИдентификаторов, НастройкаЭДО, ЗапросНочнойВыписки);
		Операция = Нстр("ru = 'Получен идентификатор отправки запроса на ночную выписку'");
				
		ЭлектронныеДокументыСлужебныйВызовСервера.ЗаписатьСобытиеВЖурналАудита(НастройкаЭДО, Операция, Ответ);
		
	Исключение
		ВидОперации = НСтр("ru = 'Запрос ночной выписки банка'");
		ТекстСообщения = Нстр("ru = 'Нет связи с сервером банка'") + Символы.ПС
							+ НСтр("ru = 'Подробности в журнале регистрации'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
			ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
		Если Параметры.Свойство("ОповещениеПослеПолученияНовыхДокументов") Тогда
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПослеПолученияНовыхДокументов, Ложь);
		КонецЕсли;
		Возврат;
	КонецПопытки;
	
	ЕстьОшибка = Ложь;
	ПолучитьСостоянияЭлектронныхДокументовСбербанк(
		НастройкаЭДО, ПредопределенноеЗначение("Перечисление.ВидыЭД.ПлатежноеПоручение"), Параметры, ЕстьОшибка);
	Если ЕстьОшибка Тогда
		Возврат;
	КонецЕсли;
	ПолучитьСостоянияЭлектронныхДокументовСбербанк(
		НастройкаЭДО, ПредопределенноеЗначение("Перечисление.ВидыЭД.ЗапросВыписки"), Параметры, ЕстьОшибка);
	Если ЕстьОшибка Тогда
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(Параметры) И Параметры.Свойство("ПолучитьРезультатыОбработкиЗапросовВыписки") Тогда
		ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ЗапросВыписки");
		ПолучитьРезультатыОбработкиЗапросовСбербанк(НастройкаЭДО, ВидЭД, Параметры);
	КонецЕсли
	
КонецПроцедуры

// Возвращает двоичные данные сертификата подписи
//
// Параметры
//  ИдентификаторСертификата  - Строка - уникальный идентификатор сертификата на электронном ключе
//  OID - Строка - возвращает название издателя сертификата
//
// Возвращаемое значение:
// ДвоичныеДанные или Неопределено - данные сертификата подписи или Неопределено в случае возникновения ошибки
//
Функция ДвоичныеДанныеСертификатаСбербанка(ИдентификаторСертификата) Экспорт
	
	СертификатBase64 = "";
	ПодключаемыйМодуль = ПараметрыПриложения["ОбменСБанками.Параметры"].Получить("AddIn.CryptoExtension.VPNKeyTLS");

	Попытка
		Рез = ПодключаемыйМодуль.ПолучитьСертификатVPNKeyTLS(ИдентификаторСертификата, СертификатBase64);
		Если Рез <> 0 Тогда
			ОчиститьСообщения();
			ТекстСообщения = НСтр("ru = 'При получении данных сертификата произошла ошибка.
										|Подробности в журнале регистрации'");
			ТекстОшибки = НСтр("ru = 'Компонента AddIn.Bicrypt при получении сертификата вернула код ошибки'") + Рез;
			Операция = НСтр("ru = 'Получение сертификата криптографии.'");
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция, ТекстОшибки, ТекстСообщения, 1);
			Возврат Неопределено;
		КонецЕсли;
	Исключение
		ОчиститьСообщения();
		ТекстСообщения = НСтр("ru = 'При получении сертификата с электронного ключа произошла ошибка
									|Подробности в журнале регистрации'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция, ТекстОшибки, ТекстСообщения, 1);
		Возврат Неопределено;
	КонецПопытки;
	
	СертификатBase64 = СтрЗаменить(СертификатBase64, "-----BEGIN CERTIFICATE-----" + Символы.ПС,""); 
	СертификатBase64 = СтрЗаменить(СертификатBase64, Символы.ПС + "-----END CERTIFICATE-----","");
	
	ДвоичныеДанныеСертификата = Base64Значение(СертификатBase64);
	
	Возврат ДвоичныеДанныеСертификата;

КонецФункции
	
Процедура ПослеПодключенияКомпоненты1СУстановитьВиртуальныйКаналСбербанк(ВнешняяКомпонента, Параметры) Экспорт
	
	Если ВнешняяКомпонента = Неопределено Тогда
		ЗакэшироватьПараметрСбербанка("КаналУстановлен", Ложь);
		Возврат;
	КонецЕсли;

	НастройкаЭДО = Параметры.НастройкаЭДО;
	
	КаналСоздан = Ложь;
	Если ЗначениеИзКэша("КаналУстановлен") = Истина И ЗначениеИзКэша("ТекущееСоглашениеЭД") = НастройкаЭДО Тогда
		КаналСоздан = Истина;
		Возврат;
	КонецЕсли;
	
	ОО = Параметры.ОповещениеПослеУстановкиВиртуальногоКанала;
	
	Если Не ЗначениеЗаполнено(ЗначениеИзКэша("НомерКонтейнера")) Тогда
		ПараметрыФормы = Новый Структура("СоглашениеЭД", НастройкаЭДО);
		ОткрытьФорму("Обработка.ОбменЭлектроннымиДокументамиСБанком.Форма.ЗапросДанныхАутентификацииСбербанк",
						ПараметрыФормы, , , , , ОО);
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("АвторизацияВыполнена", Ложь);
	//Параметры.Вставить("ОО", ОО);
	
	АвторизацияВыполнена = Ложь;
	ПровестиАутентификациюНаТокенеСбербанка(НастройкаЭДО, Параметры);
	Если НЕ Параметры.АвторизацияВыполнена Тогда
		Возврат;
	КонецЕсли;
	
	ЗавершитьУстановкуВиртуальногоКаналаСоСбербанком(НастройкаЭДО, ОО);
	
КонецПроцедуры

Процедура ПослеПодключенияВнешнейКомпонентыОтправитьЗапросНаНочныеВыпискиСбербанк(ПодключаемыйМодуль, Параметры) Экспорт
	
	Если ПодключаемыйМодуль = Неопределено Тогда
		Если Параметры.Свойство("ОповещениеПослеПолученияНовыхДокументов") Тогда
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПослеПолученияНовыхДокументов, Ложь);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	НастройкаЭДО = Параметры.НастройкаЭДО;
	
	КаналСоздан = ложь;
	ОО = Новый ОписаниеОповещения("ВыполнитьОтправкуЗапросовНаНочныеВыпискиСбербанк", ЭтотОбъект, Параметры);
	УстановитьВиртуальныйКаналСоСбербанком(НастройкаЭДО, КаналСоздан, ОО, Параметры);
	Если Не КаналСоздан Тогда
		Возврат;
	КонецЕсли;
	
	ОпределитьСертификатПодписиСбербанк(НастройкаЭДО, "ОтправитьЗапросНаНочнуюВыпискуПоСертификату", Параметры);
	
КонецПроцедуры

Процедура ПослеПодключенияКомпонентыОпределитьСтатусыПодписейСбербанка(ПодключаемыйМодуль, Параметры) Экспорт
	
	Если ПодключаемыйМодуль = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОО = Новый ОписаниеОповещения("ОпределитьСтатусыПодписейСбербанка", ЭтотОбъект, Параметры);
	КаналУстановлен = Ложь;
	УстановитьВиртуальныйКаналСоСбербанком(Параметры.НастройкаЭДО, КаналУстановлен, ОО, Параметры);
	Если Не КаналУстановлен Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийИндекс = 0;
	Для Каждого ЭД Из Параметры.МассивЭДДляПроверкиЭПСбербанк Цикл
		ТекущийИндекс = ТекущийИндекс + 1;
		Если ТекущийИндекс <= Параметры.ИндексПроверкиЭПСбербанка Тогда
			Продолжить;
		Иначе
			Параметры.ИндексПроверкиЭПСбербанка = ТекущийИндекс;
		КонецЕсли;
		
		ДопИнформацияПоЭД = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьДанныеФайла(ЭД);
		ДвоичныеДанныеДокумента = ПолучитьИзВременногоХранилища(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);
		
		СоответствиеПодписейИСертификатов = ЭлектронныеДокументыСлужебныйВызовСервера.ДанныеУстановленныхПодписейИСертификатов(ЭД);
		
		СтрокаФорматBase64 = ЭлектронныеДокументыСлужебныйВызовСервера.ПодписанныеДанныеBase64(ЭД);
		
		РезультатПроверки = Новый Массив();
			
		Для Каждого Элемент Из СоответствиеПодписейИСертификатов Цикл
			СтрокаСертификат = Элемент.Значение;
			Подпись = Элемент.Ключ;
			ВидОперации = Нстр("ru = 'Проверка подписи'");
			Попытка
				КодВозврата = ПодключаемыйМодуль.ПроверитьПодписьДанныхЧерезVPNKeyTLS(
										СтрокаФорматBase64, Подпись, СтрокаСертификат);
				Если КодВозврата = 0 Тогда
					РезультатПроверки.Добавить(Истина);
				Иначе
					РезультатПроверки.Добавить(Ложь);
				КонецЕсли;
			Исключение
				ОписаниеОшибки = НСтр("ru = 'Проверка валидности электронной подписи.
											|Во время проверки валидности электронной подписи произошла ошибка.
											|Дополнительное описание:
											|%ДополнительноеОписание%'");
				ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", ИнформацияОбОшибке().Описание);
				ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ОписаниеОшибки, , 1);
				
				РезультатПроверки.Добавить(Неопределено);
			КонецПопытки;
		КонецЦикла;
		
		ЭлектронныеДокументыСлужебныйВызовСервера.ЗафиксироватьРезультатПроверкиЭП(ЭД, РезультатПроверки);
		
	КонецЦикла;
	
	Если Параметры.Свойство("ОповеститьОПроверкеЭП") Тогда
		Оповестить("ПроведенаПроверкаЭП", Параметры.МассивЭДДляПроверкиЭПСбербанк);
	КонецЕсли;
	
	Если Параметры.Свойство("ОтправитьНаПодписьПослеОбработки") Тогда
		Параметры.Удалить("ОтправитьНаПодписьПослеОбработки");
		НачатьПодписаниеБанковскихЭД(Параметры);
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("ЭтоЗапросВыписки") Тогда
		ОтправитьЗапросВыпискиСбербанк(Параметры.НастройкаЭДО, Параметры);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьДокументыВСбербанк(Параметры) Экспорт
	
	Для Каждого КлючЗначение Из Параметры.ДанныеДляОтправкиВСбербанк Цикл
		ОтправитьПлатежныеПорученияСбербанк(КлючЗначение.Ключ, Параметры);
		Возврат;
	КонецЦикла;
	
	ЗавершитьОтправкуЭД(Неопределено, Параметры);
	
КонецПроцедуры

Процедура ПослеПодключенияКомпонентыПровестиАутентификациюНаТокенеСбербанка(ПодключаемыйМодуль, Параметры) Экспорт
	
	Если ПодключаемыйМодуль = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("ПринудительнаяАутентификация") Тогда
		ПринудительнаяАутентификация = Параметры.ПринудительнаяАутентификация;
	Иначе
		ПринудительнаяАутентификация = Ложь;
	КонецЕсли;
	
	НастройкаЭДО = Параметры.НастройкаЭДО;
	
	Если ПринудительнаяАутентификация ИЛИ Не (ЗначениеЗаполнено(ЗначениеИзКэша("НомерКонтейнера"))
												И ЗначениеИзКэша("ТекущееСоглашениеЭД") = НастройкаЭДО) Тогда
					
		Если ЗначениеЗаполнено(ЗначениеИзКэша("НомерКонтейнера")) Тогда
			СессияЗавершена = Ложь;
			ЗавершитьСессиюНаТокене(СессияЗавершена);
			Если НЕ СессияЗавершена Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		ПараметрыФормы = Новый Структура("СоглашениеЭД", НастройкаЭДО);
		ДополнительныеПараметры = Новый Структура("ОО", Параметры.ОО);
		Обработчик = Новый ОписаниеОповещения(
			"ОбработатьВводДанныхАутентификацииСбербанка", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Обработка.ОбменЭлектроннымиДокументамиСБанком.Форма.ЗапросДанныхАутентификацииСбербанк",
						ПараметрыФормы, , , , , Обработчик);
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("ПовторнаяАвторизация") Тогда
		ПовторнаяАвторизация = Параметры.ПовторнаяАвторизация;
	Иначе
		ПовторнаяАвторизация = Ложь;
	КонецЕсли;
	
	ЗавершитьАутентификациюНаТокенеСбербанка(НастройкаЭДО, ПовторнаяАвторизация, Параметры);
	
КонецПроцедуры

Процедура ПослеПодключенияКомпонентыУстановитьВиртуальныйКаналСбербанк(ВнешняяКомпонента, Параметры) Экспорт
	
	Если ВнешняяКомпонента = Неопределено Тогда
		ЗакэшироватьПараметрСбербанка("КаналУстановлен", Ложь);
		Возврат
	КонецЕсли;
	
	ОписаниеОбработчика = Новый ОписаниеОповещения(
		"ПослеПодключенияКомпоненты1СУстановитьВиртуальныйКаналСбербанк", ЭтотОбъект, Параметры);

	ПараметрыВК = Новый Структура;
	ПараметрыВК.Вставить("ОбработчикПослеПодключенияКомпоненты", ОписаниеОбработчика);
	ПараметрыВК.Вставить("ИмяМодуля", "AddIn.SBRF.SBRFServiceProxy");
	ПараметрыВК.Вставить("Имя", "SBRF");
	ПараметрыВК.Вставить("Тип", ТипВнешнейКомпоненты.Native);
	ПараметрыВК.Вставить("ПрограммаБанка", "Компонента1СДляСбербанка");
	ПараметрыВК.Вставить("servicePort");
	Параметры.Вставить("ПараметрыВК", ПараметрыВК);
	
	ПодключитьВнешнююКомпонентуБанка(Параметры);

КонецПроцедуры

// Обработчик асинхронного вызова
Процедура ПослеВыбораСертификатаПодписатьЭДСбербанк(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Если Параметры.Свойство("ЭтоЗапросВыписки") Тогда
			ВыполнитьОбработкуОповещения(Параметры.ЭтоЗапросВыписки, Ложь);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ИдентификаторСертификата = Результат.Значение;
	
	СертификатПодписи =  Параметры.СоответствиеСертификатовСбербанка.Получить(ИдентификаторСертификата);
	ЗакэшироватьПараметрСбербанка("СертификатПодписи", СертификатПодписи);
	
	ПараметрыСертификата = ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыСертификата(СертификатПодписи);
	
	Операция = Нстр("ru = 'Подписание электронного документа'");
	
	ДобавленныеФайлы = Параметры.ДобавленныеФайлыСбербанка;
	
	ПодключаемыйМодуль = ПараметрыПриложения["ОбменСБанками.Параметры"].Получить("AddIn.CryptoExtension.VPNKeyTLS");
	
	НастройкаЭДО = Параметры.НастройкаЭДО;
	
	Для Каждого ЭД ИЗ ДобавленныеФайлы Цикл
		
		СтрокаПодписиBase64 = ЭлектронныеДокументыСлужебныйВызовСервера.ПодписанныеДанныеBase64(ЭД);
		ЭП="";
		Попытка
			Рез = ПодключаемыйМодуль.ПодписатьДанныеЧерезVPNKeyTLS(СтрокаПодписиBase64, ИдентификаторСертификата, ЭП);
			Если Рез <> 0 Тогда
				ТекстСообщения = НСтр("ru = 'При подписании ЭП произошла ошибка'") + Символы.ПС
								+ НСтр("ru = 'Подробности в журнале регистрации'");
				ТекстОшибки = НСтр("ru = 'Компонента AddIn.Bicrypt при подписании вернула код ошибки'")+ " " + Рез;
				ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
					Операция, ТекстОшибки, ТекстСообщения, 1);
				ОчиститьДанныеАвторизацииСбербанк();
				Если Параметры.Свойство("ЭтоЗапросВыписки") Тогда
					ВыполнитьОбработкуОповещения(Параметры.ЭтоЗапросВыписки, Ложь);
				КонецЕсли;
				Возврат;
			КонецЕсли;
		Исключение
			ОчиститьСообщения();
			ТекстСообщения = НСтр("ru = 'При подписании ЭП произошла ошибка'") + Символы.ПС
							+ НСтр("ru='Подробности в журнале регистрации'");
			ТекстОшибки = ОписаниеОшибки();
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
				Операция, ТекстОшибки, ТекстСообщения, 1);
			Если Параметры.Свойство("ЭтоЗапросВыписки") Тогда
				ВыполнитьОбработкуОповещения(Параметры.ЭтоЗапросВыписки, Ложь);
			КонецЕсли;
			Возврат;
		КонецПопытки;
		
		ДвоичныеДанныеЭП = Base64Значение(ЭП);
		
		ДанныеПодписи = Новый Структура("НоваяПодписьДвоичныеДанные, Отпечаток, ДатаПодписи, Комментарий, ИмяФайлаПодписи,
			|КомуВыданСертификат, ДвоичныеДанныеСертификата");
		
		ДанныеПодписи.Отпечаток = ПараметрыСертификата.Отпечаток;
		ДанныеПодписи.ДатаПодписи = ОбщегоНазначенияКлиент.ДатаСеанса();
		ДанныеПодписи.ДвоичныеДанныеСертификата = ПараметрыСертификата.ДвоичныеДанныеСертификата;
		ДанныеПодписи.НоваяПодписьДвоичныеДанные = ДвоичныеДанныеЭП;
		ДанныеПодписи.КомуВыданСертификат = ПараметрыСертификата.Наименование;

		ЭлектронныеДокументыСлужебныйВызовСервера.ДобавитьПодпись(ЭД, ДанныеПодписи);
		
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбновитьВерсиюЭД(ЭД);
		
		Параметры.ИтогКолПодписанных = Параметры.ИтогКолПодписанных + 1;
		
	КонецЦикла;
	
	Параметры.Вставить("МассивЭДДляПроверкиЭПСбербанк", ДобавленныеФайлы);
	Параметры.Вставить("ИндексПроверкиЭПСбербанка", 0);

	ОпределитьСтатусыПодписейСбербанка(НастройкаЭДО, Параметры);
	
КонецПроцедуры

Процедура НачатьПодписаниеЭДСбербанка(Знач ДанныеПодписи, Параметры)
	
	МассивОбработанныхНастроекЭДО = Параметры.МассивОбработанныхСоглашенийЭД;
	СертификатПодписи = Параметры.СтруктураСертификата.ВыбранныйСертификат;
	ТекущийИндекс = 0;
	
	Для Каждого Элемент ИЗ ДанныеПодписи Цикл
		
		ТекущийИндекс = ТекущийИндекс + 1;
		Если ТекущийИндекс <= Параметры.ИндексТретьейИтерации Тогда
			Продолжить;
		Иначе
			Параметры.ИндексТретьейИтерации = ТекущийИндекс;
		КонецЕсли;
		
		Если НЕ МассивОбработанныхНастроекЭДО.Найти(Элемент.Ключ) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		МассивОбработанныхНастроекЭДО.Добавить(Элемент.Ключ);
		МассивЭДБанка = Элемент.Значение;
		Если МассивЭДБанка.Количество() > 0 Тогда

			ПодписатьЭДСбербанкаОпределеннымСертификатом(Элемент.Ключ, МассивЭДБанка, СертификатПодписи, Параметры);
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	ПродолжитьПодписаниеБанковскихЭД(Параметры.РезультатВыбораСертификатаБанка, Параметры);

КонецПроцедуры

Процедура ОпределитьСертификатПодписиСбербанк(НастройкаЭДО, ИмяПроцедуры, Параметры)
	
	ПодключаемыйМодуль = ПараметрыПриложения["ОбменСБанками.Параметры"].Получить("AddIn.CryptoExtension.VPNKeyTLS");

	НомерКонтейнера = ЗначениеИзКэша("НомерКонтейнера");
	
	ИдентификаторыСертификатов = "";
	Рез = ПодключаемыйМодуль.ПолучитьСписокИдентСертификатовVPNKeyTLS("0", ИдентификаторыСертификатов);
	Если Рез <> 0 Тогда
		ОчиститьСообщения();
		ТекстСообщения = НСтр("ru = 'При получении списка сертификатов на банковском ключе произошла ошибка.
									|Подробности в журнале регистрации'");
		ШаблонОшибки = НСтр(
			"ru = 'Компонента AddIn.Bicrypt при получении списка доступных сертификатов вернула код ошибки: %1'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, Рез);
		Операция = НСтр("ru = 'Подписание электронного документа.'");
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
			Операция, ТекстОшибки, ТекстСообщения, 1);
		ОчиститьДанныеАвторизацииСбербанк();
		Если Параметры.Свойство("ОповещениеПослеПолученияНовыхДокументов") Тогда
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПослеПолученияНовыхДокументов, Ложь);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	СоответствиеСертификатов = Новый Соответствие;
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ИдентификаторыСертификатов);
	Индекс = 2;
	Пока Индекс < ТекстовыйДокумент.КоличествоСтрок() Цикл
		Текст = ТекстовыйДокумент.ПолучитьСтроку(Индекс);
		Текст = СтрЗаменить(Текст, ",", "");
		Текст = СтрЗаменить(Текст, ";", "");
		СоответствиеСертификатов.Вставить(Текст);
		Индекс = Индекс + 1;
	КонецЦикла;
	
	СписокСертификатов = Новый СписокЗначений;
	Если НЕ СоответствиеСертификатов.Количество() Тогда
		ТекстСообщения = Нстр("ru = 'Не найден ни один сертификат на банковском ключе'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Если Параметры.Свойство("ОповещениеПослеПолученияНовыхДокументов") Тогда
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПослеПолученияНовыхДокументов, Ложь);
		КонецЕсли;
		Возврат;
	КонецЕсли;

	ДоступныеСертификатыНастройкиЭДО = ЭлектронныеДокументыСлужебныйВызовСервера.ДанныеСертификатовБанка(НастройкаЭДО);
	СоответствиеОтпечатокСертификат = Новый Соответствие;
	Для Каждого Элемент Из ДоступныеСертификатыНастройкиЭДО Цикл
		СоответствиеОтпечатокСертификат.Вставить(Элемент.Отпечаток, Элемент.Сертификат);
	КонецЦикла;

	ВыборкаСертификатов = Новый Соответствие;
	СоответствиеСертификатовСбербанка = Новый Соответствие;
	
	Для Каждого Элемент ИЗ СоответствиеСертификатов Цикл
		
		ИдентификаторСертификата = Элемент.Ключ;
		ДвоичныеДанныеСертификата = ДвоичныеДанныеСертификатаСбербанка(ИдентификаторСертификата);
		
		Если ДвоичныеДанныеСертификата = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			СтруктураСертификата = ЭлектронныеДокументыСлужебныйВызовСервера.СтруктураСертификата(ДвоичныеДанныеСертификата);
		Исключение
			ОчиститьСообщения();
			ТекстСообщения = НСтр("ru = 'Ошибка чтения сертификата.
										|Подробности см. в журнале регистрации.'");
			ТекстОшибки = ОписаниеОшибки();
			Операция = Нстр("ru = 'Чтение данных сертификата.'");
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция, ТекстОшибки, ТекстСообщения, 1);
			Продолжить;
		КонецПопытки;
		Если СтруктураСертификата.ДействителенДо < ОбщегоНазначенияКлиент.ДатаСеанса() Тогда
			Продолжить;
		КонецЕсли;
		
		НайденныйСертификат = СоответствиеОтпечатокСертификат.Получить(СтруктураСертификата.Отпечаток);
		Если НайденныйСертификат = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СоответствиеСертификатовСбербанка.Вставить(ИдентификаторСертификата, НайденныйСертификат);
		
		ВыборкаСертификатов.Вставить(ИдентификаторСертификата, СтруктураСертификата.КомуВыдан);
	КонецЦикла;
	
	Параметры.Вставить("СоответствиеСертификатовСбербанка", СоответствиеСертификатовСбербанка);
	Параметры.Вставить("НастройкаЭДО", НастройкаЭДО);

	ОО = Новый ОписаниеОповещения(ИмяПроцедуры, ЭтотОбъект, Параметры);

	Если ВыборкаСертификатов.Количество() = 1 Тогда
		Для Каждого КлючЗначение Из ВыборкаСертификатов Цикл
			ВыполнитьОбработкуОповещения(ОО, СписокСертификатов.Добавить(КлючЗначение.Ключ));
			Возврат;
		КонецЦикла;
	КонецЕсли;
	
	Если Не ВыборкаСертификатов.Количество() Тогда
		Если Параметры.Свойство("ОповещениеПослеПолученияНовыхДокументов") Тогда
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПослеПолученияНовыхДокументов, Ложь);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Для Каждого Элемент Из ВыборкаСертификатов Цикл
		СписокСертификатов.Добавить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
	ЗаголовокФормыВыбора = Нстр("ru = 'Выберите сертификат подписи'");

	СписокСертификатов.ПоказатьВыборЭлемента(ОО, ЗаголовокФормыВыбора);
	
КонецПроцедуры

Процедура ЗавершитьАутентификациюНаТокенеСбербанка(НастройкаЭДО, ПовторнаяАвторизация, Параметры)
	
	ПодключаемыйМодуль = ПараметрыПриложения["ОбменСБанками.Параметры"].Получить("AddIn.CryptoExtension.VPNKeyTLS");
	
	Попытка
		НомерКонтейнера = ЗначениеИзКэша("НомерКонтейнера");
		РезультатАвторизации = ПодключаемыйМодуль.ПредъявитьПин(Строка(НомерКонтейнера), ЗначениеИзКэша("ПинКод"));
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось выполнить аутентификацию на банковском ключе.'");
		Операция = НСтр("ru = 'Аутентификация на банковском ключе'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
			Операция, ТекстОшибки, ТекстСообщения, 1);
		ОчиститьДанныеАвторизацииСбербанк();
		Если Параметры.Свойство("ОповещениеПослеПолученияНовыхДокументов") Тогда
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПослеПолученияНовыхДокументов, Ложь);
		КонецЕсли;
		Возврат;
	КонецПопытки;
	Если Не (РезультатАвторизации = 0) Тогда
		Если НЕ ПовторнаяАвторизация И РезультатАвторизации = 24 Тогда
			СессияЗавершена = Ложь;
			Если ЗначениеИзКэша("АвторизацияВыполнена") = Истина Тогда
				ЗавершитьСессиюНаТокене(СессияЗавершена);
			Иначе
				ОчиститьДанныеАвторизацииСбербанк();
				ОчиститьСообщения();
				ТекстСообщения = НСтр("ru = 'Не удалось выполнить аутентификацию на банковском ключе.'") + Символы.ПС
					+ Нстр("ru = 'Необходимо выполнить перезапуск банковского ключа'");
				ТекстОшибки = НСтр("ru = 'Компонента AddIn.Bicrypt при аутентификации на банковском ключе вернула код ошибки: %1'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, РезультатАвторизации);
				Операция = НСтр("ru = 'Аутентификация на банковском ключе'");
				ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция, ТекстОшибки, ТекстСообщения, 1);
			КонецЕсли;
			Если СессияЗавершена Тогда
				Параметры.Вставить("ПовторнаяАвторизация", Истина);
				ПровестиАутентификациюНаТокенеСбербанка(НастройкаЭДО, Параметры);
				Возврат;
			КонецЕсли;
		ИначеЕсли РезультатАвторизации = 28 Тогда
			ШаблонСообщения = Нстр("ru = 'PIN%1 заблокирован'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонСообщения, ЗначениеИзКэша("НомерКонтейнера"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ИначеЕсли РезультатАвторизации = 27 Тогда
			ШаблонСообщения = Нстр("ru = 'PUK%1 заблокирован'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонСообщения, ЗначениеИзКэша("НомерКонтейнера"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ИначеЕсли РезультатАвторизации = 25 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru = 'Пользователь заблокирован'"));
		ИначеЕсли РезультатАвторизации = 29 ИЛИ РезультатАвторизации = 30 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru = 'Неверные данные авторизации'"));
			ОчиститьДанныеАвторизацииСбербанк();
		ИначеЕсли НЕ (ЗначениеИзКэша("АвторизацияВыполнена") = Истина) Тогда
			ОчиститьСообщения();
			ТекстСообщения = НСтр("ru = 'Не удалось выполнить аутентификацию на банковском ключе.'") + Символы.ПС
				+ Нстр("ru = 'Необходимо выполнить перезапуск банковского ключа'");
			ТекстОшибки = НСтр("ru = 'Компонента AddIn.Bicrypt при авторизации на токене вернула код ошибки'")
				+ " " + РезультатАвторизации;
			Операция = НСтр("ru = 'Авторизация на токене'");
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция, ТекстОшибки, ТекстСообщения, 1);
			ОчиститьДанныеАвторизацииСбербанк();
			ЗакэшироватьПараметрСбербанка("АвторизацияВыполнена", Ложь);
		КонецЕсли;
		Если Параметры.Свойство("ОповещениеПослеПолученияНовыхДокументов") Тогда
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПослеПолученияНовыхДокументов, Ложь);
		КонецЕсли;
		Возврат
	КонецЕсли;
	ЗакэшироватьПараметрСбербанка("АвторизацияВыполнена", Истина);
	Параметры.АвторизацияВыполнена = Истина;
	
КонецПроцедуры

Процедура ЗавершитьУстановкуВиртуальногоКаналаСоСбербанком(НастройкаЭДО, ОО)
	
	НомерБизнесСистемы = ПолучитьНомерБизнесСистемы(НастройкаЭДО);
	
	Если НомерБизнесСистемы = -1 Тогда //не удалось определить бизнес систему
		Возврат;
	КонецЕсли;
	
	ПодключаемыйМодуль = ПараметрыПриложения["ОбменСБанками.Параметры"].Получить("AddIn.CryptoExtension.VPNKeyTLS");
	
	РезультатПодключения = ПодключаемыйМодуль.УстановитьTLSКаналСБизнесСистемой(Строка(НомерБизнесСистемы));
	
	Если НЕ РезультатПодключения = 0 Тогда
		ОчиститьСообщения();
		Операция = Нстр("ru = 'Установка виртуального канала'");
		ТекстСообщения = НСтр("ru = 'Не удалось установить связь с сервером.
									|Необходимо проверить работу TLS VPN Key.'");
		ТекстОшибки = НСтр("ru = 'Компонента AddIn.Bicrypt при установке виртуального канала вернула код ошибки'")
							+ " " + РезультатПодключения;
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
											Операция, ТекстОшибки, ТекстСообщения, 1);
		ОчиститьДанныеАвторизацииСбербанк();
		Возврат;
	КонецЕсли;
	
	ЗакэшироватьПараметрСбербанка("КаналУстановлен", Истина);
	
	ВыполнитьОбработкуОповещения(ОО, НастройкаЭДО);
	
КонецПроцедуры

Функция ПолучитьНомерБизнесСистемы(НастройкаЭДО)
	
	НомерБизнесСистемы = -1;
	НазваниеБизнесСистемы = """УПШ СББОЛ""";
	ПодключаемыйМодуль = ПараметрыПриложения["ОбменСБанками.Параметры"].Получить("AddIn.CryptoExtension.VPNKeyTLS");
		// Если задано имя тестовой бизнес-системы в РС, то используем его.
	ИмяТестовойБизнесСистемы = ЭлектронныеДокументыСлужебныйВызовСервера.ИмяБизнесСистемыДляТестов(НастройкаЭДО);
	Если ЗначениеЗаполнено(ИмяТестовойБизнесСистемы) Тогда
		НазваниеБизнесСистемы = ИмяТестовойБизнесСистемы;
	КонецЕсли;

	БизнесСистемы = "";
	Рез = ПодключаемыйМодуль.ПолучитьСписокБизнесСистемVPNKeyTLS(БизнесСистемы);
	Если Рез <> 0 Тогда
		ОчиститьСообщения();
		ТекстСообщения = НСтр("ru = 'Ошибка при получении списка бизнес систем.
									|Подробности в журнале регистрации.'");
		ТекстОшибки = НСтр("ru = 'Компонента AddIn.Bicrypt при получении списка бизнес систем вернула код ошибки %1'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Рез);
		Операция = НСтр("ru = 'Получение списка бизнес систем.'");
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(Операция, ТекстОшибки, ТекстСообщения, 1);
		ОчиститьДанныеАвторизацииСбербанк();
		Возврат НомерБизнесСистемы;
	КонецЕсли;
	Попытка
		МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(БизнесСистемы, Символы.ПС);
		Для Каждого Строка из МассивСтрок Цикл
			Если Найти(ВРег(Строка), ВРег(НазваниеБизнесСистемы)) > 0 Тогда
				ПозПервойКавычки = Найти(Строка, """");
				БизнесСистемаСтрокой = Сред(Строка, ПозПервойКавычки + 1);
				ПозВторойКавычки = Найти(БизнесСистемаСтрокой, """");
				БизнесСистемаСтрокой = Сред(БизнесСистемаСтрокой, 1 , ПозВторойКавычки - 1);
				НомерБизнесСистемы = Число(БизнесСистемаСтрокой);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Исключение
		ОчиститьСообщения();
		ТекстСообщения = НСтр("ru = 'Ошибка чтения списка бизнес систем.
									|Подробности в журнале регистрации.'");
		ШаблонОшибки = НСтр("ru = 'Компонента AddIn.Bicrypt при получении списка бизнес систем код ошибки %1
							|Содержимое списка возврата: %2'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, Рез, БизнесСистемы);
		Операция = НСтр("ru = 'Получение списка бизнес систем.'");
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
			Операция, ТекстОшибки, ТекстСообщения, 1);
	КонецПопытки;

	Если НомерБизнесСистемы = -1 Тогда
		ТекстСообщения = НСтр("ru = 'Не найдена бизнес система на банковском ключе.
									|Необходимо проверить работу TLS VPN Key.'");
		Операция = Нстр("ru = 'Поиск бизнес системы на электронном ключе.'");
		ШаблонОшибки = Нстр("ru = 'На электронном ключе не найдена бизнес система %1
							|Содержимое списка возврата: %2'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонОшибки, НазваниеБизнесСистемы, БизнесСистемы);
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
			Операция, ТекстОшибки, ТекстСообщения, 1);
	КонецЕсли;
	
	Возврат НомерБизнесСистемы;
	
КонецФункции

Процедура ПолучитьСостоянияЭлектронныхДокументовСбербанк(СоглашениеЭД, ВидЭД, Параметры, ЕстьОшибка)

	МассивЗапросов = ЭлектронныеДокументыСлужебныйВызовСервера.МассивЗапросовСостоянийОбработкиДокументов(
		СоглашениеЭД, ВидЭД);
	Попытка
		
		ПодключаемыйМодуль1С = ПараметрыПриложения["ОбменСБанками.Параметры"].Получить("AddIn.SBRF.SBRFServiceProxy");

		Для Каждого Элемент ИЗ МассивЗапросов Цикл
			Ответ = ПодключаемыйМодуль1С.sendRequests(Элемент);
			Описание = Нстр("ru = 'Оправлен запрос статуса документа'");
			ЭлектронныеДокументыСлужебныйВызовСервера.ЗаписатьСобытиеВЖурналАудита(
													СоглашениеЭД, Описание, Элемент);
			Описание = Нстр("ru = 'Получены идентификатор запроса статуса документа'");
			ЭлектронныеДокументыСлужебныйВызовСервера.ЗаписатьСобытиеВЖурналАудита(
														СоглашениеЭД, Описание, Ответ);
			МассивИдентификаторов = Новый Массив;
			МассивИдентификаторов.Добавить(Ответ);
			ЭлектронныеДокументыСлужебныйВызовСервера.СохранитьИдентификаторы(МассивИдентификаторов, СоглашениеЭД, ВидЭД);
		КонецЦикла;
	Исключение
		ВидОперации = НСтр("ru = 'Получение информации о состоянии электронных документов'");
		ТекстСообщения = Нстр("ru = 'Нет связи с сервером банка'") + Символы.ПС
						+ НСтр("ru = 'Подробности в журнале регистрации'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
			ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
		КолОтправленных = 0;
		Если Параметры.Свойство("ОповещениеПослеПолученияНовыхДокументов") Тогда
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПослеПолученияНовыхДокументов, Ложь);
		КонецЕсли;
		ЕстьОшибка = Истина;
	КонецПопытки;

КонецПроцедуры

Процедура ОпределитьОшибкуИСообщитьПользователю(СоглашениеЭД, ТипЗапроса, ИдентификаторЗапроса, ИдентификаторОрганизации, Тикет)
	
	Если Тикет = "00000000-0000-0000-0000-000000000000" ИЛИ Тикет = "00000000-0000-0000-0000-000000000006" Тогда
		ТекстСообщения = Нстр("ru = 'Ошибка связи. Сервис банка недоступен. Повторите попытку или обратитесь в свой банк.'");
		Если ТипЗнч(ТипЗапроса) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы")
			И ЭлектронныеДокументыСлужебныйВызовСервера.ВидИВладелецЭД(ТипЗапроса).ВидЭД = ПредопределенноеЗначение(
				"Перечисление.ВидыЭД.ЗапросВыписки") Тогда
			ОшибкаПередачи = ПредопределенноеЗначение("Перечисление.СтатусыЭД.ОшибкаПередачи");
			ПараметрыИзменения = Новый Структура;
			ПараметрыИзменения.Вставить("СтатусЭД", ОшибкаПередачи);
			ПараметрыИзменения.Вставить("ПричинаОтклонения", ТекстСообщения);
			ЭлектронныеДокументыСлужебныйВызовСервера.ИзменитьПоСсылкеПрисоединенныйФайл(ТипЗапроса, ПараметрыИзменения, Ложь);
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	ИначеЕсли Тикет = "00000000-0000-0000-0000-000000000007" Тогда
		ТекстСообщения = Нстр("ru = 'Неверный идентификатор организации.
									|Проверьте настройки ЭДО с банком или обратитесь в свой банк'");
		Если ТипЗнч(ТипЗапроса) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда
			ОтклоненБанком = ПредопределенноеЗначение("Перечисление.СтатусыЭД.ОтклоненБанком");
			ПараметрыИзменения = Новый Структура;
			ПараметрыИзменения.Вставить("СтатусЭД", ОтклоненБанком);
			ПараметрыИзменения.Вставить("ПричинаОтклонения", ТекстСообщения);
			ЭлектронныеДокументыСлужебныйВызовСервера.ИзменитьПоСсылкеПрисоединенныйФайл(ТипЗапроса, ПараметрыИзменения, Ложь);
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	Иначе
		ТекстСообщения = Нстр("ru = 'Сервер банка вернул неизвестный код ошибки.
									|Повторите сеанс связи или обратитесь в свой банк.'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Сертификаты

Процедура ПослеПолученияСертификатовЗанестиИнформациюОПодписи(СертификатыПодписи, Параметры) Экспорт
	
	Если СертификатыПодписи.Количество() <> 0 Тогда
		Сертификат = СертификатыПодписи[0];
		Параметры.Вставить("ПолученныйСертификат", Сертификат);
		Оповещение = Новый ОписаниеОповещения("ПослеВыгрузкиСертификатаЗанестиИнформациюОПодписи", ЭтотОбъект, Параметры);
		Сертификат.НачатьВыгрузку(Оповещение);
	КонецЕсли
	
КонецПроцедуры

Процедура ПослеПолученияОтпечатковСертификатов(Отпечатки, Параметры) Экспорт
		
	МассивОтпечатков = Новый Массив;
	Если ТипЗнч(Отпечатки) = Тип("Соответствие") Тогда
		Для Каждого КлючЗначение Из Отпечатки Цикл
			МассивОтпечатков.Добавить(КлючЗначение.Ключ);
		КонецЦикла;
	КонецЕсли;
	
	ОтпечаткиСервера = ЭлектронныеДокументыСлужебныйВызовСервера.МассивОтпечатковСертификатов();
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОтпечатков, ОтпечаткиСервера);
	
	ОбработчикОповещения = Параметры.ОбработчикОповещения;
	МассивСоглашений = Параметры.МассивСоглашений;
	МассивЭД = Параметры.МассивЭД;
	
	СтМассивовСтруктурСертификатов = Новый Структура;
	СтМассивовСтруктурСертификатов.Вставить("МассивОтпечатковКлиент", МассивОтпечатков);
	
	ПараметрыАутентификации = Неопределено;
	СтСоответствий = ЭлектронныеДокументыСлужебныйВызовСервера.СтруктураСоответствийСоглашенийИСертификатовАвторизации(
		МассивСоглашений, МассивЭД, СтМассивовСтруктурСертификатов, , , ПараметрыАутентификации);
	
	СтСоответствий.Вставить("СоответствиеПрофилейИПараметровСертификатов", Новый Соответствие);
	
	СоответствиеСоглашенийИСертификатов = Неопределено;
	Если СтСоответствий.Свойство("СоотвСоглашенийИМассиваСертификатовАвторизации", СоответствиеСоглашенийИСертификатов) Тогда
		ИД_Параметров = Строка(Новый УникальныйИдентификатор);
		ПараметрыПриложения.Вставить("ЭлектронноеВзаимодействие." + ИД_Параметров, СтСоответствий);
		Параметры = Новый Структура;
		Параметры.Вставить("ИД_Параметров", ИД_Параметров);
		Параметры.Вставить("ОбработчикОповещения", ОбработчикОповещения);
		Параметры.Вставить("СоответствиеСоглашенийИСертификатов", СоответствиеСоглашенийИСертификатов);
		
		Параметры.Вставить("ПараметрыАутентификации", ПараметрыАутентификации);
		
		
		РасшифроватьМаркер(, Параметры);
	Иначе
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("СоответствиеПрофилейИПараметровСертификатов",
			СтСоответствий.СоответствиеПрофилейИПараметровСертификатов);
		
		ВыполнитьОбработкуОповещения(ОбработчикОповещения, ПараметрыОповещения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеВыгрузкиСертификатаЗанестиИнформациюОПодписи(ВыгруженныеДанные, Параметры) Экспорт
	
	Сертификат = Параметры.ПолученныйСертификат;
	
	ОтпечатокСтрокой = Base64Строка(Сертификат.Отпечаток);
	ПредставлениеСубъекта = ЭлектроннаяПодписьКлиентСервер.ПредставлениеСубъекта(Сертификат);
	ЭлектронныеДокументыСлужебныйВызовСервера.ЗанестиИнформациюОПодписи(Параметры.ЭлектронныйДокумент,
		Параметры.ДанныеПодписи, ОтпечатокСтрокой, ОбщегоНазначенияКлиент.ДатаСеанса(), "", , ПредставлениеСубъекта,
		ВыгруженныеДанные);
	ОпределитьСтатусыПодписей(Параметры.ЭлектронныйДокумент);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСЭП

Процедура ПроверитьЭП(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено И Параметры.ИндексПроверкиПодписи >= 0 Тогда
		ПослеОбработкиИзвещенийОбработатьДанныеПакетаЭД(Параметры);
		Возврат; //  Не удалось создать менеджер криптографии, дальнейшая проверка не имеет смысла
	КонецЕсли;
	
	Параметры.ИндексПроверкиПодписи = Параметры.ИндексПроверкиПодписи + 1;
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		ВидОперации = Нстр("ru = 'Проверка подписи'");
		ТекстСообщения = Нстр("ru = 'При проверке подписи электронного документа:
									|%1 
									|произошла ошибка: %2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ТекстСообщения, Параметры.ПроверяемыйЭД, Результат);
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
									ВидОперации, ТекстСообщения, ТекстСообщения, 0);
		Параметры.Вставить("ПодписьНеверна");
		ПослеОбработкиИзвещенийОбработатьДанныеПакетаЭД(Параметры);
		Возврат;
	КонецЕсли;
	
	Если Параметры.ДанныеДляПроверкиЭП.Количество() > Параметры.ИндексПроверкиПодписи Тогда
		Оповещение = Новый ОписаниеОповещения("ПроверитьЭП", ЭтотОбъект, Параметры);
		ДвоичныеДанныеФайла = Параметры.ДанныеДляПроверкиЭП[Параметры.ИндексПроверки].ДвоичныеДанныеФайла;
		ДвоичныеДанныеПодписи = Параметры.ДанныеДляПроверкиЭП[Параметры.ИндексПроверки].ДвоичныеДанныеПодписи;
		ЭлектроннаяПодписьКлиент.ПроверитьПодпись(Оповещение, ДвоичныеДанныеФайла, ДвоичныеДанныеПодписи);
		Возврат;
	ИначеЕсли НЕ Параметры.Свойство("ПодписьНеверна") Тогда
			МассивДобавленныхФайлов = ЭлектронныеДокументыСлужебныйВызовСервера.ДобавитьДанныеПоПакетуЭД(Параметры.ПакетЭД,
				Параметры.ДанныеДляПроверкиЭП, Параметры.СтруктураДанных, Параметры.ДанныеРаспаковки.СоответствиеФайлПараметры,
				Параметры.ДанныеРаспаковки.ФайлыПакета);
			Параметры.ВсегоРаспаковано = Параметры.ВсегоРаспаковано + МассивДобавленныхФайлов.Количество();
	КонецЕсли;

	ОбработатьОчередноеИзвещение(Параметры);
	
КонецПроцедуры

Процедура ПослеПолученияМенеджераКриптографииЗанестиИнформациюОПодписи(МенеджерКриптографии, Параметры) Экспорт
	
	Если НЕ ТипЗнч(МенеджерКриптографии) = Тип("МенеджерКриптографии") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Элемент ИЗ Параметры.ЭДИДанныеПодписей Цикл
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ЭлектронныйДокумент", Элемент.ЭлектронныйДокумент);
		ДополнительныеПараметры.Вставить("ДанныеПодписи", Элемент.ДанныеПодписи);
		Оповещение = Новый ОписаниеОповещения(
			"ПослеПолученияСертификатовЗанестиИнформациюОПодписи", ЭтотОбъект, ДополнительныеПараметры);
		Попытка
			МенеджерКриптографии.НачатьПолучениеСертификатовИзПодписи(Оповещение, Элемент.ДанныеПодписи);
		Исключение
			ВидОперации = Нстр("ru = 'Извлечение сертификата из подписи'");
			КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
				ВидОперации, ПодробноеПредставлениеОшибки, КраткоеПредставлениеОшибки, 0);
		КонецПопытки
	КонецЦикла;
	
КонецПроцедуры

Процедура ОпределитьСтатусОчереднойПодписи(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено И Параметры.Свойство("РезультатПроверки") Тогда
		Возврат; //  Не удалось создать менеджер криптографии, дальнейшая проверка не имеет смысла
	КонецЕсли;
	
	Параметры.ИндексПроверки = Параметры.ИндексПроверки + 1;
	
	Если Не Параметры.Свойство("РезультатПроверки") Тогда
		РезультатПроверки = Новый Массив;
		Параметры.Вставить("РезультатПроверки", РезультатПроверки);
	КонецЕсли;
	
	СтруктураЗаписи = Новый Структура("НомерСтроки", Параметры.ИндексПроверки);
	
	Если Результат = Истина Тогда
		СтруктураЗаписи.Вставить("Результат", Истина);
		Параметры.РезультатПроверки.Добавить(СтруктураЗаписи);
	ИначеЕсли ТипЗнч(Результат) = Тип("Строка") Тогда
		ВидОперации = Нстр("ru = 'Проверка подписи'");
		ТекстСообщения = Нстр("ru = 'При проверке подписи электронного документа:
									|%1 
									|произошла ошибка: %2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ТекстСообщения, Параметры.ПроверяемыйЭД, Результат);
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
									ВидОперации, ТекстСообщения, ТекстСообщения, 0);
		СтруктураЗаписи.Вставить("Результат", Ложь);
		Параметры.РезультатПроверки.Добавить(СтруктураЗаписи);
		Параметры.Вставить("ПодписьНеверна");
	КонецЕсли;

	Если Параметры.Подписи.Количество() > Параметры.ИндексПроверки Тогда
		Оповещение = Новый ОписаниеОповещения("ОпределитьСтатусОчереднойПодписи", ЭтотОбъект, Параметры);
		ЭлектроннаяПодписьКлиент.ПроверитьПодпись(
			Оповещение, Параметры.ДанныеЭД, Параметры.Подписи[Параметры.ИндексПроверки].Подпись);
		Возврат;
	КонецЕсли;

	Если Параметры.Свойство("ПроверяемыйЭД") Тогда
		ЭлектронныеДокументыСлужебныйВызовСервера.СохранитьРезультатыПроверкиПодписей(
								Параметры.ПроверяемыйЭД, Параметры.РезультатПроверки);
	КонецЕсли;
	
	Если Параметры.Свойство("ОповещениеПослеПроверкиПодписи") Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПослеПроверкиПодписи, Параметры.Свойство("ПодписьНеверна"));
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет подписи в электронном документе
//
// Параметры:
//  ЭДИДанныеПодписей  - Массив - в элементах находятся структуры данных
//     * ДанныеПодписи - ДвоиичныеДанные - электронная подпись
//     * ЭлектронныйДокумент  - СправочникСсылка.ЭДПрисоединенныеФайлы - ссылка на электронный документ
//
Процедура ЗанестиИнформациюОПодписи(ЭДИДанныеПодписей) Экспорт
	
	Если ТипЗнч(ЭДИДанныеПодписей) = Тип("Массив") И ЭДИДанныеПодписей.Количество() > 0 Тогда
		Параметры = Новый Структура("ЭДИДанныеПодписей", ЭДИДанныеПодписей);
		
		Оповещение = Новый ОписаниеОповещения(
			"ПослеПолученияМенеджераКриптографииЗанестиИнформациюОПодписи", ЭтотОбъект, Параметры);
			
		ЭлектроннаяПодписьКлиент.СоздатьМенеджерКриптографии(Оповещение, "ПолучениеСертификатов");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаЭлектронныхДокументов

Процедура ПослеПолученияОтпечатковОткрытьЭДДляПросмотра(Отпечатки, Параметры) Экспорт
	
	МассивОтпечатков = Новый Массив;
	Если ТипЗнч(Отпечатки) = Тип("Соответствие") Тогда
		Для Каждого КлючЗначение Из Отпечатки Цикл
			МассивОтпечатков.Добавить(КлючЗначение.Ключ);
		КонецЦикла;
	КонецЕсли;
	
	СсылкаНаЭД = Параметры.СсылкаНаЭД;
	ПараметрыОткрытия = Параметры.ПараметрыОткрытия;
	ВладелецФормы = Параметры.ВладелецФормы;
	
	ПараметрыФормы = Новый Структура("Ключ, МассивОтпечатков", СсылкаНаЭД, МассивОтпечатков);
	ПараметрыЭД = ЭлектронныеДокументыСлужебныйВызовСервера.ВидИВладелецЭД(СсылкаНаЭД);
	Если ПараметрыЭД.ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПроизвольныйЭД") Тогда
		ПоказатьЗначение(, ПараметрыЭД.ВладелецФайла);
	ИначеЕсли ВладелецФормы = Неопределено Тогда
		ОткрытьФорму("Справочник.ЭДПрисоединенныеФайлы.Форма.ФормаПросмотраЭД", ПараметрыФормы, , СсылкаНаЭД);
	Иначе
		Если ПараметрыОткрытия = Неопределено Тогда
			ОткрытьФорму("Справочник.ЭДПрисоединенныеФайлы.Форма.ФормаПросмотраЭД", ПараметрыФормы, ВладелецФормы, СсылкаНаЭД);
		Иначе
			Окно = Неопределено;
			Если ТипЗнч(ПараметрыОткрытия) = Тип("ПараметрыВыполненияКоманды")
				ИЛИ ТипЗнч(ПараметрыОткрытия) = Тип("Структура")
				И ПараметрыОткрытия.Свойство("Окно") И ТипЗнч(ПараметрыОткрытия.Окно) = Тип("ОкноКлиентскогоПриложения") Тогда
				
				Окно = ПараметрыОткрытия.Окно;
			КонецЕсли;
			ОткрытьФорму("Справочник.ЭДПрисоединенныеФайлы.Форма.ФормаПросмотраЭД", ПараметрыФормы,
				ВладелецФормы, ПараметрыОткрытия.Уникальность, Окно);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеПолученияОтпечатковОбработатьЭД(ОтпечаткиСертификатов, Параметры) Экспорт
	
	ИтогКолНовыхЭД = 0;
	ИтогКолУтвержденныхЭД = 0;
	ИтогКолПодписанных = 0;
	ИтогКолПодготовленных = 0;
	ИтогКолОтправленных = 0;
	
	МассивСсылокНаОбъект = Параметры.МассивСсылокНаОбъект;
	Действие = Параметры.Действие;
	ДопПараметры = Параметры.ДопПараметры;
	ЭД = Параметры.ЭД;
	ОписаниеОповещения = Параметры.ОписаниеОповещения;
	
	МассивОтпечатковСертификатов = Новый Массив;
	ОшибкаНастройкиКриптографии =Ложь;
	
	Если ТипЗнч(ОтпечаткиСертификатов) = Тип("Строка") Тогда
		МассивОтпечатковСертификатов = Новый Массив;
		ОшибкаНастройкиКриптографии = Истина;
		ДопПараметры.Вставить("ОшибкаНастройкиКриптографии", ОшибкаНастройкиКриптографии);
	ИначеЕсли ТипЗнч(ОтпечаткиСертификатов) = Тип("Соответствие") Тогда
		Для Каждого КлючЗначение Из ОтпечаткиСертификатов Цикл
			МассивОтпечатковСертификатов.Добавить(КлючЗначение.Ключ);
		КонецЦикла
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭД) И Не ОшибкаНастройкиКриптографии Тогда
		Если Не ЭлектронныеДокументыСлужебныйВызовСервера.ЕстьДоступныеСертификаты(МассивОтпечатковСертификатов, ЭД) Тогда
			ДопПараметры.Вставить("ОшибкаНастройкиСертификата", Истина);
		КонецЕсли;
	КонецЕсли;
	
	СоответствиеСертификатаИПароля = Новый Соответствие;
	
	Результат = ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнитьДействияПоЭД(МассивСсылокНаОбъект,
																				МассивОтпечатковСертификатов,
																				Действие,
																				ДопПараметры,
																				ЭД,
																				СоответствиеСертификатаИПароля);
	
	ВыполнятьКриптооперацииНаСервере = Неопределено;
	НемедленнаяОтправкаЭД = Неопределено;
	ВыполнитьОповещение = Истина;
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Результат.Свойство("ВыполнятьКриптооперацииНаСервере", ВыполнятьКриптооперацииНаСервере);
		Результат.Свойство("НемедленнаяОтправкаЭД", НемедленнаяОтправкаЭД);
		
		Если НЕ Результат.Свойство("КолПодписанных", ИтогКолПодписанных) Тогда
			ИтогКолПодписанных = 0;
		КонецЕсли;
		
		Если НЕ Результат.Свойство("КолПодготовленных", ИтогКолПодготовленных) Тогда
			ИтогКолПодготовленных = 0;
		КонецЕсли;
		
		Если НЕ Результат.Свойство("КолОтправленных", ИтогКолОтправленных) Тогда
			ИтогКолОтправленных = 0;
		КонецЕсли;
		
		Если НЕ Результат.Свойство("КоличествоНовыхЭД", ИтогКолНовыхЭД) Тогда
			ИтогКолНовыхЭД = 0;
		КонецЕсли;
		
		Если ИтогКолУтвержденныхЭД = 0 И Результат.Свойство("КоличествоУтвержденныхЭД") Тогда
			ИтогКолУтвержденныхЭД = Результат.КоличествоУтвержденныхЭД;
		КонецЕсли;
		
		// Подписание ЭД:
		
		СоотвСертификатовИМассивовЭДКПодписи = Новый Соответствие;
		
		МассивЭДКУдалениюИзОтправки = Новый Массив;
		СтруктСтруктурМассивовЭДиСертификатов = Неопределено;
		СоотвЭДиСоглашений = Неопределено;
		СоотвСертификатовИИхСтруктур = Неопределено;
		
		ПараметрыКонтекста = Новый Структура();
		ПараметрыКонтекста.Вставить("Результат", Результат);
		ПараметрыКонтекста.Вставить("ОписаниеОповещения", ОписаниеОповещения);
		ПараметрыКонтекста.Вставить("ВыполнятьКриптооперацииНаСервере", ВыполнятьКриптооперацииНаСервере);
		ПараметрыКонтекста.Вставить("НемедленнаяОтправкаЭД", НемедленнаяОтправкаЭД);
		ПараметрыКонтекста.Вставить("ИтогКолОтправленных", ИтогКолОтправленных);
		ПараметрыКонтекста.Вставить("ИтогКолПодготовленных", ИтогКолПодготовленных);
		ПараметрыКонтекста.Вставить("ИтогКолНовыхЭД", ИтогКолНовыхЭД);
		ПараметрыКонтекста.Вставить("ИтогКолУтвержденныхЭД", ИтогКолУтвержденныхЭД);
		ПараметрыКонтекста.Вставить("ИтогКолПодписанных", ИтогКолПодписанных);
		ПараметрыКонтекста.Вставить("Действие", Действие);
		ПараметрыКонтекста.Вставить("МассивСсылокНаОбъект", МассивСсылокНаОбъект);
		ПараметрыКонтекста.Вставить("МассивЭДКУдалениюИзОтправки", МассивЭДКУдалениюИзОтправки);
		ПараметрыКонтекста.Вставить("СоотвСертификатовИМассивовЭДКПодписи", СоотвСертификатовИМассивовЭДКПодписи);
		ПараметрыКонтекста.Вставить("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур);
		Если ЗначениеЗаполнено(ДопПараметры) И ДопПараметры.Свойство("ОповеститьОСозданииУведомления") Тогда
			ПараметрыКонтекста.Вставить("ОповеститьОСозданииУведомления", ДопПараметры.ОповеститьОСозданииУведомления);
		КонецЕсли;

		Если Результат.Свойство("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур)
			И Результат.Свойство("СтруктСтруктурМассивовЭДиСертификатов", СтруктСтруктурМассивовЭДиСертификатов)
			И Результат.Свойство("СоотвЭДиСоглашений", СоотвЭДиСоглашений) Тогда
			
			СоотвествиеПрофилейИСертификатов = Неопределено;
			Если ДопПараметры.Свойство("СоотвествиеСертификатов", СоотвествиеПрофилейИСертификатов) И ЗначениеЗаполнено(СоотвествиеПрофилейИСертификатов) Тогда
				СоотвествиеСертификатов = ПараметрыСертификатов(СоотвествиеПрофилейИСертификатов);
				Для Каждого КлючЗначение Из СоотвСертификатовИИхСтруктур Цикл
					ПараметрыСертификата = СоотвествиеСертификатов.Получить(КлючЗначение.Ключ);
					ЗаполнитьПароли(КлючЗначение.Значение, ПараметрыСертификата);
				КонецЦикла;
			КонецЕсли;
			
			ПараметрыКонтекста.Вставить("СтруктСтруктурМассивовЭДиСертификатов", СтруктСтруктурМассивовЭДиСертификатов);
			ПараметрыКонтекста.Вставить("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур);
			ПараметрыКонтекста.Вставить("ИндексПервойИтерации", 0);
			ПараметрыКонтекста.Вставить("ИндексВторойИтерации", 0);
			ПараметрыКонтекста.Вставить("ИндексТретьейИтерации", 0);
			ВыполнитьОповещение = Ложь;
			ПодписатьЭД(Неопределено, ПараметрыКонтекста);
		Иначе
			Если СоотвСертификатовИИхСтруктур = Неопределено Тогда
				СоотвСертификатовИИхСтруктур = Новый Соответствие;
			КонецЕсли;
			ПараметрыКонтекста.Вставить("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур);
			// Отправка ЭД:
			ВыполнитьОповещение = Ложь;
			ОтправкаЭД(ПараметрыКонтекста);
		КонецЕсли;
	ИначеЕсли Результат <> Неопределено Тогда
		Оповестить("ОбновитьСостояниеЭД");
	КонецЕсли;
	
	Если ВыполнитьОповещение И ТипЗнч(ОписаниеОповещения) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
	НовыйЭД = Неопределено;
	ИДПараметра = Неопределено;
	// Если выполнялось утверждение входящего титула ТОРГ-12 или Акта, то надо открыть
	// ответный титул для подписания, в окне первичного титула.
	Если ДопПараметры.Свойство("НовыйЭД", НовыйЭД) И ЗначениеЗаполнено(НовыйЭД)
		И ДопПараметры.Свойство("ИДПараметра", ИДПараметра) Тогда
		
		ПараметрыФормы = ПараметрыПриложения[ИДПараметра];
		Если ТипЗнч(ПараметрыФормы) = Тип("ОписаниеОповещения") Тогда
			ВыполнитьОбработкуОповещения(ПараметрыФормы, НовыйЭД);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеОбработкиИзвещенийОбработатьДанныеПакетаЭД(Параметры) Экспорт
	
	ОписаниеОповещения               = Параметры.ОбработчикПродолжения;
	ДанныеРаспаковки                 = Параметры.ДанныеРаспаковки;
	ВсегоРаспаковано                 = Параметры.ВсегоРаспаковано;
	
	ЕстьКриптосредствоНаКлиенте      = Параметры.ЕстьКриптосредствоНаКлиенте;
	ПакетЭД                          = Параметры.ПакетЭД;
	
	МассивДвоичныхДанных = ДанныеРаспаковки.СтруктураДвоичныхДанных;
	
	ВыполнитьОписаниеОповещения = Истина;
	ЕстьОшибкаРаспаковки = Параметры.Свойство("ПодписьНеверна");

	Если НЕ ЕстьОшибкаРаспаковки Тогда
		Если МассивДвоичныхДанных.Количество() = 0 Тогда
			МассивЭДИДанныхПодписей = Новый Массив;
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьПодтвержденияДокументовНаСервере(
															ДанныеРаспаковки.СоответствиеФайлПараметры,
															ПакетЭД,
															ДанныеРаспаковки.ФайлыПакета,
															МассивЭДИДанныхПодписей);
			Если МассивЭДИДанныхПодписей.Количество() > 0 Тогда
				ЗанестиИнформациюОПодписи(МассивЭДИДанныхПодписей);
			КонецЕсли;
			ВсегоРаспаковано = ВсегоРаспаковано + МассивЭДИДанныхПодписей.Количество();
		Иначе
			МассивЭДДляФормированияИзвещений = Новый Массив;
			Для Каждого СтруктураДанных Из МассивДвоичныхДанных Цикл
				МассивСтруктурПодписей = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСоответствиеДанныхПодписей(
																						СтруктураДанных.ИмяФайла,
																						ДанныеРаспаковки.ФайлыПакета,
																						СтруктураДанных.ДвоичныеДанные,
																						ДанныеРаспаковки.СоответствиеФайлПараметры);
				
				СоответствиеЭДИПодписей = Новый Соответствие;
				МассивДобавленныхФайлов = ЭлектронныеДокументыСлужебныйВызовСервера.ДобавитьДанныеПоПакетуЭД(
																						ПакетЭД,
																						МассивСтруктурПодписей,
																						СтруктураДанных,
																						ДанныеРаспаковки.СоответствиеФайлПараметры,
																						ДанныеРаспаковки.ФайлыПакета,
																						ЕстьОшибкаРаспаковки,
																						ЕстьКриптосредствоНаКлиенте,
																						СоответствиеЭДИПодписей);
																						
				Если МассивДобавленныхФайлов <> Неопределено И МассивДобавленныхФайлов.Количество() > 0 Тогда
					Если СоответствиеЭДИПодписей.Количество() > 0 Тогда
						МассивЭДИПодписей = Новый Массив;
						Для Каждого Элемент Из СоответствиеЭДИПодписей Цикл
							Для Каждого ДанныеПодписи ИЗ Элемент.Значение Цикл
								СтруктураДанных = Новый Структура;
								СтруктураДанных.Вставить("ЭлектронныйДокумент", Элемент.Ключ);
								СтруктураДанных.Вставить("ДанныеПодписи", ДанныеПодписи);
								МассивЭДИПодписей.Добавить(СтруктураДанных);
							КонецЦикла;
						КонецЦикла
					КонецЕсли;
					ЗанестиИнформациюОПодписи(МассивЭДИПодписей);
					ВсегоРаспаковано = ВсегоРаспаковано + МассивДобавленныхФайлов.Количество();
				КонецЕсли;
				Если Не ЕстьОшибкаРаспаковки Тогда
					Если (ЗначениеЗаполнено(Параметры.ТипДанных)
							И ДанныеРаспаковки.СоответствиеФайлПараметры.Получить("ЭтоПроизвольныйЭД") = Неопределено
							И ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоПрямойОбмен(
								ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСпособОбменаЭДИзПакетаЭД(ПакетЭД)))
						Или (ЭлектронныеДокументыСлужебныйВызовСервера.ВерсияФорматаПакета(ПакетЭД)
							= ПредопределенноеЗначение("Перечисление.ВерсииФорматаПакетаЭД.Версия30")) Тогда
						
						Для Каждого ЭД ИЗ МассивДобавленныхФайлов Цикл
							МассивЭДДляФормированияИзвещений.Добавить(ЭД);
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если МассивЭДДляФормированияИзвещений.Количество() > 0 Тогда
				ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ИзвещениеОПолучении");
				ДопПараметры= Новый Структура;
				СформироватьПодписатьСлужебныйЭД(МассивДобавленныхФайлов, ВидЭД, , ДопПараметры, ОписаниеОповещения);
				ВыполнитьОписаниеОповещения = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	Если НЕ ЕстьОшибкаРаспаковки Тогда
		ЭлектронныеДокументыСлужебныйВызовСервера.УстановитьСтатусПакета(ПакетЭД,
			ПредопределенноеЗначение("Перечисление.СтатусыПакетовЭД.Распакован"));
	КонецЕсли;
	Если ВыполнитьОписаниеОповещения Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, ВсегоРаспаковано);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьПакетыДляОтправки(Параметры)
	
	Если Не Параметры.Свойство("ИндексПеребораПакетов") Тогда
		Параметры.Вставить("ИндексПеребораПакетов", 0);
	КонецЕсли;
	
	Если Не Параметры.Свойство("ИндексПеребораДанных") Тогда
		Параметры.Вставить("ИндексПеребораДанных", -1);
	КонецЕсли;
	
	ВложенныеПараметры = Неопределено;
	СоответствиеДанныхПакетов = Неопределено;
	МенеджерКриптографии = Неопределено;
	Если Параметры.Свойство("Параметры", ВложенныеПараметры) И ТипЗнч(ВложенныеПараметры) = Тип("Структура") Тогда
		ВложенныеПараметры.Свойство("СоответствиеДанныхПакетов", СоответствиеДанныхПакетов);
		ВложенныеПараметры.Свойство("МенеджерКриптографии", МенеджерКриптографии);
	КонецЕсли;
	
	Если ТипЗнч(СоответствиеДанныхПакетов) = Тип("Соответствие") Тогда
		Если СоответствиеДанныхПакетов.Количество() > Параметры.ИндексПеребораПакетов Тогда
			ТекИндексПакета = -1;
			// Определяем текущий обрабатываемый пакет
			Для Каждого КлючЗначение Из СоответствиеДанныхПакетов Цикл
				ТекИндексПакета = ТекИндексПакета + 1;
				Если ТекИндексПакета = Параметры.ИндексПеребораПакетов Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			МассивДанныхЭД = КлючЗначение.Значение;
			
			Если Параметры.ИндексПеребораДанных + 1 < МассивДанныхЭД.Количество() Тогда
				Параметры.ИндексПеребораДанных = Параметры.ИндексПеребораДанных + 1;
				
				ДанныеЭД = МассивДанныхЭД[Параметры.ИндексПеребораДанных];
				
				Если ДанныеЭД.ЭтоОтправкаПодтверждения Тогда
					ПодготовитьПакетыДляОтправки(Параметры);
					Возврат;
				КонецЕсли;
				
				ПараметрыШифрования = ДанныеЭД.ПараметрыШифрования;
				Если ПараметрыШифрования = Неопределено Тогда
					ПодготовитьПакетыДляОтправки(Параметры);
					Возврат;
				КонецЕсли;
				
				МассивСертификатов = Новый Массив;
				Для каждого СтрокаСертификата Из ПараметрыШифрования Цикл
					ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(СтрокаСертификата);
					Сертификат = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
					МассивСертификатов.Добавить(Сертификат);
				КонецЦикла;
				НеЗашифрованныеДанные = ПолучитьИзВременногоХранилища(ДанныеЭД.ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
				
				Оповещение = Новый ОписаниеОповещения("ПослеШифрованияСоздатьПакетЭД", ЭтотОбъект, Параметры);
				
				Попытка
					МенеджерКриптографии.НачатьШифрование(Оповещение, НеЗашифрованныеДанные, МассивСертификатов);
				Исключение
					ВидОперации = Нстр("ru = 'Шифрование данных'");
					ТекстСообщения = Нстр("При шифровании данных произошла ошибка: %1");
					КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ОписаниеОшибки());
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
													ТекстСообщения, КраткоеПредставлениеОшибки);
					ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
									ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения, 0);
					ПодготовитьПакетыДляОтправки(Параметры);
				КонецПопытки
				
			Иначе
				Параметры.ИндексПеребораДанных = -1;
				Параметры.ИндексПеребораПакетов = Параметры.ИндексПеребораПакетов + 1; // переходим к обработке следующего пакета
				ПодготовитьПакетыДляОтправки(Параметры);
			КонецЕсли;
			Возврат
		КонецЕсли;
		
		Параметры.Удалить("ИндексПеребораПакетов");
		Параметры.Удалить("ИндексПеребораДанных");
		
		КолОтправленных = 0;
		ЭлектронныеДокументыСлужебныйВызовСервера.СохранитьИОтправитьЗашифрованныеДанные(
				СоответствиеДанныхПакетов, Параметры.СоответствиеПрофилейИПараметровСертификатов, КолОтправленных);
		Параметры.РезультатОтправкиПЭД.КолОтправленных = Параметры.РезультатОтправкиПЭД.КолОтправленных + КолОтправленных;
	КонецЕсли;
	ВыполнитьДействияПослеОтправкиПЭДЗавершить(Параметры);
	
КонецПроцедуры

Процедура ОбработатьОчередноеИзвещение(Параметры) Экспорт
	
	Параметры.ИндексОбработкиИзвещения = Параметры.ИндексОбработкиИзвещения + 1;
	ДанныеРаспаковки = Параметры.ДанныеРаспаковки;
	МассивДвоичныхДанныхИзвещений = ДанныеРаспаковки.СтруктураДвоичныхДанныхИзвещений;
	Если Параметры.ИндексОбработкиИзвещения < МассивДвоичныхДанныхИзвещений.Количество() Тогда
		// Обработать пришедшие извещения от оператора
		// Оно может быть в случае, когда получаем извещение от покупателя о приеме ЭСФ
		СтруктураДанных = МассивДвоичныхДанныхИзвещений[Параметры.ИндексОбработкиИзвещения];
		МассивСтруктурПодписей = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСоответствиеДанныхПодписей(
				СтруктураДанных.ИмяФайла, ДанныеРаспаковки.ФайлыПакета, СтруктураДанных.ДвоичныеДанные,
				ДанныеРаспаковки.СоответствиеФайлПараметры, Истина);
			
		Если МассивСтруктурПодписей <> Неопределено Тогда
			Параметры.Вставить("СтруктураДанных", СтруктураДанных);
			Параметры.Вставить("ДанныеДляПроверкиЭП", МассивСтруктурПодписей);
			Параметры.Вставить("ИндексПроверкиПодписи", -1);
			ПроверитьЭП(Неопределено, Параметры);
			Возврат;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

// Только для внутреннего использования
Процедура РаспаковатьМассивПакетовЭДПродолжить(Результат, СтруктураПакетовЭД) Экспорт
	
	ЕстьКриптосредствоНаКлиенте = ТипЗнч(Результат) = Тип("МенеджерКриптографии");
	ПараметрыПриложения.Вставить("ЭлектронноеВзаимодействие.ЕстьКриптосредствоНаКлиенте", ЕстьКриптосредствоНаКлиенте);
	ОбработатьОчереднойПакетЭД(, СтруктураПакетовЭД);
	
КонецПроцедуры

// Выводит оповещение о смене ответственного
Процедура ОповеститьПользователяОСменеОтветственного(Ответственный, КоличествоВсего, КоличествоОбработанных) Экспорт
	
	Если КоличествоОбработанных > 0 Тогда
			
		ТекстСообщения = НСтр("ru = 'Для %КоличествоОбработанных% из %КоличествоВсего% выделенных эл.документов
							|установлен ответственный ""%Ответственный%""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОбработанных%", КоличествоОбработанных);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоВсего%",        КоличествоВсего);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ответственный%",          Ответственный);
		ТекстЗаголовка = НСтр("ru='Ответственный ""%Ответственный%"" установлен'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Ответственный%", Ответственный);
		ПоказатьОповещениеПользователя(ТекстЗаголовка, , ТекстСообщения, БиблиотекаКартинок.Информация32);
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Ответственный ""%Ответственный%"" не установлен ни для одного эл.документа.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ответственный%", Ответственный);
		ТекстЗаголовка = НСтр("ru = 'Ответственный ""%Ответственный%"" не установлен'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Ответственный%", Ответственный);
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьОтветственного(Знач МассивЭД, Знач ОбработкаОповещения) Экспорт
	
	Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ЕстьПравоОбработкиЭД(Истина) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЭД", МассивЭД);
	
	ОткрытьФорму("Обработка.ЭлектронныеДокументы.Форма.ПеренаправлениеЭД", ПараметрыФормы, , , , , ОбработкаОповещения);
	
КонецПроцедуры

// Устарела.Использует модальный вызов. Использовать "ЗапроситьПарольКСертификату"
// Функция получает пароль пользователя к сертификатам ЭП. Если в СоотвСертификатовИИхСтруктур передано несколько
// сертификатов, то после запроса пароля у пользователя в этот параметр вместо списка помещается один выбранный
// сертификат и его параметры.
//
// Параметры:
//  СоотвСертификатовИИхСтруктур - Соответствие - содержит соответствие сертификатов и их параметров:
//    * Ключ     - СправочникСсылка.СертификатыЭП - сертификат ЭП.
//    * Значение - Структура - содержит параметры сертификата.
//  ВидОперации                    - Строка - вид операции, для выполнения которой запрашивается пароль пользователя.
//  ОбъектыДляОбработки - Массив, СправочникСсылка.ЭДПрисоединенныеФайлы - один или список объектов ИБ для обработки;
//  ДляЗаписиВИБ - Булево - Истина - если запрашивается пароль для сохранения в реквизит справочника.
//
// Возвращаемое значение:
//  Булево - Истина - если пароль для сертификата ЭП получен, иначе - Ложь.
//
Функция ПарольКСертификатуПолучен2(СоотвСертификатовИИхСтруктур, ОбъектыДляОбработки = Неопределено) Экспорт
	
	ПарольПолучен = Ложь;
	
	Если ТипЗнч(СоотвСертификатовИИхСтруктур) = Тип("Соответствие") Тогда
		КоличествоСертификатов = СоотвСертификатовИИхСтруктур.Количество();
		Для Каждого КлючИЗначение Из СоотвСертификатовИИхСтруктур Цикл
			Сертификат = КлючИЗначение.Ключ;
			ПараметрыСертификата = КлючИЗначение.Значение;
			ПрограммаБанка = Неопределено;
			Если НЕ ЗначениеЗаполнено(ПараметрыСертификата) Тогда
				ПараметрыСертификата = ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыСертификата(Сертификат);
			КонецЕсли;
			Если ПараметрыСертификата.Свойство("ПрограммаБанка")
				И ПараметрыСертификата.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн") Тогда
				ПарольПолучен = Истина;
				Прервать;
			КонецЕсли;
			ПарольПользователя = Неопределено;
			Если КоличествоСертификатов = 1 И (ПараметрыСертификата.Свойство("ПарольПолучен", ПарольПолучен) И ПарольПолучен
												ИЛИ ПарольКСертификатуПолучен(Сертификат, ПарольПользователя)) Тогда
				Если НЕ ПарольПолучен Тогда
					ПарольПолучен = Истина;
					ПараметрыСертификата.Вставить("ПарольПолучен", ПарольПолучен);
					ПараметрыСертификата.Вставить("ПарольПользователя", ПарольПользователя);
					ПараметрыСертификата.Вставить("ВыбранныйСертификат", Сертификат);
				КонецЕсли;
				Прервать;
			ИначеЕсли (ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку")
						ИЛИ ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.iBank2"))
					И НЕ ОбъектыДляОбработки = Неопределено
					И АктуаленКэшПароляСертификатаЧерезДополнительнуюОбработку(ПараметрыСертификата, ОбъектыДляОбработки) Тогда
				ПараметрыСертификата.Вставить("ВыбранныйСертификат", Сертификат);
				ПарольПолучен = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ПарольПолучен Тогда
			СоотвСертификатовИИхСтруктур = Новый Соответствие;
			СоотвСертификатовИИхСтруктур.Вставить(Сертификат, ПараметрыСертификата);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПарольПолучен;

КонецФункции

Процедура ПолучитьПарольКСертификату(СоотвСертификатовИИхСтруктур, ВидОперации, ОбъектыДляОбработки = Неопределено, ДляЗаписиВИБ = Ложь, Параметры) Экспорт
	
	Если ТипЗнч(СоотвСертификатовИИхСтруктур) = Тип("Соответствие")
		И СоотвСертификатовИИхСтруктур.Количество() > 0 Тогда
		
		ОписаниеОповещения = Неопределено;
		Если НЕ Параметры.Свойство("ВызватьОповещение", ОписаниеОповещения)
			ИЛИ ТипЗнч(ОписаниеОповещения) <> Тип("ОписаниеОповещения") Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВводаПароляПользователя", ЭтотОбъект, Параметры);
		КонецЕсли;
		ПарольПолучен = Ложь;
		Если СоотвСертификатовИИхСтруктур.Количество() = 1 Тогда
			СбербанкОнлайн = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн");
			Для Каждого Элемент Из СоотвСертификатовИИхСтруктур Цикл
				Если Элемент.Значение.ПарольПолучен = Истина ИЛИ Элемент.Значение.ПрограммаБанка = СбербанкОнлайн Тогда
					Элемент.Значение.Вставить("ВыбранныйСертификат", Элемент.Ключ);
					ВыполнитьОбработкуОповещения(ОписаниеОповещения, Элемент.Значение);
					ПарольПолучен = Истина;
				КонецЕсли;
				Прервать;
			КонецЦикла;
		КонецЕсли;
		Если НЕ ПарольПолучен Тогда
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("ВидОперации",   ВидОперации);
			ПараметрыФормы.Вставить("ДляЗаписиВИБ",  ДляЗаписиВИБ);
			ПараметрыФормы.Вставить("Соответствие",  СоотвСертификатовИИхСтруктур);
			Если ОбъектыДляОбработки <> Неопределено Тогда
				Если ТипЗнч(ОбъектыДляОбработки) <> Тип("Массив") Тогда
					МассивОбъектов = Новый Массив;
					МассивОбъектов.Добавить(ОбъектыДляОбработки);
				Иначе
					МассивОбъектов = ОбъектыДляОбработки;
				КонецЕсли;
				ПараметрыФормы.Вставить("ОбъектыДляОбработки", МассивОбъектов);
			КонецЕсли;
			ОткрытьФорму("Обработка.ОбменЭлектроннымиДокументамиСБанком.Форма.ЗапросПароляКСертификату",
				ПараметрыФормы, , , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьРезультатВводаПароляПользователя(СтруктураВозврата, Параметры) Экспорт
	
	Если ТипЗнч(СтруктураВозврата) = Тип("Структура") Тогда
		ВыбранныйСертификат = Неопределено;
		Если СтруктураВозврата.Свойство("ВыбранныйСертификат", ВыбранныйСертификат)
				И ЗначениеЗаполнено(ВыбранныйСертификат) Тогда
			ПараметрыСертификата = Параметры.СоотвСертификатовИИхСтруктур[ВыбранныйСертификат];
			ПараметрыСертификата.Вставить("ПарольПолучен", Истина);
			ПараметрыСертификата.Вставить("ПарольПользователя", СтруктураВозврата.ПарольПользователя);
			ПараметрыСертификата.Вставить("ВыбранныйСертификат", ВыбранныйСертификат);
			ПараметрыСертификата.Вставить("Комментарий", СтруктураВозврата.Комментарий);
			Параметры.СоотвСертификатовИИхСтруктур.Очистить();
			Параметры.СоотвСертификатовИИхСтруктур.Вставить(ВыбранныйСертификат, ПараметрыСертификата);
		Иначе
			Параметры.СоотвСертификатовИИхСтруктур.Очистить();
		КонецЕсли;
	Иначе
		Параметры.СоотвСертификатовИИхСтруктур.Очистить();
	КонецЕсли;
	
	Если Параметры.Свойство("ВызватьОповещение") Тогда
		ВыполнитьОбработкуОповещения(Параметры.ВызватьОповещение);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВызовыИзПереопределяемыхМодулейЭП

// Вызывается из ЭлектроннаяПодписьПереопределяемыйКлиент,
// из одноименных процедур, которые в свою очередь вызываются из формы ПроверкаСертификата,
// если при создании формы были добавлены дополнительные проверки.
//
// Параметры:
//  Параметры - Структура - со свойствами:
//  * ОжидатьПродолжения   - Булево - (возвращаемое значение) - если Истина, тогда дополнительная проверка
//                            будет выполнятся асинхронно, продолжение возобновится после выполнения оповещения.
//                            Начальное значение Ложь.
//  * Оповещение           - ОписаниеОповещения - обработка, которую нужно вызывать для продолжения
//                              после асинхроннного выполнения дополнительной проверки.
//  * Сертификат           - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - проверяемый сертификат.
//  * Проверка             - Строка - имя проверки, добавленное в процедуре ПриСозданииФормыПроверкаСертификата
//                              общего модуля ЭлектроннаяПодписьПереопределяемый.
//  * МенеджерКриптографии - МенеджерКриптографии - подготовленный менеджер криптографии для
//                              выполнения проверки.
//  * ОписаниеОшибки       - Строка - (возвращаемое значение) - описание ошибки, полученной при выполнении проверки.
//                              Это описание сможет увидеть пользователь при нажатии на картинку результата.
//  * ЭтоПредупреждение    - Булево - (возвращаемое значение) - вид картинки Ошибка/Предупреждение 
//                            начальное значение Ложь.
//
Процедура ПриДополнительнойПроверкеСертификата(Параметры) Экспорт
	
	// Авторизация на сервере Такскома
	Если Параметры.Проверка = "ТестСвязиСОператором" Тогда
		
		Параметры.ОжидатьПродолжения = Истина;
		Структура = Новый Структура;
		Структура.Вставить("СертификатПодписи", Параметры.Сертификат);
		ЗашифрованныеДанные = ЭлектронныеДокументыСлужебныйВызовСервера.ЗашифрованныйМаркер(Структура);
		// Расшифровка
		Оповещение = Новый ОписаниеОповещения("ПослеРасшифровкиМаркераЗавершитьТест", ЭтотОбъект, Параметры,
			"ПриОшибкеРасшифровкиМаркераДополнительнойПроверкиСертификата", ЭтотОбъект);
		
		Параметры.МенеджерКриптографии.НачатьРасшифровку(Оповещение, ЗашифрованныеДанные);
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОшибкеРасшифровкиМаркераДополнительнойПроверкиСертификата(ИнформацияОбОшибке, СтандартнаяОбработка, Параметры) Экспорт
	
	Параметры.ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	СтандартнаяОбработка = Ложь;
	Параметры.ОжидатьПродолжения = Ложь;
	ВыполнитьОбработкуОповещения(Параметры.Оповещение);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиАсинхронныхДиалогов

Процедура ПустойОбработчик(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
КонецПроцедуры

Процедура ПослеРасшифровкиМаркераЗавершитьТест(Результат, Параметры) Экспорт
	
	ЭлектроннаяПодписьСлужебныйКлиентСервер.ПустыеРасшифрованныеДанные(Результат, Параметры.ОписаниеОшибки);
	ВыполнитьОбработкуОповещения(Параметры.Оповещение);
	
КонецПроцедуры

Процедура ПослеШифрованияСоздатьПакетЭД(ЗашифрованныеДанные, Параметры) Экспорт
	
	ВложенныеПараметры = Неопределено;
	СоответствиеДанныхПакетов = Неопределено;
	МенеджерКриптографии = Неопределено;
	Если Параметры.Свойство("Параметры", ВложенныеПараметры) И ТипЗнч(ВложенныеПараметры) = Тип("Структура") Тогда
		ВложенныеПараметры.Свойство("СоответствиеДанныхПакетов", СоответствиеДанныхПакетов);
		ВложенныеПараметры.Свойство("МенеджерКриптографии", МенеджерКриптографии);
	КонецЕсли;
	
	Если ТипЗнч(СоответствиеДанныхПакетов) = Тип("Соответствие") Тогда
		ТекИндексПакета = -1;
		Для Каждого КлючЗначение Из СоответствиеДанныхПакетов Цикл
			ТекИндексПакета = ТекИндексПакета + 1;
			Если ТекИндексПакета = Параметры.ИндексПеребораПакетов Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;

		МассивДанныхЭД = КлючЗначение.Значение;
		ДанныеЭД = МассивДанныхЭД[Параметры.ИндексПеребораДанных];
		
		ДанныеЭД.ДанныеФайла.СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ЗашифрованныеДанные);
	КонецЕсли;
	
	ПодготовитьПакетыДляОтправки(Параметры)
	
КонецПроцедуры

Процедура СформироватьНовыйЭДКаталогЗавершить(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Организация = Неопределено;
	Если ЗначениеЗаполнено(Результат)
		И ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("Организация", Организация) Тогда
		
		СтруктураКаталога = Новый Структура;
		СтруктураКаталога.Вставить("Организация", Организация);
		СтруктураКаталога.Вставить("ТоварыКаталога", Результат);
		Параметры = Новый Структура("СтруктураКаталога", СтруктураКаталога);
		ОткрытьФорму("Обработка.ЭлектронныеДокументы.Форма.ФормаВыгрузкаЭДВФайл", Параметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьПодписатьОтправитьКаталогЗавершить(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	СоглашениеЭД = Неопределено;
	ОткрыватьФормыЭД = Неопределено;
	Если ЗначениеЗаполнено(Результат)
		И ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("СоглашениеОбИспользованииЭД", СоглашениеЭД) Тогда
		
		ЭлектронныеДокументыСлужебныйВызовСервера.УстановитьНовуюВерсиюЭД(СоглашениеЭД);
		
		МассивСсылок = ЭлектронныеДокументыСлужебныйКлиент.ПолучитьМассивПараметров(СоглашениеЭД);
		Если МассивСсылок = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ТоварыКаталога", Результат);
		
		ЭлектронныеДокументыСлужебныйКлиент.ОбработатьЭД(МассивСсылок, "СформироватьУтвердитьПодписатьОтправить",
			СтруктураПараметров);
		
		Оповестить("ОбновитьСостояниеЭД");
		Если ДополнительныеПараметры.Свойство("ОткрыватьФормыЭД", ОткрыватьФормыЭД)
			И ОткрыватьФормыЭД = Истина Тогда
			ЭлектронныеДокументыКлиент.ОткрытьАктуальныйЭД(СоглашениеЭД);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбменЭлектроннымиДокументамиСБанками

Процедура ПослеПолученияОтпечатковВыполнитьОбменСБанком(ОтпечаткиСертификатов, Параметры) Экспорт
	
	МассивОтпечатковСертификатов = Новый Массив;
	Если ТипЗнч(ОтпечаткиСертификатов) = Тип("Соответствие") Тогда
		Для Каждого КлючЗначение Из ОтпечаткиСертификатов Цикл
			МассивОтпечатковСертификатов.Добавить(КлючЗначение.Ключ);
		КонецЦикла
	КонецЕсли;
	
	ДоступныеСертификаты = ЭлектронныеДокументыСлужебныйВызовСервера.СоответствиеДоступныхСертификатовИПараметров(
		МассивОтпечатковСертификатов, Параметры.СоглашениеЭД);
			
	Сертификат = Неопределено;
	МассивСертификатов = Новый Массив;
	ПарольПолучен = Ложь;
	Для Каждого КлючЗначение Из ДоступныеСертификаты Цикл
		МассивСертификатов.Добавить(КлючЗначение.Ключ);
		Если КлючЗначение.Значение.Свойство("ПарольПолучен", ПарольПолучен) И ПарольПолучен = Истина Тогда
			МассивСертификатов.Очистить();
			МассивСертификатов.Добавить(КлючЗначение.Ключ);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если МассивСертификатов.Количество() Тогда
			
		ИД_Параметров = Строка(Новый УникальныйИдентификатор);
			
		СертификатыБанкаСМаркерами = ЭлектронныеДокументыСлужебныйВызовСервера.СертификатыБанкаСМаркерами(
			Параметры.СоглашениеЭД, МассивСертификатов);
			
		Если СертификатыБанкаСМаркерами = Неопределено Тогда
			ВыполнитьОбменСБанками(Неопределено, Параметры);
			Возврат;
		КонецЕсли;
			
		ПараметрыПриложения.Вставить("ЭлектронноеВзаимодействие." + ИД_Параметров, СертификатыБанкаСМаркерами);
			
		ОписаниеДанных = Новый Структура;
		ОписаниеДанных.Вставить("ОтборСертификатов", МассивСертификатов);
		ОписаниеДанных.Вставить("БезПодтверждения",  Истина);
		ОписаниеДанных.Вставить("ЭтоАутентификация", Истина);
		ОписаниеДанных.Вставить("Операция", НСтр("ru = 'Аутентификация на сервере банка'"));
		ОписаниеДанных.Вставить("РазрешитьЗапоминатьПароль", Истина);
			
		ПараметрыЗапросаМеркера = Новый Структура("ИД_Параметров, ОписаниеДанных", ИД_Параметров, ОписаниеДанных);
		Маркер = Новый ОписаниеОповещения("ПолучитьДанныеЗашифрованногоМаркераБанка", ЭтотОбъект, ПараметрыЗапросаМеркера);
						
		ОписаниеДанных.Вставить("Данные", Маркер);
										
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьИПолучитьДокументыВБанкПослеРасшифровкиМаркера", ЭтотОбъект, Параметры);
					
		ЭлектроннаяПодписьКлиент.Расшифровать(ОписаниеДанных, , ОписаниеОповещения);
	КонецЕсли;

КонецПроцедуры

Процедура ПослеПолученияОтпечатковПроверитьСвязьСБанком(ОтпечаткиСертификатов, Параметры) Экспорт
	
	НастройкаЭДО = Параметры.НастройкаЭДО;
	РеквизитыНастройкиЭДО = Параметры.РеквизитыНастройкиЭДО;
	
	МассивОтпечатковСертификатов = Новый Массив;
	Если ТипЗнч(ОтпечаткиСертификатов) = Тип("Соответствие") Тогда
		Для Каждого КлючЗначение Из ОтпечаткиСертификатов Цикл
			МассивОтпечатковСертификатов.Добавить(КлючЗначение.Ключ);
		КонецЦикла
	ИначеЕсли РеквизитыНастройкиЭДО.ИспользуетсяКриптография Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиОбмена = Неопределено;
	ЭДЗапрос = ЭлектронныеДокументыСлужебныйВызовСервера.СформироватьЗапросЗонд(
		НастройкаЭДО, МассивОтпечатковСертификатов, НастройкиОбмена);
							
	Если НЕ ЗначениеЗаполнено(ЭДЗапрос) ИЛИ НастройкиОбмена = Неопределено Тогда
		СтруктураРезультата = Новый Структура("Успех", Ложь);
		ВыполнитьОбработкуОповещения(Параметры.ОбработчикПослеТестаНастройки, СтруктураРезультата);
		Возврат;
	КонецЕсли;
	Если РеквизитыНастройкиЭДО.ИспользуетсяКриптография Тогда
		Если НастройкиОбмена.Подписывать Тогда
			Если НЕ ЗначениеЗаполнено(НастройкиОбмена.СертификатОрганизацииДляПодписи)
				ИЛИ НЕ НастройкиОбмена.СертификатДоступен Тогда
				ТекстСообщения = НСтр("ru = 'Не найден подходящий сертификат для подписи документа Запрос-зонд'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				СтруктураРезультата = Новый Структура("Успех", Ложь);
				ВыполнитьОбработкуОповещения(Параметры.ОбработчикПослеТестаНастройки, СтруктураРезультата);
				Возврат;
			КонецЕсли;

			МассивСертификатов = Новый Массив;
			МассивСертификатов.Добавить(НастройкиОбмена.СертификатОрганизацииДляПодписи);
			Операция = НСтр("ru = 'Подписание электронного документа'");
			ОписаниеДанных = Новый Структура;
			ОписаниеДанных.Вставить("Операция", Операция);
			ОписаниеДанных.Вставить("ОтборСертификатов", МассивСертификатов);
			ОписаниеДанных.Вставить("ПоказатьКомментарий", Ложь);
			ОписаниеДанных.Вставить("БезПодтверждения", Истина);
			НаборДанных = Новый Массив;
			Данные = Новый Структура;
			ПараметрыДляПолученияДД = Новый Структура("ЭД, ОписаниеДанных", ЭДЗапрос, ОписаниеДанных);
			СсылкаНаДД = Новый ОписаниеОповещения("ПолучитьДвоичныеДанныеДляЭД", ЭтотОбъект, ПараметрыДляПолученияДД);
			Данные.Вставить("Данные", СсылкаНаДД);
			Данные.Вставить("Объект", ЭДЗапрос);
			НаборДанных.Добавить(Данные);
			ОписаниеДанных.Вставить("НаборДанных", НаборДанных);
			Параметры.Вставить("ЗапросЗонд", ЭДЗапрос);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПодписанияЗапросаЗонда", ЭтотОбъект, Параметры);
			ЭлектроннаяПодписьКлиент.Подписать(ОписаниеДанных, , ОписаниеОповещения);
		КонецЕсли;
	Иначе
		Параметры.Вставить("ЗапросЗонд", ЭДЗапрос);
		ОООЗ = Новый ОписаниеОповещения("ПолучитьМаркерБанкаПослеВводаДанныхАутентификации", ЭтотОбъект, Параметры);
		ПолучитьДанныеАутентификации(НастройкаЭДО, ОООЗ, Истина);
	КонецЕсли;
	
КонецПроцедуры

//только для внутреннего использования
Процедура РазобратьЭДВыпискаБанка(ЭД) Экспорт
	
	Перем СсылкаНаХранилище, Организация, СоглашениеЭД, МассивСчетов;
	
	ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьДанныеВыписки(ЭД,
																	СсылкаНаХранилище,
																	МассивСчетов,
																	Организация,
																	СоглашениеЭД);
	Если НЕ ЗначениеЗаполнено(СсылкаНаХранилище) Тогда
		Возврат;
	КонецЕсли;
	ЭлектронныеДокументыКлиентПереопределяемый.РазобратьФайлВыписки(ЭД,
																	СсылкаНаХранилище,
																	Организация,
																	МассивСчетов,
																	СоглашениеЭД);
	
КонецПроцедуры

Процедура ПослеПолученияОтпечатковПолучитьВыпискуБанка(Отпечатки, Параметры) Экспорт
	
	МассивОтпечатков = Новый Массив;
	Если ТипЗнч(Отпечатки) = Тип("Соответствие") Тогда
		Для Каждого КлючЗначение Из Отпечатки Цикл
			МассивОтпечатков.Добавить(КлючЗначение.Ключ);
		КонецЦикла
	КонецЕсли;
	
	СоглашениеЭД = Параметры.СоглашениеЭД;
	ДатаНачала = Параметры.ДатаНачала;
	ДатаОкончания = Параметры.ДатаОкончания;
	РеквизитыНастройкиЭДО = Параметры.РеквизитыНастройкиЭДО;
	НомерСчета = Параметры.НомерСчета;
	
	НастройкиОбмена = Неопределено;
	МассивЭД = ЭлектронныеДокументыСлужебныйВызовСервера.ЗапросыВыписок(
		СоглашениеЭД, ДатаНачала, ДатаОкончания, НомерСчета, МассивОтпечатков, НастройкиОбмена);
		
	Если НЕ МассивЭД.Количество() ИЛИ НастройкиОбмена = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("МассивЭД", МассивЭД);
	
	Если НастройкиОбмена.Подписывать Тогда
		Если НЕ ЗначениеЗаполнено(НастройкиОбмена.СертификатОрганизацииДляПодписи)
				ИЛИ НЕ НастройкиОбмена.СертификатДоступен Тогда
			ТекстСообщения = НСтр("ru = 'Не найден подходящий сертификат для подписи документа Запрос выписки'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
			
		ПараметрыСертификата = ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыСертификата(
				НастройкиОбмена.СертификатОрганизацииДляПодписи);
		Соответствие = Новый Соответствие;
		Соответствие.Вставить(НастройкиОбмена.СертификатОрганизацииДляПодписи, ПараметрыСертификата);
		ВидОперации = НСтр("ru = 'Подписание электронных документов'");
		ПараметрыОбработки = Новый Структура;
		ПараметрыОбработки.Вставить("СоотвСертификатовИИхСтруктур", Соответствие);
		ПараметрыОбработки.Вставить("МассивЭД", МассивЭД);
		ПараметрыОбработки.Вставить("ПараметрыФормы", Параметры);
		ПодписатьЗапросыВыписок(Неопределено, ПараметрыОбработки);
		Возврат;
	КонецЕсли;
		
	ПараметрыАвторизации = Новый Структура;
	
	Если Не РеквизитыНастройкиЭДО.ИспользуетсяКриптография Тогда
		Если НЕ ПолученыДанныеАвторизации(СоглашениеЭД, ПараметрыАвторизации) Тогда
			ОООЗ = Новый ОписаниеОповещения("ОткрытьФормуЗапросаВыписки", ЭтотОбъект, Параметры);
			ПолучитьДанныеАутентификации(СоглашениеЭД, ОООЗ);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьФормуЗапросаВыписки(ПараметрыАвторизации, Параметры);
	
КонецПроцедуры

Процедура ПослеПодключенияВнешнейКомпонентыБанка(Результат, Параметры) Экспорт
	
	ПараметрыВК = Параметры.ПараметрыВК;
	Если Результат Тогда
		Попытка
			ПодключаемыйМодуль = Новый(Параметры.ПараметрыВК.ИмяМодуля);
			Если ПараметрыВК.Свойство("servicePort") Тогда
				ПодключаемыйМодуль.servicePort = 28016;
			КонецЕсли;
			ПараметрыПодсистемыОбменСБанками = ПараметрыПриложения["ОбменСБанками.Параметры"];
			ПараметрыПодсистемыОбменСБанками.Вставить(ПараметрыВК.ИмяМодуля, ПодключаемыйМодуль);
		Исключение
			ТекстСообщения = НСтр("ru = 'Ошибка подключения внешней компоненты банка.'");
			Операция = НСтр("ru = 'Подключение внешней компоненты банка'");
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
				Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
		КонецПопытки;
	ИначеЕсли НЕ Параметры.ПараметрыВК.Свойство("ВыполняласьПопыткаУстановкиКомпоненты") Тогда
		Параметры.ПараметрыВК.Вставить("ВыполняласьПопыткаУстановкиКомпоненты");
		ОО = Новый ОписаниеОповещения("ПодключитьВнешнююКомпонентуБанка", ЭтотОбъект, Параметры);
		НачатьУстановкуВнешнейКомпоненты(ОО, ПараметрыВК.Адрес);
		Возврат;
	КонецЕсли;
	
	ОбработчикВыполнения = Параметры.ПараметрыВК.ОбработчикПослеПодключенияКомпоненты;
	
	ВыполнитьОбработкуОповещения(ОбработчикВыполнения, ПодключаемыйМодуль);
	
КонецПроцедуры

// Производит загрузку настроек ЭДО с банком из файла настроек
Процедура ЗагрузитьНастройкуЭДОИзФайла(ОбработчикОповещения = Неопределено) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ОбработчикПослеСозданияНастройкиЭДО", ОбработчикОповещения);
	#Если ВебКлиент Тогда
		АдресВХранилище = Неопределено;
		Обработчик = Новый ОписаниеОповещения("ПослеВыбораФайлаВВебКлиентеСоздатьНастройкуЭДОСБанком", ЭтотОбъект, Параметры);
		НачатьПомещениеФайла(Обработчик, АдресВХранилище, "*.xml", Истина);
	#Иначе
		Режим = РежимДиалогаВыбораФайла.Открытие;
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
		ДиалогОткрытияФайла.ПолноеИмяФайла = "";
		Фильтр = НСтр("ru = 'Файл настроек'") + "(*.xml)|*.xml";
		ДиалогОткрытияФайла.Фильтр = Фильтр;
		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
		ДиалогОткрытияФайла.Заголовок = "Выберите файл настроек";
		Обработчик = Новый ОписаниеОповещения("ПослеВыбораФайлаСоздатьНастройкуЭДОСБанком", ЭтотОбъект, Параметры);
		ДиалогОткрытияФайла.Показать(Обработчик);
	#КонецЕсли
	
КонецПроцедуры

Процедура ПослеВыбораФайлаВВебКлиентеСоздатьНастройкуЭДОСБанком(Результат, Адрес, ИмяФайла, ДополнительныеПараметры) Экспорт

	Если Результат = Истина Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("НастройкиЗаполнения", Адрес);
		ОткрытьФорму("Справочник.СоглашенияОбИспользованииЭД.Форма.ФормаЭлементаБанк", ПараметрыФормы);
	КонецЕсли;

КонецПроцедуры

Процедура ПослеВыбораФайлаСоздатьНастройкуЭДОСБанком(МассивФайлов, ДополнительныеПараметры) Экспорт

	Если МассивФайлов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИмяФайла = МассивФайлов[0];
	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
	Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла);
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("НастройкиЗаполнения", Адрес);
	ОткрытьФорму("Справочник.СоглашенияОбИспользованииЭД.Форма.ФормаЭлементаБанк", ПараметрыФормы);
	
КонецПроцедуры

Процедура ПолучитьЛичныеСертификатыПослеСозданияМенеджераКриптографии(МенеджерКриптографии, Параметры) Экспорт
	
	Если НЕ ТипЗнч(МенеджерКриптографии) = Тип("МенеджерКриптографии") Тогда
		Если Параметры.СпособАутентификации = "ПоЛогинуИлиСертификату" Тогда
			ПараметрыФормы = Новый Структура("СпособАутентификации", "ПоЛогинуИПаролю");
			Оповещение = Новый ОписаниеОповещения("ПолучитьМаркерПослеВводаДанныхАутентификации", ЭтотОбъект, Параметры);
			ОткрытьФорму("Обработка.ОбменЭлектроннымиДокументамиСБанком.Форма.ПолучениеНастроекИзБанка", ПараметрыФормы, , ,
				ВариантОткрытияОкна.ОтдельноеОкно, , Оповещение);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("МенеджерКриптографии", МенеджерКриптографии);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПоказатьВыборСертификатовПослеПолученияИзЛичногоХранилища", ЭтотОбъект, Параметры);
		
	МенеджерКриптографии.НачатьПолучениеХранилищаСертификатов(
		ОписаниеОповещения, ТипХранилищаСертификатовКриптографии.ПерсональныеСертификаты);
	
КонецПроцедуры

Процедура ПоказатьВыборСертификатовПослеПолученияИзЛичногоХранилища(ХранилищеСертификатов, Параметры) Экспорт
	
	Сертификаты = ХранилищеСертификатов.ПолучитьВсе();
	
	Если НЕ Сертификаты.Количество() И Параметры.СпособАутентификации = "ПоЛогинуИлиСертификату" Тогда
		ПараметрыФормы = Новый Структура("СпособАутентификации", "ПоЛогинуИПаролю");
		Оповещение = Новый ОписаниеОповещения("ПолучитьМаркерПослеВводаДанныхАутентификации", ЭтотОбъект, Параметры);
		ОткрытьФорму("Обработка.ОбменЭлектроннымиДокументамиСБанком.Форма.ПолучениеНастроекИзБанка", ПараметрыФормы, , ,
			ВариантОткрытияОкна.ОтдельноеОкно, , Оповещение);
	КонецЕсли;
	
	СписокВыбора = Новый СписокЗначений;
		
	Для Каждого Сертификат Из Сертификаты Цикл
		ПредставлениеСертификата = ЭлектроннаяПодписьКлиентСервер.ПредставлениеСертификата(Сертификат);
		НовЗапись = СписокВыбора.Добавить(Base64Строка(Сертификат.Отпечаток), ПредставлениеСертификата);
	КонецЦикла;
	
	СписокВыбора.СортироватьПоПредставлению();
	
	ПараметрыФормы = Новый Структура(
		"СписокВыбораСертификатов, СпособАутентификации", СписокВыбора, Параметры.СпособАутентификации);
	ОповещениеВыбораСертификата = Новый ОписаниеОповещения(
		"ОбработатьВводДанныхАутентификацииНаСервереБанка", ЭтотОбъект, Параметры);
	ОткрытьФорму("Обработка.ОбменЭлектроннымиДокументамиСБанком.Форма.ПолучениеНастроекИзБанка", ПараметрыФормы, , ,
		ВариантОткрытияОкна.ОтдельноеОкно, , ОповещениеВыбораСертификата);
	
КонецПроцедуры

Процедура ОбработатьВводДанныхАутентификацииНаСервереБанка(ДанныеАутентификации, Параметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДанныеАутентификации) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("Пароль", ДанныеАутентификации.Пароль);
	
	Если ДанныеАутентификации.Свойство("Отпечаток") И Не ПустаяСтрока(ДанныеАутентификации.Отпечаток) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПолучитьМаркерБанкаПослеПолученияСертификатаКриптографии", ЭтотОбъект, Параметры);
		ЭлектроннаяПодписьКлиент.ПолучитьСертификатПоОтпечатку(ОписаниеОповещения, ДанныеАутентификации.Отпечаток, Истина);
	ИначеЕсли ДанныеАутентификации.Свойство("Логин") И Не ПустаяСтрока(ДанныеАутентификации.Логин) Тогда
		ПолучитьМаркерПослеВводаДанныхАутентификации(ДанныеАутентификации, Параметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьМаркерБанкаПослеПолученияСертификатаКриптографии(Сертификат, Параметры) Экспорт
	
	Если ТипЗнч(Сертификат) <> Тип("СертификатКриптографии") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСертификата = Сертификат.Выгрузить();
	
	Параметры.Вставить("ДанныеСертификата", ДанныеСертификата);
	
	Обработчик = Новый ОписаниеОповещения(
		"РасшифроватьМаркерБанкаПослеПолученияИнформацииОМенеджереКриптографии", ЭтотОбъект, Параметры);
	Параметры.МенеджерКриптографии.НачатьПолучениеИнформацииМодуляКриптографии(Обработчик);
	
КонецПроцедуры

Процедура РасшифроватьМаркерБанкаПослеПолученияИнформацииОМенеджереКриптографии(ИнформацияМодуля, Параметры) Экспорт
	
	СертификатСсылка = ЭлектронныеДокументыСлужебныйВызовСервера.СоздатьНайтиСертификатЭП(
				Параметры.ДанныеСертификата, Параметры.Организация, ИнформацияМодуля.Имя);
		
	Если Не ЗначениеЗаполнено(СертификатСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлектроннаяПодписьКлиент.УстановитьПарольСертификата(СертификатСсылка, Параметры.Пароль);
	
	Маркер = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьМаркерБанка(
		Параметры.АдресСервера, "0", Параметры.ДанныеСертификата);
	
	Если Не ЗначениеЗаполнено(Маркер) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Удалить("Пароль");
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("Операция", Нстр("ru = 'Аутентификация на сервере банка'"));
	ОписаниеДанных.Вставить("ЗаголовокДанных", Нстр("ru = 'Аутентификация на сервере банка'"));
	ОписаниеДанных.Вставить("СообщитьОЗавершении", Ложь);
	МассивСертификатов = Новый Массив;
	МассивСертификатов.Добавить(СертификатСсылка);
	ОписаниеДанных.Вставить("ОтборСертификатов", МассивСертификатов);
	ОписаниеДанных.Вставить("БезПодтверждения", Истина);
	ОписаниеДанных.Вставить("ЭтоАутентификация", Истина);
	ОписаниеДанных.Вставить("Данные", Маркер);
	
	ОбработкаРезультата = Новый ОписаниеОповещения(
		"ПолучитьНастройкиОбменаСБанкомПослеРасшифровкиМаркера", ЭтотОбъект, Параметры);
	
	ЭлектроннаяПодписьКлиент.Расшифровать(ОписаниеДанных, , ОбработкаРезультата);

КонецПроцедуры

Процедура ПолучитьНастройкиОбменаСБанкомПослеРасшифровкиМаркера(Результат, Параметры) Экспорт
	
	Если Не Результат.Успех Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиОбмена = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьНастройкиОбменаССервераБанка(
		Параметры.АдресСервера, Параметры.Банк, Параметры.НомерСчета, Результат.РасшифрованныеДанные);
		
	Если Не ЗначениеЗаполнено(НастройкиОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	Адрес = ПоместитьВоВременноеХранилище(НастройкиОбмена);
	
	Если Параметры.Свойство("ОбработчикПослеПолученияНастроек") Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОбработчикПослеПолученияНастроек, Адрес);
		Возврат;
	КонецЕсли;
		
	НоваяНастройкаЭДО = ЭлектронныеДокументыСлужебныйВызовСервера.СоздатьНастройкуЭДОСБанком(Адрес);
	
	Если Не ЗначениеЗаполнено(НоваяНастройкаЭДО) Тогда
		Возврат;
	КонецЕсли;

	Параметры.Вставить("НастройкаЭДО", НоваяНастройкаЭДО);
	
	Обработчик = Новый ОписаниеОповещения("ОбработатьРезультатТестаНастроек", ЭтотОбъект, Параметры);
	
	ПровестиТестНастройкиЭДОСБанком(Обработчик, Параметры)
	
КонецПроцедуры

Процедура ПолучитьМаркерПослеВводаДанныхАутентификации(ДанныеАутентификации, Параметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДанныеАутентификации) Тогда
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ПолучитьНастройкиОбменаСБанкомПослеПолученияМаркера", ЭтотОбъект, Параметры);
	
	НастройкаЭДО = ПредопределенноеЗначение("Справочник.СоглашенияОбИспользованииЭД.ПустаяСсылка");
	
	ПолучитьМаркерБанкаПоЛогинуИПаролю(НастройкаЭДО, Обработчик, Параметры.АдресСервера, "0",
		ДанныеАутентификации.Логин, ДанныеАутентификации.Пароль);
	
КонецПроцедуры

Процедура ПолучитьНастройкиОбменаСБанкомПослеПолученияМаркера(Маркер, Параметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Маркер) Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиОбмена = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьНастройкиОбменаССервераБанка(
		Параметры.АдресСервера, Параметры.Банк, Параметры.НомерСчета, Маркер);
		
	Если Не ЗначениеЗаполнено(НастройкиОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	Адрес = ПоместитьВоВременноеХранилище(НастройкиОбмена);
	
	Если Параметры.Свойство("ОбработчикПослеПолученияНастроек") Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОбработчикПослеПолученияНастроек, Адрес);
		Возврат;
	КонецЕсли;
	
	НоваяНастройкаЭДО = ЭлектронныеДокументыСлужебныйВызовСервера.СоздатьНастройкуЭДОСБанком(Адрес);
	
	Если Не ЗначениеЗаполнено(НоваяНастройкаЭДО) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("НастройкаЭДО", НоваяНастройкаЭДО);
	
	Обработчик = Новый ОписаниеОповещения("ОбработатьРезультатТестаНастроек", ЭтотОбъект, Параметры);
	
	ПровестиТестНастройкиЭДОСБанком(Обработчик, Параметры)

КонецПроцедуры

// Производит тестирование настройки обмена с банком
// Обработчик - ОписаниеОповещения - обработчик, вызываемый после тестирования настройки
//           * Результат - Структура - с полями:
//              ** Успех - Булево - результат тестирования настройки
//              ** МассивСообщений - Массив - в элементах строки, содержащие текст сообщений об ошибках
// Параметры - Структура - параметры обработки
//           * НастройкаЭДО - СправочникСсылка.СоглашенияОбИспользованииЭД - тестируемая настройка обмена с банком
//           * ИдентификаторНазначения - УникальныйИдентификатор - идентификатор формы для вывода сообщений
Процедура ПровестиТестНастройкиЭДОСБанком(Обработчик, Параметры) Экспорт
	
	РеквизитыНастройкиЭДО = ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыНастройкиЭДО(Параметры.НастройкаЭДО);
	ПрограммаБанка = РеквизитыНастройкиЭДО.ПрограммаБанка;
	
	Если ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн") Тогда
		ТестСоглашенияСбербанк(Параметры.НастройкаЭДО, Параметры);
	ИначеЕсли ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку") Тогда
		ТестСоглашенияЧерезДополнительнуюОбработку(Параметры.НастройкаЭДО, Параметры.ИдентификаторНазначения);
	ИначеЕсли ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.iBank2") Тогда
		Параметры.Вставить("СоглашениеЭД", Параметры.НастройкаЭДО);
		ОО = Новый ОписаниеОповещения("НачатьТестСоглашенияiBank2", ЭтотОбъект, Параметры);
		Параметры.Вставить("ОбработчикПослеПодключенияКомпоненты", ОО);
		ЭлектронныеДокументыСлужебныйКлиент.ПодключитьВнешнююКомпонентуiBank2(Параметры);
	ИначеЕсли ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АсинхронныйОбмен") Тогда
		Параметры.Вставить("РеквизитыНастройкиЭДО", РеквизитыНастройкиЭДО);
		Параметры.Вставить("ОбработчикПослеТестаНастройки", Обработчик);
		
		Оповещение = Новый ОписаниеОповещения("ПослеПолученияОтпечатковПроверитьСвязьСБанком", ЭтотОбъект, Параметры);
	
		ЭлектроннаяПодписьКлиент.ПолучитьОтпечаткиСертификатов(
			Оповещение, Истина, РеквизитыНастройкиЭДО.ИспользуетсяКриптография);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьРезультатТестаНастроек(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена ИЛИ Результат = Неопределено Тогда
		ПоказатьОповещениеПользователя(Нстр("ru = 'Прямой обмен с банком не подключен.'"));
		ЭлектронныеДокументыСлужебныйВызовСервера.ОтключитьНастройкуЭДО(Параметры.НастройкаЭДО);
	ИначеЕсли НЕ Результат.Успех Тогда
		Если Результат.Свойство("МассивСообщений") Тогда
			Для Каждого Сообщение Из Результат.МассивСообщений Цикл
				Сообщение.Сообщить();
			КонецЦикла
		КонецЕсли;
		ЭлектронныеДокументыСлужебныйВызовСервера.ОтключитьНастройкуЭДО(Параметры.НастройкаЭДО);
	Иначе
		ПоказатьОповещениеПользователя(Нстр("ru = 'Прямой обмен с банком упешно подключен !'"));
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Параметры.ОбработчикПослеСозданияНастройкиЭДО, Параметры.НастройкаЭДО);
	
КонецПроцедуры

Процедура ПолучитьДанныеЗашифрованногоМаркераБанка(Результат, ДополнительныеПараметры) Экспорт
	
	ИД_Параметров = Неопределено;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ИД_Параметров", ИД_Параметров) Тогда
		
		// Параметры - Структура("СоотвСоглашенийИМассиваСертификатовАвторизации, СоотвСертификатовИИхСтруктур, ВозврСоответствие").
		// ВозврСоответствие - параметр, который передается в метод, указанный в обработке оповещения
		// (ДополнительныеПараметры.ОбработкаОповещения).
		СоотвСертификатовИИхСтруктур = Неопределено;
		Параметры = ПараметрыПриложения["ЭлектронноеВзаимодействие." + ИД_Параметров];
		Если ТипЗнч(Параметры) = Тип("Структура")
			И Параметры.Свойство("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур) Тогда
			
			// Результат - структура - ОписаниеДанных которая была передана в метод Расшифровать(),
			// дополненная параметром ВыбранныйСертификат на стороне БСП:
			ОписаниеДанных = Неопределено;
			ВыбранныйСертификат = Неопределено;
			Если ДополнительныеПараметры.Свойство("ОписаниеДанных", ОписаниеДанных)
				И ТипЗнч(ОписаниеДанных) = Тип("Структура")
				И ОписаниеДанных.Свойство("ВыбранныйСертификат", ВыбранныйСертификат)
				И ТипЗнч(ВыбранныйСертификат) = Тип("Структура")
				И ВыбранныйСертификат.Свойство("Ссылка", ВыбранныйСертификат)
				И СоотвСертификатовИИхСтруктур.Получить(ВыбранныйСертификат) <> Неопределено Тогда
				
				ПараметрыСертификата = Параметры.СоотвСертификатовИИхСтруктур[ВыбранныйСертификат];
				МаркерЗашифрованный = Неопределено;
				ПараметрыСертификата.Свойство("МаркерЗашифрованный", МаркерЗашифрованный);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("Данные", МаркерЗашифрованный);
	ВыполнитьОбработкуОповещения(Результат.Оповещение, Параметры);
	
КонецПроцедуры

Процедура АутентификацияНаСервисе1СЭДО(ПараметрыАутентификации, Параметры) Экспорт
	
	Если ТипЗнч(ПараметрыАутентификации) <> Тип("Структура") Тогда
		// Пользователь отказался от ввода логина и пароля.
		Параметры.Удалить("ПараметрыАутентификации");
	Иначе
		
		Параметры.Вставить("ПараметрыАутентификации", ПараметрыАутентификации);
	КонецЕсли;
	
	РасшифроватьМаркер(, Параметры);
	
КонецПроцедуры


#КонецОбласти
