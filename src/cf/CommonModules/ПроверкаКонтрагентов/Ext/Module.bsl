////////////////////////////////////////////////////////////////////////////////
// Проверка одного или нескольких контрагентов при помощи веб-сервиса ФНС
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ОбновлениеИБИПодпискаНаПрограммныеСобытия

// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
//
Процедура ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	
	
КонецПроцедуры

// Добавляет процедуры-обработчики обновления, необходимые данной подсистеме.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                  общего модуля ОбновлениеИнформационнойБазы.
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
КонецПроцедуры

// Заполняет соответствие имен методов их псевдонимам для вызова из очереди заданий.
//
// Параметры:
//  СоответствиеИменПсевдонимам - Соответствие
//   Ключ - Псевдоним метода, например ОчиститьОбластьДанных.
//   Значение - Имя метода для вызова, например РаботаВМоделиСервиса.ОчиститьОбластьДанных.
//    В качестве значения можно указать Неопределено, в этом случае считается что имя 
//    совпадает с псевдонимом.
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
КонецПроцедуры

// Вызывается после загрузки данных.
//
// Параметры:
//  Контейнер - ОбработкаОбъект.ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера - менеджер
//    контейнера, используемый в процессе загрузки данных. Подробнее см. комментарий
//    к программному интерфейсу обработки ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера.
//
Процедура ПослеЗагрузкиДанных(Контейнер) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область Проверка

#Область ПроверкаОдногоКонтрагента

// Подписка на событие. Добавление в регистр набора ИНН и КПП для последующей проверки рег заданием
Процедура СохранитьРезультатПроверкиКонтрагентаПриЗаписи(КонтрагентОбъект, Отказ) Экспорт 
	
	Если КонтрагентОбъект.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	АдресХранилища = Неопределено;
	КонтрагентОбъект.ДополнительныеСвойства.Свойство("АдресХранилища", АдресХранилища);
	СохранитьРезультатПроверкиКонтрагента(КонтрагентОбъект, АдресХранилища);
	
КонецПроцедуры

Процедура СохранитьРезультатПроверкиКонтрагента(КонтрагентОбъект, АдресХранилища) Экспорт 
	
	//Проверяем условия, при которых не требуется запись в регистр
	Если НЕ ПроверкаКонтрагентовВызовСервера.ИспользованиеПроверкиВозможно() ИЛИ КонтрагентОбъект.ЭтоГруппа Тогда 
	 	Возврат;
	КонецЕсли;
	
	// Вместо объекта получаем ссылку
	КонтрагентСсылка 	= КонтрагентОбъект.Ссылка;
	ИНН 				= КонтрагентОбъект.ИНН;
	КПП 				= КонтрагентОбъект.КПП;
	
	Если ЗначениеЗаполнено(АдресХранилища) И ЭтоАдресВременногоХранилища(АдресХранилища) Тогда
		// Это запись с открытием формы
		ПеренестиРезультатыПроверкиИзХранилищаВРегистр(КонтрагентСсылка, ИНН, КПП, АдресХранилища);
	Иначе
		// Вы эту ветку попадем, если это запись контрагента:
		// 1. без открытия формы
		// 2. c открытием формы, но фоновое задание по определению состояния контрагента еще не завершилось
		
		// Если контрагент уже записан в регистр, то не записываем его
		// АдресХранилища в функцию ТекущееСостояниеКонтрагента не передаем, так как если мы в этой ветке, значит хранилище не содержит нужных данных
		СостояниеКонтрагента = ПроверкаКонтрагентовВызовСервера.ТекущееСостояниеКонтрагента(КонтрагентСсылка, ИНН, КПП);
		Если ЗначениеЗаполнено(СостояниеКонтрагента) Тогда 
		 	Возврат;
		КонецЕсли;
		
		// Запись в регистр выполняется с пустым состоянием
		// Состояние будет определено позже регламентным заданием
		ЗаписатьКонтрагентаСПустымСостоянием(КонтрагентСсылка, ИНН, КПП);
		
	КонецЕсли;
		
КонецПроцедуры

// Часть фонового задания по проверке контрагента из формы контрагента
Процедура ПроверитьКонтрагентаФоновоеЗадание(Параметры) Экспорт 
	
	// Присвоение даты находится здесь, так как ТекущаяДатаСеанса работает только на сервере
	Если НЕ Параметры.Свойство("Дата") Тогда
		Параметры.Вставить("Дата", НачалоДня(ТекущаяДатаСеанса()));
	КонецЕсли;
	
	Попытка
		ПроверитьКонтрагента(Параметры, Параметры.АдресХранилища);
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Проверка контрагентов.Проверка контрагента из карточки контрагента'"),
			УровеньЖурналаРегистрации.Ошибка,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
	КонецПопытки;
	
КонецПроцедуры

// Проверка одного контрагента по ИНН, КПП и Дате
Процедура ПроверитьКонтрагента(Параметры, АдресХранилища = Неопределено) Экспорт 
	
	// Готовим данные в нужном формате для передачи на проверку
	ДанныеКонтрагентов = ШаблонТаблицыДанныеКонтрагента();
	
	НоваяСтрока = ДанныеКонтрагентов.Добавить();
	НоваяСтрока.ОбластьДанныхВспомогательныеДанные = ОбщегоНазначения.ЗначениеРазделителяСеанса();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Параметры);
	
	ПроверитьКонтрагентов(ДанныеКонтрагентов, АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаНесколькихКонтрагентов

// Регламентное задание
// Для модели сервиса обновляет состояния
// Для локального режима обновляет состояния и записывает недостающие ИНН и КПП
Процедура ПроверитьКонтрагентовРегламентноеЗадание() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	// Проверяем, включен ли механизм
	Если НЕ ПроверкаКонтрагентовВключена() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СостоянияКонтрагентов.Контрагент,
	|	СостоянияКонтрагентов.ИНН,
	|	СостоянияКонтрагентов.КПП,
	|	&Дата КАК Дата,
	|	СостоянияКонтрагентов.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные
	|ИЗ
	|	РегистрСведений.СостоянияКонтрагентов КАК СостоянияКонтрагентов
	|ГДЕ
	|	СостоянияКонтрагентов.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияСуществованияКонтрагента.НеПодлежитПроверке)";

	// Указываем дату, на которую будет выполняться проверка
	Запрос.УстановитьПараметр("Дата", НачалоДня(ТекущаяДатаСеанса()));
	ДанныеКонтрагентов = Запрос.Выполнить().Выгрузить();
	
	// Выполняется проверка только тех ИНН и КПП, которые записаны в регистр
	ПроверитьКонтрагентов(ДанныеКонтрагентов);
	
	// Дозаписываем недостающие ИНН и КПП в регистр в локальном режиме
	Если НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		ПроверитьНепроверенныхКонтрагентов(Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет регистр на основе справочника контрагентов 
// Заполнение выполняется:
// 1. После ручного включения проверки фоновым заданием
// 2. В режиме сервисов - обновлением ИБ в каждой области отдельно
Процедура ПроверитьКонтрагентовПослеВключенияПроверки(Параметры = Неопределено) Экспорт
	
	ЭтоОбновлениеИБВМоделиСервиса = Ложь;
	РазмерПорции = 1000;
	
	Если Параметры = Неопределено Тогда
		// Это заполнение регистра после включения проверки
	Иначе
		// Это обновление ИБ.
		// Обновление должно выполняться только в модели сервиса
		Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
			ЭтоОбновлениеИБВМоделиСервиса = Истина;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПроверитьНепроверенныхКонтрагентов(ЭтоОбновлениеИБВМоделиСервиса, Параметры);
	
КонецПроцедуры

// Запускается после включения проверки в предложении на подключение или из настроек
Процедура ПроверитьКонтрагентовПослеВключенияПроверкиФоновоеЗадание() Экспорт
	
	Попытка
	
		ФоновыеЗадания.Выполнить("ПроверкаКонтрагентов.ПроверитьКонтрагентовПослеВключенияПроверки", 
		, "ПроверкаПослеВключенияМеханизма", НСтр("ru = 'Проверка контрагентов'"));

	Исключение
		
		// Исключение возникнет при попытке запуска фонового задания, пока не отработало предыдущее фоновое задание
		// Спецальной обработки не требуется
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Проверка контрагентов.Проверка контрагентов в фоновом задании'"),
			УровеньЖурналаРегистрации.Ошибка,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
	КонецПопытки;
	
КонецПроцедуры

Процедура ОпределитьНедействующихКонтрагентов(ПроверяемыеКонтрагенты) Экспорт 
	
	// Подготавливаем данные для проверки
	ДанныеКонтрагентов = ПроверяемыеКонтрагенты.Скопировать();
	ДобавитьКолонкуОбластьДанных(ДанныеКонтрагентов);
	ДанныеКонтрагентов.ЗаполнитьЗначения(ОбщегоНазначения.ЗначениеРазделителяСеанса(), "ОбластьДанныхВспомогательныеДанные");
	
	// Удаляем пустую колонку из исходной таблицы
	Если ПроверяемыеКонтрагенты.Колонки.Найти("Состояние") <> Неопределено Тогда
		ПроверяемыеКонтрагенты.Колонки.Удалить("Состояние");
	КонецЕсли;
	
	// Проверка веб-сервисом ФНС
	ПроверитьКонтрагентов(ДанныеКонтрагентов,,Ложь);
	
	Состояния = ПроверкаКонтрагентовКлиентСервер.СостоянияНедействующегоКонтрагента(Истина, Истина);
	
	ЗаполнитьСостояния(ПроверяемыеКонтрагенты, ДанныеКонтрагентов, Состояния);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область НастройкиПроверки

// Установка значения константе ИспользоватьПроверкуКонтрагентов 
Процедура СохранитьЗначенияНастроек(ИспользоватьСервис) Экспорт
	
	// Устанавливаем значение константы 
	Константы.ИспользоватьПроверкуКонтрагентов.Установить(ИспользоватьСервис);

КонецПроцедуры

Функция ЗначенияНастроек() Экспорт
	
	// заполняем общие настройки
	ИспользоватьСервис 	= Константы.ИспользоватьПроверкуКонтрагентов.Получить();
	АдресСервиса 		= "http://npchk.nalog.ru/FNSNDSCAWS?wsdl";
	
	Возврат Новый Структура("ИспользоватьСервис, АдресСервиса", ИспользоватьСервис, АдресСервиса);
	
КонецФункции

// Обновление ИБ для режима сервисов
Функция ВключитьПроверкуКонтрагентовДляРежимаСервисов() Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		СохранитьЗначенияНастроек(Истина);
	КонецЕсли;
	
КонецФункции

Функция ПроверкаКонтрагентовВключена() Экспорт
	
	// Проверка, что сервис включен
	НастройкиСервиса = ЗначенияНастроек();
	ИспользоватьСервис = НастройкиСервиса.ИспользоватьСервис;

	Возврат ИспользоватьСервис;
	
КонецФункции

Функция ЕстьПравоНаИспользованиеПроверки() Экспорт
	
	ЕстьПраво = Ложь;
	ПроверкаКонтрагентовПереопределяемый.ОпределитьНаличиеПраваНаИспользованиеПроверки(ЕстьПраво);
	Возврат ЕстьПраво;
	
КонецФункции

Функция ЕстьПравоНаРедактированиеНастроек() Экспорт
	
	ЕстьПраво = Ложь;
	ПроверкаКонтрагентовПереопределяемый.ОпределитьНаличиеПраваНаРедактированиеНастроек(ЕстьПраво);
	Возврат ЕстьПраво;
	
КонецФункции

Функция ПроксиСервиса(ОписаниеОшибки = "") Экспорт
	
	WSПрокси = Неопределено;
	Попытка
	
		НастройкиСервиса = ЗначенияНастроек();
		АдресСервиса = НастройкиСервиса.АдресСервиса;
		
		Если НЕ ЗначениеЗаполнено(АдресСервиса) Тогда
			ОписаниеОшибки = НСтр("ru = 'Не указан адрес сервиса проверки данных по контрагенту'");
		Иначе
			WSПрокси = ПолучитьWSПрокси(АдресСервиса);
		КонецЕсли;
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Проверка контрагентов.Ошибка доступа к веб-сервису проверки контрагентов'"),
			УровеньЖурналаРегистрации.Ошибка,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
		ОписаниеОшибки = ИнформацияОбОшибке.Описание;

	КонецПопытки; 
	
	Возврат WSПрокси;
	
КонецФункции

Функция ЕстьДоступКВебСервисуФНС() Экспорт
	
	Прокси = ПроксиСервиса();
	Возврат Прокси <> Неопределено;
	
КонецФункции

Функция БольшеНеПоказыватьПредложениеПодключиться() Экспорт
	
	Возврат ХранилищеОбщихНастроек.Загрузить("ПроверкаКонтрагентов_БольшеНеПоказыватьПредложениеИспользоватьСервис") = Истина;
	
КонецФункции

Процедура СохранитьДатуПоследнегоОтображенияПредложенияПодключиться() Экспорт
	
	ХранилищеОбщихНастроек.Сохранить("ПроверкаКонтрагентов_ДатаПоследнегоОтображенияПредложенияНаВключениеСервиса", , ТекущаяДатаСеанса());
	
КонецПроцедуры

#КонецОбласти

#Область Надписи

Функция ТекстПредупрежденияПроТестовыйРежимРаботыСервиса() Экспорт
	
	Возврат НСтр("ru = 'В настоящее время веб-сервис ФНС работает в тестовом режиме'");
	
КонецФункции

Процедура УстановитьНадписиВПанелиОтчетаПриСозданииНаСервере(Форма) Экспорт
	
	СсылкаНаИнструкцию = Новый ФорматированнаяСтрока(" ", ПроверкаКонтрагентовКлиентСервер.СсылкаНаИнструкцию());
	
	// Все контрагенты корректны
	ЭлементФормы = Форма.Элементы.Найти("ТекстПриКорректныхКонтрагентах");
	Если ЭлементФормы <> Неопределено Тогда
		ЭлементФормы.Заголовок = Новый ФорматированнаяСтрока(НСтр("ru = 'Проверка контрагентов по данным ФНС выполнена успешно'"), СсылкаНаИнструкцию);
	КонецЕсли;
	
	// Есть некорректные контрагенты
	ЭлементФормы = Форма.Элементы.Найти("ТекстПриНекорректныхКонтрагентах");
	Если ЭлементФормы <> Неопределено Тогда
		ЭлементФормы.Заголовок = Новый ФорматированнаяСтрока(НСтр("ru = 'Обнаружены недействующие контрагенты по данным ФНС'"), СсылкаНаИнструкцию);
	КонецЕсли;
	
	// Выполняется проверка
	ЭлементФормы = Форма.Элементы.Найти("ТекстПриПроверкеВПроцессеВыполнения");
	Если ЭлементФормы <> Неопределено Тогда
		ЭлементФормы.Заголовок = Новый ФорматированнаяСтрока(НСтр("ru = 'Выполняется проверка контрагентов согласно данным ФНС'"), СсылкаНаИнструкцию);
	КонецЕсли;
	
	// Нет доступа к сервису
	ЭлементФормы = Форма.Элементы.Найти("ТекстНетДоступаКСервису");
	Если ЭлементФормы <> Неопределено Тогда
		ЭлементФормы.Заголовок = Новый ФорматированнаяСтрока(НСтр("ru = 'Не удалось произвести проверку контрагентов: сервис ФНС временно недоступен'"), СсылкаНаИнструкцию);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

#Область ШаблоныТаблиц

Функция ШаблонТаблицыДанныеКонтрагентаВДокументе() Экспорт
	
	ДанныеКонтрагентов = ШаблонТаблицыДанныеКонтрагента();
	ДанныеКонтрагентов.Колонки.Добавить("ЭтоСчетФактура", 				Новый ОписаниеТипов("Булево"));
	
	Возврат ДанныеКонтрагентов;
	
	
КонецФункции

Процедура ДополнитьДанныеКонтрагентаВДокументе(
		ДанныеКонтрагента, 
		Контрагент, 
		Дата,
		ЭтоСчетФактура,
		Состояние = Неопределено) Экспорт
		
	// Добавляем новую строку в таблицу, только если такой строки еще нет
	Отбор = Новый Структура("Контрагент, Дата, ЭтоСчетФактура", Контрагент, Дата, ЭтоСчетФактура);
	НайденныеСтроки = ДанныеКонтрагента.НайтиСтроки(Отбор);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		СтрокаОписания = ДанныеКонтрагента.Добавить();
		СтрокаОписания.Контрагент		= Контрагент;
		СтрокаОписания.Дата				= Дата;
		СтрокаОписания.ЭтоСчетФактура	= ЭтоСчетФактура;
		СтрокаОписания.Состояние		= Состояние;
		
		ПроверкаКонтрагентовПереопределяемый.ОпределитьИННиКППВДанныхКонтрагента(СтрокаОписания);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ШаблонТаблицыДанныеКонтрагента() Экспорт
	
	// Создаем таблицу
	ДанныеКонтрагентов = Новый ТаблицаЗначений;
	ДанныеКонтрагентов.Колонки.Добавить("Контрагент", 	Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ДанныеКонтрагентов.Колонки.Добавить("ИНН", 			Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(12)));
	ДанныеКонтрагентов.Колонки.Добавить("КПП", 			Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(9)));
	ДанныеКонтрагентов.Колонки.Добавить("Дата", 		Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ДанныеКонтрагентов.Колонки.Добавить("Состояние", 	Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияСуществованияКонтрагента"));
	
	ДобавитьКолонкуОбластьДанных(ДанныеКонтрагентов);

	Возврат ДанныеКонтрагентов;
	
КонецФункции

Функция ШаблонТаблицыОписания() Экспорт
	
	Описание = Новый ТаблицаЗначений();
	
	Описание.Колонки.Добавить("Тип");
	Описание.Колонки.Добавить("Ссылка");
	Описание.Колонки.Добавить("Дата");
	Описание.Колонки.Добавить("ДокументПустой");
	Описание.Колонки.Добавить("Элемент");// поле, для которого выводится расширенная подсказка
	Описание.Колонки.Добавить("ЭлементРодитель");// группа, которая должна подсвечиваться красным или зеленым
	Описание.Колонки.Добавить("Контрагент");// в счетах-фактурах - несколько контрагентов. Для СФ - не заполняется
	Описание.Колонки.Добавить("КонтрагентЗаполнен");
	Описание.Колонки.Добавить("СостояниеКонтрагента");
	Описание.Колонки.Добавить("КонтрагентовНесколько");
	Описание.Колонки.Добавить("ЭтоСчетФактура");
	
	Возврат Описание;
	
КонецФункции

Процедура ДополнитьОписание(
		Описание, 
		ТипДокумента, 
		Ссылка,
		ДокументПустой, 
		Элемент, 
		ЭлементРодитель, 
		Контрагент, 
		КонтрагентЗаполнен, 
		СостояниеКонтрагента,
		КонтрагентовНесколько,
		ЭтоСчетФактура) Экспорт
	
	СтрокаОписания = Описание.Добавить();
	СтрокаОписания.Тип					= ТипДокумента;
	СтрокаОписания.Ссылка				= Ссылка;
	СтрокаОписания.ДокументПустой		= ДокументПустой;
	СтрокаОписания.Элемент				= Элемент;
	СтрокаОписания.ЭлементРодитель		= ЭлементРодитель;
	СтрокаОписания.Контрагент 			= Контрагент;
	СтрокаОписания.КонтрагентЗаполнен 	= КонтрагентЗаполнен;
	СтрокаОписания.СостояниеКонтрагента	= СостояниеКонтрагента;
	СтрокаОписания.КонтрагентовНесколько= КонтрагентовНесколько;
	СтрокаОписания.ЭтоСчетФактура		= ЭтоСчетФактура;
	
КонецПроцедуры

Функция ОписаниеДокументов(Форма) Экспорт
	
	Описание = ШаблонТаблицыОписания();
	
	ПроверкаКонтрагентовПереопределяемый.ПолучитьОписаниеДокументовСКонтрагентомВШапке(Форма, Описание);
	ПроверкаКонтрагентовПереопределяемый.ПолучитьОписаниеДокументовСоСчетомФактуройВПодвале(Форма, Описание);
	ПроверкаКонтрагентовПереопределяемый.ПолучитьОписаниеСчетовФактур(Форма, Описание);
	
	Возврат Описание;
	
КонецФункции

Функция ОписаниеТабличныхЧастей(Форма) Экспорт
	
	ОписаниеТабличныхЧастей = ШаблонТаблицыОписанияТабличныхЧастей();
	ПроверкаКонтрагентовПереопределяемый.ПолучитьОписаниеДокументовСТабличнымиЧастями(Форма, ОписаниеТабличныхЧастей);
	
	Возврат ОписаниеТабличныхЧастей;
	
КонецФункции

Функция ШаблонТаблицыОписанияТабличныхЧастей() Экспорт
	
	Описание = Новый ТаблицаЗначений();
	
	Описание.Колонки.Добавить("ИмяТаблицыФормы");
	Описание.Колонки.Добавить("ИмяТабличнойЧасти");
	Описание.Колонки.Добавить("ИмяПоляСКонтрагентом");
	Описание.Колонки.Добавить("ИмяКолонкиСКонтрагентом");
	Описание.Колонки.Добавить("ИмяПоляСДатой");
	Описание.Колонки.Добавить("ИмяКолонкиСДатой");
	
	Возврат Описание;
	
КонецФункции

Процедура ДополнитьОписаниеТабличныхЧастей(Форма, Описание, ИмяТаблицыФормы, ИмяПоляСКонтрагентом, ИмяПоляСДатой) Экспорт
	
	СтрокаОписания = Описание.Добавить();
	
	// ТЧ
	СтрокаОписания.ИмяТаблицыФормы 			= ИмяТаблицыФормы;
	СтрокаОписания.ИмяТабличнойЧасти 		= ИмяРеквизита(Форма, ИмяТаблицыФормы);
	
	// Контрагент
	СтрокаОписания.ИмяПоляСКонтрагентом		= ИмяПоляСКонтрагентом;
	СтрокаОписания.ИмяКолонкиСКонтрагентом	= ИмяРеквизита(Форма, ИмяПоляСКонтрагентом);
	
	// Дата
	СтрокаОписания.ИмяПоляСДатой			= ИмяПоляСДатой;
	СтрокаОписания.ИмяКолонкиСДатой			= ИмяРеквизита(Форма, ИмяПоляСДатой);
	
КонецПроцедуры

Функция ИмяРеквизита(Форма, ИмяЭлемента)
	
	Если ИмяЭлемента = "" Тогда
		
		ИмяРеквизита = "";
		
	Иначе
	
		Элемент = Форма.Элементы[ИмяЭлемента];
		ПутьКДанным = Элемент.ПутьКДанным;
		
		// Из пути к данным получаем имя реквизита
		МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПутьКДанным, ".");
		КоличествоПодстрок = МассивПодстрок.Количество();
		ИмяРеквизита = МассивПодстрок[КоличествоПодстрок - 1];
		
	КонецЕсли;
	
	Возврат ИмяРеквизита;
	
КонецФункции

Функция ШаблонТаблицыОписанияКонтрагентовВСчетеФактуре() Экспорт
	
	Описание = Новый ТаблицаЗначений();
	
	Описание.Колонки.Добавить("ИмяРеквизита");
	Описание.Колонки.Добавить("ИмяРеквизитаССостоянием");
	
	Возврат Описание;
	
КонецФункции

Процедура ДополнитьОписаниеКонтрагентовВСчетеФактуре(
		Описание, 
		ИмяРеквизита, 
		ИмяРеквизитаССостоянием) Экспорт
	
	СтрокаОписания = Описание.Добавить();
	СтрокаОписания.ИмяРеквизита				= ИмяРеквизита;// реквизит документа
	СтрокаОписания.ИмяРеквизитаССостоянием	= ИмяРеквизитаССостоянием;// реквизит формы
	
КонецПроцедуры

Функция ОписаниеКонтрагентовВСчетеФактуре(Тип) Экспорт
	
	Описание = ШаблонТаблицыОписанияКонтрагентовВСчетеФактуре();
	ПроверкаКонтрагентовПереопределяемый.ПолучитьОписаниеКонтрагентовВСчетеФактуре(Тип, Описание);
	
	Возврат Описание;
	
КонецФункции

#КонецОбласти

Процедура ПеренестиРезультатыПроверкиИзХранилищаВРегистр(Знач КонтрагентСсылка, ИНН, КПП, АдресХранилища) Экспорт
	
	ДанныеКонтрагентов = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если НЕ ЗначениеЗаполнено(ДанныеКонтрагентов) Тогда
		ЗаписатьКонтрагентаСПустымСостоянием(КонтрагентСсылка, ИНН, КПП);
		Возврат;
	КонецЕсли;
	
	ДанныеКонтрагента = ДанныеКонтрагентов[0];
	
	// Проверяем, что данные в хранилище еще не устарели 
	Если ИНН = ДанныеКонтрагента.ИНН И КПП = ДанныеКонтрагента.КПП Тогда
		ДанныеКонтрагента.Контрагент = КонтрагентСсылка;
		// Переносим результат проверки из хранилище в регистр
		СохранитьРезультатыПроверкиВРегистр(ДанныеКонтрагентов);
	Иначе
		ЗаписатьКонтрагентаСПустымСостоянием(КонтрагентСсылка, ИНН, КПП);
	Конецесли;
	
КонецПроцедуры

Функция АдресХранилищаСВосстановленнымСостояниемКонтрагента(КонтрагентСсылка, ИНН, КПП, УникальныйИдентификатор) Экспорт
	
	Состояние = Перечисления.СостоянияСуществованияКонтрагента.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СостоянияКонтрагентов.Состояние,
	               |	СостоянияКонтрагентов.ИНН,
	               |	СостоянияКонтрагентов.КПП,
	               |	СостоянияКонтрагентов.ОбластьДанныхВспомогательныеДанные,
	               |	СостоянияКонтрагентов.Контрагент
	               |ИЗ
	               |	РегистрСведений.СостоянияКонтрагентов КАК СостоянияКонтрагентов
	               |ГДЕ
	               |	СостоянияКонтрагентов.Контрагент = &Контрагент
	               |	И СостоянияКонтрагентов.ИНН = &ИНН
	               |	И СостоянияКонтрагентов.КПП = &КПП";

	Запрос.УстановитьПараметр("ИНН",		ИНН);
	Запрос.УстановитьПараметр("КПП", 		КПП);
	Запрос.УстановитьПараметр("Контрагент", КонтрагентСсылка);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	// Определяем состояние из регистра
	ДанныеКонтрагентов = ШаблонТаблицыДанныеКонтрагента();
	НоваяСтрока = ДанныеКонтрагентов.Добавить();

	Если РезультатЗапроса.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(НоваяСтрока, РезультатЗапроса);
	Иначе
		НоваяСтрока.Контрагент 	= КонтрагентСсылка;
		НоваяСтрока.ИНН 		= ИНН;
		НоваяСтрока.КПП 		= КПП;
		НоваяСтрока.ОбластьДанныхВспомогательныеДанные = ОбщегоНазначения.ЗначениеРазделителяСеанса();
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеКонтрагентов, УникальныйИдентификатор);
		
КонецФункции

Процедура ДобавитьКолонкуОбластьДанных(Таблица) Экспорт
	
	Таблица.Колонки.Добавить("ОбластьДанныхВспомогательныеДанные", 	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 0, ДопустимыйЗнак.Неотрицательный)));
	
КонецПроцедуры

Процедура СохранитьРезультатыПроверкиВХранилище(ДанныеКонтрагентов, АдресХранилища = Неопределено) Экспорт
	
	// Если контрагент новый, то при изменении ИНН и КПП у нас еще нет ссылки и записать в регистр невозможно
	// Поэтому сохраняем результат в хранилище, а при записи контрагента, когда появится ссылка, переносим результаты проверки в регистр
	Если ДанныеКонтрагентов.Количество() = 1 И ЗначениеЗаполнено(АдресХранилища) Тогда
		ПоместитьВоВременноеХранилище(ДанныеКонтрагентов, АдресХранилища);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаКонтрагентовВДокументах

Процедура ПроверитьКонтрагентовВДокументеФоновоеЗадание(Форма, ДополнительныеПараметры) Экспорт
	
	ПрорисоватьСостоянияКонтрагентовВДокументе(Форма, Перечисления.СостоянияПроверкиКонтрагентов.ПроверкаВПроцессе, ДополнительныеПараметры);
	
	// Очистка
	ОчиститьРезультатыПредыдущихПроверок(Форма, ДополнительныеПараметры);
	
	// Заполняем данные проверяемых контрагентов
	ДанныеКонтрагентов = ДанныеКонтрагентовВДокументе(Форма);
	
	Если ДанныеКонтрагентов.Количество() > 0 Тогда
		
		// Инициализируем параметры фонового задания
		Форма.АдресРезультатаПроверкиКонтрагентов 		= ПоместитьВоВременноеХранилище(Неопределено, Форма.УникальныйИдентификатор);
		Форма.ИдентификаторЗаданияПроверкиКонтрагента 	= Неопределено;
		
		ПараметрыЗапуска = Новый Структура;
		ПараметрыЗапуска.Вставить("ДанныеКонтрагентов", 					ДанныеКонтрагентов);
		ПараметрыЗапуска.Вставить("АдресРезультатаПроверкиКонтрагентов", 	Форма.АдресРезультатаПроверкиКонтрагентов);
		
		Параметры = Новый Массив;
		Параметры.Добавить(ПараметрыЗапуска);
		
		Попытка
		 	ФоновоеЗадание = ФоновыеЗадания.Выполнить("ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументе", 
				Параметры, , НСтр("ru = 'Проверка контрагентов в документе'"));
				
			Если ФоновоеЗадание <> Неопределено Тогда 
				Форма.ИдентификаторЗаданияПроверкиКонтрагента = ФоновоеЗадание.УникальныйИдентификатор;
			КонецЕсли;
		Исключение
			
			// Исключение возникнет при попытке запуска фонового задания, пока не отработало предыдущее фоновое задание
			// Спецальной обработки не требуется
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Проверка контрагентов.Проверка контрагентов фоновым заданием в документе'"),
				УровеньЖурналаРегистрации.Ошибка,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
				
		КонецПопытки;
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтобразитьРезультатПроверкиКонтрагента(Форма) Экспорт
	
	// Обход особенности платформы, когда затирается редактируемое значение
	// в текущем элементе при изменении формы.
	Если ТипЗнч(Форма.ТекущийЭлемент) = Тип("ПолеФормы") И Форма.ТекущийЭлемент.Вид = ВидПоляФормы.ПолеВвода Тогда
		Форма.ТекущийЭлемент.ОбновлениеТекстаРедактирования = ОбновлениеТекстаРедактирования.ПриИзмененииЗначения;
	КонецЕсли;
		
	СостояниеПроверки = Перечисления.СостоянияПроверкиКонтрагентов.ПроверкаВыполнена;
	
	Если ЗначениеЗаполнено(Форма.АдресРезультатаПроверкиКонтрагентов) И 
		ЭтоАдресВременногоХранилища(Форма.АдресРезультатаПроверкиКонтрагентов) Тогда
		РезультатРаботыФоновогоЗадания = ПолучитьИзВременногоХранилища(Форма.АдресРезультатаПроверкиКонтрагентов);
		
		Если РезультатРаботыФоновогоЗадания <> Неопределено Тогда
			Если РезультатРаботыФоновогоЗадания.Свойство("НетДоступаКВебСервисуФНС") Тогда
				// Нет доступа к сервису
				СостояниеПроверки = Перечисления.СостоянияПроверкиКонтрагентов.НетДоступаКВебСервису;
			Иначе
				СостояниеПроверки = Перечисления.СостоянияПроверкиКонтрагентов.ПроверкаВыполнена;
				
				// Фоновое задание отработало
				ДанныеКонтрагентов = РезультатРаботыФоновогоЗадания.ДанныеКонтрагентов;
				ЗапомнитьРезультатПроверкиКонтрагентов(Форма, ДанныеКонтрагентов);
				ОпределитьНаличиеНовыхОшибокВДокументе(Форма);
				
			КонецЕсли;
			
			// Очищаем этот адрес заданий по всем строкам
			Форма.АдресРезультатаПроверкиКонтрагентов = "";
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПроверкаКонтрагентов.ПрорисоватьСостоянияКонтрагентовВДокументе(Форма, СостояниеПроверки);
	
КонецПроцедуры

Процедура СохранитьРезультатПроверкиКонтрагентовВХранилище(Форма) Экспорт
	
	ДанныеКонтрагентов = ДанныеКонтрагентовВДокументе(Форма);
	Форма.АдресДанныхКонтрагентов = ПоместитьВоВременноеХранилище(ДанныеКонтрагентов, Форма.УникальныйИдентификатор);
	
КонецПроцедуры

Функция ВСчетеФактуреЗаполненХотяБыОдинКонтрагент(СчетФактураОбъект) Экспорт
	
	Если СчетФактураОбъект = Неопределено Тогда
	    КонтрагентЗаполнен = Истина;
	Иначе
		СчетФактураСсылка = СчетФактураОбъект.Ссылка;
			
		Описание = ОписаниеКонтрагентовВСчетеФактуре(ТипЗнч(СчетФактураСсылка));
		
		КонтрагентЗаполнен = Ложь;
		Для каждого СтрокаОписания Из Описание Цикл
			
			ИмяРеквизитаКонтрагента = СтрокаОписания.ИмяРеквизита;
			Контрагент = СчетФактураОбъект[ИмяРеквизитаКонтрагента];
			
			Если ЗначениеЗаполнено(Контрагент) Тогда
				КонтрагентЗаполнен = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат КонтрагентЗаполнен;
	
КонецФункции

Функция ДокументСодержитОшибкуВКонтрагенте(ДокументСсылка) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДокументыСОшибкамиПроверкиКонтрагентов.Документ
		|ИЗ
		|	РегистрСведений.ДокументыСОшибкамиПроверкиКонтрагентов КАК ДокументыСОшибкамиПроверкиКонтрагентов
		|ГДЕ
		|	ДокументыСОшибкамиПроверкиКонтрагентов.Документ = &Документ";
	
	Запрос.УстановитьПараметр("Документ", ДокументСсылка);
	
	Возврат НЕ Запрос.Выполнить().Пустой();

КонецФункции

Процедура ФормаСпискаПриСозданииНаСервере(Список) Экспорт
	
	УстановитьПараметрыДинамическогоСписка(Список);
	УстановитьУсловноеОформлениеНекорректныхКонтрагентов(Список);
	
КонецПроцедуры

Процедура ПередЗаписьюНаСервере(Форма, СчетФактура) Экспорт
	
	Если Форма.ИспользованиеПроверкиВозможно Тогда
		Форма.АдресПредыдущегоСчетаФактуры = ПоместитьВоВременноеХранилище(СчетФактура, Форма.УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОпределитьНаличиеИзмененияВСчетеФактуре(Форма, СчетФактураНовая) Экспорт
	
	Если Форма.ИспользованиеПроверкиВозможно Тогда
		
		СчетФактураПредыдущая = ПолучитьИзВременногоХранилища(Форма.АдресПредыдущегоСчетаФактуры);
		
		Если СчетФактураПредыдущая = Неопределено Тогда
			КонтрагентыИзменились = Истина;
		Иначе
			Описание = ОписаниеКонтрагентовВСчетеФактуре(ТипЗнч(СчетФактураНовая));
	
			КонтрагентыИзменились = Ложь;
			Для каждого СтрокаОписания Из Описание Цикл
				
				ИмяРеквизитаКонтрагента = СтрокаОписания.ИмяРеквизита;
				Если СчетФактураНовая[ИмяРеквизитаКонтрагента] <> СчетФактураПредыдущая[ИмяРеквизитаКонтрагента] Тогда
					КонтрагентыИзменились = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
			
		Форма.КонтрагентыВСчетеФактуреИзменилисьПослеЗаписи = КонтрагентыИзменились;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УправлениеФормойПриСозданииНаСервере(Форма) Экспорт
	
	ДокументОбъект = Форма.Объект;
	ДокументСсылка = ДокументОбъект.Ссылка;

	ЭтоДокументСКонтрагентомВТабличнойЧасти = ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВТабличнойЧасти(Форма);
	
	Если ЭтоДокументСКонтрагентомВТабличнойЧасти Тогда
		УстановитьУсловноеОформлениеТаблицыФормы(Форма);
		ДобавитьКолонкуВТабличнуюЧасть(Форма);
	КонецЕсли;

КонецПроцедуры

Процедура ПрорисоватьСостоянияКонтрагентовВДокументе(Форма, СостояниеПроверки, ДополнительныеПараметры = Неопределено) Экспорт
	
	ДокументОбъект 	= Форма.Объект;
	ДокументСсылка 	= ДокументОбъект.Ссылка; 

	Если ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВШапке(Форма)
		ИЛИ ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСоСчетомФактуройВПодвале(Форма)
		ИЛИ ПроверкаКонтрагентовКлиентСервер.ЭтоСчетФактура(Форма) Тогда
		
		Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
			// Изменилась строка в ТЧ. Ничего делать не нужно
			Возврат;
		ИначеЕсли ТипЗнч(ДополнительныеПараметры) = Тип("Строка") Тогда
			// Это имя элемента
			ИмяЭлемента = ДополнительныеПараметры;
			Элемент = Форма.Элементы[ИмяЭлемента];
		Иначе
			Элемент = Неопределено;
		КонецЕсли;
		
		Описание = ОписаниеДокументов(Форма);
			
		Для каждого СтрокаОписания Из Описание Цикл
		
			// Прорисовываем результат либо для всех элементов, либо только для переданного
			Если Элемент = Неопределено ИЛИ Элемент = СтрокаОписания.Элемент Тогда
				ПроверкаКонтрагентовКлиентСервер.УстановитьТекстПодсказкиВДокументе(СтрокаОписания, СостояниеПроверки);
			КонецЕсли;
			
		КонецЦикла;
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЧтенииНаСервере(Форма) Экспорт
	
	ДокументОбъект 	= Форма.Объект;
	ДокументСсылка 	= ДокументОбъект.Ссылка; 
	
	Если ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВШапке(Форма)
		ИЛИ ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВТабличнойЧасти(Форма) Тогда
		Форма.ЭтоДокументСОшибкойПредыдущий = ДокументСодержитОшибкуВКонтрагенте(ДокументСсылка);
	КонецЕсли;		
			
	Если ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСоСчетомФактуройВПодвале(Форма) Тогда
		СчетФактура = ПроверкаКонтрагентовКлиентСервер.СчетФактура(Форма);
		Форма.ЭтоСчетФактураСОшибкойПредыдущий = ДокументСодержитОшибкуВКонтрагенте(СчетФактура);
	КонецЕсли;
			
	Если ПроверкаКонтрагентовКлиентСервер.ЭтоСчетФактура(Форма) Тогда
		Форма.ЭтоСчетФактураСОшибкойПредыдущий = ДокументСодержитОшибкуВКонтрагенте(ДокументСсылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗапомнитьРезультатПроверкиКонтрагентов(Форма, ДанныеКонтрагентов) Экспорт
	
	ЗапомнитьРезультатПроверкиКонтрагентовВДокументе(Форма, ДанныеКонтрагентов);
	ЗапомнитьРезультатПроверкиКонтрагентовВТабличнойЧасти(Форма, ДанныеКонтрагентов);
	ЗапомнитьРезультатПроверкиКонтрагентовВСчетеФактере(Форма, ДанныеКонтрагентов);
	
КонецПроцедуры

Функция ТребуетсяПроверкаКонтрагентов(Форма, Источник) Экспорт
	
	Если ТипЗнч(Источник) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		КонтрагентИзменился = Ложь;
		
		ДокументОбъект 	= Форма.Объект;
		ДокументСсылка 	= ДокументОбъект.Ссылка; 
			
		Если ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВШапке(Форма) Тогда
			
	 		Описание = ОписаниеДокументов(Форма);
			СтрокиОписания = Описание.НайтиСтроки(Новый Структура("Контрагент, ЭтоСчетФактура", Источник, Ложь));
			
			КонтрагентИзменился = СтрокиОписания.Количество() > 0;
			Если КонтрагентИзменился Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСоСчетомФактуройВПодвале(Форма) Тогда
			
	 		Возврат Истина;
			
		КонецЕсли;
		
		Если ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВТабличнойЧасти(Форма) Тогда
			
			ОписаниеТабличныхЧастей = ОписаниеТабличныхЧастей(Форма);
			
			// Перебираем все табличные части
			Для каждого ОписаниеТабличнойЧасти Из ОписаниеТабличныхЧастей Цикл
				
				ИмяТабличнойЧасти 		= ОписаниеТабличнойЧасти.ИмяТабличнойЧасти;
				ИмяКолонкиСКонтрагентом	= ОписаниеТабличнойЧасти.ИмяКолонкиСКонтрагентом;
				
				ТабличнаяЧасть 			= ДокументОбъект[ОписаниеТабличнойЧасти.ИмяТабличнойЧасти];
				СтрокиТабличнойЧасти 	= ТабличнаяЧасть.НайтиСтроки(Новый Структура(ИмяКолонкиСКонтрагентом, Источник));
				
				КонтрагентИзменился = СтрокиТабличнойЧасти.Количество() > 0;
				Если КонтрагентИзменился Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
			
		Если ПроверкаКонтрагентовКлиентСервер.ЭтоСчетФактура(Форма) Тогда
			
			Описание = ОписаниеКонтрагентовВСчетеФактуре(ТипЗнч(ДокументСсылка));
			Для каждого ОписаниеКонтрагента Из Описание Цикл
				КонтрагентИзменился = ДокументОбъект[ОписаниеКонтрагента.ИмяРеквизита] = Источник;
		
				Если КонтрагентИзменился Тогда
					Возврат Истина;
				КонецЕсли;
			
			КонецЦикла; 
			
		КонецЕсли;
		
		Возврат КонтрагентИзменился;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументСсылка.СчетФактураПолученный")
		ИЛИ ТипЗнч(Источник) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		
		// Изменился счет-фактура
		ИзменилсяСчетФактура = Ложь;
		
		Если ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСоСчетомФактуройВПодвале(Форма) Тогда
			
	 		Описание = ОписаниеДокументов(Форма);
			СтрокиОписания = Описание.НайтиСтроки(Новый Структура("ЭтоСчетФактура, Ссылка", Истина, Источник));
			
			ИзменилсяСчетФактура = СтрокиОписания.Количество() > 0;
			
		КонецЕсли;
		
		Возврат ИзменилсяСчетФактура;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура СохранитьРезультатПроверкиКонтрагентовПослеЗаписи(Форма) Экспорт
	
	Если Форма.ИспользованиеПроверкиВозможно Тогда
		
		ВосстановитьРезультатПроверкиКонтрагентовВТабличныхЧастяхПослеЗаписи(Форма);
		ПроверкаКонтрагентовКлиентСервер.СохранитьРезультатПроверкиКонтрагентов(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проверка

// Проверка нескольких контрагентов
Процедура ПроверитьКонтрагентов(ДанныеКонтрагентов, АдресХранилища = Неопределено, ЭтоПроверкаСправочникаКонтрагентов = Истина) Экспорт
	
	// Если нет доступа к веб-сервису, то проверку не выполняем
	Если НЕ ЕстьДоступКВебСервисуФНС() Тогда
		Возврат;
	КонецЕсли;
	
	// Если по некоторым контрагентам можно определить, что они не существуют, не обращаясь к сервису, то к сервису по ним обращаться не будем
	Если ЭтоПроверкаСправочникаКонтрагентов Тогда
		ПолучитьСостоянияКонтрагентовИзКэша(ДанныеКонтрагентов);
	КонецЕсли;
	
	// Приведение данных к нужному формату, выявление записей с ошибками 
	ПодготовитьДанныеКПроверке(ДанныеКонтрагентов);
	
	// Получение результатов проверки от веб-сервиса
	// Проверяем только тех контрагентов, у которых неопределено состояние существования и у которых нет ошибок
	Отбор = Новый Структура();
	Отбор.Вставить("Состояние", Перечисления.СостоянияСуществованияКонтрагента.ПустаяСсылка());
	ПолучитьРезультатПроверкиВебСервисом(ДанныеКонтрагентов, Отбор);
	
	Если ЭтоПроверкаСправочникаКонтрагентов Тогда
		Если ЗначениеЗаполнено(АдресХранилища) Тогда
			СохранитьРезультатыПроверкиВХранилище(ДанныеКонтрагентов, АдресХранилища);
		Иначе
			СохранитьРезультатыПроверкиВРегистр(ДанныеКонтрагентов);
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

Процедура ПроверитьКонтрагентовВДокументе(Параметры) Экспорт
	
	ПроверяемыеКонтрагенты 	= Параметры.ДанныеКонтрагентов;
	АдресХранилища 			= Параметры.АдресРезультатаПроверкиКонтрагентов;
	
	// Если нет доступа к веб-сервису, то проверку не выполняем
	Если ЕстьДоступКВебСервисуФНС() Тогда
		
		ДанныеКонтрагентов = ПроверяемыеКонтрагенты.Скопировать();
		ПроверитьКонтрагентов(ДанныеКонтрагентов, АдресХранилища, Ложь);
		
		ЗаполнитьСостояния(ПроверяемыеКонтрагенты, ДанныеКонтрагентов);
		
		Результат = Новый Структура;
		Результат.Вставить("ДанныеКонтрагентов", ПроверяемыеКонтрагенты);
	Иначе
		Результат = Новый Структура;
		Результат.Вставить("НетДоступаКВебСервисуФНС", Истина);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаписьВРегистрСведений

Процедура СохранитьРезультатыПроверкиВРегистр(ДанныеКонтрагентов)
	
	Для каждого ДанныеКонтрагента Из ДанныеКонтрагентов Цикл
		
		Если НЕ ЗначениеЗаполнено(ДанныеКонтрагента.ИНН) Тогда
			Продолжить;
		КонецЕсли;
		
		НачатьТранзакцию();
		
		Попытка
			
			Контрагент							= ДанныеКонтрагента.Контрагент;
			ОбластьДанныхВспомогательныеДанные	= ДанныеКонтрагента.ОбластьДанныхВспомогательныеДанные;
			
			// Блокируем по Контрагенту
			СтруктураКлюча = Новый Структура("Контрагент, ОбластьДанныхВспомогательныеДанные", Контрагент, ОбластьДанныхВспомогательныеДанные);
			Ключ = РегистрыСведений.СостоянияКонтрагентов.СоздатьКлючЗаписи(СтруктураКлюча);
			ЗаблокироватьДанныеДляРедактирования(Ключ);
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СостоянияКонтрагентов");
			ЭлементБлокировки.УстановитьЗначение("Контрагент", Контрагент);
			ЭлементБлокировки.УстановитьЗначение("ОбластьДанныхВспомогательныеДанные", ОбластьДанныхВспомогательныеДанные);
			Блокировка.Заблокировать();
			
			// Записываем данные в регистр
			НаборЗаписей = РегистрыСведений.СостоянияКонтрагентов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Контрагент.Установить(Контрагент);
			НаборЗаписей.Отбор.ОбластьДанныхВспомогательныеДанные.Установить(ОбластьДанныхВспомогательныеДанные);
			НаборЗаписей.Очистить();
			
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, ДанныеКонтрагента); 
			
			НаборЗаписей.Записать(Истина);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			
			ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Проверка контрагентов.Запись результатов проверки контрагентов в регистр'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьКонтрагентаСПустымСостоянием(КонтрагентСсылка, ИНН, КПП) 
	
	// Формируем данные для записи в регистр
	ДанныеКонтрагентов = ШаблонТаблицыДанныеКонтрагента();
	
	НоваяСтрока = ДанныеКонтрагентов.Добавить();
	НоваяСтрока.Контрагент 	= КонтрагентСсылка;
	НоваяСтрока.ИНН 		= ИНН;
	НоваяСтрока.КПП 		= КПП;
	НоваяСтрока.ОбластьДанныхВспомогательныеДанные = ОбщегоНазначения.ЗначениеРазделителяСеанса();
	
	СохранитьРезультатыПроверкиВРегистр(ДанныеКонтрагентов);
		
КонецПроцедуры

#КонецОбласти

#Область РаботаСВебСервисом

Процедура ПолучитьРезультатПроверкиВебСервисом(ДанныеКонтрагентов, Отбор) Экспорт
	
	// Проверяем только тех контрагентов, которые соответствуют указанному отбору
	ДанныеКонтрагентовДляПроверкиСервисом = ДанныеКонтрагентов.НайтиСтроки(Отбор);
	КоличествоКонтрагентов = ДанныеКонтрагентовДляПроверкиСервисом.Количество();

	Если КоличествоКонтрагентов = 0 Тогда
		// Нет данных для проверки
		Возврат;
	КонецЕсли;
	
	Если НЕ ЕстьДоступКВебСервисуФНС() Тогда
		// Нет доступа к веб-сервису
		Возврат;
	КонецЕсли;
	
	Прокси = ПроксиСервиса();
	
	ПространствоИмен = "http://ws.unisoft/FNSNDSCAWS/Request";
	
	РазмерПорции = 10000;
	
	// Разбиваем всю таблицу на блоки запросов 
	КоличествоЗапросов = ?(КоличествоКонтрагентов % РазмерПорции = 0, КоличествоКонтрагентов / РазмерПорции, Цел(КоличествоКонтрагентов / РазмерПорции) + 1);
		
	// Выполняем несколько запросов. В каждом запросе не более 10000 строк
	Для НомерПорции = 1 По КоличествоЗапросов Цикл 
		
		МинимальныйНомерКонтрагента 	= Мин(РазмерПорции * (НомерПорции - 1), КоличествоКонтрагентов);
		МаксимальныйНомерКонтрагента 	= Мин(РазмерПорции * НомерПорции, КоличествоКонтрагентов) - 1;

		WSЗапрос = Прокси.ФабрикаXDTO.Создать(Прокси.ФабрикаXDTO.Тип(ПространствоИмен, "NdsRequest"));
		
		Для ИндексТекущегоКонтрагента = МинимальныйНомерКонтрагента По МаксимальныйНомерКонтрагента Цикл
			
			ДанныеКонтрагента = ДанныеКонтрагентовДляПроверкиСервисом[ИндексТекущегоКонтрагента];
			ДобавитьКонтрагентаВЗапросКСервису(WSЗапрос, Прокси, ПространствоИмен, ДанныеКонтрагента); 
			
		КонецЦикла;
		
		Если WSЗапрос.NP.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Получаем результат проверки от сервиса
		NdsResponse = Прокси.NdsRequest(WSЗапрос);
		ОбработатьОтветСервиса(NdsResponse, ДанныеКонтрагентовДляПроверкиСервисом, МинимальныйНомерКонтрагента, МаксимальныйНомерКонтрагента);
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура ДобавитьКонтрагентаВЗапросКСервису(WSЗапрос, Прокси, ПространствоИмен, ДанныеКонтрагента)
	
	Попытка
	
		WSКонтрагент = Прокси.ФабрикаXDTO.Создать(Прокси.ФабрикаXDTO.Тип(ПространствоИмен, "NdsRequest_NP"));
	
		// Указываем ИНН, КПП и Дату
		WSКонтрагент.INN = ДанныеКонтрагента.ИНН;
		Если ЗначениеЗаполнено(ДанныеКонтрагента.КПП) Тогда
			WSКонтрагент.KPP = ДанныеКонтрагента.КПП;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеКонтрагента.Дата)Тогда
			WSКонтрагент.DT = ДатаСтрокой(ДанныеКонтрагента.Дата);
		КонецЕсли;
		
		// Добавляем данные по контрагенту в список на проверку
		WSЗапрос.NP.Добавить(WSКонтрагент);

	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ДанныеКонтрагента.Состояние = Перечисления.СостоянияСуществованияКонтрагента.СодержитОшибкиВДанных;
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Проверка контрагентов.Формирование данных для обращения к сервису ФНС'"),
			УровеньЖурналаРегистрации.Ошибка,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецПопытки; 
				
КонецПроцедуры

Процедура ОбработатьОтветСервиса(NdsResponse, ДанныеКонтрагентовДляПроверкиСервисом, МинимальныйНомерКонтрагента, МаксимальныйНомерКонтрагента)
	
	ИндексТекущегоОтвета = 0;
	Для ИндексТекущегоКонтрагента = МинимальныйНомерКонтрагента По МаксимальныйНомерКонтрагента Цикл 
		ДанныеКонтрагента = ДанныеКонтрагентовДляПроверкиСервисом[ИндексТекущегоКонтрагента];
		Если ДанныеКонтрагента.Состояние <> Перечисления.СостоянияСуществованияКонтрагента.СодержитОшибкиВДанных Тогда
			
			Попытка

				// Ответ от сервиса
				ОтветПоКонтрагенту 			= NdsResponse.NP[ИндексТекущегоОтвета];
				СостояниеВОтвете 			= ОтветПоКонтрагенту.State;
				ДанныеКонтрагента.Состояние	= СостояниеНаОсновеОтветаСервиса(ДанныеКонтрагента, СостояниеВОтвете);
				
			Исключение
		
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				
				ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Проверка контрагентов.Обработка ответа от веб-сервиса'"), 
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
			КонецПопытки;
			
			ИндексТекущегоОтвета = ИндексТекущегоОтвета + 1;
		КонецЕсли;
		
	КонецЦикла;
				
КонецПроцедуры

#Область НастройкиВебСервиса

Функция ПолучитьWSПрокси(АдресСервиса) 
	
	WSПрокси = ОбщегоНазначения.WSПрокси(
			АдресWSDL(АдресСервиса),
			"http://ws.unisoft",
			"FNSNDSCAWS",
			"FNSNDSCAWS_Port",
			Неопределено,
			Неопределено,
			30);
		
	Возврат WSПрокси;
	
КонецФункции

Функция АдресWSDL(URI)
	
	Адрес = СокрЛП(URI);
	Если Найти(НРег(Адрес), "?wsdl") = СтрДлина(Адрес) - 4 Тогда
		Возврат Адрес;
	Иначе
		Возврат Адрес + "?wsdl";
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

// Проверка ошибок, удаление дублей
Процедура ПодготовитьДанныеКПроверке(ДанныеКонтрагентовДляПроверки)
	
	// Создаем таблицу
	ДанныеКонтрагентов = ШаблонТаблицыДанныеКонтрагента();
	
	// Копируем таблицу, сохраняя типы колонок
	Для каждого ДанныеКонтрагентаДляПроверки Из ДанныеКонтрагентовДляПроверки Цикл
		// Копируем данные из таблицы с "сырыми данными" в таблицу с "типизированными" колонками
		ДанныеКонтрагента = ДанныеКонтрагентов.Добавить();
		ЗаполнитьЗначенияСвойств(ДанныеКонтрагента, ДанныеКонтрагентаДляПроверки, "Контрагент, ИНН, КПП, Состояние, Дата, ОбластьДанныхВспомогательныеДанные");
		
		Если ДанныеКонтрагента.Состояние <> Перечисления.СостоянияСуществованияКонтрагента.СодержитОшибкиВДанных Тогда
			// Проверяем ошибки, приводим данные к нужному формату
			ПодготовитьДанныеКПроверкеПоКаждомуКонтрагенту(ДанныеКонтрагента);
		КонецЕсли;
	КонецЦикла;
	
	// Удаляем из таблицы дубли
	ДанныеКонтрагентов.Свернуть("Контрагент, ИНН, КПП, Дата, Состояние, ОбластьДанныхВспомогательныеДанные");
	
	ДанныеКонтрагентовДляПроверки = ДанныеКонтрагентов;
	
КонецПроцедуры

// Проверка ошибок по одному контрагенту
Процедура ПодготовитьДанныеКПроверкеПоКаждомуКонтрагенту(ДанныеКонтрагента)
	
	Ошибка = "";
	
	// Обращение к реквизитам справочника возможно только из разделенного сеанса.
	// При запуске из неразделенного сеанса проверка будет выполнена веб-сервисом.
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено()
		И ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных()
		ИЛИ НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		// Страна
		// Проверяем только российских контрагентов
		Если Метаданные.Справочники.Контрагенты.Реквизиты.Найти("СтранаРегистрации") <> Неопределено Тогда
			СтранаРегистрации = ДанныеКонтрагента.Контрагент.СтранаРегистрации;
			Если СтранаРегистрации <> Справочники.СтраныМира.Россия 
				И СтранаРегистрации <> Справочники.СтраныМира.ПустаяСсылка() Тогда
				ДанныеКонтрагента.Состояние = Перечисления.СостоянияСуществованияКонтрагента.НеПодлежитПроверке;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// ЭтоЮрЛицо
	ДлинаИНН = СтрДлина(СокрЛП(ДанныеКонтрагента.ИНН));
	ДлинаКПП = СтрДлина(СокрЛП(ДанныеКонтрагента.КПП));
	
	ЭтоЮрЛицо = Ложь;
	Если ДлинаИНН = 10 И ДлинаКПП = 9 Тогда
		ЭтоЮрЛицо = Истина;
	ИначеЕсли ДлинаИНН = 12 И ДлинаКПП = 0 Тогда
		ЭтоЮрЛицо = Ложь;
	ИначеЕсли ДлинаИНН = 0 ИЛИ ДлинаКПП = 0 Тогда
		ДанныеКонтрагента.Состояние = Перечисления.СостоянияСуществованияКонтрагента.ПустойИННКПП;
		Возврат;
	Иначе
		ДанныеКонтрагента.Состояние = Перечисления.СостоянияСуществованияКонтрагента.СодержитОшибкиВДанных;
		Возврат;
	КонецЕсли;
	
	// Дата
	Если Не ЗначениеЗаполнено(ДанныеКонтрагента.Дата) Тогда
		ДанныеКонтрагента.Дата = НачалоДня(ТекущаяДатаСеанса());
	КонецЕсли;
	
	// ИНН
	ДанныеКонтрагента.ИНН = СокрЛП(ДанныеКонтрагента.ИНН);
	ИНН = ДанныеКонтрагента.ИНН;
	ИННСоответствуетТребованиям = РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ИНН, ЭтоЮрЛицо, Ошибка);
	Если Лев(ИНН, 2) = "00" ИЛИ НЕ ИННСоответствуетТребованиям Тогда
		ДанныеКонтрагента.Состояние = Перечисления.СостоянияСуществованияКонтрагента.СодержитОшибкиВДанных;
		Возврат;
	КонецЕсли;
	
	// КПП
	Если ЭтоЮрЛицо Тогда
		ДанныеКонтрагента.КПП = СокрЛП(ДанныеКонтрагента.КПП);
		КПП = ДанныеКонтрагента.КПП;
		КППСоответствуетТребованиям = РегламентированныеДанныеКлиентСервер.КППСоответствуетТребованиям(КПП, Ошибка);
		Если НЕ КППСоответствуетТребованиям Тогда
			ДанныеКонтрагента.Состояние = Перечисления.СостоянияСуществованияКонтрагента.СодержитОшибкиВДанных;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьСостоянияКонтрагентовИзКэша(ДанныеКонтрагентов)
	
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              |	ДанныеКонтрагентов.Контрагент,
	              |	ДанныеКонтрагентов.ИНН,
	              |	ДанныеКонтрагентов.КПП,
	              |	ДанныеКонтрагентов.Дата,
	              |	ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные
	              |ПОМЕСТИТЬ ДанныеКонтрагентов
	              |ИЗ
	              |	&ДанныеКонтрагентов КАК ДанныеКонтрагентов
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              |	ДанныеКонтрагентов.Контрагент,
	              |	ДанныеКонтрагентов.ИНН,
	              |	ДанныеКонтрагентов.КПП,
	              |	ДанныеКонтрагентов.Дата,
	              |	ВЫБОР
	              |		КОГДА СостоянияКонтрагентов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСуществованияКонтрагента.СодержитОшибкиВДанных)
	              |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияСуществованияКонтрагента.СодержитОшибкиВДанных)
	              |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияСуществованияКонтрагента.ПустаяСсылка)
	              |	КОНЕЦ КАК Состояние,
	              |	ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные
	              |ИЗ
	              |	ДанныеКонтрагентов КАК ДанныеКонтрагентов
	              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияКонтрагентов КАК СостоянияКонтрагентов
	              |		ПО ДанныеКонтрагентов.Контрагент = СостоянияКонтрагентов.Контрагент
	              |			И ДанныеКонтрагентов.ИНН = СостоянияКонтрагентов.ИНН
	              |			И ДанныеКонтрагентов.КПП = СостоянияКонтрагентов.КПП
	              |			И ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные = СостоянияКонтрагентов.ОбластьДанныхВспомогательныеДанные";
	
	Запрос.УстановитьПараметр("ДанныеКонтрагентов", ДанныеКонтрагентов);
	ДанныеКонтрагентов = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

Функция ДатаСтрокой(Дата)
	
	Результат = Неопределено;
	Если ТипЗнч(Дата) = Тип("Строка") Тогда 
		// Дата уже в нужном формате в виде строки
		Результат = Дата;
	ИначеЕсли ТипЗнч(Дата) = Тип("Дата") Тогда 
		Результат = Формат(Дата, "ДФ=dd.MM.yyyy");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СостояниеНаОсновеОтветаСервиса(ДанныеКонтрагента, Ответ)
	
	Если Ответ = "0" Тогда
		Состояние = Перечисления.СостоянияСуществованияКонтрагента.Действует;
	ИначеЕсли Ответ = "1" Тогда
		Состояние = Перечисления.СостоянияСуществованияКонтрагента.ПрекратилДеятельность;
	ИначеЕсли Ответ = "3" Тогда
		Состояние = Перечисления.СостоянияСуществованияКонтрагента.КППНеСоотвествуетИНН;
	ИначеЕсли Ответ = "4" Тогда
		Состояние = Перечисления.СостоянияСуществованияКонтрагента.ОтсутствуетВРеестре;
	КонецЕсли;
		
	Возврат Состояние;
	
КонецФункции

Процедура ПроверитьНепроверенныхКонтрагентов(ЭтоОбновлениеИБВМоделиСервиса, Параметры = Неопределено)
	
	// Выбираем контрагентов, которых нет в регистре сведений и у которых заполнен ИНН
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Контрагенты.Ссылка КАК Контрагент,
		|	Контрагенты.ИНН,
		|	Контрагенты.КПП,
		|	&Дата КАК Дата,
		|	&ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияКонтрагентов КАК СостоянияКонтрагентов
		|		ПО Контрагенты.Ссылка = СостоянияКонтрагентов.Контрагент
		|ГДЕ
		|	(СостоянияКонтрагентов.Состояние ЕСТЬ NULL 
		|	ИЛИ СостоянияКонтрагентов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСуществованияКонтрагента.ПустаяСсылка))
		|	И Контрагенты.ИНН <> """"
		|	И Контрагенты.ЭтоГруппа = ЛОЖЬ";
		
	Если ЭтоОбновлениеИБВМоделиСервиса Тогда
		РазмерПорции = 1000;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РАЗЛИЧНЫЕ", "РАЗЛИЧНЫЕ ПЕРВЫЕ "+ Формат(РазмерПорции, "ЧГ=0"));
	КонецЕсли;

	Запрос.УстановитьПараметр("ОбластьДанныхВспомогательныеДанные", ОбщегоНазначения.ЗначениеРазделителяСеанса());
	Запрос.УстановитьПараметр("Дата", НачалоДня(ТекущаяДатаСеанса()));
	ДанныеКонтрагентов = Запрос.Выполнить().Выгрузить();
	
	// Прерываем обновление, если не осталось необработанных данных
	Если ЭтоОбновлениеИБВМоделиСервиса Тогда
		Параметры.ОбработкаЗавершена = ДанныеКонтрагентов.Количество() = 0;
		Если Параметры.ОбработкаЗавершена Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПроверитьКонтрагентов(ДанныеКонтрагентов);
	
КонецПроцедуры

Процедура ЗаполнитьСостояния(ПроверяемыеКонтрагенты, ДанныеКонтрагентов, Состояния = Неопределено)
	
	// Соединяем результаты проверки с исходной таблицей
	Запрос = Новый Запрос;
	Если ПроверяемыеКонтрагенты.Колонки.Найти("Состояние") <> Неопределено Тогда
		ПроверяемыеКонтрагенты.Колонки.Удалить("Состояние");
	КонецЕсли;
	ПоместитьТаблицуЗначенийВоВременнуюТаблицу(ПроверяемыеКонтрагенты, Запрос, "ПроверяемыеКонтрагенты");
		
	ПоместитьТаблицуЗначенийВоВременнуюТаблицу(ДанныеКонтрагентов, 	Запрос, "ДанныеКонтрагентов");
	
	// По всем контрагентам определяем состояние
	// В таблице оставляем только контрагентов с ошибками
	Запрос.Текст = Запрос.Текст + "
		|ВЫБРАТЬ 
		| 	" + ПредставлениеКолонок(ПроверяемыеКонтрагенты, "ПроверяемыеКонтрагенты.") + ", 
		| 	ДанныеКонтрагентов.Состояние КАК Состояние
		|ИЗ 
		|	ПроверяемыеКонтрагенты КАК ПроверяемыеКонтрагенты
		|	ЛЕВОЕ СОЕДИНЕНИЕ ДанныеКонтрагентов КАК ДанныеКонтрагентов
		|	ПО ПроверяемыеКонтрагенты.Контрагент = ДанныеКонтрагентов.Контрагент
		|		И ПроверяемыеКонтрагенты.ИНН = ДанныеКонтрагентов.ИНН
		|		И ПроверяемыеКонтрагенты.КПП = ДанныеКонтрагентов.КПП
		|		И (НАЧАЛОПЕРИОДА(ПроверяемыеКонтрагенты.Дата, День) = НАЧАЛОПЕРИОДА(ДанныеКонтрагентов.Дата, День)
		|		ИЛИ НАЧАЛОПЕРИОДА(ПроверяемыеКонтрагенты.Дата, День) = ДатаВремя(1,1,1))";
		
	Если Состояния <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
			|
			|ГДЕ
			|	ДанныеКонтрагентов.Состояние В (&Состояния)";
		
		Запрос.УстановитьПараметр("Состояния", Состояния);
	Конецесли;
		
	ПроверяемыеКонтрагенты = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

Процедура ПоместитьТаблицуЗначенийВоВременнуюТаблицу(Таблица, Запрос, ИмяВременнойТаблицы)
	
	ПредставлениеКолонок = ПредставлениеКолонок(Таблица);
	
	Запрос.Текст = Запрос.Текст + "
		|ВЫБРАТЬ 
		| " + ПредставлениеКолонок + "
		| ПОМЕСТИТЬ " + ИмяВременнойТаблицы + "
		| ИЗ &" + ИмяВременнойТаблицы + " КАК " + ИмяВременнойТаблицы + ";
		|//////////////////////////////////////////////////////////////////////////////////////////////////";
	
	Запрос.УстановитьПараметр(ИмяВременнойТаблицы, Таблица);
	
КонецПроцедуры

Функция ПредставлениеКолонок(Таблица, СинонимТаблицы = "")
	
	КолонкиИсходнойТаблицы = Новый Массив;
	Для Каждого Колонка Из Таблица.Колонки Цикл
		КолонкиИсходнойТаблицы.Добавить(СинонимТаблицы + Колонка.Имя);
	КонецЦикла;
	
	ПредставлениеКолонок = СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(КолонкиИсходнойТаблицы, "," + Символы.ПС);
	Возврат ПредставлениеКолонок;
	
КонецФункции

#Область ПроверкаКонтрагентовВДокументах

Процедура УстановитьУсловноеОформлениеНекорректныхКонтрагентов(Список)
	
	Оформление = Список.УсловноеОформление.Элементы.Добавить();
	Отбор = Оформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.Использование = Истина;
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СодержитНекоректныхКонтрагентов");
	Отбор.ПравоеЗначение = Истина;
	ЦветФона = Оформление.Оформление.Элементы.Найти("ЦветФона");
	ЦветФона.Значение = ЦветаСтиля.НекорректныйКонтрагентЦветФонаВСписке;
	ЦветФона.Использование = Истина;
	
КонецПроцедуры

Процедура УстановитьПараметрыДинамическогоСписка(Список)
	
	ИспользованиеПроверкиВозможно = ПроверкаКонтрагентовВызовСервера.ИспользованиеПроверкиВозможно();
	Список.Параметры.УстановитьЗначениеПараметра("ИспользованиеПроверкиВозможно", ИспользованиеПроверкиВозможно);
	
КонецПроцедуры

Процедура ОпределитьНаличиеНовыхОшибокВДокументе(Форма)
	
	ДокументОбъект 	= Форма.Объект;
	ДокументСсылка 	= ДокументОбъект.Ссылка; 
	
	Если ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВШапке(Форма) 
		ИЛИ ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВТабличнойЧасти(Форма) Тогда
		
		Форма.ЭтоДокументСОшибкой = ЭтоДокументСОшибкой(Форма);
		
		Если ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСоСчетомФактуройВПодвале(Форма) Тогда
			Форма.ЭтоСчетФактураСОшибкой = ПроверкаКонтрагентовКлиентСервер.ЭтоСостояниеНедействующегоКонтрагента(Форма.СостояниеКонтрагентовВСчетеФактуре, Истина);
		КонецЕсли;
		
	ИначеЕсли ПроверкаКонтрагентовКлиентСервер.ЭтоСчетФактура(Форма) Тогда
		
		Форма.ЭтоСчетФактураСОшибкой = ПроверкаКонтрагентовКлиентСервер.ЭтоСостояниеНедействующегоКонтрагента(Форма.СостояниеКонтрагентов, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеКонтрагентовВДокументе(Форма)
	
	ДанныеКонтрагентов = ШаблонТаблицыДанныеКонтрагентаВДокументе();
	
	ДокументСсылка = Форма.Объект.Ссылка; 
	
	Если Форма.ИспользованиеПроверкиВозможно Тогда

		Если ПроверкаКонтрагентовКлиентСервер.ЭтоСчетФактура(Форма) Тогда
			ЗаполнитьДанныеКонтрагентовВСчетеФактуре(Форма.Объект, ДанныеКонтрагентов);
		Иначе
			
			// Заполняем данные по контрагенту из документа-основания
			Если ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВШапке(Форма) Тогда
				ЗаполнитьДанныеКонтрагентовВДокументеОсновании(Форма, ДанныеКонтрагентов);
			КонецЕсли;
			
			// Заполняем данные по контрагенту из счета-фактуры
			Если ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСоСчетомФактуройВПодвале(Форма) Тогда
				
				СчетФактура = ПроверкаКонтрагентовКлиентСервер.СчетФактура(Форма);
				Если ЗначениеЗаполнено(СчетФактура) Тогда
					ЗаполнитьДанныеКонтрагентовВСчетеФактуре(СчетФактура, ДанныеКонтрагентов);
				КонецЕсли;
			КонецЕсли;
			
			// Заполняем данные по контрагентам из табличных частей
			Если ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВТабличнойЧасти(Форма) Тогда
				ЗаполнитьДанныеКонтрагентовВТабличнойЧасти(Форма, ДанныеКонтрагентов);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеКонтрагентов;

КонецФункции

Процедура ЗапомнитьРезультатПроверкиКонтрагентовВДокументе(Форма, ДанныеКонтрагентов)
	
	ДокументОбъект 	= Форма.Объект;
	ДокументСсылка 	= ДокументОбъект.Ссылка; 
	
	Если ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВШапке(Форма) Тогда
		
		Описание = ОписаниеДокументов(Форма);
		ОписаниеКонтрагентовВШапке = Описание.НайтиСтроки(Новый Структура("ЭтоСчетФактура", Ложь));
		Для каждого ОписаниеКонтрагентаВШапке Из ОписаниеКонтрагентовВШапке Цикл
			
			Дата = ДатаВДокументе(ДокументОбъект);
			
			Отбор = Новый Структура("ЭтоСчетФактура, Контрагент, Дата", Ложь, ОписаниеКонтрагентаВШапке.Контрагент, Дата); 
			ИтоговоеСостояние = ИтоговоеСостояниеКонтрагентаВСчетеФактуре(ДанныеКонтрагентов, Отбор);
			Форма.СостояниеКонтрагента = ИтоговоеСостояние.СостояниеКонтрагента;
			
		КонецЦикла; 
		
	КонецЕсли;
		
	Если ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСоСчетомФактуройВПодвале(Форма) Тогда
		Отбор = Новый Структура("ЭтоСчетФактура", Истина); 
		ИтоговоеСостояние = ИтоговоеСостояниеКонтрагентаВСчетеФактуре(ДанныеКонтрагентов, Отбор);
		Форма.СостояниеКонтрагентовВСчетеФактуре = ИтоговоеСостояние.СостояниеКонтрагента;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗапомнитьРезультатПроверкиКонтрагентовВТабличнойЧасти(Форма, ДанныеКонтрагентов)
	
	ДокументОбъект 	= Форма.Объект;
	ДокументСсылка 	= ДокументОбъект.Ссылка;
	
	Если ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВТабличнойЧасти(Форма) Тогда
		
		ОписаниеТабличныхЧастей = ОписаниеТабличныхЧастей(Форма);
		
		// Перебираем все табличные части
		Для каждого ОписаниеТабличнойЧасти Из ОписаниеТабличныхЧастей Цикл
			
			ИмяТабличнойЧасти 		= ОписаниеТабличнойЧасти.ИмяТабличнойЧасти;
			ИмяКолонкиСКонтрагентом	= ОписаниеТабличнойЧасти.ИмяКолонкиСКонтрагентом;
			
			ТабличнаяЧасть 			= ДокументОбъект[ОписаниеТабличнойЧасти.ИмяТабличнойЧасти];
			
			// Состояние проставляем только для тех строк, у которых было пустое состояние
			СтрокиТабличнойЧасти = ТабличнаяЧасть.НайтиСтроки(
				Новый Структура("Состояние", Перечисления.СостоянияСуществованияКонтрагента.ПустаяСсылка()));
			Для каждого СтрокаТабличнойЧасти Из СтрокиТабличнойЧасти Цикл
				
				// Определение даты
				Дата 			= ДатаВСтрокеТабличнойЧасти(ДокументОбъект, ОписаниеТабличнойЧасти, СтрокаТабличнойЧасти);
				Контрагент 		= СтрокаТабличнойЧасти[ИмяКолонкиСКонтрагентом];
				
				// В результате проверки контрагента ищем нужного контрагента с нужной датой
				СтрокиДанныхКонтрагентов = ДанныеКонтрагентов.НайтиСтроки(Новый Структура("Контрагент, Дата, ЭтоСчетФактура", Контрагент, Дата, Ложь));
				
				Для каждого СтрокиДанныхКонтрагента Из СтрокиДанныхКонтрагентов Цикл
					СтрокаТабличнойЧасти.Состояние 					= СтрокиДанныхКонтрагента.Состояние;
					СтрокаТабличнойЧасти.ЭтоНекорректныйКонтрагент 	= 
						ПроверкаКонтрагентовКлиентСервер.ЭтоСостояниеНедействующегоКонтрагента(СтрокиДанныхКонтрагента.Состояние, Истина);
				КонецЦикла; 
				
			КонецЦикла;
		
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеКонтрагентовВТабличнойЧасти(Форма, ДанныеКонтрагентов) Экспорт
	
	ДокументОбъект = Форма.Объект;
	ДокументСсылка = ДокументОбъект.Ссылка;
	
	ОписаниеТабличныхЧастей = ОписаниеТабличныхЧастей(Форма);
	
	Для каждого ОписаниеТабличнойЧасти Из ОписаниеТабличныхЧастей Цикл
		
		ИмяТабличнойЧасти 		= ОписаниеТабличнойЧасти.ИмяТабличнойЧасти;
		ИмяКолонкиСКонтрагентом	= ОписаниеТабличнойЧасти.ИмяКолонкиСКонтрагентом;
		
		ТабличнаяЧасть 			= ДокументОбъект[ОписаниеТабличнойЧасти.ИмяТабличнойЧасти];
		
		Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
			
			// Определение даты
			Дата = ДатаВСтрокеТабличнойЧасти(ДокументОбъект, ОписаниеТабличнойЧасти, СтрокаТабличнойЧасти);

			// Заполнение данных контрагента 
			ДополнитьДанныеКонтрагентаВДокументе(
				ДанныеКонтрагентов,
				СтрокаТабличнойЧасти[ИмяКолонкиСКонтрагентом],
				Дата,
				Ложь,
				СтрокаТабличнойЧасти.Состояние);
		
		КонецЦикла; 
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеКонтрагентовВДокументеОсновании(Форма, ДанныеКонтрагентов) Экспорт
	
	Если ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВШапке(Форма) Тогда
		
		ДокументОбъект = Форма.Объект;
		
		ДополнитьДанныеКонтрагентаВДокументе(
			ДанныеКонтрагентов,
			ДокументОбъект.Контрагент,
			ДатаВДокументе(ДокументОбъект),
			Ложь,
			Форма.СостояниеКонтрагента);
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьРезультатыПредыдущихПроверок(Форма, ДополнительныеПараметры)
	
	ДокументОбъект 	= Форма.Объект;
	ДокументСсылка 	= ДокументОбъект.Ссылка; 

	ЭтоДокументСКонтрагентомВШапке 			= ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВШапке(Форма); 
	ЭтоДокументСКонтрагентомВТабличнойЧасти = ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВТабличнойЧасти(Форма);
	ЭтоДокументСоСчетомФактуройВПодвале 	= ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСоСчетомФактуройВПодвале(Форма);
	ЭтоСчетФактура							= ПроверкаКонтрагентовКлиентСервер.ЭтоСчетФактура(Форма);

	Если ЭтоДокументСКонтрагентомВШапке ИЛИ ЭтоДокументСоСчетомФактуройВПодвале ИЛИ ЭтоСчетФактура Тогда

		Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
			// Изменилась строка в ТЧ. Ничего делать не нужно
		Иначе
			
			ПустоеСостояние = Перечисления.СостоянияСуществованияКонтрагента.ПустаяСсылка();
			
			Если ЭтоСчетФактура Тогда
				
				// Очищаем состояние для каждого контрагента
				Описание = ОписаниеКонтрагентовВСчетеФактуре(ТипЗнч(ДокументСсылка));
				Для каждого СтрокаОписания Из Описание Цикл
					Форма[СтрокаОписания.ИмяРеквизитаССостоянием] = ПустоеСостояние;
				КонецЦикла;
				
				// Очищаем итоговое состояние
				Форма["ЭтоСчетФактураСОшибкой"] = Ложь;
				
			Иначе
				
				ОчиститьРеквизитФормы(Форма, "СостояниеКонтрагента", 				ПустоеСостояние);
				ОчиститьРеквизитФормы(Форма, "СостояниеКонтрагентовВСчетеФактуре", 	ПустоеСостояние);
				ОчиститьРеквизитФормы(Форма, "ЭтоСчетФактураСОшибкой", 				Ложь);
				ОчиститьРеквизитФормы(Форма, "ЭтоДокументСОшибкой", 				Ложь);
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	Если ЭтоДокументСКонтрагентомВТабличнойЧасти Тогда
		
		Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
			// Это передано имя таблицы формы и идентификатор строки
			ОписаниеТабличныхЧастей = ОписаниеТабличныхЧастей(Форма);
			ОписанияТабличныхЧастей = ОписаниеТабличныхЧастей.НайтиСтроки(Новый Структура("ИмяТаблицыФормы", ДополнительныеПараметры.ИмяТаблицы));
			
			Для каждого ОписаниеТабличнойЧасти Из ОписанияТабличныхЧастей Цикл
				ТабличнаяЧасть = Форма.Объект[ОписаниеТабличнойЧасти.ИмяТабличнойЧасти];
				СтрокаТабличнойЧасти = ТабличнаяЧасть.НайтиПоИдентификатору(ДополнительныеПараметры.Идентификатор);
				
				ОчиститьРезультатПроверкиВСтроке(СтрокаТабличнойЧасти);
				
			КонецЦикла; 
		ИначеЕсли ДополнительныеПараметры = Неопределено
			ИЛИ ТипЗнч(ДополнительныеПараметры) = Тип("СправочникСсылка.Контрагенты")
			ИЛИ ТипЗнч(ДополнительныеПараметры) = Тип("Дата")
			ИЛИ ТипЗнч(ДополнительныеПараметры) = Тип("ДокументСсылка.СчетФактураВыданный")
			ИЛИ ТипЗнч(ДополнительныеПараметры) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
			
			ОчиститьРезультатПроверкиВСтроках(Форма, ДополнительныеПараметры);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоДокументСКонтрагентомВШапке ИЛИ ЭтоДокументСКонтрагентомВТабличнойЧасти Тогда
		Форма.ЭтоДокументСОшибкой = ЭтоДокументСОшибкой(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьРезультатПроверкиВСтроках(Форма, ДополнительныеПараметры)
	
	Если Форма.ИспользованиеПроверкиВозможно Тогда
		
		ДокументОбъект 	= Форма.Объект;
		ДокументСсылка 	= ДокументОбъект.Ссылка;
		
		Если ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВТабличнойЧасти(Форма) Тогда
		
			ОписаниеТабличныхЧастей = ПроверкаКонтрагентов.ОписаниеТабличныхЧастей(Форма);
			
			// Перебираем все табличные части
			Для каждого ОписаниеТабличнойЧасти Из ОписаниеТабличныхЧастей Цикл
				
				ИмяТабличнойЧасти 		= ОписаниеТабличнойЧасти.ИмяТабличнойЧасти;
				ИмяКолонкиСКонтрагентом	= ОписаниеТабличнойЧасти.ИмяКолонкиСКонтрагентом;
				ИмяКолонкиСДатой		= ОписаниеТабличнойЧасти.ИмяКолонкиСДатой;
				
				ТабличнаяЧасть 			= ДокументОбъект[ОписаниеТабличнойЧасти.ИмяТабличнойЧасти];
				
				СтрокиТабличнойЧасти = ТабличнаяЧасть;
				Если ДополнительныеПараметры = Неопределено 
					ИЛИ ТипЗнч(ДополнительныеПараметры) = Тип("ДокументСсылка.СчетФактураВыданный")
					ИЛИ ТипЗнч(ДополнительныеПараметры) = Тип("ДокументСсылка.СчетФактураПолученный")Тогда
					// Очищаем все строки
					СтрокиТабличнойЧасти = ТабличнаяЧасть;
				ИначеЕсли ТипЗнч(ДополнительныеПараметры) = Тип("Дата") И ЗначениеЗаполнено(ИмяКолонкиСДатой) Тогда
					// Очищаем строки с пустой датой
					СтрокиТабличнойЧасти = ТабличнаяЧасть.НайтиСтроки(Новый Структура(ИмяКолонкиСДатой, Дата(1,1,1)));
				ИначеЕсли ТипЗнч(ДополнительныеПараметры) = Тип("Дата") И НЕ ЗначениеЗаполнено(ИмяКолонкиСДатой) Тогда
					// Если в табличной части нет поля с датой, то очищаем все состояния при изменении даты
					СтрокиТабличнойЧасти = ТабличнаяЧасть;
				ИначеЕсли ТипЗнч(ДополнительныеПараметры) = Тип("СправочникСсылка.Контрагенты") Тогда
					// Очищаем строки с указанным контрагентом
					Контрагент = ДополнительныеПараметры;
					СтрокиТабличнойЧасти = ТабличнаяЧасть.НайтиСтроки(Новый Структура(ИмяКолонкиСКонтрагентом, Контрагент));
				КонецЕсли;
				
				Для каждого СтрокаТабличнойЧасти Из СтрокиТабличнойЧасти Цикл
					 ОчиститьРезультатПроверкиВСтроке(СтрокаТабличнойЧасти);
				КонецЦикла;
						
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьРезультатПроверкиВСтроке(Строка) Экспорт
	
	Строка.Состояние 					= ПредопределенноеЗначение("Перечисление.СостоянияСуществованияКонтрагента.ПустаяСсылка");
	Строка.ЭтоНекорректныйКонтрагент	= Ложь;
	
КонецПроцедуры

Функция ДатаВДокументе(ДокументОбъект)
	
	Дата = Дата(1,1,1);
	ПроверкаКонтрагентовПереопределяемый.ОпределитьДатуВДокументе(ДокументОбъект, Дата);
	
	Возврат НачалоДня(Дата); 
	
КонецФункции

Функция ЭтоДокументСОшибкой(Форма)
	
	ДокументОбъект 	= Форма.Объект;
	ДокументСсылка 	= ДокументОбъект.Ссылка;
	
	ЭтоДокументСКонтрагентомВШапке 			= ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВШапке(Форма);
	ЭтоДокументСКонтрагентомВТабличнойЧасти = ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВТабличнойЧасти(Форма);
	
	ЕстьОшибкаВШапке 			= Ложь;
	ЕстьОшибкаВТабличнойЧасти 	= Ложь;
	
	Если ЭтоДокументСКонтрагентомВШапке Тогда
		ЕстьОшибкаВШапке = ПроверкаКонтрагентовКлиентСервер.ЭтоСостояниеНедействующегоКонтрагента(Форма.СостояниеКонтрагента, Истина);
		Если ЕстьОшибкаВШапке Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоДокументСКонтрагентомВТабличнойЧасти Тогда
		
		ОписаниеТабличныхЧастей = ОписаниеТабличныхЧастей(Форма);
		
		// Перебираем все табличные части
		Для каждого ОписаниеТабличнойЧасти Из ОписаниеТабличныхЧастей Цикл
			
			ИмяТабличнойЧасти 	= ОписаниеТабличнойЧасти.ИмяТабличнойЧасти;
			ТабличнаяЧасть 		= ДокументОбъект[ОписаниеТабличнойЧасти.ИмяТабличнойЧасти];
			
			Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
				ЕстьОшибкаВТабличнойЧасти = ПроверкаКонтрагентовКлиентСервер.ЭтоСостояниеНедействующегоКонтрагента(СтрокаТабличнойЧасти.Состояние, Истина);
				Если ЕстьОшибкаВТабличнойЧасти Тогда
					Возврат Истина;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЕстьОшибкаВШапке ИЛИ ЕстьОшибкаВТабличнойЧасти;
	
КонецФункции

Процедура ОчиститьРеквизитФормы(Форма, ИмяРеквизита, НовоеЗначение)
	
	Если ПроверкаКонтрагентовКлиентСервер.ЕстьРеквизитФормы(Форма, ИмяРеквизита) Тогда
		Форма[ИмяРеквизита] = НовоеЗначение;
	КонецЕсли;

КонецПроцедуры

Процедура ВосстановитьРезультатПроверкиКонтрагентовВТабличныхЧастяхПослеЗаписи(Форма)
	
	ДокументОбъект 	= Форма.Объект;
	ДокументСсылка 	= ДокументОбъект.Ссылка; 
	
	ЭтоДокументСКонтрагентомВТабличнойЧасти = ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВТабличнойЧасти(Форма);
	
	// Восстанавливаем результат проверки в табличной части
	Если ЭтоДокументСКонтрагентомВТабличнойЧасти Тогда
		АдресДанныхКонтрагентов = Форма.АдресДанныхКонтрагентов; 
		Если ЗначениеЗаполнено(АдресДанныхКонтрагентов) И ЭтоАдресВременногоХранилища(АдресДанныхКонтрагентов) Тогда
			ДанныеКонтрагентов = ПолучитьИзВременногоХранилища(АдресДанныхКонтрагентов);
			ЗапомнитьРезультатПроверкиКонтрагентовВТабличнойЧасти(Форма, ДанныеКонтрагентов);
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

#Область УправлениеФормами

Процедура УстановитьУсловноеОформлениеТаблицыФормы(Форма)
	
	СостоянияНедействующегоКонтрагента 			= ПроверкаКонтрагентовКлиентСервер.СостоянияНедействующегоКонтрагента(Истина);
	СписокСостоянийНедействующегоКонтрагента 	= Новый СписокЗначений;
	СписокСостоянийНедействующегоКонтрагента.ЗагрузитьЗначения(СостоянияНедействующегоКонтрагента);
	
	ОписаниеТабличныхЧастей = ОписаниеТабличныхЧастей(Форма);
	Для каждого ОписаниеТабличнойЧасти Из ОписаниеТабличныхЧастей Цикл
		
		ИмяТабличнойЧасти 		= ОписаниеТабличнойЧасти.ИмяТабличнойЧасти;
		ИмяПоляСКонтрагентом 	= ОписаниеТабличнойЧасти.ИмяПоляСКонтрагентом;
		ПолеСКонтрагентом 		= Форма.Элементы[ОписаниеТабличнойЧасти.ИмяПоляСКонтрагентом];
		
		// Если поле с контрагентом скрыто функциональной опцией, то условное оформление не добавляем
		Если ПолеКонтрагентаСкрытоФункциональнойОпцией(Форма, ОписаниеТабличнойЧасти) Тогда
			Продолжить;
		КонецЕсли;
		
		// Условное оформление
		Оформление = Форма.УсловноеОформление.Элементы.Добавить();
		Отбор = Оформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		Отбор.Использование = Истина;
		
		ПутьКСостоянию = "Объект.%1.Состояние";
		ПутьКСостоянию = СтрЗаменить(ПутьКСостоянию, "%1", ИмяТабличнойЧасти);
		
		Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКСостоянию);
		Отбор.ПравоеЗначение = СписокСостоянийНедействующегоКонтрагента;
		
		ЦветФона = Оформление.Оформление.Элементы.Найти("ЦветТекста");
		ЦветФона.Значение = ЦветаСтиля.ЦветКонтрагентаОтсутствущегоВРеестре;
		ЦветФона.Использование = Истина;
				
		ОформляемоеПоле = Оформление.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляСКонтрагентом);
				
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьКолонкуВТабличнуюЧасть(Форма)
	
	СостоянияНедействующегоКонтрагента 			= ПроверкаКонтрагентовКлиентСервер.СостоянияНедействующегоКонтрагента(Истина);
	СписокСостоянийНедействующегоКонтрагента 	= Новый СписокЗначений;
	СписокСостоянийНедействующегоКонтрагента.ЗагрузитьЗначения(СостоянияНедействующегоКонтрагента);
	
	ОписаниеТабличныхЧастей = ОписаниеТабличныхЧастей(Форма);
	
	Для каждого ОписаниеТабличнойЧасти Из ОписаниеТабличныхЧастей Цикл
		
		ИмяТабличнойЧасти 	= ОписаниеТабличнойЧасти.ИмяТабличнойЧасти;
		
		// Программно добавляем колонку и группу колонок
		Элементы 		= Форма.Элементы;
		ТаблицаФормы 	= Элементы[ОписаниеТабличнойЧасти.ИмяТаблицыФормы];
		
		// Новые реквизиты формы
		ДобавитьРеквизитЭтоНекорректныйКонтрагент(Форма, ОписаниеТабличнойЧасти, ТаблицаФормы.ПутьКДанным);
		ДобавитьРеквизитСостояние(Форма, ОписаниеТабличнойЧасти, ТаблицаФормы.ПутьКДанным);
		
		// Новые поле и группа
		ПолеСКонтрагентом 		= Форма.Элементы[ОписаниеТабличнойЧасти.ИмяПоляСКонтрагентом];
		
		// Если поле с контрагентом скрыто функциональной опцией, то колонку для отображения результата проверки контрагента не выводим
		Если ПолеКонтрагентаСкрытоФункциональнойОпцией(Форма, ОписаниеТабличнойЧасти) Тогда
			Продолжить;
		КонецЕсли;
		
		НовоеПолеКартинки		= НовоеПолеКартинки(Форма, ТаблицаФормы, ПолеСКонтрагентом.Родитель, ПолеСКонтрагентом);
		НоваяГруппаКолонок 		= НоваяГруппаКолонок(Форма, ПолеСКонтрагентом.Родитель, ПолеСКонтрагентом, ОписаниеТабличнойЧасти);
		
		// Корректируем свойства колонки с контрагентом
		ПолеСКонтрагентом.ОтображатьВШапке 			= Ложь;
		ПолеСКонтрагентом.ФиксацияВТаблице 			= ФиксацияВТаблице.Нет;
		ПолеСКонтрагентом.РастягиватьПоГоризонтали 	= Ложь;
		
		// Перемещаем колонки в группу
		Элементы.Переместить(ПолеСКонтрагентом, НоваяГруппаКолонок);
		Элементы.Переместить(НовоеПолеКартинки, НоваяГруппаКолонок);
		
		// Устанавливаем видимость такую же как и у колонки с контрагентом
		НовоеПолеКартинки.Видимость 	= ПолеСКонтрагентом.Видимость;
		НоваяГруппаКолонок.Видимость 	= ПолеСКонтрагентом.Видимость;
		
		СкопироватьУсловноеОформлениеСКонтрагента(Форма, ПолеСКонтрагентом, НовоеПолеКартинки);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолеКонтрагентаСкрытоФункциональнойОпцией(Форма, ОписаниеТабличнойЧасти)
	
	ИмяДокумента 		= Форма.Объект.Ссылка.Метаданные().Имя;
	ИмяТабличнойЧасти 	= ОписаниеТабличнойЧасти.ИмяТабличнойЧасти;
	ИмяКолонки 			= ОписаниеТабличнойЧасти.ИмяКолонкиСКонтрагентом;
	
	ИскомыйОбъект = Метаданные.Документы[ИмяДокумента].ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты[ИмяКолонки];
	
	ПолеСкрыто = Ложь;
	
	Для каждого ФункциональнаяОпция Из Метаданные.ФункциональныеОпции Цикл
		Если ФункциональнаяОпция.Состав.Найти(ИскомыйОбъект) <> Неопределено
			И ФункциональнаяОпция.Хранение.Тип = Новый ОписаниеТипов("Булево") Тогда
			
			ПолеСкрыто = НЕ ПолучитьФункциональнуюОпцию(ФункциональнаяОпция.Имя);
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат ПолеСкрыто;

КонецФункции

Функция НовоеПолеКартинки(Форма, ТаблицаФормы, Родитель, СледующийЭлемент)
	
	Элементы = Форма.Элементы;
	
	НовоеПоле 							= Элементы.Вставить(ПроверкаКонтрагентовКлиентСервер.ИмяПоляКартинки(ТаблицаФормы), Тип("ПолеФормы"), Родитель, СледующийЭлемент);
	НовоеПоле.Заголовок					= "Есть ошибка по данным ФНС";
	НовоеПоле.Вид 						= ВидПоляФормы.ПолеКартинки;
	НовоеПоле.КартинкаЗначений			= БиблиотекаКартинок.НекорректныйКонтрагент;
	НовоеПоле.ПутьКДанным				= ТаблицаФормы.ПутьКДанным + "." + "ЭтоНекорректныйКонтрагент";
	НовоеПоле.ОтображатьВШапке 			= Ложь;
	НовоеПоле.ПоложениеЗаголовка 		= ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовоеПоле.Ширина 					= 2;
	НовоеПоле.РастягиватьПоГоризонтали	= Ложь;
	НовоеПоле.ГиперссылкаЯчейки			= Истина;
	
	Возврат НовоеПоле;
	
КонецФункции

Функция НоваяГруппаКолонок(Форма, Родитель, СледующийЭлемент, ОписаниеТабличнойЧасти)
	
	Элементы = Форма.Элементы;
	
	НоваяГруппаКолонок = Элементы.Вставить(СледующийЭлемент.Имя + "Группа", Тип("ГруппаФормы"), Родитель, СледующийЭлемент);
	
	Заголовок = СледующийЭлемент.Заголовок;
	Если НЕ ЗначениеЗаполнено(Заголовок) Тогда
		Заголовок = Форма.Объект.Ссылка.Метаданные().ТабличныеЧасти[ОписаниеТабличнойЧасти.ИмяТабличнойЧасти].Реквизиты[ОписаниеТабличнойЧасти.ИмяКолонкиСКонтрагентом].Синоним;
	КонецЕсли;
	
	НоваяГруппаКолонок.Заголовок				= Заголовок;
	НоваяГруппаКолонок.Вид 						= ВидГруппыФормы.ГруппаКолонок;
	НоваяГруппаКолонок.ОтображатьЗаголовок		= Истина;
	НоваяГруппаКолонок.Группировка				= ГруппировкаКолонок.Горизонтальная;
	НоваяГруппаКолонок.ОтображатьВШапке 		= Истина;
	НоваяГруппаКолонок.ФиксацияВТаблице 		= СледующийЭлемент.ФиксацияВТаблице;
	НоваяГруппаКолонок.Ширина 					= 17;
	НоваяГруппаКолонок.РастягиватьПоГоризонтали = Ложь;
	
	Возврат НоваяГруппаКолонок;

КонецФункции

Процедура ДобавитьРеквизитЭтоНекорректныйКонтрагент(Форма, ОписаниеТабличнойЧасти, Путь)
		
	ДобавитьРеквизит(
		Форма, 
		ОписаниеТабличнойЧасти, 
		"ЭтоНекорректныйКонтрагент", 
		Новый ОписаниеТипов("Булево"), 
		Путь);
		
КонецПроцедуры

Процедура ДобавитьРеквизитСостояние(Форма, ОписаниеТабличнойЧасти, Путь)
	
	ДобавитьРеквизит(
		Форма, 
		ОписаниеТабличнойЧасти, 
		"Состояние", 
		Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияСуществованияКонтрагента"),
		Путь);
	
КонецПроцедуры

Процедура ДобавитьРеквизит(Форма, ОписаниеТабличнойЧасти, ИмяРеквизита, Тип, Путь)
	
	РеквизитУжеЕсть = РеквизитТабличнойЧастиУжеЕсть(Форма, ОписаниеТабличнойЧасти, ИмяРеквизита);
	Если НЕ РеквизитУжеЕсть Тогда

		НовыйРеквизит 			= Новый РеквизитФормы(ИмяРеквизита, Тип, Путь);
		ДобавляемыеРеквизиты 	= Новый Массив;
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		
	КонецЕсли;
	
КонецПроцедуры

Функция РеквизитТабличнойЧастиУжеЕсть(Форма, ОписаниеТабличнойЧасти, ИмяРеквизита)
	
	ТабличнаяЧасть 			= Форма.Объект[ОписаниеТабличнойЧасти.ИмяТабличнойЧасти];
	ВыгрузкаТабличнойЧасти 	= ТабличнаяЧасть.Выгрузить();// Преобразуем в таблицу значений
	РеквизитУжеЕсть 		= ВыгрузкаТабличнойЧасти.Колонки.Найти(ИмяРеквизита) <> Неопределено;
	ВыгрузкаТабличнойЧасти	= Неопределено;
	
	Возврат РеквизитУжеЕсть;
	
КонецФункции

Функция ДатаВСтрокеТабличнойЧасти(ДокументОбъект, ОписаниеТабличнойЧасти, СтрокаТабличнойЧасти)
	
	ИмяКолонкиСДатой = ОписаниеТабличнойЧасти.ИмяКолонкиСДатой;
	
	Дата = Дата(1,1,1);
	ДатаВДокументе	= ДатаВДокументе(ДокументОбъект);
	Если ЗначениеЗаполнено(ИмяКолонкиСДатой) Тогда
		// Определение даты из ТЧ
		ДатаВСтроке = НачалоДня(СтрокаТабличнойЧасти[ИмяКолонкиСДатой]);
		Дата 		= ?(ЗначениеЗаполнено(ДатаВСтроке), ДатаВСтроке, ДатаВДокументе);
	Иначе
		// В табличной части нет колонки с датой, то берем дату из шапки документа
		Дата = ДатаВДокументе;
	КонецЕсли;
				
	Возврат Дата;			
				
КонецФункции

Процедура СкопироватьУсловноеОформлениеСКонтрагента(Форма, ПолеСКонтрагентом, НовоеПолеКартинки)
	
	УсловноеОформлениеФормы = Форма.УсловноеОформление;
	Для каждого УсловноеОформление Из УсловноеОформлениеФормы.Элементы Цикл
		
		Видимость = УсловноеОформление.Оформление.Элементы.Найти("Видимость");
		ИспользуетсяУправлениеВидимостью = Видимость.Использование;
		
		Если ИспользуетсяУправлениеВидимостью Тогда
			
			Для каждого ЭлементПоля Из УсловноеОформление.Поля.Элементы Цикл
				Если ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных(ПолеСКонтрагентом.Имя) Тогда
					
					НовоеОформляемоеПоле = УсловноеОформление.Поля.Элементы.Добавить();
					НовоеОформляемоеПоле.Использование = Истина;
					НовоеОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(НовоеПолеКартинки.Имя);
					
					Прервать;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры
#КонецОбласти

#КонецОбласти

#Область СчетаФактуры

Процедура ЗапомнитьРезультатПроверкиКонтрагентовВСчетеФактере(Форма, ДанныеКонтрагентов)
	
	ДокументОбъект 	= Форма.Объект;
	ДокументСсылка 	= ДокументОбъект.Ссылка;
	
	Если ПроверкаКонтрагентовКлиентСервер.ЭтоСчетФактура(Форма) Тогда
		Описание = ОписаниеКонтрагентовВСчетеФактуре(ТипЗнч(ДокументСсылка));
		Для каждого СтрокаОписания Из Описание Цикл
			
			ИмяРеквизитаКонтрагента = СтрокаОписания.ИмяРеквизита;
			Контрагент = ДокументОбъект[ИмяРеквизитаКонтрагента];
			
			Если ЗначениеЗаполнено(Контрагент) Тогда
				Отбор = Новый Структура("Контрагент", Контрагент); 
				ИтоговоеСостояние = ИтоговоеСостояниеКонтрагентаВСчетеФактуре(ДанныеКонтрагентов, Отбор);
				Форма[СтрокаОписания.ИмяРеквизитаССостоянием] = ИтоговоеСостояние.СостояниеКонтрагента;
			КонецЕсли;
			
		КонецЦикла;
		
		// Общее состояние по счету-фактуре
		Отбор = Новый Структура("ЭтоСчетФактура", Истина); 
		ИтоговоеСостояние = ИтоговоеСостояниеКонтрагентаВСчетеФактуре(ДанныеКонтрагентов, Отбор);
		Форма.СостояниеКонтрагентов = ИтоговоеСостояние.СостояниеКонтрагента;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеКонтрагентовВСчетеФактуре(ДокументОбъект, ДанныеКонтрагентов, Форма = Неопределено)
	
	Если ДокументОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДокументСсылка = ДокументОбъект.Ссылка;
	Дата = ДатаВСчетеФактуре(ДокументОбъект);
	
	Описание = ОписаниеКонтрагентовВСчетеФактуре(ТипЗнч(ДокументСсылка));
	Для каждого СтрокаОписания Из Описание Цикл
		
		ИмяРеквизитаКонтрагента = СтрокаОписания.ИмяРеквизита;
		Контрагент = ДокументОбъект[ИмяРеквизитаКонтрагента];
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			
			ДополнитьДанныеКонтрагентаВДокументе(
				ДанныеКонтрагентов,
				Контрагент,
				Дата,
				Истина);
			
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

Функция ИтоговоеСостояниеКонтрагентаВСчетеФактуре(ДанныеКонтрагентов, Отбор)
	
	// Инициализируем
	КонтрагентЗаполнен 		= Ложь;
	СостояниеКонтрагента 	= ПредопределенноеЗначение("Перечисление.СостоянияСуществованияКонтрагента.ПустаяСсылка");
	
	КонтрагентЗаполнен 						= Ложь;
	КонтрагентовНесколько 					= Ложь;
	
	ДанныеПоКонтрагентам = ДанныеКонтрагентов.НайтиСтроки(Отбор);
	Если ДанныеПоКонтрагентам.Количество() = 1 Тогда
		
		ДанныеПоКонтрагенту 	= ДанныеПоКонтрагентам[0];
		КонтрагентЗаполнен 		= ЗначениеЗаполнено(ДанныеПоКонтрагенту.Контрагент); 
		СостояниеКонтрагента 	= ДанныеПоКонтрагенту.Состояние;
		КонтрагентовНесколько 	= Ложь;
		
	Иначе
		
		// Прорисовываем результат проверки в счет-фактуре
		ЕстьНедействующиеКонтрагенты 			= Ложь;
		ЕстьДействующиеКонтрагенты 				= Ложь;
		ЕстьКонтрагентыСОшибками 				= Ложь;
		ЕстьКонтрагентыНеПодлежащиеПроверке 	= Ложь;
		ЕстьКонтрагентыСПустымИННКПП 			= Ложь;
		
		Для каждого ДанныеПоКонтрагенту Из ДанныеПоКонтрагентам Цикл
			
			// Заполненность контрагента
			Если ЗначениеЗаполнено(ДанныеПоКонтрагенту.Контрагент) Тогда
				КонтрагентЗаполнен = Истина;
			КонецЕсли;
			
			// Состояние существования
			Если ПроверкаКонтрагентовКлиентСервер.ЭтоСостояниеНедействующегоКонтрагента(ДанныеПоКонтрагенту.Состояние) Тогда
				ЕстьНедействующиеКонтрагенты = Истина;
			КонецЕсли;
			
			Если ПроверкаКонтрагентовКлиентСервер.ЭтоСостояниеДействующегоКонтрагента(ДанныеПоКонтрагенту.Состояние) 
				И ДанныеПоКонтрагенту.Состояние <> ПредопределенноеЗначение("Перечисление.СостоянияСуществованияКонтрагента.СодержитОшибкиВДанных")
				И ДанныеПоКонтрагенту.Состояние <> ПредопределенноеЗначение("Перечисление.СостоянияСуществованияКонтрагента.ПустаяСсылка")
				И ДанныеПоКонтрагенту.Состояние <> ПредопределенноеЗначение("Перечисление.СостоянияСуществованияКонтрагента.НеПодлежитПроверке") Тогда
				ЕстьДействующиеКонтрагенты = Истина;
			КонецЕсли;
			
			Если ДанныеПоКонтрагенту.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияСуществованияКонтрагента.СодержитОшибкиВДанных") Тогда
				ЕстьКонтрагентыСОшибками = Истина;
			КонецЕсли;
			
			Если ДанныеПоКонтрагенту.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияСуществованияКонтрагента.НеПодлежитПроверке") Тогда
				ЕстьКонтрагентыНеПодлежащиеПроверке = Истина;
			КонецЕсли;
			
			Если ДанныеПоКонтрагенту.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияСуществованияКонтрагента.ПустойИННКПП") Тогда
				ЕстьКонтрагентыСПустымИННКПП = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если КонтрагентЗаполнен Тогда
			КонтрагентовНесколько = Истина;
		КонецЕсли;
		
		Если НЕ ЕстьНедействующиеКонтрагенты И НЕ ЕстьДействующиеКонтрагенты И НЕ ЕстьКонтрагентыСОшибками Тогда
			// Контрагент не проверен
		    СостояниеКонтрагента = ПредопределенноеЗначение("Перечисление.СостоянияСуществованияКонтрагента.ПустаяСсылка");
		ИначеЕсли ЕстьНедействующиеКонтрагенты Тогда
			СостояниеКонтрагента = ПредопределенноеЗначение("Перечисление.СостоянияСуществованияКонтрагента.ОтсутствуетВРеестре");
		ИначеЕсли ЕстьКонтрагентыСОшибками Тогда
			СостояниеКонтрагента = ПредопределенноеЗначение("Перечисление.СостоянияСуществованияКонтрагента.СодержитОшибкиВДанных");
		ИначеЕсли ЕстьКонтрагентыНеПодлежащиеПроверке Тогда
			СостояниеКонтрагента = ПредопределенноеЗначение("Перечисление.СостоянияСуществованияКонтрагента.НеПодлежитПроверке");
		ИначеЕсли ЕстьКонтрагентыСПустымИННКПП Тогда
			СостояниеКонтрагента = ПредопределенноеЗначение("Перечисление.СостоянияСуществованияКонтрагента.ПустойИННКПП");
		Иначе
			СостояниеКонтрагента = ПредопределенноеЗначение("Перечисление.СостоянияСуществованияКонтрагента.Действует");
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("КонтрагентЗаполнен", 		КонтрагентЗаполнен);
	Результат.Вставить("СостояниеКонтрагента", 		СостояниеКонтрагента);
	Результат.Вставить("КонтрагентовНесколько", 	КонтрагентовНесколько);
	
	Возврат Результат;
	
КонецФункции

Функция ДатаВСчетеФактуре(СчетФактураОбъект)
	
	Дата = Дата(1,1,1);
	ПроверкаКонтрагентовПереопределяемый.ОпределитьДатуВСчетеФактуре(СчетФактураОбъект, Дата);
	
	Возврат Дата; 
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти