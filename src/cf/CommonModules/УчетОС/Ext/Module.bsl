//ПОСТУПЛЕНИЕ ОБОРУДОВАНИЯ

Процедура СформироватьДвиженияПоступлениеОборудования(ТаблицаТовары, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыПоступлениеОборудования(ТаблицаТовары, ТаблицаРеквизиты);

	Если Параметры.ТаблицаТовары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	СпособОценкиМПЗ         = УчетнаяПолитика.СпособОценкиМПЗ(Реквизиты.Организация, Реквизиты.Период);
	ВедетсяУчетПоПартиям    = СпособОценкиМПЗ <> Перечисления.СпособыОценки.ПоСредней;
	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаТовары Цикл

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = СтрокаТаблицы.Содержание;

		Проводка.СчетДт = СтрокаТаблицы.СчетУчета;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТаблицы.Номенклатура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады", Реквизиты.Склад);
		Если ВедетсяУчетПоПартиям Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии", Реквизиты.Регистратор);
		КонецЕсли;

		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = Реквизиты.Подразделение;
		КонецЕсли;

		Если СвойстваСчетаДт.Количественный Тогда
			Проводка.КоличествоДт = СтрокаТаблицы.Количество;
		КонецЕсли;

		Проводка.СчетКт = Реквизиты.СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Реквизиты.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", Реквизиты.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", Реквизиты.Регистратор);

		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = Реквизиты.Подразделение;
		КонецЕсли;

		Если СвойстваСчетаКт.Валютный Тогда
			Проводка.ВалютаКт        = Реквизиты.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаВзаиморасчетов;
		КонецЕсли;

		Проводка.Сумма = СтрокаТаблицы.СуммаБУ;

		Если ОтражатьВНалоговомУчете Тогда

			Если СвойстваСчетаДт.НалоговыйУчет Тогда
				Проводка.СуммаНУДт = СтрокаТаблицы.СуммаНУ;
				Проводка.СуммаПРДт = СтрокаТаблицы.СуммаБУ - СтрокаТаблицы.СуммаНУ;
				Проводка.СуммаВРДт = 0;
			КонецЕсли;

			Если СвойстваСчетаКт.НалоговыйУчет Тогда
				Проводка.СуммаНУКт = СтрокаТаблицы.СуммаНУ;
				Проводка.СуммаПРКт = СтрокаТаблицы.СуммаБУ - СтрокаТаблицы.СуммаНУ;
				Проводка.СуммаВРКт = 0;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыПоступлениеОборудования(ТаблицаТовары, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаТовары

	СписокОбязательныхКолонок = ""
	+ "Номенклатура,"        // <СправочникСсылка.Номенклатура> - поступающий оборудование
	+ "СуммаВзаиморасчетов," // <Число,15,2> - сумма в валюте взаиморасчетов с поставщиком
	+ "СуммаБУ,"             // <Число,15,2> - сумма в рублях
	+ "СуммаНУ,"             // <Число,15,2> - сумма в рублях (НУ)
	+ "Количество,"          // <Число,15,3> - количество поступающего оборудования
	+ "СчетУчета,"           // <ПланСчетовСсылка.Хозрасчетный> - счет учета, на который приходуется оборудование
	+ "Содержание";          // <Строка,150> - содержание проводки

	Параметры.Вставить("ТаблицаТовары", 
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаТовары, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                    // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организация> - организация, в которую поступает оборудование
	+ "Подразделение,"                  // <Ссылка на справочник подразделений> - подразделение, в которое поступает оборудование
	+ "Склад,"                          // <СправочникСсылка.Склады> - склад, на который поступает оборудование
	+ "Контрагент,"                     // <СправочникСсылка.Контрагенты> - поставщик оборудования
	+ "ДоговорКонтрагента,"             // <СправочникСсылка.ДоговорыКонтрагентов> - договор, по которому поступает оборудование
	+ "СчетУчетаРасчетовСКонтрагентом," // <ПланСчетовСсылка.Хозрасчетный> - счет учета расчетов с поставщиком, обычно 60.01
	+ "ВалютаВзаиморасчетов";           // <СправочникСсылка.Валюты> - валюта взаиморасчетов с поставщиком

	Параметры.Вставить("Реквизиты", 
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ПОСТУПЛЕНИЕ ОБЪЕКТОВ СТРОИТЕЛЬСТВА

Процедура СформироватьДвиженияПоступлениеОбъектовСтроительства(ТаблицаОбъектыСтроительства, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыПоступлениеОбъектовСтроительства(ТаблицаОбъектыСтроительства, ТаблицаРеквизиты);

	Если Параметры.ОбъектыСтроительства.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);

	Для каждого СтрокаТаблицы Из Параметры.ОбъектыСтроительства Цикл

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = СтрокаТаблицы.Содержание;

		Проводка.СчетДт = СтрокаТаблицы.СчетУчета;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОбъектыСтроительства", СтрокаТаблицы.ОбъектСтроительства);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат",         СтрокаТаблицы.СтатьяЗатрат);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СпособыСтроительства", Перечисления.СпособыСтроительства.Подрядный);

		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = Реквизиты.Подразделение;
		КонецЕсли;

		Проводка.СчетКт = Реквизиты.СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты", Реквизиты.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры", Реквизиты.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", Реквизиты.Регистратор);

		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = Реквизиты.Подразделение;
		КонецЕсли;

		Если СвойстваСчетаКт.Валютный Тогда
			Проводка.ВалютаКт        = Реквизиты.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаВзаиморасчетов;
		КонецЕсли;

		Проводка.Сумма = СтрокаТаблицы.СуммаБУ;

		Если ОтражатьВНалоговомУчете Тогда

			Если СвойстваСчетаДт.НалоговыйУчет Тогда
				Проводка.СуммаНУДт = СтрокаТаблицы.СуммаНУ;
				Проводка.СуммаПРДт = СтрокаТаблицы.СуммаБУ - СтрокаТаблицы.СуммаНУ;
				Проводка.СуммаВРДт = 0;
			КонецЕсли;

			Если СвойстваСчетаКт.НалоговыйУчет Тогда
				Проводка.СуммаНУКт = СтрокаТаблицы.СуммаНУ;
				Проводка.СуммаПРКт = СтрокаТаблицы.СуммаБУ - СтрокаТаблицы.СуммаНУ;
				Проводка.СуммаВРКт = 0;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыПоступлениеОбъектовСтроительства(ТаблицаОбъектыСтроительства, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ОбъектыСтроительства

	СписокОбязательныхКолонок = ""
	+ "ОбъектСтроительства," // <СправочникСсылка.ОбъектыСтроительства> - объект строительства, на который относятся затраты
	+ "СтатьяЗатрат,"        // <СправочникСсылка.СтатьиЗатрат>
	+ "СуммаВзаиморасчетов," // <Число,15,2> - сумма в валюте взаиморасчетов с поставщиком
	+ "СуммаБУ,"             // <Число,15,2> - сумма в рублях
	+ "СуммаНУ,"             // <Число,15,2> - сумма в рублях (НУ)
	+ "СчетУчета,"           // <ПланСчетовСсылка.Хозрасчетный> - счет учета, на который относятся затраты
	+ "Содержание";          // <Строка,150> - содержание проводки

	Параметры.Вставить("ОбъектыСтроительства", 
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОбъектыСтроительства, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                    // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организация> - организация, в которую поступает товар
	+ "Подразделение,"                  // <Ссылка на справочник подразделений> - подразделение, в которое поступает товар
	+ "Склад,"                          // <СправочникСсылка.Склады> - склад, на который поступает товар
	+ "Контрагент,"                     // <СправочникСсылка.Контрагенты> - поставщик товара
	+ "ДоговорКонтрагента,"             // <СправочникСсылка.ДоговорыКонтрагентов> - договор, по которому поступает товар
	+ "СчетУчетаРасчетовСКонтрагентом," // <ПланСчетовСсылка.Хозрасчетный> - счет учета расчетов с поставщиком, обычно 60.01
	+ "ВалютаВзаиморасчетов";           // <СправочникСсылка.Валюты> - валюта взаиморасчетов с поставщиком

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ПРИНЯТИЕ К УЧЕТУ ОС - ОБЪЕКТЫ СТРОИТЕЛЬСТВА

Процедура СформироватьДвиженияПринятиеКУчетуОСОбъектыСтроительства(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыПринятиеКУчетуОСОбъектыСтроительства(ТаблицаОС, ТаблицаРеквизиты);

	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаПБУ18          = УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);

	Для каждого СтрокаТаблицы Из ТаблицаОС Цикл

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;

		Проводка.Содержание = "Принят к учету объект ОС";

		Проводка.СчетДт = Реквизиты.СчетУчета;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);

		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = Реквизиты.ПодразделениеДт;
		КонецЕсли;

		Проводка.СчетКт = Реквизиты.СчетУчетаВнеоборотногоАктива;

		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбъектыСтроительства", Реквизиты.ОбъектСтроительства);

		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = Реквизиты.ПодразделениеКт;
		КонецЕсли;

		Проводка.Сумма = СтрокаТаблицы.СуммаБУ;

		Если ОтражатьВНалоговомУчете Тогда

			Если СвойстваСчетаДт.НалоговыйУчет Тогда
				Проводка.СуммаНУДт = СтрокаТаблицы.СуммаНУ;
				Если ПоддержкаПБУ18 Тогда
					Проводка.СуммаПРДт = СтрокаТаблицы.СуммаПР;
					Проводка.СуммаВРДт = СтрокаТаблицы.СуммаВР;
				КонецЕсли;
			КонецЕсли;

			Если СвойстваСчетаКт.НалоговыйУчет Тогда
				Проводка.СуммаНУКт = СтрокаТаблицы.СуммаНУ;
				Если ПоддержкаПБУ18 Тогда
					Проводка.СуммаПРКт = СтрокаТаблицы.СуммаПР;
					Проводка.СуммаВРКт = СтрокаТаблицы.СуммаВР;
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыПринятиеКУчетуОСОбъектыСтроительства(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство," // <СправочникСсылка.ОсновныеСредства>
	+ "СуммаБУ,"          // <Число, 15, 2> - стоимость ОС по данным бухгалтерского учета
	+ "СуммаНУ,"          // <Число, 15, 2> - стоимость ОС по данным налогового учета
	+ "СуммаПР,"          // <Число, 15, 2> - постоянные разницы в стоимости ОС (ПБУ 18/02)
	+ "СуммаВР";          // <Число, 15, 2> - временные разницы в стоимости ОС (ПБУ 18/02)

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                       // <Дата>
	+ "ОбъектСтроительства,"          // <СправочникСсылка.ОбъектыСтроительства> - объект строительства с которого
	                                  // списывается стоимость ОС
	+ "Организация,"                  // <СправочникСсылка.Организации>
	+ "ПодразделениеДт,"              // <Ссылка на справочник подразделений>
	+ "ПодразделениеКт,"              // <Ссылка на справочник подразделений>
	+ "Регистратор,"                  // <ДокументСсылка.*>
	+ "СчетУчета,"                    // <ПланСчетовСсылка.Хозрасчетный> - счет на который принимается к учету ОС
	+ "СчетУчетаВнеоборотногоАктива"; // <ПланСчетовСсылка.Хозрасчетный> - счет учета объекта строительства

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ПРИНЯТИЕ К УЧЕТУ ОС - ПО РЕЗУЛЬТАТАМ ИНВЕНТАРИЗАЦИИ

Процедура СформироватьДвиженияПринятиеКУчетуОСПоРезультатамИнвентаризации(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыПринятиеКУчетуОСПоРезультатамИнвентаризации(ТаблицаОС, ТаблицаРеквизиты);

	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);

	Для каждого СтрокаТаблицы Из ТаблицаОС Цикл

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;

		Проводка.Содержание = "Принят к учету объект ОС";

		Проводка.СчетДт = Реквизиты.СчетУчета;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);

		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = Реквизиты.ПодразделениеДт;
		КонецЕсли;

		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;

		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ПрочиеДоходыИРасходы", Реквизиты.СтатьяДоходов);

		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = Реквизиты.ПодразделениеКт;
		КонецЕсли;

		Проводка.Сумма = СтрокаТаблицы.СуммаБУ;

		Если ОтражатьВНалоговомУчете Тогда

			Если СвойстваСчетаДт.НалоговыйУчет Тогда
				Проводка.СуммаНУДт = СтрокаТаблицы.СуммаНУ;
			КонецЕсли;

			Если СвойстваСчетаКт.НалоговыйУчет Тогда
				Проводка.СуммаНУКт = СтрокаТаблицы.СуммаНУ;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыПринятиеКУчетуОСПоРезультатамИнвентаризации(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство," // <СправочникСсылка.ОсновныеСредства>
	+ "СуммаБУ,"          // <Число, 15, 2> - стоимость ОС по данным бухгалтерского учета
	+ "СуммаНУ";          // <Число, 15, 2> - стоимость ОС по данным налогового учета

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"              // <Дата>
	+ "Организация,"         // <СправочникСсылка.Организации>
	+ "ПодразделениеДт,"       // <Ссылка на справочник подразделений>
	+ "ПодразделениеКт,"       // <Ссылка на справочник подразделений>
	+ "Регистратор,"         // <ДокументСсылка.*>
	+ "СтатьяДоходов,"       // <СправочникСсылка.ПрочиеДоходыИРасходы> - статья, по которой будет отражена выручка по
	                         // оприходванию объекта ОС
	+ "СчетУчета";           // <ПланСчетовСсылка.Хозрасчетный> - счет учета ОС

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// СПИСАНИЕ ОС НА РАСХОДЫ (НУ) ПРИ ПРИНЯТИИ К УЧЕТУ

Функция ПодготовитьТаблицуСписаниеНаРасходыНУ(ТаблицаПервоначальныеСведенияОС, ТаблицаРеквизиты, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыСписаниеНаРасходыНУ(ТаблицаПервоначальныеСведенияОС, ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);

	Если НЕ ОтражатьВНалоговомУчете
			ИЛИ Реквизиты.ПорядокВключенияСтоимостиВСоставРасходов <> Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету Тогда
		ТаблицаДляСписания = Параметры.ТаблицаПервоначальныеСведенияОС.СкопироватьКолонки();
	Иначе
		ТаблицаДляСписания = Параметры.ТаблицаПервоначальныеСведенияОС;
	КонецЕсли;

	ТаблицаДляСписания.Колонки.ОсновноеСредство.Имя = "ОбъектУчета";
	ТаблицаДляСписания.Колонки.Добавить("НаправлениеАмортизации", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТаблицаДляСписания.ЗаполнитьЗначения(Реквизиты.СпособыОтраженияРасходовПоАмортизации, "НаправлениеАмортизации");
	ТаблицаДляСписания.Колонки.Добавить("СчетНачисленияАмортизации");
	ТаблицаДляСписания.ЗаполнитьЗначения(Реквизиты.СчетУчета, "СчетНачисленияАмортизации");
	ТаблицаДляСписания.Колонки.Добавить("СуммаАмортизацииБУ", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаДляСписания.Колонки.Добавить("СуммаАмортизацииПР", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаДляСписания.Колонки.Добавить("СуммаАмортизацииВР", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаДляСписания.Колонки.СуммаНУ.Имя = "СуммаАмортизацииНУ";
	ТаблицаДЛяСписания.Колонки.Добавить("Подразделение");
	ТаблицаДляСписания.ЗаполнитьЗначения(Реквизиты.Подразделение, "Подразделение");
	ТаблицаДляСписания.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(5, 0));

	// Распределение стоимости по направлениям.
	ТаблицаЗатратПоАмортизации = УправлениеВнеоборотнымиАктивамиПереопределяемый.ПодготовитьТаблицуРаспределениеАмортизацииПоНаправлениямРегл(ТаблицаДляСписания, Параметры.Реквизиты, Отказ);

	// Определение ПР и ВР.
	Для каждого СтрокаОС Из ТаблицаЗатратПоАмортизации Цикл
		Если Реквизиты.ПорядокПогашенияСтоимостиБУ <> Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации 
				ИЛИ НЕ НалоговыйУчет.ЭтоРасходНаАмортизацию(СтрокаОС.Субконто1, СтрокаОС.Субконто2, СтрокаОС.Субконто3) Тогда
			СтрокаОС.СуммаПР = СтрокаОС.СуммаПР - СтрокаОС.СуммаНУ;
		Иначе
			СтрокаОС.СуммаВР = СтрокаОС.СуммаВР - СтрокаОС.СуммаНУ;
		КонецЕсли;
	КонецЦикла;

	Возврат ТаблицаЗатратПоАмортизации;

КонецФункции

Функция ПодготовитьПараметрыСписаниеНаРасходыНУ(ТаблицаПервоначальныеСведенияОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаПервоначальныеСведенияОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство," // <СправочникСсылка.ОсновныеСредства>
	+ "СуммаНУ";          // <Число, 15, 2> - сумма, относимая на расходы (НУ)

	Параметры.Вставить("ТаблицаПервоначальныеСведенияОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаПервоначальныеСведенияОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                                   // <Дата>
	+ "Организация,"                              // <СправочникСсылка.Организации>
	+ "Подразделение,"                            // <Ссылка на справочник подразделений>
	+ "ПорядокВключенияСтоимостиВСоставРасходов," // <ПеречислениеСсылка.ПорядокВключенияСтоимостиОСВСоставРасходовНУ> -
		// порядок включения стоимости ОС в состав расходов (НУ)
	+ "ПорядокПогашенияСтоимостиБУ,"              // <ПеречислениеСсылка.ПорядокПогашенияСтоимостиОС> - порядок погашения
		// стоимости ОС
	+ "СпособыОтраженияРасходовПоАмортизации,"    // <СправочникСсылка.СпособыОтраженияРасходовПоАмортизации> - способ
		// отрадения расходов по списанию ОС (НУ)
	+ "Регистратор,"                              // <ДокументСсылка.*>
	+ "СчетУчета,"                                // <ПланСчетовСсылка.Хозрасчетный> - счет на котором формируется
		// стоимость ОС
	+ "Содержание,"                              // <Строка, 150>
	+ "ИмяСписка";                               // <Строка>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ПРОВЕРКИ ДАННЫХ ОС НА КОРРЕКТНОСТЬ

Процедура ПроверитьСоответствиеОСОрганизации(ТаблицаОС, ТаблицаРеквизиты, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыСоответствиеОСОрганизации(ТаблицаОС, ТаблицаРеквизиты);

	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ТаблицаОС", Параметры.ТаблицаОС);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаОС.ОсновноеСредство КАК Справочник.ОсновныеСредства) КАК ОсновноеСредство
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	&ТаблицаОС КАК ТаблицаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПервоначальныеСведенияОСБУ.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ ПервоначальныеСведенияОСБУ
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						ТаблицаОС.ОсновноеСредство
	|					ИЗ
	|						ТаблицаОС КАК ТаблицаОС)) КАК ПервоначальныеСведенияОСБУ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки,
	|	ВЫБОР
	|		КОГДА ПервоначальныеСведенияОСБУ.ОсновноеСредство ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОтражалосьВБухгалтерскомУчете,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОС.ОсновноеСредство.Код КАК КодОС
	|ИЗ
	|	ТаблицаОС КАК ТаблицаОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПервоначальныеСведенияОСБУ КАК ПервоначальныеСведенияОСБУ
	|		ПО ТаблицаОС.ОсновноеСредство = ПервоначальныеСведенияОСБУ.ОсновноеСредство
	|ГДЕ
	|	ПервоначальныеСведенияОСБУ.ОсновноеСредство ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки";

	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();

		ШаблонСообщенияБУ = НСтр("ru = 'Основное средство <%1 (%2)> не отражалось в бухгалтерском учете по организации <%3>'");

		Пока Выборка.Следующий() Цикл
			
			Если НЕ Выборка.ОтражалосьВБухгалтерскомУчете Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщенияБУ,
					Выборка.ОсновноеСредство, Выборка.КодОС, Реквизиты.Организация);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор, Реквизиты.ИмяСписка + "["
					+ Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].ОсновноеСредство", "Объект", Отказ);
			КонецЕсли;
				
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыСоответствиеОСОрганизации(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"      // <Число, 5, 0>
	+ "ОсновноеСредство"; // <СправочникСсылка.ОсновныеСредства>

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"      // <Дата>
	+ "ИмяСписка,"   // <Строка, 0>
	+ "Организация," // <СправочникСсылка.Организации>
	+ "Регистратор"; // <ДокументСсылка.*>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура ПроверитьСостояниеОСПринятоКУчету(ТаблицаОС, ТаблицаРеквизиты, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыСостояниеОСПринятоКУчету(ТаблицаОС, ТаблицаРеквизиты);

	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", Реквизиты.Период);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ТаблицаОС", Параметры.ТаблицаОС);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаОС.ОсновноеСредство КАК Справочник.ОсновныеСредства) КАК ОсновноеСредство
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	&ТаблицаОС КАК ТаблицаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
	|	СостоянияОСОрганизаций.ДатаСостояния,
	|	СостоянияОСОрганизаций.Регистратор,
	|	СостоянияОСОрганизаций.Состояние,
	|	СостоянияОСОрганизаций.Организация
	|ПОМЕСТИТЬ СостоянияОС
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
	|		ПО СостоянияОСОрганизаций.ОсновноеСредство = ТаблицаОС.ОсновноеСредство
	|			И (СостоянияОСОрганизаций.ДатаСостояния < &Дата)
	|			И (СостоянияОСОрганизаций.Организация = &Организация)
	|			И (СостоянияОСОрганизаций.Активность = ИСТИНА)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияОС.ОсновноеСредство КАК ОсновноеСредство,
	|	МАКСИМУМ(СостоянияОС.ДатаСостояния) КАК ДатаСостояния
	|ПОМЕСТИТЬ ДатыПоследнихСостоянийОС
	|ИЗ
	|	СостоянияОС КАК СостоянияОС
	|
	|СГРУППИРОВАТЬ ПО
	|	СостоянияОС.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияОС.ОсновноеСредство КАК ОсновноеСредство,
	|	СостоянияОС.ДатаСостояния,
	|	СостоянияОС.Регистратор,
	|	СостоянияОС.Организация,
	|	СостоянияОС.Состояние
	|ПОМЕСТИТЬ ПоследниеСостоянияОС
	|ИЗ
	|	ДатыПоследнихСостоянийОС КАК ДатыПоследнихСостоянийОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СостоянияОС КАК СостоянияОС
	|		ПО ДатыПоследнихСостоянийОС.ОсновноеСредство = СостоянияОС.ОсновноеСредство
	|			И ДатыПоследнихСостоянийОС.ДатаСостояния = СостоянияОС.ДатаСостояния
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОС.ОсновноеСредство,
	|	ТаблицаОС.ОсновноеСредство.Код КАК КодОС,
	|	ТаблицаОС.НомерСтроки КАК НомерСтроки,
	|	ПоследниеСостоянияОС.ДатаСостояния,
	|	ПоследниеСостоянияОС.Регистратор,
	|	ПоследниеСостоянияОС.Организация,
	|	ПоследниеСостоянияОС.Состояние
	|ИЗ
	|	ТаблицаОС КАК ТаблицаОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоследниеСостоянияОС КАК ПоследниеСостоянияОС
	|		ПО ТаблицаОС.ОсновноеСредство = ПоследниеСостоянияОС.ОсновноеСредство
	|ГДЕ
	|	(ПоследниеСостоянияОС.Состояние ЕСТЬ NULL
	|			ИЛИ ПоследниеСостоянияОС.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();

		Пока Выборка.Следующий() Цикл
			Если Выборка.Состояние = Null Тогда
				ШаблонСообщения = НСтр("ru = 'По состоянию на %4.
					|Основное средство <%1 (%2)> не принято к учету в организации <%3>.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Выборка.ОсновноеСредство,
					Выборка.КодОС, Реквизиты.Организация, Формат(Реквизиты.Период, "ДФ=dd.MM.yyyy"));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор, Реквизиты.ИмяСписка + "["
					+ Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].ОсновноеСредство", "Объект", Отказ);
			Иначе
				ШаблонСообщения = НСтр("ru = 'Основное средство <%1 (%2)> снято с учета в организации <%3>
					|документом <%4>. Дата состояния: %5'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Выборка.ОсновноеСредство,
					Выборка.КодОС, Реквизиты.Организация, Выборка.Регистратор, Формат(Выборка.ДатаСостояния, "ДФ=dd.MM.yyyy"));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор, Реквизиты.ИмяСписка + "["
					+ Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].ОсновноеСредство", "Объект", Отказ);
			КонецЕсли;
		КонецЦикла;

		Возврат;
	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыСостояниеОСПринятоКУчету(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"      // <Число, 5, 0>
	+ "ОсновноеСредство"; // <СправочникСсылка.ОсновныеСредства>

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"      // <Дата>
	+ "ИмяСписка,"   // <Строка, 0>
	+ "Организация," // <ДокументСсылка.*>
	+ "Регистратор"; // <СправочникСсылка.Организации>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура ПроверитьСоответствиеМестонахожденияОС(ТаблицаОС, ТаблицаРеквизиты, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыСоответствиеМестонахожденияОС(ТаблицаОС, ТаблицаРеквизиты);

	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ТаблицаОС", Параметры.ТаблицаОС);
	Запрос.УстановитьПараметр("Подразделение", Реквизиты.Подразделение);
	Запрос.УстановитьПараметр("МОЛ", Реквизиты.МОЛ);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаОС.ОсновноеСредство КАК Справочник.ОсновныеСредства) КАК ОсновноеСредство
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	&ТаблицаОС КАК ТаблицаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МестонахождениеОСБУ.ОсновноеСредство КАК ОсновноеСредство,
	|	МестонахождениеОСБУ.МОЛ,
	|	МестонахождениеОСБУ.Местонахождение КАК Подразделение
	|ПОМЕСТИТЬ МестонахождениеОСБУ
	|ИЗ
	|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						ТаблицаОС.ОсновноеСредство
	|					ИЗ
	|						ТаблицаОС КАК ТаблицаОС)) КАК МестонахождениеОСБУ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОС.ОсновноеСредство.Код КАК КодОС,
	|	МестонахождениеОСБУ.МОЛ,
	|	МестонахождениеОСБУ.Подразделение
	|ИЗ
	|	ТаблицаОС КАК ТаблицаОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ МестонахождениеОСБУ КАК МестонахождениеОСБУ
	|		ПО ТаблицаОС.ОсновноеСредство = МестонахождениеОСБУ.ОсновноеСредство
	|ГДЕ
	|	(МестонахождениеОСБУ.ОсновноеСредство ЕСТЬ NULL
	|			ИЛИ МестонахождениеОСБУ.Подразделение <> &Подразделение
	|			ИЛИ &МОЛ <> НЕОПРЕДЕЛЕНО
	|				И МестонахождениеОСБУ.МОЛ <> &МОЛ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки";

	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();

		ШаблонСообщенияПодразделение = НСтр("ru = 'Основное средство <%1 (%2)> не отражалось в учете в местонахождении <%3>'");
		ШаблонСообщенияМОЛ = НСтр("ru = 'Основное средство <%1 (%2)> не отражалось в учете за МОЛ <%3>'");

		Пока Выборка.Следующий() Цикл
			Если Выборка.Подразделение <> Реквизиты.Подразделение Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщенияПодразделение,
					Выборка.ОсновноеСредство, Выборка.КодОС, Реквизиты.Подразделение);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор, Реквизиты.ИмяСписка + "["
					+ Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].ОсновноеСредство", "Объект", Отказ);
			КонецЕсли;

			Если Реквизиты.МОЛ <> Неопределено И Выборка.МОЛ <> Реквизиты.МОЛ Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщенияМОЛ,
					Выборка.ОсновноеСредство, Выборка.КодОС, Реквизиты.МОЛ);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор, Реквизиты.ИмяСписка + "["
					+ Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].ОсновноеСредство", "Объект", Отказ);
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыСоответствиеМестонахожденияОС(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"      // <Число, 5, 0>
	+ "ОсновноеСредство"; // <СправочникСсылка.ОсновныеСредства>

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"        // <Дата>
	+ "ИмяСписка,"     // <Строка, 0>
	+ "МОЛ,"           // <СправочникСсылка.ФизическиеЛица> - МОЛ, за которым закреплено ОС
	+ "Организация,"   // <СправочникСсылка.Организации>
	+ "Подразделение," // <Ссылка на справочник подразделений> - подразделение в котором находится ОС
	+ "Регистратор";   // <ДокументСсылка.*>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура ПроверитьЗаполнениеСчетаУчетаОС(ТаблицаОС, ТаблицаРеквизиты, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыЗаполнениеСчетаУчетаОС(ТаблицаОС, ТаблицаРеквизиты);

	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ТаблицаОС", Параметры.ТаблицаОС);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаОС.ОсновноеСредство КАК Справочник.ОсновныеСредства) КАК ОсновноеСредство
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	&ТаблицаОС КАК ТаблицаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаУчетаОС.ОсновноеСредство,
	|	СчетаУчетаОС.СчетУчета КАК СчетУчета
	|ПОМЕСТИТЬ СчетаУчетаОС
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						ТаблицаОС.ОсновноеСредство
	|					ИЗ
	|						ТаблицаОС КАК ТаблицаОС)) КАК СчетаУчетаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОС.ОсновноеСредство.Код КАК КодОС,
	|	СчетаУчетаОС.СчетУчета
	|ИЗ
	|	ТаблицаОС
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|	СчетаУчетаОС
	|	ПО
	|		ТаблицаОС.ОсновноеСредство = СчетаУчетаОС.ОсновноеСредство
	|ГДЕ
	|	(СчетаУчетаОС.ОсновноеСредство ЕСТЬ NULL
	|			ИЛИ СчетаУчетаОС.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки";

	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();

		ШаблонСообщения = НСтр("ru = 'Для основного средства <%1 (%2)> не указан счет учета.'");

		Пока Выборка.Следующий() Цикл
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				Выборка.ОсновноеСредство, Выборка.КодОС);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор, Реквизиты.ИмяСписка + "["
				+ Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].ОсновноеСредство", "Объект", Отказ);
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыЗаполнениеСчетаУчетаОС(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"      // <Число, 5, 0>
	+ "ОсновноеСредство"; // <СправочникСсылка.ОсновныеСредства>

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"      // <Дата>
	+ "ИмяСписка,"   // <Строка, 0>
	+ "Организация," // <СправочникСсылка.Организации>
	+ "Регистратор"; // <ДокументСсылка.*>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// РЕГИСТРАЦИЯ СОБЫТИЙ ОС

Процедура СформироватьДвиженияРегистрацияСобытияОС(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыРегистрацияСобытияОС(ТаблицаОС, ТаблицаРеквизиты);

	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	НазваниеДокумента = Реквизиты.Регистратор.Метаданные().Представление();

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаОС Цикл
		Движение = Движения.СобытияОСОрганизаций.Добавить();
		Движение.Период            = Реквизиты.Период;
		Движение.ОсновноеСредство  = СтрокаТаблицы.ОсновноеСредство;
		Движение.Организация       = Реквизиты.Организация;
		Движение.Событие           = Реквизиты.СобытиеОС;
		Движение.НазваниеДокумента = НазваниеДокумента;
		Движение.НомерДокумента    = Реквизиты.Номер;
		Движение.СуммаЗатратБУ     = СтрокаТаблицы.СуммаЗатратБУ;
		Движение.СуммаЗатратНУ     = СтрокаТаблицы.СуммаЗатратНУ;
		Движение.СуммаЗатратУСН    = СтрокаТаблицы.СуммаЗатратУСН;
	КонецЦикла;

	Движения.СобытияОСОрганизаций.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыРегистрацияСобытияОС(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство," // <СправочникСсылка.ОсновныеСредства>
	+ "СуммаЗатратБУ,"    // <Число, 15, 2> - сумма затрат по бухгалтерскому учету при модернизации ОС
	+ "СуммаЗатратНУ,"    // <Число, 15, 2> - сумма затрат по налоговому учету при модернизации ОС
	+ "СуммаЗатратУСН";   // <Число, 15, 2> - сумма затрат по налоговому учету (УСН) при модернизации ОС

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"             // <Дата>
	+ "Номер,"              // <Строка, 0> - номер документа, отразившего событие
	+ "Организация,"        // <СправочникСсылка.Организации>
	+ "СобытиеОС,"          // <СправочникСсылка.СобытияОС> - событие с ОС
	+ "Регистратор";        // <ДокументСсылка.*>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// РЕГИСТРАЦИЯ СОСТОЯНИЯ ОС

Процедура ПроверитьВозможностьИзмененияСостоянияОС(ТаблицаОС, ТаблицаРеквизиты, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыВозможностьИзмененияСостоянияОС(ТаблицаОС, ТаблицаРеквизиты);

	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	&ТаблицаОС КАК ТаблицаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияОСОрганизаций.ОсновноеСредство,
	|	СостоянияОСОрганизаций.ОсновноеСредство.Код КАК КодОС,
	|	СостоянияОСОрганизаций.ДатаСостояния,
	|	СостоянияОСОрганизаций.Регистратор,
	|	ТаблицаОС.НомерСтроки
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
	|		ПО СостоянияОСОрганизаций.ОсновноеСредство = ТаблицаОС.ОсновноеСредство
	|ГДЕ
	|	СостоянияОСОрганизаций.Организация = &Организация
	|	И СостоянияОСОрганизаций.Регистратор <> &Документ
	|	И СостоянияОСОрганизаций.Состояние = &Состояние
	|	И СостоянияОСОрганизаций.Активность = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки";

	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация );
	Запрос.УстановитьПараметр("Состояние", Реквизиты.СостояниеОС);
	Запрос.УстановитьПараметр("Документ", Реквизиты.Регистратор);
	Запрос.УстановитьПараметр("ТаблицаОС", Параметры.ТаблицаОС);

	Если ТранзакцияАктивна() И ОбщегоНазначенияБПВызовСервераПовтИсп.ИспользоватьУправляемыеБлокировки() Тогда

		ПараметрыБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы, ИсточникДанных",
			"РегистрСведений", "СостоянияОСОрганизаций", Параметры.ТаблицаОС);

		ЗначенияБлокировки = Новый Структура;
		ЗначенияБлокировки.Вставить("Организация", Реквизиты.Организация);

		ОписанияИсточника = Новый Структура;
		ОписанияИсточника.Вставить("ОсновноеСредство", "ОсновноеСредство");

		ОбщегоНазначенияБПВызовСервера.УстановитьУправляемуюБлокировку(ПараметрыБлокировки, ЗначенияБлокировки, ОписанияИсточника);

	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();

		ШаблонСообщения = НСтр("ru = 'Для основного средства <%1 (%2)> в организации <%3> уже зафиксировано состояние <%4>
			|документом <%5>. Дата состояния: %6'");

		Пока Выборка.Следующий() Цикл
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Выборка.ОсновноеСредство,
				Выборка.КодОС, Реквизиты.Организация, Реквизиты.СостояниеОС, Выборка.Регистратор, Формат(Выборка.ДатаСостояния, "ДФ=dd.MM.yyyy"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор, Реквизиты.ИмяСписка + "["
				+ Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].ОсновноеСредство", "Объект", Отказ);
		КонецЦикла;

		Возврат;
	КонецЕсли;

	Если Реквизиты.СостояниеОС = Перечисления.СостоянияОС.ПринятоКУчету Тогда
		Запрос.УстановитьПараметр("Дата", Реквизиты.Период);

		Запрос.Текст =
		"ВЫБРАТЬ
		|	СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
		|	СостоянияОСОрганизаций.ДатаСостояния,
		|	ТаблицаОС.НомерСтроки,
		|	СостоянияОСОрганизаций.Регистратор,
		|	СостоянияОСОрганизаций.Состояние,
		|	СостоянияОСОрганизаций.Организация
		|ПОМЕСТИТЬ СостоянияОС
		|ИЗ
		|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
		|		ПО СостоянияОСОрганизаций.ОсновноеСредство = ТаблицаОС.ОсновноеСредство
		|			И (СостоянияОСОрганизаций.ДатаСостояния < &Дата)
		|			И (СостоянияОСОрганизаций.Активность = ИСТИНА)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СостоянияОС.ОсновноеСредство КАК ОсновноеСредство,
		|	МАКСИМУМ(СостоянияОС.ДатаСостояния) КАК ДатаСостояния
		|ПОМЕСТИТЬ ДатыПоследнихСостоянийОС
		|ИЗ
		|	СостоянияОС КАК СостоянияОС
		|
		|СГРУППИРОВАТЬ ПО
		|	СостоянияОС.ОсновноеСредство
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СостоянияОС.ОсновноеСредство,
		|	СостоянияОС.ОсновноеСредство.Код КАК КодОС,
		|	СостоянияОС.ДатаСостояния,
		|	СостоянияОС.НомерСтроки КАК НомерСтроки,
		|	СостоянияОС.Регистратор,
		|	СостоянияОС.Организация
		|ИЗ
		|	ДатыПоследнихСостоянийОС КАК ДатыПоследнихСостоянийОС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СостоянияОС КАК СостоянияОС
		|		ПО ДатыПоследнихСостоянийОС.ОсновноеСредство = СостоянияОС.ОсновноеСредство
		|			И ДатыПоследнихСостоянийОС.ДатаСостояния = СостоянияОС.ДатаСостояния
		|ГДЕ
		|	СостоянияОС.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";

		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();

			ШаблонСообщения = НСтр("ru = 'Основное средство <%1 (%2)> принято к учету в организации <%3>
				|документом <%4>. Дата состояния: %5'");

			Пока Выборка.Следующий() Цикл
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Выборка.ОсновноеСредство,
					Выборка.КодОС, Выборка.Организация, Выборка.Регистратор, Формат(Выборка.ДатаСостояния, "ДФ=dd.MM.yyyy"));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор, Реквизиты.ИмяСписка + "["
					+ Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].ОсновноеСредство", "Объект", Отказ);
			КонецЦикла;

			Возврат;
		КонецЕсли;
	ИначеЕсли Реквизиты.СостояниеОС = Перечисления.СостоянияОС.СнятоСУчета Тогда
		ПроверитьСостояниеОСПринятоКУчету(Параметры.ТаблицаОС, Параметры.Реквизиты, Отказ);
	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыВозможностьИзмененияСостоянияОС(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"      // <Число, 5, 0>
	+ "ОсновноеСредство"; // <СправочникСсылка.ОсновныеСредства>

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"      // <Дата>
	+ "ИмяСписка,"   // <Строка, 0>
	+ "Организация," // <СправочникСсылка.Организации>
	+ "СостояниеОС," // <ПеречислениеСсылка.СостоянияОС> - состояние ОС, которое требуется установить
	+ "Регистратор"; // <ДокументСсылка.*>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияИзменениеСостоянияОС(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыИзменениеСостоянияОС(ТаблицаОС, ТаблицаРеквизиты);

	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаОС Цикл
		Движение = Движения.СостоянияОСОрганизаций.Добавить();
		Движение.Период           = Реквизиты.Период;
		Движение.ДатаСостояния    = Реквизиты.Период;
		Движение.ОсновноеСредство = СтрокаТаблицы.ОсновноеСредство;
		Движение.Организация      = Реквизиты.Организация;
		Движение.Состояние        = Реквизиты.СостояниеОС;
	КонецЦикла;

	Движения.СостоянияОСОрганизаций.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыИзменениеСостоянияОС(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство"; // <СправочникСсылка.ОсновныеСредства>

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"           // <Дата>
	+ "Организация,"      // <СправочникСсылка.Организации>
	+ "СостояниеОС";      // <ПеречислениеСсылка.СостоянияОС> - состояние ОС, которое требуется установить

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ПЕРВОНАЧАЛЬНЫЕ СВЕДЕНИЯ ОС

Функция ПодготовитьТаблицуПервоначальныеСведенияОС(ТаблицаОС, ТаблицаСписанныеТовары, ТаблицаРеквизиты, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыПервоначальныеСведенияОС(ТаблицаОС, ТаблицаСписанныеТовары, ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	ПервоначальныеСведенияОС = Новый ТаблицаЗначений;
	ПервоначальныеСведенияОС.Колонки.Добавить("НомерСтроки");
	ПервоначальныеСведенияОС.Колонки.Добавить("ОсновноеСредство");
	ПервоначальныеСведенияОС.Колонки.Добавить("ИнвентарныйНомер",
		ОбщегоНазначения.ОписаниеТипаСтрока(9));
	ПервоначальныеСведенияОС.Колонки.Добавить("СуммаБУ", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ПервоначальныеСведенияОС.Колонки.Добавить("СуммаНУ", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ПервоначальныеСведенияОС.Колонки.Добавить("СуммаПР", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ПервоначальныеСведенияОС.Колонки.Добавить("СуммаВР", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ПервоначальныеСведенияОС.Колонки.Добавить("СуммаУСН", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));

	Если Реквизиты.ИспользоватьСуммыСписания Тогда
		Для каждого СтрокаСписания Из Параметры.ТаблицаСписанныеТовары Цикл
			СтрокаПервоначальнойСтоимости = ПервоначальныеСведенияОС.Добавить();
			СтрокаПервоначальнойСтоимости.СуммаБУ  = СтрокаСписания.СуммаСписания;
			СтрокаПервоначальнойСтоимости.СуммаНУ  = СтрокаСписания.СуммаСписанияНУ;
			СтрокаПервоначальнойСтоимости.СуммаПР  = СтрокаСписания.СуммаСписанияПР;
			СтрокаПервоначальнойСтоимости.СуммаВР  = СтрокаСписания.СуммаСписанияВР;
			СтрокаПервоначальнойСтоимости.СуммаУСН = Реквизиты.СуммаУСН;//для УСН первоначальная стоимость всегда задается в документе

			ЗаполнитьЗначенияСвойств(СтрокаПервоначальнойСтоимости, ТаблицаОС[СтрокаСписания.НомерСтроки - 1]);
		КонецЦикла;
	Иначе
		Для каждого СтрокаОС Из Параметры.ТаблицаОС Цикл
			СтрокаПервоначальнойСтоимости = ПервоначальныеСведенияОС.Добавить();
			СтрокаПервоначальнойСтоимости.СуммаБУ  = Реквизиты.СуммаБУ;
			СтрокаПервоначальнойСтоимости.СуммаНУ  = Реквизиты.СуммаНУ;
			СтрокаПервоначальнойСтоимости.СуммаПР  = Реквизиты.СуммаПР;
			СтрокаПервоначальнойСтоимости.СуммаВР  = Реквизиты.СуммаВР;
			СтрокаПервоначальнойСтоимости.СуммаУСН = Реквизиты.СуммаУСН;

			ЗаполнитьЗначенияСвойств(СтрокаПервоначальнойСтоимости, СтрокаОС);
		КонецЦикла;
	КонецЕсли;

	Возврат ПервоначальныеСведенияОС;

КонецФункции

Функция ПодготовитьПараметрыПервоначальныеСведенияОС(ТаблицаОС, ТаблицаСписанныеТовары, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "ИнвентарныйНомер," // <Строка, 9> - инвентарный номер, под которым ОС принимается к учету
	+ "НомерСтроки,"      // <Число, 5, 0>
	+ "ОсновноеСредство"; // <СправочникСсылка.ОсновныеСредства>

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.ТаблицаСписанныеТовары

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"      // <Число, 5, 0> - номер строки табличной части документа
	+ "СуммаСписания,"    // <Число, 15, 2> - стоимость списанной партии по данным бухгалтерского учета
	+ "СуммаСписанияНУ,"  // <Число, 15, 2> - стоимость списанной партии по данным налогового учета
	+ "СуммаСписанияПР,"  // <Число, 15, 2> - постоянные разницы в стоимости списанной партии (ПБУ 18/02)
	+ "СуммаСписанияВР";  // <Число, 15, 2> - временные разницы в стоимости списанной партии (ПБУ 18/02)

	Параметры.Вставить("ТаблицаСписанныеТовары",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаСписанныеТовары, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "ИспользоватьСуммыСписания,"    // <Булево> - использовать стоимость списанных партий для определения стоимости ОС
	+ "СуммаБУ,"                      // <Число, 15, 2> - стоимость ОС по данным бухгалтерского учета
	+ "СуммаНУ,"                      // <Число, 15, 2> - стоимость ОС по данным налогового учета
	+ "СуммаПР,"                      // <Число, 15, 2> - постоянные разницы в стоимости ОС (ПБУ 18/02)
	+ "СуммаВР,"                      // <Число, 15, 2> - временные разницы в стоимости ОС (ПБУ 18/02)
	+ "СуммаУСН";                     // <Число, 15, 2> - стоимость ОС по данным УСН

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияРегистрацияПервоначальныхСведенийОСБУ(ТаблицаПервоначальныеСведенияОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыРегистрацияПервоначальныхСведенийОСБУ(ТаблицаПервоначальныеСведенияОС, ТаблицаРеквизиты);

	Если Параметры.ТаблицаПервоначальныеСведенияОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаПервоначальныеСведенияОС Цикл
		Движение = Движения.ПервоначальныеСведенияОСБухгалтерскийУчет.Добавить();
		Движение.Период                      = Реквизиты.Период;
		Движение.ОсновноеСредство            = СтрокаТаблицы.ОсновноеСредство;
		Движение.Организация                 = Реквизиты.Организация;
		Движение.ПервоначальнаяСтоимость     = СтрокаТаблицы.СуммаБУ;
		Движение.ПорядокПогашенияСтоимости   = Реквизиты.ПорядокПогашенияСтоимости;
		Движение.СпособНачисленияАмортизации = Реквизиты.СпособНачисленияАмортизации;
		Движение.СпособПоступления           = Реквизиты.СпособПоступления;
		Движение.ИнвентарныйНомер            = СтрокаТаблицы.ИнвентарныйНомер;
		Движение.ПараметрВыработки           = Реквизиты.ПараметрВыработки;
	КонецЦикла;

	Движения.ПервоначальныеСведенияОСБухгалтерскийУчет.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыРегистрацияПервоначальныхСведенийОСБУ(ТаблицаПервоначальныеСведенияОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаПервоначальныеСведенияОС

	СписокОбязательныхКолонок = ""
	+ "ИнвентарныйНомер," // <Строка, 9> - инвентарный номер, под которым ОС принимается к учету
	+ "ОсновноеСредство," // <СправочникСсылка.ОсновныеСредства>
	+ "СуммаБУ";          // <Число, 15, 2> - стоимость ОС по данным бухгалтерского учета

	Параметры.Вставить("ТаблицаПервоначальныеСведенияОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаПервоначальныеСведенияОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                      // <Дата>
	+ "Организация,"                 // <СправочникСсылка.Организации>
	+ "ПараметрВыработки,"           // <СправочникСсылка.ПараметрыВыработкиОС> - парамтр для определения выработки ОС
		// за месяц
	+ "ПорядокПогашенияСтоимости,"   // <ПеречислениеСсылка.ПорядокПогашенияСтоимостиОС> - порядок погашения стоимости ОС
		// по бухгалтерскому учету
	+ "СпособНачисленияАмортизации," // <ПеречислениеСсылка.СпособыНачисленияАмортизацииОС> - способ начисления
		// амортизации ОС по бухгалтерскому учету
	+ "СпособПоступления";           // <ПеречислениеСсылка.СпособыПоступленияАктивов> - способ поступления ОС

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьТаблицуПервоначальныеСведенияОСНУ(ТаблицаПервоначальныеСведенияОС, ТаблицаРеквизиты, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыПервоначальныеСведенияОСНУ(ТаблицаПервоначальныеСведенияОС, ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);

	Если ОтражатьВНалоговомУчете Тогда
		ТаблицаПервоначальныеСведенияОСНУ = Параметры.ТаблицаПервоначальныеСведенияОС.Скопировать();
	Иначе
		ТаблицаПервоначальныеСведенияОСНУ = Параметры.ТаблицаПервоначальныеСведенияОС.СкопироватьКолонки();
	КонецЕсли;

	Возврат ТаблицаПервоначальныеСведенияОСНУ;

КонецФункции

Функция ПодготовитьПараметрыПервоначальныеСведенияОСНУ(ТаблицаПервоначальныеСведенияОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаПервоначальныеСведенияОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство," // <СправочникСсылка.ОсновныеСредства>
	+ "СуммаНУ,"          // <Число, 0, 0> - стоимость ОС по данным налогового учета
	+ "СуммаПР";          // <Число, 0, 0> - стоимость ОС по данным налогового учета

	Параметры.Вставить("ТаблицаПервоначальныеСведенияОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаПервоначальныеСведенияОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                                   // <Дата>
	+ "Организация,"                              // <СправочникСсылка.Организации>
	+ "ПорядокВключенияСтоимостиВСоставРасходов," // <ПеречислениеСсылка.ПорядокВключенияСтоимостиОСВСоставРасходовНУ> -
	                                              // порядок включения стоимости ОС в состав расходов по налоговому учету
	+ "СрокПолезногоИспользования";               // <Число, 4, 0> - срок полезного использования для целей
	                                              // начисления амортизации по налоговому учету

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияРегистрацияПервоначальныхСведенийОСНУ(ТаблицаПервоначальныеСведенияОСНУ, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыРегистрацияПервоначальныхСведенийОСНУ(ТаблицаПервоначальныеСведенияОСНУ, ТаблицаРеквизиты);

	Если Параметры.ТаблицаПервоначальныеСведенияОСНУ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);

	Если НЕ ОтражатьВНалоговомУчете Тогда
		Возврат;
	КонецЕсли;

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаПервоначальныеСведенияОСНУ Цикл
		Движение = Движения.ПервоначальныеСведенияОСНалоговыйУчет.Добавить();
		Движение.Период                                   = Реквизиты.Период;
		Движение.ОсновноеСредство                         = СтрокаТаблицы.ОсновноеСредство;
		Движение.Организация                              = Реквизиты.Организация;
		Движение.ПорядокВключенияСтоимостиВСоставРасходов = Реквизиты.ПорядокВключенияСтоимостиВСоставРасходов;
		Движение.ПервоначальнаяСтоимостьНУ                = СтрокаТаблицы.СуммаНУ;
	КонецЦикла;

	Движения.ПервоначальныеСведенияОСНалоговыйУчет.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыРегистрацияПервоначальныхСведенийОСНУ(ТаблицаПервоначальныеСведенияОСНУ, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаПервоначальныеСведенияОСНУ

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство," // <СправочникСсылка.ОсновныеСредства>
	+ "СуммаНУ";          // <Число, 15, 2> - первоначальная стоимость ОС по данным налогового учета

	Параметры.Вставить("ТаблицаПервоначальныеСведенияОСНУ",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаПервоначальныеСведенияОСНУ, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                                   // <Дата>
	+ "Организация,"                              // <СправочникСсылка.Организации>
	+ "ПорядокВключенияСтоимостиВСоставРасходов," // <ПеречислениеСсылка.ПорядокВключенияСтоимостиОСВСоставРасходовНУ> -
		// порядок включения стоимости ОС в состав расходов по налоговому учету
	+ "СрокПолезногоИспользования";               // <Число, 4, 0> - срок полезного использования ОС для целей начисления
		// амортизации по налоговому учету

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьТаблицуПервоначальныеСведенияОСУСН(ТаблицаПервоначальныеСведенияОС, ТаблицаРеквизиты, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыПервоначальныеСведенияОСУСН(ТаблицаПервоначальныеСведенияОС, ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	ОтражатьВНалоговомУчетеУСН = УчетнаяПолитика.ПрименяетсяУСН(Реквизиты.Организация, Реквизиты.Период);
	
	Если ОтражатьВНалоговомУчетеУСН Тогда
		ТаблицаПервоначальныеСведенияОСУСН = Параметры.ТаблицаПервоначальныеСведенияОСУСН.Скопировать();
	Иначе
		ТаблицаПервоначальныеСведенияОСУСН = Параметры.ТаблицаПервоначальныеСведенияОСУСН.СкопироватьКолонки();
	КонецЕсли;

	Возврат ТаблицаПервоначальныеСведенияОСУСН;

КонецФункции

Функция ПодготовитьПараметрыПервоначальныеСведенияОСУСН(ТаблицаПервоначальныеСведенияОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаПервоначальныеСведенияОСУСН

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство," // <СправочникСсылка.ОсновныеСредства>
	+ "СуммаУСН";         // <Число, 0, 0> - стоимость ОС по данным УСН

	Параметры.Вставить("ТаблицаПервоначальныеСведенияОСУСН",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаПервоначальныеСведенияОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                                      // <Дата>
	+ "Организация,"                                 // <СправочникСсылка.Организации>
	+ "ПорядокВключенияСтоимостиВСоставРасходовУСН," // <ПеречислениеСсылка.ПорядокВключенияСтоимостиОСиНМАВСоставРасходовУСН> -
	                                                 // порядок включения стоимости ОС в состав расходов по УСН
	+ "ДатаПриобретения,"							 // <Дата> Дата приобретения ОС					 
	+ "СрокПолезногоИспользованияУСН";               // <Число, 4, 0> - срок полезного использования для целей
	                                                 // начисления амортизации по УСН

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияРегистрацияПервоначальныхСведенийОСУСН(ТаблицаПервоначальныеСведенияОСУСН, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыРегистрацияПервоначальныхСведенийОСУСН(ТаблицаПервоначальныеСведенияОСУСН, ТаблицаРеквизиты);

	Если Параметры.ТаблицаПервоначальныеСведенияОСУСН.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	ОтражатьВНалоговомУчетеУСН = УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Реквизиты.Организация, Реквизиты.Период);

	Если НЕ ОтражатьВНалоговомУчетеУСН Тогда
		Возврат;
	КонецЕсли;

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаПервоначальныеСведенияОСУСН Цикл
		Движение = Движения.ПервоначальныеСведенияОСНалоговыйУчетУСН.Добавить();
		Движение.Период                     = Реквизиты.Период;
		Движение.ОсновноеСредство           = СтрокаТаблицы.ОсновноеСредство;
		Движение.Организация                = Реквизиты.Организация;
		Движение.ПервоначальнаяСтоимостьУСН = СтрокаТаблицы.СуммаУСН;
		Движение.СрокПолезногоИспользования = Реквизиты.СрокПолезногоИспользованияУСН;
		Движение.ДатаПриобретения           = Реквизиты.ДатаПриобретения;
		Движение.ПорядокВключенияСтоимостиВСоставРасходовУСН = Реквизиты.ПорядокВключенияСтоимостиВСоставРасходовУСН;
	КонецЦикла;

	Движения.ПервоначальныеСведенияОСНалоговыйУчетУСН.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыРегистрацияПервоначальныхСведенийОСУСН(ТаблицаПервоначальныеСведенияОСУСН, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаПервоначальныеСведенияОСУСН

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство," // <СправочникСсылка.ОсновныеСредства>
	+ "СуммаУСН";         // <Число, 0, 0> - стоимость ОС по данным УСН

	Параметры.Вставить("ТаблицаПервоначальныеСведенияОСУСН",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаПервоначальныеСведенияОСУСН, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                                      // <Дата>
	+ "Организация,"                                 // <СправочникСсылка.Организации>
	+ "ПорядокВключенияСтоимостиВСоставРасходовУСН," // <ПеречислениеСсылка.ПорядокВключенияСтоимостиОСиНМАВСоставРасходовУСН> -
	                                                 // порядок включения стоимости ОС в состав расходов по УСН
	+ "ДатаПриобретения,"							 // <Дата> Дата приобретения ОС					 
	+ "СрокПолезногоИспользованияУСН";               // <Число, 4, 0> - срок полезного использования для целей
	                                                 // начисления амортизации по УСН

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

//РЕГИСТРАЦИЯ ОПЛАТЫ ОС УСН

Процедура СформироватьДвиженияРегистрацияОплатОсновныхСредствДляУСН(ТаблицаОплатыОсновныхСредствДляУСН, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	Параметры = ПодготовитьПараметрыРегистрацияОплатОсновныхСредствДляУСН(ТаблицаОплатыОсновныхСредствДляУСН, ТаблицаРеквизиты);
	
	Реквизиты = Параметры.Реквизиты[0];

	ОтражатьВНалоговомУчетеУСН = УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Реквизиты.Организация, Реквизиты.Период);
	
	Если ОтражатьВНалоговомУчетеУСН Тогда
		Для каждого СтрокаТаблицы Из Параметры.ТаблицаРегистрацияОплатыОсновныхСредствДляУСН Цикл
			Движение  = Движения.ОплатыОСДляУСН.Добавить();
			Движение.Период           = СтрокаТаблицы.ДатаОплаты;
			Движение.Организация      = Реквизиты.Организация;
			Движение.ОсновноеСредство = СтрокаТаблицы.ОсновноеСредство;
			Движение.ДатаОплаты       = СтрокаТаблицы.ДатаОплаты;
			Движение.СуммаОплаты      = СтрокаТаблицы.СуммаОплаты;
		КонецЦикла;
		
		Движения.ОплатыОСДляУСН.Записывать = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьПараметрыРегистрацияОплатОсновныхСредствДляУСН(ТаблицаОплатыОсновныхСредствДляУСН, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаРегистрацииОплатыОсновныхСредствДляУСН

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство," // <СправочникСсылка.ОсновныеСредства>
	+ "ДатаОплаты,"		  // <Дата> - дата оплаты ОС по данным УСН
	+ "СуммаОплаты";      //<Число, 0, 0> - сумма оплаты ОС по данным УСН

	Параметры.Вставить("ТаблицаРегистрацияОплатыОсновныхСредствДляУСН",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОплатыОсновныхСредствДляУСН, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                                      // <Дата>
	+ "Организация";                                 // <СправочникСсылка.Организации>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// МЕСТОНАХОЖДЕНИЕ ОС

Процедура СформироватьДвиженияИзменениеМестонахожденияОСБУ(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыИзменениеМестонахожденияОСБУ(ТаблицаОС, ТаблицаРеквизиты);

	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаОС Цикл
		Движение = Движения.МестонахождениеОСБухгалтерскийУчет.Добавить();
		Движение.Период           = Реквизиты.Период;
		Движение.ОсновноеСредство = СтрокаТаблицы.ОсновноеСредство;
		Движение.Организация      = Реквизиты.Организация;
		Движение.Местонахождение  = Реквизиты.Местонахождение;
		Движение.МОЛ              = Реквизиты.МОЛ;
	КонецЦикла;

	Движения.МестонахождениеОСБухгалтерскийУчет.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыИзменениеМестонахожденияОСБУ(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство"; // <СправочникСсылка.ОсновныеСредства>

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"          // <Дата>
	+ "Местонахождение," // <Ссылка на справочник подразделений>
	+ "МОЛ,"             // <СправочникСсылка.ФизическиеЛица> - МОЛ, за которым закреплено ОС
	+ "Организация";     // <СправочникСсылка.Организации>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// НАЧИСЛЕНИЕ АМОРТИЗАЦИИ ОС (БУ) (признак)

Процедура СформироватьДвиженияИзменениеПризнакаНачисленияАмортизацииОСБУ(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыИзменениеПризнакаНачисленияАмортизацииОСБУ(ТаблицаОС, ТаблицаРеквизиты);

	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаОС Цикл
		Движение = Движения.НачислениеАмортизацииОСБухгалтерскийУчет.Добавить();
		Движение.Период               = Реквизиты.Период;
		Движение.ОсновноеСредство     = СтрокаТаблицы.ОсновноеСредство;
		Движение.Организация          = Реквизиты.Организация;
		Движение.НачислятьАмортизацию = Реквизиты.НачислятьАмортизацию;
	КонецЦикла;

	Движения.НачислениеАмортизацииОСБухгалтерскийУчет.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыИзменениеПризнакаНачисленияАмортизацииОСБУ(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство"; // <СправочникСсылка.ОсновныеСредства>

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"               // <Дата>
	+ "НачислятьАмортизацию," // <Булево> - признак необходимости начисления амортизации по бухгалтерскому учету
	+ "Организация";          // <СправочникСсылка.Организации>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// НАЧИСЛЕНИЕ АМОРТИЗАЦИИ ОС (НУ) (признак)

Процедура СформироватьДвиженияИзменениеПризнакаНачисленияАмортизацииОСНУ(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыИзменениеПризнакаНачисленияАмортизацииОСНУ(ТаблицаОС, ТаблицаРеквизиты);

	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);

	Если НЕ ОтражатьВНалоговомУчете Тогда
		Возврат;
	КонецЕсли;

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаОС Цикл
		Движение = Движения.НачислениеАмортизацииОСНалоговыйУчет.Добавить();
		Движение.Период               = Реквизиты.Период;
		Движение.ОсновноеСредство     = СтрокаТаблицы.ОсновноеСредство;
		Движение.Организация          = Реквизиты.Организация;
		Движение.НачислятьАмортизацию = Реквизиты.НачислятьАмортизацию;
	КонецЦикла;

	Движения.НачислениеАмортизацииОСНалоговыйУчет.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыИзменениеПризнакаНачисленияАмортизацииОСНУ(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство"; // <СправочникСсылка.ОсновныеСредства>

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                    // <Дата>
	+ "НачислятьАмортизацию,"      // <Булево> - признак необходимости начисления амортизации по налоговому учету
	+ "Организация";               // <СправочникСсылка.Организации>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ОТРАЖЕНИЕ ОС В УЧЕТЕ

Процедура СформироватьДвиженияРегистрацияСчетовБухгалтерскогоУчетаОС(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыРегистрацияСчетовБухгалтерскогоУчетаОС(ТаблицаОС, ТаблицаРеквизиты);

	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаОС Цикл
		Движение = Движения.СчетаБухгалтерскогоУчетаОС.Добавить();
		Движение.Период                    = Реквизиты.Период;
		Движение.ОсновноеСредство          = СтрокаТаблицы.ОсновноеСредство;
		Движение.Организация               = Реквизиты.Организация;
		Движение.СчетУчета                 = Реквизиты.СчетУчета;
		Движение.СчетНачисленияАмортизации = Реквизиты.СчетНачисленияАмортизации;
	КонецЦикла;

	Движения.СчетаБухгалтерскогоУчетаОС.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыРегистрацияСчетовБухгалтерскогоУчетаОС(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство"; // <СправочникСсылка.ОсновныеСредства>

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                    // <Дата>
	+ "Организация,"               // <СправочникСсылка.Организации>
	+ "СчетНачисленияАмортизации," // <ПланСчетовСсылка.Хозрасчетный> - счет начисления амортизации ОС
	+ "СчетУчета";                 // <ПланСчетовСсылка.Хозрасчетный> - счет учета ОС

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции


Процедура СформироватьДвиженияИзменениеСпособовОтраженияРасходовПоАмортизацииОСБУ(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыИзменениеСпособовОтраженияРасходовПоАмортизацииОСБУ(ТаблицаОС, ТаблицаРеквизиты);

	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаОС Цикл
		Движение = Движения.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.Добавить();
		Движение.Период                                = Реквизиты.Период;
		Движение.ОсновноеСредство                      = СтрокаТаблицы.ОсновноеСредство;
		Движение.Организация                           = Реквизиты.Организация;
		Движение.СпособыОтраженияРасходовПоАмортизации = Реквизиты.СпособыОтраженияРасходовПоАмортизации;
	КонецЦикла;

	Движения.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыИзменениеСпособовОтраженияРасходовПоАмортизацииОСБУ(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство"; // <СправочникСсылка.ОсновныеСредства>

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                                // <Дата>
	+ "Организация,"                           // <СправочникСсылка.Организации>
	+ "СпособыОтраженияРасходовПоАмортизации"; // <СправочникСсылка.СпособыОтраженияРасходовПоАмортизации> - способы
		// отражения расходов по амортизации ОС

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ПАРАМЕТРЫ АМОРТИЗАЦИИ ОС (БУ)

Функция ПодготовитьТаблицуПараметрыАмортизацииОСБУ(ТаблицаПервоначальныеСведенияОС, ТаблицаРеквизиты, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыПараметрыАмортизацииОСБУ(ТаблицаПервоначальныеСведенияОС, ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	ТаблицаПараметров = Параметры.ТаблицаПервоначальныеСведенияОС.Скопировать();

	ТаблицаПараметров.Колонки.Добавить("КоэффициентАмортизации");
	ТаблицаПараметров.ЗаполнитьЗначения(Реквизиты.ГодоваяНормаАмортизации, "КоэффициентАмортизации");
	ТаблицаПараметров.Колонки.Добавить("КоэффициентУскорения");
	ТаблицаПараметров.ЗаполнитьЗначения(Реквизиты.КоэффициентУскорения, "КоэффициентУскорения");
	ТаблицаПараметров.Колонки.Добавить("ОбъемПродукцииРабот");
	ТаблицаПараметров.ЗаполнитьЗначения(Реквизиты.ПредполагаемыйОбъемПродукции, "ОбъемПродукцииРабот");
	ТаблицаПараметров.Колонки.Добавить("СрокПолезногоИспользования");
	ТаблицаПараметров.ЗаполнитьЗначения(Реквизиты.СрокПолезногоИспользования, "СрокПолезногоИспользования");
	ТаблицаПараметров.Колонки.Добавить("СрокИспользованияДляВычисленияАмортизации");
	ТаблицаПараметров.ЗаполнитьЗначения(Реквизиты.СрокПолезногоИспользования, "СрокИспользованияДляВычисленияАмортизации");
	ТаблицаПараметров.Колонки.Добавить("ОбъемПродукцииРаботДляВычисленияАмортизации");
	ТаблицаПараметров.ЗаполнитьЗначения(Реквизиты.ПредполагаемыйОбъемПродукции, "ОбъемПродукцииРаботДляВычисленияАмортизации");
	ТаблицаПараметров.Колонки.СуммаБУ.Имя = "СтоимостьДляВычисленияАмортизации";

	Возврат ТаблицаПараметров;

КонецФункции

Функция ПодготовитьПараметрыПараметрыАмортизацииОСБУ(ТаблицаПервоначальныеСведенияОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаПервоначальныеСведенияОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство," // <СправочникСсылка.ОсновныеСредства>
	+ "СуммаБУ";          // <Число, 15, 2> - стоимость ОС для целей начисления амортизации (БУ)

	Параметры.Вставить("ТаблицаПервоначальныеСведенияОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаПервоначальныеСведенияОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "ГодоваяНормаАмортизации,"      // <Число, 4, 2> - годовая норма амортизации для способов начисления амортизации
		// "по ЕНАОФ" и "по ЕНАОФ на 1000 км пробега"
	+ "Период,"                       // <Дата>
	+ "КоэффициентУскорения,"         // <Число, 5, 2> - коэффицент ускорения для способа начисления амортизации
		// "уменьшаемого остатка"
	+ "Организация,"                  // <СправочникСсылка.Организации>
	+ "ПредполагаемыйОбъемПродукции," // <Число, 10, 0> - предопологаемый объем продукции для начисления амортизации
		// способами "по ЕНАОФ на 1000 км пробега" и "пропорционально объему продукции"
	+ "СрокПолезногоИспользования";   // <Число, 4, 0> - срок полезного использования для начисления амортизации способами
		// "линейный", " по сумме чисел лет использования" и "уменьшаемого остатка". Используется  справочно и для других
		// способов

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияИзмененияПараметровАмортизацииОСБУ(ТаблицаПараметров, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыИзмененияПараметровАмортизацииОСБУ(ТаблицаПараметров, ТаблицаРеквизиты);

	Если Параметры.ТаблицаПараметров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаПараметров Цикл
		Движение = Движения.ПараметрыАмортизацииОСБухгалтерскийУчет.Добавить();
		Движение.Период                                      = Реквизиты.Период;
		Движение.ОсновноеСредство                            = СтрокаТаблицы.ОсновноеСредство;
		Движение.Организация                                 = Реквизиты.Организация;
		Движение.КоэффициентАмортизации                      = СтрокаТаблицы.КоэффициентАмортизации;
		Движение.КоэффициентУскорения                        = СтрокаТаблицы.КоэффициентУскорения;
		Движение.ОбъемПродукцииРабот                         = СтрокаТаблицы.ОбъемПродукцииРабот;
		Движение.СрокПолезногоИспользования                  = СтрокаТаблицы.СрокПолезногоИспользования;
		Движение.СрокИспользованияДляВычисленияАмортизации   = СтрокаТаблицы.СрокИспользованияДляВычисленияАмортизации;
		Движение.СтоимостьДляВычисленияАмортизации           = СтрокаТаблицы.СтоимостьДляВычисленияАмортизации;
		Движение.ОбъемПродукцииРаботДляВычисленияАмортизации = СтрокаТаблицы.ОбъемПродукцииРаботДляВычисленияАмортизации;
	КонецЦикла;

	Движения.ПараметрыАмортизацииОСБухгалтерскийУчет.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыИзмененияПараметровАмортизацииОСБУ(ТаблицаПараметров, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаПараметров

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство,"                            // <СправочникСсылка.ОсновныеСредства>
	+ "КоэффициентАмортизации,"                      // <Число, 4, 2> - годовая норма амортизации для способов начисления
		// амортизации "по ЕНАОФ" и "по ЕНАОФ на 1000 км пробега"
	+ "КоэффициентУскорения,"                        // <Число, 5, 2> - коэффицент ускорения для способа начисления
		// амортизации "уменьшаемого остатка"
	+ "ОбъемПродукцииРабот,"                         // <Число, 10, 0> - предопологаемый объем продукции для начисления
		// амортизации  способами "по ЕНАОФ на 1000 км пробега" и "пропорционально объему продукции"
	+ "ОбъемПродукцииРаботДляВычисленияАмортизации," // <Число, 10, 0> - предопологаемый объем продукции для начисления
		// амортизации  способами "по ЕНАОФ на 1000 км пробега" и "пропорционально объему продукции"
	+ "СрокИспользованияДляВычисленияАмортизации,"   // <Число, 4, 2> - срок полезного использования для начисления
		// амортизации способами "линейный", " по сумме чисел лет использования" и "уменьшаемого остатка". Используется
		// справочно и для других способов
	+ "СрокПолезногоИспользования,"                  // <Число, 4, 2> - срок полезного использования для начисления
		// амортизации способами "линейный", " по сумме чисел лет использования" и "уменьшаемого остатка". Используется
		// справочно и для других способов
	+ "СтоимостьДляВычисленияАмортизации";           // <Число, 15, 2> - стоимость ОС для целей начисления амортизации (БУ)

	Параметры.Вставить("ТаблицаПараметров",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаПараметров, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                       // <Дата>
	+ "Организация";                  // <СправочникСсылка.Организации>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции


Процедура СформироватьДвиженияИзменениеГрафиковДляАмортизацииОСБУ(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыИзменениеГрафиковДляАмортизацииОСБУ(ТаблицаОС, ТаблицаРеквизиты);

	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	Если НЕ ЗначениеЗаполнено(Реквизиты.ГрафикАмортизации) Тогда
		Возврат;
	КонецЕсли;

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаОС Цикл
		Движение = Движения.ГрафикиАмортизацииОСБухгалтерскийУчет.Добавить();
		Движение.Период            = Реквизиты.Период;
		Движение.ОсновноеСредство  = СтрокаТаблицы.ОсновноеСредство;
		Движение.Организация       = Реквизиты.Организация;
		Движение.ГрафикАмортизации = Реквизиты.ГрафикАмортизации;
	КонецЦикла;

	Движения.ГрафикиАмортизацииОСБухгалтерскийУчет.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыИзменениеГрафиковДляАмортизацииОСБУ(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство"; // <СправочникСсылка.ОсновныеСредства>

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "ГрафикАмортизации," // <СправочникСсылка.ГодовыеГрафикиАмортизацииОС> - график распределения амортизации по году.
	+ "Период,"            // <Дата>
	+ "Организация";       // <СправочникСсылка.Организации>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ПАРАМЕТРЫ АМОРТИЗАЦИИ ОС (НУ)

Функция ПодготовитьТаблицуПараметрыАмортизацииОСНУ(ТаблицаПервоначальныеСведенияОС, ТаблицаВключенияСтоимостиВРасходы, ТаблицаРеквизиты, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыПараметрыАмортизацииОСНУ(
		ТаблицаПервоначальныеСведенияОС,
		ТаблицаВключенияСтоимостиВРасходы, 
		ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	ТаблицаПараметров = Параметры.ТаблицаПервоначальныеСведенияОС.Скопировать();

	ТаблицаПараметров.Колонки.Добавить("СрокПолезногоИспользования");
	ТаблицаПараметров.Колонки.СуммаПР.Имя = "ПРДляВычисленияАмортизации";

	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);

	Если НЕ ОтражатьВНалоговомУчете Тогда
		Возврат ТаблицаПараметров.СкопироватьКолонки();
	КонецЕсли;

	ТаблицаПараметров.ЗаполнитьЗначения(Реквизиты.СрокПолезногоИспользования, "СрокПолезногоИспользования");

	ТаблицаПР = Параметры.ТаблицаВключенияСтоимостиВРасходы;
	ТаблицаПР.Свернуть("ОбъектУчета", "СуммаПР");

	Для каждого СтрокаОС Из ТаблицаПараметров Цикл
		СтрокаТаблицыПР = ТаблицаПР.Найти(СтрокаОС.ОсновноеСредство, "ОбъектУчета");
		Если СтрокаТаблицыПР <> Неопределено Тогда
			СтрокаОС.ПРДляВычисленияАмортизации = СтрокаОС.ПРДляВычисленияАмортизации - СтрокаТаблицыПР.СуммаПР;
		КонецЕсли
	КонецЦикла;
	
	Возврат ТаблицаПараметров;

КонецФункции

Функция ПодготовитьПараметрыПараметрыАмортизацииОСНУ(ТаблицаПервоначальныеСведенияОС, ТаблицаВключенияСтоимостиВРасходы, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаПервоначальныеСведенияОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство," // <СправочникСсылка.ОсновныеСредства>
	+ "СуммаПР";          // <Число, 15, 2> - постоянные разницы (ПБУ 18/02) в стоимости ОС для целей начисления
		// амортизации

	Параметры.Вставить("ТаблицаПервоначальныеСведенияОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаПервоначальныеСведенияОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.ТаблицаВключенияСтоимостиВРасходы

	СписокОбязательныхКолонок = ""
	+ "ОбъектУчета," // <СправочникСсылка.ОсновныеСредства>
	+ "СуммаПР";     // <Число, 15, 2> - постоянные разницы (ПБУ 18/02) в стоимости ОС для целей начисления
		// амортизации

	Параметры.Вставить("ТаблицаВключенияСтоимостиВРасходы",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаВключенияСтоимостиВРасходы, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                     // <Дата>
	+ "Организация,"                // <СправочникСсылка.Организации>
	+ "СрокПолезногоИспользования"; // <Число, 4, 0> - срок полезного использования ОС для целей начисления амортизации по налоговому учету

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияИзменениеПараметровАмортизацииОСНУ(ТаблицаПараметров, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыИзменениеПараметровАмортизацииОСНУ(ТаблицаПараметров, ТаблицаРеквизиты);

	Если Параметры.ТаблицаПараметров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ТипРегистратора = ТипЗнч(Движения.ПараметрыАмортизацииОСНалоговыйУчет.Отбор.Регистратор.Значение);

	Если НЕ ОтражатьВНалоговомУчете 
			И Тип("ДокументСсылка.ИзменениеПараметровНачисленияАмортизацииОС") <> ТипРегистратора Тогда
			
		Возврат;
		
	КонецЕсли;

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаПараметров Цикл
		Движение = Движения.ПараметрыАмортизацииОСНалоговыйУчет.Добавить();
		Движение.Период                     = Реквизиты.Период;
		Движение.ОсновноеСредство           = СтрокаТаблицы.ОсновноеСредство;
		Движение.Организация                = Реквизиты.Организация;
		Движение.СрокПолезногоИспользования = СтрокаТаблицы.СрокПолезногоИспользования;
		Движение.ПРДляВычисленияАмортизации = СтрокаТаблицы.ПРДляВычисленияАмортизации;
	КонецЦикла;

	Движения.ПараметрыАмортизацииОСНалоговыйУчет.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыИзменениеПараметровАмортизацииОСНУ(ТаблицаПараметров, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаПараметров

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство,"           // <СправочникСсылка.ОсновныеСредства>
	+ "ПРДляВычисленияАмортизации," // <Число, 0, 0> -  постоянные разницы (ПБУ 18/02) в стоимости ОС для целей начисления
		// амортизации
	+ "СрокПолезногоИспользования"; // <Число, 4, 0> - срок полезного использования ОС для целей начисления амортизации
		// по налоговому учету

	Параметры.Вставить("ТаблицаПараметров",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаПараметров, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"      // <Дата>
	+ "Организация"; // <СправочникСсылка.Организации>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияНачислениеАмортизацииОССпециальныйКоэффициентНУ(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыНачислениеАмортизацииОССпециальныйКоэффициентНУ(ТаблицаОС, ТаблицаРеквизиты);

	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);

	Если НЕ ОтражатьВНалоговомУчете Тогда
		Возврат;
	КонецЕсли;

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаОС Цикл
		Движение = Движения.НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчет.Добавить();
		Движение.Период                 = Реквизиты.Период;
		Движение.ОсновноеСредство       = СтрокаТаблицы.ОсновноеСредство;
		Движение.Организация            = Реквизиты.Организация;
		Движение.СпециальныйКоэффициент = СтрокаТаблицы.СпециальныйКоэффициент;
	КонецЦикла;

	Движения.НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчет.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыНачислениеАмортизацииОССпециальныйКоэффициентНУ(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство," // <СправочникСсылка.ОсновныеСредства>
	+ "СпециальныйКоэффициент"; // <Число, 5, 2> - специальный коэффциент для начисления амортизации ОС (НУ)

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"      // <Дата>
	+ "Организация"; // <СправочникСсылка.Организации>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ОТРАЖЕНИЕ АМОРТИЗАЦИОННОЙ ПРЕМИИ (проводка на вспомогательный счет)

Функция ПодготовитьТаблицуАмортизационнаяПремия(ТаблицаОС, ТаблицаРеквизиты, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыАмортизационнаяПремия(ТаблицаОС, ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	ТаблицаАмортизационнойПремии = Новый ТаблицаЗначений;
	ТаблицаАмортизационнойПремии.Колонки.Добавить("НомерСтроки");
	ТаблицаАмортизационнойПремии.Колонки.Добавить("ОсновноеСредство");
	ТаблицаАмортизационнойПремии.Колонки.Добавить("Сумма",
		ОбщегоНазначения.ОписаниеТипаЧисло(15,2));

	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);

	Если Реквизиты.ПроцентАмортизационнойПремии = 0 ИЛИ НЕ ОтражатьВНалоговомУчете Тогда
		Возврат ТаблицаАмортизационнойПремии;
	КонецЕсли;

	Для каждого СтрокаСведений Из Параметры.ТаблицаОС Цикл
		СтрокаПремии = ТаблицаАмортизационнойПремии.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПремии, СтрокаСведений);
		СтрокаПремии.Сумма = СтрокаСведений.СуммаНУ * (Реквизиты.ПроцентАмортизационнойПремии / 100);
	КонецЦикла;

	Возврат ТаблицаАмортизационнойПремии;

КонецФункции

Функция ПодготовитьПараметрыАмортизационнаяПремия(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство," // <СправочникСсылка.ОсновныеСредства>
	+ "СуммаНУ";          // <Число, 15, 2> - стоимость ОС по данным налогового учета

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                       // <Дата>
	+ "Организация,"                  // <СправочникСсылка.Организации>
	+ "Подразделение,"                // <Ссылка на справочник подразделений>
	+ "ПроцентАмортизационнойПремии"; // <Число, 4, 2> - процент от стоимости ОС (НУ) для включения в расходы

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияОтражениеАмортизационнойПремии(ТаблицаАмортизационнойПремии, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыОтражениеАмортизационнойПремии(ТаблицаАмортизационнойПремии, ТаблицаРеквизиты);

	Если Параметры.ТаблицаАмортизационнойПремии.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);

	Если НЕ ОтражатьВНалоговомУчете Тогда
		Возврат;
	КонецЕсли;

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаАмортизационнойПремии Цикл

		Если СтрокаТаблицы.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;

		Проводка.Содержание = "Амортизационная премия";

		Проводка.СчетДт = ПланыСчетов.Хозрасчетный.РасходыНаКапитальныеВложения;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства",
			СтрокаТаблицы.ОсновноеСредство);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыАмортизационнойПремии",
			Реквизиты.Регистратор);

		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = Реквизиты.Подразделение;
		КонецЕсли;

		Проводка.СуммаНУДт = СтрокаТаблицы.Сумма;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыОтражениеАмортизационнойПремии(ТаблицаАмортизационнойПремии, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаАмортизационнойПремии

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство," // <СправочникСсылка.ОсновныеСредства>
	+ "Сумма";            // <Число, 15, 2> - сумма амортизационной премии

	Параметры.Вставить("ТаблицаАмортизационнойПремии",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаАмортизационнойПремии, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"        // <Дата>
	+ "Организация,"   // <СправочникСсылка.Организации>
	+ "Подразделение," // <Ссылка на справочник подразделений>
	+ "Регистратор";   // <ДокументСсылка.*>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// НАЧИСЛЕНИЕ АМОРТИЗАЦИОННОЙ ПРЕМИИ

Функция ПодготовитьТаблицуСуммАмортизационнойПремии(ТаблицаАмортизации, ТаблицаРеквизиты, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыСуммАмортизационнойПремии(ТаблицаАмортизации, ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	// Включение амортизационной премии в состав расходов.
	Если Параметры.ТаблицаАмортизации.Итог("СуммаКапитальныхВложенийВключаемыхВРасходы") = 0 Тогда

		ОписаниеТиповСубконто = Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип;
		ОписаниеТипаЧисло     = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2);

		ТаблицаНачисленияАмортизационнойПремии = Новый ТаблицаЗначений;
		Колонки = ТаблицаНачисленияАмортизационнойПремии.Колонки;
		Колонки.Добавить("ОсновноеСредство", Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
		Колонки.Добавить("СчетУчета", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
		Колонки.Добавить("ДокументАмортизационнойПремии", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыАмортизационнойПремии.ТипЗначения);
		Колонки.Добавить("СчетУчетаЗатратПоАмортизационнойПремии", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
		Колонки.Добавить("ПодразделениеПоАмортизационнойПремии", БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
		Колонки.Добавить("СубконтоПоАмортизационнойПремии1", ОписаниеТиповСубконто);
		Колонки.Добавить("СубконтоПоАмортизационнойПремии2", ОписаниеТиповСубконто);
		Колонки.Добавить("СубконтоПоАмортизационнойПремии3", ОписаниеТиповСубконто);
		Колонки.Добавить("СуммаНУ", ОписаниеТипаЧисло);
		Колонки.Добавить("СуммаПР", ОписаниеТипаЧисло);
		Колонки.Добавить("СуммаВР", ОписаниеТипаЧисло);
		Колонки.Добавить("Подразделение", БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());

		Возврат ТаблицаНачисленияАмортизационнойПремии;

	КонецЕсли;

	ТаблицаОС = Новый ТаблицаЗначений;
	ТаблицаОС.Колонки.Добавить("ОсновноеСредство", Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	Для каждого СтрокаТабАмортизации Из Параметры.ТаблицаАмортизации Цикл
		Если СтрокаТабАмортизации.СуммаКапитальныхВложенийВключаемыхВРасходы > 0 Тогда
			СтрокаОС = ТаблицаОС.Добавить();
			СтрокаОС.ОсновноеСредство = СтрокаТабАмортизации.ОбъектУчета;
		КонецЕсли;
	КонецЦикла;

	СубконтоКВ = Новый Массив();
	СубконтоКВ.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	СубконтоКВ.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыАмортизационнойПремии);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",           НачалоМесяца(Реквизиты.Период));
	Запрос.УстановитьПараметр("КонецМесяца",      КонецМесяца(Реквизиты.Период));
	Запрос.УстановитьПараметр("Организация",      Реквизиты.Организация);
	Запрос.УстановитьПараметр("СубконтоКВ",       СубконтоКВ);
	Запрос.УстановитьПараметр("ТаблицаОС",        ТаблицаОС.ВыгрузитьКолонку("ОсновноеСредство"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК ОсновноеСредство,
	|	ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.ОсновныеСредства).Код КАК ОсновноеСредствоКод,
	|	ХозрасчетныйОстатки.Субконто2 КАК ДокументАмортизационнойПремии,
	|	ХозрасчетныйОстатки.Субконто2.СчетУчетаЗатратПоАмортизационнойПремии КАК СчетУчетаЗатратПоАмортизационнойПремии,
	|	ХозрасчетныйОстатки.Субконто2.ПодразделениеОрганизацииПоАмортизационнойПремии КАК ПодразделениеОрганизацииПоАмортизационнойПремии,
	|	ХозрасчетныйОстатки.Субконто2.СубконтоПоАмортизационнойПремии1 КАК СубконтоПоАмортизационнойПремии1,
	|	ХозрасчетныйОстатки.Субконто2.СубконтоПоАмортизационнойПремии2 КАК СубконтоПоАмортизационнойПремии2,
	|	ХозрасчетныйОстатки.Субконто2.СубконтоПоАмортизационнойПремии3 КАК СубконтоПоАмортизационнойПремии3,
	|	ХозрасчетныйОстатки.СуммаНУОстатокДт КАК Сумма
	|ПОМЕСТИТЬ ХозрасчетныйОстатки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Период,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасходыНаКапитальныеВложения),
	|			&СубконтоКВ,
	|			Организация = &Организация
	|				И Субконто1 В (&ТаблицаОС)) КАК ХозрасчетныйОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	ОсновноеСредствоКод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	СчетаБухгалтерскогоУчетаОССрезПоследних.СчетУчета КАК СчетУчета
	|ПОМЕСТИТЬ СчетаБухгалтерскогоУчетаОССрезПоследних
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В (&ТаблицаОС)) КАК СчетаБухгалтерскогоУчетаОССрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение КАК ПодразделениеОрганизации
	|ПОМЕСТИТЬ МестонахождениеОСБухгалтерскийУчетСрезПоследних
	|ИЗ
	|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	|			&КонецМесяца,
	|			Организация = &Организация
	|				И ОсновноеСредство В (&ТаблицаОС)) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.ОсновноеСредство КАК ОсновноеСредство,
	|	СчетаБухгалтерскогоУчетаОССрезПоследних.СчетУчета КАК СчетУчета,
	|	ХозрасчетныйОстатки.ДокументАмортизационнойПремии КАК ДокументАмортизационнойПремии,
	|	ХозрасчетныйОстатки.СчетУчетаЗатратПоАмортизационнойПремии КАК СчетУчетаЗатратПоАмортизационнойПремии,
	|	ХозрасчетныйОстатки.ПодразделениеОрганизацииПоАмортизационнойПремии КАК ПодразделениеПоАмортизационнойПремии,
	|	ХозрасчетныйОстатки.СубконтоПоАмортизационнойПремии1 КАК СубконтоПоАмортизационнойПремии1,
	|	ХозрасчетныйОстатки.СубконтоПоАмортизационнойПремии2 КАК СубконтоПоАмортизационнойПремии2,
	|	ХозрасчетныйОстатки.СубконтоПоАмортизационнойПремии3 КАК СубконтоПоАмортизационнойПремии3,
	|	ХозрасчетныйОстатки.Сумма КАК СуммаНУ,
	|	0 КАК СуммаПР,
	|	-ХозрасчетныйОстатки.Сумма КАК СуммаВР,
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.ПодразделениеОрганизации КАК Подразделение
	|ИЗ
	|	ХозрасчетныйОстатки КАК ХозрасчетныйОстатки
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|	СчетаБухгалтерскогоУчетаОССрезПоследних КАК СчетаБухгалтерскогоУчетаОССрезПоследних
	|	ПО
	|		ХозрасчетныйОстатки.ОсновноеСредство = СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
	|	ПО
	|		ХозрасчетныйОстатки.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|
	|УПОРЯДОЧИТЬ ПО
	|	ХозрасчетныйОстатки.ОсновноеСредствоКод";
	Если ТранзакцияАктивна() И ОбщегоНазначенияБПВызовСервераПовтИсп.ИспользоватьУправляемыеБлокировки() Тогда
		ПараметрыБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы, ИсточникДанных",
			"РегистрБухгалтерии", "Хозрасчетный", ТаблицаОС);

		ЗначенияБлокировки = Новый Структура("Период, Организация, Счет",
			Новый Диапазон(, КонецМесяца(Реквизиты.Период)), Реквизиты.Организация, ПланыСчетов.Хозрасчетный.РасходыНаКапитальныеВложения);

		СтруктураИсточникаДанных = Новый Соответствие;
		СтруктураИсточникаДанных.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства, "ОсновноеСредство");

		ОбщегоНазначенияБПВызовСервера.УстановитьУправляемуюБлокировку(ПараметрыБлокировки, ЗначенияБлокировки, СтруктураИсточникаДанных);
	КонецЕсли;

	ТаблицаНачисленияАмортизационнойПремии = Запрос.Выполнить().Выгрузить();

	Возврат ТаблицаНачисленияАмортизационнойПремии;

КонецФункции

Функция ПодготовитьПараметрыСуммАмортизационнойПремии(ТаблицаАмортизации, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаАмортизации

	СписокОбязательныхКолонок = ""
	+ "ОбъектУчета,"                                // <СправочникСсылка.ОсновныеСредства>
	+ "СуммаКапитальныхВложенийВключаемыхВРасходы"; // <Число, 15, 2> - сумма амортизационной премии по ОС

	Параметры.Вставить("ТаблицаАмортизации",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаАмортизации, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"      // <Дата>
	+ "Организация"; // <СправочникСсылка.Организации>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияНачислениеАмортизационнойПремии(ТаблицаНачисленияАмортизационнойПремии, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыНачислениеАмортизационнойПремии(ТаблицаНачисленияАмортизационнойПремии, ТаблицаРеквизиты);

	Если Параметры.ТаблицаНачисленияАмортизационнойПремии.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	ОтражатьВНалоговомУчете 		= 	УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаПБУ18					=	УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);
	МетодНачисленияАмортизацииНУ	=	УчетнаяПолитика.МетодНачисленияАмортизацииНУ(Реквизиты.Организация, Реквизиты.Период);

	Если НЕ ОтражатьВНалоговомУчете Тогда
		Возврат;
	КонецЕсли;

	// Проверим полноту заполнения аналитики затрат
	ПроверитьСчетАналитикуОтнесенияАмортизационнойПремии(
		Параметры.ТаблицаНачисленияАмортизационнойПремии,
		Отказ,
		Реквизиты.Регистратор);
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Сформируем проводки
	Для каждого СтрокаТаблицы Из Параметры.ТаблицаНачисленияАмортизационнойПремии Цикл

		Если СтрокаТаблицы.СуммаНУ = 0 Тогда
			Продолжить;
		КонецЕсли;

		// Списываем амортизационную премию со счета КВ.

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;

		Проводка.Содержание   = "Амортизационная премия";

		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.РасходыНаКапитальныеВложения;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства",
			СтрокаТаблицы.ОсновноеСредство);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыАмортизационнойПремии",
			СтрокаТаблицы.ДокументАмортизационнойПремии);

		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = СтрокаТаблицы.Подразделение;
		КонецЕсли;

		Проводка.СуммаНУКт = СтрокаТаблицы.СуммаНУ;

		// Начисляем амортизационную премию.

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;

		Проводка.Содержание = "Амортизационная премия";

		Проводка.СчетДт = СтрокаТаблицы.СчетУчетаЗатратПоАмортизационнойПремии;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоПоАмортизационнойПремии1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоПоАмортизационнойПремии2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.СубконтоПоАмортизационнойПремии3);

		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = СтрокаТаблицы.ПодразделениеПоАмортизационнойПремии;
		КонецЕсли;

		Проводка.СчетКт = СтрокаТаблицы.СчетУчета;

		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);

		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = СтрокаТаблицы.Подразделение;
		КонецЕсли;

		Если СвойстваСчетаДт.НалоговыйУчет Тогда
			Проводка.СуммаНУДт = СтрокаТаблицы.СуммаНУ;
			Если ПоддержкаПБУ18 Тогда
				Проводка.СуммаПРДт = СтрокаТаблицы.СуммаПР;
				Проводка.СуммаВРДт = СтрокаТаблицы.СуммаВР;
			КонецЕсли;
		КонецЕсли;

		Если СвойстваСчетаКт.НалоговыйУчет Тогда
			Проводка.СуммаНУКт = СтрокаТаблицы.СуммаНУ;
			Если ПоддержкаПБУ18 Тогда
				Проводка.СуммаПРКт = СтрокаТаблицы.СуммаПР;
				Проводка.СуммаВРКт = СтрокаТаблицы.СуммаВР;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

	// Вызов переопределяемой процедуры для возможности отражения дополнительных движений.
	УправлениеВнеоборотнымиАктивамиПереопределяемый.ВыполнитьДополнительныеДействияНачислениеАмортизационнойПремии(ТаблицаНачисленияАмортизационнойПремии, ТаблицаРеквизиты, Движения, Отказ);

КонецПроцедуры

Функция ПодготовитьПараметрыНачислениеАмортизационнойПремии(ТаблицаНачисленияАмортизационнойПремии, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаНачисленияАмортизационнойПремии

	СписокОбязательныхКолонок = ""
	+ "ДокументАмортизационнойПремии,"          // <ДокументСсылка.*> - документ отражения амортизационной премии
	+ "ОсновноеСредство,"                       // <СправочникСсылка.ОсновныеСредства>
	+ "Подразделение,"                          // <Ссылка на справочник подразделений> - подразделение, в котором
		// учитывается ОС
	+ "ПодразделениеПоАмортизационнойПремии,"   // <Ссылка на справочник подразделений> - подразделение, в котором
		// требуется учесть расходы по амортизационной премии
	+ "СубконтоПоАмортизационнойПремии1,"       // <Характеристика.ВидыСубконтоХозрасчетные> - субконто отражения расходов
		// по амортизационной премии
	+ "СубконтоПоАмортизационнойПремии2,"       // <Характеристика.ВидыСубконтоХозрасчетные> - субконто отражения расходов
		// по амортизационной премии
	+ "СубконтоПоАмортизационнойПремии3,"       // <Характеристика.ВидыСубконтоХозрасчетные> - субконто отражения расходов
		// по амортизационной премии
	+ "СуммаНУ,"                                // <Число, 15, 2> - сумма амортизационной премии
	+ "СуммаПР,"                                // <Число, 15, 2> - постоянные разницы в оценке суммы амортизационной
		// премии (ПБУ 18/02)
	+ "СуммаВР,"                                // <Число, 15, 2> - временные разницы в оценке суммы амортизационной
		// премии (ПБУ 18/02)
	+ "СчетУчета,"                              // <ПланСчетовСсылка.Хозрасчетный> - счет учета ОС
	+ "СчетУчетаЗатратПоАмортизационнойПремии"; // <ПланСчетовСсылка.Хозрасчетный> - счет учета расходов по амортизационной
		// премии

	Параметры.Вставить("ТаблицаНачисленияАмортизационнойПремии",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаНачисленияАмортизационнойПремии, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор," // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"      // <Дата>
	+ "Организация"; // <СправочникСсылка.Организации>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// Проверяет полноту заполнения счета и аналитики, на которую относится амортизационная премия
//
// Параметры:
//  ТаблицаНачисленияАмортизационнойПремии  
//               - ТаблицаЗначений - сведения о начисленной амортизационной премии, 
//                 структура таблицы описана в УчетОС.ПодготовитьПараметрыНачислениеАмортизационнойПремии()
//  ДокументНачисленияАмортизационнойПремии 
//              - ДокументСсылка, ДокументОбъект - документ, при проведении которого выполняется проверка
//
// Возвращаемые параметры:
//  Отказ       - Булево - устанавливается в Истина, если обнаружена ошибка
// 
Процедура ПроверитьСчетАналитикуОтнесенияАмортизационнойПремии(ТаблицаНачисленияАмортизационнойПремии, Отказ, ДокументНачисленияАмортизационнойПремии)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонтрольЗатрат.СоздатьВременныеТаблицыСчетаГдеОбязательнаАналитика(МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаНачисленияАмортизационнойПремии", ТаблицаНачисленияАмортизационнойПремии);
	Запрос.УстановитьПараметр("ПустоеПодразделение", БухгалтерскийУчетПереопределяемый.ПустоеПодразделение());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПроверяемыеДанные.ДокументАмортизационнойПремии КАК Документ,
	|	ПроверяемыеДанные.ОсновноеСредство КАК ОсновноеСредство,
	|	ПроверяемыеДанные.СчетУчетаЗатратПоАмортизационнойПремии КАК СчетУчета,
	|	ПроверяемыеДанные.ПодразделениеПоАмортизационнойПремии КАК Подразделение,
	|	ПроверяемыеДанные.СубконтоПоАмортизационнойПремии1 КАК Субконто1,
	|	ПроверяемыеДанные.СубконтоПоАмортизационнойПремии2 КАК Субконто2,
	|	ПроверяемыеДанные.СубконтоПоАмортизационнойПремии3 КАК Субконто3
	|ПОМЕСТИТЬ ПроверяемыеДанные
	|ИЗ
	|	&ТаблицаНачисленияАмортизационнойПремии КАК ПроверяемыеДанные
	|ГДЕ
	|	ПроверяемыеДанные.СуммаНУ <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроверяемыеДанные.ОсновноеСредство,
	|	ПРЕДСТАВЛЕНИЕ(ПроверяемыеДанные.ОсновноеСредство),
	|	ПроверяемыеДанные.Документ,
	|	ПРЕДСТАВЛЕНИЕ(ПроверяемыеДанные.Документ),
	|	ПроверяемыеДанные.СчетУчета,
	|	ПроверяемыеДанные.Подразделение,
	|	ПроверяемыеДанные.Субконто1,
	|	ПроверяемыеДанные.Субконто2,
	|	ПроверяемыеДанные.Субконто3,
	|	ВЫБОР
	|		КОГДА СчетаГдеОбязательныПодразделения.Счет ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаПодразделение,
	|	СчетаГдеОбязательныНоменклатурныеГруппы.НомерСубконто КАК НомерСубконтоОбязательныНоменклатурныеГруппы,
	|	СчетаГдеОбязательныСтатьиЗатрат.НомерСубконто КАК НомерСубконтоОбязательныСтатьиЗатрат
	|ИЗ
	|	ПроверяемыеДанные КАК ПроверяемыеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаГдеОбязательныПодразделения КАК СчетаГдеОбязательныПодразделения
	|		ПО ПроверяемыеДанные.СчетУчета = СчетаГдеОбязательныПодразделения.Счет
	|			И (ПроверяемыеДанные.Подразделение = &ПустоеПодразделение)
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаГдеОбязательныНоменклатурныеГруппы КАК СчетаГдеОбязательныНоменклатурныеГруппы
	|		ПО ПроверяемыеДанные.СчетУчета = СчетаГдеОбязательныНоменклатурныеГруппы.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаГдеОбязательныСтатьиЗатрат КАК СчетаГдеОбязательныСтатьиЗатрат
	|		ПО ПроверяемыеДанные.СчетУчета = СчетаГдеОбязательныСтатьиЗатрат.Счет";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
			
		// Проверяем, что заполнены счет и аналитика затрат
		Если НЕ ЗначениеЗаполнено(Выборка.СчетУчета) Тогда
		
			ТекстОшибки = НСтр("ru = 'В документе %Документ% не заполнен счет учета затрат амортизационной премии для основного средства ""%ОсновноеСредство%"".
        	|Заполните счет в документе'");
		
        	ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОсновноеСредство%", Выборка.ОсновноеСредство);
        	ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%",         Выборка.Документ);
		
			БухгалтерскийУчетПереопределяемый.СообщитьОбОшибкеРегОперацииСНавигацией(ТекстОшибки, Выборка.Документ, Отказ, ДокументНачисленияАмортизационнойПремии);
			
		Иначе
		
			НеЗаполненаАналитика = Новый Массив;
			
			// Проверим заполнение аналитики учета затрат
			Если ЗначениеЗаполнено(Выборка.НомерСубконтоОбязательныНоменклатурныеГруппы) 
				И НЕ ЗначениеЗаполнено(Выборка["Субконто" + Выборка.НомерСубконтоОбязательныНоменклатурныеГруппы]) Тогда
				НеЗаполненаАналитика.Добавить("НоменклатурнаяГруппа");
			КонецЕсли;
		
			Если ЗначениеЗаполнено(Выборка.НомерСубконтоОбязательныСтатьиЗатрат) 
				И НЕ ЗначениеЗаполнено(Выборка["Субконто" + Выборка.НомерСубконтоОбязательныСтатьиЗатрат]) Тогда
				НеЗаполненаАналитика.Добавить("СтатьяЗатрат");
			КонецЕсли;
		
			Если Выборка.ОшибкаПодразделение Тогда
				НеЗаполненаАналитика.Добавить("Подразделение");
			КонецЕсли;
		
			Если НеЗаполненаАналитика.Количество() > 0 Тогда
		
				// Приготовим сообщение об ошибке
			
				ТекстОшибки = НСтр("ru = 'В документе [Документ] не [Заполнены] [Реквизиты] расходов по амортизационной премии для основного средства ""[ОсновноеСредство]"".
        		|Заполните аналитику учета расходов в документе'");
			
				ПараметрыТекста = Новый Структура;
        		ПараметрыТекста.Вставить("ОсновноеСредство", Выборка.ОсновноеСредство);
        		ПараметрыТекста.Вставить("Документ",         Выборка.Документ);
			
				СловаДляСклонения = Новый Структура;
				СловаДляСклонения.Вставить("Заполнены", Новый Структура("он,она,оно,они",НСтр("ru='заполнен'"),НСтр("ru='заполнена'"),НСтр("ru='заполнено'"),НСтр("ru='заполнены'")));
				КонтрольЗатрат.ДобавитьСклонениеВПараметрыСообщенияОбОшибке(ПараметрыТекста, НеЗаполненаАналитика, СловаДляСклонения); 
			
				// [Реквизиты]
				КонтрольЗатрат.ДобавитьПереченьАналитикиВПараметрыСообщенияОбОшибке(ПараметрыТекста, НеЗаполненаАналитика);
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстОшибки,  ПараметрыТекста);
				
				БухгалтерскийУчетПереопределяемый.СообщитьОбОшибкеРегОперацииСНавигацией(ТекстОшибки, Выборка.Документ, Отказ, ДокументНачисленияАмортизационнойПремии);
				
			КонецЕсли;			
			
		КонецЕсли; // Проверка ошибок
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОТЛОЖЕННОЕ ПРИНЯТИЕ К УЧЕТУ ОС ПРИ РАСЧЕТЕ СЕБЕСТОМОСТИ РЕГЛАМЕНТНОЙ ОПЕРАЦИЕЙ

// Процедура СформироватьДвиженияПоСтоимостиОСПриПринятииКУчетуОтложенноеПроведение()
// формирует движения по дополнительным регистрам учета ОС после того, как становится известна
// стоимость списания оборудования со склада (сумма проводки Дт 01 - Кт 08.04). 
// Используется в случаях, когда момент списания себестоимости оборудования отличается 
// от момента принятия к учету ОС.
// 
// 
// Параметры:
//  ТаблицаСебестоимостьСписанныхТоваров - 	таблица значений со структурой как в функции 
//							  			   	УчетТоваровСервер.ПолучитьПустуюТаблицуСписанныеТовары() со следующими
//										 	значениями полей:
//		ПодразделениеОС 	- Ссылка на справочник подразделений, подразделение учета ОС (Подразделение Дт),
//							  совпадает с МестонахождениемОС
//		ОсновноеСредство	- СправочникСсылка.ОсновныеСредства
//		СчетУчетаОС			- ПланСчетовСсылка.Хозрасчетный (например, 01.01)
//		Номенклатура		- СправочникСсылка.Номенклатура, позиция списанного оборудования (Номенклатура Кт)
//		Партия				- ДокументСсылка или НЕОПРЕДЕЛЕНО, если партинный учет не ведется
//		Период				- Дата проведения
//		ПодразделениеНоменклатуры	- Ссылка на справочник подразделений, подразделение Кт
//		Склад				- СправочникСсылка.Склады, склад, с которого списано оборудование (Склад Кт)
//		СуммаВРОС			- Число, ВР в стоимости принимаемого ОС (СуммаВРДт)
//		СуммаНУОС			- Число, стоимость по НУ принимаемого ОС (СуммаНУДт)
//		СуммаПРОС			- Число, ПР в стоимости принимаемого ОС (СуммаПРДт)
//		СтоимостьБУ			- Число, стоимость БУ принимаемого ОС (Сумма)
//		СуммаВРНоменклатуры	- Число, ВР в стоимости списываемого оборудования (СуммаВРКт)
//		СуммаНУНоменклатуры - Число, стоимость по НУ списываемого оборудования (СуммаНУКт)
//		СуммаПРНоменклатуры - Число, ПР в стоимости списываемого оборудования (СуммаПРКт)
//		СчетУчетаНоменклатуры - ПланСчетовСсылка.Хозрасчетный (например, 08.04)
//
//  Организация			 	- СправочникСсылка.Организация.
//  ДатаДокумента			- Дата документа регистратора.
//  Регистратор			 	- Документ-регистратор, для которого будут записываться движения регистров ОС.
//							  В УП это, например, это документ расчета себестоимости списания.
//  Движения				- Коллекция наборов движений регистров.
//  Отказ					- Булево, признак отказа от проведения.
//
Процедура СформироватьДвиженияПоСтоимостиОСПриПринятииКУчетуОтложенноеПроведение(
										ТаблицаСебестоимостьСписанныхТоваров, 
										Организация, 
										ДатаДокумента, 
										Регистратор, 
										Движения, 
										Отказ) Экспорт

    // Подготовим ТаблицаСебестоимостьСписанныхТоваров к виду, используемому в процедурах принятия к учету ОС
    // по аналогии с тем, какую таблицу формирует УчетТоваровСервер.ПолучитьПустуюТаблицуСписанныеТовары().
    
	ПустаяТаблицаСписанныеТовары = УчетТоваров.ПолучитьПустуюТаблицуСписанныеТовары();

	ТаблицаСебестоимостьСписанныхТоваров.Колонки.ПодразделениеОС.Имя 			= "КорПодразделение";
	ТаблицаСебестоимостьСписанныхТоваров.Колонки.ОсновноеСредство.Имя 			= "КорСубконто1";
	ТаблицаСебестоимостьСписанныхТоваров.Колонки.СчетУчетаОС.Имя 				= "КорСчетСписания";
	ТаблицаСебестоимостьСписанныхТоваров.Колонки.ПодразделениеНоменклатуры.Имя	= "Подразделение";
	ТаблицаСебестоимостьСписанныхТоваров.Колонки.СуммаВРОС.Имя					= "СуммаКорСписанияВР";
	ТаблицаСебестоимостьСписанныхТоваров.Колонки.СуммаНУОС.Имя					= "СуммаКорСписанияНУ";
	ТаблицаСебестоимостьСписанныхТоваров.Колонки.СуммаПРОС.Имя					= "СуммаКорСписанияПР";
	ТаблицаСебестоимостьСписанныхТоваров.Колонки.СтоимостьБУ.Имя				= "СуммаСписания";
	ТаблицаСебестоимостьСписанныхТоваров.Колонки.СуммаВРНоменклатуры.Имя		= "СуммаСписанияВР";
	ТаблицаСебестоимостьСписанныхТоваров.Колонки.СуммаНУНоменклатуры.Имя		= "СуммаСписанияНУ";
	ТаблицаСебестоимостьСписанныхТоваров.Колонки.СуммаПРНоменклатуры.Имя		= "СуммаПРНоменклатуры";
	ТаблицаСебестоимостьСписанныхТоваров.Колонки.СчетУчетаНоменклатуры.Имя		= "СчетУчета";
    
	Для Каждого Колонка Из ПустаяТаблицаСписанныеТовары.Колонки Цикл
		Если ТаблицаСебестоимостьСписанныхТоваров.Колонки.Найти(Колонка.Имя) = Неопределено Тогда
			ТаблицаСебестоимостьСписанныхТоваров.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
		КонецЕсли;
	КонецЦикла;
    
	// Заполним одинаковые значения.
	ВидСубконтоОсновныеСредства = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства;
    ТаблицаСебестоимостьСписанныхТоваров.ЗаполнитьЗначения(ВидСубконтоОсновныеСредства, "ВидКорСубконто1");
    ТаблицаСебестоимостьСписанныхТоваров.ЗаполнитьЗначения("ОС", "ИмяСписка");
	ТаблицаСебестоимостьСписанныхТоваров.ЗаполнитьЗначения(1, "Количество");
	ТаблицаСебестоимостьСписанныхТоваров.ЗаполнитьЗначения(НСтр("ru = 'Основные средства'"), "СинонимСписка");
	ТаблицаСебестоимостьСписанныхТоваров.ЗаполнитьЗначения(0, "Себестоимость");
	
	// Пронумеруем таблицу.
	Для Н = 1 По ТаблицаСебестоимостьСписанныхТоваров.Количество() Цикл
		СтрокаТаблицы 				= ТаблицаСебестоимостьСписанныхТоваров[Н - 1];
		СтрокаТаблицы.НомерСтроки 	= Н;
	КонецЦикла;
	
	// Построим таблицы с необходимыми данными по учету ОС 
	// по аналогии с текстами в менеджере документа ПринятиеКУчетуОС.
	
	Запрос = Новый Запрос;
    Запрос.УстановитьПараметр("Организация", 	Организация);
	Запрос.УстановитьПараметр("ТаблицаОС", 		ТаблицаСебестоимостьСписанныхТоваров.Скопировать(,"КорСубконто1, НомерСтроки"));
	Запрос.УстановитьПараметр("ДатаКон", 		КонецДня(ДатаДокумента));
	Запрос.УстановитьПараметр("ПлательщикНалогаНаПрибыль", УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, ДатаДокумента));
	Запрос.УстановитьПараметр("Регистратор", 	Регистратор);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТабОС.КорСубконто1 КАК Справочник.ОсновныеСредства) КАК ОсновноеСредство,
	|	ТабОС.НомерСтроки КАК НомерСтроки
	|
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	&ТаблицаОС КАК ТабОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство" 
	+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета()
	+ ПолучитьТекстЗапросаПринятиеКУчетуОСОтложенноеПроведениеБУ()
	+ ПолучитьТекстЗапросаПринятиеКУчетуОСОтложенноеПроведениеНУ()
	+ ПолучитьТекстЗапросаПринятиеКУчетуОСОтложенноеПроведениеУСН()
	+ 
	"ВЫБРАТЬ
	|
	|	// ОсновныеСредства
	|
	|	ТаблицаОС.НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство,
	|	ЕСТЬNULL(ВТ_ПервоначальныеСведенияОСБухгалтерскийУчет.ИнвентарныйНомер, """") КАК ИнвентарныйНомер,
	|	
	|
	|	// ПервоначальныеСведенияОСБУ
	|
	|	&Регистратор КАК Регистратор,
	|	&ДатаКон КАК Период,
	|   ВТ_ПервоначальныеСведенияОСБухгалтерскийУчет.Регистратор КАК ДокументПринятияКУчету,
	|	&Организация КАК Организация,
	|	&ПлательщикНалогаНаПрибыль КАК ПлательщикНалогаНаПрибыль,
	|	ВТ_ПервоначальныеСведенияОСБухгалтерскийУчет.ПорядокПогашенияСтоимости КАК ПорядокПогашенияСтоимости,
	|	ВТ_ПервоначальныеСведенияОСБухгалтерскийУчет.СпособПоступления КАК СпособПоступления,
	|	ВТ_ПервоначальныеСведенияОСБухгалтерскийУчет.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
	|	ЕСТЬNULL(ВТ_ПервоначальныеСведенияОСНалоговыйУчет.ПроцентАмортизационнойПремии, 0) КАК ПроцентАмортизационнойПремии,
	|	ВТ_ПервоначальныеСведенияОСБухгалтерскийУчет.ПараметрВыработки КАК ПараметрВыработки,
	|	ИСТИНА КАК ИспользоватьСуммыСписания,
	|	0 КАК СуммаБУ,
	|	0 КАК СуммаНУ,
	|	0 КАК СуммаПР,
	|	0 КАК СуммаВР,
	|	ЕСТЬNULL(ВТ_ПервоначальныеСведенияОСНалоговыйУчетУСН.СуммаУСН, 0) КАК СуммаУСН,
	|	0 КАК СуммаУСН,
	|
	|
	| 	// ПервоначальныеСведенияОСНУ
	|
	|	ЕСТЬNULL(ВТ_ПараметрыАмортизацииОСНалоговыйУчет.СрокПолезногоИспользования, 0) КАК СрокПолезногоИспользованияНУ,
	|	ВТ_ПервоначальныеСведенияОСНалоговыйУчет.ПорядокВключенияСтоимостиВСоставРасходов КАК ПорядокВключенияСтоимостиВСоставРасходовНУ,
	|
	|	
	|	// ПервоначальныеСведенияОСУСН
	|
	|	ЕСТЬNULL(ВТ_ПервоначальныеСведенияОСНалоговыйУчетУСН.СрокПолезногоИспользованияУСН, 0) КАК СрокПолезногоИспользованияУСН,
	|	ВТ_ПервоначальныеСведенияОСНалоговыйУчетУСН.ПорядокВключенияСтоимостиВСоставРасходовУСН КАК ПорядокВключенияСтоимостиВСоставРасходовУСН,
	|	ВТ_ПервоначальныеСведенияОСНалоговыйУчетУСН.ДатаПриобретения КАК ДатаПриобретения,
	|	0 КАК СрокПолезногоИспользованияУСН,
	|	НЕОПРЕДЕЛЕНО КАК ПорядокВключенияСтоимостиВСоставРасходовУСН,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаПриобретения,
	|
	|	
	|	// ПараметрыАмортизацииОСБУ
	|
	|	ЕСТЬNULL(ВТ_ПараметрыАмортизацииОСБухгалтерскийУчет.ГодоваяНормаАмортизации, 0) КАК ГодоваяНормаАмортизации,
	|	ЕСТЬNULL(ВТ_ПараметрыАмортизацииОСБухгалтерскийУчет.КоэффициентУскорения, 0) КАК КоэффициентУскорения,
	|	ЕСТЬNULL(ВТ_ПараметрыАмортизацииОСБухгалтерскийУчет.ПредполагаемыйОбъемПродукции, 0) КАК ПредполагаемыйОбъемПродукции,
	|	ЕСТЬNULL(ВТ_ПараметрыАмортизацииОСБухгалтерскийУчет.СрокПолезногоИспользования, 0) КАК СрокПолезногоИспользованияБУ,
	|
	|
	|	// АмортизационнаяПремия - все поля выбраны ранее
	|	
	|	// ВключениеВРасходыПриПринятииКУчетуНУ
	|	ВТ_ПервоначальныеСведенияОСНалоговыйУчет.СпособОтраженияРасходовПриВключенииВСтоимость КАК СпособыОтраженияРасходовПоАмортизации,
	|	ВТ_СчетаБухгалтерскогоУчетаОС.СчетУчета КАК СчетУчета
	|
	|ИЗ
	|	ТаблицаОС
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПервоначальныеСведенияОСБухгалтерскийУчет
	|		ПО ТаблицаОС.ОсновноеСредство = ВТ_ПервоначальныеСведенияОСБухгалтерскийУчет.ОсновноеСредство
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПараметрыАмортизацииОСБухгалтерскийУчет
	|		ПО ТаблицаОС.ОсновноеСредство = ВТ_ПараметрыАмортизацииОСБухгалтерскийУчет.ОсновноеСредство
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПервоначальныеСведенияОСНалоговыйУчет
	|		ПО ТаблицаОС.ОсновноеСредство = ВТ_ПервоначальныеСведенияОСНалоговыйУчет.ОсновноеСредство
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПараметрыАмортизацииОСНалоговыйУчет
	|		ПО ТаблицаОС.ОсновноеСредство = ВТ_ПараметрыАмортизацииОСНалоговыйУчет.ОсновноеСредство
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПервоначальныеСведенияОСНалоговыйУчетУСН
	|		ПО ТаблицаОС.ОсновноеСредство = ВТ_ПервоначальныеСведенияОСНалоговыйУчетУСН.ОсновноеСредство
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетаБухгалтерскогоУчетаОС
	|		ПО ТаблицаОС.ОсновноеСредство = ВТ_СчетаБухгалтерскогоУчетаОС.ОсновноеСредство
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки
	|";	
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка			 = РезультатЗапроса.Выбрать();
	
	// Подготовим таблицы для передачи в качестве параметров.
	
	// Таблица для имитации шапки документа.
	ТаблицаРеквизиты = Новый ТаблицаЗначений;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ТаблицаРеквизиты.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	КонецЦикла;
	ТаблицаРеквизиты.Добавить();
	
	ПараметрыПроведения = Новый Структура("ОсновныеСредства, ПервоначальныеСведенияОСБУ,
										 |ПервоначальныеСведенияОСНУ, ПервоначальныеСведенияОСУСН,
										 |ПараметрыАмортизацииОСБУ, АмортизационнаяПремия,
										 |ВключениеВРасходыПриПринятииКУчетуНУ, ПараметрыАмортизацииОСНУ,
										 |РеквизитыНДС");
	
	// Таблицы для отдельных регистров, в которых учитываются ОС.
	
	// В документе ПринятиеКУчетуОС	это таблица по табличной части,
	// в текущей процедуре - одна строка запроса.
	СписокКолонок = "НомерСтроки, ОсновноеСредство, ИнвентарныйНомер";
	ПараметрыПроведения.ОсновныеСредства = ТаблицаРеквизиты.СкопироватьКолонки(СписокКолонок); 	
	ПараметрыПроведения.ОсновныеСредства.Добавить();
	
	
	СписокКолонок = "Регистратор, Период, Организация, ПлательщикНалогаНаПрибыль, 
					|ПорядокПогашенияСтоимости, СпособПоступления, СпособНачисленияАмортизации,
					|ПроцентАмортизационнойПремии, ПараметрВыработки, ИспользоватьСуммыСписания,
					|СуммаБУ, СуммаНУ, СуммаПР, СуммаВР, СуммаУСН";
	ПараметрыПроведения.ПервоначальныеСведенияОСБУ = ТаблицаРеквизиты.СкопироватьКолонки(СписокКолонок);  // таблица из шапки документа - одна строка
	ПараметрыПроведения.ПервоначальныеСведенияОСБУ.Добавить();
	
	
	СписокКолонок = "Регистратор, Период, Организация, ПлательщикНалогаНаПрибыль,
					|СрокПолезногоИспользованияНУ, ПорядокВключенияСтоимостиВСоставРасходовНУ";
	ПараметрыПроведения.ПервоначальныеСведенияОСНУ = ТаблицаРеквизиты.СкопироватьКолонки(СписокКолонок); // таблица из шапки - одна строка
	ПараметрыПроведения.ПервоначальныеСведенияОСНУ.Колонки.СрокПолезногоИспользованияНУ.Имя = "СрокПолезногоИспользования";
	ПараметрыПроведения.ПервоначальныеСведенияОСНУ.Колонки.ПорядокВключенияСтоимостиВСоставРасходовНУ.Имя = "ПорядокВключенияСтоимостиВСоставРасходов";
	ПараметрыПроведения.ПервоначальныеСведенияОСНУ.Добавить();
	
	
	СписокКолонок = "Регистратор, Период, Организация,
					|СрокПолезногоИспользованияУСН, ПорядокВключенияСтоимостиВСоставРасходовУСН, ДатаПриобретения";
	ПараметрыПроведения.ПервоначальныеСведенияОСУСН = ТаблицаРеквизиты.СкопироватьКолонки(СписокКолонок); //таблица из шапки - одна строка
	ПараметрыПроведения.ПервоначальныеСведенияОСУСН.Добавить();
	
	
	СписокКолонок = "Регистратор, Период, Организация, 
					|ГодоваяНормаАмортизации, КоэффициентУскорения, ПредполагаемыйОбъемПродукции, 
					|СрокПолезногоИспользованияБУ";
	ПараметрыПроведения.ПараметрыАмортизацииОСБУ = ТаблицаРеквизиты.СкопироватьКолонки(СписокКолонок); // таблица из шапки - одна строка
	ПараметрыПроведения.ПараметрыАмортизацииОСБУ.Колонки.СрокПолезногоИспользованияБУ.Имя = "СрокПолезногоИспользования";
	ПараметрыПроведения.ПараметрыАмортизацииОСБУ.Добавить();
	
	
	СписокКолонок = "Период, Организация, 
					|ПроцентАмортизационнойПремии";
	ПараметрыПроведения.АмортизационнаяПремия = ТаблицаРеквизиты.СкопироватьКолонки(СписокКолонок); // таблица из шапки - одна строка
	ПараметрыПроведения.АмортизационнаяПремия.Колонки.Добавить("Регистратор"); // Тип регистратора для таблицы амортизационной премии переопределяется.
	ПараметрыПроведения.АмортизационнаяПремия.Колонки.Добавить("Подразделение", БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	ПараметрыПроведения.АмортизационнаяПремия.Добавить();
	
	
	СписокКолонок = "Регистратор, Период, Организация, ПлательщикНалогаНаПрибыль,
					|ПорядокВключенияСтоимостиВСоставРасходовНУ, СпособыОтраженияРасходовПоАмортизации,
					|СчетУчета, ПорядокПогашенияСтоимости";
	ПараметрыПроведения.ВключениеВРасходыПриПринятииКУчетуНУ = ТаблицаРеквизиты.СкопироватьКолонки(СписокКолонок); // таблица из шапки - одна строка
	ПараметрыПроведения.ВключениеВРасходыПриПринятииКУчетуНУ.Колонки.ПорядокВключенияСтоимостиВСоставРасходовНУ.Имя = "ПорядокВключенияСтоимостиВСоставРасходов";
	ПараметрыПроведения.ВключениеВРасходыПриПринятииКУчетуНУ.Колонки.ПорядокПогашенияСтоимости.Имя = "ПорядокПогашенияСтоимостиБУ";
	ПараметрыПроведения.ВключениеВРасходыПриПринятииКУчетуНУ.Колонки.Добавить("Подразделение", БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	ПараметрыПроведения.ВключениеВРасходыПриПринятииКУчетуНУ.Колонки.Добавить("Содержание", Новый ОписаниеТипов("Строка"));
	ПараметрыПроведения.ВключениеВРасходыПриПринятииКУчетуНУ.Колонки.Добавить("ИмяСубконто", Новый ОписаниеТипов("Строка"));
	ПараметрыПроведения.ВключениеВРасходыПриПринятииКУчетуНУ.Колонки.Добавить("ИмяСписка", Новый ОписаниеТипов("Строка"));
	
	СтрокаТаблицы = ПараметрыПроведения.ВключениеВРасходыПриПринятииКУчетуНУ.Добавить();
	СтрокаТаблицы.Содержание 	= НСтр("ru = 'Включение стоимости в состав расходов (НУ)'");
	СтрокаТаблицы.ИмяСубконто 	= "ОсновныеСредства";
	СтрокаТаблицы.ИмяСписка 	= "ОС";
						                               
	
	СписокКолонок = "Регистратор, Период, Организация, СрокПолезногоИспользованияНУ, ПлательщикНалогаНаПрибыль";
	ПараметрыПроведения.ПараметрыАмортизацииОСНУ = ТаблицаРеквизиты.СкопироватьКолонки(СписокКолонок); // таблица из шапки - одна строка
	ПараметрыПроведения.ПараметрыАмортизацииОСНУ.Колонки.СрокПолезногоИспользованияНУ.Имя = "СрокПолезногоИспользования";
	ПараметрыПроведения.ПараметрыАмортизацииОСНУ.Добавить();
	
	СписокКолонок = "Регистратор, Период, Организация";
	ПараметрыПроведения.РеквизитыНДС = ТаблицаРеквизиты.СкопироватьКолонки(СписокКолонок); // таблица из шапки - одна строка
	ПараметрыПроведения.РеквизитыНДС.Колонки.Добавить("Подразделение", БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	ПараметрыПроведения.РеквизитыНДС.Добавить();
	
	// Для передачи в качестве параметра создадим копию таблицы списанных товаров.
	ТаблицаСписанныеТовары = ТаблицаСебестоимостьСписанныхТоваров.СкопироватьКолонки();
	ТаблицаСписанныеТовары.Колонки.Добавить("НомерСтрокиДокумента");
	ТаблицаСписанныеТовары.Добавить();
	
	// Обработку результата запроса необходимо производить по каждому объекту ОС отдельно, 
	// т.к. у разных объектов ОС могут быть разные параметры (сроки, порядок включения в стоимость и т.п.).
	
	Пока Выборка.Следующий() Цикл
	
		// Позиционируемся в таблице списанных товаров.
		СтрокаТаблицыСписанныеТовары = ТаблицаСебестоимостьСписанныхТоваров[Выборка.НомерСтроки - 1];
		ЗаполнитьЗначенияСвойств(ТаблицаСписанныеТовары[0], СтрокаТаблицыСписанныеТовары);
		ТаблицаСписанныеТовары[0].НомерСтроки = 1;
		ТаблицаСписанныеТовары[0].НомерСтрокиДокумента = 1;
	
		// Заполним таблицы.
		ЗаполнитьЗначенияСвойств(ПараметрыПроведения.ОсновныеСредства[0], Выборка);
		
		
		ЗаполнитьЗначенияСвойств(ПараметрыПроведения.ПервоначальныеСведенияОСБУ[0], Выборка);
		
		
		ЗаполнитьЗначенияСвойств(ПараметрыПроведения.ПервоначальныеСведенияОСНУ[0], Выборка);
		ПараметрыПроведения.ПервоначальныеСведенияОСНУ[0].СрокПолезногоИспользования = Выборка.СрокПолезногоИспользованияНУ;
		ПараметрыПроведения.ПервоначальныеСведенияОСНУ[0].ПорядокВключенияСтоимостиВСоставРасходов = Выборка.ПорядокВключенияСтоимостиВСоставРасходовНУ;
		
		
		ЗаполнитьЗначенияСвойств(ПараметрыПроведения.ПервоначальныеСведенияОСУСН[0], Выборка);
		
		
		ЗаполнитьЗначенияСвойств(ПараметрыПроведения.ПараметрыАмортизацииОСБУ[0], Выборка);
		ПараметрыПроведения.ПараметрыАмортизацииОСБУ[0].СрокПолезногоИспользования = Выборка.СрокПолезногоИспользованияБУ;
		
		
		ЗаполнитьЗначенияСвойств(ПараметрыПроведения.АмортизационнаяПремия[0], Выборка);
		ПараметрыПроведения.АмортизационнаяПремия[0].Подразделение 	= СтрокаТаблицыСписанныеТовары.КорПодразделение; // Подразделение местонахождения ОС
		ПараметрыПроведения.АмортизационнаяПремия[0].Регистратор	= Выборка.ДокументПринятияКУчету; // Для аморт. премии регистратор должен быть ПринятиеКУчетуОС, 
																								      // т.к. записывается в субконто счета КВ.
		
		
		ЗаполнитьЗначенияСвойств(ПараметрыПроведения.ВключениеВРасходыПриПринятииКУчетуНУ[0], Выборка);
		ПараметрыПроведения.ВключениеВРасходыПриПринятииКУчетуНУ[0].ПорядокВключенияСтоимостиВСоставРасходов = Выборка.ПорядокВключенияСтоимостиВСоставРасходовНУ;
		ПараметрыПроведения.ВключениеВРасходыПриПринятииКУчетуНУ[0].ПорядокПогашенияСтоимостиБУ = Выборка.ПорядокПогашенияСтоимости;
		ПараметрыПроведения.ВключениеВРасходыПриПринятииКУчетуНУ[0].Подразделение = СтрокаТаблицыСписанныеТовары.КорПодразделение; // Подразделение местонахождения ОС
	
		
		ЗаполнитьЗначенияСвойств(ПараметрыПроведения.ПараметрыАмортизацииОСНУ[0], Выборка);
		ПараметрыПроведения.ПараметрыАмортизацииОСНУ[0].СрокПолезногоИспользования = Выборка.СрокПолезногоИспользованияНУ;
		
		
		ЗаполнитьЗначенияСвойств(ПараметрыПроведения.РеквизитыНДС[0], Выборка);
		ПараметрыПроведения.РеквизитыНДС[0].Подразделение = СтрокаТаблицыСписанныеТовары.Подразделение; // подразделение номенклатуры
		
		
		// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ

		// Таблица первоначальных сведений ОС
		ТаблицаПервоначальныеСведенияОС = ПодготовитьТаблицуПервоначальныеСведенияОС(
			ПараметрыПроведения.ОсновныеСредства,
			ТаблицаСписанныеТовары,
			ПараметрыПроведения.ПервоначальныеСведенияОСБУ,
			Отказ);

		// Таблица первоначальных сведений ОС (НУ)
		ТаблицаПервоначальныеСведенияОСНУ = ПодготовитьТаблицуПервоначальныеСведенияОСНУ(
			ТаблицаПервоначальныеСведенияОС,
			ПараметрыПроведения.ПервоначальныеСведенияОСНУ,
			Отказ);

		// Таблица первоначальных сведений ОС (УСН)
		ТаблицаПервоначальныеСведенияОСУСН = ПодготовитьТаблицуПервоначальныеСведенияОСУСН(
			ТаблицаПервоначальныеСведенияОС,
			ПараметрыПроведения.ПервоначальныеСведенияОСУСН,
			Отказ);
			
		// Таблица параметров амортизации (БУ)
		ТаблицаПараметровАмортизацииБУ = ПодготовитьТаблицуПараметрыАмортизацииОСБУ(
			ТаблицаПервоначальныеСведенияОС,
			ПараметрыПроведения.ПараметрыАмортизацииОСБУ,
			Отказ);

		// Таблица амортизационной премии
		ТаблицаАмортизационнойПремии = ПодготовитьТаблицуАмортизационнаяПремия(
			ТаблицаПервоначальныеСведенияОСНУ,
			ПараметрыПроведения.АмортизационнаяПремия,
			Отказ);

		// Таблица включения в расходы при принятии к учету (НУ)
		ТаблицаЗатратПоВключениюСтоимостиВСоставРасходовНУ = ПодготовитьТаблицуСписаниеНаРасходыНУ(
			ТаблицаПервоначальныеСведенияОС,
			ПараметрыПроведения.ВключениеВРасходыПриПринятииКУчетуНУ,
			Отказ);

		// Таблица параметров амортизации (НУ)
		ТаблицаПараметровАмортизацииНУ = ПодготовитьТаблицуПараметрыАмортизацииОСНУ(
			ТаблицаПервоначальныеСведенияОСНУ,
			ТаблицаЗатратПоВключениюСтоимостиВСоставРасходовНУ,
			ПараметрыПроведения.ПараметрыАмортизацииОСНУ,
			Отказ);
			
		// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
		СформироватьДвиженияРегистрацияПервоначальныхСведенийОСБУ(
			ТаблицаПервоначальныеСведенияОС,
			ПараметрыПроведения.ПервоначальныеСведенияОСБУ,
			Движения, Отказ);

		СформироватьДвиженияИзмененияПараметровАмортизацииОСБУ(
			ТаблицаПараметровАмортизацииБУ,
			ПараметрыПроведения.ПараметрыАмортизацииОСБУ,
			Движения, Отказ);

		СформироватьДвиженияИзменениеПараметровАмортизацииОСНУ(
			ТаблицаПараметровАмортизацииНУ,
			ПараметрыПроведения.ПараметрыАмортизацииОСНУ,
			Движения, Отказ);

		СформироватьДвиженияОтражениеАмортизационнойПремии(
			ТаблицаАмортизационнойПремии,
			ПараметрыПроведения.АмортизационнаяПремия,
			Движения, Отказ);

		УправлениеВнеоборотнымиАктивами.СформироватьДвиженияНачислениеАмортизации(
			ТаблицаЗатратПоВключениюСтоимостиВСоставРасходовНУ,
			ПараметрыПроведения.ВключениеВРасходыПриПринятииКУчетуНУ,
			Движения, Отказ);

		СформироватьДвиженияРегистрацияПервоначальныхСведенийОСНУ(
			ТаблицаПервоначальныеСведенияОСНУ,
			ПараметрыПроведения.ПервоначальныеСведенияОСНУ,
			Движения, Отказ);
			
		СформироватьДвиженияРегистрацияПервоначальныхСведенийОСУСН(
			ТаблицаПервоначальныеСведенияОСУСН,
			ПараметрыПроведения.ПервоначальныеСведенияОСУСН,
			Движения, Отказ);
			
		// Учет НДС
		УчетНДС.СформироватьДвиженияПринятиеНаУчетОС(
			ТаблицаСписанныеТовары, // вместо ПараметрыПроведения.ТоварыНДС передаем ту же таблицу списанных товаров, по графам совпадают.
			ТаблицаСписанныеТовары,
			ПараметрыПроведения.РеквизитыНДС,
			Движения, Отказ);
		
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьТекстЗапросаПринятиеКУчетуОСОтложенноеПроведениеБУ()

	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ПервоначальныеСведенияОСБухгалтерскийУчет.ОсновноеСредство КАК ОсновноеСредство,
	|	ПервоначальныеСведенияОСБухгалтерскийУчет.Регистратор КАК Регистратор,
	|	ПервоначальныеСведенияОСБухгалтерскийУчет.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	ПервоначальныеСведенияОСБухгалтерскийУчет.ПорядокПогашенияСтоимости КАК ПорядокПогашенияСтоимости,
	|	ПервоначальныеСведенияОСБухгалтерскийУчет.СпособПоступления КАК СпособПоступления,
	|	ПервоначальныеСведенияОСБухгалтерскийУчет.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
	|	ПервоначальныеСведенияОСБухгалтерскийУчет.ПараметрВыработки
	|
	|ПОМЕСТИТЬ ВТ_ПервоначальныеСведенияОСБухгалтерскийУчет
	|
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|						&ДатаКон, 
	|						Организация = &Организация
	|							И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ ТаблицаОС)) КАК ПервоначальныеСведенияОСБухгалтерскийУчет
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыАмортизацииОСБухгалтерскийУчет.ОсновноеСредство,
	|	ПараметрыАмортизацииОСБухгалтерскийУчет.КоэффициентАмортизации КАК ГодоваяНормаАмортизации,
	|	ПараметрыАмортизацииОСБухгалтерскийУчет.КоэффициентУскорения КАК КоэффициентУскорения,
	|	ПараметрыАмортизацииОСБухгалтерскийУчет.ОбъемПродукцииРабот КАК ПредполагаемыйОбъемПродукции,
	|	ПараметрыАмортизацииОСБухгалтерскийУчет.СрокПолезногоИспользования КАК СрокПолезногоИспользования
	|
	|ПОМЕСТИТЬ ВТ_ПараметрыАмортизацииОСБухгалтерскийУчет
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|						&ДатаКон,
	|						Организация = &Организация
	|							И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ ТаблицаОС)) КАК ПараметрыАмортизацииОСБухгалтерскийУчет
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаБухгалтерскогоУчетаОС.ОсновноеСредство,
	|	СчетаБухгалтерскогоУчетаОС.СчетУчета,
	|	СчетаБухгалтерскогоУчетаОС.СчетНачисленияАмортизации
	|
	|ПОМЕСТИТЬ ВТ_СчетаБухгалтерскогоУчетаОС
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|						&ДатаКон,
	|						Организация = &Организация
	|							И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ ТаблицаОС)) КАК СчетаБухгалтерскогоУчетаОС
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ПолучитьТекстЗапросаПринятиеКУчетуОСОтложенноеПроведениеНУ()	
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ПервоначальныеСведенияОСНалоговыйУчет.ОсновноеСредство,
	|	ПервоначальныеСведенияОСНалоговыйУчет.ПорядокВключенияСтоимостиВСоставРасходов,
	|	ВЫБОР
	|		КОГДА ПервоначальныеСведенияОСНалоговыйУчет.ПорядокВключенияСтоимостиВСоставРасходов = ЗНАЧЕНИЕ(Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации)
	|			ТОГДА ЕСТЬNULL(ВЫРАЗИТЬ(ПервоначальныеСведенияОСНалоговыйУчет.Регистратор КАК Документ.ПринятиеКУчетуОС).ПроцентКапитальныхВложенийВключаемыхВРасходыНУ, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПроцентАмортизационнойПремии,
	|	ВЫРАЗИТЬ(ПервоначальныеСведенияОСНалоговыйУчет.Регистратор КАК Документ.ПринятиеКУчетуОС).СпособОтраженияРасходовПриВключенииВСтоимость КАК СпособОтраженияРасходовПриВключенииВСтоимость
	|
	|ПОМЕСТИТЬ ВТ_ПервоначальныеСведенияОСНалоговыйУчет
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчет.СрезПоследних(
	|						&ДатаКон,
	|						Организация = &Организация
	|							И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ ТаблицаОС)) КАК ПервоначальныеСведенияОСНалоговыйУчет
	|
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыАмортизацииОСНалоговыйУчет.ОсновноеСредство,
	|	ПараметрыАмортизацииОСНалоговыйУчет.СрокПолезногоИспользования
	|
	|ПОМЕСТИТЬ ВТ_ПараметрыАмортизацииОСНалоговыйУчет
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииОСНалоговыйУчет.СрезПоследних(
	|						&ДатаКон,
	|						Организация = &Организация
	|							И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ ТаблицаОС)) КАК ПараметрыАмортизацииОСНалоговыйУчет
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции	
	
Функция ПолучитьТекстЗапросаПринятиеКУчетуОСОтложенноеПроведениеУСН()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ПервоначальныеСведенияОСНалоговыйУчетУСН.ОсновноеСредство КАК ОсновноеСредство,
	|	ПервоначальныеСведенияОСНалоговыйУчетУСН.ПервоначальнаяСтоимостьУСН КАК СуммаУСН,
	|	ПервоначальныеСведенияОСНалоговыйУчетУСН.СрокПолезногоИспользования КАК СрокПолезногоИспользованияУСН,
	|	ПервоначальныеСведенияОСНалоговыйУчетУСН.ПорядокВключенияСтоимостиВСоставРасходовУСН КАК ПорядокВключенияСтоимостиВСоставРасходовУСН,
	|	ПервоначальныеСведенияОСНалоговыйУчетУСН.ДатаПриобретения КАК ДатаПриобретения
	|
	|ПОМЕСТИТЬ ВТ_ПервоначальныеСведенияОСНалоговыйУчетУСН
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчетУСН.СрезПоследних(
	|						&ДатаКон,
	|						Организация = &Организация
	|							И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ ТаблицаОС)) КАК ПервоначальныеСведенияОСНалоговыйУчетУСН
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|";	
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

// РАСЧЕТ АМОРТИЗАЦИИ ОС

Функция ПодготовитьТаблицуАмортизацияОС(ТаблицаОС, ТаблицаРеквизиты, Отказ) Экспорт

	ДокументОбъект = Неопределено;

	Параметры = ПодготовитьПараметрыАмортизацияОС(ТаблицаОС, ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	ТаблицаАмортизации = ПолучитьПустуюТаблицуАмортизацииОС();

	ОтражатьВНалоговомУчете 		= 	УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаПБУ18					=	УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);
	МетодНачисленияАмортизацииНУ	=	УчетнаяПолитика.МетодНачисленияАмортизацииНУ(Реквизиты.Организация, Реквизиты.Период);

	Если ОтражатьВНалоговомУчете И НЕ ЗначениеЗаполнено(МетодНачисленияАмортизацииНУ) Тогда
		Если Реквизиты.ВыдаватьСообщения Тогда
			ШаблонСообщения = НСтр("ru = 'Не указан метод начисления амортизации (НУ) в учетной политике организации %1
				|Укажите метод начисления амортизации на %2.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Реквизиты.Организация,
				Формат(НачалоГода(Реквизиты.ДатаРасчета)));
			СсылкаДляПерехода = БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьНавигационнуюСсылкуНаУчетнуюПолитикуОрганизации();
			БухгалтерскийУчетПереопределяемый.СообщитьОбОшибкеРегОперацииСНавигацией(ТекстСообщения, СсылкаДляПерехода, Отказ,
				Реквизиты.Регистратор);
		КонецЕсли;
		Возврат ТаблицаАмортизации;
	КонецЕсли;

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	Запрос.УстановитьПараметр("Организация",                  Реквизиты.Организация);
	Запрос.УстановитьПараметр("НачалоГода",                   НачалоГода(Реквизиты.ДатаРасчета));
	Запрос.УстановитьПараметр("НачалоПериодаДата",            НачалоМесяца(Реквизиты.ДатаРасчета));
	Запрос.УстановитьПараметр("НачалоПериода",                Новый Граница(НачалоМесяца(Реквизиты.ДатаРасчета), ВидГраницы.Исключая));
	Если ТипЗнч(Реквизиты.Регистратор) = Тип("ДокументСсылка.ПеремещениеОС") Тогда
		Запрос.УстановитьПараметр("КонецПериодаДата",         Реквизиты.ДатаРасчета);
		Запрос.УстановитьПараметр("КонецПериода",             Новый Граница(Реквизиты.ДатаРасчета, ВидГраницы.Исключая));
	Иначе
		Запрос.УстановитьПараметр("КонецПериодаДата",         КонецМесяца(Реквизиты.ДатаРасчета));
		Запрос.УстановитьПараметр("КонецПериода",             КонецМесяца(Реквизиты.ДатаРасчета));
	КонецЕсли;
	Запрос.УстановитьПараметр("Период",                       Реквизиты.ДатаРасчета);
	Запрос.УстановитьПараметр("ДатаПереходаКЛинейномуМетоду", УправлениеВнеоборотнымиАктивами.ПолучитьДатуПереходаКЛинейномуМетоду(Реквизиты.ДатаРасчета, Реквизиты.Организация));

	// Получим список основных средств для расчета амортизации
	Если Параметры.ТаблицаОС.Количество() > 0 Тогда
		Запрос.УстановитьПараметр("ТаблицаОС", Параметры.ТаблицаОС);
		Запрос.Текст = ПолучитьТекстЗапросаАмортизацияОСНеСнятыеСУчетаОСПоТаблице();
	Иначе
		Запрос.Текст = ПолучитьТекстЗапросаАмортизацияОСНеСнятыеСУчетаОСВсе();
	КонецЕсли;
	Запрос.Выполнить();

	Запрос.Текст = ПолучитьТекстЗапросаАмортизацияОСНачислениеАмортизации();
	Запрос.Выполнить();

	Запрос.Текст =
	"ВЫБРАТЬ
	|	НачислениеАмортизацииБУ.ОсновноеСредство КАК ОсновноеСредство
	|ИЗ
	|	НачислениеАмортизацииБУ КАК НачислениеАмортизацииБУ
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	НачислениеАмортизацииНУ.ОсновноеСредство
	|ИЗ
	|	НачислениеАмортизацииНУ КАК НачислениеАмортизацииНУ";
	ТаблицаОСНачислениеАмортизации = Запрос.Выполнить().Выгрузить();

	// Получим признак возможности начисления амортизации по НУ только линейным методом
	ТаблицаПризнаков = ПодготовитьТаблицуТолькоЛинейныйМетодНУ(ТаблицаОСНачислениеАмортизации, Отказ);

	Запрос.УстановитьПараметр("ТаблицаПризнаков", ТаблицаПризнаков);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПризнаков.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаПризнаков.ТолькоЛинейный
	|ПОМЕСТИТЬ СписокОС
	|ИЗ
	|	&ТаблицаПризнаков КАК ТаблицаПризнаков
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";
	Запрос.Выполнить();

	// Получим дополнительные параметры из регистров сведений
	Запрос.Текст = ПолучитьТекстЗапросаАмортизацияОСПервоначальныеСведения()
		+ ПолучитьТекстЗапросаАмортизацияОСПараметрыАмортизации()
		+ ПолучитьТекстЗапросаАмортизацияОСПараметрыОтраженияВУчете()
		+ ПолучитьТекстЗапросаАмортизацияОСПрочиеПараметры();

	Запрос.Выполнить();

	// Получим таблицу графиков амортизации
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГрафикиАмортизацииБУ.ГрафикАмортизации
	|ИЗ
	|	ГрафикиАмортизацииБУ КАК ГрафикиАмортизацииБУ";
	СписокГрафиков = Запрос.Выполнить().Выгрузить();
	ТаблицаГрафиков = ПолучитьТаблицуГрафиковАмортизации(СписокГрафиков);

	// Соберем все параметры в одну таблицу
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписокОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ЕСТЬNULL(НачислениеАмортизацииБУ.НачислятьАмортизациюБУ, ЛОЖЬ) КАК НачислятьАмортизациюБУ,
	|	ЕСТЬNULL(НачислениеАмортизацииНУ.НачислятьАмортизациюНУ, ЛОЖЬ) КАК НачислятьАмортизациюНУ,
	|	ЕСТЬNULL(ВыработкаОС.ОбъемВыработки, 0) КАК Количество,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБУ.СрокИспользованияДляВычисленияАмортизации, 0) КАК СрокИспользованияДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБУ.СтоимостьДляВычисленияАмортизации, 0) КАК СтоимостьДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБУ.ОбъемПродукцииРаботДляВычисленияАмортизации, 0) КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБУ.КоэффициентАмортизации, 0) КАК КоэффициентАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБУ.КоэффициентУскорения, 0) КАК КоэффициентУскорения,
	|	ПараметрыАмортизацииОСБУ.Период КАК Период,
	|	ГрафикиАмортизацииБУ.ГрафикАмортизации КАК ГрафикАмортизации,
	|	СчетаБухгалтерскогоУчетаОС.СчетУчета КАК СчетУчета,
	|	СчетаБухгалтерскогоУчетаОСНачалоПериода.СчетУчета КАК СчетУчетаНачалоПериода,
	|	СчетаБухгалтерскогоУчетаОС.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации,
	|	СчетаБухгалтерскогоУчетаОСНачалоГода.СчетУчета КАК СчетУчетаНачалоГода,
	|	СчетаБухгалтерскогоУчетаОСНачалоГода.СчетНачисленияАмортизации КАК СчетНачисленияАмортизацииНачалоГода,
	|	ПервоначальныеСведенияОСБУ.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	ПервоначальныеСведенияОСБУ.ПорядокПогашенияСтоимости КАК ПорядокПогашенияСтоимости,
	|	ПервоначальныеСведенияОСБУ.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
	|	ЕСТЬNULL(ПервоначальныеСведенияОСБУ.ПервоначальнаяСтоимость, 0) КАК ПервоначальнаяСтоимость,
	|	СпособыОтраженияРасходовБУ.СпособыОтраженияРасходовПоАмортизации КАК СпособыОтраженияРасходовПоАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСНУ.СрокПолезногоИспользования, 0) КАК СрокПолезногоИспользованияНУ,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСНУ.ПРДляВычисленияАмортизации, 0) КАК ПРДляВычисленияАмортизации,
	|	ПервоначальныеСведенияОСНУ.ПорядокВключенияСтоимостиВСоставРасходов КАК ПорядокВключенияСтоимостиВСоставРасходов,
	|	СписокОС.ТолькоЛинейный КАК ТолькоЛинейныйМетодНУ,
	|	ПервоначальныеСведенияОСНУ.ДатаПринятияКУчету КАК ДатаПринятияКУчету,
	|	ЕСТЬNULL(СпециальныйКоэффициентНУ.СпециальныйКоэффициент, 0) КАК СпециальныйКоэффициент,
	|	МестонахождениеОСБУ.Подразделение КАК Подразделение,
	|	ВЫБОР
	|		КОГДА ГОД(&ДатаПереходаКЛинейномуМетоду) = 2009
	|			ТОГДА ЕСТЬNULL(ПервоначальныеСведенияОСНУ.ФактическийСрокИспользованияДо2009, 0)
	|		ИНАЧЕ (ГОД(&ДатаПереходаКЛинейномуМетоду) - ГОД(СостоянияОСПринятоКУчету.ДатаВводаВЭксплуатацию)) * 12 + (МЕСЯЦ(&ДатаПереходаКЛинейномуМетоду) - МЕСЯЦ(СостоянияОСПринятоКУчету.ДатаВводаВЭксплуатацию)) - 1
	|	КОНЕЦ КАК ФактическийСрокПриПереходеКЛинейномуМетоду,
	|	ПервоначальныеСведенияОСНУ.АмортизацияДо2009
	|ПОМЕСТИТЬ СписокОССПараметрами
	|ИЗ
	|	СписокОС КАК СписокОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ НачислениеАмортизацииБУ КАК НачислениеАмортизацииБУ
	|		ПО СписокОС.ОсновноеСредство = НачислениеАмортизацииБУ.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ НачислениеАмортизацииНУ КАК НачислениеАмортизацииНУ
	|		ПО СписокОС.ОсновноеСредство = НачислениеАмортизацииНУ.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПервоначальныеСведенияОСБУ КАК ПервоначальныеСведенияОСБУ
	|		ПО СписокОС.ОсновноеСредство = ПервоначальныеСведенияОСБУ.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыАмортизацииОСБУ КАК ПараметрыАмортизацииОСБУ
	|		ПО СписокОС.ОсновноеСредство = ПараметрыАмортизацииОСБУ.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ГрафикиАмортизацииБУ КАК ГрафикиАмортизацииБУ
	|		ПО СписокОС.ОсновноеСредство = ГрафикиАмортизацииБУ.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ СпособыОтраженияРасходовБУ КАК СпособыОтраженияРасходовБУ
	|		ПО СписокОС.ОсновноеСредство = СпособыОтраженияРасходовБУ.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаБухгалтерскогоУчетаОС КАК СчетаБухгалтерскогоУчетаОС
	|		ПО СписокОС.ОсновноеСредство = СчетаБухгалтерскогоУчетаОС.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаБухгалтерскогоУчетаОСНачалоПериода КАК СчетаБухгалтерскогоУчетаОСНачалоПериода
	|		ПО СписокОС.ОсновноеСредство = СчетаБухгалтерскогоУчетаОСНачалоПериода.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВыработкаОС КАК ВыработкаОС
	|		ПО СписокОС.ОсновноеСредство = ВыработкаОС.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаБухгалтерскогоУчетаОСНачалоГода КАК СчетаБухгалтерскогоУчетаОСНачалоГода
	|		ПО СписокОС.ОсновноеСредство = СчетаБухгалтерскогоУчетаОСНачалоГода.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПервоначальныеСведенияОСНУ КАК ПервоначальныеСведенияОСНУ
	|		ПО СписокОС.ОсновноеСредство = ПервоначальныеСведенияОСНУ.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыАмортизацииОСНУ КАК ПараметрыАмортизацииОСНУ
	|		ПО СписокОС.ОсновноеСредство = ПараметрыАмортизацииОСНУ.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ СпециальныйКоэффициентНУ КАК СпециальныйКоэффициентНУ
	|		ПО СписокОС.ОсновноеСредство = СпециальныйКоэффициентНУ.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ МестонахождениеОСБУ КАК МестонахождениеОСБУ
	|		ПО СписокОС.ОсновноеСредство = МестонахождениеОСБУ.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ СостоянияОСПринятоКУчету КАК СостоянияОСПринятоКУчету
	|		ПО СписокОС.ОсновноеСредство = СостоянияОСПринятоКУчету.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";
	Запрос.Выполнить();

	// Получим амортизацию ранее начисленную документом
	Если ЗначениеЗаполнено(Реквизиты.Регистратор) Тогда
		Запрос.УстановитьПараметр("Регистратор", Реквизиты.Регистратор);
		Запрос.Текст = ПолучитьТекстЗапросаАмортизацияОСАмортизацияПоДокументу();
		Запрос.Выполнить();
	Иначе
		ПустаяТаблицаОборотов = Новый ТаблицаЗначений;
		ПустаяТаблицаОборотов.Колонки.Добавить("ОсновноеСредство", Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
		ПустаяТаблицаОборотов.Колонки.Добавить("АмортизацияОборот", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		ПустаяТаблицаОборотов.Колонки.Добавить("АмортизацияНУОборот", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));

		Запрос.УстановитьПараметр("ПустаяТаблицаОборотов", ПустаяТаблицаОборотов);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПустаяТаблицаОборотов.ОсновноеСредство КАК ОсновноеСредство,
		|	ПустаяТаблицаОборотов.АмортизацияОборот КАК АмортизацияОборот,
		|	ПустаяТаблицаОборотов.АмортизацияНУОборот КАК АмортизацияНУОборот
		|ПОМЕСТИТЬ АмортизацияОСДокумента
		|ИЗ
		|	&ПустаяТаблицаОборотов КАК ПустаяТаблицаОборотов";
		Запрос.Выполнить();
	КонецЕсли;

	Если ТранзакцияАктивна() И ОбщегоНазначенияБПВызовСервераПовтИсп.ИспользоватьУправляемыеБлокировки() Тогда

		// Блокировка регистра бухгалтерии.

		Запрос.Текст =
		"ВЫБРАТЬ
		|	СчетаНачисленияАмортизацииБУ.Счет
		|ИЗ
		|	СчетаНачисленияАмортизацииБУ КАК СчетаНачисленияАмортизацииБУ
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	СчетаНачисленияАмортизацииБУНачалоГода.Счет
		|ИЗ
		|	СчетаНачисленияАмортизацииБУНачалоГода КАК СчетаНачисленияАмортизацииБУНачалоГода
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасходыНаКапитальныеВложения)";
		РезультатЗапроса = Запрос.Выполнить();

		СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы, ИсточникДанных",
			"РегистрБухгалтерии", "Хозрасчетный", РезультатЗапроса);

		СтруктураЗначенийБлокировки = Новый Структура("Период, Организация",
			Новый Диапазон(, КонецМесяца(Реквизиты.ДатаРасчета)), Реквизиты.Организация);

		СтруктураИсточникаДанных = Новый Структура("Счет", "Счет");

		ОбщегоНазначенияБПВызовСервера.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, СтруктураЗначенийБлокировки, СтруктураИсточникаДанных);

	КонецЕсли;

	// Получим суммы из регистра бухгалтерии
	Запрос.Текст = ПолучитьТекстЗапросаАмортизацияОСДанныеПроводок();
	Запрос.Выполнить();

	// Сформируем основную таблицу для расчета
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписокОС.ОсновноеСредство,
	|	ПРЕДСТАВЛЕНИЕ(СписокОС.ОсновноеСредство) КАК ОсновноеСредствоПредставление,
	|	СписокОС.ОсновноеСредство.Код КАК Код,
	|	СписокОС.ОсновноеСредство.АмортизационнаяГруппа КАК АмортизационнаяГруппа,
	|	СписокОС.НачислятьАмортизациюБУ КАК НачислятьАмортизациюБУ,
	|	СписокОС.НачислятьАмортизациюНУ КАК НачислятьАмортизациюНУ,
	|	СписокОС.Количество КАК Количество,
	|	СписокОС.СрокИспользованияДляВычисленияАмортизации КАК СрокИспользованияДляВычисленияАмортизации,
	|	СписокОС.СтоимостьДляВычисленияАмортизации КАК СтоимостьДляВычисленияАмортизации,
	|	СписокОС.ОбъемПродукцииРаботДляВычисленияАмортизации КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	СписокОС.КоэффициентАмортизации КАК КоэффициентАмортизации,
	|	СписокОС.КоэффициентУскорения КАК КоэффициентУскорения,
	|	СписокОС.Период КАК Период,
	|	СписокОС.ГрафикАмортизации КАК ГрафикАмортизации,
	|	СписокОС.СчетУчета КАК СчетУчета,
	|	СписокОС.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации,
	|	СписокОС.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	СписокОС.ПорядокПогашенияСтоимости КАК ПорядокПогашенияСтоимости,
	|	СписокОС.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
	|	СписокОС.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
	|	СписокОС.СпособыОтраженияРасходовПоАмортизации КАК СпособыОтраженияРасходовПоАмортизации,
	|	СписокОС.СрокПолезногоИспользованияНУ КАК СрокПолезногоИспользованияНУ,
	|	СписокОС.ПРДляВычисленияАмортизации КАК ПРДляВычисленияАмортизации,
	|	СписокОС.ПорядокВключенияСтоимостиВСоставРасходов КАК ПорядокВключенияСтоимостиВСоставРасходов,
	|	СписокОС.ТолькоЛинейныйМетодНУ КАК ТолькоЛинейныйМетодНУ,
	|	СписокОС.ДатаПринятияКУчету КАК ДатаПринятияКУчету,
	|	СписокОС.СпециальныйКоэффициент КАК СпециальныйКоэффициент,
	|	СписокОС.Подразделение КАК Подразделение,
	|	СписокОС.ФактическийСрокПриПереходеКЛинейномуМетоду КАК ФактическийСрокПриПереходеКЛинейномуМетоду,
	|	ЕСТЬNULL(СтоимостьОСНачалоПериода.СуммаОстатокДт, 0) КАК СтоимостьНачальныйОстаток,
	|	ЕСТЬNULL(АмортизацияОСНачалоПериода.СуммаОстатокКт, 0) КАК АмортизацияНачальныйОстаток,
	|	ЕСТЬNULL(СтоимостьОСНачалоПериода.СуммаПРОстатокДт, 0) КАК СтоимостьПРНачальныйОстаток,
	|	ЕСТЬNULL(АмортизацияОСНачалоПериода.СуммаПРОстатокКт, 0) КАК АмортизацияПРНачальныйОстаток,
	|	ЕСТЬNULL(АмортизацияОСОбороты.АмортизацияОборот, 0) КАК АмортизацияОборот,
	|	ЕСТЬNULL(СтоимостьНаНачалоГода.СуммаОстатокДт, 0) - ЕСТЬNULL(АмортизацияНаНачалоГода.СуммаОстатокКт, 0) КАК СтоимостьНаНачалоГода,
	|	ЕСТЬNULL(СтоимостьОСНачалоПериода.СуммаНУОстатокДт, 0) КАК СтоимостьНУНачальныйОстаток,
	|	ЕСТЬNULL(СтоимостьОСКонецПериода.СуммаПРОстатокДт, 0) КАК СтоимостьПРКонечныйОстаток,
	|	ЕСТЬNULL(АмортизацияОСНачалоПериода.СуммаНУОстатокКт, 0) КАК АмортизацияНУНачальныйОстаток,
	|	ЕСТЬNULL(АмортизацияОСКонецПериода.СуммаПРОстатокКт, 0) КАК АмортизацияПРКонечныйОстаток,
	|	ЕСТЬNULL(АмортизацияОСОбороты.АмортизацияНУОборот, 0) КАК АмортизацияНУОборот,
	|	ЕСТЬNULL(АмортизационнаяПремия.СуммаНУОстатокДт, 0) КАК СуммаКапитальныхВложенийВключаемыхВРасходы,
	|	ВЫБОР
	|		КОГДА ГОД(&ДатаПереходаКЛинейномуМетоду) = 2009
	|			ТОГДА ЕСТЬNULL(СписокОС.АмортизацияДо2009, 0)
	|		ИНАЧЕ ЕСТЬNULL(АмортизацияОСПриПереходеКЛинейномуМетоду.АмортизацияНачальныйОстаток, 0)
	|	КОНЕЦ КАК АмортизацияПриПереходеКЛинейномуМетоду
	|ИЗ
	|	СписокОССПараметрами КАК СписокОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиНачалоПериода КАК СтоимостьОСНачалоПериода
	|		ПО СписокОС.ОсновноеСредство = СтоимостьОСНачалоПериода.ОсновноеСредство
	|			И (СтоимостьОСНачалоПериода.Счет = СписокОС.СчетУчетаНачалоПериода)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиКонецПериода КАК СтоимостьОСКонецПериода
	|		ПО СписокОС.ОсновноеСредство = СтоимостьОСКонецПериода.ОсновноеСредство
	|			И (СтоимостьОСКонецПериода.Счет = СписокОС.СчетУчета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиНачалоПериода КАК АмортизацияОСНачалоПериода
	|		ПО СписокОС.ОсновноеСредство = АмортизацияОСНачалоПериода.ОсновноеСредство
	|			И (АмортизацияОСНачалоПериода.Счет = СписокОС.СчетНачисленияАмортизации)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиКонецПериода КАК АмортизацияОСКонецПериода
	|		ПО СписокОС.ОсновноеСредство = АмортизацияОСКонецПериода.ОсновноеСредство
	|			И (АмортизацияОСКонецПериода.Счет = СписокОС.СчетНачисленияАмортизации)
	|		ЛЕВОЕ СОЕДИНЕНИЕ АмортизацияОСОбороты КАК АмортизацияОСОбороты
	|		ПО СписокОС.ОсновноеСредство = АмортизацияОСОбороты.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиНаНачалоГода КАК СтоимостьНаНачалоГода
	|		ПО СписокОС.ОсновноеСредство = СтоимостьНаНачалоГода.ОсновноеСредство
	|			И (СтоимостьНаНачалоГода.Счет = СписокОС.СчетУчетаНачалоГода)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиНаНачалоГода КАК АмортизацияНаНачалоГода
	|		ПО СписокОС.ОсновноеСредство = АмортизацияНаНачалоГода.ОсновноеСредство
	|			И (АмортизацияНаНачалоГода.Счет = СписокОС.СчетНачисленияАмортизацииНачалоГода)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиНачалоПериода КАК АмортизационнаяПремия
	|		ПО СписокОС.ОсновноеСредство = АмортизационнаяПремия.ОсновноеСредство
	|			И (АмортизационнаяПремия.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасходыНаКапитальныеВложения))
	|		ЛЕВОЕ СОЕДИНЕНИЕ АмортизацияОСПриПереходеКЛинейномуМетоду КАК АмортизацияОСПриПереходеКЛинейномуМетоду
	|		ПО СписокОС.ОсновноеСредство = АмортизацияОСПриПереходеКЛинейномуМетоду.ОсновноеСредство
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код";

	ВыборкаПоОС = Запрос.Выполнить().Выбрать();

	Пока ВыборкаПоОС.Следующий() Цикл

		СуммаАмортизацииБУ = 0;
		СуммаАмортизацииНУ = 0;
		СуммаАмортизацииПР = 0;
		СуммаАмортизацииВР = 0;
		СуммаАмортизацииПРДоОкругления = 0;

		СуммаКапитальныхВложенийВключаемыхВРасходы = 0;

		Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.СчетНачисленияАмортизации) Тогда
			Если Реквизиты.ВыдаватьСообщения Тогда
				СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоОС, НСтр("ru = 'Не указан счет для начисления амортизации'"), 
					Реквизиты.Регистратор, Отказ);
			КонецЕсли;
			Продолжить;
		КонецЕсли;

		Пропустить = Ложь;

		Если ВыборкаПоОС.ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации
			И ВыборкаПоОС.НачислятьАмортизациюБУ Тогда

			Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.СпособНачисленияАмортизации) Тогда
				Если Реквизиты.ВыдаватьСообщения Тогда
					СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоОС, НСтр("ru = 'Не указан способ начисления амортизации'"),
						Реквизиты.Регистратор, Отказ);
				КонецЕсли;
				Пропустить = Истина;
			КонецЕсли;

			Если ВыборкаПоОС.СтоимостьНачальныйОстаток - ВыборкаПоОС.АмортизацияНачальныйОстаток = 0 Тогда
				Пропустить = Истина; // остаточная стоимость на начало месяца равна 0
			КонецЕсли;

			Если ТипЗнч(Реквизиты.Регистратор) <> Тип("ДокументСсылка.МодернизацияОС") И ВыборкаПоОС.АмортизацияОборот <> 0 Тогда
				Если ТипЗнч(Реквизиты.Регистратор) <> Тип("ДокументСсылка.ПеремещениеОС") Тогда
					Если Реквизиты.ВыдаватьСообщения И ТаблицаОС.Количество() > 0 Тогда
						СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоОС, НСтр("ru = 'Амортизация в этом месяце уже начислялась'"), 
							Реквизиты.Регистратор, Отказ, Ложь);
					КонецЕсли;
				КонецЕсли;
				Пропустить = Истина; // по указанному ОС в этом месяце уже начисляли амортизацию
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.СтоимостьДляВычисленияАмортизации) Тогда
				Если Реквизиты.ВыдаватьСообщения Тогда
					СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоОС, НСтр("ru = 'Стоимость для начисления амортизации равна нулю'"),
						Реквизиты.Регистратор, Отказ, Ложь);
				КонецЕсли;
				Пропустить = Истина;
			КонецЕсли;

			Если (ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Линейный
				ИЛИ ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования
				ИЛИ ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка)
				И НЕ ЗначениеЗаполнено(ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации) Тогда

				Если Реквизиты.ВыдаватьСообщения Тогда
					СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоОС, НСтр("ru = 'Срок использования равен нулю'"), Реквизиты.Регистратор, Отказ);
				КонецЕсли;
				Пропустить = Истина;
			КонецЕсли;

			Если НЕ Пропустить Тогда

				Если ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Линейный Тогда

					СуммаГодовойАмортизации = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации / ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации * 12;

					Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
						СуммаАмортизации   = СуммаГодовойАмортизации / 12;
					Иначе
						КоэффициентПериода = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, ВыборкаПоОС.ГрафикАмортизации, Реквизиты.ДатаРасчета);
						СуммаАмортизации   = СуммаГодовойАмортизации * КоэффициентПериода;
					КонецЕсли;

				ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции Тогда

					Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.Количество) Тогда
						Пропустить = Истина;
					КонецЕсли;

					Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ОбъемПродукцииРаботДляВычисленияАмортизации) Тогда
						Если Реквизиты.ВыдаватьСообщения = Истина Тогда
							СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоОС, НСтр("ru = 'Объем продукции для вычисления не определен'"), 
								Реквизиты.Регистратор, Отказ);
						КонецЕсли;
						Пропустить = Истина;
					КонецЕсли;

					Если Пропустить Тогда
						СуммаАмортизации = 0
					Иначе
						СуммаАмортизации = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации * ВыборкаПоОС.Количество / ВыборкаПоОС.ОбъемПродукцииРаботДляВычисленияАмортизации;
					КонецЕсли;

				ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ Тогда

					Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.КоэффициентАмортизации) Тогда
						Если Реквизиты.ВыдаватьСообщения = Истина Тогда
							СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоОС, НСтр("ru = 'Коэффициент амортизации не определен'"),
								Реквизиты.Регистратор, Отказ);
						КонецЕсли;
						Пропустить = Истина;
					КонецЕсли;

					Если Пропустить Тогда
						СуммаАмортизации = 0
					Иначе

						СуммаГодовойАмортизации = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации * ВыборкаПоОС.КоэффициентАмортизации / 100;

						Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
							СуммаАмортизации   = СуммаГодовойАмортизации / 12;
						Иначе
							КоэффициентПериода = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, ВыборкаПоОС.ГрафикАмортизации, Реквизиты.ДатаРасчета);
							СуммаАмортизации   = СуммаГодовойАмортизации * КоэффициентПериода;
						КонецЕсли;

					КонецЕсли;

				ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега Тогда

					Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.Количество) Тогда
						Пропустить = Истина;
					КонецЕсли;

					Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.КоэффициентАмортизации) Тогда
						Если Реквизиты.ВыдаватьСообщения Тогда
							СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоОС, НСтр("ru = 'Коэффициент амортизации не определен'"), 
								Реквизиты.Регистратор, Отказ);
						КонецЕсли;
						Пропустить = Истина;
					КонецЕсли;

					Если Пропустить Тогда
						СуммаАмортизации = 0
					Иначе
						СуммаАмортизации = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации * ВыборкаПоОС.Количество / 1000 * ВыборкаПоОС.КоэффициентАмортизации / 100 ;
					КонецЕсли;

				ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка Тогда

					Если Год(ВыборкаПоОС.Период) = Год(Реквизиты.ДатаРасчета) Тогда
						СтоимостьИтоговая = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации;
					Иначе
						СтоимостьИтоговая = ВыборкаПоОС.СтоимостьНаНачалоГода;
					КонецЕсли;

					СуммаГодовойАмортизации = СтоимостьИтоговая / ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации * 12;

					Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
						СуммаАмортизации   = СуммаГодовойАмортизации / 12;
					Иначе
						КоэффициентПериода = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, ВыборкаПоОС.ГрафикАмортизации, Реквизиты.ДатаРасчета);
						СуммаАмортизации   = СуммаГодовойАмортизации * КоэффициентПериода;
					КонецЕсли;

					КоэффициентУскорения = ВыборкаПоОС.КоэффициентУскорения;
					Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.КоэффициентУскорения) Тогда
						КоэффициентУскорения = 1;
						Если Реквизиты.ВыдаватьСообщения Тогда
							СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоОС, НСтр("ru = 'Коэффициент ускорения не заполнен'"), 
								Реквизиты.Регистратор, Отказ);
						КонецЕсли;
					КонецЕсли;

					СуммаАмортизации = СуммаАмортизации * КоэффициентУскорения;

				ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования Тогда

					//Дата последнего изменения параметров
					Если ВыборкаПоОС.Период = NULL Тогда
						СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоОС, 
							НСтр("ru = 'Не определилась дата начала использования (изменения параметров)'"), Реквизиты.Регистратор, Отказ, Ложь);
						Пропустить = Истина;
					КонецЕсли;

					Если Пропустить Тогда
						СуммаАмортизации = 0
					Иначе

						ДатаНачалаРасчета = НачалоМесяца(ДобавитьМесяц(ВыборкаПоОС.Период, 1));

						ЧислоЛетПользования = ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации / 12;
						ЧислоЛетПользования = Цел(ЧислоЛетПользования) + ?(ЧислоЛетПользования - Цел(ЧислоЛетПользования) > 0, 1, 0);
						ЧислоЛетПрошедших   = Цел(УправлениеВнеоборотнымиАктивами.ОпределитьФактическийСрокИспользования(ДатаНачалаРасчета, Реквизиты.ДатаРасчета) / 12);
						ЧислоЛетОставшихся  = ЧислоЛетПользования - ЧислоЛетПрошедших;

						// Формула суммы чисел от 1 до N
						//		S = (N + 1) * N / 2
						СуммаЧиселЛет = (ЧислоЛетПользования + 1) * ЧислоЛетПользования / 2;

						ПроцентГодовойАмортизации = ЧислоЛетОставшихся / СуммаЧиселЛет;
						СуммаГодовойАмортизации   = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации * ПроцентГодовойАмортизации;

						Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
							СуммаАмортизации   = СуммаГодовойАмортизации / 12;
						Иначе
							КоэффициентПериода = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, ВыборкаПоОС.ГрафикАмортизации, Реквизиты.ДатаРасчета);
							СуммаАмортизации   = СуммаГодовойАмортизации * КоэффициентПериода;
						КонецЕсли;

					КонецЕсли;

				КонецЕсли;

				ВсегоОсталосьСписать = ВыборкаПоОС.СтоимостьНачальныйОстаток - ВыборкаПоОС.АмортизацияНачальныйОстаток;
				СуммаАмортизацииБУ   = Окр(Макс(0, Мин(СуммаАмортизации, ВсегоОсталосьСписать)), 2);

				ВсегоОсталосСписатьПР = ВыборкаПоОС.СтоимостьПРНачальныйОстаток - ВыборкаПоОС.АмортизацияПРНачальныйОстаток;
				РасчетнаяСуммаАмортизацииПР = ВыборкаПоОС.ПРДляВычисленияАмортизации * (СуммаАмортизации / ВыборкаПоОС.СтоимостьДляВычисленияАмортизации);
				Если РасчетнаяСуммаАмортизацииПР >= 0 Тогда
					СуммаАмортизацииПРДоОкругления = Макс(0, Мин(РасчетнаяСуммаАмортизацииПР, ВсегоОсталосСписатьПР));	
				Иначе
					СуммаАмортизацииПРДоОкругления = Мин(0, Макс(РасчетнаяСуммаАмортизацииПР, ВсегоОсталосСписатьПР));	
				КонецЕсли;
				СуммаАмортизацииПР = Окр(СуммаАмортизацииПРДоОкругления, 2);

			КонецЕсли;

		КонецЕсли;

		Пропустить = Ложь;

		Если ОтражатьВНалоговомУчете Тогда

			Если ВыборкаПоОС.ПорядокВключенияСтоимостиВСоставРасходов = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации
				И ВыборкаПоОС.НачислятьАмортизациюНУ Тогда

				Если (ВыборкаПоОС.СтоимостьНУНачальныйОстаток - ВыборкаПоОС.АмортизацияНУНачальныйОстаток) = 0 Тогда
					Пропустить = Истина; // остаточная стоимость на начало месяца равна 0
				КонецЕсли;

				Если НЕ (ВыборкаПоОС.АмортизацияНУОборот = 0) Тогда
					Если ТипЗнч(Реквизиты.Регистратор) <> Тип("ДокументСсылка.ПеремещениеОС") Тогда
						Если Реквизиты.ВыдаватьСообщения И ТаблицаОС.Количество() > 0 Тогда
							СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоОС, НСтр("ru = 'Амортизация (НУ) в этом месяце уже начислялась'"), 
								Реквизиты.Регистратор, Отказ, Ложь);
						КонецЕсли;
					КонецЕсли;
					Пропустить = Истина; // по указанному ОС в этом месяце уже начисляли амортизацию
				КонецЕсли;

				Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.СтоимостьНУНачальныйОстаток) Тогда
					//Стоимость на начало месяца = 0.
					Пропустить = Истина;
				КонецЕсли;

				Если ВыборкаПоОС.ТолькоЛинейныйМетодНУ Тогда
					МетодНачисленияАмортизации = Перечисления.МетодыНачисленияАмортизации.Линейный;
				Иначе
					МетодНачисленияАмортизации = МетодНачисленияАмортизацииНУ;
				КонецЕсли;

				Если МетодНачисленияАмортизации = Перечисления.МетодыНачисленияАмортизации.Линейный
					И НЕ ЗначениеЗаполнено(ВыборкаПоОС.СрокПолезногоИспользованияНУ) Тогда

					Если Реквизиты.ВыдаватьСообщения Тогда
						СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоОС, НСтр("ru = 'Срок использования равен нулю'"), 
							Реквизиты.Регистратор, Отказ);
					КонецЕсли;
					Продолжить;

				ИначеЕсли МетодНачисленияАмортизации = Перечисления.МетодыНачисленияАмортизации.Нелинейный
					И НЕ ЗначениеЗаполнено(ВыборкаПоОС.АмортизационнаяГруппа) Тогда

					Если Реквизиты.ВыдаватьСообщения Тогда
						СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоОС, НСтр("ru = 'Не указана амортизационная группа'"), 
							Реквизиты.Регистратор, Отказ, ВыборкаПоОС.ОсновноеСредство);
					КонецЕсли;
					Продолжить;

				КонецЕсли;

				Если НЕ Пропустить Тогда

					СуммаАмортизации = 0;

					СтоимостьДляВычисления = ВыборкаПоОС.СтоимостьНУНачальныйОстаток - ВыборкаПоОС.СуммаКапитальныхВложенийВключаемыхВРасходы;
					СрокИспользованияДляВычисления = Макс(1, ВыборкаПоОС.СрокПолезногоИспользованияНУ);

					СпециальныйКоэффициент = ?(ВыборкаПоОС.СпециальныйКоэффициент = 0, 1, ВыборкаПоОС.СпециальныйКоэффициент);

					Если МетодНачисленияАмортизации = Перечисления.МетодыНачисленияАмортизации.Линейный Тогда

						СтоимостьДляВычисления         = СтоимостьДляВычисления - ВыборкаПоОС.АмортизацияПриПереходеКЛинейномуМетоду;
						
						ФактическийСрокПриПереходеКЛинейномуМетоду = Макс(ВыборкаПоОС.ФактическийСрокПриПереходеКЛинейномуМетоду, 0);
						СрокИспользованияДляВычисления = СрокИспользованияДляВычисления - ФактическийСрокПриПереходеКЛинейномуМетоду;

						Если СрокИспользованияДляВычисления <= 0 Тогда 
							//ошибка в первоначальных данных
							СуммаАмортизации = 0;
						Иначе 
							СуммаАмортизации = СтоимостьДляВычисления / СрокИспользованияДляВычисления * СпециальныйКоэффициент;
						КонецЕсли;

					ИначеЕсли МетодНачисленияАмортизации = Перечисления.МетодыНачисленияАмортизации.Нелинейный Тогда

						НормаАмортизации = УправлениеВнеоборотнымиАктивами.ПолучитьНормуПоАмортизационнойГруппе(ВыборкаПоОС.АмортизационнаяГруппа);

						Если НЕ (НормаАмортизации = Неопределено) Тогда

							СуммаАмортизации = (СтоимостьДляВычисления - ВыборкаПоОС.АмортизацияНУНачальныйОстаток)
							* НормаАмортизации / 100
							* СпециальныйКоэффициент;

						КонецЕсли;

					КонецЕсли;

					ВсегоОсталосьСписать = ВыборкаПоОС.СтоимостьНУНачальныйОстаток - ВыборкаПоОС.АмортизацияНУНачальныйОстаток;

					СуммаАмортизацииНУ = Окр(Мин(ВсегоОсталосьСписать, СуммаАмортизации), 2);

					Если СуммаАмортизацииНУ > 0 Тогда
						СуммаКапитальныхВложенийВключаемыхВРасходы = ВыборкаПоОС.СуммаКапитальныхВложенийВключаемыхВРасходы;
					КонецЕсли;

				КонецЕсли;

			КонецЕсли;

			СуммаАмортизацииВР = СуммаАмортизацииБУ - СуммаАмортизацииНУ - СуммаАмортизацииПР;
			
			Если (СуммаАмортизацииВР = 0.01 ИЛИ СуммаАмортизацииВР = -0.01) 
				И СуммаАмортизацииПРДоОкругления - СуммаАмортизацииПР > 0.001 Тогда
				
				СуммаАмортизацииПР = СуммаАмортизацииБУ - СуммаАмортизацииНУ;
				СуммаАмортизацииВР = 0;
			КонецЕсли;

		КонецЕсли;

		Если СуммаАмортизацииБУ > 0
			ИЛИ СуммаАмортизацииНУ > 0
			ИЛИ СуммаАмортизацииПР <> 0
			ИЛИ СуммаАмортизацииВР <> 0 Тогда

			СтрокаАмортизации = ТаблицаАмортизации.Добавить();

			СтрокаАмортизации.ОбъектУчета               = ВыборкаПоОС.ОсновноеСредство;
			СтрокаАмортизации.СчетУчета                 = ВыборкаПоОС.СчетУчета;
			СтрокаАмортизации.СчетНачисленияАмортизации = ВыборкаПоОС.СчетНачисленияАмортизации;
			СтрокаАмортизации.НаправлениеАмортизации    = ВыборкаПоОС.СпособыОтраженияРасходовПоАмортизации;
			СтрокаАмортизации.СуммаАмортизацииБУ        = СуммаАмортизацииБУ;
			СтрокаАмортизации.СуммаАмортизацииНУ        = СуммаАмортизацииНУ;
			Если ПоддержкаПБУ18 Тогда
				СтрокаАмортизации.СуммаАмортизацииПР        = СуммаАмортизацииПР;
				СтрокаАмортизации.СуммаАмортизацииВР        = СуммаАмортизацииВР;
			КонецЕсли;
			СтрокаАмортизации.Подразделение  = ВыборкаПоОС.Подразделение;

			СтрокаАмортизации.СуммаКапитальныхВложенийВключаемыхВРасходы = СуммаКапитальныхВложенийВключаемыхВРасходы;

		КонецЕсли;

	КонецЦикла;

	Возврат ТаблицаАмортизации;

КонецФункции

Функция ПодготовитьПараметрыАмортизацияОС(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"      // <Число, 5, 0>
	+ "ОсновноеСредство"; // <СправочникСсылка.ОсновныеСредства>

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"      // <Дата>
	+ "ДатаРасчета," // <Дата>
	+ "Организация," // <СправочникСсылка.Организации>
	+ "Регистратор," // <ДокументСсылка.*>
	+ "ВыдаватьСообщения," // <Булево>
	+ "Содержание";  // <Строка, 150>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПолучитьТекстЗапросаАмортизацияОСНеСнятыеСУчетаОСВсе()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
	|	СостоянияОСОрганизаций.Организация КАК Организация,
	|	МАКСИМУМ(СостоянияОСОрганизаций.ДатаСостояния) КАК ДатаСостояния
	|ПОМЕСТИТЬ ДатыПоследнихСостояний
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|ГДЕ
	|	СостоянияОСОрганизаций.ДатаСостояния < &Период
	|	И СостоянияОСОрганизаций.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	СостоянияОСОрганизаций.ОсновноеСредство,
	|	СостоянияОСОрганизаций.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ НеСнятыеСУчета
	|ИЗ
	|	ДатыПоследнихСостояний КАК ДатыПоследнихСостояний
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|		ПО ДатыПоследнихСостояний.ОсновноеСредство = СостоянияОСОрганизаций.ОсновноеСредство
	|			И ДатыПоследнихСостояний.Организация = СостоянияОСОрганизаций.Организация
	|			И ДатыПоследнихСостояний.ДатаСостояния = СостоянияОСОрганизаций.ДатаСостояния
	|ГДЕ
	|	СостоянияОСОрганизаций.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";

	Возврат ТекстЗапроса;

КонецФункции

Функция ПолучитьТекстЗапросаАмортизацияОСНеСнятыеСУчетаОСПоТаблице()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	&ТаблицаОС КАК ТаблицаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияОС.ОсновноеСредство КАК ОсновноеСредство,
	|	СостоянияОС.ДатаСостояния КАК ДатаСостояния,
	|	СостоянияОС.Состояние
	|ПОМЕСТИТЬ СостоянияОС
	|ИЗ
	|	ТаблицаОС КАК ТаблицаОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОС
	|		ПО ТаблицаОС.ОсновноеСредство = СостоянияОС.ОсновноеСредство
	|ГДЕ
	|	СостоянияОС.Организация = &Организация
	|	И СостоянияОС.ДатаСостояния < &Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	ДатаСостояния
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияОС.ОсновноеСредство КАК ОсновноеСредство,
	|	МАКСИМУМ(СостоянияОС.ДатаСостояния) КАК ДатаСостояния
	|ПОМЕСТИТЬ ДатыПоследнихСостояний
	|ИЗ
	|	СостоянияОС КАК СостоянияОС
	|
	|СГРУППИРОВАТЬ ПО
	|	СостоянияОС.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	ДатаСостояния
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияОС.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ НеСнятыеСУчета
	|ИЗ
	|	ДатыПоследнихСостояний КАК ДатыПоследнихСостояний
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СостоянияОС КАК СостоянияОС
	|		ПО ДатыПоследнихСостояний.ОсновноеСредство = СостоянияОС.ОсновноеСредство
	|			И ДатыПоследнихСостояний.ДатаСостояния = СостоянияОС.ДатаСостояния
	|ГДЕ
	|	СостоянияОС.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";

	Возврат ТекстЗапроса;

КонецФункции

Функция ПолучитьТекстЗапросаАмортизацияОСНачислениеАмортизации()

	ТекстЗапрос =
	"ВЫБРАТЬ
	|	НачислениеАмортизацииБУ.ОсновноеСредство КАК ОсновноеСредство,
	|	НачислениеАмортизацииБУ.НачислятьАмортизацию КАК НачислятьАмортизациюБУ
	|ПОМЕСТИТЬ НачислениеАмортизацииБУ
	|ИЗ
	|	РегистрСведений.НачислениеАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|			&НачалоПериода,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						НеСнятыеСУчета.ОсновноеСредство
	|					ИЗ
	|						НеСнятыеСУчета)) КАК НачислениеАмортизацииБУ
	|ГДЕ
	|	НачислениеАмортизацииБУ.НачислятьАмортизацию = ИСТИНА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачислениеАмортизацииНУ.ОсновноеСредство КАК ОсновноеСредство,
	|	НачислениеАмортизацииНУ.НачислятьАмортизацию КАК НачислятьАмортизациюНУ
	|ПОМЕСТИТЬ НачислениеАмортизацииНУ
	|ИЗ
	|	РегистрСведений.НачислениеАмортизацииОСНалоговыйУчет.СрезПоследних(
	|			&НачалоПериода,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						НеСнятыеСУчета.ОсновноеСредство
	|					ИЗ
	|						НеСнятыеСУчета)) КАК НачислениеАмортизацииНУ
	|ГДЕ
	|	НачислениеАмортизацииНУ.НачислятьАмортизацию = ИСТИНА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";

	Возврат ТекстЗапрос;

КонецФункции

Функция ПолучитьТекстЗапросаАмортизацияОСПервоначальныеСведения()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПервоначальныеСведенияОСБУ.ОсновноеСредство КАК ОсновноеСредство,
	|	ПервоначальныеСведенияОСБУ.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	ПервоначальныеСведенияОСБУ.ПорядокПогашенияСтоимости КАК ПорядокПогашенияСтоимости,
	|	ПервоначальныеСведенияОСБУ.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
	|	ПервоначальныеСведенияОСБУ.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
	|	ПервоначальныеСведенияОСБУ.ПараметрВыработки КАК ПараметрВыработки
	|ПОМЕСТИТЬ ПервоначальныеСведенияОСБУ
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|			&НачалоПериода,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС)) КАК ПервоначальныеСведенияОСБУ
	|ГДЕ
	|	ПервоначальныеСведенияОСБУ.ПорядокПогашенияСтоимости = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПервоначальныеСведенияОСНУ.ОсновноеСредство КАК ОсновноеСредство,
	|	ПервоначальныеСведенияОСНУ.ПорядокВключенияСтоимостиВСоставРасходов КАК ПорядокВключенияСтоимостиВСоставРасходов,
	|	ПервоначальныеСведенияОСНУ.АмортизацияДо2009 КАК АмортизацияДо2009,
	|	ПервоначальныеСведенияОСНУ.ФактическийСрокИспользованияДо2009 КАК ФактическийСрокИспользованияДо2009,
	|	ПервоначальныеСведенияОСНУ.Период КАК ДатаПринятияКУчету
	|ПОМЕСТИТЬ ПервоначальныеСведенияОСНУ
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчет.СрезПоследних(
	|			&НачалоПериода,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС)) КАК ПервоначальныеСведенияОСНУ
	|ГДЕ
	|	ПервоначальныеСведенияОСНУ.ПорядокВключенияСтоимостиВСоставРасходов = ЗНАЧЕНИЕ(Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ПолучитьТекстЗапросаАмортизацияОСПараметрыАмортизации()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВыработкаОСОбороты.ОсновноеСредство КАК ОсновноеСредство,
	|	ВыработкаОСОбороты.ПараметрВыработки КАК ПараметрВыработки,
	|	ВыработкаОСОбороты.КоличествоОборот КАК ОбъемВыработки
	|ПОМЕСТИТЬ ВыработкаОС
	|ИЗ
	|	РегистрНакопления.ВыработкаОС.Обороты(
	|			&НачалоПериодаДата,
	|			&КонецПериода,
	|			Период,
	|			Организация = &Организация
	|				И (ОсновноеСредство, ПараметрВыработки) В
	|					(ВЫБРАТЬ
	|						ПервоначальныеСведенияОСБУ.ОсновноеСредство,
	|						ПервоначальныеСведенияОСБУ.ПараметрВыработки
	|					ИЗ
	|						ПервоначальныеСведенияОСБУ КАК ПервоначальныеСведенияОСБУ)) КАК ВыработкаОСОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыАмортизацииОСБУ.ОсновноеСредство КАК ОсновноеСредство,
	|	ПараметрыАмортизацииОСБУ.СрокИспользованияДляВычисленияАмортизации КАК СрокИспользованияДляВычисленияАмортизации,
	|	ПараметрыАмортизацииОСБУ.СтоимостьДляВычисленияАмортизации КАК СтоимостьДляВычисленияАмортизации,
	|	ПараметрыАмортизацииОСБУ.ОбъемПродукцииРаботДляВычисленияАмортизации КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ПараметрыАмортизацииОСБУ.КоэффициентАмортизации КАК КоэффициентАмортизации,
	|	ПараметрыАмортизацииОСБУ.КоэффициентУскорения КАК КоэффициентУскорения,
	|	ПараметрыАмортизацииОСБУ.Период КАК Период
	|ПОМЕСТИТЬ ПараметрыАмортизацииОСБУ
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|			&НачалоПериода,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС)) КАК ПараметрыАмортизацииОСБУ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыАмортизацииОСНУ.ОсновноеСредство КАК ОсновноеСредство,
	|	ПараметрыАмортизацииОСНУ.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
	|	ПараметрыАмортизацииОСНУ.ПРДляВычисленияАмортизации КАК ПРДляВычисленияАмортизации
	|ПОМЕСТИТЬ ПараметрыАмортизацииОСНУ
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииОСНалоговыйУчет.СрезПоследних(
	|			&НачалоПериода,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС)) КАК ПараметрыАмортизацииОСНУ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпециальныйКоэффициентНУ.ОсновноеСредство КАК ОсновноеСредство,
	|	СпециальныйКоэффициентНУ.СпециальныйКоэффициент КАК СпециальныйКоэффициент
	|ПОМЕСТИТЬ СпециальныйКоэффициентНУ
	|ИЗ
	|	РегистрСведений.НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчет.СрезПоследних(
	|			&НачалоПериода,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС)) КАК СпециальныйКоэффициентНУ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикиАмортизацииБУ.ОсновноеСредство КАК ОсновноеСредство,
	|	ГрафикиАмортизацииБУ.ГрафикАмортизации КАК ГрафикАмортизации
	|ПОМЕСТИТЬ ГрафикиАмортизацииБУ
	|ИЗ
	|	РегистрСведений.ГрафикиАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|			&НачалоПериода,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС)) КАК ГрафикиАмортизацииБУ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ПолучитьТекстЗапросаАмортизацияОСПараметрыОтраженияВУчете()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СпособыОтраженияРасходовБУ.ОсновноеСредство КАК ОсновноеСредство,
	|	СпособыОтраженияРасходовБУ.СпособыОтраженияРасходовПоАмортизации КАК СпособыОтраженияРасходовПоАмортизации
	|ПОМЕСТИТЬ СпособыОтраженияРасходовБУ
	|ИЗ
	|	РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|			&НачалоПериода,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС)) КАК СпособыОтраженияРасходовБУ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаБухгалтерскогоУчетаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	СчетаБухгалтерскогоУчетаОС.СчетУчета КАК СчетУчета,
	|	СчетаБухгалтерскогоУчетаОС.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации
	|ПОМЕСТИТЬ СчетаБухгалтерскогоУчетаОС
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС)) КАК СчетаБухгалтерскогоУчетаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаБухгалтерскогоУчетаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	СчетаБухгалтерскогоУчетаОС.СчетУчета КАК СчетУчета,
	|	СчетаБухгалтерскогоУчетаОС.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации
	|ПОМЕСТИТЬ СчетаБухгалтерскогоУчетаОСНачалоПериода
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|			&НачалоПериода,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС)) КАК СчетаБухгалтерскогоУчетаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаБухгалтерскогоУчетаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	СчетаБухгалтерскогоУчетаОС.СчетУчета КАК СчетУчета,
	|	СчетаБухгалтерскогоУчетаОС.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации
	|ПОМЕСТИТЬ СчетаБухгалтерскогоУчетаОСНачалоГода
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС)) КАК СчетаБухгалтерскогоУчетаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетаБухгалтерскогоУчетаОС.СчетУчета КАК Счет
	|ПОМЕСТИТЬ СчетаУчетаБУ
	|ИЗ
	|	СчетаБухгалтерскогоУчетаОС КАК СчетаБухгалтерскогоУчетаОС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетаБухгалтерскогоУчетаОСНачалоПериода.СчетУчета КАК Счет
	|ПОМЕСТИТЬ СчетаУчетаБУНачалоПериода
	|ИЗ
	|	СчетаБухгалтерскогоУчетаОСНачалоПериода КАК СчетаБухгалтерскогоУчетаОСНачалоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетаБухгалтерскогоУчетаОСНачалоГода.СчетУчета КАК Счет
	|ПОМЕСТИТЬ СчетаУчетаБУНачалоГода
	|ИЗ
	|	СчетаБухгалтерскогоУчетаОСНачалоГода КАК СчетаБухгалтерскогоУчетаОСНачалоГода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетаБухгалтерскогоУчетаОС.СчетНачисленияАмортизации КАК Счет
	|ПОМЕСТИТЬ СчетаНачисленияАмортизацииБУ
	|ИЗ
	|	СчетаБухгалтерскогоУчетаОС КАК СчетаБухгалтерскогоУчетаОС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетаБухгалтерскогоУчетаОСНачалоГода.СчетНачисленияАмортизации КАК Счет
	|ПОМЕСТИТЬ СчетаНачисленияАмортизацииБУНачалоГода
	|ИЗ
	|	СчетаБухгалтерскогоУчетаОСНачалоГода КАК СчетаБухгалтерскогоУчетаОСНачалоГода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаУчетаБУ.Счет КАК Счет
	|ПОМЕСТИТЬ СчетаНачалоПериода
	|ИЗ
	|	СчетаУчетаБУНачалоПериода КАК СчетаУчетаБУ
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СчетаНачисленияАмортизацииБУ.Счет
	|ИЗ
	|	СчетаНачисленияАмортизацииБУ КАК СчетаНачисленияАмортизацииБУ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасходыНаКапитальныеВложения)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаУчетаБУ.Счет КАК Счет
	|ПОМЕСТИТЬ СчетаКонецПериода
	|ИЗ
	|	СчетаУчетаБУ КАК СчетаУчетаБУ
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СчетаНачисленияАмортизацииБУ.Счет
	|ИЗ
	|	СчетаНачисленияАмортизацииБУ КАК СчетаНачисленияАмортизацииБУ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаУчетаБУНачалоГода.Счет КАК Счет
	|ПОМЕСТИТЬ СчетаНачалоГода
	|ИЗ
	|	СчетаУчетаБУНачалоГода КАК СчетаУчетаБУНачалоГода
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СчетаНачисленияАмортизацииБУНачалоГода.Счет
	|ИЗ
	|	СчетаНачисленияАмортизацииБУНачалоГода КАК СчетаНачисленияАмортизацииБУНачалоГода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ПолучитьТекстЗапросаАмортизацияОСПрочиеПараметры()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СостоянияОСПринятоКУчету.ОсновноеСредство,
	|	МАКСИМУМ(СостоянияОСПринятоКУчету.ДатаСостояния) КАК ДатаВводаВЭксплуатацию
	|ПОМЕСТИТЬ СостоянияОСПринятоКУчету
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСПринятоКУчету
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО СостоянияОСПринятоКУчету.ОсновноеСредство = СписокОС.ОсновноеСредство
	|			И (СостоянияОСПринятоКУчету.Организация = &Организация)
	|			И (СостоянияОСПринятоКУчету.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету))
	|
	|СГРУППИРОВАТЬ ПО
	|	СостоянияОСПринятоКУчету.ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МестонахождениеОСБУ.ОсновноеСредство КАК ОсновноеСредство,
	|	МестонахождениеОСБУ.Местонахождение КАК Подразделение
	|ПОМЕСТИТЬ МестонахождениеОСБУ
	|ИЗ
	|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	|			&НачалоПериода,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС)) КАК МестонахождениеОСБУ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ПолучитьТекстЗапросаАмортизацияОСАмортизацияПоДокументу()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Хозрасчетный.НомерСтроки КАК НомерСтроки,
	|	Хозрасчетный.Сумма,
	|	Хозрасчетный.СуммаНУКт,
	|	Хозрасчетный.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ Проводки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаНачисленияАмортизацииБУ КАК СчетаНачисленияАмортизацииБУ
	|		ПО Хозрасчетный.СчетКт = СчетаНачисленияАмортизацииБУ.Счет
	|ГДЕ
	|	Хозрасчетный.Регистратор = &Регистратор
	|	И Хозрасчетный.Период МЕЖДУ &НачалоПериодаДата И &КонецПериодаДата
	|	И Хозрасчетный.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйСубконто.Значение КАК ОсновноеСредство,
	|	СУММА(Проводки.Сумма) КАК АмортизацияОборот,
	|	СУММА(Проводки.СуммаНУКт) КАК АмортизацияНУОборот
	|ПОМЕСТИТЬ АмортизацияОСДокумента
	|ИЗ
	|	Проводки КАК Проводки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконто
	|		ПО Проводки.Регистратор = ХозрасчетныйСубконто.Регистратор
	|			И Проводки.НомерСтроки = ХозрасчетныйСубконто.НомерСтроки
	|			И (ХозрасчетныйСубконто.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Кредит))
	|			И (ХозрасчетныйСубконто.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства))
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйСубконто.Значение
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";

	Возврат ТекстЗапроса ;

КонецФункции

Функция ПолучитьТекстЗапросаАмортизацияОСДанныеПроводок()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОстаткиНачалоПериода.Субконто1 КАК ОсновноеСредство,
	|	ОстаткиНачалоПериода.Счет КАК Счет,
	|	ОстаткиНачалоПериода.СуммаОстатокДт,
	|	ОстаткиНачалоПериода.СуммаНУОстатокДт,
	|	ОстаткиНачалоПериода.СуммаПРОстатокДт,
	|	ОстаткиНачалоПериода.СуммаОстатокКт,
	|	ОстаткиНачалоПериода.СуммаНУОстатокКт,
	|	ОстаткиНачалоПериода.СуммаПРОстатокКт
	|ПОМЕСТИТЬ ОстаткиНачалоПериода
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&НачалоПериода,
	|			Счет В
	|				(ВЫБРАТЬ
	|					СчетаНачалоПериода.Счет
	|				ИЗ
	|					СчетаНачалоПериода КАК СчетаНачалоПериода),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС)) КАК ОстаткиНачалоПериода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиКонецПериода.Субконто1 КАК ОсновноеСредство,
	|	ОстаткиКонецПериода.Счет КАК Счет,
	|	ОстаткиКонецПериода.СуммаОстатокДт,
	|	ОстаткиКонецПериода.СуммаНУОстатокДт,
	|	ОстаткиКонецПериода.СуммаПРОстатокДт,
	|	ОстаткиКонецПериода.СуммаОстатокКт,
	|	ОстаткиКонецПериода.СуммаНУОстатокКт,
	|	ОстаткиКонецПериода.СуммаПРОстатокКт
	|ПОМЕСТИТЬ ОстаткиКонецПериода
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&КонецПериода,
	|			Счет В
	|				(ВЫБРАТЬ
	|					СчетаКонецПериода.Счет
	|				ИЗ
	|					СчетаКонецПериода КАК СчетаКонецПериода),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС)) КАК ОстаткиКонецПериода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиНаНачалоГода.Субконто1 КАК ОсновноеСредство,
	|	ОстаткиНаНачалоГода.Счет КАК Счет,
	|	ОстаткиНаНачалоГода.СуммаОстатокДт,
	|	ОстаткиНаНачалоГода.СуммаОстатокКт
	|ПОМЕСТИТЬ ОстаткиНаНачалоГода
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&НачалоГода,
	|			Счет В
	|				(ВЫБРАТЬ
	|					СчетаНачалоГода.Счет
	|				ИЗ
	|					СчетаНачалоГода КАК СчетаНачалоГода),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС)) КАК ОстаткиНаНачалоГода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АмортизацияОСПриПереходеКЛинейномуМетоду.Субконто1 КАК ОсновноеСредство,
	|	АмортизацияОСПриПереходеКЛинейномуМетоду.СуммаНУОстатокКт КАК АмортизацияНачальныйОстаток
	|ПОМЕСТИТЬ АмортизацияОСПриПереходеКЛинейномуМетоду
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаПереходаКЛинейномуМетоду,
	|			Счет В
	|				(ВЫБРАТЬ
	|					СчетаНачисленияАмортизацииБУ.Счет
	|				ИЗ
	|					СчетаНачисленияАмортизацииБУ КАК СчетаНачисленияАмортизацииБУ),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС
	|					ГДЕ
	|						СписокОС.ТолькоЛинейный = ЛОЖЬ)) КАК АмортизацияОСПриПереходеКЛинейномуМетоду
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АмортизацияОСОбороты.Субконто1 КАК ОсновноеСредство,
	|	АмортизацияОСОбороты.СуммаОборотКт КАК АмортизацияОборот,
	|	АмортизацияОСОбороты.СуммаНУОборотКт КАК АмортизацияНУОборот
	|ПОМЕСТИТЬ АмортизацияОСЗаПериод
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериодаДата,
	|			&КонецПериода,
	|			,
	|			Счет В
	|				(ВЫБРАТЬ
	|					СчетаНачисленияАмортизацииБУ.Счет
	|				ИЗ
	|					СчетаНачисленияАмортизацииБУ КАК СчетаНачисленияАмортизацииБУ),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС),
	|			,
	|			) КАК АмортизацияОСОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаПериод.ОсновноеСредство КАК ОсновноеСредство,
	|	ЗаПериод.АмортизацияОборот - ЕСТЬNULL(ПоДокументу.АмортизацияОборот, 0) КАК АмортизацияОборот,
	|	ЗаПериод.АмортизацияНУОборот - ЕСТЬNULL(ПоДокументу.АмортизацияНУОборот, 0) КАК АмортизацияНУОборот
	|ПОМЕСТИТЬ АмортизацияОСОбороты
	|ИЗ
	|	АмортизацияОСЗаПериод КАК ЗаПериод
	|		ЛЕВОЕ СОЕДИНЕНИЕ АмортизацияОСДокумента КАК ПоДокументу
	|		ПО ЗаПериод.ОсновноеСредство = ПоДокументу.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";

	Возврат ТекстЗапроса;

КонецФункции

Функция ПолучитьТаблицуГрафиковАмортизации(Графики)

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Графики", Графики);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ГодовыеГрафикиАмортизацииОС.Ссылка КАК График,
	|	ГодовыеГрафикиАмортизацииОС.Коэффициент1,
	|	ГодовыеГрафикиАмортизацииОС.Коэффициент2,
	|	ГодовыеГрафикиАмортизацииОС.Коэффициент3,
	|	ГодовыеГрафикиАмортизацииОС.Коэффициент4,
	|	ГодовыеГрафикиАмортизацииОС.Коэффициент5,
	|	ГодовыеГрафикиАмортизацииОС.Коэффициент6,
	|	ГодовыеГрафикиАмортизацииОС.Коэффициент7,
	|	ГодовыеГрафикиАмортизацииОС.Коэффициент8,
	|	ГодовыеГрафикиАмортизацииОС.Коэффициент9,
	|	ГодовыеГрафикиАмортизацииОС.Коэффициент10,
	|	ГодовыеГрафикиАмортизацииОС.Коэффициент11,
	|	ГодовыеГрафикиАмортизацииОС.Коэффициент12,
	|	ГодовыеГрафикиАмортизацииОС.Коэффициент1 + ГодовыеГрафикиАмортизацииОС.Коэффициент2 + 
	|		ГодовыеГрафикиАмортизацииОС.Коэффициент3 + ГодовыеГрафикиАмортизацииОС.Коэффициент4 + 
	|		ГодовыеГрафикиАмортизацииОС.Коэффициент5 + ГодовыеГрафикиАмортизацииОС.Коэффициент6 + 
	|		ГодовыеГрафикиАмортизацииОС.Коэффициент7 + ГодовыеГрафикиАмортизацииОС.Коэффициент8 + 
	|		ГодовыеГрафикиАмортизацииОС.Коэффициент9 + ГодовыеГрафикиАмортизацииОС.Коэффициент10 + 
	|		ГодовыеГрафикиАмортизацииОС.Коэффициент11 + ГодовыеГрафикиАмортизацииОС.Коэффициент12 КАК СуммаКоэффициентов
	|ИЗ
	|	Справочник.ГодовыеГрафикиАмортизацииОС КАК ГодовыеГрафикиАмортизацииОС";
	ТаблицаГрафиков = Запрос.Выполнить().Выгрузить();
	ТаблицаГрафиков.Индексы.Добавить("График");

	Возврат ТаблицаГрафиков;

КонецФункции

Функция ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, График, ДатаРасчета)

	КоэффициентАмортизации = 0;

	СтрокаТаблицы = ТаблицаГрафиков.Найти(График, "График");
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат 0;
	КонецЕсли;

	СуммаВсех = СтрокаТаблицы.СуммаКоэффициентов;
	Если СуммаВсех = 0 Тогда
		КоэффициентАмортизации = 1;
	Иначе
		СуммаОдного = СтрокаТаблицы["Коэффициент" + Месяц(ДатаРасчета)];
		КоэффициентАмортизации = СуммаОдного / СуммаВсех;
	КонецЕсли;

	Возврат КоэффициентАмортизации;

КонецФункции // ПолучитьКоэффициентАмортизацииИзГрафика()

Процедура СообщитьОбОшибкеПриНачисленииАмортизации(Выборка, ТекстСообщения, РегОперация, Отказ, Ссылка = Неопределено)
	
	ШаблонСообщения = НСтр("ru = '%1 для основного средства %2 (%3), инвентарный номер %4.'");
	ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ТекстСообщения, 
		Выборка.ОсновноеСредствоПредставление, Выборка.Код, Выборка.ИнвентарныйНомер);
		
	Если Ссылка = Неопределено Тогда
		ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке + Символы.ПС
			+ НСтр("ru = 'Укажите эти данные в документах принятия к учету или изменения параметров начисления амортизации.'");
		СсылкаСообщения = БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьНавигационнуюСсылкуНаЖурналДокументыПоОС();
	ИначеЕсли Ссылка = Ложь Тогда
		СсылкаСообщения = Неопределено;
	Иначе
		СсылкаСообщения = Ссылка;
	КонецЕсли;
	
	БухгалтерскийУчетПереопределяемый.СообщитьОбОшибкеРегОперацииСНавигацией(ТекстСообщенияОбОшибке, СсылкаСообщения, Отказ, РегОперация);
	
КонецПроцедуры // СообщитьОбОшибкеПриНачисленииАмортизации()

Функция ПодготовитьТаблицуТолькоЛинейныйМетодНУ(ТаблицаОС, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыТолькоЛинейныйМетодНУ(ТаблицаОС);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаОС", Параметры.ТаблицаОС);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	&ТаблицаОС КАК ТаблицаОС
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОС.ОсновноеСредство,
	|	ВЫБОР
	|		КОГДА ТаблицаОС.ОсновноеСредство.АмортизационнаяГруппа В (ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ВосьмаяГруппа), ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ДевятаяГруппа), ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ДесятаяГруппа))
	|					И ТаблицаОС.ОсновноеСредство.ГруппаОС В (ЗНАЧЕНИЕ(Перечисление.ГруппыОС.Здания), ЗНАЧЕНИЕ(Перечисление.ГруппыОС.Сооружения))
	|				ИЛИ ТаблицаОС.ОсновноеСредство.АмортизационнаяГруппа = ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ОтдельнаяГруппа)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТолькоЛинейный
	|ИЗ
	|	ТаблицаОС КАК ТаблицаОС";
	ТаблицаПризнаков = Запрос.Выполнить().Выгрузить();

	Возврат ТаблицаПризнаков;

КонецФункции

Функция ПодготовитьПараметрыТолькоЛинейныйМетодНУ(ТаблицаОС)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство"; // <СправочникСсылка.ОсновныеСредства>

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПолучитьПустуюТаблицуАмортизацииОС()
	
	ТаблицаАмортизации = Новый ТаблицаЗначений();

	ТаблицаАмортизации.Колонки.Добавить("ОбъектУчета",                                Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	ТаблицаАмортизации.Колонки.Добавить("СчетУчета",                                  Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаАмортизации.Колонки.Добавить("СчетНачисленияАмортизации",                  Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаАмортизации.Колонки.Добавить("НаправлениеАмортизации",                     Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТаблицаАмортизации.Колонки.Добавить("СуммаАмортизацииБУ",                         ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаАмортизации.Колонки.Добавить("СуммаАмортизацииНУ",                         ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаАмортизации.Колонки.Добавить("СуммаАмортизацииВР",                         ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаАмортизации.Колонки.Добавить("СуммаАмортизацииПР",                         ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаАмортизации.Колонки.Добавить("Подразделение",                              БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	ТаблицаАмортизации.Колонки.Добавить("СуммаКапитальныхВложенийВключаемыхВРасходы", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаАмортизации.Колонки.Добавить("НомерСтроки",                                ОбщегоНазначения.ОписаниеТипаЧисло(5, 0));
	
	Возврат ТаблицаАмортизации;
	
КонецФункции

// РАСЧЕТ И НАЧИСЛЕНИЕ ИЗНОСА

Функция ПодготовитьТаблицуИзносаБухРегл(ТаблицаОС, ТаблицаРеквизиты, Отказ) Экспорт

	ДокументОбъект = Неопределено;

	Параметры = ПодготовитьПараметрыИзносаБухРегл(ТаблицаОС, ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("КонецПериода", ?(ДокументОбъект = Неопределено, Реквизиты.ДатаРасчета,
		Новый Граница(Новый МоментВремени(ДокументОбъект.Дата, ДокументОбъект.Ссылка), ВидГраницы.Исключая)));
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Период", НачалоМесяца(Реквизиты.ДатаРасчета));
	Запрос.УстановитьПараметр("НачалоГода", НачалоГода(Реквизиты.ДатаРасчета));
	Запрос.УстановитьПараметр("ПустоеПодразделение", БухгалтерскийУчетПереопределяемый.ПустоеПодразделение());

	Если Параметры.ТаблицаОС.Количество() > 0 Тогда
		Запрос.УстановитьПараметр("ТаблицаОС", Параметры.ТаблицаОС);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство
		|ПОМЕСТИТЬ ТаблицаОС
		|ИЗ
		|	&ТаблицаОС КАК ТаблицаОС
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство";
		Запрос.Выполнить();

		УсловиеОС = " И ОсновноеСредство В (ВЫБРАТЬ ТаблицаОС.ОсновноеСредство ИЗ ТаблицаОС КАК ТаблицаОС)";
	Иначе
		УсловиеОС = "";
	КонецЕсли;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписокОСНачислениеИзноса.ОсновноеСредство КАК ОсновноеСредство
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&КонецПериода, Организация = &Организация" + УсловиеОС + ") КАК СписокОСНачислениеИзноса
	|ГДЕ
	|	СписокОСНачислениеИзноса.ПорядокПогашенияСтоимости = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ)";
	РезультатЗапроса = Запрос.Выполнить();

	Если Параметры.ТаблицаОС.Количество() > 0 Тогда
		Запрос.Текст =
		"УНИЧТОЖИТЬ ТаблицаОС";
		Запрос.Выполнить();
	КонецЕсли;
	ТаблицаОСНачислениеИзноса = РезультатЗапроса.Выгрузить();
	Запрос.УстановитьПараметр("ТаблицаОС", ТаблицаОСНачислениеИзноса);

	Запрос.Текст = ПолучитьТекстЗапросаАмортизацияОСНеСнятыеСУчетаОСПоТаблице();
	Запрос.Выполнить();

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетаУчетаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	СчетаУчетаОС.СчетУчета,
	|	СчетаУчетаОС.СчетНачисленияАмортизации КАК СчетИзноса
	|ПОМЕСТИТЬ СчетаУчетаОС
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						НеСнятыеСУчета КАК СписокОС)) КАК СчетаУчетаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетаУчетаОС.СчетУчета КАК Счет
	|ПОМЕСТИТЬ Счета
	|ИЗ
	|	СчетаУчетаОС КАК СчетаУчетаОС
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетаУчетаОС.СчетИзноса
	|ИЗ
	|	СчетаУчетаОС КАК СчетаУчетаОС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетаУчетаОС.СчетУчета КАК Счет
	|ПОМЕСТИТЬ СчетаУчетаЗаГод
	|ИЗ
	|	СчетаУчетаОС КАК СчетаУчетаОС
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетаБухгалтерскогоУчетаОС.СчетУчета
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС КАК СчетаБухгалтерскогоУчетаОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НеСнятыеСУчета КАК СписокОС
	|		ПО СчетаБухгалтерскогоУчетаОС.ОсновноеСредство = СписокОС.ОсновноеСредство
	|			И (СчетаБухгалтерскогоУчетаОС.Организация = &Организация)
	|			И (СчетаБухгалтерскогоУчетаОС.Период МЕЖДУ &НачалоГода И &Период)";
	Запрос.Выполнить();

	Если ТранзакцияАктивна() И ОбщегоНазначенияБПВызовСервераПовтИсп.ИспользоватьУправляемыеБлокировки() Тогда

		// Блокировка регистра бухгалтерии.

		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СчетаУчетаОС.СчетИзноса КАК Счет
		|ИЗ
		|	СчетаУчетаОС КАК СчетаУчетаОС
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СчетаБухгалтерскогоУчетаОС.СчетНачисленияАмортизации
		|ИЗ
		|	РегистрСведений.СчетаБухгалтерскогоУчетаОС КАК СчетаБухгалтерскогоУчетаОС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НеСнятыеСУчета КАК СписокОС
		|		ПО СчетаБухгалтерскогоУчетаОС.ОсновноеСредство = СписокОС.ОсновноеСредство
		|			И (СчетаБухгалтерскогоУчетаОС.Организация = &Организация)
		|			И (СчетаБухгалтерскогоУчетаОС.Период МЕЖДУ &НачалоГода И &Период)";
		РезультатЗапроса = Запрос.Выполнить();

		СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы, ИсточникДанных",
			"РегистрБухгалтерии", "Хозрасчетный", РезультатЗапроса);

		СтруктураЗначенийБлокировки = Новый Структура("Период, Организация",
			Новый Диапазон(, КонецМесяца(Реквизиты.ДатаРасчета)), Реквизиты.Организация);

		СтруктураИсточникаДанных = Новый Структура("Счет", "Счет");

		ОбщегоНазначенияБПВызовСервера.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, СтруктураЗначенийБлокировки, СтруктураИсточникаДанных);

	КонецЕсли;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК ОсновноеСредство,
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ХозрасчетныйОстатки.СуммаОстатокДт
	|ПОМЕСТИТЬ ХозрасчетныйОстатки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&КонецПериода,
	|			Счет В
	|				(ВЫБРАТЬ
	|					Счета.Счет
	|				ИЗ
	|					Счета КАК Счета),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						НеСнятыеСУчета КАК СписокОС)) КАК ХозрасчетныйОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПервоначальныеСведенияОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ПервоначальныеСведенияОС.ИнвентарныйНомер
	|ПОМЕСТИТЬ ПервоначальныеСведенияОС
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						НеСнятыеСУчета КАК СписокОС)) КАК ПервоначальныеСведенияОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаУчетаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ПервоначальныеСведенияОС.ИнвентарныйНомер,
	|	ЕСТЬNULL(ВосстановительнаяСтоимость.СуммаОстатокДт, 0) - ЕСТЬNULL(Износ.СуммаОстатокДт, 0) КАК ОстаточнаяСтоимость
	|ПОМЕСТИТЬ СписокОС
	|ИЗ
	|	СчетаУчетаОС КАК СчетаУчетаОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОстатки КАК ВосстановительнаяСтоимость
	|		ПО СчетаУчетаОС.ОсновноеСредство = ВосстановительнаяСтоимость.ОсновноеСредство
	|			И СчетаУчетаОС.СчетУчета = ВосстановительнаяСтоимость.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОстатки КАК Износ
	|		ПО СчетаУчетаОС.ОсновноеСредство = Износ.ОсновноеСредство
	|			И СчетаУчетаОС.СчетИзноса = Износ.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПервоначальныеСведенияОС КАК ПервоначальныеСведенияОС
	|		ПО СчетаУчетаОС.ОсновноеСредство = ПервоначальныеСведенияОС.ОсновноеСредство
	|ГДЕ
	|	ЕСТЬNULL(ВосстановительнаяСтоимость.СуммаОстатокДт, 0) - ЕСТЬNULL(Износ.СуммаОстатокДт, 0) > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";
	Запрос.Выполнить();

	ТекстЗапросаВременныеТаблицы = "";
	ТекстЗапросаОбъединение = "";

	ШаблонТекстаЗапросаВременныеТаблицы =
	"ВЫБРАТЬ
	|	НачислениеАмортизацииОС.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ СписокОС_Месяц_
	|ИЗ
	|	РегистрСведений.НачислениеАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|			&НачалоМесяца_Месяц_,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС)) КАК НачислениеАмортизацииОС
	|ГДЕ
	|	НачислениеАмортизацииОС.НачислятьАмортизацию = ИСТИНА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаУчетаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	СчетаУчетаОС.СчетУчета КАК СчетУчета,
	|	СчетаУчетаОС.СчетНачисленияАмортизации КАК СчетИзноса
	|ПОМЕСТИТЬ СчетаУчетаОС_Месяц_
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|			&НачалоМесяца_Месяц_,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС_Месяц_ КАК СписокОС)) КАК СчетаУчетаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПодразделенияОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ПодразделенияОС.Местонахождение КАК Подразделение
	|ПОМЕСТИТЬ ПодразделенияОС_Месяц_
	|ИЗ
	|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	|			&НачалоМесяца_Месяц_,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС_Месяц_ КАК СписокОС)) КАК ПодразделенияОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НормыАмортизацииОС.ОсновноеСредство КАК ОсновноеСредство,
	|	НормыАмортизацииОС.КоэффициентАмортизации КАК НормаАмортизации
	|ПОМЕСТИТЬ НормыАмортизацииОС_Месяц_
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|			&НачалоМесяца_Месяц_,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС_Месяц_ КАК СписокОС)) КАК НормыАмортизацииОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК ОсновноеСредство,
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ХозрасчетныйОстатки.СуммаОстатокДт КАК ВосстановительнаяСтоимость
	|ПОМЕСТИТЬ ХозрасчетныйОстатки_Месяц_
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&НачалоМесяца_Месяц_,
	|			Счет В
	|				(ВЫБРАТЬ
	|					СчетаУчетаЗаГод.Счет
	|				ИЗ
	|					СчетаУчетаЗаГод КАК СчетаУчетаЗаГод),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС_Месяц_ КАК СписокОС)) КАК ХозрасчетныйОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	Счет";

	ШаблонТекстаЗапросаОбъединение =
	"ВЫБРАТЬ
	|	СчетаУчетаОС_Месяц_.ОсновноеСредство КАК ОсновноеСредство,
	|	СчетаУчетаОС_Месяц_.СчетИзноса КАК СчетИзноса,
	|	ВЫРАЗИТЬ(&НачалоМесяца_Месяц_ КАК ДАТА) КАК НачалоМесяца,
	|	ЕСТЬNULL(ХозрасчетныйОстатки_Месяц_.ВосстановительнаяСтоимость, 0) КАК ВосстановительнаяСтоимость,
	|	ЕСТЬNULL(ПодразделенияОС_Месяц_.Подразделение, &ПустоеПодразделение) КАК Подразделение,
	|	ЕСТЬNULL(НормыАмортизацииОС_Месяц_.НормаАмортизации, 0) КАК НормаАмортизации
	|//ПОМЕСТИТЬ
	|ИЗ
	|	СчетаУчетаОС_Месяц_ КАК СчетаУчетаОС_Месяц_
	|		ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОстатки_Месяц_ КАК ХозрасчетныйОстатки_Месяц_
	|		ПО СчетаУчетаОС_Месяц_.ОсновноеСредство = ХозрасчетныйОстатки_Месяц_.ОсновноеСредство
	|			И СчетаУчетаОС_Месяц_.СчетУчета = ХозрасчетныйОстатки_Месяц_.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПодразделенияОС_Месяц_ КАК ПодразделенияОС_Месяц_
	|		ПО СчетаУчетаОС_Месяц_.ОсновноеСредство = ПодразделенияОС_Месяц_.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ НормыАмортизацииОС_Месяц_ КАК НормыАмортизацииОС_Месяц_
	|		ПО СчетаУчетаОС_Месяц_.ОсновноеСредство = НормыАмортизацииОС_Месяц_.ОсновноеСредство";

	Для НомерМесяца = 1 По Месяц(Реквизиты.ДатаРасчета) Цикл

		НомерМесяцаСтр = СокрЛП(НомерМесяца);

		Запрос.УстановитьПараметр("НачалоМесяца" + НомерМесяцаСтр, ДобавитьМесяц(НачалоГода(Реквизиты.ДатаРасчета), НомерМесяца - 1));

		Если НЕ ПустаяСтрока(ТекстЗапросаВременныеТаблицы) Тогда
			ТекстЗапросаВременныеТаблицы = ТекстЗапросаВременныеТаблицы + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
		КонецЕсли;

		ТекстЗапросаВременныеТаблицы = ТекстЗапросаВременныеТаблицы + СтрЗаменить(ШаблонТекстаЗапросаВременныеТаблицы,
			"_Месяц_", НомерМесяцаСтр);


		Если НЕ ПустаяСтрока(ТекстЗапросаОбъединение) Тогда
			ТекстЗапросаОбъединение = ТекстЗапросаОбъединение + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;

		ТекстДляВставки = СтрЗаменить(ШаблонТекстаЗапросаОбъединение, "_Месяц_", НомерМесяцаСтр);
		Если НомерМесяца = 1 Тогда
			ТекстДляВставки = СтрЗаменить(ТекстДляВставки, "//ПОМЕСТИТЬ", "ПОМЕСТИТЬ СтоимостьЗаГод");
		КонецЕсли;

		ТекстЗапросаОбъединение = ТекстЗапросаОбъединение + ТекстДляВставки;

	КонецЦикла;
	ТекстЗапросаОбъединение = ТекстЗапросаОбъединение + "
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";

	Запрос.Текст = ТекстЗапросаВременныеТаблицы + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета()
		+ ТекстЗапросаОбъединение;
	Запрос.Выполнить();

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписокОС.ОсновноеСредство,
	|	ПРЕДСТАВЛЕНИЕ(СписокОС.ОсновноеСредство) КАК ОсновноеСредствоПредставление,
	|	СписокОС.ОсновноеСредство.Код КАК Код,
	|	СписокОС.ИнвентарныйНомер,
	|	СписокОС.ОстаточнаяСтоимость,
	|	СтоимостьЗаГод.СчетИзноса,
	|	СтоимостьЗаГод.НачалоМесяца КАК НачалоМесяца,
	|	СтоимостьЗаГод.ВосстановительнаяСтоимость,
	|	СтоимостьЗаГод.Подразделение,
	|	СтоимостьЗаГод.НормаАмортизации
	|ИЗ
	|	СписокОС КАК СписокОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтоимостьЗаГод КАК СтоимостьЗаГод
	|		ПО СписокОС.ОсновноеСредство = СтоимостьЗаГод.ОсновноеСредство
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код,
	|	НачалоМесяца";

	ТаблицаИзноса = Запрос.Выполнить().Выгрузить();

	ТаблицаИзноса.Колонки.Добавить("Сумма", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));

	СписокКолонок = "ОсновноеСредствоПредставление,Код,ИнвентарныйНомер";
	ТаблицаИзносаБезНормАмортизации = ТаблицаИзноса.СкопироватьКолонки(СписокКолонок);
	
	// Расчет износа по объектам ОС
	Для каждого СтрокаОС Из ТаблицаИзноса Цикл

		Если НЕ ЗначениеЗаполнено(СтрокаОС.НормаАмортизации) Тогда
			Отказ = Истина;
			ЗаполнитьЗначенияСвойств(ТаблицаИзносаБезНормАмортизации.Добавить(), СтрокаОС);
			Продолжить;
		КонецЕсли;

		Если Не Отказ Тогда
			СтрокаОС.Сумма = СтрокаОС.ВосстановительнаяСтоимость * СтрокаОС.НормаАмортизации / 1200;
		КонецЕсли;

	КонецЦикла;

	ТаблицаИзносаБезНормАмортизации.Свернуть(СписокКолонок);
	Если Отказ И Реквизиты.ВыдаватьСообщения Тогда
		ТекстСообщения = НСтр("ru = 'Не определена годовая норма амортизационных отчислений для основного средства '");
		Для Каждого СтрокаОС Из ТаблицаИзносаБезНормАмортизации Цикл
			СообщитьОбОшибкеПриНачисленииАмортизации(СтрокаОС, ТекстСообщения, Реквизиты.Регистратор, Отказ);
		КонецЦикла;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;

	// Сворачиваем таблицу по ОС и счету начисления износа
	ТаблицаИзноса.Свернуть("ОсновноеСредство, СчетИзноса, Подразделение, ВосстановительнаяСтоимость", "Сумма");

	// Проверяем, не превышает ли рассчитанный износ остаточную стоимость ОС
	Для каждого СтрокаОС Из ТаблицаИзноса Цикл

		СтрокаОС.Сумма = Мин(СтрокаОС.Сумма, СтрокаОС.ВосстановительнаяСтоимость);

	КонецЦикла;

	ТаблицаИзноса.Свернуть("ОсновноеСредство, СчетИзноса, Подразделение", "Сумма");

	Возврат ТаблицаИзноса;

КонецФункции

Функция ПодготовитьПараметрыИзносаБухРегл(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство"; // <СправочникСсылка.ОсновныеСредства>

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "ДатаРасчета," // <Дата>
	+ "Организация," // <СправочникСсылка.Организации>
	+ "Регистратор," // <ДокументСсылка.*>
	+ "ВыдаватьСообщения"; // <Булево>
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции


Процедура СформироватьДвиженияНачислениеИзноса(ТаблицаИзноса, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыНачислениеИзноса(ТаблицаИзноса, ТаблицаРеквизиты);

	Если Параметры.ТаблицаИзноса.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаИзноса Цикл

		Если СтрокаТаблицы.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;

		Проводка.Содержание = "Износ основных средств";

		Проводка.СчетДт = СтрокаТаблицы.СчетИзноса;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);

		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = СтрокаТаблицы.Подразделение;
		КонецЕсли;

		Проводка.Сумма = СтрокаТаблицы.Сумма;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыНачислениеИзноса(ТаблицаИзноса, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаИзноса

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство,"           // <СправочникСсылка.ОсновныеСредства>
	+ "Подразделение,"              // <Ссылка на справочник подразделений>
	+ "Сумма,"                      // <Число, 15, 2> - сумма износа к начислению
	+ "СчетИзноса";                 // <ПланСчетовСсылка.Хозрасчетный> - счет начисления износа ОС

	Параметры.Вставить("ТаблицаИзноса",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаИзноса, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"      // <Дата>
	+ "Организация," // <СправочникСсылка.Организации>
	+ "Регистратор"; // <ДокументСсылка.*>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ВЫБЫТИЕ ОС

// Структура ПараметрыВыбытия может быть досрочно возвращена из ПодготовитьТаблицыСведенийПоВыбытиюОС,
// и чтобы "ПодготовитьПараметры*" не выдавали ошибки, надо заранее проинициализировать структуру
// всеми возможными значениями (пустыми таблицами значений с колонками и т.п.)
//
Функция ПолучитьИнициализированнуюСтруктуруПараметровВыбытия()

	ПараметрыВыбытия = Новый Структура;

	// СуммаКапитальныхВложенийВключаемыхВРасходы, число
	ПараметрыВыбытия.Вставить("СуммаКапитальныхВложенийВключаемыхВРасходы", 0);

	// НачислениеАмортизации, структура из двух таблиц: ТаблицаЗатрат и ТаблицаРеквизиты
	СтруктураТаблицаЗатрат = Новый Структура("ОбъектУчета, ПодразделениеЗатрат, Подразделение,
				|Субконто1, Субконто2, Субконто3, СуммаБУ, СуммаНУ, СуммаПР, СуммаВР, СчетЗатрат, СчетАмортизации");
	СтруктураТаблицаРеквизиты = Новый Структура("Период, Организация, Содержание");
	ПараметрыВыбытия.Вставить("НачислениеАмортизации",
		Новый Структура("ТаблицаЗатрат, ТаблицаРеквизиты",
			УправлениеВнеоборотнымиАктивами.ПолучитьПустуюТаблицуЗначенийСКолонками(СтруктураТаблицаЗатрат), // ТаблицаЗатрат
			УправлениеВнеоборотнымиАктивами.ПолучитьПустуюТаблицуЗначенийСКолонками(СтруктураТаблицаРеквизиты)  // ТаблицаРеквизиты
		)
	);

	// АмортизационнаяПремия, структура из двух таблиц: ТаблицаНачисленияАмортизационнойПремии и ТаблицаРеквизиты
	СтруктураТаблицаНачисленияАмортизационнойПремии = Новый Структура("ДокументАмортизационнойПремии, ОсновноеСредство,
				|Подразделение, ПодразделениеПоАмортизационнойПремии,
				|СубконтоПоАмортизационнойПремии1, СубконтоПоАмортизационнойПремии2, СубконтоПоАмортизационнойПремии3,
				|СуммаНУ, СуммаПР, СуммаВР, СчетУчета, СчетУчетаЗатратПоАмортизационнойПремии");
	СтруктураТаблицаРеквизиты = Новый Структура("Период, Организация, Регистратор");
	ПараметрыВыбытия.Вставить("АмортизационнаяПремия",
		Новый Структура("ТаблицаНачисленияАмортизационнойПремии, ТаблицаРеквизиты",
			УправлениеВнеоборотнымиАктивами.ПолучитьПустуюТаблицуЗначенийСКолонками(СтруктураТаблицаНачисленияАмортизационнойПремии), // ТаблицаНачисленияАмортизационнойПремии
			УправлениеВнеоборотнымиАктивами.ПолучитьПустуюТаблицуЗначенийСКолонками(СтруктураТаблицаРеквизиты) // ТаблицаРеквизиты
		)
	);

	// НачислениеИзноса, структура из двух таблиц: ТаблицаИзноса и ТаблицаРеквизиты
	СтруктураТаблицаИзноса = Новый Структура("ОсновноеСредство, Подразделение, Сумма, СчетИзноса");
	СтруктураТаблицаРеквизиты = Новый Структура("Период, Организация, Регистратор");
	ПараметрыВыбытия.Вставить("НачислениеИзноса",
		Новый Структура("ТаблицаИзноса, ТаблицаРеквизиты",
			УправлениеВнеоборотнымиАктивами.ПолучитьПустуюТаблицуЗначенийСКолонками(СтруктураТаблицаИзноса), // ТаблицаИзноса
			УправлениеВнеоборотнымиАктивами.ПолучитьПустуюТаблицуЗначенийСКолонками(СтруктураТаблицаРеквизиты)  // ТаблицаРеквизиты
		)
	);

	// СобытияОС, структура из двух таблиц: ТаблицаРеквизиты и ТаблицаОС
	СтруктураТаблицаОС = Новый Структура("ОсновноеСредство, СуммаЗатратБУ, СуммаЗатратНУ, СуммаЗатратУСН");
	СтруктураТаблицаРеквизиты = Новый Структура("Период, Номер, Организация, СобытиеОС, Регистратор");
	ПараметрыВыбытия.Вставить("СобытияОС",
		Новый Структура("ТаблицаОС, ТаблицаРеквизиты",
			УправлениеВнеоборотнымиАктивами.ПолучитьПустуюТаблицуЗначенийСКолонками(СтруктураТаблицаОС), // ТаблицаОС
			УправлениеВнеоборотнымиАктивами.ПолучитьПустуюТаблицуЗначенийСКолонками(СтруктураТаблицаРеквизиты)  // ТаблицаРеквизиты
		)
	);

	// НачислениеАмортизацииОСБУ, структура из булево НачислятьАмортизацию и двух таблиц: ТаблицаРеквизиты и ТаблицаОС
	СтруктураТаблицаОС = Новый Структура("ОсновноеСредство");
	СтруктураТаблицаРеквизиты = Новый Структура("Период, НачислятьАмортизацию, Организация");
	ПараметрыВыбытия.Вставить("НачислениеАмортизацииОСБУ",
		Новый Структура("НачислятьАмортизацию, ТаблицаОС, ТаблицаРеквизиты",
			Ложь,
			УправлениеВнеоборотнымиАктивами.ПолучитьПустуюТаблицуЗначенийСКолонками(СтруктураТаблицаОС), // ТаблицаОС
			УправлениеВнеоборотнымиАктивами.ПолучитьПустуюТаблицуЗначенийСКолонками(СтруктураТаблицаРеквизиты) // ТаблицаРеквизиты
		)
	);

	// НачислениеАмортизацииОСНУ, структура из булево НачислятьАмортизацию и двух таблиц: ТаблицаРеквизиты и ТаблицаОС
	СтруктураТаблицаОС = Новый Структура("ОсновноеСредство");
	СтруктураТаблицаРеквизиты = Новый Структура("Период, НачислятьАмортизацию, Организация");
	ПараметрыВыбытия.Вставить("НачислениеАмортизацииОСНУ",
		Новый Структура("НачислятьАмортизацию, ТаблицаОС, ТаблицаРеквизиты",
			Ложь,
			УправлениеВнеоборотнымиАктивами.ПолучитьПустуюТаблицуЗначенийСКолонками(СтруктураТаблицаОС), // ТаблицаОС
			УправлениеВнеоборотнымиАктивами.ПолучитьПустуюТаблицуЗначенийСКолонками(СтруктураТаблицаРеквизиты) // ТаблицаРеквизиты
		)
	);

	// ТаблицаПараметрыСписания, таблица значений
	ПараметрыВыбытия.Вставить("ТаблицаПараметрыСписания", Новый ТаблицаЗначений); // Достаточно указать ТЗ без строк, колонки прописывать не нужно

	Возврат ПараметрыВыбытия;

КонецФункции

Функция ПодготовитьТаблицыСведенийПоВыбытиюОС(ТаблицаОС, ТаблицаРеквизиты, Отказ, ВыдаватьСообщения = Ложь) Экспорт

	Параметры = ПодготовитьПараметрыПодготовитьТаблицыСведенийПоВыбытиюОС(ТаблицаОС, ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	// Проинициализируем структуру, чтобы в случае "досрочного" выхода в структуре были все таблицы, хоть и пустые
	ПараметрыВыбытия = ПолучитьИнициализированнуюСтруктуруПараметровВыбытия();

	Параметры.Реквизиты.Колонки.Добавить("ДатаРасчета", Новый ОписаниеТипов("Дата"));
	Параметры.Реквизиты.ЗаполнитьЗначения(Реквизиты.Период, "ДатаРасчета");
	Параметры.Реквизиты.Колонки.Добавить("ВыдаватьСообщения", Новый ОписаниеТипов("Булево"));
	Параметры.Реквизиты.ЗаполнитьЗначения(ВыдаватьСообщения = Истина, "ВыдаватьСообщения");
	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		ТаблицаАмортизации = ПолучитьПустуюТаблицуАмортизацииОС();
	Иначе
		ТаблицаАмортизации = ПодготовитьТаблицуАмортизацияОС(Параметры.ТаблицаОС, Параметры.Реквизиты, Отказ);
		Если Отказ Тогда
			Возврат ПараметрыВыбытия;
		КонецЕсли;
	КонецЕсли;

	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос.УстановитьПараметр("ТабАмортизации", ТаблицаАмортизации);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТабАмортизации.ОбъектУчета КАК ОбъектУчета,
	|	ТабАмортизации.СуммаАмортизацииБУ КАК СуммаАмортизацииБУ,
	|	ТабАмортизации.СуммаАмортизацииНУ КАК СуммаАмортизацииНУ,
	|	ТабАмортизации.СуммаАмортизацииПР КАК СуммаАмортизацииПР,
	|	ТабАмортизации.СуммаАмортизацииВР КАК СуммаАмортизацииВР,
	|	ТабАмортизации.СуммаКапитальныхВложенийВключаемыхВРасходы КАК СуммаКапитальныхВложенийВключаемыхВРасходы
	|ПОМЕСТИТЬ ТабАмортизации
	|ИЗ
	|	&ТабАмортизации КАК ТабАмортизации";
	Запрос.Выполнить();

	ТаблицаЗатрат = УправлениеВнеоборотнымиАктивамиПереопределяемый.ПодготовитьТаблицуРаспределениеАмортизацииПоНаправлениямРегл(ТаблицаАмортизации, Параметры.Реквизиты, Отказ);
	Если Отказ Тогда
		Возврат ПараметрыВыбытия;
	КонецЕсли;

	ПараметрыНачисленияАмортизации = Новый Структура;
	ПараметрыНачисленияАмортизации.Вставить("ТаблицаЗатрат", ТаблицаЗатрат);
	ПараметрыНачисленияАмортизации.Вставить("ТаблицаРеквизиты", Параметры.Реквизиты);

	// Параметры для процедуры СформироватьДвиженияНачислениеАмортизации
	ПараметрыВыбытия.Вставить("НачислениеАмортизации", ПараметрыНачисленияАмортизации);

	ТаблицаНачисленияАмортизационнойПремии = ПодготовитьТаблицуСуммАмортизационнойПремии(ТаблицаАмортизации, Параметры.Реквизиты, Отказ);
	Если Отказ Тогда
		Возврат ПараметрыВыбытия;
	КонецЕсли;

	АмортизационнаяПремия = Новый Структура;
	АмортизационнаяПремия.Вставить("ТаблицаНачисленияАмортизационнойПремии", ТаблицаНачисленияАмортизационнойПремии);
	АмортизационнаяПремия.Вставить("ТаблицаРеквизиты", Параметры.Реквизиты);

	// Параметры для процедуры СформироватьДвиженияНачисленияАмортизационнойПремии
	ПараметрыВыбытия.Вставить("АмортизационнаяПремия", АмортизационнаяПремия);

	// Параметры для восстановления амортизационной премии
	ПараметрыВыбытия.Вставить("СуммаКапитальныхВложенийВключаемыхВРасходы", ТаблицаАмортизации.Итог("СуммаКапитальныхВложенийВключаемыхВРасходы"));

	ТаблицаИзноса = ПодготовитьТаблицуИзносаБухРегл(Параметры.ТаблицаОС, Параметры.Реквизиты, Отказ);
	Если Отказ Тогда
		Возврат ПараметрыВыбытия;
	КонецЕсли;

	НачислениеИзноса = Новый Структура;
	НачислениеИзноса.Вставить("ТаблицаИзноса", ТаблицаИзноса);
	НачислениеИзноса.Вставить("ТаблицаРеквизиты", Параметры.Реквизиты);

	// Параметры для процедуры СформироватьДвиженияНачислениеИзноса
	ПараметрыВыбытия.Вставить("НачислениеИзноса", НачислениеИзноса);

	Запрос.УстановитьПараметр("ТабИзноса", ТаблицаИзноса);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТабИзноса.ОсновноеСредство КАК ОсновноеСредство,
	|	ТабИзноса.Сумма КАК СуммаИзноса
	|ПОМЕСТИТЬ ТабИзноса
	|ИЗ
	|	&ТабИзноса КАК ТабИзноса";
	Запрос.Выполнить();

	ТаблицаТолькоЛинейный = ПодготовитьТаблицуТолькоЛинейныйМетодНУ(Параметры.ТаблицаОС, Отказ);

	Запрос.УстановитьПараметр("Дата", Реквизиты.Период);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Ссылка", Реквизиты.Регистратор);
	Запрос.УстановитьПараметр("ТаблицаОС", Параметры.ТаблицаОС);
	Запрос.УстановитьПараметр("ТаблицаТолькоЛинейный", ТаблицаТолькоЛинейный);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки КАК НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ СписокОС
	|ИЗ
	|	&ТаблицаОС КАК ТаблицаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТолькоЛинейный.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаТолькоЛинейный.ТолькоЛинейный КАК ТолькоЛинейный
	|ПОМЕСТИТЬ ПризнакТолькоЛинейный
	|ИЗ
	|	&ТаблицаТолькоЛинейный КАК ТаблицаТолькоЛинейный
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаУчетаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	СчетаУчетаОС.СчетУчета КАК СчетУчета,
	|	СчетаУчетаОС.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации
	|ПОМЕСТИТЬ СчетаУчетаОС
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|			&Дата,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС)) КАК СчетаУчетаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетаУчетаОС.СчетУчета КАК Счет
	|ПОМЕСТИТЬ РазличныеСчетаУчетаОС
	|ИЗ
	|	СчетаУчетаОС КАК СчетаУчетаОС
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетаУчетаОС.СчетНачисленияАмортизации
	|ИЗ
	|	СчетаУчетаОС КАК СчетаУчетаОС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПервоначальныеСведенияОСБУ.ОсновноеСредство КАК ОсновноеСредство,
	|	ПервоначальныеСведенияОСБУ.ПорядокПогашенияСтоимости
	|ПОМЕСТИТЬ ПервоначальныеСведенияОСБУ
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|			&Дата,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС)) КАК ПервоначальныеСведенияОСБУ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПервоначальныеСведенияОСНУ.ОсновноеСредство КАК ОсновноеСредство,
	|	ПервоначальныеСведенияОСНУ.ПорядокВключенияСтоимостиВСоставРасходов
	|ПОМЕСТИТЬ ПервоначальныеСведенияОСНУ
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчет.СрезПоследних(
	|			&Дата,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС)) КАК ПервоначальныеСведенияОСНУ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПодразделенияОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ПодразделенияОС.Местонахождение КАК Подразделение
	|ПОМЕСТИТЬ ПодразделенияОС
	|ИЗ
	|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	|			&Дата,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС)) КАК ПодразделенияОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";
	Запрос.Выполнить();

	Если ТранзакцияАктивна() И ОбщегоНазначенияБПВызовСервераПовтИсп.ИспользоватьУправляемыеБлокировки() Тогда
		// Блокировка регистра бухгалтерии.
		СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы, ИсточникДанных, ИмяВременнойТаблицы",
			"РегистрБухгалтерии", "Хозрасчетный", Запрос.МенеджерВременныхТаблиц, "РазличныеСчетаУчетаОС");
		СтруктураЗначенийБлокировки = Новый Структура("Период, Организация",
			Новый Диапазон(, КонецМесяца(Реквизиты.Период)), Реквизиты.Организация);
		СтруктураИсточникаДанных = Новый Структура("Счет", "Счет");
		ОбщегоНазначенияБПВызовСервера.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, СтруктураЗначенийБлокировки, СтруктураИсточникаДанных);
	КонецЕсли;

	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтоимостьОС.Субконто1 КАК ОсновноеСредство,
	|	СтоимостьОС.Счет КАК Счет,
	|	СтоимостьОС.СуммаОстатокДт КАК СуммаОстатокДт,
	|	СтоимостьОС.СуммаНУОстатокДт КАК СуммаНУОстатокДт,
	|	СтоимостьОС.СуммаПРОстатокДт КАК СуммаПРОстатокДт,
	|	СтоимостьОС.СуммаВРОстатокДт КАК СуммаВРОстатокДт,
	|	СтоимостьОС.СуммаОстатокКт КАК СуммаОстатокКт,
	|	СтоимостьОС.СуммаНУОстатокКт КАК СуммаНУОстатокКт,
	|	СтоимостьОС.СуммаПРОстатокКт КАК СуммаПРОстатокКт,
	|	СтоимостьОС.СуммаВРОстатокКт КАК СуммаВРОстатокКт
	|ПОМЕСТИТЬ СтоимостьОС
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Дата,
	|			Счет В
	|				(ВЫБРАТЬ
	|					РазличныеСчетаУчетаОС.Счет
	|				ИЗ
	|					РазличныеСчетаУчетаОС КАК РазличныеСчетаУчетаОС),
	|			&ВидыСубконто,
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС)) КАК СтоимостьОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокОС.НомерСтроки КАК НомерСтроки,
	|	СписокОС.ОсновноеСредство  КАК ОсновноеСредство,
	|	ПодразделенияОС.Подразделение КАК Подразделение,
	|	ПервоначальныеСведенияОСБУ.ПорядокПогашенияСтоимости КАК ПорядокПогашенияСтоимостиБУ,
	|	ПервоначальныеСведенияОСНУ.ПорядокВключенияСтоимостиВСоставРасходов КАК ПорядокВключенияСтоимостиВСоставРасходовНУ,
	|	СчетаУчетаОС.СчетУчета КАК СчетУчета,
	|	СчетаУчетаОС.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации,
	|	ЕСТЬNULL(СтоимостьОС.СуммаОстатокДт, 0) КАК СтоимостьОС,
	|	ЕСТЬNULL(СтоимостьОС.СуммаНУОстатокДт, 0) - ЕСТЬNULL(ТабАмортизации.СуммаКапитальныхВложенийВключаемыхВРасходы, 0) КАК СтоимостьОСНУ,
	|	ЕСТЬNULL(СтоимостьОС.СуммаПРОстатокДт, 0) КАК СтоимостьОСПР,
	|	ЕСТЬNULL(СтоимостьОС.СуммаВРОстатокДт, 0) + ЕСТЬNULL(ТабАмортизации.СуммаКапитальныхВложенийВключаемыхВРасходы, 0) КАК СтоимостьОСВР,
	|	ЕСТЬNULL(АмортизацияОС.СуммаОстатокКт, 0) + ЕСТЬNULL(ТабАмортизации.СуммаАмортизацииБУ, 0) КАК АмортизацияОС,
	|	ЕСТЬNULL(АмортизацияОС.СуммаНУОстатокКт, 0) + ЕСТЬNULL(ТабАмортизации.СуммаАмортизацииНУ, 0) КАК АмортизацияОСНУ,
	|	ЕСТЬNULL(АмортизацияОС.СуммаПРОстатокКт, 0) + ЕСТЬNULL(ТабАмортизации.СуммаАмортизацииПР, 0) КАК АмортизацияОСПР,
	|	ЕСТЬNULL(АмортизацияОС.СуммаВРОстатокКт, 0) + ЕСТЬNULL(ТабАмортизации.СуммаАмортизацииВР, 0) КАК АмортизацияОСВР,
	|	ЕСТЬNULL(АмортизацияОС.СуммаОстатокДт, 0) + ЕСТЬNULL(ТабИзноса.СуммаИзноса, 0) КАК ИзносОС,
	|	ВЫБОР
	|		КОГДА ПервоначальныеСведенияОСБУ.ОсновноеСредство ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОтражалосьВБухгалтерскомУчете,
	|	ВЫБОР
	|		КОГДА ПервоначальныеСведенияОСНУ.ОсновноеСредство ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОтражалосьВНалоговомУчете,
	|	ПризнакТолькоЛинейный.ТолькоЛинейный,
	|	ВЫБОР
	|		КОГДА ПервоначальныеСведенияОСБУ.ПорядокПогашенияСтоимости = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации)
	|				ИЛИ ПервоначальныеСведенияОСБУ.ПорядокПогашенияСтоимости = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПрекратитьНачислениеАмортизацииБУ,
	|	ВЫБОР
	|		КОГДА ПервоначальныеСведенияОСНУ.ПорядокВключенияСтоимостиВСоставРасходов = ЗНАЧЕНИЕ(Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПрекратитьНачислениеАмортизацииНУ
	|ИЗ
	|	СписокОС КАК СписокОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПервоначальныеСведенияОСБУ КАК ПервоначальныеСведенияОСБУ
	|		ПО СписокОС.ОсновноеСредство = ПервоначальныеСведенияОСБУ.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПервоначальныеСведенияОСНУ КАК ПервоначальныеСведенияОСНУ
	|		ПО СписокОС.ОсновноеСредство = ПервоначальныеСведенияОСНУ.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаУчетаОС КАК СчетаУчетаОС
	|		ПО СписокОС.ОсновноеСредство = СчетаУчетаОС.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтоимостьОС КАК СтоимостьОС
	|		ПО (СчетаУчетаОС.ОсновноеСредство = СтоимостьОС.ОсновноеСредство)
	|			И (СчетаУчетаОС.СчетУчета = СтоимостьОС.Счет)
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтоимостьОС КАК АмортизацияОС
	|		ПО (СчетаУчетаОС.ОсновноеСредство = АмортизацияОС.ОсновноеСредство)
	|			И (СчетаУчетаОС.СчетНачисленияАмортизации = АмортизацияОС.Счет)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПодразделенияОС КАК ПодразделенияОС
	|		ПО СписокОС.ОсновноеСредство = ПодразделенияОС.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТабАмортизации КАК ТабАмортизации
	|		ПО СписокОС.ОсновноеСредство = ТабАмортизации.ОбъектУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТабИзноса КАК ТабИзноса
	|		ПО СписокОС.ОсновноеСредство = ТабИзноса.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПризнакТолькоЛинейный КАК ПризнакТолькоЛинейный
	|		ПО СписокОС.ОсновноеСредство = ПризнакТолькоЛинейный.ОсновноеСредство
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	ТаблицаПараметрыСписания = Запрос.Выполнить().Выгрузить();

	// Параметры для процедуры СформироватьДвиженияРегистрацияСобытияОС
	ПараметрыСобытияОС = Новый Структура;
	ПараметрыСобытияОС.Вставить("ТаблицаРеквизиты", Параметры.Реквизиты);

	Параметры.ТаблицаОС.Колонки.Добавить("СуммаЗатратБУ", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	Параметры.ТаблицаОС.Колонки.Добавить("СуммаЗатратНУ", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	Параметры.ТаблицаОС.Колонки.Добавить("СуммаЗатратУСН", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));

	ПараметрыСобытияОС.Вставить("ТаблицаОС", Параметры.ТаблицаОС);

	ПараметрыВыбытия.Вставить("СобытияОС", ПараметрыСобытияОС);

	// Параметры для процедуры СформироватьДвиженияИзменениеПризнакаНачисленияАмортизацииОСБУ
	ПараметрыНачислениеАмортизацииОСБУ = Новый Структура;
	Параметры.Реквизиты.Колонки.Добавить("НачислятьАмортизацию", Новый ОписаниеТипов("Булево"));
	Параметры.Реквизиты.ЗаполнитьЗначения(Ложь, "НачислятьАмортизацию");
	ПараметрыНачислениеАмортизацииОСБУ.Вставить("ТаблицаРеквизиты", Параметры.Реквизиты);
	ТаблицаНачислениеАмортизацииОСБУ = ТаблицаПараметрыСписания.Скопировать(
		Новый Структура("ПрекратитьНачислениеАмортизацииБУ", Истина), "ОсновноеСредство");
	ПараметрыНачислениеАмортизацииОСБУ.Вставить("ТаблицаОС", ТаблицаНачислениеАмортизацииОСБУ);

	ПараметрыВыбытия.Вставить("НачислениеАмортизацииОСБУ", ПараметрыНачислениеАмортизацииОСБУ);

	// Параметры для процедура СформироватьДвиженияИзменениеПризнакаНачисленияАмортизацииОСНУ
	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	МетодНачисленияАмортизацииНУ = УчетнаяПолитика.МетодНачисленияАмортизацииНУ(Реквизиты.Организация, Реквизиты.Период);
	
	ПараметрыНачислениеАмортизацииОСНУ = Новый Структура;
	ПараметрыНачислениеАмортизацииОСНУ.Вставить("ТаблицаРеквизиты", Параметры.Реквизиты);
	
	Если ОтражатьВНалоговомУчете
		И МетодНачисленияАмортизацииНУ = Перечисления.МетодыНачисленияАмортизации.Нелинейный Тогда
		Отбор = Новый Структура("ПрекратитьНачислениеАмортизацииНУ, ТолькоЛинейный", Истина, Истина);
	Иначе
		Отбор = Новый Структура("ПрекратитьНачислениеАмортизацииНУ", Истина);
	КонецЕсли;
	ТаблицаНачислениеАмортизацииОСНУ = ТаблицаПараметрыСписания.Скопировать(Отбор, "ОсновноеСредство");
		
	ПараметрыНачислениеАмортизацииОСНУ.Вставить("ТаблицаОС", ТаблицаНачислениеАмортизацииОСНУ);
	ПараметрыВыбытия.Вставить("НачислениеАмортизацииОСНУ", ПараметрыНачислениеАмортизацииОСНУ);

	ПараметрыВыбытия.Вставить("ТаблицаПараметрыСписания", ТаблицаПараметрыСписания);

	Возврат ПараметрыВыбытия;

КонецФункции

Функция ПодготовитьПараметрыПодготовитьТаблицыСведенийПоВыбытиюОС(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"      // <Число, 5, 0>
	+ "ОсновноеСредство," // <СправочникСсылка.ОсновныеСредства>
	+ "Регистратор";      // <ДокументСсылка.*>

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"        // <Дата>
	+ "ИмяСписка,"     // <Строка, 0>
	+ "Номер,"         // <Строка, 0> - номер документа-выбытия
	+ "Организация,"   // <СправочникСсылка.Организации>
	+ "Подразделение," // <Ссылка на справочник подразделений>
	+ "СобытиеОС,"     // <СправочникСсылка.СобытияОС> - событие с ОС, которым отражается выбытие
	+ "Содержание,"    // <Строка, 150>
	+ "Регистратор";   // <ДокументСсылка.*>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияВыбытиеОС(ТаблицаРеквизиты, ПараметрыВыбытия, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыВыбытиеОС(ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	ТаблицаПараметрыСписания = ПараметрыВыбытия.ТаблицаПараметрыСписания;
	Если ПараметрыВыбытия.НачислениеАмортизации.ТаблицаРеквизиты.Количество() > 0 Тогда
		ПараметрыВыбытия.НачислениеАмортизации.ТаблицаРеквизиты[0].Содержание = "";
	КонецЕсли;
	Если ПараметрыВыбытия.АмортизационнаяПремия.ТаблицаРеквизиты.Количество() > 0 Тогда
		ПараметрыВыбытия.АмортизационнаяПремия.ТаблицаРеквизиты[0].Содержание = "";
	КонецЕсли;

	УправлениеВнеоборотнымиАктивами.СформироватьДвиженияНачислениеАмортизации(
		ПараметрыВыбытия.НачислениеАмортизации.ТаблицаЗатрат,
		ПараметрыВыбытия.НачислениеАмортизации.ТаблицаРеквизиты,
		Движения, Отказ);

	СформироватьДвиженияНачислениеАмортизационнойПремии(
		ПараметрыВыбытия.АмортизационнаяПремия.ТаблицаНачисленияАмортизационнойПремии,
		ПараметрыВыбытия.АмортизационнаяПремия.ТаблицаРеквизиты,
		Движения, Отказ);

	СформироватьДвиженияНачислениеИзноса(
		ПараметрыВыбытия.НачислениеИзноса.ТаблицаИзноса,
		ПараметрыВыбытия.НачислениеИзноса.ТаблицаРеквизиты,
		Движения, Отказ);

	СформироватьДвиженияРегистрацияСобытияОС(
		ПараметрыВыбытия.СобытияОС.ТаблицаОС,
		ПараметрыВыбытия.СобытияОС.ТаблицаРеквизиты,
		Движения, Отказ);

	СформироватьДвиженияИзменениеПризнакаНачисленияАмортизацииОСБУ(
		ПараметрыВыбытия.НачислениеАмортизацииОСБУ.ТаблицаОС,
		ПараметрыВыбытия.НачислениеАмортизацииОСБУ.ТаблицаРеквизиты,
		Движения, Отказ);

	СформироватьДвиженияИзменениеПризнакаНачисленияАмортизацииОСНУ(
		ПараметрыВыбытия.НачислениеАмортизацииОСНУ.ТаблицаОС,
		ПараметрыВыбытия.НачислениеАмортизацииОСНУ.ТаблицаРеквизиты,
		Движения, Отказ);

	ОтражатьВНалоговомУчете 		= 	УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаПБУ18					=	УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);
	МетодНачисленияАмортизацииНУ	=	УчетнаяПолитика.МетодНачисленияАмортизацииНУ(Реквизиты.Организация, Реквизиты.Период);

	СписыватьТолькоЛинейный = Реквизиты.СписыватьТолькоЛинейныйНУ
		И МетодНачисленияАмортизацииНУ = Перечисления.МетодыНачисленияАмортизации.Нелинейный;

	Для каждого СтрокаТаблицы Из ПараметрыВыбытия.ТаблицаПараметрыСписания Цикл

		Если Реквизиты.Подразделение <> Неопределено Тогда
			ПодразделениеПроводки = Реквизиты.Подразделение;
		Иначе
			ПодразделениеПроводки = СтрокаТаблицы.Подразделение;
		КонецЕсли;

		СписыватьТолькоБУ = СписыватьТолькоЛинейный И НЕ СтрокаТаблицы.ТолькоЛинейный;

		// Списание амортизации Дт 02.01 Кт 01.09
		СуммаПроводки   = СтрокаТаблицы.АмортизацияОС;
		СуммаПроводкиНУ = ?(СписыватьТолькоБУ, 0, СтрокаТаблицы.АмортизацияОСНУ);
		СуммаПроводкиПР = ?(СписыватьТолькоБУ, 0, СтрокаТаблицы.АмортизацияОСПР);
		СуммаПроводкиВР = ?(СписыватьТолькоБУ, СуммаПроводки, СтрокаТаблицы.АмортизацияОСВР);

		Если СуммаПроводки > 0
			ИЛИ СуммаПроводкиНУ > 0
			ИЛИ СуммаПроводкиПР <> 0
			ИЛИ СуммаПроводкиВР <> 0 Тогда

			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание  = Реквизиты.Содержание;

			Проводка.СчетДт = СтрокаТаблицы.СчетНачисленияАмортизации;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);

			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = ПодразделениеПроводки;
			КонецЕсли;

			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ВыбытиеОС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);

			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = ПодразделениеПроводки;
			КонецЕсли;

			Проводка.Сумма = СуммаПроводки;

			Если ОтражатьВНалоговомУчете Тогда

				Если СвойстваСчетаДт.НалоговыйУчет Тогда
					Проводка.СуммаНУДт = СуммаПроводкиНУ;
					Если ПоддержкаПБУ18 Тогда
						Проводка.СуммаПРДт = СуммаПроводкиПР;
						Проводка.СуммаВРДт = СуммаПроводкиВР;
					КонецЕсли;
				КонецЕсли;

				Если СвойстваСчетаКт.НалоговыйУчет Тогда
					Проводка.СуммаНУКт = СуммаПроводкиНУ;
					Если ПоддержкаПБУ18 Тогда
						Проводка.СуммаПРКт = СуммаПроводкиПР;
						Проводка.СуммаВРКт = СуммаПроводкиВР;
					КонецЕсли;
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

		// Списание износа Кт 010
		СуммаПроводки = СтрокаТаблицы.ИзносОС;

		Если СуммаПроводки <> 0 Тогда

			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание  = Реквизиты.Содержание;

			Проводка.СчетКт = СтрокаТаблицы.СчетНачисленияАмортизации;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);

			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			
			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = ПодразделениеПроводки;
			КонецЕсли;

			Проводка.Сумма = СуммаПроводки;

		КонецЕсли;

		// Списание балансовой стоимости Дт 01.09 Кт 01.01
		СуммаПроводки   = СтрокаТаблицы.СтоимостьОС;
		СуммаПроводкиНУ = ?(СписыватьТолькоБУ, 0, СтрокаТаблицы.СтоимостьОСНУ);
		СуммаПроводкиПР = ?(СписыватьТолькоБУ, 0, СтрокаТаблицы.СтоимостьОСПР);
		СуммаПроводкиВР = ?(СписыватьТолькоБУ, СуммаПроводки, СтрокаТаблицы.СтоимостьОСВР);

		Если СуммаПроводки > 0
			ИЛИ СуммаПроводкиНУ > 0
			ИЛИ СуммаПроводкиПР <> 0
			ИЛИ СуммаПроводкиВР <> 0 Тогда

			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание  = Реквизиты.Содержание;

			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.ВыбытиеОС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);

			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = ПодразделениеПроводки;
			КонецЕсли;

			Проводка.СчетКт = СтрокаТаблицы.СчетУчета;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);

			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = ПодразделениеПроводки;
			КонецЕсли;

			Проводка.Сумма = СуммаПроводки;

			Если ОтражатьВНалоговомУчете Тогда

				Если СвойстваСчетаДт.НалоговыйУчет Тогда
					Проводка.СуммаНУДт = СуммаПроводкиНУ;
					Если ПоддержкаПБУ18 Тогда
						Проводка.СуммаПРДт = СуммаПроводкиПР;
						Проводка.СуммаВРДт = СуммаПроводкиВР;
					КонецЕсли;
				КонецЕсли;

				Если СвойстваСчетаКт.НалоговыйУчет Тогда
					Проводка.СуммаНУКт = СуммаПроводкиНУ;
					Если ПоддержкаПБУ18 Тогда
						Проводка.СуммаПРКт = СуммаПроводкиПР;
						Проводка.СуммаВРКт = СуммаПроводкиВР;
					КонецЕсли;
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыВыбытиеОС(ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                    // <Дата>
	+ "Организация,"               // <СправочникСсылка.Организации>
	+ "Подразделение,"             // <Ссылка на справочник подразделений>
	+ "Содержание,"                // <Строка, 150>
	+ "СписыватьТолькоЛинейныйНУ"; // <Булево>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьТаблицуОСДляСнятияСУчетаПриСписании(ТаблицаРеквизиты, ПараметрыВыбытия, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыОСДляСнятияСУчетаПриСписании(ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	ТаблицаПараметрыСписания = ПараметрыВыбытия.ТаблицаПараметрыСписания;

	ОтражатьВНалоговомУчете 		= 	УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаПБУ18					=	УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);
	МетодНачисленияАмортизацииНУ	=	УчетнаяПолитика.МетодНачисленияАмортизацииНУ(Реквизиты.Организация, Реквизиты.Период);

	Если ОтражатьВНалоговомУчете
		И МетодНачисленияАмортизацииНУ = Перечисления.МетодыНачисленияАмортизации.Нелинейный Тогда

		ТаблицаОС = ПараметрыВыбытия.ТаблицаПараметрыСписания.Скопировать(Новый Структура("ТолькоЛинейный", Истина), "НомерСтроки, ОсновноеСредство");
	Иначе
		ТаблицаОС = ПараметрыВыбытия.ТаблицаПараметрыСписания.Скопировать(, "НомерСтроки, ОсновноеСредство");
	КонецЕсли;

	Возврат ТаблицаОС;

КонецФункции

Функция ПодготовитьПараметрыОСДляСнятияСУчетаПриСписании(ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"           // <Дата>
	+ "Организация";      // <СправочникСсылка.Организации>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// СПИСАНИЕ ОСТАТОЧНОЙ СТОИМОСТИ ОС

Функция ПодготовитьТаблицуОстаточнойСтоимости(ТаблицаОС, ТаблицаРеквизиты, ПараметрыВыбытия, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыОстаточнойСтоимости(ТаблицаОС, ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	ТаблицаПараметрыСписания = ПараметрыВыбытия.ТаблицаПараметрыСписания;

	ОтражатьВНалоговомУчете 		= 	УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаПБУ18					=	УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);
	МетодНачисленияАмортизацииНУ	=	УчетнаяПолитика.МетодНачисленияАмортизацииНУ(Реквизиты.Организация, Реквизиты.Период);

	СписыватьТолькоЛинейныйНУ = Реквизиты.СписыватьТолькоЛинейныйНУ И ОтражатьВНалоговомУчете
		И МетодНачисленияАмортизацииНУ = Перечисления.МетодыНачисленияАмортизации.Нелинейный;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос.УстановитьПараметр("ТаблицаОС", Параметры.ТаблицаОС);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОС.Субконто,
	|	ТаблицаОС.СчетСписания,
	|	ТаблицаОС.СубконтоНУ,
	|	ТаблицаОС.СчетСписанияНУ
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	&ТаблицаОС КАК ТаблицаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";
	Запрос.Выполнить();

	Если ТаблицаПараметрыСписания.Количество() > 0 Тогда
		// Получим остаточную стоимость по результатам выбытия
		Запрос.УстановитьПараметр("ТаблицаПараметрыСписания", ТаблицаПараметрыСписания);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаПараметрыСписания.ОсновноеСредство КАК ОсновноеСредство,
		|	ТаблицаПараметрыСписания.ТолькоЛинейный,
		|	ТаблицаПараметрыСписания.СтоимостьОС,
		|	ТаблицаПараметрыСписания.СтоимостьОСНУ,
		|	ТаблицаПараметрыСписания.СтоимостьОСПР,
		|	ТаблицаПараметрыСписания.СтоимостьОСВР,
		|	ТаблицаПараметрыСписания.АмортизацияОС,
		|	ТаблицаПараметрыСписания.АмортизацияОСНУ,
		|	ТаблицаПараметрыСписания.АмортизацияОСПР,
		|	ТаблицаПараметрыСписания.АмортизацияОСВР
		|ПОМЕСТИТЬ ТаблицаПараметрыСписания
		|ИЗ
		|	&ТаблицаПараметрыСписания КАК ТаблицаПараметрыСписания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПараметрыСписания.ОсновноеСредство КАК ОсновноеСредство,
		|	ТаблицаПараметрыСписания.ТолькоЛинейный,
		|	ТаблицаПараметрыСписания.СтоимостьОС - ТаблицаПараметрыСписания.АмортизацияОС КАК СтоимостьБУ,
		|	ТаблицаПараметрыСписания.СтоимостьОСНУ - ТаблицаПараметрыСписания.АмортизацияОСНУ КАК СтоимостьНУ,
		|	ТаблицаПараметрыСписания.СтоимостьОСПР - ТаблицаПараметрыСписания.АмортизацияОСПР КАК СтоимостьПР,
		|	ТаблицаПараметрыСписания.СтоимостьОСВР - ТаблицаПараметрыСписания.АмортизацияОСВР КАК СтоимостьВР
		|ПОМЕСТИТЬ ТаблицаСтоимости
		|ИЗ
		|	ТаблицаПараметрыСписания КАК ТаблицаПараметрыСписания
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство";
		Запрос.Выполнить();
	Иначе
		// получим остаточную стоимость из регистра бухгалтерии, со счета выбытия
		Запрос.УстановитьПараметр("Период", Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор));
		Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
		ТаблицаТолькоЛинейный = ПодготовитьТаблицуТолькоЛинейныйМетодНУ(Параметры.ТаблицаОС, Отказ);
		Запрос.УстановитьПараметр("ТаблицаТолькоЛинейный", ТаблицаТолькоЛинейный);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаСумм.Субконто1 КАК ОсновноеСредство,
		|	ЕСТЬNULL(ТаблицаСумм.СуммаОстатокДт, 0) КАК СтоимостьБУ,
		|	ЕСТЬNULL(ТаблицаСумм.СуммаНУОстатокДт, 0) КАК СтоимостьНУ,
		|	ЕСТЬNULL(ТаблицаСумм.СуммаПРОстатокДт, 0) КАК СтоимостьПР,
		|	ЕСТЬNULL(ТаблицаСумм.СуммаВРОстатокДт, 0) КАК СтоимостьВР
		|ПОМЕСТИТЬ ТаблицаСумм
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&Период,
		|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыбытиеОС),
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
		|			Организация = &Организация
		|				И Субконто1 В
		|					(ВЫБРАТЬ
		|						ТаблицаОС.ОсновноеСредство
		|					ИЗ
		|						ТаблицаОС КАК ТаблицаОС)) КАК ТаблицаСумм
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТолькоЛинейный.ОсновноеСредство КАК ОсновноеСредство,
		|	ТаблицаТолькоЛинейный.ТолькоЛинейный
		|ПОМЕСТИТЬ ТаблицаТолькоЛинейный
		|ИЗ
		|	&ТаблицаТолькоЛинейный КАК ТаблицаТолькоЛинейный
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаСтоимости.ОсновноеСредство КАК ОсновноеСредство,
		|	ТаблицаТолькоЛинейный.ТолькоЛинейный,
		|	ТаблицаСтоимости.СтоимостьБУ,
		|	ТаблицаСтоимости.СтоимостьНУ,
		|	ТаблицаСтоимости.СтоимостьПР,
		|	ТаблицаСтоимости.СтоимостьВР
		|ПОМЕСТИТЬ ТаблицаСтоимости
		|ИЗ
		|	ТаблицаСумм КАК ТаблицаСтоимости
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТолькоЛинейный КАК ТаблицаТолькоЛинейный
		|		ПО ТаблицаСтоимости.ОсновноеСредство = ТаблицаТолькоЛинейный.ОсновноеСредство
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство";
		Запрос.Выполнить();
	КонецЕсли;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОС.ОсновноеСредство,
	|	ТаблицаОС.Субконто,
	|	ТаблицаОС.СчетСписания,
	|	ТаблицаОС.СубконтоНУ,
	|	ТаблицаОС.СчетСписанияНУ,
	|	ТаблицаСтоимости.ТолькоЛинейный,
	|	ТаблицаСтоимости.СтоимостьБУ,
	|	ТаблицаСтоимости.СтоимостьНУ,
	|	ТаблицаСтоимости.СтоимостьПР,
	|	ТаблицаСтоимости.СтоимостьВР
	|ИЗ
	|	ТаблицаОС КАК ТаблицаОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаСтоимости КАК ТаблицаСтоимости
	|		ПО ТаблицаОС.ОсновноеСредство = ТаблицаСтоимости.ОсновноеСредство
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки";
	ТаблицаСтоимости = Запрос.Выполнить().Выгрузить();

	Если НЕ ОтражатьВНалоговомУчете ИЛИ СписыватьТолькоЛинейныйНУ Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаСтоимости Цикл
			Если НЕ ОтражатьВНалоговомУчете Тогда
				СтрокаТаблицы.СтоимостьНУ = 0;
				СтрокаТаблицы.СтоимостьПР = 0;
				СтрокаТаблицы.СтоимостьВР = 0;
			ИначеЕсли Реквизиты.СписыватьТолькоЛинейныйНУ И НЕ СтрокаТаблицы.ТолькоЛинейный Тогда
				СтрокаТаблицы.СтоимостьНУ = 0;
				СтрокаТаблицы.СтоимостьПР = 0;
				СтрокаТаблицы.СтоимостьВР = СтрокаТаблицы.СтоимостьБУ;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат ТаблицаСтоимости;

КонецФункции

Функция ПодготовитьПараметрыОстаточнойСтоимости(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"      // <Число, 5, 0>
	+ "ОсновноеСредство," // <СправочникСсылка.ОсновныеСредства>
	+ "Субконто,"         // <Характеристика.ВидыСубконтоХозрасчетные> - субконто расходов по списанию стоимости ОС
	+ "СчетСписания,"     // <ПланСчетовСсылка.Хозрасчетный> - счет списания ОС
	+ "СубконтоНУ,"       // <Характеристика.ВидыСубконтоХозрасчетные> - субконто расходов по списанию стоимости ОС для НУ
	+ "СчетСписанияНУ";   // <ПланСчетовСсылка.Хозрасчетный> - счет списания ОС для НУ

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                    // <Дата>
	+ "Организация,"               // <СправочникСсылка.Организации>
	+ "Подразделение,"             // <Ссылка на справочник подразделений>
	+ "СписыватьТолькоЛинейныйНУ," // <Булево> - списывать остаточную стоимость ОС по налоговому учету только по ОС,
		// по которым амортизация всегда начисляется линейным методом
	+ "Регистратор";               // <ДокументСсылка.*>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьТаблицуОстаточнойСтоимостиГосРегистрация(ТаблицаОС, ТаблицаРеквизиты, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыОстаточнойСтоимостиГосРегистрация(ТаблицаОС, ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос.УстановитьПараметр("ТаблицаОС", Параметры.ТаблицаОС);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОС.Субконто КАК Субконто,
	|	ТаблицаОС.СчетСписания КАК СчетСписания,
	|	ТаблицаОС.Субконто КАК СубконтоНУ,
	|	ТаблицаОС.СчетСписания КАК СчетСписанияНУ
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	&ТаблицаОС КАК ТаблицаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";
	Запрос.Выполнить();

	// получим остаточную стоимость из регистра бухгалтерии, со счета выбытия
	ВидыСубконтоПереданныеОС = Новый Массив;
    ВидыСубконтоПереданныеОС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
    ВидыСубконтоПереданныеОС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	Запрос.УстановитьПараметр("Период", Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор));
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Контрагент", Реквизиты.Контрагент);
	Запрос.УстановитьПараметр("ВидыСубконтоПереданныеОС", ВидыСубконтоПереданныеОС);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК ОсновноеСредство,
	|	ХозрасчетныйОстатки.СуммаОстатокДт КАК СтоимостьБУ,
	|	ХозрасчетныйОстатки.СуммаНУОстатокДт КАК СтоимостьНУ,
	|	ХозрасчетныйОстатки.СуммаПРОстатокДт КАК СтоимостьПР,
	|	ХозрасчетныйОстатки.СуммаВРОстатокДт КАК СтоимостьВР
	|ПОМЕСТИТЬ ХозрасчетныйОстатки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Период,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПереданныеОбъектыНедвижимости),
	|			&ВидыСубконтоПереданныеОС,
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						ТаблицаОС.ОсновноеСредство
	|					ИЗ
	|						ТаблицаОС)
	|				И Субконто2 = &Контрагент) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СтоимостьБУ, 0) КАК СтоимостьБУ,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СтоимостьНУ, 0) КАК СтоимостьНУ,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СтоимостьПР, 0) КАК СтоимостьПР,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СтоимостьВР, 0) КАК СтоимостьВР,
	|	ТаблицаОС.СчетСписания,
	|	ТаблицаОС.Субконто
	|ИЗ
	|	ТаблицаОС КАК ТаблицаОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОстатки КАК ХозрасчетныйОстатки
	|		ПО ТаблицаОС.ОсновноеСредство = ХозрасчетныйОстатки.ОсновноеСредство
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки";
	ТаблицаСтоимости = Запрос.Выполнить().Выгрузить();

	Если НЕ ОтражатьВНалоговомУчете Тогда
		Для каждого СтрокаТаблицы Из ТаблицаСтоимости Цикл
			СтрокаТаблицы.СтоимостьНУ = 0;
			СтрокаТаблицы.СтоимостьПР = 0;
			СтрокаТаблицы.СтоимостьВР = 0;
		КонецЦикла;
	КонецЕсли;

	Возврат ТаблицаСтоимости;

КонецФункции

Функция ПодготовитьПараметрыОстаточнойСтоимостиГосРегистрация(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"      // <Число, 5, 0>
	+ "ОсновноеСредство," // <СправочникСсылка.ОсновныеСредства>
	+ "Субконто,"         // <Характеристика.ВидыСубконтоХозрасчетные> - субконто расходов по списанию стоимости ОС
	+ "СчетСписания";     // <ПланСчетовСсылка.Хозрасчетный> - счет списания ОС

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                    // <Дата>
	+ "Организация,"               // <СправочникСсылка.Организации>
	+ "Подразделение,"             // <Ссылка на справочник подразделений>
	+ "Контрагент,"                // <СправочникСсылка.Контрагенты> - покупатель ОС
	+ "Регистратор";               // <ДокументСсылка.*>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияСписаниеОстаточнойСтоимостиОС(ТаблицаСтоимости, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыСписаниеОстаточнойСтоимостиОС(ТаблицаСтоимости, ТаблицаРеквизиты);

	Если Параметры.ТаблицаСтоимости.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаПБУ18          = УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);

	Для каждого СтрокаТаблицы Из  Параметры.ТаблицаСтоимости Цикл

		Если Реквизиты.Подразделение <> Неопределено Тогда
			ПодразделениеПроводки = Реквизиты.Подразделение;
		Иначе
			ПодразделениеПроводки = СтрокаТаблицы.Подразделение;
		КонецЕсли;

		Субконто       = СтрокаТаблицы.Субконто;
		СубконтоНУ     = СтрокаТаблицы.СубконтоНУ;
		СчетСписания   = СтрокаТаблицы.СчетСписания;
		СчетСписанияНУ = СтрокаТаблицы.СчетСписанияНУ;
		
		// Списание остаточной стоимости 
		// Дт 91.02 (45.04) Кт 01.09, в зависимости от установки флага "Право собсвенности переходит после гос.регистрации" 
		// Дт 91.02 Кт 45.04, для НУ после 01.01.13 
		СуммаПроводки = СтрокаТаблицы.СтоимостьБУ;
		Если НЕ ОтражатьВНалоговомУчете Тогда

			СуммаПроводкиНУ = 0;
			СуммаПроводкиПР = 0;
			СуммаПроводкиВР = 0;
		Иначе
			СуммаПроводкиНУ = СтрокаТаблицы.СтоимостьНУ;
			СуммаПроводкиПР = СтрокаТаблицы.СтоимостьПР;
			СуммаПроводкиВР = СтрокаТаблицы.СтоимостьВР;
		КонецЕсли;

		Если СуммаПроводки > 0
			ИЛИ СуммаПроводкиНУ > 0
			ИЛИ СуммаПроводкиПР <> 0
			ИЛИ СуммаПроводкиВР <> 0 Тогда

			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период       = Реквизиты.Период;
			Проводка.Организация  = Реквизиты.Организация;
			Проводка.Содержание   = Реквизиты.Содержание;

			Проводка.СчетДт = СчетСписания;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Субконто);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.ОсновноеСредство);

			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = ПодразделениеПроводки;
			КонецЕсли;

			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ВыбытиеОС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);

			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = ПодразделениеПроводки;
			КонецЕсли;

			Проводка.Сумма = СуммаПроводки;

			Если ОтражатьВНалоговомУчете Тогда

				Если СвойстваСчетаДт.НалоговыйУчет Тогда
					Проводка.СуммаНУДт = СуммаПроводкиНУ;
					Если ПоддержкаПБУ18 Тогда
						Проводка.СуммаПРДт = СуммаПроводкиПР;
						Проводка.СуммаВРДт = СуммаПроводкиВР;
					КонецЕсли;
				КонецЕсли;

				Если СвойстваСчетаКт.НалоговыйУчет Тогда
					Проводка.СуммаНУКт = СуммаПроводкиНУ;
					Если ПоддержкаПБУ18 Тогда
						Проводка.СуммаПРКт = СуммаПроводкиПР;
						Проводка.СуммаВРКт = СуммаПроводкиВР;
					КонецЕсли;
				КонецЕсли;

			КонецЕсли;
			
			Субконто = СтрокаТаблицы.Субконто;
			Если ЗначениеЗаполнено(Субконто) 
				И ТипЗнч(Субконто) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы")
				И НЕ Субконто.ПринятиеКналоговомуУчету 
				И Проводка.СуммаНУДт <> 0 Тогда 
				
				Если ПоддержкаПБУ18 Тогда
					Проводка.СуммаПРДт = Проводка.СуммаПРДт + Проводка.СуммаНУДт;
					Проводка.СуммаНУДт = 0;
				Иначе
					Проводка.СуммаНУДт = 0;
				КонецЕсли;
				
			КонецЕсли;

			Если ОтражатьВНалоговомУчете И СчетСписания <> СчетСписанияНУ Тогда  // Счет списания 45.04, счет списания НУ 91.02
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период       = Реквизиты.Период;
				Проводка.Организация  = Реквизиты.Организация;
				Проводка.Содержание   = Реквизиты.Содержание;
				
				Проводка.СчетДт = СчетСписанияНУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СубконтоНУ);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.ОсновноеСредство);
				
				СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
				
				Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеДт = ПодразделениеПроводки;
				КонецЕсли;
				
				Проводка.СчетКт = СчетСписания;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Субконто);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.ОсновноеСредство);
				
				СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
				
				Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеКт = ПодразделениеПроводки;
				КонецЕсли;
				
				Проводка.Сумма = 0;
				
				Если СвойстваСчетаДт.НалоговыйУчет Тогда
					Проводка.СуммаНУДт = СуммаПроводкиНУ;
					Если ПоддержкаПБУ18 Тогда
						Проводка.СуммаПРДт = 0;
						Проводка.СуммаВРДт = - СуммаПроводкиНУ;
					КонецЕсли;
				КонецЕсли;
				
				Если СвойстваСчетаКт.НалоговыйУчет Тогда
					Проводка.СуммаНУКт = СуммаПроводкиНУ;
					Если ПоддержкаПБУ18 Тогда
						Проводка.СуммаПРКт = 0;
						Проводка.СуммаВРКт = -СуммаПроводкиНУ;
					КонецЕсли;
				КонецЕсли;
				
				
				Субконто = СтрокаТаблицы.Субконто;
				Если ЗначениеЗаполнено(Субконто) 
					И ТипЗнч(Субконто) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы")
					И НЕ Субконто.ПринятиеКналоговомуУчету 
					И Проводка.СуммаНУДт <> 0 Тогда 
					
					Если ПоддержкаПБУ18 Тогда
						Проводка.СуммаПРДт = Проводка.СуммаПРДт + Проводка.СуммаНУДт;
						Проводка.СуммаНУДт = 0;
					Иначе
						Проводка.СуммаНУДт = 0;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

	// Вызов переопределяемой процедуры для выполнения дополнительных действий при списании ОС.
	УправлениеВнеоборотнымиАктивамиПереопределяемый.ВыполнитьДополнительныеДействияСписаниеОС(ТаблицаСтоимости, ТаблицаРеквизиты, Движения, Отказ);

КонецПроцедуры

Функция ПодготовитьПараметрыСписаниеОстаточнойСтоимостиОС(ТаблицаСтоимости, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаСтоимости

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство," // <СправочникСсылка.ОсновныеСредства>
	+ "СтоимостьБУ,"      // <Число, 15, 2> - остаточная стоимость ОС по данным бухгалтерского учета
	+ "СтоимостьНУ,"      // <Число, 15, 2> - остаточная стоимость ОС по данным налогового учета
	+ "СтоимостьПР,"      // <Число, 15, 2> - постоянные разницы в оценке остаточной стоимости ОС (ПБУ 18/02)
	+ "СтоимостьВР,"      // <Число, 15, 2> - временные разницы в оценке остаточной стоимости ОС (ПБУ 18/02)
	+ "Субконто,"         // <Характеристика.ВидыСубконтоХозрасчетные> - субконто расходов по списанию стоимости ОС
	+ "СчетСписания,"     // <ПланСчетовСсылка.Хозрасчетный> - счет списания ОС
	+ "СубконтоНУ,"       // <Характеристика.ВидыСубконтоХозрасчетные> - субконто расходов по списанию стоимости ОС для НУ
	+ "СчетСписанияНУ";   // <ПланСчетовСсылка.Хозрасчетный> - счет списания ОС для НУ
	
	Параметры.Вставить("ТаблицаСтоимости",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаСтоимости, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"        // <Дата>
	+ "Организация,"   // <СправочникСсылка.Организации>
	+ "Подразделение," // <Ссылка на справочник подразделений>
	+ "Содержание";    // <Строка, 150>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияСписаниеОстаточнойСтоимостиОСГосРегистрация(ТаблицаСтоимости, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыСписаниеОстаточнойСтоимостиОСГосРегистрация(ТаблицаСтоимости, ТаблицаРеквизиты);

	Если Параметры.ТаблицаСтоимости.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаПБУ18          = УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);

	Для каждого СтрокаТаблицы Из  Параметры.ТаблицаСтоимости Цикл

		Если Реквизиты.Подразделение <> Неопределено Тогда
			ПодразделениеПроводки = Реквизиты.Подразделение;
		Иначе
			ПодразделениеПроводки = СтрокаТаблицы.Подразделение;
		КонецЕсли;

		Субконто = СтрокаТаблицы.Субконто;
		СчетСписания = СтрокаТаблицы.СчетСписания;

		// Списание остаточной стоимости Дт 91.02 Кт 01.09
		СуммаПроводки = СтрокаТаблицы.СтоимостьБУ;
		Если НЕ ОтражатьВНалоговомУчете Тогда
			СуммаПроводкиНУ = 0;
			СуммаПроводкиПР = 0;
			СуммаПроводкиВР = 0;
		Иначе
			СуммаПроводкиНУ = СтрокаТаблицы.СтоимостьНУ;
			СуммаПроводкиПР = СтрокаТаблицы.СтоимостьПР;
			СуммаПроводкиВР = СтрокаТаблицы.СтоимостьВР;
		КонецЕсли;

		Если СуммаПроводки > 0
			ИЛИ СуммаПроводкиНУ > 0
			ИЛИ СуммаПроводкиПР <> 0
			ИЛИ СуммаПроводкиВР <> 0 Тогда

			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период       = Реквизиты.Период;
			Проводка.Организация  = Реквизиты.Организация;
			Проводка.Содержание   = Реквизиты.Содержание;

			Проводка.СчетДт = СчетСписания;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Субконто);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.ОсновноеСредство);

			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = ПодразделениеПроводки;
			КонецЕсли;

			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ПереданныеОбъектыНедвижимости;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Реквизиты.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);

			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = ПодразделениеПроводки;
			КонецЕсли;

			Проводка.Сумма = СуммаПроводки;

			Если ОтражатьВНалоговомУчете Тогда

				Если СвойстваСчетаДт.НалоговыйУчет Тогда
					Проводка.СуммаНУДт = СуммаПроводкиНУ;
					Если ПоддержкаПБУ18 Тогда
						Проводка.СуммаПРДт = СуммаПроводкиПР;
						Проводка.СуммаВРДт = СуммаПроводкиВР;
					КонецЕсли;
				КонецЕсли;

				Если СвойстваСчетаКт.НалоговыйУчет Тогда
					Проводка.СуммаНУКт = СуммаПроводкиНУ;
					Если ПоддержкаПБУ18 Тогда
						Проводка.СуммаПРКт = СуммаПроводкиПР;
						Проводка.СуммаВРКт = СуммаПроводкиВР;
					КонецЕсли;
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	// Алгоритмы формирования проводок этого документа рассчитывают суммы проводок налогового учета
	Движения.Хозрасчетный.ДополнительныеСвойства.Вставить("СуммыНалоговогоУчетаЗаполнены", Истина);
	
	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыСписаниеОстаточнойСтоимостиОСГосРегистрация(ТаблицаСтоимости, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаСтоимости

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство," // <СправочникСсылка.ОсновныеСредства>
	+ "СтоимостьБУ,"      // <Число, 15, 2> - остаточная стоимость ОС по данным бухгалтерского учета
	+ "СтоимостьНУ,"      // <Число, 15, 2> - остаточная стоимость ОС по данным налогового учета
	+ "СтоимостьПР,"      // <Число, 15, 2> - постоянные разницы в оценке остаточной стоимости ОС (ПБУ 18/02)
	+ "СтоимостьВР,"      // <Число, 15, 2> - временные разницы в оценке остаточной стоимости ОС (ПБУ 18/02)
	+ "Субконто,"         // <Характеристика.ВидыСубконтоХозрасчетные> - субконто расходов по списанию стоимости ОС
	+ "СчетСписания";     // <ПланСчетовСсылка.Хозрасчетный> - счет списания ОС

	Параметры.Вставить("ТаблицаСтоимости",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаСтоимости, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"        // <Дата>
	+ "Организация,"   // <СправочникСсылка.Организации>
	+ "Подразделение," // <Ссылка на справочник подразделений>
	+ "Контрагент,"    // <СправочникСсылка.Контрагенты> - покупатель ОС
	+ "Содержание";    // <Строка, 150>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ВОССТАНОВЛЕНИЕ АМОРТИЗАЦИОННОЙ ПРЕМИИ

Процедура СформироватьДвиженияВосстановлениеАмортизационнойПремии(ТаблицаОС, ТаблицаСтоимости, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыВосстановлениеАмортизационнойПремии(ТаблицаОС, ТаблицаРеквизиты);

	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	Если НЕ Реквизиты.ВосстановитьАмортизационнуюПремию Тогда
		Возврат;
	КонецЕсли;

	ОтражатьВНалоговомУчете      = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаПБУ18               = УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);
	МетодНачисленияАмортизацииНУ = УчетнаяПолитика.МетодНачисленияАмортизацииНУ(Реквизиты.Организация, Реквизиты.Период);

	Если НЕ ОтражатьВНалоговомУчете Тогда
		Возврат;
	КонецЕсли;

	СписокОбъектов = Параметры.ТаблицаОС.ВыгрузитьКолонку("ОсновноеСредство");

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("СписокОС", СписокОбъектов);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ТекущаяДата", Реквизиты.Период);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Реквизиты.Организация));

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МИНИМУМ(ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.Период), ДАТАВРЕМЯ(2006, 1, 1)) КАК Период
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчет.СрезПоследних(
	|			&ТекущаяДата,
	|			(Организация = &Организация ИЛИ Организация.ГоловнаяОрганизация = &ГоловнаяОрганизация)
	|				И ОсновноеСредство В (&СписокОС)) КАК ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних";
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ДатаНачала = РезультатЗапроса.Выгрузить()[0].Период;
	Иначе
		ДатаНачала = '20060101';
	КонецЕсли;

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("СписокОС", СписокОбъектов);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Реквизиты.Организация));
	Запрос.УстановитьПараметр("ДатаНач", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаКон", Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	
	Если Реквизиты.Период < Дата('20130101') Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт), 0) КАК СуммаОборотКт
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			&ДатаНач,
		|			&ДатаКон,
		|			Период,
		|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасходыНаКапитальныеВложения),
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
		|			(Организация.ГоловнаяОрганизация = &ГоловнаяОрганизация ИЛИ Организация = &Организация)
		|				И Субконто1 В (&СписокОС),
		|			,
		|			) КАК ХозрасчетныйОбороты";
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			СуммаАморПремии = РезультатЗапроса.Выгрузить()[0].СуммаОборотКт;
		Иначе
			СуммаАморПремии = 0;
		КонецЕсли;

		СуммаАморПремии = СуммаАморПремии + Реквизиты.СуммаКапитальныхВложенийВключаемыхВРасходы;

		Если СуммаАморПремии = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Амортизационная премия не применялась к указанным объектам. Восстановление амортизационной премии не сделано'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор, , "Объект", Ложь);
			Возврат;
		КонецЕсли;

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = "Передача ОС";

		Проводка.СчетДт = Реквизиты.СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", Реквизиты.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", Реквизиты.ДоговорКонтрагента);

		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = Реквизиты.Подразделение;
		КонецЕсли;

		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Реквизиты.СтатьяДляВосстановленияАмортизационнойПремии);
		
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = Реквизиты.Подразделение;
		КонецЕсли;

		Если СвойстваСчетаКт.НалоговыйУчет Тогда
			Проводка.СуммаНУКт = СуммаАморПремии;
			Если ПоддержкаПБУ18 Тогда
				Проводка.СуммаПРКт = -СуммаАморПремии;
			КонецЕсли;
		КонецЕсли;

	Иначе
	
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ТаблицаОС", ТаблицаСтоимости);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаОС.ОсновноеСредство КАК Объект,
		|	ТаблицаОС.СчетСписания КАК СчетУчетаРасходов,
		|	ТаблицаОС.Субконто КАК Субконто
		|ПОМЕСТИТЬ ОсновныеСредства
		|ИЗ
		|	&ТаблицаОС КАК ТаблицаОС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт), 0) КАК СуммаАморПремии,
		|	ХозрасчетныйОбороты.Субконто1 КАК ОсновноеСредство,
		|	ОсновныеСредства.СчетУчетаРасходов КАК СчетУчетаРасходов,
		|	ОсновныеСредства.Субконто КАК Субконто
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			&ДатаНач,
		|			&ДатаКон,
		|			Период,
		|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасходыНаКапитальныеВложения),
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
		|			(Организация.ГоловнаяОрганизация = &ГоловнаяОрганизация
		|				ИЛИ Организация = &Организация)
		|				И Субконто1 В (&СписокОС),
		|			,
		|			) КАК ХозрасчетныйОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОсновныеСредства КАК ОсновныеСредства
		|		ПО ХозрасчетныйОбороты.Субконто1 = ОсновныеСредства.Объект
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОбороты.Субконто1,
		|	ОсновныеСредства.СчетУчетаРасходов,
		|	ОсновныеСредства.Субконто";
		ТаблицаАмортПремий = Запрос.Выполнить().Выгрузить();
		СуммаАморПремии = ТаблицаАмортПремий.Итог("СуммаАморПремии");

	СуммаАморПремии = СуммаАморПремии + Реквизиты.СуммаКапитальныхВложенийВключаемыхВРасходы;

	Если СуммаАморПремии = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Амортизационная премия не применялась к указанным объектам. Восстановление амортизационной премии не сделано'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор, , "Объект", Ложь);
		Возврат;
	КонецЕсли;
	
	Для Каждого ОбъектАмортПремии Из ТаблицаАмортПремий Цикл
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = "Передача ОС";
		
		Проводка.СчетДт = ПланыСчетов.Хозрасчетный.ВыбытиеОС;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ОсновныеСредства",ОбъектАмортПремии.ОсновноеСредство);
		
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = Реквизиты.Подразделение;
		КонецЕсли;
		
		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Реквизиты.СтатьяДляВосстановленияАмортизационнойПремии);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"РеализуемыеАктивы",ОбъектАмортПремии.ОсновноеСредство);
		
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = Реквизиты.Подразделение;
		КонецЕсли;
		
		Если СвойстваСчетаКт.НалоговыйУчет Тогда
			Проводка.СуммаНУДт = ОбъектАмортПремии.СуммаАморПремии;
			Проводка.СуммаНУКт = ОбъектАмортПремии.СуммаАморПремии;
			Если ПоддержкаПБУ18 Тогда
				Проводка.СуммаПРДт = -ОбъектАмортПремии.СуммаАморПремии;
				Проводка.СуммаПРКт = -ОбъектАмортПремии.СуммаАморПремии;
			КонецЕсли;
		КонецЕсли;
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = "Передача ОС";
		
		Проводка.СчетДт = ОбъектАмортПремии.СчетУчетаРасходов;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1,ОбъектАмортПремии.Субконто);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"РеализуемыеАктивы",ОбъектАмортПремии.ОсновноеСредство);
		
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = Реквизиты.Подразделение;
		КонецЕсли;
		
		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ВыбытиеОС;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ОсновныеСредства",ОбъектАмортПремии.ОсновноеСредство);
		
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = Реквизиты.Подразделение;
		КонецЕсли;
		
		Если СвойстваСчетаКт.НалоговыйУчет Тогда
			Проводка.СуммаНУДт = ОбъектАмортПремии.СуммаАморПремии;
			Проводка.СуммаНУКт = ОбъектАмортПремии.СуммаАморПремии;
			Если ПоддержкаПБУ18 Тогда
				Проводка.СуммаПРДт = -ОбъектАмортПремии.СуммаАморПремии;
				Проводка.СуммаПРКт = -ОбъектАмортПремии.СуммаАморПремии;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецЕсли;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыВосстановлениеАмортизационнойПремии(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство"; // <СправочникСсылка.ОсновныеСредства>

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "ВосстановитьАмортизационнуюПремию,"            // <Булево> - необходимость восстановления амортизационной премии
	+ "Период,"                                       // <Дата>
	+ "ДоговорКонтрагента,"                           // <СправочникСсылка.ДоговорыКонтрагентов> - договор, по которому
		// производится реализация ОС
	+ "Контрагент,"                                   // <СправочникСсылка.Контрагенты> - контрагент-покупатель ОС
	+ "Организация,"                                  // <СправочникСсылка.Организации>
	+ "Подразделение,"                                // <Ссылка на справочник подразделений>
	+ "Регистратор,"                                  // <ДокументСсылка.*>
	+ "СтатьяДляВосстановленияАмортизационнойПремии," // <СправочникСсылка.ПрочиеДоходыИРасходы> - статья доходов,
		// по которой будет признан доход от восстановления амортизационной премии
	+ "СуммаКапитальныхВложенийВключаемыхВРасходы,"   // <Число, 15, 2> - сумма амортизационной премии к восстановлению
	+ "СчетУчетаРасчетовСКонтрагентом";               // <ПланСчетовСсылка.Хозрасчетный> - счет учет расчетов с
		// контрагентом по реализации ОС

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ПЕРЕМЕЩЕНИЕ ОС

Процедура СформироватьДвиженияПеремещениеОС(ТаблицаОС, ТаблицаРеквизиты, ПараметрыНачисленияАмортизации, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыПеремещениеОС(ТаблицаОС, ТаблицаРеквизиты);

	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	// Выборка остатков по основным средствам в регистрах бухгалтерии.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаОС", Параметры.ТаблицаОС);
	Запрос.УстановитьПараметр("ТаблицаАмортизации", ПараметрыНачисленияАмортизации.Амортизация.ТаблицаАмортизации);
	Запрос.УстановитьПараметр("ТаблицаАмортизационнойПремии",
		ПараметрыНачисленияАмортизации.АмортизационнаяПремия.ТаблицаНачисленияАмортизационнойПремии);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Период", Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("ПустоеПодразделение", БухгалтерскийУчетПереопределяемый.ПустоеПодразделение());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	&ТаблицаОС КАК ТаблицаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаАмортизации.ОбъектУчета КАК ОсновноеСредство,
	|	ТаблицаАмортизации.СуммаАмортизацииБУ КАК СуммаАмортизацииБУ,
	|	ТаблицаАмортизации.СуммаАмортизацииНУ КАК СуммаАмортизацииНУ,
	|	ТаблицаАмортизации.СуммаАмортизацииПР КАК СуммаАмортизацииПР,
	|	ТаблицаАмортизации.СуммаАмортизацииВР КАК СуммаАмортизацииВР
	|ПОМЕСТИТЬ ТаблицаАмортизации
	|ИЗ
	|	&ТаблицаАмортизации КАК ТаблицаАмортизации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаАмортизационнойПремии.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаАмортизационнойПремии.СуммаНУ КАК СуммаНУ,
	|	ТаблицаАмортизационнойПремии.СуммаПР КАК СуммаПР,
	|	ТаблицаАмортизационнойПремии.СуммаВР КАК СуммаВР
	|ПОМЕСТИТЬ ТаблицаАмортизационнойПремии
	|ИЗ
	|	&ТаблицаАмортизационнойПремии КАК ТаблицаАмортизационнойПремии
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаУчетаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	СчетаУчетаОС.СчетУчета,
	|	СчетаУчетаОС.СчетНачисленияАмортизации
	|ПОМЕСТИТЬ СчетУчетаОС
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						ТаблицаОС.ОсновноеСредство
	|					ИЗ
	|						ТаблицаОС КАК ТаблицаОС)) КАК СчетаУчетаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПодразделенияОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ПодразделенияОС.Местонахождение КАК Подразделение
	|ПОМЕСТИТЬ ПодразделенияОС
	|ИЗ
	|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						ТаблицаОС.ОсновноеСредство
	|					ИЗ
	|						ТаблицаОС КАК ТаблицаОС)) КАК ПодразделенияОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки,
	|	СчетУчетаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	СчетУчетаОС.СчетУчета,
	|	СчетУчетаОС.СчетНачисленияАмортизации,
	|	ЕСТЬNULL(ПодразделенияОС.Подразделение, &ПустоеПодразделение) КАК Подразделение
	|ПОМЕСТИТЬ СписокОС
	|ИЗ
	|	СчетУчетаОС КАК СчетУчетаОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПодразделенияОС КАК ПодразделенияОС
	|		ПО СчетУчетаОС.ОсновноеСредство = ПодразделенияОС.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
	|		ПО СчетУчетаОС.ОсновноеСредство = ТаблицаОС.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетУчетаОС.СчетУчета КАК Счет
	|ПОМЕСТИТЬ РазличныеСчета
	|ИЗ
	|	СчетУчетаОС КАК СчетУчетаОС
	|ГДЕ
	|	СчетУчетаОС.СчетУчета <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетУчетаОС.СчетНачисленияАмортизации
	|ИЗ
	|	СчетУчетаОС КАК СчетУчетаОС
	|ГДЕ
	|	СчетУчетаОС.СчетНачисленияАмортизации <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасходыНаКапитальныеВложения)";
	Запрос.Выполнить();

	Если ТранзакцияАктивна() И ОбщегоНазначенияБПВызовСервераПовтИсп.ИспользоватьУправляемыеБлокировки() Тогда

		Запрос.Текст =
		"ВЫБРАТЬ
		|	СчетУчетаОС.ОсновноеСредство,
		|	СчетУчетаОС.СчетУчета КАК Счет
		|ИЗ
		|	СчетУчетаОС КАК СчетУчетаОС
		|ГДЕ
		|	СчетУчетаОС.СчетУчета <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СчетУчетаОС.ОсновноеСредство,
		|	СчетУчетаОС.СчетНачисленияАмортизации
		|ИЗ
		|	СчетУчетаОС КАК СчетУчетаОС
		|ГДЕ
		|	СчетУчетаОС.СчетНачисленияАмортизации <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СчетУчетаОС.ОсновноеСредство,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасходыНаКапитальныеВложения)
		|ИЗ
		|	СчетУчетаОС КАК СчетУчетаОС";
		РезультатЗапроса = Запрос.Выполнить();

		СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы, ИсточникДанных",
			"РегистрБухгалтерии", "Хозрасчетный", РезультатЗапроса);

		СтруктураЗначенийБлокировки = Новый Структура("Период, Организация",
			Новый Диапазон(, Реквизиты.Период), Реквизиты.Организация);

		СтруктураИсточникаДанных = Новый Соответствие;
		СтруктураИсточникаДанных.Вставить("Счет", "Счет");
		СтруктураИсточникаДанных.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства,
			"ОсновноеСредство");

		ОбщегоНазначенияБПВызовСервера.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, СтруктураЗначенийБлокировки, СтруктураИсточникаДанных);
	КонецЕсли;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ХозрасчетныйОстатки.Счет.Код КАК СчетКод,
	|	ХозрасчетныйОстатки.Субконто1 КАК ОсновноеСредство,
	|	ХозрасчетныйОстатки.СуммаОстатокДт КАК СуммаОстатокДт,
	|	ХозрасчетныйОстатки.СуммаОстатокКт КАК СуммаОстатокКт,
	|	ХозрасчетныйОстатки.СуммаНУОстатокДт КАК СуммаНУОстатокДт,
	|	ХозрасчетныйОстатки.СуммаНУОстатокКт КАК СуммаНУОстатокКт,
	|	ХозрасчетныйОстатки.СуммаПРОстатокДт КАК СуммаПРОстатокДт,
	|	ХозрасчетныйОстатки.СуммаПРОстатокКт КАК СуммаПРОстатокКт,
	|	ХозрасчетныйОстатки.СуммаВРОстатокДт КАК СуммаВРОстатокДт,
	|	ХозрасчетныйОстатки.СуммаВРОстатокКт КАК СуммаВРОстатокКт
	|ПОМЕСТИТЬ ХозрасчетныйОстатки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Период,
	|			Счет В
	|				(ВЫБРАТЬ
	|					РазличныеСчета.Счет
	|				ИЗ
	|					РазличныеСчета КАК РазличныеСчета),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС)) КАК ХозрасчетныйОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокОС.ОсновноеСредство,
	|	СписокОС.СчетУчета,
	|	СписокОС.СчетНачисленияАмортизации,
	|	ЕСТЬNULL(Стоимость.СуммаОстатокДт, 0) КАК СтоимостьБУ,
	|	ЕСТЬNULL(Стоимость.СуммаНУОстатокДт, 0) + ЕСТЬNULL(ИзменениеСтоимости.СуммаНУ, 0) КАК СтоимостьНУ,
	|	ЕСТЬNULL(Стоимость.СуммаПРОстатокДт, 0) + ЕСТЬNULL(ИзменениеСтоимости.СуммаПР, 0) КАК СтоимостьПР,
	|	ЕСТЬNULL(Стоимость.СуммаВРОстатокДт, 0) + ЕСТЬNULL(ИзменениеСтоимости.СуммаВР, 0) КАК СтоимостьВР,
	|	ЕСТЬNULL(Амортизация.СуммаОстатокКт, 0) + ЕСТЬNULL(ИзменениеАмортизации.СуммаАмортизацииБУ, 0) КАК АмортизацияБУ,
	|	ЕСТЬNULL(Амортизация.СуммаНУОстатокКт, 0) + ЕСТЬNULL(ИзменениеАмортизации.СуммаАмортизацииНУ, 0) КАК АмортизацияНУ,
	|	ЕСТЬNULL(Амортизация.СуммаПРОстатокКт, 0) + ЕСТЬNULL(ИзменениеАмортизации.СуммаАмортизацииПР, 0) КАК АмортизацияПР,
	|	ЕСТЬNULL(Амортизация.СуммаВРОстатокКт, 0) + ЕСТЬNULL(ИзменениеАмортизации.СуммаАмортизацииВР, 0) КАК АмортизацияВР,
	|	ЕСТЬNULL(Амортизация.СуммаОстатокДт, 0) КАК Износ,
	|	ЕСТЬNULL(КапитальныеВложения.СуммаНУОстатокДт, 0) КАК КапитальныеВложения
	|ИЗ
	|	СписокОС КАК СписокОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОстатки КАК Стоимость
	|		ПО СписокОС.ОсновноеСредство = Стоимость.ОсновноеСредство
	|			И СписокОС.СчетУчета = Стоимость.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОстатки КАК Амортизация
	|		ПО СписокОС.ОсновноеСредство = Амортизация.ОсновноеСредство
	|			И СписокОС.СчетНачисленияАмортизации = Амортизация.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОстатки КАК КапитальныеВложения
	|		ПО СписокОС.ОсновноеСредство = КапитальныеВложения.ОсновноеСредство
	|			И (КапитальныеВложения.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасходыНаКапитальныеВложения))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаАмортизационнойПремии КАК ИзменениеСтоимости
	|		ПО СписокОС.ОсновноеСредство = ИзменениеСтоимости.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаАмортизации КАК ИзменениеАмортизации
	|		ПО СписокОС.ОсновноеСредство = ИзменениеАмортизации.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&Период, ) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|		ПО СписокОС.ОсновноеСредство = ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|
	|УПОРЯДОЧИТЬ ПО
	|	СписокОС.НомерСтроки";
	ТаблицаОстатковПоОС = Запрос.Выполнить().Выгрузить();

	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаПБУ18          = УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);

	// Движения по регистрам бухгалтерии.
	Для Каждого СтрокаТаблицы Из ТаблицаОстатковПоОС Цикл

		// Перемещение стоимости
		Если ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета)
			И (СтрокаТаблицы.СтоимостьБУ > 0
				ИЛИ СтрокаТаблицы.СтоимостьНУ > 0
				ИЛИ СтрокаТаблицы.СтоимостьПР <> 0
				ИЛИ СтрокаТаблицы.СтоимостьВР <> 0) Тогда

			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетУчета);	
			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетУчета);
			
			Если Не СвойстваСчетаКт.УчетПоПодразделениям ИЛИ
				Реквизиты.Подразделение = Реквизиты.ПодразделениеПолучатель Тогда
				Продолжить;
			КонецЕсли;
				
			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание = "Перемещение ОС";

			Проводка.СчетДт = СтрокаТаблицы.СчетУчета;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);

			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = Реквизиты.ПодразделениеПолучатель;
			КонецЕсли;

			Проводка.СчетКт = СтрокаТаблицы.СчетУчета;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);

			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = Реквизиты.Подразделение;
			КонецЕсли;

			Проводка.Сумма = СтрокаТаблицы.СтоимостьБУ;

			Если СвойстваСчетаДт.НалоговыйУчет Тогда
				Проводка.СуммаНУДт = СтрокаТаблицы.СтоимостьНУ;
				Если ПоддержкаПБУ18 Тогда
					Проводка.СуммаПРДт = СтрокаТаблицы.СтоимостьПР;
					Проводка.СуммаВРДт = СтрокаТаблицы.СтоимостьВР;
				КонецЕсли;
			КонецЕсли;

			Если СвойстваСчетаКт.НалоговыйУчет Тогда
				Проводка.СуммаНУКт = СтрокаТаблицы.СтоимостьНУ;
				Если ПоддержкаПБУ18 Тогда
					Проводка.СуммаПРКт = СтрокаТаблицы.СтоимостьПР;
					Проводка.СуммаВРКт = СтрокаТаблицы.СтоимостьВР;
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;

		// Перемещение амортизации
		Если ЗначениеЗаполнено(СтрокаТаблицы.СчетНачисленияАмортизации)
			И (СтрокаТаблицы.АмортизацияБУ > 0
				ИЛИ СтрокаТаблицы.АмортизацияНУ > 0
				ИЛИ СтрокаТаблицы.АмортизацияПР <> 0
				ИЛИ СтрокаТаблицы.АмортизацияВР <> 0) Тогда

			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетНачисленияАмортизации);	
			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетНачисленияАмортизации);	
			
			Если Не СвойстваСчетаКт.УчетПоПодразделениям ИЛИ
				Реквизиты.Подразделение = Реквизиты.ПодразделениеПолучатель Тогда
				Продолжить;
			КонецЕсли;
			
			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание = "Перемещение ОС";

			Проводка.СчетДт = СтрокаТаблицы.СчетНачисленияАмортизации;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);

			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = Реквизиты.Подразделение;
			КонецЕсли;

			Проводка.СчетКт  = СтрокаТаблицы.СчетНачисленияАмортизации;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);

			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = Реквизиты.ПодразделениеПолучатель;
			КонецЕсли;

			Проводка.Сумма = СтрокаТаблицы.АмортизацияБУ;

			Если СвойстваСчетаДт.НалоговыйУчет Тогда
				Проводка.СуммаНУДт = СтрокаТаблицы.АмортизацияНУ;
				Если ПоддержкаПБУ18 Тогда
					Проводка.СуммаПРДт = СтрокаТаблицы.АмортизацияПР;
					Проводка.СуммаВРДт = СтрокаТаблицы.АмортизацияВР;
				КонецЕсли;
			КонецЕсли;

			Если СвойстваСчетаКт.НалоговыйУчет Тогда
				Проводка.СуммаНУКт = СтрокаТаблицы.АмортизацияНУ;
				Если ПоддержкаПБУ18 Тогда
					Проводка.СуммаПРКт = СтрокаТаблицы.АмортизацияПР;
					Проводка.СуммаВРКт = СтрокаТаблицы.АмортизацияВР;
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;

		// Перемещение износа
		Если ЗначениеЗаполнено(СтрокаТаблицы.СчетНачисленияАмортизации) И СтрокаТаблицы.Износ > 0 Тогда

			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетНачисленияАмортизации);	
			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетНачисленияАмортизации);	
			
			Если Не СвойстваСчетаКт.УчетПоПодразделениям ИЛИ
				Реквизиты.Подразделение = Реквизиты.ПодразделениеПолучатель Тогда
				Продолжить;
			КонецЕсли;
			
			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание = "Перемещение ОС";

			Проводка.СчетДт = СтрокаТаблицы.СчетНачисленияАмортизации;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);

			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = Реквизиты.ПодразделениеПолучатель;
			КонецЕсли;

			Проводка.СчетКт  = СтрокаТаблицы.СчетНачисленияАмортизации;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);

			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = Реквизиты.Подразделение;
			КонецЕсли;

			Проводка.Сумма = СтрокаТаблицы.Износ;

		КонецЕсли;

		// Перемещение амортизационной премии
		Если СтрокаТаблицы.КапитальныеВложения > 0 Тогда

			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.РасходыНаКапитальныеВложения);	
			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.РасходыНаКапитальныеВложения);	
			
			Если Не СвойстваСчетаКт.УчетПоПодразделениям ИЛИ
				Реквизиты.Подразделение = Реквизиты.ПодразделениеПолучатель Тогда
				Продолжить;
			КонецЕсли;
			
			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание = "Перемещение ОС";

			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.РасходыНаКапитальныеВложения;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);

			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = Реквизиты.ПодразделениеПолучатель;
			КонецЕсли;

			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.РасходыНаКапитальныеВложения;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);

			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = Реквизиты.Подразделение;
			КонецЕсли;

			Проводка.СуммаНУДт = СтрокаТаблицы.КапитальныеВложения;
			Проводка.СуммаНУКт = СтрокаТаблицы.КапитальныеВложения;

		КонецЕсли;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыПеремещениеОС(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"      // <Число, 5, 0>
	+ "ОсновноеСредство"; // <СправочникСсылка.ОсновныеСредства>

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                  // <Дата>
	+ "Организация,"             // <СправочникСсылка.Организации>
	+ "Подразделение,"           // <Ссылка на справочник подразделений> - подразделение-сдачик
	+ "ПодразделениеПолучатель," // <Ссылка на справочник подразделений> - подразделение-получатель
	+ "Регистратор";             // <ДокументСсылка.*>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции


// МОДЕРНИЗАЦИЯ ОС

// Изменение параметров амортизации ОС
Функция ПодготовитьТаблицыИзмененияПараметровАмортизацииОС(ТаблицаОС, ТаблицаРеквизиты, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыМодернизацияОСИзмененияПараметровАмортизацииОС(ТаблицаОС, ТаблицаРеквизиты);

	ТаблицыИзмененияПараметровАмортизацииОС = Новый Структура("БухгалтерскийУчет, НалоговыйУчет");
	
	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		
		ТаблицыИзмененияПараметровАмортизацииОС.БухгалтерскийУчет =  
			РегистрыСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СоздатьНаборЗаписей().ВыгрузитьКолонки();
		ТаблицыИзмененияПараметровАмортизацииОС.НалоговыйУчет = 
			РегистрыСведений.ПараметрыАмортизацииОСНалоговыйУчет.СоздатьНаборЗаписей().ВыгрузитьКолонки();
			
		Возврат ТаблицыИзмененияПараметровАмортизацииОС;
		
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];
	
	СписокОС = Параметры.ТаблицаОС.Скопировать(, "НомерСтроки, ОсновноеСредство");
	
	ПараметрыАмортизации = Новый ТаблицаЗначений;
	ПараметрыАмортизации.Колонки.Добавить("Организация");
	ПараметрыАмортизации.Колонки.Добавить("ДатаРасчета");
	ПараметрыАмортизации.Колонки.Добавить("Период");
	ПараметрыАмортизации.Колонки.Добавить("Регистратор");
	ПараметрыАмортизации.Колонки.Добавить("ВыдаватьСообщения");
	ПараметрыАмортизации.Колонки.Добавить("Содержание");

	СтрокаПараметра = ПараметрыАмортизации.Добавить();
	СтрокаПараметра.Организация = Реквизиты.Организация;
	СтрокаПараметра.ДатаРасчета = Реквизиты.Период;
	СтрокаПараметра.Период = Реквизиты.Период;
	СтрокаПараметра.Регистратор = Реквизиты.Регистратор;
	СтрокаПараметра.ВыдаватьСообщения = Ложь;
	СтрокаПараметра.Содержание = "Модернизация ОС";

	ТаблицаАмортизацииБух = УчетОС.ПодготовитьТаблицуАмортизацияОС(СписокОС, ПараметрыАмортизации, Неопределено);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТаблицаОС", Параметры.ТаблицаОС);
	Запрос.УстановитьПараметр("ТаблицаАмортизацииБух", ТаблицаАмортизацииБух);
	Запрос.УстановитьПараметр("Период", Новый Граница(Реквизиты.Регистратор.МоментВремени(), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Дата", Реквизиты.Период);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки КАК НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОС.СуммаМодернизацииБУ,
	|	ТаблицаОС.СуммаМодернизацииПР,
	|	ТаблицаОС.СрокПолезногоИспользованияБУ,
	|	ТаблицаОС.СрокПолезногоИспользованияНУ,
	|	ТаблицаОС.ОбъемПродукцииРаботБУ
	|ПОМЕСТИТЬ ВТ_МодернизацияОС
	|ИЗ
	|	&ТаблицаОС КАК ТаблицаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаАмортизацииБух.ОбъектУчета КАК ОсновноеСредство,
	|	ТаблицаАмортизацииБух.СуммаАмортизацииБУ КАК АмортизацияЗаМесяцБУ
	|ПОМЕСТИТЬ ВТ_ТаблицаАмортизацииБух
	|ИЗ
	|	&ТаблицаАмортизацииБух КАК ТаблицаАмортизацииБух
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
	|	СостоянияОСОрганизаций.ДатаСостояния КАК ДатаВводаВЭксплуатацию
	|ПОМЕСТИТЬ ВТ_СостоянияОСОрганизаций
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|ГДЕ
	|	СостоянияОСОрганизаций.ОсновноеСредство В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ТаблицаОС.ОсновноеСредство
	|			ИЗ
	|				ВТ_МодернизацияОС КАК ТаблицаОС)
	|	И СостоянияОСОрганизаций.Организация = &Организация
	|	И СостоянияОСОрганизаций.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетУчета КАК СчетУчета,
	|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации
	|ПОМЕСТИТЬ СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ТаблицаОС.ОсновноеСредство
	|					ИЗ
	|						ВТ_МодернизацияОС КАК ТаблицаОС)) КАК СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ХозрасчетныйОстатки.Субконто1 КАК ОсновноеСредство,
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ХозрасчетныйОстатки.СуммаОстатокДт КАК СуммаОстатокДт,
	|	ХозрасчетныйОстатки.СуммаПРОстатокДт КАК СуммаПРОстатокДт,
	|	ХозрасчетныйОстатки.СуммаОстатокКт КАК СуммаОстатокКт,
	|	ХозрасчетныйОстатки.СуммаПРОстатокКт КАК СуммаПРОстатокКт
	|ПОМЕСТИТЬ ХозрасчетныйОстатки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Период,
	|			Счет В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетУчета
	|				ИЗ
	|					СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних
	|			
	|				ОБЪЕДИНИТЬ
	|			
	|				ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизации
	|				ИЗ
	|					СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ТаблицаОС.ОсновноеСредство
	|					ИЗ
	|						ВТ_МодернизацияОС КАК ТаблицаОС)) КАК ХозрасчетныйОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыработкаОСОбороты.ОсновноеСредство КАК ОсновноеСредство,
	|	ВыработкаОСОбороты.ПараметрВыработки КАК ПараметрВыработки,
	|	ВыработкаОСОбороты.КоличествоОборот
	|ПОМЕСТИТЬ ВТ_ВыработкаОС
	|ИЗ
	|	РегистрНакопления.ВыработкаОС.Обороты(
	|			,
	|			&Период,
	|			,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ТаблицаОС.ОсновноеСредство
	|					ИЗ
	|						ВТ_МодернизацияОС КАК ТаблицаОС)) КАК ВыработкаОСОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	ПараметрВыработки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.КоэффициентАмортизации,
	|	ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.КоэффициентУскорения
	|ПОМЕСТИТЬ ВТ_ПараметрыАмортизацииБухгалтерскийУчет
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ТаблицаОС.ОсновноеСредство
	|					ИЗ
	|						ВТ_МодернизацияОС КАК ТаблицаОС)) КАК ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПараметрВыработки КАК ПараметрВыработки,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПорядокПогашенияСтоимости КАК ПорядокПогашенияСтоимости
	|ПОМЕСТИТЬ ВТ_ПервоначальныеСведенияОСБухгалтерскийУчет
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ТаблицаОС.ОсновноеСредство
	|					ИЗ
	|						ВТ_МодернизацияОС КАК ТаблицаОС)) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	ПараметрВыработки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(МодернизацияОС.НомерСтроки, 0) КАК НомерСтроки,
	|	ПервоначальныеСведенияОСБухгалтерскийУчет.ОсновноеСредство КАК ОсновноеСредство,
	|	ЕСТЬNULL(СтоимостьОС.СуммаОстатокДт, 0) КАК СтоимостьБУ,
	|	ЕСТЬNULL(МодернизацияОС.СуммаМодернизацииБУ, 0) КАК СуммаМодернизацииБУ,
	|	ВЫБОР
	|		КОГДА ПервоначальныеСведенияОСБухгалтерскийУчет.ПорядокПогашенияСтоимости В (ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ), ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзноса))
	|			ТОГДА ЕСТЬNULL(ИзносОС.СуммаОстатокДт, 0)
	|		ИНАЧЕ ЕСТЬNULL(АмортизацияОС.СуммаОстатокКт, 0)
	|	КОНЕЦ КАК АмортизацияБУ,
	|	ЕСТЬNULL(ТаблицаАмортизацииБух.АмортизацияЗаМесяцБУ, 0) КАК АмортизацияЗаМесяцБУ,
	|	ЕСТЬNULL(ВыработкаОС.КоличествоОборот, 0) КАК ФактОбъемПродукцииРаботБУ,
	|	ВЫБОР
	|		КОГДА СостоянияОСОрганизаций.ДатаВводаВЭксплуатацию ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ РАЗНОСТЬДАТ(СостоянияОСОрганизаций.ДатаВводаВЭксплуатацию, &Дата, МЕСЯЦ)
	|	КОНЕЦ КАК ФактСрокИспользованияБУ,
	|	ЕСТЬNULL(ПараметрыАмортизацииБухгалтерскийУчет.КоэффициентАмортизации, 0) КАК КоэффициентАмортизацииБУ,
	|	ЕСТЬNULL(ПараметрыАмортизацииБухгалтерскийУчет.КоэффициентУскорения, 0) КАК КоэффициентУскоренияБУ,
	|	ЕСТЬNULL(МодернизацияОС.СрокПолезногоИспользованияБУ, 0) КАК СрокПолезногоИспользованияБУ,
	|	ЕСТЬNULL(МодернизацияОС.ОбъемПродукцииРаботБУ, 0) КАК ОбъемПродукцииРаботБУ,
	|	ЕСТЬNULL(СтоимостьОС.СуммаПРОстатокДт, 0) КАК СтоимостьПР,
	|	ЕСТЬNULL(АмортизацияОС.СуммаПРОстатокКт, 0) КАК АмортизацияПР,
	|	ЕСТЬNULL(МодернизацияОС.СрокПолезногоИспользованияНУ, 0) КАК СрокПолезногоИспользованияНУ,
	|	ЕСТЬNULL(МодернизацияОС.СуммаМодернизацииПР, 0) КАК СуммаМодернизацииПР
	|ПОМЕСТИТЬ ВТ_ТаблицаОС
	|ИЗ
	|	ВТ_ПервоначальныеСведенияОСБухгалтерскийУчет КАК ПервоначальныеСведенияОСБухгалтерскийУчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПараметрыАмортизацииБухгалтерскийУчет КАК ПараметрыАмортизацииБухгалтерскийУчет
	|		ПО ПервоначальныеСведенияОСБухгалтерскийУчет.ОсновноеСредство = ПараметрыАмортизацииБухгалтерскийУчет.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВыработкаОС КАК ВыработкаОС
	|		ПО ПервоначальныеСведенияОСБухгалтерскийУчет.ОсновноеСредство = ВыработкаОС.ОсновноеСредство
	|			И ПервоначальныеСведенияОСБухгалтерскийУчет.ПараметрВыработки = ВыработкаОС.ПараметрВыработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних КАК СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних
	|			ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОстатки КАК СтоимостьОС
	|			ПО СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство = СтоимостьОС.ОсновноеСредство
	|				И СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетУчета = СтоимостьОС.Счет
	|			ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОстатки КАК АмортизацияОС
	|			ПО СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство = АмортизацияОС.ОсновноеСредство
	|				И СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизации = АмортизацияОС.Счет
	|			ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОстатки КАК ИзносОС
	|			ПО СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство = ИзносОС.ОсновноеСредство
	|				И СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизации = ИзносОС.Счет
	|		ПО ПервоначальныеСведенияОСБухгалтерскийУчет.ОсновноеСредство = СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|		ПО ПервоначальныеСведенияОСБухгалтерскийУчет.ОсновноеСредство = СостоянияОСОрганизаций.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаАмортизацииБух КАК ТаблицаАмортизацииБух
	|		ПО ПервоначальныеСведенияОСБухгалтерскийУчет.ОсновноеСредство = ТаблицаАмортизацииБух.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МодернизацияОС КАК МодернизацияОС
	|		ПО ПервоначальныеСведенияОСБухгалтерскийУчет.ОсновноеСредство = МодернизацияОС.ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаОС.НомерСтроки КАК НомерСтроки,
	|	ВТ_ТаблицаОС.ОсновноеСредство,
	|	ВТ_ТаблицаОС.СрокПолезногоИспользованияБУ КАК СрокПолезногоИспользования,
	|	ВТ_ТаблицаОС.СрокПолезногоИспользованияБУ - ВТ_ТаблицаОС.ФактСрокИспользованияБУ КАК СрокИспользованияДляВычисленияАмортизации,
	|	ВТ_ТаблицаОС.СтоимостьБУ + ВТ_ТаблицаОС.СуммаМодернизацииБУ - ВТ_ТаблицаОС.АмортизацияБУ - ВТ_ТаблицаОС.АмортизацияЗаМесяцБУ КАК СтоимостьДляВычисленияАмортизации,
	|	ВТ_ТаблицаОС.ОбъемПродукцииРаботБУ - ВТ_ТаблицаОС.ФактОбъемПродукцииРаботБУ КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ВТ_ТаблицаОС.КоэффициентАмортизацииБУ КАК КоэффициентАмортизации,
	|	ВТ_ТаблицаОС.КоэффициентУскоренияБУ КАК КоэффициентУскорения,
	|	ВТ_ТаблицаОС.ОбъемПродукцииРаботБУ КАК ОбъемПродукцииРабот
	|ИЗ
	|	ВТ_ТаблицаОС КАК ВТ_ТаблицаОС
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаОС.НомерСтроки КАК НомерСтроки,
	|	ВТ_ТаблицаОС.ОсновноеСредство,
	|	ВТ_ТаблицаОС.СрокПолезногоИспользованияНУ КАК СрокПолезногоИспользования,
	|	ВТ_ТаблицаОС.СтоимостьПР - ВТ_ТаблицаОС.АмортизацияПР - (ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ВТ_ТаблицаОС.СтоимостьБУ = 0
	|				ТОГДА 0
	|			ИНАЧЕ ВЫРАЗИТЬ(ВТ_ТаблицаОС.АмортизацияЗаМесяцБУ / ВТ_ТаблицаОС.СтоимостьБУ КАК ЧИСЛО(20, 18))
	|		КОНЕЦ * ВТ_ТаблицаОС.СтоимостьПР КАК ЧИСЛО(15, 2))) + ВТ_ТаблицаОС.СуммаМодернизацииПР КАК ПрДляВычисленияАмортизации
	|ИЗ
	|	ВТ_ТаблицаОС КАК ВТ_ТаблицаОС
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицыИзмененияПараметровАмортизацииОС.БухгалтерскийУчет = Результат[9].Выгрузить(); 
	ТаблицыИзмененияПараметровАмортизацииОС.НалоговыйУчет = Результат[10].Выгрузить();
		
	Возврат ТаблицыИзмененияПараметровАмортизацииОС;
	
КонецФункции

Функция ПодготовитьПараметрыМодернизацияОСИзмененияПараметровАмортизацииОС(ТаблицаОС, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	"НомерСтроки,"					// <Число, 5, 0>
	"ОсновноеСредство,"				// <СправочникСсылка.ОсновныеСредства>
	"СуммаМодернизацииБУ,"          // <Число, 15, 2>
	"СуммаМодернизацииПР,"          // <Число, 15, 2>
	"СрокПолезногоИспользованияБУ,"	// <Число, 4, 0>
	"СрокПолезногоИспользованияНУ," // <Число, 4, 0>
	"ОбъемПродукцииРаботБУ";        // <Число, 10, 0>
	
	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"			// <Дата>
	+ "Организация,"	// <СправочникСсылка.Организации>
	+ "Регистратор,";	// <ДокументСсылка.МодернизацияОС>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;
	
КонецФункции

// Формирование движений БУ
Процедура СформироватьДвиженияМодернизацияОС(ТаблицаМодернизации, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыМодернизацияОС(ТаблицаМодернизации, ТаблицаРеквизиты);

	Если Параметры.ТаблицаМодернизации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаПБУ18          = УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Период", Реквизиты.Период);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ТаблицаМодернизации", Параметры.ТаблицаМодернизации);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаМодернизации.НомерСтроки КАК НомерСтроки,
	|	ТаблицаМодернизации.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаМодернизации.СуммаМодернизацииБУ,
	|	ТаблицаМодернизации.СуммаМодернизацииНУ,
	|	ТаблицаМодернизации.СуммаМодернизацииПР,
	|	ТаблицаМодернизации.СуммаМодернизацииВР,
	|	ТаблицаМодернизации.СуммаКапитальныхВложенийВключаемыхВРасходыНУ,
	|	0 КАК СуммаКапитальныхВложенийВключаемыхВРасходыПР,
	|	-ТаблицаМодернизации.СуммаКапитальныхВложенийВключаемыхВРасходыНУ КАК СуммаКапитальныхВложенийВключаемыхВРасходыВР
	|ПОМЕСТИТЬ ТаблицаМодернизации
	|ИЗ
	|	&ТаблицаМодернизации КАК ТаблицаМодернизации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";
	Запрос.Выполнить();

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетаУчетаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	СчетаУчетаОС.СчетУчета,
	|	СчетаУчетаОС.СчетНачисленияАмортизации
	|ПОМЕСТИТЬ СчетаУчетаОС
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						ТаблицаМодернизации.ОсновноеСредство
	|					ИЗ
	|						ТаблицаМодернизации КАК ТаблицаМодернизации)) КАК СчетаУчетаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаМодернизации.НомерСтроки КАК НомерСтроки,
	|	ТаблицаМодернизации.ОсновноеСредство,
	|	ТаблицаМодернизации.СуммаМодернизацииБУ,
	|	ТаблицаМодернизации.СуммаМодернизацииНУ,
	|	ТаблицаМодернизации.СуммаМодернизацииПР,
	|	ТаблицаМодернизации.СуммаМодернизацииВР,
	|	ТаблицаМодернизации.СуммаКапитальныхВложенийВключаемыхВРасходыНУ,
	|	ТаблицаМодернизации.СуммаКапитальныхВложенийВключаемыхВРасходыПР,
	|	ТаблицаМодернизации.СуммаКапитальныхВложенийВключаемыхВРасходыВР,
	|	СчетаУчетаОС.СчетУчета
	|ИЗ
	|	ТаблицаМодернизации КАК ТаблицаМодернизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаУчетаОС КАК СчетаУчетаОС
	|		ПО ТаблицаМодернизации.ОсновноеСредство = СчетаУчетаОС.ОсновноеСредство
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	ТаблицаПараметровМодернизации = Запрос.Выполнить().Выгрузить();

	Для каждого СтрокаТаблицы Из ТаблицаПараметровМодернизации Цикл

		// Списание модернизации Дт 01.01 Кт 08.03
		СуммаПроводки = СтрокаТаблицы.СуммаМодернизацииБУ;

		Если ОтражатьВНалоговомУчете Тогда

			СуммаПроводкиНУ = СтрокаТаблицы.СуммаМодернизацииНУ;
			СуммаПроводкиПР = СтрокаТаблицы.СуммаМодернизацииПР;
			СуммаПроводкиВР = СтрокаТаблицы.СуммаМодернизацииВР;
		Иначе
			СуммаПроводкиНУ = 0;
			СуммаПроводкиПР = 0;
			СуммаПроводкиВР = 0;

		КонецЕсли;

		Если СуммаПроводки > 0
			ИЛИ СуммаПроводкиНУ > 0
			ИЛИ СуммаПроводкиПР <> 0
			ИЛИ СуммаПроводкиВР <> 0 Тогда

			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание = "Модернизация ОС";

			Проводка.СчетДт = СтрокаТаблицы.СчетУчета;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);

			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = Реквизиты.Подразделение;
			КонецЕсли;

			Проводка.СчетКт = Реквизиты.СчетУчетаВнеоборотногоАктива;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбъектыСтроительства", Реквизиты.ОбъектСтроительства);

			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = Реквизиты.ПодразделениеВнеоборотногоАктива;
			КонецЕсли;

			Проводка.Сумма = СуммаПроводки;

			Если ОтражатьВНалоговомУчете Тогда

				Если СвойстваСчетаДт.НалоговыйУчет Тогда
					Проводка.СуммаНУДт = СуммаПроводкиНУ;
					Если ПоддержкаПБУ18 Тогда
						Проводка.СуммаПРДт = СуммаПроводкиПР;
						Проводка.СуммаВРДт = СуммаПроводкиВР;
					КонецЕсли;
				КонецЕсли;

				Если СвойстваСчетаКт.НалоговыйУчет Тогда
					Проводка.СуммаНУКт = СуммаПроводкиНУ;
					Если ПоддержкаПБУ18 Тогда
						Проводка.СуммаПРКт = СуммаПроводкиПР;
						Проводка.СуммаВРКт = СуммаПроводкиВР;
					КонецЕсли;
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	ТаблицаАмортизационнойПремии = ТаблицаПараметровМодернизации.Скопировать(, "НомерСтроки, ОсновноеСредство, СуммаКапитальныхВложенийВключаемыхВРасходыНУ");
	ТаблицаАмортизационнойПремии.Колонки.СуммаКапитальныхВложенийВключаемыхВРасходыНУ.Имя = "Сумма";
	СформироватьДвиженияОтражениеАмортизационнойПремии(ТаблицаАмортизационнойПремии, Параметры.Реквизиты, Движения, Отказ);

	ТаблицаНачисленияАмортизационнойПремии = ТаблицаПараметровМодернизации.Скопировать(, "НомерСтроки, ОсновноеСредство, СчетУчета, "
		+ "СуммаКапитальныхВложенийВключаемыхВРасходыНУ, СуммаКапитальныхВложенийВключаемыхВРасходыПР,"
		+ "СуммаКапитальныхВложенийВключаемыхВРасходыВР");
	ТаблицаНачисленияАмортизационнойПремии.Колонки.СуммаКапитальныхВложенийВключаемыхВРасходыНУ.Имя = "СуммаНУ";
	ТаблицаНачисленияАмортизационнойПремии.Колонки.СуммаКапитальныхВложенийВключаемыхВРасходыПР.Имя = "СуммаПР";
	ТаблицаНачисленияАмортизационнойПремии.Колонки.СуммаКапитальныхВложенийВключаемыхВРасходыВР.Имя = "СуммаВР";

	ТаблицаНачисленияАмортизационнойПремии.Колонки.Добавить("ДокументАмортизационнойПремии",
		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыАмортизационнойПремии.ТипЗначения);
	ТаблицаНачисленияАмортизационнойПремии.ЗаполнитьЗначения(Реквизиты.Регистратор, "ДокументАмортизационнойПремии");

	ТаблицаНачисленияАмортизационнойПремии.Колонки.Добавить("СчетУчетаЗатратПоАмортизационнойПремии",
		Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаНачисленияАмортизационнойПремии.ЗаполнитьЗначения(Реквизиты.СчетУчетаЗатратПоАмортизационнойПремии,
		"СчетУчетаЗатратПоАмортизационнойПремии");

	ТаблицаНачисленияАмортизационнойПремии.Колонки.Добавить("ПодразделениеПоАмортизационнойПремии",
		БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	ТаблицаНачисленияАмортизационнойПремии.ЗаполнитьЗначения(Реквизиты.ПодразделениеПоАмортизационнойПремии,
		"ПодразделениеПоАмортизационнойПремии");

	ОписаниеТиповСубконто = Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип;

	ТаблицаНачисленияАмортизационнойПремии.Колонки.Добавить("СубконтоПоАмортизационнойПремии1", ОписаниеТиповСубконто);
	ТаблицаНачисленияАмортизационнойПремии.ЗаполнитьЗначения(Реквизиты.СубконтоПоАмортизационнойПремии1,
		"СубконтоПоАмортизационнойПремии1");

	ТаблицаНачисленияАмортизационнойПремии.Колонки.Добавить("СубконтоПоАмортизационнойПремии2", ОписаниеТиповСубконто);
	ТаблицаНачисленияАмортизационнойПремии.ЗаполнитьЗначения(Реквизиты.СубконтоПоАмортизационнойПремии2,
		"СубконтоПоАмортизационнойПремии2");

	ТаблицаНачисленияАмортизационнойПремии.Колонки.Добавить("СубконтоПоАмортизационнойПремии3", ОписаниеТиповСубконто);
	ТаблицаНачисленияАмортизационнойПремии.ЗаполнитьЗначения(Реквизиты.СубконтоПоАмортизационнойПремии3,
		"СубконтоПоАмортизационнойПремии3");

	ТаблицаНачисленияАмортизационнойПремии.Колонки.Добавить("Подразделение",
		БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	ТаблицаНачисленияАмортизационнойПремии.ЗаполнитьЗначения(Реквизиты.Подразделение,
		"Подразделение");

	СформироватьДвиженияНачислениеАмортизационнойПремии(ТаблицаНачисленияАмортизационнойПремии, Параметры.Реквизиты, Движения, Отказ);

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыМодернизацияОС(ТаблицаМодернизации, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаМодернизации

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"                                  // <Число, 5, 0>
	+ "ОсновноеСредство,"                             // <СправочникСсылка.ОсновныеСредства>
	+ "СуммаКапитальныхВложенийВключаемыхВРасходыНУ," // <Число, 15, 2> - сумма амортизационной премии
	+ "СуммаМодернизацииБУ,"                          // <Число, 15, 2> - сумма модернизации по данным бухгалтерского учета
	+ "СуммаМодернизацииНУ,"                          // <Число, 15, 2> - сумма модернизации по данным налогового учета
	+ "СуммаМодернизацииПР,"                          // <Число, 15, 2> - постоянные разницы в оценке модернизации (ПБУ 18/02)
	+ "СуммаМодернизацииВР";                          // <Число, 15, 2> - временные разницы в оценке модернизации (ПБУ 18/02)


	Параметры.Вставить("ТаблицаМодернизации",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаМодернизации, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                                 // <Дата>
	+ "ОбъектСтроительства,"                    // <СправочникСсылка.ОбъектыСтроительства> - объект строительства,
		// стоимость с которого нужно списать на модернизацию ОС
	+ "Организация,"                            // <СправочникСсылка.Организации>
	+ "Подразделение,"                          // <Ссылка на справочник подразделений>
	+ "ПодразделениеВнеоборотногоАктива,"       // <Ссылка на справочник подразделений>
	+ "ПодразделениеПоАмортизационнойПремии,"   // <Ссылка на справочник подразделений> - подразделение,
		// на котороео нужно отнести затраты по отражению амортизационной премии
	+ "Регистратор,"                            // <ДокументСсылка.*>
	+ "СубконтоПоАмортизационнойПремии1,"       // <Характеристика.ВидыСубконтоХозрасчетные> - субконто по
		// амортизационной премии
	+ "СубконтоПоАмортизационнойПремии2,"       // <Характеристика.ВидыСубконтоХозрасчетные> - субконто по
		// амортизационной премии
	+ "СубконтоПоАмортизационнойПремии3,"       // <Характеристика.ВидыСубконтоХозрасчетные> - субконто по
		// амортизационной премии
	+ "СчетУчетаВнеоборотногоАктива,"           // <ПланСчетовСсылка.Хозрасчетный> - счет учета объекта строительства
	+ "СчетУчетаЗатратПоАмортизационнойПремии"; // <ПланСчетовСсылка.Хозрасчетный> - счет учета затрат по амортизационной
		// премии

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// НАЧИСЛЕНИЕ АМОРТИЗАЦИИ И АМОРТИЗАЦИОННОЙ ПРЕМИИ

Функция ПодготовитьТаблицыАмортизацииОСИСуммАмортизационнойПремии(ТаблицаОС, ТаблицаРеквизиты, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыПодготовитьТаблицыАмортизацииОСИСуммАмортизационнойПремии(ТаблицаОС, ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	Содержание = "Амортизация ОС";

	ПараметрыНачисленияАмортизации = Новый Структура;

	Параметры.Реквизиты.Колонки.Добавить("ДатаРасчета");
	Параметры.Реквизиты.ЗаполнитьЗначения(Реквизиты.Период, "ДатаРасчета");
	Параметры.Реквизиты.Колонки.Добавить("Содержание");
	Параметры.Реквизиты.ЗаполнитьЗначения(Содержание, "Содержание");
	Параметры.Реквизиты.Колонки.Добавить("ВыдаватьСообщения");
	Параметры.Реквизиты.ЗаполнитьЗначения(истина, "ВыдаватьСообщения");
	ТаблицаАмортизации = ПодготовитьТаблицуАмортизацияОС(Параметры.ТаблицаОС, Параметры.Реквизиты, Отказ);

	ПараметрыАмортизации = Новый Структура;
	ПараметрыАмортизации.Вставить("ТаблицаАмортизации", ТаблицаАмортизации);
	ПараметрыАмортизации.Вставить("ТаблицаРеквизиты", Параметры.Реквизиты);
	ПараметрыНачисленияАмортизации.Вставить("Амортизация", ПараметрыАмортизации);

	Параметры.Реквизиты.ЗаполнитьЗначения("", "ИмяСписка");

	ТаблицаРаспределения = УправлениеВнеоборотнымиАктивамиПереопределяемый.ПодготовитьТаблицуРаспределениеАмортизацииПоНаправлениямРегл(
		ТаблицаАмортизации, Параметры.Реквизиты, Отказ);

	ПараметрыРаспределения = Новый Структура;
	ПараметрыРаспределения.Вставить("ТаблицаРеквизиты", Параметры.Реквизиты);
	ПараметрыРаспределения.Вставить("ТаблицаЗатрат", ТаблицаРаспределения);
	ПараметрыНачисленияАмортизации.Вставить("РаспределениеАмортизации", ПараметрыРаспределения);

	ТаблицаНачисленияАмортизационнойПремии = ПодготовитьТаблицуСуммАмортизационнойПремии(ТаблицаАмортизации,
		Параметры.Реквизиты, Отказ);

	ПараметрыАмортизационнойПремии = Новый Структура;
	ПараметрыАмортизационнойПремии.Вставить("ТаблицаРеквизиты", ТаблицаРеквизиты);
	ПараметрыАмортизационнойПремии.Вставить("ТаблицаНачисленияАмортизационнойПремии", ТаблицаНачисленияАмортизационнойПремии);
	ПараметрыНачисленияАмортизации.Вставить("АмортизационнаяПремия", ПараметрыАмортизационнойПремии);

	Возврат ПараметрыНачисленияАмортизации;

КонецФункции

Функция ПодготовитьПараметрыПодготовитьТаблицыАмортизацииОСИСуммАмортизационнойПремии(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"      // <Число, 5, 0>
	+ "ОсновноеСредство"; // <СправочникСсылка.ОсновныеСредства>

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"      // <Дата>
	+ "ИмяСписка,"   // <Строка, 0>
	+ "Организация," // <СправочникСсылка.Организации>
	+ "Регистратор"; // <ДокументСсылка.*>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияНачислениеАмортизацииИАмортизационнойПремии(
					ПараметрыНачисленияАмортизации,
					Движения, Отказ) Экспорт

	УправлениеВнеоборотнымиАктивами.СформироватьДвиженияНачислениеАмортизации(ПараметрыНачисленияАмортизации.РаспределениеАмортизации.ТаблицаЗатрат,
		ПараметрыНачисленияАмортизации.РаспределениеАмортизации.ТаблицаРеквизиты, Движения, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	СформироватьДвиженияНачислениеАмортизационнойПремии(
		ПараметрыНачисленияАмортизации.АмортизационнаяПремия.ТаблицаНачисленияАмортизационнойПремии,
		ПараметрыНачисленияАмортизации.АмортизационнаяПремия.ТаблицаРеквизиты, Движения, Отказ);

КонецПроцедуры

Процедура УдалитьИзТаблицыНачисленияАмортизацииНенужноеПриПеремещенииОС(ПараметрыНачисленияАмортизации, Отказ) Экспорт 
	
	//при перемещении ОС когда не ведется учет по подразделениям начислять амортизацию не нужно
	Таблица = ПараметрыНачисленияАмортизации.РаспределениеАмортизации.ТаблицаЗатрат;
	ВсегоСтрок = Таблица.Количество();
	Пока ВсегоСтрок > 0 Цикл 
		ВсегоСтрок = ВсегоСтрок-1;
		СтрокаТаблицы = Таблица[ВсегоСтрок];
		
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетАмортизации);	
		Если Не СвойстваСчета.УчетПоПодразделениям Тогда 
			Таблица.Удалить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Таблица = ПараметрыНачисленияАмортизации.АмортизационнаяПремия.ТаблицаНачисленияАмортизационнойПремии;
	ВсегоСтрок = Таблица.Количество();
	Пока ВсегоСтрок > 0 Цикл 
		ВсегоСтрок = ВсегоСтрок-1;
		СтрокаТаблицы = Таблица[ВсегоСтрок];
		
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетУчета);	
		Если Не СвойстваСчета.УчетПоПодразделениям Тогда 
			Таблица.Удалить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
// КОЭФФЦИЕНТ ПРИНЯТИЯ К УЧЕТУ ОБЪЕКТОВ СТРОИТЕЛЬСТВА (для НДС)

Функция ПолучитьКоэффициентРаспределенияСпособовСтроительства(ТаблицаРеквизиты, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыПолучитьКоэффициентРаспределенияСпособовСтроительства(ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	Если Реквизиты.СуммаСтроительства = 0 Тогда
		Возврат 0;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонецПериода", Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор));
	Запрос.УстановитьПараметр("Счет", Реквизиты.Счет);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Объект", Реквизиты.Объект);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(Остатки.СуммаОстаток, 0) КАК СуммаОстаток
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&КонецПериода,
	|			Счет = &Счет,
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства),
	|			Организация = &Организация
	|				И Субконто1 = &Объект) КАК Остатки";

	Если ТранзакцияАктивна() И ОбщегоНазначенияБПВызовСервераПовтИсп.ИспользоватьУправляемыеБлокировки() Тогда
		ПараметрыБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрБухгалтерии", "Хозрасчетный");

		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период", Новый Диапазон(, Реквизиты.Период));
		ЗначенияБлокировки.Вставить("Организация", Реквизиты.Организация);
		ЗначенияБлокировки.Вставить("Счет", Реквизиты.Счет);
		ЗначенияБлокировки.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства, Реквизиты.Объект);

		ОбщегоНазначенияБПВызовСервера.УстановитьУправляемуюБлокировку(ПараметрыБлокировки, ЗначенияБлокировки);
	КонецЕсли;

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		СуммаОстатка = 0;
	Иначе
		Результат = Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой);
		СуммаОстатка = Результат.Итог("СуммаОстаток");
	КонецЕсли;

	Если СуммаОстатка = 0 Тогда
		КоэффициентРаспределения = 1;
	ИначеЕсли СуммаОстатка < 0 Тогда
		КоэффициентРаспределения = 1;
	Иначе
		КоэффициентРаспределения = Реквизиты.СуммаСтроительства / СуммаОстатка;
	КонецЕсли;

	Возврат КоэффициентРаспределения;

КонецФункции

Функция ПодготовитьПараметрыПолучитьКоэффициентРаспределенияСпособовСтроительства(ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"             // <Дата>
	+ "Объект,"             // <СправочникСсылка.ОбъектыСтроительства> - объект строительства, коэффицент принятия
		// к учету, которого требуется определить
	+ "Организация,"        // <СправочникСсылка.Организации>
	+ "Регистратор,"        // <ДокументСсылка.*>
	+ "СуммаСтроительства," // <Число, 15, 2> - сумма принятия к учету
	+ "Счет";               // <ПланСчетовСсылка.Хозрасчетный> - счет учета объекта строительства

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ОПЛАТА ОС ДЛЯ УСН

Процедура СформироватьДвиженияОплатыОСДляУСН(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыОплатыОСДляУСН(ТаблицаОС, ТаблицаРеквизиты);

	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	Если НЕ Реквизиты.ПрименяетсяУСН ИЛИ НЕ Реквизиты.ПрименяетсяУСНДоходыМинусРасходы Тогда
		Возврат;
	КонецЕсли;

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаОС Цикл
		Движение = Движения.ОплатыОСДляУСН.Добавить();
		Движение.Период               = Реквизиты.Период;
		Движение.Организация          = Реквизиты.Организация;
		Движение.ДокументМодернизации = Реквизиты.ДокументМодернизации;
		Движение.ОсновноеСредство     = СтрокаТаблицы.ОсновноеСредство;
		Движение.ДатаОплаты           = СтрокаТаблицы.ДатаОплаты;
		Движение.СуммаОплаты          = СтрокаТаблицы.СуммаОплаты;
	КонецЦикла;

	Движения.ОплатыОСДляУСН.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыОплатыОСДляУСН(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство,"     // <СправочникСсылка.ОсновныеСредства> - 
	+ "ДатаОплаты,"           // <Дата> - 
	+ "СуммаОплаты";          // <Число, 15, 2> - 

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                           // <Дата>
	+ "Организация,"                      // <СправочникСсылка.Организации>
	+ "ДокументМодернизации,"             // <ДокументСсылка.МодернизацияОС>
	+ "ПрименяетсяУСН,"                   // <Булево>
	+ "ПрименяетсяУСНДоходыМинусРасходы"; // <Булево>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ОПРЕДЕЛЕНИЕ СОСТОЯНИЯ ОС

// Функция рассчитывает стоимость объекта строительства по разным видам учета.
// Возвращает структуру со значениями стоимостей по видам учета, поля:
// - СтоимостьБУ
// - СтоимостьНУ
// - СтоимостьПР
// - СтоимостьВР
//
Функция РассчитатьСтоимостьОбъектаСтроительства(Знач Организация, Знач ПодразделениеОрганизации, Знач Период, Знач СчетУчета, Знач ОбъектСтроительства) Экспорт

	СтруктураСтоимостьОбъектаСтроительства = Новый Структура;
	СтруктураСтоимостьОбъектаСтроительства.Вставить("СтоимостьБУ", 0);
	СтруктураСтоимостьОбъектаСтроительства.Вставить("СтоимостьНУ", 0);
	СтруктураСтоимостьОбъектаСтроительства.Вставить("СтоимостьПР", 0);
	СтруктураСтоимостьОбъектаСтроительства.Вставить("СтоимостьВР", 0);
	
	Если ТипЗнч(Период) = Тип("Граница") Тогда
		ГраницаПолученияОстатков = Период;
	Иначе
		ГраницаПолученияОстатков = Новый Граница(Период);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",                   ГраницаПолученияОстатков);
	Запрос.УстановитьПараметр("Организация",              Организация);
	Запрос.УстановитьПараметр("ПодразделениеОрганизации", ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("СчетУчета",                СчетУчета);
	Запрос.УстановитьПараметр("ОбъектСтроительства",      ОбъектСтроительства);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.СуммаОстатокДт КАК СтоимостьБУ,
	|	ХозрасчетныйОстатки.СуммаНУОстатокДт КАК СтоимостьНУ,
	|	ХозрасчетныйОстатки.СуммаПРОстатокДт КАК СтоимостьПР,
	|	ХозрасчетныйОстатки.СуммаВРОстатокДт КАК СтоимостьВР
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Период,
	|			Счет = &СчетУчета,
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства),
	|			Субконто1 = &ОбъектСтроительства
	|				И Организация = &Организация
	|				И (Подразделение = &ПодразделениеОрганизации
	|					ИЛИ Подразделение ЕСТЬ NULL )) КАК ХозрасчетныйОстатки";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(СтруктураСтоимостьОбъектаСтроительства, Выборка);
		
	КонецЕсли;
	
	Возврат СтруктураСтоимостьОбъектаСтроительства;

КонецФункции // РассчитатьСтоимостьОбъектаСтроительства()

// ПРОЧЕЕ

Процедура ОпределитьСчетаУчетаОС(ТаблицаОС, Период, Организация, ИмяКолонки = "Номенклатура") Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокОС", ТаблицаОС.ВыгрузитьКолонку(ИмяКолонки));
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетаУчетаОС.ОсновноеСредство,
	|	СчетаУчетаОС.СчетУчета
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В (&СписокОС)) КАК СчетаУчетаОС";
	РезультатЗапрос = Запрос.Выполнить();
	ТаблицаСчетов = РезультатЗапрос.Выгрузить();
	ТаблицаСчетов.Индексы.Добавить("ОсновноеСредство");
	Для каждого СтрокаОС Из ТаблицаОС Цикл
		НайденнаяСтрока = ТаблицаСчетов.Найти(СтрокаОС[ИмяКолонки], "ОсновноеСредство");
		Если НайденнаяСтрока <> Неопределено Тогда
			СтрокаОС.СчетУчета = НайденнаяСтрока.СчетУчета;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Функция анализирует аналитику затрат по дебету проводки.
// Если статья затрат не принимаемая к НУ, то сумма НУ по дебету преобразуется в сумму ПР по дебету
//
Функция ОпределитьПостоянныеРазницыВРасходах(Проводка,ПоддержкаПБУ18) Экспорт
	Если ПоддержкаПБУ18 Тогда

		СчетДт = Проводка.СчетДт;
		Если ЗначениеЗаполнено(СчетДт) И СчетДт.НалоговыйУчет Тогда
			ЭтоНепринимаемыеРасходы = НалоговыйУчет.ОпределитьНеПринимаемыеРасходы(Проводка);

			Если ЭтоНепринимаемыеРасходы Тогда

				Проводка.СуммаПРДт = Проводка.СуммаПРДт + Проводка.СуммаНУДт;
				Проводка.СуммаНУДт = 0;
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;


КонецФункции

// По переданной структуре полей формирует запрос по табличной части документа.
//
// Параметры:
//  ДокументОбъект    - объект проводимого документа,
//  ИмяТабличнойЧасти - строка, имя табличной части,
//  СтруктураПолей    - структура, ключ структуры содержит псевдоним поля запроса, значение - строку запроса,
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоТабличнойЧасти(ДокументОбъект, ИмяТабличнойЧасти, СтруктураПолей) Экспорт

	ТекстЗапроса = "";

	Для Каждого Реквизит Из СтруктураПолей Цикл

		ТекстЗапроса  = ТекстЗапроса + ",
		|	Док." + Реквизит.Значение + " КАК " + СокрЛП(Реквизит.Ключ);

	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Док.НомерСтроки " + ТекстЗапроса + "
	|
	|ИЗ
	|	Документ." + ДокументОбъект.Метаданные().Имя + "."+ СокрЛП(ИмяТабличнойЧасти) + " КАК Док
	|
	|ГДЕ
	|	Док.Ссылка = &ДокументСсылка";

	// Установим параметры запроса.
	Запрос.УстановитьПараметр("ДокументСсылка" , ДокументОбъект.Ссылка);

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоТабличнойЧасти()

//Получает документ и дату для указанного состояния основного средства по бух учету
//
// Параметры
//
//
// Возваращаемое значение
//  Дата и документ - через указанные параметры процедуры.
//
Процедура ПолучитьДокументБухСостоянияОС(ОсновноеСредство, Организация, Состояние, ДокРегистратор, ДатаДокРегистратора) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Если Метаданные.Документы.Найти("АвизоОСВходящее") <> Неопределено Тогда 
		ДопУсловие = " И НЕ СостоянияОСОрганизаций.Регистратор ССЫЛКА Документ.АвизоОСВходящее";
	Иначе
		ДопУсловие = "";
	КонецЕсли;
	
	ГоловнаяОрганизация = Организация.ГоловнаяОрганизация;
	Если Не ЗначениеЗаполнено(ГоловнаяОрганизация) Тогда
		ГоловнаяОрганизация = Организация;
	КонецЕсли;
	Запрос.УстановитьПараметр("Организация", 		Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("СостояниеОС", 		Состояние);
	Запрос.УстановитьПараметр("ОС",					ОсновноеСредство);
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СостоянияОСОрганизаций.Регистратор КАК Документ,
		|	СостоянияОСОрганизаций.ДатаСостояния КАК Дата
		|ИЗ
		|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
		|
		|ГДЕ
		|	СостоянияОСОрганизаций.ОсновноеСредство = &ОС И
		|	СостоянияОСОрганизаций.Организация В 
		|		(ВЫБРАТЬ
		|				Организации.Ссылка КАК Ссылка
		|			ИЗ
		|				Справочник.Организации КАК Организации
		|			ГДЕ
		|				(Организации.Ссылка = &ГоловнаяОрганизация
		|					ИЛИ Организации.ГоловнаяОрганизация = &ГоловнаяОрганизация
		|					ИЛИ Организации.Ссылка = &Организация)) И
		|	СостоянияОСОрганизаций.Состояние = &СостояниеОС" + ДопУсловие + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
	ВыборкаДоков = Запрос.Выполнить().Выбрать();

	Если ВыборкаДоков.Следующий()  Тогда
		ДокРегистратор      = ВыборкаДоков.Документ;
		ДатаДокРегистратора = ВыборкаДоков.Дата;

	Иначе
		ДокРегистратор      = Неопределено;
		ДатаДокРегистратора = '00010101';

	КонецЕсли;

КонецПроцедуры

// Функция возвращает таблицу значений с инвентарными номерами ОС.
//
// Параметры
//  ТаблицаОС   - Таблица значений со списком ОС, для которой нужно получить инвентарные номера.
//                Обязательные колонки: НомерСтроки, ОсновноеСредство
//  Организация - Организация, по которой требуется получить инвентарные номера.
//  Дата        - Дата, на которую требуется получить инвентарные номера.
//
// Возвращаемое значение:
//   ТаблицаЗначений - Таблица с инвентарными номерами. Колонки: НомерСтроки, ОсновноеСредство, ИнвентарныйНомер
//
Функция ПолучитьТаблицуИнвентарныхНомеровОС(ТаблицаОС, Организация, Дата) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОС", ТаблицаОС.ВыгрузитьКолонку("ОсновноеСредство"));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ИнвентарныйНомер,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.Период
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|			&Дата,
	|			Организация = &Организация
	|				И ОсновноеСредство В (&МассивОС)) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|";
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();;
	
	ТаблицаРезультата = ТаблицаОС.Скопировать();
	Если ТаблицаРезультата.Колонки.Найти("ИнвентарныйНомер") = Неопределено Тогда 
		ТаблицаРезультата.Колонки.Добавить("ИнвентарныйНомер", ОбщегоНазначения.ОписаниеТипаСтрока(9));
	КонецЕсли;
	ТаблицаРезультата.Колонки.Добавить("Период", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТаблицаРезультата.Индексы.Добавить("ОсновноеСредство");
	
	Для Каждого СтрокаЗапроса Из ТаблицаЗапроса Цикл
		
		СтрокаРезультата = ТаблицаРезультата.Найти(СтрокаЗапроса.ОсновноеСредство, "ОсновноеСредство");
		Если СтрокаРезультата <> Неопределено Тогда
			СтрокаРезультата.ИнвентарныйНомер 	= СтрокаЗапроса.ИнвентарныйНомер;
			СтрокаРезультата.Период 			= СтрокаЗапроса.Период;
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат ТаблицаРезультата;
	
КонецФункции // ПолучитьТаблицуИнвентарныхНомеровОС()

// Функция возвращает структуру сведений об инвентарном номере ОС.
//
// Параметры
//  ОсновноеСредство - Объект основных средств, для которого требуется получить инвентарный номер.
//  Организация      - Организация, по которой требуется получить инвентарный номер.
//  Дата             - Дата, на которую требуется получить инвентарный номер.
//
// Возвращаемое значение:
//  Структура
//		ИнвентарныйНомер 	-	Инвентарный номер переданного ОС
//		Период				-   Дата и время установки 
//
Функция СведенияОбИнвентарномНомереОС(Знач ОсновноеСредство, Знач Организация, Знач Дата) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("ИнвентарныйНомер", 	"");
	Результат.Вставить("Период", 			'0001-01-01');

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.Период КАК Период
	|	
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|			&Дата,
	|			Организация = &Организация
	|				И ОсновноеСредство = &ОсновноеСредство) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат.Вставить("ИнвентарныйНомер", 	Выборка.ИнвентарныйНомер);
		Результат.Вставить("Период",			Выборка.Период);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // СведенияОбИнвентарномНомереОС()

//  Функция дозаполняет табличную часть основных средств документа основными средствами
// с наименованием совпадающим с заданным основным средством. В случае отсутствия основных
// средств с подходящим наименованием, выдает сообщение об ошибке.
//
// Параметры
//  ПараметрыФормы   - Структура с параметрами заполнения, ключи структуры:
//  	Форма             - форма заполняемого документа
//  	Объект            - Значение основного реквизита формы - документа для заполнения
//  	ИмяТабличнойЧасти - Имя табличной части основных средств документа, значение по умолчанию "ОС"
//  	ПолучатьИнвентарныйНомерИзКода - Флаг необходимости получения основного средства из кода 
//  		справочника (в противном случае, по данным регистра сведений). Значение по умолчанию Ложь.
//  
//  ОсновноеСредство - Основное средство по наименованию которого требуется дозаполнить табличную часть.
//
// Возвращаемое значение:
//   Булево - Истина - в табличную часть добавлены строки с подходящими ОС, Ложь - подходящих ОС не найдено
//
Функция ДозаполнитьТабличнуюЧастьОсновнымиСредствамиПоНаименованию(ПараметрыФормы, ОсновноеСредство) Экспорт
	
	Форма = ПараметрыФормы.Форма;
	Объект = ПараметрыФормы.Объект;
	Если ПараметрыФормы.Свойство("ИмяТабличнойЧасти") Тогда
		ИмяТабличнойЧасти = ПараметрыФормы.ИмяТабличнойЧасти;
	Иначе
		ИмяТабличнойЧасти = "ОС";
	КонецЕсли;
	Если ПараметрыФормы.Свойство("ПолучатьИнвентарныйНомерИзКода") Тогда
		ПолучатьИнвентарныйНомерИзКода = ПараметрыФормы.ПолучатьИнвентарныйНомерИзКода;
	Иначе
		ПолучатьИнвентарныйНомерИзКода = Ложь;
	КонецЕсли;
	
	ОсновноеСредствоНаименование = Строка(ОсновноеСредство);
	
	СписокОС = Объект[ИмяТабличнойЧасти].Выгрузить(, "ОсновноеСредство");
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("СписокОС", СписокОС);
	Запрос.УстановитьПараметр("Наименование", ОсновноеСредствоНаименование);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОсновныеСредства.Ссылка КАК ОсновноеСредство,
	|	ОсновныеСредства.Код КАК Код
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	Справочник.ОсновныеСредства КАК ОсновныеСредства
	|ГДЕ
	|	ОсновныеСредства.Наименование = &Наименование
	|	И (НЕ ОсновныеСредства.Ссылка В (&СписокОС))
	|	И ОсновныеСредства.ПометкаУдаления = ЛОЖЬ
	|	И ОсновныеСредства.ЭтоГруппа = ЛОЖЬ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";
	Запрос.Выполнить();
	
	Если НЕ ПолучатьИнвентарныйНомерИзКода Тогда
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
		|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ИнвентарныйНомер
		|ПОМЕСТИТЬ ИнвентарныеНомера
		|ИЗ
		|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
		|			&Дата,
		|			Организация = &Организация
		|				И ОсновноеСредство В
		|					(ВЫБРАТЬ
		|						ТаблицаОС.ОсновноеСредство
		|					ИЗ
		|						ТаблицаОС КАК ТаблицаОС)) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство";
		Запрос.Выполнить();
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	" + ?(ПолучатьИнвентарныйНомерИзКода, "ТаблицаОС.Код", "ЕСТЬNULL(ИнвентарныеНомера.ИнвентарныйНомер, """")") + " КАК ИнвентарныйНомер
	|ИЗ
	|	ТаблицаОС КАК ТаблицаОС" + ?(ПолучатьИнвентарныйНомерИзКода, "", "
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИнвентарныеНомера КАК ИнвентарныеНомера
	|		ПО ТаблицаОС.ОсновноеСредство = ИнвентарныеНомера.ОсновноеСредство") + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОсновноеСредство,
	|	ИнвентарныйНомер
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ШаблонСообщения = НСтр("ru = 'Другие элементы справочника с наименованием ""%1"" в справочнике ""Основные средства"" отсутствуют.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ОсновноеСредствоНаименование);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект");
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
		НоваяСтрока.ОсновноеСредство = Выборка.ОсновноеСредство;
		НоваяСтрока.ИнвентарныйНомер = Выборка.ИнвентарныйНомер;
	КонецЦикла;
	
	Форма.Модифицированность = Истина;
	
	Возврат Истина;
	
КонецФункции // ДозаполнитьТабличнуюЧастьОсновнымиСредствамиПоНаименованию()

//  Процедура перезаполняет переданную коллекцию формы подобранными основными средствами.
// По основным средствам присутствовавшим в коллекции изначально, данные колонок 
// дополняются исходными.
//
// Параметр:
//  КоллекцияОС - ДанныеФормыКоллекция, отображение табличной части с основными средствами
//  	в реквизит управляемой формы. Обязатлеьно должна присутствовать колонка ОсновноеСредство.
//  
//  ВыбранноеЗначение - Структура, значение из обработчика ОбработкаВыбора полученное в результате
//  	подбора
//..
//  Вовзвращаемое значение:
//    Массив - Массив новых строк коллекции.
//
Функция ОбработатьПодборОсновныхСредств(Знач КоллекцияОС, Знач ВыбранноеЗначение) Экспорт
	
	ТаблицаОС = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресОСВХранилище);
	
	ИсходныеДанные = КоллекцияОС.Выгрузить();
	ИсходныеДанные.Индексы.Добавить("ОсновноеСредство");
	
	ДобавленныеСтроки = Новый Массив;
	
	КоллекцияОС.Очистить();
	Для каждого СтрокаТаблицыОС Из ТаблицаОС Цикл
		ЭлементКоллекции = КоллекцияОС.Добавить();
		
		СтрокаИсходныхДанных = ИсходныеДанные.Найти(СтрокаТаблицыОС.ОсновноеСредство, "ОсновноеСредство");
		Если СтрокаИсходныхДанных <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ЭлементКоллекции, СтрокаИсходныхДанных);
		Иначе
			ДобавленныеСтроки.Добавить(ЭлементКоллекции);
		КонецЕсли;
			
		ЗаполнитьЗначенияСвойств(ЭлементКоллекции, СтрокаТаблицыОС);
	КонецЦикла;
	
	Возврат ДобавленныеСтроки;
	
КонецФункции

// Возвращает из справочника событий ОС первую найденную запись с заданным видом события,
// иначе возвращает пустую ссылку на справочник
//
// Параметры
//  ВидСобытия (Перечисление ВидыСобытийОС): вид события
//
// Возвращаемое значение:
//   элемент справочника событий ОС
//
Функция ПолучитьСобытиеПоОСИзСправочника(ВидСобытия) Экспорт
	Перем Результат;
	
	Результат	= Справочники.СобытияОС.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидСобытияОС", ВидСобытия);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СобытияОС.Ссылка,
	|	СобытияОС.ВидСобытияОС
	|ИЗ
	|	Справочник.СобытияОС КАК СобытияОС
	|ГДЕ
	|	СобытияОС.ВидСобытияОС = &ВидСобытияОС
	|	И НЕ СобытияОС.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат	= Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции // ПолучитьСобытиеОСИзСправочника()

Функция ПолучитьПараметрыНачисленияАмортизационнойПремии(Знач СпособыОтраженияРасходовПоАмортизации) Экспорт
	
	СтатьяЗатратАмортизационнаяПремия = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатьиЗатрат.АмортизационнаяПремия");
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СпособыОтраженияРасходовПоАмортизации);
	Запрос.УстановитьПараметр("СтатьяЗатратАмортизационнаяПремия", СтатьяЗатратАмортизационнаяПремия);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СпособыОтраженияРасходовПоАмортизацииСпособы.СчетЗатрат КАК СчетЗатрат,
	|	СпособыОтраженияРасходовПоАмортизацииСпособы.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто1 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА &СтатьяЗатратАмортизационнаяПремия
	|		ИНАЧЕ СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто1
	|	КОНЕЦ КАК Субконто1,
	|	ВЫБОР
	|		КОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто2 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА &СтатьяЗатратАмортизационнаяПремия
	|		ИНАЧЕ СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто2
	|	КОНЕЦ КАК Субконто2,
	|	ВЫБОР
	|		КОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто3 ССЫЛКА Справочник.СтатьиЗатрат
	|			ТОГДА &СтатьяЗатратАмортизационнаяПремия
	|		ИНАЧЕ СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто3
	|	КОНЕЦ КАК Субконто3
	|ИЗ
	|	Справочник.СпособыОтраженияРасходовПоАмортизации.Способы КАК СпособыОтраженияРасходовПоАмортизацииСпособы
	|ГДЕ
	|	СпособыОтраженияРасходовПоАмортизацииСпособы.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	СпособыОтраженияРасходовПоАмортизацииСпособы.НомерСтроки";
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураРезультата = Новый Структура;
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		СпособОтраженияРаcходов = РезультатЗапроса.Выгрузить()[0];
			
		СтруктураРезультата.Вставить("СчетУчетаЗатратПоАмортизационнойПремии", СпособОтраженияРаcходов.СчетЗатрат);
		
		СтруктураРезультата.Вставить("ПодразделениеОрганизацииПоАмортизационнойПремии", СпособОтраженияРаcходов.ПодразделениеОрганизации);
		
		Если ЗначениеЗаполнено(СпособОтраженияРаcходов.Субконто1) Тогда
			СтруктураРезультата.Вставить("СубконтоПоАмортизационнойПремии1", СпособОтраженияРаcходов.Субконто1);
		КонецЕсли;
			
		Если ЗначениеЗаполнено(СпособОтраженияРаcходов.Субконто2) Тогда
			СтруктураРезультата.Вставить("СубконтоПоАмортизационнойПремии2", СпособОтраженияРаcходов.Субконто2);
		КонецЕсли;
			
		Если ЗначениеЗаполнено(СпособОтраженияРаcходов.Субконто3) Тогда
			СтруктураРезультата.Вставить("СубконтоПоАмортизационнойПремии3", СпособОтраженияРаcходов.Субконто3);
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат СтруктураРезультата;
	
КонецФункции

