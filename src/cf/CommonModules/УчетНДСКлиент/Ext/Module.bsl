//Программный интерфейс для выбора документов НДС
//Открывает форму выбора документов НДС
//Оповещает при закрытии о выборе документов
//Имя события "ЗакрытаФормаВыбораДокументовНДСДляПередачиФНС"
//
//Параметры процедуры: 
//	(необязательный) ПараметрыОтбора, тип Структура. 
//	Задает начальные значения отборов. 
//	Возможные поля структуры:
// 		(необязательный) 	Ключ: «ВидДокумента», 		Значение: Строка
// 		(необязательный) 	Ключ: «Организация», 		Значение: СправочникСсылка.Организации
// 		(необязательный) 	Ключ: «Контрагент», 		Значение: СправочникСсылка.Контрагенты
//
//Возвращаемое значение:  Массив структур. Поля структуры:
//	(обязательный) 	Ключ: «СсылкаДокументИБ»,	Значение: ссылка на документ ИБ
//	(обязательный) 	Ключ: «ВидДокумента», 		Значение: Строка
//
//В случае отмены выбора возвращается Неопределено.
Процедура ПолучитьСвойстваДокументовНДСДляПередачиФНС(ПараметрыОтбора) Экспорт
	
	МасиивДокументовИБ = Новый Массив;

	ПараметрыФормы = Новый Структура;
	
	Если ПараметрыОтбора.Свойство("ВидДокумента") Тогда
		ПараметрыФормы.Вставить("ВидДокумента", ПараметрыОтбора.ВидДокумента);
	КонецЕсли;
	
	Если ПараметрыОтбора.Свойство("Организация") Тогда
		ПараметрыФормы.Вставить("Организация", ПараметрыОтбора.Организация);
	КонецЕсли;
	
	ОткрытьФорму("ЖурналДокументов.ДокументыПоУчетуНДСДляПередачиВЭлектронномВиде.Форма.ФормаВыбора", ПараметрыФормы);
		
КонецПроцедуры

// Открывает форму списка документов НДС в режиме выбора, в качестве описания оповещения при открытии формы используется ОписаниеОповещения, передаваемое в параметрах процедуры.
//
// Параметры процедуры: 
//	(обязательный) ОписаниеОповещения	- ОписаниеОповещения
//	(необязательный) ПараметрыОтбора	- Структура, задает начальные значения отборов. 
//		Поля структуры:
// 			(необязательный) Организация	- СправочникСсылка.Организации
//
Процедура ВыбратьДокументНДСДляПередачиФНС(ОписаниеОповещения, ПараметрыОтбора) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	Если ПараметрыОтбора <> Неопределено Тогда
		Если ПараметрыОтбора.Свойство("Организация") Тогда
			ПараметрыФормы.Вставить("Организация", ПараметрыОтбора.Организация);
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьФорму("ЖурналДокументов.ДокументыПоУчетуНДСДляПередачиВЭлектронномВиде.ФормаСписка", ПараметрыФормы,,,,,ОписаниеОповещения);
		
КонецПроцедуры

Процедура ОткрытьСчетФактуру(Форма, СчетФактура, ВидСчетаФактуры) Экспорт

	СтандартнаяОбработка = Ложь;

	Если НЕ ЗначениеЗаполнено(Форма.Параметры.Ключ) ИЛИ Форма.Модифицированность Тогда
		ОбъектЗаписан = Форма.Записать();
		
		Если НЕ ОбъектЗаписан Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;		
	
	Если ЗначениеЗаполнено(СчетФактура) Тогда
		Параметры = Новый Структура("Ключ", СчетФактура);
	Иначе
		Если Форма.Объект.ПометкаУдаления Тогда
			ПоказатьПредупреждение( , НСтр("ru = 'Счет-фактуру нельзя вводить на основании документа, помеченного на удаление.'"));
			Возврат;
		КонецЕсли;

		Параметры = Новый Структура("Основание", Форма.Параметры.Ключ);
	КонецЕсли;
	
	ФормаСФ = ОткрытьФорму("Документ." + ВидСчетаФактуры + ".ФормаОбъекта", Параметры, Форма);

КонецПроцедуры

Функция СоздатьСчетФактуруВыданный(Форма, СтруктураОтбора = Неопределено) Экспорт

	Если Форма.Объект.ПометкаУдаления Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'Счет-фактуру нельзя выписать на основании документа, помеченного на удаление.'"));
		Возврат Неопределено;
	КонецЕсли;

	Отказ = Ложь;
	
	Если Форма.Объект.Свойство("ИспользоватьДокументРасчетовКакСчетФактуру") И Форма.Объект.ИспользоватьДокументРасчетовКакСчетФактуру Тогда
		
		Если НЕ ЗначениеЗаполнено(Форма.Объект.РасчетныйДокумент) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Поле", "Заполнение", НСтр("ru = 'Документ расчетов'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "РасчетныйДокумент", "Объект", Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВыписыватьСчетаФактурыСпецРежимы = ПолучитьФункциональнуюОпциюИнтерфейса("ВыписыватьСчетаФактурыСпецРежимы");

	Если НЕ ЗначениеЗаполнено(Форма.Параметры.Ключ) ИЛИ Форма.Модифицированность Тогда
		
		ПараметрыЗаписи = Новый Структура("РежимЗаписи, ВыписатьСчетФактуру", РежимЗаписиДокумента.Запись, Истина);
		Форма.Записать(ПараметрыЗаписи);
		
		Если ВыписыватьСчетаФактурыСпецРежимы <> ПолучитьФункциональнуюОпциюИнтерфейса("ВыписыватьСчетаФактурыСпецРежимы") Тогда
			ОбновитьИнтерфейс();
		КонецЕсли;
	
		Возврат Неопределено;
				
	КонецЕсли;		
	
	Основание = Форма.Объект.Ссылка;
	
	Если Форма.Объект.Свойство("ИспользоватьДокументРасчетовКакСчетФактуру") И Форма.Объект.ИспользоватьДокументРасчетовКакСчетФактуру Тогда
		Основание = Форма.Объект.РасчетныйДокумент;
	КонецЕсли;
	
	Результат = УчетНДСВызовСервера.СоздатьСчетФактуруВыданныйНаОсновании(Основание, СтруктураОтбора);
	
	СчетФактура = Результат.Ссылка;
	
	ОповеститьОбИзменении(СчетФактура);
	
	Если ВыписыватьСчетаФактурыСпецРежимы <> ПолучитьФункциональнуюОпциюИнтерфейса("ВыписыватьСчетаФактурыСпецРежимы") Тогда
		ОбновитьИнтерфейс();
	КонецЕсли;
	
	Возврат Результат;	

КонецФункции

Функция СоздатьСчетФактуруПолученный(Форма, ЭтоКомиссияНаЗакупку = Ложь, ЭтоКорректировкаПоступления = Ложь, СтруктураОтбора = Неопределено) Экспорт

	Если Форма.Объект.ПометкаУдаления Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'Счет-фактуру нельзя зарегистрировать на основании документа, помеченного на удаление.'"));
		Возврат Неопределено;
	КонецЕсли;
	
	Отказ = Ложь;
	
	Если Форма.Объект.Свойство("ИспользоватьДокументРасчетовКакСчетФактуру") И Форма.Объект.ИспользоватьДокументРасчетовКакСчетФактуру Тогда
		
		Если НЕ ЗначениеЗаполнено(Форма.Объект.РасчетныйДокумент) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Поле", "Заполнение", НСтр("ru = 'Документ расчетов'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "РасчетныйДокумент", "Объект", Отказ);
		КонецЕсли;
		
	КонецЕсли;

	Если ЭтоКорректировкаПоступления Тогда
		
		
		Если Форма.Объект.Свойство("ВидОперации") И Форма.Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки") Тогда
			ТекстНеЗаполненНомер	= НСтр("ru = 'Номер исправления'");
			ИмяПоляНомера			= "НомерИсправления";
			ТекстНеЗаполненаДата 	= НСтр("ru = 'Дата исправления'");
			НомерСчетаФактуры		= Форма.НомерИсправления;
		Иначе
			ТекстНеЗаполненНомер 	= НСтр("ru = 'Номер корректировочного счета-фактуры'"); 
			ИмяПоляНомера 		 	= "НомерСчетаФактурыПолученного";
			ТекстНеЗаполненаДата 	= НСтр("ru = 'Дата корректировочного счета-фактуры'"); 
			НомерСчетаФактуры 		= Форма.НомерСчетаФактурыПолученного;
				
		КонецЕсли;
		
	Иначе
		ТекстНеЗаполненНомер 	= НСтр("ru = 'Номер счета-фактуры'"); 
		ИмяПоляНомера 		 	= "НомерСчетаФактурыПолученного";
		ТекстНеЗаполненаДата 	= НСтр("ru = 'Дата счета-фактуры'"); 
		НомерСчетаФактуры 		= Форма.НомерСчетаФактурыПолученного;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НомерСчетаФактуры) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", ТекстНеЗаполненНомер);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, ИмяПоляНомера,, Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Форма.ДатаСчетаФактурыПолученного) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", ТекстНеЗаполненаДата);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ДатаСчетаФактурыПолученного",, Отказ);
	КонецЕсли;
	
	Если ЭтоКомиссияНаЗакупку И НЕ ЗначениеЗаполнено(Форма.Продавец) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Составлен от имени'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Продавец",, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;

	РегистрироватьСчетаФактурыСпецРежимы = ПолучитьФункциональнуюОпциюИнтерфейса("РегистрироватьСчетаФактурыСпецРежимы");
	
	Если НЕ ЗначениеЗаполнено(Форма.Параметры.Ключ) ИЛИ Форма.Модифицированность Тогда
		
		ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись);
		Форма.Записать(ПараметрыЗаписи); 
		
		Если РегистрироватьСчетаФактурыСпецРежимы <> ПолучитьФункциональнуюОпциюИнтерфейса("РегистрироватьСчетаФактурыСпецРежимы") Тогда
			ОбновитьИнтерфейс();
		КонецЕсли;
		
		Возврат Неопределено;
		
	КонецЕсли;		
	
	Основание = Форма.Объект.Ссылка;
	
	Если Форма.Объект.Свойство("ИспользоватьДокументРасчетовКакСчетФактуру") И Форма.Объект.ИспользоватьДокументРасчетовКакСчетФактуру Тогда
		Основание = Форма.Объект.РасчетныйДокумент;
	КонецЕсли;
	
	Результат = УчетНДСВызовСервера.СоздатьСчетФактуруПолученныйНаОсновании(Основание, НомерСчетаФактуры, Форма.ДатаСчетаФактурыПолученного, 
		?(ЭтоКомиссияНаЗакупку, Форма.Продавец, Неопределено), СтруктураОтбора);
	
	СчетФактура = Результат.Ссылка;
	
	ОповеститьОбИзменении(СчетФактура);
	
	Если РегистрироватьСчетаФактурыСпецРежимы <> ПолучитьФункциональнуюОпциюИнтерфейса("РегистрироватьСчетаФактурыСпецРежимы") Тогда
		ОбновитьИнтерфейс();
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ВыполнитьКомандуПечатиСчетовФактур(ОписаниеКоманды) Экспорт
	
	НастройкиПечати = УчетНДСВызовСервера.ПолучитьНастройкиПечатиСчетовФактур(ОписаниеКоманды.ОбъектыПечати);
	
	СчетаФактуры = НастройкиПечати.СчетаФактуры;
	ДокументыБезСчетовФактур = НастройкиПечати.ДокументыБезСчетовФактур;
	СписокМакетов = НастройкиПечати.СписокМакетов;
	
	ПараметрыПечати = ОбщегоНазначенияБПКлиент.ПолучитьЗаголовокПечатнойФормы(СчетаФактуры);
	
	Если ОписаниеКоманды.Свойство("ДополнительныеПараметры") 
		И ПараметрыПечати <> Неопределено Тогда
		ПараметрыПечати.Вставить("ДополнительныеПараметры", ОписаниеКоманды.ДополнительныеПараметры);
	КонецЕсли; 
	
	Если СписокМакетов <> "" Тогда 
		
		УправлениеПечатьюБПКлиент.НачатьЗамерВремени(ОписаниеКоманды.Форма, 
			ОписаниеКоманды.Идентификатор, НастройкиПечати.СчетаФактуры);
		
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
			"Документ.СчетФактураВыданный",
			СписокМакетов,
			СчетаФактуры,
			ОписаниеКоманды.Форма,
			ПараметрыПечати);
			
	КонецЕсли;
	
	Для каждого ДокументБезСчетаФактуры Из ДокументыБезСчетовФактур Цикл
		
		ТекстСообщения = НСтр("ru='По документу %1 счет-фактура не выписан.'");
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументБезСчетаФактуры);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЦикла;
	
КонецФункции

Функция ВыполнитьКомандуПечатиСчетовФактурПолученных(ОписаниеКоманды) Экспорт
	
	НастройкиПечати = УчетНДСВызовСервера.ПолучитьНастройкиПечатиСчетовФактурПолученных(ОписаниеКоманды.ОбъектыПечати);
	
	СчетаФактуры = НастройкиПечати.СчетаФактуры;
	ДокументыБезСчетовФактур = НастройкиПечати.ДокументыБезСчетовФактур;
	СписокМакетов = НастройкиПечати.СписокМакетов;
	
	ПараметрыПечати = ОбщегоНазначенияБПКлиент.ПолучитьЗаголовокПечатнойФормы(СчетаФактуры);
	
	Если ОписаниеКоманды.Свойство("ДополнительныеПараметры") 
		И ПараметрыПечати <> Неопределено Тогда
		ПараметрыПечати.Вставить("ДополнительныеПараметры", ОписаниеКоманды.ДополнительныеПараметры);
	КонецЕсли; 
	
	Если СписокМакетов <> "" Тогда 
		
		УправлениеПечатьюБПКлиент.НачатьЗамерВремени(ОписаниеКоманды.Форма, 
			ОписаниеКоманды.Идентификатор, НастройкиПечати.СчетаФактуры);
		
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
			"Документ.СчетФактураПолученный",
			СписокМакетов,
			СчетаФактуры,
			ОписаниеКоманды.Форма,
			ПараметрыПечати);
			
	КонецЕсли;
	
	Для каждого ДокументБезСчетаФактуры Из ДокументыБезСчетовФактур Цикл
		
		ТекстСообщения = НСтр("ru='По документу %1 счет-фактура не выписан.'");
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументБезСчетаФактуры);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЦикла;
	
КонецФункции

Функция ПолучитьСтавкуНДСПоУмолчанию(ПлательщикНДС) Экспорт
	
	Если ПлательщикНДС Тогда
		Возврат ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18");
	Иначе
		Возврат ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС");
	КонецЕсли;

КонецФункции

Функция ВыполнитьКомандуПечатиУниверсальныхПередаточныхДокументов(ОписаниеКоманды) Экспорт
	
	НастройкиПечати = УчетНДСВызовСервера.ПолучитьНастройкиПечатиУниверсальныхПередаточныхДокументов(ОписаниеКоманды.ОбъектыПечати);
	
	ПараметрыПечати = Новый Структура("ЗаголовокФормы", НастройкиПечати.ЗаголовокФормы);
	
	Если ОписаниеКоманды.Свойство("ДополнительныеПараметры")
		И ПараметрыПечати <> Неопределено Тогда
		ПараметрыПечати.Вставить("ДополнительныеПараметры", ОписаниеКоманды.ДополнительныеПараметры);
	КонецЕсли; 
	
	Если НастройкиПечати.УниверсальныеПередаточныеДокументы.Количество() > 0 Тогда
		
		УправлениеПечатьюБПКлиент.НачатьЗамерВремени(ОписаниеКоманды.Форма, 
			ОписаниеКоманды.Идентификатор, НастройкиПечати.УниверсальныеПередаточныеДокументы);
		
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
			"Обработка.ПечатьУПД",
			 НастройкиПечати.СписокМакетов, 
			 НастройкиПечати.УниверсальныеПередаточныеДокументы, 
			 ОписаниеКоманды.Форма,
			 ПараметрыПечати);
			 
	КонецЕсли;
	
	Для каждого ДокументБезСчетаФактуры Из НастройкиПечати.ДокументыБезСчетовФактур Цикл
		
		Если НастройкиПечати.ДокументыСчетФактураНеТребуются.Найти(ДокументБезСчетаФактуры) = Неопределено Тогда
			
			Если ТипЗнч(ДокументБезСчетаФактуры) = Тип("ДокументСсылка.ОказаниеУслуг") Тогда
				ТекстСообщения = НСтр("ru = 'По документу %1 счета-фактуры не выписаны'");
			Иначе
				ТекстСообщения = НСтр("ru = 'По документу %1 счет-фактура не выписан'");
			КонецЕсли;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументБезСчетаФактуры);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

Функция ВыполнитьКомандуПечатиУниверсальныхКорректировочныхДокументов(ОписаниеКоманды) Экспорт
	
	НастройкиПечати = УчетНДСВызовСервера.ПолучитьНастройкиПечатиУниверсальныхКорректировочныхДокументов(ОписаниеКоманды.ОбъектыПечати);
	
	ПараметрыПечати = Новый Структура("ЗаголовокФормы", НастройкиПечати.ЗаголовокФормы);
	
	Если ОписаниеКоманды.Свойство("ДополнительныеПараметры")
		И ПараметрыПечати <> Неопределено Тогда
		ПараметрыПечати.Вставить("ДополнительныеПараметры", ОписаниеКоманды.ДополнительныеПараметры);
	КонецЕсли; 
		
	Если НастройкиПечати.УниверсальныеКорректировочныеДокументы.Количество() > 0 Тогда
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
			"Обработка.ПечатьУКД",
			 НастройкиПечати.СписокМакетов, 
			 НастройкиПечати.УниверсальныеКорректировочныеДокументы, 
			 ОписаниеКоманды.Форма,
			 ПараметрыПечати);
	КонецЕсли;
	
	Для каждого ДокументБезСчетаФактуры Из НастройкиПечати.ДокументыБезСчетовФактур Цикл
		
		Если НастройкиПечати.ДокументыСчетФактураНеТребуются.Найти(ДокументБезСчетаФактуры) = Неопределено Тогда
			
			ТекстСообщения = НСтр("ru = 'По документу %1 счет-фактура не выписан'");
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументБезСчетаФактуры);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

Функция ВыполнитьКомандуПечатиЗаявленияОВвозеТоваров(ОписаниеКоманды) Экспорт

	ПараметрыПечати = ОбщегоНазначенияБПКлиент.ПолучитьЗаголовокПечатнойФормы(ОписаниеКоманды.ОбъектыПечати);
	
	Если ОписаниеКоманды.Свойство("ДополнительныеПараметры") 
		И ПараметрыПечати <> Неопределено Тогда
		ПараметрыПечати.Вставить("ДополнительныеПараметры", ОписаниеКоманды.ДополнительныеПараметры);
	КонецЕсли;

	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
		"Документ.ЗаявлениеОВвозеТоваров",
		"ЗаявлениеОВвозеТоваров",
		ОписаниеКоманды.ОбъектыПечати,
		ОписаниеКоманды.Форма,
		ПараметрыПечати);
	
КонецФункции

Функция ВыполнитьКомандуПечатиСтатистическойФормыУчетаПеремещенияТоваров(ОписаниеКоманды) Экспорт

	ПараметрыПечати = ОбщегоНазначенияБПКлиент.ПолучитьЗаголовокПечатнойФормы(ОписаниеКоманды.ОбъектыПечати);
	
	Если ОписаниеКоманды.Свойство("ДополнительныеПараметры") 
		И ПараметрыПечати <> Неопределено Тогда
		ПараметрыПечати.Вставить("ДополнительныеПараметры", ОписаниеКоманды.ДополнительныеПараметры);
	КонецЕсли;

	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
		"Документ.ЗаявлениеОВвозеТоваров",
		"СтатистическаяФормаУчетаПеремещенияТоваров",
		ОписаниеКоманды.ОбъектыПечати,
		ОписаниеКоманды.Форма,
		ПараметрыПечати);

КонецФункции

// Заявление о ввозе товаров и уплате косвенных налогов и статистическая форма учета перемещения товаров

Процедура ВыгрузкаЗаявленияОВвозеТоваров(Ссылка) Экспорт

	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗаявлениеОВвозеТоваров") Тогда
		
		УникальныйИдентификаторЗаявлениеОВвозе = Новый УникальныйИдентификатор;
		УникальныйИдентификаторУчетПеремещенияТоваров = Новый УникальныйИдентификатор;
		
		ВыгружаемыеДанные = УчетНДСВызовСервера.ПолучитьВыгружаемыеДанныеЗаявлениеОВвозеТоваров(
			Ссылка, 
			УникальныйИдентификаторЗаявлениеОВвозе,
			УникальныйИдентификаторУчетПеремещенияТоваров);
			
		Если ВыгружаемыеДанные.ЗаявлениеОВвозеТоваров <> Неопределено Тогда
			
			Для Каждого ФайлВыгрузки Из ВыгружаемыеДанные.ЗаявлениеОВвозеТоваров Цикл
				
				Попытка
					
					ПолучитьФайл(ФайлВыгрузки.АдресФайлаВыгрузки, ФайлВыгрузки.ИмяФайлаВыгрузки);
					
				Исключение
					
					Сообщение = Новый СообщениеПользователю;
					
					ТекстСообщения = "Не удалось записать файл """ + ФайлВыгрузки.ИмяФайлаВыгрузки 
					+ """! Возможно, недостаточно места на диске или диск защищен от записи.";
					
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстСообщения);
					
					Сообщение.Сообщить();
					
				КонецПопытки;
				
			КонецЦикла;
			
		КонецЕсли;
			
		Если ВыгружаемыеДанные.УчетПеремещенияТоваров <> Неопределено Тогда
			
			Для Каждого ФайлВыгрузки Из ВыгружаемыеДанные.УчетПеремещенияТоваров Цикл
				
				Попытка
					
					ПолучитьФайл(ФайлВыгрузки.АдресФайлаВыгрузки, ФайлВыгрузки.ИмяФайлаВыгрузки);
					
				Исключение
					
					Сообщение = Новый СообщениеПользователю;
					
					ТекстСообщения = "Не удалось записать файл """ + ФайлВыгрузки.ИмяФайлаВыгрузки 
					+ """! Возможно, недостаточно места на диске или диск защищен от записи.";
					
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстСообщения);
					
					Сообщение.Сообщить();
					
				КонецПопытки;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	

КонецПроцедуры
