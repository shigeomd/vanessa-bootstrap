////////////////////////////////////////////////////////////////////////////////
// БАЗОВАЯ ФУНКЦИОНАЛЬНОСТЬ
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

Процедура УстановкаПараметровСеанса(ИменаПараметровСеанса) Экспорт

	// Установка варианта интерфейса "Версия 8.2" пользователю, 
	// выполняющему обновление на версию 3.0.33 с предыдущих версий редакции 3.0
	Если ИменаПараметровСеанса = Неопределено
		И НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		ВерсияКонфигурацииИБ = ОбновлениеИнформационнойБазы.ВерсияИБ(Метаданные.Имя);
		Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияКонфигурацииИБ, "3.0.33.1") < 0 
			И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияКонфигурацииИБ, "3.0.0.0") > 0 Тогда
			НастройкиКлиента = ХранилищеСистемныхНастроек.Загрузить("Общее/НастройкиКлиентскогоПриложения");
			Если НастройкиКлиента = Неопределено Тогда
				НастройкиКлиента = Новый НастройкиКлиентскогоПриложения;
			КонецЕсли;
			НастройкиКлиента.ВариантИнтерфейсаКлиентскогоПриложения = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2;
			ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиКлиентскогоПриложения", , НастройкиКлиента);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Возвращает структуру параметров, необходимых для работы клиентского кода
// при запуске конфигурации, т.е. в обработчиках событий
// - ПередНачаломРаботыСистемы,
// - ПриНачалеРаботыСистемы
//
// Важно: при запуске недопустимо использовать команды сброса кэша
// повторно используемых модулей, иначе запуск может привести
// к непредсказуемым ошибкам и лишним серверным вызовам
//
// Параметры:
//   Параметры - Структура - (возвращаемое значение) структура параметров работы клиента при запуске.
//
// Пример реализации:
//   Для установки параметров работы клиента можно использовать шаблон:
//
//     Параметры.Вставить(<ИмяПараметра>, <код получения значения параметра>);
//
//
Процедура ПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	НастройкиКлиента  = ХранилищеСистемныхНастроек.Загрузить("Общее/НастройкиКлиентскогоПриложения");
	ВариантИнтерфейса = ?(ТипЗнч(НастройкиКлиента) = Тип("НастройкиКлиентскогоПриложения"),
		НастройкиКлиента.ВариантИнтерфейсаКлиентскогоПриложения,
		ВариантИнтерфейсаКлиентскогоПриложения.Такси);
		
	// Помощник перехода с редации 2.0
	Обработки.ПомощникПереходаСРедакции20.ПараметрыРаботыКлиентаПриЗапуске(Параметры);
	
	// Информация о необходимости обновить конфигурацию
	Параметры.Вставить("ПоказатьПредложитьОбновитьВерсиюПрограммы", ПредлагатьОбновитьВерсиюПрограммы(Параметры));
	
	// Предложение включить основной интерфейс
	ВариантПредложения = Неопределено;
	Параметры.Вставить("ПоказатьВключитьОсновнойИнтерфейс",
		ПредлагатьВключитьОсновнойИнтерфейс(ВариантИнтерфейса, ВариантПредложения));
	Параметры.Вставить("ВариантПредложенияВключитьОсновнойИнтерфейс", ВариантПредложения);
	
	// Предложение загрузить данные из 1С 7.7
	Параметры.Вставить("ПоказатьПредложитьЗагрузкуИз1СПредприятия77", ПредлагатьЗагрузкуИз1СПредприятия77());
	
	// Знакомство с редакцией 3.0
	ПоказатьЗнакомствоСРедакциейВ30 = ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных()
		И ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоПереходСРедакции20()
		И ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НачалоРаботыВ30", "Показывать", Истина);
	Параметры.Вставить("ПоказатьЗнакомствоСРедакциейВ30", ПоказатьЗнакомствоСРедакциейВ30);
	Параметры.Вставить("ИмяОбработкиЗнакомствоСРедакциейВ30", 
		?(ВариантИнтерфейса = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2,
		"НачинаемРаботатьВ30_82", "НачинаемРаботатьВ30"));
	
	// Путеводитель по демо-базе
	ИмяОбработкиПутеводительПоДемоБазе = ИмяОбработкиПутеводительПоДемоБазе();
	ПоказатьПутеводительПоДемоБазе = ИмяОбработкиПутеводительПоДемоБазе <> Неопределено;
	Параметры.Вставить("ПоказатьПутеводительПоДемоБазе",     ПоказатьПутеводительПоДемоБазе);
	Параметры.Вставить("ИмяОбработкиПутеводительПоДемоБазе", ИмяОбработкиПутеводительПоДемоБазе);
	
	// Свертка базы (продолжение работы)
	Параметры.Вставить("ПоказатьСвертку", ТребуетсяОткрытьСверткуБазы());
	
КонецПроцедуры

// Установка набора видимых подсистем командного интерфейса 
// и настроек всем пользователям вида интерфейса (Такси / в закладках).
//
// Параметры:
//  Режим - Строка - ИнтерфейсТакси / ИнтерфейсВерсии82 / ИнтерфейсВерсии77 - соответствует константе, которая будет установлена в Истину
//
Процедура УстановитьРежимКомандногоИнтерфейса(Режим) Экспорт
	
	Если НЕ ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	// Установка констант
	
	РежимТакси = ВРег(Режим) = ВРег("ИнтерфейсТакси");
	Режим82    = ВРег(Режим) = ВРег("ИнтерфейсВерсии82");
	Режим77    = ВРег(Режим) = ВРег("ИнтерфейсВерсии77");
	
	Если НЕ РежимТакси
		И НЕ Режим82
		И НЕ Режим77 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Константы.ИнтерфейсТакси.Установить(РежимТакси);
	Константы.ИнтерфейсВерсии82.Установить(Режим82);
	Константы.ИнтерфейсВерсии77.Установить(Режим77);
	
	ОтображатьПодсистемуУчетаЗарплатыИКадров = УчетЗарплаты.ИспользуетсяПодсистемаУчетаЗарплатыИКадров();
	
	Константы.ОтображатьПодсистемуСотрудникиИЗарплата82.Установить(ОтображатьПодсистемуУчетаЗарплатыИКадров И Режим82);
	Константы.ОтображатьПодсистемуЗарплатаИКадры.Установить(ОтображатьПодсистемуУчетаЗарплатыИКадров И РежимТакси);
	
	ЭтоБазоваяВерсияКонфигурации = СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации();
	
	ВестиУчетПоОрганизациям = Константы.ВестиУчетПоОрганизациям.СоздатьМенеджерЗначения();
	ВестиУчетПоОрганизациям.Значение = НЕ ЭтоБазоваяВерсияКонфигурации И РежимТакси;
	ВестиУчетПоОрганизациям.ОбменДанными.Загрузка = Истина;
	ВестиУчетПоОрганизациям.Записать();
	
	ВестиУчетПоОрганизациям82 = Константы.ВестиУчетПоОрганизациям82.СоздатьМенеджерЗначения();
	ВестиУчетПоОрганизациям82.Значение = НЕ ЭтоБазоваяВерсияКонфигурации И НЕ РежимТакси;
	ВестиУчетПоОрганизациям82.ОбменДанными.Загрузка = Истина;
	ВестиУчетПоОрганизациям82.Записать();
		
	// Установка настроек по умолчанию всем пользователям
	
	ВсеПользователи = ПользователиИнформационнойБазы.ПолучитьПользователей();
	Если ВсеПользователи.Количество() > 0 Тогда
		Для каждого ПользовательИБ Из ВсеПользователи Цикл
			ПользователиСлужебный.УстановитьНачальныеНастройки(ПользовательИБ.Имя);
		КонецЦикла;
	Иначе
		ПользователиСлужебный.УстановитьНачальныеНастройки("");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕРКИ НЕОБХОДИМОСТИ ВЫПОЛНЕНИЯ ДЕЙСТВИЙ ПРИ ЗАПУСКЕ

Функция ПредлагатьЗагрузкуИз1СПредприятия77()
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ РольДоступна("ПолныеПрава") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Пустой();
	
КонецФункции

Функция ПредлагатьВключитьОсновнойИнтерфейс(ВариантИнтерфейса, ВариантПредложения)

	Если НЕ ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Интерфейс77 = Константы.ИнтерфейсВерсии77.Получить();
	Интерфейс82 = Константы.ИнтерфейсВерсии82.Получить();
	
	Если НЕ Интерфейс77 И НЕ Интерфейс82 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ (ВариантИнтерфейса = ВариантИнтерфейсаКлиентскогоПриложения.Такси 
		ИЛИ РольДоступна("ПолныеПрава") И Константы.РежимИнтерфейсаУстановленАвтоматически.Получить()) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДатаСменыИнтерфейса = ХранилищеОбщихНастроек.Загрузить(ВРег("ДатаСменыИнтерфейса"));
	Если ЗначениеЗаполнено(ДатаСменыИнтерфейса) 
		И ТипЗнч(ДатаСменыИнтерфейса) = Тип("Дата") Тогда
		ДнейСПоследнегоПоказа = (НачалоДня(ТекущаяДатаСеанса()) - НачалоДня(ДатаСменыИнтерфейса)) / (60*60*24);
	Иначе
		ДнейСПоследнегоПоказа = 99999;
	КонецЕсли; 
	
	НадоПредлагать = (Интерфейс77 И ДнейСПоследнегоПоказа > 7)
		ИЛИ (Интерфейс82 И ДнейСПоследнегоПоказа > 14);
	
	Если НадоПредлагать Тогда
		 ВариантПредложения = ?(ВариантИнтерфейса = ВариантИнтерфейсаКлиентскогоПриложения.Такси, 
		 	"ИзменитьКомандныйИнтерфейс", "ВключитьСтандартныйИнтерфейс");
	КонецЕсли;
	
	Возврат НадоПредлагать;

КонецФункции

Функция ПредлагатьОбновитьВерсиюПрограммы(Параметры)
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Параметры.Вставить("ЭтоАдминистраторСистемы", ОбщегоНазначенияПовтИсп.РежимРаботыПрограммы().ЭтоАдминистраторСистемы);
	ДатаТекущейВерсии = Константы.ДатаТекущейВерсии.Получить();
	НадоПредлагать = ЗначениеЗаполнено(ДатаТекущейВерсии) 
		И ТекущаяДатаСеанса() > ДобавитьМесяц(ДатаТекущейВерсии, 2);
	Возврат НадоПредлагать;
	
КонецФункции

// Возвращает имя внешней обработки путеводителя по демо-базе или пустое значение, если путеводитель запускать не требуется
// 
Функция ИмяОбработкиПутеводительПоДемоБазе()
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат Неопределено;
	КонецЕсли;

	ПоказыватьПриСтарте = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ПутеводительПоДемоБазе", "Показывать", Истина);
	
	Если НЕ ПоказыватьПриСтарте Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ВнешниеОбработки.Ссылка
	|ИЗ
	|	Справочник.ДополнительныеОтчетыИОбработки КАК ВнешниеОбработки
	|ГДЕ
	|	ВнешниеОбработки.ИмяОбъекта = &ИмяОбъекта";
	
	Запрос.УстановитьПараметр("ИмяОбъекта", "ПутеводительПоДемонстрационнойБазе");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат ДополнительныеОтчетыИОбработки.ПодключитьВнешнююОбработку(Выборка.Ссылка);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает значение: требуется ли запускать обработку "Свертка информационной базы" или нет.
// 
Функция ТребуетсяОткрытьСверткуБазы()
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не РольДоступна("ПолныеПрава") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗначениеХранилища = Константы.СтатусСверткиИнформационнойБазы.Получить();
	
	ПоказыватьПриСтарте	= Ложь;
	
	Если ЗначениеХранилища <> Неопределено Тогда
		Статус = ЗначениеХранилища.Получить();
		Если Статус <> Неопределено Тогда
			ПоказыватьПриСтарте	= Статус.ПоказыватьПриСтарте;
		КонецЕсли;
	Иначе
		ПоказыватьПриСтарте	= Ложь;
	КонецЕсли;
	
	Возврат ПоказыватьПриСтарте;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕРКИ НАЛИЧИЯ И ЗАПОЛНЕНИЯ РЕВИЗИТОВ

// Позволяет определить есть ли табличная часть документа с переданным именем.
//
// Параметры:
//  ИмяТабЧасти - строковое имя искомой табличной части,
//  МетаданныеДокумента - объект описания метаданных документа, среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция ЕстьТабЧастьДокумента(ИмяТабЧасти, МетаданныеДокумента) Экспорт

	Возврат НЕ (МетаданныеДокумента.ТабличныеЧасти.Найти(ИмяТабЧасти) = Неопределено);
	
КонецФункции // ЕстьТабЧастьДокумента()

// Позволяет определить есть ли среди реквизитов табличной части документа
// реквизит с переданным именем.
//
// Параметры:
//  ИмяРеквизита - строковое имя искомого реквизита,
//  МетаданныеДокумента - объект описания метаданных документа, среди реквизитов которого производится поиск.
//  ИмяТабЧасти  - строковое имя табличной части документа, среди реквизитов которого производится поиск
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция ЕстьРеквизитТабЧастиДокумента(ИмяРеквизита, МетаданныеДокумента, ИмяТабЧасти) Экспорт

	ТабЧасть = МетаданныеДокумента.ТабличныеЧасти.Найти(ИмяТабЧасти);

	Если ТабЧасть = Неопределено Тогда // Нет такой таб. части в документе
		Возврат Ложь;

	Иначе
		Возврат НЕ (ТабЧасть.Реквизиты.Найти(ИмяРеквизита) = Неопределено);

	КонецЕсли;

КонецФункции // ЕстьРеквизитТабЧастиДокумента()

Функция ЕстьНезаполненныйРеквизитДокумента(ИмяРеквизита, ДокументОбъект, МетаданныеДокумента) Экспорт

	Результат =
		ОбщегоНазначения.ЕстьРеквизитОбъекта(ИмяРеквизита, МетаданныеДокумента)
		И НЕ ЗначениеЗаполнено(ДокументОбъект[ИмяРеквизита]);

	Возврат Результат;

КонецФункции

Функция ЕстьНезаполненныйРеквизитТабЧастиДокумента(ИмяРеквизита, СтрокаТабЧасти, МетаданныеДокумента, ИмяТабЧасти) Экспорт

	Результат =
		ЕстьРеквизитТабЧастиДокумента(ИмяРеквизита, МетаданныеДокумента, ИмяТабЧасти)
	   И НЕ ЗначениеЗаполнено(СтрокаТабЧасти[ИмяРеквизита]);

	Возврат Результат;

КонецФункции

// Удаляет из списка проверяемых реквизитов табличные части, если хотя бы одна из них заполнена
//
// Параметры:
//  Объект - ДокументОбъект, СправочникОбъект - объект с табличными частями
//  ИменаТабличныхЧастей - Массив, Строка - Перечень имен проверяемых табличных частей
//  ПроверяемыеРеквизиты - Массив - Перечень проверяемых реквизитов
Процедура ИсключитьИзПроверкиОсновныеТабличныеЧасти(Объект, Знач ИменаТабличныхЧастей, ПроверяемыеРеквизиты) Экспорт
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если ТипЗнч(ИменаТабличныхЧастей) = Тип("Строка") Тогда
		ИменаТабличныхЧастей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаТабличныхЧастей);
	КонецЕсли;
	
	ЕстьЗаписи = Ложь;
	Для Каждого ИмяТабличнойЧасти Из ИменаТабличныхЧастей Цикл
		
		Если Объект[СокрЛП(ИмяТабличнойЧасти)].Количество() > 0 Тогда
			ЕстьЗаписи = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьЗаписи Тогда
		Для Каждого ИмяТабличнойЧасти Из ИменаТабличныхЧастей Цикл
			МассивНепроверяемыхРеквизитов.Добавить(СокрЛП(ИмяТабличнойЧасти));
		КонецЦикла;
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

// Удаляет из списка проверяемых реквизитов неиспользуемые табличные части и все их реквизиты
//
// Параметры:
//  ПроверяемыеРеквизиты - Массив - Перечень проверяемых реквизитов
//  НеИспользуемыеТабличныеЧасти - Массив - Перечень имен неиспользуемых табличных частей
Процедура ИсключитьИзПроверкиНеиспользуемыеТабличныеЧасти(ПроверяемыеРеквизиты, НеИспользуемыеТабличныеЧасти) Экспорт
	
	// Исключим из проверки сами списки
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НеИспользуемыеТабличныеЧасти);
	
	// Исключим из проверки колонки списков
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Для Каждого ИмяТабличнойЧасти Из НеИспользуемыеТабличныеЧасти Цикл
		ПрефиксРеквизита = ИмяТабличнойЧасти + ".";
		ДлинаПрефикса = СтрДлина(ПрефиксРеквизита);
		Для Каждого ПроверяемыйРеквизит Из ПроверяемыеРеквизиты Цикл
			Если СтрДлина(ПроверяемыйРеквизит) > ДлинаПрефикса 
			   И Лев(ПроверяемыйРеквизит, ДлинаПрефикса) = ПрефиксРеквизита Тогда
			   МассивНепроверяемыхРеквизитов.Добавить(ПроверяемыйРеквизит);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ОчиститьНеиспользуемыеТабличныеЧасти(Объект, ИменаТабличныхЧастей) Экспорт
	
	Для Каждого ИмяТабличнойЧасти Из ИменаТабличныхЧастей Цикл
		
		ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
		
		Если ТабличнаяЧасть.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТабличнаяЧасть.Очистить();
		
	КонецЦикла;
	
КонецПроцедуры

// Позволяет определить, есть ли среди реквизитов формы реквизит с переданным именем.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой ищется реквизит
//  ИмяРеквизита - имя реквизита для поиска
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция ЕстьРеквизитФормы(Форма, ИмяРеквизита) Экспорт
	
	Для Каждого РеквизитФормы Из Форма.ПолучитьРеквизиты() Цикл
		Если ВРег(РеквизитФормы.Имя) = ВРег(ИмяРеквизита) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает значение второго параметра в случае, если значение первого параметра NULL.
// В противном случае будет возвращено значение первого параметра
//
// Параметры:
//  ПроверяемоеЗначение  - произвольный тип - проверяемое значение
//  ВозвращаемоеЗначение - произвольный тип - возвращаемое значение, если значение ПроверяемоеЗначение есть NULL
//
// Возвращаемое значение:
//  ПроверяемоеЗначение - если его значение не NULL, ВозвращаемоеЗначение - в ином случае.
//
Функция ЕстьNull(Знач ПроверяемоеЗначение, ВозвращаемоеЗначение) Экспорт
	
	Если ПроверяемоеЗначение = Null Тогда
		Возврат ВозвращаемоеЗначение;
	Иначе
		Возврат ПроверяемоеЗначение;
	КонецЕсли;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОЛУЧЕНИЯ И УСТАНОВКИ НАСТРОЕК ПОЛЬЗОВАТЕЛЕЙ

// Функция возвращает структуру с признаками того, надо ли показывать предупреждения об изменениях
//
// Параметры:
//	КлючиНастроек - строка, в которой через запятую перечислены имена настроек, 
//					которые надо показывать
//	ПоказыватьПредупреждениеОбИзменениях - булево, глобальный флаг, которым можно 
//		отключить показ всех предупреждений вне зависимости от флажка "Больше не показывать".
//
//		Истина - надо показывать предупреждения об изменениях в принципе
//		Ложь - не надо показывать предупреждения об изменениях
//
// Возвращаемое значение:
//	Структура:
// 		Ключ 		- имя настройки
// 		Значение 	- ИСТИНА если показывать предупреждение, ЛОЖЬ - иначе
//
Функция НастройкиПредупрежденийОбИзменениях(КлючиНастроек, ПоказыватьПредупреждениеОбИзменениях = Истина) Экспорт

	Результат = Новый Структура();

	МассивКлючей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КлючиНастроек, ",", Истина);

	Для Каждого КлючНастроек Из МассивКлючей Цикл
		ИмяКлюча = СокрЛП(КлючНастроек);
		БольшеНеПоказывать = ХранилищеОбщихНастроек.Загрузить("Обработка.ПредупреждениеОбИзменениях", ИмяКлюча);
		
		Если БольшеНеПоказывать = Истина Тогда
			Результат.Вставить(ИмяКлюча, Ложь);
		Иначе
			Результат.Вставить(ИмяКлюча, ПоказыватьПредупреждениеОбИзменениях);
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции

// Устарела. Необходимо использовать функцию БСП ОбщегоНазначения.ТекущаяДатаПользователя()
//
Функция ПолучитьРабочуюДату() Экспорт
	
	Возврат ОбщегоНазначения.ТекущаяДатаПользователя();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Замена ссылок по информационной базе

// Принимает Соответствие между замещаемыми ссылками и заменителями и заменяет ссылки по информационной базе
Процедура ЗаменитьСсылки(ПарыЗамен) Экспорт
	ДвиженияССубконтоИмя = ?(Метаданные.ВариантВстроенногоЯзыка = Метаданные.СвойстваОбъектов.ВариантВстроенногоЯзыка.Английский,
		".RecordsWithExtDimensions", ".ДвиженияССубконто");
	
	ЗаменяемыеСсылки = Новый Массив;
	Для Каждого Пара Из ПарыЗамен Цикл
		ЗаменяемыеСсылки.Добавить(Пара.Ключ);
	КонецЦикла;
	РезультатыПоиска = НайтиПоСсылкам(ЗаменяемыеСсылки);
	// (.Ссылка: исходная ссылка; .Данные: ссылающийся объект; .Метаданные: метаданные ссылающегося объекта)
	КешПолей = Новый Соответствие;
 	Для Каждого Результат Из РезультатыПоиска Цикл
		Замещаемое = Результат.Ссылка;
		// объект, ссылающийся сам на себя не трогаем!
		Если Замещаемое = Результат.Данные Тогда
			Продолжить;
		КонецЕсли;
		
		ТипЗамещаемого = ТипЗнч(Замещаемое);
		Заменитель = ПарыЗамен[Результат.Ссылка];		
		
		Если ЭтоСсылочныйОбъектМетаданных(Результат.Метаданные) Тогда
			// обработка самого объекта
			ОбъектДанных = Результат.Данные.ПолучитьОбъект();
			ИменаПолей = ИменаПолейСТипом(Результат.Метаданные.ПолноеИмя(), ТипЗамещаемого, КешПолей, "Ссылка, Ref");
			ЗаменитьЗначение(ОбъектДанных, ИменаПолей, Замещаемое, Заменитель);
			// обработка табчастей объекта
			Для Каждого Табчасть Из Результат.Метаданные.ТабличныеЧасти Цикл
				ИменаПолей = ИменаПолейСТипом(Результат.Метаданные.ПолноеИмя()+"."+Табчасть.Имя, ТипЗамещаемого, КешПолей, "Ссылка, Ref");
				Для Каждого Табстрока Из ОбъектДанных[Табчасть.Имя] Цикл
					ЗаменитьЗначение(Табстрока, ИменаПолей, Замещаемое, Заменитель);
				КонецЦикла;
			КонецЦикла;
			// обработка стандартных табчастей объекта
			Если Метаданные.ПланыСчетов.Содержит(Результат.Метаданные) Или Метаданные.ПланыВидовРасчета.Содержит(Результат.Метаданные) Тогда
				Для Каждого Табчасть Из Результат.Метаданные.СтандартныеТабличныеЧасти Цикл
					ИменаПолей = ИменаПолейСТипом(Результат.Метаданные.ПолноеИмя()+"."+Табчасть.Имя, ТипЗамещаемого, КешПолей, "Ссылка, Ref");
					Для Каждого Табстрока Из ОбъектДанных[Табчасть.Имя] Цикл
						ЗаменитьЗначение(Табстрока, ИменаПолей, Замещаемое, Заменитель);
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			ЗаписатьДанные(ОбъектДанных);
			ОбъектДанных = Неопределено;
			// обработка движений документа
			Если Метаданные.Документы.Содержит(Результат.Метаданные) Тогда
				Для Каждого Движение Из Результат.Метаданные.Движения Цикл
					Если Метаданные.РегистрыБухгалтерии.Содержит(Движение) Тогда
						ДопТаблица = ДвиженияССубконтоИмя;
						Регистр = РегистрыБухгалтерии[Движение.Имя];
						ИменаПолей = ИменаПолейСТипом(Движение.ПолноеИмя(), ТипЗамещаемого, КешПолей, "Регистратор, Recorder");
						Набор = НаборЗаписей(Регистр, Новый Структура("Регистратор", Результат.Данные));
						ЗначениеЗаменено = Ложь;
						Для Каждого Запись Из Набор Цикл
							ЗаменитьЗначение(Запись, ИменаПолей, Замещаемое, Заменитель, ЗначениеЗаменено);
							ЗаменыЗначенийСубконто = Новый Соответствие();
							Для Каждого Субконто ИЗ Запись.СубконтоДт Цикл
								Если Субконто.Значение = Замещаемое Тогда
									ЗаменыЗначенийСубконто.Вставить(Субконто.Ключ, Заменитель);
								КонецЕсли;
							КонецЦикла;
							Для Каждого Замена Из ЗаменыЗначенийСубконто Цикл
								Запись.СубконтоДт.Вставить(Замена.Ключ, Замена.Значение);
							КонецЦикла;
							ЗаменыЗначенийСубконто.Очистить();
							Для Каждого Субконто ИЗ Запись.СубконтоКт Цикл
								Если Субконто.Значение = Замещаемое Тогда
									ЗаменыЗначенийСубконто.Вставить(Субконто.Ключ, Заменитель);
								КонецЕсли;
							КонецЦикла;
							Для Каждого Замена Из ЗаменыЗначенийСубконто Цикл
								Запись.СубконтоКт.Вставить(Замена.Ключ, Замена.Значение);
							КонецЦикла;
						КонецЦикла;
						
						ЗаписатьДанные(Набор, ЗначениеЗаменено);
						
					Иначе
						Если Метаданные.РегистрыНакопления.Содержит(Движение) Тогда
							Регистр = РегистрыНакопления[Движение.Имя];
						ИначеЕсли Метаданные.РегистрыСведений.Содержит(Движение) Тогда
							Регистр = РегистрыСведений[Движение.Имя];
						ИначеЕсли Метаданные.РегистрыРасчета.Содержит(Движение) Тогда
							Регистр = РегистрыРасчета[Движение.Имя];
						КонецЕсли;
						ИменаПолей = ИменаПолейСТипом(Движение.ПолноеИмя(), ТипЗамещаемого, КешПолей, "Регистратор, Recorder");
						Набор = НаборЗаписей(Регистр, Новый Структура("Регистратор", Результат.Данные));
						ЗначениеЗаменено = Ложь;
						Для Каждого Запись Из Набор Цикл
							ЗаменитьЗначение(Запись, ИменаПолей, Замещаемое, Заменитель, ЗначениеЗаменено);
						КонецЦикла;
						ЗаписатьДанные(Набор, ЗначениеЗаменено);
					КонецЕсли;
				КонецЦикла;
				// обработка последовательностей, включающих документ
				Для Каждого Последовательность Из Метаданные.Последовательности Цикл
					Если Последовательность.Документы.Содержит(Результат.Метаданные) Тогда
						ИменаПолей = ИменаПолейСТипом(Последовательность.ПолноеИмя(), ТипЗамещаемого, КешПолей, "Регистратор, Recorder");
						Набор = НаборЗаписей(Последовательности[Последовательность.Имя], Новый Структура("Регистратор", Результат.Данные));
						Для Каждого Запись Из Набор Цикл
							ЗаменитьЗначение(Запись, ИменаПолей, Замещаемое, Заменитель);
						КонецЦикла;
						ЗаписатьДанные(Набор);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		// константы
		ИначеЕсли Метаданные.Константы.Содержит(Результат.Метаданные) Тогда
			Константы[Результат.Метаданные.Имя].Установить(Заменитель);
		// регистры сведений (необъектные таблицы)
		ИначеЕсли Метаданные.РегистрыСведений.Содержит(Результат.Метаданные) Тогда
			ИменаПолей = ИменаПолейСТипом(Результат.Метаданные.ПолноеИмя(), ТипЗамещаемого, КешПолей);
			Отборы = ОтборыРегистраСведений(Результат.Метаданные, Результат.Данные);
			Набор = НаборЗаписей(РегистрыСведений[Результат.Метаданные.Имя], Отборы);
			
			Таблица = Набор.Выгрузить();
			Набор.Очистить();
			ЗаписатьДанные(Набор);

			ЗаменитьЗначение(Таблица[0], ИменаПолей, Замещаемое, Заменитель);
			Для Каждого ИмяПоля Из ИменаПолей Цикл
				Если Отборы.Свойство(ИмяПоля) И Отборы[ИмяПоля] = Замещаемое Тогда
					Набор.Отбор[ИмяПоля].Установить(Заменитель);
				КонецЕсли
			КонецЦикла;
			Набор.Загрузить(Таблица);
			ЗаписатьДанные(Набор);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ИменаПолейСТипом(ИмяТаблицы, ТипДанных, КешПолейТаблиц=Неопределено, СтрокаИсключений=Неопределено)
	ИменаПолей = Новый Массив;
	
	ТекстЗапроса = СтрЗаменить("ВЫБРАТЬ Т.* ИЗ ТаблицаВыборки КАК Т ГДЕ Ложь", "ТаблицаВыборки", ИмяТаблицы);
	Если Неопределено<>КешПолейТаблиц Тогда
		ПоляТаблицы = КешПолейТаблиц.Получить(ИмяТаблицы);
		Если Неопределено=ПоляТаблицы Тогда
			Запрос = Новый Запрос(ТекстЗапроса);
			ПоляТаблицы = Запрос.Выполнить().Колонки;
			КешПолейТаблиц.Вставить(ИмяТаблицы, ПоляТаблицы);
		КонецЕсли;
	Иначе
		Запрос = Новый Запрос(ТекстЗапроса);
		ПоляТаблицы = Запрос.Выполнить().Колонки;
	КонецЕсли;
	
	Исключения = Новый Структура(СтрокаИсключений);
	Для Каждого Поле Из ПоляТаблицы Цикл
		Если Поле.ТипЗначения.СодержитТип(ТипДанных) И Не Исключения.Свойство(Поле.Имя) Тогда
			ИменаПолей.Добавить(Поле.Имя);
		КонецЕсли;
	КонецЦикла;
	
    Возврат ИменаПолей;
КонецФункции

Процедура ЗаменитьЗначение(Данные, ИменаПолей, Замещаемое, Заменитель, ЗначениеЗаменено=Ложь)
	Для Каждого ИмяПоля Из ИменаПолей Цикл
		Если Данные[ИмяПоля] = Замещаемое Тогда
			Данные[ИмяПоля] = Заменитель;
			ЗначениеЗаменено = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаписатьДанные(Данные, Принудительно=Ложь)
	Если Данные.Модифицированность() Или Принудительно Тогда
		Данные.ОбменДанными.Загрузка = Истина;
		Данные.Записать();
	КонецЕсли;
КонецПроцедуры

Функция ОтборыРегистраСведений(МетаданныеРегистра, Запись)
	Отборы = Новый Структура;
	Если МетаданныеРегистра.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
		Отборы.Вставить("Период", Запись.Период);
	КонецЕсли;
	Для Каждого Измерение Из МетаданныеРегистра.Измерения Цикл
		Отборы.Вставить(Измерение.Имя, Запись[Измерение.Имя]);
	КонецЦикла;
	Возврат Отборы;
КонецФункции

Функция НаборЗаписей(МенеджерРегистра, Отборы)
	Набор = МенеджерРегистра.СоздатьНаборЗаписей();
	Для Каждого Отбор Из Отборы Цикл
		Набор.Отбор[Отбор.Ключ].Установить(Отбор.Значение);
	КонецЦикла;
	Набор.Прочитать();
	Возврат Набор;
КонецФункции

Функция ЭтоСсылочныйОбъектМетаданных(ОбъектМетаданных)
	Возврат Метаданные.Справочники.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.Документы.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.Перечисления.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.ПланыВидовРасчета.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.БизнесПроцессы.Содержит(ОбъектМетаданных)
		//ИЛИ БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().СодержитТип(Тип)
		ИЛИ Метаданные.Задачи.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.ПланыОбмена.Содержит(ОбъектМетаданных);
КонецФункции

// Заменяет отбор, установленный пользователем в сохраненной настройке списка, на отбор, установленный программно при создании формы списка.
// Вызывается при восстановлении пользовательских настроек динамического списка
// из обработчика списка ПередЗагрузкойПользовательскихНастроекНаСервере.
//
// Параметры
//  Список      - ДинамическийСписок
//  Настройки   - ПользовательскиеНастройкиКомпоновкиДанных - восстанавливаемые настройки списка
//  ИмяОтбора   - Строка - имя элемента отбора
//
Процедура ВосстановитьОтборСписка(Список, Настройки, ИмяОтбора) Экспорт

	Отборы = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(
		Список.КомпоновщикНастроек.Настройки.Отбор, ИмяОтбора);
	
	Если Отборы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементОтбора = Отборы[0];
	ИдентификаторНастройки = ЭлементОтбора.ИдентификаторПользовательскойНастройки;
	
	Для каждого ЭлементНастроек Из Настройки.Элементы Цикл
		Если ТипЗнч(ЭлементНастроек) = Тип("ЭлементОтбораКомпоновкиДанных") 
			И ЭлементНастроек.ИдентификаторПользовательскойНастройки = ИдентификаторНастройки Тогда
			ЭлементНастроек.ПравоеЗначение = ЭлементОтбора.ПравоеЗначение;
			ЭлементНастроек.Использование  = ЭлементОтбора.Использование;
			Прервать;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С СОХРАНЕНИЕМ И ОТПРАВКОЙ ДОКУМЕНТОВ ПО ЭЛ.ПОЧТЕ

// Процедура формирует имя сохраняемого файла путем формирования представления документа и удаления из него символов "точка"
Процедура УстановитьИмяСохраняемогоФайла(ОбъектыПечати, КоллекцияПечатныхФорм)
	
	Если ОбъектыПечати.Количество() = 1 Тогда
	
		Для каждого ПечатнаяФорма Из КоллекцияПечатныхФорм Цикл
			
			ПредставлениеДокументаДляПечатнойФормы = ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(
				ОбъектыПечати[0].Значение, ПечатнаяФорма.СинонимМакета);
			ПечатнаяФорма.ИмяФайлаПечатнойФормы = СтрЗаменить(ПредставлениеДокументаДляПечатнойФормы, ".", "");
		
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает имя сохраняемого файла, заполняет заголовок, текст и получателей письма
Процедура ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати,
			ПараметрыВывода = Неопределено) Экспорт
	
	УстановитьИмяСохраняемогоФайла(ОбъектыПечати, КоллекцияПечатныхФорм);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ СО СТАТУСОМ ДОКУМЕНТОВ

// Позволяет получить индекс картинки состояния документа из коллекции СостоянияДокумента
// по свойствам Проведен/ПометкаУдаления/РучнаяКорректировка
//
// Параметры:
// Объект - основной реквизит формы документа, с типом ДанныеФормыСтруктура
//
Функция СостояниеДокумента(Объект) Экспорт
	
	РучнаяКорректировка = Неопределено;
	
	Если Объект.Свойство("РучнаяКорректировка", РучнаяКорректировка) Тогда
		Если Объект.РучнаяКорректировка Тогда
			Если Объект.ПометкаУдаления Тогда
				СостояниеДокумента = 10;
			ИначеЕсли НЕ Объект.Проведен Тогда
				СостояниеДокумента = 9;
			Иначе
				СостояниеДокумента = 8;
			КонецЕсли;
		Иначе
			Если Объект.ПометкаУдаления Тогда
				СостояниеДокумента = 2;
			ИначеЕсли Объект.Проведен Тогда
				СостояниеДокумента = 1;
			Иначе
				СостояниеДокумента = 0;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если Объект.ПометкаУдаления Тогда
			СостояниеДокумента = 2;
		ИначеЕсли Объект.Проведен Тогда
			СостояниеДокумента = 1;
		Иначе
			СостояниеДокумента = 0;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СостояниеДокумента;
	
КонецФункции

#Область УстаревшийПрограммныйИнтерфейс

// Устарела. Следует использовать ОбщегоНазначения.ЕстьРеквизитОбъекта
// Позволяет определить есть ли среди реквизитов шапки документа
// реквизит с переданным именем.
//
// Параметры:
//  ИмяРеквизита - строковое имя искомого реквизита,
//  МетаданныеДокумента - объект описания метаданных документа, среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция ЕстьРеквизитДокумента(ИмяРеквизита, МетаданныеДокумента) Экспорт

	Возврат НЕ (МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) = Неопределено);

КонецФункции // ЕстьРеквизитДокумента()

#КонецОбласти


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ПЛАНАМИ ОБМЕНА

// Проверяет, используются ли планы обмена.
// Параметры:
//  ОтборРаспределеннаяИнформационнаяБаза - <Булево> - Если Истина, то проверяются
//  только распределенные информационные базы, если Ложь, то обмены с другими
//  программами.
Функция ИспользуютсяПланыОбмена(ОтборРаспределеннаяИнформационнаяБаза) Экспорт
      
     Результат = Ложь; 
      
     ПланыОбменаПодсистемы = Новый Массив; 
     ОбменДаннымиПереопределяемый.ПолучитьПланыОбмена(ПланыОбменаПодсистемы); 
	 
	 Для каждого ПланОбмена Из ПланыОбменаПодсистемы Цикл 
		 
		Если ПланОбмена.РаспределеннаяИнформационнаяБаза <> ОтборРаспределеннаяИнформационнаяБаза Тогда 
			Продолжить; 
		КонецЕсли; 
		   
		Запрос = Новый Запрос; 
		ТекстЗапроса =  
		"ВЫБРАТЬ 
		|     ПроверяемыйПланОбмена.Ссылка 
		|ИЗ 
		|     ПланОбмена.%1 КАК ПроверяемыйПланОбмена 
		|ГДЕ 
		|     ПроверяемыйПланОбмена.ПометкаУдаления = ЛОЖЬ И ПроверяемыйПланОбмена.ЭтотУзел = Ложь"; 

		ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, ПланОбмена.Имя); 
		Запрос.Текст = ТекстЗапроса; 
		РезультатЗапроса = Запрос.Выполнить(); 
		Если НЕ РезультатЗапроса.Пустой() Тогда 
		   Результат = Истина; 
		   Прервать; 
	   КонецЕсли; 
	   
     КонецЦикла; 
      
	Возврат Результат;    
	
КонецФункции
