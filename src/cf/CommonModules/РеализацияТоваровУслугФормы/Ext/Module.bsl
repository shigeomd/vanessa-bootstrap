////////////////////////////////////////////////////////////////////////////////
// РеализацияТоваровУслугФормы: серверные процедуры и функции, вызываемые из форм
// документа "Реализация (акт, накладная)".
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт

	Элементы 	= Форма.Элементы;

	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(Форма, Элементы.ГруппаПечать);
	// Конец СтандартныеПодсистемы.Печать

	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(Форма, ДополнительныеОтчетыИОбработкиКлиентСервер.ТипФормыОбъекта());
	// Конец ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(Форма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Форма.Параметры.Ключ.Пустая() Тогда
		Форма.ПодготовитьФормуНаСервере();
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда 
		УстановитьОтветственногоПоСкладу(Форма);
	КонецЕсли;
	
	// Уведомим о появлении функционала рабочей даты
	Если Форма.РасчетыВУЕ Тогда
		
		Форма.НастройкиПредупреждений = ОбщегоНазначенияБП.НастройкиПредупрежденийОбИзменениях(
			"РабочаяДатаИзДокумента, УниверсальныеПередаточныйДокумент, ПереоценкаЗадолженностиПоДоговорамВУЕ2015");
			
	Иначе
			
		Форма.НастройкиПредупреждений = ОбщегоНазначенияБП.НастройкиПредупрежденийОбИзменениях(
			"РабочаяДатаИзДокумента, УниверсальныеПередаточныйДокумент");
		
	КонецЕсли;	
	
	// Показываем, если это новый документ и сама рабочая дата еще не установлена.
	Форма.НастройкиПредупреждений.РабочаяДатаИзДокумента = Форма.НастройкиПредупреждений.РабочаяДатаИзДокумента
		И Форма.Параметры.Ключ.Пустая()
		И НЕ ЗначениеЗаполнено(ОбщегоНазначения.РабочаяДатаПользователя());
		
	// Заполнение группы информационных ссылок
	ИнформационныйЦентрСервер.ВывестиКонтекстныеСсылки(Форма, Элементы.ИнформационныеСсылки);
	
	// Если форма вызвана в режиме смена вида операции - модифицируем сразу при открытии, 
	// чтобы можно было подтвердить или отказаться от изменения путем сохранения или 
	// отказа от сохранения документа.
	Если Форма.Параметры.Свойство("ИзменитьВидОперации")
		И Форма.Параметры.ИзменитьВидОперации Тогда
		
		// Не кэшируем переменную Объект, т.к. может вызываться Форма.ИзменитьРеквизиты(),
		// которая меняет Объект.
		Форма.Объект.ВидОперации = Форма.Параметры.ЗначенияЗаполнения.ВидОперации;
		ВидОперацииОбработатьИзменение(Форма, Новый Массив);
		РеализацияТоваровУслугФормыКлиентСервер.ЗаполнитьТекстПроСчетФактуру(Форма);
		УстановитьЗаголовокФормы(Форма);
		Форма.ОбновитьИтогиНаСервере();
		Форма.УправлениеФормойНаСервере();
		Форма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(Форма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	Форма.ПодготовитьФормуНаСервере();

КонецПроцедуры

Процедура ПослеЗаписиНаСервере(Форма, Объект, ПараметрыЗаписи) Экспорт
	
	Если ПараметрыЗаписи.Свойство("ВыписатьСчетФактуру") 
		И ПараметрыЗаписи.ВыписатьСчетФактуру Тогда 
		
		Результат = УчетНДСВызовСервера.СоздатьСчетФактуруВыданныйНаОсновании(Объект.Ссылка);
		
		РеализацияТоваровУслугФормыКлиентСервер.ЗаполнитьТекстПроСчетФактуру(Форма, Результат);
			
		Форма.УправлениеФормойНаСервере();
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		Ценообразование.ОбновитьЦеныНоменклатуры(Объект.Ссылка, 
			Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам,
			Объект.ВалютаДокумента,
			Объект.СуммаВключаетНДС);
	КонецЕсли;
	
	УстановитьПорядокУчетаРасчетов(Форма);
	
КонецПроцедуры

// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

Процедура ДатаПриИзменении(Форма) Экспорт
	
	ДатаОбработатьИзменение(Форма);
	Форма.УправлениеФормойНаСервере();
	
КонецПроцедуры

Процедура ОрганизацияПриИзменении(Форма) Экспорт

	ОрганизацияОбработатьИзменение(Форма, Новый Массив);
	Форма.УправлениеФормойНаСервере();
	
КонецПроцедуры

Процедура КонтрагентПриИзменении(Форма) Экспорт
	
	КонтрагентОбработатьИзменение(Форма, Новый Массив);
	РеализацияТоваровУслугФормыКлиентСервер.ЗаполнитьТекстПроСчетФактуру(Форма);
	Форма.УправлениеФормойНаСервере();
	
КонецПроцедуры

Процедура ДоговорКонтрагентаПриИзменении(Форма) Экспорт
	
	ДоговорКонтрагентаОбработатьИзменение(Форма, Новый Массив);
	
	РеализацияТоваровУслугФормыКлиентСервер.ЗаполнитьТекстПроСчетФактуру(Форма);
	
	Форма.УправлениеФормойНаСервере();
	
КонецПроцедуры

Процедура СкладПриИзменении(Форма) Экспорт

	Объект = Форма.Объект;

	Объект.ПодразделениеОрганизации = ОбщегоНазначенияБПВызовСервера.ПолучитьПодразделение(Объект.Организация, Объект.Склад);
	УстановитьОтветственногоПоСкладу(Форма);
	
	ПричиныИзменений = Новый Массив;
	ПричиныИзменений.Добавить("Склад");
	ПричиныИзменений.Добавить("ПодразделениеОрганизации");
	
	ЗаполнитьСчетаУчета(Форма, ПричиныИзменений, "Склад");
	
КонецПроцедуры

// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Товары

Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта, Знач СчетаУчетаКЗаполнению) Экспорт
	
	Результат = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.РеализацияТоваровУслуг,
		СчетаУчетаКЗаполнению,
		ДанныеОбъекта,
		"Товары",
		СтрокаТабличнойЧасти);
		
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Результат);
		
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам);
	КонецЕсли;	

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта, Ложь);
	Если СведенияОНоменклатуре <> Неопределено Тогда
		
		СтрокаТабличнойЧасти.ЕдиницаИзмерения    = СведенияОНоменклатуре.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент         = СведенияОНоменклатуре.Коэффициент;
		СтрокаТабличнойЧасти.Цена                = СведенияОНоменклатуре.Цена;
		СтрокаТабличнойЧасти.СтавкаНДС           = СведенияОНоменклатуре.СтавкаНДС;
		СтрокаТабличнойЧасти.НомерГТД            = СведенияОНоменклатуре.НомерГТД;
		СтрокаТабличнойЧасти.СтранаПроисхождения = СведенияОНоменклатуре.СтранаПроисхождения;
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаОповещенияОбработкиТабличнойЧастиТовары(Форма, Параметры) Экспорт
	
	Объект = Форма.Объект;
	
	СтрокиДляДополнительнойОбработки = Обработки.ИзменениеТаблицыТоваров.ЗагрузитьТабличнуюЧастьВДанныеФормы(Объект.Товары, Параметры);
	
	СчетаУчетаВДокументах.ЗаполнитьСтроки(СтрокиДляДополнительнойОбработки, "Товары", Объект, Документы.РеализацияТоваровУслуг, Истина);
	
КонецПроцедуры

// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Услуги

Процедура УслугиНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта, Знач СчетаУчетаКЗаполнению) Экспорт
	
	Результат = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.РеализацияТоваровУслуг,
		СчетаУчетаКЗаполнению,
		ДанныеОбъекта,
		"Услуги",
		СтрокаТабличнойЧасти);
		
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Результат);
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам);
	КонецЕсли;	

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта, Ложь);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Содержание	= СведенияОНоменклатуре.НаименованиеПолное;
	СтрокаТабличнойЧасти.Цена			= СведенияОНоменклатуре.Цена;
	СтрокаТабличнойЧасти.СтавкаНДС		= СведенияОНоменклатуре.СтавкаНДС;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, 1);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);

КонецПроцедуры

// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМ ДОКУМЕНТА РеализацияТоваровУслуг

Процедура ЗаполнитьСписокВыбораПатента(Форма) Экспорт

	Объект 		= Форма.Объект;
	Элементы 	= Форма.Элементы;

	Если Форма.ПрименяетсяУСНПатент Тогда
		МассивПатентовОрганизации	= Справочники.Патенты.ПолучитьПатентыОрганизации(Объект.Организация, Объект.Дата);
		Элементы.Патент.СписокВыбора.ЗагрузитьЗначения(МассивПатентовОрганизации);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСписокАдресовДоставки(Форма, Контрагент, Грузополучатель) Экспорт

	Элементы = Форма.Элементы;

	Элементы.АдресДоставки.СписокВыбора.Очистить();
	СписокАдресов = СписокАдресовДоставки(Контрагент, Грузополучатель);
	
	Для каждого Адрес Из СписокАдресов Цикл
		Элементы.АдресДоставки.СписокВыбора.Добавить(Адрес.Значение, Адрес.Представление);
	КонецЦикла;

КонецПроцедуры 

Процедура ЗаполнитьРассчитатьСуммы(Форма, 
			Знач ВалютаДоИзменения, 
			КурсДоИзменения, 
			КратностьДоИзменения, 
			ПерезаполнитьЦены = Ложь, 
			ПересчитатьЦены = Ложь, 
			ПересчитатьНДС = Ложь) Экспорт
	
	Объект = Форма.Объект;
	
	ТаблицаЦенНоменклатуры = Неопределено;
	
	Если ПерезаполнитьЦены Тогда 
		
		СписокНоменклатуры	= Новый Массив;
		
		Если Объект.Свойство("Товары") Тогда
			ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(СписокНоменклатуры,
			ОбщегоНазначения.ВыгрузитьКолонку(Объект.Товары, "Номенклатура"));
		КонецЕсли;
		
		Если Объект.Свойство("Услуги") Тогда
			ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(СписокНоменклатуры,
			ОбщегоНазначения.ВыгрузитьКолонку(Объект.Услуги, "Номенклатура"));
		КонецЕсли;
		
		Если Объект.Свойство("ВозвратнаяТара") Тогда
			ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(СписокНоменклатуры,
			ОбщегоНазначения.ВыгрузитьКолонку(Объект.ВозвратнаяТара, "Номенклатура"));
		КонецЕсли;
		
		Если Объект.Свойство("АгентскиеУслуги") Тогда
			ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(СписокНоменклатуры,
			ОбщегоНазначения.ВыгрузитьКолонку(Объект.АгентскиеУслуги, "Номенклатура"));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
			ТаблицаЦенНоменклатуры = Ценообразование.ПолучитьТаблицуЦенНоменклатуры(
			СписокНоменклатуры,
			Объект.ТипЦен,
			Объект.Дата);
		КонецЕсли;
		
	ИначеЕсли ПересчитатьЦены Тогда
		
		Если КурсДоИзменения <> 0 И КратностьДоИзменения <> 0 Тогда
			СтруктураКурса = Новый Структура("Курс, Кратность", КурсДоИзменения, КратностьДоИзменения);
		Иначе
			СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДоИзменения, Объект.Дата);
		КонецЕсли;
		
	КонецЕсли;

	Если Объект.Свойство("Товары") Тогда
		Для Каждого Строка Из Объект.Товары Цикл
			ЗаполнитьРассчитатьСуммыВСтроке(
				Форма, Строка, ТаблицаЦенНоменклатуры, ВалютаДоИзменения, СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, Истина, 0, Объект.ДокументБезНДС);
		КонецЦикла;
	КонецЕсли;
	
	Если Объект.Свойство("ВозвратнаяТара") Тогда
		Для Каждого Строка Из Объект.ВозвратнаяТара Цикл
			ЗаполнитьРассчитатьСуммыВСтроке(
				Форма, Строка, ТаблицаЦенНоменклатуры, ВалютаДоИзменения, СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, Ложь, 0, Объект.ДокументБезНДС);
		КонецЦикла;
	КонецЕсли;
	
	Если Объект.Свойство("Услуги") Тогда
		Для Каждого Строка Из Объект.Услуги Цикл
			ЗаполнитьРассчитатьСуммыВСтроке(
				Форма, Строка, ТаблицаЦенНоменклатуры, ВалютаДоИзменения, СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, Истина, 1, Объект.ДокументБезНДС);
		КонецЦикла;
	КонецЕсли;
	
	Если Объект.Свойство("АгентскиеУслуги") Тогда
		Для Каждого Строка Из Объект.АгентскиеУслуги Цикл
			ЗаполнитьРассчитатьСуммыВСтроке(
				Форма, Строка, ТаблицаЦенНоменклатуры, ВалютаДоИзменения, СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, Истина, 1, Объект.ДокументБезНДС);
		КонецЦикла;
	КонецЕсли;
	
	Форма.ЗаполнитьДобавленныеКолонкиТаблиц();
	
	Форма.ОбновитьИтогиНаСервере();
	
КонецПроцедуры

Функция ОбработкаВыбораПодбор(Форма, ВыбранноеЗначение, ИмяТаблицы) Экспорт
	
	Объект = Форма.Объект;
	ЭтоКомиссия = РеализацияТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "ЭтоКомиссия");

	ДобавленныеИзмененныеСтроки = Новый Структура;
	ДобавленныеИзмененныеСтроки.Вставить("Товары", 		Новый Массив());
	ДобавленныеИзмененныеСтроки.Вставить("Услуги", 		Новый Массив());
	ДобавленныеИзмененныеСтроки.Вставить("ВозвратнаяТара",Новый Массив());

	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, ДеятельностьНаПатенте, Склад, ЭтоКомиссия, Реализация");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.ЭтоКомиссия = ЭтоКомиссия;
	ДанныеОбъекта.Реализация  = Истина;
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта, Ложь, Ложь);
	
	Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		ЦенаВключаетНДС	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТипЦен, "ЦенаВключаетНДС");
	Иначе
		ЦенаВключаетНДС	= Объект.СуммаВключаетНДС;
	КонецЕсли;
	
	СтрокиДляЗаполненияСчетов = Новый Массив;
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СтруктураОтбора = Новый Структура("Номенклатура, Цена", СтрокаТовара.Номенклатура, СтрокаТовара.Цена);
		СтрокаТабличнойЧасти = НайтиСтрокуТабличнойЧасти(Форма, ИмяТаблицы, СтруктураОтбора);
		
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			// Нашли - увеличиваем количество.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
			
			Если ИмяТаблицы = "Товары" Тогда
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
				
			ИначеЕсли ИмяТаблицы = "Услуги" Тогда
				// Рассчитываем реквизиты табличной части
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
				
			ИначеЕсли ИмяТаблицы = "ВозвратнаяТара" Тогда
				// Рассчитываем реквизиты табличной части
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
			КонецЕсли;
			
		Иначе
			
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара);
			
			СтрокиДляЗаполненияСчетов.Добавить(СтрокаТабличнойЧасти);
			
			СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовара.Номенклатура);
			Если СведенияОНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ИмяТаблицы = "Товары" Тогда
				
				// Заполняем реквизиты табличной части
				СтрокаТабличнойЧасти.ЕдиницаИзмерения    = СведенияОНоменклатуре.ЕдиницаИзмерения;
				СтрокаТабличнойЧасти.Коэффициент         = СведенияОНоменклатуре.Коэффициент;
				СтрокаТабличнойЧасти.СтавкаНДС           = СведенияОНоменклатуре.СтавкаНДС;
				СтрокаТабличнойЧасти.НомерГТД            = СведенияОНоменклатуре.НомерГТД;
				СтрокаТабличнойЧасти.СтранаПроисхождения = СведенияОНоменклатуре.СтранаПроисхождения;
				
				СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				СтрокаТабличнойЧасти.Цена, ЦенаВключаетНДС, Объект.СуммаВключаетНДС,
				УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
				
				// Рассчитываем реквизиты табличной части
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
				
			ИначеЕсли ИмяТаблицы = "Услуги" Тогда
				
				// Заполняем реквизиты табличной части
				СтрокаТабличнойЧасти.Содержание	= СведенияОНоменклатуре.НаименованиеПолное;
				СтрокаТабличнойЧасти.СтавкаНДС	= СведенияОНоменклатуре.СтавкаНДС;
				
				СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				СтрокаТабличнойЧасти.Цена, ЦенаВключаетНДС, Объект.СуммаВключаетНДС,
				УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
				
				// Рассчитываем реквизиты табличной части
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
				
			ИначеЕсли ИмяТаблицы = "ВозвратнаяТара" Тогда
				
				СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				СтрокаТабличнойЧасти.Цена, ЦенаВключаетНДС, Истина,
				УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СведенияОНоменклатуре.СтавкаНДС));
				
				// Рассчитываем реквизиты табличной части
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				
			КонецЕсли;
		КонецЕсли;
		
		ДобавленныеИзмененныеСтроки[ИмяТаблицы].Добавить(СтрокаТабличнойЧасти);
		
	КонецЦикла;
	
	// Заполнение счетов учета
	СчетаУчетаВДокументах.ЗаполнитьСтроки(СтрокиДляЗаполненияСчетов, ИмяТаблицы, Объект, Документы.РеализацияТоваровУслуг);
	
	Возврат ДобавленныеИзмененныеСтроки;
	
КонецФункции

Процедура УстановитьПорядокУчетаРасчетов(Форма) Экспорт
	
	ОсобенностиУчетаРасчетов = Документы.РеализацияТоваровУслуг.ОсобенностиУчетаРасчетов(
		Форма.Объект.ВидОперации,
		Форма.Объект.ДоговорКонтрагента);
		
	УчетВзаиморасчетовФормы.УстановитьПорядокУчетаРасчетов(Форма, ОсобенностиУчетаРасчетов);

КонецПроцедуры

Процедура ОбработкаВыбораПорядокУчетаРасчетов(Форма, ВыбранноеЗначение) Экспорт

	УчетВзаиморасчетовФормы.ОбработкаВыбораПорядокУчетаРасчетов(Форма, ВыбранноеЗначение);
	УстановитьПорядокУчетаРасчетов(Форма);

КонецПроцедуры

Процедура ОбработкаЗаполненияПоСчету(Форма, ВыбранноеЗначение, ТабличнаяЧасть) Экспорт

	Объект = Форма.Объект;

	// Заполняем полностью весь документ по счету на оплату
	РеквизитыСчетаНаОплату = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ВыбранноеЗначение, "Контрагент, ДоговорКонтрагента");

	Объект.СчетНаОплатуПокупателю 	= ВыбранноеЗначение;
	Объект.Контрагент 				= РеквизитыСчетаНаОплату.Контрагент;
	Объект.ДоговорКонтрагента 		= РеквизитыСчетаНаОплату.ДоговорКонтрагента;
	
	ПричиныИзмененияСчетовУчета = Новый Массив;
	ПричиныИзмененияСчетовУчета.Добавить("СчетНаОплатуПокупателю"); // В результате в обработчиках изменения контрагента и договора счета учета заполнены не будут
	
	КонтрагентОбработатьИзменение(Форма, ПричиныИзмененияСчетовУчета);
	ДоговорКонтрагентаОбработатьИзменение(Форма, ПричиныИзмененияСчетовУчета);

	ДокументОбъект = Форма.РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьПоСчету(ТабличнаяЧасть, ВыбранноеЗначение);// Счета учета заполняются здесь
	Форма.ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");

КонецПроцедуры

Процедура УстановитьПараметрыВыбора(Форма) Экспорт

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	МассивВидовДоговоров = Новый ФиксированныйМассив(Форма.ПолучитьМассивВидовДоговоров());
	НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидДоговора", МассивВидовДоговоров);
	НовыйМассивПараметров = Новый Массив();
	НовыйМассивПараметров.Добавить(НовыйПараметр);

	НовыеПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	Элементы.ДоговорКонтрагента.ПараметрыВыбора = НовыеПараметрыВыбора;

КонецПроцедуры

Процедура УстановитьЗаголовокФормы(Форма) Экспорт
	
	Объект = Форма.Объект;

	ТекстЗаголовка	= НСтр("ru = 'Реализация'");
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Товары Тогда
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru = ' товаров: Накладная'");
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Услуги Тогда
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru = ' услуг: Акт'");
	Иначе
		ТекстЗаголовка = ТекстЗаголовка + ": " + Строка(Объект.ВидОперации);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстЗаголовка = ТекстЗаголовка + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru=' %1 от %2'"), Объект.Номер, Объект.Дата);
	Иначе
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru = ' (создание)'");
	КонецЕсли;
	
	Форма.Заголовок = ТекстЗаголовка;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ВидОперацииОбработатьИзменение(Форма, ПричиныИзмененияСчетовУчета)
	
	Объект = Форма.Объект;
	Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	ПричиныИзмененияСчетовУчета.Добавить("ВидОперации");
	
	ЭтоКомиссия = РеализацияТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "ЭтоКомиссия");
	
	Если НЕ Объект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия
		И НЕ Объект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Товары
		И НЕ Объект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Услуги Тогда
		Объект.ДеятельностьНаПатенте = Ложь;
		Объект.Патент				 = Неопределено;
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности Тогда
		
		Объект.Услуги.Очистить();
		Объект.АгентскиеУслуги.Очистить();
	
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование Тогда
		
		Для каждого СтрокаТовара Из Объект.Товары Цикл
			СтрокаТовара.НомерГТД = Справочники.НомераГТД.ПустаяСсылка();
			СтрокаТовара.СтранаПроисхождения = Справочники.СтраныМира.ПустаяСсылка();
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.Контрагент) Тогда
		БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(Объект.ДоговорКонтрагента,
			Объект.Контрагент, Объект.Организация, Форма.ПолучитьМассивВидовДоговоров());
	КонецЕсли;
	
	ДоговорУказан = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	
	ЭтоОтгрузка   = Объект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности;
	
	Если ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		ДоговорКонтрагентаОбработатьИзменение(Форма, ПричиныИзмененияСчетовУчета);
		ЭтоКомиссия = РеализацияТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "ЭтоКомиссия");
	КонецЕсли;
	
	ЗаполнитьСчетаУчета(Форма, ПричиныИзмененияСчетовУчета, "ВидОперации");
	
	УстановитьПараметрыВыбора(Форма);
	
	Если ЭтоОтгрузка Тогда
		Форма.ТребуетсяСчетФактура = УчетнаяПолитика.НачислятьНДСПоОтгрузке(Объект.Организация, Объект.Дата);
	Иначе
		Форма.ТребуетсяСчетФактура = ДоговорУказан И НЕ ЭтоКомиссия;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДатаОбработатьИзменение(Форма)

	Объект 		= Форма.Объект;
	Элементы 	= Форма.Элементы;

	Форма.УстановитьФункциональныеОпцииФормы();

	Если НЕ Форма.ПрименяетсяУСНПатент Тогда
		Объект.ДеятельностьНаПатенте	= Ложь;
		Объект.Патент	= Неопределено;
	КонецЕсли;
	
	Если (Объект.ВалютаДокумента <> Форма.ВалютаРегламентированногоУчета) Тогда
		СтруктураКурсаДокумента        = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	
	ЗаполнитьСписокВыбораПатента(Форма);
	Если ЗначениеЗаполнено(Объект.Патент) И Элементы.Патент.СписокВыбора.НайтиПоЗначению(Объект.Патент) = Неопределено Тогда
		Объект.Патент	= Неопределено;
	КонецЕсли;
	
	ОтветственныеЛицаБП.УстановитьОтветственныхЛиц(Объект);
	
	Если Форма.ПлательщикНДС Тогда 
		Объект.ДокументБезНДС	= Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОрганизацияОбработатьИзменение(Форма, ПричиныИзмененияСчетовУчета)

	Объект = Форма.Объект;
	ПричиныИзмененияСчетовУчета.Добавить("Организация");

	Форма.УстановитьФункциональныеОпцииФормы();
	
	ЗаполнитьЗначенияСвойств(Объект, НалоговыйУчетУСН.ДеятельностьНаПатентеПоУмолчанию(Объект.Организация, Объект.Дата));
	
	ПодразделениеПоУмолчанию = ОбщегоНазначенияБПВызовСервера.ПолучитьПодразделение(Объект.Организация, Объект.Склад);
	
	Если НЕ ЗначениеЗаполнено(ПодразделениеПоУмолчанию) Тогда
		ПодразделениеПоУмолчанию = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ПодразделениеОрганизации) 
		И БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ПодразделениеПоУмолчанию, Объект.Организация) Тогда
		Объект.ПодразделениеОрганизации = ПодразделениеПоУмолчанию;
	КонецЕсли;
	
	// В агентских услугах заполняем договор и счет расчетов
	МассивВидовАгентскихДоговоров = Новый Массив;
	МассивВидовАгентскихДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	
	Если Объект.Свойство("АгентскиеУслуги") Тогда
		Для Каждого СтрокаТаблицы Из Объект.АгентскиеУслуги Цикл
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.Контрагент) Тогда
				БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(
					СтрокаТаблицы.ДоговорКонтрагента, СтрокаТаблицы.Контрагент, Объект.Организация, МассивВидовАгентскихДоговоров);
			КонецЕсли;

		КонецЦикла;
	КонецЕсли;
	
	Если Форма.ПлательщикНДС Тогда 
		Объект.ДокументБезНДС	= Ложь;
	КонецЕсли;
	
	КонтрагентОбработатьИзменение(Форма, ПричиныИзмененияСчетовУчета);
	
	ЗаполнитьСписокВыбораПатента(Форма);
	
	ОтветственныеЛицаБП.УстановитьОтветственныхЛиц(Объект);
	
	Форма.ДатыИзмененияОтветственныхЛиц = Новый ФиксированныйМассив(
		ОтветственныеЛицаБППовтИсп.ДатыИзмененияОтветственныхЛицОрганизаций(Объект.Организация));
	
	ЗаполнитьСчетаУчета(Форма, ПричиныИзмененияСчетовУчета, "Организация");
	
КонецПроцедуры

Процедура КонтрагентОбработатьИзменение(Форма, ПричиныИзмененияСчетовУчета)
	
	Объект 		= Форма.Объект;
	Элементы 	= Форма.Элементы;

	ПричиныИзмененияСчетовУчета.Добавить("Контрагент");
	
	Если НЕ ЗначениеЗаполнено(Объект.Грузополучатель) Тогда
		Если Форма.Элементы.Найти("АдресДоставки") <> Неопределено Тогда
			ЗаполнитьСписокАдресовДоставки(Форма, Объект.Контрагент, Объект.Грузополучатель);
			СписокАдресов = Элементы.АдресДоставки.СписокВыбора;
		Иначе
			СписокАдресов = СписокАдресовДоставки(Объект.Контрагент, Объект.Грузополучатель);
		КонецЕсли;
		
		Если СписокАдресов.Количество() > 0 Тогда
			Объект.АдресДоставки = СписокАдресов[0].Значение;
		Иначе
			Объект.АдресДоставки = "";
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(
		Объект.ДоговорКонтрагента, Объект.Контрагент, Объект.Организация, 
		Форма.ПолучитьМассивВидовДоговоров());
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаОбработатьИзменение(Форма, ПричиныИзмененияСчетовУчета);
	КонецЕсли;
	
	ЗаполнитьСчетаУчета(Форма, ПричиныИзмененияСчетовУчета, "Контрагент");
	
КонецПроцедуры

Процедура ДоговорКонтрагентаОбработатьИзменение(Форма, ПричиныИзмененияСчетовУчета)
	
	Объект = Форма.Объект;

	ПричиныИзмененияСчетовУчета.Добавить("ДоговорКонтрагента");
	
	ВалютаДоИзменения = Объект.ВалютаДокумента;
	КурсДоИзменения   = Объект.КурсВзаиморасчетов;
	КратностьДоИзменения = Объект.КратностьВзаиморасчетов;
	ТипЦенДоИзменения = Объект.ТипЦен;
	СуммаВключаетНДСДоИзменения = Объект.СуммаВключаетНДС;
	
	ДоговорУказан     = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.ДоговорКонтрагента, "ВалютаВзаиморасчетов, Владелец, ТипЦен, ВидДоговора, РасчетыВУсловныхЕдиницах");
		
	Форма.РасчетыВУЕ = ДоговорУказан И РеквизитыДоговора.РасчетыВУсловныхЕдиницах;	
	
	Если ДоговорУказан Тогда
		Форма.ВалютаВзаиморасчетов = РеквизитыДоговора.ВалютаВзаиморасчетов;
		Объект.ВалютаДокумента     = Форма.ВалютаВзаиморасчетов;
		Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Объект.Контрагент = РеквизитыДоговора.Владелец;
		КонецЕсли;
	Иначе
		Объект.ВалютаДокумента     = Форма.ВалютаРегламентированногоУчета;
	КонецЕсли;
	
	Если ВалютаДоИзменения <> Объект.ВалютаДокумента Тогда
		СтруктураКурсаДокумента        = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	
	Если ДоговорУказан И ЗначениеЗаполнено(РеквизитыДоговора.ТипЦен) Тогда
		Объект.ТипЦен           = РеквизитыДоговора.ТипЦен;
		Объект.СуммаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыДоговора.ТипЦен, "ЦенаВключаетНДС");
	КонецЕсли;
	
	ПересчитатьЦены = Объект.ВалютаДокумента <> ВалютаДоИзменения
		ИЛИ Объект.КурсВзаиморасчетов <> КурсДоИзменения
		ИЛИ Объект.ТипЦен <> ТипЦенДоИзменения;
	ПересчитатьНДС = Объект.СуммаВключаетНДС <> СуммаВключаетНДСДоИзменения;
	Если ЕстьСтрокиВТабличныхЧастях(Форма) И (ПересчитатьЦены ИЛИ ПересчитатьНДС) Тогда
		ЗаполнитьРассчитатьСуммы(Форма, ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, Ложь, ПересчитатьЦены, ПересчитатьНДС);
	КонецЕсли;
	
	ЭтоКомиссия = ДоговорУказан И РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером;
	ЭтоОтгрузка = Объект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности;
	РеализацияТоваровУслугФормыКлиентСервер.УстановитьРеквизитФормы(Форма, "ЭтоКомиссия", ЭтоКомиссия);
	РеализацияТоваровУслугФормыКлиентСервер.УстановитьРеквизитФормы(Форма, "ЭтоОтгрузка", ЭтоОтгрузка);
	
	Если ЭтоОтгрузка Тогда
		Форма.ТребуетсяСчетФактура = УчетнаяПолитика.НачислятьНДСПоОтгрузке(Объект.Организация, Объект.Дата);
	Иначе
		Форма.ТребуетсяСчетФактура = ДоговорУказан И НЕ ЭтоКомиссия;
	КонецЕсли;
	
	Если ЭтоКомиссия Тогда
		Объект.ДеятельностьНаПатенте = Ложь;
		Объект.Патент = Неопределено;
		
		Если Объект.Свойство("Услуги") Тогда
			Если Объект.Услуги.Количество() > 0 Тогда
				Объект.Услуги.Очистить(); // На комиссию передать услуги нельзя
			КонецЕсли;
		КонецЕсли;
		
		Если Объект.Свойство("АгентскиеУслуги") Тогда
			Если Объект.АгентскиеУслуги.Количество() > 0 Тогда
				Объект.АгентскиеУслуги.Очистить(); // На комиссию передать услуги нельзя
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоОтгрузка ИЛИ ЭтоКомиссия Тогда
		Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
	Иначе
		Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	КонецЕсли;
	
	Если Объект.ЗачетАвансов.Количество() > 0 Тогда
		Объект.ЗачетАвансов.Очистить();
	КонецЕсли;
	
	ЗаполнитьСчетаУчета(Форма, ПричиныИзмененияСчетовУчета, "ДоговорКонтрагента");
	
	УстановитьПорядокУчетаРасчетов(Форма);
	
	
КонецПроцедуры

Процедура ЗаполнитьРассчитатьСуммыВСтроке(Форма, Строка, ТаблицаЦенНоменклатуры, ВалютаПередИзменением, СтруктураКурса,
										ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, ЕстьНДС, 
										ЗначениеПустогоКоличества, ДокументБезНДС)

	Объект = Форма.Объект;

	Если ПерезаполнитьЦены И ТаблицаЦенНоменклатуры <> Неопределено Тогда
		
		НайденнаяСтрока	= ТаблицаЦенНоменклатуры.Найти(Строка.Номенклатура, "Номенклатура");
		Если НайденнаяСтрока <> Неопределено Тогда
			Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				НайденнаяСтрока.Цена, НайденнаяСтрока.Валюта, Объект.ВалютаДокумента, НайденнаяСтрока.Курс,
				Объект.КурсВзаиморасчетов, НайденнаяСтрока.Кратность, Объект.КратностьВзаиморасчетов);
			ЦенаВключаетНДС = НайденнаяСтрока.ЦенаВключаетНДС;
		Иначе
			Цена = 0;
			// Признак того, что цена включает НДС, хранится в реквизите ЦенаВключаетНДС типа цен
            Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
                ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТипЦен, "ЦенаВключаетНДС");
            Иначе
                ЦенаВключаетНДС = Ложь;
            КонецЕсли;
		КонецЕсли;
		
	Иначе
		Если ПересчитатьЦены Тогда

			Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				Строка.Цена, ВалютаПередИзменением, Объект.ВалютаДокумента, СтруктураКурса.Курс,
				Объект.КурсВзаиморасчетов, СтруктураКурса.Кратность, Объект.КратностьВзаиморасчетов);

		Иначе
			Цена = Строка.Цена;
		КонецЕсли;
		// Признак того, что цена включает НДС, хранится в реквизите СуммаВключаетНДС документа
		ЦенаВключаетНДС = ?(ПересчитатьНДС, НЕ Объект.СуммаВключаетНДС, Объект.СуммаВключаетНДС);
	КонецЕсли;

	Если ЕстьНДС Тогда
		
		Если ДокументБезНДС Тогда
			Строка.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЕсли;

		Строка.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
			Цена, ЦенаВключаетНДС, Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС));

		Строка.Сумма = Строка.Цена * ?(Строка.Количество = 0, ЗначениеПустогоКоличества, Строка.Количество);
		Строка.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(Строка.Сумма, Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС));

	Иначе
		Строка.Цена = Цена;
		Строка.Сумма = Строка.Цена * ?(Строка.Количество = 0, ЗначениеПустогоКоличества, Строка.Количество);
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьОтветственногоПоСкладу(Форма)

	Объект = Форма.Объект;

	Если Объект.Склад <> Справочники.Склады.ПустаяСсылка() Тогда 
		Объект.ОтпускПроизвел = ОтветственныеЛицаБП.ОтветственноеЛицоНаСкладе(Объект.Склад, Объект.Дата);
	Иначе
		Объект.ОтпускПроизвел = Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;

КонецПроцедуры

Функция ЕстьСтрокиВТабличныхЧастях(Форма)
	
	Объект = Форма.Объект;
	
	ЭтоОтгрузка = РеализацияТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "ЭтоОтгрузка");

	ЕстьСтроки = Ложь;
	
	Если Объект.Свойство("Товары") Тогда
		ЕстьСтроки = Объект.Товары.Количество() > 0;
	КонецЕсли;
	
	Если НЕ ЕстьСтроки И Объект.Свойство("ВозвратнаяТара") Тогда
		ЕстьСтроки = Объект.ВозвратнаяТара.Количество() > 0;
	КонецЕсли;
	
	Если НЕ ЕстьСтроки И НЕ ЭтоОтгрузка Тогда
		Если Объект.Свойство("Услуги") Тогда
			ЕстьСтроки = Объект.Услуги.Количество() > 0;
		КонецЕсли;
		
		Если НЕ ЕстьСтроки И Объект.Свойство("АгентскиеУслуги") Тогда
			ЕстьСтроки = Объект.АгентскиеУслуги.Количество() > 0;
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат ЕстьСтроки;

КонецФункции

Функция СписокАдресовДоставки(Контрагент, Грузополучатель)

	СписокАдресов = Новый СписокЗначений;

	КонтрагентДоставки = ?(ЗначениеЗаполнено(Грузополучатель), Грузополучатель, Контрагент);
	Если НЕ ЗначениеЗаполнено(КонтрагентДоставки) Тогда
		Возврат СписокАдресов;
	КонецЕсли;
	
	ТипыКИ = Новый Массив;
	ТипыКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.Адрес);
	
	Объекты = Новый Массив();
	Объекты.Добавить(КонтрагентДоставки);
	Адреса = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(Объекты, ТипыКИ);
	
	ЮрФизЛицо = ОбщегоНазначения.ПолучитьЗначениеРеквизита(КонтрагентДоставки, "ЮридическоеФизическоеЛицо");
	
	ВидФактАдреса = ?(ЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо,
		Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента,
		Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица);
		
	Для каждого Адрес Из Адреса Цикл
		Если Адрес.Вид = ВидФактАдреса Тогда
			СписокАдресов.Вставить(0, Адрес.Представление, "" + Адрес.Вид + ": " + Адрес.Представление);
		Иначе
			СписокАдресов.Добавить(Адрес.Представление, "" + Адрес.Вид + ": " + Адрес.Представление);
		КонецЕсли;
	КонецЦикла;
	Возврат СписокАдресов;

КонецФункции

Функция НайтиСтрокуТабличнойЧасти(Форма, ИмяТабличнойЧасти, СтруктураОтбора)

	Объект = Форма.Объект;

	СтрокаТабличнойЧасти = Неопределено;

	МассивНайденныхСтрок = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
	Если МассивНайденныхСтрок.Количество() > 0 Тогда
		// Нашли. Вернем первую найденную строку.
		СтрокаТабличнойЧасти = МассивНайденныхСтрок[0];
	КонецЕсли;

	Возврат СтрокаТабличнойЧасти;

КонецФункции

Процедура ЗаполнитьСчетаУчета(Форма, ПричиныИзмененияСчетовУчета, ИмяРеквизита)
	
	Если Не СчетаУчетаВДокументахКлиентСервер.МожноНачатьЗаполнениеСчетовУчета(ИмяРеквизита, ПричиныИзмененияСчетовУчета) Тогда
		Возврат;
	КонецЕсли;
		
	ПараметрыЗаполнения = РеализацияТоваровУслугФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(ПричиныИзмененияСчетовУчета, Форма.Объект);
	СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(ПараметрыЗаполнения);
	
	СчетаМоглиИзмениться = ПараметрыЗаполнения.КЗаполнению.Количество() > 0;
	
	Для Каждого ИмяТабличнойЧасти Из СчетаУчетаВДокументахКлиентСервер.ТабличныеЧастиКЗаполнению(ПараметрыЗаполнения.КЗаполнению) Цикл
		Форма.ЗаполнитьДобавленныеКолонкиТаблиц(ИмяТабличнойЧасти);
	КонецЦикла;
		
КонецПроцедуры
