////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для печати договоров.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Процедура копирует текст договора из шаблона в форматированный документ
// и заменяет подставляемые параметры на их значения.
//
// Параметры:
//	ШаблонДоговора - СправочникСсылка.ШаблоныДоговоров
//	ФорматированныйДокумент - ФорматированныйДокумент, которые необходимо заполнить
//	СсылкаНаОбъект - СправочникСсылка.ДоговорыКонтрагентов
//				   - ДокументСсылка.СчетНаОплатуПокупателям 
//		    	   - ссылка на договор или документ, из которого вызвана печать текста договора
//
Процедура ЗаполнитьТекстДоговораПоШаблону(ШаблонДоговора, ФорматированныйДокумент, СсылкаНаОбъект) Экспорт

	ФорматированныйДокумент.Удалить();

	СведенияОСделке = СведенияОСделке(СсылкаНаОбъект);

	Если СведенияОСделке = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ДанныеШаблона = Справочники.ШаблоныДоговоров.ДанныеШаблонаДоговора(ШаблонДоговора);
	ТекстHTML = ДанныеШаблона.ТекстHTML;
	
	Если НЕ ЗначениеЗаполнено(ТекстHTML) Тогда
		Возврат;
	КонецЕсли;
	
	ФорматированныйДокумент.УстановитьHTML(ТекстHTML, ДанныеШаблона.Вложения);
	
	// Заменяем параметры по тексту на значения из базы.
	ЦветФонаЗаменяемогоПараметра = ЦветФонаЗаменяемогоПараметра();
	ЦветПоУмолчанию = Новый Цвет();
	
	ЭлементыКОбнулению = Новый Массив;
	
	ЗакладкаКонцаДокумента = ФорматированныйДокумент.ПолучитьЗакладкуКонца();
	
	ЗначенияСоставногоПараметра = Новый Массив;
	
	ОбластьНачалоПараметра = ФорматированныйДокумент.НайтиТекст("{");
	Пока ОбластьНачалоПараметра <> Неопределено Цикл
	
		ОбластьКонецПараметра = ФорматированныйДокумент.НайтиТекст("}", ОбластьНачалоПараметра.ЗакладкаНачала);
		Если ОбластьКонецПараметра = Неопределено Тогда
			// Для параметра не задана закрывающая скобка и он продолжается до конца текста, поэтому выходим из цикла.
			Прервать;
		КонецЕсли;
		
		МассивЭлементов = ФорматированныйДокумент.СформироватьЭлементы(
			ОбластьНачалоПараметра.ЗакладкаНачала, ОбластьКонецПараметра.ЗакладкаКонца);
			
		ЭлементыКОбнулению.Очистить();
		ПоследнийТекстовыйЭлемент = Неопределено;
			
		Сч = 0;
		ДлинаДобавленногоТекста = 0;
		Пока Сч < МассивЭлементов.Количество() Цикл
			
			ЭлементДокумента = МассивЭлементов[Сч];
		
			Если ТипЗнч(ЭлементДокумента) <> Тип("ТекстФорматированногоДокумента") Тогда
				Сч = Сч + 1;
				Продолжить;
			КонецЕсли;

			ИмяПараметра = ЭлементДокумента.Текст;
			
			// Возможно, что из-за форматирования текст параметра разбился на несколько html-элементов
			// и надо собрать их в один
			Пока Сч < МассивЭлементов.Количество() - 1
				И Прав(ИмяПараметра, 1) <> "}" Цикл
				
				СледующийЭлементДокумента = МассивЭлементов[Сч + 1];
				Если ТипЗнч(СледующийЭлементДокумента) <> Тип("ТекстФорматированногоДокумента") Тогда
					Прервать;
				КонецЕсли;
				
				ИмяПараметра = ИмяПараметра + СледующийЭлементДокумента.Текст;
				Сч = Сч + 1;
				
				ЭлементыКОбнулению.Добавить(СледующийЭлементДокумента);
				
			КонецЦикла;
			
			Если Лев(ИмяПараметра, 1) = "{" Тогда
				ИмяПараметра = Сред(ИмяПараметра, 2);
			КонецЕсли;
			Если Прав(ИмяПараметра, 1) = "}" Тогда
				ИмяПараметра = Сред(ИмяПараметра, 1, СтрДлина(ИмяПараметра) - 1);
			КонецЕсли;
			
			Успешно = Истина;
			Если ЗначениеЗаполнено(ИмяПараметра) Тогда
				Значение = ЗначениеПараметра(ИмяПараметра, СведенияОСделке, ЗначенияСоставногоПараметра, Успешно);
				Если Найти(Значение, "%1%") > 0 Тогда
					// Это составной параметр, вставляем его значение по частям
					
					ДлинаДобавленногоТекста = ДлинаДобавленногоТекста 
						+ ВставитьСоставноеЗначение(Значение, ЗначенияСоставногоПараметра, ФорматированныйДокумент, ЭлементДокумента);
					ЗначенияСоставногоПараметра.Очистить();
					Значение = "";
				Иначе
					ДлинаДобавленногоТекста = ДлинаДобавленногоТекста +  СтрДлина(Значение);
				КонецЕсли;
				
				ЭлементДокумента.Текст = Значение;
			Иначе
				ЭлементДокумента.Текст = "";
			КонецЕсли;
			
			Для Каждого Элемент Из ЭлементыКОбнулению Цикл
				Элемент.Текст = "";
			КонецЦикла;
			
			Если Успешно Тогда
				// Заменяем цвет фона по умолчанию
				Если ЭлементДокумента.ЦветФона = ЦветФонаЗаменяемогоПараметра Тогда
					ЭлементДокумента.ЦветФона = ЦветПоУмолчанию;
					ПоследнийТекстовыйЭлемент = ЭлементДокумента;
				КонецЕсли;
				
				Для Каждого Элемент Из ЭлементыКОбнулению Цикл
					Если Элемент.ЦветФона = ЦветФонаЗаменяемогоПараметра Тогда
						Элемент.ЦветФона = ЦветПоУмолчанию;
						ПоследнийТекстовыйЭлемент = Элемент;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Сч = Сч + 1;
			
		КонецЦикла;

		// При расположении подряд нескольких параметров между ними могут появляться 
		// пробелы или знаки препинания, закрашенные цветом ЦветФонаЗаменяемогоПараметра. 
		// Чтобы после замены всех соседних параметров эти пробелы не выделялсь, снимем у них фон.
		Если ПоследнийТекстовыйЭлемент <> Неопределено Тогда
			
			ЕстьДанные = ПоследнийТекстовыйЭлемент.ЗакладкаКонца <> ЗакладкаКонцаДокумента;
			
			Пока ЕстьДанные Цикл
				ПозицияПоследнегоТекстовогоЭлемента = ФорматированныйДокумент.ПолучитьПозициюПоЗакладке(
					ПоследнийТекстовыйЭлемент.ЗакладкаКонца);
				
				ПозицияКонцаДокумента = ФорматированныйДокумент.ПолучитьПозициюПоЗакладке(ЗакладкаКонцаДокумента);
				
				ПозицияПоследнегоТекстовогоЭлемента = Мин(ПозицияПоследнегоТекстовогоЭлемента + ДлинаДобавленногоТекста + 1, ПозицияКонцаДокумента);
				ЗакладкаПоПозиции = ФорматированныйДокумент.ПолучитьЗакладкуПоПозиции(ПозицияПоследнегоТекстовогоЭлемента);
				
				МассивЭлементов = ФорматированныйДокумент.ПолучитьЭлементы(ПоследнийТекстовыйЭлемент.ЗакладкаКонца, ЗакладкаПоПозиции);
				ПоследнийТекстовыйЭлемент = Неопределено;
				Для Каждого ЭлементДокумента Из МассивЭлементов Цикл
					Если ТипЗнч(ЭлементДокумента) <> Тип("ТекстФорматированногоДокумента") Тогда
						ПоследнийТекстовыйЭлемент = Неопределено;
						Прервать;
					КонецЕсли;
					
					Если Найти(ЭлементДокумента.Текст, "{") > 0 Тогда
						// Начало нового параметра, дальше не обрабатываем
						ПоследнийТекстовыйЭлемент = Неопределено;
						Прервать;
					КонецЕсли;
					
					Если ЭлементДокумента.ЦветФона = ЦветФонаЗаменяемогоПараметра Тогда
						ЭлементДокумента.ЦветФона = ЦветПоУмолчанию;
						ПоследнийТекстовыйЭлемент = ЭлементДокумента;
					КонецЕсли;
					
				КонецЦикла;
				
				Если ПоследнийТекстовыйЭлемент = Неопределено Тогда
					ЕстьДанные = Ложь;
				ИначеЕсли ФорматированныйДокумент.ПолучитьПозициюПоЗакладке(ПоследнийТекстовыйЭлемент.ЗакладкаКонца) <= ПозицияПоследнегоТекстовогоЭлемента Тогда
					ЕстьДанные = Ложь;
				Иначе
					ЕстьДанные = ПоследнийТекстовыйЭлемент.ЗакладкаКонца <> ЗакладкаКонцаДокумента;
				КонецЕсли;
				
			КонецЦикла;

		КонецЕсли;
		
		// Ищем следующий параметр
		ОбластьНачалоПараметра = ФорматированныйДокумент.НайтиТекст("{", ОбластьНачалоПараметра.ЗакладкаНачала);
		
	КонецЦикла;

КонецПроцедуры

// Возвращает структуру со сведениями о сделке.
//
// Параметр:
//	СсылкаНаОбъект  - СправочникСсылка.ДоговорКонтрагента, ДокументСсылка.СчетНаОплатуПокупателю
//					- договор или счет на оплату, из которого вызвано заполнение текста договора.
//
// Возвращаемое значение:
//	Структура с ключами:
//		* СведенияОДоговоре -  структура сведений о договоре
//							- см. Справочники.ДоговорыКонтрагентов.ПодготовитьПараметрыПечатиТекстаДоговора()
//		* СведенияОКонтрагенте - структура сведений о контрагенте
//							- см. БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице()
//		* СведенияОбОрганизации - структура сведений об организации
//							- см. БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице()
//		* СведенияОСчетеНаОплату - структура сведений о счете на оплату (если передан он)
//							- см. Документы.СчетНаОплатуПокупателю.ПодготовитьПараметрыПечатиТекстаДоговора()
//
Функция СведенияОСделке(СсылкаНаОбъект) Экспорт

	ДоговорКонтрагента = ДоговорКонтрагентаДляОбъекта(СсылкаНаОбъект);

	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Возврат Неопределено;
	КонецЕсли;

	СведенияОДоговоре = Справочники.ДоговорыКонтрагентов.ПодготовитьПараметрыПечатиТекстаДоговора(
		ДоговорКонтрагента);
		
	ДатаСреза = ?(ЗначениеЗаполнено(СведенияОДоговоре.Дата), СведенияОДоговоре.Дата, ТекущаяДатаСеанса());
	
	ЭтоСчетНаОплату = ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.СчетНаОплатуПокупателю");
	
	Если ЭтоСчетНаОплату Тогда
		СведенияОСчетеНаОплату = Документы.СчетНаОплатуПокупателю.ПодготовитьПараметрыПечатиТекстаДоговора(СсылкаНаОбъект);
	КонецЕсли;
	
	СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(
		?(СведенияОСчетеНаОплату <> Неопределено, СведенияОСчетеНаОплату.Организация, СведенияОДоговоре.Организация),
		ДатаСреза, 
		?(СведенияОСчетеНаОплату <> Неопределено, СведенияОСчетеНаОплату.БанковскийСчет, Неопределено));
	
	СведенияОКонтрагенте = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(СведенияОДоговоре.Владелец, ДатаСреза);
	
	// Получим таблицу доп. свойств и реквизитов договора
	ТаблицаДопСвойств	= УправлениеСвойствами.ПолучитьЗначенияСвойств(ДоговорКонтрагента, Истина, Истина);
	ДопзаполнитьНаименованиеДопСвойств(ТаблицаДопСвойств);
	СведенияОДоговоре.Вставить("ТаблицаДопСвойств", ТаблицаДопСвойств);
	
	ТаблицаДопСвойств = УправлениеСвойствами.ПолучитьЗначенияСвойств(СведенияОДоговоре.Организация, Истина, Истина);
	ДопзаполнитьНаименованиеДопСвойств(ТаблицаДопСвойств);
	СведенияОбОрганизации.Вставить("ТаблицаДопСвойств", ТаблицаДопСвойств);
	
	ТаблицаДопСвойств = УправлениеСвойствами.ПолучитьЗначенияСвойств(СведенияОДоговоре.Владелец, Истина, Истина);
	ДопзаполнитьНаименованиеДопСвойств(ТаблицаДопСвойств);
	СведенияОКонтрагенте.Вставить("ТаблицаДопСвойств", ТаблицаДопСвойств);
	
	Если ЭтоСчетНаОплату Тогда
		ТаблицаДопСвойств = УправлениеСвойствами.ПолучитьЗначенияСвойств(СсылкаНаОбъект, Ложь, Истина);
		ДопзаполнитьНаименованиеДопСвойств(ТаблицаДопСвойств);
		СведенияОСчетеНаОплату.Вставить("ТаблицаДопСвойств", ТаблицаДопСвойств);
	КонецЕсли;

	Результат = Новый Структура();
	Результат.Вставить("СведенияОДоговоре",			СведенияОДоговоре);
	Результат.Вставить("СведенияОКонтрагенте",		СведенияОКонтрагенте);
	Результат.Вставить("СведенияОбОрганизации",		СведенияОбОрганизации);
	Результат.Вставить("СведенияОСчетеНаОплату",	СведенияОСчетеНаОплату);

	Возврат Результат;

КонецФункции

Функция ЗначениеПараметра(Знач ИмяПараметра, СведенияОСделке, ЗначенияСоставногоПараметра, Успешно) Экспорт

	ИмяПараметра = ВРег(ИмяПараметра);
	СведенияОДоговоре 		= СведенияОСделке.СведенияОДоговоре;
	СведенияОКонтрагенте 	= СведенияОСделке.СведенияОКонтрагенте;
	СведенияОбОрганизации 	= СведенияОСделке.СведенияОбОрганизации;
	СведенияОСчетеНаОплату	= СведенияОСделке.СведенияОСчетеНаОплату;
	Результат = Неопределено;
	Успешно = Истина;
	
	Если ИмяПараметра = Врег("АдресЭлектроннойПочтыКонтрагента") Тогда
		
		Если ЗначениеЗаполнено(СведенияОКонтрагенте.Email) Тогда
			Результат = СведенияОКонтрагенте.Email;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 20);
			Успешно = Ложь;
		КонецЕсли;
	
	ИначеЕсли ИмяПараметра = Врег("АдресЭлектроннойПочтыОрганизации") Тогда
	
		Если ЗначениеЗаполнено(СведенияОбОрганизации.Email) Тогда
			Результат = СведенияОбОрганизации.Email;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 20);
			Успешно = Ложь;
		КонецЕсли;
	
	ИначеЕсли ИмяПараметра = Врег("БанковскиеРеквизитыКонтрагента") Тогда
	
		Если ЗначениеЗаполнено(СведенияОКонтрагенте.НомерСчета) Тогда
			НомерСчета = СведенияОКонтрагенте.НомерСчета;
		Иначе
			НомерСчета = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 20);
			Успешно = Ложь;
		КонецЕсли;
	
		Если ЗначениеЗаполнено(СведенияОКонтрагенте.Банк) Тогда
			Банк = СведенияОКонтрагенте.Банк;
		Иначе
			Банк = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 30);
			Успешно = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СведенияОКонтрагенте.БИК) Тогда
			БИК = СведенияОКонтрагенте.БИК;
		Иначе
			БИК = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 9);
			Успешно = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СведенияОКонтрагенте.КоррСчет) Тогда
			КоррСчет = СведенияОКонтрагенте.КоррСчет;
		Иначе
			КоррСчет = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 20);
			Успешно = Ложь;
		КонецЕсли;

		Результат = НСтр("ru = 'р/с %1% в банке %2%, БИК %3%, к/с %4%'");
		ЗначенияСоставногоПараметра.Добавить(НомерСчета);
		ЗначенияСоставногоПараметра.Добавить(Банк);
		ЗначенияСоставногоПараметра.Добавить(БИК);
		ЗначенияСоставногоПараметра.Добавить(КоррСчет);
		
	ИначеЕсли ИмяПараметра = Врег("БанковскиеРеквизитыОрганизации") Тогда

		Если ЗначениеЗаполнено(СведенияОбОрганизации.НомерСчета) Тогда
			НомерСчета = СведенияОбОрганизации.НомерСчета;
		Иначе
			НомерСчета = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 20);
			Успешно = Ложь;
		КонецЕсли;
	
		Если ЗначениеЗаполнено(СведенияОбОрганизации.Банк) Тогда
			Банк = СведенияОбОрганизации.Банк;
		Иначе
			Банк = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 30);
			Успешно = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СведенияОбОрганизации.БИК) Тогда
			БИК = СведенияОбОрганизации.БИК;
		Иначе
			БИК = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 9);
			Успешно = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СведенияОбОрганизации.КоррСчет) Тогда
			КоррСчет = СведенияОбОрганизации.КоррСчет;
		Иначе
			КоррСчет = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 20);
			Успешно = Ложь;
		КонецЕсли;

		Результат = НСтр("ru = 'р/с %1% в банке %2%, БИК %3%, к/с %4%'");
		ЗначенияСоставногоПараметра.Добавить(НомерСчета);
		ЗначенияСоставногоПараметра.Добавить(Банк);
		ЗначенияСоставногоПараметра.Добавить(БИК);
		ЗначенияСоставногоПараметра.Добавить(КоррСчет);

	ИначеЕсли ИмяПараметра = Врег("ГородПоПочтовомуАдресуКонтрагента") Тогда
	
		Если ЗначениеЗаполнено(СведенияОКонтрагенте.ГородПоПочтовомуАдресу) Тогда
			Результат = СведенияОКонтрагенте.ГородПоПочтовомуАдресу;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 30);
			Успешно = Ложь;
		КонецЕсли;
	
	ИначеЕсли ИмяПараметра = Врег("ГородПоПочтовомуАдресуОрганизации") Тогда
	
		Если ЗначениеЗаполнено(СведенияОбОрганизации.ГородПоПочтовомуАдресу) Тогда
			Результат = СведенияОбОрганизации.ГородПоПочтовомуАдресу;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 30);
			Успешно = Ложь;
		КонецЕсли;

	ИначеЕсли ИмяПараметра = Врег("ГородПоФактическомуАдресуКонтрагента") Тогда
	
		Если ЗначениеЗаполнено(СведенияОКонтрагенте.ГородПоФактическомуАдресу) Тогда
			Результат = СведенияОКонтрагенте.ГородПоФактическомуАдресу;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 30);
			Успешно = Ложь;
		КонецЕсли;
	
	ИначеЕсли ИмяПараметра = Врег("ГородПоФактическомуАдресуОрганизации") Тогда
	
		Если ЗначениеЗаполнено(СведенияОбОрганизации.ГородПоФактическомуАдресу) Тогда
			Результат = СведенияОбОрганизации.ГородПоФактическомуАдресу;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 30);
			Успешно = Ложь;
		КонецЕсли;
		
	ИначеЕсли ИмяПараметра = Врег("ГородПоЮридическомуАдресуКонтрагента") Тогда
	
		Если ЗначениеЗаполнено(СведенияОКонтрагенте.ГородПоЮридическомуАдресу) Тогда
			Результат = СведенияОКонтрагенте.ГородПоЮридическомуАдресу;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 30);
			Успешно = Ложь;
		КонецЕсли;

	ИначеЕсли ИмяПараметра = Врег("ГородПоЮридическомуАдресуОрганизации") Тогда
	
		Если ЗначениеЗаполнено(СведенияОбОрганизации.ГородПоЮридическомуАдресу) Тогда
			Результат = СведенияОбОрганизации.ГородПоЮридическомуАдресу;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 30);
			Успешно = Ложь;
		КонецЕсли;
		
	ИначеЕсли ИмяПараметра = Врег("ДатаДоговора") Тогда 
		
		Если ЗначениеЗаполнено(СведенияОДоговоре.Дата) Тогда
			Результат = Формат(СведенияОДоговоре.Дата, "ДЛФ=DD");
		Иначе
			Результат = НСтр("ru = '"" __ "" ______________ 20__ г.'");
			Успешно = Ложь;                   
		КонецЕсли;                 
	
	ИначеЕсли ИмяПараметра = Врег("ДокументУдостоверяющийЛичностьКонтрагента") Тогда

		Если СведенияОКонтрагенте.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			// Для юридических лиц параметр не применяется, может присутствовать в шаблоне
			// при использовании единого шаблона для юр.лиц и физ.лиц.
			Результат = "";
		ИначеЕсли ЗначениеЗаполнено(СведенияОКонтрагенте.ДокументУдостоверяющийЛичность) Тогда
			Результат = СведенияОКонтрагенте.ДокументУдостоверяющийЛичность;
		Иначе
			// Вставляем строку без переносов, чтобы сработало автоперенос в форматированном документе.
			Результат = НСтр("ru = 'Паспорт гражданина РФ, серия %1%, № %2% выдан: %3%, действует до: %4%, %5%, № подр. %6%'");
			ЗначенияСоставногоПараметра.Добавить("____"); 	// серия
			ЗначенияСоставногоПараметра.Добавить("______"); // номер
			ЗначенияСоставногоПараметра.Добавить("______________ 20__ г."); // выдан
			ЗначенияСоставногоПараметра.Добавить("______________ 20__ г."); // действует до
			ЗначенияСоставногоПараметра.Добавить("_________________________________"); // кем выдан
			ЗначенияСоставногоПараметра.Добавить("_______"); // № подразделения
			
			Успешно = Ложь;
		КонецЕсли;
	
	ИначеЕсли ИмяПараметра = Врег("ДолжностьРуководителяКонтрагента") Тогда
	
		Если ЗначениеЗаполнено(СведенияОДоговоре.ДолжностьРуководителяКонтрагента) Тогда
			Результат = СведенияОДоговоре.ДолжностьРуководителяКонтрагента;
		ИначеЕсли СведенияОКонтрагенте.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			// У физического лица может и не быть должности, если, например, он действует сам за себя.
			Результат = "";
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 30);
			Успешно = Ложь;
		КонецЕсли;

	ИначеЕсли ИмяПараметра = Врег("ДолжностьРуководителяОрганизации") Тогда
	
		Если ЗначениеЗаполнено(СведенияОДоговоре.ДолжностьРуководителя) Тогда
			Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СведенияОДоговоре.ДолжностьРуководителя, "Наименование");
		ИначеЕсли СведенияОбОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			// У физического лица может и не быть должности, если, например, он действует сам за себя.
			Результат = "";
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 30);
			Успешно = Ложь;
		КонецЕсли;
	
	ИначеЕсли ИмяПараметра = Врег("ИНН_КППКонтрагента") Тогда
	
		Если ЗначениеЗаполнено(СведенияОКонтрагенте.ИНН) Тогда
			ИНН = СведенияОКонтрагенте.ИНН;
		ИначеЕсли СведенияОКонтрагенте.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			ИНН = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 12);
			Успешно = Ложь;
		Иначе
			ИНН = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 10);
			Успешно = Ложь;
		КонецЕсли;

		Если ЗначениеЗаполнено(СведенияОКонтрагенте.КПП) Тогда
			КПП = СведенияОКонтрагенте.КПП;
		ИначеЕсли СведенияОКонтрагенте.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			КПП = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 9);
			Успешно = Ложь;
		КонецЕсли;
		
		Если СведенияОКонтрагенте.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			Результат = НСтр("ru = 'ИНН: %1%'");
		Иначе
			Результат = НСтр("ru = 'ИНН / КПП: %1% / %2%'");
		КонецЕсли;
		
		ЗначенияСоставногоПараметра.Добавить(ИНН);
		ЗначенияСоставногоПараметра.Добавить(КПП);
	
	ИначеЕсли ИмяПараметра = Врег("ИНН_КППОрганизации") Тогда
	
		Если ЗначениеЗаполнено(СведенияОбОрганизации.ИНН) Тогда
			ИНН = СведенияОбОрганизации.ИНН;
		ИначеЕсли СведенияОбОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			ИНН = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 12);
			Успешно = Ложь;
		Иначе
			ИНН = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 10);
			Успешно = Ложь;
		КонецЕсли;

		Если ЗначениеЗаполнено(СведенияОбОрганизации.КПП) Тогда
			КПП = СведенияОбОрганизации.КПП;
		ИначеЕсли СведенияОбОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			КПП = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 9);
			Успешно = Ложь;
		КонецЕсли;
		
		Если СведенияОбОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			Результат = НСтр("ru = 'ИНН: %1%'");
		Иначе
			Результат = НСтр("ru = 'ИНН / КПП: %1% / %2%'");
		КонецЕсли;
		
		ЗначенияСоставногоПараметра.Добавить(ИНН);
		ЗначенияСоставногоПараметра.Добавить(КПП);

	ИначеЕсли ИмяПараметра = Врег("НомерДоговора") Тогда
		
		Если ЗначениеЗаполнено(СведенияОДоговоре.Номер) Тогда
			Результат = СведенияОДоговоре.Номер;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 10);
			Успешно = Ложь;
		КонецЕсли;
	
	ИначеЕсли ИмяПараметра = Врег("ОГРНКонтрагента") Тогда
	
		Если ЗначениеЗаполнено(СведенияОКонтрагенте.ОГРН) Тогда
			ОГРН = СведенияОКонтрагенте.ОГРН;
		ИначеЕсли СведенияОКонтрагенте.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			// Для физлиц ОГРНИП может отсутствовать, если это не ИП, поэтому если не заполнено, то не показываем ничего.
			Результат = "";
		Иначе
			ОГРН = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 15);
			Успешно = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОГРН) Тогда
		
			Если СведенияОКонтрагенте.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
				Результат = НСтр("ru = 'ОГРНИП: %1%'");
			Иначе
				Результат = НСтр("ru = 'ОГРН: %1%'");
			КонецЕсли;

			ЗначенияСоставногоПараметра.Добавить(ОГРН);
		КонецЕсли;

	ИначеЕсли ИмяПараметра = Врег("ОГРНОрганизации") Тогда
	
		Если ЗначениеЗаполнено(СведенияОбОрганизации.ОГРН) Тогда
			ОГРН = СведенияОбОрганизации.ОГРН;
		ИначеЕсли СведенияОбОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			// Для физлиц ОГРНИП может отсутствовать, если это не ИП, поэтому если не заполнено, то не показываем ничего.
			Результат = "";
		Иначе
			ОГРН = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 15);
			Успешно = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОГРН) Тогда
		
			Если СведенияОбОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
				Результат = НСтр("ru = 'ОГРНИП: %1%'");
			Иначе
				Результат = НСтр("ru = 'ОГРН: %1%'");
			КонецЕсли;

			ЗначенияСоставногоПараметра.Добавить(ОГРН);
		КонецЕсли;
	
	ИначеЕсли ИмяПараметра = Врег("ПредставительКонтрагента") Тогда

		Успешно1 = Истина;
		Успешно2 = Истина;
		Успешно3 = Истина;
		
		Должность = ЗначениеПараметра("ДолжностьРуководителяКонтрагента", 
			СведенияОСделке, ЗначенияСоставногоПараметра, Успешно1);
		Руководитель = ЗначениеПараметра("РуководительКонтрагента", 
			СведенияОСделке, ЗначенияСоставногоПараметра, Успешно2);
		Основание = ЗначениеПараметра("ОснованиеПолномочийРуководителяКонтрагента", 
			СведенияОСделке, ЗначенияСоставногоПараметра, Успешно3);
		
		Результат = НСтр("ru = ', в лице %1% %2%, действующего(-ей) на основании %3%'");
		ЗначенияСоставногоПараметра.Добавить(Должность);
		ЗначенияСоставногоПараметра.Добавить(Руководитель);
		ЗначенияСоставногоПараметра.Добавить(Основание);

		Если СведенияОКонтрагенте.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			// От имени юридического лица всегда действует какое-то физическое лицо
			Успешно = Успешно1 И Успешно2 И Успешно3;
		
		Иначе
			Если ЗначениеЗаполнено(Руководитель) 
				И ЗначениеЗаполнено(СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("_", Руководитель, ""))
				И Найти(СведенияОКонтрагенте.ПолноеНаименование, Руководитель) = 0 Тогда
				// Физическое лицо действует не самостоятельно, а выдало кому-то доверенность.
				Успешно = Успешно1 И Успешно2 И Успешно3;
			Иначе
				// Физическое лицо действует самостоятельно, ничего не показываем.
				Результат = "";
				ЗначенияСоставногоПараметра.Очистить();
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли ИмяПараметра = Врег("ПредставительОрганизации") Тогда

		Успешно1 = Истина;
		Успешно2 = Истина;
		Успешно3 = Истина;
		
		Должность = ЗначениеПараметра("ДолжностьРуководителяОрганизации", 
			СведенияОСделке, ЗначенияСоставногоПараметра, Успешно1);
		Руководитель = ЗначениеПараметра("РуководительОрганизации", 
			СведенияОСделке, ЗначенияСоставногоПараметра, Успешно2);
		Основание = ЗначениеПараметра("ОснованиеПолномочийРуководителяОрганизации", 
			СведенияОСделке, ЗначенияСоставногоПараметра, Успешно3);
		
		Результат = НСтр("ru = ', в лице %1% %2%, действующего(-ей) на основании %3%'");
		ЗначенияСоставногоПараметра.Добавить(Должность);
		ЗначенияСоставногоПараметра.Добавить(Руководитель);
		ЗначенияСоставногоПараметра.Добавить(Основание);

		Если СведенияОбОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			// От имени юридического лица всегда действует какое-то физическое лицо.
			Успешно = Успешно1 И Успешно2 И Успешно3;
		
		Иначе
			Если СведенияОДоговоре.Руководитель <> СведенияОбОрганизации.ИндивидуальныйПредприниматель Тогда
				// Индивидуальный предриниматель действует не самостоятельно, а выдал кому-то доверенность.
				Успешно = Успешно1 И Успешно2 И Успешно3;
			Иначе
				// Индивидуальный предприниматель действует самостоятельно, ничего не показываем.
				Результат = "";
				ЗначенияСоставногоПараметра.Очистить();
			КонецЕсли;
		КонецЕсли;
	
	ИначеЕсли ИмяПараметра = Врег("ОснованиеПолномочийРуководителяКонтрагента") Тогда
	
		Если ЗначениеЗаполнено(СведенияОДоговоре.ЗаРуководителяКонтрагентаПоПриказу) Тогда
			Результат = СведенияОДоговоре.ЗаРуководителяКонтрагентаПоПриказу;
		ИначеЕсли СведенияОКонтрагенте.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			Результат = НСтр("ru = 'Устава'");
		ИначеЕсли СведенияОКонтрагенте.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			Результат = "";
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 10);
			Успешно = Ложь;
		КонецЕсли;

	ИначеЕсли ИмяПараметра = Врег("ОснованиеПолномочийРуководителяОрганизации") Тогда
	
		Если ЗначениеЗаполнено(СведенияОДоговоре.ЗаРуководителяПоПриказу) Тогда
			Результат = СведенияОДоговоре.ЗаРуководителяПоПриказу;
		ИначеЕсли СведенияОбОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			Результат = НСтр("ru = 'Устава'");
		ИначеЕсли СведенияОбОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			Результат = "";
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 10);
			Успешно = Ложь;
		КонецЕсли;

	ИначеЕсли ИмяПараметра = Врег("ПолноеНаименованиеОрганизации") Тогда
	
		Если ЗначениеЗаполнено(СведенияОбОрганизации.ПолноеНаименование) Тогда
			Результат = СведенияОбОрганизации.ПолноеНаименование;
		ИначеЕсли ЗначениеЗаполнено(СведенияОбОрганизации.СокращенноеНаименование) Тогда
			Результат = СведенияОбОрганизации.СокращенноеНаименование;
		ИначеЕсли ЗначениеЗаполнено(СведенияОбОрганизации.Представление) Тогда
			Результат = СведенияОбОрганизации.Представление;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 50);
			Успешно = Ложь;
		КонецЕсли;
	
	ИначеЕсли ИмяПараметра = Врег("ПолноеНаименованиеКонтрагента") Тогда

		Если ЗначениеЗаполнено(СведенияОКонтрагенте.ПолноеНаименование) Тогда
			Результат = СведенияОКонтрагенте.ПолноеНаименование;
		ИначеЕсли ЗначениеЗаполнено(СведенияОКонтрагенте.СокращенноеНаименование) Тогда
			Результат = СведенияОКонтрагенте.СокращенноеНаименование;
		ИначеЕсли ЗначениеЗаполнено(СведенияОКонтрагенте.Представление) Тогда
			Результат = СведенияОКонтрагенте.Представление;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 50);
			Успешно = Ложь;
		КонецЕсли;
		
	ИначеЕсли ИмяПараметра = Врег("ПочтовыйАдресКонтрагента") Тогда
	
		Если ЗначениеЗаполнено(СведенияОКонтрагенте.ПочтовыйАдрес) Тогда
			Результат = СведенияОКонтрагенте.ПочтовыйАдрес;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 50);
			Успешно = Ложь;
		КонецЕсли;
	
	ИначеЕсли ИмяПараметра = Врег("ПочтовыйАдресОрганизации") Тогда

		Если ЗначениеЗаполнено(СведенияОбОрганизации.ПочтовыйАдрес) Тогда
			Результат = СведенияОбОрганизации.ПочтовыйАдрес;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 50);
			Успешно = Ложь;
		КонецЕсли;
	
	ИначеЕсли ИмяПараметра = Врег("РуководительКонтрагента") Тогда
	
		Если ЗначениеЗаполнено(СведенияОДоговоре.РуководительКонтрагента) Тогда
			Результат = СведенияОДоговоре.РуководительКонтрагента;
		ИначеЕсли СведенияОКонтрагенте.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			// У физического лица может не быть руководителя, тогда выводим его самого
			Результат = СведенияОКонтрагенте.ПолноеНаименование;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 30);
			Успешно = Ложь;
		КонецЕсли;
		
	ИначеЕсли ИмяПараметра = Врег("РуководительОрганизации") Тогда
	
		Если ЗначениеЗаполнено(СведенияОДоговоре.РуководительФИО) Тогда
			Результат = СведенияОДоговоре.РуководительФИО;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 30);
			Успешно = Ложь;
		КонецЕсли;

	ИначеЕсли ИмяПараметра = Врег("СвидетельствоКонтрагента") Тогда
	
		Если СведенияОКонтрагенте.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			// Реквизит в справочнике доступен только для ИП
			Результат = "";
		ИначеЕсли НЕ ЗначениеЗаполнено(СведенияОКонтрагенте.ОГРН) Тогда
			// Физлицо может быть частным лицом (не ИП), в таком случае реквизиты свидетельства не выводим
			Результат = "";
		Иначе
			Если ЗначениеЗаполнено(СведенияОКонтрагенте.СвидетельствоСерияНомер) Тогда
				СвидетельствоСерияНомер = СведенияОКонтрагенте.СвидетельствоСерияНомер;
			Иначе
				СвидетельствоСерияНомер = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 12);
				Успешно = Ложь;
			КонецЕсли;
		
			Если ЗначениеЗаполнено(СведенияОКонтрагенте.СвидетельствоДатаВыдачи) Тогда
				ДатаВыдачиСтрокой = Формат(СведенияОКонтрагенте.СвидетельствоДатаВыдачи, "ДЛФ=DD");
			Иначе
				ДатаВыдачиСтрокой = НСтр("ru = '"" __ "" ______________ 20__ г.'");
				Успешно = Ложь;
			КонецЕсли;
			Результат = НСтр("ru = 'Свидетельство о государственной регистрации %1% от %2%'");
			ЗначенияСоставногоПараметра.Добавить(СвидетельствоСерияНомер);
			ЗначенияСоставногоПараметра.Добавить(ДатаВыдачиСтрокой);
		КонецЕсли;

	ИначеЕсли ИмяПараметра = Врег("СвидетельствоОрганизации") Тогда
	
		Если СведенияОбОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			// Реквизит в справочнике доступен только для ИП
			Результат = "";
		Иначе
			Если ЗначениеЗаполнено(СведенияОбОрганизации.СвидетельствоСерияНомер) Тогда
				СвидетельствоСерияНомер = СведенияОбОрганизации.СвидетельствоСерияНомер;
			Иначе
				СвидетельствоСерияНомер = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 12);
				Успешно = Ложь;
			КонецЕсли;
		
			Если ЗначениеЗаполнено(СведенияОбОрганизации.СвидетельствоДатаВыдачи) Тогда
				ДатаВыдачиСтрокой = Формат(СведенияОбОрганизации.СвидетельствоДатаВыдачи, "ДЛФ=DD");
			Иначе
				ДатаВыдачиСтрокой = НСтр("ru = '"" __ "" ______________ 20__ г.'");
				Успешно = Ложь;
			КонецЕсли;
			Результат = НСтр("ru = 'Свидетельство о государственной регистрации %1% от %2%'");
			ЗначенияСоставногоПараметра.Добавить(СвидетельствоСерияНомер);
			ЗначенияСоставногоПараметра.Добавить(ДатаВыдачиСтрокой);
		КонецЕсли;

	ИначеЕсли ИмяПараметра = Врег("СрокДействияДоговора") Тогда
	
		Если ЗначениеЗаполнено(СведенияОДоговоре.СрокДействия) Тогда
			Результат = Формат(СведенияОДоговоре.СрокДействия, "ДЛФ=DD");
		Иначе
			Результат = НСтр("ru = '"" __ "" ______________ 20__ г.'");
			Успешно = Ложь;                   
		КонецЕсли;
	
	ИначеЕсли ИмяПараметра = Врег("СрокОплатыПоДоговору") Тогда
	
		Если ЗначениеЗаполнено(СведенияОДоговоре.СрокОплаты) Тогда
			Результат = Формат(СведенияОДоговоре.СрокОплаты, "ЧГ=");
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 3);
			Успешно = Ложь;
		КонецЕсли;
	
	ИначеЕсли ИмяПараметра = Врег("СуммаДокумента") Тогда
		
		Если СведенияОСчетеНаОплату <> Неопределено
			И ЗначениеЗаполнено(СведенияОСчетеНаОплату.СуммаСНДС) Тогда
			Результат = ОбщегоНазначенияБПВызовСервера.ФорматСумм(
				СведенияОСчетеНаОплату.СуммаСНДС, СведенияОСчетеНаОплату.ВалютаДокумента);
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 15);
			Успешно = Ложь;
		КонецЕсли;

	ИначеЕсли ИмяПараметра = Врег("СуммаДокументаПрописью") Тогда
		
		Если СведенияОСчетеНаОплату <> Неопределено
			И ЗначениеЗаполнено(СведенияОСчетеНаОплату.СуммаСНДС) Тогда
			Результат = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(
				СведенияОСчетеНаОплату.СуммаСНДС, СведенияОСчетеНаОплату.ВалютаДокумента);
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 30);
			Успешно = Ложь;
		КонецЕсли;

	ИначеЕсли ИмяПараметра = Врег("СуммаДокументаБезНДС") Тогда
		
		Если СведенияОСчетеНаОплату <> Неопределено
			И СведенияОСчетеНаОплату.СуммаСНДС - СведенияОСчетеНаОплату.СуммаНДС <> 0 Тогда
			Результат = ОбщегоНазначенияБПВызовСервера.ФорматСумм(
				СведенияОСчетеНаОплату.СуммаСНДС - СведенияОСчетеНаОплату.СуммаНДС, СведенияОСчетеНаОплату.ВалютаДокумента);
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 15);
			Успешно = Ложь;
		КонецЕсли;

	ИначеЕсли ИмяПараметра = Врег("СуммаДокументаБезНДСПрописью") Тогда
		
		Если СведенияОСчетеНаОплату <> Неопределено
			И СведенияОСчетеНаОплату.СуммаСНДС - СведенияОСчетеНаОплату.СуммаНДС <> 0 Тогда
			Результат = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(
				СведенияОСчетеНаОплату.СуммаСНДС - СведенияОСчетеНаОплату.СуммаНДС, СведенияОСчетеНаОплату.ВалютаДокумента);
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 30);
			Успешно = Ложь;
		КонецЕсли;

	ИначеЕсли ИмяПараметра = Врег("СуммаНДС") Тогда
		
		Если СведенияОСчетеНаОплату <> Неопределено Тогда
			Если ЗначениеЗаполнено(СведенияОСчетеНаОплату.СуммаНДС) Тогда
				Результат = ОбщегоНазначенияБПВызовСервера.ФорматСумм(
					СведенияОСчетеНаОплату.СуммаНДС, СведенияОСчетеНаОплату.ВалютаДокумента);
			Иначе
				Результат = НСтр("ru = 'Без налога (НДС)'");
			КонецЕсли;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 15);
			Успешно = Ложь;
		КонецЕсли;

	ИначеЕсли ИмяПараметра = Врег("СуммаНДСПрописью") Тогда
		
		Если СведенияОСчетеНаОплату <> Неопределено Тогда
			Если ЗначениеЗаполнено(СведенияОСчетеНаОплату.СуммаНДС) Тогда
				Результат = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(
					СведенияОСчетеНаОплату.СуммаНДС, СведенияОСчетеНаОплату.ВалютаДокумента);
			Иначе
				Результат = НСтр("ru = 'Без налога (НДС)'");
			КонецЕсли;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 15);
			Успешно = Ложь;
		КонецЕсли;
	
	ИначеЕсли ИмяПараметра = Врег("ТелефонКонтрагента") Тогда
		
		Если ЗначениеЗаполнено(СведенияОКонтрагенте.Телефоны) Тогда
			Результат = СведенияОКонтрагенте.Телефоны;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 20);
			Успешно = Ложь;
		КонецЕсли;
	
	ИначеЕсли ИмяПараметра = Врег("ТелефонОрганизации") Тогда

		Если ЗначениеЗаполнено(СведенияОбОрганизации.Телефоны) Тогда
			Результат = СведенияОбОрганизации.Телефоны;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 20);
			Успешно = Ложь;
		КонецЕсли;
	
	ИначеЕсли ИмяПараметра = Врег("ФаксКонтрагента") Тогда

		Если ЗначениеЗаполнено(СведенияОКонтрагенте.Факс) Тогда
			Результат = СведенияОКонтрагенте.Факс;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 20);
			Успешно = Ложь;
		КонецЕсли;
	
	ИначеЕсли ИмяПараметра = Врег("ФаксОрганизации") Тогда

		Если ЗначениеЗаполнено(СведенияОбОрганизации.Факс) Тогда
			Результат = СведенияОбОрганизации.Факс;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 20);
			Успешно = Ложь;
		КонецЕсли;
	
	ИначеЕсли ИмяПараметра = Врег("ФактическийАдресКонтрагента") Тогда
	
		Если ЗначениеЗаполнено(СведенияОКонтрагенте.ФактическийАдрес) Тогда
			Результат = СведенияОКонтрагенте.ФактическийАдрес;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 50);
			Успешно = Ложь;
		КонецЕсли;
	
	ИначеЕсли ИмяПараметра = Врег("ФактическийАдресОрганизации") Тогда

		Если ЗначениеЗаполнено(СведенияОбОрганизации.ФактическийАдрес) Тогда
			Результат = СведенияОбОрганизации.ФактическийАдрес;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 50);
			Успешно = Ложь;
		КонецЕсли;
	
	ИначеЕсли ИмяПараметра = Врег("ЮридическийАдресКонтрагента") Тогда

		Если ЗначениеЗаполнено(СведенияОКонтрагенте.ЮридическийАдрес) Тогда
			Результат = СведенияОКонтрагенте.ЮридическийАдрес;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 50);
			Успешно = Ложь;
		КонецЕсли;
	
	ИначеЕсли ИмяПараметра = Врег("ЮридическийАдресОрганизации") Тогда
	
		Если ЗначениеЗаполнено(СведенияОбОрганизации.ЮридическийАдрес) Тогда
			Результат = СведенияОбОрганизации.ЮридическийАдрес;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 50);
			Успешно = Ложь;
		КонецЕсли;
	
	Иначе
		// Пытаемся найти в таблицах доп. свойств
		СтрокаТаблицы = СведенияОДоговоре.ТаблицаДопСвойств.Найти(ИмяПараметра, "НаименованиеСвойства");
		Если СтрокаТаблицы = Неопределено Тогда
			СтрокаТаблицы = СведенияОКонтрагенте.ТаблицаДопСвойств.Найти(ИмяПараметра, "НаименованиеСвойства");
		КонецЕсли;
		Если СтрокаТаблицы = Неопределено Тогда
			СтрокаТаблицы = СведенияОбОрганизации.ТаблицаДопСвойств.Найти(ИмяПараметра, "НаименованиеСвойства");
		КонецЕсли;
		Если СтрокаТаблицы = Неопределено
			И СведенияОСчетеНаОплату <> Неопределено Тогда
			СтрокаТаблицы = СведенияОСчетеНаОплату.ТаблицаДопСвойств.Найти(ИмяПараметра, "НаименованиеСвойства");
		КонецЕсли;
		
		Если СтрокаТаблицы <> Неопределено Тогда
			Если ЗначениеЗаполнено(СтрокаТаблицы.ТекстоваяСтрока) Тогда
				Результат = СокрЛП(СтрокаТаблицы.ТекстоваяСтрока);
			ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.Значение) Тогда
				Результат = СокрЛП(СтрокаТаблицы.Значение);
			Иначе
				Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 30);
				Успешно = Ложь;
			КонецЕсли;
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 30);
			Успешно = Ложь;
		КонецЕсли;
	
	КонецЕсли;

	// Для некоторых параметров может быть пустая строка, 
	// поэтому проверяем только на Неопределено.
	Если Результат = Неопределено Тогда
		Результат = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", 30);
		Успешно = Ложь;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Вставляет в форматированный документ текст значения для составного параметра таким образом,
// чтобы оставить выделение только для частей параметра, а поясняющий текст возле них - без выделения.
//
// Параметры:
// 	СтрокаЗначения - Строка - текст значения для вставки. В тексте с помощью % выделены места, 
//							  в которые будут подставляться параметры.
//							  Например, "в лице %1% %2%, действующего(-ей) на основании %3".
//	ЗначенияСоставногоПараметра - Массив - значения отдельных частей параметра в том порядке, как они указаны в СтрокаЗначения.
//	ФорматированныйДокумент - ФорматированныйДокумент - документ, в котором производится замена.
//	ЭлементДокументаСПараметром - ТекстФорматированногоДокумента - элемент форматированного документа,
//								содержащий параметр, который сейчас заменяется на значение.
// 
Функция ВставитьСоставноеЗначение(СтрокаЗначения, ЗначенияСоставногоПараметра, ФорматированныйДокумент, ЭлементДокументаСПараметром) Экспорт 
	ДлинаДобавленногоТекста = 0;

	МассивПодстрок 		= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаЗначения, "%");
	ЗакладкаКонца 		= ЭлементДокументаСПараметром.ЗакладкаКонца;
	ЦветПоУмолчанию 	= Новый Цвет();
	ШрифтПоУмолчанию 	= Новый Шрифт();

	Для Каждого Подстрока Из МассивПодстрок Цикл
	
		ЗаменяемыйТекст = Подстрока;
		ЭтоПараметр 	= Ложь;
		СнятьВыделение 	= Истина;
		
		Если ЗначениеЗаполнено(ЗаменяемыйТекст) 
			И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СокрЛП(ЗаменяемыйТекст)) Тогда
			НомерПараметра = Число(СокрЛП(ЗаменяемыйТекст));
			Если НомерПараметра <= ЗначенияСоставногоПараметра.Количество() Тогда
				ЗаменяемыйТекст = ЗначенияСоставногоПараметра[НомерПараметра - 1];
				ЭтоПараметр	= Истина;
				СнятьВыделение = Лев(ЗаменяемыйТекст, 1) <> "_";
			Иначе
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В строке ""%1"" номер параметра %2 превышает количество элементов в массиве ЗначенияСоставногоПараметра'"),
					СтрокаЗначения,
					НомерПараметра);
			КонецЕсли;
		КонецЕсли;
		
		НовыйЭлемент = ФорматированныйДокумент.Вставить(ЗакладкаКонца, ЗаменяемыйТекст, Тип("ТекстФорматированногоДокумента"));
		Если НовыйЭлемент <> Неопределено Тогда // В случае пустых строк элемент документ может не создаваться.
			ДлинаДобавленногоТекста = ДлинаДобавленногоТекста + СтрДлина(ЗаменяемыйТекст);
			Если ЭтоПараметр Тогда
				// Оставляем исходный шрифт элемента
				НовыйЭлемент.Шрифт = ЭлементДокументаСПараметром.Шрифт;
			Иначе
				НовыйЭлемент.Шрифт = ШрифтПоУмолчанию;
			КонецЕсли;

			Если СнятьВыделение Тогда
				НовыйЭлемент.ЦветФона 	= ЦветПоУмолчанию;
			Иначе
				НовыйЭлемент.ЦветФона 	= ЭлементДокументаСПараметром.ЦветФона;
			КонецЕсли;
			
			// Запомним место вставки следующего элемента
			ЗакладкаКонца = НовыйЭлемент.ЗакладкаКонца;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДлинаДобавленногоТекста;

КонецФункции

Функция ДоговорКонтрагентаДляОбъекта(СсылкаНаОбъект) Экспорт

	Результат = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();

	Если ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		Результат = СсылкаНаОбъект;
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.ДоговорыКонтрагентовПрисоединенныеФайлы") Тогда
		Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "ВладелецФайла");
	Иначе
		МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(СсылкаНаОбъект));
		Если МетаданныеОбъекта <> Неопределено Тогда
			Если МетаданныеОбъекта.Реквизиты.Найти("ДоговорКонтрагента") <> Неопределено Тогда
				Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "ДоговорКонтрагента");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ФайлДоговораДляОбъекта(СсылкаНаОбъект) Экспорт

	Результат = Справочники.ДоговорыКонтрагентовПрисоединенныеФайлы.ПустаяСсылка();

	ДоговорКонтрагента = ДоговорКонтрагентаДляОбъекта(СсылкаНаОбъект);
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ФайлДоговора");
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция НомерИДатаДоговораДляОбъекта(СсылкаНаОбъект) Экспорт

	Результат = Новый Структура();
	Результат.Вставить("Номер", "");
	Результат.Вставить("Дата",	'0001-01-01');

	ДоговорКонтрагента = ДоговорКонтрагентаДляОбъекта(СсылкаНаОбъект);
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента, "Номер, Дата");
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ЦветФонаЗаменяемогоПараметра() Экспорт

	// Обращение к цвету фона через ЦветаСтиля.ФонЗаменяемогоПараметра 
	// возвращает цвет, которые не может быть сохранен в HTML (его составляющие RGB = -1).
	// Для возможности сохранения в HTML получаем абсолютный цвет.
	МетаданныеЭлементаСтиля = Метаданные.ЭлементыСтиля.ФонЗаменяемогоПараметра;
	
	Возврат Новый Цвет(МетаданныеЭлементаСтиля.Значение.Красный, 
						МетаданныеЭлементаСтиля.Значение.Зеленый,
						МетаданныеЭлементаСтиля.Значение.Синий);

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДопзаполнитьНаименованиеДопСвойств(ТаблицаДопСвойств)

	Если ТаблицаДопСвойств.Колонки.Найти("НаименованиеСвойства") <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеТипаСтрока = ОбщегоНазначения.ОписаниеТипаСтрока(Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ДлинаНаименования);
	ТаблицаДопСвойств.Колонки.Добавить("НаименованиеСвойства", ОписаниеТипаСтрока);
	
	МассивСвойств = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаДопСвойств, "Свойство");
	РеквизитыСвойств = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивСвойств, "Наименование");
	
	Для Каждого СтрокаТаблицы Из ТаблицаДопСвойств Цикл
		
		Сведения = РеквизитыСвойств[СтрокаТаблицы.Свойство];
		Если Сведения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы.НаименованиеСвойства = ВРег(Сведения.Наименование);
	
	КонецЦикла;
	
	ТаблицаДопСвойств.Индексы.Добавить("НаименованиеСвойства");

КонецПроцедуры

#КонецОбласти
