
#Область ПрограммныйИнтерфейс

// Возвращает текущую дату, приведенную к часовому поясу сеанса.
// Предназначена для использования вместо функции ТекущаяДата().
//
Функция ДатаСеанса() Экспорт
	
	Возврат ТекущаяДата();
	
КонецФункции

// Функция возвращает объект обработчика драйвера по его наименованию.
//
Функция ПолучитьОбработчикДрайвера(ОбработчикДрайвера, ЗагружаемыйДрайвер) Экспорт
	
	Результат = Неопределено;
	
	// Если драйвер загружаемый - использовать стандартный обработчик.
	Если ЗагружаемыйДрайвер Тогда
		Результат = ПодключаемоеОборудованиеУниверсальныйДрайверКлиент;  
	КонецЕсли;
	
	Если ОбработчикДрайвера <> Неопределено Тогда
		
		// Фискальные регистраторы
		Если ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1СФискальныйРегистраторЭмулятор") Тогда
			Возврат ПодключаемоеОборудованиеУниверсальныйДрайверКлиент;
		ИначеЕсли ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолФискальныеРегистраторы") Тогда
			Возврат ПодключаемоеОборудованиеАтолФискальныеРегистраторыКлиент;
		ИначеЕсли ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолФискальныеРегистраторыУниверсальный") Тогда
			Возврат ПодключаемоеОборудованиеУниверсальныйДрайверКлиент;
		ИначеЕсли ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолФискальныеРегистраторы8X") Тогда
			Возврат ПодключаемоеОборудованиеУниверсальныйДрайверКлиент;
		ИначеЕсли ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикВерсияТФискальныеРегистраторы") Тогда
			Возврат ПодключаемоеОборудованиеВерсияТФискальныеРегистраторыКлиент;
		ИначеЕсли ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикККСФискальныеРегистраторы") Тогда
			Возврат ПодключаемоеОборудованиеККСФискальныеРегистраторыКлиент;
		ИначеЕсли ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикШтрихМФискальныеРегистраторы") Тогда
			Возврат ПодключаемоеОборудованиеШтрихМФискальныеРегистраторыКлиент;
		ИначеЕсли ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикШтрихМФискальныеРегистраторыУниверсальный") Тогда
			Возврат ПодключаемоеОборудованиеУниверсальныйДрайверКлиент;
		ИначеЕсли ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикОРИОНФискальныеРегистраторы") Тогда
			Возврат ПодключаемоеОборудованиеОРИОНФискальныеРегистраторыКлиент;
		ИначеЕсли ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1СРарусФискальныеРегистраторыФеликс") Тогда
			Возврат ПодключаемоеОборудованиеУниверсальныйДрайверКлиент;
		ИначеЕсли ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1СРарусФискальныеРегистраторыМебиус") Тогда
			Возврат ПодключаемоеОборудованиеУниверсальныйДрайверКлиент;
		ИначеЕсли ОбработчикДрайвера = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикКристаллСервисФискальныеРегистраторыPirit") Тогда
			Возврат ПодключаемоеОборудованиеУниверсальныйДрайверКлиент;
		КонецЕсли;
		
		// Конец Фискальные регистраторы.
		
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Осуществляет печать фискального чека.
//
Функция ПечатьЧека(ОбщийМодульОборудования, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры, ВывестиСообщениеПользователю = Ложь) Экспорт
	
	ТаблицаНоменклатуры = ВходныеПараметры[0];
	ТаблицаОплат        = ВходныеПараметры[1];
	ОбщиеПараметры      = ВходныеПараметры[2];
	ТипДокумента        = ОбщиеПараметры[0];
	КопияЧека = ?(ОбщиеПараметры.Количество() > 2, ОбщиеПараметры[2], Ложь);
	КопияЧека = ?(КопияЧека = Неопределено, Ложь, КопияЧека);
	
	Результат  = Истина;
	
	Если КопияЧека Или ПараметрыПодключения.Свойство("ТипОборудования") И (ПараметрыПодключения.ТипОборудования = "ПринтерЧеков") Тогда
		
		Если НЕ ПараметрыПодключения.Свойство("ШиринаСтроки") Тогда
			ШиринаСтроки = 32;
			ВремВыходныеПараметры = Новый Массив();
			Если ОбщийМодульОборудования.ПолучитьШиринуСтроки(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВремВыходныеПараметры) Тогда
				ВремШиринаСтроки = ВремВыходныеПараметры[0];
				Если (ВремШиринаСтроки <> Неопределено) И (ВремШиринаСтроки > 0) Тогда
					ШиринаСтроки = ВремШиринаСтроки;
				КонецЕсли;
			КонецЕсли;  
			ПараметрыПодключения.Вставить("ШиринаСтроки", ШиринаСтроки);
		Иначе
			ШиринаСтроки = ПараметрыПодключения.ШиринаСтроки;
		КонецЕсли;
		
		ШиринаСтроки = ?(ПараметрыПодключения.Свойство("ШиринаСтроки"), ПараметрыПодключения.ШиринаСтроки, 32);
		Разделитель = МенеджерОборудованияКлиент.ПостроитьПоле("", ШиринаСтроки, "=") + Символы.ПС;
		
		ТекстЧека = Разделитель;
		ТекстЧека = ТекстЧека + СформироватьШапкуЧека(ШиринаСтроки, ОбщиеПараметры, ТипДокумента, ВходныеПараметры);
		
		ФорматЧисла = "ЧРД=,;ЧЦ=10;ЧДЦ=2;ЧН=0,00;ЧГ=0";
		// Формируем строки чека
		Если ТаблицаНоменклатуры <> Неопределено Тогда
			СуммаЧека = 0;
			Для ИндексМассива = 0 По ТаблицаНоменклатуры.Количество() - 1 Цикл
				
				Наименование  = ТаблицаНоменклатуры[ИндексМассива][0].Значение;
				Количество    = ТаблицаНоменклатуры[ИндексМассива][5].Значение;
				Цена          = ТаблицаНоменклатуры[ИндексМассива][4].Значение;
				ПроцентСкидки = ТаблицаНоменклатуры[ИндексМассива][8].Значение;
				Сумма         = ТаблицаНоменклатуры[ИндексМассива][9].Значение;
				НомерСекции   = ТаблицаНоменклатуры[ИндексМассива][3].Значение;
				СтавкаНДС     = ТаблицаНоменклатуры[ИндексМассива][12].Значение;
				
				ТекстСтроки  = МенеджерОборудованияКлиент.ПостроитьПолеПереносом(Наименование, ШиринаСтроки) + Символы.ПС;
				СтрокаТовара = Формат(Количество, "ЧРД=,;ЧЦ=10;ЧДЦ=3;ЧН=0,000;ЧГ=0") + " х " + Формат(Цена, ФорматЧисла) 
					+ " = " + Формат(Количество * Цена, ФорматЧисла) + Символы.ПС;
				ТекстСтроки = ТекстСтроки + МенеджерОборудованияКлиент.ПостроитьПоле(СтрокаТовара, ШиринаСтроки, , Ложь);
				Если Окр(Количество * Цена, 2) > Сумма Тогда
					ТекстСтроки = ТекстСтроки + МенеджерОборудованияКлиент.ПостроитьПоле(НСтр("ru='СКИДКА = '") 
					+ Формат(Количество * Цена - Сумма, ФорматЧисла) + " ", ШиринаСтроки, , Ложь)  + Символы.ПС;
				ИначеЕсли Окр(Количество * Цена, 2) < Сумма Тогда
					ТекстСтроки = ТекстСтроки + МенеджерОборудованияКлиент.ПостроитьПоле(НСтр("ru='НАДБАВКА = '")
					+ Формат(Сумма - Количество * Цена, ФорматЧисла) + " ", ШиринаСтроки, , Ложь) + Символы.ПС;
				КонецЕсли;
				
				ТекстЧека = ТекстЧека + ТекстСтроки;
				СуммаЧека = СуммаЧека + Сумма;
			КонецЦикла;
		КонецЕсли;
		
		Если ТипДокумента = 2 Или  ТипДокумента = 3 Тогда
			СуммаЧека = ОбщиеПараметры[1];
			ТекстЧека = ТекстЧека + НСтр("ru='СУММА = '") + Формат(СуммаЧека, ФорматЧисла) + Символы.ПС;
		ИначеЕсли ТипДокумента = 4 Или  ТипДокумента = 5 Тогда
			ТекстЧека = ТекстЧека + НСтр("ru='НЕ ФИСКАЛЬНЫЙ РЕЖИМ'") + Символы.ПС;
		КонецЕсли;

		// Формируем подвал чека
		Если ТаблицаОплат <> Неопределено Тогда
			ТекстЧека = ТекстЧека + СформироватьПодвалЧека(ШиринаСтроки, ОбщиеПараметры, ТаблицаОплат, СуммаЧека, ВходныеПараметры);
		КонецЕсли;
			
		ТекстЧека = ТекстЧека + Разделитель;
		
		// Закрываем чек                  
		Результат = ОбщийМодульОборудования.ПечатьТекста(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТекстЧека, ВыходныеПараметры);
		
	Иначе
		
		// Открываем чек
		Результат = ОбщийМодульОборудования.ОткрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения,
		                       ТипДокумента = 1, ОбщиеПараметры[1], ВыходныеПараметры);
		// Печатаем строки чека   
		Если Результат Тогда
			
			ОшибкаПриПечатиСтроки = Ложь;
			
			// Печатаем строки чека
			Для ИндексМассива = 0 По ТаблицаНоменклатуры.Количество() - 1 Цикл
				
				Наименование  = ТаблицаНоменклатуры[ИндексМассива][0].Значение;
				Количество    = ТаблицаНоменклатуры[ИндексМассива][5].Значение;
				Цена          = ТаблицаНоменклатуры[ИндексМассива][4].Значение;
				ПроцентСкидки = ТаблицаНоменклатуры[ИндексМассива][8].Значение;
				Сумма         = ТаблицаНоменклатуры[ИндексМассива][9].Значение;
				НомерСекции   = ТаблицаНоменклатуры[ИндексМассива][3].Значение;
				СтавкаНДС     = ТаблицаНоменклатуры[ИндексМассива][12].Значение;
				
				Если НЕ ОбщийМодульОборудования.НапечататьФискальнуюСтроку(ОбъектДрайвера, Параметры, ПараметрыПодключения,
												   Наименование, Количество, Цена, ПроцентСкидки, Сумма,
												   НомерСекции, СтавкаНДС, ВыходныеПараметры) Тогда
					ОшибкаПриПечатиСтроки = Истина;   
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ ОшибкаПриПечатиСтроки Тогда
			  	// Закрываем чек
				Результат = ОбщийМодульОборудования.ЗакрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТаблицаОплат, ВыходныеПараметры);
			Иначе
				Результат = Ложь;
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция формирует подвал чека
//
Функция СформироватьПодвалЧека(ШиринаСтроки, ОбщиеПараметры, ТаблицаОплат, СуммаЧека, ВходныеПараметры) Экспорт
	
	ТекстПодвала  = ?(ОбщиеПараметры.Количество() > 8, ВРег(ОбщиеПараметры[7]), "");
	ИмяКассира    = ?(ОбщиеПараметры.Количество() > 13, ВРег(ОбщиеПараметры[12]), "");
	
	СуммаНаличнойОплаты     = 0;
	СуммаБезналичнойОплаты1 = 0;
	СуммаБезналичнойОплаты2 = 0;
	СуммаБезналичнойОплаты3 = 0;
	Для ИндексОплаты = 0 По ТаблицаОплат.Количество() - 1 Цикл
		Если ТаблицаОплат[ИндексОплаты][0].Значение = 0 Тогда
			СуммаНаличнойОплаты = СуммаНаличнойОплаты + ТаблицаОплат[ИндексОплаты][1].Значение;
		ИначеЕсли ТаблицаОплат[ИндексОплаты][0].Значение = 1 Тогда
			СуммаБезналичнойОплаты1 = СуммаБезналичнойОплаты1 + ТаблицаОплат[ИндексОплаты][1].Значение;
		ИначеЕсли ТаблицаОплат[ИндексОплаты][0].Значение = 2 Тогда
			СуммаБезналичнойОплаты2 = СуммаБезналичнойОплаты2 + ТаблицаОплат[ИндексОплаты][1].Значение;
		Иначе
			СуммаБезналичнойОплаты3 = СуммаБезналичнойОплаты3 + ТаблицаОплат[ИндексОплаты][1].Значение;
		КонецЕсли;
	КонецЦикла;
	СуммаОплаты = СуммаНаличнойОплаты + СуммаБезналичнойОплаты1 + СуммаБезналичнойОплаты2 + СуммаБезналичнойОплаты3;
	
	ФорматЧисла = "ЧРД=,;ЧЦ=10;ЧДЦ=2;ЧН=0,00;ЧГ=0";
	
	РазделительВнут = МенеджерОборудованияКлиент.ПостроитьПоле("", ШиринаСтроки, "-") + Символы.ПС;
	
	Текст = РазделительВнут;
	Текст = Текст + НСтр("ru='         ИТОГ = '") + Формат(СуммаЧека, ФорматЧисла) + Символы.ПС;
	Текст = Текст + РазделительВнут;
	
	Если СуммаНаличнойОплаты > 0 Тогда
		Текст = Текст + НСтр("ru='    НАЛИЧНЫМИ = '") + Формат(СуммаНаличнойОплаты, ФорматЧисла) + Символы.ПС;
	КонецЕсли;
	Если СуммаБезналичнойОплаты1 > 0 Тогда
		Текст = Текст + НСтр("ru='  ПЛАТ.КАРТОЙ = '") + Формат(СуммаБезналичнойОплаты1, ФорматЧисла) + Символы.ПС;
	КонецЕсли;
	Если СуммаБезналичнойОплаты2 > 0 Тогда
		Текст = Текст + НСтр("ru='     КРЕДИТОМ = '") + Формат(СуммаБезналичнойОплаты2, ФорматЧисла) + Символы.ПС;
	КонецЕсли;
	Если СуммаБезналичнойОплаты3 > 0 Тогда
		Текст = Текст + НСтр("ru=' СЕРТИФИКАТОМ = '") + Формат(СуммаБезналичнойОплаты3, ФорматЧисла) + Символы.ПС;
	КонецЕсли;          
	
	Текст = Текст + РазделительВнут;
	Текст = Текст + НСтр("ru='        СДАЧА = '") + Формат(СуммаОплаты - СуммаЧека, ФорматЧисла) + Символы.ПС;
	Текст = Текст + РазделительВнут;
	
	Текст = Текст + МенеджерОборудованияКлиент.ПостроитьПоле(НСтр("ru=' КАССИР:'") + Символы.НПП + ИмяКассира, ШиринаСтроки) + Символы.ПС;                        
	Текст = Текст + МенеджерОборудованияКлиент.ПостроитьПоле("ПОДПИСЬ:", ШиринаСтроки, "_") + Символы.ПС + Символы.ПС;
	
	Если НЕ ПустаяСтрока(ТекстПодвала) Тогда
		Текст = Текст + МенеджерОборудованияКлиент.ВыстроитьПоля(ТекстПодвала, , ШиринаСтроки) + Символы.ПС;
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

// Функция формирует шапку чека
//
Функция СформироватьШапкуЧека(ШиринаСтроки, ОбщиеПараметры, ТипДокумента, ВходныеПараметры) Экспорт
	
	ТекстШапки    = ?(ОбщиеПараметры.Количество() > 7, ВРег(ОбщиеПараметры[6]), "");
	ТекстПодвала  = ?(ОбщиеПараметры.Количество() > 8, ВРег(ОбщиеПараметры[7]), "");
	НомерЧека     = ?(ОбщиеПараметры.Количество() > 10, ОбщиеПараметры[9], "");
	НомерКассы    = ?(ОбщиеПараметры.Количество() > 11, ОбщиеПараметры[10], "");
	ДатаВремя     = ?(ОбщиеПараметры.Количество() > 12, ВРег(ОбщиеПараметры[11]), "");
	ОрганизацияНазвание = ?(ОбщиеПараметры.Количество() > 14, ВРег(ОбщиеПараметры[13]), "");
	ОрганизацияИНН      = ?(ОбщиеПараметры.Количество() > 15, ОбщиеПараметры[14], "");
	
	Если ТипДокумента = 0 Тогда
		СтрТипДокумента = НСтр("ru='ПРОДАЖА'")
	ИначеЕсли ТипДокумента = 1 Тогда
		СтрТипДокумента = НСтр("ru='ВОЗВРАТ'")
	ИначеЕсли ТипДокумента = 2 Тогда
		СтрТипДокумента = НСтр("ru='ВНЕСЕНИЕ'")
	ИначеЕсли ТипДокумента = 3 Тогда
		СтрТипДокумента = НСтр("ru='ВЫЕМКА'")
	ИначеЕсли ТипДокумента = 4 Тогда
		СтрТипДокумента = НСтр("ru='X-ОТЧЕТ'")
	ИначеЕсли ТипДокумента = 5 Тогда
		СтрТипДокумента = НСтр("ru='Z-ОТЧЕТ'")
	Иначе
		СтрТипДокумента = "";
	КонецЕсли;
	
	РазделительВнут = МенеджерОборудованияКлиент.ПостроитьПоле("", ШиринаСтроки, "-") + Символы.ПС;
	
	Текст = "";
	Если НЕ ПустаяСтрока(ОрганизацияНазвание) Тогда
		Текст = Текст + МенеджерОборудованияКлиент.ВыстроитьПоля(ОрганизацияНазвание, , ШиринаСтроки) + Символы.ПС;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстШапки) Тогда
		Текст = Текст + МенеджерОборудованияКлиент.ВыстроитьПоля(ТекстШапки, , ШиринаСтроки) + Символы.ПС;
	КонецЕсли;
	
	НомерКассы = ?(НЕ ПустаяСтрока(НомерКассы), НСтр("ru='КАССА'") + Символы.НПП + НомерКассы, "");
	
	ОрганизацияИНН = ?(НЕ ПустаяСтрока(ОрганизацияИНН), НСтр("ru='ИНН'") + Символы.НПП + ОрганизацияИНН, "");
	Если Не ПустаяСтрока(НомерКассы) Или НЕ ПустаяСтрока(ОрганизацияИНН) Тогда
		Текст = Текст + МенеджерОборудованияКлиент.ВыстроитьПоля(НомерКассы, ОрганизацияИНН, ШиринаСтроки) + Символы.ПС;
	КонецЕсли;
	
	НомерЧека = ?(НЕ ПустаяСтрока(НомерЧека), НСтр("ru='ЧЕК №'") + НомерЧека, "");
	Если Не ПустаяСтрока(НомерЧека) Тогда
		Текст = Текст + МенеджерОборудованияКлиент.ВыстроитьПоля(СтрТипДокумента, НомерЧека, ШиринаСтроки) + Символы.ПС;
	Иначе
		Текст = Текст + МенеджерОборудованияКлиент.ПостроитьПоле(СтрТипДокумента, ШиринаСтроки) + Символы.ПС;
	КонецЕсли;
	
	ДатаВремя = ?(ПустаяСтрока(ДатаВремя), ДатаВремя, ТекущаяДата());
	ДатаВремя = Формат(ДатаВремя, "ДФ=""дд.ММ.гггг ЧЧ:мм""");
	Если Не ПустаяСтрока(ДатаВремя) Тогда
		Текст = Текст + МенеджерОборудованияКлиент.ПостроитьПоле(ДатаВремя, ШиринаСтроки, , Ложь) + Символы.ПС;
	КонецЕсли;
	
	Текст = Текст + РазделительВнут;
	 
	Возврат Текст;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыПодключенияОтключенияОборудования

// Начать подключение необходимых типов оборудования при открытии формы.
//
// Параметры:
// Форма - УправляемаяФорма
// ПоддерживаемыеТипыПодключаемогоОборудования - Строка
//  Содержит перечень типов подключаемого оборудования, разделенных запятыми.
//
Процедура НачатьПодключениеОборудованиеПриОткрытииФормы(Форма, ПоддерживаемыеТипыПодключаемогоОборудования) Экспорт
	
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(, Форма, ПоддерживаемыеТипыПодключаемогоОборудования);
	
КонецПроцедуры

// Начать отключать оборудование по типу при закрытии формы.
//
Процедура НачатьОтключениеОборудованиеПриЗакрытииФормы(Форма) Экспорт
	
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(, Форма);
	
КонецПроцедуры

#КонецОбласти
 
#Область РаботаСФормойЭкземпляраОборудования

// Дополнительные переопределяемые действия с управляемой формой в Экземпляре оборудования
// при событии "ПриОткрытии".
//
Процедура ЭкземплярОборудованияПриОткрытии(Объект, ЭтаФорма, Отказ) Экспорт
	
КонецПроцедуры

// Дополнительные переопределяемые действия с управляемой формой в Экземпляре оборудования
// при событии "ПередЗакрытием".
//
Процедура ЭкземплярОборудованияПередЗакрытием(Объект, ЭтаФорма, Отказ, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Дополнительные переопределяемые действия с управляемой формой в Экземпляре оборудования
// при событии "ПередЗаписью".
//
Процедура ЭкземплярОборудованияПередЗаписью(Объект, ЭтаФорма, Отказ, ПараметрыЗаписи) Экспорт
	
КонецПроцедуры

// Дополнительные переопределяемые действия с управляемой формой в Экземпляре оборудования
// при событии "ПослеЗаписи".
//
Процедура ЭкземплярОборудованияПослеЗаписи(Объект, ЭтаФорма, ПараметрыЗаписи) Экспорт
	
КонецПроцедуры

// Дополнительные переопределяемые действия с управляемой формой в Экземпляре оборудования
// при событии "ТипОборудованияОбработкаВыбора".
//
Процедура ЭкземплярОборудованияТипОборудованияВыбор(Объект, ЭтаФорма, ЭтотОбъект, Элемент, ВыбранноеЗначение) Экспорт
	
КонецПроцедуры

#КонецОбласти