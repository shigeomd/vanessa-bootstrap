#Область ПрограммныйИнтерфейс

Процедура ЗаполнитьДанныеОтветственныхЛиц(СведенияОДокументе, ПорядокЗаполнения) Экспорт
	
	ОтветственныеЛицаОрганизации = ОтветственныеЛицаБП.ОтветственныеЛица(СведенияОДокументе.Организация, СведенияОДокументе.ДатаДляПолученияСведений, СведенияОДокументе.Подразделение);
	
	Если ПорядокЗаполнения.Свойство("ЗаполнятьРуководителя") Тогда
		Если НЕ ЗначениеЗаполнено(СведенияОДокументе.Руководитель)
			ИЛИ СведенияОДокументе.Руководитель = ОтветственныеЛицаОрганизации.Руководитель Тогда
			СведенияОДокументе.Руководитель = ОтветственныеЛицаОрганизации.Руководитель;
			СведенияОДокументе.РуководительФИО = ОтветственныеЛицаОрганизации.РуководительПредставление;
			СведенияОДокументе.РуководительСтруктураФИО = ОтветственныеЛицаОрганизации.РуководительФИО;
			СведенияОДокументе.РуководительДолжность = ОтветственныеЛицаОрганизации.РуководительДолжность;
			СведенияОДокументе.РуководительДолжностьНаименование = ОтветственныеЛицаОрганизации.РуководительДолжностьПредставление;
			СведенияОДокументе.ЗаРуководителяПоПриказу = "";
		Иначе
			ДанныеОтветственногоЛица = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(СведенияОДокументе.Организация, СведенияОДокументе.Руководитель, СведенияОДокументе.ДатаДляПолученияСведений);
			СведенияОДокументе.РуководительФИО = ДанныеОтветственногоЛица.Представление;
			СтруктураФИО = Новый Структура("Фамилия, Имя, Отчество, Представление");
			ЗаполнитьЗначенияСвойств(СтруктураФИО, ДанныеОтветственногоЛица);
			СведенияОДокументе.РуководительСтруктураФИО = СтруктураФИО;
			СведенияОДокументе.РуководительДолжность = ДанныеОтветственногоЛица.Должность;
			Если ЗначениеЗаполнено(СведенияОДокументе.РуководительДолжность) Тогда
				СведенияОДокументе.РуководительДолжностьНаименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СведенияОДокументе.РуководительДолжность, "Наименование");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПорядокЗаполнения.Свойство("ЗаполнятьГлавногоБухгалтера") Тогда
		Если НЕ ЗначениеЗаполнено(СведенияОДокументе.ГлавныйБухгалтер)
			ИЛИ СведенияОДокументе.ГлавныйБухгалтер = ОтветственныеЛицаОрганизации.ГлавныйБухгалтер Тогда
			СведенияОДокументе.ГлавныйБухгалтер = ОтветственныеЛицаОрганизации.ГлавныйБухгалтер;
			СведенияОДокументе.ГлавныйБухгалтерФИО = ОтветственныеЛицаОрганизации.ГлавныйБухгалтерПредставление;
			СведенияОДокументе.ГлавныйБухгалтерСтруктураФИО = ОтветственныеЛицаОрганизации.ГлавныйБухгалтерФИО;
			СведенияОДокументе.ГлавныйБухгалтерДолжность = ОтветственныеЛицаОрганизации.ГлавныйБухгалтерДолжность;
			СведенияОДокументе.ГлавныйБухгалтерДолжностьНаименование = ОтветственныеЛицаОрганизации.ГлавныйБухгалтерДолжностьПредставление;
			СведенияОДокументе.ЗаГлавногоБухгалтераПоПриказу = "";
		Иначе
			ДанныеОтветственногоЛица = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(СведенияОДокументе.Организация, СведенияОДокументе.ГлавныйБухгалтер, СведенияОДокументе.ДатаДляПолученияСведений);
			СведенияОДокументе.ГлавныйБухгалтерФИО = ДанныеОтветственногоЛица.Представление;
			СтруктураФИО = Новый Структура("Фамилия, Имя, Отчество, Представление");
			ЗаполнитьЗначенияСвойств(СтруктураФИО, ДанныеОтветственногоЛица);
			СведенияОДокументе.ГлавныйБухгалтерСтруктураФИО = СтруктураФИО;
			СведенияОДокументе.ГлавныйБухгалтерДолжность = ДанныеОтветственногоЛица.Должность;
			Если ЗначениеЗаполнено(СведенияОДокументе.ГлавныйБухгалтерДолжность) Тогда
				СведенияОДокументе.ГлавныйБухгалтерДолжностьНаименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СведенияОДокументе.ГлавныйБухгалтерДолжность, "Наименование");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПорядокЗаполнения.Свойство("ЗаполнятьКладовщика") Тогда
		Если ЗначениеЗаполнено(СведенияОДокументе.Кладовщик) Тогда
			ДанныеОтветственногоЛица = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(СведенияОДокументе.Организация, СведенияОДокументе.Кладовщик, СведенияОДокументе.ДатаДляПолученияСведений);
			СведенияОДокументе.КладовщикФИО = ДанныеОтветственногоЛица.Представление;
			СтруктураФИО = Новый Структура("Фамилия, Имя, Отчество, Представление");
			ЗаполнитьЗначенияСвойств(СтруктураФИО, ДанныеОтветственногоЛица);
			СведенияОДокументе.КладовщикСтруктураФИО = СтруктураФИО;
			СведенияОДокументе.КладовщикДолжность = ДанныеОтветственногоЛица.Должность;
			Если ЗначениеЗаполнено(СведенияОДокументе.КладовщикДолжность) Тогда
				СведенияОДокументе.КладовщикДолжностьНаименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СведенияОДокументе.КладовщикДолжность, "Наименование");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьМинимальныеПоляПечати(ТабличныйДокумент) Экспорт

	// Проверка на веб-клиент
	СисИнфо = Новый СистемнаяИнформация;
	ЗначениеБоковогоПоля = ?(ПустаяСтрока(СисИнфо.ИнформацияПрограммыПросмотра), 5, 10); 
	
	Если ТабличныйДокумент.ПолеСлева < ЗначениеБоковогоПоля Тогда
		ТабличныйДокумент.ПолеСлева = ЗначениеБоковогоПоля;
	КонецЕсли; 
	
	Если ТабличныйДокумент.ПолеСправа < ЗначениеБоковогоПоля Тогда
		ТабличныйДокумент.ПолеСправа = ЗначениеБоковогоПоля;
	КонецЕсли;
	
	Если ТабличныйДокумент.ПолеСверху < 5 Тогда
		ТабличныйДокумент.ПолеСверху = 5;
	КонецЕсли; 

	Если ТабличныйДокумент.ПолеСнизу < 5 Тогда
		ТабличныйДокумент.ПолеСнизу = 5;
	КонецЕсли;

КонецПроцедуры

#Область ТОРГ12

Функция ПолучитьОписаниеТОРГ12() Экспорт
	
	ТипОрганизацияКонтрагент = Новый Массив();
	ТипОрганизацияКонтрагент.Добавить(Тип("СправочникСсылка.Контрагенты"));
	ТипОрганизацияКонтрагент.Добавить(Тип("СправочникСсылка.Организации"));
	
	ОписаниеДаты = Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	Таблица = Новый ТаблицаЗначений();
	Таблица.Колонки.Добавить("Документ");
	
	Таблица.Колонки.Добавить("ДатаДляПолученияСведений",    ОписаниеДаты);
	Таблица.Колонки.Добавить("НомерДокумента",          	Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ДатаДокумента",           	ОписаниеДаты);
	Таблица.Колонки.Добавить("НомерИсправления",        	Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ДатаИсправления",         	ОписаниеДаты);
	Таблица.Колонки.Добавить("ДатаПодписанияДокумента", 	ОписаниеДаты);
	Таблица.Колонки.Добавить("ДокументОснование"			);
	
	Таблица.Колонки.Добавить("Организация",      Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Таблица.Колонки.Добавить("Подразделение",    Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Таблица.Колонки.Добавить("Поставщик",        Новый ОписаниеТипов(ТипОрганизацияКонтрагент));
	Таблица.Колонки.Добавить("Грузоотправитель", Новый ОписаниеТипов(ТипОрганизацияКонтрагент));
	Таблица.Колонки.Добавить("Покупатель",       Новый ОписаниеТипов(ТипОрганизацияКонтрагент));
	Таблица.Колонки.Добавить("Грузополучатель",  Новый ОписаниеТипов(ТипОрганизацияКонтрагент));
	
	Таблица.Колонки.Добавить("БанковскийСчетПродавца",     Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета"));
	
	Таблица.Колонки.Добавить("АдресДоставки",              Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ТранспортнаяНакладнаяНомер", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ТранспортнаяНакладнаяДата",  ОписаниеДаты);
	
	Таблица.Колонки.Добавить("Договор",        Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	Таблица.Колонки.Добавить("Основание",      Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ОснованиеНомер", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ОснованиеДата",  ОписаниеДаты);
	
	Таблица.Колонки.Добавить("Валюта",          	Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	Таблица.Колонки.Добавить("ВалютаКод",       	Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ВалютаНаименование",  Новый ОписаниеТипов("Строка"));
	
	Таблица.Колонки.Добавить("Руководитель",                      		Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Таблица.Колонки.Добавить("РуководительФИО",                   		Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("РуководительСтруктураФИО",          		Новый ОписаниеТипов("Структура"));
	Таблица.Колонки.Добавить("ЗаРуководителяПоПриказу",           		Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("РуководительДолжностьНаименование", 		Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("РуководительДолжность",             		Новый ОписаниеТипов("СправочникСсылка.Должности"));
	Таблица.Колонки.Добавить("ГлавныйБухгалтер",                  		Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Таблица.Колонки.Добавить("ГлавныйБухгалтерФИО",               		Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ГлавныйБухгалтерСтруктураФИО",     		Новый ОписаниеТипов("Структура"));
	Таблица.Колонки.Добавить("ЗаГлавногоБухгалтераПоПриказу",      		Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ГлавныйБухгалтерДолжностьНаименование", 	Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ГлавныйБухгалтерДолжность",             	Новый ОписаниеТипов("СправочникСсылка.Должности"));
	Таблица.Колонки.Добавить("Кладовщик",                         		Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Таблица.Колонки.Добавить("КладовщикФИО",                      		Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("КладовщикСтруктураФИО",             		Новый ОписаниеТипов("Структура"));
	Таблица.Колонки.Добавить("КладовщикДолжность",                		Новый ОписаниеТипов("СправочникСсылка.Должности"));
	Таблица.Колонки.Добавить("КладовщикДолжностьНаименование",    		Новый ОписаниеТипов("Строка"));
	
	Таблица.Колонки.Добавить("ДоверенностьНомер",       Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ДоверенностьВыдана",      Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ДоверенностьЧерезКого",   Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ДоверенностьДата",        ОписаниеДаты);
	
	Таблица.Колонки.Добавить("ТаблицаДокумента");
	
	Возврат Таблица;
	
КонецФункции

Функция ПолучитьОписаниеТаблицыТОРГ12() Экспорт
	
	ОписаниеТиповЧисло15_2 = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2);
	ОписаниеТиповЧисло15_3 = ОбщегоНазначения.ОписаниеТипаЧисло(15, 3);
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ТабличнаяЧасть", 				 Новый ОписаниеТипов("ПеречислениеСсылка.ТабличныеЧастиДокументов"));
	Таблица.Колонки.Добавить("НомерСтроки", 				 ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
	Таблица.Колонки.Добавить("Товар", 						 Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Таблица.Колонки.Добавить("ТоварНаименование", 			 Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ТоварКод", 					 Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Количество", 					 ОписаниеТиповЧисло15_3);
	Таблица.Колонки.Добавить("КоличествоМест", 				 ОписаниеТиповЧисло15_3);
	Таблица.Колонки.Добавить("КоличествоВОдномМесте", 		 ОписаниеТиповЧисло15_3);
	Таблица.Колонки.Добавить("ЕдиницаИзмерения",             Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения"));
	Таблица.Колонки.Добавить("ЕдиницаИзмеренияНаименование", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ЕдиницаИзмеренияКод",          Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ВидУпаковки",                  Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения"));
	Таблица.Колонки.Добавить("ВидУпаковкиКод",               Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ВидУпаковкиНаименование",      Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("МассаБрутто", 				 ОписаниеТиповЧисло15_3);
	Таблица.Колонки.Добавить("Цена",						 ОписаниеТиповЧисло15_2);
	Таблица.Колонки.Добавить("СуммаБезНДС",					 ОписаниеТиповЧисло15_2);
	Таблица.Колонки.Добавить("СуммаНДС",					 ОписаниеТиповЧисло15_2);
	Таблица.Колонки.Добавить("СуммаСНДС",					 ОписаниеТиповЧисло15_2);
	Таблица.Колонки.Добавить("СтавкаНДС", 					 Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	
	Возврат Таблица;
	
КонецФункции

Функция ПечатьТОРГ12(СведенияТОРГ12, ОбъектыПечати, ИмяПараметровПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб         = Истина;
	ТабличныйДокумент.ОриентацияСтраницы  = ОриентацияСтраницы.Ландшафт;
	
	
	ТабличныйДокумент.ИмяПараметровПечати = ИмяПараметровПечати;
	
	УстановитьМинимальныеПоляПечати(ТабличныйДокумент);
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_ТОРГ12");
	
	ПервыйДокумент = Истина;
	
	Для Каждого СведенияОДокументе Из СведенияТОРГ12 Цикл
		
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТаблицаДокумента = СведенияОДокументе.ТаблицаДокумента;
	
		ОбластьМакетаШапка            = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаб");
		ОбластьМакетаСтрока           = Макет.ПолучитьОбласть("Строка");
		ОбластьМакетаИтогоПоСтранице  = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьМакетаВсего            = Макет.ПолучитьОбласть("Всего");
		ОбластьМакетаПодвал           = Макет.ПолучитьОбласть("Подвал");
		
		// Выводим общие реквизиты шапки
		СведенияОПоставщике       = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(
				СведенияОДокументе.Поставщик, СведенияОДокументе.ДатаДляПолученияСведений, СведенияОДокументе.БанковскийСчетПродавца);
		СведенияОГрузоотправителе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(СведенияОДокументе.Грузоотправитель, СведенияОДокументе.ДатаДляПолученияСведений);
		СведенияОПокупателе       = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(СведенияОДокументе.Покупатель,       СведенияОДокументе.ДатаДляПолученияСведений);
		СведенияОГрузополучателе  = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(СведенияОДокументе.Грузополучатель,  СведенияОДокументе.ДатаДляПолученияСведений);
		
		ОбластьМакетаШапка.Параметры.Заполнить(СведенияОДокументе);
		
		Если ЗначениеЗаполнено(СведенияОДокументе.НомерИсправления) И ЗначениеЗаполнено(СведенияОДокументе.ДатаИсправления) Тогда
			
			ОбластьМакетаШапка.Параметры.ТекстИсправления 	= НСтр("ru='Исправление   '");
			ОбластьМакетаШапка.Параметры.НомерИсправления 	= СведенияОДокументе.НомерИсправления;
			ОбластьМакетаШапка.Параметры.ДатаИсправления 	= Формат(СведенияОДокументе.ДатаИсправления, "ДФ=dd.MM.yyyy");
			
			ЛинияГраницыРеквизитовИсправления = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
			ОбластьНомерИсправления = ОбластьМакетаШапка.Области.НомерИсправления;
			ОбластьНомерИсправления.ГраницаСнизу 	= ЛинияГраницыРеквизитовИсправления;
			ОбластьНомерИсправления.ГраницаСлева 	= ЛинияГраницыРеквизитовИсправления;
			ОбластьНомерИсправления.ГраницаСправа 	= ЛинияГраницыРеквизитовИсправления;
			
			ОбластьДатаИсправления = ОбластьМакетаШапка.Области.ДатаИсправления;
			ОбластьДатаИсправления.ГраницаСнизу 	= ЛинияГраницыРеквизитовИсправления;
			ОбластьДатаИсправления.ГраницаСлева 	= ЛинияГраницыРеквизитовИсправления;
			ОбластьДатаИсправления.ГраницаСправа 	= ЛинияГраницыРеквизитовИсправления;

 		КонецЕсли;
		
		Если СведенияОДокументе.Поставщик = СведенияОДокументе.Грузоотправитель Тогда
			ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике);
		Иначе
			ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(
				СведенияОГрузоотправителе, "НаименованиеДляПечатныхФорм,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СведенияОДокументе.Подразделение) Тогда
			СведенияОПодразделении = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СведенияОДокументе.Подразделение, "ОбособленноеПодразделение, НаименованиеПолное");
			ОбластьМакетаШапка.Параметры.ПредставлениеПодразделения = ?(СведенияОПодразделении.ОбособленноеПодразделение, СведенияОПодразделении.НаименованиеПолное, "");
		КонецЕсли; 
		
		Если СокрЛП(СведенияОДокументе.АдресДоставки) <> "" Тогда
			ПредставлениеГрузополучателяДоАдреса    = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(
				СведенияОГрузополучателе, "НаименованиеДляПечатныхФорм,ИНН,");
			ПредставлениеГрузополучателяПослеАдреса = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(
				СведенияОГрузополучателе, "Телефоны,НомерСчета,Банк,БИК,КоррСчет,");
			ОбластьМакетаШапка.Параметры.ПредставлениеГрузополучателя = ?(СокрЛП(ПредставлениеГрузополучателяДоАдреса) = "",
				"", ПредставлениеГрузополучателяДоАдреса+", ") + СведенияОДокументе.АдресДоставки
				+ ?(СокрЛП(ПредставлениеГрузополучателяПослеАдреса)="", "", ", "+ПредставлениеГрузополучателяПослеАдреса);
		Иначе
			ОбластьМакетаШапка.Параметры.ПредставлениеГрузополучателя = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(
				СведенияОГрузополучателе,"НаименованиеДляПечатныхФорм,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
		КонецЕсли;
		
		ОбластьМакетаШапка.Параметры.ПредставлениеПоставщика  = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике);
		ОбластьМакетаШапка.Параметры.ПредставлениеПлательщика = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе);
		
		// Выводим всевозможные коды
		ОбластьМакетаШапка.Параметры.ОрганизацияПоОКПО          = СведенияОГрузоотправителе.КодПоОКПО;
		ОбластьМакетаШапка.Параметры.ВидДеятельностиПоОКДП      = "";
		ОбластьМакетаШапка.Параметры.ГрузополучательПоОКПО      = СведенияОГрузополучателе.КодПоОКПО;
		ОбластьМакетаШапка.Параметры.ПоставщикПоОКПО            = СведенияОПоставщике.КодПоОКПО;
		ОбластьМакетаШапка.Параметры.ПлательщикПоОКПО           = СведенияОПокупателе.КодПоОКПО;
		ОбластьМакетаШапка.Параметры.ТранспортнаяНакладнаяНомер = "";
		ОбластьМакетаШапка.Параметры.ТранспортнаяНакладнаяДата  = "";
		
		ТабличныйДокумент.Вывести(ОбластьМакетаШапка);
		
		// Инициализация счетчика страниц
		НомерСтраницы = 1;
		
		// Инициализация итогов по странице
		ИтогоМестНаСтранице        = 0;
		ИтогоКоличествоНаСтранице  = 0;
		ИтогоСуммаБезНДСНаСтранице = 0;
		ИтогоНДСНаСтранице         = 0;
		ИтогоСуммаСНДСНаСтранице   = 0;
		
		// Инициализация итогов по документу
		ИтогоМест        = 0;
		ИтогоКоличество  = 0;
		ИтогоСуммаСНДС   = 0;
		ИтогоСуммаБезНДС = 0;
		ИтогоНДС         = 0;
		
		// Инициализация счетчика строк
		НомерСтроки     = 0;
		КоличествоСтрок = ТаблицаДокумента.Количество();
		
		// Выводим заголовок многострочной части
		ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
		ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
		
		// Выводим многострочную часть документа
		Для Каждого СтрокаДокумента Из ТаблицаДокумента Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			ОбластьМакетаСтрока.Параметры.Номер = НомерСтроки;
			ОбластьМакетаСтрока.Параметры.ТоварНаименование 	   	 = СтрокаДокумента.ТоварНаименование;
			ОбластьМакетаСтрока.Параметры.ТоварКод 					 = СтрокаДокумента.ТоварКод;
			ОбластьМакетаСтрока.Параметры.БазоваяЕдиницаНаименование = СтрокаДокумента.ЕдиницаИзмеренияНаименование;
			ОбластьМакетаСтрока.Параметры.БазоваяЕдиницаКодПоОКЕИ    = СтрокаДокумента.ЕдиницаИзмеренияКод;
			
			ОбластьМакетаСтрока.Параметры.КоличествоМест             = СтрокаДокумента.КоличествоМест;
			Если НЕ ЗначениеЗаполнено(СтрокаДокумента.КоличествоМест) Тогда
				ОбластьМакетаСтрока.Параметры.ВидУпаковки           = "";
				ОбластьМакетаСтрока.Параметры.КоличествоВОдномМесте = "";
			Иначе
				ОбластьМакетаСтрока.Параметры.ВидУпаковки                = СтрокаДокумента.ВидУпаковкиНаименование;
				ОбластьМакетаСтрока.Параметры.КоличествоВОдномМесте      = СтрокаДокумента.КоличествоВОдномМесте;
			КонецЕсли;
			
			ОбластьМакетаСтрока.Параметры.Количество                 = СтрокаДокумента.Количество;
			ОбластьМакетаСтрока.Параметры.Цена                       = СтрокаДокумента.Цена;
			ОбластьМакетаСтрока.Параметры.СуммаБезНДС                = СтрокаДокумента.СуммаБезНДС;
			ОбластьМакетаСтрока.Параметры.СтавкаНДС                  = СтрокаДокумента.СтавкаНДС;
			ОбластьМакетаСтрока.Параметры.СуммаНДС                   = СтрокаДокумента.СуммаНДС;
			ОбластьМакетаСтрока.Параметры.СуммаСНДС                  = СтрокаДокумента.СуммаСНДС;
			
			// Проверим вывод
			СтрокаСПодвалом = Новый Массив;
			Если НомерСтроки = 1 Тогда
				СтрокаСПодвалом.Добавить(ОбластьМакетаЗаголовокТаблицы); // если первая строка, то должен
			КонецЕсли;                                                   // помещаться заголовок
			СтрокаСПодвалом.Добавить(ОбластьМакетаСтрока);
			СтрокаСПодвалом.Добавить(ОбластьМакетаИтогоПоСтранице);
			Если НомерСтроки = КоличествоСтрок Тогда           			 // если последняя строка, должен
				СтрокаСПодвалом.Добавить(ОбластьМакетаВсего);  			 // помещаться и подвал документа
				СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
			КонецЕсли;
			
			Если НЕ ОбщегоНазначенияБПВызовСервера.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, СтрокаСПодвалом) Тогда
				
				Если КоличествоСтрок > 1 Тогда
					
					// Выводим итоги по странице
					ОбластьМакетаИтогоПоСтранице.Параметры.ИтогМестПоСтранице       = ИтогоМестНаСтранице;
					ОбластьМакетаИтогоПоСтранице.Параметры.ИтогКоличествоПоСтранице = ИтогоКоличествоНаСтранице;
					ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыПоСтранице      = ИтогоСуммаБезНДСНаСтранице;
					ОбластьМакетаИтогоПоСтранице.Параметры.ИтогНДСПоСтранице        = ИтогоНДСНаСтранице;
					ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице  = ИтогоСуммаСНДСНаСтранице;
					ТабличныйДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
					
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					
					// Очистим итоги по странице
					ИтогоМестНаСтранице        = 0;
					ИтогоКоличествоНаСтранице  = 0;
					ИтогоСуммаБезНДСНаСтранице = 0;
					ИтогоНДСНаСтранице         = 0;
					ИтогоСуммаСНДСНаСтранице   = 0;
					
					// Выведем заголовок таблицы
					НомерСтраницы = НомерСтраницы + 1;
					ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
					ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
					
				КонецЕсли;
				
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьМакетаСтрока);
			
			// Увеличим итоги по странице
			ИтогоМестНаСтранице        = ИтогоМестНаСтранице        + СтрокаДокумента.КоличествоМест;
			ИтогоКоличествоНаСтранице  = ИтогоКоличествоНаСтранице  + СтрокаДокумента.Количество;
			ИтогоСуммаБезНДСНаСтранице = ИтогоСуммаБезНДСНаСтранице + СтрокаДокумента.СуммаБезНДС;
			ИтогоНДСНаСтранице         = ИтогоНДСНаСтранице         + СтрокаДокумента.СуммаНДС;
			ИтогоСуммаСНДСНаСтранице   = ИтогоСуммаСНДСНаСтранице   + СтрокаДокумента.СуммаСНДС;
			
			// Увеличим итоги по документу
			ИтогоМест        = ИтогоМест        + СтрокаДокумента.КоличествоМест;
			ИтогоКоличество  = ИтогоКоличество  + СтрокаДокумента.Количество;
			ИтогоСуммаБезНДС = ИтогоСуммаБезНДС + СтрокаДокумента.СуммаБезНДС;
			ИтогоНДС         = ИтогоНДС         + СтрокаДокумента.СуммаНДС;
			ИтогоСуммаСНДС   = ИтогоСуммаСНДС   + СтрокаДокумента.СуммаСНДС;
			
		КонецЦикла;
		
		// Выводим итоги по странице
		ОбластьМакетаИтогоПоСтранице.Параметры.ИтогМестПоСтранице       = ИтогоМестНаСтранице;
		ОбластьМакетаИтогоПоСтранице.Параметры.ИтогКоличествоПоСтранице = ИтогоКоличествоНаСтранице;
		ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыПоСтранице      = ИтогоСуммаБезНДСНаСтранице;
		ОбластьМакетаИтогоПоСтранице.Параметры.ИтогНДСПоСтранице        = ИтогоНДСНаСтранице;
		ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице  = ИтогоСуммаСНДСНаСтранице;
		
		ТабличныйДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
		
		// Выводим итоги по документу в целом
		ОбластьМакетаВсего.Параметры.ИтогМест       = ИтогоМест;
		ОбластьМакетаВсего.Параметры.ИтогКоличество = ИтогоКоличество;
		ОбластьМакетаВсего.Параметры.ИтогСуммы      = ИтогоСуммаБезНДС;
		ОбластьМакетаВсего.Параметры.ИтогНДС        = ИтогоНДС;
		ОбластьМакетаВсего.Параметры.ИтогСуммыСНДС  = ИтогоСуммаСНДС;
		
		ТабличныйДокумент.Вывести(ОбластьМакетаВсего);
		
		// Выводим подвал документа
		ОбластьМакетаПодвал.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(ТаблицаДокумента.Количество(), ,",,,,,,,,0");
		ОбластьМакетаПодвал.Параметры.ВсегоМестПрописью                       	= ?(ИтогоМест = 0, "", ЧислоПрописью(ИтогоМест, ,",,,С,,,,,0")); 
		
		ОбластьМакетаПодвал.Параметры.СуммаПрописью = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(ИтогоСуммаСНДС, СведенияОДокументе.Валюта);
		
		ЗаРуководителяПоПриказу = ?(СведенияОДокументе.ЗаРуководителяПоПриказу = "", "" , ", "+СведенияОДокументе.ЗаРуководителяПоПриказу);
		ОбластьМакетаПодвал.Параметры.ФИОРуководителя       = СведенияОДокументе.РуководительФИО + ЗаРуководителяПоПриказу;
		ОбластьМакетаПодвал.Параметры.ДолжностьРуководителя = СведенияОДокументе.РуководительДолжность;
		
		ЗаГлавногоБухгалтераПоПриказу = ?(СведенияОДокументе.ЗаГлавногоБухгалтераПоПриказу = "", "" , ", "+СведенияОДокументе.ЗаГлавногоБухгалтераПоПриказу);
		ОбластьМакетаПодвал.Параметры.ФИОГлавБухгалтера = СведенияОДокументе.ГлавныйБухгалтерФИО + ЗаГлавногоБухгалтераПоПриказу;
		
		ОбластьМакетаПодвал.Параметры.ФИОКладовщика = СведенияОДокументе.КладовщикФИО;
		ОбластьМакетаПодвал.Параметры.ДолжностьКладовщика = СведенияОДокументе.КладовщикДолжность;
		
		Если ЗначениеЗаполнено(СведенияОДокументе.ДатаПодписанияДокумента) Тогда
			ПолнаяДатаДокумента = Формат(СведенияОДокументе.ДатаПодписанияДокумента, "ДФ=""дд ММММ гггг """"года""""""");
			ДлинаСтроки         = СтрДлина(ПолнаяДатаДокумента);
			ПервыйРазделитель   = Найти(ПолнаяДатаДокумента," ");
			ВторойРазделитель   = Найти(Прав(ПолнаяДатаДокумента,ДлинаСтроки - ПервыйРазделитель), " ") + ПервыйРазделитель;
			
			ОбластьМакетаПодвал.Параметры.ДатаДокументаДень  = """" + Лев(ПолнаяДатаДокумента, ПервыйРазделитель - 1) + """";
			ОбластьМакетаПодвал.Параметры.ДатаДокументаМесяц = Сред(ПолнаяДатаДокумента, ПервыйРазделитель + 1, ВторойРазделитель - ПервыйРазделитель - 1);
			ОбластьМакетаПодвал.Параметры.ДатаДокументаГод   = Прав(ПолнаяДатаДокумента, ДлинаСтроки - ВторойРазделитель);
		Иначе
			ОбластьМакетаПодвал.Параметры.ДатаДокументаДень  = """     """;
			ОбластьМакетаПодвал.Параметры.ДатаДокументаМесяц = "";
			ОбластьМакетаПодвал.Параметры.ДатаДокументаГод   = " 20     года";	
		КонецЕсли;
		
		ДлинаСтрокиДоверенность = СтрДлина(СведенияОДокументе.ДоверенностьВыдана);
		Если ДлинаСтрокиДоверенность < 70 Тогда
		
			ДоверенностьВыдана = СведенияОДокументе.ДоверенностьВыдана;
			ДоверенностьВыдана1 = "";
		
		Иначе
			// Разбиваем строку на две подстроки, таким образом чтобы первая строка была не более 70ти символов
			// Для этого ищем очередной пробел и проверяем длину строк в предположении, что перенос будет выполнен по найденной позиции.
			ДоверенностьВыдана1 = СведенияОДокументе.ДоверенностьВыдана;
			ПозицияПоиска = Найти(ДоверенностьВыдана1," ")+1;
			
			// Если найден очередной пробел и длина первой строки после операции будет менее 70ти символов, то выполняем еще одну итерацию.
			Пока ПозицияПоиска > 1 И ДлинаСтрокиДоверенность - СтрДлина(ДоверенностьВыдана1) + ПозицияПоиска < 70 Цикл
				
				ДоверенностьВыдана1 = Сред(ДоверенностьВыдана1, ПозицияПоиска);
				ПозицияПоиска       = Найти(ДоверенностьВыдана1," ")+1;
				
			КонецЦикла; 
			
			ДоверенностьВыдана = Лев(СведенияОДокументе.ДоверенностьВыдана,ДлинаСтрокиДоверенность - СтрДлина(ДоверенностьВыдана1));
			
		КонецЕсли; 
		
		ДанныеДоверенность = Новый Структура;
		ДанныеДоверенность.Вставить("ДоверенностьНомер", СведенияОДокументе.ДоверенностьНомер);
		ДанныеДоверенность.Вставить("ДоверенностьВыдана", ДоверенностьВыдана);
		ДанныеДоверенность.Вставить("ДоверенностьВыдана1", ДоверенностьВыдана1);
		ДанныеДоверенность.Вставить("ДоверенностьЧерезКого", СведенияОДокументе.ДоверенностьЧерезКого);
		ДанныеДоверенность.Вставить("ДоверенностьДата",?(ЗначениеЗаполнено(СведенияОДокументе.ДоверенностьДата), Формат(СведенияОДокументе.ДоверенностьДата, "ДЛФ=ДД"), ""));
		
		ОбластьМакетаПодвал.Параметры.Заполнить(ДанныеДоверенность);
		
		ТабличныйДокумент.Вывести(ОбластьМакетаПодвал);
		
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
			НомерСтрокиНачало, ОбъектыПечати, СведенияОДокументе.Документ);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
 
КонецФункции

#КонецОбласти

#Область АктОбОказанииУслуг

Функция ПолучитьОписаниеАктаОбОказанииУслуг() Экспорт
	
	ТипОрганизацияКонтрагент = Новый Массив();
	ТипОрганизацияКонтрагент.Добавить(Тип("СправочникСсылка.Контрагенты"));
	ТипОрганизацияКонтрагент.Добавить(Тип("СправочникСсылка.Организации"));
	
	ТипДокументы = Новый Массив();
	ТипДокументы.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
	ТипДокументы.Добавить(Тип("ДокументСсылка.КорректировкаРеализации"));
	ТипДокументы.Добавить(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));
	ТипДокументы.Добавить(Тип("ДокументСсылка.КорректировкаПоступления"));
	ТипДокументы.Добавить(Тип("ДокументСсылка.ПоступлениеИзПереработки"));
	ТипДокументы.Добавить(Тип("ДокументСсылка.ПоступлениеДопРасходов"));
	
	ОписаниеДаты = Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Документ",	 				Новый ОписаниеТипов(ТипДокументы));
	Таблица.Колонки.Добавить("ДатаДляПолученияСведений",	ОписаниеДаты);
	Таблица.Колонки.Добавить("НомерДокумента",          	Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ДатаДокумента",           	ОписаниеДаты);
	Таблица.Колонки.Добавить("НомерИсправления",        	Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ДатаИсправления",         	ОписаниеДаты);
	
	Таблица.Колонки.Добавить("ДокументОснование"			);
	
	Таблица.Колонки.Добавить("Поставщик",         			Новый ОписаниеТипов(ТипОрганизацияКонтрагент));
	Таблица.Колонки.Добавить("Получатель",       			Новый ОписаниеТипов(ТипОрганизацияКонтрагент));
	Таблица.Колонки.Добавить("ПредставлениеДоговора",		Новый ОписаниеТипов("Строка"));
	
	Таблица.Колонки.Добавить("Организация",      			Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Таблица.Колонки.Добавить("Подразделение",				Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	
	Таблица.Колонки.Добавить("БанковскийСчетПродавца",   	Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета"));
	
	Таблица.Колонки.Добавить("Валюта",          	Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	Таблица.Колонки.Добавить("ВалютаКод",       	Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ВалютаНаименование",  Новый ОписаниеТипов("Строка"));
	
	Таблица.Колонки.Добавить("СуммаВключаетНДС", 	Новый ОписаниеТипов("Булево"));
	
	Таблица.Колонки.Добавить("Руководитель",            			Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Таблица.Колонки.Добавить("РуководительФИО",         			Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("РуководительСтруктураФИО",			Новый ОписаниеТипов("Структура"));
	Таблица.Колонки.Добавить("ЗаРуководителяПоПриказу", 			Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("РуководительДолжностьНаименование",	Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("РуководительДолжность",            	Новый ОписаниеТипов("СправочникСсылка.Должности"));
	
	Таблица.Колонки.Добавить("ПредставительЗаказчика",            	Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ЗаЗаказчикаНаОсновании",            	Новый ОписаниеТипов("Строка"));
	
	Таблица.Колонки.Добавить("ТаблицаДокумента");
	
	Возврат Таблица;
	
КонецФункции

Функция ПолучитьОписаниеТаблицыАктаОбОказанииУслуг() Экспорт
	
	ОписаниеТиповЧисло15_2 = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2);
	ОписаниеТиповЧисло15_3 = ОбщегоНазначения.ОписаниеТипаЧисло(15, 3);
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ТабличнаяЧасть",				Новый ОписаниеТипов("ПеречислениеСсылка.ТабличныеЧастиДокументов"));
	Таблица.Колонки.Добавить("НомерСтроки",					ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
	Таблица.Колонки.Добавить("Номенклатура",				Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Таблица.Колонки.Добавить("НоменклатураКод",				Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("НоменклатураНаименование",	Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Количество",					ОписаниеТиповЧисло15_3);
	Таблица.Колонки.Добавить("ЕдиницаИзмерения",			Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения"));
	Таблица.Колонки.Добавить("ЕдиницаИзмеренияКод",			Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ЕдиницаИзмеренияНаименование",Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Цена",						ОписаниеТиповЧисло15_2);
	Таблица.Колонки.Добавить("Сумма",						ОписаниеТиповЧисло15_2);
	Таблица.Колонки.Добавить("СуммаБезНДС",					ОписаниеТиповЧисло15_2);
	Таблица.Колонки.Добавить("СуммаНДС",					ОписаниеТиповЧисло15_2);
	Таблица.Колонки.Добавить("СтавкаНДС", 					Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	Таблица.Колонки.Добавить("СуммаСНДС",					ОписаниеТиповЧисло15_2);
	
	Возврат Таблица;
	
КонецФункции

Функция ПечатьАктаОбОказанииУслуг(СведенияАктаОбОказанииУслуг, ОбъектыПечати, СтруктураПараметровПечати) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ДополнительнаяКолонкаПечатныхФормДокументов = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если НЕ ЗначениеЗаполнено(ДополнительнаяКолонкаПечатныхФормДокументов) Тогда
		ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;
	КонецЕсли;
	ВыводитьКоды = ДополнительнаяКолонкаПечатныхФормДокументов <> Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб			= Истина;
	ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.ИмяПараметровПечати	= СтруктураПараметровПечати.ИмяПараметровПечати;

	Макет = УправлениеПечатью.МакетПечатнойФормы(СтруктураПараметровПечати.ИмяМакетаПечати);
	
	ПервыйДокумент = Истина;
	
	Для Каждого СведенияОДокументе ИЗ СведенияАктаОбОказанииУслуг Цикл
		
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ЭтоПечатьЗаПоставщика = СтруктураПараметровПечати.ВидДокументаПечати	 = "ПоступлениеИзПереработки"
								ИЛИ СтруктураПараметровПечати.ВидДокументаПечати = "ПоступлениеТоваровУслуг"
								ИЛИ СтруктураПараметровПечати.ВидДокументаПечати = "КорректировкаПоступления"
								ИЛИ СтруктураПараметровПечати.ВидДокументаПечати = "ПоступлениеДопРасходов";
		
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТаблицаУслуги = СведенияОДокументе.ТаблицаДокумента;
		
		// Выводим шапку документа
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ДанныеПечатиЗаголовок = Новый Структура("ТекстЗаголовка, ТекстЗаголовкаИсправления");
		ТекстЗаголовка = НСтр("ru='Акт № %1 от %2 г.'");
		ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаголовка, 
			СведенияОДокументе.НомерДокумента, 
			Формат(СведенияОДокументе.ДатаДокумента, "ДФ='дд ММММ гггг'"));
		ДанныеПечатиЗаголовок.Вставить("ТекстЗаголовка", ТекстЗаголовка);
		Если СтруктураПараметровПечати.ВидДокументаПечати = "КорректировкаРеализации" ИЛИ СтруктураПараметровПечати.ВидДокументаПечати = "КорректировкаПоступления" Тогда
			ТекстЗаголовкаИсправления = НСтр("ru='Исправление № %1 от %2 г.'");
			ТекстЗаголовкаИсправления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаголовкаИсправления, 
				СведенияОДокументе.НомерИсправления, 
				Формат(СведенияОДокументе.ДатаИсправления, "ДФ='дд ММММ гггг'"));
			ДанныеПечатиЗаголовок.Вставить("ТекстЗаголовкаИсправления", ТекстЗаголовкаИсправления);
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(ДанныеПечатиЗаголовок);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);

		СведенияОбПоставщике    = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(СведенияОДокументе.Поставщик, СведенияОДокументе.ДатаДокумента, СведенияОДокументе.БанковскийСчетПродавца);
				
		ПредставлениеПоставщика = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбПоставщике, 
			"НаименованиеДляПечатныхФорм,ИНН,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
			
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ДанныеПечатиПоставщик = Новый Структура;
		ДанныеПечатиПоставщик.Вставить("ПредставлениеПоставщика", ПредставлениеПоставщика);
		ДанныеПечатиПоставщик.Вставить("Поставщик", СведенияОДокументе.Поставщик);
		
		ОбластьМакета.Параметры.Заполнить(ДанныеПечатиПоставщик);
		ТабличныйДокумент.Вывести(ОбластьМакета);

		Если Макет.Области.Найти("Получатель") <> Неопределено Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("Получатель");	
		Иначе
			ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		КонецЕсли;
		СведенияОКонтрагенте    = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(СведенияОДокументе.Получатель, СведенияОДокументе.ДатаДокумента);
		ПредставлениеПолучателя = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКонтрагенте, 
			"НаименованиеДляПечатныхФорм,ИНН,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
		
		ДанныеПечатиПолучатель = Новый Структура;
		ДанныеПечатиПолучатель.Вставить("ПредставлениеПолучателя", ПредставлениеПолучателя);
		ДанныеПечатиПолучатель.Вставить("Получатель", СведенияОДокументе.Получатель);
		ДанныеПечатиПолучатель.Вставить("Основание", СведенияОДокументе.ПредставлениеДоговора);
		
		ОбластьМакета.Параметры.Заполнить(ДанныеПечатиПолучатель);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);

		// Инициализация счетчика строк
		НомерСтроки = 0;
		
		// Выводим заголовок многострочной части
		ОбластьШапки = ?(ВыводитьКоды, "ШапкаСКодом", "ШапкаТаблицы");
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
		ОбластьМакета.Параметры.Заполнить(СведенияОДокументе);
		ДанныеПечатиКод = Новый Структура;
		Если ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
			ДанныеПечатиКод.Вставить("ИмяКодАртикул", "Артикул");
		ИначеЕсли ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
			ДанныеПечатиКод.Вставить("ИмяКодАртикул", "Код");
		КонецЕсли;
		ОбластьМакета.Параметры.Заполнить(ДанныеПечатиКод);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьСтроки = ?(ВыводитьКоды, "СтрокаСКодом", "Строка");
		ОбластьСтроки = Макет.ПолучитьОбласть(ОбластьСтроки);

		// Выводим многострочную часть документа
		Для каждого СтрокаТабличнойЧасти Из ТаблицаУслуги Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			СтруктураПараметры = Новый Структура();
			СтруктураПараметры.Вставить("НомерСтроки", 				НомерСтроки);
			СтруктураПараметры.Вставить("НоменклатураНаименование", СокрЛП(СтрокаТабличнойЧасти.НоменклатураНаименование));
			СтруктураПараметры.Вставить("Товар", 				   	СокрЛП(СтрокаТабличнойЧасти.НоменклатураНаименование));
			СтруктураПараметры.Вставить("Номенклатура", 			СтрокаТабличнойЧасти.Номенклатура);
			СтруктураПараметры.Вставить("Количество", 				СтрокаТабличнойЧасти.Количество);
			СтруктураПараметры.Вставить("ЕдиницаИзмерения", 		СтрокаТабличнойЧасти.ЕдиницаИзмеренияНаименование);
			СтруктураПараметры.Вставить("Цена", 				   	СтрокаТабличнойЧасти.Цена);
			СтруктураПараметры.Вставить("Сумма", 				   	СтрокаТабличнойЧасти.Сумма);
			
			Если ВыводитьКоды Тогда
				СтруктураПараметры.Вставить("НоменклатураКод", 		СтрокаТабличнойЧасти.НоменклатураКод);
				СтруктураПараметры.Вставить("КодАртикул", 			СтрокаТабличнойЧасти.НоменклатураКод);
			КонецЕсли;
		
			ОбластьСтроки.Параметры.Заполнить(СтруктураПараметры);
	
			ТабличныйДокумент.Вывести(ОбластьСтроки);
			
		КонецЦикла;

		// Выводим подвал документа
		Если ТаблицаУслуги <> Неопределено Тогда
			Сумма    = ТаблицаУслуги.Итог("Сумма");
			СуммаНДС = ТаблицаУслуги.Итог("СуммаНДС");
		Иначе
			Сумма    = 0;
			СуммаНДС = 0;
		КонецЕсли;

		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Заполнить(Новый Структура("Всего", ОбщегоНазначенияБПВызовСервера.ФорматСумм(Сумма)));
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		ДанныеПечатиИтогоНДС = Новый Структура("ВсегоНДС, НДС");
		Если СуммаНДС <> 0 Тогда
			ДанныеПечатиИтогоНДС.ВсегоНДС = ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаНДС);
			ДанныеПечатиИтогоНДС.НДС      = ?(СведенияОДокументе.СуммаВключаетНДС, НСтр("ru='В том числе НДС'"), НСтр("ru='Сумма НДС'"));
		Иначе
			ДанныеПечатиИтогоНДС.ВсегоНДС = НСтр("ru='-'");
			ДанныеПечатиИтогоНДС.НДС      = НСтр("ru='Без налога (НДС)'");
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(ДанныеПечатиИтогоНДС);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		СуммаКПрописи = Сумма + ?(СведенияОДокументе.СуммаВключаетНДС, 0, СуммаНДС);
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		ИтоговаяСтрока = НСтр("ru='Всего оказано услуг %1, на сумму %2'");
		ИтоговаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ИтоговаяСтрока, НомерСтроки, ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаКПрописи, СведенияОДокументе.Валюта));
		СуммаПрописью  = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СуммаКПрописи, СведенияОДокументе.Валюта);
		ДанныеПечатиСуммаПрописью = Новый Структура;
		ДанныеПечатиСуммаПрописью.Вставить("ИтоговаяСтрока", ИтоговаяСтрока);
		ДанныеПечатиСуммаПрописью.Вставить("СуммаПрописью", СуммаПрописью);
		ОбластьМакета.Параметры.Заполнить(ДанныеПечатиСуммаПрописью);
		ТабличныйДокумент.Вывести(ОбластьМакета);

		// Выводим подписи
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		
		Если ЭтоПечатьЗаПоставщика Тогда
			ЗаместительПоПриказу = "";
		Иначе
			ЗаРуководителяПоПриказу = ?(ПустаяСтрока(СведенияОДокументе.ЗаРуководителяПоПриказу), "" , ", " + СведенияОДокументе.ЗаРуководителяПоПриказу);
			ЗаместительПоПриказу = СведенияОДокументе.РуководительФИО + ЗаРуководителяПоПриказу;
		КонецЕсли;

		ПредставлениеПоставщика = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбПоставщике, "НаименованиеДляПечатныхФорм");
		Если НЕ ЭтоПечатьЗаПоставщика И ЗначениеЗаполнено(СведенияОДокументе.РуководительДолжностьНаименование) И ЗначениеЗаполнено(ПредставлениеПоставщика) Тогда 
			ДолжностьИНазваниеОрганизации = СведенияОДокументе.РуководительДолжностьНаименование + ", " + ПредставлениеПоставщика;
		ИначеЕсли НЕ ЭтоПечатьЗаПоставщика И ЗначениеЗаполнено(СведенияОДокументе.РуководительДолжностьНаименование) Тогда 
			ДолжностьИНазваниеОрганизации = СведенияОДокументе.РуководительДолжностьНаименование;
		Иначе
			ДолжностьИНазваниеОрганизации = ПредставлениеПоставщика;
		КонецЕсли;
		
		
		ПредставлениеЗаказчика = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКонтрагенте, "НаименованиеДляПечатныхФорм");
		ДанныеПечатиПодписи = Новый Структура;
		ДанныеПечатиПодписи.Вставить("НазваниеЗаказчика", ПредставлениеЗаказчика);
		
		Если НЕ ЭтоПечатьЗаПоставщика Тогда
			Если ЗначениеЗаполнено(СведенияОДокументе.ЗаЗаказчикаНаОсновании) Тогда
				ПредставительЗаказчика = СведенияОДокументе.ПредставительЗаказчика+", "+СведенияОДокументе.ЗаЗаказчикаНаОсновании;
			Иначе
				ПредставительЗаказчика = СведенияОДокументе.ПредставительЗаказчика;
			КонецЕсли;
			ДанныеПечатиПодписи.Вставить("ПредставительЗаказчика", ПредставительЗаказчика);
		КонецЕсли;
		
		ДанныеПечатиПодписи.Вставить("ДолжностьИНазваниеОрганизации", ДолжностьИНазваниеОрганизации);
		ДанныеПечатиПодписи.Вставить("ЗаместительПоПриказу", ЗаместительПоПриказу);
		ОбластьМакета.Параметры.Заполнить(ДанныеПечатиПодписи);

		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
			НомерСтрокиНачало, ОбъектыПечати, СведенияОДокументе.Документ);

	КонецЦикла;

	Возврат ТабличныйДокумент;

КонецФункции

#КонецОбласти

#Область СоглашениеОбИзмененииСтоимости

Функция ПолучитьОписаниеСоглашенияОбИзмененииСтоимости() Экспорт
	
	ТипОрганизацияКонтрагент = Новый Массив();
	ТипОрганизацияКонтрагент.Добавить(Тип("СправочникСсылка.Контрагенты"));
	ТипОрганизацияКонтрагент.Добавить(Тип("СправочникСсылка.Организации"));
	
	ТипДокументаКорректировка = Новый Массив;
	ТипДокументаКорректировка.Добавить(Тип("ДокументСсылка.КорректировкаПоступления"));
	ТипДокументаКорректировка.Добавить(Тип("ДокументСсылка.КорректировкаРеализации"));
	
	ОписаниеДаты = Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата));

	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Документ",	 				Новый ОписаниеТипов(ТипДокументаКорректировка));
	Таблица.Колонки.Добавить("ДатаДляПолученияСведений",    ОписаниеДаты);
	Таблица.Колонки.Добавить("ДатаПодписанияДокумента",     ОписаниеДаты);
	Таблица.Колонки.Добавить("ЗаголовокДокументаОснования", Новый ОписаниеТипов("Строка"));
	
	Таблица.Колонки.Добавить("НомерДокумента",                      Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ДатаДокумента",                       ОписаниеДаты);
	Таблица.Колонки.Добавить("НомерИсправления",                    ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
	Таблица.Колонки.Добавить("ДатаИсправления",                     ОписаниеДаты);
	Таблица.Колонки.Добавить("НомерИсходногоДокумента",             Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ДатаИсходногоДокумента",              ОписаниеДаты);
	Таблица.Колонки.Добавить("НомерИсправленияИсходногоДокумента",  ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
	Таблица.Колонки.Добавить("ДатаИсправленияИсходногоДокумента",   ОписаниеДаты);
	
	Таблица.Колонки.Добавить("ВидОперации", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийИсправленияПоступленияРеализации"));
	Таблица.Колонки.Добавить("ДокументОснование");
	
    Таблица.Колонки.Добавить("Организация",      Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Таблица.Колонки.Добавить("Подразделение",    Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Таблица.Колонки.Добавить("Поставщик",        Новый ОписаниеТипов(ТипОрганизацияКонтрагент));
	Таблица.Колонки.Добавить("Грузоотправитель", Новый ОписаниеТипов(ТипОрганизацияКонтрагент));
	Таблица.Колонки.Добавить("Покупатель",       Новый ОписаниеТипов(ТипОрганизацияКонтрагент));
	Таблица.Колонки.Добавить("Грузополучатель",  Новый ОписаниеТипов(ТипОрганизацияКонтрагент));
	
	Таблица.Колонки.Добавить("БанковскийСчетПродавца", Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета"));
	
	Таблица.Колонки.Добавить("АдресДоставки",          Новый ОписаниеТипов("Строка"));
	
	Таблица.Колонки.Добавить("Договор",        	Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	Таблица.Колонки.Добавить("Основание",      	Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ОснованиеНомер", 	Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ОснованиеДата",  	ОписаниеДаты);
	
	Таблица.Колонки.Добавить("Валюта",          	Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	Таблица.Колонки.Добавить("ВалютаКод",       	Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ВалютаНаименование",  Новый ОписаниеТипов("Строка"));
	
	Таблица.Колонки.Добавить("Руководитель",                      		Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Таблица.Колонки.Добавить("РуководительФИО",                   		Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("РуководительСтруктураФИО",          		Новый ОписаниеТипов("Структура"));
	Таблица.Колонки.Добавить("ЗаРуководителяПоПриказу",           		Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("РуководительДолжностьНаименование", 		Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("РуководительДолжность",             		Новый ОписаниеТипов("СправочникСсылка.Должности"));
	Таблица.Колонки.Добавить("ГлавныйБухгалтер",                  		Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Таблица.Колонки.Добавить("ГлавныйБухгалтерФИО",               		Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ГлавныйБухгалтерСтруктураФИО",      		Новый ОписаниеТипов("Структура"));
	Таблица.Колонки.Добавить("ЗаГлавногоБухгалтераПоПриказу",     		Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ГлавныйБухгалтерДолжностьНаименование", 	Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ГлавныйБухгалтерДолжность",             	Новый ОписаниеТипов("СправочникСсылка.Должности"));
	Таблица.Колонки.Добавить("Кладовщик",                         		Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Таблица.Колонки.Добавить("КладовщикФИО",                      		Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("КладовщикСтруктураФИО",             		Новый ОписаниеТипов("Структура"));
	Таблица.Колонки.Добавить("КладовщикДолжность",                		Новый ОписаниеТипов("СправочникСсылка.Должности"));
	Таблица.Колонки.Добавить("КладовщикДолжностьНаименование",    		Новый ОписаниеТипов("Строка"));
	
	Таблица.Колонки.Добавить("ДоверенностьНомер",       				Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ДоверенностьВыдана",      				Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ДоверенностьЧерезКого",   				Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ДоверенностьДата",       				 	ОписаниеДаты);
	
	Таблица.Колонки.Добавить("ТаблицаДокумента");
	
	Возврат Таблица;
	
КонецФункции

Функция ПолучитьОписаниеТаблицыСоглашенияОбИзмененииСтоимости() Экспорт
	
	ОписаниеТиповЧисло15_2 = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2);
	ОписаниеТиповЧисло15_3 = ОбщегоНазначения.ОписаниеТипаЧисло(15, 3);
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ТабличнаяЧасть", 					Новый ОписаниеТипов("ПеречислениеСсылка.ТабличныеЧастиДокументов"));
	Таблица.Колонки.Добавить("НомерСтроки", 					ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
	Таблица.Колонки.Добавить("Номенклатура", 					Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Таблица.Колонки.Добавить("НоменклатураНаименование",		Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("НоменклатураКод", 				Новый ОписаниеТипов("Строка"));
	
	Таблица.Колонки.Добавить("Количество",						ОписаниеТиповЧисло15_3);
	Таблица.Колонки.Добавить("КоличествоДоКорректировки", 		ОписаниеТиповЧисло15_3);
	Таблица.Колонки.Добавить("КоличествоМест", 					ОписаниеТиповЧисло15_3);
	Таблица.Колонки.Добавить("КоличествоВОдномМесте", 			ОписаниеТиповЧисло15_3);
	
	Таблица.Колонки.Добавить("ЕдиницаИзмерения",            	Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения"));
	Таблица.Колонки.Добавить("ЕдиницаИзмеренияНаименование", 	Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ЕдиницаИзмеренияКод",          	Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ВидУпаковки",                  	Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения"));
	Таблица.Колонки.Добавить("ВидУпаковкиКод",               	Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ВидУпаковкиНаименование",      	Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("МассаБрутто", 					ОписаниеТиповЧисло15_3);
	
	Таблица.Колонки.Добавить("Цена",							ОписаниеТиповЧисло15_2);
	Таблица.Колонки.Добавить("ЦенаДоКорректировки",				ОписаниеТиповЧисло15_2);
	Таблица.Колонки.Добавить("СуммаБезНДС",						ОписаниеТиповЧисло15_2);
	Таблица.Колонки.Добавить("СуммаБезНДСДоКорректировки",		ОписаниеТиповЧисло15_2);
	Таблица.Колонки.Добавить("СуммаНДС",						ОписаниеТиповЧисло15_2);
	Таблица.Колонки.Добавить("СуммаНДСДоКорректировки",			ОписаниеТиповЧисло15_2);
	Таблица.Колонки.Добавить("СуммаСНДС",						ОписаниеТиповЧисло15_2);
	Таблица.Колонки.Добавить("СуммаСНДСДоКорректировки",		ОписаниеТиповЧисло15_2);
	Таблица.Колонки.Добавить("СтавкаНДС", 						Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	Таблица.Колонки.Добавить("СтавкаНДСДоКорректировки", 		Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	
	Возврат Таблица;
	
КонецФункции

Функция ПечатьСоглашенияОбИзмененииСтоимости(СведенияСоглашенияОбИзмененииСтоимости, ОбъектыПечати, ИмяПараметровПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДополнительнаяКолонкаПечатныхФормДокументов = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если НЕ ЗначениеЗаполнено(ДополнительнаяКолонкаПечатныхФормДокументов) Тогда
		ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;
	КонецЕсли;
	ВыводитьКоды = ДополнительнаяКолонкаПечатныхФормДокументов <> Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб			= Истина;
	ТабличныйДокумент.ПолеСверху			= 0;
	ТабличныйДокумент.ПолеСнизу				= 0;
	ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Ландшафт;
	
	СисИнфо = Новый СистемнаяИнформация;
	Если ПустаяСтрока(СисИнфо.ИнформацияПрограммыПросмотра) Тогда 
		ТабличныйДокумент.ПолеСлева          = 0;
		ТабличныйДокумент.ПолеСправа         = 0;
	Иначе
		ТабличныйДокумент.ПолеСлева          = 10;
		ТабличныйДокумент.ПолеСправа         = 10;
	КонецЕсли;
	
	ТабличныйДокумент.ИмяПараметровПечати	= ИмяПараметровПечати;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_СоглашениеОбИзмененииСтоимости");
	
	ПервыйДокумент = Истина;
	
	Для Каждого СведенияОДокументе Из СведенияСоглашенияОбИзмененииСтоимости Цикл
		
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТаблицаДокумента = СведенияОДокументе.ТаблицаДокумента;
		
		// Инициализация областей макета
		ОбластьМакетаШапка            = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакетаЗаголовок        = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть(?(ВыводитьКоды, "ЗаголовокТабСКодом", "ЗаголовокТаб"));
		ОбластьМакетаСтрока           = Макет.ПолучитьОбласть(?(ВыводитьКоды, "СтрокаСКодом", "Строка"));
		ОбластьМакетаИтогоПоСтранице  = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьМакетаВсего            = Макет.ПолучитьОбласть("Всего");
		ОбластьМакетаПодвал           = Макет.ПолучитьОбласть("Подвал");
		ИмяОбластиНомерСтраницы		  = ?(ВыводитьКоды, "НомерСтраницыСКодом", "НомерСтраницы");
		
		ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Соглашение об изменении стоимости № %1 от %2'"), 
				СведенияОДокументе.НомерДокумента, Формат(СведенияОДокументе.ДатаДокумента, "ДФ=dd.MM.yyyy"));
		
		Если ЗначениеЗаполнено(СведенияОДокументе.НомерИсправления) Тогда
			ТекстЗаголовка = ТекстЗаголовка + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru=', исправление № %1 от %2'"),
					СведенияОДокументе.НомерИсправления, Формат(СведенияОДокументе.ДатаИсправления, "ДФ=dd.MM.yyyy"));
		КонецЕсли;
		
		ТекстЗаголовка = ТекстЗаголовка + Символы.ВК + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 № %2 от %3'"),
				СведенияОДокументе.ЗаголовокДокументаОснования, СведенияОДокументе.НомерИсходногоДокумента, Формат(СведенияОДокументе.ДатаИсходногоДокумента, "ДФ=dd.MM.yyyy"));
				
		Если ЗначениеЗаполнено(СведенияОДокументе.НомерИсправленияИсходногоДокумента) Тогда
			ТекстЗаголовка = ТекстЗаголовка + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru=' с учетом исправления № %1 от %2'"),
					СведенияОДокументе.НомерИсправленияИсходногоДокумента, Формат(СведенияОДокументе.ДатаИсправленияИсходногоДокумента, "ДФ=dd.MM.yyyy"));
		КонецЕсли;
		
		ОбластьМакетаЗаголовок.Параметры.Заголовок = ТекстЗаголовка;
		
		ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовок);
	
		// Выводим общие реквизиты шапки
		СведенияОПоставщике       = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(
				СведенияОДокументе.Поставщик, СведенияОДокументе.ДатаДляПолученияСведений, СведенияОДокументе.БанковскийСчетПродавца);
		СведенияОПокупателе       = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(СведенияОДокументе.Покупатель, СведенияОДокументе.ДатаДляПолученияСведений);
		
		ОбластьМакетаШапка.Параметры.Заполнить(СведенияОДокументе);
		
		ОбластьМакетаШапка.Параметры.ПредставлениеПоставщика  = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике);
		ОбластьМакетаШапка.Параметры.ПредставлениеПолучателя  = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе);
	
		ТабличныйДокумент.Вывести(ОбластьМакетаШапка);
		
		// Инициализация счетчика страниц
		НомерСтраницы = 1;
		
		// Инициализация итогов по странице
		ИтогоКоличествоНаСтранице  					= 0;
		ИтогоКоличествоНаСтраницеДоКорректировки 	= 0;
		ИтогоСуммаБезНДСНаСтранице 				 	= 0;
		ИтогоСуммаБезНДСНаСтраницеДоКорректировки 	= 0;
		ИтогоСуммаНДСНаСтранице    				  	= 0;
		ИтогоСуммаНДСНаСтраницеДоКорректировки    	= 0;
		ИтогоСуммаСНДСНаСтранице   				  	= 0;
		ИтогоСуммаСНДСНаСтраницеДоКорректировки   	= 0;
		
		// Инициализация итогов по документу
		ИтогоКоличество  				= 0;
		ИтогоКоличествоДоКорректировки  = 0;
		ИтогоСуммаБезНДС   				= 0;
		ИтогоСуммаБезНДСДоКорректировки = 0;
		ИтогоСуммаНДС 					= 0;
		ИтогоСуммаНДСДоКорректировки   	= 0;
		ИтогоСуммаСНДС         			= 0;
		ИтогоСуммаСНДСДоКорректировки   = 0;
			
		// Инициализация счетчика строк
		НомерСтроки     = 0;
		КоличествоСтрок = ТаблицаДокумента.Количество();
		
		// Выводим заголовок многострочной части
		ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы   = "Страница " + НомерСтраницы; 
		ОбластьМакетаЗаголовокТаблицы.Параметры.ВалютаДокумента = "Валюта: " + СведенияОДокументе.ВалютаНаименование + ", "+СведенияОДокументе.ВалютаКод;
		ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
		
		// Выводим многострочную часть документа
		Для Каждого СтрокаДокумента Из ТаблицаДокумента Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			ОбластьМакетаСтрока.Параметры.Номер = НомерСтроки;
			ОбластьМакетаСтрока.Параметры.ТоварНаименование 		 = СтрокаДокумента.НоменклатураНаименование;
			ОбластьМакетаСтрока.Параметры.Номенклатура 				 = СтрокаДокумента.Номенклатура;
			Если ВыводитьКоды Тогда
				ОбластьМакетаСтрока.Параметры.ТоварКод 			 	 = СтрокаДокумента.НоменклатураКод;
			КонецЕсли;
			
			ОбластьМакетаСтрока.Параметры.Количество                 = СтрокаДокумента.Количество;
			ОбластьМакетаСтрока.Параметры.КоличествоДоКорректировки  = СтрокаДокумента.КоличествоДоКорректировки;
			ОбластьМакетаСтрока.Параметры.Цена                       = СтрокаДокумента.Цена;
			ОбластьМакетаСтрока.Параметры.ЦенаДоКорректировки        = СтрокаДокумента.ЦенаДоКорректировки;
			ОбластьМакетаСтрока.Параметры.СуммаБезНДС         		 = СтрокаДокумента.СуммаБезНДС;
			ОбластьМакетаСтрока.Параметры.СуммаБезНДСДоКорректировки = СтрокаДокумента.СуммаБезНДСДоКорректировки;
			ОбластьМакетаСтрока.Параметры.СтавкаНДС                  = СтрокаДокумента.СтавкаНДС;
			ОбластьМакетаСтрока.Параметры.СтавкаНДСДоКорректировки   = СтрокаДокумента.СтавкаНДСДоКорректировки;
			ОбластьМакетаСтрока.Параметры.СуммаНДС                   = СтрокаДокумента.СуммаНДС;
			ОбластьМакетаСтрока.Параметры.СуммаНДСДоКорректировки    = СтрокаДокумента.СуммаНДСДоКорректировки;
			ОбластьМакетаСтрока.Параметры.СуммаСНДС                  = СтрокаДокумента.СуммаСНДС;
			ОбластьМакетаСтрока.Параметры.СуммаСНДСДоКорректировки   = СтрокаДокумента.СуммаСНДСДоКорректировки;
			
			// Проверим вывод
			СтрокаСПодвалом = Новый Массив;
			Если НомерСтроки = 1 Тогда
				СтрокаСПодвалом.Добавить(ОбластьМакетаЗаголовокТаблицы); // если первая строка, то должен
			КонецЕсли;                                                   // помещаться заголовок
			СтрокаСПодвалом.Добавить(ОбластьМакетаСтрока);
			СтрокаСПодвалом.Добавить(ОбластьМакетаИтогоПоСтранице);
			Если НомерСтроки = КоличествоСтрок Тогда           			 // если последняя строка, должен
				СтрокаСПодвалом.Добавить(ОбластьМакетаВсего);  			 // помещаться и подвал документа
				СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
			КонецЕсли;
			
			Если НЕ ОбщегоНазначенияБПВызовСервера.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, СтрокаСПодвалом) Тогда
				
				Если КоличествоСтрок > 1 Тогда
					
					// Выводим итоги по странице
					ОбластьМакетаИтогоПоСтранице.Параметры.ИтогоКоличествоНаСтранице 				 = ИтогоКоличествоНаСтранице;
					ОбластьМакетаИтогоПоСтранице.Параметры.ИтогоКоличествоНаСтраницеДоКорректировки  = ИтогоКоличествоНаСтраницеДоКорректировки;
					ОбластьМакетаИтогоПоСтранице.Параметры.ИтогоСуммаБезНДСНаСтранице   			 = ИтогоСуммаБезНДСНаСтранице;
					ОбластьМакетаИтогоПоСтранице.Параметры.ИтогоСуммаБезНДСНаСтраницеДоКорректировки = ИтогоСуммаБезНДСНаСтраницеДоКорректировки;
					ОбластьМакетаИтогоПоСтранице.Параметры.ИтогоСуммаНДСНаСтранице      			 = ИтогоСуммаНДСНаСтранице;
					ОбластьМакетаИтогоПоСтранице.Параметры.ИтогоСуммаНДСНаСтраницеДоКорректировки    = ИтогоСуммаНДСНаСтраницеДоКорректировки;
					ОбластьМакетаИтогоПоСтранице.Параметры.ИтогоСуммаСНДСНаСтранице  				 = ИтогоСуммаСНДСНаСтранице;
					ОбластьМакетаИтогоПоСтранице.Параметры.ИтогоСуммаСНДСНаСтраницеДоКорректировки	 = ИтогоСуммаСНДСНаСтраницеДоКорректировки;
					ТабличныйДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
					
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					
					// Очистим итоги по странице
					ИтогоКоличествоНаСтранице  					= 0;
					ИтогоКоличествоНаСтраницеДоКорректировки  	= 0;
					ИтогоСуммаБезНДСНаСтранице 					= 0;
					ИтогоСуммаБезНДСНаСтраницеДоКорректировки 	= 0;
					ИтогоСуммаНДСНаСтранице	   					= 0;
					ИтогоСуммаНДСНаСтраницеДоКорректировки	   	= 0;
					ИтогоСуммаСНДСНаСтранице   					= 0;
					ИтогоСуммаСНДСНаСтраницеДоКорректировки   	= 0;
					
					// Выведем заголовок таблицы
					НомерСтраницы = НомерСтраницы + 1;
					ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы 	= "Страница " + НомерСтраницы; 
					ОбластьМакетаЗаголовокТаблицы.Параметры.ВалютаДокумента = "Валюта: " + СведенияОДокументе.ВалютаНаименование + ", "+СведенияОДокументе.ВалютаКод;
					ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
					
				КонецЕсли;
				
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьМакетаСтрока);
			
			// Увеличим итоги по странице
			ИтогоКоличествоНаСтранице  					= ИтогоКоличествоНаСтранице  				+ СтрокаДокумента.Количество;
			ИтогоКоличествоНаСтраницеДоКорректировки  	= ИтогоКоличествоНаСтраницеДоКорректировки  + СтрокаДокумента.КоличествоДоКорректировки;
			ИтогоСуммаБезНДСНаСтранице 					= ИтогоСуммаБезНДСНаСтранице 				+ СтрокаДокумента.СуммаБезНДС;
			ИтогоСуммаБезНДСНаСтраницеДоКорректировки 	= ИтогоСуммаБезНДСНаСтраницеДоКорректировки + СтрокаДокумента.СуммаБезНДСДоКорректировки;
			ИтогоСуммаНДСНаСтранице    					= ИтогоСуммаНДСНаСтранице    				+ СтрокаДокумента.СуммаНДС;
			ИтогоСуммаНДСНаСтраницеДоКорректировки    	= ИтогоСуммаНДСНаСтраницеДоКорректировки    + СтрокаДокумента.СуммаНДСДоКорректировки;
			ИтогоСуммаСНДСНаСтранице   					= ИтогоСуммаСНДСНаСтранице   				+ СтрокаДокумента.СуммаСНДС;
			ИтогоСуммаСНДСНаСтраницеДоКорректировки   	= ИтогоСуммаСНДСНаСтраницеДоКорректировки   + СтрокаДокумента.СуммаСНДСДоКорректировки;
			
			// Увеличим итоги по документу
			ИтогоКоличество  				= ИтогоКоличество  					+ СтрокаДокумента.Количество;
			ИтогоКоличествоДоКорректировки  = ИтогоКоличествоДоКорректировки  	+ СтрокаДокумента.КоличествоДоКорректировки;
			ИтогоСуммаБезНДС 				= ИтогоСуммаБезНДС 					+ СтрокаДокумента.СуммаБезНДС;
			ИтогоСуммаБезНДСДоКорректировки = ИтогоСуммаБезНДСДоКорректировки 	+ СтрокаДокумента.СуммаБезНДСДоКорректировки;
			ИтогоСуммаНДС         			= ИтогоСуммаНДС 					+ СтрокаДокумента.СуммаНДС;
			ИтогоСуммаНДСДоКорректировки    = ИтогоСуммаНДСДоКорректировки		+ СтрокаДокумента.СуммаНДСДоКорректировки;
			ИтогоСуммаСНДС   				= ИтогоСуммаСНДС 					+ СтрокаДокумента.СуммаСНДС;
			ИтогоСуммаСНДСДоКорректировки   = ИтогоСуммаСНДСДоКорректировки 	+ СтрокаДокумента.СуммаСНДСДоКорректировки;
			
		КонецЦикла;
		
		// Выводим итоги по последней странице, если страниц больше одной
		Если НомерСтраницы > 1 Тогда 
			ОбластьМакетаИтогоПоСтранице.Параметры.ИтогоКоличествоНаСтранице 					= ИтогоКоличествоНаСтранице;
			ОбластьМакетаИтогоПоСтранице.Параметры.ИтогоКоличествоНаСтраницеДоКорректировки 	= ИтогоКоличествоНаСтраницеДоКорректировки;
			ОбластьМакетаИтогоПоСтранице.Параметры.ИтогоСуммаБезНДСНаСтранице   				= ИтогоСуммаБезНДСНаСтранице;
			ОбластьМакетаИтогоПоСтранице.Параметры.ИтогоСуммаБезНДСНаСтраницеДоКорректировки   	= ИтогоСуммаБезНДСНаСтраницеДоКорректировки;
			ОбластьМакетаИтогоПоСтранице.Параметры.ИтогоСуммаНДСНаСтранице      				= ИтогоСуммаНДСНаСтранице;
			ОбластьМакетаИтогоПоСтранице.Параметры.ИтогоСуммаНДСНаСтраницеДоКорректировки      	= ИтогоСуммаНДСНаСтраницеДоКорректировки;
			ОбластьМакетаИтогоПоСтранице.Параметры.ИтогоСуммаСНДСНаСтранице  					= ИтогоСуммаСНДСНаСтранице;
			ОбластьМакетаИтогоПоСтранице.Параметры.ИтогоСуммаСНДСНаСтраницеДоКорректировки  	= ИтогоСуммаСНДСНаСтраницеДоКорректировки;
			
			ТабличныйДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
			
		ИначеЕсли НомерСтраницы = 1 Тогда // если страница одна, номер страницы выводить не нужно   
			ТабличныйДокумент.Области[ИмяОбластиНомерСтраницы].Текст = "";
		КонецЕсли;
		
		// Выводим итоги по документу в целом
		ОбластьМакетаВсего.Параметры.ИтогоКоличество					= ИтогоКоличество;
		ОбластьМакетаВсего.Параметры.ИтогоКоличествоДоКорректировки    	= ИтогоКоличествоДоКорректировки;
		ОбластьМакетаВсего.Параметры.ИтогоСуммаБезНДС      				= ИтогоСуммаБезНДС;
		ОбластьМакетаВсего.Параметры.ИтогоСуммаБезНДСДоКорректировки    = ИтогоСуммаБезНДСДоКорректировки;
		ОбластьМакетаВсего.Параметры.ИтогоСуммаНДС        				= ИтогоСуммаНДС;
		ОбластьМакетаВсего.Параметры.ИтогоСуммаНДСДоКорректировки   	= ИтогоСуммаНДСДоКорректировки;
		ОбластьМакетаВсего.Параметры.ИтогоСуммаСНДС  					= ИтогоСуммаСНДС;
		ОбластьМакетаВсего.Параметры.ИтогоСуммаСНДСДоКорректировки  	= ИтогоСуммаСНДСДоКорректировки;
		
		ТабличныйДокумент.Вывести(ОбластьМакетаВсего);
		
		// Выводим подвал документа
		ЗаРуководителяПоПриказу = ?(СведенияОДокументе.ЗаРуководителяПоПриказу = "", "" , ", " + СведенияОДокументе.ЗаРуководителяПоПриказу);
		ОбластьМакетаПодвал.Параметры.ФИОРуководителя       = СведенияОДокументе.РуководительФИО + ЗаРуководителяПоПриказу;
		ОбластьМакетаПодвал.Параметры.ДолжностьРуководителя = СведенияОДокументе.РуководительДолжность;
		
		ЗаГлавногоБухгалтераПоПриказу = ?(СведенияОДокументе.ЗаГлавногоБухгалтераПоПриказу = "", "" , ", " + СведенияОДокументе.ЗаГлавногоБухгалтераПоПриказу);
		ОбластьМакетаПодвал.Параметры.ФИОГлавБухгалтера = СведенияОДокументе.ГлавныйБухгалтерФИО + ЗаГлавногоБухгалтераПоПриказу;
		ОбластьМакетаПодвал.Параметры.ДолжностьГлавБухгалтера = СведенияОДокументе.ГлавныйБухгалтерДолжность;
		
		Если ЗначениеЗаполнено(СведенияОДокументе.ДатаПодписанияДокумента) Тогда
			ПолнаяДатаДокумента = Формат(СведенияОДокументе.ДатаПодписанияДокумента, "ДФ=""дд ММММ гггг """"года""""""");
			ДлинаСтроки         = СтрДлина(ПолнаяДатаДокумента);
			ПервыйРазделитель   = Найти(ПолнаяДатаДокумента," ");
			ВторойРазделитель   = Найти(Прав(ПолнаяДатаДокумента,ДлинаСтроки - ПервыйРазделитель), " ") + ПервыйРазделитель;
			
			ОбластьМакетаПодвал.Параметры.ДатаДокументаДень  = """" + Лев(ПолнаяДатаДокумента, ПервыйРазделитель - 1) + """";
			ОбластьМакетаПодвал.Параметры.ДатаДокументаМесяц = Сред(ПолнаяДатаДокумента, ПервыйРазделитель + 1, ВторойРазделитель - ПервыйРазделитель - 1);
			ОбластьМакетаПодвал.Параметры.ДатаДокументаГод   = Прав(ПолнаяДатаДокумента, ДлинаСтроки - ВторойРазделитель);
		Иначе
			ОбластьМакетаПодвал.Параметры.ДатаДокументаДень  = """     """;
			ОбластьМакетаПодвал.Параметры.ДатаДокументаМесяц = "";
			ОбластьМакетаПодвал.Параметры.ДатаДокументаГод   = " 20     года";	
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакетаПодвал);
		
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
			НомерСтрокиНачало, ОбъектыПечати, СведенияОДокументе.Документ);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;

КонецФункции

#КонецОбласти

#Область СчетНаОплату

// Устаревшая процедура. Оставлена для совместимости.
// Если используется пользовательский макет, 
// то может заполнятся удаленные области.
Процедура ВывестиЗаголовокПредупреждение(Организация, ТабличныйДокумент, Макет)
	
	Если Не ЗначениеЗаполнено(Макет.Области.Найти("ЗаголовокПредупреждениеСЛоготипом")) 
		И Не ЗначениеЗаполнено(Макет.Области.Найти("ЗаголовокПредупреждение")) Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Организация) <> Тип("СправочникСсылка.Организации") Тогда
		Возврат;
	КонецЕсли;
		
	ДанныеКартинки = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаИДвоичныеДанные(Организация.ФайлЛоготип);
	Если ЗначениеЗаполнено(ДанныеКартинки.ДвоичныеДанные) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокПредупреждениеСЛоготипом");
		Попытка
			ОбластьМакета.Рисунки.Логотип.Картинка = Новый Картинка(ДанныеКартинки.ДвоичныеДанные);
		Исключение
		КонецПопытки;
		ТабличныйДокумент.Вывести(ОбластьМакета);
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокПредупреждение");
		ТабличныйДокумент.Вывести(ОбластьМакета);
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьОписаниеСчетаНаОплату() Экспорт
	
	ТипОрганизацияКонтрагент = Новый Массив();
	ТипОрганизацияКонтрагент.Добавить(Тип("СправочникСсылка.Контрагенты"));
	ТипОрганизацияКонтрагент.Добавить(Тип("СправочникСсылка.Организации"));
	
	ОписаниеДаты = Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	Таблица = Новый ТаблицаЗначений();
	Таблица.Колонки.Добавить("Документ");
	
	Таблица.Колонки.Добавить("ДатаДляПолученияСведений",    ОписаниеДаты);
	Таблица.Колонки.Добавить("НомерДокумента", 			Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ДатаДокумента", 			ОписаниеДаты);
	
	Таблица.Колонки.Добавить("Валюта", 					Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	Таблица.Колонки.Добавить("ВалютаКод", 				Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ВалютаНаименование", 		Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("КурсВзаиморасчетов", 		ОбщегоНазначения.ОписаниеТипаЧисло(10, 4));
	Таблица.Колонки.Добавить("КратностьВзаиморасчетов",	ОбщегоНазначения.ОписаниеТипаЧисло(10));
	
	Таблица.Колонки.Добавить("СуммаВключаетНДС", 		Новый ОписаниеТипов("Булево"));

	Таблица.Колонки.Добавить("Организация", 			Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Таблица.Колонки.Добавить("Подразделение",			Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Таблица.Колонки.Добавить("Поставщик", 				Новый ОписаниеТипов(ТипОрганизацияКонтрагент));
	Таблица.Колонки.Добавить("Покупатель", 				Новый ОписаниеТипов(ТипОрганизацияКонтрагент));
	Таблица.Колонки.Добавить("Получатель", 				Новый ОписаниеТипов(ТипОрганизацияКонтрагент));
	Таблица.Колонки.Добавить("ДоговорКонтрагента",		Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	Таблица.Колонки.Добавить("ТекстДополнительныхУсловий",Новый ОписаниеТипов("Строка"));
	
	// Параметры заполнения приложения к договору
	Таблица.Колонки.Добавить("НомерДоговора",			Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ДатаДоговора",			ОписаниеДаты);
	Таблица.Колонки.Добавить("ФИОИсполнителя",			Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ДолжностьИсполнителя",	Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ФИОЗаказчика",			Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ДолжностьЗаказчика",		Новый ОписаниеТипов("Строка"));
	
	Таблица.Колонки.Добавить("БанковскийСчетПродавца",	Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета"));
	Таблица.Колонки.Добавить("ТекстКорреспондента",		Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("НаименованиеБанкаПолучателя",Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("БанкПолучателя",			Новый ОписаниеТипов("СправочникСсылка.Банки"));
	Таблица.Колонки.Добавить("БикБанкаПолучателя",		Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("СчетБанкаПолучателя",		Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ГородБанкаПолучателя",	Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("НомерСчетаПолучателя",	Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("БанкТекстКорресподента",	Новый ОписаниеТипов("Строка"));
	
	Таблица.Колонки.Добавить("НомерСчета", 				Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("БИК",						Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("БанкНаименование",		Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("КоррСчет", 				Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("БанкДляРасчетов", 		Новый ОписаниеТипов("СправочникСсылка.Банки"));
		
	Таблица.Колонки.Добавить("Руководитель",                      		Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Таблица.Колонки.Добавить("РуководительФИО",                   		Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("РуководительСтруктураФИО",          		Новый ОписаниеТипов("Структура"));
	Таблица.Колонки.Добавить("ЗаРуководителяПоПриказу",           		Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("РуководительДолжностьНаименование", 		Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("РуководительДолжность",             		Новый ОписаниеТипов("СправочникСсылка.Должности"));
	Таблица.Колонки.Добавить("ГлавныйБухгалтер",                  		Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Таблица.Колонки.Добавить("ГлавныйБухгалтерФИО",               		Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ГлавныйБухгалтерСтруктураФИО",     		Новый ОписаниеТипов("Структура"));
	Таблица.Колонки.Добавить("ЗаГлавногоБухгалтераПоПриказу",      		Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ГлавныйБухгалтерДолжностьНаименование", 	Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ГлавныйБухгалтерДолжность",             	Новый ОписаниеТипов("СправочникСсылка.Должности"));
	
	Таблица.Колонки.Добавить("ТаблицаДокумента");
	
	Возврат Таблица;
	
КонецФункции

Функция ПолучитьОписаниеТаблицыСчетаНаОплату() Экспорт
	
	ОписаниеТиповЧисло15_2 = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2);
	ОписаниеТиповЧисло15_3 = ОбщегоНазначения.ОписаниеТипаЧисло(15, 3);
	
	Таблица = Новый ТаблицаЗначений;
	
	Таблица.Колонки.Добавить("ТабличнаяЧасть", 					Новый ОписаниеТипов("ПеречислениеСсылка.ТабличныеЧастиДокументов"));
	Таблица.Колонки.Добавить("НомерСтроки", 					ОбщегоНазначения.ОписаниеТипаЧисло(10, 2));
	Таблица.Колонки.Добавить("Номенклатура", 					Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Таблица.Колонки.Добавить("НоменклатураАртикул",				Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("НоменклатураНаименование",		Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Содержание",						Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ЕдиницаИзмерения",				Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения"));
	Таблица.Колонки.Добавить("ЕдиницаИзмеренияКод",				Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ЕдиницаИзмеренияНаименование",	Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ЕдиницаИзмеренияНаименованиеПолное",	Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Коэффициент",						ОписаниеТиповЧисло15_3);
	Таблица.Колонки.Добавить("Количество", 						ОписаниеТиповЧисло15_3);
	Таблица.Колонки.Добавить("Цена", 							ОписаниеТиповЧисло15_2);
	Таблица.Колонки.Добавить("Сумма", 							ОписаниеТиповЧисло15_2);
	Таблица.Колонки.Добавить("СтавкаНДС", 						Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	Таблица.Колонки.Добавить("СуммаНДС", 						ОписаниеТиповЧисло15_2);
	
	Возврат Таблица;
	
КонецФункции

Функция ПечатьСчетаНаОплату(СведенияСчетаНаОплату, ОбъектыПечати, СПечатью = Ложь) Экспорт

	Перем ПодразделениеОтветственныхЛиц;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб			= Истина;
	ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.ИмяПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПокупателя_СчетЗаказ";
	
	ДополнительнаяКолонкаПечатныхФормДокументов = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если НЕ ЗначениеЗаполнено(ДополнительнаяКолонкаПечатныхФормДокументов) Тогда
		ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;
	КонецЕсли;
	ВыводитьКоды = ДополнительнаяКолонкаПечатныхФормДокументов <> Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;
	
	ПервыйДокумент = Истина;
	
	Для Каждого СведенияОДокументе Из СведенияСчетаНаОплату Цикл
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_СчетЗаказ");

		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Выводим шапку счета
		ВывестиЗаголовокПредупреждение(СведенияОДокументе.Получатель, ТабличныйДокумент, Макет);
		
		СведенияОПолучателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(СведенияОДокументе.Получатель, СведенияОДокументе.ДатаДляПолученияСведений);
		
		// Получим логотип организации
		Если ТипЗнч(СведенияОДокументе.Получатель) = Тип("СправочникСсылка.Организации") Тогда
			ДанныеКартинки = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаИДвоичныеДанные(СведенияОДокументе.Получатель.ФайлЛоготип);
		Иначе
			ДанныеКартинки = Неопределено;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеКартинки) 
			И ЗначениеЗаполнено(ДанныеКартинки.ДвоичныеДанные) 
			И ЗначениеЗаполнено(Макет.Области.Найти("ЗаголовокСчетаСЛоготипом")) Тогда
			ОбластьМакета       = Макет.ПолучитьОбласть("ЗаголовокСчетаСЛоготипом");
			Попытка
				ОбластьМакета.Рисунки.ЛоготипСчета.Картинка = Новый Картинка(ДанныеКартинки.ДвоичныеДанные);
			Исключение
			КонецПопытки;
		Иначе
			ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокСчета");
		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(СведенияОДокументе);
		ДанныеПечатиЗаголовокСчета = Новый Структура;
		ДанныеПечатиЗаголовокСчета.Вставить("ИННПолучателя", СведенияОПолучателе.ИНН);
		ДанныеПечатиЗаголовокСчета.Вставить("КПППолучателя", СведенияОПолучателе.КПП);

		Если ТипЗнч(СведенияОДокументе.БанковскийСчетПродавца) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
			ДанныеПечатиЗаголовокСчета.Вставить("БИКБанкаПолучателя",СведенияОДокументе.БикБанкаПолучателя);
			ДанныеПечатиЗаголовокСчета.Вставить("БанкПолучателя",СведенияОДокументе.БанкПолучателя);
			ДанныеПечатиЗаголовокСчета.Вставить("БанкПолучателяПредставление",СокрЛП(СведенияОДокументе.НаименованиеБанкаПолучателя));
			ДанныеПечатиЗаголовокСчета.Вставить("СчетБанкаПолучателя",СведенияОДокументе.СчетБанкаПолучателя);
			ДанныеПечатиЗаголовокСчета.Вставить("СчетБанкаПолучателяПредставление",СведенияОДокументе.СчетБанкаПолучателя);
			ДанныеПечатиЗаголовокСчета.Вставить("СчетПолучателяПредставление", СведенияОДокументе.НомерСчетаПолучателя);
			ДанныеПечатиЗаголовокСчета.Вставить("СчетПолучателя", СведенияОДокументе.НомерСчетаПолучателя);
		КонецЕсли;
		
		ПредставлениеПолучателя = УчетДенежныхСредствБП.СформироватьТекстНаименованияПлательщикаПолучателя(, СведенияОДокументе.Получатель, СведенияОДокументе.БанковскийСчетПродавца);
		ДанныеПечатиЗаголовокСчета.Вставить("ПредставлениеПолучателя", ПредставлениеПолучателя);
		ОбластьМакета.Параметры.Заполнить(ДанныеПечатиЗаголовокСчета);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);

		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		
		ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Счет на оплату № %1 от %2 г.'"), 
				СведенияОДокументе.НомерДокумента, Формат(СведенияОДокументе.ДатаДокумента, "ДФ='дд ММММ гггг'"));
		
		ОбластьМакета.Параметры.Заполнить(Новый Структура("ТекстЗаголовка", ТекстЗаголовка));
		
		ТабличныйДокумент.Вывести(ОбластьМакета);

		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.Заполнить(СведенияОДокументе);
		СведенияОбОрганизации    = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(СведенияОДокументе.Поставщик, СведенияОДокументе.ДатаДляПолученияСведений);
		ПредставлениеПоставщика  = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(
			СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,ИНН,КПП,ЮридическийАдрес,Телефоны,");
		
		ОбластьМакета.Параметры.Заполнить(Новый Структура("ПредставлениеПоставщика", ПредставлениеПоставщика));
		ТабличныйДокумент.Вывести(ОбластьМакета);

		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.Заполнить(СведенияОДокументе);
		СведенияОПокупателе     = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(СведенияОДокументе.Покупатель, СведенияОДокументе.ДатаДляПолученияСведений);
		ПредставлениеПокупателя = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(
			СведенияОПокупателе, "НаименованиеДляПечатныхФорм,ИНН,КПП,ЮридическийАдрес,Телефоны,");
		Основание = СокрЛП(Строка(СведенияОДокументе.ДоговорКонтрагента));
		ДанныеПечатиПокупатель = Новый Структура;
		ДанныеПечатиПокупатель.Вставить("ПредставлениеПокупателя", ПредставлениеПокупателя);
		ДанныеПечатиПокупатель.Вставить("Основание", Основание);
		
		ОбластьМакета.Параметры.Заполнить(ДанныеПечатиПокупатель);
		ТабличныйДокумент.Вывести(ОбластьМакета);

		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

		ТабличныйДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ДанныеПечатиКолонкиКодов = Новый Структура;
			Если ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
				ДанныеПечатиКолонкиКодов.Вставить("ИмяКолонкиКодов", "Артикул");
			ИначеЕсли ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
				ДанныеПечатиКолонкиКодов.Вставить("ИмяКолонкиКодов", "Код");
			КонецЕсли;
			ОбластьКодов.Параметры.Заполнить(ДанныеПечатиКолонкиКодов);
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		ТабличныйДокумент.Присоединить(ОбластьСуммы);

		ОбластьКолонкаТовар = Макет.Область("Товар");
		Если Не ВыводитьКоды Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + Макет.Область("КолонкаКодов").ШиринаКолонки;
		КонецЕсли;

		ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

		Сумма    = 0;
		СуммаНДС = 0;
		ВсегоСкидок    = 0;
		ВсегоБезСкидок = 0;
		НомерСтроки    = 0;
		
		Для Каждого Строка Из СведенияОДокументе.ТаблицаДокумента Цикл
			
			НомерСтроки = НомерСтроки + 1;
			ОбластьНомера.Параметры.Заполнить(Новый Структура("НомерСтроки", НомерСтроки));

			ТабличныйДокумент.Вывести(ОбластьНомера);

			Если ВыводитьКоды Тогда
				ОбластьКодов.Параметры.Заполнить(Новый Структура("Артикул", Строка.НоменклатураАртикул));
				ТабличныйДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			ДанныеПечатиСтрокаОбластьДанных = Новый Структура;
			ДанныеПечатиСтрокаОбластьДанных.Вставить("Товар",			 СокрЛП(Строка.НоменклатураНаименование));
			ДанныеПечатиСтрокаОбластьДанных.Вставить("Количество",		 Строка.Количество);
			ДанныеПечатиСтрокаОбластьДанных.Вставить("ЕдиницаИзмерения", Строка.ЕдиницаИзмеренияНаименование);
			ДанныеПечатиСтрокаОбластьДанных.Вставить("Цена",			 Строка.Цена);
			ОбластьДанных.Параметры.Заполнить(ДанныеПечатиСтрокаОбластьДанных);
			ТабличныйДокумент.Присоединить(ОбластьДанных);
			
			ОбластьСуммы.Параметры.Заполнить(Новый Структура("Сумма", Строка.Сумма));
			
			ТабличныйДокумент.Присоединить(ОбластьСуммы);
			Сумма    = Сумма    + Строка.Сумма;
			СуммаНДС = СуммаНДС + Строка.СуммаНДС;
			
		КонецЦикла;
		
		// Вывести Итого
		ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

		ТабличныйДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		ОбластьСуммы.Параметры.Заполнить(Новый Структура("Всего", ОбщегоНазначенияБПВызовСервера.ФорматСумм(Сумма)));
		ТабличныйДокумент.Присоединить(ОбластьСуммы);

		// Вывести ИтогоНДС
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");
		
		ТабличныйДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		Если СуммаНДС <> 0 Тогда
			НДС      = ?(СведенияОДокументе.СуммаВключаетНДС, НСтр("ru='В том числе НДС:'"), НСтр("ru='Сумма НДС:'"));
			ВсегоНДС = ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаНДС);
		Иначе
			НДС      = НСтр("ru='Без налога (НДС)'");
			ВсегоНДС = НСтр("ru='-'");
		КонецЕсли;
		ОбластьДанных.Параметры.Заполнить(Новый Структура("НДС", НДС));
		ОбластьСуммы.Параметры.Заполнить(Новый Структура("ВсегоНДС", ВсегоНДС));
		
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		ТабличныйДокумент.Присоединить(ОбластьСуммы);
		
		// Вывести ИтогоКОплате
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоКОплате|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоКОплате|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоКОплате|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоКОплате|Сумма");
		ТабличныйДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		СуммаКОплате = Сумма + ?(СведенияОДокументе.СуммаВключаетНДС, 0, СуммаНДС);
		ИтогоКОплате = ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаКОплате);
		ОбластьСуммы.Параметры.Заполнить(Новый Структура("ИтогоКОплате", ИтогоКОплате));
		
		ТабличныйДокумент.Присоединить(ОбластьСуммы);
		
		// Вывести Сумму прописью
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		ДанныеПечатиСуммаПрописью = Новый Структура("ИтоговаяСтрока, СуммаПрописью");
		СуммаКПрописи = Сумма + ?(СведенияОДокументе.СуммаВключаетНДС, 0, СуммаНДС);
		ДанныеПечатиСуммаПрописью.ИтоговаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Всего наименований %1, на сумму %2'"),
			НомерСтроки, ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаКПрописи, СведенияОДокументе.Валюта));
		ДанныеПечатиСуммаПрописью.СуммаПрописью = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СуммаКПрописи, СведенияОДокументе.Валюта);
		ОбластьМакета.Параметры.Заполнить(ДанныеПечатиСуммаПрописью);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ДвоичныеДанныеКартинки = Неопределено;
		
		// Дополнительные условия
		Если НЕ ПустаяСтрока(СведенияОДокументе.ТекстДополнительныхУсловий) И 
			ЗначениеЗаполнено(Макет.Области.Найти("ДополнительныеУсловия")) Тогда
			
			// Добавим отступ перед текстом
			Если ЗначениеЗаполнено(Макет.Области.Найти("ДополнительныеУсловияОтступ")) Тогда
				ОбластьМакетаОтступ = Макет.ПолучитьОбласть("ДополнительныеУсловияОтступ");
				ТабличныйДокумент.Вывести(ОбластьМакетаОтступ);
			КонецЕсли;
			
			// Выводим построчно многострочный текст
			// для того, чтобы корректно печатались длинные тексты
			ОбластьМакета = Макет.ПолучитьОбласть("ДополнительныеУсловия");
			ТекстДополнительныхУсловий = СведенияОДокументе.ТекстДополнительныхУсловий;
			ЧислоСтрокТекста = СтрЧислоСтрок(ТекстДополнительныхУсловий);
			Для СчетчикСтрок = 1 По ЧислоСтрокТекста Цикл
				СтруктураПараметров = Новый Структура("ТекстДополнительныхУсловий", СтрПолучитьСтроку(ТекстДополнительныхУсловий, СчетчикСтрок));
				ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЦикла;
		КонецЕсли;
		
		// Вывести подписи
		Если СПечатью Тогда 
			ДанныеКартинки = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаИДвоичныеДанные(СведенияОДокументе.Получатель.ФайлФаксимильнаяПечать);
			Если ЗначениеЗаполнено(ДанныеКартинки.ДвоичныеДанные) Тогда 
				ДвоичныеДанныеКартинки = ДанныеКартинки.ДвоичныеДанные;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДвоичныеДанныеКартинки) 
			И ЗначениеЗаполнено(Макет.Области.Найти("ПодвалСчетаСФаксимильнойПечатью")) Тогда 
			ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчетаСФаксимильнойПечатью");
			ОбластьМакета.Рисунки.ФаксимильнаяПечать.Картинка = Новый Картинка(ДвоичныеДанныеКартинки);
		Иначе 
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СведенияОДокументе.Получатель, "ЮридическоеФизическоеЛицо")
				= Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчета");
				ДанныеПечатиПодвалСчета = Новый Структура("ФИОРуководителя, ФИОБухгалтера", СведенияОДокументе.РуководительФИО, СведенияОДокументе.ГлавныйБухгалтерФИО);
				ОбластьМакета.Параметры.Заполнить(ДанныеПечатиПодвалСчета);
				ОбластьМакета.Параметры.Заполнить(СведенияОДокументе);
			Иначе
				ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчетаПредприниматель");
				ОбластьМакета.Параметры.Заполнить(Новый Структура("ФИОПредпринимателя", СведенияОПолучателе.ФамилияИнициалыФизлица));
			КонецЕсли;
		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(СведенияОДокументе);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
			НомерСтрокиНачало, ОбъектыПечати, СведенияОДокументе.Документ);

	КонецЦикла;

	Возврат ТабличныйДокумент;

КонецФункции

// Процедура формирования предварительной печатной формы документа (образец)
//
// Вызывается из карточки "Организации" для просмотра размещения логотипов
//
Функция ПечатьПредварительныйПросмотрСчетаНаОплату(Организация, ОбъектыПечати, ИмяМакета) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ЗначениеДаты = ТекущаяДатаСеанса();
	НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_" + ИмяМакета + "_" + ИмяМакета;
	Макет = ПолучитьОбщийМакет("ПФ_MXL_СчетЗаказ");
	
	ВывестиЗаголовокПредупреждение(Организация, ТабличныйДокумент, Макет);
	
	// Получим логотип организации
	ДанныеКартинки = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаИДвоичныеДанные(Организация.ФайлЛоготип);
		
	Если ЗначениеЗаполнено(ДанныеКартинки.ДвоичныеДанные) Тогда
		ОбластьМакета       = Макет.ПолучитьОбласть("ЗаголовокСчетаСЛоготипом");
		Попытка
			ОбластьМакета.Рисунки.ЛоготипСчета.Картинка = Новый Картинка(ДанныеКартинки.ДвоичныеДанные);
		Исключение
		КонецПопытки;
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокСчета");
	КонецЕсли;
	
	СведенияОПолучателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Организация, ЗначениеДаты);
	ДанныеПечатиЗаголовокСчета = Новый Структура;
	ДанныеПечатиЗаголовокСчета.Вставить("ИННПолучателя", СведенияОПолучателе.ИНН);
	ДанныеПечатиЗаголовокСчета.Вставить("КПППолучателя", СведенияОПолучателе.КПП);
	ДанныеПечатиЗаголовокСчета.Вставить("БИКБанкаПолучателя", СведенияОПолучателе.БИК);
	ДанныеПечатиЗаголовокСчета.Вставить("БанкПолучателяПредставление", СведенияОПолучателе.Банк);
	ДанныеПечатиЗаголовокСчета.Вставить("СчетБанкаПолучателяПредставление", СведенияОПолучателе.КоррСчет);
	ДанныеПечатиЗаголовокСчета.Вставить("ПредставлениеПолучателя", СведенияОПолучателе.НаименованиеДляПечатныхФорм);
	ДанныеПечатиЗаголовокСчета.Вставить("СчетПолучателяПредставление", СведенияОПолучателе.НомерСчета);
	
	ОбластьМакета.Параметры.Заполнить(ДанныеПечатиЗаголовокСчета);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Счет на оплату № 1 от %1'"),
		Формат(ТекущаяДатаСеанса(), "ДФ=dd.MM.yyyy"));
	ОбластьМакета.Параметры.Заполнить(Новый Структура("ТекстЗаголовка", ТекстЗаголовка));
	ТабличныйДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	СведенияОбОрганизации    = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Организация, ЗначениеДаты);
	ПредставлениеПоставщика = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(
		СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,ИНН,КПП,ЮридическийАдрес,Телефоны,");
	ОбластьМакета.Параметры.Заполнить(Новый Структура("ПредставлениеПоставщика", ПредставлениеПоставщика));
	ТабличныйДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ДанныеПечатиПокупатель = Новый Структура;
	ДанныеПечатиПокупатель.Вставить("ПредставлениеПокупателя", НСтр("ru='Контрагент, ИНН 1111111111, КПП 222222222'"));
	ДанныеПечатиПокупатель.Вставить("Основание", НСтр("ru='2 от 24.05.2014'"));
	ОбластьМакета.Параметры.Заполнить(ДанныеПечатиПокупатель);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	ДанныеПечатиСтрока = Новый Структура;
	ДанныеПечатиСтрока.Вставить("ЕдиницаИзмерения", "шт");
	ДанныеПечатиСтрока.Вставить("Товар", "Товар");
	ДанныеПечатиСтрока.Вставить("Цена", 118);
	ДанныеПечатиСтрока.Вставить("Количество", 10);
	ДанныеПечатиСтрока.Вставить("Сумма", 1180);
	ДанныеПечатиСтрока.Вставить("Номенклатура", "Товар");
	ДанныеПечатиСтрока.Вставить("НомерСтроки", 1);
	ДанныеПечатиСтрока.Вставить("Артикул", "А-00001");

	ОбластьМакета.Параметры.Заполнить(ДанныеПечатиСтрока);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Заполнить(Новый Структура("Всего", "1180,00"));
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
	ДанныеПечатиИтогоНДС = Новый Структура;
	ДанныеПечатиИтогоНДС.Вставить("ВсегоНДС", "180,00");
	ДанныеПечатиИтогоНДС.Вставить("НДС", НСтр("ru='В том числе НДС'"));
	ОбластьМакета.Параметры.Заполнить(ДанныеПечатиИтогоНДС);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ИтогоКОплате");
	ОбластьМакета.Параметры.Заполнить(Новый Структура("ИтогоКОплате", "1180,00"));
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	ДанныеПечатиСуммаПрописью = Новый Структура;
	ДанныеПечатиСуммаПрописью.Вставить("ИтоговаяСтрока", НСтр("ru='Всего наименований 10, на сумму 1180 рублей'"));
	ДанныеПечатиСуммаПрописью.Вставить("СуммаПрописью", НСтр("ru='Одна тысяча сто восемьдесят рублей 00 копеек'"));
	ОбластьМакета.Параметры.Заполнить(ДанныеПечатиСуммаПрописью);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	// Дополнительные условия
	ТекстДополнительныхУсловий = Организация.ДополнительныеУсловияПоУмолчанию.ТекстУсловий;
	Если НЕ ПустаяСтрока(ТекстДополнительныхУсловий) И 
		ЗначениеЗаполнено(Макет.Области.Найти("ДополнительныеУсловия")) Тогда
		
		// Добавим отступ перед текстом
		Если ЗначениеЗаполнено(Макет.Области.Найти("ДополнительныеУсловияОтступ")) Тогда
			ОбластьМакетаОтступ = Макет.ПолучитьОбласть("ДополнительныеУсловияОтступ");
			ТабличныйДокумент.Вывести(ОбластьМакетаОтступ);
		КонецЕсли;
		
		// Выводим построчно многострочный текст
		// для того, чтобы корректно печатались длинные тексты
		ОбластьМакета = Макет.ПолучитьОбласть("ДополнительныеУсловия");
		ЧислоСтрокТекста = СтрЧислоСтрок(ТекстДополнительныхУсловий);
		Для СчетчикСтрок = 1 По ЧислоСтрокТекста Цикл
			СтруктураПараметров = Новый Структура("ТекстДополнительныхУсловий", СтрПолучитьСтроку(ТекстДополнительныхУсловий, СчетчикСтрок));
			ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
	КонецЕсли;
	
	ДанныеКартинки = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаИДвоичныеДанные(Организация.ФайлФаксимильнаяПечать);
	Если ЗначениеЗаполнено(ДанныеКартинки.ДвоичныеДанные) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчетаСФаксимильнойПечатью");
		ОбластьМакета.Рисунки.ФаксимильнаяПечать.Картинка = Новый Картинка(ДанныеКартинки.ДвоичныеДанные);
	Иначе
		Если Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда 
			ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчета");
		Иначе
			ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчетаПредприниматель");
		КонецЕсли;
	КонецЕсли;
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	Возврат ТабличныйДокумент;
	
КонецФункции //ПечатьПредварительныйПросмотрСчетаНаОплату()

#КонецОбласти

#Область ПриложениеКДоговору

// Функция печати приложения к договору на основе счета на оплату покупателю
Функция ПечатьПриложенияКДоговору(СведенияСчетаНаОплату, ОбъектыПечати) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб			= Истина;
	ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.ИмяПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПокупателя_ПриложениеКДоговору";
	
	ДополнительнаяКолонкаПечатныхФормДокументов = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если НЕ ЗначениеЗаполнено(ДополнительнаяКолонкаПечатныхФормДокументов) Тогда
		ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;
	КонецЕсли;
	ВыводитьКоды = ДополнительнаяКолонкаПечатныхФормДокументов <> Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;
	
	ПервыйДокумент = Истина;
	
	Для Каждого СведенияОДокументе Из СведенияСчетаНаОплату Цикл
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СчетНаОплатуПокупателю.ПФ_MXL_ПриложениеКДоговору");

		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Выводим шапку счета
		ВывестиЗаголовокПредупреждение(СведенияОДокументе.Получатель, ТабличныйДокумент, Макет);

		СведенияОПолучателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(СведенияОДокументе.Получатель, СведенияОДокументе.ДатаДляПолученияСведений);

		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		
		ПараметрыОбласти = Новый Структура("НомерДоговора, ДатаДоговора", "________", """____"" ________________ г.");
		
		ПараметрыОбласти.Вставить("НомерДоговора", "________");
		ПараметрыОбласти.Вставить("ДатаДоговора", """____"" ________________ г.");
		
		Если ЗначениеЗаполнено(СведенияОДокументе.НомерДоговора) Тогда
			
			ПараметрыОбласти.Вставить("НомерДоговора", СведенияОДокументе.НомерДоговора);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СведенияОДокументе.ДатаДоговора) Тогда
			
			ПараметрыОбласти.Вставить("ДатаДоговора", Формат(СведенияОДокументе.ДатаДоговора, "ДЛФ=DD"));
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ПараметрыОбласти);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);

		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

		ТабличныйДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ДанныеПечатиКолонкиКодов = Новый Структура;
			Если ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
				ДанныеПечатиКолонкиКодов.Вставить("ИмяКолонкиКодов", "Артикул");
			ИначеЕсли ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
				ДанныеПечатиКолонкиКодов.Вставить("ИмяКолонкиКодов", "Код");
			КонецЕсли;
			ОбластьКодов.Параметры.Заполнить(ДанныеПечатиКолонкиКодов);
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		ТабличныйДокумент.Присоединить(ОбластьСуммы);

		ОбластьКолонкаТовар = Макет.Область("Товар");
		Если Не ВыводитьКоды Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + Макет.Область("КолонкаКодов").ШиринаКолонки;
		КонецЕсли;

		ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

		Сумма    = 0;
		СуммаНДС = 0;
		ВсегоСкидок    = 0;
		ВсегоБезСкидок = 0;
		НомерСтроки    = 0;
		
		Для Каждого Строка Из СведенияОДокументе.ТаблицаДокумента Цикл
			
			НомерСтроки = НомерСтроки + 1;
			ОбластьНомера.Параметры.Заполнить(Новый Структура("НомерСтроки", НомерСтроки));
			ТабличныйДокумент.Вывести(ОбластьНомера);

			Если ВыводитьКоды Тогда
				ОбластьКодов.Параметры.Заполнить(Новый Структура("Артикул", Строка.НоменклатураАртикул));
				ТабличныйДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			ДанныеПечатиОбластьДанных = Новый Структура;
			ДанныеПечатиОбластьДанных.Вставить("Товар",				СокрЛП(Строка.НоменклатураНаименование));
			ДанныеПечатиОбластьДанных.Вставить("Количество",		Строка.Количество);
			ДанныеПечатиОбластьДанных.Вставить("ЕдиницаИзмерения",	Строка.ЕдиницаИзмеренияНаименование);
			ДанныеПечатиОбластьДанных.Вставить("Цена",				Строка.Цена);
			ОбластьДанных.Параметры.Заполнить(ДанныеПечатиОбластьДанных);
			
			ТабличныйДокумент.Присоединить(ОбластьДанных);
			
			ОбластьСуммы.Параметры.Заполнить(Новый Структура("Сумма", Строка.Сумма));
			
			ТабличныйДокумент.Присоединить(ОбластьСуммы);
			Сумма    = Сумма    + Строка.Сумма;
			СуммаНДС = СуммаНДС + Строка.СуммаНДС;
			
		КонецЦикла;
		
		// Вывести Итого
		ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

		ТабличныйДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		ОбластьСуммы.Параметры.Заполнить(Новый Структура("Всего", ОбщегоНазначенияБПВызовСервера.ФорматСумм(Сумма)));
		ТабличныйДокумент.Присоединить(ОбластьСуммы);

		// Вывести ИтогоНДС
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");
		
		ТабличныйДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		Если СуммаНДС <> 0 Тогда
			ОбластьДанных.Параметры.Заполнить(Новый Структура("НДС", ?(СведенияОДокументе.СуммаВключаетНДС, НСтр("ru='В том числе НДС:'"), НСтр("ru='Сумма НДС:'"))));
			ОбластьСуммы.Параметры.Заполнить(Новый Структура("ВсегоНДС", ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаНДС)));
		Иначе
			ОбластьДанных.Параметры.Заполнить(Новый Структура("НДС", НСтр("ru='Без налога (НДС)'")));
			ОбластьСуммы.Параметры.Заполнить(Новый Структура("ВсегоНДС", НСтр("ru='-'")));
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		
		ТабличныйДокумент.Присоединить(ОбластьСуммы);
		
		// Вывести ИтогоКОплате
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоКОплате|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоКОплате|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоКОплате|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоКОплате|Сумма");
		ТабличныйДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		СуммаКОплате = Сумма + ?(СведенияОДокументе.СуммаВключаетНДС, 0, СуммаНДС);
		ОбластьСуммы.Параметры.Заполнить(Новый Структура("ИтогоКОплате", ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаКОплате)));
		ТабличныйДокумент.Присоединить(ОбластьСуммы);
		
		// Вывести Сумму прописью
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		СуммаКПрописи = Сумма + ?(СведенияОДокументе.СуммаВключаетНДС, 0, СуммаНДС);
		ИтоговаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Всего наименований %1, на сумму %2'"),
			НомерСтроки, ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаКПрописи, СведенияОДокументе.Валюта));
		СуммаПрописью = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СуммаКПрописи, СведенияОДокументе.Валюта);
		ДанныеПечатиСуммаПрописью = Новый Структура;
		ДанныеПечатиСуммаПрописью.Вставить("ИтоговаяСтрока", ИтоговаяСтрока);
		ДанныеПечатиСуммаПрописью.Вставить("СуммаПрописью", СуммаПрописью);
		ОбластьМакета.Параметры.Заполнить(ДанныеПечатиСуммаПрописью);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		
		СведенияОбОрганизации    = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(СведенияОДокументе.Поставщик, СведенияОДокументе.ДатаДляПолученияСведений);
		ПредставлениеПоставщика = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(
			СведенияОбОрганизации, "НаименованиеДляПечатныхФорм");
		
		СведенияОПокупателе     = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(СведенияОДокументе.Покупатель, СведенияОДокументе.ДатаДляПолученияСведений);
		ПредставлениеПокупателя = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(
			СведенияОПокупателе, "НаименованиеДляПечатныхФорм");
			
		ДанныеПечатиПодвал = Новый Структура;
		ДанныеПечатиПодвал.Вставить("ПредставлениеПоставщика", ПредставлениеПоставщика);
		ДанныеПечатиПодвал.Вставить("ПредставлениеПокупателя", ПредставлениеПокупателя);
		ОбластьМакета.Параметры.Заполнить(ДанныеПечатиПодвал);
		ОбластьМакета.Параметры.Заполнить(СведенияОДокументе);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
			НомерСтрокиНачало, ОбъектыПечати, СведенияОДокументе.Документ);

	КонецЦикла;

	Возврат ТабличныйДокумент;

КонецФункции

#КонецОбласти

#Область АктНаПередачуПрав

Функция ПолучитьОписаниеАктаНаПередачуПрав() Экспорт
	
	ТипОрганизацияКонтрагент = Новый Массив();
	ТипОрганизацияКонтрагент.Добавить(Тип("СправочникСсылка.Контрагенты"));
	ТипОрганизацияКонтрагент.Добавить(Тип("СправочникСсылка.Организации"));
	
	ОписаниеДаты = Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	Таблица = Новый ТаблицаЗначений();
	Таблица.Колонки.Добавить("Документ");
	
	Таблица.Колонки.Добавить("ДатаДляПолученияСведений",    ОписаниеДаты);
	Таблица.Колонки.Добавить("НомерДокумента",          	Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ДатаДокумента",           	ОписаниеДаты);
	Таблица.Колонки.Добавить("ДатаПодписанияДокумента", 	ОписаниеДаты);
	Таблица.Колонки.Добавить("ДокументОснование"			);
	
	Таблица.Колонки.Добавить("Организация",      Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Таблица.Колонки.Добавить("Подразделение",    Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Таблица.Колонки.Добавить("Лицензиар",        Новый ОписаниеТипов(ТипОрганизацияКонтрагент));
	Таблица.Колонки.Добавить("Лицензиат",        Новый ОписаниеТипов(ТипОрганизацияКонтрагент));
	Таблица.Колонки.Добавить("Плательщик",       Новый ОписаниеТипов(ТипОрганизацияКонтрагент));
	
	Таблица.Колонки.Добавить("БанковскийСчетЛицензиара",   Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета"));
	
	Таблица.Колонки.Добавить("Договор",        Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	Таблица.Колонки.Добавить("Основание",      Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ОснованиеНомер", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ОснованиеДата",  ОписаниеДаты);
	
	Таблица.Колонки.Добавить("Валюта",          	Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	Таблица.Колонки.Добавить("ВалютаКод",       	Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ВалютаНаименование",  Новый ОписаниеТипов("Строка"));
	
	Таблица.Колонки.Добавить("СуммаВключаетНДС",  Новый ОписаниеТипов("Булево"));
	
	Таблица.Колонки.Добавить("Руководитель",                      		Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Таблица.Колонки.Добавить("РуководительФИО",                   		Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("РуководительСтруктураФИО",          		Новый ОписаниеТипов("Структура"));
	Таблица.Колонки.Добавить("ЗаРуководителяПоПриказу",           		Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("РуководительДолжностьНаименование", 		Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("РуководительДолжность",             		Новый ОписаниеТипов("СправочникСсылка.Должности"));
	
	Таблица.Колонки.Добавить("ДоверенностьНомер",       Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ДоверенностьВыдана",      Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ДоверенностьЧерезКого",   Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ДоверенностьДата",        ОписаниеДаты);
	
	Таблица.Колонки.Добавить("ТаблицаДокумента");
	
	Возврат Таблица;
	
КонецФункции

Функция ПолучитьОписаниеТаблицыАктаНаПередачуПрав() Экспорт
	
	ОписаниеТиповЧисло15_2 = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2);
	ОписаниеТиповЧисло15_3 = ОбщегоНазначения.ОписаниеТипаЧисло(15, 3);
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ТабличнаяЧасть", 				 Новый ОписаниеТипов("ПеречислениеСсылка.ТабличныеЧастиДокументов"));
	Таблица.Колонки.Добавить("НомерСтроки", 				 ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
	Таблица.Колонки.Добавить("Товар", 						 Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Таблица.Колонки.Добавить("ТоварНаименование", 			 Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ТоварКод", 					 Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Количество", 					 ОписаниеТиповЧисло15_3);
	Таблица.Колонки.Добавить("КоличествоМест", 				 ОписаниеТиповЧисло15_3);
	Таблица.Колонки.Добавить("КоличествоВОдномМесте", 		 ОписаниеТиповЧисло15_3);
	Таблица.Колонки.Добавить("ЕдиницаИзмерения",             Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения"));
	Таблица.Колонки.Добавить("ЕдиницаИзмеренияНаименование", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ЕдиницаИзмеренияНаименованиеПолное", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ЕдиницаИзмеренияКод",          Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ВидУпаковки",                  Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения"));
	Таблица.Колонки.Добавить("ВидУпаковкиКод",               Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ВидУпаковкиНаименование",      Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("МассаБрутто", 				 ОписаниеТиповЧисло15_3);
	Таблица.Колонки.Добавить("Цена",						 ОписаниеТиповЧисло15_2);
	Таблица.Колонки.Добавить("СуммаБезНДС",					 ОписаниеТиповЧисло15_2);
	Таблица.Колонки.Добавить("СуммаНДС",					 ОписаниеТиповЧисло15_2);
	Таблица.Колонки.Добавить("СуммаСНДС",					 ОписаниеТиповЧисло15_2);
	Таблица.Колонки.Добавить("СтавкаНДС", 					 Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	
	Возврат Таблица;
	
КонецФункции

Функция ПечатьАктаНаПередачуПрав(СведенияАктаНаПередачуПрав, ОбъектыПечати, СтруктураПараметровПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб			= Истина;
	ТабличныйДокумент.ПолеСверху			= 10;
	ТабличныйДокумент.ПолеСнизу				= 10;
	ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Ландшафт;
	
	СисИнфо = Новый СистемнаяИнформация;
	Если ПустаяСтрока(СисИнфо.ИнформацияПрограммыПросмотра) Тогда 
		ТабличныйДокумент.ПолеСлева          = 0;
		ТабличныйДокумент.ПолеСправа         = 0;
	Иначе
		ТабличныйДокумент.ПолеСлева          = 10;
		ТабличныйДокумент.ПолеСправа         = 10;
	КонецЕсли;
	
	ТабличныйДокумент.ИмяПараметровПечати	= СтруктураПараметровПечати.ИмяПараметровПечати;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы(СтруктураПараметровПечати.ИмяМакетаПечати);
	
	ПервыйДокумент = Истина;
	
	Для Каждого СведенияОДокументе Из СведенияАктаНаПередачуПрав Цикл
		
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТаблицаДокумента = СведенияОДокументе.ТаблицаДокумента;
		
		ОбластьМакетаШапка            = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаб");
		ОбластьМакетаСтрока           = Макет.ПолучитьОбласть("Строка");
		ОбластьМакетаИтогоПоСтранице  = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьМакетаВсего            = Макет.ПолучитьОбласть("Всего");
		ОбластьМакетаПодвал           = Макет.ПолучитьОбласть("Подвал");
		
		// Выводим общие реквизиты шапки
		СведенияОЛицензиаре       = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(
				СведенияОДокументе.Лицензиар, СведенияОДокументе.ДатаДляПолученияСведений, СведенияОДокументе.БанковскийСчетЛицензиара);
		СведенияОЛицензиате       = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(СведенияОДокументе.Лицензиат,       СведенияОДокументе.ДатаДляПолученияСведений);
		СведенияОПлательщике      = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(СведенияОДокументе.Плательщик,      СведенияОДокументе.ДатаДляПолученияСведений);
		
		ОбластьМакетаШапка.Параметры.Заполнить(СведенияОДокументе);
		
		СписокЛицензиар = "НаименованиеДляПечатныхФорм,ИНН,Свидетельство,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет";
		СписокЛицензиат = "НаименованиеДляПечатныхФорм,ИНН,Свидетельство,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет";
		СписокПлательщик = "НаименованиеДляПечатныхФорм,ИНН,Свидетельство,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет";
	
		ОбластьМакетаШапка.Параметры.ПредставлениеЛицензиара = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОЛицензиаре, СписокЛицензиар);
		ОбластьМакетаШапка.Параметры.ПредставлениеЛицензиата  = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОЛицензиате, СписокЛицензиат);
		ОбластьМакетаШапка.Параметры.ПредставлениеПлательщика = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПлательщике, СписокПлательщик);
		
		ОбластьМакетаШапка.Параметры.ЛицензиарНаименование = СведенияОЛицензиаре.НаименованиеДляПечатныхФорм;
		ОбластьМакетаШапка.Параметры.ЛицензиатНаименование = СведенияОЛицензиате.НаименованиеДляПечатныхФорм;
		
		ТабличныйДокумент.Вывести(ОбластьМакетаШапка);
		
		// Инициализация счетчика страниц
		НомерСтраницы = 1;
		
		// Инициализация итогов по странице
		ИтогоКоличествоНаСтранице  = 0;
		ИтогоСуммаБезНДСНаСтранице = 0;
		ИтогоНДСНаСтранице         = 0;
		ИтогоСуммаСНДСНаСтранице   = 0;
		
		// Инициализация итогов по документу
		ИтогоКоличество  = 0;
		ИтогоСуммаСНДС   = 0;
		ИтогоСуммаБезНДС = 0;
		ИтогоНДС         = 0;
		
		// Инициализация счетчика строк
		НомерСтроки     = 0;
		КоличествоСтрок = ТаблицаДокумента.Количество();
		
		// Выводим заголовок многострочной части
		ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
		ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
		
		// Выводим многострочную часть документа
		Для Каждого СтрокаДокумента Из ТаблицаДокумента Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			ОбластьМакетаСтрока.Параметры.Номер = НомерСтроки;
			ОбластьМакетаСтрока.Параметры.ТоварНаименование 	   	 = СтрокаДокумента.ТоварНаименование;
			ОбластьМакетаСтрока.Параметры.ТоварКод 					 = СтрокаДокумента.ТоварКод;
			ОбластьМакетаСтрока.Параметры.БазоваяЕдиницаНаименование = СтрокаДокумента.ЕдиницаИзмеренияНаименование;
			ОбластьМакетаСтрока.Параметры.БазоваяЕдиницаКодПоОКЕИ    = СтрокаДокумента.ЕдиницаИзмеренияКод;
			ОбластьМакетаСтрока.Параметры.Количество                 = СтрокаДокумента.Количество;
			ОбластьМакетаСтрока.Параметры.Цена                       = СтрокаДокумента.Цена;
			ОбластьМакетаСтрока.Параметры.СуммаБезНДС                = СтрокаДокумента.СуммаБезНДС;
			ОбластьМакетаСтрока.Параметры.СтавкаНДС                  = СтрокаДокумента.СтавкаНДС;
			ОбластьМакетаСтрока.Параметры.СуммаНДС                   = СтрокаДокумента.СуммаНДС;
			ОбластьМакетаСтрока.Параметры.СуммаСНДС                  = СтрокаДокумента.СуммаСНДС;
			
			// Проверим вывод
			СтрокаСПодвалом = Новый Массив;
			Если НомерСтроки = 1 Тогда
				СтрокаСПодвалом.Добавить(ОбластьМакетаЗаголовокТаблицы); // если первая строка, то должен
			КонецЕсли;                                                   // помещаться заголовок
			СтрокаСПодвалом.Добавить(ОбластьМакетаСтрока);
			СтрокаСПодвалом.Добавить(ОбластьМакетаИтогоПоСтранице);
			Если НомерСтроки = КоличествоСтрок Тогда           			 // если последняя строка, должен
				СтрокаСПодвалом.Добавить(ОбластьМакетаВсего);  			 // помещаться и подвал документа
				СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
			КонецЕсли;
			
			Если НЕ ОбщегоНазначенияБПВызовСервера.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, СтрокаСПодвалом) Тогда
				
				Если КоличествоСтрок > 1 Тогда
					
					// Выводим итоги по странице
					ОбластьМакетаИтогоПоСтранице.Параметры.ИтогКоличествоПоСтранице = ИтогоКоличествоНаСтранице;
					ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыПоСтранице      = ИтогоСуммаБезНДСНаСтранице;
					ОбластьМакетаИтогоПоСтранице.Параметры.ИтогНДСПоСтранице        = ИтогоНДСНаСтранице;
					ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице  = ИтогоСуммаСНДСНаСтранице;
					ТабличныйДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
					
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					
					// Очистим итоги по странице
					ИтогоКоличествоНаСтранице  = 0;
					ИтогоСуммаБезНДСНаСтранице = 0;
					ИтогоНДСНаСтранице         = 0;
					ИтогоСуммаСНДСНаСтранице   = 0;
					
					// Выведем заголовок таблицы
					НомерСтраницы = НомерСтраницы + 1;
					ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
					ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
					
				КонецЕсли;
				
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьМакетаСтрока);
			
			// Увеличим итоги по странице
			ИтогоКоличествоНаСтранице  = ИтогоКоличествоНаСтранице  + СтрокаДокумента.Количество;
			ИтогоСуммаБезНДСНаСтранице = ИтогоСуммаБезНДСНаСтранице + СтрокаДокумента.СуммаБезНДС;
			ИтогоНДСНаСтранице         = ИтогоНДСНаСтранице         + СтрокаДокумента.СуммаНДС;
			ИтогоСуммаСНДСНаСтранице   = ИтогоСуммаСНДСНаСтранице   + СтрокаДокумента.СуммаСНДС;
			
			// Увеличим итоги по документу
			ИтогоКоличество  = ИтогоКоличество  + СтрокаДокумента.Количество;
			ИтогоСуммаБезНДС = ИтогоСуммаБезНДС + СтрокаДокумента.СуммаБезНДС;
			ИтогоНДС         = ИтогоНДС         + СтрокаДокумента.СуммаНДС;
			ИтогоСуммаСНДС   = ИтогоСуммаСНДС   + СтрокаДокумента.СуммаСНДС;
			
		КонецЦикла;
		
		// Выводим итоги по странице
		ОбластьМакетаИтогоПоСтранице.Параметры.ИтогКоличествоПоСтранице = ИтогоКоличествоНаСтранице;
		ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыПоСтранице      = ИтогоСуммаБезНДСНаСтранице;
		ОбластьМакетаИтогоПоСтранице.Параметры.ИтогНДСПоСтранице        = ИтогоНДСНаСтранице;
		ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице  = ИтогоСуммаСНДСНаСтранице;
		
		ТабличныйДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
		
		// Выводим итоги по документу в целом
		ОбластьМакетаВсего.Параметры.ИтогКоличество = ИтогоКоличество;
		ОбластьМакетаВсего.Параметры.ИтогСуммы      = ИтогоСуммаБезНДС;
		ОбластьМакетаВсего.Параметры.ИтогНДС        = ИтогоНДС;
		ОбластьМакетаВсего.Параметры.ИтогСуммыСНДС  = ИтогоСуммаСНДС;
		
		ТабличныйДокумент.Вывести(ОбластьМакетаВсего);
		
		// Выводим подвал документа
		ПоследняяЦифра = Прав(Строка(НомерСтраницы),1);
		Суффикс = ?(ПоследняяЦифра = "1", " листе", " листах"); 
		ОбластьМакетаПодвал.Параметры.КоличествоЛистовВПриложении = Строка(НомерСтраницы) + Суффикс;

		ОбластьМакетаПодвал.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(ТаблицаДокумента.Количество(), ,",,,,,,,,0");
		
		ОбластьМакетаПодвал.Параметры.СуммаПрописью = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(ИтогоСуммаСНДС, СведенияОДокументе.Валюта);
		
		ЗаРуководителяПоПриказу = ?(СведенияОДокументе.ЗаРуководителяПоПриказу = "", "" , ", "+СведенияОДокументе.ЗаРуководителяПоПриказу);
		ОбластьМакетаПодвал.Параметры.ФИОРуководителя       = СведенияОДокументе.РуководительФИО + ЗаРуководителяПоПриказу;
		ОбластьМакетаПодвал.Параметры.ДолжностьРуководителя = СведенияОДокументе.РуководительДолжность;
		
		Если ЗначениеЗаполнено(СведенияОДокументе.ДатаПодписанияДокумента) Тогда
			ПолнаяДатаДокумента = Формат(СведенияОДокументе.ДатаПодписанияДокумента, "ДФ=""дд ММММ гггг """"года""""""");
			ДлинаСтроки         = СтрДлина(ПолнаяДатаДокумента);
			ПервыйРазделитель   = Найти(ПолнаяДатаДокумента," ");
			ВторойРазделитель   = Найти(Прав(ПолнаяДатаДокумента,ДлинаСтроки - ПервыйРазделитель), " ") + ПервыйРазделитель;
			
			ОбластьМакетаПодвал.Параметры.ДатаДокументаДень  = """" + Лев(ПолнаяДатаДокумента, ПервыйРазделитель - 1) + """";
			ОбластьМакетаПодвал.Параметры.ДатаДокументаМесяц = Сред(ПолнаяДатаДокумента, ПервыйРазделитель + 1, ВторойРазделитель - ПервыйРазделитель - 1);
			ОбластьМакетаПодвал.Параметры.ДатаДокументаГод   = Прав(ПолнаяДатаДокумента, ДлинаСтроки - ВторойРазделитель);
		Иначе
			ОбластьМакетаПодвал.Параметры.ДатаДокументаДень  = """     """;
			ОбластьМакетаПодвал.Параметры.ДатаДокументаМесяц = "";
			ОбластьМакетаПодвал.Параметры.ДатаДокументаГод   = " 20     года";	
		КонецЕсли;
		
		ОбластьМакетаПодвал.Параметры.ДоверенностьНомер 	= СведенияОДокументе.ДоверенностьНомер;
		ОбластьМакетаПодвал.Параметры.ДоверенностьВыдана 	= СведенияОДокументе.ДоверенностьВыдана;
		ОбластьМакетаПодвал.Параметры.ДоверенностьЧерезКого = СведенияОДокументе.ДоверенностьЧерезКого;
		ОбластьМакетаПодвал.Параметры.ДоверенностьДата 		= ?(ЗначениеЗаполнено(СведенияОДокументе.ДоверенностьДата), Формат(СведенияОДокументе.ДоверенностьДата, "ДЛФ=ДД"), "");
		
		ТабличныйДокумент.Вывести(ОбластьМакетаПодвал);
		
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
			НомерСтрокиНачало, ОбъектыПечати, СведенияОДокументе.Документ);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#КонецОбласти