////////////////////////////////////////////////////////////////////////////////
// АКТУАЛИЗАЦИЯ ДАННЫХ

Функция НайтиФоновоеЗаданиеАктуализацииПоОрганизации(Знач Организация, Знач УникальныйИдентификаторФормы) Экспорт
	
	Результат = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Отбор = Новый Структура("Состояние", СостояниеФоновогоЗадания.Активно);
	
	МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	Для каждого ФоновоеЗадание Из МассивФоновыхЗаданий Цикл
		
		Ключ = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ФоновоеЗадание.Ключ, ":");
		Если Ключ.Количество() > 1 Тогда
			
			ПрефиксКлючаЗадания = Ключ[0];
			ОрганизацияЗадания = Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор(Ключ[1]));
			ПользовательЗадания = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(Ключ[2]));
			
			Если ПрефиксКлючаЗадания = "АктуализацияДанных" И ОрганизацияЗадания = Организация Тогда
				СвойстваВыполняемогоЗадания = Новый Структура("УникальныйИдентификатор, Ключ, Наименование");
				ЗаполнитьЗначенияСвойств(СвойстваВыполняемогоЗадания, ФоновоеЗадание);
				СвойстваВыполняемогоЗадания.Вставить("Организация", ОрганизацияЗадания);
				СвойстваВыполняемогоЗадания.Вставить("Пользователь", ПользовательЗадания);
				Результат = СвойстваВыполняемогоЗадания;
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ИБФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	// Если не найдено ни одного задания в файловом режиме работы, это еще не значит, 
	// что никто не актуализирует данные.
	Если Результат = Неопределено И ИБФайловая Тогда 
		
		УспехБлокировки = Ложь;
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Организация, , УникальныйИдентификаторФормы);
			УспехБлокировки = Истина;
		Исключение
			Результат = Новый Структура("УникальныйИдентификатор", "");
		КонецПопытки;
		
		Если УспехБлокировки Тогда
			РазблокироватьДанныеДляРедактирования(Организация, УникальныйИдентификаторФормы);
		КонецЕсли;
		
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция ПроверитьАктуальность(Знач ПараметрыЗадания) Экспорт
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ПараметрыЗадания.ИдентификаторЗадания);
	
	РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		ПараметрыЗадания.УникальныйИдентификаторФормы,
		"Обработки.ЗакрытиеМесяца.ПроверитьАктуальностьВФоне",
		ПараметрыЗадания,
		НСтр("ru = 'Проверка актуальности данных'"));

	Возврат РезультатВыполнения;
	
КонецФункции

Функция АктуализироватьДанные(Знач ПараметрыЗадания) Экспорт
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ПараметрыЗадания.ИдентификаторЗадания);
	
	НаименованиеЗадания = НСтр("ru='Актуализация данных: %1 (%2)'");
	НаименованиеЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НаименованиеЗадания,
		ПараметрыЗадания.Организация,
		ПользователиКлиентСервер.ТекущийПользователь());
		
	КлючЗадания = "АктуализацияДанных:%1:%2";
	КлючЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(КлючЗадания, 
		ПараметрыЗадания.Организация.УникальныйИдентификатор(),
		ПользователиКлиентСервер.ТекущийПользователь().УникальныйИдентификатор());
		
	РезультатВыполнения = ЗапуститьВыполнениеВФоне(
		ПараметрыЗадания.УникальныйИдентификаторФормы,
		"Обработки.ЗакрытиеМесяца.АктуализироватьВФоне",
		ПараметрыЗадания,
		НаименованиеЗадания,
		,                       
		КлючЗадания);
	
	Возврат РезультатВыполнения;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С НАСТРОЙКАМИ

Функция ПроверятьАктуальность() Экспорт
	
	Возврат Константы.ПроверятьАктуальностьДанныхУчета.Получить();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ФОНОВЫМИ ЗАДАНИЯМИ

Функция ЗаданиеВыполнено(Знач ИдентификаторЗадания) Экспорт
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

Процедура ОтменитьВыполнениеЗадания(Знач ИдентификаторЗадания) Экспорт
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
КонецПроцедуры

Функция ПрочитатьПрогресс(Знач ИдентификаторЗадания) Экспорт
	
	Возврат ДлительныеОперации.ПрочитатьПрогресс(ИдентификаторЗадания);
	
КонецФункции

// Запускает выполнение процедуры в фоновом задании с возможностью указать ключ фонового задания.
// 
// Параметры:
//  ИдентификаторФормы     - УникальныйИдентификатор - идентификатор формы, 
//                           из которой выполняется запуск длительной операции. 
//  ИмяЭкспортнойПроцедуры - Строка - имя экспортной процедуры, 
//                           которую необходимо выполнить в фоне.
//  Параметры              - Структура - все необходимые параметры для 
//                           выполнения процедуры ИмяЭкспортнойПроцедуры.
//  НаименованиеЗадания    - Строка - наименование фонового задания. 
//                           Если не задано, то будет равно ИмяЭкспортнойПроцедуры. 
//  ИспользоватьДополнительноеВременноеХранилище - Булево - признак использования
//                           дополнительного временного хранилища для передачи данных
//                           в родительский сеанс из фонового задания. По умолчанию - Ложь.
//
// Возвращаемое значение:
//  Структура              - параметры выполнения задания: 
//   * АдресХранилища  - Строка     - адрес временного хранилища, в которое будет
//                                    помещен результат работы задания;
//   * АдресХранилищаДополнительный - Строка - адрес дополнительного временного хранилища,
//                                    в которое будет помещен результат работы задания (доступно только если 
//                                    установлен параметр ИспользоватьДополнительноеВременноеХранилище);
//   * ИдентификаторЗадания - УникальныйИдентификатор - уникальный идентификатор запущенного фонового задания;
//   * ЗаданиеВыполнено - Булево - Истина если задание было успешно выполнено за время вызова функции.
// 
Функция ЗапуститьВыполнениеВФоне(Знач ИдентификаторФормы, Знач ИмяЭкспортнойПроцедуры, 
	Знач Параметры, Знач НаименованиеЗадания = "", ИспользоватьДополнительноеВременноеХранилище = Ложь, Знач КлючЗадания = "")
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторФормы);
	
	Результат = Новый Структура;
	Результат.Вставить("АдресХранилища",       АдресХранилища);
	Результат.Вставить("ЗаданиеВыполнено",     Ложь);
	Результат.Вставить("ИдентификаторЗадания", Неопределено);
	
	Если Не ЗначениеЗаполнено(НаименованиеЗадания) Тогда
		НаименованиеЗадания = ИмяЭкспортнойПроцедуры;
	КонецЕсли;
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив;
	ПараметрыЭкспортнойПроцедуры.Добавить(Параметры);
	ПараметрыЭкспортнойПроцедуры.Добавить(АдресХранилища);
	
	Если ИспользоватьДополнительноеВременноеХранилище Тогда
		АдресХранилищаДополнительный = ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторФормы);
		ПараметрыЭкспортнойПроцедуры.Добавить(АдресХранилищаДополнительный);
	КонецЕсли;
	
	РежимОтладки = ОбщегоНазначенияКлиентСервер.РежимОтладки();
	Если РежимОтладки Тогда
		
		РаботаВБезопасномРежиме.ВыполнитьМетодКонфигурации(ИмяЭкспортнойПроцедуры, ПараметрыЭкспортнойПроцедуры);
		Результат.ЗаданиеВыполнено = Истина;
		
	Иначе
		
		ПараметрыЗадания = Новый Массив;
		ПараметрыЗадания.Добавить(ИмяЭкспортнойПроцедуры);
		ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);
		ВремяОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 4, 2);
		Задание = ФоновыеЗадания.Выполнить("РаботаВБезопасномРежиме.ВыполнитьМетодКонфигурации", ПараметрыЗадания, КлючЗадания, НаименованиеЗадания);
		Попытка
			Задание.ОжидатьЗавершения(ВремяОжидания);
		Исключение
			// Специальная обработка не требуется, возможно исключение вызвано истечением времени ожидания.
		КонецПопытки;
		
		Результат.ЗаданиеВыполнено = ЗаданиеВыполнено(Задание.УникальныйИдентификатор);
		Результат.ИдентификаторЗадания = Задание.УникальныйИдентификатор;
	КонецЕсли;
	
	Если ИспользоватьДополнительноеВременноеХранилище Тогда
		Результат.Вставить("АдресХранилищаДополнительный", АдресХранилищаДополнительный);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЕРВИСНЫЕ ФУНКЦИИ

Функция ПолучитьПредупреждающийЦвет() Экспорт
	
	Возврат ЦветаСтиля.ЦветФонаНекорректногоКонтрагента;
	
КонецФункции

Функция ПоказатьПредупреждениеАктуализацияДанных(Организация) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат НЕ Константы.ПроверятьАктуальностьДанныхУчета.Получить()
		И Обработки.ЗакрытиеМесяца.ПравоИзмененияРегламентныхОпераций() 
		И Обработки.ЗакрытиеМесяца.АктуализацияВозможна(Организация);
	
КонецФункции