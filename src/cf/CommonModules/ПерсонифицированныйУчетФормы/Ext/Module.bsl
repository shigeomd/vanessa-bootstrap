
#Область СлужебныеПроцедурыИФункции

// Обработчики событий форм документов перс. учета не входящих в квартальную отчетность.

Процедура ПриСозданииНаСервере(Форма, ЗапрашиваемыеЗначенияЗаполнения) Экспорт
	
	Если Форма.Параметры.Ключ.Пустая() Тогда
		
		ЗапрашиваемыеЗначенияЗаполнения.Вставить("Ответственный", "Объект.Ответственный");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(Форма, ЗапрашиваемыеЗначенияЗаполнения);
		ПриПолученииДанныхНаСервере(Форма, Форма.Объект);	
		
	КонецЕсли;	
	
	УстановитьУсловноеОформление(Форма);
	
КонецПроцедуры	

Процедура ПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	ПриПолученииДанныхНаСервере(Форма, ТекущийОбъект);	
КонецПроцедуры

Процедура ПослеЗаписиНаСервере(Форма) Экспорт
	УстановитьДоступностьКомандФормы(Форма);	
	УстановитьДоступностьЭлементовСостоянияПФР(Форма);
КонецПроцедуры

Процедура ОрганизацияПриИзменении(Форма, ЗапрашиваемыеЗначения) Экспорт
	
	Если НЕ ЗапрашиваемыеЗначения.Свойство("Организация") Тогда
		ЗапрашиваемыеЗначения.Вставить("Организация", "Объект.Организация");
	КонецЕсли; 
	
	ЗарплатаКадры.ЗаполнитьЗначенияВФорме(Форма, ЗапрашиваемыеЗначения, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Организация"));	
	Форма.Объект.НомерПачки = 0;
	
КонецПроцедуры	

Процедура ПриПолученииДанныхНаСервере(Форма, ТекущийОбъект)
	УстановитьДоступностьКомандФормы(Форма);	
	УстановитьДоступностьЭлементовСостоянияПФР(Форма);
КонецПроцедуры	

Процедура УстановитьУсловноеОформление(Форма)
	ЭлементОформления = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;	
	
	ГруппаЭлементовОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаЭлементовОтбора.Использование = Истина;
	
	ЭлементОтбора = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ГруппаЭлементовОтбора.Использование = Истина;
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Проведен");
	ЭлементОтбора.ПравоеЗначение = Истина;
	
	ЭлементОтбора = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ГруппаЭлементовОтбора.Использование = Истина;
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДокументПринятВПФР");
	ЭлементОтбора.ПравоеЗначение = Истина;

	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина; 
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ИнфоНадпись");
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
КонецПроцедуры	

Процедура УстановитьДоступностьКомандФормы(Форма)
	Объект = Форма.Объект;
	
	Если Объект.Проведен Тогда
		Форма.Элементы.ЗаписатьНаДиск.Доступность = Истина;
		Форма.Элементы.ИмяФайлаДляПФР.Доступность = Истина;
	Иначе
		Если Объект.Ссылка.Пустая() Тогда
			Форма.Элементы.ИмяФайлаДляПФР.Доступность = Ложь;  
		КонецЕсли;	
		Форма.Элементы.ЗаписатьНаДиск.Доступность = Ложь; 
	КонецЕсли;		
КонецПроцедуры	

// Обработчики событий форм документов перс. учета входящих в квартальную отчетность.

Процедура ДокументыКвартальнойОтчетностиПриСозданииНаСервере(Форма, ЗапрашиваемыеЗначенияЗаполнения, ИзменятьДоступностьЭлементов = Истина) Экспорт
		
	Если Форма.Параметры.Ключ.Пустая() Тогда
		
		ЗапрашиваемыеЗначенияЗаполнения.Вставить("Ответственный", "Объект.Ответственный");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(Форма, ЗапрашиваемыеЗначенияЗаполнения);
		ДокументыКвартальнойОтчетностиПриПолученииДанныхНаСервере(Форма, Форма.Объект, ИзменятьДоступностьЭлементов);
		
	КонецЕсли;
	
КонецПроцедуры	

Процедура ДокументыКвартальнойОтчетностиПриЧтенииНаСервере(Форма, ТекущийОбъект, ИзменятьДоступностьЭлементов = Истина) Экспорт
	ДокументыКвартальнойОтчетностиПриПолученииДанныхНаСервере(Форма, ТекущийОбъект, ИзменятьДоступностьЭлементов);	
КонецПроцедуры	

Процедура ДокументыКвартальнойОтчетностиПослеЗаписиНаСервере(Форма) Экспорт
	//УстановитьДоступностьКомандФормы(Форма);		
КонецПроцедуры	

Процедура ДокументыКвартальнойОтчетностиПриПолученииДанныхНаСервере(Форма, Объект, ИзменятьДоступностьЭлементов = Истина)	
	
	КомплектОтправленВПФР = Ложь;
	
	Если Не Форма.Объект.Ссылка.Пустая() Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Форма.Объект.Ссылка);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(КомплектыСодержащиеДокумент.ТолькоПросмотр) КАК ТолькоПросмотр,
		|	МАКСИМУМ(КомплектыСодержащиеДокумент.Ссылка) КАК Ссылка
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА КомплектыОтчетностиПерсучета.СостояниеКомплекта = ЗНАЧЕНИЕ(Перечисление.СостояниеКомплектаОтчетностиПерсучета.СведенияОтправлены)
		|					ИЛИ КомплектыОтчетностиПерсучета.СостояниеКомплекта = ЗНАЧЕНИЕ(Перечисление.СостояниеКомплектаОтчетностиПерсучета.СведенияСкорректированы)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК ТолькоПросмотр,
		|		КомплектыОтчетностиПерсучета.Ссылка КАК Ссылка
		|	ИЗ
		|		Справочник.КомплектыОтчетностиПерсучета КАК КомплектыОтчетностиПерсучета
		|	ГДЕ
		|		КомплектыОтчетностиПерсучета.ВедомостьУплатыАДВ11 = &Ссылка
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА КомплектыОтчетностиПерсучета.СостояниеКомплекта = ЗНАЧЕНИЕ(Перечисление.СостояниеКомплектаОтчетностиПерсучета.СведенияОтправлены)
		|					ИЛИ КомплектыОтчетностиПерсучета.СостояниеКомплекта = ЗНАЧЕНИЕ(Перечисление.СостояниеКомплектаОтчетностиПерсучета.СведенияСкорректированы)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ,
		|		КомплектыОтчетностиПерсучета.Ссылка
		|	ИЗ
		|		Справочник.КомплектыОтчетностиПерсучета КАК КомплектыОтчетностиПерсучета
		|	ГДЕ
		|		КомплектыОтчетностиПерсучета.ОписьПачекСЗВ = &Ссылка
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА КомплектыОтчетностиПерсучетаСписокПачекСЗВ.Ссылка.СостояниеКомплекта = ЗНАЧЕНИЕ(Перечисление.СостояниеКомплектаОтчетностиПерсучета.СведенияОтправлены)
		|					ИЛИ КомплектыОтчетностиПерсучетаСписокПачекСЗВ.Ссылка.СостояниеКомплекта = ЗНАЧЕНИЕ(Перечисление.СостояниеКомплектаОтчетностиПерсучета.СведенияСкорректированы)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ,
		|		КомплектыОтчетностиПерсучетаСписокПачекСЗВ.Ссылка
		|	ИЗ
		|		Справочник.КомплектыОтчетностиПерсучета.СписокПачекСЗВ КАК КомплектыОтчетностиПерсучетаСписокПачекСЗВ
		|	ГДЕ
		|		КомплектыОтчетностиПерсучетаСписокПачекСЗВ.ПачкаДокументов = &Ссылка
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА КомплектыОтчетностиПерсучетаСписокПачекСЗВ6_3.Ссылка.СостояниеКомплекта = ЗНАЧЕНИЕ(Перечисление.СостояниеКомплектаОтчетностиПерсучета.СведенияОтправлены)
		|					ИЛИ КомплектыОтчетностиПерсучетаСписокПачекСЗВ6_3.Ссылка.СостояниеКомплекта = ЗНАЧЕНИЕ(Перечисление.СостояниеКомплектаОтчетностиПерсучета.СведенияСкорректированы)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ,
		|		КомплектыОтчетностиПерсучетаСписокПачекСЗВ6_3.Ссылка
		|	ИЗ
		|		Справочник.КомплектыОтчетностиПерсучета.СписокПачекСЗВ6_3 КАК КомплектыОтчетностиПерсучетаСписокПачекСЗВ6_3
		|	ГДЕ
		|		КомплектыОтчетностиПерсучетаСписокПачекСЗВ6_3.ПачкаДокументов = &Ссылка) КАК КомплектыСодержащиеДокумент";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			КомплектОтправленВПФР = ?(Выборка.ТолькоПросмотр = Истина, Истина, Ложь);
			Форма.Комплект = Выборка.Ссылка;
			Если Выборка.ТолькоПросмотр = Истина Тогда
				Форма.ТолькоПросмотр = Истина;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;		
	
КонецПроцедуры	

Процедура УстановитьДоступностьЭлементовСостоянияПФР(Форма)
	Объект = Форма.Объект;
	
	Если Объект.Проведен Тогда
		Форма.Элементы.ДокументПринятВПФР.ТолькоПросмотр = Ложь;     
		Форма.Элементы.Отменить.Доступность = Объект.ДокументПринятВПФР;  
		Форма.Элементы.Открыть.Доступность = Истина;   
		Форма.Элементы.ОбщаяКомандаПроверитьФайлCheckXml.Доступность = Истина;
	Иначе
		Форма.Элементы.ДокументПринятВПФР.ТолькоПросмотр = Истина;
		Форма.Элементы.Отменить.Доступность = Ложь;    
		Форма.Элементы.ОбщаяКомандаПроверитьФайлCheckXml.Доступность = Ложь;
		
		Если Не Объект.Ссылка.Пустая() Тогда
			Форма.Элементы.Открыть.Доступность = Истина; 
		Иначе
			Форма.Элементы.ИмяФайлаДляПФР.Доступность = Ложь; 
		КонецЕсли;	
	КонецЕсли;	
	
	Форма.ТолькоПросмотр = Объект.ДокументПринятВПФР;
КонецПроцедуры	

// Общие обработчики событий форм документов перс. учета не входящих в квартальную отчетность  (СЗВ-6-1(2,3), СПВ-1).

Процедура ДокументыСЗВПриСозданииНаСервере(Форма, ОписаниеДокумента) Экспорт
	Если Форма.Параметры.Ключ.Пустая() Тогда	
		Объект = Форма.Объект;
		
		ДокументыСЗВПриПолученииДанныхНаСервере(Форма, ОписаниеДокумента);
		
		Если Не ЗначениеЗаполнено(Объект.КатегорияЗастрахованныхЛиц)
			И Форма.Элементы.КатегорияЗастрахованныхЛиц.СписокВыбора.Количество() > 0 Тогда 
			Объект.КатегорияЗастрахованныхЛиц = Форма.Элементы.КатегорияЗастрахованныхЛиц.СписокВыбора[0].Значение;
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

Процедура ДокументыСЗВУстановитьКатегориюЗастрахованныхЛицЗаПериод(Форма, ОписаниеДокумента) Экспорт 
	Объект = Форма.Объект;
	
	СписокКатегорийЗастрахованныхЛиц = ДокументыСЗВСписокВыбораКатегорийЗЛ(Объект, ОписаниеДокумента);
	
	Если СписокКатегорийЗастрахованныхЛиц.НайтиПоЗначению(Объект.КатегорияЗастрахованныхЛиц) = Неопределено Тогда 
		Объект.КатегорияЗастрахованныхЛиц = СписокКатегорийЗастрахованныхЛиц[0].Значение;
	КонецЕсли;	
	
	Форма.Элементы.КатегорияЗастрахованныхЛиц.СписокВыбора.ЗагрузитьЗначения(СписокКатегорийЗастрахованныхЛиц.ВыгрузитьЗначения());				
КонецПроцедуры	

Процедура ДокументыСЗВДобавитьКонтрольИсправлений(КонтролируемыеПоляРеквизитФормы, РазделыКонтролируемыхПолей = Неопределено) Экспорт
	
	КонтролируемыеПоляВзносыНачисленные = Новый Массив;
	КонтролируемыеПоляВзносыНачисленные.Добавить("НачисленоСтраховая");
	КонтролируемыеПоляВзносыНачисленные.Добавить("НачисленоНакопительная");
	КонтролируемыеПоляВзносыНачисленные.Добавить("ДоНачисленоСтраховая");
	КонтролируемыеПоляВзносыНачисленные.Добавить("ДоНачисленоНакопительная");
	
	КонтролируемыеПоляВзносыУплаченные = Новый Массив;
	КонтролируемыеПоляВзносыУплаченные.Добавить("УплаченоСтраховая");
	КонтролируемыеПоляВзносыУплаченные.Добавить("УплаченоНакопительная");
	КонтролируемыеПоляВзносыУплаченные.Добавить("ДоУплаченоСтраховая");
	КонтролируемыеПоляВзносыУплаченные.Добавить("ДоУплаченоНакопительная");
	
	КонтролируемыеПоляСтаж = Новый Массив;
	КонтролируемыеПоляСтаж.Добавить("НомерОсновнойЗаписи");
	КонтролируемыеПоляСтаж.Добавить("НомерДополнительнойЗаписи");
	КонтролируемыеПоляСтаж.Добавить("ДатаНачалаПериода");
	КонтролируемыеПоляСтаж.Добавить("ДатаОкончанияПериода");
	КонтролируемыеПоляСтаж.Добавить("ОсобыеУсловияТруда");
	КонтролируемыеПоляСтаж.Добавить("КодПозицииСписка");
	КонтролируемыеПоляСтаж.Добавить("ОснованиеИсчисляемогоСтажа");
	КонтролируемыеПоляСтаж.Добавить("ПервыйПараметрИсчисляемогоСтажа");
	КонтролируемыеПоляСтаж.Добавить("ВторойПараметрИсчисляемогоСтажа");
	КонтролируемыеПоляСтаж.Добавить("ТретийПараметрИсчисляемогоСтажа");
	КонтролируемыеПоляСтаж.Добавить("ОснованиеВыслугиЛет");
	КонтролируемыеПоляСтаж.Добавить("ПервыйПараметрВыслугиЛет");
	КонтролируемыеПоляСтаж.Добавить("ВторойПараметрВыслугиЛет");
	КонтролируемыеПоляСтаж.Добавить("ТретийПараметрВыслугиЛет");
	КонтролируемыеПоляСтаж.Добавить("ТерриториальныеУсловия");
	КонтролируемыеПоляСтаж.Добавить("ДатаОкончанияПериода");
	КонтролируемыеПоляСтаж.Добавить("ПараметрТерриториальныхУсловий");
	
	КонтролируемыеПоляЗаработок = Новый Массив;
	КонтролируемыеПоляЗаработок.Добавить("ОблагаетсяВзносами");
	КонтролируемыеПоляЗаработок.Добавить("Заработок");
	КонтролируемыеПоляЗаработок.Добавить("Месяц");
	КонтролируемыеПоляЗаработок.Добавить("ОблагаетсяВзносамиДоПредельнойВеличины");
	КонтролируемыеПоляЗаработок.Добавить("ОблагаетсяВзносамиСвышеПредельнойВеличины");
	КонтролируемыеПоляЗаработок.Добавить("ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах");
	КонтролируемыеПоляЗаработок.Добавить("ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах");
	КонтролируемыеПоляЗаработок.Добавить("КатегорияЗастрахованныхЛиц");
	КонтролируемыеПоляЗаработок.Добавить("ПоДоговорамГПХДоПредельнойВеличины");
	
	КонтролируемыеПоляЗаработокВредный = Новый Массив;
	
	КонтролируемыеПоляЗаработокВредный.Добавить("КлассУсловийТруда");
	КонтролируемыеПоляЗаработокВредный.Добавить("Месяц");
	КонтролируемыеПоляЗаработокВредный.Добавить("ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах");
	КонтролируемыеПоляЗаработокВредный.Добавить("ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах");

	КонтролируемыПоля = Новый Структура;
	
	Если РазделыКонтролируемыхПолей = Неопределено
		Или РазделыКонтролируемыхПолей.Найти("НачисленныеВзносы") <> Неопределено Тогда 
		
		ОписаниеКонтролируемыхПолей = Новый Структура("ИмяПоляФиксДанных, КонтролируемыеПоля", "ФиксНачисленныеВзносы", Новый ФиксированныйМассив(КонтролируемыеПоляВзносыНачисленные));
		
		КонтролируемыПоля.Вставить("НачисленныеВзносы", Новый ФиксированнаяСтруктура(ОписаниеКонтролируемыхПолей));
	КонецЕсли;	
	
	Если РазделыКонтролируемыхПолей = Неопределено
		Или РазделыКонтролируемыхПолей.Найти("УплаченныеВзносы") <> Неопределено Тогда
		
		ОписаниеКонтролируемыхПолей = Новый Структура("ИмяПоляФиксДанных, КонтролируемыеПоля", "ФиксУплаченныеВзносы", Новый ФиксированныйМассив(КонтролируемыеПоляВзносыУплаченные));
		
		КонтролируемыПоля.Вставить("УплаченныеВзносы",  Новый ФиксированнаяСтруктура(ОписаниеКонтролируемыхПолей));
	КонецЕсли;	
	
	Если РазделыКонтролируемыхПолей = Неопределено
		Или РазделыКонтролируемыхПолей.Найти("Стаж") <> Неопределено Тогда
		
		ОписаниеКонтролируемыхПолей = Новый Структура("ИмяПоляФиксДанных, КонтролируемыеПоля", "ФиксСтаж", Новый ФиксированныйМассив(КонтролируемыеПоляСтаж));
		
		КонтролируемыПоля.Вставить("Стаж",  Новый ФиксированнаяСтруктура(ОписаниеКонтролируемыхПолей));	
	КонецЕсли;	
	
	Если РазделыКонтролируемыхПолей = Неопределено
		Или РазделыКонтролируемыхПолей.Найти("Заработок") <> Неопределено Тогда
		
		ОписаниеКонтролируемыхПолей = Новый Структура("ИмяПоляФиксДанных, КонтролируемыеПоля", "ФиксЗаработок", Новый ФиксированныйМассив(КонтролируемыеПоляЗаработок));
		
		КонтролируемыПоля.Вставить("Заработок", Новый ФиксированнаяСтруктура(ОписаниеКонтролируемыхПолей));
	КонецЕсли;	
	
	Если РазделыКонтролируемыхПолей = Неопределено
		Или РазделыКонтролируемыхПолей.Найти("ЗаработокВредный") <> Неопределено Тогда
		
		ОписаниеКонтролируемыхПолей = Новый Структура("ИмяПоляФиксДанных, КонтролируемыеПоля", "ФиксЗаработок", Новый ФиксированныйМассив(КонтролируемыеПоляЗаработокВредный));
		
		КонтролируемыПоля.Вставить("ФиксЗаработокВредный", Новый ФиксированнаяСтруктура(ОписаниеКонтролируемыхПолей));
	КонецЕсли;	
			
	КонтролируемыеПоляРеквизитФормы = Новый ФиксированнаяСтруктура(КонтролируемыПоля);

КонецПроцедуры	

Функция ДокументыСЗВСписокВыбораКатегорийЗЛ(Объект, ОписаниеДокумента)
	Если ВРег(ОписаниеДокумента.ВариантОтчетногоПериода) = "КВАРТАЛ"
		И ОписаниеДокумента.ЕстьКорректируемыйПериод Тогда
		
		ОтчетныйПериод = ?(Объект.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ, Объект.ОтчетныйПериод, Объект[ОписаниеДокумента.ИмяПоляКорректируемыйПериод]);
		ОкончаниеОтчетногоПериода = ПерсонифицированныйУчетКлиентСервер.ОкончаниеОтчетногоПериодаПерсУчета(ОтчетныйПериод);	
	ИначеЕсли ВРег(ОписаниеДокумента.ВариантОтчетногоПериода) = "КВАРТАЛ" Тогда
		ОтчетныйПериод = Объект.ОтчетныйПериод;
		ОкончаниеОтчетногоПериода = ПерсонифицированныйУчетКлиентСервер.ОкончаниеОтчетногоПериодаПерсУчета(ОтчетныйПериод);
	Иначе
		ОтчетныйПериод = Дата(Объект.ОтчетныйПериод, 1, 1);
		ОкончаниеОтчетногоПериода = Дата(Объект.ОтчетныйПериод, 12, 31);	
	КонецЕсли;	
	
	КорректирующиеСведения = Не Объект.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ;
	
	Возврат ПерсонифицированныйУчет.КатегорииЗастрахованныхЛицОрганизации(
										Объект.Организация,
										ОтчетныйПериод, 
										ОкончаниеОтчетногоПериода,
										КорректирующиеСведения);
	
КонецФункции

Процедура ДокументыСЗВПриПолученииДанныхНаСервере(Форма, ОписаниеДокумента) Экспорт
	Объект = Форма.Объект;
	
	СписокКатегорийЗастрахованныхЛиц = ДокументыСЗВСписокВыбораКатегорийЗЛ(Объект, ОписаниеДокумента);
	Если ЗначениеЗаполнено(Объект.КатегорияЗастрахованныхЛиц)
		И СписокКатегорийЗастрахованныхЛиц.НайтиПоЗначению(Объект.КатегорияЗастрахованныхЛиц) = Неопределено Тогда
		
		СписокКатегорийЗастрахованныхЛиц.Вставить(0, Объект.КатегорияЗастрахованныхЛиц);
	КонецЕсли;	
	
	Форма.Элементы.КатегорияЗастрахованныхЛиц.СписокВыбора.ЗагрузитьЗначения(СписокКатегорийЗастрахованныхЛиц.ВыгрузитьЗначения());	
КонецПроцедуры

// Общие обработчики событий форм документов перс. учета содержащих сведения о стаже и взносах  (СЗВ-6-1(2,3), СПВ-1).

Процедура УстановитьКраткоеОтображениеКатегорииВТаблицах(Форма, ПутьКДанным, ИмяЭлемента) Экспорт 	
	Для Каждого ОписаниеЗначения Из Метаданные.Перечисления.КатегорииЗастрахованныхЛицДляПФР.ЗначенияПеречисления Цикл
		ЭлементОформления = Форма.УсловноеОформление.Элементы.Добавить();
	
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", ОписаниеЗначения.Имя + Символы.ПС + ОписаниеЗначения.Синоним);
		
		Отбор = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным);
		Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		Отбор.ПравоеЗначение = Перечисления.КатегорииЗастрахованныхЛицДляПФР[ОписаниеЗначения.Имя];
		
		ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
	КонецЦикла;		
КонецПроцедуры	

Процедура ДокументыСведенийОВзносахИСтажеПриПолученииДанныхНаСервере(Форма) Экспорт 
	Форма.ПериодСтрока = ПерсонифицированныйУчетКлиентСервер.ПредставлениеОтчетногоПериода(Форма.Объект.ОтчетныйПериод);
	
	ПерсонифицированныйУчетКлиентСервер.ДокументыСведенийОВзносахИСтажеУстановитьДоступностьЭлементов(Форма);	
	
	Форма.КорректируемыйПериодСтрока = ПерсонифицированныйУчетКлиентСервер.ПредставлениеОтчетногоПериода(Форма.Объект.КорректируемыйПериод);
КонецПроцедуры	

Функция ДобавитьОписаниеЭлементаИндикацииОшибок(ОписаниеЭлементов, ПутьКДанным) Экспорт
	ОписанияЭлемента = Новый Структура;
	ОписанияЭлемента.Вставить("ИмяЭлементаФормы");
	ОписанияЭлемента.Вставить("Владелец");
	ОписанияЭлемента.Вставить("ПутьКХранилищуОшибок");
	ОписанияЭлемента.Вставить("ПомещатьОшибкиВХранилищеРодителя", Ложь);
	ОписанияЭлемента.Вставить("ПутьКЭлементуИнфонадписиОшибкиТаблицы", "");
	ОписанияЭлемента.Вставить("ГруппаРазмещенияИнфонадписиОшибкиТаблицы", 0);
	ОписанияЭлемента.Вставить("ТекстИнфонадписиЗаголовкаТаблицыОшибка", "");
	ОписанияЭлемента.Вставить("ТекстИнфонадписиПоУмолчанию", "");
	ОписанияЭлемента.Вставить("ШиринаЭлементаИнфонадписи", 0);
	ОписанияЭлемента.Вставить("ВыводитьИнфонадпись", Ложь);
	ОписанияЭлемента.Вставить("ВыводитьГиперссылку", Истина);

	ОписаниеЭлементов.Вставить(ПутьКДанным, ОписанияЭлемента);	
	
	Возврат ОписанияЭлемента;
КонецФункции	

Процедура ФормаДетальныхДанныхЗаполнитьЗначенияРеквизитовХраненияОшибок(Форма, Приемник, ЗначенияРеквизитовХраненияОшибок, ПутьКДанным) Экспорт
	
	ОписаниеЭлементовСИндикациейОшибок = Форма.ОписаниеЭлементовСИндикациейОшибок();
	
	РеквизитыИндикацииОшибокПриемника = Новый Соответствие; 
	
	Для Каждого ОписаниеЭлемента Из ОписаниеЭлементовСИндикациейОшибок Цикл
		Если Форма.СвойстваЭлементовИндикацииОшибок.Получить(ОписаниеЭлемента.Значение.ИмяЭлементаФормы) <> Неопределено Тогда 
			ОписаниеЭлемента.Значение.Вставить("Закладки", Форма.СвойстваЭлементовИндикацииОшибок.Получить(ОписаниеЭлемента.Значение.ИмяЭлементаФормы).Закладки);
		Иначе
			ОписаниеЭлемента.Значение.Вставить("Закладки", Новый Массив);	
		КонецЕсли;	
		
		Если ПутьКДанным = "" Тогда
			ЭлементыПути = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОписаниеЭлемента.Ключ, ".");
			
			Если ЭлементыПути.Количество() = 1
				И ТипЗнч(Форма[ЭлементыПути[0]]) <> Тип("ДанныеФормыКоллекция") Тогда
				
				РеквизитыИндикацииОшибокПриемника.Вставить(ОписаниеЭлемента.Ключ, ОписаниеЭлемента.Значение);	
			
			КонецЕсли;	
		ИначеЕсли Сред(ОписаниеЭлемента.Ключ, 1, СтрДлина(ПутьКДанным)) = ПутьКДанным
			И (СтрДлина(ПутьКДанным) = СтрДлина(ОписаниеЭлемента.Ключ)
			Или Сред(ОписаниеЭлемента.Ключ, СтрДлина(ПутьКДанным) + 1, 1) = ".") Тогда 
			
			ЭлементыПути = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОписаниеЭлемента.Ключ, ".");
			
			Если ЭлементыПути.Количество() = 2 Тогда 
				РеквизитыИндикацииОшибокПриемника.Вставить(ЭлементыПути[1], ОписаниеЭлемента.Значение);
			ИначеЕсли ЭлементыПути.Количество() = 1 Тогда
				РеквизитыИндикацииОшибокПриемника.Вставить("", ОписаниеЭлемента.Значение);	
			КонецЕсли;		
		КонецЕсли;	
	КонецЦикла;	
	
	Для Каждого ОписаниеРеквизита Из РеквизитыИндикацииОшибокПриемника Цикл
		Если ОписаниеРеквизита.Ключ = "" Тогда
			Ошибки = Новый Массив;
			Для Каждого ОшибкиПоКлючу Из ЗначенияРеквизитовХраненияОшибок.Ошибки Цикл 
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Ошибки, ОшибкиПоКлючу.Значение);
				ИмяРеквизитаФлаг = "ЕстьОшибки";    
			КонецЦикла;	
		Иначе
			ИмяРеквизитаФлаг = ОписаниеРеквизита.Ключ + "ЕстьОшибки";
			Ошибки = ЗначенияРеквизитовХраненияОшибок.Ошибки.Получить(ОписаниеРеквизита.Ключ);
			Если Ошибки = Неопределено Тогда
				Ошибки = Новый Массив;
			КонецЕсли;	
		КонецЕсли;
		
		Если Ошибки.Количество() > 0 Тогда 
			Приемник[ИмяРеквизитаФлаг] = Истина;
			Приемник[ИмяРеквизитаФлаг + "Картинка"] = БиблиотекаКартинок.Подсказка;
			
			Для Каждого ИмяГруппыСтраница Из ОписаниеРеквизита.Значение.Закладки Цикл
				ЭлементСтраница = Форма.Элементы[ИмяГруппыСтраница];
				
				ЭлементСтраница.Картинка = БиблиотекаКартинок.ПротоколСОшибкой;
			КонецЦикла;	
		КонецЕсли;
		
		Если ОписаниеРеквизита.Значение.ПутьКХранилищуОшибок = "" Тогда
			ХранилищеОшибок = Форма["Ошибки"];
		ИначеЕсли ОписаниеРеквизита.Значение.ПутьКХранилищуОшибок = ПутьКДанным Тогда
			ХранилищеОшибок = Приемник["Ошибки"];
		КонецЕсли;
		
		Если ХранилищеОшибок <> Неопределено Тогда
			Для Каждого ОшибкаИсточника Из Ошибки Цикл
				ОшибкаПриемника = ХранилищеОшибок.Добавить();
				ЗаполнитьЗначенияСвойств(ОшибкаПриемника, ОшибкаИсточника);
			КонецЦикла;	
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ДополнитьФорму(Форма) Экспорт
	РеквизитыСИндикациейОшибок = Форма.ОписаниеЭлементовСИндикациейОшибок();
	
	ДобавляемыеРеквизиты = Новый Массив;
	СозданныеРеквизиты = Новый Соответствие;
	
	Для Каждого ОписаниеРеквизита Из РеквизитыСИндикациейОшибок Цикл
		ДобавитьРеквизитыХраненияОшибок(Форма, РеквизитыСИндикациейОшибок, ОписаниеРеквизита.Ключ, ДобавляемыеРеквизиты, СозданныеРеквизиты);	
	КонецЦикла;	
	
	РеквизитФормыТаблица = Новый РеквизитФормы("СвойстваЭлементовИндикацииОшибок", Новый ОписаниеТипов("Неопределено"));
	ДобавляемыеРеквизиты.Добавить(РеквизитФормыТаблица);
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	СозданныеЭлементы = Новый Соответствие;
	ОписаниеСозданныхЭлементов = Новый Соответствие;
	
	Для Каждого ОписаниеРеквизита Из РеквизитыСИндикациейОшибок Цикл
		ДобавитьЭлементИндикацииОшибок(Форма, ОписаниеРеквизита, СозданныеЭлементы, СозданныеРеквизиты, ОписаниеСозданныхЭлементов);	
	КонецЦикла;
	
	Форма["СвойстваЭлементовИндикацииОшибок"] = Новый ФиксированноеСоответствие(ОписаниеСозданныхЭлементов);
КонецПроцедуры	

Процедура ДобавитьРеквизитыХраненияОшибок(Форма, РеквизитыСИндикациейОшибок, ПутьКДанным, ДобавляемыеРеквизиты, СозданныеРеквизиты)
	Элементы = Форма.Элементы;
	
	ОписаниеРеквизита = РеквизитыСИндикациейОшибок[ПутьКДанным];	
	
	Если ОписаниеРеквизита = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ПутьКРеквизитуИндикацииОшибки = ПутьКРеквизитуИндикацииОшибки(Форма, ПутьКДанным);
	
	Если СозданныеРеквизиты[ПутьКДанным] = Неопределено Тогда	
		Реквизит = Новый РеквизитФормы(ПутьКРеквизитуИндикацииОшибки.ИмяРеквизита, Новый ОписаниеТипов("Булево"), ПутьКРеквизитуИндикацииОшибки.ПутьКДанным);
		
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		
		Если ОписаниеРеквизита.ВыводитьГиперссылку Тогда
			РеквизитКартинка = Новый РеквизитФормы(ПутьКРеквизитуИндикацииОшибки.ИмяРеквизита + "Картинка", Новый ОписаниеТипов("Картинка"), ПутьКРеквизитуИндикацииОшибки.ПутьКДанным);
			ДобавляемыеРеквизиты.Добавить(РеквизитКартинка);
		КонецЕсли;	
		
		СозданныеРеквизиты.Вставить(ПутьКДанным, Реквизит);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеРеквизита.ИмяЭлементаФормы) 
		И ОписаниеРеквизита.ВыводитьИнфонадпись
		И Не ЗначениеЗаполнено(ОписаниеРеквизита.ПутьКЭлементуИнфонадписиОшибкиТаблицы)
		И ТипЗнч(Элементы[ОписаниеРеквизита.ИмяЭлементаФормы]) = Тип("ТаблицаФормы") 
		И СозданныеРеквизиты[ОписаниеРеквизита.ИмяЭлементаФормы + "ИнфоНадписьОшибки"] = Неопределено Тогда
				
		РеквизитИнфонадпись = Новый РеквизитФормы(ОписаниеРеквизита.ИмяЭлементаФормы + "ИнфоНадписьОшибки", Новый ОписаниеТипов("Строка"));
		
		ДобавляемыеРеквизиты.Добавить(РеквизитИнфонадпись);
		
		СозданныеРеквизиты.Вставить(ОписаниеРеквизита.ИмяЭлементаФормы + "ИнфоНадписьОшибки", РеквизитИнфонадпись);
		
	КонецЕсли;	
	
	Если ОписаниеРеквизита.ПутьКХранилищуОшибок <> Неопределено
		И СозданныеРеквизиты.Получить(ОписаниеРеквизита.ПутьКХранилищуОшибок + "." + "Ошибки") = Неопределено Тогда
		
		СоздатьРеквизитХранилищеОшибок(ДобавляемыеРеквизиты, ОписаниеРеквизита.ПутьКХранилищуОшибок, СозданныеРеквизиты);
		
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ОписаниеРеквизита.Владелец) 
		И ПутьКРеквизитуИндикацииОшибки.ИмяТаблицы <> "" Тогда
		
		ДобавитьРеквизитыХраненияОшибок(
			Форма,
			РеквизитыСИндикациейОшибок,
			ОписаниеРеквизита.Владелец,
			ДобавляемыеРеквизиты, 
			СозданныеРеквизиты);				
	КонецЕсли;		
	
КонецПроцедуры	

Процедура СоздатьРеквизитХранилищеОшибок(ДобавляемыеРеквизиты, ПутьКДанным, СозданныеРеквизиты)
	Реквизит = Новый РеквизитФормы("Ошибки", Новый ОписаниеТипов("ТаблицаЗначений"), ПутьКДанным);
	ДобавляемыеРеквизиты.Добавить(Реквизит);

	ПутьКДаннымТаблицы = ?(ПустаяСтрока(ПутьКДанным), "Ошибки", ПутьКДанным + ".Ошибки");
	
	Реквизит = Новый РеквизитФормы("Поле", Новый ОписаниеТипов("Строка"), ПутьКДаннымТаблицы);
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	
	Реквизит = Новый РеквизитФормы("ТекстОшибки", Новый ОписаниеТипов("Строка"), ПутьКДаннымТаблицы);
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	
	СозданныеРеквизиты.Вставить(ПутьКДанным + ".Ошибки", Реквизит);
КонецПроцедуры

Функция ПутьКРеквизитуИндикацииОшибки(Форма, ПутьКДаннымЭлемента)
	ЭлементыПути = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПутьКДаннымЭлемента, ".");
	ИмяРеквизита = ЭлементыПути[ЭлементыПути.Количество() - 1] + "ЕстьОшибки"; 

	ПутьКДанным = "";
	Для Сч = 0 По ЭлементыПути.Количество() - 2 Цикл
		ПутьКДанным = ПутьКДанным + "." + ЭлементыПути[Сч];	
	КонецЦикла;	
	
	ПутьКДанным = Сред(ПутьКДанным, 2);
	
	ТипДанныхПоля = Неопределено;
	Если ПутьКДанным = "" Тогда
		ТипДанныхПоля = ТипЗнч(ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ЭлементыПути[ЭлементыПути.Количество() - 1]));
	ИначеЕсли ТипЗнч(ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКДанным)) = Тип("ДанныеФормыСтруктура") Тогда
		ТипДанныхПоля = ТипЗнч(ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКДанным + "." + ЭлементыПути[ЭлементыПути.Количество() - 1]));
	КонецЕсли;
	
	ИмяТаблицы = "";
	Если ТипДанныхПоля = Тип("ДанныеФормыКоллекция") Тогда
		ИмяРеквизита = "ЕстьОшибки";
		ПутьКДанным = ?(ПутьКДанным = "", "", ПутьКДанным + ".") + ЭлементыПути[ЭлементыПути.Количество() - 1];
		
		ИмяТаблицы = ЭлементыПути[ЭлементыПути.Количество() - 1];
	ИначеЕсли ТипДанныхПоля <> Неопределено Тогда
		ПутьКДанным = "";
	КонецЕсли;	
	
	Возврат Новый Структура("ПутьКДанным, ИмяРеквизита, ИмяТаблицы", ПутьКДанным, ИмяРеквизита, ИмяТаблицы);
КонецФункции	

Процедура ДобавитьЭлементИндикацииОшибок(Форма, ОписаниеРеквизита, СозданныеЭлементы, СозданныеРеквизиты, ОписаниеСозданныхЭлементов)	
	Элементы = Форма.Элементы;
	
	Реквизит = СозданныеРеквизиты.Получить(ОписаниеРеквизита.Ключ);
	
	Если ЗначениеЗаполнено(ОписаниеРеквизита.Значение.ИмяЭлементаФормы) 		
		И СозданныеЭлементы[ОписаниеРеквизита.Значение.ИмяЭлементаФормы] = Неопределено 
		И Реквизит <> Неопределено Тогда
		
		ОписаниеСозданногоЭлемента = ОписаниеСозданногоЭлементаИндикацииОшибки();
		
		ЭлементСИндикацией = Элементы[ОписаниеРеквизита.Значение.ИмяЭлементаФормы];
		
		ОформляемыеПоля = Новый Массив;
				
		Если ТипЗнч(ЭлементСИндикацией) = Тип("ТаблицаФормы") Тогда						
			Если ЗначениеЗаполнено(ОписаниеРеквизита.Значение.ПутьКЭлементуИнфонадписиОшибкиТаблицы) Тогда
				ЭлементИнфонадпись = Элементы[ОписаниеРеквизита.Значение.ПутьКЭлементуИнфонадписиОшибкиТаблицы];
				Если ЭлементСИндикацией.ПутьКДанным = Реквизит.Путь Тогда  
					ОформляемыеПоля.Добавить(Новый ПолеКомпоновкиДанных(ОписаниеРеквизита.Значение.ИмяЭлементаФормы));
				КонецЕсли;	
				
				ОписаниеСозданногоЭлемента.ПутьКДаннымИнфонадписи = ЭлементИнфонадпись.ПутьКДанным;
				ОписаниеСозданногоЭлемента.ТекстИнфонадписиПоУмолчанию = ОписаниеРеквизита.Значение.ТекстИнфонадписиПоУмолчанию;
				ОписаниеСозданногоЭлемента.ТекстИнфонадписиЗаголовкаТаблицыОшибка = ОписаниеРеквизита.Значение.ТекстИнфонадписиЗаголовкаТаблицыОшибка;	
			Иначе
				ИмяГруппы = ОписаниеРеквизита.Значение.ИмяЭлементаФормы + Реквизит.Имя + "Группа" + СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", ""); 
				
				Если ЗначениеЗаполнено(ОписаниеРеквизита.Значение.ГруппаРазмещенияИнфонадписиОшибкиТаблицы) Тогда
					ГруппаЭлементаФормы  = Элементы[ОписаниеРеквизита.Значение.ГруппаРазмещенияИнфонадписиОшибкиТаблицы];
					
					Если ОписаниеРеквизита.Значение.ВыводитьИнфонадпись Тогда
						ЭлементИнфонадпись = Элементы.Вставить(ОписаниеРеквизита.Значение.ИмяЭлементаФормы + Реквизит.Имя + "ИнфоНадпись", Тип("ПолеФормы"), ГруппаЭлементаФормы);
					КонецЕсли;	
				Иначе	
					ГруппаЭлементаФормы  = Элементы.Вставить(ИмяГруппы, Тип("ГруппаФормы"), ЭлементСИндикацией.Родитель, ЭлементСИндикацией);
					ГруппаЭлементаФормы.Вид = ВидГруппыФормы.ОбычнаяГруппа;
					ГруппаЭлементаФормы.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
					ГруппаЭлементаФормы.ОтображатьЗаголовок = Ложь;
					Элементы.Переместить(ЭлементСИндикацией, ГруппаЭлементаФормы);
					
					Если ОписаниеРеквизита.Значение.ВыводитьИнфонадпись Тогда
						ЭлементИнфонадпись = Элементы.Вставить(ОписаниеРеквизита.Значение.ИмяЭлементаФормы + Реквизит.Имя + "ИнфоНадпись", Тип("ПолеФормы"), ГруппаЭлементаФормы, ЭлементСИндикацией);
					КонецЕсли;	
				КонецЕсли;	
				
				Если ОписаниеРеквизита.Значение.ВыводитьИнфонадпись Тогда
					ЭлементИнфонадпись.Ширина = ОписаниеРеквизита.Значение.ШиринаЭлементаИнфонадписи; 
					
					ЭлементИнфонадпись.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
					ЭлементИнфонадпись.ПутьКДанным = ОписаниеРеквизита.Значение.ИмяЭлементаФормы + "ИнфоНадписьОшибки";
					ЭлементИнфонадпись.Вид = ВидПоляФормы.ПолеНадписи; 
					ЭлементИнфонадпись.РастягиватьПоГоризонтали = Ложь;
					ОписаниеСозданногоЭлемента.ПутьКДаннымИнфонадписи = ЭлементИнфонадпись.ПутьКДанным;
					
					Если Не ЗначениеЗаполнено(ОписаниеРеквизита.Значение.ГруппаРазмещенияИнфонадписиОшибкиТаблицы) 
						И ЭлементСИндикацией.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх Тогда
						
						ЭлементСИндикацией.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
						ЭлементИнфонадпись.ЦветТекста = ЭлементСИндикацией.ЦветТекстаЗаголовка;
						ЭлементИнфонадпись.Шрифт = ЭлементСИндикацией.ШрифтЗаголовка;
						
						Если Не ЗначениеЗаполнено(ОписаниеРеквизита.Значение.ТекстИнфонадписиПоУмолчанию) Тогда
							ОписаниеСозданногоЭлемента.ТекстИнфонадписиПоУмолчанию = ЭлементСИндикацией.Заголовок;
						Иначе
							ОписаниеСозданногоЭлемента.ТекстИнфонадписиПоУмолчанию = ОписаниеРеквизита.Значение.ТекстИнфонадписиПоУмолчанию;
						КонецЕсли;	
					Иначе
						ЭлементИнфонадпись.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
						ОписаниеСозданногоЭлемента.ТекстИнфонадписиПоУмолчанию = ОписаниеРеквизита.Значение.ТекстИнфонадписиПоУмолчанию;
					КонецЕсли;

					ОписаниеСозданногоЭлемента.ТекстИнфонадписиЗаголовкаТаблицыОшибка = ОписаниеРеквизита.Значение.ТекстИнфонадписиЗаголовкаТаблицыОшибка;	
				КонецЕсли;	
											
			КонецЕсли;	
			
			Если ЭлементСИндикацией.ПутьКДанным = Реквизит.Путь Тогда
				ОформляемыеПоля.Добавить(Новый ПолеКомпоновкиДанных(ЭлементСИндикацией.Имя));
			КонецЕсли;	
			
			ЭлементОтображенияОшибки = ЭлементИнфонадпись;
		Иначе	
			ЭлементОтображенияОшибки = ЭлементСИндикацией;	
		КонецЕсли;	
		
		ИмяГруппы = ОписаниеРеквизита.Значение.ИмяЭлементаФормы + Реквизит.Имя + "ГруппаСИндикациейОшибок"; 
		Если ЭлементОтображенияОшибки = Неопределено Тогда
			ГруппаЭлементаИндикации  = Элементы.Вставить(ИмяГруппы, Тип("ГруппаФормы"), ГруппаЭлементаФормы, ЭлементСИндикацией);
		Иначе	
			ГруппаЭлементаИндикации  = Элементы.Вставить(ИмяГруппы, Тип("ГруппаФормы"), ЭлементОтображенияОшибки.Родитель, ЭлементОтображенияОшибки);
		КонецЕсли;
		
		ГруппаЭлементаИндикации.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаЭлементаИндикации.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		ГруппаЭлементаИндикации.ОтображатьЗаголовок = Ложь;
		ГруппаЭлементаИндикации.Отображение = ОтображениеОбычнойГруппы.Нет;
		
		Если ЭлементОтображенияОшибки <> Неопределено Тогда
			Элементы.Переместить(ЭлементОтображенияОшибки, ГруппаЭлементаИндикации);
		КонецЕсли;	

		Если ЭлементОтображенияОшибки <> Неопределено Тогда 
			ОформляемыеПоля.Добавить(Новый ПолеКомпоновкиДанных(ЭлементОтображенияОшибки.Имя));	
		КонецЕсли;	
		
		Если ОписаниеРеквизита.Значение.ВыводитьГиперссылку Тогда
			ЭлементФормы = Элементы.Добавить(ОписаниеРеквизита.Значение.ИмяЭлементаФормы + "ЕстьОшибки", Тип("ПолеФормы"), ГруппаЭлементаИндикации); 
			ЭлементФормы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			ЭлементФормы.ПутьКДанным = Реквизит.Путь + ?(Реквизит.Путь = "", "", ".") + Реквизит.Имя + "Картинка";
			ЭлементФормы.Вид = ВидПоляФормы.ПолеКартинки;
			ЭлементФормы.Высота = 1;
			ЭлементФормы.Ширина = 2;
			ЭлементФормы.Гиперссылка = Истина;
			ЭлементФормы.РастягиватьПоВертикали = Ложь;
			ЭлементФормы.РастягиватьПоГоризонтали = Ложь;
			ЭлементФормы.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
			ЭлементФормы.ПропускатьПриВводе  = Истина;
			
			ЭлементФормы.УстановитьДействие("Нажатие", "Подключаемый_ПоказатьОшибки");
			
			ОписаниеСозданногоЭлемента.ОтображатьГиперссылку = Истина;
		КонецЕсли;	
		
		ОписаниеСозданногоЭлемента.ПутьКДаннымРеквизитаФлагаОшибки = Реквизит.Путь;
		ОписаниеСозданногоЭлемента.ИмяРеквизитаФлагаОшибки = Реквизит.Имя;

		ЭлементОформления = Форма.УсловноеОформление.Элементы.Добавить();
		
		Отбор = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
		Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Реквизит.Путь + ?(Реквизит.Путь = "", "", ".") + Реквизит.Имя);
		Отбор.ПравоеЗначение = Истина;
		Отбор.Использование = Истина;
		
		Для Каждого Поле Из ОформляемыеПоля Цикл
			ОформляемоеПоле =  ЭлементОформления.Поля.Элементы.Добавить();
			ОформляемоеПоле.Поле = Поле; 
			ОформляемоеПоле.Использование = Истина;
		КонецЦикла;	

		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
		
		Если ТипЗнч(ЭлементОтображенияОшибки) = Тип("ПолеФормы")
			И ЭлементОтображенияОшибки.Вид = ВидПоляФормы.ПолеВвода Тогда
	
			ЭлементОформления = Форма.УсловноеОформление.Элементы.Добавить();
			
			ГруппаОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных")); 
			
			Отбор = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
			Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
			Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ЭлементОтображенияОшибки.ПутьКДанным);
			Отбор.Использование = Истина;
			
			Отбор = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
			Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Реквизит.Путь + ?(Реквизит.Путь = "", "", ".") + Реквизит.Имя);
			Отбор.ПравоеЗначение = Истина;
			Отбор.Использование = Истина;

			ОформляемоеПоле =  ЭлементОформления.Поля.Элементы.Добавить();
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ЭлементОтображенияОшибки.Имя); 
			ОформляемоеПоле.Использование = Истина;

			ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
		КонецЕсли;	
		
		СозданныеЭлементы.Вставить(ОписаниеРеквизита.Значение.ИмяЭлементаФормы, Истина);
		
		ОписаниеСозданногоЭлемента.Поле = Сред(Реквизит.Имя, 1, СтрДлина(Реквизит.Имя) - 10);
		ОписаниеСозданногоЭлемента.ПутьКХранилищуОшибок = ОписаниеРеквизита.Значение.ПутьКХранилищуОшибок;
		
		ЗаполнитьРодительскиеСтраницыФормыЭлементаСИндикациейОшибки(ЭлементСИндикацией, ОписаниеСозданногоЭлемента.Закладки);
		
		ОписаниеСозданныхЭлементов.Вставить(ОписаниеРеквизита.Значение.ИмяЭлементаФормы, ОписаниеСозданногоЭлемента);
	КонецЕсли;	
КонецПроцедуры	

Процедура ИзменитьВидимостьЭлементовИндикацииОшибок(Форма) Экспорт
	Для Каждого ОписаниеЭлементаИндикации Из Форма.СвойстваЭлементовИндикацииОшибок Цикл
		Если ОписаниеЭлементаИндикации.Значение.ОтображатьГиперссылку Тогда
			ЭлементОтображенияДанных = Форма.Элементы[ОписаниеЭлементаИндикации.Ключ];
			ЭлементГиперссылка = Форма.Элементы[ОписаниеЭлементаИндикации.Ключ + "ЕстьОшибки"];
			
			Если ЭлементОтображенияДанных.Видимость <> ЭлементГиперссылка.Видимость Тогда
				ЭлементГиперссылка.Видимость = ЭлементОтображенияДанных.Видимость;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры	

Процедура ЗаполнитьРодительскиеСтраницыФормыЭлементаСИндикациейОшибки(Родитель, Закладки)
	Если Родитель = Неопределено
		Или ТипЗнч(Родитель) = Тип("УправляемаяФорма") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Родитель) = Тип("ГруппаФормы")
		И Родитель.Вид = ВидГруппыФормы.Страница
		И Родитель.ОтображатьЗаголовок Тогда
		
		Закладки.Добавить(Родитель.Имя);
	КонецЕсли;
	
	ЗаполнитьРодительскиеСтраницыФормыЭлементаСИндикациейОшибки(Родитель.Родитель, Закладки);
КонецПроцедуры	

Функция ОписаниеСозданногоЭлементаИндикацииОшибки()
	ОписаниеЭлемента = Новый Структура;
	ОписаниеЭлемента.Вставить("ТекстИнфонадписиЗаголовкаТаблицыОшибка", "");
	ОписаниеЭлемента.Вставить("ТекстИнфонадписиПоУмолчанию", "");
	ОписаниеЭлемента.Вставить("ПутьКХранилищуОшибок", "");
	ОписаниеЭлемента.Вставить("Поле", "");
	ОписаниеЭлемента.Вставить("ПутьКДаннымРеквизитаФлагаОшибки", "");
	ОписаниеЭлемента.Вставить("ИмяРеквизитаФлагаОшибки", "");
	ОписаниеЭлемента.Вставить("ПутьКДаннымИнфонадписи", "");
	ОписаниеЭлемента.Вставить("ОтображатьГиперссылку", Ложь);
	ОписаниеЭлемента.Вставить("Закладки", Новый Массив);

	Возврат ОписаниеЭлемента;
КонецФункции	

Функция ПоместитьОписаниеОшибокВХранилище(Форма, Отказ = Ложь) Экспорт 
	СсылкиНаОбъектыСОшибками = Новый Массив;
	
	Ошибки = ПолучитьСообщенияПользователю(Истина);
	
	Если Ошибки.Количество() > 0 Тогда
		Отказ = Истина;
	КонецЕсли;	
	
	ОшибкиПоВладельцам = Новый Соответствие;
	Для Каждого СообщениеПользователю Из Ошибки Цикл
		ОшибкиДокумента = ОшибкиПоВладельцам.Получить(СообщениеПользователю.КлючДанных);
		Если ОшибкиДокумента = Неопределено Тогда
			ОшибкиДокумента = Новый Массив;
			ОшибкиПоВладельцам.Вставить(СообщениеПользователю.КлючДанных, ОшибкиДокумента);
		КонецЕсли;
		
		ОшибкиДокумента.Добавить(СообщениеПользователю);
	КонецЦикла;	
	
	ОбработанныеОшибки = Новый Соответствие;
	
	Для Каждого ОшибкиДокумента Из ОшибкиПоВладельцам Цикл
				
		ОбработанныеОшибкиДокумента = ОбработанныеОшибки.Получить(ОшибкиДокумента.Ключ);
		
		Если ОбработанныеОшибкиДокумента = Неопределено Тогда
			ОбработанныеОшибкиДокумента = Новый Массив;
			ОбработанныеОшибки.Вставить(ОшибкиДокумента.Ключ, ОбработанныеОшибкиДокумента);
		КонецЕсли;	
		
		Тип = ТипЗнч(ОшибкиДокумента.Ключ);
		
		Если Тип = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_4")
			Или Тип = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_1")
			Или Тип = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_3") 
			Или Тип = Тип("ДокументСсылка.РеестрСЗВ_6_2")
			Или Тип = Тип("ДокументСсылка.ПачкаРазделов6РасчетаРСВ_1") Тогда
			
			ДокументОбъект = ОшибкиДокумента.Ключ.ПолучитьОбъект(); 
		КонецЕсли;	
		
		СоответствиеДанныхОбъектовДаннымФормы = Форма.СоответствиеДанныхОбъектовДаннымФормы(ОшибкиДокумента.Ключ);
		
		СоответствиеДаннымФормы = СоответствиеДанныхОбъектовДаннымФормы.Получить(ТипЗнч(ОшибкиДокумента.Ключ));
		
		СсылкиНаОбъектыСОшибками.Добавить(ОшибкиДокумента.Ключ);
		
		СоответствияДляКлючейСвязи = Новый Соответствие;
		
		Для Каждого Ошибка Из ОшибкиДокумента.Значение Цикл 
			ОписаниеОшибки = ОписаниеОшибкиФормы();
			ОписаниеОшибки.Текст = Ошибка.Текст;
			
			//Если ДокументОбъект = Неопределено Тогда
				ПутьКДаннымОшибкиВОбъекте = ПерсонифицированныйУчетКлиентСервер.СтруктураПутиКИсточникуОшибки(Ошибка.Поле);
			//Иначе	
			//	ПутьКДаннымОшибкиВОбъекте = ДокументОбъект.ПолныйПутьКИсточникуОшибки(Ошибка);
			//КонецЕсли;	
			
			Если СоответствиеДаннымФормы <> Неопределено Тогда
				ОписаниеОшибки.Путь = СтруктуруПутиКДаннымОшибкиВФорме(ДокументОбъект, ПутьКДаннымОшибкиВОбъекте, СоответствиеДаннымФормы, СоответствияДляКлючейСвязи);
			КонецЕсли;	
			
			Если ОписаниеОшибки.Путь <> Неопределено
				И ОписаниеОшибки.Путь.ИндексСтроки <> Неопределено
				И ЗначениеЗаполнено(ОписаниеОшибки.Путь.ИмяРеквизитаТабличнойЧасти) Тогда
				
				ОписаниеОшибки.Поле = ОписаниеОшибки.Путь.ИмяРеквизитаТабличнойЧасти;
			ИначеЕсли ОписаниеОшибки.Путь <> Неопределено
				И ОписаниеОшибки.Путь.ИндексСтроки = Неопределено Тогда
				
				ОписаниеОшибки.Поле = ОписаниеОшибки.Путь.ПутьКРеквизиту;
				ЭлементыПути = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОписаниеОшибки.Путь.ПутьКРеквизиту, ".");
				
				Если ЭлементыПути.Количество() > 0 Тогда
					ОписаниеОшибки.Поле = ЭлементыПути[ЭлементыПути.Количество() - 1];				
				КонецЕсли;	
			ИначеЕсли ПутьКДаннымОшибкиВОбъекте <> Неопределено
				И ПутьКДаннымОшибкиВОбъекте.ИндексСтроки <> Неопределено Тогда
				
				ОписаниеОшибки.Поле = ПутьКДаннымОшибкиВОбъекте.ИмяРеквизитаТабличнойЧасти;
			ИначеЕсли ПутьКДаннымОшибкиВОбъекте <> Неопределено Тогда
				ОписаниеОшибки.Поле = ПутьКДаннымОшибкиВОбъекте.ПутьКРеквизиту;
			КонецЕсли;		
			
			ОбработанныеОшибкиДокумента.Добавить(ОписаниеОшибки);
		КонецЦикла;	
	КонецЦикла;	
	
	Форма.АдресОшибокВХранилище = ПоместитьВоВременноеХранилище(ОбработанныеОшибки, Форма.УникальныйИдентификатор);
	
	Возврат СсылкиНаОбъектыСОшибками;
КонецФункции	

Процедура ПоместитьОшибкиВДанныеФормы(Форма, Ссылки) Экспорт 
	ОчиститьХранилищаОшибок(Форма);
	ОписаниеЭлементовСИндикациейОшибок = Форма.ОписаниеЭлементовСИндикациейОшибок();
	
	Для Каждого Ссылка Из Ссылки Цикл
		ОшибкиДокумента = ОшибкиПоДокументуИзХранилища(Форма, Ссылка);
		
		Если ОшибкиДокумента = Неопределено Тогда
			Продолжить;;
		КонецЕсли;
			
		Для Каждого Ошибка Из ОшибкиДокумента Цикл
			ПоместитьОшибкуВДанныеФормы(Форма, ОписаниеЭлементовСИндикациейОшибок, Ошибка.Путь, Ошибка.Текст, Ошибка.Поле);	
		КонецЦикла;		
	КонецЦикла;	
	
	Для Каждого ОписаниеЭлемента Из Форма["СвойстваЭлементовИндикацииОшибок"] Цикл
		ПерсонифицированныйУчетКлиентСервер.ТаблицаСИндикациейОшибокПриАктивацииСтроки(Форма, ОписаниеЭлемента.Ключ)
	КонецЦикла;
КонецПроцедуры

Процедура ПоместитьОшибкуВДанныеФормы(Форма, ОписаниеЭлементовСИндикациейОшибок, ПутьКДанным, ТекстОшибки, Поле, ЭтоПодчиненнаяОшибка = Ложь, ПомещатьПодчиненныеОшибкиВХранилище = Ложь) Экспорт 
	ПомещатьОшибкиВХранилищеРодителя = Ложь;
	
	ПутьКДаннымСтрокой = ПутьКДанным.ПутьКРеквизиту + ?(ЗначениеЗаполнено(ПутьКДанным.ИмяРеквизитаТабличнойЧасти), "." + ПутьКДанным.ИмяРеквизитаТабличнойЧасти, "");
	
	ОписаниеЭлементаФормы = ОписаниеЭлементовСИндикациейОшибок[ПутьКДаннымСтрокой];
	
	Если ОписаниеЭлементаФормы <> Неопределено Тогда
		ЭлементыПути = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПутьКДаннымСтрокой, ".");
		
		РодительскийЭлемент = Форма;
		ИндексОбрабатываемогоЭлемента = -1;
		ТаблицаФормы = Неопределено;
		
		ПутьКДаннымФормы = "";
		Для Каждого Элемент Из ЭлементыПути Цикл
			ИндексОбрабатываемогоЭлемента = ИндексОбрабатываемогоЭлемента + 1; 
			РеквизитФормы = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(РодительскийЭлемент, Элемент);
			РодительскийЭлемент = РеквизитФормы;
			
			ПутьКДаннымФормы = ПутьКДаннымФормы + ?(ПутьКДаннымФормы = "", "", ".") + Элемент; 
			
			Если ТипЗнч(РеквизитФормы) = Тип("ДанныеФормыКоллекция") Тогда
				ТаблицаФормы = РеквизитФормы;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
		Если ТаблицаФормы = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, ЭлементыПути[ЭлементыПути.Количество() - 1] + "ЕстьОшибки", Истина);
			Если ОписаниеЭлементаФормы.ВыводитьГиперссылку Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, ЭлементыПути[ЭлементыПути.Количество() - 1] + "ЕстьОшибкиКартинка", БиблиотекаКартинок.Подсказка);
			КонецЕсли;			 
		Иначе
			Если ЭлементыПути.Количество() > ИндексОбрабатываемогоЭлемента + 1 Тогда
				ИмяРеквизита = ЭлементыПути[ИндексОбрабатываемогоЭлемента + 1] + "ЕстьОшибки";
			Иначе
				ИмяРеквизита = "ЕстьОшибки";
			КонецЕсли;
			
			Если ПутьКДанным.ИндексСтроки <> -1 Тогда
				ТаблицаФормы[ПутьКДанным.ИндексСтроки][ИмяРеквизита] = Истина;
				Если ОписаниеЭлементаФормы.ВыводитьГиперссылку Тогда
					ТаблицаФормы[ПутьКДанным.ИндексСтроки][ИмяРеквизита + "Картинка"] = БиблиотекаКартинок.Подсказка;
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
		
		Если ОписаниеЭлементаФормы.ПутьКХранилищуОшибок <> Неопределено 
			И (ПомещатьПодчиненныеОшибкиВХранилище
			Или Не ЭтоПодчиненнаяОшибка) Тогда
			
			Если ОписаниеЭлементаФормы.ПутьКХранилищуОшибок = "" Тогда
				РеквизитФормы = Форма;	
			Иначе	
				РеквизитФормы = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеЭлементаФормы.ПутьКХранилищуОшибок);
			КонецЕсли;	
			
			Если ТипЗнч(РеквизитФормы) = Тип("ДанныеФормыКоллекция") Тогда
				Если ПутьКДанным.ИндексСтроки <> -1 Тогда
					ХранилищеОшибок = РеквизитФормы[ПутьКДанным.ИндексСтроки].Ошибки;
				КонецЕсли;	
			Иначе
				ХранилищеОшибок = РеквизитФормы.Ошибки;
			КонецЕсли;
			
			Если ХранилищеОшибок <> Неопределено Тогда 
				СтрокаТаблицыХранилищаОшибок = ХранилищеОшибок.Добавить();
				СтрокаТаблицыХранилищаОшибок.ТекстОшибки = ТекстОшибки;
				СтрокаТаблицыХранилищаОшибок.Поле = Поле;
			КонецЕсли;	
			
		КонецЕсли;	
		
		ПомещатьОшибкиВХранилищеРодителя = ОписаниеЭлементаФормы.ПомещатьОшибкиВХранилищеРодителя;
	КонецЕсли;	
	
	Если ПутьКДанным.Родитель <> Неопределено Тогда
		ЭлементыПути = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПутьКДанным.ПутьКРеквизиту, ".");
		
		ИмяПоляРодителя = "";
		
		Если ЭлементыПути.Количество() > 0 Тогда
			ИмяПоляРодителя = ЭлементыПути[ЭлементыПути.Количество() - 1];		
		КонецЕсли;
		
		ПоместитьОшибкуВДанныеФормы(Форма, ОписаниеЭлементовСИндикациейОшибок, ПутьКДанным.Родитель, ТекстОшибки, ИмяПоляРодителя, Истина, ПомещатьОшибкиВХранилищеРодителя);		
	КонецЕсли;	
		
КонецПроцедуры	

Процедура ПереопределитьНомераСтрокВОшибках(Форма, Ссылка) Экспорт 
	СохранитьОшибкиПоДокументу = Ложь;
	
	Если ЗначениеЗаполнено(Форма.АдресОшибокВХранилище) Тогда
		ОшибкиКомплекта = ПолучитьИзВременногоХранилища(Форма.АдресОшибокВХранилище);
		
		Если ОшибкиКомплекта <> Неопределено Тогда
			ОшибкиПоДокументу = ОшибкиКомплекта[Ссылка];
		КонецЕсли;
	КонецЕсли;	
	
	Если ОшибкиПоДокументу = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ОшибкиКУдалению = Новый Массив;
	
	Для Каждого Ошибка Из ОшибкиПоДокументу Цикл
		УдалятьОшибку = Ложь;	
		ПутьКОшибкеИзменен = Ложь;
		
		ПереопределитьНомераСтрокиВПутиКОшибке(Форма, Ошибка.Путь, УдалятьОшибку, ПутьКОшибкеИзменен);
		
		СохранитьОшибкиПоДокументу = СохранитьОшибкиПоДокументу Или УдалятьОшибку Или ПутьКОшибкеИзменен;
		
		Если УдалятьОшибку Тогда
			ОшибкиКУдалению.Добавить(Ошибка);
		КонецЕсли;	
	КонецЦикла;	
	
	Для Каждого Ошибка Из ОшибкиКУдалению Цикл
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(ОшибкиПоДокументу, Ошибка);		
	КонецЦикла;	
	
	Если СохранитьОшибкиПоДокументу Тогда
		ОшибкиКомплекта.Вставить(Ссылка, ОшибкиПоДокументу);
		
		ПоместитьВоВременноеХранилище(ОшибкиКомплекта, Форма.АдресОшибокВХранилище);
	КонецЕсли;	
КонецПроцедуры

Процедура ПереопределитьНомераСтрокиВПутиКОшибке(Форма, ПутьКДаннымОшибки, УдалятьОшибку, ПутьКОшибкеИзменен)
	Если ПутьКДаннымОшибки <> Неопределено
		И ЗначениеЗаполнено(ПутьКДаннымОшибки.ПутьКРеквизиту)
		И ПутьКДаннымОшибки.ИндексСтроки <> Неопределено
		И ПутьКДаннымОшибки.ИндексСтроки <> -1 Тогда
		
		ДанныеФормыКоллекция = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКДаннымОшибки.ПутьКРеквизиту);
		
		Если ДанныеФормыКоллекция.Количество() < ПутьКДаннымОшибки.ИндексСтроки + 1
			Или ДанныеФормыКоллекция[ПутьКДаннымОшибки.ИндексСтроки].НомерСтроки <> ДанныеФормыКоллекция[ПутьКДаннымОшибки.ИндексСтроки].ИсходныйНомерСтроки Тогда
			
			Строки = ДанныеФормыКоллекция.НайтиСтроки(Новый Структура("ИсходныйНомерСтроки", ПутьКДаннымОшибки.ИндексСтроки + 1));
			
			Если Строки.Количество() = 0 Тогда
				УдалятьОшибку = Истина;
			Иначе	
				ПутьКДаннымОшибки.ИндексСтроки = Строки[0].НомерСтроки - 1;
				ПутьКОшибкеИзменен = Истина;
			КонецЕсли;	
			
		КонецЕсли;	
		
		Если Не УдалятьОшибку Тогда
			ПереопределитьНомераСтрокиВПутиКОшибке(Форма, ПутьКДаннымОшибки.Родитель, УдалятьОшибку, ПутьКОшибкеИзменен);
    	КонецЕсли;
	КонецЕсли;			
	
КонецПроцедуры	

Процедура ОчиститьХранилищаОшибок(Форма) Экспорт 
	ОписаниеЭлементов = Форма.ОписаниеЭлементовСИндикациейОшибок();
	ОчищенныеРеквизитыИндикации = Новый Соответствие;
	ОчищенныеХранилищаОшибок = Новый Соответствие;	
	
	Для Каждого ОписаниеЭлемента Из ОписаниеЭлементов Цикл
		Если ОчищенныеРеквизитыИндикации[ОписаниеЭлемента.Ключ] <> Истина Тогда
			ПутьКРеквизитуХраненияОшибки = ПутьКРеквизитуИндикацииОшибки(Форма, ОписаниеЭлемента.Ключ);
			
			Если ПутьКРеквизитуХраненияОшибки.ПутьКДанным = "" Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, ПутьКРеквизитуХраненияОшибки.ИмяРеквизита, Ложь);
				ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, ПутьКРеквизитуХраненияОшибки.ИмяРеквизита + "Картинка", Неопределено);
			Иначе
				РеквизитФормы = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма,  ПутьКРеквизитуХраненияОшибки.ПутьКДанным);
				
				Если ТипЗнч(РеквизитФормы) = Тип("ДанныеФормыКоллекция") 
					И ПутьКРеквизитуХраненияОшибки.ИмяРеквизита <> "" Тогда 
						
					Для Каждого ЭлементКоллекции Из РеквизитФормы Цикл
						ЭлементКоллекции[ПутьКРеквизитуХраненияОшибки.ИмяРеквизита] = Ложь;
						Если ОписаниеЭлемента.Значение.ВыводитьГиперссылку Тогда
							ЭлементКоллекции[ПутьКРеквизитуХраненияОшибки.ИмяРеквизита + "Картинка"] = Неопределено;
						КонецЕсли;	
					КонецЦикла;	
				КонецЕсли;	
			КонецЕсли;
			ОчищенныеРеквизитыИндикации.Вставить(ОписаниеЭлемента.Ключ, Истина);
		КонецЕсли;	
		
		Если ОчищенныеХранилищаОшибок[ОписаниеЭлемента.Значение.ПутьКХранилищуОшибок] <> Истина Тогда
			Если ОписаниеЭлемента.Значение.ПутьКХранилищуОшибок = "" Тогда
				Форма["Ошибки"].Очистить();
			Иначе
				РеквизитФормы = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма,  ОписаниеЭлемента.Значение.ПутьКХранилищуОшибок);
				
				Если ТипЗнч(РеквизитФормы) = Тип("ДанныеФормыКоллекция") Тогда
					Для Каждого ЭлементКоллекции Из РеквизитФормы Цикл
						ЭлементКоллекции.Ошибки.Очистить();
					КонецЦикла;	
				Иначе
					РеквизитФормы.Ошибки.Очистить();			
				КонецЕсли;	
			КонецЕсли;		
			ОчищенныеХранилищаОшибок.Вставить(ОписаниеЭлемента.Значение.ПутьКХранилищуОшибок, Истина);
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры	

Функция ОшибкиПоДокументуИзХранилища(Форма, Ссылка)
	Если ЗначениеЗаполнено(Форма.АдресОшибокВХранилище) Тогда
		Ошибки = ПолучитьИзВременногоХранилища(Форма.АдресОшибокВХранилище);
		
		Если Ошибки <> Неопределено Тогда
			Возврат Ошибки.Получить(Ссылка);
		КонецЕсли;	
	КонецЕсли;	
КонецФункции

Функция СтруктуруПутиКДаннымОшибкиВФорме(ДанныеОбъекта, СтруктураПутиКДанным, СоответствиеДаннымФормы, СоответствияДляКлючейСвязи, КлючВладельца = Неопределено, КлючСвязи = Неопределено)	
	Если КлючВладельца = Неопределено
		И СтруктураПутиКДанным <> Неопределено Тогда
		
		ПутьКДанным = ПутьКДаннымОшибкиВФорме(
						СоответствиеДаннымФормы,  
						СтруктураПутиКДанным.ПутьКРеквизиту, 
						СтруктураПутиКДанным.ИмяРеквизитаТабличнойЧасти);
								
	ИначеЕсли КлючВладельца <> Неопределено Тогда						
		ПутьКДанным = СоответствиеДаннымФормы.Получить(КлючВладельца);
				
		Если ПутьКДанным <> Неопределено
			И КлючСвязи <> Неопределено Тогда			
			
			КлючСвязиСтрокой = "";
			Для Каждого КлючЗначение Из КлючСвязи Цикл
				КлючСвязиСтрокой = КлючСвязиСтрокой + "," +  ПутьКДанным.ПутьКДаннымФормы + "." + КлючЗначение.Значение;
			КонецЦикла;	
			
			КлючСвязиСтрокой = Сред(КлючСвязиСтрокой, 2);
			
			СоответствиеЗначенийПоКлючуСвязи = СоответствияДляКлючейСвязи.Получить(КлючСвязиСтрокой);
			
			РодительскаяТаблица = ДанныеОбъекта[КлючВладельца];
			
			Если СоответствиеЗначенийПоКлючуСвязи = Неопределено Тогда
				СоответствиеЗначенийПоКлючуСвязи = Новый Соответствие;	
				СоответствияДляКлючейСвязи.Вставить(КлючСвязиСтрокой, СоответствиеЗначенийПоКлючуСвязи);
				
				КоличествоПолейСвязи = КлючСвязи.Количество();
				Для Каждого СтрокаТаблицы Из РодительскаяТаблица Цикл
					СоответствиеПоляСвязи = СоответствиеЗначенийПоКлючуСвязи;
					
					НомерПоляСвязи = 1;
					Для Каждого КлючЗначение Из КлючСвязи Цикл
						Если НомерПоляСвязи = КоличествоПолейСвязи Тогда
							СоответствиеПоляСвязи.Вставить(СтрокаТаблицы[КлючЗначение.Значение], СтрокаТаблицы);	
						Иначе
							СоответствиеСледующегоУровня = Новый Соответствие;	
							СоответствиеПоляСвязи.Вставить(СтрокаТаблицы[КлючЗначение.Значение], СоответствиеСледующегоУровня);
							СоответствиеПоляСвязи = СоответствиеСледующегоУровня;
						КонецЕсли;	
						НомерПоляСвязи = НомерПоляСвязи + 1;						
					КонецЦикла;	
	
				КонецЦикла;	
				
			КонецЕсли;		
			
			ПодчиненнаяТаблица = ДанныеОбъекта[СтруктураПутиКДанным.ПутьКРеквизиту];
			ПодчиненнаяСтрока = ПодчиненнаяТаблица[СтруктураПутиКДанным.ИндексСтроки];			
				
			Для Каждого КлючЗначение Из КлючСвязи Цикл
				СоответствиеЗначенийПоКлючуСвязи = СоответствиеЗначенийПоКлючуСвязи.Получить(ПодчиненнаяСтрока[КлючЗначение.Ключ]);
			КонецЦикла;	

			СтруктураПутиКДанным = ПерсонифицированныйУчетКлиентСервер.СтруктураПутиКОшибке();
			СтруктураПутиКДанным.ПутьКРеквизиту = КлючВладельца;
			СтруктураПутиКДанным.ИндексСтроки = РодительскаяТаблица.Индекс(СоответствиеЗначенийПоКлючуСвязи);
						
		КонецЕсли;			
	Иначе 
		Возврат Неопределено;	
	КонецЕсли;	
								
	Если ПутьКДанным <> Неопределено 
		И СтруктураПутиКДанным <> Неопределено
		И СтруктураПутиКДанным.ИндексСтроки <> Неопределено Тогда	
		
		ПодСтрокаЗамены = Формат(СтруктураПутиКДанным.ИндексСтроки, "ЧН=0; ЧГ=");
		ПутьКДаннымФормы = СтрЗаменить(ПутьКДанным.ПутьКДаннымФормы, "&ИндексСтроки" + СтруктураПутиКДанным.ПутьКРеквизиту, ПодСтрокаЗамены);
	ИначеЕсли ПутьКДанным <> Неопределено Тогда
		ПутьКДаннымФормы = ПутьКДанным.ПутьКДаннымФормы;	
	КонецЕсли;	
	
	СтруктуруПутиКДаннымОшибкиВФорме = ПерсонифицированныйУчетКлиентСервер.СтруктураПутиКИсточникуОшибки(ПутьКДаннымФормы);	
	
	Если ПутьКДанным <> Неопределено 
		И ПутьКДанным.Владелец <> Неопределено Тогда
		
		СтруктуруПутиКДаннымОшибкиВФорме.Родитель = СтруктуруПутиКДаннымОшибкиВФорме(ДанныеОбъекта, СтруктураПутиКДанным, СоответствиеДаннымФормы, СоответствияДляКлючейСвязи, ПутьКДанным.Владелец, ПутьКДанным.КлючСвязи);		
	КонецЕсли;	
	
	Возврат СтруктуруПутиКДаннымОшибкиВФорме;
																	
КонецФункции	

Функция ПутьКДаннымОшибкиВФорме(СоответствиеДанныхОбъектаДаннымФормы, ПутьКДаннымОшибкиВОбъекте, ИмяРеквизитаТабличнойЧасти = Неопределено)
	
	ЭлементыПути = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПутьКДаннымОшибкиВОбъекте);
	
	Если ИмяРеквизитаТабличнойЧасти <> Неопределено Тогда
		ЭлементыПути.Добавить(ИмяРеквизитаТабличнойЧасти);		
	КонецЕсли;	
		
	ПутьКРеквизиту = "";
	
	КоличествоЭлементов = ЭлементыПути.Количество();	
	
	Для НомерЭлемента = 1 По КоличествоЭлементов - 1 Цикл
		ПутьКРеквизиту = ПутьКРеквизиту + ?(ПутьКРеквизиту = "", "", ".") + ЭлементыПути[НомерЭлемента - 1];			
	КонецЦикла;	
	
	Если ЭлементыПути.Количество() > 0 Тогда
		ПолныйПутьКРеквизиту = ПутьКРеквизиту + ?(ПутьКРеквизиту = "", "", ".") + ЭлементыПути[КоличествоЭлементов - 1];
	Иначе
		ПолныйПутьКРеквизиту = "";	
	КонецЕсли;	
	
	ОписаниеПутиВФорме = СоответствиеДанныхОбъектаДаннымФормы.Получить(ПолныйПутьКРеквизиту);
	
	Если ОписаниеПутиВФорме = Неопределено
		И ПолныйПутьКРеквизиту = "" Тогда
		
		Возврат Неопределено;
	ИначеЕсли ОписаниеПутиВФорме = Неопределено Тогда
		ОписаниеПутиВФорме = ПутьКДаннымОшибкиВФорме(СоответствиеДанныхОбъектаДаннымФормы, ПутьКРеквизиту);	
	КонецЕсли;
	
	Возврат ОписаниеПутиВФорме;
	
КонецФункции	

Функция ОписаниеОшибкиФормы()
	Возврат Новый Структура("Путь, Текст, Поле");	
КонецФункции	

Функция СсылкиНаОбъектыСОшибками(форма) Экспорт 
	СсылкиНаОбъектыСОшибками = Новый Массив;
	
	Если ЗначениеЗаполнено(Форма.АдресОшибокВХранилище) Тогда
		Ошибки = ПолучитьИзВременногоХранилища(Форма.АдресОшибокВХранилище);
		
		Если Ошибки <> Неопределено Тогда
			Для Каждого КлючЗначение Из Ошибки Цикл
				Если КлючЗначение.Значение.Количество() > 0 Тогда 
					СсылкиНаОбъектыСОшибками.Добавить(КлючЗначение.Ключ);	
				КонецЕсли;	
			КонецЦикла;			
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат СсылкиНаОбъектыСОшибками;
КонецФункции	

#Область МеханизмОтображенияЗаголовковКолонокТаблицы

Процедура ДобавитьЗаголовкиКПолямТаблицФормы(Форма, ИменаДополняемыхТаблиц, ОписаниеКолонокЗаголовковТаблицФормы) Экспорт
	
	ДобавляемыеРеквизиты = Новый Массив;
		
	Для Каждого ИмяТаблицы Из ИменаДополняемыхТаблиц Цикл
		ОписаниеКолонокЗаголовков = ОписаниеКолонокЗаголовковТаблицФормы[ИмяТаблицы];
		
		Таблица = Форма.Элементы.Найти(ИмяТаблицы);
		
		Если Таблица = Неопределено
			Или ОписаниеКолонокЗаголовков = Неопределено Тогда
			
			Продолжить;
		КонецЕсли;	
		
		ПерсонифицированныйУчетКлиентСервер.ЗаполнитьТекстыЗаголовковКолонокПоУмолчанию(Форма, ОписаниеКолонокЗаголовков);
		
		ПутьКДаннымТаблицы = Таблица.ПутьКДанным;
		Для Каждого ОписаниеЗаголовка Из ОписаниеКолонокЗаголовков Цикл
			КлассификаторСтроки = Новый КвалификаторыСтроки(СтрДлина(ОписаниеЗаголовка.Заголовок) + 1);
			
			ТипЗаголовка = Новый ОписаниеТипов("Строка", , КлассификаторСтроки);
			
			РеквизитЗаголовок = Новый РеквизитФормы(ОписаниеЗаголовка.ПолеТаблицы + "Заголовок", ТипЗаголовка, ПутьКДаннымТаблицы);
			
			ДобавляемыеРеквизиты.Добавить(РеквизитЗаголовок);	
		КонецЦикла;
		
	КонецЦикла;	
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	УсловноеОформлениеВидимостиПолей = Новый Соответствие;
	
	Для Каждого ЭлементОформления Из Форма.УсловноеОформление.Элементы Цикл
		Если ЭлементОформления.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Видимость")).Использование Тогда
			Для Каждого ОформляемоеПоле Из ЭлементОформления.Поля.Элементы Цикл
				Если ОформляемоеПоле.Использование Тогда
					ЭлементыОформленияПоля = УсловноеОформлениеВидимостиПолей.Получить(ОформляемоеПоле.Поле);
					
					Если ЭлементыОформленияПоля = Неопределено Тогда
						ЭлементыОформленияПоля = Новый Массив;
						УсловноеОформлениеВидимостиПолей.Вставить(ОформляемоеПоле.Поле, ЭлементыОформленияПоля);
					КонецЕсли;
					
					ЭлементыОформленияПоля.Добавить(ЭлементОформления);
				КонецЕсли;
			КонецЦикла;		
		КонецЕсли;	
	КонецЦикла;	
	
	Для Каждого ИмяТаблицы Из ИменаДополняемыхТаблиц Цикл
		ОписаниеКолонокЗаголовков = ОписаниеКолонокЗаголовковТаблицФормы[ИмяТаблицы];
		
		Таблица = Форма.Элементы.Найти(ИмяТаблицы);
		
		Если Таблица = Неопределено
			Или ОписаниеКолонокЗаголовков = Неопределено Тогда
			
			Продолжить;
		КонецЕсли;	
		
		ПутьКДаннымТаблицы = Таблица.ПутьКДанным;
		Для Каждого ОписаниеЗаголовка Из ОписаниеКолонокЗаголовков Цикл
			ПолеТаблицы = Форма.Элементы.Найти(ОписаниеЗаголовка.ПолеТаблицы);
			
			ПолеТаблицы.ОтображатьВШапке = Ложь;
			
			Если ПолеТаблицы = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ГруппаЗаголовка = Форма.Элементы.Вставить(ПолеТаблицы.Имя + "ЗаголовокГруппа", Тип("ГруппаФормы"), ПолеТаблицы.Родитель, ПолеТаблицы);
			ГруппаЗаголовка.Вид = ВидГруппыФормы.ГруппаКолонок;
			ГруппаЗаголовка.ОтображатьВШапке = Ложь;
			ГруппаЗаголовка.Группировка = ГруппировкаКолонок.Горизонтальная;
			
			ПолеЗаголовка = Форма.Элементы.Добавить(ПолеТаблицы.Имя + "Заголовок", Тип("ПолеФормы"), ГруппаЗаголовка);
			ПолеЗаголовка.ПутьКДанным = ПутьКДаннымТаблицы + "." + ПолеТаблицы.Имя + "Заголовок";
			ПолеЗаголовка.Вид = ВидПоляФормы.ПолеНадписи;
			ПолеЗаголовка.ТолькоПросмотр = Истина;
			ПолеЗаголовка.ОтображатьВШапке = Ложь;
			ПолеЗаголовка.Шрифт = Новый Шрифт(ПолеТаблицы.Шрифт,,,,Истина);
			ПолеЗаголовка.РастягиватьПоГоризонтали = Ложь;
			
			Если ОписаниеЗаголовка.Ширина = 0 Тогда
				ПолеЗаголовка.Ширина = СтрДлина(ОписаниеЗаголовка.Заголовок) + 1;
			Иначе
				ПолеЗаголовка.Ширина = ОписаниеЗаголовка.Ширина;
			КонецЕсли;	
			
			Форма.Элементы.Переместить(ПолеТаблицы, ГруппаЗаголовка);
			
			ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ПолеТаблицы.Имя);
			
			ЭлементыОформленияПоля = УсловноеОформлениеВидимостиПолей.Получить(ПолеКомпоновки);
			
			Если ЭлементыОформленияПоля <> Неопределено Тогда
				Для Каждого ЭлементОформления Из ЭлементыОформленияПоля Цикл
					ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
					ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ПолеЗаголовка.Имя);
				КонецЦикла;	
			КонецЕсли;	
		КонецЦикла;	
	КонецЦикла;	
	
КонецПроцедуры	

Функция ИмяЭлементаОтображенияЗаголовкаПоляТаблицы(ПолеТаблицы, ОписаниеКолонокЗаголовковТаблицы) Экспорт
	Возврат ПолеТаблицы + "Заголовок";		
КонецФункции	

Процедура УстановитьВидимостьКолонокЗаголовков(Форма, ИмяТаблицы, ОписаниеКолонокЗаголовковТаблицы) Экспорт	
	Для Каждого ОписаниеКолонки Из ОписаниеКолонокЗаголовковТаблицы Цикл
		КолонкаТаблицы = Форма.Элементы.Найти(ОписаниеКолонки.ПолеТаблицы);
		Видимость = ?(КолонкаТаблицы = Неопределено, Ложь, КолонкаТаблицы.Видимость);
		
		КолонкаЗаголовок = Форма.Элементы.Найти(ОписаниеКолонки.ПолеТаблицы + "Заголовок");
		
		Если КолонкаЗаголовок <> Неопределено Тогда
			КолонкаЗаголовок.Видимость = Видимость;
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры	

// Механизм отображения ошибок.

Функция ДобавитьЭлементСоответствияДанныхОбъектаДаннымФормы(СоответствиеДанныхОбъектаДаннымФормы, ТипОбъекта, ПутьКДаннымОбъекта, ПутьКДаннымФормы, Владелец = Неопределено, КлючСвязи = Неопределено) Экспорт	
	
	Если ТипЗнч(ТипОбъекта) = Тип("Массив") Тогда
		Для Каждого Тип Из ТипОбъекта Цикл 
			СоответствиеПолей = СоответствиеДанныхОбъектаДаннымФормы.Получить(Тип);
		
			Если СоответствиеПолей = Неопределено Тогда
				СоответствиеПолей = Новый Соответствие;
				СоответствиеДанныхОбъектаДаннымФормы.Вставить(Тип, СоответствиеПолей);	
			КонецЕсли;	
		
			СоответствиеПолей.Вставить(ПутьКДаннымОбъекта, Новый Структура("ПутьКДаннымФормы, Владелец, КлючСвязи", ПутьКДаннымФормы, Владелец, КлючСвязи));
	
		КонецЦикла;		
	Иначе		
		СоответствиеПолей = СоответствиеДанныхОбъектаДаннымФормы.Получить(ТипОбъекта);
		
		Если СоответствиеПолей = Неопределено Тогда
			СоответствиеПолей = Новый Соответствие;
			СоответствиеДанныхОбъектаДаннымФормы.Вставить(ТипОбъекта, СоответствиеПолей);	
		КонецЕсли;	
		
		СоответствиеПолей.Вставить(ПутьКДаннымОбъекта, Новый Структура("ПутьКДаннымФормы, Владелец, КлючСвязи", ПутьКДаннымФормы, Владелец, КлючСвязи));
	КонецЕсли;	
	
КонецФункции	

// Дополнение формы списка квартальной отчетности.

Процедура КвартальнаяОтчетностьПФРДополнитьКомандыФормы(Форма) Экспорт
	ПерсонифицированныйУчетВнутренний.КвартальнаяОтчетностьПФРДополнитьКомандыФормы(Форма);	
КонецПроцедуры	

Процедура КвартальнаяОтчетностьПФРОбновитьДанныеФормы(Форма) Экспорт
	ПерсонифицированныйУчетВнутренний.КвартальнаяОтчетностьПФРОбновитьДанныеФормы(Форма);	
КонецПроцедуры	

#КонецОбласти

#КонецОбласти
